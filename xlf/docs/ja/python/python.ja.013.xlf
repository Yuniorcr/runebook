<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="python">
    <body>
      <group id="python">
        <trans-unit id="44f1c1068fb3f75ecb6e1e324e661782e6111e57" translate="yes" xml:space="preserve">
          <source>If the path that &lt;em&gt;cfile&lt;/em&gt; becomes (either explicitly specified or computed) is a symlink or non-regular file, &lt;a href=&quot;exceptions#FileExistsError&quot;&gt;&lt;code&gt;FileExistsError&lt;/code&gt;&lt;/a&gt; will be raised. This is to act as a warning that import will turn those paths into regular files if it is allowed to write byte-compiled files to those paths. This is a side-effect of import using file renaming to place the final byte-compiled file into place to prevent concurrent file writing issues.</source>
          <target state="translated">&lt;em&gt;cfile&lt;/em&gt;が（明示的に指定または計算されて）なるパスがシンボリックリンクまたは通常でないファイルである場合、&lt;a href=&quot;exceptions#FileExistsError&quot;&gt; &lt;code&gt;FileExistsError&lt;/code&gt; &lt;/a&gt;が発生します。これは、バイトコンパイルされたファイルをこれらのパスに書き込むことが許可されている場合、インポートによってこれらのパスが通常のファイルに変わるという警告として機能します。これは、ファイルの名前変更を使用したインポートの副作用であり、最終的なバイトコンパイルファイルを配置して、ファイルの同時書き込みの問題を防止します。</target>
        </trans-unit>
        <trans-unit id="ae2d2687ad3551ef8bd1472c724bb07372b1e0e7" translate="yes" xml:space="preserve">
          <source>If the platform supports the &lt;a href=&quot;#os.putenv&quot;&gt;&lt;code&gt;putenv()&lt;/code&gt;&lt;/a&gt; function, this mapping may be used to modify the environment as well as query the environment. &lt;a href=&quot;#os.putenv&quot;&gt;&lt;code&gt;putenv()&lt;/code&gt;&lt;/a&gt; will be called automatically when the mapping is modified.</source>
          <target state="translated">プラットフォームが&lt;a href=&quot;#os.putenv&quot;&gt; &lt;code&gt;putenv()&lt;/code&gt; &lt;/a&gt;関数をサポートしている場合、このマッピングを使用して、環境を変更したり、環境を照会したりできます。&lt;a href=&quot;#os.putenv&quot;&gt; &lt;code&gt;putenv()&lt;/code&gt; &lt;/a&gt;は、マッピングが変更されると自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="359b0fc2d0ac172f51521bc634e7ed8e651ae47d" translate="yes" xml:space="preserve">
          <source>If the platform supports the &lt;a href=&quot;#os.unsetenv&quot;&gt;&lt;code&gt;unsetenv()&lt;/code&gt;&lt;/a&gt; function, you can delete items in this mapping to unset environment variables. &lt;a href=&quot;#os.unsetenv&quot;&gt;&lt;code&gt;unsetenv()&lt;/code&gt;&lt;/a&gt; will be called automatically when an item is deleted from &lt;code&gt;os.environ&lt;/code&gt;, and when one of the &lt;code&gt;pop()&lt;/code&gt; or &lt;code&gt;clear()&lt;/code&gt; methods is called.</source>
          <target state="translated">プラットフォームが&lt;a href=&quot;#os.unsetenv&quot;&gt; &lt;code&gt;unsetenv()&lt;/code&gt; &lt;/a&gt;関数をサポートしている場合は、このマッピングの項目を削除して、環境変数を設定解除できます。&lt;a href=&quot;#os.unsetenv&quot;&gt; &lt;code&gt;unsetenv()&lt;/code&gt; &lt;/a&gt;は、項目が &lt;code&gt;os.environ&lt;/code&gt; から削除されたとき、および &lt;code&gt;pop()&lt;/code&gt; または &lt;code&gt;clear()&lt;/code&gt; メソッドのいずれかが呼び出されたときに自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c98e4ced54c3de726831a13682ac05eaffe4094a" translate="yes" xml:space="preserve">
          <source>If the priority of a task changes, how do you move it to a new position in the heap?</source>
          <target state="translated">タスクの優先順位が変わった場合、ヒープ内の新しい位置に移動させるにはどうすればいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="a498076041fadf1d07bb9300b846a643e776f60f" translate="yes" xml:space="preserve">
          <source>If the process does not terminate after &lt;em&gt;timeout&lt;/em&gt; seconds, a &lt;a href=&quot;#subprocess.TimeoutExpired&quot;&gt;&lt;code&gt;TimeoutExpired&lt;/code&gt;&lt;/a&gt; exception will be raised. Catching this exception and retrying communication will not lose any output.</source>
          <target state="translated">プロセスが&lt;em&gt;timeout&lt;/em&gt;秒後に終了しない場合、&lt;a href=&quot;#subprocess.TimeoutExpired&quot;&gt; &lt;code&gt;TimeoutExpired&lt;/code&gt; &lt;/a&gt;例外が発生します。この例外をキャッチして通信を再試行しても、出力は失われません。</target>
        </trans-unit>
        <trans-unit id="1d9458f7fed96d843f923a0a12238a4b1050fd9f" translate="yes" xml:space="preserve">
          <source>If the process does not terminate after &lt;em&gt;timeout&lt;/em&gt; seconds, raise a &lt;a href=&quot;#subprocess.TimeoutExpired&quot;&gt;&lt;code&gt;TimeoutExpired&lt;/code&gt;&lt;/a&gt; exception. It is safe to catch this exception and retry the wait.</source>
          <target state="translated">&lt;em&gt;timeout&lt;/em&gt;秒後にプロセスが終了しない場合は、&lt;a href=&quot;#subprocess.TimeoutExpired&quot;&gt; &lt;code&gt;TimeoutExpired&lt;/code&gt; &lt;/a&gt;例外を発生させます。この例外をキャッチして待機を再試行しても安全です。</target>
        </trans-unit>
        <trans-unit id="29bf9cf7b23c8ae6d712f6a347508cd693444005" translate="yes" xml:space="preserve">
          <source>If the process exited normally (if &lt;code&gt;WIFEXITED(status)&lt;/code&gt; is true), return the process exit status (return &lt;code&gt;WEXITSTATUS(status)&lt;/code&gt;): result greater than or equal to 0.</source>
          <target state="translated">プロセスが正常に終了した場合（ &lt;code&gt;WIFEXITED(status)&lt;/code&gt; がtrueの場合）、プロセスの終了ステータスを返します（ &lt;code&gt;WEXITSTATUS(status)&lt;/code&gt; を返します）：結果は0以上です。</target>
        </trans-unit>
        <trans-unit id="053fd58ab602e7071a8906f099acb443c648c32b" translate="yes" xml:space="preserve">
          <source>If the process runs longer than &lt;em&gt;timeout&lt;/em&gt; seconds (&lt;a href=&quot;#test.support.SHORT_TIMEOUT&quot;&gt;&lt;code&gt;SHORT_TIMEOUT&lt;/code&gt;&lt;/a&gt; by default), kill the process and raise an &lt;a href=&quot;exceptions#AssertionError&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt;. The timeout feature is not available on Windows.</source>
          <target state="translated">プロセスが&lt;em&gt;タイムアウト&lt;/em&gt;秒（デフォルトでは&lt;a href=&quot;#test.support.SHORT_TIMEOUT&quot;&gt; &lt;code&gt;SHORT_TIMEOUT&lt;/code&gt; &lt;/a&gt;）より長く実行される場合は、プロセスを強制&lt;em&gt;終了し&lt;/em&gt;て&lt;a href=&quot;exceptions#AssertionError&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; を発生させ&lt;/a&gt;ます。タイムアウト機能はWindowsでは使用できません。</target>
        </trans-unit>
        <trans-unit id="69ed2fec98f279431226b0412fb7368d8cbf983e" translate="yes" xml:space="preserve">
          <source>If the process was terminated by a signal (if &lt;code&gt;WIFSIGNALED(status)&lt;/code&gt; is true), return &lt;code&gt;-signum&lt;/code&gt; where &lt;em&gt;signum&lt;/em&gt; is the number of the signal that caused the process to terminate (return &lt;code&gt;-WTERMSIG(status)&lt;/code&gt;): result less than 0.</source>
          <target state="translated">（場合、プロセスがシグナルによって終了した場合 &lt;code&gt;WIFSIGNALED(status)&lt;/code&gt; 真である）、リターン &lt;code&gt;-signum&lt;/code&gt; &lt;em&gt;シグナムは&lt;/em&gt;（戻り終了するプロセス起因の信号の数である &lt;code&gt;-WTERMSIG(status)&lt;/code&gt; 0以上の結果は、：）。</target>
        </trans-unit>
        <trans-unit id="f7262122dc4b6b829f446558da074d130b2a5add" translate="yes" xml:space="preserve">
          <source>If the queue was initialized with &lt;code&gt;maxsize=0&lt;/code&gt; (the default), then &lt;a href=&quot;#asyncio.Queue.full&quot;&gt;&lt;code&gt;full()&lt;/code&gt;&lt;/a&gt; never returns &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">キューが &lt;code&gt;maxsize=0&lt;/code&gt; （デフォルト）で初期化された場合、&lt;a href=&quot;#asyncio.Queue.full&quot;&gt; &lt;code&gt;full()&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;True&lt;/code&gt; を返しません。</target>
        </trans-unit>
        <trans-unit id="d78a8ec352511b839919bc03232ce959083bf45a" translate="yes" xml:space="preserve">
          <source>If the referent is unpicklable then this will raise an exception.</source>
          <target state="translated">リファレンタがpicklableでない場合は、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="91ada59b96a0d8cfa6712ce3f61b93c29c1b67a6" translate="yes" xml:space="preserve">
          <source>If the referent no longer exists, calling the reference object returns &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">指示対象が存在しない場合、参照オブジェクトを呼び出すと&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="909c01304c9716dba0fff5875fca0ce88ce2dc59" translate="yes" xml:space="preserve">
          <source>If the regular expression uses the &lt;code&gt;(?P&amp;lt;name&amp;gt;...)&lt;/code&gt; syntax, the &lt;em&gt;groupN&lt;/em&gt; arguments may also be strings identifying groups by their group name. If a string argument is not used as a group name in the pattern, an &lt;a href=&quot;exceptions#IndexError&quot;&gt;&lt;code&gt;IndexError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">正規表現が &lt;code&gt;(?P&amp;lt;name&amp;gt;...)&lt;/code&gt; 構文を使用する場合、&lt;em&gt;groupN&lt;/em&gt;引数は、グループ名でグループを識別する文字列にすることもできます。文字列引数がパターンのグループ名として使用されていない場合、&lt;a href=&quot;exceptions#IndexError&quot;&gt; &lt;code&gt;IndexError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="9150bc1a07c7bb0e57bdc9eaf32d4f61f9798eda" translate="yes" xml:space="preserve">
          <source>If the reply matches the digest of the message using &lt;em&gt;authkey&lt;/em&gt; as the key then a welcome message is sent to the other end of the connection. Otherwise &lt;a href=&quot;#multiprocessing.AuthenticationError&quot;&gt;&lt;code&gt;AuthenticationError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">応答が&lt;em&gt;authkey&lt;/em&gt;をキーとして使用してメッセージのダイジェストと一致する場合、ウェルカムメッセージが接続の相手側に送信されます。それ以外の場合、&lt;a href=&quot;#multiprocessing.AuthenticationError&quot;&gt; &lt;code&gt;AuthenticationError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="335f0408ae4594f8d3341768174fc78d95715a5d" translate="yes" xml:space="preserve">
          <source>If the request was mapped to a directory, the directory is checked for a file named &lt;code&gt;index.html&lt;/code&gt; or &lt;code&gt;index.htm&lt;/code&gt; (in that order). If found, the file&amp;rsquo;s contents are returned; otherwise a directory listing is generated by calling the &lt;code&gt;list_directory()&lt;/code&gt; method. This method uses &lt;a href=&quot;os#os.listdir&quot;&gt;&lt;code&gt;os.listdir()&lt;/code&gt;&lt;/a&gt; to scan the directory, and returns a &lt;code&gt;404&lt;/code&gt; error response if the &lt;a href=&quot;os#os.listdir&quot;&gt;&lt;code&gt;listdir()&lt;/code&gt;&lt;/a&gt; fails.</source>
          <target state="translated">リクエストがディレクトリにマッピングされている場合、ディレクトリは、 &lt;code&gt;index.html&lt;/code&gt; または &lt;code&gt;index.htm&lt;/code&gt; という名前のファイルが（この順序で）チェックされます。見つかった場合、ファイルの内容が返されます。それ以外の場合は、 &lt;code&gt;list_directory()&lt;/code&gt; メソッドを呼び出すことによってディレクトリリストが生成されます。このメソッドは&lt;a href=&quot;os#os.listdir&quot;&gt; &lt;code&gt;os.listdir()&lt;/code&gt; &lt;/a&gt;を使用してディレクトリをスキャンし、&lt;a href=&quot;os#os.listdir&quot;&gt; &lt;code&gt;listdir()&lt;/code&gt; &lt;/a&gt;が失敗した場合は &lt;code&gt;404&lt;/code&gt; エラー応答を返します。</target>
        </trans-unit>
        <trans-unit id="785b81ecc43784be1a5372c2c81457edd17d9681" translate="yes" xml:space="preserve">
          <source>If the request was mapped to a file, it is opened. Any &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; exception in opening the requested file is mapped to a &lt;code&gt;404&lt;/code&gt;, &lt;code&gt;'File not found'&lt;/code&gt; error. If there was a &lt;code&gt;'If-Modified-Since'&lt;/code&gt; header in the request, and the file was not modified after this time, a &lt;code&gt;304&lt;/code&gt;, &lt;code&gt;'Not Modified'&lt;/code&gt; response is sent. Otherwise, the content type is guessed by calling the &lt;code&gt;guess_type()&lt;/code&gt; method, which in turn uses the &lt;em&gt;extensions_map&lt;/em&gt; variable, and the file contents are returned.</source>
          <target state="translated">リクエストがファイルにマッピングされていた場合、それが開かれます。どれでも&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; のを&lt;/a&gt;要求されたファイルを開くことで例外がマップされ &lt;code&gt;404&lt;/code&gt; 、 &lt;code&gt;'File not found'&lt;/code&gt; エラーが発生しました。あった場合は &lt;code&gt;'If-Modified-Since'&lt;/code&gt; 要求のヘッダ、およびファイルがこの時間の後に変更されなかった、 &lt;code&gt;304&lt;/code&gt; は、 &lt;code&gt;'Not Modified'&lt;/code&gt; 応答が送信されます。それ以外の場合は、 &lt;code&gt;guess_type()&lt;/code&gt; メソッドを呼び出すことでコンテンツタイプが推測され、&lt;em&gt;extensions_map&lt;/em&gt;変数が順に使用され、ファイルのコンテンツが返されます。</target>
        </trans-unit>
        <trans-unit id="164f68a4853c0030aecaf77543f70404dffd338d" translate="yes" xml:space="preserve">
          <source>If the requested module already exists in &lt;a href=&quot;sys#sys.modules&quot;&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt;, that module should be used and reloaded. Otherwise the loader should create a new module and insert it into &lt;a href=&quot;sys#sys.modules&quot;&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt; before any loading begins, to prevent recursion from the import. If the loader inserted a module and the load fails, it must be removed by the loader from &lt;a href=&quot;sys#sys.modules&quot;&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt;; modules already in &lt;a href=&quot;sys#sys.modules&quot;&gt;&lt;code&gt;sys.modules&lt;/code&gt;&lt;/a&gt; before the loader began execution should be left alone (see &lt;a href=&quot;#importlib.util.module_for_loader&quot;&gt;&lt;code&gt;importlib.util.module_for_loader()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">要求されたモジュールが&lt;a href=&quot;sys#sys.modules&quot;&gt; &lt;code&gt;sys.modules&lt;/code&gt; &lt;/a&gt;にすでに存在する場合は、そのモジュールを使用して再ロードする必要があります。それ以外の場合、ローダーは、読み込みが始まる前に新しいモジュールを作成して&lt;a href=&quot;sys#sys.modules&quot;&gt; &lt;code&gt;sys.modules&lt;/code&gt; &lt;/a&gt;に挿入し、インポートからの再帰を防止する必要があります。ローダーがモジュールを挿入し、ロードが失敗した場合は、ローダーによって&lt;a href=&quot;sys#sys.modules&quot;&gt; &lt;code&gt;sys.modules&lt;/code&gt; &lt;/a&gt;から削除する必要があります。ローダーが実行を開始する前にすでに&lt;a href=&quot;sys#sys.modules&quot;&gt; &lt;code&gt;sys.modules&lt;/code&gt; &lt;/a&gt;にあるモジュールは、そのままにしておく必要があります（&lt;a href=&quot;#importlib.util.module_for_loader&quot;&gt; &lt;code&gt;importlib.util.module_for_loader()&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="03b4e196b2e9acd5ba4a384dea909aa2a6ee615a" translate="yes" xml:space="preserve">
          <source>If the resource cannot be found, &lt;a href=&quot;exceptions#FileNotFoundError&quot;&gt;&lt;code&gt;FileNotFoundError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">リソースが見つからない場合、&lt;a href=&quot;exceptions#FileNotFoundError&quot;&gt; &lt;code&gt;FileNotFoundError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="0df3e09c5b36021f773ac46f41a2c43194c9fca6" translate="yes" xml:space="preserve">
          <source>If the resource cleanup isn&amp;rsquo;t already neatly bundled into a standalone function, then it is still possible to use the decorator form of &lt;a href=&quot;#contextlib.ExitStack.callback&quot;&gt;&lt;code&gt;ExitStack.callback()&lt;/code&gt;&lt;/a&gt; to declare the resource cleanup in advance:</source>
          <target state="translated">リソースのクリーンアップがスタンドアロン関数にきちんとバンドルされていない場合でも、&lt;a href=&quot;#contextlib.ExitStack.callback&quot;&gt; &lt;code&gt;ExitStack.callback()&lt;/code&gt; の&lt;/a&gt;デコレータ形式を使用して、リソースのクリーンアップを事前に宣言できます。</target>
        </trans-unit>
        <trans-unit id="da1ab5f376bf69b7b54158c8e22471cb84fdbe8d" translate="yes" xml:space="preserve">
          <source>If the resource does not concretely exist on the file system, raise &lt;a href=&quot;exceptions#FileNotFoundError&quot;&gt;&lt;code&gt;FileNotFoundError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">リソースがファイルシステムに具体的に存在しない場合は、&lt;a href=&quot;exceptions#FileNotFoundError&quot;&gt; &lt;code&gt;FileNotFoundError&lt;/code&gt; を送出し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e8f1ce475d9c36397896ac205e613c6b1f406f21" translate="yes" xml:space="preserve">
          <source>If the result is zero then its sign will be the sign of &lt;em&gt;self&lt;/em&gt;.</source>
          <target state="translated">結果がゼロの場合、その符号は&lt;em&gt;自己の&lt;/em&gt;符号になります。</target>
        </trans-unit>
        <trans-unit id="5a98dda2c1e7c49ba619d9723afd406089bc22f0" translate="yes" xml:space="preserve">
          <source>If the return code was non-zero it raises a &lt;a href=&quot;#subprocess.CalledProcessError&quot;&gt;&lt;code&gt;CalledProcessError&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#subprocess.CalledProcessError&quot;&gt;&lt;code&gt;CalledProcessError&lt;/code&gt;&lt;/a&gt; object will have the return code in the &lt;a href=&quot;#subprocess.CalledProcessError.returncode&quot;&gt;&lt;code&gt;returncode&lt;/code&gt;&lt;/a&gt; attribute and any output in the &lt;a href=&quot;#subprocess.CalledProcessError.output&quot;&gt;&lt;code&gt;output&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">戻りコードがゼロ以外の場合は、&lt;a href=&quot;#subprocess.CalledProcessError&quot;&gt; &lt;code&gt;CalledProcessError&lt;/code&gt; が発生し&lt;/a&gt;ます。&lt;a href=&quot;#subprocess.CalledProcessError&quot;&gt; &lt;code&gt;CalledProcessError&lt;/code&gt; の&lt;/a&gt;オブジェクトがでリターンコードを持っています&lt;a href=&quot;#subprocess.CalledProcessError.returncode&quot;&gt; &lt;code&gt;returncode&lt;/code&gt; &lt;/a&gt;属性とのいずれかの出力&lt;a href=&quot;#subprocess.CalledProcessError.output&quot;&gt; &lt;code&gt;output&lt;/code&gt; &lt;/a&gt;属性。</target>
        </trans-unit>
        <trans-unit id="1499f9fffce42eacfcc4c16359b64bca87b01b5c" translate="yes" xml:space="preserve">
          <source>If the return value &lt;em&gt;is&lt;/em&gt; an iterator, then iterating over it once will consume it and subsequent iterations will result in an empty list:</source>
          <target state="translated">戻り値&lt;em&gt;が&lt;/em&gt;イテレータである場合、それを1回反復すると消費され、その後の反復では空のリストが生成されます。</target>
        </trans-unit>
        <trans-unit id="108f2d44c66943b7534256bc63b5f502b9a8ba5a" translate="yes" xml:space="preserve">
          <source>If the root is reached, and it has a level of NOTSET, then all messages will be processed. Otherwise, the root&amp;rsquo;s level will be used as the effective level.</source>
          <target state="translated">ルートに到達し、レベルがNOTSETの場合、すべてのメッセージが処理されます。それ以外の場合は、ルートのレベルが有効レベルとして使用されます。</target>
        </trans-unit>
        <trans-unit id="09d539352f4b8bde471c4c7a5b1b7605d75d424f" translate="yes" xml:space="preserve">
          <source>If the sample size is larger than the population size, a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">標本サイズが母集団サイズより大きい場合、&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="5d4676a6fdc2402cf5a3dbbb4a4b2ed50deb25ed" translate="yes" xml:space="preserve">
          <source>If the second argument is omitted, the super object returned is unbound. If the second argument is an object, &lt;code&gt;isinstance(obj, type)&lt;/code&gt; must be true. If the second argument is a type, &lt;code&gt;issubclass(type2, type)&lt;/code&gt; must be true (this is useful for classmethods).</source>
          <target state="translated">2番目の引数を省略すると、返されるスーパーオブジェクトはバインドされません。2番目の引数がオブジェクトの場合、 &lt;code&gt;isinstance(obj, type)&lt;/code&gt; はtrueでなければなりません。2番目の引数が型の場合、 &lt;code&gt;issubclass(type2, type)&lt;/code&gt; はtrueでなければなりません（これはクラスメソッドに役立ちます）。</target>
        </trans-unit>
        <trans-unit id="5001076d001501658658c23588861355b9db6f5b" translate="yes" xml:space="preserve">
          <source>If the signal is not trapped (default), mixing floats and Decimals is permitted in the &lt;a href=&quot;#decimal.Decimal&quot;&gt;&lt;code&gt;Decimal&lt;/code&gt;&lt;/a&gt; constructor, &lt;a href=&quot;#decimal.Context.create_decimal&quot;&gt;&lt;code&gt;create_decimal()&lt;/code&gt;&lt;/a&gt; and all comparison operators. Both conversion and comparisons are exact. Any occurrence of a mixed operation is silently recorded by setting &lt;a href=&quot;#decimal.FloatOperation&quot;&gt;&lt;code&gt;FloatOperation&lt;/code&gt;&lt;/a&gt; in the context flags. Explicit conversions with &lt;a href=&quot;#decimal.Decimal.from_float&quot;&gt;&lt;code&gt;from_float()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#decimal.Context.create_decimal_from_float&quot;&gt;&lt;code&gt;create_decimal_from_float()&lt;/code&gt;&lt;/a&gt; do not set the flag.</source>
          <target state="translated">信号がトラップされない場合（デフォルト）、&lt;a href=&quot;#decimal.Decimal&quot;&gt; &lt;code&gt;Decimal&lt;/code&gt; &lt;/a&gt;コンストラクター、&lt;a href=&quot;#decimal.Context.create_decimal&quot;&gt; &lt;code&gt;create_decimal()&lt;/code&gt; &lt;/a&gt;およびすべての比較演算子で浮動小数点数とDecimalsの混合が許可されます。変換と比較はどちらも正確です。混合操作の発生は、コンテキストフラグに&lt;a href=&quot;#decimal.FloatOperation&quot;&gt; &lt;code&gt;FloatOperation&lt;/code&gt; &lt;/a&gt;を設定することにより、通知なしで記録されます。&lt;a href=&quot;#decimal.Decimal.from_float&quot;&gt; &lt;code&gt;from_float()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#decimal.Context.create_decimal_from_float&quot;&gt; &lt;code&gt;create_decimal_from_float()&lt;/code&gt; を使用&lt;/a&gt;した明示的な変換では、フラグは設定されません。</target>
        </trans-unit>
        <trans-unit id="5eb98687458be9bdfcd1779f07871d42fe11615b" translate="yes" xml:space="preserve">
          <source>If the specified check is not supported, an &lt;a href=&quot;#lzma.LZMAError&quot;&gt;&lt;code&gt;LZMAError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">指定されたチェックがサポートされていない場合、&lt;a href=&quot;#lzma.LZMAError&quot;&gt; &lt;code&gt;LZMAError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="5b54c9f0cfe02eb7352da72b9945e23c261ee5f4" translate="yes" xml:space="preserve">
          <source>If the specified sound cannot be found, do not play the system default sound.</source>
          <target state="translated">指定したサウンドが見つからない場合は、システムデフォルトのサウンドを再生しないでください。</target>
        </trans-unit>
        <trans-unit id="778c39a7849194812f3b69dbd53ec4638f531eda" translate="yes" xml:space="preserve">
          <source>If the specified value is &lt;code&gt;True&lt;/code&gt;, the configuration is processed as described in the section on &lt;a href=&quot;#logging-config-dict-incremental&quot;&gt;Incremental Configuration&lt;/a&gt;.</source>
          <target state="translated">指定された値が &lt;code&gt;True&lt;/code&gt; の場合、構成は&lt;a href=&quot;#logging-config-dict-incremental&quot;&gt;インクリメンタル構成の&lt;/a&gt;セクションで説明されているように処理されます。</target>
        </trans-unit>
        <trans-unit id="06cc8f856e11dad88ac598335b513ab61be78c92" translate="yes" xml:space="preserve">
          <source>If the start method has not been fixed and &lt;em&gt;allow_none&lt;/em&gt; is false, then the start method is fixed to the default and the name is returned. If the start method has not been fixed and &lt;em&gt;allow_none&lt;/em&gt; is true then &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="translated">startメソッドが固定されておらず、&lt;em&gt;allow_none&lt;/em&gt;がfalseの場合、startメソッドはデフォルトに固定され、名前が返されます。startメソッドが修正されておらず、&lt;em&gt;allow_none&lt;/em&gt;がtrueの場合、 &lt;code&gt;None&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="8dc33b40746a00e1cdecb86672318e2613660654" translate="yes" xml:space="preserve">
          <source>If the string ends with the &lt;em&gt;suffix&lt;/em&gt; string and that &lt;em&gt;suffix&lt;/em&gt; is not empty, return &lt;code&gt;string[:-len(suffix)]&lt;/code&gt;. Otherwise, return a copy of the original string:</source>
          <target state="translated">文字列が&lt;em&gt;サフィックス&lt;/em&gt;文字列で終わり、その&lt;em&gt;サフィックス&lt;/em&gt;が空でない場合は、 &lt;code&gt;string[:-len(suffix)]&lt;/code&gt; 返します。それ以外の場合は、元の文字列のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="da4843e8d12f8d5f0a56e982e7b90def6480848b" translate="yes" xml:space="preserve">
          <source>If the string starts with the &lt;em&gt;prefix&lt;/em&gt; string, return &lt;code&gt;string[len(prefix):]&lt;/code&gt;. Otherwise, return a copy of the original string:</source>
          <target state="translated">文字列が&lt;em&gt;プレフィックス&lt;/em&gt;文字列で始まる場合は、string &lt;code&gt;string[len(prefix):]&lt;/code&gt; 返します。それ以外の場合は、元の文字列のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="1b8c9208a62d78a294576a65a53059a1c5f6f17a" translate="yes" xml:space="preserve">
          <source>If the subclass overrides the constructor, it must make sure to invoke the base class constructor (&lt;code&gt;Thread.__init__()&lt;/code&gt;) before doing anything else to the thread.</source>
          <target state="translated">サブクラスがコンストラクターをオーバーライドする場合は、スレッドに対して何かを行う前に、必ず基本クラスコンストラクター（ &lt;code&gt;Thread.__init__()&lt;/code&gt; ）を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="acce8b93fe985a72766f9ac89c69d8af02e986e6" translate="yes" xml:space="preserve">
          <source>If the submitted form data contains more than one field with the same name, the object retrieved by &lt;code&gt;form[key]&lt;/code&gt; is not a &lt;code&gt;FieldStorage&lt;/code&gt; or &lt;code&gt;MiniFieldStorage&lt;/code&gt; instance but a list of such instances. Similarly, in this situation, &lt;code&gt;form.getvalue(key)&lt;/code&gt; would return a list of strings. If you expect this possibility (when your HTML form contains multiple fields with the same name), use the &lt;a href=&quot;#cgi.FieldStorage.getlist&quot;&gt;&lt;code&gt;getlist()&lt;/code&gt;&lt;/a&gt; method, which always returns a list of values (so that you do not need to special-case the single item case). For example, this code concatenates any number of username fields, separated by commas:</source>
          <target state="translated">送信されたフォームデータに同じ名前のフィールドが複数含まれている場合、 &lt;code&gt;form[key]&lt;/code&gt; によって取得されるオブジェクトは、 &lt;code&gt;FieldStorage&lt;/code&gt; または &lt;code&gt;MiniFieldStorage&lt;/code&gt; インスタンスではなく、そのようなインスタンスのリストです。同様に、この状況では、 &lt;code&gt;form.getvalue(key)&lt;/code&gt; は文字列のリストを返します。この可能性が予想される場合（HTMLフォームに同じ名前の複数のフィールドが含まれている場合）、常に値のリストを返す&lt;a href=&quot;#cgi.FieldStorage.getlist&quot;&gt; &lt;code&gt;getlist()&lt;/code&gt; &lt;/a&gt;メソッドを使用します（単一アイテムのケースを特別なケースにする必要がないようにするため）。たとえば、次のコードは、カンマで区切られた任意の数のユーザー名フィールドを連結します。</target>
        </trans-unit>
        <trans-unit id="5ca69890189daafd25a2e36e6b3b7787040e88e4" translate="yes" xml:space="preserve">
          <source>If the subprocess hasn&amp;rsquo;t returned yet, and close transports of &lt;em&gt;stdin&lt;/em&gt;, &lt;em&gt;stdout&lt;/em&gt;, and &lt;em&gt;stderr&lt;/em&gt; pipes.</source>
          <target state="translated">サブプロセスがまだ戻っていない場合、&lt;em&gt;stdin&lt;/em&gt;、&lt;em&gt;stdout&lt;/em&gt;、および&lt;em&gt;stderr&lt;/em&gt;パイプのトランスポートを閉じます。</target>
        </trans-unit>
        <trans-unit id="97b2ccdb92b73cedf9597250b83de25464d1e506" translate="yes" xml:space="preserve">
          <source>If the supplied path directly references a script file (whether as source or as precompiled byte code), then &lt;code&gt;__file__&lt;/code&gt; will be set to the supplied path, and &lt;code&gt;__spec__&lt;/code&gt;, &lt;code&gt;__cached__&lt;/code&gt;, &lt;code&gt;__loader__&lt;/code&gt; and &lt;code&gt;__package__&lt;/code&gt; will all be set to &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">供給されたパスは、直接スクリプトファイル（ソースとして、またはコンパイル済みバイトコードとしてかどうか）を参照する場合、 &lt;code&gt;__file__&lt;/code&gt; 供給されたパスに設定され、 &lt;code&gt;__spec__&lt;/code&gt; 、 &lt;code&gt;__cached__&lt;/code&gt; 、 &lt;code&gt;__loader__&lt;/code&gt; と &lt;code&gt;__package__&lt;/code&gt; すべてに設定されます&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c60916833581a918770fd11c43105b09a19f5fd3" translate="yes" xml:space="preserve">
          <source>If the supplied path is a reference to a valid sys.path entry, then &lt;code&gt;__spec__&lt;/code&gt; will be set appropriately for the imported &lt;code&gt;__main__&lt;/code&gt; module (that is, &lt;code&gt;__spec__.name&lt;/code&gt; will always be &lt;code&gt;__main__&lt;/code&gt;). &lt;code&gt;__file__&lt;/code&gt;, &lt;code&gt;__cached__&lt;/code&gt;, &lt;code&gt;__loader__&lt;/code&gt; and &lt;code&gt;__package__&lt;/code&gt; will be &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#import-mod-attrs&quot;&gt;set as normal&lt;/a&gt; based on the module spec.</source>
          <target state="translated">指定されたパスが有効なsys.pathエントリへの参照である場合、 &lt;code&gt;__spec__&lt;/code&gt; はインポートされた &lt;code&gt;__main__&lt;/code&gt; モジュールに適切に設定されます（つまり、 &lt;code&gt;__spec__.name&lt;/code&gt; は常に &lt;code&gt;__main__&lt;/code&gt; になります）。 &lt;code&gt;__file__&lt;/code&gt; 、 &lt;code&gt;__cached__&lt;/code&gt; 、 &lt;code&gt;__loader__&lt;/code&gt; と &lt;code&gt;__package__&lt;/code&gt; する&lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#import-mod-attrs&quot;&gt;正常に設定&lt;/a&gt;モジュール仕様に基づきます。</target>
        </trans-unit>
        <trans-unit id="0f2aeb9c49d543acbef15ce0272a7d7b10a0003a" translate="yes" xml:space="preserve">
          <source>If the supplied path is a reference to a valid sys.path entry, then &lt;code&gt;__spec__&lt;/code&gt; will be set appropriately for the imported &lt;code&gt;__main__&lt;/code&gt; module (that is, &lt;code&gt;__spec__.name&lt;/code&gt; will always be &lt;code&gt;__main__&lt;/code&gt;). &lt;code&gt;__file__&lt;/code&gt;, &lt;code&gt;__cached__&lt;/code&gt;, &lt;code&gt;__loader__&lt;/code&gt; and &lt;code&gt;__package__&lt;/code&gt; will be &lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#import-mod-attrs&quot;&gt;set as normal&lt;/a&gt; based on the module spec.</source>
          <target state="translated">指定されたパスが有効なsys.pathエントリへの参照である場合、インポートされた &lt;code&gt;__main__&lt;/code&gt; モジュールに対して &lt;code&gt;__spec__&lt;/code&gt; が適切に設定されます（つまり、 &lt;code&gt;__spec__.name&lt;/code&gt; は常に &lt;code&gt;__main__&lt;/code&gt; になります）。 &lt;code&gt;__file__&lt;/code&gt; 、 &lt;code&gt;__cached__&lt;/code&gt; 、 &lt;code&gt;__loader__&lt;/code&gt; と &lt;code&gt;__package__&lt;/code&gt; する&lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#import-mod-attrs&quot;&gt;正常に設定&lt;/a&gt;モジュール仕様に基づきます。</target>
        </trans-unit>
        <trans-unit id="1adf55313515a9d46f4badde3d9f05bb3bac807d" translate="yes" xml:space="preserve">
          <source>If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an &lt;a href=&quot;exceptions#InterruptedError&quot;&gt;&lt;code&gt;InterruptedError&lt;/code&gt;&lt;/a&gt; exception (see &lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt; for the rationale).</source>
          <target state="translated">システムコールが中断され、シグナルハンドラーが例外を発生させない場合、関数は、&lt;a href=&quot;exceptions#InterruptedError&quot;&gt; &lt;code&gt;InterruptedError&lt;/code&gt; &lt;/a&gt;例外を発生させる代わりにシステムコールを再試行します（根拠については&lt;a href=&quot;https://www.python.org/dev/peps/pep-0475&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;PEP 475&lt;/strong&gt;&lt;/a&gt;を参照してください）。</target>
        </trans-unit>
        <trans-unit id="a6d43cf81da71fff4123417dbbd417d2066dd963" translate="yes" xml:space="preserve">
          <source>If the system has little free memory, snapshots can be written on disk using the &lt;a href=&quot;#tracemalloc.Snapshot.dump&quot;&gt;&lt;code&gt;Snapshot.dump()&lt;/code&gt;&lt;/a&gt; method to analyze the snapshot offline. Then use the &lt;a href=&quot;#tracemalloc.Snapshot.load&quot;&gt;&lt;code&gt;Snapshot.load()&lt;/code&gt;&lt;/a&gt; method reload the snapshot.</source>
          <target state="translated">システムの空きメモリが少ない場合は、&lt;a href=&quot;#tracemalloc.Snapshot.dump&quot;&gt; &lt;code&gt;Snapshot.dump()&lt;/code&gt; &lt;/a&gt;メソッドを使用してスナップショットをディスクに書き込み、スナップショットをオフラインで分析できます。次に、&lt;a href=&quot;#tracemalloc.Snapshot.load&quot;&gt; &lt;code&gt;Snapshot.load()&lt;/code&gt; &lt;/a&gt;メソッドを使用してスナップショットを再ロードします。</target>
        </trans-unit>
        <trans-unit id="31f84dc9d5116f5e6dfe6a1466f5a476a9188d05" translate="yes" xml:space="preserve">
          <source>If the target is omitted (or &lt;code&gt;None&lt;/code&gt;), the source must be a directory and the target will be a file with the same name as the source, with a &lt;code&gt;.pyz&lt;/code&gt; extension added.</source>
          <target state="translated">ターゲットを省略した場合（または &lt;code&gt;None&lt;/code&gt; の場合）、ソースはディレクトリである必要があり、ターゲットはソースと同じ名前のファイルであり、 &lt;code&gt;.pyz&lt;/code&gt; 拡張子が追加されます。</target>
        </trans-unit>
        <trans-unit id="a81ad72c0eb0b73e6a8f61b1a3e045791f08818e" translate="yes" xml:space="preserve">
          <source>If the terminal size cannot be successfully queried, either because the system doesn&amp;rsquo;t support querying, or because we are not connected to a terminal, the value given in &lt;code&gt;fallback&lt;/code&gt; parameter is used. &lt;code&gt;fallback&lt;/code&gt; defaults to &lt;code&gt;(80, 24)&lt;/code&gt; which is the default size used by many terminal emulators.</source>
          <target state="translated">システムがクエリをサポートしていないか、ターミナルに接続していないために、ターミナルサイズを正常にクエリできない場合は、 &lt;code&gt;fallback&lt;/code&gt; パラメータで指定された値が使用されます。 &lt;code&gt;fallback&lt;/code&gt; デフォルトは &lt;code&gt;(80, 24)&lt;/code&gt; 80、24 ）で、これは多くの端末エミュレーターで使用されるデフォルトのサイズです。</target>
        </trans-unit>
        <trans-unit id="2de2938d3bd0d33a2753ba4337962dd33d95e0ce" translate="yes" xml:space="preserve">
          <source>If the testing strategy changes, there is no need to change the source code.</source>
          <target state="translated">テスト戦略が変われば、ソースコードを変更する必要はありません。</target>
        </trans-unit>
        <trans-unit id="bcd64126f5fb037416eebb3476593dfc24805624" translate="yes" xml:space="preserve">
          <source>If the transport has a buffer for outgoing data, buffered data will be flushed asynchronously. No more data will be received. After all buffered data is flushed, the protocol&amp;rsquo;s &lt;a href=&quot;#asyncio.BaseProtocol.connection_lost&quot;&gt;&lt;code&gt;protocol.connection_lost()&lt;/code&gt;&lt;/a&gt; method will be called with &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; as its argument.</source>
          <target state="translated">トランスポートに発信データ用のバッファがある場合、バッファされたデータは非同期にフラッシュされます。これ以上のデータは受信されません。バッファリングされたすべてのデータがフラッシュされた後、プロトコルの&lt;a href=&quot;#asyncio.BaseProtocol.connection_lost&quot;&gt; &lt;code&gt;protocol.connection_lost()&lt;/code&gt; &lt;/a&gt;メソッドが引数として&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3f1d6afc6fe93a09cfe3361f1b4868b729dcdad9" translate="yes" xml:space="preserve">
          <source>If the two operands are unequal, return the number closest to the first operand in the direction of the second operand. If both operands are numerically equal, return a copy of the first operand with the sign set to be the same as the sign of the second operand.</source>
          <target state="translated">2つのオペランドが不等号の場合、2つ目のオペランドの方向で1つ目のオペランドに最も近い数値を返します。両方のオペランドが数値的に等しい場合、符号が2番目のオペランドの符号と同じになるように設定された1番目のオペランドのコピーを返します。</target>
        </trans-unit>
        <trans-unit id="5a546ad02eac6e07241889e84cea3b1a7f283a82" translate="yes" xml:space="preserve">
          <source>If the underlying object is writable, the memoryview supports one-dimensional slice assignment. Resizing is not allowed:</source>
          <target state="translated">基礎となるオブジェクトが書き込み可能な場合、メモリビューは一次元スライスの割り当てをサポートします。リサイズは許可されていません。</target>
        </trans-unit>
        <trans-unit id="348a791e58f575f17b67e607cf2cfc4ed4735592" translate="yes" xml:space="preserve">
          <source>If the user would like catch errors manually, the feature can be enable by setting &lt;code&gt;exit_on_error&lt;/code&gt; to &lt;code&gt;False&lt;/code&gt;:</source>
          <target state="translated">ユーザーが手動でエラーをキャッチしたい場合は、 &lt;code&gt;exit_on_error&lt;/code&gt; を &lt;code&gt;False&lt;/code&gt; に設定することで機能を有効にできます。</target>
        </trans-unit>
        <trans-unit id="1896841bb368d293e9660afd2874585397d59819" translate="yes" xml:space="preserve">
          <source>If the value &amp;ldquo;using_IDLE&amp;rdquo; in the configuration dictionary is &lt;code&gt;False&lt;/code&gt; (default value), also enter mainloop. Remark: If IDLE with the &lt;code&gt;-n&lt;/code&gt; switch (no subprocess) is used, this value should be set to &lt;code&gt;True&lt;/code&gt; in &lt;code&gt;turtle.cfg&lt;/code&gt;. In this case IDLE&amp;rsquo;s own mainloop is active also for the client script.</source>
          <target state="translated">構成辞書の値「using_IDLE」が &lt;code&gt;False&lt;/code&gt; （デフォルト値）の場合は、mainloopも入力します。備考： &lt;code&gt;-n&lt;/code&gt; スイッチ付きのIDLE （サブプロセスなし）を使用する場合は、この値を &lt;code&gt;turtle.cfg&lt;/code&gt; で &lt;code&gt;True&lt;/code&gt; に設定する必要があります。この場合、クライアントスクリプトでもIDLE独自のメインループがアクティブになります。</target>
        </trans-unit>
        <trans-unit id="89e5de1d1a57cbd9a0fc9d4e4a4217ecc10e0356" translate="yes" xml:space="preserve">
          <source>If the value contains binary data, it is converted into a &lt;a href=&quot;email.header#email.header.Header&quot;&gt;&lt;code&gt;Header&lt;/code&gt;&lt;/a&gt; object using the &lt;code&gt;unknown-8bit&lt;/code&gt; charset. Otherwise it is returned unmodified.</source>
          <target state="translated">値にバイナリデータが含まれている場合、 &lt;code&gt;unknown-8bit&lt;/code&gt; 文字セットを使用して&lt;a href=&quot;email.header#email.header.Header&quot;&gt; &lt;code&gt;Header&lt;/code&gt; &lt;/a&gt;オブジェクトに変換されます。それ以外の場合は、変更されずに返されます。</target>
        </trans-unit>
        <trans-unit id="3065c24d18047dbd8738a4165aafe7e2b3d722cb" translate="yes" xml:space="preserve">
          <source>If the value contains non-ASCII characters, the charset and language may be explicitly controlled by specifying the value as a three tuple in the format &lt;code&gt;(CHARSET, LANGUAGE, VALUE)&lt;/code&gt;, where &lt;code&gt;CHARSET&lt;/code&gt; is a string naming the charset to be used to encode the value, &lt;code&gt;LANGUAGE&lt;/code&gt; can usually be set to &lt;code&gt;None&lt;/code&gt; or the empty string (see &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt; for other possibilities), and &lt;code&gt;VALUE&lt;/code&gt; is the string value containing non-ASCII code points. If a three tuple is not passed and the value contains non-ASCII characters, it is automatically encoded in &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt; format using a &lt;code&gt;CHARSET&lt;/code&gt; of &lt;code&gt;utf-8&lt;/code&gt; and a &lt;code&gt;LANGUAGE&lt;/code&gt; of &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">値に非ASCII文字が含まれている場合、値を3つのタプル &lt;code&gt;(CHARSET, LANGUAGE, VALUE)&lt;/code&gt; の形式で指定することにより、文字セットと言語を明示的に制御できます。ここで、 &lt;code&gt;CHARSET&lt;/code&gt; は、値は、 &lt;code&gt;LANGUAGE&lt;/code&gt; は通常に設定することができる &lt;code&gt;None&lt;/code&gt; （参照または空の文字列&lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt;他の可能性のため）、および &lt;code&gt;VALUE&lt;/code&gt; は、非ASCIIコードポイントを含む文字列値です。3つのタプルが渡されず、値に非ASCII文字が含まれている &lt;code&gt;CHARSET&lt;/code&gt; 、 &lt;code&gt;utf-8&lt;/code&gt; CHARSETと &lt;code&gt;LANGUAGE&lt;/code&gt; を使用して、&lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt;形式で自動的にエンコードされ&lt;strong&gt;ます。&lt;/strong&gt; &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8fcbdf6220f66ea7da06b9cbc74f6b8c7af4352" translate="yes" xml:space="preserve">
          <source>If the value contains non-ASCII characters, the charset and language may be explicitly specified using the optional &lt;em&gt;charset&lt;/em&gt; and &lt;em&gt;language&lt;/em&gt; parameters. Optional &lt;em&gt;language&lt;/em&gt; specifies the &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt; language, defaulting to the empty string. Both &lt;em&gt;charset&lt;/em&gt; and &lt;em&gt;language&lt;/em&gt; should be strings. The default is to use the &lt;code&gt;utf8&lt;/code&gt;&lt;em&gt;charset&lt;/em&gt; and &lt;code&gt;None&lt;/code&gt; for the &lt;em&gt;language&lt;/em&gt;.</source>
          <target state="translated">値に非ASCII文字が含まれている場合、オプションの&lt;em&gt;文字セット&lt;/em&gt;および&lt;em&gt;言語&lt;/em&gt;パラメーターを使用して、&lt;em&gt;文字セット&lt;/em&gt;および&lt;em&gt;言語&lt;/em&gt;を明示的に指定できます。オプションの&lt;em&gt;言語&lt;/em&gt;は&lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt;&lt;em&gt;言語を&lt;/em&gt;指定し、デフォルトでは空の文字列になります。&lt;em&gt;文字セット&lt;/em&gt;と&lt;em&gt;言語&lt;/em&gt;はどちらも&lt;em&gt;文字&lt;/em&gt;列である必要があります。デフォルトでは使用することです &lt;code&gt;utf8&lt;/code&gt; &lt;em&gt;文字セット&lt;/em&gt;と &lt;code&gt;None&lt;/code&gt; ため&lt;em&gt;の言語&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="fd5432d4a79d323ca399133a88c268b9b6146b6f" translate="yes" xml:space="preserve">
          <source>If the value for a header in the &lt;code&gt;Message&lt;/code&gt; object originated from a &lt;a href=&quot;email.parser#module-email.parser&quot;&gt;&lt;code&gt;parser&lt;/code&gt;&lt;/a&gt; (as opposed to being set by a program), this attribute indicates whether or not a generator should refold that value when transforming the message back into serialized form. The possible values are:</source>
          <target state="translated">&lt;code&gt;Message&lt;/code&gt; オブジェクトのヘッダーの値が（プログラムによって設定されるのではなく）&lt;a href=&quot;email.parser#module-email.parser&quot;&gt; &lt;code&gt;parser&lt;/code&gt; &lt;/a&gt;から発信された場合、この属性は、メッセージをシリアライズされた形式に変換するときにジェネレータがその値を再折り畳みするかどうかを示します。可能な値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="61f619f6c6e535a52f8e51d5c113f91f23edb137" translate="yes" xml:space="preserve">
          <source>If the value has (or contains an object that has) an unsupported type, a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; exception is raised &amp;mdash; but garbage data will also be written to the file. The object will not be properly read back by &lt;a href=&quot;#marshal.load&quot;&gt;&lt;code&gt;load()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">値にサポートされていないタイプがある（またはオブジェクトが含まれている）&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;、ValueError例外が発生しますが、不要なデータもファイルに書き込まれます。オブジェクトは&lt;a href=&quot;#marshal.load&quot;&gt; &lt;code&gt;load()&lt;/code&gt; &lt;/a&gt;によって正しく読み戻されません。</target>
        </trans-unit>
        <trans-unit id="ac70e682ecd6b9523bcc00452173d51c8483ed90" translate="yes" xml:space="preserve">
          <source>If the value has a &lt;code&gt;name&lt;/code&gt; attribute, it is returned to unmodified. Otherwise the &lt;em&gt;name&lt;/em&gt;, and the &lt;em&gt;value&lt;/em&gt; with any CR or LF characters removed, are passed to the &lt;code&gt;header_factory&lt;/code&gt;, and the resulting header object is returned. Any surrogateescaped bytes get turned into the unicode unknown-character glyph.</source>
          <target state="translated">値に &lt;code&gt;name&lt;/code&gt; 属性がある場合、値は変更されずに返されます。それ以外の場合は、&lt;em&gt;name&lt;/em&gt;と、CRまたはLF文字を削除した&lt;em&gt;値&lt;/em&gt;が &lt;code&gt;header_factory&lt;/code&gt; に渡され、結果のヘッダーオブジェクトが返されます。サロゲートされたバイトは、Unicodeの不明な文字のグリフに変換されます。</target>
        </trans-unit>
        <trans-unit id="ecac18b5d34fc503358e09e7a4c0d8959266d301" translate="yes" xml:space="preserve">
          <source>If the wait is cancelled, the future &lt;em&gt;aw&lt;/em&gt; is also cancelled.</source>
          <target state="translated">待機がキャンセルされると、将来の&lt;em&gt;aw&lt;/em&gt;もキャンセルされます。</target>
        </trans-unit>
        <trans-unit id="56c5f97d09e31156fff54feae27ef3f4943d5433" translate="yes" xml:space="preserve">
          <source>If the watcher was previously attached to an event loop, then it is first detached before attaching to the new loop.</source>
          <target state="translated">ウォッチャーが以前にイベントループにアタッチされていた場合は、新しいループにアタッチする前に最初にアタッチされます。</target>
        </trans-unit>
        <trans-unit id="2bf203d12061685d40f0461125be7723191a6603" translate="yes" xml:space="preserve">
          <source>If the whole &lt;em&gt;string&lt;/em&gt; matches the regular expression &lt;em&gt;pattern&lt;/em&gt;, return a corresponding &lt;a href=&quot;#match-objects&quot;&gt;match object&lt;/a&gt;. Return &lt;code&gt;None&lt;/code&gt; if the string does not match the pattern; note that this is different from a zero-length match.</source>
          <target state="translated">&lt;em&gt;文字列&lt;/em&gt;全体が正規表現&lt;em&gt;パターンに&lt;/em&gt;一致する場合、対応する&lt;a href=&quot;#match-objects&quot;&gt;一致オブジェクトを&lt;/a&gt;返します。文字列がパターンに一致しない場合は &lt;code&gt;None&lt;/code&gt; を返します。これは長さゼロの一致とは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="59c52023f4547acb57c7c8cf28c845aed9e66702" translate="yes" xml:space="preserve">
          <source>If the whole &lt;em&gt;string&lt;/em&gt; matches this regular expression, return a corresponding &lt;a href=&quot;#match-objects&quot;&gt;match object&lt;/a&gt;. Return &lt;code&gt;None&lt;/code&gt; if the string does not match the pattern; note that this is different from a zero-length match.</source>
          <target state="translated">&lt;em&gt;文字列&lt;/em&gt;全体がこの正規表現に一致する場合、対応する&lt;a href=&quot;#match-objects&quot;&gt;一致オブジェクトを&lt;/a&gt;返します。文字列がパターンに一致しない場合は &lt;code&gt;None&lt;/code&gt; を返します。これは長さゼロの一致とは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4d277c1615b59061e36b6cff551c4b7615a3cee8" translate="yes" xml:space="preserve">
          <source>If the wrapped coroutine is not done, this returns the stack where it is suspended. If the coroutine has completed successfully or was cancelled, this returns an empty list. If the coroutine was terminated by an exception, this returns the list of traceback frames.</source>
          <target state="translated">ラップされたコアーチンが完了していない場合は、それが中断されたスタックを返します。コアーチンが正常に終了したか、またはキャンセルされた場合は、空のリストを返します。例外によってコアーチンが終了した場合は、トレースバックフレームのリストを返します。</target>
        </trans-unit>
        <trans-unit id="18bdf0075a155b02791d5a0bac71eb783654ca33" translate="yes" xml:space="preserve">
          <source>If the wrapped coroutine raised an exception that exception is returned. If the wrapped coroutine returned normally this method returns &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">ラップされたコルーチンが例外を発生させた場合、その例外が返されます。ラップされたコルーチンが正常に返された場合、このメソッドは &lt;code&gt;None&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="3f7728d4c859a24cbc45d6d58427ec4561648e7f" translate="yes" xml:space="preserve">
          <source>If there are any exceptions raised during one of the shared fixture functions the test is reported as an error. Because there is no corresponding test instance an &lt;code&gt;_ErrorHolder&lt;/code&gt; object (that has the same interface as a &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt;) is created to represent the error. If you are just using the standard unittest test runner then this detail doesn&amp;rsquo;t matter, but if you are a framework author it may be relevant.</source>
          <target state="translated">共有フィクスチャ関数の1つで例外が発生した場合、テストはエラーとして報告されます。対応するテストインスタンスがないため、エラーを表すために &lt;code&gt;_ErrorHolder&lt;/code&gt; オブジェクト（&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;と同じインターフェースを持つ）が作成されます。標準の単体テストテストランナーを使用しているだけの場合、この詳細は問題になりませんが、フレームワークの作成者であれば、関連性があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="60d4834d5062c8d19bbd59417935a75681b0f714" translate="yes" xml:space="preserve">
          <source>If there are arguments:</source>
          <target state="translated">引数があれば</target>
        </trans-unit>
        <trans-unit id="afe713097f513403e4602cccddaf88e097fca7b5" translate="yes" xml:space="preserve">
          <source>If there are capturing groups in the separator and it matches at the start of the string, the result will start with an empty string. The same holds for the end of the string:</source>
          <target state="translated">区切り文字にキャプチャグループがあり、それが文字列の先頭にマッチした場合、結果は空の文字列で始まります。文字列の最後も同様です。</target>
        </trans-unit>
        <trans-unit id="b105dd89905ca457b0617942c150ccc9ce8c2ecd" translate="yes" xml:space="preserve">
          <source>If there are keyword arguments, they will set the attributes of the same names to the given values.</source>
          <target state="translated">キーワード引数がある場合は、同じ名前の属性を与えられた値に設定します。</target>
        </trans-unit>
        <trans-unit id="06875e271bfc97aca9aed5132911283e876fd1e3" translate="yes" xml:space="preserve">
          <source>If there are multiple modes with the same frequency, returns the first one encountered in the &lt;em&gt;data&lt;/em&gt;. If the smallest or largest of those is desired instead, use &lt;code&gt;min(multimode(data))&lt;/code&gt; or &lt;code&gt;max(multimode(data))&lt;/code&gt;. If the input &lt;em&gt;data&lt;/em&gt; is empty, &lt;a href=&quot;#statistics.StatisticsError&quot;&gt;&lt;code&gt;StatisticsError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">同じ頻度のモードが複数ある場合は、&lt;em&gt;データ&lt;/em&gt;で最初に見つかったモードを返し&lt;em&gt;ます&lt;/em&gt;。それらの最小値または最大値が代わりに必要な場合は、 &lt;code&gt;min(multimode(data))&lt;/code&gt; または &lt;code&gt;max(multimode(data))&lt;/code&gt; を使用してください。入力&lt;em&gt;データ&lt;/em&gt;が空の場合、&lt;a href=&quot;#statistics.StatisticsError&quot;&gt; &lt;code&gt;StatisticsError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="f44c76149f8456dfb2f9b8dc82d343dcb9e7029d" translate="yes" xml:space="preserve">
          <source>If there are no remaining path segments in &lt;code&gt;PATH_INFO&lt;/code&gt;, &lt;code&gt;None&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;PATH_INFO&lt;/code&gt; にパスセグメントが残っていない場合は、 &lt;code&gt;None&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="70b04fc0fe654b81856797a63a15dc517bb87a72" translate="yes" xml:space="preserve">
          <source>If there are positional arguments, there must be as many as there are items in &lt;code&gt;T._fields&lt;/code&gt;; they will be assigned as attributes of these names.</source>
          <target state="translated">位置引数がある場合は、 &lt;code&gt;T._fields&lt;/code&gt; の項目と同じ数だけ存在する必要があります。これらは、これらの名前の属性として割り当てられます。</target>
        </trans-unit>
        <trans-unit id="0f42d2c2054cdfdb7413a7243a89893529ac2223" translate="yes" xml:space="preserve">
          <source>If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y. If there is a third argument, it must be a string, whose characters will be mapped to &lt;code&gt;None&lt;/code&gt; in the result.</source>
          <target state="translated">2つの引数がある場合、それらは等しい長さの文字列でなければならず、結果のディクショナリでは、xの各文字はyの同じ位置の文字にマップされます。3番目の引数がある場合、それは文字列である必要があり、その文字は結果で &lt;code&gt;None&lt;/code&gt; にマップされます。</target>
        </trans-unit>
        <trans-unit id="710f0541779e51ddda266bf2e4665a21cc66a9aa" translate="yes" xml:space="preserve">
          <source>If there has been no previous &lt;code&gt;EHLO&lt;/code&gt; or &lt;code&gt;HELO&lt;/code&gt; command this session, this method tries ESMTP &lt;code&gt;EHLO&lt;/code&gt; first.</source>
          <target state="translated">このセッションに以前の &lt;code&gt;EHLO&lt;/code&gt; または &lt;code&gt;HELO&lt;/code&gt; コマンドがない場合、このメソッドは最初にESMTP &lt;code&gt;EHLO&lt;/code&gt; を試行します。</target>
        </trans-unit>
        <trans-unit id="1386edd9abb7368a780ead9fa2633755d22aab5e" translate="yes" xml:space="preserve">
          <source>If there has been no previous &lt;code&gt;EHLO&lt;/code&gt; or &lt;code&gt;HELO&lt;/code&gt; command this session, this method tries ESMTP &lt;code&gt;EHLO&lt;/code&gt; first. If the server does ESMTP, message size and each of the specified options will be passed to it (if the option is in the feature set the server advertises). If &lt;code&gt;EHLO&lt;/code&gt; fails, &lt;code&gt;HELO&lt;/code&gt; will be tried and ESMTP options suppressed.</source>
          <target state="translated">このセッションに以前の &lt;code&gt;EHLO&lt;/code&gt; または &lt;code&gt;HELO&lt;/code&gt; コマンドがない場合、このメソッドは最初にESMTP &lt;code&gt;EHLO&lt;/code&gt; を試行します。サーバーがESMTPを実行する場合、メッセージサイズと指定された各オプションがサーバーに渡されます（オプションがサーバーがアドバタイズする機能セットにある場合）。場合 &lt;code&gt;EHLO&lt;/code&gt; が失敗し、 &lt;code&gt;HELO&lt;/code&gt; が試されますとESMTPオプションが抑制されました。</target>
        </trans-unit>
        <trans-unit id="8264923428e93189de3d9488f3d02a8d83fd11ec" translate="yes" xml:space="preserve">
          <source>If there is a character stream specified, the SAX parser will ignore any byte stream and will not attempt to open a URI connection to the system identifier.</source>
          <target state="translated">文字ストリームが指定されている場合、SAX パーサはバイトストリームを無視し、システム識別子への URI 接続を開こうとしません。</target>
        </trans-unit>
        <trans-unit id="7846e0ef14d60bd28e7efa81ee77d44a8c2917bd" translate="yes" xml:space="preserve">
          <source>If there is a problem with &lt;em&gt;source&lt;/em&gt;, an exception will be raised. &lt;a href=&quot;exceptions#SyntaxError&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; is raised if there is invalid Python syntax, and &lt;a href=&quot;exceptions#OverflowError&quot;&gt;&lt;code&gt;OverflowError&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; if there is an invalid literal.</source>
          <target state="translated">&lt;em&gt;source&lt;/em&gt;に問題がある場合、例外が発生します。&lt;a href=&quot;exceptions#SyntaxError&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;は、無効なPython構文がある場合に発生し、&lt;a href=&quot;exceptions#OverflowError&quot;&gt; &lt;code&gt;OverflowError&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;が無効なリテラルがある場合に発生します。</target>
        </trans-unit>
        <trans-unit id="c624ff3e0c15c1748938e12da19d4755d79f2928" translate="yes" xml:space="preserve">
          <source>If there is an decoding error on the server name, the TLS connection will terminate with an &lt;a href=&quot;#ssl.ALERT_DESCRIPTION_INTERNAL_ERROR&quot;&gt;&lt;code&gt;ALERT_DESCRIPTION_INTERNAL_ERROR&lt;/code&gt;&lt;/a&gt; fatal TLS alert message to the client.</source>
          <target state="translated">サーバー名にデコードエラーがある場合、TLS接続はクライアントへの&lt;a href=&quot;#ssl.ALERT_DESCRIPTION_INTERNAL_ERROR&quot;&gt; &lt;code&gt;ALERT_DESCRIPTION_INTERNAL_ERROR&lt;/code&gt; &lt;/a&gt;致命的なTLSアラートメッセージで終了します。</target>
        </trans-unit>
        <trans-unit id="c08a28ed04606b4fe20cd569bde11df730c25ffd" translate="yes" xml:space="preserve">
          <source>If there is an error opening the terminal, the underlying curses library may cause the interpreter to exit.</source>
          <target state="translated">ターミナルを開く際にエラーが発生した場合、基礎となる curses ライブラリによってインタープリタが終了する可能性があります。</target>
        </trans-unit>
        <trans-unit id="20d9f9895dc923352fb368d4bf728ee9c56de965" translate="yes" xml:space="preserve">
          <source>If there is any error occurred in the trace function, it will be unset, just like &lt;code&gt;settrace(None)&lt;/code&gt; is called.</source>
          <target state="translated">trace関数でエラーが発生した場合、 &lt;code&gt;settrace(None)&lt;/code&gt; が呼び出されるのと同じように、エラーは解除されます。</target>
        </trans-unit>
        <trans-unit id="0926a91c9853e7eeca2a1fc656ef6115ed6a1bf4" translate="yes" xml:space="preserve">
          <source>If there is no certificate for the peer on the other end of the connection, return &lt;code&gt;None&lt;/code&gt;. If the SSL handshake hasn&amp;rsquo;t been done yet, raise &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">接続のもう一方の端にピアの証明書がない場合は、 &lt;code&gt;None&lt;/code&gt; を返します。SSLハンドシェイクがまだ行われていない場合は、&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; を発生させ&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a481584adca4c60e65b9d654251ba60c649258fd" translate="yes" xml:space="preserve">
          <source>If there is no current event loop set in the current OS thread, the OS thread is main, and &lt;a href=&quot;#asyncio.set_event_loop&quot;&gt;&lt;code&gt;set_event_loop()&lt;/code&gt;&lt;/a&gt; has not yet been called, asyncio will create a new event loop and set it as the current one.</source>
          <target state="translated">現在のOSスレッドに現在のイベントループが設定されておらず、OSスレッドがメインであり、&lt;a href=&quot;#asyncio.set_event_loop&quot;&gt; &lt;code&gt;set_event_loop()&lt;/code&gt; &lt;/a&gt;がまだ呼び出されていない場合、asyncioは新しいイベントループを作成し、それを現在のイベントループとして設定します。</target>
        </trans-unit>
        <trans-unit id="a16e417025a92b683985a38322a1cd0d3d0859ca" translate="yes" xml:space="preserve">
          <source>If there is no existing &lt;em&gt;MIME-Version&lt;/em&gt; header one will be added. If there is no existing &lt;em&gt;Content-Type&lt;/em&gt; header, one will be added with a value of &lt;em&gt;text/plain&lt;/em&gt;. Whether the &lt;em&gt;Content-Type&lt;/em&gt; header already exists or not, its &lt;code&gt;charset&lt;/code&gt; parameter will be set to &lt;em&gt;charset.output_charset&lt;/em&gt;. If &lt;em&gt;charset.input_charset&lt;/em&gt; and &lt;em&gt;charset.output_charset&lt;/em&gt; differ, the payload will be re-encoded to the &lt;em&gt;output_charset&lt;/em&gt;. If there is no existing &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; header, then the payload will be transfer-encoded, if needed, using the specified &lt;a href=&quot;email.charset#email.charset.Charset&quot;&gt;&lt;code&gt;Charset&lt;/code&gt;&lt;/a&gt;, and a header with the appropriate value will be added. If a &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; header already exists, the payload is assumed to already be correctly encoded using that &lt;em&gt;Content-Transfer-Encoding&lt;/em&gt; and is not modified.</source>
          <target state="translated">既存の&lt;em&gt;MIME-Version&lt;/em&gt;ヘッダーがない場合は追加されます。既存の&lt;em&gt;Content-Type&lt;/em&gt;ヘッダーがない場合は、&lt;em&gt;text / plainの&lt;/em&gt;値で追加され&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;Content-Type&lt;/em&gt;ヘッダーがすでに存在するかどうかに関係なく、その &lt;code&gt;charset&lt;/code&gt; パラメータは&lt;em&gt;charset.output_charset&lt;/em&gt;に設定され&lt;em&gt;ます&lt;/em&gt;。場合&lt;em&gt;charset.input_charset&lt;/em&gt;と&lt;em&gt;charset.output_charsetは&lt;/em&gt;異なる、ペイロードに再エンコードになり&lt;em&gt;output_charset&lt;/em&gt;。既存の&lt;em&gt;Content-Transfer-Encoding&lt;/em&gt;ヘッダーがない場合、必要に応じて、指定された&lt;a href=&quot;email.charset#email.charset.Charset&quot;&gt; &lt;code&gt;Charset&lt;/code&gt; &lt;/a&gt;を使用してペイロードが転送エンコードされます。、適切な値のヘッダーが追加されます。場合&lt;em&gt;コンテンツ転送符号化&lt;/em&gt;ヘッダが既に存在し、ペイロードは既に正しくことを使用して符号化されているものとする&lt;em&gt;コンテンツ転送符号化&lt;/em&gt;及び変性されていません。</target>
        </trans-unit>
        <trans-unit id="668457ccf6ecd6f3a813b38d49f7b92435618884" translate="yes" xml:space="preserve">
          <source>If there is no running event loop a &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised. This function can only be called from a coroutine or a callback.</source>
          <target state="translated">実行中のイベントループがない場合、&lt;a href=&quot;exceptions#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt;が発生します。この関数は、コルーチンまたはコールバックからのみ呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="69cac254e6b298fe4270f509ae2413d5927fd1a9" translate="yes" xml:space="preserve">
          <source>If there is no value for the variable in the current context, the method will:</source>
          <target state="translated">現在のコンテキストに変数の値が存在しない場合、このメソッドは</target>
        </trans-unit>
        <trans-unit id="80c2dc75a994416645ae1c9380a6d0ceb3f65147" translate="yes" xml:space="preserve">
          <source>If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters (strings of length 1) to Unicode ordinals, strings (of arbitrary lengths) or &lt;code&gt;None&lt;/code&gt;. Character keys will then be converted to ordinals.</source>
          <target state="translated">引数が1つしかない場合は、Unicodeの序数（整数）または文字（長さ1の文字列）をUnicodeの序数、文字列（任意の長さ）、または &lt;code&gt;None&lt;/code&gt; にマッピングする辞書でなければなりません。その後、文字キーは序数に変換されます。</target>
        </trans-unit>
        <trans-unit id="4b89ec1a8424896e51072da33f9efe49e974e577" translate="yes" xml:space="preserve">
          <source>If there is only one possible completion for the characters entered, a</source>
          <target state="translated">入力された文字の補完が1つしかない場合は</target>
        </trans-unit>
        <trans-unit id="8b2610dd6d4564147cdc6a071edbeae596a215ec" translate="yes" xml:space="preserve">
          <source>If these attributes are marked as optional in the grammar (using a question mark), the value might be &lt;code&gt;None&lt;/code&gt;. If the attributes can have zero-or-more values (marked with an asterisk), the values are represented as Python lists. All possible attributes must be present and have valid values when compiling an AST with &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらの属性が文法で（疑問符を使用して）オプションとしてマークされている場合、値は &lt;code&gt;None&lt;/code&gt; になる可能性があります。属性にゼロ以上の値（アスタリスクが付いている）を含めることができる場合、値はPythonリストとして表されます。&lt;a href=&quot;functions#compile&quot;&gt; &lt;code&gt;compile()&lt;/code&gt; &lt;/a&gt;を使用してASTをコンパイルする場合、すべての可能な属性が存在し、有効な値を持っている必要があります。</target>
        </trans-unit>
        <trans-unit id="4cc8f6301859f9ffe9df6772bfd5316c956f6429" translate="yes" xml:space="preserve">
          <source>If this attribute evaluates to true, events logged to this logger will be passed to the handlers of higher level (ancestor) loggers, in addition to any handlers attached to this logger. Messages are passed directly to the ancestor loggers&amp;rsquo; handlers - neither the level nor filters of the ancestor loggers in question are considered.</source>
          <target state="translated">この属性がtrueと評価された場合、このロガーに記録されたイベントは、このロガーに接続されているハンドラーに加えて、より高いレベル（祖先）のロガーのハンドラーに渡されます。メッセージは祖先ロガーのハンドラーに直接渡されます。問題の祖先ロガーのレベルもフィルターも考慮されません。</target>
        </trans-unit>
        <trans-unit id="abdb9590d870789abfb1d2c6cd1c630b5f260a6c" translate="yes" xml:space="preserve">
          <source>If this attribute is accessed before the end of the stream has been reached, its value will be &lt;code&gt;b''&lt;/code&gt;.</source>
          <target state="translated">ストリームの終わりに達する前にこの属性にアクセスした場合、その値は &lt;code&gt;b''&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="57abef9824fea6e680f0e895e49db397a22940bc" translate="yes" xml:space="preserve">
          <source>If this attribute is not &lt;code&gt;None&lt;/code&gt; (the default), all test methods to be included in test suites must match one of the patterns in this list. Note that matches are always performed using &lt;a href=&quot;fnmatch#fnmatch.fnmatchcase&quot;&gt;&lt;code&gt;fnmatch.fnmatchcase()&lt;/code&gt;&lt;/a&gt;, so unlike patterns passed to the &lt;code&gt;-v&lt;/code&gt; option, simple substring patterns will have to be converted using &lt;code&gt;*&lt;/code&gt; wildcards.</source>
          <target state="translated">この属性が &lt;code&gt;None&lt;/code&gt; （デフォルト）でない場合、テストスイートに含まれるすべてのテストメソッドは、このリストのパターンのいずれかに一致する必要があります。一致は常に&lt;a href=&quot;fnmatch#fnmatch.fnmatchcase&quot;&gt; &lt;code&gt;fnmatch.fnmatchcase()&lt;/code&gt; &lt;/a&gt;を使用して実行されるため、 &lt;code&gt;-v&lt;/code&gt; オプションに渡されるパターンとは異なり、単純な部分文字列パターンは &lt;code&gt;*&lt;/code&gt; ワイルドカードを使用して変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="0e0a95050375345febb5eec5f5dd1307acaa7573" translate="yes" xml:space="preserve">
          <source>If this attribute is numeric and &lt;code&gt;1&lt;/code&gt; or more, a &lt;a href=&quot;#shlex.shlex&quot;&gt;&lt;code&gt;shlex&lt;/code&gt;&lt;/a&gt; instance will print verbose progress output on its behavior. If you need to use this, you can read the module source code to learn the details.</source>
          <target state="translated">この属性が数値で &lt;code&gt;1&lt;/code&gt; 以上の場合、&lt;a href=&quot;#shlex.shlex&quot;&gt; &lt;code&gt;shlex&lt;/code&gt; &lt;/a&gt;インスタンスはその動作に関する詳細な進行状況を出力します。これを使用する必要がある場合は、モジュールのソースコードを読んで詳細を確認できます。</target>
        </trans-unit>
        <trans-unit id="b804a91b5f1f64f8e7129df9975fc4040a040277" translate="yes" xml:space="preserve">
          <source>If this attribute is set to a callable, the &lt;a href=&quot;#logging.handlers.BaseRotatingHandler.rotate&quot;&gt;&lt;code&gt;rotate()&lt;/code&gt;&lt;/a&gt; method delegates to this callable. The parameters passed to the callable are those passed to &lt;a href=&quot;#logging.handlers.BaseRotatingHandler.rotate&quot;&gt;&lt;code&gt;rotate()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この属性が呼び出し可能に設定されている場合、&lt;a href=&quot;#logging.handlers.BaseRotatingHandler.rotate&quot;&gt; &lt;code&gt;rotate()&lt;/code&gt; &lt;/a&gt;メソッドはこの呼び出し可能に委譲します。呼び出し可能オブジェクトに渡されるパラメーターは、&lt;a href=&quot;#logging.handlers.BaseRotatingHandler.rotate&quot;&gt; &lt;code&gt;rotate()&lt;/code&gt; に&lt;/a&gt;渡されるパラメーターです。</target>
        </trans-unit>
        <trans-unit id="7ebbb6f8f84980f280f393669d0bd62b9cd2bef9" translate="yes" xml:space="preserve">
          <source>If this attribute is set to a callable, the &lt;a href=&quot;#logging.handlers.BaseRotatingHandler.rotation_filename&quot;&gt;&lt;code&gt;rotation_filename()&lt;/code&gt;&lt;/a&gt; method delegates to this callable. The parameters passed to the callable are those passed to &lt;a href=&quot;#logging.handlers.BaseRotatingHandler.rotation_filename&quot;&gt;&lt;code&gt;rotation_filename()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この属性が呼び出し可能に設定されている場合、&lt;a href=&quot;#logging.handlers.BaseRotatingHandler.rotation_filename&quot;&gt; &lt;code&gt;rotation_filename()&lt;/code&gt; &lt;/a&gt;メソッドはこの呼び出し可能に委譲します。呼び出し可能オブジェクトに渡されるパラメーターは、&lt;a href=&quot;#logging.handlers.BaseRotatingHandler.rotation_filename&quot;&gt; &lt;code&gt;rotation_filename()&lt;/code&gt; に&lt;/a&gt;渡されるパラメーターです。</target>
        </trans-unit>
        <trans-unit id="dff1b29a4811ae4a2758c854c0086cdf364b91aa" translate="yes" xml:space="preserve">
          <source>If this bit is set, then random bytes are drawn from the &lt;code&gt;/dev/random&lt;/code&gt; pool instead of the &lt;code&gt;/dev/urandom&lt;/code&gt; pool.</source>
          <target state="translated">このビットが設定されている場合、ランダムバイトは、 &lt;code&gt;/dev/urandom&lt;/code&gt; プールではなく &lt;code&gt;/dev/random&lt;/code&gt; プールから取得されます。</target>
        </trans-unit>
        <trans-unit id="90bb6faa5b3834263ad7c4573939b37c5a542a65" translate="yes" xml:space="preserve">
          <source>If this evaluates to false, logging messages are not passed to the handlers of ancestor loggers.</source>
          <target state="translated">これが false と評価された場合、ロギングメッセージは祖先ロガーのハンドラには渡されません。</target>
        </trans-unit>
        <trans-unit id="017d3d68f19210726c382bec27e52a2d417c3981" translate="yes" xml:space="preserve">
          <source>If this function raises an exception, &lt;a href=&quot;sys#sys.excepthook&quot;&gt;&lt;code&gt;sys.excepthook()&lt;/code&gt;&lt;/a&gt; is called to handle it.</source>
          <target state="translated">この関数が例外を発生させると、それを処理するために&lt;a href=&quot;sys#sys.excepthook&quot;&gt; &lt;code&gt;sys.excepthook()&lt;/code&gt; &lt;/a&gt;が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="58d8a99c356472fc70700f6ecb9c84865af60bb2" translate="yes" xml:space="preserve">
          <source>If this gives an error of type 404, the server cannot find the script &amp;ndash; perhaps you need to install it in a different directory. If it gives another error, there&amp;rsquo;s an installation problem that you should fix before trying to go any further. If you get a nicely formatted listing of the environment and form content (in this example, the fields should be listed as &amp;ldquo;addr&amp;rdquo; with value &amp;ldquo;At Home&amp;rdquo; and &amp;ldquo;name&amp;rdquo; with value &amp;ldquo;Joe Blow&amp;rdquo;), the &lt;code&gt;cgi.py&lt;/code&gt; script has been installed correctly. If you follow the same procedure for your own script, you should now be able to debug it.</source>
          <target state="translated">これによりタイプ404のエラーが発生した場合、サーバーはスクリプトを見つけることができません。おそらく、別のディレクトリにインストールする必要があります。別のエラーが発生する場合は、インストールの問題があるため、先に進む前に修正する必要があります。環境とフォームの内容が適切にフォーマットされたリストを取得した場合（この例では、フィールドは値が「At Home」の「addr」、値が「Joe Blow」の「name」としてリストされます）、 &lt;code&gt;cgi.py&lt;/code&gt; スクリプト正しくインストールされています。独自のスクリプトで同じ手順を実行すると、スクリプトをデバッグできるようになります。</target>
        </trans-unit>
        <trans-unit id="f8f7b6501e5b158a220ae98c2d595a7087ee640a" translate="yes" xml:space="preserve">
          <source>If this handler is not provided, external entities are reported by the &lt;a href=&quot;#xml.parsers.expat.xmlparser.DefaultHandler&quot;&gt;&lt;code&gt;DefaultHandler&lt;/code&gt;&lt;/a&gt; callback, if provided.</source>
          <target state="translated">このハンドラーが提供されない場合、提供されている場合、&lt;a href=&quot;#xml.parsers.expat.xmlparser.DefaultHandler&quot;&gt; &lt;code&gt;DefaultHandler&lt;/code&gt; &lt;/a&gt;コールバックによって外部エンティティーが報告されます。</target>
        </trans-unit>
        <trans-unit id="85450d770d6418bc4deec157d80a4e51aa30db87" translate="yes" xml:space="preserve">
          <source>If this heap invariant is protected at all time, index 0 is clearly the overall winner. The simplest algorithmic way to remove it and find the &amp;ldquo;next&amp;rdquo; winner is to move some loser (let&amp;rsquo;s say cell 30 in the diagram above) into the 0 position, and then percolate this new 0 down the tree, exchanging values, until the invariant is re-established. This is clearly logarithmic on the total number of items in the tree. By iterating over all items, you get an O(n log n) sort.</source>
          <target state="translated">このヒープの不変条件が常に保護されている場合、インデックス0は明らかに全体的な勝者です。それを削除して「次の」勝者を見つける最も簡単なアルゴリズム的な方法は、敗者（上の図のセル30としましょう）を0の位置に移動し、この新しい0をツリーの下に浸透させ、不変になるまで値を交換します。再設立されました。これは、ツリー内のアイテムの総数の対数です。すべてのアイテムを反復することにより、O（n log n）ソートを取得します。</target>
        </trans-unit>
        <trans-unit id="7a3e8042246e5ac5ba9685632876ea8a3d42c4e7" translate="yes" xml:space="preserve">
          <source>If this is set (not &lt;code&gt;None&lt;/code&gt;), Python will write bytecode-cache &lt;code&gt;.pyc&lt;/code&gt; files to (and read them from) a parallel directory tree rooted at this directory, rather than from &lt;code&gt;__pycache__&lt;/code&gt; directories in the source code tree. Any &lt;code&gt;__pycache__&lt;/code&gt; directories in the source code tree will be ignored and new &lt;code&gt;.pyc&lt;/code&gt; files written within the pycache prefix. Thus if you use &lt;a href=&quot;compileall#module-compileall&quot;&gt;&lt;code&gt;compileall&lt;/code&gt;&lt;/a&gt; as a pre-build step, you must ensure you run it with the same pycache prefix (if any) that you will use at runtime.</source>
          <target state="translated">これが（ &lt;code&gt;None&lt;/code&gt; 以外の）設定されている場合、Pythonはバイトコードキャッシュの &lt;code&gt;.pyc&lt;/code&gt; ファイルを、ソースコードツリーの &lt;code&gt;__pycache__&lt;/code&gt; ディレクトリからではなく、このディレクトリをルートとする並列ディレクトリツリーに（そしてそこから）読み取ります。どれ &lt;code&gt;__pycache__&lt;/code&gt; ソースコードツリー内のディレクトリは無視され、新 &lt;code&gt;.pyc&lt;/code&gt; ファイルがpycacheプレフィックス内書かれました。したがって、&lt;a href=&quot;compileall#module-compileall&quot;&gt; &lt;code&gt;compileall&lt;/code&gt; &lt;/a&gt;前ステップとしてcompileallを使用する場合は、実行時に使用するものと同じpycacheプレフィックス（存在する場合）を付けて実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="6b26511950bcfbe88174f69e9200e69454a2056a" translate="yes" xml:space="preserve">
          <source>If this is true, Python won&amp;rsquo;t try to write &lt;code&gt;.pyc&lt;/code&gt; files on the import of source modules. This value is initially set to &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; depending on the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id1&quot;&gt;&lt;code&gt;-B&lt;/code&gt;&lt;/a&gt; command line option and the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE&quot; id=&quot;index-5&quot;&gt;&lt;code&gt;PYTHONDONTWRITEBYTECODE&lt;/code&gt;&lt;/a&gt; environment variable, but you can set it yourself to control bytecode file generation.</source>
          <target state="translated">これがtrueの場合、Pythonはソースモジュールのインポート時に &lt;code&gt;.pyc&lt;/code&gt; ファイルを書き込もうとしません。この値は、最初は&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id1&quot;&gt; &lt;code&gt;-B&lt;/code&gt; &lt;/a&gt;コマンドラインオプションと&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE&quot; id=&quot;index-5&quot;&gt; &lt;code&gt;PYTHONDONTWRITEBYTECODE&lt;/code&gt; &lt;/a&gt;環境変数に応じて &lt;code&gt;True&lt;/code&gt; または &lt;code&gt;False&lt;/code&gt; に設定されますが、バイトコードファイルの生成を制御するために自分で設定できます。</target>
        </trans-unit>
        <trans-unit id="5bd48090fe0de6b291f7c4b9445251f4d4d19a92" translate="yes" xml:space="preserve">
          <source>If this is true, Python won&amp;rsquo;t try to write &lt;code&gt;.pyc&lt;/code&gt; files on the import of source modules. This value is initially set to &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt; depending on the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id1&quot;&gt;&lt;code&gt;-B&lt;/code&gt;&lt;/a&gt; command line option and the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE&quot; id=&quot;index-6&quot;&gt;&lt;code&gt;PYTHONDONTWRITEBYTECODE&lt;/code&gt;&lt;/a&gt; environment variable, but you can set it yourself to control bytecode file generation.</source>
          <target state="translated">これが当てはまる場合、Pythonはソースモジュールのインポート時に &lt;code&gt;.pyc&lt;/code&gt; ファイルを書き込もうとしません。この値は、&lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id1&quot;&gt; &lt;code&gt;-B&lt;/code&gt; &lt;/a&gt;コマンドラインオプションと&lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE&quot; id=&quot;index-6&quot;&gt; &lt;code&gt;PYTHONDONTWRITEBYTECODE&lt;/code&gt; &lt;/a&gt;環境変数に応じて、最初は &lt;code&gt;True&lt;/code&gt; または &lt;code&gt;False&lt;/code&gt; に設定されますが、バイトコードファイルの生成を制御するように自分で設定することもできます。</target>
        </trans-unit>
        <trans-unit id="b0dd1aeea5c5afb047695d1317c4d638f1f777fa" translate="yes" xml:space="preserve">
          <source>If this keyword argument is specified along with &lt;em&gt;filename&lt;/em&gt;, its value is used when the FileHandler is created, and thus used when opening the output file.</source>
          <target state="translated">このキーワード引数が&lt;em&gt;ファイル名&lt;/em&gt;とともに指定されている場合、その値はFileHandlerの作成時に使用されるため、出力ファイルを開くときに使用されます。</target>
        </trans-unit>
        <trans-unit id="27123f72ebcf16d16ff750ae37510194e2bb8114" translate="yes" xml:space="preserve">
          <source>If this keyword argument is specified along with &lt;em&gt;filename&lt;/em&gt;, its value is used when the FileHandler is created, and thus used when opening the output file. If not specified, the value &amp;lsquo;backslashreplace&amp;rsquo; is used. Note that if &lt;code&gt;None&lt;/code&gt; is specified, it will be passed as such to func:&lt;code&gt;open&lt;/code&gt;, which means that it will be treated the same as passing &amp;lsquo;errors&amp;rsquo;.</source>
          <target state="translated">このキーワード引数が&lt;em&gt;ファイル名&lt;/em&gt;とともに指定されている場合、その値はFileHandlerの作成時に使用されるため、出力ファイルを開くときに使用されます。指定しない場合、値 'backslashreplace'が使用されます。 &lt;code&gt;None&lt;/code&gt; が指定されている場合、func： &lt;code&gt;open&lt;/code&gt; にそのまま渡されることに注意してください。これは、「エラー」を渡すのと同じように扱われることを意味します。</target>
        </trans-unit>
        <trans-unit id="3314650337b2349372ab978feed37d7432cf9791" translate="yes" xml:space="preserve">
          <source>If this keyword argument is specified as true, any existing handlers attached to the root logger are removed and closed, before carrying out the configuration as specified by the other arguments.</source>
          <target state="translated">このキーワード引数を true に指定すると、ルートロガーに接続されている既存のハンドラは、他の引数で指定された構成を実行する前に削除されて閉じられます。</target>
        </trans-unit>
        <trans-unit id="11e62c76d42fa37b48327413f77512cf4b5df592" translate="yes" xml:space="preserve">
          <source>If this method is used when the associated process is using a pipe or queue then the pipe or queue is liable to become corrupted and may become unusable by other process. Similarly, if the process has acquired a lock or semaphore etc. then terminating it is liable to cause other processes to deadlock.</source>
          <target state="translated">この方法は、関連プロセスがパイプやキューを使用しているときに使用されると、パイプやキューが破損しやすく、他のプロセスが使用できなくなる可能性があります。同様に、プロセスがロックやセマフォなどを取得している場合、そのプロセスを終了すると他のプロセスがデッドロックする可能性があります。</target>
        </trans-unit>
        <trans-unit id="40b84b7c2b8cd75da3b54cede5c5b30cfe17179e" translate="yes" xml:space="preserve">
          <source>If true, load cookies lazily from disk. This attribute should not be assigned to. This is only a hint, since this only affects performance, not behaviour (unless the cookies on disk are changing). A &lt;a href=&quot;#http.cookiejar.CookieJar&quot;&gt;&lt;code&gt;CookieJar&lt;/code&gt;&lt;/a&gt; object may ignore it. None of the &lt;a href=&quot;#http.cookiejar.FileCookieJar&quot;&gt;&lt;code&gt;FileCookieJar&lt;/code&gt;&lt;/a&gt; classes included in the standard library lazily loads cookies.</source>
          <target state="translated">trueの場合、cookieをディスクから遅延読み込みします。この属性は割り当てないでください。これは単なるヒントであり、これはパフォーマンスにのみ影響し、動作には影響しません（ディスク上のCookieが変更されない限り）。&lt;a href=&quot;#http.cookiejar.CookieJar&quot;&gt; &lt;code&gt;CookieJar&lt;/code&gt; の&lt;/a&gt;オブジェクトは、それを無視することができます。標準ライブラリに含まれている&lt;a href=&quot;#http.cookiejar.FileCookieJar&quot;&gt; &lt;code&gt;FileCookieJar&lt;/code&gt; &lt;/a&gt;クラスは、どれも遅延してCookieをロードしません。</target>
        </trans-unit>
        <trans-unit id="4b776e3e6964e37b47588161e44e80da43328cd0" translate="yes" xml:space="preserve">
          <source>If true, request that the &lt;a href=&quot;#http.cookiejar.CookieJar&quot;&gt;&lt;code&gt;CookieJar&lt;/code&gt;&lt;/a&gt; instance downgrade &lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-15&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt; cookies (ie. cookies received in a &lt;em&gt;Set-Cookie&lt;/em&gt; header with a version cookie-attribute of 1) to Netscape cookies by setting the version attribute of the &lt;a href=&quot;#http.cookiejar.Cookie&quot;&gt;&lt;code&gt;Cookie&lt;/code&gt;&lt;/a&gt; instance to 0. The default value is &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, in which case RFC 2109 cookies are downgraded if and only if &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-16&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt; handling is turned off. Therefore, RFC 2109 cookies are downgraded by default.</source>
          <target state="translated">trueの場合、&lt;a href=&quot;#http.cookiejar.Cookie&quot;&gt; &lt;code&gt;Cookie&lt;/code&gt; &lt;/a&gt;インスタンスのバージョン属性を0に設定して、&lt;a href=&quot;#http.cookiejar.CookieJar&quot;&gt; &lt;code&gt;CookieJar&lt;/code&gt; &lt;/a&gt;インスタンスが&lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-15&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt; Cookie（つまり、バージョンCookie属性が1の&lt;em&gt;Set-Cookie&lt;/em&gt;ヘッダーで受信した&lt;em&gt;Cookie&lt;/em&gt;）をNetscape Cookieにダウングレードするように要求します。デフォルト値は&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;です。この場合、&lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-16&quot;&gt;&lt;strong&gt;RFC 2965の&lt;/strong&gt;&lt;/a&gt;処理がオフになっている場合に限り、&lt;strong&gt;RFC&lt;/strong&gt; 2109 Cookieがダウングレードされます。したがって、RFC 2109 Cookieはデフォルトでダウングレードされます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ae1121f9e45a9703c97a6bf40a561f0b607ea007" translate="yes" xml:space="preserve">
          <source>If turtleshape is a polygon, outline and interior of that polygon is drawn with the newly set colors.</source>
          <target state="translated">タートルシェープが多角形の場合は、その多角形の輪郭と内部が新たに設定された色で描画されます。</target>
        </trans-unit>
        <trans-unit id="6b992dbf815e5a48ca08b90300fa3a4771a7068e" translate="yes" xml:space="preserve">
          <source>If turtleshape is a polygon, the interior of that polygon is drawn with the newly set fillcolor.</source>
          <target state="translated">タートルシェープが多角形の場合は、その多角形の内部を新たに設定した塗りつぶし色で描画します。</target>
        </trans-unit>
        <trans-unit id="be2827a5012b6740877e0b7b0e62c1a742812bf7" translate="yes" xml:space="preserve">
          <source>If turtleshape is a polygon, the outline of that polygon is drawn with the newly set pencolor.</source>
          <target state="translated">タートルシェープが多角形の場合は、その多角形の輪郭を新たに設定したペンカラーで描画します。</target>
        </trans-unit>
        <trans-unit id="0c29d653e6b038e2fe7684142d34103dcd03b42e" translate="yes" xml:space="preserve">
          <source>If two &lt;a href=&quot;#sqlite3.Row&quot;&gt;&lt;code&gt;Row&lt;/code&gt;&lt;/a&gt; objects have exactly the same columns and their members are equal, they compare equal.</source>
          <target state="translated">2つの&lt;a href=&quot;#sqlite3.Row&quot;&gt; &lt;code&gt;Row&lt;/code&gt; &lt;/a&gt;オブジェクトがまったく同じ列を持ち、それらのメンバーが等しい場合、それらは等しく比較されます。</target>
        </trans-unit>
        <trans-unit id="afa6f3422eefaa81266da99523269e7f496b8eab" translate="yes" xml:space="preserve">
          <source>If two &lt;code&gt;.pyc&lt;/code&gt; files with different optimization level have the same content, use hard links to consolidate duplicate files.</source>
          <target state="translated">最適化レベルが異なる2つの &lt;code&gt;.pyc&lt;/code&gt; ファイルの内容が同じである場合は、ハードリンクを使用して重複ファイルを統合します。</target>
        </trans-unit>
        <trans-unit id="260d0a1b06a2d521034b375df46c28e25cc4e075" translate="yes" xml:space="preserve">
          <source>If used, this function should be called before &lt;a href=&quot;#curses.initscr&quot;&gt;&lt;code&gt;initscr()&lt;/code&gt;&lt;/a&gt; or newterm are called. When &lt;em&gt;flag&lt;/em&gt; is &lt;code&gt;False&lt;/code&gt;, the values of lines and columns specified in the terminfo database will be used, even if environment variables &lt;code id=&quot;index-5&quot;&gt;LINES&lt;/code&gt; and &lt;code id=&quot;index-6&quot;&gt;COLUMNS&lt;/code&gt; (used by default) are set, or if curses is running in a window (in which case default behavior would be to use the window size if &lt;code id=&quot;index-7&quot;&gt;LINES&lt;/code&gt; and &lt;code id=&quot;index-8&quot;&gt;COLUMNS&lt;/code&gt; are not set).</source>
          <target state="translated">使用する場合、この関数は&lt;a href=&quot;#curses.initscr&quot;&gt; &lt;code&gt;initscr()&lt;/code&gt; &lt;/a&gt;またはnewtermを呼び出す前に呼び出す必要があります。場合&lt;em&gt;フラグが&lt;/em&gt;ある &lt;code&gt;False&lt;/code&gt; 、行と列の値は、terminfoデータベース内の指定された環境変数の場合でも、使用される &lt;code id=&quot;index-5&quot;&gt;LINES&lt;/code&gt; と &lt;code id=&quot;index-6&quot;&gt;COLUMNS&lt;/code&gt; （デフォルトで使用）が設定されている、または呪いは、ウィンドウで実行されている場合（で場合のデフォルトの動作になります &lt;code id=&quot;index-7&quot;&gt;LINES&lt;/code&gt; と &lt;code id=&quot;index-8&quot;&gt;COLUMNS&lt;/code&gt; が設定されていない場合は、ウィンドウサイズを使用してください）。</target>
        </trans-unit>
        <trans-unit id="b09a2a72ca9eebcfaf2f7a111fffa10693a0be54" translate="yes" xml:space="preserve">
          <source>If using this module as part of a multi-processed application (using, for example the &lt;a href=&quot;multiprocessing#module-multiprocessing&quot;&gt;&lt;code&gt;multiprocessing&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;concurrent.futures#module-concurrent.futures&quot;&gt;&lt;code&gt;concurrent.futures&lt;/code&gt;&lt;/a&gt; modules), be aware that OpenSSL&amp;rsquo;s internal random number generator does not properly handle forked processes. Applications must change the PRNG state of the parent process if they use any SSL feature with &lt;a href=&quot;os#os.fork&quot;&gt;&lt;code&gt;os.fork()&lt;/code&gt;&lt;/a&gt;. Any successful call of &lt;a href=&quot;#ssl.RAND_add&quot;&gt;&lt;code&gt;RAND_add()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ssl.RAND_bytes&quot;&gt;&lt;code&gt;RAND_bytes()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ssl.RAND_pseudo_bytes&quot;&gt;&lt;code&gt;RAND_pseudo_bytes()&lt;/code&gt;&lt;/a&gt; is sufficient.</source>
          <target state="translated">このモジュールをマルチプロセスアプリケーションの一部として使用する場合（たとえば、&lt;a href=&quot;multiprocessing#module-multiprocessing&quot;&gt; &lt;code&gt;multiprocessing&lt;/code&gt; &lt;/a&gt;モジュールまたは&lt;a href=&quot;concurrent.futures#module-concurrent.futures&quot;&gt; &lt;code&gt;concurrent.futures&lt;/code&gt; &lt;/a&gt;モジュールを使用）、OpenSSLの内部乱数ジェネレーターがフォークされたプロセスを適切に処理しないことに注意してください。&lt;a href=&quot;os#os.fork&quot;&gt; &lt;code&gt;os.fork()&lt;/code&gt; で&lt;/a&gt; SSL機能を使用する場合、アプリケーションは親プロセスのPRNG状態を変更する必要があります。&lt;a href=&quot;#ssl.RAND_add&quot;&gt; &lt;code&gt;RAND_add()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ssl.RAND_bytes&quot;&gt; &lt;code&gt;RAND_bytes()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#ssl.RAND_pseudo_bytes&quot;&gt; &lt;code&gt;RAND_pseudo_bytes()&lt;/code&gt; の&lt;/a&gt;正常な呼び出しで十分です。</target>
        </trans-unit>
        <trans-unit id="40cadaadf40f8d88630127c112a5dbe1fa546685" translate="yes" xml:space="preserve">
          <source>If we make the decimal place and everything after it optional, not all groups might participate in the match. These groups will default to &lt;code&gt;None&lt;/code&gt; unless the &lt;em&gt;default&lt;/em&gt; argument is given:</source>
          <target state="translated">小数点以下をオプションにすると、すべてのグループが試合に参加するわけではありません。これらのグループは、&lt;em&gt;デフォルトの&lt;/em&gt;引数が指定されていない限り、&lt;em&gt;デフォルトで&lt;/em&gt; &lt;code&gt;None&lt;/code&gt; になります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="21252e699b38c9bde015d527adf98063ea9f956c" translate="yes" xml:space="preserve">
          <source>If we were sent the message from the last example, here is one way we could process it:</source>
          <target state="translated">先ほどの例のメッセージが送られてきたとしたら、それを処理する方法の1つをご紹介します。</target>
        </trans-unit>
        <trans-unit id="6bfdd750da38ffcee31dea60ae619912d24791e2" translate="yes" xml:space="preserve">
          <source>If window is currently managed by the notebook but hidden, it is restored to its previous position.</source>
          <target state="translated">ウィンドウが現在ノートブックで管理されているが非表示になっている場合は、以前の位置に復元されます。</target>
        </trans-unit>
        <trans-unit id="aec5c8d5afc40ab554ad46b385c383363932d7b7" translate="yes" xml:space="preserve">
          <source>If wrapping a shared library with &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt;, it &lt;em&gt;may&lt;/em&gt; be better to determine the shared library name at development time, and hardcode that into the wrapper module instead of using &lt;code&gt;find_library()&lt;/code&gt; to locate the library at runtime.</source>
          <target state="translated">共有ライブラリ包む場合は&lt;a href=&quot;#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; のを&lt;/a&gt;、それは&lt;em&gt;可能&lt;/em&gt;その代わりに使用するラッパーモジュールに共有ライブラリの開発時には名前、および打ちを決定する方が良い &lt;code&gt;find_library()&lt;/code&gt; 実行時にライブラリを検索します。</target>
        </trans-unit>
        <trans-unit id="f6e263b3d734f898bddb0b90497009b949e688c7" translate="yes" xml:space="preserve">
          <source>If you (or your students) want to use &lt;a href=&quot;#module-turtle&quot;&gt;&lt;code&gt;turtle&lt;/code&gt;&lt;/a&gt; with online help in your native language, you have to translate the docstrings and save the resulting file as e.g. &lt;code&gt;turtle_docstringdict_german.py&lt;/code&gt;.</source>
          <target state="translated">あなた（またはあなたの学生）が母国語でオンラインヘルプ付きの&lt;a href=&quot;#module-turtle&quot;&gt; &lt;code&gt;turtle&lt;/code&gt; &lt;/a&gt;を使用したい場合は、docstringsを翻訳し、結果のファイルを &lt;code&gt;turtle_docstringdict_german.py&lt;/code&gt; などとして保存する必要があります。</target>
        </trans-unit>
        <trans-unit id="681001f9dedd39553c496bc8278d37c4dfe3445e" translate="yes" xml:space="preserve">
          <source>If you access a method (a function defined in a class namespace) through an instance, you get a special object: a &lt;em&gt;bound method&lt;/em&gt; (also called &lt;em&gt;instance method&lt;/em&gt;) object. When called, it will add the &lt;code&gt;self&lt;/code&gt; argument to the argument list. Bound methods have two special read-only attributes: &lt;code&gt;m.__self__&lt;/code&gt; is the object on which the method operates, and &lt;code&gt;m.__func__&lt;/code&gt; is the function implementing the method. Calling &lt;code&gt;m(arg-1, arg-2, ..., arg-n)&lt;/code&gt; is completely equivalent to calling &lt;code&gt;m.__func__(m.__self__, arg-1, arg-2, ...,
arg-n)&lt;/code&gt;.</source>
          <target state="translated">インスタンスを介してメソッド（クラス名前空間で定義された関数）にアクセスすると、特別なオブジェクト、&lt;em&gt;つまりバインドされたメソッド&lt;/em&gt;（&lt;em&gt;インスタンスメソッド&lt;/em&gt;とも呼ばれる）が得られます。呼び出されると、引数リストに &lt;code&gt;self&lt;/code&gt; 引数が追加されます。バインドされたメソッドには、2つの特別な読み取り専用属性があります &lt;code&gt;m.__self__&lt;/code&gt; はメソッドが操作するオブジェクトであり、 &lt;code&gt;m.__func__&lt;/code&gt; はメソッドを実装する関数です。呼び出し &lt;code&gt;m(arg-1, arg-2, ..., arg-n)&lt;/code&gt; 呼び出すことと完全に等価である &lt;code&gt;m.__func__(m.__self__, arg-1, arg-2, ..., arg-n)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8a1f07de56da7ccfad9978d85c56532e9c3232e2" translate="yes" xml:space="preserve">
          <source>If you are dynamically importing a module that was created since the interpreter began execution (e.g., created a Python source file), you may need to call &lt;a href=&quot;#importlib.invalidate_caches&quot;&gt;&lt;code&gt;invalidate_caches()&lt;/code&gt;&lt;/a&gt; in order for the new module to be noticed by the import system.</source>
          <target state="translated">インタプリタが実行を開始してから作成された（たとえば、Pythonソースファイルを作成した）モジュールを動的にインポートする場合、インポートシステムが新しいモジュールに気付くために&lt;a href=&quot;#importlib.invalidate_caches&quot;&gt; &lt;code&gt;invalidate_caches()&lt;/code&gt; &lt;/a&gt;を呼び出す必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="7a4f0de1719448ed4a63c40279ef044d3f941a85" translate="yes" xml:space="preserve">
          <source>If you are going to create a server that provides SSL-encrypted connection services, you will need to acquire a certificate for that service. There are many ways of acquiring appropriate certificates, such as buying one from a certification authority. Another common practice is to generate a self-signed certificate. The simplest way to do this is with the OpenSSL package, using something like the following:</source>
          <target state="translated">SSLで暗号化された接続サービスを提供するサーバーを作成する場合、そのサービス用の証明書を取得する必要があります。適切な証明書を取得するには、認証局から購入するなど、さまざまな方法があります。もう一つの一般的な方法は、自己署名証明書を生成することです。これを行う最も簡単な方法は、OpenSSL パッケージを使用して、以下のようなものを使用することです。</target>
        </trans-unit>
        <trans-unit id="48d6cd7b9afb257bc9891717d33d65b967870ac6" translate="yes" xml:space="preserve">
          <source>If you are going to require validation of the other side of the connection&amp;rsquo;s certificate, you need to provide a &amp;ldquo;CA certs&amp;rdquo; file, filled with the certificate chains for each issuer you are willing to trust. Again, this file just contains these chains concatenated together. For validation, Python will use the first chain it finds in the file which matches. The platform&amp;rsquo;s certificates file can be used by calling &lt;a href=&quot;#ssl.SSLContext.load_default_certs&quot;&gt;&lt;code&gt;SSLContext.load_default_certs()&lt;/code&gt;&lt;/a&gt;, this is done automatically with &lt;a href=&quot;#ssl.create_default_context&quot;&gt;&lt;code&gt;create_default_context()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">接続の証明書の反対側の検証を要求する場合は、信頼できる各発行者の証明書チェーンが入った「CA証明書」ファイルを提供する必要があります。繰り返しますが、このファイルには、これらのチェーンが連結されただけが含まれています。検証のために、Pythonは一致するファイルで最初に見つかったチェーンを使用します。&lt;a href=&quot;#ssl.SSLContext.load_default_certs&quot;&gt; &lt;code&gt;SSLContext.load_default_certs()&lt;/code&gt; を&lt;/a&gt;呼び出すことで、プラットフォームの証明書ファイルを使用できます。これは、&lt;a href=&quot;#ssl.create_default_context&quot;&gt; &lt;code&gt;create_default_context()&lt;/code&gt; で&lt;/a&gt;自動的に行われます。</target>
        </trans-unit>
        <trans-unit id="2f73a6f10ffa7b443163f14e92196bc1fc4490c7" translate="yes" xml:space="preserve">
          <source>If you are implementing a CGI-based handler of your own, you probably want to use this routine instead of just copying values out of &lt;code&gt;os.environ&lt;/code&gt; directly.</source>
          <target state="translated">独自のCGIベースのハンドラーを実装している場合は、 &lt;code&gt;os.environ&lt;/code&gt; から直接値をコピーするのではなく、このルーチンを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="7b970e3329e89a382ded0086b19b66d215dd892f" translate="yes" xml:space="preserve">
          <source>If you are implementing asynchronous signal handlers using the &lt;a href=&quot;signal#module-signal&quot;&gt;&lt;code&gt;signal&lt;/code&gt;&lt;/a&gt; module, you may not be able to use logging from within such handlers. This is because lock implementations in the &lt;a href=&quot;threading#module-threading&quot;&gt;&lt;code&gt;threading&lt;/code&gt;&lt;/a&gt; module are not always re-entrant, and so cannot be invoked from such signal handlers.</source>
          <target state="translated">&lt;a href=&quot;signal#module-signal&quot;&gt; &lt;code&gt;signal&lt;/code&gt; &lt;/a&gt;モジュールを使用して非同期シグナルハンドラーを実装している場合、そのようなハンドラー内からロギングを使用できないことがあります。これは、&lt;a href=&quot;threading#module-threading&quot;&gt; &lt;code&gt;threading&lt;/code&gt; &lt;/a&gt;モジュールのロック実装が常に再入可能であるとは限らないため、そのようなシグナルハンドラーから呼び出すことができないためです。</target>
        </trans-unit>
        <trans-unit id="4f3cb106b921f87d2d40c7d80ff67464e95e3f8e" translate="yes" xml:space="preserve">
          <source>If you are localizing your application, you can install the &lt;code&gt;_()&lt;/code&gt; function globally into the built-in namespace, usually in the main driver file of your application. This will let all your application-specific files just use &lt;code&gt;_('...')&lt;/code&gt; without having to explicitly install it in each file.</source>
          <target state="translated">アプリケーションをローカライズする場合は、 &lt;code&gt;_()&lt;/code&gt; 関数を組み込みネームスペースにグローバルにインストールできます。通常は、アプリケーションのメインドライバーファイルにあります。これにより、アプリケーション固有のすべてのファイルで &lt;code&gt;_('...')&lt;/code&gt; を使用するだけで、各ファイルに明示的にインストールする必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="1c5e00d28ce108672fa04f99996f53e40842cac4" translate="yes" xml:space="preserve">
          <source>If you are localizing your module, you must take care not to make global changes, e.g. to the built-in namespace. You should not use the GNU &lt;strong&gt;gettext&lt;/strong&gt; API but instead the class-based API.</source>
          <target state="translated">モジュールをローカライズする場合は、組み込みの名前空間など、グローバルな変更を行わないように注意する必要があります。GNU &lt;strong&gt;gettext&lt;/strong&gt; APIではなく、クラスベースのAPIを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="11373b731524ebbb3396ed6f424ed35b172c4f94" translate="yes" xml:space="preserve">
          <source>If you are running an entropy-gathering daemon (EGD) somewhere, and &lt;em&gt;path&lt;/em&gt; is the pathname of a socket connection open to it, this will read 256 bytes of randomness from the socket, and add it to the SSL pseudo-random number generator to increase the security of generated secret keys. This is typically only necessary on systems without better sources of randomness.</source>
          <target state="translated">エントロピー収集デーモン（EGD）をどこかで実行していて、&lt;em&gt;path&lt;/em&gt;が開いているソケット接続のパス名である場合、これはソケットから256バイトのランダム性を読み取り、SSL擬似乱数ジェネレーターに追加して、生成された秘密鍵のセキュリティを強化します。これは通常、より良いランダム性のソースがないシステムでのみ必要です。</target>
        </trans-unit>
        <trans-unit id="5d915c3ac798b1162027d4b78ee74eb32aecf245" translate="yes" xml:space="preserve">
          <source>If you are shipping a Windows executable as described above, you either need to ensure that your users have &lt;code&gt;python3.dll&lt;/code&gt; on their PATH (which is not the default behaviour of the installer) or you should bundle your application with the embedded distribution.</source>
          <target state="translated">上記のようにWindows実行可能ファイルを出荷する場合は、ユーザーのPATHに &lt;code&gt;python3.dll&lt;/code&gt; があることを確認する必要があります（インストーラーのデフォルトの動作ではありません）。または、アプリケーションを組み込みディストリビューションにバンドルする必要があります。</target>
        </trans-unit>
        <trans-unit id="b3c30a5d84ebc01f28c65df6e216a65d2921455f" translate="yes" xml:space="preserve">
          <source>If you are thinking of defining your own levels, please see the section on &lt;a href=&quot;https://docs.python.org/3.8/howto/logging.html#custom-levels&quot;&gt;Custom Levels&lt;/a&gt;.</source>
          <target state="translated">独自のレベルを定義することを考えている場合は、「&lt;a href=&quot;https://docs.python.org/3.8/howto/logging.html#custom-levels&quot;&gt;カスタムレベル&lt;/a&gt;」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="0213022b07a4316b98d4138edf72e870b144d96a" translate="yes" xml:space="preserve">
          <source>If you are thinking of defining your own levels, please see the section on &lt;a href=&quot;https://docs.python.org/3.9/howto/logging.html#custom-levels&quot;&gt;Custom Levels&lt;/a&gt;.</source>
          <target state="translated">独自のレベルを定義することを検討している場合は、&lt;a href=&quot;https://docs.python.org/3.9/howto/logging.html#custom-levels&quot;&gt;カスタムレベルの&lt;/a&gt;セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="49e3cbf5ea7b5f0ea71d8bc500fc226c950f1779" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; to create a mock for you then it will be returned by the call to &lt;code&gt;patcher.start&lt;/code&gt;.</source>
          <target state="translated">使用している場合は&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;あなたのためのモックを作成するために、それはへの呼び出しによって返されます &lt;code&gt;patcher.start&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="364049631376a2a1d8911fd5401507c7f5516ee6" translate="yes" xml:space="preserve">
          <source>If you are using code that you know will raise a warning, such as a deprecated function, but do not want to see the warning (even when warnings have been explicitly configured via the command line), then it is possible to suppress the warning using the &lt;a href=&quot;#warnings.catch_warnings&quot;&gt;&lt;code&gt;catch_warnings&lt;/code&gt;&lt;/a&gt; context manager:</source>
          <target state="translated">廃止予定の関数など、警告が発生することがわかっているが、警告を表示したくないことがわかっているコードを使用している場合（コマンドラインで警告が明示的に構成されている場合でも）、次のコマンドを使用して警告を抑制することができます。&lt;a href=&quot;#warnings.catch_warnings&quot;&gt; &lt;code&gt;catch_warnings&lt;/code&gt; の&lt;/a&gt;コンテキストマネージャ：</target>
        </trans-unit>
        <trans-unit id="0c3d77e1b4bf3414b19d6e3647400caf29838bae" translate="yes" xml:space="preserve">
          <source>If you are using {}-formatting (&lt;a href=&quot;stdtypes#str.format&quot;&gt;&lt;code&gt;str.format()&lt;/code&gt;&lt;/a&gt;), you can use &lt;code&gt;{attrname}&lt;/code&gt; as the placeholder in the format string. If you are using $-formatting (&lt;a href=&quot;string#string.Template&quot;&gt;&lt;code&gt;string.Template&lt;/code&gt;&lt;/a&gt;), use the form &lt;code&gt;${attrname}&lt;/code&gt;. In both cases, of course, replace &lt;code&gt;attrname&lt;/code&gt; with the actual attribute name you want to use.</source>
          <target state="translated">{}-フォーマット（&lt;a href=&quot;stdtypes#str.format&quot;&gt; &lt;code&gt;str.format()&lt;/code&gt; &lt;/a&gt;）を使用している場合は、フォーマット文字列のプレースホルダーとして &lt;code&gt;{attrname}&lt;/code&gt; を使用できます。 $ -formatting（&lt;a href=&quot;string#string.Template&quot;&gt; &lt;code&gt;string.Template&lt;/code&gt; &lt;/a&gt;）を使用している場合は、 &lt;code&gt;${attrname}&lt;/code&gt; 形式を使用します。もちろん、どちらの場合でも、 &lt;code&gt;attrname&lt;/code&gt; を実際に使用する属性名に置き換えます。</target>
        </trans-unit>
        <trans-unit id="b6c36be2e20c5d0cd71ba05a7b714e1c1aa79df2" translate="yes" xml:space="preserve">
          <source>If you attach a handler to a logger &lt;em&gt;and&lt;/em&gt; one or more of its ancestors, it may emit the same record multiple times. In general, you should not need to attach a handler to more than one logger - if you just attach it to the appropriate logger which is highest in the logger hierarchy, then it will see all events logged by all descendant loggers, provided that their propagate setting is left set to &lt;code&gt;True&lt;/code&gt;. A common scenario is to attach handlers only to the root logger, and to let propagation take care of the rest.</source>
          <target state="translated">ロガー&lt;em&gt;と&lt;/em&gt;その祖先の1つ以上にハンドラーをアタッチすると、同じレコードが複数回出力される場合があります。一般に、ハンドラーを複数のロガーにアタッチする必要はありません。ロガー階層の最上位にある適切なロガーにハンドラーをアタッチするだけであれば、すべての子孫ロガーによってログに記録されたすべてのイベントが表示されます。設定は &lt;code&gt;True&lt;/code&gt; に設定されたままです。一般的なシナリオは、ルートロガーにのみハンドラーを接続し、残りの部分は伝播に任せることです。</target>
        </trans-unit>
        <trans-unit id="71db1cfc049ed9436b58c3258dd2abae66bed7a0" translate="yes" xml:space="preserve">
          <source>If you call getpass from within IDLE, the input may be done in the terminal you launched IDLE from rather than the idle window itself.</source>
          <target state="translated">idle内からgetpassを呼び出すと、idleウィンドウそのものではなく、idleを起動した端末で入力が行われる場合があります。</target>
        </trans-unit>
        <trans-unit id="dcfe31f0c3025ba1247b84cd55bce06307c9aaab" translate="yes" xml:space="preserve">
          <source>If you choose to use these attributes in logged messages, you need to exercise some care. In the above example, for instance, the &lt;a href=&quot;#logging.Formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt; has been set up with a format string which expects &amp;lsquo;clientip&amp;rsquo; and &amp;lsquo;user&amp;rsquo; in the attribute dictionary of the &lt;a href=&quot;#logging.LogRecord&quot;&gt;&lt;code&gt;LogRecord&lt;/code&gt;&lt;/a&gt;. If these are missing, the message will not be logged because a string formatting exception will occur. So in this case, you always need to pass the &lt;em&gt;extra&lt;/em&gt; dictionary with these keys.</source>
          <target state="translated">ログに記録されたメッセージでこれらの属性を使用することを選択した場合、いくつかの注意を払う必要があります。たとえば、上記の例では、&lt;a href=&quot;#logging.Formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;#logging.LogRecord&quot;&gt; &lt;code&gt;LogRecord&lt;/code&gt; の&lt;/a&gt;属性ディクショナリで「clientip」と「user」を予期するフォーマット文字列で設定されています。これらがない場合、文字列フォーマットの例外が発生するため、メッセージはログに記録されません。したがって、この場合、常にこれらのキーを使用して&lt;em&gt;追加の&lt;/em&gt;辞書を渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="9a9e4560c049a5fff3d7922f2065fe9c4f0bab32" translate="yes" xml:space="preserve">
          <source>If you choose to use these attributes in logged messages, you need to exercise some care. In the above example, for instance, the &lt;a href=&quot;#logging.Formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt; has been set up with a format string which expects &amp;lsquo;clientip&amp;rsquo; and &amp;lsquo;user&amp;rsquo; in the attribute dictionary of the LogRecord. If these are missing, the message will not be logged because a string formatting exception will occur. So in this case, you always need to pass the &lt;em&gt;extra&lt;/em&gt; dictionary with these keys.</source>
          <target state="translated">ログに記録されたメッセージでこれらの属性を使用することを選択した場合、いくつかの注意を払う必要があります。たとえば、上記の例では、&lt;a href=&quot;#logging.Formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt;は、LogRecordの属性ディクショナリで「clientip」と「user」を予期するフォーマット文字列で設定されています。これらがない場合、文字列フォーマットの例外が発生するため、メッセージはログに記録されません。したがって、この場合、常にこれらのキーを使用して&lt;em&gt;追加の&lt;/em&gt;辞書を渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="c553bc4df8103396b1cf2c4eb7ef7300e63b8315" translate="yes" xml:space="preserve">
          <source>If you code or decode textfiles on non-Macintosh platforms they will still use the old Macintosh newline convention (carriage-return as end of line).</source>
          <target state="translated">Macintosh 以外のプラットフォームでテキストファイルをコード化したりデコードしたりしても、古い Macintosh の改行の規則 (行末にキャリッジリターン)が使われます。</target>
        </trans-unit>
        <trans-unit id="5d1ed81961b6cb7496a0e0f060cff06cad3d1812" translate="yes" xml:space="preserve">
          <source>If you continue a line via backslashing in an interactive session, or for any other reason use a backslash, you should use a raw docstring, which will preserve your backslashes exactly as you type them:</source>
          <target state="translated">対話型セッションでバックスラッシュを使って行を続ける場合や、その他の理由でバックスラッシュを使用する場合は、生の docstring を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="5cac94944ad97618e4be13390591255007102a1f" translate="yes" xml:space="preserve">
          <source>If you create a finalizer object in a daemonic thread just as the program exits then there is the possibility that the finalizer does not get called at exit. However, in a daemonic thread &lt;a href=&quot;atexit#atexit.register&quot;&gt;&lt;code&gt;atexit.register()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;try: ... finally: ...&lt;/code&gt; and &lt;code&gt;with: ...&lt;/code&gt; do not guarantee that cleanup occurs either.</source>
          <target state="translated">プログラムの終了時にデーモンスレッドでファイナライザオブジェクトを作成すると、終了時にファイナライザが呼び出されない可能性があります。しかし、鬼神のスレッドで&lt;a href=&quot;atexit#atexit.register&quot;&gt; &lt;code&gt;atexit.register()&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;try: ... finally: ...&lt;/code&gt; と &lt;code&gt;with: ...&lt;/code&gt; そのクリーンアップがいずれかの発生を保証するものではありません。</target>
        </trans-unit>
        <trans-unit id="a460562d42a2a11f6a379108a05dfc43f47c1591" translate="yes" xml:space="preserve">
          <source>If you define the &lt;code&gt;WINDOWS&lt;/code&gt; preprocessor symbol, this will generate a GUI executable, and without it, a console executable.</source>
          <target state="translated">&lt;code&gt;WINDOWS&lt;/code&gt; プリプロセッサシンボルを定義すると、GUI実行可能ファイルが生成され、それがない場合はコンソール実行可能ファイルが生成されます。</target>
        </trans-unit>
        <trans-unit id="2b8d268659c0afbd91ab53443b6a751cff765c3b" translate="yes" xml:space="preserve">
          <source>If you do not want that behavior, preprocess the &lt;em&gt;url&lt;/em&gt; with &lt;a href=&quot;#urllib.parse.urlsplit&quot;&gt;&lt;code&gt;urlsplit()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#urllib.parse.urlunsplit&quot;&gt;&lt;code&gt;urlunsplit()&lt;/code&gt;&lt;/a&gt;, removing possible &lt;em&gt;scheme&lt;/em&gt; and &lt;em&gt;netloc&lt;/em&gt; parts.</source>
          <target state="translated">その動作を望まない場合は、&lt;a href=&quot;#urllib.parse.urlsplit&quot;&gt; &lt;code&gt;urlsplit()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#urllib.parse.urlunsplit&quot;&gt; &lt;code&gt;urlunsplit()&lt;/code&gt; &lt;/a&gt;を使用して&lt;em&gt;URL&lt;/em&gt;を前処理し、考えられる&lt;em&gt;スキーム&lt;/em&gt;と&lt;em&gt;netlocの&lt;/em&gt;部分を削除して&lt;em&gt;ください&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="75f973cadf33dbb5346b31c20f9455a09e62a539" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t know whether a &lt;a href=&quot;#winreg.FlushKey&quot;&gt;&lt;code&gt;FlushKey()&lt;/code&gt;&lt;/a&gt; call is required, it probably isn&amp;rsquo;t.</source>
          <target state="translated">&lt;a href=&quot;#winreg.FlushKey&quot;&gt; &lt;code&gt;FlushKey()&lt;/code&gt; &lt;/a&gt;コールが必要かどうかわからない場合は、おそらく必要ありません。</target>
        </trans-unit>
        <trans-unit id="8e329f1a76521b4e0c106f18d644a53b002a016b" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t like the ACW popping up unbidden, simply make the delay longer or disable the extension.</source>
          <target state="translated">ACWポップアップが表示されたくない場合は、遅延を長くするか、拡張機能を無効にしてください。</target>
        </trans-unit>
        <trans-unit id="07407a9c866063255f749a7211d292d84fbd66bb" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want a newline termination, you can set the handler instance&amp;rsquo;s &lt;code&gt;terminator&lt;/code&gt; attribute to the empty string.</source>
          <target state="translated">改行を終了したくない場合は、ハンドラーインスタンスの &lt;code&gt;terminator&lt;/code&gt; 属性を空の文字列に設定できます。</target>
        </trans-unit>
        <trans-unit id="c0b378bb20bf0aa3247056c249ea998b15eb65e8" translate="yes" xml:space="preserve">
          <source>If you don&amp;rsquo;t want to store the instance&amp;rsquo;s data in the &lt;code&gt;_as_parameter_&lt;/code&gt; instance variable, you could define a &lt;a href=&quot;functions#property&quot;&gt;&lt;code&gt;property&lt;/code&gt;&lt;/a&gt; which makes the attribute available on request.</source>
          <target state="translated">インスタンスのデータを &lt;code&gt;_as_parameter_&lt;/code&gt; インスタンス変数に保存したくない場合は、リクエストに応じて属性を使用可能にする&lt;a href=&quot;functions#property&quot;&gt; &lt;code&gt;property&lt;/code&gt; &lt;/a&gt;を定義できます。</target>
        </trans-unit>
        <trans-unit id="7a8d040851b0915051f326bd15d54a88ae21e65f" translate="yes" xml:space="preserve">
          <source>If you find that when certain older clients or servers attempt to connect with a &lt;a href=&quot;#ssl.SSLContext&quot;&gt;&lt;code&gt;SSLContext&lt;/code&gt;&lt;/a&gt; created by this function that they get an error stating &amp;ldquo;Protocol or cipher suite mismatch&amp;rdquo;, it may be that they only support SSL3.0 which this function excludes using the &lt;a href=&quot;#ssl.OP_NO_SSLv3&quot;&gt;&lt;code&gt;OP_NO_SSLv3&lt;/code&gt;&lt;/a&gt;. SSL3.0 is widely considered to be &lt;a href=&quot;https://en.wikipedia.org/wiki/POODLE&quot;&gt;completely broken&lt;/a&gt;. If you still wish to continue to use this function but still allow SSL 3.0 connections you can re-enable them using:</source>
          <target state="translated">特定の古いクライアントまたはサーバーがこの関数によって作成された&lt;a href=&quot;#ssl.SSLContext&quot;&gt; &lt;code&gt;SSLContext&lt;/code&gt; で&lt;/a&gt;接続しようとすると、「プロトコルまたは暗号スイートの不一致」というエラーが表示される場合、SSL3.0のみがサポートされている可能性があります。&lt;a href=&quot;#ssl.OP_NO_SSLv3&quot;&gt; &lt;code&gt;OP_NO_SSLv3&lt;/code&gt; &lt;/a&gt;。SSL3.0は&lt;a href=&quot;https://en.wikipedia.org/wiki/POODLE&quot;&gt;完全に壊れて&lt;/a&gt;いると広く考えられています。この機能を引き続き使用したいが、SSL 3.0接続を許可する場合は、次のコマンドを使用して再度有効にできます。</target>
        </trans-unit>
        <trans-unit id="fe9aa74952f83bd4d51d51d4e83cebc44b0b2fe0" translate="yes" xml:space="preserve">
          <source>If you give your &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; subclass extra methods, like the &lt;a href=&quot;#planet&quot;&gt;Planet&lt;/a&gt; class above, those methods will show up in a &lt;a href=&quot;functions#dir&quot;&gt;&lt;code&gt;dir()&lt;/code&gt;&lt;/a&gt; of the member, but not of the class:</source>
          <target state="translated">あなたが与えた場合&lt;a href=&quot;#enum.Enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;サブクラス余分な方法を、のような&lt;a href=&quot;#planet&quot;&gt;惑星の&lt;/a&gt;上のクラスに、これらのメソッドは、に表示されます&lt;a href=&quot;functions#dir&quot;&gt; &lt;code&gt;dir()&lt;/code&gt; &lt;/a&gt;メンバーのではなく、クラスの：</target>
        </trans-unit>
        <trans-unit id="ddea48c736e63a88242d988d2f93ca78d7b3b84d" translate="yes" xml:space="preserve">
          <source>If you have XML in a string, you can use the &lt;a href=&quot;#xml.dom.minidom.parseString&quot;&gt;&lt;code&gt;parseString()&lt;/code&gt;&lt;/a&gt; function instead:</source>
          <target state="translated">文字列にXMLがある場合は、代わりに&lt;a href=&quot;#xml.dom.minidom.parseString&quot;&gt; &lt;code&gt;parseString()&lt;/code&gt; &lt;/a&gt;関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="68b99e8b222c2278454b1cadc38d91ffc4b68997" translate="yes" xml:space="preserve">
          <source>If you have XML in a string, you can use the &lt;a href=&quot;#xml.dom.pulldom.parseString&quot;&gt;&lt;code&gt;parseString()&lt;/code&gt;&lt;/a&gt; function instead:</source>
          <target state="translated">文字列にXMLがある場合は、代わりに&lt;a href=&quot;#xml.dom.pulldom.parseString&quot;&gt; &lt;code&gt;parseString()&lt;/code&gt; &lt;/a&gt;関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="e75dc8b8eb57f89ef2cc0c8f2d61866415c62ce9" translate="yes" xml:space="preserve">
          <source>If you have a choice, you are better off choosing a smaller constant, and then your results will &amp;ldquo;less often&amp;rdquo; show up as negative in profile statistics.</source>
          <target state="translated">選択肢がある場合は、小さい定数を選択することをお勧めします。結果は、プロファイル統計で「あまり頻繁に」否定的に表示されません。</target>
        </trans-unit>
        <trans-unit id="08f422ccd0761694976f4b7f344ccca267ef692c" translate="yes" xml:space="preserve">
          <source>If you have a package installed globally and attempt test discovery on a different copy of the package then the import &lt;em&gt;could&lt;/em&gt; happen from the wrong place. If this happens test discovery will warn you and exit.</source>
          <target state="translated">パッケージをグローバルにインストールしていて、パッケージの別のコピーでテスト検出を試みると、インポート&lt;em&gt;が&lt;/em&gt;間違った場所から行われる&lt;em&gt;可能&lt;/em&gt;性があります。これが発生した場合、テスト検出は警告を表示して終了します。</target>
        </trans-unit>
        <trans-unit id="fdc90a074f4d5efa53ede11d8bcd3da1d1900c9c" translate="yes" xml:space="preserve">
          <source>If you have advanced security requirements, fine-tuning of the ciphers enabled when negotiating a SSL session is possible through the &lt;a href=&quot;#ssl.SSLContext.set_ciphers&quot;&gt;&lt;code&gt;SSLContext.set_ciphers()&lt;/code&gt;&lt;/a&gt; method. Starting from Python 3.2.3, the ssl module disables certain weak ciphers by default, but you may want to further restrict the cipher choice. Be sure to read OpenSSL&amp;rsquo;s documentation about the &lt;a href=&quot;https://www.openssl.org/docs/manmaster/man1/ciphers.html#CIPHER-LIST-FORMAT&quot;&gt;cipher list format&lt;/a&gt;. If you want to check which ciphers are enabled by a given cipher list, use &lt;a href=&quot;#ssl.SSLContext.get_ciphers&quot;&gt;&lt;code&gt;SSLContext.get_ciphers()&lt;/code&gt;&lt;/a&gt; or the &lt;code&gt;openssl ciphers&lt;/code&gt; command on your system.</source>
          <target state="translated">高度なセキュリティ要件がある場合、SSLセッションをネゴシエートするときに有効になっている暗号の微調整は、&lt;a href=&quot;#ssl.SSLContext.set_ciphers&quot;&gt; &lt;code&gt;SSLContext.set_ciphers()&lt;/code&gt; &lt;/a&gt;メソッドを介して可能です。Python 3.2.3以降、sslモジュールは特定の弱い暗号をデフォルトで無効にしますが、暗号の選択をさらに制限したい場合があります。&lt;a href=&quot;https://www.openssl.org/docs/manmaster/man1/ciphers.html#CIPHER-LIST-FORMAT&quot;&gt;暗号リスト形式&lt;/a&gt;に関するOpenSSLのドキュメントを必ずお読みください。特定の暗号リストで有効になっている暗号を確認する場合は、システムで&lt;a href=&quot;#ssl.SSLContext.get_ciphers&quot;&gt; &lt;code&gt;SSLContext.get_ciphers()&lt;/code&gt; &lt;/a&gt;または &lt;code&gt;openssl ciphers&lt;/code&gt; ciphersコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="f1e86f5dd0e423a473b0f05f43d4240f3be40b1e" translate="yes" xml:space="preserve">
          <source>If you have already calculated the mean of your data, you can pass it as the optional second argument &lt;em&gt;mu&lt;/em&gt; to avoid recalculation:</source>
          <target state="translated">データの平均をすでに計算している場合は、それをオプションの2番目の引数&lt;em&gt;mu&lt;/em&gt;として渡して、再計算を回避できます。</target>
        </trans-unit>
        <trans-unit id="4f65249585348639b163a15c90fb125aadfb0a99" translate="yes" xml:space="preserve">
          <source>If you have already calculated the mean of your data, you can pass it as the optional second argument &lt;em&gt;xbar&lt;/em&gt; to avoid recalculation:</source>
          <target state="translated">データの平均をすでに計算している場合は、それをオプションの2番目の引数&lt;em&gt;xbar&lt;/em&gt;として渡して、再計算を回避できます。</target>
        </trans-unit>
        <trans-unit id="6b5f4691daf2771d8fbe481e68889a589550470c" translate="yes" xml:space="preserve">
          <source>If you have an appropriate entry in your &lt;code&gt;turtle.cfg&lt;/code&gt; file this dictionary will be read in at import time and will replace the original English docstrings.</source>
          <target state="translated">&lt;code&gt;turtle.cfg&lt;/code&gt; ファイルに適切なエントリがある場合、この辞書はインポート時に読み込まれ、元の英語のドキュメント文字列を置き換えます。</target>
        </trans-unit>
        <trans-unit id="0a1e2776fdb2c280f99d04fa6d3f9aadbbdd2668" translate="yes" xml:space="preserve">
          <source>If you have an enum member and need its &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;value&lt;/code&gt;:</source>
          <target state="translated">enumメンバーがあり、その &lt;code&gt;name&lt;/code&gt; または &lt;code&gt;value&lt;/code&gt; が必要な場合：</target>
        </trans-unit>
        <trans-unit id="adddc6c47cf6a214332d2bba1e6dcbb1cf7609c4" translate="yes" xml:space="preserve">
          <source>If you have carried out a lot of deletions and would like to shrink the space used by the &lt;code&gt;gdbm&lt;/code&gt; file, this routine will reorganize the database. &lt;code&gt;gdbm&lt;/code&gt; objects will not shorten the length of a database file except by using this reorganization; otherwise, deleted file space will be kept and reused as new (key, value) pairs are added.</source>
          <target state="translated">多数の削除を実行し、 &lt;code&gt;gdbm&lt;/code&gt; ファイルが使用するスペースを縮小したい場合、このルーチンはデータベースを再編成します。 &lt;code&gt;gdbm&lt;/code&gt; オブジェクトは、この再編成を使用しない限り、データベースファイルの長さを短くしません。それ以外の場合、削除されたファイルスペースは保持され、新しい（キー、値）ペアが追加されたときに再利用されます。</target>
        </trans-unit>
        <trans-unit id="f3941a6c86792842a0db1694694d8d40f3510d0d" translate="yes" xml:space="preserve">
          <source>If you have defined your own classes which you pass to function calls, you have to implement a &lt;code&gt;from_param()&lt;/code&gt; class method for them to be able to use them in the &lt;code&gt;argtypes&lt;/code&gt; sequence. The &lt;code&gt;from_param()&lt;/code&gt; class method receives the Python object passed to the function call, it should do a typecheck or whatever is needed to make sure this object is acceptable, and then return the object itself, its &lt;code&gt;_as_parameter_&lt;/code&gt; attribute, or whatever you want to pass as the C function argument in this case. Again, the result should be an integer, string, bytes, a &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; instance, or an object with an &lt;code&gt;_as_parameter_&lt;/code&gt; attribute.</source>
          <target state="translated">関数呼び出しに渡す独自のクラスを定義している場合、それらを &lt;code&gt;argtypes&lt;/code&gt; シーケンスで使用できるようにするには、from_param &lt;code&gt;from_param()&lt;/code&gt; クラスメソッドを実装する必要があります。 &lt;code&gt;from_param()&lt;/code&gt; クラスメソッドは関数呼び出しに渡されたPythonオブジェクトを受け取り、それはです。TypeCheckを行う必要がありますか、必ずこのオブジェクトが許容可能であることを確認するために必要なものは何でも、その後、オブジェクト自身、その戻り &lt;code&gt;_as_parameter_&lt;/code&gt; の属性、または何でもあなたが渡したいがこの場合、C関数の引数として。この場合も、結果は整数、文字列、バイト、&lt;a href=&quot;#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; &lt;/a&gt;インスタンス、または &lt;code&gt;_as_parameter_&lt;/code&gt; 属性を持つオブジェクトである必要があります。</target>
        </trans-unit>
        <trans-unit id="c7ba5f87f67362e164e00c45234b25b88116bc45" translate="yes" xml:space="preserve">
          <source>If you have positional arguments that must begin with &lt;code&gt;-&lt;/code&gt; and don&amp;rsquo;t look like negative numbers, you can insert the pseudo-argument &lt;code&gt;'--'&lt;/code&gt; which tells &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt; that everything after that is a positional argument:</source>
          <target state="translated">&lt;code&gt;-&lt;/code&gt; で始まる必要がある位置引数があり、負の数値のように見えない場合は、&lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt; &lt;code&gt;parse_args()&lt;/code&gt; に&lt;/a&gt;それ以降のすべてが位置引数であることを通知する疑似引数 &lt;code&gt;'--'&lt;/code&gt; を挿入できます。</target>
        </trans-unit>
        <trans-unit id="a1ad6fc06b4f04b51136dd86e77cdf44c2345475" translate="yes" xml:space="preserve">
          <source>If you instantiate any of these types, note that signatures may vary between Python versions.</source>
          <target state="translated">これらの型のいずれかをインスタンス化する場合、シグネチャはPythonのバージョンによって異なる可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0ee2c99f3c1ce008b2482f9a4bd039eac988eb85" translate="yes" xml:space="preserve">
          <source>If you merely want to attach a time zone object &lt;em&gt;tz&lt;/em&gt; to a datetime &lt;em&gt;dt&lt;/em&gt; without adjustment of date and time data, use &lt;code&gt;dt.replace(tzinfo=tz)&lt;/code&gt;. If you merely want to remove the time zone object from an aware datetime &lt;em&gt;dt&lt;/em&gt; without conversion of date and time data, use &lt;code&gt;dt.replace(tzinfo=None)&lt;/code&gt;.</source>
          <target state="translated">日時データを調整せずに、タイムゾーンオブジェクト&lt;em&gt;tz&lt;/em&gt;を日時&lt;em&gt;dt&lt;/em&gt;にアタッチするだけの場合は、 &lt;code&gt;dt.replace(tzinfo=tz)&lt;/code&gt; を使用します。日時データを変換せずに、対応する日時&lt;em&gt;dt&lt;/em&gt;からタイムゾーンオブジェクトを削除するだけの場合は、 &lt;code&gt;dt.replace(tzinfo=None)&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="cc6c75c360131321b14d956646dcffde70eca5a7" translate="yes" xml:space="preserve">
          <source>If you need a fully populated element, look for &amp;ldquo;end&amp;rdquo; events instead.</source>
          <target state="translated">完全に入力された要素が必要な場合は、代わりに「終了」イベントを探してください。</target>
        </trans-unit>
        <trans-unit id="86368d19f69c93150072272046943f1484ff2526" translate="yes" xml:space="preserve">
          <source>If you need to find out if a module can be imported without actually doing the import, then you should use &lt;a href=&quot;#importlib.util.find_spec&quot;&gt;&lt;code&gt;importlib.util.find_spec()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">実際にインポートを行わずにモジュールをインポートできるかどうかを確認する必要がある場合は、&lt;a href=&quot;#importlib.util.find_spec&quot;&gt; &lt;code&gt;importlib.util.find_spec()&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4101124fa4b09fc6cc1ef68bc64b034b218ec7e6" translate="yes" xml:space="preserve">
          <source>If you need to free memory, for example, allocated by an extension module with a call to the &lt;code&gt;free(void *)&lt;/code&gt;, it is important that you use the function in the same library that allocated the memory.</source>
          <target state="translated">たとえば、 &lt;code&gt;free(void *)&lt;/code&gt; を呼び出して拡張モジュールによって割り当てられたメモリを解放する必要がある場合は、メモリを割り当てたのと同じライブラリ内の関数を使用することが重要です。</target>
        </trans-unit>
        <trans-unit id="6ca61f6332d6d58306dfe4cd895fbd3ec252e9fa" translate="yes" xml:space="preserve">
          <source>If you need to know if a class is an instance of a dataclass (and not a dataclass itself), then add a further check for &lt;code&gt;not
isinstance(obj, type)&lt;/code&gt;:</source>
          <target state="translated">クラスが（データクラス自体ではなく）データクラスのインスタンスであるかどうかを知る必要がある場合は、 &lt;code&gt;not isinstance(obj, type)&lt;/code&gt; チェックを追加します。</target>
        </trans-unit>
        <trans-unit id="9fbb0aa423003d7733fbd8694a32a308d63c2747" translate="yes" xml:space="preserve">
          <source>If you need to load modules from a directory which is not on Python&amp;rsquo;s default module search path, you can change the path in your script, before importing other modules. For example:</source>
          <target state="translated">Pythonのデフォルトのモジュール検索パス上にないディレクトリからモジュールをロードする必要がある場合は、他のモジュールをインポートする前に、スクリプトでパスを変更できます。例えば：</target>
        </trans-unit>
        <trans-unit id="1cf32b7cc15737ca5c3f1bc7291a3230ef00b4ed" translate="yes" xml:space="preserve">
          <source>If you need to make more significant changes to rotation processing, you can override the methods.</source>
          <target state="translated">回転処理をより大幅に変更する必要がある場合は、メソッドをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="d96003b130e0abd7634352c365ff1181febdd21c" translate="yes" xml:space="preserve">
          <source>If you need to modify the environment for the child use the &lt;em&gt;env&lt;/em&gt; parameter rather than doing it in a &lt;em&gt;preexec_fn&lt;/em&gt;. The &lt;em&gt;start_new_session&lt;/em&gt; parameter can take the place of a previously common use of &lt;em&gt;preexec_fn&lt;/em&gt; to call os.setsid() in the child.</source>
          <target state="translated">子の環境を変更する必要がある場合は、&lt;em&gt;preexec_fn&lt;/em&gt;ではなく&lt;em&gt;env&lt;/em&gt;パラメータを使用します。&lt;em&gt;start_new_sessionの&lt;/em&gt;パラメータは、以前の一般的な使用場所取ることができ&lt;em&gt;preexec_fnには&lt;/em&gt;、子供に（）os.setsidコールします。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f304fd08cfd78b8854b1fd29f66f112cd5c13e1e" translate="yes" xml:space="preserve">
          <source>If you need to set the locale directory, you can pass it into the &lt;a href=&quot;#gettext.install&quot;&gt;&lt;code&gt;install()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">ロケールディレクトリを設定する必要がある場合は、それを&lt;a href=&quot;#gettext.install&quot;&gt; &lt;code&gt;install()&lt;/code&gt; &lt;/a&gt;関数に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="989b83d5f423a04c98cf18328ded12c8c1f9993b" translate="yes" xml:space="preserve">
          <source>If you pass a relative pathname, don&amp;rsquo;t change the current working directory between resumptions of &lt;a href=&quot;#os.walk&quot;&gt;&lt;code&gt;walk()&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#os.walk&quot;&gt;&lt;code&gt;walk()&lt;/code&gt;&lt;/a&gt; never changes the current directory, and assumes that its caller doesn&amp;rsquo;t either.</source>
          <target state="translated">相対パス名を渡す場合、&lt;a href=&quot;#os.walk&quot;&gt; &lt;code&gt;walk()&lt;/code&gt; の&lt;/a&gt;再開の間に現在の作業ディレクトリを変更しないでください。&lt;a href=&quot;#os.walk&quot;&gt; &lt;code&gt;walk()&lt;/code&gt; &lt;/a&gt;は現在のディレクトリを決して変更せず、その呼び出し元も変更しないと想定します。</target>
        </trans-unit>
        <trans-unit id="14e992d9d4752d16d4f2db4c0441e7739cd4616d" translate="yes" xml:space="preserve">
          <source>If you pass in a file-like object, the wave object will not close it when its &lt;code&gt;close()&lt;/code&gt; method is called; it is the caller&amp;rsquo;s responsibility to close the file object.</source>
          <target state="translated">ファイルのようなオブジェクトを渡した場合、waveオブジェクトは &lt;code&gt;close()&lt;/code&gt; メソッドが呼び出されてもそれを閉じません。ファイルオブジェクトを閉じるのは呼び出し側の責任です。</target>
        </trans-unit>
        <trans-unit id="bce6fbed23eb5dcd1301360b71b6c428b6101471" translate="yes" xml:space="preserve">
          <source>If you pass in a function it will be called with same arguments as the mock and unless the function returns the &lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt;&lt;code&gt;DEFAULT&lt;/code&gt;&lt;/a&gt; singleton the call to the mock will then return whatever the function returns. If the function returns &lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt;&lt;code&gt;DEFAULT&lt;/code&gt;&lt;/a&gt; then the mock will return its normal value (from the &lt;a href=&quot;#unittest.mock.Mock.return_value&quot;&gt;&lt;code&gt;return_value&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">関数を渡すと、モックと同じ引数で呼び出され、関数が&lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt; &lt;code&gt;DEFAULT&lt;/code&gt; &lt;/a&gt;シングルトンを返さない限り、モックの呼び出しは、関数が返すものは何でも返します。関数が&lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt; &lt;code&gt;DEFAULT&lt;/code&gt; &lt;/a&gt;を返す場合、モックは（&lt;a href=&quot;#unittest.mock.Mock.return_value&quot;&gt; &lt;code&gt;return_value&lt;/code&gt; &lt;/a&gt;から）通常の値を返します。</target>
        </trans-unit>
        <trans-unit id="a5bcec43963bc6522bf0a067657c871d04e72c94" translate="yes" xml:space="preserve">
          <source>If you pass in an iterable, it is used to retrieve an iterator which must yield a value on every call. This value can either be an exception instance to be raised, or a value to be returned from the call to the mock (&lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt;&lt;code&gt;DEFAULT&lt;/code&gt;&lt;/a&gt; handling is identical to the function case).</source>
          <target state="translated">iterableを渡すと、すべての呼び出しで値を生成する必要があるイテレータを取得するために使用されます。この値は、発生する例外インスタンスか、呼び出しからモックに返される値のいずれかです（&lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt; &lt;code&gt;DEFAULT&lt;/code&gt; &lt;/a&gt;処理は関数の場合と同じです）。</target>
        </trans-unit>
        <trans-unit id="e8f98dd86ae9edd376ec292daf25469e857090bc" translate="yes" xml:space="preserve">
          <source>If you prefer to tune security settings yourself, you might create a context from scratch (but beware that you might not get the settings right):</source>
          <target state="translated">セキュリティ設定を自分で調整したい場合は、最初からコンテキストを作成することができます (ただし、設定が正しく行われない可能性があるので注意してください)。</target>
        </trans-unit>
        <trans-unit id="13d9f70eafdbcb60562762894f8800d86df24ae3" translate="yes" xml:space="preserve">
          <source>If you ran the process with &lt;code&gt;stderr=subprocess.STDOUT&lt;/code&gt;, stdout and stderr will be combined in this attribute, and &lt;a href=&quot;#subprocess.CompletedProcess.stderr&quot;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; will be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stderr=subprocess.STDOUT&lt;/code&gt; でプロセスを実行した場合、stdoutとstderrがこの属性で結合され、&lt;a href=&quot;#subprocess.CompletedProcess.stderr&quot;&gt; &lt;code&gt;stderr&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;None&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="097c1b21b4dc383068accbc4c009da7628ba1b98" translate="yes" xml:space="preserve">
          <source>If you run &lt;code&gt;example.py&lt;/code&gt; directly from the command line, &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; works its magic:</source>
          <target state="translated">コマンドラインから直接 &lt;code&gt;example.py&lt;/code&gt; を実行すると、&lt;a href=&quot;#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; &lt;/a&gt;はその魔法を使います：</target>
        </trans-unit>
        <trans-unit id="4f231c383bc8b650abcdc023f68a52b9b627363e" translate="yes" xml:space="preserve">
          <source>If you set e.g. &lt;code&gt;language = italian&lt;/code&gt; the docstringdict &lt;code&gt;turtle_docstringdict_italian.py&lt;/code&gt; will be loaded at import time (if present on the import path, e.g. in the same directory as &lt;a href=&quot;#module-turtle&quot;&gt;&lt;code&gt;turtle&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;language = italian&lt;/code&gt; を設定すると、docstringdict &lt;code&gt;turtle_docstringdict_italian.py&lt;/code&gt; がインポート時にロードされます（インポートパスに存在する場合、たとえば&lt;a href=&quot;#module-turtle&quot;&gt; &lt;code&gt;turtle&lt;/code&gt; &lt;/a&gt;と同じディレクトリにある場合）。</target>
        </trans-unit>
        <trans-unit id="9f9ca74752ebe3e1cde63708838074a0ef64b8ab" translate="yes" xml:space="preserve">
          <source>If you simply want to import a module (potentially within a package) by name, use &lt;a href=&quot;importlib#importlib.import_module&quot;&gt;&lt;code&gt;importlib.import_module()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">名前だけで（パッケージ内にある可能性がある）モジュールをインポートするだけの場合は、&lt;a href=&quot;importlib#importlib.import_module&quot;&gt; &lt;code&gt;importlib.import_module()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="eadedf4eaab1c80ba2f6a6ef7e45a206594d656a" translate="yes" xml:space="preserve">
          <source>If you somehow know the actual population mean &amp;mu; you should pass it to the &lt;a href=&quot;#statistics.pvariance&quot;&gt;&lt;code&gt;pvariance()&lt;/code&gt;&lt;/a&gt; function as the &lt;em&gt;mu&lt;/em&gt; parameter to get the variance of a sample.</source>
          <target state="translated">どういうわけか実際の母集団の平均&amp;mu;がわかっている場合は、それを&lt;em&gt;mu&lt;/em&gt;パラメーターとして&lt;a href=&quot;#statistics.pvariance&quot;&gt; &lt;code&gt;pvariance()&lt;/code&gt; &lt;/a&gt;関数に渡して、標本の分散を取得する必要があります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6158aab4724beaceaa6e79b29d9be8382f2e23f9" translate="yes" xml:space="preserve">
          <source>If you somehow know the true population mean &amp;mu;, you may use this function to calculate the variance of a sample, giving the known population mean as the second argument. Provided the data points are a random sample of the population, the result will be an unbiased estimate of the population variance.</source>
          <target state="translated">真の母集団平均&amp;mu;が何らかの形でわかっている場合は、この関数を使用してサンプルの分散を計算し、既知の母集団平均を2番目の引数として与えます。データポイントが母集団のランダムサンプルである場合、結果は母集団分散の不偏推定値になります。</target>
        </trans-unit>
        <trans-unit id="c10de555c4449d7964f6af5647d563052cabd068" translate="yes" xml:space="preserve">
          <source>If you supply the start directory as a package name rather than a path to a directory then discover assumes that whichever location it imports from is the location you intended, so you will not get the warning.</source>
          <target state="translated">開始ディレクトリをディレクトリへのパスではなくパッケージ名として指定した場合、discover はインポート元の場所があなたの意図した場所であると仮定しますので、警告は表示されません。</target>
        </trans-unit>
        <trans-unit id="9bc2a6c7429466d8bb8a989fdc7ce4cc694cd926" translate="yes" xml:space="preserve">
          <source>If you suspect that there may be a problem in importing the &lt;a href=&quot;cgitb#module-cgitb&quot;&gt;&lt;code&gt;cgitb&lt;/code&gt;&lt;/a&gt; module, you can use an even more robust approach (which only uses built-in modules):</source>
          <target state="translated">&lt;a href=&quot;cgitb#module-cgitb&quot;&gt; &lt;code&gt;cgitb&lt;/code&gt; &lt;/a&gt;モジュールのインポートに問題があると思われる場合は、さらに強力な方法（組み込みモジュールのみを使用）を使用できます。</target>
        </trans-unit>
        <trans-unit id="50de709429c8c96a2fb6b6fdf0e8b44acd7d7e0a" translate="yes" xml:space="preserve">
          <source>If you use &amp;ldquo;/usr/bin/env python&amp;rdquo; (or other forms of the &amp;ldquo;python&amp;rdquo; command, such as &amp;ldquo;/usr/bin/python&amp;rdquo;), you need to consider that your users may have either Python 2 or Python 3 as their default, and write your code to work under both versions.</source>
          <target state="translated">「/ usr / bin / env python」（または「/ usr / bin / python」などの他の形式の「python」コマンド）を使用する場合は、ユーザーがPython 2またはPython 3を使用している可能性があることを考慮する必要がありますデフォルトとして、両方のバージョンで動作するようにコードを記述します。</target>
        </trans-unit>
        <trans-unit id="3327948dd8642cd268b3754e1a2f4b14a2babf7c" translate="yes" xml:space="preserve">
          <source>If you use &lt;a href=&quot;#multiprocessing.JoinableQueue&quot;&gt;&lt;code&gt;JoinableQueue&lt;/code&gt;&lt;/a&gt; then you &lt;strong&gt;must&lt;/strong&gt; call &lt;a href=&quot;#multiprocessing.JoinableQueue.task_done&quot;&gt;&lt;code&gt;JoinableQueue.task_done()&lt;/code&gt;&lt;/a&gt; for each task removed from the queue or else the semaphore used to count the number of unfinished tasks may eventually overflow, raising an exception.</source>
          <target state="translated">&lt;a href=&quot;#multiprocessing.JoinableQueue&quot;&gt; &lt;code&gt;JoinableQueue&lt;/code&gt; &lt;/a&gt;を使用する場合、キューから削除される各タスクに対して&lt;a href=&quot;#multiprocessing.JoinableQueue.task_done&quot;&gt; &lt;code&gt;JoinableQueue.task_done()&lt;/code&gt; &lt;/a&gt;を呼び出す&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。そうし&lt;strong&gt;ない&lt;/strong&gt;と、未完了のタスクの数をカウントするために使用されるセマフォが最終的にオーバーフローし、例外が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="8f4f2a66699a6ccb9a802c6a128aa2a5c76c7e61" translate="yes" xml:space="preserve">
          <source>If you use &lt;em&gt;editline&lt;/em&gt;/&lt;code&gt;libedit&lt;/code&gt; readline emulation on macOS, the initialization file located in your home directory is named &lt;code&gt;.editrc&lt;/code&gt;. For example, the following content in &lt;code&gt;~/.editrc&lt;/code&gt; will turn ON &lt;em&gt;vi&lt;/em&gt; keybindings and TAB completion:</source>
          <target state="translated">macOSで&lt;em&gt;editline&lt;/em&gt; / &lt;code&gt;libedit&lt;/code&gt; readlineエミュレーションを使用する場合、ホームディレクトリにある初期化ファイルの名前は &lt;code&gt;.editrc&lt;/code&gt; です。たとえば、 &lt;code&gt;~/.editrc&lt;/code&gt; 次のコンテンツは、&lt;em&gt;vi&lt;/em&gt;キーバインドとタブ補完をオンにします。</target>
        </trans-unit>
        <trans-unit id="c3d4a93e13f71d80556de33a53d4ec361fe070d9" translate="yes" xml:space="preserve">
          <source>If you use &lt;em&gt;spec&lt;/em&gt; or &lt;em&gt;spec_set&lt;/em&gt; and &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; is replacing a &lt;em&gt;class&lt;/em&gt;, then the return value of the created mock will have the same spec.</source>
          <target state="translated">&lt;em&gt;spec&lt;/em&gt;または&lt;em&gt;spec_set&lt;/em&gt;を使用し、&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;が&lt;em&gt;classを&lt;/em&gt;置き換えている場合、作成されたモックの戻り値は同じ仕様になります。</target>
        </trans-unit>
        <trans-unit id="514f9487f7b2350c961e01f947173c311579e162" translate="yes" xml:space="preserve">
          <source>If you use a hostname in the &lt;em&gt;host&lt;/em&gt; portion of IPv4/v6 socket address, the program may show a nondeterministic behavior, as Python uses the first address returned from the DNS resolution. The socket address will be resolved differently into an actual IPv4/v6 address, depending on the results from DNS resolution and/or the host configuration. For deterministic behavior use a numeric address in &lt;em&gt;host&lt;/em&gt; portion.</source>
          <target state="translated">IPv4 / v6ソケットアドレスの&lt;em&gt;ホスト&lt;/em&gt;部分で&lt;em&gt;ホスト&lt;/em&gt;名を使用すると、PythonがDNS解決から返された最初のアドレスを使用するため、プログラムが非決定的な動作を示すことがあります。ソケットアドレスは、DNS解決やホスト構成の結果に応じて、実際のIPv4 / v6アドレスに異なる方法で解決されます。確定的な動作には、&lt;em&gt;ホスト&lt;/em&gt;部分に数値アドレスを使用します。</target>
        </trans-unit>
        <trans-unit id="96ea7b1cf88562cf80e633c2b1c94203e479e327" translate="yes" xml:space="preserve">
          <source>If you use an explicit version, for example &amp;ldquo;/usr/bin/env python3&amp;rdquo; your application will not work for users who do not have that version. (This may be what you want if you have not made your code Python 2 compatible).</source>
          <target state="translated">「/ usr / bin / env python3」などの明示的なバージョンを使用する場合、そのバージョンを持たないユーザーはアプリケーションを使用できません。（コードをPython 2互換にしていない場合は、これで十分です）。</target>
        </trans-unit>
        <trans-unit id="6997de2e41b96b52ebe4782063e52556ff05a848" translate="yes" xml:space="preserve">
          <source>If you use the &amp;lsquo;silent&amp;rsquo; command in the command list, the usual message about stopping at a breakpoint is not printed. This may be desirable for breakpoints that are to print a specific message and then continue. If none of the other commands print anything, you see no sign that the breakpoint was reached.</source>
          <target state="translated">コマンドリストで 'silent'コマンドを使用すると、ブレークポイントで停止することに関する通常のメッセージは出力されません。これは、特定のメッセージを出力して続行するブレークポイントに望ましい場合があります。他のコマンドで何も出力されない場合は、ブレークポイントに到達したという兆候はありません。</target>
        </trans-unit>
        <trans-unit id="f69dd2dd959b985277dcf16e4c5303ee3dde0861" translate="yes" xml:space="preserve">
          <source>If you use the &lt;em&gt;spec&lt;/em&gt; keyword argument to create a mock then attempting to set a magic method that isn&amp;rsquo;t in the spec will raise an &lt;a href=&quot;exceptions#AttributeError&quot;&gt;&lt;code&gt;AttributeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;spec&lt;/em&gt;キーワード引数を使用してモックを作成する場合、&lt;em&gt;仕様に&lt;/em&gt;ないマジックメソッドを設定しようとすると、&lt;a href=&quot;exceptions#AttributeError&quot;&gt; &lt;code&gt;AttributeError&lt;/code&gt; が発生し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="353ad31e4d774964063f5b58ea1776698ab8f303" translate="yes" xml:space="preserve">
          <source>If you use the &lt;em&gt;spec&lt;/em&gt; or &lt;em&gt;spec_set&lt;/em&gt; arguments then &lt;em&gt;only&lt;/em&gt; magic methods that exist in the spec will be created.</source>
          <target state="translated">&lt;em&gt;spec&lt;/em&gt;または&lt;em&gt;spec_set&lt;/em&gt;引数を使用すると、&lt;em&gt;specに&lt;/em&gt;存在するマジックメソッド&lt;em&gt;のみ&lt;/em&gt;が作成されます。</target>
        </trans-unit>
        <trans-unit id="3be1784a6b9e18d186acdce6908f38010e51c9ef" translate="yes" xml:space="preserve">
          <source>If you use the ADPCM coder to build network packets and you want your protocol to be stateless (i.e. to be able to tolerate packet loss) you should not only transmit the data but also the state. Note that you should send the &lt;em&gt;initial&lt;/em&gt; state (the one you passed to &lt;a href=&quot;#audioop.lin2adpcm&quot;&gt;&lt;code&gt;lin2adpcm()&lt;/code&gt;&lt;/a&gt;) along to the decoder, not the final state (as returned by the coder). If you want to use &lt;a href=&quot;struct#struct.Struct&quot;&gt;&lt;code&gt;struct.Struct&lt;/code&gt;&lt;/a&gt; to store the state in binary you can code the first element (the predicted value) in 16 bits and the second (the delta index) in 8.</source>
          <target state="translated">ADPCMコーダーを使用してネットワークパケットを構築し、プロトコルをステートレスにしたい場合（つまり、パケット損失を許容できるようにする場合）は、データだけでなく状態も送信する必要があります。&lt;em&gt;初期&lt;/em&gt;状態（&lt;a href=&quot;#audioop.lin2adpcm&quot;&gt; &lt;code&gt;lin2adpcm()&lt;/code&gt; に&lt;/a&gt;渡した状態）をデコーダーに送る必要があることに注意してください（最終的な状態（コーダーによって返される）ではありません）。&lt;a href=&quot;struct#struct.Struct&quot;&gt; &lt;code&gt;struct.Struct&lt;/code&gt; &lt;/a&gt;を使用して状態をバイナリで格納する場合は、最初の要素（予測値）を16ビットで、2番目の要素（デルタインデックス）を8でコーディングできます。</target>
        </trans-unit>
        <trans-unit id="9c83d7f1f379ed7a6cf04574d6c921d79a111100" translate="yes" xml:space="preserve">
          <source>If you use this technique you must ensure that the patching is &amp;ldquo;undone&amp;rdquo; by calling &lt;code&gt;stop&lt;/code&gt;. This can be fiddlier than you might think, because if an exception is raised in the &lt;code&gt;setUp&lt;/code&gt; then &lt;code&gt;tearDown&lt;/code&gt; is not called. &lt;a href=&quot;unittest#unittest.TestCase.addCleanup&quot;&gt;&lt;code&gt;unittest.TestCase.addCleanup()&lt;/code&gt;&lt;/a&gt; makes this easier:</source>
          <target state="translated">この手法を使用する場合は、 &lt;code&gt;stop&lt;/code&gt; を呼び出して、パッチを確実に「取り消す」必要があります。例外がで発生した場合ので、これは、あなたが思っているよりfiddlierことができる &lt;code&gt;setUp&lt;/code&gt; そして &lt;code&gt;tearDown&lt;/code&gt; 呼び出されません。&lt;a href=&quot;unittest#unittest.TestCase.addCleanup&quot;&gt; &lt;code&gt;unittest.TestCase.addCleanup()&lt;/code&gt; &lt;/a&gt;はこれを簡単にします：</target>
        </trans-unit>
        <trans-unit id="75bf0749f0dd727a13fcc6a835a82d9cd272d1fc" translate="yes" xml:space="preserve">
          <source>If you want &lt;a href=&quot;#unittest.mock.patch.multiple&quot;&gt;&lt;code&gt;patch.multiple()&lt;/code&gt;&lt;/a&gt; to create mocks for you, then you can use &lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt;&lt;code&gt;DEFAULT&lt;/code&gt;&lt;/a&gt; as the value. If you use &lt;a href=&quot;#unittest.mock.patch.multiple&quot;&gt;&lt;code&gt;patch.multiple()&lt;/code&gt;&lt;/a&gt; as a decorator then the created mocks are passed into the decorated function by keyword.</source>
          <target state="translated">あなたがしたい場合&lt;a href=&quot;#unittest.mock.patch.multiple&quot;&gt; &lt;code&gt;patch.multiple()&lt;/code&gt; &lt;/a&gt;あなたのためのモックを作成するには、あなたが使用することができます&lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt; &lt;code&gt;DEFAULT&lt;/code&gt; を&lt;/a&gt;値として。&lt;a href=&quot;#unittest.mock.patch.multiple&quot;&gt; &lt;code&gt;patch.multiple()&lt;/code&gt; &lt;/a&gt;をデコレータとして使用する場合、作成されたモックは、キーワードによって装飾された関数に渡されます。</target>
        </trans-unit>
        <trans-unit id="6a385ee3f431c0cf8aa5476eab766bc532450fe5" translate="yes" xml:space="preserve">
          <source>If you want a given &lt;em&gt;stdin&lt;/em&gt; to be used, make sure to set the instance&amp;rsquo;s &lt;a href=&quot;#cmd.Cmd.use_rawinput&quot;&gt;&lt;code&gt;use_rawinput&lt;/code&gt;&lt;/a&gt; attribute to &lt;code&gt;False&lt;/code&gt;, otherwise &lt;em&gt;stdin&lt;/em&gt; will be ignored.</source>
          <target state="translated">特定の&lt;em&gt;stdin&lt;/em&gt;を使用する場合は、インスタンスの&lt;a href=&quot;#cmd.Cmd.use_rawinput&quot;&gt; &lt;code&gt;use_rawinput&lt;/code&gt; &lt;/a&gt;属性を必ず &lt;code&gt;False&lt;/code&gt; に設定してください。そうしないと、&lt;em&gt;stdin&lt;/em&gt;は無視されます。</target>
        </trans-unit>
        <trans-unit id="d7bcf54413bb963aa019597f5acad81401f292e6" translate="yes" xml:space="preserve">
          <source>If you want cross-platform overwriting of the destination, use &lt;a href=&quot;#os.replace&quot;&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">クロスプラットフォームで宛先を上書きする場合は、&lt;a href=&quot;#os.replace&quot;&gt; &lt;code&gt;replace()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="7a129089344fee48b88396b82f4d19b77ca7fc4d" translate="yes" xml:space="preserve">
          <source>If you want more functionality, you&amp;rsquo;re going to have to read the manual, or guess what the following functions do:</source>
          <target state="translated">より多くの機能が必要な場合は、マニュアルを読むか、次の関数の機能を推測する必要があります。</target>
        </trans-unit>
        <trans-unit id="8ae975db4dc6412041430b1daafaa6c1c0e31b5d" translate="yes" xml:space="preserve">
          <source>If you want the &lt;code&gt;setUpClass&lt;/code&gt; and &lt;code&gt;tearDownClass&lt;/code&gt; on base classes called then you must call up to them yourself. The implementations in &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; are empty.</source>
          <target state="translated">あなたがしたい場合 &lt;code&gt;setUpClass&lt;/code&gt; と &lt;code&gt;tearDownClass&lt;/code&gt; と呼ばれる基本クラスのを、あなたは彼らに自分自身を呼び出す必要があります。&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;の実装は空です。</target>
        </trans-unit>
        <trans-unit id="8fc69a19f6a319eafed02a83645ae1ec1683cb6c" translate="yes" xml:space="preserve">
          <source>If you want the adler32 or crc32 hash functions, they are available in the &lt;a href=&quot;zlib#module-zlib&quot;&gt;&lt;code&gt;zlib&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">adler32またはcrc32ハッシュ関数が必要な場合は、&lt;a href=&quot;zlib#module-zlib&quot;&gt; &lt;code&gt;zlib&lt;/code&gt; &lt;/a&gt;モジュールで使用できます。</target>
        </trans-unit>
        <trans-unit id="4cc2b2701ce617852e01ad2fdbb4d98e0e062510" translate="yes" xml:space="preserve">
          <source>If you want the mock to still return the default return value (a new mock), or any set return value, then there are two ways of doing this. Either return &lt;code&gt;mock.return_value&lt;/code&gt; from inside &lt;code&gt;side_effect&lt;/code&gt;, or return &lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt;&lt;code&gt;DEFAULT&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">モックがデフォルトの戻り値（新しいモック）または任意の設定された戻り値を返すようにする場合は、2つの方法があります。どちらのリターン &lt;code&gt;mock.return_value&lt;/code&gt; 内部から &lt;code&gt;side_effect&lt;/code&gt; 、または戻り&lt;a href=&quot;#unittest.mock.DEFAULT&quot;&gt; &lt;code&gt;DEFAULT&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="c2e7b29010c2bd4bd3a7b2186800720ade7653a7" translate="yes" xml:space="preserve">
          <source>If you want to access enum members by &lt;em&gt;name&lt;/em&gt;, use item access:</source>
          <target state="translated">enumメンバーに&lt;em&gt;名前&lt;/em&gt;でアクセスする場合は、アイテムアクセスを使用します。</target>
        </trans-unit>
        <trans-unit id="2c2d72cb023b23999d092f07ff8849d8edf000d1" translate="yes" xml:space="preserve">
          <source>If you want to avoid the &lt;code&gt;ord(&quot;x&quot;)&lt;/code&gt; calls above, you can set the &lt;code&gt;argtypes&lt;/code&gt; attribute, and the second argument will be converted from a single character Python bytes object into a C char:</source>
          <target state="translated">上記の &lt;code&gt;ord(&quot;x&quot;)&lt;/code&gt; 呼び出しを避けたい場合は、 &lt;code&gt;argtypes&lt;/code&gt; 属性を設定できます。2番目の引数は、1文字のPythonバイトオブジェクトからC文字に変換されます。</target>
        </trans-unit>
        <trans-unit id="279c29c89aa9656f84b48678016178fbd67cb71c" translate="yes" xml:space="preserve">
          <source>If you want to change how current time is determined (for example, to force use of wall-clock time or elapsed process time), pass the timing function you want to the &lt;code&gt;Profile&lt;/code&gt; class constructor:</source>
          <target state="translated">現在の時刻の決定方法を変更する場合（たとえば、実時間または経過したプロセス時間の使用を強制する場合）、必要なタイミング関数を &lt;code&gt;Profile&lt;/code&gt; クラスコンストラクターに渡します。</target>
        </trans-unit>
        <trans-unit id="73a589407368c78ec530e2f941e80cc64760ae2f" translate="yes" xml:space="preserve">
          <source>If you want to clear any previously installed progress handler, call the method with &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; for &lt;em&gt;handler&lt;/em&gt;.</source>
          <target state="translated">以前にインストールした進行状況ハンドラーをクリアする場合は、&lt;em&gt;ハンドラーに&lt;/em&gt;&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;を指定してメソッドを呼び出します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b85687d6933b3a0fe36fbb7a49d525fedab74695" translate="yes" xml:space="preserve">
          <source>If you want to convert an integer number to an uppercase or lower hexadecimal string with prefix or not, you can use either of the following ways:</source>
          <target state="translated">整数の数値を接頭辞付きの大文字か小文字の16進数文字列に変換したい場合は、以下のいずれかの方法で変換できます。</target>
        </trans-unit>
        <trans-unit id="555dbff41f37109f588fa5abd198ada8e8af5c33" translate="yes" xml:space="preserve">
          <source>If you want to convert an integer number to octal string either with prefix &amp;ldquo;0o&amp;rdquo; or not, you can use either of the following ways.</source>
          <target state="translated">整数を接頭辞「0o」の付いた8進数の文字列に変換するかどうかは、次のいずれかの方法を使用できます。</target>
        </trans-unit>
        <trans-unit id="8a7e395a436c737fb4f983babcb85c37f7ffba2a" translate="yes" xml:space="preserve">
          <source>If you want to create a memory-mapping for a writable, buffered file, you should &lt;a href=&quot;io#io.IOBase.flush&quot;&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/a&gt; the file first. This is necessary to ensure that local modifications to the buffers are actually available to the mapping.</source>
          <target state="translated">書き込み可能なバッファ付きファイルのメモリマッピングを作成する場合は、最初にファイルを&lt;a href=&quot;io#io.IOBase.flush&quot;&gt; &lt;code&gt;flush()&lt;/code&gt; &lt;/a&gt;する必要があります。これは、バッファへのローカル変更が実際にマッピングで使用できるようにするために必要です。</target>
        </trans-unit>
        <trans-unit id="8c96548f19f99190ded12d511ae463febe2b5258" translate="yes" xml:space="preserve">
          <source>If you want to create a new ZIP archive, specify its name after the &lt;a href=&quot;#cmdoption-zipfile-c&quot;&gt;&lt;code&gt;-c&lt;/code&gt;&lt;/a&gt; option and then list the filename(s) that should be included:</source>
          <target state="translated">新しいZIPアーカイブを作成する場合は、&lt;a href=&quot;#cmdoption-zipfile-c&quot;&gt; &lt;code&gt;-c&lt;/code&gt; &lt;/a&gt;オプションの後にその名前を指定して、含める必要のあるファイル名をリストします。</target>
        </trans-unit>
        <trans-unit id="b106ae412fab326b87e70a6ef024d49bf607babb" translate="yes" xml:space="preserve">
          <source>If you want to create a new tar archive, specify its name after the &lt;a href=&quot;#cmdoption-tarfile-c&quot;&gt;&lt;code&gt;-c&lt;/code&gt;&lt;/a&gt; option and then list the filename(s) that should be included:</source>
          <target state="translated">新しいtarアーカイブを作成する場合は、&lt;a href=&quot;#cmdoption-tarfile-c&quot;&gt; &lt;code&gt;-c&lt;/code&gt; &lt;/a&gt;オプションの後にその名前を指定し、次に含める必要のあるファイル名をリストします。</target>
        </trans-unit>
        <trans-unit id="7c1a46617f45e12138983a57722199d3eb708a28" translate="yes" xml:space="preserve">
          <source>If you want to extract a ZIP archive into the specified directory, use the &lt;a href=&quot;#cmdoption-zipfile-e&quot;&gt;&lt;code&gt;-e&lt;/code&gt;&lt;/a&gt; option:</source>
          <target state="translated">指定したディレクトリにZIPアーカイブを抽出する場合は、&lt;a href=&quot;#cmdoption-zipfile-e&quot;&gt; &lt;code&gt;-e&lt;/code&gt; &lt;/a&gt;オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="700b384e128d1fbde8cf4400e885f3cf8732d78d" translate="yes" xml:space="preserve">
          <source>If you want to extract a tar archive into the current directory, use the &lt;a href=&quot;#cmdoption-tarfile-e&quot;&gt;&lt;code&gt;-e&lt;/code&gt;&lt;/a&gt; option:</source>
          <target state="translated">tarアーカイブを現在のディレクトリに抽出する場合は、&lt;a href=&quot;#cmdoption-tarfile-e&quot;&gt; &lt;code&gt;-e&lt;/code&gt; &lt;/a&gt;オプションを使用します。</target>
        </trans-unit>
        <trans-unit id="58588189cff4519d00d0897d652e2f735d514b04" translate="yes" xml:space="preserve">
          <source>If you want to include non-ASCII characters in your email headers, say in the &lt;em&gt;Subject&lt;/em&gt; or &lt;em&gt;To&lt;/em&gt; fields, you should use the &lt;a href=&quot;#email.header.Header&quot;&gt;&lt;code&gt;Header&lt;/code&gt;&lt;/a&gt; class and assign the field in the &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; object to an instance of &lt;a href=&quot;#email.header.Header&quot;&gt;&lt;code&gt;Header&lt;/code&gt;&lt;/a&gt; instead of using a string for the header value. Import the &lt;a href=&quot;#email.header.Header&quot;&gt;&lt;code&gt;Header&lt;/code&gt;&lt;/a&gt; class from the &lt;a href=&quot;#module-email.header&quot;&gt;&lt;code&gt;email.header&lt;/code&gt;&lt;/a&gt; module. For example:</source>
          <target state="translated">電子メールのヘッダーに、ASCII以外の文字を含める場合、たとえば、[ &lt;em&gt;件名]&lt;/em&gt;または[ &lt;em&gt;宛先]&lt;/em&gt;フィールドに含める場合は、ヘッダー値に文字列を使用するのではなく、&lt;a href=&quot;#email.header.Header&quot;&gt; &lt;code&gt;Header&lt;/code&gt; &lt;/a&gt;クラスを使用して、&lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt;オブジェクトのフィールドを&lt;a href=&quot;#email.header.Header&quot;&gt; &lt;code&gt;Header&lt;/code&gt; &lt;/a&gt;インスタンスに割り当てます。 。&lt;a href=&quot;#module-email.header&quot;&gt; &lt;code&gt;email.header&lt;/code&gt; &lt;/a&gt;モジュールから&lt;a href=&quot;#email.header.Header&quot;&gt; &lt;code&gt;Header&lt;/code&gt; &lt;/a&gt;クラスをインポートします。例えば：</target>
        </trans-unit>
        <trans-unit id="24ec3c78c55c3f145a14ab40bbeb1ab84cc85d19" translate="yes" xml:space="preserve">
          <source>If you want to keep the frame around (for example to print a traceback later), you can also break reference cycles by using the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#frame.clear&quot;&gt;&lt;code&gt;frame.clear()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">フレームを保持したい場合（たとえば、後でトレースバックを印刷する場合）、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#frame.clear&quot;&gt; &lt;code&gt;frame.clear()&lt;/code&gt; &lt;/a&gt;メソッドを使用して参照サイクルを解除することもできます。</target>
        </trans-unit>
        <trans-unit id="f475512fa10ce12ef3e23d2a5ca9d598d54ca1d9" translate="yes" xml:space="preserve">
          <source>If you want to keep the frame around (for example to print a traceback later), you can also break reference cycles by using the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#frame.clear&quot;&gt;&lt;code&gt;frame.clear()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">フレームを維持したい場合（たとえば、後でトレースバックを印刷するため）、&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#frame.clear&quot;&gt; &lt;code&gt;frame.clear()&lt;/code&gt; &lt;/a&gt;メソッドを使用して参照サイクルを中断することもできます。</target>
        </trans-unit>
        <trans-unit id="f6549b472b422a2e03ce43ff8ed3f5196f818e1c" translate="yes" xml:space="preserve">
          <source>If you want to know how to change the first sequence into the second, use &lt;code&gt;get_opcodes()&lt;/code&gt;:</source>
          <target state="translated">最初のシーケンスを2番目のシーケンスに変更する方法を知りたい場合は、 &lt;code&gt;get_opcodes()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="cd6b6c79b6bb6752c1926957d748425869a9d94e" translate="yes" xml:space="preserve">
          <source>If you want to locate a match anywhere in &lt;em&gt;string&lt;/em&gt;, use &lt;a href=&quot;#re.Pattern.search&quot;&gt;&lt;code&gt;search()&lt;/code&gt;&lt;/a&gt; instead (see also &lt;a href=&quot;#search-vs-match&quot;&gt;search() vs. match()&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;string&lt;/em&gt;内のどこかで一致を検索する場合は、代わりに&lt;a href=&quot;#re.Pattern.search&quot;&gt; &lt;code&gt;search()&lt;/code&gt; を&lt;/a&gt;使用します（&lt;a href=&quot;#search-vs-match&quot;&gt; search（）とmatch（）&lt;/a&gt;も参照）。</target>
        </trans-unit>
        <trans-unit id="90b7dc5b7c7d64eb5dcf8c64af54da317f615167" translate="yes" xml:space="preserve">
          <source>If you want to locate a match anywhere in &lt;em&gt;string&lt;/em&gt;, use &lt;a href=&quot;#re.search&quot;&gt;&lt;code&gt;search()&lt;/code&gt;&lt;/a&gt; instead (see also &lt;a href=&quot;#search-vs-match&quot;&gt;search() vs. match()&lt;/a&gt;).</source>
          <target state="translated">&lt;em&gt;string&lt;/em&gt;内のどこかで一致を検索する場合は、代わりに&lt;a href=&quot;#re.search&quot;&gt; &lt;code&gt;search()&lt;/code&gt; を&lt;/a&gt;使用します（&lt;a href=&quot;#search-vs-match&quot;&gt; search（）とmatch（）&lt;/a&gt;も参照）。</target>
        </trans-unit>
        <trans-unit id="7691cb3a9d42f9132cc69c1d67bf2035399d4696" translate="yes" xml:space="preserve">
          <source>If you want to make the hex string easier to read, you can specify a single character separator &lt;em&gt;sep&lt;/em&gt; parameter to include in the output. By default between each byte. A second optional &lt;em&gt;bytes_per_sep&lt;/em&gt; parameter controls the spacing. Positive values calculate the separator position from the right, negative values from the left.</source>
          <target state="translated">16進文字列を読みやすくする場合は、出力に含める1文字のセパレータ&lt;em&gt;sep&lt;/em&gt;パラメータを指定できます。デフォルトでは、各バイト間。2番目のオプションの&lt;em&gt;bytes_per_sep&lt;/em&gt;パラメータは、間隔を制御します。正の値はセパレーターの位置を右から計算し、負の値は左から計算します。</target>
        </trans-unit>
        <trans-unit id="7f82f6a50d02c1f8accc0d99988bbd66002ab317" translate="yes" xml:space="preserve">
          <source>If you want to manipulate Windows paths on a Unix machine (or vice versa). You cannot instantiate a &lt;a href=&quot;#pathlib.WindowsPath&quot;&gt;&lt;code&gt;WindowsPath&lt;/code&gt;&lt;/a&gt; when running on Unix, but you can instantiate &lt;a href=&quot;#pathlib.PureWindowsPath&quot;&gt;&lt;code&gt;PureWindowsPath&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">UnixマシンでWindowsパスを操作する場合（またはその逆）。Unixで実行している場合、&lt;a href=&quot;#pathlib.WindowsPath&quot;&gt; &lt;code&gt;WindowsPath&lt;/code&gt; を&lt;/a&gt;インスタンス化することはできませんが、&lt;a href=&quot;#pathlib.PureWindowsPath&quot;&gt; &lt;code&gt;PureWindowsPath&lt;/code&gt; &lt;/a&gt;をインスタンス化することはできます。</target>
        </trans-unit>
        <trans-unit id="9b7de6afd3109312dd2620f94a9fb410828a34c7" translate="yes" xml:space="preserve">
          <source>If you want to parse Python code into its AST representation, see &lt;a href=&quot;ast#ast.parse&quot;&gt;&lt;code&gt;ast.parse()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">PythonコードをAST表現に解析する場合は、&lt;a href=&quot;ast#ast.parse&quot;&gt; &lt;code&gt;ast.parse()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8826f07288ab3dad612019804c049ce5ddd0e19a" translate="yes" xml:space="preserve">
          <source>If you want to perform multiple patches then you can simply stack up the decorators.</source>
          <target state="translated">複数のパッチを実行したい場合は、単純にデコレータを積み重ねることができます。</target>
        </trans-unit>
        <trans-unit id="4f79361e9cfffc79417f13f6a383a9717a273aa3" translate="yes" xml:space="preserve">
          <source>If you want to reflect the turtle its state, you have to use &lt;code&gt;resizemode =
auto&lt;/code&gt;.</source>
          <target state="translated">カメの状態を反映したい場合は、 &lt;code&gt;resizemode = auto&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="f28c7d51ec7d8d10c742281de629eb006ff45c11" translate="yes" xml:space="preserve">
          <source>If you want to send configurations to the listener which don&amp;rsquo;t disable existing loggers, you will need to use a JSON format for the configuration, which will use &lt;a href=&quot;#logging.config.dictConfig&quot;&gt;&lt;code&gt;dictConfig()&lt;/code&gt;&lt;/a&gt; for configuration. This method allows you to specify &lt;code&gt;disable_existing_loggers&lt;/code&gt; as &lt;code&gt;False&lt;/code&gt; in the configuration you send.</source>
          <target state="translated">既存のロガーを無効にしない構成をリスナーに送信する場合は、構成に&lt;a href=&quot;#logging.config.dictConfig&quot;&gt; &lt;code&gt;dictConfig()&lt;/code&gt; &lt;/a&gt;を使用する構成にJSON形式を使用する必要があります。このメソッドを使用すると、送信する構成で &lt;code&gt;disable_existing_loggers&lt;/code&gt; を &lt;code&gt;False&lt;/code&gt; として指定できます。</target>
        </trans-unit>
        <trans-unit id="3ebc31a3f94e9849595d45e456c192050750c4e3" translate="yes" xml:space="preserve">
          <source>If you want to specify a subject line which is record-dependent, override this method.</source>
          <target state="translated">レコード依存の件名を指定したい場合は、このメソッドをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="745b19cebcf113a8d5f26626ff17bb861b6e043f" translate="yes" xml:space="preserve">
          <source>If you want to use a different configuration which better reflects the features of this module or which better fits to your needs, e.g. for use in a classroom, you can prepare a configuration file &lt;code&gt;turtle.cfg&lt;/code&gt; which will be read at import time and modify the configuration according to its settings.</source>
          <target state="translated">このモジュールの機能をよりよく反映する、またはニーズにぴったり合う別の構成を使用する場合は、たとえば教室で使用するために、インポート時に読み取られる構成ファイル &lt;code&gt;turtle.cfg&lt;/code&gt; を準備し、その設定に応じた構成。</target>
        </trans-unit>
        <trans-unit id="6b8dc840c342df51fe5ce8af14007a99dd5c3a47" translate="yes" xml:space="preserve">
          <source>If you want to use a different prefix for your test, you can inform the patchers of the different prefix by setting &lt;code&gt;patch.TEST_PREFIX&lt;/code&gt;. For more details about how to change the value of see &lt;a href=&quot;#test-prefix&quot;&gt;TEST_PREFIX&lt;/a&gt;.</source>
          <target state="translated">テストに別の接頭辞を使用したい場合は、 &lt;code&gt;patch.TEST_PREFIX&lt;/code&gt; を設定して、異なる接頭辞をパッチャーに通知できます。値を変更する方法の詳細については、&lt;a href=&quot;#test-prefix&quot;&gt;TEST_PREFIX&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4fad4732a998a9e23ea176b65c3a718c625cdcc4" translate="yes" xml:space="preserve">
          <source>If you want to use no fillcolor (i.e. make the turtle transparent), you have to write &lt;code&gt;fillcolor = &quot;&quot;&lt;/code&gt; (but all nonempty strings must not have quotes in the cfg-file).</source>
          <target state="translated">fillcolorを使用しない（つまり、亀を透明にする）場合は、 &lt;code&gt;fillcolor = &quot;&quot;&lt;/code&gt; と記述する必要があります（ただし、空でないすべての文字列は、cfg-file内に引用符があってはなりません）。</target>
        </trans-unit>
        <trans-unit id="0f8f3a435f429e1cd523ef833f8de0aef1f31607" translate="yes" xml:space="preserve">
          <source>If you want to walk an arbitrary filesystem path upwards, it is recommended to first call &lt;a href=&quot;#pathlib.Path.resolve&quot;&gt;&lt;code&gt;Path.resolve()&lt;/code&gt;&lt;/a&gt; so as to resolve symlinks and eliminate &lt;code&gt;&amp;ldquo;..&amp;rdquo;&lt;/code&gt; components.</source>
          <target state="translated">任意のファイルシステムパスを上に移動する場合は、最初に&lt;a href=&quot;#pathlib.Path.resolve&quot;&gt; &lt;code&gt;Path.resolve()&lt;/code&gt; を&lt;/a&gt;呼び出してシンボリックリンクを解決し、 &lt;code&gt;&amp;ldquo;..&amp;rdquo;&lt;/code&gt; コンポーネントを削除することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="70ac8ffb536e6d85123fe960473989eb7a059ddc" translate="yes" xml:space="preserve">
          <source>If you were looking to see what functions were looping a lot, and taking a lot of time, you would do:</source>
          <target state="translated">どんな機能がたくさんループしていて、時間がかかっているのかを見ていたら、やってしまいますよね。</target>
        </trans-unit>
        <trans-unit id="acf8d273366df0fb10eec018a0ee0ccd5949445d" translate="yes" xml:space="preserve">
          <source>If you wondered what functions called the above functions, you could now (&lt;code&gt;p&lt;/code&gt; is still sorted according to the last criteria) do:</source>
          <target state="translated">どの関数が上記の関数を呼び出したのか疑問に思った場合は、次のことができます（ &lt;code&gt;p&lt;/code&gt; は最後の基準に従ってまだソートされています）。</target>
        </trans-unit>
        <trans-unit id="a0bf217f357783caa209594b9bcd75c3ce805fda" translate="yes" xml:space="preserve">
          <source>If you write a file-like object and implement your own caching, you can make it fork-safe by storing the pid whenever you append to the cache, and discarding the cache when the pid changes. For example:</source>
          <target state="translated">ファイルライクなオブジェクトを書いて独自のキャッシュを実装した場合、キャッシュに追記するたびにpidを格納し、pidが変わったらキャッシュを破棄することでフォークセーフにすることができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="fe0eb8d599c47b7f3926f4416144dc29d275eb9e" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re not using a raw string to express the pattern, remember that Python also uses the backslash as an escape sequence in string literals; if the escape sequence isn&amp;rsquo;t recognized by Python&amp;rsquo;s parser, the backslash and subsequent character are included in the resulting string. However, if Python would recognize the resulting sequence, the backslash should be repeated twice. This is complicated and hard to understand, so it&amp;rsquo;s highly recommended that you use raw strings for all but the simplest expressions.</source>
          <target state="translated">生の文字列を使用してパターンを表現していない場合、Pythonでは文字列リテラルのエスケープシーケンスとしてバックスラッシュも使用することに注意してください。エスケープシーケンスがPythonのパーサーで認識されない場合は、結果の文字列にバックスラッシュとそれに続く文字が含まれます。ただし、Pythonが結果のシーケンスを認識する場合は、バックスラッシュを2回繰り返す必要があります。これは複雑で理解しにくいので、最も単純な式以外のすべてに生の文字列を使用することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="63ba1bb5f63d28b0a2652e45a8f7caac7c895c2a" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re only interested in where the sequences match, &lt;code&gt;get_matching_blocks()&lt;/code&gt; is handy:</source>
          <target state="translated">シーケンスが一致する場所のみに関心がある場合は、 &lt;code&gt;get_matching_blocks()&lt;/code&gt; が便利です。</target>
        </trans-unit>
        <trans-unit id="f936f48bc81e3933728945057465fe8b1eaf71cf" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re starting with a buffered Python &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;&lt;em&gt;f&lt;/em&gt;, first do &lt;code&gt;f.flush()&lt;/code&gt;, and then do &lt;code&gt;os.fsync(f.fileno())&lt;/code&gt;, to ensure that all internal buffers associated with &lt;em&gt;f&lt;/em&gt; are written to disk.</source>
          <target state="translated">バッファリングされたPython &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;ファイルオブジェクト&lt;/a&gt;&lt;em&gt;f&lt;/em&gt;から始める場合は、最初に &lt;code&gt;f.flush()&lt;/code&gt; を実行し、次に &lt;code&gt;os.fsync(f.fileno())&lt;/code&gt; を実行して、&lt;em&gt;fに&lt;/em&gt;関連付けられたすべての内部バッファがディスクに書き込まれるようにします。</target>
        </trans-unit>
        <trans-unit id="d778b78bee2934d35641a5cafddaed1a351d977e" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;re starting with a buffered Python &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;&lt;em&gt;f&lt;/em&gt;, first do &lt;code&gt;f.flush()&lt;/code&gt;, and then do &lt;code&gt;os.fsync(f.fileno())&lt;/code&gt;, to ensure that all internal buffers associated with &lt;em&gt;f&lt;/em&gt; are written to disk.</source>
          <target state="translated">バッファリングされたPython&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;ファイルオブジェクト&lt;/a&gt;&lt;em&gt;f&lt;/em&gt;から開始する場合は、最初に &lt;code&gt;f.flush()&lt;/code&gt; を実行し、次に &lt;code&gt;os.fsync(f.fileno())&lt;/code&gt; を実行して、&lt;em&gt;fに&lt;/em&gt;関連付けられたすべての内部バッファがディスクに書き込まれるようにします。</target>
        </trans-unit>
        <trans-unit id="c32e5e3d701ca2fc3b2aabba2d5788af273dfeb3" translate="yes" xml:space="preserve">
          <source>If you&amp;rsquo;ve never used this module before or just aren&amp;rsquo;t sure which class is right for your task, &lt;a href=&quot;#pathlib.Path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; is most likely what you need. It instantiates a &lt;a href=&quot;#concrete-paths&quot;&gt;concrete path&lt;/a&gt; for the platform the code is running on.</source>
          <target state="translated">これまでにこのモジュールを使用したことがない場合や、どのクラスがタスクに適しているのかわからない場合は、&lt;a href=&quot;#pathlib.Path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; &lt;/a&gt;がおそらく必要です。コードが実行されているプラ​​ットフォームの&lt;a href=&quot;#concrete-paths&quot;&gt;具体的なパス&lt;/a&gt;をインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="f33f0fe74a1d8aa8c68e244e2bc5362d95964bbf" translate="yes" xml:space="preserve">
          <source>If your application depends on a package that includes a C extension, that package cannot be run from a zip file (this is an OS limitation, as executable code must be present in the filesystem for the OS loader to load it). In this case, you can exclude that dependency from the zipfile, and either require your users to have it installed, or ship it alongside your zipfile and add code to your &lt;code&gt;__main__.py&lt;/code&gt; to include the directory containing the unzipped module in &lt;code&gt;sys.path&lt;/code&gt;. In this case, you will need to make sure to ship appropriate binaries for your target architecture(s) (and potentially pick the correct version to add to &lt;code&gt;sys.path&lt;/code&gt; at runtime, based on the user&amp;rsquo;s machine).</source>
          <target state="translated">アプリケーションがC拡張を含むパッケージに依存している場合、そのパッケージはzipファイルから実行できません（OSローダーがファイルをロードするには実行可能コードがファイルシステムに存在する必要があるため、これはOSの制限です）。この場合、その依存関係をzip &lt;code&gt;sys.path&lt;/code&gt; から除外し、ユーザーにインストールを要求するか、zip ファイルと一緒に配布して &lt;code&gt;__main__.py&lt;/code&gt; にコードを追加し、解凍したモジュールを含むディレクトリをsys.pathに含めることができます。この場合、ターゲットアーキテクチャに適切なバイナリを出荷する必要があります（ユーザーのマシンに基づいて、実行時に &lt;code&gt;sys.path&lt;/code&gt; に追加する正しいバージョンを選択する可能性があります）。</target>
        </trans-unit>
        <trans-unit id="2a11020c14c0b00c5484221191c5a40664dd44bf" translate="yes" xml:space="preserve">
          <source>If your application doesn&amp;rsquo;t care whether the parameter was encoded as in &lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;RFC 2231&lt;/strong&gt;&lt;/a&gt;, you can collapse the parameter value by calling &lt;a href=&quot;email.utils#email.utils.collapse_rfc2231_value&quot;&gt;&lt;code&gt;email.utils.collapse_rfc2231_value()&lt;/code&gt;&lt;/a&gt;, passing in the return value from &lt;a href=&quot;#email.message.Message.get_param&quot;&gt;&lt;code&gt;get_param()&lt;/code&gt;&lt;/a&gt;. This will return a suitably decoded Unicode string when the value is a tuple, or the original string unquoted if it isn&amp;rsquo;t. For example:</source>
          <target state="translated">アプリケーションは、パラメータがのようにエンコードされたかどうかを気にしない場合は&lt;a href=&quot;https://tools.ietf.org/html/rfc2231.html&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;、RFC 2231&lt;/strong&gt;&lt;/a&gt;、あなたは呼び出すことで、パラメータ値を折りたたむことができます&lt;a href=&quot;email.utils#email.utils.collapse_rfc2231_value&quot;&gt; &lt;code&gt;email.utils.collapse_rfc2231_value()&lt;/code&gt; &lt;/a&gt;からの戻り値を渡して、&lt;a href=&quot;#email.message.Message.get_param&quot;&gt; &lt;code&gt;get_param()&lt;/code&gt; &lt;/a&gt;。これは、値がタプルの場合は適切にデコードされたUnicode文字列を返し、そうでない場合は引用符で囲まれていない元の文字列を返します。例えば：</target>
        </trans-unit>
        <trans-unit id="7027931b44d28707bd4c664ebc8956c5af833c14" translate="yes" xml:space="preserve">
          <source>If your application needs specific settings, you should create a &lt;a href=&quot;#ssl.SSLContext&quot;&gt;&lt;code&gt;SSLContext&lt;/code&gt;&lt;/a&gt; and apply the settings yourself.</source>
          <target state="translated">アプリケーションで特定の設定が必要な場合は、&lt;a href=&quot;#ssl.SSLContext&quot;&gt; &lt;code&gt;SSLContext&lt;/code&gt; &lt;/a&gt;を作成して、自分で設定を適用する必要があります。</target>
        </trans-unit>
        <trans-unit id="5edf794d03c4b2ffd7486fd7e128bf5e002387d1" translate="yes" xml:space="preserve">
          <source>If your generator will only yield values, set the &lt;code&gt;SendType&lt;/code&gt; and &lt;code&gt;ReturnType&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">ジェネレーターが値のみを生成する場合は、 &lt;code&gt;SendType&lt;/code&gt; および &lt;code&gt;ReturnType&lt;/code&gt; を &lt;code&gt;None&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="3a6fc9f504fb9ac47a5e232ec8b3e5d967c1d094" translate="yes" xml:space="preserve">
          <source>If your generator will only yield values, set the &lt;code&gt;SendType&lt;/code&gt; to &lt;code&gt;None&lt;/code&gt;:</source>
          <target state="translated">ジェネレーターが値のみを生成する場合は、 &lt;code&gt;SendType&lt;/code&gt; を &lt;code&gt;None&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="ae8a1702501d5b127615e973ca97f9e761c7eb59" translate="yes" xml:space="preserve">
          <source>If your operating system supports the &lt;code&gt;select()&lt;/code&gt; system call in its I/O library (and nearly all do), then you can use it to juggle multiple communication channels at once; doing other work while your I/O is taking place in the &amp;ldquo;background.&amp;rdquo; Although this strategy can seem strange and complex, especially at first, it is in many ways easier to understand and control than multi-threaded programming. The &lt;a href=&quot;#module-asyncore&quot;&gt;&lt;code&gt;asyncore&lt;/code&gt;&lt;/a&gt; module solves many of the difficult problems for you, making the task of building sophisticated high-performance network servers and clients a snap. For &amp;ldquo;conversational&amp;rdquo; applications and protocols the companion &lt;a href=&quot;asynchat#module-asynchat&quot;&gt;&lt;code&gt;asynchat&lt;/code&gt;&lt;/a&gt; module is invaluable.</source>
          <target state="translated">オペレーティングシステムがI / Oライブラリで &lt;code&gt;select()&lt;/code&gt; システムコールをサポートしている場合（ほとんどすべてがサポートしています）、それを使用して複数の通信チャネルを一度に操作できます。 I / Oが「バックグラウンド」で行われている間に他の作業を行う。この戦略は奇妙で複雑に見えるかもしれませんが、特に最初は、マルチスレッドプログラミングよりも多くの点で理解と制御が簡単です。&lt;a href=&quot;#module-asyncore&quot;&gt; &lt;code&gt;asyncore&lt;/code&gt; の&lt;/a&gt;モジュールは、洗練された高性能ネットワーク・サーバとクライアントにスナップを構築する作業を行う、あなたのための困難な問題の多くを解決します。 「会話型」のアプリケーションおよびプロトコルの場合、&lt;a href=&quot;asynchat#module-asynchat&quot;&gt; &lt;code&gt;asynchat&lt;/code&gt; &lt;/a&gt;モジュールは非常に貴重です。</target>
        </trans-unit>
        <trans-unit id="955a544f9e1d26fd1d26d80d1022f0327fd7582e" translate="yes" xml:space="preserve">
          <source>If your program needs to support many languages at the same time, you may want to create multiple translation instances and then switch between them explicitly, like so:</source>
          <target state="translated">プログラムが複数の言語を同時にサポートする必要がある場合は、複数の翻訳インスタンスを作成して、その間を明示的に切り替えたい場合があります。</target>
        </trans-unit>
        <trans-unit id="93490801dea0da95308cb5a5318fbdcbabcfcf7b" translate="yes" xml:space="preserve">
          <source>If your script does not have any syntax errors, try adding &lt;code&gt;import cgitb;
cgitb.enable()&lt;/code&gt; to the top of the script.</source>
          <target state="translated">スクリプトに構文エラーがない場合は、 &lt;code&gt;import cgitb; cgitb.enable()&lt;/code&gt; 追加してみてください。スクリプトの先頭にcgitb.enable（）を追加します。</target>
        </trans-unit>
        <trans-unit id="f31cb37df73b3125c3f57c9d809d3e1ed793e729" translate="yes" xml:space="preserve">
          <source>If your server supports the command, &lt;a href=&quot;#ftplib.FTP.mlsd&quot;&gt;&lt;code&gt;mlsd()&lt;/code&gt;&lt;/a&gt; offers a better API.</source>
          <target state="translated">サーバーがコマンドをサポートしている場合、&lt;a href=&quot;#ftplib.FTP.mlsd&quot;&gt; &lt;code&gt;mlsd()&lt;/code&gt; &lt;/a&gt;はより優れたAPIを提供します。</target>
        </trans-unit>
        <trans-unit id="cbbc5ab274a4717efc6cc381b10937fbe7d77265" translate="yes" xml:space="preserve">
          <source>If zero or more characters at the &lt;em&gt;beginning&lt;/em&gt; of &lt;em&gt;string&lt;/em&gt; match this regular expression, return a corresponding &lt;a href=&quot;#match-objects&quot;&gt;match object&lt;/a&gt;. Return &lt;code&gt;None&lt;/code&gt; if the string does not match the pattern; note that this is different from a zero-length match.</source>
          <target state="translated">&lt;em&gt;文字列&lt;/em&gt;の&lt;em&gt;先頭&lt;/em&gt;の0個以上の文字がこの正規表現に&lt;a href=&quot;#match-objects&quot;&gt;一致する場合&lt;/a&gt;、対応する一致オブジェクトを返します。文字列がパターンに一致しない場合は &lt;code&gt;None&lt;/code&gt; を返します。これは長さゼロの一致とは異なることに注意してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7b4350db35f3b9bbabeaa05f2baf19f9fc617cb2" translate="yes" xml:space="preserve">
          <source>If zero or more characters at the beginning of &lt;em&gt;string&lt;/em&gt; match the regular expression &lt;em&gt;pattern&lt;/em&gt;, return a corresponding &lt;a href=&quot;#match-objects&quot;&gt;match object&lt;/a&gt;. Return &lt;code&gt;None&lt;/code&gt; if the string does not match the pattern; note that this is different from a zero-length match.</source>
          <target state="translated">&lt;em&gt;文字列&lt;/em&gt;の先頭のゼロ個以上の文字が正規表現&lt;em&gt;パターン&lt;/em&gt;に&lt;a href=&quot;#match-objects&quot;&gt;一致する場合&lt;/a&gt;、対応する一致オブジェクトを返します。文字列がパターンに一致しない場合は &lt;code&gt;None&lt;/code&gt; を返します。これは長さゼロの一致とは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="092f14f1f8cb7d25b3e6d70dcd0a46d04a6819c6" translate="yes" xml:space="preserve">
          <source>If, that is, we ignore the effects of Relativity</source>
          <target state="translated">つまり、相対性理論の効果を無視した場合</target>
        </trans-unit>
        <trans-unit id="2fa5b809a29b75e222e19a786786494e855b9b8b" translate="yes" xml:space="preserve">
          <source>If, when coding a module for general use, you need a locale independent version of an operation that is affected by the locale (such as certain formats used with &lt;a href=&quot;time#time.strftime&quot;&gt;&lt;code&gt;time.strftime()&lt;/code&gt;&lt;/a&gt;), you will have to find a way to do it without using the standard library routine. Even better is convincing yourself that using locale settings is okay. Only as a last resort should you document that your module is not compatible with non-&lt;code&gt;C&lt;/code&gt; locale settings.</source>
          <target state="translated">一般的な使用のためにモジュールをコーディングするときに、ロケールに影響される操作のロケールに依存しないバージョンが必要な場合（&lt;a href=&quot;time#time.strftime&quot;&gt; &lt;code&gt;time.strftime()&lt;/code&gt; で&lt;/a&gt;使用される特定の形式など）、それなしでそれを行う方法を見つける必要があります標準ライブラリルーチンを使用します。さらに良いのは、ロケール設定を使用しても大丈夫だと自分に納得させることです。最後の手段としてのみ、モジュールが &lt;code&gt;C&lt;/code&gt; 以外のロケール設定と互換性がないことを文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="9964433f6a0266bdf9fa6725a19e41fef8b37330" translate="yes" xml:space="preserve">
          <source>If/how &lt;em&gt;atTime&lt;/em&gt; is used</source>
          <target state="translated">&lt;em&gt;atTime&lt;/em&gt;が使用される場合と方法</target>
        </trans-unit>
        <trans-unit id="1c210c82683143a51cb6e3ad028c9f8883a010ad" translate="yes" xml:space="preserve">
          <source>Ignore all modules and packages in the named directory and subdirectories. The argument can be a list of directories separated by &lt;a href=&quot;os#os.pathsep&quot;&gt;&lt;code&gt;os.pathsep&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたディレクトリとサブディレクトリにあるすべてのモジュールとパッケージを無視します。引数は、&lt;a href=&quot;os#os.pathsep&quot;&gt; &lt;code&gt;os.pathsep&lt;/code&gt; で&lt;/a&gt;区切られたディレクトリーのリストにすることができます。</target>
        </trans-unit>
        <trans-unit id="1fce84b920d19c50aa58d91da2a36c60b8c2de65" translate="yes" xml:space="preserve">
          <source>Ignore cookies in Set-Cookie: headers that have names starting with &lt;code&gt;'$'&lt;/code&gt;.</source>
          <target state="translated">名前が &lt;code&gt;'$'&lt;/code&gt; で始まるSet-Cookie：ヘッダーのCookieを無視します。</target>
        </trans-unit>
        <trans-unit id="c2855bf1eb59ace3c404c75993cf42a4581a04c3" translate="yes" xml:space="preserve">
          <source>Ignore each of the given module names and its submodules (if it is a package). The argument can be a list of names separated by a comma.</source>
          <target state="translated">与えられたモジュール名とそのサブモジュール(パッケージの場合)のそれぞれを無視します。引数にはカンマで区切られた名前のリストを指定できます。</target>
        </trans-unit>
        <trans-unit id="d22e72dfca7f1eccbdaea639b681b1107c6155b3" translate="yes" xml:space="preserve">
          <source>Ignore symlinks pointing outside the given directory.</source>
          <target state="translated">指定されたディレクトリの外を指すシンボリックリンクを無視します。</target>
        </trans-unit>
        <trans-unit id="930fbf8a76be290144b9247e218920a109183ddb" translate="yes" xml:space="preserve">
          <source>Ignore the malformed data and continue without further notice. Implemented in &lt;a href=&quot;#codecs.ignore_errors&quot;&gt;&lt;code&gt;ignore_errors()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">不正な形式のデータを無視して、予告なく続行します。&lt;a href=&quot;#codecs.ignore_errors&quot;&gt; &lt;code&gt;ignore_errors()&lt;/code&gt; に&lt;/a&gt;実装されています。</target>
        </trans-unit>
        <trans-unit id="78fee1435d74666b84850cd5e82c18229351da5d" translate="yes" xml:space="preserve">
          <source>Ignored</source>
          <target state="translated">Ignored</target>
        </trans-unit>
        <trans-unit id="b30440d1e9dd87dae90b9f8d3aaae5ca500551e0" translate="yes" xml:space="preserve">
          <source>Ignored by the default warning filters, except in the &lt;code&gt;__main__&lt;/code&gt; module (&lt;a href=&quot;https://www.python.org/dev/peps/pep-0565&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;PEP 565&lt;/strong&gt;&lt;/a&gt;). Enabling the &lt;a href=&quot;devmode#devmode&quot;&gt;Python Development Mode&lt;/a&gt; shows this warning.</source>
          <target state="translated">&lt;code&gt;__main__&lt;/code&gt; モジュール（&lt;a href=&quot;https://www.python.org/dev/peps/pep-0565&quot; id=&quot;index-8&quot;&gt;&lt;strong&gt;PEP 565&lt;/strong&gt;&lt;/a&gt;）を除いて、デフォルトの警告フィルターでは無視されます。&lt;a href=&quot;devmode#devmode&quot;&gt;Python開発モード&lt;/a&gt;を有効にすると、この警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="e4a51ffc3d539875d40be96f2779ae79c4c16a61" translate="yes" xml:space="preserve">
          <source>Ignored by the default warning filters. Enabling the &lt;a href=&quot;devmode#devmode&quot;&gt;Python Development Mode&lt;/a&gt; shows this warning.</source>
          <target state="translated">デフォルトの警告フィルターでは無視されます。&lt;a href=&quot;devmode#devmode&quot;&gt;Python開発モード&lt;/a&gt;を有効にすると、この警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="1e65bb4eca2d3c71529c96890a4b735eb7dafeac" translate="yes" xml:space="preserve">
          <source>Ignored.</source>
          <target state="translated">Ignored.</target>
        </trans-unit>
        <trans-unit id="b90e620c5d88940bfdd404823e410652bfa5a956" translate="yes" xml:space="preserve">
          <source>Ignoring the timeout feature, calling this method is roughly equivalent to writing:</source>
          <target state="translated">タイムアウト機能を無視して、このメソッドを呼び出すことは、ほぼ書き込みと同じです。</target>
        </trans-unit>
        <trans-unit id="e769494ea641bd01735c8978b12dae80bc631fc2" translate="yes" xml:space="preserve">
          <source>Illegal byte sequence</source>
          <target state="translated">不正なバイト列</target>
        </trans-unit>
        <trans-unit id="50fbe4bdce881188b73937ba1a6e17e22e879c8e" translate="yes" xml:space="preserve">
          <source>Illegal instruction.</source>
          <target state="translated">違法な指導。</target>
        </trans-unit>
        <trans-unit id="3176fdb344f7026fb9cd9da003d83547cd35fc12" translate="yes" xml:space="preserve">
          <source>Illegal seek</source>
          <target state="translated">違法シーク</target>
        </trans-unit>
        <trans-unit id="e221fe5a3e6f4ff124e28b73d70e7afa9ab3f313" translate="yes" xml:space="preserve">
          <source>Image Types</source>
          <target state="translated">画像の種類</target>
        </trans-unit>
        <trans-unit id="c177d6ae70be09c0df8491f4bb934a1ebcbac143" translate="yes" xml:space="preserve">
          <source>Image format</source>
          <target state="translated">画像形式</target>
        </trans-unit>
        <trans-unit id="42de00097c89c82d17336b2d87ec32e4f21480ff" translate="yes" xml:space="preserve">
          <source>Image shapes &lt;em&gt;do not&lt;/em&gt; rotate when turning the turtle, so they do not display the heading of the turtle!</source>
          <target state="translated">タートルを回転させ&lt;em&gt;ても&lt;/em&gt;画像の形状&lt;em&gt;は&lt;/em&gt;回転&lt;em&gt;しない&lt;/em&gt;ため、タートルの向きは表示されません。</target>
        </trans-unit>
        <trans-unit id="09e871c98fef3b901a775def173e4126aaf73b42" translate="yes" xml:space="preserve">
          <source>Images</source>
          <target state="translated">Images</target>
        </trans-unit>
        <trans-unit id="70b3cbc7767df833fa045e36e82910b275002110" translate="yes" xml:space="preserve">
          <source>Images of different formats can be created through the corresponding subclass of &lt;code&gt;tkinter.Image&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;tkinter.Image&lt;/code&gt; の対応するサブクラスを通じて、さまざまな形式の画像を作成できます。</target>
        </trans-unit>
        <trans-unit id="a13a369729af2332fed8dda8e39f614910984143" translate="yes" xml:space="preserve">
          <source>Imagine a robotic turtle starting at (0, 0) in the x-y plane. After an &lt;code&gt;import turtle&lt;/code&gt;, give it the command &lt;code&gt;turtle.forward(15)&lt;/code&gt;, and it moves (on-screen!) 15 pixels in the direction it is facing, drawing a line as it moves. Give it the command &lt;code&gt;turtle.right(25)&lt;/code&gt;, and it rotates in-place 25 degrees clockwise.</source>
          <target state="translated">xy平面で（0、0）から始まるロボットカメを想像してください。 &lt;code&gt;import turtle&lt;/code&gt; 後、コマンド &lt;code&gt;turtle.forward(15)&lt;/code&gt; を与えると、向きが15ピクセル（画面上！）になり、移動するにつれて線が描画されます。コマンド &lt;code&gt;turtle.right(25)&lt;/code&gt; を与えると、インプレイスで時計回りに25度回転します。</target>
        </trans-unit>
        <trans-unit id="687db08c82f3ad0c17cb55a8e0f53abf69ca4195" translate="yes" xml:space="preserve">
          <source>Imagine we have a project that we want to test with the following structure:</source>
          <target state="translated">以下のような構造でテストしたいプロジェクトがあるとします。</target>
        </trans-unit>
        <trans-unit id="40c36dcfc5b7dc5aaaaa183a438e2f62f6e25008" translate="yes" xml:space="preserve">
          <source>Immediately stop playing or recording and return the device to a state where it can accept commands. The OSS documentation recommends closing and re-opening the device after calling &lt;a href=&quot;#ossaudiodev.oss_audio_device.reset&quot;&gt;&lt;code&gt;reset()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すぐに再生または録音を停止し、デバイスをコマンドを受け入れることができる状態に戻します。OSSのドキュメントでは、&lt;a href=&quot;#ossaudiodev.oss_audio_device.reset&quot;&gt; &lt;code&gt;reset()&lt;/code&gt; を&lt;/a&gt;呼び出した後にデバイスを閉じて再度開くことを推奨しています。</target>
        </trans-unit>
        <trans-unit id="80cb7526f8f17d0e625c37d38a71d1b8b176c45b" translate="yes" xml:space="preserve">
          <source>Immediately unwinds the callback stack, invoking callbacks in the reverse order of registration. For any context managers and exit callbacks registered, the arguments passed in will indicate that no exception occurred.</source>
          <target state="translated">コールバックスタックの巻き戻しを即座に行い、登録順を逆にしてコールバックを呼び出します。登録されているコンテキストマネージャや終了コールバックに対して、引数として渡された引数は例外が発生しなかったことを示します。</target>
        </trans-unit>
        <trans-unit id="42e8811b32cc14bd73ca1c7cf254e434ca1c4be2" translate="yes" xml:space="preserve">
          <source>Immutable Sequence Types</source>
          <target state="translated">不変シーケンスタイプ</target>
        </trans-unit>
        <trans-unit id="7d364b632538803974da1c9485bc7401ef2fd2eb" translate="yes" xml:space="preserve">
          <source>Implement &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt; protocol.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt;プロトコルを実装します。</target>
        </trans-unit>
        <trans-unit id="876c8f17da52cca0c2c72876d566383804f060a0" translate="yes" xml:space="preserve">
          <source>Implement &lt;a href=&quot;https://tools.ietf.org/html/rfc3490.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 3490&lt;/strong&gt;&lt;/a&gt;, see also &lt;a href=&quot;#module-encodings.idna&quot;&gt;&lt;code&gt;encodings.idna&lt;/code&gt;&lt;/a&gt;. Only &lt;code&gt;errors='strict'&lt;/code&gt; is supported.</source>
          <target state="translated">実装&lt;a href=&quot;https://tools.ietf.org/html/rfc3490.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 3490&lt;/strong&gt;&lt;/a&gt;、も参照&lt;a href=&quot;#module-encodings.idna&quot;&gt; &lt;code&gt;encodings.idna&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;errors='strict'&lt;/code&gt; のみがサポートされています。</target>
        </trans-unit>
        <trans-unit id="4dbe2ee30f05a84b86d098b6ad21ef61bde254e0" translate="yes" xml:space="preserve">
          <source>Implement &lt;a href=&quot;https://tools.ietf.org/html/rfc3492.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 3492&lt;/strong&gt;&lt;/a&gt;. Stateful codecs are not supported.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc3492.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 3492を&lt;/strong&gt;&lt;/a&gt;実装し&lt;strong&gt;ます&lt;/strong&gt;。ステートフルコーデックはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="cb9ce8751f48a6114c443a4bb2aac9cb2915809a" translate="yes" xml:space="preserve">
          <source>Implement Netscape protocol.</source>
          <target state="translated">Netscapeのプロトコルを実装します。</target>
        </trans-unit>
        <trans-unit id="1ed133685773097940d3cf663208ebc50eb17709" translate="yes" xml:space="preserve">
          <source>Implement checking for unused arguments if desired. The arguments to this function is the set of all argument keys that were actually referred to in the format string (integers for positional arguments, and strings for named arguments), and a reference to the &lt;em&gt;args&lt;/em&gt; and &lt;em&gt;kwargs&lt;/em&gt; that was passed to vformat. The set of unused args can be calculated from these parameters. &lt;a href=&quot;#string.Formatter.check_unused_args&quot;&gt;&lt;code&gt;check_unused_args()&lt;/code&gt;&lt;/a&gt; is assumed to raise an exception if the check fails.</source>
          <target state="translated">必要に応じて、未使用の引数のチェックを実装します。この関数の引数は、フォーマット文字列（位置引数の場合は整数、名前付き引数の場合は文字列）で実際に参照されたすべての引数キーのセットと、&lt;em&gt;vformat&lt;/em&gt;に渡された&lt;em&gt;args&lt;/em&gt;および&lt;em&gt;kwargs&lt;/em&gt;への参照です。未使用の引数のセットは、これらのパラメーターから計算できます。&lt;a href=&quot;#string.Formatter.check_unused_args&quot;&gt; &lt;code&gt;check_unused_args()&lt;/code&gt; &lt;/a&gt;は、チェックが失敗した場合に例外を発生させると想定されています。</target>
        </trans-unit>
        <trans-unit id="fd8c27461faf491446b966e22536bdd5517a900e" translate="yes" xml:space="preserve">
          <source>Implement this method in a subclass such that it returns a serializable object for &lt;em&gt;o&lt;/em&gt;, or calls the base implementation (to raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">このメソッドをサブクラスに実装して、&lt;em&gt;oの&lt;/em&gt;シリアル化可能なオブジェクトを返すか、基本の実装を呼び出します（&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; を発生&lt;/a&gt;させるため）。</target>
        </trans-unit>
        <trans-unit id="6372052045f8af6340009762eb4a097bf006bc91" translate="yes" xml:space="preserve">
          <source>Implementation Limitations</source>
          <target state="translated">実装上の制限</target>
        </trans-unit>
        <trans-unit id="a928eb642e8d69164143d07e134772861cb6056c" translate="yes" xml:space="preserve">
          <source>Implementation note: Some of the mixin methods, such as &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__iter__&quot;&gt;&lt;code&gt;__iter__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__reversed__&quot;&gt;&lt;code&gt;__reversed__()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;index()&lt;/code&gt;, make repeated calls to the underlying &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt; method. Consequently, if &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt; is implemented with constant access speed, the mixin methods will have linear performance; however, if the underlying method is linear (as it would be with a linked list), the mixins will have quadratic performance and will likely need to be overridden.</source>
          <target state="translated">実装上の注意：などのmixin方法のいくつか&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__iter__&quot;&gt; &lt;code&gt;__iter__()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__reversed__&quot;&gt; &lt;code&gt;__reversed__()&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;index()&lt;/code&gt; 、根本的に繰り返し呼び出し作る&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt;方法。したがって、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt;が一定のアクセス速度で実装されている場合、mixinメソッドのパフォーマンスは線形になります。ただし、基になるメソッドが線形である場合（リンクされたリストの場合と同様）、ミックスインのパフォーマンスは2次であり、オーバーライドする必要がある可能性があります。</target>
        </trans-unit>
        <trans-unit id="8cbceb2272fc90a9136eaf0b5779494a174c66fa" translate="yes" xml:space="preserve">
          <source>Implementation note: Some of the mixin methods, such as &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__iter__&quot;&gt;&lt;code&gt;__iter__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__reversed__&quot;&gt;&lt;code&gt;__reversed__()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;index()&lt;/code&gt;, make repeated calls to the underlying &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt; method. Consequently, if &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt; is implemented with constant access speed, the mixin methods will have linear performance; however, if the underlying method is linear (as it would be with a linked list), the mixins will have quadratic performance and will likely need to be overridden.</source>
          <target state="translated">実装上の注意：などのmixin方法のいくつか&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__iter__&quot;&gt; &lt;code&gt;__iter__()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__reversed__&quot;&gt; &lt;code&gt;__reversed__()&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;index()&lt;/code&gt; 、根本的に繰り返し呼び出し作る&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt;方法。したがって、&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt;が一定のアクセス速度で実装されている場合、ミックスインメソッドのパフォーマンスは線形になります。ただし、基になるメソッドが線形である場合（リンクリストの場合のように）、ミックスインのパフォーマンスは2次式になり、オーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="602e467a96a4864b3e865c151d6768f89e1f6c9a" translate="yes" xml:space="preserve">
          <source>Implementation of &lt;a href=&quot;#importlib.abc.Loader.exec_module&quot;&gt;&lt;code&gt;Loader.exec_module()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#importlib.abc.Loader.exec_module&quot;&gt; &lt;code&gt;Loader.exec_module()&lt;/code&gt; の&lt;/a&gt;実装。</target>
        </trans-unit>
        <trans-unit id="8b24035207ed54bd400485a1684e18bf3533d78a" translate="yes" xml:space="preserve">
          <source>Implementation of &lt;a href=&quot;#importlib.abc.Loader.load_module&quot;&gt;&lt;code&gt;Loader.load_module()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#importlib.abc.Loader.load_module&quot;&gt; &lt;code&gt;Loader.load_module()&lt;/code&gt; の&lt;/a&gt;実装。</target>
        </trans-unit>
        <trans-unit id="20977e3c93bce44f3af2c831893e3343efa9bf7c" translate="yes" xml:space="preserve">
          <source>Implementations of &lt;code&gt;process_message&lt;/code&gt; should use the &lt;code&gt;**kwargs&lt;/code&gt; signature to accept arbitrary keyword arguments, since future feature enhancements may add keys to the kwargs dictionary.</source>
          <target state="translated">&lt;code&gt;process_message&lt;/code&gt; の実装では、 &lt;code&gt;**kwargs&lt;/code&gt; シグネチャを使用して任意のキーワード引数を受け入れる必要があります。将来の機能拡張により、kwargs辞書にキーが追加される可能性があるためです。</target>
        </trans-unit>
        <trans-unit id="1d8b1b41137285f8c4de39c176a278d9f49ddf2e" translate="yes" xml:space="preserve">
          <source>Implementing the arithmetic operations</source>
          <target state="translated">演算の実装</target>
        </trans-unit>
        <trans-unit id="ca6c4d83cb31522562758f2caae6de20eb026979" translate="yes" xml:space="preserve">
          <source>Implementors should be careful to make equal numbers equal and hash them to the same values. This may be subtle if there are two different extensions of the real numbers. For example, &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt;&lt;code&gt;fractions.Fraction&lt;/code&gt;&lt;/a&gt; implements &lt;a href=&quot;functions#hash&quot;&gt;&lt;code&gt;hash()&lt;/code&gt;&lt;/a&gt; as follows:</source>
          <target state="translated">実装者は、等しい数を等しくし、それらを同じ値にハッシュするように注意する必要があります。実数の2つの異なる拡張がある場合、これは微妙な場合があります。たとえば、&lt;a href=&quot;fractions#fractions.Fraction&quot;&gt; &lt;code&gt;fractions.Fraction&lt;/code&gt; &lt;/a&gt;は次のように&lt;a href=&quot;functions#hash&quot;&gt; &lt;code&gt;hash()&lt;/code&gt; &lt;/a&gt;を実装します。</target>
        </trans-unit>
        <trans-unit id="d903524c1ea6aa12c931b0a6c641b3778b3888a8" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;PUSH(get_awaitable(TOS.__anext__()))&lt;/code&gt;. See &lt;code&gt;GET_AWAITABLE&lt;/code&gt; for details about &lt;code&gt;get_awaitable&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;PUSH(get_awaitable(TOS.__anext__()))&lt;/code&gt; 実装します。参照 &lt;code&gt;GET_AWAITABLE&lt;/code&gt; の詳細については、 &lt;code&gt;get_awaitable&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3cb421f905057ea14812c7d7b55740f7dcb3aa14" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = +TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = +TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="9f8030dd288cf838d962bc81cf0b1e710e59dab6" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = -TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = -TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="23caf167f55ab86f7acf8ef10a08029547ccae56" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS.__aiter__()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = TOS.__aiter__()&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="6804ffbe6ca6db0446550f606e8c3b827c72019d" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 % TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = TOS1 % TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="1ccd836db2748a42cdb6568840d6b34ab7680997" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 &amp;amp; TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = TOS1 &amp;amp; TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="98b212dadbaf80fff0c651d73234d968ff6d57ff" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 &amp;gt;&amp;gt; TOS&lt;/code&gt;.</source>
          <target state="translated">道具 &lt;code&gt;TOS = TOS1 &amp;gt;&amp;gt; TOS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a92a967387ba75f1c824f8c282c1b389323c1c12" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 &amp;lt;&amp;lt; TOS&lt;/code&gt;.</source>
          <target state="translated">道具 &lt;code&gt;TOS = TOS1 &amp;lt;&amp;lt; TOS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fe06b1264a086dd70cc373eb95043d5b61c0bdec" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 * TOS&lt;/code&gt;.</source>
          <target state="translated">道具 &lt;code&gt;TOS = TOS1 * TOS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e7727e8610b32769f888b796569df51894a6e1a4" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 ** TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = TOS1 ** TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="a68a686d5d97ef25da29ba50188cfe812c2b160c" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 + TOS&lt;/code&gt;.</source>
          <target state="translated">道具 &lt;code&gt;TOS = TOS1 + TOS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0b7f98171174dff07ba4794fcfc188a2b547babd" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 - TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = TOS1 - TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="e03d1b043f5b83ce06f326b9be67568ba2593f09" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 / TOS&lt;/code&gt;.</source>
          <target state="translated">道具 &lt;code&gt;TOS = TOS1 / TOS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="54632e771c9265cca4e71a87f0788919f6c1a468" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 // TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = TOS1 // TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="b4ff4094536277707470df447fbf4ac881111c43" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 @ TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = TOS1 @ TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="70062ec736c872ff9695663f40f72ab315ef9ddf" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 ^ TOS&lt;/code&gt;.</source>
          <target state="translated">道具 &lt;code&gt;TOS = TOS1 ^ TOS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed9a0b5ebb7afed19c96ac5e2a783c31cb5f2376" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1 | TOS&lt;/code&gt;.</source>
          <target state="translated">道具 &lt;code&gt;TOS = TOS1 | TOS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a435cd9e0a8ca34e1604fda39f5b0f09b410d773" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = TOS1[TOS]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = TOS1[TOS]&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="a55222ca989584dee87037902ae61c754d1433ea" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = get_awaitable(TOS)&lt;/code&gt;, where &lt;code&gt;get_awaitable(o)&lt;/code&gt; returns &lt;code&gt;o&lt;/code&gt; if &lt;code&gt;o&lt;/code&gt; is a coroutine object or a generator object with the CO_ITERABLE_COROUTINE flag, or resolves &lt;code&gt;o.__await__&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = get_awaitable(TOS)&lt;/code&gt; 実装します &lt;code&gt;o&lt;/code&gt; がコルーチンオブジェクトまたはCO_ITERABLE_COROUTINEフラグの付いたジェネレーターオブジェクトである場合、 &lt;code&gt;get_awaitable(o)&lt;/code&gt; は &lt;code&gt;o&lt;/code&gt; を返すか、 &lt;code&gt;o.__await__&lt;/code&gt; 解決します。</target>
        </trans-unit>
        <trans-unit id="5e24956a48bbfdcc09d0cf754f3dad5634e36ef6" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = iter(TOS)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = iter(TOS)&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="7127e3da317dbd834e1c9fa4d150709b0595c38c" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = not TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = not TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="6aefd62fa0df0b5ae152afef20eb6a2be7bc7fe1" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS = ~TOS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS = ~TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="4f729d424456b44dfd8d226e0748fec98a45f659" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS.name = TOS1&lt;/code&gt;, where &lt;em&gt;namei&lt;/em&gt; is the index of name in &lt;code&gt;co_names&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS.name = TOS1&lt;/code&gt; 実装し &lt;code&gt;co_names&lt;/code&gt; 。ここで、&lt;em&gt;namei&lt;/em&gt;はco_names内の名前のインデックスです。</target>
        </trans-unit>
        <trans-unit id="f7674022864a24bfc63ce8ce10c8db53e65eff9f" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;TOS1[TOS] = TOS2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TOS1[TOS] = TOS2&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="47c788dc833478a625bb744ec09e58aea9fc10d4" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;del TOS.name&lt;/code&gt;, using &lt;em&gt;namei&lt;/em&gt; as index into &lt;code&gt;co_names&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;del TOS.name&lt;/code&gt; を実装し、&lt;em&gt;namei&lt;/em&gt;を &lt;code&gt;co_names&lt;/code&gt; へのインデックスとして使用します。</target>
        </trans-unit>
        <trans-unit id="ab97a7e60a0b065d453ed23af196b35ed6d71cfd" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;del TOS1[TOS]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;del TOS1[TOS]&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="c6cb3ef10de23ff06b085fdd4bd8df8cca8edb2e" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;del name&lt;/code&gt;, where &lt;em&gt;namei&lt;/em&gt; is the index into &lt;code&gt;co_names&lt;/code&gt; attribute of the code object.</source>
          <target state="translated">道具 &lt;code&gt;del name&lt;/code&gt; 、&lt;em&gt;nameiは&lt;/em&gt;へのインデックスである &lt;code&gt;co_names&lt;/code&gt; のコードオブジェクトの属性。</target>
        </trans-unit>
        <trans-unit id="0e9bf63b19593d04613e29b26ddb368205c21880" translate="yes" xml:space="preserve">
          <source>Implements &lt;code&gt;name = TOS&lt;/code&gt;. &lt;em&gt;namei&lt;/em&gt; is the index of &lt;em&gt;name&lt;/em&gt; in the attribute &lt;code&gt;co_names&lt;/code&gt; of the code object. The compiler tries to use &lt;a href=&quot;#opcode-STORE_FAST&quot;&gt;&lt;code&gt;STORE_FAST&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#opcode-STORE_GLOBAL&quot;&gt;&lt;code&gt;STORE_GLOBAL&lt;/code&gt;&lt;/a&gt; if possible.</source>
          <target state="translated">&lt;code&gt;name = TOS&lt;/code&gt; 実装します。&lt;em&gt;namei&lt;/em&gt;は、コードオブジェクトの属性 &lt;code&gt;co_names&lt;/code&gt; 内の&lt;em&gt;名前&lt;/em&gt;のインデックスです。コンパイラーは、&lt;a href=&quot;#opcode-STORE_FAST&quot;&gt; &lt;code&gt;STORE_FAST&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#opcode-STORE_GLOBAL&quot;&gt; &lt;code&gt;STORE_GLOBAL&lt;/code&gt; &lt;/a&gt;を使用しようとします。</target>
        </trans-unit>
        <trans-unit id="3bb12d25ddb30f12352643b960eb58634dcff262" translate="yes" xml:space="preserve">
          <source>Implements a mutex lock for asyncio tasks. Not thread-safe.</source>
          <target state="translated">非同期タスク用のミューテックスロックを実装しました。スレッドセーフではありません。</target>
        </trans-unit>
        <trans-unit id="f127d7511ab821d90fc0d9e0415de725710e1c0e" translate="yes" xml:space="preserve">
          <source>Implements assignment with a starred target: Unpacks an iterable in TOS into individual values, where the total number of values can be smaller than the number of items in the iterable: one of the new values will be a list of all leftover items.</source>
          <target state="translated">星付きのターゲットを持つ代入を実装しました。TOSのイテレータブルを個々の値にアンパックします。値の総数はイテレータブル内の項目数よりも小さくすることができます。</target>
        </trans-unit>
        <trans-unit id="ad8c71c60917e28ec70cc6e72ac5aba785cd2533" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 % TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 % TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="34a2e00a28f9e41709e5a409debe9f70047ccfa5" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 &amp;amp; TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 &amp;amp; TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="58c41048e48b098a8662937aa13eba0fb458de61" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 &amp;gt;&amp;gt; TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースに &lt;code&gt;TOS = TOS1 &amp;gt;&amp;gt; TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="fa04e754a31d6027a7f4daa4b4fdd702965038b1" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 &amp;lt;&amp;lt; TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 &amp;lt;&amp;lt; TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="1ee8bdd10bfb59d1de1b7233652a10a6aebf648c" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 * TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 * TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="239c416c5552e24e40b0c3f5a8da8834a4549b9c" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 ** TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 ** TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="b92e466e855a22dcee87a299d9f506bd0bd45e91" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 + TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 + TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="e4a87fbd97f23bdda16b8cf5fe0fe1fd3bb5bef6" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 - TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 - TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="6b26e08c65cff3d8460f7b64f132529ac3dc22be" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 / TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 / TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="44d86e1dd26553b877ecf8c640b2c2b6832071f1" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 // TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースに &lt;code&gt;TOS = TOS1 // TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="b416ab2beeb3c3d6516c059eeb07d58936d0e6df" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 @ TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 @ TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="e9962e5508639fbb25594a1f43d3b5f76b2afc27" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 ^ TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 ^ TOS&lt;/code&gt; 実装します。</target>
        </trans-unit>
        <trans-unit id="3896caff55805b902dd285f3c899f9096710e046" translate="yes" xml:space="preserve">
          <source>Implements in-place &lt;code&gt;TOS = TOS1 | TOS&lt;/code&gt;.</source>
          <target state="translated">インプレースの &lt;code&gt;TOS = TOS1 | TOS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="85bad2fb59570e2a5eef60329848ed4622403300" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;'backslashreplace'&lt;/code&gt; error handling (for &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-encoding&quot;&gt;text encodings&lt;/a&gt; only): malformed data is replaced by a backslashed escape sequence.</source>
          <target state="translated">&lt;code&gt;'backslashreplace'&lt;/code&gt; エラー処理を実装します（&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-encoding&quot;&gt;テキストエンコードの場合&lt;/a&gt;のみ）：不正な形式のデータは、バックスラッシュ付きのエスケープシーケンスに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="3972f7d57316db3c0510f582bfb45840e982174e" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;'backslashreplace'&lt;/code&gt; error handling (for &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-text-encoding&quot;&gt;text encodings&lt;/a&gt; only): malformed data is replaced by a backslashed escape sequence.</source>
          <target state="translated">&lt;code&gt;'backslashreplace'&lt;/code&gt; エラー処理を実装します（&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-text-encoding&quot;&gt;テキストエンコーディングの場合&lt;/a&gt;のみ）：不正な形式のデータは、バックスラッシュされたエスケープシーケンスに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="f6c10a6bbb7422a691823579f3081bab9b0e71d9" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;'ignore'&lt;/code&gt; error handling: malformed data is ignored and encoding or decoding is continued without further notice.</source>
          <target state="translated">&lt;code&gt;'ignore'&lt;/code&gt; エラー処理を実装します。不正な形式のデータは無視され、エンコードまたはデコードは通知なしで続行されます。</target>
        </trans-unit>
        <trans-unit id="c7d23f24683ac08882aaa07d91874ed6ef4c6dd2" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;'namereplace'&lt;/code&gt; error handling (for encoding with &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-encoding&quot;&gt;text encodings&lt;/a&gt; only): the unencodable character is replaced by a &lt;code&gt;\N{...}&lt;/code&gt; escape sequence.</source>
          <target state="translated">&lt;code&gt;'namereplace'&lt;/code&gt; エラー処理を実装し&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-encoding&quot;&gt;ます&lt;/a&gt;（テキストエンコーディングでのエンコーディングのみ）：エンコードできない文字は &lt;code&gt;\N{...}&lt;/code&gt; エスケープシーケンスに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="146edfb679a3a850e62b2106533b0b8a80465bec" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;'namereplace'&lt;/code&gt; error handling (for encoding with &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-text-encoding&quot;&gt;text encodings&lt;/a&gt; only): the unencodable character is replaced by a &lt;code&gt;\N{...}&lt;/code&gt; escape sequence.</source>
          <target state="translated">&lt;code&gt;'namereplace'&lt;/code&gt; エラー処理を実装し&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-text-encoding&quot;&gt;ます&lt;/a&gt;（テキストエンコーディングでのエンコーディングのみ）：エンコードできない文字は &lt;code&gt;\N{...}&lt;/code&gt; エスケープシーケンスに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="663edbb12a782a964e38e6f015a8ae61e59c5cb6" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;'replace'&lt;/code&gt; error handling (for &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-encoding&quot;&gt;text encodings&lt;/a&gt; only): substitutes &lt;code&gt;'?'&lt;/code&gt; for encoding errors (to be encoded by the codec), and &lt;code&gt;'\ufffd'&lt;/code&gt; (the Unicode replacement character) for decoding errors.</source>
          <target state="translated">&lt;code&gt;'replace'&lt;/code&gt; エラー処理を実装します（&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-encoding&quot;&gt;テキストエンコーディング&lt;/a&gt;のみ）： &lt;code&gt;'?'&lt;/code&gt; を置き換えます エンコードエラー（コーデックによってエンコードされる）、および &lt;code&gt;'\ufffd'&lt;/code&gt; （Unicode置換文字）はデコードエラー。</target>
        </trans-unit>
        <trans-unit id="ecc4389e49af9fb077022493ee402ac0f38b7c02" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;'replace'&lt;/code&gt; error handling (for &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-text-encoding&quot;&gt;text encodings&lt;/a&gt; only): substitutes &lt;code&gt;'?'&lt;/code&gt; for encoding errors (to be encoded by the codec), and &lt;code&gt;'\ufffd'&lt;/code&gt; (the Unicode replacement character) for decoding errors.</source>
          <target state="translated">&lt;code&gt;'replace'&lt;/code&gt; エラー処理を実装します（&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-text-encoding&quot;&gt;テキストエンコーディングの場合&lt;/a&gt;のみ）： &lt;code&gt;'?'&lt;/code&gt; を置き換えます エンコードエラー（コーデックによってエンコードされる）の場合、および &lt;code&gt;'\ufffd'&lt;/code&gt; （Unicode置換文字）のデコードエラーの場合。</target>
        </trans-unit>
        <trans-unit id="a478a6a191e85196bdcece7d24cdbeb8b90bb3e4" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;'strict'&lt;/code&gt; error handling: each encoding or decoding error raises a &lt;a href=&quot;exceptions#UnicodeError&quot;&gt;&lt;code&gt;UnicodeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;'strict'&lt;/code&gt; エラー処理を実装します。エンコードまたはデコードのエラーが発生するたびに&lt;a href=&quot;exceptions#UnicodeError&quot;&gt; &lt;code&gt;UnicodeError&lt;/code&gt; が&lt;/a&gt;発生します。</target>
        </trans-unit>
        <trans-unit id="45e09434edbbb004dd6529a8c664f47c18ec9c8a" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;'xmlcharrefreplace'&lt;/code&gt; error handling (for encoding with &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-encoding&quot;&gt;text encodings&lt;/a&gt; only): the unencodable character is replaced by an appropriate XML character reference.</source>
          <target state="translated">&lt;code&gt;'xmlcharrefreplace'&lt;/code&gt; エラー処理を実装し&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-text-encoding&quot;&gt;ます&lt;/a&gt;（テキストエンコーディングを使用したエンコーディングのみ）。エンコードできない文字は、適切なXML文字参照に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="1fa3a0d7eb90310b93b3485af23ace408575d97f" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;'xmlcharrefreplace'&lt;/code&gt; error handling (for encoding with &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-text-encoding&quot;&gt;text encodings&lt;/a&gt; only): the unencodable character is replaced by an appropriate XML character reference.</source>
          <target state="translated">&lt;code&gt;'xmlcharrefreplace'&lt;/code&gt; エラー処理を実装し&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-text-encoding&quot;&gt;ます&lt;/a&gt;（テキストエンコーディングでのエンコーディングのみ）：エンコードできない文字は適切なXML文字参照に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="4589678f737340f266ad3c03c880cd6693ba765b" translate="yes" xml:space="preserve">
          <source>Implements the expression statement for the interactive mode. TOS is removed from the stack and printed. In non-interactive mode, an expression statement is terminated with &lt;a href=&quot;#opcode-POP_TOP&quot;&gt;&lt;code&gt;POP_TOP&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">インタラクティブモードの式ステートメントを実装します。TOSはスタックから削除され、印刷されます。非インタラクティブモードでは、式ステートメントは&lt;a href=&quot;#opcode-POP_TOP&quot;&gt; &lt;code&gt;POP_TOP&lt;/code&gt; &lt;/a&gt;で終了します。</target>
        </trans-unit>
        <trans-unit id="431d2662e4cf482dbbd51ee873a2bf4d4dbe506a" translate="yes" xml:space="preserve">
          <source>Implements the standard rules for accepting and returning cookies.</source>
          <target state="translated">クッキーの受け入れと返却の標準ルールを実装します。</target>
        </trans-unit>
        <trans-unit id="357be719dc69e352146cd9351979e2f88b18aa53" translate="yes" xml:space="preserve">
          <source>Implicit namespace packages</source>
          <target state="translated">暗黙の名前空間パッケージ</target>
        </trans-unit>
        <trans-unit id="3d1027d5bfea0f5b907c45a2719ba20af2951bac" translate="yes" xml:space="preserve">
          <source>Implicitly via the declared type</source>
          <target state="translated">宣言された型を介して暗黙のうちに</target>
        </trans-unit>
        <trans-unit id="87b9fc3f346510b76b17999f7a146e2b1534c297" translate="yes" xml:space="preserve">
          <source>Implied by a read event on a listening socket</source>
          <target state="translated">リスニングソケットの読み込みイベントによって暗示される</target>
        </trans-unit>
        <trans-unit id="4698e1d5e35f008f6196e32547364bf825c475dc" translate="yes" xml:space="preserve">
          <source>Implied by a read event with no data available</source>
          <target state="translated">データが利用できないリードイベントによって暗示される</target>
        </trans-unit>
        <trans-unit id="21611d57f0838ec535115caab52079c6fc745f43" translate="yes" xml:space="preserve">
          <source>Implied by the first read or write event</source>
          <target state="translated">最初の読み書きイベントによって暗示される</target>
        </trans-unit>
        <trans-unit id="da96b428d292acbbe72df9e50d4e769cb28b7b27" translate="yes" xml:space="preserve">
          <source>Import &lt;em&gt;module&lt;/em&gt; if necessary and return the object called &lt;em&gt;name&lt;/em&gt; from it, where the &lt;em&gt;module&lt;/em&gt; and &lt;em&gt;name&lt;/em&gt; arguments are &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; objects. Note, unlike its name suggests, &lt;a href=&quot;#pickle.Unpickler.find_class&quot;&gt;&lt;code&gt;find_class()&lt;/code&gt;&lt;/a&gt; is also used for finding functions.</source>
          <target state="translated">必要に応じて&lt;em&gt;モジュールを&lt;/em&gt;インポートし、そこから&lt;em&gt;nameという&lt;/em&gt;オブジェクトを返します。ここで、&lt;em&gt;モジュール&lt;/em&gt;と&lt;em&gt;名前の&lt;/em&gt;引数は&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;オブジェクトです。名前が示すように、&lt;a href=&quot;#pickle.Unpickler.find_class&quot;&gt; &lt;code&gt;find_class()&lt;/code&gt; &lt;/a&gt;は関数の検索にも使用されます。</target>
        </trans-unit>
        <trans-unit id="b52818d6d21a3617010654286ad1530ac0e14b13" translate="yes" xml:space="preserve">
          <source>Import a module. The &lt;em&gt;name&lt;/em&gt; argument specifies what module to import in absolute or relative terms (e.g. either &lt;code&gt;pkg.mod&lt;/code&gt; or &lt;code&gt;..mod&lt;/code&gt;). If the name is specified in relative terms, then the &lt;em&gt;package&lt;/em&gt; argument must be set to the name of the package which is to act as the anchor for resolving the package name (e.g. &lt;code&gt;import_module('..mod', 'pkg.subpkg')&lt;/code&gt; will import &lt;code&gt;pkg.mod&lt;/code&gt;).</source>
          <target state="translated">モジュールをインポートします。&lt;em&gt;名前の&lt;/em&gt;引数を指定絶対的または相対的に輸入にどのようなモジュール（例えばいずれか &lt;code&gt;pkg.mod&lt;/code&gt; または &lt;code&gt;..mod&lt;/code&gt; ）。名前が相対的な用語で指定されている場合、&lt;em&gt;package&lt;/em&gt;引数は、パッケージ名を解決するためのアンカーとして機能するパッケージの名前に設定する必要があります（例： &lt;code&gt;import_module('..mod', 'pkg.subpkg')&lt;/code&gt; &lt;code&gt;pkg.mod&lt;/code&gt; をインポートします）。</target>
        </trans-unit>
        <trans-unit id="509eb07f39761a76413d728e8002d91cab5669f9" translate="yes" xml:space="preserve">
          <source>Import as few modules as possible and do it as soon as possible. This minimizes external dependencies of tests and also minimizes possible anomalous behavior from side-effects of importing a module.</source>
          <target state="translated">できるだけ少ないモジュールをインポートして、できるだけ早く実行してください。これにより、テストの外部依存性を最小限に抑え、モジュールのインポートによる副作用による異常動作の可能性も最小限に抑えられます。</target>
        </trans-unit>
        <trans-unit id="ebf453241874ae9140f1c4fba4572af23be16d96" translate="yes" xml:space="preserve">
          <source>Import itself is implemented in Python code, making it possible to expose most of the import machinery through importlib. The following helps illustrate the various APIs that importlib exposes by providing an approximate implementation of &lt;a href=&quot;#importlib.import_module&quot;&gt;&lt;code&gt;importlib.import_module()&lt;/code&gt;&lt;/a&gt; (Python 3.4 and newer for the importlib usage, Python 3.6 and newer for other parts of the code).</source>
          <target state="translated">インポート自体はPythonコードで実装されているため、importlibを通じてほとんどのインポート機構を公開できます。以下は、&lt;a href=&quot;#importlib.import_module&quot;&gt; &lt;code&gt;importlib.import_module()&lt;/code&gt; の&lt;/a&gt;おおよその実装を提供することにより、importlibが公開するさまざまなAPIを示しています（ importlibの使用についてはPython 3.4以降、コードの他の部分についてはPython 3.6以降）。</target>
        </trans-unit>
        <trans-unit id="eb7d80557274b41c25be1de7f2b2a9c69daa9de1" translate="yes" xml:space="preserve">
          <source>Import on Case-Insensitive Platforms</source>
          <target state="translated">大文字小文字を区別しないプラットフォームでのインポート</target>
        </trans-unit>
        <trans-unit id="51a0d1e201d38ceab71bb750a252b512b10de5c2" translate="yes" xml:space="preserve">
          <source>Import resolution and custom importers</source>
          <target state="translated">輸入解決とカスタムインポーター</target>
        </trans-unit>
        <trans-unit id="b46dda0f3af0f364b45aca902f93a2030e1d6cf0" translate="yes" xml:space="preserve">
          <source>Import resolution, by default, uses the builtin &lt;a href=&quot;functions#__import__&quot;&gt;&lt;code&gt;__import__()&lt;/code&gt;&lt;/a&gt; function to do its importing. You may want to replace this with your own importing mechanism: if so, you can replace the &lt;code&gt;importer&lt;/code&gt; attribute of the &lt;code&gt;DictConfigurator&lt;/code&gt; or its superclass, the &lt;code&gt;BaseConfigurator&lt;/code&gt; class. However, you need to be careful because of the way functions are accessed from classes via descriptors. If you are using a Python callable to do your imports, and you want to define it at class level rather than instance level, you need to wrap it with &lt;a href=&quot;functions#staticmethod&quot;&gt;&lt;code&gt;staticmethod()&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">インポートの解決では、デフォルトで、組み込みの&lt;a href=&quot;functions#__import__&quot;&gt; &lt;code&gt;__import__()&lt;/code&gt; &lt;/a&gt;関数を使用してインポートを実行します。これを独自のインポートメカニズムに置き換えることができます。その場合は、 &lt;code&gt;DictConfigurator&lt;/code&gt; またはそのスーパークラスの &lt;code&gt;BaseConfigurator&lt;/code&gt; クラスの &lt;code&gt;importer&lt;/code&gt; 属性を置き換えることができます。ただし、関数は記述子を介してクラスからアクセスされるため、注意する必要があります。インポートを実行するために呼び出し可能なPythonを使用していて、インスタンスレベルではなくクラスレベルでそれを定義する場合は、&lt;a href=&quot;functions#staticmethod&quot;&gt; &lt;code&gt;staticmethod()&lt;/code&gt; で&lt;/a&gt;ラップする必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="ed9b8c2261e65d838380f42dc0d920d3b56a2dfe" translate="yes" xml:space="preserve">
          <source>Import this class from the &lt;a href=&quot;#module-email.charset&quot;&gt;&lt;code&gt;email.charset&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">このクラスを&lt;a href=&quot;#module-email.charset&quot;&gt; &lt;code&gt;email.charset&lt;/code&gt; &lt;/a&gt;モジュールからインポートします。</target>
        </trans-unit>
        <trans-unit id="361838ee748707501d1086cda1d546a0bca541ea" translate="yes" xml:space="preserve">
          <source>ImportError</source>
          <target state="translated">ImportError</target>
        </trans-unit>
        <trans-unit id="d88d4c76f774a45881449d93cfdd576af021e9ee" translate="yes" xml:space="preserve">
          <source>ImportWarning</source>
          <target state="translated">ImportWarning</target>
        </trans-unit>
        <trans-unit id="4b6d6a30150a506f9b79caf45da5aecb76b0018e" translate="yes" xml:space="preserve">
          <source>Important</source>
          <target state="translated">Important</target>
        </trans-unit>
        <trans-unit id="90ab5ed3bb3e27748d586ad9b9b11e2ab9efaaf8" translate="yes" xml:space="preserve">
          <source>Importing</source>
          <target state="translated">Importing</target>
        </trans-unit>
        <trans-unit id="fe0f554fef6d8bbe2bada744a7a99611cdfdc416" translate="yes" xml:space="preserve">
          <source>Importing Modules</source>
          <target state="translated">モジュールのインポート</target>
        </trans-unit>
        <trans-unit id="7d7d20fec55d874b61e9a23d4848e2fe11f9ac1d" translate="yes" xml:space="preserve">
          <source>Importing a source file directly</source>
          <target state="translated">ソースファイルを直接インポートする</target>
        </trans-unit>
        <trans-unit id="c638d5fe75ce243c593fb88053ccdfc251f4221c" translate="yes" xml:space="preserve">
          <source>Importing programmatically</source>
          <target state="translated">プログラムによるインポート</target>
        </trans-unit>
        <trans-unit id="da4b6fd661f8f0ff59c6e77bf0660d2518b7404d" translate="yes" xml:space="preserve">
          <source>Importing the main class:</source>
          <target state="translated">メインクラスをインポートします。</target>
        </trans-unit>
        <trans-unit id="1ab6816ef80ddd057eefbe256b51f340873b1f96" translate="yes" xml:space="preserve">
          <source>Importing this module will append site-specific paths to the module search path and add a few builtins, unless &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id3&quot;&gt;&lt;code&gt;-S&lt;/code&gt;&lt;/a&gt; was used. In that case, this module can be safely imported with no automatic modifications to the module search path or additions to the builtins. To explicitly trigger the usual site-specific additions, call the &lt;a href=&quot;#site.main&quot;&gt;&lt;code&gt;site.main()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">このモジュールをインポートすると、&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id3&quot;&gt; &lt;code&gt;-S&lt;/code&gt; &lt;/a&gt;が使用されていない限り、サイト固有のパスがモジュール検索パスに追加され、いくつかの組み込みが追加されます。その場合、このモジュールは安全にインポートでき、モジュールの検索パスを自動的に変更したり、ビルトインに追加したりする必要はありません。通常のサイト固有の追加を明示的にトリガーするには、&lt;a href=&quot;#site.main&quot;&gt; &lt;code&gt;site.main()&lt;/code&gt; &lt;/a&gt;関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="6952e83bb227bfc12f4069d649cedd8e49d9af47" translate="yes" xml:space="preserve">
          <source>Importing this module will append site-specific paths to the module search path and add a few builtins, unless &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id3&quot;&gt;&lt;code&gt;-S&lt;/code&gt;&lt;/a&gt; was used. In that case, this module can be safely imported with no automatic modifications to the module search path or additions to the builtins. To explicitly trigger the usual site-specific additions, call the &lt;a href=&quot;#site.main&quot;&gt;&lt;code&gt;site.main()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">このモジュールをインポートすると、&lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id3&quot;&gt; &lt;code&gt;-S&lt;/code&gt; &lt;/a&gt;が使用されていない限り、サイト固有のパスがモジュール検索パスに追加され、いくつかの組み込みパスが追加されます。その場合、このモジュールは、モジュールの検索パスを自動的に変更したり、組み込みに追加したりすることなく、安全にインポートできます。通常のサイト固有の追加を明示的にトリガーするには、&lt;a href=&quot;#site.main&quot;&gt; &lt;code&gt;site.main()&lt;/code&gt; &lt;/a&gt;関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="e42328ac01cd03a47978f064c93b392caf3861f0" translate="yes" xml:space="preserve">
          <source>Imports</source>
          <target state="translated">Imports</target>
        </trans-unit>
        <trans-unit id="f16b4231e3d6ba6a1713c3f5cbbd7c9a26c500c5" translate="yes" xml:space="preserve">
          <source>Imports the module &lt;code&gt;co_names[namei]&lt;/code&gt;. TOS and TOS1 are popped and provide the &lt;em&gt;fromlist&lt;/em&gt; and &lt;em&gt;level&lt;/em&gt; arguments of &lt;a href=&quot;functions#__import__&quot;&gt;&lt;code&gt;__import__()&lt;/code&gt;&lt;/a&gt;. The module object is pushed onto the stack. The current namespace is not affected: for a proper import statement, a subsequent &lt;a href=&quot;#opcode-STORE_FAST&quot;&gt;&lt;code&gt;STORE_FAST&lt;/code&gt;&lt;/a&gt; instruction modifies the namespace.</source>
          <target state="translated">モジュール &lt;code&gt;co_names[namei]&lt;/code&gt; インポートします。TOSおよびTOS1がポップされ、&lt;a href=&quot;functions#__import__&quot;&gt; &lt;code&gt;__import__()&lt;/code&gt; &lt;/a&gt;の&lt;em&gt;fromlist&lt;/em&gt;および&lt;em&gt;level&lt;/em&gt;引数を提供します。モジュールオブジェクトがスタックにプッシュされます。現在のネームスペースは影響を受けません。適切なインポートステートメントの場合、後続の&lt;a href=&quot;#opcode-STORE_FAST&quot;&gt; &lt;code&gt;STORE_FAST&lt;/code&gt; &lt;/a&gt;命令がネームスペースを変更します。</target>
        </trans-unit>
        <trans-unit id="3a067f8e863950831516af1d650bd9d3d58d9c6c" translate="yes" xml:space="preserve">
          <source>Imports: Multi-Line and Absolute/Relative</source>
          <target state="translated">輸入品。マルチラインと絶対/相対</target>
        </trans-unit>
        <trans-unit id="e34afa4c6c43fdf304519c4cf65d27d88a721571" translate="yes" xml:space="preserve">
          <source>Improved Compatibility with Shells</source>
          <target state="translated">シェルとの互換性の向上</target>
        </trans-unit>
        <trans-unit id="089354fe34004fc9de595d32a05e79153d2c456c" translate="yes" xml:space="preserve">
          <source>In 3.8, the two primary ways DLLs are loaded now explicitly override the process-wide behavior to ensure consistency. See the &lt;a href=&quot;https://docs.python.org/3.8/whatsnew/3.8.html#bpo-36085-whatsnew&quot;&gt;porting notes&lt;/a&gt; for information on updating libraries.</source>
          <target state="translated">3.8では、DLLが読み込まれる2つの主要な方法は、一貫性を確保するためにプロセス全体の動作を明示的にオーバーライドするようになりました。ライブラリの更新については、&lt;a href=&quot;https://docs.python.org/3.8/whatsnew/3.8.html#bpo-36085-whatsnew&quot;&gt;移植に関する注意事項&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7add8af49918249d99a966a65f5a983db6ab28fa" translate="yes" xml:space="preserve">
          <source>In 3.8, the two primary ways DLLs are loaded now explicitly override the process-wide behavior to ensure consistency. See the &lt;a href=&quot;https://docs.python.org/3.9/whatsnew/3.8.html#bpo-36085-whatsnew&quot;&gt;porting notes&lt;/a&gt; for information on updating libraries.</source>
          <target state="translated">3.8では、DLLがロードされる2つの主要な方法が、一貫性を確保するためにプロセス全体の動作を明示的にオーバーライドするようになりました。ライブラリの更新については、&lt;a href=&quot;https://docs.python.org/3.9/whatsnew/3.8.html#bpo-36085-whatsnew&quot;&gt;移植に関する注意事項&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="09b2f076615a334a17aaf9a55dfdf31ef870f1d5" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;#io.BytesIO&quot;&gt;&lt;code&gt;BytesIO&lt;/code&gt;&lt;/a&gt;, this is the same as &lt;a href=&quot;#io.BufferedIOBase.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#io.BytesIO&quot;&gt; &lt;code&gt;BytesIO&lt;/code&gt; &lt;/a&gt;、これは同じである&lt;a href=&quot;#io.BufferedIOBase.read&quot;&gt; &lt;code&gt;read()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b38fe556a6e29923e6bee3656f92a012825b5239" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;#io.BytesIO&quot;&gt;&lt;code&gt;BytesIO&lt;/code&gt;&lt;/a&gt;, this is the same as &lt;a href=&quot;#io.BufferedIOBase.readinto&quot;&gt;&lt;code&gt;readinto()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#io.BytesIO&quot;&gt; &lt;code&gt;BytesIO&lt;/code&gt; &lt;/a&gt;、これは同じである&lt;a href=&quot;#io.BufferedIOBase.readinto&quot;&gt; &lt;code&gt;readinto()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cb4f5fa376dc3e2057a73ea4e8efbb45b9541ac5" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;#module-multiprocessing&quot;&gt;&lt;code&gt;multiprocessing&lt;/code&gt;&lt;/a&gt;, processes are spawned by creating a &lt;a href=&quot;#multiprocessing.Process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt; object and then calling its &lt;a href=&quot;#multiprocessing.Process.start&quot;&gt;&lt;code&gt;start()&lt;/code&gt;&lt;/a&gt; method. &lt;a href=&quot;#multiprocessing.Process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt; follows the API of &lt;a href=&quot;threading#threading.Thread&quot;&gt;&lt;code&gt;threading.Thread&lt;/code&gt;&lt;/a&gt;. A trivial example of a multiprocess program is</source>
          <target state="translated">&lt;a href=&quot;#module-multiprocessing&quot;&gt; &lt;code&gt;multiprocessing&lt;/code&gt; &lt;/a&gt;、プロセスが作成によって生成された&lt;a href=&quot;#multiprocessing.Process&quot;&gt; &lt;code&gt;Process&lt;/code&gt; &lt;/a&gt;オブジェクトおよびその呼び出し&lt;a href=&quot;#multiprocessing.Process.start&quot;&gt; &lt;code&gt;start()&lt;/code&gt; &lt;/a&gt;メソッドを。&lt;a href=&quot;#multiprocessing.Process&quot;&gt; &lt;code&gt;Process&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;threading#threading.Thread&quot;&gt; &lt;code&gt;threading.Thread&lt;/code&gt; &lt;/a&gt;のAPIに従います。マルチプロセスプログラムの簡単な例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a41975f414337b4161e766ea1a36bb88654c31c4" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt;, an unstructured header is a run of arbitrary text in the ASCII character set. &lt;a href=&quot;https://tools.ietf.org/html/rfc2047.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 2047&lt;/strong&gt;&lt;/a&gt;, however, has an &lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt; compatible mechanism for encoding non-ASCII text as ASCII characters within a header value. When a &lt;em&gt;value&lt;/em&gt; containing encoded words is passed to the constructor, the &lt;code&gt;UnstructuredHeader&lt;/code&gt; parser converts such encoded words into unicode, following the &lt;a href=&quot;https://tools.ietf.org/html/rfc2047.html&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 2047&lt;/strong&gt;&lt;/a&gt; rules for unstructured text. The parser uses heuristics to attempt to decode certain non-compliant encoded words. Defects are registered in such cases, as well as defects for issues such as invalid characters within the encoded words or the non-encoded text.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt;、構造化されていないヘッダは、ASCII文字セット内の任意のテキストのランです。ただし、&lt;a href=&quot;https://tools.ietf.org/html/rfc2047.html&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;RFC 2047&lt;/strong&gt;&lt;/a&gt;には、非ASCIIテキストをヘッダー値内のASCII文字としてエンコードするための&lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt;互換メカニズムがあります。場合&lt;em&gt;値&lt;/em&gt;符号化された単語を含むが、コンストラクタに渡され、 &lt;code&gt;UnstructuredHeader&lt;/code&gt; のパーサーは、以下の、ユニコードにそのような符号化された単語を変換&lt;a href=&quot;https://tools.ietf.org/html/rfc2047.html&quot; id=&quot;index-6&quot;&gt;&lt;strong&gt;RFC 2047&lt;/strong&gt;&lt;/a&gt;非構造化テキストのためのルール。パーサーはヒューリスティックを使用して、特定の非準拠のエンコードされた単語をデコードしようとします。このような場合は欠陥が登録され、エンコードされた単語内の無効な文字やエンコードされていないテキストなどの問題も登録されます。</target>
        </trans-unit>
        <trans-unit id="6551877af47b9396e87eaa7a777f7c956f3407a3" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;[0, 1]&lt;/code&gt;. Used to disambiguate wall times during a repeated interval. (A repeated interval occurs when clocks are rolled back at the end of daylight saving time or when the UTC offset for the current zone is decreased for political reasons.) The value 0 (1) represents the earlier (later) of the two moments with the same wall time representation.</source>
          <target state="translated">&lt;code&gt;[0, 1]&lt;/code&gt; 。繰り返される間隔の間に壁時間を明確にするために使用されます。（夏時間の終わりにクロックがロールバックされるか、政治的な理由で現在のゾーンのUTCオフセットが減少すると、間隔が繰り返されます。）値0（1）は、同じ実時間表現。</target>
        </trans-unit>
        <trans-unit id="93133f5ae9ab6ab0577f712c1e104727b3ae2cfc" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;range(1000000)&lt;/code&gt;.</source>
          <target state="translated">中 &lt;code&gt;range(1000000)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0618520a9a19fea1f2fc3b1e38952ba554e40a73" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;range(24)&lt;/code&gt;.</source>
          <target state="translated">中 &lt;code&gt;range(24)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6e20d8913c951c136cbfa4ba9fbeb279dcb3126a" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;range(60)&lt;/code&gt;.</source>
          <target state="translated">中 &lt;code&gt;range(60)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="edc259786c7b74fe3206daa43e1739b00d2659a2" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;strftime()&lt;/code&gt;, &lt;code&gt;%Z&lt;/code&gt; is replaced by an empty string if &lt;code&gt;tzname()&lt;/code&gt; returns &lt;code&gt;None&lt;/code&gt;; otherwise &lt;code&gt;%Z&lt;/code&gt; is replaced by the returned value, which must be a string.</source>
          <target state="translated">&lt;code&gt;strftime()&lt;/code&gt; 、 &lt;code&gt;%Z&lt;/code&gt; は場合は、空の文字列に置き換えられ &lt;code&gt;tzname()&lt;/code&gt; 返さない &lt;code&gt;None&lt;/code&gt; 。それ以外の場合、 &lt;code&gt;%Z&lt;/code&gt; は戻り値に置き換えられます。戻り値は文字列である必要があります。</target>
        </trans-unit>
        <trans-unit id="80cddb7b7e3874d06e76f8eb562205fbd3b77d3e" translate="yes" xml:space="preserve">
          <source>In &lt;em&gt;blocking mode&lt;/em&gt;, operations block until complete or the system returns an error (such as connection timed out).</source>
          <target state="translated">で&lt;em&gt;ブロッキングモード&lt;/em&gt;、操作が完了するまでブロックまたはシステムがエラー（接続がタイムアウトなど）を返します。</target>
        </trans-unit>
        <trans-unit id="6d6a9efba04a47d4781b6de1610f6fe37834e4f6" translate="yes" xml:space="preserve">
          <source>In &lt;em&gt;non-blocking mode&lt;/em&gt;, operations fail (with an error that is unfortunately system-dependent) if they cannot be completed immediately: functions from the &lt;a href=&quot;select#module-select&quot;&gt;&lt;code&gt;select&lt;/code&gt;&lt;/a&gt; can be used to know when and whether a socket is available for reading or writing.</source>
          <target state="translated">では&lt;em&gt;非ブロックモード&lt;/em&gt;から機能：彼らはすぐに完了できない場合、操作は（残念ながら、システムに依存するエラーで）失敗&lt;a href=&quot;select#module-select&quot;&gt; &lt;code&gt;select&lt;/code&gt; &lt;/a&gt;ときにソケットが読み取りまたは書き込みのために利用可能であるかどうかを知るために使用することができます。</target>
        </trans-unit>
        <trans-unit id="1de600e7748b1b2c637dacf9c402ecc59c2e3930" translate="yes" xml:space="preserve">
          <source>In &lt;em&gt;timeout mode&lt;/em&gt;, operations fail if they cannot be completed within the timeout specified for the socket (they raise a &lt;a href=&quot;#socket.timeout&quot;&gt;&lt;code&gt;timeout&lt;/code&gt;&lt;/a&gt; exception) or if the system returns an error.</source>
          <target state="translated">で&lt;em&gt;タイムアウトモード&lt;/em&gt;それらはソケット（それらが上げるために指定されたタイムアウト時間内に完了できない場合、操作は失敗&lt;a href=&quot;#socket.timeout&quot;&gt; &lt;code&gt;timeout&lt;/code&gt; &lt;/a&gt;例外）またはシステムがエラーを返す場合。</target>
        </trans-unit>
        <trans-unit id="93e4a4e56d6d1e50756bb9c6e4bc1bc4ccb5eed5" translate="yes" xml:space="preserve">
          <source>In BLAKE2 the salt is processed as a one-time input to the hash function during initialization, rather than as an input to each compression function.</source>
          <target state="translated">BLAKE2では、ソルトは各圧縮関数への入力としてではなく、初期化時にハッシュ関数への1回限りの入力として処理されます。</target>
        </trans-unit>
        <trans-unit id="9c7d0b0868fac88a221721ed400ce1bb944f7db5" translate="yes" xml:space="preserve">
          <source>In Babyl mailboxes, the headers of a message are not stored contiguously with the body of the message. To generate a file-like representation, the headers and body are copied together into an &lt;a href=&quot;io#io.BytesIO&quot;&gt;&lt;code&gt;io.BytesIO&lt;/code&gt;&lt;/a&gt; instance, which has an API identical to that of a file. As a result, the file-like object is truly independent of the underlying mailbox but does not save memory compared to a string representation.</source>
          <target state="translated">Babylメールボックスでは、メッセージのヘッダーはメッセージの本文と隣接して保存されません。ファイルのような表現を生成するには、ヘッダーと本文を一緒に&lt;a href=&quot;io#io.BytesIO&quot;&gt; &lt;code&gt;io.BytesIO&lt;/code&gt; &lt;/a&gt;インスタンスにコピーします。このインスタンスには、ファイルと同じAPIがあります。その結果、ファイルのようなオブジェクトは、基になるメールボックスから完全に独立していますが、文字列表現と比較してメモリを節約しません。</target>
        </trans-unit>
        <trans-unit id="a441fd784df981e42da3513e4f1b407c066fa595" translate="yes" xml:space="preserve">
          <source>In Boolean contexts, a &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; object is always considered to be true.</source>
          <target state="translated">ブール値のコンテキストでは、&lt;a href=&quot;#datetime.time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;オブジェクトは常にtrueと見なされます。</target>
        </trans-unit>
        <trans-unit id="3c9b44f6dcf172af2afd8e8696bebf4c5016d825" translate="yes" xml:space="preserve">
          <source>In Boolean contexts, a &lt;a href=&quot;#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; object is considered to be true if and only if it isn&amp;rsquo;t equal to &lt;code&gt;timedelta(0)&lt;/code&gt;.</source>
          <target state="translated">ブール値のコンテキストでは、&lt;a href=&quot;#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; &lt;/a&gt;オブジェクトは、それが &lt;code&gt;timedelta(0)&lt;/code&gt; と等しくない場合にのみtrueと見なされます。</target>
        </trans-unit>
        <trans-unit id="6f761eb1aa256d436b20321c9c6e424dc4749847" translate="yes" xml:space="preserve">
          <source>In Boolean contexts, all &lt;a href=&quot;#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; objects are considered to be true.</source>
          <target state="translated">ブール値のコンテキストでは、すべての&lt;a href=&quot;#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;オブジェクトがtrueと見なされます。</target>
        </trans-unit>
        <trans-unit id="4133c1559bb69d3748ad119bc549a3b63e788a0f" translate="yes" xml:space="preserve">
          <source>In CPython, generator-based coroutines (generators decorated with &lt;a href=&quot;types#types.coroutine&quot;&gt;&lt;code&gt;types.coroutine()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;asyncio-task#asyncio.coroutine&quot;&gt;&lt;code&gt;asyncio.coroutine()&lt;/code&gt;&lt;/a&gt;) are &lt;em&gt;awaitables&lt;/em&gt;, even though they do not have an &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__await__&quot;&gt;&lt;code&gt;__await__()&lt;/code&gt;&lt;/a&gt; method. Using &lt;code&gt;isinstance(gencoro, Awaitable)&lt;/code&gt; for them will return &lt;code&gt;False&lt;/code&gt;. Use &lt;a href=&quot;inspect#inspect.isawaitable&quot;&gt;&lt;code&gt;inspect.isawaitable()&lt;/code&gt;&lt;/a&gt; to detect them.</source>
          <target state="translated">CPythonでは、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__await__&quot;&gt; &lt;code&gt;__await__()&lt;/code&gt; &lt;/a&gt;メソッドがなくても、ジェネレーターベースのコルーチン（&lt;a href=&quot;types#types.coroutine&quot;&gt; &lt;code&gt;types.coroutine()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;asyncio-task#asyncio.coroutine&quot;&gt; &lt;code&gt;asyncio.coroutine()&lt;/code&gt; で&lt;/a&gt;装飾されたジェネレーター）は&lt;em&gt;awaitables&lt;/em&gt;です。使用 &lt;code&gt;isinstance(gencoro, Awaitable)&lt;/code&gt; 彼らのためにして返します &lt;code&gt;False&lt;/code&gt; 。それらを検出するには、&lt;a href=&quot;inspect#inspect.isawaitable&quot;&gt; &lt;code&gt;inspect.isawaitable()&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="3cae09edf26f6e37b7e750f76e28a3e8c3c44cf6" translate="yes" xml:space="preserve">
          <source>In CPython, generator-based coroutines (generators decorated with &lt;a href=&quot;types#types.coroutine&quot;&gt;&lt;code&gt;types.coroutine()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;asyncio-task#asyncio.coroutine&quot;&gt;&lt;code&gt;asyncio.coroutine()&lt;/code&gt;&lt;/a&gt;) are &lt;em&gt;awaitables&lt;/em&gt;, even though they do not have an &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__await__&quot;&gt;&lt;code&gt;__await__()&lt;/code&gt;&lt;/a&gt; method. Using &lt;code&gt;isinstance(gencoro, Coroutine)&lt;/code&gt; for them will return &lt;code&gt;False&lt;/code&gt;. Use &lt;a href=&quot;inspect#inspect.isawaitable&quot;&gt;&lt;code&gt;inspect.isawaitable()&lt;/code&gt;&lt;/a&gt; to detect them.</source>
          <target state="translated">CPythonでは、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__await__&quot;&gt; &lt;code&gt;__await__()&lt;/code&gt; &lt;/a&gt;メソッドがなくても、ジェネレーターベースのコルーチン（&lt;a href=&quot;types#types.coroutine&quot;&gt; &lt;code&gt;types.coroutine()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;asyncio-task#asyncio.coroutine&quot;&gt; &lt;code&gt;asyncio.coroutine()&lt;/code&gt; で&lt;/a&gt;装飾されたジェネレーター）は&lt;em&gt;awaitables&lt;/em&gt;です。使用 &lt;code&gt;isinstance(gencoro, Coroutine)&lt;/code&gt; 彼らのためにして返します &lt;code&gt;False&lt;/code&gt; 。それらを検出するには、&lt;a href=&quot;inspect#inspect.isawaitable&quot;&gt; &lt;code&gt;inspect.isawaitable()&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="56d54f98bb66071bd6c7b1eeeb243fafda3cb1f7" translate="yes" xml:space="preserve">
          <source>In CPython, generator-based coroutines (generators decorated with &lt;a href=&quot;types#types.coroutine&quot;&gt;&lt;code&gt;types.coroutine()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;asyncio-task#asyncio.coroutine&quot;&gt;&lt;code&gt;asyncio.coroutine()&lt;/code&gt;&lt;/a&gt;) are &lt;em&gt;awaitables&lt;/em&gt;, even though they do not have an &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__await__&quot;&gt;&lt;code&gt;__await__()&lt;/code&gt;&lt;/a&gt; method. Using &lt;code&gt;isinstance(gencoro, Awaitable)&lt;/code&gt; for them will return &lt;code&gt;False&lt;/code&gt;. Use &lt;a href=&quot;inspect#inspect.isawaitable&quot;&gt;&lt;code&gt;inspect.isawaitable()&lt;/code&gt;&lt;/a&gt; to detect them.</source>
          <target state="translated">CPythonとでは、発電機ベースのコルーチン（発電機が飾ら&lt;a href=&quot;types#types.coroutine&quot;&gt; &lt;code&gt;types.coroutine()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;asyncio-task#asyncio.coroutine&quot;&gt; &lt;code&gt;asyncio.coroutine()&lt;/code&gt; &lt;/a&gt;）です&lt;em&gt;awaitables&lt;/em&gt;彼らが持っていないにもかかわらず、&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__await__&quot;&gt; &lt;code&gt;__await__()&lt;/code&gt; &lt;/a&gt;メソッド。使用 &lt;code&gt;isinstance(gencoro, Awaitable)&lt;/code&gt; 彼らのためにして返します &lt;code&gt;False&lt;/code&gt; 。それらを検出するには、&lt;a href=&quot;inspect#inspect.isawaitable&quot;&gt; &lt;code&gt;inspect.isawaitable()&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="9a3453678e2ae192dfd7aeaddc930dd47bdbabb5" translate="yes" xml:space="preserve">
          <source>In CPython, generator-based coroutines (generators decorated with &lt;a href=&quot;types#types.coroutine&quot;&gt;&lt;code&gt;types.coroutine()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;asyncio-task#asyncio.coroutine&quot;&gt;&lt;code&gt;asyncio.coroutine()&lt;/code&gt;&lt;/a&gt;) are &lt;em&gt;awaitables&lt;/em&gt;, even though they do not have an &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__await__&quot;&gt;&lt;code&gt;__await__()&lt;/code&gt;&lt;/a&gt; method. Using &lt;code&gt;isinstance(gencoro, Coroutine)&lt;/code&gt; for them will return &lt;code&gt;False&lt;/code&gt;. Use &lt;a href=&quot;inspect#inspect.isawaitable&quot;&gt;&lt;code&gt;inspect.isawaitable()&lt;/code&gt;&lt;/a&gt; to detect them.</source>
          <target state="translated">CPythonとでは、発電機ベースのコルーチン（発電機が飾ら&lt;a href=&quot;types#types.coroutine&quot;&gt; &lt;code&gt;types.coroutine()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;asyncio-task#asyncio.coroutine&quot;&gt; &lt;code&gt;asyncio.coroutine()&lt;/code&gt; &lt;/a&gt;）です&lt;em&gt;awaitables&lt;/em&gt;彼らが持っていないにもかかわらず、&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__await__&quot;&gt; &lt;code&gt;__await__()&lt;/code&gt; &lt;/a&gt;メソッド。使用 &lt;code&gt;isinstance(gencoro, Coroutine)&lt;/code&gt; 彼らのためにして返します &lt;code&gt;False&lt;/code&gt; 。それらを検出するには、&lt;a href=&quot;inspect#inspect.isawaitable&quot;&gt; &lt;code&gt;inspect.isawaitable()&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="631366628298d4582a6ee037a9362b871c3234a2" translate="yes" xml:space="preserve">
          <source>In Python 2 code the &lt;code&gt;_order_&lt;/code&gt; attribute is necessary as definition order is lost before it can be recorded.</source>
          <target state="translated">Python 2コードでは、記録する前に定義の順序が失われるため、 &lt;code&gt;_order_&lt;/code&gt; 属性が必要です。</target>
        </trans-unit>
        <trans-unit id="3bc7f7458422d2effbdbed743271c2b54fbb7402" translate="yes" xml:space="preserve">
          <source>In Python, all exceptions must be instances of a class that derives from &lt;a href=&quot;#BaseException&quot;&gt;&lt;code&gt;BaseException&lt;/code&gt;&lt;/a&gt;. In a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt; statement with an &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#except&quot;&gt;&lt;code&gt;except&lt;/code&gt;&lt;/a&gt; clause that mentions a particular class, that clause also handles any exception classes derived from that class (but not exception classes from which &lt;em&gt;it&lt;/em&gt; is derived). Two exception classes that are not related via subclassing are never equivalent, even if they have the same name.</source>
          <target state="translated">Pythonでは、すべての例外は&lt;a href=&quot;#BaseException&quot;&gt; &lt;code&gt;BaseException&lt;/code&gt; &lt;/a&gt;から派生するクラスのインスタンスでなければなりません。特定のクラスについて言及する&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#except&quot;&gt; &lt;code&gt;except&lt;/code&gt; &lt;/a&gt;句を含む&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#try&quot;&gt; &lt;code&gt;try&lt;/code&gt; &lt;/a&gt;ステートメントでは、その句はそのクラスから派生した例外クラスも処理します（ただし、&lt;em&gt;それ&lt;/em&gt;が派生した例外クラスは処理しません）。サブクラス化を介して関連付けられていない2つの例外クラスは、たとえ同じ名前であっても、決して同等になることはありません。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="0436c697fe5d187310c263a3a2c639d554d1677c" translate="yes" xml:space="preserve">
          <source>In Python, all exceptions must be instances of a class that derives from &lt;a href=&quot;#BaseException&quot;&gt;&lt;code&gt;BaseException&lt;/code&gt;&lt;/a&gt;. In a &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt; statement with an &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#except&quot;&gt;&lt;code&gt;except&lt;/code&gt;&lt;/a&gt; clause that mentions a particular class, that clause also handles any exception classes derived from that class (but not exception classes from which &lt;em&gt;it&lt;/em&gt; is derived). Two exception classes that are not related via subclassing are never equivalent, even if they have the same name.</source>
          <target state="translated">Pythonでは、すべての例外は&lt;a href=&quot;#BaseException&quot;&gt; &lt;code&gt;BaseException&lt;/code&gt; &lt;/a&gt;から派生したクラスのインスタンスである必要があります。&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#try&quot;&gt; &lt;code&gt;try&lt;/code&gt; &lt;/a&gt;との声明&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#except&quot;&gt; &lt;code&gt;except&lt;/code&gt; &lt;/a&gt;特定のクラスに言及している句、その句も、そのクラス（ここからではなく、例外クラスから派生した例外クラス扱い&lt;em&gt;、それが&lt;/em&gt;派生される）を。サブクラス化によって関連付けられていない2つの例外クラスは、同じ名前であっても同等になることはありません。</target>
        </trans-unit>
        <trans-unit id="c0e22094af023753a3f8645474baf7875adb216c" translate="yes" xml:space="preserve">
          <source>In Python, file names, command line arguments, and environment variables are represented using the string type. On some systems, decoding these strings to and from bytes is necessary before passing them to the operating system. Python uses the file system encoding to perform this conversion (see &lt;a href=&quot;sys#sys.getfilesystemencoding&quot;&gt;&lt;code&gt;sys.getfilesystemencoding()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Pythonでは、ファイル名、コマンドライン引数、および環境変数は文字列型を使用して表されます。一部のシステムでは、これらの文字列をバイトに、またはバイトからデコードしてから、オペレーティングシステムに渡す必要があります。Pythonはファイルシステムエンコーディングを使用してこの変換を実行します（&lt;a href=&quot;sys#sys.getfilesystemencoding&quot;&gt; &lt;code&gt;sys.getfilesystemencoding()&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="4a265e5614bc913aa2b5d3df9ffa283db482f3d1" translate="yes" xml:space="preserve">
          <source>In Python, since there is an interpreter active during execution, the presence of instrumented code is not required in order to do deterministic profiling. Python automatically provides a &lt;em&gt;hook&lt;/em&gt; (optional callback) for each event. In addition, the interpreted nature of Python tends to add so much overhead to execution, that deterministic profiling tends to only add small processing overhead in typical applications. The result is that deterministic profiling is not that expensive, yet provides extensive run time statistics about the execution of a Python program.</source>
          <target state="translated">Pythonでは、実行中にアクティブなインタープリターが存在するため、確定的プロファイリングを行うためにインストルメント済みコードの存在は必要ありません。 Pythonは、各イベントに&lt;em&gt;フック&lt;/em&gt;（オプションのコールバック）を自動的に提供します。さらに、Pythonのインタープリター型の性質は、実行に非常に多くのオーバーヘッドを追加する傾向があり、決定論的プロファイリングは、一般的なアプリケーションでわずかな処理オーバーヘッドのみを追加する傾向があります。その結果、確定的プロファイリングはそれほど高価ではありませんが、Pythonプログラムの実行に関する広範なランタイム統計を提供します。</target>
        </trans-unit>
        <trans-unit id="5d2c2a794123158f78bff5ac03b8fc94de396956" translate="yes" xml:space="preserve">
          <source>In Shell, the accessible functions depends on what modules have been imported into the user process, including those imported by Idle itself, and which definitions have been run, all since the last restart.</source>
          <target state="translated">シェルでは、アクセス可能な関数は、最後の再起動以降、Idle 自身がインポートしたものも含めて、ユーザプロセスにインポートされたモジュールや、実行された定義に依存します。</target>
        </trans-unit>
        <trans-unit id="07ba9e60148d18758b640f6ed814832833d34be7" translate="yes" xml:space="preserve">
          <source>In Tk, there is a utility command, &lt;code&gt;wm&lt;/code&gt;, for interacting with the window manager. Options to the &lt;code&gt;wm&lt;/code&gt; command allow you to control things like titles, placement, icon bitmaps, and the like. In &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt;, these commands have been implemented as methods on the &lt;code&gt;Wm&lt;/code&gt; class. Toplevel widgets are subclassed from the &lt;code&gt;Wm&lt;/code&gt; class, and so can call the &lt;code&gt;Wm&lt;/code&gt; methods directly.</source>
          <target state="translated">Tkには、ウィンドウマネージャーと対話するためのユーティリティコマンド &lt;code&gt;wm&lt;/code&gt; があります。 &lt;code&gt;wm&lt;/code&gt; コマンドのオプションを使用すると、タイトル、配置、アイコンビットマップなどを制御できます。では&lt;a href=&quot;#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; &lt;/a&gt;、これらのコマンドは、上のメソッドとして実装されている &lt;code&gt;Wm&lt;/code&gt; クラス。トップレベルのウィジェットは &lt;code&gt;Wm&lt;/code&gt; クラスからサブクラス化されているため、 &lt;code&gt;Wm&lt;/code&gt; メソッドを直接呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="e4bf65333e7dc9c2da7ca99bbab91025e00bf167" translate="yes" xml:space="preserve">
          <source>In Tk, to perform an action on a widget, use the widget name as a command, and follow it with an action name, possibly with arguments (options). In Tkinter, you call methods on the class instance to invoke actions on the widget. The actions (methods) that a given widget can perform are listed in &lt;code&gt;tkinter/__init__.py&lt;/code&gt;.</source>
          <target state="translated">Tkでは、ウィジェットでアクションを実行するには、ウィジェット名をコマンドとして使用し、その後にアクション名、おそらく引数（オプション）を付けます。Tkinterでは、クラスインスタンスのメソッドを呼び出して、ウィジェットのアクションを呼び出します。特定のウィジェットが実行できるアクション（メソッド）は、 &lt;code&gt;tkinter/__init__.py&lt;/code&gt; にリストされています。</target>
        </trans-unit>
        <trans-unit id="62b35e4b6aee318c8476142aafce45b3919ab5f7" translate="yes" xml:space="preserve">
          <source>In a mailcap file, the &amp;ldquo;test&amp;rdquo; field can optionally be specified to test some external condition (such as the machine architecture, or the window system in use) to determine whether or not the mailcap line applies. &lt;a href=&quot;#mailcap.findmatch&quot;&gt;&lt;code&gt;findmatch()&lt;/code&gt;&lt;/a&gt; will automatically check such conditions and skip the entry if the check fails.</source>
          <target state="translated">mailcapファイルでは、「test」フィールドをオプションで指定して、いくつかの外部条件（マシンアーキテクチャ、使用中のウィンドウシステムなど）をテストし、mailcap行が適用されるかどうかを判断できます。&lt;a href=&quot;#mailcap.findmatch&quot;&gt; &lt;code&gt;findmatch()&lt;/code&gt; &lt;/a&gt;はそのような条件を自動的にチェックし、チェックが失敗した場合はエントリをスキップします。</target>
        </trans-unit>
        <trans-unit id="dff27fd73d9cbfd83fc3861e07e29a5ce9fa9b2c" translate="yes" xml:space="preserve">
          <source>In a model generated from bytes, any header values that (in contravention of the RFCs) contain non-ASCII bytes will, when retrieved through this interface, be represented as &lt;a href=&quot;email.header#email.header.Header&quot;&gt;&lt;code&gt;Header&lt;/code&gt;&lt;/a&gt; objects with a charset of &lt;code&gt;unknown-8bit&lt;/code&gt;.</source>
          <target state="translated">バイトから生成されたモデルでは、（RFCに違反して）非ASCIIバイトを含むヘッダー値は、このインターフェイスを介して取得されると、 &lt;code&gt;unknown-8bit&lt;/code&gt; 文字セットを持つ&lt;a href=&quot;email.header#email.header.Header&quot;&gt; &lt;code&gt;Header&lt;/code&gt; &lt;/a&gt;オブジェクトとして表されます。</target>
        </trans-unit>
        <trans-unit id="bcdf824d25e196bd0265599e5fc259b9d7a7343d" translate="yes" xml:space="preserve">
          <source>In a multithreaded process, use caution to avoid leaking handles that are marked inheritable when combining this feature with concurrent calls to other process creation functions that inherit all handles such as &lt;a href=&quot;os#os.system&quot;&gt;&lt;code&gt;os.system()&lt;/code&gt;&lt;/a&gt;. This also applies to standard handle redirection, which temporarily creates inheritable handles.</source>
          <target state="translated">マルチスレッドプロセスでは、この機能を&lt;a href=&quot;os#os.system&quot;&gt; &lt;code&gt;os.system()&lt;/code&gt; &lt;/a&gt;などのすべてのハンドルを継承する他のプロセス作成関数への同時呼び出しと組み合わせるときに、継承可能とマークされたハンドルがリークしないように注意してください。これは、継承可能なハンドルを一時的に作成する標準のハンドルリダイレクトにも適用されます。</target>
        </trans-unit>
        <trans-unit id="29450dfd4c15b79ba3d022659c17515b216a2723" translate="yes" xml:space="preserve">
          <source>In a script, &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt; will typically be called with no arguments, and the &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; will automatically determine the command-line arguments from &lt;a href=&quot;sys#sys.argv&quot;&gt;&lt;code&gt;sys.argv&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">スクリプトでは、通常、&lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt; &lt;code&gt;parse_args()&lt;/code&gt; &lt;/a&gt;は引数なしで呼び出され、&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;sys#sys.argv&quot;&gt; &lt;code&gt;sys.argv&lt;/code&gt; &lt;/a&gt;からコマンドライン引数を自動的に決定します。</target>
        </trans-unit>
        <trans-unit id="b3bcc045679addb686c190d0e988b9e965c3a92d" translate="yes" xml:space="preserve">
          <source>In a script, typical usage is something like this:</source>
          <target state="translated">スクリプトでは、典型的な使用法は次のようなものです。</target>
        </trans-unit>
        <trans-unit id="e2b64a4d09137b4b9dd59b9330a2c7d91bb6320b" translate="yes" xml:space="preserve">
          <source>In a word, heaps are useful memory structures to know. I use them in a few applications, and I think it is good to keep a &amp;lsquo;heap&amp;rsquo; module around. :-)</source>
          <target state="translated">つまり、ヒープは知っておくと便利なメモリ構造です。私はいくつかのアプリケーションでそれらを使用しており、「ヒープ」モジュールを維持することは良いことだと思います。:-)</target>
        </trans-unit>
        <trans-unit id="9f2f0f5240c4f2006c555b058d4decb08fc35f55" translate="yes" xml:space="preserve">
          <source>In accordance with the standard, the &lt;a href=&quot;#module-decimal&quot;&gt;&lt;code&gt;decimal&lt;/code&gt;&lt;/a&gt; module provides two ready to use standard contexts, &lt;a href=&quot;#decimal.BasicContext&quot;&gt;&lt;code&gt;BasicContext&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#decimal.ExtendedContext&quot;&gt;&lt;code&gt;ExtendedContext&lt;/code&gt;&lt;/a&gt;. The former is especially useful for debugging because many of the traps are enabled:</source>
          <target state="translated">標準に従って、&lt;a href=&quot;#module-decimal&quot;&gt; &lt;code&gt;decimal&lt;/code&gt; &lt;/a&gt;モジュールは、すぐに使用できる2つの標準コンテキスト&lt;a href=&quot;#decimal.BasicContext&quot;&gt; &lt;code&gt;BasicContext&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#decimal.ExtendedContext&quot;&gt; &lt;code&gt;ExtendedContext&lt;/code&gt; を提供し&lt;/a&gt;ます。前者は、多くのトラップが有効になっているため、デバッグに特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="d46ae7189ab259286c168e0b80b2fd3235fd9aed" translate="yes" xml:space="preserve">
          <source>In addition to &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt;, &lt;code&gt;'base64_codec'&lt;/code&gt; also accepts ASCII-only instances of &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; for decoding</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクトに&lt;/a&gt;加えて、 &lt;code&gt;'base64_codec'&lt;/code&gt; は&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; の&lt;/a&gt; ASCIIのみのインスタンスもデコードに受け入れます</target>
        </trans-unit>
        <trans-unit id="f45bed92bb166b8633bf88c26503575048712087" translate="yes" xml:space="preserve">
          <source>In addition to &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt;, &lt;code&gt;'base64_codec'&lt;/code&gt; also accepts ASCII-only instances of &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; for decoding</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクトに&lt;/a&gt;加えて、 &lt;code&gt;'base64_codec'&lt;/code&gt; はデコード用にASCIIのみの&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; の&lt;/a&gt;インスタンスも受け入れます</target>
        </trans-unit>
        <trans-unit id="a7b20715c6c20497ac319a68d7016a8f75ae620e" translate="yes" xml:space="preserve">
          <source>In addition to being more CPU-intensive, compression with higher presets also requires much more memory (and produces output that needs more memory to decompress). With preset &lt;code&gt;9&lt;/code&gt; for example, the overhead for an &lt;a href=&quot;#lzma.LZMACompressor&quot;&gt;&lt;code&gt;LZMACompressor&lt;/code&gt;&lt;/a&gt; object can be as high as 800 MiB. For this reason, it is generally best to stick with the default preset.</source>
          <target state="translated">CPUを集中的に使用することに加えて、より高いプリセットを使用した圧縮では、さらに多くのメモリが必要になります（解凍するためにより多くのメモリを必要とする出力が生成されます）。たとえば、プリセット &lt;code&gt;9&lt;/code&gt; の場合、&lt;a href=&quot;#lzma.LZMACompressor&quot;&gt; &lt;code&gt;LZMACompressor&lt;/code&gt; &lt;/a&gt;オブジェクトのオーバーヘッドは800 MiBにもなる可能性があります。このため、通常はデフォルトのプリセットを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="62f40ff2f60f38cdc6a391277467f1c0b2fc7189" translate="yes" xml:space="preserve">
          <source>In addition to enabling the debug mode, consider also:</source>
          <target state="translated">デバッグモードを有効にすることに加えて、デバッグモードを有効にすることも検討してみてください。</target>
        </trans-unit>
        <trans-unit id="9b6341c25f3405f85d37bcad24b0b303303d029c" translate="yes" xml:space="preserve">
          <source>In addition to implementing the methods above, implementations of the &lt;a href=&quot;#http.cookiejar.CookiePolicy&quot;&gt;&lt;code&gt;CookiePolicy&lt;/code&gt;&lt;/a&gt; interface must also supply the following attributes, indicating which protocols should be used, and how. All of these attributes may be assigned to.</source>
          <target state="translated">上記のメソッドの実装に加えて、&lt;a href=&quot;#http.cookiejar.CookiePolicy&quot;&gt; &lt;code&gt;CookiePolicy&lt;/code&gt; &lt;/a&gt;インターフェースの実装は、使用するプロトコルとその方法を示す次の属性も提供する必要があります。これらの属性はすべて割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="0b8600bc88afada2a15d07e3d3b860294a40b1a7" translate="yes" xml:space="preserve">
          <source>In addition to many functions described in the &lt;a href=&quot;os#module-os&quot;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt; module documentation, &lt;a href=&quot;#module-posix&quot;&gt;&lt;code&gt;posix&lt;/code&gt;&lt;/a&gt; defines the following data item:</source>
          <target state="translated">&lt;a href=&quot;os#module-os&quot;&gt; &lt;code&gt;os&lt;/code&gt; &lt;/a&gt;モジュールのドキュメントで説明されている多くの関数に加えて、&lt;a href=&quot;#module-posix&quot;&gt; &lt;code&gt;posix&lt;/code&gt; &lt;/a&gt;は次のデータ項目を定義します：</target>
        </trans-unit>
        <trans-unit id="ea70a6e7df22f6334f5444417337936e1629f2a1" translate="yes" xml:space="preserve">
          <source>In addition to method lookups, &lt;a href=&quot;#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; also works for attribute lookups. One possible use case for this is calling &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-descriptor&quot;&gt;descriptors&lt;/a&gt; in a parent or sibling class.</source>
          <target state="translated">メソッド検索に加えて、&lt;a href=&quot;#super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt;は属性検索にも機能します。この使用例の1つは、親クラスまたは兄弟クラスの&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-descriptor&quot;&gt;記述子&lt;/a&gt;を呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="a1965ac98680dc2ab968a88603f1f60f2040d74b" translate="yes" xml:space="preserve">
          <source>In addition to method lookups, &lt;a href=&quot;#super&quot;&gt;&lt;code&gt;super()&lt;/code&gt;&lt;/a&gt; also works for attribute lookups. One possible use case for this is calling &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-descriptor&quot;&gt;descriptors&lt;/a&gt; in a parent or sibling class.</source>
          <target state="translated">メソッドルックアップに加えて、&lt;a href=&quot;#super&quot;&gt; &lt;code&gt;super()&lt;/code&gt; &lt;/a&gt;は属性ルックアップでも機能します。これの考えられるユースケースの1つは、親クラスまたは兄弟クラスで&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-descriptor&quot;&gt;記述子&lt;/a&gt;を呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="dcad6a5eb6d0ad37696a20f7d2411fda996f3b45" translate="yes" xml:space="preserve">
          <source>In addition to size-limiting tools, the module also provides a decorator for detecting recursive calls to &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__repr__&quot;&gt;&lt;code&gt;__repr__()&lt;/code&gt;&lt;/a&gt; and substituting a placeholder string instead.</source>
          <target state="translated">サイズ制限ツールに加えて、モジュールは&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__repr__&quot;&gt; &lt;code&gt;__repr__()&lt;/code&gt; &lt;/a&gt;への再帰呼び出しを検出し、代わりにプレースホルダー文字列を置き換えるためのデコレーターも提供します。</target>
        </trans-unit>
        <trans-unit id="e17c10a55d72817f47e5bcb96cd1072311145fea" translate="yes" xml:space="preserve">
          <source>In addition to size-limiting tools, the module also provides a decorator for detecting recursive calls to &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__repr__&quot;&gt;&lt;code&gt;__repr__()&lt;/code&gt;&lt;/a&gt; and substituting a placeholder string instead.</source>
          <target state="translated">サイズ制限ツールに加えて、このモジュールは、&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__repr__&quot;&gt; &lt;code&gt;__repr__()&lt;/code&gt; &lt;/a&gt;への再帰呼び出しを検出し、代わりにプレースホルダー文字列を置き換えるためのデコレーターも提供します。</target>
        </trans-unit>
        <trans-unit id="8d830c6765c9dc0300fe6b5cbc2b3e8460866e69" translate="yes" xml:space="preserve">
          <source>In addition to supporting the methods and operations of mappings, &lt;a href=&quot;#collections.UserDict&quot;&gt;&lt;code&gt;UserDict&lt;/code&gt;&lt;/a&gt; instances provide the following attribute:</source>
          <target state="translated">マッピングのメソッドと操作をサポートすることに加えて、&lt;a href=&quot;#collections.UserDict&quot;&gt; &lt;code&gt;UserDict&lt;/code&gt; &lt;/a&gt;インスタンスは次の属性を提供します。</target>
        </trans-unit>
        <trans-unit id="a8807f211b2460760255a1709766f0a3137c6dab" translate="yes" xml:space="preserve">
          <source>In addition to supporting the methods and operations of mutable sequences, &lt;a href=&quot;#collections.UserList&quot;&gt;&lt;code&gt;UserList&lt;/code&gt;&lt;/a&gt; instances provide the following attribute:</source>
          <target state="translated">可変シーケンスのメソッドと操作をサポートすることに加えて、&lt;a href=&quot;#collections.UserList&quot;&gt; &lt;code&gt;UserList&lt;/code&gt; &lt;/a&gt;インスタンスは次の属性を提供します。</target>
        </trans-unit>
        <trans-unit id="04aa2e8b62d41221e69b20a54dc36f3e6372ea8e" translate="yes" xml:space="preserve">
          <source>In addition to supporting the methods and operations of strings, &lt;a href=&quot;#collections.UserString&quot;&gt;&lt;code&gt;UserString&lt;/code&gt;&lt;/a&gt; instances provide the following attribute:</source>
          <target state="translated">文字列のメソッドと操作をサポートすることに加えて、&lt;a href=&quot;#collections.UserString&quot;&gt; &lt;code&gt;UserString&lt;/code&gt; &lt;/a&gt;インスタンスは次の属性を提供します。</target>
        </trans-unit>
        <trans-unit id="2cf43345efe70766c6640171cc92f01b4817ca97" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;a href=&quot;threading#threading.Thread&quot;&gt;&lt;code&gt;threading.Thread&lt;/code&gt;&lt;/a&gt; API, &lt;a href=&quot;#multiprocessing.Process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt; objects also support the following attributes and methods:</source>
          <target state="translated">&lt;a href=&quot;threading#threading.Thread&quot;&gt; &lt;code&gt;threading.Thread&lt;/code&gt; &lt;/a&gt; APIに加えて、&lt;a href=&quot;#multiprocessing.Process&quot;&gt; &lt;code&gt;Process&lt;/code&gt; &lt;/a&gt;オブジェクトは次の属性とメソッドもサポートします。</target>
        </trans-unit>
        <trans-unit id="3537cce0770809bd80cddc6370639f4675c1c292" translate="yes" xml:space="preserve">
          <source>In addition to the Tk interface module, &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; includes a number of Python modules, &lt;code&gt;tkinter.constants&lt;/code&gt; being one of the most important. Importing &lt;a href=&quot;#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; will automatically import &lt;code&gt;tkinter.constants&lt;/code&gt;, so, usually, to use Tkinter all you need is a simple import statement:</source>
          <target state="translated">Tkのインタフェースモジュールに加えて、&lt;a href=&quot;#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; &lt;/a&gt;、Pythonモジュールの数を含む &lt;code&gt;tkinter.constants&lt;/code&gt; は、最も重要なものの一つです。インポート&lt;a href=&quot;#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; &lt;/a&gt;自動的にインポートされます &lt;code&gt;tkinter.constants&lt;/code&gt; は、そう、通常、あなたが必要なのは、単純なimport文でのTkinterを使用するには：</target>
        </trans-unit>
        <trans-unit id="9690476654ee5a2736c4ceafa04629e93b08060a" translate="yes" xml:space="preserve">
          <source>In addition to the above methods, the &lt;a href=&quot;#codecs.StreamReader&quot;&gt;&lt;code&gt;StreamReader&lt;/code&gt;&lt;/a&gt; must also inherit all other methods and attributes from the underlying stream.</source>
          <target state="translated">上記のメソッドに加えて、&lt;a href=&quot;#codecs.StreamReader&quot;&gt; &lt;code&gt;StreamReader&lt;/code&gt; &lt;/a&gt;は他のすべてのメソッドと属性を基になるストリームから継承する必要があります。</target>
        </trans-unit>
        <trans-unit id="222314dc286fea8c88b16cc332dcefcec6c56990" translate="yes" xml:space="preserve">
          <source>In addition to the above methods, the &lt;a href=&quot;#codecs.StreamWriter&quot;&gt;&lt;code&gt;StreamWriter&lt;/code&gt;&lt;/a&gt; must also inherit all other methods and attributes from the underlying stream.</source>
          <target state="translated">上記のメソッドに加えて、&lt;a href=&quot;#codecs.StreamWriter&quot;&gt; &lt;code&gt;StreamWriter&lt;/code&gt; &lt;/a&gt;は、基になるストリームから他のすべてのメソッドと属性も継承する必要があります。</target>
        </trans-unit>
        <trans-unit id="1720f463c1df0d0fe9311a603541746810b18c89" translate="yes" xml:space="preserve">
          <source>In addition to the above presentation types, integers can be formatted with the floating point presentation types listed below (except &lt;code&gt;'n'&lt;/code&gt; and &lt;code&gt;None&lt;/code&gt;). When doing so, &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float()&lt;/code&gt;&lt;/a&gt; is used to convert the integer to a floating point number before formatting.</source>
          <target state="translated">上記の表示タイプに加えて、整数は、以下にリストされている浮動小数点表示タイプでフォーマットできます（ &lt;code&gt;'n'&lt;/code&gt; および &lt;code&gt;None&lt;/code&gt; を除く）。その際、&lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float()&lt;/code&gt; &lt;/a&gt;を使用して、フォーマットする前に整数を浮動小数点数に変換します。</target>
        </trans-unit>
        <trans-unit id="cfa4995b269e79140bbd715d66781cc2d6ced577" translate="yes" xml:space="preserve">
          <source>In addition to the above, &lt;a href=&quot;#logging.LoggerAdapter&quot;&gt;&lt;code&gt;LoggerAdapter&lt;/code&gt;&lt;/a&gt; supports the following methods of &lt;a href=&quot;#logging.Logger&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt;: &lt;a href=&quot;#logging.Logger.debug&quot;&gt;&lt;code&gt;debug()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.info&quot;&gt;&lt;code&gt;info()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.warning&quot;&gt;&lt;code&gt;warning()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.error&quot;&gt;&lt;code&gt;error()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.exception&quot;&gt;&lt;code&gt;exception()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.critical&quot;&gt;&lt;code&gt;critical()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.log&quot;&gt;&lt;code&gt;log()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.isEnabledFor&quot;&gt;&lt;code&gt;isEnabledFor()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.getEffectiveLevel&quot;&gt;&lt;code&gt;getEffectiveLevel()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#logging.Logger.setLevel&quot;&gt;&lt;code&gt;setLevel()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#logging.Logger.hasHandlers&quot;&gt;&lt;code&gt;hasHandlers()&lt;/code&gt;&lt;/a&gt;. These methods have the same signatures as their counterparts in &lt;a href=&quot;#logging.Logger&quot;&gt;&lt;code&gt;Logger&lt;/code&gt;&lt;/a&gt;, so you can use the two types of instances interchangeably.</source>
          <target state="translated">上記に加えて、&lt;a href=&quot;#logging.LoggerAdapter&quot;&gt; &lt;code&gt;LoggerAdapter&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;#logging.Logger&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; &lt;/a&gt;の以下のメソッドをサポートします：&lt;a href=&quot;#logging.Logger.debug&quot;&gt; &lt;code&gt;debug()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#logging.Logger.info&quot;&gt; &lt;code&gt;info()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#logging.Logger.warning&quot;&gt; &lt;code&gt;warning()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#logging.Logger.error&quot;&gt; &lt;code&gt;error()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#logging.Logger.exception&quot;&gt; &lt;code&gt;exception()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#logging.Logger.critical&quot;&gt; &lt;code&gt;critical()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#logging.Logger.log&quot;&gt; &lt;code&gt;log()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#logging.Logger.isEnabledFor&quot;&gt; &lt;code&gt;isEnabledFor()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#logging.Logger.getEffectiveLevel&quot;&gt; &lt;code&gt;getEffectiveLevel()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#logging.Logger.setLevel&quot;&gt; &lt;code&gt;setLevel()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#logging.Logger.hasHandlers&quot;&gt; &lt;code&gt;hasHandlers()&lt;/code&gt; &lt;/a&gt;。これらのメソッドの署名は&lt;a href=&quot;#logging.Logger&quot;&gt; &lt;code&gt;Logger&lt;/code&gt; の&lt;/a&gt;対応するメソッドと同じであるため、2つのタイプのインスタンスを交換して使用できます。</target>
        </trans-unit>
        <trans-unit id="3d50c1e6c07de1acc4db99246c84c882aabeeb1c" translate="yes" xml:space="preserve">
          <source>In addition to the above, deques support iteration, pickling, &lt;code&gt;len(d)&lt;/code&gt;, &lt;code&gt;reversed(d)&lt;/code&gt;, &lt;code&gt;copy.copy(d)&lt;/code&gt;, &lt;code&gt;copy.deepcopy(d)&lt;/code&gt;, membership testing with the &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator, and subscript references such as &lt;code&gt;d[0]&lt;/code&gt; to access the first element. Indexed access is O(1) at both ends but slows to O(n) in the middle. For fast random access, use lists instead.</source>
          <target state="translated">上記に加えて、dequeは反復、ピクルリング、 &lt;code&gt;len(d)&lt;/code&gt; 、 &lt;code&gt;reversed(d)&lt;/code&gt; 、 &lt;code&gt;copy.copy(d)&lt;/code&gt; 、 &lt;code&gt;copy.deepcopy(d)&lt;/code&gt; 、&lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt;演算子を使用したメンバーシップテスト、および &lt;code&gt;d[0]&lt;/code&gt; などの添え字参照をサポートします0]は、最初の要素にアクセスします。インデックス付きアクセスは両端でO（1）ですが、途中でO（n）に遅くなります。高速ランダムアクセスの場合は、代わりにリストを使用してください。</target>
        </trans-unit>
        <trans-unit id="ce85ce1fe4acf8b50a9a8f4381ff0d9e65beb534" translate="yes" xml:space="preserve">
          <source>In addition to the above, deques support iteration, pickling, &lt;code&gt;len(d)&lt;/code&gt;, &lt;code&gt;reversed(d)&lt;/code&gt;, &lt;code&gt;copy.copy(d)&lt;/code&gt;, &lt;code&gt;copy.deepcopy(d)&lt;/code&gt;, membership testing with the &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt; operator, and subscript references such as &lt;code&gt;d[0]&lt;/code&gt; to access the first element. Indexed access is O(1) at both ends but slows to O(n) in the middle. For fast random access, use lists instead.</source>
          <target state="translated">上記に加えて、両端キューは、反復、pickle化、 &lt;code&gt;len(d)&lt;/code&gt; 、 &lt;code&gt;reversed(d)&lt;/code&gt; 、 &lt;code&gt;copy.copy(d)&lt;/code&gt; 、 &lt;code&gt;copy.deepcopy(d)&lt;/code&gt; 、&lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt;演算子を使用したメンバーシップテスト、および &lt;code&gt;d[0]&lt;/code&gt; などの添え字参照をサポートします。 0]最初の要素にアクセスします。インデックス付きアクセスは両端でO（1）ですが、途中でO（n）に遅くなります。高速ランダムアクセスの場合は、代わりにリストを使用してください。</target>
        </trans-unit>
        <trans-unit id="ebaf021a38f23d1b3be305231ce1cfa6bc43bf01" translate="yes" xml:space="preserve">
          <source>In addition to the attributes and methods from &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#io.RawIOBase&quot;&gt;&lt;code&gt;RawIOBase&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#io.FileIO&quot;&gt;&lt;code&gt;FileIO&lt;/code&gt;&lt;/a&gt; provides the following data attributes:</source>
          <target state="translated">&lt;a href=&quot;#io.IOBase&quot;&gt; &lt;code&gt;IOBase&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#io.RawIOBase&quot;&gt; &lt;code&gt;RawIOBase&lt;/code&gt; &lt;/a&gt;の属性とメソッドに加えて、&lt;a href=&quot;#io.FileIO&quot;&gt; &lt;code&gt;FileIO&lt;/code&gt; &lt;/a&gt;は次のデータ属性を提供します。</target>
        </trans-unit>
        <trans-unit id="14586c995a780d78561f97624099b8e4ec9b4105" translate="yes" xml:space="preserve">
          <source>In addition to the attributes and methods from &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#io.RawIOBase&quot;&gt;&lt;code&gt;RawIOBase&lt;/code&gt;&lt;/a&gt; provides the following methods:</source>
          <target state="translated">&lt;a href=&quot;#io.IOBase&quot;&gt; &lt;code&gt;IOBase&lt;/code&gt; の&lt;/a&gt;属性とメソッドに加えて、&lt;a href=&quot;#io.RawIOBase&quot;&gt; &lt;code&gt;RawIOBase&lt;/code&gt; &lt;/a&gt;は次のメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="52fd5a33b320649b6f1060489177810635c6ea92" translate="yes" xml:space="preserve">
          <source>In addition to the classes described above, there are a number of module-level functions.</source>
          <target state="translated">上記のクラスに加えて、モジュールレベルの関数がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="c1112b3c989ed862bdeb0f82d3c1bc4efa761003" translate="yes" xml:space="preserve">
          <source>In addition to the dictionary-like methods, &lt;code&gt;gdbm&lt;/code&gt; objects have the following methods:</source>
          <target state="translated">辞書のようなメソッドに加えて、 &lt;code&gt;gdbm&lt;/code&gt; オブジェクトには次のメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="6226060e492ea216f0e7f78ce7856fca0eebffd1" translate="yes" xml:space="preserve">
          <source>In addition to the dictionary-like methods, &lt;code&gt;ndbm&lt;/code&gt; objects provide the following method:</source>
          <target state="translated">辞書のようなメソッドに加えて、 &lt;code&gt;ndbm&lt;/code&gt; オブジェクトは次のメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="cea61bcebf3b4dd67f209d89e9e334cbef2a059e" translate="yes" xml:space="preserve">
          <source>In addition to the environment functions above, the &lt;a href=&quot;#module-wsgiref.util&quot;&gt;&lt;code&gt;wsgiref.util&lt;/code&gt;&lt;/a&gt; module also provides these miscellaneous utilities:</source>
          <target state="translated">上記の環境関数に加えて、&lt;a href=&quot;#module-wsgiref.util&quot;&gt; &lt;code&gt;wsgiref.util&lt;/code&gt; &lt;/a&gt;モジュールは以下の雑多なユーティリティも提供します：</target>
        </trans-unit>
        <trans-unit id="858dce34107f4186993a5996db613388f2631800" translate="yes" xml:space="preserve">
          <source>In addition to the examples below, more examples are given in &lt;a href=&quot;https://docs.python.org/3.8/howto/urllib2.html#urllib-howto&quot;&gt;HOWTO Fetch Internet Resources Using The urllib Package&lt;/a&gt;.</source>
          <target state="translated">以下の例に加えて、より多くの例が&lt;a href=&quot;https://docs.python.org/3.8/howto/urllib2.html#urllib-howto&quot;&gt;urllibパッケージを使用&lt;/a&gt;したHOWTO Fetch Internet Resourcesで提供されています。</target>
        </trans-unit>
        <trans-unit id="c5073ea358d6afe8999722a058dc8df468ab48cd" translate="yes" xml:space="preserve">
          <source>In addition to the examples below, more examples are given in &lt;a href=&quot;https://docs.python.org/3.9/howto/urllib2.html#urllib-howto&quot;&gt;HOWTO Fetch Internet Resources Using The urllib Package&lt;/a&gt;.</source>
          <target state="translated">以下の例に加えて、&lt;a href=&quot;https://docs.python.org/3.9/howto/urllib2.html#urllib-howto&quot;&gt;urllibパッケージを使用してインターネットリソースを取得&lt;/a&gt;する方法に、さらに多くの例が示されています。</target>
        </trans-unit>
        <trans-unit id="b096e1520c7229739493907c163d5aa90e2c7fd3" translate="yes" xml:space="preserve">
          <source>In addition to the features required to implement the &lt;a href=&quot;#http.cookiejar.CookiePolicy&quot;&gt;&lt;code&gt;CookiePolicy&lt;/code&gt;&lt;/a&gt; interface, this class allows you to block and allow domains from setting and receiving cookies. There are also some strictness switches that allow you to tighten up the rather loose Netscape protocol rules a little bit (at the cost of blocking some benign cookies).</source>
          <target state="translated">&lt;a href=&quot;#http.cookiejar.CookiePolicy&quot;&gt; &lt;code&gt;CookiePolicy&lt;/code&gt; &lt;/a&gt;インターフェースの実装に必要な機能に加えて、このクラスを使用すると、ドメインがCookieを設定および受信することをブロックおよび許可できます。多少緩いNetscapeプロトコルルールを少し厳しくできる（いくつかの無害なCookieをブロックする代わりに）厳密性スイッチもあります。</target>
        </trans-unit>
        <trans-unit id="1dc8d82427b096c43fc2e7d5213bd591f0d85590" translate="yes" xml:space="preserve">
          <source>In addition to the literal forms, bytes objects can be created in a number of other ways:</source>
          <target state="translated">リテラル形式に加えて、バイトオブジェクトは他の多くの方法で作成することができます。</target>
        </trans-unit>
        <trans-unit id="c64e42d0dab883c69e970748044e9e77b97cb7a8" translate="yes" xml:space="preserve">
          <source>In addition to the methods inherited from tuples, named tuples support three additional methods and two attributes. To prevent conflicts with field names, the method and attribute names start with an underscore.</source>
          <target state="translated">タプルから継承されるメソッドに加えて、名前付きタプルは3つのメソッドと2つの属性をサポートしています。フィールド名との競合を防ぐため、メソッド名と属性名はアンダースコアで始まります。</target>
        </trans-unit>
        <trans-unit id="e2f6ddf1bf12cf34152fec328d39c9d8ce0a989d" translate="yes" xml:space="preserve">
          <source>In addition to the methods provided by the &lt;a href=&quot;collections.abc#collections.abc.MutableMapping&quot;&gt;&lt;code&gt;collections.abc.MutableMapping&lt;/code&gt;&lt;/a&gt; class, &lt;code&gt;dumbdbm&lt;/code&gt; objects provide the following methods:</source>
          <target state="translated">&lt;a href=&quot;collections.abc#collections.abc.MutableMapping&quot;&gt; &lt;code&gt;collections.abc.MutableMapping&lt;/code&gt; &lt;/a&gt;クラスによって提供されるメソッドに加えて、 &lt;code&gt;dumbdbm&lt;/code&gt; オブジェクトは次のメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="49c9b324d276aba55bfa28551beee12479bf0531" translate="yes" xml:space="preserve">
          <source>In addition to the operations listed above, &lt;a href=&quot;#datetime.timedelta&quot;&gt;&lt;code&gt;timedelta&lt;/code&gt;&lt;/a&gt; objects support certain additions and subtractions with &lt;a href=&quot;#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; objects (see below).</source>
          <target state="translated">上記の操作に加えて、&lt;a href=&quot;#datetime.timedelta&quot;&gt; &lt;code&gt;timedelta&lt;/code&gt; &lt;/a&gt;オブジェクトは、&lt;a href=&quot;#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;オブジェクトを使用した特定の加算および減算をサポートしています（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="8c4c56f4ca00cb6b6be40eba948fd85089f6ade4" translate="yes" xml:space="preserve">
          <source>In addition to the settable attributes listed above that apply to all policies, this policy adds the following additional attributes:</source>
          <target state="translated">すべてのポリシーに適用される上記の設定可能な属性に加えて、このポリシーでは以下の属性が追加されます。</target>
        </trans-unit>
        <trans-unit id="7d6fe1a1b1f7fcd5eef30c9780f9e8758b294753" translate="yes" xml:space="preserve">
          <source>In addition to the standard library, there is a growing collection of several thousand components (from individual programs and modules to packages and entire application development frameworks), available from the &lt;a href=&quot;https://pypi.org&quot;&gt;Python Package Index&lt;/a&gt;.</source>
          <target state="translated">標準ライブラリに加えて、&lt;a href=&quot;https://pypi.org&quot;&gt;Pythonパッケージインデックス&lt;/a&gt;から入手できる数千のコンポーネント（個々のプログラムやモジュールからパッケージやアプリケーション開発フレームワーク全体まで）のコレクションが増えています。</target>
        </trans-unit>
        <trans-unit id="37b1282f5319fc90d1ae0fbf402438654f72c8b7" translate="yes" xml:space="preserve">
          <source>In addition to the standard numeric properties, decimal floating point objects also have a number of specialized methods:</source>
          <target state="translated">標準的な数値特性に加えて、10進浮動小数点オブジェクトには多くの専門的なメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="20844ff85a7de274374759963a07f03ca0ec2fa4" translate="yes" xml:space="preserve">
          <source>In addition to the three supplied contexts, new contexts can be created with the &lt;a href=&quot;#decimal.Context&quot;&gt;&lt;code&gt;Context&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">提供された3つのコンテキストに加えて、&lt;a href=&quot;#decimal.Context&quot;&gt; &lt;code&gt;Context&lt;/code&gt; &lt;/a&gt;コンストラクターで新しいコンテキストを作成できます。</target>
        </trans-unit>
        <trans-unit id="032befaca731d1da6b9f55a3d41598ab32bb42d3" translate="yes" xml:space="preserve">
          <source>In addition to the two signed zeros which are distinct yet equal, there are various representations of zero with differing precisions yet equivalent in value. This takes a bit of getting used to. For an eye accustomed to normalized floating point representations, it is not immediately obvious that the following calculation returns a value equal to zero:</source>
          <target state="translated">2つの符号付きゼロは区別されているが等しいことに加えて、さまざまなゼロの表現があり、異なる精度であるが値は等しい。これには少し慣れが必要です。正規化された浮動小数点表現に慣れている人にとっては、次の計算でゼロに等しい値が返されることはすぐにはわかりません。</target>
        </trans-unit>
        <trans-unit id="470a6fd8b7a670e99e5471d463edd75a822561e0" translate="yes" xml:space="preserve">
          <source>In addition to the usual mapping methods, ordered dictionaries also support reverse iteration using &lt;a href=&quot;functions#reversed&quot;&gt;&lt;code&gt;reversed()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通常のマッピングメソッドに加えて、順序付けされたディクショナリはreverse &lt;a href=&quot;functions#reversed&quot;&gt; &lt;code&gt;reversed()&lt;/code&gt; &lt;/a&gt;を使用した逆反復もサポートしています。</target>
        </trans-unit>
        <trans-unit id="1f6056a668fa6b597cd5e06fbb9eab25b2a47143" translate="yes" xml:space="preserve">
          <source>In addition to their mapping interface and formatting features, &lt;a href=&quot;#wsgiref.headers.Headers&quot;&gt;&lt;code&gt;Headers&lt;/code&gt;&lt;/a&gt; objects also have the following methods for querying and adding multi-valued headers, and for adding headers with MIME parameters:</source>
          <target state="translated">マッピングインターフェイスと書式設定機能に加えて、&lt;a href=&quot;#wsgiref.headers.Headers&quot;&gt; &lt;code&gt;Headers&lt;/code&gt; &lt;/a&gt;オブジェクトには、多値ヘッダーのクエリと追加、およびMIMEパラメーターを使用したヘッダーの追加のための次のメソッドもあります。</target>
        </trans-unit>
        <trans-unit id="b37effc66593dde7858807d6c481046b5424a851" translate="yes" xml:space="preserve">
          <source>In addition to these classes, &lt;a href=&quot;#module-xml.sax&quot;&gt;&lt;code&gt;xml.sax&lt;/code&gt;&lt;/a&gt; provides the following exception classes.</source>
          <target state="translated">これらのクラスに加えて、&lt;a href=&quot;#module-xml.sax&quot;&gt; &lt;code&gt;xml.sax&lt;/code&gt; &lt;/a&gt;は次の例外クラスを提供します。</target>
        </trans-unit>
        <trans-unit id="3c5fc990cbc73c12c0b40300fad7df5e7ee287cd" translate="yes" xml:space="preserve">
          <source>In addition to these classes, &lt;a href=&quot;#module-xml.sax.handler&quot;&gt;&lt;code&gt;xml.sax.handler&lt;/code&gt;&lt;/a&gt; provides symbolic constants for the feature and property names.</source>
          <target state="translated">これらのクラスに加えて、&lt;a href=&quot;#module-xml.sax.handler&quot;&gt; &lt;code&gt;xml.sax.handler&lt;/code&gt; &lt;/a&gt;は機能とプロパティ名のシンボリック定数を提供します。</target>
        </trans-unit>
        <trans-unit id="398bda298534a149091a837cc6c784d269a2e413" translate="yes" xml:space="preserve">
          <source>In addition to these methods, lock objects can also be used via the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement, e.g.:</source>
          <target state="translated">これらのメソッドに加えて、ロックオブジェクトは&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントを介して使用することもできます。例：</target>
        </trans-unit>
        <trans-unit id="59b4fba6609849f4bb2b33444f99b785fc17caf1" translate="yes" xml:space="preserve">
          <source>In addition to these methods, lock objects can also be used via the &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement, e.g.:</source>
          <target state="translated">これらのメソッドに加えて、ロックオブジェクトは&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントを介して使用することもできます。例：</target>
        </trans-unit>
        <trans-unit id="324d7520dd2db34f14989622298b9a50942c0a6b" translate="yes" xml:space="preserve">
          <source>In addition to these two forms, there are two additional normal forms based on compatibility equivalence. In Unicode, certain characters are supported which normally would be unified with other characters. For example, U+2160 (ROMAN NUMERAL ONE) is really the same thing as U+0049 (LATIN CAPITAL LETTER I). However, it is supported in Unicode for compatibility with existing character sets (e.g. gb2312).</source>
          <target state="translated">こ れ ら 2 つの形式に加えて、 互換性等価性に基づく 2 つの通常形式が追加されています。Unicodeでは、通常は他の文字と統一されているであろう特定の文字がサポートされています。た と えば、 U+2160 (ROMAN NUMERAL ONE)は、 U+0049 (LATIN CAPITAL LETTER I)と実際には同じものです。しかし、既存の文字セット(gb2312など)との互換性のためにUnicodeではサポートされています。</target>
        </trans-unit>
        <trans-unit id="9e0c6060f180bd1be434b002c3a8e1bb629b28ba" translate="yes" xml:space="preserve">
          <source>In addition to those of &lt;a href=&quot;#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#BlockingIOError&quot;&gt;&lt;code&gt;BlockingIOError&lt;/code&gt;&lt;/a&gt; can have one more attribute:</source>
          <target state="translated">&lt;a href=&quot;#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; の&lt;/a&gt;属性に加えて、&lt;a href=&quot;#BlockingIOError&quot;&gt; &lt;code&gt;BlockingIOError&lt;/code&gt; に&lt;/a&gt;はもう1つの属性があります。</target>
        </trans-unit>
        <trans-unit id="58b602fd4657546b90e8bec1feb16284ddd90bfc" translate="yes" xml:space="preserve">
          <source>In addition you can pass &lt;code&gt;spec=True&lt;/code&gt; or &lt;code&gt;spec_set=True&lt;/code&gt;, which causes patch to pass in the object being mocked as the spec/spec_set object.</source>
          <target state="translated">さらに、 &lt;code&gt;spec=True&lt;/code&gt; または &lt;code&gt;spec_set=True&lt;/code&gt; を渡すことができます。これにより、モックされるオブジェクトをspec / spec_setオブジェクトとして渡します。</target>
        </trans-unit>
        <trans-unit id="1538a099b36c536517432c89a4b9de9737c1b154" translate="yes" xml:space="preserve">
          <source>In addition, &lt;a href=&quot;#module-tkinter.tix&quot;&gt;&lt;code&gt;tkinter.tix&lt;/code&gt;&lt;/a&gt; augments &lt;a href=&quot;tkinter#module-tkinter&quot;&gt;&lt;code&gt;tkinter&lt;/code&gt;&lt;/a&gt; by providing:</source>
          <target state="translated">また、&lt;a href=&quot;#module-tkinter.tix&quot;&gt; &lt;code&gt;tkinter.tix&lt;/code&gt; &lt;/a&gt;オーグメント&lt;a href=&quot;tkinter#module-tkinter&quot;&gt; &lt;code&gt;tkinter&lt;/code&gt; &lt;/a&gt;提供することにより：</target>
        </trans-unit>
        <trans-unit id="ad37a6225b74614726b479be7666d6240684d671" translate="yes" xml:space="preserve">
          <source>In addition, &lt;a href=&quot;#module-xml.dom&quot;&gt;&lt;code&gt;xml.dom&lt;/code&gt;&lt;/a&gt; contains a base &lt;code&gt;Node&lt;/code&gt; class and the DOM exception classes. The &lt;code&gt;Node&lt;/code&gt; class provided by this module does not implement any of the methods or attributes defined by the DOM specification; concrete DOM implementations must provide those. The &lt;code&gt;Node&lt;/code&gt; class provided as part of this module does provide the constants used for the &lt;code&gt;nodeType&lt;/code&gt; attribute on concrete &lt;code&gt;Node&lt;/code&gt; objects; they are located within the class rather than at the module level to conform with the DOM specifications.</source>
          <target state="translated">さらに、&lt;a href=&quot;#module-xml.dom&quot;&gt; &lt;code&gt;xml.dom&lt;/code&gt; に&lt;/a&gt;は、ベース &lt;code&gt;Node&lt;/code&gt; クラスとDOM例外クラスが含まれています。 &lt;code&gt;Node&lt;/code&gt; このモジュールによって提供されるクラスは、DOM仕様で定義されたメソッドまたは属性のいずれかを実装していません。具体的なDOM実装はそれらを提供する必要があります。 &lt;code&gt;Node&lt;/code&gt; のために使用される定数を提供しない、このモジュールの一部として提供されるクラス &lt;code&gt;nodeType&lt;/code&gt; コンクリートの属性 &lt;code&gt;Node&lt;/code&gt; のオブジェクトを、これらは、DOM仕様に準拠するために、モジュールレベルではなくクラス内に配置されます。</target>
        </trans-unit>
        <trans-unit id="c5d44ab30dfa1f3ce24fbe120b70c25d4d0b4cc1" translate="yes" xml:space="preserve">
          <source>In addition, &lt;a href=&quot;#venv.EnvBuilder&quot;&gt;&lt;code&gt;EnvBuilder&lt;/code&gt;&lt;/a&gt; provides this utility method that can be called from &lt;a href=&quot;#venv.EnvBuilder.setup_scripts&quot;&gt;&lt;code&gt;setup_scripts()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#venv.EnvBuilder.post_setup&quot;&gt;&lt;code&gt;post_setup()&lt;/code&gt;&lt;/a&gt; in subclasses to assist in installing custom scripts into the virtual environment.</source>
          <target state="translated">さらに、&lt;a href=&quot;#venv.EnvBuilder&quot;&gt; &lt;code&gt;EnvBuilder&lt;/code&gt; &lt;/a&gt;は、カスタムスクリプトを仮想環境にインストールするのを支援するために、サブクラスの&lt;a href=&quot;#venv.EnvBuilder.setup_scripts&quot;&gt; &lt;code&gt;setup_scripts()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#venv.EnvBuilder.post_setup&quot;&gt; &lt;code&gt;post_setup()&lt;/code&gt; &lt;/a&gt;から呼び出すことができるこのユーティリティメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="8d5378207c9afa23bfe1afa0e6e3ef8b7515d910" translate="yes" xml:space="preserve">
          <source>In addition, &lt;code&gt;Tk&lt;/code&gt; also loads a startup file if it is present. Note that the Tk file is loaded unconditionally. This additional file is &lt;code&gt;.Idle.py&lt;/code&gt; and is looked for in the user&amp;rsquo;s home directory. Statements in this file will be executed in the Tk namespace, so this file is not useful for importing functions to be used from IDLE&amp;rsquo;s Python shell.</source>
          <target state="translated">さらに、 &lt;code&gt;Tk&lt;/code&gt; は、スタートアップファイルが存在する場合は、それもロードします。Tkファイルは無条件にロードされることに注意してください。この追加ファイルは &lt;code&gt;.Idle.py&lt;/code&gt; であり、ユーザーのホームディレクトリで検索されます。このファイルのステートメントはTk名前空間で実行されるため、このファイルは、IDLEのPythonシェルから使用する関数をインポートする場合には役立ちません。</target>
        </trans-unit>
        <trans-unit id="714413f1caa3214664dffb1034eb3924cd14e3f3" translate="yes" xml:space="preserve">
          <source>In addition, a custom &lt;a href=&quot;#xml.etree.ElementTree.TreeBuilder&quot;&gt;&lt;code&gt;TreeBuilder&lt;/code&gt;&lt;/a&gt; object can provide the following methods:</source>
          <target state="translated">さらに、カスタム&lt;a href=&quot;#xml.etree.ElementTree.TreeBuilder&quot;&gt; &lt;code&gt;TreeBuilder&lt;/code&gt; &lt;/a&gt;オブジェクトは次のメソッドを提供できます。</target>
        </trans-unit>
        <trans-unit id="ffffc9f25603a24b2ca6858559ed5b2e495ca947" translate="yes" xml:space="preserve">
          <source>In addition, each channel delegates or extends many of the socket methods. Most of these are nearly identical to their socket partners.</source>
          <target state="translated">また、各チャネルは多くのソケットメソッドをデリゲートしたり、拡張したりしています。これらのメソッドのほとんどは、ソケットパートナーとほぼ同じです。</target>
        </trans-unit>
        <trans-unit id="83b47f7b397cc2558e44945a3d76d7c85179444e" translate="yes" xml:space="preserve">
          <source>In addition, enabling &lt;a href=&quot;tracemalloc#module-tracemalloc&quot;&gt;&lt;code&gt;tracemalloc&lt;/code&gt;&lt;/a&gt; shows the line where the file was opened:</source>
          <target state="translated">さらに、&lt;a href=&quot;tracemalloc#module-tracemalloc&quot;&gt; &lt;code&gt;tracemalloc&lt;/code&gt; &lt;/a&gt;を有効にすると、ファイルが開かれた行が表示されます。</target>
        </trans-unit>
        <trans-unit id="c412f65e105df43e1227481dd3222239a0aaaa6f" translate="yes" xml:space="preserve">
          <source>In addition, every data type that can be packed with a &lt;a href=&quot;#xdrlib.Packer&quot;&gt;&lt;code&gt;Packer&lt;/code&gt;&lt;/a&gt;, can be unpacked with an &lt;a href=&quot;#xdrlib.Unpacker&quot;&gt;&lt;code&gt;Unpacker&lt;/code&gt;&lt;/a&gt;. Unpacking methods are of the form &lt;code&gt;unpack_type()&lt;/code&gt;, and take no arguments. They return the unpacked object.</source>
          <target state="translated">さらに、&lt;a href=&quot;#xdrlib.Packer&quot;&gt; &lt;code&gt;Packer&lt;/code&gt; &lt;/a&gt;でパックできるすべてのデータ型は、&lt;a href=&quot;#xdrlib.Unpacker&quot;&gt; &lt;code&gt;Unpacker&lt;/code&gt; &lt;/a&gt;でアンパックできます。 &lt;code&gt;unpack_type()&lt;/code&gt; メソッドはunpack_type（）の形式で、引数を取りません。解凍されたオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="7ba3a9a49cc3e12a995a955c9b502b49ba170e63" translate="yes" xml:space="preserve">
          <source>In addition, if &lt;code&gt;M.__test__&lt;/code&gt; exists and &amp;ldquo;is true&amp;rdquo;, it must be a dict, and each entry maps a (string) name to a function object, class object, or string. Function and class object docstrings found from &lt;code&gt;M.__test__&lt;/code&gt; are searched, and strings are treated as if they were docstrings. In output, a key &lt;code&gt;K&lt;/code&gt; in &lt;code&gt;M.__test__&lt;/code&gt; appears with name</source>
          <target state="translated">さらに、 &lt;code&gt;M.__test__&lt;/code&gt; が存在し、「true」である場合は、dictである必要があり、各エントリは（文字列）名を関数オブジェクト、クラスオブジェクト、または文字列にマップします。 &lt;code&gt;M.__test__&lt;/code&gt; から見つかった関数およびクラスオブジェクトのdocstring が検索され、文字列はdocstringであるかのように扱われます。出力では、 &lt;code&gt;M.__test__&lt;/code&gt; キー &lt;code&gt;K&lt;/code&gt; が名前とともに表示されます。</target>
        </trans-unit>
        <trans-unit id="7c4f27b629e481e3b68eabacd3944479c69ebbb1" translate="yes" xml:space="preserve">
          <source>In addition, if &lt;code&gt;mode&lt;/code&gt; is &lt;code&gt;'func_type'&lt;/code&gt;, the input syntax is modified to correspond to &lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt; &amp;ldquo;signature type comments&amp;rdquo;, e.g. &lt;code&gt;(str, int) -&amp;gt; List[str]&lt;/code&gt;.</source>
          <target state="translated">さらに、 &lt;code&gt;mode&lt;/code&gt; が &lt;code&gt;'func_type'&lt;/code&gt; の場合、入力構文は&lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-4&quot;&gt;&lt;strong&gt;PEP 484の&lt;/strong&gt;&lt;/a&gt;「署名タイプコメント」に対応するように変更され &lt;code&gt;(str, int) -&amp;gt; List[str]&lt;/code&gt; 例：（str、int）-&amp;gt; List [str]）。</target>
        </trans-unit>
        <trans-unit id="30c6bed1ea7380108e2ca8ee55afe3a1b3931b43" translate="yes" xml:space="preserve">
          <source>In addition, if &lt;em&gt;first&lt;/em&gt; and &lt;em&gt;second&lt;/em&gt; are the exact same type and one of list, tuple, dict, set, frozenset or str or any type that a subclass registers with &lt;a href=&quot;#unittest.TestCase.addTypeEqualityFunc&quot;&gt;&lt;code&gt;addTypeEqualityFunc()&lt;/code&gt;&lt;/a&gt; the type-specific equality function will be called in order to generate a more useful default error message (see also the &lt;a href=&quot;#type-specific-methods&quot;&gt;list of type-specific methods&lt;/a&gt;).</source>
          <target state="translated">さらに、&lt;em&gt;1番目&lt;/em&gt;と&lt;em&gt;2番目&lt;/em&gt;がまったく同じ型であり、リスト、タプル、ディクト、セット、&lt;a href=&quot;#unittest.TestCase.addTypeEqualityFunc&quot;&gt; &lt;code&gt;addTypeEqualityFunc()&lt;/code&gt; &lt;/a&gt;セット、またはstrのいずれか、またはサブクラスがaddTypeEqualityFunc（）に登録する任意の型の場合、生成するために型固有の等式関数が呼び出されますより有用なデフォルトのエラーメッセージ（&lt;a href=&quot;#type-specific-methods&quot;&gt;型固有のメソッドのリスト&lt;/a&gt;も参照）。</target>
        </trans-unit>
        <trans-unit id="0e854c4d4c93154cb656dd7533a63f2e464a95d5" translate="yes" xml:space="preserve">
          <source>In addition, if a function argument is explicitly declared to be a pointer type (such as &lt;code&gt;POINTER(c_int)&lt;/code&gt;) in &lt;code&gt;argtypes&lt;/code&gt;, an object of the pointed type (&lt;code&gt;c_int&lt;/code&gt; in this case) can be passed to the function. ctypes will apply the required &lt;a href=&quot;#ctypes.byref&quot;&gt;&lt;code&gt;byref()&lt;/code&gt;&lt;/a&gt; conversion in this case automatically.</source>
          <target state="translated">関数の引数が明示的に（例えば、ポインタ型であると宣言されている場合に加えて、 &lt;code&gt;POINTER(c_int)&lt;/code&gt; で） &lt;code&gt;argtypes&lt;/code&gt; 、尖ったタイプ（のオブジェクト &lt;code&gt;c_int&lt;/code&gt; のこのケースでは）関数に渡すことができます。この場合、ctypesは必要な&lt;a href=&quot;#ctypes.byref&quot;&gt; &lt;code&gt;byref()&lt;/code&gt; &lt;/a&gt;変換を自動的に適用します。</target>
        </trans-unit>
        <trans-unit id="be2d0ea0907cf041df70ca4f4e655493e7b46100" translate="yes" xml:space="preserve">
          <source>In addition, if proxy settings are detected (for example, when a &lt;code&gt;*_proxy&lt;/code&gt; environment variable like &lt;code id=&quot;index-0&quot;&gt;http_proxy&lt;/code&gt; is set), &lt;a href=&quot;#urllib.request.ProxyHandler&quot;&gt;&lt;code&gt;ProxyHandler&lt;/code&gt;&lt;/a&gt; is default installed and makes sure the requests are handled through the proxy.</source>
          <target state="translated">さらに、プロキシ設定が検出された場合（たとえば、 &lt;code id=&quot;index-0&quot;&gt;http_proxy&lt;/code&gt; などの &lt;code&gt;*_proxy&lt;/code&gt; 環境変数が設定されている場合）、&lt;a href=&quot;#urllib.request.ProxyHandler&quot;&gt; &lt;code&gt;ProxyHandler&lt;/code&gt; &lt;/a&gt;がデフォルトでインストールされ、リクエストがプロキシを介して処理されるようにします。</target>
        </trans-unit>
        <trans-unit id="7b6bed6910e60de13a0aa73a3eceff08d688367d" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;a href=&quot;#string.Formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt; defines a number of methods that are intended to be replaced by subclasses:</source>
          <target state="translated">さらに、&lt;a href=&quot;#string.Formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt;は、サブクラスで置き換えることを目的としたいくつかのメソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="c9ff53ab4ada69f7c64d6901e8e9786692449da2" translate="yes" xml:space="preserve">
          <source>In addition, the Python DOM interface requires that some additional support is provided to allow &lt;code&gt;NodeList&lt;/code&gt; objects to be used as Python sequences. All &lt;code&gt;NodeList&lt;/code&gt; implementations must include support for &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__len__&quot;&gt;&lt;code&gt;__len__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt;; this allows iteration over the &lt;code&gt;NodeList&lt;/code&gt; in &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; statements and proper support for the &lt;a href=&quot;functions#len&quot;&gt;&lt;code&gt;len()&lt;/code&gt;&lt;/a&gt; built-in function.</source>
          <target state="translated">さらに、Python DOMインターフェースでは、 &lt;code&gt;NodeList&lt;/code&gt; オブジェクトをPythonシーケンスとして使用できるようにするために、いくつかの追加サポートが必要です。すべての &lt;code&gt;NodeList&lt;/code&gt; 実装には、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__len__&quot;&gt; &lt;code&gt;__len__()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt;サポートが含まれている必要があります。これにより、&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#for&quot;&gt; &lt;code&gt;for&lt;/code&gt; &lt;/a&gt;ステートメントでの &lt;code&gt;NodeList&lt;/code&gt; の反復と、&lt;a href=&quot;functions#len&quot;&gt; &lt;code&gt;len()&lt;/code&gt; &lt;/a&gt;組み込み関数の適切なサポートが可能になります。</target>
        </trans-unit>
        <trans-unit id="b6d37d6e1400b9af0d3c9c888ffe6df3d77fcdda" translate="yes" xml:space="preserve">
          <source>In addition, the Python DOM interface requires that some additional support is provided to allow &lt;code&gt;NodeList&lt;/code&gt; objects to be used as Python sequences. All &lt;code&gt;NodeList&lt;/code&gt; implementations must include support for &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__len__&quot;&gt;&lt;code&gt;__len__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getitem__&quot;&gt;&lt;code&gt;__getitem__()&lt;/code&gt;&lt;/a&gt;; this allows iteration over the &lt;code&gt;NodeList&lt;/code&gt; in &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#for&quot;&gt;&lt;code&gt;for&lt;/code&gt;&lt;/a&gt; statements and proper support for the &lt;a href=&quot;functions#len&quot;&gt;&lt;code&gt;len()&lt;/code&gt;&lt;/a&gt; built-in function.</source>
          <target state="translated">さらに、Python DOMインターフェースでは、 &lt;code&gt;NodeList&lt;/code&gt; オブジェクトをPythonシーケンスとして使用できるようにするために、いくつかの追加サポートを提供する必要があります。すべての &lt;code&gt;NodeList&lt;/code&gt; 実装には、&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__len__&quot;&gt; &lt;code&gt;__len__()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getitem__&quot;&gt; &lt;code&gt;__getitem__()&lt;/code&gt; &lt;/a&gt;サポートが含まれている必要があります。これにより、 &lt;code&gt;NodeList&lt;/code&gt; in &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#for&quot;&gt; &lt;code&gt;for&lt;/code&gt; &lt;/a&gt;ステートメントの反復と、&lt;a href=&quot;functions#len&quot;&gt; &lt;code&gt;len()&lt;/code&gt; &lt;/a&gt;組み込み関数の適切なサポートが可能になります。</target>
        </trans-unit>
        <trans-unit id="d01bd464654d85025080875761ac5e61133f11b9" translate="yes" xml:space="preserve">
          <source>In addition, the following constants are defined:</source>
          <target state="translated">また、以下のような定数が定義されています。</target>
        </trans-unit>
        <trans-unit id="b6828d60770f39f7550e18f2180b31c38e1ba2b8" translate="yes" xml:space="preserve">
          <source>In addition, the following error handler is specific to the given codecs:</source>
          <target state="translated">さらに、以下のエラーハンドラは、与えられたコーデックに固有のものである。</target>
        </trans-unit>
        <trans-unit id="a7d6c3e3ae1f40f0b841f0ae9fa2ce8b4b2c827e" translate="yes" xml:space="preserve">
          <source>In addition, the following methods unpack strings, bytes, and opaque data:</source>
          <target state="translated">また、以下のメソッドは、文字列、バイト、不透明なデータを展開します。</target>
        </trans-unit>
        <trans-unit id="8f79591ef67ae18b0ee2f6ad572507855d4aebe8" translate="yes" xml:space="preserve">
          <source>In addition, the module exposes the following constant:</source>
          <target state="translated">さらに、モジュールは以下の定数を公開しています。</target>
        </trans-unit>
        <trans-unit id="7202589f315636dd521931132570107c0e2975e5" translate="yes" xml:space="preserve">
          <source>In addition, the module implements a &amp;ldquo;simple&amp;rdquo;</source>
          <target state="translated">さらに、モジュールは「シンプル」な</target>
        </trans-unit>
        <trans-unit id="65768f8c8e36ecf98d8bfdf5c170282437244a45" translate="yes" xml:space="preserve">
          <source>In addition, the replacements using &lt;a href=&quot;#subprocess.check_output&quot;&gt;&lt;code&gt;check_output()&lt;/code&gt;&lt;/a&gt; will fail with a &lt;a href=&quot;#subprocess.CalledProcessError&quot;&gt;&lt;code&gt;CalledProcessError&lt;/code&gt;&lt;/a&gt; if the requested operation produces a non-zero return code. The output is still available as the &lt;a href=&quot;#subprocess.CalledProcessError.output&quot;&gt;&lt;code&gt;output&lt;/code&gt;&lt;/a&gt; attribute of the raised exception.</source>
          <target state="translated">さらに、要求された操作がゼロ以外の戻りコードを生成した場合、&lt;a href=&quot;#subprocess.check_output&quot;&gt; &lt;code&gt;check_output()&lt;/code&gt; &lt;/a&gt;を使用した置換は&lt;a href=&quot;#subprocess.CalledProcessError&quot;&gt; &lt;code&gt;CalledProcessError&lt;/code&gt; で&lt;/a&gt;失敗します。出力は、発生した例外の&lt;a href=&quot;#subprocess.CalledProcessError.output&quot;&gt; &lt;code&gt;output&lt;/code&gt; &lt;/a&gt;属性として引き続き使用できます。</target>
        </trans-unit>
        <trans-unit id="24d6f5e76f333b5e2721aafc94f1e5f93dcadd61" translate="yes" xml:space="preserve">
          <source>In addition, those methods can raise &lt;a href=&quot;exceptions#BlockingIOError&quot;&gt;&lt;code&gt;BlockingIOError&lt;/code&gt;&lt;/a&gt; if the underlying raw stream is in non-blocking mode and cannot take or give enough data; unlike their &lt;a href=&quot;#io.RawIOBase&quot;&gt;&lt;code&gt;RawIOBase&lt;/code&gt;&lt;/a&gt; counterparts, they will never return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">さらに、これらのメソッドは、基になるrawストリームが非ブロッキングモードであり、十分なデータを取得または提供できない場合に、&lt;a href=&quot;exceptions#BlockingIOError&quot;&gt; &lt;code&gt;BlockingIOError&lt;/code&gt; &lt;/a&gt;を発生させる可能性があります。&lt;a href=&quot;#io.RawIOBase&quot;&gt; &lt;code&gt;RawIOBase&lt;/code&gt; &lt;/a&gt;とは異なり、 &lt;code&gt;None&lt;/code&gt; を返すことはありません。</target>
        </trans-unit>
        <trans-unit id="e0c8203792cc7837023ccc2f6c27be6b401948da" translate="yes" xml:space="preserve">
          <source>In all but the last case, behaviour is as for the &lt;a href=&quot;#fcntl.fcntl&quot;&gt;&lt;code&gt;fcntl()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">最後の場合を除いて、動作は&lt;a href=&quot;#fcntl.fcntl&quot;&gt; &lt;code&gt;fcntl()&lt;/code&gt; &lt;/a&gt;関数の場合と同じです。</target>
        </trans-unit>
        <trans-unit id="692d29dfab8ab67219a17ecaca49c353f09b7b11" translate="yes" xml:space="preserve">
          <source>In all cases, if the optional parts are omitted, the code is executed in the current scope. If only &lt;em&gt;globals&lt;/em&gt; is provided, it must be a dictionary (and not a subclass of dictionary), which will be used for both the global and the local variables. If &lt;em&gt;globals&lt;/em&gt; and &lt;em&gt;locals&lt;/em&gt; are given, they are used for the global and local variables, respectively. If provided, &lt;em&gt;locals&lt;/em&gt; can be any mapping object. Remember that at module level, globals and locals are the same dictionary. If exec gets two separate objects as &lt;em&gt;globals&lt;/em&gt; and &lt;em&gt;locals&lt;/em&gt;, the code will be executed as if it were embedded in a class definition.</source>
          <target state="translated">すべての場合で、オプションのパーツが省略されている場合、コードは現在のスコープで実行されます。&lt;em&gt;グローバル&lt;/em&gt;のみが提供される場合、それはディクショナリーでなければならず（ディクショナリーのサブクラスではない）、これはグローバル変数とローカル変数の両方に使用されます。場合は&lt;em&gt;グローバル&lt;/em&gt;と&lt;em&gt;地元の人々が&lt;/em&gt;与えられ、彼らはそれぞれ、グローバルとローカル変数のために使用されています。提供される場合、&lt;em&gt;ローカル&lt;/em&gt;は任意のマッピングオブジェクトにすることができます。モジュールレベルでは、グローバルとローカルは同じ辞書です。 execが2つの個別のオブジェクトを&lt;em&gt;globals&lt;/em&gt;と&lt;em&gt;locals&lt;/em&gt;として取得した場合、コードはクラス定義に埋め込まれているかのように実行されます。</target>
        </trans-unit>
        <trans-unit id="4ce297ce9195276151aae56fb9d8405d81d59aba" translate="yes" xml:space="preserve">
          <source>In an editor, import statements have no effect until one runs the file. One might want to run a file after writing import statements, after adding function definitions, or after opening an existing file.</source>
          <target state="translated">エディタでは、インポート文はファイルを実行するまで何の効果もありません。インポート文を書いた後、関数定義を追加した後、または既存のファイルを開いた後にファイルを実行したいと思うかもしれません。</target>
        </trans-unit>
        <trans-unit id="e125a1f4b01ec045b13c222789290bf79d3655aa" translate="yes" xml:space="preserve">
          <source>In an editor, import statements have no effect until one runs the file. One might want to run a file after writing the import statements at the top, or immediately run an existing file before editing.</source>
          <target state="translated">エディタでは、インポート文はファイルを実行するまで何の効果もありません。上部にインポート文を書いた後にファイルを実行したり、編集する前に既存のファイルをすぐに実行したりしたい場合があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="7585fd505655ba1d8efec7b44c9872a4847511d0" translate="yes" xml:space="preserve">
          <source>In any case, the parameter value (either the returned string, or the &lt;code&gt;VALUE&lt;/code&gt; item in the 3-tuple) is always unquoted, unless &lt;em&gt;unquote&lt;/em&gt; is set to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">いずれの場合も、&lt;em&gt;unquote&lt;/em&gt;が &lt;code&gt;False&lt;/code&gt; に設定されていない限り、パラメーター値（返される文字列、または3タプルの &lt;code&gt;VALUE&lt;/code&gt; アイテム）は常に引用符で囲まれてい&lt;em&gt;ません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="1ea5e474a620a942ee44b6caa68731405ccc53b7" translate="yes" xml:space="preserve">
          <source>In asyncio, child processes are created with &lt;a href=&quot;asyncio-subprocess#asyncio.create_subprocess_exec&quot;&gt;&lt;code&gt;create_subprocess_exec()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_exec&quot;&gt;&lt;code&gt;loop.subprocess_exec()&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">asyncioでは、子プロセスは&lt;a href=&quot;asyncio-subprocess#asyncio.create_subprocess_exec&quot;&gt; &lt;code&gt;create_subprocess_exec()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_exec&quot;&gt; &lt;code&gt;loop.subprocess_exec()&lt;/code&gt; &lt;/a&gt;関数で作成されます。</target>
        </trans-unit>
        <trans-unit id="ee9c6189bdb6109a3314f3a6fa2e8324565b928c" translate="yes" xml:space="preserve">
          <source>In calls to &lt;a href=&quot;#time.mktime&quot;&gt;&lt;code&gt;mktime()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;tm_isdst&lt;/code&gt; may be set to 1 when daylight savings time is in effect, and 0 when it is not. A value of -1 indicates that this is not known, and will usually result in the correct state being filled in.</source>
          <target state="translated">&lt;a href=&quot;#time.mktime&quot;&gt; &lt;code&gt;mktime()&lt;/code&gt; の&lt;/a&gt;呼び出しでは、 &lt;code&gt;tm_isdst&lt;/code&gt; が有効な場合はtm_isdstが1に設定され、そうでない場合は0に設定されます。値-1はこれが不明であることを示し、通常は正しい状態が入力されます。</target>
        </trans-unit>
        <trans-unit id="1319e988c1be1fbecde5f67e0f759a6ee96a90b4" translate="yes" xml:space="preserve">
          <source>In case just an immediate sorting of the nodes in the graph is required and no parallelism is involved, the convenience method &lt;a href=&quot;#graphlib.TopologicalSorter.static_order&quot;&gt;&lt;code&gt;TopologicalSorter.static_order()&lt;/code&gt;&lt;/a&gt; can be used directly:</source>
          <target state="translated">グラフ内のノードをすぐに並べ替えるだけで、並列処理が必要ない場合は、便利なメソッド&lt;a href=&quot;#graphlib.TopologicalSorter.static_order&quot;&gt; &lt;code&gt;TopologicalSorter.static_order()&lt;/code&gt; &lt;/a&gt;を直接使用できます。</target>
        </trans-unit>
        <trans-unit id="bc48b1dca0b1da787a928b9dd93dc589bfde5754" translate="yes" xml:space="preserve">
          <source>In cases when only the library handle is available rather than the object, accessing a function raises an auditing event &lt;code&gt;ctypes.dlsym/handle&lt;/code&gt; with arguments &lt;code&gt;handle&lt;/code&gt; (the raw library handle) and &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">オブジェクトではなくライブラリハンドルしか使用できない場合、関数にアクセスすると、引数 &lt;code&gt;handle&lt;/code&gt; （生のライブラリハンドル）と &lt;code&gt;name&lt;/code&gt; を指定した監査イベント &lt;code&gt;ctypes.dlsym/handle&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="30db5ca10a27995819aa59775e12a2ebd80f3013" translate="yes" xml:space="preserve">
          <source>In cases where canonical output is not applicable but a specific attribute order is still desirable on output, code should aim for creating the attributes directly in the desired order, to avoid perceptual mismatches for readers of the code. In cases where this is difficult to achieve, a recipe like the following can be applied prior to serialisation to enforce an order independently from the Element creation:</source>
          <target state="translated">正準出力が適用できないが、出力上で特定の属性順序がまだ望ましい場合、コードの読者にとって知覚的な不一致を避けるために、コードは望ましい順序で属性を直接作成することを目指すべきである。これを達成するのが難しい場合には、以下のようなレシピをシリアライズの前に適用して、Elementの作成とは独立した順序を強制することができます。</target>
        </trans-unit>
        <trans-unit id="9a76a269c9a0813ca8158d4ca521d20cd58a501b" translate="yes" xml:space="preserve">
          <source>In config parsers, values can span multiple lines as long as they are indented more than the key that holds them. By default parsers also let empty lines to be parts of values. At the same time, keys can be arbitrarily indented themselves to improve readability. In consequence, when configuration files get big and complex, it is easy for the user to lose track of the file structure. Take for instance:</source>
          <target state="translated">コンフィグ・パーサでは、値を保持するキーよりもインデントされている限り、値は複数行に渡ることができます。デフォルトでは、パーサは空行を値の一部にすることもできます。同時に、可読性を向上させるために、キー自体を任意にインデントすることができます。結果として、設定ファイルが大きく複雑になると、ユーザーはファイル構造を見失うことが容易になります。例えば、以下のような例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="4474384d258039b476c26e51f3dc73c8e1621318" translate="yes" xml:space="preserve">
          <source>In contrast, &lt;code&gt;NewType&lt;/code&gt; declares one type to be a &lt;em&gt;subtype&lt;/em&gt; of another. Doing &lt;code&gt;Derived = NewType('Derived', Original)&lt;/code&gt; will make the static type checker treat &lt;code&gt;Derived&lt;/code&gt; as a &lt;em&gt;subclass&lt;/em&gt; of &lt;code&gt;Original&lt;/code&gt;, which means a value of type &lt;code&gt;Original&lt;/code&gt; cannot be used in places where a value of type &lt;code&gt;Derived&lt;/code&gt; is expected. This is useful when you want to prevent logic errors with minimal runtime cost.</source>
          <target state="translated">対照的に、 &lt;code&gt;NewType&lt;/code&gt; は、ある&lt;em&gt;タイプ&lt;/em&gt;を別の&lt;em&gt;タイプのサブタイプ&lt;/em&gt;として宣言します。やっ &lt;code&gt;Derived = NewType('Derived', Original)&lt;/code&gt; 静的型チェッカー御馳走になります &lt;code&gt;Derived&lt;/code&gt; として&lt;em&gt;、サブクラス&lt;/em&gt;の &lt;code&gt;Original&lt;/code&gt; 型の値を意味し、 &lt;code&gt;Original&lt;/code&gt; 型の値の場所で使用することはできません &lt;code&gt;Derived&lt;/code&gt; 期待されているが。これは、ランタイムコストを最小限に抑えてロジックエラーを防止する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="808194d88f87f062e3f917a77c2fd08a648ff57f" translate="yes" xml:space="preserve">
          <source>In debug builds, the list of default warning filters is empty.</source>
          <target state="translated">デバッグビルドでは、デフォルトの警告フィルターのリストは空です。</target>
        </trans-unit>
        <trans-unit id="acc6dc48ce98dfe1787544928804d1351131ed2d" translate="yes" xml:space="preserve">
          <source>In developing fixed-point applications, it is convenient to define functions to handle the &lt;code&gt;quantize()&lt;/code&gt; step:</source>
          <target state="translated">固定小数点アプリケーションの開発では、 &lt;code&gt;quantize()&lt;/code&gt; ステップを処理する関数を定義すると便利です。</target>
        </trans-unit>
        <trans-unit id="c77a995d67e443f20620e90b24b791b5af7d08e6" translate="yes" xml:space="preserve">
          <source>In earlier versions, the terminator was hardcoded as &lt;code&gt;'\n'&lt;/code&gt;.</source>
          <target state="translated">以前のバージョンでは、ターミネータは &lt;code&gt;'\n'&lt;/code&gt; としてハードコーディングされていました。</target>
        </trans-unit>
        <trans-unit id="c977d792bc856342f19c64cada581050dd1e4694" translate="yes" xml:space="preserve">
          <source>In either case, the exception itself is always shown after any chained exceptions so that the final line of the traceback always shows the last exception that was raised.</source>
          <target state="translated">いずれの場合も、例外自体は常に連鎖した例外の後に表示されるので、トレースバックの最終行には常に最後に発生した例外が表示されます。</target>
        </trans-unit>
        <trans-unit id="22384914a04d22b7049ea2fa018ad8b0c6e7dc2b" translate="yes" xml:space="preserve">
          <source>In either case, when producing an &lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt;-compliant header using &lt;a href=&quot;https://tools.ietf.org/html/rfc2047.html&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;RFC 2047&lt;/strong&gt;&lt;/a&gt; rules, the string will be encoded using the output codec of the charset. If the string cannot be encoded using the output codec, a UnicodeError will be raised.</source>
          <target state="translated">どちらの場合でも、&lt;a href=&quot;https://tools.ietf.org/html/rfc2047.html&quot; id=&quot;index-11&quot;&gt;&lt;strong&gt;RFC 2047&lt;/strong&gt;&lt;/a&gt;ルールを使用して&lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-10&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt;準拠のヘッダーを作成する場合、文字列は文字セットの出力コーデックを使用してエンコードされます。文字列が出力コーデックを使用してエンコードできない場合、UnicodeErrorが発生します。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="245fefefdc72a1779e932cbff8e651714d2e5fec" translate="yes" xml:space="preserve">
          <source>In emergencies this method will discard any data held in the input and/or output buffers and the producer queue.</source>
          <target state="translated">緊急時には、このメソッドは、入力および/または出力バッファとプロデューサキューに保持されているすべてのデータを破棄します。</target>
        </trans-unit>
        <trans-unit id="965c8af21ae4828757fda71d55deb0166d6df2fd" translate="yes" xml:space="preserve">
          <source>In essence, a Condition object combines the functionality of an &lt;a href=&quot;#asyncio.Event&quot;&gt;&lt;code&gt;Event&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;#asyncio.Lock&quot;&gt;&lt;code&gt;Lock&lt;/code&gt;&lt;/a&gt;. It is possible to have multiple Condition objects share one Lock, which allows coordinating exclusive access to a shared resource between different tasks interested in particular states of that shared resource.</source>
          <target state="translated">本質的に、Conditionオブジェクトは、&lt;a href=&quot;#asyncio.Event&quot;&gt; &lt;code&gt;Event&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#asyncio.Lock&quot;&gt; &lt;code&gt;Lock&lt;/code&gt; の&lt;/a&gt;機能を組み合わせたものです。複数のConditionオブジェクトで1つのロックを共有することが可能です。これにより、共有リソースの特定の状態に関係する異なるタスク間で共有リソースへの排他的アクセスを調整できます。</target>
        </trans-unit>
        <trans-unit id="aab7997c363058025f4902dd79fa90e9d4f7cc8a" translate="yes" xml:space="preserve">
          <source>In fact, the above algorithm is first tried for methods named &lt;code&gt;default_open()&lt;/code&gt;. If all such methods return &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, the algorithm is repeated for methods named like &lt;code&gt;&amp;lt;protocol&amp;gt;_open()&lt;/code&gt;. If all such methods return &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;, the algorithm is repeated for methods named &lt;code&gt;unknown_open()&lt;/code&gt;.</source>
          <target state="translated">実際、上記のアルゴリズムは &lt;code&gt;default_open()&lt;/code&gt; という名前のメソッドで最初に試行されます。そのようなすべてのメソッドが&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; を&lt;/a&gt;返す場合、アルゴリズムは &lt;code&gt;&amp;lt;protocol&amp;gt;_open()&lt;/code&gt; のような名前のメソッドに対して繰り返されます。そのようなすべてのメソッドが&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; を&lt;/a&gt;返す場合、アルゴリズムは &lt;code&gt;unknown_open()&lt;/code&gt; という名前のメソッドに対して繰り返されます。</target>
        </trans-unit>
        <trans-unit id="1a31e0e92af099e0fc4c6092b67160da2329774b" translate="yes" xml:space="preserve">
          <source>In general (and especially on systems without overallocation), it is recommended to estimate even tighter bounds and set the &lt;a href=&quot;#decimal.Inexact&quot;&gt;&lt;code&gt;Inexact&lt;/code&gt;&lt;/a&gt; trap if all calculations are expected to be exact.</source>
          <target state="translated">（特に割り当て超過せずにシステム上の）一般的に、それもより厳しい限界を推定し、設定することが推奨される&lt;a href=&quot;#decimal.Inexact&quot;&gt; &lt;code&gt;Inexact&lt;/code&gt; &lt;/a&gt;すべての計算が正確であることが予想される場合に、トラップを。</target>
        </trans-unit>
        <trans-unit id="26db7d03f5d7b2f8484e83cc9df341e5fcb76c6d" translate="yes" xml:space="preserve">
          <source>In general, &lt;em&gt;t1&lt;/em&gt; * i == &lt;em&gt;t1&lt;/em&gt; * (i-1) + &lt;em&gt;t1&lt;/em&gt; is true. (1)</source>
          <target state="translated">一般に、&lt;em&gt;t1&lt;/em&gt; * i == &lt;em&gt;t1&lt;/em&gt; *（i-1）+ &lt;em&gt;t1&lt;/em&gt;はtrueです。（1）</target>
        </trans-unit>
        <trans-unit id="0506d07a792bdf1420c6f5ee2d8683b4bb973f20" translate="yes" xml:space="preserve">
          <source>In general, it should be the case that &lt;a href=&quot;#http.cookies.BaseCookie.value_encode&quot;&gt;&lt;code&gt;value_encode()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#http.cookies.BaseCookie.value_decode&quot;&gt;&lt;code&gt;value_decode()&lt;/code&gt;&lt;/a&gt; are inverses on the range of &lt;em&gt;value_decode&lt;/em&gt;.</source>
          <target state="translated">一般に、&lt;a href=&quot;#http.cookies.BaseCookie.value_encode&quot;&gt; &lt;code&gt;value_encode()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#http.cookies.BaseCookie.value_decode&quot;&gt; &lt;code&gt;value_decode()&lt;/code&gt; &lt;/a&gt;は、&lt;em&gt;value_decode&lt;/em&gt;の範囲の逆である&lt;em&gt;必要があり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="df0b5cf5765724139c03b2e68725a9a7fc0cadf5" translate="yes" xml:space="preserve">
          <source>In general, protocol implementations that use transport-based APIs such as &lt;a href=&quot;#asyncio.loop.create_connection&quot;&gt;&lt;code&gt;loop.create_connection()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#asyncio.loop.create_server&quot;&gt;&lt;code&gt;loop.create_server()&lt;/code&gt;&lt;/a&gt; are faster than implementations that work with sockets directly. However, there are some use cases when performance is not critical, and working with &lt;a href=&quot;socket#socket.socket&quot;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt; objects directly is more convenient.</source>
          <target state="translated">一般に、&lt;a href=&quot;#asyncio.loop.create_connection&quot;&gt; &lt;code&gt;loop.create_connection()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#asyncio.loop.create_server&quot;&gt; &lt;code&gt;loop.create_server()&lt;/code&gt; &lt;/a&gt;などのトランスポートベースのAPIを使用するプロトコル実装は、ソケットを直接操作する実装よりも高速です。ただし、パフォーマンスが重要ではないユースケースがいくつかあり、&lt;a href=&quot;socket#socket.socket&quot;&gt; &lt;code&gt;socket&lt;/code&gt; &lt;/a&gt;オブジェクトを直接操作する方が便利です。</target>
        </trans-unit>
        <trans-unit id="20cd72495b8797b1b45d990ccd4902f5c5f42a41" translate="yes" xml:space="preserve">
          <source>In general, the &lt;a href=&quot;#module-argparse&quot;&gt;&lt;code&gt;argparse&lt;/code&gt;&lt;/a&gt; module assumes that flags like &lt;code&gt;-f&lt;/code&gt; and &lt;code&gt;--bar&lt;/code&gt; indicate &lt;em&gt;optional&lt;/em&gt; arguments, which can always be omitted at the command line. To make an option &lt;em&gt;required&lt;/em&gt;, &lt;code&gt;True&lt;/code&gt; can be specified for the &lt;code&gt;required=&lt;/code&gt; keyword argument to &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt;&lt;code&gt;add_argument()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">一般に、&lt;a href=&quot;#module-argparse&quot;&gt; &lt;code&gt;argparse&lt;/code&gt; &lt;/a&gt;モジュールは、 &lt;code&gt;-f&lt;/code&gt; や &lt;code&gt;--bar&lt;/code&gt; などのフラグが&lt;em&gt;オプションの&lt;/em&gt;引数を示していると想定しています。これは、コマンドラインでは常に省略できます。オプションを&lt;em&gt;必須にするには&lt;/em&gt;、&lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt; &lt;code&gt;add_argument()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;required=&lt;/code&gt; キーワード引数に &lt;code&gt;True&lt;/code&gt; を指定できます。</target>
        </trans-unit>
        <trans-unit id="c4db8812f85eaab112b76e9bb72d0ea809a10832" translate="yes" xml:space="preserve">
          <source>In general, the LRU cache should only be used when you want to reuse previously computed values. Accordingly, it doesn&amp;rsquo;t make sense to cache functions with side-effects, functions that need to create distinct mutable objects on each call, or impure functions such as time() or random().</source>
          <target state="translated">一般に、LRUキャッシュは、以前に計算された値を再利用する場合にのみ使用してください。したがって、副作用のある関数、各呼び出しで個別の可変オブジェクトを作成する必要がある関数、またはtime（）やrandom（）などの不純な関数をキャッシュしても意味がありません。</target>
        </trans-unit>
        <trans-unit id="0855957cf96cc591654edbae97ba73e1a179c2a2" translate="yes" xml:space="preserve">
          <source>In general, this function should be preferred over &lt;a href=&quot;os#os.getlogin&quot;&gt;&lt;code&gt;os.getlogin()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一般に、この関数は&lt;a href=&quot;os#os.getlogin&quot;&gt; &lt;code&gt;os.getlogin()&lt;/code&gt; &lt;/a&gt;よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="440426040cf7cbfc6d96c968361e3b6f6f71b8cf" translate="yes" xml:space="preserve">
          <source>In general, user code should try not to depend on a specific ordering of attributes, given that the &lt;a href=&quot;https://www.w3.org/TR/xml-infoset/&quot;&gt;XML Information Set&lt;/a&gt; explicitly excludes the attribute order from conveying information. Code should be prepared to deal with any ordering on input. In cases where deterministic XML output is required, e.g. for cryptographic signing or test data sets, canonical serialisation is available with the &lt;a href=&quot;#xml.etree.ElementTree.canonicalize&quot;&gt;&lt;code&gt;canonicalize()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">一般に、&lt;a href=&quot;https://www.w3.org/TR/xml-infoset/&quot;&gt;XML&lt;/a&gt;コードセットが属性の順序を情報の伝達から明示的に除外している場合、ユーザーコードは属性の特定の順序に依存しないようにする必要があります。コードは、入力時の順序付けに対応できるように準備する必要があります。暗号署名やテストデータセットなど、確定的なXML出力が必要な場合は、&lt;a href=&quot;#xml.etree.ElementTree.canonicalize&quot;&gt; &lt;code&gt;canonicalize()&lt;/code&gt; &lt;/a&gt;関数を使用して正規シリアル化を利用できます。</target>
        </trans-unit>
        <trans-unit id="c8e833685e558fad9e6d2aed4b5edd8ed53ab53a" translate="yes" xml:space="preserve">
          <source>In general, you can pack any of the most common XDR data types by calling the appropriate &lt;code&gt;pack_type()&lt;/code&gt; method. Each method takes a single argument, the value to pack. The following simple data type packing methods are supported: &lt;code&gt;pack_uint()&lt;/code&gt;, &lt;code&gt;pack_int()&lt;/code&gt;, &lt;code&gt;pack_enum()&lt;/code&gt;, &lt;code&gt;pack_bool()&lt;/code&gt;, &lt;code&gt;pack_uhyper()&lt;/code&gt;, and &lt;code&gt;pack_hyper()&lt;/code&gt;.</source>
          <target state="translated">通常、適切な &lt;code&gt;pack_type()&lt;/code&gt; メソッドを呼び出すことにより、最も一般的なXDRデータ型をパックできます。各メソッドは、1つの引数、つまりパックする値を取ります。次の単純なデータ型のパッキングメソッドがサポートされています： &lt;code&gt;pack_uint()&lt;/code&gt; 、 &lt;code&gt;pack_int()&lt;/code&gt; 、 &lt;code&gt;pack_enum()&lt;/code&gt; 、 &lt;code&gt;pack_bool()&lt;/code&gt; 、 &lt;code&gt;pack_uhyper()&lt;/code&gt; 、および &lt;code&gt;pack_hyper()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7051fb77a6d138d8bb42933ac13b4fab45cc061e" translate="yes" xml:space="preserve">
          <source>In general, you will want to use the &lt;a href=&quot;email#module-email&quot;&gt;&lt;code&gt;email&lt;/code&gt;&lt;/a&gt; package&amp;rsquo;s features to construct an email message, which you can then send via &lt;a href=&quot;#smtplib.SMTP.send_message&quot;&gt;&lt;code&gt;send_message()&lt;/code&gt;&lt;/a&gt;; see &lt;a href=&quot;email.examples#email-examples&quot;&gt;email: Examples&lt;/a&gt;.</source>
          <target state="translated">一般に、&lt;a href=&quot;email#module-email&quot;&gt; &lt;code&gt;email&lt;/code&gt; &lt;/a&gt;パッケージの機能を使用して電子メールメッセージを作成し、それを&lt;a href=&quot;#smtplib.SMTP.send_message&quot;&gt; &lt;code&gt;send_message()&lt;/code&gt; を&lt;/a&gt;介して送信できます。&lt;a href=&quot;email.examples#email-examples&quot;&gt;電子メール：例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="840dd19adeba7204bf237688be99f304d742eb60" translate="yes" xml:space="preserve">
          <source>In its basic form, &lt;a href=&quot;#module-pprint&quot;&gt;&lt;code&gt;pprint()&lt;/code&gt;&lt;/a&gt; shows the whole object:</source>
          <target state="translated">基本的な形式では、&lt;a href=&quot;#module-pprint&quot;&gt; &lt;code&gt;pprint()&lt;/code&gt; &lt;/a&gt;はオブジェクト全体を表示します。</target>
        </trans-unit>
        <trans-unit id="70cdc658f4f5ab332fd8069815a9324e25e35d83" translate="yes" xml:space="preserve">
          <source>In less formal terms, the replacement field can start with a &lt;em&gt;field_name&lt;/em&gt; that specifies the object whose value is to be formatted and inserted into the output instead of the replacement field. The &lt;em&gt;field_name&lt;/em&gt; is optionally followed by a &lt;em&gt;conversion&lt;/em&gt; field, which is preceded by an exclamation point &lt;code&gt;'!'&lt;/code&gt;, and a &lt;em&gt;format_spec&lt;/em&gt;, which is preceded by a colon &lt;code&gt;':'&lt;/code&gt;. These specify a non-default format for the replacement value.</source>
          <target state="translated">あまり正式ではありませんが、置換フィールドは、値がフォーマットされ、置換フィールドの代わりに出力に挿入されるオブジェクトを指定する&lt;em&gt;field_name&lt;/em&gt;で開始できます。オプションで、&lt;em&gt;field_nameの&lt;/em&gt;後には感嘆符 &lt;code&gt;'!'&lt;/code&gt; が前に付いた&lt;em&gt;変換&lt;/em&gt;フィールドが続きます。、およびコロン &lt;code&gt;':'&lt;/code&gt; が前に付く&lt;em&gt;format_spec&lt;/em&gt;。これらは、置換値のデフォルト以外のフォーマットを指定します。</target>
        </trans-unit>
        <trans-unit id="207eed5cab33c7fd44f50216fdcd9b7ae0089e35" translate="yes" xml:space="preserve">
          <source>In less ideal cases, applications can be checked for use of deprecated interfaces by passing &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-Wd&lt;/code&gt;&lt;/a&gt; to the Python interpreter (this is shorthand for &lt;code&gt;-W default&lt;/code&gt;) or setting &lt;code&gt;PYTHONWARNINGS=default&lt;/code&gt; in the environment. This enables default handling for all warnings, including those that are ignored by default. To change what action is taken for encountered warnings you can change what argument is passed to &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-W&lt;/code&gt;&lt;/a&gt; (e.g. &lt;code&gt;-W error&lt;/code&gt;). See the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-W&lt;/code&gt;&lt;/a&gt; flag for more details on what is possible.</source>
          <target state="translated">理想的ではないケースでは、Pythonインタープリターに&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt; &lt;code&gt;-Wd&lt;/code&gt; &lt;/a&gt;を渡すか（これは &lt;code&gt;-W default&lt;/code&gt; の省略形です）、または環境で &lt;code&gt;PYTHONWARNINGS=default&lt;/code&gt; を設定することにより、非推奨のインターフェースの使用についてアプリケーションをチェックできます。これにより、デフォルトで無視されるものも含め、すべての警告のデフォルト処理が有効になります。発生した警告に対して実行するアクションを変更するには、&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt; &lt;code&gt;-W&lt;/code&gt; に&lt;/a&gt;渡す引数を変更します（例： &lt;code&gt;-W error&lt;/code&gt; ）。可能なことの詳細については、&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt; &lt;code&gt;-W&lt;/code&gt; &lt;/a&gt;フラグを参照してください。</target>
        </trans-unit>
        <trans-unit id="5deeb99b968c8e414257704717db80af0082601c" translate="yes" xml:space="preserve">
          <source>In less ideal cases, applications can be checked for use of deprecated interfaces by passing &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-Wd&lt;/code&gt;&lt;/a&gt; to the Python interpreter (this is shorthand for &lt;code&gt;-W default&lt;/code&gt;) or setting &lt;code&gt;PYTHONWARNINGS=default&lt;/code&gt; in the environment. This enables default handling for all warnings, including those that are ignored by default. To change what action is taken for encountered warnings you can change what argument is passed to &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-W&lt;/code&gt;&lt;/a&gt; (e.g. &lt;code&gt;-W error&lt;/code&gt;). See the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-W&lt;/code&gt;&lt;/a&gt; flag for more details on what is possible.</source>
          <target state="translated">あまり理想的ではないケースでは、Pythonインタープリターに&lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-w&quot;&gt; &lt;code&gt;-Wd&lt;/code&gt; &lt;/a&gt;を渡すか（これは &lt;code&gt;-W default&lt;/code&gt; の省略形です）、環境で &lt;code&gt;PYTHONWARNINGS=default&lt;/code&gt; を設定することにより、非推奨のインターフェースの使用についてアプリケーションをチェックできます。これにより、デフォルトで無視される警告を含む、すべての警告のデフォルト処理が有効になります。発生した警告に対して実行されるアクションを変更するには、&lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-w&quot;&gt; &lt;code&gt;-W&lt;/code&gt; に&lt;/a&gt;渡される引数を変更できます（例： &lt;code&gt;-W error&lt;/code&gt; ）。可能なことの詳細については、&lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-w&quot;&gt; &lt;code&gt;-W&lt;/code&gt; &lt;/a&gt;フラグを参照してください。</target>
        </trans-unit>
        <trans-unit id="534991bf3a76b961bedcef085ae867583416a5d2" translate="yes" xml:space="preserve">
          <source>In many cases you will just be able to add &lt;code&gt;autospec=True&lt;/code&gt; to your existing &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; calls and then be protected against bugs due to typos and api changes.</source>
          <target state="translated">多くの場合、既存の&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;呼び出しに &lt;code&gt;autospec=True&lt;/code&gt; を追加するだけで、タイプミスやAPIの変更によるバグから保護できます。</target>
        </trans-unit>
        <trans-unit id="cd8b6f5d72094bed2a418a171229c3a3461791a6" translate="yes" xml:space="preserve">
          <source>In many use-cases one doesn&amp;rsquo;t care what the actual value of an enumeration is. There are several ways to define this type of simple enumeration:</source>
          <target state="translated">多くのユースケースでは、列挙の実際の値が何であるかを気にしません。このタイプの単純な列挙を定義するには、いくつかの方法があります。</target>
        </trans-unit>
        <trans-unit id="683dda921eb9dde69c65282fd8a1442adc4883df" translate="yes" xml:space="preserve">
          <source>In most cases a copy-and-paste of an interactive console session works fine, but doctest isn&amp;rsquo;t trying to do an exact emulation of any specific Python shell.</source>
          <target state="translated">ほとんどの場合、インタラクティブコンソールセッションのコピーアンドペーストは問題なく機能しますが、doctestは特定のPythonシェルの正確なエミュレーションを実行しようとはしていません。</target>
        </trans-unit>
        <trans-unit id="3c95379866d99798cdc6b44f569e45b47b03caff" translate="yes" xml:space="preserve">
          <source>In most cases, end users of Python shouldn&amp;rsquo;t need to invoke this module directly (as &lt;code&gt;pip&lt;/code&gt; should be bootstrapped by default), but it may be needed if installing &lt;code&gt;pip&lt;/code&gt; was skipped when installing Python (or when creating a virtual environment) or after explicitly uninstalling &lt;code&gt;pip&lt;/code&gt;.</source>
          <target state="translated">ほとんどの場合、Pythonのエンドユーザーはこのモジュールを直接呼び出す必要はありません（デフォルトで &lt;code&gt;pip&lt;/code&gt; をブートストラップする必要があるため）が、Pythonのインストール時（または仮想環境の作成時）または後に &lt;code&gt;pip&lt;/code&gt; のインストールをスキップした場合に必要になることがあります。明示的に &lt;code&gt;pip&lt;/code&gt; をアンインストールします。</target>
        </trans-unit>
        <trans-unit id="976b8e0f0142bf68fb963efdbb1f64f443c3a2d4" translate="yes" xml:space="preserve">
          <source>In most cases, no additional code is needed to make instances picklable. By default, pickle will retrieve the class and the attributes of an instance via introspection. When a class instance is unpickled, its &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; method is usually &lt;em&gt;not&lt;/em&gt; invoked. The default behaviour first creates an uninitialized instance and then restores the saved attributes. The following code shows an implementation of this behaviour:</source>
          <target state="translated">ほとんどの場合、インスタンスをピクル可能にするために追加のコードは必要ありません。デフォルトでは、pickleはイントロスペクションを介してインスタンスのクラスと属性を取得します。クラスインスタンスがunpickledされるとき、その&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;メソッドは通常呼び出され&lt;em&gt;ません&lt;/em&gt;。デフォルトの動作では、最初に初期化されていないインスタンスが作成され、次に保存された属性が復元されます。次のコードは、この動作の実装を示しています。</target>
        </trans-unit>
        <trans-unit id="cabb038d56d4da17821816a55c6f8a5a0d8697d5" translate="yes" xml:space="preserve">
          <source>In most cases, no additional code is needed to make instances picklable. By default, pickle will retrieve the class and the attributes of an instance via introspection. When a class instance is unpickled, its &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; method is usually &lt;em&gt;not&lt;/em&gt; invoked. The default behaviour first creates an uninitialized instance and then restores the saved attributes. The following code shows an implementation of this behaviour:</source>
          <target state="translated">ほとんどの場合、インスタンスを選択可能にするために追加のコードは必要ありません。デフォルトでは、pickleはイントロスペクションを介してインスタンスのクラスと属性を取得します。クラスインスタンスの選択が解除されると、通常、その&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;メソッドは呼び出され&lt;em&gt;ません&lt;/em&gt;。デフォルトの動作では、最初に初期化されていないインスタンスが作成され、次に保存された属性が復元されます。次のコードは、この動作の実装を示しています。</target>
        </trans-unit>
        <trans-unit id="4529cbb146eb6065739aafbd505c95e547aa3ac8" translate="yes" xml:space="preserve">
          <source>In most coding situations, strings are translated where they are coded. Occasionally however, you need to mark strings for translation, but defer actual translation until later. A classic example is:</source>
          <target state="translated">ほとんどのコーディング状況では、文字列はコーディングされた場所で翻訳されます。しかし、時折、文字列を翻訳するためにマークしておきながら、実際の翻訳は後回しにする必要がある場合があります。典型的な例は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="c31666ba6595f7dfef709e3c800c98df8b264362" translate="yes" xml:space="preserve">
          <source>In most of the cases the syntax is similar to the old &lt;code&gt;%&lt;/code&gt;-formatting, with the addition of the &lt;code&gt;{}&lt;/code&gt; and with &lt;code&gt;:&lt;/code&gt; used instead of &lt;code&gt;%&lt;/code&gt;. For example, &lt;code&gt;'%03.2f'&lt;/code&gt; can be translated to &lt;code&gt;'{:03.2f}'&lt;/code&gt;.</source>
          <target state="translated">ほとんどの場合、構文は以前の &lt;code&gt;%&lt;/code&gt; 形式と似ていますが、 &lt;code&gt;%&lt;/code&gt; の代わりに &lt;code&gt;{}&lt;/code&gt; と &lt;code&gt;:&lt;/code&gt; が追加されています。たとえば、 &lt;code&gt;'%03.2f'&lt;/code&gt; は &lt;code&gt;'{:03.2f}'&lt;/code&gt; 変換できます。</target>
        </trans-unit>
        <trans-unit id="f1d67672f1befe30b1ea6b9c0e813f8ca041dc72" translate="yes" xml:space="preserve">
          <source>In most situations, however, there&amp;rsquo;s only one form control with a particular name in a form and then you expect and need only one value associated with this name. So you write a script containing for example this code:</source>
          <target state="translated">ただし、ほとんどの状況では、フォーム内に特定の名前を持つフォームコントロールが1つだけあり、この名前に関連付けられている値は1つだけであることが予想されます。たとえば、次のコードを含むスクリプトを記述します。</target>
        </trans-unit>
        <trans-unit id="183e56009447f48c5edb38c8e56a603f6df422c3" translate="yes" xml:space="preserve">
          <source>In most typical applications, &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt; will take care of formatting and printing any usage or error messages. However, several formatting methods are available:</source>
          <target state="translated">ほとんどの一般的なアプリケーションでは、&lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt; &lt;code&gt;parse_args()&lt;/code&gt; &lt;/a&gt;が使用方法やエラーメッセージのフォーマットと出力を処理します。ただし、いくつかのフォーマット方法を使用できます。</target>
        </trans-unit>
        <trans-unit id="b6110d599bf96dfc74514b0a56521412fa449261" translate="yes" xml:space="preserve">
          <source>In normal operation it should not be necessary to call this method explicitly. It is used to implement other methods and may be useful for testing private extensions.</source>
          <target state="translated">通常の運用では、このメソッドを明示的に呼び出す必要はないはずです。他のメソッドを実装するために使用され、プライベートな拡張機能をテストするのに便利かもしれません。</target>
        </trans-unit>
        <trans-unit id="f8321d4dc57900cf19439382b3532766a68fb010" translate="yes" xml:space="preserve">
          <source>In normal operation it should not be necessary to call this method explicitly. It will be implicitly called by the &lt;a href=&quot;#smtplib.SMTP.sendmail&quot;&gt;&lt;code&gt;sendmail()&lt;/code&gt;&lt;/a&gt; when necessary.</source>
          <target state="translated">通常の操作では、このメソッドを明示的に呼び出す必要はありません。必要に応じて、&lt;a href=&quot;#smtplib.SMTP.sendmail&quot;&gt; &lt;code&gt;sendmail()&lt;/code&gt; &lt;/a&gt;によって暗黙的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a16e8babf22923c28939e3500c17a67bb3cff77f" translate="yes" xml:space="preserve">
          <source>In order for a class to define its own copy implementation, it can define special methods &lt;code&gt;__copy__()&lt;/code&gt; and &lt;code&gt;__deepcopy__()&lt;/code&gt;. The former is called to implement the shallow copy operation; no additional arguments are passed. The latter is called to implement the deep copy operation; it is passed one argument, the &lt;code&gt;memo&lt;/code&gt; dictionary. If the &lt;code&gt;__deepcopy__()&lt;/code&gt; implementation needs to make a deep copy of a component, it should call the &lt;a href=&quot;#copy.deepcopy&quot;&gt;&lt;code&gt;deepcopy()&lt;/code&gt;&lt;/a&gt; function with the component as first argument and the memo dictionary as second argument.</source>
          <target state="translated">クラスが独自のコピー実装を定義するために、特別なメソッド &lt;code&gt;__copy__()&lt;/code&gt; および &lt;code&gt;__deepcopy__()&lt;/code&gt; 定義できます。前者は、浅いコピー操作を実装するために呼び出されます。追加の引数は渡されません。後者は、ディープコピー操作を実装するために呼び出されます。 1つの引数、 &lt;code&gt;memo&lt;/code&gt; 辞書が渡されます。 &lt;code&gt;__deepcopy__()&lt;/code&gt; 実装でコンポーネントのディープコピーを作成する必要がある場合は、コンポーネントを最初の引数として、メモディクショナリを2番目の引数として、&lt;a href=&quot;#copy.deepcopy&quot;&gt; &lt;code&gt;deepcopy()&lt;/code&gt; &lt;/a&gt;関数を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="2e949fa3a8f8fff7c3917f737f8813ee6973dfb5" translate="yes" xml:space="preserve">
          <source>In order to correctly interoperate with the abstract base class machinery, the descriptor must identify itself as abstract using &lt;code&gt;__isabstractmethod__&lt;/code&gt;. In general, this attribute should be &lt;code&gt;True&lt;/code&gt; if any of the methods used to compose the descriptor are abstract. For example, Python&amp;rsquo;s built-in &lt;a href=&quot;functions#property&quot;&gt;&lt;code&gt;property&lt;/code&gt;&lt;/a&gt; does the equivalent of:</source>
          <target state="translated">抽象基本クラス機構と正しく相互運用するには、 &lt;code&gt;__isabstractmethod__&lt;/code&gt; を使用して記述子が自身を抽象として識別する必要があります。一般に、記述子の作成に使用されるメソッドのいずれかが抽象的である場合、この属性は &lt;code&gt;True&lt;/code&gt; である必要があります。たとえば、Pythonの組み込み&lt;a href=&quot;functions#property&quot;&gt; &lt;code&gt;property&lt;/code&gt; &lt;/a&gt;は、以下と同等です。</target>
        </trans-unit>
        <trans-unit id="c467fc7d115d441ac819d2c9cc479eaeade84679" translate="yes" xml:space="preserve">
          <source>In order to find objects and their documentation, &lt;a href=&quot;#module-pydoc&quot;&gt;&lt;code&gt;pydoc&lt;/code&gt;&lt;/a&gt; imports the module(s) to be documented. Therefore, any code on module level will be executed on that occasion. Use an &lt;code&gt;if __name__ == '__main__':&lt;/code&gt; guard to only execute code when a file is invoked as a script and not just imported.</source>
          <target state="translated">オブジェクトとそのドキュメントを見つけるために、&lt;a href=&quot;#module-pydoc&quot;&gt; &lt;code&gt;pydoc&lt;/code&gt; &lt;/a&gt;はドキュメント化されるモジュールをインポートします。したがって、モジュールレベルのコードはすべてそのときに実行されます。 &lt;code&gt;if __name__ == '__main__':&lt;/code&gt; ガードを使用して、ファイルがインポートされただけでなく、スクリプトとして呼び出されたときにのみコードを実行します。</target>
        </trans-unit>
        <trans-unit id="397d9ba9a94e1a39ad054c3d3560e0518f095dd9" translate="yes" xml:space="preserve">
          <source>In order to prepare your code for I18N, you need to look at all the strings in your files. Any string that needs to be translated should be marked by wrapping it in &lt;code&gt;_('...')&lt;/code&gt; &amp;mdash; that is, a call to the function &lt;code&gt;_()&lt;/code&gt;. For example:</source>
          <target state="translated">I18Nのコードを準備するには、ファイル内のすべての文字列を確認する必要があります。翻訳する必要のある文字列は、 &lt;code&gt;_('...')&lt;/code&gt; でラップしてマークする必要があります。つまり、関数 &lt;code&gt;_()&lt;/code&gt; を呼び出します。例えば：</target>
        </trans-unit>
        <trans-unit id="7a53010fccc6cd571ec768b9ab052d773d9305f6" translate="yes" xml:space="preserve">
          <source>In order to preserve backwards compatibility, enum values are also present in the &lt;a href=&quot;http.client#module-http.client&quot;&gt;&lt;code&gt;http.client&lt;/code&gt;&lt;/a&gt; module in the form of constants. The enum name is equal to the constant name (i.e. &lt;code&gt;http.HTTPStatus.OK&lt;/code&gt; is also available as &lt;code&gt;http.client.OK&lt;/code&gt;).</source>
          <target state="translated">下位互換性を維持するために、列挙値は&lt;a href=&quot;http.client#module-http.client&quot;&gt; &lt;code&gt;http.client&lt;/code&gt; &lt;/a&gt;モジュールにも定数の形で存在します。列挙名は定数名と等しい（すなわち &lt;code&gt;http.HTTPStatus.OK&lt;/code&gt; はまたとして入手可能である &lt;code&gt;http.client.OK&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="481a2a420e5dd7f44eee0da58267e4d5486f1e6a" translate="yes" xml:space="preserve">
          <source>In order to stop comparison from falling back to the default scheme of comparing object addresses, datetime comparison normally raises &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if the other comparand isn&amp;rsquo;t also a &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; object. However, &lt;code&gt;NotImplemented&lt;/code&gt; is returned instead if the other comparand has a &lt;code&gt;timetuple()&lt;/code&gt; attribute. This hook gives other kinds of date objects a chance at implementing mixed-type comparison. If not, when a &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; object is compared to an object of a different type, &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised unless the comparison is &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt;. The latter cases return &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, respectively.</source>
          <target state="translated">オブジェクトアドレスを比較するデフォルトのスキームにフォールバックする比較を停止するために、他の被比較数が&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;オブジェクトでもない場合、通常、datetime比較は&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;を発生させます。ただし、他の &lt;code&gt;timetuple()&lt;/code&gt; 比較数がtimetuple（）属性を持っている場合は、代わりに &lt;code&gt;NotImplemented&lt;/code&gt; が返されます。このフックは、他の種類の日付オブジェクトに、混合型の比較を実装する機会を与えます。そうでない場合、&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;オブジェクトが別のタイプのオブジェクトと比較されると、比較が &lt;code&gt;==&lt;/code&gt; または &lt;code&gt;!=&lt;/code&gt; でない限り、&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が発生します。後者の場合は、それぞれ&lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;constants#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="07c225cf30fe4108ef791e90675347d57b8d70e1" translate="yes" xml:space="preserve">
          <source>In other words, &lt;code&gt;date1 &amp;lt; date2&lt;/code&gt; if and only if &lt;code&gt;date1.toordinal() &amp;lt;
date2.toordinal()&lt;/code&gt;. Date comparison raises &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if the other comparand isn&amp;rsquo;t also a &lt;a href=&quot;#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; object. However, &lt;code&gt;NotImplemented&lt;/code&gt; is returned instead if the other comparand has a &lt;code&gt;timetuple()&lt;/code&gt; attribute. This hook gives other kinds of date objects a chance at implementing mixed-type comparison. If not, when a &lt;a href=&quot;#datetime.date&quot;&gt;&lt;code&gt;date&lt;/code&gt;&lt;/a&gt; object is compared to an object of a different type, &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised unless the comparison is &lt;code&gt;==&lt;/code&gt; or &lt;code&gt;!=&lt;/code&gt;. The latter cases return &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt;, respectively.</source>
          <target state="translated">つまり、 &lt;code&gt;date1 &amp;lt; date2&lt;/code&gt; &lt;code&gt;date1.toordinal() &amp;lt; date2.toordinal()&lt;/code&gt; 場合に限り、date1 &amp;lt;date2になります。他の被比較数が&lt;a href=&quot;#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;オブジェクトでもない場合、日付比較で&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が発生します。ただし、他の &lt;code&gt;timetuple()&lt;/code&gt; 比較数がtimetuple（）属性を持っている場合は、代わりに &lt;code&gt;NotImplemented&lt;/code&gt; が返されます。このフックは、他の種類の日付オブジェクトに、混合型の比較を実装する機会を与えます。そうでない場合、&lt;a href=&quot;#datetime.date&quot;&gt; &lt;code&gt;date&lt;/code&gt; &lt;/a&gt;オブジェクトが別のタイプのオブジェクトと比較されると、比較が &lt;code&gt;==&lt;/code&gt; または &lt;code&gt;!=&lt;/code&gt; でない限り、&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が発生します。後者の場合は、それぞれ&lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;constants#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="e300da15620669a3f28958bece86c7a1fd76bbb5" translate="yes" xml:space="preserve">
          <source>In particular, &lt;a href=&quot;#module-secrets&quot;&gt;&lt;code&gt;secrets&lt;/code&gt;&lt;/a&gt; should be used in preference to the default pseudo-random number generator in the &lt;a href=&quot;random#module-random&quot;&gt;&lt;code&gt;random&lt;/code&gt;&lt;/a&gt; module, which is designed for modelling and simulation, not security or cryptography.</source>
          <target state="translated">特に、セキュリティや暗号化ではなく、モデリングとシミュレーション用に設計された&lt;a href=&quot;random#module-random&quot;&gt; &lt;code&gt;random&lt;/code&gt; &lt;/a&gt;モジュールのデフォルトの疑似乱数ジェネレーターよりも&lt;a href=&quot;#module-secrets&quot;&gt; &lt;code&gt;secrets&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="2c07f61ca6c800f6888e2710a82a85e90f50bcc3" translate="yes" xml:space="preserve">
          <source>In particular, &lt;a href=&quot;#textwrap.fill&quot;&gt;&lt;code&gt;fill()&lt;/code&gt;&lt;/a&gt; accepts exactly the same keyword arguments as &lt;a href=&quot;#textwrap.wrap&quot;&gt;&lt;code&gt;wrap()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">特に、&lt;a href=&quot;#textwrap.fill&quot;&gt; &lt;code&gt;fill()&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;#textwrap.wrap&quot;&gt; &lt;code&gt;wrap()&lt;/code&gt; &lt;/a&gt;とまったく同じキーワード引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="1fa9bd11ecdf21c870d5be8de14f439777d27d8a" translate="yes" xml:space="preserve">
          <source>In particularly, &lt;a href=&quot;#module-secrets&quot;&gt;&lt;code&gt;secrets&lt;/code&gt;&lt;/a&gt; should be used in preference to the default pseudo-random number generator in the &lt;a href=&quot;random#module-random&quot;&gt;&lt;code&gt;random&lt;/code&gt;&lt;/a&gt; module, which is designed for modelling and simulation, not security or cryptography.</source>
          <target state="translated">特に、&lt;a href=&quot;#module-secrets&quot;&gt; &lt;code&gt;secrets&lt;/code&gt; &lt;/a&gt;は、セキュリティや暗号化ではなく、モデリングとシミュレーション用に設計された&lt;a href=&quot;random#module-random&quot;&gt; &lt;code&gt;random&lt;/code&gt; &lt;/a&gt;モジュールのデフォルトの疑似乱数ジェネレータよりも優先して使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="bed46a3402b9eb2783c1eff866fc79b96a61f33e" translate="yes" xml:space="preserve">
          <source>In previous versions &lt;a href=&quot;stdtypes#contextmanager.__enter__&quot;&gt;&lt;code&gt;__enter__()&lt;/code&gt;&lt;/a&gt; did not start the manager&amp;rsquo;s server process if it was not already started.</source>
          <target state="translated">以前のバージョンでは、&lt;a href=&quot;stdtypes#contextmanager.__enter__&quot;&gt; &lt;code&gt;__enter__()&lt;/code&gt; &lt;/a&gt;はまだ開始されていない場合、マネージャーのサーバープロセスを開始しませんでした。</target>
        </trans-unit>
        <trans-unit id="24635c5fed7456cbfad369f24972f6f06dd072a4" translate="yes" xml:space="preserve">
          <source>In protocols 2 and newer, classes that implements the &lt;a href=&quot;#object.__getnewargs_ex__&quot;&gt;&lt;code&gt;__getnewargs_ex__()&lt;/code&gt;&lt;/a&gt; method can dictate the values passed to the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt; method upon unpickling. The method must return a pair &lt;code&gt;(args, kwargs)&lt;/code&gt; where &lt;em&gt;args&lt;/em&gt; is a tuple of positional arguments and &lt;em&gt;kwargs&lt;/em&gt; a dictionary of named arguments for constructing the object. Those will be passed to the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt; method upon unpickling.</source>
          <target state="translated">プロトコル2以降では、&lt;a href=&quot;#object.__getnewargs_ex__&quot;&gt; &lt;code&gt;__getnewargs_ex__()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt; &lt;code&gt;__new__()&lt;/code&gt; &lt;/a&gt;メソッドを実装するクラスが、ピック解除時に__new __（）メソッドに渡される値を指示できます。このメソッドはペア &lt;code&gt;(args, kwargs)&lt;/code&gt; 返す必要があります。ここで、&lt;em&gt;args&lt;/em&gt;は位置引数のタプルであり、オブジェクトを構築するために名前付き引数の辞書を&lt;em&gt;kwargs&lt;/em&gt;します。これらはunpickle &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt; &lt;code&gt;__new__()&lt;/code&gt; &lt;/a&gt;メソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="c2d2d2615a8545e55e8010e6c482ce85ea1d3a7d" translate="yes" xml:space="preserve">
          <source>In protocols 2 and newer, classes that implements the &lt;a href=&quot;#object.__getnewargs_ex__&quot;&gt;&lt;code&gt;__getnewargs_ex__()&lt;/code&gt;&lt;/a&gt; method can dictate the values passed to the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt; method upon unpickling. The method must return a pair &lt;code&gt;(args, kwargs)&lt;/code&gt; where &lt;em&gt;args&lt;/em&gt; is a tuple of positional arguments and &lt;em&gt;kwargs&lt;/em&gt; a dictionary of named arguments for constructing the object. Those will be passed to the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt; method upon unpickling.</source>
          <target state="translated">プロトコル2以降では、&lt;a href=&quot;#object.__getnewargs_ex__&quot;&gt; &lt;code&gt;__getnewargs_ex__()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__new__&quot;&gt; &lt;code&gt;__new__()&lt;/code&gt; &lt;/a&gt;メソッドを実装するクラスは、選択解除時に__new __（）メソッドに渡される値を指示できます。このメソッドは、ペア &lt;code&gt;(args, kwargs)&lt;/code&gt; 返す必要があります。ここで、&lt;em&gt;args&lt;/em&gt;は位置引数のタプルであり、オブジェクトを構築するための名前付き引数の辞書を&lt;em&gt;kwargs&lt;/em&gt;します。これらは、&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__new__&quot;&gt; &lt;code&gt;__new__()&lt;/code&gt; &lt;/a&gt;すると__new __（）メソッドに渡されます。</target>
        </trans-unit>
        <trans-unit id="6463b988a254956fa89396a7c22c32f2fa351eb6" translate="yes" xml:space="preserve">
          <source>In regular release builds, the default warning filter has the following entries (in order of precedence):</source>
          <target state="translated">通常のリリースビルドでは、デフォルトの警告フィルタには以下のエントリがあります (優先度の高い順)。</target>
        </trans-unit>
        <trans-unit id="197d3ed98970db4c06270429cf9d72971fdb552f" translate="yes" xml:space="preserve">
          <source>In server mode, a client certificate request is sent to the client. The client may either ignore the request or send a certificate in order perform TLS client cert authentication. If the client chooses to send a certificate, it is verified. Any verification error immediately aborts the TLS handshake.</source>
          <target state="translated">サーバモードでは、クライアント証明書要求がクライアントに送信される。クライアントは、要求を無視するか、TLS クライアント証明書認証を実行するために証明書を送信するかのいずれかを選択することができる。クライアントが証明書の送信を選択した場合、それは検証されます。検証エラーが発生した場合は、直ちに TLS ハンドシェイクを中止します。</target>
        </trans-unit>
        <trans-unit id="784d3051d9c6418372556580d85a0525b4b27c71" translate="yes" xml:space="preserve">
          <source>In server mode, if you want to authenticate your clients using the SSL layer (rather than using a higher-level authentication mechanism), you&amp;rsquo;ll also have to specify &lt;a href=&quot;#ssl.CERT_REQUIRED&quot;&gt;&lt;code&gt;CERT_REQUIRED&lt;/code&gt;&lt;/a&gt; and similarly check the client certificate.</source>
          <target state="translated">サーバーモードで、（より高いレベルの認証メカニズムを使用するのではなく）SSL層を使用してクライアントを認証する場合は、&lt;a href=&quot;#ssl.CERT_REQUIRED&quot;&gt; &lt;code&gt;CERT_REQUIRED&lt;/code&gt; &lt;/a&gt;を指定し、同様にクライアント証明書を確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="7fcdfdefb8a40ad8a9c6f3c87a3f6215890319ef" translate="yes" xml:space="preserve">
          <source>In server mode, no certificate is requested from the client, so the client does not send any for client cert authentication.</source>
          <target state="translated">サーバ・モードでは、クライアントから証明書が要求されないため、クライアントはクライアント証明書認証のために証明書を送信しません。</target>
        </trans-unit>
        <trans-unit id="2aaa992863bbf78157aa977a683358ca504509cc" translate="yes" xml:space="preserve">
          <source>In short, those are: a conversion to &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;math#math.trunc&quot;&gt;&lt;code&gt;math.trunc()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#round&quot;&gt;&lt;code&gt;round()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;math#math.floor&quot;&gt;&lt;code&gt;math.floor()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;math#math.ceil&quot;&gt;&lt;code&gt;math.ceil()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;functions#divmod&quot;&gt;&lt;code&gt;divmod()&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;//&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;&amp;lt;&lt;/code&gt;, &lt;code&gt;&amp;lt;=&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;gt;=&lt;/code&gt;.</source>
          <target state="translated">つまり、これらは&lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;math#math.trunc&quot;&gt; &lt;code&gt;math.trunc()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;functions#round&quot;&gt; &lt;code&gt;round()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;math#math.floor&quot;&gt; &lt;code&gt;math.floor()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;math#math.ceil&quot;&gt; &lt;code&gt;math.ceil()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;functions#divmod&quot;&gt; &lt;code&gt;divmod()&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;//&lt;/code&gt; 、 &lt;code&gt;%&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;=&lt;/code&gt; 、 &lt;code&gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;gt;=&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="31dcfc591206e9e4f3d38c565f3b33cf822b6daf" translate="yes" xml:space="preserve">
          <source>In single threaded environments, it is preferable to not use this context at all. Instead, simply create contexts explicitly as described below.</source>
          <target state="translated">シングルスレッド環境では、このコンテキストは全く使用しない方が望ましいです。その代わりに、以下のように明示的にコンテキストを作成するだけです。</target>
        </trans-unit>
        <trans-unit id="828ef2d26cdb8bf2d36789116eed3ec4cdddbe9d" translate="yes" xml:space="preserve">
          <source>In some audio formats, such as .WAV files, 16, 24 and 32 bit samples are signed, but 8 bit samples are unsigned. So when converting to 8 bit wide samples for these formats, you need to also add 128 to the result:</source>
          <target state="translated">.WAV ファイルのようないくつかのオーディオフォーマットでは、16、24、32 ビットのサンプルは符号付きですが、8 ビットのサンプルは符号なしです。そのため、これらのフォーマットで8ビット幅のサンプルに変換する場合は、結果に128を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="b38f289e088de73aef52f5145e4194895bf3fc55" translate="yes" xml:space="preserve">
          <source>In some cases, it is desirable not to parse an input source at once, but to feed chunks of the document as they get available. Note that the reader will normally not read the entire file, but read it in chunks as well; still &lt;code&gt;parse()&lt;/code&gt; won&amp;rsquo;t return until the entire document is processed. So these interfaces should be used if the blocking behaviour of &lt;code&gt;parse()&lt;/code&gt; is not desirable.</source>
          <target state="translated">場合によっては、入力ソースを一度に解析するのではなく、ドキュメントのチャンクが利用可能になったときにフィードすることが望ましい場合があります。リーダーは通常、ファイル全体を読み取るのではなく、チャンク単位で読み取ることに注意してください。それでも &lt;code&gt;parse()&lt;/code&gt; は、ドキュメント全体が処理されるまで戻りません。したがって、 &lt;code&gt;parse()&lt;/code&gt; のブロッキング動作が望ましくない場合は、これらのインターフェースを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4d666daec390d8674c0e643958a689e1dd07bc25" translate="yes" xml:space="preserve">
          <source>In some cases, it may be appropriate to process part of a request synchronously, but to finish processing in a forked child depending on the request data. This can be implemented by using a synchronous server and doing an explicit fork in the request handler class &lt;a href=&quot;#socketserver.BaseRequestHandler.handle&quot;&gt;&lt;code&gt;handle()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">場合によっては、要求の一部を同期的に処理することは適切ですが、要求データに応じて分岐された子で処理を終了することもできます。これは、同期サーバーを使用し、要求ハンドラクラスの&lt;a href=&quot;#socketserver.BaseRequestHandler.handle&quot;&gt; &lt;code&gt;handle()&lt;/code&gt; &lt;/a&gt;メソッドで明示的なフォークを実行することで実装できます。</target>
        </trans-unit>
        <trans-unit id="f0c333efd73cd8e595b6e8b60656420e48337e96" translate="yes" xml:space="preserve">
          <source>In some cases, the existing tests may have been written using the &lt;a href=&quot;doctest#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; module. If so, &lt;a href=&quot;doctest#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; provides a &lt;code&gt;DocTestSuite&lt;/code&gt; class that can automatically build &lt;a href=&quot;#unittest.TestSuite&quot;&gt;&lt;code&gt;unittest.TestSuite&lt;/code&gt;&lt;/a&gt; instances from the existing &lt;a href=&quot;doctest#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt;-based tests.</source>
          <target state="translated">場合によっては、既存のテストは&lt;a href=&quot;doctest#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; &lt;/a&gt;モジュールを使用して記述されている可能性があります。もしそうなら、&lt;a href=&quot;doctest#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; のは、&lt;/a&gt;提供 &lt;code&gt;DocTestSuite&lt;/code&gt; の自動構築することができますクラス&lt;a href=&quot;#unittest.TestSuite&quot;&gt; &lt;code&gt;unittest.TestSuite&lt;/code&gt; インスタンスの&lt;/a&gt;既存のインスタンスを&lt;a href=&quot;doctest#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; の&lt;/a&gt;ベースのテストを。</target>
        </trans-unit>
        <trans-unit id="13ca056dd65f97d35e7322d84682a7bdc64b0f33" translate="yes" xml:space="preserve">
          <source>In some contexts, the &lt;a href=&quot;#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; module is used to transfer massive amounts of data. Therefore, it can be important to minimize the number of memory copies, to preserve performance and resource consumption. However, normal operation of the &lt;a href=&quot;#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; module, as it transforms a graph-like structure of objects into a sequential stream of bytes, intrinsically involves copying data to and from the pickle stream.</source>
          <target state="translated">一部のコンテキストでは、&lt;a href=&quot;#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;モジュールを使用して大量のデータを転送します。したがって、パフォーマンスとリソース消費を維持するために、メモリコピーの数を最小限に抑えることが重要になる場合があります。ただし、&lt;a href=&quot;#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;モジュールの通常の操作では、オブジェクトのグラフのような構造がバイトの順次ストリームに変換されるため、本質的に、ピクルストリームとの間でデータをコピーする必要があります。</target>
        </trans-unit>
        <trans-unit id="762bcb14ce3c58747a56f114dd90a102eeed2096" translate="yes" xml:space="preserve">
          <source>In string-type &lt;em&gt;repl&lt;/em&gt; arguments, in addition to the character escapes and backreferences described above, &lt;code&gt;\g&amp;lt;name&amp;gt;&lt;/code&gt; will use the substring matched by the group named &lt;code&gt;name&lt;/code&gt;, as defined by the &lt;code&gt;(?P&amp;lt;name&amp;gt;...)&lt;/code&gt; syntax. &lt;code&gt;\g&amp;lt;number&amp;gt;&lt;/code&gt; uses the corresponding group number; &lt;code&gt;\g&amp;lt;2&amp;gt;&lt;/code&gt; is therefore equivalent to &lt;code&gt;\2&lt;/code&gt;, but isn&amp;rsquo;t ambiguous in a replacement such as &lt;code&gt;\g&amp;lt;2&amp;gt;0&lt;/code&gt;. &lt;code&gt;\20&lt;/code&gt; would be interpreted as a reference to group 20, not a reference to group 2 followed by the literal character &lt;code&gt;'0'&lt;/code&gt;. The backreference &lt;code&gt;\g&amp;lt;0&amp;gt;&lt;/code&gt; substitutes in the entire substring matched by the RE.</source>
          <target state="translated">文字列型の&lt;em&gt;repl&lt;/em&gt;引数では、上記の文字エスケープと後方参照に加えて、 &lt;code&gt;\g&amp;lt;name&amp;gt;&lt;/code&gt; は、 &lt;code&gt;(?P&amp;lt;name&amp;gt;...)&lt;/code&gt; 構文で定義されているように、 &lt;code&gt;name&lt;/code&gt; という名前のグループに一致する部分文字列を使用します。 &lt;code&gt;\g&amp;lt;number&amp;gt;&lt;/code&gt; は対応するグループ番号を使用します。したがって、 &lt;code&gt;\g&amp;lt;2&amp;gt;&lt;/code&gt; は &lt;code&gt;\2&lt;/code&gt; と同等ですが、 &lt;code&gt;\g&amp;lt;2&amp;gt;0&lt;/code&gt; などの置換ではあいまいではありません。 &lt;code&gt;\20&lt;/code&gt; はグループ20への参照として解釈され、グループ2の後にリテラル文字 &lt;code&gt;'0'&lt;/code&gt; が続くものとして解釈されません。後方参照 &lt;code&gt;\g&amp;lt;0&amp;gt;&lt;/code&gt; は、REに一致する部分文字列全体を置き換えます。</target>
        </trans-unit>
        <trans-unit id="91032350df9be823abddd9974a0ded34862f00b1" translate="yes" xml:space="preserve">
          <source>In the Python DOM API, accessor functions are not required. If provided, they should take the form defined by the Python IDL mapping, but these methods are considered unnecessary since the attributes are accessible directly from Python. &amp;ldquo;Set&amp;rdquo; accessors should never be provided for &lt;code&gt;readonly&lt;/code&gt; attributes.</source>
          <target state="translated">Python DOM APIでは、アクセサ関数は必要ありません。指定する場合は、Python IDLマッピングで定義された形式にする必要がありますが、属性はPythonから直接アクセスできるため、これらのメソッドは不要と見なされます。「セット」アクセサは、 &lt;code&gt;readonly&lt;/code&gt; 属性に提供されるべきではありません。</target>
        </trans-unit>
        <trans-unit id="4e4271bc7aa921a4604f70acbcc32e5e1ad1a872" translate="yes" xml:space="preserve">
          <source>In the Python use of certificates, a client or server can use a certificate to prove who they are. The other side of a network connection can also be required to produce a certificate, and that certificate can be validated to the satisfaction of the client or server that requires such validation. The connection attempt can be set to raise an exception if the validation fails. Validation is done automatically, by the underlying OpenSSL framework; the application need not concern itself with its mechanics. But the application does usually need to provide sets of certificates to allow this process to take place.</source>
          <target state="translated">Pythonでの証明書の使用では、クライアントやサーバは証明書を使用して自分が誰であるかを証明することができます。ネットワーク接続の反対側も証明書を生成することを要求することができ、その証明書は、そのような検証を要求するクライアントやサーバーが満足するように検証することができます。検証に失敗した場合に例外を発生させるように接続の試行を設定することができます。検証は、基礎となる OpenSSL フレームワークによって自動的に行われます。しかし、アプリケーションは通常、このプロセスが行われるように証明書のセットを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="54b6896bea707355902a22e27a3a48a322ff4f93" translate="yes" xml:space="preserve">
          <source>In the UTF-8 mode, the encoding is &lt;code&gt;utf-8&lt;/code&gt; on any platform.</source>
          <target state="translated">UTF-8モードでは、エンコーディングはどのプラットフォームでも &lt;code&gt;utf-8&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cee2bffb2eb3a640bd33edd4c2273abf15d7944e" translate="yes" xml:space="preserve">
          <source>In the case of a &lt;em&gt;MandatoryRelease&lt;/em&gt; that has not yet occurred, &lt;em&gt;MandatoryRelease&lt;/em&gt; predicts the release in which the feature will become part of the language.</source>
          <target state="translated">以下の場合は&lt;em&gt;、MandatoryReleaseは&lt;/em&gt;まだ発生していない、&lt;em&gt;MandatoryReleaseはは&lt;/em&gt;機能が言語の一部となるリリースを予測します。</target>
        </trans-unit>
        <trans-unit id="b18036aece5d58aa31914b030641e2dd49980e5c" translate="yes" xml:space="preserve">
          <source>In the case of {}-formatting, you can specify formatting flags by placing them after the attribute name, separated from it with a colon. For example: a placeholder of &lt;code&gt;{msecs:03d}&lt;/code&gt; would format a millisecond value of &lt;code&gt;4&lt;/code&gt; as &lt;code&gt;004&lt;/code&gt;. Refer to the &lt;a href=&quot;stdtypes#str.format&quot;&gt;&lt;code&gt;str.format()&lt;/code&gt;&lt;/a&gt; documentation for full details on the options available to you.</source>
          <target state="translated">{} -formattingの場合は、属性名の後にコロンで区切り、フォーマットフラグを指定できます。たとえば、 &lt;code&gt;{msecs:03d}&lt;/code&gt; のプレースホルダーは、ミリ秒の値 &lt;code&gt;4&lt;/code&gt; を &lt;code&gt;004&lt;/code&gt; にフォーマットします。使用可能なオプションの詳細については、&lt;a href=&quot;stdtypes#str.format&quot;&gt; &lt;code&gt;str.format()&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="4de630fdc03f685b1b1a89c3374aa3f0cc3e42c5" translate="yes" xml:space="preserve">
          <source>In the case where the metadata file listing files (RECORD or SOURCES.txt) is missing, &lt;code&gt;files()&lt;/code&gt; will return &lt;code&gt;None&lt;/code&gt;. The caller may wish to wrap calls to &lt;code&gt;files()&lt;/code&gt; in &lt;a href=&quot;https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.always_iterable&quot;&gt;always_iterable&lt;/a&gt; or otherwise guard against this condition if the target distribution is not known to have the metadata present.</source>
          <target state="translated">メタデータファイルリストファイル（RECORDまたはSOURCES.txt）が見つからない場合、 &lt;code&gt;files()&lt;/code&gt; は &lt;code&gt;None&lt;/code&gt; を返します。呼び出し元は、 &lt;code&gt;files()&lt;/code&gt; への呼び出しを&lt;a href=&quot;https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.always_iterable&quot;&gt;always_iterableで&lt;/a&gt;ラップするか、ターゲット配布にメタデータが存在することがわかっていない場合にこの条件を回避することができます。</target>
        </trans-unit>
        <trans-unit id="bc1e2dbd142a208749274bd7580c8ed640f3d885" translate="yes" xml:space="preserve">
          <source>In the default Task implementation, the name will be visible in the &lt;a href=&quot;functions#repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt; output of a task object.</source>
          <target state="translated">デフォルトのTask実装では、名前はタスクオブジェクトの&lt;a href=&quot;functions#repr&quot;&gt; &lt;code&gt;repr()&lt;/code&gt; &lt;/a&gt;出力に表示されます。</target>
        </trans-unit>
        <trans-unit id="535fa5a6ec217819ca7ba659179db533e7a167c0" translate="yes" xml:space="preserve">
          <source>In the example above, &lt;a href=&quot;#configparser.ConfigParser&quot;&gt;&lt;code&gt;ConfigParser&lt;/code&gt;&lt;/a&gt; with &lt;em&gt;interpolation&lt;/em&gt; set to &lt;code&gt;BasicInterpolation()&lt;/code&gt; would resolve &lt;code&gt;%(home_dir)s&lt;/code&gt; to the value of &lt;code&gt;home_dir&lt;/code&gt; (&lt;code&gt;/Users&lt;/code&gt; in this case). &lt;code&gt;%(my_dir)s&lt;/code&gt; in effect would resolve to &lt;code&gt;/Users/lumberjack&lt;/code&gt;. All interpolations are done on demand so keys used in the chain of references do not have to be specified in any specific order in the configuration file.</source>
          <target state="translated">上記の例では、&lt;a href=&quot;#configparser.ConfigParser&quot;&gt; &lt;code&gt;ConfigParser&lt;/code&gt; &lt;/a&gt;と&lt;em&gt;補間&lt;/em&gt;にセット &lt;code&gt;BasicInterpolation()&lt;/code&gt; が解決なる &lt;code&gt;%(home_dir)s&lt;/code&gt; 値に &lt;code&gt;home_dir&lt;/code&gt; （ &lt;code&gt;/Users&lt;/code&gt; この場合）。有効な &lt;code&gt;%(my_dir)s&lt;/code&gt; は &lt;code&gt;/Users/lumberjack&lt;/code&gt; lumberjackに解決されます。すべての補間はオンデマンドで行われるため、参照のチェーンで使用されるキーを構成ファイルで特定の順序で指定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="5236764c8f4f33c47eb89b309f5c121471d4faba" translate="yes" xml:space="preserve">
          <source>In the final archive, &lt;code&gt;please_add.txt&lt;/code&gt; should be included, but &lt;code&gt;do_not_add.txt&lt;/code&gt; should not. Therefore we use the following:</source>
          <target state="translated">最後のアーカイブでは、 &lt;code&gt;please_add.txt&lt;/code&gt; が含まれなければならないが、 &lt;code&gt;do_not_add.txt&lt;/code&gt; はいけません。したがって、以下を使用します。</target>
        </trans-unit>
        <trans-unit id="6d863919b7beef0b7bffcfd48a2859d814cc5049" translate="yes" xml:space="preserve">
          <source>In the first approach, we read the data out of the fd&amp;rsquo;s buffer, and the byte values give you the signal numbers. This is simple, but in rare cases it can run into a problem: generally the fd will have a limited amount of buffer space, and if too many signals arrive too quickly, then the buffer may become full, and some signals may be lost. If you use this approach, then you should set &lt;code&gt;warn_on_full_buffer=True&lt;/code&gt;, which will at least cause a warning to be printed to stderr when signals are lost.</source>
          <target state="translated">最初のアプローチでは、fdのバッファーからデータを読み取り、バイト値からシグナル番号を取得します。これは簡単ですが、まれに問題が発生する可能性があります。通常、fdには限られた量のバッファースペースがあり、あまりに多くの信号があまりに速く到着すると、バッファーがいっぱいになり、一部の信号が失われる可能性があります。この方法を使用する場合は、 &lt;code&gt;warn_on_full_buffer=True&lt;/code&gt; を設定する必要があります。これにより、少なくとも信号が失われたときに警告がstderrに出力されます。</target>
        </trans-unit>
        <trans-unit id="b1f405b7b60dec7ef0ccbbabf3d071abe0435edb" translate="yes" xml:space="preserve">
          <source>In the following &lt;a href=&quot;https://docs.python.org/3.8/_downloads/6b45dc135219d1404be49d606589a11d/tzinfo_examples.py&quot;&gt;&lt;code&gt;tzinfo_examples.py&lt;/code&gt;&lt;/a&gt; file there are some examples of &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; classes:</source>
          <target state="translated">次の&lt;a href=&quot;https://docs.python.org/3.8/_downloads/6b45dc135219d1404be49d606589a11d/tzinfo_examples.py&quot;&gt; &lt;code&gt;tzinfo_examples.py&lt;/code&gt; &lt;/a&gt;ファイルには、&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;クラスの例がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="a54874ff53863bf6a4f06c4b54eda59c0a2820a8" translate="yes" xml:space="preserve">
          <source>In the following &lt;a href=&quot;https://docs.python.org/3.9/_downloads/6b45dc135219d1404be49d606589a11d/tzinfo_examples.py&quot;&gt;&lt;code&gt;tzinfo_examples.py&lt;/code&gt;&lt;/a&gt; file there are some examples of &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; classes:</source>
          <target state="translated">次の&lt;a href=&quot;https://docs.python.org/3.9/_downloads/6b45dc135219d1404be49d606589a11d/tzinfo_examples.py&quot;&gt; &lt;code&gt;tzinfo_examples.py&lt;/code&gt; &lt;/a&gt;ファイルには、&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;クラスの例がいくつかあります。</target>
        </trans-unit>
        <trans-unit id="2ff95d881b0899b985ba27eea20bbabb5d0f7f41" translate="yes" xml:space="preserve">
          <source>In the following documentation the argument list for functions is given. Methods, of course, have the additional first argument &lt;em&gt;self&lt;/em&gt; which is omitted here.</source>
          <target state="translated">次のドキュメントでは、関数の引数リストを示しています。もちろん、メソッドには追加の最初の引数&lt;em&gt;selfが&lt;/em&gt;ありますが、ここでは省略されています。</target>
        </trans-unit>
        <trans-unit id="ccfb56fcc1d858991309ad5c738b0606a30bbfb4" translate="yes" xml:space="preserve">
          <source>In the following example we&amp;rsquo;re going to intentionally cause a &lt;a href=&quot;#xmlrpc.client.Fault&quot;&gt;&lt;code&gt;Fault&lt;/code&gt;&lt;/a&gt; by returning a complex type object. The server code:</source>
          <target state="translated">次の例では、複合型オブジェクトを返すことにより、故意に&lt;a href=&quot;#xmlrpc.client.Fault&quot;&gt; &lt;code&gt;Fault&lt;/code&gt; &lt;/a&gt;させます。サーバーコード：</target>
        </trans-unit>
        <trans-unit id="e2223ff4a598cefedbdd585097e57edaf62fd136" translate="yes" xml:space="preserve">
          <source>In the following example we&amp;rsquo;re going to intentionally cause a &lt;a href=&quot;#xmlrpc.client.ProtocolError&quot;&gt;&lt;code&gt;ProtocolError&lt;/code&gt;&lt;/a&gt; by providing an invalid URI:</source>
          <target state="translated">次の例では、無効なURIを提供することにより、故意に&lt;a href=&quot;#xmlrpc.client.ProtocolError&quot;&gt; &lt;code&gt;ProtocolError&lt;/code&gt; を&lt;/a&gt;発生させます。</target>
        </trans-unit>
        <trans-unit id="1b98fb6821e17d529d323fbb51fcfeba5d9f117e" translate="yes" xml:space="preserve">
          <source>In the following example, the data are rounded, so that each value represents the midpoint of data classes, e.g. 1 is the midpoint of the class 0.5&amp;ndash;1.5, 2 is the midpoint of 1.5&amp;ndash;2.5, 3 is the midpoint of 2.5&amp;ndash;3.5, etc. With the data given, the middle value falls somewhere in the class 3.5&amp;ndash;4.5, and interpolation is used to estimate it:</source>
          <target state="translated">次の例では、データは丸められているため、各値はデータクラスの中点を表します。たとえば、1はクラス0.5〜1.5の中点、2は1.5〜2.5の中点、3は2.5〜3.5の中点です。 、など。与えられたデータで、中央の値はクラス3.5〜4.5のどこかにあり、補間を使用してそれを推定します。</target>
        </trans-unit>
        <trans-unit id="533603ba0650e5f7228aa22ac8ec4f95a8bd54f1" translate="yes" xml:space="preserve">
          <source>In the following example, we are sending a data-stream to the stdin of a CGI and reading the data it returns to us. Note that this example will only work when the Python installation supports SSL.</source>
          <target state="translated">次の例では、CGI の stdin にデータストリームを送信し、それが返すデータを読み込んでいます。この例は、Python のインストールが SSL をサポートしている場合にのみ動作することに注意してください。</target>
        </trans-unit>
        <trans-unit id="1fa008487812ea35726b9061adefa221aa756af2" translate="yes" xml:space="preserve">
          <source>In the following examples, we assume that the relevant functions have already been imported from the &lt;a href=&quot;#module-subprocess&quot;&gt;&lt;code&gt;subprocess&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">次の例では、関連する関数が&lt;a href=&quot;#module-subprocess&quot;&gt; &lt;code&gt;subprocess&lt;/code&gt; &lt;/a&gt;モジュールからすでにインポートされていると想定しています。</target>
        </trans-unit>
        <trans-unit id="8f9fe91e9abf59bd1adbaa56c89770d56c827a8d" translate="yes" xml:space="preserve">
          <source>In the following, &lt;em&gt;events&lt;/em&gt; is a bitwise mask indicating which I/O events should be waited for on a given file object. It can be a combination of the modules constants below:</source>
          <target state="translated">以下の&lt;em&gt;イベント&lt;/em&gt;は、特定のファイルオブジェクトで待機する必要があるI / Oイベントを示すビット単位のマスクです。以下のモジュール定数を組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="7ed55c5626284f0ef492f74cae3ebfc7bd5bdeb3" translate="yes" xml:space="preserve">
          <source>In the following, the term &lt;em&gt;referent&lt;/em&gt; means the object which is referred to by a weak reference.</source>
          <target state="translated">以下では、「&lt;em&gt;参照先」&lt;/em&gt;という用語は、弱参照によって参照されるオブジェクトを意味します。</target>
        </trans-unit>
        <trans-unit id="26053a87fbd2fcc58b5429c7f78fea5394e32809" translate="yes" xml:space="preserve">
          <source>In the function &lt;code&gt;greeting&lt;/code&gt;, the argument &lt;code&gt;name&lt;/code&gt; is expected to be of type &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; and the return type &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;. Subtypes are accepted as arguments.</source>
          <target state="translated">関数 &lt;code&gt;greeting&lt;/code&gt; では、引数 &lt;code&gt;name&lt;/code&gt; は&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;型であり、戻り型は&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; である&lt;/a&gt;と想定されています。サブタイプは引数として受け入れられます。</target>
        </trans-unit>
        <trans-unit id="58b661df5e22d9142f3da0d96532be500b1aac4f" translate="yes" xml:space="preserve">
          <source>In the general case, the steps required to perform the sorting of a given graph are as follows:</source>
          <target state="translated">一般的な場合、与えられたグラフのソートを実行するために必要なステップは以下の通りである。</target>
        </trans-unit>
        <trans-unit id="e8ac6b1e58da82a23a5cbc8050342436b8ca25b0" translate="yes" xml:space="preserve">
          <source>In the ideal case, the code will have a suitable test suite, and the test runner will take care of implicitly enabling all warnings when running tests (the test runner provided by the &lt;a href=&quot;unittest#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; module does this).</source>
          <target state="translated">理想的なケースでは、コードに適切なテストスイートがあり、テストランナーがテストの実行時にすべての警告を暗黙的に有効にします（&lt;a href=&quot;unittest#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;モジュールによって提供されるテストランナーがこれを行います）。</target>
        </trans-unit>
        <trans-unit id="eaf314b605ee1e93c7ef662a0fcaed6c7faecc98" translate="yes" xml:space="preserve">
          <source>In the next example (simple implementation of &lt;a href=&quot;shutil#shutil.rmtree&quot;&gt;&lt;code&gt;shutil.rmtree()&lt;/code&gt;&lt;/a&gt;), walking the tree bottom-up is essential, &lt;a href=&quot;#os.rmdir&quot;&gt;&lt;code&gt;rmdir()&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t allow deleting a directory before the directory is empty:</source>
          <target state="translated">次の例では（の簡単な実装&lt;a href=&quot;shutil#shutil.rmtree&quot;&gt; &lt;code&gt;shutil.rmtree()&lt;/code&gt; &lt;/a&gt;）、木のボトムアップを歩くことは不可欠であり、&lt;a href=&quot;#os.rmdir&quot;&gt; &lt;code&gt;rmdir()&lt;/code&gt; &lt;/a&gt;、ディレクトリが空になる前に、ディレクトリを削除することはできません。</target>
        </trans-unit>
        <trans-unit id="274c72518f8a919afc6da55f424febbdf2ea74bb" translate="yes" xml:space="preserve">
          <source>In the next example, walking the tree bottom-up is essential: &lt;a href=&quot;#os.rmdir&quot;&gt;&lt;code&gt;rmdir()&lt;/code&gt;&lt;/a&gt; doesn&amp;rsquo;t allow deleting a directory before the directory is empty:</source>
          <target state="translated">次の例では、ツリーをボトムアップで歩くことが重要です&lt;a href=&quot;#os.rmdir&quot;&gt; &lt;code&gt;rmdir()&lt;/code&gt; &lt;/a&gt;では、ディレクトリが空になる前にディレクトリを削除できません。</target>
        </trans-unit>
        <trans-unit id="17c1ee7708d83a788fb54edf47914b0f5328b88f" translate="yes" xml:space="preserve">
          <source>In the option list above, &amp;ldquo;a set&amp;rdquo; refers to any collection or iterable of strings, no ordering is expected.</source>
          <target state="translated">上記のオプションリストでは、「セット」は任意のコレクションまたは反復可能な文字列を指し、順序付けは想定されていません。</target>
        </trans-unit>
        <trans-unit id="54385cf5bdff670b83f3d300aefcf33fbb344d3c" translate="yes" xml:space="preserve">
          <source>In the previous section, you learned to write following code anytime you expected a user to post more than one value under one name:</source>
          <target state="translated">前のセクションでは、1つの名前の下に複数の値を投稿することが予想される場合には、以下のようなコードを書くことを学びました。</target>
        </trans-unit>
        <trans-unit id="233a7a8805657d96bca6651321789f9af3a538c2" translate="yes" xml:space="preserve">
          <source>In the second approach, we use the wakeup fd &lt;em&gt;only&lt;/em&gt; for wakeups, and ignore the actual byte values. In this case, all we care about is whether the fd&amp;rsquo;s buffer is empty or non-empty; a full buffer doesn&amp;rsquo;t indicate a problem at all. If you use this approach, then you should set &lt;code&gt;warn_on_full_buffer=False&lt;/code&gt;, so that your users are not confused by spurious warning messages.</source>
          <target state="translated">2番目のアプローチでは、ウェイクアップに&lt;em&gt;のみ&lt;/em&gt;ウェイクアップfdを使用し、実際のバイト値を無視します。この場合、私たちが気にするのは、fdのバッファーが空か空でないかだけです。バッファがいっぱいになっても問題はありません。このアプローチを使用する場合は、 &lt;code&gt;warn_on_full_buffer=False&lt;/code&gt; を設定して、ユーザーが偽の警告メッセージで混乱しないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="a8aa6122f62e104f1eaf23b08163261f3b40a9ba" translate="yes" xml:space="preserve">
          <source>In the second form, the caller makes the division point clear through the provision of a single colon: the dotted name to the left of the colon is a package to be imported, and the dotted name to the right is the object hierarchy within that package. Only one import is needed in this form. If it ends with the colon, then a module object is returned.</source>
          <target state="translated">コロンの左にある点線の名前がインポートするパッケージで、右にある点線の名前がそのパッケージ内のオブジェクト階層です。この形式で必要なインポートは1つだけです。コロンで終わる場合は、モジュールオブジェクトが返されます。</target>
        </trans-unit>
        <trans-unit id="89bc0401466a52c7fb4e1247c6f71a447d41beff" translate="yes" xml:space="preserve">
          <source>In the serializer, the &lt;em&gt;allow_nan&lt;/em&gt; parameter can be used to alter this behavior. In the deserializer, the &lt;em&gt;parse_constant&lt;/em&gt; parameter can be used to alter this behavior.</source>
          <target state="translated">シリアライザでは、&lt;em&gt;allow_nan&lt;/em&gt;パラメータを使用してこの動作を変更できます。デ&lt;em&gt;シリアライザー&lt;/em&gt;では、&lt;em&gt;parse_constant&lt;/em&gt;パラメーターを使用してこの動作を変更できます。</target>
        </trans-unit>
        <trans-unit id="38626b257d0d2b41bc10b255929643d1d13e8835" translate="yes" xml:space="preserve">
          <source>In the simple case then, you need only add the following bit of code to the main driver file of your application:</source>
          <target state="translated">単純な場合は、以下のコードをアプリケーションのメインドライバファイルに追加するだけです。</target>
        </trans-unit>
        <trans-unit id="cf29865f18bcaf9638d0168c8132a6142805a764" translate="yes" xml:space="preserve">
          <source>In the table &lt;em&gt;s&lt;/em&gt; is an instance of a mutable sequence type, &lt;em&gt;t&lt;/em&gt; is any iterable object and &lt;em&gt;x&lt;/em&gt; is an arbitrary object that meets any type and value restrictions imposed by &lt;em&gt;s&lt;/em&gt; (for example, &lt;a href=&quot;#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt; only accepts integers that meet the value restriction &lt;code&gt;0 &amp;lt;= x &amp;lt;= 255&lt;/code&gt;).</source>
          <target state="translated">表で、&lt;em&gt;s&lt;/em&gt;は可変シーケンス型のインスタンス、&lt;em&gt;t&lt;/em&gt;は任意の反復可能なオブジェクト、&lt;em&gt;x&lt;/em&gt;は&lt;em&gt;s&lt;/em&gt;によって課される任意の型と値の制限を満たす任意のオブジェクトです（たとえば、&lt;a href=&quot;#bytearray&quot;&gt; &lt;code&gt;bytearray&lt;/code&gt; &lt;/a&gt;は値の制限 &lt;code&gt;0 &amp;lt;= x &amp;lt;= 255&lt;/code&gt; を満たす整数のみを受け入れますx &amp;lt;= 255）。</target>
        </trans-unit>
        <trans-unit id="bd508f1ee529ccf68344f530644e56df47707298" translate="yes" xml:space="preserve">
          <source>In the tree above, each cell &lt;em&gt;k&lt;/em&gt; is topping &lt;code&gt;2*k+1&lt;/code&gt; and &lt;code&gt;2*k+2&lt;/code&gt;. In a usual binary tournament we see in sports, each cell is the winner over the two cells it tops, and we can trace the winner down the tree to see all opponents s/he had. However, in many computer applications of such tournaments, we do not need to trace the history of a winner. To be more memory efficient, when a winner is promoted, we try to replace it by something else at a lower level, and the rule becomes that a cell and the two cells it tops contain three different items, but the top cell &amp;ldquo;wins&amp;rdquo; over the two topped cells.</source>
          <target state="translated">上のツリーでは、各セル&lt;em&gt;k&lt;/em&gt;は &lt;code&gt;2*k+1&lt;/code&gt; および &lt;code&gt;2*k+2&lt;/code&gt; を上回っています。スポーツで見られる通常のバイナリトーナメントでは、各セルが2つのセルの勝者となります。勝者をツリーでたどることで、彼/彼女が持っているすべての対戦相手を確認できます。ただし、そのようなトーナメントの多くのコンピューターアプリケーションでは、勝者の履歴を追跡する必要はありません。よりメモリ効率を高めるために、勝者が昇格した場合、それを下位レベルの何かに置き換えようとします。ルールは、セルとその上にある2つのセルに3つの異なるアイテムが含まれ、一番上のセルが「勝つ」というルールになります。上の2つのセルの上。</target>
        </trans-unit>
        <trans-unit id="1defc52a5fe9f0a43f30bd5d3e26fbc4e063c451" translate="yes" xml:space="preserve">
          <source>In the typical usage of a &lt;a href=&quot;#unittest.TestSuite&quot;&gt;&lt;code&gt;TestSuite&lt;/code&gt;&lt;/a&gt; object, the &lt;a href=&quot;#unittest.TestSuite.run&quot;&gt;&lt;code&gt;run()&lt;/code&gt;&lt;/a&gt; method is invoked by a &lt;code&gt;TestRunner&lt;/code&gt; rather than by the end-user test harness.</source>
          <target state="translated">&lt;a href=&quot;#unittest.TestSuite&quot;&gt; &lt;code&gt;TestSuite&lt;/code&gt; &lt;/a&gt;オブジェクトの一般的な使用方法では、&lt;a href=&quot;#unittest.TestSuite.run&quot;&gt; &lt;code&gt;run()&lt;/code&gt; &lt;/a&gt;メソッドは、エンドユーザーのテストハーネスではなく、 &lt;code&gt;TestRunner&lt;/code&gt; によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5e430d29f738b72ec9b1e05af5395066734b68a2" translate="yes" xml:space="preserve">
          <source>In these tuples, &lt;em&gt;family&lt;/em&gt;, &lt;em&gt;type&lt;/em&gt;, &lt;em&gt;proto&lt;/em&gt; are all integers and are meant to be passed to the &lt;a href=&quot;#socket.socket&quot;&gt;&lt;code&gt;socket()&lt;/code&gt;&lt;/a&gt; function. &lt;em&gt;canonname&lt;/em&gt; will be a string representing the canonical name of the &lt;em&gt;host&lt;/em&gt; if &lt;code&gt;AI_CANONNAME&lt;/code&gt; is part of the &lt;em&gt;flags&lt;/em&gt; argument; else &lt;em&gt;canonname&lt;/em&gt; will be empty. &lt;em&gt;sockaddr&lt;/em&gt; is a tuple describing a socket address, whose format depends on the returned &lt;em&gt;family&lt;/em&gt; (a &lt;code&gt;(address, port)&lt;/code&gt; 2-tuple for &lt;a href=&quot;#socket.AF_INET&quot;&gt;&lt;code&gt;AF_INET&lt;/code&gt;&lt;/a&gt;, a &lt;code&gt;(address, port, flow info, scope id)&lt;/code&gt; 4-tuple for &lt;a href=&quot;#socket.AF_INET6&quot;&gt;&lt;code&gt;AF_INET6&lt;/code&gt;&lt;/a&gt;), and is meant to be passed to the &lt;a href=&quot;#socket.socket.connect&quot;&gt;&lt;code&gt;socket.connect()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">これらのタプルでは、&lt;em&gt;family&lt;/em&gt;、&lt;em&gt;type&lt;/em&gt;、&lt;em&gt;proto&lt;/em&gt;はすべて整数であり、&lt;a href=&quot;#socket.socket&quot;&gt; &lt;code&gt;socket()&lt;/code&gt; &lt;/a&gt;関数に渡されることを意図しています。&lt;em&gt;canonname&lt;/em&gt;は、 &lt;code&gt;AI_CANONNAME&lt;/code&gt; が&lt;em&gt;フラグ&lt;/em&gt;引数の一部である場合、&lt;em&gt;ホストの&lt;/em&gt;正規名を表す文字列になります。そうでない場合、&lt;em&gt;canonname&lt;/em&gt;は空になります。&lt;em&gt;sockaddr&lt;/em&gt;は、ソケットアドレスを説明するタプルであり、その形式は、返される&lt;em&gt;ファミリに&lt;/em&gt;依存します（&lt;a href=&quot;#socket.AF_INET&quot;&gt; &lt;code&gt;AF_INET&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;(address, port)&lt;/code&gt; 2タプル、 &lt;code&gt;(address, port, flow info, scope id)&lt;/code&gt; a AF_INET6の 4タプル&lt;a href=&quot;#socket.AF_INET6&quot;&gt; &lt;code&gt;AF_INET6&lt;/code&gt; &lt;/a&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;）、および&lt;a href=&quot;#socket.socket.connect&quot;&gt; &lt;code&gt;socket.connect()&lt;/code&gt; &lt;/a&gt;メソッドに渡されることを意図しています。</target>
        </trans-unit>
        <trans-unit id="4e88e0c7696c45209bd288d5a08d4350de9a5c69" translate="yes" xml:space="preserve">
          <source>In these tuples, &lt;em&gt;family&lt;/em&gt;, &lt;em&gt;type&lt;/em&gt;, &lt;em&gt;proto&lt;/em&gt; are all integers and are meant to be passed to the &lt;a href=&quot;#socket.socket&quot;&gt;&lt;code&gt;socket()&lt;/code&gt;&lt;/a&gt; function. &lt;em&gt;canonname&lt;/em&gt; will be a string representing the canonical name of the &lt;em&gt;host&lt;/em&gt; if &lt;code&gt;AI_CANONNAME&lt;/code&gt; is part of the &lt;em&gt;flags&lt;/em&gt; argument; else &lt;em&gt;canonname&lt;/em&gt; will be empty. &lt;em&gt;sockaddr&lt;/em&gt; is a tuple describing a socket address, whose format depends on the returned &lt;em&gt;family&lt;/em&gt; (a &lt;code&gt;(address, port)&lt;/code&gt; 2-tuple for &lt;a href=&quot;#socket.AF_INET&quot;&gt;&lt;code&gt;AF_INET&lt;/code&gt;&lt;/a&gt;, a &lt;code&gt;(address, port, flowinfo, scope_id)&lt;/code&gt; 4-tuple for &lt;a href=&quot;#socket.AF_INET6&quot;&gt;&lt;code&gt;AF_INET6&lt;/code&gt;&lt;/a&gt;), and is meant to be passed to the &lt;a href=&quot;#socket.socket.connect&quot;&gt;&lt;code&gt;socket.connect()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">これらのタプルでは、&lt;em&gt;family&lt;/em&gt;、&lt;em&gt;type&lt;/em&gt;、&lt;em&gt;proto&lt;/em&gt;はすべて整数であり、&lt;a href=&quot;#socket.socket&quot;&gt; &lt;code&gt;socket()&lt;/code&gt; &lt;/a&gt;関数に渡されることを意図しています。&lt;em&gt;canonname&lt;/em&gt;は、 &lt;code&gt;AI_CANONNAME&lt;/code&gt; が&lt;em&gt;flags&lt;/em&gt;引数の一部である場合、&lt;em&gt;ホストの&lt;/em&gt;正規名を表す文字列になります。それ以外の場合、&lt;em&gt;canonname&lt;/em&gt;は空になります。&lt;em&gt;sockaddrは&lt;/em&gt;フォーマット返さに依存ソケットアドレス、記述タプル&lt;em&gt;ファミリー&lt;/em&gt;（ &lt;code&gt;(address, port)&lt;/code&gt; 2タプル&lt;a href=&quot;#socket.AF_INET&quot;&gt; &lt;code&gt;AF_INET&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;(address, port, flowinfo, scope_id)&lt;/code&gt; 4タプル&lt;a href=&quot;#socket.AF_INET6&quot;&gt; &lt;code&gt;AF_INET6&lt;/code&gt; を&lt;/a&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;）、&lt;a href=&quot;#socket.socket.connect&quot;&gt; &lt;code&gt;socket.connect()&lt;/code&gt; &lt;/a&gt;メソッドに渡されることを意図しています。</target>
        </trans-unit>
        <trans-unit id="4f03f8295d4401efbee1454b689f377054911af8" translate="yes" xml:space="preserve">
          <source>In this case &lt;code&gt;MyDict&lt;/code&gt; has a single parameter, &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">この場合、 &lt;code&gt;MyDict&lt;/code&gt; には単一のパラメーター &lt;code&gt;T&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="1cbbe287f089dc8f706ae99f0052a682074dcad2" translate="yes" xml:space="preserve">
          <source>In this case all warnings are caught and no errors are raised.</source>
          <target state="translated">この場合、すべての警告がキャッチされ、エラーは発生しません。</target>
        </trans-unit>
        <trans-unit id="1c62940c22ee32d3fd980aa25414be64f0948aab" translate="yes" xml:space="preserve">
          <source>In this case if either warning was not raised, or some other warning was raised, &lt;a href=&quot;#test.support.check_warnings&quot;&gt;&lt;code&gt;check_warnings()&lt;/code&gt;&lt;/a&gt; would raise an error.</source>
          <target state="translated">この場合、いずれかの警告が発生しなかった場合、または他の警告が発生した場合、&lt;a href=&quot;#test.support.check_warnings&quot;&gt; &lt;code&gt;check_warnings()&lt;/code&gt; &lt;/a&gt;はエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="bb0757ca7b63d5e5a2bcaf0b7ed3ffc59abc635d" translate="yes" xml:space="preserve">
          <source>In this case no &lt;code&gt;*&lt;/code&gt; specifiers may occur in a format (since they require a sequential parameter list).</source>
          <target state="translated">この場合、形式で &lt;code&gt;*&lt;/code&gt; 指定子を使用することはできません（シーケンシャルパラメータリストが必要なため）。</target>
        </trans-unit>
        <trans-unit id="c4457d16ba5e9b6c681760e973da7e71471b05ca" translate="yes" xml:space="preserve">
          <source>In this case, &lt;a href=&quot;#dataclasses.fields&quot;&gt;&lt;code&gt;fields()&lt;/code&gt;&lt;/a&gt; will return &lt;a href=&quot;#dataclasses.Field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; objects for &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;, but not for &lt;code&gt;database&lt;/code&gt;.</source>
          <target state="translated">この場合、&lt;a href=&quot;#dataclasses.fields&quot;&gt; &lt;code&gt;fields()&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;i&lt;/code&gt; および &lt;code&gt;j&lt;/code&gt; の&lt;a href=&quot;#dataclasses.Field&quot;&gt; &lt;code&gt;Field&lt;/code&gt; &lt;/a&gt;オブジェクトを返しますが、 &lt;code&gt;database&lt;/code&gt; は返しません。</target>
        </trans-unit>
        <trans-unit id="79e6ea472a32e4246827af3631820637ed0278c5" translate="yes" xml:space="preserve">
          <source>In this case, you are marking translatable strings with the function &lt;code&gt;N_()&lt;/code&gt;, which won&amp;rsquo;t conflict with any definition of &lt;code&gt;_()&lt;/code&gt;. However, you will need to teach your message extraction program to look for translatable strings marked with &lt;code&gt;N_()&lt;/code&gt;. &lt;strong&gt;xgettext&lt;/strong&gt;, &lt;strong&gt;pygettext&lt;/strong&gt;, &lt;code&gt;pybabel extract&lt;/code&gt;, and &lt;strong&gt;xpot&lt;/strong&gt; all support this through the use of the &lt;code&gt;-k&lt;/code&gt; command-line switch. The choice of &lt;code&gt;N_()&lt;/code&gt; here is totally arbitrary; it could have just as easily been &lt;code&gt;MarkThisStringForTranslation()&lt;/code&gt;.</source>
          <target state="translated">この場合、翻訳可能な文字列を関数 &lt;code&gt;N_()&lt;/code&gt; でマークしています。これは、 &lt;code&gt;_()&lt;/code&gt; の定義と競合しません。ただし、メッセージ抽出プログラムに &lt;code&gt;N_()&lt;/code&gt; でマークされた翻訳可能な文字列を探すように指示する必要があります。&lt;strong&gt;xgettext&lt;/strong&gt;、&lt;strong&gt;pygettext&lt;/strong&gt;、 &lt;code&gt;pybabel extract&lt;/code&gt; 、および&lt;strong&gt;xpotは&lt;/strong&gt;すべて、 &lt;code&gt;-k&lt;/code&gt; コマンドラインスイッチを使用してこれをサポートします。ここでの &lt;code&gt;N_()&lt;/code&gt; の選択は完全に任意です。 &lt;code&gt;MarkThisStringForTranslation()&lt;/code&gt; と同じくらい簡単にできたでしょう。</target>
        </trans-unit>
        <trans-unit id="08bfb79410a7dd7df492ec826030edd1454851bb" translate="yes" xml:space="preserve">
          <source>In this documentation the term &amp;ldquo;coroutine&amp;rdquo; can be used for two closely related concepts:</source>
          <target state="translated">このドキュメントでは、「コルーチン」という用語は、2つの密接に関連する概念に使用できます。</target>
        </trans-unit>
        <trans-unit id="bdbd41293f905fe5e804f0cde22491ea56d4aad3" translate="yes" xml:space="preserve">
          <source>In this example we monkey patch &lt;code&gt;method&lt;/code&gt; to return &lt;code&gt;sentinel.some_object&lt;/code&gt;:</source>
          <target state="translated">この例では、我々サルパッチでは &lt;code&gt;method&lt;/code&gt; 戻ります &lt;code&gt;sentinel.some_object&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0cb1f4c4966c211b894b9eddb03c77f1514eec4f" translate="yes" xml:space="preserve">
          <source>In this example, both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; will be included in the added &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; method, which will be defined as:</source>
          <target state="translated">この例では &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; の両方が、次のように定義される追加の&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;メソッドに含まれます。</target>
        </trans-unit>
        <trans-unit id="fda6bd28cc033b50a0b8814524b1219024bf6ae2" translate="yes" xml:space="preserve">
          <source>In this example, both &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; will be included in the added &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; method, which will be defined as:</source>
          <target state="translated">この例では &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; の両方が追加された&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;メソッドに含まれ、次のように定義されます。</target>
        </trans-unit>
        <trans-unit id="c864378a7365c48cdd1ee95b362aa30d2db7c6fa" translate="yes" xml:space="preserve">
          <source>In this example, similar to the &lt;a href=&quot;#shutil-archiving-example&quot;&gt;one above&lt;/a&gt;, we show how to use &lt;a href=&quot;#shutil.make_archive&quot;&gt;&lt;code&gt;make_archive()&lt;/code&gt;&lt;/a&gt;, but this time with the usage of &lt;em&gt;base_dir&lt;/em&gt;. We now have the following directory structure:</source>
          <target state="translated">この例では、&lt;a href=&quot;#shutil-archiving-example&quot;&gt;上記の&lt;/a&gt;例と同様に、&lt;a href=&quot;#shutil.make_archive&quot;&gt; &lt;code&gt;make_archive()&lt;/code&gt; の&lt;/a&gt;使用方法を示していますが、今回は&lt;em&gt;base_dirを&lt;/em&gt;使用しています。これで、次のディレクトリ構造になりました。</target>
        </trans-unit>
        <trans-unit id="5b3d5cd546b56dd82f8608e853a7baf739475096" translate="yes" xml:space="preserve">
          <source>In this example, the string &lt;code&gt;'writing a log message'&lt;/code&gt; is marked as a candidate for translation, while the strings &lt;code&gt;'mylog.txt'&lt;/code&gt; and &lt;code&gt;'w'&lt;/code&gt; are not.</source>
          <target state="translated">この例では、 &lt;code&gt;'writing a log message'&lt;/code&gt; という文字列が翻訳の候補としてマークされていますが、 &lt;code&gt;'mylog.txt'&lt;/code&gt; および &lt;code&gt;'w'&lt;/code&gt; という文字列はそうではありません。</target>
        </trans-unit>
        <trans-unit id="c7def4d1e263f8bcd184ca5ff886690b3b0a0295" translate="yes" xml:space="preserve">
          <source>In this example, the unpickler imports the &lt;a href=&quot;os#os.system&quot;&gt;&lt;code&gt;os.system()&lt;/code&gt;&lt;/a&gt; function and then apply the string argument &amp;ldquo;echo hello world&amp;rdquo;. Although this example is inoffensive, it is not difficult to imagine one that could damage your system.</source>
          <target state="translated">この例では、unpicklerが&lt;a href=&quot;os#os.system&quot;&gt; &lt;code&gt;os.system()&lt;/code&gt; &lt;/a&gt;関数をインポートしてから、文字列引数「echo hello world」を適用します。この例は無害ですが、システムに損傷を与える可能性のある例を想像するのは難しくありません。</target>
        </trans-unit>
        <trans-unit id="e522fd7d7c94512496913a1631fcf4f5c248305d" translate="yes" xml:space="preserve">
          <source>In this example, we create a gzip&amp;rsquo;ed tar-file archive containing all files found in the &lt;code&gt;.ssh&lt;/code&gt; directory of the user:</source>
          <target state="translated">この例では、ユーザーの &lt;code&gt;.ssh&lt;/code&gt; ディレクトリにあるすべてのファイルを含むgzip圧縮されたtarファイルアーカイブを作成します。</target>
        </trans-unit>
        <trans-unit id="6ad2b90f1a4c574c3b7216fa3f340a8bbed08661" translate="yes" xml:space="preserve">
          <source>In this example, we&amp;rsquo;ll use the following helper function to display match objects a little more gracefully:</source>
          <target state="translated">この例では、次のヘルパー関数を使用して、一致オブジェクトをもう少し上品に表示します。</target>
        </trans-unit>
        <trans-unit id="ba2da0e1a0b23d485c22fd691fbc6b825bea722c" translate="yes" xml:space="preserve">
          <source>In this module, shared memory refers to &amp;ldquo;System V style&amp;rdquo; shared memory blocks (though is not necessarily implemented explicitly as such) and does not refer to &amp;ldquo;distributed shared memory&amp;rdquo;. This style of shared memory permits distinct processes to potentially read and write to a common (or shared) region of volatile memory. Processes are conventionally limited to only have access to their own process memory space but shared memory permits the sharing of data between processes, avoiding the need to instead send messages between processes containing that data. Sharing data directly via memory can provide significant performance benefits compared to sharing data via disk or socket or other communications requiring the serialization/deserialization and copying of data.</source>
          <target state="translated">このモジュールでは、共有メモリは「System Vスタイル」の共有メモリブロックを指し（必ずしもそのように明示的に実装される必要はありません）、「分散共有メモリ」を指しません。このスタイルの共有メモリにより、異なるプロセスが揮発性メモリの共通（または共有）領域に対して潜在的に読み書きできるようになります。プロセスは通常、独自のプロセスメモリ空間にのみアクセスできるように制限されていますが、共有メモリを使用すると、プロセス間でデータを共有できるため、代わりにそのデータを含むプロセス間でメッセージを送信する必要がなくなります。メモリを介してデータを直接共有すると、ディスク、ソケット、またはシリアル化/非シリアル化とデータのコピーを必要とするその他の通信を介してデータを共有する場合に比べて、パフォーマンスが大幅に向上します。</target>
        </trans-unit>
        <trans-unit id="ec3672efb81510d5a09d403c05abc447f604c84f" translate="yes" xml:space="preserve">
          <source>In this section, &amp;ldquo;a becomes b&amp;rdquo; means that b can be used as a replacement for a.</source>
          <target state="translated">このセクションでは、「aがbになる」は、aの代わりにbを使用できることを意味します。</target>
        </trans-unit>
        <trans-unit id="21e480a14f4cd9a1149fed8cca6a4c7d111a42ea" translate="yes" xml:space="preserve">
          <source>In this section, &amp;lsquo;C&amp;rsquo; refers to the</source>
          <target state="translated">このセクションでは、「C」は</target>
        </trans-unit>
        <trans-unit id="876936e3c1b8574b0dd98372c0c2aa05d7cc3d86" translate="yes" xml:space="preserve">
          <source>In this section, we describe the general mechanisms available to you to define, customize, and control how class instances are pickled and unpickled.</source>
          <target state="translated">このセクションでは、クラスインスタンスがどのようにピクルスされ、どのようにアンピクルスされるかを定義、カスタマイズ、制御するために利用可能な一般的なメカニズムについて説明します。</target>
        </trans-unit>
        <trans-unit id="609a689db13972f91eaeffe399356954f6e29a03" translate="yes" xml:space="preserve">
          <source>In those examples, note that when an in-place method is called, the computation and assignment are performed in two separate steps. The in-place functions listed below only do the first step, calling the in-place method. The second step, assignment, is not handled.</source>
          <target state="translated">これらの例では、インプレース・メソッドが呼び出されると、計算と代入が 2 つの別々のステップで実行されることに注意してください。以下にリストされているインプレース関数は、最初のステップであるインプレース・メソッドの呼び出しのみを行います。2 番目のステップである代入は処理されません。</target>
        </trans-unit>
        <trans-unit id="f3e67f78459f05a24ed8968a34d4f51980839f13" translate="yes" xml:space="preserve">
          <source>In traditional Unix the field &lt;code&gt;pw_passwd&lt;/code&gt; usually contains a password encrypted with a DES derived algorithm (see module &lt;a href=&quot;crypt#module-crypt&quot;&gt;&lt;code&gt;crypt&lt;/code&gt;&lt;/a&gt;). However most modern unices use a so-called &lt;em&gt;shadow password&lt;/em&gt; system. On those unices the &lt;em&gt;pw_passwd&lt;/em&gt; field only contains an asterisk (&lt;code&gt;'*'&lt;/code&gt;) or the letter &lt;code&gt;'x'&lt;/code&gt; where the encrypted password is stored in a file &lt;code&gt;/etc/shadow&lt;/code&gt; which is not world readable. Whether the &lt;em&gt;pw_passwd&lt;/em&gt; field contains anything useful is system-dependent. If available, the &lt;a href=&quot;spwd#module-spwd&quot;&gt;&lt;code&gt;spwd&lt;/code&gt;&lt;/a&gt; module should be used where access to the encrypted password is required.</source>
          <target state="translated">従来のUnixでは、フィールド &lt;code&gt;pw_passwd&lt;/code&gt; には通常、DES派生アルゴリズムで暗号化されたパスワードが含まれています（モジュール&lt;a href=&quot;crypt#module-crypt&quot;&gt; &lt;code&gt;crypt&lt;/code&gt; を&lt;/a&gt;参照）。ただし、ほとんどの最新のuniceは、いわゆる&lt;em&gt;シャドウパスワード&lt;/em&gt;システムを使用してい&lt;em&gt;ます&lt;/em&gt;。これらの&lt;em&gt;ユニスで&lt;/em&gt;は、&lt;em&gt;pw_passwd&lt;/em&gt;フィールドにはアスタリスク（ &lt;code&gt;'*'&lt;/code&gt; ）または文字 &lt;code&gt;'x'&lt;/code&gt; のみが含まれており、暗号化されたパスワードは、ファイル &lt;code&gt;/etc/shadow&lt;/code&gt; に格納されており、&lt;em&gt;誰でも読み取る&lt;/em&gt;ことができません。&lt;em&gt;pw_passwd&lt;/em&gt;フィールドに役立つ情報が含まれているかどうかは、システムによって異なります。使用可能な場合は、暗号化されたパスワードへのアクセスが必要な場合に&lt;a href=&quot;spwd#module-spwd&quot;&gt; &lt;code&gt;spwd&lt;/code&gt; &lt;/a&gt;モジュールを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4db947ef6cd05225fe3e644d287ef1d201b7690c" translate="yes" xml:space="preserve">
          <source>In-memory binary streams are also available as &lt;a href=&quot;#io.BytesIO&quot;&gt;&lt;code&gt;BytesIO&lt;/code&gt;&lt;/a&gt; objects:</source>
          <target state="translated">インメモリバイナリストリームは、&lt;a href=&quot;#io.BytesIO&quot;&gt; &lt;code&gt;BytesIO&lt;/code&gt; &lt;/a&gt;オブジェクトとしても利用できます。</target>
        </trans-unit>
        <trans-unit id="b6cfcf9ff1be78ddbf5f88cac85851468eeaa139" translate="yes" xml:space="preserve">
          <source>In-memory streams</source>
          <target state="translated">インメモリストリーム</target>
        </trans-unit>
        <trans-unit id="f1e0a688070a40f2e2db3ffb57db4a1558ede0ec" translate="yes" xml:space="preserve">
          <source>In-memory text streams are also available as &lt;a href=&quot;#io.StringIO&quot;&gt;&lt;code&gt;StringIO&lt;/code&gt;&lt;/a&gt; objects:</source>
          <target state="translated">インメモリテキストストリームは、&lt;a href=&quot;#io.StringIO&quot;&gt; &lt;code&gt;StringIO&lt;/code&gt; &lt;/a&gt;オブジェクトとしても利用できます。</target>
        </trans-unit>
        <trans-unit id="62f47cd6536074a736c1c116ad6886a50b7748af" translate="yes" xml:space="preserve">
          <source>In-place Operators</source>
          <target state="translated">場内のオペレーター</target>
        </trans-unit>
        <trans-unit id="8fde0e675981692ca7b1da663a1cf0845aae8f30" translate="yes" xml:space="preserve">
          <source>In-place operations are like binary operations, in that they remove TOS and TOS1, and push the result back on the stack, but the operation is done in-place when TOS1 supports it, and the resulting TOS may be (but does not have to be) the original TOS1.</source>
          <target state="translated">インプレース演算はバイナリ演算と似ていますが、TOSとTOS1を削除して結果をスタックに戻すという点ではバイナリ演算と似ていますが、演算はTOS1がサポートしている場合にインプレースで行われ、結果のTOSは元のTOS1であっても構いません(である必要はありません)。</target>
        </trans-unit>
        <trans-unit id="8af4b79f6c3a07f98f4ba1fb79d2c37561daffe3" translate="yes" xml:space="preserve">
          <source>Inability to resolve to an internal or external object.</source>
          <target state="translated">内部または外部のオブジェクトに解決できない。</target>
        </trans-unit>
        <trans-unit id="feb4a11c090061a50eb132ad1c6939bdf6f2540a" translate="yes" xml:space="preserve">
          <source>Include attributes such as line numbers and column offsets.</source>
          <target state="translated">行番号や列のオフセットなどの属性を含めます。</target>
        </trans-unit>
        <trans-unit id="1a6c755eb982a2f54a4da7973c3f73c77717a36d" translate="yes" xml:space="preserve">
          <source>Incomplete Types</source>
          <target state="translated">不完全なタイプ</target>
        </trans-unit>
        <trans-unit id="e6fd210ecfa24de959ef25c81cb5be14a187e9d4" translate="yes" xml:space="preserve">
          <source>Increment the line number and end line number of each node in the tree starting at &lt;em&gt;node&lt;/em&gt; by &lt;em&gt;n&lt;/em&gt;. This is useful to &amp;ldquo;move code&amp;rdquo; to a different location in a file.</source>
          <target state="translated">始まるツリー内の各ノードの行番号と終了行番号をインクリメント&lt;em&gt;ノード&lt;/em&gt;によって&lt;em&gt;N&lt;/em&gt;。これは、ファイル内の別の場所に「コードを移動」するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="fc380757d8f1313c5e79738a01b95f0245ea2bcd" translate="yes" xml:space="preserve">
          <source>Incremental (de)compression</source>
          <target state="translated">インクリメンタルデコンプレッション</target>
        </trans-unit>
        <trans-unit id="c0e4d91a0ac93c5179d6274198eca54354c0112e" translate="yes" xml:space="preserve">
          <source>Incremental Configuration</source>
          <target state="translated">インクリメンタル構成</target>
        </trans-unit>
        <trans-unit id="714de6e8dcb31cacd8f82e698735cc996d909c17" translate="yes" xml:space="preserve">
          <source>Incremental Encoding and Decoding</source>
          <target state="translated">インクリメンタルエンコードとデコード</target>
        </trans-unit>
        <trans-unit id="a70d136600a290d7d648bcefe4f894034d7a33c9" translate="yes" xml:space="preserve">
          <source>Incremental compression:</source>
          <target state="translated">インクリメンタル圧縮。</target>
        </trans-unit>
        <trans-unit id="a7f4a498ec26fd59fab8b07468072d9f25dbafa4" translate="yes" xml:space="preserve">
          <source>Incremental encoder and decoder classes or factory functions. These have to provide the interface defined by the base classes &lt;a href=&quot;#codecs.IncrementalEncoder&quot;&gt;&lt;code&gt;IncrementalEncoder&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#codecs.IncrementalDecoder&quot;&gt;&lt;code&gt;IncrementalDecoder&lt;/code&gt;&lt;/a&gt;, respectively. Incremental codecs can maintain state.</source>
          <target state="translated">インクリメンタルエンコーダーとデコーダーのクラスまたはファクトリー関数。これらは、基本クラス&lt;a href=&quot;#codecs.IncrementalEncoder&quot;&gt; &lt;code&gt;IncrementalEncoder&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#codecs.IncrementalDecoder&quot;&gt; &lt;code&gt;IncrementalDecoder&lt;/code&gt; &lt;/a&gt;によってそれぞれ定義されたインターフェースを提供する必要があります。インクリメンタルコーデックは状態を維持できます。</target>
        </trans-unit>
        <trans-unit id="cfc78b0aec9ec9307500e4e82c03e65603530f3f" translate="yes" xml:space="preserve">
          <source>IncrementalDecoder Objects</source>
          <target state="translated">IncrementalDecoder オブジェクト</target>
        </trans-unit>
        <trans-unit id="eda65be020f7ce434c41db14bb91b12c39b505b4" translate="yes" xml:space="preserve">
          <source>IncrementalEncoder Objects</source>
          <target state="translated">IncrementalEncoder オブジェクト</target>
        </trans-unit>
        <trans-unit id="4807b06d3e0ef5d4c1c771970fa1c0c8a1d5ba1f" translate="yes" xml:space="preserve">
          <source>IncrementalParser Objects</source>
          <target state="translated">インクリメンタルパーサオブジェクト</target>
        </trans-unit>
        <trans-unit id="f757e0a955188780b83c7c9c785807ad53aaa78c" translate="yes" xml:space="preserve">
          <source>Increments bytecode counter by &lt;em&gt;delta&lt;/em&gt;.</source>
          <target state="translated">バイトコードカウンターを&lt;em&gt;deltaだけ&lt;/em&gt;インクリメントします。</target>
        </trans-unit>
        <trans-unit id="9f38f8487043353879d3ca62212ab364189a37fc" translate="yes" xml:space="preserve">
          <source>Increments the progress bar&amp;rsquo;s value by &lt;em&gt;amount&lt;/em&gt;.</source>
          <target state="translated">プログレスバーの値を&lt;em&gt;量だけ増やし&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="bc9cdd48c3b4bc260e24e340e9220a7006377fb5" translate="yes" xml:space="preserve">
          <source>Indent Region</source>
          <target state="translated">インデント領域</target>
        </trans-unit>
        <trans-unit id="ba2fcfc71d761c5016af09f688576fdc3dc2595c" translate="yes" xml:space="preserve">
          <source>Indentation of nodes in AST (number of spaces).</source>
          <target state="translated">AST内のノードのインデント(スペースの数)。</target>
        </trans-unit>
        <trans-unit id="fb4844c6e4e3fdb04af9405295e30a7c41ae4efc" translate="yes" xml:space="preserve">
          <source>IndentationError</source>
          <target state="translated">IndentationError</target>
        </trans-unit>
        <trans-unit id="3cd6cb1c3ba0aa8ae172917a71df16fc02b82ac0" translate="yes" xml:space="preserve">
          <source>Independent of its category, each concrete stream object will also have various capabilities: it can be read-only, write-only, or read-write. It can also allow arbitrary random access (seeking forwards or backwards to any location), or only sequential access (for example in the case of a socket or pipe).</source>
          <target state="translated">具象ストリームオブジェクトは、そのカテゴリに関係なく、様々な機能を持っています:読み取り専用、書き込み専用、または読み書きが可能です。また、任意のランダムアクセス(任意の場所への前方または後方へのアクセス)や、シーケンシャルアクセス(例えば、ソケットやパイプの場合)のみを許可することもできます。</target>
        </trans-unit>
        <trans-unit id="c2df9b932637fe9d32a0f16da1c11873398f873d" translate="yes" xml:space="preserve">
          <source>Index</source>
          <target state="translated">Index</target>
        </trans-unit>
        <trans-unit id="383b324a3291b51f1e54ef9c0d763010fbc5e171" translate="yes" xml:space="preserve">
          <source>IndexError</source>
          <target state="translated">IndexError</target>
        </trans-unit>
        <trans-unit id="04f77b5a53e8914ea949c0d3dbe59ff927176c3a" translate="yes" xml:space="preserve">
          <source>Indexed Assignment</source>
          <target state="translated">インデックス化された課題</target>
        </trans-unit>
        <trans-unit id="181136c2e116ea448074c254b778be7e9dec6c9a" translate="yes" xml:space="preserve">
          <source>Indexed Deletion</source>
          <target state="translated">インデックス削除</target>
        </trans-unit>
        <trans-unit id="6dabd048a18ebfcff9a07def85323d4996693e98" translate="yes" xml:space="preserve">
          <source>Indexed databases of objects; uses &lt;a href=&quot;#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">オブジェクトのインデックス付きデータベース。&lt;a href=&quot;#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;使用。</target>
        </trans-unit>
        <trans-unit id="9951861c21df18489a5872209655d6f9039b5e2a" translate="yes" xml:space="preserve">
          <source>Indexing</source>
          <target state="translated">Indexing</target>
        </trans-unit>
        <trans-unit id="6face659f95ee23785ce3d17089bd3d63183d57c" translate="yes" xml:space="preserve">
          <source>Indicate that a formerly enqueued task is complete.</source>
          <target state="translated">以前にキューに入れていたタスクが完了したことを示します。</target>
        </trans-unit>
        <trans-unit id="9433ffdce775eecb1add8a4a73f1d9fde76ac24a" translate="yes" xml:space="preserve">
          <source>Indicate that a formerly enqueued task is complete. Used by queue consumer threads. For each &lt;a href=&quot;#queue.Queue.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; used to fetch a task, a subsequent call to &lt;a href=&quot;#queue.Queue.task_done&quot;&gt;&lt;code&gt;task_done()&lt;/code&gt;&lt;/a&gt; tells the queue that the processing on the task is complete.</source>
          <target state="translated">以前にエンキューされたタスクが完了したことを示します。キューコンシューマスレッドによって使用されます。タスクのフェッチに使用される&lt;a href=&quot;#queue.Queue.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;ごとに、後続の&lt;a href=&quot;#queue.Queue.task_done&quot;&gt; &lt;code&gt;task_done()&lt;/code&gt; の&lt;/a&gt;呼び出しは、タスクの処理が完了したことをキューに通知します。</target>
        </trans-unit>
        <trans-unit id="ccfdc69dc0a7d14a2b1d58743e040b3b8aaf8ad5" translate="yes" xml:space="preserve">
          <source>Indicate that a formerly enqueued task is complete. Used by queue consumers. For each &lt;a href=&quot;#multiprocessing.Queue.get&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; used to fetch a task, a subsequent call to &lt;a href=&quot;#multiprocessing.JoinableQueue.task_done&quot;&gt;&lt;code&gt;task_done()&lt;/code&gt;&lt;/a&gt; tells the queue that the processing on the task is complete.</source>
          <target state="translated">以前にエンキューされたタスクが完了したことを示します。キューコンシューマによって使用されます。タスクのフェッチに使用される&lt;a href=&quot;#multiprocessing.Queue.get&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;ごとに、後続の&lt;a href=&quot;#multiprocessing.JoinableQueue.task_done&quot;&gt; &lt;code&gt;task_done()&lt;/code&gt; の&lt;/a&gt;呼び出しは、タスクの処理が完了したことをキューに通知します。</target>
        </trans-unit>
        <trans-unit id="4ca6309605e634742c386580b3f395d337f036d3" translate="yes" xml:space="preserve">
          <source>Indicate that no more data will be put on this queue by the current process. The background thread will quit once it has flushed all buffered data to the pipe. This is called automatically when the queue is garbage collected.</source>
          <target state="translated">現在のプロセスがこれ以上のデータをこのキューに入れないことを示します。バックグラウンドスレッドは、すべてのバッファリングされたデータをパイプに流すと終了します。これは、キューがガベージコレクションされたときに自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="254811cd35f7a531bb479a6926167434a7f0d4ff" translate="yes" xml:space="preserve">
          <source>Indicate that the &lt;em&gt;num&lt;/em&gt; screen lines, starting at line &lt;em&gt;beg&lt;/em&gt;, are corrupted and should be completely redrawn on the next &lt;a href=&quot;#curses.window.refresh&quot;&gt;&lt;code&gt;refresh()&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">行&lt;em&gt;beg&lt;/em&gt;から始まる&lt;em&gt;num&lt;/em&gt;画面行が破損しており、次の&lt;a href=&quot;#curses.window.refresh&quot;&gt; &lt;code&gt;refresh()&lt;/code&gt; &lt;/a&gt;呼び出しで完全に再描画する必要があることを示します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2f187f4b63c4e285d79b6d0cf7c7d659b0be99d5" translate="yes" xml:space="preserve">
          <source>Indicates if a message of severity &lt;em&gt;level&lt;/em&gt; would be processed by this logger. This method checks first the module-level level set by &lt;code&gt;logging.disable(level)&lt;/code&gt; and then the logger&amp;rsquo;s effective level as determined by &lt;a href=&quot;#logging.Logger.getEffectiveLevel&quot;&gt;&lt;code&gt;getEffectiveLevel()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">重大度&lt;em&gt;レベルの&lt;/em&gt;メッセージがこのロガーによって処理されるかどうかを示します。このメソッドは、最初に &lt;code&gt;logging.disable(level)&lt;/code&gt; によって設定されたモジュールレベルのレベルをチェックし、次に&lt;a href=&quot;#logging.Logger.getEffectiveLevel&quot;&gt; &lt;code&gt;getEffectiveLevel()&lt;/code&gt; &lt;/a&gt;によって決定されたロガーの有効レベルをチェックします。</target>
        </trans-unit>
        <trans-unit id="c5c853728e2e1fe3705b4dcef5fcbee47c970151" translate="yes" xml:space="preserve">
          <source>Indicates that an application on 64-bit Windows should operate on the 32-bit registry view.</source>
          <target state="translated">64ビットWindows上のアプリケーションが32ビットレジストリビューで動作することを示します。</target>
        </trans-unit>
        <trans-unit id="be2a690bd039486d70a78d040e16e00e5454af4b" translate="yes" xml:space="preserve">
          <source>Indicates that an application on 64-bit Windows should operate on the 64-bit registry view.</source>
          <target state="translated">64ビットWindows上のアプリケーションが64ビットレジストリビューで動作することを示します。</target>
        </trans-unit>
        <trans-unit id="44029812f3a615dab4b941a3d7aa5ae966773df5" translate="yes" xml:space="preserve">
          <source>Indicates that an operation was requested that does not make sense. If not trapped, returns &lt;code&gt;NaN&lt;/code&gt;. Possible causes include:</source>
          <target state="translated">意味のない操作が要求されたことを示します。トラップされていない場合は、 &lt;code&gt;NaN&lt;/code&gt; を返します。考えられる原因は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="4e5e3976df705a424101261da27cd2fde9d3de10" translate="yes" xml:space="preserve">
          <source>Indicates that rounding occurred and the result is not exact.</source>
          <target state="translated">丸めが発生し、結果が正確でないことを示します。</target>
        </trans-unit>
        <trans-unit id="cc981c0e44e076ce06474425971fe7b0ad7144fe" translate="yes" xml:space="preserve">
          <source>Indicates the effective level for this logger. If a value other than &lt;code&gt;NOTSET&lt;/code&gt; has been set using &lt;a href=&quot;#logging.Logger.setLevel&quot;&gt;&lt;code&gt;setLevel()&lt;/code&gt;&lt;/a&gt;, it is returned. Otherwise, the hierarchy is traversed towards the root until a value other than &lt;code&gt;NOTSET&lt;/code&gt; is found, and that value is returned. The value returned is an integer, typically one of &lt;code&gt;logging.DEBUG&lt;/code&gt;, &lt;code&gt;logging.INFO&lt;/code&gt; etc.</source>
          <target state="translated">このロガーの有効レベルを示します。 &lt;code&gt;NOTSET&lt;/code&gt; 以外の値が&lt;a href=&quot;#logging.Logger.setLevel&quot;&gt; &lt;code&gt;setLevel()&lt;/code&gt; &lt;/a&gt;を使用して設定されている場合は、その値が返されます。それ以外の場合、 &lt;code&gt;NOTSET&lt;/code&gt; 以外の値が見つかり、その値が返されるまで、階層はルートに向かってトラバースされます。返される値は整数で、通常は &lt;code&gt;logging.DEBUG&lt;/code&gt; 、 &lt;code&gt;logging.INFO&lt;/code&gt; などのいずれかです。</target>
        </trans-unit>
        <trans-unit id="c05b1808b79cd233f656fe2bcfce9be7819d7036" translate="yes" xml:space="preserve">
          <source>Indicates the exponent is larger than &lt;code&gt;Emax&lt;/code&gt; after rounding has occurred. If not trapped, the result depends on the rounding mode, either pulling inward to the largest representable finite number or rounding outward to &lt;code&gt;Infinity&lt;/code&gt;. In either case, &lt;a href=&quot;#decimal.Inexact&quot;&gt;&lt;code&gt;Inexact&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#decimal.Rounded&quot;&gt;&lt;code&gt;Rounded&lt;/code&gt;&lt;/a&gt; are also signaled.</source>
          <target state="translated">丸めが行われた後、指数が &lt;code&gt;Emax&lt;/code&gt; より大きいことを示します。トラップされない場合、結果は丸めモードに依存します。つまり、表現可能な最大の有限数に内側に引っ張るか、または &lt;code&gt;Infinity&lt;/code&gt; 外側に丸めます。どちらの場合も、&lt;a href=&quot;#decimal.Inexact&quot;&gt; &lt;code&gt;Inexact&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#decimal.Rounded&quot;&gt; &lt;code&gt;Rounded&lt;/code&gt; &lt;/a&gt;も通知されます。</target>
        </trans-unit>
        <trans-unit id="4f77f7a5be2f4f6bec024a7ca688eadb9d8cde39" translate="yes" xml:space="preserve">
          <source>Indicates the fastest compression method (less compression).</source>
          <target state="translated">最速の圧縮方法(圧縮量が少ない)を示します。</target>
        </trans-unit>
        <trans-unit id="d526feb8426100dd5e8960080eb37e1f6c7c0e18" translate="yes" xml:space="preserve">
          <source>Indicates the format that the module uses. Version 0 is the historical format, version 1 shares interned strings and version 2 uses a binary format for floating point numbers. Version 3 adds support for object instancing and recursion. The current version is 4.</source>
          <target state="translated">モジュールが使用するフォーマットを示します。バージョン 0 は歴史的なフォーマットで、バージョン 1 は内部の文字列を共有し、バージョン 2 は浮動小数点数のためのバイナリフォーマットを使用します。バージョン3では、オブジェクトのインスタンス化と再帰のサポートが追加されています。現在のバージョンは 4 です。</target>
        </trans-unit>
        <trans-unit id="f9f6bc8bf59e204af2bcdfb956cb28921fb1424b" translate="yes" xml:space="preserve">
          <source>Indicates the slowest compression method (best compression).</source>
          <target state="translated">最も遅い圧縮方法(最適圧縮)を示す。</target>
        </trans-unit>
        <trans-unit id="aac4c15b0b527f0bc39db2750782e41d6353de23" translate="yes" xml:space="preserve">
          <source>Indicates unpack completion. Raises an &lt;a href=&quot;#xdrlib.Error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; exception if all of the data has not been unpacked.</source>
          <target state="translated">開梱完了を示します。すべてのデータがアンパックされていない場合は、&lt;a href=&quot;#xdrlib.Error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="a7b874949185225675d995e483ef8e34af9b6cac" translate="yes" xml:space="preserve">
          <source>Indicates when to change to and back from DST. The format of the start and end dates are one of the following:</source>
          <target state="translated">DSTへの切り替え時期と、DSTからの切り替え時期を示します。開始日と終了日の形式は以下のいずれかです。</target>
        </trans-unit>
        <trans-unit id="9f62777df7523c5650cedcd6ae329dd3027c6d33" translate="yes" xml:space="preserve">
          <source>Indicates whether the current platform and implementation provides a symlink attack resistant version of &lt;a href=&quot;#shutil.rmtree&quot;&gt;&lt;code&gt;rmtree()&lt;/code&gt;&lt;/a&gt;. Currently this is only true for platforms supporting fd-based directory access functions.</source>
          <target state="translated">現在のプラットフォームと実装が&lt;a href=&quot;#shutil.rmtree&quot;&gt; &lt;code&gt;rmtree()&lt;/code&gt; の&lt;/a&gt;シンボリックリンク耐性バージョンを提供するかどうかを示します。現在、これはfdベースのディレクトリアクセス機能をサポートするプラットフォームにのみ当てはまります。</target>
        </trans-unit>
        <trans-unit id="3de1857c33236705a23bac0cbecb919c2388633f" translate="yes" xml:space="preserve">
          <source>Indicates whether the named &lt;em&gt;section&lt;/em&gt; is present in the configuration. The &lt;em&gt;default section&lt;/em&gt; is not acknowledged.</source>
          <target state="translated">名前付き&lt;em&gt;セクション&lt;/em&gt;が構成に存在するかどうかを示します。&lt;em&gt;デフォルトのセクションでは&lt;/em&gt;認められていません。</target>
        </trans-unit>
        <trans-unit id="74f019ba984a0205ae5ca7d205233a0d659108ee" translate="yes" xml:space="preserve">
          <source>Individual flags should have values that are powers of two (1, 2, 4, 8, &amp;hellip;), while combinations of flags won&amp;rsquo;t:</source>
          <target state="translated">個々のフラグの値は2の累乗（1、2、4、8、&amp;hellip;）である必要がありますが、フラグの組み合わせでは次のことはできません。</target>
        </trans-unit>
        <trans-unit id="bb56100c551a80a406351b1238fb04cd7a795a80" translate="yes" xml:space="preserve">
          <source>Individual traps are set using the dictionary in the &lt;code&gt;traps&lt;/code&gt; field of a context:</source>
          <target state="translated">個々のトラップは、コンテキストの &lt;code&gt;traps&lt;/code&gt; フィールドの辞書を使用して設定されます。</target>
        </trans-unit>
        <trans-unit id="7d7a2f3db28391fcf21d52da3f6b53e0db11323d" translate="yes" xml:space="preserve">
          <source>Individual warnings filters are specified as a sequence of fields separated by colons:</source>
          <target state="translated">個々の警告フィルタは、コロンで区切られたフィールドのシーケンスとして指定されます。</target>
        </trans-unit>
        <trans-unit id="11d6c70d3b61eb2adec653bae13969c8702afd21" translate="yes" xml:space="preserve">
          <source>Infinite and NaN Number Values</source>
          <target state="translated">無限とNaN数の値</target>
        </trans-unit>
        <trans-unit id="fdae9d30d05df13f4736716cf3012faf5a343e86" translate="yes" xml:space="preserve">
          <source>Infinite and NaN number values are accepted and output;</source>
          <target state="translated">無限、NaN数の値を受け付けて出力します。</target>
        </trans-unit>
        <trans-unit id="208f6a4e901648e152bff0d37fcf84f2558c7fa3" translate="yes" xml:space="preserve">
          <source>Infinities can be constructed directly with: &lt;code&gt;Decimal('Infinity')&lt;/code&gt;. Also, they can arise from dividing by zero when the &lt;a href=&quot;#decimal.DivisionByZero&quot;&gt;&lt;code&gt;DivisionByZero&lt;/code&gt;&lt;/a&gt; signal is not trapped. Likewise, when the &lt;a href=&quot;#decimal.Overflow&quot;&gt;&lt;code&gt;Overflow&lt;/code&gt;&lt;/a&gt; signal is not trapped, infinity can result from rounding beyond the limits of the largest representable number.</source>
          <target state="translated">&lt;code&gt;Decimal('Infinity')&lt;/code&gt; 直接作成できます。また、&lt;a href=&quot;#decimal.DivisionByZero&quot;&gt; &lt;code&gt;DivisionByZero&lt;/code&gt; &lt;/a&gt;信号がトラップされていないときにゼロで除算することでも発生する可能性があります。同様に、&lt;a href=&quot;#decimal.Overflow&quot;&gt; &lt;code&gt;Overflow&lt;/code&gt; &lt;/a&gt;信号がトラップされない場合、表現可能な最大数の制限を超えて四捨五入すると、無限大が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ed5b789236efcc14059ac13c746c6bf63a446511" translate="yes" xml:space="preserve">
          <source>Info-ZIP Home Page</source>
          <target state="translated">Info-ZIPホームページ</target>
        </trans-unit>
        <trans-unit id="f1a9ffafc271a884fe1c56d1e91026a9afac1d59" translate="yes" xml:space="preserve">
          <source>Information about how the &lt;a href=&quot;#module-subprocess&quot;&gt;&lt;code&gt;subprocess&lt;/code&gt;&lt;/a&gt; module can be used to replace these modules and functions can be found in the following sections.</source>
          <target state="translated">&lt;a href=&quot;#module-subprocess&quot;&gt; &lt;code&gt;subprocess&lt;/code&gt; &lt;/a&gt;モジュールを使用してこれらのモジュールと機能を置き換える方法については、次のセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="73dc9ae5bb811ec4a81b13ac14f9d0600c74bdc0" translate="yes" xml:space="preserve">
          <source>Information about the Info-ZIP project&amp;rsquo;s ZIP archive programs and development libraries.</source>
          <target state="translated">Info-ZIPプロジェクトのZIPアーカイブプログラムと開発ライブラリに関する情報。</target>
        </trans-unit>
        <trans-unit id="5dca2a23bec2c3f3823dba848b63caa3ddd34f46" translate="yes" xml:space="preserve">
          <source>Information about the declarations needed to process a document.</source>
          <target state="translated">文書を処理するために必要な申告書に関する情報。</target>
        </trans-unit>
        <trans-unit id="37721dc7ffd07b44f936ed4938598a4206ad258c" translate="yes" xml:space="preserve">
          <source>Information about the notations and entities declared by a document (including the external subset if the parser uses it and can provide the information) is available from a &lt;code&gt;DocumentType&lt;/code&gt; object. The &lt;code&gt;DocumentType&lt;/code&gt; for a document is available from the &lt;code&gt;Document&lt;/code&gt; object&amp;rsquo;s &lt;code&gt;doctype&lt;/code&gt; attribute; if there is no &lt;code&gt;DOCTYPE&lt;/code&gt; declaration for the document, the document&amp;rsquo;s &lt;code&gt;doctype&lt;/code&gt; attribute will be set to &lt;code&gt;None&lt;/code&gt; instead of an instance of this interface.</source>
          <target state="translated">ドキュメントによって宣言された表記とエンティティに関する情報（パーサーがそれを使用して情報を提供できる場合は外部サブセットを含む）は、 &lt;code&gt;DocumentType&lt;/code&gt; オブジェクトから入手できます。 &lt;code&gt;DocumentType&lt;/code&gt; の文書のためには、より入手可能である &lt;code&gt;Document&lt;/code&gt; オブジェクトの &lt;code&gt;doctype&lt;/code&gt; 属性。ドキュメントの &lt;code&gt;DOCTYPE&lt;/code&gt; 宣言がない場合、ドキュメントの &lt;code&gt;doctype&lt;/code&gt; 属性は、このインターフェイスのインスタンスではなく、 &lt;code&gt;None&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="cce32b3d49301f675170423df0e3a5fe42a9f458" translate="yes" xml:space="preserve">
          <source>Information about the version of the zlib library in use is available through the following constants:</source>
          <target state="translated">使用中の zlib ライブラリのバージョンに関する情報は、以下の定数で確認できます。</target>
        </trans-unit>
        <trans-unit id="3dc195259320a72e072f4ede32b54adf6cc49ee6" translate="yes" xml:space="preserve">
          <source>Informs the logging system to perform an orderly shutdown by flushing and closing all handlers. This should be called at application exit and no further use of the logging system should be made after this call.</source>
          <target state="translated">ロギングシステムに、すべてのハンドラをフラッシュして閉じることで、秩序あるシャットダウンを実行するように通知します。これはアプリケーションの終了時に呼び出されるべきで、この呼び出しの後にロギングシステムを使用してはいけません。</target>
        </trans-unit>
        <trans-unit id="fdaddb9ce367c2ca746a97cc24d2e8817a51f27d" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
          <target state="translated">Inheritance</target>
        </trans-unit>
        <trans-unit id="8c3b7e7bdfb6a623a8eb23a0493ea3c67706b89d" translate="yes" xml:space="preserve">
          <source>Inheritance of File Descriptors</source>
          <target state="translated">ファイルディスクリプタの継承</target>
        </trans-unit>
        <trans-unit id="6bce323c70ebeda273b76b4deb2d56162be0c2e0" translate="yes" xml:space="preserve">
          <source>Inherited &lt;a href=&quot;#collections.abc.Mapping&quot;&gt;&lt;code&gt;Mapping&lt;/code&gt;&lt;/a&gt; methods and &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;popitem&lt;/code&gt;, &lt;code&gt;clear&lt;/code&gt;, &lt;code&gt;update&lt;/code&gt;, and &lt;code&gt;setdefault&lt;/code&gt;</source>
          <target state="translated">継承された&lt;a href=&quot;#collections.abc.Mapping&quot;&gt; &lt;code&gt;Mapping&lt;/code&gt; &lt;/a&gt;メソッドと &lt;code&gt;pop&lt;/code&gt; 、 &lt;code&gt;popitem&lt;/code&gt; 、 &lt;code&gt;clear&lt;/code&gt; 、 &lt;code&gt;update&lt;/code&gt; 、および &lt;code&gt;setdefault&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="06211f7ed37f2fb2fd3d0b096255e56986486d8f" translate="yes" xml:space="preserve">
          <source>Inherited &lt;a href=&quot;#collections.abc.Sequence&quot;&gt;&lt;code&gt;Sequence&lt;/code&gt;&lt;/a&gt; methods</source>
          <target state="translated">継承された&lt;a href=&quot;#collections.abc.Sequence&quot;&gt; &lt;code&gt;Sequence&lt;/code&gt; &lt;/a&gt;メソッド</target>
        </trans-unit>
        <trans-unit id="6c8ee095532c52fa04b5b2f4774ee70078537885" translate="yes" xml:space="preserve">
          <source>Inherited &lt;a href=&quot;#collections.abc.Sequence&quot;&gt;&lt;code&gt;Sequence&lt;/code&gt;&lt;/a&gt; methods and &lt;code&gt;append&lt;/code&gt;, &lt;code&gt;reverse&lt;/code&gt;, &lt;code&gt;extend&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;__iadd__&lt;/code&gt;</source>
          <target state="translated">継承された&lt;a href=&quot;#collections.abc.Sequence&quot;&gt; &lt;code&gt;Sequence&lt;/code&gt; &lt;/a&gt;メソッドと &lt;code&gt;append&lt;/code&gt; 、 &lt;code&gt;reverse&lt;/code&gt; 、 &lt;code&gt;extend&lt;/code&gt; 、 &lt;code&gt;pop&lt;/code&gt; 、 &lt;code&gt;remove&lt;/code&gt; 、および &lt;code&gt;__iadd__&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d51fda0d61054bbf60003067c334dea455e6a456" translate="yes" xml:space="preserve">
          <source>Inherited &lt;a href=&quot;#collections.abc.Set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; methods and &lt;code&gt;clear&lt;/code&gt;, &lt;code&gt;pop&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;__ior__&lt;/code&gt;, &lt;code&gt;__iand__&lt;/code&gt;, &lt;code&gt;__ixor__&lt;/code&gt;, and &lt;code&gt;__isub__&lt;/code&gt;</source>
          <target state="translated">継承された&lt;a href=&quot;#collections.abc.Set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;メソッドと &lt;code&gt;clear&lt;/code&gt; 、 &lt;code&gt;pop&lt;/code&gt; 、 &lt;code&gt;remove&lt;/code&gt; 、 &lt;code&gt;__ior__&lt;/code&gt; 、 &lt;code&gt;__iand__&lt;/code&gt; 、 &lt;code&gt;__ixor__&lt;/code&gt; 、および &lt;code&gt;__isub__&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="379c6401d036c1fd4201479a5a98fa61950fb477" translate="yes" xml:space="preserve">
          <source>Inherited &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt; methods, &lt;code&gt;encoding&lt;/code&gt;, &lt;code&gt;errors&lt;/code&gt;, and &lt;code&gt;newlines&lt;/code&gt;</source>
          <target state="translated">継承された&lt;a href=&quot;#io.IOBase&quot;&gt; &lt;code&gt;IOBase&lt;/code&gt; &lt;/a&gt;メソッド、 &lt;code&gt;encoding&lt;/code&gt; 、 &lt;code&gt;errors&lt;/code&gt; 、および &lt;code&gt;newlines&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3f9245eee96edcd8825a2046422c07072497cf0f" translate="yes" xml:space="preserve">
          <source>Inherited &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt; methods, &lt;code&gt;read&lt;/code&gt;, and &lt;code&gt;readall&lt;/code&gt;</source>
          <target state="translated">継承された&lt;a href=&quot;#io.IOBase&quot;&gt; &lt;code&gt;IOBase&lt;/code&gt; &lt;/a&gt;メソッド、 &lt;code&gt;read&lt;/code&gt; 、および &lt;code&gt;readall&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a95bfb8966052c1a0ceee8247e352fac2cbbb068" translate="yes" xml:space="preserve">
          <source>Inherited &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt; methods, &lt;code&gt;readinto&lt;/code&gt;, and &lt;code&gt;readinto1&lt;/code&gt;</source>
          <target state="translated">継承された&lt;a href=&quot;#io.IOBase&quot;&gt; &lt;code&gt;IOBase&lt;/code&gt; &lt;/a&gt;メソッド、 &lt;code&gt;readinto&lt;/code&gt; 、および &lt;code&gt;readinto1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e2f86a0622771a4fe382df1bdcb5afbbe667c715" translate="yes" xml:space="preserve">
          <source>Inherits</source>
          <target state="translated">Inherits</target>
        </trans-unit>
        <trans-unit id="b22e7705af8c8d03aae22d1b8adde6a0eccc1637" translate="yes" xml:space="preserve">
          <source>Inherits from</source>
          <target state="translated">を継承しています。</target>
        </trans-unit>
        <trans-unit id="2bc75738f31d4cad0d4af9bafd60101443b8a470" translate="yes" xml:space="preserve">
          <source>Init file</source>
          <target state="translated">イニット・ファイル</target>
        </trans-unit>
        <trans-unit id="a84f9ff878eec42e40bd18840ce1e8b26a925aef" translate="yes" xml:space="preserve">
          <source>Init-only variables</source>
          <target state="translated">イニット・オンリー変数</target>
        </trans-unit>
        <trans-unit id="f5d6a89f24c042aeeed4c674d462173e914e969f" translate="yes" xml:space="preserve">
          <source>Init-only variables without default values, if any exist, must be specified on the call to &lt;a href=&quot;#dataclasses.replace&quot;&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/a&gt; so that they can be passed to &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;__post_init__()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;および &lt;code&gt;__post_init__()&lt;/code&gt; 渡すことができるように、&lt;a href=&quot;#dataclasses.replace&quot;&gt; &lt;code&gt;replace()&lt;/code&gt; の&lt;/a&gt;呼び出しで、デフォルト値のない初期化専用変数が存在する場合は、それらを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="00d9484a203c55d062115756023f903da303882a" translate="yes" xml:space="preserve">
          <source>Init-only variables without default values, if any exist, must be specified on the call to &lt;a href=&quot;#dataclasses.replace&quot;&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/a&gt; so that they can be passed to &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;__post_init__()&lt;/code&gt;.</source>
          <target state="translated">Init-only variables without default values, if any exist, must be specified on the call to &lt;a href=&quot;#dataclasses.replace&quot;&gt; &lt;code&gt;replace()&lt;/code&gt; &lt;/a&gt; so that they can be passed to &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt; and &lt;code&gt;__post_init__()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8ae7812ad31389ab36e054e9b5c81ee4355c0c33" translate="yes" xml:space="preserve">
          <source>Initial turtle heading</source>
          <target state="translated">イニシャルタートルヘディング</target>
        </trans-unit>
        <trans-unit id="9c053c5a31de248a3fe3887d73e022ca74699147" translate="yes" xml:space="preserve">
          <source>Initialize curses and call another callable object, &lt;em&gt;func&lt;/em&gt;, which should be the rest of your curses-using application. If the application raises an exception, this function will restore the terminal to a sane state before re-raising the exception and generating a traceback. The callable object &lt;em&gt;func&lt;/em&gt; is then passed the main window &amp;lsquo;stdscr&amp;rsquo; as its first argument, followed by any other arguments passed to &lt;code&gt;wrapper()&lt;/code&gt;. Before calling &lt;em&gt;func&lt;/em&gt;, &lt;code&gt;wrapper()&lt;/code&gt; turns on cbreak mode, turns off echo, enables the terminal keypad, and initializes colors if the terminal has color support. On exit (whether normally or by exception) it restores cooked mode, turns on echo, and disables the terminal keypad.</source>
          <target state="translated">cursesを初期化して、cursesを使用するアプリケーションの残りの部分である別の呼び出し可能オブジェクト&lt;em&gt;funcを&lt;/em&gt;呼び出します。アプリケーションで例外が発生した場合、この関数は、例外を再発生させてトレースバックを生成する前に、端末を正常な状態に復元します。呼び出し可能なオブジェクト&lt;em&gt;funcに&lt;/em&gt;は、最初の引数としてメインウィンドウ 'stdscr'が渡され、その後に &lt;code&gt;wrapper()&lt;/code&gt; に渡される他の引数が続きます。&lt;em&gt;funcを&lt;/em&gt;呼び出す前に、 &lt;code&gt;wrapper()&lt;/code&gt; はcbreakモードをオンにし、エコーをオフにし、端末のキーパッドを有効にし、端末が色をサポートしている場合は色を初期化します。終了時（通常か例外かに関わらず）は、調理済みモードを復元し、エコーをオンにして、端末のキーパッドを無効にします。</target>
        </trans-unit>
        <trans-unit id="3c39102c3fa06222a5c163727b0377eb39a67e1f" translate="yes" xml:space="preserve">
          <source>Initialize the internal data structures. If given, &lt;em&gt;files&lt;/em&gt; must be a sequence of file names which should be used to augment the default type map. If omitted, the file names to use are taken from &lt;a href=&quot;#mimetypes.knownfiles&quot;&gt;&lt;code&gt;knownfiles&lt;/code&gt;&lt;/a&gt;; on Windows, the current registry settings are loaded. Each file named in &lt;em&gt;files&lt;/em&gt; or &lt;a href=&quot;#mimetypes.knownfiles&quot;&gt;&lt;code&gt;knownfiles&lt;/code&gt;&lt;/a&gt; takes precedence over those named before it. Calling &lt;a href=&quot;#mimetypes.init&quot;&gt;&lt;code&gt;init()&lt;/code&gt;&lt;/a&gt; repeatedly is allowed.</source>
          <target state="translated">内部データ構造を初期化します。指定する場合、&lt;em&gt;ファイル&lt;/em&gt;は、デフォルトのタイプマップを拡張するために使用する必要がある一連のファイル名である必要があります。省略した場合、使用するファイル名は&lt;a href=&quot;#mimetypes.knownfiles&quot;&gt; &lt;code&gt;knownfiles&lt;/code&gt; &lt;/a&gt;から取得されます。Windowsでは、現在のレジストリ設定がロードされます。&lt;em&gt;files&lt;/em&gt;または&lt;a href=&quot;#mimetypes.knownfiles&quot;&gt; &lt;code&gt;knownfiles&lt;/code&gt; で&lt;/a&gt;指定された各ファイルは、その前に指定された&lt;em&gt;ファイル&lt;/em&gt;よりも優先され&lt;em&gt;ます&lt;/em&gt;。繰り返し&lt;a href=&quot;#mimetypes.init&quot;&gt; &lt;code&gt;init()&lt;/code&gt; &lt;/a&gt;を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="67a777e10b60c9589ca15590b09a5cec97aaa843" translate="yes" xml:space="preserve">
          <source>Initialize the library. Return a &lt;a href=&quot;#curses-window-objects&quot;&gt;window&lt;/a&gt; object which represents the whole screen.</source>
          <target state="translated">ライブラリを初期化します。画面全体を表す&lt;a href=&quot;#curses-window-objects&quot;&gt;ウィンドウ&lt;/a&gt;オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="48428a849fbd7ccb672616c8d11dd86f3867404a" translate="yes" xml:space="preserve">
          <source>Initialize the random number generator.</source>
          <target state="translated">乱数発生器を初期化します。</target>
        </trans-unit>
        <trans-unit id="70995d6f7eecb673c201a63dd47d29c6584b9166" translate="yes" xml:space="preserve">
          <source>Initialize the terminal. &lt;em&gt;term&lt;/em&gt; is a string giving the terminal name, or &lt;code&gt;None&lt;/code&gt;; if omitted or &lt;code&gt;None&lt;/code&gt;, the value of the &lt;code id=&quot;index-1&quot;&gt;TERM&lt;/code&gt; environment variable will be used. &lt;em&gt;fd&lt;/em&gt; is the file descriptor to which any initialization sequences will be sent; if not supplied or &lt;code&gt;-1&lt;/code&gt;, the file descriptor for &lt;code&gt;sys.stdout&lt;/code&gt; will be used.</source>
          <target state="translated">端末を初期化します。&lt;em&gt;term&lt;/em&gt;は、端末名を表す文字列、または &lt;code&gt;None&lt;/code&gt; です。省略するか &lt;code&gt;None&lt;/code&gt; の場合、 &lt;code id=&quot;index-1&quot;&gt;TERM&lt;/code&gt; 環境変数の値が使用されます。&lt;em&gt;fd&lt;/em&gt;は、初期化シーケンスが送信されるファイル記述子です。指定しないか &lt;code&gt;-1&lt;/code&gt; の場合、 &lt;code&gt;sys.stdout&lt;/code&gt; のファイル記述子が使用されます。</target>
        </trans-unit>
        <trans-unit id="ab79211166494a5373743e60ba9599daf58a2af2" translate="yes" xml:space="preserve">
          <source>Initializers of the correct type can also be specified:</source>
          <target state="translated">正しい型のイニシャライザを指定することもできます。</target>
        </trans-unit>
        <trans-unit id="3cc9f180e9eb479c565d2e3c4fd6ce05ca9e580e" translate="yes" xml:space="preserve">
          <source>Initializes a thread lock which can be used to serialize access to underlying I/O functionality which may not be threadsafe.</source>
          <target state="translated">スレッドセーフではないかもしれない基礎となるI/O機能へのアクセスをシリアライズするために使用できるスレッドロックを初期化します。</target>
        </trans-unit>
        <trans-unit id="3852a908d7c934410ea309c7ea1ea46af8743103" translate="yes" xml:space="preserve">
          <source>Initializes instance of &lt;a href=&quot;#difflib.HtmlDiff&quot;&gt;&lt;code&gt;HtmlDiff&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#difflib.HtmlDiff&quot;&gt; &lt;code&gt;HtmlDiff&lt;/code&gt; の&lt;/a&gt;インスタンスを初期化します。</target>
        </trans-unit>
        <trans-unit id="f5885aef6f5096d972360ad2af443e94000e495a" translate="yes" xml:space="preserve">
          <source>Initializes the &lt;a href=&quot;#logging.Handler&quot;&gt;&lt;code&gt;Handler&lt;/code&gt;&lt;/a&gt; instance by setting its level, setting the list of filters to the empty list and creating a lock (using &lt;a href=&quot;#logging.Handler.createLock&quot;&gt;&lt;code&gt;createLock()&lt;/code&gt;&lt;/a&gt;) for serializing access to an I/O mechanism.</source>
          <target state="translated">レベルを設定し、フィルターのリストを空のリストに設定し、I / Oメカニズムへのアクセスをシリアル化するために&lt;a href=&quot;#logging.Handler.createLock&quot;&gt; &lt;code&gt;createLock()&lt;/code&gt; &lt;/a&gt;を使用して）ロックを作成して、&lt;a href=&quot;#logging.Handler&quot;&gt; &lt;code&gt;Handler&lt;/code&gt; &lt;/a&gt;インスタンスを初期化します。</target>
        </trans-unit>
        <trans-unit id="891e93a281cdc0ae8bd4cb4966bc1555092cc9eb" translate="yes" xml:space="preserve">
          <source>Initializes the given module object in accordance with &lt;a href=&quot;https://www.python.org/dev/peps/pep-0489&quot; id=&quot;index-20&quot;&gt;&lt;strong&gt;PEP 489&lt;/strong&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://www.python.org/dev/peps/pep-0489&quot; id=&quot;index-20&quot;&gt;&lt;strong&gt;PEP 489&lt;/strong&gt;&lt;/a&gt;に従って、指定されたモジュールオブジェクトを初期化します。</target>
        </trans-unit>
        <trans-unit id="76391f6bbc3769470e5c6904d1885bcf07a8f838" translate="yes" xml:space="preserve">
          <source>Initializes the handler with a buffer of the specified capacity. Here, &lt;em&gt;capacity&lt;/em&gt; means the number of logging records buffered.</source>
          <target state="translated">指定された容量のバッファでハンドラを初期化します。ここで、&lt;em&gt;容量と&lt;/em&gt;は、バッファリングされているロギングレコードの数を意味します。</target>
        </trans-unit>
        <trans-unit id="6a4659852d66e1b08bbacb99cd059b9b5779e858" translate="yes" xml:space="preserve">
          <source>Initially &lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt; defined Python static type system as using &lt;em&gt;nominal subtyping&lt;/em&gt;. This means that a class &lt;code&gt;A&lt;/code&gt; is allowed where a class &lt;code&gt;B&lt;/code&gt; is expected if and only if &lt;code&gt;A&lt;/code&gt; is a subclass of &lt;code&gt;B&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://www.python.org/dev/peps/pep-0484&quot; id=&quot;index-9&quot;&gt;&lt;strong&gt;PEP 484&lt;/strong&gt;&lt;/a&gt;は当初、Python静的型システムを&lt;em&gt;名目上のサブタイプ&lt;/em&gt;を使用するものとして定義していました。クラスことをこれは意味 &lt;code&gt;A&lt;/code&gt; がクラスここで許可されている &lt;code&gt;B&lt;/code&gt; が予想される場合と場合にのみ、 &lt;code&gt;A&lt;/code&gt; はのサブクラスである &lt;code&gt;B&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="651e55be975986e7fd15535125aa6f9af6b714d3" translate="yes" xml:space="preserve">
          <source>Initially, when a program is started, the locale is the &lt;code&gt;C&lt;/code&gt; locale, no matter what the user&amp;rsquo;s preferred locale is. There is one exception: the &lt;a href=&quot;#locale.LC_CTYPE&quot;&gt;&lt;code&gt;LC_CTYPE&lt;/code&gt;&lt;/a&gt; category is changed at startup to set the current locale encoding to the user&amp;rsquo;s preferred locale encoding. The program must explicitly say that it wants the user&amp;rsquo;s preferred locale settings for other categories by calling &lt;code&gt;setlocale(LC_ALL, '')&lt;/code&gt;.</source>
          <target state="translated">最初は、プログラムが開始されると、ユーザーの優先ロケールに関係なく、ロケールは &lt;code&gt;C&lt;/code&gt; ロケールになります。例外が1つあります&lt;a href=&quot;#locale.LC_CTYPE&quot;&gt; &lt;code&gt;LC_CTYPE&lt;/code&gt; &lt;/a&gt;カテゴリが起動時に変更され、現在のロケールエンコーディングがユーザーの優先ロケールエンコーディングに設定されます。プログラムは &lt;code&gt;setlocale(LC_ALL, '')&lt;/code&gt; 呼び出して、他のカテゴリに対するユーザーの優先ロケール設定が必要であることを明示的に示す必要があります。</target>
        </trans-unit>
        <trans-unit id="b6d8ad6283ed79c07a911360e0d9b48d60fca9b3" translate="yes" xml:space="preserve">
          <source>Initiate a transfer over the data connection. If the transfer is active, send an &lt;code&gt;EPRT&lt;/code&gt; or &lt;code&gt;PORT&lt;/code&gt; command and the transfer command specified by &lt;em&gt;cmd&lt;/em&gt;, and accept the connection. If the server is passive, send an &lt;code&gt;EPSV&lt;/code&gt; or &lt;code&gt;PASV&lt;/code&gt; command, connect to it, and start the transfer command. Either way, return the socket for the connection.</source>
          <target state="translated">データ接続を介して転送を開始します。転送がアクティブな場合は、 &lt;code&gt;EPRT&lt;/code&gt; または &lt;code&gt;PORT&lt;/code&gt; コマンドと&lt;em&gt;cmd&lt;/em&gt;で指定された転送コマンドを送信し、接続を受け入れます。サーバーがパッシブの場合は、 &lt;code&gt;EPSV&lt;/code&gt; または &lt;code&gt;PASV&lt;/code&gt; コマンドを送信して接続し、転送コマンドを開始します。どちらの場合も、接続用のソケットを返します。</target>
        </trans-unit>
        <trans-unit id="a3b934f82fa9691663fe5cc49e6c91ec415ce86a" translate="yes" xml:space="preserve">
          <source>Inode number.</source>
          <target state="translated">ノード番号。</target>
        </trans-unit>
        <trans-unit id="61f3e06ef66f729eb248fc28dbd015725fbd26d3" translate="yes" xml:space="preserve">
          <source>Inode protection mode.</source>
          <target state="translated">ノード保護モードです。</target>
        </trans-unit>
        <trans-unit id="abc398c151cedbf682a4e32b5fe1f87a91547da5" translate="yes" xml:space="preserve">
          <source>Input methods</source>
          <target state="translated">入力方法</target>
        </trans-unit>
        <trans-unit id="3bac6667a1606f6aae5b9d31130c86a61ea3e529" translate="yes" xml:space="preserve">
          <source>Input parameter which defaults to the integer zero.</source>
          <target state="translated">デフォルトは整数のゼロである入力パラメータ。</target>
        </trans-unit>
        <trans-unit id="f0dadaeaa1a0521f244cb0c7817109df239c4e4a" translate="yes" xml:space="preserve">
          <source>Input/ouput</source>
          <target state="translated">Input/ouput</target>
        </trans-unit>
        <trans-unit id="cfb6ac42c15bfc315aef836b57bb90c22f4f147f" translate="yes" xml:space="preserve">
          <source>InputSource Objects</source>
          <target state="translated">入力ソースオブジェクト</target>
        </trans-unit>
        <trans-unit id="98cceba3103286deb746764afbe409454e752550" translate="yes" xml:space="preserve">
          <source>Inputs as in &lt;a href=&quot;#turtle.pencolor&quot;&gt;&lt;code&gt;pencolor()&lt;/code&gt;&lt;/a&gt;, set both, fillcolor and pencolor, to the given value.</source>
          <target state="translated">&lt;a href=&quot;#turtle.pencolor&quot;&gt; &lt;code&gt;pencolor()&lt;/code&gt; の&lt;/a&gt;ように入力し、fillcolorとpencolorの両方を指定した値に設定します。</target>
        </trans-unit>
        <trans-unit id="95802daab3a23990338179f72248350c1434cf39" translate="yes" xml:space="preserve">
          <source>Insert</source>
          <target state="translated">Insert</target>
        </trans-unit>
        <trans-unit id="5c6157626eaa443a7d46529cadb0898d243cf4bf" translate="yes" xml:space="preserve">
          <source>Insert ## in front of selected lines.</source>
          <target state="translated">選択した行の前に#を挿入します。</target>
        </trans-unit>
        <trans-unit id="771d3a8e81fd09fb95d718f0e07e3c3ed54b1cb1" translate="yes" xml:space="preserve">
          <source>Insert &lt;em&gt;nlines&lt;/em&gt; lines into the specified window above the current line. The &lt;em&gt;nlines&lt;/em&gt; bottom lines are lost. For negative &lt;em&gt;nlines&lt;/em&gt;, delete &lt;em&gt;nlines&lt;/em&gt; lines starting with the one under the cursor, and move the remaining lines up. The bottom &lt;em&gt;nlines&lt;/em&gt; lines are cleared. The current cursor position remains the same.</source>
          <target state="translated">指定したウィンドウの現在の行の上に&lt;em&gt;nlines&lt;/em&gt;行を挿入し&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;nlines行&lt;/em&gt;下の行が失われます。負の&lt;em&gt;nlinesの&lt;/em&gt;場合、カーソルの下の行から始まる&lt;em&gt;nlines&lt;/em&gt;行を削除し、残りの行を上に移動します。下の&lt;em&gt;nlines&lt;/em&gt;行がクリアされます。現在のカーソル位置は変わりません。</target>
        </trans-unit>
        <trans-unit id="9ab25aba32579e4cbe82e3445dbc2750c5f19e2d" translate="yes" xml:space="preserve">
          <source>Insert &lt;em&gt;x&lt;/em&gt; in &lt;em&gt;a&lt;/em&gt; in sorted order. This is equivalent to &lt;code&gt;a.insert(bisect.bisect_left(a, x, lo, hi), x)&lt;/code&gt; assuming that &lt;em&gt;a&lt;/em&gt; is already sorted. Keep in mind that the O(log n) search is dominated by the slow O(n) insertion step.</source>
          <target state="translated">挿入は、&lt;em&gt;xは&lt;/em&gt;でソートされた順序で。これは、&lt;em&gt;a&lt;/em&gt;がすでにソートされて&lt;em&gt;いる&lt;/em&gt;と仮定し&lt;em&gt;た場合の&lt;/em&gt; &lt;code&gt;a.insert(bisect.bisect_left(a, x, lo, hi), x)&lt;/code&gt; と同等です。O（log n）検索は、低速のO（n）挿入ステップによって支配されることに注意してください。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2ffe19f9b53fcc062222865d04ee695208ba7423" translate="yes" xml:space="preserve">
          <source>Insert &lt;em&gt;x&lt;/em&gt; into the deque at position &lt;em&gt;i&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;x&lt;/em&gt;を位置&lt;em&gt;i&lt;/em&gt;の両端キューに挿入します。</target>
        </trans-unit>
        <trans-unit id="e69d0858508dfc3e6620fa59f50ef0662785e9c6" translate="yes" xml:space="preserve">
          <source>Insert CGI variables for the current request into the &lt;code&gt;environ&lt;/code&gt; attribute.</source>
          <target state="translated">現在のリクエストのCGI変数を &lt;code&gt;environ&lt;/code&gt; 属性に挿入します。</target>
        </trans-unit>
        <trans-unit id="11cf289408f544e7431d78ef915fdb066ede3d6a" translate="yes" xml:space="preserve">
          <source>Insert a blank line at cursor location.</source>
          <target state="translated">カーソル位置に空行を挿入します。</target>
        </trans-unit>
        <trans-unit id="428b27b44b5679a5100cbb0f2b51ce75dd8a5bf2" translate="yes" xml:space="preserve">
          <source>Insert a blank line under the cursor. All following lines are moved down by one line.</source>
          <target state="translated">カーソルの下に空行を挿入します。次の行はすべて1行分下に移動します。</target>
        </trans-unit>
        <trans-unit id="8cc41d420c2a48fb3dbe04ee4c88fa790360f745" translate="yes" xml:space="preserve">
          <source>Insert a character string (as many characters as will fit on the line) before the character under the cursor, up to &lt;em&gt;n&lt;/em&gt; characters. If &lt;em&gt;n&lt;/em&gt; is zero or negative, the entire string is inserted. All characters to the right of the cursor are shifted right, with the rightmost characters on the line being lost. The cursor position does not change (after moving to &lt;em&gt;y&lt;/em&gt;, &lt;em&gt;x&lt;/em&gt;, if specified).</source>
          <target state="translated">カーソルの下の文字の前に、&lt;em&gt;n&lt;/em&gt;行までの文字列（行に収まるだけの文字）を挿入します。場合&lt;em&gt;、nは&lt;/em&gt;ゼロまたは負であり、全体の文字列が挿入されています。カーソルの右側にあるすべての文字が右に移動し、行の右端の文字が失われます。カーソルの位置は変わりません（指定されている場合は、&lt;em&gt;y&lt;/em&gt;、&lt;em&gt;xに&lt;/em&gt;移動した後）。</target>
        </trans-unit>
        <trans-unit id="52ef5c0b09949330d13e4bb951c2c108148e5ec6" translate="yes" xml:space="preserve">
          <source>Insert a character string (as many characters as will fit on the line) before the character under the cursor. All characters to the right of the cursor are shifted right, with the rightmost characters on the line being lost. The cursor position does not change (after moving to &lt;em&gt;y&lt;/em&gt;, &lt;em&gt;x&lt;/em&gt;, if specified).</source>
          <target state="translated">カーソルの下の文字の前に文字列（行に収まるだけの文字数）を挿入します。カーソルの右側にあるすべての文字が右に移動し、行の右端の文字が失われます。カーソルの位置は変わりません（指定されている場合は、&lt;em&gt;y&lt;/em&gt;、&lt;em&gt;xに&lt;/em&gt;移動した後）。</target>
        </trans-unit>
        <trans-unit id="2cd230c1b957b61fbeafaadd6ef3bd7966d963f4" translate="yes" xml:space="preserve">
          <source>Insert a new child node before an existing child. It must be the case that &lt;em&gt;refChild&lt;/em&gt; is a child of this node; if not, &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised. &lt;em&gt;newChild&lt;/em&gt; is returned. If &lt;em&gt;refChild&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, it inserts &lt;em&gt;newChild&lt;/em&gt; at the end of the children&amp;rsquo;s list.</source>
          <target state="translated">既存の子の前に新しい子ノードを挿入します。&lt;em&gt;refChild&lt;/em&gt;がこのノードの子である必要があります。そうでない場合、&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;が発生します。&lt;em&gt;newChild&lt;/em&gt;が返されます。&lt;em&gt;refChild&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; の場合、子リストの最後に&lt;em&gt;newChild&lt;/em&gt;を挿入し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="dbbded73e99c71141ac74230b61b365295b11341" translate="yes" xml:space="preserve">
          <source>Insert a new item with value &lt;em&gt;x&lt;/em&gt; in the array before position &lt;em&gt;i&lt;/em&gt;. Negative values are treated as being relative to the end of the array.</source>
          <target state="translated">位置&lt;em&gt;iの&lt;/em&gt;前の配列に値&lt;em&gt;xの&lt;/em&gt;新しいアイテムを挿入します。負の値は、配列の末尾を基準にして扱われます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6442b4677754abf24013415cfc0b02328c37bf8d" translate="yes" xml:space="preserve">
          <source>Insert a simple entry into the list of &lt;a href=&quot;#warning-filter&quot;&gt;warnings filter specifications&lt;/a&gt;. The meaning of the function parameters is as for &lt;a href=&quot;#warnings.filterwarnings&quot;&gt;&lt;code&gt;filterwarnings()&lt;/code&gt;&lt;/a&gt;, but regular expressions are not needed as the filter inserted always matches any message in any module as long as the category and line number match.</source>
          <target state="translated">&lt;a href=&quot;#warning-filter&quot;&gt;警告フィルター仕様の&lt;/a&gt;リストに単純なエントリーを挿入します。関数パラメーターの意味は&lt;a href=&quot;#warnings.filterwarnings&quot;&gt; &lt;code&gt;filterwarnings()&lt;/code&gt; の&lt;/a&gt;場合と同じですが、挿入されたフィルターは、カテゴリーと行番号が一致する限り、モジュール内のメッセージに常に一致するため、正規表現は必要ありません。</target>
        </trans-unit>
        <trans-unit id="be8c8abeab9182b5ad4c0936ac5747b095eb532b" translate="yes" xml:space="preserve">
          <source>Insert an &lt;em&gt;ms&lt;/em&gt; millisecond pause in output.</source>
          <target state="translated">&lt;em&gt;ms&lt;/em&gt;ミリ秒のポーズを出力に挿入します。</target>
        </trans-unit>
        <trans-unit id="73267e5ac5110513448a2a6d6f16738aaf106dd8" translate="yes" xml:space="preserve">
          <source>Insert an entry into the list of &lt;a href=&quot;#warning-filter&quot;&gt;warnings filter specifications&lt;/a&gt;. The entry is inserted at the front by default; if &lt;em&gt;append&lt;/em&gt; is true, it is inserted at the end. This checks the types of the arguments, compiles the &lt;em&gt;message&lt;/em&gt; and &lt;em&gt;module&lt;/em&gt; regular expressions, and inserts them as a tuple in the list of warnings filters. Entries closer to the front of the list override entries later in the list, if both match a particular warning. Omitted arguments default to a value that matches everything.</source>
          <target state="translated">&lt;a href=&quot;#warning-filter&quot;&gt;警告フィルター仕様の&lt;/a&gt;リストにエントリーを挿入します。エントリはデフォルトで前面に挿入されます。&lt;em&gt;append&lt;/em&gt;がtrueの場合、最後に挿入されます。これにより、引数のタイプがチェックされ、&lt;em&gt;メッセージ&lt;/em&gt;と&lt;em&gt;モジュールの&lt;/em&gt;正規表現がコンパイルされ、それらがタプルとして警告フィルターのリストに挿入されます。リストの先頭に近いエントリは、両方が特定の警告に一致する場合、リストの後のエントリを上書きします。省略された引数は、デフォルトですべてに一致する値になります。</target>
        </trans-unit>
        <trans-unit id="ff80a5974b23d77a5c2b2ad834261e49b5ed7b09" translate="yes" xml:space="preserve">
          <source>Insert char or enter insert mode</source>
          <target state="translated">文字を挿入するか、挿入モードに入ります。</target>
        </trans-unit>
        <trans-unit id="e1b4dd9343d0aec1500078fcc20dfa87ecdaec8c" translate="yes" xml:space="preserve">
          <source>Insert contents of the system-wide clipboard into the current window.</source>
          <target state="translated">システム全体のクリップボードの内容を現在のウィンドウに挿入します。</target>
        </trans-unit>
        <trans-unit id="1d9d9fcb3881a1a7b2f39fbd44148815f8ffb775" translate="yes" xml:space="preserve">
          <source>Insert line</source>
          <target state="translated">行の挿入</target>
        </trans-unit>
        <trans-unit id="85b1c3bfc9615f38c45334ce27a2c3874f427470" translate="yes" xml:space="preserve">
          <source>Insert text into the line buffer at the cursor position. This calls &lt;code&gt;rl_insert_text()&lt;/code&gt; in the underlying library, but ignores the return value.</source>
          <target state="translated">ラインバッファーのカーソル位置にテキストを挿入します。これは、基礎となるライブラリの &lt;code&gt;rl_insert_text()&lt;/code&gt; を呼び出しますが、戻り値を無視します。</target>
        </trans-unit>
        <trans-unit id="321a83365ddb728f137f24e4d0374b111b7a89d6" translate="yes" xml:space="preserve">
          <source>Inserts &lt;em&gt;subelement&lt;/em&gt; at the given position in this element. Raises &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;subelement&lt;/em&gt; is not an &lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この要素の指定された位置に&lt;em&gt;サブ要素&lt;/em&gt;を挿入します。発生させ&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; 例外を&lt;/a&gt;場合は&lt;em&gt;サブ要素が&lt;/em&gt;ない&lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt; &lt;code&gt;Element&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="07136851031cb8faca3df628c368a5d3f07c5e9a" translate="yes" xml:space="preserve">
          <source>Inserts a pane at the specified position.</source>
          <target state="translated">指定した位置にペインを挿入します。</target>
        </trans-unit>
        <trans-unit id="ba601e0ab0345ba7e2ea9c966cfb362c3e4da835" translate="yes" xml:space="preserve">
          <source>Inspect area below mouse for target objects while drag is performed.</source>
          <target state="translated">ドラッグしている間、マウスの下の領域にターゲットオブジェクトがないかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="603a69de2ef615fc4774dc5a531b0478d24bd0ba" translate="yes" xml:space="preserve">
          <source>Install a timer that calls &lt;em&gt;fun&lt;/em&gt; after &lt;em&gt;t&lt;/em&gt; milliseconds.</source>
          <target state="translated">&lt;em&gt;t&lt;/em&gt;ミリ秒後に&lt;em&gt;fun&lt;/em&gt;を呼び出すタイマーをインストールします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2d804377ba7463dd5b6eaba5ccaaad14a63c4069" translate="yes" xml:space="preserve">
          <source>Install all of your application&amp;rsquo;s dependencies into the &lt;code&gt;myapp&lt;/code&gt; directory, using pip:</source>
          <target state="translated">pipを使用して、アプリケーションのすべての依存関係を &lt;code&gt;myapp&lt;/code&gt; ディレクトリにインストールします。</target>
        </trans-unit>
        <trans-unit id="520b157afbe331621bce1a360a6f018e0e187fbb" translate="yes" xml:space="preserve">
          <source>Install an &lt;a href=&quot;#urllib.request.OpenerDirector&quot;&gt;&lt;code&gt;OpenerDirector&lt;/code&gt;&lt;/a&gt; instance as the default global opener. Installing an opener is only necessary if you want urlopen to use that opener; otherwise, simply call &lt;a href=&quot;#urllib.request.OpenerDirector.open&quot;&gt;&lt;code&gt;OpenerDirector.open()&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;#urllib.request.urlopen&quot;&gt;&lt;code&gt;urlopen()&lt;/code&gt;&lt;/a&gt;. The code does not check for a real &lt;a href=&quot;#urllib.request.OpenerDirector&quot;&gt;&lt;code&gt;OpenerDirector&lt;/code&gt;&lt;/a&gt;, and any class with the appropriate interface will work.</source>
          <target state="translated">&lt;a href=&quot;#urllib.request.OpenerDirector&quot;&gt; &lt;code&gt;OpenerDirector&lt;/code&gt; &lt;/a&gt;インスタンスをデフォルトのグローバルオープナーとしてインストールします。オープナーのインストールは、urlopenでオープナーを使用する場合にのみ必要です。それ以外の場合は、単に&lt;a href=&quot;#urllib.request.urlopen&quot;&gt; &lt;code&gt;urlopen()&lt;/code&gt; の&lt;/a&gt;代わりに&lt;a href=&quot;#urllib.request.OpenerDirector.open&quot;&gt; &lt;code&gt;OpenerDirector.open()&lt;/code&gt; を&lt;/a&gt;呼び出します。コードは実際の&lt;a href=&quot;#urllib.request.OpenerDirector&quot;&gt; &lt;code&gt;OpenerDirector&lt;/code&gt; を&lt;/a&gt;チェックせず、適切なインターフェイスを持つクラスが機能します。</target>
        </trans-unit>
        <trans-unit id="964c4c7deeb02bca66bce575984f247809b17ee8" translate="yes" xml:space="preserve">
          <source>Install debug hooks on memory allocators to check for:</source>
          <target state="translated">メモリアロケータにデバッグフックをインストールしてチェックします。</target>
        </trans-unit>
        <trans-unit id="37e330f724f7fcf65d8b68bd41b82aaa46b9f715" translate="yes" xml:space="preserve">
          <source>Install the control-c handler. When a &lt;a href=&quot;signal#signal.SIGINT&quot;&gt;&lt;code&gt;signal.SIGINT&lt;/code&gt;&lt;/a&gt; is received (usually in response to the user pressing control-c) all registered results have &lt;a href=&quot;#unittest.TestResult.stop&quot;&gt;&lt;code&gt;stop()&lt;/code&gt;&lt;/a&gt; called.</source>
          <target state="translated">Install the control-c handler. When a &lt;a href=&quot;signal#signal.SIGINT&quot;&gt; &lt;code&gt;signal.SIGINT&lt;/code&gt; &lt;/a&gt; is received (usually in response to the user pressing control-c) all registered results have &lt;a href=&quot;#unittest.TestResult.stop&quot;&gt; &lt;code&gt;stop()&lt;/code&gt; &lt;/a&gt; called.</target>
        </trans-unit>
        <trans-unit id="455b086ac3298a91870a87090996554bb11b3083" translate="yes" xml:space="preserve">
          <source>Install the control-c handler. When a &lt;code&gt;signal.SIGINT&lt;/code&gt; is received (usually in response to the user pressing control-c) all registered results have &lt;a href=&quot;#unittest.TestResult.stop&quot;&gt;&lt;code&gt;stop()&lt;/code&gt;&lt;/a&gt; called.</source>
          <target state="translated">control-cハンドラーをインストールします。場合 &lt;code&gt;signal.SIGINT&lt;/code&gt; は（通常制御-Cを押してユーザに応答して）受信されたすべての登録結果を有する&lt;a href=&quot;#unittest.TestResult.stop&quot;&gt; &lt;code&gt;stop()&lt;/code&gt; &lt;/a&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="9d9844ff0d9d22475c61112c01b5f0c916b24483" translate="yes" xml:space="preserve">
          <source>Installation paths</source>
          <target state="translated">インストールパス</target>
        </trans-unit>
        <trans-unit id="e23f8bdbda721b9cbed1f844f7307a95d9b58116" translate="yes" xml:space="preserve">
          <source>Installing Python Modules</source>
          <target state="translated">Pythonモジュールのインストール</target>
        </trans-unit>
        <trans-unit id="a5aa044edf2a4b23b0600882b63f3573a49708ee" translate="yes" xml:space="preserve">
          <source>Installing Python Modules (Legacy version)</source>
          <target state="translated">Pythonモジュールのインストール(レガシー版</target>
        </trans-unit>
        <trans-unit id="71e27cbe55c7ee739cd8deca3e2c0f21cd96ea3e" translate="yes" xml:space="preserve">
          <source>Installing your CGI script on a Unix system</source>
          <target state="translated">Unix システムに CGI スクリプトをインストールする</target>
        </trans-unit>
        <trans-unit id="c1d91ffedb22549df648586a28db755e96527174" translate="yes" xml:space="preserve">
          <source>Installs activation scripts appropriate to the platform into the virtual environment.</source>
          <target state="translated">プラットフォームに適したアクティベーションスクリプトを仮想環境にインストールします。</target>
        </trans-unit>
        <trans-unit id="02d9da332f931b3a6a11cc4f1b01fd46bbfd85c7" translate="yes" xml:space="preserve">
          <source>Instance attributes (read-only):</source>
          <target state="translated">インスタンス属性(読み取り専用)。</target>
        </trans-unit>
        <trans-unit id="cef505a4b9b67a0b31ca83b3b269c5533fa33c8d" translate="yes" xml:space="preserve">
          <source>Instance method</source>
          <target state="translated">インスタンスメソッド</target>
        </trans-unit>
        <trans-unit id="7a3c19110538625e1e983c1581301c5d59f09ead" translate="yes" xml:space="preserve">
          <source>Instance methods:</source>
          <target state="translated">インスタンスメソッドです。</target>
        </trans-unit>
        <trans-unit id="f5e5a85bed7028b78978acbd1aaddcd815f1c067" translate="yes" xml:space="preserve">
          <source>Instance of the &lt;a href=&quot;#unittest.TestLoader&quot;&gt;&lt;code&gt;TestLoader&lt;/code&gt;&lt;/a&gt; class intended to be shared. If no customization of the &lt;a href=&quot;#unittest.TestLoader&quot;&gt;&lt;code&gt;TestLoader&lt;/code&gt;&lt;/a&gt; is needed, this instance can be used instead of repeatedly creating new instances.</source>
          <target state="translated">共有する予定の&lt;a href=&quot;#unittest.TestLoader&quot;&gt; &lt;code&gt;TestLoader&lt;/code&gt; &lt;/a&gt;クラスのインスタンス。&lt;a href=&quot;#unittest.TestLoader&quot;&gt; &lt;code&gt;TestLoader&lt;/code&gt; &lt;/a&gt;のカスタマイズが不要な場合は、新しいインスタンスを繰り返し作成する代わりに、このインスタンスを使用できます。</target>
        </trans-unit>
        <trans-unit id="66006b01de7b00fd125d534c85307c7025d31754" translate="yes" xml:space="preserve">
          <source>Instances are a context manager that raises &lt;a href=&quot;#test.support.ResourceDenied&quot;&gt;&lt;code&gt;ResourceDenied&lt;/code&gt;&lt;/a&gt; if the specified exception type is raised. Any keyword arguments are treated as attribute/value pairs to be compared against any exception raised within the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement. Only if all pairs match properly against attributes on the exception is &lt;a href=&quot;#test.support.ResourceDenied&quot;&gt;&lt;code&gt;ResourceDenied&lt;/code&gt;&lt;/a&gt; raised.</source>
          <target state="translated">インスタンスは、指定された例外タイプが発生した場合に&lt;a href=&quot;#test.support.ResourceDenied&quot;&gt; &lt;code&gt;ResourceDenied&lt;/code&gt; &lt;/a&gt;を発生させるコンテキストマネージャです。キーワード引数は属性と値のペアとして扱われ、&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメント内で発生した例外と比較されます。すべてのペアが例外の属性と適切に一致する場合のみ、&lt;a href=&quot;#test.support.ResourceDenied&quot;&gt; &lt;code&gt;ResourceDenied&lt;/code&gt; が&lt;/a&gt;発生します。</target>
        </trans-unit>
        <trans-unit id="5b2ca9758b0f12ce392282b3b02b3fb6078d315a" translate="yes" xml:space="preserve">
          <source>Instances are a context manager that raises &lt;a href=&quot;#test.support.ResourceDenied&quot;&gt;&lt;code&gt;ResourceDenied&lt;/code&gt;&lt;/a&gt; if the specified exception type is raised. Any keyword arguments are treated as attribute/value pairs to be compared against any exception raised within the &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement. Only if all pairs match properly against attributes on the exception is &lt;a href=&quot;#test.support.ResourceDenied&quot;&gt;&lt;code&gt;ResourceDenied&lt;/code&gt;&lt;/a&gt; raised.</source>
          <target state="translated">Instances are a context manager that raises &lt;a href=&quot;#test.support.ResourceDenied&quot;&gt; &lt;code&gt;ResourceDenied&lt;/code&gt; &lt;/a&gt; if the specified exception type is raised. Any keyword arguments are treated as attribute/value pairs to be compared against any exception raised within the &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt; statement. Only if all pairs match properly against attributes on the exception is &lt;a href=&quot;#test.support.ResourceDenied&quot;&gt; &lt;code&gt;ResourceDenied&lt;/code&gt; &lt;/a&gt; raised.</target>
        </trans-unit>
        <trans-unit id="7c702b9ba47b1a29abe7f9b14424131410786fc9" translate="yes" xml:space="preserve">
          <source>Instances are created in the usual way, by calling the class:</source>
          <target state="translated">インスタンスは通常の方法で、クラスを呼び出すことで作成されます。</target>
        </trans-unit>
        <trans-unit id="e36624384482780c99f8cf1e80e08d4dbffcccda" translate="yes" xml:space="preserve">
          <source>Instances are replaced with an appropriate value for Enum members.</source>
          <target state="translated">インスタンスは、Enumメンバーの適切な値に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="678f569c8a49c3e89e6407c01796479ffad36db3" translate="yes" xml:space="preserve">
          <source>Instances are replaced with an appropriate value for Enum members. By default, the initial value starts at 1.</source>
          <target state="translated">インスタンスは、Enum メンバの適切な値に置き換えられます。デフォルトでは、初期値は1から始まります。</target>
        </trans-unit>
        <trans-unit id="977046f0ab67d4d0e4e35706464d8171ca16252f" translate="yes" xml:space="preserve">
          <source>Instances have a single attribute:</source>
          <target state="translated">インスタンスは1つの属性を持っています。</target>
        </trans-unit>
        <trans-unit id="af4676b1bcc4624e7da45d7a5ff8eacd0bf3c33c" translate="yes" xml:space="preserve">
          <source>Instances have one method in addition to those of &lt;a href=&quot;#zipfile.ZipFile&quot;&gt;&lt;code&gt;ZipFile&lt;/code&gt;&lt;/a&gt; objects:</source>
          <target state="translated">インスタンスには、&lt;a href=&quot;#zipfile.ZipFile&quot;&gt; &lt;code&gt;ZipFile&lt;/code&gt; &lt;/a&gt;オブジェクトのインスタンスに加えて1つのメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="9356878128c51826b54b444b3b3d1f7304b466d9" translate="yes" xml:space="preserve">
          <source>Instances have the following methods and attributes:</source>
          <target state="translated">インスタンスは以下のメソッドと属性を持っています。</target>
        </trans-unit>
        <trans-unit id="4836c2b7b89edcfc83e32a7e01ec4c9ebbb5e79a" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#cmd.Cmd&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;&lt;/a&gt; subclasses have some public instance variables:</source>
          <target state="translated">&lt;a href=&quot;#cmd.Cmd&quot;&gt; &lt;code&gt;Cmd&lt;/code&gt; &lt;/a&gt;サブクラスのインスタンスには、いくつかのパブリックインスタンス変数があります。</target>
        </trans-unit>
        <trans-unit id="e0fbdb8f7a773261c049a9a5c3586d5acb9eee33" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#http.cookiejar.FileCookieJar&quot;&gt;&lt;code&gt;FileCookieJar&lt;/code&gt;&lt;/a&gt; raise this exception on failure to load cookies from a file. &lt;a href=&quot;#http.cookiejar.LoadError&quot;&gt;&lt;code&gt;LoadError&lt;/code&gt;&lt;/a&gt; is a subclass of &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#http.cookiejar.FileCookieJar&quot;&gt; &lt;code&gt;FileCookieJar&lt;/code&gt; の&lt;/a&gt;インスタンスは、ファイルからCookieを読み込めなかった場合にこの例外を発生させます。&lt;a href=&quot;#http.cookiejar.LoadError&quot;&gt; &lt;code&gt;LoadError&lt;/code&gt; は&lt;/a&gt;のサブクラスである&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; の&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0c3af14ce90e18c0cd86060643d0a376c7566d62" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#netrc.netrc&quot;&gt;&lt;code&gt;netrc&lt;/code&gt;&lt;/a&gt; have public instance variables:</source>
          <target state="translated">&lt;a href=&quot;#netrc.netrc&quot;&gt; &lt;code&gt;netrc&lt;/code&gt; の&lt;/a&gt;インスタンスには、パブリックインスタンス変数があります。</target>
        </trans-unit>
        <trans-unit id="56e3aee8ff0d6c01108a6a06292032304f1239fb" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#poplib.POP3_SSL&quot;&gt;&lt;code&gt;POP3_SSL&lt;/code&gt;&lt;/a&gt; have no additional methods. The interface of this subclass is identical to its parent.</source>
          <target state="translated">&lt;a href=&quot;#poplib.POP3_SSL&quot;&gt; &lt;code&gt;POP3_SSL&lt;/code&gt; の&lt;/a&gt;インスタンスには、追加のメソッドはありません。このサブクラスのインターフェースは、その親と同じです。</target>
        </trans-unit>
        <trans-unit id="6a270da5a938701cf4bfb5b00e63f7b889296e57" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt; provide the following operations:</source>
          <target state="translated">&lt;a href=&quot;#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#frozenset&quot;&gt; &lt;code&gt;frozenset&lt;/code&gt; の&lt;/a&gt;インスタンスは以下の操作を提供します：</target>
        </trans-unit>
        <trans-unit id="99ef98d14b1f3f5f16c5b4358f8ece80d4b0bb22" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; are compared to instances of &lt;a href=&quot;#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt; based on their members. For example, &lt;code&gt;set('abc') == frozenset('abc')&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; and so does &lt;code&gt;set('abc') in set([frozenset('abc')])&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;インスタンスは、メンバーに基づいて、&lt;a href=&quot;#frozenset&quot;&gt; &lt;code&gt;frozenset&lt;/code&gt; の&lt;/a&gt;インスタンスと比較されます。たとえば、 &lt;code&gt;set('abc') == frozenset('abc')&lt;/code&gt; は &lt;code&gt;True&lt;/code&gt; を返し &lt;code&gt;set('abc') in set([frozenset('abc')])&lt;/code&gt; set（ 'abc'）も返します。</target>
        </trans-unit>
        <trans-unit id="5bad8405386be273c519f37d5de7d1af43fd2371" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#shlex.shlex&quot;&gt;&lt;code&gt;shlex&lt;/code&gt;&lt;/a&gt; subclasses have some public instance variables which either control lexical analysis or can be used for debugging:</source>
          <target state="translated">&lt;a href=&quot;#shlex.shlex&quot;&gt; &lt;code&gt;shlex&lt;/code&gt; &lt;/a&gt;サブクラスのインスタンスには、字句解析を制御するか、デバッグに使用できるいくつかのパブリックインスタンス変数があります。</target>
        </trans-unit>
        <trans-unit id="3a114067119bf39dea4018ea438842b0e1df5bc4" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#ssl.SSLSocket&quot;&gt;&lt;code&gt;SSLSocket&lt;/code&gt;&lt;/a&gt; must be created using the &lt;a href=&quot;#ssl.SSLContext.wrap_socket&quot;&gt;&lt;code&gt;SSLContext.wrap_socket()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;#ssl.SSLSocket&quot;&gt; &lt;code&gt;SSLSocket&lt;/code&gt; の&lt;/a&gt;インスタンスは、&lt;a href=&quot;#ssl.SSLContext.wrap_socket&quot;&gt; &lt;code&gt;SSLContext.wrap_socket()&lt;/code&gt; &lt;/a&gt;メソッドを使用して作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="6232c7c11311e2dbaabeb35f7f01aef1268d5f26" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#statistics.NormalDist&quot;&gt;&lt;code&gt;NormalDist&lt;/code&gt;&lt;/a&gt; support addition, subtraction, multiplication and division by a constant. These operations are used for translation and scaling. For example:</source>
          <target state="translated">&lt;a href=&quot;#statistics.NormalDist&quot;&gt; &lt;code&gt;NormalDist&lt;/code&gt; の&lt;/a&gt;インスタンスは、定数による加算、減算、乗算、および除算をサポートします。これらの操作は、変換とスケーリングに使用されます。例えば：</target>
        </trans-unit>
        <trans-unit id="e4fca6b7030888ac58e9781d764d833f2fa42ad1" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#xml.sax.xmlreader.IncrementalParser&quot;&gt;&lt;code&gt;IncrementalParser&lt;/code&gt;&lt;/a&gt; offer the following additional methods:</source>
          <target state="translated">&lt;a href=&quot;#xml.sax.xmlreader.IncrementalParser&quot;&gt; &lt;code&gt;IncrementalParser&lt;/code&gt; の&lt;/a&gt;インスタンスは、次の追加メソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="c9c13ace643e3c6e869ce828dec5a9ec44914c1b" translate="yes" xml:space="preserve">
          <source>Instances of &lt;a href=&quot;#xml.sax.xmlreader.Locator&quot;&gt;&lt;code&gt;Locator&lt;/code&gt;&lt;/a&gt; provide these methods:</source>
          <target state="translated">&lt;a href=&quot;#xml.sax.xmlreader.Locator&quot;&gt; &lt;code&gt;Locator&lt;/code&gt; の&lt;/a&gt;インスタンスは、次のメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="804f8454e9538af6b77807d86e343f3fb23e2b60" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;ast.expr&lt;/code&gt; and &lt;code&gt;ast.stmt&lt;/code&gt; subclasses have &lt;a href=&quot;#ast.AST.lineno&quot;&gt;&lt;code&gt;lineno&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ast.AST.col_offset&quot;&gt;&lt;code&gt;col_offset&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ast.AST.lineno&quot;&gt;&lt;code&gt;lineno&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#ast.AST.col_offset&quot;&gt;&lt;code&gt;col_offset&lt;/code&gt;&lt;/a&gt; attributes. The &lt;a href=&quot;#ast.AST.lineno&quot;&gt;&lt;code&gt;lineno&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ast.AST.end_lineno&quot;&gt;&lt;code&gt;end_lineno&lt;/code&gt;&lt;/a&gt; are the first and last line numbers of source text span (1-indexed so the first line is line 1) and the &lt;a href=&quot;#ast.AST.col_offset&quot;&gt;&lt;code&gt;col_offset&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ast.AST.end_col_offset&quot;&gt;&lt;code&gt;end_col_offset&lt;/code&gt;&lt;/a&gt; are the corresponding UTF-8 byte offsets of the first and last tokens that generated the node. The UTF-8 offset is recorded because the parser uses UTF-8 internally.</source>
          <target state="translated">&lt;code&gt;ast.expr&lt;/code&gt; および &lt;code&gt;ast.stmt&lt;/code&gt; サブクラスのインスタンスには、&lt;a href=&quot;#ast.AST.lineno&quot;&gt; &lt;code&gt;lineno&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ast.AST.col_offset&quot;&gt; &lt;code&gt;col_offset&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ast.AST.lineno&quot;&gt; &lt;code&gt;lineno&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#ast.AST.col_offset&quot;&gt; &lt;code&gt;col_offset&lt;/code&gt; &lt;/a&gt;属性があります。&lt;a href=&quot;#ast.AST.lineno&quot;&gt; &lt;code&gt;lineno&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#ast.AST.end_lineno&quot;&gt; &lt;code&gt;end_lineno&lt;/code&gt; は、&lt;/a&gt;ソーステキストスパン（最初の行は行1であるので、1インデックス）との最初と最後の行番号であり&lt;a href=&quot;#ast.AST.col_offset&quot;&gt; &lt;code&gt;col_offset&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#ast.AST.end_col_offset&quot;&gt; &lt;code&gt;end_col_offset&lt;/code&gt; &lt;/a&gt;ノードを生成した最初と最後のトークンのUTF-8バイトのオフセットに対応しています。パーサーは内部でUTF-8を使用するため、UTF-8オフセットが記録されます。</target>
        </trans-unit>
        <trans-unit id="5d95f68c80ce0e510ee590b3846279063b4a2aa5" translate="yes" xml:space="preserve">
          <source>Instances of Action (or return value of any callable to the &lt;code&gt;action&lt;/code&gt; parameter) should have attributes &amp;ldquo;dest&amp;rdquo;, &amp;ldquo;option_strings&amp;rdquo;, &amp;ldquo;default&amp;rdquo;, &amp;ldquo;type&amp;rdquo;, &amp;ldquo;required&amp;rdquo;, &amp;ldquo;help&amp;rdquo;, etc. defined. The easiest way to ensure these attributes are defined is to call &lt;code&gt;Action.__init__&lt;/code&gt;.</source>
          <target state="translated">アクションのインスタンス（または &lt;code&gt;action&lt;/code&gt; パラメータへの呼び出し可能なものの戻り値）には、「dest」、「option_strings」、「default」、「type」、「required」、「help」などの属性が定義されている必要があります。これらの属性が定義されていることを確認する最も簡単な方法は、 &lt;code&gt;Action.__init__&lt;/code&gt; を呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="8d188b0cbbecd67a4203389ad78cd336997dc157" translate="yes" xml:space="preserve">
          <source>Instances of a class cannot be ordered with respect to other instances of the same class, or other types of object, unless the class defines enough of the methods &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__lt__&quot;&gt;&lt;code&gt;__lt__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__le__&quot;&gt;&lt;code&gt;__le__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__gt__&quot;&gt;&lt;code&gt;__gt__()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__ge__&quot;&gt;&lt;code&gt;__ge__()&lt;/code&gt;&lt;/a&gt; (in general, &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__lt__&quot;&gt;&lt;code&gt;__lt__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__eq__&quot;&gt;&lt;code&gt;__eq__()&lt;/code&gt;&lt;/a&gt; are sufficient, if you want the conventional meanings of the comparison operators).</source>
          <target state="translated">クラスがメソッド&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__lt__&quot;&gt; &lt;code&gt;__lt__()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__le__&quot;&gt; &lt;code&gt;__le__()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__gt__&quot;&gt; &lt;code&gt;__gt__()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__ge__&quot;&gt; &lt;code&gt;__ge__()&lt;/code&gt; &lt;/a&gt;十分に定義しない限り、クラスのインスタンスは、同じクラスの他のインスタンス、または他のタイプのオブジェクトに対して順序付けできません（一般に、比較演算子の従来の意味が必要な場合は、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__eq__&quot;&gt; &lt;code&gt;__eq__()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__lt__&quot;&gt; &lt;code&gt;__lt__()&lt;/code&gt; &lt;/a&gt;および__eq __（）で十分です）。</target>
        </trans-unit>
        <trans-unit id="0ae71dda80f08a0ad9d6529fa485e3bf580f7096" translate="yes" xml:space="preserve">
          <source>Instances of a class cannot be ordered with respect to other instances of the same class, or other types of object, unless the class defines enough of the methods &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__lt__&quot;&gt;&lt;code&gt;__lt__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__le__&quot;&gt;&lt;code&gt;__le__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__gt__&quot;&gt;&lt;code&gt;__gt__()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__ge__&quot;&gt;&lt;code&gt;__ge__()&lt;/code&gt;&lt;/a&gt; (in general, &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__lt__&quot;&gt;&lt;code&gt;__lt__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__eq__&quot;&gt;&lt;code&gt;__eq__()&lt;/code&gt;&lt;/a&gt; are sufficient, if you want the conventional meanings of the comparison operators).</source>
          <target state="translated">Instances of a class cannot be ordered with respect to other instances of the same class, or other types of object, unless the class defines enough of the methods &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__lt__&quot;&gt; &lt;code&gt;__lt__()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__le__&quot;&gt; &lt;code&gt;__le__()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__gt__&quot;&gt; &lt;code&gt;__gt__()&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__ge__&quot;&gt; &lt;code&gt;__ge__()&lt;/code&gt; &lt;/a&gt; (in general, &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__lt__&quot;&gt; &lt;code&gt;__lt__()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__eq__&quot;&gt; &lt;code&gt;__eq__()&lt;/code&gt; &lt;/a&gt; are sufficient, if you want the conventional meanings of the comparison operators).</target>
        </trans-unit>
        <trans-unit id="6b5dcf1058b351c38261d04ca320dda4b3f25f2d" translate="yes" xml:space="preserve">
          <source>Instances of class &lt;code&gt;_Feature&lt;/code&gt; have two corresponding methods, &lt;code&gt;getOptionalRelease()&lt;/code&gt; and &lt;code&gt;getMandatoryRelease()&lt;/code&gt;.</source>
          <target state="translated">クラス &lt;code&gt;_Feature&lt;/code&gt; のインスタンスには、2つの対応するメソッド、 &lt;code&gt;getOptionalRelease()&lt;/code&gt; および &lt;code&gt;getMandatoryRelease()&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="5e6c634a0edffb9d61a7365311bea34ffe79ec57" translate="yes" xml:space="preserve">
          <source>Instances of foreign functions are also C compatible data types; they represent C function pointers.</source>
          <target state="translated">外部関数のインスタンスもC互換のデータ型であり、Cの関数ポインタを表します。</target>
        </trans-unit>
        <trans-unit id="a8afbcc19adfe2bbe9b22c2815e4299724822e37" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;a href=&quot;#subprocess.Popen&quot;&gt;&lt;code&gt;Popen&lt;/code&gt;&lt;/a&gt; class have the following methods:</source>
          <target state="translated">&lt;a href=&quot;#subprocess.Popen&quot;&gt; &lt;code&gt;Popen&lt;/code&gt; &lt;/a&gt;クラスのインスタンスには次のメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="3a9546d42fe8710c49b46e747a53a869881a8867" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;a href=&quot;#unittest.TestCase&quot;&gt;&lt;code&gt;TestCase&lt;/code&gt;&lt;/a&gt; class represent the logical test units in the &lt;a href=&quot;#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; universe. This class is intended to be used as a base class, with specific tests being implemented by concrete subclasses. This class implements the interface needed by the test runner to allow it to drive the tests, and methods that the test code can use to check for and report various kinds of failure.</source>
          <target state="translated">&lt;a href=&quot;#unittest.TestCase&quot;&gt; &lt;code&gt;TestCase&lt;/code&gt; &lt;/a&gt;クラスのインスタンスは、&lt;a href=&quot;#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;ユニバースの論理テストユニットを表します。このクラスは、具体的なサブクラスによって特定のテストが実装される、基本クラスとしての使用を目的としています。このクラスは、テストランナーがテストを実行できるようにするために必要なインターフェイスと、テストコードがさまざまな種類の障害をチェックして報告するために使用できるメソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="c68784d7b74127503c1abd5f3c46123eaca45a23" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;a href=&quot;#zipfile.ZipInfo&quot;&gt;&lt;code&gt;ZipInfo&lt;/code&gt;&lt;/a&gt; class are returned by the &lt;a href=&quot;#zipfile.ZipFile.getinfo&quot;&gt;&lt;code&gt;getinfo()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#zipfile.ZipFile.infolist&quot;&gt;&lt;code&gt;infolist()&lt;/code&gt;&lt;/a&gt; methods of &lt;a href=&quot;#zipfile.ZipFile&quot;&gt;&lt;code&gt;ZipFile&lt;/code&gt;&lt;/a&gt; objects. Each object stores information about a single member of the ZIP archive.</source>
          <target state="translated">&lt;a href=&quot;#zipfile.ZipInfo&quot;&gt; &lt;code&gt;ZipInfo&lt;/code&gt; &lt;/a&gt;クラスのインスタンスは、&lt;a href=&quot;#zipfile.ZipFile&quot;&gt; &lt;code&gt;ZipFile&lt;/code&gt; &lt;/a&gt;オブジェクトの&lt;a href=&quot;#zipfile.ZipFile.getinfo&quot;&gt; &lt;code&gt;getinfo()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#zipfile.ZipFile.infolist&quot;&gt; &lt;code&gt;infolist()&lt;/code&gt; &lt;/a&gt;メソッドによって返されます。各オブジェクトには、ZIPアーカイブの1つのメンバーに関する情報が格納されます。</target>
        </trans-unit>
        <trans-unit id="7bcb1ef59d54b0ecd47451fa339ebb50def36131" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;em&gt;DatagramTransport&lt;/em&gt; class are returned from the &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_datagram_endpoint&quot;&gt;&lt;code&gt;loop.create_datagram_endpoint()&lt;/code&gt;&lt;/a&gt; event loop method.</source>
          <target state="translated">&lt;em&gt;DatagramTransport&lt;/em&gt;クラスのインスタンスは、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_datagram_endpoint&quot;&gt; &lt;code&gt;loop.create_datagram_endpoint()&lt;/code&gt; &lt;/a&gt;イベントループメソッドから返されます。</target>
        </trans-unit>
        <trans-unit id="586088455e5044d9a461dfedd040a8e305fa706e" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;em&gt;ReadTransport&lt;/em&gt; class are returned from the &lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_read_pipe&quot;&gt;&lt;code&gt;loop.connect_read_pipe()&lt;/code&gt;&lt;/a&gt; event loop method and are also used by subprocess-related methods like &lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_exec&quot;&gt;&lt;code&gt;loop.subprocess_exec()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">インスタンス&lt;em&gt;ReadTransportの&lt;/em&gt;クラスから返される&lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_read_pipe&quot;&gt; &lt;code&gt;loop.connect_read_pipe()&lt;/code&gt; &lt;/a&gt;イベントループ法等サブプロセス関連の方法によっても使用される&lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_exec&quot;&gt; &lt;code&gt;loop.subprocess_exec()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2c1f936b1157bd672393e5f1fcb46b2dc8e3cf90" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;em&gt;SubprocessTransport&lt;/em&gt; class are returned from event loop methods &lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_shell&quot;&gt;&lt;code&gt;loop.subprocess_shell()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_exec&quot;&gt;&lt;code&gt;loop.subprocess_exec()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">インスタンス&lt;em&gt;SubprocessTransportの&lt;/em&gt;クラスは、イベントループメソッドから返される&lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_shell&quot;&gt; &lt;code&gt;loop.subprocess_shell()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_exec&quot;&gt; &lt;code&gt;loop.subprocess_exec()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="67256cc8f2e8e404f6172497df055c8737b58bdb" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;em&gt;Transport&lt;/em&gt; class are returned from or used by event loop methods like &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt;&lt;code&gt;loop.create_connection()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_unix_connection&quot;&gt;&lt;code&gt;loop.create_unix_connection()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_server&quot;&gt;&lt;code&gt;loop.create_server()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.loop.sendfile&quot;&gt;&lt;code&gt;loop.sendfile()&lt;/code&gt;&lt;/a&gt;, etc.</source>
          <target state="translated">&lt;em&gt;Transport&lt;/em&gt;クラスのインスタンスは、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_connection&quot;&gt; &lt;code&gt;loop.create_connection()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_unix_connection&quot;&gt; &lt;code&gt;loop.create_unix_connection()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.create_server&quot;&gt; &lt;code&gt;loop.create_server()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.sendfile&quot;&gt; &lt;code&gt;loop.sendfile()&lt;/code&gt; &lt;/a&gt;などのイベントループメソッドから返されるか、イベントメソッドによって使用されます。</target>
        </trans-unit>
        <trans-unit id="b5fb2b433087bffe30f4818f8930283b1d33a135" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;em&gt;WriteTransport&lt;/em&gt; class are returned from the &lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_write_pipe&quot;&gt;&lt;code&gt;loop.connect_write_pipe()&lt;/code&gt;&lt;/a&gt; event loop method and are also used by subprocess-related methods like &lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_exec&quot;&gt;&lt;code&gt;loop.subprocess_exec()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">インスタンス&lt;em&gt;WriteTransportの&lt;/em&gt;クラスから返される&lt;a href=&quot;asyncio-eventloop#asyncio.loop.connect_write_pipe&quot;&gt; &lt;code&gt;loop.connect_write_pipe()&lt;/code&gt; &lt;/a&gt;イベントループ法等サブプロセス関連の方法によっても使用される&lt;a href=&quot;asyncio-eventloop#asyncio.loop.subprocess_exec&quot;&gt; &lt;code&gt;loop.subprocess_exec()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4cbaede1df11dc6a6a6c405d9432098c3bd45c5c" translate="yes" xml:space="preserve">
          <source>Instances of these classes have no public methods. Functions exported by the shared library can be accessed as attributes or by index. Please note that accessing the function through an attribute caches the result and therefore accessing it repeatedly returns the same object each time. On the other hand, accessing it through an index returns a new object each time:</source>
          <target state="translated">これらのクラスのインスタンスにはパブリック・メソッドはありません。共有ライブラリによってエクスポートされた関数は、属性として、またはインデックスによってアクセスすることができます。アトリビュートを使って関数にアクセスすると、結果がキャッシュされるため、毎回同じオブジェクトが返されることに注意してください。一方、インデックスからアクセスすると、毎回新しいオブジェクトが返されます。</target>
        </trans-unit>
        <trans-unit id="1a4d2d21f791021b6819e5841a2fccc5056ea44a" translate="yes" xml:space="preserve">
          <source>Instances of this class behave like &lt;a href=&quot;#ctypes.CDLL&quot;&gt;&lt;code&gt;CDLL&lt;/code&gt;&lt;/a&gt; instances, except that the Python GIL is &lt;em&gt;not&lt;/em&gt; released during the function call, and after the function execution the Python error flag is checked. If the error flag is set, a Python exception is raised.</source>
          <target state="translated">このクラスのインスタンスは&lt;a href=&quot;#ctypes.CDLL&quot;&gt; &lt;code&gt;CDLL&lt;/code&gt; &lt;/a&gt;インスタンスのように動作しますが、関数の呼び出し中にPython GILが解放され&lt;em&gt;ず&lt;/em&gt;、関数の実行後にPythonエラーフラグがチェックされる点が異なります。エラーフラグが設定されている場合、Python例外が発生します。</target>
        </trans-unit>
        <trans-unit id="d0b4eb84d866c4aa98cf000e08ff3a6c3d081018" translate="yes" xml:space="preserve">
          <source>Instances of this class can be used as both a context manager:</source>
          <target state="translated">このクラスのインスタンスは、コンテキストマネージャとしても使用できます。</target>
        </trans-unit>
        <trans-unit id="f609df77c7087014c66efc5131badef500e89bea" translate="yes" xml:space="preserve">
          <source>Instances of this class have &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__call__&quot;&gt;&lt;code&gt;__call__()&lt;/code&gt;&lt;/a&gt; methods identical in signature to &lt;a href=&quot;#codeop.compile_command&quot;&gt;&lt;code&gt;compile_command()&lt;/code&gt;&lt;/a&gt;; the difference is that if the instance compiles program text containing a &lt;code&gt;__future__&lt;/code&gt; statement, the instance &amp;lsquo;remembers&amp;rsquo; and compiles all subsequent program texts with the statement in force.</source>
          <target state="translated">このクラスのインスタンスには、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__call__&quot;&gt; &lt;code&gt;__call__()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#codeop.compile_command&quot;&gt; &lt;code&gt;compile_command()&lt;/code&gt; &lt;/a&gt;__（）メソッドがあり、シグネチャはcompile_command（）と同じです。違いは、インスタンスが &lt;code&gt;__future__&lt;/code&gt; ステートメントを含むプログラムテキストをコンパイルする場合、インスタンスは有効なステートメントを使用して後続のすべてのプログラムテキストを「記憶」し、コンパイルすることです。</target>
        </trans-unit>
        <trans-unit id="925a0c7a76a57e11d3f263578f0021165d4947c0" translate="yes" xml:space="preserve">
          <source>Instances of this class have &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__call__&quot;&gt;&lt;code&gt;__call__()&lt;/code&gt;&lt;/a&gt; methods identical in signature to the built-in function &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt;, but with the difference that if the instance compiles program text containing a &lt;a href=&quot;__future__#module-__future__&quot;&gt;&lt;code&gt;__future__&lt;/code&gt;&lt;/a&gt; statement, the instance &amp;lsquo;remembers&amp;rsquo; and compiles all subsequent program texts with the statement in force.</source>
          <target state="translated">このクラスのインスタンスには、組み込み関数&lt;a href=&quot;functions#compile&quot;&gt; &lt;code&gt;compile()&lt;/code&gt; &lt;/a&gt;とシグネチャが同じ&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__call__&quot;&gt; &lt;code&gt;__call__()&lt;/code&gt; &lt;/a&gt;メソッドがありますが、インスタンスが&lt;a href=&quot;__future__#module-__future__&quot;&gt; &lt;code&gt;__future__&lt;/code&gt; &lt;/a&gt;ステートメントを含むプログラムテキストをコンパイルすると、インスタンスは、発効中の声明。</target>
        </trans-unit>
        <trans-unit id="c02f8932c379c69e1ca59cd35ffe68b14cc70934" translate="yes" xml:space="preserve">
          <source>Instances of this class have &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__call__&quot;&gt;&lt;code&gt;__call__()&lt;/code&gt;&lt;/a&gt; methods identical in signature to &lt;a href=&quot;#codeop.compile_command&quot;&gt;&lt;code&gt;compile_command()&lt;/code&gt;&lt;/a&gt;; the difference is that if the instance compiles program text containing a &lt;code&gt;__future__&lt;/code&gt; statement, the instance &amp;lsquo;remembers&amp;rsquo; and compiles all subsequent program texts with the statement in force.</source>
          <target state="translated">Instances of this class have &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__call__&quot;&gt; &lt;code&gt;__call__()&lt;/code&gt; &lt;/a&gt; methods identical in signature to &lt;a href=&quot;#codeop.compile_command&quot;&gt; &lt;code&gt;compile_command()&lt;/code&gt; &lt;/a&gt;; the difference is that if the instance compiles program text containing a &lt;code&gt;__future__&lt;/code&gt; statement, the instance &amp;lsquo;remembers&amp;rsquo; and compiles all subsequent program texts with the statement in force.</target>
        </trans-unit>
        <trans-unit id="ddd73e7c79938ba23bc1108f706bd345af9af765" translate="yes" xml:space="preserve">
          <source>Instances of this class have &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__call__&quot;&gt;&lt;code&gt;__call__()&lt;/code&gt;&lt;/a&gt; methods identical in signature to the built-in function &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt;, but with the difference that if the instance compiles program text containing a &lt;a href=&quot;__future__#module-__future__&quot;&gt;&lt;code&gt;__future__&lt;/code&gt;&lt;/a&gt; statement, the instance &amp;lsquo;remembers&amp;rsquo; and compiles all subsequent program texts with the statement in force.</source>
          <target state="translated">Instances of this class have &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__call__&quot;&gt; &lt;code&gt;__call__()&lt;/code&gt; &lt;/a&gt; methods identical in signature to the built-in function &lt;a href=&quot;functions#compile&quot;&gt; &lt;code&gt;compile()&lt;/code&gt; &lt;/a&gt;, but with the difference that if the instance compiles program text containing a &lt;a href=&quot;__future__#module-__future__&quot;&gt; &lt;code&gt;__future__&lt;/code&gt; &lt;/a&gt; statement, the instance &amp;lsquo;remembers&amp;rsquo; and compiles all subsequent program texts with the statement in force.</target>
        </trans-unit>
        <trans-unit id="3cea02a40f1382d313c478a7d347bf77afc22680" translate="yes" xml:space="preserve">
          <source>Instances of this class have attributes &lt;code&gt;filename&lt;/code&gt;, &lt;code&gt;lineno&lt;/code&gt;, &lt;code&gt;offset&lt;/code&gt; and &lt;code&gt;text&lt;/code&gt; for easier access to the details. &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str()&lt;/code&gt;&lt;/a&gt; of the exception instance returns only the message.</source>
          <target state="translated">このクラスのインスタンスには、詳細に簡単にアクセスできるように、 &lt;code&gt;filename&lt;/code&gt; 、 &lt;code&gt;lineno&lt;/code&gt; 、 &lt;code&gt;offset&lt;/code&gt; 、および &lt;code&gt;text&lt;/code&gt; 属性があります。例外インスタンスの&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str()&lt;/code&gt; &lt;/a&gt;はメッセージのみを返します。</target>
        </trans-unit>
        <trans-unit id="e9552998fad2e04265127b613f40d80668c89fe3" translate="yes" xml:space="preserve">
          <source>Instances of this class represent loaded shared libraries. Functions in these libraries use the standard C calling convention, and are assumed to return &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">このクラスのインスタンスは、ロードされた共有ライブラリを表します。これらのライブラリの関数は標準のC呼び出し規約を使用し、 &lt;code&gt;int&lt;/code&gt; を返すと想定されています。</target>
        </trans-unit>
        <trans-unit id="1092250393de1231514a87858fe06d28af28725a" translate="yes" xml:space="preserve">
          <source>Instant User&amp;rsquo;s Manual</source>
          <target state="translated">インスタントユーザーマニュアル</target>
        </trans-unit>
        <trans-unit id="574cb265821ad17477fe1f76be69bb3a65511224" translate="yes" xml:space="preserve">
          <source>Instantiate a socket from data obtained from the &lt;a href=&quot;#socket.socket.share&quot;&gt;&lt;code&gt;socket.share()&lt;/code&gt;&lt;/a&gt; method. The socket is assumed to be in blocking mode.</source>
          <target state="translated">&lt;a href=&quot;#socket.socket.share&quot;&gt; &lt;code&gt;socket.share()&lt;/code&gt; &lt;/a&gt;メソッドから取得したデータからソケットをインスタンス化します。ソケットはブロッキングモードであると見なされます。</target>
        </trans-unit>
        <trans-unit id="6cc2c38c57dd41a65fc68bb18ba93a896f33546b" translate="yes" xml:space="preserve">
          <source>Instantiate the bytes object &lt;em&gt;str&lt;/em&gt; with the supplied parameters, where &lt;em&gt;str&lt;/em&gt; should be a parameterized string obtained from the terminfo database. E.g. &lt;code&gt;tparm(tigetstr(&quot;cup&quot;), 5, 3)&lt;/code&gt; could result in &lt;code&gt;b'\033[6;4H'&lt;/code&gt;, the exact result depending on terminal type.</source>
          <target state="translated">バイト・オブジェクト・インスタンス&lt;em&gt;STR&lt;/em&gt;供給されたパラメータと&lt;em&gt;strは&lt;/em&gt; terminfoデータベースから得られたパラメータ化された文字列であるべきです。たとえば、 &lt;code&gt;tparm(tigetstr(&quot;cup&quot;), 5, 3)&lt;/code&gt; は &lt;code&gt;b'\033[6;4H'&lt;/code&gt; になる可能性があり、正確な結果は端末のタイプによって異なります。</target>
        </trans-unit>
        <trans-unit id="be1f69e0247ba6c30dc81d6522ec5b9dfbbb54e4" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;autospec=True&lt;/code&gt; you can pass &lt;code&gt;autospec=some_object&lt;/code&gt; to use an arbitrary object as the spec instead of the one being replaced.</source>
          <target state="translated">&lt;code&gt;autospec=True&lt;/code&gt; の代わりに、autospec = &lt;code&gt;autospec=some_object&lt;/code&gt; を渡して、置き換えられるオブジェクトの代わりに任意のオブジェクトを仕様として使用できます。</target>
        </trans-unit>
        <trans-unit id="c5c2e9f6e6835a11ba9448dc7766ab78368e93af" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;parser.readfp(fp)&lt;/code&gt; use &lt;code&gt;parser.read_file(readline_generator(fp))&lt;/code&gt;.</source>
          <target state="translated">代わりの &lt;code&gt;parser.readfp(fp)&lt;/code&gt; の使用 &lt;code&gt;parser.read_file(readline_generator(fp))&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3335f1cb058452ae970d6a5f6d030ab421d2b7a5" translate="yes" xml:space="preserve">
          <source>Instead of passing &lt;code&gt;True&lt;/code&gt; as the value for the punctuation_chars parameter, you can pass a string with specific characters, which will be used to determine which characters constitute punctuation. For example:</source>
          <target state="translated">punctuation_charsパラメータの値として &lt;code&gt;True&lt;/code&gt; を渡す代わりに、句読点を構成する文字を決定するために使用される特定の文字を含む文字列を渡すことができます。例えば：</target>
        </trans-unit>
        <trans-unit id="bfe94486b315d1f59be6456fc99c6885002b55bd" translate="yes" xml:space="preserve">
          <source>Instead of printing the output at the end of the profile run, you can save the results to a file by specifying a filename to the &lt;code&gt;run()&lt;/code&gt; function:</source>
          <target state="translated">プロファイルの実行の最後に出力を印刷する代わりに、 &lt;code&gt;run()&lt;/code&gt; 関数にファイル名を指定することにより、結果をファイルに保存できます。</target>
        </trans-unit>
        <trans-unit id="6962965673ba6e30d7da60e2b13234969e6aa223" translate="yes" xml:space="preserve">
          <source>Instead of reading the profile data from a file, a &lt;code&gt;cProfile.Profile&lt;/code&gt; or &lt;a href=&quot;#profile.Profile&quot;&gt;&lt;code&gt;profile.Profile&lt;/code&gt;&lt;/a&gt; object can be used as the profile data source.</source>
          <target state="translated">ファイルからプロファイルデータを読み取る代わりに、 &lt;code&gt;cProfile.Profile&lt;/code&gt; または&lt;a href=&quot;#profile.Profile&quot;&gt; &lt;code&gt;profile.Profile&lt;/code&gt; &lt;/a&gt;オブジェクトをプロファイルデータソースとして使用できます。</target>
        </trans-unit>
        <trans-unit id="1ab3ecc1e0fcedf8c861d9c035dc31010b7ed532" translate="yes" xml:space="preserve">
          <source>Instead of waiting, or after a box is closed, open a completion box immediately with Show Completions on the Edit menu. The default hot key is</source>
          <target state="translated">待っている間やボックスが閉じた後ではなく、[編集]メニューの[完了を表示]ですぐに完了ボックスを開きます。デフォルトのホットキーは</target>
        </trans-unit>
        <trans-unit id="84f3292cd4df9827802ae460d7bf0d817b1c06d4" translate="yes" xml:space="preserve">
          <source>Instead one should protect the &amp;ldquo;entry point&amp;rdquo; of the program by using &lt;code&gt;if
__name__ == '__main__':&lt;/code&gt; as follows:</source>
          <target state="translated">代わりに次のように &lt;code&gt;if __name__ == '__main__':&lt;/code&gt; を使用して、プログラムの「エントリポイント」を保護する必要があります。</target>
        </trans-unit>
        <trans-unit id="96d5f6e166357195ec9d7a25ec7a7cc3761d5193" translate="yes" xml:space="preserve">
          <source>Instead, it is better to search a list of precomputed keys to find the index of the record in question:</source>
          <target state="translated">その代わり、事前に計算されたキーのリストを検索して、問題のレコードのインデックスを見つける方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="c0c218a2e12a68573c0a6efe87b144bd67b29216" translate="yes" xml:space="preserve">
          <source>Instead, use the DB-API&amp;rsquo;s parameter substitution. Put &lt;code&gt;?&lt;/code&gt; as a placeholder wherever you want to use a value, and then provide a tuple of values as the second argument to the cursor&amp;rsquo;s &lt;a href=&quot;#sqlite3.Cursor.execute&quot;&gt;&lt;code&gt;execute()&lt;/code&gt;&lt;/a&gt; method. (Other database modules may use a different placeholder, such as &lt;code&gt;%s&lt;/code&gt; or &lt;code&gt;:1&lt;/code&gt;.) For example:</source>
          <target state="translated">代わりに、DB-APIのパラメーター置換を使用してください。置く &lt;code&gt;?&lt;/code&gt; 値を使用する場所のプレースホルダーとして、カーソルの&lt;a href=&quot;#sqlite3.Cursor.execute&quot;&gt; &lt;code&gt;execute()&lt;/code&gt; &lt;/a&gt;メソッドの2番目の引数として値のタプルを提供します。（他のデータベースモジュールは、 &lt;code&gt;%s&lt;/code&gt; や &lt;code&gt;:1&lt;/code&gt; などの異なるプレースホルダーを使用する場合があります。）例：</target>
        </trans-unit>
        <trans-unit id="c639969c05d984ea055d9d4f757063936b210288" translate="yes" xml:space="preserve">
          <source>Instructions for non-Unix systems will vary; check your HTTP server&amp;rsquo;s documentation (it will usually have a section on CGI scripts).</source>
          <target state="translated">非UNIXシステムの場合の手順は異なります。HTTPサーバーのドキュメントを確認してください（通常、CGIスクリプトに関するセクションがあります）。</target>
        </trans-unit>
        <trans-unit id="1442021d1e6e277098afc29be0d45b6f7adc68dc" translate="yes" xml:space="preserve">
          <source>Instructs &lt;a href=&quot;#csv.reader&quot;&gt;&lt;code&gt;reader&lt;/code&gt;&lt;/a&gt; to perform no special processing of quote characters.</source>
          <target state="translated">引用文字の特別な処理を行わないように&lt;a href=&quot;#csv.reader&quot;&gt; &lt;code&gt;reader&lt;/code&gt; &lt;/a&gt;に指示します。</target>
        </trans-unit>
        <trans-unit id="047e505fbfb736e9c1925bb8f8dfaa7c490f8277" translate="yes" xml:space="preserve">
          <source>Instructs &lt;a href=&quot;#csv.writer&quot;&gt;&lt;code&gt;writer&lt;/code&gt;&lt;/a&gt; objects to never quote fields. When the current &lt;em&gt;delimiter&lt;/em&gt; occurs in output data it is preceded by the current &lt;em&gt;escapechar&lt;/em&gt; character. If &lt;em&gt;escapechar&lt;/em&gt; is not set, the writer will raise &lt;a href=&quot;#csv.Error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; if any characters that require escaping are encountered.</source>
          <target state="translated">フィールドを引用しないように&lt;a href=&quot;#csv.writer&quot;&gt; &lt;code&gt;writer&lt;/code&gt; &lt;/a&gt;オブジェクトに指示します。現在の&lt;em&gt;区切り文字&lt;/em&gt;が出力データ内で発生すると、現在の&lt;em&gt;エスケープ&lt;/em&gt;文字が前に付きます。&lt;em&gt;escapechar&lt;/em&gt;が設定されていない場合、エスケープが必要な文字が&lt;a href=&quot;#csv.Error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; &lt;/a&gt;されると、ライターはエラーを発生させます。</target>
        </trans-unit>
        <trans-unit id="1b10705ce857dbeced06f0e80b06d1258b1c3559" translate="yes" xml:space="preserve">
          <source>Instructs &lt;a href=&quot;#csv.writer&quot;&gt;&lt;code&gt;writer&lt;/code&gt;&lt;/a&gt; objects to only quote those fields which contain special characters such as &lt;em&gt;delimiter&lt;/em&gt;, &lt;em&gt;quotechar&lt;/em&gt; or any of the characters in &lt;em&gt;lineterminator&lt;/em&gt;.</source>
          <target state="translated">指示&lt;a href=&quot;#csv.writer&quot;&gt; &lt;code&gt;writer&lt;/code&gt; &lt;/a&gt;のみなどの特殊文字含まれているそれらのフィールドを引用するオブジェクトを&lt;em&gt;区切り&lt;/em&gt;、&lt;em&gt;quotechar&lt;/em&gt;かの文字のいずれかの&lt;em&gt;lineterminatorを&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="a28899561f1860e0cebbdf8e6feef81d417287ee" translate="yes" xml:space="preserve">
          <source>Instructs &lt;a href=&quot;#csv.writer&quot;&gt;&lt;code&gt;writer&lt;/code&gt;&lt;/a&gt; objects to quote all fields.</source>
          <target state="translated">すべてのフィールドを引用するよう&lt;a href=&quot;#csv.writer&quot;&gt; &lt;code&gt;writer&lt;/code&gt; &lt;/a&gt;オブジェクトに指示します。</target>
        </trans-unit>
        <trans-unit id="0e13df308f51e63d2ca55d3485fd8b7d669b80d7" translate="yes" xml:space="preserve">
          <source>Instructs &lt;a href=&quot;#csv.writer&quot;&gt;&lt;code&gt;writer&lt;/code&gt;&lt;/a&gt; objects to quote all non-numeric fields.</source>
          <target state="translated">すべての非数値フィールドを引用するように&lt;a href=&quot;#csv.writer&quot;&gt; &lt;code&gt;writer&lt;/code&gt; &lt;/a&gt;オブジェクトに指示します。</target>
        </trans-unit>
        <trans-unit id="68a9f1416c044b9eb3ae50c77e7087fc5bdcfec6" translate="yes" xml:space="preserve">
          <source>Instructs the reader to convert all non-quoted fields to type &lt;em&gt;float&lt;/em&gt;.</source>
          <target state="translated">引用符で囲まれていないすべてのフィールドを&lt;em&gt;float&lt;/em&gt;型に変換するようリーダーに指示します。</target>
        </trans-unit>
        <trans-unit id="9f9ac0fbc7f32aa66d8b0df0a6752da89865807f" translate="yes" xml:space="preserve">
          <source>IntEnum</source>
          <target state="translated">IntEnum</target>
        </trans-unit>
        <trans-unit id="a7dcebc39b9a6200e72e040ddb4b56fbab680190" translate="yes" xml:space="preserve">
          <source>IntFlag</source>
          <target state="translated">IntFlag</target>
        </trans-unit>
        <trans-unit id="32597b26633647b2d319add4525291d5919eb5f2" translate="yes" xml:space="preserve">
          <source>Integer expiry date in seconds since epoch, or &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;. See also the &lt;a href=&quot;#http.cookiejar.Cookie.is_expired&quot;&gt;&lt;code&gt;is_expired()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">エポックからの秒単位の整数有効期限日、または&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;#http.cookiejar.Cookie.is_expired&quot;&gt; &lt;code&gt;is_expired()&lt;/code&gt; &lt;/a&gt;メソッドも参照してください。</target>
        </trans-unit>
        <trans-unit id="370fb883669c7c619884fcfa764167a7b1ba29d8" translate="yes" xml:space="preserve">
          <source>Integer or &lt;a href=&quot;constants#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt;. Netscape cookies have &lt;a href=&quot;#http.cookiejar.Cookie.version&quot;&gt;&lt;code&gt;version&lt;/code&gt;&lt;/a&gt; 0. &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-22&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-23&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt; cookies have a &lt;code&gt;version&lt;/code&gt; cookie-attribute of 1. However, note that &lt;a href=&quot;#module-http.cookiejar&quot;&gt;&lt;code&gt;http.cookiejar&lt;/code&gt;&lt;/a&gt; may &amp;lsquo;downgrade&amp;rsquo; RFC 2109 cookies to Netscape cookies, in which case &lt;a href=&quot;#http.cookiejar.Cookie.version&quot;&gt;&lt;code&gt;version&lt;/code&gt;&lt;/a&gt; is 0.</source>
          <target state="translated">整数または&lt;a href=&quot;constants#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;。Netscapeクッキーは持っている&lt;a href=&quot;#http.cookiejar.Cookie.version&quot;&gt; &lt;code&gt;version&lt;/code&gt; &lt;/a&gt; 0 &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-22&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt;および&lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-23&quot;&gt;&lt;strong&gt;RFC 2109枚の&lt;/strong&gt;&lt;/a&gt;クッキーを持っている &lt;code&gt;version&lt;/code&gt; こと、しかし、ノートを1のクッキー属性を&lt;a href=&quot;#module-http.cookiejar&quot;&gt; &lt;code&gt;http.cookiejar&lt;/code&gt; が&lt;/a&gt;ケースれるNetscapeクッキーに「ダウングレード」RFC 2109枚のクッキー月&lt;a href=&quot;#http.cookiejar.Cookie.version&quot;&gt; &lt;code&gt;version&lt;/code&gt; &lt;/a&gt; 0です。</target>
        </trans-unit>
        <trans-unit id="b2586bd79fe20fc085091ee4c039323ab91a2931" translate="yes" xml:space="preserve">
          <source>Integer specifying the handle of the Python DLL.</source>
          <target state="translated">Python DLLのハンドルを指定する整数。</target>
        </trans-unit>
        <trans-unit id="4be890d08d451686a7899dac00d8db91fbaa5012" translate="yes" xml:space="preserve">
          <source>Integer value to control debugging output. The initialize value is taken from the module variable &lt;code&gt;Debug&lt;/code&gt;. Values greater than three trace each command.</source>
          <target state="translated">デバッグ出力を制御するための整数値。初期化値は、モジュール変数 &lt;code&gt;Debug&lt;/code&gt; から取得されます。3より大きい値は、各コマンドをトレースします。</target>
        </trans-unit>
        <trans-unit id="0af14c05371406c3bfd30e44309da86d10408fca" translate="yes" xml:space="preserve">
          <source>Integers can be added to or subtracted from address objects. Some examples:</source>
          <target state="translated">整数は、アドレスオブジェクトに足したり引いたりすることができます。いくつかの例があります。</target>
        </trans-unit>
        <trans-unit id="d6ab8a868612d7d4c1a82a75ee51d447ac3ad36d" translate="yes" xml:space="preserve">
          <source>Integration with the warnings module</source>
          <target state="translated">警告モジュールとの統合</target>
        </trans-unit>
        <trans-unit id="542505ecbda45c153abc5ccd78db35ec4f174034" translate="yes" xml:space="preserve">
          <source>Interact with process:</source>
          <target state="translated">プロセスとの相互作用。</target>
        </trans-unit>
        <trans-unit id="80be62166e7de013309afd54472bc1797dd47e7f" translate="yes" xml:space="preserve">
          <source>Interact with process: Send data to stdin. Read data from stdout and stderr, until end-of-file is reached. Wait for process to terminate and set the &lt;a href=&quot;#subprocess.Popen.returncode&quot;&gt;&lt;code&gt;returncode&lt;/code&gt;&lt;/a&gt; attribute. The optional &lt;em&gt;input&lt;/em&gt; argument should be data to be sent to the child process, or &lt;code&gt;None&lt;/code&gt;, if no data should be sent to the child. If streams were opened in text mode, &lt;em&gt;input&lt;/em&gt; must be a string. Otherwise, it must be bytes.</source>
          <target state="translated">Interact with process: Send data to stdin. Read data from stdout and stderr, until end-of-file is reached. Wait for process to terminate and set the &lt;a href=&quot;#subprocess.Popen.returncode&quot;&gt; &lt;code&gt;returncode&lt;/code&gt; &lt;/a&gt; attribute. The optional &lt;em&gt;input&lt;/em&gt; argument should be data to be sent to the child process, or &lt;code&gt;None&lt;/code&gt; , if no data should be sent to the child. If streams were opened in text mode, &lt;em&gt;input&lt;/em&gt; must be a string. Otherwise, it must be bytes.</target>
        </trans-unit>
        <trans-unit id="a7b5cc2308bf821e6cd84802cf3b9067390dca9f" translate="yes" xml:space="preserve">
          <source>Interact with process: Send data to stdin. Read data from stdout and stderr, until end-of-file is reached. Wait for process to terminate. The optional &lt;em&gt;input&lt;/em&gt; argument should be data to be sent to the child process, or &lt;code&gt;None&lt;/code&gt;, if no data should be sent to the child. If streams were opened in text mode, &lt;em&gt;input&lt;/em&gt; must be a string. Otherwise, it must be bytes.</source>
          <target state="translated">プロセスとの対話：stdinにデータを送信します。ファイルの終わりに達するまで、stdoutおよびstderrからデータを読み取ります。プロセスが終了するのを待ちます。オプションの&lt;em&gt;入力&lt;/em&gt;引数は、子プロセスに送信されるデータか、子にデータを送信する必要がない場合は &lt;code&gt;None&lt;/code&gt; です。ストリームがテキストモードで開かれた場合、&lt;em&gt;入力&lt;/em&gt;は文字列でなければなりません。それ以外の場合は、バイトでなければなりません。</target>
        </trans-unit>
        <trans-unit id="c32c2296489969b7635662c3bc8e006192df7595" translate="yes" xml:space="preserve">
          <source>Interacting with Subprocesses</source>
          <target state="translated">サブプロセスとの相互作用</target>
        </trans-unit>
        <trans-unit id="0fa8e4485c2202467e61698e8d5ba21575b8a864" translate="yes" xml:space="preserve">
          <source>Interaction function, emulates a very dumb Telnet client.</source>
          <target state="translated">インタラクション機能は、非常に間抜けなTelnetクライアントをエミュレートします。</target>
        </trans-unit>
        <trans-unit id="ecb2b41b88adb0386e2e88e0cb9c56f459a0f7eb" translate="yes" xml:space="preserve">
          <source>Interactive Console Objects</source>
          <target state="translated">インタラクティブ コンソール オブジェクト</target>
        </trans-unit>
        <trans-unit id="3cfa87a88446a39b489c704cac79d06af1b86206" translate="yes" xml:space="preserve">
          <source>Interactive Interpreter Objects</source>
          <target state="translated">インタラクティブインタプリタオブジェクト</target>
        </trans-unit>
        <trans-unit id="2cadb5b7ff0248d2b78142447a263943598198ad" translate="yes" xml:space="preserve">
          <source>Interesting examples</source>
          <target state="translated">おもしろい例</target>
        </trans-unit>
        <trans-unit id="7b4db7ef1fa23cfb5e115a2a2c89d46a6a2ebc4a" translate="yes" xml:space="preserve">
          <source>Interface</source>
          <target state="translated">Interface</target>
        </trans-unit>
        <trans-unit id="8f852726c2cf35cbc0da9c364c92d16e46188ec0" translate="yes" xml:space="preserve">
          <source>Interface for a sequence of nodes.</source>
          <target state="translated">一連のノードのためのインターフェースです。</target>
        </trans-unit>
        <trans-unit id="1c4db4b0abc2834a17fec9e2358468e1c7283350" translate="yes" xml:space="preserve">
          <source>Interface for associating a SAX event with a document location. A locator object will return valid results only during calls to DocumentHandler methods; at any other time, the results are unpredictable. If information is not available, methods may return &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">SAXイベントをドキュメントの場所に関連付けるためのインターフェース。ロケーターオブジェクトは、DocumentHandlerメソッドの呼び出し中にのみ有効な結果を返します。それ以外の場合、結果は予測できません。情報が利用できない場合、メソッドは &lt;code&gt;None&lt;/code&gt; を返す場合があります。</target>
        </trans-unit>
        <trans-unit id="5aa34ab8218f9e4e220f7344dabd8786a5fdb30e" translate="yes" xml:space="preserve">
          <source>Interface objects</source>
          <target state="translated">インターフェースオブジェクト</target>
        </trans-unit>
        <trans-unit id="8815c1714243ec8fd3c5703aaa179285d61a547d" translate="yes" xml:space="preserve">
          <source>Interface objects are &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-hashable&quot;&gt;hashable&lt;/a&gt;, so they can be used as keys in dictionaries.</source>
          <target state="translated">インターフェイスオブジェクトは&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-hashable&quot;&gt;ハッシュ可能&lt;/a&gt;であるため、辞書のキーとして使用できます。</target>
        </trans-unit>
        <trans-unit id="029ae727719c0190c4fc3e6c2815b79437cef934" translate="yes" xml:space="preserve">
          <source>Interface objects are &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-hashable&quot;&gt;hashable&lt;/a&gt;, so they can be used as keys in dictionaries.</source>
          <target state="translated">Interface objects are &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-hashable&quot;&gt;hashable&lt;/a&gt;, so they can be used as keys in dictionaries.</target>
        </trans-unit>
        <trans-unit id="f2972dba464e3ec39c3f8d844bc8f4665db76466" translate="yes" xml:space="preserve">
          <source>Interface objects can be compared with the usual set of logical operators.</source>
          <target state="translated">インターフェースオブジェクトは、通常の論理演算子のセットと比較することができます。</target>
        </trans-unit>
        <trans-unit id="5af8df7a7a4069a4a7e8da32faa2198a5bc0ef82" translate="yes" xml:space="preserve">
          <source>Interface objects support some operators. Unless stated otherwise, operators can only be applied between compatible objects (i.e. IPv4 with IPv4, IPv6 with IPv6).</source>
          <target state="translated">インタフェースオブジェクトは、いくつかの演算子をサポートしています。特に明記されていない限り、演算子は互換性のあるオブジェクト間でのみ適用することができます(例えば、IPv4とIPv4、IPv6とIPv6)。</target>
        </trans-unit>
        <trans-unit id="009aeb4117871f36b8d07dbea81e88efde3f84c2" translate="yes" xml:space="preserve">
          <source>Interface representing a bidirectional transport, such as a TCP connection.</source>
          <target state="translated">TCP 接続などの双方向トランスポートを表すインタフェース。</target>
        </trans-unit>
        <trans-unit id="bae0f7875489c70ff870e51bf1acd5af5cd84f7f" translate="yes" xml:space="preserve">
          <source>Interface summary:</source>
          <target state="translated">インターフェースの概要。</target>
        </trans-unit>
        <trans-unit id="0d7c663f31a9f2ac91921862b41886ab434c27c9" translate="yes" xml:space="preserve">
          <source>Interface to the scheduler</source>
          <target state="translated">スケジューラとのインタフェース</target>
        </trans-unit>
        <trans-unit id="e3596470b1be1228bdbe04e547e2ae1f770f41b2" translate="yes" xml:space="preserve">
          <source>Interface to the underlying implementation.</source>
          <target state="translated">基盤となる実装へのインターフェイス。</target>
        </trans-unit>
        <trans-unit id="fb0b9bed2c76a555927ef2712dd54850772edaa0" translate="yes" xml:space="preserve">
          <source>Interface used by the parser to present error and warning messages to the application. The methods of this object control whether errors are immediately converted to exceptions or are handled in some other way.</source>
          <target state="translated">パーサがアプリケーションにエラーや警告メッセージを表示するために使用するインターフェースです。このオブジェクトのメソッドは、エラーがすぐに例外に変換されるか、他の方法で処理されるかを制御します。</target>
        </trans-unit>
        <trans-unit id="7e3a30fb53d88d0640de6d5babfe7057584ac5ad" translate="yes" xml:space="preserve">
          <source>Interfaces are accessed through instance objects. Applications should not instantiate the classes themselves; they should use the creator functions available on the &lt;code&gt;Document&lt;/code&gt; object. Derived interfaces support all operations (and attributes) from the base interfaces, plus any new operations.</source>
          <target state="translated">インターフェイスはインスタンスオブジェクトを通じてアクセスされます。アプリケーションはクラス自体をインスタンス化すべきではありません。 &lt;code&gt;Document&lt;/code&gt; オブジェクトで使用可能なクリエーター関数を使用する必要があります。派生インターフェースは、基本インターフェースのすべての操作（および属性）に加えて、新しい操作をサポートします。</target>
        </trans-unit>
        <trans-unit id="70e0c022e8ef3548815e6ce09157b2f9fed238ce" translate="yes" xml:space="preserve">
          <source>Intermixed parsing</source>
          <target state="translated">混在解析</target>
        </trans-unit>
        <trans-unit id="9881c711f8b7d79a62e6a62f87a03b1baa3849a7" translate="yes" xml:space="preserve">
          <source>Internal Objects</source>
          <target state="translated">内部オブジェクト</target>
        </trans-unit>
        <trans-unit id="a047b417e339277c6847b0fd6036b5d0c0ae1549" translate="yes" xml:space="preserve">
          <source>Internal attributes.</source>
          <target state="translated">内部属性です。</target>
        </trans-unit>
        <trans-unit id="8846061f5d538bb327da6a9444390ad20122717a" translate="yes" xml:space="preserve">
          <source>Internally, function creates a &lt;a href=&quot;#ssl.SSLContext&quot;&gt;&lt;code&gt;SSLContext&lt;/code&gt;&lt;/a&gt; with protocol &lt;em&gt;ssl_version&lt;/em&gt; and &lt;a href=&quot;#ssl.SSLContext.options&quot;&gt;&lt;code&gt;SSLContext.options&lt;/code&gt;&lt;/a&gt; set to &lt;em&gt;cert_reqs&lt;/em&gt;. If parameters &lt;em&gt;keyfile&lt;/em&gt;, &lt;em&gt;certfile&lt;/em&gt;, &lt;em&gt;ca_certs&lt;/em&gt; or &lt;em&gt;ciphers&lt;/em&gt; are set, then the values are passed to &lt;a href=&quot;#ssl.SSLContext.load_cert_chain&quot;&gt;&lt;code&gt;SSLContext.load_cert_chain()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ssl.SSLContext.load_verify_locations&quot;&gt;&lt;code&gt;SSLContext.load_verify_locations()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#ssl.SSLContext.set_ciphers&quot;&gt;&lt;code&gt;SSLContext.set_ciphers()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">内部的には、関数が作成されます&lt;a href=&quot;#ssl.SSLContext&quot;&gt; &lt;code&gt;SSLContext&lt;/code&gt; の&lt;/a&gt;プロトコルで&lt;em&gt;SSL_VERSION&lt;/em&gt;と&lt;a href=&quot;#ssl.SSLContext.options&quot;&gt; &lt;code&gt;SSLContext.options&lt;/code&gt; &lt;/a&gt;に設定&lt;em&gt;cert_reqs&lt;/em&gt;。パラメータがあれば&lt;em&gt;キーファイル&lt;/em&gt;、&lt;em&gt;certfileに&lt;/em&gt;、&lt;em&gt;ca_certs&lt;/em&gt;または&lt;em&gt;暗号が&lt;/em&gt;設定され、その後、値が渡される&lt;a href=&quot;#ssl.SSLContext.load_cert_chain&quot;&gt; &lt;code&gt;SSLContext.load_cert_chain()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ssl.SSLContext.load_verify_locations&quot;&gt; &lt;code&gt;SSLContext.load_verify_locations()&lt;/code&gt; &lt;/a&gt;、及び&lt;a href=&quot;#ssl.SSLContext.set_ciphers&quot;&gt; &lt;code&gt;SSLContext.set_ciphers()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="580ada3f664fbd8faa4d39879e7b77c24136608a" translate="yes" xml:space="preserve">
          <source>Internally, those three types of queues use locks to temporarily block competing threads; however, they are not designed to handle reentrancy within a thread.</source>
          <target state="translated">内部的には、これら 3 つのタイプのキューは、競合するスレッドを一時的にブロックするためにロックを使用します;しかしながら、それらはスレッド内での再入室を扱うように設計されていません。</target>
        </trans-unit>
        <trans-unit id="28d5848a333b0a47913fe57a73d442ce4518c08c" translate="yes" xml:space="preserve">
          <source>International Atomic Time</source>
          <target state="translated">こくさいげんしじかん</target>
        </trans-unit>
        <trans-unit id="0acc2a482d5d44565ff4ebc0b9139b2dc39c506b" translate="yes" xml:space="preserve">
          <source>International currency symbol.</source>
          <target state="translated">国際通貨記号。</target>
        </trans-unit>
        <trans-unit id="3b755f7b857b999860755840e5f0964f6b120c4d" translate="yes" xml:space="preserve">
          <source>Internationalization</source>
          <target state="translated">Internationalization</target>
        </trans-unit>
        <trans-unit id="54c981b9e80576e421c708ac83d965bd9c4c3152" translate="yes" xml:space="preserve">
          <source>Internationalization (I18N) refers to the operation by which a program is made aware of multiple languages. Localization (L10N) refers to the adaptation of your program, once internationalized, to the local language and cultural habits. In order to provide multilingual messages for your Python programs, you need to take the following steps:</source>
          <target state="translated">国際化 (I18N)は、プログラムが複数の言語を認識できるようにする操作を指します。ローカライゼーション(L10N)とは、国際化されたプログラムをローカルの言語や文化習慣に適応させることです。Pythonプログラムに多言語メッセージを提供するためには、以下の手順を踏む必要があります。</target>
        </trans-unit>
        <trans-unit id="75170006f623fbe183bf840cf6119bbd14972198" translate="yes" xml:space="preserve">
          <source>Internationalization services. The locale setting affects the interpretation of many format specifiers in &lt;a href=&quot;#time.strftime&quot;&gt;&lt;code&gt;strftime()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#time.strptime&quot;&gt;&lt;code&gt;strptime()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">国際化サービス。ロケール設定は、&lt;a href=&quot;#time.strftime&quot;&gt; &lt;code&gt;strftime()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#time.strptime&quot;&gt; &lt;code&gt;strptime()&lt;/code&gt; &lt;/a&gt;の多くのフォーマット指定子の解釈に影響します。</target>
        </trans-unit>
        <trans-unit id="230139ad0ce1adb0b931fe547c69c78a03a243e2" translate="yes" xml:space="preserve">
          <source>Internationalizing your programs and modules</source>
          <target state="translated">プログラムとモジュールの国際化</target>
        </trans-unit>
        <trans-unit id="d790826b4ae3ed725698ee4ed89c70a28abd95d5" translate="yes" xml:space="preserve">
          <source>Interned strings are not immortal; you must keep a reference to the return value of &lt;a href=&quot;#sys.intern&quot;&gt;&lt;code&gt;intern()&lt;/code&gt;&lt;/a&gt; around to benefit from it.</source>
          <target state="translated">インターンされた文字列は不滅ではありません。その恩恵を受けるには、&lt;a href=&quot;#sys.intern&quot;&gt; &lt;code&gt;intern()&lt;/code&gt; の&lt;/a&gt;戻り値への参照を保持する必要があります。</target>
        </trans-unit>
        <trans-unit id="66c06c11d179e39c42e5e800f99b57865822cf68" translate="yes" xml:space="preserve">
          <source>Internet</source>
          <target state="translated">Internet</target>
        </trans-unit>
        <trans-unit id="8f1678405b5bf8f7b3c9be250ba0b2b4566bc2af" translate="yes" xml:space="preserve">
          <source>Internet Data</source>
          <target state="translated">インターネットデータ</target>
        </trans-unit>
        <trans-unit id="c1aebf7c813f788884574a6f7046f553aa035ab6" translate="yes" xml:space="preserve">
          <source>Internet Data Handling</source>
          <target state="translated">インターネットデータ処理</target>
        </trans-unit>
        <trans-unit id="efedd1f6d18388871beb5b8937b0af027d8bf044" translate="yes" xml:space="preserve">
          <source>Internet Protocols and Support</source>
          <target state="translated">インターネットプロトコルとサポート</target>
        </trans-unit>
        <trans-unit id="57c33a7c8b9764293298d03366937218c60d2a49" translate="yes" xml:space="preserve">
          <source>Interpolation behaviour may be customized by providing a custom handler through the &lt;em&gt;interpolation&lt;/em&gt; argument. &lt;code&gt;None&lt;/code&gt; can be used to turn off interpolation completely, &lt;code&gt;ExtendedInterpolation()&lt;/code&gt; provides a more advanced variant inspired by &lt;code&gt;zc.buildout&lt;/code&gt;. More on the subject in the &lt;a href=&quot;#interpolation-of-values&quot;&gt;dedicated documentation section&lt;/a&gt;.</source>
          <target state="translated">補間動作が通過カスタムハンドラを提供することで、カスタマイズすることができる&lt;em&gt;補間&lt;/em&gt;引数。補間を完全にオフにするために使用できるものはあり &lt;code&gt;None&lt;/code&gt; &lt;code&gt;zc.buildout&lt;/code&gt; &lt;code&gt;ExtendedInterpolation()&lt;/code&gt; は、zc.buildoutに触発されたより高度なバリアントを提供します。この件に関する詳細は、&lt;a href=&quot;#interpolation-of-values&quot;&gt;専用のドキュメントセクションを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="1f615e3d514dcbd13ad91a79d1d845b1973ce635" translate="yes" xml:space="preserve">
          <source>Interpolation behaviour may be customized by providing a custom handler through the &lt;em&gt;interpolation&lt;/em&gt; argument. &lt;code&gt;None&lt;/code&gt; can be used to turn off interpolation completely, &lt;code&gt;ExtendedInterpolation()&lt;/code&gt; provides a more advanced variant inspired by &lt;code&gt;zc.buildout&lt;/code&gt;. More on the subject in the &lt;a href=&quot;#interpolation-of-values&quot;&gt;dedicated documentation section&lt;/a&gt;. &lt;a href=&quot;#configparser.RawConfigParser&quot;&gt;&lt;code&gt;RawConfigParser&lt;/code&gt;&lt;/a&gt; has a default value of &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">補間動作が通過カスタムハンドラを提供することで、カスタマイズすることができる&lt;em&gt;補間&lt;/em&gt;引数。補間を完全にオフにするために使用できるものはあり &lt;code&gt;None&lt;/code&gt; &lt;code&gt;zc.buildout&lt;/code&gt; &lt;code&gt;ExtendedInterpolation()&lt;/code&gt; は、zc.buildoutに触発されたより高度なバリアントを提供します。この件に関する詳細は、&lt;a href=&quot;#interpolation-of-values&quot;&gt;専用のドキュメントセクションを&lt;/a&gt;ご覧ください。&lt;a href=&quot;#configparser.RawConfigParser&quot;&gt; &lt;code&gt;RawConfigParser&lt;/code&gt; &lt;/a&gt;のデフォルト値は &lt;code&gt;None&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bd2b15bb1774a577513ecc617124a7b368669881" translate="yes" xml:space="preserve">
          <source>Interpolation of values</source>
          <target state="translated">値の補間</target>
        </trans-unit>
        <trans-unit id="d568ce51e6576d8c0979772561e24281b364cfad" translate="yes" xml:space="preserve">
          <source>Interpret the argument as though it had been typed in response to the prompt. This may be overridden, but should not normally need to be; see the &lt;a href=&quot;#cmd.Cmd.precmd&quot;&gt;&lt;code&gt;precmd()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#cmd.Cmd.postcmd&quot;&gt;&lt;code&gt;postcmd()&lt;/code&gt;&lt;/a&gt; methods for useful execution hooks. The return value is a flag indicating whether interpretation of commands by the interpreter should stop. If there is a &lt;code&gt;do_*()&lt;/code&gt; method for the command &lt;em&gt;str&lt;/em&gt;, the return value of that method is returned, otherwise the return value from the &lt;a href=&quot;#cmd.Cmd.default&quot;&gt;&lt;code&gt;default()&lt;/code&gt;&lt;/a&gt; method is returned.</source>
          <target state="translated">プロンプトに応答して入力されたかのように引数を解釈します。これはオーバーライドできますが、通常は必要ありません。有用な実行フックについては、&lt;a href=&quot;#cmd.Cmd.precmd&quot;&gt; &lt;code&gt;precmd()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#cmd.Cmd.postcmd&quot;&gt; &lt;code&gt;postcmd()&lt;/code&gt; &lt;/a&gt;メソッドを参照してください。戻り値は、インタープリターによるコマンドの解釈を停止するかどうかを示すフラグです。ある場合は &lt;code&gt;do_*()&lt;/code&gt; コマンドのための方法&lt;em&gt;strが&lt;/em&gt;、そのメソッドの戻り値は、それ以外の戻り値は、返される&lt;a href=&quot;#cmd.Cmd.default&quot;&gt; &lt;code&gt;default()&lt;/code&gt; &lt;/a&gt;メソッドが返されます。</target>
        </trans-unit>
        <trans-unit id="8d3c148819e9e54cd74c9c94b3ef056e575eee05" translate="yes" xml:space="preserve">
          <source>Interpreters</source>
          <target state="translated">Interpreters</target>
        </trans-unit>
        <trans-unit id="46d6db31f6f2547122e3f17c21631f666601ba12" translate="yes" xml:space="preserve">
          <source>Interrupt Execution</source>
          <target state="translated">割り込み実行</target>
        </trans-unit>
        <trans-unit id="d4033f48de0ba4899aed36c08fc403f168f4ea15" translate="yes" xml:space="preserve">
          <source>Interrupt from keyboard (CTRL + BREAK).</source>
          <target state="translated">キーボードからの割り込み(CTRL+BREAK)。</target>
        </trans-unit>
        <trans-unit id="18cbfdace7f8635278d0d4b9c5ba72e6d4fce84c" translate="yes" xml:space="preserve">
          <source>Interrupt from keyboard (CTRL + C).</source>
          <target state="translated">キーボードからの割り込み(CTRL+C)。</target>
        </trans-unit>
        <trans-unit id="8815302accf46070d40572381df17ae0b24087f8" translate="yes" xml:space="preserve">
          <source>Interrupted system call should be restarted</source>
          <target state="translated">割り込みが発生したシステムコールを再起動する必要があります</target>
        </trans-unit>
        <trans-unit id="b06a3395105be1465d6b1697af03d4431eac6c71" translate="yes" xml:space="preserve">
          <source>Interrupted system call.</source>
          <target state="translated">システムコールが中断されました。</target>
        </trans-unit>
        <trans-unit id="09dc03559a67ff5107d10fad944393ea3f877c07" translate="yes" xml:space="preserve">
          <source>InterruptedError</source>
          <target state="translated">InterruptedError</target>
        </trans-unit>
        <trans-unit id="0943ef2ada12e3e7dc287b50717ddb75bc6da8ed" translate="yes" xml:space="preserve">
          <source>Interruption</source>
          <target state="translated">Interruption</target>
        </trans-unit>
        <trans-unit id="4e36c74154decbcc22ec9de613c329458fb47795" translate="yes" xml:space="preserve">
          <source>Interruption during the decompression, such as pressing control-C or killing the decompression process may result in incomplete decompression of the archive.</source>
          <target state="translated">解凍中にcontrol-Cを押したり、解凍プロセスを終了させたりするなどの中断は、アーカイブの不完全な解凍を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="42c071214f97d5c4afff6973aa5aa8c312d9737c" translate="yes" xml:space="preserve">
          <source>Intro from the Apache HTTP Server documentation</source>
          <target state="translated">Apache HTTP サーバのドキュメントからの紹介</target>
        </trans-unit>
        <trans-unit id="74f37218ef8634d6f18ddbe27efca22ced57c811" translate="yes" xml:space="preserve">
          <source>Introduced the &lt;code&gt;__prepare__&lt;/code&gt; namespace hook</source>
          <target state="translated">&lt;code&gt;__prepare__&lt;/code&gt; 名前空間フックが導入されました</target>
        </trans-unit>
        <trans-unit id="2473e96bc614a911821242119918a241a41836d6" translate="yes" xml:space="preserve">
          <source>Introduction</source>
          <target state="translated">Introduction</target>
        </trans-unit>
        <trans-unit id="12b2799a6c697d71c79a7458b9ff32a936f76a1a" translate="yes" xml:space="preserve">
          <source>Introduction to the profilers</source>
          <target state="translated">プロファイラーの紹介</target>
        </trans-unit>
        <trans-unit id="0047e79057a6dadcd1958b908f6296f6079753b9" translate="yes" xml:space="preserve">
          <source>Introspecting callables with the Signature object</source>
          <target state="translated">Signature オブジェクトを使ったコールアブルの導入</target>
        </trans-unit>
        <trans-unit id="b3b4d20d3dfe4ef78d0bf43a93aa7f57bae176c5" translate="yes" xml:space="preserve">
          <source>Introspection</source>
          <target state="translated">Introspection</target>
        </trans-unit>
        <trans-unit id="1c6c69ff716037a9df5d099d2d192521b1e9a13d" translate="yes" xml:space="preserve">
          <source>Introspection helpers</source>
          <target state="translated">内観ヘルパー</target>
        </trans-unit>
        <trans-unit id="45ff4427a9f1fb0c18cbcdf6b26d6a2d22f2df2f" translate="yes" xml:space="preserve">
          <source>Invalid argument</source>
          <target state="translated">無効な引数</target>
        </trans-unit>
        <trans-unit id="f8d3e8e47ede7d1e1d63b90adac4163f137f5fbd" translate="yes" xml:space="preserve">
          <source>Invalid arguments</source>
          <target state="translated">無効な引数</target>
        </trans-unit>
        <trans-unit id="0659862d18cc2aab0d2c79d54ece0b588cefda81" translate="yes" xml:space="preserve">
          <source>Invalid exchange</source>
          <target state="translated">無効な交換</target>
        </trans-unit>
        <trans-unit id="b7ebb17aae68fc96bde7bec88689e59f80c276a6" translate="yes" xml:space="preserve">
          <source>Invalid internal state of &lt;a href=&quot;asyncio-task#asyncio.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;asyncio-future#asyncio.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;asyncio-task#asyncio.Task&quot;&gt; &lt;code&gt;Task&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;asyncio-future#asyncio.Future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; の&lt;/a&gt;内部状態が無効です。</target>
        </trans-unit>
        <trans-unit id="e5a79f3df5c8af3ba8a7813c333e1a6a9466a6b5" translate="yes" xml:space="preserve">
          <source>Invalid request code</source>
          <target state="translated">無効なリクエストコード</target>
        </trans-unit>
        <trans-unit id="921238b4baa4c7c3a24c3d63e0e9afc770fd916a" translate="yes" xml:space="preserve">
          <source>Invalid request descriptor</source>
          <target state="translated">無効な要求記述子</target>
        </trans-unit>
        <trans-unit id="ac9eda2543c0cdfa22d49b3ce87554f9fa67c95e" translate="yes" xml:space="preserve">
          <source>Invalid request: descriptor not open</source>
          <target state="translated">無効な要求:ディスクリプタがオープンされていません。</target>
        </trans-unit>
        <trans-unit id="6684b6eeddecb3f9f1296f418af07f2108c4ba7a" translate="yes" xml:space="preserve">
          <source>Invalid slot</source>
          <target state="translated">無効なスロット</target>
        </trans-unit>
        <trans-unit id="ac39f10f2b107f4005a05fd5034e22c350ce91cd" translate="yes" xml:space="preserve">
          <source>Invalidate the internal caches of finders stored at &lt;a href=&quot;sys#sys.meta_path&quot;&gt;&lt;code&gt;sys.meta_path&lt;/code&gt;&lt;/a&gt;. If a finder implements &lt;code&gt;invalidate_caches()&lt;/code&gt; then it will be called to perform the invalidation. This function should be called if any modules are created/installed while your program is running to guarantee all finders will notice the new module&amp;rsquo;s existence.</source>
          <target state="translated">&lt;a href=&quot;sys#sys.meta_path&quot;&gt; &lt;code&gt;sys.meta_path&lt;/code&gt; に&lt;/a&gt;保存されているファインダーの内部キャッシュを無効にします。ファインダーが &lt;code&gt;invalidate_caches()&lt;/code&gt; を実装している場合は、無効化を実行するために呼び出されます。プログラムの実行中にモジュールが作成またはインストールされた場合、この関数を呼び出して、すべてのファインダーが新しいモジュールの存在に気付くようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="ba67563ea1b90363b3f3e36d5c60e13c4df6670d" translate="yes" xml:space="preserve">
          <source>Invert all the digits in &lt;em&gt;x&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;xの&lt;/em&gt;すべての桁を反転します。</target>
        </trans-unit>
        <trans-unit id="fd084280a98a8cc9427a473124b409ada9c6b2a3" translate="yes" xml:space="preserve">
          <source>Invisible or blank mode</source>
          <target state="translated">不可視またはブランクモード</target>
        </trans-unit>
        <trans-unit id="3bf010a72c53420609032016c83dfcf503ce6948" translate="yes" xml:space="preserve">
          <source>Invoke &lt;a href=&quot;#zipfile.ZipFile.open&quot;&gt;&lt;code&gt;ZipFile.open()&lt;/code&gt;&lt;/a&gt; on the current path. Accepts the same arguments as &lt;a href=&quot;#zipfile.ZipFile.open&quot;&gt;&lt;code&gt;ZipFile.open()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在のパスで&lt;a href=&quot;#zipfile.ZipFile.open&quot;&gt; &lt;code&gt;ZipFile.open()&lt;/code&gt; &lt;/a&gt;を呼び出します。&lt;a href=&quot;#zipfile.ZipFile.open&quot;&gt; &lt;code&gt;ZipFile.open()&lt;/code&gt; &lt;/a&gt;と同じ引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="e1b5816db7fc9e3046813d2dcfcddbfc9f951064" translate="yes" xml:space="preserve">
          <source>Invoke &lt;a href=&quot;#zipfile.ZipFile.open&quot;&gt;&lt;code&gt;ZipFile.open()&lt;/code&gt;&lt;/a&gt; on the current path. Allows opening for read or write, text or binary through supported modes: &amp;lsquo;r&amp;rsquo;, &amp;lsquo;w&amp;rsquo;, &amp;lsquo;rb&amp;rsquo;, &amp;lsquo;wb&amp;rsquo;. Positional and keyword arguments are passed through to &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt;&lt;code&gt;io.TextIOWrapper&lt;/code&gt;&lt;/a&gt; when opened as text and ignored otherwise. &lt;code&gt;pwd&lt;/code&gt; is the &lt;code&gt;pwd&lt;/code&gt; parameter to &lt;a href=&quot;#zipfile.ZipFile.open&quot;&gt;&lt;code&gt;ZipFile.open()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Invoke &lt;a href=&quot;#zipfile.ZipFile.open&quot;&gt; &lt;code&gt;ZipFile.open()&lt;/code&gt; &lt;/a&gt; on the current path. Allows opening for read or write, text or binary through supported modes: &amp;lsquo;r&amp;rsquo;, &amp;lsquo;w&amp;rsquo;, &amp;lsquo;rb&amp;rsquo;, &amp;lsquo;wb&amp;rsquo;. Positional and keyword arguments are passed through to &lt;a href=&quot;io#io.TextIOWrapper&quot;&gt; &lt;code&gt;io.TextIOWrapper&lt;/code&gt; &lt;/a&gt; when opened as text and ignored otherwise. &lt;code&gt;pwd&lt;/code&gt; is the &lt;code&gt;pwd&lt;/code&gt; parameter to &lt;a href=&quot;#zipfile.ZipFile.open&quot;&gt; &lt;code&gt;ZipFile.open()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="423894e2a4eefe4fc84b32affe9b7e263601406b" translate="yes" xml:space="preserve">
          <source>Invoke a callback &lt;em&gt;after&lt;/em&gt; the given time.</source>
          <target state="translated">指定された時間の&lt;em&gt;後&lt;/em&gt;にコールバックを呼び出します。</target>
        </trans-unit>
        <trans-unit id="6d5c67cd19bdfed187292858862c10f228bb5045" translate="yes" xml:space="preserve">
          <source>Invoke a callback &lt;em&gt;at&lt;/em&gt; the given time.</source>
          <target state="translated">指定された時間にコールバック&lt;em&gt;を&lt;/em&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="76c3be08bb7afa5e12d91ae6bbae4d9ceb1bf847" translate="yes" xml:space="preserve">
          <source>Invoke a callback soon.</source>
          <target state="translated">すぐにコールバックを呼び出します。</target>
        </trans-unit>
        <trans-unit id="02465213be1ac7e5af0e05eec89ae1f987088775" translate="yes" xml:space="preserve">
          <source>Invoke the built-in help system. (This function is intended for interactive use.) If no argument is given, the interactive help system starts on the interpreter console. If the argument is a string, then the string is looked up as the name of a module, function, class, method, keyword, or documentation topic, and a help page is printed on the console. If the argument is any other kind of object, a help page on the object is generated.</source>
          <target state="translated">組み込みのヘルプシステムを起動します。(この関数は対話型の使用を意図しています。)引数が与えられない場合、対話型のヘルプシステムがインタープリタコンソール上で起動します。引数が文字列の場合、その文字列はモジュール、関数、クラス、メソッド、キーワード、ドキュメントトピックの名前として検索され、コンソールにヘルプページが表示されます。引数が他の種類のオブジェクトの場合は、そのオブジェクトのヘルプページが生成されます。</target>
        </trans-unit>
        <trans-unit id="6844b46c8699594aabdbedb9cb340a297a5875b2" translate="yes" xml:space="preserve">
          <source>Invoked as a script, the &lt;a href=&quot;#module-pstats&quot;&gt;&lt;code&gt;pstats&lt;/code&gt;&lt;/a&gt; module is a statistics browser for reading and examining profile dumps. It has a simple line-oriented interface (implemented using &lt;a href=&quot;cmd#module-cmd&quot;&gt;&lt;code&gt;cmd&lt;/code&gt;&lt;/a&gt;) and interactive help.</source>
          <target state="translated">スクリプトとして呼び出される&lt;a href=&quot;#module-pstats&quot;&gt; &lt;code&gt;pstats&lt;/code&gt; &lt;/a&gt;モジュールは、プロファイルダンプを読み取り、調べるための統計ブラウザです。シンプルなライン指向のインターフェース（&lt;a href=&quot;cmd#module-cmd&quot;&gt; &lt;code&gt;cmd&lt;/code&gt; &lt;/a&gt;を使用して実装）とインタラクティブなヘルプがあります。</target>
        </trans-unit>
        <trans-unit id="4bd2a50918821ef3e207e7ae794bd6f6284c7b2f" translate="yes" xml:space="preserve">
          <source>Invoking &amp;lsquo;Show Completions&amp;rsquo;, or hitting</source>
          <target state="translated">Invoking &amp;lsquo;Show Completions&amp;rsquo;, or hitting</target>
        </trans-unit>
        <trans-unit id="50ee2ea09ca943e50fb0b3c932a9cca14117e8c5" translate="yes" xml:space="preserve">
          <source>Invoking this function may change the semantics of datetimes using &lt;code&gt;ZoneInfo&lt;/code&gt; in surprising ways; this modifies process-wide global state and thus may have wide-ranging effects. Only use it if you know that you need to.</source>
          <target state="translated">Invoking this function may change the semantics of datetimes using &lt;code&gt;ZoneInfo&lt;/code&gt; in surprising ways; this modifies process-wide global state and thus may have wide-ranging effects. Only use it if you know that you need to.</target>
        </trans-unit>
        <trans-unit id="726a8b660b71615a82f862249de26d56cd18e129" translate="yes" xml:space="preserve">
          <source>Is &lt;code&gt;True&lt;/code&gt; if the stream is closed.</source>
          <target state="translated">ストリームが閉じている場合は &lt;code&gt;True&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d82b06adf1a876d702b6a3905d8d56b51827e40e" translate="yes" xml:space="preserve">
          <source>Is a directory</source>
          <target state="translated">ディレクトリは</target>
        </trans-unit>
        <trans-unit id="b9271431abbe409f3af4140e02d0f15a9328cd88" translate="yes" xml:space="preserve">
          <source>Is a generic constructor that takes the string &lt;em&gt;name&lt;/em&gt; of the desired algorithm as its first parameter. It also exists to allow access to the above listed hashes as well as any other algorithms that your OpenSSL library may offer. The named constructors are much faster than &lt;a href=&quot;#hashlib.new&quot;&gt;&lt;code&gt;new()&lt;/code&gt;&lt;/a&gt; and should be preferred.</source>
          <target state="translated">目的のアルゴリズムの文字列&lt;em&gt;名&lt;/em&gt;を最初のパラメーターとして受け取る汎用コンストラクターです。上記のハッシュや、OpenSSLライブラリが提供する他のアルゴリズムへのアクセスを許可するためにも存在します。名前付きコンストラクタは&lt;a href=&quot;#hashlib.new&quot;&gt; &lt;code&gt;new()&lt;/code&gt; &lt;/a&gt;よりもはるかに高速であり、推奨されます。</target>
        </trans-unit>
        <trans-unit id="0bf5e0f29c754cc24aba94217c9a03a8d1bd88d7" translate="yes" xml:space="preserve">
          <source>Is a named type file</source>
          <target state="translated">名前付きタイプのファイルですか?</target>
        </trans-unit>
        <trans-unit id="bee2b08fdf889353624d0f8c23e090efd5200001" translate="yes" xml:space="preserve">
          <source>Is called after the &lt;code&gt;end()&lt;/code&gt; callback of an element that declared a namespace prefix mapping, with the name of the &lt;em&gt;prefix&lt;/em&gt; that went out of scope.</source>
          <target state="translated">名前空間プレフィックスマッピングを宣言した要素の &lt;code&gt;end()&lt;/code&gt; コールバックの後に、スコープから外れた&lt;em&gt;プレフィックス&lt;/em&gt;の名前で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="30d2df16b87401fece6e95883b5b9ea7ed5ee83b" translate="yes" xml:space="preserve">
          <source>Is called whenever the parser encounters a new namespace declaration, before the &lt;code&gt;start()&lt;/code&gt; callback for the opening element that defines it. &lt;em&gt;prefix&lt;/em&gt; is &lt;code&gt;''&lt;/code&gt; for the default namespace and the declared namespace prefix name otherwise. &lt;em&gt;uri&lt;/em&gt; is the namespace URI.</source>
          <target state="translated">パーサーが新しい名前空間宣言に遭遇するたびに、それを定義する開始要素の &lt;code&gt;start()&lt;/code&gt; コールバックの前に呼び出されます。デフォルトのネームスペースの&lt;em&gt;プレフィックス&lt;/em&gt;は &lt;code&gt;''&lt;/code&gt; 、それ以外の場合は宣言されたネームスペースプレフィックス名です。&lt;em&gt;uri&lt;/em&gt;は名前空間URIです。</target>
        </trans-unit>
        <trans-unit id="b0eda3fd7457c0fb4308b75d0bf6df3d4719aced" translate="yes" xml:space="preserve">
          <source>Is equivalent to:</source>
          <target state="translated">と同等です。</target>
        </trans-unit>
        <trans-unit id="faccc474f96ec465b21b84d73c34160d716e3f91" translate="yes" xml:space="preserve">
          <source>Is raised by &lt;a href=&quot;#tarfile.TarInfo.frombuf&quot;&gt;&lt;code&gt;TarInfo.frombuf()&lt;/code&gt;&lt;/a&gt; if the buffer it gets is invalid.</source>
          <target state="translated">取得したバッファーが無効な場合、&lt;a href=&quot;#tarfile.TarInfo.frombuf&quot;&gt; &lt;code&gt;TarInfo.frombuf()&lt;/code&gt; &lt;/a&gt;によって発生します。</target>
        </trans-unit>
        <trans-unit id="18a7000c3669054a5c3429b5bca7b29f3a62b417" translate="yes" xml:space="preserve">
          <source>Is raised for &lt;em&gt;non-fatal&lt;/em&gt; errors when using &lt;a href=&quot;#tarfile.TarFile.extract&quot;&gt;&lt;code&gt;TarFile.extract()&lt;/code&gt;&lt;/a&gt;, but only if &lt;code&gt;TarFile.errorlevel&lt;/code&gt;&lt;code&gt;== 2&lt;/code&gt;.</source>
          <target state="translated">以下のために提起された&lt;em&gt;致命的で&lt;/em&gt;使用する場合のエラー&lt;a href=&quot;#tarfile.TarFile.extract&quot;&gt; &lt;code&gt;TarFile.extract()&lt;/code&gt; &lt;/a&gt;が、唯一の場合 &lt;code&gt;TarFile.errorlevel&lt;/code&gt; &lt;code&gt;== 2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="18715da6dd78d77038e6918bcd213c664251a25c" translate="yes" xml:space="preserve">
          <source>Is raised for the limitations that are typical for stream-like &lt;a href=&quot;#tarfile.TarFile&quot;&gt;&lt;code&gt;TarFile&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">ストリームのような&lt;a href=&quot;#tarfile.TarFile&quot;&gt; &lt;code&gt;TarFile&lt;/code&gt; &lt;/a&gt;オブジェクトに典型的な制限のために発生します。</target>
        </trans-unit>
        <trans-unit id="b4dfe73679ab1a5e17ff73652a8048ca83d1123c" translate="yes" xml:space="preserve">
          <source>Is raised when a compression method is not supported or when the data cannot be decoded properly.</source>
          <target state="translated">圧縮方法がサポートされていない場合や、データが正しくデコードできない場合に発生します。</target>
        </trans-unit>
        <trans-unit id="3c229c84cdb83be81adf3d14e2f27db1ff9323b8" translate="yes" xml:space="preserve">
          <source>Is raised when a tar archive is opened, that either cannot be handled by the &lt;a href=&quot;#module-tarfile&quot;&gt;&lt;code&gt;tarfile&lt;/code&gt;&lt;/a&gt; module or is somehow invalid.</source>
          <target state="translated">tarアーカイブが開かれたときに発生し、&lt;a href=&quot;#module-tarfile&quot;&gt; &lt;code&gt;tarfile&lt;/code&gt; &lt;/a&gt;モジュールで処理できないか、何らかの理由で無効です。</target>
        </trans-unit>
        <trans-unit id="0d9f275d0e44d3c8f374404212109840194aa96b" translate="yes" xml:space="preserve">
          <source>Is the specified record to be logged? Returns zero for no, nonzero for yes. If deemed appropriate, the record may be modified in-place by this method.</source>
          <target state="translated">指定したレコードがログに記録されますか?no の場合はゼロを、yes の場合はゼロ以外を返します。適切であると判断された場合は、このメソッドを使用してレコードを変更することができます。</target>
        </trans-unit>
        <trans-unit id="b8d1927814fec93e6de191ddf4a54f49e0a8a5f4" translate="yes" xml:space="preserve">
          <source>IsADirectoryError</source>
          <target state="translated">IsADirectoryError</target>
        </trans-unit>
        <trans-unit id="5aaeb6752e0a30b5836a9fdc9113966711e2d7a5" translate="yes" xml:space="preserve">
          <source>Issue a warning, or maybe ignore it or raise an exception. The &lt;em&gt;category&lt;/em&gt; argument, if given, must be a &lt;a href=&quot;#warning-categories&quot;&gt;warning category class&lt;/a&gt;; it defaults to &lt;a href=&quot;exceptions#UserWarning&quot;&gt;&lt;code&gt;UserWarning&lt;/code&gt;&lt;/a&gt;. Alternatively, &lt;em&gt;message&lt;/em&gt; can be a &lt;a href=&quot;exceptions#Warning&quot;&gt;&lt;code&gt;Warning&lt;/code&gt;&lt;/a&gt; instance, in which case &lt;em&gt;category&lt;/em&gt; will be ignored and &lt;code&gt;message.__class__&lt;/code&gt; will be used. In this case, the message text will be &lt;code&gt;str(message)&lt;/code&gt;. This function raises an exception if the particular warning issued is changed into an error by the &lt;a href=&quot;#warning-filter&quot;&gt;warnings filter&lt;/a&gt;. The &lt;em&gt;stacklevel&lt;/em&gt; argument can be used by wrapper functions written in Python, like this:</source>
          <target state="translated">警告を出すか、無視するか、例外を発生させます。&lt;em&gt;カテゴリ&lt;/em&gt;引数は、与えられた場合には、でなければならない&lt;a href=&quot;#warning-categories&quot;&gt;警告カテゴリクラス&lt;/a&gt;。デフォルトは&lt;a href=&quot;exceptions#UserWarning&quot;&gt; &lt;code&gt;UserWarning&lt;/code&gt; &lt;/a&gt;です。または、&lt;em&gt;メッセージ&lt;/em&gt;を&lt;a href=&quot;exceptions#Warning&quot;&gt; &lt;code&gt;Warning&lt;/code&gt; &lt;/a&gt;インスタンスにすることもできます。その場合、&lt;em&gt;カテゴリ&lt;/em&gt;は無視され、 &lt;code&gt;message.__class__&lt;/code&gt; が使用されます。この場合、メッセージテキストは &lt;code&gt;str(message)&lt;/code&gt; になります。この関数は、発行された特定の警告が&lt;a href=&quot;#warning-filter&quot;&gt;警告フィルター&lt;/a&gt;によってエラーに変更された場合に例外を発生させます。&lt;em&gt;stacklevel&lt;/em&gt;引数は次のように、Pythonで書かれたラッパー関数で使用することができます。</target>
        </trans-unit>
        <trans-unit id="2acc379f1d9efba7c573cb292f79779105a94baa" translate="yes" xml:space="preserve">
          <source>Issue an &lt;code&gt;SMTP&lt;/code&gt;&lt;code&gt;AUTH&lt;/code&gt; command for the specified authentication &lt;em&gt;mechanism&lt;/em&gt;, and handle the challenge response via &lt;em&gt;authobject&lt;/em&gt;.</source>
          <target state="translated">指定された認証&lt;em&gt;メカニズム&lt;/em&gt;に対して &lt;code&gt;SMTP&lt;/code&gt; &lt;code&gt;AUTH&lt;/code&gt; コマンドを発行し、&lt;em&gt;authobject&lt;/em&gt;を介してチャレンジ応答を&lt;em&gt;処理し&lt;/em&gt;ます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="131d53be7d06b29d352aeb037a9507988702c57d" translate="yes" xml:space="preserve">
          <source>Issue with file descriptors</source>
          <target state="translated">ファイルディスクリプタに関する問題</target>
        </trans-unit>
        <trans-unit id="e46c8a5eede1acdf3c821975f3ebca0b3fba6963" translate="yes" xml:space="preserve">
          <source>It also defines names for some object types that are used by the standard Python interpreter, but not exposed as builtins like &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; are.</source>
          <target state="translated">また、標準のPythonインタープリターで使用されているが、&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; の&lt;/a&gt;ような組み込みとしては公開されていないオブジェクトタイプの名前も定義しています。</target>
        </trans-unit>
        <trans-unit id="03d0fa505bb145a8b508318b5166e2f593fc8b4f" translate="yes" xml:space="preserve">
          <source>It also has children nodes over which we can iterate:</source>
          <target state="translated">また、反復処理が可能な子ノードも持っています。</target>
        </trans-unit>
        <trans-unit id="ba93dd24e6158dc460f6e66524c0fca4f667b666" translate="yes" xml:space="preserve">
          <source>It also looks for &lt;code&gt;*.pkg&lt;/code&gt; files beginning where &lt;code&gt;*&lt;/code&gt; matches the &lt;em&gt;name&lt;/em&gt; argument. This feature is similar to &lt;code&gt;*.pth&lt;/code&gt; files (see the &lt;a href=&quot;site#module-site&quot;&gt;&lt;code&gt;site&lt;/code&gt;&lt;/a&gt; module for more information), except that it doesn&amp;rsquo;t special-case lines starting with &lt;code&gt;import&lt;/code&gt;. A &lt;code&gt;*.pkg&lt;/code&gt; file is trusted at face value: apart from checking for duplicates, all entries found in a &lt;code&gt;*.pkg&lt;/code&gt; file are added to the path, regardless of whether they exist on the filesystem. (This is a feature.)</source>
          <target state="translated">また、 &lt;code&gt;*&lt;/code&gt; が&lt;em&gt;name&lt;/em&gt;引数と一致する場所から始まる &lt;code&gt;*.pkg&lt;/code&gt; ファイルも検索します。この機能は &lt;code&gt;*.pth&lt;/code&gt; ファイルに似ています（詳細については、&lt;a href=&quot;site#module-site&quot;&gt; &lt;code&gt;site&lt;/code&gt; &lt;/a&gt;モジュールを参照してください）。ただし、 &lt;code&gt;import&lt;/code&gt; で始まる特殊な行はありません。 &lt;code&gt;*.pkg&lt;/code&gt; ファイルを額面で信頼されている。離れて重複のチェックから、すべてのエントリが中に見出さ &lt;code&gt;*.pkg&lt;/code&gt; 関係なくファイルシステム上に存在するかどうかの、パスに追加されているファイル。（これは機能です。）&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ac049eee8e098efbf97dcda725fb4ce89501bd33" translate="yes" xml:space="preserve">
          <source>It also supports certain of Python&amp;rsquo;s built-in operators through &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__eq__&quot;&gt;&lt;code&gt;__eq__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__ne__&quot;&gt;&lt;code&gt;__ne__()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">また、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__eq__&quot;&gt; &lt;code&gt;__eq__()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__ne__&quot;&gt; &lt;code&gt;__ne__()&lt;/code&gt; &lt;/a&gt;メソッドを介して特定のPythonの組み込み演算子をサポートします。</target>
        </trans-unit>
        <trans-unit id="72eb8ad6cd37cb5f52e4a1a044e775d59251623a" translate="yes" xml:space="preserve">
          <source>It also supports certain of Python&amp;rsquo;s built-in operators through &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__eq__&quot;&gt;&lt;code&gt;__eq__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__ne__&quot;&gt;&lt;code&gt;__ne__()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">It also supports certain of Python&amp;rsquo;s built-in operators through &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__eq__&quot;&gt; &lt;code&gt;__eq__()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__ne__&quot;&gt; &lt;code&gt;__ne__()&lt;/code&gt; &lt;/a&gt; methods.</target>
        </trans-unit>
        <trans-unit id="b08324cda6eda4c504aa9a823d617b47aa532d2d" translate="yes" xml:space="preserve">
          <source>It also supports certain of Python&amp;rsquo;s built-in operators through rich comparison and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__repr__&quot;&gt;&lt;code&gt;__repr__()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">また、豊富な比較と&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__repr__&quot;&gt; &lt;code&gt;__repr__()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、Pythonの特定の組み込み演算子をサポートします。</target>
        </trans-unit>
        <trans-unit id="842ed03a56a6f506cf11d486992609fafd42c6d4" translate="yes" xml:space="preserve">
          <source>It also supports certain of Python&amp;rsquo;s built-in operators through rich comparison and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__repr__&quot;&gt;&lt;code&gt;__repr__()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">It also supports certain of Python&amp;rsquo;s built-in operators through rich comparison and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__repr__&quot;&gt; &lt;code&gt;__repr__()&lt;/code&gt; &lt;/a&gt; methods.</target>
        </trans-unit>
        <trans-unit id="1186ed492c366eaa388b29b3083c0e6d09f9e556" translate="yes" xml:space="preserve">
          <source>It also understands &lt;code&gt;NaN&lt;/code&gt;, &lt;code&gt;Infinity&lt;/code&gt;, and &lt;code&gt;-Infinity&lt;/code&gt; as their corresponding &lt;code&gt;float&lt;/code&gt; values, which is outside the JSON spec.</source>
          <target state="translated">また、 &lt;code&gt;NaN&lt;/code&gt; 、 &lt;code&gt;Infinity&lt;/code&gt; 、および &lt;code&gt;-Infinity&lt;/code&gt; を、JSON仕様の範囲外である対応する &lt;code&gt;float&lt;/code&gt; 値として認識します。</target>
        </trans-unit>
        <trans-unit id="94b40a001adb648db1d34b0c19e9d0480830df9e" translate="yes" xml:space="preserve">
          <source>It behaves as if the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-W default&lt;/code&gt;&lt;/a&gt; command line option is used.</source>
          <target state="translated">It behaves as if the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-w&quot;&gt; &lt;code&gt;-W default&lt;/code&gt; &lt;/a&gt; command line option is used.</target>
        </trans-unit>
        <trans-unit id="d97d143e1ed5833a5ffae18d0d146c9b4a3160c8" translate="yes" xml:space="preserve">
          <source>It behaves as if the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONASYNCIODEBUG&quot; id=&quot;index-5&quot;&gt;&lt;code&gt;PYTHONASYNCIODEBUG&lt;/code&gt;&lt;/a&gt; environment variable is set to &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">It behaves as if the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONASYNCIODEBUG&quot; id=&quot;index-5&quot;&gt; &lt;code&gt;PYTHONASYNCIODEBUG&lt;/code&gt; &lt;/a&gt; environment variable is set to &lt;code&gt;1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a74741be2e55387e02182ff501814cbceadec398" translate="yes" xml:space="preserve">
          <source>It behaves as if the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONMALLOC&quot; id=&quot;index-2&quot;&gt;&lt;code&gt;PYTHONMALLOC&lt;/code&gt;&lt;/a&gt; environment variable is set to &lt;code&gt;debug&lt;/code&gt;.</source>
          <target state="translated">It behaves as if the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONMALLOC&quot; id=&quot;index-2&quot;&gt; &lt;code&gt;PYTHONMALLOC&lt;/code&gt; &lt;/a&gt; environment variable is set to &lt;code&gt;debug&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3223643d116973b3df651fdfb1a63a8fda9e729e" translate="yes" xml:space="preserve">
          <source>It behaves as if the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X faulthandler&lt;/code&gt;&lt;/a&gt; command line option is used or if the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONFAULTHANDLER&quot; id=&quot;index-4&quot;&gt;&lt;code&gt;PYTHONFAULTHANDLER&lt;/code&gt;&lt;/a&gt; environment variable is set to &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">It behaves as if the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X faulthandler&lt;/code&gt; &lt;/a&gt; command line option is used or if the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONFAULTHANDLER&quot; id=&quot;index-4&quot;&gt; &lt;code&gt;PYTHONFAULTHANDLER&lt;/code&gt; &lt;/a&gt; environment variable is set to &lt;code&gt;1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="aec1493a57b4d7fa45bea1b3298210ad9be4bf5b" translate="yes" xml:space="preserve">
          <source>It can also be used to restore the actual files to known working file objects in case they have been overwritten with a broken object. However, the preferred way to do this is to explicitly save the previous stream before replacing it, and restore the saved object.</source>
          <target state="translated">また、壊れたオブジェクトで上書きされた場合に、実際のファイルを既知の作業ファイルオブジェクトに復元することもできます。しかし、これを行うための好ましい方法は、前のストリームを置き換える前に明示的に保存し、保存されたオブジェクトを復元することです。</target>
        </trans-unit>
        <trans-unit id="8de172274d40b1578d3c4b46f50eae9a471e5a68" translate="yes" xml:space="preserve">
          <source>It can be 16 bits or 32 bits depending on the platform.</source>
          <target state="translated">プラットフォームによっては16ビットまたは32ビットになります。</target>
        </trans-unit>
        <trans-unit id="79cab5b41999a73bfdfbaad2711310f0344a5211" translate="yes" xml:space="preserve">
          <source>It can be enabled using the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X dev&lt;/code&gt;&lt;/a&gt; command line option or by setting the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONDEVMODE&quot; id=&quot;index-0&quot;&gt;&lt;code&gt;PYTHONDEVMODE&lt;/code&gt;&lt;/a&gt; environment variable to &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">It can be enabled using the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X dev&lt;/code&gt; &lt;/a&gt; command line option or by setting the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONDEVMODE&quot; id=&quot;index-0&quot;&gt; &lt;code&gt;PYTHONDEVMODE&lt;/code&gt; &lt;/a&gt; environment variable to &lt;code&gt;1&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a9e025bf37372974d8506acabf4c6c27f0517393" translate="yes" xml:space="preserve">
          <source>It cannot be caught, blocked, or ignored.</source>
          <target state="translated">捕まったり、ブロックされたり、無視されたりすることはありません。</target>
        </trans-unit>
        <trans-unit id="60f3acc604f0bf942399f638a855b169564bcc7f" translate="yes" xml:space="preserve">
          <source>It defines a &lt;a href=&quot;#selectors.BaseSelector&quot;&gt;&lt;code&gt;BaseSelector&lt;/code&gt;&lt;/a&gt; abstract base class, along with several concrete implementations (&lt;a href=&quot;#selectors.KqueueSelector&quot;&gt;&lt;code&gt;KqueueSelector&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#selectors.EpollSelector&quot;&gt;&lt;code&gt;EpollSelector&lt;/code&gt;&lt;/a&gt;&amp;hellip;), that can be used to wait for I/O readiness notification on multiple file objects. In the following, &amp;ldquo;file object&amp;rdquo; refers to any object with a &lt;code&gt;fileno()&lt;/code&gt; method, or a raw file descriptor. See &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;.</source>
          <target state="translated">これは、&lt;a href=&quot;#selectors.BaseSelector&quot;&gt; &lt;code&gt;BaseSelector&lt;/code&gt; &lt;/a&gt;抽象基本クラスと、複数のファイルオブジェクトのI / O準備通知を待機するために使用できるいくつかの具体的な実装（&lt;a href=&quot;#selectors.KqueueSelector&quot;&gt; &lt;code&gt;KqueueSelector&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#selectors.EpollSelector&quot;&gt; &lt;code&gt;EpollSelector&lt;/code&gt; &lt;/a&gt; &amp;hellip;）を定義します。以下では、「ファイルオブジェクト」は、 &lt;code&gt;fileno()&lt;/code&gt; メソッドを持つオブジェクト、または生のファイル記述子を指します。&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;ファイルオブジェクトを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f27f526ef94f520ad493a876be3577831360f945" translate="yes" xml:space="preserve">
          <source>It defines a &lt;a href=&quot;#selectors.BaseSelector&quot;&gt;&lt;code&gt;BaseSelector&lt;/code&gt;&lt;/a&gt; abstract base class, along with several concrete implementations (&lt;a href=&quot;#selectors.KqueueSelector&quot;&gt;&lt;code&gt;KqueueSelector&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#selectors.EpollSelector&quot;&gt;&lt;code&gt;EpollSelector&lt;/code&gt;&lt;/a&gt;&amp;hellip;), that can be used to wait for I/O readiness notification on multiple file objects. In the following, &amp;ldquo;file object&amp;rdquo; refers to any object with a &lt;code&gt;fileno()&lt;/code&gt; method, or a raw file descriptor. See &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;.</source>
          <target state="translated">It defines a &lt;a href=&quot;#selectors.BaseSelector&quot;&gt; &lt;code&gt;BaseSelector&lt;/code&gt; &lt;/a&gt; abstract base class, along with several concrete implementations (&lt;a href=&quot;#selectors.KqueueSelector&quot;&gt; &lt;code&gt;KqueueSelector&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#selectors.EpollSelector&quot;&gt; &lt;code&gt;EpollSelector&lt;/code&gt; &lt;/a&gt;&amp;hellip;), that can be used to wait for I/O readiness notification on multiple file objects. In the following, &amp;ldquo;file object&amp;rdquo; refers to any object with a &lt;code&gt;fileno()&lt;/code&gt; method, or a raw file descriptor. See &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a86490549662868112f136678359ce261e7fbf4a" translate="yes" xml:space="preserve">
          <source>It defines the following items:</source>
          <target state="translated">以下の項目を定義しています。</target>
        </trans-unit>
        <trans-unit id="86cf8e626a8b6c0e4daf5e5c5001af4e595a1aaf" translate="yes" xml:space="preserve">
          <source>It detects the encoding from the presence of a UTF-8 BOM or an encoding cookie as specified in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0263&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 263&lt;/strong&gt;&lt;/a&gt;. If both a BOM and a cookie are present, but disagree, a &lt;a href=&quot;exceptions#SyntaxError&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt; will be raised. Note that if the BOM is found, &lt;code&gt;'utf-8-sig'&lt;/code&gt; will be returned as an encoding.</source>
          <target state="translated">&lt;a href=&quot;https://www.python.org/dev/peps/pep-0263&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;PEP 263で&lt;/strong&gt;&lt;/a&gt;指定されているように、UTF-8 BOMまたはエンコーディングCookieの存在からエンコーディングを検出します。BOMとCookieの両方が存在するが一致しない場合、&lt;a href=&quot;exceptions#SyntaxError&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; &lt;/a&gt;が発生します。BOMが見つかった場合、 &lt;code&gt;'utf-8-sig'&lt;/code&gt; として'utf-8-sig'が返されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9a6d7e8dc33830431ce4274e88f610528d52ec30" translate="yes" xml:space="preserve">
          <source>It extends the existing &lt;em&gt;ustar&lt;/em&gt; format with extra headers for information that cannot be stored otherwise. There are two flavours of pax headers: Extended headers only affect the subsequent file header, global headers are valid for the complete archive and affect all following files. All the data in a pax header is encoded in &lt;em&gt;UTF-8&lt;/em&gt; for portability reasons.</source>
          <target state="translated">これは、既存の&lt;em&gt;ustar&lt;/em&gt;フォーマットを拡張して、他の方法では格納できない情報の追加ヘッダーを追加します。paxヘッダーには2つの種類があります。拡張ヘッダーは後続のファイルヘッダーにのみ影響します。グローバルヘッダーはアーカイブ全体で有効で、後続のすべてのファイルに影響します。移植性の理由から、paxヘッダーのすべてのデータは&lt;em&gt;UTF-8&lt;/em&gt;でエンコードされています。</target>
        </trans-unit>
        <trans-unit id="3ffd7e38afe55390aae7754992e18f89ae1644e1" translate="yes" xml:space="preserve">
          <source>It has no other methods besides the ones inherited from &lt;code&gt;ttk.Widget&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ttk.Widget&lt;/code&gt; から継承したメソッド以外に、他のメソッドはありません。</target>
        </trans-unit>
        <trans-unit id="0951e90496403cdeaa51c98298faafd64552fecb" translate="yes" xml:space="preserve">
          <source>It has one attribute, &lt;code&gt;data&lt;/code&gt;, that can be used to retrieve the Python bytes object stored in it.</source>
          <target state="translated">これには、格納されているPythonバイトオブジェクトを取得するために使用できる1つの属性 &lt;code&gt;data&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="3780db06a7fc7e80db01f0dc24e060618d78221a" translate="yes" xml:space="preserve">
          <source>It has one attribute, &lt;code&gt;data&lt;/code&gt;, which can be used to retrieve the int value of the UID. &lt;code&gt;data&lt;/code&gt; must be in the range &lt;code&gt;0 &amp;lt;= data &amp;lt; 2**64&lt;/code&gt;.</source>
          <target state="translated">これには &lt;code&gt;data&lt;/code&gt; という 1つの属性があり、これを使用してUIDのint値を取得できます。 &lt;code&gt;data&lt;/code&gt; は &lt;code&gt;0 &amp;lt;= data &amp;lt; 2**64&lt;/code&gt; の範囲でなければなりません。</target>
        </trans-unit>
        <trans-unit id="23306eadb9dad4ad03f07be8c0a83f188ab18bb4" translate="yes" xml:space="preserve">
          <source>It is a simplified &lt;a href=&quot;#multiprocessing.Queue&quot;&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt; type, very close to a locked &lt;a href=&quot;#multiprocessing.Pipe&quot;&gt;&lt;code&gt;Pipe&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、ロックされた&lt;a href=&quot;#multiprocessing.Pipe&quot;&gt; &lt;code&gt;Pipe&lt;/code&gt; &lt;/a&gt;に非常に近い、単純化された&lt;a href=&quot;#multiprocessing.Queue&quot;&gt; &lt;code&gt;Queue&lt;/code&gt; &lt;/a&gt;タイプです。</target>
        </trans-unit>
        <trans-unit id="5ae066ca641a4bc8990133345ec5ed5570fe1167" translate="yes" xml:space="preserve">
          <source>It is advisable to use the &lt;a href=&quot;#nntplib.decode_header&quot;&gt;&lt;code&gt;decode_header()&lt;/code&gt;&lt;/a&gt; function on header values when they may contain non-ASCII characters:</source>
          <target state="translated">ASCII以外の文字が含まれている可能性がある場合は、ヘッダー値に&lt;a href=&quot;#nntplib.decode_header&quot;&gt; &lt;code&gt;decode_header()&lt;/code&gt; &lt;/a&gt;関数を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="753d5be67d0389392a814b65b9ab13072b3bc426" translate="yes" xml:space="preserve">
          <source>It is allowable for many weak references to be constructed for the same object. Callbacks registered for each weak reference will be called from the most recently registered callback to the oldest registered callback.</source>
          <target state="translated">同じオブジェクトに対して多くの弱い参照を構築することができます。各弱参照に登録されたコールバックは、最も最近登録されたコールバックから最も古いコールバックまで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c594fee7fb081acf751161f581d98f6ddeb8a51f" translate="yes" xml:space="preserve">
          <source>It is also legal to pass strings as parameters; these should be keys in &lt;code&gt;sys.modules&lt;/code&gt;. Each associated module will be scanned by &lt;code&gt;unittest.TestLoader.loadTestsFromModule()&lt;/code&gt;. This is usually seen in the following &lt;code&gt;test_main()&lt;/code&gt; function:</source>
          <target state="translated">文字列をパラメータとして渡すこともできます。これらは &lt;code&gt;sys.modules&lt;/code&gt; のキーである必要があります。関連する各モジュールは、 &lt;code&gt;unittest.TestLoader.loadTestsFromModule()&lt;/code&gt; によってスキャンされます。これは通常、次の &lt;code&gt;test_main()&lt;/code&gt; 関数で見られます：</target>
        </trans-unit>
        <trans-unit id="9198580629b375ecb6cd20a7e7294c4ca6e5fd99" translate="yes" xml:space="preserve">
          <source>It is also possible to achieve the same result without using the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-context-manager&quot;&gt;context manager&lt;/a&gt; approach.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-context-manager&quot;&gt;コンテキストマネージャの&lt;/a&gt;アプローチを使用せずに同じ結果を達成することも可能です。</target>
        </trans-unit>
        <trans-unit id="a898afa2992cd8e912c575a2536dec4453ed7a3c" translate="yes" xml:space="preserve">
          <source>It is also possible to achieve the same result without using the &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-context-manager&quot;&gt;context manager&lt;/a&gt; approach.</source>
          <target state="translated">It is also possible to achieve the same result without using the &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-context-manager&quot;&gt;context manager&lt;/a&gt; approach.</target>
        </trans-unit>
        <trans-unit id="a1255f8f5c1717c7558bffa794a4d3503ba88bf1" translate="yes" xml:space="preserve">
          <source>It is also possible to check the production of exceptions, warnings, and log messages using the following methods:</source>
          <target state="translated">また、以下の方法で例外や警告、ログメッセージの生成を確認することも可能です。</target>
        </trans-unit>
        <trans-unit id="bfda1e856e7a541fee3a382fde7564093efe53b2" translate="yes" xml:space="preserve">
          <source>It is also possible to create temporary directories; see the &lt;a href=&quot;tempfile#module-tempfile&quot;&gt;&lt;code&gt;tempfile&lt;/code&gt;&lt;/a&gt; module&amp;rsquo;s &lt;a href=&quot;tempfile#tempfile.mkdtemp&quot;&gt;&lt;code&gt;tempfile.mkdtemp()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">一時ディレクトリを作成することもできます。&lt;a href=&quot;tempfile#module-tempfile&quot;&gt; &lt;code&gt;tempfile&lt;/code&gt; &lt;/a&gt;モジュールの&lt;a href=&quot;tempfile#tempfile.mkdtemp&quot;&gt; &lt;code&gt;tempfile.mkdtemp()&lt;/code&gt; &lt;/a&gt;関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="6422bf6800c39267f0e3ec0b62764a762df242b2" translate="yes" xml:space="preserve">
          <source>It is also possible to name the combinations:</source>
          <target state="translated">組み合わせの名前をつけることも可能です。</target>
        </trans-unit>
        <trans-unit id="798d456bd66adc337600fb619c61f4bd509b080b" translate="yes" xml:space="preserve">
          <source>It is also possible to stop all patches which have been started by using &lt;a href=&quot;#unittest.mock.patch.stopall&quot;&gt;&lt;code&gt;patch.stopall()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#unittest.mock.patch.stopall&quot;&gt; &lt;code&gt;patch.stopall()&lt;/code&gt; &lt;/a&gt;を使用して、開始されたすべてのパッチを停止することもできます。</target>
        </trans-unit>
        <trans-unit id="ecc27f258f5c82cae432552d9efba051f52376ec" translate="yes" xml:space="preserve">
          <source>It is also possible to use a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; as a file for both reading and writing. For strings &lt;a href=&quot;#io.StringIO&quot;&gt;&lt;code&gt;StringIO&lt;/code&gt;&lt;/a&gt; can be used like a file opened in text mode. &lt;a href=&quot;#io.BytesIO&quot;&gt;&lt;code&gt;BytesIO&lt;/code&gt;&lt;/a&gt; can be used like a file opened in binary mode. Both provide full read-write capabilities with random access.</source>
          <target state="translated">&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-likeオブジェクト&lt;/a&gt;を、読み取りと書き込みの両方のファイルとして使用することもできます。文字列の場合、&lt;a href=&quot;#io.StringIO&quot;&gt; &lt;code&gt;StringIO&lt;/code&gt; &lt;/a&gt;はテキストモードで開かれたファイルのように使用できます。&lt;a href=&quot;#io.BytesIO&quot;&gt; &lt;code&gt;BytesIO&lt;/code&gt; &lt;/a&gt;は、バイナリモードで開いたファイルのように使用できます。どちらもランダムアクセスを備えた完全な読み書き機能を提供します。</target>
        </trans-unit>
        <trans-unit id="c2f64b3927e28c8bd9e49f0275fac190fac8e34d" translate="yes" xml:space="preserve">
          <source>It is also possible to use a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; as a file for both reading and writing. For strings &lt;a href=&quot;#io.StringIO&quot;&gt;&lt;code&gt;StringIO&lt;/code&gt;&lt;/a&gt; can be used like a file opened in text mode. &lt;a href=&quot;#io.BytesIO&quot;&gt;&lt;code&gt;BytesIO&lt;/code&gt;&lt;/a&gt; can be used like a file opened in binary mode. Both provide full read-write capabilities with random access.</source>
          <target state="translated">It is also possible to use a &lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt; as a file for both reading and writing. For strings &lt;a href=&quot;#io.StringIO&quot;&gt; &lt;code&gt;StringIO&lt;/code&gt; &lt;/a&gt; can be used like a file opened in text mode. &lt;a href=&quot;#io.BytesIO&quot;&gt; &lt;code&gt;BytesIO&lt;/code&gt; &lt;/a&gt; can be used like a file opened in binary mode. Both provide full read-write capabilities with random access.</target>
        </trans-unit>
        <trans-unit id="58451ee77d03223f613fe1da224a8696f7ed0741" translate="yes" xml:space="preserve">
          <source>It is also possible to use indexes different from 0, but you must know what you&amp;rsquo;re doing, just as in C: You can access or change arbitrary memory locations. Generally you only use this feature if you receive a pointer from a C function, and you &lt;em&gt;know&lt;/em&gt; that the pointer actually points to an array instead of a single item.</source>
          <target state="translated">0以外のインデックスを使用することも可能ですが、Cの場合と同様に、何をしているのかを知っている必要があります。任意のメモリ位置にアクセスまたは変更できます。一般的に、あなたがC関数からポインタを受信した場合にのみ、この機能を使用すると、あなたは&lt;em&gt;知っている&lt;/em&gt;ポインタが実際には配列の代わりに、単一の項目を指していること。</target>
        </trans-unit>
        <trans-unit id="7f8863324723aab745603c612674ad8820136acc" translate="yes" xml:space="preserve">
          <source>It is an error for &lt;code&gt;changes&lt;/code&gt; to contain any fields that are defined as having &lt;code&gt;init=False&lt;/code&gt;. A &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; will be raised in this case.</source>
          <target state="translated">&lt;code&gt;init=False&lt;/code&gt; として定義されているフィールド &lt;code&gt;changes&lt;/code&gt; に含まれると、エラーになります。A &lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;、この場合に発生します。</target>
        </trans-unit>
        <trans-unit id="c40beea80b192f98b4ef0d6e82a60946f7b0973f" translate="yes" xml:space="preserve">
          <source>It is an error if &lt;em&gt;buffer_callback&lt;/em&gt; is not None and &lt;em&gt;protocol&lt;/em&gt; is None or smaller than 5.</source>
          <target state="translated">&lt;em&gt;buffer_callback&lt;/em&gt;がNoneでなく、&lt;em&gt;プロトコル&lt;/em&gt;がNoneまたは5より小さい場合は、エラーになり&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="400a0f3110c595609b6c3b419668f8a9a2d9e88b" translate="yes" xml:space="preserve">
          <source>It is an error if &lt;em&gt;themename&lt;/em&gt; already exists. If &lt;em&gt;parent&lt;/em&gt; is specified, the new theme will inherit styles, elements and layouts from the parent theme. If &lt;em&gt;settings&lt;/em&gt; are present they are expected to have the same syntax used for &lt;a href=&quot;#tkinter.ttk.Style.theme_settings&quot;&gt;&lt;code&gt;theme_settings()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;テーマ名が&lt;/em&gt;すでに存在する場合はエラーになります。場合は&lt;em&gt;、親が&lt;/em&gt;指定されている、新しいテーマが親テーマのスタイル、要素やレイアウトを継承します。場合&lt;em&gt;の設定が&lt;/em&gt;存在している彼らがために使用したのと同じ構文が期待されている&lt;a href=&quot;#tkinter.ttk.Style.theme_settings&quot;&gt; &lt;code&gt;theme_settings()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3cc9474ae763da1597037edc834b029615b066bd" translate="yes" xml:space="preserve">
          <source>It is an error to specify tuples for both &lt;em&gt;times&lt;/em&gt; and &lt;em&gt;ns&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;時間&lt;/em&gt;と&lt;em&gt;nsの&lt;/em&gt;両方にタプルを指定すると、エラーになります。</target>
        </trans-unit>
        <trans-unit id="4b49de4f66d59503ff78e81f00969dd43035654c" translate="yes" xml:space="preserve">
          <source>It is assumed that &lt;a href=&quot;sys#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt; is a sequence. Items of &lt;a href=&quot;sys#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt; that are not strings referring to existing directories are ignored. Unicode items on &lt;a href=&quot;sys#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt; that cause errors when used as filenames may cause this function to raise an exception (in line with &lt;a href=&quot;os.path#os.path.isdir&quot;&gt;&lt;code&gt;os.path.isdir()&lt;/code&gt;&lt;/a&gt; behavior).</source>
          <target state="translated">&lt;a href=&quot;sys#sys.path&quot;&gt; &lt;code&gt;sys.path&lt;/code&gt; &lt;/a&gt;はシーケンスであると想定されています。既存のディレクトリを参照する文字列ではない&lt;a href=&quot;sys#sys.path&quot;&gt; &lt;code&gt;sys.path&lt;/code&gt; の&lt;/a&gt;項目は無視されます。ファイル名として使用するとエラーが発生する&lt;a href=&quot;sys#sys.path&quot;&gt; &lt;code&gt;sys.path&lt;/code&gt; &lt;/a&gt;上のUnicodeアイテムにより、この関数で例外が発生する可能性があります（&lt;a href=&quot;os.path#os.path.isdir&quot;&gt; &lt;code&gt;os.path.isdir()&lt;/code&gt; の&lt;/a&gt;動作に合わせて）。</target>
        </trans-unit>
        <trans-unit id="0198f7955aa686bfda71617994f6d44009f39351" translate="yes" xml:space="preserve">
          <source>It is difficult to provide complete flexibility for incremental configuration. For example, because objects such as filters and formatters are anonymous, once a configuration is set up, it is not possible to refer to such anonymous objects when augmenting a configuration.</source>
          <target state="translated">インクリメンタルな設定に完全な柔軟性を持たせることは困難です。例えば、フィルタやフォーマッタのようなオブジェクトは匿名であるため、一度設定を行うと、設定を拡張する際にそのような匿名オブジェクトを参照することができません。</target>
        </trans-unit>
        <trans-unit id="9c9831b435206f2d98bf30605d962090f4a4c0bb" translate="yes" xml:space="preserve">
          <source>It is equal to &lt;code&gt;&quot;lib&quot;&lt;/code&gt; on most platforms. On Fedora and SuSE, it is equal to &lt;code&gt;&quot;lib64&quot;&lt;/code&gt; on 64-bit platforms which gives the following &lt;code&gt;sys.path&lt;/code&gt; paths (where &lt;code&gt;X.Y&lt;/code&gt; is the Python &lt;code&gt;major.minor&lt;/code&gt; version):</source>
          <target state="translated">It is equal to &lt;code&gt;&quot;lib&quot;&lt;/code&gt; on most platforms. On Fedora and SuSE, it is equal to &lt;code&gt;&quot;lib64&quot;&lt;/code&gt; on 64-bit platforms which gives the following &lt;code&gt;sys.path&lt;/code&gt; paths (where &lt;code&gt;X.Y&lt;/code&gt; is the Python &lt;code&gt;major.minor&lt;/code&gt; version):</target>
        </trans-unit>
        <trans-unit id="e876d5b634ed2ac0febedb41255584db8cd5eec6" translate="yes" xml:space="preserve">
          <source>It is expected that &lt;em&gt;name&lt;/em&gt; will be a string in one of the following formats, where W is shorthand for a valid Python identifier and dot stands for a literal period in these pseudo-regexes:</source>
          <target state="translated">It is expected that &lt;em&gt;name&lt;/em&gt; will be a string in one of the following formats, where W is shorthand for a valid Python identifier and dot stands for a literal period in these pseudo-regexes:</target>
        </trans-unit>
        <trans-unit id="0b8d428b0665acaca4a8a5c4e599c5757fb9e58f" translate="yes" xml:space="preserve">
          <source>It is for historical reasons that &lt;em&gt;dirname&lt;/em&gt; is named as such rather than &lt;em&gt;path&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;dirname&lt;/em&gt;が&lt;em&gt;path&lt;/em&gt;ではなく、そのように命名されているのは歴史的な理由によるものです。</target>
        </trans-unit>
        <trans-unit id="8aa1103190ac27a640efe27d8f90def24b585ee7" translate="yes" xml:space="preserve">
          <source>It is generally a bad idea to call &lt;a href=&quot;#locale.setlocale&quot;&gt;&lt;code&gt;setlocale()&lt;/code&gt;&lt;/a&gt; in some library routine, since as a side effect it affects the entire program. Saving and restoring it is almost as bad: it is expensive and affects other threads that happen to run before the settings have been restored.</source>
          <target state="translated">副作用としてプログラム全体に影響を与えるため、いくつかのライブラリルーチンで&lt;a href=&quot;#locale.setlocale&quot;&gt; &lt;code&gt;setlocale()&lt;/code&gt; &lt;/a&gt;を呼び出すことは一般に悪い考えです。これを保存して復元することは、ほぼ同じように悪いことです。コストが高く、設定が復元される前に実行される他のスレッドに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="99fa0df2b3316d6bf82c33997b4364c06d01242a" translate="yes" xml:space="preserve">
          <source>It is generally not very useful to reload built-in or dynamically loaded modules. Reloading &lt;a href=&quot;sys#module-sys&quot;&gt;&lt;code&gt;sys&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;__main__#module-__main__&quot;&gt;&lt;code&gt;__main__&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;builtins#module-builtins&quot;&gt;&lt;code&gt;builtins&lt;/code&gt;&lt;/a&gt; and other key modules is not recommended. In many cases extension modules are not designed to be initialized more than once, and may fail in arbitrary ways when reloaded.</source>
          <target state="translated">一般に、組み込みモジュールまたは動的にロードされたモジュールを再ロードすることはあまり役に立ちません。&lt;a href=&quot;sys#module-sys&quot;&gt; &lt;code&gt;sys&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;__main__#module-__main__&quot;&gt; &lt;code&gt;__main__&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;builtins#module-builtins&quot;&gt; &lt;code&gt;builtins&lt;/code&gt; &lt;/a&gt;およびその他の主要なモジュールをリロードすることはお勧めしません。多くの場合、拡張モジュールは複数回初期化されるようには設計されておらず、再ロード時に任意の方法で失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="fb0ca349a42e3b12e5d41231c5073aad2d937d17" translate="yes" xml:space="preserve">
          <source>It is illegal to move an item under one of its descendants. If &lt;em&gt;index&lt;/em&gt; is less than or equal to zero, &lt;em&gt;item&lt;/em&gt; is moved to the beginning; if greater than or equal to the number of children, it is moved to the end. If &lt;em&gt;item&lt;/em&gt; was detached it is reattached.</source>
          <target state="translated">子孫の下にアイテムを移動することは違法です。&lt;em&gt;インデックス&lt;/em&gt;がゼロ以下の場合、&lt;em&gt;アイテム&lt;/em&gt;は先頭に移動します。子の数以上の場合は、最後に移動します。場合は&lt;em&gt;アイテムが&lt;/em&gt;切り離されたことを再付着されます。</target>
        </trans-unit>
        <trans-unit id="95714223e048e09765010a9f06704454985fe259" translate="yes" xml:space="preserve">
          <source>It is important to ensure that &lt;em&gt;func&lt;/em&gt;, &lt;em&gt;args&lt;/em&gt; and &lt;em&gt;kwargs&lt;/em&gt; do not own any references to &lt;em&gt;obj&lt;/em&gt;, either directly or indirectly, since otherwise &lt;em&gt;obj&lt;/em&gt; will never be garbage collected. In particular, &lt;em&gt;func&lt;/em&gt; should not be a bound method of &lt;em&gt;obj&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;func&lt;/em&gt;、&lt;em&gt;args&lt;/em&gt;、および&lt;em&gt;kwargs&lt;/em&gt;が直接または間接的に&lt;em&gt;obj&lt;/em&gt;への参照を所有しないようにすることが重要です。それ以外の場合、&lt;em&gt;obj&lt;/em&gt;はガベージコレクションされません。特に、&lt;em&gt;func&lt;/em&gt;は&lt;em&gt;objの&lt;/em&gt;バインドされたメソッドであってはなりません。</target>
        </trans-unit>
        <trans-unit id="cb8f43a85dd413c6cde8de7ffa05ec877b1e553b" translate="yes" xml:space="preserve">
          <source>It is important to note that modules in the &lt;a href=&quot;#module-xml&quot;&gt;&lt;code&gt;xml&lt;/code&gt;&lt;/a&gt; package require that there be at least one SAX-compliant XML parser available. The Expat parser is included with Python, so the &lt;a href=&quot;pyexpat#module-xml.parsers.expat&quot;&gt;&lt;code&gt;xml.parsers.expat&lt;/code&gt;&lt;/a&gt; module will always be available.</source>
          <target state="translated">&lt;a href=&quot;#module-xml&quot;&gt; &lt;code&gt;xml&lt;/code&gt; &lt;/a&gt;パッケージのモジュールでは、少なくとも1つのSAX準拠のXMLパーサーが利用可能である必要があることに注意することが重要です。ExpatパーサーはPythonに含まれているため、&lt;a href=&quot;pyexpat#module-xml.parsers.expat&quot;&gt; &lt;code&gt;xml.parsers.expat&lt;/code&gt; &lt;/a&gt;モジュールは常に使用可能です。</target>
        </trans-unit>
        <trans-unit id="95c82506febe72f22188b7f00df4e1ec93e22d7a" translate="yes" xml:space="preserve">
          <source>It is important to note that most regular expression operations are available as module-level functions and methods on &lt;a href=&quot;#re-objects&quot;&gt;compiled regular expressions&lt;/a&gt;. The functions are shortcuts that don&amp;rsquo;t require you to compile a regex object first, but miss some fine-tuning parameters.</source>
          <target state="translated">ほとんどの正規表現操作は、&lt;a href=&quot;#re-objects&quot;&gt;コンパイルされた正規表現で&lt;/a&gt;モジュールレベルの関数とメソッドとして使用できることに注意してください。関数は、最初に正規表現オブジェクトをコンパイルする必要がないショートカットですが、いくつかの微調整パラメーターがありません。</target>
        </trans-unit>
        <trans-unit id="624e6ff33f7bfbc731179c57fb95772ca83eb019" translate="yes" xml:space="preserve">
          <source>It is limited to 100 frames and 100 threads.</source>
          <target state="translated">100枠100スレッドに限定されています。</target>
        </trans-unit>
        <trans-unit id="2865105771b6160f23eac9cb92cba66e1d8cd1a0" translate="yes" xml:space="preserve">
          <source>It is long enough to reduce the risk of test failure on the slowest Python buildbots. It should not be used to mark a test as failed if the test takes &amp;ldquo;too long&amp;rdquo;. The timeout value depends on the regrtest &lt;code&gt;--timeout&lt;/code&gt; command line option.</source>
          <target state="translated">It is long enough to reduce the risk of test failure on the slowest Python buildbots. It should not be used to mark a test as failed if the test takes &amp;ldquo;too long&amp;rdquo;. The timeout value depends on the regrtest &lt;code&gt;--timeout&lt;/code&gt; command line option.</target>
        </trans-unit>
        <trans-unit id="4093ccc8e1fc34ca326724ab26e7be0883220a09" translate="yes" xml:space="preserve">
          <source>It is meant to be used for functions that may accept any kind of string without allowing different kinds of strings to mix. For example:</source>
          <target state="translated">これは、異なる種類の文字列を混在させることなく、任意の種類の文字列を受け入れることができる関数に使用することを意味します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="0cb324071c8468030d58c64739521f9f962b39e8" translate="yes" xml:space="preserve">
          <source>It is not necessary to call &lt;a href=&quot;#winreg.FlushKey&quot;&gt;&lt;code&gt;FlushKey()&lt;/code&gt;&lt;/a&gt; to change a key. Registry changes are flushed to disk by the registry using its lazy flusher. Registry changes are also flushed to disk at system shutdown. Unlike &lt;a href=&quot;#winreg.CloseKey&quot;&gt;&lt;code&gt;CloseKey()&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;#winreg.FlushKey&quot;&gt;&lt;code&gt;FlushKey()&lt;/code&gt;&lt;/a&gt; method returns only when all the data has been written to the registry. An application should only call &lt;a href=&quot;#winreg.FlushKey&quot;&gt;&lt;code&gt;FlushKey()&lt;/code&gt;&lt;/a&gt; if it requires absolute certainty that registry changes are on disk.</source>
          <target state="translated">キーを変更するために&lt;a href=&quot;#winreg.FlushKey&quot;&gt; &lt;code&gt;FlushKey()&lt;/code&gt; &lt;/a&gt;を呼び出す必要はありません。レジストリの変更は、レイジーフラッシャーを使用してレジストリによってディスクにフラッシュされます。レジストリの変更は、システムのシャットダウン時にもディスクにフラッシュされます。&lt;a href=&quot;#winreg.CloseKey&quot;&gt; &lt;code&gt;CloseKey()&lt;/code&gt; &lt;/a&gt;とは異なり、&lt;a href=&quot;#winreg.FlushKey&quot;&gt; &lt;code&gt;FlushKey()&lt;/code&gt; &lt;/a&gt;メソッドは、すべてのデータがレジストリに書き込まれた場合にのみ戻ります。レジストリの変更がディスク上にあることが確実に必要な場合にのみ、アプリケーションは&lt;a href=&quot;#winreg.FlushKey&quot;&gt; &lt;code&gt;FlushKey()&lt;/code&gt; を&lt;/a&gt;呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="cda47d8387a594b66517d4092e4e115ad892fbe9" translate="yes" xml:space="preserve">
          <source>It is not possible to change the encoding or newline if some data has already been read from the stream. On the other hand, changing encoding after write is possible.</source>
          <target state="translated">すでにストリームからデータが読み込まれている場合は、エンコーディングや改行を変更することはできません。一方、書き込み後にエンコーディングを変更することは可能です。</target>
        </trans-unit>
        <trans-unit id="d740e3156e0552c31a2af22e49ad436d6f79d68d" translate="yes" xml:space="preserve">
          <source>It is not possible to create truly immutable Python objects. However, by passing &lt;code&gt;frozen=True&lt;/code&gt; to the &lt;a href=&quot;#dataclasses.dataclass&quot;&gt;&lt;code&gt;dataclass()&lt;/code&gt;&lt;/a&gt; decorator you can emulate immutability. In that case, dataclasses will add &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__setattr__&quot;&gt;&lt;code&gt;__setattr__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__delattr__&quot;&gt;&lt;code&gt;__delattr__()&lt;/code&gt;&lt;/a&gt; methods to the class. These methods will raise a &lt;a href=&quot;#dataclasses.FrozenInstanceError&quot;&gt;&lt;code&gt;FrozenInstanceError&lt;/code&gt;&lt;/a&gt; when invoked.</source>
          <target state="translated">真に不変のPythonオブジェクトを作成することはできません。ただし、&lt;a href=&quot;#dataclasses.dataclass&quot;&gt; &lt;code&gt;dataclass()&lt;/code&gt; &lt;/a&gt; &lt;code&gt;frozen=True&lt;/code&gt; をdataclass（）デコレーターに渡すことで、不変性をエミュレートできます。その場合、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__setattr__&quot;&gt; &lt;code&gt;__setattr__()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__delattr__&quot;&gt; &lt;code&gt;__delattr__()&lt;/code&gt; &lt;/a&gt;メソッドをクラスに追加します。これらのメソッドを呼び出すと、&lt;a href=&quot;#dataclasses.FrozenInstanceError&quot;&gt; &lt;code&gt;FrozenInstanceError&lt;/code&gt; が&lt;/a&gt;発生します。</target>
        </trans-unit>
        <trans-unit id="8ac77add23b717e9d3af735f69af402dbc3a7c9b" translate="yes" xml:space="preserve">
          <source>It is not possible to create truly immutable Python objects. However, by passing &lt;code&gt;frozen=True&lt;/code&gt; to the &lt;a href=&quot;#dataclasses.dataclass&quot;&gt;&lt;code&gt;dataclass()&lt;/code&gt;&lt;/a&gt; decorator you can emulate immutability. In that case, dataclasses will add &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__setattr__&quot;&gt;&lt;code&gt;__setattr__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__delattr__&quot;&gt;&lt;code&gt;__delattr__()&lt;/code&gt;&lt;/a&gt; methods to the class. These methods will raise a &lt;a href=&quot;#dataclasses.FrozenInstanceError&quot;&gt;&lt;code&gt;FrozenInstanceError&lt;/code&gt;&lt;/a&gt; when invoked.</source>
          <target state="translated">It is not possible to create truly immutable Python objects. However, by passing &lt;code&gt;frozen=True&lt;/code&gt; to the &lt;a href=&quot;#dataclasses.dataclass&quot;&gt; &lt;code&gt;dataclass()&lt;/code&gt; &lt;/a&gt; decorator you can emulate immutability. In that case, dataclasses will add &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__setattr__&quot;&gt; &lt;code&gt;__setattr__()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__delattr__&quot;&gt; &lt;code&gt;__delattr__()&lt;/code&gt; &lt;/a&gt; methods to the class. These methods will raise a &lt;a href=&quot;#dataclasses.FrozenInstanceError&quot;&gt; &lt;code&gt;FrozenInstanceError&lt;/code&gt; &lt;/a&gt; when invoked.</target>
        </trans-unit>
        <trans-unit id="55c8b8a4e69ed2aef84c5a02c66e3da2e510e6b7" translate="yes" xml:space="preserve">
          <source>It is not possible to interrupt the &lt;code&gt;acquire()&lt;/code&gt; method on a lock &amp;mdash; the &lt;a href=&quot;exceptions#KeyboardInterrupt&quot;&gt;&lt;code&gt;KeyboardInterrupt&lt;/code&gt;&lt;/a&gt; exception will happen after the lock has been acquired.</source>
          <target state="translated">ロックの &lt;code&gt;acquire()&lt;/code&gt; メソッドを中断することはできません&amp;mdash; ロックが取得された後で、&lt;a href=&quot;exceptions#KeyboardInterrupt&quot;&gt; &lt;code&gt;KeyboardInterrupt&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="24ff4ffa82b2b892ee254ff767fd50df824c9ec4" translate="yes" xml:space="preserve">
          <source>It is not recommended to instantiate &lt;em&gt;StreamReader&lt;/em&gt; objects directly; use &lt;a href=&quot;#asyncio.open_connection&quot;&gt;&lt;code&gt;open_connection()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#asyncio.start_server&quot;&gt;&lt;code&gt;start_server()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;em&gt;StreamReader&lt;/em&gt;オブジェクトを直接インスタンス化することはお勧めしません。使用&lt;a href=&quot;#asyncio.open_connection&quot;&gt; &lt;code&gt;open_connection()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#asyncio.start_server&quot;&gt; &lt;code&gt;start_server()&lt;/code&gt; &lt;/a&gt;の代わりに。</target>
        </trans-unit>
        <trans-unit id="9c8eb1dc59babd5bb45a6542412c6c2dbef60bec" translate="yes" xml:space="preserve">
          <source>It is not recommended to instantiate &lt;em&gt;StreamWriter&lt;/em&gt; objects directly; use &lt;a href=&quot;#asyncio.open_connection&quot;&gt;&lt;code&gt;open_connection()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#asyncio.start_server&quot;&gt;&lt;code&gt;start_server()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;em&gt;StreamWriter&lt;/em&gt;オブジェクトを直接インスタンス化することはお勧めしません。使用&lt;a href=&quot;#asyncio.open_connection&quot;&gt; &lt;code&gt;open_connection()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#asyncio.start_server&quot;&gt; &lt;code&gt;start_server()&lt;/code&gt; &lt;/a&gt;の代わりに。</target>
        </trans-unit>
        <trans-unit id="f7c86d9042354a4a12010ffbf2e6c79a46e63619" translate="yes" xml:space="preserve">
          <source>It is occasionally desirable to catch exceptions from an &lt;code&gt;__enter__&lt;/code&gt; method implementation, &lt;em&gt;without&lt;/em&gt; inadvertently catching exceptions from the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement body or the context manager&amp;rsquo;s &lt;code&gt;__exit__&lt;/code&gt; method. By using &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt; the steps in the context management protocol can be separated slightly in order to allow this:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメント本体またはコンテキストマネージャーの &lt;code&gt;__exit__&lt;/code&gt; メソッドからの例外&lt;em&gt;を&lt;/em&gt;誤ってキャッチする&lt;em&gt;ことなく&lt;/em&gt;、 &lt;code&gt;__enter__&lt;/code&gt; メソッド実装からの例外をキャッチすることが望ましい場合があります。&lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt;を使用することで、これを可能にするためにコンテキスト管理プロトコルのステップをわずかに分離できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e25f46cefd68c273b90476861ac7cb60e39c31cc" translate="yes" xml:space="preserve">
          <source>It is occasionally desirable to catch exceptions from an &lt;code&gt;__enter__&lt;/code&gt; method implementation, &lt;em&gt;without&lt;/em&gt; inadvertently catching exceptions from the &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement body or the context manager&amp;rsquo;s &lt;code&gt;__exit__&lt;/code&gt; method. By using &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt; the steps in the context management protocol can be separated slightly in order to allow this:</source>
          <target state="translated">It is occasionally desirable to catch exceptions from an &lt;code&gt;__enter__&lt;/code&gt; method implementation, &lt;em&gt;without&lt;/em&gt; inadvertently catching exceptions from the &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt; statement body or the context manager&amp;rsquo;s &lt;code&gt;__exit__&lt;/code&gt; method. By using &lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt; the steps in the context management protocol can be separated slightly in order to allow this:</target>
        </trans-unit>
        <trans-unit id="17abe925d75df3e6434e095da340d7b3d585efbb" translate="yes" xml:space="preserve">
          <source>It is possible (but not likely) that the parser stops parsing with a successful outcome before reaching the end of the source; in this case, trailing symbols may be ignored instead of causing an error. For example, a backslash followed by two newlines may be followed by arbitrary garbage. This will be fixed once the API for the parser is better.</source>
          <target state="translated">ソースの最後に到達する前に解析が成功した場合、パーサが解析を停止することがあります(可能性は低いですが)。例えば、バックスラッシュの後に 2 つの改行が続くと、任意のガベージが続くことがあります。これはパーサーのAPIが改善されれば修正されます。</target>
        </trans-unit>
        <trans-unit id="c6d4dc91e3e444d1207eacfb1b8c9b7d64f669d0" translate="yes" xml:space="preserve">
          <source>It is possible that you want to use a different prefix for your tests. You can inform the patchers of the different prefix by setting &lt;code&gt;patch.TEST_PREFIX&lt;/code&gt;:</source>
          <target state="translated">テストに別の接頭辞を使用したい場合があります。 &lt;code&gt;patch.TEST_PREFIX&lt;/code&gt; を設定することで、異なる接頭辞をパッチャーに通知できます。</target>
        </trans-unit>
        <trans-unit id="e82dbe871f90899f7a19bde1d2a710623cd64537" translate="yes" xml:space="preserve">
          <source>It is possible to add a node with no dependencies (&lt;em&gt;predecessors&lt;/em&gt; is not provided) or to provide a dependency twice. If a node that has not been provided before is included among &lt;em&gt;predecessors&lt;/em&gt; it will be automatically added to the graph with no predecessors of its own.</source>
          <target state="translated">It is possible to add a node with no dependencies (&lt;em&gt;predecessors&lt;/em&gt; is not provided) or to provide a dependency twice. If a node that has not been provided before is included among &lt;em&gt;predecessors&lt;/em&gt; it will be automatically added to the graph with no predecessors of its own.</target>
        </trans-unit>
        <trans-unit id="b78bc02a5d38d5ce034759672aa988ab58493d7c" translate="yes" xml:space="preserve">
          <source>It is possible to assign a callable Python object that is not a ctypes type, in this case the function is assumed to return a C &lt;code&gt;int&lt;/code&gt;, and the callable will be called with this integer, allowing further processing or error checking. Using this is deprecated, for more flexible post processing or error checking use a ctypes data type as &lt;a href=&quot;#ctypes._FuncPtr.restype&quot;&gt;&lt;code&gt;restype&lt;/code&gt;&lt;/a&gt; and assign a callable to the &lt;a href=&quot;#ctypes._FuncPtr.errcheck&quot;&gt;&lt;code&gt;errcheck&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">ctypes型ではない呼び出し可能なPythonオブジェクトを割り当てることが可能です。この場合、関数はCの &lt;code&gt;int&lt;/code&gt; を返すと想定され、呼び出し可能なオブジェクトはこの整数で呼び出され、さらなる処理またはエラーチェックが可能になります。これを使用することは非推奨です。より柔軟な後処理またはエラーチェックのために、ctypesデータ型を&lt;a href=&quot;#ctypes._FuncPtr.restype&quot;&gt; &lt;code&gt;restype&lt;/code&gt; &lt;/a&gt;として使用し、呼び出し可能オブジェクトを&lt;a href=&quot;#ctypes._FuncPtr.errcheck&quot;&gt; &lt;code&gt;errcheck&lt;/code&gt; &lt;/a&gt;属性に割り当てます。</target>
        </trans-unit>
        <trans-unit id="a0369df82e65498d9a61cbbea72fb5715a7cfcd6" translate="yes" xml:space="preserve">
          <source>It is possible to construct malicious pickle data which will &lt;strong&gt;execute arbitrary code during unpickling&lt;/strong&gt;. Never unpickle data that could have come from an untrusted source, or that could have been tampered with.</source>
          <target state="translated">&lt;strong&gt;unpickle中に任意のコード&lt;/strong&gt;を&lt;strong&gt;実行する&lt;/strong&gt;悪意のあるpickleデータを構築することが可能です。信頼できないソースからのデータや改ざんされた可能性のあるデータを抽出しないでください。</target>
        </trans-unit>
        <trans-unit id="6ffefb08180256f54248ce087946347d3dc7ebe6" translate="yes" xml:space="preserve">
          <source>It is possible to crash the Python interpreter when loading a database with a sufficiently large/complex entry due to stack depth limitations in Python&amp;rsquo;s AST compiler.</source>
          <target state="translated">PythonのASTコンパイラのスタック深度の制限により、十分に大きい/複雑なエントリを持つデータベースをロードすると、Pythonインタープリタがクラッシュする可能性があります。</target>
        </trans-unit>
        <trans-unit id="1e9b153eb1d2d572d629baf0a1dcd8a08f67d846" translate="yes" xml:space="preserve">
          <source>It is possible to crash the Python interpreter with a sufficiently large/complex string due to stack depth limitations in Python&amp;rsquo;s AST compiler.</source>
          <target state="translated">PythonのASTコンパイラのスタック深度の制限により、Pythonインタプリタが十分に大きく複雑な文字列でクラッシュする可能性があります。</target>
        </trans-unit>
        <trans-unit id="667abe8e68a549284d45ff70fd062fc2cf5fac92" translate="yes" xml:space="preserve">
          <source>It is possible to crash the Python interpreter with a sufficiently large/complex string when compiling to an AST object due to stack depth limitations in Python&amp;rsquo;s AST compiler.</source>
          <target state="translated">PythonのASTコンパイラのスタック深度の制限により、ASTオブジェクトにコンパイルするときに、十分に大きい/複雑な文字列でPythonインタープリタをクラッシュさせる可能性があります。</target>
        </trans-unit>
        <trans-unit id="3f5b20068a1b037beccc1359b62759b16ab15b78" translate="yes" xml:space="preserve">
          <source>It is possible to create shared objects using shared memory which can be inherited by child processes.</source>
          <target state="translated">子プロセスが継承できる共有メモリを使って、共有オブジェクトを作成することができます。</target>
        </trans-unit>
        <trans-unit id="9c5f47167a007557bb807d93cb531c2ebd09d5d5" translate="yes" xml:space="preserve">
          <source>It is possible to create structures and unions containing bit fields. Bit fields are only possible for integer fields, the bit width is specified as the third item in the &lt;code&gt;_fields_&lt;/code&gt; tuples:</source>
          <target state="translated">ビットフィールドを含む構造体と共用体を作成することが可能です。ビットフィールドは整数フィールドでのみ使用でき、ビット幅は &lt;code&gt;_fields_&lt;/code&gt; タプルの3番目の項目として指定されます。</target>
        </trans-unit>
        <trans-unit id="db8a275af694f0dd377aeb7a61522ec616a0f705" translate="yes" xml:space="preserve">
          <source>It is possible to declare the return type of a callable without specifying the call signature by substituting a literal ellipsis for the list of arguments in the type hint: &lt;code&gt;Callable[..., ReturnType]&lt;/code&gt;.</source>
          <target state="translated">型ヒントの引数のリストをリテラルの省略記号で置き換えることにより、呼び出し署名を指定せずに呼び出し可能オブジェクトの戻りの型を宣言することができます： &lt;code&gt;Callable[..., ReturnType]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="66dbfac9c9ecbf0f3ba234b858bf45197be29989" translate="yes" xml:space="preserve">
          <source>It is possible to define sub-subclasses of structure types, they inherit the fields of the base class plus the &lt;a href=&quot;#ctypes.Structure._fields_&quot;&gt;&lt;code&gt;_fields_&lt;/code&gt;&lt;/a&gt; defined in the sub-subclass, if any.</source>
          <target state="translated">構造タイプのサブサブクラスを定義することは可能で、それらは基本クラスのフィールドに加えて、サブサブクラスで定義された&lt;a href=&quot;#ctypes.Structure._fields_&quot;&gt; &lt;code&gt;_fields_&lt;/code&gt; が&lt;/a&gt;あればそれを継承します。</target>
        </trans-unit>
        <trans-unit id="52e02a5e8d810a438d07f3c505bb28740bdb60d9" translate="yes" xml:space="preserve">
          <source>It is possible to define sub-subclasses of structures, they inherit the fields of the base class. If the subclass definition has a separate &lt;a href=&quot;#ctypes.Structure._fields_&quot;&gt;&lt;code&gt;_fields_&lt;/code&gt;&lt;/a&gt; variable, the fields specified in this are appended to the fields of the base class.</source>
          <target state="translated">構造のサブサブクラスを定義することが可能で、それらは基本クラスのフィールドを継承します。サブクラス定義に個別の&lt;a href=&quot;#ctypes.Structure._fields_&quot;&gt; &lt;code&gt;_fields_&lt;/code&gt; &lt;/a&gt;変数がある場合、これで指定されたフィールドは、基本クラスのフィールドに追加されます。</target>
        </trans-unit>
        <trans-unit id="479dec54822844d5952dff407e0c75c4abf7dfbc" translate="yes" xml:space="preserve">
          <source>It is possible to define the &lt;a href=&quot;#ctypes.Structure._fields_&quot;&gt;&lt;code&gt;_fields_&lt;/code&gt;&lt;/a&gt; class variable &lt;em&gt;after&lt;/em&gt; the class statement that defines the Structure subclass, this allows creating data types that directly or indirectly reference themselves:</source>
          <target state="translated">構造サブクラスを定義するクラスステートメントの&lt;em&gt;後に&lt;/em&gt;&lt;a href=&quot;#ctypes.Structure._fields_&quot;&gt; &lt;code&gt;_fields_&lt;/code&gt; &lt;/a&gt;クラス変数を定義することが可能です。これにより、直接または間接的に自分自身を参照するデータ型を作成できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="41dc430c996cb5dba1d5b954f315a11cad50c234" translate="yes" xml:space="preserve">
          <source>It is possible to modify how Enum members are pickled/unpickled by defining &lt;a href=&quot;pickle#object.__reduce_ex__&quot;&gt;&lt;code&gt;__reduce_ex__()&lt;/code&gt;&lt;/a&gt; in the enumeration class.</source>
          <target state="translated">列挙型クラスで&lt;a href=&quot;pickle#object.__reduce_ex__&quot;&gt; &lt;code&gt;__reduce_ex__()&lt;/code&gt; &lt;/a&gt;定義することにより、Enumメンバーがピクルされたりピクルされなかったりする方法を変更できます。</target>
        </trans-unit>
        <trans-unit id="5c6a93b23d9d0ef75736ca0a792ff0ce4b6aa42c" translate="yes" xml:space="preserve">
          <source>It is possible to provide a setup statement that is executed only once at the beginning:</source>
          <target state="translated">最初に一度だけ実行される設定文を提供することが可能です。</target>
        </trans-unit>
        <trans-unit id="4aaa2207bb2559e1c452bea74e3b02c4226e1a08" translate="yes" xml:space="preserve">
          <source>It is possible to run a manager server on one machine and have clients use it from other machines (assuming that the firewalls involved allow it).</source>
          <target state="translated">1台のマシン上でマネージャーサーバーを実行し、他のマシンからクライアントに使用させることが可能です(関係するファイアウォールが許可していることを前提とします)。</target>
        </trans-unit>
        <trans-unit id="57b2132f9f4ecae5672296c54e7165dcd43d470b" translate="yes" xml:space="preserve">
          <source>It is possible to specify the required argument types of functions exported from DLLs by setting the &lt;code&gt;argtypes&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;argtypes&lt;/code&gt; 属性を設定することにより、DLLからエクスポートされた関数の必須の引数タイプを指定することが可能です。</target>
        </trans-unit>
        <trans-unit id="870efee18a65f0470db8320acfa65e0397dea3dc" translate="yes" xml:space="preserve">
          <source>It is preferred that tests that use the &lt;a href=&quot;unittest#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; module follow a few guidelines. One is to name the test module by starting it with &lt;code&gt;test_&lt;/code&gt; and end it with the name of the module being tested. The test methods in the test module should start with &lt;code&gt;test_&lt;/code&gt; and end with a description of what the method is testing. This is needed so that the methods are recognized by the test driver as test methods. Also, no documentation string for the method should be included. A comment (such as &lt;code&gt;# Tests function returns only True or False&lt;/code&gt;) should be used to provide documentation for test methods. This is done because documentation strings get printed out if they exist and thus what test is being run is not stated.</source>
          <target state="translated">&lt;a href=&quot;unittest#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;モジュールを使用するテストは、いくつかのガイドラインに従うことが推奨されます。 1つは、 &lt;code&gt;test_&lt;/code&gt; で開始してテストモジュールに名前を付け、テストするモジュールの名前で終了することです。テストモジュールのテストメソッドは、 &lt;code&gt;test_&lt;/code&gt; で始まり、メソッドがテストする対象の説明で終わる必要があります。これは、メソッドがテストドライバーによってテストメソッドとして認識されるために必要です。また、メソッドの説明文字列は含めないでください。コメント（ &lt;code&gt;# Tests function returns only True or False&lt;/code&gt; など）を使用して、テストメソッドのドキュメントを提供する必要があります。これが行われるのは、ドキュメント文字列が存在する場合はそれが出力され、実行されているテストが記述されていないためです。</target>
        </trans-unit>
        <trans-unit id="4437dd782d3aa5f4d33ce55912438ab2de9ddb49" translate="yes" xml:space="preserve">
          <source>It is probably best to stick to using queues or pipes for communication between processes rather than using the lower level synchronization primitives.</source>
          <target state="translated">低レベルの同期プリミティブを使うよりも、プロセス間の通信にキューやパイプを使う方が良いかもしれません。</target>
        </trans-unit>
        <trans-unit id="3513dd531e92db2dd18418ab9200aa8630263c69" translate="yes" xml:space="preserve">
          <source>It is recommended that you use TestCase implementations to group tests together according to the features they test. &lt;a href=&quot;#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; provides a mechanism for this: the &lt;em&gt;test suite&lt;/em&gt;, represented by &lt;a href=&quot;#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s &lt;a href=&quot;#unittest.TestSuite&quot;&gt;&lt;code&gt;TestSuite&lt;/code&gt;&lt;/a&gt; class. In most cases, calling &lt;a href=&quot;#unittest.main&quot;&gt;&lt;code&gt;unittest.main()&lt;/code&gt;&lt;/a&gt; will do the right thing and collect all the module&amp;rsquo;s test cases for you and execute them.</source>
          <target state="translated">TestCase実装を使用して、テストする機能に従ってテストをグループ化することをお勧めします。&lt;a href=&quot;#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;は、このためのメカニズムを提供します：&lt;a href=&quot;#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;#unittest.TestSuite&quot;&gt; &lt;code&gt;TestSuite&lt;/code&gt; &lt;/a&gt;クラスによって表される&lt;em&gt;テストスイート&lt;/em&gt;。ほとんどの場合、&lt;a href=&quot;#unittest.main&quot;&gt; &lt;code&gt;unittest.main()&lt;/code&gt; &lt;/a&gt;を呼び出すと正しい動作が行われ、モジュールのすべてのテストケースが収集されて実行されます。</target>
        </trans-unit>
        <trans-unit id="7ee962c8bcd7baffe9ba130a3118c335c829f4d0" translate="yes" xml:space="preserve">
          <source>It is responsible for calling all the cleanup functions added by &lt;a href=&quot;#unittest.TestCase.addCleanup&quot;&gt;&lt;code&gt;addCleanup()&lt;/code&gt;&lt;/a&gt;. If you need cleanup functions to be called &lt;em&gt;prior&lt;/em&gt; to &lt;a href=&quot;#unittest.TestCase.tearDown&quot;&gt;&lt;code&gt;tearDown()&lt;/code&gt;&lt;/a&gt; then you can call &lt;a href=&quot;#unittest.TestCase.doCleanups&quot;&gt;&lt;code&gt;doCleanups()&lt;/code&gt;&lt;/a&gt; yourself.</source>
          <target state="translated">&lt;a href=&quot;#unittest.TestCase.addCleanup&quot;&gt; &lt;code&gt;addCleanup()&lt;/code&gt; &lt;/a&gt;によって追加されたすべてのクリーンアップ関数の呼び出しを担当します。&lt;a href=&quot;#unittest.TestCase.tearDown&quot;&gt; &lt;code&gt;tearDown()&lt;/code&gt; の&lt;/a&gt;&lt;em&gt;前&lt;/em&gt;に呼び出すクリーンアップ関数が必要な場合は、自分で&lt;a href=&quot;#unittest.TestCase.doCleanups&quot;&gt; &lt;code&gt;doCleanups()&lt;/code&gt; を&lt;/a&gt;呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="66da881a51744abc2d365ae7a19e8866de644b04" translate="yes" xml:space="preserve">
          <source>It is responsible for calling all the cleanup functions added by &lt;code&gt;addCleanupClass()&lt;/code&gt;. If you need cleanup functions to be called &lt;em&gt;prior&lt;/em&gt; to &lt;a href=&quot;#unittest.TestCase.tearDownClass&quot;&gt;&lt;code&gt;tearDownClass()&lt;/code&gt;&lt;/a&gt; then you can call &lt;code&gt;doCleanupsClass()&lt;/code&gt; yourself.</source>
          <target state="translated">&lt;code&gt;addCleanupClass()&lt;/code&gt; によって追加されたすべてのクリーンアップ関数の呼び出しを担当します。&lt;a href=&quot;#unittest.TestCase.tearDownClass&quot;&gt; &lt;code&gt;tearDownClass()&lt;/code&gt; の&lt;/a&gt;&lt;em&gt;前&lt;/em&gt;に呼び出すクリーンアップ関数が必要な場合は、自分で &lt;code&gt;doCleanupsClass()&lt;/code&gt; を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="44bfa96d5424e117886453b18001094b089f64bd" translate="yes" xml:space="preserve">
          <source>It is responsible for calling all the cleanup functions added by &lt;code&gt;addCleanupModule()&lt;/code&gt;. If you need cleanup functions to be called &lt;em&gt;prior&lt;/em&gt; to &lt;code&gt;tearDownModule()&lt;/code&gt; then you can call &lt;a href=&quot;#unittest.doModuleCleanups&quot;&gt;&lt;code&gt;doModuleCleanups()&lt;/code&gt;&lt;/a&gt; yourself.</source>
          <target state="translated">&lt;code&gt;addCleanupModule()&lt;/code&gt; によって追加されたすべてのクリーンアップ関数の呼び出しを担当します。 &lt;code&gt;tearDownModule()&lt;/code&gt; の&lt;em&gt;前&lt;/em&gt;にクリーンアップ関数を呼び出す必要がある場合は、&lt;a href=&quot;#unittest.doModuleCleanups&quot;&gt; &lt;code&gt;doModuleCleanups()&lt;/code&gt; を&lt;/a&gt;自分で呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="40d076e54c14795bf1009ae955624fb9ee075980" translate="yes" xml:space="preserve">
          <source>It is set for &lt;code&gt;SELECT&lt;/code&gt; statements without any matching rows as well.</source>
          <target state="translated">一致する行がない &lt;code&gt;SELECT&lt;/code&gt; ステートメントにも設定されます。</target>
        </trans-unit>
        <trans-unit id="e4892c14dd8e03e95f7b9a46c2b927e82c3de81e" translate="yes" xml:space="preserve">
          <source>It is similar to &lt;a href=&quot;#opcode-END_FINALLY&quot;&gt;&lt;code&gt;END_FINALLY&lt;/code&gt;&lt;/a&gt;, but doesn&amp;rsquo;t change the bytecode counter nor raise an exception. Used for implementing &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#break&quot;&gt;&lt;code&gt;break&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#continue&quot;&gt;&lt;code&gt;continue&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#return&quot;&gt;&lt;code&gt;return&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#finally&quot;&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/a&gt; block.</source>
          <target state="translated">&lt;a href=&quot;#opcode-END_FINALLY&quot;&gt; &lt;code&gt;END_FINALLY&lt;/code&gt; &lt;/a&gt;に似ていますが、バイトコードカウンターを変更したり、例外を発生させたりしません。&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#finally&quot;&gt; &lt;code&gt;finally&lt;/code&gt; &lt;/a&gt;ブロックで&lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#break&quot;&gt; &lt;code&gt;break&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#continue&quot;&gt; &lt;code&gt;continue&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;https://docs.python.org/3.8/reference/simple_stmts.html#return&quot;&gt; &lt;code&gt;return&lt;/code&gt; &lt;/a&gt;を実装するために使用されます。</target>
        </trans-unit>
        <trans-unit id="42d9754d1dda336bfe25a9c6e63c2992d8307a7e" translate="yes" xml:space="preserve">
          <source>It is straightforward to create an ordered dictionary variant that remembers the order the keys were &lt;em&gt;last&lt;/em&gt; inserted. If a new entry overwrites an existing entry, the original insertion position is changed and moved to the end:</source>
          <target state="translated">キーが&lt;em&gt;最後に&lt;/em&gt;挿入された順序を記憶する順序付けられた辞書のバリアントを作成することは簡単です。新しいエントリが既存のエントリを上書きする場合、元の挿入位置が変更され、末尾に移動します。</target>
        </trans-unit>
        <trans-unit id="b290678be018032e40bcd30baa36d13bcef66f17" translate="yes" xml:space="preserve">
          <source>It is the application&amp;rsquo;s responsibility to ensure that all whitespace and special characters are quoted appropriately to avoid &lt;a href=&quot;https://en.wikipedia.org/wiki/Shell_injection#Shell_injection&quot;&gt;shell injection&lt;/a&gt; vulnerabilities. The &lt;a href=&quot;shlex#shlex.quote&quot;&gt;&lt;code&gt;shlex.quote()&lt;/code&gt;&lt;/a&gt; function can be used to properly escape whitespace and special characters in strings that are going to be used to construct shell commands.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Shell_injection#Shell_injection&quot;&gt;シェルインジェクションの&lt;/a&gt;脆弱性を回避するために、すべての空白と特殊文字が適切に引用符で囲まれるようにするのは、アプリケーションの責任です。&lt;a href=&quot;shlex#shlex.quote&quot;&gt; &lt;code&gt;shlex.quote()&lt;/code&gt; &lt;/a&gt;関数は、適切にシェルコマンドを構築するために使用されようとしている文字列に空白や特殊文字をエスケープするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="83308bc4ef3c9f055207277d114b19f86e753316" translate="yes" xml:space="preserve">
          <source>It is the application&amp;rsquo;s responsibility to ensure that all whitespace and special characters are quoted appropriately to avoid &lt;a href=&quot;https://en.wikipedia.org/wiki/Shell_injection#Shell_injection&quot;&gt;shell injection&lt;/a&gt; vulnerabilities. The &lt;a href=&quot;shlex#shlex.quote&quot;&gt;&lt;code&gt;shlex.quote()&lt;/code&gt;&lt;/a&gt; function can be used to properly escape whitespace and special shell characters in strings that are going to be used to construct shell commands.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Shell_injection#Shell_injection&quot;&gt;シェルインジェクションの&lt;/a&gt;脆弱性を回避するために、すべての空白と特殊文字が適切に引用符で囲まれるようにするのは、アプリケーションの責任です。&lt;a href=&quot;shlex#shlex.quote&quot;&gt; &lt;code&gt;shlex.quote()&lt;/code&gt; &lt;/a&gt;関数は、適切にシェルコマンドを構築するために使用されようとしている文字列内の空白や特殊なシェル文字をエスケープするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="ba77524bde6cf6c11d179f96eb65e17908025854" translate="yes" xml:space="preserve">
          <source>It is written as &lt;code&gt;Ellipsis&lt;/code&gt; or &lt;code&gt;...&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Ellipsis&lt;/code&gt; または &lt;code&gt;...&lt;/code&gt; と書かれています。</target>
        </trans-unit>
        <trans-unit id="5c82f78122d7edace8ca573121d93f7a6333cafc" translate="yes" xml:space="preserve">
          <source>It is written as &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;None&lt;/code&gt; と書かれています。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
