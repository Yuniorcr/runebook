<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="python">
    <body>
      <group id="python">
        <trans-unit id="b301e64f6be02c979b39c0a7f2f8742151baec4c" translate="yes" xml:space="preserve">
          <source>An abstract method for finding a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-module-spec&quot;&gt;spec&lt;/a&gt; for the specified module. If this is a top-level import, &lt;em&gt;path&lt;/em&gt; will be &lt;code&gt;None&lt;/code&gt;. Otherwise, this is a search for a subpackage or module and &lt;em&gt;path&lt;/em&gt; will be the value of &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__path__&quot;&gt;&lt;code&gt;__path__&lt;/code&gt;&lt;/a&gt; from the parent package. If a spec cannot be found, &lt;code&gt;None&lt;/code&gt; is returned. When passed in, &lt;code&gt;target&lt;/code&gt; is a module object that the finder may use to make a more educated guess about what spec to return. &lt;a href=&quot;#importlib.util.spec_from_loader&quot;&gt;&lt;code&gt;importlib.util.spec_from_loader()&lt;/code&gt;&lt;/a&gt; may be useful for implementing concrete &lt;code&gt;MetaPathFinders&lt;/code&gt;.</source>
          <target state="translated">指定されたモジュールの&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-module-spec&quot;&gt;仕様&lt;/a&gt;を見つけるための抽象メソッド。これがトップレベルのインポートである場合、&lt;em&gt;パス&lt;/em&gt;は &lt;code&gt;None&lt;/code&gt; になります。それ以外の場合、これはサブパッケージまたはモジュールの検索であり、&lt;em&gt;パス&lt;/em&gt;は親パッケージの&lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__path__&quot;&gt; &lt;code&gt;__path__&lt;/code&gt; &lt;/a&gt;の値になります。スペックが見つからない場合は、 &lt;code&gt;None&lt;/code&gt; が返されます。渡された場合、 &lt;code&gt;target&lt;/code&gt; は、ファインダーが使用するモジュールオブジェクトであり、どの仕様を返すかについてより知識のある推測を行うことができます。&lt;a href=&quot;#importlib.util.spec_from_loader&quot;&gt; &lt;code&gt;importlib.util.spec_from_loader()&lt;/code&gt; &lt;/a&gt;は、具体的な &lt;code&gt;MetaPathFinders&lt;/code&gt; を実装するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="dd63589c5c5bc876ea90a7b05def4d9308abd0ce" translate="yes" xml:space="preserve">
          <source>An abstract method for finding a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-module-spec&quot;&gt;spec&lt;/a&gt; for the specified module. The finder will search for the module only within the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-entry&quot;&gt;path entry&lt;/a&gt; to which it is assigned. If a spec cannot be found, &lt;code&gt;None&lt;/code&gt; is returned. When passed in, &lt;code&gt;target&lt;/code&gt; is a module object that the finder may use to make a more educated guess about what spec to return. &lt;a href=&quot;#importlib.util.spec_from_loader&quot;&gt;&lt;code&gt;importlib.util.spec_from_loader()&lt;/code&gt;&lt;/a&gt; may be useful for implementing concrete &lt;code&gt;PathEntryFinders&lt;/code&gt;.</source>
          <target state="translated">指定されたモジュールの&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-module-spec&quot;&gt;仕様&lt;/a&gt;を見つけるための抽象メソッド。ファインダーは、モジュールが割り当てられている&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-path-entry&quot;&gt;パスエントリ&lt;/a&gt;内でのみモジュールを検索します。スペックが見つからない場合は、 &lt;code&gt;None&lt;/code&gt; が返されます。渡された場合、 &lt;code&gt;target&lt;/code&gt; は、ファインダーが使用するモジュールオブジェクトであり、どのスペックを返すかについてより知識のある推測を行うことができます。&lt;a href=&quot;#importlib.util.spec_from_loader&quot;&gt; &lt;code&gt;importlib.util.spec_from_loader()&lt;/code&gt; &lt;/a&gt;は、具体的な &lt;code&gt;PathEntryFinders&lt;/code&gt; の実装に役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="4ec7fa64597ec4d9362aa636f6c3e9342c5c3475" translate="yes" xml:space="preserve">
          <source>An abstract method for finding a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; for the specified module. Originally specified in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt;, this method was meant for use in &lt;a href=&quot;sys#sys.meta_path&quot;&gt;&lt;code&gt;sys.meta_path&lt;/code&gt;&lt;/a&gt; and in the path-based import subsystem.</source>
          <target state="translated">指定されたモジュールの&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-loader&quot;&gt;ローダー&lt;/a&gt;を見つけるための抽象メソッド。本来で指定&lt;a href=&quot;https://www.python.org/dev/peps/pep-0302&quot; id=&quot;index-12&quot;&gt;&lt;strong&gt;PEP 302&lt;/strong&gt;&lt;/a&gt;、この方法は、における使用のために意図された&lt;a href=&quot;sys#sys.meta_path&quot;&gt; &lt;code&gt;sys.meta_path&lt;/code&gt; &lt;/a&gt;とパスベースのインポート・サブシステムに。</target>
        </trans-unit>
        <trans-unit id="a078fcb028abf664294af6a6107d24c54ea703c8" translate="yes" xml:space="preserve">
          <source>An abstract method for finding a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-module-spec&quot;&gt;spec&lt;/a&gt; for the specified module. If this is a top-level import, &lt;em&gt;path&lt;/em&gt; will be &lt;code&gt;None&lt;/code&gt;. Otherwise, this is a search for a subpackage or module and &lt;em&gt;path&lt;/em&gt; will be the value of &lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#__path__&quot;&gt;&lt;code&gt;__path__&lt;/code&gt;&lt;/a&gt; from the parent package. If a spec cannot be found, &lt;code&gt;None&lt;/code&gt; is returned. When passed in, &lt;code&gt;target&lt;/code&gt; is a module object that the finder may use to make a more educated guess about what spec to return. &lt;a href=&quot;#importlib.util.spec_from_loader&quot;&gt;&lt;code&gt;importlib.util.spec_from_loader()&lt;/code&gt;&lt;/a&gt; may be useful for implementing concrete &lt;code&gt;MetaPathFinders&lt;/code&gt;.</source>
          <target state="translated">指定されたモジュールの&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-module-spec&quot;&gt;仕様&lt;/a&gt;を見つけるための抽象的なメソッド。これがトップレベルのインポートである場合、&lt;em&gt;パス&lt;/em&gt;は &lt;code&gt;None&lt;/code&gt; になります。それ以外の場合、これはサブパッケージまたはモジュールの検索であり、&lt;em&gt;パス&lt;/em&gt;は親パッケージからの&lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#__path__&quot;&gt; &lt;code&gt;__path__&lt;/code&gt; &lt;/a&gt;の値になります。仕様が見つからない場合は、 &lt;code&gt;None&lt;/code&gt; が返されます。渡された場合、 &lt;code&gt;target&lt;/code&gt; は、ファインダーが返す仕様についてより知識のある推測を行うために使用できるモジュールオブジェクトです。&lt;a href=&quot;#importlib.util.spec_from_loader&quot;&gt; &lt;code&gt;importlib.util.spec_from_loader()&lt;/code&gt; &lt;/a&gt;は、具体的な &lt;code&gt;MetaPathFinders&lt;/code&gt; の実装に役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="38df08fcaf14d4d9addb424c44c752bc5b9d7929" translate="yes" xml:space="preserve">
          <source>An abstract method for finding a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-module-spec&quot;&gt;spec&lt;/a&gt; for the specified module. The finder will search for the module only within the &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-entry&quot;&gt;path entry&lt;/a&gt; to which it is assigned. If a spec cannot be found, &lt;code&gt;None&lt;/code&gt; is returned. When passed in, &lt;code&gt;target&lt;/code&gt; is a module object that the finder may use to make a more educated guess about what spec to return. &lt;a href=&quot;#importlib.util.spec_from_loader&quot;&gt;&lt;code&gt;importlib.util.spec_from_loader()&lt;/code&gt;&lt;/a&gt; may be useful for implementing concrete &lt;code&gt;PathEntryFinders&lt;/code&gt;.</source>
          <target state="translated">指定されたモジュールの&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-module-spec&quot;&gt;仕様&lt;/a&gt;を見つけるための抽象的なメソッド。ファインダーは、モジュールが割り当てられている&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-path-entry&quot;&gt;パスエントリ&lt;/a&gt;内でのみモジュールを検索します。仕様が見つからない場合は、 &lt;code&gt;None&lt;/code&gt; が返されます。渡されると、 &lt;code&gt;target&lt;/code&gt; は、ファインダーが返す仕様についてより知識のある推測を行うために使用できるモジュールオブジェクトです。&lt;a href=&quot;#importlib.util.spec_from_loader&quot;&gt; &lt;code&gt;importlib.util.spec_from_loader()&lt;/code&gt; &lt;/a&gt;は、具体的な &lt;code&gt;PathEntryFinders&lt;/code&gt; の実装に役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="b518cc20074a6e012522371b44d4863fba9c6708" translate="yes" xml:space="preserve">
          <source>An abstract method that executes the module in its own namespace when a module is imported or reloaded. The module should already be initialized when &lt;code&gt;exec_module()&lt;/code&gt; is called. When this method exists, &lt;a href=&quot;#importlib.abc.Loader.create_module&quot;&gt;&lt;code&gt;create_module()&lt;/code&gt;&lt;/a&gt; must be defined.</source>
          <target state="translated">モジュールがインポートまたは再ロードされたときに、独自の名前空間でモジュールを実行する抽象メソッド。 &lt;code&gt;exec_module()&lt;/code&gt; が呼び出されたとき、モジュールはすでに初期化されているはずです。このメソッドが存在する場合、&lt;a href=&quot;#importlib.abc.Loader.create_module&quot;&gt; &lt;code&gt;create_module()&lt;/code&gt; を&lt;/a&gt;定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="e6bf9688b7b004247ae61425719c8753e917df0c" translate="yes" xml:space="preserve">
          <source>An abstract method that is to return the value of &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__file__&quot;&gt;&lt;code&gt;__file__&lt;/code&gt;&lt;/a&gt; for the specified module. If no path is available, &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">指定されたモジュールの&lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__file__&quot;&gt; &lt;code&gt;__file__&lt;/code&gt; &lt;/a&gt;の値を返す抽象メソッド。使用可能なパスがない場合、&lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="20672959b0be97ef0818210d53eef4fcf8b86803" translate="yes" xml:space="preserve">
          <source>An abstract method that is to return the value of &lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#__file__&quot;&gt;&lt;code&gt;__file__&lt;/code&gt;&lt;/a&gt; for the specified module. If no path is available, &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">指定されたモジュールの&lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#__file__&quot;&gt; &lt;code&gt;__file__&lt;/code&gt; &lt;/a&gt;の値を返す抽象メソッド。使用可能なパスがない場合、&lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="9546a7a2c25822b3aefc76fd55131bcac817f789" translate="yes" xml:space="preserve">
          <source>An abstract method to return a true value if the module is a package, a false value otherwise. &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; is raised if the &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; cannot find the module.</source>
          <target state="translated">モジュールがパッケージの場合はtrue値を、それ以外の場合はfalse値を返す抽象メソッド。&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-loader&quot;&gt;ローダー&lt;/a&gt;がモジュールを見つけられない場合、&lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="edbcbbce2983a4d0aa1b211eba4bdaace496fbb5" translate="yes" xml:space="preserve">
          <source>An abstract method to return a true value if the module is a package, a false value otherwise. &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; is raised if the &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-loader&quot;&gt;loader&lt;/a&gt; cannot find the module.</source>
          <target state="translated">モジュールがパッケージの場合はtrue値を返し、それ以外の場合はfalse値を返す抽象メソッド。&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-loader&quot;&gt;ローダー&lt;/a&gt;がモジュールを見つけられない場合、&lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="800c0095cbad1a18da2d314befc33c5c39978794" translate="yes" xml:space="preserve">
          <source>An abstract method to return the bytes for the data located at &lt;em&gt;path&lt;/em&gt;. Loaders that have a file-like storage back-end that allows storing arbitrary data can implement this abstract method to give direct access to the data stored. &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is to be raised if the &lt;em&gt;path&lt;/em&gt; cannot be found. The &lt;em&gt;path&lt;/em&gt; is expected to be constructed using a module&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__file__&quot;&gt;&lt;code&gt;__file__&lt;/code&gt;&lt;/a&gt; attribute or an item from a package&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__path__&quot;&gt;&lt;code&gt;__path__&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;pathに&lt;/em&gt;あるデータのバイトを返す抽象メソッド。任意のデータを格納できるファイルのようなストレージバックエンドを持つローダーは、この抽象メソッドを実装して、格納されているデータに直接アクセスできます。&lt;em&gt;パス&lt;/em&gt;が見つからない場合、&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;が発生します。&lt;em&gt;パスは&lt;/em&gt;、モジュールの使用して構築されることが期待される&lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__file__&quot;&gt; &lt;code&gt;__file__&lt;/code&gt; の&lt;/a&gt;属性またはパッケージのアイテムから&lt;a href=&quot;https://docs.python.org/3.8/reference/import.html#__path__&quot;&gt; &lt;code&gt;__path__&lt;/code&gt; を&lt;/a&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="09482733ccd9350dc7770f132c5a1e5936dc7a07" translate="yes" xml:space="preserve">
          <source>An abstract method to return the bytes for the data located at &lt;em&gt;path&lt;/em&gt;. Loaders that have a file-like storage back-end that allows storing arbitrary data can implement this abstract method to give direct access to the data stored. &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is to be raised if the &lt;em&gt;path&lt;/em&gt; cannot be found. The &lt;em&gt;path&lt;/em&gt; is expected to be constructed using a module&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#__file__&quot;&gt;&lt;code&gt;__file__&lt;/code&gt;&lt;/a&gt; attribute or an item from a package&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#__path__&quot;&gt;&lt;code&gt;__path__&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;パスに&lt;/em&gt;あるデータのバイトを返す抽象メソッド。任意のデータを格納できるファイルのようなストレージバックエンドを持つローダーは、この抽象メソッドを実装して、格納されているデータに直接アクセスできます。&lt;em&gt;パス&lt;/em&gt;が見つからない場合、&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;が発生します。&lt;em&gt;パスは&lt;/em&gt;、モジュールの使用して構築されることが期待される&lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#__file__&quot;&gt; &lt;code&gt;__file__&lt;/code&gt; の&lt;/a&gt;属性またはパッケージのアイテムから&lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#__path__&quot;&gt; &lt;code&gt;__path__&lt;/code&gt; を&lt;/a&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="563d61fc457a3bfb950c5833afc59f047a9c4836" translate="yes" xml:space="preserve">
          <source>An abstract method to return the source of a module. It is returned as a text string using &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-universal-newlines&quot;&gt;universal newlines&lt;/a&gt;, translating all recognized line separators into &lt;code&gt;'\n'&lt;/code&gt; characters. Returns &lt;code&gt;None&lt;/code&gt; if no source is available (e.g. a built-in module). Raises &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; if the loader cannot find the module specified.</source>
          <target state="translated">モジュールのソースを返す抽象メソッド。認識されたすべての行区切り文字を &lt;code&gt;'\n'&lt;/code&gt; 文字に変換し、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-universal-newlines&quot;&gt;ユニバーサル改行&lt;/a&gt;を使用してテキスト文字列として返されます。ソースが利用できない場合（たとえば、組み込みモジュール）、 &lt;code&gt;None&lt;/code&gt; を返します。調達&lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt;ローダは、指定されたモジュールを見つけることができない場合。</target>
        </trans-unit>
        <trans-unit id="6b19fc2d056eee4a7eec499bcdca3418e2a9c84c" translate="yes" xml:space="preserve">
          <source>An abstract method to return the source of a module. It is returned as a text string using &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-universal-newlines&quot;&gt;universal newlines&lt;/a&gt;, translating all recognized line separators into &lt;code&gt;'\n'&lt;/code&gt; characters. Returns &lt;code&gt;None&lt;/code&gt; if no source is available (e.g. a built-in module). Raises &lt;a href=&quot;exceptions#ImportError&quot;&gt;&lt;code&gt;ImportError&lt;/code&gt;&lt;/a&gt; if the loader cannot find the module specified.</source>
          <target state="translated">モジュールのソースを返す抽象メソッド。これは、&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-universal-newlines&quot;&gt;ユニバーサル改行&lt;/a&gt;を使用してテキスト文字列として返され、認識されたすべての行区切り文字を &lt;code&gt;'\n'&lt;/code&gt; 文字に変換します。使用可能なソースがない場合（組み込みモジュールなど）は &lt;code&gt;None&lt;/code&gt; を返します。調達&lt;a href=&quot;exceptions#ImportError&quot;&gt; &lt;code&gt;ImportError&lt;/code&gt; &lt;/a&gt;ローダは、指定されたモジュールを見つけることができない場合。</target>
        </trans-unit>
        <trans-unit id="6dc181f14f2a6fd494fcdfa6748662a11c18b1fd" translate="yes" xml:space="preserve">
          <source>An abstract syntax tree can be generated by passing &lt;a href=&quot;#ast.PyCF_ONLY_AST&quot;&gt;&lt;code&gt;ast.PyCF_ONLY_AST&lt;/code&gt;&lt;/a&gt; as a flag to the &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt; built-in function, or using the &lt;a href=&quot;#ast.parse&quot;&gt;&lt;code&gt;parse()&lt;/code&gt;&lt;/a&gt; helper provided in this module. The result will be a tree of objects whose classes all inherit from &lt;a href=&quot;#ast.AST&quot;&gt;&lt;code&gt;ast.AST&lt;/code&gt;&lt;/a&gt;. An abstract syntax tree can be compiled into a Python code object using the built-in &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">抽象構文木は、&lt;a href=&quot;#ast.PyCF_ONLY_AST&quot;&gt; &lt;code&gt;ast.PyCF_ONLY_AST&lt;/code&gt; &lt;/a&gt;をフラグとして&lt;a href=&quot;functions#compile&quot;&gt; &lt;code&gt;compile()&lt;/code&gt; &lt;/a&gt;組み込み関数に渡すか、このモジュールで提供される&lt;a href=&quot;#ast.parse&quot;&gt; &lt;code&gt;parse()&lt;/code&gt; &lt;/a&gt;ヘルパーを使用して生成できます。結果は、クラスがすべて&lt;a href=&quot;#ast.AST&quot;&gt; &lt;code&gt;ast.AST&lt;/code&gt; &lt;/a&gt;から継承するオブジェクトのツリーになります。抽象構文木は、組み込みの&lt;a href=&quot;functions#compile&quot;&gt; &lt;code&gt;compile()&lt;/code&gt; &lt;/a&gt;関数を使用してPythonコードオブジェクトにコンパイルできます。</target>
        </trans-unit>
        <trans-unit id="9ce1167dff3e80e3af3cc98084356e72a0bd3a36" translate="yes" xml:space="preserve">
          <source>An abstract syntax tree can be generated by passing &lt;code&gt;ast.PyCF_ONLY_AST&lt;/code&gt; as a flag to the &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt; built-in function, or using the &lt;a href=&quot;#ast.parse&quot;&gt;&lt;code&gt;parse()&lt;/code&gt;&lt;/a&gt; helper provided in this module. The result will be a tree of objects whose classes all inherit from &lt;a href=&quot;#ast.AST&quot;&gt;&lt;code&gt;ast.AST&lt;/code&gt;&lt;/a&gt;. An abstract syntax tree can be compiled into a Python code object using the built-in &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;ast.PyCF_ONLY_AST&lt;/code&gt; をフラグとして&lt;a href=&quot;functions#compile&quot;&gt; &lt;code&gt;compile()&lt;/code&gt; &lt;/a&gt;組み込み関数に渡すか、このモジュールで提供される&lt;a href=&quot;#ast.parse&quot;&gt; &lt;code&gt;parse()&lt;/code&gt; &lt;/a&gt;ヘルパーを使用すると、抽象構文ツリーを生成できます。結果は、クラスがすべて&lt;a href=&quot;#ast.AST&quot;&gt; &lt;code&gt;ast.AST&lt;/code&gt; &lt;/a&gt;から継承するオブジェクトのツリーになります。組み込みの&lt;a href=&quot;functions#compile&quot;&gt; &lt;code&gt;compile()&lt;/code&gt; &lt;/a&gt;関数を使用して、抽象構文ツリーをPythonコードオブジェクトにコンパイルできます。</target>
        </trans-unit>
        <trans-unit id="70da3ef21c99fc01e1c391e4ec0a45bb54025f8a" translate="yes" xml:space="preserve">
          <source>An abstraction of a pipeline.</source>
          <target state="translated">パイプラインの抽象化。</target>
        </trans-unit>
        <trans-unit id="2b4487c478caae94a1d2a055c39dc744680ef17b" translate="yes" xml:space="preserve">
          <source>An abstraction to represent a connection between a parent and its child OS process.</source>
          <target state="translated">親と子のOSプロセス間の接続を表現するための抽象化。</target>
        </trans-unit>
        <trans-unit id="70554b33f749f867144e33b7010322e8a2d9c2f6" translate="yes" xml:space="preserve">
          <source>An additional example of normalization:</source>
          <target state="translated">正規化の追加例。</target>
        </trans-unit>
        <trans-unit id="1f8b93a1b318ef3b489264436cd2920634f37e5c" translate="yes" xml:space="preserve">
          <source>An additional section describes the exceptions defined for working with the DOM in Python.</source>
          <target state="translated">追加セクションでは、Python で DOM を扱う際に定義された例外について説明します。</target>
        </trans-unit>
        <trans-unit id="7de5be9d95857a8f7fae738465f4f7a4ecbfe0bd" translate="yes" xml:space="preserve">
          <source>An additional utility function is provided to convert a file&amp;rsquo;s mode in a human readable string:</source>
          <target state="translated">ファイルのモードを人間が読める文字列に変換するために、追加のユーティリティ関数が提供されています。</target>
        </trans-unit>
        <trans-unit id="b4bc718c3660ae312ee29fc3f760532b2ef990dd" translate="yes" xml:space="preserve">
          <source>An alias for &lt;a href=&quot;#ssl.SSLCertVerificationError&quot;&gt;&lt;code&gt;SSLCertVerificationError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#ssl.SSLCertVerificationError&quot;&gt; &lt;code&gt;SSLCertVerificationError&lt;/code&gt; &lt;/a&gt;のエイリアス。</target>
        </trans-unit>
        <trans-unit id="d8d058f0ff4ac1d3e35f124836eb7543d9d30422" translate="yes" xml:space="preserve">
          <source>An alias for &lt;a href=&quot;#tkinter.ttk.Treeview.move&quot;&gt;&lt;code&gt;Treeview.move()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#tkinter.ttk.Treeview.move&quot;&gt; &lt;code&gt;Treeview.move()&lt;/code&gt; &lt;/a&gt;のエイリアス。</target>
        </trans-unit>
        <trans-unit id="4f34bb1fd3121bf24f28736c112a6ea7ecb860b5" translate="yes" xml:space="preserve">
          <source>An alias for the built-in &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; exception.</source>
          <target state="translated">組み込み&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;例外のエイリアス。</target>
        </trans-unit>
        <trans-unit id="ee952a3e338de8476144642c2ed1be940175b262" translate="yes" xml:space="preserve">
          <source>An alias to &lt;a href=&quot;collections.abc#collections.abc.Hashable&quot;&gt;&lt;code&gt;collections.abc.Hashable&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;collections.abc#collections.abc.Hashable&quot;&gt; &lt;code&gt;collections.abc.Hashable&lt;/code&gt; &lt;/a&gt;のエイリアス</target>
        </trans-unit>
        <trans-unit id="72cf7f2af19bdbb20c360e706340e6ea11885d97" translate="yes" xml:space="preserve">
          <source>An alias to &lt;a href=&quot;collections.abc#collections.abc.Sized&quot;&gt;&lt;code&gt;collections.abc.Sized&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;collections.abc#collections.abc.Sized&quot;&gt; &lt;code&gt;collections.abc.Sized&lt;/code&gt; &lt;/a&gt;のエイリアス</target>
        </trans-unit>
        <trans-unit id="a6540aa0e6b78ff35eaf43cee039535142533b79" translate="yes" xml:space="preserve">
          <source>An alternate constructor that bypasses the constructor&amp;rsquo;s cache. It is identical to the primary constructor, but returns a new object on each call. This is most likely to be useful for testing or demonstration purposes, but it can also be used to create a system with a different cache invalidation strategy.</source>
          <target state="translated">コンストラクターのキャッシュをバイパスする代替コンストラクター。これはプライマリコンストラクタと同じですが、呼び出しごとに新しいオブジェクトを返します。これは、テストまたはデモンストレーションの目的で役立つ可能性が最も高いですが、異なるキャッシュ無効化戦略を使用してシステムを作成するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="a63391b1faab340a2bb4934be82d08de2b51040f" translate="yes" xml:space="preserve">
          <source>An alternative character used by the operating system to separate pathname components, or &lt;code&gt;None&lt;/code&gt; if only one separator character exists. This is set to &lt;code&gt;'/'&lt;/code&gt; on Windows systems where &lt;code&gt;sep&lt;/code&gt; is a backslash. Also available via &lt;a href=&quot;os.path#module-os.path&quot;&gt;&lt;code&gt;os.path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パス名コンポーネントを区切るためにオペレーティングシステムによって使用される代替文字。セパレータ文字が1つだけ存在する場合は &lt;code&gt;None&lt;/code&gt; 。これは、 &lt;code&gt;sep&lt;/code&gt; がバックスラッシュであるWindowsシステムでは &lt;code&gt;'/'&lt;/code&gt; に設定されます。&lt;a href=&quot;os.path#module-os.path&quot;&gt; &lt;code&gt;os.path&lt;/code&gt; &lt;/a&gt;からも利用できます。</target>
        </trans-unit>
        <trans-unit id="a3d5b628a54d39bf8ee6093f8e0d37a9d4cee60c" translate="yes" xml:space="preserve">
          <source>An alternative dictionary type can be used for example to sort sections and options on write-back.</source>
          <target state="translated">代替の辞書型は、例えば、ライトバック時にセクションやオプションをソートするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="7d850059763c1f7e51f2d1d11cf0427ad5eded88" translate="yes" xml:space="preserve">
          <source>An alternative event loop policy that uses the &lt;a href=&quot;asyncio-eventloop#asyncio.ProactorEventLoop&quot;&gt;&lt;code&gt;ProactorEventLoop&lt;/code&gt;&lt;/a&gt; event loop implementation.</source>
          <target state="translated">&lt;a href=&quot;asyncio-eventloop#asyncio.ProactorEventLoop&quot;&gt; &lt;code&gt;ProactorEventLoop&lt;/code&gt; &lt;/a&gt;イベントループ実装を使用する代替イベントループポリシー。</target>
        </trans-unit>
        <trans-unit id="84083d9dc2f2455c7f8ae18733c112f9f4922f99" translate="yes" xml:space="preserve">
          <source>An alternative event loop policy that uses the &lt;a href=&quot;asyncio-eventloop#asyncio.SelectorEventLoop&quot;&gt;&lt;code&gt;SelectorEventLoop&lt;/code&gt;&lt;/a&gt; event loop implementation.</source>
          <target state="translated">&lt;a href=&quot;asyncio-eventloop#asyncio.SelectorEventLoop&quot;&gt; &lt;code&gt;SelectorEventLoop&lt;/code&gt; &lt;/a&gt;イベントループ実装を使用する代替イベントループポリシー。</target>
        </trans-unit>
        <trans-unit id="8fe9d34c1b43e8d3bc59379cabc74d88762dfb06" translate="yes" xml:space="preserve">
          <source>An alternative handler for interpolation which implements a more advanced syntax, used for instance in &lt;code&gt;zc.buildout&lt;/code&gt;. Extended interpolation is using &lt;code&gt;${section:option}&lt;/code&gt; to denote a value from a foreign section. Interpolation can span multiple levels. For convenience, if the &lt;code&gt;section:&lt;/code&gt; part is omitted, interpolation defaults to the current section (and possibly the default values from the special section).</source>
          <target state="translated">より高度な構文を実装する補間の代替ハンドラー。たとえば &lt;code&gt;zc.buildout&lt;/code&gt; で使用されます。拡張補間では、 &lt;code&gt;${section:option}&lt;/code&gt; を使用して外部セクションからの値を示します。補間は複数のレベルにまたがることができます。便宜上、 &lt;code&gt;section:&lt;/code&gt; パーツが省略されている場合、補間はデフォルトで現在のセクション（および場合によっては特殊セクションのデフォルト値）に設定されます。</target>
        </trans-unit>
        <trans-unit id="558c117d3161559bd859666a91b9bb66c414c1f5" translate="yes" xml:space="preserve">
          <source>An alternative header can be specified in the &lt;em&gt;header&lt;/em&gt; argument. When the &lt;em&gt;Content-Type&lt;/em&gt; header is set a &lt;em&gt;MIME-Version&lt;/em&gt; header is also added.</source>
          <target state="translated">代替ヘッダーは、&lt;em&gt;header&lt;/em&gt;引数で指定できます。場合&lt;em&gt;のContent-Type&lt;/em&gt;ヘッダが設定されている&lt;em&gt;MIMEバージョンの&lt;/em&gt;ヘッダも付加されます。</target>
        </trans-unit>
        <trans-unit id="f5ba665411f071ae5d955adbe5282d9694eae5c4" translate="yes" xml:space="preserve">
          <source>An alternative name can be specified with &lt;code&gt;metavar&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;metavar&lt;/code&gt; で代替名を指定できます。</target>
        </trans-unit>
        <trans-unit id="6416917ffae045c2865eba964ef88e695b8f701a" translate="yes" xml:space="preserve">
          <source>An alternative request handler class that makes use of streams (file-like objects that simplify communication by providing the standard file interface):</source>
          <target state="translated">ストリーム (標準のファイルインターフェイスを提供することで通信を簡素化するファイルライクなオブジェクト)を利用する代替リクエストハンドラクラス。</target>
        </trans-unit>
        <trans-unit id="affd50cda4dcf68b768688e4f672192d92888ed0" translate="yes" xml:space="preserve">
          <source>An analogue of &lt;a href=&quot;threading#threading.current_thread&quot;&gt;&lt;code&gt;threading.current_thread()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;threading#threading.current_thread&quot;&gt; &lt;code&gt;threading.current_thread()&lt;/code&gt; &lt;/a&gt;の類似物。</target>
        </trans-unit>
        <trans-unit id="8e8b2aaa418b53858967709906f3a78f69197dab" translate="yes" xml:space="preserve">
          <source>An application which needs both ST and code objects can package this code into readily available functions:</source>
          <target state="translated">STとコードオブジェクトの両方を必要とするアプリケーションは、このコードを容易に利用可能な関数にパッケージ化することができます。</target>
        </trans-unit>
        <trans-unit id="c5a68e4a13d841bc92021b61944ccadf166e7e79" translate="yes" xml:space="preserve">
          <source>An appropriate &lt;code&gt;Content-Type&lt;/code&gt; header should be included if the &lt;em&gt;data&lt;/em&gt; argument is present. If this header has not been provided and &lt;em&gt;data&lt;/em&gt; is not None, &lt;code&gt;Content-Type: application/x-www-form-urlencoded&lt;/code&gt; will be added as a default.</source>
          <target state="translated">&lt;em&gt;data&lt;/em&gt;引数が存在する場合は、適切な &lt;code&gt;Content-Type&lt;/code&gt; ヘッダーを含める必要があり&lt;em&gt;ます&lt;/em&gt;。このヘッダーが提供されておらず、&lt;em&gt;データ&lt;/em&gt;がNoneでない場合、 &lt;code&gt;Content-Type: application/x-www-form-urlencoded&lt;/code&gt; がデフォルトとして追加されます。</target>
        </trans-unit>
        <trans-unit id="c475a455c39ee03168c8c78b435dcd38ae70e3df" translate="yes" xml:space="preserve">
          <source>An argument for using the original mbox format rather than a variation.</source>
          <target state="translated">バリエーションではなく、オリジナルのmboxフォーマットを使用するための引数。</target>
        </trans-unit>
        <trans-unit id="6ec278a245be82c537401d0aff88bd1ef6e21621" translate="yes" xml:space="preserve">
          <source>An array that represents the abbreviated days of the week in the current locale.</source>
          <target state="translated">現在のロケールにおける曜日の省略形を表す配列。</target>
        </trans-unit>
        <trans-unit id="2ba535593adca4dfcb800d6a4065c1b6b73e79fa" translate="yes" xml:space="preserve">
          <source>An array that represents the abbreviated months of the year in the current locale. This follows normal convention of January being month number 1, so it has a length of 13 and &lt;code&gt;month_abbr[0]&lt;/code&gt; is the empty string.</source>
          <target state="translated">現在のロケールでの年の省略された月を表す配列。これは、1月が1であるという通常の規則に従っているため、長さは13で、 &lt;code&gt;month_abbr[0]&lt;/code&gt; は空の文字列です。</target>
        </trans-unit>
        <trans-unit id="fcf4961a8aabb7adc6bcd479568762d6de58a7a7" translate="yes" xml:space="preserve">
          <source>An array that represents the days of the week in the current locale.</source>
          <target state="translated">現在のロケールの曜日を表す配列。</target>
        </trans-unit>
        <trans-unit id="f186d41c71a389deb5bc2ad8c9d947ed1464a0a8" translate="yes" xml:space="preserve">
          <source>An array that represents the months of the year in the current locale. This follows normal convention of January being month number 1, so it has a length of 13 and &lt;code&gt;month_name[0]&lt;/code&gt; is the empty string.</source>
          <target state="translated">現在のロケールでの年の月を表す配列。これは、1月が月番号1であるという通常の規則に従っているため、長さは13で、 &lt;code&gt;month_name[0]&lt;/code&gt; は空の文字列です。</target>
        </trans-unit>
        <trans-unit id="4945cd01dba97e9df97bb4a5e0472f4c79b63619" translate="yes" xml:space="preserve">
          <source>An assertion. &lt;code&gt;test&lt;/code&gt; holds the condition, such as a &lt;a href=&quot;#ast.Compare&quot;&gt;&lt;code&gt;Compare&lt;/code&gt;&lt;/a&gt; node. &lt;code&gt;msg&lt;/code&gt; holds the failure message.</source>
          <target state="translated">アサーション。 &lt;code&gt;test&lt;/code&gt; は、&lt;a href=&quot;#ast.Compare&quot;&gt; &lt;code&gt;Compare&lt;/code&gt; &lt;/a&gt;ノードなどの条件を保持します。 &lt;code&gt;msg&lt;/code&gt; は失敗メッセージを保持します。</target>
        </trans-unit>
        <trans-unit id="b98f9befa7e21b68efee9fcdf15d47f44a0708eb" translate="yes" xml:space="preserve">
          <source>An assignment with a type annotation. &lt;code&gt;target&lt;/code&gt; is a single node and can be a &lt;a href=&quot;#ast.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;#ast.Attribute&quot;&gt;&lt;code&gt;Attribute&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;#ast.Subscript&quot;&gt;&lt;code&gt;Subscript&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;annotation&lt;/code&gt; is the annotation, such as a &lt;a href=&quot;#ast.Constant&quot;&gt;&lt;code&gt;Constant&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ast.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt; node. &lt;code&gt;value&lt;/code&gt; is a single optional node. &lt;code&gt;simple&lt;/code&gt; is a boolean integer set to True for a &lt;a href=&quot;#ast.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt; node in &lt;code&gt;target&lt;/code&gt; that do not appear in between parenthesis and are hence pure names and not expressions.</source>
          <target state="translated">タイプ注釈付きの割り当て。 &lt;code&gt;target&lt;/code&gt; は単一ノードであり、&lt;a href=&quot;#ast.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ast.Attribute&quot;&gt; &lt;code&gt;Attribute&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#ast.Subscript&quot;&gt; &lt;code&gt;Subscript&lt;/code&gt; &lt;/a&gt;することができます。 &lt;code&gt;annotation&lt;/code&gt; は、&lt;a href=&quot;#ast.Constant&quot;&gt; &lt;code&gt;Constant&lt;/code&gt; &lt;/a&gt;ノードや&lt;a href=&quot;#ast.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt;ノードなどの注釈です。 &lt;code&gt;value&lt;/code&gt; は単一のオプションノードです。 &lt;code&gt;simple&lt;/code&gt; は、 &lt;code&gt;target&lt;/code&gt; 内の&lt;a href=&quot;#ast.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt;ノードに対してTrueに設定されたブール整数であり、括弧の間に表示されないため、純粋な名前であり、式ではありません。</target>
        </trans-unit>
        <trans-unit id="e372d92a12b5d0790318943d944a7cbc84547329" translate="yes" xml:space="preserve">
          <source>An assignment. &lt;code&gt;targets&lt;/code&gt; is a list of nodes, and &lt;code&gt;value&lt;/code&gt; is a single node.</source>
          <target state="translated">割り当て。 &lt;code&gt;targets&lt;/code&gt; はノードのリストであり、 &lt;code&gt;value&lt;/code&gt; は単一ノードです。</target>
        </trans-unit>
        <trans-unit id="2f78c0d8986a31d197009b378a1891659c6d5c40" translate="yes" xml:space="preserve">
          <source>An async generator can be annotated by the generic type &lt;code&gt;AsyncGenerator[YieldType, SendType]&lt;/code&gt;. For example:</source>
          <target state="translated">非同期ジェネレーターは、ジェネリック型 &lt;code&gt;AsyncGenerator[YieldType, SendType]&lt;/code&gt; によって注釈を付けることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="ca81f375b0f07ac473e89b02f52e35dc9a49c97b" translate="yes" xml:space="preserve">
          <source>An asynchronous version of &lt;a href=&quot;#unittest.mock.MagicMock&quot;&gt;&lt;code&gt;MagicMock&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#unittest.mock.AsyncMock&quot;&gt;&lt;code&gt;AsyncMock&lt;/code&gt;&lt;/a&gt; object will behave so the object is recognized as an async function, and the result of a call is an awaitable.</source>
          <target state="translated">&lt;a href=&quot;#unittest.mock.MagicMock&quot;&gt; &lt;code&gt;MagicMock&lt;/code&gt; &lt;/a&gt;の非同期バージョン。&lt;a href=&quot;#unittest.mock.AsyncMock&quot;&gt; &lt;code&gt;AsyncMock&lt;/code&gt; の&lt;/a&gt;オブジェクトは、非同期関数として認識され、呼び出しの結果がawaitableあるので、オブジェクトが動作します。</target>
        </trans-unit>
        <trans-unit id="47a32ba6658f6bd3552449f82e57df961a67e806" translate="yes" xml:space="preserve">
          <source>An asynchronous version of &lt;a href=&quot;#unittest.mock.Mock&quot;&gt;&lt;code&gt;Mock&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#unittest.mock.AsyncMock&quot;&gt;&lt;code&gt;AsyncMock&lt;/code&gt;&lt;/a&gt; object will behave so the object is recognized as an async function, and the result of a call is an awaitable.</source>
          <target state="translated">&lt;a href=&quot;#unittest.mock.Mock&quot;&gt; &lt;code&gt;Mock&lt;/code&gt; &lt;/a&gt;の非同期バージョン。&lt;a href=&quot;#unittest.mock.AsyncMock&quot;&gt; &lt;code&gt;AsyncMock&lt;/code&gt; の&lt;/a&gt;オブジェクトは、非同期関数として認識され、呼び出しの結果がawaitableあるので、オブジェクトが動作します。</target>
        </trans-unit>
        <trans-unit id="1fdc0779a5b2419f946e9654c6370c12f380766a" translate="yes" xml:space="preserve">
          <source>An asyncio condition primitive can be used by a task to wait for some event to happen and then get exclusive access to a shared resource.</source>
          <target state="translated">非同期条件プリミティブは、タスクが何らかのイベントの発生を待ち、共有リソースへの排他的アクセスを得るために使用することができます。</target>
        </trans-unit>
        <trans-unit id="ce693ef39f956e4dfceff810a01b25898982c4eb" translate="yes" xml:space="preserve">
          <source>An asyncio event can be used to notify multiple asyncio tasks that some event has happened.</source>
          <target state="translated">asyncio イベントは、あるイベントが発生したことを複数の asyncio タスクに通知するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="d221089bb63278ae2eac9dba4c559652680a0628" translate="yes" xml:space="preserve">
          <source>An asyncio lock can be used to guarantee exclusive access to a shared resource.</source>
          <target state="translated">asyncio ロックは、共有リソースへの排他的アクセスを保証するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="d8132e7095ff57a267c20149288415aebe2314d5" translate="yes" xml:space="preserve">
          <source>An attempt to resume the parser was made when the parser had not been suspended.</source>
          <target state="translated">パーサーが中断されていないときに、パーサーを再開しようとしました。</target>
        </trans-unit>
        <trans-unit id="06688b12c4727b91b1013a9b4b85afe3f1de51e7" translate="yes" xml:space="preserve">
          <source>An attribute value that must be a tuple listing valid path portions of the URL for receiving XML-RPC requests. Requests posted to other paths will result in a 404 &amp;ldquo;no such page&amp;rdquo; HTTP error. If this tuple is empty, all paths will be considered valid. The default value is &lt;code&gt;('/', '/RPC2')&lt;/code&gt;.</source>
          <target state="translated">XML-RPCリクエストを受信するためのURLの有効なパス部分をリストするタプルである必要がある属性値。他のパスに投稿されたリクエストは、404「そのようなページはありません」HTTPエラーになります。このタプルが空の場合、すべてのパスが有効と見なされます。デフォルト値は &lt;code&gt;('/', '/RPC2')&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="247e09baf71df7f71e226b7096feb96275db6196" translate="yes" xml:space="preserve">
          <source>An attribute was used more than once in a start tag.</source>
          <target state="translated">開始タグの中で属性が複数回使用されていました。</target>
        </trans-unit>
        <trans-unit id="cca38611cc7b83df2236356ffa28d63d72e96458" translate="yes" xml:space="preserve">
          <source>An authentication key is a byte string which can be thought of as a password: once a connection is established both ends will demand proof that the other knows the authentication key. (Demonstrating that both ends are using the same key does &lt;strong&gt;not&lt;/strong&gt; involve sending the key over the connection.)</source>
          <target state="translated">認証キーは、パスワードと見なすことができるバイト文字列です。接続が確立されると、両端が相手が認証キーを知っていることの証明を要求します。（両端が同じキーを使用し&lt;strong&gt;ている&lt;/strong&gt;ことを示すには、接続を介してキーを送信する必要はありませ&lt;strong&gt;ん&lt;/strong&gt;。）</target>
        </trans-unit>
        <trans-unit id="c23b9bb5bd999d4e26c014cb734e6fa9c87b39aa" translate="yes" xml:space="preserve">
          <source>An email message consists of &lt;em&gt;headers&lt;/em&gt; and a &lt;em&gt;payload&lt;/em&gt; (which is also referred to as the &lt;em&gt;content&lt;/em&gt;). Headers are &lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt; or &lt;a href=&quot;https://tools.ietf.org/html/rfc6532.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 6532&lt;/strong&gt;&lt;/a&gt; style field names and values, where the field name and value are separated by a colon. The colon is not part of either the field name or the field value. The payload may be a simple text message, or a binary object, or a structured sequence of sub-messages each with their own set of headers and their own payload. The latter type of payload is indicated by the message having a MIME type such as &lt;em&gt;multipart/*&lt;/em&gt; or &lt;em&gt;message/rfc822&lt;/em&gt;.</source>
          <target state="translated">電子メールメッセージは、&lt;em&gt;ヘッダー&lt;/em&gt;と&lt;em&gt;ペイロード&lt;/em&gt;（&lt;em&gt;コンテンツ&lt;/em&gt;とも呼ばれ&lt;em&gt;ます&lt;/em&gt;）で構成されます。ヘッダーは&lt;a href=&quot;https://tools.ietf.org/html/rfc5322.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 5322&lt;/strong&gt;&lt;/a&gt;または&lt;a href=&quot;https://tools.ietf.org/html/rfc6532.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 6532&lt;/strong&gt;&lt;/a&gt;スタイルのフィールド名と値で、フィールド名と値はコロンで区切られます。コロンは、フィールド名またはフィールド値の一部ではありません。ペイロードは、単純なテキストメッセージ、バイナリオブジェクト、または構造化された一連のサブメッセージであり、それぞれに独自のヘッダーのセットと独自のペイロードがあります。後者のタイプのペイロードは、&lt;em&gt;multipart / *&lt;/em&gt;または&lt;em&gt;message / rfc822&lt;/em&gt;などのMIMEタイプを持つメッセージによって示されます。</target>
        </trans-unit>
        <trans-unit id="9c372588e305c30fd92a3064303d38c2f969de76" translate="yes" xml:space="preserve">
          <source>An email message consists of &lt;em&gt;headers&lt;/em&gt; and a &lt;em&gt;payload&lt;/em&gt;. Headers must be &lt;a href=&quot;https://tools.ietf.org/html/rfc5233.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 5233&lt;/strong&gt;&lt;/a&gt; style names and values, where the field name and value are separated by a colon. The colon is not part of either the field name or the field value. The payload may be a simple text message, or a binary object, or a structured sequence of sub-messages each with their own set of headers and their own payload. The latter type of payload is indicated by the message having a MIME type such as &lt;em&gt;multipart/*&lt;/em&gt; or &lt;em&gt;message/rfc822&lt;/em&gt;.</source>
          <target state="translated">電子メールメッセージは、&lt;em&gt;ヘッダー&lt;/em&gt;と&lt;em&gt;ペイロードで&lt;/em&gt;構成されます。ヘッダーは&lt;a href=&quot;https://tools.ietf.org/html/rfc5233.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 5233&lt;/strong&gt;&lt;/a&gt;スタイルの名前と値である必要があります。フィールド名と値はコロンで区切られます。コロンは、フィールド名またはフィールド値の一部ではありません。ペイロードは、単純なテキストメッセージ、バイナリオブジェクト、または構造化された一連のサブメッセージであり、それぞれに独自のヘッダーセットと独自のペイロードがあります。後者のタイプのペイロードは、&lt;em&gt;multipart / *&lt;/em&gt;または&lt;em&gt;message / rfc822&lt;/em&gt;などのMIMEタイプを持つメッセージによって示されます。</target>
        </trans-unit>
        <trans-unit id="b9ac870ddd7b9cee7af970522ac0cb62cc665869" translate="yes" xml:space="preserve">
          <source>An empty string is returned if the value cannot be determined. Note that many platforms do not provide this information or simply return the same value as for &lt;a href=&quot;#platform.machine&quot;&gt;&lt;code&gt;machine()&lt;/code&gt;&lt;/a&gt;. NetBSD does this.</source>
          <target state="translated">値を判別できない場合は、空の文字列が返されます。多くのプラットフォームはこの情報を提供しないか、単に&lt;a href=&quot;#platform.machine&quot;&gt; &lt;code&gt;machine()&lt;/code&gt; &lt;/a&gt;と同じ値を返すことに注意してください。NetBSDはこれを行います。</target>
        </trans-unit>
        <trans-unit id="0626a6597dc747aecf4b27d088ed3268190477de" translate="yes" xml:space="preserve">
          <source>An end tag did not match the innermost open start tag.</source>
          <target state="translated">終了タグが、最も内側に開いている開始タグと一致しませんでした。</target>
        </trans-unit>
        <trans-unit id="e204644cad08d09082fc0881f67657a40116f7c5" translate="yes" xml:space="preserve">
          <source>An end-of-file on input is passed back as the string &lt;code&gt;'EOF'&lt;/code&gt;.</source>
          <target state="translated">入力時のファイルの終わりは、文字列 &lt;code&gt;'EOF'&lt;/code&gt; として返されます。</target>
        </trans-unit>
        <trans-unit id="a7b3b2a0614b25738aef986d351e59fa4b2b82de" translate="yes" xml:space="preserve">
          <source>An entity reference contained another reference to the same entity; possibly via a different name, and possibly indirectly.</source>
          <target state="translated">エンティティ参照には、同じエンティティへの別の参照が含まれていました。</target>
        </trans-unit>
        <trans-unit id="3703befccbd34b5b25cb780b7ad45fd641ab0fee" translate="yes" xml:space="preserve">
          <source>An entity reference in an attribute value referred to an external entity instead of an internal entity.</source>
          <target state="translated">属性値の中の実体参照は、内部実体ではなく外部実体を参照しています。</target>
        </trans-unit>
        <trans-unit id="3d37f6c8e1d729e4b74279866b363474e3ce5063" translate="yes" xml:space="preserve">
          <source>An entity reference referred to an entity which was declared with a notation, so cannot be parsed.</source>
          <target state="translated">エンティティ参照は、記法で宣言されたエンティティを参照していたため、解析できません。</target>
        </trans-unit>
        <trans-unit id="35cf344fbad219897b2d51ae8eba44868eff1f92" translate="yes" xml:space="preserve">
          <source>An entry in a &lt;a href=&quot;#symtable.SymbolTable&quot;&gt;&lt;code&gt;SymbolTable&lt;/code&gt;&lt;/a&gt; corresponding to an identifier in the source. The constructor is not public.</source>
          <target state="translated">ソースの識別子に対応する&lt;a href=&quot;#symtable.SymbolTable&quot;&gt; &lt;code&gt;SymbolTable&lt;/code&gt; &lt;/a&gt;のエントリ。コンストラクターはパブリックではありません。</target>
        </trans-unit>
        <trans-unit id="f406f6ad3dfbdd6e32c42a45910cc78a6fbc0eb9" translate="yes" xml:space="preserve">
          <source>An enumeration is a set of symbolic names (members) bound to unique, constant values. Within an enumeration, the members can be compared by identity, and the enumeration itself can be iterated over.</source>
          <target state="translated">列挙とは、一意の定数値に結び付けられた記号名(メンバ)の集合です。列挙の中では、メンバを同一性で比較したり、列挙自体を繰り返したりすることができます。</target>
        </trans-unit>
        <trans-unit id="7ceb56cb5ae384a7c045483416aaaa181587fc4e" translate="yes" xml:space="preserve">
          <source>An enumeration of &lt;a href=&quot;#uuid.SafeUUID&quot;&gt;&lt;code&gt;SafeUUID&lt;/code&gt;&lt;/a&gt; which indicates whether the platform generated the UUID in a multiprocessing-safe way.</source>
          <target state="translated">プラットフォームがマルチプロセッシングセーフな方法でUUIDを生成したかどうかを示す&lt;a href=&quot;#uuid.SafeUUID&quot;&gt; &lt;code&gt;SafeUUID&lt;/code&gt; &lt;/a&gt;の列挙体。</target>
        </trans-unit>
        <trans-unit id="191e9b46b39612e5a45fb6724e6abdd03694c710" translate="yes" xml:space="preserve">
          <source>An equality comparison between one &lt;code&gt;dict.values()&lt;/code&gt; view and another will always return &lt;code&gt;False&lt;/code&gt;. This also applies when comparing &lt;code&gt;dict.values()&lt;/code&gt; to itself:</source>
          <target state="translated">1つの &lt;code&gt;dict.values()&lt;/code&gt; ビューと別のビューの等価比較は、常に &lt;code&gt;False&lt;/code&gt; を返します。これは、 &lt;code&gt;dict.values()&lt;/code&gt; をそれ自体と比較するときにも適用されます。</target>
        </trans-unit>
        <trans-unit id="a01448ba36fc6180ade36d1e4999112151667f7e" translate="yes" xml:space="preserve">
          <source>An error is produced for arguments that could produce more than one options. This feature can be disabled by setting &lt;a href=&quot;#allow-abbrev&quot;&gt;allow_abbrev&lt;/a&gt; to &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">複数のオプションを生成する可能性のある引数に対してエラーが生成されます。この機能を無効にするには、&lt;a href=&quot;#allow-abbrev&quot;&gt;allow_abbrev&lt;/a&gt;を &lt;code&gt;False&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="2dc2e93e3b7a317994b5c3eb2e52e7df07abc268" translate="yes" xml:space="preserve">
          <source>An error is returned whenever the resulting exponent is greater than &lt;code&gt;Emax&lt;/code&gt; or less than &lt;code&gt;Etiny&lt;/code&gt;.</source>
          <target state="translated">結果の指数が &lt;code&gt;Emax&lt;/code&gt; よりも大きいか &lt;code&gt;Etiny&lt;/code&gt; よりも小さい場合は常にエラーが返されます。</target>
        </trans-unit>
        <trans-unit id="516d3d6e48e258e621be2b2a76babfa7dc02e706" translate="yes" xml:space="preserve">
          <source>An error raised when a NIS function returns an error code.</source>
          <target state="translated">NIS 関数がエラーコードを返したときに発生するエラー。</target>
        </trans-unit>
        <trans-unit id="58377c1e23ec237f7e5eaaef750df18f85b3cb45" translate="yes" xml:space="preserve">
          <source>An error raised when something is impossible because it violates the WAV specification or hits an implementation deficiency.</source>
          <target state="translated">WAV の仕様に違反したり、実装の不備にぶつかったりして、何かが不可能な場合に発生するエラー。</target>
        </trans-unit>
        <trans-unit id="4593a10048262564ce6c822735e42f44f346b661" translate="yes" xml:space="preserve">
          <source>An event loop based on the &lt;a href=&quot;selectors#module-selectors&quot;&gt;&lt;code&gt;selectors&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">&lt;a href=&quot;selectors#module-selectors&quot;&gt; &lt;code&gt;selectors&lt;/code&gt; &lt;/a&gt;モジュールに基づくイベントループ。</target>
        </trans-unit>
        <trans-unit id="f3adc0d9c6ca30e1ba3e56151e0bcf79cc795c22" translate="yes" xml:space="preserve">
          <source>An event loop for Windows that uses &amp;ldquo;I/O Completion Ports&amp;rdquo; (IOCP).</source>
          <target state="translated">「I / O完了ポート」（IOCP）を使用するWindowsのイベントループ。</target>
        </trans-unit>
        <trans-unit id="fd91140b0fe187a666b9e9bf676cecb25b813937" translate="yes" xml:space="preserve">
          <source>An event loop policy is a global per-process object that controls the management of the event loop. Each event loop has a default policy, which can be changed and customized using the policy API.</source>
          <target state="translated">イベントループポリシーは、イベントループの管理を制御するプロセスごとのグローバルなオブジェクトです。各イベントループにはデフォルトのポリシーがあり、ポリシーAPIを使用して変更やカスタマイズが可能です。</target>
        </trans-unit>
        <trans-unit id="d2e556041e787dfb19531ed6bea3ca88bb68687f" translate="yes" xml:space="preserve">
          <source>An event loop runs in a thread (typically the main thread) and executes all callbacks and Tasks in its thread. While a Task is running in the event loop, no other Tasks can run in the same thread. When a Task executes an &lt;code&gt;await&lt;/code&gt; expression, the running Task gets suspended, and the event loop executes the next Task.</source>
          <target state="translated">イベントループはスレッド（通常はメインスレッド）で実行され、そのスレッドですべてのコールバックとタスクを実行します。イベントループでタスクが実行されている間、他のタスクは同じスレッドで実行できません。タスクが &lt;code&gt;await&lt;/code&gt; 式を実行すると、実行中のタスクが中断され、イベントループが次のタスクを実行します。</target>
        </trans-unit>
        <trans-unit id="608baac34ec6b479b1e075077346da843d886918" translate="yes" xml:space="preserve">
          <source>An event object manages an internal flag that can be set to true with the &lt;a href=&quot;#threading.Event.set&quot;&gt;&lt;code&gt;set()&lt;/code&gt;&lt;/a&gt; method and reset to false with the &lt;a href=&quot;#threading.Event.clear&quot;&gt;&lt;code&gt;clear()&lt;/code&gt;&lt;/a&gt; method. The &lt;a href=&quot;#threading.Event.wait&quot;&gt;&lt;code&gt;wait()&lt;/code&gt;&lt;/a&gt; method blocks until the flag is true.</source>
          <target state="translated">イベントオブジェクトは、&lt;a href=&quot;#threading.Event.set&quot;&gt; &lt;code&gt;set()&lt;/code&gt; &lt;/a&gt;メソッドでtrueに設定し、&lt;a href=&quot;#threading.Event.clear&quot;&gt; &lt;code&gt;clear()&lt;/code&gt; &lt;/a&gt;メソッドでfalseにリセットできる内部フラグを管理します。&lt;a href=&quot;#threading.Event.wait&quot;&gt; &lt;code&gt;wait()&lt;/code&gt; &lt;/a&gt;メソッドのブロックをフラグがtrueになるまで。</target>
        </trans-unit>
        <trans-unit id="9cf919b4535184a2bac9b21b394a3391ed3be52c" translate="yes" xml:space="preserve">
          <source>An event object.</source>
          <target state="translated">イベントオブジェクト。</target>
        </trans-unit>
        <trans-unit id="3197165a12532ea18a4db9c10db35c9e41c35331" translate="yes" xml:space="preserve">
          <source>An event object. Not thread-safe.</source>
          <target state="translated">イベントオブジェクト。スレッドセーフではありません。</target>
        </trans-unit>
        <trans-unit id="58be36b1fcb18ab8fd811be0960165993ee1b495" translate="yes" xml:space="preserve">
          <source>An example for &lt;a href=&quot;#csv.Sniffer&quot;&gt;&lt;code&gt;Sniffer&lt;/code&gt;&lt;/a&gt; use:</source>
          <target state="translated">&lt;a href=&quot;#csv.Sniffer&quot;&gt; &lt;code&gt;Sniffer&lt;/code&gt; &lt;/a&gt;使用例：</target>
        </trans-unit>
        <trans-unit id="d24bd94253a9e026200e1be3ce54276cf7eb1d9f" translate="yes" xml:space="preserve">
          <source>An example for the &lt;a href=&quot;#socketserver.ThreadingMixIn&quot;&gt;&lt;code&gt;ThreadingMixIn&lt;/code&gt;&lt;/a&gt; class:</source>
          <target state="translated">&lt;a href=&quot;#socketserver.ThreadingMixIn&quot;&gt; &lt;code&gt;ThreadingMixIn&lt;/code&gt; &lt;/a&gt;クラスの例：</target>
        </trans-unit>
        <trans-unit id="2b1abaee744f811fdecf714da38ec6d05c1976f7" translate="yes" xml:space="preserve">
          <source>An example illustrating the order:</source>
          <target state="translated">順番を説明する例。</target>
        </trans-unit>
        <trans-unit id="71f4f4affa7b143203b514eaf53d7bbc4a253b38" translate="yes" xml:space="preserve">
          <source>An example may make it more understandable:</source>
          <target state="translated">例を挙げるとわかりやすくなるかもしれません。</target>
        </trans-unit>
        <trans-unit id="f80b147a88b6b8cb2d7f13419efc055fe8a5741d" translate="yes" xml:space="preserve">
          <source>An example of a callback displaying the current date every second. The callback uses the &lt;a href=&quot;#asyncio.loop.call_later&quot;&gt;&lt;code&gt;loop.call_later()&lt;/code&gt;&lt;/a&gt; method to reschedule itself after 5 seconds, and then stops the event loop:</source>
          <target state="translated">現在の日付を毎秒表示するコールバックの例。コールバックは&lt;a href=&quot;#asyncio.loop.call_later&quot;&gt; &lt;code&gt;loop.call_later()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、5秒後に自分自身を再スケジュールし、イベントループを停止します。</target>
        </trans-unit>
        <trans-unit id="11af1171f8dc0175c6f96364b3dfa7e2608ea195" translate="yes" xml:space="preserve">
          <source>An example of a context manager that returns a related object is the one returned by &lt;a href=&quot;decimal#decimal.localcontext&quot;&gt;&lt;code&gt;decimal.localcontext()&lt;/code&gt;&lt;/a&gt;. These managers set the active decimal context to a copy of the original decimal context and then return the copy. This allows changes to be made to the current decimal context in the body of the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement without affecting code outside the &lt;code&gt;with&lt;/code&gt; statement.</source>
          <target state="translated">関連オブジェクトを返すコンテキストマネージャの例は、&lt;a href=&quot;decimal#decimal.localcontext&quot;&gt; &lt;code&gt;decimal.localcontext()&lt;/code&gt; &lt;/a&gt;によって返されるものです。これらのマネージャーは、アクティブな10進コンテキストを元の10進コンテキストのコピーに設定し、そのコピーを返します。これは、変更が本体内に現在進コンテキストに行うことを可能にする&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;外部のコードに影響を与えずに声明 &lt;code&gt;with&lt;/code&gt; 声明。</target>
        </trans-unit>
        <trans-unit id="aaa6de7586c2063984c7b7c3d3b5cb79168e0d34" translate="yes" xml:space="preserve">
          <source>An example of a context manager that returns a related object is the one returned by &lt;a href=&quot;decimal#decimal.localcontext&quot;&gt;&lt;code&gt;decimal.localcontext()&lt;/code&gt;&lt;/a&gt;. These managers set the active decimal context to a copy of the original decimal context and then return the copy. This allows changes to be made to the current decimal context in the body of the &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement without affecting code outside the &lt;code&gt;with&lt;/code&gt; statement.</source>
          <target state="translated">関連オブジェクトを返すコンテキストマネージャーの例は、&lt;a href=&quot;decimal#decimal.localcontext&quot;&gt; &lt;code&gt;decimal.localcontext()&lt;/code&gt; &lt;/a&gt;によって返されるものです。これらのマネージャーは、アクティブな10進コンテキストを元の10進コンテキストのコピーに設定してから、そのコピーを返します。これは、変更が本体内に現在進コンテキストに行うことを可能にする&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;外部のコードに影響を与えずに声明 &lt;code&gt;with&lt;/code&gt; 声明。</target>
        </trans-unit>
        <trans-unit id="229e46ea428fdf9847aacb2de4467c37f32f31e2" translate="yes" xml:space="preserve">
          <source>An example of a context manager that returns itself is a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;. File objects return themselves from __enter__() to allow &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; to be used as the context expression in a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">自身を返すコンテキストマネージャの例は、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-file-object&quot;&gt;ファイルオブジェクト&lt;/a&gt;です。ファイルオブジェクトは__enter __（）から自身を返し、&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントのコンテキスト式として使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="26e0ecb0e14afdc2a9657a109cdda63266fd0dd1" translate="yes" xml:space="preserve">
          <source>An example of a context manager that returns itself is a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;file object&lt;/a&gt;. File objects return themselves from __enter__() to allow &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; to be used as the context expression in a &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement.</source>
          <target state="translated">自分自身を返すコンテキストマネージャーの例は、&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-file-object&quot;&gt;ファイルオブジェクト&lt;/a&gt;です。ファイルオブジェクトは__enter __（）から戻り、&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントのコンテキスト式として使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="a36c0094a4d20f58e22fab2dc6ea6b13c4064617" translate="yes" xml:space="preserve">
          <source>An example of a custom action:</source>
          <target state="translated">カスタムアクションの例。</target>
        </trans-unit>
        <trans-unit id="bd79d7fcb90941297a732fcb5d7d3317ee346397" translate="yes" xml:space="preserve">
          <source>An example of a mock that raises an exception (to test exception handling of an API):</source>
          <target state="translated">例外を発生させるモックの例 (APIの例外処理をテストするため)。</target>
        </trans-unit>
        <trans-unit id="16f4febaa13c59704ab69ba35886f8105bd56383" translate="yes" xml:space="preserve">
          <source>An example of a subprocess protocol used to get the output of a subprocess and to wait for the subprocess exit.</source>
          <target state="translated">サブプロセスの出力を取得し、サブプロセスの終了を待つために使用されるサブプロセスプロトコルの例。</target>
        </trans-unit>
        <trans-unit id="359da9d396e7a3381bf357db2dce0ae96d67afdf" translate="yes" xml:space="preserve">
          <source>An example of dictionary view usage:</source>
          <target state="translated">辞書表示の使用例。</target>
        </trans-unit>
        <trans-unit id="195305d65f73569e3259a2afbec9afedbef3ecc9" translate="yes" xml:space="preserve">
          <source>An example of extending &lt;code&gt;EnvBuilder&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;EnvBuilder&lt;/code&gt; の拡張の例</target>
        </trans-unit>
        <trans-unit id="009b99e279ffcfd9cbdb98ce048a15df969325ea" translate="yes" xml:space="preserve">
          <source>An example of passing some arguments to an external program as a sequence is:</source>
          <target state="translated">いくつかの引数をシーケンスとして外部プログラムに渡す例があります。</target>
        </trans-unit>
        <trans-unit id="1081cc9057f681139574ba8aa1d51a1b7326375e" translate="yes" xml:space="preserve">
          <source>An example of reading the configuration file again:</source>
          <target state="translated">設定ファイルを読み直した例。</target>
        </trans-unit>
        <trans-unit id="a17cbc95ce9a012142cb3b9171e1c0a196a14699" translate="yes" xml:space="preserve">
          <source>An example of setting some log options, these would include the process ID in logged messages, and write the messages to the destination facility used for mail logging:</source>
          <target state="translated">いくつかのログオプションを設定する例として、ログに記録されたメッセージにプロセスIDを含めたり、メールロギングに使用される宛先施設にメッセージを書き込んだりすることができます。</target>
        </trans-unit>
        <trans-unit id="0fc1f9040cc5763e678640ef2363a997c9953de5" translate="yes" xml:space="preserve">
          <source>An example of the extended interface with non-ASCII characters:</source>
          <target state="translated">非ASCII文字を使用した拡張インターフェースの例。</target>
        </trans-unit>
        <trans-unit id="cc391b585ed780ac543ae3ed4c184e7ef73852d8" translate="yes" xml:space="preserve">
          <source>An example of the usage of &lt;a href=&quot;#multiprocessing.managers.BaseProxy._callmethod&quot;&gt;&lt;code&gt;_callmethod()&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#multiprocessing.managers.BaseProxy._callmethod&quot;&gt; &lt;code&gt;_callmethod()&lt;/code&gt; の&lt;/a&gt;使用例：</target>
        </trans-unit>
        <trans-unit id="b0374afa67447b447f7a013a60acd58beb789bd8" translate="yes" xml:space="preserve">
          <source>An example of writing to a configuration file:</source>
          <target state="translated">設定ファイルへの書き込みの例。</target>
        </trans-unit>
        <trans-unit id="678e726964a2ce10c4c1a7c983eb935e47f7d7bc" translate="yes" xml:space="preserve">
          <source>An example showing how to use queues to feed tasks to a collection of worker processes and collect the results:</source>
          <target state="translated">待ち行列を使ってタスクをワーカープロセスの集合に送り、結果を収集する方法を示す例。</target>
        </trans-unit>
        <trans-unit id="ce7f7b7a4c5476e3cc316370c635a0a929e3cae0" translate="yes" xml:space="preserve">
          <source>An example that will remove &lt;em&gt;remove_this&lt;/em&gt; from email addresses:</source>
          <target state="translated">メールアドレスから&lt;em&gt;remove_this&lt;/em&gt;を削除する例：</target>
        </trans-unit>
        <trans-unit id="81981452dd23b6b05db05d7cfb0589b85b814ed7" translate="yes" xml:space="preserve">
          <source>An example to show the &lt;code&gt;_ignore_&lt;/code&gt; attribute in use:</source>
          <target state="translated">使用中の &lt;code&gt;_ignore_&lt;/code&gt; 属性を示す例：</target>
        </trans-unit>
        <trans-unit id="85eca7d3c00b4de3339c2e436d45332986ea35c3" translate="yes" xml:space="preserve">
          <source>An example usage of the module:</source>
          <target state="translated">モジュールの使用例です。</target>
        </trans-unit>
        <trans-unit id="b8690b021b6b6b9da606f08de01ded9048222325" translate="yes" xml:space="preserve">
          <source>An example usage:</source>
          <target state="translated">使用例。</target>
        </trans-unit>
        <trans-unit id="7c60e5df7208cba172a6b4861bef2a01e85722af" translate="yes" xml:space="preserve">
          <source>An example using &lt;em&gt;enter_result&lt;/em&gt;:</source>
          <target state="translated">&lt;em&gt;enter_resultの&lt;/em&gt;使用例：</target>
        </trans-unit>
        <trans-unit id="619d126046efa510fbee514e656faac7c28fa578" translate="yes" xml:space="preserve">
          <source>An example using only Unix style options:</source>
          <target state="translated">Unixスタイルオプションのみを使用した例。</target>
        </trans-unit>
        <trans-unit id="cb40c2136fa42deb9a36926aa145be2f5a4b420f" translate="yes" xml:space="preserve">
          <source>An example using the &lt;a href=&quot;#asyncio.asyncio.subprocess.Process&quot;&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/a&gt; class to control a subprocess and the &lt;a href=&quot;asyncio-stream#asyncio.StreamReader&quot;&gt;&lt;code&gt;StreamReader&lt;/code&gt;&lt;/a&gt; class to read from its standard output.</source>
          <target state="translated">&lt;a href=&quot;#asyncio.asyncio.subprocess.Process&quot;&gt; &lt;code&gt;Process&lt;/code&gt; &lt;/a&gt;クラスを使用してサブプロセスを制御し、&lt;a href=&quot;asyncio-stream#asyncio.StreamReader&quot;&gt; &lt;code&gt;StreamReader&lt;/code&gt; &lt;/a&gt;クラスを使用してその標準出力から読み取る例。</target>
        </trans-unit>
        <trans-unit id="99f3529798fae53307059d813edb69b2362e7c71" translate="yes" xml:space="preserve">
          <source>An example using the &lt;a href=&quot;#asyncio.loop.call_soon&quot;&gt;&lt;code&gt;loop.call_soon()&lt;/code&gt;&lt;/a&gt; method to schedule a callback. The callback displays &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; and then stops the event loop:</source>
          <target state="translated">&lt;a href=&quot;#asyncio.loop.call_soon&quot;&gt; &lt;code&gt;loop.call_soon()&lt;/code&gt; &lt;/a&gt;メソッドを使用してコールバックをスケジュールする例。コールバックは &lt;code&gt;&quot;Hello World&quot;&lt;/code&gt; を表示してから、イベントループを停止します。</target>
        </trans-unit>
        <trans-unit id="ff40ba096df117ee2ce62d129f289e94ce50d311" translate="yes" xml:space="preserve">
          <source>An example which will deadlock is the following:</source>
          <target state="translated">デッドロックする例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="1449c62b11b34c51038e54fc84c6c14e5bdd420c" translate="yes" xml:space="preserve">
          <source>An example with non-ASCII characters:</source>
          <target state="translated">非 ASCII 文字を使用した例。</target>
        </trans-unit>
        <trans-unit id="f71f4e4b07c8d3bd6da392502d651c55e4d66276" translate="yes" xml:space="preserve">
          <source>An example&amp;rsquo;s doctest directives modify doctest&amp;rsquo;s behavior for that single example. Use &lt;code&gt;+&lt;/code&gt; to enable the named behavior, or &lt;code&gt;-&lt;/code&gt; to disable it.</source>
          <target state="translated">例のdoctestディレクティブは、その1つの例に対するdoctestの動作を変更します。 &lt;code&gt;+&lt;/code&gt; を使用して名前付き動作を有効にするか、または &lt;code&gt;-&lt;/code&gt; を使用して無効にします。</target>
        </trans-unit>
        <trans-unit id="f481ad49809e7c27b79d2e6d830283b22c04c1f7" translate="yes" xml:space="preserve">
          <source>An example:</source>
          <target state="translated">一例です。</target>
        </trans-unit>
        <trans-unit id="23a14600961e92118a1b9c9768e9bc704485af4b" translate="yes" xml:space="preserve">
          <source>An exception has occurred. The local trace function is called; &lt;em&gt;arg&lt;/em&gt; is a tuple &lt;code&gt;(exception, value, traceback)&lt;/code&gt;; the return value specifies the new local trace function.</source>
          <target state="translated">例外が発生しました。ローカルトレース関数が呼び出されます。&lt;em&gt;arg&lt;/em&gt;はタプル &lt;code&gt;(exception, value, traceback)&lt;/code&gt; です。戻り値は、新しいローカルトレース関数を指定します。</target>
        </trans-unit>
        <trans-unit id="077f3a8d799c59c87a7879ae93f65a8b265b382c" translate="yes" xml:space="preserve">
          <source>An exception inheriting &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; that is raised when an unsupported operation is called on a stream.</source>
          <target state="translated">サポートされていない操作がストリームで呼び出されたときに発生する&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;を継承する例外。</target>
        </trans-unit>
        <trans-unit id="90348b9ec43ea456461b13b883f04b6adc7d95fc" translate="yes" xml:space="preserve">
          <source>An exception raised by &lt;a href=&quot;#doctest.DocTestRunner&quot;&gt;&lt;code&gt;DocTestRunner&lt;/code&gt;&lt;/a&gt; to signal that a doctest example raised an unexpected exception. The constructor arguments are used to initialize the attributes of the same names.</source>
          <target state="translated">doctestの例が予期しない例外を発生させたことを通知するためにDocTestRunner によって&lt;a href=&quot;#doctest.DocTestRunner&quot;&gt; &lt;code&gt;DocTestRunner&lt;/code&gt; &lt;/a&gt;した例外。コンストラクター引数は、同じ名前の属性を初期化するために使用されます。</target>
        </trans-unit>
        <trans-unit id="2a2d6bd0f6bfde706cbcad0479411815ccfff05d" translate="yes" xml:space="preserve">
          <source>An exception raised by &lt;a href=&quot;#doctest.DocTestRunner&quot;&gt;&lt;code&gt;DocTestRunner&lt;/code&gt;&lt;/a&gt; to signal that a doctest example&amp;rsquo;s actual output did not match its expected output. The constructor arguments are used to initialize the attributes of the same names.</source>
          <target state="translated">doctestの例の実際の出力が期待される出力と一致しなかったことを通知するためにDocTestRunner によって&lt;a href=&quot;#doctest.DocTestRunner&quot;&gt; &lt;code&gt;DocTestRunner&lt;/code&gt; &lt;/a&gt;した例外。コンストラクター引数は、同じ名前の属性を初期化するために使用されます。</target>
        </trans-unit>
        <trans-unit id="d371cb40c11f76c5c36febec63cfec9705178506" translate="yes" xml:space="preserve">
          <source>An exception raised for invalid gzip files. It inherits &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;exceptions#EOFError&quot;&gt;&lt;code&gt;EOFError&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;zlib#zlib.error&quot;&gt;&lt;code&gt;zlib.error&lt;/code&gt;&lt;/a&gt; can also be raised for invalid gzip files.</source>
          <target state="translated">無効なgzipファイルに対して発生した例外。&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; を&lt;/a&gt;継承しています。&lt;a href=&quot;exceptions#EOFError&quot;&gt; &lt;code&gt;EOFError&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;zlib#zlib.error&quot;&gt; &lt;code&gt;zlib.error&lt;/code&gt; &lt;/a&gt;は、無効なgzipファイルに対しても発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="595cdbaab3299ecf183e16949385b4ed75622bb8" translate="yes" xml:space="preserve">
          <source>An exception tuple, or &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">例外タプル、または &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6b714867157f6242c971860d61ec3d6ff7556a5" translate="yes" xml:space="preserve">
          <source>An executable line in a &lt;code&gt;.pth&lt;/code&gt; file is run at every Python startup, regardless of whether a particular module is actually going to be used. Its impact should thus be kept to a minimum. The primary intended purpose of executable lines is to make the corresponding module(s) importable (load 3rd-party import hooks, adjust &lt;code id=&quot;index-3&quot;&gt;PATH&lt;/code&gt; etc). Any other initialization is supposed to be done upon a module&amp;rsquo;s actual import, if and when it happens. Limiting a code chunk to a single line is a deliberate measure to discourage putting anything more complex here.</source>
          <target state="translated">&lt;code&gt;.pth&lt;/code&gt; ファイルの実行可能行は、特定のモジュールが実際に使用されるかどうかに関係なく、Pythonの起動時に毎回実行されます。したがって、その影響は最小限に抑える必要があります。実行可能行の主な目的は、対応するモジュールをインポート可能にすることです（サードパーティのインポートフックのロード、 &lt;code id=&quot;index-3&quot;&gt;PATH&lt;/code&gt; の調整など）。その他の初期化は、それが発生した場合に、モジュールの実際のインポート時に行われることになっています。コードチャンクを1行に制限することは、複雑なものをここに配置しないようにするための意図的な手段です。</target>
        </trans-unit>
        <trans-unit id="b1add73ad794c032de45e9a10a3307ac96e89eae" translate="yes" xml:space="preserve">
          <source>An executor can be used to run a task in a different thread or even in a different process to avoid blocking the OS thread with the event loop. See the &lt;a href=&quot;asyncio-eventloop#asyncio.loop.run_in_executor&quot;&gt;&lt;code&gt;loop.run_in_executor()&lt;/code&gt;&lt;/a&gt; method for more details.</source>
          <target state="translated">エグゼキューターを使用して、別のスレッドまたは別のプロセスでタスクを実行し、イベントループでOSスレッドをブロックしないようにすることができます。詳細については、&lt;a href=&quot;asyncio-eventloop#asyncio.loop.run_in_executor&quot;&gt; &lt;code&gt;loop.run_in_executor()&lt;/code&gt; &lt;/a&gt;メソッドを参照してください。</target>
        </trans-unit>
        <trans-unit id="9e11c12943faf16444ceedb9804a38db006485b2" translate="yes" xml:space="preserve">
          <source>An existing file of the same name is overwritten.</source>
          <target state="translated">同名の既存のファイルが上書きされます。</target>
        </trans-unit>
        <trans-unit id="2e1fe8390882dfde7bc76d70b8e2cafd23494e82" translate="yes" xml:space="preserve">
          <source>An existing file of the same name is overwritten. The optional parameters have the same meaning as in &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同じ名前の既存のファイルは上書きされます。オプションのパラメータは&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;と同じ意味を持っています。</target>
        </trans-unit>
        <trans-unit id="02ba8d7a14486c8e174ff533d6d9c0663952b29e" translate="yes" xml:space="preserve">
          <source>An explanation of some terminology and conventions is in order.</source>
          <target state="translated">いくつかの用語や慣例を説明しておきます。</target>
        </trans-unit>
        <trans-unit id="afcd75246a2757517247035db4d172b90f008625" translate="yes" xml:space="preserve">
          <source>An expression such as &lt;code&gt;a if b else c&lt;/code&gt;. Each field holds a single node, so in the following example, all three are &lt;a href=&quot;#ast.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt; nodes.</source>
          <target state="translated">&lt;code&gt;a if b else c&lt;/code&gt; などの式。各フィールドは単一のノードを保持するため、次の例では、3つすべてが&lt;a href=&quot;#ast.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt;ノードです。</target>
        </trans-unit>
        <trans-unit id="890aae396d7bacf660f2e6509a7c070fac630d67" translate="yes" xml:space="preserve">
          <source>An extended example which also demonstrates the use of pointers accesses the &lt;a href=&quot;https://docs.python.org/3.8/c-api/import.html#c.PyImport_FrozenModules&quot;&gt;&lt;code&gt;PyImport_FrozenModules&lt;/code&gt;&lt;/a&gt; pointer exported by Python.</source>
          <target state="translated">ポインタの使用も示す拡張例は、Pythonによってエクスポートされた&lt;a href=&quot;https://docs.python.org/3.8/c-api/import.html#c.PyImport_FrozenModules&quot;&gt; &lt;code&gt;PyImport_FrozenModules&lt;/code&gt; &lt;/a&gt;ポインタにアクセスします。</target>
        </trans-unit>
        <trans-unit id="786f4b149806f265b7a77db548ada758892c3ee6" translate="yes" xml:space="preserve">
          <source>An extended example which also demonstrates the use of pointers accesses the &lt;a href=&quot;https://docs.python.org/3.9/c-api/import.html#c.PyImport_FrozenModules&quot;&gt;&lt;code&gt;PyImport_FrozenModules&lt;/code&gt;&lt;/a&gt; pointer exported by Python.</source>
          <target state="translated">ポインターの使用も示す拡張例は、Pythonによってエクスポートされた&lt;a href=&quot;https://docs.python.org/3.9/c-api/import.html#c.PyImport_FrozenModules&quot;&gt; &lt;code&gt;PyImport_FrozenModules&lt;/code&gt; &lt;/a&gt;ポインターにアクセスします。</target>
        </trans-unit>
        <trans-unit id="d874aff9356fc6c2a27e76364bce500fa2c6518e" translate="yes" xml:space="preserve">
          <source>An extensive list of Python testing tools including functional testing frameworks and mock object libraries.</source>
          <target state="translated">機能テストフレームワークやモックオブジェクトライブラリを含むPythonテストツールの豊富なリスト。</target>
        </trans-unit>
        <trans-unit id="5db187c411091906fb89eaeff2e7a3de90c9b6af" translate="yes" xml:space="preserve">
          <source>An f-string, comprising a series of &lt;a href=&quot;#ast.FormattedValue&quot;&gt;&lt;code&gt;FormattedValue&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ast.Constant&quot;&gt;&lt;code&gt;Constant&lt;/code&gt;&lt;/a&gt; nodes.</source>
          <target state="translated">一連の&lt;a href=&quot;#ast.FormattedValue&quot;&gt; &lt;code&gt;FormattedValue&lt;/code&gt; &lt;/a&gt;ノードと&lt;a href=&quot;#ast.Constant&quot;&gt; &lt;code&gt;Constant&lt;/code&gt; &lt;/a&gt;ノードで構成されるf文字列。</target>
        </trans-unit>
        <trans-unit id="0a23d9f159c83bfe97b484a3e6115e80af5d4380" translate="yes" xml:space="preserve">
          <source>An hour is converted to 3600 seconds.</source>
          <target state="translated">1時間を3600秒に換算しています。</target>
        </trans-unit>
        <trans-unit id="8b6236d6ba69aedf0745fd1ea63614a9e2262bf5" translate="yes" xml:space="preserve">
          <source>An id which does not have a corresponding destination.</source>
          <target state="translated">対応する宛先を持たない id。</target>
        </trans-unit>
        <trans-unit id="b4dfb427510e074283a39a54e4d9dbf2b185f2a3" translate="yes" xml:space="preserve">
          <source>An idealized naive date, assuming the current Gregorian calendar always was, and always will be, in effect. Attributes: &lt;a href=&quot;#datetime.date.year&quot;&gt;&lt;code&gt;year&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#datetime.date.month&quot;&gt;&lt;code&gt;month&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#datetime.date.day&quot;&gt;&lt;code&gt;day&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">現在のグレゴリオ暦が常に有効であり、常に有効であると仮定した、理想的なナイーブ日付。属性：&lt;a href=&quot;#datetime.date.year&quot;&gt; &lt;code&gt;year&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#datetime.date.month&quot;&gt; &lt;code&gt;month&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#datetime.date.day&quot;&gt; &lt;code&gt;day&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0a5099199c1ac259aae0741f72ef6e8d7849ea93" translate="yes" xml:space="preserve">
          <source>An idealized time, independent of any particular day, assuming that every day has exactly 24*60*60 seconds. (There is no notion of &amp;ldquo;leap seconds&amp;rdquo; here.) Attributes: &lt;a href=&quot;#datetime.time.hour&quot;&gt;&lt;code&gt;hour&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#datetime.time.minute&quot;&gt;&lt;code&gt;minute&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#datetime.time.second&quot;&gt;&lt;code&gt;second&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#datetime.time.microsecond&quot;&gt;&lt;code&gt;microsecond&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#datetime.time.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">特定の日に関係なく、理想的な時刻。毎日24 * 60 * 60秒であると仮定します。（ここでは「うるう秒」の概念はありません。）属性：&lt;a href=&quot;#datetime.time.hour&quot;&gt; &lt;code&gt;hour&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#datetime.time.minute&quot;&gt; &lt;code&gt;minute&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#datetime.time.second&quot;&gt; &lt;code&gt;second&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#datetime.time.microsecond&quot;&gt; &lt;code&gt;microsecond&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#datetime.time.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5610b3c1cc31886ddf86db3b6bfe9dce38bb3a3c" translate="yes" xml:space="preserve">
          <source>An immutable sequence providing access to the logical ancestors of the path:</source>
          <target state="translated">パスの論理的な祖先へのアクセスを提供する不変シーケンス。</target>
        </trans-unit>
        <trans-unit id="6b6c96734c11fca9ebe4c7cbcdfffa8db89d5e28" translate="yes" xml:space="preserve">
          <source>An implementation of the built-in &lt;a href=&quot;functions#__import__&quot;&gt;&lt;code&gt;__import__()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">組み込みの&lt;a href=&quot;functions#__import__&quot;&gt; &lt;code&gt;__import__()&lt;/code&gt; &lt;/a&gt;関数の実装。</target>
        </trans-unit>
        <trans-unit id="c90f6d36b2a0d230cb3491ea18751b34717c64b0" translate="yes" xml:space="preserve">
          <source>An import statement. &lt;code&gt;names&lt;/code&gt; is a list of &lt;a href=&quot;#ast.alias&quot;&gt;&lt;code&gt;alias&lt;/code&gt;&lt;/a&gt; nodes.</source>
          <target state="translated">インポートステートメント。 &lt;code&gt;names&lt;/code&gt; は、&lt;a href=&quot;#ast.alias&quot;&gt; &lt;code&gt;alias&lt;/code&gt; &lt;/a&gt;ノードのリストです。</target>
        </trans-unit>
        <trans-unit id="f7720d17fff53dae117343d8e9e4e3bdf42554ea" translate="yes" xml:space="preserve">
          <source>An important feature of proxy objects is that they are picklable so they can be passed between processes. As such, a referent can contain &lt;a href=&quot;#multiprocessing-proxy-objects&quot;&gt;Proxy Objects&lt;/a&gt;. This permits nesting of these managed lists, dicts, and other &lt;a href=&quot;#multiprocessing-proxy-objects&quot;&gt;Proxy Objects&lt;/a&gt;:</source>
          <target state="translated">プロキシオブジェクトの重要な機能は、プロセス間で受け渡しできるようにピクル可能であることです。そのため、指示対象には&lt;a href=&quot;#multiprocessing-proxy-objects&quot;&gt;プロキシオブジェクト&lt;/a&gt;を含めることができます。これにより、これらの管理リスト、辞書、およびその他の&lt;a href=&quot;#multiprocessing-proxy-objects&quot;&gt;プロキシオブジェクト&lt;/a&gt;をネストできます。</target>
        </trans-unit>
        <trans-unit id="0ca5c2b2d5e23075377145528c4bb6a274c41020" translate="yes" xml:space="preserve">
          <source>An in-memory stream for text I/O. The text buffer is discarded when the &lt;a href=&quot;#io.IOBase.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; method is called.</source>
          <target state="translated">テキストI / Oのメモリ内ストリーム。&lt;a href=&quot;#io.IOBase.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出されると、テキストバッファは破棄されます。</target>
        </trans-unit>
        <trans-unit id="7c40d804be737d2c53024a9e0ca00bbefc518b84" translate="yes" xml:space="preserve">
          <source>An incomplete character was found in the input.</source>
          <target state="translated">入力に不完全な文字が見つかりました。</target>
        </trans-unit>
        <trans-unit id="90ea41c9a0216bd11cc24452f4b96fc38cb07e7e" translate="yes" xml:space="preserve">
          <source>An indicator of the native byte order. This will have the value &lt;code&gt;'big'&lt;/code&gt; on big-endian (most-significant byte first) platforms, and &lt;code&gt;'little'&lt;/code&gt; on little-endian (least-significant byte first) platforms.</source>
          <target state="translated">ネイティブバイトオーダーのインジケータ。これは、ビッグエンディアン（最上位バイトが最初）プラットフォームで &lt;code&gt;'big'&lt;/code&gt; 、リトルエンディアン（最下位バイトが最初）プラットフォームで &lt;code&gt;'little'&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="703b3bb1868e2e8bc5b77367f969f62a6671a60f" translate="yes" xml:space="preserve">
          <source>An instance &lt;em&gt;tz&lt;/em&gt; of a &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclass that models both standard and daylight times must be consistent in this sense:</source>
          <target state="translated">標準時間と夏時間の両方をモデル化する&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;サブクラスのインスタンス&lt;em&gt;tz&lt;/em&gt;は、この意味で一貫している必要があります。</target>
        </trans-unit>
        <trans-unit id="2f07dcb4a65f5f3cfefa434bd9d52d248683b91d" translate="yes" xml:space="preserve">
          <source>An instance of (a concrete subclass of) &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; can be passed to the constructors for &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; objects. The latter objects view their attributes as being in local time, and the &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; object supports methods revealing offset of local time from UTC, the name of the time zone, and DST offset, all relative to a date or time object passed to them.</source>
          <target state="translated">&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;（の具体的なサブクラス）のインスタンスは、&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#datetime.time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;オブジェクトのコンストラクターに渡すことができます。後者のオブジェクトは、属性をローカル時間であると見なし、&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;オブジェクトは、UTCからのローカル時間のオフセット、タイムゾーンの名前、およびDSTオフセットを、すべてそれらに渡される日付または時間オブジェクトに関連して明らかにするメソッドをサポートします。</target>
        </trans-unit>
        <trans-unit id="e4b67a267f48e3562f47079d2bb418c11e0684d5" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;#asyncio.Handle&quot;&gt;&lt;code&gt;asyncio.Handle&lt;/code&gt;&lt;/a&gt; is returned, which can be used later to cancel the callback.</source>
          <target state="translated">&lt;a href=&quot;#asyncio.Handle&quot;&gt; &lt;code&gt;asyncio.Handle&lt;/code&gt; &lt;/a&gt;のインスタンスが返され、後でコールバックをキャンセルするために使用できます。</target>
        </trans-unit>
        <trans-unit id="d80ce39420c2628cfc7e1e9324435012f462488d" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;#asyncio.TimerHandle&quot;&gt;&lt;code&gt;asyncio.TimerHandle&lt;/code&gt;&lt;/a&gt; is returned which can be used to cancel the callback.</source>
          <target state="translated">コールバックのキャンセルに使用できる&lt;a href=&quot;#asyncio.TimerHandle&quot;&gt; &lt;code&gt;asyncio.TimerHandle&lt;/code&gt; &lt;/a&gt;のインスタンスが返されます。</target>
        </trans-unit>
        <trans-unit id="01872a127016c725833502fe1517e9a8bb1110fd" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;#ctypes.PyDLL&quot;&gt;&lt;code&gt;PyDLL&lt;/code&gt;&lt;/a&gt; that exposes Python C API functions as attributes. Note that all these functions are assumed to return C &lt;code&gt;int&lt;/code&gt;, which is of course not always the truth, so you have to assign the correct &lt;code&gt;restype&lt;/code&gt; attribute to use these functions.</source>
          <target state="translated">Python C API関数を属性として公開する&lt;a href=&quot;#ctypes.PyDLL&quot;&gt; &lt;code&gt;PyDLL&lt;/code&gt; &lt;/a&gt;のインスタンス。これらの関数はすべてC &lt;code&gt;int&lt;/code&gt; を返すと想定されていることに注意してください。もちろん、これは常に真とは限りません。したがって、これらの関数を使用するには、正しい &lt;code&gt;restype&lt;/code&gt; 属性を割り当てる必要があります。</target>
        </trans-unit>
        <trans-unit id="c664e0f73090f1e1bd70299e8da8a6073f9919cd" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;#email.policy.Compat32&quot;&gt;&lt;code&gt;Compat32&lt;/code&gt;&lt;/a&gt;, providing backward compatibility with the behavior of the email package in Python 3.2.</source>
          <target state="translated">&lt;a href=&quot;#email.policy.Compat32&quot;&gt; &lt;code&gt;Compat32&lt;/code&gt; &lt;/a&gt;のインスタンス。Python3.2の電子メールパッケージの動作との下位互換性を提供します。</target>
        </trans-unit>
        <trans-unit id="753712898d5c60e92ce9fc7f47232fd4e688b279" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;EmailPolicy&lt;/code&gt; with all defaults unchanged. This policy uses the standard Python &lt;code&gt;\n&lt;/code&gt; line endings rather than the RFC-correct &lt;code&gt;\r\n&lt;/code&gt;.</source>
          <target state="translated">すべてのデフォルトが変更されていない &lt;code&gt;EmailPolicy&lt;/code&gt; のインスタンス。このポリシーは、RFCが正しい &lt;code&gt;\r\n&lt;/code&gt; ではなく、標準のPython &lt;code&gt;\n&lt;/code&gt; 行末を使用します。</target>
        </trans-unit>
        <trans-unit id="6eefcaafe768844d20d2285a9ea781eccd2b0ead" translate="yes" xml:space="preserve">
          <source>An int containing the default buffer size used by the module&amp;rsquo;s buffered I/O classes. &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; uses the file&amp;rsquo;s blksize (as obtained by &lt;a href=&quot;os#os.stat&quot;&gt;&lt;code&gt;os.stat()&lt;/code&gt;&lt;/a&gt;) if possible.</source>
          <target state="translated">モジュールのバッファーされたI / Oクラスで使用されるデフォルトのバッファーサイズを含むint。&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;は、可能であれば、ファイルのblksize（&lt;a href=&quot;os#os.stat&quot;&gt; &lt;code&gt;os.stat()&lt;/code&gt; &lt;/a&gt;によって取得される）を使用します。</target>
        </trans-unit>
        <trans-unit id="6753a22067c075c8c9a4c5a84ef7830915742ad2" translate="yes" xml:space="preserve">
          <source>An integer between zero and the number of tabs</source>
          <target state="translated">ゼロとタブ数の間の整数。</target>
        </trans-unit>
        <trans-unit id="645936da5c83c45f9587c17d8b318b09bd721e60" translate="yes" xml:space="preserve">
          <source>An integer containing the number of characters written to the stream before it blocked. This attribute is available when using the buffered I/O classes from the &lt;a href=&quot;io#module-io&quot;&gt;&lt;code&gt;io&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">ブロックされる前にストリームに書き込まれた文字数を含む整数。この属性は、&lt;a href=&quot;io#module-io&quot;&gt; &lt;code&gt;io&lt;/code&gt; &lt;/a&gt;モジュールのバッファー付きI / Oクラスを使用するときに使用できます。</target>
        </trans-unit>
        <trans-unit id="7f40b0022f33627acc9876d1e86f6750f237785b" translate="yes" xml:space="preserve">
          <source>An integer giving the maximum value a variable of type &lt;code&gt;Py_ssize_t&lt;/code&gt; can take. It&amp;rsquo;s usually &lt;code&gt;2**31 - 1&lt;/code&gt; on a 32-bit platform and &lt;code&gt;2**63 - 1&lt;/code&gt; on a 64-bit platform.</source>
          <target state="translated">&lt;code&gt;Py_ssize_t&lt;/code&gt; 型の変数がとることができる最大値を与える整数。これは通常だ &lt;code&gt;2**31 - 1&lt;/code&gt; 32ビットプラットフォーム上と &lt;code&gt;2**63 - 1&lt;/code&gt; 64ビットプラットフォーム上。</target>
        </trans-unit>
        <trans-unit id="b4f6a82aa8fc81a2e88d2ec14a5abf2c015f9ab5" translate="yes" xml:space="preserve">
          <source>An integer giving the number of sub keys this key has.</source>
          <target state="translated">このキーが持つサブキーの数を表す整数。</target>
        </trans-unit>
        <trans-unit id="e3671820be7fdb3b8d7153be88789dda60eca34a" translate="yes" xml:space="preserve">
          <source>An integer giving the number of values this key has.</source>
          <target state="translated">このキーが持つ値の数を表す整数値。</target>
        </trans-unit>
        <trans-unit id="61158287398e3913556fd8de17d987f121a49ce2" translate="yes" xml:space="preserve">
          <source>An integer giving the registry type for this value (see table in docs for &lt;a href=&quot;#winreg.SetValueEx&quot;&gt;&lt;code&gt;SetValueEx()&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">この値のレジストリタイプを示す整数（ドキュメントの&lt;a href=&quot;#winreg.SetValueEx&quot;&gt; &lt;code&gt;SetValueEx()&lt;/code&gt; の&lt;/a&gt;表を参照）</target>
        </trans-unit>
        <trans-unit id="9c4fb4071cc7728855d3b16ff06baa25bc7f67a5" translate="yes" xml:space="preserve">
          <source>An integer giving the value of the largest Unicode code point, i.e. &lt;code&gt;1114111&lt;/code&gt; (&lt;code&gt;0x10FFFF&lt;/code&gt; in hexadecimal).</source>
          <target state="translated">最大のUnicodeコードポイントの値を示す整数、つまり &lt;code&gt;1114111&lt;/code&gt; （16進数で &lt;code&gt;0x10FFFF&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="70ed9451b9be56604da549be2ff4d27c0a823db6" translate="yes" xml:space="preserve">
          <source>An integer giving when the key was last modified (if available) as 100&amp;rsquo;s of nanoseconds since Jan 1, 1601.</source>
          <target state="translated">キーが最後に変更されたとき（利用可能な場合）を表す整数。1601年1月1日から数百ナノ秒。</target>
        </trans-unit>
        <trans-unit id="17b0fef7eb70950fd1875b2099b192af05f223df" translate="yes" xml:space="preserve">
          <source>An integer indicating how many dimensions of a multi-dimensional array the memory represents.</source>
          <target state="translated">メモリが表す多次元配列の次元数を示す整数。</target>
        </trans-unit>
        <trans-unit id="8bef0117d73063c1a4d56593cf70e5fec7f031c6" translate="yes" xml:space="preserve">
          <source>An integer keeping track of how many times the mock object has been awaited.</source>
          <target state="translated">モックオブジェクトが何回待たされたかを追跡する整数値。</target>
        </trans-unit>
        <trans-unit id="ae0518f4d7529a2d85bc7601acec4302104bbbbb" translate="yes" xml:space="preserve">
          <source>An integer n, specifying the nth data column.</source>
          <target state="translated">n 番目のデータ列を指定する整数 n。</target>
        </trans-unit>
        <trans-unit id="b0d279e661a8927158d65f021e9f995b44d56314" translate="yes" xml:space="preserve">
          <source>An integer packed into a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object of length 16, big-endian.</source>
          <target state="translated">長さ16、ビッグエンディアンの&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;オブジェクトにパックされた整数。</target>
        </trans-unit>
        <trans-unit id="646e733efcef9696eb9443aa091caa22bf73aa29" translate="yes" xml:space="preserve">
          <source>An integer packed into a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object of length 16, big-endian. The interpretation is similar to an integer &lt;em&gt;address&lt;/em&gt;.</source>
          <target state="translated">長さ16、ビッグエンディアンの&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;オブジェクトにパックされた整数。解釈は整数&lt;em&gt;アドレスに&lt;/em&gt;似てい&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f6f5ca0496bffcd3b5349fb91457405154481dd3" translate="yes" xml:space="preserve">
          <source>An integer packed into a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object of length 4 (most significant octet first).</source>
          <target state="translated">長さ4（最上位オクテットが最初）の&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;オブジェクトにパックされた整数。</target>
        </trans-unit>
        <trans-unit id="64aac0469b4285c7ace562fb45219c88f4d45beb" translate="yes" xml:space="preserve">
          <source>An integer packed into a &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object of length 4, big-endian. The interpretation is similar to an integer &lt;em&gt;address&lt;/em&gt;.</source>
          <target state="translated">長さ4、ビッグエンディアンの&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;オブジェクトにパックされた整数。解釈は整数&lt;em&gt;アドレスに&lt;/em&gt;似てい&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="882a8de446fcecf6cab8bc081fa438fcd87c37bf" translate="yes" xml:space="preserve">
          <source>An integer preceded by &lt;code&gt;@&lt;/code&gt;, as in &lt;code&gt;@6&lt;/code&gt;, where the integer is interpreted as a y pixel coordinate in the menu&amp;rsquo;s coordinate system;</source>
          <target state="translated">が先行整数 &lt;code&gt;@&lt;/code&gt; のように、 &lt;code&gt;@6&lt;/code&gt; 整数をAYピクセルとして解釈され、メニューの座標系における座標。</target>
        </trans-unit>
        <trans-unit id="dc8c87923a15988fabf3c441c9e1307e478e6d10" translate="yes" xml:space="preserve">
          <source>An integer representing the node type. Symbolic constants for the types are on the &lt;code&gt;Node&lt;/code&gt; object: &lt;code&gt;ELEMENT_NODE&lt;/code&gt;, &lt;code&gt;ATTRIBUTE_NODE&lt;/code&gt;, &lt;code&gt;TEXT_NODE&lt;/code&gt;, &lt;code&gt;CDATA_SECTION_NODE&lt;/code&gt;, &lt;code&gt;ENTITY_NODE&lt;/code&gt;, &lt;code&gt;PROCESSING_INSTRUCTION_NODE&lt;/code&gt;, &lt;code&gt;COMMENT_NODE&lt;/code&gt;, &lt;code&gt;DOCUMENT_NODE&lt;/code&gt;, &lt;code&gt;DOCUMENT_TYPE_NODE&lt;/code&gt;, &lt;code&gt;NOTATION_NODE&lt;/code&gt;. This is a read-only attribute.</source>
          <target state="translated">ノードタイプを表す整数。タイプのためのシンボリック定数は上にある &lt;code&gt;Node&lt;/code&gt; オブジェクト： &lt;code&gt;ELEMENT_NODE&lt;/code&gt; 、 &lt;code&gt;ATTRIBUTE_NODE&lt;/code&gt; 、 &lt;code&gt;TEXT_NODE&lt;/code&gt; 、 &lt;code&gt;CDATA_SECTION_NODE&lt;/code&gt; 、 &lt;code&gt;ENTITY_NODE&lt;/code&gt; 、 &lt;code&gt;PROCESSING_INSTRUCTION_NODE&lt;/code&gt; 、 &lt;code&gt;COMMENT_NODE&lt;/code&gt; 、 &lt;code&gt;DOCUMENT_NODE&lt;/code&gt; 、 &lt;code&gt;DOCUMENT_TYPE_NODE&lt;/code&gt; 、 &lt;code&gt;NOTATION_NODE&lt;/code&gt; 。これは読み取り専用属性です。</target>
        </trans-unit>
        <trans-unit id="f1a555fc41c7502bfba0c65b97ab4ac5b9cd080b" translate="yes" xml:space="preserve">
          <source>An integer representing the set of SSL options enabled on this context. The default value is &lt;a href=&quot;#ssl.OP_ALL&quot;&gt;&lt;code&gt;OP_ALL&lt;/code&gt;&lt;/a&gt;, but you can specify other options such as &lt;a href=&quot;#ssl.OP_NO_SSLv2&quot;&gt;&lt;code&gt;OP_NO_SSLv2&lt;/code&gt;&lt;/a&gt; by ORing them together.</source>
          <target state="translated">このコンテキストで有効になっているSSLオプションのセットを表す整数。デフォルト値は&lt;a href=&quot;#ssl.OP_ALL&quot;&gt; &lt;code&gt;OP_ALL&lt;/code&gt; &lt;/a&gt;ですが、&lt;a href=&quot;#ssl.OP_NO_SSLv2&quot;&gt; &lt;code&gt;OP_NO_SSLv2&lt;/code&gt; &lt;/a&gt;などの他のオプションをORすることで指定できます。</target>
        </trans-unit>
        <trans-unit id="3e38281ba09868abdfe8882473c5fa3690e426a3" translate="yes" xml:space="preserve">
          <source>An integer representing the version of the NNTP protocol supported by the server. In practice, this should be &lt;code&gt;2&lt;/code&gt; for servers advertising &lt;a href=&quot;https://tools.ietf.org/html/rfc3977.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 3977&lt;/strong&gt;&lt;/a&gt; compliance and &lt;code&gt;1&lt;/code&gt; for others.</source>
          <target state="translated">サーバーがサポートするNNTPプロトコルのバージョンを表す整数。実際には、これは&lt;a href=&quot;https://tools.ietf.org/html/rfc3977.html&quot; id=&quot;index-5&quot;&gt;&lt;strong&gt;RFC 3977&lt;/strong&gt;&lt;/a&gt;コンプライアンスをアドバタイズするサーバーの場合は &lt;code&gt;2&lt;/code&gt; 、その他の場合は &lt;code&gt;1&lt;/code&gt; にする必要があります。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="543f543f7b3326e3df52c58c046ecc3ca49dcfe2" translate="yes" xml:space="preserve">
          <source>An integer telling you how many times the mock object has been called:</source>
          <target state="translated">モックオブジェクトが何回呼ばれたかを示す整数値。</target>
        </trans-unit>
        <trans-unit id="187f154843eb20b15b663f5ef77b74ffa766be88" translate="yes" xml:space="preserve">
          <source>An integer that fits into 128 bits.</source>
          <target state="translated">128ビットに収まる整数。</target>
        </trans-unit>
        <trans-unit id="4243e776fd6616aba00dbcc2c2488ad7be2afc37" translate="yes" xml:space="preserve">
          <source>An integer that fits into 128 bits. This is equivalent to a single-address network, with the network address being &lt;em&gt;address&lt;/em&gt; and the mask being &lt;code&gt;/128&lt;/code&gt;.</source>
          <target state="translated">128ビットに収まる整数。これは単一アドレスネットワークと同等で、ネットワークアドレスは&lt;em&gt;アドレス&lt;/em&gt;で、マスクは &lt;code&gt;/128&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="44316d770fca56bd5eaaf3a3511c5ee64cecdc22" translate="yes" xml:space="preserve">
          <source>An integer that fits into 32 bits.</source>
          <target state="translated">32ビットに収まる整数。</target>
        </trans-unit>
        <trans-unit id="ecdd55c3c245e5b3b8388fa54918c20b35e6e67f" translate="yes" xml:space="preserve">
          <source>An integer that fits into 32 bits. This is equivalent to a single-address network, with the network address being &lt;em&gt;address&lt;/em&gt; and the mask being &lt;code&gt;/32&lt;/code&gt;.</source>
          <target state="translated">32ビットに収まる整数。これは単一アドレスネットワークと同等であり、ネットワークアドレスは&lt;em&gt;アドレス&lt;/em&gt;で、マスクは &lt;code&gt;/32&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a078dc74c1c703bd1abf51f26bcdd05ff58dc2cc" translate="yes" xml:space="preserve">
          <source>An integer that identifies the type of the value data (see table in docs for &lt;a href=&quot;#winreg.SetValueEx&quot;&gt;&lt;code&gt;SetValueEx()&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">値データのタイプを識別する整数（ドキュメントの&lt;a href=&quot;#winreg.SetValueEx&quot;&gt; &lt;code&gt;SetValueEx()&lt;/code&gt; の&lt;/a&gt;表を参照）</target>
        </trans-unit>
        <trans-unit id="6221568d61a57ce1a59e1d75f271d5b94fd58a61" translate="yes" xml:space="preserve">
          <source>An integer, the default &lt;a href=&quot;#pickle-protocols&quot;&gt;protocol version&lt;/a&gt; used for pickling. May be less than &lt;a href=&quot;#pickle.HIGHEST_PROTOCOL&quot;&gt;&lt;code&gt;HIGHEST_PROTOCOL&lt;/code&gt;&lt;/a&gt;. Currently the default protocol is 4, first introduced in Python 3.4 and incompatible with previous versions.</source>
          <target state="translated">整数、酸洗いに使用されるデフォルトの&lt;a href=&quot;#pickle-protocols&quot;&gt;プロトコルバージョン&lt;/a&gt;。&lt;a href=&quot;#pickle.HIGHEST_PROTOCOL&quot;&gt; &lt;code&gt;HIGHEST_PROTOCOL&lt;/code&gt; &lt;/a&gt;未満の場合があります。現在、デフォルトのプロトコルは4です。最初にPython 3.4で導入され、以前のバージョンと互換性がありません。</target>
        </trans-unit>
        <trans-unit id="b3ff29ab8afde8b6ee23d29bb72e09168c7b6f37" translate="yes" xml:space="preserve">
          <source>An integer, the highest &lt;a href=&quot;#pickle-protocols&quot;&gt;protocol version&lt;/a&gt; available. This value can be passed as a &lt;em&gt;protocol&lt;/em&gt; value to functions &lt;a href=&quot;#pickle.dump&quot;&gt;&lt;code&gt;dump()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pickle.dumps&quot;&gt;&lt;code&gt;dumps()&lt;/code&gt;&lt;/a&gt; as well as the &lt;a href=&quot;#pickle.Pickler&quot;&gt;&lt;code&gt;Pickler&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">整数、利用可能な最も高い&lt;a href=&quot;#pickle-protocols&quot;&gt;プロトコルバージョン&lt;/a&gt;。この値は、&lt;em&gt;プロトコル&lt;/em&gt;値として関数&lt;a href=&quot;#pickle.dump&quot;&gt; &lt;code&gt;dump()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#pickle.dumps&quot;&gt; &lt;code&gt;dumps()&lt;/code&gt; &lt;/a&gt;だけでなく、&lt;a href=&quot;#pickle.Pickler&quot;&gt; &lt;code&gt;Pickler&lt;/code&gt; &lt;/a&gt;コンストラクターにも渡すことができます。</target>
        </trans-unit>
        <trans-unit id="89f7acaa85bea0ee87dbe1ef47defa1dd89b2cca" translate="yes" xml:space="preserve">
          <source>An interface to the group database, similar to this.</source>
          <target state="translated">これに似たグループデータベースへのインターフェース。</target>
        </trans-unit>
        <trans-unit id="59cb6ef37b0cd57060129e4c5a383119176babe9" translate="yes" xml:space="preserve">
          <source>An interface to the normal password database, similar to this.</source>
          <target state="translated">これに似た、通常のパスワードデータベースへのインターフェース。</target>
        </trans-unit>
        <trans-unit id="23aa9ac5ddca3f3d883d5cc83284856548229022" translate="yes" xml:space="preserve">
          <source>An interface to the shadow password database, similar to this.</source>
          <target state="translated">これに似たシャドウパスワードデータベースへのインターフェース。</target>
        </trans-unit>
        <trans-unit id="994fe15ee3ca3aa04c018a8fe65a5d200d8e16aa" translate="yes" xml:space="preserve">
          <source>An interface to the user database, similar to this.</source>
          <target state="translated">これに似たユーザーデータベースへのインターフェース。</target>
        </trans-unit>
        <trans-unit id="8d1844ce395b8e9fdc98c2cc653690def38555f0" translate="yes" xml:space="preserve">
          <source>An interpreter instance will recognize a command name &lt;code&gt;foo&lt;/code&gt; if and only if it has a method &lt;code&gt;do_foo()&lt;/code&gt;. As a special case, a line beginning with the character &lt;code&gt;'?'&lt;/code&gt; is dispatched to the method &lt;code&gt;do_help()&lt;/code&gt;. As another special case, a line beginning with the character &lt;code&gt;'!'&lt;/code&gt; is dispatched to the method &lt;code&gt;do_shell()&lt;/code&gt; (if such a method is defined).</source>
          <target state="translated">インタープリターインスタンスは、メソッド &lt;code&gt;do_foo()&lt;/code&gt; がある場合に限り、コマンド名 &lt;code&gt;foo&lt;/code&gt; を認識します。特殊なケースとして、文字 &lt;code&gt;'?'&lt;/code&gt; 始まる行 メソッド &lt;code&gt;do_help()&lt;/code&gt; にディスパッチされます。別の特殊なケースとして、文字 &lt;code&gt;'!'&lt;/code&gt; 始まる行 メソッド &lt;code&gt;do_shell()&lt;/code&gt; にディスパッチされます（そのようなメソッドが定義されている場合）。</target>
        </trans-unit>
        <trans-unit id="a6fc8b26e70e09d313612cac6794fdb4aad1682f" translate="yes" xml:space="preserve">
          <source>An invalid logger name.</source>
          <target state="translated">無効なロガー名です。</target>
        </trans-unit>
        <trans-unit id="74a940fd099263dda413cd8757526ef0956f8af4" translate="yes" xml:space="preserve">
          <source>An invalid operation was performed.</source>
          <target state="translated">無効な操作が行われました。</target>
        </trans-unit>
        <trans-unit id="7a26e16375583adf85ddeccaecb2b8c4ef50d837" translate="yes" xml:space="preserve">
          <source>An object containing information about the implementation of the currently running Python interpreter. The following attributes are required to exist in all Python implementations.</source>
          <target state="translated">現在実行中のPythonインタプリタの実装に関する情報を含むオブジェクト。以下の属性はすべてのPython実装に存在する必要があります。</target>
        </trans-unit>
        <trans-unit id="998e5eccbd293e12c5532b4dc44ce7656abeec0b" translate="yes" xml:space="preserve">
          <source>An object of type &lt;a href=&quot;#datetime.time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; may be aware or naive.</source>
          <target state="translated">タイプ&lt;a href=&quot;#datetime.time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;のオブジェクトは、認識またはナイーブである場合があります。</target>
        </trans-unit>
        <trans-unit id="b174b298545e9f1f9dff3565076e2ed782564e88" translate="yes" xml:space="preserve">
          <source>An object that holds the value data, and whose type depends on the underlying registry type</source>
          <target state="translated">値のデータを保持するオブジェクトで、その型は基礎となるレジストリの型に依存します。</target>
        </trans-unit>
        <trans-unit id="97080ae4ed5d803c9b0a23c71de971dafd14c52c" translate="yes" xml:space="preserve">
          <source>An object that wraps OS processes created by the &lt;a href=&quot;#asyncio.create_subprocess_exec&quot;&gt;&lt;code&gt;create_subprocess_exec()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#asyncio.create_subprocess_shell&quot;&gt;&lt;code&gt;create_subprocess_shell()&lt;/code&gt;&lt;/a&gt; functions.</source>
          <target state="translated">&lt;a href=&quot;#asyncio.create_subprocess_exec&quot;&gt; &lt;code&gt;create_subprocess_exec()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#asyncio.create_subprocess_shell&quot;&gt; &lt;code&gt;create_subprocess_shell()&lt;/code&gt; &lt;/a&gt;関数によって作成されたOSプロセスをラップするオブジェクト。</target>
        </trans-unit>
        <trans-unit id="6159e0ee946985cc1c35519ceaa4c338a8e80214" translate="yes" xml:space="preserve">
          <source>An object with a subset of pathlib.Path methods suitable for traversing directories and opening files.</source>
          <target state="translated">ディレクトリをトラバースしたりファイルを開いたりするのに適したpathlib.Pathメソッドのサブセットを持つオブジェクト。</target>
        </trans-unit>
        <trans-unit id="647c7a24d6cf9ebcbec2e05257e54cb377032a7a" translate="yes" xml:space="preserve">
          <source>An object with at least two methods: get_content and set_content. When the &lt;a href=&quot;email.message#email.message.EmailMessage.get_content&quot;&gt;&lt;code&gt;get_content()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;email.message#email.message.EmailMessage.set_content&quot;&gt;&lt;code&gt;set_content()&lt;/code&gt;&lt;/a&gt; method of an &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; object is called, it calls the corresponding method of this object, passing it the message object as its first argument, and any arguments or keywords that were passed to it as additional arguments. By default &lt;code&gt;content_manager&lt;/code&gt; is set to &lt;a href=&quot;email.contentmanager#email.contentmanager.raw_data_manager&quot;&gt;&lt;code&gt;raw_data_manager&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">少なくとも2つのメソッド（get_contentおよびset_content）を持つオブジェクト。場合&lt;a href=&quot;email.message#email.message.EmailMessage.get_content&quot;&gt; &lt;code&gt;get_content()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;email.message#email.message.EmailMessage.set_content&quot;&gt; &lt;code&gt;set_content()&lt;/code&gt; &lt;/a&gt;のメソッド&lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; のの&lt;/a&gt;オブジェクトが呼び出されると、それはその最初の引数としてそれをメッセージ・オブジェクトを渡し、このオブジェクトの該当メソッドを呼び出し、追加引数として渡された引数やキーワード。デフォルトでは、 &lt;code&gt;content_manager&lt;/code&gt; は&lt;a href=&quot;email.contentmanager#email.contentmanager.raw_data_manager&quot;&gt; &lt;code&gt;raw_data_manager&lt;/code&gt; に&lt;/a&gt;設定されています。</target>
        </trans-unit>
        <trans-unit id="1865264489923958e5df1f2c9473facc3252cce6" translate="yes" xml:space="preserve">
          <source>An operation was requested that requires DTD support to be compiled in, but Expat was configured without DTD support. This should never be reported by a standard build of the &lt;a href=&quot;#module-xml.parsers.expat&quot;&gt;&lt;code&gt;xml.parsers.expat&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">DTDサポートのコンパイルが必要な操作が要求されましたが、ExpatはDTDサポートなしで構成されました。これは、&lt;a href=&quot;#module-xml.parsers.expat&quot;&gt; &lt;code&gt;xml.parsers.expat&lt;/code&gt; &lt;/a&gt;モジュールの標準ビルドでは報告されません。</target>
        </trans-unit>
        <trans-unit id="4947a546c6d3f34597067ace626c8f1253938be2" translate="yes" xml:space="preserve">
          <source>An optional keyword-only &lt;em&gt;context&lt;/em&gt; argument allows specifying a custom &lt;a href=&quot;contextvars#contextvars.Context&quot;&gt;&lt;code&gt;contextvars.Context&lt;/code&gt;&lt;/a&gt; for the &lt;em&gt;callback&lt;/em&gt; to run in. The current context is used when no &lt;em&gt;context&lt;/em&gt; is provided.</source>
          <target state="translated">オプションのキーワードのみの&lt;em&gt;コンテキスト&lt;/em&gt;引数により、実行する&lt;em&gt;コールバックの&lt;/em&gt;カスタム&lt;a href=&quot;contextvars#contextvars.Context&quot;&gt; &lt;code&gt;contextvars.Context&lt;/code&gt; &lt;/a&gt;を指定できます。現在のコンテキストは、コンテキストが指定されていない&lt;em&gt;場合に&lt;/em&gt;使用されます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9ea3a8a5b272ed84ab311819ca2985d04005ee2d" translate="yes" xml:space="preserve">
          <source>An optional method which, when called, should invalidate any internal cache used by the finder. Used by &lt;a href=&quot;#importlib.invalidate_caches&quot;&gt;&lt;code&gt;importlib.invalidate_caches()&lt;/code&gt;&lt;/a&gt; when invalidating the caches of all finders on &lt;a href=&quot;sys#sys.meta_path&quot;&gt;&lt;code&gt;sys.meta_path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">呼び出されたときに、ファインダーが使用する内部キャッシュを無効にするオプションのメソッド。&lt;a href=&quot;sys#sys.meta_path&quot;&gt; &lt;code&gt;sys.meta_path&lt;/code&gt; &lt;/a&gt;上のすべてのファインダーのキャッシュを無効にするときに&lt;a href=&quot;#importlib.invalidate_caches&quot;&gt; &lt;code&gt;importlib.invalidate_caches()&lt;/code&gt; &lt;/a&gt;によって使用されます。</target>
        </trans-unit>
        <trans-unit id="9077f55d2b0b62326a8204fc9578f269c9e7d89a" translate="yes" xml:space="preserve">
          <source>An optional method which, when called, should invalidate any internal cache used by the finder. Used by &lt;code&gt;PathFinder.invalidate_caches()&lt;/code&gt; when invalidating the caches of all cached finders.</source>
          <target state="translated">呼び出されたときに、ファインダーが使用する内部キャッシュを無効にするオプションのメソッド。キャッシュされたすべてのファインダーのキャッシュを無効にするときに、 &lt;code&gt;PathFinder.invalidate_caches()&lt;/code&gt; によって使用されます。</target>
        </trans-unit>
        <trans-unit id="1c77488f2592943bd451545ce7ed54c2b1a12d3c" translate="yes" xml:space="preserve">
          <source>An optional sequence that lists the names of unnamed (anonymous) fields. &lt;a href=&quot;#ctypes.Structure._anonymous_&quot;&gt;&lt;code&gt;_anonymous_&lt;/code&gt;&lt;/a&gt; must be already defined when &lt;a href=&quot;#ctypes.Structure._fields_&quot;&gt;&lt;code&gt;_fields_&lt;/code&gt;&lt;/a&gt; is assigned, otherwise it will have no effect.</source>
          <target state="translated">名前のない（匿名の）フィールドの名前をリストするオプションのシーケンス。&lt;a href=&quot;#ctypes.Structure._anonymous_&quot;&gt; &lt;code&gt;_anonymous_&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;#ctypes.Structure._fields_&quot;&gt; &lt;code&gt;_fields_&lt;/code&gt; &lt;/a&gt;が割り当てられたときにすでに定義されている必要があります。そうでない場合、効果はありません。</target>
        </trans-unit>
        <trans-unit id="b40583112592749895ecadcf35532f5fbb351912" translate="yes" xml:space="preserve">
          <source>An optional shebang line, containing the characters &lt;code&gt;b'#!'&lt;/code&gt; followed by an interpreter name, and then a newline (&lt;code&gt;b'\n'&lt;/code&gt;) character. The interpreter name can be anything acceptable to the OS &amp;ldquo;shebang&amp;rdquo; processing, or the Python launcher on Windows. The interpreter should be encoded in UTF-8 on Windows, and in &lt;a href=&quot;sys#sys.getfilesystemencoding&quot;&gt;&lt;code&gt;sys.getfilesystemencoding()&lt;/code&gt;&lt;/a&gt; on POSIX.</source>
          <target state="translated">文字 &lt;code&gt;b'#!'&lt;/code&gt; を含むオプションのシバン行 続いてインタープリター名、次に改行（ &lt;code&gt;b'\n'&lt;/code&gt; ）文字。インタープリター名は、OSの「shebang」処理、またはWindowsのPythonランチャーで受け入れ可能なものであれば何でもかまいません。インタープリターは、WindowsではUTF-8 、POSIXでは&lt;a href=&quot;sys#sys.getfilesystemencoding&quot;&gt; &lt;code&gt;sys.getfilesystemencoding()&lt;/code&gt; &lt;/a&gt;でエンコードする必要があります。</target>
        </trans-unit>
        <trans-unit id="eadbfe27c0b9f4036e4c5d9ffd152ecaddfb607d" translate="yes" xml:space="preserve">
          <source>An optional small integer that allows overriding the alignment of structure fields in the instance. &lt;a href=&quot;#ctypes.Structure._pack_&quot;&gt;&lt;code&gt;_pack_&lt;/code&gt;&lt;/a&gt; must already be defined when &lt;a href=&quot;#ctypes.Structure._fields_&quot;&gt;&lt;code&gt;_fields_&lt;/code&gt;&lt;/a&gt; is assigned, otherwise it will have no effect.</source>
          <target state="translated">インスタンスの構造体フィールドの配置をオーバーライドできるオプションの短整数。&lt;a href=&quot;#ctypes.Structure._pack_&quot;&gt; &lt;code&gt;_pack_&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;#ctypes.Structure._fields_&quot;&gt; &lt;code&gt;_fields_&lt;/code&gt; &lt;/a&gt;が割り当てられるときにすでに定義されている必要があります。そうでない場合、効果はありません。</target>
        </trans-unit>
        <trans-unit id="79293485a901f4be4341911a3c3007d1e643a627" translate="yes" xml:space="preserve">
          <source>An ordered enumeration that is not based on &lt;a href=&quot;#enum.IntEnum&quot;&gt;&lt;code&gt;IntEnum&lt;/code&gt;&lt;/a&gt; and so maintains the normal &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; invariants (such as not being comparable to other enumerations):</source>
          <target state="translated">&lt;a href=&quot;#enum.IntEnum&quot;&gt; &lt;code&gt;IntEnum&lt;/code&gt; に&lt;/a&gt;基づいていないため、通常の&lt;a href=&quot;#enum.Enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;不変式を維持する順序付けされた列挙（他の列挙と比較できないなど）：</target>
        </trans-unit>
        <trans-unit id="a54eaeb427bd767e9c78a3fcf6309d624d005ab3" translate="yes" xml:space="preserve">
          <source>An ordered mapping of parameters&amp;rsquo; names to the corresponding &lt;a href=&quot;#inspect.Parameter&quot;&gt;&lt;code&gt;Parameter&lt;/code&gt;&lt;/a&gt; objects. Parameters appear in strict definition order, including keyword-only parameters.</source>
          <target state="translated">対応する&lt;a href=&quot;#inspect.Parameter&quot;&gt; &lt;code&gt;Parameter&lt;/code&gt; &lt;/a&gt;オブジェクトへのパラメーターの名前の順序付けられたマッピング。パラメーターは、キーワードのみのパラメーターを含め、厳密な定義順に表示されます。</target>
        </trans-unit>
        <trans-unit id="e73d51218d474d87723969e9844e08e443986117" translate="yes" xml:space="preserve">
          <source>An ordered, mutable mapping (&lt;a href=&quot;collections#collections.OrderedDict&quot;&gt;&lt;code&gt;collections.OrderedDict&lt;/code&gt;&lt;/a&gt;) of parameters&amp;rsquo; names to arguments&amp;rsquo; values. Contains only explicitly bound arguments. Changes in &lt;a href=&quot;#inspect.BoundArguments.arguments&quot;&gt;&lt;code&gt;arguments&lt;/code&gt;&lt;/a&gt; will reflect in &lt;a href=&quot;#inspect.BoundArguments.args&quot;&gt;&lt;code&gt;args&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#inspect.BoundArguments.kwargs&quot;&gt;&lt;code&gt;kwargs&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パラメータの名前から引数の値への順序付けされた変更可能なマッピング（&lt;a href=&quot;collections#collections.OrderedDict&quot;&gt; &lt;code&gt;collections.OrderedDict&lt;/code&gt; &lt;/a&gt;）。明示的にバインドされた引数のみが含まれます。&lt;a href=&quot;#inspect.BoundArguments.arguments&quot;&gt; &lt;code&gt;arguments&lt;/code&gt; &lt;/a&gt;変更は&lt;a href=&quot;#inspect.BoundArguments.args&quot;&gt; &lt;code&gt;args&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#inspect.BoundArguments.kwargs&quot;&gt; &lt;code&gt;kwargs&lt;/code&gt; に&lt;/a&gt;反映されます。</target>
        </trans-unit>
        <trans-unit id="6b5b35b74ba6101747c9d4196b50ff8061dcc151" translate="yes" xml:space="preserve">
          <source>An output filename must be specified if the &lt;em&gt;source&lt;/em&gt; is an archive (and in that case, &lt;em&gt;output&lt;/em&gt; must not be the same as &lt;em&gt;source&lt;/em&gt;).</source>
          <target state="translated">&lt;em&gt;ソース&lt;/em&gt;がアーカイブの場合、出力ファイル名を指定する必要があります（その場合、&lt;em&gt;出力&lt;/em&gt;は&lt;em&gt;source&lt;/em&gt;と同じであってはなりません）。</target>
        </trans-unit>
        <trans-unit id="521aa7e611225a521017270940523db0f976f977" translate="yes" xml:space="preserve">
          <source>An undeclared prefix was found when namespace processing was enabled.</source>
          <target state="translated">名前空間処理が有効になっているときに、宣言されていない接頭辞が見つかりました。</target>
        </trans-unit>
        <trans-unit id="9656bc89a24603fa1dca440ac3a2361066df5ac5" translate="yes" xml:space="preserve">
          <source>An unrelated but handy function that takes a time tuple such as returned by the &lt;a href=&quot;time#time.gmtime&quot;&gt;&lt;code&gt;gmtime()&lt;/code&gt;&lt;/a&gt; function in the &lt;a href=&quot;time#module-time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; module, and returns the corresponding Unix timestamp value, assuming an epoch of 1970, and the POSIX encoding. In fact, &lt;a href=&quot;time#time.gmtime&quot;&gt;&lt;code&gt;time.gmtime()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#calendar.timegm&quot;&gt;&lt;code&gt;timegm()&lt;/code&gt;&lt;/a&gt; are each others&amp;rsquo; inverse.</source>
          <target state="translated">&lt;a href=&quot;time#module-time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;モジュールの&lt;a href=&quot;time#time.gmtime&quot;&gt; &lt;code&gt;gmtime()&lt;/code&gt; &lt;/a&gt;関数によって返されるような時間タプルを取り、対応するUnixタイムスタンプ値を返す、無関係で便利な関数です。1970年のエポックとPOSIXエンコーディングを想定しています。実際、&lt;a href=&quot;time#time.gmtime&quot;&gt; &lt;code&gt;time.gmtime()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#calendar.timegm&quot;&gt; &lt;code&gt;timegm()&lt;/code&gt; &lt;/a&gt;は互いに逆です。</target>
        </trans-unit>
        <trans-unit id="3a0de6a3a36da0eabd1ed37cb78f0a84df8288d5" translate="yes" xml:space="preserve">
          <source>Analyse the bytecode corresponding to a function, generator, asynchronous generator, coroutine, method, string of source code, or a code object (as returned by &lt;a href=&quot;functions#compile&quot;&gt;&lt;code&gt;compile()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">関数、ジェネレーター、非同期ジェネレーター、コルーチン、メソッド、ソースコードの文字列、またはコードオブジェクト（&lt;a href=&quot;functions#compile&quot;&gt; &lt;code&gt;compile()&lt;/code&gt; &lt;/a&gt;によって返される）に対応するバイトコードを分析します。</target>
        </trans-unit>
        <trans-unit id="819da723c3c425f237bdf8f03b696821a94f3e1f" translate="yes" xml:space="preserve">
          <source>Analysis functions</source>
          <target state="translated">解析機能</target>
        </trans-unit>
        <trans-unit id="975f7b4df518f323a30297a1f1be4e096d3fcec3" translate="yes" xml:space="preserve">
          <source>Analysis of the profiler data is done using the &lt;a href=&quot;#pstats.Stats&quot;&gt;&lt;code&gt;Stats&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">プロファイラーデータの分析は、&lt;a href=&quot;#pstats.Stats&quot;&gt; &lt;code&gt;Stats&lt;/code&gt; &lt;/a&gt;クラスを使用して行われます。</target>
        </trans-unit>
        <trans-unit id="25ad53cf48f04b7c123150cc524cc9d87c444927" translate="yes" xml:space="preserve">
          <source>Analyze the contents of the &lt;em&gt;pathname&lt;/em&gt; file, which must contain Python code.</source>
          <target state="translated">Pythonコードが含まれている必要がある&lt;em&gt;パス名&lt;/em&gt;ファイルの内容を分析します。</target>
        </trans-unit>
        <trans-unit id="4623f537e597cbfacf24dc615db20b47e0e3c5c7" translate="yes" xml:space="preserve">
          <source>Analyze the given &lt;em&gt;sample&lt;/em&gt; and return a &lt;a href=&quot;#csv.Dialect&quot;&gt;&lt;code&gt;Dialect&lt;/code&gt;&lt;/a&gt; subclass reflecting the parameters found. If the optional &lt;em&gt;delimiters&lt;/em&gt; parameter is given, it is interpreted as a string containing possible valid delimiter characters.</source>
          <target state="translated">指定された&lt;em&gt;サンプル&lt;/em&gt;を分析し、見つかったパラメーターを反映する&lt;a href=&quot;#csv.Dialect&quot;&gt; &lt;code&gt;Dialect&lt;/code&gt; &lt;/a&gt;サブクラスを返します。オプションの&lt;em&gt;区切り文字&lt;/em&gt;パラメーターが指定さ&lt;em&gt;れている&lt;/em&gt;場合、有効な区切り文字を含む文字列として解釈されます。</target>
        </trans-unit>
        <trans-unit id="d3c77624248a182e0208b43d1dd511b74c035283" translate="yes" xml:space="preserve">
          <source>Analyze the sample text (presumed to be in CSV format) and return &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if the first row appears to be a series of column headers.</source>
          <target state="translated">サンプルテキスト（CSV形式であると想定）を分析し、最初の行が一連の列ヘッダーのように見える場合は&lt;a href=&quot;constants#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="b15cefd38640764e47311aa1a3c3174217ea802b" translate="yes" xml:space="preserve">
          <source>Anchor type. Denotes where the packer is to place each slave in its parcel.</source>
          <target state="translated">アンカータイプ。パッカーがその小包に各スレーブを配置する場所を示します。</target>
        </trans-unit>
        <trans-unit id="8a680a6b219fde5428a49a155c5016f2f6534116" translate="yes" xml:space="preserve">
          <source>And also as a function decorator:</source>
          <target state="translated">また、機能デコレーターとしても。</target>
        </trans-unit>
        <trans-unit id="e25b174a26dc77d7bd4c171e7b788567380cfcad" translate="yes" xml:space="preserve">
          <source>And for reading files:</source>
          <target state="translated">ファイルを読むためにも</target>
        </trans-unit>
        <trans-unit id="8ea4f6d1b5164f1de2cd6425075d887c2f52dc7b" translate="yes" xml:space="preserve">
          <source>And go back to listening for new client connections (of course, a real server would probably handle each client connection in a separate thread, or put the sockets in &lt;a href=&quot;#ssl-nonblocking&quot;&gt;non-blocking mode&lt;/a&gt; and use an event loop).</source>
          <target state="translated">そして、新しいクライアント接続のリッスンに戻ります（もちろん、実サーバーはおそらく、各クライアント接続を個別のスレッドで処理するか、ソケットを&lt;a href=&quot;#ssl-nonblocking&quot;&gt;非ブロッキングモード&lt;/a&gt;にしてイベントループを使用します）。</target>
        </trans-unit>
        <trans-unit id="e01a2b18c0aa33d0bf1ebb4b61f24aa85532e4a4" translate="yes" xml:space="preserve">
          <source>And lets you write code like this:</source>
          <target state="translated">そして、このようなコードを書くことができます。</target>
        </trans-unit>
        <trans-unit id="02c80b8291de4e65f0384d5df0e931faa6f06e26" translate="yes" xml:space="preserve">
          <source>And so on, eventually ending with:</source>
          <target state="translated">などなど、最終的にはこれで終了。</target>
        </trans-unit>
        <trans-unit id="56675d3775ea977079a196ffe5d39d5c6e0ed45d" translate="yes" xml:space="preserve">
          <source>And some mathematical functions are also available to Decimal:</source>
          <target state="translated">また、一部の数学関数は10進数にも対応しています。</target>
        </trans-unit>
        <trans-unit id="e030fd6f202d12a04313413b21ce123caf324f74" translate="yes" xml:space="preserve">
          <source>And while the module doesn&amp;rsquo;t directly support parsing strings, it can easily be done:</source>
          <target state="translated">そして、モジュールは文字列の解析を直接サポートしていませんが、簡単に行うことができます：</target>
        </trans-unit>
        <trans-unit id="f29a859de34d8206276e4fbe86c78577ef463680" translate="yes" xml:space="preserve">
          <source>And:</source>
          <target state="translated">And:</target>
        </trans-unit>
        <trans-unit id="5d25066343c14fdbc8cd148ee308e69f694558d6" translate="yes" xml:space="preserve">
          <source>Angular conversion</source>
          <target state="translated">アンギュラー変換</target>
        </trans-unit>
        <trans-unit id="fa955e785130d1bfb76908f175692b42dcf5a748" translate="yes" xml:space="preserve">
          <source>Animation control</source>
          <target state="translated">アニメーション制御</target>
        </trans-unit>
        <trans-unit id="e17e6aa01f27f483f31ae9a05f633ce17a08ca63" translate="yes" xml:space="preserve">
          <source>Annotate each line with a short opcode description.</source>
          <target state="translated">各行に短いオペコードの説明をアノテーションします。</target>
        </trans-unit>
        <trans-unit id="c1fbe3f2c0adda2514893a924abcd2d00ba0c968" translate="yes" xml:space="preserve">
          <source>Announces an intention to access data in a specific pattern thus allowing the kernel to make optimizations. The advice applies to the region of the file specified by &lt;em&gt;fd&lt;/em&gt; starting at &lt;em&gt;offset&lt;/em&gt; and continuing for &lt;em&gt;len&lt;/em&gt; bytes. &lt;em&gt;advice&lt;/em&gt; is one of &lt;a href=&quot;#os.POSIX_FADV_NORMAL&quot;&gt;&lt;code&gt;POSIX_FADV_NORMAL&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.POSIX_FADV_SEQUENTIAL&quot;&gt;&lt;code&gt;POSIX_FADV_SEQUENTIAL&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.POSIX_FADV_RANDOM&quot;&gt;&lt;code&gt;POSIX_FADV_RANDOM&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.POSIX_FADV_NOREUSE&quot;&gt;&lt;code&gt;POSIX_FADV_NOREUSE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.POSIX_FADV_WILLNEED&quot;&gt;&lt;code&gt;POSIX_FADV_WILLNEED&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#os.POSIX_FADV_DONTNEED&quot;&gt;&lt;code&gt;POSIX_FADV_DONTNEED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">特定のパターンでデータにアクセスする意図を発表し、カーネルが最適化できるようにします。アドバイスはで指定されたファイルの領域に適用され&lt;em&gt;、FD&lt;/em&gt;から始まる&lt;em&gt;オフセット&lt;/em&gt;との継続的&lt;em&gt;LEN&lt;/em&gt;バイト。&lt;em&gt;アドバイス&lt;/em&gt;の一つである&lt;a href=&quot;#os.POSIX_FADV_NORMAL&quot;&gt; &lt;code&gt;POSIX_FADV_NORMAL&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.POSIX_FADV_SEQUENTIAL&quot;&gt; &lt;code&gt;POSIX_FADV_SEQUENTIAL&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.POSIX_FADV_RANDOM&quot;&gt; &lt;code&gt;POSIX_FADV_RANDOM&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.POSIX_FADV_NOREUSE&quot;&gt; &lt;code&gt;POSIX_FADV_NOREUSE&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.POSIX_FADV_WILLNEED&quot;&gt; &lt;code&gt;POSIX_FADV_WILLNEED&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#os.POSIX_FADV_DONTNEED&quot;&gt; &lt;code&gt;POSIX_FADV_DONTNEED&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="eddbfc47bdf2815567f148a943ae50904ef48c9e" translate="yes" xml:space="preserve">
          <source>Another Modular Crypt Format method with 16 character salt and 43 character hash based on the SHA-256 hash function.</source>
          <target state="translated">SHA-256ハッシュ関数に基づいて16文字のソルトと43文字のハッシュを持つ別のモジュラークリプトフォーマット方式。</target>
        </trans-unit>
        <trans-unit id="1489f7e40318e54fcbeae8f12ceaa2e676f89a1d" translate="yes" xml:space="preserve">
          <source>Another Modular Crypt Format method with 22 character salt and 31 character hash based on the Blowfish cipher.</source>
          <target state="translated">Blowfish暗号に基づいた22文字のソルトと31文字のハッシュを持つ別のモジュラー暗号フォーマット方式。</target>
        </trans-unit>
        <trans-unit id="cfaedd99a89f28548596fb67a7f378505de1e4e9" translate="yes" xml:space="preserve">
          <source>Another Modular Crypt Format method with 8 character salt and 22 character hash based on the MD5 hash function.</source>
          <target state="translated">MD5ハッシュ関数に基づいて8文字のソルトと22文字のハッシュを持つ別のモジュラークリプトフォーマット方式。</target>
        </trans-unit>
        <trans-unit id="59264d0e98298421242f9f70b711b5e947525220" translate="yes" xml:space="preserve">
          <source>Another approach to handling multiple simultaneous requests in an environment that supports neither threads nor &lt;a href=&quot;os#os.fork&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt; (or where these are too expensive or inappropriate for the service) is to maintain an explicit table of partially finished requests and to use &lt;a href=&quot;selectors#module-selectors&quot;&gt;&lt;code&gt;selectors&lt;/code&gt;&lt;/a&gt; to decide which request to work on next (or whether to handle a new incoming request). This is particularly important for stream services where each client can potentially be connected for a long time (if threads or subprocesses cannot be used). See &lt;a href=&quot;asyncore#module-asyncore&quot;&gt;&lt;code&gt;asyncore&lt;/code&gt;&lt;/a&gt; for another way to manage this.</source>
          <target state="translated">スレッドも&lt;a href=&quot;os#os.fork&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; &lt;/a&gt;もサポートしない環境（またはこれらがサービスにとって高すぎるか不適切な場合）で複数の同時要求を処理する別のアプローチは、部分的に完了した要求の明示的なテーブルを維持し、&lt;a href=&quot;selectors#module-selectors&quot;&gt; &lt;code&gt;selectors&lt;/code&gt; &lt;/a&gt;を使用してどの要求を行うかを決定することです次に処理します（または新しい着信要求を処理するかどうか）。これは、各クライアントが長時間接続される可能性があるストリームサービス（スレッドまたはサブプロセスを使用できない場合）にとって特に重要です。これを管理する別の方法については&lt;a href=&quot;asyncore#module-asyncore&quot;&gt; &lt;code&gt;asyncore&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7a6eaecc1b4becc1ce97180c1ca37fd242427bac" translate="yes" xml:space="preserve">
          <source>Another approach to using deques is to maintain a sequence of recently added elements by appending to the right and popping to the left:</source>
          <target state="translated">dequesを使用するもう一つのアプローチは、右に追記して左にポップすることで、最近追加された要素のシーケンスを維持することです。</target>
        </trans-unit>
        <trans-unit id="154eea36fb4a3e04d9685d308f84e6f97bb356c1" translate="yes" xml:space="preserve">
          <source>Another bad idea is to print things that embed an object address, like</source>
          <target state="translated">もう一つの悪いアイデアは、オブジェクトのアドレスを埋め込むようなものを印刷することです。</target>
        </trans-unit>
        <trans-unit id="857365788cdb8b0f09e1949a46fb3dc32e28e350" translate="yes" xml:space="preserve">
          <source>Another client can also use it:</source>
          <target state="translated">別のクライアントでも使用できます。</target>
        </trans-unit>
        <trans-unit id="bf9dd39551f08b3b4f74c2740c180fe41caccd4b" translate="yes" xml:space="preserve">
          <source>Another example for &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-mapping&quot;&gt;mapping&lt;/a&gt; objects, using a &lt;a href=&quot;#dict&quot;&gt;&lt;code&gt;dict&lt;/code&gt;&lt;/a&gt;, which is a generic type expecting two type parameters representing the key type and the value type. In this example, the function expects a &lt;code&gt;dict&lt;/code&gt; with keys of type &lt;a href=&quot;#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; and values of type &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#dict&quot;&gt; &lt;code&gt;dict&lt;/code&gt; &lt;/a&gt;を使用してオブジェクトを&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-mapping&quot;&gt;マッピング&lt;/a&gt;する別の例。これは、キータイプと値タイプを表す2つのタイプパラメーターを期待するジェネリックタイプです。この例では、関数は&lt;a href=&quot;#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;型のキーと&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt;型の値を持つ &lt;code&gt;dict&lt;/code&gt; を期待しています。</target>
        </trans-unit>
        <trans-unit id="830cb7a34d4e9668c5f056cdbb14f9a43e0de2af" translate="yes" xml:space="preserve">
          <source>Another example of a reusable, but not reentrant, context manager is &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt;, as it invokes &lt;em&gt;all&lt;/em&gt; currently registered callbacks when leaving any with statement, regardless of where those callbacks were added:</source>
          <target state="translated">再利用可能だが再入可能ではないコンテキストマネージャーの別の例は、&lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt;です。これらのコールバックが追加された場所に関係なく、withステートメントを終了すると、現在登録されている&lt;em&gt;すべての&lt;/em&gt;コールバックが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="970d45390b614e57c3adbeccf052061f6cbb7027" translate="yes" xml:space="preserve">
          <source>Another example that may behave differently from what one would expect is this:</source>
          <target state="translated">他にも、人が期待するものとは異なる振る舞いをする可能性がある例としては、これがあります。</target>
        </trans-unit>
        <trans-unit id="1524e3727b5a15e1e58deafe30417f1f9c6a01f4" translate="yes" xml:space="preserve">
          <source>Another example that uses the &lt;a href=&quot;#shutil.ignore_patterns&quot;&gt;&lt;code&gt;ignore_patterns()&lt;/code&gt;&lt;/a&gt; helper:</source>
          <target state="translated">&lt;a href=&quot;#shutil.ignore_patterns&quot;&gt; &lt;code&gt;ignore_patterns()&lt;/code&gt; &lt;/a&gt;ヘルパーを使用する別の例：</target>
        </trans-unit>
        <trans-unit id="5cd67ff52eb9c7ecece2900a3c7ca5a0e8906891" translate="yes" xml:space="preserve">
          <source>Another example that uses the &lt;em&gt;ignore&lt;/em&gt; argument to add a logging call:</source>
          <target state="translated">&lt;em&gt;ignore&lt;/em&gt;引数を使用してロギング呼び出しを追加&lt;em&gt;する&lt;/em&gt;別の例：</target>
        </trans-unit>
        <trans-unit id="a012876e7eec4d9cf2933f51ae341f5f02747bc6" translate="yes" xml:space="preserve">
          <source>Another function is provided to reverse the tokenization process. This is useful for creating tools that tokenize a script, modify the token stream, and write back the modified script.</source>
          <target state="translated">トークン化処理を逆にする機能がもう一つ用意されています。これは、スクリプトをトークン化し、トークンストリームを修正し、修正したスクリプトを書き戻すツールを作成する際に便利です。</target>
        </trans-unit>
        <trans-unit id="1345847ee9d2d8f4b40cf2bd43a2a8f4b81d19c5" translate="yes" xml:space="preserve">
          <source>Another important difference between &lt;a href=&quot;#enum.IntFlag&quot;&gt;&lt;code&gt;IntFlag&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#enum.Enum&quot;&gt;&lt;code&gt;Enum&lt;/code&gt;&lt;/a&gt; is that if no flags are set (the value is 0), its boolean evaluation is &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;#enum.IntFlag&quot;&gt; &lt;code&gt;IntFlag&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#enum.Enum&quot;&gt; &lt;code&gt;Enum&lt;/code&gt; &lt;/a&gt;のもう 1つの重要な違いは、フラグが設定されていない場合（値が0の場合）、ブール値の評価が&lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; になること&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="0bd138c705d1febdcd3cd71c72f455f7d8136282" translate="yes" xml:space="preserve">
          <source>Another option is to pass &lt;a href=&quot;functions#globals&quot;&gt;&lt;code&gt;globals()&lt;/code&gt;&lt;/a&gt; to the &lt;em&gt;globals&lt;/em&gt; parameter, which will cause the code to be executed within your current global namespace. This can be more convenient than individually specifying imports:</source>
          <target state="translated">別のオプションは、&lt;a href=&quot;functions#globals&quot;&gt; &lt;code&gt;globals()&lt;/code&gt; &lt;/a&gt;を&lt;em&gt;globals&lt;/em&gt;パラメーターに渡すことです。これにより、コードが現在のグローバル名前空間内で実行されます。これは、インポートを個別に指定するよりも便利です。</target>
        </trans-unit>
        <trans-unit id="7d89ebe791f42c5af101c46d42ea21377b531087" translate="yes" xml:space="preserve">
          <source>Another similar &lt;a href=&quot;asyncio-stream#asyncio-example-create-connection-streams&quot;&gt;example&lt;/a&gt; using the high-level &lt;a href=&quot;asyncio-stream#asyncio.open_connection&quot;&gt;&lt;code&gt;asyncio.open_connection()&lt;/code&gt;&lt;/a&gt; function and streams.</source>
          <target state="translated">高レベルの&lt;a href=&quot;asyncio-stream#asyncio.open_connection&quot;&gt; &lt;code&gt;asyncio.open_connection()&lt;/code&gt; &lt;/a&gt;関数とストリームを使用した別の同様の&lt;a href=&quot;asyncio-stream#asyncio-example-create-connection-streams&quot;&gt;例&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b12cf40ba46cdbcdda739851e799c9deed7beda0" translate="yes" xml:space="preserve">
          <source>Another simple application of doctest is testing interactive examples in a text file. This can be done with the &lt;a href=&quot;#doctest.testfile&quot;&gt;&lt;code&gt;testfile()&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">doctestのもう1つの簡単なアプリケーションは、テキストファイルでインタラクティブな例をテストすることです。これは&lt;a href=&quot;#doctest.testfile&quot;&gt; &lt;code&gt;testfile()&lt;/code&gt; &lt;/a&gt;関数で行うことができます：</target>
        </trans-unit>
        <trans-unit id="380a1673c02d6ffedb7ef8ccb17de0d7583fd47b" translate="yes" xml:space="preserve">
          <source>Another solution to the problem of non-comparable tasks is to create a wrapper class that ignores the task item and only compares the priority field:</source>
          <target state="translated">比較できないタスクの問題に対するもう一つの解決策は、タスク項目を無視して優先度フィールドのみを比較するラッパークラスを作成することです。</target>
        </trans-unit>
        <trans-unit id="0f5e78d9ba1c7a1f17d713904f11c8fb976e77d2" translate="yes" xml:space="preserve">
          <source>Another specification of the format, with details on locking.</source>
          <target state="translated">フォーマットのもう一つの仕様で、ロックに関する詳細が記載されています。</target>
        </trans-unit>
        <trans-unit id="e0a6209aa300b723ce63cb3581b82c93359f079d" translate="yes" xml:space="preserve">
          <source>Another specification of the format. Describes a common extension for supporting folders.</source>
          <target state="translated">フォーマットのもう一つの仕様。フォルダをサポートするための共通の拡張子を記述します。</target>
        </trans-unit>
        <trans-unit id="259c6f7c7f71afa5d1276a3716f6996db84a2e2c" translate="yes" xml:space="preserve">
          <source>Another test-support module with a very different flavor.</source>
          <target state="translated">またまた趣向を凝らしたテストサポートモジュール。</target>
        </trans-unit>
        <trans-unit id="e52e511337918750293ba11f89a9f569c1bc3067" translate="yes" xml:space="preserve">
          <source>Another use case might be to replace an object with an &lt;a href=&quot;io#io.StringIO&quot;&gt;&lt;code&gt;io.StringIO&lt;/code&gt;&lt;/a&gt; instance:</source>
          <target state="translated">別のユースケースは、オブジェクトを&lt;a href=&quot;io#io.StringIO&quot;&gt; &lt;code&gt;io.StringIO&lt;/code&gt; &lt;/a&gt;インスタンスに置き換えることです。</target>
        </trans-unit>
        <trans-unit id="62a6c1f548ab752cd5952e7bc0d4d963e5bf6502" translate="yes" xml:space="preserve">
          <source>Another way to encode binary hashes for non-binary environments.</source>
          <target state="translated">非バイナリ環境用にバイナリハッシュをエンコードする別の方法。</target>
        </trans-unit>
        <trans-unit id="fefd86df1dfa20cdf5dc78f24eca9be7a5e90b0f" translate="yes" xml:space="preserve">
          <source>Another way to handle this is with the following example:</source>
          <target state="translated">これを処理する別の方法として、次のような例があります。</target>
        </trans-unit>
        <trans-unit id="16e0cebdfbbfd2a87dc6c52fdedb0b3db0e01e83" translate="yes" xml:space="preserve">
          <source>Another way to use variable-sized data types with &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; is to use the dynamic nature of Python, and (re-)define the data type after the required size is already known, on a case by case basis.</source>
          <target state="translated">&lt;a href=&quot;#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; で&lt;/a&gt;可変サイズのデータ​​型を使用する別の方法は、Pythonの動的な性質を使用し、必要なサイズが既知の後で、ケースバイケースでデータ型を（再）定義することです。</target>
        </trans-unit>
        <trans-unit id="e0aafffa028c1a77c7cc61a286a8bfa21a85356c" translate="yes" xml:space="preserve">
          <source>Answered</source>
          <target state="translated">Answered</target>
        </trans-unit>
        <trans-unit id="082fb2ca7290eae9e50333c559aae463c44ee785" translate="yes" xml:space="preserve">
          <source>Any *args and **kwargs supplied for this function are directly passed to &lt;em&gt;func&lt;/em&gt;. Also, the current &lt;a href=&quot;contextvars#contextvars.Context&quot;&gt;&lt;code&gt;contextvars.Context&lt;/code&gt;&lt;/a&gt; is propogated, allowing context variables from the event loop thread to be accessed in the separate thread.</source>
          <target state="translated">この関数に提供された* argsと** kwargsは、&lt;em&gt;funcに&lt;/em&gt;直接渡され&lt;em&gt;ます&lt;/em&gt;。また、現在の&lt;a href=&quot;contextvars#contextvars.Context&quot;&gt; &lt;code&gt;contextvars.Context&lt;/code&gt; &lt;/a&gt;が伝搬され、イベントループスレッドからのコンテキスト変数に別のスレッドでアクセスできるようになります。</target>
        </trans-unit>
        <trans-unit id="af5a6d2c7bcbd0595666bd7855f0f03cca3bf497" translate="yes" xml:space="preserve">
          <source>Any changes to any context variables that &lt;em&gt;callable&lt;/em&gt; makes will be contained in the context object:</source>
          <target state="translated">&lt;em&gt;callable&lt;/em&gt;が行うすべてのコンテキスト変数への変更は、コンテキストオブジェクトに含まれます。</target>
        </trans-unit>
        <trans-unit id="8e39a27177f793a03dc9f620dad817066a7f33c1" translate="yes" xml:space="preserve">
          <source>Any classes found are recursively searched similarly, to test docstrings in their contained methods and nested classes.</source>
          <target state="translated">見つかったクラスはすべて同様に再帰的に検索され、含まれているメソッドや入れ子になっているクラスのdocstringをテストします。</target>
        </trans-unit>
        <trans-unit id="f798ac81b2f74b659d7f586dd5eabb5ce15db13e" translate="yes" xml:space="preserve">
          <source>Any container can be passed as the &lt;em&gt;choices&lt;/em&gt; value, so &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; objects, &lt;a href=&quot;stdtypes#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; objects, and custom containers are all supported.</source>
          <target state="translated">任意のコンテナーを&lt;em&gt;選択肢の&lt;/em&gt;値として渡すことができるため、&lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt;オブジェクト、&lt;a href=&quot;stdtypes#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;オブジェクト、およびカスタムコンテナーはすべてサポートされます。</target>
        </trans-unit>
        <trans-unit id="808d1aeb7f37ecb67a57bc678598df13336e350c" translate="yes" xml:space="preserve">
          <source>Any container can be passed as the &lt;em&gt;choices&lt;/em&gt; value, so &lt;a href=&quot;stdtypes#list&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; objects, &lt;a href=&quot;stdtypes#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; objects, and custom containers are all supported. This includes &lt;a href=&quot;enum#enum.Enum&quot;&gt;&lt;code&gt;enum.Enum&lt;/code&gt;&lt;/a&gt;, which could be used to restrain argument&amp;rsquo;s choices; if we reuse previous rock/paper/scissors game example, this could be as follows:</source>
          <target state="translated">任意のコンテナを&lt;em&gt;choices&lt;/em&gt;値として渡すことができるため、&lt;a href=&quot;stdtypes#list&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt;オブジェクト、&lt;a href=&quot;stdtypes#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;オブジェクト、およびカスタムコンテナがすべてサポートされます。これには&lt;a href=&quot;enum#enum.Enum&quot;&gt; &lt;code&gt;enum.Enum&lt;/code&gt; が&lt;/a&gt;含まれ、引数の選択を制限するために使用できます。以前のじゃんけんゲームの例を再利用すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="96d6483718787eb0c399b57df09b4bd366515f2b" translate="yes" xml:space="preserve">
          <source>Any detected nonconformance results in an &lt;a href=&quot;exceptions#AssertionError&quot;&gt;&lt;code&gt;AssertionError&lt;/code&gt;&lt;/a&gt; being raised; note, however, that how these errors are handled is server-dependent. For example, &lt;a href=&quot;#module-wsgiref.simple_server&quot;&gt;&lt;code&gt;wsgiref.simple_server&lt;/code&gt;&lt;/a&gt; and other servers based on &lt;a href=&quot;#module-wsgiref.handlers&quot;&gt;&lt;code&gt;wsgiref.handlers&lt;/code&gt;&lt;/a&gt; (that don&amp;rsquo;t override the error handling methods to do something else) will simply output a message that an error has occurred, and dump the traceback to &lt;code&gt;sys.stderr&lt;/code&gt; or some other error stream.</source>
          <target state="translated">不適合が検出されると、&lt;a href=&quot;exceptions#AssertionError&quot;&gt; &lt;code&gt;AssertionError&lt;/code&gt; &lt;/a&gt;が発生します。ただし、これらのエラーの処理方法はサーバーによって異なります。例えば、&lt;a href=&quot;#module-wsgiref.simple_server&quot;&gt; &lt;code&gt;wsgiref.simple_server&lt;/code&gt; &lt;/a&gt;に基づいており、他のサーバー&lt;a href=&quot;#module-wsgiref.handlers&quot;&gt; &lt;code&gt;wsgiref.handlers&lt;/code&gt; &lt;/a&gt;（何かを行うためのメソッドをエラー処理を上書きしません）だろう単に出力エラーが発生したことをメッセージ、およびへのトレースバックをダンプ &lt;code&gt;sys.stderr&lt;/code&gt; を持ちまたは一部その他のエラーストリーム。</target>
        </trans-unit>
        <trans-unit id="c3161a1f48d49aece84ad1e7ba2994c99487c066" translate="yes" xml:space="preserve">
          <source>Any expected output must immediately follow the final &lt;code&gt;'&amp;gt;&amp;gt;&amp;gt; '&lt;/code&gt; or &lt;code&gt;'... '&lt;/code&gt; line containing the code, and the expected output (if any) extends to the next &lt;code&gt;'&amp;gt;&amp;gt;&amp;gt; '&lt;/code&gt; or all-whitespace line.</source>
          <target state="translated">予想される出力は、コードを含む最後の &lt;code&gt;'&amp;gt;&amp;gt;&amp;gt; '&lt;/code&gt; または &lt;code&gt;'... '&lt;/code&gt; 行の直後に続く必要があり、予想される出力（存在する場合）は次の &lt;code&gt;'&amp;gt;&amp;gt;&amp;gt; '&lt;/code&gt; またはすべて空白行に拡張されます。</target>
        </trans-unit>
        <trans-unit id="16ef8204c61c9a1813182c916e1e34ec0c335625" translate="yes" xml:space="preserve">
          <source>Any files may be present in the ZIP archive, but only files &lt;code&gt;.py&lt;/code&gt; and &lt;code&gt;.pyc&lt;/code&gt; are available for import. ZIP import of dynamic modules (&lt;code&gt;.pyd&lt;/code&gt;, &lt;code&gt;.so&lt;/code&gt;) is disallowed. Note that if an archive only contains &lt;code&gt;.py&lt;/code&gt; files, Python will not attempt to modify the archive by adding the corresponding &lt;code&gt;.pyc&lt;/code&gt; file, meaning that if a ZIP archive doesn&amp;rsquo;t contain &lt;code&gt;.pyc&lt;/code&gt; files, importing may be rather slow.</source>
          <target state="translated">任意のファイルがZIPアーカイブに存在する可能性がありますが、ファイル &lt;code&gt;.py&lt;/code&gt; および &lt;code&gt;.pyc&lt;/code&gt; のみをインポートできます。動的モジュール（ &lt;code&gt;.pyd&lt;/code&gt; 、 &lt;code&gt;.so&lt;/code&gt; ）のZIPインポートは許可されていません。アーカイブに &lt;code&gt;.py&lt;/code&gt; ファイルのみが含まれている場合、Pythonは対応する &lt;code&gt;.pyc&lt;/code&gt; ファイルを追加してアーカイブを変更しようとしないことに注意してください。つまり、ZIPアーカイブに &lt;code&gt;.pyc&lt;/code&gt; ファイルが含まれていない場合、インポートはかなり遅くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f8dee1375bcf6a8c6c517898f5fc97f065da4ba9" translate="yes" xml:space="preserve">
          <source>Any form of network IO; &lt;code&gt;recv()&lt;/code&gt; and &lt;code&gt;send()&lt;/code&gt; read and write only to the underlying &lt;a href=&quot;#ssl.MemoryBIO&quot;&gt;&lt;code&gt;MemoryBIO&lt;/code&gt;&lt;/a&gt; buffers.</source>
          <target state="translated">任意の形式のネットワークIO。 &lt;code&gt;recv()&lt;/code&gt; および &lt;code&gt;send()&lt;/code&gt; は、基礎となる&lt;a href=&quot;#ssl.MemoryBIO&quot;&gt; &lt;code&gt;MemoryBIO&lt;/code&gt; &lt;/a&gt;バッファーに対してのみ読み取りおよび書き込みを行います。</target>
        </trans-unit>
        <trans-unit id="0f114f3ceee9858acec62bd48fb36dd2e76f81ac" translate="yes" xml:space="preserve">
          <source>Any header object, or any header that is refolded due to the policy settings, is folded using an algorithm that fully implements the RFC folding algorithms, including knowing where encoded words are required and allowed.</source>
          <target state="translated">すべてのヘッダオブジェクト、またはポリシー設定によってリフォールドされたヘッダは、エンコードされた単語がどこで必要とされ、どこで許可されているかを知ることを含めて、RFCフォールディングアルゴリズムを完全に実装したアルゴリズムを使用してフォールディングされます。</target>
        </trans-unit>
        <trans-unit id="87a66302b5c5f0a22de125246046b1cdfffefa6b" translate="yes" xml:space="preserve">
          <source>Any object can be tested for truth value, for use in an &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; condition or as operand of the Boolean operations below.</source>
          <target state="translated">任意のオブジェクトを真偽値についてテストし、&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt;条件で使用するか、以下のブール演算のオペランドとして使用できます。</target>
        </trans-unit>
        <trans-unit id="d1110e65f07bb65d564abb72e4ad0a27d774a7b9" translate="yes" xml:space="preserve">
          <source>Any object can be tested for truth value, for use in an &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#if&quot;&gt;&lt;code&gt;if&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#while&quot;&gt;&lt;code&gt;while&lt;/code&gt;&lt;/a&gt; condition or as operand of the Boolean operations below.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#if&quot;&gt; &lt;code&gt;if&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#while&quot;&gt; &lt;code&gt;while&lt;/code&gt; &lt;/a&gt;条件で使用するため、または以下のブール演算のオペランドとして使用するために、任意のオブジェクトの真理値をテストできます。</target>
        </trans-unit>
        <trans-unit id="b871425be90d75ff7f0f750362354908800f258b" translate="yes" xml:space="preserve">
          <source>Any other appearance of &lt;code&gt;$&lt;/code&gt; in the string will result in a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; being raised.</source>
          <target state="translated">文字列に他の &lt;code&gt;$&lt;/code&gt; が出現すると、&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="32e241730c485594f505f9764a3cbc96f2e45b62" translate="yes" xml:space="preserve">
          <source>Any other keys in the dictionary are ignored, to allow for future extensions. If the path cannot be handled, &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">辞書内の他のキーは無視され、将来の拡張に備えます。パスを処理できない場合、&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="e32d9113d754ea90473171c0599a4afdcc0feabd" translate="yes" xml:space="preserve">
          <source>Any truncated integers at the end of the list of file descriptors.</source>
          <target state="translated">ファイル記述子のリストの最後にある切り捨てられた整数。</target>
        </trans-unit>
        <trans-unit id="8d4f45530c29236c208822a755f335ab895f7ae9" translate="yes" xml:space="preserve">
          <source>Any valid Python identifier may be used for a fieldname except for names starting with an underscore. Valid identifiers consist of letters, digits, and underscores but do not start with a digit or underscore and cannot be a &lt;a href=&quot;keyword#module-keyword&quot;&gt;&lt;code&gt;keyword&lt;/code&gt;&lt;/a&gt; such as &lt;em&gt;class&lt;/em&gt;, &lt;em&gt;for&lt;/em&gt;, &lt;em&gt;return&lt;/em&gt;, &lt;em&gt;global&lt;/em&gt;, &lt;em&gt;pass&lt;/em&gt;, or &lt;em&gt;raise&lt;/em&gt;.</source>
          <target state="translated">下線で始まる名前を除いて、有効なPython識別子をフィールド名に使用できます。有効な識別子は、文字、数字、およびアンダースコアで構成されますが、数字またはアンダースコアで始まっておらず、&lt;em&gt;class&lt;/em&gt;、&lt;em&gt;for&lt;/em&gt;、&lt;em&gt;return&lt;/em&gt;、&lt;em&gt;global&lt;/em&gt;、&lt;em&gt;pass&lt;/em&gt;、&lt;em&gt;raise&lt;/em&gt;などの&lt;a href=&quot;keyword#module-keyword&quot;&gt; &lt;code&gt;keyword&lt;/code&gt; &lt;/a&gt;にすることはできません。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1518232458ae063224b67a33fbc39f874e6e7652" translate="yes" xml:space="preserve">
          <source>Any value error related to the address.</source>
          <target state="translated">アドレスに関連する値のエラー。</target>
        </trans-unit>
        <trans-unit id="71a52ce7a5fdb3bd7ec0934cf4eb202d8034ff6e" translate="yes" xml:space="preserve">
          <source>Any value error related to the net mask.</source>
          <target state="translated">ネットマスクに関連した値のエラー。</target>
        </trans-unit>
        <trans-unit id="f5f7839523439ed5db0c3285770ed6a7ad0ef07d" translate="yes" xml:space="preserve">
          <source>Apart from &lt;a href=&quot;#configparser.ConfigParser.getboolean&quot;&gt;&lt;code&gt;getboolean()&lt;/code&gt;&lt;/a&gt;, config parsers also provide equivalent &lt;a href=&quot;#configparser.ConfigParser.getint&quot;&gt;&lt;code&gt;getint()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#configparser.ConfigParser.getfloat&quot;&gt;&lt;code&gt;getfloat()&lt;/code&gt;&lt;/a&gt; methods. You can register your own converters and customize the provided ones. &lt;a href=&quot;#id14&quot; id=&quot;id4&quot;&gt;1&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#configparser.ConfigParser.getboolean&quot;&gt; &lt;code&gt;getboolean()&lt;/code&gt; &lt;/a&gt;とは別に、構成パーサーは同等の&lt;a href=&quot;#configparser.ConfigParser.getint&quot;&gt; &lt;code&gt;getint()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#configparser.ConfigParser.getfloat&quot;&gt; &lt;code&gt;getfloat()&lt;/code&gt; &lt;/a&gt;メソッドも提供します。独自のコンバーターを登録し、提供されているコンバーターをカスタマイズできます。&lt;a href=&quot;#id14&quot; id=&quot;id4&quot;&gt;1&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="004e30185abf19283aba3fcb4dd5458909228910" translate="yes" xml:space="preserve">
          <source>Apart from making the code (potentially) compatible with Windows and the other start methods this also ensures that as long as the child process is still alive the object will not be garbage collected in the parent process. This might be important if some resource is freed when the object is garbage collected in the parent process.</source>
          <target state="translated">コードを(潜在的に)Windowsや他のスタートメソッドと互換性を持たせることとは別に、これは子プロセスが生きている限り、オブジェクトが親プロセスでガベージコレクションされないことを保証します。これは、オブジェクトが親プロセスでガベージコレクションされるときにリソースが解放される場合に重要になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="e2f8e3f0f5b15c39aef46bc951d434aa2f994181" translate="yes" xml:space="preserve">
          <source>Apart from the node classes, the &lt;a href=&quot;#module-ast&quot;&gt;&lt;code&gt;ast&lt;/code&gt;&lt;/a&gt; module defines these utility functions and classes for traversing abstract syntax trees:</source>
          <target state="translated">ノードクラスとは別に、&lt;a href=&quot;#module-ast&quot;&gt; &lt;code&gt;ast&lt;/code&gt; &lt;/a&gt;モジュールは、抽象構文ツリーを走査するための以下のユーティリティ関数とクラスを定義します。</target>
        </trans-unit>
        <trans-unit id="41def7a0febe741da87c5b79ce78ce27b83f3ae7" translate="yes" xml:space="preserve">
          <source>Appearance</source>
          <target state="translated">Appearance</target>
        </trans-unit>
        <trans-unit id="7c6156597bec64b2efa893f896b414ba015b84f0" translate="yes" xml:space="preserve">
          <source>Append &lt;em&gt;line&lt;/em&gt; to the history buffer, as if it was the last line typed. This calls &lt;code&gt;add_history()&lt;/code&gt; in the underlying library.</source>
          <target state="translated">追加&lt;em&gt;ライン&lt;/em&gt;履歴バッファに、それが最後の行が入力したかのように。これは、基になるライブラリの &lt;code&gt;add_history()&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="15e3d810f53a90235f3be7ee31ad204835b47079" translate="yes" xml:space="preserve">
          <source>Append &lt;em&gt;message&lt;/em&gt; to named mailbox.</source>
          <target state="translated">名前付きメールボックスに&lt;em&gt;メッセージ&lt;/em&gt;を追加し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="5012b56fdb1fabff75d417024359f5123b3c7cf5" translate="yes" xml:space="preserve">
          <source>Append a new action at the end. The &lt;em&gt;cmd&lt;/em&gt; variable must be a valid bourne shell command. The &lt;em&gt;kind&lt;/em&gt; variable consists of two letters.</source>
          <target state="translated">最後に新しいアクションを追加します。&lt;em&gt;CMDの&lt;/em&gt;変数は、有効なBourneシェルコマンドでなければなりません。&lt;em&gt;種類&lt;/em&gt;の変数は2つの文字で構成されています。</target>
        </trans-unit>
        <trans-unit id="ccb2f2dddbf426366118168a9e541a67ab5450c2" translate="yes" xml:space="preserve">
          <source>Append a new item with value &lt;em&gt;x&lt;/em&gt; to the end of the array.</source>
          <target state="translated">値&lt;em&gt;xの&lt;/em&gt;新しい項目を配列の最後に追加します。</target>
        </trans-unit>
        <trans-unit id="bec2f10908ba5de36daf156b98af3c60ee338f32" translate="yes" xml:space="preserve">
          <source>Append items from &lt;em&gt;iterable&lt;/em&gt; to the end of the array. If &lt;em&gt;iterable&lt;/em&gt; is another array, it must have &lt;em&gt;exactly&lt;/em&gt; the same type code; if not, &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; will be raised. If &lt;em&gt;iterable&lt;/em&gt; is not an array, it must be iterable and its elements must be the right type to be appended to the array.</source>
          <target state="translated">&lt;em&gt;iterable&lt;/em&gt;から配列の最後に項目を&lt;em&gt;追加&lt;/em&gt;します。&lt;em&gt;iterable&lt;/em&gt;が別の配列である場合、それは&lt;em&gt;まったく&lt;/em&gt;同じ型コードでなければなりません。そうでない場合、&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が発生します。&lt;em&gt;iterable&lt;/em&gt;が配列でない場合、それは反復可能でなければならず、その要素は配列に追加される正しいタイプでなければなりません。</target>
        </trans-unit>
        <trans-unit id="70b18019b4972b108e37841f15945c9d21d175bf" translate="yes" xml:space="preserve">
          <source>Append items from the list. This is equivalent to &lt;code&gt;for x in list:
a.append(x)&lt;/code&gt; except that if there is a type error, the array is unchanged.</source>
          <target state="translated">リストからアイテムを追加します。これは &lt;code&gt;for x in list: a.append(x)&lt;/code&gt; と同等ですが、型エラーがある場合、配列は変更されません。</target>
        </trans-unit>
        <trans-unit id="44b7a672882b72ed3eb65f4fc161e2735a4aad2e" translate="yes" xml:space="preserve">
          <source>Append the callable &lt;em&gt;hook&lt;/em&gt; to the list of active auditing hooks for the current interpreter.</source>
          <target state="translated">呼び出し可能&lt;em&gt;フック&lt;/em&gt;を現在のインタープリターのアクティブな監査フックのリストに追加します。</target>
        </trans-unit>
        <trans-unit id="cb08b061999d25be95bd753505fb9df32467aab4" translate="yes" xml:space="preserve">
          <source>Append the last &lt;em&gt;nelements&lt;/em&gt; items of history to a file. The default filename is &lt;code&gt;~/.history&lt;/code&gt;. The file must already exist. This calls &lt;code&gt;append_history()&lt;/code&gt; in the underlying library. This function only exists if Python was compiled for a version of the library that supports it.</source>
          <target state="translated">履歴の最後の&lt;em&gt;nelements&lt;/em&gt;アイテムをファイルに&lt;em&gt;追加&lt;/em&gt;します。デフォルトのファイル名は &lt;code&gt;~/.history&lt;/code&gt; です。ファイルはすでに存在している必要があります。これは、基礎となるライブラリの &lt;code&gt;append_history()&lt;/code&gt; を呼び出します。この関数は、Pythonがサポートするライブラリのバージョン用にコンパイルされた場合にのみ存在します。</target>
        </trans-unit>
        <trans-unit id="2c421a3b35b989d4ece772b4d7f4d642bcef1d02" translate="yes" xml:space="preserve">
          <source>Append the record to the buffer. If &lt;a href=&quot;#logging.handlers.BufferingHandler.shouldFlush&quot;&gt;&lt;code&gt;shouldFlush()&lt;/code&gt;&lt;/a&gt; returns true, call &lt;a href=&quot;#logging.handlers.BufferingHandler.flush&quot;&gt;&lt;code&gt;flush()&lt;/code&gt;&lt;/a&gt; to process the buffer.</source>
          <target state="translated">レコードをバッファに追加します。場合&lt;a href=&quot;#logging.handlers.BufferingHandler.shouldFlush&quot;&gt; &lt;code&gt;shouldFlush()&lt;/code&gt; が&lt;/a&gt; trueを返す、コール・&lt;a href=&quot;#logging.handlers.BufferingHandler.flush&quot;&gt; &lt;code&gt;flush()&lt;/code&gt; &lt;/a&gt;バッファを処理します。</target>
        </trans-unit>
        <trans-unit id="b6428efcfa3b692ae0853afc12b91104655bc067" translate="yes" xml:space="preserve">
          <source>Append the string &lt;em&gt;s&lt;/em&gt; to the MIME header.</source>
          <target state="translated">文字列&lt;em&gt;s&lt;/em&gt;をMIMEヘッダーに追加します。</target>
        </trans-unit>
        <trans-unit id="63afd5dcef3cb2a0dae141c8bb5ab6871063eaa8" translate="yes" xml:space="preserve">
          <source>Appends &lt;em&gt;subelements&lt;/em&gt; from a sequence object with zero or more elements. Raises &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if a subelement is not an &lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">0個以上の要素を持つシーケンスオブジェクトの&lt;em&gt;サブ要素&lt;/em&gt;を追加します。発生させ&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;サブ要素がない場合は&lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt; &lt;code&gt;Element&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5bceea9f719c67ae44ec147e59a3ff45f6a13a85" translate="yes" xml:space="preserve">
          <source>Appends items from the string, interpreting the string as an array of machine values (as if it had been read from a file using the &lt;a href=&quot;#array.array.fromfile&quot;&gt;&lt;code&gt;fromfile()&lt;/code&gt;&lt;/a&gt; method).</source>
          <target state="translated">文字列からアイテムを追加し、文字列をマシン値の配列として解釈します（&lt;a href=&quot;#array.array.fromfile&quot;&gt; &lt;code&gt;fromfile()&lt;/code&gt; &lt;/a&gt;メソッドを使用してファイルから読み取られたかのように）。</target>
        </trans-unit>
        <trans-unit id="7f55a9d7c4f227e50d8f45b68bd0268e8a04c0f7" translate="yes" xml:space="preserve">
          <source>Appends whitespace to the subtree to indent the tree visually. This can be used to generate pretty-printed XML output. &lt;em&gt;tree&lt;/em&gt; can be an Element or ElementTree. &lt;em&gt;space&lt;/em&gt; is the whitespace string that will be inserted for each indentation level, two space characters by default. For indenting partial subtrees inside of an already indented tree, pass the initial indentation level as &lt;em&gt;level&lt;/em&gt;.</source>
          <target state="translated">サブツリーに空白を追加して、ツリーを視覚的にインデントします。これを使用して、きれいに印刷されたXML出力を生成できます。&lt;em&gt;ツリー&lt;/em&gt;は、ElementまたはElementTreeにすることができます。&lt;em&gt;space&lt;/em&gt;は、各インデントレベルに挿入される空白文字列であり、デフォルトでは2つのスペース文字です。すでにインデントされているツリー内の部分的なサブツリーをインデントするには、最初のインデントレベルをレベルとして渡し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e26d38984e101ccc199d48ef993f80d0a613b479" translate="yes" xml:space="preserve">
          <source>Apple&amp;rsquo;s documentation of the file format.</source>
          <target state="translated">Appleのファイル形式のドキュメント。</target>
        </trans-unit>
        <trans-unit id="09c258e5edf35ac67db5d64e7635e8a3d86b778e" translate="yes" xml:space="preserve">
          <source>Application developers should typically use the high-level asyncio functions, such as &lt;a href=&quot;asyncio-task#asyncio.run&quot;&gt;&lt;code&gt;asyncio.run()&lt;/code&gt;&lt;/a&gt;, and should rarely need to reference the loop object or call its methods. This section is intended mostly for authors of lower-level code, libraries, and frameworks, who need finer control over the event loop behavior.</source>
          <target state="translated">アプリケーション開発者は通常、&lt;a href=&quot;asyncio-task#asyncio.run&quot;&gt; &lt;code&gt;asyncio.run()&lt;/code&gt; &lt;/a&gt;などの高レベルのasyncio関数を使用する必要があり、ループオブジェクトを参照したり、そのメソッドを呼び出したりする必要はほとんどありません。このセクションは主に、イベントループの動作をより細かく制御する必要がある低レベルのコード、ライブラリ、およびフレームワークの作成者を対象としています。</target>
        </trans-unit>
        <trans-unit id="ad91f8ac2108f501e8aa1719fa2b68f46b05d5af" translate="yes" xml:space="preserve">
          <source>Applications can add their own callbacks to this list. The primary use cases are:</source>
          <target state="translated">アプリケーションはこのリストに独自のコールバックを追加することができます。主な使用例は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="15e3de344c6c36974c5693ae0deb456a758bdd3d" translate="yes" xml:space="preserve">
          <source>Applications may store arbitrary objects in these attributes.</source>
          <target state="translated">アプリケーションは、これらの属性に任意のオブジェクトを格納することができます。</target>
        </trans-unit>
        <trans-unit id="9c498690ce78323bc09d2e18d14d4892b6e8abd0" translate="yes" xml:space="preserve">
          <source>Applications should not &lt;a href=&quot;http://cwe.mitre.org/data/definitions/257.html&quot;&gt;store passwords in a recoverable format&lt;/a&gt;, whether plain text or encrypted. They should be salted and hashed using a cryptographically-strong one-way (irreversible) hash function.</source>
          <target state="translated">アプリケーションは、プレーンテキストであっても暗号化さ&lt;a href=&quot;http://cwe.mitre.org/data/definitions/257.html&quot;&gt;れていても、回復可能な形式&lt;/a&gt;でパスワードを保存しないでください。暗号化された強力な一方向（不可逆）ハッシュ関数を使用して、ソルト化およびハッシュ化する必要があります。</target>
        </trans-unit>
        <trans-unit id="9516d3c40d5579ce0328d2d1808e751ea327f8e2" translate="yes" xml:space="preserve">
          <source>Applications that can&amp;rsquo;t bear wall-time ambiguities should explicitly check the value of the &lt;a href=&quot;#datetime.datetime.fold&quot;&gt;&lt;code&gt;fold&lt;/code&gt;&lt;/a&gt; attribute or avoid using hybrid &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclasses; there are no ambiguities when using &lt;a href=&quot;#datetime.timezone&quot;&gt;&lt;code&gt;timezone&lt;/code&gt;&lt;/a&gt;, or any other fixed-offset &lt;a href=&quot;#datetime.tzinfo&quot;&gt;&lt;code&gt;tzinfo&lt;/code&gt;&lt;/a&gt; subclass (such as a class representing only EST (fixed offset -5 hours), or only EDT (fixed offset -4 hours)).</source>
          <target state="translated">実時間のあいまいさを&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;できないアプリケーションは、&lt;a href=&quot;#datetime.datetime.fold&quot;&gt; &lt;code&gt;fold&lt;/code&gt; &lt;/a&gt;属性の値を明示的にチェックするか、ハイブリッドtzinfoサブクラスの使用を避ける必要があります。&lt;a href=&quot;#datetime.timezone&quot;&gt; &lt;code&gt;timezone&lt;/code&gt; &lt;/a&gt;、または他の固定オフセット&lt;a href=&quot;#datetime.tzinfo&quot;&gt; &lt;code&gt;tzinfo&lt;/code&gt; &lt;/a&gt;サブクラス（EST（固定オフセット-5時間）のみ、またはEDT（固定オフセット-4時間）のみを表すクラスなど）を使用する場合、あいまいさはありません。</target>
        </trans-unit>
        <trans-unit id="0719959018ae4f7d3b51e5a78769bd3b0ca3df46" translate="yes" xml:space="preserve">
          <source>Applications that need to operate on potentially improperly quoted URLs that may contain non-ASCII data will need to do their own decoding from bytes to characters before invoking the URL parsing methods.</source>
          <target state="translated">非ASCIIデータを含む可能性のある不適切な引用符で囲まれたURLで操作する必要があるアプリケーションは、URL解析メソッドを呼び出す前に、バイトから文字への独自のデコードを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="fafdab997b122fcdc3b5c0971f1785992cabff68" translate="yes" xml:space="preserve">
          <source>Applications will create objects of this class for use in the &lt;a href=&quot;#xml.sax.xmlreader.XMLReader.parse&quot;&gt;&lt;code&gt;XMLReader.parse()&lt;/code&gt;&lt;/a&gt; method and for returning from EntityResolver.resolveEntity.</source>
          <target state="translated">アプリケーションは、&lt;a href=&quot;#xml.sax.xmlreader.XMLReader.parse&quot;&gt; &lt;code&gt;XMLReader.parse()&lt;/code&gt; &lt;/a&gt;メソッドで使用するため、およびEntityResolver.resolveEntityから戻るために、このクラスのオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="e7284143fe53744047558a065875930ca468cf98" translate="yes" xml:space="preserve">
          <source>Applies the logical operation &lt;em&gt;and&lt;/em&gt; between each operand&amp;rsquo;s digits.</source>
          <target state="translated">論理演算&lt;em&gt;を&lt;/em&gt;各オペランドの桁間に適用します。</target>
        </trans-unit>
        <trans-unit id="37c10a7d11316205bdac710e988348ca767a1a19" translate="yes" xml:space="preserve">
          <source>Applies the logical operation &lt;em&gt;or&lt;/em&gt; between each operand&amp;rsquo;s digits.</source>
          <target state="translated">論理演算&lt;em&gt;または&lt;/em&gt;各オペランドの桁の間に適用します。</target>
        </trans-unit>
        <trans-unit id="a0b520db8cdcd1e798321610d25b1d0aa46d3781" translate="yes" xml:space="preserve">
          <source>Applies the logical operation &lt;em&gt;xor&lt;/em&gt; between each operand&amp;rsquo;s digits.</source>
          <target state="translated">各オペランドの桁の間に論理演算&lt;em&gt;xorを&lt;/em&gt;適用します。</target>
        </trans-unit>
        <trans-unit id="c6347e1f0ae0fe6eb691488a3a3790d194631241" translate="yes" xml:space="preserve">
          <source>Apply &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-19&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt; rules on unverifiable transactions even to Netscape cookies.</source>
          <target state="translated">Netscape Cookieであっても検証不可能なトランザクションに&lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-19&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt;ルールを適用し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b6c11221fbbce04188875f4bbd9a5712dd69e34a" translate="yes" xml:space="preserve">
          <source>Apply &lt;em&gt;function&lt;/em&gt; of two arguments cumulatively to the items of &lt;em&gt;iterable&lt;/em&gt;, from left to right, so as to reduce the iterable to a single value. For example, &lt;code&gt;reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])&lt;/code&gt; calculates &lt;code&gt;((((1+2)+3)+4)+5)&lt;/code&gt;. The left argument, &lt;em&gt;x&lt;/em&gt;, is the accumulated value and the right argument, &lt;em&gt;y&lt;/em&gt;, is the update value from the &lt;em&gt;iterable&lt;/em&gt;. If the optional &lt;em&gt;initializer&lt;/em&gt; is present, it is placed before the items of the iterable in the calculation, and serves as a default when the iterable is empty. If &lt;em&gt;initializer&lt;/em&gt; is not given and &lt;em&gt;iterable&lt;/em&gt; contains only one item, the first item is returned.</source>
          <target state="translated">2つの引数の&lt;em&gt;関数&lt;/em&gt;を&lt;em&gt;iterable&lt;/em&gt;のアイテムに左から右に累積的に適用して、反復可能オブジェクトを単一の値に減らします。たとえば、 &lt;code&gt;reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])&lt;/code&gt; は &lt;code&gt;((((1+2)+3)+4)+5)&lt;/code&gt; を計算します。左の引数&lt;em&gt;x&lt;/em&gt;は累積された値であり、右の引数&lt;em&gt;y&lt;/em&gt;は&lt;em&gt;iterable&lt;/em&gt;からの更新値です。オプションの&lt;em&gt;初期化子&lt;/em&gt;が存在する場合は、計算でイテラブルの項目の前に配置され、イテラブルが空のときにデフォルトとして機能します。&lt;em&gt;初期化子&lt;/em&gt;が指定されておらず、&lt;em&gt;反復可能オブジェクト&lt;/em&gt;にアイテムが1つしか含まれていない場合、最初のアイテムが返されます。</target>
        </trans-unit>
        <trans-unit id="6f6b8050ae59615c4994444f8cdf9e2812e29cae" translate="yes" xml:space="preserve">
          <source>Apply this handler&amp;rsquo;s filters to the record and return &lt;code&gt;True&lt;/code&gt; if the record is to be processed. The filters are consulted in turn, until one of them returns a false value. If none of them return a false value, the record will be emitted. If one returns a false value, the handler will not emit the record.</source>
          <target state="translated">このハンドラーのフィルターをレコードに適用し、レコードが処理される場合は &lt;code&gt;True&lt;/code&gt; を返します。フィルターは、いずれかがfalse値を返すまで順番に調べられます。いずれもfalse値を返さない場合、レコードが発行されます。false値を返す場合、ハンドラーはレコードを発行しません。</target>
        </trans-unit>
        <trans-unit id="75727d4b37b8d6f61c121aa55945e43277e79623" translate="yes" xml:space="preserve">
          <source>Apply this logger&amp;rsquo;s filters to the record and return &lt;code&gt;True&lt;/code&gt; if the record is to be processed. The filters are consulted in turn, until one of them returns a false value. If none of them return a false value, the record will be processed (passed to handlers). If one returns a false value, no further processing of the record occurs.</source>
          <target state="translated">このロガーのフィルターをレコードに適用し、レコードが処理される場合は &lt;code&gt;True&lt;/code&gt; を返します。フィルターは、いずれかがfalse値を返すまで順番に調べられます。いずれもfalse値を返さない場合、レコードは処理されます（ハンドラーに渡されます）。false値が返された場合、それ以上レコードの処理は行われません。</target>
        </trans-unit>
        <trans-unit id="f5f8992ee05391b7dd15844b0a81da4dcbca1d1a" translate="yes" xml:space="preserve">
          <source>Apply, test or remove a POSIX lock on an open file descriptor. &lt;em&gt;fd&lt;/em&gt; is an open file descriptor. &lt;em&gt;cmd&lt;/em&gt; specifies the command to use - one of &lt;a href=&quot;#os.F_LOCK&quot;&gt;&lt;code&gt;F_LOCK&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.F_TLOCK&quot;&gt;&lt;code&gt;F_TLOCK&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#os.F_ULOCK&quot;&gt;&lt;code&gt;F_ULOCK&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#os.F_TEST&quot;&gt;&lt;code&gt;F_TEST&lt;/code&gt;&lt;/a&gt;. &lt;em&gt;len&lt;/em&gt; specifies the section of the file to lock.</source>
          <target state="translated">開いているファイル記述子のPOSIXロックを適用、テスト、または削除します。&lt;em&gt;fd&lt;/em&gt;は開いているファイル記述子です。&lt;em&gt;cmd&lt;/em&gt;は、使用するコマンドを指定します&lt;a href=&quot;#os.F_LOCK&quot;&gt; &lt;code&gt;F_LOCK&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.F_TLOCK&quot;&gt; &lt;code&gt;F_TLOCK&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#os.F_ULOCK&quot;&gt; &lt;code&gt;F_ULOCK&lt;/code&gt; 、&lt;/a&gt;または&lt;a href=&quot;#os.F_TEST&quot;&gt; &lt;code&gt;F_TEST&lt;/code&gt; の&lt;/a&gt;いずれか。&lt;em&gt;len&lt;/em&gt;は、ロックするファイルのセクションを指定します。</target>
        </trans-unit>
        <trans-unit id="83c16cf7fbf4a6d50f42643443798c0192cc0915" translate="yes" xml:space="preserve">
          <source>Applying the reverse conversion to &lt;code&gt;3740.0&lt;/code&gt; gives a different hexadecimal string representing the same number:</source>
          <target state="translated">&lt;code&gt;3740.0&lt;/code&gt; に逆変換を適用すると、同じ数値を表す別の16進数文字列が得られます。</target>
        </trans-unit>
        <trans-unit id="06bee686a5eaf240f9c56fe230e927f0bbd2a171" translate="yes" xml:space="preserve">
          <source>Applying the same patch to every test method</source>
          <target state="translated">すべてのテスト方法に同じパッチを適用する</target>
        </trans-unit>
        <trans-unit id="c570ce78a064ac6afc5df19b2e24947c18c38dc5" translate="yes" xml:space="preserve">
          <source>Approximating &lt;a href=&quot;#importlib.import_module&quot;&gt;&lt;code&gt;importlib.import_module()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#importlib.import_module&quot;&gt; &lt;code&gt;importlib.import_module()&lt;/code&gt; の&lt;/a&gt;概算</target>
        </trans-unit>
        <trans-unit id="af4f4762f9bd3f0f4a10caf5b6e63dc4ce543724" translate="yes" xml:space="preserve">
          <source>Arabic</source>
          <target state="translated">Arabic</target>
        </trans-unit>
        <trans-unit id="aa559da736898dbd0d15602df291a370ff954c58" translate="yes" xml:space="preserve">
          <source>Archive names should be relative to the archive root, that is, they should not start with a path separator.</source>
          <target state="translated">アーカイブ名はアーカイブルートからの相対的なものでなければなりません。</target>
        </trans-unit>
        <trans-unit id="4e93a940c9f8e4f679d6284bd8a795953316844a" translate="yes" xml:space="preserve">
          <source>Archiving example</source>
          <target state="translated">アーカイブ例</target>
        </trans-unit>
        <trans-unit id="9655f90a40f38717dd6a2cdaf52344b6f73b99eb" translate="yes" xml:space="preserve">
          <source>Archiving example with &lt;em&gt;base_dir&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;base_dirを使用した&lt;/em&gt;アーカイブ例&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c6824fef37d7d6af51ce46cec76775f0abf31cfe" translate="yes" xml:space="preserve">
          <source>Archiving example with base_dir</source>
          <target state="translated">base_dir でのアーカイブ例</target>
        </trans-unit>
        <trans-unit id="0c2ca1a37605ad24f1be144c9f7d4cb1b3101631" translate="yes" xml:space="preserve">
          <source>Archiving operations</source>
          <target state="translated">アーカイブ作業</target>
        </trans-unit>
        <trans-unit id="71f392576d7e147141bf396686950b09802b28f4" translate="yes" xml:space="preserve">
          <source>Arg list too long</source>
          <target state="translated">Argリストが長すぎる</target>
        </trans-unit>
        <trans-unit id="8126f6e897947aa2bcce9fdc2c65455309bc87d1" translate="yes" xml:space="preserve">
          <source>Argument &lt;em&gt;flags&lt;/em&gt; takes the &lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#bitwise&quot;&gt;bitwise OR&lt;/a&gt; of option flags. See section &lt;a href=&quot;#doctest-options&quot;&gt;Option Flags&lt;/a&gt;. Only &amp;ldquo;reporting flags&amp;rdquo; can be used.</source>
          <target state="translated">引数&lt;em&gt;フラグ&lt;/em&gt;は、オプションフラグの&lt;a href=&quot;https://docs.python.org/3.8/reference/expressions.html#bitwise&quot;&gt;ビット単位OR&lt;/a&gt;を取ります。&lt;a href=&quot;#doctest-options&quot;&gt;オプションフラグを&lt;/a&gt;参照してください。「レポートフラグ」のみを使用できます。</target>
        </trans-unit>
        <trans-unit id="11697c2fb890c0f6657adb297715eca2a57c6b85" translate="yes" xml:space="preserve">
          <source>Argument &lt;em&gt;flags&lt;/em&gt; takes the &lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#bitwise&quot;&gt;bitwise OR&lt;/a&gt; of option flags. See section &lt;a href=&quot;#doctest-options&quot;&gt;Option Flags&lt;/a&gt;. Only &amp;ldquo;reporting flags&amp;rdquo; can be used.</source>
          <target state="translated">引数&lt;em&gt;flags&lt;/em&gt;は、オプションフラグの&lt;a href=&quot;https://docs.python.org/3.9/reference/expressions.html#bitwise&quot;&gt;ビットごとのOR&lt;/a&gt;を取ります。セクション&lt;a href=&quot;#doctest-options&quot;&gt;オプションフラグを&lt;/a&gt;参照してください。「レポートフラグ」のみを使用できます。</target>
        </trans-unit>
        <trans-unit id="49cda49e510f79a25d5fe2cd3ec5f12c16ca5615" translate="yes" xml:space="preserve">
          <source>Argument &lt;em&gt;module&lt;/em&gt; is a module object, or dotted name of a module, containing the object whose doctests are of interest. Argument &lt;em&gt;name&lt;/em&gt; is the name (within the module) of the object with the doctests of interest. The result is a string, containing the object&amp;rsquo;s docstring converted to a Python script, as described for &lt;a href=&quot;#doctest.script_from_examples&quot;&gt;&lt;code&gt;script_from_examples()&lt;/code&gt;&lt;/a&gt; above. For example, if module &lt;code&gt;a.py&lt;/code&gt; contains a top-level function &lt;code&gt;f()&lt;/code&gt;, then</source>
          <target state="translated">引数&lt;em&gt;モジュール&lt;/em&gt;は、モジュールオブジェクト、またはモジュールのドット表記名であり、doctestが必要なオブジェクトを含みます。引数&lt;em&gt;名&lt;/em&gt;は、対象のdoctestを持つオブジェクトの（モジュール内の）名前です。結果は、上記の&lt;a href=&quot;#doctest.script_from_examples&quot;&gt; &lt;code&gt;script_from_examples()&lt;/code&gt; で&lt;/a&gt;説明したように、Pythonスクリプトに変換されたオブジェクトのdocstringを含む文字列です。たとえば、モジュール &lt;code&gt;a.py&lt;/code&gt; にトップレベルの関数 &lt;code&gt;f()&lt;/code&gt; が含まれている場合、</target>
        </trans-unit>
        <trans-unit id="d13ab8175963907a3c38cd5c0e397fdc5a88b925" translate="yes" xml:space="preserve">
          <source>Argument &lt;em&gt;s&lt;/em&gt; is a string containing doctest examples. The string is converted to a Python script, where doctest examples in &lt;em&gt;s&lt;/em&gt; are converted to regular code, and everything else is converted to Python comments. The generated script is returned as a string. For example,</source>
          <target state="translated">引数&lt;em&gt;s&lt;/em&gt;は、doctestの例を含む文字列です。文字列はPythonスクリプトに変換され、&lt;em&gt;sの&lt;/em&gt; doctestの例は通常のコードに変換され、それ以外はすべてPythonコメントに変換されます。生成されたスクリプトは文字列として返されます。例えば、</target>
        </trans-unit>
        <trans-unit id="dc60f0a9ed6b8901fa4738eb86c947f1aba137a8" translate="yes" xml:space="preserve">
          <source>Argument abbreviations (prefix matching)</source>
          <target state="translated">引数の略語(接頭辞の一致</target>
        </trans-unit>
        <trans-unit id="646f35c0fe5203eb12ebdfc5f6722d5f4ee8b9f2" translate="yes" xml:space="preserve">
          <source>Argument groups</source>
          <target state="translated">引数グループ</target>
        </trans-unit>
        <trans-unit id="3c66f14d2ce5db0e563f7a0a9cea03ef993a86f3" translate="yes" xml:space="preserve">
          <source>Argument names are not part of the specification, and only the arguments of &lt;a href=&quot;functions#open&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; are intended to be used as keyword arguments.</source>
          <target state="translated">引数名は仕様の一部ではなく、&lt;a href=&quot;functions#open&quot;&gt; &lt;code&gt;open()&lt;/code&gt; の&lt;/a&gt;引数のみがキーワード引数として使用されることを意図しています。</target>
        </trans-unit>
        <trans-unit id="6331038cb6dd518cc8a1c33aa6d56e471c0a5793" translate="yes" xml:space="preserve">
          <source>ArgumentParser objects</source>
          <target state="translated">引数パーサーオブジェクト</target>
        </trans-unit>
        <trans-unit id="81018876e5e0fb20f6d9b1140eb03c00025d7bd7" translate="yes" xml:space="preserve">
          <source>ArgumentParser objects usually associate a single command-line argument with a single action to be taken. The &lt;code&gt;nargs&lt;/code&gt; keyword argument associates a different number of command-line arguments with a single action. The supported values are:</source>
          <target state="translated">ArgumentParserオブジェクトは通常、単一のコマンドライン引数を、実行する単一のアクションに関連付けます。 &lt;code&gt;nargs&lt;/code&gt; キーワード引数は、単一のアクションでコマンドライン引数の異なる数を関連付けます。サポートされている値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="74013187b9b262d759763c71b93fc2050badc103" translate="yes" xml:space="preserve">
          <source>Arguments &lt;em&gt;file&lt;/em&gt;, &lt;em&gt;fix_imports&lt;/em&gt;, &lt;em&gt;encoding&lt;/em&gt;, &lt;em&gt;errors&lt;/em&gt;, &lt;em&gt;strict&lt;/em&gt; and &lt;em&gt;buffers&lt;/em&gt; have the same meaning as in the &lt;a href=&quot;#pickle.Unpickler&quot;&gt;&lt;code&gt;Unpickler&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">引数&lt;em&gt;file&lt;/em&gt;、&lt;em&gt;fix_imports&lt;/em&gt;、&lt;em&gt;encoding&lt;/em&gt;、&lt;em&gt;errors&lt;/em&gt;、&lt;em&gt;strict&lt;/em&gt;、および&lt;em&gt;buffers&lt;/em&gt;は、&lt;a href=&quot;#pickle.Unpickler&quot;&gt; &lt;code&gt;Unpickler&lt;/code&gt; &lt;/a&gt;コンストラクターと同じ意味です。</target>
        </trans-unit>
        <trans-unit id="d89665ba13ee62d24ea7f2b734e91ef581e6bf8d" translate="yes" xml:space="preserve">
          <source>Arguments &lt;em&gt;file&lt;/em&gt;, &lt;em&gt;protocol&lt;/em&gt;, &lt;em&gt;fix_imports&lt;/em&gt; and &lt;em&gt;buffer_callback&lt;/em&gt; have the same meaning as in the &lt;a href=&quot;#pickle.Pickler&quot;&gt;&lt;code&gt;Pickler&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">引数&lt;em&gt;file&lt;/em&gt;、&lt;em&gt;protocol&lt;/em&gt;、&lt;em&gt;fix_imports&lt;/em&gt;、および&lt;em&gt;buffer_callback&lt;/em&gt;は、&lt;a href=&quot;#pickle.Pickler&quot;&gt; &lt;code&gt;Pickler&lt;/code&gt; &lt;/a&gt;コンストラクターと同じ意味です。</target>
        </trans-unit>
        <trans-unit id="062cac0907e3b6761cd5955db7e55e88c29370c5" translate="yes" xml:space="preserve">
          <source>Arguments &lt;em&gt;protocol&lt;/em&gt;, &lt;em&gt;fix_imports&lt;/em&gt; and &lt;em&gt;buffer_callback&lt;/em&gt; have the same meaning as in the &lt;a href=&quot;#pickle.Pickler&quot;&gt;&lt;code&gt;Pickler&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">引数&lt;em&gt;protocol&lt;/em&gt;、&lt;em&gt;fix_imports&lt;/em&gt;、および&lt;em&gt;buffer_callback&lt;/em&gt;は、&lt;a href=&quot;#pickle.Pickler&quot;&gt; &lt;code&gt;Pickler&lt;/code&gt; &lt;/a&gt;コンストラクターと同じ意味を持っています。</target>
        </trans-unit>
        <trans-unit id="abe50e0f8895e96e60e7ed8a520f00b347b19db9" translate="yes" xml:space="preserve">
          <source>Arguments are as for &lt;a href=&quot;#http.cookiejar.FileCookieJar.save&quot;&gt;&lt;code&gt;save()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数は&lt;a href=&quot;#http.cookiejar.FileCookieJar.save&quot;&gt; &lt;code&gt;save()&lt;/code&gt; と&lt;/a&gt;同じです。</target>
        </trans-unit>
        <trans-unit id="31b8834506fb3b7c5be5a3ce85e8e0c3db7c0b3f" translate="yes" xml:space="preserve">
          <source>Arguments are delimited by white space, which is either a space or a tab.</source>
          <target state="translated">引数は空白(スペースまたはタブ)で区切られます。</target>
        </trans-unit>
        <trans-unit id="ca383ab55205e5fb89e07118c8e14e4621db4341" translate="yes" xml:space="preserve">
          <source>Arguments containing &lt;code&gt;-&lt;/code&gt;</source>
          <target state="translated">を含む引数 &lt;code&gt;-&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c7d8d9a6376cd495ec8cafea6a5b8bff545de70d" translate="yes" xml:space="preserve">
          <source>Arguments for which &lt;a href=&quot;#inspect.Signature.bind&quot;&gt;&lt;code&gt;Signature.bind()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#inspect.Signature.bind_partial&quot;&gt;&lt;code&gt;Signature.bind_partial()&lt;/code&gt;&lt;/a&gt; relied on a default value are skipped. However, if needed, use &lt;a href=&quot;#inspect.BoundArguments.apply_defaults&quot;&gt;&lt;code&gt;BoundArguments.apply_defaults()&lt;/code&gt;&lt;/a&gt; to add them.</source>
          <target state="translated">&lt;a href=&quot;#inspect.Signature.bind&quot;&gt; &lt;code&gt;Signature.bind()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#inspect.Signature.bind_partial&quot;&gt; &lt;code&gt;Signature.bind_partial()&lt;/code&gt; &lt;/a&gt;がデフォルト値に依存している引数はスキップされます。ただし、必要に応じて、&lt;a href=&quot;#inspect.BoundArguments.apply_defaults&quot;&gt; &lt;code&gt;BoundArguments.apply_defaults()&lt;/code&gt; &lt;/a&gt;を使用して追加します。</target>
        </trans-unit>
        <trans-unit id="cc5642db0a84a9bfcf6fa6b2be3d81eb1124eeef" translate="yes" xml:space="preserve">
          <source>Arguments read from a file must by default be one per line (but see also &lt;a href=&quot;#argparse.ArgumentParser.convert_arg_line_to_args&quot;&gt;&lt;code&gt;convert_arg_line_to_args()&lt;/code&gt;&lt;/a&gt;) and are treated as if they were in the same place as the original file referencing argument on the command line. So in the example above, the expression &lt;code&gt;['-f', 'foo', '@args.txt']&lt;/code&gt; is considered equivalent to the expression &lt;code&gt;['-f', 'foo', '-f', 'bar']&lt;/code&gt;.</source>
          <target state="translated">ファイルから読み取られる引数は、デフォルトでは1行に1つでなければなりません（ただし、&lt;a href=&quot;#argparse.ArgumentParser.convert_arg_line_to_args&quot;&gt; &lt;code&gt;convert_arg_line_to_args()&lt;/code&gt; &lt;/a&gt;も参照）。コマンドラインの元のファイル参照引数と同じ場所にあるかのように扱われます。したがって、上記の例では、式 &lt;code&gt;['-f', 'foo', '@args.txt']&lt;/code&gt; は式 &lt;code&gt;['-f', 'foo', '-f', 'bar']&lt;/code&gt; と同等と見なされます。。</target>
        </trans-unit>
        <trans-unit id="254fe913b44f0083c86b3a72eb64233d6c9c9037" translate="yes" xml:space="preserve">
          <source>Arguments that are read from a file (see the &lt;em&gt;fromfile_prefix_chars&lt;/em&gt; keyword argument to the &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; constructor) are read one argument per line. &lt;a href=&quot;#argparse.ArgumentParser.convert_arg_line_to_args&quot;&gt;&lt;code&gt;convert_arg_line_to_args()&lt;/code&gt;&lt;/a&gt; can be overridden for fancier reading.</source>
          <target state="translated">ファイルから読み取られる引数（&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt;コンストラクターの&lt;em&gt;fromfile_prefix_chars&lt;/em&gt;キーワード引数を参照）は、1行につき1つの引数が読み取られます。&lt;a href=&quot;#argparse.ArgumentParser.convert_arg_line_to_args&quot;&gt; &lt;code&gt;convert_arg_line_to_args()&lt;/code&gt; &lt;/a&gt;は、読みやすいようにオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="6c888f0156e119be7fcf794112bbc633d3a855af" translate="yes" xml:space="preserve">
          <source>Arguments, return values and exceptions raised should be the same as for &lt;code&gt;http_error_default()&lt;/code&gt;.</source>
          <target state="translated">発生する引数、戻り値、例外は、 &lt;code&gt;http_error_default()&lt;/code&gt; の場合と同じである必要があります。</target>
        </trans-unit>
        <trans-unit id="a0478ca5f4c068ca3ac12f9474f6a15865ce9053" translate="yes" xml:space="preserve">
          <source>Arguments:</source>
          <target state="translated">Arguments:</target>
        </trans-unit>
        <trans-unit id="05d9f54c2dee44d1764ce455fe2d7d6a602d3b2c" translate="yes" xml:space="preserve">
          <source>Arithmetic mean (&amp;ldquo;average&amp;rdquo;) of data.</source>
          <target state="translated">データの算術平均（「平均」）。</target>
        </trans-unit>
        <trans-unit id="d077356b7b5076ff62409f2fbd19527762e29c71" translate="yes" xml:space="preserve">
          <source>Arithmetic operators</source>
          <target state="translated">算術演算子</target>
        </trans-unit>
        <trans-unit id="5509c94c0f9f738717633e15c4c8dbc85e63a4c9" translate="yes" xml:space="preserve">
          <source>ArithmeticError</source>
          <target state="translated">ArithmeticError</target>
        </trans-unit>
        <trans-unit id="00bda803d743e23213c7aa7e2ecbc5b4d57d34e7" translate="yes" xml:space="preserve">
          <source>Arrange for &lt;code&gt;callback(pid, returncode, *args)&lt;/code&gt; to be called when a process with PID equal to &lt;em&gt;pid&lt;/em&gt; terminates. Specifying another callback for the same process replaces the previous handler.</source>
          <target state="translated">PIDが&lt;em&gt;pidに&lt;/em&gt;等しい&lt;em&gt;プロセスが&lt;/em&gt;終了したときに &lt;code&gt;callback(pid, returncode, *args)&lt;/code&gt; が呼び出されるようにします。同じプロセスに別のコールバックを指定すると、以前のハンドラーが置き換えられます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9e83bc7d750aaf3109a4f2191f8a594db7bc12dc" translate="yes" xml:space="preserve">
          <source>Arrange for &lt;em&gt;func&lt;/em&gt; to be called in the specified executor.</source>
          <target state="translated">手配&lt;em&gt;FUNC&lt;/em&gt;指定されたエグゼキュータに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ce67aeaeb955aba8123768b6b67cd81cceff896b" translate="yes" xml:space="preserve">
          <source>Arrange the given list of classes into a hierarchy of nested lists. Where a nested list appears, it contains classes derived from the class whose entry immediately precedes the list. Each entry is a 2-tuple containing a class and a tuple of its base classes. If the &lt;em&gt;unique&lt;/em&gt; argument is true, exactly one entry appears in the returned structure for each class in the given list. Otherwise, classes using multiple inheritance and their descendants will appear multiple times.</source>
          <target state="translated">指定されたクラスのリストをネストされたリストの階層に配置します。ネストされたリストが表示される場所には、リストの直前のエントリを持つクラスから派生したクラスが含まれます。各エントリは、クラスとその基本クラスのタプルを含む2タプルです。&lt;em&gt;一意の&lt;/em&gt;引数がtrueの場合、指定されたリストの各クラスの返された構造に1つのエントリが表示されます。そうしないと、複数の継承を使用するクラスとその子孫が複数回表示されます。</target>
        </trans-unit>
        <trans-unit id="e09bcef1e1561563a4c3e831676e473af1795dff" translate="yes" xml:space="preserve">
          <source>Array objects support the ordinary sequence operations of indexing, slicing, concatenation, and multiplication. When using slice assignment, the assigned value must be an array object with the same type code; in all other cases, &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised. Array objects also implement the buffer interface, and may be used wherever &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt; are supported.</source>
          <target state="translated">配列オブジェクトは、インデックス付け、スライス、連結、乗算の通常のシーケンス操作をサポートしています。スライス割り当てを使用する場合、割り当てられる値は同じ型コードの配列オブジェクトでなければなりません。それ以外の場合はすべて、&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が発生します。配列オブジェクトはバッファインターフェースも実装し、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクト&lt;/a&gt;がサポートされている場合はいつでも使用できます。</target>
        </trans-unit>
        <trans-unit id="5629452c562743594978bfd2aa7bcc43bf09bd7f" translate="yes" xml:space="preserve">
          <source>Array objects support the ordinary sequence operations of indexing, slicing, concatenation, and multiplication. When using slice assignment, the assigned value must be an array object with the same type code; in all other cases, &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; is raised. Array objects also implement the buffer interface, and may be used wherever &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt; are supported.</source>
          <target state="translated">配列オブジェクトは、インデックス付け、スライス、連結、および乗算の通常のシーケンス操作をサポートします。スライス割り当てを使用する場合、割り当てられる値は同じタイプコードの配列オブジェクトである必要があります。それ以外の場合はすべて、&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が発生します。配列オブジェクトもバッファインターフェイスを実装し、&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクト&lt;/a&gt;がサポートされている場所であればどこでも使用できます。</target>
        </trans-unit>
        <trans-unit id="a038e3af2ef2f9438b219a899eb40b5d237a4ed2" translate="yes" xml:space="preserve">
          <source>Array subclass constructors accept positional arguments, used to initialize the elements in order.</source>
          <target state="translated">配列サブクラスのコンストラクタは位置引数を受け取り、順番に要素を初期化するために使用されます。</target>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="2116ae0173d1a47165ce7b4c6dd99787a4f44df7" translate="yes" xml:space="preserve">
          <source>Arrays and pointers</source>
          <target state="translated">配列とポインタ</target>
        </trans-unit>
        <trans-unit id="d2ba2d6827acb128b9bc6dce24cfef791a15ff8e" translate="yes" xml:space="preserve">
          <source>Arrays are sequences, containing a fixed number of instances of the same type.</source>
          <target state="translated">配列は、同じ型のインスタンスを一定数含むシーケンスです。</target>
        </trans-unit>
        <trans-unit id="ea1bebde72fbc4b9eac4d8bc3c178b395db87608" translate="yes" xml:space="preserve">
          <source>Arrow keys and</source>
          <target state="translated">矢印キーと</target>
        </trans-unit>
        <trans-unit id="492a48af0242c28b406dd17c1e3f267f5f7d0dde" translate="yes" xml:space="preserve">
          <source>As &lt;a href=&quot;#repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt;, return a string containing a printable representation of an object, but escape the non-ASCII characters in the string returned by &lt;a href=&quot;#repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt; using &lt;code&gt;\x&lt;/code&gt;, &lt;code&gt;\u&lt;/code&gt; or &lt;code&gt;\U&lt;/code&gt; escapes. This generates a string similar to that returned by &lt;a href=&quot;#repr&quot;&gt;&lt;code&gt;repr()&lt;/code&gt;&lt;/a&gt; in Python 2.</source>
          <target state="translated">&lt;a href=&quot;#repr&quot;&gt; &lt;code&gt;repr()&lt;/code&gt; &lt;/a&gt;として、オブジェクトの印刷可能な表現を含む文字列を返しますが、 &lt;code&gt;\x&lt;/code&gt; 、 &lt;code&gt;\u&lt;/code&gt; または &lt;code&gt;\U&lt;/code&gt; エスケープを使用して&lt;a href=&quot;#repr&quot;&gt; &lt;code&gt;repr()&lt;/code&gt; &lt;/a&gt;によって返された文字列の非ASCII文字をエスケープします。これにより、Python 2の&lt;a href=&quot;#repr&quot;&gt; &lt;code&gt;repr()&lt;/code&gt; &lt;/a&gt;によって返される文字列と同様の文字列が生成されます。</target>
        </trans-unit>
        <trans-unit id="02f76a37b3c37f88ec864fc817fca31de5c8cd6a" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;__enter__&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; invoked, this method can be used to cover part of an &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt;&lt;code&gt;__enter__()&lt;/code&gt;&lt;/a&gt; implementation with a context manager&amp;rsquo;s own &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;__enter__&lt;/code&gt; がされ&lt;em&gt;ていない&lt;/em&gt;呼び出され、この方法は、カバーの一部に使用することができる&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt; &lt;code&gt;__enter__()&lt;/code&gt; &lt;/a&gt;コンテキストマネージャ自身で実装&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt; &lt;code&gt;__exit__()&lt;/code&gt; &lt;/a&gt;メソッド。</target>
        </trans-unit>
        <trans-unit id="4fd9aad41fb0d98af1b5721b9ec8f46889133ea0" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;__enter__&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; invoked, this method can be used to cover part of an &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__enter__&quot;&gt;&lt;code&gt;__enter__()&lt;/code&gt;&lt;/a&gt; implementation with a context manager&amp;rsquo;s own &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;__enter__&lt;/code&gt; がされ&lt;em&gt;ていない&lt;/em&gt;呼び出され、この方法は、カバーの一部に使用することができる&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__enter__&quot;&gt; &lt;code&gt;__enter__()&lt;/code&gt; &lt;/a&gt;コンテキストマネージャ自身で実装&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__exit__&quot;&gt; &lt;code&gt;__exit__()&lt;/code&gt; &lt;/a&gt;メソッド。</target>
        </trans-unit>
        <trans-unit id="21a1436804ffd6271fbdf496e469190ad95cfadb" translate="yes" xml:space="preserve">
          <source>As IPv4 does not define a shorthand notation for addresses with octets set to zero, these two attributes are always the same as &lt;code&gt;str(addr)&lt;/code&gt; for IPv4 addresses. Exposing these attributes makes it easier to write display code that can handle both IPv4 and IPv6 addresses.</source>
          <target state="translated">IPv4は、オクテットがゼロに設定されたアドレスの省略表記を定義していないため、これらの2つの属性は、IPv4アドレスの &lt;code&gt;str(addr)&lt;/code&gt; と常に同じです。これらの属性を公開すると、IPv4アドレスとIPv6アドレスの両方を処理できる表示コードを簡単に記述できます。</target>
        </trans-unit>
        <trans-unit id="01b75b6a03e85825e5ae6f5174dafbcc20884f22" translate="yes" xml:space="preserve">
          <source>As UTF-8 is an 8-bit encoding no BOM is required and any &lt;code&gt;U+FEFF&lt;/code&gt; character in the decoded string (even if it&amp;rsquo;s the first character) is treated as a &lt;code&gt;ZERO
WIDTH NO-BREAK SPACE&lt;/code&gt;.</source>
          <target state="translated">UTF-8は8ビットエンコーディングであるため、BOMは不要であり、デコードされた文字列内の &lt;code&gt;U+FEFF&lt;/code&gt; 文字は（最初の文字であっても） &lt;code&gt;ZERO WIDTH NO-BREAK SPACE&lt;/code&gt; として扱われます。</target>
        </trans-unit>
        <trans-unit id="e93d4b1e7a80c62c1fe29ce1183609ea319edc6b" translate="yes" xml:space="preserve">
          <source>As a basic example, below is a simple HTML parser that uses the &lt;a href=&quot;#html.parser.HTMLParser&quot;&gt;&lt;code&gt;HTMLParser&lt;/code&gt;&lt;/a&gt; class to print out start tags, end tags, and data as they are encountered:</source>
          <target state="translated">基本的な例として、以下は、&lt;a href=&quot;#html.parser.HTMLParser&quot;&gt; &lt;code&gt;HTMLParser&lt;/code&gt; &lt;/a&gt;クラスを使用して、開始タグ、終了タグ、およびデータが発生したときにそれらを出力する単純なHTMLパーサーです。</target>
        </trans-unit>
        <trans-unit id="56cc68f817847f0888385ee2f0ae8a8820897e0f" translate="yes" xml:space="preserve">
          <source>As a consequence, the list &lt;code&gt;[1, 2]&lt;/code&gt; is considered equal to &lt;code&gt;[1.0, 2.0]&lt;/code&gt;, and similarly for tuples.</source>
          <target state="translated">結果として、リスト &lt;code&gt;[1, 2]&lt;/code&gt; は &lt;code&gt;[1.0, 2.0]&lt;/code&gt; ]と等しいと見なされ、タプルの場合も同様です。</target>
        </trans-unit>
        <trans-unit id="3c47037d0ed57ce0ffcb9e6f5f456d8a5dfad7c5" translate="yes" xml:space="preserve">
          <source>As a convenience &lt;em&gt;addr_spec&lt;/em&gt; can be specified instead of &lt;em&gt;username&lt;/em&gt; and &lt;em&gt;domain&lt;/em&gt;, in which case &lt;em&gt;username&lt;/em&gt; and &lt;em&gt;domain&lt;/em&gt; will be parsed from the &lt;em&gt;addr_spec&lt;/em&gt;. An &lt;em&gt;addr_spec&lt;/em&gt; must be a properly RFC quoted string; if it is not &lt;code&gt;Address&lt;/code&gt; will raise an error. Unicode characters are allowed and will be property encoded when serialized. However, per the RFCs, unicode is &lt;em&gt;not&lt;/em&gt; allowed in the username portion of the address.</source>
          <target state="translated">便宜上、&lt;em&gt;ユーザー名&lt;/em&gt;と&lt;em&gt;ドメインの&lt;/em&gt;代わりに&lt;em&gt;addr_spec&lt;/em&gt;を指定できます。この場合、&lt;em&gt;ユーザー名&lt;/em&gt;と&lt;em&gt;ドメイン&lt;/em&gt;は&lt;em&gt;addr_spec&lt;/em&gt;から解析されます。&lt;em&gt;addr_specは&lt;/em&gt;適切RFC引用符で囲まれた文字列でなければなりません。 &lt;code&gt;Address&lt;/code&gt; でない場合、エラーが発生します。 Unicode文字は許可され、シリアル化時にプロパティエンコードされます。ただし、RFCによると、アドレスのユーザー名部分でのUnicodeは許可されて&lt;em&gt;いません&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="56d9575dc7f90bc34c436a75f7caf3eeeecd477e" translate="yes" xml:space="preserve">
          <source>As a convenience for processing lists of addresses that consist of a mixture of groups and single addresses, a &lt;code&gt;Group&lt;/code&gt; may also be used to represent single addresses that are not part of a group by setting &lt;em&gt;display_name&lt;/em&gt; to &lt;code&gt;None&lt;/code&gt; and providing a list of the single address as &lt;em&gt;addresses&lt;/em&gt;.</source>
          <target state="translated">グループと単一のアドレスが混在するアドレスのリストを処理するための便宜として、 &lt;code&gt;Group&lt;/code&gt; は、&lt;em&gt;display_name&lt;/em&gt;を &lt;code&gt;None&lt;/code&gt; に設定し、単一のアドレスのリストを&lt;em&gt;アドレス&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="21c6d9923ff5341e64ead3588bfe1b0fc8708eec" translate="yes" xml:space="preserve">
          <source>As a convenience, &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; provides the methods &lt;a href=&quot;email.message#email.message.EmailMessage.as_bytes&quot;&gt;&lt;code&gt;as_bytes()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;bytes(aMessage)&lt;/code&gt; (a.k.a. &lt;a href=&quot;email.message#email.message.EmailMessage.__bytes__&quot;&gt;&lt;code&gt;__bytes__()&lt;/code&gt;&lt;/a&gt;), which simplify the generation of a serialized binary representation of a message object. For more detail, see &lt;a href=&quot;email.message#module-email.message&quot;&gt;&lt;code&gt;email.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">便宜上、&lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; のは&lt;/a&gt;方法の提供&lt;a href=&quot;email.message#email.message.EmailMessage.as_bytes&quot;&gt; &lt;code&gt;as_bytes()&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;bytes(aMessage)&lt;/code&gt; （別名&lt;a href=&quot;email.message#email.message.EmailMessage.__bytes__&quot;&gt; &lt;code&gt;__bytes__()&lt;/code&gt; &lt;/a&gt;）、メッセージオブジェクトのシリアル化バイナリ表現の生成を簡素化しています。詳細については、&lt;a href=&quot;email.message#module-email.message&quot;&gt; &lt;code&gt;email.message&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4abff2ddf7e07b5dde53a45acae67c7d73f15471" translate="yes" xml:space="preserve">
          <source>As a convenience, &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; provides the methods &lt;a href=&quot;email.message#email.message.EmailMessage.as_string&quot;&gt;&lt;code&gt;as_string()&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;str(aMessage)&lt;/code&gt; (a.k.a. &lt;a href=&quot;email.message#email.message.EmailMessage.__str__&quot;&gt;&lt;code&gt;__str__()&lt;/code&gt;&lt;/a&gt;), which simplify the generation of a formatted string representation of a message object. For more detail, see &lt;a href=&quot;email.message#module-email.message&quot;&gt;&lt;code&gt;email.message&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">便宜上、&lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; のは&lt;/a&gt;方法を提供&lt;a href=&quot;email.message#email.message.EmailMessage.as_string&quot;&gt; &lt;code&gt;as_string()&lt;/code&gt; &lt;/a&gt;および &lt;code&gt;str(aMessage)&lt;/code&gt; （別名&lt;a href=&quot;email.message#email.message.EmailMessage.__str__&quot;&gt; &lt;code&gt;__str__()&lt;/code&gt; &lt;/a&gt;）、メッセージオブジェクトのフォーマットされた文字列表現の生成を簡素化しています。詳細については、&lt;a href=&quot;email.message#module-email.message&quot;&gt; &lt;code&gt;email.message&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="702d8b69bc2e4520c3ea7fda0210ac4d16730354" translate="yes" xml:space="preserve">
          <source>As a convenience, it is allowed to call this method more than once; only the first call, however, will have an effect.</source>
          <target state="translated">便宜上、このメソッドを複数回呼び出すことができますが、最初の呼び出しだけが効果を発揮します。</target>
        </trans-unit>
        <trans-unit id="246fcbe17d21c864d76f20a8ea7b1030891cbcc5" translate="yes" xml:space="preserve">
          <source>As a default namespace, if &lt;em&gt;globs&lt;/em&gt; is not specified.</source>
          <target state="translated">デフォルトの名前空間として、&lt;em&gt;グロブ&lt;/em&gt;が指定されていない場合。</target>
        </trans-unit>
        <trans-unit id="59fca4637f2c6a11c94c0115101f5eb5fe7f8b54" translate="yes" xml:space="preserve">
          <source>As a hint: &lt;em&gt;ptype&lt;/em&gt; is &lt;code&gt;'Uniprocessor Free'&lt;/code&gt; on single processor NT machines and &lt;code&gt;'Multiprocessor Free'&lt;/code&gt; on multi processor machines. The &lt;em&gt;&amp;lsquo;Free&amp;rsquo;&lt;/em&gt; refers to the OS version being free of debugging code. It could also state &lt;em&gt;&amp;lsquo;Checked&amp;rsquo;&lt;/em&gt; which means the OS version uses debugging code, i.e. code that checks arguments, ranges, etc.</source>
          <target state="translated">ヒント：&lt;em&gt;ptype&lt;/em&gt;は、シングルプロセッサNTマシンでは &lt;code&gt;'Uniprocessor Free'&lt;/code&gt; であり、マルチプロセッサマシンでは &lt;code&gt;'Multiprocessor Free'&lt;/code&gt; です。&lt;em&gt;「無料」は&lt;/em&gt;コードのデバッグを含まないOSのバージョンを指します。また、&lt;em&gt;「チェック済み」&lt;/em&gt;と表示されることもあります。これは、OSバージョンがデバッグコード、つまり引数や範囲などをチェックするコードを使用することを意味します。</target>
        </trans-unit>
        <trans-unit id="01542f6485eff7fcd66532527eb2903905db20bd" translate="yes" xml:space="preserve">
          <source>As a last resort, the current working directory.</source>
          <target state="translated">最後の手段として、現在の作業ディレクトリ。</target>
        </trans-unit>
        <trans-unit id="4394d88d5506fb6bad90992f89785a34f016a9f1" translate="yes" xml:space="preserve">
          <source>As a practical example, a web application can symmetrically sign cookies sent to users and later verify them to make sure they weren&amp;rsquo;t tampered with:</source>
          <target state="translated">実際の例として、Webアプリケーションは、ユーザーに送信されたCookieに対称的に署名し、後でそれらが検証されて、改ざんされていないことを確認できます。</target>
        </trans-unit>
        <trans-unit id="7a3250916881530139f1d3c3f521304a2d00f953" translate="yes" xml:space="preserve">
          <source>As a resource for sharing data across processes, shared memory blocks may outlive the original process that created them. When one process no longer needs access to a shared memory block that might still be needed by other processes, the &lt;a href=&quot;#multiprocessing.shared_memory.SharedMemory.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; method should be called. When a shared memory block is no longer needed by any process, the &lt;a href=&quot;#multiprocessing.shared_memory.SharedMemory.unlink&quot;&gt;&lt;code&gt;unlink()&lt;/code&gt;&lt;/a&gt; method should be called to ensure proper cleanup.</source>
          <target state="translated">プロセス間でデータを共有するためのリソースとして、共有メモリブロックは、それらを作成した元のプロセスよりも長く存続する場合があります。 1つのプロセスが、他のプロセスで引き続き必要になる可能性がある共有メモリブロックにアクセスする必要がなくなった場合は、&lt;a href=&quot;#multiprocessing.shared_memory.SharedMemory.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出す必要があります。共有メモリブロックがどのプロセスでも不要になった場合は、&lt;a href=&quot;#multiprocessing.shared_memory.SharedMemory.unlink&quot;&gt; &lt;code&gt;unlink()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出して、適切にクリーンアップする必要があります。</target>
        </trans-unit>
        <trans-unit id="461cbf814397c1a6ad159d386793e5950747ea9b" translate="yes" xml:space="preserve">
          <source>As a result, these tables are exposed as functions, not as data structures. There are two kinds of tables in the RFC: sets and mappings. For a set, &lt;a href=&quot;#module-stringprep&quot;&gt;&lt;code&gt;stringprep&lt;/code&gt;&lt;/a&gt; provides the &amp;ldquo;characteristic function&amp;rdquo;, i.e. a function that returns &lt;code&gt;True&lt;/code&gt; if the parameter is part of the set. For mappings, it provides the mapping function: given the key, it returns the associated value. Below is a list of all functions available in the module.</source>
          <target state="translated">その結果、これらのテーブルはデータ構造としてではなく、関数として公開されます。RFCには、セットとマッピングの2種類のテーブルがあります。セットの場合、&lt;a href=&quot;#module-stringprep&quot;&gt; &lt;code&gt;stringprep&lt;/code&gt; &lt;/a&gt;は「特性関数」、つまりパラメーターがセットの一部である場合に &lt;code&gt;True&lt;/code&gt; を返す関数を提供します。マッピングの場合、マッピング関数を提供します。キーを指定すると、関連付けられた値を返します。以下は、モジュールで使用可能なすべての関数のリストです。</target>
        </trans-unit>
        <trans-unit id="2a184ffa1e02bb553c3cf1bb5908fd5b4956ff6b" translate="yes" xml:space="preserve">
          <source>As a shortcut, &lt;code&gt;python -m unittest&lt;/code&gt; is the equivalent of &lt;code&gt;python -m unittest discover&lt;/code&gt;. If you want to pass arguments to test discovery the &lt;code&gt;discover&lt;/code&gt; sub-command must be used explicitly.</source>
          <target state="translated">ショートカットとして、 &lt;code&gt;python -m unittest&lt;/code&gt; は &lt;code&gt;python -m unittest discover&lt;/code&gt; と同等です。引数を渡して &lt;code&gt;discover&lt;/code&gt; をテストする場合は、discoverサブコマンドを明示的に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="8c6052cb2b7ab711a2dfe70683f2ac20c152dc62" translate="yes" xml:space="preserve">
          <source>As a shortcut, you can pass the first chunk of data to update directly to the constructor as the positional argument:</source>
          <target state="translated">ショートカットとして、更新するデータの最初のチャンクを位置引数としてコンストラクタに直接渡すことができます。</target>
        </trans-unit>
        <trans-unit id="589b7e27763c67c7426c653620d97a4afe45eed8" translate="yes" xml:space="preserve">
          <source>As a shorthand for this type, &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; can be used to annotate arguments of any of the types mentioned above.</source>
          <target state="translated">このタイプの省略形として、&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;を使用して上記のタイプの引数に注釈を付けることができます。</target>
        </trans-unit>
        <trans-unit id="edc30d222e457c2b86d38c6dc2682bd1cf49fbc5" translate="yes" xml:space="preserve">
          <source>As a single multi-line string it looks like this:</source>
          <target state="translated">1つの複数行の文字列としては、次のようになります。</target>
        </trans-unit>
        <trans-unit id="31fec187f046cbb0fe0fcc91b7f32ecb2bd751ff" translate="yes" xml:space="preserve">
          <source>As an &lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;root&lt;/code&gt; has a tag and a dictionary of attributes:</source>
          <target state="translated">&lt;a href=&quot;#xml.etree.ElementTree.Element&quot;&gt; &lt;code&gt;Element&lt;/code&gt; &lt;/a&gt;として、 &lt;code&gt;root&lt;/code&gt; にはタグと属性の辞書があります。</target>
        </trans-unit>
        <trans-unit id="f8f3227359947ab2ce5b9947bd2e229fe5f93f58" translate="yes" xml:space="preserve">
          <source>As an added bonus you no longer need to keep a reference to the &lt;code&gt;patcher&lt;/code&gt; object.</source>
          <target state="translated">追加のボーナスとして、 &lt;code&gt;patcher&lt;/code&gt; オブジェクトへの参照を保持する必要がなくなりました。</target>
        </trans-unit>
        <trans-unit id="b503ab5544f8b7e846527fe7cd3425f0b5545263" translate="yes" xml:space="preserve">
          <source>As an alternative to using the &lt;code&gt;request()&lt;/code&gt; method described above, you can also send your request step by step, by using the four functions below.</source>
          <target state="translated">上記の &lt;code&gt;request()&lt;/code&gt; メソッドを使用する代わりに、以下の4つの関数を使用して、段階的にリクエストを送信することもできます。</target>
        </trans-unit>
        <trans-unit id="e7336776d38139cf85922861d97a6c8dfca4d4e8" translate="yes" xml:space="preserve">
          <source>As an example, here are two useful aliases (especially when placed in the &lt;code&gt;.pdbrc&lt;/code&gt; file):</source>
          <target state="translated">例として、2つの便利なエイリアスを次に示します（特に &lt;code&gt;.pdbrc&lt;/code&gt; ファイルに配置した場合）。</target>
        </trans-unit>
        <trans-unit id="5a80b839cbf77be14d284871859db2716a2d8281" translate="yes" xml:space="preserve">
          <source>As an example, here is a simple way to synchronize a client and server thread:</source>
          <target state="translated">例として、クライアントとサーバのスレッドを同期させる簡単な方法を以下に示します。</target>
        </trans-unit>
        <trans-unit id="0f4562ba3c72351908cae38e3fc969623aaf1135" translate="yes" xml:space="preserve">
          <source>As an example, let&amp;rsquo;s change the Combobox for the default theme a bit:</source>
          <target state="translated">例として、デフォルトのテーマのコンボボックスを少し変更しましょう：</target>
        </trans-unit>
        <trans-unit id="4228081bb4db5df72a0d8ad128755e932ebc79ee" translate="yes" xml:space="preserve">
          <source>As an example, the following calls to &lt;a href=&quot;#os.spawnlp&quot;&gt;&lt;code&gt;spawnlp()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.spawnvpe&quot;&gt;&lt;code&gt;spawnvpe()&lt;/code&gt;&lt;/a&gt; are equivalent:</source>
          <target state="translated">例として、以下の&lt;a href=&quot;#os.spawnlp&quot;&gt; &lt;code&gt;spawnlp()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#os.spawnvpe&quot;&gt; &lt;code&gt;spawnvpe()&lt;/code&gt; の&lt;/a&gt;呼び出しは同等です。</target>
        </trans-unit>
        <trans-unit id="ba4b1a6703f8b07e5a6b60e4bad30c91c5890466" translate="yes" xml:space="preserve">
          <source>As an example, the following code could be used to read an email message from a file on disk and pass it to the system &lt;code&gt;sendmail&lt;/code&gt; program on a Unix system:</source>
          <target state="translated">例として、次のコードを使用して、ディスク上のファイルから電子メールメッセージを読み取り、Unixシステム上のシステム &lt;code&gt;sendmail&lt;/code&gt; プログラムに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="fdbacbe7504a62ca3305f0051ceceb7ce7683b37" translate="yes" xml:space="preserve">
          <source>As an implementation detail, most modules have the name &lt;code&gt;__builtins__&lt;/code&gt; made available as part of their globals. The value of &lt;code&gt;__builtins__&lt;/code&gt; is normally either this module or the value of this module&amp;rsquo;s &lt;a href=&quot;stdtypes#object.__dict__&quot;&gt;&lt;code&gt;__dict__&lt;/code&gt;&lt;/a&gt; attribute. Since this is an implementation detail, it may not be used by alternate implementations of Python.</source>
          <target state="translated">実装の詳細として、ほとんどのモジュールには &lt;code&gt;__builtins__&lt;/code&gt; という名前があり、グローバルの一部として利用できます。 &lt;code&gt;__builtins__&lt;/code&gt; の値は通常、このモジュールまたはこのモジュールの&lt;a href=&quot;stdtypes#object.__dict__&quot;&gt; &lt;code&gt;__dict__&lt;/code&gt; &lt;/a&gt;属性の値です。これは実装の詳細であるため、Pythonの代替実装では使用できません。</target>
        </trans-unit>
        <trans-unit id="3c7b885f679999067032935a1aa6716b565ddb72" translate="yes" xml:space="preserve">
          <source>As at any time a re-negotiation is possible, a call to &lt;a href=&quot;#ssl.SSLSocket.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; can also cause write operations.</source>
          <target state="translated">再ネゴシエーションが可能な場合はいつでも、&lt;a href=&quot;#ssl.SSLSocket.read&quot;&gt; &lt;code&gt;read()&lt;/code&gt; の&lt;/a&gt;呼び出しによって書き込み操作が発生する可能性もあります。</target>
        </trans-unit>
        <trans-unit id="5fd487951e11f4d42348b340f0a9fb430d37c5cc" translate="yes" xml:space="preserve">
          <source>As at any time a re-negotiation is possible, a call to &lt;a href=&quot;#ssl.SSLSocket.write&quot;&gt;&lt;code&gt;write()&lt;/code&gt;&lt;/a&gt; can also cause read operations.</source>
          <target state="translated">いつでも再ネゴシエーションが可能なので、&lt;a href=&quot;#ssl.SSLSocket.write&quot;&gt; &lt;code&gt;write()&lt;/code&gt; の&lt;/a&gt;呼び出しによっても読み取り操作が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="1e24aa9e1ac5aea4c36f22d36193b3afce59ac93" translate="yes" xml:space="preserve">
          <source>As bytearray objects are mutable, they support the &lt;a href=&quot;#typesseq-mutable&quot;&gt;mutable&lt;/a&gt; sequence operations in addition to the common bytes and bytearray operations described in &lt;a href=&quot;#bytes-methods&quot;&gt;Bytes and Bytearray Operations&lt;/a&gt;.</source>
          <target state="translated">ByteArrayのオブジェクトが可変であるので、それらはサポート&lt;a href=&quot;#typesseq-mutable&quot;&gt;可変&lt;/a&gt;に記載の一般的なバイトとByteArrayの操作に加えて、配列の操作を&lt;a href=&quot;#bytes-methods&quot;&gt;バイトByteArrayの操作&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="78bf9d41f9b029450b419cb811cff375582f4159" translate="yes" xml:space="preserve">
          <source>As described before, SQLite supports only a limited set of types natively. To use other Python types with SQLite, you must &lt;strong&gt;adapt&lt;/strong&gt; them to one of the sqlite3 module&amp;rsquo;s supported types for SQLite: one of NoneType, int, float, str, bytes.</source>
          <target state="translated">前に説明したように、SQLiteは、限られたタイプのセットのみをネイティブでサポートします。SQLiteで他のPythonタイプを使用するには、SQLiteでサポートされているsqlite3モジュールのタイプの1つにそれらを&lt;strong&gt;適合させる&lt;/strong&gt;必要があります：NoneType、int、float、str、bytesの1つ。</target>
        </trans-unit>
        <trans-unit id="12104d6983d2c0ac8c4e8e3db3bbb26e8a81d6cd" translate="yes" xml:space="preserve">
          <source>As explained in the previous section, foreign functions can be accessed as attributes of loaded shared libraries. The function objects created in this way by default accept any number of arguments, accept any ctypes data instances as arguments, and return the default result type specified by the library loader. They are instances of a private class:</source>
          <target state="translated">前のセクションで説明したように、外部関数はロードされた共有ライブラリの属性としてアクセスすることができます。このようにして作成された関数オブジェクトは、デフォルトでは任意の数の引数を受け入れ、任意のctypesデータインスタンスを引数として受け入れ、ライブラリローダによって指定されたデフォルトの結果型を返します。これらはプライベートクラスのインスタンスです。</target>
        </trans-unit>
        <trans-unit id="c1c8f40732d97a4b4e90b1a6e8a0be872ac0ea63" translate="yes" xml:space="preserve">
          <source>As far as possible one should try to avoid shifting large amounts of data between processes.</source>
          <target state="translated">可能な限り、プロセス間で大量のデータを移行させないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="1dbfa2bc97572579991ca5c4ddb17267e21f80e3" translate="yes" xml:space="preserve">
          <source>As has been mentioned before, all Python types except integers, strings, and bytes objects have to be wrapped in their corresponding &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; type, so that they can be converted to the required C data type:</source>
          <target state="translated">前述のように、整数、文字列、バイトオブジェクトを除くすべてのPython型は、対応する&lt;a href=&quot;#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; &lt;/a&gt;型にラップして、必要なCデータ型に変換できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="4ddf55edc3a51e93aacbc734fc2d7fe5eb787249" translate="yes" xml:space="preserve">
          <source>As initialized upon program startup, the first item of this list, &lt;code&gt;path[0]&lt;/code&gt;, is the directory containing the script that was used to invoke the Python interpreter. If the script directory is not available (e.g. if the interpreter is invoked interactively or if the script is read from standard input), &lt;code&gt;path[0]&lt;/code&gt; is the empty string, which directs Python to search modules in the current directory first. Notice that the script directory is inserted &lt;em&gt;before&lt;/em&gt; the entries inserted as a result of &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONPATH&quot; id=&quot;index-21&quot;&gt;&lt;code&gt;PYTHONPATH&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">プログラムの起動時に初期化されると、このリストの最初の項目である &lt;code&gt;path[0]&lt;/code&gt; は、Pythonインタープリターの呼び出しに使用されたスクリプトを含むディレクトリです。スクリプトディレクトリが利用できない場合（たとえば、インタプリタがインタラクティブに呼び出される場合、またはスクリプトが標準入力から読み取られる場合）、 &lt;code&gt;path[0]&lt;/code&gt; は空の文字列で、Pythonが最初に現在のディレクトリでモジュールを検索するように指示します。&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONPATH&quot; id=&quot;index-21&quot;&gt; &lt;code&gt;PYTHONPATH&lt;/code&gt; の&lt;/a&gt;結果として挿入されたエントリの&lt;em&gt;前に&lt;/em&gt;、スクリプトディレクトリが挿入されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="56a04625be80324cea19908dff1bffa8f839b261" translate="yes" xml:space="preserve">
          <source>As initialized upon program startup, the first item of this list, &lt;code&gt;path[0]&lt;/code&gt;, is the directory containing the script that was used to invoke the Python interpreter. If the script directory is not available (e.g. if the interpreter is invoked interactively or if the script is read from standard input), &lt;code&gt;path[0]&lt;/code&gt; is the empty string, which directs Python to search modules in the current directory first. Notice that the script directory is inserted &lt;em&gt;before&lt;/em&gt; the entries inserted as a result of &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONPATH&quot; id=&quot;index-22&quot;&gt;&lt;code&gt;PYTHONPATH&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">プログラムの起動時に初期化されると、このリストの最初の項目である &lt;code&gt;path[0]&lt;/code&gt; は、Pythonインタープリターを呼び出すために使用されたスクリプトを含むディレクトリです。スクリプトディレクトリが利用できない場合（たとえば、インタプリタがインタラクティブに呼び出される場合、またはスクリプトが標準入力から読み取られる場合）、 &lt;code&gt;path[0]&lt;/code&gt; は空の文字列であり、Pythonに現在のディレクトリ内のモジュールを最初に検索するように指示します。&lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONPATH&quot; id=&quot;index-22&quot;&gt; &lt;code&gt;PYTHONPATH&lt;/code&gt; の&lt;/a&gt;結果として挿入されるエントリの&lt;em&gt;前に&lt;/em&gt;、スクリプトディレクトリが挿入されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="19b1c3ec635acfaf81b14d105d3a7b1195ceafe9" translate="yes" xml:space="preserve">
          <source>As introduced in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0526&quot; id=&quot;index-18&quot;&gt;&lt;strong&gt;PEP 526&lt;/strong&gt;&lt;/a&gt;, a variable annotation wrapped in ClassVar indicates that a given attribute is intended to be used as a class variable and should not be set on instances of that class. Usage:</source>
          <target state="translated">&lt;a href=&quot;https://www.python.org/dev/peps/pep-0526&quot; id=&quot;index-18&quot;&gt;&lt;strong&gt;PEP 526&lt;/strong&gt;&lt;/a&gt;で導入されたように、ClassVarでラップされた変数注釈は、特定の属性がクラス変数として使用されることを意図しており、そのクラスのインスタンスに設定されるべきではないことを示します。使用法：</target>
        </trans-unit>
        <trans-unit id="6d02dd5a1c0be670a5afec6d8bf7ade0cbe0a443" translate="yes" xml:space="preserve">
          <source>As introduced in &lt;a href=&quot;https://www.python.org/dev/peps/pep-0526&quot; id=&quot;index-22&quot;&gt;&lt;strong&gt;PEP 526&lt;/strong&gt;&lt;/a&gt;, a variable annotation wrapped in ClassVar indicates that a given attribute is intended to be used as a class variable and should not be set on instances of that class. Usage:</source>
          <target state="translated">&lt;a href=&quot;https://www.python.org/dev/peps/pep-0526&quot; id=&quot;index-22&quot;&gt;&lt;strong&gt;PEP 526&lt;/strong&gt;&lt;/a&gt;で導入されたように、ClassVarでラップされた変数注釈は、特定の属性がクラス変数として使用されることを意図しており、そのクラスのインスタンスに設定されるべきではないことを示します。使用法：</target>
        </trans-unit>
        <trans-unit id="b975573d762213d718d91e5a19d0201d6f4a860f" translate="yes" xml:space="preserve">
          <source>As is the case with all named tuples, the subclass has a few additional methods and attributes that are particularly useful. One such method is &lt;code&gt;_replace()&lt;/code&gt;. The &lt;code&gt;_replace()&lt;/code&gt; method will return a new ParseResult object replacing specified fields with new values.</source>
          <target state="translated">すべての名前付きタプルの場合と同様に、サブクラスには、特に役立ついくつかの追加のメソッドと属性があります。そのようなメソッドの1つが &lt;code&gt;_replace()&lt;/code&gt; です。 &lt;code&gt;_replace()&lt;/code&gt; メソッドは、新しい値で指定されたフィールドを置き換える新しいParseResultオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="1c24eca1bdc966d5e836feb3ab27d1d9ed3eb23f" translate="yes" xml:space="preserve">
          <source>As long as the view exists, the &lt;a href=&quot;#io.BytesIO&quot;&gt;&lt;code&gt;BytesIO&lt;/code&gt;&lt;/a&gt; object cannot be resized or closed.</source>
          <target state="translated">ビューが存在する限り、&lt;a href=&quot;#io.BytesIO&quot;&gt; &lt;code&gt;BytesIO&lt;/code&gt; &lt;/a&gt;オブジェクトのサイズを変更したり、閉じたりすることはできません。</target>
        </trans-unit>
        <trans-unit id="610fcdc735062bf431e7a9e2ee300d06d531c84b" translate="yes" xml:space="preserve">
          <source>As mentioned above, if a child process has put items on a queue (and it has not used &lt;a href=&quot;#multiprocessing.Queue.cancel_join_thread&quot;&gt;&lt;code&gt;JoinableQueue.cancel_join_thread&lt;/code&gt;&lt;/a&gt;), then that process will not terminate until all buffered items have been flushed to the pipe.</source>
          <target state="translated">上記のように、子プロセスがアイテムをキューに入れた場合（そして&lt;a href=&quot;#multiprocessing.Queue.cancel_join_thread&quot;&gt; &lt;code&gt;JoinableQueue.cancel_join_thread&lt;/code&gt; を&lt;/a&gt;使用していない場合）、そのプロセスは、すべてのバッファーされたアイテムがパイプにフラッシュされるまで終了しません。</target>
        </trans-unit>
        <trans-unit id="c946dacfc8f875db22dfcdba42153aefbf4569f0" translate="yes" xml:space="preserve">
          <source>As mentioned above, when doing concurrent programming it is usually best to avoid using shared state as far as possible. This is particularly true when using multiple processes.</source>
          <target state="translated">上述したように、同時並行プログラミングを行う場合、通常は共有状態の使用はできる限り避けた方が良いでしょう。これは特に複数のプロセスを使用する場合に当てはまります。</target>
        </trans-unit>
        <trans-unit id="741a8166c57402ebadd253e7254391864f2e0259" translate="yes" xml:space="preserve">
          <source>As mentioned in the &lt;a href=&quot;io#io-overview&quot;&gt;Overview&lt;/a&gt;, Python distinguishes between binary and text I/O. Files opened in binary mode (including &lt;code&gt;'b'&lt;/code&gt; in the &lt;em&gt;mode&lt;/em&gt; argument) return contents as &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; objects without any decoding. In text mode (the default, or when &lt;code&gt;'t'&lt;/code&gt; is included in the &lt;em&gt;mode&lt;/em&gt; argument), the contents of the file are returned as &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, the bytes having been first decoded using a platform-dependent encoding or using the specified &lt;em&gt;encoding&lt;/em&gt; if given.</source>
          <target state="translated">&lt;a href=&quot;io#io-overview&quot;&gt;概要&lt;/a&gt;で述べたように、PythonはバイナリI / OとテキストI / Oを区別します。バイナリモードで開いたファイル（&lt;em&gt;mode&lt;/em&gt;引数に &lt;code&gt;'b'&lt;/code&gt; を含む）は、内容を&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;オブジェクトとしてデコードせずに返します。テキストモード（デフォルト、または&lt;em&gt;mode&lt;/em&gt;引数に &lt;code&gt;'t'&lt;/code&gt; が含まれている場合）では、ファイルの内容が&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;として返されます。バイトは、プラットフォーム依存のエンコーディングまたは指定された&lt;em&gt;エンコーディング（&lt;/em&gt;指定されている場合）を使用して最初にデコードされています。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="554761a2dd1c786ee19c7c8d095e92534e85fcea" translate="yes" xml:space="preserve">
          <source>As mentioned in the introduction, &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; has grown to have three primary uses:</source>
          <target state="translated">&lt;a href=&quot;#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; &lt;/a&gt;述べたように、doctestは主に3つの用途に成長しました。</target>
        </trans-unit>
        <trans-unit id="2dd3237ecb3ed79cf4cebba9859ab17d40aea008" translate="yes" xml:space="preserve">
          <source>As noted in &lt;a href=&quot;https://www.rfc-editor.org/errata_search.php?rfc=7159&quot;&gt;the errata for RFC 7159&lt;/a&gt;, JSON permits literal U+2028 (LINE SEPARATOR) and U+2029 (PARAGRAPH SEPARATOR) characters in strings, whereas JavaScript (as of ECMAScript Edition 5.1) does not.</source>
          <target state="translated">&lt;a href=&quot;https://www.rfc-editor.org/errata_search.php?rfc=7159&quot;&gt;RFC 7159のエラッタに&lt;/a&gt;記載されているように、JSONでは文字列でリテラルU + 2028（LINE SEPARATOR）およびU + 2029（PARAGRAPH SEPARATOR）文字を使用できますが、JavaScript（ECMAScript Edition 5.1以降）では使用できません。</target>
        </trans-unit>
        <trans-unit id="e1d391aeb07828e2c8ece6409fe0c3895c39bf56" translate="yes" xml:space="preserve">
          <source>As noted in the documentation of &lt;a href=&quot;#contextlib.ExitStack.push&quot;&gt;&lt;code&gt;ExitStack.push()&lt;/code&gt;&lt;/a&gt;, this method can be useful in cleaning up an already allocated resource if later steps in the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt;&lt;code&gt;__enter__()&lt;/code&gt;&lt;/a&gt; implementation fail.</source>
          <target state="translated">&lt;a href=&quot;#contextlib.ExitStack.push&quot;&gt; &lt;code&gt;ExitStack.push()&lt;/code&gt; の&lt;/a&gt;ドキュメントに記載されているように、このメソッドは、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__enter__&quot;&gt; &lt;code&gt;__enter__()&lt;/code&gt; &lt;/a&gt;実装の後のステップが失敗した場合に、すでに割り当てられているリソースをクリーンアップするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="64b8dfa9189fa9c6b65ee7c6f6f91e92dfd48dc4" translate="yes" xml:space="preserve">
          <source>As noted in the documentation of &lt;a href=&quot;#contextlib.ExitStack.push&quot;&gt;&lt;code&gt;ExitStack.push()&lt;/code&gt;&lt;/a&gt;, this method can be useful in cleaning up an already allocated resource if later steps in the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__enter__&quot;&gt;&lt;code&gt;__enter__()&lt;/code&gt;&lt;/a&gt; implementation fail.</source>
          <target state="translated">&lt;a href=&quot;#contextlib.ExitStack.push&quot;&gt; &lt;code&gt;ExitStack.push()&lt;/code&gt; の&lt;/a&gt;ドキュメントに記載されているように、このメソッドは、&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__enter__&quot;&gt; &lt;code&gt;__enter__()&lt;/code&gt; &lt;/a&gt;実装の後のステップが失敗した場合に、すでに割り当てられているリソースをクリーンアップするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="0a4749ff1ae4127c8c5d53e09d2473530212eedd" translate="yes" xml:space="preserve">
          <source>As of Python 3.3, this is equivalent to &lt;code&gt;os.pathconf(fd, name)&lt;/code&gt;.</source>
          <target state="translated">Python 3.3以降、これは &lt;code&gt;os.pathconf(fd, name)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="254ec21e59cc0a2f51b3d99a3106cbbf6e86b501" translate="yes" xml:space="preserve">
          <source>As of Python 3.3, this is equivalent to &lt;code&gt;os.stat(fd)&lt;/code&gt;.</source>
          <target state="translated">Python 3.3以降、これは &lt;code&gt;os.stat(fd)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="de72d09fd1ee5572d4a2be6e2e876c81871f619b" translate="yes" xml:space="preserve">
          <source>As of Python 3.3, this is equivalent to &lt;code&gt;os.stat(path, dir_fd=dir_fd,
follow_symlinks=False)&lt;/code&gt;.</source>
          <target state="translated">Python 3.3以降、これは &lt;code&gt;os.stat(path, dir_fd=dir_fd, follow_symlinks=False)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="020b6b46db7feae3d90b1504ca1411e18c36a07a" translate="yes" xml:space="preserve">
          <source>As our examples shows, you have to be careful with what you allow to be unpickled. Therefore if security is a concern, you may want to consider alternatives such as the marshalling API in &lt;a href=&quot;xmlrpc.client#module-xmlrpc.client&quot;&gt;&lt;code&gt;xmlrpc.client&lt;/code&gt;&lt;/a&gt; or third-party solutions.</source>
          <target state="translated">私たちの例が示すように、ピッキングを解除できるように注意する必要があります。したがって、セキュリティが懸念される場合は、&lt;a href=&quot;xmlrpc.client#module-xmlrpc.client&quot;&gt; &lt;code&gt;xmlrpc.client&lt;/code&gt; &lt;/a&gt;のマーシャリングAPI やサードパーティのソリューションなどの代替手段を検討することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="94873ca8fb7d049aa1f358ba21e1835b6d80677c" translate="yes" xml:space="preserve">
          <source>As permitted, though not required, by the RFC, this module&amp;rsquo;s serializer sets &lt;em&gt;ensure_ascii=True&lt;/em&gt; by default, thus escaping the output so that the resulting strings only contain ASCII characters.</source>
          <target state="translated">必須ではありませんが、RFCによって許可されているように、このモジュールの&lt;em&gt;シリアライザーは&lt;/em&gt;デフォルトで&lt;em&gt;Ensure_ascii = True&lt;/em&gt;を設定し、結果の文字列にASCII文字のみが含まれるように出力をエスケープします。</target>
        </trans-unit>
        <trans-unit id="ab552d0f5d2aaec29b8f53a32c1edd92d2547512" translate="yes" xml:space="preserve">
          <source>As required by the Python DB API Spec, the &lt;a href=&quot;#sqlite3.Cursor.rowcount&quot;&gt;&lt;code&gt;rowcount&lt;/code&gt;&lt;/a&gt; attribute &amp;ldquo;is -1 in case no &lt;code&gt;executeXX()&lt;/code&gt; has been performed on the cursor or the rowcount of the last operation is not determinable by the interface&amp;rdquo;. This includes &lt;code&gt;SELECT&lt;/code&gt; statements because we cannot determine the number of rows a query produced until all rows were fetched.</source>
          <target state="translated">Python DB API仕様で要求されているように、&lt;a href=&quot;#sqlite3.Cursor.rowcount&quot;&gt; &lt;code&gt;rowcount&lt;/code&gt; &lt;/a&gt;属性は「カーソルで &lt;code&gt;executeXX()&lt;/code&gt; が実行されなかった場合、または最後の操作の行カウントがインターフェイスで判別できない場合は-1 です」。すべての行がフェッチされるまでクエリが生成した行数を特定できないため、これには &lt;code&gt;SELECT&lt;/code&gt; ステートメントが含まれます。</target>
        </trans-unit>
        <trans-unit id="3d9ef0be3fa5743d16dd6068d735d43da1ed1d14" translate="yes" xml:space="preserve">
          <source>As seen below, you usually mark the strings in your application that are candidates for translation, by wrapping them in a call to the &lt;code&gt;_()&lt;/code&gt; function, like this:</source>
          <target state="translated">以下に示すように、通常、翻訳の候補となるアプリケーション内の文字列は、次のように &lt;code&gt;_()&lt;/code&gt; 関数の呼び出しでラップすることによってマークします。</target>
        </trans-unit>
        <trans-unit id="777c0664c56b282dce066ba8bdfa9c0f273bd6e5" translate="yes" xml:space="preserve">
          <source>As shown above, the &lt;a href=&quot;#decimal.getcontext&quot;&gt;&lt;code&gt;getcontext()&lt;/code&gt;&lt;/a&gt; function accesses the current context and allows the settings to be changed. This approach meets the needs of most applications.</source>
          <target state="translated">上記のように、&lt;a href=&quot;#decimal.getcontext&quot;&gt; &lt;code&gt;getcontext()&lt;/code&gt; &lt;/a&gt;関数は現在のコンテキストにアクセスし、設定を変更できるようにします。このアプローチは、ほとんどのアプリケーションのニーズを満たします。</target>
        </trans-unit>
        <trans-unit id="ca7a4ca36c98546dcbae60adf434cc1fdf31f390" translate="yes" xml:space="preserve">
          <source>As shown above, the &lt;code&gt;MISSING&lt;/code&gt; value is a sentinel object used to detect if the &lt;code&gt;default&lt;/code&gt; and &lt;code&gt;default_factory&lt;/code&gt; parameters are provided. This sentinel is used because &lt;code&gt;None&lt;/code&gt; is a valid value for &lt;code&gt;default&lt;/code&gt;. No code should directly use the &lt;code&gt;MISSING&lt;/code&gt; value.</source>
          <target state="translated">上記のように、 &lt;code&gt;MISSING&lt;/code&gt; 値は、 &lt;code&gt;default&lt;/code&gt; および &lt;code&gt;default_factory&lt;/code&gt; パラメーターが提供されているかどうかを検出するために使用される監視オブジェクトです。 &lt;code&gt;None&lt;/code&gt; は &lt;code&gt;default&lt;/code&gt; 有効な値であるため、このセンチネルが使用されます。コードでは &lt;code&gt;MISSING&lt;/code&gt; 値を直接使用しないでください。</target>
        </trans-unit>
        <trans-unit id="e77922c76564f11dd7e1353e59f5212f7c398d9d" translate="yes" xml:space="preserve">
          <source>As shown, &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt; also makes it quite easy to use &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statements to manage arbitrary resources that don&amp;rsquo;t natively support the context management protocol.</source>
          <target state="translated">示されているように、&lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントと共に使用して、コンテキスト管理プロトコルをネイティブにサポートしない任意のリソースを管理することも非常に簡単にします。</target>
        </trans-unit>
        <trans-unit id="5fb7bd38776b3eebef09256f660c5e1b512cbe36" translate="yes" xml:space="preserve">
          <source>As shown, &lt;a href=&quot;#contextlib.ExitStack&quot;&gt;&lt;code&gt;ExitStack&lt;/code&gt;&lt;/a&gt; also makes it quite easy to use &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statements to manage arbitrary resources that don&amp;rsquo;t natively support the context management protocol.</source>
          <target state="translated">示されているように、&lt;a href=&quot;#contextlib.ExitStack&quot;&gt; &lt;code&gt;ExitStack&lt;/code&gt; &lt;/a&gt;を使用する&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;、コンテキスト管理プロトコルをネイティブにサポートしていない任意のリソースを管理するためのステートメントを非常に簡単に使用できます。</target>
        </trans-unit>
        <trans-unit id="afcd78e93b46d440282cd0af672c39772532099d" translate="yes" xml:space="preserve">
          <source>As the &lt;code&gt;cProfile.Profile&lt;/code&gt; class cannot be calibrated, custom timer functions should be used with care and should be as fast as possible. For the best results with a custom timer, it might be necessary to hard-code it in the C source of the internal &lt;code&gt;_lsprof&lt;/code&gt; module.</source>
          <target state="translated">以下のよう &lt;code&gt;cProfile.Profile&lt;/code&gt; のクラスを校正することができない、カスタムタイマー機能は注意して使用する必要があり、可能な限り高速でなければなりません。カスタムタイマーを使用して最良の結果を得るには、内部 &lt;code&gt;_lsprof&lt;/code&gt; モジュールのCソースにタイマーをハードコーディングする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="45e79820db8ac841bcd7b5678fd84162e5edd5f6" translate="yes" xml:space="preserve">
          <source>As the circle is approximated by an inscribed regular polygon, &lt;em&gt;steps&lt;/em&gt; determines the number of steps to use. If not given, it will be calculated automatically. May be used to draw regular polygons.</source>
          <target state="translated">円を内接する正多角形で近似されるように、&lt;em&gt;手順は&lt;/em&gt;、使用する手順の数を決定します。指定しない場合は、自動的に計算されます。通常のポリゴンの描画に使用できます。</target>
        </trans-unit>
        <trans-unit id="471b958617fa3e20177a04beca298db4067ef76f" translate="yes" xml:space="preserve">
          <source>As the decorated function must be able to be called multiple times, the underlying context manager must support use in multiple &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statements. If this is not the case, then the original construct with the explicit &lt;code&gt;with&lt;/code&gt; statement inside the function should be used.</source>
          <target state="translated">デコレートされた関数は複数回呼び出せる必要があるため、基になるコンテキストマネージャーは複数の&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントでの使用をサポートする必要があります。そうでない場合は、関数内に明示的な &lt;code&gt;with&lt;/code&gt; ステートメントを含む元の構成を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="cb86e3413c4f286f84d17583ff8db93cd75dbf02" translate="yes" xml:space="preserve">
          <source>As the decorated function must be able to be called multiple times, the underlying context manager must support use in multiple &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statements. If this is not the case, then the original construct with the explicit &lt;code&gt;with&lt;/code&gt; statement inside the function should be used.</source>
          <target state="translated">装飾された関数は複数回呼び出すことができる必要があるため、基礎となるコンテキストマネージャーは複数の&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントでの使用をサポートする必要があります。そうでない場合は、関数内に明示的な &lt;code&gt;with&lt;/code&gt; ステートメントを含む元の構成を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="68dd2b46461463b5dc81b3ce8b1f5caf9be1fe6b" translate="yes" xml:space="preserve">
          <source>As the example shows, if an option is marked as &lt;code&gt;required&lt;/code&gt;, &lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt;&lt;code&gt;parse_args()&lt;/code&gt;&lt;/a&gt; will report an error if that option is not present at the command line.</source>
          <target state="translated">例が示すように、オプションが &lt;code&gt;required&lt;/code&gt; としてマークされている場合、そのオプションがコマンドラインに存在しないと、&lt;a href=&quot;#argparse.ArgumentParser.parse_args&quot;&gt; &lt;code&gt;parse_args()&lt;/code&gt; &lt;/a&gt;はエラーを報告します。</target>
        </trans-unit>
        <trans-unit id="76e64b80b59b5f1ae7b48ded543b566b2c5fea6e" translate="yes" xml:space="preserve">
          <source>As the help string supports %-formatting, if you want a literal &lt;code&gt;%&lt;/code&gt; to appear in the help string, you must escape it as &lt;code&gt;%%&lt;/code&gt;.</source>
          <target state="translated">ヘルプ文字列は％形式をサポートしているため、リテラル &lt;code&gt;%&lt;/code&gt; をヘルプ文字列に表示したい場合は、 &lt;code&gt;%%&lt;/code&gt; としてエスケープする必要があります。</target>
        </trans-unit>
        <trans-unit id="a59b1810ad2366588e1560b21083e815a61d7702" translate="yes" xml:space="preserve">
          <source>As the output from the example shows, reusing a single stack object across multiple with statements works correctly, but attempting to nest them will cause the stack to be cleared at the end of the innermost with statement, which is unlikely to be desirable behaviour.</source>
          <target state="translated">例の出力が示すように、複数のwith文で単一のスタックオブジェクトを再利用することは正しく動作しますが、それらを入れ子にしようとすると、一番内側のwith文の最後にスタックがクリアされてしまいますが、これは望ましい動作ではないでしょう。</target>
        </trans-unit>
        <trans-unit id="7432cc881a9c7f8b1e82bf98956cfaf69b88ec94" translate="yes" xml:space="preserve">
          <source>As the previous example shows, you can add &lt;code&gt;...&lt;/code&gt; lines to your example containing only directives. This can be useful when an example is too long for a directive to comfortably fit on the same line:</source>
          <target state="translated">前の例が示すように、ディレクティブのみを含む例に &lt;code&gt;...&lt;/code&gt; 行を追加できます。これは、例が長すぎてディレクティブが同じ行に快適に収まらない場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="bad0a4f610137a71fbd404f93777ff0fbaf5382a" translate="yes" xml:space="preserve">
          <source>As the python.org website uses &lt;em&gt;utf-8&lt;/em&gt; encoding as specified in its meta tag, we will use the same for decoding the bytes object.</source>
          <target state="translated">python.org Webサイトはメタタグで指定されているように&lt;em&gt;utf-8&lt;/em&gt;エンコーディングを使用しているため、バイトオブジェクトのデコードにも同じ方法を使用します。</target>
        </trans-unit>
        <trans-unit id="f9ef874d7307cc69342eb69c015b2b52804bc24e" translate="yes" xml:space="preserve">
          <source>As we can easily check, our array is sorted now:</source>
          <target state="translated">簡単に確認できるように、これで配列がソートされました。</target>
        </trans-unit>
        <trans-unit id="c23b38ddb6aef5ba6269faf72685d2b4793ec969" translate="yes" xml:space="preserve">
          <source>As we can see above, the API is pretty straightforward. The only bit of magic involves the &lt;code&gt;DEFAULT&lt;/code&gt; section which provides default values for all other sections &lt;a href=&quot;#id14&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;. Note also that keys in sections are case-insensitive and stored in lowercase &lt;a href=&quot;#id14&quot; id=&quot;id2&quot;&gt;1&lt;/a&gt;.</source>
          <target state="translated">上記のように、APIは非常に単純です。唯一の魔法は、他のすべてのセクション&lt;a href=&quot;#id14&quot; id=&quot;id1&quot;&gt;1の&lt;/a&gt;デフォルト値を提供する &lt;code&gt;DEFAULT&lt;/code&gt; セクションに関係しています。セクション内のキーは大文字と小文字が区別されず、小文字&lt;a href=&quot;#id14&quot; id=&quot;id2&quot;&gt;1で&lt;/a&gt;格納されることにも注意してください。</target>
        </trans-unit>
        <trans-unit id="fd35f4640dac53d4cba2d342193297bc4fce7dc6" translate="yes" xml:space="preserve">
          <source>As we shall see, pickle does not use directly the methods described above. In fact, these methods are part of the copy protocol which implements the &lt;a href=&quot;#object.__reduce__&quot;&gt;&lt;code&gt;__reduce__()&lt;/code&gt;&lt;/a&gt; special method. The copy protocol provides a unified interface for retrieving the data necessary for pickling and copying objects. &lt;a href=&quot;#id10&quot; id=&quot;id5&quot;&gt;4&lt;/a&gt;</source>
          <target state="translated">後で説明するように、pickleは上記の方法を直接使用しません。実際、これらのメソッドは、&lt;a href=&quot;#object.__reduce__&quot;&gt; &lt;code&gt;__reduce__()&lt;/code&gt; &lt;/a&gt;特殊メソッドを実装するコピープロトコルの一部です。コピープロトコルは、オブジェクトのピクル化とコピーに必要なデータを取得するための統一されたインターフェイスを提供します。&lt;a href=&quot;#id10&quot; id=&quot;id5&quot;&gt;4&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="debea2eb93150eb2d1b36d8b1bf25e4f62753e5c" translate="yes" xml:space="preserve">
          <source>As well as a decorator &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; can be used as a context manager in a with statement:</source>
          <target state="translated">デコレータと同様に、&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;はwith文でコンテキストマネージャとして使用できます。</target>
        </trans-unit>
        <trans-unit id="b9da1c5bbe7d0c4d318b5718e8cf13b1be346dab" translate="yes" xml:space="preserve">
          <source>As well as attributes on the created mock attributes, like the &lt;a href=&quot;#unittest.mock.Mock.return_value&quot;&gt;&lt;code&gt;return_value&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt;&lt;code&gt;side_effect&lt;/code&gt;&lt;/a&gt;, of child mocks can also be configured. These aren&amp;rsquo;t syntactically valid to pass in directly as keyword arguments, but a dictionary with these as keys can still be expanded into a &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; call using &lt;code&gt;**&lt;/code&gt;:</source>
          <target state="translated">子モックの&lt;a href=&quot;#unittest.mock.Mock.return_value&quot;&gt; &lt;code&gt;return_value&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#unittest.mock.Mock.side_effect&quot;&gt; &lt;code&gt;side_effect&lt;/code&gt; &lt;/a&gt;など、作成されたモック属性の属性も構成できます。これらは、キーワード引数として直接渡すことは構文的に有効ではありませんが、これらをキーとして持つディクショナリは、 &lt;code&gt;**&lt;/code&gt; を使用して&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;呼び出しに拡張できます。</target>
        </trans-unit>
        <trans-unit id="f8beeb01a1af78f02464bc704487f07739d5804d" translate="yes" xml:space="preserve">
          <source>As well as being a path it is possible to pass a package name, for example &lt;code&gt;myproject.subpackage.test&lt;/code&gt;, as the start directory. The package name you supply will then be imported and its location on the filesystem will be used as the start directory.</source>
          <target state="translated">パスであるだけでなく、パッケージ名（例： &lt;code&gt;myproject.subpackage.test&lt;/code&gt; ）を開始ディレクトリーとして渡すこともできます。指定したパッケージ名がインポートされ、ファイルシステム上のその場所が開始ディレクトリとして使用されます。</target>
        </trans-unit>
        <trans-unit id="2ac654a9b0a771a253377851cbe7d9dcdd53aa08" translate="yes" xml:space="preserve">
          <source>As well as external objects, there is sometimes also a need to refer to objects in the configuration. This will be done implicitly by the configuration system for things that it knows about. For example, the string value &lt;code&gt;'DEBUG'&lt;/code&gt; for a &lt;code&gt;level&lt;/code&gt; in a logger or handler will automatically be converted to the value &lt;code&gt;logging.DEBUG&lt;/code&gt;, and the &lt;code&gt;handlers&lt;/code&gt;, &lt;code&gt;filters&lt;/code&gt; and &lt;code&gt;formatter&lt;/code&gt; entries will take an object id and resolve to the appropriate destination object.</source>
          <target state="translated">外部オブジェクトだけでなく、構成内のオブジェクトを参照する必要がある場合もあります。これは、それが知っていることについて、構成システムによって暗黙的に行われます。例えば、文字列値 &lt;code&gt;'DEBUG'&lt;/code&gt; のための &lt;code&gt;level&lt;/code&gt; ロガーまたはハンドラでは、自動的に値に変換され &lt;code&gt;logging.DEBUG&lt;/code&gt; 、及び &lt;code&gt;handlers&lt;/code&gt; 、 &lt;code&gt;filters&lt;/code&gt; 及び &lt;code&gt;formatter&lt;/code&gt; エントリは、適切な宛先オブジェクトにオブジェクトIDと決意を取ります。</target>
        </trans-unit>
        <trans-unit id="8a2e6cebd59a22f19c5763adb2176795f3405ba5" translate="yes" xml:space="preserve">
          <source>As well as tracking calls to themselves, mocks also track calls to methods and attributes, and &lt;em&gt;their&lt;/em&gt; methods and attributes:</source>
          <target state="translated">モックは自身への呼び出しを追跡するだけでなく、メソッドと属性への呼び出し、および&lt;em&gt;それらの&lt;/em&gt;メソッドと属性も追跡します。</target>
        </trans-unit>
        <trans-unit id="eba8324196b8dfc54af3887d0a5dc2b00afccd66" translate="yes" xml:space="preserve">
          <source>As well as using &lt;em&gt;autospec&lt;/em&gt; through &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; there is a &lt;a href=&quot;#unittest.mock.create_autospec&quot;&gt;&lt;code&gt;create_autospec()&lt;/code&gt;&lt;/a&gt; for creating autospecced mocks directly:</source>
          <target state="translated">ならびに使用&lt;em&gt;autospecを&lt;/em&gt;介して&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;がある&lt;a href=&quot;#unittest.mock.create_autospec&quot;&gt; &lt;code&gt;create_autospec()&lt;/code&gt; &lt;/a&gt;直接autospeccedモックを作成するために：</target>
        </trans-unit>
        <trans-unit id="0630c32a8836c172a8afec7c1702dc1fc98e8c01" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;#doctest.testmod&quot;&gt;&lt;code&gt;testmod()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#doctest.testfile&quot;&gt;&lt;code&gt;testfile()&lt;/code&gt;&lt;/a&gt; won&amp;rsquo;t display anything unless an example fails. If an example does fail, then the failing example(s) and the cause(s) of the failure(s) are printed to stdout, using the same format as &lt;a href=&quot;#doctest.testmod&quot;&gt;&lt;code&gt;testmod()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#doctest.testmod&quot;&gt; &lt;code&gt;testmod()&lt;/code&gt; &lt;/a&gt;と同様に、例が失敗しない限り、&lt;a href=&quot;#doctest.testfile&quot;&gt; &lt;code&gt;testfile()&lt;/code&gt; &lt;/a&gt;は何も表示しません。例が失敗した場合、失敗した例と失敗の原因が&lt;a href=&quot;#doctest.testmod&quot;&gt; &lt;code&gt;testmod()&lt;/code&gt; &lt;/a&gt;と同じ形式を使用してstdoutに出力されます。</target>
        </trans-unit>
        <trans-unit id="8d2f16ec04ec8da2a8b6d28bff1e96ae0730df2f" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;#mailbox.Mailbox.add&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt;, parameter &lt;em&gt;message&lt;/em&gt; may be a &lt;a href=&quot;#mailbox.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; instance, an &lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt;&lt;code&gt;email.message.Message&lt;/code&gt;&lt;/a&gt; instance, a string, a byte string, or a file-like object (which should be open in binary mode). If &lt;em&gt;message&lt;/em&gt; is an instance of the appropriate format-specific &lt;a href=&quot;#mailbox.Message&quot;&gt;&lt;code&gt;Message&lt;/code&gt;&lt;/a&gt; subclass (e.g., if it&amp;rsquo;s an &lt;a href=&quot;#mailbox.mboxMessage&quot;&gt;&lt;code&gt;mboxMessage&lt;/code&gt;&lt;/a&gt; instance and this is an &lt;a href=&quot;#mailbox.mbox&quot;&gt;&lt;code&gt;mbox&lt;/code&gt;&lt;/a&gt; instance), its format-specific information is used. Otherwise, the format-specific information of the message that currently corresponds to &lt;em&gt;key&lt;/em&gt; is left unchanged.</source>
          <target state="translated">&lt;a href=&quot;#mailbox.Mailbox.add&quot;&gt; &lt;code&gt;add()&lt;/code&gt; &lt;/a&gt;と同様に、パラメーター&lt;em&gt;message&lt;/em&gt;は&lt;a href=&quot;#mailbox.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt;インスタンス、&lt;a href=&quot;email.compat32-message#email.message.Message&quot;&gt; &lt;code&gt;email.message.Message&lt;/code&gt; &lt;/a&gt;インスタンス、文字列、バイト文字列、またはファイルのようなオブジェクト（バイナリモードで開く必要があります）の場合があります。場合&lt;em&gt;、メッセージが&lt;/em&gt;適切なフォーマット固有のインスタンスである&lt;a href=&quot;#mailbox.Message&quot;&gt; &lt;code&gt;Message&lt;/code&gt; &lt;/a&gt;サブクラス（例えば、それがだ場合、&lt;a href=&quot;#mailbox.mboxMessage&quot;&gt; &lt;code&gt;mboxMessage&lt;/code&gt; インスタンスの&lt;/a&gt;インスタンスとこれは&lt;a href=&quot;#mailbox.mbox&quot;&gt; &lt;code&gt;mbox&lt;/code&gt; &lt;/a&gt;インスタンス）、そのフォーマット固有の情報が使用されます。それ以外の場合、現在&lt;em&gt;keyに&lt;/em&gt;対応するメッセージのフォーマット固有の情報は変更されません。</target>
        </trans-unit>
        <trans-unit id="0bf2339fc3da041c7b40d65293bdd95b7f0f7885" translate="yes" xml:space="preserve">
          <source>As with a dictionary, you can use a section&amp;rsquo;s &lt;code&gt;get()&lt;/code&gt; method to provide fallback values:</source>
          <target state="translated">辞書と同様に、セクションの &lt;code&gt;get()&lt;/code&gt; メソッドを使用してフォールバック値を提供できます。</target>
        </trans-unit>
        <trans-unit id="57771b08d272fad9dc8b1be5068d86775d7fa3ca" translate="yes" xml:space="preserve">
          <source>As with all other objects in Python the old objects are only reclaimed after their reference counts drop to zero.</source>
          <target state="translated">Pythonの他の全てのオブジェクトと同様に、古いオブジェクトは参照カウントがゼロになった後にのみ再生されます。</target>
        </trans-unit>
        <trans-unit id="de44bc643f497be8df1b37fe142eb3754e000e16" translate="yes" xml:space="preserve">
          <source>As with any &lt;code&gt;try&lt;/code&gt; statement based code, this can cause problems for development and review, because the setup code and the cleanup code can end up being separated by arbitrarily long sections of code.</source>
          <target state="translated">他の &lt;code&gt;try&lt;/code&gt; ステートメントベースのコードと同様に、セットアップコードとクリーンアップコードは、コードの任意の長いセクションで区切られるため、開発とレビューで問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="b3ab064145c449d1616c3eb8354b791e442472ff" translate="yes" xml:space="preserve">
          <source>As with any other mechanism that completely suppresses exceptions, this context manager should be used only to cover very specific errors where silently continuing with program execution is known to be the right thing to do.</source>
          <target state="translated">例外を完全に抑制する他のメカニズムと同様に、このコンテキストマネージャは、プログラムの実行を黙って続けることが正しいことが知られている非常に特殊なエラーをカバーするためにのみ使用されるべきです。</target>
        </trans-unit>
        <trans-unit id="61ba626904718f435e8bb9195d72a3d4e176bd46" translate="yes" xml:space="preserve">
          <source>As with message in an mbox mailbox, MMDF messages are stored with the sender&amp;rsquo;s address and the delivery date in an initial line beginning with &amp;ldquo;From &amp;ldquo;. Likewise, flags that indicate the state of the message are typically stored in &lt;em&gt;Status&lt;/em&gt; and &lt;em&gt;X-Status&lt;/em&gt; headers.</source>
          <target state="translated">mboxメールボックスのメッセージと同様に、MMDFメッセージは、送信者のアドレスと配信日とともに、「From」で始まる最初の行に保存されます。同様に、メッセージの状態を示すフラグは通常、&lt;em&gt;Status&lt;/em&gt;および&lt;em&gt;X-Status&lt;/em&gt;ヘッダーに格納されます。</target>
        </trans-unit>
        <trans-unit id="cdc2d00aa5d268d13b0deb99289a5e17c7efb442" translate="yes" xml:space="preserve">
          <source>As with other methods, case-sensitivity follows platform defaults:</source>
          <target state="translated">他のメソッドと同様に、大文字小文字の区別はプラットフォームのデフォルトに従います。</target>
        </trans-unit>
        <trans-unit id="8bb7354faa685cfe016fc2268268a70658988eb5" translate="yes" xml:space="preserve">
          <source>As with other methods, case-sensitivity is observed:</source>
          <target state="translated">他の方法と同様に、ケース感受性が観察される。</target>
        </trans-unit>
        <trans-unit id="31db4d814a8ee3a9c296a0ac9ab18e1168c00cb9" translate="yes" xml:space="preserve">
          <source>As with string literals, bytes literals may also use a &lt;code&gt;r&lt;/code&gt; prefix to disable processing of escape sequences. See &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#strings&quot;&gt;String and Bytes literals&lt;/a&gt; for more about the various forms of bytes literal, including supported escape sequences.</source>
          <target state="translated">文字列リテラルと同様に、バイトリテラルでも &lt;code&gt;r&lt;/code&gt; プレフィックスを使用してエスケープシーケンスの処理を無効にすることができます。サポートされているエスケープシーケンスを含むバイトリテラルのさまざまな形式の詳細については、「&lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#strings&quot;&gt;文字列とバイトリテラル&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="5ba3c5f5300a18dcc61c9484deef226967d8c18a" translate="yes" xml:space="preserve">
          <source>As with string literals, bytes literals may also use a &lt;code&gt;r&lt;/code&gt; prefix to disable processing of escape sequences. See &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#strings&quot;&gt;String and Bytes literals&lt;/a&gt; for more about the various forms of bytes literal, including supported escape sequences.</source>
          <target state="translated">文字列リテラルと同様に、バイトリテラルも &lt;code&gt;r&lt;/code&gt; プレフィックスを使用してエスケープシーケンスの処理を無効にすることができます。サポートされているエスケープシーケンスなど、さまざまな形式のバイトリテラルの詳細については、&lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#strings&quot;&gt;文字列リテラルとバイトリテラル&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6084fcb644e26dce144964d5ce8fd1b644c1bcfd" translate="yes" xml:space="preserve">
          <source>As with the &lt;a href=&quot;#description&quot;&gt;description&lt;/a&gt; argument, the &lt;code&gt;epilog=&lt;/code&gt; text is by default line-wrapped, but this behavior can be adjusted with the &lt;a href=&quot;#formatter-class&quot;&gt;formatter_class&lt;/a&gt; argument to &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同様&lt;a href=&quot;#description&quot;&gt;の説明&lt;/a&gt;引数、 &lt;code&gt;epilog=&lt;/code&gt; テキストがデフォルトのラインラップであるが、この動作はで調整することができ&lt;a href=&quot;#formatter-class&quot;&gt;formatter_class&lt;/a&gt;の引数&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="50d385a8286d57094c5ce3df7ad9daf11b5640f8" translate="yes" xml:space="preserve">
          <source>As with the &lt;a href=&quot;email.parser#module-email.parser&quot;&gt;&lt;code&gt;email.parser&lt;/code&gt;&lt;/a&gt; module, you aren&amp;rsquo;t limited to the functionality of the bundled generator; you could write one from scratch yourself. However the bundled generator knows how to generate most email in a standards-compliant way, should handle MIME and non-MIME email messages just fine, and is designed so that the bytes-oriented parsing and generation operations are inverses, assuming the same non-transforming &lt;a href=&quot;email.policy#module-email.policy&quot;&gt;&lt;code&gt;policy&lt;/code&gt;&lt;/a&gt; is used for both. That is, parsing the serialized byte stream via the &lt;a href=&quot;email.parser#email.parser.BytesParser&quot;&gt;&lt;code&gt;BytesParser&lt;/code&gt;&lt;/a&gt; class and then regenerating the serialized byte stream using &lt;a href=&quot;#email.generator.BytesGenerator&quot;&gt;&lt;code&gt;BytesGenerator&lt;/code&gt;&lt;/a&gt; should produce output identical to the input &lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;. (On the other hand, using the generator on an &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; constructed by program may result in changes to the &lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt;&lt;code&gt;EmailMessage&lt;/code&gt;&lt;/a&gt; object as defaults are filled in.)</source>
          <target state="translated">&lt;a href=&quot;email.parser#module-email.parser&quot;&gt; &lt;code&gt;email.parser&lt;/code&gt; &lt;/a&gt;モジュールと同様に、バンドルされたジェネレーターの機能に限定されません。自分で最初から作成できます。ただし、バンドルされたジェネレーターは、標準に準拠した方法でほとんどの電子メールを生成する方法を知っており、MIMEおよび非MIME電子メールメッセージを適切に処理する必要があり、バイト指向の解析および生成操作が逆になるように設計されています。変換&lt;a href=&quot;email.policy#module-email.policy&quot;&gt; &lt;code&gt;policy&lt;/code&gt; &lt;/a&gt;は両方に使用されます。つまり、&lt;a href=&quot;email.parser#email.parser.BytesParser&quot;&gt; &lt;code&gt;BytesParser&lt;/code&gt; &lt;/a&gt;クラスを介してシリアル化されたバイトストリームを解析し、BytesGeneratorを使用してシリアル化されたバイトストリームを&lt;a href=&quot;#email.generator.BytesGenerator&quot;&gt; &lt;code&gt;BytesGenerator&lt;/code&gt; &lt;/a&gt;生成すると、入力&lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;と同じ出力が生成されます。 （一方、&lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; で&lt;/a&gt;ジェネレーターを使用するプログラムによって構築された場合、デフォルトが入力されると、&lt;a href=&quot;email.message#email.message.EmailMessage&quot;&gt; &lt;code&gt;EmailMessage&lt;/code&gt; &lt;/a&gt;オブジェクトが変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="98b68bf763d9b565df24602f94e028fb7d75d354" translate="yes" xml:space="preserve">
          <source>As with the constructor for &lt;a href=&quot;#bz2.BZ2File&quot;&gt;&lt;code&gt;BZ2File&lt;/code&gt;&lt;/a&gt;, the &lt;em&gt;filename&lt;/em&gt; argument can be an actual filename (a &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; object), or an existing file object to read from or write to.</source>
          <target state="translated">&lt;a href=&quot;#bz2.BZ2File&quot;&gt; &lt;code&gt;BZ2File&lt;/code&gt; &lt;/a&gt;のコンストラクターと同様に、&lt;em&gt;filename&lt;/em&gt;引数は、実際のファイル名（&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;オブジェクト）、または読み取りまたは書き込みを行う既存のファイルオブジェクトにすることができます。</target>
        </trans-unit>
        <trans-unit id="39b89ac3cbb6042a6b76daccce240847a7e0deae" translate="yes" xml:space="preserve">
          <source>As with the normal socket object, &lt;em&gt;address&lt;/em&gt; is a tuple with the first element the host to connect to, and the second the port number.</source>
          <target state="translated">通常のソケットオブジェクトと同様に、&lt;em&gt;address&lt;/em&gt;は、最初に接続するホストの要素、2番目の要素がポート番号のタプルです。</target>
        </trans-unit>
        <trans-unit id="f590c8191e52a5707968f655cd53f953a854a829" translate="yes" xml:space="preserve">
          <source>As you can see, we can treat a config parser much like a dictionary. There are differences, &lt;a href=&quot;#mapping-protocol-access&quot;&gt;outlined later&lt;/a&gt;, but the behavior is very close to what you would expect from a dictionary.</source>
          <target state="translated">ご覧のとおり、構成パーサーを辞書のように扱うことができます。違いはありますが、&lt;a href=&quot;#mapping-protocol-access&quot;&gt;後で概説&lt;/a&gt;しますが、動作は辞書に期待されるものに非常に近いです。</target>
        </trans-unit>
        <trans-unit id="59f904f27b756361ae89156e1ce717db987f76ba" translate="yes" xml:space="preserve">
          <source>As you&amp;rsquo;d expect, the legal values for &lt;em&gt;someAction&lt;/em&gt; will depend on the widget&amp;rsquo;s class: &lt;code&gt;.fred disable&lt;/code&gt; works if fred is a button (fred gets greyed out), but does not work if fred is a label (disabling of labels is not supported in Tk).</source>
          <target state="translated">ご&lt;em&gt;想像のとおり&lt;/em&gt;、&lt;em&gt;someAction&lt;/em&gt;の有効な値はウィジェットのクラスによって異なります&lt;em&gt;。fred&lt;/em&gt;がボタンの場合は &lt;code&gt;.fred disable&lt;/code&gt; が機能します（fredがグレー表示される）が、fredがラベルの場合は機能しません（ラベルの無効化はサポートされていません）。 Tkで）。</target>
        </trans-unit>
        <trans-unit id="61b9f99dea4285cc76b6c48cda8a14e52d2b891d" translate="yes" xml:space="preserve">
          <source>As your collection of doctest&amp;rsquo;ed modules grows, you&amp;rsquo;ll want a way to run all their doctests systematically. &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; provides two functions that can be used to create &lt;a href=&quot;unittest#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; test suites from modules and text files containing doctests. To integrate with &lt;a href=&quot;unittest#module-unittest&quot;&gt;&lt;code&gt;unittest&lt;/code&gt;&lt;/a&gt; test discovery, include a &lt;code&gt;load_tests()&lt;/code&gt; function in your test module:</source>
          <target state="translated">doctestされたモジュールのコレクションが増えるにつれて、すべてのdoctestを体系的に実行する方法が必要になります。&lt;a href=&quot;#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; のは&lt;/a&gt;作成するために使用することができる2つの機能を提供し&lt;a href=&quot;unittest#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; の&lt;/a&gt;モジュールとのdoctestを含むテキストファイルからのテスト・スイートを。&lt;a href=&quot;unittest#module-unittest&quot;&gt; &lt;code&gt;unittest&lt;/code&gt; &lt;/a&gt;テスト発見と統合するには、テストモジュールに &lt;code&gt;load_tests()&lt;/code&gt; 関数を含めます。</target>
        </trans-unit>
        <trans-unit id="2a9978f5d754841b336538c4c5a01a51bbcd2678" translate="yes" xml:space="preserve">
          <source>Assert that &lt;em&gt;iter&lt;/em&gt; is deallocated after iterating.</source>
          <target state="translated">&lt;em&gt;iter&lt;/em&gt;が反復後に割り当て解除されていることをアサートします。</target>
        </trans-unit>
        <trans-unit id="fd264d50fb4b9eeefc754b5a58a5fcba3dedc28e" translate="yes" xml:space="preserve">
          <source>Assert that running the interpreter with &lt;em&gt;args&lt;/em&gt; and optional environment variables &lt;em&gt;env_vars&lt;/em&gt; fails (&lt;code&gt;rc != 0&lt;/code&gt;) and return a &lt;code&gt;(return code,
stdout, stderr)&lt;/code&gt; tuple.</source>
          <target state="translated">&lt;em&gt;args&lt;/em&gt;とオプションの環境変数&lt;em&gt;env_vars&lt;/em&gt;を使用してインタープリターを実行すると失敗し（ &lt;code&gt;rc != 0&lt;/code&gt; ）、 &lt;code&gt;(return code, stdout, stderr)&lt;/code&gt; タプルが返されることを&lt;em&gt;アサートし&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="1e0d6e30e5daa962c493e2c53bfd3e5bd71e7f71" translate="yes" xml:space="preserve">
          <source>Assert that running the interpreter with &lt;em&gt;args&lt;/em&gt; and optional environment variables &lt;em&gt;env_vars&lt;/em&gt; succeeds (&lt;code&gt;rc == 0&lt;/code&gt;) and return a &lt;code&gt;(return code,
stdout, stderr)&lt;/code&gt; tuple.</source>
          <target state="translated">&lt;em&gt;args&lt;/em&gt;とオプションの環境変数&lt;em&gt;env_vars&lt;/em&gt;を使用してインタープリターを実行すると成功し（ &lt;code&gt;rc == 0&lt;/code&gt; ）、 &lt;code&gt;(return code, stdout, stderr)&lt;/code&gt; タプルを返すことをアサートします。</target>
        </trans-unit>
        <trans-unit id="f8fb3abe58177e5028044ca5b20cc140fb7d71a8" translate="yes" xml:space="preserve">
          <source>Assert that the &lt;code&gt;__all__&lt;/code&gt; variable of &lt;em&gt;module&lt;/em&gt; contains all public names.</source>
          <target state="translated">&lt;em&gt;モジュール&lt;/em&gt;の &lt;code&gt;__all__&lt;/code&gt; 変数にすべてのパブリック名が含まれていることをアサートします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="55a3005fb29b0592036701f49249b35f6fe4e576" translate="yes" xml:space="preserve">
          <source>Assert that the last await was with the specified arguments.</source>
          <target state="translated">最後の await が指定された引数であったことを主張します。</target>
        </trans-unit>
        <trans-unit id="0ab3c9a0f942a4e5218663ad1728f419192ba180" translate="yes" xml:space="preserve">
          <source>Assert that the mock was awaited at least once. Note that this is separate from the object having been called, the &lt;code&gt;await&lt;/code&gt; keyword must be used:</source>
          <target state="translated">モックが少なくとも1回は待機されていたことをアサートします。これは呼び出されたオブジェクトとは別であり、 &lt;code&gt;await&lt;/code&gt; キーワードを使用する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="559c5d43237366024e3609d35920dccb6c140415" translate="yes" xml:space="preserve">
          <source>Assert that the mock was awaited exactly once and with the specified arguments.</source>
          <target state="translated">指定された引数でモックが正確に一度だけ待っていたことを主張します。</target>
        </trans-unit>
        <trans-unit id="5ad7deeafb38bd4aeb17622c34aa957e7bdb88a1" translate="yes" xml:space="preserve">
          <source>Assert that the mock was awaited exactly once.</source>
          <target state="translated">モックは一度だけ待っていたと主張してください。</target>
        </trans-unit>
        <trans-unit id="1f4df423286b9ac2be8365c78eafe1774099f5f2" translate="yes" xml:space="preserve">
          <source>Assert that the mock was called at least once.</source>
          <target state="translated">モックが一度は呼ばれたことを主張する。</target>
        </trans-unit>
        <trans-unit id="3324ced759f5d86b62cf891c7da413bc53b68560" translate="yes" xml:space="preserve">
          <source>Assert that the mock was called exactly once and that that call was with the specified arguments.</source>
          <target state="translated">モックが正確に一度だけ呼び出され、その呼び出しが指定された引数であったことを主張します。</target>
        </trans-unit>
        <trans-unit id="5bf57493612b2763417d96c9bf7967affcea4272" translate="yes" xml:space="preserve">
          <source>Assert that the mock was called exactly once.</source>
          <target state="translated">モックは一度だけ呼ばれたことを主張してください。</target>
        </trans-unit>
        <trans-unit id="3db0fab7867c814616ac71a3a5143ce2dff5900d" translate="yes" xml:space="preserve">
          <source>Assert that the mock was never awaited.</source>
          <target state="translated">モックは待ったなしだったと主張する。</target>
        </trans-unit>
        <trans-unit id="c1c646d111dcc42ccae26bbe43d3ddada473ab0f" translate="yes" xml:space="preserve">
          <source>Assert the mock has been awaited with the specified calls. The &lt;a href=&quot;#unittest.mock.AsyncMock.await_args_list&quot;&gt;&lt;code&gt;await_args_list&lt;/code&gt;&lt;/a&gt; list is checked for the awaits.</source>
          <target state="translated">指定された呼び出しでモックが待機されたことを表明します。&lt;a href=&quot;#unittest.mock.AsyncMock.await_args_list&quot;&gt; &lt;code&gt;await_args_list&lt;/code&gt; &lt;/a&gt;リストが待ち受け用にチェックされています。</target>
        </trans-unit>
        <trans-unit id="aeceb688911f6dcdcfa555a84d22383aa56d4db7" translate="yes" xml:space="preserve">
          <source>Assert the mock has ever been awaited with the specified arguments.</source>
          <target state="translated">モックが指定された引数で待機していたことがあるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="3d67cb9aa133440c8ea1ec7d7cc69fcf71038d22" translate="yes" xml:space="preserve">
          <source>Assert the mock was never called.</source>
          <target state="translated">モックは呼ばれていないと主張してください。</target>
        </trans-unit>
        <trans-unit id="e3292c12a856a02722a46d87471ff4e6faefa104" translate="yes" xml:space="preserve">
          <source>AssertionError</source>
          <target state="translated">AssertionError</target>
        </trans-unit>
        <trans-unit id="096ae7879fe3ac7e3285826b7966eb892e08f3e2" translate="yes" xml:space="preserve">
          <source>Assign a Python function or another callable to this attribute. The callable will be called with three or more arguments:</source>
          <target state="translated">この属性にPythonの関数や他のコールアブルを割り当てます。callableは3つ以上の引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="2d6b37186bcf31c990ffb06dcf0507a39bd37db6" translate="yes" xml:space="preserve">
          <source>Assign a ctypes type to specify the result type of the foreign function. Use &lt;code&gt;None&lt;/code&gt; for &lt;code&gt;void&lt;/code&gt;, a function not returning anything.</source>
          <target state="translated">ctypes型を割り当てて、外部関数の結果の型を指定します。何も返さない関数である &lt;code&gt;void&lt;/code&gt; には &lt;code&gt;None&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="87af2d9b58846a93bc5651822c3deea453207ca5" translate="yes" xml:space="preserve">
          <source>Assign a tuple of ctypes types to specify the argument types that the function accepts. Functions using the &lt;code&gt;stdcall&lt;/code&gt; calling convention can only be called with the same number of arguments as the length of this tuple; functions using the C calling convention accept additional, unspecified arguments as well.</source>
          <target state="translated">ctypesタイプのタプルを割り当てて、関数が受け入れる引数タイプを指定します。 &lt;code&gt;stdcall&lt;/code&gt; 呼び出し規約を使用する関数は、このタプルの長さと同じ数の引数でのみ呼び出すことができます。C呼び出し規約を使用する関数は、追加の未指定の引数も受け入れます。</target>
        </trans-unit>
        <trans-unit id="24cd252fad6840a721b5d763b587fe334065ad54" translate="yes" xml:space="preserve">
          <source>Assigning a new value to instances of the pointer types &lt;a href=&quot;#ctypes.c_char_p&quot;&gt;&lt;code&gt;c_char_p&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ctypes.c_wchar_p&quot;&gt;&lt;code&gt;c_wchar_p&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#ctypes.c_void_p&quot;&gt;&lt;code&gt;c_void_p&lt;/code&gt;&lt;/a&gt; changes the &lt;em&gt;memory location&lt;/em&gt; they point to, &lt;em&gt;not the contents&lt;/em&gt; of the memory block (of course not, because Python bytes objects are immutable):</source>
          <target state="translated">ポインタ型&lt;a href=&quot;#ctypes.c_char_p&quot;&gt; &lt;code&gt;c_char_p&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ctypes.c_wchar_p&quot;&gt; &lt;code&gt;c_wchar_p&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#ctypes.c_void_p&quot;&gt; &lt;code&gt;c_void_p&lt;/code&gt; の&lt;/a&gt;インスタンスに新しい値を割り当てると、メモリブロックの&lt;em&gt;内容&lt;/em&gt;では&lt;em&gt;なく、&lt;/em&gt;それらが指す&lt;em&gt;メモリ位置&lt;/em&gt;が変更されます（もちろん、Pythonバイトオブジェクトは不変なので）。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="4ad21f0fedcc6176cc70cb700d98f976d15416af" translate="yes" xml:space="preserve">
          <source>Assigning another &lt;a href=&quot;#ctypes.c_int&quot;&gt;&lt;code&gt;c_int&lt;/code&gt;&lt;/a&gt; instance to the pointer&amp;rsquo;s contents attribute would cause the pointer to point to the memory location where this is stored:</source>
          <target state="translated">ポインターのコンテンツ属性に別の&lt;a href=&quot;#ctypes.c_int&quot;&gt; &lt;code&gt;c_int&lt;/code&gt; &lt;/a&gt;インスタンスを割り当てると、ポインターがこれが格納されているメモリの場所を指すようになります。</target>
        </trans-unit>
        <trans-unit id="0b02ed6e18cfc24fbfbfe9a5ea607ee75077dc86" translate="yes" xml:space="preserve">
          <source>Assigning to an integer index changes the pointed to value:</source>
          <target state="translated">整数インデックスに代入すると、指し示す値が変わります。</target>
        </trans-unit>
        <trans-unit id="d425ffd0dc0c03777b86385bf81e964839a8b08e" translate="yes" xml:space="preserve">
          <source>Assignment statements in Python do not copy objects, they create bindings between a target and an object. For collections that are mutable or contain mutable items, a copy is sometimes needed so one can change one copy without changing the other. This module provides generic shallow and deep copy operations (explained below).</source>
          <target state="translated">PythonのAssignment文はオブジェクトをコピーするのではなく、ターゲットとオブジェクトの間にバインディングを作成します。変異可能なアイテムを含むコレクションの場合、コピーが必要になることがあります。このモジュールでは、一般的な浅いコピーと深いコピー操作を提供します(以下で説明します)。</target>
        </trans-unit>
        <trans-unit id="8e44ce9ac8ed3d578e4f315bbe0851d670b4c1ce" translate="yes" xml:space="preserve">
          <source>Assignment to these attributes should not be necessary other than in rare circumstances in a &lt;a href=&quot;#http.cookiejar.CookiePolicy&quot;&gt;&lt;code&gt;CookiePolicy&lt;/code&gt;&lt;/a&gt; method. The class does not enforce internal consistency, so you should know what you&amp;rsquo;re doing if you do that.</source>
          <target state="translated">これらの属性への割り当ては、&lt;a href=&quot;#http.cookiejar.CookiePolicy&quot;&gt; &lt;code&gt;CookiePolicy&lt;/code&gt; &lt;/a&gt;メソッドでのまれな状況以外では必要ありません。クラスは内部の一貫性を強制しないので、それを行う場合は何をしているのかを知る必要があります。</target>
        </trans-unit>
        <trans-unit id="88cccee59dd04afc77be1302263482ef8771b4eb" translate="yes" xml:space="preserve">
          <source>Assignments to items in &lt;code&gt;os.environ&lt;/code&gt; are automatically translated into corresponding calls to &lt;a href=&quot;#os.putenv&quot;&gt;&lt;code&gt;putenv()&lt;/code&gt;&lt;/a&gt;; however, calls to &lt;a href=&quot;#os.putenv&quot;&gt;&lt;code&gt;putenv()&lt;/code&gt;&lt;/a&gt; don&amp;rsquo;t update &lt;code&gt;os.environ&lt;/code&gt;, so it is actually preferable to assign to items of &lt;code&gt;os.environ&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;os.environ&lt;/code&gt; 内のアイテムへの割り当ては、&lt;a href=&quot;#os.putenv&quot;&gt; &lt;code&gt;putenv()&lt;/code&gt; &lt;/a&gt;への対応する呼び出しに自動的に変換されます。ただし、&lt;a href=&quot;#os.putenv&quot;&gt; &lt;code&gt;putenv()&lt;/code&gt; を&lt;/a&gt;呼び出しても &lt;code&gt;os.environ&lt;/code&gt; は更新されないため、実際には &lt;code&gt;os.environ&lt;/code&gt; のアイテムに割り当てることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4bdbb7b0403c9ed5b42c0c1a8e706970ef50e63c" translate="yes" xml:space="preserve">
          <source>Associate &lt;em&gt;dialect&lt;/em&gt; with &lt;em&gt;name&lt;/em&gt;. &lt;em&gt;name&lt;/em&gt; must be a string. The dialect can be specified either by passing a sub-class of &lt;a href=&quot;#csv.Dialect&quot;&gt;&lt;code&gt;Dialect&lt;/code&gt;&lt;/a&gt;, or by &lt;em&gt;fmtparams&lt;/em&gt; keyword arguments, or both, with keyword arguments overriding parameters of the dialect. For full details about the dialect and formatting parameters, see section &lt;a href=&quot;#csv-fmt-params&quot;&gt;Dialects and Formatting Parameters&lt;/a&gt;.</source>
          <target state="translated">准&lt;em&gt;方言&lt;/em&gt;と&lt;em&gt;名前&lt;/em&gt;。&lt;em&gt;名前&lt;/em&gt;は文字列でなければなりません。方言は、&lt;a href=&quot;#csv.Dialect&quot;&gt; &lt;code&gt;Dialect&lt;/code&gt; の&lt;/a&gt;サブクラスを渡すか、&lt;em&gt;fmtparams&lt;/em&gt;キーワード引数、またはその両方を使用して、方言のパラメーターをオーバーライドするキーワード引数で指定できます。方言や書式設定パラメータに関する詳細については、セクションを参照&lt;a href=&quot;#csv-fmt-params&quot;&gt;方言と書式パラメータ&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3f3bcabdd04e1667230d7f6889c5454cd909ae99" translate="yes" xml:space="preserve">
          <source>Associates a value with a specified key.</source>
          <target state="translated">指定したキーに値を関連付けます。</target>
        </trans-unit>
        <trans-unit id="57c2abf791222401df793e61a9b604ada26f9510" translate="yes" xml:space="preserve">
          <source>Associates level &lt;em&gt;level&lt;/em&gt; with text &lt;em&gt;levelName&lt;/em&gt; in an internal dictionary, which is used to map numeric levels to a textual representation, for example when a &lt;a href=&quot;#logging.Formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt; formats a message. This function can also be used to define your own levels. The only constraints are that all levels used must be registered using this function, levels should be positive integers and they should increase in increasing order of severity.</source>
          <target state="translated">レベル&lt;em&gt;level&lt;/em&gt;を内部ディクショナリのテキスト&lt;em&gt;levelNameに関連付け&lt;/em&gt;ます。これは、たとえば&lt;a href=&quot;#logging.Formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt;がメッセージをフォーマットするときに、数値レベルをテキスト表現にマップするために使用されます。この関数は、独自のレベルを定義するためにも使用できます。唯一の制約は、使用されるすべてのレベルがこの関数を使用して登録される必要があり、レベルは正の整数である必要があり、重大度の昇順で増加する必要があることです。</target>
        </trans-unit>
        <trans-unit id="99867ade566e46b388e954ef09df2f75d1038b85" translate="yes" xml:space="preserve">
          <source>Assume authentication as &lt;em&gt;user&lt;/em&gt;. Allows an authorised administrator to proxy into any user&amp;rsquo;s mailbox.</source>
          <target state="translated">&lt;em&gt;ユーザー&lt;/em&gt;としての認証を想定してい&lt;em&gt;ます&lt;/em&gt;。承認された管理者が任意のユーザーのメールボックスにプロキシできるようにします。</target>
        </trans-unit>
        <trans-unit id="26bb7ee1e82bfd124b995cad27c9d2ea8e6c6188" translate="yes" xml:space="preserve">
          <source>Assume the end of the document. That will check well-formedness conditions that can be checked only at the end, invoke handlers, and may clean up resources allocated during parsing.</source>
          <target state="translated">ドキュメントの最後を想定します。これは、最後にしかチェックできない整形条件をチェックしたり、ハンドラを呼び出したり、解析中に割り当てられたリソースをクリーンアップしたりします。</target>
        </trans-unit>
        <trans-unit id="1a6fb61e671a32cacd481771d74554c4616cd64b" translate="yes" xml:space="preserve">
          <source>Assuming the Python code above is saved into a file called &lt;code&gt;prog.py&lt;/code&gt;, it can be run at the command line and provides useful help messages:</source>
          <target state="translated">上記のPythonコードが &lt;code&gt;prog.py&lt;/code&gt; というファイルに保存されていると仮定すると、コマンドラインで実行でき、役立つヘルプメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="17acdde866027b94b28efa16a0a09a1e51553c63" translate="yes" xml:space="preserve">
          <source>Assuming the associated lock is recursive (which it is by default) you can instead do</source>
          <target state="translated">関連するロックが再帰的であると仮定すると(デフォルトではそうなっています)、代わりに以下のようにすることができます。</target>
        </trans-unit>
        <trans-unit id="005edc07fe911b0da3e54105325e3a3dbe1f1711" translate="yes" xml:space="preserve">
          <source>Assuming your script has no syntax errors, yet it does not work, you have no choice but to read the next section.</source>
          <target state="translated">スクリプトに構文エラーがないにもかかわらず動作しない場合は、次のセクションを読むしかありません。</target>
        </trans-unit>
        <trans-unit id="f329190d0fd15344dac730aabc63c032720e1284" translate="yes" xml:space="preserve">
          <source>Asterisk</source>
          <target state="translated">Asterisk</target>
        </trans-unit>
        <trans-unit id="f5e07612cc5bcc0cfaeae3b9a0358117f2681619" translate="yes" xml:space="preserve">
          <source>Asychronously run a function in a separate OS thread.</source>
          <target state="translated">別の OS スレッドで関数を非同期的に実行します。</target>
        </trans-unit>
        <trans-unit id="1bd5673736a4b97f46b75295ed686c6410f3f563" translate="yes" xml:space="preserve">
          <source>Async and await</source>
          <target state="translated">非同期で待機</target>
        </trans-unit>
        <trans-unit id="7011bcb2a149d047c8ec7153896517a23adc9f65" translate="yes" xml:space="preserve">
          <source>Asynchronous I/O</source>
          <target state="translated">非同期I/O</target>
        </trans-unit>
        <trans-unit id="76a9f4eccd2719060ed9b323830b0077d403caed" translate="yes" xml:space="preserve">
          <source>Asynchronous Mixins</source>
          <target state="translated">非同期ミックスイン</target>
        </trans-unit>
        <trans-unit id="104c39ddd5b87efe32adc15b6d214b9332b179b7" translate="yes" xml:space="preserve">
          <source>Asynchronous iteration methods: &lt;code&gt;__aiter__&lt;/code&gt; and &lt;code&gt;__anext__&lt;/code&gt;</source>
          <target state="translated">非同期反復メソッド： &lt;code&gt;__aiter__&lt;/code&gt; および &lt;code&gt;__anext__&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b14c98bb24b89858352c275883aab384afdbd313" translate="yes" xml:space="preserve">
          <source>Asynchronous programming</source>
          <target state="translated">非同期プログラミング</target>
        </trans-unit>
        <trans-unit id="209a40d7b9cbb542c52bb05184d751a0e19a14bd" translate="yes" xml:space="preserve">
          <source>Asynchronous programming is different from classic &amp;ldquo;sequential&amp;rdquo; programming.</source>
          <target state="translated">非同期プログラミングは、従来の「順次」プログラミングとは異なります。</target>
        </trans-unit>
        <trans-unit id="120004888d9e7b45090be61175fabb0ddafb7dcc" translate="yes" xml:space="preserve">
          <source>Asynchronous version of &lt;a href=&quot;socket#socket.getaddrinfo&quot;&gt;&lt;code&gt;socket.getaddrinfo()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;socket#socket.getaddrinfo&quot;&gt; &lt;code&gt;socket.getaddrinfo()&lt;/code&gt; の&lt;/a&gt;非同期バージョン。</target>
        </trans-unit>
        <trans-unit id="9704ec7e27d093412e9ffd17b2f9417c95ee49f0" translate="yes" xml:space="preserve">
          <source>Asynchronous version of &lt;a href=&quot;socket#socket.getnameinfo&quot;&gt;&lt;code&gt;socket.getnameinfo()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;socket#socket.getnameinfo&quot;&gt; &lt;code&gt;socket.getnameinfo()&lt;/code&gt; の&lt;/a&gt;非同期バージョン。</target>
        </trans-unit>
        <trans-unit id="e75a6e60c21cef60290f8db343e2dd2f1b6b1276" translate="yes" xml:space="preserve">
          <source>Asynchronous version of &lt;a href=&quot;socket#socket.socket.connect&quot;&gt;&lt;code&gt;socket.connect()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;socket#socket.socket.connect&quot;&gt; &lt;code&gt;socket.connect()&lt;/code&gt; の&lt;/a&gt;非同期バージョン。</target>
        </trans-unit>
        <trans-unit id="e50fde5f44e91a6cb4dcbfaaaadebf896e7d84b9" translate="yes" xml:space="preserve">
          <source>Asynchronous version of &lt;a href=&quot;socket#socket.socket.sendfile&quot;&gt;&lt;code&gt;socket.sendfile()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;socket#socket.socket.sendfile&quot;&gt; &lt;code&gt;socket.sendfile()&lt;/code&gt; の&lt;/a&gt;非同期バージョン。</target>
        </trans-unit>
        <trans-unit id="8bcb500e2adace81f9483ea905e903583d45817b" translate="yes" xml:space="preserve">
          <source>Asynchronously run function &lt;em&gt;func&lt;/em&gt; in a separate thread.</source>
          <target state="translated">別のスレッドで関数&lt;em&gt;func&lt;/em&gt;を非同期的に実行します。</target>
        </trans-unit>
        <trans-unit id="a23dd13ee19c13bb7c352d2501d29036e264def5" translate="yes" xml:space="preserve">
          <source>At &lt;a href=&quot;#zoneinfo-data-runtime-config&quot;&gt;runtime&lt;/a&gt;, the search path can be manipulated using the &lt;a href=&quot;#zoneinfo.reset_tzpath&quot;&gt;&lt;code&gt;reset_tzpath()&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">で&lt;a href=&quot;#zoneinfo-data-runtime-config&quot;&gt;ランタイム&lt;/a&gt;、検索パスを使用して操作することができ&lt;a href=&quot;#zoneinfo.reset_tzpath&quot;&gt; &lt;code&gt;reset_tzpath()&lt;/code&gt; &lt;/a&gt;関数を。</target>
        </trans-unit>
        <trans-unit id="03e876b72734198f8efacaee16cfa51b70b11561" translate="yes" xml:space="preserve">
          <source>At least one of the following options must be specified when invoking &lt;a href=&quot;#module-trace&quot;&gt;&lt;code&gt;trace&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#cmdoption-trace-l&quot;&gt;&lt;code&gt;--listfuncs&lt;/code&gt;&lt;/a&gt; option is mutually exclusive with the &lt;a href=&quot;#cmdoption-trace-t&quot;&gt;&lt;code&gt;--trace&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#cmdoption-trace-c&quot;&gt;&lt;code&gt;--count&lt;/code&gt;&lt;/a&gt; options. When &lt;a href=&quot;#cmdoption-trace-l&quot;&gt;&lt;code&gt;--listfuncs&lt;/code&gt;&lt;/a&gt; is provided, neither &lt;a href=&quot;#cmdoption-trace-c&quot;&gt;&lt;code&gt;--count&lt;/code&gt;&lt;/a&gt; nor &lt;a href=&quot;#cmdoption-trace-t&quot;&gt;&lt;code&gt;--trace&lt;/code&gt;&lt;/a&gt; are accepted, and vice versa.</source>
          <target state="translated">&lt;a href=&quot;#module-trace&quot;&gt; &lt;code&gt;trace&lt;/code&gt; &lt;/a&gt;を呼び出すときは、次のオプションの少なくとも1つを指定する必要があります。&lt;a href=&quot;#cmdoption-trace-l&quot;&gt; &lt;code&gt;--listfuncs&lt;/code&gt; の&lt;/a&gt;オプションは相互に排他的である&lt;a href=&quot;#cmdoption-trace-t&quot;&gt; &lt;code&gt;--trace&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#cmdoption-trace-c&quot;&gt; &lt;code&gt;--count&lt;/code&gt; &lt;/a&gt;オプション。とき&lt;a href=&quot;#cmdoption-trace-l&quot;&gt; &lt;code&gt;--listfuncs&lt;/code&gt; が&lt;/a&gt;提供され、どちらも&lt;a href=&quot;#cmdoption-trace-c&quot;&gt; &lt;code&gt;--count&lt;/code&gt; &lt;/a&gt;も&lt;a href=&quot;#cmdoption-trace-t&quot;&gt; &lt;code&gt;--trace&lt;/code&gt; が&lt;/a&gt;受け入れられ、そしてその逆。</target>
        </trans-unit>
        <trans-unit id="005c763745673715312660addc3a03a01b8c8624" translate="yes" xml:space="preserve">
          <source>At normal program termination (for instance, if &lt;a href=&quot;sys#sys.exit&quot;&gt;&lt;code&gt;sys.exit()&lt;/code&gt;&lt;/a&gt; is called or the main module&amp;rsquo;s execution completes), all functions registered are called in last in, first out order. The assumption is that lower level modules will normally be imported before higher level modules and thus must be cleaned up later.</source>
          <target state="translated">通常のプログラム終了時（たとえば、&lt;a href=&quot;sys#sys.exit&quot;&gt; &lt;code&gt;sys.exit()&lt;/code&gt; &lt;/a&gt;が呼び出された場合、またはメインモジュールの実行が完了した場合）、登録されているすべての関数が後入れ先出しで呼び出されます。仮定は、通常、低レベルのモジュールは高レベルのモジュールの前にインポートされるため、後でクリーンアップする必要があるということです。</target>
        </trans-unit>
        <trans-unit id="4212a7fb6907badcb796ef9f8a9820ede2ad461f" translate="yes" xml:space="preserve">
          <source>At object creation time, using keyword arguments</source>
          <target state="translated">オブジェクト作成時にキーワード引数を使って</target>
        </trans-unit>
        <trans-unit id="b9dffbcc195db46cf07fd560bf9cf819a6052dfc" translate="yes" xml:space="preserve">
          <source>At runtime, &lt;code&gt;isinstance(x, T)&lt;/code&gt; will raise &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;. In general, &lt;a href=&quot;functions#isinstance&quot;&gt;&lt;code&gt;isinstance()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;functions#issubclass&quot;&gt;&lt;code&gt;issubclass()&lt;/code&gt;&lt;/a&gt; should not be used with types.</source>
          <target state="translated">実行時、 &lt;code&gt;isinstance(x, T)&lt;/code&gt; は&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; を発生させ&lt;/a&gt;ます。一般に、&lt;a href=&quot;functions#isinstance&quot;&gt; &lt;code&gt;isinstance()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;functions#issubclass&quot;&gt; &lt;code&gt;issubclass()&lt;/code&gt; &lt;/a&gt;はタイプで使用しないでください。</target>
        </trans-unit>
        <trans-unit id="86ca4076074ecbdd662b657c7418c10266e2fae5" translate="yes" xml:space="preserve">
          <source>At the end of the module, there is a test section that contains a more extensive example of usage.</source>
          <target state="translated">モジュールの最後には、より広範な使用例を含むテストセクションがあります。</target>
        </trans-unit>
        <trans-unit id="73eae57537773d1ac17b68b2f125d8fe89f21f11" translate="yes" xml:space="preserve">
          <source>At the highest level, the transport is concerned with &lt;em&gt;how&lt;/em&gt; bytes are transmitted, while the protocol determines &lt;em&gt;which&lt;/em&gt; bytes to transmit (and to some extent when).</source>
          <target state="translated">最高レベルでは、トランスポートはバイトの送信&lt;em&gt;方法に&lt;/em&gt;関係し、プロトコルは送信&lt;em&gt;する&lt;/em&gt;バイトを決定&lt;em&gt;し&lt;/em&gt;ます（いつ送信するかはある程度）。</target>
        </trans-unit>
        <trans-unit id="7b93ef8974634ba1eeddb05cd6f4fb7beae6e9cc" translate="yes" xml:space="preserve">
          <source>At the moment, there is only one possible parameter:</source>
          <target state="translated">今のところ、可能性のあるパラメータは1つだけです。</target>
        </trans-unit>
        <trans-unit id="8578bb4b0c201f731d20286e27c500875b32217c" translate="yes" xml:space="preserve">
          <source>At the operating system level, sockets in &lt;em&gt;timeout mode&lt;/em&gt; are internally set in non-blocking mode. Also, the blocking and timeout modes are shared between file descriptors and socket objects that refer to the same network endpoint. This implementation detail can have visible consequences if e.g. you decide to use the &lt;a href=&quot;#socket.socket.fileno&quot;&gt;&lt;code&gt;fileno()&lt;/code&gt;&lt;/a&gt; of a socket.</source>
          <target state="translated">オペレーティングシステムレベルでは、&lt;em&gt;タイムアウトモードの&lt;/em&gt;ソケットは内部的に非ブロッキングモードに設定されます。また、ブロッキングモードとタイムアウトモードは、同じネットワークエンドポイントを参照するファイル記述子とソケットオブジェクト間で共有されます。たとえば、ソケットの&lt;a href=&quot;#socket.socket.fileno&quot;&gt; &lt;code&gt;fileno()&lt;/code&gt; &lt;/a&gt;を使用する場合、この実装の詳細は目に見える結果をもたらす可能性があります。</target>
        </trans-unit>
        <trans-unit id="de79fa22e86445c74c1c60a24771c2ff1fcf7262" translate="yes" xml:space="preserve">
          <source>At the point where the generator yields, the block nested in the &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement is executed. The generator is then resumed after the block is exited. If an unhandled exception occurs in the block, it is reraised inside the generator at the point where the yield occurred. Thus, you can use a &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt;&amp;hellip;&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#except&quot;&gt;&lt;code&gt;except&lt;/code&gt;&lt;/a&gt;&amp;hellip;&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#finally&quot;&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/a&gt; statement to trap the error (if any), or ensure that some cleanup takes place. If an exception is trapped merely in order to log it or to perform some action (rather than to suppress it entirely), the generator must reraise that exception. Otherwise the generator context manager will indicate to the &lt;code&gt;with&lt;/code&gt; statement that the exception has been handled, and execution will resume with the statement immediately following the &lt;code&gt;with&lt;/code&gt; statement.</source>
          <target state="translated">ジェネレーターが生成される時点で、&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントにネストされたブロックが実行されます。その後、ブロックが終了すると、ジェネレーターが再開されます。未処理の例外がブロックで発生した場合、yieldが発生した時点でジェネレーター内で再発生します。したがって、&lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#try&quot;&gt; &lt;code&gt;try&lt;/code&gt; &lt;/a&gt; &amp;hellip; &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#except&quot;&gt; &lt;code&gt;except&lt;/code&gt; &lt;/a&gt; &amp;hellip; &lt;a href=&quot;https://docs.python.org/3.8/reference/compound_stmts.html#finally&quot;&gt; &lt;code&gt;finally&lt;/code&gt; &lt;/a&gt;ステートメントを使用して、エラーがある場合はそれをトラップするか、クリーンアップを確実に実行できます。例外をログに記録するため、または（完全に抑制するためではなく）何らかのアクションを実行するためだけに例外がトラップされる場合、ジェネレータはその例外を再発生させる必要があります。それ以外の場合、ジェネレータコンテキストマネージャは &lt;code&gt;with&lt;/code&gt; を示します例外が処理されたこと &lt;code&gt;with&lt;/code&gt; ステートメント。実行は、withステートメントの直後のステートメントから再開されます。</target>
        </trans-unit>
        <trans-unit id="4680ce2767581e01529e2346cba283fd88f47fee" translate="yes" xml:space="preserve">
          <source>At the point where the generator yields, the block nested in the &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt;&lt;code&gt;with&lt;/code&gt;&lt;/a&gt; statement is executed. The generator is then resumed after the block is exited. If an unhandled exception occurs in the block, it is reraised inside the generator at the point where the yield occurred. Thus, you can use a &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt;&amp;hellip;&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#except&quot;&gt;&lt;code&gt;except&lt;/code&gt;&lt;/a&gt;&amp;hellip;&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#finally&quot;&gt;&lt;code&gt;finally&lt;/code&gt;&lt;/a&gt; statement to trap the error (if any), or ensure that some cleanup takes place. If an exception is trapped merely in order to log it or to perform some action (rather than to suppress it entirely), the generator must reraise that exception. Otherwise the generator context manager will indicate to the &lt;code&gt;with&lt;/code&gt; statement that the exception has been handled, and execution will resume with the statement immediately following the &lt;code&gt;with&lt;/code&gt; statement.</source>
          <target state="translated">ジェネレーターがyieldした時点で、&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#with&quot;&gt; &lt;code&gt;with&lt;/code&gt; &lt;/a&gt;ステートメントにネストされたブロックが実行されます。ブロックが終了すると、ジェネレーターが再開されます。ブロックで未処理の例外が発生した場合、yieldが発生したポイントでジェネレーター内で再発生します。したがって、&lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#try&quot;&gt; &lt;code&gt;try&lt;/code&gt; &lt;/a&gt; &amp;hellip; &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#except&quot;&gt; &lt;code&gt;except&lt;/code&gt; &lt;/a&gt; &amp;hellip; &lt;a href=&quot;https://docs.python.org/3.9/reference/compound_stmts.html#finally&quot;&gt; &lt;code&gt;finally&lt;/code&gt; &lt;/a&gt;ステートメントを使用してエラー（存在する場合）をトラップするか、何らかのクリーンアップが行われるようにすることができます。例外をログに記録するため、または何らかのアクションを実行するために（完全に抑制するのではなく）例外がトラップされた場合、ジェネレーターはその例外を再発生させる必要があります。それ以外の場合は発電機のコンテキストマネージャがに指示されます &lt;code&gt;with&lt;/code&gt; 例外が処理されたこと &lt;code&gt;with&lt;/code&gt; ステートメント。実行は、withステートメントの直後のステートメントから再開されます。</target>
        </trans-unit>
        <trans-unit id="2f936198137a924a78693853317db45f419b314f" translate="yes" xml:space="preserve">
          <source>At the time of this writing there are docstring dictionaries in German and in Italian. (Requests please to &lt;a href=&quot;mailto:glingl%40aon.at&quot;&gt;glingl@aon.at&lt;/a&gt;.)</source>
          <target state="translated">この記事の執筆時点では、ドイツ語とイタリア語のdocstring辞書があります。（リクエストは&lt;a href=&quot;mailto:glingl%40aon.at&quot;&gt;glingl@aon.at&lt;/a&gt;までお願いします。）</target>
        </trans-unit>
        <trans-unit id="bd54bc6b94be573dbc110a2ed3dd2570d7474e92" translate="yes" xml:space="preserve">
          <source>At the top of the I/O hierarchy is the abstract base class &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt;. It defines the basic interface to a stream. Note, however, that there is no separation between reading and writing to streams; implementations are allowed to raise &lt;a href=&quot;#io.UnsupportedOperation&quot;&gt;&lt;code&gt;UnsupportedOperation&lt;/code&gt;&lt;/a&gt; if they do not support a given operation.</source>
          <target state="translated">I / O階層の最上位は、抽象基本クラス&lt;a href=&quot;#io.IOBase&quot;&gt; &lt;code&gt;IOBase&lt;/code&gt; &lt;/a&gt;です。ストリームへの基本的なインターフェースを定義します。ただし、ストリームの読み取りと書き込みの間に分離はないことに注意してください。実装は、特定の操作を&lt;a href=&quot;#io.UnsupportedOperation&quot;&gt; &lt;code&gt;UnsupportedOperation&lt;/code&gt; &lt;/a&gt;場合、UnsupportedOperationを発生させることができます。</target>
        </trans-unit>
        <trans-unit id="546ddf033018c3a7e711de15f41a05346f8ae2b5" translate="yes" xml:space="preserve">
          <source>At the top of the stack are either &lt;code&gt;NULL&lt;/code&gt; (pushed by &lt;a href=&quot;#opcode-BEGIN_FINALLY&quot;&gt;&lt;code&gt;BEGIN_FINALLY&lt;/code&gt;&lt;/a&gt;) or 6 values pushed if an exception has been raised in the with block. Below is the context manager&amp;rsquo;s &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__aexit__&quot;&gt;&lt;code&gt;__aexit__()&lt;/code&gt;&lt;/a&gt; bound method.</source>
          <target state="translated">スタックの最上位は &lt;code&gt;NULL&lt;/code&gt; （&lt;a href=&quot;#opcode-BEGIN_FINALLY&quot;&gt; &lt;code&gt;BEGIN_FINALLY&lt;/code&gt; &lt;/a&gt;によってプッシュされる）またはwithブロックで例外が発生した場合は6つの値がプッシュされます。以下は、コンテキストマネージャーの&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt; &lt;code&gt;__exit__()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__aexit__&quot;&gt; &lt;code&gt;__aexit__()&lt;/code&gt; &lt;/a&gt;バインドメソッドです。</target>
        </trans-unit>
        <trans-unit id="3a9ec1befa4a5306b468dc7e8631beee73bd6981" translate="yes" xml:space="preserve">
          <source>At this point, you can remove the application name from the registry as a source of event log entries. However, if you do this, you will not be able to see the events as you intended in the Event Log Viewer - it needs to be able to access the registry to get the .dll name. The current version does not do this.</source>
          <target state="translated">この時点で、イベントログエントリのソースとしてレジストリからアプリケーション名を削除することができます。ただし、これを行うと、イベントログビューアで意図したとおりにイベントを表示することができなくなります。現在のバージョンではこれができません。</target>
        </trans-unit>
        <trans-unit id="77945ec79bafc1b696c30defadbc717e1a79af37" translate="yes" xml:space="preserve">
          <source>At unpickling time, some methods like &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattr__&quot;&gt;&lt;code&gt;__getattr__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattribute__&quot;&gt;&lt;code&gt;__getattribute__()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__setattr__&quot;&gt;&lt;code&gt;__setattr__()&lt;/code&gt;&lt;/a&gt; may be called upon the instance. In case those methods rely on some internal invariant being true, the type should implement &lt;a href=&quot;#object.__getnewargs__&quot;&gt;&lt;code&gt;__getnewargs__()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#object.__getnewargs_ex__&quot;&gt;&lt;code&gt;__getnewargs_ex__()&lt;/code&gt;&lt;/a&gt; to establish such an invariant; otherwise, neither &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt; nor &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; will be called.</source>
          <target state="translated">unpickle化時には、のようないくつかの方法&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattr__&quot;&gt; &lt;code&gt;__getattr__()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattribute__&quot;&gt; &lt;code&gt;__getattribute__()&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__setattr__&quot;&gt; &lt;code&gt;__setattr__()&lt;/code&gt; &lt;/a&gt;インスタンスに呼ばれることがあります。これらのメソッドがいくつかの内部不変式がtrueであることに依存している場合、型は&lt;a href=&quot;#object.__getnewargs__&quot;&gt; &lt;code&gt;__getnewargs__()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#object.__getnewargs_ex__&quot;&gt; &lt;code&gt;__getnewargs_ex__()&lt;/code&gt; &lt;/a&gt;を実装して、そのような不変式を確立する必要があります。それ以外の場合、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__new__&quot;&gt; &lt;code&gt;__new__()&lt;/code&gt; &lt;/a&gt;も&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;も呼び出されません。</target>
        </trans-unit>
        <trans-unit id="318d3dfbb35956ce0abcc8243ea0ae78bda19078" translate="yes" xml:space="preserve">
          <source>At unpickling time, some methods like &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getattr__&quot;&gt;&lt;code&gt;__getattr__()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getattribute__&quot;&gt;&lt;code&gt;__getattribute__()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__setattr__&quot;&gt;&lt;code&gt;__setattr__()&lt;/code&gt;&lt;/a&gt; may be called upon the instance. In case those methods rely on some internal invariant being true, the type should implement &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__new__&quot;&gt;&lt;code&gt;__new__()&lt;/code&gt;&lt;/a&gt; to establish such an invariant, as &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt;&lt;code&gt;__init__()&lt;/code&gt;&lt;/a&gt; is not called when unpickling an instance.</source>
          <target state="translated">unpickle化時には、のようないくつかの方法&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getattr__&quot;&gt; &lt;code&gt;__getattr__()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getattribute__&quot;&gt; &lt;code&gt;__getattribute__()&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__setattr__&quot;&gt; &lt;code&gt;__setattr__()&lt;/code&gt; &lt;/a&gt;インスタンスに呼ばれることがあります。これらのメソッドが内部不変条件がtrueであることに依存している場合、&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__new__&quot;&gt; &lt;code&gt;__new__()&lt;/code&gt; &lt;/a&gt;ときに&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__init__&quot;&gt; &lt;code&gt;__init__()&lt;/code&gt; &lt;/a&gt;が呼び出されないため、型は__new __（）を実装してそのような不変条件を確立する必要があります。</target>
        </trans-unit>
        <trans-unit id="eb9837a1d06939ed7ea8bb756a82ada0870d4850" translate="yes" xml:space="preserve">
          <source>Attach a mock as an attribute of this one, replacing its name and parent. Calls to the attached mock will be recorded in the &lt;a href=&quot;#unittest.mock.Mock.method_calls&quot;&gt;&lt;code&gt;method_calls&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#unittest.mock.Mock.mock_calls&quot;&gt;&lt;code&gt;mock_calls&lt;/code&gt;&lt;/a&gt; attributes of this one.</source>
          <target state="translated">このモックの属性としてモックを接続し、名前と親を置き換えます。アタッチされたモックへの呼び出しは、このモックの&lt;a href=&quot;#unittest.mock.Mock.method_calls&quot;&gt; &lt;code&gt;method_calls&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#unittest.mock.Mock.mock_calls&quot;&gt; &lt;code&gt;mock_calls&lt;/code&gt; &lt;/a&gt;属性に記録されます。</target>
        </trans-unit>
        <trans-unit id="b00d5eac33db6facb2e7b7a2c2ed13c7c2c1b486" translate="yes" xml:space="preserve">
          <source>Attach the watcher to an event loop.</source>
          <target state="translated">イベントループにウォッチャーを取り付けます。</target>
        </trans-unit>
        <trans-unit id="8968365a321bb5b470f5dd2910dc56d308443a45" translate="yes" xml:space="preserve">
          <source>Attaches the callable &lt;em&gt;fn&lt;/em&gt; to the future. &lt;em&gt;fn&lt;/em&gt; will be called, with the future as its only argument, when the future is cancelled or finishes running.</source>
          <target state="translated">呼び出し可能な&lt;em&gt;fn&lt;/em&gt;をフューチャーにアタッチします。&lt;em&gt;fn&lt;/em&gt;は、futureがキャンセルされるか実行が&lt;em&gt;完了&lt;/em&gt;すると、futureを唯一の引数として呼び出されます。</target>
        </trans-unit>
        <trans-unit id="2de4844092811a250638c499c463f6e1183dadac" translate="yes" xml:space="preserve">
          <source>Attaching Mocks as Attributes</source>
          <target state="translated">モックを属性として添付する</target>
        </trans-unit>
        <trans-unit id="05d7b70d5d34350cfab01a5105b6cadb19208146" translate="yes" xml:space="preserve">
          <source>Attempt to cancel the call. If the call is currently being executed or finished running and cannot be cancelled then the method will return &lt;code&gt;False&lt;/code&gt;, otherwise the call will be cancelled and the method will return &lt;code&gt;True&lt;/code&gt;.</source>
          <target state="translated">通話をキャンセルしてみます。呼び出しが現在実行中または実行が終了していてキャンセルできない場合、メソッドは &lt;code&gt;False&lt;/code&gt; を返し &lt;code&gt;True&lt;/code&gt; 。それ以外の場合、呼び出しはキャンセルされ、メソッドはTrueを返します。</target>
        </trans-unit>
        <trans-unit id="a94ab803dbe317473c0a7010ac4289475d2e741b" translate="yes" xml:space="preserve">
          <source>Attempt to find the loader to handle &lt;em&gt;fullname&lt;/em&gt; within &lt;a href=&quot;#importlib.machinery.FileFinder.path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#importlib.machinery.FileFinder.path&quot;&gt; &lt;code&gt;path&lt;/code&gt; &lt;/a&gt;内で&lt;em&gt;フルネーム&lt;/em&gt;を処理するローダーを見つけてください。</target>
        </trans-unit>
        <trans-unit id="87e96da2c623edd35028d89720f05572c7ca81a6" translate="yes" xml:space="preserve">
          <source>Attempt to find the spec to handle &lt;em&gt;fullname&lt;/em&gt; within &lt;a href=&quot;#importlib.machinery.FileFinder.path&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#importlib.machinery.FileFinder.path&quot;&gt; &lt;code&gt;path&lt;/code&gt; &lt;/a&gt;内で&lt;em&gt;フルネーム&lt;/em&gt;を処理するための仕様を見つけてください。</target>
        </trans-unit>
        <trans-unit id="d2ad8c10f0d76337b6eb760519bcf124aa2fa5b5" translate="yes" xml:space="preserve">
          <source>Attempt to read and parse an iterable of filenames, returning a list of filenames which were successfully parsed.</source>
          <target state="translated">ファイル名のイテレータブルの読み込みと解析を試み、解析に成功したファイル名のリストを返します。</target>
        </trans-unit>
        <trans-unit id="cec2196c119a8750bee0a499c586caefe53531d9" translate="yes" xml:space="preserve">
          <source>Attempt to set up a connection to the listener which is using address &lt;em&gt;address&lt;/em&gt;, returning a &lt;a href=&quot;#multiprocessing.connection.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">アドレス&lt;em&gt;address&lt;/em&gt;を使用しているリスナーへの接続を設定しようとし、&lt;a href=&quot;#multiprocessing.connection.Connection&quot;&gt; &lt;code&gt;Connection&lt;/code&gt; を&lt;/a&gt;返します。</target>
        </trans-unit>
        <trans-unit id="bcfcda249f8236d3c4a374364c689dafac6d094d" translate="yes" xml:space="preserve">
          <source>Attempting to create a member with the same name as an already defined attribute (another member, a method, etc.) or attempting to create an attribute with the same name as a member is not allowed.</source>
          <target state="translated">既に定義されている属性(別のメンバ、メソッドなど)と同じ名前のメンバを作成しようとしたり、メンバと同じ名前の属性を作成しようとすることは許可されていません。</target>
        </trans-unit>
        <trans-unit id="582daf17ef09c37849d7cd683a4bf531834c0538" translate="yes" xml:space="preserve">
          <source>Attempting to decompress data after the end of stream is reached raises an &lt;code&gt;EOFError&lt;/code&gt;. Any data found after the end of the stream is ignored and saved in the &lt;a href=&quot;#bz2.BZ2Decompressor.unused_data&quot;&gt;&lt;code&gt;unused_data&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">ストリームの終わりに達した後でデータを解凍しようとすると、 &lt;code&gt;EOFError&lt;/code&gt; が発生します。ストリームの終了後に検出されたデータはすべて無視され、&lt;a href=&quot;#bz2.BZ2Decompressor.unused_data&quot;&gt; &lt;code&gt;unused_data&lt;/code&gt; &lt;/a&gt;属性に保存されます。</target>
        </trans-unit>
        <trans-unit id="0b665a0261d8155c9a7fef41d1c6d0fafe94af38" translate="yes" xml:space="preserve">
          <source>Attempting to decompress data after the end of stream is reached raises an &lt;code&gt;EOFError&lt;/code&gt;. Any data found after the end of the stream is ignored and saved in the &lt;a href=&quot;#lzma.LZMADecompressor.unused_data&quot;&gt;&lt;code&gt;unused_data&lt;/code&gt;&lt;/a&gt; attribute.</source>
          <target state="translated">ストリームの終わりに達した後でデータを解凍しようとすると、 &lt;code&gt;EOFError&lt;/code&gt; が発生します。ストリームの終了後に検出されたデータはすべて無視され、&lt;a href=&quot;#lzma.LZMADecompressor.unused_data&quot;&gt; &lt;code&gt;unused_data&lt;/code&gt; &lt;/a&gt;属性に保存されます。</target>
        </trans-unit>
        <trans-unit id="e681818ae46e966f6a5519bb892f806874ff3de9" translate="yes" xml:space="preserve">
          <source>Attempting to hash an immutable sequence that contains unhashable values will result in &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ハッシュ不可能な値を含む不変のシーケンスをハッシュしようとすると、&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4315a818f5b166adfafe5e6b5bedd0f534c2d06f" translate="yes" xml:space="preserve">
          <source>Attempting to link in too many shared libraries</source>
          <target state="translated">共有ライブラリが多すぎてリンクしようとすると</target>
        </trans-unit>
        <trans-unit id="5c1642b2606e4707280aebbdbf990340b047aa2c" translate="yes" xml:space="preserve">
          <source>Attempting to mix &lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; data with &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt; in a single function call will result in a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; being raised, while attempting to pass in non-ASCII byte values will trigger &lt;a href=&quot;exceptions#UnicodeDecodeError&quot;&gt;&lt;code&gt;UnicodeDecodeError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">単一の関数呼び出しで&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;データを&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;またはバイト&lt;a href=&quot;stdtypes#bytearray&quot;&gt; &lt;code&gt;bytearray&lt;/code&gt; &lt;/a&gt;と混合しようとすると、&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;が発生しますが、ASCII以外のバイト値を渡そうとすると、&lt;a href=&quot;exceptions#UnicodeDecodeError&quot;&gt; &lt;code&gt;UnicodeDecodeError&lt;/code&gt; &lt;/a&gt;がトリガーされます。</target>
        </trans-unit>
        <trans-unit id="f6184f80184272af2a3f2d6c0b9b164e1af53cf1" translate="yes" xml:space="preserve">
          <source>Attempting to pass an invalid interval timer will cause an &lt;a href=&quot;#signal.ItimerError&quot;&gt;&lt;code&gt;ItimerError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">無効なインターバルタイマーを渡そうとすると、&lt;a href=&quot;#signal.ItimerError&quot;&gt; &lt;code&gt;ItimerError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="6e116626d01e2573360701151c730543d251d466" translate="yes" xml:space="preserve">
          <source>Attempting to remove a file descriptor that was never registered causes a &lt;a href=&quot;exceptions#KeyError&quot;&gt;&lt;code&gt;KeyError&lt;/code&gt;&lt;/a&gt; exception to be raised.</source>
          <target state="translated">登録されていないファイル記述子を削除しようとすると、&lt;a href=&quot;exceptions#KeyError&quot;&gt; &lt;code&gt;KeyError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="3488e5797ae34b2740e12aca784ebb804aa2a11a" translate="yes" xml:space="preserve">
          <source>Attempting to remove a file descriptor that was never registered is safely ignored.</source>
          <target state="translated">登録されていないファイル記述子を削除しようとすると、安全に無視されます。</target>
        </trans-unit>
        <trans-unit id="413a8b0ee7fbafdd8b138da7cc28cc290a17232c" translate="yes" xml:space="preserve">
          <source>Attempts to parse a date according to the rules in &lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt;. however, some mailers don&amp;rsquo;t follow that format as specified, so &lt;a href=&quot;#email.utils.parsedate&quot;&gt;&lt;code&gt;parsedate()&lt;/code&gt;&lt;/a&gt; tries to guess correctly in such cases. &lt;em&gt;date&lt;/em&gt; is a string containing an &lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt; date, such as &lt;code&gt;&quot;Mon, 20 Nov 1995 19:12:08 -0500&quot;&lt;/code&gt;. If it succeeds in parsing the date, &lt;a href=&quot;#email.utils.parsedate&quot;&gt;&lt;code&gt;parsedate()&lt;/code&gt;&lt;/a&gt; returns a 9-tuple that can be passed directly to &lt;a href=&quot;time#time.mktime&quot;&gt;&lt;code&gt;time.mktime()&lt;/code&gt;&lt;/a&gt;; otherwise &lt;code&gt;None&lt;/code&gt; will be returned. Note that indexes 6, 7, and 8 of the result tuple are not usable.</source>
          <target state="translated">&lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-2&quot;&gt;&lt;strong&gt;RFC 2822の&lt;/strong&gt;&lt;/a&gt;規則に従って日付の解析を試み&lt;strong&gt;ます&lt;/strong&gt;。ただし、一部のメーラーは指定された形式に&lt;a href=&quot;#email.utils.parsedate&quot;&gt; &lt;code&gt;parsedate()&lt;/code&gt; &lt;/a&gt;ていないため、parsedate（）はそのような場合に正しく推測しようとします。&lt;em&gt;date&lt;/em&gt;は、 &lt;code&gt;&quot;Mon, 20 Nov 1995 19:12:08 -0500&quot;&lt;/code&gt; ような&lt;a href=&quot;https://tools.ietf.org/html/rfc2822.html&quot; id=&quot;index-3&quot;&gt;&lt;strong&gt;RFC 2822&lt;/strong&gt;&lt;/a&gt;日付を含む文字列です。それは日付の解析に成功した場合、&lt;a href=&quot;#email.utils.parsedate&quot;&gt; &lt;code&gt;parsedate()&lt;/code&gt; &lt;/a&gt;に直接渡すことができる9つのタプルを返し&lt;a href=&quot;time#time.mktime&quot;&gt; &lt;code&gt;time.mktime()&lt;/code&gt; &lt;/a&gt;。それ以外の場合は &lt;code&gt;None&lt;/code&gt; が返されます。結果タプルのインデックス6、7、および8は使用できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="8f8f0a192956c468d1f05450c3d0f99e1ed3eb87" translate="yes" xml:space="preserve">
          <source>Attempts to pickle unpicklable objects will raise the &lt;a href=&quot;#pickle.PicklingError&quot;&gt;&lt;code&gt;PicklingError&lt;/code&gt;&lt;/a&gt; exception; when this happens, an unspecified number of bytes may have already been written to the underlying file. Trying to pickle a highly recursive data structure may exceed the maximum recursion depth, a &lt;a href=&quot;exceptions#RecursionError&quot;&gt;&lt;code&gt;RecursionError&lt;/code&gt;&lt;/a&gt; will be raised in this case. You can carefully raise this limit with &lt;a href=&quot;sys#sys.setrecursionlimit&quot;&gt;&lt;code&gt;sys.setrecursionlimit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">unpickle不可能なオブジェクトをpickle化しようとすると、発生します&lt;a href=&quot;#pickle.PicklingError&quot;&gt; &lt;code&gt;PicklingError&lt;/code&gt; の&lt;/a&gt;例外を。これが発生した場合、指定されていないバイト数がすでに基礎となるファイルに書き込まれている可能性があります。高度に再帰的なデータ構造をpickle化しようとすると、最大の再帰の深さを超える可能性があり、この場合は&lt;a href=&quot;exceptions#RecursionError&quot;&gt; &lt;code&gt;RecursionError&lt;/code&gt; &lt;/a&gt;が発生します。&lt;a href=&quot;sys#sys.setrecursionlimit&quot;&gt; &lt;code&gt;sys.setrecursionlimit()&lt;/code&gt; &lt;/a&gt;を使用して、この制限を慎重に引き上げることができます。</target>
        </trans-unit>
        <trans-unit id="b271428a65f77bc781cd47b969a5bc6e419af63a" translate="yes" xml:space="preserve">
          <source>Attention: &lt;em&gt;speed&lt;/em&gt; = 0 means that &lt;em&gt;no&lt;/em&gt; animation takes place. forward/back makes turtle jump and likewise left/right make the turtle turn instantly.</source>
          <target state="translated">注意：&lt;em&gt;速度&lt;/em&gt; = 0は、アニメーションが発生し&lt;em&gt;ない&lt;/em&gt;ことを意味します。前進/後退は亀をジャンプさせ、同様に左/右は亀を瞬時に回転させます。</target>
        </trans-unit>
        <trans-unit id="4704ccf5d9826a4b8c3ff2f628be8f9ea11d5c58" translate="yes" xml:space="preserve">
          <source>Attr Objects</source>
          <target state="translated">アトライオブジェクト</target>
        </trans-unit>
        <trans-unit id="a086d942884a301b827479029ba19c2746237425" translate="yes" xml:space="preserve">
          <source>Attribute</source>
          <target state="translated">Attribute</target>
        </trans-unit>
        <trans-unit id="f6a291a4083dcfd41b19b0b5972f9a151abebd51" translate="yes" xml:space="preserve">
          <source>Attribute access, e.g. &lt;code&gt;d.keys&lt;/code&gt;. &lt;code&gt;value&lt;/code&gt; is a node, typically a &lt;a href=&quot;#ast.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;attr&lt;/code&gt; is a bare string giving the name of the attribute, and &lt;code&gt;ctx&lt;/code&gt; is &lt;a href=&quot;#ast.Load&quot;&gt;&lt;code&gt;Load&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ast.Store&quot;&gt;&lt;code&gt;Store&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#ast.Del&quot;&gt;&lt;code&gt;Del&lt;/code&gt;&lt;/a&gt; according to how the attribute is acted on.</source>
          <target state="translated">&lt;code&gt;d.keys&lt;/code&gt; などの属性アクセス。 &lt;code&gt;value&lt;/code&gt; はノードであり、通常は&lt;a href=&quot;#ast.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt;です。 &lt;code&gt;attr&lt;/code&gt; は属性の名前を示す裸の文字列であり、 &lt;code&gt;ctx&lt;/code&gt; は、属性がどのように処理されるかに応じて、&lt;a href=&quot;#ast.Load&quot;&gt; &lt;code&gt;Load&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ast.Store&quot;&gt; &lt;code&gt;Store&lt;/code&gt; 、&lt;/a&gt;または&lt;a href=&quot;#ast.Del&quot;&gt; &lt;code&gt;Del&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="fd11efd3b2bb215beb5fe4deac5b15c31b49871e" translate="yes" xml:space="preserve">
          <source>Attribute name</source>
          <target state="translated">属性名</target>
        </trans-unit>
        <trans-unit id="44b0ecb440f33452e3b57f0fc1355b5b83b53b65" translate="yes" xml:space="preserve">
          <source>Attribute value nodes on element nodes.</source>
          <target state="translated">要素ノード上の属性値ノード。</target>
        </trans-unit>
        <trans-unit id="e30390c6b25519953f15954ce4132cba67fdd587" translate="yes" xml:space="preserve">
          <source>AttributeError</source>
          <target state="translated">AttributeError</target>
        </trans-unit>
        <trans-unit id="a6652617f2c799eb11ee727b16c5646c48af6905" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Attributes</target>
        </trans-unit>
        <trans-unit id="79c3aeb6146abe2231f5b89a475ab249029d088e" translate="yes" xml:space="preserve">
          <source>Attributes and methods for customizing the WSGI environment:</source>
          <target state="translated">WSGI環境をカスタマイズするための属性とメソッド。</target>
        </trans-unit>
        <trans-unit id="e9b663bf28955d0808f846d124c86b6d0183b33f" translate="yes" xml:space="preserve">
          <source>Attributes and methods on a &lt;code&gt;os.DirEntry&lt;/code&gt; instance are as follows:</source>
          <target state="translated">&lt;code&gt;os.DirEntry&lt;/code&gt; インスタンスの属性とメソッドは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="73692911ebd863a9a87e4961881d432666982309" translate="yes" xml:space="preserve">
          <source>Attributes are created on demand when you access them by name. Accessing the same attribute will always return the same object. The objects returned have a sensible repr so that test failure messages are readable.</source>
          <target state="translated">属性は、名前でアクセスするとオンデマンドで作成されます。同じ属性にアクセスすると、常に同じオブジェクトが返されます。返されるオブジェクトは、テストの失敗メッセージが読み取れるように、適切なreprを持っています。</target>
        </trans-unit>
        <trans-unit id="101df875704c7152821017f27b87995406582c71" translate="yes" xml:space="preserve">
          <source>Attributes plus return values and side effects can be set on child mocks using standard dot notation and unpacking a dictionary in the method call:</source>
          <target state="translated">子モックには、標準のドット記法を使用して、メソッド呼び出しでディクショナリを展開することで、属性と戻り値、副作用を設定することができます。</target>
        </trans-unit>
        <trans-unit id="6c886066a950b07e9817b943cf62493312e7bdd7" translate="yes" xml:space="preserve">
          <source>Attributes set when an exception is catched:</source>
          <target state="translated">例外が捕捉されたときに設定される属性。</target>
        </trans-unit>
        <trans-unit id="b8087185e5ee37cef4c337de5697d35d75d909fd" translate="yes" xml:space="preserve">
          <source>Attributes:</source>
          <target state="translated">Attributes:</target>
        </trans-unit>
        <trans-unit id="5c7c68f4b64e821cb3bb3f3f760a898c036a3f74" translate="yes" xml:space="preserve">
          <source>Audio Device Objects</source>
          <target state="translated">オーディオデバイスオブジェクト</target>
        </trans-unit>
        <trans-unit id="16176810d7decb98eb62c4c87a10dd432035c88f" translate="yes" xml:space="preserve">
          <source>Audio device objects also support several read-only attributes:</source>
          <target state="translated">オーディオデバイスオブジェクトは、いくつかの読み取り専用属性もサポートしています。</target>
        </trans-unit>
        <trans-unit id="6e947bb134465c1c6a6e453065d0c48e8ca8c64a" translate="yes" xml:space="preserve">
          <source>Audio files have a number of parameters that describe the audio data. The sampling rate or frame rate is the number of times per second the sound is sampled. The number of channels indicate if the audio is mono, stereo, or quadro. Each frame consists of one sample per channel. The sample size is the size in bytes of each sample. Thus a frame consists of &lt;code&gt;nchannels * samplesize&lt;/code&gt; bytes, and a second&amp;rsquo;s worth of audio consists of &lt;code&gt;nchannels * samplesize * framerate&lt;/code&gt; bytes.</source>
          <target state="translated">オーディオファイルには、オーディオデータを記述する多くのパラメータがあります。サンプリングレートまたはフレームレートは、サウンドが1秒間にサンプリングされる回数です。チャネルの数は、オーディオがモノラル、ステレオ、クワドロのいずれであるかを示します。各フレームは、チャネルごとに1つのサンプルで構成されます。サンプルサイズは、各サンプルのバイト単位のサイズです。したがって、フレームは &lt;code&gt;nchannels * samplesize&lt;/code&gt; バイトで構成され、1 &lt;code&gt;nchannels * samplesize * framerate&lt;/code&gt; のオーディオはnchannels * samplesize * framerateバイトで構成されます。</target>
        </trans-unit>
        <trans-unit id="ff3e0d680200101f6f9f4009685f904d7888a4b5" translate="yes" xml:space="preserve">
          <source>Audit event</source>
          <target state="translated">監査イベント</target>
        </trans-unit>
        <trans-unit id="14c2893dc5aedb9cac7688ec4357a58cad8f48e8" translate="yes" xml:space="preserve">
          <source>Audit events table</source>
          <target state="translated">監査イベント表</target>
        </trans-unit>
        <trans-unit id="929db3b0bd47cefe7a1842f9fc90bc8e40629a8d" translate="yes" xml:space="preserve">
          <source>Augmented assignment, such as &lt;code&gt;a += 1&lt;/code&gt;. In the following example, &lt;code&gt;target&lt;/code&gt; is a &lt;a href=&quot;#ast.Name&quot;&gt;&lt;code&gt;Name&lt;/code&gt;&lt;/a&gt; node for &lt;code&gt;x&lt;/code&gt; (with the &lt;a href=&quot;#ast.Store&quot;&gt;&lt;code&gt;Store&lt;/code&gt;&lt;/a&gt; context), &lt;code&gt;op&lt;/code&gt; is &lt;a href=&quot;#ast.Add&quot;&gt;&lt;code&gt;Add&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;value&lt;/code&gt; is a &lt;a href=&quot;#ast.Constant&quot;&gt;&lt;code&gt;Constant&lt;/code&gt;&lt;/a&gt; with value for 1.</source>
          <target state="translated">&lt;code&gt;a += 1&lt;/code&gt; などの拡張割り当て。次の例では、 &lt;code&gt;target&lt;/code&gt; は &lt;code&gt;x&lt;/code&gt; の&lt;a href=&quot;#ast.Name&quot;&gt; &lt;code&gt;Name&lt;/code&gt; &lt;/a&gt;ノード（&lt;a href=&quot;#ast.Store&quot;&gt; &lt;code&gt;Store&lt;/code&gt; &lt;/a&gt;コンテキストを使用）、 &lt;code&gt;op&lt;/code&gt; は&lt;a href=&quot;#ast.Add&quot;&gt; &lt;code&gt;Add&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;value&lt;/code&gt; は値が1の&lt;a href=&quot;#ast.Constant&quot;&gt; &lt;code&gt;Constant&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="6922a9610304991071bd728c3a287a51b532d68c" translate="yes" xml:space="preserve">
          <source>Authenticate command &amp;mdash; requires response processing.</source>
          <target state="translated">コマンドの認証&amp;mdash;応答処理が必要です。</target>
        </trans-unit>
        <trans-unit id="8ccb8a1076f255643cd045f9684ad5f445deae31" translate="yes" xml:space="preserve">
          <source>Authentication is supported, using the regular SMTP mechanism. When using a Unix socket, LMTP generally don&amp;rsquo;t support or require any authentication, but your mileage might vary.</source>
          <target state="translated">認証は、通常のSMTPメカニズムを使用してサポートされます。Unixソケットを使用する場合、LMTPは通常、認証をサポートしていないか、認証を要求しませんが、距離は異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="34762561a060645d5e694a00f5c15f22688272cc" translate="yes" xml:space="preserve">
          <source>Authentication keys</source>
          <target state="translated">認証キー</target>
        </trans-unit>
        <trans-unit id="b6d03350228ac0bf7f8b015328effcfd7281fdb3" translate="yes" xml:space="preserve">
          <source>Auto-negotiate the highest protocol version like &lt;a href=&quot;#ssl.PROTOCOL_TLS&quot;&gt;&lt;code&gt;PROTOCOL_TLS&lt;/code&gt;&lt;/a&gt;, but only support client-side &lt;a href=&quot;#ssl.SSLSocket&quot;&gt;&lt;code&gt;SSLSocket&lt;/code&gt;&lt;/a&gt; connections. The protocol enables &lt;a href=&quot;#ssl.CERT_REQUIRED&quot;&gt;&lt;code&gt;CERT_REQUIRED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#ssl.SSLContext.check_hostname&quot;&gt;&lt;code&gt;check_hostname&lt;/code&gt;&lt;/a&gt; by default.</source>
          <target state="translated">&lt;a href=&quot;#ssl.PROTOCOL_TLS&quot;&gt; &lt;code&gt;PROTOCOL_TLS&lt;/code&gt; の&lt;/a&gt;ような最高のプロトコルバージョンを自動ネゴシエートしますが、クライアント側の&lt;a href=&quot;#ssl.SSLSocket&quot;&gt; &lt;code&gt;SSLSocket&lt;/code&gt; &lt;/a&gt;接続のみをサポートします。このプロトコルは、デフォルトで&lt;a href=&quot;#ssl.CERT_REQUIRED&quot;&gt; &lt;code&gt;CERT_REQUIRED&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#ssl.SSLContext.check_hostname&quot;&gt; &lt;code&gt;check_hostname&lt;/code&gt; を有効に&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="b1b09a77c9093ba1c2df03bc5d6beeb4959883e7" translate="yes" xml:space="preserve">
          <source>Auto-negotiate the highest protocol version like &lt;a href=&quot;#ssl.PROTOCOL_TLS&quot;&gt;&lt;code&gt;PROTOCOL_TLS&lt;/code&gt;&lt;/a&gt;, but only support server-side &lt;a href=&quot;#ssl.SSLSocket&quot;&gt;&lt;code&gt;SSLSocket&lt;/code&gt;&lt;/a&gt; connections.</source>
          <target state="translated">&lt;a href=&quot;#ssl.PROTOCOL_TLS&quot;&gt; &lt;code&gt;PROTOCOL_TLS&lt;/code&gt; の&lt;/a&gt;ような最新のプロトコルバージョンを自動ネゴシエートしますが、サーバー側の&lt;a href=&quot;#ssl.SSLSocket&quot;&gt; &lt;code&gt;SSLSocket&lt;/code&gt; &lt;/a&gt;接続のみをサポートします。</target>
        </trans-unit>
        <trans-unit id="f47c5ab52bbe1a984f857a4d21dd996e64a02f48" translate="yes" xml:space="preserve">
          <source>Auto-open Stack Viewer</source>
          <target state="translated">スタックビューアを自動で開く</target>
        </trans-unit>
        <trans-unit id="197be9c04cb2e21653d60342178244091efa77b8" translate="yes" xml:space="preserve">
          <source>Auto-speccing solves this problem. You can either pass &lt;code&gt;autospec=True&lt;/code&gt; to &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; / &lt;a href=&quot;#unittest.mock.patch.object&quot;&gt;&lt;code&gt;patch.object()&lt;/code&gt;&lt;/a&gt; or use the &lt;a href=&quot;#unittest.mock.create_autospec&quot;&gt;&lt;code&gt;create_autospec()&lt;/code&gt;&lt;/a&gt; function to create a mock with a spec. If you use the &lt;code&gt;autospec=True&lt;/code&gt; argument to &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; then the object that is being replaced will be used as the spec object. Because the speccing is done &amp;ldquo;lazily&amp;rdquo; (the spec is created as attributes on the mock are accessed) you can use it with very complex or deeply nested objects (like modules that import modules that import modules) without a big performance hit.</source>
          <target state="translated">自動指定はこの問題を解決します。あなたはどちらか渡すことができます &lt;code&gt;autospec=True&lt;/code&gt; へ&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#unittest.mock.patch.object&quot;&gt; &lt;code&gt;patch.object()&lt;/code&gt; を&lt;/a&gt;または使用&lt;a href=&quot;#unittest.mock.create_autospec&quot;&gt; &lt;code&gt;create_autospec()&lt;/code&gt; &lt;/a&gt;仕様でモックを作成する機能を。 &lt;code&gt;autospec=True&lt;/code&gt; 引数を&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; に&lt;/a&gt;使用する場合、置き換えられるオブジェクトが仕様オブジェクトとして使用されます。仕様は「ゆるく」行われるため（仕様はモックの属性にアクセスするときに作成されます）、非常に複雑なオブジェクトや深くネストされたオブジェクト（モジュールをインポートするモジュールをインポートするモジュールなど）で、大きなパフォーマンスヒットなしに使用できます。</target>
        </trans-unit>
        <trans-unit id="c61da791d8a006bda906f9ae1ff768b72eb7dc76" translate="yes" xml:space="preserve">
          <source>Automatic indentation</source>
          <target state="translated">自動インデント</target>
        </trans-unit>
        <trans-unit id="6403e37e9140843598c5440d1e8bc72de007ae50" translate="yes" xml:space="preserve">
          <source>Automatically determine how many times to call &lt;a href=&quot;#timeit.Timer.timeit&quot;&gt;&lt;code&gt;timeit()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#timeit.Timer.timeit&quot;&gt; &lt;code&gt;timeit()&lt;/code&gt; &lt;/a&gt;を呼び出す回数を自動的に決定します。</target>
        </trans-unit>
        <trans-unit id="4d5117dbfc630c5ff47b8c4726c276df15d1bd1e" translate="yes" xml:space="preserve">
          <source>Autospeccing</source>
          <target state="translated">Autospeccing</target>
        </trans-unit>
        <trans-unit id="aae79d454597517030f9ce7ec36250067a2b9f35" translate="yes" xml:space="preserve">
          <source>Autospeccing is based on the existing &lt;code&gt;spec&lt;/code&gt; feature of mock. It limits the api of mocks to the api of an original object (the spec), but it is recursive (implemented lazily) so that attributes of mocks only have the same api as the attributes of the spec. In addition mocked functions / methods have the same call signature as the original so they raise a &lt;a href=&quot;exceptions#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; if they are called incorrectly.</source>
          <target state="translated">自動 &lt;code&gt;spec&lt;/code&gt; は、モックの既存の仕様機能に基づいています。モックのAPIを元のオブジェクト（仕様）のAPIに制限しますが、モックの属性は仕様の属性と同じAPIのみを持つように再帰的（遅延的に実装）です。さらに、モックされた関数/メソッドは元の関数と同じ呼び出しシグネチャを持っているため、誤って呼び出されると&lt;a href=&quot;exceptions#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; が発生し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6e04a76e0651512ad3b1c9b3855e894e52bacec7" translate="yes" xml:space="preserve">
          <source>Auxiliary method for getting a filename in a canonical form, that is, as a case-normalized (on case-insensitive filesystems) absolute path, stripped of surrounding angle brackets.</source>
          <target state="translated">ファイル名を正規化した (大文字小文字を区別しないファイルシステムでは)絶対パスとして、周囲の角括弧を取り除いた形で取得するための補助的な方法。</target>
        </trans-unit>
        <trans-unit id="d15ede98b9b5686d60eb679c69ff709aea96450e" translate="yes" xml:space="preserve">
          <source>Availability: SQLite 3.6.11 or higher</source>
          <target state="translated">可用性。SQLite 3.6.11以上</target>
        </trans-unit>
        <trans-unit id="0648a25bb67f0b4d3be9ad2e32d5343d5884c667" translate="yes" xml:space="preserve">
          <source>Availability: Systems with the &lt;code&gt;madvise()&lt;/code&gt; system call.</source>
          <target state="translated">可用性： &lt;code&gt;madvise()&lt;/code&gt; システムコールを備えたシステム。</target>
        </trans-unit>
        <trans-unit id="fcc09c1546fd2002ad5bda6442ec6858c4d44e94" translate="yes" xml:space="preserve">
          <source>Availability: Systems with the madvise() system call.</source>
          <target state="translated">可用性。madvise()システムコールを持つシステム。</target>
        </trans-unit>
        <trans-unit id="c9fcd2b619f3ed9f21f2ae1dc44a712e8e0c1b0c" translate="yes" xml:space="preserve">
          <source>Availability: Tk 8.6</source>
          <target state="translated">利用可能性 Tk 8.6</target>
        </trans-unit>
        <trans-unit id="fb3bce3637a32f6ce35b6791b2442a57507592a0" translate="yes" xml:space="preserve">
          <source>Availability: Tk 8.6.</source>
          <target state="translated">利用可能性がある Tk8.</target>
        </trans-unit>
        <trans-unit id="dad7b53c45f37c3a8f080b151e9238c41b4b613e" translate="yes" xml:space="preserve">
          <source>Availability: if the ncurses library is used.</source>
          <target state="translated">可用性:ncurses ライブラリを使用している場合。</target>
        </trans-unit>
        <trans-unit id="90ede860852b2d88bce6f917c8c626dd1ebd0863" translate="yes" xml:space="preserve">
          <source>Available Context Managers</source>
          <target state="translated">利用可能なコンテキストマネージャ</target>
        </trans-unit>
        <trans-unit id="e8fb788cf6307a8cd78a358b3227f7e4460f4896" translate="yes" xml:space="preserve">
          <source>Available Functions</source>
          <target state="translated">利用可能な機能</target>
        </trans-unit>
        <trans-unit id="886aad58c06c842c7cf3407ff5f794bccc525568" translate="yes" xml:space="preserve">
          <source>Available Types</source>
          <target state="translated">利用可能なタイプ</target>
        </trans-unit>
        <trans-unit id="c1743168e4383b0ceeb14b5166304e0f0f3be9ec" translate="yes" xml:space="preserve">
          <source>Available for read</source>
          <target state="translated">読むことができます</target>
        </trans-unit>
        <trans-unit id="247b0d4f98d15c3f067f1f036f9a2288ba9508e3" translate="yes" xml:space="preserve">
          <source>Available for write</source>
          <target state="translated">書き込み可能</target>
        </trans-unit>
        <trans-unit id="d5cbfc01dab58f33d6399bdf92d34e12742cc326" translate="yes" xml:space="preserve">
          <source>Available on Unix and Windows. The default on Windows and macOS.</source>
          <target state="translated">UnixとWindowsで利用可能。WindowsとmacOSではデフォルト。</target>
        </trans-unit>
        <trans-unit id="5bd9dd81c594faef45bb68cd8e2f6b57306afbb3" translate="yes" xml:space="preserve">
          <source>Available on Unix only. The default on Unix.</source>
          <target state="translated">Unixでのみ利用可能。Unixではデフォルトです。</target>
        </trans-unit>
        <trans-unit id="8b289188b8156e0915761af80089ec725b1d7c5e" translate="yes" xml:space="preserve">
          <source>Available on Unix platforms which support passing file descriptors over Unix pipes.</source>
          <target state="translated">Unix パイプを介してファイルディスクリプタを渡すことをサポートしている Unix プラットフォームで利用可能。</target>
        </trans-unit>
        <trans-unit id="f6c3e2a80c9a11385439b399a1bbc1528532103f" translate="yes" xml:space="preserve">
          <source>Averages and measures of central location</source>
          <target state="translated">中心地の平均と対策</target>
        </trans-unit>
        <trans-unit id="63dece88439aa338ed47cd03f066290634af6ebb" translate="yes" xml:space="preserve">
          <source>Avoid shared state</source>
          <target state="translated">共有状態を避ける</target>
        </trans-unit>
        <trans-unit id="49cd5a5cd25205ca8554e1312e26ecf321d1c177" translate="yes" xml:space="preserve">
          <source>Avoid terminating processes</source>
          <target state="translated">プロセスの終了を避ける</target>
        </trans-unit>
        <trans-unit id="9dfd80c478c083df370ff07aeddda8591a1285bc" translate="yes" xml:space="preserve">
          <source>Awaitables</source>
          <target state="translated">Awaitables</target>
        </trans-unit>
        <trans-unit id="da49b3337696e8a2b4c64d3033aa0a3a5fbc2d3f" translate="yes" xml:space="preserve">
          <source>Awaiting on a coroutine. The following snippet of code will print &amp;ldquo;hello&amp;rdquo; after waiting for 1 second, and then print &amp;ldquo;world&amp;rdquo; after waiting for &lt;em&gt;another&lt;/em&gt; 2 seconds:</source>
          <target state="translated">コルーチンで待っています。次のコードスニペットは、1秒待ってから「hello」を出力し、&lt;em&gt;さらに&lt;/em&gt; 2秒待ってから「world」を出力します。</target>
        </trans-unit>
        <trans-unit id="d09738049226150f62d909b1178a56d0dfe67bbd" translate="yes" xml:space="preserve">
          <source>Aware and Naive Objects</source>
          <target state="translated">アウェアオブジェクトとナイーブオブジェクト</target>
        </trans-unit>
        <trans-unit id="708e5124ff648e8126313adce762960fdf915375" translate="yes" xml:space="preserve">
          <source>BLAKE2</source>
          <target state="translated">BLAKE2</target>
        </trans-unit>
        <trans-unit id="9bc500c21c3285144fc28bd0e912a7783b167e8c" translate="yes" xml:space="preserve">
          <source>BLAKE2 can be personalized by passing bytes to the &lt;em&gt;person&lt;/em&gt; argument:</source>
          <target state="translated">BLAKE2は、&lt;em&gt;person&lt;/em&gt;引数にバイトを渡すことでパーソナライズできます。</target>
        </trans-unit>
        <trans-unit id="c571b2356698c401ae7c55f2f7327fe7d7dcc208" translate="yes" xml:space="preserve">
          <source>BLAKE2 has configurable size of digests up to 64 bytes for BLAKE2b and up to 32 bytes for BLAKE2s. For example, to replace SHA-1 with BLAKE2b without changing the size of output, we can tell BLAKE2b to produce 20-byte digests:</source>
          <target state="translated">BLAKE2は、BLAKE2bでは最大64バイト、BLAKE2sでは最大32バイトのダイジェストサイズを設定可能です。例えば、出力サイズを変えずにSHA-1をBLAKE2bで置き換えるには、20バイトのダイジェストを生成するようにBLAKE2bに指示することができます。</target>
        </trans-unit>
        <trans-unit id="eef9c659e49da103106b41ae1c8a79320baba6dc" translate="yes" xml:space="preserve">
          <source>BLAKE2 specification defines constant lengths for salt and personalization parameters, however, for convenience, this implementation accepts byte strings of any size up to the specified length. If the length of the parameter is less than specified, it is padded with zeros, thus, for example, &lt;code&gt;b'salt'&lt;/code&gt; and &lt;code&gt;b'salt\x00'&lt;/code&gt; is the same value. (This is not the case for &lt;em&gt;key&lt;/em&gt;.)</source>
          <target state="translated">BLAKE2仕様では、saltパラメータとPersonalizationパラメータに一定の長さが定義されていますが、便宜上、この実装では、指定された長さまでの任意のサイズのバイト文字列を受け入れます。パラメータの長さが指定より短い場合は、ゼロが埋め込まれます。たとえば、 &lt;code&gt;b'salt'&lt;/code&gt; と &lt;code&gt;b'salt\x00'&lt;/code&gt; は同じ値です。（これは&lt;em&gt;keyに&lt;/em&gt;は当てはまりません。）</target>
        </trans-unit>
        <trans-unit id="cd2ef75abf83ba49f622d80373a85346c04a5b37" translate="yes" xml:space="preserve">
          <source>BLAKE2 supports &lt;strong&gt;keyed mode&lt;/strong&gt; (a faster and simpler replacement for &lt;a href=&quot;https://en.wikipedia.org/wiki/Hash-based_message_authentication_code&quot;&gt;HMAC&lt;/a&gt;), &lt;strong&gt;salted hashing&lt;/strong&gt;, &lt;strong&gt;personalization&lt;/strong&gt;, and &lt;strong&gt;tree hashing&lt;/strong&gt;.</source>
          <target state="translated">BLAKE2は、&lt;strong&gt;キー付きモード&lt;/strong&gt;（&lt;a href=&quot;https://en.wikipedia.org/wiki/Hash-based_message_authentication_code&quot;&gt;HMACの&lt;/a&gt;より高速で単純な置き換え）、ソルト&lt;strong&gt;ハッシュ&lt;/strong&gt;、&lt;strong&gt;パーソナライゼーション&lt;/strong&gt;、および&lt;strong&gt;ツリーハッシュを&lt;/strong&gt;サポートしてい&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="cc708fbeac5b1cf0a46d24793514cf456186e0b0" translate="yes" xml:space="preserve">
          <source>BLAKE2b</source>
          <target state="translated">BLAKE2b</target>
        </trans-unit>
        <trans-unit id="b5b58babc24a9c4ee1a0847d9544ddb7d16f7c8f" translate="yes" xml:space="preserve">
          <source>BLAKE2s</source>
          <target state="translated">BLAKE2s</target>
        </trans-unit>
        <trans-unit id="e0e381dd5fc1fcdbadce37e6a061ba49795a568d" translate="yes" xml:space="preserve">
          <source>BMP files</source>
          <target state="translated">BMPファイル</target>
        </trans-unit>
        <trans-unit id="a42a05330f8bf46c41ac1665544187ff109c2243" translate="yes" xml:space="preserve">
          <source>Babyl is a single-file mailbox format used by the Rmail mail user agent included with Emacs. The beginning of a message is indicated by a line containing the two characters Control-Underscore (&lt;code&gt;'\037'&lt;/code&gt;) and Control-L (&lt;code&gt;'\014'&lt;/code&gt;). The end of a message is indicated by the start of the next message or, in the case of the last message, a line containing a Control-Underscore (&lt;code&gt;'\037'&lt;/code&gt;) character.</source>
          <target state="translated">Babylは、Emacsに含まれているRmailメールユーザーエージェントによって使用される単一ファイルのメールボックス形式です。メッセージの始まりは、Control-Underscore（ &lt;code&gt;'\037'&lt;/code&gt; ）とControl-L（ &lt;code&gt;'\014'&lt;/code&gt; ）の2文字を含む行で示されます。メッセージの終わりは、次のメッセージの始まり、または最後のメッセージの場合は、Control-Underscore（ &lt;code&gt;'\037'&lt;/code&gt; ）文字を含む行によって示されます。</target>
        </trans-unit>
        <trans-unit id="51e1b906cbdb74be5ef8d171c417a6f96c704e55" translate="yes" xml:space="preserve">
          <source>Back tab</source>
          <target state="translated">バックタブ</target>
        </trans-unit>
        <trans-unit id="fcf84c7c42731b104d6bb1ee61a75ed5dec2fca1" translate="yes" xml:space="preserve">
          <source>Back up your cookies before saving if you have cookies whose loss / corruption would be inconvenient (there are some subtleties which may lead to slight changes in the file over a load / save round-trip).</source>
          <target state="translated">クッキーの紛失や破損が不便な場合は、保存する前にクッキーをバックアップしてください(ロード/保存の往復でファイルにわずかな変化が生じる可能性がある微妙な点があります)。</target>
        </trans-unit>
        <trans-unit id="f7cabb8d741c7dccd3373c3e1b45a4517c4bc9a5" translate="yes" xml:space="preserve">
          <source>Backend function used by &lt;a href=&quot;#curses.resizeterm&quot;&gt;&lt;code&gt;resizeterm()&lt;/code&gt;&lt;/a&gt;, performing most of the work; when resizing the windows, &lt;a href=&quot;#curses.resize_term&quot;&gt;&lt;code&gt;resize_term()&lt;/code&gt;&lt;/a&gt; blank-fills the areas that are extended. The calling application should fill in these areas with appropriate data. The &lt;code&gt;resize_term()&lt;/code&gt; function attempts to resize all windows. However, due to the calling convention of pads, it is not possible to resize these without additional interaction with the application.</source>
          <target state="translated">ほとんどの作業を実行する&lt;a href=&quot;#curses.resizeterm&quot;&gt; &lt;code&gt;resizeterm()&lt;/code&gt; &lt;/a&gt;によって使用されるバックエンド関数。ウィンドウのサイズを変更すると、&lt;a href=&quot;#curses.resize_term&quot;&gt; &lt;code&gt;resize_term()&lt;/code&gt; &lt;/a&gt;は拡張された領域を空白で埋めます。呼び出し側アプリケーションは、これらの領域に適切なデータを入力する必要があります。 &lt;code&gt;resize_term()&lt;/code&gt; 関数の試みは、すべてのウィンドウのサイズを変更します。ただし、パッドの呼び出し規約により、アプリケーションとの追加の対話なしにこれらのサイズを変更することはできません。</target>
        </trans-unit>
        <trans-unit id="ad8d0fed9a547cc64ffb221201642666f0011ab4" translate="yes" xml:space="preserve">
          <source>Background, details, hints, tips and caveats</source>
          <target state="translated">背景、詳細、ヒント、ヒント、注意点</target>
        </trans-unit>
        <trans-unit id="d761e5a62561f09ed0d44ad1cb46328e1f217a6f" translate="yes" xml:space="preserve">
          <source>Backslashes are interpreted literally, unless they immediately precede a double quotation mark.</source>
          <target state="translated">バックスラッシュは、ダブルクォーテーションマークの直前にない限り、文字通りに解釈されます。</target>
        </trans-unit>
        <trans-unit id="88d130a66de8e5db01660642d9f23e1f0eef97dd" translate="yes" xml:space="preserve">
          <source>Backspace</source>
          <target state="translated">Backspace</target>
        </trans-unit>
        <trans-unit id="a3b4e1ecc274bf718cbbd8a1a3fe637f6e1d74f9" translate="yes" xml:space="preserve">
          <source>Backspace (unreliable)</source>
          <target state="translated">バックスペース(信頼性が低い</target>
        </trans-unit>
        <trans-unit id="e55f2cbe5dc4e91bd91593c8be3a8399315bbfdf" translate="yes" xml:space="preserve">
          <source>Backward-compatible usage:</source>
          <target state="translated">下位互換性のある使い方。</target>
        </trans-unit>
        <trans-unit id="1afefdad8f394c65ed6d000a865d699a38489c6f" translate="yes" xml:space="preserve">
          <source>Bad address</source>
          <target state="translated">不良アドレス</target>
        </trans-unit>
        <trans-unit id="becfc2da6183284441f36b6385c24b70a600038b" translate="yes" xml:space="preserve">
          <source>Bad file descriptor error example</source>
          <target state="translated">不良ファイル記述子エラーの例</target>
        </trans-unit>
        <trans-unit id="a9ac5297b2f804cdafa5d88f5e271e340ba5cf37" translate="yes" xml:space="preserve">
          <source>Bad file number</source>
          <target state="translated">不良ファイル番号</target>
        </trans-unit>
        <trans-unit id="d42cb962824573639b58c8ac6238174cbbe0902e" translate="yes" xml:space="preserve">
          <source>Bad font file format</source>
          <target state="translated">フォントファイルのフォーマットが悪い</target>
        </trans-unit>
        <trans-unit id="09b7225a7007de0840d3002393babbaf7c304ea8" translate="yes" xml:space="preserve">
          <source>Baltic languages</source>
          <target state="translated">バルト語族</target>
        </trans-unit>
        <trans-unit id="5e5a05a8b84deb1f27d7d9a68b519e2daa6a3749" translate="yes" xml:space="preserve">
          <source>Barrier Objects</source>
          <target state="translated">バリアオブジェクト</target>
        </trans-unit>
        <trans-unit id="c5376071164581eb584cba9b3620cf0285ee49f3" translate="yes" xml:space="preserve">
          <source>Barry Warsaw</source>
          <target state="translated">バリー・ワルソー</target>
        </trans-unit>
        <trans-unit id="cbfa89884cf762b2c8452214a9cb7c8b56848102" translate="yes" xml:space="preserve">
          <source>Base Protocol</source>
          <target state="translated">ベースプロトコル</target>
        </trans-unit>
        <trans-unit id="e7847ef64ed125924cd719af4769f2b49be1f954" translate="yes" xml:space="preserve">
          <source>Base Protocols</source>
          <target state="translated">ベースプロトコル</target>
        </trans-unit>
        <trans-unit id="b1fa70ba520aae580db170cd80267cedd66c66af" translate="yes" xml:space="preserve">
          <source>Base Transport</source>
          <target state="translated">ベーストランスポート</target>
        </trans-unit>
        <trans-unit id="0f7c08675f792982cba4bf468bb32f3974d128d6" translate="yes" xml:space="preserve">
          <source>Base category for warnings about deprecated features when those warnings are intended for end users of applications that are written in Python.</source>
          <target state="translated">Python で書かれたアプリケーションのエンドユーザを対象とした、非推奨機能に関する警告のための基本カテゴリです。</target>
        </trans-unit>
        <trans-unit id="ded4acb00e3e9a0e2c6d819d2be38745cb197828" translate="yes" xml:space="preserve">
          <source>Base category for warnings about deprecated features when those warnings are intended for other Python developers (ignored by default, unless triggered by code in &lt;code&gt;__main__&lt;/code&gt;).</source>
          <target state="translated">これらの警告が他のPython開発者向けである場合の非推奨機能に関する警告の基本カテゴリ（ &lt;code&gt;__main__&lt;/code&gt; のコードによってトリガーされない限り、デフォルトでは無視されます）。</target>
        </trans-unit>
        <trans-unit id="aecd2a13287ac24c073616d7be9ca1bac4b820e3" translate="yes" xml:space="preserve">
          <source>Base category for warnings about dubious runtime features.</source>
          <target state="translated">怪しげなランタイム機能に関する警告の基本カテゴリ。</target>
        </trans-unit>
        <trans-unit id="adbf72d780c57a442a1d40e971f0bafb4ba000b7" translate="yes" xml:space="preserve">
          <source>Base category for warnings about dubious syntactic features.</source>
          <target state="translated">怪しげな構文的特徴に関する警告の基本カテゴリ。</target>
        </trans-unit>
        <trans-unit id="b961e19180b568120a243fe8a965f885400f3963" translate="yes" xml:space="preserve">
          <source>Base category for warnings about features that will be deprecated in the future (ignored by default).</source>
          <target state="translated">将来的に廃止予定の機能に関する警告の基本カテゴリ (デフォルトでは無視されます)。</target>
        </trans-unit>
        <trans-unit id="271b2d511f8d7cb0d37d60a7165a2a6be096fb2d" translate="yes" xml:space="preserve">
          <source>Base category for warnings related to &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;stdtypes#bytearray&quot;&gt; &lt;code&gt;bytearray&lt;/code&gt; に&lt;/a&gt;関連する警告の基本カテゴリ。</target>
        </trans-unit>
        <trans-unit id="e56c87eafe934bdffdcf80bbda3a3f1bafd3951a" translate="yes" xml:space="preserve">
          <source>Base category for warnings related to Unicode.</source>
          <target state="translated">Unicode に関連する警告の基本カテゴリ。</target>
        </trans-unit>
        <trans-unit id="8aca1ccdde79b14ca072dd8196fe1a8eaa20e816" translate="yes" xml:space="preserve">
          <source>Base category for warnings related to resource usage.</source>
          <target state="translated">リソースの使用に関する警告の基本カテゴリです。</target>
        </trans-unit>
        <trans-unit id="9db12d86e6ccca93eb8b1b63e07ce33c90af51f7" translate="yes" xml:space="preserve">
          <source>Base category for warnings triggered during the process of importing a module (ignored by default).</source>
          <target state="translated">モジュールのインポート中に発生する警告の基本カテゴリ (デフォルトでは無視されます)。</target>
        </trans-unit>
        <trans-unit id="62c7f7b7e6449dee51da32f88ce059c9f0a6e133" translate="yes" xml:space="preserve">
          <source>Base class for C callable foreign functions.</source>
          <target state="translated">C言語の呼び出し可能な外部関数の基底クラスです。</target>
        </trans-unit>
        <trans-unit id="93b278fdd49d1caec7588ea1619ab8693a3d6aea" translate="yes" xml:space="preserve">
          <source>Base class for all &lt;a href=&quot;#module-tarfile&quot;&gt;&lt;code&gt;tarfile&lt;/code&gt;&lt;/a&gt; exceptions.</source>
          <target state="translated">すべての&lt;a href=&quot;#module-tarfile&quot;&gt; &lt;code&gt;tarfile&lt;/code&gt; &lt;/a&gt;例外の基本クラス。</target>
        </trans-unit>
        <trans-unit id="83a2ff960e585bade07c251fc6907e1766bfdcea" translate="yes" xml:space="preserve">
          <source>Base class for all exceptions that include an SMTP error code. These exceptions are generated in some instances when the SMTP server returns an error code. The error code is stored in the &lt;code&gt;smtp_code&lt;/code&gt; attribute of the error, and the &lt;code&gt;smtp_error&lt;/code&gt; attribute is set to the error message.</source>
          <target state="translated">SMTPエラーコードを含むすべての例外の基本クラス。これらの例外は、SMTPサーバーがエラーコードを返す場合に生成されます。エラーコードが中に記憶されている &lt;code&gt;smtp_code&lt;/code&gt; の誤差の属性、及び &lt;code&gt;smtp_error&lt;/code&gt; の属性は、エラー・メッセージに設定されています。</target>
        </trans-unit>
        <trans-unit id="bc4d1cfe65641ccd75006d6cb0c5273ca53b06fc" translate="yes" xml:space="preserve">
          <source>Base class for all other &lt;a href=&quot;#module-configparser&quot;&gt;&lt;code&gt;configparser&lt;/code&gt;&lt;/a&gt; exceptions.</source>
          <target state="translated">他のすべての&lt;a href=&quot;#module-configparser&quot;&gt; &lt;code&gt;configparser&lt;/code&gt; &lt;/a&gt;例外の基本クラス。</target>
        </trans-unit>
        <trans-unit id="2e79acf9343097cfca004b026b1e289b6e81d9e7" translate="yes" xml:space="preserve">
          <source>Base class for all other exceptions from this module.</source>
          <target state="translated">このモジュールの他のすべての例外の基底クラス。</target>
        </trans-unit>
        <trans-unit id="0094874eb16d8f35c44e0f11faca44e7bc129804" translate="yes" xml:space="preserve">
          <source>Base class for all transports. Contains methods that all asyncio transports share.</source>
          <target state="translated">すべてのトランスポートの基底クラス。すべての asyncio トランスポートが共有するメソッドを含みます。</target>
        </trans-unit>
        <trans-unit id="bc8dc0e5d7f463652bc46330f069074014733a53" translate="yes" xml:space="preserve">
          <source>Base class for binary streams that support some kind of buffering. It inherits &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt;. There is no public constructor.</source>
          <target state="translated">ある種のバッファリングをサポートするバイナリストリームの基本クラス。&lt;a href=&quot;#io.IOBase&quot;&gt; &lt;code&gt;IOBase&lt;/code&gt; を&lt;/a&gt;継承しています。パブリックコンストラクターはありません。</target>
        </trans-unit>
        <trans-unit id="111505a2e2f1c5d720f4dbb20b18464824cc26d2" translate="yes" xml:space="preserve">
          <source>Base class for content managers. Provides the standard registry mechanisms to register converters between MIME content and other representations, as well as the &lt;code&gt;get_content&lt;/code&gt; and &lt;code&gt;set_content&lt;/code&gt; dispatch methods.</source>
          <target state="translated">コンテンツマネージャの基本クラス。MIMEコンテンツと他の表現の間の変換を登録するための標準レジストリ・メカニズム、ならびに提供 &lt;code&gt;get_content&lt;/code&gt; と &lt;code&gt;set_content&lt;/code&gt; 発送方法。</target>
        </trans-unit>
        <trans-unit id="77e0fa5fb9d9cb92c49e07f64d986e277b736562" translate="yes" xml:space="preserve">
          <source>Base class for creating enumerated constants that are also subclasses of &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; の&lt;/a&gt;サブクラスでもある列挙型定数を作成するための基本クラス。</target>
        </trans-unit>
        <trans-unit id="bc4710022b4a59f7309e498f9784b89980698d53" translate="yes" xml:space="preserve">
          <source>Base class for creating enumerated constants that can be combined using the bitwise operations without losing their &lt;a href=&quot;#enum.Flag&quot;&gt;&lt;code&gt;Flag&lt;/code&gt;&lt;/a&gt; membership.</source>
          <target state="translated">&lt;a href=&quot;#enum.Flag&quot;&gt; &lt;code&gt;Flag&lt;/code&gt; &lt;/a&gt;メンバーシップを失うことなくビット演算を使用して組み合わせることができる列挙定数を作成するための基本クラス。</target>
        </trans-unit>
        <trans-unit id="8067a9d2bd64f504a0ed0bf642eba1d2667cdb0d" translate="yes" xml:space="preserve">
          <source>Base class for creating enumerated constants that can be combined using the bitwise operators without losing their &lt;a href=&quot;#enum.IntFlag&quot;&gt;&lt;code&gt;IntFlag&lt;/code&gt;&lt;/a&gt; membership. &lt;a href=&quot;#enum.IntFlag&quot;&gt;&lt;code&gt;IntFlag&lt;/code&gt;&lt;/a&gt; members are also subclasses of &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#enum.IntFlag&quot;&gt; &lt;code&gt;IntFlag&lt;/code&gt; &lt;/a&gt;メンバーシップを失うことなくビットごとの演算子を使用して組み合わせることができる列挙定数を作成するための基本クラス。&lt;a href=&quot;#enum.IntFlag&quot;&gt; &lt;code&gt;IntFlag&lt;/code&gt; &lt;/a&gt;メンバーも&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; の&lt;/a&gt;サブクラスです。</target>
        </trans-unit>
        <trans-unit id="49651f12dd69e9fc5b9eb9a491dae1396c8f4820" translate="yes" xml:space="preserve">
          <source>Base class for creating enumerated constants. See section &lt;a href=&quot;#functional-api&quot;&gt;Functional API&lt;/a&gt; for an alternate construction syntax.</source>
          <target state="translated">列挙定数を作成するための基本クラス。代替の構文については、&lt;a href=&quot;#functional-api&quot;&gt;関数API&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c8496250f8d316f4c2fb71bb6afeaf2db8d55ba5" translate="yes" xml:space="preserve">
          <source>Base class for exceptions raised when problems occur performing string interpolation.</source>
          <target state="translated">文字列補間を行う際に問題が発生した場合に発生する例外の基底クラスです。</target>
        </trans-unit>
        <trans-unit id="7a8cc99e6dd0fa75e5d9d18d1e2f0b6d159ef64b" translate="yes" xml:space="preserve">
          <source>Base class for opening and reading URLs. Unless you need to support opening objects using schemes other than &lt;code&gt;http:&lt;/code&gt;, &lt;code&gt;ftp:&lt;/code&gt;, or &lt;code&gt;file:&lt;/code&gt;, you probably want to use &lt;a href=&quot;#urllib.request.FancyURLopener&quot;&gt;&lt;code&gt;FancyURLopener&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">URLを開いて読み取るための基本クラス。 &lt;code&gt;http:&lt;/code&gt; 、 &lt;code&gt;ftp:&lt;/code&gt; 、または &lt;code&gt;file:&lt;/code&gt; 以外のスキームを使用してオブジェクトを開くことをサポートする必要がない限り、おそらく&lt;a href=&quot;#urllib.request.FancyURLopener&quot;&gt; &lt;code&gt;FancyURLopener&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="aa942d873b8cc2045025e1cba883f43a926d1060" translate="yes" xml:space="preserve">
          <source>Base class for other signals and a subclass of &lt;a href=&quot;exceptions#ArithmeticError&quot;&gt;&lt;code&gt;ArithmeticError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">他の信号の基本クラスと&lt;a href=&quot;exceptions#ArithmeticError&quot;&gt; &lt;code&gt;ArithmeticError&lt;/code&gt; の&lt;/a&gt;サブクラス。</target>
        </trans-unit>
        <trans-unit id="d78011d81daf58732134a6e10362b07bb6ae789f" translate="yes" xml:space="preserve">
          <source>Base class for policy objects.</source>
          <target state="translated">ポリシーオブジェクトの基底クラス。</target>
        </trans-unit>
        <trans-unit id="37baa2206d896a594f1f8aa5a3db8477752589d1" translate="yes" xml:space="preserve">
          <source>Base class for protocol classes. Protocol classes are defined like this:</source>
          <target state="translated">プロトコルクラスの基底クラス。プロトコルクラスはこのように定義されています。</target>
        </trans-unit>
        <trans-unit id="6a52a47b306d18d17af6700a5e02d334eea68489" translate="yes" xml:space="preserve">
          <source>Base class for raw binary I/O. It inherits &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt;. There is no public constructor.</source>
          <target state="translated">rawバイナリI / Oの基本クラス。&lt;a href=&quot;#io.IOBase&quot;&gt; &lt;code&gt;IOBase&lt;/code&gt; を&lt;/a&gt;継承しています。パブリックコンストラクターはありません。</target>
        </trans-unit>
        <trans-unit id="c30962a539a3522164dd18b568addcfb57b7dc0a" translate="yes" xml:space="preserve">
          <source>Base class for raw binary streams. It inherits &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt;. There is no public constructor.</source>
          <target state="translated">生のバイナリストリームの基本クラス。&lt;a href=&quot;#io.IOBase&quot;&gt; &lt;code&gt;IOBase&lt;/code&gt; を&lt;/a&gt;継承します。パブリックコンストラクターはありません。</target>
        </trans-unit>
        <trans-unit id="ec5274c46b7e76247d7c11c675e64556818455ea" translate="yes" xml:space="preserve">
          <source>Base class for syntax errors related to incorrect indentation. This is a subclass of &lt;a href=&quot;#SyntaxError&quot;&gt;&lt;code&gt;SyntaxError&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">不適切なインデントに関連する構文エラーの基本クラス。これは&lt;a href=&quot;#SyntaxError&quot;&gt; &lt;code&gt;SyntaxError&lt;/code&gt; の&lt;/a&gt;サブクラスです。</target>
        </trans-unit>
        <trans-unit id="f8034f1f619a25403ea22ca32afe23c323c69db0" translate="yes" xml:space="preserve">
          <source>Base class for text streams. This class provides a character and line based interface to stream I/O. It inherits &lt;a href=&quot;#io.IOBase&quot;&gt;&lt;code&gt;IOBase&lt;/code&gt;&lt;/a&gt;. There is no public constructor.</source>
          <target state="translated">テキストストリームの基本クラス。このクラスは、ストリームI / Oに文字と行ベースのインターフェースを提供します。&lt;a href=&quot;#io.IOBase&quot;&gt; &lt;code&gt;IOBase&lt;/code&gt; を&lt;/a&gt;継承しています。パブリックコンストラクターはありません。</target>
        </trans-unit>
        <trans-unit id="115592b440ded17229a2be8652ec1583576bd6be" translate="yes" xml:space="preserve">
          <source>Base class for the dialogs defined in the other modules listed here.</source>
          <target state="translated">ここにリストされている他のモジュールで定義されているダイアログの基底クラス。</target>
        </trans-unit>
        <trans-unit id="1a767590a449f53c349f02ce7bd8efd407590883" translate="yes" xml:space="preserve">
          <source>Base class for warning categories.</source>
          <target state="translated">警告カテゴリの基底クラス。</target>
        </trans-unit>
        <trans-unit id="30e62bee9558e07fac538cacc23a8c4434dcd550" translate="yes" xml:space="preserve">
          <source>Base class for warnings about deprecated features when those warnings are intended for end users of applications that are written in Python.</source>
          <target state="translated">Python で書かれたアプリケーションのエンドユーザを対象とした、非推奨の機能に関する警告のための基底クラスです。</target>
        </trans-unit>
        <trans-unit id="bef4dbd3cc05db0caaef10bd33d535aef6000686" translate="yes" xml:space="preserve">
          <source>Base class for warnings about deprecated features when those warnings are intended for other Python developers.</source>
          <target state="translated">他の Python 開発者向けに非推奨の機能に関する警告を表示するための基底クラスです。</target>
        </trans-unit>
        <trans-unit id="1d911ad966f332393c3708556614e73ed1cbd284" translate="yes" xml:space="preserve">
          <source>Base class for warnings about dubious runtime behavior.</source>
          <target state="translated">疑わしいランタイム動作に関する警告のための基底クラス。</target>
        </trans-unit>
        <trans-unit id="ed11da738626db6bc66dc76605890a35049a6b1f" translate="yes" xml:space="preserve">
          <source>Base class for warnings about dubious syntax.</source>
          <target state="translated">怪しげな構文に関する警告のための基底クラス。</target>
        </trans-unit>
        <trans-unit id="1e39f8ab9b8f97932eee2df10cc6b10cd8aec138" translate="yes" xml:space="preserve">
          <source>Base class for warnings about features which are obsolete and expected to be deprecated in the future, but are not deprecated at the moment.</source>
          <target state="translated">将来的に廃止されることが予想されるが、現時点では廃止されていない機能についての警告を行うための基底クラスです。</target>
        </trans-unit>
        <trans-unit id="9dda81dec15bfcd224d1e4d932c986e759a07e6a" translate="yes" xml:space="preserve">
          <source>Base class for warnings about probable mistakes in module imports.</source>
          <target state="translated">モジュールのインポートにおける間違いの可能性を警告するための基底クラスです。</target>
        </trans-unit>
        <trans-unit id="a020b0a894b4052b6ee113d3143b9d2aef84bb79" translate="yes" xml:space="preserve">
          <source>Base class for warnings generated by user code.</source>
          <target state="translated">ユーザーコードによって生成される警告の基底クラス。</target>
        </trans-unit>
        <trans-unit id="b307ddcc59f65f2e18cfc4a546c8cbf5e9483f01" translate="yes" xml:space="preserve">
          <source>Base class for warnings related to &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stdtypes#bytearray&quot;&gt;&lt;code&gt;bytearray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;stdtypes#bytearray&quot;&gt; &lt;code&gt;bytearray&lt;/code&gt; に&lt;/a&gt;関連する警告の基本クラス。</target>
        </trans-unit>
        <trans-unit id="14f1306f10d78b1a318d2d99f7741e21a1990aab" translate="yes" xml:space="preserve">
          <source>Base class for warnings related to Unicode.</source>
          <target state="translated">Unicode に関連する警告の基底クラス。</target>
        </trans-unit>
        <trans-unit id="63ad316f901fe1156baedc6cf362aaa798a4fe84" translate="yes" xml:space="preserve">
          <source>Base class for warnings related to resource usage.</source>
          <target state="translated">リソースの使用に関する警告の基底クラス。</target>
        </trans-unit>
        <trans-unit id="d1c1a39f6eb8799e6d29048479dd3cf5cc598666" translate="yes" xml:space="preserve">
          <source>Base class for warnings related to resource usage. Ignored by the default warning filters.</source>
          <target state="translated">リソースの使用に関する警告の基底クラス。デフォルトの警告フィルタでは無視されます。</target>
        </trans-unit>
        <trans-unit id="b1dd274748a920e7e6b6531ecc973725498ebb54" translate="yes" xml:space="preserve">
          <source>Base class of the dialog controls. &lt;em&gt;dlg&lt;/em&gt; is the dialog object the control belongs to, and &lt;em&gt;name&lt;/em&gt; is the control&amp;rsquo;s name.</source>
          <target state="translated">ダイアログコントロールの基本クラス。&lt;em&gt;dlg&lt;/em&gt;はコントロールが属するダイアログオブジェクトで、&lt;em&gt;name&lt;/em&gt;はコントロールの名前です。</target>
        </trans-unit>
        <trans-unit id="8f20f1270a9dcc163b4e1c85af830ebcf1500698" translate="yes" xml:space="preserve">
          <source>Base class which can be inherited by SAX parsers.</source>
          <target state="translated">SAX パーサが継承できる基底クラス。</target>
        </trans-unit>
        <trans-unit id="597d1d5f179914ea7470a3760bd8ee3a2400c1bc" translate="yes" xml:space="preserve">
          <source>Base classes</source>
          <target state="translated">基底クラス</target>
        </trans-unit>
        <trans-unit id="f532cd83f6f9947116baa3849ec23355cdfb324d" translate="yes" xml:space="preserve">
          <source>Base exception class used for all specific DOM exceptions. This exception class cannot be directly instantiated.</source>
          <target state="translated">すべての特定の DOM の例外に使用される基本例外クラス。この例外クラスを直接インスタンス化することはできません。</target>
        </trans-unit>
        <trans-unit id="f00864be99f44fa68097e7a11c50dc2553483317" translate="yes" xml:space="preserve">
          <source>Base interface for most objects in a document.</source>
          <target state="translated">ドキュメント内のほとんどのオブジェクトのための基本インターフェイス。</target>
        </trans-unit>
        <trans-unit id="0691eb22ac03b573f0c69a50a9e4abca05842012" translate="yes" xml:space="preserve">
          <source>Base protocol with methods that all protocols share.</source>
          <target state="translated">すべてのプロトコルが共有するメソッドを持つ基本プロトコル。</target>
        </trans-unit>
        <trans-unit id="0433583846f35c2ba0aec03a821f97c49d6fc91d" translate="yes" xml:space="preserve">
          <source>BaseException</source>
          <target state="translated">BaseException</target>
        </trans-unit>
        <trans-unit id="2139b25cc7ba47829b2613ecd5640b728063f573" translate="yes" xml:space="preserve">
          <source>BaseException.args</source>
          <target state="translated">BaseException.args</target>
        </trans-unit>
        <trans-unit id="f8a3365a764654373607fbb6ccc5794d20c265b0" translate="yes" xml:space="preserve">
          <source>BaseException.with_traceback()</source>
          <target state="translated">BaseException.with_traceback()</target>
        </trans-unit>
        <trans-unit id="74d736dbe7da7ac2d79279fada28cb6cbb8192ea" translate="yes" xml:space="preserve">
          <source>BaseHandler Objects</source>
          <target state="translated">BaseHandler オブジェクト</target>
        </trans-unit>
        <trans-unit id="34ce97d8702b53323f2a4a2c72c66dc5a0eb4e72" translate="yes" xml:space="preserve">
          <source>BaseRotatingHandler</source>
          <target state="translated">BaseRotatingHandler</target>
        </trans-unit>
        <trans-unit id="7348670742e76aaa11d877df8fca9b83a11d1757" translate="yes" xml:space="preserve">
          <source>Basic API</source>
          <target state="translated">基本API</target>
        </trans-unit>
        <trans-unit id="dac6b24f78471a132bc9a7ec7774530351b54fb0" translate="yes" xml:space="preserve">
          <source>Basic Example</source>
          <target state="translated">基本的な例</target>
        </trans-unit>
        <trans-unit id="9a289e7dff9101f26b8dc18725557c4f9fdf82bd" translate="yes" xml:space="preserve">
          <source>Basic Examples</source>
          <target state="translated">基本的な例</target>
        </trans-unit>
        <trans-unit id="0d3f6e8e2e15cd0179d1216f1c988e44f90d868e" translate="yes" xml:space="preserve">
          <source>Basic Tutorial</source>
          <target state="translated">基本的なチュートリアル</target>
        </trans-unit>
        <trans-unit id="b20cbc384159fd820ed034fd3615298ec09f5902" translate="yes" xml:space="preserve">
          <source>Basic Usage</source>
          <target state="translated">基本的な使い方</target>
        </trans-unit>
        <trans-unit id="03cdc9f64fd1c085bb10854b62f123e70ce40ba7" translate="yes" xml:space="preserve">
          <source>Basic Widgets</source>
          <target state="translated">基本的なウィジェット</target>
        </trans-unit>
        <trans-unit id="af90dc70fae02c63e1b5bfb27dfff83393f621b5" translate="yes" xml:space="preserve">
          <source>Basic dialogs and convenience functions.</source>
          <target state="translated">基本的なダイアログと便利な機能</target>
        </trans-unit>
        <trans-unit id="20b19d89ef0aed3f2d4f1afed1d3f801c6b85aa5" translate="yes" xml:space="preserve">
          <source>Basic example</source>
          <target state="translated">基本的な例</target>
        </trans-unit>
        <trans-unit id="cfd84c756956f6869f891f756d2ed679a18b4696" translate="yes" xml:space="preserve">
          <source>Basic examples:</source>
          <target state="translated">基本的な例。</target>
        </trans-unit>
        <trans-unit id="c58a44745c80d118117b0a04466e564264a9e678" translate="yes" xml:space="preserve">
          <source>Basic interface for resolving entities. If you create an object implementing this interface, then register the object with your Parser, the parser will call the method in your object to resolve all external entities.</source>
          <target state="translated">実体を解決するための基本的なインターフェースです。このインターフェイスを実装したオブジェクトを作成し、そのオブジェクトをパーサーに登録すると、パーサーはオブジェクト内のメソッドを呼び出して、すべての外部エンティティを解決します。</target>
        </trans-unit>
        <trans-unit id="dc42d64e6761d3023d0a23567aa37e8faeed769a" translate="yes" xml:space="preserve">
          <source>Basic skipping looks like this:</source>
          <target state="translated">基本的なスキップはこんな感じです。</target>
        </trans-unit>
        <trans-unit id="955f12253b570691dddd89d6664ff86c6ffea525" translate="yes" xml:space="preserve">
          <source>Basic turtle commands such as &lt;a href=&quot;turtle#turtle.forward&quot;&gt;&lt;code&gt;forward()&lt;/code&gt;&lt;/a&gt; are added to a &lt;a href=&quot;#cmd.Cmd&quot;&gt;&lt;code&gt;Cmd&lt;/code&gt;&lt;/a&gt; subclass with method named &lt;code&gt;do_forward()&lt;/code&gt;. The argument is converted to a number and dispatched to the turtle module. The docstring is used in the help utility provided by the shell.</source>
          <target state="translated">&lt;a href=&quot;turtle#turtle.forward&quot;&gt; &lt;code&gt;forward()&lt;/code&gt; &lt;/a&gt;などの基本的なタートルコマンドは、 &lt;code&gt;do_forward()&lt;/code&gt; という名前のメソッドで&lt;a href=&quot;#cmd.Cmd&quot;&gt; &lt;code&gt;Cmd&lt;/code&gt; &lt;/a&gt;サブクラスに追加されます。引数は数値に変換され、タートルモジュールにディスパッチされます。docstringは、シェルが提供するヘルプユーティリティで使用されます。</target>
        </trans-unit>
        <trans-unit id="168929183d2470cb5fd9c8ab272eed288ccb698d" translate="yes" xml:space="preserve">
          <source>Basic use</source>
          <target state="translated">基本的な使い方</target>
        </trans-unit>
        <trans-unit id="de3816b07b2c1c67b6c5d0b0c0ef9af019f07757" translate="yes" xml:space="preserve">
          <source>Be aware that setting &lt;em&gt;followlinks&lt;/em&gt; to &lt;code&gt;True&lt;/code&gt; can lead to infinite recursion if a link points to a parent directory of itself. &lt;a href=&quot;#os.walk&quot;&gt;&lt;code&gt;walk()&lt;/code&gt;&lt;/a&gt; does not keep track of the directories it visited already.</source>
          <target state="translated">&lt;em&gt;followlinks&lt;/em&gt;を &lt;code&gt;True&lt;/code&gt; に設定すると、リンクがそれ自体の親ディレクトリを指している場合、無限再帰が&lt;em&gt;発生&lt;/em&gt;する可能性があることに注意してください。&lt;a href=&quot;#os.walk&quot;&gt; &lt;code&gt;walk()&lt;/code&gt; &lt;/a&gt;は、すでにアクセスしたディレクトリを追跡しません。</target>
        </trans-unit>
        <trans-unit id="c4d410bcf0f1e8b0447d1481b24eeff8e98f8899" translate="yes" xml:space="preserve">
          <source>Be careful to not use this module where deadlock might occur from a thread being created that blocks waiting for another thread to be created. This often occurs with blocking I/O.</source>
          <target state="translated">このモジュールは、別のスレッドが作成されるのをブロックして待っているスレッドが作成されることでデッドロックが発生する可能性がある場合には使用しないように注意してください。これは、I/O のブロッキングでよく発生します。</target>
        </trans-unit>
        <trans-unit id="d1cc029ce668972e8e992f6e3aa06dc274e72815" translate="yes" xml:space="preserve">
          <source>Be forewarned about how &lt;code&gt;init=False&lt;/code&gt; fields work during a call to &lt;a href=&quot;#dataclasses.replace&quot;&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/a&gt;. They are not copied from the source object, but rather are initialized in &lt;code&gt;__post_init__()&lt;/code&gt;, if they&amp;rsquo;re initialized at all. It is expected that &lt;code&gt;init=False&lt;/code&gt; fields will be rarely and judiciously used. If they are used, it might be wise to have alternate class constructors, or perhaps a custom &lt;code&gt;replace()&lt;/code&gt; (or similarly named) method which handles instance copying.</source>
          <target state="translated">&lt;a href=&quot;#dataclasses.replace&quot;&gt; &lt;code&gt;replace()&lt;/code&gt; の&lt;/a&gt;呼び出し中に &lt;code&gt;init=False&lt;/code&gt; フィールドがどのように機能するかについては事前に注意してください。これらはソースオブジェクトからコピーされませんが、 &lt;code&gt;__post_init__()&lt;/code&gt; で初期化されます（まったく初期化されている場合）。ことが期待されている &lt;code&gt;init=False&lt;/code&gt; フィールドは滅多と慎重に使用されません。それらが使用される場合、代替のクラスコンストラクター、またはインスタンスのコピーを処理するカスタムの &lt;code&gt;replace()&lt;/code&gt; （または同様の名前が付けられた）メソッドを使用するのが賢明かもしれません。</target>
        </trans-unit>
        <trans-unit id="abae3c10b04d3f45674d8d84138847d156e5d77c" translate="yes" xml:space="preserve">
          <source>Be very cautious when modifying mailboxes that might be simultaneously changed by some other process. The safest mailbox format to use for such tasks is Maildir; try to avoid using single-file formats such as mbox for concurrent writing. If you&amp;rsquo;re modifying a mailbox, you &lt;em&gt;must&lt;/em&gt; lock it by calling the &lt;a href=&quot;#mailbox.Mailbox.lock&quot;&gt;&lt;code&gt;lock()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#mailbox.Mailbox.unlock&quot;&gt;&lt;code&gt;unlock()&lt;/code&gt;&lt;/a&gt; methods &lt;em&gt;before&lt;/em&gt; reading any messages in the file or making any changes by adding or deleting a message. Failing to lock the mailbox runs the risk of losing messages or corrupting the entire mailbox.</source>
          <target state="translated">他のプロセスによって同時に変更される可能性のあるメールボックスを変更する場合は、十分に注意してください。このようなタスクに使用する最も安全なメールボックス形式はMaildirです。同時書き込みにmboxなどの単一ファイル形式を使用しないようにしてください。メールボックスを変更する場合は、ファイル内のメッセージを読み取る&lt;em&gt;前&lt;/em&gt;に、またはメッセージを追加または削除して変更を加える&lt;em&gt;前に&lt;/em&gt;、&lt;a href=&quot;#mailbox.Mailbox.lock&quot;&gt; &lt;code&gt;lock()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#mailbox.Mailbox.unlock&quot;&gt; &lt;code&gt;unlock()&lt;/code&gt; &lt;/a&gt;メソッドおよびunlock（）メソッドを呼び出してメールボックスをロックする&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。メールボックスをロックしないと、メッセージが失われたり、メールボックス全体が破損したりするリスクがあります。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c0c1fe83f49ee94713ba4bebb01d2337218d28eb" translate="yes" xml:space="preserve">
          <source>Be warned that you should calibrate the profiler class for the timer function that you choose (see &lt;a href=&quot;#profile-calibration&quot;&gt;Calibration&lt;/a&gt;). For most machines, a timer that returns a lone integer value will provide the best results in terms of low overhead during profiling. (&lt;a href=&quot;os#os.times&quot;&gt;&lt;code&gt;os.times()&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;pretty&lt;/em&gt; bad, as it returns a tuple of floating point values). If you want to substitute a better timer in the cleanest fashion, derive a class and hardwire a replacement dispatch method that best handles your timer call, along with the appropriate calibration constant.</source>
          <target state="translated">（参照、あなたが選択したことをタイマ機能のためのプロファイラクラスを校正する必要があることに注意して&lt;a href=&quot;#profile-calibration&quot;&gt;キャリブレーションを&lt;/a&gt;）。ほとんどのマシンでは、唯一の整数値を返すタイマーが、プロファイリング中のオーバーヘッドが少ないという点で最良の結果を提供します。 （&lt;a href=&quot;os#os.times&quot;&gt; &lt;code&gt;os.times()&lt;/code&gt; &lt;/a&gt;は、浮動小数点値のタプルを返すため、&lt;em&gt;かなり&lt;/em&gt;悪いです）。より適切なタイマーを最もきれいな方法で置き換えたい場合は、クラスを派生させ、タイマー呼び出しを適切に処理する代替ディスパッチメソッドと適切なキャリブレーション定数をハードワイヤーします。</target>
        </trans-unit>
        <trans-unit id="fb941ef4dc684b044e6e45b9283386b1eb3e83df" translate="yes" xml:space="preserve">
          <source>Bear in mind that a process that has put items in a queue will wait before terminating until all the buffered items are fed by the &amp;ldquo;feeder&amp;rdquo; thread to the underlying pipe. (The child process can call the &lt;a href=&quot;#multiprocessing.Queue.cancel_join_thread&quot;&gt;&lt;code&gt;Queue.cancel_join_thread&lt;/code&gt;&lt;/a&gt; method of the queue to avoid this behaviour.)</source>
          <target state="translated">アイテムをキューに入れたプロセスは、すべてのバッファーされたアイテムが「フィーダー」スレッドによって基礎となるパイプに供給されるまで終了する前に待機することに注意してください。（子プロセスは、この動作を回避するためにキューの&lt;a href=&quot;#multiprocessing.Queue.cancel_join_thread&quot;&gt; &lt;code&gt;Queue.cancel_join_thread&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことができます。）</target>
        </trans-unit>
        <trans-unit id="5a4332bde329f74d1a7a1aff8d1cef2c7d17c810" translate="yes" xml:space="preserve">
          <source>Bear in mind that if code run in a child process tries to access a global variable, then the value it sees (if any) may not be the same as the value in the parent process at the time that &lt;a href=&quot;#multiprocessing.Process.start&quot;&gt;&lt;code&gt;Process.start&lt;/code&gt;&lt;/a&gt; was called.</source>
          <target state="translated">子プロセスで実行されているコードがグローバル変数にアクセスしようとすると、その変数に表示される値（ある場合）は、&lt;a href=&quot;#multiprocessing.Process.start&quot;&gt; &lt;code&gt;Process.start&lt;/code&gt; &lt;/a&gt;が呼び出されたときの親プロセスの値と同じにならない場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="10e62a51dfa0dc36185ec273da331d0a6fb29a35" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;#dir&quot;&gt;&lt;code&gt;dir()&lt;/code&gt;&lt;/a&gt; is supplied primarily as a convenience for use at an interactive prompt, it tries to supply an interesting set of names more than it tries to supply a rigorously or consistently defined set of names, and its detailed behavior may change across releases. For example, metaclass attributes are not in the result list when the argument is a class.</source>
          <target state="translated">ため&lt;a href=&quot;#dir&quot;&gt; &lt;code&gt;dir()&lt;/code&gt; &lt;/a&gt;対話プロンプトで使用するための便宜として主に供給され、それは名前の厳密または一貫して定義されたセットを提供しようとするよりも名前の興味深いセットを供給しようと、その詳細な動作は、リリース間で変更することができます。たとえば、引数がクラスの場合、メタクラス属性は結果リストに含まれません。</target>
        </trans-unit>
        <trans-unit id="0ed699fc6637c9326d06d5f91cf8cfe03647969a" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;#enum.IntFlag&quot;&gt;&lt;code&gt;IntFlag&lt;/code&gt;&lt;/a&gt; members are also subclasses of &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; they can be combined with them:</source>
          <target state="translated">&lt;a href=&quot;#enum.IntFlag&quot;&gt; &lt;code&gt;IntFlag&lt;/code&gt; &lt;/a&gt;メンバーは&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; の&lt;/a&gt;サブクラスでもあるため、それらを組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="af4876b04dc65b9b21062f7a28c0edf2c6a14336" translate="yes" xml:space="preserve">
          <source>Because Enums are used to represent constants we recommend using UPPER_CASE names for enum members, and will be using that style in our examples.</source>
          <target state="translated">Enumは定数を表すために使用されるので、enumのメンバにはUPPER_CASEの名前を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5676d312428ed566fc5e55055b04a8a487aa66cb" translate="yes" xml:space="preserve">
          <source>Because NIS exists only on Unix systems, this module is only available for Unix.</source>
          <target state="translated">NISはUnixシステム上にしか存在しないため、このモジュールはUnixでのみ利用可能です。</target>
        </trans-unit>
        <trans-unit id="449b33e822195d1cb40d26026e8bbadbe72c580f" translate="yes" xml:space="preserve">
          <source>Because all asyncio subprocess functions are asynchronous and asyncio provides many tools to work with such functions, it is easy to execute and monitor multiple subprocesses in parallel. It is indeed trivial to modify the above example to run several commands simultaneously:</source>
          <target state="translated">すべてのasyncioサブプロセス関数は非同期であり、asyncioはそのような関数を扱うための多くのツールを提供しているため、複数のサブプロセスを並列に実行したり監視したりすることは容易です。上の例を修正して、複数のコマンドを同時に実行することは本当に簡単です。</target>
        </trans-unit>
        <trans-unit id="cd024808dd20391db9a5d87efaaa473460d75e55" translate="yes" xml:space="preserve">
          <source>Because deep copy copies everything it may copy too much, such as data which is intended to be shared between copies.</source>
          <target state="translated">ディープコピーはすべてをコピーするので、コピー間で共有することを意図したデータなど、コピーしすぎる可能性があります。</target>
        </trans-unit>
        <trans-unit id="6fe4a8056160b609c3f4db4e7d117d78cac2ac63" translate="yes" xml:space="preserve">
          <source>Because it requires the &lt;a href=&quot;termios#module-termios&quot;&gt;&lt;code&gt;termios&lt;/code&gt;&lt;/a&gt; module, it will work only on Unix.</source>
          <target state="translated">&lt;a href=&quot;termios#module-termios&quot;&gt; &lt;code&gt;termios&lt;/code&gt; &lt;/a&gt;モジュールが必要なため、Unixでのみ機能します。</target>
        </trans-unit>
        <trans-unit id="512d82a1a965117bb846701b126fb31120198553" translate="yes" xml:space="preserve">
          <source>Because it&amp;rsquo;s so flexible, &lt;a href=&quot;#xml.etree.ElementTree.XMLPullParser&quot;&gt;&lt;code&gt;XMLPullParser&lt;/code&gt;&lt;/a&gt; can be inconvenient to use for simpler use-cases. If you don&amp;rsquo;t mind your application blocking on reading XML data but would still like to have incremental parsing capabilities, take a look at &lt;a href=&quot;#xml.etree.ElementTree.iterparse&quot;&gt;&lt;code&gt;iterparse()&lt;/code&gt;&lt;/a&gt;. It can be useful when you&amp;rsquo;re reading a large XML document and don&amp;rsquo;t want to hold it wholly in memory.</source>
          <target state="translated">&lt;a href=&quot;#xml.etree.ElementTree.XMLPullParser&quot;&gt; &lt;code&gt;XMLPullParser&lt;/code&gt; &lt;/a&gt;は非常に柔軟であるため、より単純なユースケースで使用するのは不便です。アプリケーションがXMLデータの読み取りをブロックしても構わないが、それでも増分解析機能を使用したい場合は、&lt;a href=&quot;#xml.etree.ElementTree.iterparse&quot;&gt; &lt;code&gt;iterparse()&lt;/code&gt; &lt;/a&gt;をご覧ください。大きなXMLドキュメントを読んでいて、それを完全にメモリに保持したくない場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="97e478af3d6ae73e7bc440c377cd0710be8dd209" translate="yes" xml:space="preserve">
          <source>Because magic methods are looked up differently from normal methods &lt;a href=&quot;#id9&quot; id=&quot;id7&quot;&gt;2&lt;/a&gt;, this support has been specially implemented. This means that only specific magic methods are supported. The supported list includes &lt;em&gt;almost&lt;/em&gt; all of them. If there are any missing that you need please let us know.</source>
          <target state="translated">マジックメソッドは通常のメソッド&lt;a href=&quot;#id9&quot; id=&quot;id7&quot;&gt;2と&lt;/a&gt;は異なる方法で検索されるため、このサポートは特別に実装されています。つまり、特定のマジックメソッドのみがサポートされます。サポートされているリストには、それらの&lt;em&gt;ほとんど&lt;/em&gt;すべてが含まれ&lt;em&gt;て&lt;/em&gt;います。不足しているものがあれば、お知らせください。</target>
        </trans-unit>
        <trans-unit id="ff5644c87e7d8c8596308ff2c76d404cdc5f9f5e" translate="yes" xml:space="preserve">
          <source>Because many of the traps are enabled, this context is useful for debugging.</source>
          <target state="translated">多くのトラップが有効になっているので、このコンテキストはデバッグに便利です。</target>
        </trans-unit>
        <trans-unit id="0682abf783b1442ff30ccebb13d38ee0bde7ce7f" translate="yes" xml:space="preserve">
          <source>Because mocks auto-create attributes on demand, and allow you to call them with arbitrary arguments, if you misspell one of these assert methods then your assertion is gone:</source>
          <target state="translated">モックは必要に応じて属性を自動生成し、任意の引数で属性を呼び出すことができるので、これらの assert メソッドのいずれかのスペルを間違えてしまうと、アサーションが消えてしまいます。</target>
        </trans-unit>
        <trans-unit id="d2f324a634323f6253d750beb01677494c624217" translate="yes" xml:space="preserve">
          <source>Because most of the operations on any given type will be very similar, it can be useful to define a helper function which generates the forward and reverse instances of any given operator. For example, &lt;a href=&quot;fractions#fractions.Fraction&quot;&gt;&lt;code&gt;fractions.Fraction&lt;/code&gt;&lt;/a&gt; uses:</source>
          <target state="translated">特定の型に対する操作のほとんどは非常に類似しているため、特定の演算子のフォワードインスタンスとリバースインスタンスを生成するヘルパー関数を定義すると便利です。たとえば、&lt;a href=&quot;fractions#fractions.Fraction&quot;&gt; &lt;code&gt;fractions.Fraction&lt;/code&gt; &lt;/a&gt;は以下を使用します。</target>
        </trans-unit>
        <trans-unit id="f37e0b8c6e2c7fbb2cc8dfb353efdeb9905b90d4" translate="yes" xml:space="preserve">
          <source>Because multiple signatures (ie. overloading) is permitted, this method returns a list of signatures rather than a singleton.</source>
          <target state="translated">複数の署名 (つまりオーバーロード)が許可されているので、このメソッドはシングルトンではなく署名のリストを返します。</target>
        </trans-unit>
        <trans-unit id="f8d328dbf9ad55c5ef4fe48e9b55f65c19053b49" translate="yes" xml:space="preserve">
          <source>Because naive &lt;code&gt;datetime&lt;/code&gt; objects are treated by many &lt;code&gt;datetime&lt;/code&gt; methods as local times, it is preferred to use aware datetimes to represent times in UTC. As such, the recommended way to create an object representing a specific timestamp in UTC is by calling &lt;code&gt;datetime.fromtimestamp(timestamp, tz=timezone.utc)&lt;/code&gt;.</source>
          <target state="translated">単純な &lt;code&gt;datetime&lt;/code&gt; オブジェクトは多くの &lt;code&gt;datetime&lt;/code&gt; メソッドによって現地時間として扱われるため、UTCで時間を表すには、認識されたdatetimeを使用することが推奨されます。そのため、UTCで特定のタイムスタンプを表すオブジェクトを作成するための推奨される方法は、 &lt;code&gt;datetime.fromtimestamp(timestamp, tz=timezone.utc)&lt;/code&gt; 呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="6c258a614b92ea7ab843f0053cb8a4745997da95" translate="yes" xml:space="preserve">
          <source>Because naive &lt;code&gt;datetime&lt;/code&gt; objects are treated by many &lt;code&gt;datetime&lt;/code&gt; methods as local times, it is preferred to use aware datetimes to represent times in UTC. As such, the recommended way to create an object representing the current time in UTC is by calling &lt;code&gt;datetime.now(timezone.utc)&lt;/code&gt;.</source>
          <target state="translated">単純な &lt;code&gt;datetime&lt;/code&gt; オブジェクトは多くの &lt;code&gt;datetime&lt;/code&gt; メソッドによって現地時間として扱われるため、UTCで時間を表すには、認識されたdatetimeを使用することが推奨されます。そのため、UTCで現在の時刻を表すオブジェクトを作成するための推奨される方法は、 &lt;code&gt;datetime.now(timezone.utc)&lt;/code&gt; を呼び出すことです。</target>
        </trans-unit>
        <trans-unit id="f47a5630dcb74119e881ec10d145701d12e134d9" translate="yes" xml:space="preserve">
          <source>Because naive &lt;code&gt;datetime&lt;/code&gt; objects are treated by many &lt;code&gt;datetime&lt;/code&gt; methods as local times, it is preferred to use aware datetimes to represent times in UTC; as a result, using &lt;code&gt;utcfromtimetuple&lt;/code&gt; may give misleading results. If you have a naive &lt;code&gt;datetime&lt;/code&gt; representing UTC, use &lt;code&gt;datetime.replace(tzinfo=timezone.utc)&lt;/code&gt; to make it aware, at which point you can use &lt;a href=&quot;#datetime.datetime.timetuple&quot;&gt;&lt;code&gt;datetime.timetuple()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">単純な &lt;code&gt;datetime&lt;/code&gt; オブジェクトは多くの &lt;code&gt;datetime&lt;/code&gt; メソッドによってローカル時刻として扱われるため、UTCで時刻を表すには、認識日付時刻を使用することが推奨されます。その結果、 &lt;code&gt;utcfromtimetuple&lt;/code&gt; を使用すると、誤解を招く結果になる可能性があります。UTCを表す単純な &lt;code&gt;datetime&lt;/code&gt; がある場合は、 &lt;code&gt;datetime.replace(tzinfo=timezone.utc)&lt;/code&gt; を使用してそれを認識させ、その時点で&lt;a href=&quot;#datetime.datetime.timetuple&quot;&gt; &lt;code&gt;datetime.timetuple()&lt;/code&gt; を&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="05c1292e4567d219d1d4e44f189debf054b0b060" translate="yes" xml:space="preserve">
          <source>Because of Python semantics, a shelf cannot know when a mutable persistent-dictionary entry is modified. By default modified objects are written &lt;em&gt;only&lt;/em&gt; when assigned to the shelf (see &lt;a href=&quot;#shelve-example&quot;&gt;Example&lt;/a&gt;). If the optional &lt;em&gt;writeback&lt;/em&gt; parameter is set to &lt;code&gt;True&lt;/code&gt;, all entries accessed are also cached in memory, and written back on &lt;a href=&quot;#shelve.Shelf.sync&quot;&gt;&lt;code&gt;sync()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#shelve.Shelf.close&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt;; this can make it handier to mutate mutable entries in the persistent dictionary, but, if many entries are accessed, it can consume vast amounts of memory for the cache, and it can make the close operation very slow since all accessed entries are written back (there is no way to determine which accessed entries are mutable, nor which ones were actually mutated).</source>
          <target state="translated">Pythonのセマンティクスのため、シェルフは、変更可能な永続的な辞書エントリがいつ変更されたかを知ることができません。デフォルトでは、変更されたオブジェクトは、シェルフに割り当てられている場合に&lt;em&gt;のみ&lt;/em&gt;書き込まれます（&lt;a href=&quot;#shelve-example&quot;&gt;例を&lt;/a&gt;参照）。オプションの&lt;em&gt;writeback&lt;/em&gt;パラメータが &lt;code&gt;True&lt;/code&gt; に設定されている場合、アクセスされたすべてのエントリもメモリにキャッシュされ、&lt;a href=&quot;#shelve.Shelf.sync&quot;&gt; &lt;code&gt;sync()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#shelve.Shelf.close&quot;&gt; &lt;code&gt;close()&lt;/code&gt; で&lt;/a&gt;書き戻されます; これにより、永続ディクショナリの変更可能なエントリを変更するのが簡単になりますが、多くのエントリにアクセスすると、キャッシュのために大量のメモリを消費し、アクセスしたすべてのエントリが書き戻されるため、クローズ操作が非常に遅くなる可能性があります（アクセスされたエントリのうちどれが変更可能か、どのエントリが実際に変更されたかを判別する方法はありません。</target>
        </trans-unit>
        <trans-unit id="8a25338cf8065d3938e8ff0b097c26f981ba9436" translate="yes" xml:space="preserve">
          <source>Because of the way Tk handles the X option database, after Tix has been has imported and inited, it is not possible to reset the color schemes and font sets using the &lt;code&gt;tix_config()&lt;/code&gt; method. Instead, the &lt;a href=&quot;#tkinter.tix.tixCommand.tix_resetoptions&quot;&gt;&lt;code&gt;tix_resetoptions()&lt;/code&gt;&lt;/a&gt; method must be used.</source>
          <target state="translated">TkがXオプションデータベースを処理する方法のため、Tixがインポートされて初期化された後は、 &lt;code&gt;tix_config()&lt;/code&gt; メソッドを使用してカラースキームとフォントセットをリセットすることはできません。代わりに、&lt;a href=&quot;#tkinter.tix.tixCommand.tix_resetoptions&quot;&gt; &lt;code&gt;tix_resetoptions()&lt;/code&gt; &lt;/a&gt;メソッドを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="80d71e1d1d10cd40808346877ec280d341096ac6" translate="yes" xml:space="preserve">
          <source>Because of the way mock attributes are stored you can&amp;rsquo;t directly attach a &lt;a href=&quot;#unittest.mock.PropertyMock&quot;&gt;&lt;code&gt;PropertyMock&lt;/code&gt;&lt;/a&gt; to a mock object. Instead you can attach it to the mock type object:</source>
          <target state="translated">モック属性の保存方法のため、&lt;a href=&quot;#unittest.mock.PropertyMock&quot;&gt; &lt;code&gt;PropertyMock&lt;/code&gt; &lt;/a&gt;をモックオブジェクトに直接アタッチすることはできません。代わりに、それをモックタイプオブジェクトにアタッチできます。</target>
        </trans-unit>
        <trans-unit id="b5e20bbafee23cd5f05c72608abea4eaae32bb05" translate="yes" xml:space="preserve">
          <source>Because package metadata is not available through &lt;a href=&quot;sys#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt; searches, or package loaders directly, the metadata for a package is found through import system &lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#finders-and-loaders&quot;&gt;finders&lt;/a&gt;. To find a distribution package&amp;rsquo;s metadata, &lt;code&gt;importlib.metadata&lt;/code&gt; queries the list of &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-meta-path-finder&quot;&gt;meta path finders&lt;/a&gt; on &lt;a href=&quot;sys#sys.meta_path&quot;&gt;&lt;code&gt;sys.meta_path&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パッケージメタデータは&lt;a href=&quot;sys#sys.path&quot;&gt; &lt;code&gt;sys.path&lt;/code&gt; &lt;/a&gt;検索、またはパッケージローダーから直接利用できないため、パッケージのメタデータはインポートシステム&lt;a href=&quot;https://docs.python.org/3.9/reference/import.html#finders-and-loaders&quot;&gt;ファインダーを&lt;/a&gt;介して検出されます。配布パッケージのメタデータを見つけるために、 &lt;code&gt;importlib.metadata&lt;/code&gt; は&lt;a href=&quot;sys#sys.meta_path&quot;&gt; &lt;code&gt;sys.meta_path&lt;/code&gt; &lt;/a&gt;上の&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-meta-path-finder&quot;&gt;メタパスファインダーの&lt;/a&gt;リストを照会します。</target>
        </trans-unit>
        <trans-unit id="400e21a04dc1ea4ab9991dc7b7931687ece1123f" translate="yes" xml:space="preserve">
          <source>Because package metadata is not available through &lt;code&gt;sys.path&lt;/code&gt; searches, or package loaders directly, the metadata for a package is found through import system &lt;a href=&quot;https://docs.python.org/3/reference/import.html#finders-and-loaders&quot;&gt;finders&lt;/a&gt;. To find a distribution package&amp;rsquo;s metadata, &lt;code&gt;importlib.metadata&lt;/code&gt; queries the list of &lt;a href=&quot;https://docs.python.org/3/glossary.html#term-meta-path-finder&quot;&gt;meta path finders&lt;/a&gt; on &lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.meta_path&quot;&gt;sys.meta_path&lt;/a&gt;.</source>
          <target state="translated">パッケージメタデータは &lt;code&gt;sys.path&lt;/code&gt; 検索またはパッケージローダーを介して直接利用できないため、パッケージのメタデータはインポートシステム&lt;a href=&quot;https://docs.python.org/3/reference/import.html#finders-and-loaders&quot;&gt;ファインダーを&lt;/a&gt;介して見つかります。配布パッケージのメタデータを見つけるために、 &lt;code&gt;importlib.metadata&lt;/code&gt; は&lt;a href=&quot;https://docs.python.org/3/library/sys.html#sys.meta_path&quot;&gt;sys.meta_pathの&lt;/a&gt;&lt;a href=&quot;https://docs.python.org/3/glossary.html#term-meta-path-finder&quot;&gt;メタパスファインダーの&lt;/a&gt;リストをクエリします。</target>
        </trans-unit>
        <trans-unit id="d55b59f6bf0508d0270277c6f73d5728e5bbe79f" translate="yes" xml:space="preserve">
          <source>Because portions of the configuration are passed through &lt;a href=&quot;functions#eval&quot;&gt;&lt;code&gt;eval()&lt;/code&gt;&lt;/a&gt;, use of this function may open its users to a security risk. While the function only binds to a socket on &lt;code&gt;localhost&lt;/code&gt;, and so does not accept connections from remote machines, there are scenarios where untrusted code could be run under the account of the process which calls &lt;a href=&quot;#logging.config.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt;. Specifically, if the process calling &lt;a href=&quot;#logging.config.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt; runs on a multi-user machine where users cannot trust each other, then a malicious user could arrange to run essentially arbitrary code in a victim user&amp;rsquo;s process, simply by connecting to the victim&amp;rsquo;s &lt;a href=&quot;#logging.config.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt; socket and sending a configuration which runs whatever code the attacker wants to have executed in the victim&amp;rsquo;s process. This is especially easy to do if the default port is used, but not hard even if a different port is used). To avoid the risk of this happening, use the &lt;code&gt;verify&lt;/code&gt; argument to &lt;a href=&quot;#logging.config.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt; to prevent unrecognised configurations from being applied.</source>
          <target state="translated">設定の一部は&lt;a href=&quot;functions#eval&quot;&gt; &lt;code&gt;eval()&lt;/code&gt; &lt;/a&gt;を介して渡されるため、この関数を使用すると、ユーザーにセキュリティ上のリスクが生じる可能性があります。関数は &lt;code&gt;localhost&lt;/code&gt; のソケットにバインドするだけで、リモートマシンからの接続を受け入れませんが、&lt;a href=&quot;#logging.config.listen&quot;&gt; &lt;code&gt;listen()&lt;/code&gt; &lt;/a&gt;を呼び出すプロセスのアカウントで信頼できないコードが実行されるシナリオがあります。具体的には、&lt;a href=&quot;#logging.config.listen&quot;&gt; &lt;code&gt;listen()&lt;/code&gt; &lt;/a&gt;を呼び出すプロセスが、ユーザーが互いに信頼できないマルチユーザーマシンで実行される場合、悪意のあるユーザーは、被害者の&lt;a href=&quot;#logging.config.listen&quot;&gt; &lt;code&gt;listen()&lt;/code&gt; に&lt;/a&gt;接続するだけで、被害者ユーザーのプロセスで本質的に任意のコードを実行するように手配できます。ソケットと攻撃者が被害者のプロセスで実行したいコードを実行する設定を送信します。これは、デフォルトのポートが使用されている場合は特に簡単ですが、別のポートが使用されている場合でも難しくありません）。これが発生するリスクを回避するには、 &lt;code&gt;verify&lt;/code&gt; 引数を&lt;a href=&quot;#logging.config.listen&quot;&gt; &lt;code&gt;listen()&lt;/code&gt; &lt;/a&gt;に使用して、認識されない構成が適用されないようにします。</target>
        </trans-unit>
        <trans-unit id="5624fe7445294e1d731602dabe55a2ad5baa3be9" translate="yes" xml:space="preserve">
          <source>Because pseudo-terminal handling is highly platform dependent, there is code to do it only for Linux. (The Linux code is supposed to work on other platforms, but hasn&amp;rsquo;t been tested yet.)</source>
          <target state="translated">疑似端末の処理はプラットフォームに大きく依存するため、Linuxでのみ実行するコードがあります。（Linuxコードは他のプラットフォームでも動作するはずですが、まだテストされていません。）</target>
        </trans-unit>
        <trans-unit id="d26513ebec365d3c671c97db0de645fa9c2e3b1f" translate="yes" xml:space="preserve">
          <source>Because strings cannot represent binary data, the &lt;a href=&quot;#email.generator.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt; class must convert any binary data in any message it flattens to an ASCII compatible format, by converting them to an ASCII compatible &lt;em&gt;Content-Transfer_Encoding&lt;/em&gt;. Using the terminology of the email RFCs, you can think of this as &lt;a href=&quot;#email.generator.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt; serializing to an I/O stream that is not &amp;ldquo;8 bit clean&amp;rdquo;. In other words, most applications will want to be using &lt;a href=&quot;#email.generator.BytesGenerator&quot;&gt;&lt;code&gt;BytesGenerator&lt;/code&gt;&lt;/a&gt;, and not &lt;a href=&quot;#email.generator.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">文字列はバイナリデータを表すことができないため、&lt;a href=&quot;#email.generator.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; &lt;/a&gt;クラスは、フラット化するメッセージ内のバイナリデータをASCII互換の&lt;em&gt;Content-Transfer_Encodingに&lt;/em&gt;変換することにより、ASCII互換の形式に変換する必要があります。電子メールRFCの用語を使用すると、これは「8ビットクリーン」ではないI / Oストリームにシリアル化する&lt;a href=&quot;#email.generator.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; &lt;/a&gt;と考えることができます。言い換えれば、ほとんどのアプリケーションは&lt;a href=&quot;#email.generator.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; &lt;/a&gt;ではなく&lt;a href=&quot;#email.generator.BytesGenerator&quot;&gt; &lt;code&gt;BytesGenerator&lt;/code&gt; &lt;/a&gt;を使用したいと思うでしょう。</target>
        </trans-unit>
        <trans-unit id="89da8e115c0fb8ba5661a24d5093eacb1e6421a5" translate="yes" xml:space="preserve">
          <source>Because the &lt;a href=&quot;#module-shelve&quot;&gt;&lt;code&gt;shelve&lt;/code&gt;&lt;/a&gt; module is backed by &lt;a href=&quot;pickle#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt;, it is insecure to load a shelf from an untrusted source. Like with pickle, loading a shelf can execute arbitrary code.</source>
          <target state="translated">&lt;a href=&quot;#module-shelve&quot;&gt; &lt;code&gt;shelve&lt;/code&gt; &lt;/a&gt;モジュールは&lt;a href=&quot;pickle#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;によってサポートされているため、信頼できないソースからシェルフをロードするのは安全ではありません。ピクルと同様に、シェルフをロードすると、任意のコードを実行できます。</target>
        </trans-unit>
        <trans-unit id="73d13ce7f4ddc06362be70a3eb8a64c34f10a0b7" translate="yes" xml:space="preserve">
          <source>Because the &lt;code&gt;os.DirEntry&lt;/code&gt; methods can make operating system calls, they may also raise &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt;. If you need very fine-grained control over errors, you can catch &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; when calling one of the &lt;code&gt;os.DirEntry&lt;/code&gt; methods and handle as appropriate.</source>
          <target state="translated">ので &lt;code&gt;os.DirEntry&lt;/code&gt; の方法は、システムコールを操作することができ、彼らはまた、上げることができる&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; のを&lt;/a&gt;。エラーを非常にきめ細かく制御する必要がある場合は、 &lt;code&gt;os.DirEntry&lt;/code&gt; メソッドの1つを呼び出すときに&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;をキャッチし、必要に応じて処理できます。</target>
        </trans-unit>
        <trans-unit id="f5cc4736c7fbeafded92a9d1efa62626a33de504" translate="yes" xml:space="preserve">
          <source>Because the default behavior of &lt;code&gt;Message.__setitem__&lt;/code&gt; is to append the value to the list of headers, it is easy to create duplicate headers without realizing it. This method allows certain headers to be limited in the number of instances of that header that may be added to a &lt;code&gt;Message&lt;/code&gt; programmatically. (The limit is not observed by the parser, which will faithfully produce as many headers as exist in the message being parsed.)</source>
          <target state="translated">&lt;code&gt;Message.__setitem__&lt;/code&gt; のデフォルトの動作は、ヘッダーのリストに値を追加することであるため、認識せずにヘッダーを複製するのは簡単です。このメソッドを使用すると、特定のヘッダーを、プログラムで &lt;code&gt;Message&lt;/code&gt; 追加できるヘッダーのインスタンス数を制限できます。（この制限はパーサーによって監視されません。パーサーは、解析されるメッセージに存在するのと同じ数のヘッダーを忠実に生成します。）</target>
        </trans-unit>
        <trans-unit id="e508e7ca842cae56ee0fee2a7255d491cd76f437" translate="yes" xml:space="preserve">
          <source>Because the file name does not end with &lt;code&gt;.py&lt;/code&gt;, &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; infers that it must be run with &lt;a href=&quot;#doctest.testfile&quot;&gt;&lt;code&gt;testfile()&lt;/code&gt;&lt;/a&gt;, not &lt;a href=&quot;#doctest.testmod&quot;&gt;&lt;code&gt;testmod()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ファイル名がで終わらないため &lt;code&gt;.py&lt;/code&gt; 、&lt;a href=&quot;#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; の&lt;/a&gt;それはで実行されなければならないことを推論&lt;a href=&quot;#doctest.testfile&quot;&gt; &lt;code&gt;testfile()&lt;/code&gt; &lt;/a&gt;、ない&lt;a href=&quot;#doctest.testmod&quot;&gt; &lt;code&gt;testmod()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7bdfdaaeb849970dad8f9e9818061fb878cb7999" translate="yes" xml:space="preserve">
          <source>Because the format depends on the current locale, care should be taken when making assumptions about the output value. Field orderings will vary (for example, &amp;ldquo;month/day/year&amp;rdquo; versus &amp;ldquo;day/month/year&amp;rdquo;), and the output may contain Unicode characters encoded using the locale&amp;rsquo;s default encoding (for example, if the current locale is &lt;code&gt;ja_JP&lt;/code&gt;, the default encoding could be any one of &lt;code&gt;eucJP&lt;/code&gt;, &lt;code&gt;SJIS&lt;/code&gt;, or &lt;code&gt;utf-8&lt;/code&gt;; use &lt;a href=&quot;locale#locale.getlocale&quot;&gt;&lt;code&gt;locale.getlocale()&lt;/code&gt;&lt;/a&gt; to determine the current locale&amp;rsquo;s encoding).</source>
          <target state="translated">形式は現在のロケールに依存するため、出力値を想定する場合は注意が必要です。フィールドの順序は異なり（たとえば、「月/日/年」対「日/月/年」）、出力にはロケールのデフォルトのエンコーディングを使用してエンコードされたUnicode文字が含まれる場合があります（たとえば、現在のロケールが &lt;code&gt;ja_JP&lt;/code&gt; の場合、デフォルトのエンコーディングは、 &lt;code&gt;eucJP&lt;/code&gt; 、 &lt;code&gt;SJIS&lt;/code&gt; 、または &lt;code&gt;utf-8&lt;/code&gt; のいずれかです。現在のロケールのエンコーディングを判別するには、&lt;a href=&quot;locale#locale.getlocale&quot;&gt; &lt;code&gt;locale.getlocale()&lt;/code&gt; &lt;/a&gt;を使用してください）。</target>
        </trans-unit>
        <trans-unit id="19cc5a3ec7f1feac3debf6aac3103f1d83152c83" translate="yes" xml:space="preserve">
          <source>Because the module uses &lt;strong&gt;/bin/sh&lt;/strong&gt; command lines, a POSIX or compatible shell for &lt;a href=&quot;os#os.system&quot;&gt;&lt;code&gt;os.system()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;os#os.popen&quot;&gt;&lt;code&gt;os.popen()&lt;/code&gt;&lt;/a&gt; is required.</source>
          <target state="translated">モジュールは&lt;strong&gt;/ bin / sh&lt;/strong&gt;コマンドラインを使用するため、&lt;a href=&quot;os#os.system&quot;&gt; &lt;code&gt;os.system()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;os#os.popen&quot;&gt; &lt;code&gt;os.popen()&lt;/code&gt; の&lt;/a&gt; POSIXまたは互換シェルが必要です。</target>
        </trans-unit>
        <trans-unit id="3f1f9af0dfdfed0a5be1b6b9e51ad5d7c030fac2" translate="yes" xml:space="preserve">
          <source>Because the pattern is passed into &lt;code&gt;load_tests&lt;/code&gt; the package is free to continue (and potentially modify) test discovery. A &amp;lsquo;do nothing&amp;rsquo; &lt;code&gt;load_tests&lt;/code&gt; function for a test package would look like:</source>
          <target state="translated">パターンは &lt;code&gt;load_tests&lt;/code&gt; に渡されるため、パッケージはテストの検出を自由に続行（および変更）できます。テストパッケージの「何もしない」 &lt;code&gt;load_tests&lt;/code&gt; 関数は次のようになります。</target>
        </trans-unit>
        <trans-unit id="b7eeaba1ce3974d485fc10bfd66f07a672724c5b" translate="yes" xml:space="preserve">
          <source>Because the traps are disabled, this context is useful for applications that prefer to have result value of &lt;code&gt;NaN&lt;/code&gt; or &lt;code&gt;Infinity&lt;/code&gt; instead of raising exceptions. This allows an application to complete a run in the presence of conditions that would otherwise halt the program.</source>
          <target state="translated">トラップが無効になっているため、このコンテキストは、例外を発生させる代わりに &lt;code&gt;NaN&lt;/code&gt; または &lt;code&gt;Infinity&lt;/code&gt; 結果値を使用することを好むアプリケーションに役立ちます。これにより、アプリケーションは、プログラムを停止させる条件が存在する場合でも実行を完了することができます。</target>
        </trans-unit>
        <trans-unit id="85f8021b79e3f19e12b4eea6f7791f976cf9c551" translate="yes" xml:space="preserve">
          <source>Because this function has rather complex behavior (especially when custom event loop policies are in use), using the &lt;a href=&quot;#asyncio.get_running_loop&quot;&gt;&lt;code&gt;get_running_loop()&lt;/code&gt;&lt;/a&gt; function is preferred to &lt;a href=&quot;#asyncio.get_event_loop&quot;&gt;&lt;code&gt;get_event_loop()&lt;/code&gt;&lt;/a&gt; in coroutines and callbacks.</source>
          <target state="translated">この関数の動作はかなり複雑なので（特にカスタムイベントループポリシーが使用されている場合）、コルーチンとコールバックで&lt;a href=&quot;#asyncio.get_event_loop&quot;&gt; &lt;code&gt;get_event_loop()&lt;/code&gt; &lt;/a&gt;より&lt;a href=&quot;#asyncio.get_running_loop&quot;&gt; &lt;code&gt;get_running_loop()&lt;/code&gt; &lt;/a&gt;関数を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="945f996940a3d1a131b75aea9889abba3eb63002" translate="yes" xml:space="preserve">
          <source>Because this is a naive &lt;code&gt;datetime&lt;/code&gt; it will be interpreted as a UTC timestamp, and the resulting value will have a timezone of &lt;code&gt;-0000&lt;/code&gt;. Much more useful is to use the &lt;a href=&quot;email.utils#email.utils.localtime&quot;&gt;&lt;code&gt;localtime()&lt;/code&gt;&lt;/a&gt; function from the &lt;a href=&quot;email.utils#module-email.utils&quot;&gt;&lt;code&gt;utils&lt;/code&gt;&lt;/a&gt; module:</source>
          <target state="translated">これはナイーブな &lt;code&gt;datetime&lt;/code&gt; なので、UTCタイムスタンプとして解釈され、結果の値のタイムゾーンは &lt;code&gt;-0000&lt;/code&gt; になります。さらに便利なのは、&lt;a href=&quot;email.utils#module-email.utils&quot;&gt; &lt;code&gt;utils&lt;/code&gt; &lt;/a&gt;モジュールの&lt;a href=&quot;email.utils#email.utils.localtime&quot;&gt; &lt;code&gt;localtime()&lt;/code&gt; &lt;/a&gt;関数を使用することです。</target>
        </trans-unit>
        <trans-unit id="aa017ba24b44b99db1534c67404110bcb6547224" translate="yes" xml:space="preserve">
          <source>Beep the PC&amp;rsquo;s speaker. The &lt;em&gt;frequency&lt;/em&gt; parameter specifies frequency, in hertz, of the sound, and must be in the range 37 through 32,767. The &lt;em&gt;duration&lt;/em&gt; parameter specifies the number of milliseconds the sound should last. If the system is not able to beep the speaker, &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">PCのスピーカーを鳴らします。&lt;em&gt;周波数&lt;/em&gt;パラメータを指定音のヘルツでの周波数、および32,767までの範囲37でなければなりません。&lt;em&gt;期間&lt;/em&gt;パラメータは、音が続かなければならないミリ秒数を指定します。システムがスピーカーからビープ音を鳴らすことができない場合、&lt;a href=&quot;exceptions#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="20b32ebd2fd01cdbc476b447b812c4f108a6392b" translate="yes" xml:space="preserve">
          <source>Before &lt;a href=&quot;#itertools.product&quot;&gt;&lt;code&gt;product()&lt;/code&gt;&lt;/a&gt; runs, it completely consumes the input iterables, keeping pools of values in memory to generate the products. Accordingly, it only useful with finite inputs.</source>
          <target state="translated">&lt;a href=&quot;#itertools.product&quot;&gt; &lt;code&gt;product()&lt;/code&gt; &lt;/a&gt;が実行される前に、入力反復可能オブジェクトを完全に消費し、値のプールをメモリに保持して製品を生成します。したがって、有限の入力でのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="9decded3226de91a3370052bd429264360dba835" translate="yes" xml:space="preserve">
          <source>Before I explain how auto-speccing works, here&amp;rsquo;s why it is needed.</source>
          <target state="translated">自動仕様がどのように機能するかを説明する前に、これが必要な理由を説明します。</target>
        </trans-unit>
        <trans-unit id="648ed538fe4d41e0992f761cec23ce4dc2546702" translate="yes" xml:space="preserve">
          <source>Before Python 3.6, when printing a dict, Python did not guarantee that the key-value pairs was printed in any particular order.</source>
          <target state="translated">Python 3.6以前では、ディクトを印刷する際に、Pythonはキーと値のペアが特定の順番で印刷されることを保証していませんでした。</target>
        </trans-unit>
        <trans-unit id="46d337986d57f221ecbc2aaa26bd0ab430008b76" translate="yes" xml:space="preserve">
          <source>Before the end of the stream is reached, this will be &lt;code&gt;b&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">ストリームの終わりに達する前に、これは &lt;code&gt;b&quot;&quot;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="48c0f47c1261299c0864a67fc685c6a3005db48e" translate="yes" xml:space="preserve">
          <source>Before we move on calling functions with other parameter types, we have to learn more about &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; data types.</source>
          <target state="translated">他のパラメーター型で関数を呼び出す前に、&lt;a href=&quot;#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; &lt;/a&gt;データ型についてさらに学ぶ必要があります。</target>
        </trans-unit>
        <trans-unit id="483be28c0eaadf9f1aa628c534f11b5e079a5451" translate="yes" xml:space="preserve">
          <source>Before you can write to or read from an audio device, you must call three methods in the correct order:</source>
          <target state="translated">オーディオデバイスに書き込んだり、オーディオデバイスから読み込んだりする前に、3つのメソッドを正しい順序で呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="c68a6e6a64dac6bce2f425b8bf2ec3d1606a381e" translate="yes" xml:space="preserve">
          <source>Beg (beginning)</source>
          <target state="translated">始める</target>
        </trans-unit>
        <trans-unit id="40f9d4d10702ae8642d1d7383cb9d28d940dec80" translate="yes" xml:space="preserve">
          <source>Begin autoincrement mode: schedules a recurring timer event that calls &lt;a href=&quot;#tkinter.ttk.Progressbar.step&quot;&gt;&lt;code&gt;Progressbar.step()&lt;/code&gt;&lt;/a&gt; every &lt;em&gt;interval&lt;/em&gt; milliseconds. If omitted, &lt;em&gt;interval&lt;/em&gt; defaults to 50 milliseconds.</source>
          <target state="translated">自動インクリメントモードを開始します。&lt;em&gt;間隔&lt;/em&gt; ms ごとに&lt;a href=&quot;#tkinter.ttk.Progressbar.step&quot;&gt; &lt;code&gt;Progressbar.step()&lt;/code&gt; &lt;/a&gt;を呼び出す繰り返しタイマーイベントをスケジュールします。省略した場合、&lt;em&gt;間隔は&lt;/em&gt;デフォルトで50ミリ秒になります。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1fa1a5c3ae45577ab117ab821ac5874e521c6ac6" translate="yes" xml:space="preserve">
          <source>Begin by writing &lt;code&gt;import cgi&lt;/code&gt;.</source>
          <target state="translated">まず &lt;code&gt;import cgi&lt;/code&gt; を記述します。</target>
        </trans-unit>
        <trans-unit id="d21290f4ef30d771e174960f4bd7877417e7b443" translate="yes" xml:space="preserve">
          <source>Begin the scope of a prefix-URI Namespace mapping.</source>
          <target state="translated">prefix-URI名前空間マッピングのスコープを開始します。</target>
        </trans-unit>
        <trans-unit id="df80a1098d80f4a77aa0c5fa9359c3f1b5d396a4" translate="yes" xml:space="preserve">
          <source>Behavior is the same as in &lt;a href=&quot;threading#threading.Lock.release&quot;&gt;&lt;code&gt;threading.Lock.release()&lt;/code&gt;&lt;/a&gt; except that when invoked on an unlocked lock, a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">動作は&lt;a href=&quot;threading#threading.Lock.release&quot;&gt; &lt;code&gt;threading.Lock.release()&lt;/code&gt; &lt;/a&gt;と同じですが、ロック解除されたロックで呼び出された&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;、ValueErrorが発生します。</target>
        </trans-unit>
        <trans-unit id="aa8a60766ac333f80dc11610250a1865830afb33" translate="yes" xml:space="preserve">
          <source>Behind the scenes, the &lt;a href=&quot;#ctypes.pointer&quot;&gt;&lt;code&gt;pointer()&lt;/code&gt;&lt;/a&gt; function does more than simply create pointer instances, it has to create pointer &lt;em&gt;types&lt;/em&gt; first. This is done with the &lt;a href=&quot;#ctypes.POINTER&quot;&gt;&lt;code&gt;POINTER()&lt;/code&gt;&lt;/a&gt; function, which accepts any &lt;a href=&quot;#module-ctypes&quot;&gt;&lt;code&gt;ctypes&lt;/code&gt;&lt;/a&gt; type, and returns a new type:</source>
          <target state="translated">舞台裏では、&lt;a href=&quot;#ctypes.pointer&quot;&gt; &lt;code&gt;pointer()&lt;/code&gt; &lt;/a&gt;関数は単にポインタインスタンスを作成するだけではなく、最初にポインタ&lt;em&gt;型&lt;/em&gt;を作成する必要があります。これは、任意の&lt;a href=&quot;#module-ctypes&quot;&gt; &lt;code&gt;ctypes&lt;/code&gt; &lt;/a&gt;型を受け入れ、新しい型を返す&lt;a href=&quot;#ctypes.POINTER&quot;&gt; &lt;code&gt;POINTER()&lt;/code&gt; &lt;/a&gt;関数で行われます。</target>
        </trans-unit>
        <trans-unit id="bca285402106aa0f0f7b601a2f8df4f157534b63" translate="yes" xml:space="preserve">
          <source>Being able to tell if a line of input completes a Python statement: in short, telling whether to print &amp;lsquo;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt;&amp;rsquo; or &amp;lsquo;&lt;code&gt;...&lt;/code&gt;&amp;rsquo; next.</source>
          <target state="translated">入力行がPythonステートメントを完了したかどうかを判別できること：つまり、次に「 &lt;code&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/code&gt; 」または「 &lt;code&gt;...&lt;/code&gt; 」を印刷するかどうかを指示します。</target>
        </trans-unit>
        <trans-unit id="d4198662a72fd519a4f968a74051bafac710dc07" translate="yes" xml:space="preserve">
          <source>Bell</source>
          <target state="translated">Bell</target>
        </trans-unit>
        <trans-unit id="f8c124cc977ebefe3c2c86720bb514be851e243e" translate="yes" xml:space="preserve">
          <source>Below are some examples of typical usage of the &lt;a href=&quot;#module-bz2&quot;&gt;&lt;code&gt;bz2&lt;/code&gt;&lt;/a&gt; module.</source>
          <target state="translated">以下は、&lt;a href=&quot;#module-bz2&quot;&gt; &lt;code&gt;bz2&lt;/code&gt; &lt;/a&gt;モジュールの一般的な使用例です。</target>
        </trans-unit>
        <trans-unit id="5d357b659dbe283278a24199979dd7871083127a" translate="yes" xml:space="preserve">
          <source>Below is a table mapping various &lt;a href=&quot;os#module-os&quot;&gt;&lt;code&gt;os&lt;/code&gt;&lt;/a&gt; functions to their corresponding &lt;a href=&quot;#pathlib.PurePath&quot;&gt;&lt;code&gt;PurePath&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;#pathlib.Path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; equivalent.</source>
          <target state="translated">以下は、さまざまな&lt;a href=&quot;os#module-os&quot;&gt; &lt;code&gt;os&lt;/code&gt; &lt;/a&gt;関数を対応する&lt;a href=&quot;#pathlib.PurePath&quot;&gt; &lt;code&gt;PurePath&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;#pathlib.Path&quot;&gt; &lt;code&gt;Path&lt;/code&gt; に&lt;/a&gt;対応する表に示しています。</target>
        </trans-unit>
        <trans-unit id="ab4a051ee0b5f6099448f93c169d9e07992b08e7" translate="yes" xml:space="preserve">
          <source>Below is an example session with logging turned on:</source>
          <target state="translated">以下は、ロギングをオンにしたセッションの例です。</target>
        </trans-unit>
        <trans-unit id="a1129a8f113198207df5b47176143371497861ab" translate="yes" xml:space="preserve">
          <source>Below is an example where a number of ctypes objects are modified by a child process:</source>
          <target state="translated">以下に、子プロセスによって多数のctypesオブジェクトが変更される例を示します。</target>
        </trans-unit>
        <trans-unit id="3e802043d7d026781c9db6d85cb3061d11ca8b23" translate="yes" xml:space="preserve">
          <source>Besides the methods described below, the &lt;code&gt;ttk.Widget&lt;/code&gt; supports the methods &lt;code&gt;tkinter.Widget.cget()&lt;/code&gt; and &lt;code&gt;tkinter.Widget.configure()&lt;/code&gt;.</source>
          <target state="translated">以下に説明するメソッドのほかに、 &lt;code&gt;ttk.Widget&lt;/code&gt; はメソッド &lt;code&gt;tkinter.Widget.cget()&lt;/code&gt; および &lt;code&gt;tkinter.Widget.configure()&lt;/code&gt; をサポートします。</target>
        </trans-unit>
        <trans-unit id="2e1367870fdc44f776287e47700c866b325754e2" translate="yes" xml:space="preserve">
          <source>Besides the methods inherited from &lt;a href=&quot;#tkinter.ttk.Widget&quot;&gt;&lt;code&gt;Widget&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;Widget.cget()&lt;/code&gt;, &lt;code&gt;Widget.configure()&lt;/code&gt;, &lt;a href=&quot;#tkinter.ttk.Widget.identify&quot;&gt;&lt;code&gt;Widget.identify()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#tkinter.ttk.Widget.instate&quot;&gt;&lt;code&gt;Widget.instate()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#tkinter.ttk.Widget.state&quot;&gt;&lt;code&gt;Widget.state()&lt;/code&gt;&lt;/a&gt;, and the following inherited from &lt;code&gt;Entry&lt;/code&gt;: &lt;code&gt;Entry.bbox()&lt;/code&gt;, &lt;code&gt;Entry.delete()&lt;/code&gt;, &lt;code&gt;Entry.icursor()&lt;/code&gt;, &lt;code&gt;Entry.index()&lt;/code&gt;, &lt;code&gt;Entry.insert()&lt;/code&gt;, &lt;code&gt;Entry.selection()&lt;/code&gt;, &lt;code&gt;Entry.xview()&lt;/code&gt;, it has some other methods, described at &lt;code&gt;ttk.Combobox&lt;/code&gt;.</source>
          <target state="translated">継承されたメソッドに加えて&lt;a href=&quot;#tkinter.ttk.Widget&quot;&gt; &lt;code&gt;Widget&lt;/code&gt; &lt;/a&gt;： &lt;code&gt;Widget.cget()&lt;/code&gt; 、 &lt;code&gt;Widget.configure()&lt;/code&gt; 、&lt;a href=&quot;#tkinter.ttk.Widget.identify&quot;&gt; &lt;code&gt;Widget.identify()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#tkinter.ttk.Widget.instate&quot;&gt; &lt;code&gt;Widget.instate()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#tkinter.ttk.Widget.state&quot;&gt; &lt;code&gt;Widget.state()&lt;/code&gt; &lt;/a&gt;、から継承次の &lt;code&gt;Entry&lt;/code&gt; ： &lt;code&gt;Entry.bbox()&lt;/code&gt; 、 &lt;code&gt;Entry.delete()&lt;/code&gt; 、 &lt;code&gt;Entry.icursor()&lt;/code&gt; 、 &lt;code&gt;Entry.index()&lt;/code&gt; 、 &lt;code&gt;Entry.insert()&lt;/code&gt; 、 &lt;code&gt;Entry.selection()&lt;/code&gt; 、 &lt;code&gt;Entry.xview()&lt;/code&gt; は、に記載されるいくつかの他の方法有する &lt;code&gt;ttk.Combobox&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="19f831523d7c6cadde7e0cb39c81a22ba24bb9ec" translate="yes" xml:space="preserve">
          <source>Besides the methods inherited from &lt;a href=&quot;#tkinter.ttk.Widget&quot;&gt;&lt;code&gt;Widget&lt;/code&gt;&lt;/a&gt;: &lt;code&gt;Widget.cget()&lt;/code&gt;, &lt;code&gt;Widget.configure()&lt;/code&gt;, &lt;a href=&quot;#tkinter.ttk.Widget.identify&quot;&gt;&lt;code&gt;Widget.identify()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#tkinter.ttk.Widget.instate&quot;&gt;&lt;code&gt;Widget.instate()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#tkinter.ttk.Widget.state&quot;&gt;&lt;code&gt;Widget.state()&lt;/code&gt;&lt;/a&gt;, and the following inherited from &lt;code&gt;Entry&lt;/code&gt;: &lt;code&gt;Entry.bbox()&lt;/code&gt;, &lt;code&gt;Entry.delete()&lt;/code&gt;, &lt;code&gt;Entry.icursor()&lt;/code&gt;, &lt;code&gt;Entry.index()&lt;/code&gt;, &lt;code&gt;Entry.insert()&lt;/code&gt;, &lt;code&gt;Entry.xview()&lt;/code&gt;, it has some other methods, described at &lt;code&gt;ttk.Spinbox&lt;/code&gt;.</source>
          <target state="translated">継承されたメソッドに加えて&lt;a href=&quot;#tkinter.ttk.Widget&quot;&gt; &lt;code&gt;Widget&lt;/code&gt; &lt;/a&gt;： &lt;code&gt;Widget.cget()&lt;/code&gt; 、 &lt;code&gt;Widget.configure()&lt;/code&gt; 、&lt;a href=&quot;#tkinter.ttk.Widget.identify&quot;&gt; &lt;code&gt;Widget.identify()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#tkinter.ttk.Widget.instate&quot;&gt; &lt;code&gt;Widget.instate()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#tkinter.ttk.Widget.state&quot;&gt; &lt;code&gt;Widget.state()&lt;/code&gt; &lt;/a&gt;、から継承次の &lt;code&gt;Entry&lt;/code&gt; ： &lt;code&gt;Entry.bbox()&lt;/code&gt; 、 &lt;code&gt;Entry.delete()&lt;/code&gt; 、 &lt;code&gt;Entry.icursor()&lt;/code&gt; 、 &lt;code&gt;Entry.index()&lt;/code&gt; 、 &lt;code&gt;Entry.insert()&lt;/code&gt; 、 &lt;code&gt;Entry.xview()&lt;/code&gt; は、に記載されるいくつかの他の方法有する &lt;code&gt;ttk.Spinbox&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="2c3ff9eb01f9273b0084e00951f1623a111bedef" translate="yes" xml:space="preserve">
          <source>Besides, only the main thread is allowed to set a new signal handler.</source>
          <target state="translated">また、新しいシグナルハンドラを設定できるのはメインスレッドのみです。</target>
        </trans-unit>
        <trans-unit id="49aeffbbcfcc4f4ba7dd665a66bd39194335e4c7" translate="yes" xml:space="preserve">
          <source>Besides, only the main thread of the main interpreter is allowed to set a new signal handler.</source>
          <target state="translated">その上、メインインタプリタのメインスレッドのみが新しいシグナルハンドラを設定することができます。</target>
        </trans-unit>
        <trans-unit id="bf8d3be729847deb19b6a44bdd74975d6befe47c" translate="yes" xml:space="preserve">
          <source>Besides, the &lt;a href=&quot;#io.BufferedIOBase.read&quot;&gt;&lt;code&gt;read()&lt;/code&gt;&lt;/a&gt; method does not have a default implementation that defers to &lt;a href=&quot;#io.BufferedIOBase.readinto&quot;&gt;&lt;code&gt;readinto()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">また、&lt;a href=&quot;#io.BufferedIOBase.read&quot;&gt; &lt;code&gt;read()&lt;/code&gt; &lt;/a&gt;メソッドには、&lt;a href=&quot;#io.BufferedIOBase.readinto&quot;&gt; &lt;code&gt;readinto()&lt;/code&gt; &lt;/a&gt;を遅延するデフォルトの実装がありません。</target>
        </trans-unit>
        <trans-unit id="e83a3ab69e9fd0abbfb55d96374f52bcbc103b5f" translate="yes" xml:space="preserve">
          <source>Best defaults</source>
          <target state="translated">最高のデフォルト</target>
        </trans-unit>
        <trans-unit id="a5e1caaf3a558a5215965e11aae5b2c42a62435b" translate="yes" xml:space="preserve">
          <source>Best practice is to omit the traceback stack, unless it adds significant documentation value to the example. So the last example is probably better as:</source>
          <target state="translated">トレースバックスタックを省略するのがベストプラクティスです。なので、最後の例は</target>
        </trans-unit>
        <trans-unit id="fb8df3d1388d60aad85d2be198e574d70525685d" translate="yes" xml:space="preserve">
          <source>Beta distribution. Conditions on the parameters are &lt;code&gt;alpha &amp;gt; 0&lt;/code&gt; and &lt;code&gt;beta &amp;gt; 0&lt;/code&gt;. Returned values range between 0 and 1.</source>
          <target state="translated">ベータ分布。パラメータの条件は、 &lt;code&gt;alpha &amp;gt; 0&lt;/code&gt; および &lt;code&gt;beta &amp;gt; 0&lt;/code&gt; です。戻り値の範囲は0〜1です。</target>
        </trans-unit>
        <trans-unit id="d8ba6dd6cc0d2b6353ea52b89942547287c30fad" translate="yes" xml:space="preserve">
          <source>Better to inherit than pickle/unpickle</source>
          <target state="translated">ピクルス/アンピクルスよりも継承する方が良い</target>
        </trans-unit>
        <trans-unit id="9c1dda353e343c24e7708a72b54529d23347826a" translate="yes" xml:space="preserve">
          <source>Between -999999999 and 999999999 inclusive</source>
          <target state="translated">9999999999から99999999までの間</target>
        </trans-unit>
        <trans-unit id="b6c74a472b928b3de7f142f2f611644179e766ce" translate="yes" xml:space="preserve">
          <source>Between 0 and 86399 inclusive</source>
          <target state="translated">0から86399まで</target>
        </trans-unit>
        <trans-unit id="954ca93f131384b9558ca914d678c167bd92e718" translate="yes" xml:space="preserve">
          <source>Between 0 and 999999 inclusive</source>
          <target state="translated">0 から 999999 までの間</target>
        </trans-unit>
        <trans-unit id="ed2cf7c590b6e7f609a00c26affc3a6e2749ead7" translate="yes" xml:space="preserve">
          <source>Between 1 and 12 inclusive.</source>
          <target state="translated">1から12までの間である。</target>
        </trans-unit>
        <trans-unit id="08bfcd2e1cae8c1d62e31e45c7e3c998b88e587e" translate="yes" xml:space="preserve">
          <source>Between 1 and the number of days in the given month of the given year.</source>
          <target state="translated">1とその年の指定された月の日数の間。</target>
        </trans-unit>
        <trans-unit id="74437956ab6159c55badf4bbc91e7ad2175fad4e" translate="yes" xml:space="preserve">
          <source>Between &lt;a href=&quot;#datetime.MINYEAR&quot;&gt;&lt;code&gt;MINYEAR&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#datetime.MAXYEAR&quot;&gt;&lt;code&gt;MAXYEAR&lt;/code&gt;&lt;/a&gt; inclusive.</source>
          <target state="translated">間&lt;a href=&quot;#datetime.MINYEAR&quot;&gt; &lt;code&gt;MINYEAR&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#datetime.MAXYEAR&quot;&gt; &lt;code&gt;MAXYEAR&lt;/code&gt; &lt;/a&gt;包括的。</target>
        </trans-unit>
        <trans-unit id="4c36aee3637e0b2b5bfaa0e70a4ebeb4eee3c90f" translate="yes" xml:space="preserve">
          <source>Between the sending side and the receiving side, the communications system is free to implement its own transfer mechanism for out-of-band buffers. Potential optimizations include the use of shared memory or datatype-dependent compression.</source>
          <target state="translated">送信側と受信側の間では、通信システムは帯域外バッファのための独自の転送メカニズムを自由に実装することができます。最適化の可能性としては、共有メモリの使用やデータ型に依存した圧縮などがある。</target>
        </trans-unit>
        <trans-unit id="dc3aa2f92c76e508acf2bfaca08ad2ba1baa2d87" translate="yes" xml:space="preserve">
          <source>Beware of replacing &lt;a href=&quot;sys#sys.stdin&quot;&gt;&lt;code&gt;sys.stdin&lt;/code&gt;&lt;/a&gt; with a &amp;ldquo;file like object&amp;rdquo;</source>
          <target state="translated">&lt;a href=&quot;sys#sys.stdin&quot;&gt; &lt;code&gt;sys.stdin&lt;/code&gt; &lt;/a&gt;を「オブジェクトのようなファイル」に置き換えることに注意してください</target>
        </trans-unit>
        <trans-unit id="c9a0688daec7baa0367d0ff67569d3d33eb4a71a" translate="yes" xml:space="preserve">
          <source>Beyond &lt;code&gt;sys.argv&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sys.argv&lt;/code&gt; を超えて</target>
        </trans-unit>
        <trans-unit id="892bf0fc9ced21536073b10f72d8a317557e88d9" translate="yes" xml:space="preserve">
          <source>Binary Data</source>
          <target state="translated">バイナリデータ</target>
        </trans-unit>
        <trans-unit id="74dc05f939b4de6df10ded1ad85cd87cf64bc9f7" translate="yes" xml:space="preserve">
          <source>Binary Data Services</source>
          <target state="translated">バイナリデータサービス</target>
        </trans-unit>
        <trans-unit id="077a15b13db556c78b4bfbf28994d6f478f129e0" translate="yes" xml:space="preserve">
          <source>Binary I/O</source>
          <target state="translated">バイナリI/O</target>
        </trans-unit>
        <trans-unit id="0c9ab2e214f4e3d68626fcb0f6f6f4976f56998f" translate="yes" xml:space="preserve">
          <source>Binary I/O (also called &lt;em&gt;buffered I/O&lt;/em&gt;) expects &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt; and produces &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; objects. No encoding, decoding, or newline translation is performed. This category of streams can be used for all kinds of non-text data, and also when manual control over the handling of text data is desired.</source>
          <target state="translated">バイナリI / O（&lt;em&gt;バッファI / O&lt;/em&gt;とも呼ばれる）は、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクト&lt;/a&gt;を想定し、バイトオブジェクトを生成し&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;。エンコード、デコード、または改行変換は実行されません。このカテゴリのストリームは、あらゆる種類の非テキストデータに使用でき、テキストデータの処理を手動で制御する必要がある場合にも使用できます。</target>
        </trans-unit>
        <trans-unit id="670fe96f19bc636b28e8bbfc569f0fe00c664e38" translate="yes" xml:space="preserve">
          <source>Binary I/O (also called &lt;em&gt;buffered I/O&lt;/em&gt;) expects &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like objects&lt;/a&gt; and produces &lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt; objects. No encoding, decoding, or newline translation is performed. This category of streams can be used for all kinds of non-text data, and also when manual control over the handling of text data is desired.</source>
          <target state="translated">バイナリI / O（&lt;em&gt;バッファI / O&lt;/em&gt;とも呼ば&lt;em&gt;れ&lt;/em&gt;&lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;ます&lt;/a&gt;）は、バイトのようなオブジェクトを予期し、バイトオブジェクトを生成し&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;。エンコード、デコード、または改行の変換は実行されません。このカテゴリのストリームは、あらゆる種類の非テキストデータに使用できます。また、テキストデータの処理を手動で制御する必要がある場合にも使用できます。</target>
        </trans-unit>
        <trans-unit id="9d18c326fb8b019f2ba7dcc08e612917c6ba14d2" translate="yes" xml:space="preserve">
          <source>Binary Objects</source>
          <target state="translated">バイナリオブジェクト</target>
        </trans-unit>
        <trans-unit id="9cf3342675aa01229892e963ccc770d42fd0df53" translate="yes" xml:space="preserve">
          <source>Binary Sequence Types &amp;mdash; &lt;code&gt;bytes&lt;/code&gt;, &lt;code&gt;bytearray&lt;/code&gt;, &lt;code&gt;memoryview&lt;/code&gt;</source>
          <target state="translated">バイナリシーケンスタイプ&amp;mdash; &lt;code&gt;bytes&lt;/code&gt; 、 &lt;code&gt;bytearray&lt;/code&gt; 、 &lt;code&gt;memoryview&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5926a354af36f8d3a781a27eef2ef8a43ed8d3ed" translate="yes" xml:space="preserve">
          <source>Binary Sequence Types &amp;mdash; bytes, bytearray, memoryview</source>
          <target state="translated">バイナリシーケンスタイプ&amp;mdash;バイト、バイト配列、メモリビュー</target>
        </trans-unit>
        <trans-unit id="3926624312f99b7ac129db6c0c454a3ff48903bd" translate="yes" xml:space="preserve">
          <source>Binary Transforms</source>
          <target state="translated">二値変換</target>
        </trans-unit>
        <trans-unit id="21fe5e3cd9c91723a039c52415394d9d03534dd3" translate="yes" xml:space="preserve">
          <source>Binary buffered objects (instances of &lt;a href=&quot;#io.BufferedReader&quot;&gt;&lt;code&gt;BufferedReader&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#io.BufferedWriter&quot;&gt;&lt;code&gt;BufferedWriter&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#io.BufferedRandom&quot;&gt;&lt;code&gt;BufferedRandom&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#io.BufferedRWPair&quot;&gt;&lt;code&gt;BufferedRWPair&lt;/code&gt;&lt;/a&gt;) are not reentrant. While reentrant calls will not happen in normal situations, they can arise from doing I/O in a &lt;a href=&quot;signal#module-signal&quot;&gt;&lt;code&gt;signal&lt;/code&gt;&lt;/a&gt; handler. If a thread tries to re-enter a buffered object which it is already accessing, a &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised. Note this doesn&amp;rsquo;t prohibit a different thread from entering the buffered object.</source>
          <target state="translated">バイナリバッファオブジェクト（&lt;a href=&quot;#io.BufferedReader&quot;&gt; &lt;code&gt;BufferedReader&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#io.BufferedWriter&quot;&gt; &lt;code&gt;BufferedWriter&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#io.BufferedRandom&quot;&gt; &lt;code&gt;BufferedRandom&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#io.BufferedRWPair&quot;&gt; &lt;code&gt;BufferedRWPair&lt;/code&gt; の&lt;/a&gt;インスタンス）は再入可能ではありません。リエントラントコールは通常の状況では発生しませんが、&lt;a href=&quot;signal#module-signal&quot;&gt; &lt;code&gt;signal&lt;/code&gt; &lt;/a&gt;ハンドラでI / Oを実行することで発生する可能性があります。スレッドがすでにアクセスしているバッファリングされたオブジェクトを再入力しようとすると、&lt;a href=&quot;exceptions#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt;が発生します。これは、別のスレッドがバッファリングされたオブジェクトに入ることを禁止しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4406f8baf70aa1a1308d895faa78af8d9e41d899" translate="yes" xml:space="preserve">
          <source>Binary buffered objects (instances of &lt;a href=&quot;#io.BufferedReader&quot;&gt;&lt;code&gt;BufferedReader&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#io.BufferedWriter&quot;&gt;&lt;code&gt;BufferedWriter&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#io.BufferedRandom&quot;&gt;&lt;code&gt;BufferedRandom&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#io.BufferedRWPair&quot;&gt;&lt;code&gt;BufferedRWPair&lt;/code&gt;&lt;/a&gt;) protect their internal structures using a lock; it is therefore safe to call them from multiple threads at once.</source>
          <target state="translated">バイナリバッファオブジェクト（&lt;a href=&quot;#io.BufferedReader&quot;&gt; &lt;code&gt;BufferedReader&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#io.BufferedWriter&quot;&gt; &lt;code&gt;BufferedWriter&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#io.BufferedRandom&quot;&gt; &lt;code&gt;BufferedRandom&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#io.BufferedRWPair&quot;&gt; &lt;code&gt;BufferedRWPair&lt;/code&gt; の&lt;/a&gt;インスタンス）は、ロックを使用して内部構造を保護します。したがって、一度に複数のスレッドから呼び出しても安全です。</target>
        </trans-unit>
        <trans-unit id="62f7f2783ce89c5bb6d5fe79cd3bd1c11179b462" translate="yes" xml:space="preserve">
          <source>Binary data in any form.</source>
          <target state="translated">任意の形式のバイナリデータ。</target>
        </trans-unit>
        <trans-unit id="b418b66c57a5a2313398824ab306a08b3b9421cc" translate="yes" xml:space="preserve">
          <source>Binary files are buffered in fixed-size chunks; the size of the buffer is chosen using a heuristic trying to determine the underlying device&amp;rsquo;s &amp;ldquo;block size&amp;rdquo; and falling back on &lt;a href=&quot;io#io.DEFAULT_BUFFER_SIZE&quot;&gt;&lt;code&gt;io.DEFAULT_BUFFER_SIZE&lt;/code&gt;&lt;/a&gt;. On many systems, the buffer will typically be 4096 or 8192 bytes long.</source>
          <target state="translated">バイナリファイルは固定サイズのチャンクでバッファリングされます。バッファのサイズは、基礎となるデバイスの「ブロックサイズ」を決定しようとするヒューリスティックを使用して選択され、&lt;a href=&quot;io#io.DEFAULT_BUFFER_SIZE&quot;&gt; &lt;code&gt;io.DEFAULT_BUFFER_SIZE&lt;/code&gt; に&lt;/a&gt;フォールバックします。多くのシステムでは、バッファの長さは通常4096バイトまたは8192バイトです。</target>
        </trans-unit>
        <trans-unit id="6b48357f7d4a42846626a5244d044b564edfcf86" translate="yes" xml:space="preserve">
          <source>Binary format. Outputs the number in base 2.</source>
          <target state="translated">バイナリ形式。2進数で出力します。</target>
        </trans-unit>
        <trans-unit id="82f1ab06b67bdfb6757c6103375f928cf440f008" translate="yes" xml:space="preserve">
          <source>Binary operations remove the top of the stack (TOS) and the second top-most stack item (TOS1) from the stack. They perform the operation, and put the result back on the stack.</source>
          <target state="translated">バイナリ演算は、スタックの先頭(TOS)とスタックの2番目の先頭の項目(TOS1)をスタックから削除します。これらの演算を実行し、結果をスタックに戻します。</target>
        </trans-unit>
        <trans-unit id="343454e4d9b2acf169be0d953fb0fb79d39cb3cc" translate="yes" xml:space="preserve">
          <source>Binary operations that mix &lt;a href=&quot;#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; instances with &lt;a href=&quot;#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt; return the type of the first operand. For example: &lt;code&gt;frozenset('ab') |
set('bc')&lt;/code&gt; returns an instance of &lt;a href=&quot;#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;インスタンスと&lt;a href=&quot;#frozenset&quot;&gt; &lt;code&gt;frozenset&lt;/code&gt; &lt;/a&gt;を混合するバイナリ演算は、最初のオペランドのタイプを返します。例： &lt;code&gt;frozenset('ab') | set('bc')&lt;/code&gt; は&lt;a href=&quot;#frozenset&quot;&gt; &lt;code&gt;frozenset&lt;/code&gt; の&lt;/a&gt;インスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="9c441e1be7900ba6369f9d1e8b770e422d0ae553" translate="yes" xml:space="preserve">
          <source>Binary operator tokens.</source>
          <target state="translated">バイナリ演算子トークン。</target>
        </trans-unit>
        <trans-unit id="1606bce466a3fb6e4e13c59af6b1a64d90c92104" translate="yes" xml:space="preserve">
          <source>Bind &lt;em&gt;fun&lt;/em&gt; to key-press event of key if key is given, or to any key-press-event if no key is given. Remark: in order to be able to register key-events, TurtleScreen must have focus. (See method &lt;a href=&quot;#turtle.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">keyが指定されている場合は&lt;em&gt;fun&lt;/em&gt;をkeyのkey-pressイベントにバインドし、キーが指定されていない場合は任意のkey-press-eventにバインドします。備考：キーイベントを登録できるようにするには、TurtleScreenにフォーカスが必要です。（&lt;a href=&quot;#turtle.listen&quot;&gt; &lt;code&gt;listen()&lt;/code&gt; &lt;/a&gt;メソッドを参照してください。）</target>
        </trans-unit>
        <trans-unit id="c360811010b1ba8b6a9cf0d69579acc60a3e6bac" translate="yes" xml:space="preserve">
          <source>Bind &lt;em&gt;fun&lt;/em&gt; to key-release event of key. If &lt;em&gt;fun&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, event bindings are removed. Remark: in order to be able to register key-events, TurtleScreen must have the focus. (See method &lt;a href=&quot;#turtle.listen&quot;&gt;&lt;code&gt;listen()&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">キーのキーリリースイベントに&lt;em&gt;楽しみ&lt;/em&gt;をバインドしてください。&lt;em&gt;fun&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; の場合、イベントバインディングは削除されます。備考：キーイベントを登録できるようにするには、TurtleScreenがフォーカスされている必要があります。（&lt;a href=&quot;#turtle.listen&quot;&gt; &lt;code&gt;listen()&lt;/code&gt; &lt;/a&gt;メソッドを参照してください。）</target>
        </trans-unit>
        <trans-unit id="88250fa997071f51f9a8c6f6b2b0aff6f79ab7aa" translate="yes" xml:space="preserve">
          <source>Bind &lt;em&gt;fun&lt;/em&gt; to mouse-button-release events on this turtle. If &lt;em&gt;fun&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, existing bindings are removed.</source>
          <target state="translated">このカメのマウスボタンリリースイベントに&lt;em&gt;楽しみ&lt;/em&gt;をバインドし&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;fun&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; の場合、既存のバインディングは削除されます。</target>
        </trans-unit>
        <trans-unit id="8981cb59d50b3e142bec1ed6694170c1d04c3e93" translate="yes" xml:space="preserve">
          <source>Bind &lt;em&gt;fun&lt;/em&gt; to mouse-click events on this screen. If &lt;em&gt;fun&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, existing bindings are removed.</source>
          <target state="translated">&lt;em&gt;fun&lt;/em&gt;をこの画面のマウスクリックイベントにバインドします。&lt;em&gt;fun&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; の場合、既存のバインディングは削除されます。</target>
        </trans-unit>
        <trans-unit id="eae217269ecbcd53a0c67a6d42f2541196eef9ba" translate="yes" xml:space="preserve">
          <source>Bind &lt;em&gt;fun&lt;/em&gt; to mouse-click events on this turtle. If &lt;em&gt;fun&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, existing bindings are removed. Example for the anonymous turtle, i.e. the procedural way:</source>
          <target state="translated">このカメのマウスクリックイベントに&lt;em&gt;楽しみ&lt;/em&gt;をバインドします。&lt;em&gt;fun&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; の場合、既存のバインディングは削除されます。匿名のカメの例、つまり手続き的な方法：</target>
        </trans-unit>
        <trans-unit id="f2c696385e54300e88da723431117d0a4a8e9d3c" translate="yes" xml:space="preserve">
          <source>Bind &lt;em&gt;fun&lt;/em&gt; to mouse-move events on this turtle. If &lt;em&gt;fun&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, existing bindings are removed.</source>
          <target state="translated">このカメのマウス移動イベントに&lt;em&gt;楽しみ&lt;/em&gt;をバインドし&lt;em&gt;ます&lt;/em&gt;。&lt;em&gt;fun&lt;/em&gt;が &lt;code&gt;None&lt;/code&gt; の場合、既存のバインディングは削除されます。</target>
        </trans-unit>
        <trans-unit id="8afe0450ccf1ed51bd4d76038ec0971fe964de5c" translate="yes" xml:space="preserve">
          <source>Bind a callback for the given event &lt;em&gt;sequence&lt;/em&gt; to the tag &lt;em&gt;tagname&lt;/em&gt;. When an event is delivered to an item, the callbacks for each of the item&amp;rsquo;s tags option are called.</source>
          <target state="translated">指定されたイベント&lt;em&gt;シーケンスの&lt;/em&gt;コールバックをタグ&lt;em&gt;tagnameに&lt;/em&gt;バインドします。イベントがアイテムに配信されると、アイテムの各タグオプションのコールバックが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="62a0e995f722ce9bd473d6c69d16b2dc42dd47fe" translate="yes" xml:space="preserve">
          <source>Bind a unix socket, raising &lt;a href=&quot;unittest#unittest.SkipTest&quot;&gt;&lt;code&gt;unittest.SkipTest&lt;/code&gt;&lt;/a&gt; if &lt;a href=&quot;exceptions#PermissionError&quot;&gt;&lt;code&gt;PermissionError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">UNIXソケットをバインドし、&lt;a href=&quot;exceptions#PermissionError&quot;&gt; &lt;code&gt;PermissionError&lt;/code&gt; &lt;/a&gt;が発生した場合は&lt;a href=&quot;unittest#unittest.SkipTest&quot;&gt; &lt;code&gt;unittest.SkipTest&lt;/code&gt; を&lt;/a&gt;発生させます。</target>
        </trans-unit>
        <trans-unit id="3ec9eed3827520279516114577184ceeb4151b81" translate="yes" xml:space="preserve">
          <source>Bind bye() method to mouse clicks on the Screen.</source>
          <target state="translated">bye()メソッドを画面上でのマウスクリックにバインドします。</target>
        </trans-unit>
        <trans-unit id="efbdacada9d39467e2d8f8e1aba79f1562fdc7db" translate="yes" xml:space="preserve">
          <source>Bind the &lt;em&gt;args&lt;/em&gt; and &lt;em&gt;kwds&lt;/em&gt; to the argument names of the Python function or method &lt;em&gt;func&lt;/em&gt;, as if it was called with them. For bound methods, bind also the first argument (typically named &lt;code&gt;self&lt;/code&gt;) to the associated instance. A dict is returned, mapping the argument names (including the names of the &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;**&lt;/code&gt; arguments, if any) to their values from &lt;em&gt;args&lt;/em&gt; and &lt;em&gt;kwds&lt;/em&gt;. In case of invoking &lt;em&gt;func&lt;/em&gt; incorrectly, i.e. whenever &lt;code&gt;func(*args, **kwds)&lt;/code&gt; would raise an exception because of incompatible signature, an exception of the same type and the same or similar message is raised. For example:</source>
          <target state="translated">&lt;em&gt;args&lt;/em&gt;と&lt;em&gt;kwds&lt;/em&gt;を、それらが呼び出されたかのように、Python関数またはメソッド&lt;em&gt;func&lt;/em&gt;の引数名にバインドします。バインドされたメソッドの場合、最初の引数（通常は &lt;code&gt;self&lt;/code&gt; という名前）も関連するインスタンスにバインドします。 dictが返され、引数の名前（ &lt;code&gt;*&lt;/code&gt; と &lt;code&gt;**&lt;/code&gt; の引数がある場合はそれらの名前を含む）が&lt;em&gt;args&lt;/em&gt;および&lt;em&gt;kwdsの&lt;/em&gt;値に&lt;em&gt;マッピングされ&lt;/em&gt;ます。&lt;em&gt;funcを&lt;/em&gt;誤って呼び出す&lt;em&gt;場合&lt;/em&gt;、つまり &lt;code&gt;func(*args, **kwds)&lt;/code&gt; が互換性のないシグネチャのために例外を発生させる場合は常に、同じタイプの例外または同じまたは類似のメッセージが発生します。例えば：</target>
        </trans-unit>
        <trans-unit id="466b061fcff1561dff2e7055a677ac36776d8605" translate="yes" xml:space="preserve">
          <source>Bind the &lt;em&gt;domain&lt;/em&gt; to &lt;em&gt;codeset&lt;/em&gt;, changing the encoding of byte strings returned by the &lt;a href=&quot;#gettext.lgettext&quot;&gt;&lt;code&gt;lgettext()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#gettext.ldgettext&quot;&gt;&lt;code&gt;ldgettext()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#gettext.lngettext&quot;&gt;&lt;code&gt;lngettext()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#gettext.ldngettext&quot;&gt;&lt;code&gt;ldngettext()&lt;/code&gt;&lt;/a&gt; functions. If &lt;em&gt;codeset&lt;/em&gt; is omitted, then the current binding is returned.</source>
          <target state="translated">バインド&lt;em&gt;ドメイン&lt;/em&gt;の&lt;em&gt;コードセット&lt;/em&gt;によって返されたバイト列の符号変化、&lt;a href=&quot;#gettext.lgettext&quot;&gt; &lt;code&gt;lgettext()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#gettext.ldgettext&quot;&gt; &lt;code&gt;ldgettext()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#gettext.lngettext&quot;&gt; &lt;code&gt;lngettext()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#gettext.ldngettext&quot;&gt; &lt;code&gt;ldngettext()&lt;/code&gt; &lt;/a&gt;関数を。場合は&lt;em&gt;コードセットが&lt;/em&gt;省略され、その後、結合電流が返されます。</target>
        </trans-unit>
        <trans-unit id="971f75ed3a8b9b21ee56302a74bf55b47cdbf22e" translate="yes" xml:space="preserve">
          <source>Bind the &lt;em&gt;domain&lt;/em&gt; to the locale directory &lt;em&gt;localedir&lt;/em&gt;. More concretely, &lt;a href=&quot;#module-gettext&quot;&gt;&lt;code&gt;gettext&lt;/code&gt;&lt;/a&gt; will look for binary &lt;code&gt;.mo&lt;/code&gt; files for the given domain using the path (on Unix): &lt;code&gt;&lt;em&gt;localedir&lt;/em&gt;/&lt;em&gt;language&lt;/em&gt;/LC_MESSAGES/&lt;em&gt;domain&lt;/em&gt;.mo&lt;/code&gt;, where &lt;em&gt;language&lt;/em&gt; is searched for in the environment variables &lt;code id=&quot;index-0&quot;&gt;LANGUAGE&lt;/code&gt;, &lt;code id=&quot;index-1&quot;&gt;LC_ALL&lt;/code&gt;, &lt;code id=&quot;index-2&quot;&gt;LC_MESSAGES&lt;/code&gt;, and &lt;code id=&quot;index-3&quot;&gt;LANG&lt;/code&gt; respectively.</source>
          <target state="translated">&lt;em&gt;ドメイン&lt;/em&gt;をロケールディレクトリ&lt;em&gt;localedirに&lt;/em&gt;バインドし&lt;em&gt;ます&lt;/em&gt;。具体的には、&lt;a href=&quot;#module-gettext&quot;&gt; &lt;code&gt;gettext&lt;/code&gt; のは&lt;/a&gt;、バイナリを探します &lt;code&gt;.mo&lt;/code&gt; （UNIXの場合）のパスを使用して、指定されたドメイン用のファイル： &lt;code&gt;&lt;em&gt;localedir&lt;/em&gt;/&lt;em&gt;language&lt;/em&gt;/LC_MESSAGES/&lt;em&gt;domain&lt;/em&gt;.mo&lt;/code&gt; 、&lt;em&gt;言語は&lt;/em&gt;環境変数に検索され &lt;code id=&quot;index-0&quot;&gt;LANGUAGE&lt;/code&gt; 、 &lt;code id=&quot;index-1&quot;&gt;LC_ALL&lt;/code&gt; 、 &lt;code id=&quot;index-2&quot;&gt;LC_MESSAGES&lt;/code&gt; 、および &lt;code id=&quot;index-3&quot;&gt;LANG&lt;/code&gt; をそれぞれ。</target>
        </trans-unit>
        <trans-unit id="6ef7c31f3723921d8fdf4d1ae7e78f574951d17b" translate="yes" xml:space="preserve">
          <source>Bind the socket to &lt;em&gt;address&lt;/em&gt;. The socket must not already be bound. (The format of &lt;em&gt;address&lt;/em&gt; depends on the address family &amp;mdash; refer to the &lt;a href=&quot;socket#module-socket&quot;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt; documentation for more information.) To mark the socket as re-usable (setting the &lt;code&gt;SO_REUSEADDR&lt;/code&gt; option), call the &lt;a href=&quot;#asyncore.dispatcher&quot;&gt;&lt;code&gt;dispatcher&lt;/code&gt;&lt;/a&gt; object&amp;rsquo;s &lt;code&gt;set_reuse_addr()&lt;/code&gt; method.</source>
          <target state="translated">ソケットを&lt;em&gt;addressに&lt;/em&gt;バインドし&lt;em&gt;ます&lt;/em&gt;。ソケットはすでにバインドされていてはなりません。（&lt;em&gt;アドレス&lt;/em&gt;の形式は&lt;em&gt;アドレス&lt;/em&gt;ファミリによって異なります。詳細は、&lt;a href=&quot;socket#module-socket&quot;&gt; &lt;code&gt;socket&lt;/code&gt; &lt;/a&gt;ドキュメントを参照してください。）ソケットを再利用可能としてマークするには（ &lt;code&gt;SO_REUSEADDR&lt;/code&gt; オプションを設定）、&lt;a href=&quot;#asyncore.dispatcher&quot;&gt; &lt;code&gt;dispatcher&lt;/code&gt; &lt;/a&gt;オブジェクトの &lt;code&gt;set_reuse_addr()&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="04f4492e920673119f99caa126daf7111e8679ef" translate="yes" xml:space="preserve">
          <source>Bind the socket to &lt;em&gt;address&lt;/em&gt;. The socket must not already be bound. (The format of &lt;em&gt;address&lt;/em&gt; depends on the address family &amp;mdash; see above.)</source>
          <target state="translated">ソケットを&lt;em&gt;addressに&lt;/em&gt;バインドし&lt;em&gt;ます&lt;/em&gt;。ソケットはすでにバインドされていてはなりません。（&lt;em&gt;アドレス&lt;/em&gt;の形式は&lt;em&gt;アドレス&lt;/em&gt;ファミリによって異なります。上記を参照してください。）</target>
        </trans-unit>
        <trans-unit id="de75e0400dc3db591ad5734f114577fa0875a522" translate="yes" xml:space="preserve">
          <source>Bind the socket to a free port and return the port number. Relies on ephemeral ports in order to ensure we are using an unbound port. This is important as many tests may be running simultaneously, especially in a buildbot environment. This method raises an exception if the &lt;code&gt;sock.family&lt;/code&gt; is &lt;a href=&quot;socket#socket.AF_INET&quot;&gt;&lt;code&gt;AF_INET&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;sock.type&lt;/code&gt; is &lt;a href=&quot;socket#socket.SOCK_STREAM&quot;&gt;&lt;code&gt;SOCK_STREAM&lt;/code&gt;&lt;/a&gt;, and the socket has &lt;code&gt;SO_REUSEADDR&lt;/code&gt; or &lt;code&gt;SO_REUSEPORT&lt;/code&gt; set on it. Tests should never set these socket options for TCP/IP sockets. The only case for setting these options is testing multicasting via multiple UDP sockets.</source>
          <target state="translated">ソケットを空きポートにバインドし、ポート番号を返します。バインドされていないポートを確実に使用するために、エフェメラルポートに依存します。特にビルドボット環境では、多くのテストが同時に実行される可能性があるため、これは重要です。 &lt;code&gt;sock.family&lt;/code&gt; が&lt;a href=&quot;socket#socket.AF_INET&quot;&gt; &lt;code&gt;AF_INET&lt;/code&gt; &lt;/a&gt;で &lt;code&gt;sock.type&lt;/code&gt; が&lt;a href=&quot;socket#socket.SOCK_STREAM&quot;&gt; &lt;code&gt;SOCK_STREAM&lt;/code&gt; &lt;/a&gt;であり、ソケットに &lt;code&gt;SO_REUSEADDR&lt;/code&gt; または &lt;code&gt;SO_REUSEPORT&lt;/code&gt; が設定されている場合、このメソッドは例外を発生させます。テストでは、これらのソケットオプションをTCP / IPソケットに設定しないでください。これらのオプションを設定する唯一のケースは、複数のUDPソケットを介したマルチキャストのテストです。</target>
        </trans-unit>
        <trans-unit id="1fd8b3b29ad1340858fecc05585a82b44392fdd8" translate="yes" xml:space="preserve">
          <source>Bindings and Events</source>
          <target state="translated">縛りとイベント</target>
        </trans-unit>
        <trans-unit id="f86116810e0f75c5cdd1a62f7f2104592005bc20" translate="yes" xml:space="preserve">
          <source>Bit fields in structures and unions</source>
          <target state="translated">構造体とユニオンのビットフィールド</target>
        </trans-unit>
        <trans-unit id="320415496f3946f94011e0ced3cddcdc515c3da5" translate="yes" xml:space="preserve">
          <source>Bit-mask</source>
          <target state="translated">Bit-mask</target>
        </trans-unit>
        <trans-unit id="10b264ac40d76c9c94d3cc50bd7202a39865e32f" translate="yes" xml:space="preserve">
          <source>Bit-mask to extract a character</source>
          <target state="translated">文字を抽出するビットマスク</target>
        </trans-unit>
        <trans-unit id="0b5b215b81a34d81da07b12a57a05ded49214f16" translate="yes" xml:space="preserve">
          <source>Bit-mask to extract attributes</source>
          <target state="translated">属性を抽出するビットマスク</target>
        </trans-unit>
        <trans-unit id="2061b16edd78d2e593621fabec13afb636e32ce9" translate="yes" xml:space="preserve">
          <source>Bit-mask to extract color-pair field information</source>
          <target state="translated">カラーペアフィールド情報を抽出するためのビットマスク</target>
        </trans-unit>
        <trans-unit id="55bcce66fdecceeb947a789cd32be9b93c7eca65" translate="yes" xml:space="preserve">
          <source>Bitwise And</source>
          <target state="translated">ビットワイズと</target>
        </trans-unit>
        <trans-unit id="5fef320a5b6e9f946d0c0be2f1804caae7326297" translate="yes" xml:space="preserve">
          <source>Bitwise Exclusive Or</source>
          <target state="translated">ビットワイズの排他的または</target>
        </trans-unit>
        <trans-unit id="92108ddfd25fd3b1ca3cfcbb1ac3acde1d93a1d2" translate="yes" xml:space="preserve">
          <source>Bitwise Inversion</source>
          <target state="translated">ビットごとの反転</target>
        </trans-unit>
        <trans-unit id="c6d024785d8011a85a2c45a248d86ff4be52b077" translate="yes" xml:space="preserve">
          <source>Bitwise Operations on Integer Types</source>
          <target state="translated">整数型のビット演算</target>
        </trans-unit>
        <trans-unit id="5b0861023775ab83f9aeb2c2b3492420398fae85" translate="yes" xml:space="preserve">
          <source>Bitwise Or</source>
          <target state="translated">ビット単位または</target>
        </trans-unit>
        <trans-unit id="2e17feeadb67d1865e9a3b140b95f9721af9f8fa" translate="yes" xml:space="preserve">
          <source>Bitwise operations only make sense for integers. The result of bitwise operations is calculated as though carried out in two&amp;rsquo;s complement with an infinite number of sign bits.</source>
          <target state="translated">ビット演算は整数に対してのみ意味があります。ビット演算の結果は、無限の数の符号ビットを使用して2の補数で実行されるかのように計算されます。</target>
        </trans-unit>
        <trans-unit id="b406fb57b29fc76f71864fbb37f0238045f84d9d" translate="yes" xml:space="preserve">
          <source>Black</source>
          <target state="translated">Black</target>
        </trans-unit>
        <trans-unit id="480135dda7d845bc82b347dfaa91bf347ee099af" translate="yes" xml:space="preserve">
          <source>Blink mode</source>
          <target state="translated">ブリンクモード</target>
        </trans-unit>
        <trans-unit id="cfbe395b6ff593ced03bac36c099d59799a6252c" translate="yes" xml:space="preserve">
          <source>Block device required</source>
          <target state="translated">ブロック装置が必要</target>
        </trans-unit>
        <trans-unit id="40f4277d9e2e9642b7c7082b91e613d62eab845f" translate="yes" xml:space="preserve">
          <source>Block device.</source>
          <target state="translated">デバイスをブロックします。</target>
        </trans-unit>
        <trans-unit id="2bb009addf624a9cc048897e81f81ead20e469bf" translate="yes" xml:space="preserve">
          <source>Block for &lt;em&gt;delay&lt;/em&gt; seconds.</source>
          <target state="translated">&lt;em&gt;delay&lt;/em&gt;秒ブロックし&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="8fb197cebcc8478cf7165d9dc1e9b4feeed49cd6" translate="yes" xml:space="preserve">
          <source>Block until all items in the queue have been gotten and processed.</source>
          <target state="translated">キュー内のすべてのアイテムが取得され、処理されるまでブロックします。</target>
        </trans-unit>
        <trans-unit id="5c76bb4026cbe07b72909b50d70c6d76ce00a1bf" translate="yes" xml:space="preserve">
          <source>Block until all items in the queue have been received and processed.</source>
          <target state="translated">キュー内のすべてのアイテムが受信され、処理されるまでブロックします。</target>
        </trans-unit>
        <trans-unit id="4270873346fe4ac8413b26a31ec9f3e286371ccc" translate="yes" xml:space="preserve">
          <source>Block until the internal flag is true. If the internal flag is true on entry, return immediately. Otherwise, block until another thread calls &lt;a href=&quot;#threading.Event.set&quot;&gt;&lt;code&gt;set()&lt;/code&gt;&lt;/a&gt; to set the flag to true, or until the optional timeout occurs.</source>
          <target state="translated">内部フラグがtrueになるまでブロックします。入力時に内部フラグがtrueの場合は、すぐに戻ります。それ以外の場合は、別のスレッドが&lt;a href=&quot;#threading.Event.set&quot;&gt; &lt;code&gt;set()&lt;/code&gt; &lt;/a&gt;を呼び出してフラグをtrueに設定するまで、またはオプションのタイムアウトが発生するまでブロックします。</target>
        </trans-unit>
        <trans-unit id="d2058396a2147f5165863444e9ce5b13713a8108" translate="yes" xml:space="preserve">
          <source>Blocking (CPU-bound) code should not be called directly. For example, if a function performs a CPU-intensive calculation for 1 second, all concurrent asyncio Tasks and IO operations would be delayed by 1 second.</source>
          <target state="translated">ブロッキング(CPUに縛られた)コードは、直接呼び出されるべきではありません。例えば、ある関数がCPU負荷の高い計算を1秒間実行した場合、すべての同時実行のasyncioタスクとIO操作は1秒遅れることになります。</target>
        </trans-unit>
        <trans-unit id="323ffdcd95156ec320100a2972820824ccb6d91f" translate="yes" xml:space="preserve">
          <source>BlockingIOError</source>
          <target state="translated">BlockingIOError</target>
        </trans-unit>
        <trans-unit id="92a08db9399061aa0f5eacfe511b7a6126dc9df0" translate="yes" xml:space="preserve">
          <source>BlockingIOError.characters_written</source>
          <target state="translated">BlockingIOError.characters_written</target>
        </trans-unit>
        <trans-unit id="dddf0e18cab12f3c2b4594834412adc72d47d3d6" translate="yes" xml:space="preserve">
          <source>Blocks until all items in the queue have been gotten and processed.</source>
          <target state="translated">キュー内のすべてのアイテムを取得して処理するまでブロックします。</target>
        </trans-unit>
        <trans-unit id="7d44bc449c2a26374800a503f10f3d8949505f40" translate="yes" xml:space="preserve">
          <source>Blue</source>
          <target state="translated">Blue</target>
        </trans-unit>
        <trans-unit id="15913dcb3fc24a61ba6adcc4afcd21df3d2a5af6" translate="yes" xml:space="preserve">
          <source>Body-encode the string &lt;em&gt;string&lt;/em&gt;.</source>
          <target state="translated">文字&lt;em&gt;列stringを&lt;/em&gt;本文エンコードし&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="6718f0f90ac337fe59d6d08c1ec08dbb38b7cc92" translate="yes" xml:space="preserve">
          <source>Bold mode</source>
          <target state="translated">ボールドモード</target>
        </trans-unit>
        <trans-unit id="beddf259d4873df4879b851076af94752cb94065" translate="yes" xml:space="preserve">
          <source>Book by John Grayson (ISBN 1-884777-81-3).</source>
          <target state="translated">ジョン・グレイソン著(ISBN 1-884777-81-3)。</target>
        </trans-unit>
        <trans-unit id="5deb34b87b8d065639971c2d9e0fede0fcbaa391" translate="yes" xml:space="preserve">
          <source>Book by John Ousterhout, the inventor of Tcl.</source>
          <target state="translated">Tclの発明者であるJohn Ousterhout氏の著書。</target>
        </trans-unit>
        <trans-unit id="cba993e6c506a168367bd3edaf5e342b70b7db99" translate="yes" xml:space="preserve">
          <source>Book by Mark Lutz, has excellent coverage of Tkinter.</source>
          <target state="translated">マーク・ルッツ氏の著書で、Tkinterについての取材が充実している。</target>
        </trans-unit>
        <trans-unit id="51b03cb2dbfc1444695bab06adfaeb141fdc235f" translate="yes" xml:space="preserve">
          <source>Book by Mark Roseman about building attractive and modern graphical user interfaces with Python and Tkinter.</source>
          <target state="translated">PythonとTkinterを使った魅力的でモダンなグラフィカルユーザーインターフェースの構築についてのMark Rosemanの本。</target>
        </trans-unit>
        <trans-unit id="786bfd749778b9b25aa01178659c90f4e19011ff" translate="yes" xml:space="preserve">
          <source>Bookkeeping functions</source>
          <target state="translated">簿記機能</target>
        </trans-unit>
        <trans-unit id="f8a8b062c380ba221961a2f8e03c873f4208921d" translate="yes" xml:space="preserve">
          <source>Boolean Operations &amp;mdash; &lt;code&gt;and&lt;/code&gt;, &lt;code&gt;or&lt;/code&gt;, &lt;code&gt;not&lt;/code&gt;</source>
          <target state="translated">ブール演算&amp;mdash; &lt;code&gt;and&lt;/code&gt; 、 &lt;code&gt;or&lt;/code&gt; 、 &lt;code&gt;not&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="21e36e8bd93b3ea3b4b742ce8bb2a6ec3b2ab721" translate="yes" xml:space="preserve">
          <source>Boolean Values</source>
          <target state="translated">ブール値</target>
        </trans-unit>
        <trans-unit id="88306a31305db52140bbd33e277c2a177ea102f3" translate="yes" xml:space="preserve">
          <source>Boolean indicating whether or not the module&amp;rsquo;s &amp;ldquo;origin&amp;rdquo; attribute refers to a loadable location.</source>
          <target state="translated">モジュールの「origin」属性がロード可能な場所を参照しているかどうかを示すブール値。</target>
        </trans-unit>
        <trans-unit id="524796582178b3ce40400d6b1bce1725e41cb620" translate="yes" xml:space="preserve">
          <source>Boolean indicating whether the device has been closed.</source>
          <target state="translated">デバイスが閉じられたかどうかを示すブール値。</target>
        </trans-unit>
        <trans-unit id="3b8b1c68be3b092bc5a2b53c093951beb9f55cb0" translate="yes" xml:space="preserve">
          <source>Boolean operator tokens.</source>
          <target state="translated">ブール演算子トークン。</target>
        </trans-unit>
        <trans-unit id="7ae5f84c90d6d770c192b8c5eb2f83cd02192067" translate="yes" xml:space="preserve">
          <source>Boolean that should be set before &lt;a href=&quot;#http.server.BaseHTTPRequestHandler.handle_one_request&quot;&gt;&lt;code&gt;handle_one_request()&lt;/code&gt;&lt;/a&gt; returns, indicating if another request may be expected, or if the connection should be shut down.</source>
          <target state="translated">&lt;a href=&quot;#http.server.BaseHTTPRequestHandler.handle_one_request&quot;&gt; &lt;code&gt;handle_one_request()&lt;/code&gt; &lt;/a&gt;が戻る前に設定する必要があるブール値。別のリクエストが予想されるか、または接続をシャットダウンする必要があるかを示します。</target>
        </trans-unit>
        <trans-unit id="33269d07fca93166bdf65e0bd7b3092befe1aa4a" translate="yes" xml:space="preserve">
          <source>Boolean value of &lt;code&gt;Enum&lt;/code&gt; classes and members</source>
          <target state="translated">&lt;code&gt;Enum&lt;/code&gt; クラスおよびメンバーのブール値</target>
        </trans-unit>
        <trans-unit id="cb62ebe2f6b3f6e458c9478ab40f08a930df3242" translate="yes" xml:space="preserve">
          <source>Boolean value that is normally &lt;code&gt;False&lt;/code&gt;, but is set to &lt;code&gt;True&lt;/code&gt; if an &lt;a href=&quot;#imaplib.IMAP4.enable&quot;&gt;&lt;code&gt;enable()&lt;/code&gt;&lt;/a&gt; command is successfully issued for the &lt;code&gt;UTF8=ACCEPT&lt;/code&gt; capability.</source>
          <target state="translated">通常は &lt;code&gt;False&lt;/code&gt; ですが、&lt;a href=&quot;#imaplib.IMAP4.enable&quot;&gt; &lt;code&gt;enable()&lt;/code&gt; &lt;/a&gt;コマンドが &lt;code&gt;UTF8=ACCEPT&lt;/code&gt; 機能に対して正常に発行された場合は &lt;code&gt;True&lt;/code&gt; に設定されるブール値。</target>
        </trans-unit>
        <trans-unit id="3d12838d2902df351d82539f77e5196fe220e18b" translate="yes" xml:space="preserve">
          <source>Boolean value. If &lt;code&gt;True&lt;/code&gt;, increment and decrement buttons will cycle from the &lt;code&gt;to&lt;/code&gt; value to the &lt;code&gt;from&lt;/code&gt; value or the &lt;code&gt;from&lt;/code&gt; value to the &lt;code&gt;to&lt;/code&gt; value, respectively.</source>
          <target state="translated">ブール値。 &lt;code&gt;True&lt;/code&gt; の場合、増分ボタンと減分ボタンは、それぞれ &lt;code&gt;to&lt;/code&gt; 値 &lt;code&gt;from&lt;/code&gt; 値へ、または &lt;code&gt;from&lt;/code&gt; 値から &lt;code&gt;to&lt;/code&gt; 値へと循環します。</target>
        </trans-unit>
        <trans-unit id="9245a6ae2d0c51a552e5f3f9fc78c7e345278524" translate="yes" xml:space="preserve">
          <source>Boolean value. If set, the widget selection is linked to the Window Manager selection (which can be returned by invoking Misc.selection_get, for example).</source>
          <target state="translated">ブール値。セットされている場合、ウィジェットの選択範囲はウィンドウマネージャの選択範囲にリンクされます (これは例えば Misc.slection_get を呼び出すことによって返されます)。</target>
        </trans-unit>
        <trans-unit id="2fa9e93e36190ed14338b888b01919ba853c4130" translate="yes" xml:space="preserve">
          <source>Boolean values are the two constant objects &lt;code&gt;False&lt;/code&gt; and &lt;code&gt;True&lt;/code&gt;. They are used to represent truth values (although other values can also be considered false or true). In numeric contexts (for example when used as the argument to an arithmetic operator), they behave like the integers 0 and 1, respectively. The built-in function &lt;a href=&quot;functions#bool&quot;&gt;&lt;code&gt;bool()&lt;/code&gt;&lt;/a&gt; can be used to convert any value to a Boolean, if the value can be interpreted as a truth value (see section &lt;a href=&quot;#truth&quot;&gt;Truth Value Testing&lt;/a&gt; above).</source>
          <target state="translated">ブール値は、 &lt;code&gt;False&lt;/code&gt; と &lt;code&gt;True&lt;/code&gt; の 2つの定数オブジェクトです。それらは真理値を表すために使用されます（ただし、他の値もfalseまたはtrueと見なすことができます）。数値コンテキストでは（たとえば、算術演算子の引数として使用される場合）、それぞれ整数0および1のように動作します。組み込み関数&lt;a href=&quot;functions#bool&quot;&gt; &lt;code&gt;bool()&lt;/code&gt; &lt;/a&gt;を使用して、値を真理値として解釈できる場合は、任意の値をブール値に変換できます（上記の&lt;a href=&quot;#truth&quot;&gt;真理値テストを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="d18c0bfba1757c5e30d0bc7a733fee5173697958" translate="yes" xml:space="preserve">
          <source>Boolean, &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">ブール値、 &lt;code&gt;0&lt;/code&gt; または &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="720fd7e99ee4b1def571b8830a99782dae891a6d" translate="yes" xml:space="preserve">
          <source>Bootstraps &lt;code&gt;pip&lt;/code&gt; into the current or designated environment.</source>
          <target state="translated">現在または指定された環境に &lt;code&gt;pip&lt;/code&gt; をブートストラップします。</target>
        </trans-unit>
        <trans-unit id="71d8f86363b63766bbf05a4f680a13a4e028d724" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;#asyncio.create_subprocess_exec&quot;&gt;&lt;code&gt;create_subprocess_exec()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#asyncio.create_subprocess_shell&quot;&gt;&lt;code&gt;create_subprocess_shell()&lt;/code&gt;&lt;/a&gt; functions return instances of the &lt;em&gt;Process&lt;/em&gt; class. &lt;em&gt;Process&lt;/em&gt; is a high-level wrapper that allows communicating with subprocesses and watching for their completion.</source>
          <target state="translated">両方&lt;a href=&quot;#asyncio.create_subprocess_exec&quot;&gt; &lt;code&gt;create_subprocess_exec()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#asyncio.create_subprocess_shell&quot;&gt; &lt;code&gt;create_subprocess_shell()&lt;/code&gt; &lt;/a&gt;関数は、のインスタンスを返す&lt;em&gt;プロセス&lt;/em&gt;クラス。&lt;em&gt;プロセス&lt;/em&gt;は、サブプロセスとの通信とサブプロセスの完了の監視を可能にする高レベルのラッパーです。</target>
        </trans-unit>
        <trans-unit id="0678a3c848604f505fcb4b2ec36b17b684c82040" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;#patch&quot;&gt;patch&lt;/a&gt; and &lt;a href=&quot;#patch-object&quot;&gt;patch.object&lt;/a&gt; correctly patch and restore descriptors: class methods, static methods and properties. You should patch these on the &lt;em&gt;class&lt;/em&gt; rather than an instance. They also work with &lt;em&gt;some&lt;/em&gt; objects that proxy attribute access, like the &lt;a href=&quot;http://www.voidspace.org.uk/python/weblog/arch_d7_2010_12_04.shtml#e1198&quot;&gt;django settings object&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#patch&quot;&gt;patch&lt;/a&gt;と&lt;a href=&quot;#patch-object&quot;&gt;patch.objectの&lt;/a&gt;両方が記述子を正しくパッチおよび復元します：クラスメソッド、静的メソッドおよびプロパティ。インスタンスではなく、&lt;em&gt;クラスに&lt;/em&gt;これらをパッチする必要があります。また、&lt;a href=&quot;http://www.voidspace.org.uk/python/weblog/arch_d7_2010_12_04.shtml#e1198&quot;&gt;django設定オブジェクト&lt;/a&gt;など、属性アクセスをプロキシする&lt;em&gt;いくつかの&lt;/em&gt;オブジェクトでも機能します。</target>
        </trans-unit>
        <trans-unit id="76150bda2b159ac2e4297d9994115a0259b6b98e" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;#set&quot;&gt;&lt;code&gt;set&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#frozenset&quot;&gt;&lt;code&gt;frozenset&lt;/code&gt;&lt;/a&gt; support set to set comparisons. Two sets are equal if and only if every element of each set is contained in the other (each is a subset of the other). A set is less than another set if and only if the first set is a proper subset of the second set (is a subset, but is not equal). A set is greater than another set if and only if the first set is a proper superset of the second set (is a superset, but is not equal).</source>
          <target state="translated">&lt;a href=&quot;#set&quot;&gt; &lt;code&gt;set&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#frozenset&quot;&gt; &lt;code&gt;frozenset&lt;/code&gt; は&lt;/a&gt;どちらも、set to setの比較をサポートしています。2つのセットが等しいのは、各セットのすべての要素が他のセットに含まれている場合のみです（それぞれが他のセットのサブセットです）。セットが別のセットよりも小さいのは、最初のセットが2番目のセットの適切なサブセットである（サブセットであるが等しくない）場合だけです。最初のセットが2番目のセットの適切なスーパーセットである（スーパーセットであるが等しくない）場合に限り、セットは別のセットよりも大きい。</target>
        </trans-unit>
        <trans-unit id="da97eda7ef7c14e12c43a76638620729271ea928" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;functions#getattr&quot;&gt;&lt;code&gt;getattr()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;functions#hasattr&quot;&gt;&lt;code&gt;hasattr()&lt;/code&gt;&lt;/a&gt; can trigger code execution when fetching or checking for the existence of attributes. Descriptors, like properties, will be invoked and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattr__&quot;&gt;&lt;code&gt;__getattr__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattribute__&quot;&gt;&lt;code&gt;__getattribute__()&lt;/code&gt;&lt;/a&gt; may be called.</source>
          <target state="translated">&lt;a href=&quot;functions#hasattr&quot;&gt; &lt;code&gt;hasattr()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;functions#getattr&quot;&gt; &lt;code&gt;getattr()&lt;/code&gt; &lt;/a&gt;とhasattr（）はどちらも、属性の存在をフェッチまたはチェックするときにコード実行をトリガーできます。プロパティなどの記述子が呼び出され、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattr__&quot;&gt; &lt;code&gt;__getattr__()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__getattribute__&quot;&gt; &lt;code&gt;__getattribute__()&lt;/code&gt; &lt;/a&gt;が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6378a682eec1b6aafdd9cf2087b6ced6760eeb7a" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;functions#getattr&quot;&gt;&lt;code&gt;getattr()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;functions#hasattr&quot;&gt;&lt;code&gt;hasattr()&lt;/code&gt;&lt;/a&gt; can trigger code execution when fetching or checking for the existence of attributes. Descriptors, like properties, will be invoked and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getattr__&quot;&gt;&lt;code&gt;__getattr__()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getattribute__&quot;&gt;&lt;code&gt;__getattribute__()&lt;/code&gt;&lt;/a&gt; may be called.</source>
          <target state="translated">&lt;a href=&quot;functions#hasattr&quot;&gt; &lt;code&gt;hasattr()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;functions#getattr&quot;&gt; &lt;code&gt;getattr()&lt;/code&gt; &lt;/a&gt;とhasattr（）はどちらも、属性の存在をフェッチまたはチェックするときにコードの実行をトリガーできます。プロパティと同様に記述子が呼び出され、&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getattr__&quot;&gt; &lt;code&gt;__getattr__()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__getattribute__&quot;&gt; &lt;code&gt;__getattribute__()&lt;/code&gt; &lt;/a&gt;が呼び出される場合があります。</target>
        </trans-unit>
        <trans-unit id="bc6402ce03954c13678974692e26ec34f0d6f91d" translate="yes" xml:space="preserve">
          <source>Both &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-14&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt; and Netscape cookies are covered. RFC 2965 handling is switched off by default.</source>
          <target state="translated">どちらも&lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-14&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt;とNetscapeクッキーが覆われています。RFC 2965の処理はデフォルトでオフになっています。</target>
        </trans-unit>
        <trans-unit id="70830bd6073fa55b1bb77c2a936de0cd6ec08ac0" translate="yes" xml:space="preserve">
          <source>Both &lt;em&gt;input_charset&lt;/em&gt; and &lt;em&gt;output_charset&lt;/em&gt; must have Unicode codec entries in the module&amp;rsquo;s character set-to-codec mapping; use &lt;a href=&quot;#email.charset.add_codec&quot;&gt;&lt;code&gt;add_codec()&lt;/code&gt;&lt;/a&gt; to add codecs the module does not know about. See the &lt;a href=&quot;codecs#module-codecs&quot;&gt;&lt;code&gt;codecs&lt;/code&gt;&lt;/a&gt; module&amp;rsquo;s documentation for more information.</source>
          <target state="translated">&lt;em&gt;input_charset&lt;/em&gt;と&lt;em&gt;output_charsetの&lt;/em&gt;両方で、モジュールの文字セットからコーデックへのマッピングにUnicodeコーデックエントリが必要です。&lt;a href=&quot;#email.charset.add_codec&quot;&gt; &lt;code&gt;add_codec()&lt;/code&gt; &lt;/a&gt;を使用して、モジュールが認識していないコーデックを追加します。詳細については、&lt;a href=&quot;codecs#module-codecs&quot;&gt; &lt;code&gt;codecs&lt;/code&gt; &lt;/a&gt;モジュールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ead411397e614cee6d46ba321f1ee1902f0d3551" translate="yes" xml:space="preserve">
          <source>Both binary and decimal floating point are implemented in terms of published standards. While the built-in float type exposes only a modest portion of its capabilities, the decimal module exposes all required parts of the standard. When needed, the programmer has full control over rounding and signal handling. This includes an option to enforce exact arithmetic by using exceptions to block any inexact operations.</source>
          <target state="translated">2進数と10進数の浮動小数点の両方が、公開されている標準規格に基づいて実装されています。組み込みの浮動小数点型は、その機能のごく一部しか公開していませんが、10進モジュールは標準の必要な部分をすべて公開しています。必要に応じて、プログラマは丸めや信号処理を完全に制御することができます。これには、例外を使用して不正確な演算をブロックすることで正確な演算を強制するオプションが含まれています。</target>
        </trans-unit>
        <trans-unit id="412827b4525eb3aa564b3e476acee9a6c164827a" translate="yes" xml:space="preserve">
          <source>Both bytes and bytearray objects support the &lt;a href=&quot;#typesseq-common&quot;&gt;common&lt;/a&gt; sequence operations. They interoperate not just with operands of the same type, but with any &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;. Due to this flexibility, they can be freely mixed in operations without causing errors. However, the return type of the result may depend on the order of operands.</source>
          <target state="translated">bytesオブジェクトとbytearrayオブジェクトはどちらも、&lt;a href=&quot;#typesseq-common&quot;&gt;一般的な&lt;/a&gt;シーケンス操作をサポートしています。これらは、同じ型のオペランドだけでなく、&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-bytes-like-object&quot;&gt;バイトのようなオブジェクト&lt;/a&gt;と相互運用します。この柔軟性により、エラーを発生させることなく、操作に自由に混在させることができます。ただし、結果の戻り値の型は、オペランドの順序によって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="b726eeef2b94c2c79f2826c463146ce420620ef3" translate="yes" xml:space="preserve">
          <source>Both bytes and bytearray objects support the &lt;a href=&quot;#typesseq-common&quot;&gt;common&lt;/a&gt; sequence operations. They interoperate not just with operands of the same type, but with any &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;. Due to this flexibility, they can be freely mixed in operations without causing errors. However, the return type of the result may depend on the order of operands.</source>
          <target state="translated">Both bytes and bytearray objects support the &lt;a href=&quot;#typesseq-common&quot;&gt;common&lt;/a&gt; sequence operations. They interoperate not just with operands of the same type, but with any &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-bytes-like-object&quot;&gt;bytes-like object&lt;/a&gt;. Due to this flexibility, they can be freely mixed in operations without causing errors. However, the return type of the result may depend on the order of operands.</target>
        </trans-unit>
        <trans-unit id="906dcaa49ef8791b7ba8c7a06dc1b0bb61aebfb9" translate="yes" xml:space="preserve">
          <source>Both functions return a &lt;code&gt;Document&lt;/code&gt; object representing the content of the document.</source>
          <target state="translated">どちらの関数も、 &lt;code&gt;Document&lt;/code&gt; のコンテンツを表すDocumentオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="9308f7b7021d711fb78ce76e026ff4c70b252ac9" translate="yes" xml:space="preserve">
          <source>Both of these factory functions are called with the result type as first argument, and the callback functions expected argument types as the remaining arguments.</source>
          <target state="translated">これらのファクトリー関数はどちらも結果の型を第一引数に、コールバック関数の期待される引数の型を残りの引数にして呼び出されます。</target>
        </trans-unit>
        <trans-unit id="da4ed773045485a36fd9e210e667a5f7330053db" translate="yes" xml:space="preserve">
          <source>Both parameters are raw strings of the names. &lt;code&gt;asname&lt;/code&gt; can be &lt;code&gt;None&lt;/code&gt; if the regular name is to be used.</source>
          <target state="translated">Both parameters are raw strings of the names. &lt;code&gt;asname&lt;/code&gt; can be &lt;code&gt;None&lt;/code&gt; if the regular name is to be used.</target>
        </trans-unit>
        <trans-unit id="e40771c73ac3142db1cd6a2924473530d9c63415" translate="yes" xml:space="preserve">
          <source>Both patterns and strings to be searched can be Unicode strings (&lt;a href=&quot;stdtypes#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;) as well as 8-bit strings (&lt;a href=&quot;stdtypes#bytes&quot;&gt;&lt;code&gt;bytes&lt;/code&gt;&lt;/a&gt;). However, Unicode strings and 8-bit strings cannot be mixed: that is, you cannot match a Unicode string with a byte pattern or vice-versa; similarly, when asking for a substitution, the replacement string must be of the same type as both the pattern and the search string.</source>
          <target state="translated">検索するパターンと文字列はどちらも、Unicode文字列（&lt;a href=&quot;stdtypes#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;）と8ビット文字列（&lt;a href=&quot;stdtypes#bytes&quot;&gt; &lt;code&gt;bytes&lt;/code&gt; &lt;/a&gt;）のどちらでもかまいません。ただし、Unicode文字列と8ビット文字列を混在させることはできません。つまり、Unicode文字列をバイトパターンと照合したり、その逆を行ったりすることはできません。同様に、置換を要求する場合、置換文字列は、パターンと検索文字列の両方と同じタイプである必要があります。</target>
        </trans-unit>
        <trans-unit id="60524711bf7cd6ddd3a6f75407a2f25953c838b6" translate="yes" xml:space="preserve">
          <source>Both the &lt;a href=&quot;#module-profile&quot;&gt;&lt;code&gt;profile&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#module-cProfile&quot;&gt;&lt;code&gt;cProfile&lt;/code&gt;&lt;/a&gt; modules provide the following functions:</source>
          <target state="translated">&lt;a href=&quot;#module-profile&quot;&gt; &lt;code&gt;profile&lt;/code&gt; &lt;/a&gt;モジュールと&lt;a href=&quot;#module-cProfile&quot;&gt; &lt;code&gt;cProfile&lt;/code&gt; &lt;/a&gt;モジュールの両方が次の機能を提供します。</target>
        </trans-unit>
        <trans-unit id="a8fa6107edcf0d7fe5de5f35cf96f9376975a492" translate="yes" xml:space="preserve">
          <source>Both the HTTP and HTTPS transports support the URL syntax extension for HTTP Basic Authentication: &lt;code&gt;http://user:pass@host:port/path&lt;/code&gt;. The &lt;code&gt;user:pass&lt;/code&gt; portion will be base64-encoded as an HTTP &amp;lsquo;Authorization&amp;rsquo; header, and sent to the remote server as part of the connection process when invoking an XML-RPC method. You only need to use this if the remote server requires a Basic Authentication user and password. If an HTTPS URL is provided, &lt;em&gt;context&lt;/em&gt; may be &lt;a href=&quot;ssl#ssl.SSLContext&quot;&gt;&lt;code&gt;ssl.SSLContext&lt;/code&gt;&lt;/a&gt; and configures the SSL settings of the underlying HTTPS connection.</source>
          <target state="translated">HTTPトランスポートとHTTPSトランスポートはどちらも、HTTP基本認証のURL構文拡張 &lt;code&gt;http://user:pass@host:port/path&lt;/code&gt; サポートしています。 &lt;code&gt;user:pass&lt;/code&gt; 部分はHTTP「認可」ヘッダとしてbase64エンコード、およびXML-RPCメソッドを呼び出すときに、接続プロセスの一部としてリモートサーバに送信されます。リモートサーバーで基本認証のユーザーとパスワードが必要な場合にのみ、これを使用する必要があります。 HTTPS URLが提供されている場合、&lt;em&gt;コンテキスト&lt;/em&gt;は&lt;a href=&quot;ssl#ssl.SSLContext&quot;&gt; &lt;code&gt;ssl.SSLContext&lt;/code&gt; で&lt;/a&gt;あり、基礎となるHTTPS接続のSSL設定を構成します。</target>
        </trans-unit>
        <trans-unit id="e1cca2d2cf2cc882468f5dfa827706c1805375d8" translate="yes" xml:space="preserve">
          <source>Both the regular Netscape cookie protocol and the protocol defined by &lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2965&lt;/strong&gt;&lt;/a&gt; are handled. RFC 2965 handling is switched off by default. &lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt; cookies are parsed as Netscape cookies and subsequently treated either as Netscape or RFC 2965 cookies according to the &amp;lsquo;policy&amp;rsquo; in effect. Note that the great majority of cookies on the Internet are Netscape cookies. &lt;a href=&quot;#module-http.cookiejar&quot;&gt;&lt;code&gt;http.cookiejar&lt;/code&gt;&lt;/a&gt; attempts to follow the de-facto Netscape cookie protocol (which differs substantially from that set out in the original Netscape specification), including taking note of the &lt;code&gt;max-age&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; cookie-attributes introduced with RFC 2965.</source>
          <target state="translated">通常のNetscape Cookieプロトコルと&lt;a href=&quot;https://tools.ietf.org/html/rfc2965.html&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;RFC 2965で&lt;/strong&gt;&lt;/a&gt;定義されたプロトコルの両方が処理され&lt;strong&gt;ます&lt;/strong&gt;。 RFC 2965の処理はデフォルトでオフになっています。&lt;a href=&quot;https://tools.ietf.org/html/rfc2109.html&quot; id=&quot;index-1&quot;&gt;&lt;strong&gt;RFC 2109&lt;/strong&gt;&lt;/a&gt; CookieはNetscape Cookieとして解析され、その後、有効な「ポリシー」に従ってNetscapeまたはRFC 2965 Cookieとして処理されます。インターネット上のCookieの大部分はNetscape Cookieであることに注意してください。&lt;a href=&quot;#module-http.cookiejar&quot;&gt; &lt;code&gt;http.cookiejar&lt;/code&gt; &lt;/a&gt;は、RFC 2965で導入された &lt;code&gt;max-age&lt;/code&gt; および &lt;code&gt;port&lt;/code&gt; cookie-attributesの記録を含め、事実上のNetscape cookieプロトコル（元のNetscape仕様で設定されたものとは大幅に異なります）に準拠しようとします。</target>
        </trans-unit>
        <trans-unit id="7dbcf66e0e3c0a5508b03432a2f3df368782d85e" translate="yes" xml:space="preserve">
          <source>Both ways are described in section &lt;a href=&quot;#sqlite3-module-contents&quot;&gt;Module functions and constants&lt;/a&gt;, in the entries for the constants &lt;a href=&quot;#sqlite3.PARSE_DECLTYPES&quot;&gt;&lt;code&gt;PARSE_DECLTYPES&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#sqlite3.PARSE_COLNAMES&quot;&gt;&lt;code&gt;PARSE_COLNAMES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">両方の方法については、セクション&lt;a href=&quot;#sqlite3.PARSE_DECLTYPES&quot;&gt; &lt;code&gt;PARSE_DECLTYPES&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#sqlite3.PARSE_COLNAMES&quot;&gt; &lt;code&gt;PARSE_COLNAMES&lt;/code&gt; の&lt;/a&gt;エントリの&lt;a href=&quot;#sqlite3-module-contents&quot;&gt;モジュール関数と定数&lt;/a&gt;で説明しています。</target>
        </trans-unit>
        <trans-unit id="cce7f2f2f0dc525117a70d581d9c335212145e5b" translate="yes" xml:space="preserve">
          <source>Bottom</source>
          <target state="translated">Bottom</target>
        </trans-unit>
        <trans-unit id="e1dbd823dfdfc2d17617830a8f74f4d932681cc4" translate="yes" xml:space="preserve">
          <source>Bottom-left corner</source>
          <target state="translated">左下隅</target>
        </trans-unit>
        <trans-unit id="80aa1874eb99dccda2276381f9f4ffdec7143eaf" translate="yes" xml:space="preserve">
          <source>Bottom-right corner</source>
          <target state="translated">右下のコーナー</target>
        </trans-unit>
        <trans-unit id="b2e002ea925c38ed1d57bf37ef5d40426841b702" translate="yes" xml:space="preserve">
          <source>Bounded Semaphore is a version of &lt;a href=&quot;#asyncio.Semaphore&quot;&gt;&lt;code&gt;Semaphore&lt;/code&gt;&lt;/a&gt; that raises a &lt;a href=&quot;exceptions#ValueError&quot;&gt;&lt;code&gt;ValueError&lt;/code&gt;&lt;/a&gt; in &lt;a href=&quot;#asyncio.Semaphore.release&quot;&gt;&lt;code&gt;release()&lt;/code&gt;&lt;/a&gt; if it increases the internal counter above the initial &lt;em&gt;value&lt;/em&gt;.</source>
          <target state="translated">バインドされたセマフォは、内部カウンタが初期&lt;em&gt;値を&lt;/em&gt;超えた&lt;a href=&quot;exceptions#ValueError&quot;&gt; &lt;code&gt;ValueError&lt;/code&gt; &lt;/a&gt;に&lt;a href=&quot;#asyncio.Semaphore.release&quot;&gt; &lt;code&gt;release()&lt;/code&gt; で&lt;/a&gt;ValueErrorを発生させるバージョンの&lt;a href=&quot;#asyncio.Semaphore&quot;&gt; &lt;code&gt;Semaphore&lt;/code&gt; &lt;/a&gt;&lt;em&gt;です&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f27d46d2bc64f4ff7fc02b97b058167483c819b5" translate="yes" xml:space="preserve">
          <source>Bounded length deques provide functionality similar to the &lt;code&gt;tail&lt;/code&gt; filter in Unix:</source>
          <target state="translated">バインドされた長さの両端キューは、Unixの &lt;code&gt;tail&lt;/code&gt; フィルターと同様の機能を提供します。</target>
        </trans-unit>
        <trans-unit id="a2756e8ad9a82c890a07dc2ba959f75c6165deec" translate="yes" xml:space="preserve">
          <source>BoundedSemaphore</source>
          <target state="translated">BoundedSemaphore</target>
        </trans-unit>
        <trans-unit id="db506c7b5783724a0ae667647def25dde4ac8c16" translate="yes" xml:space="preserve">
          <source>Branch-Call-Jump (BCJ) filters:</source>
          <target state="translated">ブランチ・コールジャンプ(BCJ)フィルター。</target>
        </trans-unit>
        <trans-unit id="6818e738c2b21bdaaa174d945a5a8d955f9b4660" translate="yes" xml:space="preserve">
          <source>Break internal references within the DOM so that it will be garbage collected on versions of Python without cyclic GC. Even when cyclic GC is available, using this can make large amounts of memory available sooner, so calling this on DOM objects as soon as they are no longer needed is good practice. This only needs to be called on the &lt;code&gt;Document&lt;/code&gt; object, but may be called on child nodes to discard children of that node.</source>
          <target state="translated">DOM内の内部参照を破棄して、循環GCのないバージョンのPythonでガベージコレクションが行われるようにします。サイクリックGCが使用可能な場合でも、これを使用すると大量のメモリをすぐに使用できるようになる可能性があるため、DOMオブジェクトで不要になったらすぐにこれを呼び出すことをお勧めします。これは &lt;code&gt;Document&lt;/code&gt; オブジェクトでのみ呼び出す必要がありますが、そのノードの子を破棄するために子ノードで呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="057f53976b47c840e7d4ea51556fe76a4983b160" translate="yes" xml:space="preserve">
          <source>Break key (unreliable)</source>
          <target state="translated">鍵を壊す(信頼できない</target>
        </trans-unit>
        <trans-unit id="26d339cfcc10acc619584ccfcecd8aee58a08229" translate="yes" xml:space="preserve">
          <source>Breakpoints are indexed by number through a list called &lt;code&gt;bpbynumber&lt;/code&gt; and by &lt;code&gt;(file, line)&lt;/code&gt; pairs through &lt;code&gt;bplist&lt;/code&gt;. The former points to a single instance of class &lt;a href=&quot;#bdb.Breakpoint&quot;&gt;&lt;code&gt;Breakpoint&lt;/code&gt;&lt;/a&gt;. The latter points to a list of such instances since there may be more than one breakpoint per line.</source>
          <target state="translated">ブレークポイントはリストと呼ば介し番号によってインデックス付けされ &lt;code&gt;bpbynumber&lt;/code&gt; によって &lt;code&gt;(file, line)&lt;/code&gt; を介して対 &lt;code&gt;bplist&lt;/code&gt; の。前者は&lt;a href=&quot;#bdb.Breakpoint&quot;&gt; &lt;code&gt;Breakpoint&lt;/code&gt; &lt;/a&gt;クラスの単一のインスタンスを指しています。1行に複数のブレークポイントがある場合があるため、後者はそのようなインスタンスのリストを指します。</target>
        </trans-unit>
        <trans-unit id="b10a6960c4012f359c0ce6bee9b19ff172792a7d" translate="yes" xml:space="preserve">
          <source>Brent Welch&amp;rsquo;s encyclopedic book.</source>
          <target state="translated">ブレント・ウェルチの百科事典。</target>
        </trans-unit>
        <trans-unit id="5457d94057ed4418eb771b358e421dae5522d307" translate="yes" xml:space="preserve">
          <source>Broadly speaking, &lt;code&gt;d.strftime(fmt)&lt;/code&gt; acts like the &lt;a href=&quot;time#module-time&quot;&gt;&lt;code&gt;time&lt;/code&gt;&lt;/a&gt; module&amp;rsquo;s &lt;code&gt;time.strftime(fmt, d.timetuple())&lt;/code&gt; although not all objects support a &lt;code&gt;timetuple()&lt;/code&gt; method.</source>
          <target state="translated">大まかに言えば、すべてのオブジェクトが &lt;code&gt;timetuple()&lt;/code&gt; メソッドをサポートしているわけではありませんが、 &lt;code&gt;d.strftime(fmt)&lt;/code&gt; は&lt;a href=&quot;time#module-time&quot;&gt; &lt;code&gt;time&lt;/code&gt; &lt;/a&gt;モジュールの &lt;code&gt;time.strftime(fmt, d.timetuple())&lt;/code&gt; ように機能します。</target>
        </trans-unit>
        <trans-unit id="c7dfd8323fd5e72ce649953eb9bbb100abdbf328" translate="yes" xml:space="preserve">
          <source>Broken pipe</source>
          <target state="translated">パイプのかたまり</target>
        </trans-unit>
        <trans-unit id="f987aa52401269ae9bd2277e6533a55308a7fc04" translate="yes" xml:space="preserve">
          <source>Broken pipe: write to pipe with no readers.</source>
          <target state="translated">壊れたパイプ:読み手のいないパイプに書き込む。</target>
        </trans-unit>
        <trans-unit id="46eaefda847b8f294ab091c272ac7c3caec75b7d" translate="yes" xml:space="preserve">
          <source>BrokenPipeError</source>
          <target state="translated">BrokenPipeError</target>
        </trans-unit>
        <trans-unit id="65cda754ede1327c252b27907e2e257c94decd6f" translate="yes" xml:space="preserve">
          <source>Browser Controller Objects</source>
          <target state="translated">ブラウザコントローラオブジェクト</target>
        </trans-unit>
        <trans-unit id="a327e47ded8f65f6d258b4a730e569ee168be6db" translate="yes" xml:space="preserve">
          <source>Browser controllers provide these methods which parallel three of the module-level convenience functions:</source>
          <target state="translated">ブラウザコントローラは、モジュールレベルの便利な関数の3つを並列したこれらのメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="cce48398db484398ea1c477d2844426c417b73bf" translate="yes" xml:space="preserve">
          <source>Buffer overflow</source>
          <target state="translated">バッファオーバーフロー</target>
        </trans-unit>
        <trans-unit id="52b12a6415af8c93a85ddb213e23fb21922c5ef9" translate="yes" xml:space="preserve">
          <source>Buffer size in bytes for sending a file-like message body.</source>
          <target state="translated">ファイルライクなメッセージボディを送信するためのバッファサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="25d5353daf56aa3d45af53312311f4d3864fffdd" translate="yes" xml:space="preserve">
          <source>Buffer the bytes &lt;em&gt;data&lt;/em&gt; for transmission to the client. It&amp;rsquo;s okay if this method actually transmits the data; &lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt;&lt;code&gt;BaseHandler&lt;/code&gt;&lt;/a&gt; just separates write and flush operations for greater efficiency when the underlying system actually has such a distinction.</source>
          <target state="translated">クライアントに送信するためにバイト&lt;em&gt;データ&lt;/em&gt;をバッファリングします。このメソッドが実際にデータを送信しても問題ありません。基本となるシステムが実際にそのような違いを持っ​​ている場合、&lt;a href=&quot;#wsgiref.handlers.BaseHandler&quot;&gt; &lt;code&gt;BaseHandler&lt;/code&gt; &lt;/a&gt;は書き込み操作とフラッシュ操作を分離するだけで効率を高めます。</target>
        </trans-unit>
        <trans-unit id="657141fd493f1544370d627da1300193e53e95d7" translate="yes" xml:space="preserve">
          <source>Buffer underflow</source>
          <target state="translated">バッファアンダーフロー</target>
        </trans-unit>
        <trans-unit id="686e3ac1e8c5ee3c1c5629d53729cf9e049cd6ce" translate="yes" xml:space="preserve">
          <source>BufferError</source>
          <target state="translated">BufferError</target>
        </trans-unit>
        <trans-unit id="c7b39b7a30837e3319a6b2c6ed8a735c8561e2c6" translate="yes" xml:space="preserve">
          <source>Buffered I/O streams provide a higher-level interface to an I/O device than raw I/O does.</source>
          <target state="translated">バッファ付きI/Oストリームは、生のI/OよりもI/Oデバイスに高レベルのインターフェイスを提供します。</target>
        </trans-unit>
        <trans-unit id="959e8e27a1a7517d9d6fea8d34bd9b957b635286" translate="yes" xml:space="preserve">
          <source>Buffered Protocols can be used with any event loop method that supports &lt;a href=&quot;#streaming-protocols&quot;&gt;Streaming Protocols&lt;/a&gt;.</source>
          <target state="translated">バッファプロトコルは、&lt;a href=&quot;#streaming-protocols&quot;&gt;ストリーミングプロトコル&lt;/a&gt;をサポートする任意のイベントループメソッドで使用できます。</target>
        </trans-unit>
        <trans-unit id="574102792f7c7c7e47baae36d954590700cb065f" translate="yes" xml:space="preserve">
          <source>Buffered Streaming Protocols</source>
          <target state="translated">バッファ付きストリーミングプロトコル</target>
        </trans-unit>
        <trans-unit id="b311ee6c0f812e0972743c0b62829df0f807921a" translate="yes" xml:space="preserve">
          <source>Buffered Streams</source>
          <target state="translated">バッファ付きストリーム</target>
        </trans-unit>
        <trans-unit id="c8eea1b80ba437eb2c7d9d8e4a7a1c0c36ddce4e" translate="yes" xml:space="preserve">
          <source>Bugs</source>
          <target state="translated">Bugs</target>
        </trans-unit>
        <trans-unit id="e2a08d31bdd8d081756ba38c56ba4d641e93dc37" translate="yes" xml:space="preserve">
          <source>Build a pair of connected socket objects using the given address family, socket type, and protocol number. Address family, socket type, and protocol number are as for the &lt;a href=&quot;#socket.socket&quot;&gt;&lt;code&gt;socket()&lt;/code&gt;&lt;/a&gt; function above. The default family is &lt;a href=&quot;#socket.AF_UNIX&quot;&gt;&lt;code&gt;AF_UNIX&lt;/code&gt;&lt;/a&gt; if defined on the platform; otherwise, the default is &lt;a href=&quot;#socket.AF_INET&quot;&gt;&lt;code&gt;AF_INET&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたアドレスファミリ、ソケットタイプ、およびプロトコル番号を使用して、接続されたソケットオブジェクトのペアを構築します。アドレスファミリ、ソケットタイプ、およびプロトコル番号は、上記の&lt;a href=&quot;#socket.socket&quot;&gt; &lt;code&gt;socket()&lt;/code&gt; &lt;/a&gt;関数と同じです。プラットフォームで定義されている場合、デフォルトのファミリーは&lt;a href=&quot;#socket.AF_UNIX&quot;&gt; &lt;code&gt;AF_UNIX&lt;/code&gt; &lt;/a&gt;です。それ以外の場合、デフォルトは&lt;a href=&quot;#socket.AF_INET&quot;&gt; &lt;code&gt;AF_INET&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="6e9656b5fcacde2351e066c227427c3e012c98d2" translate="yes" xml:space="preserve">
          <source>Building XML documents</source>
          <target state="translated">XML文書の構築</target>
        </trans-unit>
        <trans-unit id="9fa5c035dd72ed1a6c59d2333e838d715c597849" translate="yes" xml:space="preserve">
          <source>Building generic types</source>
          <target state="translated">汎用型の構築</target>
        </trans-unit>
        <trans-unit id="bd6340131dc0513bc11d497bc3d1cf2f8b579961" translate="yes" xml:space="preserve">
          <source>Built-in Constants</source>
          <target state="translated">内蔵定数</target>
        </trans-unit>
        <trans-unit id="82e330488e4f4db6f630ff4b0e83b77d370d478e" translate="yes" xml:space="preserve">
          <source>Built-in Exceptions</source>
          <target state="translated">組み込みの例外</target>
        </trans-unit>
        <trans-unit id="d2c05904ba07a6ff264de1d75f78c6ff5dce9860" translate="yes" xml:space="preserve">
          <source>Built-in Functions</source>
          <target state="translated">内蔵機能</target>
        </trans-unit>
        <trans-unit id="9383071c87bb3c0b8b13c806952ce07e9c48a3bd" translate="yes" xml:space="preserve">
          <source>Built-in Types</source>
          <target state="translated">内蔵タイプ</target>
        </trans-unit>
        <trans-unit id="f2f9b8a4a5c37edcd59988672dfcfd3c6c2d4a94" translate="yes" xml:space="preserve">
          <source>Bulgarian, Byelorussian, Macedonian, Russian, Serbian</source>
          <target state="translated">ブルガリア語、ベラルーシ語、マケドニア語、ロシア語、セルビア語</target>
        </trans-unit>
        <trans-unit id="484a7d24c1efecafaa0613f78c13ce044b371cb5" translate="yes" xml:space="preserve">
          <source>Bus error (bad memory access).</source>
          <target state="translated">バスエラー(メモリアクセス不良)。</target>
        </trans-unit>
        <trans-unit id="f07f4711cba2866b61759ea0e7b48922ec7fe786" translate="yes" xml:space="preserve">
          <source>But for strings with more than &lt;code&gt;sys.float_info.dig&lt;/code&gt; significant digits, this isn&amp;rsquo;t always true:</source>
          <target state="translated">しかし、有効桁数が &lt;code&gt;sys.float_info.dig&lt;/code&gt; を超える文字列の場合、これは常に正しいとは限りません。</target>
        </trans-unit>
        <trans-unit id="004c5cf93a775636561b365abba996971a9aedc3" translate="yes" xml:space="preserve">
          <source>But if we pass a &lt;em&gt;buffer_callback&lt;/em&gt; and then give back the accumulated buffers when unserializing, we are able to get back the original object:</source>
          <target state="translated">しかし、&lt;em&gt;buffer_callback&lt;/em&gt;を渡してから、&lt;em&gt;シリアライズを解除する&lt;/em&gt;ときに蓄積されたバッファーを&lt;em&gt;返却する&lt;/em&gt;と、元のオブジェクトを取得できます。</target>
        </trans-unit>
        <trans-unit id="a9a6dc0dea2456e6fdbe63316e135e168e69bbbc" translate="yes" xml:space="preserve">
          <source>But this is allowed:</source>
          <target state="translated">しかし、これは許されています。</target>
        </trans-unit>
        <trans-unit id="bcc92d564bd4808e09d06300f9cf1c685ab17806" translate="yes" xml:space="preserve">
          <source>By &amp;ldquo;installed package&amp;rdquo; we generally mean a third-party package installed into Python&amp;rsquo;s &lt;code&gt;site-packages&lt;/code&gt; directory via tools such as &lt;a href=&quot;https://pypi.org/project/pip/&quot;&gt;pip&lt;/a&gt;. Specifically, it means a package with either a discoverable &lt;code&gt;dist-info&lt;/code&gt; or &lt;code&gt;egg-info&lt;/code&gt; directory, and metadata defined by &lt;a href=&quot;https://www.python.org/dev/peps/pep-0566&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 566&lt;/strong&gt;&lt;/a&gt; or its older specifications. By default, package metadata can live on the file system or in zip archives on &lt;a href=&quot;sys#sys.path&quot;&gt;&lt;code&gt;sys.path&lt;/code&gt;&lt;/a&gt;. Through an extension mechanism, the metadata can live almost anywhere.</source>
          <target state="translated">By &amp;ldquo;installed package&amp;rdquo; we generally mean a third-party package installed into Python&amp;rsquo;s &lt;code&gt;site-packages&lt;/code&gt; directory via tools such as &lt;a href=&quot;https://pypi.org/project/pip/&quot;&gt;pip&lt;/a&gt;. Specifically, it means a package with either a discoverable &lt;code&gt;dist-info&lt;/code&gt; or &lt;code&gt;egg-info&lt;/code&gt; directory, and metadata defined by &lt;a href=&quot;https://www.python.org/dev/peps/pep-0566&quot; id=&quot;index-0&quot;&gt;&lt;strong&gt;PEP 566&lt;/strong&gt;&lt;/a&gt; or its older specifications. By default, package metadata can live on the file system or in zip archives on &lt;a href=&quot;sys#sys.path&quot;&gt; &lt;code&gt;sys.path&lt;/code&gt; &lt;/a&gt;. Through an extension mechanism, the metadata can live almost anywhere.</target>
        </trans-unit>
        <trans-unit id="4a6147a8ef54b0c6f733b2e259793dcd5ecdd996" translate="yes" xml:space="preserve">
          <source>By &amp;ldquo;installed package&amp;rdquo; we generally mean a third-party package installed into Python&amp;rsquo;s &lt;code&gt;site-packages&lt;/code&gt; directory via tools such as &lt;a href=&quot;https://pypi.org/project/pip/&quot;&gt;pip&lt;/a&gt;. Specifically, it means a package with either a discoverable &lt;code&gt;dist-info&lt;/code&gt; or &lt;code&gt;egg-info&lt;/code&gt; directory, and metadata defined by &lt;a href=&quot;https://www.python.org/dev/peps/pep-0566/&quot;&gt;PEP 566&lt;/a&gt; or its older specifications. By default, package metadata can live on the file system or in zip archives on &lt;code&gt;sys.path&lt;/code&gt;. Through an extension mechanism, the metadata can live almost anywhere.</source>
          <target state="translated">「インストール済みパッケージ」とは、一般に、&lt;a href=&quot;https://pypi.org/project/pip/&quot;&gt;pip&lt;/a&gt;などのツールを介してPythonの &lt;code&gt;site-packages&lt;/code&gt; ディレクトリにインストールされたサードパーティパッケージを意味します。具体的には、発見可能な &lt;code&gt;dist-info&lt;/code&gt; または &lt;code&gt;egg-info&lt;/code&gt; ディレクトリのいずれかと、&lt;a href=&quot;https://www.python.org/dev/peps/pep-0566/&quot;&gt;PEP 566&lt;/a&gt;またはその古い仕様で定義されたメタデータを含むパッケージを意味します。デフォルトでは、パッケージメタデータはファイルシステム上または &lt;code&gt;sys.path&lt;/code&gt; 上のzipアーカイブ内に存在できます。拡張メカニズムを通じて、メタデータはほとんどどこにでも存在できます。</target>
        </trans-unit>
        <trans-unit id="eb6eed428fae77be28a2a3bf7fc36fab40ed7e17" translate="yes" xml:space="preserve">
          <source>By combining together these and similar commands, intricate shapes and pictures can easily be drawn.</source>
          <target state="translated">これらのコマンドと似たようなコマンドを組み合わせることで、複雑な形や絵を簡単に描くことができます。</target>
        </trans-unit>
        <trans-unit id="286ee8278fd8ab4e0bb68f3b03113179bc8da4c6" translate="yes" xml:space="preserve">
          <source>By contrast, if you create the SSL context by calling the &lt;a href=&quot;#ssl.SSLContext&quot;&gt;&lt;code&gt;SSLContext&lt;/code&gt;&lt;/a&gt; constructor yourself, it will not have certificate validation nor hostname checking enabled by default. If you do so, please read the paragraphs below to achieve a good security level.</source>
          <target state="translated">対照的に、&lt;a href=&quot;#ssl.SSLContext&quot;&gt; &lt;code&gt;SSLContext&lt;/code&gt; &lt;/a&gt;コンストラクターを自分で呼び出すことによってSSLコンテキストを作成する場合、証明書の検証もホスト名チェックもデフォルトで有効になりません。その場合は、以下の段落を読んで、適切なセキュリティレベルを達成してください。</target>
        </trans-unit>
        <trans-unit id="4925b83b2b2b23aaf1c66fff18b8c0029cc678e1" translate="yes" xml:space="preserve">
          <source>By default &lt;a href=&quot;#module-shutil&quot;&gt;&lt;code&gt;shutil&lt;/code&gt;&lt;/a&gt; provides these formats:</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;#module-shutil&quot;&gt; &lt;code&gt;shutil&lt;/code&gt; &lt;/a&gt;は次の形式を提供します。</target>
        </trans-unit>
        <trans-unit id="a442e6847fcb81d8e12f5ccd5522ffb613f8b302" translate="yes" xml:space="preserve">
          <source>By default &lt;a href=&quot;#unittest.mock.patch&quot;&gt;&lt;code&gt;patch()&lt;/code&gt;&lt;/a&gt; will fail to replace attributes that don&amp;rsquo;t exist. If you pass in &lt;code&gt;create=True&lt;/code&gt;, and the attribute doesn&amp;rsquo;t exist, patch will create the attribute for you when the patched function is called, and delete it again after the patched function has exited. This is useful for writing tests against attributes that your production code creates at runtime. It is off by default because it can be dangerous. With it switched on you can write passing tests against APIs that don&amp;rsquo;t actually exist!</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;#unittest.mock.patch&quot;&gt; &lt;code&gt;patch()&lt;/code&gt; &lt;/a&gt;は存在しない属性の置き換えに失敗します。 &lt;code&gt;create=True&lt;/code&gt; を渡し、属性が存在しない場合、patchは、パッチが適用された関数が呼び出されたときに属性を作成し、パッチが適用された関数が終了した後で再度削除します。これは、本番用コードが実行時に作成する属性に対するテストを作成するのに役立ちます。危険な場合があるため、デフォルトではオフになっています。これをオンにすると、実際には存在しないAPIに対する合格テストを作成できます。</target>
        </trans-unit>
        <trans-unit id="e11f6ec8c72c6430bc9c389fb2edfddc8c054485" translate="yes" xml:space="preserve">
          <source>By default Unicode alphanumerics are the ones used in Unicode patterns, but this can be changed by using the &lt;a href=&quot;#re.ASCII&quot;&gt;&lt;code&gt;ASCII&lt;/code&gt;&lt;/a&gt; flag. Word boundaries are determined by the current locale if the &lt;a href=&quot;#re.LOCALE&quot;&gt;&lt;code&gt;LOCALE&lt;/code&gt;&lt;/a&gt; flag is used. Inside a character range, &lt;code&gt;\b&lt;/code&gt; represents the backspace character, for compatibility with Python&amp;rsquo;s string literals.</source>
          <target state="translated">デフォルトでは、Unicode英数字はUnicodeパターンで使用されるものですが、&lt;a href=&quot;#re.ASCII&quot;&gt; &lt;code&gt;ASCII&lt;/code&gt; &lt;/a&gt;フラグを使用して変更できます。&lt;a href=&quot;#re.LOCALE&quot;&gt; &lt;code&gt;LOCALE&lt;/code&gt; &lt;/a&gt;フラグが使用されている場合、単語の境界は現在のロケールによって決定されます。文字範囲内では、 &lt;code&gt;\b&lt;/code&gt; はPythonの文字列リテラルとの互換性のためにバックスペース文字を表します。</target>
        </trans-unit>
        <trans-unit id="a555dcde94361baeb4a969d6e2aba5d45aab6d18" translate="yes" xml:space="preserve">
          <source>By default all tasks for the current event loop are returned. If &lt;em&gt;loop&lt;/em&gt; is &lt;code&gt;None&lt;/code&gt;, the &lt;a href=&quot;asyncio-eventloop#asyncio.get_event_loop&quot;&gt;&lt;code&gt;get_event_loop()&lt;/code&gt;&lt;/a&gt; function is used to get the current loop.</source>
          <target state="translated">デフォルトでは、現在のイベントループのすべてのタスクが返されます。場合は&lt;em&gt;ループが&lt;/em&gt;ありません &lt;code&gt;None&lt;/code&gt; 、&lt;a href=&quot;asyncio-eventloop#asyncio.get_event_loop&quot;&gt; &lt;code&gt;get_event_loop()&lt;/code&gt; &lt;/a&gt;関数は、現在のループを取得するために使用されます。</target>
        </trans-unit>
        <trans-unit id="348aa774128c8876086cc6859a2d1a237faf35da" translate="yes" xml:space="preserve">
          <source>By default asyncio is configured to use &lt;a href=&quot;#asyncio.SelectorEventLoop&quot;&gt;&lt;code&gt;SelectorEventLoop&lt;/code&gt;&lt;/a&gt; on Unix and &lt;a href=&quot;#asyncio.ProactorEventLoop&quot;&gt;&lt;code&gt;ProactorEventLoop&lt;/code&gt;&lt;/a&gt; on Windows.</source>
          <target state="translated">デフォルトasyncioによって使用するように設定されて&lt;a href=&quot;#asyncio.SelectorEventLoop&quot;&gt; &lt;code&gt;SelectorEventLoop&lt;/code&gt; を&lt;/a&gt; Unixと上&lt;a href=&quot;#asyncio.ProactorEventLoop&quot;&gt; &lt;code&gt;ProactorEventLoop&lt;/code&gt; &lt;/a&gt; Windows上で。</target>
        </trans-unit>
        <trans-unit id="fbe8db946f6c4039aedf3337f510e5fb4d84a3b8" translate="yes" xml:space="preserve">
          <source>By default asyncio runs in production mode. In order to ease the development asyncio has a &lt;em&gt;debug mode&lt;/em&gt;.</source>
          <target state="translated">デフォルトでは、asyncioはプロダクションモードで実行されます。開発を容易にするために、asyncioには&lt;em&gt;デバッグモードがあります&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="f2d0e2958afe24ad181976d5e62c588dde7221db" translate="yes" xml:space="preserve">
          <source>By default functions are assumed to return the C &lt;code&gt;int&lt;/code&gt; type. Other return types can be specified by setting the &lt;code&gt;restype&lt;/code&gt; attribute of the function object.</source>
          <target state="translated">デフォルトでは、関数はCの &lt;code&gt;int&lt;/code&gt; 型を返すと想定されています。関数オブジェクトの &lt;code&gt;restype&lt;/code&gt; 属性を設定することにより、他の戻り値の型を指定できます。</target>
        </trans-unit>
        <trans-unit id="83606b363ba65c4bdc94a570461388ab6e60c908" translate="yes" xml:space="preserve">
          <source>By default if a process is not the creator of the queue then on exit it will attempt to join the queue&amp;rsquo;s background thread. The process can call &lt;a href=&quot;#multiprocessing.Queue.cancel_join_thread&quot;&gt;&lt;code&gt;cancel_join_thread()&lt;/code&gt;&lt;/a&gt; to make &lt;a href=&quot;#multiprocessing.Queue.join_thread&quot;&gt;&lt;code&gt;join_thread()&lt;/code&gt;&lt;/a&gt; do nothing.</source>
          <target state="translated">デフォルトでは、プロセスがキューの作成者でない場合、終了時にキューのバックグラウンドスレッドへの参加を試みます。プロセスは、&lt;a href=&quot;#multiprocessing.Queue.cancel_join_thread&quot;&gt; &lt;code&gt;cancel_join_thread()&lt;/code&gt; &lt;/a&gt;を呼び出して、&lt;a href=&quot;#multiprocessing.Queue.join_thread&quot;&gt; &lt;code&gt;join_thread()&lt;/code&gt; &lt;/a&gt;が何もしないようにすることができます。</target>
        </trans-unit>
        <trans-unit id="2235fc8bdd0df529b51b9b98a249362b87248fd8" translate="yes" xml:space="preserve">
          <source>By default many of the protocol methods are required to return objects of a specific type. These methods are preconfigured with a default return value, so that they can be used without you having to do anything if you aren&amp;rsquo;t interested in the return value. You can still &lt;em&gt;set&lt;/em&gt; the return value manually if you want to change the default.</source>
          <target state="translated">デフォルトでは、特定のタイプのオブジェクトを返すために、多くのプロトコルメソッドが必要です。これらのメソッドは、デフォルトの戻り値で事前設定されているため、戻り値に関心がない場合でも、何もしなくても使用できます。デフォルトを変更する場合は、手動で戻り値を&lt;em&gt;設定&lt;/em&gt;できます。</target>
        </trans-unit>
        <trans-unit id="47e5ba4cdbf45dc6469e9b93a83211483f2c3df3" translate="yes" xml:space="preserve">
          <source>By default this runner shows &lt;a href=&quot;exceptions#DeprecationWarning&quot;&gt;&lt;code&gt;DeprecationWarning&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;exceptions#PendingDeprecationWarning&quot;&gt;&lt;code&gt;PendingDeprecationWarning&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;exceptions#ResourceWarning&quot;&gt;&lt;code&gt;ResourceWarning&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;exceptions#ImportWarning&quot;&gt;&lt;code&gt;ImportWarning&lt;/code&gt;&lt;/a&gt; even if they are &lt;a href=&quot;warnings#warning-ignored&quot;&gt;ignored by default&lt;/a&gt;. Deprecation warnings caused by &lt;a href=&quot;#deprecated-aliases&quot;&gt;deprecated unittest methods&lt;/a&gt; are also special-cased and, when the warning filters are &lt;code&gt;'default'&lt;/code&gt; or &lt;code&gt;'always'&lt;/code&gt;, they will appear only once per-module, in order to avoid too many warning messages. This behavior can be overridden using Python&amp;rsquo;s &lt;code&gt;-Wd&lt;/code&gt; or &lt;code&gt;-Wa&lt;/code&gt; options (see &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#using-on-warnings&quot;&gt;Warning control&lt;/a&gt;) and leaving &lt;em&gt;warnings&lt;/em&gt; to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、このランナーは&lt;a href=&quot;warnings#warning-ignored&quot;&gt;、デフォルトで無視され&lt;/a&gt;ている場合でも、&lt;a href=&quot;exceptions#DeprecationWarning&quot;&gt; &lt;code&gt;DeprecationWarning&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;exceptions#PendingDeprecationWarning&quot;&gt; &lt;code&gt;PendingDeprecationWarning&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;exceptions#ResourceWarning&quot;&gt; &lt;code&gt;ResourceWarning&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;exceptions#ImportWarning&quot;&gt; &lt;code&gt;ImportWarning&lt;/code&gt; を表示&lt;/a&gt;します。&lt;a href=&quot;#deprecated-aliases&quot;&gt;非推奨の単体テストメソッド&lt;/a&gt;によって引き起こされる非推奨の警告も特殊なケースであり、警告フィルターが &lt;code&gt;'default'&lt;/code&gt; または &lt;code&gt;'always'&lt;/code&gt; の場合、警告メッセージが多すぎないように、モジュールごとに1回だけ表示されます。この動作は、Pythonの &lt;code&gt;-Wd&lt;/code&gt; または &lt;code&gt;-Wa&lt;/code&gt; オプション（&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#using-on-warnings&quot;&gt;警告コントロールを&lt;/a&gt;参照）を使用してオーバーライドし、&lt;em&gt;警告&lt;/em&gt;を &lt;code&gt;None&lt;/code&gt; のままにすることができます。</target>
        </trans-unit>
        <trans-unit id="ffe1ee682848dcbf8b31aad1ec757414332a0eb9" translate="yes" xml:space="preserve">
          <source>By default this runner shows &lt;a href=&quot;exceptions#DeprecationWarning&quot;&gt;&lt;code&gt;DeprecationWarning&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;exceptions#PendingDeprecationWarning&quot;&gt;&lt;code&gt;PendingDeprecationWarning&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;exceptions#ResourceWarning&quot;&gt;&lt;code&gt;ResourceWarning&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;exceptions#ImportWarning&quot;&gt;&lt;code&gt;ImportWarning&lt;/code&gt;&lt;/a&gt; even if they are &lt;a href=&quot;warnings#warning-ignored&quot;&gt;ignored by default&lt;/a&gt;. Deprecation warnings caused by &lt;a href=&quot;#deprecated-aliases&quot;&gt;deprecated unittest methods&lt;/a&gt; are also special-cased and, when the warning filters are &lt;code&gt;'default'&lt;/code&gt; or &lt;code&gt;'always'&lt;/code&gt;, they will appear only once per-module, in order to avoid too many warning messages. This behavior can be overridden using Python&amp;rsquo;s &lt;code&gt;-Wd&lt;/code&gt; or &lt;code&gt;-Wa&lt;/code&gt; options (see &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#using-on-warnings&quot;&gt;Warning control&lt;/a&gt;) and leaving &lt;em&gt;warnings&lt;/em&gt; to &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">By default this runner shows &lt;a href=&quot;exceptions#DeprecationWarning&quot;&gt; &lt;code&gt;DeprecationWarning&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;exceptions#PendingDeprecationWarning&quot;&gt; &lt;code&gt;PendingDeprecationWarning&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;exceptions#ResourceWarning&quot;&gt; &lt;code&gt;ResourceWarning&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;exceptions#ImportWarning&quot;&gt; &lt;code&gt;ImportWarning&lt;/code&gt; &lt;/a&gt; even if they are &lt;a href=&quot;warnings#warning-ignored&quot;&gt;ignored by default&lt;/a&gt;. Deprecation warnings caused by &lt;a href=&quot;#deprecated-aliases&quot;&gt;deprecated unittest methods&lt;/a&gt; are also special-cased and, when the warning filters are &lt;code&gt;'default'&lt;/code&gt; or &lt;code&gt;'always'&lt;/code&gt; , they will appear only once per-module, in order to avoid too many warning messages. This behavior can be overridden using Python&amp;rsquo;s &lt;code&gt;-Wd&lt;/code&gt; or &lt;code&gt;-Wa&lt;/code&gt; options (see &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#using-on-warnings&quot;&gt;Warning control&lt;/a&gt;) and leaving &lt;em&gt;warnings&lt;/em&gt; to &lt;code&gt;None&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5ae01e3d2789afe7d1a9556247cf9d3863cbe4da" translate="yes" xml:space="preserve">
          <source>By default this skips private attributes beginning with &amp;lsquo;_&amp;rsquo; but includes all magic methods, i.e. those starting and ending in &amp;lsquo;__&amp;rsquo;.</source>
          <target state="translated">デフォルトでは、これは「_」で始まるプライベート属性をスキップしますが、すべての魔法のメソッド、つまり「__」で始まり、終わるものを含みます。</target>
        </trans-unit>
        <trans-unit id="52f7dbe5b41ae8611a2810a429a49fbad90c7410" translate="yes" xml:space="preserve">
          <source>By default when using &lt;a href=&quot;#configparser.ConfigParser.getboolean&quot;&gt;&lt;code&gt;getboolean()&lt;/code&gt;&lt;/a&gt;, config parsers consider the following values &lt;code&gt;True&lt;/code&gt;: &lt;code&gt;'1'&lt;/code&gt;, &lt;code&gt;'yes'&lt;/code&gt;, &lt;code&gt;'true'&lt;/code&gt;, &lt;code&gt;'on'&lt;/code&gt; and the following values &lt;code&gt;False&lt;/code&gt;: &lt;code&gt;'0'&lt;/code&gt;, &lt;code&gt;'no'&lt;/code&gt;, &lt;code&gt;'false'&lt;/code&gt;, &lt;code&gt;'off'&lt;/code&gt;. You can override this by specifying a custom dictionary of strings and their Boolean outcomes. For example:</source>
          <target state="translated">&lt;a href=&quot;#configparser.ConfigParser.getboolean&quot;&gt; &lt;code&gt;getboolean()&lt;/code&gt; &lt;/a&gt;を使用する場合、デフォルトでは、構成パーサーは次の値を考慮します &lt;code&gt;True&lt;/code&gt; ： &lt;code&gt;'1'&lt;/code&gt; 、 &lt;code&gt;'yes'&lt;/code&gt; 、 &lt;code&gt;'true'&lt;/code&gt; 、 &lt;code&gt;'on'&lt;/code&gt; および以下の値 &lt;code&gt;False&lt;/code&gt; ： &lt;code&gt;'0'&lt;/code&gt; 、 &lt;code&gt;'no'&lt;/code&gt; 、 &lt;code&gt;'false'&lt;/code&gt; 、 &lt;code&gt;'off'&lt;/code&gt; 。文字列のカスタム辞書とそのブール結果を指定することで、これをオーバーライドできます。例えば：</target>
        </trans-unit>
        <trans-unit id="21b2fa9e8bd653d25936c1ef6f64b883a8409f29" translate="yes" xml:space="preserve">
          <source>By default you will not get any tracebacks in user-defined functions, aggregates, converters, authorizer callbacks etc. If you want to debug them, you can call this function with &lt;em&gt;flag&lt;/em&gt; set to &lt;code&gt;True&lt;/code&gt;. Afterwards, you will get tracebacks from callbacks on &lt;code&gt;sys.stderr&lt;/code&gt;. Use &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt; to disable the feature again.</source>
          <target state="translated">デフォルトでは、ユーザー定義関数、集計、コンバーター、オーソライザーコールバックなどでトレースバックを取得しません。それらをデバッグする場合は、&lt;em&gt;フラグ&lt;/em&gt;を &lt;code&gt;True&lt;/code&gt; に設定してこの関数を呼び出すことができます。その後、 &lt;code&gt;sys.stderr&lt;/code&gt; のコールバックからトレースバックを取得します。使用&lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; &lt;/a&gt;再び機能を無効にします。</target>
        </trans-unit>
        <trans-unit id="f132014d689a5cf73b7e430ffb2dcd6bdf06fb85" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; calculates the usage message from the arguments it contains:</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt;は、含まれる引数から使用法メッセージを計算します。</target>
        </trans-unit>
        <trans-unit id="024605f88e757d67ce6f6e4fd5acb4d11c9a071b" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; groups command-line arguments into &amp;ldquo;positional arguments&amp;rdquo; and &amp;ldquo;optional arguments&amp;rdquo; when displaying help messages. When there is a better conceptual grouping of arguments than this default one, appropriate groups can be created using the &lt;a href=&quot;#argparse.ArgumentParser.add_argument_group&quot;&gt;&lt;code&gt;add_argument_group()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; は&lt;/a&gt;、ヘルプメッセージを表示するときに、コマンドライン引数を「位置引数」と「オプション引数」にグループ化します。このデフォルトの引数よりも概念的な引数のグループ化がある場合、&lt;a href=&quot;#argparse.ArgumentParser.add_argument_group&quot;&gt; &lt;code&gt;add_argument_group()&lt;/code&gt; &lt;/a&gt;メソッドを使用して適切なグループを作成できます。</target>
        </trans-unit>
        <trans-unit id="32cb386527e775896cd057a28fa7c4bd40470da8" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; objects read command-line arguments in as simple strings. However, quite often the command-line string should instead be interpreted as another type, like a &lt;a href=&quot;functions#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;functions#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;type&lt;/code&gt; keyword argument of &lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt;&lt;code&gt;add_argument()&lt;/code&gt;&lt;/a&gt; allows any necessary type-checking and type conversions to be performed. Common built-in types and functions can be used directly as the value of the &lt;code&gt;type&lt;/code&gt; argument:</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt;オブジェクトはコマンドライン引数を単純な文字列として読み取ります。ただし、コマンドライン文字列は、代わりに&lt;a href=&quot;functions#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;functions#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt;などの別の型として解釈する必要があります。&lt;a href=&quot;#argparse.ArgumentParser.add_argument&quot;&gt; &lt;code&gt;add_argument()&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;type&lt;/code&gt; キーワード引数により、必要な型チェックと型変換を実行できます。一般的な組み込み型と関数は、 &lt;code&gt;type&lt;/code&gt; 引数の値として直接使用できます。</target>
        </trans-unit>
        <trans-unit id="94b437bedcb22203818d42f82de4da353c13eba3" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#argparse.ArgumentParser&quot;&gt;&lt;code&gt;ArgumentParser&lt;/code&gt;&lt;/a&gt; objects use &lt;code&gt;sys.argv[0]&lt;/code&gt; to determine how to display the name of the program in help messages. This default is almost always desirable because it will make the help messages match how the program was invoked on the command line. For example, consider a file named &lt;code&gt;myprogram.py&lt;/code&gt; with the following code:</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;#argparse.ArgumentParser&quot;&gt; &lt;code&gt;ArgumentParser&lt;/code&gt; &lt;/a&gt;オブジェクトは &lt;code&gt;sys.argv[0]&lt;/code&gt; を使用して、ヘルプメッセージにプログラムの名前を表示する方法を決定します。コマンドラインでプログラムが呼び出された方法とヘルプメッセージが一致するため、このデフォルトはほとんど常に望ましいものです。たとえば、次のコードを含む &lt;code&gt;myprogram.py&lt;/code&gt; という名前のファイルがあるとします。</target>
        </trans-unit>
        <trans-unit id="bb58169c2afcd07d3793490e9bfb11ff16d131cb" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#dataclasses.dataclass&quot;&gt;&lt;code&gt;dataclass()&lt;/code&gt;&lt;/a&gt; will not implicitly add a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; method unless it is safe to do so. Neither will it add or change an existing explicitly defined &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; method. Setting the class attribute &lt;code&gt;__hash__ = None&lt;/code&gt; has a specific meaning to Python, as described in the &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">デフォルトでは、安全である場合を除いて、&lt;a href=&quot;#dataclasses.dataclass&quot;&gt; &lt;code&gt;dataclass()&lt;/code&gt; &lt;/a&gt;は暗黙的に&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt;メソッドを追加しません。また、明示的に定義された既存の&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt;メソッドを追加または変更することもありません。 &lt;code&gt;__hash__ = None&lt;/code&gt; &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt;ドキュメントで説明されているように、クラス属性__hash__ = Noneを設定すると、Pythonに特定の意味があります。</target>
        </trans-unit>
        <trans-unit id="b3d4b25fbd6a7584fd2bda12b7dee94351f4abb3" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#dataclasses.dataclass&quot;&gt;&lt;code&gt;dataclass()&lt;/code&gt;&lt;/a&gt; will not implicitly add a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; method unless it is safe to do so. Neither will it add or change an existing explicitly defined &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; method. Setting the class attribute &lt;code&gt;__hash__ = None&lt;/code&gt; has a specific meaning to Python, as described in the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt;&lt;code&gt;__hash__()&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">By default, &lt;a href=&quot;#dataclasses.dataclass&quot;&gt; &lt;code&gt;dataclass()&lt;/code&gt; &lt;/a&gt; will not implicitly add a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt; method unless it is safe to do so. Neither will it add or change an existing explicitly defined &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt; method. Setting the class attribute &lt;code&gt;__hash__ = None&lt;/code&gt; has a specific meaning to Python, as described in the &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__hash__&quot;&gt; &lt;code&gt;__hash__()&lt;/code&gt; &lt;/a&gt; documentation.</target>
        </trans-unit>
        <trans-unit id="ddd4450bf8d89a24f78314fc96e96f3a51a2cfe1" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#doctest.testfile&quot;&gt;&lt;code&gt;testfile()&lt;/code&gt;&lt;/a&gt; looks for files in the calling module&amp;rsquo;s directory. See section &lt;a href=&quot;#doctest-basic-api&quot;&gt;Basic API&lt;/a&gt; for a description of the optional arguments that can be used to tell it to look for files in other locations.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;#doctest.testfile&quot;&gt; &lt;code&gt;testfile()&lt;/code&gt; &lt;/a&gt;は呼び出しモジュールのディレクトリでファイルを探します。他の場所でファイルを探すように指示するために使用できるオプションの引数の説明については、「&lt;a href=&quot;#doctest-basic-api&quot;&gt;基本API&lt;/a&gt;」を参照してください。</target>
        </trans-unit>
        <trans-unit id="7f5935e8f63ee8aab7d9c10c622d79fc87c370ea" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#os.walk&quot;&gt;&lt;code&gt;walk()&lt;/code&gt;&lt;/a&gt; will not walk down into symbolic links that resolve to directories. Set &lt;em&gt;followlinks&lt;/em&gt; to &lt;code&gt;True&lt;/code&gt; to visit directories pointed to by symlinks, on systems that support them.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;#os.walk&quot;&gt; &lt;code&gt;walk()&lt;/code&gt; &lt;/a&gt;はディレクトリに解決されるシンボリックリンクに移動しません。&lt;em&gt;followlinks&lt;/em&gt;を &lt;code&gt;True&lt;/code&gt; に設定すると、それらをサポートするシステム上で、シンボリックリンクが指すディレクトリにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="bc029c94a9abc8785480c4cc10cbe10a76a8afe0" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#timeit.Timer.timeit&quot;&gt;&lt;code&gt;timeit()&lt;/code&gt;&lt;/a&gt; temporarily turns off &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-garbage-collection&quot;&gt;garbage collection&lt;/a&gt; during the timing. The advantage of this approach is that it makes independent timings more comparable. The disadvantage is that GC may be an important component of the performance of the function being measured. If so, GC can be re-enabled as the first statement in the &lt;em&gt;setup&lt;/em&gt; string. For example:</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;#timeit.Timer.timeit&quot;&gt; &lt;code&gt;timeit()&lt;/code&gt; &lt;/a&gt;はタイミング中に&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-garbage-collection&quot;&gt;ガベージコレクションを&lt;/a&gt;一時的にオフにします。このアプローチの利点は、独立したタイミングをより比較可能にすることです。欠点は、GCが測定対象の関数のパフォーマンスの重要な要素になる可能性があることです。その場合、&lt;em&gt;セットアップ&lt;/em&gt;文字列の最初のステートメントとしてGCを再度有効にすることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="b90ba17cb5f8a8a6266285e3345bbcee3dd5e688" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;#timeit.Timer.timeit&quot;&gt;&lt;code&gt;timeit()&lt;/code&gt;&lt;/a&gt; temporarily turns off &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-garbage-collection&quot;&gt;garbage collection&lt;/a&gt; during the timing. The advantage of this approach is that it makes independent timings more comparable. The disadvantage is that GC may be an important component of the performance of the function being measured. If so, GC can be re-enabled as the first statement in the &lt;em&gt;setup&lt;/em&gt; string. For example:</source>
          <target state="translated">By default, &lt;a href=&quot;#timeit.Timer.timeit&quot;&gt; &lt;code&gt;timeit()&lt;/code&gt; &lt;/a&gt; temporarily turns off &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-garbage-collection&quot;&gt;garbage collection&lt;/a&gt; during the timing. The advantage of this approach is that it makes independent timings more comparable. The disadvantage is that GC may be an important component of the performance of the function being measured. If so, GC can be re-enabled as the first statement in the &lt;em&gt;setup&lt;/em&gt; string. For example:</target>
        </trans-unit>
        <trans-unit id="11d5d8210634b80549b5b63361003e12a84937bc" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;pip&lt;/code&gt; is installed into the current virtual environment (if one is active) or into the system site packages (if there is no active virtual environment). The installation location can be controlled through two additional command line options:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;pip&lt;/code&gt; は現在の仮想環境（アクティブな場合）またはシステムサイトパッケージ（アクティブな仮想環境がない場合）にインストールされます。インストール場所は、次の2つの追加のコマンドラインオプションで制御できます。</target>
        </trans-unit>
        <trans-unit id="e04756eee7f0460d985177205e10b1a23503c069" translate="yes" xml:space="preserve">
          <source>By default, &lt;em&gt;check_same_thread&lt;/em&gt; is &lt;a href=&quot;constants#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; and only the creating thread may use the connection. If set &lt;a href=&quot;constants#False&quot;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/a&gt;, the returned connection may be shared across multiple threads. When using multiple threads with the same connection writing operations should be serialized by the user to avoid data corruption.</source>
          <target state="translated">デフォルトでは、&lt;em&gt;check_same_thread&lt;/em&gt;は&lt;a href=&quot;constants#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; で&lt;/a&gt;あり、作成スレッドのみが接続を使用できます。&lt;a href=&quot;constants#False&quot;&gt; &lt;code&gt;False&lt;/code&gt; &lt;/a&gt;に設定すると、返された接続が複数のスレッドで共有される可能性があります。同じ接続で複数のスレッドを使用する場合、データの破損を防ぐために、書き込み操作をユーザーがシリアル化する必要があります。</target>
        </trans-unit>
        <trans-unit id="9796dc7a23b90b4d977cc10e77473ff593a1938d" translate="yes" xml:space="preserve">
          <source>By default, &lt;em&gt;prefix&lt;/em&gt; is added to all lines that do not consist solely of whitespace (including any line endings).</source>
          <target state="translated">デフォルトでは、空白だけで構成されていないすべての行（行末を含む）に&lt;em&gt;接頭辞&lt;/em&gt;が追加されます。</target>
        </trans-unit>
        <trans-unit id="fc4ca20bdc6fbea8397ef04133950e8434765b2e" translate="yes" xml:space="preserve">
          <source>By default, ArgumentParser objects add an option which simply displays the parser&amp;rsquo;s help message. For example, consider a file named &lt;code&gt;myprogram.py&lt;/code&gt; containing the following code:</source>
          <target state="translated">デフォルトでは、ArgumentParserオブジェクトは、パーサーのヘルプメッセージを表示するだけのオプションを追加します。たとえば、次のコードを含む &lt;code&gt;myprogram.py&lt;/code&gt; という名前のファイルがあるとします。</target>
        </trans-unit>
        <trans-unit id="746866251cfb3e555774dcd8af3a46db19750c77" translate="yes" xml:space="preserve">
          <source>By default, C types are represented in the machine&amp;rsquo;s native format and byte order, and properly aligned by skipping pad bytes if necessary (according to the rules used by the C compiler).</source>
          <target state="translated">デフォルトでは、Cの型はマシンのネイティブ形式とバイト順で表され、必要に応じて（Cコンパイラで使用される規則に従って）パッドバイトをスキップすることで適切に整列されます。</target>
        </trans-unit>
        <trans-unit id="3512445457ee9e1000f6118054d51f83a71dc8bb" translate="yes" xml:space="preserve">
          <source>By default, IDLE executes user code in a separate subprocess via a socket, which uses the internal loopback interface. This connection is not externally visible and no data is sent to or received from the Internet. If firewall software complains anyway, you can ignore it.</source>
          <target state="translated">デフォルトでは、IDLE は内部ループバック インターフェイスを使用するソケットを介して別のサブプロセスでユーザー コードを実行します。この接続は外部からは見えず、インターネットとの間でデータの送受信は行われません。ファイアウォールソフトウェアがとにかく文句を言ってきても、無視して構いません。</target>
        </trans-unit>
        <trans-unit id="0cb79819df474427622fdc62a2ac6ec7a2e31bb5" translate="yes" xml:space="preserve">
          <source>By default, IDLE runs user code in a separate OS process rather than in the user interface process that runs the shell and editor. In the execution process, it replaces &lt;code&gt;sys.stdin&lt;/code&gt;, &lt;code&gt;sys.stdout&lt;/code&gt;, and &lt;code&gt;sys.stderr&lt;/code&gt; with objects that get input from and send output to the Shell window. The original values stored in &lt;code&gt;sys.__stdin__&lt;/code&gt;, &lt;code&gt;sys.__stdout__&lt;/code&gt;, and &lt;code&gt;sys.__stderr__&lt;/code&gt; are not touched, but may be &lt;code&gt;None&lt;/code&gt;.</source>
          <target state="translated">デフォルトでは、IDLEはシェルとエディターを実行するユーザーインターフェイスプロセスではなく、別のOSプロセスでユーザーコードを実行します。実行プロセスでは、 &lt;code&gt;sys.stdin&lt;/code&gt; 、 &lt;code&gt;sys.stdout&lt;/code&gt; 、および &lt;code&gt;sys.stderr&lt;/code&gt; を、シェルウィンドウから入力を取得し、シェルウィンドウに出力を送信するオブジェクトに置き換えます。元に格納された値 &lt;code&gt;sys.__stdin__&lt;/code&gt; 、 &lt;code&gt;sys.__stdout__&lt;/code&gt; 、および &lt;code&gt;sys.__stderr__&lt;/code&gt; 触れていないが、なくてもよい &lt;code&gt;None&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4338c28f624cd168dc6e6a993f6edcf0b0caa8e8" translate="yes" xml:space="preserve">
          <source>By default, IIS gives a &lt;code&gt;PATH_INFO&lt;/code&gt; that duplicates the &lt;code&gt;SCRIPT_NAME&lt;/code&gt; at the front, causing problems for WSGI applications that wish to implement routing. This handler strips any such duplicated path.</source>
          <target state="translated">デフォルトでは、IISは先頭に &lt;code&gt;SCRIPT_NAME&lt;/code&gt; を複製する &lt;code&gt;PATH_INFO&lt;/code&gt; を提供するため、ルーティングを実装するWSGIアプリケーションに問題が発生します。このハンドラーは、そのような重複したパスを削除します。</target>
        </trans-unit>
        <trans-unit id="34a08824cf61e85f3edd280a072e1ba951239abf" translate="yes" xml:space="preserve">
          <source>By default, Pdb sets a handler for the SIGINT signal (which is sent when the user presses</source>
          <target state="translated">デフォルトでは、Pdb は SIGINT 信号のハンドラを設定します。</target>
        </trans-unit>
        <trans-unit id="e4fc14c745c41ff2c1c0f6a1f3b4203d646932e6" translate="yes" xml:space="preserve">
          <source>By default, Python does not emit any warning:</source>
          <target state="translated">デフォルトでは、Pythonは警告を発しません。</target>
        </trans-unit>
        <trans-unit id="43d58b5909b4209e333296709be9cee88202e059" translate="yes" xml:space="preserve">
          <source>By default, Python installs several warning filters, which can be overridden by the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-W&lt;/code&gt;&lt;/a&gt; command-line option, the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-3&quot;&gt;&lt;code&gt;PYTHONWARNINGS&lt;/code&gt;&lt;/a&gt; environment variable and calls to &lt;a href=&quot;#warnings.filterwarnings&quot;&gt;&lt;code&gt;filterwarnings()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、Pythonはいくつかの警告フィルターをインストールします。これらは、&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#cmdoption-w&quot;&gt; &lt;code&gt;-W&lt;/code&gt; &lt;/a&gt;コマンドラインオプション、&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-3&quot;&gt; &lt;code&gt;PYTHONWARNINGS&lt;/code&gt; &lt;/a&gt;環境変数、および&lt;a href=&quot;#warnings.filterwarnings&quot;&gt; &lt;code&gt;filterwarnings()&lt;/code&gt; の&lt;/a&gt;呼び出しによってオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="6d68d125a82e363e01456961fa33c1b3dc16a8eb" translate="yes" xml:space="preserve">
          <source>By default, Python installs several warning filters, which can be overridden by the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-w&quot;&gt;&lt;code&gt;-W&lt;/code&gt;&lt;/a&gt; command-line option, the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-3&quot;&gt;&lt;code&gt;PYTHONWARNINGS&lt;/code&gt;&lt;/a&gt; environment variable and calls to &lt;a href=&quot;#warnings.filterwarnings&quot;&gt;&lt;code&gt;filterwarnings()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">By default, Python installs several warning filters, which can be overridden by the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#cmdoption-w&quot;&gt; &lt;code&gt;-W&lt;/code&gt; &lt;/a&gt; command-line option, the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONWARNINGS&quot; id=&quot;index-3&quot;&gt; &lt;code&gt;PYTHONWARNINGS&lt;/code&gt; &lt;/a&gt; environment variable and calls to &lt;a href=&quot;#warnings.filterwarnings&quot;&gt; &lt;code&gt;filterwarnings()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="194edc12a70011820b7389989028ffc9cc56fa43" translate="yes" xml:space="preserve">
          <source>By default, Rmail displays only visible headers. The &lt;a href=&quot;#mailbox.BabylMessage&quot;&gt;&lt;code&gt;BabylMessage&lt;/code&gt;&lt;/a&gt; class, though, uses the original headers because they are more complete. Visible headers may be accessed explicitly if desired.</source>
          <target state="translated">デフォルトでは、Rmailは表示可能なヘッダーのみを表示します。&lt;a href=&quot;#mailbox.BabylMessage&quot;&gt; &lt;code&gt;BabylMessage&lt;/code&gt; のは&lt;/a&gt;、彼らがより完全であるため、クラスは、しかし、元のヘッダーを使用しています。可視ヘッダーは、必要に応じて明示的にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="d1631d9dffd1975805f1afb15caa3c01281e60e0" translate="yes" xml:space="preserve">
          <source>By default, Structure and Union fields are aligned in the same way the C compiler does it. It is possible to override this behavior by specifying a &lt;code&gt;_pack_&lt;/code&gt; class attribute in the subclass definition. This must be set to a positive integer and specifies the maximum alignment for the fields. This is what &lt;code&gt;#pragma pack(n)&lt;/code&gt; also does in MSVC.</source>
          <target state="translated">デフォルトでは、StructureフィールドとUnionフィールドは、Cコンパイラが行うのと同じ方法で配置されます。サブクラス定義で &lt;code&gt;_pack_&lt;/code&gt; クラス属性を指定することにより、この動作をオーバーライドすることが可能です。これは正の整数に設定する必要があり、フィールドの最大配置を指定します。これは、 &lt;code&gt;#pragma pack(n)&lt;/code&gt; がMSVCでも行うことです。</target>
        </trans-unit>
        <trans-unit id="b6eb82dd6665f910dee0adea7123f213a064029b" translate="yes" xml:space="preserve">
          <source>By default, a pickler object will not have a &lt;a href=&quot;#pickle.Pickler.dispatch_table&quot;&gt;&lt;code&gt;dispatch_table&lt;/code&gt;&lt;/a&gt; attribute, and it will instead use the global dispatch table managed by the &lt;a href=&quot;copyreg#module-copyreg&quot;&gt;&lt;code&gt;copyreg&lt;/code&gt;&lt;/a&gt; module. However, to customize the pickling for a specific pickler object one can set the &lt;a href=&quot;#pickle.Pickler.dispatch_table&quot;&gt;&lt;code&gt;dispatch_table&lt;/code&gt;&lt;/a&gt; attribute to a dict-like object. Alternatively, if a subclass of &lt;a href=&quot;#pickle.Pickler&quot;&gt;&lt;code&gt;Pickler&lt;/code&gt;&lt;/a&gt; has a &lt;a href=&quot;#pickle.Pickler.dispatch_table&quot;&gt;&lt;code&gt;dispatch_table&lt;/code&gt;&lt;/a&gt; attribute then this will be used as the default dispatch table for instances of that class.</source>
          <target state="translated">デフォルトでは、ピッカーオブジェクトは&lt;a href=&quot;#pickle.Pickler.dispatch_table&quot;&gt; &lt;code&gt;dispatch_table&lt;/code&gt; &lt;/a&gt;属性を持たず、代わりに&lt;a href=&quot;copyreg#module-copyreg&quot;&gt; &lt;code&gt;copyreg&lt;/code&gt; &lt;/a&gt;モジュールが管理するグローバルディスパッチテーブルを使用します。ただし、特定のピッカーオブジェクトの酸洗いをカスタマイズするには、&lt;a href=&quot;#pickle.Pickler.dispatch_table&quot;&gt; &lt;code&gt;dispatch_table&lt;/code&gt; &lt;/a&gt;属性をdictのようなオブジェクトに設定します。サブクラスであれば別の方法として、&lt;a href=&quot;#pickle.Pickler&quot;&gt; &lt;code&gt;Pickler&lt;/code&gt; さんが&lt;/a&gt;持っている&lt;a href=&quot;#pickle.Pickler.dispatch_table&quot;&gt; &lt;code&gt;dispatch_table&lt;/code&gt; &lt;/a&gt;属性を、これは、そのクラスのインスタンスのデフォルトのディスパッチテーブルとして使用されます。</target>
        </trans-unit>
        <trans-unit id="53801121724a8b51bc2f424f971489d6286912cc" translate="yes" xml:space="preserve">
          <source>By default, a trace of an allocated memory block only stores the most recent frame (1 frame). To store 25 frames at startup: set the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONTRACEMALLOC&quot; id=&quot;index-1&quot;&gt;&lt;code&gt;PYTHONTRACEMALLOC&lt;/code&gt;&lt;/a&gt; environment variable to &lt;code&gt;25&lt;/code&gt;, or use the &lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;tracemalloc=25&lt;/code&gt; command line option.</source>
          <target state="translated">デフォルトでは、割り当てられたメモリブロックのトレースには、最新のフレーム（1フレーム）のみが保存されます。起動時に25フレームを保存するには：&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#envvar-PYTHONTRACEMALLOC&quot; id=&quot;index-1&quot;&gt; &lt;code&gt;PYTHONTRACEMALLOC&lt;/code&gt; &lt;/a&gt;環境変数を &lt;code&gt;25&lt;/code&gt; に設定するか、&lt;a href=&quot;https://docs.python.org/3.8/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X&lt;/code&gt; &lt;/a&gt; &lt;code&gt;tracemalloc=25&lt;/code&gt; コマンドラインオプションを使用します。</target>
        </trans-unit>
        <trans-unit id="235f1643814d54cc51678475522595afc16e865c" translate="yes" xml:space="preserve">
          <source>By default, a trace of an allocated memory block only stores the most recent frame (1 frame). To store 25 frames at startup: set the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONTRACEMALLOC&quot; id=&quot;index-1&quot;&gt;&lt;code&gt;PYTHONTRACEMALLOC&lt;/code&gt;&lt;/a&gt; environment variable to &lt;code&gt;25&lt;/code&gt;, or use the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt;&lt;code&gt;-X&lt;/code&gt;&lt;/a&gt;&lt;code&gt;tracemalloc=25&lt;/code&gt; command line option.</source>
          <target state="translated">By default, a trace of an allocated memory block only stores the most recent frame (1 frame). To store 25 frames at startup: set the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#envvar-PYTHONTRACEMALLOC&quot; id=&quot;index-1&quot;&gt; &lt;code&gt;PYTHONTRACEMALLOC&lt;/code&gt; &lt;/a&gt; environment variable to &lt;code&gt;25&lt;/code&gt; , or use the &lt;a href=&quot;https://docs.python.org/3.9/using/cmdline.html#id5&quot;&gt; &lt;code&gt;-X&lt;/code&gt; &lt;/a&gt; &lt;code&gt;tracemalloc=25&lt;/code&gt; command line option.</target>
        </trans-unit>
        <trans-unit id="20f9c9b32bdc318c5c18acd3766a8add6de519ab" translate="yes" xml:space="preserve">
          <source>By default, accepts the name of a module and prints the source of that module. A class or function within the module can be printed instead by appended a colon and the qualified name of the target object.</source>
          <target state="translated">デフォルトでは、モジュールの名前を受け取り、そのモジュールのソースを表示します。代わりに、コロンとターゲットオブジェクトの修飾名を追加することで、モジュール内のクラスや関数を表示することができます。</target>
        </trans-unit>
        <trans-unit id="eaec6d27e5f37d0c8c91b7a089060ddcb01dba03" translate="yes" xml:space="preserve">
          <source>By default, all keys in sections are accessible in a case-insensitive manner &lt;a href=&quot;#id14&quot; id=&quot;id10&quot;&gt;1&lt;/a&gt;. E.g. &lt;code&gt;for option in parser[&quot;section&quot;]&lt;/code&gt; yields only &lt;code&gt;optionxform&lt;/code&gt;&amp;rsquo;ed option key names. This means lowercased keys by default. At the same time, for a section that holds the key &lt;code&gt;'a'&lt;/code&gt;, both expressions return &lt;code&gt;True&lt;/code&gt;:</source>
          <target state="translated">デフォルトでは、セクション内のすべてのキーは、大文字と小文字を区別しない方法でアクセスできます&lt;a href=&quot;#id14&quot; id=&quot;id10&quot;&gt;1&lt;/a&gt;。たとえば &lt;code&gt;for option in parser[&quot;section&quot;]&lt;/code&gt; &lt;code&gt;optionxform&lt;/code&gt; のオプションキー名のみが生成されます。これは、デフォルトでは小文字のキーを意味します。同時に、キー &lt;code&gt;'a'&lt;/code&gt; を保持するセクションの場合、両方の式が &lt;code&gt;True&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c2c533a2bae92633bb096ca2ac9b6447f1dac0ff" translate="yes" xml:space="preserve">
          <source>By default, all keys must be present in a TypedDict. It is possible to override this by specifying totality. Usage:</source>
          <target state="translated">デフォルトでは、すべてのキーはTypedDictに存在しなければなりません。全体を指定することでこれを上書きすることが可能です。使用法。</target>
        </trans-unit>
        <trans-unit id="df77a2f5e1f9b841bf3693ba08d7b2ecd3c51127" translate="yes" xml:space="preserve">
          <source>By default, an object is considered true unless its class defines either a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__bool__&quot;&gt;&lt;code&gt;__bool__()&lt;/code&gt;&lt;/a&gt; method that returns &lt;code&gt;False&lt;/code&gt; or a &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__len__&quot;&gt;&lt;code&gt;__len__()&lt;/code&gt;&lt;/a&gt; method that returns zero, when called with the object. &lt;a href=&quot;#id12&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt; Here are most of the built-in objects considered false:</source>
          <target state="translated">オブジェクトで&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__bool__&quot;&gt; &lt;code&gt;__bool__()&lt;/code&gt; &lt;/a&gt;たときに、クラスが &lt;code&gt;False&lt;/code&gt; を返す&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__len__&quot;&gt; &lt;code&gt;__len__()&lt;/code&gt; &lt;/a&gt;メソッドまたはゼロを返す__len __（）メソッドのいずれかをクラスで定義していない限り、オブジェクトはデフォルトでTrueと見なされます。&lt;a href=&quot;#id12&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;以下は、falseと見なされる組み込みオブジェクトのほとんどです。</target>
        </trans-unit>
        <trans-unit id="b0d59253386482a6284666394f1f4661fa312626" translate="yes" xml:space="preserve">
          <source>By default, an object is considered true unless its class defines either a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__bool__&quot;&gt;&lt;code&gt;__bool__()&lt;/code&gt;&lt;/a&gt; method that returns &lt;code&gt;False&lt;/code&gt; or a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__len__&quot;&gt;&lt;code&gt;__len__()&lt;/code&gt;&lt;/a&gt; method that returns zero, when called with the object. &lt;a href=&quot;#id12&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt; Here are most of the built-in objects considered false:</source>
          <target state="translated">By default, an object is considered true unless its class defines either a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__bool__&quot;&gt; &lt;code&gt;__bool__()&lt;/code&gt; &lt;/a&gt; method that returns &lt;code&gt;False&lt;/code&gt; or a &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__len__&quot;&gt; &lt;code&gt;__len__()&lt;/code&gt; &lt;/a&gt; method that returns zero, when called with the object. &lt;a href=&quot;#id12&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt; Here are most of the built-in objects considered false:</target>
        </trans-unit>
        <trans-unit id="3ea474f9f38dc663c8a08f500f58696344e668cc" translate="yes" xml:space="preserve">
          <source>By default, attempting to patch a function in a module (or a method or an attribute in a class) that does not exist will fail with &lt;a href=&quot;exceptions#AttributeError&quot;&gt;&lt;code&gt;AttributeError&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">デフォルトでは、存在しないモジュール（またはクラスのメソッドまたは属性）の関数にパッチを適用しようとすると、&lt;a href=&quot;exceptions#AttributeError&quot;&gt; &lt;code&gt;AttributeError&lt;/code&gt; で&lt;/a&gt;失敗します。</target>
        </trans-unit>
        <trans-unit id="ba6f8ccaf5287f458e74dcc3c521955c22632ec1" translate="yes" xml:space="preserve">
          <source>By default, each time &lt;a href=&quot;#module-doctest&quot;&gt;&lt;code&gt;doctest&lt;/code&gt;&lt;/a&gt; finds a docstring to test, it uses a &lt;em&gt;shallow copy&lt;/em&gt; of &lt;code&gt;M&lt;/code&gt;&amp;rsquo;s globals, so that running tests doesn&amp;rsquo;t change the module&amp;rsquo;s real globals, and so that one test in &lt;code&gt;M&lt;/code&gt; can&amp;rsquo;t leave behind crumbs that accidentally allow another test to work. This means examples can freely use any names defined at top-level in &lt;code&gt;M&lt;/code&gt;, and names defined earlier in the docstring being run. Examples cannot see names defined in other docstrings.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;#module-doctest&quot;&gt; &lt;code&gt;doctest&lt;/code&gt; &lt;/a&gt;はテストするdocstringを見つけるたびに、 &lt;code&gt;M&lt;/code&gt; のグローバルの&lt;em&gt;浅いコピー&lt;/em&gt;を使用するため、テストを実行してもモジュールの実際のグローバルは変更されず、 &lt;code&gt;M&lt;/code&gt; の 1つのテストで、誤って別のテストを機能させる。これは、例が &lt;code&gt;M&lt;/code&gt; のトップレベルで定義された任意の名前、および実行中のdocstringで以前に定義された名前を自由に使用できることを意味します。例では、他のdocstringで定義された名前を見ることができません。</target>
        </trans-unit>
        <trans-unit id="dced44bdbcc5d88045afe23f3049d96083bbec3f" translate="yes" xml:space="preserve">
          <source>By default, enumerations allow multiple names as aliases for the same value. When this behavior isn&amp;rsquo;t desired, the following decorator can be used to ensure each value is used only once in the enumeration:</source>
          <target state="translated">デフォルトでは、列挙型は同じ値のエイリアスとして複数の名前を許可します。この動作が望ましくない場合は、次のデコレーターを使用して、列挙で各値が1回だけ使用されるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="5ab285e785eb1c48a8796719be9a670c6e97df9b" translate="yes" xml:space="preserve">
          <source>By default, errors from the &lt;a href=&quot;#os.scandir&quot;&gt;&lt;code&gt;scandir()&lt;/code&gt;&lt;/a&gt; call are ignored. If optional argument &lt;em&gt;onerror&lt;/em&gt; is specified, it should be a function; it will be called with one argument, an &lt;a href=&quot;exceptions#OSError&quot;&gt;&lt;code&gt;OSError&lt;/code&gt;&lt;/a&gt; instance. It can report the error to continue with the walk, or raise the exception to abort the walk. Note that the filename is available as the &lt;code&gt;filename&lt;/code&gt; attribute of the exception object.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;#os.scandir&quot;&gt; &lt;code&gt;scandir()&lt;/code&gt; &lt;/a&gt;呼び出しからのエラーは無視されます。オプションの引数&lt;em&gt;onerror&lt;/em&gt;が指定されている場合、それは関数でなければなりません。&lt;a href=&quot;exceptions#OSError&quot;&gt; &lt;code&gt;OSError&lt;/code&gt; &lt;/a&gt;インスタンスという1つの引数で呼び出されます。エラーを報告してウォークを続行したり、例外を発生させてウォークを中止したりできます。ファイル名は、例外オブジェクトの &lt;code&gt;filename&lt;/code&gt; 属性として使用できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="936f21d2588c2a060ae9ea52d1267f952c5ea2bf" translate="yes" xml:space="preserve">
          <source>By default, for best performance, the &lt;em&gt;errors&lt;/em&gt; argument is only checked at the first encoding/decoding error and the &lt;em&gt;encoding&lt;/em&gt; argument is sometimes ignored for empty strings.</source>
          <target state="translated">By default, for best performance, the &lt;em&gt;errors&lt;/em&gt; argument is only checked at the first encoding/decoding error and the &lt;em&gt;encoding&lt;/em&gt; argument is sometimes ignored for empty strings.</target>
        </trans-unit>
        <trans-unit id="e5fd2a1ebe99a0d3917c731d7846b7f02865b33d" translate="yes" xml:space="preserve">
          <source>By default, if an expected output block contains a line containing only the string &lt;code&gt;&amp;lt;BLANKLINE&amp;gt;&lt;/code&gt;, then that line will match a blank line in the actual output. Because a genuinely blank line delimits the expected output, this is the only way to communicate that a blank line is expected. When &lt;a href=&quot;#doctest.DONT_ACCEPT_BLANKLINE&quot;&gt;&lt;code&gt;DONT_ACCEPT_BLANKLINE&lt;/code&gt;&lt;/a&gt; is specified, this substitution is not allowed.</source>
          <target state="translated">デフォルトでは、予期される出力ブロックに文字列 &lt;code&gt;&amp;lt;BLANKLINE&amp;gt;&lt;/code&gt; のみを含む行が含まれている場合、その行は実際の出力の空白行と一致します。真に空白の行が予期される出力を区切るため、これが空白行が予期されることを伝える唯一の方法です。&lt;a href=&quot;#doctest.DONT_ACCEPT_BLANKLINE&quot;&gt; &lt;code&gt;DONT_ACCEPT_BLANKLINE&lt;/code&gt; &lt;/a&gt;が指定されている場合、この置換は許可されません。</target>
        </trans-unit>
        <trans-unit id="f2508fc55ad92f5457b99f4d98df22c95e511d0e" translate="yes" xml:space="preserve">
          <source>By default, if an expected output block contains just &lt;code&gt;1&lt;/code&gt;, an actual output block containing just &lt;code&gt;1&lt;/code&gt; or just &lt;code&gt;True&lt;/code&gt; is considered to be a match, and similarly for &lt;code&gt;0&lt;/code&gt; versus &lt;code&gt;False&lt;/code&gt;. When &lt;a href=&quot;#doctest.DONT_ACCEPT_TRUE_FOR_1&quot;&gt;&lt;code&gt;DONT_ACCEPT_TRUE_FOR_1&lt;/code&gt;&lt;/a&gt; is specified, neither substitution is allowed. The default behavior caters to that Python changed the return type of many functions from integer to boolean; doctests expecting &amp;ldquo;little integer&amp;rdquo; output still work in these cases. This option will probably go away, but not for several years.</source>
          <target state="translated">デフォルトでは、予期される出力ブロックに &lt;code&gt;1&lt;/code&gt; のみが含まれている場合、 &lt;code&gt;1&lt;/code&gt; または &lt;code&gt;True&lt;/code&gt; のみを含む実際の出力ブロックは一致と見なされ、 &lt;code&gt;0&lt;/code&gt; と &lt;code&gt;False&lt;/code&gt; の場合も同様です。&lt;a href=&quot;#doctest.DONT_ACCEPT_TRUE_FOR_1&quot;&gt; &lt;code&gt;DONT_ACCEPT_TRUE_FOR_1&lt;/code&gt; &lt;/a&gt;が指定されている場合、どちらの置換も許可されません。デフォルトの動作は、Pythonが多くの関数の戻り値の型を整数からブールに変更したことに対応しています。「小さな整数」の出力を期待するdoctestは、これらの場合でも機能します。このオプションはおそらくなくなるでしょうが、数年はそうではありません。</target>
        </trans-unit>
        <trans-unit id="f9b9cb578b338579d6cbb60c27b43fc1a3cceffa" translate="yes" xml:space="preserve">
          <source>By default, no arguments are passed to &lt;em&gt;target&lt;/em&gt;.</source>
          <target state="translated">デフォルトでは、引数は&lt;em&gt;targetに&lt;/em&gt;渡されません。</target>
        </trans-unit>
        <trans-unit id="008b3b178e4b68b1e60ef93709f10afc91405af4" translate="yes" xml:space="preserve">
          <source>By default, or when &lt;em&gt;pages&lt;/em&gt; is either &lt;code&gt;0&lt;/code&gt; or a negative integer, the entire database is copied in a single step; otherwise the method performs a loop copying up to &lt;em&gt;pages&lt;/em&gt; pages at a time.</source>
          <target state="translated">デフォルト、または&lt;em&gt;ページ&lt;/em&gt;が &lt;code&gt;0&lt;/code&gt; または負の整数の場合、データベース全体が1つのステップでコピーされます。それ以外の場合、このメソッドは一度に最大&lt;em&gt;page&lt;/em&gt;ページまでループコピーを実行します。</target>
        </trans-unit>
        <trans-unit id="7fb1ffcd7df10e13bd50a132b07d1a02253cb944" translate="yes" xml:space="preserve">
          <source>By default, server binds itself to all interfaces. The option &lt;code&gt;-b/--bind&lt;/code&gt; specifies a specific address to which it should bind. Both IPv4 and IPv6 addresses are supported. For example, the following command causes the server to bind to localhost only:</source>
          <target state="translated">デフォルトでは、サーバーはそれ自体をすべてのインターフェースにバインドします。オプション &lt;code&gt;-b/--bind&lt;/code&gt; は、バインドする特定のアドレスを指定します。IPv4アドレスとIPv6アドレスの両方がサポートされています。たとえば、次のコマンドは、サーバーをlocalhostのみにバインドします。</target>
        </trans-unit>
        <trans-unit id="77eeefe6f3c358b478358f7fcd4bb93cba700b29" translate="yes" xml:space="preserve">
          <source>By default, server uses the current directory. The option &lt;code&gt;-d/--directory&lt;/code&gt; specifies a directory to which it should serve the files. For example, the following command uses a specific directory:</source>
          <target state="translated">デフォルトでは、サーバーは現在のディレクトリを使用します。オプション &lt;code&gt;-d/--directory&lt;/code&gt; は、ファイルを提供するディレクトリを指定します。たとえば、次のコマンドは特定のディレクトリを使用します。</target>
        </trans-unit>
        <trans-unit id="301b7f7ac742594093987dfcc029e8f93e2dbe64" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; data format uses a relatively compact binary representation. If you need optimal size characteristics, you can efficiently &lt;a href=&quot;archiving&quot;&gt;compress&lt;/a&gt; pickled data.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;データ形式は比較的コンパクトなバイナリ表現を使用します。最適なサイズ特性が必要な場合は、漬物データを効率的に&lt;a href=&quot;archiving&quot;&gt;圧縮&lt;/a&gt;できます。</target>
        </trans-unit>
        <trans-unit id="094a33ba83d7519f725e162343187dcd2696de2d" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;#module-sqlite3&quot;&gt;&lt;code&gt;sqlite3&lt;/code&gt;&lt;/a&gt; module uses its &lt;a href=&quot;#sqlite3.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; class for the connect call. You can, however, subclass the &lt;a href=&quot;#sqlite3.Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt; class and make &lt;a href=&quot;#sqlite3.connect&quot;&gt;&lt;code&gt;connect()&lt;/code&gt;&lt;/a&gt; use your class instead by providing your class for the &lt;em&gt;factory&lt;/em&gt; parameter.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;#module-sqlite3&quot;&gt; &lt;code&gt;sqlite3&lt;/code&gt; &lt;/a&gt;モジュールは、接続呼び出しに&lt;a href=&quot;#sqlite3.Connection&quot;&gt; &lt;code&gt;Connection&lt;/code&gt; &lt;/a&gt;クラスを使用します。ただし、&lt;em&gt;ファクトリ&lt;/em&gt;パラメータにクラスを提供することで、&lt;a href=&quot;#sqlite3.Connection&quot;&gt; &lt;code&gt;Connection&lt;/code&gt; &lt;/a&gt;クラスをサブクラス化し、代わりにそのクラスを&lt;a href=&quot;#sqlite3.connect&quot;&gt; &lt;code&gt;connect()&lt;/code&gt; に&lt;/a&gt;使用させることができます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6462d732918c01c641bc37dfaab3963a19f0d248" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;#urllib.request.URLopener&quot;&gt;&lt;code&gt;URLopener&lt;/code&gt;&lt;/a&gt; class sends a &lt;em&gt;User-Agent&lt;/em&gt; header of &lt;code&gt;urllib/VVV&lt;/code&gt;, where &lt;em&gt;VVV&lt;/em&gt; is the &lt;a href=&quot;urllib#module-urllib&quot;&gt;&lt;code&gt;urllib&lt;/code&gt;&lt;/a&gt; version number. Applications can define their own &lt;em&gt;User-Agent&lt;/em&gt; header by subclassing &lt;a href=&quot;#urllib.request.URLopener&quot;&gt;&lt;code&gt;URLopener&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#urllib.request.FancyURLopener&quot;&gt;&lt;code&gt;FancyURLopener&lt;/code&gt;&lt;/a&gt; and setting the class attribute &lt;a href=&quot;#urllib.request.URLopener.version&quot;&gt;&lt;code&gt;version&lt;/code&gt;&lt;/a&gt; to an appropriate string value in the subclass definition.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;#urllib.request.URLopener&quot;&gt; &lt;code&gt;URLopener&lt;/code&gt; の&lt;/a&gt;クラスが送信し&lt;em&gt;たUser-Agent&lt;/em&gt;のヘッダ &lt;code&gt;urllib/VVV&lt;/code&gt; 、&lt;em&gt;VVVが&lt;/em&gt;ある&lt;a href=&quot;urllib#module-urllib&quot;&gt; &lt;code&gt;urllib&lt;/code&gt; は&lt;/a&gt;バージョン番号を。アプリケーションは、&lt;a href=&quot;#urllib.request.URLopener&quot;&gt; &lt;code&gt;URLopener&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#urllib.request.FancyURLopener&quot;&gt; &lt;code&gt;FancyURLopener&lt;/code&gt; &lt;/a&gt;をサブクラス化し、クラス属性&lt;a href=&quot;#urllib.request.URLopener.version&quot;&gt; &lt;code&gt;version&lt;/code&gt; &lt;/a&gt;をサブクラス定義で適切な文字列値に設定することにより、独自の&lt;em&gt;User-Agent&lt;/em&gt;ヘッダーを定義できます。</target>
        </trans-unit>
        <trans-unit id="24a0dabed54df7a1b18bb8440a0376bac5366831" translate="yes" xml:space="preserve">
          <source>By default, the &lt;em&gt;errors&lt;/em&gt; argument is not checked for best performances, but only used at the first decoding error. Enable the &lt;a href=&quot;devmode#devmode&quot;&gt;Python Development Mode&lt;/a&gt;, or use a debug build to check &lt;em&gt;errors&lt;/em&gt;.</source>
          <target state="translated">By default, the &lt;em&gt;errors&lt;/em&gt; argument is not checked for best performances, but only used at the first decoding error. Enable the &lt;a href=&quot;devmode#devmode&quot;&gt;Python Development Mode&lt;/a&gt;, or use a debug build to check &lt;em&gt;errors&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="9c9bf05ff10e8d81625ba313ef44e9675125f4fd" translate="yes" xml:space="preserve">
          <source>By default, the &lt;em&gt;errors&lt;/em&gt; argument is not checked for best performances, but only used at the first encoding error. Enable the &lt;a href=&quot;devmode#devmode&quot;&gt;Python Development Mode&lt;/a&gt;, or use a debug build to check &lt;em&gt;errors&lt;/em&gt;.</source>
          <target state="translated">By default, the &lt;em&gt;errors&lt;/em&gt; argument is not checked for best performances, but only used at the first encoding error. Enable the &lt;a href=&quot;devmode#devmode&quot;&gt;Python Development Mode&lt;/a&gt;, or use a debug build to check &lt;em&gt;errors&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="3680d558cfec6850bcf6d9a77a8cad55df9c5560" translate="yes" xml:space="preserve">
          <source>By default, the &lt;strong&gt;href&lt;/strong&gt; attribute is treated as a file name. You can use custom loaders to override this behaviour. Also note that the standard helper does not support XPointer syntax.</source>
          <target state="translated">デフォルトでは、&lt;strong&gt;href&lt;/strong&gt;属性はファイル名として扱われます。カスタムローダーを使用して、この動作をオーバーライドできます。また、標準ヘルパーはXPointer構文をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="d10ea8597ea642766854d45414b54ceba2e795c6" translate="yes" xml:space="preserve">
          <source>By default, the Python traceback is written to &lt;a href=&quot;sys#sys.stderr&quot;&gt;&lt;code&gt;sys.stderr&lt;/code&gt;&lt;/a&gt;. To see tracebacks, applications must be run in the terminal. A log file can alternatively be passed to &lt;a href=&quot;#faulthandler.enable&quot;&gt;&lt;code&gt;faulthandler.enable()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、Pythonトレースバックは&lt;a href=&quot;sys#sys.stderr&quot;&gt; &lt;code&gt;sys.stderr&lt;/code&gt; に&lt;/a&gt;書き込まれます。トレースバックを表示するには、アプリケーションをターミナルで実行する必要があります。または、ログファイルを&lt;a href=&quot;#faulthandler.enable&quot;&gt; &lt;code&gt;faulthandler.enable()&lt;/code&gt; に&lt;/a&gt;渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="920a6566848376fec069ad7573aa5aa7bb437561" translate="yes" xml:space="preserve">
          <source>By default, the class also implements the parse method of the XMLReader interface using the feed, close and reset methods of the IncrementalParser interface as a convenience to SAX 2.0 driver writers.</source>
          <target state="translated">デフォルトでは、このクラスはまた、SAX 2.0のドライバ・ライターの利便性として、IncrementalParserインターフェースのfeed、close、およびresetメソッドを使用して、XMLReaderインターフェースのparseメソッドを実装しています。</target>
        </trans-unit>
        <trans-unit id="c77b39dd4b69e05f235e3b85ecffeea127e6edc1" translate="yes" xml:space="preserve">
          <source>By default, the description will be line-wrapped so that it fits within the given space. To change this behavior, see the &lt;a href=&quot;#formatter-class&quot;&gt;formatter_class&lt;/a&gt; argument.</source>
          <target state="translated">デフォルトでは、説明は指定されたスペースに収まるように折り返されます。この動作を変更するには、&lt;a href=&quot;#formatter-class&quot;&gt;formatter_class&lt;/a&gt;引数を参照してください。</target>
        </trans-unit>
        <trans-unit id="72cdb093d0d5c4a0811bf0713c0a0594ccf746c2" translate="yes" xml:space="preserve">
          <source>By default, the diff control lines (those with &lt;code&gt;***&lt;/code&gt; or &lt;code&gt;---&lt;/code&gt;) are created with a trailing newline. This is helpful so that inputs created from &lt;a href=&quot;io#io.IOBase.readlines&quot;&gt;&lt;code&gt;io.IOBase.readlines()&lt;/code&gt;&lt;/a&gt; result in diffs that are suitable for use with &lt;a href=&quot;io#io.IOBase.writelines&quot;&gt;&lt;code&gt;io.IOBase.writelines()&lt;/code&gt;&lt;/a&gt; since both the inputs and outputs have trailing newlines.</source>
          <target state="translated">デフォルトでは、差分制御行（ &lt;code&gt;***&lt;/code&gt; または &lt;code&gt;---&lt;/code&gt; が付いている行）は、末尾に改行が付いて作成されます。これは、そうから作成した入力が有用である&lt;a href=&quot;io#io.IOBase.readlines&quot;&gt; &lt;code&gt;io.IOBase.readlines()&lt;/code&gt; &lt;/a&gt;と共に使用するのに適している差分における結果&lt;a href=&quot;io#io.IOBase.writelines&quot;&gt; &lt;code&gt;io.IOBase.writelines()&lt;/code&gt; &lt;/a&gt;入力と出力の両方が後続しているので、改行。</target>
        </trans-unit>
        <trans-unit id="701fa93323cbf8ce2e905edfa806eadfe2ba9ee4" translate="yes" xml:space="preserve">
          <source>By default, the diff control lines (those with &lt;code&gt;---&lt;/code&gt;, &lt;code&gt;+++&lt;/code&gt;, or &lt;code&gt;@@&lt;/code&gt;) are created with a trailing newline. This is helpful so that inputs created from &lt;a href=&quot;io#io.IOBase.readlines&quot;&gt;&lt;code&gt;io.IOBase.readlines()&lt;/code&gt;&lt;/a&gt; result in diffs that are suitable for use with &lt;a href=&quot;io#io.IOBase.writelines&quot;&gt;&lt;code&gt;io.IOBase.writelines()&lt;/code&gt;&lt;/a&gt; since both the inputs and outputs have trailing newlines.</source>
          <target state="translated">デフォルトでは、差分制御行（ &lt;code&gt;---&lt;/code&gt; 、 &lt;code&gt;+++&lt;/code&gt; 、または &lt;code&gt;@@&lt;/code&gt; を含むもの）は、末尾に改行が付いて作成されます。これは、そうから作成した入力が有用である&lt;a href=&quot;io#io.IOBase.readlines&quot;&gt; &lt;code&gt;io.IOBase.readlines()&lt;/code&gt; &lt;/a&gt;と共に使用するのに適している差分における結果&lt;a href=&quot;io#io.IOBase.writelines&quot;&gt; &lt;code&gt;io.IOBase.writelines()&lt;/code&gt; &lt;/a&gt;入力と出力の両方が後続しているので、改行。</target>
        </trans-unit>
        <trans-unit id="195dae096c798b9d4b95b13edb7f663ede7d0d8a" translate="yes" xml:space="preserve">
          <source>By default, the result of packing a given C struct includes pad bytes in order to maintain proper alignment for the C types involved; similarly, alignment is taken into account when unpacking. This behavior is chosen so that the bytes of a packed struct correspond exactly to the layout in memory of the corresponding C struct. To handle platform-independent data formats or omit implicit pad bytes, use &lt;code&gt;standard&lt;/code&gt; size and alignment instead of &lt;code&gt;native&lt;/code&gt; size and alignment: see &lt;a href=&quot;#struct-alignment&quot;&gt;Byte Order, Size, and Alignment&lt;/a&gt; for details.</source>
          <target state="translated">デフォルトでは、特定のC構造体のパッキングの結果には、関係するCタイプの適切な配置を維持するための埋め込みバイトが含まれます。同様に、開梱時に位置合わせが考慮されます。この動作は、パックされた構造体のバイトが対応するC構造体のメモリ内のレイアウトに正確に対応するように選択されています。プラットフォームに依存しないデータ形式を処理するか、暗黙の埋め込みバイトを省略するには、 &lt;code&gt;native&lt;/code&gt; サイズと配置の代わりに &lt;code&gt;standard&lt;/code&gt; サイズと配置を使用します。詳細については&lt;a href=&quot;#struct-alignment&quot;&gt;、バイトの順序、サイズ、および配置&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2f8d31485f1cf87f768e5f2e59061661f7d4b972" translate="yes" xml:space="preserve">
          <source>By default, the scripts &lt;code&gt;pipX&lt;/code&gt; and &lt;code&gt;pipX.Y&lt;/code&gt; will be installed (where X.Y stands for the current version of Python).</source>
          <target state="translated">デフォルトでは、スクリプト &lt;code&gt;pipX&lt;/code&gt; および &lt;code&gt;pipX.Y&lt;/code&gt; がインストールされます（XYは現在のバージョンのPythonを表します）。</target>
        </trans-unit>
        <trans-unit id="fdf79e7494f0c8e40aa022f705fa4a17ed0f4359" translate="yes" xml:space="preserve">
          <source>By default, the scripts &lt;code&gt;pipX&lt;/code&gt; and &lt;code&gt;pipX.Y&lt;/code&gt; will be installed (where X.Y stands for the version of Python used to invoke &lt;code&gt;ensurepip&lt;/code&gt;). The scripts installed can be controlled through two additional command line options:</source>
          <target state="translated">デフォルトでは、スクリプト &lt;code&gt;pipX&lt;/code&gt; および &lt;code&gt;pipX.Y&lt;/code&gt; がインストールされます（XYは、 &lt;code&gt;ensurepip&lt;/code&gt; の呼び出しに使用されるPythonのバージョンを表します）。インストールされたスクリプトは、2つの追加のコマンドラインオプションを使用して制御できます。</target>
        </trans-unit>
        <trans-unit id="5200803235e477dfe23987b607e2285ed5feca81" translate="yes" xml:space="preserve">
          <source>By default, the sub-window will extend from the specified position to the lower right corner of the window.</source>
          <target state="translated">デフォルトでは、サブウィンドウは指定した位置からウィンドウの右下隅まで伸びます。</target>
        </trans-unit>
        <trans-unit id="3b06468131c77687172a2610a996c3423867c90f" translate="yes" xml:space="preserve">
          <source>By default, the window will extend from the specified position to the lower right corner of the screen.</source>
          <target state="translated">デフォルトでは、指定した位置から画面右下までウィンドウが伸びます。</target>
        </trans-unit>
        <trans-unit id="9477a9bea084d85882bf3b402a08fa167abb59ff" translate="yes" xml:space="preserve">
          <source>By default, this function will return the data as encoded bytes. The actual encoding of the output data may depend on the command being invoked, so the decoding to text will often need to be handled at the application level.</source>
          <target state="translated">デフォルトでは、この関数はエンコードされたバイトとしてデータを返します。出力データの実際のエンコーディングは、呼び出されたコマンドに依存しますので、テキストへのデコードはアプリケーションレベルで処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="31f19246d0599116d8e34379c8cd902758801c53" translate="yes" xml:space="preserve">
          <source>By default, unpickling will import any class or function that it finds in the pickle data. For many applications, this behaviour is unacceptable as it permits the unpickler to import and invoke arbitrary code. Just consider what this hand-crafted pickle data stream does when loaded:</source>
          <target state="translated">デフォルトでは、 unpickling はピクルスデータの中で見つかったクラスや関数をすべてインポートします。多くのアプリケーションでは、この動作はunpicklerが任意のコードをインポートして呼び出すことを許してしまうため、受け入れられません。手作りのピクルスデータストリームが読み込まれたときの動作を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="3ef1793786e54340ce8bfbe17daf119d10d21483" translate="yes" xml:space="preserve">
          <source>By default, version 3 pickles are used to serialize values. The version of the pickle protocol can be specified with the &lt;em&gt;protocol&lt;/em&gt; parameter.</source>
          <target state="translated">デフォルトでは、バージョン3のピクルが値のシリアル化に使用されます。pickleプロトコルのバージョンは&lt;em&gt;protocol&lt;/em&gt;パラメータで指定できます。</target>
        </trans-unit>
        <trans-unit id="b38308bfeb6ea74147739e7c4c985e750ec529ef" translate="yes" xml:space="preserve">
          <source>By default, version 3 pickles are used to serialize values. The version of the pickle protocol can be specified with the &lt;em&gt;protocol&lt;/em&gt; parameter. See the &lt;a href=&quot;pickle#module-pickle&quot;&gt;&lt;code&gt;pickle&lt;/code&gt;&lt;/a&gt; documentation for a discussion of the pickle protocols.</source>
          <target state="translated">デフォルトでは、バージョン3のピクルが値のシリアル化に使用されます。pickleプロトコルのバージョンは&lt;em&gt;protocol&lt;/em&gt;パラメータで指定できます。ピクルプロトコルの説明については、&lt;a href=&quot;pickle#module-pickle&quot;&gt; &lt;code&gt;pickle&lt;/code&gt; &lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="eff56d0e72b6ce61e999e3149679525f60cc22e6" translate="yes" xml:space="preserve">
          <source>By default, wake up one thread waiting on this condition, if any. If the calling thread has not acquired the lock when this method is called, a &lt;a href=&quot;exceptions#RuntimeError&quot;&gt;&lt;code&gt;RuntimeError&lt;/code&gt;&lt;/a&gt; is raised.</source>
          <target state="translated">デフォルトでは、この条件で待機している1つのスレッドがあれば、それを起こします。このメソッドが呼び出されたときに呼び出しスレッドがロックを取得していない場合、&lt;a href=&quot;exceptions#RuntimeError&quot;&gt; &lt;code&gt;RuntimeError&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="854aa6f56f9c0d27436b46f46a4a43f383857560" translate="yes" xml:space="preserve">
          <source>By default, when reading from &lt;code&gt;/dev/random&lt;/code&gt;, &lt;a href=&quot;#os.getrandom&quot;&gt;&lt;code&gt;getrandom()&lt;/code&gt;&lt;/a&gt; blocks if no random bytes are available, and when reading from &lt;code&gt;/dev/urandom&lt;/code&gt;, it blocks if the entropy pool has not yet been initialized.</source>
          <target state="translated">デフォルトでは、からの読み取り時に &lt;code&gt;/dev/random&lt;/code&gt; 、&lt;a href=&quot;#os.getrandom&quot;&gt; &lt;code&gt;getrandom()&lt;/code&gt; &lt;/a&gt;からの読み取り時ブロック全くランダムなバイトが用意されていない、と場合 &lt;code&gt;/dev/urandom&lt;/code&gt; 、それブロックのエントロピープールがまだ初期化されていない場合。</target>
        </trans-unit>
        <trans-unit id="7b516742d0bb1873f6652a665f55b4757162ced1" translate="yes" xml:space="preserve">
          <source>By reading and writing only large chunks of data even when the user asks for a single byte, buffered I/O hides any inefficiency in calling and executing the operating system&amp;rsquo;s unbuffered I/O routines. The gain depends on the OS and the kind of I/O which is performed. For example, on some modern OSes such as Linux, unbuffered disk I/O can be as fast as buffered I/O. The bottom line, however, is that buffered I/O offers predictable performance regardless of the platform and the backing device. Therefore, it is almost always preferable to use buffered I/O rather than unbuffered I/O for binary data.</source>
          <target state="translated">ユーザーが1バイトを要求した場合でも、データの大きなチャンクのみを読み書きすることにより、バッファI / Oは、オペレーティングシステムの非バッファI / Oルーチンの呼び出しと実行における非効率性を隠します。ゲインは、OSと実行されるI / Oの種類によって異なります。たとえば、Linuxなどの一部の最近のOSでは、バッファリングされていないディスクI / Oは、バッファリングされたI / Oと同じくらい高速になる場合があります。ただし、重要な点として、バッファI / Oは、プラットフォームやバッキングデバイスに関係なく、予測可能なパフォーマンスを提供します。したがって、ほとんどの場合、バイナリデータには、バッファリングされていないI / Oではなく、バッファリングされたI / Oを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="dd46034571b47794a0bda9d3d583cb9fd6cb5cec" translate="yes" xml:space="preserve">
          <source>By returning true values, these callbacks can suppress exceptions the same way context manager &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; methods can.</source>
          <target state="translated">true値を返すことにより、これらのコールバックは、コンテキストマネージャーの&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__exit__&quot;&gt; &lt;code&gt;__exit__()&lt;/code&gt; &lt;/a&gt;メソッドと同じ方法で例外を抑制できます。</target>
        </trans-unit>
        <trans-unit id="07389109df8d85f0cfe4e8ae88013d95963809e8" translate="yes" xml:space="preserve">
          <source>By returning true values, these callbacks can suppress exceptions the same way context manager &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__exit__&quot;&gt;&lt;code&gt;__exit__()&lt;/code&gt;&lt;/a&gt; methods can.</source>
          <target state="translated">By returning true values, these callbacks can suppress exceptions the same way context manager &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__exit__&quot;&gt; &lt;code&gt;__exit__()&lt;/code&gt; &lt;/a&gt; methods can.</target>
        </trans-unit>
        <trans-unit id="e560960e3ca3501b7d01f95836df6c7554b4bf3e" translate="yes" xml:space="preserve">
          <source>By setting &lt;em&gt;salt&lt;/em&gt; parameter users can introduce randomization to the hash function. Randomized hashing is useful for protecting against collision attacks on the hash function used in digital signatures.</source>
          <target state="translated">&lt;em&gt;salt&lt;/em&gt;パラメータを設定することにより、ユーザーはハッシュ関数にランダム化を導入できます。ランダム化ハッシュは、デジタル署名で使用されるハッシュ関数に対する衝突攻撃から保護するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="32fe99c22402d3f9cd7abfeb71dfafa391c5a113" translate="yes" xml:space="preserve">
          <source>By using a custom event loop policy, the behavior of &lt;a href=&quot;asyncio-eventloop#asyncio.get_event_loop&quot;&gt;&lt;code&gt;get_event_loop()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;asyncio-eventloop#asyncio.set_event_loop&quot;&gt;&lt;code&gt;set_event_loop()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;asyncio-eventloop#asyncio.new_event_loop&quot;&gt;&lt;code&gt;new_event_loop()&lt;/code&gt;&lt;/a&gt; functions can be customized.</source>
          <target state="translated">カスタムイベントループポリシーを使用することにより、&lt;a href=&quot;asyncio-eventloop#asyncio.get_event_loop&quot;&gt; &lt;code&gt;get_event_loop()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;asyncio-eventloop#asyncio.set_event_loop&quot;&gt; &lt;code&gt;set_event_loop()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;asyncio-eventloop#asyncio.new_event_loop&quot;&gt; &lt;code&gt;new_event_loop()&lt;/code&gt; &lt;/a&gt;関数の動作をカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="b091b4f9c8ca0872cda8cde6431e148f093daeaf" translate="yes" xml:space="preserve">
          <source>Byte Order, Size, and Alignment</source>
          <target state="translated">バイトの順序、サイズ、およびアラインメント</target>
        </trans-unit>
        <trans-unit id="8a0d6d3439bd2ad80ce89b16b070f185d6471f83" translate="yes" xml:space="preserve">
          <source>Byte index at which an error occurred.</source>
          <target state="translated">エラーが発生したバイトインデックス。</target>
        </trans-unit>
        <trans-unit id="1cc655c3485fc15dd7ca0afb59d9aa38bd081838" translate="yes" xml:space="preserve">
          <source>Byte offset to the file header.</source>
          <target state="translated">ファイルヘッダのバイトオフセット。</target>
        </trans-unit>
        <trans-unit id="8333e6eadb360031f488d25d73b03263c17d5cd1" translate="yes" xml:space="preserve">
          <source>Byte order</source>
          <target state="translated">バイトオーダー</target>
        </trans-unit>
        <trans-unit id="4597d8ef411d59e1d9be06348c147c4dc042b844" translate="yes" xml:space="preserve">
          <source>Byte-compile a single source file.</source>
          <target state="translated">単一のソースファイルをバイトコンパイルします。</target>
        </trans-unit>
        <trans-unit id="8f44d65c941475def9c425dea9272a82770ad20f" translate="yes" xml:space="preserve">
          <source>Byte-compile all the &lt;code&gt;.py&lt;/code&gt; files found along &lt;code&gt;sys.path&lt;/code&gt;. Return a true value if all the files compiled successfully, and a false value otherwise.</source>
          <target state="translated">&lt;code&gt;sys.path&lt;/code&gt; に沿って見つかったすべての &lt;code&gt;.py&lt;/code&gt; ファイルをバイトコンパイルします。すべてのファイルが正常にコンパイルされた場合はtrue値を返し、そうでない場合はfalse値を返します。</target>
        </trans-unit>
        <trans-unit id="d77f09e0e7b15c9cb3b575a00f1091dc029bc527" translate="yes" xml:space="preserve">
          <source>Bytearray Objects</source>
          <target state="translated">バイト配列オブジェクト</target>
        </trans-unit>
        <trans-unit id="f3f31d2587c2659748200906697b7e426ebe3937" translate="yes" xml:space="preserve">
          <source>Bytecode analysis</source>
          <target state="translated">バイトコード解析</target>
        </trans-unit>
        <trans-unit id="29c3e8776cc54b4a3d00a06a3057380e1328a8bd" translate="yes" xml:space="preserve">
          <source>Bytes (any object that follows the &lt;a href=&quot;https://docs.python.org/3.8/c-api/buffer.html#bufferobjects&quot;&gt;buffer protocol&lt;/a&gt; or has &lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__bytes__&quot;&gt;&lt;code&gt;__bytes__()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">バイト（&lt;a href=&quot;https://docs.python.org/3.8/c-api/buffer.html#bufferobjects&quot;&gt;バッファプロトコルに&lt;/a&gt;従うか、&lt;a href=&quot;https://docs.python.org/3.8/reference/datamodel.html#object.__bytes__&quot;&gt; &lt;code&gt;__bytes__()&lt;/code&gt; &lt;/a&gt;持つオブジェクト）。</target>
        </trans-unit>
        <trans-unit id="dc7b82a1c67cd7fdb773f18fb987493810bcff8a" translate="yes" xml:space="preserve">
          <source>Bytes (any object that follows the &lt;a href=&quot;https://docs.python.org/3.9/c-api/buffer.html#bufferobjects&quot;&gt;buffer protocol&lt;/a&gt; or has &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__bytes__&quot;&gt;&lt;code&gt;__bytes__()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">Bytes (any object that follows the &lt;a href=&quot;https://docs.python.org/3.9/c-api/buffer.html#bufferobjects&quot;&gt;buffer protocol&lt;/a&gt; or has &lt;a href=&quot;https://docs.python.org/3.9/reference/datamodel.html#object.__bytes__&quot;&gt; &lt;code&gt;__bytes__()&lt;/code&gt; &lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="87b953d5d72682cb2132578bfed73b5853f4110b" translate="yes" xml:space="preserve">
          <source>Bytes (converts any Python object using &lt;code&gt;repr(obj).encode('ascii','backslashreplace)&lt;/code&gt;).</source>
          <target state="translated">バイト（ &lt;code&gt;repr(obj).encode('ascii','backslashreplace)&lt;/code&gt; を使用してPythonオブジェクトを変換します）。</target>
        </trans-unit>
        <trans-unit id="240fc4227ac064b6af55b8039b1a8a4d447e7719" translate="yes" xml:space="preserve">
          <source>Bytes Objects</source>
          <target state="translated">バイト オブジェクト</target>
        </trans-unit>
        <trans-unit id="691d2567928500c0d6dcc3954f0ec2324402cb5d" translate="yes" xml:space="preserve">
          <source>Bytes and Bytearray Operations</source>
          <target state="translated">バイトとバイト配列の演算</target>
        </trans-unit>
        <trans-unit id="7df78136784a7bc228bd395f315bea3a22a1309a" translate="yes" xml:space="preserve">
          <source>Bytes objects (&lt;code&gt;bytes&lt;/code&gt;/&lt;code&gt;bytearray&lt;/code&gt;) have one unique built-in operation: the &lt;code&gt;%&lt;/code&gt; operator (modulo). This is also known as the bytes &lt;em&gt;formatting&lt;/em&gt; or &lt;em&gt;interpolation&lt;/em&gt; operator. Given &lt;code&gt;format % values&lt;/code&gt; (where &lt;em&gt;format&lt;/em&gt; is a bytes object), &lt;code&gt;%&lt;/code&gt; conversion specifications in &lt;em&gt;format&lt;/em&gt; are replaced with zero or more elements of &lt;em&gt;values&lt;/em&gt;. The effect is similar to using the &lt;code&gt;sprintf()&lt;/code&gt; in the C language.</source>
          <target state="translated">Bytesオブジェクト（ &lt;code&gt;bytes&lt;/code&gt; / &lt;code&gt;bytearray&lt;/code&gt; ）には、固有の組み込み演算が1つあります。それは &lt;code&gt;%&lt;/code&gt; 演算子（モジュロ）です。これは、バイト&lt;em&gt;フォーマット&lt;/em&gt;または&lt;em&gt;補間&lt;/em&gt;演算子とも呼ばれます。所定の &lt;code&gt;format % values&lt;/code&gt; （ここで&lt;em&gt;フォーマットは&lt;/em&gt;バイトのオブジェクトである）、 &lt;code&gt;%&lt;/code&gt; の内の変換指定&lt;em&gt;形式は、&lt;/em&gt;ゼロ以上の元素で置換されている&lt;em&gt;値&lt;/em&gt;。この効果は、C言語で &lt;code&gt;sprintf()&lt;/code&gt; を使用する場合と同様です。</target>
        </trans-unit>
        <trans-unit id="0abcedbcee06f3e9a3a9f49f28bb8293fda9dbce" translate="yes" xml:space="preserve">
          <source>Bytes objects are immutable sequences of single bytes. Since many major binary protocols are based on the ASCII text encoding, bytes objects offer several methods that are only valid when working with ASCII compatible data and are closely related to string objects in a variety of other ways.</source>
          <target state="translated">バイトオブジェクトはシングルバイトの不変シーケンスです。多くの主要なバイナリプロトコルはASCIIテキストエンコーディングに基づいているので、バイトオブジェクトはASCII互換のデータを扱うときにのみ有効ないくつかのメソッドを提供し、他の様々な方法で文字列オブジェクトと密接に関連しています。</target>
        </trans-unit>
        <trans-unit id="47d7f1da06c57177341c3d9ef2119c5d7eaec765" translate="yes" xml:space="preserve">
          <source>Bytes objects can also be created with literals, see &lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#strings&quot;&gt;String and Bytes literals&lt;/a&gt;.</source>
          <target state="translated">Bytesオブジェクトは、リテラルを使用して作成することもできます&lt;a href=&quot;https://docs.python.org/3.8/reference/lexical_analysis.html#strings&quot;&gt;。StringおよびBytes literalsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5788b743017e2ad56183056bf128f2cd77af475e" translate="yes" xml:space="preserve">
          <source>Bytes objects can also be created with literals, see &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#strings&quot;&gt;String and Bytes literals&lt;/a&gt;.</source>
          <target state="translated">Bytes objects can also be created with literals, see &lt;a href=&quot;https://docs.python.org/3.9/reference/lexical_analysis.html#strings&quot;&gt;String and Bytes literals&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="f91b8d8bed8c0993bf0eb2d6b6ee7a3409cd568f" translate="yes" xml:space="preserve">
          <source>Bytes version of &lt;a href=&quot;#os.environ&quot;&gt;&lt;code&gt;environ&lt;/code&gt;&lt;/a&gt;: a &lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-mapping&quot;&gt;mapping&lt;/a&gt; object representing the environment as byte strings. &lt;a href=&quot;#os.environ&quot;&gt;&lt;code&gt;environ&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.environb&quot;&gt;&lt;code&gt;environb&lt;/code&gt;&lt;/a&gt; are synchronized (modify &lt;a href=&quot;#os.environb&quot;&gt;&lt;code&gt;environb&lt;/code&gt;&lt;/a&gt; updates &lt;a href=&quot;#os.environ&quot;&gt;&lt;code&gt;environ&lt;/code&gt;&lt;/a&gt;, and vice versa).</source>
          <target state="translated">&lt;a href=&quot;#os.environ&quot;&gt; &lt;code&gt;environ&lt;/code&gt; の&lt;/a&gt;バイトバージョン：環境をバイト文字列として表す&lt;a href=&quot;https://docs.python.org/3.8/glossary.html#term-mapping&quot;&gt;マッピング&lt;/a&gt;オブジェクト。&lt;a href=&quot;#os.environ&quot;&gt; &lt;code&gt;environ&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#os.environb&quot;&gt; &lt;code&gt;environb&lt;/code&gt; &lt;/a&gt;は同期されています（&lt;a href=&quot;#os.environb&quot;&gt; &lt;code&gt;environb&lt;/code&gt; の&lt;/a&gt;更新を&lt;a href=&quot;#os.environ&quot;&gt; &lt;code&gt;environ&lt;/code&gt; &lt;/a&gt;に変更し、逆も同様です）。</target>
        </trans-unit>
        <trans-unit id="9cc583b53680a3f7ed79a980ea7403e317ec981c" translate="yes" xml:space="preserve">
          <source>Bytes version of &lt;a href=&quot;#os.environ&quot;&gt;&lt;code&gt;environ&lt;/code&gt;&lt;/a&gt;: a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-mapping&quot;&gt;mapping&lt;/a&gt; object representing the environment as byte strings. &lt;a href=&quot;#os.environ&quot;&gt;&lt;code&gt;environ&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#os.environb&quot;&gt;&lt;code&gt;environb&lt;/code&gt;&lt;/a&gt; are synchronized (modify &lt;a href=&quot;#os.environb&quot;&gt;&lt;code&gt;environb&lt;/code&gt;&lt;/a&gt; updates &lt;a href=&quot;#os.environ&quot;&gt;&lt;code&gt;environ&lt;/code&gt;&lt;/a&gt;, and vice versa).</source>
          <target state="translated">Bytes version of &lt;a href=&quot;#os.environ&quot;&gt; &lt;code&gt;environ&lt;/code&gt; &lt;/a&gt;: a &lt;a href=&quot;https://docs.python.org/3.9/glossary.html#term-mapping&quot;&gt;mapping&lt;/a&gt; object representing the environment as byte strings. &lt;a href=&quot;#os.environ&quot;&gt; &lt;code&gt;environ&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;#os.environb&quot;&gt; &lt;code&gt;environb&lt;/code&gt; &lt;/a&gt; are synchronized (modify &lt;a href=&quot;#os.environb&quot;&gt; &lt;code&gt;environb&lt;/code&gt; &lt;/a&gt; updates &lt;a href=&quot;#os.environ&quot;&gt; &lt;code&gt;environ&lt;/code&gt; &lt;/a&gt;, and vice versa).</target>
        </trans-unit>
        <trans-unit id="4c17a08f748a73c44dbe27e96cafd97e19083491" translate="yes" xml:space="preserve">
          <source>BytesWarning</source>
          <target state="translated">BytesWarning</target>
        </trans-unit>
        <trans-unit id="53cd5afff77d718a16da7a261addfd2e7a746175" translate="yes" xml:space="preserve">
          <source>C Type</source>
          <target state="translated">Cタイプ</target>
        </trans-unit>
        <trans-unit id="502ca6c945d9f8aee115c49e01f9edd12a50b0c8" translate="yes" xml:space="preserve">
          <source>C type</source>
          <target state="translated">C型</target>
        </trans-unit>
        <trans-unit id="23c8bef685fe7f8e5ab76b80f3a180f9b6022855" translate="yes" xml:space="preserve">
          <source>C++ programmers should note that Python&amp;rsquo;s virtual base class concept is not the same as C++&amp;rsquo;s.</source>
          <target state="translated">C ++プログラマは、Pythonの仮想基本クラスの概念がC ++の概念と同じではないことに注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="1034f70b6f9ddd2bcb58956fc970e5f50cec8bd2" translate="yes" xml:space="preserve">
          <source>C-Backspace</source>
          <target state="translated">C-Backspace</target>
        </trans-unit>
        <trans-unit id="235d9f2cf895c1719d46fc1198d0f621032d1477" translate="yes" xml:space="preserve">
          <source>C-Del</source>
          <target state="translated">C-Del</target>
        </trans-unit>
        <trans-unit id="a13b54dca6c09f524e525a2fe3f23ea99ba36108" translate="yes" xml:space="preserve">
          <source>C-End</source>
          <target state="translated">C-End</target>
        </trans-unit>
        <trans-unit id="eeebc65079beba3a90a4b5d6ba9a80053cb89d1e" translate="yes" xml:space="preserve">
          <source>C-Home</source>
          <target state="translated">C-Home</target>
        </trans-unit>
        <trans-unit id="75d3584877ad5e6927fb88c6d65c9ed11fe39a60" translate="yes" xml:space="preserve">
          <source>C-LeftArrow</source>
          <target state="translated">C-LeftArrow</target>
        </trans-unit>
        <trans-unit id="81723ec83c08ca03bcaaa0d427499d1e5f788151" translate="yes" xml:space="preserve">
          <source>C-RightArrow</source>
          <target state="translated">C-RightArrow</target>
        </trans-unit>
        <trans-unit id="3bff8fb1aa290267671b1c50e3b32db24f00b295" translate="yes" xml:space="preserve">
          <source>C-a</source>
          <target state="translated">C-a</target>
        </trans-unit>
        <trans-unit id="c204a76fc3c1123c96b13dd7ec922d02d4b00e91" translate="yes" xml:space="preserve">
          <source>C-b</source>
          <target state="translated">C-b</target>
        </trans-unit>
        <trans-unit id="b3b7965656c0921692a30673d7781acd51c4eed9" translate="yes" xml:space="preserve">
          <source>C-c</source>
          <target state="translated">C-c</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
