<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="gcc">
    <body>
      <group id="gcc">
        <trans-unit id="87bb50a36cabf00459b130036862eb2f9466bba2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; multiplies it by 8, and the value of &lt;code&gt;0x1.fp3&lt;/code&gt; is the same as &lt;code&gt;1.55e1&lt;/code&gt;.</source>
          <target state="translated">'8を掛け、 &lt;code&gt;0x1.fp3&lt;/code&gt; の値は1.55e1と同じ &lt;code&gt;1.55e1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5da294197901035ea4b2a1216d754ea4fbf95a82" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; must select the correct support libraries to link against. Failing to supply the correct flags may lead to subtle defects. Supplying them in cases where they are not necessary is innocuous.</source>
          <target state="translated">'リンクする正しいサポートライブラリを選択する必要があります。正しいフラグを指定しないと、微妙な欠陥が発生する可能性があります。それらが必要でない場合にそれらを供給することは無害です。</target>
        </trans-unit>
        <trans-unit id="c289eb00e042cdf494c4d90247125f7324042c6e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; needs to build supplementary stub code for constructors to work. On multi-libbed systems, &amp;lsquo;</source>
          <target state="translated">'は、コンストラクターが機能するための補足的なスタブコードを作成する必要があります。マルチライブラリシステムでは、 '</target>
        </trans-unit>
        <trans-unit id="6e9f285b9a8a0825865c6b130b1abf7c182b5374" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; nodes are unified between the DSOs.</source>
          <target state="translated">'ノードはDSO間で統合されます。</target>
        </trans-unit>
        <trans-unit id="ba05834c08cbc29a4890f265e85ef68c994728ec" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; note on each &amp;lsquo;</source>
          <target state="translated">「それぞれについてのメモ」</target>
        </trans-unit>
        <trans-unit id="434206ba1951d29294924e0eeddf2e59bfc33437" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; object file in a &amp;lsquo;</source>
          <target state="translated">''内のオブジェクトファイル</target>
        </trans-unit>
        <trans-unit id="2ddfc48f2ce4fb578efc002e206677013ca37337" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; object file. The linker for shared libraries,</source>
          <target state="translated">'オブジェクトファイル。共有ライブラリのリンカ</target>
        </trans-unit>
        <trans-unit id="0b02e3de6ffd2b9b84584e0698d23cbdc6af72e9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; object is written out along with the vtable so that &amp;lsquo;</source>
          <target state="translated">'オブジェクトはvtableとともに書き出されるため、'</target>
        </trans-unit>
        <trans-unit id="bfb0d7613a8777e139f5dec8ff1387c9c80c0cc5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; object when it is used: when applying &amp;lsquo;</source>
          <target state="translated">'使用時のオブジェクト：適用時'</target>
        </trans-unit>
        <trans-unit id="4fab68699aad3eb0c81a61f12a60a4adb508073f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; of &lt;var&gt;level&lt;/var&gt; de-activates this option. Value &amp;lsquo;</source>
          <target state="translated">&lt;var&gt;level&lt;/var&gt; 'は、このオプションを無効にします。値 '</target>
        </trans-unit>
        <trans-unit id="81205b1be3a62ddb1d87eb4390433a323ba612ba" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; on GNU/Linux and other systems that support the &lt;code&gt;%s&lt;/code&gt; extension in the &lt;code&gt;date&lt;/code&gt; command.</source>
          <target state="translated">'GNU / Linuxおよび &lt;code&gt;date&lt;/code&gt; コマンドで &lt;code&gt;%s&lt;/code&gt; 拡張子をサポートするその他のシステム。</target>
        </trans-unit>
        <trans-unit id="e2fe8853404756e2d95f372878be46954acf317a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; on IA-64.</source>
          <target state="translated">'IA-64。</target>
        </trans-unit>
        <trans-unit id="11ccc5aced877d9a91b263f2659407e0d87de251" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; on TILE-Gx. For example:</source>
          <target state="translated">'TILE-Gxで。例えば：</target>
        </trans-unit>
        <trans-unit id="c0c490bf8404f9ed935f599e70fd917742c20ace" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; on TILEPro. For example:</source>
          <target state="translated">'TILEProで。例えば：</target>
        </trans-unit>
        <trans-unit id="06614de57ea281253591d817c64f9b228fb20d5e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; on the SPARC-V8 architecture and contains both lower and upper floating-point registers on the SPARC-V9 architecture.</source>
          <target state="translated">'SPARC-V8アーキテクチャでは、SPARC-V9アーキテクチャの下位および上位の両方の浮動小数点レジスタが含まれます。</target>
        </trans-unit>
        <trans-unit id="6a497832be382babdaab70754386712182de04c8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; on the target.</source>
          <target state="translated">'ターゲット上。</target>
        </trans-unit>
        <trans-unit id="386939897d9c89a4e8b42ba466340a906272bdec" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; only specifies how to use the file&amp;mdash;it doesn&amp;rsquo;t actually include it.)</source>
          <target state="translated">'は、ファイルの使用方法のみを指定します。実際には含まれません。）</target>
        </trans-unit>
        <trans-unit id="647b9f9404f4daf68c806530ed9cb6597e265085" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; only, not a &amp;lsquo;</source>
          <target state="translated">'のみ、'ではない</target>
        </trans-unit>
        <trans-unit id="1048c1765b060cda78cf8bef8f149faaae900b9d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; operand number specifications, normally warnings are still given, since the implementation could not know what type to pass to &lt;code&gt;va_arg&lt;/code&gt; to skip the unused arguments. However, in the case of &lt;code&gt;scanf&lt;/code&gt; formats, this option suppresses the warning if the unused arguments are all pointers, since the Single Unix Specification says that such unused arguments are allowed.</source>
          <target state="translated">' 未使用の引数をスキップするために実装が &lt;code&gt;va_arg&lt;/code&gt; に渡すタイプを認識できなかったため、オペランド番号の指定、通常は引き続き警告が表示されます。ただし、 &lt;code&gt;scanf&lt;/code&gt; 形式の場合、このオプションは、未使用の引数がすべてポインターである場合に警告を抑制します。これは、Single Unix Specificationでは、このような未使用の引数は許可されているためです。</target>
        </trans-unit>
        <trans-unit id="6933bfb2952f4d85a56cdb4c1977ff41b03d4660" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; operator causes the preprocessor to remove the comma before it. If you do provide some variable arguments in your macro invocation, GNU CPP does not complain about the paste operation and instead places the variable arguments after the comma. Just like any other pasted macro argument, these arguments are not macro expanded.</source>
          <target state="translated">'演算子を使用すると、プリプロセッサはその前のコンマを削除します。マクロ呼び出しでいくつかの可変引数を指定した場合、GNU CPPは貼り付け操作について不満を言わず、代わりに可変引数をコンマの後に置きます。他の貼り付けたマクロ引数と同様に、これらの引数はマクロ展開されません。</target>
        </trans-unit>
        <trans-unit id="a3bd2ef9be7b689e43dba3c5a48496425d6529d0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; operator in C, except that the expression returned has its type unaltered by promotion rules. Also, the built-in function does not evaluate the expression that is not chosen. For example, if &lt;var&gt;const_exp&lt;/var&gt; evaluates to &lt;code&gt;true&lt;/code&gt;, &lt;var&gt;exp2&lt;/var&gt; is not evaluated even if it has side effects.</source>
          <target state="translated">'Cの演算子。ただし、返される式の型はプロモーションルールによって変更されません。また、組み込み関数は、選択されていない式を評価しません。例えば、場合 &lt;var&gt;const_exp&lt;/var&gt; に評価 &lt;code&gt;true&lt;/code&gt; 、 &lt;var&gt;exp2&lt;/var&gt; それが副作用を持っている場合でも、評価されません。</target>
        </trans-unit>
        <trans-unit id="7f45473829929b570265746ae4223f75bc5a2db2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; operator inserts a &amp;lsquo;</source>
          <target state="translated">'演算子は'</target>
        </trans-unit>
        <trans-unit id="b7726d88e53f9e464d1c081d79782c032bbcf584" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; operator may not be applied to them. As an extension, GNU C allows such arrays to be subscripted in C90 mode, though otherwise they do not decay to pointers outside C99 mode. For example, this is valid in GNU C though not valid in C90:</source>
          <target state="translated">'演算子はそれらに適用できません。拡張機能として、GNU Cはそのような配列にC90モードで添え字を付けることを許可していますが、それ以外の場合、C99モード以外のポインターへの減衰はありません。たとえば、これはGNU Cでは有効ですが、C90では無効です。</target>
        </trans-unit>
        <trans-unit id="951efc394542ce4126c02adc9f04a0ba59c32f9e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; operators that are available with extended &lt;code&gt;asm&lt;/code&gt;. This results in minor differences between basic &lt;code&gt;asm&lt;/code&gt; strings and extended &lt;code&gt;asm&lt;/code&gt; templates. For example, to refer to registers you might use &amp;lsquo;</source>
          <target state="translated">'拡張 &lt;code&gt;asm&lt;/code&gt; で使用可能な演算子。これにより、基本的な &lt;code&gt;asm&lt;/code&gt; 文字列と拡張された &lt;code&gt;asm&lt;/code&gt; テンプレートの間にわずかな違いが生じます。たとえば、レジ​​スターを参照するには、「</target>
        </trans-unit>
        <trans-unit id="964135645a21cdb3e2020a5f384f5054a02aa41e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; option can be applied to both &amp;lsquo;</source>
          <target state="translated">'オプションは両方に適用できます'</target>
        </trans-unit>
        <trans-unit id="9611b2d63a38484fd570d64c018079d525c4b372" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; option is entirely disabled by the &amp;lsquo;</source>
          <target state="translated">'オプションは'によって完全に無効化されています</target>
        </trans-unit>
        <trans-unit id="8461c1f5f429811b0e1452f1b93c8e3bd72d4490" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; option that follows it.</source>
          <target state="translated">'それに続くオプション。</target>
        </trans-unit>
        <trans-unit id="4d81fb33ce37eea8a6c2b37ba774ec87c33c91af" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; option to the HP compilers.</source>
          <target state="translated">'HPコンパイラのオプション。</target>
        </trans-unit>
        <trans-unit id="d8c3872087d40785690bef499ff3edec9253fde8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; option, both the including and included file names will be complete path names.</source>
          <target state="translated">'オプション。インクルードファイル名とインクルードファイル名の両方が完全なパス名になります。</target>
        </trans-unit>
        <trans-unit id="c70c3d9edbf7497ee38233c6d69f3bfbe98178a4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; option, unexecuted blocks are marked &amp;lsquo;</source>
          <target state="translated">'オプション、未実行ブロックはマークされます'</target>
        </trans-unit>
        <trans-unit id="84959ecc828d32c5d247de93c2e81ce44a84d1a5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are available for the Altera Nios II ELF (bare-metal) target:</source>
          <target state="translated">'オプションは、Altera Nios II ELF（ベアメタル）ターゲットで利用可能です：</target>
        </trans-unit>
        <trans-unit id="25f60fc39154acbeca58976d51b93abd71324e7d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are defined for Adapteva Epiphany:</source>
          <target state="translated">'オプションはAdapteva Epiphanyに対して定義されています。</target>
        </trans-unit>
        <trans-unit id="f4131673f5e53e257f3d37bb08c0021758b69302" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are defined for GNU/Linux targets:</source>
          <target state="translated">'オプションはGNU / Linuxターゲット用に定義されています：</target>
        </trans-unit>
        <trans-unit id="895a9c0a8e3301207275eeb579603adf4accbec8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are defined for V850 implementations:</source>
          <target state="translated">'オプションはV850実装用に定義されています：</target>
        </trans-unit>
        <trans-unit id="0e50163984f62ea21dd47fb0dce1894267e649ce" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are defined for picoChip implementations:</source>
          <target state="translated">'オプションはpicoChip実装用に定義されています：</target>
        </trans-unit>
        <trans-unit id="a41fcde7fb87466f9d6dd7c91503eb792626d90a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are defined for the ARM port:</source>
          <target state="translated">'オプションはARMポートに定義されています。</target>
        </trans-unit>
        <trans-unit id="b3d4773d8eb2dfec63af03564edcabe05596052b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are defined for the DEC Alpha implementations:</source>
          <target state="translated">'オプションは、DEC Alpha実装に対して定義されています。</target>
        </trans-unit>
        <trans-unit id="c85cc1d9880d2ef4c7b593b474d6f28071b029a9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are defined for the H8/300 implementations:</source>
          <target state="translated">'オプションは、H8 / 300実装用に定義されています。</target>
        </trans-unit>
        <trans-unit id="c93d9b5c832f79e5726683d9bb45cdbafb916001" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are defined for the HPPA family of computers:</source>
          <target state="translated">'オプションは、HPPAファミリーのコンピューターに対して定義されています。</target>
        </trans-unit>
        <trans-unit id="b718f8a7d87ff820f0263d828321874d43ae2006" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are defined for the IBM RS/6000 and PowerPC:</source>
          <target state="translated">'オプションは、IBM RS / 6000およびPowerPCに対して定義されています。</target>
        </trans-unit>
        <trans-unit id="4e01bd5e78f78a66206ba65662be4b9facd752f2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are defined for the SH implementations:</source>
          <target state="translated">'オプションは、SH実装に対して定義されます。</target>
        </trans-unit>
        <trans-unit id="aef7b4ba068d9bd85fd007881851e87de43ac5ac" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are defined for the VAX:</source>
          <target state="translated">'VAXのオプションが定義されています。</target>
        </trans-unit>
        <trans-unit id="bb3f55b4f492fc38b018a255739d0f8ccebcc188" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are defined for the VMS implementations:</source>
          <target state="translated">'オプションは、VMS実装に対して定義されます。</target>
        </trans-unit>
        <trans-unit id="1f61d5601ccdee4a318326d23c8b117c2b981a02" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are defined for the x86 family of computers.</source>
          <target state="translated">'オプションは、コンピューターのx86ファミリに対して定義されています。</target>
        </trans-unit>
        <trans-unit id="8b3b7a56e086708c8f8801f1feb1eaf189462c12" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are given. Refer to those options for details.</source>
          <target state="translated">'オプションが与えられます。詳細については、これらのオプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="18bc3e797631b6b4e52d7819c14670fbeb0261f4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are supported in addition to the above on SPARC-V9 processors in 64-bit environments:</source>
          <target state="translated">'64ビット環境のSPARC-V9プロセッサでは、上記に加えてオプションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="1dd8fb6f6f3cba693b540f56c61f2a911b5efab8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are supported on Solaris 2:</source>
          <target state="translated">'オプションはSolaris 2でサポートされています：</target>
        </trans-unit>
        <trans-unit id="da0d7b832833a78f17234974854e636c134312cb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are supported on the SPARC:</source>
          <target state="translated">'オプションはSPARCでサポートされています。</target>
        </trans-unit>
        <trans-unit id="c6171d38d4f8a0651015d34a712ad4a2fda646ca" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are supported on the SPU:</source>
          <target state="translated">'オプションはSPUでサポートされています。</target>
        </trans-unit>
        <trans-unit id="fa7bd0c7c118500ee6d2c046e55dc4160602a5bb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are supported on the TILE-Gx:</source>
          <target state="translated">'オプションはTILE-Gxでサポートされています。</target>
        </trans-unit>
        <trans-unit id="3e45126d173c9f83af0c8a4d42e612d7cbdfdcc5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options are supported on the TILEPro:</source>
          <target state="translated">'オプションはTILEProでサポートされています：</target>
        </trans-unit>
        <trans-unit id="e2d4212fc8e500ed936c66f91d94bb442c281361" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options defined for M680x0 and ColdFire processors. The default settings depend on which architecture was selected when the compiler was configured; the defaults for the most common choices are given below.</source>
          <target state="translated">'M680x0およびColdFireプロセッサ用に定義されたオプション。デフォルト設定は、コンパイラーの構成時に選択されたアーキテクチャーによって異なります。最も一般的な選択肢のデフォルトを以下に示します。</target>
        </trans-unit>
        <trans-unit id="12ed028d54d90074036536de35874efd099113cc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options defined for the Intel IA-64 architecture.</source>
          <target state="translated">'Intel IA-64アーキテクチャー用に定義されたオプション。</target>
        </trans-unit>
        <trans-unit id="b9361b6e6a0248c72de91480eff99a4173461130" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options defined for the Motorola M*Core processors.</source>
          <target state="translated">'Motorola M * Coreプロセッサー用に定義されたオプション。</target>
        </trans-unit>
        <trans-unit id="f9d7728363a1c57b4f3fe364b1f6ae217cf26e85" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options defined for the S/390 and zSeries architecture.</source>
          <target state="translated">'S / 390およびzSeriesアーキテクチャ用に定義されたオプション。</target>
        </trans-unit>
        <trans-unit id="88146812c5c99870bce47654591da4916f1e6098" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options) arrange (eliminate arrangements) for the stack frame, individual data and constants to be aligned for the maximum single data access size for the chosen CPU model. The default is to arrange for 32-bit alignment. ABI details such as structure layout are not affected by these options.</source>
          <target state="translated">'オプション）選択したCPUモデルの最大の単一データアクセスサイズに合わせて、スタックフレーム、個々のデータ、および定数を整列（配置を削除）します。デフォルトでは、32ビットアラインメントを調整します。構造レイアウトなどのABIの詳細は、これらのオプションの影響を受けません。</target>
        </trans-unit>
        <trans-unit id="209637ec6e6c0e100a8945dd77c54299e981870e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; options.</source>
          <target state="translated">'オプション。</target>
        </trans-unit>
        <trans-unit id="c051371f8937469bcb7c2e99a74ceea414f863fe" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or &amp;lsquo;</source>
          <target state="translated">「または」</target>
        </trans-unit>
        <trans-unit id="48c689e2cc2e0209a8b3a065951640655d746c00" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or &lt;code&gt;$SYSROOT&lt;/code&gt; is replaced by the sysroot prefix; see</source>
          <target state="translated">'または &lt;code&gt;$SYSROOT&lt;/code&gt; はsysrootプレフィックスに置き換えられます。見る</target>
        </trans-unit>
        <trans-unit id="f8481e5d860c5d8e5ecdd2c50ff1cbdcb024c8a5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or &lt;code&gt;$SYSROOT&lt;/code&gt;, then the &amp;lsquo;</source>
          <target state="translated">'または &lt;code&gt;$SYSROOT&lt;/code&gt; 、次に'</target>
        </trans-unit>
        <trans-unit id="043be17ae0f7c3d7a9c4cfb6ac1b0185fec22c5b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or &lt;var&gt;native&lt;/var&gt;.</source>
          <target state="translated">'または &lt;var&gt;native&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="cadc57fbc541ed8d0539abc5c5699327ee54af17" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or adding it.</source>
          <target state="translated">'またはそれを追加します。</target>
        </trans-unit>
        <trans-unit id="bf736093218c75ec4e7cd3f976f459490e75a82e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or declared in system or compiler headers.</source>
          <target state="translated">'またはシステムまたはコンパイラのヘッダーで宣言されています。</target>
        </trans-unit>
        <trans-unit id="86487df2bc959d5aea33992acd350f051b6c32c0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or higher. If hardware floating point instructions are being generated then the C preprocessor symbol &lt;code&gt;__FPU_OK__&lt;/code&gt; is defined, otherwise the symbol &lt;code&gt;__NO_FPU__&lt;/code&gt; is defined.</source>
          <target state="translated">' 以上。ハードウェア浮動小数点命令が生成されている場合は、Cプリプロセッサシンボル &lt;code&gt;__FPU_OK__&lt;/code&gt; が定義されます。それ以外の場合は、シンボル &lt;code&gt;__NO_FPU__&lt;/code&gt; が定義されます。</target>
        </trans-unit>
        <trans-unit id="b5132656d002ad4ce3177e193b5c68ce50e74230" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or larger.</source>
          <target state="translated">'以上。</target>
        </trans-unit>
        <trans-unit id="5fa602c893b7540ffbd1e91c955d1716a1576b57" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or later. This is the default. This option defines the preprocessor macro &lt;code&gt;__LIW__&lt;/code&gt;.</source>
          <target state="translated">'以降。これがデフォルトです。このオプションは、プリプロセッサマクロ &lt;code&gt;__LIW__&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="c4dd904c5fb4fcbd7cc13e0bb383a3e3c6aa4701" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or later. This is the default. This option defines the preprocessor macro &lt;code&gt;__SETLB__&lt;/code&gt;.</source>
          <target state="translated">'以降。これがデフォルトです。このオプションは、プリプロセッサマクロ &lt;code&gt;__SETLB__&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="52aec7fe31e35c40ade8a8360102a82b38ee165a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or more or by</source>
          <target state="translated">'以上または</target>
        </trans-unit>
        <trans-unit id="83573bfb082de6c4b0dcb6f0417cd6cee355e722" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or similar construct can use a backslash to ignore the special meaning of the character following it, thus allowing literal matching of a character that is otherwise specially treated. For example, &amp;lsquo;</source>
          <target state="translated">'または同様の構成では、バックスラッシュを使用して、それに続く文字の特別な意味を無視することができるため、特別に扱われる文字のリテラルマッチングが可能になります。例えば、 '</target>
        </trans-unit>
        <trans-unit id="beeb97ada8e276e8fa205b82d44514b8ccfab523" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or similar construct may contain other nested &amp;lsquo;</source>
          <target state="translated">'または同様の構成に他のネストされた'</target>
        </trans-unit>
        <trans-unit id="61372132dd71c601ee73c08a55327505acf9f3b9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or the special string &amp;lsquo;</source>
          <target state="translated">'または特別な文字列'</target>
        </trans-unit>
        <trans-unit id="bda6b24116bb0d9742b26847ffae3657cecd50ae" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; or with &amp;lsquo;</source>
          <target state="translated">'または'</target>
        </trans-unit>
        <trans-unit id="cc9f2412c49de044b897ed121f0f9ca8709a12cd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; otherwise. &amp;lsquo;</source>
          <target state="translated">' さもないと。」</target>
        </trans-unit>
        <trans-unit id="ec149ba66b939f8546f4e2bdaebf6bea6a1c7fc5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; otherwise. The GCC driver automatically selects &amp;lsquo;</source>
          <target state="translated">' さもないと。GCCドライバーは自動的に選択します '</target>
        </trans-unit>
        <trans-unit id="4aad7874be07f1faef249c25cdae44bd2f76410a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; pair. All lines after this directive and up to the next directive or blank line are considered to make up the spec string for the indicated suffix. When the compiler encounters an input file with the named suffix, it processes the spec string in order to work out how to compile that file. For example:</source>
          <target state="translated">'ペア。このディレクティブの後から次のディレクティブまたは空白行までのすべての行が、指定されたサフィックスの仕様文字列を構成すると見なされます。コンパイラーは、指定されたサフィックスを持つ入力ファイルを検出すると、spec文字列を処理して、そのファイルをコンパイルする方法を調べます。例えば：</target>
        </trans-unit>
        <trans-unit id="d5cd41e49b746cd8aacc2f300c1e7c9ce59a1f43" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; pair. The set of call-saved registers also remains the same in that the even-numbered double-precision registers are saved.</source>
          <target state="translated">'ペア。コール保存レジスタのセットも同じで、偶数の倍精度レジスタが保存されます。</target>
        </trans-unit>
        <trans-unit id="4d2f7d31ef55c034e21e0b00c9d0c1b28e605f5a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; parameter has to be specified as well.</source>
          <target state="translated">'パラメータも指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="c445adefb3dc0e5666af740dcde3fc1c3feb5a32" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; parameter inserted as the first parameter indicating the size of the object being pointed to. All objects must be the same size.</source>
          <target state="translated">'指すオブジェクトのサイズを示す最初のパラメーターとして挿入されたパラメーター。すべてのオブジェクトは同じサイズでなければなりません。</target>
        </trans-unit>
        <trans-unit id="4d4d62c248b664f4f828763b22a0a69cb6809c0b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; partitioning is intended for internal testing only. The value &amp;lsquo;</source>
          <target state="translated">'パーティショニングは内部テストのみを目的としています。値 '</target>
        </trans-unit>
        <trans-unit id="d4d7aab219721f35503df410bd55382075bf2c9e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; performs complex conjugation when used on a value with a complex type. This is a GNU extension; for values of floating type, you should use the ISO C99 functions &lt;code&gt;conjf&lt;/code&gt;, &lt;code&gt;conj&lt;/code&gt; and &lt;code&gt;conjl&lt;/code&gt;, declared in &lt;code&gt;&amp;lt;complex.h&amp;gt;&lt;/code&gt; and also provided as built-in functions by GCC.</source>
          <target state="translated">'複合型の値で使用すると、複合共役を実行します。これはGNU拡張です。浮動型の値の場合、ISO C99関数 &lt;code&gt;conjf&lt;/code&gt; 、 &lt;code&gt;conj&lt;/code&gt; 、および &lt;code&gt;conjl&lt;/code&gt; を使用する必要があります。これらは、 &lt;code&gt;&amp;lt;complex.h&amp;gt;&lt;/code&gt; で宣言され、GCCによって組み込み関数として提供されます。</target>
        </trans-unit>
        <trans-unit id="3fdb823002dc6dfd9b967615f77b498f39af6f0c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; pointer, and if the function pointed to is virtual, where to find the vtable, and where in the vtable to look for the member function. If you are using PMFs in an inner loop, you should really reconsider that decision. If that is not an option, you can extract the pointer to the function that would be called for a given object/PMF pair and call it directly inside the inner loop, to save a bit of time.</source>
          <target state="translated">'ポインター、および関数が指しているものが仮想の場合、vtableを見つける場所、およびvtableのどこでメンバー関数を探すか。内部ループでPMFを使用している場合は、その決定を再考する必要があります。これがオプションではない場合、特定のオブジェクト/ PMFペアに対して呼び出される関数へのポインターを抽出し、内部ループ内で直接呼び出すことで、時間を節約できます。</target>
        </trans-unit>
        <trans-unit id="4563c051a6a6c66cf5ff3c3a90291d825d095381" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; pragmas.</source>
          <target state="translated">'プラグマ。</target>
        </trans-unit>
        <trans-unit id="d9a7dcbf0dc6de330b210ef05aa967c5a5670ddc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; pre-processor directives, and the &amp;lsquo;</source>
          <target state="translated">'プリプロセッサディレクティブ、および'</target>
        </trans-unit>
        <trans-unit id="5641c689cca07cacc9259cf5cbc868ef50ea405f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; preceding and following the name. This allows you to use them in header files without being concerned about a possible macro of the same name. For example, you may use the attribute name &lt;code&gt;__noreturn__&lt;/code&gt; instead of &lt;code&gt;noreturn&lt;/code&gt;.</source>
          <target state="translated">'名前の前後に。これにより、同じ名前のマクロの可能性を気にすることなく、ヘッダーファイルでそれらを使用できます。たとえば、 &lt;code&gt;noreturn&lt;/code&gt; ではなく属性名 &lt;code&gt;__noreturn__&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="35189e0b3ea3ee398947b0a83eca5595687c8f18" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; prefix and also by being overloaded so that they work on multiple types.</source>
          <target state="translated">'接頭辞と、オーバーロードされて複数の型で機能するようにする。</target>
        </trans-unit>
        <trans-unit id="96ab426a6b5a3c861e723eb2367dd608173e34fd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; prefix.</source>
          <target state="translated">'接頭辞。</target>
        </trans-unit>
        <trans-unit id="3f227e9083fdcdf835eb89a3b7e5aea560e8c746" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; prefix. Arguments to options that specify a size threshold of some sort may be arbitrarily large decimal or hexadecimal integers followed by a byte size suffix designating a multiple of bytes such as &lt;code&gt;kB&lt;/code&gt; and &lt;code&gt;KiB&lt;/code&gt; for kilobyte and kibibyte, respectively, &lt;code&gt;MB&lt;/code&gt; and &lt;code&gt;MiB&lt;/code&gt; for megabyte and mebibyte, &lt;code&gt;GB&lt;/code&gt; and &lt;code&gt;GiB&lt;/code&gt; for gigabyte and gigibyte, and so on. Such arguments are designated by &lt;var&gt;byte-size&lt;/var&gt; in the following text. Refer to the NIST, IEC, and other relevant national and international standards for the full listing and explanation of the binary and decimal byte size prefixes.</source>
          <target state="translated">'接頭辞。ある種のサイズのしきい値を指定するオプションの引数は、任意の大きな10進数または16進数の整数の後に、キロバイトとキビバイトの場合はそれぞれ &lt;code&gt;kB&lt;/code&gt; と &lt;code&gt;KiB&lt;/code&gt; 、メガバイトとメビバイトの場合は &lt;code&gt;MB&lt;/code&gt; と &lt;code&gt;MiB&lt;/code&gt; などの複数のバイトを指定するバイトサイズサフィックスが続きます。 &lt;code&gt;GB&lt;/code&gt; および &lt;code&gt;GiB&lt;/code&gt; （ギガバイトおよびギギバイトなど）。このような引数は、以下のテキストでは &lt;var&gt;byte-size&lt;/var&gt; で指定されています。 2進数と10進数のバイトサイズプレフィックスの完全なリストと説明については、NIST、IEC、およびその他の関連する国内および国際規格を参照してください。</target>
        </trans-unit>
        <trans-unit id="f50153a267c6e375eec867e2a3730edf61454105" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; prefixes. The number parsed is placed in the significand such that the least significant bit of the number is at the least significant bit of the significand. The number is truncated to fit the significand field provided. The significand is forced to be a quiet NaN.</source>
          <target state="translated">'接頭辞。解析された数値は、数値の最下位ビットが仮数の最下位ビットになるように仮数に配置されます。数値は、指定された仮数フィールドに合わせて切り捨てられます。仮数は静かなNaNを強制されます。</target>
        </trans-unit>
        <trans-unit id="355872b2b1a3c3bd3ba8d658ef382e09e32073a3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; preprocessor constant is defined.</source>
          <target state="translated">'プリプロセッサ定数が定義されています。</target>
        </trans-unit>
        <trans-unit id="d73ba346be03f7ededf629759b3e3a744322a7e4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; present for backward compatibility.</source>
          <target state="translated">'下位互換性のために存在しています。</target>
        </trans-unit>
        <trans-unit id="6fcfb1d20306c0f703ac5ec60dac33f6fdbd9821" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; pseudo target defaults to VFPv3 with 16 double-precision registers. It supports the following extension options: &amp;lsquo;</source>
          <target state="translated">'疑似ターゲットのデフォルトは、16倍精度レジスタを持つVFPv3です。次の拡張オプションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="50fd8239eabc9a97d95bc4f4d278515e31bcaee2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; pseudo-op). Default visibility is supported everywhere. Hidden visibility is supported on Darwin targets.</source>
          <target state="translated">'疑似操作）。デフォルトの可視性はどこでもサポートされています。非表示の可視性は、ダーウィンターゲットでサポートされています。</target>
        </trans-unit>
        <trans-unit id="defa7344a1649b93a1b43c1af97fa03cea56040a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; rather than &amp;lsquo;</source>
          <target state="translated">' のではなく '</target>
        </trans-unit>
        <trans-unit id="3486fdf02e76707d71811fb7d79c2ba2a04a89c9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; rather than the usual &amp;lsquo;</source>
          <target state="translated">「いつもよりも」</target>
        </trans-unit>
        <trans-unit id="8582e11d6dddda4b9f538d0f60eda9549f5f57ed" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; refer to processors with FPUs clocked a ratio of 3:2 with respect to the core. For compatibility reasons, &amp;lsquo;</source>
          <target state="translated">'FPUがコアに対して3：2の比率でクロックされるプロセッサを指します。互換性の理由から、 '</target>
        </trans-unit>
        <trans-unit id="dabe2122a4b1653e8a50e28085b2b8047b7632bb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; refer to processors with FPUs clocked at half the rate of the core, names of the form &amp;lsquo;</source>
          <target state="translated">'FPUがコアの半分のレートでクロックされるプロセッサを指し、フォームの名前'</target>
        </trans-unit>
        <trans-unit id="abe7c7597ca8ffa158c739f3718b9881c80ffc3f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; refer to processors with FPUs clocked at the same rate as the core, and names of the form &amp;lsquo;</source>
          <target state="translated">'コアと同じレートでクロックされるFPUを備えたプロセッサを指し、フォームの名前'</target>
        </trans-unit>
        <trans-unit id="600d3de7356da0b80ca6cd07490e0619b1e142c7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; refer to the formats accepted by the</source>
          <target state="translated">'が受け入れる形式を参照</target>
        </trans-unit>
        <trans-unit id="e92b96d2b6c894c413be8d124af5dac7f82f1609" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; refers to a literal capital C.</source>
          <target state="translated">'は、文字どおりの大文字Cを指します。</target>
        </trans-unit>
        <trans-unit id="2f55ba0d5f66754cf295ecfc832192516dfb2ed7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; refers to a literal capital M.</source>
          <target state="translated">'は、大文字のMを表します。</target>
        </trans-unit>
        <trans-unit id="b5d17117b0897deb757c55ae8924e7ef2b5b9f25" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; register</source>
          <target state="translated">' 登録</target>
        </trans-unit>
        <trans-unit id="56f95697e72cd24b02f414593adabf5fb04e9dd8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; register (condition register)</source>
          <target state="translated">'レジスター（条件レジスター）</target>
        </trans-unit>
        <trans-unit id="27ddc79ec0fe4e9db1fc81b7565ee71dfb87254d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; register (condition register) number 0</source>
          <target state="translated">'レジスタ（条件レジスタ）番号0</target>
        </trans-unit>
        <trans-unit id="dbe7571283716a455bbbea92bd21b227f87e5595" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; register names for the stacked registers. This may make assembler output more readable.</source>
          <target state="translated">'スタックレジスタのレジスタ名。これにより、アセンブラ出力が読みやすくなる場合があります。</target>
        </trans-unit>
        <trans-unit id="a24f843d58a90ab3ed3bce4238729c6f6a2d9b15" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; register to the specified value &lt;var&gt;ptr&lt;/var&gt;. This is usually used by system code that manages threads and execution contexts. The compiler normally does not generate code that modifies the contents of &amp;lsquo;</source>
          <target state="translated">'指定された値 &lt;var&gt;ptr&lt;/var&gt; に登録します。これは通常、スレッドと実行コンテキストを管理するシステムコードによって使用されます。コンパイラは通常、 'の内容を変更するコードを生成しません</target>
        </trans-unit>
        <trans-unit id="15b6a8cc1ce090db804f62155ebcfe9fdfd32f43" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; register to the specified value &lt;var&gt;val&lt;/var&gt;, while preserving the current values of the FR, SZ and PR bits.</source>
          <target state="translated">' FR、SZ、PRビットの現在の値を保持しながら、指定された値 &lt;var&gt;val&lt;/var&gt; に登録します。</target>
        </trans-unit>
        <trans-unit id="32b88b9c6f4ce4c1ae7fce0458bc87eef665ddf1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; register.</source>
          <target state="translated">' 登録。</target>
        </trans-unit>
        <trans-unit id="794978d8b41ed92d143d12ac181aca522b22af26" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; register. Memory loads and stores that use the thread pointer as a base address are turned into &amp;lsquo;</source>
          <target state="translated">' 登録。スレッドポインターをベースアドレスとして使用するメモリのロードとストアは、</target>
        </trans-unit>
        <trans-unit id="d17477141c67c1f66f16dcaf910190f1c3cc4e3f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; respectively.</source>
          <target state="translated">'それぞれ。</target>
        </trans-unit>
        <trans-unit id="a9b7acec614e26d84f44c29e6daaf9dc7fd3103e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; searches library &amp;lsquo;</source>
          <target state="translated">「ライブラリを検索」</target>
        </trans-unit>
        <trans-unit id="cef525c893fe2c7450842b9e7aea51bac5e3d29d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; selects the most compatible architecture for the selected ABI (that is, &amp;lsquo;</source>
          <target state="translated">'選択したABIに最も互換性のあるアーキテクチャを選択します（つまり、'</target>
        </trans-unit>
        <trans-unit id="481f5997a73ce97b055885eccc211f2b92c9474d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; selects vector-length agnostic output. At present &amp;lsquo;</source>
          <target state="translated">'ベクトル長に依存しない出力を選択します。現在のところ '</target>
        </trans-unit>
        <trans-unit id="b23ede7a85c283a7ae7da9db47d3be845ba3234c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; separated fields along with program source code. The format is</source>
          <target state="translated">'フィールドとプログラムのソースコードを区切ります。フォーマットは</target>
        </trans-unit>
        <trans-unit id="74c9d5f175b9ec00e30e09a9e05f50d72f5e873f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; separated option keywords to select the dump details and optimizations.</source>
          <target state="translated">'ダンプの詳細と最適化を選択するためのオプションキーワードを区切ります。</target>
        </trans-unit>
        <trans-unit id="4e5425a69eadc821abc7b54b5f2baa8ba205522d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; separated options which control the details of the dump. Not all options are applicable to all dumps; those that are not meaningful are ignored. The following options are available</source>
          <target state="translated">'ダンプの詳細を制御する個別のオプション。すべてのオプションがすべてのダンプに適用できるわけではありません。意味のないものは無視されます。以下のオプションが利用可能です</target>
        </trans-unit>
        <trans-unit id="21bc80d788388475b1818d47e86cbacdf33c7152" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; sequences.</source>
          <target state="translated">'シーケンス。</target>
        </trans-unit>
        <trans-unit id="74e190e05401bca34927b5278656e6d6e921333c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; series does not have a hardware floating-point unit and so</source>
          <target state="translated">'シリーズにはハードウェア浮動小数点ユニットがないため、</target>
        </trans-unit>
        <trans-unit id="10f09dc09551560e9a45030ebd6e30695d66a5fd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; series hardware and the specific &amp;lsquo;</source>
          <target state="translated">「シリーズのハードウェアと特定の」</target>
        </trans-unit>
        <trans-unit id="fec78580cc0226cf2394840560a7d651e6983bdb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; sets it to its standard level. &amp;lsquo;</source>
          <target state="translated">'標準レベルに設定します。」</target>
        </trans-unit>
        <trans-unit id="c07d079738bce040037eb1f1fd2ea5c8fff94a71" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; should be passed to the program &amp;lsquo;</source>
          <target state="translated">'プログラムに渡す必要があります'</target>
        </trans-unit>
        <trans-unit id="5e6948a2dfdcbe5c825830e9f31be0f8b5635e9d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; should be relied on for producing code that is portable across different hardware SVE vector lengths.</source>
          <target state="translated">'は、さまざまなハードウェアSVEベクトル長にわたって移植可能なコードを生成するために依存する必要があります。</target>
        </trans-unit>
        <trans-unit id="ee57cff3cefff28a9da8ab2e18f679a918744aec" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; sign, the type of the members and by &amp;lsquo;</source>
          <target state="translated">'記号、メンバーのタイプおよび'</target>
        </trans-unit>
        <trans-unit id="6656ef212b86feb4280e0b002e306faab678402b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; sign, the type of the members followed by &amp;lsquo;</source>
          <target state="translated">'記号、'が後に続くメンバーのタイプ</target>
        </trans-unit>
        <trans-unit id="77b4ad927c69486a178202aa19e5e3eef2cea0ca" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; since the &amp;lsquo;</source>
          <target state="translated">'以降</target>
        </trans-unit>
        <trans-unit id="6eb85024f3ec55e7b20f046424d94f4a06238808" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; spec string.</source>
          <target state="translated">'スペック文字列。</target>
        </trans-unit>
        <trans-unit id="081e2943adf837892353eab8656e6ca9e7c091b9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; specifies that exactly one partition should be used while the value &amp;lsquo;</source>
          <target state="translated">'は、1つのパーティションを使用する必要があることを指定します。</target>
        </trans-unit>
        <trans-unit id="7b6c33ed91a7375352c2955837851068b44100e9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; specify that GCC should tune for a big.LITTLE system.</source>
          <target state="translated">'GCCがbig.LITTLEシステム用に調整する必要があることを指定します。</target>
        </trans-unit>
        <trans-unit id="1d64ff9d9b4091a4c3b0888ad9aa14c25dc75e79" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; stack it is. Precompiled header files are also printed, even if they are found to be invalid; an invalid precompiled header file is printed with &amp;lsquo;</source>
          <target state="translated">'スタックです。プリコンパイル済みヘッダーファイルも、無効であることが判明した場合でも出力されます。無効なプリコンパイル済みヘッダーファイルが '</target>
        </trans-unit>
        <trans-unit id="3f77b91c30a3d55044b432a8c79262b81f7739ab" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; stands for &amp;lsquo;</source>
          <target state="translated">' を意味する '</target>
        </trans-unit>
        <trans-unit id="9f4f579e9779d89eea635da5e3420f9b0583a365" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; stands for the character</source>
          <target state="translated">'は文字を表します</target>
        </trans-unit>
        <trans-unit id="35c9d4dd0e4446cfda2d97ec7fdbd6cdd2482a57" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; style name or the corresponding chip number. GCC supports scheduling parameters for the EV4, EV5 and EV6 family of processors and chooses the default values for the instruction set from the processor you specify. If you do not specify a processor type, GCC defaults to the processor on which the compiler was built.</source>
          <target state="translated">'スタイル名または対応するチップ番号。GCCは、EV4、EV5、およびEV6ファミリーのプロセッサーのスケジューリングパラメーターをサポートし、指定したプロセッサーから命令セットのデフォルト値を選択します。プロセッサー・タイプを指定しない場合、GCCはデフォルトでコンパイラーがビルドされたプロセッサーを使用します。</target>
        </trans-unit>
        <trans-unit id="a4ad544dab08dbd46c0ae98eb0c3361e463712c3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; substitutes &lt;code&gt;X&lt;/code&gt; if the</source>
          <target state="translated">'が &lt;code&gt;X&lt;/code&gt; の場合、</target>
        </trans-unit>
        <trans-unit id="9990d2165de1099320d97e468af32ce23f811dac" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; substitutes a single dash and &amp;lsquo;</source>
          <target state="translated">'は単一のダッシュと'を置き換えます</target>
        </trans-unit>
        <trans-unit id="321b67c29454d786acc2b137adecd33a765095df" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; substitutes nothing at all. These are the two most common ways to instruct a program that it should read from standard input or write to standard output. If you need something more elaborate you can use an &amp;lsquo;</source>
          <target state="translated">'何も置換しません。これらは、プログラムに標準入力から読み取るか、標準出力に書き込むように指示する最も一般的な2つの方法です。より複雑なものが必要な場合は、「</target>
        </trans-unit>
        <trans-unit id="b4019cbfa1ecf968c67a059f9d69da825719629e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; substitutes.</source>
          <target state="translated">'代用。</target>
        </trans-unit>
        <trans-unit id="2c28b4998a4a5763c08ba06a5a430c91622a6962" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; substitution. (See below.)</source>
          <target state="translated">'置換。（下記参照。）</target>
        </trans-unit>
        <trans-unit id="4484966b786972befcd67913fd7e8210357446c9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; subtype, instead of one controlled by the</source>
          <target state="translated">'サブタイプ。</target>
        </trans-unit>
        <trans-unit id="16138baa8e830027f4d37afba05054893e7eb9a4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; suffix on integer constants.) Note, these suffixes appear in macros defined in the system headers of most modern systems, e.g. the &amp;lsquo;</source>
          <target state="translated">'整数定数のサフィックス。）これらのサフィックスは、最新のほとんどのシステムのシステムヘッダーで定義されているマクロに表示されます。</target>
        </trans-unit>
        <trans-unit id="b1ee32f9ff27eda9c15d4b6f0b5915be69d929b2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; suffix still has the GNU meaning.</source>
          <target state="translated">'サフィックスはまだGNUの意味を持っています。</target>
        </trans-unit>
        <trans-unit id="b0aa90fa86d89bb8805ba9eee92f744e653e7869" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; suffix) when assembling them.</source>
          <target state="translated">'接尾辞）それらを組み立てるとき。</target>
        </trans-unit>
        <trans-unit id="97dcee030c8836a2865e8ecc2f203cfd153ad2e4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; suffix, so C++14 code that includes the &amp;lsquo;</source>
          <target state="translated">'サフィックスなので、'を含むC ++ 14コード</target>
        </trans-unit>
        <trans-unit id="139aaebaa57ad8962a5b2ee4325f224e112ed95f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; suffix. You can specify &amp;lsquo;</source>
          <target state="translated">'サフィックス。指定できます '</target>
        </trans-unit>
        <trans-unit id="6b06d5de8e85da80af8c020ff2227f4057f93e6c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; switches are supported in addition to the above on x86-64 processors in 64-bit environments.</source>
          <target state="translated">'スイッチは、64ビット環境のx86-64プロセッサーで上記に加えてサポートされます。</target>
        </trans-unit>
        <trans-unit id="1a21b8f9c6e6156c00d053834998fe6788d743b5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; syntax for attributes, use of decimal floating-point types, and so on. This option is independent of the standards mode. Warnings are disabled in the expression that follows &lt;code&gt;__extension__&lt;/code&gt;.</source>
          <target state="translated">'属性の構文、10進浮動小数点型の使用など。このオプションは、標準モードとは無関係です。 &lt;code&gt;__extension__&lt;/code&gt; に続く式では、警告は無効になっています。</target>
        </trans-unit>
        <trans-unit id="8401ca4577a9a8d882babc3aea71e1a25aaa9f59" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; takes highest priority over both &amp;lsquo;</source>
          <target state="translated">'はどちらよりも優先されます'</target>
        </trans-unit>
        <trans-unit id="1f54e26bc87a0a2fab77340b077d9aa7e37e715b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; takes priority over &amp;lsquo;</source>
          <target state="translated">「よりも優先されます」</target>
        </trans-unit>
        <trans-unit id="cd16d9a7076736808720d07350c776f80630d493" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; target, this option implies</source>
          <target state="translated">'ターゲット、このオプションは</target>
        </trans-unit>
        <trans-unit id="7e92a2604d0f7fdca7e7d5ac91e19423966fc2ec" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; target.</source>
          <target state="translated">' 目標。</target>
        </trans-unit>
        <trans-unit id="cd6f1baebf517b27b1ba1e0f0c7818c2f92d4d56" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; targets default to</source>
          <target state="translated">'ターゲットのデフォルトは</target>
        </trans-unit>
        <trans-unit id="5b4ffd0a68cd7722edb8438d55a609340643f57f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; targets, the default is</source>
          <target state="translated">'ターゲット、デフォルトは</target>
        </trans-unit>
        <trans-unit id="056147ad41bb52b66af9ed7beb627c0f9b4a5179" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; targets.</source>
          <target state="translated">'ターゲット。</target>
        </trans-unit>
        <trans-unit id="38cba9e03a9a92a6fd1bda85caf604b0dd55e559" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; the code generation is configured to produce</source>
          <target state="translated">'コード生成は生成するように構成されています</target>
        </trans-unit>
        <trans-unit id="9c9ed84575adb586ca1346600f1a87f2b54c62a5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; the code generation is configured to produce shared library. In this case</source>
          <target state="translated">'コード生成は、共有ライブラリを生成するように構成されています。この場合</target>
        </trans-unit>
        <trans-unit id="3ac92faa0283305d0be528c0c722ea1eddd63670" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; the code generation is configured to produce static binary. In this case</source>
          <target state="translated">'コード生成は、静的バイナリを生成するように構成されています。この場合</target>
        </trans-unit>
        <trans-unit id="751dbcee70e5f93858d0abf30ebf091c78065bd6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; the compiler assumes that incremental linking is done. The sections containing intermediate code for link-time optimization are merged, pre-optimized, and output to the resulting object file. In addition, if</source>
          <target state="translated">'コンパイラは、インクリメンタルリンクが行われたと見なします。リンク時の最適化のための中間コードを含むセクションは、マージされ、事前に最適化され、結果のオブジェクトファイルに出力されます。また、</target>
        </trans-unit>
        <trans-unit id="d35eaaffc6295c79621d7febc295f4cc0cbff4c6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; the member template definitions.</source>
          <target state="translated">'メンバーテンプレートの定義。</target>
        </trans-unit>
        <trans-unit id="5175a099f7d6bbd6b329ee3d799989e88a5b1cea" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; there, then the MCU data will be read. As above, this directory will also be registered as an include path, and linker library path.</source>
          <target state="translated">'そこで、MCUデータが読み取られます。上記のように、このディレクトリはインクルードパスおよびリンカーライブラリパスとしても登録されます。</target>
        </trans-unit>
        <trans-unit id="ef6fed6549190b0d965e5cf7e0fced517211eb29" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; through &amp;lsquo;</source>
          <target state="translated">' 使って '</target>
        </trans-unit>
        <trans-unit id="1c96ef5db986721c2692b006a74b2645ab6ec4d7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to &amp;lsquo;</source>
          <target state="translated">「から」</target>
        </trans-unit>
        <trans-unit id="25e045794d45b41e40a15ba6b03ecbcf2cab0b14" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to all global symbols, so the assembly code can be used with the &lt;code&gt;PREFIX&lt;/code&gt; assembly directive.</source>
          <target state="translated">'すべてのグローバルシンボルに &lt;code&gt;PREFIX&lt;/code&gt; されるため、アセンブリコードはPREFIXアセンブリディレクティブで使用できます。</target>
        </trans-unit>
        <trans-unit id="1f5fd08a143b7e4c653b1c16c9d4a22c5e44257f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to an expression, throwing an object, or referring to a type in a catch clause or exception specification.</source>
          <target state="translated">'式への、オブジェクトのスロー、catch句または例外仕様での型の参照。</target>
        </trans-unit>
        <trans-unit id="8ba7bcaeb175b51595a5178d5d588175c55cc008" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to assign no, highest, or second-highest (respectively) priority to dispatch-slot restricted instructions.</source>
          <target state="translated">'ディスパッチスロット制限命令に優先度を割り当てない、最高、または2番目に高い（それぞれ）。</target>
        </trans-unit>
        <trans-unit id="e7d610fcebfd8bd1b6f66db74974496ebfc8cee4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to be 32-bit), and that floating-point values up to 64 bits wide are passed in F registers. Contrast this with &amp;lsquo;</source>
          <target state="translated">'は32ビットです）、最大64ビット幅の浮動小数点値がFレジスタに渡されます。これと比較して '</target>
        </trans-unit>
        <trans-unit id="a9bf81d3dc1a8984b11d4917576184cf1038fef8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to be a weak alias for &amp;lsquo;</source>
          <target state="translated">'は'の弱いエイリアスになります</target>
        </trans-unit>
        <trans-unit id="7f4b68da81b75fb6eeb1e3d153c58913b646be22" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to be overridden by one returning a different pointer type. This extension to the covariant return type rules is now deprecated and will be removed from a future version.</source>
          <target state="translated">'別のポインタ型を返すものによってオーバーライドされます。共変の戻り値の型ルールに対するこの拡張機能は廃止され、将来のバージョンから削除される予定です。</target>
        </trans-unit>
        <trans-unit id="747bcf06703eb0d0d706c568a3d7c0b245716a7f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to be used as a keyword to define vector type variables and arguments. &amp;lsquo;</source>
          <target state="translated">'ベクトル型の変数と引数を定義するキーワードとして使用されます。」</target>
        </trans-unit>
        <trans-unit id="a9bcbfddd43a7864ab14d920c726549a936b1ba3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to create new partition for every symbol where possible. Specifying &amp;lsquo;</source>
          <target state="translated">'可能な場合、すべてのシンボルに対して新しいパーティションを作成します。'の指定</target>
        </trans-unit>
        <trans-unit id="cd03b9ee76c923a101cf9ae36c90388c61a93702" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to distinguish them from error messages.</source>
          <target state="translated">'エラーメッセージと区別します。</target>
        </trans-unit>
        <trans-unit id="1e10686e6c0bbadc7a760bb97c53700373049cef" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to dump to standard output, and &amp;lsquo;</source>
          <target state="translated">'標準出力にダンプし、'</target>
        </trans-unit>
        <trans-unit id="5221e3fc33dc129b4de8fa80d8b7b8406130587f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to filter out those warnings.</source>
          <target state="translated">'これらの警告を除外します。</target>
        </trans-unit>
        <trans-unit id="e207edb06c44e1ffee14b09d2bd576241fa09fbb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to include the header file; &amp;lsquo;</source>
          <target state="translated">'ヘッダーファイルを含めます。」</target>
        </trans-unit>
        <trans-unit id="94c280763e15f6827a82d3da1b06a402bc2dda96" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to invert the option:</source>
          <target state="translated">'オプションを反転するには：</target>
        </trans-unit>
        <trans-unit id="28dcd81706e9335d54173713faabbb0a53ff42ed" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to link his or her application. Applications are not required to use the</source>
          <target state="translated">'アプリケーションをリンクします。アプリケーションは使用する必要はありません</target>
        </trans-unit>
        <trans-unit id="29b9f008a5a0614cea796c50934c1070f0f7fcb0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to mean &amp;ldquo;any integer outside the range -128 to 127&amp;rdquo;, and then specifying &amp;lsquo;</source>
          <target state="translated">'「-128〜127の範囲外の整数」を意味し、次に'</target>
        </trans-unit>
        <trans-unit id="7319c1f5fe9cd726827d4fd8725f43a46c30b5e3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to specify a nested subobject to initialize; the list is taken relative to the subobject corresponding to the closest surrounding brace pair. For example, with the &amp;lsquo;</source>
          <target state="translated">'初期化するネストされたサブオブジェクトを指定します。リストは、最も近い周囲のブレースペアに対応するサブオブジェクトを基準にして取得されます。たとえば、 '</target>
        </trans-unit>
        <trans-unit id="cb981e4b7c234addc580de918e72cb9b746b3955" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to specify a partitioning mirroring the original source files or &amp;lsquo;</source>
          <target state="translated">'元のソースファイルをミラーリングするパーティションを指定するか、'</target>
        </trans-unit>
        <trans-unit id="9c0690b069e16610f3dde8f4da1fa3b45e233474" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to specify partitioning into equally sized chunks (whenever possible) or &amp;lsquo;</source>
          <target state="translated">'可能な限り、同じサイズのチャンクへのパーティション分割を指定するか、'</target>
        </trans-unit>
        <trans-unit id="b96b741c5b8c6ab7fbc59d6b6f9ecbfec23495f3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to the architecture name. Extension options are processed in order and capabilities accumulate. An extension will also enable any necessary base extensions upon which it depends. For example, the &amp;lsquo;</source>
          <target state="translated">'アーキテクチャ名に。拡張オプションは順番に処理され、機能が蓄積されます。拡張機能は、それが依存する必要な基本拡張機能も有効にします。たとえば、「</target>
        </trans-unit>
        <trans-unit id="1e325ed7f61f460b2ad46963e7303d06823e0742" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to the command recipe in the parent Makefile for this to work. This option likely only works if &lt;code&gt;MAKE&lt;/code&gt; is GNU make.</source>
          <target state="translated">'これを機能させるために、親Makefileのコマンドレシピに追加します。このオプションは、 &lt;code&gt;MAKE&lt;/code&gt; がGNU makeである場合にのみ機能する可能性があります。</target>
        </trans-unit>
        <trans-unit id="158e4f7e3ed6793efe8fa127d0c44e96899f8548" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to the command recipe in the parent Makefile for this to work. This option likely only works if &lt;code&gt;MAKE&lt;/code&gt; is GNU make. Even without the option value, GCC tries to automatically detect a running GNU make&amp;rsquo;s job server.</source>
          <target state="translated">'これを機能させるために、親Makefileのコマンドレシピに'。このオプションは、 &lt;code&gt;MAKE&lt;/code&gt; がGNUmakeである場合にのみ機能する可能性があります。オプション値がない場合でも、GCCは実行中のGNUmakeのジョブサーバーを自動的に検出しようとします。</target>
        </trans-unit>
        <trans-unit id="3810ce854461563fabafbd617a9f538a98684968" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to the full path to the directory containing devices.csv, and GCC will search this directory for devices.csv. If devices.csv is found, this directory will also be registered as an include path, and linker library path. Header files and linker scripts in this directory can therefore be used without manually specifying &lt;code&gt;-I&lt;/code&gt; and &lt;code&gt;-L&lt;/code&gt; on the command line.</source>
          <target state="translated">'devices.csvを含むディレクトリへのフルパスに移動すると、GCCはこのディレクトリでdevices.csvを検索します。devices.csvが見つかった場合、このディレクトリはインクルードパスおよびリンカーライブラリパスとしても登録されます。したがって、このディレクトリ内のヘッダーファイルとリンカスクリプトは、コマンドラインで &lt;code&gt;-I&lt;/code&gt; と &lt;code&gt;-L&lt;/code&gt; を手動で指定しなくても使用できます。</target>
        </trans-unit>
        <trans-unit id="876029c6ecf433b4603b8318f33435182f18ba71" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to the integer.</source>
          <target state="translated">'整数に。</target>
        </trans-unit>
        <trans-unit id="94b553527276f98960779fb5b0a35d9e9c86b311" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to the integer. To make an integer constant of type &lt;code&gt;unsigned long
long int&lt;/code&gt;, add the suffix &amp;lsquo;</source>
          <target state="translated">'整数に。タイプ &lt;code&gt;unsigned long long int&lt;/code&gt; 整数定数を作成するには、接尾辞 'を追加します</target>
        </trans-unit>
        <trans-unit id="2e70c71b754410dd31984a69e3cab392094feb24" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to the prefix.</source>
          <target state="translated">'接頭辞に。</target>
        </trans-unit>
        <trans-unit id="c69d15f8e44a888d4bd1368919fd60293ccc2c89" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to the source file name, and the file is created in the same directory as the output file. If the &amp;lsquo;</source>
          <target state="translated">'をソースファイル名に変更すると、ファイルは出力ファイルと同じディレクトリに作成されます。'</target>
        </trans-unit>
        <trans-unit id="8ed3c9950521cf53b071d8dd20633754dbb7cc1c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to treat it like a warning (even if</source>
          <target state="translated">'警告のように扱います（たとえ</target>
        </trans-unit>
        <trans-unit id="1c80b7645a1d854bbd17006c82f06144b4c40be4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to treat this diagnostic as an error, &amp;lsquo;</source>
          <target state="translated">'この診断をエラーとして処理するには、'</target>
        </trans-unit>
        <trans-unit id="5bef1515c6834bc8f9c7e30752b5e04672e84850" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; to turn off warnings; for example,</source>
          <target state="translated">'警告をオフにします。例えば、</target>
        </trans-unit>
        <trans-unit id="39a6c2233326ca538b521ebba35c17f6f6321fff" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; toolchain, this option causes the hardware BSP provided by libgloss to be linked in if</source>
          <target state="translated">'ツールチェーン、このオプションにより、次の場合にlibglossによって提供されるハードウェアBSPがリンクされます。</target>
        </trans-unit>
        <trans-unit id="2da113e399a1a9773ce6971dff90293032832143" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; toolchain. Certain other options, such as</source>
          <target state="translated">'ツールチェーン。など、特定の他のオプション</target>
        </trans-unit>
        <trans-unit id="78d9fddfa8f96adddd4fef84d8627d7567c4c3c1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; tracks tokens locations completely. This value is the most memory hungry. When this option is given no argument, the default parameter value is &amp;lsquo;</source>
          <target state="translated">'トークンの場所を完全に追跡します。この値は、最もメモリを消費します。このオプションに引数を指定しない場合、デフォルトのパラメーター値は '</target>
        </trans-unit>
        <trans-unit id="76c937e0b6cc89a062161ae10ec3d7d4988e175f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; tracks tokens locations in a degraded mode for the sake of minimal memory overhead. In this mode all tokens resulting from the expansion of an argument of a function-like macro have the same location. Value &amp;lsquo;</source>
          <target state="translated">'最小限のメモリオーバーヘッドのために、トークンの場所を縮退モードで追跡します。このモードでは、関数のようなマクロの引数を展開した結果のトークンはすべて同じ場所にあります。値 '</target>
        </trans-unit>
        <trans-unit id="03e39be116fd453fb19403f3e451fbe0a4fb7794" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; tunes performance to the host system. This option has no effect if the compiler is unable to recognize the processor of the host system.</source>
          <target state="translated">'ホストシステムに合わせてパフォーマンスを調整します。コンパイラーがホストシステムのプロセッサーを認識できない場合、このオプションは効果がありません。</target>
        </trans-unit>
        <trans-unit id="54a47e25cf94d29dd512a01ee7945fbe67643846" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; turns on all types of branch protection features. If a feature has additional tuning options, then &amp;lsquo;</source>
          <target state="translated">'すべてのタイプのブランチ保護機能をオンにします。機能に追加の調整オプションがある場合、 '</target>
        </trans-unit>
        <trans-unit id="13ac0da77896e4b23930650fa879227a5fd24579" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; turns on branch target identification mechanism.</source>
          <target state="translated">'ブランチターゲット識別メカニズムをオンにします。</target>
        </trans-unit>
        <trans-unit id="0d18f91c55c591d82a20ec7351429f79b0975340" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; turns on return address signing to its standard level: signing functions that save the return address to memory (non-leaf functions will practically always do this) using the a-key. The optional argument &amp;lsquo;</source>
          <target state="translated">'リターンアドレスの署名を標準レベルに切り替えます。aキーを使用して、リターンアドレスをメモリに保存する署名関数（非リーフ関数は実際には常にこれを行います）。オプションの引数 '</target>
        </trans-unit>
        <trans-unit id="4fb8465300b7d34a5a06adfebbc880b39a469286" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; types, i.e. &amp;lsquo;</source>
          <target state="translated">'タイプ、すなわち'</target>
        </trans-unit>
        <trans-unit id="0b6b662caf8ef50e43f9e777831f3d1e52831fb5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; uses alignment value as specified by the psABI, and &amp;lsquo;</source>
          <target state="translated">'psABIで指定されているアライメント値を使用し、'</target>
        </trans-unit>
        <trans-unit id="7f8fb1eb4d4587ebe559311c119a4e77b06ec6d9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; uses increased alignment value compatible uses GCC 4.8 and earlier, &amp;lsquo;</source>
          <target state="translated">'増加したアライメント値を使用します。互換性はGCC 4.8以前を使用します</target>
        </trans-unit>
        <trans-unit id="9f23d00d56c1931b522364fd1aa0e1c9e7ed44aa" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; uses increased alignment value to match the cache line size. &amp;lsquo;</source>
          <target state="translated">'増加したアライメント値を使用して、キャッシュラインサイズを一致させます。」</target>
        </trans-unit>
        <trans-unit id="e15400798f607d653c6916b38ea136006f4471a6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; value in user code must be done with caution, since the compiler might use &amp;lsquo;</source>
          <target state="translated">'ユーザーコードの値は、コンパイラが使用する可能性があるため、注意して実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="5f6f876c00cb87147116ea210761a7c389fcc9ef" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; values are used to exactly determine which path is taken more often.</source>
          <target state="translated">'値は、より頻繁に使用されるパスを正確に決定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="e6ca6633de11e82e2247b004389f4aa468fffbdd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; vs &amp;lsquo;</source>
          <target state="translated">「vs」</target>
        </trans-unit>
        <trans-unit id="0779050ce9987f679c1038a47da66263698a9c04" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; was simply substituted with a file name chosen for the previous &amp;lsquo;</source>
          <target state="translated">'は、前のファイル名で選択されたファイル名に置き換えられました'</target>
        </trans-unit>
        <trans-unit id="502558e63736c003256f143d104a28598f133cdb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; was simply substituted with a file name chosen once per compilation, without regard to any appended suffix (which was therefore treated just like ordinary text), making such attacks more likely to succeed.</source>
          <target state="translated">'は、追加されたサフィックス（通常のテキストと同じように扱われる）に関係なく、コンパイルごとに1回選択されたファイル名で単に置き換えられたため、このような攻撃が成功する可能性が高くなります。</target>
        </trans-unit>
        <trans-unit id="f519e5816b445a4462f7c6c074b8d53555f7ae7c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; when</source>
          <target state="translated">' いつ</target>
        </trans-unit>
        <trans-unit id="4581798a42fc267b5b88d8c529c59a7d48e1ec83" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; when inverted (ones complement)</source>
          <target state="translated">'反転したとき（1が補数）</target>
        </trans-unit>
        <trans-unit id="b1b16141646060bcac76d2f93a69ece24464912b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; when negated (twos complement)</source>
          <target state="translated">'否定された場合（2の補数）</target>
        </trans-unit>
        <trans-unit id="16f8cbcf9ad14072c85731a453e55d733f44faf0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; when not used together with &amp;lsquo;</source>
          <target state="translated">'と一緒に使用しない場合'</target>
        </trans-unit>
        <trans-unit id="57cbeb22dfb1f65ec5d0baffa37c68a16717ad5f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; where &lt;var&gt;cond&lt;/var&gt; is one of the standard conditions defined in the ARM ARM for &lt;code&gt;ConditionHolds&lt;/code&gt;.</source>
          <target state="translated">「どこ &lt;var&gt;cond&lt;/var&gt; がためにARM ARMで定義された標準的な条件の一つである &lt;code&gt;ConditionHolds&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="05f1b1569a8bb4f983fcf2762d48347bd3c8a75b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; where &lt;var&gt;cond&lt;/var&gt; is one of the standard conditions defined in the ISA manual for &lt;code&gt;j&lt;var&gt;cc&lt;/var&gt;&lt;/code&gt; or &lt;code&gt;set&lt;var&gt;cc&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">' &lt;var&gt;cond&lt;/var&gt; は、ISAマニュアルで &lt;code&gt;j&lt;var&gt;cc&lt;/var&gt;&lt;/code&gt; または &lt;code&gt;set&lt;var&gt;cc&lt;/var&gt;&lt;/code&gt; について定義されている標準条件の1つです。</target>
        </trans-unit>
        <trans-unit id="224bfa989cb06395bf3f62406fb52c196c7e4a54" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; where &lt;var&gt;n&lt;/var&gt; is the size of the data type.</source>
          <target state="translated">'ここで、 &lt;var&gt;n&lt;/var&gt; はデータ型のサイズです。</target>
        </trans-unit>
        <trans-unit id="7d34efd1eefc71bdc46e1c691387ffc6d0f440a5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; which appear to be two hexadecimal constants separated by the minus operator. Actually, this string is a single &lt;em&gt;preprocessing token&lt;/em&gt;. Each such token must correspond to one token in C. Since this does not, GCC prints an error message. Although it may appear obvious that what is meant is an operator and two values, the ISO C standard specifically requires that this be treated as erroneous.</source>
          <target state="translated">'マイナス演算子で区切られた2つの16進定数のように見えます。実際、この文字列は単一の&lt;em&gt;前処理トークン&lt;/em&gt;です。このような各トークンは、Cの1つのトークンに対応している必要があります。対応していないため、GCCはエラーメッセージを出力します。意味が演算子と2つの値であることは明らかであるように思われるかもしれませんが、ISO C規格では、これを誤りとして扱うことが具体的に要求されています。</target>
        </trans-unit>
        <trans-unit id="700497f01355d02535f54af4544bfeb7bb0d0a4f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; which uses natural alignment. &amp;lsquo;</source>
          <target state="translated">'自然な配置を使用します。'</target>
        </trans-unit>
        <trans-unit id="5f0c7285e07e331ba359edce0e13711830ede65c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; which uses x register width as the alignment value, and &amp;lsquo;</source>
          <target state="translated">'xレジスタ幅をアライメント値として使用します。'</target>
        </trans-unit>
        <trans-unit id="ce548baa3dcfd80050cebbf016ad0a342bb4bbe1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; while &amp;lsquo;</source>
          <target state="translated">「ながら」</target>
        </trans-unit>
        <trans-unit id="1b2d77e78180f9351e6cde7ef400900cba22c2ba" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; while others do not. See, for example, the &amp;lsquo;</source>
          <target state="translated">'他の人はしませんが。たとえば、「</target>
        </trans-unit>
        <trans-unit id="870cf0525e235a623214719b3cee38e9cd0282ad" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; will be searched for in each of the directories specified by include paths and linker library search paths.</source>
          <target state="translated">'は、インクルードパスおよびリンカーライブラリ検索パスで指定された各ディレクトリで検索されます。</target>
        </trans-unit>
        <trans-unit id="d6e59717a41934fe3634c5f40aca5aa391956453" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; will do.</source>
          <target state="translated">' しましょう。</target>
        </trans-unit>
        <trans-unit id="a93d327d16920f7102563d1856dfddf404a0da93" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; will override the available floating-point and SIMD extension instructions.</source>
          <target state="translated">'は、使用可能な浮動小数点およびSIMD拡張命令をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="3f4ab9547533f8fc34d036f65d0098a66594fbf6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; with a new one. The new definition adds in some extra command-line options before including the text of the old definition.</source>
          <target state="translated">'新しいもので。新しい定義は、古い定義のテキストを含める前に、いくつかの追加のコマンドラインオプションを追加します。</target>
        </trans-unit>
        <trans-unit id="c9f1bf742bc9d084b36bd3cb92ef2565aa5bbfbe" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; with no argument, it applies to an include file with the same basename&lt;a href=&quot;#FOOT4&quot; id=&quot;DOCF4&quot; name=&quot;DOCF4&quot;&gt;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt; as your source file. For example, in</source>
          <target state="translated">'引数なしで、ソースファイルと同じベース名&lt;a href=&quot;#FOOT4&quot; id=&quot;DOCF4&quot; name=&quot;DOCF4&quot;&gt;&lt;sup&gt;4の&lt;/sup&gt;&lt;/a&gt;インクルードファイルに適用されます。たとえば、</target>
        </trans-unit>
        <trans-unit id="e7a3015dda596b394c38dca135d21f85aa3ebffe" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; without &amp;lsquo;</source>
          <target state="translated">「なし」</target>
        </trans-unit>
        <trans-unit id="0dc205d9bf0c9ff774def5e928c5c2881b5a3c50" translate="yes" xml:space="preserve">
          <source>&amp;rsquo; would be transformed either to &amp;lsquo;</source>
          <target state="translated">'は'に変換されます</target>
        </trans-unit>
        <trans-unit id="bc804106108f7bd979f6feca0e37d799668925a5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;&amp;mdash;for example,</source>
          <target state="translated">'-例えば、</target>
        </trans-unit>
        <trans-unit id="00de7c01d30f729b5e62e59bad477a85d24c72f1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;&amp;mdash;not for other compilers such as plain &lt;code&gt;gcc&lt;/code&gt;. Whatever the ISO C standard says is relevant to the design of plain &lt;code&gt;gcc&lt;/code&gt; without</source>
          <target state="translated">'&amp;mdash;プレーンな &lt;code&gt;gcc&lt;/code&gt; などの他のコンパイラでは使用できません。ISO C規格が言っていることは何もせずにプレーンな &lt;code&gt;gcc&lt;/code&gt; の設計に関連しています</target>
        </trans-unit>
        <trans-unit id="dcb0f5083283b8ed0056439fc5a6b003ecdf5b70" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;&amp;rsquo; is preferable for &lt;code&gt;asm&lt;/code&gt; statements)</source>
          <target state="translated">''は &lt;code&gt;asm&lt;/code&gt; ステートメントに適しています）</target>
        </trans-unit>
        <trans-unit id="3d710ff823f1d10d2285e509ae3146f07fa57416" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;)</source>
          <target state="translated">&amp;rsquo;)</target>
        </trans-unit>
        <trans-unit id="53a06a250ae2821edd769135818cefa09c3a1422" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) can be controlled, and not all of them. Use</source>
          <target state="translated">'）は制御できますが、すべてではありません。使用する</target>
        </trans-unit>
        <trans-unit id="66a59b09899d33d90f56a9d67697d71807563efb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) followed by its (zero-based) position in &lt;var&gt;GotoLabels&lt;/var&gt; plus the number of input operands. For example, if the &lt;code&gt;asm&lt;/code&gt; has three inputs and references two labels, refer to the first label as &amp;lsquo;</source>
          <target state="translated">'）の後に、 &lt;var&gt;GotoLabels&lt;/var&gt; での（ゼロから始まる）位置と入力オペランドの数が続きます。たとえば、 &lt;code&gt;asm&lt;/code&gt; に3つの入力があり、2つのラベルを参照する場合、最初のラベルを「</target>
        </trans-unit>
        <trans-unit id="e475de6573c410ed9174c3f23c2d0b2c68dd6feb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) from the option name. Unless documented otherwise, an argument can be either numeric or a string. Numeric arguments must typically be small unsigned decimal or hexadecimal integers. Hexadecimal arguments must begin with the &amp;lsquo;</source>
          <target state="translated">'）オプション名から。特に記載のない限り、引数は数値または文字列のいずれかです。数値引数は通常、小さい符号なし10進または16進整数でなければなりません。16進数の引数は「</target>
        </trans-unit>
        <trans-unit id="757956e655505260d48be09c6401ced2f6616e52" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) instead of digits.</source>
          <target state="translated">'）数字の代わりに。</target>
        </trans-unit>
        <trans-unit id="7b40161a5ee52fced90ad21e794bbab6943bfce4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) instruct &lt;code&gt;gcc&lt;/code&gt; to do nothing at all.</source>
          <target state="translated">'）何もしないように &lt;code&gt;gcc&lt;/code&gt; に指示します。</target>
        </trans-unit>
        <trans-unit id="f48998525d685598cafa634dea469c07a14f8c01" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) is determined by the flags that specify the ISA that GCC is targeting, like</source>
          <target state="translated">'）は、GCCがターゲットにしているISAを指定するフラグによって決定されます。</target>
        </trans-unit>
        <trans-unit id="e3b8003d677b625cc848dc562e266c1883c1bf49" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) is used. Usually they indicate a typo in the user&amp;rsquo;s code, as they have implementation-defined values, and should not be used in portable code.</source>
          <target state="translated">'） 使用されている。これらは実装で定義された値を持っているため、通常、ユーザーのコードのタイプミスを示し、移植可能なコードでは使用しないでください。</target>
        </trans-unit>
        <trans-unit id="bce679860a255116638f86cdf1bdd003a1e6221f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) or generic structs (&amp;lsquo;</source>
          <target state="translated">'）またはジェネリック構造体（'</target>
        </trans-unit>
        <trans-unit id="774731d593e5209e46f6cf8756de5fe9e5ea50e2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) or used indirectly (&amp;lsquo;</source>
          <target state="translated">'）または間接的に使用（'</target>
        </trans-unit>
        <trans-unit id="a55dc4d3813615932e15b8e05793ff32f4eb5bb3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) take effect in combination with other atomic operations on specific memory locations (e.g., atomic loads); operations on specific memory locations do not necessarily affect other operations in the same way.</source>
          <target state="translated">'）特定のメモリ位置（例えば、アトミックロード）で他のアトミック操作と組み合わせて有効になります。特定のメモリ位置での操作は、必ずしも同じ方法で他の操作に影響を与えるとは限りません。</target>
        </trans-unit>
        <trans-unit id="101017a161e8a4a5da8f0b61d9487a84646ffa42" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) to delimit the operand parameters after the assembler template:</source>
          <target state="translated">'）アセンブラテンプレートの後にオペランドパラメータを区切るには：</target>
        </trans-unit>
        <trans-unit id="c24500a4d6202ccddafac06900a7b0060daebcfb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;) within a single string. Spaces are not permitted within the strings.</source>
          <target state="translated">'）単一の文字列内。文字列内にスペースを含めることはできません。</target>
        </trans-unit>
        <trans-unit id="b7de57a249813f45c8bb234a3b77cdb949b14668" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;)&amp;mdash;and don&amp;rsquo;t do anything else.</source>
          <target state="translated">'）&amp;mdash;それ以外は何もしません。</target>
        </trans-unit>
        <trans-unit id="920418559681c5ff8ecbd8a0896c35c865a62667" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), &amp;lsquo;</source>
          <target state="translated">'）、'</target>
        </trans-unit>
        <trans-unit id="9d955da2a687bb782e3a613396d318419036d3fc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), an assembler template such as this:</source>
          <target state="translated">'）、次のようなアセンブラテンプレート：</target>
        </trans-unit>
        <trans-unit id="ed22c9b62e2fac731d3fa0a84f6b34a16db9b4bf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), and &amp;lsquo;</source>
          <target state="translated">'）、'</target>
        </trans-unit>
        <trans-unit id="70b742c0a760f2ed8a2f4e6eff2d6ab3826154ad" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), no object is needed to obtain the address of the function. They can be converted to function pointers directly:</source>
          <target state="translated">'）、関数のアドレスを取得するためにオブジェクトは必要ありません。それらは直接関数ポインタに変換できます：</target>
        </trans-unit>
        <trans-unit id="aa12a264be1002a46fabd882b95b79338c094c3e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), placing the value in a register (&amp;lsquo;</source>
          <target state="translated">'）、値をレジスター（'</target>
        </trans-unit>
        <trans-unit id="d4de0145c847e059e54316341fcc9c9a246eb97b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;), the compiler chooses the most efficient one based on the current context. If you must use a specific register, but your Machine Constraints do not provide sufficient control to select the specific register you want, local register variables may provide a solution (see &lt;a href=&quot;local-register-variables#Local-Register-Variables&quot;&gt;Local Register Variables&lt;/a&gt;).</source>
          <target state="translated">'）、コンパイラは現在のコンテキストに基づいて最も効率的なものを選択します。特定のレジスターを使用する必要があるが、マシン制約が必要な特定のレジスターを選択するための十分な制御を提供しない場合、ローカルレジスター変数がソリューションを提供する場合があります（&lt;a href=&quot;local-register-variables#Local-Register-Variables&quot;&gt;ローカルレジスター変数を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="b1384fe0c31b5149aeb485dfa12fc6e40b1ee80a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;).</source>
          <target state="translated">&amp;rsquo;).</target>
        </trans-unit>
        <trans-unit id="247554dea8017ceed4ebc2f0ddf4c1c56122fdae" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). A struct type is used directly when it is the type of a variable, member. Indirect uses arise through pointers to structs. That is, when use of an incomplete struct is valid, the use is indirect. An example is &amp;lsquo;</source>
          <target state="translated">'）。構造体型は、変数、メンバーの型の場合に直接使用されます。間接的な使用は、構造体へのポインタを通じて発生します。つまり、不完全な構造体の使用が有効な場合、その使用は間接的です。例は '</target>
        </trans-unit>
        <trans-unit id="241137680944e9803782618a7c6234ee4be1718b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). Generic structs are a bit complicated to explain. For C++, these are non-explicit specializations of template classes, or non-template classes within the above. Other programming languages have generics, but</source>
          <target state="translated">'）。一般的な構造体は、説明が少し複雑です。C ++の場合、これらはテンプレートクラスの非明示的な特殊化、または上記の非テンプレートクラスです。他のプログラミング言語にはジェネリックがありますが、</target>
        </trans-unit>
        <trans-unit id="9c4f339ea1f6efdfdb3f1de7007ecc1e689a70f6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). ISA strings must be lower-case. Examples include &amp;lsquo;</source>
          <target state="translated">'）。ISA文字列は小文字でなければなりません。例には '</target>
        </trans-unit>
        <trans-unit id="c515e25ab72e950aedab4e643cd942c7acaaf78a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). ISA strings must be lower-case. Valid ISA strings include &amp;lsquo;</source>
          <target state="translated">'）。ISA文字列は小文字でなければなりません。有効なISA文字列には '</target>
        </trans-unit>
        <trans-unit id="28dcb04b7cec7c1948f9a3d1e0eeb18abfddd844" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). If</source>
          <target state="translated">'）。もし</target>
        </trans-unit>
        <trans-unit id="1db301197128435967c7812046b072aff4533c56" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). Instead, the object files contain references to be resolved at link time.</source>
          <target state="translated">'）。代わりに、オブジェクトファイルには、リンク時に解決される参照が含まれています。</target>
        </trans-unit>
        <trans-unit id="e7133c2944aa60bfeb0d20f3c591dd62c46fdc22" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). Some assemblers allow semicolons as a line separator. However, note that some assembler dialects use semicolons to start a comment.</source>
          <target state="translated">'）。一部のアセンブラでは、セミコロンを行区切り文字として使用できます。ただし、一部のアセンブラ方言では、コメントの開始にセミコロンを使用することに注意してください。</target>
        </trans-unit>
        <trans-unit id="77387bea931c55865e91e9c6e518282a6ee31286" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). The scope of the name is the &lt;code&gt;asm&lt;/code&gt; statement that contains the definition. Any valid C variable name is acceptable, including names already defined in the surrounding code. No two operands within the same &lt;code&gt;asm&lt;/code&gt; statement can use the same symbolic name.</source>
          <target state="translated">'）。名前のスコープは、定義を含む &lt;code&gt;asm&lt;/code&gt; ステートメントです。周囲のコードですでに定義されている名前を含め、任意の有効なC変数名を使用できます。同じ &lt;code&gt;asm&lt;/code&gt; ステートメント内の2つのオペランドが同じシンボリック名を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="feab9b68ab784ee007bfd9ffdaf2fcdc72d72d96" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). Typically these qualifiers are hardware dependent. The list of supported modifiers for x86 is found at &lt;a href=&quot;#x86Operandmodifiers&quot;&gt;x86 Operand modifiers&lt;/a&gt;.</source>
          <target state="translated">'）。通常、これらの修飾子はハードウェアに依存します。x86でサポートされている修飾子のリストは、&lt;a href=&quot;#x86Operandmodifiers&quot;&gt;x86オペランド修飾子にあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="38d92a4f78d17aa1decb8d93c9e38d473afcd7d8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;). Using the generic &amp;lsquo;</source>
          <target state="translated">'）。一般的な '</target>
        </trans-unit>
        <trans-unit id="8e06582ed3f8a32ea5ee39b25a0290e388c00c24" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, &amp;hellip; &amp;lsquo;</source>
          <target state="translated">「、&amp;hellip;」</target>
        </trans-unit>
        <trans-unit id="5539094fa0b03be2ecf5d76b2f76c3ceb8adb603" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, &amp;lsquo;</source>
          <target state="translated">「、」</target>
        </trans-unit>
        <trans-unit id="3b63c535f0550f2343414feda1dd2f0ebecc5480" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, 0&amp;lsquo;</source>
          <target state="translated">'、0'</target>
        </trans-unit>
        <trans-unit id="a6e4978f2885df23d139681624267c129dc5b7c8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, BEL is an ASCII character, CTRL-G that usually sounds like a beep.</source>
          <target state="translated">'、BELはASCII文字、CTRL-Gで、通常はビープ音のように聞こえます。</target>
        </trans-unit>
        <trans-unit id="1617d171ec599b9ab55483b744473d631935b160" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, URLs use ST escape sequences. If set to &amp;lsquo;</source>
          <target state="translated">'、URLはSTエスケープシーケンスを使用します。'に設定されている場合</target>
        </trans-unit>
        <trans-unit id="8fb52f327e38a530b04e2b3ae2d13a53b83a7fe3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, a reference to a previously defined structure or union such as &amp;lsquo;</source>
          <target state="translated">'、以前に定義された構造またはユニオンへの参照'</target>
        </trans-unit>
        <trans-unit id="55abc55e6306905b6823631c506fd0ec75ff0f27" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, all workarounds for the targeted processor are enabled. The &lt;code&gt;__SILICON_REVISION__&lt;/code&gt; macro is defined to two hexadecimal digits representing the major and minor numbers in the silicon revision. If &lt;var&gt;sirevision&lt;/var&gt; is &amp;lsquo;</source>
          <target state="translated">'、ターゲットプロセッサのすべての回避策が有効になっています。 &lt;code&gt;__SILICON_REVISION__&lt;/code&gt; のマクロはシリコンリビジョンにおけるメジャーおよびマイナー番号を表す2桁の16進数に定義されています。もし &lt;var&gt;sirevision&lt;/var&gt; は 'です</target>
        </trans-unit>
        <trans-unit id="b4c2b924dddb74784fdc00cbc01bb9d353155e30" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and &amp;lsquo;</source>
          <target state="translated">「および」</target>
        </trans-unit>
        <trans-unit id="483d46fded9becc232dbdb93e3158f3f42b791e2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and &lt;code&gt;*&lt;/code&gt; sequences as well, although they have a stronger binding than the &amp;lsquo;</source>
          <target state="translated">'および &lt;code&gt;*&lt;/code&gt; シーケンスも同様ですが、'よりも強い結合があります。</target>
        </trans-unit>
        <trans-unit id="025eab9a1b6623d94918f0efdf239940346391b4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and GNU dialects of those standards, such as &amp;lsquo;</source>
          <target state="translated">'、およびそれらの標準のGNU方言。</target>
        </trans-unit>
        <trans-unit id="9269f03454f6ba284543f68ccb8599de5d8e5ca8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and appends the platform&amp;rsquo;s usual object suffix. The result is the target.</source>
          <target state="translated">'、およびプラットフォームの通常のオブジェクトサフィックスを追加します。その結果が目標です。</target>
        </trans-unit>
        <trans-unit id="2073c52a5a4291471a2c1778b6a5d6aa27011cd9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, and each switch starts with an &amp;lsquo;</source>
          <target state="translated">'、および各スイッチは「</target>
        </trans-unit>
        <trans-unit id="f905781c589b0e4579c81050815f957daef62254" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, as shown here:</source>
          <target state="translated">'、ここに示すように：</target>
        </trans-unit>
        <trans-unit id="e9ce993e58d935c75aafba5b1fdb485a8a776db3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, because of the need for those to form complete file names. The handling is such that &amp;lsquo;</source>
          <target state="translated">'、完全なファイル名を形成する必要があるため。取り扱いはそのようなものです '</target>
        </trans-unit>
        <trans-unit id="21e67ee4ffd5a5984f784e0175ae5cd377da2fd5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but a function call is only used if a trap is not available.</source>
          <target state="translated">'、しかし、関数呼び出しはトラップが利用できない場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="87f33fe8f4938fd885f3212c8d4fcaa4cd1d82de" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but also generate GP-relative accesses for small data objects that are external, weak, or common. If you use this option, you must ensure that all parts of your program (including libraries) are compiled with the same</source>
          <target state="translated">'、しかし、外部、弱い、または一般的な小さなデータオブジェクトのGP相対アクセスも生成します。このオプションを使用する場合、プログラム（ライブラリを含む）のすべての部分が同じでコンパイルされていることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="2411a70f498933e6be4a4e9d0ef8e6b417a49aa8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but do not generate an error message if the include file cannot be found.</source>
          <target state="translated">'、ただし、インクルードファイルが見つからない場合でもエラーメッセージは生成されません。</target>
        </trans-unit>
        <trans-unit id="f242eacde5ab79e86477338531360b8ba9ecec37" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but generates a new temporary file name each time it appears instead of once per compilation.</source>
          <target state="translated">'、ただし、コンパイルごとに1回ではなく、表示されるたびに新しい一時ファイル名を生成します。</target>
        </trans-unit>
        <trans-unit id="7ae3620a4615e0395e0b6bb2723f394be5b4513b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but include the file suffix (text after the last period).</source>
          <target state="translated">'、ただしファイルのサフィックス（最後のピリオドの後のテキスト）を含めます。</target>
        </trans-unit>
        <trans-unit id="092a366239711ab0e1774f55ad486f40925b2c39" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but inexact traps are enabled as well.</source>
          <target state="translated">'、ただし、不正確なトラップも有効になります。</target>
        </trans-unit>
        <trans-unit id="dba30ddb7f54c0471e6b8c42e687a833e9c23aee" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but puts &amp;lsquo;</source>
          <target state="translated">'、しかし置く'</target>
        </trans-unit>
        <trans-unit id="39218b3d97dc3ec712bf382cd7959367acbcf492" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, but the instructions are marked to be safe for software completion (see Alpha architecture manual for details).</source>
          <target state="translated">'、ただし、命令はソフトウェアの完了に対して安全であるとマークされています（詳細については、Alphaアーキテクチャのマニュアルを参照してください）。</target>
        </trans-unit>
        <trans-unit id="d8cd09ea2d0d1b33877c0c9862899263ad429cad" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, code generation produces a shared library. In this case</source>
          <target state="translated">'、コード生成は共有ライブラリを生成します。この場合</target>
        </trans-unit>
        <trans-unit id="a1e30049951c28063aecc8612ac853daf2321d15" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, code generation produces a static binary. In this case</source>
          <target state="translated">'、コード生成は静的バイナリを生成します。この場合</target>
        </trans-unit>
        <trans-unit id="98845d0aa0b9702b4e81668d45e3421f03d4f6ba" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, code generation produces an</source>
          <target state="translated">'、コード生成は</target>
        </trans-unit>
        <trans-unit id="a95b52d04a925b481ffc7ad53fe6eb07f0a4eebe" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, depending on whether a basic block is reachable via non-exceptional or exceptional paths. Executed basic blocks having a statement with zero &lt;var&gt;execution_count&lt;/var&gt; end with &amp;lsquo;</source>
          <target state="translated">'、基本ブロックが非例外パスまたは例外パスを介して到達可能かどうかに応じて。 &lt;var&gt;execution_count&lt;/var&gt; がゼロのステートメントを持つ実行済み基本ブロックは、'で終わります</target>
        </trans-unit>
        <trans-unit id="66d00e224ec92d1c22749474d1e91e24964ab5c2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, depending on whether they are reachable by non-exceptional paths or only exceptional paths such as C++ exception handlers, respectively. Given the &amp;lsquo;</source>
          <target state="translated">'、それらがそれぞれ非例外パスまたはC ++例外ハンドラーなどの例外パスのみによって到達可能かどうかに応じて。与えられた '</target>
        </trans-unit>
        <trans-unit id="136c3d628fc50dc61e6297006309885a5d8aee50" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, do not assume the location contains the existing value on entry to the &lt;code&gt;asm&lt;/code&gt;, except when the operand is tied to an input; see &lt;a href=&quot;#InputOperands&quot;&gt;Input Operands&lt;/a&gt;.</source>
          <target state="translated">'、オペランドが入力に関連付けられている場合を除いて、場所に &lt;code&gt;asm&lt;/code&gt; へのエントリの既存の値が含まれていると想定しないでください。&lt;a href=&quot;#InputOperands&quot;&gt;入力オペランドを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="72a15c5c2ab5367705f537e4e37b0cff7829b97c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, do not embed URLs in diagnostics. If set to &amp;lsquo;</source>
          <target state="translated">'、診断にURLを埋め込まないでください。'に設定されている場合</target>
        </trans-unit>
        <trans-unit id="0eebd87ad91943223aef3936c3e20f0c176f9150" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, e.g.</source>
          <target state="translated">'、例えば</target>
        </trans-unit>
        <trans-unit id="de40d739dfc6920248f5b9046b3c9b839f920f68" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, etc., with &amp;lsquo;</source>
          <target state="translated">'など</target>
        </trans-unit>
        <trans-unit id="2aa5684705ecc6e2def69b7b8430a853ec505c39" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, even if they are executed earlier. The phase letter is one of &amp;lsquo;</source>
          <target state="translated">'、それらが以前に実行された場合でも。フェーズレターは '</target>
        </trans-unit>
        <trans-unit id="09e3614efaea8eab44d2d073c727d9df85c09585" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, except if</source>
          <target state="translated">'、 場合を除き</target>
        </trans-unit>
        <trans-unit id="05234cf66772b81ecd442f963fde2d9cf3f3b580" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, except that it verifies that bits that are not in the lower 32-bit range are all zero. Must be used instead of &amp;lsquo;</source>
          <target state="translated">'ただし、下位32ビットの範囲にないビットがすべてゼロであることを確認します。の代わりに使用する必要があります</target>
        </trans-unit>
        <trans-unit id="066ab954d39195c280a98dc287f05dc34c467231" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, except they don&amp;rsquo;t share the same suffix &lt;em&gt;space&lt;/em&gt;, so &amp;lsquo;</source>
          <target state="translated">'ただし、同じサフィックス&lt;em&gt;スペースを&lt;/em&gt;共有しないため、'</target>
        </trans-unit>
        <trans-unit id="98d65587f22436a3a12d35d6fe27c3546587cef2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, for example</source>
          <target state="translated">'、 例えば</target>
        </trans-unit>
        <trans-unit id="0d4f3e8108a13ab29d4b2e0e63a1ca33c2b22454" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, generating a new one if there is no such last file name. In the absence of any &amp;lsquo;</source>
          <target state="translated">'、そのような最後のファイル名がない場合、新しいファイルを生成します。何もない場合 '</target>
        </trans-unit>
        <trans-unit id="9db8be9dbf00d53f36b02e299cb40c1ccf21b3d5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, i.e., make every symbol public.</source>
          <target state="translated">'、つまり、すべてのシンボルを公開します。</target>
        </trans-unit>
        <trans-unit id="f9417c06d6d376990e78c94bffca4a185de5c4ea" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, in which case the &lt;code&gt;__fp16&lt;/code&gt; type is not defined. See &lt;a href=&quot;half_002dprecision#Half_002dPrecision&quot;&gt;Half-Precision&lt;/a&gt;, for more information.</source>
          <target state="translated">'、その場合、 &lt;code&gt;__fp16&lt;/code&gt; タイプは定義されません。詳細については、&lt;a href=&quot;half_002dprecision#Half_002dPrecision&quot;&gt;Half-Precisionを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="01f1d4ba970d96674fdfce27113ede13dd96c83c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, in which case the rules are written to file &lt;var&gt;file&lt;/var&gt; using &lt;var&gt;target&lt;/var&gt; as the target name.</source>
          <target state="translated">'。この場合、ルールは、ターゲット名として &lt;var&gt;target&lt;/var&gt; を使用してファイル &lt;var&gt;file&lt;/var&gt; に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="18c4ce616b187a8cd7e37370e7c2a4558687b5bd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, in which no floating-point arguments will be passed in registers.</source>
          <target state="translated">'、浮動小数点引数はレジスターで渡されません。</target>
        </trans-unit>
        <trans-unit id="a3e7b4dd0f31f9fc49145a20fdc34f56d6192b15" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, meaning no alignment. The maximum allowed &lt;var&gt;n&lt;/var&gt; option value is 65536.</source>
          <target state="translated">'、位置合わせなしを意味します。許可される &lt;var&gt;n&lt;/var&gt; オプションの最大値は65536です。</target>
        </trans-unit>
        <trans-unit id="b1df550e442c6ce053b25ec1d413b95d867426aa" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, no workarounds are enabled. If &lt;var&gt;sirevision&lt;/var&gt; is &amp;lsquo;</source>
          <target state="translated">'、有効な回避策はありません。もし &lt;var&gt;sirevision&lt;/var&gt; は 'です</target>
        </trans-unit>
        <trans-unit id="4638287656ac02959e2cefcae6acca031d4bd193" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, only the preprocessor macro is defined.</source>
          <target state="translated">'、プリプロセッサマクロのみが定義されています。</target>
        </trans-unit>
        <trans-unit id="f307dbc595c36b91f1275e80e0395cbaf3c6504c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, or &amp;lsquo;</source>
          <target state="translated">'または'</target>
        </trans-unit>
        <trans-unit id="9b3c982032ea0459140427383a85dba0acd2e1fd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, or (for shared template code) &amp;lsquo;</source>
          <target state="translated">'、または（共有テンプレートコードの場合）'</target>
        </trans-unit>
        <trans-unit id="5eab487e4b72d07293fe7c795f5de0ccb7970c25" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, or a reference to a &lt;code&gt;typedef&lt;/code&gt; name for a previously defined structure or union type.</source>
          <target state="translated">'、または以前に定義された構造体または共用体型の &lt;code&gt;typedef&lt;/code&gt; 名への参照。</target>
        </trans-unit>
        <trans-unit id="3f4b0ae84ca34d4bad67d128809cab75207b33d0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, or even &amp;lsquo;</source>
          <target state="translated">'、 あるいは '</target>
        </trans-unit>
        <trans-unit id="1d1087187ab3a7e62992e275357cb57bcfa1c106" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, or it might get &amp;lsquo;</source>
          <target state="translated">'、またはそれは得るかもしれません'</target>
        </trans-unit>
        <trans-unit id="3aca8c8acb74e379a3304f127abf609845bc280e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, or make the path absolute when generating a relative prefix.</source>
          <target state="translated">'、または相対プレフィックスを生成するときにパスを絶対パスにします。</target>
        </trans-unit>
        <trans-unit id="b6358603813ed89a66fd98d2859d299f75ccce85" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, otherwise, it is turned off.</source>
          <target state="translated">'、それ以外の場合はオフになります。</target>
        </trans-unit>
        <trans-unit id="0f1fda70fb0c46563a4357bb73dfbd4447b31663" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, respectively, in the following character). In the case of function definitions, a K&amp;amp;R-style list of arguments followed by their declarations is also provided, inside comments, after the declaration.</source>
          <target state="translated">'、次の文字でそれぞれ）。関数定義の場合、K＆Rスタイルの引数リストとそれに続く宣言も、コメント内で宣言の後に提供されます。</target>
        </trans-unit>
        <trans-unit id="c3101771b9632d8f958f8bd2e3b3975e5bd0ed02" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, so &amp;lsquo;</source>
          <target state="translated">'、 そう '</target>
        </trans-unit>
        <trans-unit id="c5b364cf3dc5ad7fb131b66cc0868f3b8543e70b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, that are defined by ISO C to stand for single characters. For example, &amp;lsquo;</source>
          <target state="translated">'、ISO Cで単一文字を表すように定義されています。例えば、 '</target>
        </trans-unit>
        <trans-unit id="4931b59d68a18af6c7fbe7e255d105b5cb1219bb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the &amp;ldquo;software trace cache&amp;rdquo; algorithm, which tries to put all often executed code together, minimizing the number of branches executed by making extra copies of code.</source>
          <target state="translated">'、「ソフトウェアトレースキャッシュ」アルゴリズム。頻繁に実行されるすべてのコードを1つにまとめ、コードの追加コピーを作成することで実行されるブランチの数を最小限に抑えます。</target>
        </trans-unit>
        <trans-unit id="2073bc4d3052c9d45b6e4d60d51421cb09ad40d8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the &lt;code&gt;__SILICON_REVISION__&lt;/code&gt; is defined to be &lt;code&gt;0xffff&lt;/code&gt;. If this optional &lt;var&gt;sirevision&lt;/var&gt; is not used, GCC assumes the latest known silicon revision of the targeted Blackfin processor.</source>
          <target state="translated">'、 &lt;code&gt;__SILICON_REVISION__&lt;/code&gt; は &lt;code&gt;0xffff&lt;/code&gt; として定義されています。このオプションの &lt;var&gt;sirevision&lt;/var&gt; を使用しない場合、GCCは対象のBlackfinプロセッサーの最新の既知のシリコンリビジョンを想定しています。</target>
        </trans-unit>
        <trans-unit id="a7faca6a353f0ed8bbbd7fe58280558417f88bc1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the &lt;code&gt;__SILICON_REVISION__&lt;/code&gt; is not defined. If &lt;var&gt;sirevision&lt;/var&gt; is &amp;lsquo;</source>
          <target state="translated">'、 &lt;code&gt;__SILICON_REVISION__&lt;/code&gt; が定義されていません。もし &lt;var&gt;sirevision&lt;/var&gt; は 'です</target>
        </trans-unit>
        <trans-unit id="65abcc89dec065b35f4bd11700eca1f81a095ac8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the compiler assumes that incremental linking is done. The sections containing intermediate code for link-time optimization are merged, pre-optimized, and output to the resulting object file. In addition, if</source>
          <target state="translated">'、コンパイラは、インクリメンタルリンクが実行されていると想定します。リンク時最適化の中間コードを含むセクションは、マージされ、事前に最適化されて、結果のオブジェクトファイルに出力されます。また、</target>
        </trans-unit>
        <trans-unit id="f5c8011c2f55c0ac81c5d9ceb64477468b6c9a9e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the compiler emits code for the function itself; this defines a version of the function that can be found via pointers (or by callers compiled without inlining). If all calls to the function can be inlined, you can avoid emitting the function by compiling with</source>
          <target state="translated">'、コンパイラは関数自体のコードを出力します。これは、ポインターを介して（またはインライン化せずにコンパイルされた呼び出し元によって）見つけられる関数のバージョンを定義します。関数のすべての呼び出しをインライン化できる場合は、次のようにコンパイルすることで関数の発行を回避できます。</target>
        </trans-unit>
        <trans-unit id="604f7c196281a8eb03ef11414ae3329aad530284" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the default, URLs use BEL escape sequences. Any other non-empty value enables the feature. If &lt;code&gt;GCC_URLS&lt;/code&gt; is not set, use &lt;code&gt;TERM_URLS&lt;/code&gt; as a fallback. Note: ST is an ANSI escape sequence, string terminator &amp;lsquo;</source>
          <target state="translated">'、デフォルト、URLはBELエスケープシーケンスを使用します。その他の空でない値は、機能を有効にします。 &lt;code&gt;GCC_URLS&lt;/code&gt; が設定されていない場合は、フォールバックとして &lt;code&gt;TERM_URLS&lt;/code&gt; を使用します。注：STはANSIエスケープシーケンス、文字列ターミネータです '</target>
        </trans-unit>
        <trans-unit id="69fe33acd108f025f730775d7b0fa5c44068dad3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the default.</source>
          <target state="translated">'、 デフォルト。</target>
        </trans-unit>
        <trans-unit id="5fce4bbe106b081174a0f5bef32f95cbfa790ac6" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the effect on an inline function defined in that class is similar to an explicit &lt;code&gt;extern&lt;/code&gt; declaration&amp;mdash;the compiler emits no code at all to define an independent version of the function. Its definition is used only for inlining with its callers.</source>
          <target state="translated">'、そのクラスで定義されたインライン関数への影響は、明示的な &lt;code&gt;extern&lt;/code&gt; 宣言に似ています。コンパイラーは、関数の独立したバージョンを定義するコードをまったく発行しません。その定義は、呼び出し元とのインライン化にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="bf5bc1539de695c3b4d3767d9c103937369811c1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the last two letters must both be literally &amp;lsquo;</source>
          <target state="translated">'、最後の2文字は両方とも文字通りでなければなりません'</target>
        </trans-unit>
        <trans-unit id="db79a20c00080e7d5e4b192fe6de466faac9115a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the macro names the resolved architecture (either &lt;code&gt;&quot;mips1&quot;&lt;/code&gt; or &lt;code&gt;&quot;mips3&quot;&lt;/code&gt;). It names the default architecture when no</source>
          <target state="translated">'、マクロは解決されたアーキテクチャに名前を付けます（ &lt;code&gt;&quot;mips1&quot;&lt;/code&gt; または &lt;code&gt;&quot;mips3&quot;&lt;/code&gt; ）。ない場合はデフォルトのアーキテクチャを指定します</target>
        </trans-unit>
        <trans-unit id="8d83a5ecd0c633a33d12c8a0921f9d9646b8105f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the operand can have postincrement and postdecrement which require printing with &amp;lsquo;</source>
          <target state="translated">'、オペランドにはポストインクリメントとポストデクリメントがあり、'</target>
        </trans-unit>
        <trans-unit id="780d16f0177d79dcb186b26e4731ad4f3ff27e90" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, the operand can have postincrement which requires printing with &amp;lsquo;</source>
          <target state="translated">'、オペランドは'での印刷を必要とするポストインクリメントを持つことができます</target>
        </trans-unit>
        <trans-unit id="ceb42aac3e6fdad044fad5c6661786765e693612" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, then the hard-coded MCU data is used.</source>
          <target state="translated">'の場合、ハードコードされたMCUデータが使用されます。</target>
        </trans-unit>
        <trans-unit id="958abf9b2ba30ada1927e0d18d675fed8d221758" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, then updates the &amp;lsquo;</source>
          <target state="translated">'、次に'</target>
        </trans-unit>
        <trans-unit id="6f80d08a483db41013d0e0117c5b88a8e8ad1bd3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, there is a corresponding &lt;em&gt;base standard&lt;/em&gt;, the version of ISO C on which the GNU extended dialect is based. Warnings from</source>
          <target state="translated">'、対応する&lt;em&gt;基本標準&lt;/em&gt;、GNU拡張方言のベースとなっているISO Cのバージョンがあります。からの警告</target>
        </trans-unit>
        <trans-unit id="a8483af113196f523d78cdfed023c2f13973b39e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, this contributes no text to the argument.</source>
          <target state="translated">'、これは引数にテキストを提供しません。</target>
        </trans-unit>
        <trans-unit id="4d636acf24a127bc2b95b62fa251ecc17f5cc915" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, this is just like &amp;lsquo;</source>
          <target state="translated">'、これはちょうどのようです'</target>
        </trans-unit>
        <trans-unit id="e894972486d8d6096ff2223f65e4a8883430900a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, this macro is not defined.</source>
          <target state="translated">'、このマクロは定義されていません。</target>
        </trans-unit>
        <trans-unit id="6db9d39068e98a34cf2dbeda58f4d7c72ad17119" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, this works even when infinities, NaNs and negative zeros are involved.</source>
          <target state="translated">'、これは、無限大、NaN、負のゼロが含まれる場合でも機能します。</target>
        </trans-unit>
        <trans-unit id="f9f6f2167738a6bc27a8918056c08bdf0ac8ac61" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, those functions may not be loaded.</source>
          <target state="translated">'、それらの関数はロードされない可能性があります。</target>
        </trans-unit>
        <trans-unit id="848c5ba958a75e22dba01b795952aac18411fbbf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, thus the invocation of &lt;code&gt;cc1&lt;/code&gt; is &amp;lsquo;</source>
          <target state="translated">'したがって、 &lt;code&gt;cc1&lt;/code&gt; の呼び出しは'</target>
        </trans-unit>
        <trans-unit id="6d98c164b412ee8aa5fd4b179a66947857f9efe0" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, underflow traps are enabled as well.</source>
          <target state="translated">'、アンダーフロートラップも有効になります。</target>
        </trans-unit>
        <trans-unit id="412c73084b584a3fd2f571e198882146b578aafa" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, usually the letter indicating the most common immediate-constant format.</source>
          <target state="translated">'、通常、最も一般的な即時定数形式を示す文字。</target>
        </trans-unit>
        <trans-unit id="5b2af747b468ebcf98a4ed4b7baee2a44d3c411c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, when supported by a target, or to &amp;lsquo;</source>
          <target state="translated">'、ターゲットでサポートされている場合、または'</target>
        </trans-unit>
        <trans-unit id="4efda24d512ee43a5706f4bdf3be7939f7f6d247" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, when the structure field has the misaligned offset:</source>
          <target state="translated">'、構造体フィールドのオフセットがずれている場合：</target>
        </trans-unit>
        <trans-unit id="93aa1e264ff57887de5dc1cb5417f8dd989d1e09" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, where &lt;var&gt;L&lt;/var&gt; is an uppercase letter. This is for ISO C.</source>
          <target state="translated">'、ここで &lt;var&gt;L&lt;/var&gt; は大文字です。これはISO C用です。</target>
        </trans-unit>
        <trans-unit id="739a7d9d6e619ecc7399139269b374ab43d85367" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, where &lt;var&gt;X&lt;/var&gt; is a major version, &lt;var&gt;YY&lt;/var&gt; is the minor version, and &lt;var&gt;Z&lt;/var&gt; is compatibility code. Example values are &amp;lsquo;</source>
          <target state="translated">'、 &lt;var&gt;X&lt;/var&gt; はメジャーバージョン、 &lt;var&gt;YY&lt;/var&gt; はマイナーバージョン、 &lt;var&gt;Z&lt;/var&gt; は互換性コードです。値の例は '</target>
        </trans-unit>
        <trans-unit id="d769a376fcd2331ff3efeece4ef65cc094eb46d9" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, where the name of the friend is an unqualified-id, could be interpreted as a particular specialization of a template function; the warning exists to diagnose compatibility problems, and is enabled by default.</source>
          <target state="translated">'、フレンドの名前が非修飾IDである場合、テンプレート関数の特定の特殊化として解釈できます。警告は互換性の問題を診断するために存在し、デフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="cb4545941e1a456d9e76018c4df8a40b960f1b83" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which can be confusing. Use the</source>
          <target state="translated">'、これは混乱する可能性があります。使用</target>
        </trans-unit>
        <trans-unit id="3a9a59268985f9334c00a17967c54ff7c32a0e16" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which disables return address signing, &amp;lsquo;</source>
          <target state="translated">'、これは戻りアドレス署名を無効にします、'</target>
        </trans-unit>
        <trans-unit id="87f652520c80de99647e10eb1ff77ab629d99978" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which does not increase code size (except sometimes due to secondary effects like alignment), or &amp;lsquo;</source>
          <target state="translated">'、これはコードサイズを増加させません（場合によっては、アラインメントなどの二次的な影響による場合を除く）、または'</target>
        </trans-unit>
        <trans-unit id="8659feb795576fd08fccb6d569ea2287637015e4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which enables pointer signing for all functions. The default value is &amp;lsquo;</source>
          <target state="translated">'、すべての関数のポインター署名を有効にします。デフォルト値は '</target>
        </trans-unit>
        <trans-unit id="4bcf01b8de353a2ead74230ef433e9b1d5c42c5f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which enables pointer signing for functions which are not leaf functions, and &amp;lsquo;</source>
          <target state="translated">'、リーフ関数ではない関数のポインタ署名を有効にします。</target>
        </trans-unit>
        <trans-unit id="919dfa4777ff858a1ffee761219e579bcc47fff2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which fetches the thread pointer from &lt;code&gt;cp15&lt;/code&gt; directly (supported in the arm6k architecture), and &amp;lsquo;</source>
          <target state="translated">'、 &lt;code&gt;cp15&lt;/code&gt; からスレッドポインタを直接フェッチします（arm6kアーキテクチャでサポートされています）。</target>
        </trans-unit>
        <trans-unit id="c0bc21f369e03da1ff0fbdfedd85fac2ceffcf5f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which generates calls to &lt;code&gt;__aeabi_read_tp&lt;/code&gt;, &amp;lsquo;</source>
          <target state="translated">'、これは &lt;code&gt;__aeabi_read_tp&lt;/code&gt; への呼び出しを生成します、'</target>
        </trans-unit>
        <trans-unit id="be7bc52286a0fa82e570dab15353ed73c224a194" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which is treated exactly as if &amp;lsquo;</source>
          <target state="translated">'、まるで'のように扱われます</target>
        </trans-unit>
        <trans-unit id="4b8132d93b5b364fb4107d3f7f7e80d8cb8cca0a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which keeps function return unmodified. &amp;lsquo;</source>
          <target state="translated">'、関数の戻りを変更せずに保持します。」</target>
        </trans-unit>
        <trans-unit id="7c0ef144ca1606cff5c2fcba721912c1bf504b40" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which keeps indirect call and jump unmodified. &amp;lsquo;</source>
          <target state="translated">'、間接呼び出しを保持し、変更せずにジャンプします。」</target>
        </trans-unit>
        <trans-unit id="beca4baa89360933636ffbc7ac4cf4af22fdf467" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which means that no register is used for this purpose. The default is</source>
          <target state="translated">'これは、この目的でレジスタが使用されないことを意味します。デフォルトは</target>
        </trans-unit>
        <trans-unit id="1101672b2c1cf966ba104538143c46f9af09e54f" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which means to dump messages about successful optimizations from all the passes, omitting messages that are treated as &amp;ldquo;internals&amp;rdquo;.</source>
          <target state="translated">'これは、すべてのパスから成功した最適化に関するメッセージをダンプし、「内部」として扱われるメッセージは省略します。</target>
        </trans-unit>
        <trans-unit id="3faa7f76311e939879aa32607e1cbda0c78aeffc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which produces vector-length agnostic code.</source>
          <target state="translated">'、これはベクトル長に依存しないコードを生成します。</target>
        </trans-unit>
        <trans-unit id="eebb01c01a4dcc45ae8a85f860ce121ea49fd1a8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which selects the best architecture option for the host processor.</source>
          <target state="translated">'、これはホストプロセッサに最適なアーキテクチャオプションを選択します。</target>
        </trans-unit>
        <trans-unit id="13bf69f8c2ad5370a2f855e913a0eaf2e0a40255" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which should be invoked with the command-line switch</source>
          <target state="translated">'、これはコマンドラインスイッチで呼び出す必要があります</target>
        </trans-unit>
        <trans-unit id="06afe658b05579d643bf49716402cd959b627012" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which specifies Chaitin-Briggs coloring. Chaitin-Briggs coloring is not implemented for all architectures, but for those targets that do support it, it is the default because it generates better code.</source>
          <target state="translated">'、Chaitin-Briggsのカラーリングを指定します。Chaitin-Briggsのカラーリングはすべてのアーキテクチャに実装されているわけではありませんが、それをサポートするターゲットでは、より良いコードを生成するため、これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="79c08f6e9afbde3eae65486c01beb0bfcedf5e50" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which specifies Chow&amp;rsquo;s priority coloring, or &amp;lsquo;</source>
          <target state="translated">'、Chowの優先カラーリングを指定する、または'</target>
        </trans-unit>
        <trans-unit id="b6395fd7f5367f1a12df6a010dc30044349a64d3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which specifies to use IBM&amp;rsquo;s Mathematical Acceleration Subsystem (MASS) libraries for vectorizing intrinsics using external libraries. GCC currently emits calls to &lt;code&gt;acosd2&lt;/code&gt;, &lt;code&gt;acosf4&lt;/code&gt;, &lt;code&gt;acoshd2&lt;/code&gt;, &lt;code&gt;acoshf4&lt;/code&gt;, &lt;code&gt;asind2&lt;/code&gt;, &lt;code&gt;asinf4&lt;/code&gt;, &lt;code&gt;asinhd2&lt;/code&gt;, &lt;code&gt;asinhf4&lt;/code&gt;, &lt;code&gt;atan2d2&lt;/code&gt;, &lt;code&gt;atan2f4&lt;/code&gt;, &lt;code&gt;atand2&lt;/code&gt;, &lt;code&gt;atanf4&lt;/code&gt;, &lt;code&gt;atanhd2&lt;/code&gt;, &lt;code&gt;atanhf4&lt;/code&gt;, &lt;code&gt;cbrtd2&lt;/code&gt;, &lt;code&gt;cbrtf4&lt;/code&gt;, &lt;code&gt;cosd2&lt;/code&gt;, &lt;code&gt;cosf4&lt;/code&gt;, &lt;code&gt;coshd2&lt;/code&gt;, &lt;code&gt;coshf4&lt;/code&gt;, &lt;code&gt;erfcd2&lt;/code&gt;, &lt;code&gt;erfcf4&lt;/code&gt;, &lt;code&gt;erfd2&lt;/code&gt;, &lt;code&gt;erff4&lt;/code&gt;, &lt;code&gt;exp2d2&lt;/code&gt;, &lt;code&gt;exp2f4&lt;/code&gt;, &lt;code&gt;expd2&lt;/code&gt;, &lt;code&gt;expf4&lt;/code&gt;, &lt;code&gt;expm1d2&lt;/code&gt;, &lt;code&gt;expm1f4&lt;/code&gt;, &lt;code&gt;hypotd2&lt;/code&gt;, &lt;code&gt;hypotf4&lt;/code&gt;, &lt;code&gt;lgammad2&lt;/code&gt;, &lt;code&gt;lgammaf4&lt;/code&gt;, &lt;code&gt;log10d2&lt;/code&gt;, &lt;code&gt;log10f4&lt;/code&gt;, &lt;code&gt;log1pd2&lt;/code&gt;, &lt;code&gt;log1pf4&lt;/code&gt;, &lt;code&gt;log2d2&lt;/code&gt;, &lt;code&gt;log2f4&lt;/code&gt;, &lt;code&gt;logd2&lt;/code&gt;, &lt;code&gt;logf4&lt;/code&gt;, &lt;code&gt;powd2&lt;/code&gt;, &lt;code&gt;powf4&lt;/code&gt;, &lt;code&gt;sind2&lt;/code&gt;, &lt;code&gt;sinf4&lt;/code&gt;, &lt;code&gt;sinhd2&lt;/code&gt;, &lt;code&gt;sinhf4&lt;/code&gt;, &lt;code&gt;sqrtd2&lt;/code&gt;, &lt;code&gt;sqrtf4&lt;/code&gt;, &lt;code&gt;tand2&lt;/code&gt;, &lt;code&gt;tanf4&lt;/code&gt;, &lt;code&gt;tanhd2&lt;/code&gt;, and &lt;code&gt;tanhf4&lt;/code&gt; when generating code for power7. Both</source>
          <target state="translated">'、外部ライブラリを使用して組み込み関数をベクトル化するためにIBMのMathematical Acceleration Subsystem（MASS）ライブラリを使用することを指定します。 GCCは、現在の呼び出し発する &lt;code&gt;acosd2&lt;/code&gt; 、 &lt;code&gt;acosf4&lt;/code&gt; 、 &lt;code&gt;acoshd2&lt;/code&gt; 、 &lt;code&gt;acoshf4&lt;/code&gt; 、 &lt;code&gt;asind2&lt;/code&gt; 、 &lt;code&gt;asinf4&lt;/code&gt; 、 &lt;code&gt;asinhd2&lt;/code&gt; 、 &lt;code&gt;asinhf4&lt;/code&gt; 、 &lt;code&gt;atan2d2&lt;/code&gt; 、 &lt;code&gt;atan2f4&lt;/code&gt; 、 &lt;code&gt;atand2&lt;/code&gt; 、 &lt;code&gt;atanf4&lt;/code&gt; 、 &lt;code&gt;atanhd2&lt;/code&gt; 、 &lt;code&gt;atanhf4&lt;/code&gt; 、 &lt;code&gt;cbrtd2&lt;/code&gt; 、 &lt;code&gt;cbrtf4&lt;/code&gt; 、 &lt;code&gt;cosd2&lt;/code&gt; 、 &lt;code&gt;cosf4&lt;/code&gt; 、 &lt;code&gt;coshd2&lt;/code&gt; 、 &lt;code&gt;coshf4&lt;/code&gt; を、 &lt;code&gt;erfcd2&lt;/code&gt; 、 &lt;code&gt;erfcf4&lt;/code&gt; 、 &lt;code&gt;erfd2&lt;/code&gt; 、 &lt;code&gt;erff4&lt;/code&gt; 、 &lt;code&gt;exp2d2&lt;/code&gt; 、 &lt;code&gt;exp2f4&lt;/code&gt; 、 &lt;code&gt;expd2&lt;/code&gt; 、 &lt;code&gt;expf4&lt;/code&gt; 、 &lt;code&gt;expm1d2&lt;/code&gt; 、 &lt;code&gt;expm1f4&lt;/code&gt; 、 &lt;code&gt;hypotd2&lt;/code&gt; 、 &lt;code&gt;hypotf4&lt;/code&gt; 、 &lt;code&gt;lgammad2&lt;/code&gt; 、 &lt;code&gt;lgammaf4&lt;/code&gt; 、 &lt;code&gt;log10d2&lt;/code&gt; 、 &lt;code&gt;log10f4&lt;/code&gt; 、 &lt;code&gt;log1pd2&lt;/code&gt; 、 &lt;code&gt;log1pf4&lt;/code&gt; 、 &lt;code&gt;log2d2&lt;/code&gt; 、 &lt;code&gt;log2f4&lt;/code&gt; 、 &lt;code&gt;logd2&lt;/code&gt; 、 &lt;code&gt;logf4&lt;/code&gt; 、 &lt;code&gt;powd2&lt;/code&gt; 、 &lt;code&gt;powf4&lt;/code&gt; 、 &lt;code&gt;sind2&lt;/code&gt; 、 &lt;code&gt;sinf4&lt;/code&gt; 、 &lt;code&gt;sinhd2&lt;/code&gt; 、 &lt;code&gt;sinhf4&lt;/code&gt; 、 &lt;code&gt;sqrtd2&lt;/code&gt; 、 &lt;code&gt;sqrtf4&lt;/code&gt; 、 &lt;code&gt;tand2&lt;/code&gt; 、 &lt;code&gt;tanf4&lt;/code&gt; 、 &lt;code&gt;tanhd2&lt;/code&gt; 、および &lt;code&gt;tanhf4&lt;/code&gt; は、power7のコードを生成する場合に使用します。両方とも</target>
        </trans-unit>
        <trans-unit id="ec52c6c8b68900c9a1b37331cf41ae5885dd6c8c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which specify use of that register as a fixed register, and &amp;lsquo;</source>
          <target state="translated">'、そのレジスタの使用を固定レジスタとして指定し、'</target>
        </trans-unit>
        <trans-unit id="0fa47f8504586e908692f17a17fab12ae381513a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which still allows the compiler to generate code that uses the F and D extensions but only allows floating-point values up to 32 bits long to be passed in registers; or &amp;lsquo;</source>
          <target state="translated">'、これにより、コンパイラはFおよびD拡張を使用するコードを生成できますが、最大32ビット長の浮動小数点値のみをレジスタに渡すことができます。または '</target>
        </trans-unit>
        <trans-unit id="53d99d4b03fe4435b89eadd0e9f6c614ea297088" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, which uses the best available method for the selected processor. The default setting is &amp;lsquo;</source>
          <target state="translated">'、選択したプロセッサに最適な方法を使用します。デフォルト設定は '</target>
        </trans-unit>
        <trans-unit id="2e084164fbfa7bff5a69b7598f6c58a8fcd0c7b2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, without regard to any appended suffix.</source>
          <target state="translated">'、付加されたサフィックスに関係なく。</target>
        </trans-unit>
        <trans-unit id="b27846e206f9ebe9eb4cd3b594b0158dff325fe5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;, without spaces between multiple switches. This is supposed to ease shell processing.</source>
          <target state="translated">'、複数のスイッチ間のスペースなし。これはシェルの処理を容易にするためのものです。</target>
        </trans-unit>
        <trans-unit id="86308658ed645552e296e3e286b374ae7fff10b1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;,&amp;lsquo;</source>
          <target state="translated">&amp;rsquo;,&amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="3525fe92d1fe943317ddfb69e6b92954c6550401" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-newline. The rule has no commands.</source>
          <target state="translated">'-改行。ルールにはコマンドがありません。</target>
        </trans-unit>
        <trans-unit id="7ae559764dfeb5b5e27bbbecfa78f7d761264167" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-prefixed sequences to substitute variable text or to conditionally insert text into the command line. Using these constructs it is possible to generate quite complex command lines.</source>
          <target state="translated">'接頭辞付きのシーケンスは、可変テキストを置換するか、コマンドラインに条件付きでテキストを挿入します。これらの構成を使用すると、非常に複雑なコマンドラインを生成できます。</target>
        </trans-unit>
        <trans-unit id="cc1c5c0d2a49660e4c22ef3e1e1704e0f798a0eb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;-sequences for spec strings. Note that spaces are not generated automatically around the results of expanding these sequences. Therefore you can concatenate them together or combine them with constant text in a single argument.</source>
          <target state="translated">スペック文字列のシーケンス。これらのシーケンスを展開した結果の周囲にスペースが自動的に生成されないことに注意してください。したがって、それらを連結したり、単一の引数で定数テキストと組み合わせたりできます。</target>
        </trans-unit>
        <trans-unit id="4dece5708020cd65d858b4b08e3d8683a52a6a69" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;.</source>
          <target state="translated">&amp;rsquo;.</target>
        </trans-unit>
        <trans-unit id="c07eebce021b49b4fc041471ed4831d6137b2147" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. %{o*} substitutes this text, including the space. Thus two arguments are generated.</source>
          <target state="translated">'。％{o *}は、スペースを含むこのテキストを置き換えます。したがって、2つの引数が生成されます。</target>
        </trans-unit>
        <trans-unit id="5d70589a69d369e7bf4347c7ccd68068ef698e63" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. &amp;lsquo;</source>
          <target state="translated">'。」</target>
        </trans-unit>
        <trans-unit id="bd99174a74b07be99af73cd2272c2a9644b883d1" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. (This is currently a subset of what</source>
          <target state="translated">'。（これは現在、</target>
        </trans-unit>
        <trans-unit id="ebabbca2f175db2d4ffdc366591326dd41543c2b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. &lt;var&gt;SUFFIX&lt;/var&gt; is terminated by the next space or %.</source>
          <target state="translated">'。 &lt;var&gt;SUFFIX&lt;/var&gt; は次のスペースまたは％で終了します。</target>
        </trans-unit>
        <trans-unit id="cb17f136b28af159a54ba2b3c86d8d1f3eca0e5d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. &lt;var&gt;suffix&lt;/var&gt; matches the regexp &amp;lsquo;</source>
          <target state="translated">'。 &lt;var&gt;suffix&lt;/var&gt; は正規表現に一致します '</target>
        </trans-unit>
        <trans-unit id="c2bfbba1f4c17d6ec9876dae8da4ae1e45397993" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. All values of &lt;var&gt;model&lt;/var&gt; have the same meaning as described in</source>
          <target state="translated">'。 &lt;var&gt;model&lt;/var&gt; すべての値は、</target>
        </trans-unit>
        <trans-unit id="26a41e2a6f327d47909ecc0aba5f40c82b05f73e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. As &lt;em&gt;earlyclobber&lt;/em&gt; operands are always written, a read-only &lt;em&gt;earlyclobber&lt;/em&gt; operand is ill-formed and will be rejected by the compiler.</source>
          <target state="translated">'。&lt;em&gt;earlyclobber&lt;/em&gt;オペランドが常に書き込まれ、読み取り専用&lt;em&gt;earlyclobber&lt;/em&gt;オペランド悪い形成されており、コンパイラによって拒否されます。</target>
        </trans-unit>
        <trans-unit id="c0112416480771c639f69f4bcd6e44161edeb27a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Aside from that, you can use any other GCC options; but if you want to prove that every single line in your program was executed, you should not compile with optimization at the same time. On some machines the optimizer can eliminate some simple code lines by combining them with other lines. For example, code like this:</source>
          <target state="translated">'。それ以外に、他のGCCオプションを使用できます。ただし、プログラムのすべての行が実行されたことを証明したい場合は、同時に最適化を行ってコンパイルしないでください。一部のマシンでは、オプティマイザーはいくつかの単純なコード行を他の行と結合することによって排除できます。たとえば、次のようなコード：</target>
        </trans-unit>
        <trans-unit id="34668a2e06b3aadb0dbe019b921c38fc3dbab69b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Backup copies of inline member functions, debugging information, and the internal tables used to implement virtual functions are all generated in implementation files.</source>
          <target state="translated">'。インラインメンバー関数のバックアップコピー、デバッグ情報、および仮想関数の実装に使用される内部テーブルは、すべて実装ファイルに生成されます。</target>
        </trans-unit>
        <trans-unit id="ef3f97180bfe2b9e9474f1ef401797f93dc9d108" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. ColdFire architectures are selected according to Freescale&amp;rsquo;s ISA classification and the permissible values are: &amp;lsquo;</source>
          <target state="translated">'。ColdFireアーキテクチャは、FreescaleのISA分類に従って選択され、許容値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ce9fac1370b0628735cce987d97cf16c0ec23915" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Darwin does not support &amp;lsquo;</source>
          <target state="translated">'。ダーウィンはサポートしていません '</target>
        </trans-unit>
        <trans-unit id="304963760b615451b9e20b8f3c78adabebe60bcb" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Defaults to whatever limit is imposed by the version of the Linux kernel targeted.</source>
          <target state="translated">'。デフォルトでは、対象となるLinuxカーネルのバージョンによって課せられる制限があります。</target>
        </trans-unit>
        <trans-unit id="144515adfb3f2fe5defdce77d168399c9e3984b2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Disables the floating-point and SIMD instructions on &amp;lsquo;</source>
          <target state="translated">'。'の浮動小数点およびSIMD命令を無効にします</target>
        </trans-unit>
        <trans-unit id="7f011d7b5d4cc55f295dd9f02d73db5853869155" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. For example,</source>
          <target state="translated">'。例えば、</target>
        </trans-unit>
        <trans-unit id="fb7234b5dfd962028dcfee17fd1c40d6becee595" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. GCC recognizes files with these names and compiles them as C++ programs even if you call the compiler the same way as for compiling C programs (usually with the name &lt;code&gt;gcc&lt;/code&gt;).</source>
          <target state="translated">'。GCCはこれらの名前のファイルを認識し、Cプログラムのコンパイルと同じ方法（通常は &lt;code&gt;gcc&lt;/code&gt; という名前）でコンパイラーを呼び出しても、それらをC ++プログラムとしてコンパイルします。</target>
        </trans-unit>
        <trans-unit id="f3dbb764224c436ae5269f0b14a98e9ab5220599" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. GCC, following the ISO standard, does not allow this.</source>
          <target state="translated">'。ISO規格に準拠しているGCCでは、これは許可されていません。</target>
        </trans-unit>
        <trans-unit id="08bff4931e5584bd604b402499372284b96ce5ff" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If &lt;code&gt;%*&lt;/code&gt; appears in &lt;code&gt;X&lt;/code&gt;, all of the alternatives must be starred, and only the first matching alternative is substituted.</source>
          <target state="translated">'。 &lt;code&gt;X&lt;/code&gt; に &lt;code&gt;%*&lt;/code&gt; が表示される場合、すべての選択肢にスターを付ける必要があり、最初に一致した選択肢のみが置換されます。</target>
        </trans-unit>
        <trans-unit id="6e7d68d3cf1754b449dca6cd9f416805cacc80a2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If a function is named that is not built-in in this version of GCC, this option is ignored. There is no corresponding</source>
          <target state="translated">'。このバージョンのGCCに組み込まれていない関数に名前が付けられている場合、このオプションは無視されます。対応するものがありません</target>
        </trans-unit>
        <trans-unit id="d4266bea6ec9a1e6780e56907ca8d131f13801c3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. If instead you write</source>
          <target state="translated">'。代わりにあなたが書くなら</target>
        </trans-unit>
        <trans-unit id="b591f0ca58fd0c9f6c02aaebea340ca453078cbf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In C++, the mangled name for the target must be used. It is an error if &amp;lsquo;</source>
          <target state="translated">'。C ++では、ターゲットのマングル名を使用する必要があります。次の場合はエラーです '</target>
        </trans-unit>
        <trans-unit id="b088c9c98ee027b033a647cf3092141c87b2c30d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In the case of &amp;lsquo;</source>
          <target state="translated">'。の場合 '</target>
        </trans-unit>
        <trans-unit id="9036ed5683fc147515f005ff7457f833667588ae" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. In the past, the system header files on many systems did not actually declare &lt;code&gt;time&lt;/code&gt;, so it did not matter what type your program declared it to return. But in systems with ISO C headers, &lt;code&gt;time&lt;/code&gt; is declared to return &lt;code&gt;time_t&lt;/code&gt;, and if that is not the same as &lt;code&gt;long&lt;/code&gt;, then &amp;lsquo;</source>
          <target state="translated">'。これまで、多くのシステムのシステムヘッダーファイルは実際には &lt;code&gt;time&lt;/code&gt; を宣言していなかったため、プログラムがそれを返すと宣言したタイプは関係ありませんでした。しかし、ISO Cヘッダーのあるシステムでは、 &lt;code&gt;time&lt;/code&gt; は &lt;code&gt;time_t&lt;/code&gt; を返すように宣言されており、それが &lt;code&gt;long&lt;/code&gt; と同じでない場合は、 '</target>
        </trans-unit>
        <trans-unit id="71de86373b2c95a3f4d64f72180d98333b9c245b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. It is used to define &lt;code&gt;struct foo&lt;/code&gt; in such a way that &lt;code&gt;struct foo&lt;/code&gt; has the same layout and the structure field &lt;code&gt;x&lt;/code&gt; has the same alignment when &lt;code&gt;__u64&lt;/code&gt; is aligned at either 4 or 8 bytes. Align &lt;code&gt;struct foo&lt;/code&gt; to 8 bytes:</source>
          <target state="translated">'。これは、 &lt;code&gt;__u64&lt;/code&gt; が4バイトまたは8バイトのいずれかに整列されている場合、 &lt;code&gt;struct foo&lt;/code&gt; が同じレイアウトを持ち、構造体フィールド &lt;code&gt;x&lt;/code&gt; が同じ整列になるように、 &lt;code&gt;struct foo&lt;/code&gt; を定義するために使用されます。 &lt;code&gt;struct foo&lt;/code&gt; を8バイトに整列します。</target>
        </trans-unit>
        <trans-unit id="5b7b69fb74833b9999f7b2578bf27a179fd441fc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Likewise, &amp;lsquo;</source>
          <target state="translated">'。同様に、 '</target>
        </trans-unit>
        <trans-unit id="b25ae87870095d116e612875bacad3ca68d7deb7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Not available for ARC EM.</source>
          <target state="translated">'。ARC EMでは使用できません。</target>
        </trans-unit>
        <trans-unit id="f5033799763d08b021660d520078ce1d7313d968" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that &amp;lsquo;</source>
          <target state="translated">'。ご了承ください '</target>
        </trans-unit>
        <trans-unit id="318b20bba0b9b6136cc75e83b5151d88416e904c" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that only unnamed structs and unions are allowed, you may not have, for example, an unnamed &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">'。名前のない構造体と共用体のみが許可されていることに注意してください。たとえば、名前のない &lt;code&gt;int&lt;/code&gt; は使用できない場合があります。</target>
        </trans-unit>
        <trans-unit id="c2efd7a1f09ee927b7431e335115931670665373" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Note that the choice is subject to optimization: the compiler may use a more efficient model for symbols not visible outside of the translation unit, or if</source>
          <target state="translated">'。選択は最適化の対象となることに注意してください。コンパイラーは、翻訳単位の外に表示されないシンボルに対してより効率的なモデルを使用する場合があります。</target>
        </trans-unit>
        <trans-unit id="6d84fd44705faa919710e5a5a567c03be82e4e5e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Pedantic warnings are also disabled in the expression that follows &lt;code&gt;__extension__&lt;/code&gt;. However, only system header files should use these escape routes; application programs should avoid them. See &lt;a href=&quot;alternate-keywords#Alternate-Keywords&quot;&gt;Alternate Keywords&lt;/a&gt;.</source>
          <target state="translated">'。 &lt;code&gt;__extension__&lt;/code&gt; に続く式では、警告の警告も無効になります。ただし、システムヘッダーファイルのみがこれらのエスケープルートを使用する必要があります。アプリケーションプログラムはそれらを避けるべきです。&lt;a href=&quot;alternate-keywords#Alternate-Keywords&quot;&gt;代替キーワードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d106126450d402defd32926b6a07b8058193e8cd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Previously, &amp;lsquo;</source>
          <target state="translated">'。以前は、 '</target>
        </trans-unit>
        <trans-unit id="91fec6793e91142970cbc2f94e0e2d931265d9a7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Refer to</source>
          <target state="translated">'。参照する</target>
        </trans-unit>
        <trans-unit id="1311df9de660e63cadb852066da316d261298d24" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. See &lt;a href=&quot;environment-variables#Environment-Variables&quot;&gt;Environment Variables&lt;/a&gt;.</source>
          <target state="translated">'。&lt;a href=&quot;environment-variables#Environment-Variables&quot;&gt;環境変数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="aaf91ece2d881a3cd32c835822bcb56d2ad0243e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Some calling conventions are impossible to implement on some ISAs: for example, &amp;lsquo;</source>
          <target state="translated">'。一部の呼び出し規約は、一部のISAで実装することが不可能です。たとえば、 '</target>
        </trans-unit>
        <trans-unit id="a190d1fbd8df2eaeb97bf8dfebcec6e9fb64c0b2" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Specifying &amp;lsquo;</source>
          <target state="translated">'。'の指定</target>
        </trans-unit>
        <trans-unit id="b517fa930eabc5143e6a2488d57edbae11688ae8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. Such a setting will name the data file</source>
          <target state="translated">'。このような設定により、データファイルに名前が付けられます</target>
        </trans-unit>
        <trans-unit id="fd1611dd4569a88af914da509268caa5134b1296" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The &amp;lsquo;</source>
          <target state="translated">'。「</target>
        </trans-unit>
        <trans-unit id="95987fef4e179da34ae695b2d604db02e1ef2507" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The ColdFire &lt;var&gt;cpu&lt;/var&gt;s are given by the table below, which also classifies the CPUs into families:</source>
          <target state="translated">'。ColdFire &lt;var&gt;cpu&lt;/var&gt; は、CPUをファミリーに分類する次の表に示されています。</target>
        </trans-unit>
        <trans-unit id="39f26c85467bca2a86cf187cdaa1f82a92dd500b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The ColdFire microarchitectures are: &amp;lsquo;</source>
          <target state="translated">'。ColdFireマイクロアーキテクチャは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1ea24288b4005507fd45c41a5bb5599705b6e6fd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The compiler also issues a warning, like &amp;lsquo;</source>
          <target state="translated">'。コンパイラは、 'のような警告も発行します</target>
        </trans-unit>
        <trans-unit id="c67138f86f8bd3b4491ad0910cc95a4fc7e9b819" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The compiler gives errors for such constructs.</source>
          <target state="translated">'。コンパイラーは、このような構成体に対してエラーを出します。</target>
        </trans-unit>
        <trans-unit id="0726de9452e52fbfdda6ff6a4218547b363e917e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The default ISA is sm_30.</source>
          <target state="translated">'。デフォルトのISAはsm_30です。</target>
        </trans-unit>
        <trans-unit id="984545af201446c7e2041d27d40b9dfbdfc1d480" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The default cache size is 64KB.</source>
          <target state="translated">'。デフォルトのキャッシュサイズは64KBです。</target>
        </trans-unit>
        <trans-unit id="c5f007e66a67a47ccee24c846b7d52a755cea4ae" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The default depends on how the compiler has been configured, it can be any of the above &lt;var&gt;WHEN&lt;/var&gt; options or also &amp;lsquo;</source>
          <target state="translated">'。デフォルトは、コンパイラーの構成方法によって異なり、上記の &lt;var&gt;WHEN&lt;/var&gt; オプションのいずれか、または '</target>
        </trans-unit>
        <trans-unit id="99f888b01addeed94f74efc8a92fbac99be06433" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The default if</source>
          <target state="translated">'。デフォルトの場合</target>
        </trans-unit>
        <trans-unit id="ea0c5ec8fd22ea6fee202ca6916c9e682ee6e7fd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The default is &amp;lsquo;</source>
          <target state="translated">'。デフォルトは '</target>
        </trans-unit>
        <trans-unit id="d0e259ad7b9cda818e8d39201ed478f72bec6ec5" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The first one is useful for single-threaded applications, while the second one prevents profile corruption by emitting thread-safe code.</source>
          <target state="translated">'。1つ目はシングルスレッドアプリケーションに役立ち、2つ目はスレッドセーフコードを発行することでプロファイルの破損を防ぎます。</target>
        </trans-unit>
        <trans-unit id="3a7b6db71fd3de95568e7e8bb18be320b22766cf" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The label must still be listed in the &lt;var&gt;GotoLabels&lt;/var&gt; section when using this approach.</source>
          <target state="translated">'。このアプローチを使用する場合、ラベルは引き続き &lt;var&gt;GotoLabels&lt;/var&gt; セクションにリストされている必要があります。</target>
        </trans-unit>
        <trans-unit id="509f5bcf7e8400bc0491d4aeedccc1df5fdbcc82" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The meanings are the same as for the extensions to</source>
          <target state="translated">'。意味は、拡張機能と同じです</target>
        </trans-unit>
        <trans-unit id="a50a8e414947d71b3be5444f7bfdf7f9c5a0d74e" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The option is needed when the program extends the lifetime of a scoped local variable or a compiler generated temporary beyond the end point defined by the language. When a lifetime of a variable ends, and if the variable lives in memory, the optimizing compiler has the freedom to reuse its stack space with other temporaries or scoped local variables whose live range does not overlap with it. Legacy code extending local lifetime is likely to break with the stack reuse optimization.</source>
          <target state="translated">'。このオプションは、プログラムがスコープ付きローカル変数の有効期間を延長する場合、または言語によって定義されたエンドポイントを超えて一時的に生成されるコンパイラーを延長する場合に必要です。変数の存続期間が終了し、変数がメモリに存在する場合、最適化コンパイラは、そのライブレンジが重複しない他の一時変数またはスコープ付きローカル変数でスタックスペースを自由に再利用できます。ローカルライフタイムを拡張するレガシーコードは、スタックの再利用の最適化によって機能しなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="68e76650fa4e064c904802723a282ea409b1c512" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The processor names are: &amp;lsquo;</source>
          <target state="translated">'。プロセッサ名は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0c7ab966964d35b1d65d62764fbde6b02ce185c3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The special value &amp;lsquo;</source>
          <target state="translated">'。特別な値 '</target>
        </trans-unit>
        <trans-unit id="ec1d5e9115273904b0d4e3217c9f9dadfb94a592" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. The value has type &lt;code&gt;void *&lt;/code&gt;. This value is a constant and can be used wherever a constant of that type is valid. For example:</source>
          <target state="translated">'。値のタイプは &lt;code&gt;void *&lt;/code&gt; です。この値は定数であり、その型の定数が有効な場合はいつでも使用できます。例えば：</target>
        </trans-unit>
        <trans-unit id="0a49ed6249ec64656dcc28e26855c09a1e70be82" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. These are the extensions that GCC uses for preprocessed files created by</source>
          <target state="translated">'。これらは、GCCが作成した前処理ファイルに使用する拡張機能です。</target>
        </trans-unit>
        <trans-unit id="c340165ed2781f436e620f363d28887620b552e8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. These can be used to improve optimization. Currently, they are only used in one place: in</source>
          <target state="translated">'。これらは、最適化を改善するために使用できます。現在、これらは1つの場所でのみ使用されています。</target>
        </trans-unit>
        <trans-unit id="dec7afd4e22e1a878b5801fe3dd26c8ed698f764" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This alternate format can also be used to disable warnings for non-ISO &amp;lsquo;</source>
          <target state="translated">'。この代替形式は、非ISOの警告を無効にするためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="80fa6be15a7162a6632d31e099a63ea1a1b003cc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This in turn is used by the</source>
          <target state="translated">'。これは順番に</target>
        </trans-unit>
        <trans-unit id="60a420a1dc9c2b1ba63eb51ebb8e08cd0a754a3a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This is a GNU extension. For example,</source>
          <target state="translated">'。これはGNU拡張機能です。例えば、</target>
        </trans-unit>
        <trans-unit id="877bd31f7e2057375c174895bb473eb44a99c3aa" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This is particularly useful in environments that operate a lot on the bit level (like microcontrollers).</source>
          <target state="translated">'。これは、ビットレベルで多く動作する環境（マイクロコントローラーなど）で特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="d54f292cb6286085f0e53e7d45c832d8af478541" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This is useful if sourcefiles are in several different directories.</source>
          <target state="translated">'。これは、ソースファイルがいくつかの異なるディレクトリにある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="dea282d75128e2e55025b832d35cd242bed89773" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This option has been deprecated by -mbranch-protection.</source>
          <target state="translated">'。このオプションは、-mbranch-protectionによって非推奨になりました。</target>
        </trans-unit>
        <trans-unit id="7480b51fde68ea2f5ca5289f9811faf70d22a0f8" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This option is deprecated. The</source>
          <target state="translated">'。このオプションは非推奨です。の</target>
        </trans-unit>
        <trans-unit id="ef37fc6184ad856cae988d5c0a2b60736e5c1c04" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This option is only available on the 64-bit HP-UX GCC, i.e. configured with &amp;lsquo;</source>
          <target state="translated">'。このオプションは、64ビットHP-UX GCCでのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="78af1a2b0f317b8f65a1549c2905f6cec65ef3c4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This tells the compiler to generate additional information needed by gcov (basically a flow graph of the program) and also includes additional code in the object files for generating the extra profiling information needed by gcov. These additional files are placed in the directory where the object file is located.</source>
          <target state="translated">'。これにより、gcovが必要とする追加情報（基本的にはプログラムのフローグラフ）を生成するようコンパイラーに指示し、gcovが必要とする追加のプロファイリング情報を生成するための追加コードをオブジェクトファイルに含めます。これらの追加ファイルは、オブジェクトファイルが配置されているディレクトリに配置されます。</target>
        </trans-unit>
        <trans-unit id="f5ae572b044573aa8167cfdeb5660a51ca4f5cf3" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. This temporary file is not meant for communication between processes, but rather as a junk disposal mechanism.</source>
          <target state="translated">'。この一時ファイルは、プロセス間の通信用ではなく、ジャンク処理メカニズムとして使用されます。</target>
        </trans-unit>
        <trans-unit id="de80f6d77c61c199645e26590cde27dc448403bc" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. To maintain the whole program optimization it is recommended to link such objects into static library instead. Alternatively it is possible to use H.J. Lu&amp;rsquo;s binutils with support for mixed objects.</source>
          <target state="translated">'。プログラム全体の最適化を維持するには、そのようなオブジェクトを静的ライブラリにリンクすることをお勧めします。または、HJ Luのbinutilsを使用して、混合オブジェクトをサポートすることもできます。</target>
        </trans-unit>
        <trans-unit id="77937230a26fa8ae2a22ced99526bf9ec39b1459" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. To maintain whole program optimization, it is recommended to link such objects into static library instead. Alternatively it is possible to use H.J. Lu&amp;rsquo;s binutils with support for mixed objects.</source>
          <target state="translated">'。プログラム全体の最適化を維持するには、代わりにそのようなオブジェクトを静的ライブラリにリンクすることをお勧めします。あるいは、混合オブジェクトをサポートするHJLuのbinutilsを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="f0d05b6029dd2a7b939fe9201df9c734ba3996a7" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. To reduce exposure to denial-of-service attacks, the file name is now chosen in a way that is hard to predict even when previously chosen file names are known. For example, &amp;lsquo;</source>
          <target state="translated">'。サービス拒否攻撃の危険性を減らすために、以前に選択したファイル名がわかっている場合でも、ファイル名が予測しにくい方法で選択されるようになりました。例えば、 '</target>
        </trans-unit>
        <trans-unit id="10bcdbe30a9c3f088aa63dfc7f0c5f6692a7ef56" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. To resolve this you either need to put</source>
          <target state="translated">'。これを解決するには、</target>
        </trans-unit>
        <trans-unit id="95c6715f73aa5d0af712fb6134880b9fcbd79120" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. When a base standard is specified, the compiler accepts all programs following that standard plus those using GNU extensions that do not contradict it. For example,</source>
          <target state="translated">'。基本標準が指定されている場合、コンパイラーは、その標準に準拠するすべてのプログラムと、GNU拡張機能を使用して矛盾しないプログラムを受け入れます。例えば、</target>
        </trans-unit>
        <trans-unit id="d141ae557c3ffdb3753a6a41a13d3a2b084753bd" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. When you list more than one possible location (for example, &amp;lsquo;</source>
          <target state="translated">'。複数の可能な場所をリストする場合（たとえば、 '</target>
        </trans-unit>
        <trans-unit id="83fe51260eb75dd9c72893e7b9b2fb9495d8b24d" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. While &amp;lsquo;</source>
          <target state="translated">'。ながら '</target>
        </trans-unit>
        <trans-unit id="99b60c3edd35097ae5312da98dd3e4613c5c59db" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. With native Solaris and GNU/Linux toolchains, &amp;lsquo;</source>
          <target state="translated">'。ネイティブSolarisおよびGNU / Linuxツールチェーンを使用すると、 '</target>
        </trans-unit>
        <trans-unit id="1fa61258c1cd78b2c137d2dd13766886720e3936" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;. With the &amp;lsquo;</source>
          <target state="translated">'。とともに '</target>
        </trans-unit>
        <trans-unit id="f3dc366f61d8fabb2ad615ae2f691b7fc061f609" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;/&amp;lsquo;</source>
          <target state="translated">&amp;rsquo;/&amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="156309a7b165cae2860384c8bd41ff8b92b091f4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;:</source>
          <target state="translated">&amp;rsquo;:</target>
        </trans-unit>
        <trans-unit id="1eb8135cc50a6d10a9fd22ec9ddc97deda072b07" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;: these extensions disable the specified option and any other extensions that may depend on the presence of that extension.</source>
          <target state="translated">'：これらの拡張機能は、指定されたオプションと、その拡張機能の存在に依存する可能性があるその他の拡張機能を無効にします。</target>
        </trans-unit>
        <trans-unit id="10548d28e15289950fa348ee543ccdceadc64c48" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; &amp;lsquo;</source>
          <target state="translated">'; 」</target>
        </trans-unit>
        <trans-unit id="d056957801202f4b885351da27e86f96b001e71b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; C++ header files often use &amp;lsquo;</source>
          <target state="translated">'; C ++ヘッダーファイルでは、しばしば「</target>
        </trans-unit>
        <trans-unit id="14a65bdd12d63f7386ba288ffd05e53d2b1b3353" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; and any setting of</source>
          <target state="translated">'; と任意の設定</target>
        </trans-unit>
        <trans-unit id="879ada406a8ceb853c0f4a2d334e5423ad141c4b" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; and preprocessed C++ files use the suffix &amp;lsquo;</source>
          <target state="translated">'; および前処理されたC ++ファイルはサフィックス「</target>
        </trans-unit>
        <trans-unit id="779783ef739406f991e6471784da6ce1c3d86b00" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; the default is &amp;lsquo;</source>
          <target state="translated">'; デフォルトは '</target>
        </trans-unit>
        <trans-unit id="8e4fbe0f7061332ebc6307b11d6557e735e43959" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;; with</source>
          <target state="translated">'; と</target>
        </trans-unit>
        <trans-unit id="532b1a64c747914b89bd10f272d06140e5c954e4" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;? Sometimes it allows better code to be generated.</source>
          <target state="translated">'？時にはそれはより良いコードを生成することを可能にします。</target>
        </trans-unit>
        <trans-unit id="026366245e3ea8296dbdd0b1b6034424cc1ac47a" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;](&amp;lsquo;</source>
          <target state="translated">&amp;rsquo;](&amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="60b0b92b2462673ed5f8cdc4eda20e78b1b728aa" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;][&amp;lsquo;</source>
          <target state="translated">&amp;rsquo;][&amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="1de782ae7763bac352b0e9b09d14d7a9ac06ff61" translate="yes" xml:space="preserve">
          <source>&amp;rsquo;|&amp;lsquo;</source>
          <target state="translated">&amp;rsquo;|&amp;lsquo;</target>
        </trans-unit>
        <trans-unit id="eb6294d9bae2e5ca823e84066b30abc5ef143039" translate="yes" xml:space="preserve">
          <source>'??/n'</source>
          <target state="translated">'??/n'</target>
        </trans-unit>
        <trans-unit id="4262b9cfb91c51cbf3f44b62fe2a7b81e2676c78" translate="yes" xml:space="preserve">
          <source>'FOOF'</source>
          <target state="translated">'FOOF'</target>
        </trans-unit>
        <trans-unit id="caa61a56c1bf4b89298cbbce30e9181117ce2f54" translate="yes" xml:space="preserve">
          <source>(C++ only) A base class is not initialized in the copy constructor of a derived class.</source>
          <target state="translated">（C ++のみ）基本クラスは、派生クラスのコピーコンストラクターでは初期化されません。</target>
        </trans-unit>
        <trans-unit id="ee2291a0563b01ff7fdfe4e8efa7650f8a5b537a" translate="yes" xml:space="preserve">
          <source>(C++ only) Ambiguous virtual bases.</source>
          <target state="translated">（C ++のみ）あいまいな仮想ベース。</target>
        </trans-unit>
        <trans-unit id="dc6745c9fc96f11cdd3ca8018b2f16a7465a02cc" translate="yes" xml:space="preserve">
          <source>(C++ only) An enumerator and a non-enumerator both appear in a conditional expression.</source>
          <target state="translated">（C ++のみ）列挙子と非列挙子の両方が条件式に含まれています。</target>
        </trans-unit>
        <trans-unit id="3c9a648042433eeec71305942c0962bdaedafbb1" translate="yes" xml:space="preserve">
          <source>(C++ only) Subscripting an array that has been declared &lt;code&gt;register&lt;/code&gt;.</source>
          <target state="translated">（C ++のみ） &lt;code&gt;register&lt;/code&gt; と宣言された配列の添え字。</target>
        </trans-unit>
        <trans-unit id="68eedac95edd544dcb28cc6aa2281a183f6f6c6a" translate="yes" xml:space="preserve">
          <source>(C++ only) Taking the address of a variable that has been declared &lt;code&gt;register&lt;/code&gt;.</source>
          <target state="translated">（C ++のみ） &lt;code&gt;register&lt;/code&gt; と宣言された変数のアドレスを取得します。</target>
        </trans-unit>
        <trans-unit id="daf861b43184d4153abb4df39cb8f7fd94eb561a" translate="yes" xml:space="preserve">
          <source>(C, Objective-C, C++, Objective-C++ and Fortran only)</source>
          <target state="translated">（C、Objective-C、C ++、Objective-C ++およびFortranのみ）</target>
        </trans-unit>
        <trans-unit id="21db10e7de0666b2de0a1712ee60910e4a7b42d5" translate="yes" xml:space="preserve">
          <source>(C, Objective-C, C++, Objective-C++ and Fortran only)   Suppress warning messages emitted by &lt;code id=&quot;index-Wcpp&quot;&gt;#warning&lt;/code&gt; directives.</source>
          <target state="translated">（C、Objective-C、C ++、Objective-C ++、Fortranのみ） &lt;code id=&quot;index-Wcpp&quot;&gt;#warning&lt;/code&gt; ディレクティブによって発行される警告メッセージを抑制します。</target>
        </trans-unit>
        <trans-unit id="2df280ab593af30434215cb8468898676012fc21" translate="yes" xml:space="preserve">
          <source>(Dis/En)able control speculative scheduling. This feature is available only during region scheduling (i.e. before reload). This results in generation of the &lt;code&gt;ld.s&lt;/code&gt; instructions and the corresponding check instructions &lt;code&gt;chk.s&lt;/code&gt;. The default setting is disabled.</source>
          <target state="translated">（Dis / En）制御可能な投機的スケジューリング。この機能は、領域のスケジューリング中（つまり、リロード前）にのみ使用できます。これにより、 &lt;code&gt;ld.s&lt;/code&gt; 命令と対応するチェック命令 &lt;code&gt;chk.s&lt;/code&gt; が生成されます。デフォルト設定は無効です。</target>
        </trans-unit>
        <trans-unit id="9221df4a228447987ae95de2115c69067f514593" translate="yes" xml:space="preserve">
          <source>(Dis/En)able data speculative scheduling before reload. This results in generation of &lt;code&gt;ld.a&lt;/code&gt; instructions and the corresponding check instructions (&lt;code&gt;ld.c&lt;/code&gt; / &lt;code&gt;chk.a&lt;/code&gt;). The default setting is disabled.</source>
          <target state="translated">（Dis / En）リロード前のデータ投機的スケジューリング。これにより、 &lt;code&gt;ld.a&lt;/code&gt; 命令と対応するチェック命令（ &lt;code&gt;ld.c&lt;/code&gt; / &lt;code&gt;chk.a&lt;/code&gt; ）が生成されます。デフォルト設定は無効です。</target>
        </trans-unit>
        <trans-unit id="bb4563f137d6532d80529c92294b38b94e3d50f0" translate="yes" xml:space="preserve">
          <source>(En/Dis)able data speculative scheduling after reload. This results in generation of &lt;code&gt;ld.a&lt;/code&gt; instructions and the corresponding check instructions (&lt;code&gt;ld.c&lt;/code&gt; / &lt;code&gt;chk.a&lt;/code&gt;). The default setting is enabled.</source>
          <target state="translated">（En / Dis）リロード後のデータ投機的スケジューリング。これにより、 &lt;code&gt;ld.a&lt;/code&gt; 命令と対応するチェック命令（ &lt;code&gt;ld.c&lt;/code&gt; / &lt;code&gt;chk.a&lt;/code&gt; ）が生成されます。デフォルト設定は有効です。</target>
        </trans-unit>
        <trans-unit id="9b5d3dd642fecc8c54f3574ae7e4eca939a0223d" translate="yes" xml:space="preserve">
          <source>(En/Dis)able speculative scheduling of the instructions that are dependent on the control speculative loads. This is effective only with</source>
          <target state="translated">（En / Dis）制御の投機的ロードに依存する命令の投機的スケジューリング。これは、</target>
        </trans-unit>
        <trans-unit id="6e24e206b19deaa607df74a2a03c88ca434715e8" translate="yes" xml:space="preserve">
          <source>(En/Dis)able speculative scheduling of the instructions that are dependent on the data speculative loads after reload. This is effective only with</source>
          <target state="translated">（En / Dis）リロード後のデータ投機的ロードに依存する命令の投機的スケジューリング。これは、</target>
        </trans-unit>
        <trans-unit id="9ed5d4687734c1c08a3521f633f36f3d8b047751" translate="yes" xml:space="preserve">
          <source>(En/Dis)able speculative scheduling of the instructions that are dependent on the data speculative loads before reload. This is effective only with</source>
          <target state="translated">（En / Dis）リロード前のデータ投機的ロードに依存する命令の投機的スケジューリング。これは、</target>
        </trans-unit>
        <trans-unit id="f65f29a10482b00bc5d910c9f1c1ebf21261bfb6" translate="yes" xml:space="preserve">
          <source>(NOTE: This manual does not describe the Objective-C and Objective-C++ languages themselves. See &lt;a href=&quot;standards#Standards&quot;&gt;Language Standards Supported by GCC&lt;/a&gt;, for references.)</source>
          <target state="translated">（注：このマニュアルでは、Objective-CおよびObjective-C ++言語自体については説明していません。参照については&lt;a href=&quot;standards#Standards&quot;&gt;、GCC&lt;/a&gt;でサポートされている言語標準を参照してください。）</target>
        </trans-unit>
        <trans-unit id="255cb0de41656d1d88145ac9a013fc923a373d29" translate="yes" xml:space="preserve">
          <source>(Of course, users strongly concerned about portability should indicate explicitly in each bit-field whether it is signed or not. In this way, they write programs which have the same meaning in both C dialects.)</source>
          <target state="translated">（もちろん、移植性を強く懸念するユーザーは、署名されているかどうかを各ビットフィールドで明示的に示す必要があります。このようにして、両方のC方言で同じ意味を持つプログラムを記述します。）</target>
        </trans-unit>
        <trans-unit id="8f6b7736e459a50ee7bbeb56f3d58bf288b8bded" translate="yes" xml:space="preserve">
          <source>(a) The FSF&amp;rsquo;s Front-Cover Text is:</source>
          <target state="translated">（a）FSFのフロントカバーテキストは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="2e75bfc57ae0ab8bcba864cc9d8834305f57fa0d" translate="yes" xml:space="preserve">
          <source>(although &lt;code&gt;inline&lt;/code&gt; can be used in a program compiled with</source>
          <target state="translated">（ &lt;code&gt;inline&lt;/code&gt; コンパイルされたプログラムで使用できますが</target>
        </trans-unit>
        <trans-unit id="d32ccfc33694fd3b9b08e15cd17089eb0baac7ce" translate="yes" xml:space="preserve">
          <source>(and</source>
          <target state="translated">(and</target>
        </trans-unit>
        <trans-unit id="e7c1e631efc5e951a858a5546de3f08168476af8" translate="yes" xml:space="preserve">
          <source>(and its suboptions except for</source>
          <target state="translated">（およびそのサブオプションを除く</target>
        </trans-unit>
        <trans-unit id="cf05f29eaa82449ea9aa6a568e24067dd4305c19" translate="yes" xml:space="preserve">
          <source>(b) The FSF&amp;rsquo;s Back-Cover Text is:</source>
          <target state="translated">（b）FSFのバックカバーテキストは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7c5c07cd3e0584e5f83e6eca859aaee8270b6f9f" translate="yes" xml:space="preserve">
          <source>(equivalent to</source>
          <target state="translated">（に相当</target>
        </trans-unit>
        <trans-unit id="6fe1e95fb4f3ef08fb68e78f655aad948380249c" translate="yes" xml:space="preserve">
          <source>(for C++11 with GNU extensions), or</source>
          <target state="translated">（GNU拡張を備えたC ++ 11の場合）、または</target>
        </trans-unit>
        <trans-unit id="6749511020de741ea49c56137cabe2321f62325a" translate="yes" xml:space="preserve">
          <source>(for C++14 with GNU extensions), or</source>
          <target state="translated">（GNU拡張機能を備えたC ++ 14の場合）、または</target>
        </trans-unit>
        <trans-unit id="347f5b597e85d7cf2b587972a2d1be7fc90d299d" translate="yes" xml:space="preserve">
          <source>(for C++17 with GNU extensions).</source>
          <target state="translated">（GNU拡張を備えたC ++ 17の場合）。</target>
        </trans-unit>
        <trans-unit id="fddd4e75314207e7b4d93d5aeca459aee1caa67b" translate="yes" xml:space="preserve">
          <source>(for C++98 with GNU extensions), or</source>
          <target state="translated">（GNU拡張機能を備えたC ++ 98の場合）、または</target>
        </trans-unit>
        <trans-unit id="acd73cb6eb7c3001e16e7f350d58f1e37fd35077" translate="yes" xml:space="preserve">
          <source>(for C11 with GNU extensions).</source>
          <target state="translated">（GNU拡張を備えたC11の場合）。</target>
        </trans-unit>
        <trans-unit id="0d304bbeefe2e485104adfe1c8dd44203659ea72" translate="yes" xml:space="preserve">
          <source>(for C90 with GNU extensions),</source>
          <target state="translated">（GNU拡張機能を備えたC90の場合）、</target>
        </trans-unit>
        <trans-unit id="bb0092b8683dbd00186e0dece89ae6c032549670" translate="yes" xml:space="preserve">
          <source>(for C99 with GNU extensions) or</source>
          <target state="translated">（GNU拡張機能を備えたC99の場合）または</target>
        </trans-unit>
        <trans-unit id="945ebd24fda58f96cbbedd3f15dfad1eeef3b869" translate="yes" xml:space="preserve">
          <source>(included in</source>
          <target state="translated">（に含まれる</target>
        </trans-unit>
        <trans-unit id="5272e337f576fd3bc809f60d0191a6671ae86a93" translate="yes" xml:space="preserve">
          <source>(long &lt;var&gt;exp&lt;/var&gt;, long &lt;var&gt;c&lt;/var&gt;, double &lt;var&gt;probability&lt;/var&gt;)</source>
          <target state="translated">（長い &lt;var&gt;exp&lt;/var&gt; 、長い &lt;var&gt;c&lt;/var&gt; 、二重 &lt;var&gt;probability&lt;/var&gt; ）</target>
        </trans-unit>
        <trans-unit id="dfc8504e187c996290246ad495a2cf2c1a3b31b8" translate="yes" xml:space="preserve">
          <source>(made from &lt;code&gt;COMPILER_PATH&lt;/code&gt; and</source>
          <target state="translated">（ &lt;code&gt;COMPILER_PATH&lt;/code&gt; と</target>
        </trans-unit>
        <trans-unit id="e6745aa693d17e821abd67ed4aeeb14aefa9e2c8" translate="yes" xml:space="preserve">
          <source>(made from &lt;code&gt;GCC_EXEC_PREFIX&lt;/code&gt;),</source>
          <target state="translated">（ &lt;code&gt;GCC_EXEC_PREFIX&lt;/code&gt; から作成）、</target>
        </trans-unit>
        <trans-unit id="682280673e3fef822f44e59e9eab0b6b94a02145" translate="yes" xml:space="preserve">
          <source>(made from &lt;code&gt;TARGET_SYSTEM_ROOT&lt;/code&gt;),</source>
          <target state="translated">（ &lt;code&gt;TARGET_SYSTEM_ROOT&lt;/code&gt; から作成）、</target>
        </trans-unit>
        <trans-unit id="519f5cd783a31489bdabb22db2101a6aba0c69bb" translate="yes" xml:space="preserve">
          <source>(note that</source>
          <target state="translated">（ご了承ください</target>
        </trans-unit>
        <trans-unit id="762b7473fc9b01f5f7e845131d0e7c1d72ee12cc" translate="yes" xml:space="preserve">
          <source>(note the single quote surrounding the option).</source>
          <target state="translated">（オプションを囲む単一引用符に注意してください）。</target>
        </trans-unit>
        <trans-unit id="7739136dc697141cd8d76585cab6736b910f012b" translate="yes" xml:space="preserve">
          <source>(or</source>
          <target state="translated">(or</target>
        </trans-unit>
        <trans-unit id="9d3b478758763e62fffcc112311a494edb86b8e2" translate="yes" xml:space="preserve">
          <source>(or at least</source>
          <target state="translated">（または少なくとも</target>
        </trans-unit>
        <trans-unit id="13837ddf736eb9effbcf49bb601c63831ec49562" translate="yes" xml:space="preserve">
          <source>(or filename suffixes) to tell &lt;code&gt;gcc&lt;/code&gt; where to start, and one of the options</source>
          <target state="translated">（またはファイル名のサフィックス）どこから開始するかを &lt;code&gt;gcc&lt;/code&gt; に指示し、オプションの1つ</target>
        </trans-unit>
        <trans-unit id="09db8785647fde935fa1f767fe4c0bab3ab319f9" translate="yes" xml:space="preserve">
          <source>(or the above option combination), and doesn&amp;rsquo;t need</source>
          <target state="translated">（または上記のオプションの組み合わせ）、および必要ありません</target>
        </trans-unit>
        <trans-unit id="80093bb361ef2b4667b08e10b253d923200ffc1e" translate="yes" xml:space="preserve">
          <source>(or the equivalent</source>
          <target state="translated">（または同等のもの</target>
        </trans-unit>
        <trans-unit id="590d907ceee53a6f5e07761d6444edeed40345ad" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;adapteva-epiphany-options#Adapteva-Epiphany-Options&quot;&gt;Adapteva Epiphany Options&lt;/a&gt;) command-line switch and &lt;code&gt;#pragma long_calls&lt;/code&gt; settings.</source>
          <target state="translated">（&lt;a href=&quot;adapteva-epiphany-options#Adapteva-Epiphany-Options&quot;&gt;Adapteva Epiphanyオプションを&lt;/a&gt;参照）コマンドラインスイッチと &lt;code&gt;#pragma long_calls&lt;/code&gt; 設定。</target>
        </trans-unit>
        <trans-unit id="fed4f9fc14b26a8f1cd77a672d74ba7284e93bc1" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;arc-options#ARC-Options&quot;&gt;ARC Options&lt;/a&gt;) command-line switches and &lt;code&gt;#pragma long_calls&lt;/code&gt; settings.</source>
          <target state="translated">（&lt;a href=&quot;arc-options#ARC-Options&quot;&gt;ARCオプションを&lt;/a&gt;参照）コマンドラインスイッチと &lt;code&gt;#pragma long_calls&lt;/code&gt; 設定。</target>
        </trans-unit>
        <trans-unit id="f60b07f30fcef804891a61a3656e18507e9fc89c" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;arm-options#ARM-Options&quot;&gt;ARM Options&lt;/a&gt;) command-line switch and &lt;code&gt;#pragma long_calls&lt;/code&gt; settings. For ARM, the &lt;code&gt;long_call&lt;/code&gt; attribute indicates that the function might be far away from the call site and require a different (more expensive) calling sequence. The &lt;code&gt;short_call&lt;/code&gt; attribute always places the offset to the function from the call site into the &amp;lsquo;</source>
          <target state="translated">（「&lt;a href=&quot;arm-options#ARM-Options&quot;&gt;ARMオプション」を&lt;/a&gt;参照）コマンドラインスイッチと &lt;code&gt;#pragma long_calls&lt;/code&gt; 設定。ARMの場合、 &lt;code&gt;long_call&lt;/code&gt; 属性は、関数が呼び出しサイトから遠く離れており、別の（より高価な）呼び出しシーケンスが必要になる可能性があることを示します。 &lt;code&gt;short_call&lt;/code&gt; の属性は、常に'内に呼び出しサイトから機能へのオフセットを配置します</target>
        </trans-unit>
        <trans-unit id="4ba0ed75e8c7540c11c10cb8062d5bc95aac39de" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;code-gen-options#Code-Gen-Options&quot;&gt;Code Gen Options&lt;/a&gt;) to reserve the register.</source>
          <target state="translated">（&lt;a href=&quot;code-gen-options#Code-Gen-Options&quot;&gt;コード生成オプションを&lt;/a&gt;参照）レジスタを予約します。</target>
        </trans-unit>
        <trans-unit id="7d740585c10f26409831f844bd55d5eedd751463" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;directory-options#Directory-Options&quot;&gt;Directory Options&lt;/a&gt;). These take precedence over places specified using environment variables, which in turn take precedence over those specified by the configuration of GCC. See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gccint/Driver.html#Driver&quot;&gt;Controlling the Compilation Driver &lt;samp&gt;gcc&lt;/samp&gt;&lt;/a&gt; in GNU Compiler Collection (GCC) Internals.</source>
          <target state="translated">（「&lt;a href=&quot;directory-options#Directory-Options&quot;&gt;ディレクトリオプション」を&lt;/a&gt;参照）。これらは環境変数を使用して指定された場所よりも優先され、環境変数はGCCの構成で指定された場所よりも優先されます。&lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gccint/Driver.html#Driver&quot;&gt;コンパイルドライバの制御を&lt;/a&gt;参照してください。&lt;samp&gt;gcc&lt;/samp&gt; GNU Compiler Collection（GCC）内部。</target>
        </trans-unit>
        <trans-unit id="cd1e6772aba404587464a979947570da09643511" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;extended-asm#Extended-Asm&quot;&gt;Extended Asm&lt;/a&gt;) in the called function, to serve as a special side effect.</source>
          <target state="translated">（&lt;a href=&quot;extended-asm#Extended-Asm&quot;&gt;Extended Asmを&lt;/a&gt;参照）呼び出された関数で、特別な副作用として機能します。</target>
        </trans-unit>
        <trans-unit id="0938503247a790a7b4b9f4207e5e89f7a4253b1c" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;instrumentation-options#Instrumentation-Options&quot;&gt;Instrumentation Options&lt;/a&gt;), you can compile it a second time using</source>
          <target state="translated">（「&lt;a href=&quot;instrumentation-options#Instrumentation-Options&quot;&gt;計測オプション」を&lt;/a&gt;参照）、次のコマンドを使用してもう一度コンパイルできます</target>
        </trans-unit>
        <trans-unit id="d9cd77b4be10b663ba5f3b9cb3608966fbd644ed" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;mips-options#MIPS-Options&quot;&gt;MIPS Options&lt;/a&gt;) command-line switch. The &lt;code&gt;long_call&lt;/code&gt; and &lt;code&gt;far&lt;/code&gt; attributes are synonyms, and cause the compiler to always call the function by first loading its address into a register, and then using the contents of that register. The &lt;code&gt;short_call&lt;/code&gt; and &lt;code&gt;near&lt;/code&gt; attributes are synonyms, and have the opposite effect; they specify that non-PIC calls should be made using the more efficient &lt;code&gt;jal&lt;/code&gt; instruction.</source>
          <target state="translated">（&lt;a href=&quot;mips-options#MIPS-Options&quot;&gt;MIPSオプションを&lt;/a&gt;参照）コマンドラインスイッチ。 &lt;code&gt;long_call&lt;/code&gt; と &lt;code&gt;far&lt;/code&gt; の属性は同義語であり、コンパイラは常にレジスタに最初にロードすることにより、そのアドレスを関数を呼び出して、そのレジスタの内容を使用してさせます。 &lt;code&gt;short_call&lt;/code&gt; と &lt;code&gt;near&lt;/code&gt; 属性は同義語であり、逆の効果を持っています。非PIC呼び出しは、より効率的な &lt;code&gt;jal&lt;/code&gt; 命令を使用して行う必要があることを指定しています。</target>
        </trans-unit>
        <trans-unit id="0e3f80e361ac2552514137893b0ab9fabcabe627" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;optimize-options#Optimize-Options&quot;&gt;Optimize Options&lt;/a&gt;) option for this function.</source>
          <target state="translated">（「&lt;a href=&quot;optimize-options#Optimize-Options&quot;&gt;最適化オプション」を&lt;/a&gt;参照）この関数のオプション。</target>
        </trans-unit>
        <trans-unit id="9a18948f20eb8ae98ad70a254b90243efbc88d0d" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;optimize-options#Optimize-Options&quot;&gt;Optimize Options&lt;/a&gt;) with</source>
          <target state="translated">（&lt;a href=&quot;optimize-options#Optimize-Options&quot;&gt;最適化オプションを&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="d571704fcdb9d5ed79e67b473e0539ffd1606ce1" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;optimize-options#Optimize-Options&quot;&gt;Options that Control Optimization&lt;/a&gt;).</source>
          <target state="translated">（&lt;a href=&quot;optimize-options#Optimize-Options&quot;&gt;最適化を制御するオプションを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="8a4d90f4989adf26f774e757c32cb8c9fd263bdf" translate="yes" xml:space="preserve">
          <source>(see &lt;a href=&quot;preprocessor-options#Preprocessor-Options&quot;&gt;Preprocessor Options&lt;/a&gt;), with an optional</source>
          <target state="translated">（&lt;a href=&quot;preprocessor-options#Preprocessor-Options&quot;&gt;プリプロセッサオプションを&lt;/a&gt;参照）、オプション</target>
        </trans-unit>
        <trans-unit id="d55bcbae0d9eedb8abddb17abab718a9163fc72b" translate="yes" xml:space="preserve">
          <source>(see below).</source>
          <target state="translated">（下記参照）。</target>
        </trans-unit>
        <trans-unit id="02b70b58cd98cdafb11bf8a667440d592448e3c5" translate="yes" xml:space="preserve">
          <source>(the default), the compiler generates save/restore instructions (except for leaf functions). This is the normal operating mode.</source>
          <target state="translated">（デフォルト）、コンパイラーは保存/復元命令を生成します（リーフ関数を除く）。これは通常の動作モードです。</target>
        </trans-unit>
        <trans-unit id="af40e6cb84087d46922c5a0ffb4867733e5cd979" translate="yes" xml:space="preserve">
          <source>(the default), this defaults to 11 (GCC 7 compatibility). If another ABI version is explicitly selected, this defaults to 0. For compatibility with GCC versions 3.2 through 4.9, use</source>
          <target state="translated">（デフォルト）、これはデフォルトで11（GCC 7互換）です。別のABIバージョンが明示的に選択されている場合、これはデフォルトで0になります。GCCバージョン3.2〜4.9との互換性のために、</target>
        </trans-unit>
        <trans-unit id="3ab143adbc1c1395faeaddeb77a75ce40da712c0" translate="yes" xml:space="preserve">
          <source>(the latter implies the former).</source>
          <target state="translated">（後者は前者を意味します）。</target>
        </trans-unit>
        <trans-unit id="cbf9e406f24683f7d894bf8f26ad3ac2e246ab6f" translate="yes" xml:space="preserve">
          <source>(void)</source>
          <target state="translated">(void)</target>
        </trans-unit>
        <trans-unit id="ca51205aa488fda3fdecbf1f2de750f45ca42e49" translate="yes" xml:space="preserve">
          <source>(when compiling) and</source>
          <target state="translated">（コンパイル時）および</target>
        </trans-unit>
        <trans-unit id="175effdff8d2479be4f59b65047aecd27e3b8b4c" translate="yes" xml:space="preserve">
          <source>(when linking). See the documentation for those options for more details.</source>
          <target state="translated">（リンク時）。詳細については、これらのオプションのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="20cd831899eee396a27bb94a8bab7bfba3524de0" translate="yes" xml:space="preserve">
          <source>(which it assumes are the names of linker input library archive files) and returns a result containing all the found arguments each prepended by</source>
          <target state="translated">（これは、リンカー入力ライブラリアーカイブファイルの名前であると想定しています）で、見つかったすべての引数の前に付加された引数を含む結果を返します</target>
        </trans-unit>
        <trans-unit id="e73e5132b6755a2681bf9ea218d8fb5be273c29d" translate="yes" xml:space="preserve">
          <source>(which was the default from GCC 3.4 to 4.9) include:</source>
          <target state="translated">（GCC 3.4から4.9のデフォルトでした）には以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="d29cb22dfbd079dd15c9c9ee6ecc9e019d9f6e2b" translate="yes" xml:space="preserve">
          <source>(which will eventually be the default) or</source>
          <target state="translated">（最終的にはデフォルトになります）または</target>
        </trans-unit>
        <trans-unit id="4bf191089af86ec5288ab306c89094f4d0e110a0" translate="yes" xml:space="preserve">
          <source>(with no level) is the same as</source>
          <target state="translated">（レベルなし）と同じ</target>
        </trans-unit>
        <trans-unit id="6b302cd20aa6ae0c1658b03d1a00c7adf9543273" translate="yes" xml:space="preserve">
          <source>(with, as for other standard versions,</source>
          <target state="translated">（他の標準バージョンと同様に、</target>
        </trans-unit>
        <trans-unit id="2c929d8cb2c9ae0178197af8deb9b389a6c64e0e" translate="yes" xml:space="preserve">
          <source>(without the version), the version from this option is used for the warning.</source>
          <target state="translated">（バージョンなし）、このオプションのバージョンが警告に使用されます。</target>
        </trans-unit>
        <trans-unit id="46c5daf75d33dba3c64b315f704b39ce85f4840a" translate="yes" xml:space="preserve">
          <source>) and FP64A (</source>
          <target state="translated">）およびFP64A（</target>
        </trans-unit>
        <trans-unit id="563d45d6df052b34a41617f5f0d2d22fbf1bbfc5" translate="yes" xml:space="preserve">
          <source>) and a new value of &lt;code&gt;__STDC_VERSION__&lt;/code&gt;, and so is supported to the same extent as C11.</source>
          <target state="translated">）および &lt;code&gt;__STDC_VERSION__&lt;/code&gt; の新しい値。C11と同じ範囲でサポートされます。</target>
        </trans-unit>
        <trans-unit id="0f02ab141e40e964aecd5ca279400c7bf4b18cea" translate="yes" xml:space="preserve">
          <source>) and interprocedural constant propagation (</source>
          <target state="translated">）および手続き間の定数伝播（</target>
        </trans-unit>
        <trans-unit id="55732cc815634dc6c33a7c672fcb5dfa89011cec" translate="yes" xml:space="preserve">
          <source>) and prefixed addressing (</source>
          <target state="translated">）およびプレフィックス付きアドレス指定（</target>
        </trans-unit>
        <trans-unit id="e3fcef972d7d590f262c1cc874b47cd439afbe43" translate="yes" xml:space="preserve">
          <source>) and the ARM processor type for which to tune for performance (as if specified by</source>
          <target state="translated">）とパフォーマンスを調整するARMプロセッサタイプ（</target>
        </trans-unit>
        <trans-unit id="676ea35ac4fbc9be6e247e62c7b74cdadd4458d2" translate="yes" xml:space="preserve">
          <source>) and the debug info format supports it.</source>
          <target state="translated">）とデバッグ情報形式がサポートしています。</target>
        </trans-unit>
        <trans-unit id="959a7bd87d034ba23c5bbe122892dd9a038669b8" translate="yes" xml:space="preserve">
          <source>) and to determine the target processor for which to tune for performance (as if by</source>
          <target state="translated">）、パフォーマンスを調整するターゲットプロセッサを決定します（</target>
        </trans-unit>
        <trans-unit id="fa1fd71dcd9a799b64dd5ef03786633f6c950ba5" translate="yes" xml:space="preserve">
          <source>) are available:</source>
          <target state="translated">） 利用可能です：</target>
        </trans-unit>
        <trans-unit id="fff7787a85186574fddbf94130d99816fffebb35" translate="yes" xml:space="preserve">
          <source>) does not allow the use of the &lt;code&gt;icbi&lt;/code&gt; instruction. If the selected code generation option does not allow the use of the &lt;code&gt;icbi&lt;/code&gt; instruction, and</source>
          <target state="translated">） &lt;code&gt;icbi&lt;/code&gt; 命令の使用を許可しません。選択したコード生成オプションで &lt;code&gt;icbi&lt;/code&gt; 命令を使用できない場合</target>
        </trans-unit>
        <trans-unit id="66d488336d845c3e11422345df2d9abe3c655b7d" translate="yes" xml:space="preserve">
          <source>) except that they do not change any feature macros. For example,</source>
          <target state="translated">）ただし、機能マクロは変更されません。例えば、</target>
        </trans-unit>
        <trans-unit id="b94ca66fe63e931f27878f6ec1bb8e784a2fccf3" translate="yes" xml:space="preserve">
          <source>) in size. The default is</source>
          <target state="translated">）サイズ。デフォルトは</target>
        </trans-unit>
        <trans-unit id="542a755b0afdbf00d8d31e36ba9bc4cd6e84a889" translate="yes" xml:space="preserve">
          <source>) is available:</source>
          <target state="translated">） 利用可能です：</target>
        </trans-unit>
        <trans-unit id="a0553b2d9cf564cc761c6f8046ff2ebb991b33b4" translate="yes" xml:space="preserve">
          <source>) is based on the idea that when a local variable shadows another one of incompatible type, it is most likely intentional, not a bug or typo, as shown in the following example:</source>
          <target state="translated">）は、次の例に示すように、ローカル変数が互換性のないタイプの別のタイプをシャドウする場合、それは意図的なものであり、バグやタイプミスではないという考えに基づいています。</target>
        </trans-unit>
        <trans-unit id="52d2a999f75dccc509e90809d18c6096a16a88e5" translate="yes" xml:space="preserve">
          <source>) is disabled.</source>
          <target state="translated">） 無効になっています。</target>
        </trans-unit>
        <trans-unit id="2378d185f16386ef083035250a3ab4f0f7c4dd3b" translate="yes" xml:space="preserve">
          <source>) is enabled;</source>
          <target state="translated">） 有効になっています;</target>
        </trans-unit>
        <trans-unit id="ff4d48ebc04f7eef9f0f196eb714e862d444f2d8" translate="yes" xml:space="preserve">
          <source>) is not supported on the HP PA machine, unless you use the preliminary GNU tools.</source>
          <target state="translated">）予備のGNUツールを使用しない限り、HP PAマシンではサポートされません。</target>
        </trans-unit>
        <trans-unit id="1de6a4c82af0028ed53010748154e492d457ccee" translate="yes" xml:space="preserve">
          <source>) on a 64-bit system, the IEEE 128-bit floating point support will also enable the generation of ISA 3.0 IEEE 128-bit floating point instructions. Otherwise, if you do not specify to generate ISA 3.0 instructions or you are targeting a 32-bit big endian system, IEEE 128-bit floating point will be done with software emulation.</source>
          <target state="translated">）64ビットシステムでは、IEEE 128ビット浮動小数点サポートにより、ISA 3.0 IEEE 128ビット浮動小数点命令の生成も可能になります。それ以外の場合、ISA 3.0命令の生成を指定しないか、32ビットのビッグエンディアンシステムを対象とする場合は、ソフトウェアエミュレーションを使用してIEEE 128ビット浮動小数点が実行されます。</target>
        </trans-unit>
        <trans-unit id="372ab2853846c6ec09a1a55a70087f0853ac4490" translate="yes" xml:space="preserve">
          <source>) on the linker command line.</source>
          <target state="translated">）リンカーのコマンドライン。</target>
        </trans-unit>
        <trans-unit id="80f4da5c31dc8786d1b0443b8c321785a9f65b28" translate="yes" xml:space="preserve">
          <source>) options are enabled.</source>
          <target state="translated">）オプションが有効になります。</target>
        </trans-unit>
        <trans-unit id="0f87b9dafadcd5c3f21d76f5c33546bb45833f59" translate="yes" xml:space="preserve">
          <source>) or 32 bits (</source>
          <target state="translated">）または32ビット（</target>
        </trans-unit>
        <trans-unit id="88214b46b51ead2248a33b5dc3fb87a39aea5aca" translate="yes" xml:space="preserve">
          <source>) or &lt;code&gt;gprof&lt;/code&gt; (for</source>
          <target state="translated">）または &lt;code&gt;gprof&lt;/code&gt; （for</target>
        </trans-unit>
        <trans-unit id="92223374d02859d95dcd004e6050947644805c23" translate="yes" xml:space="preserve">
          <source>) or a 16-bit boundary (</source>
          <target state="translated">）または16ビット境界（</target>
        </trans-unit>
        <trans-unit id="de09a263a8cf42ae108ce7d225322cce5d807572" translate="yes" xml:space="preserve">
          <source>) or disables (</source>
          <target state="translated">）または無効化（</target>
        </trans-unit>
        <trans-unit id="6c992e85f9d035d560971258dac3cd10814fe987" translate="yes" xml:space="preserve">
          <source>) or if callee&amp;rsquo;s register usage cannot be known exactly (this happens on targets that do not expose prologues and epilogues in RTL).</source>
          <target state="translated">）または、呼び出し先のレジスタの使用法を正確に把握できない場合（これは、RTLでプロローグとエピローグを公開していないターゲットで発生します）。</target>
        </trans-unit>
        <trans-unit id="665e2cbf7c203c26ee0978de2346b3d2559b1e78" translate="yes" xml:space="preserve">
          <source>) or if-conversion (</source>
          <target state="translated">）またはif-conversion（</target>
        </trans-unit>
        <trans-unit id="f0fe0e76237f815ccac9b5973949d2128c4d25ab" translate="yes" xml:space="preserve">
          <source>) or later:</source>
          <target state="translated">）以降：</target>
        </trans-unit>
        <trans-unit id="18fb7a4971f7182b1d06e123c98d77026a5601b8" translate="yes" xml:space="preserve">
          <source>) or size (</source>
          <target state="translated">）またはサイズ（</target>
        </trans-unit>
        <trans-unit id="b61d90f715da7fa5414c6199e285572c09d6de3a" translate="yes" xml:space="preserve">
          <source>) or suffer significant run time performance penalties. On Pentium III, the Streaming SIMD Extension (SSE) data type &lt;code&gt;__m128&lt;/code&gt; may not work properly if it is not 16-byte aligned.</source>
          <target state="translated">）または、実行時のパフォーマンスが大幅に低下します。Pentium IIIでは、ストリーミングSIMD拡張（SSE）データ型 &lt;code&gt;__m128&lt;/code&gt; は、16バイト境界で整列されていない場合、正しく機能しない可能性があります。</target>
        </trans-unit>
        <trans-unit id="cf692b44ef780ecaea543ddcdee9cc9544aea8a5" translate="yes" xml:space="preserve">
          <source>) passes information to the compiler about used and externally visible symbols. When the linker plugin is not available,</source>
          <target state="translated">）使用され、外部から見えるシンボルに関する情報をコンパイラに渡します。リンカープラグインが利用できない場合、</target>
        </trans-unit>
        <trans-unit id="5293f6bbeebb606bbb53bc3a56ae4ac32132f596" translate="yes" xml:space="preserve">
          <source>) plus the other libraries and startup files it needs, in the proper order.</source>
          <target state="translated">）加えて、適切な順序で必要な他のライブラリと起動ファイル。</target>
        </trans-unit>
        <trans-unit id="e31a598c844d6a572bc984c25f00bb8bb60ffaa7" translate="yes" xml:space="preserve">
          <source>) requires a diagnostic, in some cases where there is undefined behavior at compile-time and in some other cases that do not prevent compilation of programs that are valid according to the standard. This is not equivalent to</source>
          <target state="translated">）診断が必要です。コンパイル時に未定義の動作が発生する場合や、標準に従って有効なプログラムのコンパイルを妨げない場合もあります。これは</target>
        </trans-unit>
        <trans-unit id="606a6881ab81487da34e0ec67cc4569c78f1b735" translate="yes" xml:space="preserve">
          <source>) respectively.</source>
          <target state="translated">）それぞれ。</target>
        </trans-unit>
        <trans-unit id="c651c41b3e1b6730da2636dadc62cb5aca1af853" translate="yes" xml:space="preserve">
          <source>) retain a reference to DWARF Version 2 in their names, but apply to all currently-supported versions of DWARF.</source>
          <target state="translated">）名前にDWARFバージョン2への参照を保持しますが、現在サポートされているすべてのバージョンのDWARFに適用されます。</target>
        </trans-unit>
        <trans-unit id="b8d5778382dc7872cededaaa8c3f62d9e97c5db9" translate="yes" xml:space="preserve">
          <source>) that you don&amp;rsquo;t expect.</source>
          <target state="translated">）あなたが期待しないこと。</target>
        </trans-unit>
        <trans-unit id="096e30d6e1308807356b1a8243bd8e1c2bc7b4bc" translate="yes" xml:space="preserve">
          <source>) the actual recursion depth can be guessed from the probability that function recurses via a given call expression. This parameter limits inlining only to call expressions whose probability exceeds the given threshold (in percents).</source>
          <target state="translated">）実際の再帰の深さは、関数が特定の呼び出し式を介して再帰する確率から推測できます。このパラメーターは、インライン化を、確率が指定されたしきい値（パーセント単位）を超える呼び出し式のみに制限します。</target>
        </trans-unit>
        <trans-unit id="63f0e4145ab2c01109fbe0d5553d3f1860aaf3d7" translate="yes" xml:space="preserve">
          <source>) the linker plugin defaults to</source>
          <target state="translated">）リンカープラグインのデフォルトは</target>
        </trans-unit>
        <trans-unit id="9cc56b0abbda97d9e58f8de7d0f1f4cdbeb16304" translate="yes" xml:space="preserve">
          <source>) the linker plugin will default to</source>
          <target state="translated">）リンカープラグインはデフォルトで</target>
        </trans-unit>
        <trans-unit id="a788f4704d0fa869be2f93937e1eeb5d09c8018e" translate="yes" xml:space="preserve">
          <source>) the security feature that verifies at run time, for every virtual call, that the vtable pointer through which the call is made is valid for the type of the object, and has not been corrupted or overwritten. If an invalid vtable pointer is detected at run time, an error is reported and execution of the program is immediately halted.</source>
          <target state="translated">）すべての仮想呼び出しについて、実行時に検証され、呼び出しが行われるvtableポインターがオブジェクトのタイプに対して有効であり、破損または上書きされていないことを確認するセキュリティ機能。実行時に無効なvtableポインターが検出された場合、エラーが報告され、プログラムの実行が直ちに停止します。</target>
        </trans-unit>
        <trans-unit id="1574f5807a54ab6b1e028d7e41ef97567b726e97" translate="yes" xml:space="preserve">
          <source>) the use of RX floating-point hardware. The default is enabled for the RX600 series and disabled for the RX200 series.</source>
          <target state="translated">）RX浮動小数点ハードウェアの使用。デフォルトは、RX600シリーズでは有効、RX200シリーズでは無効です。</target>
        </trans-unit>
        <trans-unit id="e21d4e93e91989fd8efa13649a6d484d18b95cd7" translate="yes" xml:space="preserve">
          <source>) together with low-level details about the analysis.</source>
          <target state="translated">）分析に関する低レベルの詳細とともに。</target>
        </trans-unit>
        <trans-unit id="1653c12d8093ecbaf09e84a2fda310d1cb9789be" translate="yes" xml:space="preserve">
          <source>) when optimizing at</source>
          <target state="translated">）で最適化するとき</target>
        </trans-unit>
        <trans-unit id="9b7ff0a38348e09a4d3f591bcc731db366000ffd" translate="yes" xml:space="preserve">
          <source>) will diagnose such cases. They are also diagnosed where constant expressions are required.</source>
          <target state="translated">）このような場合を診断します。また、定数式が必要な場所でも診断されます。</target>
        </trans-unit>
        <trans-unit id="3d35521355b1a26451fecea1d0fdb8e861ae1a63" translate="yes" xml:space="preserve">
          <source>),</source>
          <target state="translated">),</target>
        </trans-unit>
        <trans-unit id="a44ea070f83a2ea8c508a0d94a9ffe92f0311a7b" translate="yes" xml:space="preserve">
          <source>), GCC emits a diagnostic stating that the option is not recognized. However, if the</source>
          <target state="translated">）、GCCは、オプションが認識されないことを示す診断を出力します。ただし、</target>
        </trans-unit>
        <trans-unit id="d7b3ec32632cffbf1f22cdfe57cb8374a735a269" translate="yes" xml:space="preserve">
          <source>), a left margin is printed, showing line numbers. This option suppresses this left margin.</source>
          <target state="translated">）、左マージンが印刷され、行番号が示されます。このオプションは、この左マージンを抑制します。</target>
        </trans-unit>
        <trans-unit id="783d97ac4ed484d776105d4d443910143dcbd31a" translate="yes" xml:space="preserve">
          <source>), a lot of functions that would otherwise not be considered for inlining by the compiler are investigated. To those functions, a different (more restrictive) limit compared to functions declared inline can be applied (</source>
          <target state="translated">）、コンパイラによるインライン化の対象とは見なされない多くの関数が調査されます。これらの関数には、インラインで宣言された関数とは異なる（より制限的な）制限を適用できます（</target>
        </trans-unit>
        <trans-unit id="7416bd69e56d2b6037f51624d54028dd4e475dde" translate="yes" xml:space="preserve">
          <source>), a lot of functions that would otherwise not be considered for inlining by the compiler are investigated. To those functions, a different (more restrictive) limit compared to functions declared inline can be applied.</source>
          <target state="translated">）、コンパイラーによるインライン化の対象にならないと思われる多くの関数が調査されます。これらの関数には、インラインで宣言された関数とは異なる（より制限的な）制限を適用できます。</target>
        </trans-unit>
        <trans-unit id="4b95b8c10c47af6db88c3c798a9c8a9008ca4712" translate="yes" xml:space="preserve">
          <source>), and disabled by default when the GCC ABI is in use. If &lt;code&gt;CALLT&lt;/code&gt; instructions are being generated then the C preprocessor symbol &lt;code&gt;__V850_CALLT__&lt;/code&gt; is defined.</source>
          <target state="translated">）、GCC ABIの使用中はデフォルトで無効になっています。場合 &lt;code&gt;CALLT&lt;/code&gt; の命令が生成され、次いでCプリプロセッサシンボル &lt;code&gt;__V850_CALLT__&lt;/code&gt; が定義されています。</target>
        </trans-unit>
        <trans-unit id="ffd387280782b84825cc54fe2e5fd6641710f278" translate="yes" xml:space="preserve">
          <source>), and the third is used when compiling C++.</source>
          <target state="translated">）、3番目はC ++のコンパイル時に使用されます。</target>
        </trans-unit>
        <trans-unit id="0b9246fb085de724853f192d16ca8ae6d5505d2a" translate="yes" xml:space="preserve">
          <source>), as programmers are notoriously bad at predicting how their programs actually perform. However, there are applications in which this data is hard to collect.</source>
          <target state="translated">）、プログラマーはプログラムが実際にどのように機能するかを予測するのが悪いことで有名です。ただし、このデータを収集するのが難しいアプリケーションがあります。</target>
        </trans-unit>
        <trans-unit id="930d1fcc66826401b7d140d9007bf2954e451307" translate="yes" xml:space="preserve">
          <source>), diagnostics can label ranges of source code with pertinent information, such as the types of expressions:</source>
          <target state="translated">）、診断では、ソースコードの範囲に、式のタイプなどの関連情報をラベル付けできます。</target>
        </trans-unit>
        <trans-unit id="69723fbefd38a710c7dfc1692eb17c0f6c610d10" translate="yes" xml:space="preserve">
          <source>), dump a representation of the control flow graph suitable for viewing with GraphViz to</source>
          <target state="translated">）、GraphVizでの表示に適した制御フローグラフの表現をダンプします。</target>
        </trans-unit>
        <trans-unit id="80b590ade0ab221ac5e4234e6d4d4d05949c0482" translate="yes" xml:space="preserve">
          <source>), generate a __mcount_loc section that contains pointers to each profiling call. This is useful for automatically patching and out calls.</source>
          <target state="translated">）、各プロファイリング呼び出しへのポインターを含む__mcount_locセクションを生成します。これは、自動的にパッチを適用して呼び出しを行う場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="bfdc126f96f3450b0ed80efdbbcd69285411c30e" translate="yes" xml:space="preserve">
          <source>), generate the calls to the profiling functions as NOPs. This is useful when they should be patched in later dynamically. This is likely only useful together with</source>
          <target state="translated">）、プロファイリング関数の呼び出しをNOPとして生成します。これは、後で動的にパッチを適用する必要がある場合に役立ちます。これはおそらく一緒にのみ有用です</target>
        </trans-unit>
        <trans-unit id="bfef96d377a3855452441f358e957e550d74a331" translate="yes" xml:space="preserve">
          <source>), note that floating-point operations are not generated by GCC&amp;rsquo;s auto-vectorization pass unless</source>
          <target state="translated">）、浮動小数点演算は、GCCの自動ベクトル化パスによって生成されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a08d1f37fdd01ee828e85c675c534b9eb820d73e" translate="yes" xml:space="preserve">
          <source>), or</source>
          <target state="translated">）、または</target>
        </trans-unit>
        <trans-unit id="365febad52ba5ae4b17e37fcd01c2774f61022fd" translate="yes" xml:space="preserve">
          <source>), or an option for a later standard version, is used.</source>
          <target state="translated">）、またはそれ以降の標準バージョンのオプションが使用されます。</target>
        </trans-unit>
        <trans-unit id="70001bcdb1cc025e535a21f20ec6e5a609d02cd6" translate="yes" xml:space="preserve">
          <source>), or for test coverage analysis (</source>
          <target state="translated">）、またはテストカバレッジ分析（</target>
        </trans-unit>
        <trans-unit id="7f71af6d58f5588e5885753f35af7b050e937149" translate="yes" xml:space="preserve">
          <source>), or separately specify</source>
          <target state="translated">）、または個別に指定</target>
        </trans-unit>
        <trans-unit id="19c045589af9c59852e87b276d0de6f5db11fc66" translate="yes" xml:space="preserve">
          <source>), or the</source>
          <target state="translated">）、 または</target>
        </trans-unit>
        <trans-unit id="c1b08d7982a47273210539150a95f97d162673a4" translate="yes" xml:space="preserve">
          <source>), or to use the &lt;code&gt;gcov&lt;/code&gt; tool.</source>
          <target state="translated">）、または &lt;code&gt;gcov&lt;/code&gt; ツールを使用します。</target>
        </trans-unit>
        <trans-unit id="130bb4348d8251fa594f2be0aac3510a4118bbf1" translate="yes" xml:space="preserve">
          <source>), or when an optimization option such as</source>
          <target state="translated">）、または次のような最適化オプション</target>
        </trans-unit>
        <trans-unit id="a68247a8af7280a00643481b52bb4ec6cbad2c43" translate="yes" xml:space="preserve">
          <source>), prologues and epilogues that have to save or restore a large number of registers are often shortened by using call to a special function in libgcc; this is referred to as a &lt;em&gt;millicode&lt;/em&gt; call. As these calls can pose performance issues, and/or cause linking issues when linking in a nonstandard way, this option is provided to turn on or off millicode call generation.</source>
          <target state="translated">）、多数のレジスターを保存または復元する必要があるプロローグとエピローグは、多くの場合、libgccの特別な関数の呼び出しを使用することで短縮されます。これは&lt;em&gt;ミリコード&lt;/em&gt;呼び出しと呼ばれます。これらの呼び出しは、パフォーマンスの問題を引き起こしたり、非標準の方法でリンクするときにリンクの問題を引き起こす可能性があるため、ミリコード呼び出しの生成をオンまたはオフにするために提供されています。</target>
        </trans-unit>
        <trans-unit id="b2a7ba7846130c7a8e45123ef7d125b09931d28b" translate="yes" xml:space="preserve">
          <source>), put the profiling counter call before the prologue. Note: On x86 architectures the attribute &lt;code&gt;ms_hook_prologue&lt;/code&gt; isn&amp;rsquo;t possible at the moment for</source>
          <target state="translated">）、プロローグの前にプロファイリングカウンター呼び出しを置きます。注：x86アーキテクチャでは、 &lt;code&gt;ms_hook_prologue&lt;/code&gt; 属性は現時点では不可能です。</target>
        </trans-unit>
        <trans-unit id="3d86644ae2fc8bedabf27beb5cf2316aa496946c" translate="yes" xml:space="preserve">
          <source>), so it is not available everywhere.</source>
          <target state="translated">）なので、どこでも利用できるわけではありません。</target>
        </trans-unit>
        <trans-unit id="775107e56917b7498a4a855146131dd87d5bd5fa" translate="yes" xml:space="preserve">
          <source>), so there is no need to modify the header file</source>
          <target state="translated">）、ヘッダーファイルを変更する必要はありません</target>
        </trans-unit>
        <trans-unit id="a27da200afd6d3b4df9d5692359c4ee4a54f4766" translate="yes" xml:space="preserve">
          <source>), such as the &lt;code&gt;taint&lt;/code&gt; checker that implements</source>
          <target state="translated">）、実装する &lt;code&gt;taint&lt;/code&gt; チェッカーなど</target>
        </trans-unit>
        <trans-unit id="f69e7a52d8ea74d2d69c66bfa16bc63677452746" translate="yes" xml:space="preserve">
          <source>), the following additional functions are available for both 32-bit and 64-bit targets.</source>
          <target state="translated">）、32ビットと64ビットの両方のターゲットで次の追加関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="9c38b1d1acd0f20276ad32aafe94d807c81016f3" translate="yes" xml:space="preserve">
          <source>), the following builtins are enabled.</source>
          <target state="translated">）、次の組み込みが有効になっています。</target>
        </trans-unit>
        <trans-unit id="c4bb473a6d9d830dd25ac8768ef1d4adae25b403" translate="yes" xml:space="preserve">
          <source>), the functions &lt;code&gt;_exit&lt;/code&gt;, &lt;code&gt;alloca&lt;/code&gt;, &lt;code&gt;bcmp&lt;/code&gt;, &lt;code&gt;bzero&lt;/code&gt;, &lt;code&gt;dcgettext&lt;/code&gt;, &lt;code&gt;dgettext&lt;/code&gt;, &lt;code&gt;dremf&lt;/code&gt;, &lt;code&gt;dreml&lt;/code&gt;, &lt;code&gt;drem&lt;/code&gt;, &lt;code&gt;exp10f&lt;/code&gt;, &lt;code&gt;exp10l&lt;/code&gt;, &lt;code&gt;exp10&lt;/code&gt;, &lt;code&gt;ffsll&lt;/code&gt;, &lt;code&gt;ffsl&lt;/code&gt;, &lt;code&gt;ffs&lt;/code&gt;, &lt;code&gt;fprintf_unlocked&lt;/code&gt;, &lt;code&gt;fputs_unlocked&lt;/code&gt;, &lt;code&gt;gammaf&lt;/code&gt;, &lt;code&gt;gammal&lt;/code&gt;, &lt;code&gt;gamma&lt;/code&gt;, &lt;code&gt;gammaf_r&lt;/code&gt;, &lt;code&gt;gammal_r&lt;/code&gt;, &lt;code&gt;gamma_r&lt;/code&gt;, &lt;code&gt;gettext&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;isascii&lt;/code&gt;, &lt;code&gt;j0f&lt;/code&gt;, &lt;code&gt;j0l&lt;/code&gt;, &lt;code&gt;j0&lt;/code&gt;, &lt;code&gt;j1f&lt;/code&gt;, &lt;code&gt;j1l&lt;/code&gt;, &lt;code&gt;j1&lt;/code&gt;, &lt;code&gt;jnf&lt;/code&gt;, &lt;code&gt;jnl&lt;/code&gt;, &lt;code&gt;jn&lt;/code&gt;, &lt;code&gt;lgammaf_r&lt;/code&gt;, &lt;code&gt;lgammal_r&lt;/code&gt;, &lt;code&gt;lgamma_r&lt;/code&gt;, &lt;code&gt;mempcpy&lt;/code&gt;, &lt;code&gt;pow10f&lt;/code&gt;, &lt;code&gt;pow10l&lt;/code&gt;, &lt;code&gt;pow10&lt;/code&gt;, &lt;code&gt;printf_unlocked&lt;/code&gt;, &lt;code&gt;rindex&lt;/code&gt;, &lt;code&gt;roundeven&lt;/code&gt;, &lt;code&gt;roundevenf&lt;/code&gt;, &lt;code&gt;roudnevenl&lt;/code&gt;, &lt;code&gt;scalbf&lt;/code&gt;, &lt;code&gt;scalbl&lt;/code&gt;, &lt;code&gt;scalb&lt;/code&gt;, &lt;code&gt;signbit&lt;/code&gt;, &lt;code&gt;signbitf&lt;/code&gt;, &lt;code&gt;signbitl&lt;/code&gt;, &lt;code&gt;signbitd32&lt;/code&gt;, &lt;code&gt;signbitd64&lt;/code&gt;, &lt;code&gt;signbitd128&lt;/code&gt;, &lt;code&gt;significandf&lt;/code&gt;, &lt;code&gt;significandl&lt;/code&gt;, &lt;code&gt;significand&lt;/code&gt;, &lt;code&gt;sincosf&lt;/code&gt;, &lt;code&gt;sincosl&lt;/code&gt;, &lt;code&gt;sincos&lt;/code&gt;, &lt;code&gt;stpcpy&lt;/code&gt;, &lt;code&gt;stpncpy&lt;/code&gt;, &lt;code&gt;strcasecmp&lt;/code&gt;, &lt;code&gt;strdup&lt;/code&gt;, &lt;code&gt;strfmon&lt;/code&gt;, &lt;code&gt;strncasecmp&lt;/code&gt;, &lt;code&gt;strndup&lt;/code&gt;, &lt;code&gt;strnlen&lt;/code&gt;, &lt;code&gt;toascii&lt;/code&gt;, &lt;code&gt;y0f&lt;/code&gt;, &lt;code&gt;y0l&lt;/code&gt;, &lt;code&gt;y0&lt;/code&gt;, &lt;code&gt;y1f&lt;/code&gt;, &lt;code&gt;y1l&lt;/code&gt;, &lt;code&gt;y1&lt;/code&gt;, &lt;code&gt;ynf&lt;/code&gt;, &lt;code&gt;ynl&lt;/code&gt; and &lt;code&gt;yn&lt;/code&gt; may be handled as built-in functions. All these functions have corresponding versions prefixed with &lt;code&gt;__builtin_&lt;/code&gt;, which may be used even in strict C90 mode.</source>
          <target state="translated">）、関数 &lt;code&gt;_exit&lt;/code&gt; 、 &lt;code&gt;alloca&lt;/code&gt; を、 &lt;code&gt;bcmp&lt;/code&gt; 、 &lt;code&gt;bzero&lt;/code&gt; 、 &lt;code&gt;dcgettext&lt;/code&gt; 、 &lt;code&gt;dgettext&lt;/code&gt; 、 &lt;code&gt;dremf&lt;/code&gt; 、 &lt;code&gt;dreml&lt;/code&gt; 、 &lt;code&gt;drem&lt;/code&gt; 、 &lt;code&gt;exp10f&lt;/code&gt; 、 &lt;code&gt;exp10l&lt;/code&gt; 、 &lt;code&gt;exp10&lt;/code&gt; 、 &lt;code&gt;ffsll&lt;/code&gt; 、 &lt;code&gt;ffsl&lt;/code&gt; 、 &lt;code&gt;ffs&lt;/code&gt; 、 &lt;code&gt;fprintf_unlocked&lt;/code&gt; 、 &lt;code&gt;fputs_unlocked&lt;/code&gt; 、 &lt;code&gt;gammaf&lt;/code&gt; 、 &lt;code&gt;gammal&lt;/code&gt; 、 &lt;code&gt;gamma&lt;/code&gt; 、 &lt;code&gt;gammaf_r&lt;/code&gt; 、 &lt;code&gt;gammal_r&lt;/code&gt; 、 &lt;code&gt;gamma_r&lt;/code&gt; 、 &lt;code&gt;gettext&lt;/code&gt; 、 &lt;code&gt;index&lt;/code&gt; 、 &lt;code&gt;isascii&lt;/code&gt; は、 &lt;code&gt;j0f&lt;/code&gt; 、 &lt;code&gt;j0l&lt;/code&gt; 、 &lt;code&gt;j0&lt;/code&gt; 、 &lt;code&gt;j1f&lt;/code&gt; 、 &lt;code&gt;j1l&lt;/code&gt; 、 &lt;code&gt;j1&lt;/code&gt; 、 &lt;code&gt;jnf&lt;/code&gt; 、 &lt;code&gt;jnl&lt;/code&gt; 、 &lt;code&gt;jn&lt;/code&gt; 、 &lt;code&gt;lgammaf_r&lt;/code&gt; 、 &lt;code&gt;lgammal_r&lt;/code&gt; 、 &lt;code&gt;lgamma_r&lt;/code&gt; 、 &lt;code&gt;mempcpy&lt;/code&gt; 、 &lt;code&gt;pow10f&lt;/code&gt; 、 &lt;code&gt;pow10l&lt;/code&gt; 、 &lt;code&gt;pow10&lt;/code&gt; 、 &lt;code&gt;printf_unlocked&lt;/code&gt; 、 &lt;code&gt;rindex&lt;/code&gt; 、 &lt;code&gt;roundeven&lt;/code&gt; 、 &lt;code&gt;roundevenf&lt;/code&gt; 、 &lt;code&gt;roudnevenl&lt;/code&gt; 、 &lt;code&gt;scalbf&lt;/code&gt; 、 &lt;code&gt;scalbl&lt;/code&gt; 、 &lt;code&gt;scalb&lt;/code&gt; 、 &lt;code&gt;signbit&lt;/code&gt; 、 &lt;code&gt;signbitf&lt;/code&gt; 、 &lt;code&gt;signbitl&lt;/code&gt; 、 &lt;code&gt;signbitd32&lt;/code&gt; 、 &lt;code&gt;signbitd64&lt;/code&gt; 、 &lt;code&gt;signbitd128&lt;/code&gt; 、 &lt;code&gt;significandf&lt;/code&gt; 、 &lt;code&gt;significandl&lt;/code&gt; 、 &lt;code&gt;significand&lt;/code&gt; 、 &lt;code&gt;sincosf&lt;/code&gt; 、 &lt;code&gt;sincosl&lt;/code&gt; 、 &lt;code&gt;sincos&lt;/code&gt; 、 &lt;code&gt;stpcpy&lt;/code&gt; 、 &lt;code&gt;stpncpy&lt;/code&gt; 、 &lt;code&gt;strcasecmp&lt;/code&gt; 、 &lt;code&gt;strdup&lt;/code&gt; 、 &lt;code&gt;strfmon&lt;/code&gt; 、 &lt;code&gt;strncasecmp&lt;/code&gt; 、 &lt;code&gt;strndup&lt;/code&gt; 、 &lt;code&gt;strnlen&lt;/code&gt; 、 &lt;code&gt;toascii&lt;/code&gt; 、 &lt;code&gt;y0f&lt;/code&gt; 、 &lt;code&gt;y0l&lt;/code&gt; 、 &lt;code&gt;y0&lt;/code&gt; 、 &lt;code&gt;y1f&lt;/code&gt; 、 &lt;code&gt;y1l&lt;/code&gt; 、 &lt;code&gt;y1&lt;/code&gt; 、 &lt;code&gt;ynf&lt;/code&gt; 、 &lt;code&gt;ynl&lt;/code&gt; 、および &lt;code&gt;yn&lt;/code&gt; は、組み込み関数として処理できます。これらの関数にはすべて、対応するバージョンの前に &lt;code&gt;__builtin_&lt;/code&gt; が付いており、厳密なC90モードでも使用できます。</target>
        </trans-unit>
        <trans-unit id="d18e82cc2e16d79a4313376dbe885b7ba013e3c7" translate="yes" xml:space="preserve">
          <source>), the functions &lt;code&gt;_exit&lt;/code&gt;, &lt;code&gt;alloca&lt;/code&gt;, &lt;code&gt;bcmp&lt;/code&gt;, &lt;code&gt;bzero&lt;/code&gt;, &lt;code&gt;dcgettext&lt;/code&gt;, &lt;code&gt;dgettext&lt;/code&gt;, &lt;code&gt;dremf&lt;/code&gt;, &lt;code&gt;dreml&lt;/code&gt;, &lt;code&gt;drem&lt;/code&gt;, &lt;code&gt;exp10f&lt;/code&gt;, &lt;code&gt;exp10l&lt;/code&gt;, &lt;code&gt;exp10&lt;/code&gt;, &lt;code&gt;ffsll&lt;/code&gt;, &lt;code&gt;ffsl&lt;/code&gt;, &lt;code&gt;ffs&lt;/code&gt;, &lt;code&gt;fprintf_unlocked&lt;/code&gt;, &lt;code&gt;fputs_unlocked&lt;/code&gt;, &lt;code&gt;gammaf&lt;/code&gt;, &lt;code&gt;gammal&lt;/code&gt;, &lt;code&gt;gamma&lt;/code&gt;, &lt;code&gt;gammaf_r&lt;/code&gt;, &lt;code&gt;gammal_r&lt;/code&gt;, &lt;code&gt;gamma_r&lt;/code&gt;, &lt;code&gt;gettext&lt;/code&gt;, &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;isascii&lt;/code&gt;, &lt;code&gt;j0f&lt;/code&gt;, &lt;code&gt;j0l&lt;/code&gt;, &lt;code&gt;j0&lt;/code&gt;, &lt;code&gt;j1f&lt;/code&gt;, &lt;code&gt;j1l&lt;/code&gt;, &lt;code&gt;j1&lt;/code&gt;, &lt;code&gt;jnf&lt;/code&gt;, &lt;code&gt;jnl&lt;/code&gt;, &lt;code&gt;jn&lt;/code&gt;, &lt;code&gt;lgammaf_r&lt;/code&gt;, &lt;code&gt;lgammal_r&lt;/code&gt;, &lt;code&gt;lgamma_r&lt;/code&gt;, &lt;code&gt;mempcpy&lt;/code&gt;, &lt;code&gt;pow10f&lt;/code&gt;, &lt;code&gt;pow10l&lt;/code&gt;, &lt;code&gt;pow10&lt;/code&gt;, &lt;code&gt;printf_unlocked&lt;/code&gt;, &lt;code&gt;rindex&lt;/code&gt;, &lt;code&gt;scalbf&lt;/code&gt;, &lt;code&gt;scalbl&lt;/code&gt;, &lt;code&gt;scalb&lt;/code&gt;, &lt;code&gt;signbit&lt;/code&gt;, &lt;code&gt;signbitf&lt;/code&gt;, &lt;code&gt;signbitl&lt;/code&gt;, &lt;code&gt;signbitd32&lt;/code&gt;, &lt;code&gt;signbitd64&lt;/code&gt;, &lt;code&gt;signbitd128&lt;/code&gt;, &lt;code&gt;significandf&lt;/code&gt;, &lt;code&gt;significandl&lt;/code&gt;, &lt;code&gt;significand&lt;/code&gt;, &lt;code&gt;sincosf&lt;/code&gt;, &lt;code&gt;sincosl&lt;/code&gt;, &lt;code&gt;sincos&lt;/code&gt;, &lt;code&gt;stpcpy&lt;/code&gt;, &lt;code&gt;stpncpy&lt;/code&gt;, &lt;code&gt;strcasecmp&lt;/code&gt;, &lt;code&gt;strdup&lt;/code&gt;, &lt;code&gt;strfmon&lt;/code&gt;, &lt;code&gt;strncasecmp&lt;/code&gt;, &lt;code&gt;strndup&lt;/code&gt;, &lt;code&gt;strnlen&lt;/code&gt;, &lt;code&gt;toascii&lt;/code&gt;, &lt;code&gt;y0f&lt;/code&gt;, &lt;code&gt;y0l&lt;/code&gt;, &lt;code&gt;y0&lt;/code&gt;, &lt;code&gt;y1f&lt;/code&gt;, &lt;code&gt;y1l&lt;/code&gt;, &lt;code&gt;y1&lt;/code&gt;, &lt;code&gt;ynf&lt;/code&gt;, &lt;code&gt;ynl&lt;/code&gt; and &lt;code&gt;yn&lt;/code&gt; may be handled as built-in functions. All these functions have corresponding versions prefixed with &lt;code&gt;__builtin_&lt;/code&gt;, which may be used even in strict C90 mode.</source>
          <target state="translated">）、関数 &lt;code&gt;_exit&lt;/code&gt; 、 &lt;code&gt;alloca&lt;/code&gt; を、 &lt;code&gt;bcmp&lt;/code&gt; 、 &lt;code&gt;bzero&lt;/code&gt; 、 &lt;code&gt;dcgettext&lt;/code&gt; 、 &lt;code&gt;dgettext&lt;/code&gt; 、 &lt;code&gt;dremf&lt;/code&gt; 、 &lt;code&gt;dreml&lt;/code&gt; 、 &lt;code&gt;drem&lt;/code&gt; 、 &lt;code&gt;exp10f&lt;/code&gt; 、 &lt;code&gt;exp10l&lt;/code&gt; 、 &lt;code&gt;exp10&lt;/code&gt; 、 &lt;code&gt;ffsll&lt;/code&gt; 、 &lt;code&gt;ffsl&lt;/code&gt; 、 &lt;code&gt;ffs&lt;/code&gt; 、 &lt;code&gt;fprintf_unlocked&lt;/code&gt; 、 &lt;code&gt;fputs_unlocked&lt;/code&gt; 、 &lt;code&gt;gammaf&lt;/code&gt; 、 &lt;code&gt;gammal&lt;/code&gt; 、 &lt;code&gt;gamma&lt;/code&gt; 、 &lt;code&gt;gammaf_r&lt;/code&gt; 、 &lt;code&gt;gammal_r&lt;/code&gt; 、 &lt;code&gt;gamma_r&lt;/code&gt; 、 &lt;code&gt;gettext&lt;/code&gt; 、 &lt;code&gt;index&lt;/code&gt; 、 &lt;code&gt;isascii&lt;/code&gt; は、 &lt;code&gt;j0f&lt;/code&gt; 、 &lt;code&gt;j0l&lt;/code&gt; 、 &lt;code&gt;j0&lt;/code&gt; 、 &lt;code&gt;j1f&lt;/code&gt; 、 &lt;code&gt;j1l&lt;/code&gt; 、 &lt;code&gt;j1&lt;/code&gt; 、 &lt;code&gt;jnf&lt;/code&gt; 、 &lt;code&gt;jnl&lt;/code&gt; 、 &lt;code&gt;jn&lt;/code&gt; 、 &lt;code&gt;lgammaf_r&lt;/code&gt; 、 &lt;code&gt;lgammal_r&lt;/code&gt; 、 &lt;code&gt;lgamma_r&lt;/code&gt; 、 &lt;code&gt;mempcpy&lt;/code&gt; 、 &lt;code&gt;pow10f&lt;/code&gt; 、 &lt;code&gt;pow10l&lt;/code&gt; 、 &lt;code&gt;pow10&lt;/code&gt; 、 &lt;code&gt;printf_unlocked&lt;/code&gt; 、 &lt;code&gt;rindex&lt;/code&gt; 、 &lt;code&gt;scalbf&lt;/code&gt; 、 &lt;code&gt;scalbl&lt;/code&gt; 、 &lt;code&gt;scalb&lt;/code&gt; 、 &lt;code&gt;signbit&lt;/code&gt; 、 &lt;code&gt;signbitf&lt;/code&gt; 、 &lt;code&gt;signbitl&lt;/code&gt; 、 &lt;code&gt;signbitd32&lt;/code&gt; 、 &lt;code&gt;signbitd64&lt;/code&gt; 、 &lt;code&gt;signbitd128&lt;/code&gt; 、 &lt;code&gt;significandf&lt;/code&gt; 、 &lt;code&gt;significandl&lt;/code&gt; 、 &lt;code&gt;significand&lt;/code&gt; 、 &lt;code&gt;sincosf&lt;/code&gt; 、 &lt;code&gt;sincosl&lt;/code&gt; 、 &lt;code&gt;sincos&lt;/code&gt; 、 &lt;code&gt;stpcpy&lt;/code&gt; 、 &lt;code&gt;stpncpy&lt;/code&gt; 、 &lt;code&gt;strcasecmp&lt;/code&gt; 、 &lt;code&gt;strdup&lt;/code&gt; 、 &lt;code&gt;strfmon&lt;/code&gt; 、 &lt;code&gt;strncasecmp&lt;/code&gt; 、 &lt;code&gt;strndup&lt;/code&gt; 、 &lt;code&gt;strnlen&lt;/code&gt; 、 &lt;code&gt;toascii&lt;/code&gt; 、 &lt;code&gt;y0f&lt;/code&gt; 、 &lt;code&gt;y0l&lt;/code&gt; 、 &lt;code&gt;y0&lt;/code&gt; 、 &lt;code&gt;y1f&lt;/code&gt; 、 &lt;code&gt;y1l&lt;/code&gt; 、 &lt;code&gt;y1&lt;/code&gt; 、 &lt;code&gt;ynf&lt;/code&gt; 、 &lt;code&gt;ynl&lt;/code&gt; 、 &lt;code&gt;yn&lt;/code&gt; は組み込み関数として扱うことができます。これらのすべての関数には、 &lt;code&gt;__builtin_&lt;/code&gt; で始まる対応するバージョンがあり、厳密なC90モードでも使用できます。</target>
        </trans-unit>
        <trans-unit id="6a50cce50d0febfb570490b6c070e49f51ddec8b" translate="yes" xml:space="preserve">
          <source>), the object file name consists of the name of the source file with any suffix replaced with object file suffix and with any leading directory parts removed. If there are many included files then the rule is split into several lines using &amp;lsquo;</source>
          <target state="translated">）、オブジェクトファイル名は、サフィックスがオブジェクトファイルサフィックスに置き換えられ、先頭のディレクトリ部分が削除されたソースファイルの名前で構成されます。多くのインクルードファイルがある場合、ルールは 'を使用して数行に分割されます。</target>
        </trans-unit>
        <trans-unit id="3be8ddc45c8138713e4ff9590a244293505edbcb" translate="yes" xml:space="preserve">
          <source>), this switch only affects the &lt;code&gt;asm&lt;/code&gt; and &lt;code&gt;typeof&lt;/code&gt; keywords, since &lt;code&gt;inline&lt;/code&gt; is a standard keyword in ISO C99.</source>
          <target state="translated">）、 &lt;code&gt;inline&lt;/code&gt; はISO C99の標準キーワードであるため、このスイッチは &lt;code&gt;asm&lt;/code&gt; および &lt;code&gt;typeof&lt;/code&gt; キーワードにのみ影響します。</target>
        </trans-unit>
        <trans-unit id="ad6667c074281d3be9d0a577eef269311cbfb9cd" translate="yes" xml:space="preserve">
          <source>), this warning is enabled by default and it is made into an error by</source>
          <target state="translated">）、この警告はデフォルトで有効になっていて、エラーになります</target>
        </trans-unit>
        <trans-unit id="d41919407ce8f78b6cd89401353e39179fec9ab2" translate="yes" xml:space="preserve">
          <source>).</source>
          <target state="translated">).</target>
        </trans-unit>
        <trans-unit id="a8da6016236d20b9786efd699df04e211b746377" translate="yes" xml:space="preserve">
          <source>). Aligning variables on 32-bit boundaries produces code that runs somewhat faster on processors with 32-bit busses at the expense of more memory.</source>
          <target state="translated">）。変数を32ビット境界に整列させると、32ビットバスを搭載したプロセッサでメモリをいくらか犠牲にして、多少高速に実行されるコードが生成されます。</target>
        </trans-unit>
        <trans-unit id="010b7cdc441046d989a9ea1b15cc97865b1b6636" translate="yes" xml:space="preserve">
          <source>). Each object file&amp;rsquo;s &lt;var&gt;auxname&lt;/var&gt; is generated from the name of the output file, if explicitly specified and it is not the final executable, otherwise it is the basename of the source file. In both cases any suffix is removed (e.g.</source>
          <target state="translated">）。各オブジェクトファイルの &lt;var&gt;auxname&lt;/var&gt; は、明示的に指定されていて最終的な実行可能ファイルではない場合、出力ファイルの名前から生成されます。それ以外の場合は、ソースファイルのベース名になります。どちらの場合も、サフィックスは削除されます（例：</target>
        </trans-unit>
        <trans-unit id="6634ed39eb6b3c05c70ac15c64888e1587ddc721" translate="yes" xml:space="preserve">
          <source>). Enabled at levels</source>
          <target state="translated">）。レベルで有効</target>
        </trans-unit>
        <trans-unit id="015eb4d6e320fdcb40dde6916b75b927e7ad003c" translate="yes" xml:space="preserve">
          <source>). For example, the default is &amp;ldquo;off&amp;rdquo; for</source>
          <target state="translated">）。たとえば、デフォルトは「オフ」です。</target>
        </trans-unit>
        <trans-unit id="c13df8815400fcd95d3934f417b07b1b26f46a2a" translate="yes" xml:space="preserve">
          <source>). If the file that contains a function definition matches with one of &lt;var&gt;file&lt;/var&gt;, then that function is not instrumented. The match is done on substrings: if the &lt;var&gt;file&lt;/var&gt; parameter is a substring of the file name, it is considered to be a match.</source>
          <target state="translated">）。関数定義を含むファイルが &lt;var&gt;file&lt;/var&gt; の 1つと一致する場合、その関数は計測されません。一致は部分文字列に対して行われ &lt;var&gt;file&lt;/var&gt; パラメータがファイル名の部分文字列の場合、一致と見なされます。</target>
        </trans-unit>
        <trans-unit id="2f212a70a9e377734872d88e49501c0700d10f3e" translate="yes" xml:space="preserve">
          <source>). Note that while the throughput of the sequence is generally higher than the throughput of the non-reciprocal instruction, the precision of the sequence can be decreased by up to 2 ulp (i.e. the inverse of 1.0 equals 0.99999994) for reciprocal square roots.</source>
          <target state="translated">）。通常、シーケンスのスループットは非逆数命令のスループットよりも高くなりますが、逆数平方根の場合、シーケンスの精度は最大2 ulp（つまり、1.0の逆数が0.99999994に等しい）低下する可能性があります。</target>
        </trans-unit>
        <trans-unit id="9b164e85e3a5e96ef823e8a23d64cc8f7c10af4b" translate="yes" xml:space="preserve">
          <source>). Only a few systems support this option.</source>
          <target state="translated">）。少数のシステムのみがこのオプションをサポートしています。</target>
        </trans-unit>
        <trans-unit id="55e185f80b2ff3ddce6d7f09c20e1548417dee24" translate="yes" xml:space="preserve">
          <source>). PowerPC with</source>
          <target state="translated">）。PowerPC</target>
        </trans-unit>
        <trans-unit id="dfb510fceebf36036dd894fdfbce120124fc5b07" translate="yes" xml:space="preserve">
          <source>). Prefixes are optional, and &amp;lsquo;</source>
          <target state="translated">）。プレフィックスはオプションであり、 '</target>
        </trans-unit>
        <trans-unit id="6d10a247e2259eeac52b647017863fe87f5b993d" translate="yes" xml:space="preserve">
          <source>). See &lt;a href=&quot;cross_002dprofiling#Cross_002dprofiling&quot;&gt;Cross-profiling&lt;/a&gt;.</source>
          <target state="translated">）。&lt;a href=&quot;cross_002dprofiling#Cross_002dprofiling&quot;&gt;クロスプロファイリングを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="acde331edf16a3ec956afda9f9ff904e45d22d8e" translate="yes" xml:space="preserve">
          <source>). Similarly, Objective-C++ compilations may use C++-specific options (e.g.,</source>
          <target state="translated">）。同様に、Objective-C ++コンパイルでは、C ++固有のオプション（たとえば、</target>
        </trans-unit>
        <trans-unit id="e87d6a9687ee8b259d715c98478384173b51aa0b" translate="yes" xml:space="preserve">
          <source>). The FPXX extension mandates that all code must execute correctly when run using 32-bit or 64-bit registers. The code can be interlinked with either FP32 or FP64, but not both. The FP64A extension is similar to the FP64 extension but forbids the use of odd-numbered single-precision registers. This can be used in conjunction with the &lt;code&gt;FRE&lt;/code&gt; mode of FPUs in MIPS32R5 processors and allows both FP32 and FP64A code to interlink and run in the same process without changing FPU modes.</source>
          <target state="translated">）。FPXX拡張では、32ビットまたは64ビットのレジスターを使用して実行する場合、すべてのコードを正しく実行する必要があります。コードは、FP32またはFP64のいずれかと相互リンクできますが、両方と相互リンクすることはできません。FP64A拡張機能はFP64拡張機能に似ていますが、奇数の単精度レジスタの使用を禁止しています。これは、MIPS32R5プロセッサのFPU の &lt;code&gt;FRE&lt;/code&gt; モードと組み合わせて使用でき、FP32モードとFP64Aコードの両方をリンクして、FPUモードを変更せずに同じプロセスで実行できます。</target>
        </trans-unit>
        <trans-unit id="69623fc03f16d40bf923fc859f6aee6a12d3da3b" translate="yes" xml:space="preserve">
          <source>). The ISO C99 keyword &lt;code&gt;restrict&lt;/code&gt; is only available when</source>
          <target state="translated">）。ISO C99キーワード &lt;code&gt;restrict&lt;/code&gt; は、次の場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="58c4c654ef7ee136377ef2cafd1f5c6d8c816f58" translate="yes" xml:space="preserve">
          <source>). The number of available registers reserved for some other purposes is given by this parameter. Default of the parameter is the best found from numerous experiments.</source>
          <target state="translated">）。他の目的のために予約されている使用可能なレジスターの数は、このパラメーターによって指定されます。パラメータのデフォルトは、多くの実験から見つかった最良のものです。</target>
        </trans-unit>
        <trans-unit id="13df10237921e86399697b2a5237e0144f1e89b4" translate="yes" xml:space="preserve">
          <source>). These heuristics are based on the control flow graph. If some branch probabilities are specified by &lt;code&gt;__builtin_expect&lt;/code&gt;, then the heuristics are used to guess branch probabilities for the rest of the control flow graph, taking the &lt;code&gt;__builtin_expect&lt;/code&gt; info into account. The interactions between the heuristics and &lt;code&gt;__builtin_expect&lt;/code&gt; can be complex, and in some cases, it may be useful to disable the heuristics so that the effects of &lt;code&gt;__builtin_expect&lt;/code&gt; are easier to understand.</source>
          <target state="translated">）。これらのヒューリスティックは、制御フローグラフに基づいています。 &lt;code&gt;__builtin_expect&lt;/code&gt; によって分岐確率が指定されている場合、 &lt;code&gt;__builtin_expect&lt;/code&gt; 情報を考慮して、ヒューリスティックを使用して、残りの制御フローグラフの分岐確率を推測します。ヒューリスティックと &lt;code&gt;__builtin_expect&lt;/code&gt; の間の相互作用は複雑になる可能性があり、場合によっては、 &lt;code&gt;__builtin_expect&lt;/code&gt; の影響を理解しやすくするためにヒューリスティックを無効にすることが役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="2023f757a7ebb820a975281ad23d01e574d8eb79" translate="yes" xml:space="preserve">
          <source>). These string functions are described separately in order to group the descriptions closer to the function prototypes:</source>
          <target state="translated">）。これらの文字列関数は、関数プロトタイプに近い説明をグループ化するために個別に説明されています。</target>
        </trans-unit>
        <trans-unit id="751af366ba575d9d108cd1b4000d9ad97eaf52b1" translate="yes" xml:space="preserve">
          <source>). This flag is enabled by default at</source>
          <target state="translated">）。このフラグはデフォルトで有効になっています</target>
        </trans-unit>
        <trans-unit id="389d320cf2fd3c5618d226a643e286a8173a0850" translate="yes" xml:space="preserve">
          <source>). This option implies that the sign of a zero result isn&amp;rsquo;t significant.</source>
          <target state="translated">）。このオプションは、ゼロの結果の符号が重要ではないことを意味します。</target>
        </trans-unit>
        <trans-unit id="40cd47fb3faf85196691543d50eeceb26496714f" translate="yes" xml:space="preserve">
          <source>). Valid values are 0 (no compression) to 9 (maximum compression). Values outside this range are clamped to either 0 or 9. If the option is not given, a default balanced compression setting is used.</source>
          <target state="translated">）。有効な値は0（圧縮なし）〜9（最大圧縮）です。この範囲外の値は0または9にクランプされます。このオプションが指定されていない場合、デフォルトのバランス圧縮設定が使用されます。</target>
        </trans-unit>
        <trans-unit id="e275b6410662c14eec9fb78d9ba464e2a4ade618" translate="yes" xml:space="preserve">
          <source>). Where this option is used in conjunction with</source>
          <target state="translated">）。このオプションを一緒に使用する場合</target>
        </trans-unit>
        <trans-unit id="df74c471c52df8eca98a9d8f78604ccd98630755" translate="yes" xml:space="preserve">
          <source>). You must use this option when compiling the source files you want data about, and you must also use it when linking.</source>
          <target state="translated">）。このオプションは、データが必要なソースファイルをコンパイルするときに使用する必要があり、リンクするときにも使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="67f69ef0c07d30c0476bd886f60193097cb47f3e" translate="yes" xml:space="preserve">
          <source>):</source>
          <target state="translated">):</target>
        </trans-unit>
        <trans-unit id="59f6dde452eff2a7dd073297be960fa570d00ed5" translate="yes" xml:space="preserve">
          <source>): Should have very few false positives and few false negatives. Slightly slower than levels 1 or 2 when optimization is enabled. Takes care of the common pun+dereference pattern in the front end: &lt;code&gt;*(int*)&amp;amp;some_float&lt;/code&gt;. If optimization is enabled, it also runs in the back end, where it deals with multiple statement cases using flow-sensitive points-to information. Only warns when the converted pointer is dereferenced. Does not warn about incomplete types.</source>
          <target state="translated">）：誤検知と誤検知がほとんどないはずです。最適化が有効になっている場合、レベル1または2よりも少し遅くなります。フロントエンドで一般的なpun + dereferenceパターンを処理します： &lt;code&gt;*(int*)&amp;amp;some_float&lt;/code&gt; 。最適化が有効になっている場合は、バックエンドでも実行され、フロー依存のポイントツー情報を使用して複数のステートメントのケースを処理します。変換されたポインタが逆参照されるときにのみ警告します。不完全な型について警告しません。</target>
        </trans-unit>
        <trans-unit id="68b94bb7c80d730c9c375c35b16cf1f64733269c" translate="yes" xml:space="preserve">
          <source>*-*-linux-*android*</source>
          <target state="translated">*-*-linux-*android*</target>
        </trans-unit>
        <trans-unit id="e2b642adbe68e3ea2f08e73036fb686d4e5ecf65" translate="yes" xml:space="preserve">
          <source>*-*-linux-*musl*</source>
          <target state="translated">*-*-linux-*musl*</target>
        </trans-unit>
        <trans-unit id="7d44bb0c460c86f6ed20b427ab87b20e89c94940" translate="yes" xml:space="preserve">
          <source>*-*-linux-*uclibc*</source>
          <target state="translated">*-*-linux-*uclibc*</target>
        </trans-unit>
        <trans-unit id="feb21874a106e7fdaf91fadac43af22b0bea36ab" translate="yes" xml:space="preserve">
          <source>+&lt;var&gt;extension&lt;/var&gt;</source>
          <target state="translated">+&lt;var&gt;extension&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="dad15bd181e6b2d074037dd769cb892a10dcffa3" translate="yes" xml:space="preserve">
          <source>+Accept TypeMismatch</source>
          <target state="translated">+ TypeMismatchを受け入れる</target>
        </trans-unit>
        <trans-unit id="1deed6065d70320177e47d5803ebd38c1d1064c1" translate="yes" xml:space="preserve">
          <source>+bf16</source>
          <target state="translated">+bf16</target>
        </trans-unit>
        <trans-unit id="522000645d8a096477921f441ef9ac6b70654457" translate="yes" xml:space="preserve">
          <source>+cdecp0, +cdecp1, ... , +cdecp7</source>
          <target state="translated">+ cdecp0、+ cdecp1、...、+ cdecp7</target>
        </trans-unit>
        <trans-unit id="0245508ac3119cf85af276774b536b3c6eb57300" translate="yes" xml:space="preserve">
          <source>+crc</source>
          <target state="translated">+crc</target>
        </trans-unit>
        <trans-unit id="172554656681a361758276db1e3c43b8560fd73f" translate="yes" xml:space="preserve">
          <source>+crypto</source>
          <target state="translated">+crypto</target>
        </trans-unit>
        <trans-unit id="f593a9cfed56aa8c5b2310dadc6602a92650e09b" translate="yes" xml:space="preserve">
          <source>+dotprod</source>
          <target state="translated">+dotprod</target>
        </trans-unit>
        <trans-unit id="c8958e48ef48898eea0aeee1b68eea46b1f26e18" translate="yes" xml:space="preserve">
          <source>+dsp</source>
          <target state="translated">+dsp</target>
        </trans-unit>
        <trans-unit id="9b8ca1a7ee75f7f450c6bed427a6d3f35d9847c6" translate="yes" xml:space="preserve">
          <source>+fp</source>
          <target state="translated">+fp</target>
        </trans-unit>
        <trans-unit id="12e90b41b5bbb85590517841a4eb99cb4b8a9251" translate="yes" xml:space="preserve">
          <source>+fp.dp</source>
          <target state="translated">+fp.dp</target>
        </trans-unit>
        <trans-unit id="61e1348f2cad78b911fccf2797471ad0d18e2b02" translate="yes" xml:space="preserve">
          <source>+fp.sp</source>
          <target state="translated">+fp.sp</target>
        </trans-unit>
        <trans-unit id="3c19a7766116f6a5d109b2fea2da2b1d277f1660" translate="yes" xml:space="preserve">
          <source>+fp16</source>
          <target state="translated">+fp16</target>
        </trans-unit>
        <trans-unit id="e36321f6f8d57d187d3bc885adca3f8e1fec74a2" translate="yes" xml:space="preserve">
          <source>+fp16fml</source>
          <target state="translated">+fp16fml</target>
        </trans-unit>
        <trans-unit id="9a28b8bd1ff670d2e1d8a6d041e8af642964b47f" translate="yes" xml:space="preserve">
          <source>+fpv5</source>
          <target state="translated">+fpv5</target>
        </trans-unit>
        <trans-unit id="7ce39ba4ee1cc1051ffda53d348a9fe9ad152421" translate="yes" xml:space="preserve">
          <source>+i8mm</source>
          <target state="translated">+i8mm</target>
        </trans-unit>
        <trans-unit id="6ce605d1bb51ed3fd5a75aed8a1d4c5fce2fbd02" translate="yes" xml:space="preserve">
          <source>+idiv</source>
          <target state="translated">+idiv</target>
        </trans-unit>
        <trans-unit id="298d552ef880bc40f53842de04e0129e8d4cbb7f" translate="yes" xml:space="preserve">
          <source>+k</source>
          <target state="translated">+k</target>
        </trans-unit>
        <trans-unit id="6bb6aad86a880aa66a62f4e67215e2922bf4ed3b" translate="yes" xml:space="preserve">
          <source>+lse</source>
          <target state="translated">+lse</target>
        </trans-unit>
        <trans-unit id="d3da1bfe2d64d68808b0b119209078764008b84e" translate="yes" xml:space="preserve">
          <source>+mp</source>
          <target state="translated">+mp</target>
        </trans-unit>
        <trans-unit id="1b94f1653202ff8570cd718fc191ea9857b772c7" translate="yes" xml:space="preserve">
          <source>+mve</source>
          <target state="translated">+mve</target>
        </trans-unit>
        <trans-unit id="56830666fc0db27cb880aad66163a0de0ceb5d37" translate="yes" xml:space="preserve">
          <source>+mve.fp</source>
          <target state="translated">+mve.fp</target>
        </trans-unit>
        <trans-unit id="c660acf5e4ec641d8c613d3f784064715b71970f" translate="yes" xml:space="preserve">
          <source>+neon</source>
          <target state="translated">+neon</target>
        </trans-unit>
        <trans-unit id="8aaddfb72d070d6159cd823fe6182666f17c4053" translate="yes" xml:space="preserve">
          <source>+neon-fp16</source>
          <target state="translated">+neon-fp16</target>
        </trans-unit>
        <trans-unit id="435f84a487ef70561af83eda3e1d7dd3d2436c1c" translate="yes" xml:space="preserve">
          <source>+neon-vfpv3</source>
          <target state="translated">+neon-vfpv3</target>
        </trans-unit>
        <trans-unit id="0ac1405d972e784cdc766f54e29dbf5ab415cbc9" translate="yes" xml:space="preserve">
          <source>+neon-vfpv4</source>
          <target state="translated">+neon-vfpv4</target>
        </trans-unit>
        <trans-unit id="718b50d5dae644e3a124de95caf9ccb46a386417" translate="yes" xml:space="preserve">
          <source>+no&amp;hellip;</source>
          <target state="translated">+no&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="ce8806c0fb02e176c7399646baa9a9c06a0ab272" translate="yes" xml:space="preserve">
          <source>+nocrypto</source>
          <target state="translated">+nocrypto</target>
        </trans-unit>
        <trans-unit id="c75685c50bbed60e49ef2d3d9ba5984a9087c460" translate="yes" xml:space="preserve">
          <source>+nodsp</source>
          <target state="translated">+nodsp</target>
        </trans-unit>
        <trans-unit id="bdad84fda97226b66790281c1f74f43e25c5dc2a" translate="yes" xml:space="preserve">
          <source>+nofp</source>
          <target state="translated">+nofp</target>
        </trans-unit>
        <trans-unit id="32d14ccb6dff53c000b7d0f3c1e570e199920277" translate="yes" xml:space="preserve">
          <source>+nofp.dp</source>
          <target state="translated">+nofp.dp</target>
        </trans-unit>
        <trans-unit id="70443bdbf953fd7737440bd1233875efade5e298" translate="yes" xml:space="preserve">
          <source>+noidiv</source>
          <target state="translated">+noidiv</target>
        </trans-unit>
        <trans-unit id="a12c1141d2021a4ae5103e34f0cb2e216132188d" translate="yes" xml:space="preserve">
          <source>+nosimd</source>
          <target state="translated">+nosimd</target>
        </trans-unit>
        <trans-unit id="4563e8723e89439d475e61672e05fb7dae35dfaf" translate="yes" xml:space="preserve">
          <source>+predres</source>
          <target state="translated">+predres</target>
        </trans-unit>
        <trans-unit id="612586060d4d1d6ca16cb6e8342ccd8cd466f161" translate="yes" xml:space="preserve">
          <source>+rdma</source>
          <target state="translated">+rdma</target>
        </trans-unit>
        <trans-unit id="50c84004301c1955521d1c5085a4e86bef9ad37a" translate="yes" xml:space="preserve">
          <source>+sb</source>
          <target state="translated">+sb</target>
        </trans-unit>
        <trans-unit id="523966f68f6b5229e9feb691969161ec915c6cc9" translate="yes" xml:space="preserve">
          <source>+sec</source>
          <target state="translated">+sec</target>
        </trans-unit>
        <trans-unit id="572761324c6cd16274d84a93b069f3f7bc8d622d" translate="yes" xml:space="preserve">
          <source>+simd</source>
          <target state="translated">+simd</target>
        </trans-unit>
        <trans-unit id="85785041cf602f514b3a8b90605615166253a199" translate="yes" xml:space="preserve">
          <source>+ssbs</source>
          <target state="translated">+ssbs</target>
        </trans-unit>
        <trans-unit id="80493528a9034722885b8e9132606dd4336778f5" translate="yes" xml:space="preserve">
          <source>+vfpv2</source>
          <target state="translated">+vfpv2</target>
        </trans-unit>
        <trans-unit id="5e4ee72860cab166418a73e306a0921f5e6d4794" translate="yes" xml:space="preserve">
          <source>+vfpv3</source>
          <target state="translated">+vfpv3</target>
        </trans-unit>
        <trans-unit id="96f6116b06a306c4fe8edf91f7e6e981c085f418" translate="yes" xml:space="preserve">
          <source>+vfpv3-d16</source>
          <target state="translated">+vfpv3-d16</target>
        </trans-unit>
        <trans-unit id="efba751c5beb6a30957dc58f177e360fdd017763" translate="yes" xml:space="preserve">
          <source>+vfpv3-d16-fp16</source>
          <target state="translated">+vfpv3-d16-fp16</target>
        </trans-unit>
        <trans-unit id="2a14509c282a0dde2ff082ee3afda5e8f9d14e09" translate="yes" xml:space="preserve">
          <source>+vfpv3-fp16</source>
          <target state="translated">+vfpv3-fp16</target>
        </trans-unit>
        <trans-unit id="9b899bf3010c596d9deefcc3943f2e83ea96543a" translate="yes" xml:space="preserve">
          <source>+vfpv3xd</source>
          <target state="translated">+vfpv3xd</target>
        </trans-unit>
        <trans-unit id="e6dd5253fa77b609bac67127de01e8db18c70caa" translate="yes" xml:space="preserve">
          <source>+vfpv3xd-d16-fp16</source>
          <target state="translated">+vfpv3xd-d16-fp16</target>
        </trans-unit>
        <trans-unit id="1c9a97c629a2f14166d7a967313c8b311aaf24b4" translate="yes" xml:space="preserve">
          <source>+vfpv4</source>
          <target state="translated">+vfpv4</target>
        </trans-unit>
        <trans-unit id="f0753fa13c2da206656b61cc9e300da99d614fad" translate="yes" xml:space="preserve">
          <source>+vfpv4-d16</source>
          <target state="translated">+vfpv4-d16</target>
        </trans-unit>
        <trans-unit id="5c10b5b2cd673a0616d529aa5234b12ee7153808" translate="yes" xml:space="preserve">
          <source>,</source>
          <target state="translated">,</target>
        </trans-unit>
        <trans-unit id="0ed174b8649b3795e9bab6e28051e111ece3d5a1" translate="yes" xml:space="preserve">
          <source>, &amp;hellip;), and outputting DWARF 2 debug information at the normal level.</source>
          <target state="translated">、&amp;hellip;）、DWARF 2デバッグ情報を通常レベルで出力します。</target>
        </trans-unit>
        <trans-unit id="1e892a0963fbddbf57a2e50e77e246f310118c85" translate="yes" xml:space="preserve">
          <source>, &amp;hellip;), debugging information (</source>
          <target state="translated">、&amp;hellip;）、デバッグ情報（</target>
        </trans-unit>
        <trans-unit id="9ce3d91211464125b1a2c5c681940a8dbbed2997" translate="yes" xml:space="preserve">
          <source>, &amp;hellip;).</source>
          <target state="translated">、&amp;hellip;）。</target>
        </trans-unit>
        <trans-unit id="3637dc66fe00abd3e693687e7b9b0ff7e487e998" translate="yes" xml:space="preserve">
          <source>, ...).</source>
          <target state="translated">、...）。</target>
        </trans-unit>
        <trans-unit id="61a7b7732838fedf5448928ac9e3158a563793c4" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;dbg_cnt(dce)&lt;/code&gt; returns true only for second, third, fourth, tenth and eleventh invocation. For &lt;code&gt;dbg_cnt(tail_call)&lt;/code&gt; true is returned for first 10 invocations.</source>
          <target state="translated">、 &lt;code&gt;dbg_cnt(dce)&lt;/code&gt; は、2番目、3番目、4番目、10番目、および11番目の呼び出しに対してのみtrueを返します。 &lt;code&gt;dbg_cnt(tail_call)&lt;/code&gt; 真は最初の10回の呼び出しに対して返されます。</target>
        </trans-unit>
        <trans-unit id="e8373b7b9cf04295923fb7dd353f8cd016c13806" translate="yes" xml:space="preserve">
          <source>, &lt;code&gt;dbg_cnt(dce)&lt;/code&gt; returns true only for third and fourth invocation. For &lt;code&gt;dbg_cnt(tail_call)&lt;/code&gt; true is returned for first 10 invocations.</source>
          <target state="translated">、 &lt;code&gt;dbg_cnt(dce)&lt;/code&gt; は3番目と4番目の呼び出しに対してのみtrueを返します。 &lt;code&gt;dbg_cnt(tail_call)&lt;/code&gt; 真は最初の10回の呼び出しに対して返されます。</target>
        </trans-unit>
        <trans-unit id="f7d0cb298b65dc1dd5a8ad63030abc502d65e4a5" translate="yes" xml:space="preserve">
          <source>, &lt;var&gt;charset&lt;/var&gt; can be any encoding supported by the system&amp;rsquo;s &lt;code&gt;iconv&lt;/code&gt; library routine; however, you will have problems with encodings that do not fit exactly in &lt;code&gt;wchar_t&lt;/code&gt;.</source>
          <target state="translated">、 &lt;var&gt;charset&lt;/var&gt; は、システムの &lt;code&gt;iconv&lt;/code&gt; ライブラリルーチンでサポートされている任意のエンコーディングです。ただし、 &lt;code&gt;wchar_t&lt;/code&gt; に正確に適合しないエンコーディングでは問題が発生します。</target>
        </trans-unit>
        <trans-unit id="dacad0f81d1e260f88c4393b4848193fe16ac2b7" translate="yes" xml:space="preserve">
          <source>, &lt;var&gt;max_size&lt;/var&gt; specifies the max byte size with which inline algorithm &lt;var&gt;alg&lt;/var&gt; is allowed. For the last triplet, the &lt;var&gt;max_size&lt;/var&gt; must be &lt;code&gt;-1&lt;/code&gt;. The &lt;var&gt;max_size&lt;/var&gt; of the triplets in the list must be specified in increasing order. The minimal byte size for &lt;var&gt;alg&lt;/var&gt; is &lt;code&gt;0&lt;/code&gt; for the first triplet and &lt;code&gt;&lt;var&gt;max_size&lt;/var&gt; + 1&lt;/code&gt; of the preceding range.</source>
          <target state="translated">、 &lt;var&gt;max_size&lt;/var&gt; は、インラインアルゴリズム &lt;var&gt;alg&lt;/var&gt; が許可される最大バイトサイズを指定します。最後のトリプレットの場合、 &lt;var&gt;max_size&lt;/var&gt; は &lt;code&gt;-1&lt;/code&gt; でなければなりません。リスト内のトリプレットの &lt;var&gt;max_size&lt;/var&gt; は、昇順で指定する必要があります。 &lt;var&gt;alg&lt;/var&gt; の最小バイトサイズは、最初のトリプレットでは &lt;code&gt;0&lt;/code&gt; 、前の範囲の &lt;code&gt;&lt;var&gt;max_size&lt;/var&gt; + 1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f9690121c5628f2c0341ffa6132d72efc83193d9" translate="yes" xml:space="preserve">
          <source>, GCC assumes that doubles have 8-byte alignment only if they are contained in another type, or if they have an absolute address. Otherwise, it assumes they have 4-byte alignment. Specifying this option avoids some rare compatibility problems with code generated by other compilers. It is not the default because it results in a performance loss, especially for floating-point code.</source>
          <target state="translated">、GCCは、doubleが別の型に含まれている場合、または絶対アドレスがある場合にのみ、doubleが8バイトアラインメントを持っていると想定します。それ以外の場合は、4バイト境界で整列されていると見なされます。このオプションを指定すると、他のコンパイラーによって生成されたコードとのいくつかのまれな互換性の問題を回避できます。特に浮動小数点コードの場合、パフォーマンスが低下するため、デフォルトではありません。</target>
        </trans-unit>
        <trans-unit id="91d079c553ba54a17781d7096ca0de1c9399ce98" translate="yes" xml:space="preserve">
          <source>, GCC assumes that the stack pointer, and frame pointer if present, are offset by -2047 which must be added back when making stack frame references. This is the default in 64-bit mode. Otherwise, assume no such offset is present.</source>
          <target state="translated">、GCCは、スタックポインター、および存在する場合はフレームポインターが-2047オフセットされていると想定します。これは、スタックフレーム参照を作成するときに追加する必要があります。これは、64ビットモードのデフォルトです。それ以外の場合は、そのようなオフセットが存在しないと想定します。</target>
        </trans-unit>
        <trans-unit id="32d107fd8d29cc4e25c76f6bc2b8616923401802" translate="yes" xml:space="preserve">
          <source>, GCC defaults to whichever convention is standard for the target. If there is no standard convention, GCC defaults to</source>
          <target state="translated">、GCCはデフォルトで、ターゲットの標準である規則を使用します。標準規約がない場合、GCCはデフォルトで</target>
        </trans-unit>
        <trans-unit id="a2827008d6317586583dcd9e0510d8d39bdf6108" translate="yes" xml:space="preserve">
          <source>, GCC generates code for the GR6 variant of the Visium architecture. The only difference from GR5 code is that the compiler will generate block move instructions.</source>
          <target state="translated">GCCは、VisiumアーキテクチャのGR6バリアントのコードを生成します。GR5コードとの唯一の違いは、コンパイラーがブロック移動命令を生成することです。</target>
        </trans-unit>
        <trans-unit id="682c348ce24eeeb97abc0387035df3b607a2756f" translate="yes" xml:space="preserve">
          <source>, GCC generates code for the SPARC-V8+ ABI. The difference from the V8 ABI is that the global and out registers are considered 64 bits wide. This is enabled by default on Solaris in 32-bit mode for all SPARC-V9 processors.</source>
          <target state="translated">、GCCはSPARC-V8 + ABIのコードを生成します。V8 ABIとの違いは、グローバルレジスタと出力レジスタが64ビット幅と見なされることです。これは、すべてのSPARC-V9プロセッサで、32ビットモードのSolarisのデフォルトで有効になっています。</target>
        </trans-unit>
        <trans-unit id="5be22faf79e798733855688a8ebf060dd61b85ec" translate="yes" xml:space="preserve">
          <source>, GCC generates code for the SPARClet variant of the SPARC architecture. This adds the integer multiply, multiply/accumulate, integer divide step and scan (&lt;code&gt;ffs&lt;/code&gt;) instructions which exist in SPARClet but not in SPARC-V7. With</source>
          <target state="translated">GCCは、SPARCアーキテクチャのSPARCletバリアントのコードを生成します。これにより、 &lt;code&gt;ffs&lt;/code&gt; には存在するがSPARC-V7には存在しない整数乗算、乗算/累算、整数除算ステップおよびスキャン（ffs）命令が追加されます。と</target>
        </trans-unit>
        <trans-unit id="246eb4b1205aee50122a8441dd133501e413f7d4" translate="yes" xml:space="preserve">
          <source>, GCC generates code for the SPARClite variant of the SPARC architecture. This adds the integer multiply, integer divide step and scan (&lt;code&gt;ffs&lt;/code&gt;) instructions which exist in SPARClite but not in SPARC-V7. With</source>
          <target state="translated">GCCは、SPARCアーキテクチャのSPARCliteバリアントのコードを生成します。これにより、 &lt;code&gt;ffs&lt;/code&gt; には存在するがSPARC-V7には存在しない整数乗算、整数除算ステップおよびスキャン（ffs）命令が追加されます。と</target>
        </trans-unit>
        <trans-unit id="5ea3b70bf876bbac6bd786d282b058e0a48e593e" translate="yes" xml:space="preserve">
          <source>, GCC generates code for the V8 variant of the SPARC architecture. The only difference from V7 code is that the compiler emits the integer multiply and integer divide instructions which exist in SPARC-V8 but not in SPARC-V7. With</source>
          <target state="translated">GCCは、SPARCアーキテクチャのV8バリアントのコードを生成します。V7コードとの唯一の違いは、コンパイラーがSPARC-V8には存在するがSPARC-V7には存在しない整数乗算および整数除算命令を発行することです。と</target>
        </trans-unit>
        <trans-unit id="d35cc98b9577afb980907076a54d84b7ee83c49b" translate="yes" xml:space="preserve">
          <source>, GCC generates code for the V9 variant of the SPARC architecture. This adds 64-bit integer and floating-point move instructions, 3 additional floating-point condition code registers and conditional move instructions. With</source>
          <target state="translated">GCCは、SPARCアーキテクチャのV9バリアントのコードを生成します。これにより、64ビット整数と浮動小数点の移動命令、3つの追加の浮動小数点条件コードレジスタ、条件付き移動命令が追加されます。と</target>
        </trans-unit>
        <trans-unit id="6f52fa8335df2d3bb842c72b269dbd31476ebe55" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of the Floating-point Multiply Single to Double (FsMULd) instruction. The default is</source>
          <target state="translated">、GCCは、浮動小数点乗算シングルからダブル（FsMULd）命令を利用するコードを生成します。デフォルトは</target>
        </trans-unit>
        <trans-unit id="1475f8fe9a2a4d3740626e73d0883412752df34d" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of the UltraSPARC Compare-and-Branch-on-Condition instructions. The default is</source>
          <target state="translated">、GCCは、UltraSPARC Compare-and-Branch-on-Condition命令を利用するコードを生成します。デフォルトは</target>
        </trans-unit>
        <trans-unit id="a1d737bb2dcd98336bc50c965bd13e7436a7dd37" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of the UltraSPARC Fused Multiply-Add Floating-point instructions. The default is</source>
          <target state="translated">、GCCは、UltraSPARC融合型積和浮動小数点命令を利用するコードを生成します。デフォルトは</target>
        </trans-unit>
        <trans-unit id="d23766f73710826fb3194882a59b3abf6466a524" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of the UltraSPARC Population Count instruction. The default is</source>
          <target state="translated">GCCは、UltraSPARC Population Count命令を利用するコードを生成します。デフォルトは</target>
        </trans-unit>
        <trans-unit id="ef6c463793daa79795e5bac108508d4c88d9bbdb" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of the UltraSPARC Subtract-Extended-with-Carry instruction. The default is</source>
          <target state="translated">、GCCは、UltraSPARC Subtract-Extended-with-Carry命令を利用するコードを生成します。デフォルトは</target>
        </trans-unit>
        <trans-unit id="3ca4c46815c6d5d35fbb9551d58365f816e41479" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of the UltraSPARC Visual Instruction Set extensions. The default is</source>
          <target state="translated">GCCは、UltraSPARC Visual Instruction Set拡張機能を利用するコードを生成します。デフォルトは</target>
        </trans-unit>
        <trans-unit id="cd5db5aaa75f0186e12c2a3c5260dce368624e0c" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of version 2.0 of the UltraSPARC Visual Instruction Set extensions. The default is</source>
          <target state="translated">GCCは、UltraSPARC Visual Instruction Set拡張機能のバージョン2.0を利用するコードを生成します。デフォルトは</target>
        </trans-unit>
        <trans-unit id="2806fca697379e7dde9c87801608b121305c7d2b" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of version 3.0 of the UltraSPARC Visual Instruction Set extensions. The default is</source>
          <target state="translated">GCCは、UltraSPARC Visual Instruction Set拡張機能のバージョン3.0を利用するコードを生成します。デフォルトは</target>
        </trans-unit>
        <trans-unit id="ba290b8a2744f98c0c8c96a2dd45eb3cf029cb39" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of version 4.0 of the UltraSPARC Visual Instruction Set extensions, plus the additional VIS instructions introduced in the Oracle SPARC Architecture 2017. The default is</source>
          <target state="translated">、GCCは、UltraSPARC Visual Instruction Set拡張のバージョン4.0に加えて、Oracle SPARC Architecture 2017で導入された追加のVIS命令を利用するコードを生成します。デフォルトは</target>
        </trans-unit>
        <trans-unit id="18714e7f456c9768e056f11bedffefc81537d103" translate="yes" xml:space="preserve">
          <source>, GCC generates code that takes advantage of version 4.0 of the UltraSPARC Visual Instruction Set extensions. The default is</source>
          <target state="translated">GCCは、UltraSPARC Visual Instruction Set拡張機能のバージョン4.0を利用するコードを生成します。デフォルトは</target>
        </trans-unit>
        <trans-unit id="18afbe646df06ef482b90a4ea8101ba75a14fb36" translate="yes" xml:space="preserve">
          <source>, GCC links your program against startup code that assumes a C99-style interface to &lt;code&gt;main&lt;/code&gt;, including a local copy of &lt;code&gt;argv&lt;/code&gt; strings.</source>
          <target state="translated">、GCCは、 &lt;code&gt;argv&lt;/code&gt; 文字列のローカルコピーを含む、C99スタイルのインターフェイスを &lt;code&gt;main&lt;/code&gt; に想定するスタートアップコードに対してプログラムをリンクします。</target>
        </trans-unit>
        <trans-unit id="4b0d7b4c7ae6e8aba0c9f72af55f5d304c58fb90" translate="yes" xml:space="preserve">
          <source>, GCC puts a &amp;lsquo;</source>
          <target state="translated">、GCCは「</target>
        </trans-unit>
        <trans-unit id="dbb40763e80347d1210476d472706d4ce77f51a6" translate="yes" xml:space="preserve">
          <source>, GCC searches</source>
          <target state="translated">、GCC検索</target>
        </trans-unit>
        <trans-unit id="ae1262a6470e2ff7634d806e9ee5903d47af8ad6" translate="yes" xml:space="preserve">
          <source>, GOT offsets are computed with 32 bits. With a &amp;lsquo;</source>
          <target state="translated">、GOTオフセットは32ビットで計算されます。とともに '</target>
        </trans-unit>
        <trans-unit id="398ba4aaa11c3bac9f0e3777574e92dc704d4bf0" translate="yes" xml:space="preserve">
          <source>, a library of internal subroutines which GCC uses to overcome shortcomings of particular machines, or special needs for some languages. (See &lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gccint/Interface.html#Interface&quot;&gt;Interfacing to GCC Output&lt;/a&gt; in GNU Compiler Collection (GCC) Internals, for more discussion of</source>
          <target state="translated">、GCCが特定のマシンの欠点、または一部の言語の特別なニーズを克服するために使用する内部サブルーチンのライブラリ。（詳細については、GNU Compiler Collection（GCC）Internalsの&lt;a href=&quot;http://gcc.gnu.org/onlinedocs/gccint/Interface.html#Interface&quot;&gt;GCC出力へのインターフェースを&lt;/a&gt;参照してください）</target>
        </trans-unit>
        <trans-unit id="58f77b34e40291c68cd5f9eb195333d97f9c0b55" translate="yes" xml:space="preserve">
          <source>, a precompiled header file in</source>
          <target state="translated">、のプリコンパイル済みヘッダーファイル</target>
        </trans-unit>
        <trans-unit id="902dbfb563932162e68ce134dadacceccbcb8994" translate="yes" xml:space="preserve">
          <source>, allowing at most a 16-bit offset for pc-relative addressing.</source>
          <target state="translated">、pc相対アドレス指定で最大16ビットのオフセットを許可します。</target>
        </trans-unit>
        <trans-unit id="22ce94eca248d227adc561294eae08de77e080fa" translate="yes" xml:space="preserve">
          <source>, allowing the exception to be raised, unless C2X or a later C standard is selected. This option does nothing unless</source>
          <target state="translated">、C2X以降のC標準が選択されていない限り、例外を発生させることができます。このオプションは、</target>
        </trans-unit>
        <trans-unit id="ee68baaad88f470b7b533567d25dcdc3a379ac30" translate="yes" xml:space="preserve">
          <source>, allowing the exception to be raised. This option does nothing unless</source>
          <target state="translated">、例外を発生させることができます。このオプションは、以下を行わない限り何もしません</target>
        </trans-unit>
        <trans-unit id="6a9e05e836489ac9950ec8969e19d268991d8395" translate="yes" xml:space="preserve">
          <source>, along with options to silence warnings, and omitting other options that would cause the compiler to produce output to files or to standard output as a side effect. Dump files and preserved temporary files are renamed so as to contain the &lt;code&gt;.gk&lt;/code&gt; additional extension during the second compilation, to avoid overwriting those generated by the first.</source>
          <target state="translated">、警告を非表示にするオプションとともに、コンパイラが副作用としてファイルまたは標準出力に出力を生成する原因となる他のオプションを省略します。ダンプファイルと保存された一時ファイルは、2回目のコンパイル時に追加の &lt;code&gt;.gk&lt;/code&gt; 拡張子が含まれるように名前が変更され、最初のコンパイルで生成されたファイルの上書きを回避します。</target>
        </trans-unit>
        <trans-unit id="b7934c6ea7ba618a96b99457fbe7b3b543c732ec" translate="yes" xml:space="preserve">
          <source>, also deprecate if the class has a user-provided destructor.</source>
          <target state="translated">、クラスにユーザー指定のデストラクタがあるかどうかも廃止します。</target>
        </trans-unit>
        <trans-unit id="6f80346a34a1c0832eaef10e9fb85d47cd2333b2" translate="yes" xml:space="preserve">
          <source>, an accompanying</source>
          <target state="translated">、付随</target>
        </trans-unit>
        <trans-unit id="8278d2adba7612cf98a492d21a4ac4c78acb1202" translate="yes" xml:space="preserve">
          <source>, and</source>
          <target state="translated">、および</target>
        </trans-unit>
        <trans-unit id="f426f972d9e2e410d1cd265b7d8eb71579d193d3" translate="yes" xml:space="preserve">
          <source>, and &amp;lsquo;</source>
          <target state="translated">、および '</target>
        </trans-unit>
        <trans-unit id="23adf1a81d00b9577caedac00d8bb053cb588e55" translate="yes" xml:space="preserve">
          <source>, and &lt;var&gt;Mod&lt;/var&gt; references a variable &lt;var&gt;Var&lt;/var&gt; that is no bigger than &lt;var&gt;num&lt;/var&gt; bytes, you must make sure that &lt;var&gt;Var&lt;/var&gt; is placed in a small data section. If &lt;var&gt;Var&lt;/var&gt; is defined by another module, you must either compile that module with a high-enough</source>
          <target state="translated">、および &lt;var&gt;Mod&lt;/var&gt; が &lt;var&gt;num&lt;/var&gt; バイト以下の変数 &lt;var&gt;Var&lt;/var&gt; を参照する場合、 &lt;var&gt;Var&lt;/var&gt; が小さなデータセクションに配置されていることを確認する必要があります。 &lt;var&gt;Var&lt;/var&gt; が別のモジュールによって定義されている場合は、そのモジュールを十分に高いレベルでコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="743749c4efffebe81ffd20a194825f3fc850b511" translate="yes" xml:space="preserve">
          <source>, and add the resulting directory to the include search path.</source>
          <target state="translated">、結果のディレクトリをインクルード検索パスに追加します。</target>
        </trans-unit>
        <trans-unit id="a16ad3ad201ad0e9edb67f4182af2991296c2f83" translate="yes" xml:space="preserve">
          <source>, and all preprocessed C source on standard output.</source>
          <target state="translated">、およびすべての前処理済みCソースが標準出力に出力されます。</target>
        </trans-unit>
        <trans-unit id="90ed666d7d769802b6beda7c0dcee29960956ee6" translate="yes" xml:space="preserve">
          <source>, and by</source>
          <target state="translated">、および</target>
        </trans-unit>
        <trans-unit id="d71752f09e96fc62366114cf7f0e7ed6dfc15ba5" translate="yes" xml:space="preserve">
          <source>, and can be disabled with</source>
          <target state="translated">、無効にすることができます</target>
        </trans-unit>
        <trans-unit id="47e2ece9623c1b6de007925f8291dd7e268326a4" translate="yes" xml:space="preserve">
          <source>, and is now deprecated in favor of that option.</source>
          <target state="translated">、そしてそのオプションのために廃止されました。</target>
        </trans-unit>
        <trans-unit id="6c621a5f8adf6dadb74b46610241e3bcd04d2e32" translate="yes" xml:space="preserve">
          <source>, and is the default for GCC on most targets. On the other hand, this behavior is not required by ISO C, and on some targets may carry a speed or code size penalty on variable references.</source>
          <target state="translated">、およびほとんどのターゲットのGCCのデフォルトです。一方、この動作はISO Cでは必要ありません。一部のターゲットでは、変数参照で速度またはコードサイズのペナルティが発生する場合があります。</target>
        </trans-unit>
        <trans-unit id="88a5ea6b58f23701d3aa4146ace54029e8823718" translate="yes" xml:space="preserve">
          <source>, and only available for ARCv1 cores. This option is deprecated.</source>
          <target state="translated">、およびARCv1コアでのみ使用できます。このオプションは非推奨です。</target>
        </trans-unit>
        <trans-unit id="e5ab43e0a511e4b70fca32e88c0c091a1d3e78b1" translate="yes" xml:space="preserve">
          <source>, and others.</source>
          <target state="translated">、 その他。</target>
        </trans-unit>
        <trans-unit id="9e6256dac04a1e70e1c010f7986affe3cfbc4b96" translate="yes" xml:space="preserve">
          <source>, and put each precompiled header in the directory, perhaps using</source>
          <target state="translated">、および各プリコンパイル済みヘッダーをディレクトリに配置します。</target>
        </trans-unit>
        <trans-unit id="c2c2c76da72f0a333b5ed5016704ad851d0c39af" translate="yes" xml:space="preserve">
          <source>, and suppresses warnings with an implicit</source>
          <target state="translated">、および暗黙の警告を抑制します</target>
        </trans-unit>
        <trans-unit id="34f17ce4557bcdf5b55dbd872b85dc9b982eafa1" translate="yes" xml:space="preserve">
          <source>, and the only difference between the options is the value of &lt;code&gt;__STDC_VERSION__&lt;/code&gt;.</source>
          <target state="translated">、およびオプション間の唯一の違いは &lt;code&gt;__STDC_VERSION__&lt;/code&gt; の値です。</target>
        </trans-unit>
        <trans-unit id="96e931096776aece1fe3f0a9e4be616b683405e9" translate="yes" xml:space="preserve">
          <source>, and this one:</source>
          <target state="translated">、そしてこれ：</target>
        </trans-unit>
        <trans-unit id="cd3dd540d5521b3057c598f6eda65b92201d0fe0" translate="yes" xml:space="preserve">
          <source>, and this option is required to enable them.</source>
          <target state="translated">、およびこれらを有効にするには、このオプションが必要です。</target>
        </trans-unit>
        <trans-unit id="e7d139345f8f88ea2b0370b518948a4897eef2d7" translate="yes" xml:space="preserve">
          <source>, and thus is only supported on targets that have support for</source>
          <target state="translated">、したがって、サポートされているターゲットでのみサポートされます</target>
        </trans-unit>
        <trans-unit id="b113e8bcc5e9f320f4732a36fdcbc4f0f5e0d09c" translate="yes" xml:space="preserve">
          <source>, and/or</source>
          <target state="translated">、および/または</target>
        </trans-unit>
        <trans-unit id="c57f45466533085df41649cdee0f603a5cb41c26" translate="yes" xml:space="preserve">
          <source>, any</source>
          <target state="translated">、 どれか</target>
        </trans-unit>
        <trans-unit id="866ed9c2b2d2bad8e5d74a3106d1846d7046ccca" translate="yes" xml:space="preserve">
          <source>, are also relevant for C++ programs. See &lt;a href=&quot;c-dialect-options#C-Dialect-Options&quot;&gt;Options Controlling C Dialect&lt;/a&gt;.</source>
          <target state="translated">、C ++プログラムにも関連します。&lt;a href=&quot;c-dialect-options#C-Dialect-Options&quot;&gt;C方言を制御するオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="51481c8b24c31c23ddc1a3abcf6ba83a1ef51299" translate="yes" xml:space="preserve">
          <source>, are ignored.</source>
          <target state="translated">、無視されます。</target>
        </trans-unit>
        <trans-unit id="79a943208a4fedad276a1aa123b394ce668bbff3" translate="yes" xml:space="preserve">
          <source>, are ignored. The standard startup files are used normally, unless</source>
          <target state="translated">、無視されます。標準の起動ファイルは、以下の場合を除き、通常どおり使用されます</target>
        </trans-unit>
        <trans-unit id="6379405f41516ac12b0f4139833678105195c0a4" translate="yes" xml:space="preserve">
          <source>, as a collection of messages with source file, line number and column number, with the following additional data for each message:</source>
          <target state="translated">、ソースファイル、行番号、列番号を含むメッセージのコレクションとして、メッセージごとに次の追加データが含まれます</target>
        </trans-unit>
        <trans-unit id="fb00d545d0d5607110a98e502d1a1edbbdaa2098" translate="yes" xml:space="preserve">
          <source>, as the CR16C architecture does not support the far data model.</source>
          <target state="translated">、CR16Cアーキテクチャはfarデータモデルをサポートしていないため。</target>
        </trans-unit>
        <trans-unit id="5b479d70daa1736f38f38cdacfc0aca31404acb9" translate="yes" xml:space="preserve">
          <source>, as well as</source>
          <target state="translated">、 と同様</target>
        </trans-unit>
        <trans-unit id="33d60ffd6d107c4c32d8b7981fa36d4a32ef8dab" translate="yes" xml:space="preserve">
          <source>, as well as by</source>
          <target state="translated">、および</target>
        </trans-unit>
        <trans-unit id="399b3f0e115711c4cd717ca3bbb79382e386fd0b" translate="yes" xml:space="preserve">
          <source>, because this passes the entire string as a single argument, which is not what the linker expects.</source>
          <target state="translated">、これは文字列全体を単一の引数として渡すため、リンカが期待するものとは異なります。</target>
        </trans-unit>
        <trans-unit id="865e3dfce7701d87918161573fe82bb85b8c9703" translate="yes" xml:space="preserve">
          <source>, but additionally asserts that the program being compiled does not perform any floating-point operations. This option is presently supported only by some bare-metal MIPS configurations, where it may select a special set of libraries that lack all floating-point support (including, for example, the floating-point &lt;code&gt;printf&lt;/code&gt; formats). If code compiled with</source>
          <target state="translated">が、さらに、コンパイルされるプログラムが浮動小数点演算を実行しないことを表明します。このオプションは現在、一部のベアメタルMIPS構成でのみサポートされており、すべての浮動小数点サポート（たとえば、浮動小数点 &lt;code&gt;printf&lt;/code&gt; 形式を含む）を欠くライブラリの特別なセットを選択する場合があります。コードをコンパイルした場合</target>
        </trans-unit>
        <trans-unit id="e44afa57519c3ebb51125bff96010b68f9e7c42e" translate="yes" xml:space="preserve">
          <source>, but after any paths given with</source>
          <target state="translated">、ただしで与えられたパスの後</target>
        </trans-unit>
        <trans-unit id="da29ebe06aeaf8eeb2af99d65acf35ce314f7a2d" translate="yes" xml:space="preserve">
          <source>, but causes CSE to follow jumps that conditionally skip over blocks. When CSE encounters a simple &lt;code&gt;if&lt;/code&gt; statement with no else clause,</source>
          <target state="translated">、ただし条件付きでブロックをスキップするジャンプをCSEが実行するようにします。CSEがelse句のない単純な &lt;code&gt;if&lt;/code&gt; ステートメントに遭遇すると、</target>
        </trans-unit>
        <trans-unit id="cc018337da61987ae8a9683d2e8189ee04860e67" translate="yes" xml:space="preserve">
          <source>, but debug insns may get (non-overlapping) uids above it if the reserved range is exhausted.</source>
          <target state="translated">ただし、予約された範囲を使い果たした場合、debug insnsはその上に（重複しない）uidを取得する場合があります。</target>
        </trans-unit>
        <trans-unit id="005377f41b9be83224f58308ed6955447f64b6d1" translate="yes" xml:space="preserve">
          <source>, but does not override the pipeline info. This helps reduce code size while still giving good performance.</source>
          <target state="translated">、ただしパイプライン情報はオーバーライドしません。これにより、コードサイズを削減しながら、優れたパフォーマンスを実現できます。</target>
        </trans-unit>
        <trans-unit id="594ba3ce9f3f33a1e11308ab98fb068b622db145" translate="yes" xml:space="preserve">
          <source>, but emit only the macro names, not their expansions.</source>
          <target state="translated">、ただし、展開ではなくマクロ名のみを出力します。</target>
        </trans-unit>
        <trans-unit id="2d142b0d539e9cf1b604cc78dc509f4e7229fde5" translate="yes" xml:space="preserve">
          <source>, but is enabled by</source>
          <target state="translated">、しかしによって有効になります</target>
        </trans-unit>
        <trans-unit id="8fc78f584be2b6aad9e5e5043f9934d5b9b136e4" translate="yes" xml:space="preserve">
          <source>, but it quotes any characters which are special to Make. &lt;code&gt;-MQ '$(objpfx)foo.o'&lt;/code&gt; gives</source>
          <target state="translated">、しかしそれはMakeに特別などんな文字でも引用します。 &lt;code&gt;-MQ '$(objpfx)foo.o'&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="4c4a33264da0720530175142264eac24f6ae7161" translate="yes" xml:space="preserve">
          <source>, but not</source>
          <target state="translated">、 だがしかし</target>
        </trans-unit>
        <trans-unit id="bddcaf1db7854ec894bd29481c117d0421a3605f" translate="yes" xml:space="preserve">
          <source>, but not at</source>
          <target state="translated">、しかしではない</target>
        </trans-unit>
        <trans-unit id="9c0770373d31ca6185df409b28c1a619d6e08d53" translate="yes" xml:space="preserve">
          <source>, but not other header files. The value &amp;lsquo;</source>
          <target state="translated">、他のヘッダーファイルは含まれません。値 '</target>
        </trans-unit>
        <trans-unit id="159001fe4af9e263248a6b95afa82d085080520c" translate="yes" xml:space="preserve">
          <source>, but not to skip more bytes than the size of the function.</source>
          <target state="translated">、ただし、関数のサイズより多くのバイトをスキップしません。</target>
        </trans-unit>
        <trans-unit id="d958259abb765b7f6d8dcadea03974d1a2f40bf6" translate="yes" xml:space="preserve">
          <source>, but not with</source>
          <target state="translated">、ただし</target>
        </trans-unit>
        <trans-unit id="b216118818bb69b17957ca8878a61bc6b92bed60" translate="yes" xml:space="preserve">
          <source>, but only print for the WPA phase of Link Time Optimization.</source>
          <target state="translated">、ただし、リンク時最適化のWPAフェーズについてのみ印刷します。</target>
        </trans-unit>
        <trans-unit id="10b9fa8743d25bb5cfe8b2ca7a4124de9956e85d" translate="yes" xml:space="preserve">
          <source>, but only print for the WPA phase of link-time optimization.</source>
          <target state="translated">、ただし、リンク時間最適化のWPAフェーズでのみ印刷します。</target>
        </trans-unit>
        <trans-unit id="4e35d7567098d27b15b90e10171d5a8dcf120925" translate="yes" xml:space="preserve">
          <source>, but pass linker options to locate initialized data at 0x40000000 and zero-initialized data at 0x80000000.</source>
          <target state="translated">ただし、リンカーオプションを渡して、初期化されたデータを0x40000000に、ゼロで初期化されたデータを0x80000000に配置します。</target>
        </trans-unit>
        <trans-unit id="6f70c180932b6b9e56fc718a1092901e76994fec" translate="yes" xml:space="preserve">
          <source>, but requests an additional pass of instruction scheduling after register allocation has been done. This is especially useful on machines with a relatively small number of registers and where memory load instructions take more than one cycle.</source>
          <target state="translated">、しかしレジスタ割り当てが行われた後、命令スケジューリングの追加パスを要求します。これは、レジスタの数が比較的少なく、メモリロード命令が1サイクル以上かかるマシンで特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="830b9851b653de89541a42c034a463a6fc26cd47" translate="yes" xml:space="preserve">
          <source>, but searches for a program such as &lt;code&gt;cpp&lt;/code&gt;.</source>
          <target state="translated">、ただし &lt;code&gt;cpp&lt;/code&gt; などのプログラムを検索します。</target>
        </trans-unit>
        <trans-unit id="d72133be23d29e86bec8e3866d2ef1a66344d808" translate="yes" xml:space="preserve">
          <source>, but the default can be overridden by configuring GCC with</source>
          <target state="translated">ですが、GCCを設定してデフォルトを上書きできます。</target>
        </trans-unit>
        <trans-unit id="387e7f946ae452eacdf73af60a95f99f5b4e63e8" translate="yes" xml:space="preserve">
          <source>, but the extension options do not affect the tuning of the generated code.</source>
          <target state="translated">ただし、拡張オプションは、生成されたコードのチューニングには影響しません。</target>
        </trans-unit>
        <trans-unit id="2b9a159b4f28ed957d67b57c420c44a30c73f5f0" translate="yes" xml:space="preserve">
          <source>, but the generated position-independent code can be only linked into executables. Usually these options are used to compile code that will be linked using the</source>
          <target state="translated">ただし、生成された位置に依存しないコードは、実行可能ファイルにのみリンクできます。通常、これらのオプションは、を使用してリンクされるコードをコンパイルするために使用されます</target>
        </trans-unit>
        <trans-unit id="ce00db4a928b7a01e2c8e7726b40ed1e61c2d0a0" translate="yes" xml:space="preserve">
          <source>, but the only useful values are those that select a particular CPU implementation. Those are &amp;lsquo;</source>
          <target state="translated">ただし、有用な値は、特定のCPU実装を選択する値のみです。それらは '</target>
        </trans-unit>
        <trans-unit id="8192753a9d1c499d01af47f83e4414507c8efbb8" translate="yes" xml:space="preserve">
          <source>, but the scheduling parameters set by</source>
          <target state="translated">、しかしによって設定されたスケジューリングパラメータ</target>
        </trans-unit>
        <trans-unit id="b748f41055c10d610a28ba47d6bb381220696d14" translate="yes" xml:space="preserve">
          <source>, but there are a few exceptions. GCC requires the freestanding environment provide &lt;code&gt;memcpy&lt;/code&gt;, &lt;code&gt;memmove&lt;/code&gt;, &lt;code&gt;memset&lt;/code&gt; and &lt;code&gt;memcmp&lt;/code&gt;. Finally, if &lt;code&gt;__builtin_trap&lt;/code&gt; is used, and the target does not implement the &lt;code&gt;trap&lt;/code&gt; pattern, then GCC emits a call to &lt;code&gt;abort&lt;/code&gt;.</source>
          <target state="translated">、ただしいくつかの例外があります。GCCは、 &lt;code&gt;memcpy&lt;/code&gt; 、 &lt;code&gt;memmove&lt;/code&gt; 、 &lt;code&gt;memset&lt;/code&gt; 、および &lt;code&gt;memcmp&lt;/code&gt; を提供する独立した環境を必要とします。最後に、 &lt;code&gt;__builtin_trap&lt;/code&gt; が使用され、ターゲットが &lt;code&gt;trap&lt;/code&gt; パターンを実装していない場合、GCCは &lt;code&gt;abort&lt;/code&gt; の呼び出しを発行します。</target>
        </trans-unit>
        <trans-unit id="e915a38ee11f159ae6606fe3c6ba38c9e85ffd1a" translate="yes" xml:space="preserve">
          <source>, but this can be overridden at configure time using</source>
          <target state="translated">、しかしこれは設定時に上書きすることができます</target>
        </trans-unit>
        <trans-unit id="4ff7f24239f93384ee139821001cb13bd9242f98" translate="yes" xml:space="preserve">
          <source>, but this option sets the list of function names to be excluded from instrumentation. The function name to be matched is its user-visible name, such as &lt;code&gt;vector&amp;lt;int&amp;gt; blah(const vector&amp;lt;int&amp;gt; &amp;amp;)&lt;/code&gt;, not the internal mangled name (e.g., &lt;code&gt;_Z4blahRSt6vectorIiSaIiEE&lt;/code&gt;). The match is done on substrings: if the &lt;var&gt;sym&lt;/var&gt; parameter is a substring of the function name, it is considered to be a match. For C99 and C++ extended identifiers, the function name must be given in UTF-8, not using universal character names.</source>
          <target state="translated">ただし、このオプションは、インストルメンテーションから除外される関数名のリストを設定します。照合される関数名は、内部で &lt;code&gt;_Z4blahRSt6vectorIiSaIiEE&lt;/code&gt; 名前（例：_Z4blahRSt6vectorIiSaIiEE）ではなく、 &lt;code&gt;vector&amp;lt;int&amp;gt; blah(const vector&amp;lt;int&amp;gt; &amp;amp;)&lt;/code&gt; などのユーザーに表示される名前です。一致は部分文字列に対して行われます &lt;var&gt;sym&lt;/var&gt; パラメータが関数名の部分文字列である場合、一致と見なされます。C99およびC ++拡張識別子の場合、ユニバーサル文字名を使用せずに、関数名をUTF-8で指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="b4b542e5e2900b33582894496dd2fb25f7a186a1" translate="yes" xml:space="preserve">
          <source>, callers of such functions use an inlined PLT.</source>
          <target state="translated">、そのような関数の呼び出し元は、インライン化されたPLTを使用します。</target>
        </trans-unit>
        <trans-unit id="1bc40ffb21955611ebc01b821b57a8fb97abe447" translate="yes" xml:space="preserve">
          <source>, causes debug versions of the runtime functions for the vtable verification feature to be called. This flag also causes the compiler to log information about which vtable pointers it finds for each class. This information is written to a file named</source>
          <target state="translated">、vtable検証機能のランタイム関数のデバッグバージョンが呼び出されます。また、このフラグにより​​、コンパイラーは、各クラスについてどのvtableポインターを見つけるかに関する情報をログに記録します。この情報は、次の名前のファイルに書き込まれます</target>
        </trans-unit>
        <trans-unit id="186899d07725833e558a3f1b37bca7595dd4ab80" translate="yes" xml:space="preserve">
          <source>, causes the compiler to tune for code size rather than execution speed, and performs further optimizations designed to reduce code size.</source>
          <target state="translated">、コンパイラーに実行速度ではなくコードサイズを調整させ、コードサイズを削減するように設計されたさらなる最適化を実行します。</target>
        </trans-unit>
        <trans-unit id="77a4aca34a1bfb27eca2f4c5b85088c452ff661a" translate="yes" xml:space="preserve">
          <source>, cold functions are automatically detected and this attribute is ignored.</source>
          <target state="translated">、コールド関数は自動的に検出され、この属性は無視されます。</target>
        </trans-unit>
        <trans-unit id="f796dad3806ccc12e4efbb979242edaefd9c68ac" translate="yes" xml:space="preserve">
          <source>, debug information is generated for types declared in that file and</source>
          <target state="translated">、そのファイルで宣言された型のデバッグ情報が生成され、</target>
        </trans-unit>
        <trans-unit id="602f9aefc82b94f79ccc91c4e0a2d6024a300032" translate="yes" xml:space="preserve">
          <source>, defaulting to</source>
          <target state="translated">、デフォルトで</target>
        </trans-unit>
        <trans-unit id="63e7e7ca16f5d6ce188c6f1a13bb0cfb59a90f05" translate="yes" xml:space="preserve">
          <source>, depending on the other options used, so that headers may for example be found in</source>
          <target state="translated">、使用される他のオプションに応じて、たとえばヘッダーが</target>
        </trans-unit>
        <trans-unit id="59850229d9fda282df9f43c3238d9cc1fe2f9ca4" translate="yes" xml:space="preserve">
          <source>, don&amp;rsquo;t generate (do generate) instruction sequences that load addresses for functions from the PLT part of the GOT rather than (traditional on other architectures) calls to the PLT. The default is</source>
          <target state="translated">、PLTへの呼び出しではなく（他のアーキテクチャでは従来）GOTのPLT部分から関数のアドレスをロードする命令シーケンスを生成（生成）しないでください。デフォルトは</target>
        </trans-unit>
        <trans-unit id="a9d81110f21b79386ce53e3929f1c70336b42687" translate="yes" xml:space="preserve">
          <source>, dump a representation of the &amp;ldquo;supergraph&amp;rdquo; suitable for viewing with GraphViz, but annotate the graph with information on what state will be purged at each node. The graph is written to</source>
          <target state="translated">、GraphVizでの表示に適した「スーパーグラフ」の表現をダンプしますが、各ノードでパージされる状態に関する情報をグラフに注釈します。グラフはに書き込まれます</target>
        </trans-unit>
        <trans-unit id="899cb9db2c2edf8462bd1866fd07b4a282dd26dc" translate="yes" xml:space="preserve">
          <source>, each</source>
          <target state="translated">、それぞれ</target>
        </trans-unit>
        <trans-unit id="b4e1dfd55c90784cd2bf2f09762c7b7835468124" translate="yes" xml:space="preserve">
          <source>, each statement gets its own edge.</source>
          <target state="translated">、各ステートメントは独自のエッジを取得します。</target>
        </trans-unit>
        <trans-unit id="a212453865c3ae5d769c013e9814daf8f2a214a4" translate="yes" xml:space="preserve">
          <source>, etc.</source>
          <target state="translated">、など</target>
        </trans-unit>
        <trans-unit id="2025ee33109115d150095e4dc9fbc6cecdccc59c" translate="yes" xml:space="preserve">
          <source>, etc. GCC considers</source>
          <target state="translated">など、GCCは</target>
        </trans-unit>
        <trans-unit id="c230b2ae171538a9903d9c6f4c54262988ff8a11" translate="yes" xml:space="preserve">
          <source>, except for that it outputs the &lt;code&gt;.code16gcc&lt;/code&gt; assembly directive at the beginning of the assembly output so that the binary can run in 16-bit mode.</source>
          <target state="translated">、ただし、バイナリが16ビットモードで実行できるように、アセンブリ出力の先頭に &lt;code&gt;.code16gcc&lt;/code&gt; アセンブリディレクティブを出力します。</target>
        </trans-unit>
        <trans-unit id="36187c82da4acd270eb00cabfd2754e7a35d89ac" translate="yes" xml:space="preserve">
          <source>, except on targets where GCC is the principal compiler. In those cases, we can choose the standard, and we chose the more efficient register return alternative.</source>
          <target state="translated">、ただしGCCが主要なコンパイラであるターゲットを除きます。これらの場合、標準を選択でき、より効率的なレジスタリターンの代替を選択しました。</target>
        </trans-unit>
        <trans-unit id="4a7bfad050613cd89b494934c041ad85c96a7f4e" translate="yes" xml:space="preserve">
          <source>, except that</source>
          <target state="translated">、 それ以外で</target>
        </trans-unit>
        <trans-unit id="424ca99182001aa93e0255bf1521df6608849e1a" translate="yes" xml:space="preserve">
          <source>, except that any output produced by scanning &lt;var&gt;file&lt;/var&gt; is thrown away. Macros it defines remain defined. This allows you to acquire all the macros from a header without also processing its declarations.</source>
          <target state="translated">、ただし &lt;var&gt;file&lt;/var&gt; スキャンによって生成された出力はすべて破棄されます。それが定義するマクロは定義されたままです。これにより、宣言を処理せずにヘッダーからすべてのマクロを取得できます。</target>
        </trans-unit>
        <trans-unit id="af31397d348022357555d43ae6b6602db7237c77" translate="yes" xml:space="preserve">
          <source>, except that comments contained within macros are also passed through to the output file where the macro is expanded.</source>
          <target state="translated">ただし、マクロ内に含まれているコメントは、マクロが展開されている出力ファイルにも渡されます。</target>
        </trans-unit>
        <trans-unit id="8293df57b65690a6a5b17ad151fb7402defdb639" translate="yes" xml:space="preserve">
          <source>, except that it implicitly passes</source>
          <target state="translated">、暗黙的に渡されることを除いて</target>
        </trans-unit>
        <trans-unit id="f4ee9476717ae169b601f810748e3fbaeb86e2f3" translate="yes" xml:space="preserve">
          <source>, except that it just generates any needed static data, but does not affect the generated code in any other way. You normally do not need to enable this option; instead, a language processor that needs this handling enables it on your behalf.</source>
          <target state="translated">ただし、必要な静的データを生成するだけで、生成されたコードには影響しません。通常、このオプションを有効にする必要はありません。代わりに、この処理を必要とする言語プロセッサがユーザーに代わって有効にします。</target>
        </trans-unit>
        <trans-unit id="daa2d6de31b71426a7c88a1aee1560252b4b2a7d" translate="yes" xml:space="preserve">
          <source>, except when selective scheduling is enabled.</source>
          <target state="translated">、ただし、選択的スケジューリングが有効になっている場合を除きます。</target>
        </trans-unit>
        <trans-unit id="dce06a184830559e813d9f5a2f13966eb3de4b64" translate="yes" xml:space="preserve">
          <source>, expand the &lt;code&gt;__FILE__&lt;/code&gt; and &lt;code&gt;__BASE_FILE__&lt;/code&gt; macros as if the files resided in directory</source>
          <target state="translated">、ファイルがディレクトリにあるかのように、 &lt;code&gt;__FILE__&lt;/code&gt; &lt;code&gt;__BASE_FILE__&lt;/code&gt; および__BASE_FILE__マクロを展開します</target>
        </trans-unit>
        <trans-unit id="537e3d3f4595296c4732ae2914f89aff5f7a7f43" translate="yes" xml:space="preserve">
          <source>, fails and prints an error if asked to create a shared library with a less restrictive subtype than its input files (for instance, trying to put a &amp;lsquo;</source>
          <target state="translated">、失敗し、入力ファイルよりも制限の少ないサブタイプで共有ライブラリを作成するように要求された場合はエラーを出力します（たとえば、「</target>
        </trans-unit>
        <trans-unit id="fdb43e7f5581dd318ba35a4b1b7bd3f3204a8b2e" translate="yes" xml:space="preserve">
          <source>, for each function of your program GCC creates a program flow graph, then finds a spanning tree for the graph. Only arcs that are not on the spanning tree have to be instrumented: the compiler adds code to count the number of times that these arcs are executed. When an arc is the only exit or only entrance to a block, the instrumentation code can be added to the block; otherwise, a new basic block must be created to hold the instrumentation code.</source>
          <target state="translated">、プログラムの関数ごとに、GCCはプログラムフローグラフを作成し、グラフのスパニングツリーを見つけます。計測する必要があるのは、スパニングツリー上にないアークのみです。コンパイラーは、これらのアークが実行された回数をカウントするコードを追加します。アークがブロックへの唯一の出口または入口である場合、計装コードをブロックに追加できます。それ以外の場合は、計測コードを保持するために新しい基本ブロックを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="5a62702328e51c81c8d14351efa5231be254fb50" translate="yes" xml:space="preserve">
          <source>, for which this feature is experimental.</source>
          <target state="translated">、この機能は実験的です。</target>
        </trans-unit>
        <trans-unit id="de44d1d94e89d69c9312fa31d05de00107553327" translate="yes" xml:space="preserve">
          <source>, forcibly change the way C symbols are represented in the object file. One use is to help link with legacy assembly code.</source>
          <target state="translated">、オブジェクトファイルでのCシンボルの表現方法を強制的に変更します。1つの用途は、レガシーアセンブリコードとのリンクを支援することです。</target>
        </trans-unit>
        <trans-unit id="bc3d5d86fcab0fccd2357fb760ccfdbc87239051" translate="yes" xml:space="preserve">
          <source>, function calls with a such function as the callee or caller uses inlined PLT.</source>
          <target state="translated">、呼び出し先や呼び出し元などの関数を使用した関数呼び出しは、インラインPLTを使用します。</target>
        </trans-unit>
        <trans-unit id="b73db41c359e5e1618dc5e96de50a7c0cce9c547" translate="yes" xml:space="preserve">
          <source>, generating &lt;var&gt;N&lt;/var&gt; NOPs, with the function entry point before the &lt;var&gt;M&lt;/var&gt;th NOP instruction. &lt;var&gt;M&lt;/var&gt; defaults to 0 if omitted e.g. function entry point is before the first NOP.</source>
          <target state="translated">、 &lt;var&gt;N&lt;/var&gt; 番目のNOPを生成します &lt;var&gt;M&lt;/var&gt; 番目のNOP命令の前に関数のエントリポイントがあります。省略された場合、 &lt;var&gt;M&lt;/var&gt; のデフォルトは0です。たとえば、関数のエントリポイントが最初のNOPの前にあります。</target>
        </trans-unit>
        <trans-unit id="66281c83f494cfe2e9913aed90954ff6500be7df" translate="yes" xml:space="preserve">
          <source>, giving just &amp;lsquo;</source>
          <target state="translated">、ちょうど与える '</target>
        </trans-unit>
        <trans-unit id="7edb54e230ef45c40c202a2070aee0bf8eea9a7f" translate="yes" xml:space="preserve">
          <source>, hot functions are automatically detected and this attribute is ignored.</source>
          <target state="translated">、ホット関数は自動的に検出され、この属性は無視されます。</target>
        </trans-unit>
        <trans-unit id="cd70bd4accf5ece1456ab2be03ed1e6ee41d4b1c" translate="yes" xml:space="preserve">
          <source>, however the option is disabled if generated code will be instrumented for profiling (</source>
          <target state="translated">ただし、生成されたコードがプロファイリング用に計測される場合、このオプションは無効になります（</target>
        </trans-unit>
        <trans-unit id="1bce44abc1a9262df8cac0c50152864f825ccf63" translate="yes" xml:space="preserve">
          <source>, i.e. to store data in the little-endian format.</source>
          <target state="translated">つまり、データをリトルエンディアン形式で格納します。</target>
        </trans-unit>
        <trans-unit id="da5060e991a7ba759c2592a069e08cef00119e51" translate="yes" xml:space="preserve">
          <source>, i.e., do not enable</source>
          <target state="translated">、つまり、有効にしない</target>
        </trans-unit>
        <trans-unit id="fe023c621e2a7b2cf31927bbba4a961d25408a71" translate="yes" xml:space="preserve">
          <source>, i.e., pass standard Linux linking options to the linker.</source>
          <target state="translated">つまり、標準のLinuxリンクオプションをリンカーに渡します。</target>
        </trans-unit>
        <trans-unit id="c940f0489137021ec5391fb7b7ac2f5ace9d8059" translate="yes" xml:space="preserve">
          <source>, if OS libraries are present in</source>
          <target state="translated">、OSライブラリが存在する場合</target>
        </trans-unit>
        <trans-unit id="c3dd87cad0ef7982b3ab32988714c6ca54cf2f9e" translate="yes" xml:space="preserve">
          <source>, imply</source>
          <target state="translated">、ほのめかす</target>
        </trans-unit>
        <trans-unit id="1f808929dc7d65506fc3a70039f1c27ca90486ac" translate="yes" xml:space="preserve">
          <source>, in addition to the</source>
          <target state="translated">に加えて、</target>
        </trans-unit>
        <trans-unit id="cf07eced2fe9d18835b5764136236b3da619529d" translate="yes" xml:space="preserve">
          <source>, in the same way that</source>
          <target state="translated">と同じように</target>
        </trans-unit>
        <trans-unit id="b30d7a5cabdcb5756c85bb67b0a58b128c10f3cc" translate="yes" xml:space="preserve">
          <source>, including any libraries. This includes the system libraries and startup modules.</source>
          <target state="translated">、任意のライブラリを含みます。これには、システムライブラリとスタートアップモジュールが含まれます。</target>
        </trans-unit>
        <trans-unit id="7b04496200d4f3af930e39d995d950d3bfbff027" translate="yes" xml:space="preserve">
          <source>, instead of guessing which path a branch is most likely to take, the &amp;lsquo;</source>
          <target state="translated">、ブランチが取る可能性が最も高いパスを推測する代わりに、「</target>
        </trans-unit>
        <trans-unit id="f26cdfc5e353e2972712fe3c4c6c2c7061cd6b42" translate="yes" xml:space="preserve">
          <source>, is also specified with</source>
          <target state="translated">は、</target>
        </trans-unit>
        <trans-unit id="297f123a9478230dfaae1454a7a30d8603dbe525" translate="yes" xml:space="preserve">
          <source>, is to use assembler macros instead.</source>
          <target state="translated">、代わりにアセンブラーマクロを使用します。</target>
        </trans-unit>
        <trans-unit id="9865f992f80d724f0d28f2e68445911d448f9a75" translate="yes" xml:space="preserve">
          <source>, it accesses the variables from a common anchor point instead. The effect is similar to the following pseudocode (which isn&amp;rsquo;t valid C):</source>
          <target state="translated">代わりに、共通のアンカーポイントから変数にアクセスします。効果は次の疑似コードに似ています（これは有効なCではありません）。</target>
        </trans-unit>
        <trans-unit id="37c7d699148009585bcbfd24104e627443f4227f" translate="yes" xml:space="preserve">
          <source>, it adds code so that some data about values of expressions in the program is gathered.</source>
          <target state="translated">、コードを追加して、プログラム内の式の値に関するいくつかのデータを収集します。</target>
        </trans-unit>
        <trans-unit id="8bb937a2afd69efa3de1fcfec93c85b21cd8d3c0" translate="yes" xml:space="preserve">
          <source>, it assumes GOT entries and small data are within a 12-bit range from the GOT base address; with</source>
          <target state="translated">、GOTエントリと小さなデータがGOTベースアドレスから12ビットの範囲内にあると想定しています。と</target>
        </trans-unit>
        <trans-unit id="70db58101b4a4dd5508449ddae97a05be51b3c50" translate="yes" xml:space="preserve">
          <source>, it defines the macros for every architecture in the range.</source>
          <target state="translated">、範囲内のすべてのアーキテクチャのマクロを定義します。</target>
        </trans-unit>
        <trans-unit id="a7334c92634fb9a0df41a81a512187c2464430d0" translate="yes" xml:space="preserve">
          <source>, it dumps debugging information about location maps. Every token in the output is preceded by the dump of the map its location belongs to.</source>
          <target state="translated">、ロケーションマップに関するデバッグ情報をダンプします。出力内のすべてのトークンの前には、その場所が属するマップのダンプがあります。</target>
        </trans-unit>
        <trans-unit id="085a445042571b2a530ccf02bdc7d3dca3e56d18" translate="yes" xml:space="preserve">
          <source>, it has the same meaning as &amp;lsquo;</source>
          <target state="translated">、それはと同じ意味を持っています</target>
        </trans-unit>
        <trans-unit id="0b7ad38301fa6cb9702cdcc46f4b9ac21cbe6bd6" translate="yes" xml:space="preserve">
          <source>, it instead searches</source>
          <target state="translated">、代わりに検索</target>
        </trans-unit>
        <trans-unit id="da805275b6a01ffed7306b21a2664c3c591d7da2" translate="yes" xml:space="preserve">
          <source>, it is possible to extract and use them in an LTO link if you are using a linker with plugin support. To create static libraries suitable for LTO, use &lt;code&gt;gcc-ar&lt;/code&gt; and &lt;code&gt;gcc-ranlib&lt;/code&gt; instead of &lt;code&gt;ar&lt;/code&gt; and &lt;code&gt;ranlib&lt;/code&gt;; to show the symbols of object files with GIMPLE bytecode, use &lt;code&gt;gcc-nm&lt;/code&gt;. Those commands require that &lt;code&gt;ar&lt;/code&gt;, &lt;code&gt;ranlib&lt;/code&gt; and &lt;code&gt;nm&lt;/code&gt; have been compiled with plugin support. At link time, use the flag</source>
          <target state="translated">、プラグインをサポートするリンカーを使用している場合は、LTOリンクでそれらを抽出して使用することが可能です。LTOに適した静的ライブラリを作成するには、 &lt;code&gt;ar&lt;/code&gt; および &lt;code&gt;ranlib&lt;/code&gt; の代わりに &lt;code&gt;gcc-ar&lt;/code&gt; および &lt;code&gt;gcc-ranlib&lt;/code&gt; を使用します。オブジェクトファイルのシンボルをGIMPLEバイトコードで表示するには、 &lt;code&gt;gcc-nm&lt;/code&gt; を使用します。これらのコマンドでは、 &lt;code&gt;ar&lt;/code&gt; 、 &lt;code&gt;ranlib&lt;/code&gt; 、 &lt;code&gt;nm&lt;/code&gt; がプラグインサポートでコンパイルされている必要があります。リンク時にフラグを使用する</target>
        </trans-unit>
        <trans-unit id="0fdbc0dcc1b3d3cf0a25782f0c9d99618712795c" translate="yes" xml:space="preserve">
          <source>, it links the shared version of</source>
          <target state="translated">、それはの共有バージョンをリンクします</target>
        </trans-unit>
        <trans-unit id="d873388541d922fb56183db4bb2553adba035d5a" translate="yes" xml:space="preserve">
          <source>, it reads back the data gathered and actually performs the optimizations based on them. Currently the optimizations include specialization of division operations using the knowledge about the value of the denominator.</source>
          <target state="translated">、収集されたデータを読み取り、実際にそれらに基づいて最適化を実行します。現在、最適化には、分母の値に関する知識を使用した除算演算の特殊化が含まれています。</target>
        </trans-unit>
        <trans-unit id="a2f260537ad6dfb12892a249886247f016bc9ba2" translate="yes" xml:space="preserve">
          <source>, it reads back the data gathered from profiling values of expressions for usage in optimizations.</source>
          <target state="translated">、最適化で使用するために式のプロファイリング値から収集したデータを読み取ります。</target>
        </trans-unit>
        <trans-unit id="33fdaf8607572ca9dfc5db8fb8a043fa47838f46" translate="yes" xml:space="preserve">
          <source>, it trades 3 instructions for 4, one of which may be shared by multiple symbols, and it avoids the need for a GOT entry for the referenced symbol, so it&amp;rsquo;s more likely to be a win. If it is not,</source>
          <target state="translated">、3つの命令を4と交換します。そのうちの1つは複数のシンボルで共有される可能性があり、参照されたシンボルのGOTエントリが不要になるため、勝つ可能性が高くなります。そうでない場合、</target>
        </trans-unit>
        <trans-unit id="597abb8e1070ef05bc7ec2edf56f3622f0ab3d9c" translate="yes" xml:space="preserve">
          <source>, its assembler file in</source>
          <target state="translated">、そのアセンブラファイル</target>
        </trans-unit>
        <trans-unit id="2a5e7591ba964c2077d7342b00d00d8531ffe32b" translate="yes" xml:space="preserve">
          <source>, linking with the static version of libgcc by default. This allows exceptions to propagate through such shared libraries, without incurring relocation costs at library load time.</source>
          <target state="translated">、デフォルトではlibgccの静的バージョンとリンクします。これにより、ライブラリのロード時に再配置コストを発生させることなく、例外がそのような共有ライブラリを介して伝播することができます。</target>
        </trans-unit>
        <trans-unit id="f86f918c25844c67aabc1b85407cae7e6da5fdd5" translate="yes" xml:space="preserve">
          <source>, loops containing a load/store sequence can be changed to a load before the loop and a store after the loop.</source>
          <target state="translated">、ロード/ストアシーケンスを含むループは、ループ前のロードとループ後のストアに変更できます。</target>
        </trans-unit>
        <trans-unit id="6cfaf303daa057f828f7c2dbdcc5ee00d114011c" translate="yes" xml:space="preserve">
          <source>, merges the two files into a single internal image, and compiles the result as usual. Since both</source>
          <target state="translated">、2つのファイルを1つの内部イメージにマージし、通常どおり結果をコンパイルします。両方から</target>
        </trans-unit>
        <trans-unit id="42efed7c6b6343d536a66fe0302d3bcf2db50bff" translate="yes" xml:space="preserve">
          <source>, merges them together into a single GIMPLE representation and optimizes them as usual to produce</source>
          <target state="translated">、それらを1つのGIMPLE表現にマージし、通常どおりに最適化して生成します</target>
        </trans-unit>
        <trans-unit id="00e33d9fc0ea3da48e57ce433f1b630dd36dae16" translate="yes" xml:space="preserve">
          <source>, no callgraph information is output along with the object file. At LTO link time,</source>
          <target state="translated">、オブジェクトファイルと一緒にコールグラフ情報は出力されません。LTOリンク時に、</target>
        </trans-unit>
        <trans-unit id="4de233cb30f72a91f767198fb4088b9d8434017e" translate="yes" xml:space="preserve">
          <source>, only calls to prototyped variable argument functions set or clear the bit.</source>
          <target state="translated">、プロトタイプ変数引数関数の呼び出しのみがビットを設定またはクリアします。</target>
        </trans-unit>
        <trans-unit id="500ad22c367338ded2a7f587262dff6519e20900" translate="yes" xml:space="preserve">
          <source>, only permits instructions to be used that are valid for the subtype of the file it is generating, so you cannot put 64-bit instructions in a &amp;lsquo;</source>
          <target state="translated">、それが生成するファイルのサブタイプに有効な命令の使用のみを許可するため、64ビット命令を '</target>
        </trans-unit>
        <trans-unit id="b366d1a229ec84d93ba42e7ecafb33db5b7b9b39" translate="yes" xml:space="preserve">
          <source>, or</source>
          <target state="translated">、または</target>
        </trans-unit>
        <trans-unit id="9dc64f385a34f50d73ecc913e204ce42b3b016bf" translate="yes" xml:space="preserve">
          <source>, or if OS libraries are present in</source>
          <target state="translated">、またはOSライブラリが存在する場合</target>
        </trans-unit>
        <trans-unit id="80b0984b332cb5904969fd0c26d2d20fdad7a2a9" translate="yes" xml:space="preserve">
          <source>, or model suboptions) when you specify this linker option.</source>
          <target state="translated">、またはモデルサブオプション）。このリンカーオプションを指定する場合。</target>
        </trans-unit>
        <trans-unit id="a7f73a9aa24d964050dc3b77a89839f46d5544c2" translate="yes" xml:space="preserve">
          <source>, or model suboptions) when you specify this linker option.&lt;a href=&quot;#FOOT1&quot; id=&quot;DOCF1&quot; name=&quot;DOCF1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;</source>
          <target state="translated">、またはモデルサブオプション）。このリンカーオプションを指定する場合。&lt;a href=&quot;#FOOT1&quot; id=&quot;DOCF1&quot; name=&quot;DOCF1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7df955ad07564d81affa3b0a58d1230baa30b079" translate="yes" xml:space="preserve">
          <source>, or tagged with the equivalent &lt;code&gt;arch=armv8-a+crc&lt;/code&gt; attribute, can inline a function &lt;code&gt;bar&lt;/code&gt; compiled with</source>
          <target state="translated">、または同等でタグ付けされた &lt;code&gt;arch=armv8-a+crc&lt;/code&gt; 属性、機能インラインができる &lt;code&gt;bar&lt;/code&gt; でコンパイルを</target>
        </trans-unit>
        <trans-unit id="c0d16ff2ecb94e39dbd670079ddc6dfea8cf86c2" translate="yes" xml:space="preserve">
          <source>, or use an environment variable like &lt;code&gt;DEPENDENCIES_OUTPUT&lt;/code&gt; (see &lt;a href=&quot;environment-variables#Environment-Variables&quot;&gt;Environment Variables&lt;/a&gt;). Debug output is still sent to the regular output stream as normal.</source>
          <target state="translated">、または &lt;code&gt;DEPENDENCIES_OUTPUT&lt;/code&gt; などの環境変数を使用します（&lt;a href=&quot;environment-variables#Environment-Variables&quot;&gt;環境変数を&lt;/a&gt;参照）。デバッグ出力は、通常どおり通常の出力ストリームに送信されます。</target>
        </trans-unit>
        <trans-unit id="114413bb4f72c7de7da72bbb1c49201af1736906" translate="yes" xml:space="preserve">
          <source>, or use multiple</source>
          <target state="translated">、または複数使用</target>
        </trans-unit>
        <trans-unit id="b9de57a8368cc0be9e412c8156861efc31380ddb" translate="yes" xml:space="preserve">
          <source>, or with</source>
          <target state="translated">、または</target>
        </trans-unit>
        <trans-unit id="42fd3001192750dfc840e657f931b977a68bb8c9" translate="yes" xml:space="preserve">
          <source>, otherwise GCC will allow some non-ISO C++ features as extensions. See &lt;a href=&quot;warning-options#Warning-Options&quot;&gt;Warning Options&lt;/a&gt;.</source>
          <target state="translated">そうでない場合、GCCは拡張機能として一部の非ISO C ++機能を許可します。&lt;a href=&quot;warning-options#Warning-Options&quot;&gt;警告オプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4efb03b3f7239b259ed4938692deb4cfeedb504b" translate="yes" xml:space="preserve">
          <source>, otherwise compile code the same as</source>
          <target state="translated">、それ以外は同じコードをコンパイルする</target>
        </trans-unit>
        <trans-unit id="9f722d4c3e2124084fb81e45309c5309f6a0001c" translate="yes" xml:space="preserve">
          <source>, otherwise it takes the name of the input file, removes any directory components and suffix, and applies a</source>
          <target state="translated">それ以外の場合は、入力ファイルの名前を取得し、ディレクトリコンポーネントとサフィックスを削除し、</target>
        </trans-unit>
        <trans-unit id="2fdbcf702ccfe5b30e705c3cbb40781443600e37" translate="yes" xml:space="preserve">
          <source>, permits passing pointers to structures with anonymous fields to functions that expect pointers to elements of the type of the field, and permits referring to anonymous fields declared using a typedef. See &lt;a href=&quot;unnamed-fields#Unnamed-Fields&quot;&gt;Unnamed struct/union fields within structs/unions&lt;/a&gt;, for details. This is only supported for C, not C++.</source>
          <target state="translated">、匿名フィールドを持つ構造体へのポインタを、フィールドの型の要素へのポインタを期待する関数に渡すことを許可し、typedefを使用して宣言された匿名フィールドを参照することを許可します。詳細については、&lt;a href=&quot;unnamed-fields#Unnamed-Fields&quot;&gt;structs / unions内の無名のstruct / unionフィールド&lt;/a&gt;を参照してください。これはCでのみサポートされており、C ++ではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="efd6d891db77cd5a6b32757579c81c42fb30122c" translate="yes" xml:space="preserve">
          <source>, predefinition of command line and most builtin macros is disabled. Macros such as &lt;code&gt;__LINE__&lt;/code&gt;, which are contextually dependent, are handled normally. This enables compilation of files previously preprocessed with &lt;code&gt;-E -fdirectives-only&lt;/code&gt;.</source>
          <target state="translated">、コマンドラインの事前定義およびほとんどの組み込みマクロは無効になっています。 &lt;code&gt;__LINE__&lt;/code&gt; などのコンテキスト依存のマクロは通常どおり処理されます。これにより、以前に &lt;code&gt;-E -fdirectives-only&lt;/code&gt; で前処理されたファイルのコンパイルが可能になります。</target>
        </trans-unit>
        <trans-unit id="415eb48854af3a6a56014b4f60405d06dc891dcf" translate="yes" xml:space="preserve">
          <source>, preprocessing is limited to the handling of directives such as &lt;code&gt;#define&lt;/code&gt;, &lt;code&gt;#ifdef&lt;/code&gt;, and &lt;code&gt;#error&lt;/code&gt;. Other preprocessor operations, such as macro expansion and trigraph conversion are not performed. In addition, the</source>
          <target state="translated">、前処理は、以下のような指示の処理に限定される &lt;code&gt;#define&lt;/code&gt; 、 &lt;code&gt;#ifdef&lt;/code&gt; 命令、及び &lt;code&gt;#error&lt;/code&gt; 。マクロ展開や3文字表記変換など、その他のプリプロセッサ操作は実行されません。加えて</target>
        </trans-unit>
        <trans-unit id="b0bfd8775564ba9a386c05bd93a1f015b33ee831" translate="yes" xml:space="preserve">
          <source>, rather than Newlib.</source>
          <target state="translated">Newlibではなく。</target>
        </trans-unit>
        <trans-unit id="382a63ed22ee293d350fb2ac1e8963f3b5af303b" translate="yes" xml:space="preserve">
          <source>, record any references to them in the result of the compilation as if the files resided in directory</source>
          <target state="translated">、ファイルがディレクトリにあるかのように、コンパイルの結果にそれらへの参照を記録します</target>
        </trans-unit>
        <trans-unit id="5596d7a7c540b768140fc8e0589b7003ee3db084" translate="yes" xml:space="preserve">
          <source>, record debugging information describing them as if the files resided in directory</source>
          <target state="translated">、ファイルがディレクトリにあるかのようにそれらを説明するデバッグ情報を記録する</target>
        </trans-unit>
        <trans-unit id="a257c20cceb3376fd5c996cb7d116ca7848455c5" translate="yes" xml:space="preserve">
          <source>, regardless of the order of the options on the command line.</source>
          <target state="translated">コマンドラインでのオプションの順序に関係なく。</target>
        </trans-unit>
        <trans-unit id="12d501570d9936bde7534d9241ac0db13d604a8d" translate="yes" xml:space="preserve">
          <source>, respectively.</source>
          <target state="translated">、それぞれ。</target>
        </trans-unit>
        <trans-unit id="5bb4669872f9d1911aecb2ff977742a0d6c1e477" translate="yes" xml:space="preserve">
          <source>, see &lt;a href=&quot;avr-options#AVR-Options&quot;&gt;AVR Options&lt;/a&gt;.</source>
          <target state="translated">、&lt;a href=&quot;avr-options#AVR-Options&quot;&gt;AVRオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="af7e2fbf0415afcfbd5453b3d8148325e06b13e2" translate="yes" xml:space="preserve">
          <source>, see &lt;a href=&quot;optimize-options#Optimize-Options&quot;&gt;Optimize Options&lt;/a&gt;), and if GNU Binutils support &lt;a href=&quot;https://sourceware.org/PR21683&quot;&gt;PR21683&lt;/a&gt;.</source>
          <target state="translated">、参照&lt;a href=&quot;optimize-options#Optimize-Options&quot;&gt;最適化オプションを&lt;/a&gt;）、およびGNU Binutilsのサポート場合&lt;a href=&quot;https://sourceware.org/PR21683&quot;&gt;PR21683&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f23b4d8e2af9ccece653777203cc633cc8613584" translate="yes" xml:space="preserve">
          <source>, since floating-point division by zero can be a legitimate way of obtaining infinities and NaNs.</source>
          <target state="translated">ゼロによる浮動小数点除算は、無限大とNaNを取得する正当な方法となる可能性があるためです。</target>
        </trans-unit>
        <trans-unit id="48743acb3c50007ccd27cb69772fa5958efec8aa" translate="yes" xml:space="preserve">
          <source>, since it usually increases code size.</source>
          <target state="translated">、なぜならそれは通常コードサイズを増やすからです。</target>
        </trans-unit>
        <trans-unit id="1142d002e80f61cb8906ee6ff983e94d926cb47b" translate="yes" xml:space="preserve">
          <source>, since slightly larger code is generated when</source>
          <target state="translated">、少し大きいコードが生成されるので、</target>
        </trans-unit>
        <trans-unit id="8489f86e2aa5976abda688075895e8c118642126" translate="yes" xml:space="preserve">
          <source>, since there are errors enabled by this option and not enabled by the latter and vice versa.</source>
          <target state="translated">このオプションによって有効になり、後者によって有効にされないエラーがあり、その逆もあるためです。</target>
        </trans-unit>
        <trans-unit id="94ac58ccd302f428780f22989ed14b633a5da687" translate="yes" xml:space="preserve">
          <source>, so a lot of code can be recompiled with</source>
          <target state="translated">ので、多くのコードは</target>
        </trans-unit>
        <trans-unit id="7164620902b23499669819ffa895173a5aa25027" translate="yes" xml:space="preserve">
          <source>, so that the libraries leave more room for the main program.</source>
          <target state="translated">、ライブラリがメインプログラムのためのより多くの余地を残すようにします。</target>
        </trans-unit>
        <trans-unit id="68680f64842e4482b6c97e2407b39d9d533a072a" translate="yes" xml:space="preserve">
          <source>, specifies a file to write the dependencies to. If no</source>
          <target state="translated">、依存関係を書き込むファイルを指定します。いいえの場合</target>
        </trans-unit>
        <trans-unit id="3a902c43a69a00e9f2cfce60ce9290e659912859" translate="yes" xml:space="preserve">
          <source>, strip mine each loop in the loop nest by a given number of iterations. The strip length can be changed using the</source>
          <target state="translated">、ループのネスト内の各ループを指定された反復回数だけ除去します。ストリップの長さは、</target>
        </trans-unit>
        <trans-unit id="b1229e76e9a81e2b4bcdfdeb6b14b25978a412d6" translate="yes" xml:space="preserve">
          <source>, such as the identifiers of individual events and lines indicating interprocedural calls and returns.</source>
          <target state="translated">、個々のイベントの識別子や、手続き間の呼び出しと戻りを示す行など。</target>
        </trans-unit>
        <trans-unit id="3b9b4086b33c372adc8859729f0f2fda99df10f0" translate="yes" xml:space="preserve">
          <source>, such that it is linked with the shared</source>
          <target state="translated">、共有にリンクされるように</target>
        </trans-unit>
        <trans-unit id="a3ab4b910db14b52efa18ff9cf025cb41c0d39a2" translate="yes" xml:space="preserve">
          <source>, tells the compiler to not pass</source>
          <target state="translated">、渡さないようコンパイラーに指示します</target>
        </trans-unit>
        <trans-unit id="a9bcafc2113daaac812f1518346b8bb3f4ad5920" translate="yes" xml:space="preserve">
          <source>, the</source>
          <target state="translated">、</target>
        </trans-unit>
        <trans-unit id="2b63f3bf562cc464d10a5f414760217b5e6be781" translate="yes" xml:space="preserve">
          <source>, the &lt;code&gt;gcc&lt;/code&gt; program instead returns with the numerically highest error produced by any phase returning an error indication. The C, C++, and Fortran front ends return 4 if an internal compiler error is encountered.</source>
          <target state="translated">その代わり、 &lt;code&gt;gcc&lt;/code&gt; プログラムは、エラー表示を返すフェーズによって生成された数値的に最も高いエラーを返します。内部コンパイラエラーが発生した場合、C、C ++、およびFortranフロントエンドは4を返します。</target>
        </trans-unit>
        <trans-unit id="610606f7d4169ddd686abce63a0d9f14d38d56fe" translate="yes" xml:space="preserve">
          <source>, the ARMv8.1-Atomics instructions will be used directly. The same applies when using</source>
          <target state="translated">、ARMv8.1-Atomics命令が直接使用されます。使用する場合も同様です</target>
        </trans-unit>
        <trans-unit id="ac3ce9581fef6bdbd359e9f45a5a99604a8cf6c7" translate="yes" xml:space="preserve">
          <source>, the Pentium Pro instruction set is used, so the code runs on all i686 family chips. When used with</source>
          <target state="translated">、Pentium Pro命令セットが使用されているため、コードはすべてのi686ファミリチップで実行されます。と使用する場合</target>
        </trans-unit>
        <trans-unit id="fa194889cd144e6bbf27af39f845ba26d861d086" translate="yes" xml:space="preserve">
          <source>, the command</source>
          <target state="translated">、 コマンド</target>
        </trans-unit>
        <trans-unit id="e92a035b4927c9fce1d07fc2c810360ae211e587" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for Oracle M8 chips.</source>
          <target state="translated">、コンパイラはさらにOracle M8チップ用に最適化します。</target>
        </trans-unit>
        <trans-unit id="6a39a5fbbad7fe0ed957cc74cab0d30798133fa7" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for Oracle SPARC M7 chips. With</source>
          <target state="translated">、コンパイラーはさらにOracle SPARC M7チップ用に最適化します。と</target>
        </trans-unit>
        <trans-unit id="1ac0c6c3a7e57517af6c1fd4d8c2f4ab55e3234b" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for Sun UltraSPARC T1 chips. With</source>
          <target state="translated">、コンパイラはさらにSun UltraSPARC T1チップ用に最適化します。と</target>
        </trans-unit>
        <trans-unit id="a5cb47d14afa8a18feae7e3577d1c2f7f39aa3a3" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for Sun UltraSPARC T2 chips. With</source>
          <target state="translated">、コンパイラはさらにSun UltraSPARC T2チップ用に最適化します。と</target>
        </trans-unit>
        <trans-unit id="4372efad9448f8e7c66d51c59cc8061f932390e7" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for Sun UltraSPARC T3 chips. With</source>
          <target state="translated">、コンパイラはさらにSun UltraSPARC T3チップ用に最適化します。と</target>
        </trans-unit>
        <trans-unit id="04c02ac5cdda7b9f9e1bd562613ee0b12cbaa11d" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for Sun UltraSPARC T4 chips. With</source>
          <target state="translated">、コンパイラーはさらにSun UltraSPARC T4チップ用に最適化します。と</target>
        </trans-unit>
        <trans-unit id="fe8343d3123cbd58bc0f4cfc4dca465aa9ceca09" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for the Cypress CY7C602 chip, as used in the SPARCStation/SPARCServer 3xx series. This is also appropriate for the older SPARCStation 1, 2, IPX etc.</source>
          <target state="translated">、SPARCStation / SPARCServer 3xxシリーズで使用されているように、コンパイラはさらにサイプレスCY7C602チップ用に最適化します。これは、古いSPARCStation 1、2、IPXなどにも適しています。</target>
        </trans-unit>
        <trans-unit id="1e916d47d43e0128f6a11b321665069d28bed521" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for the Fujitsu MB86930 chip, which is the original SPARClite, with no FPU. With</source>
          <target state="translated">、コンパイラーはさらに、FPUのない元のSPARCliteであるFujitsu MB86930チップ用に最適化します。と</target>
        </trans-unit>
        <trans-unit id="59e587eb3c489ffd26283628358ebe3722a023bf" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for the Fujitsu MB86934 chip, which is the more recent SPARClite with FPU.</source>
          <target state="translated">、コンパイラーはさらに、FPUを備えた最新のSPARCliteであるFujitsu MB86934チップ用に最適化します。</target>
        </trans-unit>
        <trans-unit id="7d99095dcd3228954410a8eb6f64d85dbeae0243" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for the Sun UltraSPARC I/II/IIi chips. With</source>
          <target state="translated">、コンパイラはさらにSun UltraSPARC I / II / IIiチップ用に最適化します。と</target>
        </trans-unit>
        <trans-unit id="841fa825f3bff788d457becd582c25c57258d89d" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for the Sun UltraSPARC III/III+/IIIi/IIIi+/IV/IV+ chips. With</source>
          <target state="translated">、コンパイラはさらにSun UltraSPARC III / III + / IIIi / IIIi + / IV / IV +チップ用に最適化します。と</target>
        </trans-unit>
        <trans-unit id="858687102dd55ff8fc87c92e71e8832cd4e35c97" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for the SuperSPARC chip, as used in the SPARCStation 10, 1000 and 2000 series.</source>
          <target state="translated">、コンパイラはさらに、SPARCStation 10、1000、2000シリーズで使用されているSuperSPARCチップ向けに最適化します。</target>
        </trans-unit>
        <trans-unit id="aecd3e58e2014147bddadb0ae32ec7d9dee9a11b" translate="yes" xml:space="preserve">
          <source>, the compiler additionally optimizes it for the TEMIC SPARClet chip.</source>
          <target state="translated">、コンパイラはさらにTEMIC SPARCletチップ用に最適化します。</target>
        </trans-unit>
        <trans-unit id="a86eac710e38d27a598505cf74f39473202849dd" translate="yes" xml:space="preserve">
          <source>, the compiler assumes that structures should have 8-byte alignment. This enables the use of pairs of &lt;code&gt;ldd&lt;/code&gt; and &lt;code&gt;std&lt;/code&gt; instructions for copies in structure assignment, in place of twice as many &lt;code&gt;ld&lt;/code&gt; and &lt;code&gt;st&lt;/code&gt; pairs. However, the use of this changed alignment directly violates the SPARC ABI. Thus, it&amp;rsquo;s intended only for use on targets where the developer acknowledges that their resulting code is not directly in line with the rules of the ABI.</source>
          <target state="translated">、コンパイラーは、構造体が8バイト境界で整列されていると想定します。これにより、 &lt;code&gt;ld&lt;/code&gt; と &lt;code&gt;st&lt;/code&gt; のペアの2倍の代わりに、構造体割り当てのコピーに &lt;code&gt;ldd&lt;/code&gt; と &lt;code&gt;std&lt;/code&gt; 命令のペアを使用できるようになります。ただし、この変更された配置の使用は、SPARC ABIに直接違反します。したがって、これは、結果のコードがABIのルールに直接一致していないことを開発者が認めたターゲットでの使用のみを目的としています。</target>
        </trans-unit>
        <trans-unit id="6e95df22d51cc97b41caac28bfc5b9326fa6b5f0" translate="yes" xml:space="preserve">
          <source>, the compiler could use the extended instruction sets even if the built-ins are not used explicitly in the program. For this reason, applications that perform run-time CPU detection must compile separate files for each supported architecture, using the appropriate flags. In particular, the file containing the CPU detection code should be compiled without these options.</source>
          <target state="translated">、プログラムで組み込みが明示的に使用されていない場合でも、コンパイラは拡張命令セットを使用できます。このため、ランタイムCPU検出を実行するアプリケーションは、適切なフラグを使用して、サポートされているアーキテクチャごとに個別のファイルをコンパイルする必要があります。特に、CPU検出コードを含むファイルは、これらのオプションなしでコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="ffdc7f53e47734d83c7e14a48d5c0f0132cfcca4" translate="yes" xml:space="preserve">
          <source>, the compiler does not generate save/restore instructions and uses a &amp;ldquo;flat&amp;rdquo; or single register window model. This model is compatible with the regular register window model. The local registers and the input registers (0&amp;ndash;5) are still treated as &amp;ldquo;call-saved&amp;rdquo; registers and are saved on the stack as needed.</source>
          <target state="translated">、コンパイラは保存/復元命令を生成せず、「フラット」または単一レジスタウィンドウモデルを使用します。このモデルは、通常のレジスタウィンドウモデルと互換性があります。ローカルレジスタと入力レジスタ（0〜5）は引き続き「コール保存」レジスタとして扱われ、必要に応じてスタックに保存されます。</target>
        </trans-unit>
        <trans-unit id="69e78890820dcd7f981ed8ef33a3a8c043e8ebf1" translate="yes" xml:space="preserve">
          <source>, the compiler generates checking code in functions returning structures or unions to detect size mismatches between the two sides of function calls, as per the 32-bit ABI.</source>
          <target state="translated">、コンパイラは、32ビットABIのように、構造体または共用体を返す関数でチェックコードを生成して、関数呼び出しの2つのサイド間のサイズの不一致を検出します。</target>
        </trans-unit>
        <trans-unit id="428fba5d393e56eabf7998e3fc175cb944f8ad09" translate="yes" xml:space="preserve">
          <source>, the compiler tries to reduce code size and execution time, without performing any optimizations that take a great deal of compilation time.</source>
          <target state="translated">、コンパイラーは、大量のコンパイル時間を必要とする最適化を実行せずに、コードサイズと実行時間を削減しようとします。</target>
        </trans-unit>
        <trans-unit id="daf303df50714bc573b14a3f51a8300fe4c948bd" translate="yes" xml:space="preserve">
          <source>, the declaration of the function is diagnosed as well.</source>
          <target state="translated">、関数の宣言も診断されます。</target>
        </trans-unit>
        <trans-unit id="3026241c180440d0e9f94ba76190f2ca96852cd8" translate="yes" xml:space="preserve">
          <source>, the default for GCC 5.1.</source>
          <target state="translated">、GCC 5.1のデフォルト。</target>
        </trans-unit>
        <trans-unit id="692722d8e42a4b8d2a2c2032a7f0a3bed13e40ff" translate="yes" xml:space="preserve">
          <source>, the default for GCC 5.2.</source>
          <target state="translated">、GCC 5.2のデフォルト。</target>
        </trans-unit>
        <trans-unit id="c8c05f1d08fd7c0969883bbc9f062051a4b0a7b0" translate="yes" xml:space="preserve">
          <source>, the default for GCC 6.1.</source>
          <target state="translated">、GCC 6.1のデフォルト。</target>
        </trans-unit>
        <trans-unit id="b6fc73f89ebea91385b893380c45e9780bb3d84a" translate="yes" xml:space="preserve">
          <source>, the default is &amp;ldquo;on&amp;rdquo; for ColdFire architectures and &amp;ldquo;off&amp;rdquo; for M680x0 architectures. Otherwise, the default is taken from the target CPU (either the default CPU, or the one specified by</source>
          <target state="translated">、デフォルトはColdFireアーキテクチャの場合は「オン」、M680x0アーキテクチャの場合は「オフ」です。それ以外の場合、デフォルトはターゲットCPU（デフォルトのCPU、または</target>
        </trans-unit>
        <trans-unit id="772f6bbc0f9a324fca50c11ff8483df72f8e4584" translate="yes" xml:space="preserve">
          <source>, the default, causes the extra information to be omitted and is useful when comparing two assembler files.</source>
          <target state="translated">、デフォルトでは、追加情報が省略されるため、2つのアセンブラファイルを比較するときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="2371bca702932445e79761fc2682e04e1f85e803" translate="yes" xml:space="preserve">
          <source>, the expression is treated as complicated one, and is not handled by IPA analysis.</source>
          <target state="translated">、式は複雑なものとして扱われ、IPA分析では処理されません。</target>
        </trans-unit>
        <trans-unit id="b4cd5e116a47d28493b581dcab5dad877c0c34fd" translate="yes" xml:space="preserve">
          <source>, the files with the profile feedback can fail to match the source file and GCC cannot use the profile feedback information. By default, this warning is enabled and is treated as an error.</source>
          <target state="translated">、プロファイルフィードバックのあるファイルはソースファイルと一致しない可能性があり、GCCはプロファイルフィードバック情報を使用できません。デフォルトでは、この警告は有効になっており、エラーとして扱われます。</target>
        </trans-unit>
        <trans-unit id="49cbd8fc1988c38d8b75e8d548b8bb8d2f822f61" translate="yes" xml:space="preserve">
          <source>, the final executable will try to create the data file</source>
          <target state="translated">、最終的な実行可能ファイルはデータファイルを作成しようとします</target>
        </trans-unit>
        <trans-unit id="815a1ce8e00e3334738617eb00c2c9266ebafe03" translate="yes" xml:space="preserve">
          <source>, the generated object file is larger than a regular object file because it contains GIMPLE bytecodes and the usual final code (see</source>
          <target state="translated">、生成されたオブジェクトファイルは通常のオブジェクトファイルよりも大きくなります。これは、GIMPLEバイトコードと通常の最終コードが含まれているためです（</target>
        </trans-unit>
        <trans-unit id="93c87c2482200581ada6b793353d563f5ec679ac" translate="yes" xml:space="preserve">
          <source>, the library that comes with GCC, with</source>
          <target state="translated">、GCCに付属のライブラリ、</target>
        </trans-unit>
        <trans-unit id="b7a1837ffa642bc6e9d87b5530ec03163e746678" translate="yes" xml:space="preserve">
          <source>, the literals are interspersed in the text section in order to keep them as close as possible to their references. This may be necessary for large assembly files. Literals for each function are placed right before that function.</source>
          <target state="translated">、リテラルは、参照にできるだけ近づけるために、テキストセクションに散在しています。これは、大きなアセンブリファイルで必要になる場合があります。各関数のリテラルは、その関数の直前に配置されます。</target>
        </trans-unit>
        <trans-unit id="3874c30a889fc4550891f54d685ec72df06fd5db" translate="yes" xml:space="preserve">
          <source>, the normal function prologue and epilogue which set up the stack frame are omitted and no return instructions or return sequences are generated in the code. Use this option only together with visual inspection of the compiled code: no warnings or errors are generated when call-saved registers must be saved, or storage for local variables needs to be allocated.</source>
          <target state="translated">、スタックフレームを設定する通常の関数プロローグとエピローグは省略され、コード内に戻り命令や戻りシーケンスは生成されません。このオプションは、コンパイルされたコードの目視検査と一緒にのみ使用してください。呼び出しで保存されたレジスタを保存する必要がある場合や、ローカル変数のストレージを割り当てる必要がある場合、警告やエラーは生成されません。</target>
        </trans-unit>
        <trans-unit id="50289040a36706f3a23d65e893eec4854af6d2e0" translate="yes" xml:space="preserve">
          <source>, the object file for</source>
          <target state="translated">、のオブジェクトファイル</target>
        </trans-unit>
        <trans-unit id="4f57e72cae764cab6dfaa8a6b984d61c8fcfcea0" translate="yes" xml:space="preserve">
          <source>, the profiling code first attempts to read in an existing</source>
          <target state="translated">、プロファイリングコードは、最初に既存の</target>
        </trans-unit>
        <trans-unit id="c6a1f5530e3d7b4711a9e708a49cfd47c423f4f7" translate="yes" xml:space="preserve">
          <source>, the rules for</source>
          <target state="translated">、のルール</target>
        </trans-unit>
        <trans-unit id="8699bd16ca7024ea46de08dda1f9050558b25386" translate="yes" xml:space="preserve">
          <source>, the sign of the remainder follows the sign of the dividend. Both methods are arithmetically valid, the latter being almost exclusively used.</source>
          <target state="translated">、剰余の符号は被除数の符号の後に続きます。どちらの方法も算術的に有効であり、後者はほぼ排他的に使用されます。</target>
        </trans-unit>
        <trans-unit id="29acbd1d62bfd215ea629596b9c554886b91017d" translate="yes" xml:space="preserve">
          <source>, the single-application/dual-core programming model is used. In this model, the main function of Core B should be named as &lt;code&gt;coreb_main&lt;/code&gt;.</source>
          <target state="translated">、シングルアプリケーション/デュアルコアプログラミングモデルが使用されます。このモデルでは、コアBのメイン関数の名前を &lt;code&gt;coreb_main&lt;/code&gt; にする必要があります。</target>
        </trans-unit>
        <trans-unit id="667fda1f9e48385c0210894fbc7037623d1a4111" translate="yes" xml:space="preserve">
          <source>, the structure is aligned to a 1-byte boundary and is 1 byte in size.</source>
          <target state="translated">、構造は1バイト境界に揃えられ、サイズは1バイトです。</target>
        </trans-unit>
        <trans-unit id="e189049326051591313d1c5688fafbf491aeaf0f" translate="yes" xml:space="preserve">
          <source>, then</source>
          <target state="translated">、その後</target>
        </trans-unit>
        <trans-unit id="7ee186a18ff42c73f0354082e8ef090089e5effc" translate="yes" xml:space="preserve">
          <source>, then running &lt;code&gt;gcov&lt;/code&gt; on the file</source>
          <target state="translated">、次にファイルで &lt;code&gt;gcov&lt;/code&gt; を実行します</target>
        </trans-unit>
        <trans-unit id="6fd5514ee17d5d19d7515ba2ea9a77e61ac8a324" translate="yes" xml:space="preserve">
          <source>, then the dependencies are written to</source>
          <target state="translated">、次に依存関係が書き込まれます</target>
        </trans-unit>
        <trans-unit id="f4b8fa8d9a1275fa5b175ea2e48216447ff905c8" translate="yes" xml:space="preserve">
          <source>, then the precompiled header file is used if possible, and the original header is used otherwise.</source>
          <target state="translated">、可能な場合はプリコンパイル済みヘッダーファイルが使用され、それ以外の場合は元のヘッダーが使用されます。</target>
        </trans-unit>
        <trans-unit id="564c028c79c98b2596f511c52750e11cf8ed8aa0" translate="yes" xml:space="preserve">
          <source>, then you must disable instrumentation on all functions that are part of the instrumentation framework with the attribute &lt;code&gt;patchable_function_entry (0)&lt;/code&gt; to prevent recursion.</source>
          <target state="translated">次に、再帰を防ぐために、属性 &lt;code&gt;patchable_function_entry (0)&lt;/code&gt; を使用して、インストルメンテーションフレームワークの一部であるすべての関数のインストルメンテーションを無効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="e8d64d7606f91920bd635808a8350a26f4f43160" translate="yes" xml:space="preserve">
          <source>, then:</source>
          <target state="translated">、次に：</target>
        </trans-unit>
        <trans-unit id="18b1ddc03f8c4f7114c6642a980a4266ab4ee91d" translate="yes" xml:space="preserve">
          <source>, there is a small window between the time that the stack pointer is updated and the address of the previous frame is stored, which means code that walks the stack frame across interrupts or signals may get corrupted data.</source>
          <target state="translated">、スタックポインタが更新されてから前のフレームのアドレスが格納されるまでの間に小さなウィンドウがあり、これは、割り込みまたは信号をまたがってスタックフレームをウォークするコードがデータを破損する可能性があることを意味します。</target>
        </trans-unit>
        <trans-unit id="50141233a4a222a2ad6dabbea63d30e01eee8b71" translate="yes" xml:space="preserve">
          <source>, there may not be much stack space available for the latter code to run. If compiling all code, including library code, with</source>
          <target state="translated">、後者のコードを実行するために利用できるスタック領域が多くない場合があります。ライブラリコードを含むすべてのコードを</target>
        </trans-unit>
        <trans-unit id="326afd2af91c7cd70009eaf4d8cb90f6936cddbc" translate="yes" xml:space="preserve">
          <source>, they invoke &lt;code&gt;rdval&lt;/code&gt; and &lt;code&gt;wrval&lt;/code&gt;.</source>
          <target state="translated">、それらは &lt;code&gt;rdval&lt;/code&gt; および &lt;code&gt;wrval&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="4b91ca3210bb29fc4dfea84458ae04652f30e451" translate="yes" xml:space="preserve">
          <source>, this causes the compiler to keep track of the total number of virtual calls it encounters and the number of verifications it inserts. It also counts the number of calls to certain run-time library functions that it inserts and logs this information for each compilation unit. The compiler writes this information to a file named</source>
          <target state="translated">、これにより、コンパイラーは、発生した仮想呼び出しの総数と挿入した検証の数を追跡します。また、挿入する特定のランタイムライブラリ関数の呼び出し回数をカウントし、この情報を各コンパイル単位ごとに記録します。コンパイラはこの情報を次の名前のファイルに書き込みます</target>
        </trans-unit>
        <trans-unit id="f01188017d3c123848733d9fd6dfb22206ff1e87" translate="yes" xml:space="preserve">
          <source>, this is what you see when you use the basic &lt;code&gt;gcov&lt;/code&gt; facility:</source>
          <target state="translated">、これは基本的な &lt;code&gt;gcov&lt;/code&gt; 機能を使用したときに表示されるものです。</target>
        </trans-unit>
        <trans-unit id="5e5bfa587207f7380ee4c3bb705530423614bbd5" translate="yes" xml:space="preserve">
          <source>, this optimization can be performed by the assembler and the linker alone without help from the compiler.</source>
          <target state="translated">、この最適化は、コンパイラの助けなしに、アセンブラとリンカだけで実行できます。</target>
        </trans-unit>
        <trans-unit id="8d459e76328a6d385857ebd663c3475f17a65af0" translate="yes" xml:space="preserve">
          <source>, this option has no effect.</source>
          <target state="translated">、このオプションは効果がありません。</target>
        </trans-unit>
        <trans-unit id="7d3c6490f4076f4eee8ed0cae6ad3221f0b61401" translate="yes" xml:space="preserve">
          <source>, this option increases both compilation time and the performance of the generated code.</source>
          <target state="translated">、このオプションは、コンパイル時間と生成されたコードのパフォーマンスの両方を向上させます。</target>
        </trans-unit>
        <trans-unit id="d8fd13fa8750caa49540ff0768629b8cca833a35" translate="yes" xml:space="preserve">
          <source>, this option instructs the compiler to add code to gather information about values of expressions.</source>
          <target state="translated">、このオプションは、式の値に関する情報を収集するコードを追加するようコンパイラーに指示します。</target>
        </trans-unit>
        <trans-unit id="429b287e8d0f22a8e7c02112f3cd1eb77566d212" translate="yes" xml:space="preserve">
          <source>, those directories are searched for all &amp;lsquo;</source>
          <target state="translated">、それらのディレクトリがすべて検索されます '</target>
        </trans-unit>
        <trans-unit id="4d73a0b8dae23d131af59205c0f51492334fc033" translate="yes" xml:space="preserve">
          <source>, those options take precedence over the appropriate part of this option.</source>
          <target state="translated">、これらのオプションは、このオプションの適切な部分よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="32971533b36b13d8be7306c0655e0cba1b20c8f9" translate="yes" xml:space="preserve">
          <source>, though this could be supported for 68020 and higher processors.</source>
          <target state="translated">ただし、これは68020以降のプロセッサでサポートされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="ac0255e1660d4339b2ecf6c91d1ccb336078135f" translate="yes" xml:space="preserve">
          <source>, to improve optimizations based on the number of times each branch was taken. When a program compiled with</source>
          <target state="translated">、各分岐が行われた回数に基づいて最適化を改善します。でコンパイルされたプログラム</target>
        </trans-unit>
        <trans-unit id="ac44f21a3de295129d64b5a774011adcf28ae140" translate="yes" xml:space="preserve">
          <source>, turn on other options, such as</source>
          <target state="translated">など、他のオプションをオンにします</target>
        </trans-unit>
        <trans-unit id="446f5cf91d366f03eddeeaf354f183b84e577619" translate="yes" xml:space="preserve">
          <source>, type-punning is allowed, provided the memory is accessed through the union type. So, the code above works as expected. See &lt;a href=&quot;structures-unions-enumerations-and-bit_002dfields-implementation#Structures-unions-enumerations-and-bit_002dfields-implementation&quot;&gt;Structures unions enumerations and bit-fields implementation&lt;/a&gt;. However, this code might not:</source>
          <target state="translated">、メモリが共用体タイプを介してアクセスされる場合、タイプパニングが許可されます。したがって、上記のコードは期待どおりに動作します。&lt;a href=&quot;structures-unions-enumerations-and-bit_002dfields-implementation#Structures-unions-enumerations-and-bit_002dfields-implementation&quot;&gt;構造体の共用体の列挙とビットフィールドの実装を&lt;/a&gt;参照してください。ただし、このコードは次のことを行わない場合があります。</target>
        </trans-unit>
        <trans-unit id="3eb3379edebd14fb24a32aa3130ec6c35394eeb8" translate="yes" xml:space="preserve">
          <source>, unless</source>
          <target state="translated">、ただし</target>
        </trans-unit>
        <trans-unit id="ac2274935835d1d79884f7f27c0ba51679421f90" translate="yes" xml:space="preserve">
          <source>, used in addition to</source>
          <target state="translated">に加えて使用</target>
        </trans-unit>
        <trans-unit id="a56bae807872361f6ddda9c5d7baa9d2dc802cb0" translate="yes" xml:space="preserve">
          <source>, warnings are given about format features not in the selected standard version (but not for &lt;code&gt;strfmon&lt;/code&gt; formats, since those are not in any version of the C standard). See &lt;a href=&quot;c-dialect-options#C-Dialect-Options&quot;&gt;Options Controlling C Dialect&lt;/a&gt;.</source>
          <target state="translated">、選択した標準バージョンにないフォーマット機能に関する警告が表示されます（ただし、C標準のどのバージョンにもないため、 &lt;code&gt;strfmon&lt;/code&gt; フォーマットにはありません）。&lt;a href=&quot;c-dialect-options#C-Dialect-Options&quot;&gt;C方言を制御するオプションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="88a2f4ea153e2f7cf779ca618429b6ec5801bf5c" translate="yes" xml:space="preserve">
          <source>, where &lt;var&gt;N&lt;/var&gt; is a number in the range 0 to 9, then it is replaced by</source>
          <target state="translated">、ここで &lt;var&gt;N&lt;/var&gt; は0から9の範囲の数値であり、次に置き換えられます</target>
        </trans-unit>
        <trans-unit id="4756ea8500a07b5870d68c2dc4135f0e24797100" translate="yes" xml:space="preserve">
          <source>, where the &lt;var&gt;source-file&lt;/var&gt; component is the final filename part and the &lt;var&gt;md5&lt;/var&gt; component is calculated from the full mangled name that would have been used otherwise. The option is an alternative to the &lt;var&gt;&amp;ndash;preserve-paths&lt;/var&gt; on systems which have a filesystem limit.</source>
          <target state="translated">ここで、 &lt;var&gt;source-file&lt;/var&gt; コンポーネントは最終的なファイル名の部分であり、 &lt;var&gt;md5&lt;/var&gt; コンポーネントは、それ以外の場合に使用される完全なマングル名から計算されます。このオプションは、ファイルシステムに制限があるシステムでの &lt;var&gt;&amp;ndash;preserve-paths&lt;/var&gt; の代替です。</target>
        </trans-unit>
        <trans-unit id="230f86319e28b7455f7d53c3723a16687bfdfc57" translate="yes" xml:space="preserve">
          <source>, where the permissible values for &lt;var&gt;cpu&lt;/var&gt; are the same as those available for</source>
          <target state="translated">、ここで &lt;var&gt;cpu&lt;/var&gt; の許容値は、</target>
        </trans-unit>
        <trans-unit id="2254d7466842a921ec0e93daa8a81e8d02ab2cfb" translate="yes" xml:space="preserve">
          <source>, which GCC rejects as an invalid option in any actual compilation (rather than preprocessing, assembly or linking). To get just a warning, setting &lt;code&gt;GCC_COMPARE_DEBUG&lt;/code&gt; to &amp;lsquo;</source>
          <target state="translated">、GCCは実際のコンパイルでは（前処理、アセンブリ、リンクではなく）無効なオプションとして拒否します。警告のみを取得するには、 &lt;code&gt;GCC_COMPARE_DEBUG&lt;/code&gt; を ' に設定します</target>
        </trans-unit>
        <trans-unit id="e989e4cf45165ab34bb6bb136c281cdf9203ee24" translate="yes" xml:space="preserve">
          <source>, which allows GCC to inline most constant-sized copies.</source>
          <target state="translated">、GCCがほとんどの一定サイズのコピーをインライン化できるようにします。</target>
        </trans-unit>
        <trans-unit id="46699ca278faeacb3ea5e4e0e6aa330bfab42c0d" translate="yes" xml:space="preserve">
          <source>, which applies only to functions that are declared using the &lt;code&gt;dllexport&lt;/code&gt; attribute or declspec. See &lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;Declaring Attributes of Functions&lt;/a&gt;.</source>
          <target state="translated">、のみ使用して宣言された関数に適用される &lt;code&gt;dllexport&lt;/code&gt; 属性やdeclspecを。&lt;a href=&quot;function-attributes#Function-Attributes&quot;&gt;関数の属性の宣言を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="cd54cb18e1d323986e9f863c779e1f697545e855" translate="yes" xml:space="preserve">
          <source>, which can be disabled with</source>
          <target state="translated">で無効にできます</target>
        </trans-unit>
        <trans-unit id="06b72facf8cc43915080a973ea5dda407d52591f" translate="yes" xml:space="preserve">
          <source>, which causes the compiler to recognize the same Objective-C language syntax recognized by GCC 4.0, and to produce an error if one of the new features is used.</source>
          <target state="translated">これにより、コンパイラはGCC 4.0で認識されるのと同じObjective-C言語の構文を認識し、新しい機能の1つが使用されるとエラーを生成します。</target>
        </trans-unit>
        <trans-unit id="2de0e70e7120f7592acf3b303b06e39b57acee0c" translate="yes" xml:space="preserve">
          <source>, which disables the dumping of the final representation and the second compilation, preventing even &lt;code&gt;GCC_COMPARE_DEBUG&lt;/code&gt; from taking effect.</source>
          <target state="translated">、最終的な表現と2番目のコンパイルのダンプを無効にし、 &lt;code&gt;GCC_COMPARE_DEBUG&lt;/code&gt; が有効にならないようにします。</target>
        </trans-unit>
        <trans-unit id="0e4eb94e24a11397bf6fe92f4474bfbc8f3ca6bc" translate="yes" xml:space="preserve">
          <source>, which enables it; use</source>
          <target state="translated">、それを可能にします。使用する</target>
        </trans-unit>
        <trans-unit id="10e713fcad2fa12372ddfaea05c7df9060097043" translate="yes" xml:space="preserve">
          <source>, which implies</source>
          <target state="translated">を意味します</target>
        </trans-unit>
        <trans-unit id="f2f82387a05712f0b55c15013dd25fcda2c6d51f" translate="yes" xml:space="preserve">
          <source>, which is also one of the effective C++ recommendations. However, the check is extended to warn about the lack of virtual destructor in accessible non-polymorphic bases classes too.</source>
          <target state="translated">、これも効果的なC ++の推奨事項の1つです。ただし、チェックは拡張され、アクセス可能な非ポリモーフィックベースクラスにも仮想デストラクタがないことを警告します。</target>
        </trans-unit>
        <trans-unit id="8d738471a73ffb8b526b91636ca0ef2885217f80" translate="yes" xml:space="preserve">
          <source>, which is enabled by</source>
          <target state="translated">によって有効になります</target>
        </trans-unit>
        <trans-unit id="4502a0e761188e5c8233a9411a8864fc6121c93b" translate="yes" xml:space="preserve">
          <source>, which is enabled by default at</source>
          <target state="translated">、これはデフォルトで有効になっています</target>
        </trans-unit>
        <trans-unit id="7b03cadb73bdb5b121b37c664acf4102564be1aa" translate="yes" xml:space="preserve">
          <source>, which is on by default at</source>
          <target state="translated">、これはデフォルトでオンになっています</target>
        </trans-unit>
        <trans-unit id="65e8924d8e634e11e3e3c8423a5c0bf3ec344ab3" translate="yes" xml:space="preserve">
          <source>, which is still supported, because it does not use shell special characters.</source>
          <target state="translated">シェルの特殊文字を使用しないため、引き続きサポートされています。</target>
        </trans-unit>
        <trans-unit id="6ce4b030ad0c9a1e1625f5d28ae9b41b1de635be" translate="yes" xml:space="preserve">
          <source>, which is the negative form of</source>
          <target state="translated">の否定形です</target>
        </trans-unit>
        <trans-unit id="6ec90d1ff3ca86f96f89ef39059823f9658e3e1e" translate="yes" xml:space="preserve">
          <source>, which may turn on further options, such as</source>
          <target state="translated">、などの追加オプションをオンにすることができます</target>
        </trans-unit>
        <trans-unit id="082e8aad8694962e494d7d77884c7dfe5926bb26" translate="yes" xml:space="preserve">
          <source>, which merely tunes the generated code for the specified &lt;var&gt;cpu-type&lt;/var&gt;,</source>
          <target state="translated">、指定された &lt;var&gt;cpu-type&lt;/var&gt; に対して生成されたコードを調整するだけです。</target>
        </trans-unit>
        <trans-unit id="f59e35e5dc78b628f6809a4752d27ac48bb1f008" translate="yes" xml:space="preserve">
          <source>, which must come from a separate C library implementation. Because of this the GNU C compiler does not define macro &lt;code&gt;__STDC_DEC_FP__&lt;/code&gt; to indicate that the implementation conforms to the technical report.</source>
          <target state="translated">これは、個別のCライブラリ実装から取得する必要があります。このため、GNU Cコンパイラは、実装がテクニカルレポートに準拠していることを示すマクロ &lt;code&gt;__STDC_DEC_FP__&lt;/code&gt; を定義していません。</target>
        </trans-unit>
        <trans-unit id="9578678819c9dfdf597d5e59c8c2d0c2abbab9d6" translate="yes" xml:space="preserve">
          <source>, which places literals in a separate section in the output file unless</source>
          <target state="translated">、リテラルを出力ファイルの別のセクションに配置します。</target>
        </trans-unit>
        <trans-unit id="883ecbd65c15c80691c67d2f907d5c7aa2ef6aac" translate="yes" xml:space="preserve">
          <source>, which places literals in a separate section in the output file. This allows the literal pool to be placed in a data RAM/ROM, and it also allows the linker to combine literal pools from separate object files to remove redundant literals and improve code size. With</source>
          <target state="translated">、リテラルを出力ファイルの別のセクションに配置します。これにより、リテラルプールをデータRAM / ROMに配置できます。また、リンカが個別のオブジェクトファイルのリテラルプールを結合して、冗長リテラルを削除し、コードサイズを改善できます。と</target>
        </trans-unit>
        <trans-unit id="c4a3cc602f61d3b174e82540c1b8773914df0766" translate="yes" xml:space="preserve">
          <source>, which selects the one-application-per-core programming model. Without</source>
          <target state="translated">、コアごとに1つのアプリケーションのプログラミングモデルを選択します。なし</target>
        </trans-unit>
        <trans-unit id="fa953aa1d2a4a6171c0b8ff19c074aba480082a9" translate="yes" xml:space="preserve">
          <source>, which serves for most needs.</source>
          <target state="translated">、ほとんどのニーズに対応します。</target>
        </trans-unit>
        <trans-unit id="d224f30c1704dfd148245e41365bdb459eeae8ff" translate="yes" xml:space="preserve">
          <source>, which specifies that the compiler places uninitialized global variables in the BSS section of the object file. This inhibits the merging of tentative definitions by the linker so you get a multiple-definition error if the same variable is accidentally defined in more than one compilation unit.</source>
          <target state="translated">、これは、コンパイラが初期化されていないグローバル変数をオブジェクトファイルのBSSセクションに配置することを指定します。これにより、リンカによる仮定義のマージが禁止されるため、同じ変数が複数のコンパイルユニットで誤って定義された場合に複数定義エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="a4f2d97a4a669aa53418fe3954e59b741a6fbbdf" translate="yes" xml:space="preserve">
          <source>, which tells GCC to ignore the attribute for inlined functions unless the</source>
          <target state="translated">、GCCにインライン関数の属性を無視するように指示します。</target>
        </trans-unit>
        <trans-unit id="09a4ee6a5e86260dc3373c4048b2d477f6cfcda4" translate="yes" xml:space="preserve">
          <source>, which uses DImode as preferred SIMD mode.</source>
          <target state="translated">、これはDImodeを優先SIMDモードとして使用します。</target>
        </trans-unit>
        <trans-unit id="6f76a67230e5947e1c451436d1b658485d290c47" translate="yes" xml:space="preserve">
          <source>, which uses slower, but IEEE-compliant, software comparisons.</source>
          <target state="translated">遅いが、IEEE準拠のソフトウェア比較を使用します。</target>
        </trans-unit>
        <trans-unit id="556b07890fce44f6b6132283c9ed18c93acca22b" translate="yes" xml:space="preserve">
          <source>, which warns about any identifier that is not in the ISO 10646 &amp;ldquo;C&amp;rdquo; normalized form, &lt;em&gt;NFC&lt;/em&gt;. NFC is the recommended form for most uses. It is equivalent to</source>
          <target state="translated">、ISO 10646「C」の正規化された形式ではない識別子、&lt;em&gt;NFC&lt;/em&gt;について警告します。NFCは、ほとんどの用途に推奨されるフォームです。に相当</target>
        </trans-unit>
        <trans-unit id="32e2fd6d52e014696dd3032ae2240c099458a6e3" translate="yes" xml:space="preserve">
          <source>, which warns for pointer argument passing or assignment with different signedness.</source>
          <target state="translated">、ポインタ引数の引き渡しまたは異なる符号付きの割り当てを警告します。</target>
        </trans-unit>
        <trans-unit id="8937da5834fe58a4195b5beccef41b08b4ec15c4" translate="yes" xml:space="preserve">
          <source>, which will turn these warnings into errors.</source>
          <target state="translated">、これらの警告をエラーに変えます。</target>
        </trans-unit>
        <trans-unit id="49d2d73c488287ee47e9e23a7bde89fad3f5a395" translate="yes" xml:space="preserve">
          <source>, while</source>
          <target state="translated">、</target>
        </trans-unit>
        <trans-unit id="c986d828f7d9c3017ba629babae8bb52ae352cf6" translate="yes" xml:space="preserve">
          <source>, while the &amp;lsquo;</source>
          <target state="translated">、 '</target>
        </trans-unit>
        <trans-unit id="a9eafc1b8f96cf25eb2fe2756bd682cb2dd19e7d" translate="yes" xml:space="preserve">
          <source>, with the equal sign but without &lt;var&gt;opts&lt;/var&gt;, is equivalent to</source>
          <target state="translated">、等号はあるが &lt;var&gt;opts&lt;/var&gt; がない場合は、</target>
        </trans-unit>
        <trans-unit id="af1f38353679ab12cc97376ba65588d3f11963ec" translate="yes" xml:space="preserve">
          <source>, without regenerating the profiles. In these cases, the profile feedback data files do not contain any profile feedback information for the newly added function or file respectively. Also, in the case when profile count data (.gcda) files are removed, GCC cannot use any profile feedback information. In all these cases, warnings are issued to inform the user that a profile generation step is due.</source>
          <target state="translated">、プロファイルを再生成せずに。これらの場合、プロファイルフィードバックデータファイルには、新しく追加された関数またはファイルのプロファイルフィードバック情報が含まれていません。また、プロファイルカウントデータ（.gcda）ファイルが削除される場合、GCCはプロファイルフィードバック情報を使用できません。これらすべての場合において、プロファイル生成ステップの期限が近づいていることをユーザーに通知する警告が発行されます。</target>
        </trans-unit>
        <trans-unit id="e04c63fe10915f336b7c76f899b72d3881632827" translate="yes" xml:space="preserve">
          <source>, without regenerating the profiles. In these cases, the profile feedback data files do not contain any profile feedback information for the newly added function or file respectively. Also, in the case when profile count data (.gcda) files are removed, GCC cannot use any profile feedback information. In all these cases, warnings are issued to inform you that a profile generation step is due. Ignoring the warning can result in poorly optimized code.</source>
          <target state="translated">、プロファイルを再生成せずに。このような場合、プロファイルフィードバックデータファイルには、新しく追加された関数またはファイルのプロファイルフィードバック情報は含まれていません。また、プロファイルカウントデータ（.gcda）ファイルが削除された場合、GCCはプロファイルフィードバック情報を使用できません。これらすべての場合において、プロファイル生成ステップの期限が来ていることを通知する警告が発行されます。警告を無視すると、コードの最適化が不十分になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="52a27dd7fbbb21792c986b2b6824d02997f4ba52" translate="yes" xml:space="preserve">
          <source>, you cannot successfully use &amp;lsquo;</source>
          <target state="translated">、正常に使用できません '</target>
        </trans-unit>
        <trans-unit id="23ef02ca85f6b31d2291f491abea6f9361c6b954" translate="yes" xml:space="preserve">
          <source>, you may define macros such as:</source>
          <target state="translated">、次のようなマクロを定義できます。</target>
        </trans-unit>
        <trans-unit id="a514e8bd0a877b0e43d2a6e4382e7592decbff8f" translate="yes" xml:space="preserve">
          <source>, you must write</source>
          <target state="translated">、あなたは書く必要があります</target>
        </trans-unit>
        <trans-unit id="9d27805c306f9f2234b2f442e2c3ae50e7f6b738" translate="yes" xml:space="preserve">
          <source>, you should compile all source code with</source>
          <target state="translated">、すべてのソースコードを</target>
        </trans-unit>
        <trans-unit id="e1d8dc37d34101f1c1384f1753d981d4a4b19c09" translate="yes" xml:space="preserve">
          <source>- &lt;code&gt;div&lt;/code&gt; and &lt;code&gt;ddiv&lt;/code&gt; do not always produce the correct result if one of the operands is negative.</source>
          <target state="translated">- オペランドの1つが負の場合、 &lt;code&gt;div&lt;/code&gt; および &lt;code&gt;ddiv&lt;/code&gt; は常に正しい結果を生成するとは限りません。</target>
        </trans-unit>
        <trans-unit id="4e45c9b5be01af93079947067a03297d9a5481bf" translate="yes" xml:space="preserve">
          <source>- &lt;code&gt;dmultu&lt;/code&gt; does not always produce the correct result.</source>
          <target state="translated">- &lt;code&gt;dmultu&lt;/code&gt; は常に正しい結果を生成しません。</target>
        </trans-unit>
        <trans-unit id="28d877a0732ecb70d1b0d29bb8a8ac0cbdc46350" translate="yes" xml:space="preserve">
          <source>- &lt;code&gt;ll&lt;/code&gt;/&lt;code&gt;sc&lt;/code&gt; sequences may not behave atomically on revisions prior to 3.0. They may deadlock on revisions 2.6 and earlier.</source>
          <target state="translated">- &lt;code&gt;ll&lt;/code&gt; / &lt;code&gt;sc&lt;/code&gt; シーケンスは、3.0より前のリビジョンにアトミックに動作しない場合があります。リビジョン2.6以前ではデッドロックが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="fa7a5e7633b9a3ecd053316c95969628f0544ee8" translate="yes" xml:space="preserve">
          <source>- A double-word or a variable shift may give an incorrect result if executed immediately after starting an integer division.</source>
          <target state="translated">-整数除算を開始した直後にダブルワードまたは変数シフトを実行すると、正しくない結果になる場合があります。</target>
        </trans-unit>
        <trans-unit id="e9f449d4a2d00742e6bf85e117d9a7f43dbe3ac3" translate="yes" xml:space="preserve">
          <source>- A double-word or a variable shift may give an incorrect result if executed while an integer multiplication is in progress.</source>
          <target state="translated">-整数の乗算の実行中にダブルワードまたは変数シフトを実行すると、正しくない結果が得られる場合があります。</target>
        </trans-unit>
        <trans-unit id="37b5a028a0a61d0deef86c72ae21ad424fb6e2b5" translate="yes" xml:space="preserve">
          <source>- An integer division may give an incorrect result if started in a delay slot of a taken branch or a jump.</source>
          <target state="translated">-整数除算は、分岐またはジャンプの遅延スロットで開始した場合、誤った結果をもたらす可能性があります。</target>
        </trans-unit>
        <trans-unit id="2f936f979fbda07460d599549f1df49a28fec083" translate="yes" xml:space="preserve">
          <source>- C and C++ constructors/destructors called during startup/shutdown.</source>
          <target state="translated">-起動/シャットダウン時に呼び出されるCおよびC ++コンストラクタ/デストラクタ。</target>
        </trans-unit>
        <trans-unit id="d917511b7e91146ed81c5690753d05a01acc4a7f" translate="yes" xml:space="preserve">
          <source>- Computed goto.</source>
          <target state="translated">-計算されたgoto。</target>
        </trans-unit>
        <trans-unit id="0d12a6b873acc6a7dc115ab6c3ad7b78003c597b" translate="yes" xml:space="preserve">
          <source>- If prologue-save function is used, see</source>
          <target state="translated">-プロローグ保存機能を使用する場合は、</target>
        </trans-unit>
        <trans-unit id="f404d504a2d046d8eb074ad64c1ff4564f204db6" translate="yes" xml:space="preserve">
          <source>- If the tools hit a &lt;code&gt;gs()&lt;/code&gt; modifier explained above.</source>
          <target state="translated">-ツールが上記の &lt;code&gt;gs()&lt;/code&gt; 修飾子にヒットした場合。</target>
        </trans-unit>
        <trans-unit id="8544c24c038210d50588d230bbce1287f212a4a7" translate="yes" xml:space="preserve">
          <source>- Switch/case dispatch tables. If you do not want such dispatch tables you can specify the</source>
          <target state="translated">-スイッチ/ケースディスパッチテーブル。このようなディスパッチテーブルが必要ない場合は、</target>
        </trans-unit>
        <trans-unit id="10c2c384d1ba94948e8054a096aa485c0fc12ae5" translate="yes" xml:space="preserve">
          <source>- Taking address of a function or code label.</source>
          <target state="translated">-関数またはコードラベルのアドレスを取得します。</target>
        </trans-unit>
        <trans-unit id="d7148d1a6b1975ea9d5965578463516097e7671d" translate="yes" xml:space="preserve">
          <source>- The address of a label is taken by means of the &lt;code&gt;gs&lt;/code&gt; modifier (short for &lt;em&gt;generate stubs&lt;/em&gt;) like so:</source>
          <target state="translated">-ラベルのアドレスは、次のように &lt;code&gt;gs&lt;/code&gt; 修飾子（&lt;em&gt;generate stubsの&lt;/em&gt;略）によって取得されます。</target>
        </trans-unit>
        <trans-unit id="14b71f67f8e45a2a107c7b5baf13d693803269da" translate="yes" xml:space="preserve">
          <source>- The final location of that label is in a code segment &lt;em&gt;outside&lt;/em&gt; the segment where the stubs are located.</source>
          <target state="translated">-そのラベルの最終的な場所は、スタブが配置されているセグメントの&lt;em&gt;外側&lt;/em&gt;のコードセグメントです。</target>
        </trans-unit>
        <trans-unit id="19d63ce6052f4c54b84829f0b7d6e03edecb61ff" translate="yes" xml:space="preserve">
          <source>--coverage</source>
          <target state="translated">--coverage</target>
        </trans-unit>
        <trans-unit id="dfd9358562e69140980df6448abfc0be3f647ed5" translate="yes" xml:space="preserve">
          <source>--eh-frame-hdr</source>
          <target state="translated">--eh-frame-hdr</target>
        </trans-unit>
        <trans-unit id="a0a2fefd37a87ad5d2972a5d58e4ea49ca4f3287" translate="yes" xml:space="preserve">
          <source>--enable-auto-import</source>
          <target state="translated">--enable-auto-import</target>
        </trans-unit>
        <trans-unit id="19ec31a0c9370e4ca1653c6162cf9b8a97cdc3b1" translate="yes" xml:space="preserve">
          <source>--enable-cld</source>
          <target state="translated">--enable-cld</target>
        </trans-unit>
        <trans-unit id="197a6fdb5d15626e81d42a00c924963f87cb5f0e" translate="yes" xml:space="preserve">
          <source>--enable-newlib-nano-formatted-io</source>
          <target state="translated">--enable-newlib-nano-formatted-io</target>
        </trans-unit>
        <trans-unit id="45d75f7f8e031e18a19b4310578eef230b726c86" translate="yes" xml:space="preserve">
          <source>--enable-secureplt</source>
          <target state="translated">--enable-secureplt</target>
        </trans-unit>
        <trans-unit id="b4e2ad8851d273611b45f3eaa2ac10287c874b49" translate="yes" xml:space="preserve">
          <source>--export-all</source>
          <target state="translated">--export-all</target>
        </trans-unit>
        <trans-unit id="b9e9f25c1c659f705184cc8a6309a762e9c03bc8" translate="yes" xml:space="preserve">
          <source>--gc-sections</source>
          <target state="translated">--gc-sections</target>
        </trans-unit>
        <trans-unit id="9a8265a5ba2c33881e2717e7581df323a5188174" translate="yes" xml:space="preserve">
          <source>--help</source>
          <target state="translated">--help</target>
        </trans-unit>
        <trans-unit id="88d3346c36ef09ed6fcd3041d7c7328e66a82c3d" translate="yes" xml:space="preserve">
          <source>--help=</source>
          <target state="translated">--help=</target>
        </trans-unit>
        <trans-unit id="83e48cc5863539edea576aba905cb078520ec230" translate="yes" xml:space="preserve">
          <source>--help=param -Q</source>
          <target state="translated">--help = param -Q</target>
        </trans-unit>
        <trans-unit id="142fdbe422fca8e1f0ae90e0fded107cf3324105" translate="yes" xml:space="preserve">
          <source>--help=target</source>
          <target state="translated">--help=target</target>
        </trans-unit>
        <trans-unit id="f4b42adb9ab9af50964868976f43d9f709933d73" translate="yes" xml:space="preserve">
          <source>--json-format</source>
          <target state="translated">--json-format</target>
        </trans-unit>
        <trans-unit id="7ee16625a2f5c7c7f5e47fea7979ac8403afdfad" translate="yes" xml:space="preserve">
          <source>--mlink-relax</source>
          <target state="translated">--mlink-relax</target>
        </trans-unit>
        <trans-unit id="d698fa2efed05b46c6af43a44640e66e53ff7e33" translate="yes" xml:space="preserve">
          <source>--no-relax</source>
          <target state="translated">--no-relax</target>
        </trans-unit>
        <trans-unit id="c39e62a5d2c5adeeb352ed945b13bb7e7648c763" translate="yes" xml:space="preserve">
          <source>--param</source>
          <target state="translated">--param</target>
        </trans-unit>
        <trans-unit id="a016b2a12b436dad6a4936a8b629b5250cf51ab2" translate="yes" xml:space="preserve">
          <source>--param &lt;var&gt;name&lt;/var&gt;=&lt;var&gt;value&lt;/var&gt;</source>
          <target state="translated">--param &lt;var&gt;name&lt;/var&gt; = &lt;var&gt;value&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="ea3084075053b6ced7b782ed6e166de728a3dfae" translate="yes" xml:space="preserve">
          <source>--param analyzer-bb-explosion-factor=&lt;var&gt;value&lt;/var&gt;</source>
          <target state="translated">--param Analyzer-bb-explosion-factor = &lt;var&gt;value&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="c30f9ce36875205ddd2b84082b5588f1dea87163" translate="yes" xml:space="preserve">
          <source>--param analyzer-max-enodes-per-program-point=&lt;var&gt;value&lt;/var&gt;</source>
          <target state="translated">--param Analyzer-max-enodes-per-program-point = &lt;var&gt;value&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="8a5f0a236710fc51116161866585a79420a41436" translate="yes" xml:space="preserve">
          <source>--param analyzer-max-recursion-depth=&lt;var&gt;value&lt;/var&gt;</source>
          <target state="translated">--paramanalyzer-max-recursion-depth = &lt;var&gt;value&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="16fefc07e5516c78321787bc2f60486c0980c70e" translate="yes" xml:space="preserve">
          <source>--param analyzer-min-snodes-for-call-summary=&lt;var&gt;value&lt;/var&gt;</source>
          <target state="translated">--param Analyzer-min-snodes-for-call-summary = &lt;var&gt;value&lt;/var&gt;</target>
        </trans-unit>
        <trans-unit id="2f053c2b9af56f4f6906583b62e669a5032f9c48" translate="yes" xml:space="preserve">
          <source>--param asan-globals=0</source>
          <target state="translated">--param asan-globals = 0</target>
        </trans-unit>
        <trans-unit id="046d1ab314aca2f65f8567874fe4552e8783d6c2" translate="yes" xml:space="preserve">
          <source>--param asan-instrument-reads=0</source>
          <target state="translated">--param asan-instrument-reads = 0</target>
        </trans-unit>
        <trans-unit id="6e97d7ea0a0d892c251b0b7c4fe2f043e62e2970" translate="yes" xml:space="preserve">
          <source>--param asan-instrument-writes=0</source>
          <target state="translated">--param asan-instrument-writes = 0</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
