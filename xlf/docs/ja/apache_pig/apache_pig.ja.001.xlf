<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="apache_pig">
    <body>
      <group id="apache_pig">
        <trans-unit id="b84bc074a676488f8828fbd4d80a248a56a789fd" translate="yes" xml:space="preserve">
          <source>#reducers = MIN (pig.exec.reducers.max, total input size (in bytes) / bytes per reducer)</source>
          <target state="translated">#reducers = MIN（pig.exec.reducers.max、合計入力サイズ（バイト単位）/レデューサーあたりのバイト数）</target>
        </trans-unit>
        <trans-unit id="8354e8987197f8f3f65048ed50db923e92430c80" translate="yes" xml:space="preserve">
          <source>$ export PATH=/&amp;lt;my-path-to-pig&amp;gt;/pig-n.n.n/bin:$PATH</source>
          <target state="translated">$エクスポートPATH = / &amp;lt;my-path-to-pig&amp;gt; / pig-nnn / bin：$ PATH</target>
        </trans-unit>
        <trans-unit id="1b82a3d4debf655b50bc5c4c73a5a0dd099e4e88" translate="yes" xml:space="preserve">
          <source>$x .. $y : projects columns through $y, inclusive</source>
          <target state="translated">$ x .. $ y：$ yから$ yまでの列を射影します</target>
        </trans-unit>
        <trans-unit id="03acefa58a02d7ca8fdcdc03b8ecfd38423e91d5" translate="yes" xml:space="preserve">
          <source>$x .. : projects columns through end, inclusive</source>
          <target state="translated">$ x ..：列を最後まで包括的に投影します</target>
        </trans-unit>
        <trans-unit id="b7614f84ca9cc1f748809a55e2f814dcb58e3bd9" translate="yes" xml:space="preserve">
          <source>% modulo</source>
          <target state="translated">％モジュロ</target>
        </trans-unit>
        <trans-unit id="57890f589aef66a37b3df37534465aa840218f6f" translate="yes" xml:space="preserve">
          <source>%declare</source>
          <target state="translated">%declare</target>
        </trans-unit>
        <trans-unit id="8c2129f753dea3ef6b0e2a86035f15e9888c2973" translate="yes" xml:space="preserve">
          <source>%default</source>
          <target state="translated">%default</target>
        </trans-unit>
        <trans-unit id="9d559fca6624781de64da3cbf87e5383409959c7" translate="yes" xml:space="preserve">
          <source>&amp;copy; 2007&amp;ndash;2017 Apache Software Foundation</source>
          <target state="translated">&amp;copy;2007&amp;ndash;2017 Apache Software Foundation</target>
        </trans-unit>
        <trans-unit id="908c1e177a8633826af2fa31bee5cd04a08abf18" translate="yes" xml:space="preserve">
          <source>&amp;gt;, &amp;lt;</source>
          <target state="translated">&amp;gt;、&amp;lt;</target>
        </trans-unit>
        <trans-unit id="361700fbe012c3cd2d8045945a221334e0df1bb7" translate="yes" xml:space="preserve">
          <source>&amp;gt;=, &amp;lt;=</source>
          <target state="translated">&amp;gt; =、&amp;lt;=</target>
        </trans-unit>
        <trans-unit id="839e4a2006b278a93c4dc0f1936567078302c3f3" translate="yes" xml:space="preserve">
          <source>&amp;hellip;</source>
          <target state="translated">&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="cb90cc32b7213ab9e55be03ebc7a77f06b9dac38" translate="yes" xml:space="preserve">
          <source>&amp;ndash;brief</source>
          <target state="translated">&amp;ndash;brief</target>
        </trans-unit>
        <trans-unit id="258bc41b6c768b10dbdcc12de44876c94cc4d5a7" translate="yes" xml:space="preserve">
          <source>&amp;ndash;dot, -xml</source>
          <target state="translated">&amp;ndash;dot、-xml</target>
        </trans-unit>
        <trans-unit id="5e4178c0b6636e6d29b88558269d8aa070ea2e67" translate="yes" xml:space="preserve">
          <source>&amp;ndash;out</source>
          <target state="translated">&amp;ndash;out</target>
        </trans-unit>
        <trans-unit id="3f3ffbed51fb277f882a75b339836f5a8bf721b4" translate="yes" xml:space="preserve">
          <source>&amp;ndash;param param_name = param_value</source>
          <target state="translated">&amp;ndash;param param_name = param_value</target>
        </trans-unit>
        <trans-unit id="ae5db2e46d0ffbbc371cf2bc9c453145fd0f1515" translate="yes" xml:space="preserve">
          <source>&amp;ndash;param_file file_name</source>
          <target state="translated">&amp;ndash;param_file file_name</target>
        </trans-unit>
        <trans-unit id="d85cc3b3555449ad3b192323c6c68d87071cb8e0" translate="yes" xml:space="preserve">
          <source>&amp;ndash;script</source>
          <target state="translated">&amp;ndash;script</target>
        </trans-unit>
        <trans-unit id="0bde4f85858da8acb95649c50ff3d43b6ad2fc34" translate="yes" xml:space="preserve">
          <source>' 123.142| a27e0'</source>
          <target state="translated">'123.142 | a27e0 '</target>
        </trans-unit>
        <trans-unit id="b19d05d1e1a23c54003f9d95179a5e2325369cf7" translate="yes" xml:space="preserve">
          <source>' 1234567| 1234567|yay '</source>
          <target state="translated">'1234567 | 1234567 |イェイ</target>
        </trans-unit>
        <trans-unit id="91764d4adf3000598466380065cbcd0e6bafd7b4" translate="yes" xml:space="preserve">
          <source>'%,+10d|%(06d'</source>
          <target state="translated">'%,+10d|%(06d'</target>
        </trans-unit>
        <trans-unit id="d815e6fad62bb57cb575daa45061351efe14eaa5" translate="yes" xml:space="preserve">
          <source>'%2$5d: %3$6s %1$3s %2$4x (%&amp;lt;4X)'</source>
          <target state="translated">'％2 $ 5d：％3 $ 6s％1 $ 3s％2 $ 4x（％&amp;lt;4X）'</target>
        </trans-unit>
        <trans-unit id="5240a0080138a24ae8ac0984ec6f2132643601f1" translate="yes" xml:space="preserve">
          <source>'%8.3f|%6x'</source>
          <target state="translated">'%8.3f|%6x'</target>
        </trans-unit>
        <trans-unit id="72c632a8ce86d13c49294287d5cf12dff3cf0481" translate="yes" xml:space="preserve">
          <source>'%8s'</source>
          <target state="translated">'%8s'</target>
        </trans-unit>
        <trans-unit id="1b4f133ce3ea53bc23dd7f4e25e520c06b3f4aab" translate="yes" xml:space="preserve">
          <source>'%8s|%-8s'</source>
          <target state="translated">'%8s|%-8s'</target>
        </trans-unit>
        <trans-unit id="3fa42c40482b85e2c0f35aa3a15f03303a92d428" translate="yes" xml:space="preserve">
          <source>'%8s|%8d|%-8s'</source>
          <target state="translated">'%8s|%8d|%-8s'</target>
        </trans-unit>
        <trans-unit id="f563aca661821c80339687a3ca588a58c69ffa37" translate="yes" xml:space="preserve">
          <source>'+1,234,567|(0123)'</source>
          <target state="translated">'+1,234,567|(0123)'</target>
        </trans-unit>
        <trans-unit id="96c34a355bbed7760577054ca9061b6277211788" translate="yes" xml:space="preserve">
          <source>'/dir' is the log directory, enclosed in single quotes.</source>
          <target state="translated">'/ dir'は、一重引用符で囲まれたログディレクトリです。</target>
        </trans-unit>
        <trans-unit id="f0cc6434da610d54f160966ae2c017de3b1b47bf" translate="yes" xml:space="preserve">
          <source>'48879: wheres the beef (BEEF)'</source>
          <target state="translated">「48879：牛肉（BEEF）」</target>
        </trans-unit>
        <trans-unit id="44a42a07c6841e44060d913108730700b1510a85" translate="yes" xml:space="preserve">
          <source>'Launch Time: %14d %s'</source>
          <target state="translated">'起動時間：％14d％s'</target>
        </trans-unit>
        <trans-unit id="c988e426c095dadaedc8ad9347fadc684110d460" translate="yes" xml:space="preserve">
          <source>'Launch Time: 1400164132000 2014-05-15 09:28:52 -0500'</source>
          <target state="translated">「起動時間：1400164132000 2014-05-15 09:28:52 -0500」</target>
        </trans-unit>
        <trans-unit id="35922f9416fbaa4859976e6eecc5d77264345de1" translate="yes" xml:space="preserve">
          <source>'also'</source>
          <target state="translated">'also'</target>
        </trans-unit>
        <trans-unit id="e8daba181bbe359260b9411ccb426da7417bd463" translate="yes" xml:space="preserve">
          <source>'bloom'</source>
          <target state="translated">'bloom'</target>
        </trans-unit>
        <trans-unit id="8f9218d9334ec3272b7d6a6c5c138a2284b3f5a9" translate="yes" xml:space="preserve">
          <source>'character'</source>
          <target state="translated">'character'</target>
        </trans-unit>
        <trans-unit id="e20107e960ea9ae34308d02dc456faceeb2afac0" translate="yes" xml:space="preserve">
          <source>'collected'</source>
          <target state="translated">'collected'</target>
        </trans-unit>
        <trans-unit id="5b396fe22d540019bc2a9738eaec648006a89c08" translate="yes" xml:space="preserve">
          <source>'columns'</source>
          <target state="translated">'columns'</target>
        </trans-unit>
        <trans-unit id="57fb7269bc41023a0d0170630f4a2ad71c89ef25" translate="yes" xml:space="preserve">
          <source>'data'</source>
          <target state="translated">'data'</target>
        </trans-unit>
        <trans-unit id="6826a145d5c6bc40518f7e21bdc7295ce35adb9e" translate="yes" xml:space="preserve">
          <source>'data' - data source you supply</source>
          <target state="translated">'data'-指定したデータソース</target>
        </trans-unit>
        <trans-unit id="ebac0126859784e6a20fac73243ca635a21a9eae" translate="yes" xml:space="preserve">
          <source>'dfs_path#dfs_file' &amp;ndash; A file path/file name on the distributed file system, enclosed in single quotes. Example: '/mydir/mydata.txt#mydata.txt'</source>
          <target state="translated">'dfs_path＃dfs_file' &amp;ndash;単一引用符で囲まれた、分散ファイルシステム上のファイルパス/ファイル名。例： '/mydir/mydata.txt#mydata.txt'</target>
        </trans-unit>
        <trans-unit id="58b85ead5d5e764aa92eac8c40857bfbe91d853c" translate="yes" xml:space="preserve">
          <source>'directory'</source>
          <target state="translated">'directory'</target>
        </trans-unit>
        <trans-unit id="6df7222fbd791dffe3b3bdd1bd98ab462653678a" translate="yes" xml:space="preserve">
          <source>'field_delimiter'</source>
          <target state="translated">'field_delimiter'</target>
        </trans-unit>
        <trans-unit id="bf922bbf59a5b5434ed0583ed872eeacfb110098" translate="yes" xml:space="preserve">
          <source>'hello world'</source>
          <target state="translated">'こんにちは世界'</target>
        </trans-unit>
        <trans-unit id="6d4c00a4227dcd62a6f2231b50aa34a4b50184e4" translate="yes" xml:space="preserve">
          <source>'ignored'</source>
          <target state="translated">'ignored'</target>
        </trans-unit>
        <trans-unit id="47842e7b618acc1f3b0ec46dfc1e4335522aa3d8" translate="yes" xml:space="preserve">
          <source>'merge'</source>
          <target state="translated">'merge'</target>
        </trans-unit>
        <trans-unit id="409adf4b6224f54dd72bf63f203cd21876bd38e2" translate="yes" xml:space="preserve">
          <source>'merge-sparse'</source>
          <target state="translated">'merge-sparse'</target>
        </trans-unit>
        <trans-unit id="474906e5cc1c33034fbd1bd40f746897c47f5478" translate="yes" xml:space="preserve">
          <source>'newChar'</source>
          <target state="translated">'newChar'</target>
        </trans-unit>
        <trans-unit id="a9c02a751a3a5f2dce8ccf12cc0bf8c29395fc9f" translate="yes" xml:space="preserve">
          <source>'options'</source>
          <target state="translated">'options'</target>
        </trans-unit>
        <trans-unit id="c9f3e3870e7865a73e1c751e735640935d548383" translate="yes" xml:space="preserve">
          <source>'path' &amp;ndash; A file path, enclosed in single quotes.</source>
          <target state="translated">'path' &amp;ndash;一重引用符で囲まれたファイルパス。</target>
        </trans-unit>
        <trans-unit id="0f4aa02f5b798bfd9cf80f92632f8ad7c724b78b" translate="yes" xml:space="preserve">
          <source>'regExp'</source>
          <target state="translated">'regExp'</target>
        </trans-unit>
        <trans-unit id="2e3a923d2c0aa0107a3099cde9f1699e90610d47" translate="yes" xml:space="preserve">
          <source>'replicated'</source>
          <target state="translated">'replicated'</target>
        </trans-unit>
        <trans-unit id="046ec40f11932a3023cf2f0ea16ca8a5cfd78ffa" translate="yes" xml:space="preserve">
          <source>'skewed'</source>
          <target state="translated">'skewed'</target>
        </trans-unit>
        <trans-unit id="0d88981c63826b2051c6aaa5bf241a2b92319fc0" translate="yes" xml:space="preserve">
          <source>'the'</source>
          <target state="translated">'the'</target>
        </trans-unit>
        <trans-unit id="e915535c8608bfca6fd04435a5ce76664c623de5" translate="yes" xml:space="preserve">
          <source>'wheres'</source>
          <target state="translated">'wheres'</target>
        </trans-unit>
        <trans-unit id="398fb2729af979d6e0d1c12380a474f98febe9fb" translate="yes" xml:space="preserve">
          <source>'yay'</source>
          <target state="translated">'yay'</target>
        </trans-unit>
        <trans-unit id="9a67501b22a9905639b8643c1edcd14ff72b3574" translate="yes" xml:space="preserve">
          <source>'|'</source>
          <target state="translated">'|'</target>
        </trans-unit>
        <trans-unit id="fcc44c6b16970e2ea8b6be7d616d2f134c07fc31" translate="yes" xml:space="preserve">
          <source>( )</source>
          <target state="translated">（）</target>
        </trans-unit>
        <trans-unit id="0b28ef9233a1991e063fea55a1ce650c452f636f" translate="yes" xml:space="preserve">
          <source>( , )</source>
          <target state="translated">（、）</target>
        </trans-unit>
        <trans-unit id="c04a2000fc6f7a6d6b355d435a2298a628fe43a3" translate="yes" xml:space="preserve">
          <source>( field [, field &amp;hellip;] )</source>
          <target state="translated">（フィールド[、フィールド&amp;hellip;]）</target>
        </trans-unit>
        <trans-unit id="85ffee67e61bc27da2626f54fca1c6fe2214f5c6" translate="yes" xml:space="preserve">
          <source>('noschema') - Ignores a stored schema during the load.</source>
          <target state="translated">（ 'noschema'）-ロード中に、格納されたスキーマを無視します。</target>
        </trans-unit>
        <trans-unit id="a6e4c4739702e96fa8fda705bcbd816807d98136" translate="yes" xml:space="preserve">
          <source>('schema') - Stores the schema of the relation using a hidden JSON file.</source>
          <target state="translated">（ 'スキーマ'）-非表示のJSONファイルを使用して関係のスキーマを保存します。</target>
        </trans-unit>
        <trans-unit id="64077f633a4a3165188fe44112889500bb0f4c28" translate="yes" xml:space="preserve">
          <source>('tagFile') - Add a first column indicates the input file name of the record.</source>
          <target state="translated">（ 'tagFile'）-最初の列を追加すると、レコードの入力ファイル名を示します。</target>
        </trans-unit>
        <trans-unit id="707fec08471ca58a36122bc998b5a92cb66f8307" translate="yes" xml:space="preserve">
          <source>('tagPath') - Add a first column indicates the input path of the record.</source>
          <target state="translated">（ 'tagPath'）-最初の列を追加すると、レコードの入力パスを示します。</target>
        </trans-unit>
        <trans-unit id="33819d9fa2a488c4e068cabc3a12819e356958bf" translate="yes" xml:space="preserve">
          <source>('tagsource') - (deprecated, Use tagPath instead) Add a first column indicates the input file of the record.</source>
          <target state="translated">（ 'tagsource'）-（非推奨、代わりにtagPathを使用）最初の列を追加して、レコードの入力ファイルを示します。</target>
        </trans-unit>
        <trans-unit id="65d8418825adb7b1f445e27a844b3d81c85c497f" translate="yes" xml:space="preserve">
          <source>(-auths|--authorizations) auth1,auth2... A comma-separated list of Accumulo authorizations to use when reading data from Accumulo. Defaults to the empty set of authorizations (none).</source>
          <target state="translated">（-auths | --authorizations）auth1、auth2 ... Accumuloからデータを読み取るときに使用するAccumulo許可のコンマ区切りリスト。デフォルトの空の承認セット（なし）です。</target>
        </trans-unit>
        <trans-unit id="4547bf44d2584bca294f34a301d5aed4a9023501" translate="yes" xml:space="preserve">
          <source>(-buff|--mutation-buffer-size) num_bytes The number of bytes to buffer when writing data to Accumulo. A higher value requires more memory</source>
          <target state="translated">（-buff | --mutation-buffer-size）num_bytesデータをAccumuloに書き込むときにバッファリングするバイト数。値が大きいほど多くのメモリが必要です</target>
        </trans-unit>
        <trans-unit id="69dcb5dfd200bb39e92ba827cbd88847e59099e1" translate="yes" xml:space="preserve">
          <source>(-c|--caster) LoadStoreCasterImpl An implementation of a LoadStoreCaster to use when serializing types into Accumulo, usually AccumuloBinaryConverter or UTF8StringConverter, defaults to UTF8StorageConverter.</source>
          <target state="translated">（-c | --caster）LoadStoreCasterImplタイプをAccumulo（通常はAccumuloBinaryConverterまたはUTF8StringConverter）にシリアル化するときに使用するLoadStoreCasterの実装は、デフォルトでUTF8StorageConverterになります。</target>
        </trans-unit>
        <trans-unit id="89c00a4a8d40e1d5c41075c668f8f6bf631b0c37" translate="yes" xml:space="preserve">
          <source>(-e|--end) end_row The Accumulo row to read until, inclusive</source>
          <target state="translated">（-e | --end）end_row読み取りまでのアキュムロ行。</target>
        </trans-unit>
        <trans-unit id="59d2aaf21ef16550cfab736139deba271e19159f" translate="yes" xml:space="preserve">
          <source>(-iw|--ignore-whitespace) (true|false) Should whitespace be stripped from the column specification, defaults to true</source>
          <target state="translated">（-iw | --ignore-whitespace）（true | false）空白を列の指定から削除する必要があります。デフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="c23dcfcc497cfc54dd400a3cd36ac9535f1bf514" translate="yes" xml:space="preserve">
          <source>(-ml|--max-latency) milliseconds Maximum time in milliseconds before data is flushed to Accumulo.</source>
          <target state="translated">（-ml | --max-latency）millisecondsデータがAccumuloにフラッシュされるまでの最大時間（ミリ秒）。</target>
        </trans-unit>
        <trans-unit id="819ede110371f977a75f3cfb5217eecbffb5aa14" translate="yes" xml:space="preserve">
          <source>(-sep|--separator) str The separator character used when parsing the column specification, defaults to comma (,)</source>
          <target state="translated">（-sep | --separator）str列指定の解析時に使用される区切り文字。デフォルトはコンマ（、）です。</target>
        </trans-unit>
        <trans-unit id="ffff0d810ba3fd01fa78a9961a3f0394718aa971" translate="yes" xml:space="preserve">
          <source>(-s|--start) start_row The Accumulo row to begin reading from, inclusive</source>
          <target state="translated">（-s | --start）start_row読み取りを開始するAccumulo行（両端を含む）</target>
        </trans-unit>
        <trans-unit id="0a07a2173d3041f590cb67fb0929d19671261e8e" translate="yes" xml:space="preserve">
          <source>(-wt|--write-threads) num_threads The number of threads used to write data to Accumulo.</source>
          <target state="translated">（-wt | --write-threads）num_threadsデータをAccumuloに書き込むために使用されるスレッドの数。</target>
        </trans-unit>
        <trans-unit id="c33f5d82526c37a5dae951c41fccd6373bc6e28d" translate="yes" xml:space="preserve">
          <source>(1, abc, (2,4,6) )</source>
          <target state="translated">（1、abc、（2、4、6））</target>
        </trans-unit>
        <trans-unit id="4c788c5802d34f8e492f60a2bf82ab0169d15037" translate="yes" xml:space="preserve">
          <source>(19, 2, 1)</source>
          <target state="translated">（19、2、1）</target>
        </trans-unit>
        <trans-unit id="9ae62fb3b0901fbd9fbbb025453d4ed5aec094ba" translate="yes" xml:space="preserve">
          <source>(Optional) Keyword</source>
          <target state="translated">（オプション）キーワード</target>
        </trans-unit>
        <trans-unit id="16e4b97da01caf45c8b7b6d7ee52973e6900493a" translate="yes" xml:space="preserve">
          <source>(Optional) The data type, bag (case insensitive).</source>
          <target state="translated">（オプション）データ型、バッグ（大文字と小文字は区別されません）。</target>
        </trans-unit>
        <trans-unit id="aaf9402d66813fda98b4382a697c78a850e195e1" translate="yes" xml:space="preserve">
          <source>(Optional) The data type, map (case insensitive).</source>
          <target state="translated">（オプション）データ型、マップ（大文字と小文字は区別されません）。</target>
        </trans-unit>
        <trans-unit id="946e3030d29202cff5f23f8c949098b0ad53c7b8" translate="yes" xml:space="preserve">
          <source>(Optional) The data type, tuple (case insensitive).</source>
          <target state="translated">（オプション）データ型、タプル（大文字と小文字は区別されません）。</target>
        </trans-unit>
        <trans-unit id="b31286b3dce5bf3075a8d89c14b6436198d21482" translate="yes" xml:space="preserve">
          <source>(Optional) The datatype (all types allowed, bytearray is the default).</source>
          <target state="translated">（オプション）データ型（すべての型が許可され、bytearrayがデフォルトです）。</target>
        </trans-unit>
        <trans-unit id="6bce15fc7dd55172e94bd36ecc729becb1e1e7c1" translate="yes" xml:space="preserve">
          <source>(Optional) The simple data type assigned to the field.</source>
          <target state="translated">（オプション）フィールドに割り当てられた単純なデータ型。</target>
        </trans-unit>
        <trans-unit id="1c758c5d1b9d431b160d178e19be47d96d290c18" translate="yes" xml:space="preserve">
          <source>(The exact package of the function can be seen in the javadocs or by navigating the source tree.)</source>
          <target state="translated">（関数の正確なパッケージは、javadocsで、またはソースツリーをナビゲートすることで確認できます。）</target>
        </trans-unit>
        <trans-unit id="01cf24f603ea48bce9ec2b902b123faa0ee90694" translate="yes" xml:space="preserve">
          <source>(These conventions are not strictly adherered to in all examples.)</source>
          <target state="translated">（これらの規則は、すべての例で厳密に守られているわけではありません。）</target>
        </trans-unit>
        <trans-unit id="808fed598d0bccb794b1cb63cf2c9148bda07647" translate="yes" xml:space="preserve">
          <source>(alias[:type]) [, (alias[:type]) &amp;hellip;] )</source>
          <target state="translated">（エイリアス[：タイプ]）[、（エイリアス[：タイプ]）&amp;hellip;]）</target>
        </trans-unit>
        <trans-unit id="720dcff6cf795df27ef6483091a3d7590ac2ff24" translate="yes" xml:space="preserve">
          <source>(condition ? value_if_true : value_if_false)</source>
          <target state="translated">（条件？value_if_true：value_if_false）</target>
        </trans-unit>
        <trans-unit id="1203246c729b523bc762ad3151a230c8e6a06859" translate="yes" xml:space="preserve">
          <source>(data_type)</source>
          <target state="translated">(data_type)</target>
        </trans-unit>
        <trans-unit id="7d347c23c5da4442bb130ec9dcceaaa3d2a39757" translate="yes" xml:space="preserve">
          <source>(null value)</source>
          <target state="translated">（ヌル値）</target>
        </trans-unit>
        <trans-unit id="8f7930a189bfe767e88a931bfaca75789c804203" translate="yes" xml:space="preserve">
          <source>(optional) A comma-separated list of one or more parameters, including IN aliases (Pig relations), enclosed in parentheses, that are referenced in the Pig Latin fragment.</source>
          <target state="translated">（オプション）1つ以上のパラメーターのコンマ区切りリスト。INエイリアス（豚の関係）を含み、括弧で囲まれ、豚のラテン語フラグメントで参照されます。</target>
        </trans-unit>
        <trans-unit id="b34de9d94056fde530098e42dcbd79ae655521a0" translate="yes" xml:space="preserve">
          <source>(optional) A comma-separated list of one or more return aliases (Pig relations) that are referenced in the Pig Latin fragment. The alias must exist in the macro in the form $&amp;lt;alias&amp;gt;.</source>
          <target state="translated">（オプション）Pig Latinフラグメントで参照される1つ以上の戻り別名（Pig関係）のコンマ区切りリスト。エイリアスは、マクロ内に$ &amp;lt;alias&amp;gt;の形式で存在する必要があります。</target>
        </trans-unit>
        <trans-unit id="d061bc7adafe2ff7cf191c5fce83528a8270fae8" translate="yes" xml:space="preserve">
          <source>(optional) LIMIT n is the error threshold where n is an integer value. If not specified, the default error threshold is unlimited.</source>
          <target state="translated">（オプション）LIMIT nはエラーしきい値で、nは整数値です。指定しない場合、デフォルトのエラーしきい値は無制限です。</target>
        </trans-unit>
        <trans-unit id="b9a01920a07aff7d091d8e155590ddb0f7323f1c" translate="yes" xml:space="preserve">
          <source>(see Note 1)</source>
          <target state="translated">（注1を参照）</target>
        </trans-unit>
        <trans-unit id="896dcd4943e25118777233e9ef86eb6367c10ecd" translate="yes" xml:space="preserve">
          <source>(see Note 2)</source>
          <target state="translated">（注2を参照）</target>
        </trans-unit>
        <trans-unit id="f7b70ec2c5bfd9a3db969f1b2416c0c7bde1e381" translate="yes" xml:space="preserve">
          <source>* Average values for datatypes bigdecimal and biginteger have precision setting &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/math/MathContext.html#DECIMAL128&quot;&gt;java.math.MathContext.DECIMAL128&lt;/a&gt;.</source>
          <target state="translated">*データ型bigdecimalおよびbigintegerの平均値には、精度設定&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/math/MathContext.html#DECIMAL128&quot;&gt;java.math.MathContext.DECIMAL128があり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="bdb3225ffddb78efe8031c09480f313084e826ce" translate="yes" xml:space="preserve">
          <source>* Average values for datatypes bigdecimal and biginteger have precision setting &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/math/MathContext.html#DECIMAL128&quot;&gt;java.math.MathContext.DECIMAL128&lt;/a&gt;.</source>
          <target state="translated">*データ型bigdecimalおよびbigintegerの平均値には、精度設定&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/java/math/MathContext.html#DECIMAL128&quot;&gt;java.math.MathContext.DECIMAL128があり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="af1e263a7139945e63effc6e56412fb991495ef8" translate="yes" xml:space="preserve">
          <source>* bytearray cast as this data type</source>
          <target state="translated">*このデータ型としてキャストされたバイト配列</target>
        </trans-unit>
        <trans-unit id="3033ad6201baa25536a80a82f0cfa9f5ecb01fa3" translate="yes" xml:space="preserve">
          <source>*Cast as chararray (the second argument must be chararray)</source>
          <target state="translated">* chararrayとしてキャスト（2番目の引数はchararrayでなければなりません）</target>
        </trans-unit>
        <trans-unit id="60b62004da064c683dec0fb25cd28876d76e3be6" translate="yes" xml:space="preserve">
          <source>+ , -, *, /</source>
          <target state="translated">+、-、*、/</target>
        </trans-unit>
        <trans-unit id="3bc15c8aae3e4124dd409035f32ea2fd6835efc9" translate="yes" xml:space="preserve">
          <source>-</source>
          <target state="translated">-</target>
        </trans-unit>
        <trans-unit id="5d02601bffacd2105503e37e01a04a407a4368a6" translate="yes" xml:space="preserve">
          <source>-- A</source>
          <target state="translated">-A</target>
        </trans-unit>
        <trans-unit id="21310c32ec263e8cc48d962e92d6cd0552124742" translate="yes" xml:space="preserve">
          <source>-- B</source>
          <target state="translated">-B</target>
        </trans-unit>
        <trans-unit id="470f42987324b24643e8151603ab9a5323e9e9cb" translate="yes" xml:space="preserve">
          <source>-- C</source>
          <target state="translated">-C</target>
        </trans-unit>
        <trans-unit id="9576082ab0d756bcf56b66a307b1923c401d3aed" translate="yes" xml:space="preserve">
          <source>-- D</source>
          <target state="translated">-D</target>
        </trans-unit>
        <trans-unit id="51b228bdb7ca01f4446bffa6326411c3117f249c" translate="yes" xml:space="preserve">
          <source>-- E</source>
          <target state="translated">-E</target>
        </trans-unit>
        <trans-unit id="d3740ebc400e39246cc1fdb59de5b279ecc6d795" translate="yes" xml:space="preserve">
          <source>-- F</source>
          <target state="translated">-F</target>
        </trans-unit>
        <trans-unit id="8fa98e831fdcdb1854265221f2ae1442aa4bae80" translate="yes" xml:space="preserve">
          <source>-- G</source>
          <target state="translated">-G</target>
        </trans-unit>
        <trans-unit id="b092bab87e859629d39abe4bab778d611f0f9c17" translate="yes" xml:space="preserve">
          <source>-- H</source>
          <target state="translated">-H</target>
        </trans-unit>
        <trans-unit id="0c57e98f156fb0819bcae0cb2fa079c1fd392508" translate="yes" xml:space="preserve">
          <source>-- I</source>
          <target state="translated">- 私</target>
        </trans-unit>
        <trans-unit id="b6a10e6560adad9cc8ff96dfcebd73d7046d0f65" translate="yes" xml:space="preserve">
          <source>-- J</source>
          <target state="translated">-J</target>
        </trans-unit>
        <trans-unit id="adbe5a11f97bd4b5e64b0376fe039de97b1d60ba" translate="yes" xml:space="preserve">
          <source>-- K</source>
          <target state="translated">-K</target>
        </trans-unit>
        <trans-unit id="287ce060e435fae54470fb36aa477b9eac3600b8" translate="yes" xml:space="preserve">
          <source>-- L</source>
          <target state="translated">-L</target>
        </trans-unit>
        <trans-unit id="e0b1c441ef66810390e7262bf40ea39315e08b67" translate="yes" xml:space="preserve">
          <source>-- M</source>
          <target state="translated">-M</target>
        </trans-unit>
        <trans-unit id="f67163d33a828b2aa831c72267389325d7d6d062" translate="yes" xml:space="preserve">
          <source>-- N</source>
          <target state="translated">-N</target>
        </trans-unit>
        <trans-unit id="790fcf9d53cd3b5c5847f118522955d9df7506b8" translate="yes" xml:space="preserve">
          <source>-- O</source>
          <target state="translated">-O</target>
        </trans-unit>
        <trans-unit id="7b3cbe2efc6cebcc91c4bbe7d09784895cf0a43d" translate="yes" xml:space="preserve">
          <source>-- P</source>
          <target state="translated">-P</target>
        </trans-unit>
        <trans-unit id="302638a98248ac94f4c782d4909cf72a029e7b5f" translate="yes" xml:space="preserve">
          <source>-- Q</source>
          <target state="translated">-Q</target>
        </trans-unit>
        <trans-unit id="d02abae9f95aa2adad1b4af30b014bb78e484da7" translate="yes" xml:space="preserve">
          <source>-- R</source>
          <target state="translated">-R</target>
        </trans-unit>
        <trans-unit id="b3d986b0e790a5a9f97b50ae3a08fd4b59e5dc81" translate="yes" xml:space="preserve">
          <source>-- S</source>
          <target state="translated">-S</target>
        </trans-unit>
        <trans-unit id="75b916182ff38c15d1aef40cd272d5e6280eee0d" translate="yes" xml:space="preserve">
          <source>-- T</source>
          <target state="translated">-T</target>
        </trans-unit>
        <trans-unit id="083005d0b826fb6b574352c1135906b86ad4e037" translate="yes" xml:space="preserve">
          <source>-- U</source>
          <target state="translated">-U</target>
        </trans-unit>
        <trans-unit id="7c676a83d68f6524185b0eabe9a87e3f26dd221b" translate="yes" xml:space="preserve">
          <source>-- V, W, X, Y, Z</source>
          <target state="translated">-V、W、X、Y、Z</target>
        </trans-unit>
        <trans-unit id="c64e9a434c40338f3ad302302cd44198e0c430bb" translate="yes" xml:space="preserve">
          <source>--blockPadding or -p Sets whether the HDFS blocks are padded to prevent stripes from straddling blocks. Default is true.</source>
          <target state="translated">--blockPaddingまたは-pストライプがブロックをまたぐのを防ぐためにHDFSブロックをパディングするかどうかを設定します。デフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="5744a2eaa1353d9fab34212994410800eec8f1fe" translate="yes" xml:space="preserve">
          <source>--bufferSize or -b Set the size of the memory buffers used for compressing and storing the stripe in memory. Default is 262144 (256K).</source>
          <target state="translated">--bufferSizeまたは-bストライプを圧縮してメモリに格納するために使用されるメモリバッファのサイズを設定します。デフォルトは262144（256K）です。</target>
        </trans-unit>
        <trans-unit id="ef43851e4cabc5b6e092aa3945d0c3201f601039" translate="yes" xml:space="preserve">
          <source>--compress or -c Sets the generic compression that is used to compress the data. Valid codecs are: NONE, ZLIB, SNAPPY, LZO. Default is ZLIB.</source>
          <target state="translated">--compressまたは-cデータの圧縮に使用される一般的な圧縮を設定します。有効なコーデックは、NONE、ZLIB、SNAPPY、LZOです。デフォルトはZLIBです。</target>
        </trans-unit>
        <trans-unit id="94ff914633724c687b4980632ab042cf69ca3ee2" translate="yes" xml:space="preserve">
          <source>--rowIndexStride or -r Set the distance between entries in the row index. Default is 10000.</source>
          <target state="translated">--rowIndexStrideまたは-r行インデックスのエントリ間の距離を設定します。デフォルトは10000です。</target>
        </trans-unit>
        <trans-unit id="c9fe994cc59cef5c2d9f8f78dfdcc0cccf25c82e" translate="yes" xml:space="preserve">
          <source>--stripeSize or -s Set the stripe size for the file. Default is 268435456(256 MB).</source>
          <target state="translated">--stripeSizeまたは-sファイルのストライプサイズを設定します。デフォルトは268435456（256 MB）です。</target>
        </trans-unit>
        <trans-unit id="391d38c95d43ffe3981b0b8579556319cbd270a6" translate="yes" xml:space="preserve">
          <source>--version or -v Sets the version of the file that will be written</source>
          <target state="translated">--versionまたは-v書き込まれるファイルのバージョンを設定します</target>
        </trans-unit>
        <trans-unit id="0138c87e8acdcbde843ff9f154dc418938ce1d03" translate="yes" xml:space="preserve">
          <source>-2.0</source>
          <target state="translated">-2.0</target>
        </trans-unit>
        <trans-unit id="fb577e8696531b61725340924385bb06e7beb102" translate="yes" xml:space="preserve">
          <source>-2.5</source>
          <target state="translated">-2.5</target>
        </trans-unit>
        <trans-unit id="d2c2a7e0e223546832dc13ef80bdeb56ddbd8109" translate="yes" xml:space="preserve">
          <source>-3.0</source>
          <target state="translated">-3.0</target>
        </trans-unit>
        <trans-unit id="95c5182f6f2c251672072292284f7f3d6d521ef4" translate="yes" xml:space="preserve">
          <source>-3.15</source>
          <target state="translated">-3.15</target>
        </trans-unit>
        <trans-unit id="1e0c9478f3b2635e10bd8ac468c92d72bfab8840" translate="yes" xml:space="preserve">
          <source>-3.2</source>
          <target state="translated">-3.2</target>
        </trans-unit>
        <trans-unit id="45b8a6840bb8afc51af4722ac4f6478c14ead1b6" translate="yes" xml:space="preserve">
          <source>-3.25</source>
          <target state="translated">-3.25</target>
        </trans-unit>
        <trans-unit id="03619b00f2bd2736ab8b5bf4c5113f9529ffd538" translate="yes" xml:space="preserve">
          <source>-3.3</source>
          <target state="translated">-3.3</target>
        </trans-unit>
        <trans-unit id="d21c8da96d025738b6599ae52debd5f3ab89d93f" translate="yes" xml:space="preserve">
          <source>-3.5</source>
          <target state="translated">-3.5</target>
        </trans-unit>
        <trans-unit id="867216daf8b64b72e4fbd6d417049af17f3bb2eb" translate="yes" xml:space="preserve">
          <source>-4.0</source>
          <target state="translated">-4.0</target>
        </trans-unit>
        <trans-unit id="c246d2ec063ba7a8f15a5647390d54600709321b" translate="yes" xml:space="preserve">
          <source>-allowrecursive or -r Specify whether to allow recursive schema definitions (the default is to throw an exception if Pig encounters a recursive schema). When reading objects with recursive definitions, Pig will translate Avro records to schema-less tuples; the Pig Schema for the object may not match the data exactly.</source>
          <target state="translated">-allowrecursiveまたは-r再帰的なスキーマ定義を許可するかどうかを指定します（デフォルトでは、Pigが再帰的なスキーマに遭遇すると例外がスローされます）。再帰的な定義を持つオブジェクトを読み取る場合、PigはAvroレコードをスキーマのないタプルに変換します。オブジェクトのPigスキーマは、データと正確に一致しない場合があります。</target>
        </trans-unit>
        <trans-unit id="bac9f5e661479ffc42be73be3c2ad86f9415f0de" translate="yes" xml:space="preserve">
          <source>-caching=numRows Number of rows to cache (faster scans, more memory)</source>
          <target state="translated">-caching = numRowsキャッシュする行数（より高速なスキャン、より多くのメモリ）</target>
        </trans-unit>
        <trans-unit id="839aae606e2ee9a0217e95b460866360542b6a52" translate="yes" xml:space="preserve">
          <source>-caster=(HBaseBinaryConverter|Utf8StorageConverter) Class name of Caster to use to convert values (default=Utf8StorageConverter). The default caster can be overridden with the pig.hbase.caster config param. Casters must implement LoadStoreCaster.</source>
          <target state="translated">-caster =（HBaseBinaryConverter | Utf8StorageConverter）値の変換に使用するCasterのクラス名（デフォルト= Utf8StorageConverter）。デフォルトのキャスターは、pig.hbase.caster構成パラメーターでオーバーライドできます。キャスターはLoadStoreCasterを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="c70a084bd786ca9d8790715a53eeda7454e77fc8" translate="yes" xml:space="preserve">
          <source>-debug</source>
          <target state="translated">-debug</target>
        </trans-unit>
        <trans-unit id="d3a3fe690834323f65f02ab61d261211145c5b14" translate="yes" xml:space="preserve">
          <source>-delim=delimiter Column delimiter in columns list (default is whitespace)</source>
          <target state="translated">-delim = delimiter列リストの列区切り文字（デフォルトは空白）</target>
        </trans-unit>
        <trans-unit id="199bf7c2c523e991afced8c6af4397701a77a93d" translate="yes" xml:space="preserve">
          <source>-doublecolons or -d Specify how to handle Pig schemas that contain double-colons when writing data in Avro format. (When you join two bags in Pig, Pig will automatically label the fields in the output Tuples with names that contain double-colons). If you select this option, AvroStorage will translate names with double colons into names with double underscores.</source>
          <target state="translated">-doublecolonsまたは-d Avro形式でデータを書き込むときに、ダブルコロンを含むPigスキーマの処理方法を指定します。（Pigで2つのバッグを結合すると、Pigは自動的に出力タプルのフィールドにダブルコロンを含む名前のラベルを付けます）。このオプションを選択すると、AvroStorageは2つのコロンが付いた名前を2つの下線が付いた名前に変換します。</target>
        </trans-unit>
        <trans-unit id="0948a01132cf9925f1b7f201a6b5ac2554068690" translate="yes" xml:space="preserve">
          <source>-dryrun</source>
          <target state="translated">-dryrun</target>
        </trans-unit>
        <trans-unit id="fad314515c14be88faa7ae060a5e73c1321d9cce" translate="yes" xml:space="preserve">
          <source>-examplefile exampleFile or -e exampleFile Specify the input (or output) schema using another Avro file as an example. Pig assumes that the file is located on the default filesystem, but you may use and explicity URL to specify the location. Pig expects this to be an Avro data file.</source>
          <target state="translated">-examplefile exampleFileまたは-e exampleFile別のAvroファイルを例として使用して、入力（または出力）スキーマを指定します。Pigは、ファイルがデフォルトのファイルシステムにあると想定していますが、明示的なURLを使用して場所を指定することもできます。Pigは、これがAvroデータファイルであることを想定しています。</target>
        </trans-unit>
        <trans-unit id="20c9a30a1e6c6730e825c4ff2ed853a6380fb6e3" translate="yes" xml:space="preserve">
          <source>-gt=minKeyVal Return rows with a rowKey greater than minKeyVal</source>
          <target state="translated">-gt = minKeyVal minKeyValより大きいrowKeyを持つ行を返します</target>
        </trans-unit>
        <trans-unit id="cd85475b2c2f1ec4e37452eed716e76b77e9140b" translate="yes" xml:space="preserve">
          <source>-gte=minKeyVal Return rows with a rowKey greater than or equal to minKeyVal</source>
          <target state="translated">-gte = minKeyVal minKeyVal以上のrowKeyを持つ行を返します</target>
        </trans-unit>
        <trans-unit id="90c09c139af87c2a49d69974602eae3db88d9b68" translate="yes" xml:space="preserve">
          <source>-help [properties]</source>
          <target state="translated">-help [プロパティ]</target>
        </trans-unit>
        <trans-unit id="85fdf11feb9b9dcd8e9d7514f0e9b7bd8e9b5ba4" translate="yes" xml:space="preserve">
          <source>-ignoreWhitespace=(true|false) When delim is set to something other than whitespace, ignore spaces when parsing column list (default=true)</source>
          <target state="translated">-ignoreWhitespace =（true | false）delimが空白以外に設定されている場合、列リストの解析時にスペースを無視します（デフォルト= true）</target>
        </trans-unit>
        <trans-unit id="1e4f7a57a90c618a6e6239c230622d9df62402a5" translate="yes" xml:space="preserve">
          <source>-includeTimestamp=Record will include the timestamp after the rowkey on store (rowkey, timestamp, ...)</source>
          <target state="translated">-includeTimestamp =レコードには、ストアの行キーの後にタイムスタンプが含まれます（行キー、タイムスタンプ、...）</target>
        </trans-unit>
        <trans-unit id="9980a7079250ae9969134cf554cd89f97988f19c" translate="yes" xml:space="preserve">
          <source>-includeTombstone=Record will include a tombstone marker on store after the rowKey and timestamp (if included) (rowkey, [timestamp,] tombstone, ...)</source>
          <target state="translated">-includeTombstone =レコードは、rowKeyおよびタイムスタンプ（含まれている場合）（rowkey、[timestamp、] tombstone、...）の後にストアでトゥームストーンマーカーを含めます。</target>
        </trans-unit>
        <trans-unit id="a4f6c2d3d295fa9ff1afc24c47326d0dc2c822ca" translate="yes" xml:space="preserve">
          <source>-limit=numRowsPerRegion Max number of rows to retrieve per region</source>
          <target state="translated">-limit = numRowsPerRegionリージョンごとに取得する最大行数</target>
        </trans-unit>
        <trans-unit id="419026f260451118ea2b2c02d11eacc9ccd30b64" translate="yes" xml:space="preserve">
          <source>-loadKey=(true|false) Load the row key as the first value in every tuple returned from HBase (default=false)</source>
          <target state="translated">-loadKey =（true | false）HBaseから返されたすべてのタプルの最初の値として行キーをロードします（デフォルト= false）</target>
        </trans-unit>
        <trans-unit id="3ddebb4c27f3d11f8daa7a4f184015a06cfa9af7" translate="yes" xml:space="preserve">
          <source>-lt=maxKeyVal Return rows with a rowKey less than maxKeyVal</source>
          <target state="translated">-lt = maxKeyVal maxKeyValより小さいrowKeyを持つ行を返します</target>
        </trans-unit>
        <trans-unit id="2323271e0b70309b823a9b7771477870ccfd98a9" translate="yes" xml:space="preserve">
          <source>-lte=maxKeyVal Return rows with a rowKey less than or equal to maxKeyVal</source>
          <target state="translated">-lte = maxKeyVal rowKeyがmaxKeyVal以下の行を返します</target>
        </trans-unit>
        <trans-unit id="1b9ee341031d5a1c01542913be07f7f8e02c56db" translate="yes" xml:space="preserve">
          <source>-maxTimestamp=timestamp Return cell values that have a creation timestamp less than this value</source>
          <target state="translated">-maxTimestamp = timestampこの値より小さい作成タイムスタンプを持つセル値を返します</target>
        </trans-unit>
        <trans-unit id="710cec49eff8e7d5b744a055ac18eb502f32c8e9" translate="yes" xml:space="preserve">
          <source>-minTimestamp=timestamp Return cell values that have a creation timestamp greater or equal to this value</source>
          <target state="translated">-minTimestamp = timestampこの値以上の作成タイムスタンプを持つセル値を返します</target>
        </trans-unit>
        <trans-unit id="d868a680affb6ad2c7e2392566b6adc4e3201dea" translate="yes" xml:space="preserve">
          <source>-n</source>
          <target state="translated">-n</target>
        </trans-unit>
        <trans-unit id="fd011dafc765fe0d74fc65335c1654bb9d2c3d3b" translate="yes" xml:space="preserve">
          <source>-namespace nameSpace or -n nameSpace Explicitly specify the namespace field in Avro records when storing data</source>
          <target state="translated">-namespace nameSpaceまたは-n nameSpaceデータを保存するときにAvroレコードの名前空間フィールドを明示的に指定します</target>
        </trans-unit>
        <trans-unit id="b9295cf706309698be946ae2d91e966e00bc48b3" translate="yes" xml:space="preserve">
          <source>-noWAL=(true|false) During storage, sets the write ahead to false for faster loading into HBase (default=false). To be used with extreme caution since this could result in data loss (see &lt;a href=&quot;http://hbase.apache.org/book.html#perf.hbase.client.putwal&quot;&gt;http://hbase.apache.org/book.html#perf.hbase.client.putwal&lt;/a&gt;).</source>
          <target state="translated">-noWAL =（true | false）ストレージ時に、HBaseへのロードを高速化するために先読みをfalseに設定します（デフォルト= false）。データの損失につながる可能性があるため、十分に注意して使用して&lt;a href=&quot;http://hbase.apache.org/book.html#perf.hbase.client.putwal&quot;&gt;ください&lt;/a&gt;（http://hbase.apache.org/book.html#perf.hbase.client.putwalを参照）。</target>
        </trans-unit>
        <trans-unit id="f7e9f682ef8a69f0435c3115a8ea218e89d42ac0" translate="yes" xml:space="preserve">
          <source>-noWAL=(true|false) During storage, sets the write ahead to false for faster loading into HBase (default=false). To be used with extreme caution since this could result in data loss (see &lt;a href=&quot;https://hbase.apache.org/book.html#perf.hbase.client.putwal&quot;&gt;http://hbase.apache.org/book.html#perf.hbase.client.putwal&lt;/a&gt;).</source>
          <target state="translated">-noWAL =（true | false）ストレージ中に、HBaseへのロードを高速化するためにライトアヘッドをfalseに設定します（デフォルト= false）。データが失われる可能性があるため、細心の注意を払って使用して&lt;a href=&quot;https://hbase.apache.org/book.html#perf.hbase.client.putwal&quot;&gt;ください&lt;/a&gt;（http://hbase.apache.org/book.html#perf.hbase.client.putwalを参照）。</target>
        </trans-unit>
        <trans-unit id="231bd674f37d8ab04044a0c65bae81d8902cb597" translate="yes" xml:space="preserve">
          <source>-param</source>
          <target state="translated">-param</target>
        </trans-unit>
        <trans-unit id="7473d28f54e1185c9fa4707704c85e16d5146571" translate="yes" xml:space="preserve">
          <source>-param_file</source>
          <target state="translated">-param_file</target>
        </trans-unit>
        <trans-unit id="820d82cd308bf40eb8cafd0ba4fd85f75ca0a643" translate="yes" xml:space="preserve">
          <source>-regex=regex Return rows with a rowKey that match this regex on KeyVal</source>
          <target state="translated">-regex = regex KeyValのこの正規表現に一致するrowKeyを持つ行を返します</target>
        </trans-unit>
        <trans-unit id="aec97a5f7305955fe079e3eaca1d93e69507f9df" translate="yes" xml:space="preserve">
          <source>-schemfile schemaFile or -f schemaFile Specify the input (or output) schema from an external file. Pig assumes that the file is located on the default filesystem, but you may use an explicity URL to unambigously specify the location. (For example, if the data was on your local file system in /stuff/schemafile.avsc, you could specify &quot;-f file:///stuff/schemafile.avsc&quot; to specify the location. If the data was on HDFS under /yourdirectory/schemafile.avsc, you could specify &quot;-f hdfs:///yourdirectory/schemafile.avsc&quot;). Pig expects this to be a text file, containing a valid avro schema.</source>
          <target state="translated">-schemfile schemaFileまたは-f schemaFile外部ファイルからの入力（または出力）スキーマを指定します。Pigは、ファイルがデフォルトのファイルシステムにあると想定していますが、明示的なURLを使用して場所を明確に指定できます。（たとえば、データがローカルファイルシステムの/stuff/schemafile.avscにある場合、「-f file：///stuff/schemafile.avsc」を指定して場所を指定できます。データが/yourdirectory/schemafile.avsc、「-f hdfs：///yourdirectory/schemafile.avsc」を指定できます）。Pigは、これが有効なavroスキーマを含むテキストファイルであることを想定しています。</target>
        </trans-unit>
        <trans-unit id="0b6d819cc70da4faf844071ff7af4c9c0723d162" translate="yes" xml:space="preserve">
          <source>-script scriptfile</source>
          <target state="translated">-scriptスクリプトファイル</target>
        </trans-unit>
        <trans-unit id="e5f7a92036c8a3ad4475cba98efe18a5589a0247" translate="yes" xml:space="preserve">
          <source>-timestamp=timestamp Return cell values that have a creation timestamp equal to this value</source>
          <target state="translated">-timestamp = timestampこの値に等しい作成タイムスタンプを持つセル値を返します</target>
        </trans-unit>
        <trans-unit id="ee20aa4ecb0e90f8ba9a91b411c65793672fc3c0" translate="yes" xml:space="preserve">
          <source>.. $x : projects columns $0 through $x, inclusive</source>
          <target state="translated">.. $ x：$ 0から$ xまでの列をプロジェクトします</target>
        </trans-unit>
        <trans-unit id="41d1ba36b140ecc878b816d33170613eccc5816c" translate="yes" xml:space="preserve">
          <source>... Pig creates a tuple ($1, $2) and then puts this tuple into the bag</source>
          <target state="translated">... Pigはタプル（$ 1、$ 2）を作成し、このタプルをバッグに入れます</target>
        </trans-unit>
        <trans-unit id="d9177d1c9a8d4964015a0455cdc508b79ebe8761" translate="yes" xml:space="preserve">
          <source>... neither $1 and $2 are tuples so Pig creates a tuple around each item</source>
          <target state="translated">... $ 1も$ 2もタプルではないため、Pigは各アイテムの周囲にタプルを作成します</target>
        </trans-unit>
        <trans-unit id="40df7953771030769555bdbd81ed4d0564e943c1" translate="yes" xml:space="preserve">
          <source>... since ($1) is treated as $1 (one cannot create a single element tuple using this syntax), {($1), $2} becomes {$1, $2} and Pig creates a tuple around each item</source>
          <target state="translated">...（$ 1）は$ 1として扱われるため（この構文を使用して単一要素のタプルを作成することはできません）、{（$ 1）、$ 2}は{$ 1、$ 2}になり、Pigは各アイテムの周りにタプルを作成します</target>
        </trans-unit>
        <trans-unit id="b6589fc6ab0dc82cf12099d1c2d40ab994e8410c" translate="yes" xml:space="preserve">
          <source>0</source>
          <target state="translated">0</target>
        </trans-unit>
        <trans-unit id="38f6d7875e3195bdaee448d2cb6917f3ae4994af" translate="yes" xml:space="preserve">
          <source>0.0</source>
          <target state="translated">0.0</target>
        </trans-unit>
        <trans-unit id="356a192b7913b04c54574d18c28d46e6395428ab" translate="yes" xml:space="preserve">
          <source>1</source>
          <target state="translated">1</target>
        </trans-unit>
        <trans-unit id="f26d9720d0fb719979033c168b54424bbf69918e" translate="yes" xml:space="preserve">
          <source>1. -param</source>
          <target state="translated">1.-パラメタ</target>
        </trans-unit>
        <trans-unit id="48e1c024e47628701999b91e4327d4f495beeb29" translate="yes" xml:space="preserve">
          <source>1000.0</source>
          <target state="translated">1000.0</target>
        </trans-unit>
        <trans-unit id="893bc661e230cfb64b023bb42fb260e811bc6166" translate="yes" xml:space="preserve">
          <source>1230.0</source>
          <target state="translated">1230.0</target>
        </trans-unit>
        <trans-unit id="8262e563b147758c8485a9a15d23ce517ce3c0c4" translate="yes" xml:space="preserve">
          <source>1234.0</source>
          <target state="translated">1234.0</target>
        </trans-unit>
        <trans-unit id="b8598263c20e15f2c6d48a168311717bd1db15eb" translate="yes" xml:space="preserve">
          <source>1234.1789</source>
          <target state="translated">1234.1789</target>
        </trans-unit>
        <trans-unit id="d7667ba5fd3fe586d72df421ece9d8613e2014a2" translate="yes" xml:space="preserve">
          <source>1234.2</source>
          <target state="translated">1234.2</target>
        </trans-unit>
        <trans-unit id="20eabe5d64b0e216796e834f52d61fd0b70332fc" translate="yes" xml:space="preserve">
          <source>1234567</source>
          <target state="translated">1234567</target>
        </trans-unit>
        <trans-unit id="ce08f6ab01f7f2bf601e384cfb46c0063b033c1a" translate="yes" xml:space="preserve">
          <source>19.2 or 1.92e2</source>
          <target state="translated">ばんごう</target>
        </trans-unit>
        <trans-unit id="d0f14539074951ba456c79df8ad5527383304ca9" translate="yes" xml:space="preserve">
          <source>19.2F or 1.92e2f</source>
          <target state="translated">19.2Fまたは1.92e2F</target>
        </trans-unit>
        <trans-unit id="fa8b83f97eeb1d2618c3bbda47d7e1a61f33dad6" translate="yes" xml:space="preserve">
          <source>192119211921.192119211921BD</source>
          <target state="translated">192119211921.192119211921BD</target>
        </trans-unit>
        <trans-unit id="9d81c25c39b323588b34d0f5e23dc8b05f5af240" translate="yes" xml:space="preserve">
          <source>19211921192119211921BI</source>
          <target state="translated">19211921192119211921BI</target>
        </trans-unit>
        <trans-unit id="e2c24431f4463ab2663692b03ef706ff634893dc" translate="yes" xml:space="preserve">
          <source>1970-01-01T00:00:00.000+00:00</source>
          <target state="translated">1970-01-01T00:00:00.000+00:00</target>
        </trans-unit>
        <trans-unit id="986a7d02f1099dd6aedb70535f087050629d816d" translate="yes" xml:space="preserve">
          <source>19L</source>
          <target state="translated">19L</target>
        </trans-unit>
        <trans-unit id="c97f62de1ba14379f6f017f3dfcbf16fb199d041" translate="yes" xml:space="preserve">
          <source>1|2|3</source>
          <target state="translated">1|2|3</target>
        </trans-unit>
        <trans-unit id="da4b9237bacccdf19c0760cab7aec4a8359010b0" translate="yes" xml:space="preserve">
          <source>2</source>
          <target state="translated">2</target>
        </trans-unit>
        <trans-unit id="e5cd17daae9115cebaf9dc5c99f510b9aa69c7fa" translate="yes" xml:space="preserve">
          <source>2. Command line arguments</source>
          <target state="translated">2.コマンドライン引数</target>
        </trans-unit>
        <trans-unit id="70142f66475ae2fb33722d8d4750f386ecfefe7b" translate="yes" xml:space="preserve">
          <source>2.0</source>
          <target state="translated">2.0</target>
        </trans-unit>
        <trans-unit id="98a16af997b52cb888232ab5d79a527b0716561c" translate="yes" xml:space="preserve">
          <source>2.4</source>
          <target state="translated">2.4</target>
        </trans-unit>
        <trans-unit id="555a5c5c92b230dccab828d90e89ec66847ab9ce" translate="yes" xml:space="preserve">
          <source>2.5</source>
          <target state="translated">2.5</target>
        </trans-unit>
        <trans-unit id="77de68daecd823babbb58edb1c8e14d7106e83bb" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>
        </trans-unit>
        <trans-unit id="bdc1408a91f161dab5a9893d23db3c7095200e1d" translate="yes" xml:space="preserve">
          <source>3.0</source>
          <target state="translated">3.0</target>
        </trans-unit>
        <trans-unit id="a15b1600fed3b04089da4599ba8c2833b5ec7b34" translate="yes" xml:space="preserve">
          <source>3.15</source>
          <target state="translated">3.15</target>
        </trans-unit>
        <trans-unit id="47ffd93865bc60f6431831db2605565dffbb7509" translate="yes" xml:space="preserve">
          <source>3.2</source>
          <target state="translated">3.2</target>
        </trans-unit>
        <trans-unit id="9ca8ee65a3fa3737f6b3f5b0c6055c0e09305294" translate="yes" xml:space="preserve">
          <source>3.25</source>
          <target state="translated">3.25</target>
        </trans-unit>
        <trans-unit id="16205b65128506db2f6e2208c73beef8b29cb850" translate="yes" xml:space="preserve">
          <source>3.25000001</source>
          <target state="translated">3.25000001</target>
        </trans-unit>
        <trans-unit id="a9c68c54449dd45e3ffc6d16d2e2e55125c2895d" translate="yes" xml:space="preserve">
          <source>3.3</source>
          <target state="translated">3.3</target>
        </trans-unit>
        <trans-unit id="c3e66c166813c6ccb5819daf234787040c248650" translate="yes" xml:space="preserve">
          <source>3.5</source>
          <target state="translated">3.5</target>
        </trans-unit>
        <trans-unit id="ae668bebc086179c8fc19ca0dce26efb2d1d55d6" translate="yes" xml:space="preserve">
          <source>32-bit floating point</source>
          <target state="translated">32ビット浮動小数点</target>
        </trans-unit>
        <trans-unit id="1b6453892473a467d07372d45eb05abc2031647a" translate="yes" xml:space="preserve">
          <source>4</source>
          <target state="translated">4</target>
        </trans-unit>
        <trans-unit id="a33beb1398d687ce56ea092654850e76f54bebb2" translate="yes" xml:space="preserve">
          <source>4.0</source>
          <target state="translated">4.0</target>
        </trans-unit>
        <trans-unit id="31918ec11813e2a958c673c0624094b8c07c76a0" translate="yes" xml:space="preserve">
          <source>4.6</source>
          <target state="translated">4.6</target>
        </trans-unit>
        <trans-unit id="ac3478d69a3c81fa62e60f5c3696165a4e5e6ac4" translate="yes" xml:space="preserve">
          <source>5</source>
          <target state="translated">5</target>
        </trans-unit>
        <trans-unit id="6879ad37f6917f2009f6728dcba67536db7896ad" translate="yes" xml:space="preserve">
          <source>64-bit floating point</source>
          <target state="translated">64ビット浮動小数点</target>
        </trans-unit>
        <trans-unit id="fe5dbbcea5ce7e2988b8c69bcfdfde8904aabc1f" translate="yes" xml:space="preserve">
          <source>8</source>
          <target state="translated">8</target>
        </trans-unit>
        <trans-unit id="5afd1f791a768e4fdea29f369a3db8f38dd4c8d4" translate="yes" xml:space="preserve">
          <source>:bag</source>
          <target state="translated">:bag</target>
        </trans-unit>
        <trans-unit id="48fd59ec20fdacc3564cab3e69bb0504ec3b2302" translate="yes" xml:space="preserve">
          <source>:map</source>
          <target state="translated">:map</target>
        </trans-unit>
        <trans-unit id="c342e4a1441ee29f7845f390860aeebaa42d9a78" translate="yes" xml:space="preserve">
          <source>:tuple</source>
          <target state="translated">:tuple</target>
        </trans-unit>
        <trans-unit id="a8875b70e6bbb54376004a032f59164d51cae5f2" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;basic#bag&quot;&gt;Bag&lt;/a&gt;: enclosed by {}, tuples separated by &quot;,&quot;</source>
          <target state="translated">&lt;a href=&quot;basic#bag&quot;&gt;バッグ&lt;/a&gt;：{}で囲まれ、 &quot;、&quot;で区切られたタプル</target>
        </trans-unit>
        <trans-unit id="9134796c39798e19db424cd1171ca37a96627a52" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;basic#map&quot;&gt;Map&lt;/a&gt;: enclosed by [], items separated by &quot;,&quot;, key and value separated by &quot;#&quot;</source>
          <target state="translated">&lt;a href=&quot;basic#map&quot;&gt;マップ&lt;/a&gt;：[]で囲まれ、「、」で区切られた項目、「＃」で区切られたキーと値</target>
        </trans-unit>
        <trans-unit id="d196009f178d92dceb03c39e0bce2d88f19e26c9" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;basic#tuple&quot;&gt;Tuple&lt;/a&gt;: enclosed by (), items separated by &quot;,&quot;</source>
          <target state="translated">&lt;a href=&quot;basic#tuple&quot;&gt;タプル&lt;/a&gt;：（）で囲まれたアイテム、「、」で区切られたアイテム</target>
        </trans-unit>
        <trans-unit id="0d7be44f289c7455584e1a52b664cfaa1ccf2403" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/ErrorHandling.java?view=markup&quot;&gt;ErrorHandling:&lt;/a&gt; This interface allow you to skip bad records in the storer so the storer will not throw exception and terminate the job. You can implement your own error handler by overriding &lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/ErrorHandler.java?view=markup&quot;&gt;ErrorHandler&lt;/a&gt; interface, or use predefined error handler: &lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/CounterBasedErrorHandler.java?view=markup&quot;&gt;CounterBasedErrorHandler&lt;/a&gt;. ErrorHandling can be turned on by setting the property pig.error-handling.enabled to true in pig.properties. Default is false. CounterBasedErrorHandler uses two settings - pig.error-handling.min.error.records (the minimum number of errors to trigger error handling) and pig.error-handling.error.threshold (percentage of the number of records as a fraction exceeding which error is thrown).</source>
          <target state="translated">&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/ErrorHandling.java?view=markup&quot;&gt;ErrorHandling：&lt;/a&gt;このインターフェイスを使用すると、storerの不良レコードをスキップできるため、storerは例外をスローせず、ジョブを終了しません。独自のエラーハンドラーを実装するには、&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/ErrorHandler.java?view=markup&quot;&gt;ErrorHandler&lt;/a&gt;インターフェイスをオーバーライドするか、事前定義されたエラーハンドラー&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/CounterBasedErrorHandler.java?view=markup&quot;&gt;CounterBasedErrorHandlerを&lt;/a&gt;使用します。 ErrorHandlingをオンにするには、pig.propertiesでプロパティpig.error-handling.enabledをtrueに設定します。デフォルトはfalseです。 CounterBasedErrorHandlerは2つの設定を使用します-pig.error-handling.min.error.records（エラー処理をトリガーするエラーの最小数）とpig.error-handling.error.threshold（エラー数を超える割合としてのレコード数の割合）スローされます）。</target>
        </trans-unit>
        <trans-unit id="1c39d40a8e650c2ef284f5a3849e62072bfdae2c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadCaster.java?view=markup&quot;&gt;LoadCaster&lt;/a&gt; has methods to convert byte arrays to specific types. A loader implementation should implement this if casts (implicit or explicit) from DataByteArray fields to other types need to be supported.</source>
          <target state="translated">&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadCaster.java?view=markup&quot;&gt;LoadCasterに&lt;/a&gt;は、バイト配列を特定の型に変換するメソッドがあります。DataByteArrayフィールドから他の型へのキャスト（暗黙的または明示的）をサポートする必要がある場合、ローダー実装はこれを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="827aa31ae7b3b8158edd560d739d5f474d89c18f" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadFunc.java?view=markup&quot;&gt;LoadFunc&lt;/a&gt; abstract class has three main methods for loading data and for most use cases it would suffice to extend it. There are three other optional interfaces which can be implemented to achieve extended functionality:</source>
          <target state="translated">&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadFunc.java?view=markup&quot;&gt;LoadFunc&lt;/a&gt;抽象クラスには、データをロードするための3つの主要なメソッドがあり、ほとんどのユースケースでは、それを拡張するだけで十分です。拡張機能を実現するために実装できる他の3つのオプションのインターフェースがあります。</target>
        </trans-unit>
        <trans-unit id="9bfcbd0993bbe599b0d0ce3ec1e775bd94b5ec73" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadMetadata.java?view=markup&quot;&gt;LoadMetadata&lt;/a&gt; has methods to deal with metadata - most implementation of loaders don't need to implement this unless they interact with some metadata system. The getSchema() method in this interface provides a way for loader implementations to communicate the schema of the data back to pig. If a loader implementation returns data comprised of fields of real types (rather than DataByteArray fields), it should provide the schema describing the data returned through the getSchema() method. The other methods are concerned with other types of metadata like partition keys and statistics. Implementations can return null return values for these methods if they are not applicable for that implementation.</source>
          <target state="translated">&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadMetadata.java?view=markup&quot;&gt;LoadMetadataに&lt;/a&gt;はメタデータを処理するメソッドがあります。ローダーのほとんどの実装では、メタデータシステムとやり取りしない限り、これを実装する必要はありません。このインターフェースのgetSchema（）メソッドは、ローダー実装がデータのスキーマをpigに通信する方法を提供します。ローダー実装が（DataByteArrayフィールドではなく）実数型のフィールドで構成されるデータを返す場合は、getSchema（）メソッドを介して返されるデータを記述するスキーマを提供する必要があります。他の方法は、パーティションキーや統計など、他のタイプのメタデータに関係しています。実装は、それらの実装に適用できない場合、これらのメソッドのnull戻り値を返すことができます。</target>
        </trans-unit>
        <trans-unit id="743f80c577129dc8081c6750911c5114a027a6d8" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadPredicatePushdown.java?view=markup&quot;&gt;LoadPredicatePushdown&lt;/a&gt; has the methods to push predicates to the loader. It is different than LoadMetadata.setPartitionFilter in that loader may load records which does not satisfy the predicates. In other words, predicates is only a hint. Note this interface is still in development and might change in next version. Currently only OrcStorage implements this interface.</source>
          <target state="translated">&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadPredicatePushdown.java?view=markup&quot;&gt;LoadPredicatePushdownに&lt;/a&gt;は、述語をローダーにプッシュするメソッドがあります。これは、ローダーが述部を満たさないレコードをロードする可能性があるという点で、LoadMetadata.setPartitionFilterとは異なります。つまり、述語はヒントにすぎません。このインターフェースはまだ開発中であり、次のバージョンで変更される可能性があることに注意してください。現在、このインターフェースを実装しているのはOrcStorageだけです。</target>
        </trans-unit>
        <trans-unit id="c00bdd7fc969477665da1fe9c64c49b8d34bdee3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadPushDown.java?view=markup&quot;&gt;LoadPushDown&lt;/a&gt; has methods to push operations from Pig runtime into loader implementations. Currently only the pushProjection() method is called by Pig to communicate to the loader the exact fields that are required in the Pig script. The loader implementation can choose to honor the request (return only those fields required by Pig script) or not honor the request (return all fields in the data). If the loader implementation can efficiently honor the request, it should implement LoadPushDown to improve query performance. (Irrespective of whether the implementation can or cannot honor the request, if the implementation also implements getSchema(), the schema returned in getSchema() should describe the entire tuple of data.)</source>
          <target state="translated">&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadPushDown.java?view=markup&quot;&gt;LoadPushDownに&lt;/a&gt;は、Pigランタイムからローダー実装に操作をプッシュするメソッドがあります。現在、Pigスクリプトで必要な正確なフィールドをローダーに伝えるために、PigによってpushProjection（）メソッドのみが呼び出されます。ローダーの実装では、要求を受け入れる（Pigスクリプトで必要なフィールドのみを返す）か、要求を受け入れない（データのすべてのフィールドを返す）かを選択できます。ローダーの実装がリクエストを効率的に受け入れることができる場合は、クエリのパフォーマンスを向上させるためにLoadPushDownを実装する必要があります。 （実装が要求を受け入れることができるかどうかに関係なく、実装がgetSchema（）も実装する場合、getSchema（）で返されるスキーマはデータのタプル全体を記述する必要があります。）</target>
        </trans-unit>
        <trans-unit id="a0b17ad301eb67a444b5fcddda6189e3e22f5cea" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/NonFSLoadFunc.java?view=markup&quot;&gt;NonFSLoadFunc&lt;/a&gt; is a marker interface to indicate that a LoadFunc implementation is not a filesystem loader. This is useful for LoadFunc classes that for example supply queries instead of filesystem pathes to the LOAD operator.</source>
          <target state="translated">&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/NonFSLoadFunc.java?view=markup&quot;&gt;NonFSLoadFunc&lt;/a&gt;は、LoadFunc実装がファイルシステムローダーではないことを示すマーカーインターフェイスです。これは、たとえば、LOADオペレーターへのファイルシステムパスの代わりにクエリを提供するLoadFuncクラスに役立ちます。</target>
        </trans-unit>
        <trans-unit id="97f0015ba94eeba5c50c16183dd997c7e9bd4a62" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/StoreFunc.java?view=markup&quot;&gt;StoreFunc&lt;/a&gt; abstract class has the main methods for storing data and for most use cases it should suffice to extend it. There is an optional interface which can be implemented to achieve extended functionality:</source>
          <target state="translated">&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/StoreFunc.java?view=markup&quot;&gt;StoreFunc&lt;/a&gt;抽象クラスには、データを保存するための主要なメソッドがあり、ほとんどのユースケースでは、それを拡張するだけで十分です。拡張機能を実現するために実装できるオプションのインターフェースがあります。</target>
        </trans-unit>
        <trans-unit id="9133eb98211fd7cfb43e4b1fd6f05bea741bcaa3" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/StoreMetadata.java?view=markup&quot;&gt;StoreMetadata:&lt;/a&gt; This interface has methods to interact with metadata systems to store schema and store statistics. This interface is optional and should only be implemented if metadata needs to stored.</source>
          <target state="translated">&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/StoreMetadata.java?view=markup&quot;&gt;StoreMetadata：&lt;/a&gt;このインターフェースには、メタデータシステムと対話してスキーマを格納し、統計を格納するメソッドがあります。このインターフェイスはオプションであり、メタデータを格納する必要がある場合にのみ実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="f7a6ab9e59514abec0b48b13c7e18ea2dc4b473c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/StoreResources.java?view=markup&quot;&gt;StoreResources:&lt;/a&gt; This interface has methods to put hdfs files or local files to distributed cache.</source>
          <target state="translated">&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/StoreResources.java?view=markup&quot;&gt;StoreResources：&lt;/a&gt;このインターフェースには、hdfsファイルまたはローカルファイルを分散キャッシュに配置するメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="e8275001363f72a1cde8b1636f4b53d30fc2c1cb" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;http://tez.apache.org&quot;&gt;Apache Tez&lt;/a&gt; provides an alternative execution engine than MapReduce focusing on performance. By using optimized job flow, edge semantics and container reuse, we see consistent performance boost for both large job and small job.</source>
          <target state="translated">&lt;a href=&quot;http://tez.apache.org&quot;&gt;Apache Tez&lt;/a&gt;は、パフォーマンスに重点を置いたMapReduceの代替実行エンジンを提供します。最適化されたジョブフロー、エッジセマンティクス、コンテナの再利用を使用することで、大規模なジョブと小規模なジョブの両方で一貫したパフォーマンスの向上が見られます。</target>
        </trans-unit>
        <trans-unit id="2d31c40f3fecd385e1da4cb57c1a547a7ea687e4" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/ErrorHandling.java?view=markup&quot;&gt;ErrorHandling:&lt;/a&gt; This interface allow you to skip bad records in the storer so the storer will not throw exception and terminate the job. You can implement your own error handler by overriding &lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/ErrorHandler.java?view=markup&quot;&gt;ErrorHandler&lt;/a&gt; interface, or use predefined error handler: &lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/CounterBasedErrorHandler.java?view=markup&quot;&gt;CounterBasedErrorHandler&lt;/a&gt;. ErrorHandling can be turned on by setting the property pig.error-handling.enabled to true in pig.properties. Default is false. CounterBasedErrorHandler uses two settings - pig.error-handling.min.error.records (the minimum number of errors to trigger error handling) and pig.error-handling.error.threshold (percentage of the number of records as a fraction exceeding which error is thrown).</source>
          <target state="translated">&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/ErrorHandling.java?view=markup&quot;&gt;ErrorHandling：&lt;/a&gt;このインターフェースを使用すると、ストアー内の不良レコードをスキップして、ストアーが例外をスローしてジョブを終了しないようにすることができます。&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/ErrorHandler.java?view=markup&quot;&gt;ErrorHandler&lt;/a&gt;インターフェースをオーバーライドすることで独自のエラーハンドラーを実装するか、事前定義されたエラーハンドラーである&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/CounterBasedErrorHandler.java?view=markup&quot;&gt;CounterBasedErrorHandlerを&lt;/a&gt;使用できます。 errorHandlingは、pig.propertiesでプロパティpig.error-handling.enabledをtrueに設定することでオンにできます。デフォルトはfalseです。 CounterBasedErrorHandlerは、pig.error-handling.min.error.records（エラー処理をトリガーするエラーの最小数）とpig.error-handling.error.threshold（エラーを超える割合としてのレコード数のパーセンテージ）の2つの設定を使用します。スローされます）。</target>
        </trans-unit>
        <trans-unit id="bc150506cb63da1efd5b036ac01bcfb2d9f13074" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadCaster.java?view=markup&quot;&gt;LoadCaster&lt;/a&gt; has methods to convert byte arrays to specific types. A loader implementation should implement this if casts (implicit or explicit) from DataByteArray fields to other types need to be supported.</source>
          <target state="translated">&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadCaster.java?view=markup&quot;&gt;LoadCasterに&lt;/a&gt;は、バイト配列を特定のタイプに変換するメソッドがあります。DataByteArrayフィールドから他のタイプへのキャスト（暗黙的または明示的）をサポートする必要がある場合、ローダー実装はこれを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="1e221cd3a1af3d51ed5016328cbedda668dc3c06" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadFunc.java?view=markup&quot;&gt;LoadFunc&lt;/a&gt; abstract class has three main methods for loading data and for most use cases it would suffice to extend it. There are three other optional interfaces which can be implemented to achieve extended functionality:</source>
          <target state="translated">&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadFunc.java?view=markup&quot;&gt;LoadFunc&lt;/a&gt;抽象クラスには、データをロードするための3つの主要なメソッドがあり、ほとんどのユースケースでは、データを拡張するだけで十分です。拡張機能を実現するために実装できる他の3つのオプションのインターフェースがあります。</target>
        </trans-unit>
        <trans-unit id="9e778a4192860476372948ecb691f0d2aedde8df" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadMetadata.java?view=markup&quot;&gt;LoadMetadata&lt;/a&gt; has methods to deal with metadata - most implementation of loaders don't need to implement this unless they interact with some metadata system. The getSchema() method in this interface provides a way for loader implementations to communicate the schema of the data back to pig. If a loader implementation returns data comprised of fields of real types (rather than DataByteArray fields), it should provide the schema describing the data returned through the getSchema() method. The other methods are concerned with other types of metadata like partition keys and statistics. Implementations can return null return values for these methods if they are not applicable for that implementation.</source>
          <target state="translated">&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadMetadata.java?view=markup&quot;&gt;LoadMetadataに&lt;/a&gt;は、メタデータを処理するメソッドがあります。ローダーのほとんどの実装では、メタデータシステムと相互作用しない限り、これを実装する必要はありません。このインターフェースのgetSchema（）メソッドは、ローダーの実装がデータのスキーマをpigに通信する方法を提供します。ローダーの実装が（DataByteArrayフィールドではなく）実際のタイプのフィールドで構成されるデータを返す場合、getSchema（）メソッドを介して返されるデータを説明するスキーマを提供する必要があります。他のメソッドは、パーティションキーや統計などの他のタイプのメタデータに関係しています。これらのメソッドがその実装に適用できない場合、実装はこれらのメソッドに対してnullの戻り値を返す可能性があります。</target>
        </trans-unit>
        <trans-unit id="4752f1138ca0767704510f7b4cbbc6de51efb229" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadPredicatePushdown.java?view=markup&quot;&gt;LoadPredicatePushdown&lt;/a&gt; has the methods to push predicates to the loader. It is different than LoadMetadata.setPartitionFilter in that loader may load records which does not satisfy the predicates. In other words, predicates is only a hint. Note this interface is still in development and might change in next version. Currently only OrcStorage implements this interface.</source>
          <target state="translated">&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadPredicatePushdown.java?view=markup&quot;&gt;LoadPredicatePushdownに&lt;/a&gt;は、述語をローダーにプッシュするメソッドがあります。 LoadMetadata.setPartitionFilterとは異なり、ローダーは述語を満たさないレコードをロードする可能性があります。言い換えれば、述語は単なるヒントです。このインターフェースはまだ開発中であり、次のバージョンで変更される可能性があることに注意してください。現在、OrcStorageのみがこのインターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="010e202910929fc84c506ec393c98dd074bfe086" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadPushDown.java?view=markup&quot;&gt;LoadPushDown&lt;/a&gt; has methods to push operations from Pig runtime into loader implementations. Currently only the pushProjection() method is called by Pig to communicate to the loader the exact fields that are required in the Pig script. The loader implementation can choose to honor the request (return only those fields required by Pig script) or not honor the request (return all fields in the data). If the loader implementation can efficiently honor the request, it should implement LoadPushDown to improve query performance. (Irrespective of whether the implementation can or cannot honor the request, if the implementation also implements getSchema(), the schema returned in getSchema() should describe the entire tuple of data.)</source>
          <target state="translated">&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/LoadPushDown.java?view=markup&quot;&gt;LoadPushDownに&lt;/a&gt;は、Pigランタイムからローダー実装に操作をプッシュするメソッドがあります。現在、pushProjection（）メソッドのみがPigによって呼び出され、Pigスクリプトで必要な正確なフィールドをローダーに伝達します。ローダーの実装は、要求を尊重する（Pigスクリプトに必要なフィールドのみを返す）か、要求を尊重しない（データ内のすべてのフィールドを返す）かを選択できます。ローダーの実装がリクエストを効率的に処理できる場合は、LoadPushDownを実装してクエリのパフォーマンスを向上させる必要があります。 （実装が要求を受け入れることができるかどうかに関係なく、実装がgetSchema（）も実装する場合、getSchema（）で返されるスキーマはデータのタプル全体を記述する必要があります。）</target>
        </trans-unit>
        <trans-unit id="bcda22f6a89f0d6e2208e49e42105dbe123d68f0" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/NonFSLoadFunc.java?view=markup&quot;&gt;NonFSLoadFunc&lt;/a&gt; is a marker interface to indicate that a LoadFunc implementation is not a filesystem loader. This is useful for LoadFunc classes that for example supply queries instead of filesystem pathes to the LOAD operator.</source>
          <target state="translated">&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/NonFSLoadFunc.java?view=markup&quot;&gt;NonFSLoadFunc&lt;/a&gt;は、LoadFunc実装がファイルシステムローダーではないことを示すマーカーインターフェイスです。これは、たとえば、LOAD演算子へのファイルシステムパスの代わりにクエリを提供するLoadFuncクラスに役立ちます。</target>
        </trans-unit>
        <trans-unit id="5ba36350f403c3526d27b1e0d271421cc65839ce" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/StoreFunc.java?view=markup&quot;&gt;StoreFunc&lt;/a&gt; abstract class has the main methods for storing data and for most use cases it should suffice to extend it. There is an optional interface which can be implemented to achieve extended functionality:</source>
          <target state="translated">&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/StoreFunc.java?view=markup&quot;&gt;StoreFunc&lt;/a&gt;抽象クラスには、データを格納するための主要なメソッドがあり、ほとんどのユースケースでは、データを拡張するだけで十分です。拡張機能を実現するために実装できるオプションのインターフェースがあります。</target>
        </trans-unit>
        <trans-unit id="ea4d26d3820dd48966d48392438bf1a16426182d" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/StoreMetadata.java?view=markup&quot;&gt;StoreMetadata:&lt;/a&gt; This interface has methods to interact with metadata systems to store schema and store statistics. This interface is optional and should only be implemented if metadata needs to stored.</source>
          <target state="translated">&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/StoreMetadata.java?view=markup&quot;&gt;StoreMetadata：&lt;/a&gt;このインターフェースには、メタデータシステムと対話してスキーマを保存し、統計を保存するメソッドがあります。このインターフェースはオプションであり、メタデータを保存する必要がある場合にのみ実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="0dbc6c637e7cfecf0d15d30180e6eb5e7de9582c" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/StoreResources.java?view=markup&quot;&gt;StoreResources:&lt;/a&gt; This interface has methods to put hdfs files or local files to distributed cache.</source>
          <target state="translated">&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/StoreResources.java?view=markup&quot;&gt;StoreResources：&lt;/a&gt;このインターフェースには、hdfsファイルまたはローカルファイルを分散キャッシュに配置するメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="874e6b08968e2ab1b0a8b5742b065972b13b799a" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;https://tez.apache.org&quot;&gt;Apache Tez&lt;/a&gt; provides an alternative execution engine than MapReduce focusing on performance. By using optimized job flow, edge semantics and container reuse, we see consistent performance boost for both large job and small job.</source>
          <target state="translated">&lt;a href=&quot;https://tez.apache.org&quot;&gt;Apache Tez&lt;/a&gt;は、パフォーマンスに重点を置いたMapReduceの代替実行エンジンを提供します。最適化されたジョブフロー、エッジセマンティクス、およびコンテナの再利用を使用することで、大規模なジョブと小規模なジョブの両方で一貫したパフォーマンスの向上が見られます。</target>
        </trans-unit>
        <trans-unit id="8e46bc562894afe7359dce07e14f582b94fe4041" translate="yes" xml:space="preserve">
          <source>&lt;a href=&quot;start#pl-statements&quot;&gt;Pig Latin statements&lt;/a&gt; work with relations. A relation can be defined as follows:</source>
          <target state="translated">&lt;a href=&quot;start#pl-statements&quot;&gt;ブタラテン語のステートメント&lt;/a&gt;は関係で機能します。関係は次のように定義できます。</target>
        </trans-unit>
        <trans-unit id="ce247f90b43cda1ce487f24bd8c0a263c12aae38" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Note: although the Java formatter (and thus this function) offers the %t specifier for date/time elements, it's best avoided: it's cumbersome, the output and timezone handling may differ from what you expect, and it doesn't accept datetime objects from pig. Instead, just prepare dates usint the ToString UDF as shown.&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;注：Javaフォーマッタ（およびこの関数）は、日付/時刻要素に％t指定子を提供しますが、避けるのが最善です。扱いにくく、出力とタイムゾーンの処理が予想と異なる場合があり、日時オブジェクトを受け入れません。豚から。代わりに、次のようにToString UDFを使用して日付を準備します。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="95b2f66539549c1c26da78ccce34909a84db80af" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;expression&lt;/em&gt; matches &lt;em&gt;string-constant&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;式は&lt;/em&gt;&lt;em&gt;文字列定数に&lt;/em&gt;一致し&lt;em&gt;ます&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e85b2c480f58f647f0bd98112e87a6be883c15f2" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;hadoop.security.krb5.keytab&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;hadoop.security.krb5.keytab&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="f87e94cb069a92396643cda1720e05e830879c90" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;hadoop.security.krb5.principal&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;hadoop.security.krb5.principal&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2fa49a61088a8c1b5731308fea093116b4ffd0f0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;java.security.krb5.conf&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;java.security.krb5.conf&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6ac1e45e3a58654a06f3162c77fcf0eb032e9e0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Allowed characters&lt;/strong&gt; Pig schemas may sometimes contain characters like colons (&quot;:&quot;) that are illegal in Avro names.</source>
          <target state="translated">&lt;strong&gt;許可されている文字&lt;/strong&gt; Pigスキーマには、Avro名では無効なコロン（ &quot;：&quot;）などの文字が含まれている場合があります。</target>
        </trans-unit>
        <trans-unit id="00091b674192e742a0c4fd9112fb56676258ab80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Ant 1.8&lt;/strong&gt; - &lt;a href=&quot;http://ant.apache.org/&quot;&gt;http://ant.apache.org/&lt;/a&gt; (for builds)</source>
          <target state="translated">&lt;strong&gt;Ant 1.8&lt;/strong&gt; - &lt;a href=&quot;http://ant.apache.org/&quot;&gt;http://ant.apache.org/&lt;/a&gt;（ビルド用）</target>
        </trans-unit>
        <trans-unit id="b4d719252a75d81c038080c6f97ba39c88a42e91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Ant 1.8&lt;/strong&gt; - &lt;a href=&quot;https://ant.apache.org/&quot;&gt;http://ant.apache.org/&lt;/a&gt; (for builds)</source>
          <target state="translated">&lt;strong&gt;Ant 1.8&lt;/strong&gt; - &lt;a href=&quot;https://ant.apache.org/&quot;&gt;http：//ant.apache.org/&lt;/a&gt;（ビルド用）</target>
        </trans-unit>
        <trans-unit id="c25a6d30270f033c3bd039d8fb352b6cbd8b5071" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bag Construction&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;バッグの構造&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b3f73dfac8f974a3eff636392c0bd9e8413da0e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bag Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;バッグの例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="870a7ecad884afc7377fdb69b11fd79eb4e1aac2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Batch Mode&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;バッチモード&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="11b6f773d4b899cf4d205666c83816bffd407495" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bind:&lt;/strong&gt; Resolve the parameters during the bind call.</source>
          <target state="translated">&lt;strong&gt;バインド：&lt;/strong&gt;バインド呼び出し中にパラメーターを解決します。</target>
        </trans-unit>
        <trans-unit id="0563539d79a1e2243f69e94abf457c1aa841d0d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Classifier&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Classifier&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="864e811a53f057658e78bdbd990a7f47373547f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Column family prefix:&lt;/strong&gt; When reading data, this will fetch data from Accumulo Key-Values in the current row whose column family match the given prefix. This will result in a Map being placed into the Tuple. When writing data, a Map is also expected at the given offset in the Tuple whose Keys will be appended to the column family prefix, an empty column qualifier is used, and the Map value will be placed in the Accumulo Value. A valid column family prefix is a literal asterisk (*) in which case the Map Key will be equivalent to the Accumulo column family.</source>
          <target state="translated">&lt;strong&gt;列ファミリーのプレフィックス：&lt;/strong&gt;データを読み取るとき、列ファミリーが指定のプレフィックスと一致する現在の行のAccumulo Key-Valueからデータをフェッチします。これにより、マップがタプルに配置されます。データを書き込むとき、マップはタプルの特定のオフセットでも期待され、そのキーは列ファミリープレフィックスに追加され、空の列修飾子が使用され、マップ値はアキュムロ値に配置されます。有効な列ファミリー接頭辞はリテラルアスタリスク（*）です。この場合、マップキーはアキュムロ列ファミリーと同等になります。</target>
        </trans-unit>
        <trans-unit id="b3eed7692af866e2243137f5b284bee14d334cdb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Column qualifier prefix:&lt;/strong&gt; Similar to the column family prefix except it operates on the column qualifier. On reads, Accumulo Key-Values in the same row that match the given column family and column qualifier prefix will be placed into a single Map. On writes, the provided column family from the column specification will be used, the Map key will be appended to the column qualifier provided in the specification, and the Map Value will be the Accumulo Value.</source>
          <target state="translated">&lt;strong&gt;列修飾子の接頭辞：列修飾子&lt;/strong&gt;で動作することを除いて、列ファミリーの接頭辞に似ています。読み取り時には、指定された列ファミリーと列修飾子のプレフィックスと一致する同じ行のAccumulo Key-Valueが単一のマップに配置されます。書き込み時には、列仕様から提供された列ファミリーが使用され、マップキーは仕様で提供された列修飾子に追加され、マップ値はアキュムロ値になります。</target>
        </trans-unit>
        <trans-unit id="ecbb081e3ce72bba13d9ecbf008d71980ea03e7a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Command Line&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;コマンドライン&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a98d670edccff0e4121af4a4e5fe34d134803db4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Comments in Scripts&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;スクリプトのコメント&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d85745bf3b8216f5930a0e251abc37521080a93b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Compile:&lt;/strong&gt; Compile is a static function on the Pig class and in its simplest form takes a fragment of Pig Latin that defines the pipeline as its input:</source>
          <target state="translated">&lt;strong&gt;コンパイル：&lt;/strong&gt;コンパイルは、Pigクラスの静的関数であり、最も単純な形式では、パイプラインを入力として定義するPig Latinのフラグメントを受け取ります。</target>
        </trans-unit>
        <trans-unit id="1588b0f85251359e7c112374b34b83b9a6561bf4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Complex Data Types&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;複雑なデータ型&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9716a94fd7eb50856fe6e9f5141d2d216e91bc3b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Complex Types&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;複合型&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="24aaa88a5a4ab27e81f0ef805d978692466917a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Condition A&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;条件A&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="184c0023d23924ce8243e4dd3934bad392668931" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Condition B&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;条件B&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0ccfb27cc7c1b0e0d8393a950626994487c394f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Configuring&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Configuring&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f9946beee7fef5c387bbef258555f0fc1e90f2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Constant Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;定数の例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d583721fdee9eda617809d6d5f0932df533809dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Description&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Description&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ada6187c809ce88890faeed212002675891701db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Embedded Python Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;埋め込みPythonの例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1f00e4b16dab8740b9be9691f26d9eb78c4ac38c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Enums&lt;/strong&gt; Avro allows you to define enums to efficiently and abstractly represent categorical variable, but Pig does not.</source>
          <target state="translated">&lt;strong&gt;Enums&lt;/strong&gt; Avroでは、列挙型を定義してカテゴリ変数を効率的かつ抽象的に表すことができますが、Pigではできません。</target>
        </trans-unit>
        <trans-unit id="16bac31fbe05df3ba97ccfb9e03a603c63955b65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example Implementation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;実装例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bce3f4a409dc0c67054a7e806ad3eecf69f742f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5c3d140c8e464f134cec3b0eebd38bf683f55d62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Examples&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Examples&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aa07a12dbe3a7b10f89d3fada2154cdedcf225c8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Exclude&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Exclude&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="766d44462eca7406a9cdef3dc27995752d1043bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Field/Record Delimiters&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;フィールド/レコード区切り文字&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5979cb8b19875b5dfeaab0503ebc729fbc6f4fcf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;File&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;File&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="55e5d0ca1011d6e3ac86e82020831ef352d18ed1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Fixed Length Byte Arrays&lt;/strong&gt; Avro allows you to define fixed length byte arrays, but Pig does not.</source>
          <target state="translated">&lt;strong&gt;固定長バイト配列&lt;/strong&gt; Avroでは固定長バイト配列を定義できますが、Pigでは定義できません。</target>
        </trans-unit>
        <trans-unit id="b2986e9a8f11acf1d3167efc7dc795c85d9a800a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Groovy&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Groovy&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f5c96eb5f46c96767fb943ff94d7bd89e51371f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Hadoop 2.X&lt;/strong&gt; - &lt;a href=&quot;http://hadoop.apache.org/common/releases.html&quot;&gt;http://hadoop.apache.org/common/releases.html&lt;/a&gt; (You can run Pig with different versions of Hadoop by setting HADOOP_HOME to point to the directory where you have installed Hadoop. If you do not set HADOOP_HOME, by default Pig will run with the embedded version, currently Hadoop 2.7.3.)</source>
          <target state="translated">&lt;strong&gt;Hadoop 2.X&lt;/strong&gt; - &lt;a href=&quot;http://hadoop.apache.org/common/releases.html&quot;&gt;http://hadoop.apache.org/common/releases.html&lt;/a&gt;（HADOOP_HOMEを、Hadoopをインストールしたディレクトリを指すように設定することで、異なるバージョンのHadoopでPigを実行できます。HADOOP_HOMEを設定しない場合、デフォルトでは、Pigは埋め込みバージョン（現在はHadoop 2.7.3）で実行されます。</target>
        </trans-unit>
        <trans-unit id="21f79d6ece8c3bbdaaf02fa5f2c910320286210d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Hadoop 2.X&lt;/strong&gt; - &lt;a href=&quot;https://hadoop.apache.org/common/releases.html&quot;&gt;http://hadoop.apache.org/common/releases.html&lt;/a&gt; (You can run Pig with different versions of Hadoop by setting HADOOP_HOME to point to the directory where you have installed Hadoop. If you do not set HADOOP_HOME, by default Pig will run with the embedded version, currently Hadoop 2.7.3.)</source>
          <target state="translated">&lt;strong&gt;Hadoop 2.X&lt;/strong&gt; - &lt;a href=&quot;https://hadoop.apache.org/common/releases.html&quot;&gt;http：//hadoop.apache.org/common/releases.html&lt;/a&gt;（Hadoop_HOMEをHadoopをインストールしたディレクトリを指すように設定することで、さまざまなバージョンのHadoopでPigを実行できます。HADOOP_HOMEを設定しない場合、デフォルトでは、Pigは組み込みバージョン（現在はHadoop 2.7.3）で実行されます。）</target>
        </trans-unit>
        <trans-unit id="1a581f929d6ff04a5c40c9d094095507993dd6ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;How Pig Handles Schema&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Pigがスキーマを処理する方法&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="831617e8204b3e0783377c2056103288403652ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Interactive Mode &lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;インタラクティブモード &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f0c158d121dd2402f46e37ae90cac07ee7c398a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Invocation Process&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;呼び出しプロセス&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a80415760be9c4358b22b7a212dfab8ad1757865" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Java 1.7&lt;/strong&gt; - &lt;a href=&quot;http://java.sun.com/javase/downloads/index.jsp&quot;&gt;http://java.sun.com/javase/downloads/index.jsp&lt;/a&gt; (set JAVA_HOME to the root of your Java installation)</source>
          <target state="translated">&lt;strong&gt;Java 1.7&lt;/strong&gt; - &lt;a href=&quot;http://java.sun.com/javase/downloads/index.jsp&quot;&gt;http://java.sun.com/javase/downloads/index.jsp&lt;/a&gt;（JAVA_HOMEをJavaインストールのルートに設定）</target>
        </trans-unit>
        <trans-unit id="45565dc2a4e38dfb88e321711fd07ae8f3e420e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;JavaScript&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;JavaScript&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d96e75f238c293154cc6cd3a8e3ad55e7555b9f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Known Schema Handling&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;既知のスキーマ処理&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c6f0f074434fa4debcf3e9fa872bf26f85241ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Let Pig Set the Number of Reducers&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;豚にレデューサーの数を設定させる&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c79e350789ffa976aa4f13f4ba7fcc02a9da4cdc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Literal:&lt;/strong&gt; this is the simplest specification which is a colon-delimited string that maps to a column family and column qualifier. This will read/write a simple scalar from/to Accumulo.</source>
          <target state="translated">&lt;strong&gt;リテラル：&lt;/strong&gt;これは、列ファミリーと列修飾子にマップされるコロン区切りの文字列である最も単純な仕様です。これは、Accumuloとの間の単純なスカラーの読み取り/書き込みを行います。</target>
        </trans-unit>
        <trans-unit id="c711cb7bb6ac2617e366ffad4bed81f922bf80de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Load/Store Statements&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ロード/ストアステートメント&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="668c155ca345102aaba6691aba86629e65bebb4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Local Mode&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ローカルモード&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="115a5670e8cf787355d4e90a58a169dba45a1bdb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Local Mode&lt;/strong&gt; - To run Pig in local mode, you need access to a single machine; all files are installed and run using your local host and file system. Specify local mode using the -x flag (pig -x local).</source>
          <target state="translated">&lt;strong&gt;ローカルモード&lt;/strong&gt; -Pigをローカルモードで実行するには、単一のマシンにアクセスする必要があります。すべてのファイルがインストールされ、ローカルホストとファイルシステムを使用して実行されます。-xフラグを使用してローカルモードを指定します（pig -x local）。</target>
        </trans-unit>
        <trans-unit id="c645ce0ad4873922bbac93fa3553d53e97e98448" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Macro Definition&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;マクロ定義&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eaa9d9d7381feb9993ffd8c0e7bcbc5bf954ac37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Macro Expansion&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;マクロ展開&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="125364bf0136bb94c340e9732e7ad3816be4e9e8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Macro Import&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;マクロのインポート&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bd47d2d1891832b1f46294249939daacd12b7d36" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Mandatory&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Mandatory&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="55aaceba23e37d916e01b468b61986944eb4f371" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Map Construction&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;地図作成&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aea7becf90d862b8c96ef976f5626d52dd9d6d26" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Map Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;地図の例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8fc7b1ec3162d7ed517b542a326b608b948be7c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Mapreduce Mode&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Mapreduceモード&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d96a5cdfce7b35735d1d999c3b691250fc32ff84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Mapreduce Mode&lt;/strong&gt; - To run Pig in mapreduce mode, you need access to a Hadoop cluster and HDFS installation. Mapreduce mode is the default mode; you can, &lt;em&gt;but don't need to&lt;/em&gt;, specify it using the -x flag (pig OR pig -x mapreduce).</source>
          <target state="translated">&lt;strong&gt;Mapreduceモード-Pigをmapreduceモードで&lt;/strong&gt;実行するには、HadoopクラスターとHDFSインストールにアクセスする必要があります。Mapreduceモードがデフォルトのモードです。あなたのことができ、&lt;em&gt;しかし、する必要はありません&lt;/em&gt;、-xフラグ（-x MapReduceの豚またはブタ）を使用して、それを指定します。</target>
        </trans-unit>
        <trans-unit id="6d9141da19ad3c2181f6299bd2e0cee6a596f33e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Matches Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;一致の例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a3150d01b86051af1c4123018e7b1c710d7b890" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt; When using the option &lt;strong&gt;DENSE&lt;/strong&gt;, ties do not cause gaps in ranking values.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;オプション&lt;strong&gt;DENSE&lt;/strong&gt;を使用する場合、同順位はランキング値にギャップを生じ&lt;strong&gt;させ&lt;/strong&gt;ません。</target>
        </trans-unit>
        <trans-unit id="caff053422a8bdc60afad9e00a1ff09002dcdaf6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;NOTE:&lt;/strong&gt;All paths in these variables are local to the client system starting the actual pig script. This can be run without any special access to the cluster nodes.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;これらの変数のすべてのパスは、実際のpigスクリプトを開始するクライアントシステムに対してローカルです。これは、クラスターノードへの特別なアクセスなしで実行できます。</target>
        </trans-unit>
        <trans-unit id="4ae207711ac29e86ecfa62b02f39e088dfb6a634" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Both the LoadFunc and StoreFunc implementations should use the Hadoop 20 API based classes (InputFormat/OutputFormat and related classes) under the &lt;strong&gt;new&lt;/strong&gt; org.apache.hadoop.mapreduce package instead of the old org.apache.hadoop.mapred package.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; LoadFuncとStoreFuncの実装はどちらも、古いorg.apache.hadoop.mapredパッケージではなく、&lt;strong&gt;新しい&lt;/strong&gt; org.apache.hadoop.mapreduceパッケージの下のHadoop 20 APIベースのクラス（InputFormat / OutputFormatおよび関連クラス）を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="78870d3d6b0a9484a8b8dca2ae46d2b8f3dc7f1b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; During the testing/debugging phase of your implementation, you can use DUMP to display results to your terminal screen. However, in a production environment you always want to use the STORE operator to save your results (see &lt;a href=&quot;perf#store-dump&quot;&gt;Store vs. Dump&lt;/a&gt;).</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;実装のテスト/デバッグ段階で、DUMPを使用して結果を端末画面に表示できます。ただし、実稼働環境では、常にSTOREオペレーターを使用して結果を保存する必要があります（「&lt;a href=&quot;perf#store-dump&quot;&gt;ストアとダンプ&lt;/a&gt;」を参照）。</target>
        </trans-unit>
        <trans-unit id="895e562e990a0711db3da696565dc2f4d6e636d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; ORDER BY is NOT stable; if multiple records have the same ORDER BY key, the order in which these records are returned is not defined and is not guarantted to be the same from one run to the next.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; ORDER BYは安定していません。複数のレコードが同じORDER BYキーを持っている場合、これらのレコードが返される順序は定義されておらず、実行ごとに同じであることは保証されていません。</target>
        </trans-unit>
        <trans-unit id="4da743e10dc574043b389940ca292b82ba1e4971" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; One exception to the above rule is LIMIT. Starting with Pig 0.9, even if LIMIT comes between GROUP and FOREACH, the combiner will still be used. In this example, the optimizer will push LIMIT above FOREACH but this will not prevent the use of the combiner.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;上記のルールの1つの例外はLIMITです。Pig 0.9から、LIMITがGROUPとFOREACHの間にある場合でも、コンバイナが引き続き使用されます。この例では、オプティマイザはLIMITをFOREACHより上にプッシュしますが、これはコンバイナの使用を妨げません。</target>
        </trans-unit>
        <trans-unit id="8ad88bd615fb1f186e321950cc0fe9fde548ad79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Pig automatically chooses the interface that it expects to provide the best performance: Algebraic &amp;gt; Accumulator &amp;gt; Default.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; Pigは、最高のパフォーマンスを提供することが期待されるインターフェースを自動的に選択します：Algebraic&amp;gt; Accumulator&amp;gt; Default。</target>
        </trans-unit>
        <trans-unit id="183977813559360228ae002f15edf2ef8f705a52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Pig uses Hadoop globbing so the functionality is IDENTICAL. However, when you run from the command line using the Hadoop fs command (rather than the Pig LOAD operator), the Unix shell may do some of the substitutions; this could alter the outcome giving the impression that globing works differently for Pig and Hadoop. For example:</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; PigはHadoopグロビングを使用するため、機能は同一です。ただし、（Pig LOADオペレーターではなく）Hadoop fsコマンドを使用してコマンドラインから実行すると、Unixシェルが一部の置換を行う場合があります。これにより、結果が変わる可能性があり、PigとHadoopではグロビングの動作が異なるという印象を与えます。例えば：</target>
        </trans-unit>
        <trans-unit id="d3f879ceef97d4f1bfb2973ffa7e17d3437f5951" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Piggy Bank currently supports Java UDFs. Support for Jython and JavaScript UDFs will be added at a later date.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; Piggy Bankは現在、Java UDFをサポートしています。JythonおよびJavaScript UDFのサポートは後日追加されます。</target>
        </trans-unit>
        <trans-unit id="5c3e44b2a4d061ae9b4449e1f8409d6770fcf286" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Spark local mode is experimental. There are some queries which just error out on bigger data in local mode.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; Sparkローカルモードは試験的なものです。ローカルモードでより大きなデータでエラーが発生するクエリがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="13ff27c32be37148d15e2bfa3c3b7305070f40e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; Tez local mode is experimental. There are some queries which just error out on bigger data in local mode.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; Tezローカルモードは実験的なものです。ローカルモードでより大きなデータでエラーが発生するクエリがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="6ce361b8bad82567158b8fe3a047f8e8d3cbe477" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The PIG_CLASSPATH can also be used to add any other 3rd party dependencies or resource files a pig script may require. If there is also a need to make the added entries take the highest precedence in the Pig JVM's classpath order, one may also set the env-var PIG_USER_CLASSPATH_FIRST to any value, such as 'true' (and unset the env-var to disable).</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt; PIG_CLASSPATHを使用して、pigスクリプトが必要とする可能性のある他のサードパーティの依存関係またはリソースファイルを追加することもできます。追加されたエントリをPig JVMのクラスパスの順序で最も優先する必要がある場合は、env-var PIG_USER_CLASSPATH_FIRSTを「true」などの任意の値に設定することもできます（無効にするには、env-varの設定を解除します）。 。</target>
        </trans-unit>
        <trans-unit id="8ed8f748eb1080cd104588d317ebde5b4fb93992" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt; The properties file uses standard Java property file format.</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;プロパティファイルは、標準のJavaプロパティファイル形式を使用します。</target>
        </trans-unit>
        <trans-unit id="cbdba850c47e3331e8cbdd7856bdbac0c86640a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;em&gt;Groovy UDFs are an experimental feature.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;&lt;em&gt;Groovy UDFは実験的な機能です。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c06a2496b794f2adab89afab29e788f8412f5a64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;em&gt;JavaScript UDFs are an experimental feature.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;&lt;em&gt;JavaScript UDFは実験的な機能です。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a2fb07a88e9cf33355400006e0c53fdc471d293b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note:&lt;/strong&gt;&lt;em&gt;Ruby UDFs are an experimental feature.&lt;/em&gt;</source>
          <target state="translated">&lt;strong&gt;注：&lt;/strong&gt;&lt;em&gt;Ruby UDFは実験的な機能です。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="e42fbe4240560deae4f59c3edc3b41aa2d7beba4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Notes&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Notes&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0921e59b128a6c1bbffa876015afd4d76c9d5b93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Nullable values&lt;/strong&gt; In Pig, all types are nullable. In Avro, they are not.</source>
          <target state="translated">&lt;strong&gt;ヌル値の可能性&lt;/strong&gt; Pigでは、すべてのタイプがヌル可能です。Avroでは、そうではありません。</target>
        </trans-unit>
        <trans-unit id="98888839ac527d9d7b6da918b1f83d5acf0c0c54" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Numeric Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;数値の例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b846b34df36736959702d437ac75b781737f468b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Optional&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Optional&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1a3e8c098fcdd970e7382f10bbf64c7a2e014036" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pig Scripts&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;豚スクリプト&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7bdf1ddccb4e6c4031cf7f86002ae55f143c5fbb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Pig Statistic&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;豚の統計&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1fed854abb334670642eb08a38dc28bfc7641e99" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Python 2.7&lt;/strong&gt; - &lt;a href=&quot;http://jython.org/downloads.html&quot;&gt;https://www.python.org&lt;/a&gt; (when using Streaming Python UDFs)</source>
          <target state="translated">&lt;strong&gt;Python 2.7&lt;/strong&gt; - &lt;a href=&quot;http://jython.org/downloads.html&quot;&gt;https://www.python.org&lt;/a&gt;（ストリーミングPython UDFを使用する場合）</target>
        </trans-unit>
        <trans-unit id="c7975b4ef8f024abdf4eff330237ea5ef1ed22b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Python&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Python&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2a019b65ade07a20be180f8e8937a06f90d86346" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Record Provenance&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;来歴の記録&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="566be72176eaa278d3535a25e25de726d19843bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Recursive schema definitions&lt;/strong&gt; You cannot define schemas recursively in Pig, but you can define schemas recursively in Avro.</source>
          <target state="translated">&lt;strong&gt;再帰的なスキーマ定義&lt;/strong&gt; Pigでは&lt;strong&gt;再帰的にスキーマを定義&lt;/strong&gt;できませんが、Avroでは再帰的にスキーマを定義できます。</target>
        </trans-unit>
        <trans-unit id="77b3f0d8905b86fb4492ec8d3c26723649af40c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Regular Join Optimizations&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;通常の結合の最適化&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4a7ad93d7a246903d335205919508cab60dffaa5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Run:&lt;/strong&gt; Bind call returns an instance of &lt;a href=&quot;#BoundScript-Object&quot;&gt;BoundScript object&lt;/a&gt; that can be used to execute the pipeline. The simplest way to execute the pipeline is to call runSingle function. (However, as mentioned later, this works only if a single set of variables is bound to the parameters. Otherwise, if multiple set of variables are bound, an exception will be thrown if runSingle is called.)</source>
          <target state="translated">&lt;strong&gt;Run：&lt;/strong&gt; Bind呼び出しは、パイプラインの実行に使用できる&lt;a href=&quot;#BoundScript-Object&quot;&gt;BoundScriptオブジェクトの&lt;/a&gt;インスタンスを返します。パイプラインを実行する最も簡単な方法は、runSingle関数を呼び出すことです。（ただし、後で説明するように、これは単一の変数セットがパラメーターにバインドされている場合にのみ機能します。そうでない場合、複数の変数セットがバインドされている場合、runSingleが呼び出されると例外がスローされます。）</target>
        </trans-unit>
        <trans-unit id="378fc0f1b46427d6e8a56d87753208d6bb71cdcc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Schema Behavior&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;スキーマの動作&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="40c7c9f3b36bddd1c3522857cac48d0c8a44ad4a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Schemas&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Schemas&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0da0dc70d7e72681246419f048be48242fe54ad3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Scripts and Distributed File Systems&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;スクリプトと分散ファイルシステム&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6785c3fc935f096a149904bca0e95418c0d70050" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Self Joins&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;自己結合&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="345db123796e88e27a2f8e6f980928a20fdae6ba" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Shortcuts for Debugging Operators&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;デバッグオペレーターのショートカット&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="26753e7f15e3b320a073f459478d4f98ca647e16" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Simple Data Types&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;単純なデータ型&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="72c3243c9f6733316014648eb5f6af2bfc09371b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Simple Types&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;単純型&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f71edba915a49b7c254c1024aa580e42777e3d5d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Spark Local Mode&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Sparkローカルモード&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d7d03ecf4477cb1d33b4216cf566dd7c06866de3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Spark Local Mode&lt;/strong&gt; - To run Pig in spark local mode. It is similar to local mode, except internally Pig will invoke spark runtime engine. Specify Spark local mode using the -x flag (pig -x spark_local).</source>
          <target state="translated">&lt;strong&gt;Sparkローカルモード-PigをSparkローカルモードで&lt;/strong&gt;実行します。内部的にPigがSparkランタイムエンジンを呼び出すことを除いて、ローカルモードと同様です。-xフラグを使用してSparkローカルモードを指定します（pig -x spark_local）。</target>
        </trans-unit>
        <trans-unit id="827c72ceb68dc284becb267fe90177968ea47f0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Spark Mode&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;スパークモード&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b3ca88f4b6e29949d2bb9f42899b24d463c5103" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Spark Mode&lt;/strong&gt; - To run Pig in Spark mode, you need access to a Spark, Yarn or Mesos cluster and HDFS installation. Specify Spark mode using the -x flag (-x spark). In Spark execution mode, it is necessary to set env::SPARK_MASTER to an appropriate value (local - local mode, yarn-client - yarn-client mode, mesos://host:port - spark on mesos or spark://host:port - spark cluster. For more information refer to spark documentation on Master URLs, &lt;em&gt;yarn-cluster mode is currently not supported&lt;/em&gt;). Pig scripts run on Spark can take advantage of the &lt;a href=&quot;http://spark.apache.org/docs/latest/job-scheduling.html#dynamic-resource-allocation&quot;&gt;dynamic allocation&lt;/a&gt; feature. The feature can be enabled by simply enabling &lt;em&gt;spark.dynamicAllocation.enabled&lt;/em&gt;. Refer to spark &lt;a href=&quot;http://spark.apache.org/docs/latest/configuration.html#dynamic-allocation&quot;&gt;configuration&lt;/a&gt; for additional configuration details. In general all properties in the pig script prefixed with &lt;em&gt;spark.&lt;/em&gt; are copied to the Spark Application Configuration. Please note that Yarn auxillary service need to be enabled on Spark for this to work. See Spark documentation for additional details.</source>
          <target state="translated">&lt;strong&gt;Sparkモード&lt;/strong&gt; -PigをSparkモードで実行するには、Spark、Yarn、またはMesosクラスターとHDFSインストールにアクセスする必要があります。 -xフラグ（-x spark）を使用してSparkモードを指定します。 Spark実行モードでは、env :: SPARK_MASTERを適切な値に設定する必要があります（ローカル-ローカルモード、yarn-client-ヤーンクライアントモード、mesos：// host：port-mesosまたはspark：// hostのスパーク：port-spark cluster。詳細については、マスターURLのsparkドキュメントを参照してください&lt;em&gt;。yarn-clusterモードは現在サポートされていません&lt;/em&gt;）。 Sparkで実行されるPigスクリプトは、&lt;a href=&quot;http://spark.apache.org/docs/latest/job-scheduling.html#dynamic-resource-allocation&quot;&gt;動的割り当て&lt;/a&gt;機能を利用できます。この機能を有効にするには、単に&lt;em&gt;spark.dynamicAllocation.enabledを&lt;/em&gt;有効にします。スパーク&lt;a href=&quot;http://spark.apache.org/docs/latest/configuration.html#dynamic-allocation&quot;&gt;構成を&lt;/a&gt;参照してください追加の構成の詳細については。一般に、先頭に&lt;em&gt;sparkが&lt;/em&gt;付いたpigスクリプトのすべてのプロパティ&lt;em&gt;。&lt;/em&gt;Sparkアプリケーション構成にコピーされます。これを機能させるには、Sparkで糸補助サービスを有効にする必要があることに注意してください。詳細については、Sparkのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c9ccc9581e987fbee69af5e74b768a02cef55e73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Spark Mode&lt;/strong&gt; - To run Pig in Spark mode, you need access to a Spark, Yarn or Mesos cluster and HDFS installation. Specify Spark mode using the -x flag (-x spark). In Spark execution mode, it is necessary to set env::SPARK_MASTER to an appropriate value (local - local mode, yarn-client - yarn-client mode, mesos://host:port - spark on mesos or spark://host:port - spark cluster. For more information refer to spark documentation on Master URLs, &lt;em&gt;yarn-cluster mode is currently not supported&lt;/em&gt;). Pig scripts run on Spark can take advantage of the &lt;a href=&quot;https://spark.apache.org/docs/latest/job-scheduling.html#dynamic-resource-allocation&quot;&gt;dynamic allocation&lt;/a&gt; feature. The feature can be enabled by simply enabling &lt;em&gt;spark.dynamicAllocation.enabled&lt;/em&gt;. Refer to spark &lt;a href=&quot;https://spark.apache.org/docs/latest/configuration.html#dynamic-allocation&quot;&gt;configuration&lt;/a&gt; for additional configuration details. In general all properties in the pig script prefixed with &lt;em&gt;spark.&lt;/em&gt; are copied to the Spark Application Configuration. Please note that Yarn auxillary service need to be enabled on Spark for this to work. See Spark documentation for additional details.</source>
          <target state="translated">&lt;strong&gt;Sparkモード&lt;/strong&gt;-PigをSparkモードで実行するには、Spark、Yarn、またはMesosクラスターとHDFSインストールにアクセスする必要があります。 -xフラグ（-x spark）を使用してSparkモードを指定します。 Spark実行モードでは、env :: SPARK_MASTERを適切な値に設定する必要があります（ローカル-ローカルモード、yarn-client-yarn-clientモード、mesos：// host：port-spark on mesosまたはspark：// host ：port-sparkクラスター。詳細については、マスターURLのsparkドキュメントを参照してください。&lt;em&gt;現在&lt;/em&gt;、&lt;em&gt;yarn-clusterモードはサポートされていません&lt;/em&gt;）。 Sparkで実行されるPigスクリプトは、&lt;a href=&quot;https://spark.apache.org/docs/latest/job-scheduling.html#dynamic-resource-allocation&quot;&gt;動的割り当て&lt;/a&gt;機能を利用できます。この機能は、&lt;em&gt;spark.dynamicAllocation.enabledを&lt;/em&gt;有効にするだけで有効にでき&lt;em&gt;ます&lt;/em&gt;。 Spark&lt;a href=&quot;https://spark.apache.org/docs/latest/configuration.html#dynamic-allocation&quot;&gt;構成を&lt;/a&gt;参照してください追加の構成の詳細については。一般に、&lt;em&gt;sparkで&lt;/em&gt;始まるpigスクリプトのすべてのプロパティ&lt;em&gt;。&lt;/em&gt;Sparkアプリケーション構成にコピーされます。これを機能させるには、SparkでYarn補助サービスを有効にする必要があることに注意してください。詳細については、Sparkのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="c8f01b3481595886c0396e8cd5a35875048c8bd9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Specialized Join Optimizations&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;特殊な結合の最適化&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c3ecb950c0d80d33d45f0509799549cd474aeb0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;String Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;文字列の例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="57552505bbaf1203868ac7ee94a0bc41f69133fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Syntax&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Syntax&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="47339e1b34675340d6e331474ca2045939e2603d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tez Local Mode&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Tezローカルモード&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dbf40aa5c34af4001d58b8077d25952a2aa6c1c5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tez Local Mode&lt;/strong&gt; - To run Pig in tez local mode. It is similar to local mode, except internally Pig will invoke tez runtime engine. Specify Tez local mode using the -x flag (pig -x tez_local).</source>
          <target state="translated">&lt;strong&gt;Tezローカルモード-Pigをtezローカルモードで&lt;/strong&gt;実行します。内部的にPigがtezランタイムエンジンを呼び出すことを除いて、ローカルモードと同様です。-xフラグを使用してTezローカルモードを指定します（pig -x tez_local）。</target>
        </trans-unit>
        <trans-unit id="deedb084c8b1c54ca293842df2f7429b02af87bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tez Mode&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Tezモード&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4dc42d4e8d987c38d04e4cde02a1ff3d700053af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tez Mode&lt;/strong&gt; - To run Pig in Tez mode, you need access to a Hadoop cluster and HDFS installation. Specify Tez mode using the -x flag (-x tez).</source>
          <target state="translated">&lt;strong&gt;Tezモード&lt;/strong&gt; -PigをTezモードで実行するには、HadoopクラスターとHDFSインストールにアクセスする必要があります。-xフラグ（-x tez）を使用してTezモードを指定します。</target>
        </trans-unit>
        <trans-unit id="2d52f13cea96c3b5a3d0d430c90cf5210a996c3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Transitive&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Transitive&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="121030792e9d4344d7373728507fb717d6efb51d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tuple Construction&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;タプルの構築&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="64658a75f44cafa6b41cf819b573f71bb770279b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tuple Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;タプルの例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="93bb70e447d639b8255c29ca23df9c59d81e254f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tuple/Bag Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;タプル/バッグの例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b263a234ef49fbec4f0bddc1fdaa96ca3dc0f00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Turning On Off&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;オフにする&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="769d187f6703a2cf987ebb9df7aeab0b87dc8c65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UDF&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;UDF&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="038fc17b15b3d49aec4624b9b504a8b20442d98a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unions&lt;/strong&gt; In Avro, you can define an object that may be one of several different types (including complex types such as records). In Pig, you cannot.</source>
          <target state="translated">&lt;strong&gt;ユニオン&lt;/strong&gt; Avroでは、いくつかの異なるタイプ（レコードなどの複合タイプを含む）の1つであるオブジェクトを定義できます。豚ではできません。</target>
        </trans-unit>
        <trans-unit id="99c2ef3c7fc7318afccb414ba88eed5ac9c194bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unknown Schema Handling&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;不明なスキーマ処理&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2deb448968a26d13e858672fad6a7f4acb658a58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You Set the Number of Reducers&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;あなたはレデューサーの数を設定します&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7eb894f72d04a4d3d1210581d0fd36b6ec2c3f1a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;from / to&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;からの&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c9c017cc3d527394e40fd3471b360b54105339b7" translate="yes" xml:space="preserve">
          <source>==, !=</source>
          <target state="translated">==、！=</target>
        </trans-unit>
        <trans-unit id="900f8b38b05989605df65663e5e3869aab5eb789" translate="yes" xml:space="preserve">
          <source>? :</source>
          <target state="translated">？：</target>
        </trans-unit>
        <trans-unit id="bd778007b41ac3d4d1bd76259c9a22ad43debe17" translate="yes" xml:space="preserve">
          <source>? : bincond</source>
          <target state="translated">？：bincond</target>
        </trans-unit>
        <trans-unit id="a164c212592b671696739f9fedc2ac63fbd663ae" translate="yes" xml:space="preserve">
          <source>@OutputSchema annotation - Defines the schema for a UDF in a format that Pig understands.</source>
          <target state="translated">@OutputSchemaアノテーション-Pigが理解できる形式でUDFのスキーマを定義します。</target>
        </trans-unit>
        <trans-unit id="f5c7976a098cb2c4f489bd53fab8063063d3c1c0" translate="yes" xml:space="preserve">
          <source>@OutputSchemaFunction annotation - Defines the name of a function which will return the schema at runtime according to the input schema.</source>
          <target state="translated">@OutputSchemaFunctionアノテーション-入力スキーマに従って実行時にスキーマを返す関数の名前を定義します。</target>
        </trans-unit>
        <trans-unit id="0acdc81cb7d03987748d5844dd817c0af23a4c35" translate="yes" xml:space="preserve">
          <source>A DUMP statement to view results or a STORE statement to save the results.</source>
          <target state="translated">結果を表示するためのDUMP文、または結果を保存するためのSTORE文。</target>
        </trans-unit>
        <trans-unit id="fc10a1c8854f199631d091c6ae7f90fa493ee487" translate="yes" xml:space="preserve">
          <source>A FLATTEN example on a map type. Here we load an integer and map (of integer values) into A. Then m gets flattened, and finally we are filtering the result to only include tuples where the value among the un-nested map entries was 5.</source>
          <target state="translated">マップ型のFLATTENの例。ここでは、整数と(整数値の)マップをAにロードします。</target>
        </trans-unit>
        <trans-unit id="176a8a86c5ab3106e52877b646afc861c4687569" translate="yes" xml:space="preserve">
          <source>A JSON string specifying the Avro schema for the input. You may specify an explicit schema when storing data or when loading data. When you manually provide a schema, Pig will use the provided schema for serialization and deserialization. This means that you can provide an explicit schema when saving data to simplify the output (for example by removing nullable unions), or rename fields. This also means that you can provide an explicit schema when reading data to only read a subset of the fields in each record.</source>
          <target state="translated">入力の Avro スキーマを指定する JSON 文字列。データを保存するときやデータをロードするときに、明示的なスキーマを指定することができます。手動でスキーマを指定すると、Pig はシリアライゼーションとデシリアライゼーションに指定されたスキーマを使用します。つまり、データを保存する際に明示的なスキーマを指定することで、出力を単純化したり(例えばヌル可能な結合を削除したり)、フィールドの名前を変更したりすることができます。また、データを読み込む際に明示的なスキーマを指定することで、各レコード内のフィールドのサブセットのみを読み込むことができます。</target>
        </trans-unit>
        <trans-unit id="e332ef5c3c73256cd007b96814120edf0e03417d" translate="yes" xml:space="preserve">
          <source>A LOAD statement to read data from the file system.</source>
          <target state="translated">ファイルシステムからデータを読み込むLOAD文。</target>
        </trans-unit>
        <trans-unit id="cf4263ec5274d2ad3102cb19162b06b62ceca905" translate="yes" xml:space="preserve">
          <source>A Pig relation is a bag of tuples. A Pig relation is similar to a table in a relational database, where the tuples in the bag correspond to the rows in a table. Unlike a relational table, however, Pig relations don't require that every tuple contain the same number of fields or that the fields in the same position (column) have the same type.</source>
          <target state="translated">Pigリレーションはタプルの袋です。Pigリレーションはリレーショナルデータベースのテーブルに似ていて、袋の中のタプルがテーブルの行に対応しています。しかし、リレーショナルテーブルとは異なり、Pigリレーションはすべてのタプルが同じ数のフィールドを含んでいることや、同じ位置(カラム)にあるフィールドが同じ型を持っていることを要求しません。</target>
        </trans-unit>
        <trans-unit id="88ccfbb3e4e52feb93893efc6371ff86017c0c69" translate="yes" xml:space="preserve">
          <source>A bag can have duplicate tuples.</source>
          <target state="translated">バッグには重複したタプルを持つことができます。</target>
        </trans-unit>
        <trans-unit id="f1f16eb0492c370e5370429596edac14ed6cd1fe" translate="yes" xml:space="preserve">
          <source>A bag can have tuples with differing numbers of fields. However, if Pig tries to access a field that does not exist, a null value is substituted.</source>
          <target state="translated">バッグは異なる数のフィールドを持つタプルを持つことができます。しかし、Pigが存在しないフィールドにアクセスしようとすると、NULL値が代入されます。</target>
        </trans-unit>
        <trans-unit id="6f8521244c87cb3af718188d8f6a098268049836" translate="yes" xml:space="preserve">
          <source>A bag can have tuples with fields that have different data types. However, for Pig to effectively process bags, the schemas of the tuples within those bags should be the same. For example, if half of the tuples include chararray fields and while the other half include float fields, only half of the tuples will participate in any kind of computation because the chararray fields will be converted to null.</source>
          <target state="translated">バッグは異なるデータ型を持つフィールドを持つタプルを持つことができます。しかし、Pig がバッグを効果的に処理するためには、バッグ内のタプルのスキーマは同じでなければなりません。例えば、タプルの半分がchararrayフィールドを含み、残りの半分がfloatフィールドを含む場合、chararrayフィールドはnullに変換されるので、タプルの半分だけが何らかの計算に参加することになります。</target>
        </trans-unit>
        <trans-unit id="78a789cd025135ec18d7229a62fcfd40e62e517e" translate="yes" xml:space="preserve">
          <source>A bag is a collection of tuples</source>
          <target state="translated">バッグはタプルの集合体です。</target>
        </trans-unit>
        <trans-unit id="9b3ff876ca8f1ec6dc0eba29ed972e95f11919a7" translate="yes" xml:space="preserve">
          <source>A bag is a collection of tuples.</source>
          <target state="translated">バッグはタプルの集合体です。</target>
        </trans-unit>
        <trans-unit id="c3015eec6d30d7cec33a4f2bdf4ba3f4a2a4bfaf" translate="yes" xml:space="preserve">
          <source>A bag of arbitrary values. They will each be cast to chararray if they are not already.</source>
          <target state="translated">任意の値の袋。これらの値は、まだ chararray にキャストされていない場合は、それぞれ chararray にキャストされます。</target>
        </trans-unit>
        <trans-unit id="fc5a5e7e8c2484e2d91d19bdb3591f22b69c49b0" translate="yes" xml:space="preserve">
          <source>A boolean expression could look like this:</source>
          <target state="translated">ブール型の式は次のようになります。</target>
        </trans-unit>
        <trans-unit id="f2c611f29733d338bcda486238e8a7596d15b727" translate="yes" xml:space="preserve">
          <source>A boolean expression.</source>
          <target state="translated">ブーリアン式。</target>
        </trans-unit>
        <trans-unit id="357c708ad8cda5f307fbd1428a25ea6cad9cbbcd" translate="yes" xml:space="preserve">
          <source>A boolean flag to indicate whether to include or exclude matching columns</source>
          <target state="translated">マッチする列を含めるか除外するかを示すブール値フラグ。</target>
        </trans-unit>
        <trans-unit id="4f78aa61153d723da36c98c77496c1d4385825fd" translate="yes" xml:space="preserve">
          <source>A challenge of running a large shared system is to make sure system resources are used efficiently. One aspect of this challenge is detecting runaway processes that are no longer making progress. Pig uses a heartbeat mechanism for this purpose. If any of the tasks stops sending a heartbeat, the system assumes that it is dead and kills it.</source>
          <target state="translated">大規模な共有システムを運用する上での課題は、システムリソースを効率的に使用できるようにすることです。この課題の一つの側面は、もはや進歩していない暴走プロセスを検出することです。Pig はこの目的のためにハートビートメカニズムを使用しています。いずれかのタスクがハートビートの送信を停止すると、システムはそのタスクが死んだものとみなしてそのタスクをキルします。</target>
        </trans-unit>
        <trans-unit id="2bc8a66aa62c2d099984eb270116071e45cee648" translate="yes" xml:space="preserve">
          <source>A chararray value to place between elements of the bag; defaults to underscore '_'.</source>
          <target state="translated">バッグの要素間に配置する文字列の値;デフォルトはアンダースコア '_'。</target>
        </trans-unit>
        <trans-unit id="2b89fe3b97d713d8051572f342459b450aeaac4f" translate="yes" xml:space="preserve">
          <source>A column transformation function such as ABS can be applied to an algebraic function SUM.</source>
          <target state="translated">ABSのような列変換関数は、代数関数SUMに適用することができます。</target>
        </trans-unit>
        <trans-unit id="1a6030e5cfc250824dc5f0603ae6aafed7739982" translate="yes" xml:space="preserve">
          <source>A comma-separated list of &quot;columns&quot; to read data from to write data to. Each of these columns can be considered one of three different types:</source>
          <target state="translated">カンマで区切られた「カラム」のリストで、データを読み込んでデータを書き込むことができます。これらのカラムのそれぞれは、3つの異なるタイプのうちの1つと考えることができます。</target>
        </trans-unit>
        <trans-unit id="3b1e2b3b81bc48b5c62a2a45324df879808f9ae0" translate="yes" xml:space="preserve">
          <source>A comma-separated list of input directories for the job.</source>
          <target state="translated">ジョブの入力ディレクトリをカンマで区切ったリスト。</target>
        </trans-unit>
        <trans-unit id="f5d413a422b9f1eaeb611b6ddf5eeb8c2856bdde" translate="yes" xml:space="preserve">
          <source>A comma-separated list of output directories in the map phase of the job.</source>
          <target state="translated">ジョブのマップフェーズの出力ディレクトリのコンマ区切りリスト。</target>
        </trans-unit>
        <trans-unit id="61793d8bd9e33c28cc217bbc7c2cb6a7eea07441" translate="yes" xml:space="preserve">
          <source>A comma-separated list of output directories in the reduce phase of the job.</source>
          <target state="translated">ジョブのリデュースフェーズでの出力ディレクトリのコンマ区切りリスト。</target>
        </trans-unit>
        <trans-unit id="0000e651d4527588b9f8db3518abee606b9a87dc" translate="yes" xml:space="preserve">
          <source>A comma-separated list of parent job ids.</source>
          <target state="translated">親ジョブIDのカンマ区切りリスト。</target>
        </trans-unit>
        <trans-unit id="f385c6438eb9f52462767534cd6f16e64c841cab" translate="yes" xml:space="preserve">
          <source>A command enclosed in back ticks.</source>
          <target state="translated">後ろのカチカチに囲まれたコマンド。</target>
        </trans-unit>
        <trans-unit id="805ad49a4f19334a85355ad5ba2ae54de725bdd4" translate="yes" xml:space="preserve">
          <source>A command, including the arguments, enclosed in back tics (where a command is anything that can be executed).</source>
          <target state="translated">バックティックで囲まれた、引数を含むコマンド(ここでは、コマンドは実行可能なものであれば何でもいい)。</target>
        </trans-unit>
        <trans-unit id="fa07b9464335d65a750e09b372bec9feda2d1916" translate="yes" xml:space="preserve">
          <source>A common error when using the star expression is shown below. In this example, the programmer really wants to count the number of elements in the bag in the second field: COUNT($1).</source>
          <target state="translated">スター式を使用するときによくあるエラーを以下に示します。この例では、プログラマは本当に2番目のフィールドにある袋の中の要素の数を数えたいと思っています。COUNT($1)です。</target>
        </trans-unit>
        <trans-unit id="00bcc083976f535ab664d9214c52cc951dbaaaa2" translate="yes" xml:space="preserve">
          <source>A complete embedded example is shown below.</source>
          <target state="translated">完全な組み込み例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="efb82d6054ee066b9551951d6694c109106e25b9" translate="yes" xml:space="preserve">
          <source>A constant in this form creates a bag.</source>
          <target state="translated">この形の定数がバッグを作ります。</target>
        </trans-unit>
        <trans-unit id="7d497ad618d11858535b2beb1fc2e6cd06f73c25" translate="yes" xml:space="preserve">
          <source>A constant in this form creates a map.</source>
          <target state="translated">この形式の定数はマップを作成します。</target>
        </trans-unit>
        <trans-unit id="cccd14b67f74f165bd674879862dbf10b7ad6938" translate="yes" xml:space="preserve">
          <source>A constant in this form creates a tuple.</source>
          <target state="translated">この形式の定数はタプルを作成します。</target>
        </trans-unit>
        <trans-unit id="75d9df6342dbade45a131080b88fd6819b3f9cc2" translate="yes" xml:space="preserve">
          <source>A datetime object.</source>
          <target state="translated">datetime オブジェクト。</target>
        </trans-unit>
        <trans-unit id="0ae14d48b464ce700e4a965788d019e60256c87d" translate="yes" xml:space="preserve">
          <source>A few examples are shown here:</source>
          <target state="translated">ここでは、いくつかの例を紹介します。</target>
        </trans-unit>
        <trans-unit id="123892d269860ca6277fac81e102b37a4f829230" translate="yes" xml:space="preserve">
          <source>A field can be explicitly cast. Once cast, the field remains that type (it is not automatically cast back). In this example $0 is explicitly cast to int.</source>
          <target state="translated">フィールドは明示的にキャストすることができます。一度キャストされると、フィールドはその型のままになります (自動的にキャストされることはありません)。この例では、$0 は明示的に int にキャストされます。</target>
        </trans-unit>
        <trans-unit id="9fb8f35ba0661fba10d6dea09d707281921f8995" translate="yes" xml:space="preserve">
          <source>A field expression.</source>
          <target state="translated">フィールド式。</target>
        </trans-unit>
        <trans-unit id="aa706d0814dbebff53da84a0b6f4417c372e46eb" translate="yes" xml:space="preserve">
          <source>A field in the relation. The field must be a simple type.</source>
          <target state="translated">リレーション内のフィールド。フィールドは単純な型でなければなりません。</target>
        </trans-unit>
        <trans-unit id="fc6008145aef0c2d224ac6e17ef87405f8e0aae8" translate="yes" xml:space="preserve">
          <source>A field is a piece of data.</source>
          <target state="translated">フィールドはデータの一部です。</target>
        </trans-unit>
        <trans-unit id="9fc3f28e237313cf02898f477a2ffb09e078f79e" translate="yes" xml:space="preserve">
          <source>A kerberos keytab file is essentially a Kerberos specific form of the password of a user.</source>
          <target state="translated">kerberos keytab ファイルは、基本的にはユーザのパスワードの Kerberos 固有の形式です。</target>
        </trans-unit>
        <trans-unit id="e50ea98d727e7931c82262bdd217d56cbe1687cc" translate="yes" xml:space="preserve">
          <source>A list of Pig features used in the job.</source>
          <target state="translated">ジョブで使用されているPigの機能の一覧です。</target>
        </trans-unit>
        <trans-unit id="e74c6ddf175f65dbe2e4bdca1ce68dadc7beeb50" translate="yes" xml:space="preserve">
          <source>A list of Pig features used in the script.</source>
          <target state="translated">スクリプトで使われている Pig の機能のリスト。</target>
        </trans-unit>
        <trans-unit id="7a41d00d81bdc1022b0ad1c528ff69e5cead1c42" translate="yes" xml:space="preserve">
          <source>A list of qualified HBase columns to read data from or store data to. The column family name and column qualifier are seperated by a colon (:). Only the columns used in the Pig script need to be specified. Columns are specified in one of three different ways as described below.</source>
          <target state="translated">データを読み込んだり、データを保存したりするための HBase の修飾カラムのリストです。カラムファミリー名とカラム修飾子はコロン (:)で区切られています。Pig スクリプトで使用するカラムのみを指定する必要があります。カラムは、以下に説明する 3 つの異なる方法のいずれかで指定します。</target>
        </trans-unit>
        <trans-unit id="7e902cecd9fe37236e0a773e727afcda3c69c7c8" translate="yes" xml:space="preserve">
          <source>A macro can be expanded inline using the macro expansion syntax. Note the following:</source>
          <target state="translated">マクロは、マクロ展開構文を使用してインラインで展開することができます。以下の点に注意してください。</target>
        </trans-unit>
        <trans-unit id="26ec494aec36a86f5f8adce5c0fc7d143ece7d7d" translate="yes" xml:space="preserve">
          <source>A macro can be imported from another Pig script (see &lt;a href=&quot;#import-macros&quot;&gt;IMPORT (macros)&lt;/a&gt;). Splitting your macros from your main Pig script is useful for making reusable code.</source>
          <target state="translated">マクロは別のPigスクリプトからインポートできます（&lt;a href=&quot;#import-macros&quot;&gt;IMPORT（マクロ）を&lt;/a&gt;参照）。メインのPigスクリプトからマクロを分割すると、再利用可能なコードを作成するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="b57cbfcc1c2582caa6daa9ade7e0d13404ec7d35" translate="yes" xml:space="preserve">
          <source>A macro definition can appear anywhere in a Pig script as long as it appears prior to the first use. A macro definition can include references to other macros as long as the referenced macros are defined prior to the macro definition. Recursive references are not allowed.</source>
          <target state="translated">マクロ定義は、最初に使用される前に現れる限り、Pig スクリプト内のどこにでも現れることができます。マクロ定義は、参照されるマクロがマクロ定義の前に定義されている限り、他のマクロへの参照を含むことができます。再帰的な参照は許可されていません。</target>
        </trans-unit>
        <trans-unit id="61ee17df67479872c2ed93a2dbdbd9d5a6ddcab0" translate="yes" xml:space="preserve">
          <source>A map is a set of key value pairs.</source>
          <target state="translated">マップは、キー値のペアの集合です。</target>
        </trans-unit>
        <trans-unit id="64c4816cd933b8f5cb3f45e8d353c336cba9b835" translate="yes" xml:space="preserve">
          <source>A map is a set of key/value pairs.</source>
          <target state="translated">マップは、キーと値のペアの集合です。</target>
        </trans-unit>
        <trans-unit id="7258ee67ce78101192682e230e31fa604d28ae22" translate="yes" xml:space="preserve">
          <source>A map key must be a chararray; a map value can be any data type</source>
          <target state="translated">マップキーは文字列でなければなりません。</target>
        </trans-unit>
        <trans-unit id="ea91ea858a83135a8f6c28648c84329d418aab67" translate="yes" xml:space="preserve">
          <source>A mathematical expression can be applied to one or more algebraic functions.</source>
          <target state="translated">1つ以上の代数関数に数式を適用することができます。</target>
        </trans-unit>
        <trans-unit id="78eea890b003b34b759f5a34593b5a6f2500ee5a" translate="yes" xml:space="preserve">
          <source>A more general version of run allows to run one or more pipelines concurrently. In this case, a list of PigStats results is returned &amp;ndash; one for each pipeline run. The example in the previous section shows how to make use of this call.</source>
          <target state="translated">runのより一般的なバージョンでは、1つ以上のパイプラインを同時に実行できます。この場合、PigStats結果のリストが返されます（パイプライン実行ごとに1つ）。前のセクションの例は、この呼び出しを使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="e295e6d6a3ffbde864687ddea682e20bf2956303" translate="yes" xml:space="preserve">
          <source>A new directory named pigtmp is created. This directory contains the &lt;a href=&quot;#pig-tutorial-files&quot;&gt;Pig Tutorial Files&lt;/a&gt;. These files work with Hadoop 0.20.2 and include everything you need to run &lt;a href=&quot;#pig-script-1&quot;&gt;Pig Script 1&lt;/a&gt; and &lt;a href=&quot;#pig-script-2&quot;&gt;Pig Script 2&lt;/a&gt;.</source>
          <target state="translated">pigtmpという名前の新しいディレクトリが作成されます。このディレクトリには、&lt;a href=&quot;#pig-tutorial-files&quot;&gt;Pigチュートリアルファイル&lt;/a&gt;が含まれています。これらのファイルはHadoop 0.20.2で動作し、&lt;a href=&quot;#pig-script-1&quot;&gt;Pig Script 1&lt;/a&gt;および&lt;a href=&quot;#pig-script-2&quot;&gt;Pig Script 2&lt;/a&gt;を実行するために必要なすべてのものが含まれています。</target>
        </trans-unit>
        <trans-unit id="1ec79c8f12d7cfa8a4c0dbb7e5b1a9c872182a01" translate="yes" xml:space="preserve">
          <source>A note on error handling. The ABS class covers the case of the bytearray which means the data has not been converted yet to its actual type. This is why a null value is returned when NumberFormatException is encountered. However, the IntAbs function is only called if the data is already of type Integer which means it has already been converted to the real type and bad format has been dealt with. This is why an exception is thrown if the input can't be cast to Integer.</source>
          <target state="translated">エラー処理についての注意点。ABSクラスは、データがまだ実際の型に変換されていないことを意味するbytearrayの場合をカバーしています。このため、NumberFormatExceptionが発生した場合にはNULL値が返されます。ただし、IntAbs関数が呼び出されるのは、データが既にInteger型である場合のみです。これが、入力がInteger型にキャストできない場合に例外が発生する理由です。</target>
        </trans-unit>
        <trans-unit id="d03fc0d0f769947694fc2093551afb4b86056066" translate="yes" xml:space="preserve">
          <source>A number of user frameworks do automated generation of Pig Latin.</source>
          <target state="translated">多くのユーザーフレームワークが Pig Latin の自動生成を行っています。</target>
        </trans-unit>
        <trans-unit id="a6e2301f77615d08b4da72bd79f32e7a3180c1c6" translate="yes" xml:space="preserve">
          <source>A parameter file will contain one line per parameter. Empty lines are allowed. Perl-style (#) comment lines are also allowed. Comments must take a full line and # must be the first character on the line. Each parameter line will be of the form: param_name = param_value. White spaces around = are allowed but are optional.</source>
          <target state="translated">パラメータファイルには、パラメータごとに1行が含まれます。空行も可能です。Perl 形式の (#)コメント行も許可されています。コメントは全行でなければならず、#はその行の最初の文字でなければなりません。各パラメータの行は次のような形式になります:param_name=param_value.param_name=param_valueの周りにホワイトスペースを入れても構いませんが、オプションです。</target>
        </trans-unit>
        <trans-unit id="9a80c66616e2e3d13f4f497b2278fca443b5377a" translate="yes" xml:space="preserve">
          <source>A parameter value can take two forms:</source>
          <target state="translated">パラメータ値には2つの形式があります。</target>
        </trans-unit>
        <trans-unit id="4cb6f167a7abc0d4b5a30f71078daf483e975dc6" translate="yes" xml:space="preserve">
          <source>A piece of data. A field can be any data type (including tuple and bag).</source>
          <target state="translated">データの一部。フィールドは任意のデータ型(タプルやバッグを含む)にすることができます。</target>
        </trans-unit>
        <trans-unit id="773df31dce963b022a5020f1fe3dbf0d199647d3" translate="yes" xml:space="preserve">
          <source>A pig script. The pig script must be the last element in the Pig command line.</source>
          <target state="translated">ピッグスクリプトです。ピグスクリプトは、Pig コマンドラインの最後の要素でなければなりません。</target>
        </trans-unit>
        <trans-unit id="e71379a6a039d724c1d8c024de32066cf65477b5" translate="yes" xml:space="preserve">
          <source>A prefix to pluck by or an regex pattern to pluck by</source>
          <target state="translated">pluck by を指定する接頭辞、または pluck by を指定する正規表現パターン</target>
        </trans-unit>
        <trans-unit id="5d1f61995d0f6b0ce09cf58ea2762ca7f9e00600" translate="yes" xml:space="preserve">
          <source>A registered script can contain multiple UDFs. UDFs can be static or instance methods, an instance of the enclosing class will be created as needed. Only methods for which a return schema is defined will be available in Pig.</source>
          <target state="translated">登録されたスクリプトには、複数のUDFを含めることができます。UDF は静的メソッドでもインスタンスメソッドでもよく、必要に応じて囲むクラスのインスタンスが作成されます。戻り値スキーマが定義されているメソッドのみが Pig で利用できます。</target>
        </trans-unit>
        <trans-unit id="d0908c688432cd2bb95c6f2a292b64c6e12e4032" translate="yes" xml:space="preserve">
          <source>A relation is a bag (more specifically, an outer bag).</source>
          <target state="translated">関係性とは、バッグ(より具体的には外袋)のことです。</target>
        </trans-unit>
        <trans-unit id="8a8b0e4e4d4aa24a006794196d25b13e7e321432" translate="yes" xml:space="preserve">
          <source>A schema using the AS keyword (see &lt;a href=&quot;#schemas&quot;&gt;Schemas&lt;/a&gt;).</source>
          <target state="translated">ASキーワードを使用した&lt;a href=&quot;#schemas&quot;&gt;スキーマ&lt;/a&gt;（Schemasを参照）。</target>
        </trans-unit>
        <trans-unit id="fb733569248750ef6b316dc0b2d77175e9afd541" translate="yes" xml:space="preserve">
          <source>A schema using the AS keyword, enclosed in parentheses (see &lt;a href=&quot;#schemas&quot;&gt;Schemas&lt;/a&gt;).</source>
          <target state="translated">括弧で囲まれたASキーワードを使用した&lt;a href=&quot;#schemas&quot;&gt;スキーマ&lt;/a&gt;（Schemasを参照）。</target>
        </trans-unit>
        <trans-unit id="16ab13290716636d04ae6a214e78385503fe56c4" translate="yes" xml:space="preserve">
          <source>A sequence of characters enclosed in single or double quotes. In this case the unquoted version of the value is used during substitution. Quotes within the value can be escaped with the backslash character ( \ ). Single word values that don't use special characters such as % or = don't have to be quoted.</source>
          <target state="translated">一重引用符または二重引用符で囲まれた文字列。この場合、置換時には引用符で囲まれていないバージョンの値が使用されます。値内の引用符は、バックスラッシュ文字()のような特殊文字を使用しない単一単語の値は、引用符で囲む必要はありません。</target>
        </trans-unit>
        <trans-unit id="6339def20ad688dbc7bf13779b1d0b02e4d45332" translate="yes" xml:space="preserve">
          <source>A series of &quot;transformation&quot; statements to process the data.</source>
          <target state="translated">データを処理するための一連の「変換」文。</target>
        </trans-unit>
        <trans-unit id="0c4ca1a84660a949e797751322cd717761766ea0" translate="yes" xml:space="preserve">
          <source>A set of key value pairs.</source>
          <target state="translated">キー値のペアのセット。</target>
        </trans-unit>
        <trans-unit id="3fabc69c75464c67bc0be9c6ee42ba3bf511f291" translate="yes" xml:space="preserve">
          <source>A simple JavaScript UDF (udf.js) is shown here.</source>
          <target state="translated">簡単なJavaScriptのUDF(udf.js)を示します。</target>
        </trans-unit>
        <trans-unit id="893bcf27c1bda8dc1237532d1016c3ca6ca31273" translate="yes" xml:space="preserve">
          <source>A single element enclosed in parens ( ) like (5) is not considered to be a tuple but rather an arithmetic operator.</source>
          <target state="translated">(5)のようにパレン()で囲まれた単一の要素は、タプルではなく算術演算子とみなされます。</target>
        </trans-unit>
        <trans-unit id="45e1bab3a48891e766dd4ee748ee1488f7b38530" translate="yes" xml:space="preserve">
          <source>A special case of the best fit approach is handling data without a schema specified. The type for this data is interpreted as bytearray. Since the type of the data is not known, there is no way to choose a best fit version. The only time a cast is performed is when the function table contains only a single entry. This works well to maintain backward compatibility.</source>
          <target state="translated">ベストフィットアプローチの特殊なケースは、スキーマが指定されていないデータを扱うことです。このデータの型はbytearrayとして解釈されます。データの型がわからないので、ベストフィットのバージョンを選択する方法はありません。キャストが実行されるのは、関数テーブルに単一のエントリしか含まれていない場合だけです。これは下位互換性を維持するためにうまく機能します。</target>
        </trans-unit>
        <trans-unit id="616cd130501bb5fbe2871164a72f110820800df4" translate="yes" xml:space="preserve">
          <source>A string expression could look like this, where a and b are both chararrays:</source>
          <target state="translated">文字列式は次のようになります。</target>
        </trans-unit>
        <trans-unit id="5f40dad9fe6a338932233afc916151bad711fa2f" translate="yes" xml:space="preserve">
          <source>A string that contains space-separated options (&quot;optionA valueA -optionB valueB -optionC valueC&quot;)</source>
          <target state="translated">スペースで区切られたオプシ ョ ンを含む文字列 (「optionA valueA -optionB valueB -optionC valueC」)。</target>
        </trans-unit>
        <trans-unit id="3ea25cfc46e65e38049a2267e71c9872c2fb297c" translate="yes" xml:space="preserve">
          <source>A string that contains space-separated options (&amp;lsquo;-optionA valueA -optionB valueB -optionC &amp;rsquo;)</source>
          <target state="translated">スペースで区切られたオプションを含む文字列（ '-optionA valueA -optionB valueB -optionC'）</target>
        </trans-unit>
        <trans-unit id="35f565f1db59ef2251de20669a5d2050311259a8" translate="yes" xml:space="preserve">
          <source>A string that contains space-separated options (&amp;lsquo;-optionA valueA -optionB valueB -optionC &amp;rsquo;). Current options are only applicable with STORE operation and not for LOAD.</source>
          <target state="translated">スペースで区切られたオプションを含む文字列（ '-optionA valueA -optionB valueB -optionC'）。現在のオプションはSTORE操作にのみ適用され、LOADには適用されません。</target>
        </trans-unit>
        <trans-unit id="1ea2f5a75b6ad1becc766903e2365acce6d41f1b" translate="yes" xml:space="preserve">
          <source>A string that contains space-separated options (&amp;lsquo;-optionA=valueA -optionB=valueB -optionC=valueC&amp;rsquo;)</source>
          <target state="translated">スペースで区切られたオプションを含む文字列（ '-optionA = valueA -optionB = valueB -optionC = valueC'）</target>
        </trans-unit>
        <trans-unit id="facce09053a818f2592ad9007001c4fd45de86e6" translate="yes" xml:space="preserve">
          <source>A string that contains space-separated options ('optionA optionB optionC')</source>
          <target state="translated">スペースで区切られたオプションを含む文字列 ('optionA optionB optionC')</target>
        </trans-unit>
        <trans-unit id="ae060f37ac2d2a0cc1a625c5fb7e8df41de2f7d0" translate="yes" xml:space="preserve">
          <source>A sub-use case of automated generation is conditional code generation. Different processing might be required based on whether this is weekday or a weekend.</source>
          <target state="translated">自動生成のサブユースケースとして、条件付きコード生成があります。これが平日なのか週末なのかによって、異なる処理が必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="a67a8fe703ac46c47cbd5b59a50e4f1763e716de" translate="yes" xml:space="preserve">
          <source>A tuple (see Tuple Schema).</source>
          <target state="translated">タプル(タプルスキーマを参照)。</target>
        </trans-unit>
        <trans-unit id="63c1f1d1e983ff5188b8f3db7772ebceddb8e07a" translate="yes" xml:space="preserve">
          <source>A tuple can contain fields of any data type</source>
          <target state="translated">タプルは任意のデータ型のフィールドを含むことができます。</target>
        </trans-unit>
        <trans-unit id="e4609821d15f67129c64cc09ba74d9fdbc210998" translate="yes" xml:space="preserve">
          <source>A tuple expression. This is the group key or key field. If the result of the tuple expression is a single field, the key will be the value of the first field rather than a tuple with one field. To group using multiple keys, enclose the keys in parentheses:</source>
          <target state="translated">タプル式。これはグループのキーまたはキーフィールドです。タプル式の結果が1つのフィールドである場合、キーは1つのフィールドを持つタプルではなく、最初のフィールドの値になります。複数のキーを使用してグループ化するには、キーを括弧で囲みます。</target>
        </trans-unit>
        <trans-unit id="d315affd83b8669f2ec958297a627223d6067676" translate="yes" xml:space="preserve">
          <source>A tuple is an ordered set of fields.</source>
          <target state="translated">タプルは、フィールドの順序付き集合です。</target>
        </trans-unit>
        <trans-unit id="98b20221c08a9f19dd0d020d5df9d9e408df795a" translate="yes" xml:space="preserve">
          <source>A tuple is enclosed in parentheses ( ).</source>
          <target state="translated">タプルは()で囲んでいます。</target>
        </trans-unit>
        <trans-unit id="3367986d800b6d8c7dd0d197a276a527451920b5" translate="yes" xml:space="preserve">
          <source>A tuple may be assigned to more than one relation.</source>
          <target state="translated">タプルは複数の関係に代入することができます。</target>
        </trans-unit>
        <trans-unit id="9075ce8ecf14e4ba1991fe6a511755e285ba1eff" translate="yes" xml:space="preserve">
          <source>A tuple may not be assigned to any relation.</source>
          <target state="translated">タプルは、どのような関係にも代入できません。</target>
        </trans-unit>
        <trans-unit id="edb3bf6931fd4997cd09560122dce45699a6a483" translate="yes" xml:space="preserve">
          <source>A tuple.</source>
          <target state="translated">タプルです。</target>
        </trans-unit>
        <trans-unit id="1407730f7daac97bc524c2ae142070d2aa103c1e" translate="yes" xml:space="preserve">
          <source>A typical test.py looks like this:</source>
          <target state="translated">典型的なtest.pyは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="b299a842bb72461f708b9f6f8cd8932a22cf444a" translate="yes" xml:space="preserve">
          <source>ABS</source>
          <target state="translated">ABS</target>
        </trans-unit>
        <trans-unit id="048e2664c9354295e54b349d5db850129a42e2fb" translate="yes" xml:space="preserve">
          <source>ABS(expression)</source>
          <target state="translated">ABS(expression)</target>
        </trans-unit>
        <trans-unit id="f47f10ba5ea545caa0a421972fc7fe1f9c136d03" translate="yes" xml:space="preserve">
          <source>ACOS</source>
          <target state="translated">ACOS</target>
        </trans-unit>
        <trans-unit id="a932d7782cdda17aad5092ecd4134612c9b80aeb" translate="yes" xml:space="preserve">
          <source>ACOS(expression)</source>
          <target state="translated">ACOS(expression)</target>
        </trans-unit>
        <trans-unit id="6b42874e3cd20771d93096ec5ce36307a1f2ba14" translate="yes" xml:space="preserve">
          <source>ALL</source>
          <target state="translated">ALL</target>
        </trans-unit>
        <trans-unit id="c2f934cb8cab6c1b3af0d4f2fdd824eabafb6bf4" translate="yes" xml:space="preserve">
          <source>AND</source>
          <target state="translated">AND</target>
        </trans-unit>
        <trans-unit id="b8931af0442bf3cfe6e5ca97340930a428af0354" translate="yes" xml:space="preserve">
          <source>API change</source>
          <target state="translated">API変更</target>
        </trans-unit>
        <trans-unit id="d00bb3f3b7c7b8815b6dcf237dd16aab9744eca8" translate="yes" xml:space="preserve">
          <source>AS</source>
          <target state="translated">AS</target>
        </trans-unit>
        <trans-unit id="eaffec78401451424652480dc382235348ce1b66" translate="yes" xml:space="preserve">
          <source>ASC</source>
          <target state="translated">ASC</target>
        </trans-unit>
        <trans-unit id="f19e5c9ef1b1dea16be6bcc72d835cd9e7afcc13" translate="yes" xml:space="preserve">
          <source>ASIN</source>
          <target state="translated">ASIN</target>
        </trans-unit>
        <trans-unit id="cb81e8dc30e50bf9341d5b3dc90da44d34f4b391" translate="yes" xml:space="preserve">
          <source>ASIN(expression)</source>
          <target state="translated">ASIN(expression)</target>
        </trans-unit>
        <trans-unit id="a3a5eee11eff02ce7d4eb6baf308a0819841a071" translate="yes" xml:space="preserve">
          <source>ASSERT</source>
          <target state="translated">ASSERT</target>
        </trans-unit>
        <trans-unit id="405a2f957e74aa844d8005a6ad35cdae3f66b5fe" translate="yes" xml:space="preserve">
          <source>ASSERT alias BY expression [, message];</source>
          <target state="translated">ASSERT alias BY expression [,message].</target>
        </trans-unit>
        <trans-unit id="0e3ba08070893718cd81942a382b31503c5b0d40" translate="yes" xml:space="preserve">
          <source>ATAN</source>
          <target state="translated">ATAN</target>
        </trans-unit>
        <trans-unit id="9f5502491ddc49820674d54a656fbc1059435282" translate="yes" xml:space="preserve">
          <source>ATAN(expression)</source>
          <target state="translated">ATAN(expression)</target>
        </trans-unit>
        <trans-unit id="1e822fce89fdee36d7476135922e827796665f61" translate="yes" xml:space="preserve">
          <source>AVG</source>
          <target state="translated">AVG</target>
        </trans-unit>
        <trans-unit id="cc413ad48ffd82510d01c5456e9960d443f127a5" translate="yes" xml:space="preserve">
          <source>AVG(expression)</source>
          <target state="translated">AVG(expression)</target>
        </trans-unit>
        <trans-unit id="e89f6bfc8c281a94aafa7d499a6c1938370c93fe" translate="yes" xml:space="preserve">
          <source>AVG, MIN, MAX, SUM, COUNT</source>
          <target state="translated">AVG、MIN、MAX、SUM、COUNT</target>
        </trans-unit>
        <trans-unit id="688b5ed88ded7fc740b351bceeeb3aa33c240741" translate="yes" xml:space="preserve">
          <source>About Auto-Ship</source>
          <target state="translated">オートシップについて</target>
        </trans-unit>
        <trans-unit id="33dddcfcf9e988deaabaf262ebe4517d04940220" translate="yes" xml:space="preserve">
          <source>About Cache</source>
          <target state="translated">キャッシュについて</target>
        </trans-unit>
        <trans-unit id="1764db62d3d61ccbef1be09dd8cc27bbc797bd16" translate="yes" xml:space="preserve">
          <source>About Data Guarantees</source>
          <target state="translated">データ保証について</target>
        </trans-unit>
        <trans-unit id="490856f088148164781b72756cd1bb8de8961230" translate="yes" xml:space="preserve">
          <source>About Input and Output for Streaming</source>
          <target state="translated">ストリーミングの入出力について</target>
        </trans-unit>
        <trans-unit id="c330f41d323af212e32c40208bd8dc127a6c335e" translate="yes" xml:space="preserve">
          <source>About Ship</source>
          <target state="translated">船について</target>
        </trans-unit>
        <trans-unit id="3a355c192bdd7f52b6199943ee1cf5204478f8e0" translate="yes" xml:space="preserve">
          <source>Acceptable values (case insensitive): very_low, low, normal, high, very_high</source>
          <target state="translated">受け入れ可能な値(大文字小文字を区別しない):very_low,low,normal,high,very_high</target>
        </trans-unit>
        <trans-unit id="80f3cc503e6f9433ac35d59bedfa29091958f4aa" translate="yes" xml:space="preserve">
          <source>Accepts no arguments or accepts some combination of strings, ints, longs, doubles, floats, or arrays with these same types</source>
          <target state="translated">引数を受け取らないか、文字列、int、long、double、float、またはこれらの同じ型の配列の組み合わせを受けとります。</target>
        </trans-unit>
        <trans-unit id="827ac1ff22b445d7dc284c306314ec9e45637678" translate="yes" xml:space="preserve">
          <source>Access input schema inside EvalFunc</source>
          <target state="translated">EvalFunc内部の入力スキーマにアクセスする</target>
        </trans-unit>
        <trans-unit id="a5c6285b2607f6eac866d9e76869ecd05921656a" translate="yes" xml:space="preserve">
          <source>Accessing Functions</source>
          <target state="translated">機能へのアクセス</target>
        </trans-unit>
        <trans-unit id="83fc869b8dfebec1ad8537cadadb36ddd351acfa" translate="yes" xml:space="preserve">
          <source>Accessing a field that does not exist in a tuple.</source>
          <target state="translated">タプルに存在しないフィールドにアクセスします。</target>
        </trans-unit>
        <trans-unit id="6f2a8ef4e2c793a0970ebbc1884144240edb8f43" translate="yes" xml:space="preserve">
          <source>Accumulator Interface</source>
          <target state="translated">アキュムレータインタフェース</target>
        </trans-unit>
        <trans-unit id="91000928d3d1a3f0bc3141391cf6779603b61e84" translate="yes" xml:space="preserve">
          <source>AccumuloStorage</source>
          <target state="translated">AccumuloStorage</target>
        </trans-unit>
        <trans-unit id="fd52c22fc515f9f913aeead4863415621666ea8d" translate="yes" xml:space="preserve">
          <source>AccumuloStorage has the functionality to store or fetch data from Accumulo. Its goal is to provide a simple, widely applicable table schema compatible with Pig's API. Each Tuple contains some subset of the columns stored within one row of the Accumulo table, which depends on the columns provided as an argument to the function. If '*' is provided, all columns in the table will be returned. The second argument provides control over a variety of options that can be used to change various properties.</source>
          <target state="translated">AccumuloStorageは、Accumuloからデータを保存したり、フェッチしたりする機能を持っています。その目的は、PigのAPIと互換性のあるシンプルで広く適用可能なテーブルスキーマを提供することです。各タプルには,Accumuloテーブルの1行内に格納されている列のサブセットが含まれており,関数の引数として提供される列に依存します。'*' が指定された場合、テーブル内のすべての列が返されます。2 番目の引数には、さまざまなプロパティを変更するために使用できるさまざまなオプションを制御します。</target>
        </trans-unit>
        <trans-unit id="e39526d6417e24040a60b14ef1dc27adfa4ca744" translate="yes" xml:space="preserve">
          <source>AccumuloStorage(['columns'[, 'options']])</source>
          <target state="translated">AccumuloStorage(['columns'[,'options']])</target>
        </trans-unit>
        <trans-unit id="026092b14552a1dba55662ba35fa94a02ba85151" translate="yes" xml:space="preserve">
          <source>Add /pig-n.n.n/bin to your path. Use export (bash,sh,ksh) or setenv (tcsh,csh). For example:</source>
          <target state="translated">パスに/pig-n.n.n/binを追加します。export (bash,sh,ksh)または setenv (tcsh,csh)を使用してください。例えば</target>
        </trans-unit>
        <trans-unit id="fff0e4e06b6e4951bebdf68e6f56d5c80c559956" translate="yes" xml:space="preserve">
          <source>Add a standalone utility that reads test configurations and generates a test report.</source>
          <target state="translated">テスト構成を読み取り、テスト レポートを生成するスタンドアロン ユーティリティを追加します。</target>
        </trans-unit>
        <trans-unit id="770af2537bc246afc476bc49910562b1ada227e6" translate="yes" xml:space="preserve">
          <source>Add pig.jar to your ClassPath: export CLASSPATH=$CLASSPATH:/path/to/pig.jar</source>
          <target state="translated">pig.jarをClassPathに追加します:export CLASSPATH=$CLASSPATH:/path/to/pig.jar</target>
        </trans-unit>
        <trans-unit id="d0e63264a1549aaad7af31b38b59ef58d2efa69a" translate="yes" xml:space="preserve">
          <source>Add the notion of workspaces for each test.</source>
          <target state="translated">テストごとにワークスペースの概念を追加します。</target>
        </trans-unit>
        <trans-unit id="ebc1acc42ec21ba0feacb30430a752b73b122400" translate="yes" xml:space="preserve">
          <source>AddDuration</source>
          <target state="translated">AddDuration</target>
        </trans-unit>
        <trans-unit id="99cd110176a3fb3ff89934ae9fb2463d2d8166f2" translate="yes" xml:space="preserve">
          <source>AddDuration(datetime, duration)</source>
          <target state="translated">AddDuration(datetime,duration)</target>
        </trans-unit>
        <trans-unit id="1719dd6213fee3044c8ed159419ae9c826fd25ac" translate="yes" xml:space="preserve">
          <source>AddForEach</source>
          <target state="translated">AddForEach</target>
        </trans-unit>
        <trans-unit id="ea3e4bece31a50648fa25abff664db81d479d76b" translate="yes" xml:space="preserve">
          <source>Additionally, JAR files stored in local file systems can be specified as a glob pattern using &amp;ldquo;*&amp;rdquo;. Pig will search for matching jars in the local file system, either the relative path (relative to your working directory) or the absolute path. Pig will pick up all JARs that match the glob.</source>
          <target state="translated">さらに、ローカルファイルシステムに格納されているJARファイルは、「*」を使用してグロブパターンとして指定できます。Pigは、ローカルファイルシステムで、相対パス（作業ディレクトリからの相対パス）または絶対パスのいずれかで一致するjarを検索します。Pigは、グロブに一致するすべてのJARを取得します。</target>
        </trans-unit>
        <trans-unit id="0e467e1a630374f0b9e445ee4d3f531f7ff90e1f" translate="yes" xml:space="preserve">
          <source>Additionally, if the schema option is specified, a &quot;.pig_headers&quot; file is created in the output directory. This file simply lists the delimited aliases. This is intended to make export to tools that can read files with header lines easier (just cat the header to your data).</source>
          <target state="translated">さらに、スキーマオプションが指定された場合、出力ディレクトリに &quot;.pig_headers&quot; ファイルが作成されます。このファイルは単に区切りのあるエイリアスをリストアップしています。これは、ヘッダ行を持つファイルを読むことができるツールへのエクスポートをより簡単にすることを意図しています(データにヘッダを付けるだけです)。</target>
        </trans-unit>
        <trans-unit id="56c4f9b02bc11176ae7a383c22de55f892454d8e" translate="yes" xml:space="preserve">
          <source>Additionally, suppose that you don't need the value of the field &quot;marketingPlans.&quot; (That's a good thing, because AvroStorage doesn't know how to translate that Avro schema to a Pig schema). To load only the fieds &quot;label&quot; and &quot;value&quot; into Pig, you can manually specify the schema passed to AvroStorage:</source>
          <target state="translated">さらに、フィールド &quot;marketingPlans.&quot; の値を必要としないとします。(これは良いことです。AvroStorageはAvroスキーマをPigスキーマに変換する方法を知らないからです)。fieds の &quot;label&quot; と &quot;value&quot; のみを Pig にロードするには、AvroStorage に渡されるスキーマを手動で指定します。</target>
        </trans-unit>
        <trans-unit id="b8be3d1264310c3b8c848d4b90d5206179a40cc4" translate="yes" xml:space="preserve">
          <source>Administration</source>
          <target state="translated">Administration</target>
        </trans-unit>
        <trans-unit id="0d7049ed333121f6ad65eac902c5a2d1cec948e8" translate="yes" xml:space="preserve">
          <source>Advanced Topics</source>
          <target state="translated">先進的なトピック</target>
        </trans-unit>
        <trans-unit id="3411e1274464dc23220433c0c18601550e837de3" translate="yes" xml:space="preserve">
          <source>After JOIN, COGROUP, CROSS, or FLATTEN operations, the field names have the orginial alias and the disambiguate operator ( :: ) prepended in the schema. The disambiguate operator is used to identify field names in case there is a ambiguity.</source>
          <target state="translated">JOIN、COGROUP、CROSS、またはFLATTEN操作の後、フィールド名には、スキーマ内で元のエイリアスと曖昧性除去演算子(::)が付加されます。disambiguate 演算子は、曖昧さがある場合にフィールド名を識別するために使用されます。</target>
        </trans-unit>
        <trans-unit id="c2212bb5b31f6c651e515ed01848b43575e405bf" translate="yes" xml:space="preserve">
          <source>After running native.jar's MapReduce/Tez job, load back the data from outputLocation into alias1 using loadFunc as schema.</source>
          <target state="translated">native.jar の MapReduce/Tez ジョブを実行した後、loadFunc をスキーマとして使用して outputLocation から alias1 にデータをロードバックします。</target>
        </trans-unit>
        <trans-unit id="558d7aad6e94b62a3c3d222979b260b60b6db7d2" translate="yes" xml:space="preserve">
          <source>Aggregate Functions</source>
          <target state="translated">集計機能</target>
        </trans-unit>
        <trans-unit id="5dc88dea8bd727663907c1cebd466dc8714656dd" translate="yes" xml:space="preserve">
          <source>Aggregate functions are another common type of eval function. Aggregate functions are usually applied to grouped data, as shown in this script:</source>
          <target state="translated">集約関数も eval 関数の一般的なタイプのひとつです。集約関数は通常、このスクリプトのようにグループ化されたデータに適用されます。</target>
        </trans-unit>
        <trans-unit id="7679232959289bbae9adf1bd0901f5e7caaed60f" translate="yes" xml:space="preserve">
          <source>Algebraic Interface</source>
          <target state="translated">代数インターフェイス</target>
        </trans-unit>
        <trans-unit id="2a985458724fdd6d4d45335864f403da7085d78b" translate="yes" xml:space="preserve">
          <source>Algebraic UDFs are declared using three annotations, @AlgebraicInitial, @AlgebraicIntermed and @AlgebraicFinal which are to annotate methods that correspond to the initial, intermed and final steps of an Algebraic UDF. Those annotations have a single parameter which is the name of the Algebraic UDF that will be available in Pig. The methods annotated with @AlgebraicInitial and @AlgebraicIntermed accept a Tuple as parameter and return a Tuple. The return type of the method annotated with @AlgebraicFinal will determine the return type of the Algebraic UDF. Here is an example of an Algebraic UDF named 'sum' defined in Groovy:</source>
          <target state="translated">代数的UDFは@AlgebraicInitial,@AlgebraicIntermed,@AlgebraicFinalの3つのアノテーションを使って宣言されていて、これらは代数的UDFの初期、中間、最終ステップに対応するメソッドをアノテーションするためのものです。これらのアノテーションのパラメータは1つで、Pigで利用可能な代数的UDFの名前を指定します。AlgebraicInitialと@AlgebraicIntermedでアノテーションされたメソッドはタプルをパラメータとして受け取り、タプルを返します。AlgebraicFinalでアノテーションされたメソッドの戻り値の型は代数UDFの戻り値の型を決定します。ここでは、Groovyで定義された'sum'という名前の代数的UDFの例を示します。</target>
        </trans-unit>
        <trans-unit id="b6edd45e987f0ed0d85e74746d2a6d3e95dcd545" translate="yes" xml:space="preserve">
          <source>All Pig and Hadoop properties can be set, either in the Pig script or via the Grunt command line.</source>
          <target state="translated">すべてのPigとHadoopのプロパティは、Pigスクリプトでも、Gruntのコマンドラインからでも設定できます。</target>
        </trans-unit>
        <trans-unit id="0d08a8676a973b43456513906eacd72c45acef6f" translate="yes" xml:space="preserve">
          <source>All Pig-specific classes are available &lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/data/&quot;&gt; here&lt;/a&gt;.</source>
          <target state="translated">すべてのPig固有のクラスは、&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/data/&quot;&gt;ここから&lt;/a&gt;入手できます。</target>
        </trans-unit>
        <trans-unit id="4a25b830ba6d0f5f7ab3d9dd8c90173750a7e162" translate="yes" xml:space="preserve">
          <source>All Pig-specific classes are available &lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/data/&quot;&gt; here&lt;/a&gt;.</source>
          <target state="translated">すべてのPig固有のクラスは&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/data/&quot;&gt;ここで&lt;/a&gt;利用できます。</target>
        </trans-unit>
        <trans-unit id="1bda14f8ed880d576aea6acd30f152878e631a85" translate="yes" xml:space="preserve">
          <source>All clauses are optional.</source>
          <target state="translated">すべての条項は任意です。</target>
        </trans-unit>
        <trans-unit id="52866c68b176a22bffc55098219cfb2139614a29" translate="yes" xml:space="preserve">
          <source>All data types have corresponding &lt;a href=&quot;#schemas&quot;&gt;schemas&lt;/a&gt;.</source>
          <target state="translated">すべてのデータ型には、対応する&lt;a href=&quot;#schemas&quot;&gt;スキーマがあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4a94a083db09fe10617ef778dd6b946b8778998f" translate="yes" xml:space="preserve">
          <source>All other loaders must implement IndexableLoadFunc.</source>
          <target state="translated">他のすべてのローダは、IndexableLoadFuncを実装しなければなりません。</target>
        </trans-unit>
        <trans-unit id="37204ac26327fe13d3535221456cf819261dca6e" translate="yes" xml:space="preserve">
          <source>All other loaders must implement {IndexableLoadFunc}.</source>
          <target state="translated">他のすべてのローダは{IndexableLoadFunc}を実装しなければなりません。</target>
        </trans-unit>
        <trans-unit id="1649736238965cf6cbe3f1ce8176b0809769d17f" translate="yes" xml:space="preserve">
          <source>All properties that Pig collects, including Hadoop properties, are available to any UDF via the UDFContext object. To get access to the properties, you can call the getJobConf method.</source>
          <target state="translated">Hadoopプロパティを含むPigが収集するすべてのプロパティは、UDFContextオブジェクトを介して任意のUDFで利用可能です。プロパティにアクセスするには、getJobConfメソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="34e9ee473e55595434c70943d0294704e486295a" translate="yes" xml:space="preserve">
          <source>All three APIs (compile, bind, run) discussed in the previous section have several versions depending on what you are trying to do.</source>
          <target state="translated">前のセクションで説明した3つのAPI(コンパイル、バインド、実行)はすべて、あなたが何をしようとしているかによっていくつかのバージョンを持っています。</target>
        </trans-unit>
        <trans-unit id="f9189f01c84538aeb8fe2058b57efd08869ddf98" translate="yes" xml:space="preserve">
          <source>Allowed operations are CROSS, DISTINCT, FILTER, FOREACH, LIMIT, and ORDER BY.</source>
          <target state="translated">許可されている操作は、CROSS、DISTINCT、FILTER、FOREACH、LIMIT、ORDER BYです。</target>
        </trans-unit>
        <trans-unit id="064fef4cada996e33dcdd96986591f596a362700" translate="yes" xml:space="preserve">
          <source>Allows multiple outputs from a job. This way some results can be stored as a side-effect of the main job. This is also necessary to make the previous item work.</source>
          <target state="translated">ジョブからの複数の出力を許可します。これにより、いくつかの結果をメインジョブの副作用として保存することができます。これは前の項目を動作させるためにも必要です。</target>
        </trans-unit>
        <trans-unit id="e12692334c3c5525a0d48b6d1b5840b8921a6aea" translate="yes" xml:space="preserve">
          <source>Allows multiple split branches to be carried on to the combiner/reducer. This reduces the amount of IO again in the case where multiple branches in the split can benefit from a combiner run.</source>
          <target state="translated">複数のスプリットブランチをコンバイナ/リデューサに持ち越すことができます。これにより、スプリット内の複数のブランチがコンバイナ実行の恩恵を受ける場合に、再びIOの量を減らすことができます。</target>
        </trans-unit>
        <trans-unit id="48bab0518d388537ab6c75f976fe1bbfd92fac6d" translate="yes" xml:space="preserve">
          <source>Allows the user to specify a string prefix, and then filter for the columns in a relation that begin with that prefix or match that regex pattern. Optionally, include flag 'false' to filter for columns that do not match that prefix or match that regex pattern</source>
          <target state="translated">文字列の接頭辞を指定し、その接頭辞で始まる、あるいはその正規表現パターンにマッチするリレーション内のカラムをフィルタリングすることができます。オプションで、その接頭辞にマッチしないカラムや正規表現パターンにマッチしないカラムをフィルタリングするために、フラグ 'false' を含めることもできます。</target>
        </trans-unit>
        <trans-unit id="9ffc1e1be5812001859ce766748be490fbad1908" translate="yes" xml:space="preserve">
          <source>Allows you to use a custom converter to perform the casting.</source>
          <target state="translated">カスタムコンバーターを使用してキャストを行うことができます。</target>
        </trans-unit>
        <trans-unit id="09dd0087984c1a05a19bdd64fef04e19d4e9f25f" translate="yes" xml:space="preserve">
          <source>Also note that direct-fetch doesn't support UDFs that interact with the distributed cache. You can check if the query can be fetched by running EXPLAIN. You should see &quot;No MR jobs. Fetch only.&quot; in the MapReduce part of the plan.</source>
          <target state="translated">また、ダイレクトフェッチは分散キャッシュと相互作用するUDFをサポートしていないことにも注意してください。EXPLAIN を実行することで、クエリがフェッチできるかどうかを確認することができます。すると、MapReduceプランの一部に「MRジョブはありません。Fetch only.&quot;とプランのMapReduceの部分に表示されています。</target>
        </trans-unit>
        <trans-unit id="c54969d703b7d67d8a437c8561c518e2a75e6f1a" translate="yes" xml:space="preserve">
          <source>Also note that relations are unordered which means there is no guarantee that tuples are processed in any particular order. Furthermore, processing may be parallelized in which case tuples are not processed according to any total ordering.</source>
          <target state="translated">また、関係は順序付けられていないので、タプルが特定の順序で処理される保証はありません。さらに、処理が並列化されている場合もありますが、その場合、タプルは全体の順序に従って処理されるわけではありません。</target>
        </trans-unit>
        <trans-unit id="806ef2702e2ab9811c86f77f15cb4642d9ef6f34" translate="yes" xml:space="preserve">
          <source>Also note that the flatten of empty bag will result in that row being discarded; no output is generated. (See also &lt;a href=&quot;perf#nulls&quot;&gt;Drop Nulls Before a Join&lt;/a&gt;.)</source>
          <target state="translated">また、空のバッグが平らになると、その行は破棄されます。出力は生成されません。（「&lt;a href=&quot;perf#nulls&quot;&gt;結合前のnullの削除&lt;/a&gt;」も参照してください。）</target>
        </trans-unit>
        <trans-unit id="691f430062ab748248a00dd18ab1311dbf9993e2" translate="yes" xml:space="preserve">
          <source>Also see &lt;a href=&quot;#bag-schema&quot;&gt;bag schemas&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#bag-schema&quot;&gt;バッグスキーマ&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="1aed7d8b239aabc38e2f28d25738b44c15bad97d" translate="yes" xml:space="preserve">
          <source>Also see &lt;a href=&quot;#map-schema&quot;&gt;map schemas&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#map-schema&quot;&gt;マップスキーマ&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="ea1ec2dbc255a96cf9b9ff7dbfe8524bfecf7324" translate="yes" xml:space="preserve">
          <source>Also see &lt;a href=&quot;#tuple-schema&quot;&gt;tuple schemas&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#tuple-schema&quot;&gt;タプルスキーマ&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="3778d1438a9ce1bf5b5fb3e8222569f3f2b06c51" translate="yes" xml:space="preserve">
          <source>Also, note that lines 9-10 check if the input data is null or empty and if so returns null.</source>
          <target state="translated">また、9-10行目は入力データがNULLか空かをチェックし、空の場合はNULLを返すことにも注意してください。</target>
        </trans-unit>
        <trans-unit id="fab33a082c3999c94a272db6a8fd55630557a897" translate="yes" xml:space="preserve">
          <source>Alternatively, use the PARALLEL clause to set the number of reducers at the operator level. (In a script, the value set via the PARALLEL clause will override any value set via &quot;set default parallel.&quot;) You can include the PARALLEL clause with any operator that starts a reduce phase: &lt;a href=&quot;basic#cogroup&quot;&gt;COGROUP&lt;/a&gt;, &lt;a href=&quot;basic#cross&quot;&gt;CROSS&lt;/a&gt;, &lt;a href=&quot;basic#distinct&quot;&gt;DISTINCT&lt;/a&gt;, &lt;a href=&quot;basic#group&quot;&gt;GROUP&lt;/a&gt;, &lt;a href=&quot;basic#join-inner&quot;&gt;JOIN (inner)&lt;/a&gt;, &lt;a href=&quot;basic#join-outer&quot;&gt;JOIN (outer)&lt;/a&gt;, and &lt;a href=&quot;basic#order-by&quot;&gt;ORDER BY&lt;/a&gt;. PARALLEL clause can also be used with &lt;a href=&quot;basic#union&quot;&gt;UNION&lt;/a&gt; if Tez is the execution mode. It will turn off the union optimization and introduce an extra reduce step. Though it will have slightly degraded performance due to the extra step, it is very useful for controlling the number of output files.</source>
          <target state="translated">または、PARALLEL句を使用して、オペレーターレベルでレデューサーの数を設定します。（スクリプトでは、PARALLEL句を介して設定された値は、「set default parallel」を介して設定された値をオーバーライドします。）PARALLEL句を、reduceフェーズを開始する任意の演算子と共に含めることができます：&lt;a href=&quot;basic#cogroup&quot;&gt;COGROUP&lt;/a&gt;、&lt;a href=&quot;basic#cross&quot;&gt;CROSS&lt;/a&gt;、&lt;a href=&quot;basic#distinct&quot;&gt;DISTINCT&lt;/a&gt;、&lt;a href=&quot;basic#group&quot;&gt;GROUP&lt;/a&gt;、&lt;a href=&quot;basic#join-inner&quot;&gt;JOIN（ inner）&lt;/a&gt;、&lt;a href=&quot;basic#join-outer&quot;&gt;JOIN（outer）&lt;/a&gt;、および&lt;a href=&quot;basic#order-by&quot;&gt;ORDER BY&lt;/a&gt;。PARALLEL句は&lt;a href=&quot;basic#union&quot;&gt;UNION&lt;/a&gt;でも使用できますTezが実行モードの場合。ユニオン最適化をオフにし、追加の削減ステップを導入します。追加の手順によりパフォーマンスがわずかに低下しますが、出力ファイルの数を制御するのに非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="69cb19b42c32df761a2636d74ed20f44de653689" translate="yes" xml:space="preserve">
          <source>An aggregate function is an eval function that takes a bag and returns a scalar value. One interesting and useful property of many aggregate functions is that they can be computed incrementally in a distributed fashion. We call these functions algebraic. COUNT is an example of an algebraic function because we can count the number of elements in a subset of the data and then sum the counts to produce a final output. In the Hadoop world, this means that the partial computations can be done by the map and combiner, and the final result can be computed by the reducer.</source>
          <target state="translated">集約関数は,袋を受け取り,スカラ値を返すeval関数です.多くの集約関数の興味深く有用な特性の一つは,分散的に増分計算ができることです.これらの関数を代数的な関数と呼んでいます.COUNTは代数的な関数の一例で、データのサブセット内の要素数をカウントし、カウントを合計して最終的な出力を生成することができるからです。Hadoopの世界では、これは部分的な計算はマップとコンバイナーで行い、最終的な結果はレデューサーで計算することができることを意味します。</target>
        </trans-unit>
        <trans-unit id="0805876187d13609e894b7732a388f570576b930" translate="yes" xml:space="preserve">
          <source>An algebraic function (COUNT) can be applied to another algebraic function (Distinct), but only the inner function is computed using the combiner.</source>
          <target state="translated">代数関数(COUNT)は、別の代数関数(Distinct)に適用することができますが、内部の関数のみがコンバイナを使って計算されます。</target>
        </trans-unit>
        <trans-unit id="d69e1629242857af79f46c3d7216edf3c504a19a" translate="yes" xml:space="preserve">
          <source>An arithmetic expression could look like this:</source>
          <target state="translated">算術式は次のようになります。</target>
        </trans-unit>
        <trans-unit id="210a656d0292e76bf7c2058d0781388d76953727" translate="yes" xml:space="preserve">
          <source>An asterisk can be used when requesting columns to group a collection of columns into a single Map instead of enumerating each column.</source>
          <target state="translated">アスタリスクは、各列を列挙するのではなく、列のコレクションを 1 つのマップにグループ化するように列を要求する場合に使用できます。</target>
        </trans-unit>
        <trans-unit id="0a0c24392d1b0e9eb921b05502a349cd0a705946" translate="yes" xml:space="preserve">
          <source>An collection of tuples.</source>
          <target state="translated">タプルのコレクション。</target>
        </trans-unit>
        <trans-unit id="39693f8f0517c3a65c4a9ef6a91ee2eb5b035429" translate="yes" xml:space="preserve">
          <source>An error that affects a particular row but is not likely to impact other rows. An example of such an error would be a malformed input value or divide by zero problem. A reasonable handling of this situation would be to emit a warning and return a null value. ABS function in the next section demonstrates this approach. The current approach is to write the warning to stderr. Eventually we would like to pass a logger to the UDFs. Note that returning a NULL value only makes sense if the malformed value is of type bytearray. Otherwise the proper type has been already created and should have an appropriate value. If this is not the case, it is an internal error and should cause the system to fail. Both cases can be seen in the implementation of the ABS function in the next section.</source>
          <target state="translated">特定の行に影響を与えるが、他の行に影響を与える可能性のないエラー。このようなエラーの例としては、入力値の誤りやゼロによる除算の問題が挙げられます。このような状況を適切に処理するには、警告を発してNULL値を返すことです。次のセクションのABS関数は、このアプローチを示しています。現在のアプローチは、警告を標準エラーに書き込むことです。最終的にはロガーをUDFに渡したいと考えています。NULL値を返すのは、不正な値がbytearray型の場合にのみ意味があることに注意してください。そうでない場合は、適切な型が既に作成されており、適切な値を持つべきです。そうでない場合は内部エラーであり、システムが失敗する原因となります。どちらの場合も、次のセクションのABS関数の実装で見ることができます。</target>
        </trans-unit>
        <trans-unit id="0cd1516fe911149160db59890452732b5e2a6012" translate="yes" xml:space="preserve">
          <source>An error that affects the entire processing and is not likely to succeed on retry. An example of such a failure is the inability to open a lookup file because of file permission problems. Pig currently does not have a way to handle this case. Hadoop does not have a way to handle this case either. It will be handled the same way as 2 above.</source>
          <target state="translated">処理全体に影響を及ぼし、リトライで成功する可能性が低いエラー。このような失敗の例としては、ファイルパーミッションの問題のためにルックアップファイルを開くことができないことがあります。Pig は現在のところ、このような場合を処理する方法を持っていません。Hadoopにもこのケースを処理する方法はありません。上記2と同じように処理されます。</target>
        </trans-unit>
        <trans-unit id="967c63764b50c00375304e8099e75b4305349fab" translate="yes" xml:space="preserve">
          <source>An error that affects the entire processing but can succeed on retry. An example of such a failure is the inability to open a lookup file because the file could not be found. This could be a temporary environmental issue that can go away on retry. A UDF can signal this to Pig by throwing an IOException as with the case of the ABS function below.</source>
          <target state="translated">処理全体に影響を与えるが、リトライで成功する可能性のあるエラー。このような失敗の例としては、ファイルが見つからなかったためにルックアップファイルを開くことができないというものがあります。これは一時的な環境問題かもしれませんが、リトライで解消される可能性があります。UDFは,以下のABS関数の場合のように,IOExceptionを投げることでPigにこのことを知らせることができます.</target>
        </trans-unit>
        <trans-unit id="c671b53983026588d1938407ddc3de8e6856bd34" translate="yes" xml:space="preserve">
          <source>An expression (angle) whose result is double.</source>
          <target state="translated">結果が二重になる式(角度)。</target>
        </trans-unit>
        <trans-unit id="c9e4df25bc57aba5b36b1b839a0569311b438ce5" translate="yes" xml:space="preserve">
          <source>An expression (angle) whose result is type double.</source>
          <target state="translated">double型の結果を持つ式(角度)。</target>
        </trans-unit>
        <trans-unit id="34362c9801db95fc8c055765b1da467af4914b94" translate="yes" xml:space="preserve">
          <source>An expression of any datatype.</source>
          <target state="translated">任意のデータ型の式。</target>
        </trans-unit>
        <trans-unit id="4fc0fa3f4fe236ad28967f716a6952b3a7c81fc4" translate="yes" xml:space="preserve">
          <source>An expression of any type supported by a map.</source>
          <target state="translated">マップでサポートされている任意の型の式。</target>
        </trans-unit>
        <trans-unit id="ece4a77a3b89bedc3071dbf7c155d7da07d70cca" translate="yes" xml:space="preserve">
          <source>An expression of type chararray.</source>
          <target state="translated">chararray型の式。</target>
        </trans-unit>
        <trans-unit id="42a8feb3e66b92f42778a9de0016b381b22e3f74" translate="yes" xml:space="preserve">
          <source>An expression whose result is chararray.</source>
          <target state="translated">結果がchararrayである式。</target>
        </trans-unit>
        <trans-unit id="ba786e4184ca6343b0a6e324a36c27158438e550" translate="yes" xml:space="preserve">
          <source>An expression whose result is double.</source>
          <target state="translated">結果が二重である式。</target>
        </trans-unit>
        <trans-unit id="c52877c34bec316f436408639ece24176492a8d3" translate="yes" xml:space="preserve">
          <source>An expression whose result is type double.</source>
          <target state="translated">結果がdouble型である式。</target>
        </trans-unit>
        <trans-unit id="a11171646dd15e0f1209e9712d7c28ef95fc4194" translate="yes" xml:space="preserve">
          <source>An expression whose result is type float or double.</source>
          <target state="translated">結果の型が float または double である式。</target>
        </trans-unit>
        <trans-unit id="c0aba735aad143557cbcf9d3bbaf934e342bb32c" translate="yes" xml:space="preserve">
          <source>An expression whose result is type float or double: the value to round.</source>
          <target state="translated">結果の型が float または double である式。</target>
        </trans-unit>
        <trans-unit id="d22e0b7fe056a1ea2d5b90df4e080286cb68143b" translate="yes" xml:space="preserve">
          <source>An expression whose result is type int: the number of digits to preserve.</source>
          <target state="translated">結果が int 型で、保存する桁数を表す式。</target>
        </trans-unit>
        <trans-unit id="2cf7168250f4690cfc1d60fce85ae211a8712e25" translate="yes" xml:space="preserve">
          <source>An expression whose result type is chararray.</source>
          <target state="translated">結果の型が chararray である式。</target>
        </trans-unit>
        <trans-unit id="03e19ffa091a2ba8f7b346539a078dde90838a58" translate="yes" xml:space="preserve">
          <source>An expression with any data type.</source>
          <target state="translated">任意のデータ型を持つ式。</target>
        </trans-unit>
        <trans-unit id="dc2b013b87b4b0d7155358437bda24d123807360" translate="yes" xml:space="preserve">
          <source>An expression with data type bag.</source>
          <target state="translated">データ型がbagである式。</target>
        </trans-unit>
        <trans-unit id="ea370334a331e3ac767cc1cd26be558b05622a83" translate="yes" xml:space="preserve">
          <source>An expression with data type chararray.</source>
          <target state="translated">データ型がchararrayの式。</target>
        </trans-unit>
        <trans-unit id="94c6f06360525978f6d07d0a2fa998ecab7775e4" translate="yes" xml:space="preserve">
          <source>An expression with data types chararray, int, long, float, double, bigdecimal, biginteger or bytearray.</source>
          <target state="translated">データ型が chararray,int,long,float,double,bigdecimal,biginteger または bytearray の式。</target>
        </trans-unit>
        <trans-unit id="6d6c12b91e08f1f340872f9a49bc0e394534ff74" translate="yes" xml:space="preserve">
          <source>An expression with data types int, long, float, double, bigdecimal, biginteger or bytearray cast as double.</source>
          <target state="translated">データ型が int,long,float,double,bigdecimal,biginteger または bytearray である式を double としてキャストしたもの。</target>
        </trans-unit>
        <trans-unit id="ad8fff138056250741bdacef839aa859b39fa658" translate="yes" xml:space="preserve">
          <source>An expression with data types int, long, float, double, bigdecimal, biginteger, chararray, datetime or bytearray.</source>
          <target state="translated">データ型が int,long,float,double,bigdecimal,biginteger,chararray,datetime または bytearray の式。</target>
        </trans-unit>
        <trans-unit id="a7f9bff8ef6f7d974fa3d734046ee5ffaf3f7777" translate="yes" xml:space="preserve">
          <source>An expression.</source>
          <target state="translated">表現。</target>
        </trans-unit>
        <trans-unit id="3295f86fff394718d50bc82eb94253ddd288cff2" translate="yes" xml:space="preserve">
          <source>An import list allows you to specify the package to which a UDF or a group of UDFs belong, eliminating the need to qualify the UDF on every call. An import list can be specified via the udf.import.list Java property on the Pig command line:</source>
          <target state="translated">インポートリストを使うと、UDFやUDFのグループが属するパッケージを指定することができます。インポートリストはPigコマンドラインのudf.import.list Javaプロパティで指定できます。</target>
        </trans-unit>
        <trans-unit id="80e3fd7b2689b2c3d038821e417fb5dfa497cfdb" translate="yes" xml:space="preserve">
          <source>An inner bag is enclosed in curly brackets { }.</source>
          <target state="translated">内袋は中括弧{}で囲んでいます。</target>
        </trans-unit>
        <trans-unit id="693f60586d103d91f5f3717ca5c57273ad72b04b" translate="yes" xml:space="preserve">
          <source>An optional Pig schema, in single quotes.</source>
          <target state="translated">シングルクォートで囲んだオプションの Pig スキーマ。</target>
        </trans-unit>
        <trans-unit id="944be749678e444ff5201cf9c6a7c4515f2f4bea" translate="yes" xml:space="preserve">
          <source>An optional field delimiter (in single quotes).</source>
          <target state="translated">オプションのフィールド区切り文字(シングルクォーテーション)。</target>
        </trans-unit>
        <trans-unit id="1b7935e0eed0aa803238947279893cdc1f875850" translate="yes" xml:space="preserve">
          <source>An optional int specifying the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rounding#Tie-breaking&quot;&gt;rounding mode&lt;/a&gt;, according to the &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/constant-values.html#java.math&quot;&gt;constants Java provides&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/constant-values.html#java.math&quot;&gt;Javaが提供&lt;/a&gt;する定数に従って、&lt;a href=&quot;https://en.wikipedia.org/wiki/Rounding#Tie-breaking&quot;&gt;丸めモードを&lt;/a&gt;指定するオプションのint 。</target>
        </trans-unit>
        <trans-unit id="ed96ea4a9718fcaa197ebf9c97b7049da685a8bb" translate="yes" xml:space="preserve">
          <source>An optional int specifying the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rounding#Tie-breaking&quot;&gt;rounding mode&lt;/a&gt;, according to the &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/constant-values.html#java.math&quot;&gt;constants Java provides&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/api/constant-values.html#java.math&quot;&gt;Javaが提供&lt;/a&gt;する定数に従って、&lt;a href=&quot;https://en.wikipedia.org/wiki/Rounding#Tie-breaking&quot;&gt;丸めモードを&lt;/a&gt;指定するオプションのint 。</target>
        </trans-unit>
        <trans-unit id="6c32b691b62f2bb36a75dd1e0cc784a9ca0b27fa" translate="yes" xml:space="preserve">
          <source>An optional pig property, pig.artifacts.download.location, can be used to configure the location where the artifacts should be downloaded. By default, they will be downloaded to ~/.groovy/grapes</source>
          <target state="translated">オプションの pig プロパティ pig.artifacts.download.location を使用して、アーティファクトをダウンロードする場所を設定することができます。デフォルトでは、~/.groovy/grapesにダウンロードされます。</target>
        </trans-unit>
        <trans-unit id="29406927dd05c601019129d39195cf563a3a71de" translate="yes" xml:space="preserve">
          <source>An ordered set of fields.</source>
          <target state="translated">順序立てられたフィールドの集合。</target>
        </trans-unit>
        <trans-unit id="a697ce9cc8667c8e9256c8d32cb413cc810723e1" translate="yes" xml:space="preserve">
          <source>And then later:</source>
          <target state="translated">そして、後になって</target>
        </trans-unit>
        <trans-unit id="25a2393aee7f5620498ac5ea27ab157a66cb664a" translate="yes" xml:space="preserve">
          <source>And this is example will return the bag {(04),(06),(96)}.</source>
          <target state="translated">そして、この例では袋{(04),(06),(96)}を返します。</target>
        </trans-unit>
        <trans-unit id="4e079119492128433a02329dfb9cc26741a84e7c" translate="yes" xml:space="preserve">
          <source>Another FLATTEN example.</source>
          <target state="translated">またしてもFLATTENの例。</target>
        </trans-unit>
        <trans-unit id="921cba366b298341f786269fa4eaf0ae09edfbec" translate="yes" xml:space="preserve">
          <source>Another FLATTEN example. Here, relations A and B both have a column x. When forming relation E, you need to use the :: operator to identify which column x to use - either relation A column x (A::x) or relation B column x (B::x). This example uses relation A column x (A::x).</source>
          <target state="translated">もう一つのFLATTENの例です。ここでは、リレーションAとBの両方が列xを持っています。リレーションEを形成する際には、リレーションAの列x (A::x)かリレーションBの列x (B::x)のどちらの列xを使用するかを識別するために ::演算子を使用する必要があります。この例では、リレーション A カラム x (A::x)を使用しています。</target>
        </trans-unit>
        <trans-unit id="001e252a8c894f76e6bf2c456886080d47877255" translate="yes" xml:space="preserve">
          <source>Another FLATTEN example. Note that for the group '4' in C, there are two tuples in each bag. Thus, when both bags are flattened, the cross product of these tuples is returned; that is, tuples (4, 2, 6), (4, 3, 6), (4, 2, 9), and (4, 3, 9).</source>
          <target state="translated">もう一つのFLATTENの例です。Cのグループ'4'については、それぞれの袋に2つのタプルがあることに注意してください。したがって、両方の袋が平らになると、これらのタプルの交雑積が返されます。</target>
        </trans-unit>
        <trans-unit id="4c7cf35f72fe11575ffec87c3c1ef4467f04181a" translate="yes" xml:space="preserve">
          <source>Another datetime object.</source>
          <target state="translated">もう一つのdatetimeオブジェクト。</target>
        </trans-unit>
        <trans-unit id="22a26eedee58a28b2a4bb5da4392d6e156c497e6" translate="yes" xml:space="preserve">
          <source>Another sub-use case of automated generation is parallel execution of identical pipelines. You may have a single pipeline that you would like to run multiple data sets through in parallel. In the example below, the pipeline is run for the US, the UK, and Brazil.</source>
          <target state="translated">自動生成のもう一つのサブユースケースは、同一のパイプラインの並列実行です。複数のデータセットを並行して実行したい単一のパイプラインがあるかもしれません。下の例では、米国、英国、ブラジルのパイプラインを実行しています。</target>
        </trans-unit>
        <trans-unit id="be4fd2a45a4a97838cca0fc2c220e0db4ff1d9a2" translate="yes" xml:space="preserve">
          <source>Any Pig built in function.</source>
          <target state="translated">任意のPigが機能を内蔵しています。</target>
        </trans-unit>
        <trans-unit id="1fc5c8e707150babdf31c148f74771b73558ea37" translate="yes" xml:space="preserve">
          <source>Any Pig data type (simple data types, complex data types)</source>
          <target state="translated">任意のピッグデータ型(単純なデータ型、複雑なデータ型</target>
        </trans-unit>
        <trans-unit id="978a0d3c49e4c7b4d7faab089cc1f60749699746" translate="yes" xml:space="preserve">
          <source>Any Pig operator (arithmetic, comparison, null, boolean, dereference, sign, and cast)</source>
          <target state="translated">任意の Pig 演算子 (算術、比較、null、boolean、参照、符号、キャスト)</target>
        </trans-unit>
        <trans-unit id="217db132921e6ed0e5f9ca5f5859747c8c8a56ac" translate="yes" xml:space="preserve">
          <source>Any alias in the macro which isn't visible from the outside will be prefixed with a macro name and suffixed with an instance id to avoid namespace collision.</source>
          <target state="translated">外部から見えないマクロ内のエイリアスは、名前空間の衝突を避けるために、マクロ名の前にはマクロ名、後にはインスタンス ID が付けられます。</target>
        </trans-unit>
        <trans-unit id="aaa582ad4ff05655888d6013ae0db9001b4c9c31" translate="yes" xml:space="preserve">
          <source>Any arbitrary, supported expression.</source>
          <target state="translated">任意の、サポートされている式。</target>
        </trans-unit>
        <trans-unit id="67dea04a8f04ddfb2fcaee33d42031f57acec54e" translate="yes" xml:space="preserve">
          <source>Any data type (the defaults to bytearray).</source>
          <target state="translated">任意のデータ型(デフォルトはbytearray)。</target>
        </trans-unit>
        <trans-unit id="9df503ae42e921806aef9bda780b3d2b8d44c696" translate="yes" xml:space="preserve">
          <source>Any expression whose result is a bag. The elements of the bag should be data type int, long, float, double, bigdecimal, biginteger or bytearray.</source>
          <target state="translated">結果がbagである式。バッグの要素はデータ型が int,long,float,double,bigdecimal,biginteger,bytearray である必要があります。</target>
        </trans-unit>
        <trans-unit id="c42f940f3857fa4714f1ddb489fba3700db28181" translate="yes" xml:space="preserve">
          <source>Any expression whose result is type int, long, float, or double.</source>
          <target state="translated">結果の型が int,long,float,double である式。</target>
        </trans-unit>
        <trans-unit id="91010de1c13dcbe35e5c061770b45010829785f9" translate="yes" xml:space="preserve">
          <source>Any expression.</source>
          <target state="translated">どんな表現でも</target>
        </trans-unit>
        <trans-unit id="e46d35adbc33471df9ea52bc60bef0f8c80a974b" translate="yes" xml:space="preserve">
          <source>Any numeric constant with decimal point (for example, 1.5) and/or exponent (for example, 5e+1) is treated as double unless it ends with the following characters:</source>
          <target state="translated">小数点(例えば、1.5)および/または指数(例えば、5e+1)を持つ数値定数は、以下の文字で終わる場合を除き、二重として扱われます。</target>
        </trans-unit>
        <trans-unit id="44b795c8279d6454f909869d7f6b987a7d1c123b" translate="yes" xml:space="preserve">
          <source>Any script is parsed in it's entirety before it is sent to execution. Since the current directory can change throughout the script any path used in LOAD or STORE statement is translated to a fully qualified and absolute path.</source>
          <target state="translated">すべてのスクリプトは、実行に移される前に全体が解析されます。カレントディレクトリはスクリプト全体で変化する可能性があるため、LOAD 文や STORE 文で使用されるパスは、完全修飾された絶対パスに変換されます。</target>
        </trans-unit>
        <trans-unit id="890e506eab3c3d925aba8460d8fc6909e6882d47" translate="yes" xml:space="preserve">
          <source>Any user defined function (UDF) written in Java.</source>
          <target state="translated">Javaで書かれた任意のユーザ定義関数(UDF)。</target>
        </trans-unit>
        <trans-unit id="7bc6dcbf97ce0a62c707a5a72faafb18f81f14d8" translate="yes" xml:space="preserve">
          <source>Anything else raises an exception</source>
          <target state="translated">それ以外のものは例外を発生させる</target>
        </trans-unit>
        <trans-unit id="a5b4633f9cbbf1d5c5705da6d697c8f62f6a09cb" translate="yes" xml:space="preserve">
          <source>Apache Pig</source>
          <target state="translated">アパッチピッグ</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="19f7be188fcad099f30afd0f2632c2e15d9c72df" translate="yes" xml:space="preserve">
          <source>Arguments used in a LOAD statement that have a scheme other than &quot;hdfs&quot; or &quot;file&quot; will not be expanded and passed to the LoadFunc/Slicer unchanged.</source>
          <target state="translated">LOAD文で使用される引数で、&quot;hdfs &quot;や &quot;file &quot;以外のスキームを持つものは展開されず、変更されずにLoadFunc/Slicerに渡されます。</target>
        </trans-unit>
        <trans-unit id="6104f39ed22a2cd32e98536a3447a01c4b9f4781" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators</source>
          <target state="translated">算術演算子</target>
        </trans-unit>
        <trans-unit id="8b1cddd81446aceacf0965fa8356eacfc8d03688" translate="yes" xml:space="preserve">
          <source>Arithmetic Operators and More</source>
          <target state="translated">算術演算子など</target>
        </trans-unit>
        <trans-unit id="03bd73bb9f926b446db6e64bb7da8e17432f7d7c" translate="yes" xml:space="preserve">
          <source>Arithmetic operators:</source>
          <target state="translated">算術演算子。</target>
        </trans-unit>
        <trans-unit id="80a7a2594f7366489b3672da894029029c5b05d9" translate="yes" xml:space="preserve">
          <source>As a consequence running a pig script on a kerberos secured hadoop cluster limits the running time to at most the remaining validity time of these kerberos tickets. When doing really complex analytics this may become a problem as the job may need to run for a longer time than these ticket times allow.</source>
          <target state="translated">結果として、kerberosで保護されたhadoopクラスタ上でpigスクリプトを実行すると、実行時間は最大でもkerberosチケットの有効時間の残り時間に制限されます。本当に複雑な分析を行う場合は、これらのチケットの時間よりも長い時間ジョブを実行する必要があるので、これが問題になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="04879c2a61706a1f2d9777f3617aacfcdad08476" translate="yes" xml:space="preserve">
          <source>As noted, nulls can be the result of an operation. These operations can produce null values:</source>
          <target state="translated">前述したように、ヌルは演算の結果になることがあります。これらの操作はヌル値を生成することができます。</target>
        </trans-unit>
        <trans-unit id="fb2a8f02938afb551dcbe8fdd7976802309c4d2a" translate="yes" xml:space="preserve">
          <source>As noted, nulls can occur naturally in the data. If nulls are part of the data, it is the responsibility of the load function to handle them correctly. Keep in mind that what is considered a null value is loader-specific; however, the load function should always communicate null values to Pig by producing Java nulls.</source>
          <target state="translated">前述したように、ヌルはデータ内で自然に発生する可能性があります。NULLがデータの一部である場合、それらを正しく処理するのはロード関数の責任です。何がヌル値とみなされるかはローダ固有のものであることを覚えておいてください;しかし、ロード関数は常にJavaのヌルを生成することでヌル値をPigに伝えるべきです。</target>
        </trans-unit>
        <trans-unit id="90b97e17cddeb6c1a70a69c4c9fb04528a8278f6" translate="yes" xml:space="preserve">
          <source>As noted, the fields in a tuple can be any data type, including the complex data types: bags, tuples, and maps.</source>
          <target state="translated">前述の通り、タプルのフィールドは、バッグ、タプル、マップなどの複雑なデータ型を含む、任意のデータ型にすることができます。</target>
        </trans-unit>
        <trans-unit id="61510ad4a1b483d9b8760f068d0f56567869aa9a" translate="yes" xml:space="preserve">
          <source>As part of a command line.</source>
          <target state="translated">コマンドラインの一部として</target>
        </trans-unit>
        <trans-unit id="c849c8ea4cee323f844d5e9b104ac35d107c29b4" translate="yes" xml:space="preserve">
          <source>As shown above, with a few exceptions Pig can infer the schema of a relationship up front. You can examine the schema of particular relation using &lt;a href=&quot;test#describe&quot;&gt;DESCRIBE&lt;/a&gt;. Pig enforces this computed schema during the actual execution by casting the input data to the expected data type. If the process is successful the results are returned to the user; otherwise, a warning is generated for each record that failed to convert. Note that Pig does not know the actual types of the fields in the input data prior to the execution; rather, Pig determines the data types and performs the right conversions on the fly.</source>
          <target state="translated">上記のように、いくつかの例外を除いて、Pigは関係のスキーマを事前に推測できます。&lt;a href=&quot;test#describe&quot;&gt;DESCRIBE&lt;/a&gt;を使用して、特定の関係のスキーマを調べることができます。 Pigは、入力データを予想されるデータ型にキャストすることにより、実際の実行中にこの計算されたスキーマを適用します。プロセスが成功すると、結果がユーザーに返されます。それ以外の場合、変換に失敗したレコードごとに警告が生成されます。 Pigは、実行前の入力データのフィールドの実際のタイプを認識していないことに注意してください。むしろ、Pigはデータ型を決定し、その場で正しい変換を実行します。</target>
        </trans-unit>
        <trans-unit id="6e709810b011330ebd0676f7d7de0173d4923b8a" translate="yes" xml:space="preserve">
          <source>As shown in the examples below, you can use ILLUSTRATE to review a relation or an entire Pig script.</source>
          <target state="translated">以下の例に示すように、ILLUSTRATEを使ってリレーションやPigスクリプト全体を見直すことができます。</target>
        </trans-unit>
        <trans-unit id="7f2d230c53a81ee68e467d510700d608baa6779e" translate="yes" xml:space="preserve">
          <source>As shown in this example when you assign names to fields (using the AS schema clause) you can still refer to the fields using positional notation. However, for debugging purposes and ease of comprehension, it is better to use field names.</source>
          <target state="translated">この例のように、フィールドに名前を割り当てる場合 (AS スキーマ句を使用して)、位置表記を使用してフィールドを参照することができます。しかし、デバッグの目的と理解を容易にするためには、フィールド名を使用した方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="db677636bc6e605a4bc57d0950b0b51ad9d9f929" translate="yes" xml:space="preserve">
          <source>As the case with runSingle, a set of Java Properties or a property file can be passed to the call.</source>
          <target state="translated">runSingleの場合と同様に、Javaプロパティのセットまたはプロパティファイルを呼び出しに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="5eedc0d0584315378e1685648914295652f1e014" translate="yes" xml:space="preserve">
          <source>As with early projection, in most cases it is beneficial to apply filters as early as possible to reduce the amount of data flowing through the pipeline.</source>
          <target state="translated">初期の予測と同様に、ほとんどの場合、パイプラインを流れるデータ量を減らすために、できるだけ早い段階でフィルタを適用することが有益です。</target>
        </trans-unit>
        <trans-unit id="acf60e2b7279f879ddcbeae131ad493aad66eb3a" translate="yes" xml:space="preserve">
          <source>As you can see in the example below, this is very similar to the output schema definition in the Swap function. One difference is that instead of reusing input schema, we create a brand new field schema to represent the tokens stored in the bag. The other difference is that the type of the schema created is BAG (not TUPLE).</source>
          <target state="translated">下の例にあるように、これはスワップ関数の出力スキーマ定義と非常によく似ています。1つの違いは、入力スキーマを再利用する代わりに、バッグに保存されているトークンを表現するための新しいフィールドスキーマを作成していることです。もう一つの違いは、作成されるスキーマの型がBAG(TUPLEではなく)であることです。</target>
        </trans-unit>
        <trans-unit id="6dd763f730ac055b413d379bc6a1deb86e3f18f7" translate="yes" xml:space="preserve">
          <source>Assert a condition on the data.</source>
          <target state="translated">データに条件を付与します。</target>
        </trans-unit>
        <trans-unit id="72a84963b5100d98fa29133871f582f97171e51b" translate="yes" xml:space="preserve">
          <source>Assigns an alias to a UDF or streaming command.</source>
          <target state="translated">UDFまたはストリーミングコマンドにエイリアスを割り当てます。</target>
        </trans-unit>
        <trans-unit id="22ae620ea591268623e10bb00a68850ef5411704" translate="yes" xml:space="preserve">
          <source>At runtime, Tez adjust vertex parallelism dynamically based on the input data volume of the vertex. Note currently Tez can only decrease the parallelism dynamically not increase. So in step 1 and 2, Pig overestimate the parallelism</source>
          <target state="translated">実行時に、頂点の並列性を動的に調整します。現在のところ、Tezは動的に並列度を下げることしかできないので、並列度を上げることはできないことに注意してください。そのため、ステップ1と2では、Pigは並列性を過大評価してしまいます。</target>
        </trans-unit>
        <trans-unit id="1f292143d23b3b6e8deb436ffedfbe3691c76f80" translate="yes" xml:space="preserve">
          <source>Auto Local Mode</source>
          <target state="translated">自動ローカルモード</target>
        </trans-unit>
        <trans-unit id="c05f16de6c69f8e34fa012e8ac0bd27013d3f37e" translate="yes" xml:space="preserve">
          <source>Automated Pig Latin Generation</source>
          <target state="translated">自動化された豚のラテン語生成</target>
        </trans-unit>
        <trans-unit id="f50b65cb2d9cf1587f20cc17099ef1d0a0694dbb" translate="yes" xml:space="preserve">
          <source>Automatic parallelism</source>
          <target state="translated">自動並列化</target>
        </trans-unit>
        <trans-unit id="8882830c81669a6304872e4991c4350381f5484a" translate="yes" xml:space="preserve">
          <source>AvroStorage</source>
          <target state="translated">AvroStorage</target>
        </trans-unit>
        <trans-unit id="2c276dd5a0812dd59c7b1e51251655518f6b77b2" translate="yes" xml:space="preserve">
          <source>AvroStorage stores and loads data from Avro files. Often, you can load and store data using AvroStorage without knowing much about the Avros serialization format. AvroStorage will attempt to automatically translate a pig schema and pig data to avro data, or avro data to pig data.</source>
          <target state="translated">AvroStorage は Avro ファイルからデータを保存したりロードしたりします。多くの場合、AvroStorage を使用して Avros のシリアライズ形式についてあまり知らなくても、データをロードしたり保存したりすることができます。AvroStorage は、ピッグスキーマとピッグデータを自動的に Avro データに、または Avro データをピッグデータに変換しようとします。</target>
        </trans-unit>
        <trans-unit id="32931d8fb64c41f2dd70472c880c9cc493a17fed" translate="yes" xml:space="preserve">
          <source>AvroStorage will translate this to the Avro schema</source>
          <target state="translated">AvroStorage はこれを Avro スキーマに変換します。</target>
        </trans-unit>
        <trans-unit id="3522a2f4906b64de7b765845424795b246eb4c92" translate="yes" xml:space="preserve">
          <source>AvroStorage(['schema|record name'], ['options'])</source>
          <target state="translated">AvroStorage(['schema|record name'],['options'])</target>
        </trans-unit>
        <trans-unit id="eb218a8539c7342f43e836950bb701112da9e2f7" translate="yes" xml:space="preserve">
          <source>B = GROUP A ALL;</source>
          <target state="translated">B=GROUP A ALL。</target>
        </trans-unit>
        <trans-unit id="418f4817f0e84b121282e541eda28b4c1ea356a4" translate="yes" xml:space="preserve">
          <source>B = GROUP A BY (key1,key2);</source>
          <target state="translated">B=GROUP A BY (key1,key2)。</target>
        </trans-unit>
        <trans-unit id="e250a6fbb702237f17fd7fdd6856965d006b2b2e" translate="yes" xml:space="preserve">
          <source>B = GROUP A BY f1;</source>
          <target state="translated">B=GROUP A BY f1.</target>
        </trans-unit>
        <trans-unit id="b14097536db7430e5fb8567a9ea4cd709d96f686" translate="yes" xml:space="preserve">
          <source>BD or bd in which case it is assigned type BigDecimal (for example, 12345678.12345678BD)</source>
          <target state="translated">BD または bd の場合は、BigDecimal 型 (例えば 12345678.12345678BD)が割り当てられます。</target>
        </trans-unit>
        <trans-unit id="b676a049c2b4b642ab7910b4ba1dcd493813d54a" translate="yes" xml:space="preserve">
          <source>BOSNYABAL</source>
          <target state="translated">BOSNYABAL</target>
        </trans-unit>
        <trans-unit id="fe32d598143386838f0a56cf1f52612b9269a98a" translate="yes" xml:space="preserve">
          <source>BOS_NYA_BAL</source>
          <target state="translated">BOS_NYA_BAL</target>
        </trans-unit>
        <trans-unit id="d3f662cc77b3cae96cc441e9ddc30da08a72415c" translate="yes" xml:space="preserve">
          <source>BOS|NYA|BAL</source>
          <target state="translated">BOS|NYA|BAL</target>
        </trans-unit>
        <trans-unit id="64c3f5e89864d5e803ba483fadc3c80068321744" translate="yes" xml:space="preserve">
          <source>BY</source>
          <target state="translated">BY</target>
        </trans-unit>
        <trans-unit id="fd4a1f65749d89056abcaeac3722a7b7a8fe75a1" translate="yes" xml:space="preserve">
          <source>Backward Compatibility</source>
          <target state="translated">下位互換性</target>
        </trans-unit>
        <trans-unit id="ef6155a5eccf4717deb734d482cb9f59d873fb8a" translate="yes" xml:space="preserve">
          <source>Bag</source>
          <target state="translated">Bag</target>
        </trans-unit>
        <trans-unit id="49d390666ee5f9c31c1da5c0f493d58a41258216" translate="yes" xml:space="preserve">
          <source>Bag Schemas</source>
          <target state="translated">バッグスキーマ</target>
        </trans-unit>
        <trans-unit id="1010b8b2eb340a1d5a8871eaf78edf295b32c6b6" translate="yes" xml:space="preserve">
          <source>Bag dereferencing can be done by name (bag.field_name) or position (bag.$0). If a set of fields are dereferenced (bag.(name1, name2) or bag.($0, $1)), the expression represents a bag composed of the specified fields.</source>
          <target state="translated">バッグの参照解除は、名前(bag.field_name)または位置(bag.$0)で行うことができます。フィールドのセットが参照される場合 (bag.(name1,name2)または bag.($0,$1))、式は指定されたフィールドで構成されたバッグを表します。</target>
        </trans-unit>
        <trans-unit id="aeec0cc90259f65e36bea15200294f37f5af27c4" translate="yes" xml:space="preserve">
          <source>BagToString</source>
          <target state="translated">BagToString</target>
        </trans-unit>
        <trans-unit id="aa25c39849add586db84531c827f1e6e41eb4056" translate="yes" xml:space="preserve">
          <source>BagToString creates a single string from the elements of a bag, similar to SQL's GROUP_CONCAT function. Keep in mind the following:</source>
          <target state="translated">BagToStringは、SQLのGROUP_CONCAT関数と同様に、バッグの要素から単一の文字列を作成します。以下のことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c5638dc5f797ac1efe44a952e3873eb31c5aa8cf" translate="yes" xml:space="preserve">
          <source>BagToString(vals, delimiter)</source>
          <target state="translated">BagToString(vals,デリミタ)</target>
        </trans-unit>
        <trans-unit id="7cc817fe26a9f93ad9a1352d61aced211bab05d5" translate="yes" xml:space="preserve">
          <source>BagToString(vals:bag [, delimiter:chararray])</source>
          <target state="translated">BagToString(vals:bag [,delimiter:chararray])</target>
        </trans-unit>
        <trans-unit id="cdd596ce5991ef8e9aa895a166dc8b016020ea23" translate="yes" xml:space="preserve">
          <source>BagToTuple</source>
          <target state="translated">BagToTuple</target>
        </trans-unit>
        <trans-unit id="148cb3b1cb4a6cb08389277afb45ce738be66b38" translate="yes" xml:space="preserve">
          <source>BagToTuple creates a tuple from the elements of a bag. It removes only the first level of nesting; it does not recursively un-nest nested bags. Unlike FLATTEN, BagToTuple will not generate multiple output records per input record.</source>
          <target state="translated">BagToTupleは、バッグの要素からタプルを作成します。最初のレベルの入れ子だけを削除し、再帰的に入れ子になったバッグの入れ子を解除することはありません。FLATTENとは異なり、BagToTupleは入力レコードごとに複数の出力レコードを生成しません。</target>
        </trans-unit>
        <trans-unit id="0f341f2d6b6d4286104bc0819855cf8bf670f5d0" translate="yes" xml:space="preserve">
          <source>BagToTuple(expression)</source>
          <target state="translated">BagToTuple(expression)</target>
        </trans-unit>
        <trans-unit id="c40ffaad461d0b3df48aa6832b6a4ee0ebc50c40" translate="yes" xml:space="preserve">
          <source>Bags are disordered unless you explicitly apply a nested ORDER BY operation as demonstrated below. A nested FOREACH will preserve ordering, letting you order by one combination of fields then project out just the values you'd like to concatenate.</source>
          <target state="translated">以下に示すように、入れ子になったORDER BY操作を明示的に適用しない限り、バッグは無秩序になります。入れ子になった FOREACH は順序を保持し、フィールドの組み合わせで順序付けを行い、連結したい値だけを出力します。</target>
        </trans-unit>
        <trans-unit id="b2e4de2aeab971065d2712f291e9a19b5c68ba50" translate="yes" xml:space="preserve">
          <source>Bags can be of arbitrary size, while strings in Java cannot: you will either exhaust available memory or exceed the maximum number of characters (about 2 billion). One of the worst features a production job can have is thresholding behavior: everything will seem nearly fine until the data size of your largest bag grows from nearly-too-big to just-barely-too-big.</source>
          <target state="translated">バッグは任意のサイズにすることができますが、Javaの文字列はできません。最大のバッグのデータサイズが「ほとんど大きくない」から「ほとんど大きくない」になるまでは、すべてがほぼ問題ないように見えます。</target>
        </trans-unit>
        <trans-unit id="bdacb6f01627f60551e03a34d7bdd90e363f5861" translate="yes" xml:space="preserve">
          <source>Bags have two forms: outer bag (or relation) and inner bag.</source>
          <target state="translated">バッグには、外袋(または関係)と内袋の2つの形があります。</target>
        </trans-unit>
        <trans-unit id="b67dda013697f0f9bfaf42e872c02ae3d9c9da7b" translate="yes" xml:space="preserve">
          <source>Bags of Tuples</source>
          <target state="translated">タプルの袋</target>
        </trans-unit>
        <trans-unit id="63cf7dab63810a51b8c15ba646b1894701a7fbb9" translate="yes" xml:space="preserve">
          <source>Bags subtraction, SUBTRACT(bag1, bag2) = bags composed of bag1 elements not in bag2</source>
          <target state="translated">バッグの減算、SUBTRACT(bag1,bag2)=bag1の要素で構成されたバッグではなく、bag2の要素で構成されたバッグ。</target>
        </trans-unit>
        <trans-unit id="a0fa542d40e090bdd331d620ba960b68717b80f4" translate="yes" xml:space="preserve">
          <source>Basic usage of CUBE and ROLLUP operation combined</source>
          <target state="translated">CUBEとROLLUP操作を組み合わせた基本的な使い方</target>
        </trans-unit>
        <trans-unit id="0e99a3b747071dcc806ccc77b33e132a42bde5c9" translate="yes" xml:space="preserve">
          <source>Basic usage of CUBE operation</source>
          <target state="translated">CUBEの基本的な使い方</target>
        </trans-unit>
        <trans-unit id="cf12cbbcd3288d2414dbcadce62afe0bfb92f39f" translate="yes" xml:space="preserve">
          <source>Basic usage of ROLLUP operation</source>
          <target state="translated">ROLLUP操作の基本的な使い方</target>
        </trans-unit>
        <trans-unit id="8b6d8cb0fe44b1ea97c8dffd9944957e48ec1ad8" translate="yes" xml:space="preserve">
          <source>Batch Mode</source>
          <target state="translated">バッチモード</target>
        </trans-unit>
        <trans-unit id="e7f94f7bfabdfdabdaf4925e4a430639526f615c" translate="yes" xml:space="preserve">
          <source>Because the log file only contains queries for a single day, we are only interested in the hour. The excite query log timestamp format is YYMMDDHHMMSS. Call the ExtractHour UDF to extract the hour (HH) from the time field.</source>
          <target state="translated">ログファイルには1日分のクエリしか含まれていないので、1時間分しか興味がありません。excite クエリログのタイムスタンプ形式は YYMMDDHHMMSS です。ExtractHour UDFを呼び出して、時間フィールドから時間(HH)を抽出します。</target>
        </trans-unit>
        <trans-unit id="d5790a6c7ab6af9eec7c14c03a21d3af3cba7457" translate="yes" xml:space="preserve">
          <source>Because the log file only contains queries for a single day, we are only interested in the hour. The excite query log timestamp format is YYMMDDHHMMSS. Call the ExtractHour UDF to extract the hour from the time field.</source>
          <target state="translated">ログファイルには1日分のクエリしか含まれていないので、1時間分しか興味がありません。excite クエリログのタイムスタンプ形式は YYMMDDHHMMSS です。ExtractHour UDFを呼び出して、時間フィールドから時間を抽出します。</target>
        </trans-unit>
        <trans-unit id="68d617dccdb378ed22fc2da9ed3a1747f7a04c4b" translate="yes" xml:space="preserve">
          <source>Before submiting a DAG, Pig estimate parallelism of each vertex statically based on the input file size of the DAG and the complexity of the pipeline of each vertex</source>
          <target state="translated">DAGを提出する前に、PigはDAGの入力ファイルサイズと各頂点のパイプラインの複雑さに基づいて、各頂点の並列性を静的に推定します。</target>
        </trans-unit>
        <trans-unit id="e4cba249be79fb483be03e01c74d8ae5fd152fe5" translate="yes" xml:space="preserve">
          <source>Before the type system was available in Pig, all values for the purpose of arithmetic calculations were assumed to be doubles as the safest choice. However, this is not very efficient if the data is actually of type integer or long. (We saw about a 2x slowdown of a query when using double where integer could be used.) Now that Pig supports types we can take advantage of the type information and choose the function that is most efficient for the provided operands.</source>
          <target state="translated">Pigで型システムが利用できるようになる前は、算術計算を目的としたすべての値は、最も安全な選択肢として倍数であると仮定されていました。しかし、データが実際に整数型やlong型の場合、これはあまり効率的ではありません。(整数型が使用できるところで double を使用した場合、クエリが約 2 倍遅くなることがわかりました。)Pigが型をサポートするようになったので、型情報を活用して、提供されたオペランドに対して最も効率的な関数を選択することができます。</target>
        </trans-unit>
        <trans-unit id="e11e5b36796c77a490bbf41ea86918f4da66a328" translate="yes" xml:space="preserve">
          <source>Begin with the &lt;a href=&quot;start&quot;&gt;Getting Started&lt;/a&gt; guide which shows you how to set up Pig and how to form simple Pig Latin statements. When you are ready to start writing your own scripts, review the &lt;a href=&quot;basic&quot;&gt;Pig Latin Basics&lt;/a&gt; manual to become familiar with the Pig Latin operators and the supported data types.</source>
          <target state="translated">Pigの設定方法と簡単なPig Latinステートメントの作成方法を示す&lt;a href=&quot;start&quot;&gt;スタート&lt;/a&gt;ガイドから始めます。独自のスクリプトを書き始める準備ができたら、&lt;a href=&quot;basic&quot;&gt;Pig Latin Basicsの&lt;/a&gt;マニュアルを確認して、Pig Latinの演算子とサポートされているデータ型について理解してください。</target>
        </trans-unit>
        <trans-unit id="3ab0be3f93d8d722278121e74cf7b35c0bf4473f" translate="yes" xml:space="preserve">
          <source>BigDecimal</source>
          <target state="translated">BigDecimal</target>
        </trans-unit>
        <trans-unit id="2b64c290fd2bfc4444117f69d1817cb3b5546b05" translate="yes" xml:space="preserve">
          <source>BigDecimal: bigdecimal</source>
          <target state="translated">BigDecimal:ビッグデシマル</target>
        </trans-unit>
        <trans-unit id="92438720ccb09a8bc6b241c5b27a00fb72144c25" translate="yes" xml:space="preserve">
          <source>BigInteger</source>
          <target state="translated">BigInteger</target>
        </trans-unit>
        <trans-unit id="06802a83746ed515cb7bdb4d5fe59d7d5634e1fa" translate="yes" xml:space="preserve">
          <source>BigInteger: biginteger</source>
          <target state="translated">BigInteger:biginteger</target>
        </trans-unit>
        <trans-unit id="798c6979dab113281cfd52bfcf3dc3e219ec5cd6" translate="yes" xml:space="preserve">
          <source>BigIntegers can be specified by supplying BI or bi at the end of the number (for example, 123456789123456BI)</source>
          <target state="translated">BigIntegers は、数値の最後に BI または BI を指定することで指定できます(例:123456789123456BI)。</target>
        </trans-unit>
        <trans-unit id="16a7e0acfeabb86108ee3a692200b773118cac32" translate="yes" xml:space="preserve">
          <source>BinStorage</source>
          <target state="translated">BinStorage</target>
        </trans-unit>
        <trans-unit id="f6966b28a7841f8f76aa5394237429397c64ffa0" translate="yes" xml:space="preserve">
          <source>BinStorage does not track data lineage. When Pig uses BinStorage to move data between MapReduce jobs, Pig can figure out the correct cast function to use and apply it. However, as shown in the example below, when you store data using BinStorage and then use a separate Pig Latin script to read data (thus loosing the type information), it is your responsibility to correctly cast the data before storing it using BinStorage.</source>
          <target state="translated">BinStorageはデータの系統を追跡しません。PigがBinStorageを使ってMapReduceジョブ間でデータを移動するとき、Pigは使用すべき正しいキャスト関数を見つけ出し、それを適用することができます。しかし、以下の例のように、BinStorageを使ってデータを保存した後、別のPig Latinスクリプトを使ってデータを読み込んだ場合(その結果、型情報が失われる)、BinStorageを使って保存する前にデータを正しくキャストするのはあなたの責任です。</target>
        </trans-unit>
        <trans-unit id="f3ac853a4785dc7e2df3f4836ae07b53c5387435" translate="yes" xml:space="preserve">
          <source>BinStorage supports multiple locations (files, directories, globs) as input.</source>
          <target state="translated">BinStorageは入力として複数の場所(ファイル、ディレクトリ、グロブ)をサポートしています。</target>
        </trans-unit>
        <trans-unit id="7fd99832c48b48f8c885e9f9d3afe52e1a804201" translate="yes" xml:space="preserve">
          <source>BinStorage works with data that is represented on disk in machine-readable format. BinStorage does NOT support &lt;a href=&quot;#handling-compression&quot;&gt;compression&lt;/a&gt;.</source>
          <target state="translated">BinStorageは、ディスク上で機械可読形式で表されるデータを処理します。BinStorageは&lt;a href=&quot;#handling-compression&quot;&gt;圧縮を&lt;/a&gt;サポートしていません。</target>
        </trans-unit>
        <trans-unit id="e0ca567886380d6457cde112726183a82a8a0418" translate="yes" xml:space="preserve">
          <source>BinStorage()</source>
          <target state="translated">BinStorage()</target>
        </trans-unit>
        <trans-unit id="dcba2ac0accedbd7acc44d5f5c535e4f1460c6c2" translate="yes" xml:space="preserve">
          <source>Bincond operator &amp;ndash; If a Boolean subexpression results in null value, the resulting expression is null (see the interactions above for Arithmetic operators)</source>
          <target state="translated">Bincond演算子&amp;ndash;ブール部分式がnull値になる場合、結果の式はnullになります（算術演算子については上記の相互作用を参照してください）。</target>
        </trans-unit>
        <trans-unit id="83a9e49fc4cb9ac64b7028f07d9d3339609981c4" translate="yes" xml:space="preserve">
          <source>Bind</source>
          <target state="translated">Bind</target>
        </trans-unit>
        <trans-unit id="621327102b26f2c05119b691501a4935cc0c4aee" translate="yes" xml:space="preserve">
          <source>Blacklisting</source>
          <target state="translated">Blacklisting</target>
        </trans-unit>
        <trans-unit id="3ef84d550fdc4824a3f8f451fbfb6aa5b226f219" translate="yes" xml:space="preserve">
          <source>Bloom</source>
          <target state="translated">Bloom</target>
        </trans-unit>
        <trans-unit id="2bf2475a7e51b3f4e7460fe10ff06c734dde772d" translate="yes" xml:space="preserve">
          <source>Bloom Joins</source>
          <target state="translated">ブルームが参加</target>
        </trans-unit>
        <trans-unit id="b490f863ec5ddf6a529c1515f94de24bf143f902" translate="yes" xml:space="preserve">
          <source>Bloom filters are a common way to select a limited set of records before moving data for a join or other heavy weight operation.</source>
          <target state="translated">ブルームフィルタは、結合やその他の重い操作のためにデータを移動する前に、限られたレコードのセットを選択する一般的な方法です。</target>
        </trans-unit>
        <trans-unit id="6199fda5d8e5b6974f14a88bff44fb40a2fd7a8c" translate="yes" xml:space="preserve">
          <source>Bloom filters are a common way to select a limited set of records before moving data for a join or other heavy weight operation. For example, if one wanted to join a very large data set L with a smaller set S, and it was known that the number of keys in L that will match with S is small, building a bloom filter on S and then applying it to L before the join can greatly reduce the number of records from L that have to be moved from the map to the reduce, thus speeding the join.</source>
          <target state="translated">ブルームフィルタは、結合やその他の重い操作のためにデータを移動する前に、限られたレコードのセットを選択する一般的な方法です。例えば、非常に大きなデータセットLと小さなデータセットSを結合したい場合、SにマッチするLのキーの数が少ないことがわかっていた場合、Sにブルームフィルタを構築し、結合前にLに適用することで、マップからリデュースに移動しなければならないLのレコード数を大幅に減らすことができ、結合を高速化することができます。</target>
        </trans-unit>
        <trans-unit id="2f7de4ab07c18ddb23242e06d699dc853ecbf88b" translate="yes" xml:space="preserve">
          <source>Bloom join cannot be used with a FULL OUTER join.</source>
          <target state="translated">ブルーム結合は、FULL OUTER結合では使用できません。</target>
        </trans-unit>
        <trans-unit id="3402188725ecf0e99a3b7622b1bea669f836310b" translate="yes" xml:space="preserve">
          <source>Bloom join is a special type of join where a bloom filter is constructed using join keys of one relation and used to filter records of the other relations before doing a regular hash join. The amount of data sent to the reducers will be a lot less depending up on the numbers of records that are filtered on the map side. Bloom join is very useful in cases where the number of matching records between relations in a join are comparatively less compared to the total records allowing many to be filtered before the join. Before bloom join was added as a type of join, same functionality was achieved by users by using the &lt;a href=&quot;func#bloom&quot;&gt;builtin bloom udfs&lt;/a&gt; which is not as efficient and required more lines of code as well. Currently bloom join is only implemented in Tez execution mode. Builtin bloom udfs have to be used for other execution modes.</source>
          <target state="translated">ブルーム結合は特別なタイプの結合で、1つの関係の結合キーを使用してブルームフィルターが構築され、通常のハッシュ結合を実行する前に他の関係のレコードをフィルター処理するために使用されます。レデューサーに送信されるデータの量は、マップ側でフィルターされるレコードの数に応じて大幅に少なくなります。ブルーム結合は、結合内のリレーション間の一致するレコードの数が合計レコードに比べて比較的少ない場合に非常に便利です。結合前に多くのレコードをフィルタリングできます。結合の一種としてブルーム結合が追加される前は、&lt;a href=&quot;func#bloom&quot;&gt;組み込みのブルームudfs&lt;/a&gt;を使用することにより、同じ機能がユーザーによって実現されていました。これは効率的ではなく、さらに多くのコード行が必要です。現在、ブルーム結合はTez実行モードでのみ実装されています。組み込みのブルームudfsは、他の実行モードで使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="24edee0641f1bfe2fe2ec8534168d935eca3807b" translate="yes" xml:space="preserve">
          <source>Bloom(String filename)</source>
          <target state="translated">ブルーム(文字列ファイル名)</target>
        </trans-unit>
        <trans-unit id="b76ff4906f33c2dd97ddd929b9662ba8cac6174c" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">Boolean</target>
        </trans-unit>
        <trans-unit id="c9ac379f83771407fb1e0d78aaf3f7b5adc6706f" translate="yes" xml:space="preserve">
          <source>Boolean Expressions</source>
          <target state="translated">ブール式</target>
        </trans-unit>
        <trans-unit id="04967741c4271ee06f12a1e39acd461f02a1a16a" translate="yes" xml:space="preserve">
          <source>Boolean Operators</source>
          <target state="translated">ブール演算子</target>
        </trans-unit>
        <trans-unit id="091731d1019107954174fd671f6f0856846a3d19" translate="yes" xml:space="preserve">
          <source>Boolean expressions can be made up of UDFs that return a boolean value or boolean operators (see &lt;a href=&quot;#boolops&quot;&gt;Boolean Operators&lt;/a&gt;).</source>
          <target state="translated">ブール式はブール値またはブール演算子を（参照返すのUDFで構成することができます&lt;a href=&quot;#boolops&quot;&gt;ブール演算子&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="ea6b1479c901a03bee4e9fb9ba5b1453d7e79a83" translate="yes" xml:space="preserve">
          <source>Boolean: boolean</source>
          <target state="translated">ブール値:ブール値</target>
        </trans-unit>
        <trans-unit id="0786cdff946e6084c50bb7df6cacd8ed965599fa" translate="yes" xml:space="preserve">
          <source>Booleans</source>
          <target state="translated">Booleans</target>
        </trans-unit>
        <trans-unit id="a6cf6d57143ef14b17087bc22ec2482f83d734d7" translate="yes" xml:space="preserve">
          <source>BoundScript Object</source>
          <target state="translated">バウンドスクリプトオブジェクト</target>
        </trans-unit>
        <trans-unit id="9018f72a5c3300106fde6c868932df7c498dbece" translate="yes" xml:space="preserve">
          <source>Build Pig</source>
          <target state="translated">ビルドピッグ</target>
        </trans-unit>
        <trans-unit id="d3ba812ccb5dd02574b7c52a54aacf2301a5acc7" translate="yes" xml:space="preserve">
          <source>Build PigUnit</source>
          <target state="translated">PigUnit をビルドします。</target>
        </trans-unit>
        <trans-unit id="d591aaecacb795ebd8be527e5fc80e792afab062" translate="yes" xml:space="preserve">
          <source>Build the code from the top directory: ant</source>
          <target state="translated">トップディレクトリの ant からコードをビルドします。</target>
        </trans-unit>
        <trans-unit id="81f7e17cef88c9c7b63a31e2aee2051c6cd1d181" translate="yes" xml:space="preserve">
          <source>Build the jar file: from directorytrunk/contrib/piggybank/java run ant. This will generate piggybank.jar in the same directory.</source>
          <target state="translated">jarファイルをビルドします。これで同じディレクトリにpiggybank.jarが生成されます。</target>
        </trans-unit>
        <trans-unit id="1fcd4fe2c3b6a15d7346329d03946183a5901801" translate="yes" xml:space="preserve">
          <source>BuildBloom(String hashType, String mode, String vectorSize, String nbHash)</source>
          <target state="translated">BuildBloom(String hashType,String mode,String vectorSize,String nbHash)</target>
        </trans-unit>
        <trans-unit id="18d161572120aa5ca2385817a4e05895af0e67ae" translate="yes" xml:space="preserve">
          <source>Built In Functions</source>
          <target state="translated">内蔵機能</target>
        </trans-unit>
        <trans-unit id="17cb53c0f37443e9bf0f83632c45f7852961389a" translate="yes" xml:space="preserve">
          <source>But suppose that you knew that the label and value fields would never be null. You could define a more precise schema manually using a statement like:</source>
          <target state="translated">しかし、ラベルと値のフィールドが決してnullにならないことを知っていたとします。以下のようなステートメントを使用して、より正確なスキーマを手動で定義することができます。</target>
        </trans-unit>
        <trans-unit id="0d1cc7e0f77e2a5963510dde7238148f8ad8afa3" translate="yes" xml:space="preserve">
          <source>But you can supply your own delimiter</source>
          <target state="translated">しかし、独自の区切り文字を指定することができます。</target>
        </trans-unit>
        <trans-unit id="1bf4bb3fc488eb4c7a42b70d8ec7e1bfd59f5df0" translate="yes" xml:space="preserve">
          <source>By default Pig determines the number of reducers to use for a given job based on the size of the input to the map phase. The input data size is divided by the pig.exec.reducers.bytes.per.reducer parameter value (default 1GB) to determine the number of reducers. The maximum number of reducers for a job is limited by the pig.exec.reducers.max parameter (default 999).</source>
          <target state="translated">デフォルトでは、Pigはマップフェーズへの入力サイズに基づいて、与えられたジョブで使用するレデューサの数を決定します。入力データサイズを pig.exec.reducers.bytes.per.reducer パラメータ値(デフォルトは 1GB)で割って、レデューサの数を決定します。ジョブの最大レデューサ数は、pig.exec.reducers.maxパラメータ(デフォルト999)によって制限されます。</target>
        </trans-unit>
        <trans-unit id="15ae52a6cf38c6b857919c8bd2af0f5e7c1426fc" translate="yes" xml:space="preserve">
          <source>By default, TOP function uses descending order. But it can be configured via DEFINE statement.</source>
          <target state="translated">デフォルトでは、TOP関数は降順を使用します。しかし、DEFINE文で設定することができます。</target>
        </trans-unit>
        <trans-unit id="95ee4b93ca14cb6f7558f6c77dacf5c78a6fd34b" translate="yes" xml:space="preserve">
          <source>By default, when you use AvoStorage to load data, AvroStorage will use depth first search to find a valid Avro file on the input path, then use the schema from that file to load the data. When you use AvroStorage to store data, AvroStorage will attempt to translate the Pig schema to an equivalent Avro schema. You can manually specify the schema by providing an explicit schema in Pig, loading a schema from an external schema file, or explicitly telling Pig to read the schema from a specific avro file.</source>
          <target state="translated">既定では、AvoStorage を使用してデータをロードする場合、AvroStorage は深度優先検索を使用して入力パス上で有効な Avro ファイルを見つけ、そのファイルのスキーマを使用してデータをロードします。AvroStorage を使用してデータを保存する場合、AvroStorage は Pig スキーマを同等の Avro スキーマに変換しようとします。スキーマを手動で指定するには、Pig で明示的なスキーマを提供したり、外部スキーマファイルからスキーマをロードしたり、特定の Avro ファイルからスキーマを読み込むように明示的に Pig に指示したりします。</target>
        </trans-unit>
        <trans-unit id="43462d8dcc25cc369fc5cad9b2008c7bfd6fcd44" translate="yes" xml:space="preserve">
          <source>By doing this, you will save HDFS space used to store the intermediate data used by PIG and potentially improve query execution speed. In general, the more intermediate data that is generated, the more benefits in storage and speed that result.</source>
          <target state="translated">これを行うことで、PIGが使用する中間データを格納するために使用するHDFSのスペースを節約し、潜在的にクエリの実行速度を向上させることができます。一般的に、生成される中間データが多ければ多いほど、結果としてストレージと速度にメリットがあります。</target>
        </trans-unit>
        <trans-unit id="eff5d4cb9e452b26a3350ae0f6563ef4d317404c" translate="yes" xml:space="preserve">
          <source>Byte array (blob)</source>
          <target state="translated">バイト配列(ブロブ</target>
        </trans-unit>
        <trans-unit id="703c04b3340bb6eafd886e786bbcc0167a8aedf6" translate="yes" xml:space="preserve">
          <source>Byte/Short/Integer: int</source>
          <target state="translated">バイト/ショート/整数:int</target>
        </trans-unit>
        <trans-unit id="8e5fdab92dece79d7629d6d901687613ddc6ab5a" translate="yes" xml:space="preserve">
          <source>Bytes</source>
          <target state="translated">Bytes</target>
        </trans-unit>
        <trans-unit id="a02c3ced7d025da788df0e0ae6e66393935dc19d" translate="yes" xml:space="preserve">
          <source>CACHE &amp;ndash; Keyword.</source>
          <target state="translated">CACHE &amp;ndash;キーワード。</target>
        </trans-unit>
        <trans-unit id="9c1f8ee66330cd6444ad9ea2348aac5325942c63" translate="yes" xml:space="preserve">
          <source>CACHE('dfs_path#dfs_file' [, 'dfs_path#dfs_file' &amp;hellip;])</source>
          <target state="translated">CACHE（ 'dfs_path＃dfs_file' [、 'dfs_path＃dfs_file'&amp;hellip;]）</target>
        </trans-unit>
        <trans-unit id="25dda59efbde37867474c7ac7817ae014d55e581" translate="yes" xml:space="preserve">
          <source>CASE : case</source>
          <target state="translated">BOX:ボックス</target>
        </trans-unit>
        <trans-unit id="4bddb81b0ec047b396813830c096a95d9aa92f5e" translate="yes" xml:space="preserve">
          <source>CASE WHEN THEN ELSE END</source>
          <target state="translated">CASE WHEN THEN ELSE END</target>
        </trans-unit>
        <trans-unit id="d593a77520938048562134b083ee21f384cf86fa" translate="yes" xml:space="preserve">
          <source>CASE [ WHEN condition THEN value ]+ [ ELSE value ]? END</source>
          <target state="translated">CASE[WHEN condition THEN value ]+[ELSE value ]?終了</target>
        </trans-unit>
        <trans-unit id="f84cf943477b79a70b16eb09c9c33707a500055f" translate="yes" xml:space="preserve">
          <source>CASE expression [ WHEN value THEN value ]+ [ ELSE value ]? END</source>
          <target state="translated">CASE式[WHEN value THEN value ]+[ELSE value ]?終了</target>
        </trans-unit>
        <trans-unit id="1264e7eb4b20dc6000ef45c1c07db793592dd224" translate="yes" xml:space="preserve">
          <source>CBRT</source>
          <target state="translated">CBRT</target>
        </trans-unit>
        <trans-unit id="809670dc236157cba7e20398211c3208180791ab" translate="yes" xml:space="preserve">
          <source>CBRT(expression)</source>
          <target state="translated">CBRT(expression)</target>
        </trans-unit>
        <trans-unit id="47f02b51c01ebeac5cb6c70853e77684359bf494" translate="yes" xml:space="preserve">
          <source>CEIL</source>
          <target state="translated">CEIL</target>
        </trans-unit>
        <trans-unit id="cb33f60eca542bac46d5f3d17cbb4d964a664066" translate="yes" xml:space="preserve">
          <source>CEIL(expression)</source>
          <target state="translated">CEIL(expression)</target>
        </trans-unit>
        <trans-unit id="57238007cd7bef289664d41bd9c8598b4f1baefc" translate="yes" xml:space="preserve">
          <source>CEIL(x)</source>
          <target state="translated">CEIL(x)</target>
        </trans-unit>
        <trans-unit id="d9a1d355384a14bc732d4a7b06d0dd9368c26935" translate="yes" xml:space="preserve">
          <source>COGROUP</source>
          <target state="translated">COGROUP</target>
        </trans-unit>
        <trans-unit id="61d2357ea1cf20b65e598094448e91d1a48634c3" translate="yes" xml:space="preserve">
          <source>COGROUP, GROUP, JOIN</source>
          <target state="translated">グループ、グループ、結合</target>
        </trans-unit>
        <trans-unit id="19079cc7f1267e0ab6f98c7f86edde6822ec26eb" translate="yes" xml:space="preserve">
          <source>CONCAT</source>
          <target state="translated">CONCAT</target>
        </trans-unit>
        <trans-unit id="a4df178f52eff1f27c82ed99784d7505359ccd79" translate="yes" xml:space="preserve">
          <source>CONCAT (expression, expression, [...expression])</source>
          <target state="translated">コンキャット</target>
        </trans-unit>
        <trans-unit id="9edf4f88e9dd701e66a0cb283875180b8f59ff3d" translate="yes" xml:space="preserve">
          <source>COS</source>
          <target state="translated">COS</target>
        </trans-unit>
        <trans-unit id="9cdcd6fb1f83c73bcbe631361f3bdb402bbaeca2" translate="yes" xml:space="preserve">
          <source>COS(expression)</source>
          <target state="translated">COS(expression)</target>
        </trans-unit>
        <trans-unit id="d1ed328c0d6ea0ce10316f1a6e51f6251cbb1ed9" translate="yes" xml:space="preserve">
          <source>COSH</source>
          <target state="translated">COSH</target>
        </trans-unit>
        <trans-unit id="1a52483f1cfe58f112bf651bfb837988fd694b54" translate="yes" xml:space="preserve">
          <source>COSH(expression)</source>
          <target state="translated">COSH(expression)</target>
        </trans-unit>
        <trans-unit id="e2bf90245c3eae70b50309837f6647c1f83fdf58" translate="yes" xml:space="preserve">
          <source>COUNT</source>
          <target state="translated">COUNT</target>
        </trans-unit>
        <trans-unit id="92e0c4f41f3a6b19ae2d9280ba49c3f2b0b08c6b" translate="yes" xml:space="preserve">
          <source>COUNT implements Algebraic interface which looks like this:</source>
          <target state="translated">COUNTは以下のような代数的なインターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="63bf32efa3f79b5efeeafde859ce2bd68cc2940a" translate="yes" xml:space="preserve">
          <source>COUNT(expression)</source>
          <target state="translated">COUNT(expression)</target>
        </trans-unit>
        <trans-unit id="63abfdfedef17ad1caed7b55497d12fdc08598d1" translate="yes" xml:space="preserve">
          <source>COUNT_STAR</source>
          <target state="translated">COUNT_STAR</target>
        </trans-unit>
        <trans-unit id="84180b26541e787dbead7274fe837ebfc06fa2d3" translate="yes" xml:space="preserve">
          <source>COUNT_STAR includes NULL values in the count computation (unlike &lt;a href=&quot;#count&quot;&gt;COUNT&lt;/a&gt;, which ignores NULL values).</source>
          <target state="translated">COUNT_STARは、カウント計算にNULL値を含めます（NULL値を無視する&lt;a href=&quot;#count&quot;&gt;COUNT&lt;/a&gt;とは異なります）。</target>
        </trans-unit>
        <trans-unit id="9589b5312bee6763bef809f91a5689bcc422b2cf" translate="yes" xml:space="preserve">
          <source>COUNT_STAR(expression)</source>
          <target state="translated">COUNT_STAR(expression)</target>
        </trans-unit>
        <trans-unit id="7ea4fbcff919d74664df2b3abbe9c64927134ca1" translate="yes" xml:space="preserve">
          <source>CROSS</source>
          <target state="translated">CROSS</target>
        </trans-unit>
        <trans-unit id="d8cf38a47dfe68117b445e7444d00b2e58cce5ca" translate="yes" xml:space="preserve">
          <source>CROSS is an expensive operation and should be used sparingly.</source>
          <target state="translated">CROSSは高稼働なので、惜しみなく使うべきです。</target>
        </trans-unit>
        <trans-unit id="d4669b26661226d1080b57113a2265ca0df06a9c" translate="yes" xml:space="preserve">
          <source>CUBE</source>
          <target state="translated">CUBE</target>
        </trans-unit>
        <trans-unit id="f4113d57bab7aef4717841180b5549f01039bdc3" translate="yes" xml:space="preserve">
          <source>Cache Archive</source>
          <target state="translated">キャッシュアーカイブ</target>
        </trans-unit>
        <trans-unit id="897a9f8e3d8fd1a7d212189812735fee2110b172" translate="yes" xml:space="preserve">
          <source>Calculates a &quot;popularity&quot; score for the n-gram.</source>
          <target state="translated">n-gramの「人気度」スコアを計算します。</target>
        </trans-unit>
        <trans-unit id="7633fb83abb82cb5b7dce0eb512f33705f2b961c" translate="yes" xml:space="preserve">
          <source>Call the NGramGenerator UDF to compose the n-grams of the query.</source>
          <target state="translated">NGramGenerator UDF を呼び出して、クエリの n-gram を構成します。</target>
        </trans-unit>
        <trans-unit id="78ebe38efd79c381fef993c9ecdc3beffd7d8a29" translate="yes" xml:space="preserve">
          <source>Call the NonURLDetector UDF to remove records if the query field is empty or a URL.</source>
          <target state="translated">NonURLDetector UDFを呼び出して、クエリフィールドが空の場合やURLの場合にレコードを削除します。</target>
        </trans-unit>
        <trans-unit id="85686575d015c46036845dba435ad378e6074f9c" translate="yes" xml:space="preserve">
          <source>Call the ToLower UDF to change the query field to lowercase.</source>
          <target state="translated">クエリフィールドを小文字に変更するためにToLower UDFを呼び出します。</target>
        </trans-unit>
        <trans-unit id="26057558c8d1ceba1dfb290d88fd8159c1794732" translate="yes" xml:space="preserve">
          <source>Case Sensitivity</source>
          <target state="translated">ケース感度</target>
        </trans-unit>
        <trans-unit id="686547c3088245230a160a7e0634a13586de3914" translate="yes" xml:space="preserve">
          <source>Case insensitive.</source>
          <target state="translated">大文字小文字を区別しません。</target>
        </trans-unit>
        <trans-unit id="7873929ddf881b1609b1a6c7da8b0957fe7f0e65" translate="yes" xml:space="preserve">
          <source>Case operator is equivalent to nested bincond operators.</source>
          <target state="translated">大文字小文字演算子は、入れ子になったビンコン演算子と同等です。</target>
        </trans-unit>
        <trans-unit id="5a95ed2864a76fc66062c5a7f51b3cb5c4d55c8a" translate="yes" xml:space="preserve">
          <source>Cast Operators</source>
          <target state="translated">キャストオペレーター</target>
        </trans-unit>
        <trans-unit id="97ba68fc56a3efba444f7c6353ffce14d1fabcb2" translate="yes" xml:space="preserve">
          <source>Cast operator</source>
          <target state="translated">キャストオペレータ</target>
        </trans-unit>
        <trans-unit id="c1d4be38e660193f2a954b1b03baad03fc56e532" translate="yes" xml:space="preserve">
          <source>Cast operators enable you to cast or convert data from one type to another, as long as conversion is supported (see the table above). For example, suppose you have an integer field, myint, which you want to convert to a string. You can cast this field from int to chararray using (chararray)myint.</source>
          <target state="translated">キャスト演算子は、変換がサポートされている限り、ある型から別の型へのデータのキャストや変換を可能にします(上の表を参照してください)。例えば、文字列に変換したい整数フィールドmyintがあるとします。このフィールドをintからchararrayにキャストするには、(chararray)myintを使用します。</target>
        </trans-unit>
        <trans-unit id="89afc7b02dce461eaab47536c34f98ce6705a599" translate="yes" xml:space="preserve">
          <source>Casting Relations to Scalars</source>
          <target state="translated">スカラーズとキャスティングの関係</target>
        </trans-unit>
        <trans-unit id="5561df78f96adb1b06bdd9dea00c3303d27015f0" translate="yes" xml:space="preserve">
          <source>Casting a null from one type to another type results in a null.</source>
          <target state="translated">ある型から別の型にヌルをキャストすると、ヌルになります。</target>
        </trans-unit>
        <trans-unit id="3ffa70fc7594317492de738b40cad1f05ef27d5a" translate="yes" xml:space="preserve">
          <source>Changes the query field to lowercase.</source>
          <target state="translated">クエリフィールドを小文字に変更します。</target>
        </trans-unit>
        <trans-unit id="31e8f5b3a2fdbea62cb054aefa879f03617f38c2" translate="yes" xml:space="preserve">
          <source>Changes the sign of a positive or negative number.</source>
          <target state="translated">正または負の数の符号を変更します。</target>
        </trans-unit>
        <trans-unit id="995e5af086c799345cfff79290263b12e1c170e6" translate="yes" xml:space="preserve">
          <source>Character array (string) in Unicode UTF-8 format</source>
          <target state="translated">Unicode UTF-8形式の文字配列</target>
        </trans-unit>
        <trans-unit id="951d999693844d2e216141efd80ff1eb9e3c4348" translate="yes" xml:space="preserve">
          <source>Check out the Pig code from SVN: svn co http://svn.apache.org/repos/asf/pig/trunk</source>
          <target state="translated">SVNからPigのコードをチェックしてみてください:svn co http://svn.apache.org/repos/asf/pig/trunk</target>
        </trans-unit>
        <trans-unit id="05d0a08eb4af8e7cfbcd5ebe464f2237e2c7f507" translate="yes" xml:space="preserve">
          <source>Check the existing javadoc to make sure that the function does not already exist as described in &lt;a href=&quot;#piggbank-access&quot;&gt;Accessing Functions&lt;/a&gt;.</source>
          <target state="translated">既存のjavadocをチェックして、関数&lt;a href=&quot;#piggbank-access&quot;&gt;へのアクセスで&lt;/a&gt;説明されているように、関数がまだ存在していないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="b3dc9b8a00e2c52bd36be51e1b203feb64473349" translate="yes" xml:space="preserve">
          <source>Checkout UDF code: svn co http://svn.apache.org/repos/asf/pig/trunk/contrib/piggybank</source>
          <target state="translated">UDFコードをチェックアウト:svn co http://svn.apache.org/repos/asf/pig/trunk/contrib/piggybank</target>
        </trans-unit>
        <trans-unit id="7aefc9de31fb7e8c4933ea3e3c5d5d7e8a0b3a38" translate="yes" xml:space="preserve">
          <source>Checkout the UDF code as described in &lt;a href=&quot;#piggbank-access&quot;&gt;Accessing Functions&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#piggbank-access&quot;&gt;関数へのアクセスで&lt;/a&gt;説明されているUDFコードをチェックアウトします。</target>
        </trans-unit>
        <trans-unit id="a8d0b4551d8ddf813fb85312a542c3dad06cd59d" translate="yes" xml:space="preserve">
          <source>Checks if a bag or map is empty.</source>
          <target state="translated">バッグや地図が空かどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="eb097bdcbbf411e7f4af2f1e5646a166f52b5036" translate="yes" xml:space="preserve">
          <source>Classpath in Mapreduce Mode</source>
          <target state="translated">Mapreduceモードでのクラスパス</target>
        </trans-unit>
        <trans-unit id="d3691764851cad68ba80ad5e8fe636a4af2dcc0b" translate="yes" xml:space="preserve">
          <source>Clean up static variable in Tez</source>
          <target state="translated">Tez の静的変数をクリーンアップ</target>
        </trans-unit>
        <trans-unit id="5834db4b5dbea1c44492f8e208898a50ddfaaf1a" translate="yes" xml:space="preserve">
          <source>Clear the screen of Pig grunt shell and position the cursor at top of the screen.</source>
          <target state="translated">Pig grunt shellの画面をクリアして、カーソルを画面上部に配置します。</target>
        </trans-unit>
        <trans-unit id="1605056e4d309d49c970e63742a296cacc017c71" translate="yes" xml:space="preserve">
          <source>Column family prefix</source>
          <target state="translated">列ファミリの接頭辞</target>
        </trans-unit>
        <trans-unit id="6d2e354ebe34ad6f8bf96f940f53151619e5e5a9" translate="yes" xml:space="preserve">
          <source>Column qualifier prefix</source>
          <target state="translated">列修飾子の接頭辞</target>
        </trans-unit>
        <trans-unit id="62838716e79a18596cfb80d0354b1ce8922b29bf" translate="yes" xml:space="preserve">
          <source>ColumnMapKeyPrune</source>
          <target state="translated">ColumnMapKeyPrune</target>
        </trans-unit>
        <trans-unit id="7ad7b7e1f056d8d1b6641e11e697052b7dab5bbf" translate="yes" xml:space="preserve">
          <source>ColumnMapKeyPrune also prunes unused map keys:</source>
          <target state="translated">ColumnMapKeyPrune は、使用されていないマップキーの剪定も行います。</target>
        </trans-unit>
        <trans-unit id="8e3426653ed5a4705972948dec8a797240d9caf1" translate="yes" xml:space="preserve">
          <source>Combine Small Input Files</source>
          <target state="translated">小さな入力ファイルを結合する</target>
        </trans-unit>
        <trans-unit id="0bce653fb6ea1bc8b2ca15bcd7b72428b469c9fc" translate="yes" xml:space="preserve">
          <source>Combined Scripts</source>
          <target state="translated">複合スクリプト</target>
        </trans-unit>
        <trans-unit id="3254c0b1a1ded638067647659a40da16ce9b17fd" translate="yes" xml:space="preserve">
          <source>Combiner</source>
          <target state="translated">Combiner</target>
        </trans-unit>
        <trans-unit id="3087d5b48dbbe1194c6a9ba8039bb27fbcb4c7c5" translate="yes" xml:space="preserve">
          <source>Command line parameters and parameter files can be combined with command line parameters taking precedence.</source>
          <target state="translated">コマンドラインパラメータとパラメータファイルは、コマンドラインパラメータを優先して組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="b3f7989370db1b8dddf391028455f4397eb24f47" translate="yes" xml:space="preserve">
          <source>Command line parameters are scanned in the order they are specified on the command line.</source>
          <target state="translated">コマンドラインのパラメータは、コマンドラインで指定された順にスキャンされます。</target>
        </trans-unit>
        <trans-unit id="3e538a3732da323f6fc16be62970890cf4658d57" translate="yes" xml:space="preserve">
          <source>Common problems you may encounter are discussed below.</source>
          <target state="translated">あなたが遭遇する可能性のある一般的な問題を以下に説明します。</target>
        </trans-unit>
        <trans-unit id="dff8a6afef85ec10d66c35b1251c91c74754f7f3" translate="yes" xml:space="preserve">
          <source>Compares two Strings ignoring case considerations.</source>
          <target state="translated">ケースの考慮事項を無視して2つのストリングスを比較します。</target>
        </trans-unit>
        <trans-unit id="762fdd5e70e9fc418d3b09b86c28c19b3631e485" translate="yes" xml:space="preserve">
          <source>Compares two fields in a tuple.</source>
          <target state="translated">タプル内の2つのフィールドを比較します。</target>
        </trans-unit>
        <trans-unit id="25acda77b0bc6b058bd349dd6f4a271e2a967bfe" translate="yes" xml:space="preserve">
          <source>Comparison Operators</source>
          <target state="translated">比較演算子</target>
        </trans-unit>
        <trans-unit id="74f6692abeb3fa3be0bec25d2d0078edbe627529" translate="yes" xml:space="preserve">
          <source>Comparison operator:</source>
          <target state="translated">比較演算子。</target>
        </trans-unit>
        <trans-unit id="a7de33d110c915ab8e665813e77fafb72e84afb2" translate="yes" xml:space="preserve">
          <source>Comparison operators:</source>
          <target state="translated">比較演算子。</target>
        </trans-unit>
        <trans-unit id="c2f3e610efaad31893ca9eea02ebda3f70c91261" translate="yes" xml:space="preserve">
          <source>Compile</source>
          <target state="translated">Compile</target>
        </trans-unit>
        <trans-unit id="24fb061736c9186cc8f4cbd2cad61077bfa37e6b" translate="yes" xml:space="preserve">
          <source>Compile returns an instance of Pig object. This object can have certain values undefined. For example, you may want to define a pipeline without yet specifying the location of the input to the pipeline. The parameter will be indicated by a dollar sign followed by a sequence of alpha-numeric or underscore characters. Values for these parameters must be provided later at the time bind() is called on the Pig object. To call run() on a Pig object without all parameters being bound is an error.</source>
          <target state="translated">Compile は Pig オブジェクトのインスタンスを返します。このオブジェクトは、特定の値を未定義にすることができます。例えば、パイプラインへの入力の場所をまだ指定せずにパイプラインを定義したい場合などです。パラメータは、ドル記号の後に英数字またはアンダースコア文字のシーケンスで示されます。これらのパラメータの値は、後で Pig オブジェクト上で bind()を呼び出す際に提供する必要があります。すべてのパラメータがバインドされていない状態で Pig オブジェクト上で run()を呼び出すとエラーとなります。</target>
        </trans-unit>
        <trans-unit id="627c1a6bdf5bd4629f68282cc75c4e809c5d6b7f" translate="yes" xml:space="preserve">
          <source>Compile time evaluation</source>
          <target state="translated">コンパイル時間評価</target>
        </trans-unit>
        <trans-unit id="99d4b8d0504f4971618f493ddedfe35c280300ef" translate="yes" xml:space="preserve">
          <source>Complex Pig scripts often generate many MapReduce jobs. To help you debug a script, Pig prints a summary of the execution that shows which relations (aliases) are mapped to each MapReduce job.</source>
          <target state="translated">複雑なPigスクリプトは、多くのMapReduceジョブを生成することが多い。スクリプトをデバッグするのに役立つように、Pigは実行のサマリーを表示し、どのリレーション(エイリアス)が各MapReduceジョブにマップされているかを示します。</target>
        </trans-unit>
        <trans-unit id="64ce6788069d471cb2587d25c88affda9be267c5" translate="yes" xml:space="preserve">
          <source>Complex constants (either with or without values) can be used in the same places scalar constants can be used; that is, in FILTER and GENERATE statements.</source>
          <target state="translated">複素定数(値の有無に関わらず)は、スカラ定数と同じ場所で使用することができます。</target>
        </trans-unit>
        <trans-unit id="da4b23da53c3777ef41bc61293ffe5bcaa9ae12a" translate="yes" xml:space="preserve">
          <source>Complex data types include tuples, bags, and maps.</source>
          <target state="translated">複雑なデータ型には、タプル、バッグ、マップなどがあります。</target>
        </trans-unit>
        <trans-unit id="e1431ea749e26770a721b743da55fc3888913734" translate="yes" xml:space="preserve">
          <source>Composes n-grams from the set of words.</source>
          <target state="translated">単語の集合からn-gramを構成します。</target>
        </trans-unit>
        <trans-unit id="b5866bc1caf631ef6db627a15b013b81de2a00dd" translate="yes" xml:space="preserve">
          <source>Compress the Results of Intermediate Jobs</source>
          <target state="translated">中間ジョブの結果を圧縮する</target>
        </trans-unit>
        <trans-unit id="68d75c42f435c8631700579b9fd79cb3ac445482" translate="yes" xml:space="preserve">
          <source>Computes the average of the numeric values in a single-column bag.</source>
          <target state="translated">1列バッグ内の数値の平均を計算します。</target>
        </trans-unit>
        <trans-unit id="2891cdf3a7692be59069c53ade96eed02e6b052c" translate="yes" xml:space="preserve">
          <source>Computes the cross product of two or more relations.</source>
          <target state="translated">2つ以上の関係の交積を計算します。</target>
        </trans-unit>
        <trans-unit id="bd19f2c54d768fb8e894978a41490a6071e2852c" translate="yes" xml:space="preserve">
          <source>Computes the maximum of the numeric values or chararrays in a single-column bag. MAX requires a preceding GROUP ALL statement for global maximums and a GROUP BY statement for group maximums.</source>
          <target state="translated">1列バッグ内の数値または文字列の最大値を計算します。MAXを使用するには、グローバル最大値の場合はGROUP ALL文、グループ最大値の場合はGROUP BY文が必要です。</target>
        </trans-unit>
        <trans-unit id="781e2392f3673570db0e16ae2bf362595259d92d" translate="yes" xml:space="preserve">
          <source>Computes the minimum of the numeric values or chararrays in a single-column bag. MIN requires a preceding GROUP&amp;hellip; ALL statement for global minimums and a GROUP &amp;hellip; BY statement for group minimums.</source>
          <target state="translated">単一列バッグ内の数値またはchararrayの最小値を計算します。MINには、グローバル最小値の前にGROUP&amp;hellip;ALLステートメント、およびグループ最小値のGROUP&amp;hellip;BYステートメントが必要です。</target>
        </trans-unit>
        <trans-unit id="16fe1b8bf8ba65afe18482bd4a429a620d0e0085" translate="yes" xml:space="preserve">
          <source>Computes the number of elements based on any Pig data type.</source>
          <target state="translated">任意のPigデータ型に基づいて要素数を計算します。</target>
        </trans-unit>
        <trans-unit id="259bbcb53d11033429cbe9b733a0d1065b5342cf" translate="yes" xml:space="preserve">
          <source>Computes the number of elements in a bag.</source>
          <target state="translated">バッグ内の要素数を計算します。</target>
        </trans-unit>
        <trans-unit id="3aa74f97eceaf3621205a5024fb680e6a7db859a" translate="yes" xml:space="preserve">
          <source>Computes the sum of the numeric values in a single-column bag. SUM requires a preceding GROUP ALL statement for global sums and a GROUP BY statement for group sums.</source>
          <target state="translated">1列のバッグ内の数値の合計を計算します。SUMには、グローバル合計にはGROUP ALL文、グループ合計にはGROUP BY文が必要です。</target>
        </trans-unit>
        <trans-unit id="e8f8fa9f1a5b634b2d8293cd0be4ea93bbbd6448" translate="yes" xml:space="preserve">
          <source>Computes the union of two or more relations.</source>
          <target state="translated">2つ以上の関係の和を計算します。</target>
        </trans-unit>
        <trans-unit id="953552ec4f49eb511470710579c3441f038a5f81" translate="yes" xml:space="preserve">
          <source>Concatenate the elements of a Bag into a chararray string, placing an optional delimiter between each value.</source>
          <target state="translated">Bagの要素を連結して文字列にし、各値の間にオプションの区切り文字を入れます。</target>
        </trans-unit>
        <trans-unit id="a50fa4950df193ca79197772974f2603f8ce2edf" translate="yes" xml:space="preserve">
          <source>Concatenates two or more expressions of identical type.</source>
          <target state="translated">同一型の2つ以上の式を連結します。</target>
        </trans-unit>
        <trans-unit id="368834630d459ecc51471d8ef1eb3550a7af82cb" translate="yes" xml:space="preserve">
          <source>Conditional Compilation</source>
          <target state="translated">条件付きコンパイル</target>
        </trans-unit>
        <trans-unit id="5506eb6161a07356d96e91770d25d5a0f22200ef" translate="yes" xml:space="preserve">
          <source>Conditions</source>
          <target state="translated">Conditions</target>
        </trans-unit>
        <trans-unit id="fa731f861f1790542d39cd4d3d9051ad447d6b05" translate="yes" xml:space="preserve">
          <source>ConstantCalculator</source>
          <target state="translated">ConstantCalculator</target>
        </trans-unit>
        <trans-unit id="0f386d7e7881b32fa39cb7b62bdb15c0f3a4c0e1" translate="yes" xml:space="preserve">
          <source>Constants</source>
          <target state="translated">Constants</target>
        </trans-unit>
        <trans-unit id="edfe3fe416801e37cd88da5d0aa29057e9570fab" translate="yes" xml:space="preserve">
          <source>Continuing on, as shown in these FOREACH statements, we can refer to the fields in relation B by names &quot;group&quot; and &quot;A&quot; or by positional notation.</source>
          <target state="translated">続けて、これらのforeach文に示すように、関係Bのフィールドを「グループ」「A」という名前で参照したり、位置表記で参照したりすることができる。</target>
        </trans-unit>
        <trans-unit id="977e646d358c075361c97abc9a3e0c6ada79f4f2" translate="yes" xml:space="preserve">
          <source>Contributing Functions</source>
          <target state="translated">貢献機能</target>
        </trans-unit>
        <trans-unit id="49551177d73377982310b6a218929215d8146939" translate="yes" xml:space="preserve">
          <source>Control Structures</source>
          <target state="translated">制御構造</target>
        </trans-unit>
        <trans-unit id="fa84f17a51b78d2a399b863b5b81838719cacf24" translate="yes" xml:space="preserve">
          <source>Convention</source>
          <target state="translated">Convention</target>
        </trans-unit>
        <trans-unit id="61856b8c17a4ff32006fe4b7dcc6f96f253b2120" translate="yes" xml:space="preserve">
          <source>Conventions</source>
          <target state="translated">Conventions</target>
        </trans-unit>
        <trans-unit id="2cab06ba1537b5cc789203048031500739aba455" translate="yes" xml:space="preserve">
          <source>Conventions for the syntax and code examples in the Pig Latin Reference Manual are described here.</source>
          <target state="translated">ここでは、Pig Latin Reference Manualの構文とコード例の規約を説明します。</target>
        </trans-unit>
        <trans-unit id="4e80186bff955c4164f424d4ecf5aaac946a57e2" translate="yes" xml:space="preserve">
          <source>Convergence</source>
          <target state="translated">Convergence</target>
        </trans-unit>
        <trans-unit id="22447a2051656e9276e43737bf5f0a8427386d68" translate="yes" xml:space="preserve">
          <source>Converts all characters in a string to lower case.</source>
          <target state="translated">文字列内のすべての文字を小文字に変換します。</target>
        </trans-unit>
        <trans-unit id="7b8ad8e1965955c62208647c53052185b418e7ea" translate="yes" xml:space="preserve">
          <source>Converts key/value expression pairs into a map.</source>
          <target state="translated">キー/値の式のペアをマップに変換します。</target>
        </trans-unit>
        <trans-unit id="3c2ffc1a844c6412131a6457d870f19e04553a50" translate="yes" xml:space="preserve">
          <source>Converts one or more expressions to type bag.</source>
          <target state="translated">1つ以上の式をバッグ型に変換します。</target>
        </trans-unit>
        <trans-unit id="63af98fd9dd364c1de90448bc37db4a35e74f2b0" translate="yes" xml:space="preserve">
          <source>Converts one or more expressions to type tuple.</source>
          <target state="translated">1つ以上の式をタプル型に変換します。</target>
        </trans-unit>
        <trans-unit id="e9173acc8f1bf681298ed4d60389c6d410b1ec34" translate="yes" xml:space="preserve">
          <source>Converts the first character in a string to lower case.</source>
          <target state="translated">文字列の最初の文字を小文字に変換します。</target>
        </trans-unit>
        <trans-unit id="0f2d67238eb128cd82a6b5504d7f63755693a7c1" translate="yes" xml:space="preserve">
          <source>Copy the excite.log.bz2 file from the pigtmp directory to the HDFS directory.</source>
          <target state="translated">excite.log.bz2ファイルをpigtmpディレクトリからHDFSディレクトリにコピーします。</target>
        </trans-unit>
        <trans-unit id="e47e20a3c28f97f025c467edd8cb6db0cc5647dc" translate="yes" xml:space="preserve">
          <source>Copy the pigtutorial.tar.gz file from the Pig tutorial directory to your local directory.</source>
          <target state="translated">Pig tutorial ディレクトリから pigtutorial.tar.gz ファイルをローカルディレクトリにコピーしてください。</target>
        </trans-unit>
        <trans-unit id="637b1d6e93e8819232e74cc78c253d76277bc676" translate="yes" xml:space="preserve">
          <source>Create a keytab file for the required principal.</source>
          <target state="translated">必要なプリンシパルのkeytabファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="301276d5509597c6ddb83ad5dd55f70c0d4cc532" translate="yes" xml:space="preserve">
          <source>Create the pigtutorial.tar.gz file:</source>
          <target state="translated">pigtutorial.tar.gzファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="69f2e4721ddacc3cb4e8c926ed22929260d61e42" translate="yes" xml:space="preserve">
          <source>Cube operation</source>
          <target state="translated">キューブ操作</target>
        </trans-unit>
        <trans-unit id="624cfb768588cc250267271458d02acc69e0d625" translate="yes" xml:space="preserve">
          <source>Cube operation computes aggregates for all possbile combinations of specified group by dimensions. The number of group by combinations generated by cube for n dimensions will be 2^n.</source>
          <target state="translated">キューブ操作は、指定された次元ごとのグループのすべての可能性のある組み合わせの集約を計算します。キューブによって生成されたn個の次元別グループの組み合わせの数は2^nとなります。</target>
        </trans-unit>
        <trans-unit id="8730f2d8696397fb442457096c2e2d0b979ac422" translate="yes" xml:space="preserve">
          <source>Curly brackets also used to indicate the bag data type. In this case &amp;lt;&amp;gt; is used to indicate required items.</source>
          <target state="translated">中括弧は、バッグのデータ型を示すためにも使用されます。この場合、&amp;lt;&amp;gt;は必須項目を示すために使用されます。</target>
        </trans-unit>
        <trans-unit id="d76638bb5e5a5dcea4aaad2d039008b89ce724ac" translate="yes" xml:space="preserve">
          <source>Curly brackets enclose two or more items, one of which is required.</source>
          <target state="translated">巻き括弧は2つ以上の項目を囲み、そのうちの1つが必要です。</target>
        </trans-unit>
        <trans-unit id="d540c0153415895b0c20d227be79ff67ee364edb" translate="yes" xml:space="preserve">
          <source>CurrentTime</source>
          <target state="translated">CurrentTime</target>
        </trans-unit>
        <trans-unit id="cb9e8cac8fed135531ead79ae1738ee31ac3cf44" translate="yes" xml:space="preserve">
          <source>CurrentTime()</source>
          <target state="translated">CurrentTime()</target>
        </trans-unit>
        <trans-unit id="eab62ff4ba3b96fc5558c305eea6a9e9c8f3e5fc" translate="yes" xml:space="preserve">
          <source>Currently known issue in Tez mode includes:</source>
          <target state="translated">Tezモードで現在知られている問題には以下のものがあります。</target>
        </trans-unit>
        <trans-unit id="5887ff6e46804d97dd9b7b75fc79747d7f14d67a" translate="yes" xml:space="preserve">
          <source>Currently supported options are:</source>
          <target state="translated">現在サポートされているオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="4e812292848afafa52d8add6ebd5b7c49b1a9528" translate="yes" xml:space="preserve">
          <source>Currently the MonitoredUDF annotation works with regular and Algebraic UDFs, but has no effect on UDFs that run in the Accumulator mode.</source>
          <target state="translated">現在のところ、MonitoredUDFアノテーションは通常のUDFと代数UDFで動作しますが、アキュムレータ・モードで動作するUDFには影響しません。</target>
        </trans-unit>
        <trans-unit id="f921824fdfdf7e03a63178393f8baf604b41f5ba" translate="yes" xml:space="preserve">
          <source>Currently this feature is only available in Python and Groovy. You can pass command line arguments (the arguments after the script file name) to Python. These will become sys.argv in Python and will be passed as main's arguments in Groovy. For example: pig script.py student.txt. The corresponding script is:</source>
          <target state="translated">現在のところ、この機能はPythonとGroovyでしか利用できません。コマンドライン引数(スクリプトファイル名の後の引数)をPythonに渡すことができます。これらはPythonではsys.argvとなり、Groovyではmainの引数として渡されます。例:pig script.py student.txt.対応するスクリプトは</target>
        </trans-unit>
        <trans-unit id="e6c94e160e2bf6558bdc7676f9ae7bc4156ecd4c" translate="yes" xml:space="preserve">
          <source>Currently, &lt;a href=&quot;http://pig.apache.org/docs/r0.13.0/api/org/apache/pig/PigServer.html&quot;&gt;PigServer&lt;/a&gt; is the main interface for embedding Pig in Java. PigServer can now be instantiated from multiple threads. (In the past, PigServer contained references to static data that prevented multiple instances of the object to be created from different threads within your application.) Please note that PigServer is NOT thread safe; the same object can't be shared across multiple threads.</source>
          <target state="translated">現在、&lt;a href=&quot;http://pig.apache.org/docs/r0.13.0/api/org/apache/pig/PigServer.html&quot;&gt;PigServer&lt;/a&gt;はJavaにPigを埋め込むためのメインインターフェイスです。PigServerは複数のスレッドからインスタンス化できるようになりました。（以前は、PigServerには、アプリケーション内の異なるスレッドからオブジェクトの複数のインスタンスを作成できないようにする静的データへの参照が含まれていました。）PigServerはスレッドセーフではないことに注意してください。同じオブジェクトを複数のスレッド間で共有することはできません。</target>
        </trans-unit>
        <trans-unit id="51b6657e6963a591aeb3a066fd9921d2abc46dfc" translate="yes" xml:space="preserve">
          <source>Currently, &lt;a href=&quot;https://pig.apache.org/docs/r0.13.0/api/org/apache/pig/PigServer.html&quot;&gt;PigServer&lt;/a&gt; is the main interface for embedding Pig in Java. PigServer can now be instantiated from multiple threads. (In the past, PigServer contained references to static data that prevented multiple instances of the object to be created from different threads within your application.) Please note that PigServer is NOT thread safe; the same object can't be shared across multiple threads.</source>
          <target state="translated">現在、&lt;a href=&quot;https://pig.apache.org/docs/r0.13.0/api/org/apache/pig/PigServer.html&quot;&gt;PigServer&lt;/a&gt;はPigをJavaに埋め込むためのメインインターフェースです。PigServerを複数のスレッドからインスタンス化できるようになりました。（以前は、PigServerには静的データへの参照が含まれていたため、アプリケーション内の異なるスレッドからオブジェクトの複数のインスタンスを作成できませんでした。）PigServerはスレッドセーフではないことに注意してください。同じオブジェクトを複数のスレッド間で共有することはできません。</target>
        </trans-unit>
        <trans-unit id="02caba8f873739ed6f4c7591b34e98a0607b6f51" translate="yes" xml:space="preserve">
          <source>Currently, TextLoader support for compression is limited.</source>
          <target state="translated">現在のところ、TextLoaderの圧縮のサポートは限られています。</target>
        </trans-unit>
        <trans-unit id="318696e8c8efe2f664baf3bea3674ed8dfbdc815" translate="yes" xml:space="preserve">
          <source>Currently, dynamic invokers can be used for any static function that:</source>
          <target state="translated">現在のところ、動的インボカは、任意の静的関数に使用することができます。</target>
        </trans-unit>
        <trans-unit id="e668d12c6fda6f044eb4fa7943e937b63474896c" translate="yes" xml:space="preserve">
          <source>Currently, the following expressions in filter condition are supported in OrcStorage predicate pushdown: &amp;gt;, &amp;gt;=, &amp;lt;, &amp;lt;=, ==, !=, between, in, and, or, not. The missing expressions are: is null, is not null, matches.</source>
          <target state="translated">現在、フィルター条件の次の式がOrcStorage述語プッシュダウンでサポートされています：&amp;gt;、&amp;gt; =、&amp;lt;、&amp;lt;=、==、！=、between、in、and、or、not。欠落している式は次のとおりです：ヌル、ヌルではない、一致。</target>
        </trans-unit>
        <trans-unit id="1a29c0a9e5d031b1085dd3a49cebd323e159b0e8" translate="yes" xml:space="preserve">
          <source>DEFINE</source>
          <target state="translated">DEFINE</target>
        </trans-unit>
        <trans-unit id="db5c52e0d4fd4b266e123f0b9518c6fa49bfd979" translate="yes" xml:space="preserve">
          <source>DEFINE (UDFs, streaming)</source>
          <target state="translated">DEFINE (UDFs,ストリーミング)</target>
        </trans-unit>
        <trans-unit id="47098d98335487ff8abc5d411606d97845151cea" translate="yes" xml:space="preserve">
          <source>DEFINE (macros)</source>
          <target state="translated">DEFINE (マクロ)</target>
        </trans-unit>
        <trans-unit id="37a1eb443102b7b089c0f64ff5340898151d69e1" translate="yes" xml:space="preserve">
          <source>DEFINE alias {function | [`command` [input] [output] [ship] [cache] [stderr] ] };</source>
          <target state="translated">DEFINE alias {function | [command` [input][output][ship][cache][stderr]]を定義します。};</target>
        </trans-unit>
        <trans-unit id="81860fd533b669c61bbb6f9a452a60cdb977890f" translate="yes" xml:space="preserve">
          <source>DEFINE macro_name (param [, param ...]) RETURNS {void | alias [, alias ...]} { pig_latin_fragment };</source>
          <target state="translated">DEFINE macro_name (param [,param ....])RETURNS {void | alias [,alias ....}{pig_latin_fragment }.</target>
        </trans-unit>
        <trans-unit id="2651b57a220f2da95ee1649bca8e73943bc51729" translate="yes" xml:space="preserve">
          <source>DEFINE pluck PluckTuple(expression1)</source>
          <target state="translated">DEFINE pluck PluckTuple(expression1)</target>
        </trans-unit>
        <trans-unit id="d6a2cdc14717a24c8f160a66d554e96fbf5253d3" translate="yes" xml:space="preserve">
          <source>DEFINE pluck PluckTuple(expression1,expression3)</source>
          <target state="translated">DEFINE pluck PluckTuple(expression1,expression3)</target>
        </trans-unit>
        <trans-unit id="27e6d727f2ae73b64299de676750d1aa1a7118e7" translate="yes" xml:space="preserve">
          <source>DENSE</source>
          <target state="translated">DENSE</target>
        </trans-unit>
        <trans-unit id="b5093023417eb749513563ec16d8c0c821aa5aff" translate="yes" xml:space="preserve">
          <source>DESC</source>
          <target state="translated">DESC</target>
        </trans-unit>
        <trans-unit id="188157101620ef8e467f19e0555258980540195c" translate="yes" xml:space="preserve">
          <source>DESCRIBE</source>
          <target state="translated">DESCRIBE</target>
        </trans-unit>
        <trans-unit id="9e0c6496d66c7c2f5e60dd3deb1b4aee138e422b" translate="yes" xml:space="preserve">
          <source>DESCRIBE alias;</source>
          <target state="translated">DESCRIBEエイリアス。</target>
        </trans-unit>
        <trans-unit id="57c5f0062f55cff8d03b995b7e05c75422cf906f" translate="yes" xml:space="preserve">
          <source>DIFF</source>
          <target state="translated">DIFF</target>
        </trans-unit>
        <trans-unit id="3e501da6395fefc753e5db5f257720642ed93bc4" translate="yes" xml:space="preserve">
          <source>DIFF (expression, expression)</source>
          <target state="translated">ディオフ</target>
        </trans-unit>
        <trans-unit id="45b1a3f093ba639c208b0bbbbe6cad9eff65396f" translate="yes" xml:space="preserve">
          <source>DISTINCT</source>
          <target state="translated">DISTINCT</target>
        </trans-unit>
        <trans-unit id="fac3a6812b938bfbdd2af221e2fba7ec856f466e" translate="yes" xml:space="preserve">
          <source>DUMP</source>
          <target state="translated">DUMP</target>
        </trans-unit>
        <trans-unit id="ae047c69b00835a1dbea01b5925b1a8da787ed07" translate="yes" xml:space="preserve">
          <source>DUMP Example: In this script, because the DUMP command is interactive, the multi-query execution will be disabled and two separate jobs will be created to execute this script. The first job will execute A &amp;gt; B &amp;gt; DUMP while the second job will execute A &amp;gt; B &amp;gt; C &amp;gt; STORE.</source>
          <target state="translated">DUMPの例：このスクリプトでは、DUMPコマンドが対話型であるため、マルチクエリの実行が無効になり、このスクリプトを実行する2つの個別のジョブが作成されます。最初のジョブはA&amp;gt; B&amp;gt; DUMPを実行し、2番目のジョブはA&amp;gt; B&amp;gt; C&amp;gt; STOREを実行します。</target>
        </trans-unit>
        <trans-unit id="b06a59121fdc297727ca0e563052e200bd1b5c81" translate="yes" xml:space="preserve">
          <source>DUMP alias;</source>
          <target state="translated">DUMPのエイリアス。</target>
        </trans-unit>
        <trans-unit id="c18842877f84be9bb3ae10673c4e60242f22c160" translate="yes" xml:space="preserve">
          <source>Data Types</source>
          <target state="translated">データ型</target>
        </trans-unit>
        <trans-unit id="a613ab48f9dbf476990d61c14dd7fccb247d38bf" translate="yes" xml:space="preserve">
          <source>Data Types and More</source>
          <target state="translated">データタイプとその他</target>
        </trans-unit>
        <trans-unit id="23446d02d05e3bff5023dc4ecfec6cc7f6e70e66" translate="yes" xml:space="preserve">
          <source>Data can be easily stored into Accumulo.</source>
          <target state="translated">アキュムロにデータを簡単に保存することができます。</target>
        </trans-unit>
        <trans-unit id="2b03b1ef32dfb01490ddc83856cd403fb3ea217a" translate="yes" xml:space="preserve">
          <source>Data guarantees are determined based on the position of the streaming operator in the Pig script.</source>
          <target state="translated">データの保証は、Pigスクリプト内のストリーミング演算子の位置に基づいて決定されます。</target>
        </trans-unit>
        <trans-unit id="f563a15979c632fb30405fcee54d6700f10ec3eb" translate="yes" xml:space="preserve">
          <source>Data must be sorted on join keys in ascending (ASC) order on both sides.</source>
          <target state="translated">データは、結合キーの両側で昇順(ASC)でソートする必要があります。</target>
        </trans-unit>
        <trans-unit id="0c8a8b0eb65289ca0fcc97c9145d0dd3f5f2dc46" translate="yes" xml:space="preserve">
          <source>Data must be sorted on the COGROUP key for all tables in ascending (ASC) order.</source>
          <target state="translated">データは、すべてのテーブルのCOGROUPキーで昇順(ASC)に並べ替える必要があります。</target>
        </trans-unit>
        <trans-unit id="b920e2760550288f045935f0f4c601e019ed9342" translate="yes" xml:space="preserve">
          <source>Data must be sorted on the group key.</source>
          <target state="translated">データはグループキーでソートする必要があります。</target>
        </trans-unit>
        <trans-unit id="b531b100948493c432b4f859e23a9d0be864fb75" translate="yes" xml:space="preserve">
          <source>Data must come directly from either a Load or an Order statement.</source>
          <target state="translated">データは、ロード文またはオーダー文のいずれかから直接取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="ee503fe5765b8d9456bf21def7f9e06d2b12ebb6" translate="yes" xml:space="preserve">
          <source>Data type</source>
          <target state="translated">データ型</target>
        </trans-unit>
        <trans-unit id="b6be514c02654c4ded06230fc9559da237b0aa77" translate="yes" xml:space="preserve">
          <source>Data types</source>
          <target state="translated">データ型</target>
        </trans-unit>
        <trans-unit id="420d73810fe91851b37b6aaea508d4be91440655" translate="yes" xml:space="preserve">
          <source>Data: 10.5 or 10.5e2 or 10.5E2</source>
          <target state="translated">データです。10.5または10.5E2または10.5E2</target>
        </trans-unit>
        <trans-unit id="5d55d8842e6d4ddd33b3a4dc2b7348a0f6e21e38" translate="yes" xml:space="preserve">
          <source>Data: 10.5F or 10.5f or 10.5e2f or 10.5E2F</source>
          <target state="translated">データです。10.5Fまたは10.5Fまたは10.5E2Fまたは10.5E2F</target>
        </trans-unit>
        <trans-unit id="550e21eb7624cc089723132c6fd48e2922464452" translate="yes" xml:space="preserve">
          <source>Data: 10L or 10l</source>
          <target state="translated">データ。10Lまたは10L</target>
        </trans-unit>
        <trans-unit id="5d428a9e9434002587a4ced1162533883987acd3" translate="yes" xml:space="preserve">
          <source>DataBag</source>
          <target state="translated">DataBag</target>
        </trans-unit>
        <trans-unit id="a59017c0e45cc7c49c56f753986f692cf80abc8b" translate="yes" xml:space="preserve">
          <source>DataBag: groovy.lang.Tuple containing the bag's size and an iterator on its content</source>
          <target state="translated">DataBag:バッグのサイズと内容のイテレータを含む groovy.lang.Tuple</target>
        </trans-unit>
        <trans-unit id="38c02c12462122bc5c052482d4e054143f653806" translate="yes" xml:space="preserve">
          <source>DataByteArray</source>
          <target state="translated">DataByteArray</target>
        </trans-unit>
        <trans-unit id="f1e5baf5ecc3589631088c40cbdd43061976ed8f" translate="yes" xml:space="preserve">
          <source>DateTime</source>
          <target state="translated">DateTime</target>
        </trans-unit>
        <trans-unit id="5293c89bb39e5e6e7f097951d91979e6f1d86206" translate="yes" xml:space="preserve">
          <source>Datetime Functions</source>
          <target state="translated">データタイム関数</target>
        </trans-unit>
        <trans-unit id="28abd9ebb583f719f469cf8b089dff7c2737f644" translate="yes" xml:space="preserve">
          <source>DaysBetween</source>
          <target state="translated">DaysBetween</target>
        </trans-unit>
        <trans-unit id="ccc020a8a93ecc4010715150524628b029891725" translate="yes" xml:space="preserve">
          <source>DaysBetween(datetime1, datetime2)</source>
          <target state="translated">DaysBetween(datetime1,datetime2)</target>
        </trans-unit>
        <trans-unit id="dc8ddcb8f432e266948e934dd1279e8d988439f8" translate="yes" xml:space="preserve">
          <source>Debugging Pig Latin</source>
          <target state="translated">ブタのラテン語のデバッグ</target>
        </trans-unit>
        <trans-unit id="6b567a67a520d2b8d2255f8877aedde30629e28a" translate="yes" xml:space="preserve">
          <source>Declare and default preprocessors statements are processed in the order they appear in the Pig script.</source>
          <target state="translated">Declare文とデフォルトのプリプロセッサ文は、それらがPigスクリプトに現れた順に処理されます。</target>
        </trans-unit>
        <trans-unit id="12d8d1c37aa68dabcbab3f94878efdedc365a181" translate="yes" xml:space="preserve">
          <source>Decorators and Schemas</source>
          <target state="translated">デコレーターとスキーマ</target>
        </trans-unit>
        <trans-unit id="0c634bbd5d12b6fa75cf4d332c05c57f913458d4" translate="yes" xml:space="preserve">
          <source>Default (no path specified): Stdout</source>
          <target state="translated">デフォルト(パスは指定しない)。標準出力</target>
        </trans-unit>
        <trans-unit id="ef592af26d4de7c410c674b0e8ad3b58c465236a" translate="yes" xml:space="preserve">
          <source>Define Macro</source>
          <target state="translated">マクロの定義</target>
        </trans-unit>
        <trans-unit id="ae12133020835fd1fa7151717b3d44632da8a936" translate="yes" xml:space="preserve">
          <source>Defines a Pig macro.</source>
          <target state="translated">Pigマクロを定義します。</target>
        </trans-unit>
        <trans-unit id="e470b7139fcd28a3e03c5dc98122c30f121e0ce7" translate="yes" xml:space="preserve">
          <source>Defining Aliases</source>
          <target state="translated">エイリアスの定義</target>
        </trans-unit>
        <trans-unit id="49ea420eea2cb023561b07d1dc69d39170ef2c11" translate="yes" xml:space="preserve">
          <source>Depending on your data, this can produce significant time savings. In queries similar to the example shown here we have seen total time drop by 50%.</source>
          <target state="translated">データにもよりますが、これは大幅な時間短縮につながります。ここに示した例に似たクエリでは、合計時間が50%短縮されています。</target>
        </trans-unit>
        <trans-unit id="e46f5a56840e9e701c6ee35a24db7905e085d29f" translate="yes" xml:space="preserve">
          <source>Depending on your use case, it might be more efficient (improve performance) to split your script into multiple scripts.</source>
          <target state="translated">ユースケースによっては、スクリプトを複数のスクリプトに分割した方が効率的(パフォーマンスの向上)な場合もあります。</target>
        </trans-unit>
        <trans-unit id="50e48bbb1c0b046f6807b6caf07160a8d7d3194b" translate="yes" xml:space="preserve">
          <source>Depends on the type of the pig script, PigRunner.run() returns a particular subclass of PigStats: SimplePigStats(MapReduce/local mode), TezPigScriptStats(Tez/Tez local mode) or EmbeddedPigStats(embedded script). SimplePigStats contains a map of JobStats which capture the stats for each MapReduce job of the Pig script. TezPigScriptStats contains a map of TezDAGStats which capture the stats for each Tez DAG of the Pig script, and TezDAGStats contains a map of TezVertexStats which capture the stats for each vertex within the Tez DAG. Depending on the execution type, EmbeddedPigStats contains a map of SimplePigStats or TezPigScriptStats, which captures the Pig job launched in the embeded script.</source>
          <target state="translated">ピグスクリプトのタイプに依存しますが、PigRunner.run()はPigStatsの特定のサブクラスを返します。SimplePigStats(MapReduce/ローカルモード)、TezPigScriptStats(Tez/Tezローカルモード)、EmbeddedPigStats(埋め込みスクリプト)です。SimplePigStats は、Pig スクリプトの各 MapReduce ジョブの統計情報をキャプチャする JobStats のマップを含んでいます。TezPigScriptStats は、Pig スクリプトの各 Tez DAG の統計情報を取得する TezDAGStats のマップを含み、TezDAGStats は Tez DAG 内の各頂点の統計情報を取得する TezVertexStats のマップを含みます。実行タイプに応じて、EmbeddedPigStats は SimplePigStats または TezPigScriptStats のマップを含み、これは埋め込みスクリプトで起動された Pig ジョブをキャプチャします。</target>
        </trans-unit>
        <trans-unit id="8fe26f0a1f051f7a142a5f998121a4e0010e37b3" translate="yes" xml:space="preserve">
          <source>Dereference Operators</source>
          <target state="translated">ディレファレンスオペレータ</target>
        </trans-unit>
        <trans-unit id="f3ae6d2a1a3085eafb48a97da248afe3ba9d68fd" translate="yes" xml:space="preserve">
          <source>Dereference operators:</source>
          <target state="translated">参照解除演算子。</target>
        </trans-unit>
        <trans-unit id="9911fee20b5aaa559aca77a9a6a79b8db52c6dcf" translate="yes" xml:space="preserve">
          <source>Dereferencing a field that does not exist.</source>
          <target state="translated">存在しないフィールドを参照しています。</target>
        </trans-unit>
        <trans-unit id="05d40cd98e3c6ce36506012b8866501887b993bb" translate="yes" xml:space="preserve">
          <source>Dereferencing a key that does not exist in a map. For example, given a map, info, containing [name#john, phone#5551212] if a user tries to use info#address a null is returned.</source>
          <target state="translated">マップに存在しないキーの参照を解除します。例えば、[name#john,phone#5551212]を含む info というマップを指定した場合、ユーザが info#address を使用しようとすると null が返されます。</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="12694f0bfa56b7c3938cc2d9f85eb6164fff117d" translate="yes" xml:space="preserve">
          <source>Description.</source>
          <target state="translated">Description.</target>
        </trans-unit>
        <trans-unit id="b7d58206966807abc4cf52b41bb0063d3e834bea" translate="yes" xml:space="preserve">
          <source>Diagnostic Operators</source>
          <target state="translated">診断オペレーター</target>
        </trans-unit>
        <trans-unit id="8192f73bbbcd6111aa0de8cb1a47466d986f3b4c" translate="yes" xml:space="preserve">
          <source>Direct Fetch</source>
          <target state="translated">ダイレクトフェッチ</target>
        </trans-unit>
        <trans-unit id="79fd89c2c4112d9de06e0aa0b120f053561c7fd8" translate="yes" xml:space="preserve">
          <source>Direct fetch is turned on by default. To turn it off set the property opt.fetch to false or start Pig with the &quot;-N&quot; or &quot;-no_fetch&quot; option.</source>
          <target state="translated">ダイレクトフェッチはデフォルトでオンになっています。それをオフにするには、プロパティ opt.fetch を false に設定するか、Pig を &quot;-N&quot; か &quot;-no_fetch&quot; オプションで起動します。</target>
        </trans-unit>
        <trans-unit id="cf4e895a3163aa6a86d2c00a1b4ec996c7c44a75" translate="yes" xml:space="preserve">
          <source>Disabling Pig commands and operators</source>
          <target state="translated">ピグコマンドと演算子を無効化</target>
        </trans-unit>
        <trans-unit id="59edcadf119397cd39c85c9145fd465540155dda" translate="yes" xml:space="preserve">
          <source>Disambiguate Operator</source>
          <target state="translated">オペレータの曖昧さを解消する</target>
        </trans-unit>
        <trans-unit id="223c147d34dd515b6939e9f57fe33a7f1c239980" translate="yes" xml:space="preserve">
          <source>Display the list of statements used so far.</source>
          <target state="translated">これまでに使用したステートメントの一覧を表示します。</target>
        </trans-unit>
        <trans-unit id="dd7f32ac051745520b4ab9e5bad7a75f9743bb57" translate="yes" xml:space="preserve">
          <source>Display: 10.5 or 1050.0</source>
          <target state="translated">表示します。10.5または1050.0</target>
        </trans-unit>
        <trans-unit id="17af24325f073623a658df534863082a31ac4ed3" translate="yes" xml:space="preserve">
          <source>Display: 10.5F or 1050.0F</source>
          <target state="translated">表示。10.5F または 1050.0F</target>
        </trans-unit>
        <trans-unit id="4c7750a3673c72c2605b8c74d8ea58c532ebc514" translate="yes" xml:space="preserve">
          <source>Display: 10L</source>
          <target state="translated">表示します。10L</target>
        </trans-unit>
        <trans-unit id="37587b4b68b4cee4d9e477f01d258dd78c0cdc9f" translate="yes" xml:space="preserve">
          <source>Displays a step-by-step execution of a sequence of statements.</source>
          <target state="translated">一連のステートメントの実行を段階的に表示します。</target>
        </trans-unit>
        <trans-unit id="ad5eca33faa70fec6c13a56261a8c51a60b529fe" translate="yes" xml:space="preserve">
          <source>Displays execution plans.</source>
          <target state="translated">実行計画を表示します。</target>
        </trans-unit>
        <trans-unit id="683edc20e26b4410808f8710ea2a283c87f67133" translate="yes" xml:space="preserve">
          <source>Divides the query string into a set of words.</source>
          <target state="translated">クエリ文字列を単語の集合に分割します。</target>
        </trans-unit>
        <trans-unit id="50a314209c54751015d5ea87733dbccc98864d31" translate="yes" xml:space="preserve">
          <source>Division by zero</source>
          <target state="translated">ゼロによる除算</target>
        </trans-unit>
        <trans-unit id="a3fcfd6528d1296343b8cb0ac31626d0fb096d1a" translate="yes" xml:space="preserve">
          <source>Does not eliminate duplicate tuples.</source>
          <target state="translated">タプルの重複を排除しません。</target>
        </trans-unit>
        <trans-unit id="35033055ad4cd5083100c925a16666fa6c40a106" translate="yes" xml:space="preserve">
          <source>Does not ensure (as databases do) that all tuples adhere to the same schema or that they have the same number of fields. In a typical scenario, however, this should be the case; therefore, it is the user's responsibility to either (1) ensure that the tuples in the input relations have the same schema or (2) be able to process varying tuples in the output relation.</source>
          <target state="translated">データベースのように、すべてのタプルが同じスキーマに準拠していることやフィールドの数が同じであることを保証しません。しかし、典型的なシナリオでは、これが当てはまるはずです。したがって、(1)入力リレーションのタプルが同じスキーマを持っていることを保証するか、(2)出力リレーションの異なるタプルを処理できるようにすることは、ユーザの責任です。</target>
        </trans-unit>
        <trans-unit id="aa01c38c463d8a846f6a6ab94094f754227474a4" translate="yes" xml:space="preserve">
          <source>Does not expand nested plans (presenting a smaller graph for overview).</source>
          <target state="translated">入れ子になった計画を展開しない(概要のためのより小さなグラフを提示する)。</target>
        </trans-unit>
        <trans-unit id="e0be83eb8780dc9b54cc61d5b72ac15f2d8c78fd" translate="yes" xml:space="preserve">
          <source>Does not preserve the order of tuples. Both the input and output relations are interpreted as unordered bags of tuples.</source>
          <target state="translated">タプルの順序を保持しません。入力関係と出力関係の両方とも、タプルの順序のない袋として解釈されます。</target>
        </trans-unit>
        <trans-unit id="ae413c0cd3f131157c474ace5bdc984cc71e12bf" translate="yes" xml:space="preserve">
          <source>Dot mode: outputs a format that can be passed to the dot utility for graphical display &amp;ndash; will generate a directed-acyclic-graph (DAG) of the plans in any supported format (.gif, .jpg ...).</source>
          <target state="translated">ドットモード：ドットユーティリティに渡してグラフィック表示できる形式を出力します。サポートされている任意の形式（.gif、.jpg ...）でプランの有向非循環グラフ（DAG）を生成します。</target>
        </trans-unit>
        <trans-unit id="81581597044514bf54d4f97266022fc991f3915e" translate="yes" xml:space="preserve">
          <source>Double</source>
          <target state="translated">Double</target>
        </trans-unit>
        <trans-unit id="d7bf818139b86b7cebcedb6f2c0907edb4481864" translate="yes" xml:space="preserve">
          <source>Double: double</source>
          <target state="translated">ダブル:ダブル</target>
        </trans-unit>
        <trans-unit id="ec9b7a41b2f61d68a5d4935c6113ecf84c1ea895" translate="yes" xml:space="preserve">
          <source>Doubles</source>
          <target state="translated">Doubles</target>
        </trans-unit>
        <trans-unit id="025f4906d477361f65965110efc6755036aa20e0" translate="yes" xml:space="preserve">
          <source>Downcasts may cause loss of data. For example casting from long to int may drop bits.</source>
          <target state="translated">ダウンキャストを行うと、データが失われる可能性があります。例えば、longからintへのキャストはビットを落とす可能性があります。</target>
        </trans-unit>
        <trans-unit id="e2aec89caaf73c4362631396ddfd96dc27ff2460" translate="yes" xml:space="preserve">
          <source>Download Pig</source>
          <target state="translated">ダウンロード豚</target>
        </trans-unit>
        <trans-unit id="d7dd3c4f9a6e46519046904bc1fc66f03a9197ba" translate="yes" xml:space="preserve">
          <source>Download a recent stable release from one of the Apache Download Mirrors (see &lt;a href=&quot;http://hadoop.apache.org/pig/releases.html&quot;&gt; Pig Releases&lt;/a&gt;).</source>
          <target state="translated">Apacheダウンロードミラーの1つから最新の安定版リリースをダウンロードします（&lt;a href=&quot;http://hadoop.apache.org/pig/releases.html&quot;&gt;Pigリリースを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="d234374728a38e543cf313cbfab70ceffe5deefa" translate="yes" xml:space="preserve">
          <source>Download a recent stable release from one of the Apache Download Mirrors (see &lt;a href=&quot;https://hadoop.apache.org/pig/releases.html&quot;&gt; Pig Releases&lt;/a&gt;).</source>
          <target state="translated">Apacheダウンロードミラーの1つから最近の安定したリリースをダウンロードします（&lt;a href=&quot;https://hadoop.apache.org/pig/releases.html&quot;&gt;Pigリリースを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="fd03b608df33917f12d718470a1eef5b7a7abaad" translate="yes" xml:space="preserve">
          <source>Drop Nulls Before a Join</source>
          <target state="translated">結合の前にヌルを削除する</target>
        </trans-unit>
        <trans-unit id="bc14456af28e8d7c882ba667709785fbff1f2a77" translate="yes" xml:space="preserve">
          <source>Dumps or displays results to screen.</source>
          <target state="translated">結果を画面にダンプまたは表示します。</target>
        </trans-unit>
        <trans-unit id="fe28381d7027a0d463ca2e132e77bf65c1682eb9" translate="yes" xml:space="preserve">
          <source>Dynamic Invokers</source>
          <target state="translated">動的インボーカー</target>
        </trans-unit>
        <trans-unit id="4c426d8a199ec97cecd0d9a542b753470d8dd1f0" translate="yes" xml:space="preserve">
          <source>ENDSWITH</source>
          <target state="translated">ENDSWITH</target>
        </trans-unit>
        <trans-unit id="b806d421471fc8fb427219b0c2d21fe0709843ea" translate="yes" xml:space="preserve">
          <source>ENDSWITH(string, testAgainst)</source>
          <target state="translated">ENDSWITH(string,testAgainst)</target>
        </trans-unit>
        <trans-unit id="6c208e949d20bfe95e6078574b9fd17442f7496b" translate="yes" xml:space="preserve">
          <source>EXP</source>
          <target state="translated">EXP</target>
        </trans-unit>
        <trans-unit id="204b7118bc2897a1c86021078101de6f72009872" translate="yes" xml:space="preserve">
          <source>EXP(expression)</source>
          <target state="translated">EXP(expression)</target>
        </trans-unit>
        <trans-unit id="4f7eee905948e6076168f8edbc3bf97ae8823930" translate="yes" xml:space="preserve">
          <source>EXPLAIN</source>
          <target state="translated">EXPLAIN</target>
        </trans-unit>
        <trans-unit id="0b9bacfcf67ad598af9b4a504b7da25498937ebc" translate="yes" xml:space="preserve">
          <source>EXPLAIN [&amp;ndash;script pigscript] [&amp;ndash;out path] [&amp;ndash;brief] [&amp;ndash;dot] [-xml] [&amp;ndash;param param_name = param_value] [&amp;ndash;param_file file_name] alias;</source>
          <target state="translated">EXPLAIN [&amp;ndash;script pigscript] [&amp;ndash;out path] [&amp;ndash;brief] [&amp;ndash;dot] [-xml] [&amp;ndash;param param_name = param_value] [&amp;ndash;param_file file_name]エイリアス;</target>
        </trans-unit>
        <trans-unit id="b1a30cd38e60158ede3f14b24e952f341522f5d0" translate="yes" xml:space="preserve">
          <source>Each UDF must extend the EvalFunc class and implement all necessary functions there.</source>
          <target state="translated">各 UDF は EvalFunc クラスを拡張し、必要な関数をすべて実装しなければなりません。</target>
        </trans-unit>
        <trans-unit id="81829c855f89e82bbedba7c71bd0080d52d1cbf7" translate="yes" xml:space="preserve">
          <source>Each clause can be specified at most once (for example, multiple inputs are not allowed)</source>
          <target state="translated">各節は最大一度まで指定可能です(例えば、複数の入力は許可されていません)。</target>
        </trans-unit>
        <trans-unit id="1464064fa90628942c50b4b706e05c7f812c35c1" translate="yes" xml:space="preserve">
          <source>Either a fixed length byte array, or a union of a fixed length array and null</source>
          <target state="translated">固定長のバイト配列、または固定長の配列とNULLの組み合わせ。</target>
        </trans-unit>
        <trans-unit id="ab6c2b236c7e87a46d973b5bb952c8a1f7664fdd" translate="yes" xml:space="preserve">
          <source>Either a map, or a union of a map and null</source>
          <target state="translated">マップ、またはマップとヌルの和</target>
        </trans-unit>
        <trans-unit id="3428bc806d12855def09e17ffd788a2dd34ae3c2" translate="yes" xml:space="preserve">
          <source>Either a record type, or a union or a record and null</source>
          <target state="translated">レコード型、ユニオン、レコードとNULLのいずれかを指定します。</target>
        </trans-unit>
        <trans-unit id="f4831437145730ff496f3eed3b26868c4db0aadc" translate="yes" xml:space="preserve">
          <source>Either an array, or a union of an array and null</source>
          <target state="translated">配列、または配列とNULLの組み合わせ。</target>
        </trans-unit>
        <trans-unit id="7e0441516776faa9acca8b82d7eeb42b546bcc77" translate="yes" xml:space="preserve">
          <source>Either an enum or a union of an enum and null</source>
          <target state="translated">列挙型、または列挙型とヌル型の組み合わせ</target>
        </trans-unit>
        <trans-unit id="ad38961ef4e875951f8ce4ede61aad8b0dc77349" translate="yes" xml:space="preserve">
          <source>Elements are type-converted for you (but see examples below)</source>
          <target state="translated">要素はあなたのために型変換されます(ただし、以下の例を参照してください)。</target>
        </trans-unit>
        <trans-unit id="9dc92a43c704fdadda8fb8bd302195cf437a7f6d" translate="yes" xml:space="preserve">
          <source>Embedded Pig - Java</source>
          <target state="translated">埋め込み型ピッグ-Java</target>
        </trans-unit>
        <trans-unit id="f07ea53b10ce749125487b5f541b85ba2b8d7877" translate="yes" xml:space="preserve">
          <source>Embedded Pig - Python, JavaScript and Groovy</source>
          <target state="translated">Embedded Pig-Python,JavaScript,Groovy</target>
        </trans-unit>
        <trans-unit id="b8f58cbd1f6800cc4aca49950202fd6b576e92c2" translate="yes" xml:space="preserve">
          <source>Embedded Pig is supported in batch mode only, not interactive mode. You can request that embedded Pig be used by adding the --embedded option to the Pig command line. If this option is passed as an argument, that argument will refer to the language Pig is embedded in, either Python, JavaScript or Groovy. If no argument is specified, it is taken to refer to the reference implementation for Python.</source>
          <target state="translated">Embedded Pig はバッチモードでのみサポートされており、 インタラクティブモードではサポートされていません。Pig コマンドラインに --embedded オプションを追加することで、 embedded Pig の使用を要求することができます。このオプションが引数として渡された場合、その引数は Pig が埋め込まれている言語を参照します。引数が指定されていない場合は、Pythonの参照実装を参照します。</target>
        </trans-unit>
        <trans-unit id="63b23423da0d5105a8f26d78ee99c5ecee4af49a" translate="yes" xml:space="preserve">
          <source>EmbeddedPigStats</source>
          <target state="translated">EmbeddedPigStats</target>
        </trans-unit>
        <trans-unit id="d09ac2b5f58d53e3199eae3523616ba8fdd81fbc" translate="yes" xml:space="preserve">
          <source>EmbeddedPigStats is a new class that extends PigStats. EmbeddedPigStats will return null for methods not listed in the proposal below.</source>
          <target state="translated">EmbeddedPigStatsはPigStatsを継承した新しいクラスです。EmbeddedPigStatsは、以下の提案に記載されていないメソッドはnullを返します。</target>
        </trans-unit>
        <trans-unit id="8d0920803010bc7aa65d5671c3ad28307291d655" translate="yes" xml:space="preserve">
          <source>Empty bag is valid: {}</source>
          <target state="translated">空のバッグが有効です。{}</target>
        </trans-unit>
        <trans-unit id="1cb06319fea0194ec50c25ba093150b83826059b" translate="yes" xml:space="preserve">
          <source>Empty map is valid: []</source>
          <target state="translated">空のマップが有効です。[]</target>
        </trans-unit>
        <trans-unit id="3dbf74f9b11580ca050c433c4ce8228f55286416" translate="yes" xml:space="preserve">
          <source>Empty tuple is valid: ()</source>
          <target state="translated">空のタプルが有効です。()</target>
        </trans-unit>
        <trans-unit id="f3104dd45718e6d1ac6a03b91ae67193ae8361f0" translate="yes" xml:space="preserve">
          <source>Enums</source>
          <target state="translated">Enums</target>
        </trans-unit>
        <trans-unit id="b5a0f7a582db1f50e0815dc3c3cc7b123b0721df" translate="yes" xml:space="preserve">
          <source>EqualsIgnoreCase</source>
          <target state="translated">EqualsIgnoreCase</target>
        </trans-unit>
        <trans-unit id="30954b8c72a70034765f9c86d3c8904449fe48f1" translate="yes" xml:space="preserve">
          <source>EqualsIgnoreCase(string1, string2)</source>
          <target state="translated">EqualsIgnoreCase(string1,string2)</target>
        </trans-unit>
        <trans-unit id="5fff1f56919b006049c274c6c76fbbe56470ee4c" translate="yes" xml:space="preserve">
          <source>Error Handling</source>
          <target state="translated">エラー処理</target>
        </trans-unit>
        <trans-unit id="08a9ae7c33953daf46a17c3b87dd4aa32cb48bdd" translate="yes" xml:space="preserve">
          <source>Error message when assertion fails.</source>
          <target state="translated">アサーションが失敗した場合のエラーメッセージ</target>
        </trans-unit>
        <trans-unit id="dae8e194b5eb34f03b0d0a18f0d07616af0eb2cb" translate="yes" xml:space="preserve">
          <source>Eval Functions</source>
          <target state="translated">評価関数</target>
        </trans-unit>
        <trans-unit id="a751214a3b2a040cbf416d2610a48a7fbbdc2491" translate="yes" xml:space="preserve">
          <source>Eval is the most common type of function. It can be used in FOREACH statements as shown in this script:</source>
          <target state="translated">Eval は最も一般的なタイプの関数です。このスクリプトに示されているように、FOREACH文で使用することができます。</target>
        </trans-unit>
        <trans-unit id="9af9812b93bc28ed1594d51f1f72928b79d73e22" translate="yes" xml:space="preserve">
          <source>Every Pig script will be compiled into 1 or more Tez DAG (typically 1). Every Tez DAG consists of a number of vertices and and edges connecting vertices. For example, a simple join involves 1 DAG which consists of 3 vertices: load left input, load right input and join. Do an &lt;a href=&quot;test#explain&quot;&gt;explain&lt;/a&gt; in Tez mode will show you the DAG Pig script compiled into.</source>
          <target state="translated">すべてのPigスクリプトは、1つ以上のTez DAG（通常は1）にコンパイルされます。すべてのTez DAGは、多数の頂点と頂点を接続するエッジで構成されます。たとえば、単純な結合には、左入力の読み込み、右入力の読み込み、および結合の3つの頂点で構成される1つのDAGが含まれます。ください&lt;a href=&quot;test#explain&quot;&gt;説明&lt;/a&gt; TEZモードであなたにコンパイルDAG豚のスクリプトが表示されます。</target>
        </trans-unit>
        <trans-unit id="e0794e8808789abe3fda6668b6c3fa7bc6b85f64" translate="yes" xml:space="preserve">
          <source>Every even element (value-expression) can be of any type supported by a map.</source>
          <target state="translated">すべての偶数要素(値式)は、マップでサポートされている任意の型にすることができます。</target>
        </trans-unit>
        <trans-unit id="034c3e8fa655445e95ff288bdb0a93f8642a4d83" translate="yes" xml:space="preserve">
          <source>Every odd element (key-expression) must be a chararray since only chararrays can be keys into the map</source>
          <target state="translated">奇数要素(キー式)はすべて文字列でなければなりません。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="10dc3b2e2f7430ac6a06249e62e2a09943a0ac11" translate="yes" xml:space="preserve">
          <source>Example - Relation</source>
          <target state="translated">例-関係性</target>
        </trans-unit>
        <trans-unit id="3d7290c4a531231054e9016df90fb299e8bfd58f" translate="yes" xml:space="preserve">
          <source>Example - Script</source>
          <target state="translated">例-スクリプト</target>
        </trans-unit>
        <trans-unit id="8ef2e1210c47909b18d1b60b9c30a0116c39a246" translate="yes" xml:space="preserve">
          <source>Example 1:</source>
          <target state="translated">例1.</target>
        </trans-unit>
        <trans-unit id="e11895e8b0e4fd9700bfd1eef21691b78b345f1b" translate="yes" xml:space="preserve">
          <source>Example 2:</source>
          <target state="translated">例2.</target>
        </trans-unit>
        <trans-unit id="54f85e3dc3dd2c0b4767af56afba3c384c1b45de" translate="yes" xml:space="preserve">
          <source>Example Scripts</source>
          <target state="translated">スクリプトの例</target>
        </trans-unit>
        <trans-unit id="51f2ed478ac1a0f9ac0956fb53ca2c0db26af096" translate="yes" xml:space="preserve">
          <source>Example using DISTINCT:</source>
          <target state="translated">DISTINCTを使用した例。</target>
        </trans-unit>
        <trans-unit id="0bc3dadc9c5ecd0199ac2fbdc9862a27c595bed2" translate="yes" xml:space="preserve">
          <source>Example using GROUP BY - GENERATE:</source>
          <target state="translated">GROUP BY-GENERATEを使用した例。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="3f456e178b3eed928d6116b4511ee436e9586416" translate="yes" xml:space="preserve">
          <source>Example: Accessing a field that does not exist in a tuple</source>
          <target state="translated">例。タプルに存在しないフィールドへのアクセス</target>
        </trans-unit>
        <trans-unit id="3a35a21a18a9561f0551f205567b8c0da8ad240e" translate="yes" xml:space="preserve">
          <source>Example: Applying Functions</source>
          <target state="translated">例.関数の適用</target>
        </trans-unit>
        <trans-unit id="b0036a0911cb7b14e81e5c4edb97c8876c419a89" translate="yes" xml:space="preserve">
          <source>Example: DEFINE with STREAM</source>
          <target state="translated">例 DEFINE with STREAM</target>
        </trans-unit>
        <trans-unit id="697eeea680629a44cbf3fc5e3d70460bf410e1fc" translate="yes" xml:space="preserve">
          <source>Example: Data Guarantees</source>
          <target state="translated">例.データ保証</target>
        </trans-unit>
        <trans-unit id="2b44f8b519359304a6a86acef4e4ff979e8ac932" translate="yes" xml:space="preserve">
          <source>Example: Flatten</source>
          <target state="translated">例.平らにする</target>
        </trans-unit>
        <trans-unit id="b5a345acd0702631e315c1037d1ac7cda62aa7e6" translate="yes" xml:space="preserve">
          <source>Example: Inner Bag</source>
          <target state="translated">例.インナーバッグ</target>
        </trans-unit>
        <trans-unit id="e6db9f3e22e770cb882c1a60d1569bac9510e7d1" translate="yes" xml:space="preserve">
          <source>Example: Nested Block</source>
          <target state="translated">例。入れ子になったブロック</target>
        </trans-unit>
        <trans-unit id="f63e688cbd3f19df08a536c53c891aea5508ca6e" translate="yes" xml:space="preserve">
          <source>Example: Nested Projection</source>
          <target state="translated">例.入れ子になった投影</target>
        </trans-unit>
        <trans-unit id="cf41ef4f72f1e624c37c38499dcd5955dbb37ba0" translate="yes" xml:space="preserve">
          <source>Example: Outer Bag</source>
          <target state="translated">例.アウターバッグ</target>
        </trans-unit>
        <trans-unit id="5059ad18be2d8e9fda54534792e319900ff7faa9" translate="yes" xml:space="preserve">
          <source>Example: PARTITION BY</source>
          <target state="translated">例.による分割</target>
        </trans-unit>
        <trans-unit id="410a817acfb69db123be8875ba904348c91af435" translate="yes" xml:space="preserve">
          <source>Example: Projection</source>
          <target state="translated">例.プロジェクション</target>
        </trans-unit>
        <trans-unit id="b43180fdcf3879c7d50507f764592c9d1dcabf01" translate="yes" xml:space="preserve">
          <source>Example: Schema</source>
          <target state="translated">例.スキーマ</target>
        </trans-unit>
        <trans-unit id="fe142d2645d18e2bfc6839f4cdf713292f8274c4" translate="yes" xml:space="preserve">
          <source>Example: Schemas</source>
          <target state="translated">例 スキーマ</target>
        </trans-unit>
        <trans-unit id="6af48524a399d2a3397701b0e3e6c91b7f9eeae4" translate="yes" xml:space="preserve">
          <source>Example: X = JOIN A BY fieldA, B BY fieldB, C BY fieldC;</source>
          <target state="translated">例 X=JOIN A BY fieldA,B BY fieldB,C BY fieldC.</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="62d99e06cf09db44be6d93ffd5bffdc689e4b88f" translate="yes" xml:space="preserve">
          <source>Examples: DEFINE a function</source>
          <target state="translated">例を示します。関数を定義する</target>
        </trans-unit>
        <trans-unit id="3df6621b42ea94e7fdf3378d68254408a4f5a066" translate="yes" xml:space="preserve">
          <source>Examples: Input/Output</source>
          <target state="translated">例としては、以下のようなものがあります。入出力</target>
        </trans-unit>
        <trans-unit id="74ac88b71af2599cb5ce99c45ed31fc7e9447d91" translate="yes" xml:space="preserve">
          <source>Examples: Logging</source>
          <target state="translated">例としては、以下のようなものがあります。ロギング</target>
        </trans-unit>
        <trans-unit id="37f3ef42e9702eae2cd231255b6fcad266852122" translate="yes" xml:space="preserve">
          <source>Examples: Ship/Cache</source>
          <target state="translated">例 船/キャッシュ</target>
        </trans-unit>
        <trans-unit id="0563a4f30398c5cae92a4adaa4da100e6c9fd68f" translate="yes" xml:space="preserve">
          <source>Execute the following command (using either script1-hadoop.pig or script2-hadoop.pig):</source>
          <target state="translated">以下のコマンドを実行します(script1-hadoop.pigまたはscript2-hadoop.pigのいずれかを使用)。</target>
        </trans-unit>
        <trans-unit id="4c82ded2a8821d22b497de5e5eb18a8a066f24ce" translate="yes" xml:space="preserve">
          <source>Execute the following command (using either script1-local.pig or script2-local.pig).</source>
          <target state="translated">以下のコマンドを実行します(script1-local.pigまたはscript2-local.pigのいずれかを使用)。</target>
        </trans-unit>
        <trans-unit id="701fcbd76ef3e23ccdf3671baf9cb2b29d828e2d" translate="yes" xml:space="preserve">
          <source>Executes native MapReduce/Tez jobs inside a Pig script.</source>
          <target state="translated">Pigスクリプト内でネイティブのMapReduce/Tezジョブを実行します。</target>
        </trans-unit>
        <trans-unit id="b43bb7f8a4a52f8aa1d713b0b45feb59391843c8" translate="yes" xml:space="preserve">
          <source>Execution Modes</source>
          <target state="translated">実行モード</target>
        </trans-unit>
        <trans-unit id="5aceb19ceb6ddd597f2b6f0d9d93affc009dd5b2" translate="yes" xml:space="preserve">
          <source>Expand Macro</source>
          <target state="translated">マクロの展開</target>
        </trans-unit>
        <trans-unit id="6efd5a6d8d675b7fc9d93213867fed8fefa09b74" translate="yes" xml:space="preserve">
          <source>Explicit and Implicit Splits</source>
          <target state="translated">明示的な分割と暗黙的な分割</target>
        </trans-unit>
        <trans-unit id="2b8eb6b1bf81787fd6e0e66cdda074e83ab1d197" translate="yes" xml:space="preserve">
          <source>Explicitly specify a column family and column qualifier (e.g., user_info:id). This will produce a scalar in the resultant tuple.</source>
          <target state="translated">カラムファミリとカラム修飾子(例:user_info:id)を明示的に指定します。これにより、結果のタプルにスカラが生成されます。</target>
        </trans-unit>
        <trans-unit id="ae5fccd8dcd8fc317f8edfc8259af86cd2967a29" translate="yes" xml:space="preserve">
          <source>Expressions</source>
          <target state="translated">Expressions</target>
        </trans-unit>
        <trans-unit id="a557d3ee4d2a42021dd41d68f5a11ae8eb396bad" translate="yes" xml:space="preserve">
          <source>Expressions are written in conventional mathematical infix notation and are adapted to the UTF-8 character set. Depending on the context, expressions can include:</source>
          <target state="translated">式は従来の数学的インフィックス表記で書かれており、UTF-8文字セットに適応しています。コンテキストに応じて、式には以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="5616c8c2195c2678f23a833731af4cad68a2a4bd" translate="yes" xml:space="preserve">
          <source>Extra parameters required for the mapreduce/tez job (enclosed in back tics).</source>
          <target state="translated">mapreduce/tezジョブに必要な余分なパラメータ(バックティックで囲んだもの)。</target>
        </trans-unit>
        <trans-unit id="6bc777926b5ba3dcf78bfee3835dae2308ed3f05" translate="yes" xml:space="preserve">
          <source>ExtractHour</source>
          <target state="translated">ExtractHour</target>
        </trans-unit>
        <trans-unit id="84d771d63be156bd53ecc910bcb8c18212afa821" translate="yes" xml:space="preserve">
          <source>Extracts the hour from the record.</source>
          <target state="translated">記録から時間を抽出します。</target>
        </trans-unit>
        <trans-unit id="edc5934c34a6fd02ae10fbbb8d31675eb97581a4" translate="yes" xml:space="preserve">
          <source>FILTER</source>
          <target state="translated">FILTER</target>
        </trans-unit>
        <trans-unit id="c499647bae6c677b9a3c4bb597fd5546660e92b0" translate="yes" xml:space="preserve">
          <source>FILTER is commonly used to select the data that you want; or, conversely, to filter out (remove) the data you don&amp;rsquo;t want.</source>
          <target state="translated">FILTERは通常、必要なデータを選択するために使用されます。または、逆に、不要なデータを除外（削除）します。</target>
        </trans-unit>
        <trans-unit id="0b095f48705c5f6e20064ac184328d4387402c64" translate="yes" xml:space="preserve">
          <source>FILTER operator &amp;ndash; If a filter expression results in null value, the filter does not pass them through (if X is null, !X is also null, and the filter will reject both).</source>
          <target state="translated">FILTER演算子&amp;ndash;フィルター式の結果がnull値の場合、フィルターはそれらを通過させません（Xがnullの場合、！Xもnullであり、フィルターは両方を拒否します）。</target>
        </trans-unit>
        <trans-unit id="e4a528cf2255ca946eb38878b29504cf8ac21255" translate="yes" xml:space="preserve">
          <source>FLOOR</source>
          <target state="translated">FLOOR</target>
        </trans-unit>
        <trans-unit id="aebf8cadfda1bc0f7b1b3f50b1a7baa8878aa1fb" translate="yes" xml:space="preserve">
          <source>FLOOR(expression)</source>
          <target state="translated">FLOOR(expression)</target>
        </trans-unit>
        <trans-unit id="0e885ae6bed342524b3fee50a05c92acd3a0dd1b" translate="yes" xml:space="preserve">
          <source>FLOOR(x)</source>
          <target state="translated">FLOOR(x)</target>
        </trans-unit>
        <trans-unit id="124a9e3bb4d391c6224a470002a2e3cd4f74357f" translate="yes" xml:space="preserve">
          <source>FOREACH</source>
          <target state="translated">FOREACH</target>
        </trans-unit>
        <trans-unit id="30e4f3291f513bda1a3ad50d5289add3052b4089" translate="yes" xml:space="preserve">
          <source>FOREACH&amp;hellip;GENERATE block used with a relation (outer bag). Use this syntax:</source>
          <target state="translated">FOREACH&amp;hellip;GENERATEブロックがリレーション（外袋）で使用されています。次の構文を使用します。</target>
        </trans-unit>
        <trans-unit id="72edf56876746682dba2c95ad67320178cbe6181" translate="yes" xml:space="preserve">
          <source>FOREACH...GENERATE works with relations (outer bags) as well as inner bags:</source>
          <target state="translated">FOREACH...GENERATEは内袋だけでなく、関係性(外袋)にも働きかけます。</target>
        </trans-unit>
        <trans-unit id="cc0a745dcfb4d3d66417f75affb8f4b428e7e18f" translate="yes" xml:space="preserve">
          <source>FULL</source>
          <target state="translated">FULL</target>
        </trans-unit>
        <trans-unit id="25a97648b467d15a300e307b49c00111052f51f8" translate="yes" xml:space="preserve">
          <source>Fetching will be disabled in case of:</source>
          <target state="translated">の場合はフェッチが無効になります。</target>
        </trans-unit>
        <trans-unit id="d807d95c65337dde23a31f2c1524f3765ecaba40" translate="yes" xml:space="preserve">
          <source>Field Delimiters &amp;ndash; For load and store statements the default field delimiter is the tab character ('\t'). You can use other characters as field delimiters, but separators such as ^A or Ctrl-A should be represented in Unicode (\u0001) using UTF-16 encoding (see Wikipedia &lt;a href=&quot;http://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII&lt;/a&gt;, &lt;a href=&quot;http://en.wikipedia.org/wiki/Unicode&quot;&gt;Unicode&lt;/a&gt;, and &lt;a href=&quot;http://en.wikipedia.org/wiki/UTF-16&quot;&gt;UTF-16&lt;/a&gt;).</source>
          <target state="translated">フィールド区切り文字&amp;ndash;ロードおよびストアステートメントの場合、デフォルトのフィールド区切り文字はタブ文字（ '\ t'）です。他の文字をフィールド区切り文字として使用できますが、^ AやCtrl-Aなどの区切り文字は、UTF-16エンコーディングを使用してUnicode（\ u0001）で表す必要があります（Wikipedia &lt;a href=&quot;http://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII&lt;/a&gt;、&lt;a href=&quot;http://en.wikipedia.org/wiki/Unicode&quot;&gt;Unicode&lt;/a&gt;、および&lt;a href=&quot;http://en.wikipedia.org/wiki/UTF-16&quot;&gt;UTF-16を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="4fae8568081ffa8569d8bf8ee4c82d0a67f158e1" translate="yes" xml:space="preserve">
          <source>Field Delimiters &amp;ndash; For load and store statements the default field delimiter is the tab character ('\t'). You can use other characters as field delimiters, but separators such as ^A or Ctrl-A should be represented in Unicode (\u0001) using UTF-16 encoding (see Wikipedia &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Unicode&quot;&gt;Unicode&lt;/a&gt;, and &lt;a href=&quot;https://en.wikipedia.org/wiki/UTF-16&quot;&gt;UTF-16&lt;/a&gt;).</source>
          <target state="translated">フィールド区切り文字&amp;ndash;ロードおよびストアステートメントの場合、デフォルトのフィールド区切り文字はタブ文字（ '\ t'）です。他の文字をフィールド区切り文字として使用できますが、^ AやCtrl-Aなどの区切り文字は、UTF-16エンコーディングを使用してUnicode（\ u0001）で表す必要があります（Wikipedia &lt;a href=&quot;https://en.wikipedia.org/wiki/ASCII&quot;&gt;ASCII&lt;/a&gt;、&lt;a href=&quot;https://en.wikipedia.org/wiki/Unicode&quot;&gt;Unicode&lt;/a&gt;、および&lt;a href=&quot;https://en.wikipedia.org/wiki/UTF-16&quot;&gt;UTF-16を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="374a1e5dfd50fed6437e37f52b3bae37ab7b6490" translate="yes" xml:space="preserve">
          <source>Field Expressions</source>
          <target state="translated">フィールド表現</target>
        </trans-unit>
        <trans-unit id="ae5d0e582f486d86311de55d8644b345c8408038" translate="yes" xml:space="preserve">
          <source>Field expressions represent a field or a &lt;a href=&quot;#deref&quot;&gt;dereference operator&lt;/a&gt; applied to a field.</source>
          <target state="translated">フィールド式は、フィールドまたはフィールドに適用される&lt;a href=&quot;#deref&quot;&gt;間接参照演算子を&lt;/a&gt;表します。</target>
        </trans-unit>
        <trans-unit id="c0428878bc1bcd810085d4c965f1a3a7f4343d4d" translate="yes" xml:space="preserve">
          <source>Field value (for the first tuple)</source>
          <target state="translated">フィールド値(最初のタプルの場合</target>
        </trans-unit>
        <trans-unit id="e20249433ec90ba379bbe66cfb9fd25db96d6981" translate="yes" xml:space="preserve">
          <source>Fields are referred to by positional notation or by name (alias).</source>
          <target state="translated">フィールドは、位置表記または名前(エイリアス)で参照されます。</target>
        </trans-unit>
        <trans-unit id="f774215e137925e9255faaa3183859520af80b72" translate="yes" xml:space="preserve">
          <source>File containing the serialized Bloom filter.</source>
          <target state="translated">シリアライズされたBloomフィルタを含むファイル。</target>
        </trans-unit>
        <trans-unit id="93aa561d8701c13f16d05bd4e43e7315d3e7c664" translate="yes" xml:space="preserve">
          <source>Files are imported based on either (1) the given file path or (2) the import path specified via the Pig property pig.import.search.path. If a file path is given, whether absolute or relative to the current directory (starting with . or ..), the import path will be ignored.</source>
          <target state="translated">ファイルは、(1)与えられたファイルパスか、(2)Pig プロパティ pig.import.search.path で指定されたインポートパスのいずれかに基づいてインポートされます。ファイルパスが与えられた場合、絶対パスであろうとカレントディレクトリからの相対パスであろうと (.または.で始まる)、インポートパスは無視されます。</target>
        </trans-unit>
        <trans-unit id="4fdb33c78eb94348ce6978c25d2f7a8f9152dcf9" translate="yes" xml:space="preserve">
          <source>Filter Early and Often</source>
          <target state="translated">早めにフィルターをかける</target>
        </trans-unit>
        <trans-unit id="e720612049130d6284d05140463bcdc10c1e72a4" translate="yes" xml:space="preserve">
          <source>Filter Functions</source>
          <target state="translated">フィルタ機能</target>
        </trans-unit>
        <trans-unit id="8f1406b0246513c436f07bab6331594509d8ed43" translate="yes" xml:space="preserve">
          <source>Filter condition will be pushed to loader if loader supports</source>
          <target state="translated">ローダがサポートしている場合、フィルタ条件はローダにプッシュされます。</target>
        </trans-unit>
        <trans-unit id="7f633d97a0a71ddf2a15cc5f74cd46a0c2698332" translate="yes" xml:space="preserve">
          <source>Filter condition will be pushed to loader if loader supports (Usually the loader is partition aware, such as HCatLoader)</source>
          <target state="translated">ローダがサポートしていれば、フィルタ条件はローダにプッシュされます (通常、ローダは HCatLoader のようにパーティションを認識しています)</target>
        </trans-unit>
        <trans-unit id="e1a1687f221901fbe8d4d0e7c5995a0972f7583e" translate="yes" xml:space="preserve">
          <source>Filter functions are eval functions that return a boolean value. Filter functions can be used anywhere a Boolean expression is appropriate, including the FILTER operator or bincond expression.</source>
          <target state="translated">Filter関数はブール値を返すeval関数です。Filter関数は、FILTER演算子やbincond式など、ブール値式が適切な場所であればどこでも使用することができます。</target>
        </trans-unit>
        <trans-unit id="4f7c11ab7613ce99c03c40c65a2aaf2ded8f2f9b" translate="yes" xml:space="preserve">
          <source>FilterLogicExpressionSimplifier is an exception to the above. The rule is disabled by default, and enabled by setting the pig.exec.filterLogicExpressionSimplifier pig property to true.</source>
          <target state="translated">FilterLogicExpressionSimplifierは例外です。このルールはデフォルトでは無効になっており、pig.exec.filterLogicExpressionSimplifierのpigプロパティをtrueに設定することで有効になります。</target>
        </trans-unit>
        <trans-unit id="cb5f0c73d84fb9247ba7cb76103e4c1e309fbcaa" translate="yes" xml:space="preserve">
          <source>Finally, use Pig's &lt;a href=&quot;cmds&quot;&gt;Shell and Utility Commands&lt;/a&gt; to run your programs and Pig's expanded &lt;a href=&quot;test&quot;&gt;Testing and Diagnostics&lt;/a&gt; tools to examine and/or debug your programs.</source>
          <target state="translated">最後に、Pigの&lt;a href=&quot;cmds&quot;&gt;シェルおよびユーティリティコマンド&lt;/a&gt;を使用してプログラムを実行し、Pigの拡張された&lt;a href=&quot;test&quot;&gt;テストおよび診断&lt;/a&gt;ツールを使用してプログラムを検査またはデバッグします。</target>
        </trans-unit>
        <trans-unit id="f3da40b3f71164397fe3120b6c24e8b03a2e827f" translate="yes" xml:space="preserve">
          <source>Finally, use of the combiner is influenced by the surrounding environment of the GROUP and FOREACH statements.</source>
          <target state="translated">最後に、コンビナの使用は、GROUP文やFOREACH文の周辺環境に影響されます。</target>
        </trans-unit>
        <trans-unit id="a182325e7336b6a52b850d6513b5f50d62b61fe5" translate="yes" xml:space="preserve">
          <source>Finally, you might want to run the same pipeline in parallel with a different set of parameters, for instance for multiple dates. In this case, bind function, needs to be passed a list of maps with each element of the list containing parameters for a single invocation. In the example below, the pipeline is run for the US, the UK, and Brazil.</source>
          <target state="translated">最後に、同じパイプラインを異なるパラメータセットで並列に実行したい場合もあるでしょう。この場合、 bind 関数にはマップのリストを渡す必要があり、リストの各要素には 1 回の呼び出しのためのパラメータが含まれています。以下の例では、米国、英国、ブラジルのパイプラインを実行しています。</target>
        </trans-unit>
        <trans-unit id="a25e71892063d65a033f3c33dcca775bbfdb92f4" translate="yes" xml:space="preserve">
          <source>First Field</source>
          <target state="translated">第一フィールド</target>
        </trans-unit>
        <trans-unit id="560d697bd54184feb3c2cb3d326bd367f1a41b37" translate="yes" xml:space="preserve">
          <source>First, Pig logs all successful and failed store commands. Store commands are identified by output path. At the end of execution a summary line indicates success, partial failure or failure of all store commands.</source>
          <target state="translated">まず、Pigは成功したストアコマンドと失敗したストアコマンドをすべてログに記録します。ストアコマンドは出力パスによって識別されます。実行の最後には、すべてのストアコマンドの成功、部分的な失敗、失敗を示すサマリーラインが表示されます。</target>
        </trans-unit>
        <trans-unit id="20a2a4ea19330a7bcdfeda7fda48635712f05747" translate="yes" xml:space="preserve">
          <source>Fixes</source>
          <target state="translated">Fixes</target>
        </trans-unit>
        <trans-unit id="1bee076d0b032b0f981cab5ee327b40018d08a48" translate="yes" xml:space="preserve">
          <source>Flag. Use this option when the parameter is included in a file.</source>
          <target state="translated">フラグ。このオプションは、パラメータがファイルに含まれている場合に使用します。</target>
        </trans-unit>
        <trans-unit id="b65c220252ee8c3948884ddb5a0fb687bd1853aa" translate="yes" xml:space="preserve">
          <source>Flag. Use this option when the parameter is included in the command line.</source>
          <target state="translated">フラグを指定します。このオプションは、パラメータがコマンドラインに含まれている場合に使用します。</target>
        </trans-unit>
        <trans-unit id="bf4fb89dc7a529ffed7973390c4e2155eaf060d2" translate="yes" xml:space="preserve">
          <source>Flag. With this option, the script is not run and a fully substituted Pig script is produced in the current working directory named original_script_name.substituted</source>
          <target state="translated">フラグを指定します。このオプションを指定すると、スクリプトは実行されず、完全に置換された Pig スクリプトが original_script_name.substituted という名前のカレント作業ディレクトリに生成されます。</target>
        </trans-unit>
        <trans-unit id="d1ad90d7d1074df811fb1d08292716f5b962eb4a" translate="yes" xml:space="preserve">
          <source>Flag. With this option, the script is run and a fully substituted Pig script is produced in the current working directory named original_script_name.substituted</source>
          <target state="translated">フラグを指定します。このオプションを指定すると、スクリプトが実行され、完全に置換された Pig スクリプトがカレントの作業ディレクトリに original_script_name.substituted という名前で生成されます。</target>
        </trans-unit>
        <trans-unit id="6cca07ce0ccc662626ad643025241c3624e56e0a" translate="yes" xml:space="preserve">
          <source>Flatten Operator</source>
          <target state="translated">フラット化演算子</target>
        </trans-unit>
        <trans-unit id="64435fd82de7b1d614dfb9844848a48b14c6cd2c" translate="yes" xml:space="preserve">
          <source>Float</source>
          <target state="translated">Float</target>
        </trans-unit>
        <trans-unit id="45662d4964281ef83d8669c1e17a8c98baf3c297" translate="yes" xml:space="preserve">
          <source>Float: float</source>
          <target state="translated">フロート:フロート</target>
        </trans-unit>
        <trans-unit id="c9fdb9f56bbed11dccf6a43b0581d80890cf2517" translate="yes" xml:space="preserve">
          <source>Floats</source>
          <target state="translated">Floats</target>
        </trans-unit>
        <trans-unit id="f77b87119e6a7c491f744846107d414afef865cd" translate="yes" xml:space="preserve">
          <source>For Boolean subexpressions, note the results when nulls are used with these operators:</source>
          <target state="translated">ブール演算子の副式については、これらの演算子でヌルを使用した場合の結果に注意してください。</target>
        </trans-unit>
        <trans-unit id="2be41e1d991863bbc437c7de08ee19b60419ab6a" translate="yes" xml:space="preserve">
          <source>For Example 2, adds an implicit split to transform the query to Example 1. This eliminates the processing of A' multiple times.</source>
          <target state="translated">例2については、クエリを例1に変換するための暗黙のスプリットを追加します。これにより、A'の処理を複数回行う必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="835dfa89a788bfff1ac53650a84f02ab699062dc" translate="yes" xml:space="preserve">
          <source>For GROUP/COGROUP, the project-to-end form of project-range is not allowed.</source>
          <target state="translated">GROUP/COGROUPの場合、project-rangeのproject-to-end形式は使用できません。</target>
        </trans-unit>
        <trans-unit id="676025c95c5e8f034607e031bb2f47fe1513d2c9" translate="yes" xml:space="preserve">
          <source>For GROUP/COGROUP, you can't include a star expression in a GROUP BY column.</source>
          <target state="translated">GROUP/COGROUPの場合、GROUP BY列にスター式を含めることはできません。</target>
        </trans-unit>
        <trans-unit id="aa631d796822d8569da8d125a68d480ce975ef15" translate="yes" xml:space="preserve">
          <source>For ORDER BY, if you have project-star as ORDER BY column, you can&amp;rsquo;t have any other ORDER BY column in that statement.</source>
          <target state="translated">ORDER BYの場合、ORDER-BY列としてproject-starがある場合、そのステートメントに他のORDER BY列を含めることはできません。</target>
        </trans-unit>
        <trans-unit id="d2834709d8b275ce9b152eb158483358816d9c0a" translate="yes" xml:space="preserve">
          <source>For ORDER BY, the project-to-end form of project-range is supported only as the last sort column.</source>
          <target state="translated">ORDER BYの場合、project-rangeのproject-to-end形式は、最後のソート列としてのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="8f1475f652154b21d775e5801ec1c3d92d95a9c8" translate="yes" xml:space="preserve">
          <source>For a detailed discussion of nulls see &lt;a href=&quot;#nulls&quot;&gt;Nulls and Pig Latin&lt;/a&gt;.</source>
          <target state="translated">ヌルの詳細な議論を参照&lt;a href=&quot;#nulls&quot;&gt;のNULLと豚ラテン語を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a6199a767a8156e35cf7d0323c162d32263a9e97" translate="yes" xml:space="preserve">
          <source>For a function to be algebraic, it needs to implement Algebraic interface that consist of definition of three classes derived from EvalFunc. The contract is that the exec function of the Initial class is called once and is passed the original input tuple. Its output is a tuple that contains partial results. The exec function of the Intermed class can be called zero or more times and takes as its input a tuple that contains partial results produced by the Initial class or by prior invocations of the Intermed class and produces a tuple with another partial result. Finally, the exec function of the Final class is called and produces the final result as a scalar type.</source>
          <target state="translated">関数が代数的であるためには、EvalFuncから派生した3つのクラスの定義からなるAlgebraicインターフェースを実装する必要があります。Initialクラスのexec関数は一度だけ呼び出され、元の入力タプルが渡されます。出力は部分的な結果を含むタプルです。Intermedクラスのexec関数は0回以上呼び出すことができ、Initialクラスによって生成された部分的な結果を含むタプルを入力として受け取り、別の部分的な結果を含むタプルを生成します。最後に、Finalクラスのexec関数が呼び出され、スカラ型として最終結果を生成します。</target>
        </trans-unit>
        <trans-unit id="7492ab87722922ae84f0b30cbe8f9673835c3f10" translate="yes" xml:space="preserve">
          <source>For a sample input tuple (car, 2012, midwest, ohio, columbus, 4000), the above query with cube and rollup operation will output</source>
          <target state="translated">サンプル入力タプル (car,2012,midwest,ohio,columbus,4000)の場合、キューブとロールアップ操作を使用した上記のクエリは以下のように出力されます。</target>
        </trans-unit>
        <trans-unit id="28f76a725822abdab65b5650c2916c0517db3dec" translate="yes" xml:space="preserve">
          <source>For a sample input tuple (car, 2012, midwest, ohio, columbus, 4000), the above query with cube operation will output</source>
          <target state="translated">サンプル入力タプル (car,2012,midwest,ohio,columbus,4000)の場合、キューブ演算を使用した上記のクエリは以下のように出力されます。</target>
        </trans-unit>
        <trans-unit id="ea529d2335219745cfd2023bd9ab59cbffd6b14a" translate="yes" xml:space="preserve">
          <source>For a sample input tuple (car, 2012, midwest, ohio, columbus, 4000), the above query with rollup operation will output</source>
          <target state="translated">サンプル入力タプル(car,2012,midwest,ohio,columbus,4000)の場合、上記のクエリでロールアップ操作を行うと、次のように出力されます。</target>
        </trans-unit>
        <trans-unit id="0cbdfa0cb7a62b6a7cfadb5ef5ff81cbd2f4a3dc" translate="yes" xml:space="preserve">
          <source>For an example see &lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/builtin/CONCAT.java?view=markup&quot;&gt;CONCAT&lt;/a&gt;.</source>
          <target state="translated">例については、&lt;a href=&quot;http://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/builtin/CONCAT.java?view=markup&quot;&gt;CONCATを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7489f98899cc95cdbf7d21e8d834a2eeb0dba5a7" translate="yes" xml:space="preserve">
          <source>For an example see &lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/builtin/CONCAT.java?view=markup&quot;&gt;CONCAT&lt;/a&gt;.</source>
          <target state="translated">例については、&lt;a href=&quot;https://svn.apache.org/viewvc/pig/trunk/src/org/apache/pig/builtin/CONCAT.java?view=markup&quot;&gt;CONCATを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3cd221174816b0dafbc774cf220e7c75e294e4c8" translate="yes" xml:space="preserve">
          <source>For bags, every element is put in the bag; if the element is not a tuple Pig will create a tuple for it:</source>
          <target state="translated">バッグの場合は、すべての要素がバッグに入れられます;要素がタプルでない場合、Pigはそれのためのタプルを作成します。</target>
        </trans-unit>
        <trans-unit id="2372fb8c6515d6b56d293e2841be669278e86343" translate="yes" xml:space="preserve">
          <source>For bags, the situation becomes more complicated. When we un-nest a bag, we create new tuples. If we have a relation that is made up of tuples of the form ({(b,c),(d,e)}) and we apply GENERATE flatten($0), we end up with two tuples (b,c) and (d,e). When we remove a level of nesting in a bag, sometimes we cause a cross product to happen. For example, consider a relation that has a tuple of the form (a, {(b,c), (d,e)}), commonly produced by the GROUP operator. If we apply the expression GENERATE $0, flatten($1) to this tuple, we will create new tuples: (a, b, c) and (a, d, e).</source>
          <target state="translated">バッグの場合、状況はより複雑になります。バッグをネスト解除すると、新しいタプルが作成されます。({(b,c),(d,e)})形式のタプルで構成される関係があり、GENERATE flatten($0)を適用すると、2 つのタプル (b,c)と (d,e)になります。袋の中の入れ子のレベルを削除すると、クロス・プロダクトが発生することがあります。例えば、一般的にGROUP演算子で生成される(a,{(b,c),(d,e)})形式のタプルを持つ関係を考えてみましょう。このタプルに GENERATE $0,flatten($1)という式を適用すると、新しいタプルが作成されます。(a,b,c)および (a,d,e)という新しいタプルが作成されます。</target>
        </trans-unit>
        <trans-unit id="91312518d63ae9ef625aa1b55bf27f4e9da987e8" translate="yes" xml:space="preserve">
          <source>For batch mode execution, the entire script is first parsed to determine if intermediate tasks can be combined to reduce the overall amount of work that needs to be done; execution starts only after the parsing is completed (see the &lt;a href=&quot;test#explain&quot;&gt;EXPLAIN&lt;/a&gt; operator and the &lt;a href=&quot;cmds#run&quot;&gt;run&lt;/a&gt; and &lt;a href=&quot;cmds#exec&quot;&gt;exec&lt;/a&gt; commands).</source>
          <target state="translated">バッチモード実行の場合、最初にスクリプト全体が解析され、中間タスクを組み合わせて実行する必要のある全体的な作業量を削減できるかどうかが判断されます。実行は解析が完了した後にのみ開始されます（&lt;a href=&quot;test#explain&quot;&gt;EXPLAIN&lt;/a&gt;演算子と&lt;a href=&quot;cmds#run&quot;&gt;run&lt;/a&gt;および&lt;a href=&quot;cmds#exec&quot;&gt;exec&lt;/a&gt;コマンドを参照）。</target>
        </trans-unit>
        <trans-unit id="b8e8565c02cd6d0adf7e03bd5126b7a679abf46b" translate="yes" xml:space="preserve">
          <source>For cache archive to work, your test environment needs to have the cache archive options specified by Java properties or in an additional XML configuration in its CLASSPATH.</source>
          <target state="translated">キャッシュアーカイブが動作するためには、テスト環境がJavaプロパティで指定されたキャッシュアーカイブオプションか、CLASSPATH内の追加XML設定で指定されている必要があります。</target>
        </trans-unit>
        <trans-unit id="18da20d994e9bde64442c462b27be66a24a6c8f8" translate="yes" xml:space="preserve">
          <source>For clarity of your script, you might choose to split your projects into several steps for instance:</source>
          <target state="translated">スクリプトをわかりやすくするために、例えばプロジェクトをいくつかのステップに分割することができます。</target>
        </trans-unit>
        <trans-unit id="b1800d452d4c715d00865e8d76e04934a0d18725" translate="yes" xml:space="preserve">
          <source>For comparison, see the &lt;a href=&quot;#exec&quot;&gt;exec&lt;/a&gt; command. Both the run and exec commands are useful for debugging because you can modify a Pig script in an editor and then rerun the script in the Grunt shell without leaving the shell. Also, both commands promote Pig script modularity as they allow you to reuse existing components.</source>
          <target state="translated">比較については、&lt;a href=&quot;#exec&quot;&gt;exec&lt;/a&gt;コマンドを参照してください。エディターでPigスクリプトを変更し、シェルを終了せずにGruntシェルでスクリプトを再実行できるため、runコマンドとexecコマンドの両方がデバッグに役立ちます。また、どちらのコマンドも既存のコンポーネントを再利用できるため、Pigスクリプトのモジュール性を促進します。</target>
        </trans-unit>
        <trans-unit id="420cb33169b061b107fef980597874b521b5d581" translate="yes" xml:space="preserve">
          <source>For comparison, see the &lt;a href=&quot;#run&quot;&gt;run&lt;/a&gt; command. Both the exec and run commands are useful for debugging because you can modify a Pig script in an editor and then rerun the script in the Grunt shell without leaving the shell. Also, both commands promote Pig script modularity as they allow you to reuse existing components.</source>
          <target state="translated">比較については、&lt;a href=&quot;#run&quot;&gt;run&lt;/a&gt;コマンドを参照してください。execとrunコマンドはどちらもデバッグに役立ちます。これは、エディターでPigスクリプトを変更してから、シェルを離れずにGruntシェルでスクリプトを再実行できるためです。また、どちらのコマンドも既存のコンポーネントを再利用できるため、Pigスクリプトのモジュール性を促進します。</target>
        </trans-unit>
        <trans-unit id="9a70c16c98ef223c0647c824bfeed22855751dc5" translate="yes" xml:space="preserve">
          <source>For each group, identify the hour in which this n-gram is used with a particularly high frequency. Call the ScoreGenerator UDF to calculate a &quot;popularity&quot; score for the n-gram.</source>
          <target state="translated">各グループについて、この n-gram が特に頻繁に使用されている時間を特定します。ScoreGenerator UDFを呼び出して、n-gramの「人気度」スコアを計算します。</target>
        </trans-unit>
        <trans-unit id="5fa035064ec1e452c1fe723f98a13eacd5ac6d30" translate="yes" xml:space="preserve">
          <source>For example, ENDSWITH ('foobar', 'foo') will false, whereas ENDSWITH ('foobar', 'bar') will return true.</source>
          <target state="translated">例えば、ENDSWITH ('foobar','foo')は false になりますが、ENDSWITH ('foobar','bar')は true を返します。</target>
        </trans-unit>
        <trans-unit id="190542a62b49ce761df23241df59522132799b50" translate="yes" xml:space="preserve">
          <source>For example, STARTSWITH ('foobar', 'foo') will true, whereas STARTSWITH ('foobar', 'bar') will return false.</source>
          <target state="translated">例えば、STARTSWITH ('foobar','foo')はtrueを返し、STARTSWITH ('foobar','bar')はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="53818d83a11438a77f0a5d06b5b0ac5f08dfc953" translate="yes" xml:space="preserve">
          <source>For example, given the string (open:source:software), STRSPLIT (string, ':',2) will return ((open,source:software)) and STRSPLIT (string, ':',3) will return ((open,source,software)).</source>
          <target state="translated">例えば、文字列(open:source:software)が与えられると、STRSPLIT(string,':',2)は((open,source:software)を返し、STRSPLIT(string,':',3)は((open,source,software)を返す)となります。)</target>
        </trans-unit>
        <trans-unit id="94e60e5b8b6a53f99613a8546bf1c2006321f801" translate="yes" xml:space="preserve">
          <source>For example, given the string (open:source:software), STRSPLITTOBAG (string, ':',2) will return {(open),(source:software)} and STRSPLITTOBAG (string, ':',3) will return {(open),(source),(software)}.</source>
          <target state="translated">例えば、文字列(open:source:software)が与えられると、STRSPLITTOBAG(string,':',2)は{(open),(source:software)}を返し、STRSPLITTOBAG(string,':',3)は{(open),(source),(software)}を返します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
