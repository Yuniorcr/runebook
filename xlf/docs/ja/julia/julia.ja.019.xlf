<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="julia">
    <body>
      <group id="julia">
        <trans-unit id="ebec4412f970972bae4c03bf49efe1d61a1518db" translate="yes" xml:space="preserve">
          <source>Upwards Double Arrow / Up Double Arrow</source>
          <target state="translated">上向きダブルアロー/アップダブルアロー</target>
        </trans-unit>
        <trans-unit id="451da9751f65845a47efc254a97d6c9d93c01a6f" translate="yes" xml:space="preserve">
          <source>Upwards Harpoon With Barb Left Beside Downwards Harpoon With Barb Right</source>
          <target state="translated">上向きハープーンとバーブ左横 下向きハープーンとバーブ右</target>
        </trans-unit>
        <trans-unit id="885a72e32db57383a338d645a6ec5f4b3a84c37e" translate="yes" xml:space="preserve">
          <source>Upwards Harpoon With Barb Left Beside Upwards Harpoon With Barb Right</source>
          <target state="translated">上向きハープーンとバーブ左横上向きハープーンとバーブ右上向きハープーン</target>
        </trans-unit>
        <trans-unit id="8dbcdbf7a91d6691a730607574ade3b070517f85" translate="yes" xml:space="preserve">
          <source>Upwards Harpoon With Barb Left From Bar</source>
          <target state="translated">上向きハープーン、バーから左のバーブ付き</target>
        </trans-unit>
        <trans-unit id="c48f274014a84ac28be3ae008f6fee5b2dabf7a8" translate="yes" xml:space="preserve">
          <source>Upwards Harpoon With Barb Left To Bar</source>
          <target state="translated">上向きハープーンとバーブ左からバーへ</target>
        </trans-unit>
        <trans-unit id="9ab7cd30084b7065a4f1908b303068ca0164b119" translate="yes" xml:space="preserve">
          <source>Upwards Harpoon With Barb Leftwards / Up Harpoon With Barb Left</source>
          <target state="translated">アップワード・ハープーン ウィズ バーブ レフトワーズ/アップハープーン ウィズ バーブ レフトワーズ</target>
        </trans-unit>
        <trans-unit id="1823143ac88fac95c7a172abf39eacf583342225" translate="yes" xml:space="preserve">
          <source>Upwards Harpoon With Barb Right From Bar</source>
          <target state="translated">バーブの右からバーブを持つ上向きの銛</target>
        </trans-unit>
        <trans-unit id="cf0eedea90d05abe73536dcddde59648851f49f2" translate="yes" xml:space="preserve">
          <source>Upwards Harpoon With Barb Right To Bar</source>
          <target state="translated">上向き銛とバーブの右からバーへ</target>
        </trans-unit>
        <trans-unit id="054a68e049c32af85ec106146f1c9d49703a5a32" translate="yes" xml:space="preserve">
          <source>Upwards Harpoon With Barb Rightwards / Up Harpoon With Barb Right</source>
          <target state="translated">上向きハープーン ウィズ バーブ 右向き/アップ ハープーン ウィズ バーブ 右向き</target>
        </trans-unit>
        <trans-unit id="52570d5f31c410f5871d41a198881ad11859b2f8" translate="yes" xml:space="preserve">
          <source>Upwards Paired Arrows / Up Paired Arrows</source>
          <target state="translated">上向きペアの矢/上向きペアの矢</target>
        </trans-unit>
        <trans-unit id="e2bb6ca806f317b31034fe74bd58c64cfd1d2de9" translate="yes" xml:space="preserve">
          <source>Upwards Quadruple Arrow</source>
          <target state="translated">上向き四重矢</target>
        </trans-unit>
        <trans-unit id="e0293c09ade0452364d29d560cce13e5bd4d334f" translate="yes" xml:space="preserve">
          <source>Upwards Triple Arrow</source>
          <target state="translated">上向きトリプルアロー</target>
        </trans-unit>
        <trans-unit id="8a1494f8ee6c5ee3a3b8efc6ee623b9ab34472ba" translate="yes" xml:space="preserve">
          <source>Upwards Two Headed Arrow / Up Two Headed Arrow</source>
          <target state="translated">上向き二頭立て矢印/上向き二頭立て矢印</target>
        </trans-unit>
        <trans-unit id="813eb4d285528b78ca67b70c64ef6320ea54f9f0" translate="yes" xml:space="preserve">
          <source>Upwards Two-Headed Arrow From Small Circle</source>
          <target state="translated">小さな円から上向きの双頭の矢印</target>
        </trans-unit>
        <trans-unit id="b2469885ff05b9cc90e880e142fd5896188598ee" translate="yes" xml:space="preserve">
          <source>Upwards White Arrow / White Up Arrow</source>
          <target state="translated">上向きホワイトアロー/ホワイトアップアロー</target>
        </trans-unit>
        <trans-unit id="906d90e89656334b7437d43c9b30e29f00d00f8d" translate="yes" xml:space="preserve">
          <source>Upwards White Arrow From Bar / White Up Arrow From Bar</source>
          <target state="translated">バーから上向きの白い矢印/バーからの白い上向きの矢印</target>
        </trans-unit>
        <trans-unit id="e4458dd128aa6efaff132fdd10fa70177926007b" translate="yes" xml:space="preserve">
          <source>Uranus</source>
          <target state="translated">Uranus</target>
        </trans-unit>
        <trans-unit id="cdb412e2ca5e6ba493c591c8c2043869bf396180" translate="yes" xml:space="preserve">
          <source>Usage is very straightforward:</source>
          <target state="translated">使い方はとてもわかりやすいです。</target>
        </trans-unit>
        <trans-unit id="adf928890fa0bf2818758d8852ab302ab63640ba" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#Base.append!&quot;&gt;&lt;code&gt;append!&lt;/code&gt;&lt;/a&gt; to add all the elements of another collection to &lt;code&gt;collection&lt;/code&gt;. The result of the preceding example is equivalent to &lt;code&gt;append!([1, 2, 3], [4, 5, 6])&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#Base.append!&quot;&gt; &lt;code&gt;append!&lt;/code&gt; &lt;/a&gt;使用してください！別のコレクションのすべての要素をコレクションに追加し &lt;code&gt;collection&lt;/code&gt; 。前の例の結果は、 &lt;code&gt;append!([1, 2, 3], [4, 5, 6])&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="6dba88b41b71a6676d0481b8696709dd68423768" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#Base.include&quot;&gt;&lt;code&gt;Base.include&lt;/code&gt;&lt;/a&gt; to evaluate a file into another module.</source>
          <target state="translated">&lt;a href=&quot;#Base.include&quot;&gt; &lt;code&gt;Base.include&lt;/code&gt; &lt;/a&gt;を使用して、ファイルを別のモジュールに評価します。</target>
        </trans-unit>
        <trans-unit id="3e8760c00a8697e5b8aeb582fe1473eb0e29463e" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#Base.lastindex&quot;&gt;&lt;code&gt;lastindex&lt;/code&gt;&lt;/a&gt; to get the last valid index of an indexable collection.</source>
          <target state="translated">インデックス付け可能なコレクションの最後の有効なインデックスを取得するには、&lt;a href=&quot;#Base.lastindex&quot;&gt; &lt;code&gt;lastindex&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="b112cddecaeaffc3c8cf54e44abf77315a9f8acf" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#Base.push!&quot;&gt;&lt;code&gt;push!&lt;/code&gt;&lt;/a&gt; to add individual items to &lt;code&gt;collection&lt;/code&gt; which are not already themselves in another collection. The result of the preceding example is equivalent to &lt;code&gt;push!([1, 2, 3], 4, 5, 6)&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#Base.push!&quot;&gt; &lt;code&gt;push!&lt;/code&gt; &lt;/a&gt;使用してください！まだ別のコレクションに含まれていない個々のアイテムを &lt;code&gt;collection&lt;/code&gt; に追加します。上記の例の結果は、 &lt;code&gt;push!([1, 2, 3], 4, 5, 6)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="77c9ba2a7f72e5d0f8b6c5f71aa620d5e3c742f3" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#Base.something&quot;&gt;&lt;code&gt;something&lt;/code&gt;&lt;/a&gt; to access the value wrapped by a &lt;code&gt;Some&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Some&lt;/code&gt; オブジェクトでラップされた値にアクセスするには、&lt;a href=&quot;#Base.something&quot;&gt; &lt;code&gt;something&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="253fb0c8daa4e7ce4c9d69eb091a0cb44d5f50cf" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#LinearAlgebra.opnorm&quot;&gt;&lt;code&gt;opnorm&lt;/code&gt;&lt;/a&gt; to compute the operator norm of a matrix.</source>
          <target state="translated">使用&lt;a href=&quot;#LinearAlgebra.opnorm&quot;&gt; &lt;code&gt;opnorm&lt;/code&gt; &lt;/a&gt;行列の作用素ノルムを計算します。</target>
        </trans-unit>
        <trans-unit id="b236b0bc0e26f22cae584435e191add5139d35df" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../../base/base/index#Base.@inbounds&quot;&gt;&lt;code&gt;@inbounds&lt;/code&gt;&lt;/a&gt; to eliminate array bounds checking within expressions. Be certain before doing this. If the subscripts are ever out of bounds, you may suffer crashes or silent corruption.</source>
          <target state="translated">&lt;a href=&quot;../../base/base/index#Base.@inbounds&quot;&gt; &lt;code&gt;@inbounds&lt;/code&gt; &lt;/a&gt;を使用して、式内の配列境界チェックを削除します。これを行う前に確認してください。下付き文字が範囲外にある場合、クラッシュまたはサイレント破損が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d306f68003307110fc26b73cfcc7afc0fc9abd9c" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../../base/math/index#Base.FastMath.@fastmath&quot;&gt;&lt;code&gt;@fastmath&lt;/code&gt;&lt;/a&gt; to allow floating point optimizations that are correct for real numbers, but lead to differences for IEEE numbers. Be careful when doing this, as this may change numerical results. This corresponds to the &lt;code&gt;-ffast-math&lt;/code&gt; option of clang.</source>
          <target state="translated">&lt;a href=&quot;../../base/math/index#Base.FastMath.@fastmath&quot;&gt; &lt;code&gt;@fastmath&lt;/code&gt; &lt;/a&gt;を使用して、実数では正しい浮動小数点最適化を許可しますが、IEEE数では違いが生じます。数値の結果が変わる可能性があるため、これを行うときは注意してください。これは、clangの &lt;code&gt;-ffast-math&lt;/code&gt; オプションに対応しています。</target>
        </trans-unit>
        <trans-unit id="3cac4bd068dbdaa848d7cc91268aece2ec2791ed" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../../base/math/index#Base.abs2&quot;&gt;&lt;code&gt;abs2(z)&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;abs(z)^2&lt;/code&gt; for complex &lt;code&gt;z&lt;/code&gt;. In general, try to rewrite code to use &lt;a href=&quot;../../base/math/index#Base.abs2&quot;&gt;&lt;code&gt;abs2&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;../../base/math/index#Base.abs&quot;&gt;&lt;code&gt;abs&lt;/code&gt;&lt;/a&gt; for complex arguments.</source>
          <target state="translated">使用&lt;a href=&quot;../../base/math/index#Base.abs2&quot;&gt; &lt;code&gt;abs2(z)&lt;/code&gt; &lt;/a&gt;の代わりに、 &lt;code&gt;abs(z)^2&lt;/code&gt; 複合体の &lt;code&gt;z&lt;/code&gt; 。一般に、複雑な引数には&lt;a href=&quot;../../base/math/index#Base.abs&quot;&gt; &lt;code&gt;abs&lt;/code&gt; &lt;/a&gt;ではなく&lt;a href=&quot;../../base/math/index#Base.abs2&quot;&gt; &lt;code&gt;abs2&lt;/code&gt; &lt;/a&gt;を使用するようにコードを書き直してください。</target>
        </trans-unit>
        <trans-unit id="97d4b359bc1904cf184f779a48c13e4ababd9bcc" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../../base/math/index#Base.div&quot;&gt;&lt;code&gt;div(x,y)&lt;/code&gt;&lt;/a&gt; for truncating division of integers instead of &lt;a href=&quot;../../base/math/index#Base.trunc&quot;&gt;&lt;code&gt;trunc(x/y)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/math/index#Base.fld&quot;&gt;&lt;code&gt;fld(x,y)&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;../../base/math/index#Base.floor&quot;&gt;&lt;code&gt;floor(x/y)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../../base/math/index#Base.cld&quot;&gt;&lt;code&gt;cld(x,y)&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;../../base/math/index#Base.ceil&quot;&gt;&lt;code&gt;ceil(x/y)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;../../base/math/index#Base.div&quot;&gt; &lt;code&gt;div(x,y)&lt;/code&gt; &lt;/a&gt;代わりに整数の除算を切り捨てるために&lt;a href=&quot;../../base/math/index#Base.trunc&quot;&gt; &lt;code&gt;trunc(x/y)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../base/math/index#Base.fld&quot;&gt; &lt;code&gt;fld(x,y)&lt;/code&gt; &lt;/a&gt;代わりに&lt;a href=&quot;../../base/math/index#Base.floor&quot;&gt; &lt;code&gt;floor(x/y)&lt;/code&gt; &lt;/a&gt;、及び&lt;a href=&quot;../../base/math/index#Base.cld&quot;&gt; &lt;code&gt;cld(x,y)&lt;/code&gt; &lt;/a&gt;の代わりに、&lt;a href=&quot;../../base/math/index#Base.ceil&quot;&gt; &lt;code&gt;ceil(x/y)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ed20df03617ffa631ba3c736bd4f57a7ec7da56b" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../../base/math/index#Base.div&quot;&gt;&lt;code&gt;div(x,y)&lt;/code&gt;&lt;/a&gt; for truncating division of integers instead of &lt;code&gt;trunc(x/y)&lt;/code&gt;, &lt;a href=&quot;../../base/math/index#Base.fld&quot;&gt;&lt;code&gt;fld(x,y)&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;floor(x/y)&lt;/code&gt;, and &lt;a href=&quot;../../base/math/index#Base.cld&quot;&gt;&lt;code&gt;cld(x,y)&lt;/code&gt;&lt;/a&gt; instead of &lt;code&gt;ceil(x/y)&lt;/code&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;../../base/math/index#Base.div&quot;&gt; &lt;code&gt;div(x,y)&lt;/code&gt; &lt;/a&gt;代わりに整数の除算を切り捨てるために &lt;code&gt;trunc(x/y)&lt;/code&gt; 、&lt;a href=&quot;../../base/math/index#Base.fld&quot;&gt; &lt;code&gt;fld(x,y)&lt;/code&gt; &lt;/a&gt;代わりに &lt;code&gt;floor(x/y)&lt;/code&gt; 、及び&lt;a href=&quot;../../base/math/index#Base.cld&quot;&gt; &lt;code&gt;cld(x,y)&lt;/code&gt; &lt;/a&gt;の代わりに、 &lt;code&gt;ceil(x/y)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cbd9f39fcb30d6c8593e579f82799578e0b0fa66" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../file/index#Base.Filesystem.dirname&quot;&gt;&lt;code&gt;dirname&lt;/code&gt;&lt;/a&gt; to get the directory part and &lt;a href=&quot;../file/index#Base.Filesystem.basename&quot;&gt;&lt;code&gt;basename&lt;/code&gt;&lt;/a&gt; to get the file name part of the path.</source>
          <target state="translated">&lt;a href=&quot;../file/index#Base.Filesystem.dirname&quot;&gt; &lt;code&gt;dirname&lt;/code&gt; &lt;/a&gt;を使用してディレクトリ部分を取得し、&lt;a href=&quot;../file/index#Base.Filesystem.basename&quot;&gt; &lt;code&gt;basename&lt;/code&gt; &lt;/a&gt;を使用してパスのファイル名部分を取得します。</target>
        </trans-unit>
        <trans-unit id="c2e799feae8fa513489e0daa4c3f185d8cf11c0d" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Debug&lt;/code&gt; for verbose information that could be useful when debugging an application or module. These events are disabled by default.</source>
          <target state="translated">&lt;code&gt;Debug&lt;/code&gt; を使用して、アプリケーションまたはモジュールのデバッグ時に役立つ可能性のある詳細情報を取得します。これらのイベントはデフォルトで無効になっています。</target>
        </trans-unit>
        <trans-unit id="fb0928e79ba9fd55c12a3eefaa790b4b08148347" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Error&lt;/code&gt; to report errors where the code has enough context to recover and continue. (When the code doesn't have enough context, an exception or early return is more appropriate.)</source>
          <target state="translated">&lt;code&gt;Error&lt;/code&gt; を使用して、コードが回復して続行するのに十分なコンテキストを持つエラーを報告します。（コードに十分なコンテキストがない場合は、例外または早期復帰がより適切です。）</target>
        </trans-unit>
        <trans-unit id="e86b08aafca134e6fd8d7a93c33dea4d8b4e5e85" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Info&lt;/code&gt; to inform the user about the normal operation of the program.</source>
          <target state="translated">&lt;code&gt;Info&lt;/code&gt; を使用して、プログラムの通常の操作についてユーザーに通知します。</target>
        </trans-unit>
        <trans-unit id="8c4187945e9e4e8ad7fe21490eeae3ab5745e787" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Warn&lt;/code&gt; when a potential problem is detected.</source>
          <target state="translated">潜在的な問題が検出されたときに &lt;code&gt;Warn&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="38f7e6f35c48f80e5317615158f0db45821da3da" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;collect&lt;/code&gt; to extract non-&lt;code&gt;missing&lt;/code&gt; values and store them in an array</source>
          <target state="translated">&lt;code&gt;collect&lt;/code&gt; を使用して、 &lt;code&gt;missing&lt;/code&gt; 値を抽出し、配列に格納します</target>
        </trans-unit>
        <trans-unit id="c15be8234ef12b9a7a7d5794b1d59b19e6393dc6" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;collect&lt;/code&gt; to obtain an &lt;code&gt;Array&lt;/code&gt; containing the non-&lt;code&gt;missing&lt;/code&gt; values in &lt;code&gt;itr&lt;/code&gt;. Note that even if &lt;code&gt;itr&lt;/code&gt; is a multidimensional array, the result will always be a &lt;code&gt;Vector&lt;/code&gt; since it is not possible to remove missings while preserving dimensions of the input.</source>
          <target state="translated">&lt;code&gt;collect&lt;/code&gt; を使用して、 &lt;code&gt;itr&lt;/code&gt; の &lt;code&gt;missing&lt;/code&gt; 値を含む &lt;code&gt;Array&lt;/code&gt; を取得します。 &lt;code&gt;itr&lt;/code&gt; が多次元配列であっても、入力の次元を維持しながら欠落を除去することはできないため、結果は常に &lt;code&gt;Vector&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="c3faffd725f2f09e5f4e7fbbe19f38edbe638510" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;import&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt; 使用：</target>
        </trans-unit>
        <trans-unit id="64230d1dd313790498f6cbea1b850278a5b2bdf0" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;julia&lt;/code&gt; with &lt;code&gt;--compiled-modules=no&lt;/code&gt; flag to turn off precompilation.</source>
          <target state="translated">使用 &lt;code&gt;julia&lt;/code&gt; と &lt;code&gt;--compiled-modules=no&lt;/code&gt; プリコンパイルをオフにするフラグ。</target>
        </trans-unit>
        <trans-unit id="be6047af5c0d2bfb4e695d572e7b2e68d170fdb8" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;rm&lt;/code&gt; to remove this package by name:</source>
          <target state="translated">&lt;code&gt;rm&lt;/code&gt; を使用して、このパッケージを名前で削除します。</target>
        </trans-unit>
        <trans-unit id="88a8f5cf6c63986cbddfbeb683baa495ffb2458a" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;update&lt;/code&gt; to update an installed package:</source>
          <target state="translated">&lt;code&gt;update&lt;/code&gt; を使用して、インストールされたパッケージを更新します。</target>
        </trans-unit>
        <trans-unit id="faa02645b797b97f27299fe67bce9b0039a88864" translate="yes" xml:space="preserve">
          <source>Use a heuristic to guess if a file is binary: searching for NULL bytes and looking for a reasonable ratio of printable to non-printable characters among the first 8000 bytes.</source>
          <target state="translated">ファイルがバイナリであるかどうかを推測するためにヒューリスティックな手法を使用します:NULLバイトを検索し、最初の8000バイトの中から印刷可能な文字と印刷不可能な文字の合理的な比率を探します。</target>
        </trans-unit>
        <trans-unit id="97af4a7c67b7c83eeca7e643db74ac873a965026" translate="yes" xml:space="preserve">
          <source>Use an explicit conversion by &lt;code&gt;x = oneunit(Float64)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x = oneunit(Float64)&lt;/code&gt; による明示的な変換を使用します</target>
        </trans-unit>
        <trans-unit id="88358f29dfd758f460e28a67196b545279d41f43" translate="yes" xml:space="preserve">
          <source>Use an explicit conversion: &lt;code&gt;x = oneunit(Float64)&lt;/code&gt;</source>
          <target state="translated">明示的な変換を使用します： &lt;code&gt;x = oneunit(Float64)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6770a727a84b74b281a528ef665b748645523911" translate="yes" xml:space="preserve">
          <source>Use backticks to identify code and equations.</source>
          <target state="translated">コードや方程式を識別するためにバックトークを使用します。</target>
        </trans-unit>
        <trans-unit id="70ddc8cd15e7e7d64472323fbb2ce74dc97af2ec" translate="yes" xml:space="preserve">
          <source>Use in Makefiles</source>
          <target state="translated">Makefilesでの使用</target>
        </trans-unit>
        <trans-unit id="08e8cc7da923f6fd03e4d859e3d2010bdbf5a589" translate="yes" xml:space="preserve">
          <source>Use multiple arguments like so:</source>
          <target state="translated">のように複数の引数を使用します。</target>
        </trans-unit>
        <trans-unit id="ac721de84c14d925fb2b4f9baf4d8bd1f070ead3" translate="yes" xml:space="preserve">
          <source>Use naming conventions consistent with Julia &lt;code&gt;base/&lt;/code&gt;</source>
          <target state="translated">Julia &lt;code&gt;base/&lt;/code&gt; と一致する命名規則を使用する/</target>
        </trans-unit>
        <trans-unit id="2edbe387f9c0f39642268d3da72bf656df7ef46b" translate="yes" xml:space="preserve">
          <source>Use native code from system image if available</source>
          <target state="translated">利用可能な場合は、システムイメージのネイティブコードを使用します。</target>
        </trans-unit>
        <trans-unit id="cc2d79932b3fbbb05016d0144fe877e6d22b3ea3" translate="yes" xml:space="preserve">
          <source>Used in a stream redirect to discard all data written to it. Essentially equivalent to &lt;code&gt;/dev/null&lt;/code&gt; on Unix or &lt;code&gt;NUL&lt;/code&gt; on Windows. Usage:</source>
          <target state="translated">ストリームリダイレクトで使用され、書き込まれたすべてのデータを破棄します。UNIXの &lt;code&gt;/dev/null&lt;/code&gt; またはWindowsの &lt;code&gt;NUL&lt;/code&gt; と本質的に同等です。使用法：</target>
        </trans-unit>
        <trans-unit id="9cde8b01939e704886f95991687885c1bfbd5672" translate="yes" xml:space="preserve">
          <source>User-defined plain-data types without &lt;code&gt;write&lt;/code&gt; methods can be written when wrapped in a &lt;code&gt;Ref&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Ref&lt;/code&gt; でラップすると、 &lt;code&gt;write&lt;/code&gt; メソッドのないユーザー定義のプレーンデータタイプを書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="a1bc0b4fef463a1a11ba0c7feb894e0c57617f8b" translate="yes" xml:space="preserve">
          <source>User-defined types are as fast and compact as built-ins</source>
          <target state="translated">ユーザー定義型はビルトインのように高速でコンパクト</target>
        </trans-unit>
        <trans-unit id="3c729f1cba74cb6c5ffde754c64511e3fe9d9c3f" translate="yes" xml:space="preserve">
          <source>Username/password plain text</source>
          <target state="translated">ユーザー名/パスワード プレーンテキスト</target>
        </trans-unit>
        <trans-unit id="3c17149033d4c3d14412d998ae2de25ee7497296" translate="yes" xml:space="preserve">
          <source>Users should refer to &lt;code&gt;LineEdit.jl&lt;/code&gt; to discover the available actions on key input.</source>
          <target state="translated">ユーザーは &lt;code&gt;LineEdit.jl&lt;/code&gt; を参照して、キー入力で使用可能なアクションを見つける必要があります。</target>
        </trans-unit>
        <trans-unit id="c9ffbb24bf63c0d26fa820ccaad97db5b5d7c4c0" translate="yes" xml:space="preserve">
          <source>Uses multiple concurrent tasks to map &lt;code&gt;f&lt;/code&gt; over a collection (or multiple equal length collections). For multiple collection arguments, &lt;code&gt;f&lt;/code&gt; is applied elementwise.</source>
          <target state="translated">複数の並行タスクを使用して、コレクション（または複数の同じ長さのコレクション）に &lt;code&gt;f&lt;/code&gt; をマッピングします。複数のコレクション引数の場合、 &lt;code&gt;f&lt;/code&gt; は要素ごとに適用されます。</target>
        </trans-unit>
        <trans-unit id="aaaf90400780ceb1859683501af570570487d3f2" translate="yes" xml:space="preserve">
          <source>Uses of non-constant globals can be optimized by annotating their types at the point of use:</source>
          <target state="translated">定数ではないグローバルの使用は、使用時にその型に注釈を付けることで最適化できます。</target>
        </trans-unit>
        <trans-unit id="688afb99bff61a9584ff045ba5eb7014ef89e708" translate="yes" xml:space="preserve">
          <source>Using &quot;outside&quot; variables in parallel loops is perfectly reasonable if the variables are read-only:</source>
          <target state="translated">変数が読み取り専用であれば、並列ループで &quot;外部 &quot;変数を使用するのは完全に合理的です。</target>
        </trans-unit>
        <trans-unit id="0e688a58936b31583f452f63485c5d5aac4efae6" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;@inbounds&lt;/code&gt; may return incorrect results/crashes/corruption for out-of-bounds indices. The user is responsible for checking it manually. Only use &lt;code&gt;@inbounds&lt;/code&gt; when it is certain from the information locally available that all accesses are in bounds.</source>
          <target state="translated">&lt;code&gt;@inbounds&lt;/code&gt; を使用すると、範囲外のインデックスに対して誤った結果/クラッシュ/破損が返される場合があります。ユーザーが手動で確認する必要があります。 &lt;code&gt;@inbounds&lt;/code&gt; は、ローカルで利用可能な情報からすべてのアクセスが境界内にあることが確実な場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="d5bc6baeeb67dcbf6611dff279c2c4eee51ea334" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;begin&lt;/code&gt; in an indexing expression to refer to the first index requires at least Julia 1.5.</source>
          <target state="translated">インデックス式で &lt;code&gt;begin&lt;/code&gt; を使用して最初のインデックスを参照するには、少なくともJulia1.5が必要です。</target>
        </trans-unit>
        <trans-unit id="e537d4f221185177f4eaa3de9c5f176d574cec48" translate="yes" xml:space="preserve">
          <source>Using Loggers</source>
          <target state="translated">ロガーの使用</target>
        </trans-unit>
        <trans-unit id="4594347fb664dcf4c2e1f34027a9288d5babb1f4" translate="yes" xml:space="preserve">
          <source>Using an index less than 1 or greater than &lt;code&gt;end&lt;/code&gt; raises an error:</source>
          <target state="translated">1未満または &lt;code&gt;end&lt;/code&gt; より大きいインデックスを使用すると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="fd6e027b6c0183a57f969b2f0c1a67224243a456" translate="yes" xml:space="preserve">
          <source>Using an index less than &lt;code&gt;begin&lt;/code&gt; (&lt;code&gt;1&lt;/code&gt;) or greater than &lt;code&gt;end&lt;/code&gt; raises an error:</source>
          <target state="translated">&lt;code&gt;begin&lt;/code&gt; （ &lt;code&gt;1&lt;/code&gt; ）より小さい、または &lt;code&gt;end&lt;/code&gt; より大きいインデックスを使用すると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="6956b3efd735f97450c62b06daef893328f716ca" translate="yes" xml:space="preserve">
          <source>Using distinct algorithms for scalar or array generation</source>
          <target state="translated">スカラーまたは配列生成のために別個のアルゴリズムを使用する</target>
        </trans-unit>
        <trans-unit id="d0c7e17c286ccbac76a5a27970a8f4dc4a2438ec" translate="yes" xml:space="preserve">
          <source>Using julia-config to automatically determine build parameters</source>
          <target state="translated">julia-config を使用してビルドパラメータを自動的に決定する</target>
        </trans-unit>
        <trans-unit id="6c6ec39234314353f60f2f3bfa4894a480f5bb32" translate="yes" xml:space="preserve">
          <source>Using resources of &lt;code&gt;x&lt;/code&gt; which would be cleaned up in the finalizer.</source>
          <target state="translated">ファイナライザーでクリーンアップされる &lt;code&gt;x&lt;/code&gt; のリソースを使用します。</target>
        </trans-unit>
        <trans-unit id="8d40e4dac1bcd568d35cfc3572f2a015fc1c1052" translate="yes" xml:space="preserve">
          <source>Using semicolons (or newlines) and spaces (or tabs) can be combined to concatenate both horizontally and vertically at the same time.</source>
          <target state="translated">セミコロン(または改行)とスペース(またはタブ)を使用することで、水平方向と垂直方向の両方を同時に連結することができます。</target>
        </trans-unit>
        <trans-unit id="2cf9f6136824ad4f2ee2bbca487125e42112f823" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#LibGit2.GitRevWalker&quot;&gt;&lt;code&gt;GitRevWalker&lt;/code&gt;&lt;/a&gt;&lt;code&gt;walker&lt;/code&gt; to &quot;walk&quot; over every commit in the repository's history, apply &lt;code&gt;f&lt;/code&gt; to each commit in the walk. The keyword arguments are: * &lt;code&gt;oid&lt;/code&gt;: The &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; of the commit to begin the walk from. The default is to use &lt;a href=&quot;#LibGit2.push_head!&quot;&gt;&lt;code&gt;push_head!&lt;/code&gt;&lt;/a&gt; and therefore the HEAD commit and all its ancestors. * &lt;code&gt;range&lt;/code&gt;: A range of &lt;code&gt;GitHash&lt;/code&gt;s in the format &lt;code&gt;oid1..oid2&lt;/code&gt;. &lt;code&gt;f&lt;/code&gt; will be applied to all commits between the two. * &lt;code&gt;by&lt;/code&gt;: The sorting method. The default is not to sort. Other options are to sort by topology (&lt;code&gt;LibGit2.Consts.SORT_TOPOLOGICAL&lt;/code&gt;), to sort forwards in time (&lt;code&gt;LibGit2.Consts.SORT_TIME&lt;/code&gt;, most ancient first) or to sort backwards in time (&lt;code&gt;LibGit2.Consts.SORT_REVERSE&lt;/code&gt;, most recent first). * &lt;code&gt;rev&lt;/code&gt;: Whether to reverse the sorted order (for instance, if topological sorting is used).</source>
          <target state="translated">&lt;a href=&quot;#LibGit2.GitRevWalker&quot;&gt; &lt;code&gt;GitRevWalker&lt;/code&gt; &lt;/a&gt; &lt;code&gt;walker&lt;/code&gt; を使用して、リポジトリの履歴のすべてのコミットを「ウォーク」し、ウォークの各コミットに &lt;code&gt;f&lt;/code&gt; を適用します。キーワード引数は次のとおりです。* &lt;code&gt;oid&lt;/code&gt; ：ウォークを開始するコミットの&lt;a href=&quot;#LibGit2.GitHash&quot;&gt; &lt;code&gt;GitHash&lt;/code&gt; &lt;/a&gt;。デフォルトでは&lt;a href=&quot;#LibGit2.push_head!&quot;&gt; &lt;code&gt;push_head!&lt;/code&gt; &lt;/a&gt;を使用します！したがって、HEADコミットとそのすべての祖先。 * &lt;code&gt;range&lt;/code&gt; ： &lt;code&gt;GitHash&lt;/code&gt; 形式の &lt;code&gt;oid1..oid2&lt;/code&gt; 。 &lt;code&gt;f&lt;/code&gt; は2つの間のすべてのコミットに適用されます。 * &lt;code&gt;by&lt;/code&gt; ：ソート方法。デフォルトではソートされません。その他のオプションは、トポロジー（ &lt;code&gt;LibGit2.Consts.SORT_TOPOLOGICAL&lt;/code&gt; ）、時間の &lt;code&gt;LibGit2.Consts.SORT_TIME&lt;/code&gt; でソートする（LibGit2.Consts.SORT_TIME、最も古いものが最初）または時間の &lt;code&gt;LibGit2.Consts.SORT_REVERSE&lt;/code&gt; でソートする（LibGit2.Consts.SORT_REVERSE、最も新しい）。 * &lt;code&gt;rev&lt;/code&gt; ：ソート順を逆にするかどうか（たとえば、トポロジカルソートが使用されている場合）。</target>
        </trans-unit>
        <trans-unit id="6ec4842754e5953917652390962c1ff76956e408" translate="yes" xml:space="preserve">
          <source>Using the &lt;a href=&quot;#LibGit2.GitRevWalker&quot;&gt;&lt;code&gt;GitRevWalker&lt;/code&gt;&lt;/a&gt;&lt;code&gt;walker&lt;/code&gt; to &quot;walk&quot; over every commit in the repository's history, find the number of commits which return &lt;code&gt;true&lt;/code&gt; when &lt;code&gt;f&lt;/code&gt; is applied to them. The keyword arguments are: * &lt;code&gt;oid&lt;/code&gt;: The &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; of the commit to begin the walk from. The default is to use &lt;a href=&quot;#LibGit2.push_head!&quot;&gt;&lt;code&gt;push_head!&lt;/code&gt;&lt;/a&gt; and therefore the HEAD commit and all its ancestors. * &lt;code&gt;by&lt;/code&gt;: The sorting method. The default is not to sort. Other options are to sort by topology (&lt;code&gt;LibGit2.Consts.SORT_TOPOLOGICAL&lt;/code&gt;), to sort forwards in time (&lt;code&gt;LibGit2.Consts.SORT_TIME&lt;/code&gt;, most ancient first) or to sort backwards in time (&lt;code&gt;LibGit2.Consts.SORT_REVERSE&lt;/code&gt;, most recent first). * &lt;code&gt;rev&lt;/code&gt;: Whether to reverse the sorted order (for instance, if topological sorting is used).</source>
          <target state="translated">&lt;a href=&quot;#LibGit2.GitRevWalker&quot;&gt; &lt;code&gt;GitRevWalker&lt;/code&gt; &lt;/a&gt; &lt;code&gt;walker&lt;/code&gt; を使用して、リポジトリの履歴内のすべてのコミットを「ウォーク」し、 &lt;code&gt;f&lt;/code&gt; が適用されたときに &lt;code&gt;true&lt;/code&gt; を返すコミットの数を見つけます。キーワード引数は次のとおりです。* &lt;code&gt;oid&lt;/code&gt; ：ウォークを開始するコミットの&lt;a href=&quot;#LibGit2.GitHash&quot;&gt; &lt;code&gt;GitHash&lt;/code&gt; &lt;/a&gt;。デフォルトでは&lt;a href=&quot;#LibGit2.push_head!&quot;&gt; &lt;code&gt;push_head!&lt;/code&gt; &lt;/a&gt;を使用します！したがって、HEADコミットとそのすべての祖先。 * &lt;code&gt;by&lt;/code&gt; ：ソート方法。デフォルトではソートされません。その他のオプションは、トポロジーで並べ替える（ &lt;code&gt;LibGit2.Consts.SORT_TOPOLOGICAL&lt;/code&gt; ）、時間で &lt;code&gt;LibGit2.Consts.SORT_TIME&lt;/code&gt; 方向に並べ替える（LibGit2.Consts.SORT_TIME、最も古いものから）、または時間で逆方向に並べ替える（ &lt;code&gt;LibGit2.Consts.SORT_REVERSE&lt;/code&gt; )です。、最新の最初）。* &lt;code&gt;rev&lt;/code&gt; ：ソート順を逆にするかどうか（たとえば、トポロジカルソートが使用されている場合）。</target>
        </trans-unit>
        <trans-unit id="c413028736212fe9357e9b5b1dc5c398cc081dcd" translate="yes" xml:space="preserve">
          <source>Using the project Properties dialog, go to &lt;code&gt;C/C++&lt;/code&gt; | &lt;code&gt;General&lt;/code&gt; and add &lt;code&gt;$(JULIA_DIR)\include\julia\&lt;/code&gt; to the Additional Include Directories property. Then, go to the &lt;code&gt;Linker&lt;/code&gt; | &lt;code&gt;General&lt;/code&gt; section and add &lt;code&gt;$(JULIA_DIR)\lib&lt;/code&gt; to the Additional Library Directories property. Finally, under &lt;code&gt;Linker&lt;/code&gt; | &lt;code&gt;Input&lt;/code&gt;, add &lt;code&gt;libjulia.dll.a;libopenlibm.dll.a;&lt;/code&gt; to the list of libraries.</source>
          <target state="translated">プロジェクトの[プロパティ]ダイアログを使用して、 &lt;code&gt;C/C++&lt;/code&gt; 移動します。 &lt;code&gt;General&lt;/code&gt; を &lt;code&gt;$(JULIA_DIR)\include\julia\&lt;/code&gt; 、$（JULIA_DIR）\ include \ julia \をAdditional Include Directoriesプロパティに追加します。次に、 &lt;code&gt;Linker&lt;/code&gt; に移動します。 &lt;code&gt;General&lt;/code&gt; セクションで、 &lt;code&gt;$(JULIA_DIR)\lib&lt;/code&gt; をAdditional Library Directoriesプロパティに追加します。最後に、 &lt;code&gt;Linker&lt;/code&gt; 下で| &lt;code&gt;Input&lt;/code&gt; 、 &lt;code&gt;libjulia.dll.a;libopenlibm.dll.a;&lt;/code&gt; を追加 ライブラリのリストに。</target>
        </trans-unit>
        <trans-unit id="8486afb99169a641f479a3a3c9bb4fcde8005d8e" translate="yes" xml:space="preserve">
          <source>Usually &lt;code&gt;begin&lt;/code&gt; will not be necessary, since keywords such as &lt;a href=&quot;#function&quot;&gt;&lt;code&gt;function&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#let&quot;&gt;&lt;code&gt;let&lt;/code&gt;&lt;/a&gt; implicitly begin blocks of code. See also &lt;a href=&quot;#;&quot;&gt;&lt;code&gt;;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#function&quot;&gt; &lt;code&gt;function&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#let&quot;&gt; &lt;code&gt;let&lt;/code&gt; &lt;/a&gt;などのキーワードはコードのブロックを暗黙的に開始するため、通常は &lt;code&gt;begin&lt;/code&gt; する必要はありません。も参照してください&lt;a href=&quot;#;&quot;&gt; &lt;code&gt;;&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="32aeab02a74532020ea8342a8515157c825ef703" translate="yes" xml:space="preserve">
          <source>Usually a function has 4 methods defined, one each for &lt;a href=&quot;../../base/numbers/index#Core.Float64&quot;&gt;&lt;code&gt;Float64&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/numbers/index#Core.Float32&quot;&gt;&lt;code&gt;Float32&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;ComplexF64&lt;/code&gt; and &lt;code&gt;ComplexF32&lt;/code&gt; arrays.</source>
          <target state="translated">通常、関数には4つのメソッドが定義されており、それぞれが&lt;a href=&quot;../../base/numbers/index#Core.Float64&quot;&gt; &lt;code&gt;Float64&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../base/numbers/index#Core.Float32&quot;&gt; &lt;code&gt;Float32&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;ComplexF64&lt;/code&gt; および &lt;code&gt;ComplexF32&lt;/code&gt; 配列に対応しています。</target>
        </trans-unit>
        <trans-unit id="c67e26c63c1724df60d067a3aaa25a98d5abbf4a" translate="yes" xml:space="preserve">
          <source>Utilities for capturing, filtering and presenting streams of log events. Normally you don't need to import &lt;code&gt;Logging&lt;/code&gt; to create log events; for this the standard logging macros such as &lt;code&gt;@info&lt;/code&gt; are already exported by &lt;code&gt;Base&lt;/code&gt; and available by default.</source>
          <target state="translated">ログイベントのストリームをキャプチャ、フィルタリング、および表示するためのユーティリティ。通常、ログイベントを作成するために &lt;code&gt;Logging&lt;/code&gt; をインポートする必要はありません。このため、 &lt;code&gt;@info&lt;/code&gt; などの標準のロギングマクロはすでに &lt;code&gt;Base&lt;/code&gt; によってエクスポートされており、デフォルトで使用できます。</target>
        </trans-unit>
        <trans-unit id="6a681da6b0fa29ce81a94277f5bd3f0a9276fbf0" translate="yes" xml:space="preserve">
          <source>Utility Collections</source>
          <target state="translated">ユーティリティーコレクション</target>
        </trans-unit>
        <trans-unit id="d8041011401dc800a6ef88f382bc39cf1b615aba" translate="yes" xml:space="preserve">
          <source>V (vector)</source>
          <target state="translated">V</target>
        </trans-unit>
        <trans-unit id="18ba99a2e2b417b08555df0928741485f7c523bd" translate="yes" xml:space="preserve">
          <source>V (vectors)</source>
          <target state="translated">V</target>
        </trans-unit>
        <trans-unit id="b33892fbddeffc3368077b4904ad0b3d562a7312" translate="yes" xml:space="preserve">
          <source>VERSION</source>
          <target state="translated">VERSION</target>
        </trans-unit>
        <trans-unit id="66771bf9a86898929e11d8280264a532271f941a" translate="yes" xml:space="preserve">
          <source>Val</source>
          <target state="translated">Val</target>
        </trans-unit>
        <trans-unit id="08dd90402b12e9c88291ba119e611cc5ba9ab615" translate="yes" xml:space="preserve">
          <source>Valid rounding modes for &lt;code&gt;round(::Period, ::T, ::RoundingMode)&lt;/code&gt; are &lt;code&gt;RoundNearestTiesUp&lt;/code&gt; (default), &lt;code&gt;RoundDown&lt;/code&gt; (&lt;code&gt;floor&lt;/code&gt;), and &lt;code&gt;RoundUp&lt;/code&gt; (&lt;code&gt;ceil&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;round(::Period, ::T, ::RoundingMode)&lt;/code&gt; 有効な丸めモードは、 &lt;code&gt;RoundNearestTiesUp&lt;/code&gt; （デフォルト）、 &lt;code&gt;RoundDown&lt;/code&gt; （ &lt;code&gt;floor&lt;/code&gt; ）、および &lt;code&gt;RoundUp&lt;/code&gt; （ &lt;code&gt;ceil&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="e229542993641075d277cab335befb1ae3dc141e" translate="yes" xml:space="preserve">
          <source>Valid rounding modes for &lt;code&gt;round(::TimeType, ::Period, ::RoundingMode)&lt;/code&gt; are &lt;code&gt;RoundNearestTiesUp&lt;/code&gt; (default), &lt;code&gt;RoundDown&lt;/code&gt; (&lt;code&gt;floor&lt;/code&gt;), and &lt;code&gt;RoundUp&lt;/code&gt; (&lt;code&gt;ceil&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;round(::TimeType, ::Period, ::RoundingMode)&lt;/code&gt; 有効な丸めモードは、 &lt;code&gt;RoundNearestTiesUp&lt;/code&gt; （デフォルト）、 &lt;code&gt;RoundDown&lt;/code&gt; （ &lt;code&gt;floor&lt;/code&gt; ）、および &lt;code&gt;RoundUp&lt;/code&gt; （ &lt;code&gt;ceil&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="8dce170de238b1feda2ecd9674ea3ca0d068fbcb" translate="yes" xml:space="preserve">
          <source>Value</source>
          <target state="translated">Value</target>
        </trans-unit>
        <trans-unit id="1177a18f70b2bb097f1359141743708a01d953b5" translate="yes" xml:space="preserve">
          <source>Value (Int)</source>
          <target state="translated">値(Int)</target>
        </trans-unit>
        <trans-unit id="a746d4614f2c8d263b81621b92d48c15618301c7" translate="yes" xml:space="preserve">
          <source>Value returned by &lt;code&gt;IteratorEltype(IterType)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;IteratorEltype(IterType)&lt;/code&gt; によって返される値</target>
        </trans-unit>
        <trans-unit id="696aa1f3090aa306169dbbcd87d65ab566c6fb8e" translate="yes" xml:space="preserve">
          <source>Value returned by &lt;code&gt;IteratorSize(IterType)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;IteratorSize(IterType)&lt;/code&gt; によって返される値</target>
        </trans-unit>
        <trans-unit id="8dbeffeaf7d26e3574474d9149c27ff30a4b3dcd" translate="yes" xml:space="preserve">
          <source>Values can also be specified inside a &lt;code&gt;begin&lt;/code&gt; block, e.g.</source>
          <target state="translated">値は、 &lt;code&gt;begin&lt;/code&gt; ブロック内で指定することもできます。たとえば、</target>
        </trans-unit>
        <trans-unit id="58b8d8e0cc20bd561990f4bb053e439ba7b1a7a6" translate="yes" xml:space="preserve">
          <source>Values can be converted to &lt;a href=&quot;../../base/numbers/index#Core.Float32&quot;&gt;&lt;code&gt;Float32&lt;/code&gt;&lt;/a&gt; easily:</source>
          <target state="translated">値は簡単に&lt;a href=&quot;../../base/numbers/index#Core.Float32&quot;&gt; &lt;code&gt;Float32&lt;/code&gt; &lt;/a&gt;に変換できます。</target>
        </trans-unit>
        <trans-unit id="54fd969a40a4590a5e37b505ecdc00c8fcdea460" translate="yes" xml:space="preserve">
          <source>Values can be interpolated into &lt;code&gt;@async&lt;/code&gt; via &lt;code&gt;$&lt;/code&gt;, which copies the value directly into the constructed underlying closure. This allows you to insert the &lt;em&gt;value&lt;/em&gt; of a variable, isolating the aysnchronous code from changes to the variable's value in the current task.</source>
          <target state="translated">値は &lt;code&gt;$&lt;/code&gt; を介して &lt;code&gt;@async&lt;/code&gt; に補間できます。これにより、構築された基になるクロージャーに値が直接コピーされます。これにより、変数の&lt;em&gt;値&lt;/em&gt;を挿入して、現在のタスクでの変数の値の変更から非同期コードを分離できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="b1cd2449da5e0e91d48452010ff76e262ea87fcd" translate="yes" xml:space="preserve">
          <source>Values can be interpolated into &lt;code&gt;@spawn&lt;/code&gt; via &lt;code&gt;$&lt;/code&gt;, which copies the value directly into the constructed underlying closure. This allows you to insert the &lt;em&gt;value&lt;/em&gt; of a variable, isolating the aysnchronous code from changes to the variable's value in the current task.</source>
          <target state="translated">値は &lt;code&gt;$&lt;/code&gt; を介して &lt;code&gt;@spawn&lt;/code&gt; に補間できます。これにより、構築された基になるクロージャーに値が直接コピーされます。これにより、変数の&lt;em&gt;値&lt;/em&gt;を挿入して、現在のタスクでの変数の値の変更から非同期コードを分離できます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="ddf483076f265858393b29ed989b1873d2e7a8e3" translate="yes" xml:space="preserve">
          <source>Values that are normally unordered, such as &lt;code&gt;NaN&lt;/code&gt;, are ordered in an arbitrary but consistent fashion. &lt;a href=&quot;#Base.missing&quot;&gt;&lt;code&gt;missing&lt;/code&gt;&lt;/a&gt; values are ordered last.</source>
          <target state="translated">&lt;code&gt;NaN&lt;/code&gt; など、通常は順序付けされていない値は、任意ですが一貫した方法で順序付けされます。&lt;a href=&quot;#Base.missing&quot;&gt; &lt;code&gt;missing&lt;/code&gt; &lt;/a&gt;値は最後に並べられます。</target>
        </trans-unit>
        <trans-unit id="03572b0c8598fe7cd07df82b0e9920bb7de722a3" translate="yes" xml:space="preserve">
          <source>Vararg Tuple Types</source>
          <target state="translated">Vararg タプル型</target>
        </trans-unit>
        <trans-unit id="382fbc37c5cfb465437b195cd4bad0fff65a9b68" translate="yes" xml:space="preserve">
          <source>Varargs Functions</source>
          <target state="translated">Varargs関数</target>
        </trans-unit>
        <trans-unit id="47b78c15d0fa2b4ea4d1d2b05e8208800687165c" translate="yes" xml:space="preserve">
          <source>Varargs are supported with the following convention:</source>
          <target state="translated">Varargs は以下の規約でサポートされています。</target>
        </trans-unit>
        <trans-unit id="19de69cb601f53a4ea7af22a65c71ae63251365c" translate="yes" xml:space="preserve">
          <source>Variable</source>
          <target state="translated">Variable</target>
        </trans-unit>
        <trans-unit id="df9191935912f85d859043667e9941151178e6c8" translate="yes" xml:space="preserve">
          <source>Variable names must begin with a letter (A-Z or a-z), underscore, or a subset of Unicode code points greater than 00A0; in particular, &lt;a href=&quot;http://www.fileformat.info/info/unicode/category/index.htm&quot;&gt;Unicode character categories&lt;/a&gt; Lu/Ll/Lt/Lm/Lo/Nl (letters), Sc/So (currency and other symbols), and a few other letter-like characters (e.g. a subset of the Sm math symbols) are allowed. Subsequent characters may also include ! and digits (0-9 and other characters in categories Nd/No), as well as other Unicode code points: diacritics and other modifying marks (categories Mn/Mc/Me/Sk), some punctuation connectors (category Pc), primes, and a few other characters.</source>
          <target state="translated">変数名は、文字（AZまたはaz）、アンダースコア、または00A0より大きいUnicodeコードポイントのサブセットで始まる必要があります。特に、&lt;a href=&quot;http://www.fileformat.info/info/unicode/category/index.htm&quot;&gt;Unicode文字カテゴリ&lt;/a&gt; Lu / Ll / Lt / Lm / Lo / Nl（文字）、Sc / So（通貨およびその他の記号）、およびその他のいくつかの文字のような文字（Sm数学記号のサブセットなど）は、次のとおりです。許可されています。後続の文字には！と数字（0-9とカテゴリNd / Noのその他の文字）、およびその他のUnicodeコードポイント：分音符号とその他の変更マーク（カテゴリMn / Mc / Me / Sk）、一部の句読記号（カテゴリPc）、素数、と他のいくつかのキャラクター。</target>
        </trans-unit>
        <trans-unit id="ac018db1f7b00972061adff843d37497d8ee153c" translate="yes" xml:space="preserve">
          <source>Variables</source>
          <target state="translated">Variables</target>
        </trans-unit>
        <trans-unit id="973c98f8ec2704255a1037ca6cefd4104098ec96" translate="yes" xml:space="preserve">
          <source>Variables can also have lower bounds:</source>
          <target state="translated">また、変数は下限値を持つこともできます。</target>
        </trans-unit>
        <trans-unit id="6312673cd4e08ae646a5dc5b0fa180b46d3ef898" translate="yes" xml:space="preserve">
          <source>Variant of &lt;a href=&quot;#Base.Sort.partialsort!&quot;&gt;&lt;code&gt;partialsort!&lt;/code&gt;&lt;/a&gt; which copies &lt;code&gt;v&lt;/code&gt; before partially sorting it, thereby returning the same thing as &lt;code&gt;partialsort!&lt;/code&gt; but leaving &lt;code&gt;v&lt;/code&gt; unmodified.</source>
          <target state="translated">&lt;a href=&quot;#Base.Sort.partialsort!&quot;&gt; &lt;code&gt;partialsort!&lt;/code&gt; &lt;/a&gt;変形！これは、 &lt;code&gt;v&lt;/code&gt; を部分的にソートする前にコピーして、 &lt;code&gt;partialsort!&lt;/code&gt; と同じものを返します！ &lt;code&gt;v&lt;/code&gt; を変更せずに残します。</target>
        </trans-unit>
        <trans-unit id="ea0d65af26fddc33c72a84dbe68995163f1d5904" translate="yes" xml:space="preserve">
          <source>Variant of &lt;a href=&quot;#Base.sort!&quot;&gt;&lt;code&gt;sort!&lt;/code&gt;&lt;/a&gt; that returns a sorted copy of &lt;code&gt;v&lt;/code&gt; leaving &lt;code&gt;v&lt;/code&gt; itself unmodified.</source>
          <target state="translated">&lt;a href=&quot;#Base.sort!&quot;&gt; &lt;code&gt;sort!&lt;/code&gt; &lt;/a&gt;変形！リターンソートコピーその &lt;code&gt;v&lt;/code&gt; 残し &lt;code&gt;v&lt;/code&gt; 自体変更されていません。</target>
        </trans-unit>
        <trans-unit id="099e0303f2658cdf82256a3185bfb0c3094bde80" translate="yes" xml:space="preserve">
          <source>Various types of iterable containers will be introduced and discussed in later sections of the manual (see, e.g., &lt;a href=&quot;../arrays/index#man-multi-dim-arrays&quot;&gt;Multi-dimensional Arrays&lt;/a&gt;).</source>
          <target state="translated">さまざまなタイプの反復可能なコンテナが紹介され、マニュアルの後のセクションで説明されます（たとえば、&lt;a href=&quot;../arrays/index#man-multi-dim-arrays&quot;&gt;多次元配列を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="fc6ba2473e2753b36bcc2d690f41319c47e7d4f9" translate="yes" xml:space="preserve">
          <source>Various types of iterable containers will be introduced and discussed in later sections of the manual (see, e.g., &lt;a href=&quot;../arrays/index#man-multi-dim-arrays-1&quot;&gt;Multi-dimensional Arrays&lt;/a&gt;).</source>
          <target state="translated">さまざまなタイプの反復可能なコンテナが導入され、マニュアルの後半のセクションで説明されます（たとえば、&lt;a href=&quot;../arrays/index#man-multi-dim-arrays-1&quot;&gt;多次元配列を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="f625899326d51a58569ee688860f4767ebf2e302" translate="yes" xml:space="preserve">
          <source>VecOrMat</source>
          <target state="translated">VecOrMat</target>
        </trans-unit>
        <trans-unit id="a57e06f45491067f031284fb03d3a20a0abf04fd" translate="yes" xml:space="preserve">
          <source>Vector</source>
          <target state="translated">Vector</target>
        </trans-unit>
        <trans-unit id="e681c39f4e2c29eed8261e191272b7fca77a9c4b" translate="yes" xml:space="preserve">
          <source>Vector Or Cross Product</source>
          <target state="translated">ベクトルまたはクロス製品</target>
        </trans-unit>
        <trans-unit id="ce239837ecd44e25f6f247a56fa730d6a4823074" translate="yes" xml:space="preserve">
          <source>Vector type for storing sparse vectors.</source>
          <target state="translated">疎なベクトルを格納するためのベクトル型.</target>
        </trans-unit>
        <trans-unit id="8bbbd2eeb202ade49225a4f2e7942a3447ab3322" translate="yes" xml:space="preserve">
          <source>Vector()</source>
          <target state="translated">Vector()</target>
        </trans-unit>
        <trans-unit id="13b136054b35a3cebfee1d05d794ba71cbd26cf1" translate="yes" xml:space="preserve">
          <source>Vectorized &quot;dot&quot; operators</source>
          <target state="translated">ベクトル化された「ドット」演算子</target>
        </trans-unit>
        <trans-unit id="bc9291e5dce9436485c2013f50e2ce1162733428" translate="yes" xml:space="preserve">
          <source>Vectors and multidimensional arrays of integers</source>
          <target state="translated">ベクトルと整数の多次元配列</target>
        </trans-unit>
        <trans-unit id="9b7af30a2daf7acc8dfa153d97b4943cb1e0d136" translate="yes" xml:space="preserve">
          <source>Verifies that a credential is ready for use in authentication.</source>
          <target state="translated">クレデンシャルが認証で使用できる状態であることを確認します。</target>
        </trans-unit>
        <trans-unit id="cc0c6486c895f3039458f341e76e91cb7780448a" translate="yes" xml:space="preserve">
          <source>Version Number Literals</source>
          <target state="translated">バージョン番号 リテラル</target>
        </trans-unit>
        <trans-unit id="840940d2b34c4d5b1ded250105162a1f63ce0844" translate="yes" xml:space="preserve">
          <source>Version number type which follow the specifications of &lt;a href=&quot;https://semver.org/&quot;&gt;semantic versioning&lt;/a&gt;, composed of major, minor and patch numeric values, followed by pre-release and build alpha-numeric annotations. See also &lt;a href=&quot;#Base.@v_str&quot;&gt;&lt;code&gt;@v_str&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://semver.org/&quot;&gt;セマンティックバージョニング&lt;/a&gt;の仕様に準拠するバージョン番号タイプ。メジャー、マイナー、およびパッチの数値で構成され、その後にプレリリースおよびビルドの英数字アノテーションが続きます。&lt;a href=&quot;#Base.@v_str&quot;&gt; &lt;code&gt;@v_str&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="a725950201de2fb1ac976f520070a65a2e88a90c" translate="yes" xml:space="preserve">
          <source>Version numbers can easily be expressed with non-standard string literals of the form &lt;a href=&quot;../../base/base/index#Base.@v_str&quot;&gt;&lt;code&gt;v&quot;...&quot;&lt;/code&gt;&lt;/a&gt;. Version number literals create &lt;a href=&quot;../../base/base/index#Base.VersionNumber&quot;&gt;&lt;code&gt;VersionNumber&lt;/code&gt;&lt;/a&gt; objects which follow the specifications of &lt;a href=&quot;https://semver.org/&quot;&gt;semantic versioning&lt;/a&gt;, and therefore are composed of major, minor and patch numeric values, followed by pre-release and build alpha-numeric annotations. For example, &lt;code&gt;v&quot;0.2.1-rc1+win64&quot;&lt;/code&gt; is broken into major version &lt;code&gt;0&lt;/code&gt;, minor version &lt;code&gt;2&lt;/code&gt;, patch version &lt;code&gt;1&lt;/code&gt;, pre-release &lt;code&gt;rc1&lt;/code&gt; and build &lt;code&gt;win64&lt;/code&gt;. When entering a version literal, everything except the major version number is optional, therefore e.g. &lt;code&gt;v&quot;0.2&quot;&lt;/code&gt; is equivalent to &lt;code&gt;v&quot;0.2.0&quot;&lt;/code&gt; (with empty pre-release/build annotations), &lt;code&gt;v&quot;2&quot;&lt;/code&gt; is equivalent to &lt;code&gt;v&quot;2.0.0&quot;&lt;/code&gt;, and so on.</source>
          <target state="translated">バージョン番号は、&lt;a href=&quot;../../base/base/index#Base.@v_str&quot;&gt; &lt;code&gt;v&quot;...&quot;&lt;/code&gt; &lt;/a&gt;という形式の非標準の文字列リテラルで簡単に表現できます。バージョン番号リテラルは、&lt;a href=&quot;https://semver.org/&quot;&gt;セマンティックバージョニング&lt;/a&gt;の仕様に従う&lt;a href=&quot;../../base/base/index#Base.VersionNumber&quot;&gt; &lt;code&gt;VersionNumber&lt;/code&gt; &lt;/a&gt;オブジェクトを作成します。したがって、メジャー、マイナー、およびパッチの数値で構成され、その後にプレリリースおよびビルドの英数字アノテーションが続きます。たとえば、 &lt;code&gt;v&quot;0.2.1-rc1+win64&quot;&lt;/code&gt; は、メジャーバージョン &lt;code&gt;0&lt;/code&gt; 、マイナーバージョン &lt;code&gt;2&lt;/code&gt; 、パッチバージョン &lt;code&gt;1&lt;/code&gt; 、プレリリース &lt;code&gt;rc1&lt;/code&gt; 、ビルド &lt;code&gt;win64&lt;/code&gt; に分かれています。バージョンリテラルを入力する場合、メジャーバージョン番号を除くすべてがオプションであるため、たとえば &lt;code&gt;v&quot;0.2&quot;&lt;/code&gt; 相当する &lt;code&gt;v&quot;0.2.0&quot;&lt;/code&gt; （空のプレリリース/ビルド注釈付き）、 &lt;code&gt;v&quot;2&quot;&lt;/code&gt; に相当する &lt;code&gt;v&quot;2.0.0&quot;&lt;/code&gt; 、など。</target>
        </trans-unit>
        <trans-unit id="74ca9be91c967075fcdd2bbc6d1263539be41f2a" translate="yes" xml:space="preserve">
          <source>VersionNumber</source>
          <target state="translated">VersionNumber</target>
        </trans-unit>
        <trans-unit id="2750d3223582565870adf32b96da562927d7229f" translate="yes" xml:space="preserve">
          <source>Versioning</source>
          <target state="translated">Versioning</target>
        </trans-unit>
        <trans-unit id="6c837db00b975f19f0ba6c749c7f02fb45a75996" translate="yes" xml:space="preserve">
          <source>Vertical Bar Beside Right Triangle</source>
          <target state="translated">右三角形の横に垂直なバー</target>
        </trans-unit>
        <trans-unit id="a468f19138c967f465d18bb3d4e19b98f3336def" translate="yes" xml:space="preserve">
          <source>Vertical Bar Beside Right Triangle + Combining Long Solidus Overlay / Non-Spacing Long Slash Overlay</source>
          <target state="translated">右三角形の横の垂直バー+ロングソリダスオーバーレイ/ノンスペーシングロングスラッシュオーバーレイの組み合わせ</target>
        </trans-unit>
        <trans-unit id="d0c79970994459f8933a235bb69e83cc040e00e6" translate="yes" xml:space="preserve">
          <source>Vertical Bar Double Left Turnstile</source>
          <target state="translated">垂直バーダブル左回転木戸</target>
        </trans-unit>
        <trans-unit id="3a4b1492c64df3b0ebe959084058d3c7e44acaf3" translate="yes" xml:space="preserve">
          <source>Vertical Ellipsis</source>
          <target state="translated">垂直方向のエリプシス</target>
        </trans-unit>
        <trans-unit id="85654619bc65a9e5e4aa04358cadb455bde3f5f4" translate="yes" xml:space="preserve">
          <source>Vertical Traffic Light</source>
          <target state="translated">垂直方向の信号機</target>
        </trans-unit>
        <trans-unit id="0fd57d0e0d51781315415bae3e4dcd95ee338231" translate="yes" xml:space="preserve">
          <source>Very Much Greater-Than / Very Much Greater Than</source>
          <target state="translated">非常に多くの Greater-Than/非常に多くの Greater-Than</target>
        </trans-unit>
        <trans-unit id="dcb7da13aed9121a1d37058fdbf6964b34d24029" translate="yes" xml:space="preserve">
          <source>Very Much Less-Than / Very Much Less Than</source>
          <target state="translated">非常に少ない/非常に少ないより</target>
        </trans-unit>
        <trans-unit id="8b22dde6a21b3a00457b198409a5900843726950" translate="yes" xml:space="preserve">
          <source>Very few operations are defined on Colons directly; instead they are converted by &lt;a href=&quot;#Base.to_indices&quot;&gt;&lt;code&gt;to_indices&lt;/code&gt;&lt;/a&gt; to an internal vector type (&lt;code&gt;Base.Slice&lt;/code&gt;) to represent the collection of indices they span before being used.</source>
          <target state="translated">コロンで直接定義される操作はほとんどありません。代わりに、それらは&lt;a href=&quot;#Base.to_indices&quot;&gt; &lt;code&gt;to_indices&lt;/code&gt; &lt;/a&gt;によって内部ベクトルタイプ（ &lt;code&gt;Base.Slice&lt;/code&gt; ）に変換され、使用される前にそれらがまたがるインデックスのコレクションを表します。</target>
        </trans-unit>
        <trans-unit id="76dfb3491d119e5519addb4c3e23e281cad05fa2" translate="yes" xml:space="preserve">
          <source>Vibration Mode</source>
          <target state="translated">振動モード</target>
        </trans-unit>
        <trans-unit id="00416ac0206eeb19bcbdaefda8ab643c20b70d6c" translate="yes" xml:space="preserve">
          <source>Victory Hand</source>
          <target state="translated">勝利の手</target>
        </trans-unit>
        <trans-unit id="0cc4b58b439f3228d73765f0de7bf812cc9b4238" translate="yes" xml:space="preserve">
          <source>Video Camera</source>
          <target state="translated">ビデオカメラ</target>
        </trans-unit>
        <trans-unit id="7f01866ab45271f0dfa12184523966d4a3b5815e" translate="yes" xml:space="preserve">
          <source>Video Game</source>
          <target state="translated">ビデオゲーム</target>
        </trans-unit>
        <trans-unit id="2c80f0cab4afba2fa27c199aefcd29cf64ce8dbf" translate="yes" xml:space="preserve">
          <source>Videocassette</source>
          <target state="translated">Videocassette</target>
        </trans-unit>
        <trans-unit id="9568ab6197c20797ef7250c030ffac3b0cf028d7" translate="yes" xml:space="preserve">
          <source>Viewdata Square</source>
          <target state="translated">ビューデータスクエア</target>
        </trans-unit>
        <trans-unit id="ed1e68321de928793ee07ea5fe03956e64af46bb" translate="yes" xml:space="preserve">
          <source>Viewing a stack trace</source>
          <target state="translated">スタックトレースの表示</target>
        </trans-unit>
        <trans-unit id="5e0bd50fdb165ff5eea765ea67ef0112f77cca8d" translate="yes" xml:space="preserve">
          <source>Views (SubArrays and other view types)</source>
          <target state="translated">ビュー (サブ配列とその他のビュータイプ)</target>
        </trans-unit>
        <trans-unit id="c64d3409dcdd8152fa3df75455bfc567c1050921" translate="yes" xml:space="preserve">
          <source>Violin</source>
          <target state="translated">Violin</target>
        </trans-unit>
        <trans-unit id="0f6f6df133ed6ac243cb306e16b3c97677996488" translate="yes" xml:space="preserve">
          <source>Virgo</source>
          <target state="translated">Virgo</target>
        </trans-unit>
        <trans-unit id="310ab3071155ff081bc588d8dce0840f2c1db5b6" translate="yes" xml:space="preserve">
          <source>Visit this &lt;a href=&quot;https://julialang.org/blog/2019/07/multithreading/&quot;&gt;blog post&lt;/a&gt; for a presentation of Julia multi-threading features.</source>
          <target state="translated">Juliaマルチスレッド機能のプレゼンテーションについては、この&lt;a href=&quot;https://julialang.org/blog/2019/07/multithreading/&quot;&gt;ブログ投稿に&lt;/a&gt;アクセスしてください。</target>
        </trans-unit>
        <trans-unit id="423f1f3d80c4d824ca917e13649a5c584a13ec87" translate="yes" xml:space="preserve">
          <source>Visual Studio Code</source>
          <target state="translated">Visual Studioコード</target>
        </trans-unit>
        <trans-unit id="8ea2c5b5f236297f327f1c4b74f3faa6e41a0626" translate="yes" xml:space="preserve">
          <source>Volcano</source>
          <target state="translated">Volcano</target>
        </trans-unit>
        <trans-unit id="3435bdb02b0cd637470f09185300f98914ecbabf" translate="yes" xml:space="preserve">
          <source>Volume Integral</source>
          <target state="translated">ボリューム積分</target>
        </trans-unit>
        <trans-unit id="4a22d4b48472fa25ad58e33b26aad65175777536" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Five Eighths / Fraction Five Eighths</source>
          <target state="translated">下品なフラクション・ファイブ・エイト/フラクション・ファイブ・エイト</target>
        </trans-unit>
        <trans-unit id="2ffaa1b3f0a7068587451e32ec2d77c7b9fca7af" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Five Sixths / Fraction Five Sixths</source>
          <target state="translated">下品なフラクション・ファイブシックス/フラクション・ファイブシックス</target>
        </trans-unit>
        <trans-unit id="e4f79cd34a21bf7565ffa9564108d106398b89f9" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Four Fifths / Fraction Four Fifths</source>
          <target state="translated">下品なフラクション・フォー・フィフス/フラクション・フォー・フィフス</target>
        </trans-unit>
        <trans-unit id="de91e6ed7b9551ac836b4b7620665dd412d396bc" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction One Eighth / Fraction One Eighth</source>
          <target state="translated">下品なフラクション・ワン・エイト/フラクション・ワン・エイト</target>
        </trans-unit>
        <trans-unit id="73a5459d60b79f176337ca7f2581a21e48217ad1" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction One Fifth / Fraction One Fifth</source>
          <target state="translated">下品なフラクション・ワン・フィフス/フラクション・ワン・フィフス</target>
        </trans-unit>
        <trans-unit id="a03faa6cb45424752e687589d775c2e7ca16d904" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction One Half / Fraction One Half</source>
          <target state="translated">下品なフラクション・ワン・ハーフ/フラクション・ワン・ハーフ</target>
        </trans-unit>
        <trans-unit id="4a49020d16507f59e732507c20917b4f04877588" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction One Ninth</source>
          <target state="translated">尋常分数第九</target>
        </trans-unit>
        <trans-unit id="fc2cd9a24a1b8820b1de3f240e0c733e1b2cb00f" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction One Quarter / Fraction One Quarter</source>
          <target state="translated">下品なフラクション・ワン・クォーター/フラクション・ワン・クォーター</target>
        </trans-unit>
        <trans-unit id="c3dc27da6531a07b9639c96eeb57f3c6166b854d" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction One Seventh</source>
          <target state="translated">下品なフラクション・ワン・セブンス</target>
        </trans-unit>
        <trans-unit id="a5b497ee93232519615401c8f274683da6ac9e31" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction One Sixth / Fraction One Sixth</source>
          <target state="translated">下品なフラクション・ワンシックス/フラクション・ワンシックス</target>
        </trans-unit>
        <trans-unit id="ada7f7ea5dfbd4c19ba9c3e580d06159c80a1e52" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction One Tenth</source>
          <target state="translated">下品な分数の10分の1</target>
        </trans-unit>
        <trans-unit id="4fe9918b0f58d14d507e3c3ac80d2abe0b2b2c00" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction One Third / Fraction One Third</source>
          <target state="translated">下品なフラクション・ワン・サード/フラクション・ワン・サード</target>
        </trans-unit>
        <trans-unit id="533f02ec1b18beabada67383f82de17ba9397a9f" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Seven Eighths / Fraction Seven Eighths</source>
          <target state="translated">下品なフラクション・セブンエイト/フラクション・セブンエイト</target>
        </trans-unit>
        <trans-unit id="772183d1aa4241b593aae736d3517cb349b6502d" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Three Eighths / Fraction Three Eighths</source>
          <target state="translated">下品なフラクション・スリー・エイト/フラクション・スリー・エイト</target>
        </trans-unit>
        <trans-unit id="f41956a7c6db371ccf04a21004f0afd7c3fdfbb0" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Three Fifths / Fraction Three Fifths</source>
          <target state="translated">下品なフラクション・スリー・フィフス/フラクション・スリー・フィフス</target>
        </trans-unit>
        <trans-unit id="96bbd2d7245dd133a3f9a78e5320abff3ef4e207" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Three Quarters / Fraction Three Quarters</source>
          <target state="translated">下品なフラクション・スリークォーターズ/フラクション・スリークォーターズ</target>
        </trans-unit>
        <trans-unit id="e3ae2856dd94274c80a8e6426b4994dc2779632b" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Two Fifths / Fraction Two Fifths</source>
          <target state="translated">下品なフラクション・ツー・フィフス/フラクション・ツー・フィフス</target>
        </trans-unit>
        <trans-unit id="7fa906e09060606fdcb3fd3c63c507358187596c" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Two Thirds / Fraction Two Thirds</source>
          <target state="translated">下品なフラクション・ツー・サーズ/フラクション・ツー・サーズ</target>
        </trans-unit>
        <trans-unit id="924c01e5f46e201273bd64cb92dc787e33fcf371" translate="yes" xml:space="preserve">
          <source>Vulgar Fraction Zero Thirds</source>
          <target state="translated">下品な分数ゼロサーズ</target>
        </trans-unit>
        <trans-unit id="0746ad7fab8b17b9696764cb8215894c325800cd" translate="yes" xml:space="preserve">
          <source>Wait for a Task to finish, then return its result value. If the task fails with an exception, a &lt;code&gt;TaskFailedException&lt;/code&gt; (which wraps the failed task) is thrown.</source>
          <target state="translated">タスクが終了するのを待ってから、その結果値を返します。タスクが例外で失敗した場合、 &lt;code&gt;TaskFailedException&lt;/code&gt; （失敗したタスクをラップする）がスローされます。</target>
        </trans-unit>
        <trans-unit id="700756d9987ff8eb1bf98e15bdd0cb4f7b0b4c43" translate="yes" xml:space="preserve">
          <source>Wait for a Task to finish, then return its result value. If the task fails with an exception, the exception is propagated (re-thrown in the task that called fetch).</source>
          <target state="translated">タスクが終了するのを待ち、その結果の値を返します。タスクが例外で失敗した場合、その例外は伝播されます(fetchを呼んだタスクで再スローされます)。</target>
        </trans-unit>
        <trans-unit id="673aefa6be6107ab62aedf7c032815d166f52464" translate="yes" xml:space="preserve">
          <source>Wait for a value to become available for the specified &lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; で&lt;/a&gt;値が使用可能になるのを待ちます。</target>
        </trans-unit>
        <trans-unit id="8ead67a72786e6cde16e53095e4c792246b473f0" translate="yes" xml:space="preserve">
          <source>Wait for a value to become available on the specified &lt;a href=&quot;../../stdlib/distributed/index#Distributed.RemoteChannel&quot;&gt;&lt;code&gt;RemoteChannel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定された&lt;a href=&quot;../../stdlib/distributed/index#Distributed.RemoteChannel&quot;&gt; &lt;code&gt;RemoteChannel&lt;/code&gt; で&lt;/a&gt;値が利用可能になるのを待ちます。</target>
        </trans-unit>
        <trans-unit id="a2da391139615691051e202fac8e36602c8d8b55" translate="yes" xml:space="preserve">
          <source>Wait for and get a value from a &lt;a href=&quot;#Distributed.RemoteChannel&quot;&gt;&lt;code&gt;RemoteChannel&lt;/code&gt;&lt;/a&gt;. Exceptions raised are the same as for a &lt;a href=&quot;#Distributed.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;. Does not remove the item fetched.</source>
          <target state="translated">待って、&lt;a href=&quot;#Distributed.RemoteChannel&quot;&gt; &lt;code&gt;RemoteChannel&lt;/code&gt; &lt;/a&gt;から値を取得します。発生する例外は、&lt;a href=&quot;#Distributed.Future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; の場合&lt;/a&gt;と同じです。フェッチされたアイテムは削除されません。</target>
        </trans-unit>
        <trans-unit id="26af15450a38e48475b5ea5e4cb3ccfc6b0ebec8" translate="yes" xml:space="preserve">
          <source>Wait for and get a value from a &lt;a href=&quot;#Distributed.RemoteChannel&quot;&gt;&lt;code&gt;RemoteChannel&lt;/code&gt;&lt;/a&gt;. Exceptions raised are the same as for a &lt;code&gt;Future&lt;/code&gt;. Does not remove the item fetched.</source>
          <target state="translated">&lt;a href=&quot;#Distributed.RemoteChannel&quot;&gt; &lt;code&gt;RemoteChannel&lt;/code&gt; &lt;/a&gt;からの値を待って取得します。発生する例外は &lt;code&gt;Future&lt;/code&gt; と同じです。取得したアイテムは削除しません。</target>
        </trans-unit>
        <trans-unit id="6f9cad1615350aa88fc30de4eb3475c1aec850b6" translate="yes" xml:space="preserve">
          <source>Wait for and get the first available item from the channel. Does not remove the item. &lt;code&gt;fetch&lt;/code&gt; is unsupported on an unbuffered (0-size) channel.</source>
          <target state="translated">待って、チャンネルから最初の利用可能なアイテムを取得します。アイテムを削除しません。 &lt;code&gt;fetch&lt;/code&gt; は、バッファリングされていない（0サイズ）チャネルではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="352dbfcf93af85a3591da1d5ec38648c6abb53e1" translate="yes" xml:space="preserve">
          <source>Wait for and get the value of a &lt;a href=&quot;#Distributed.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;. The fetched value is cached locally. Further calls to &lt;code&gt;fetch&lt;/code&gt; on the same reference return the cached value. If the remote value is an exception, throws a &lt;a href=&quot;#Distributed.RemoteException&quot;&gt;&lt;code&gt;RemoteException&lt;/code&gt;&lt;/a&gt; which captures the remote exception and backtrace.</source>
          <target state="translated">待って、&lt;a href=&quot;#Distributed.Future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;の値を取得します。フェッチされた値はローカルにキャッシュされます。同じ参照で &lt;code&gt;fetch&lt;/code&gt; をさらに呼び出すと、キャッシュされた値が返されます。リモート値が例外の場合、リモート例外とバックトレースをキャプチャする&lt;a href=&quot;#Distributed.RemoteException&quot;&gt; &lt;code&gt;RemoteException&lt;/code&gt; &lt;/a&gt;をスローします。</target>
        </trans-unit>
        <trans-unit id="6b7b622d11b105cf23e49505960529494a392b04" translate="yes" xml:space="preserve">
          <source>Wait for one of the &lt;code&gt;sem_size&lt;/code&gt; permits to be available, blocking until one can be acquired.</source>
          <target state="translated">&lt;code&gt;sem_size&lt;/code&gt; 許可の1つが使用可能になるのを待ち、1つが取得できるまでブロックします。</target>
        </trans-unit>
        <trans-unit id="a017114c4d0dd517c996d0a2c594edadea16c041" translate="yes" xml:space="preserve">
          <source>Wait until all lexically-enclosed uses of &lt;code&gt;@async&lt;/code&gt;, &lt;code&gt;@spawn&lt;/code&gt;, &lt;code&gt;@spawnat&lt;/code&gt; and &lt;code&gt;@distributed&lt;/code&gt; are complete. All exceptions thrown by enclosed async operations are collected and thrown as a &lt;code&gt;CompositeException&lt;/code&gt;.</source>
          <target state="translated">字句的に囲まれた &lt;code&gt;@async&lt;/code&gt; 、 &lt;code&gt;@spawn&lt;/code&gt; 、 &lt;code&gt;@spawnat&lt;/code&gt; 、および &lt;code&gt;@distributed&lt;/code&gt; の使用がすべて完了するまで待ちます。囲まれた非同期操作によってスローされたすべての例外は収集され、 &lt;code&gt;CompositeException&lt;/code&gt; としてスローされます。</target>
        </trans-unit>
        <trans-unit id="72fc4cb0feac4737de18649536c986d639721b93" translate="yes" xml:space="preserve">
          <source>Waiting tasks are woken after an initial delay of &lt;code&gt;delay&lt;/code&gt; seconds, and then repeating with the given &lt;code&gt;interval&lt;/code&gt; in seconds. If &lt;code&gt;interval&lt;/code&gt; is equal to &lt;code&gt;0&lt;/code&gt;, the timer is only triggered once. When the timer is closed (by &lt;a href=&quot;../io-network/index#Base.close&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; waiting tasks are woken with an error. Use &lt;a href=&quot;../io-network/index#Base.isopen&quot;&gt;&lt;code&gt;isopen&lt;/code&gt;&lt;/a&gt; to check whether a timer is still active.</source>
          <target state="translated">待機中のタスクは、最初に &lt;code&gt;delay&lt;/code&gt; 秒の遅延の後に起こされ、指定された &lt;code&gt;interval&lt;/code&gt; （秒）で繰り返されます。場合 &lt;code&gt;interval&lt;/code&gt; ISに等しい &lt;code&gt;0&lt;/code&gt; 、タイマーが一度だけ起動されます。タイマーがクローズされたとき（&lt;a href=&quot;../io-network/index#Base.close&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt;待機タスクによりエラーが発生します&lt;a href=&quot;../io-network/index#Base.isopen&quot;&gt; &lt;code&gt;isopen&lt;/code&gt; &lt;/a&gt;を使用して、タイマーがまだアクティブであるかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="1071d3e2d3b79d4d8bb7daf85adf19588062a6b7" translate="yes" xml:space="preserve">
          <source>Waiting tasks are woken and the function &lt;code&gt;callback&lt;/code&gt; is called after an initial delay of &lt;code&gt;delay&lt;/code&gt; seconds, and then repeating with the given &lt;code&gt;interval&lt;/code&gt; in seconds. If &lt;code&gt;interval&lt;/code&gt; is equal to &lt;code&gt;0&lt;/code&gt;, the timer is only triggered once. The function &lt;code&gt;callback&lt;/code&gt; is called with a single argument, the timer itself. When the timer is closed (by &lt;a href=&quot;../io-network/index#Base.close&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; waiting tasks are woken with an error. Use &lt;a href=&quot;../io-network/index#Base.isopen&quot;&gt;&lt;code&gt;isopen&lt;/code&gt;&lt;/a&gt; to check whether a timer is still active.</source>
          <target state="translated">待機中のタスクが起こされ、関数の &lt;code&gt;callback&lt;/code&gt; は &lt;code&gt;delay&lt;/code&gt; 秒の初期遅延の後に呼び出され、指定された &lt;code&gt;interval&lt;/code&gt; （秒単位）で繰り返されます。場合 &lt;code&gt;interval&lt;/code&gt; ISに等しい &lt;code&gt;0&lt;/code&gt; 、タイマーが一度だけ起動されます。関数 &lt;code&gt;callback&lt;/code&gt; は、タイマー自体という単一の引数で呼び出されます。タイマーがクローズされたとき（&lt;a href=&quot;../io-network/index#Base.close&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt;待機タスクによりエラーが発生します&lt;a href=&quot;../io-network/index#Base.isopen&quot;&gt; &lt;code&gt;isopen&lt;/code&gt; &lt;/a&gt;を使用して、タイマーがまだアクティブであるかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="384445ca71f292b1676c085911adc7efa7f44a24" translate="yes" xml:space="preserve">
          <source>Waits until &lt;code&gt;testcb&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; or for &lt;code&gt;secs&lt;/code&gt; seconds, whichever is earlier. &lt;code&gt;testcb&lt;/code&gt; is polled every &lt;code&gt;pollint&lt;/code&gt; seconds.</source>
          <target state="translated">&lt;code&gt;testcb&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返すか、 &lt;code&gt;secs&lt;/code&gt; 秒のいずれか早い方まで待機します。 &lt;code&gt;testcb&lt;/code&gt; は &lt;code&gt;pollint&lt;/code&gt; 秒ごとにポーリングされます。</target>
        </trans-unit>
        <trans-unit id="8a6f339c134e36072927cf0fd66259fb6ad6c909" translate="yes" xml:space="preserve">
          <source>Waits until &lt;code&gt;testcb&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; or for &lt;code&gt;timeout&lt;/code&gt; seconds, whichever is earlier. &lt;code&gt;testcb&lt;/code&gt; is polled every &lt;code&gt;pollint&lt;/code&gt; seconds. The minimum duration for &lt;code&gt;timeout&lt;/code&gt; and &lt;code&gt;pollint&lt;/code&gt; is 1 millisecond or &lt;code&gt;0.001&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;testcb&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返すまで、または &lt;code&gt;timeout&lt;/code&gt; 秒のいずれか早い方まで待機します。 &lt;code&gt;testcb&lt;/code&gt; は、 &lt;code&gt;pollint&lt;/code&gt; 秒ごとにポーリングされます。 &lt;code&gt;timeout&lt;/code&gt; と &lt;code&gt;pollint&lt;/code&gt; の最小期間は1ミリ秒または &lt;code&gt;0.001&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="58fe2746e814a18dfed92008014ef09975c04f23" translate="yes" xml:space="preserve">
          <source>Wake up tasks waiting for a condition, passing them &lt;code&gt;val&lt;/code&gt;. If &lt;code&gt;all&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; (the default), all waiting tasks are woken, otherwise only one is. If &lt;code&gt;error&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the passed value is raised as an exception in the woken tasks.</source>
          <target state="translated">条件を待っているタスクを起こし、 &lt;code&gt;val&lt;/code&gt; を渡します。場合は &lt;code&gt;all&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; （デフォルト）、すべての待ちタスクが起こされ、それ以外の場合は一つだけです。場合は &lt;code&gt;error&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 、渡された値を起こさタスクで例外として発生します。</target>
        </trans-unit>
        <trans-unit id="2ab901b7e5b8bd4f885d9c6a8cbc8ae091c1b076" translate="yes" xml:space="preserve">
          <source>Waning Crescent Moon Symbol</source>
          <target state="translated">衰退した三日月のシンボル</target>
        </trans-unit>
        <trans-unit id="5ca89a5dd3637ddb705adb67e86886b8842de63a" translate="yes" xml:space="preserve">
          <source>Waning Gibbous Moon Symbol</source>
          <target state="translated">輪廻するギブスの月のシンボル</target>
        </trans-unit>
        <trans-unit id="3009d557c90c919cd9d0ea8a12b75430344b5929" translate="yes" xml:space="preserve">
          <source>Warn</source>
          <target state="translated">Warn</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="b32fd871aad45a3830f5319cd5329b94c1730bca" translate="yes" xml:space="preserve">
          <source>Warning Sign</source>
          <target state="translated">警告サイン</target>
        </trans-unit>
        <trans-unit id="2e960da975b92f1fcb07b7378eb672fc07701597" translate="yes" xml:space="preserve">
          <source>Warning: do not implement these methods if the underlying storage is not actually strided, as it may lead to incorrect results or segmentation faults.</source>
          <target state="translated">警告:不正確な結果やセグメンテーションエラーにつながる可能性があるため、基礎となるストレージが実際にストライドされていない場合は、これらのメソッドを実装しないでください。</target>
        </trans-unit>
        <trans-unit id="d91ebf5887cf9ee3c9f843d1887a6d922dc78c46" translate="yes" xml:space="preserve">
          <source>Watch</source>
          <target state="translated">Watch</target>
        </trans-unit>
        <trans-unit id="95dfef8d44a4bee27fe25561a3c9c0487432f65b" translate="yes" xml:space="preserve">
          <source>Watch file or directory &lt;code&gt;path&lt;/code&gt; for changes until a change occurs or &lt;code&gt;timeout_s&lt;/code&gt; seconds have elapsed.</source>
          <target state="translated">変更が発生するか、 &lt;code&gt;timeout_s&lt;/code&gt; 秒が経過するまで、ファイルまたはディレクトリ &lt;code&gt;path&lt;/code&gt; の変更を監視します。</target>
        </trans-unit>
        <trans-unit id="59134ad32d2b5206214dcf33380079d24664842d" translate="yes" xml:space="preserve">
          <source>Watches a file or directory &lt;code&gt;path&lt;/code&gt; for changes until a change has occurred or &lt;code&gt;timeout_s&lt;/code&gt; seconds have elapsed.</source>
          <target state="translated">変更が発生するか、 &lt;code&gt;timeout_s&lt;/code&gt; 秒が経過するまで、ファイルまたはディレクトリ &lt;code&gt;path&lt;/code&gt; の変更を監視します。</target>
        </trans-unit>
        <trans-unit id="1ca35816415b36528899a025f235ead5b493c4c6" translate="yes" xml:space="preserve">
          <source>Water Buffalo</source>
          <target state="translated">水牛</target>
        </trans-unit>
        <trans-unit id="e06db6b2e3d7113b354825a671bcfd66f3f37636" translate="yes" xml:space="preserve">
          <source>Water Closet</source>
          <target state="translated">ウォータークローゼット</target>
        </trans-unit>
        <trans-unit id="26d7518c22143e2c303ad5d3b3b76e99881c89f4" translate="yes" xml:space="preserve">
          <source>Water Wave</source>
          <target state="translated">水の波</target>
        </trans-unit>
        <trans-unit id="654a5083667369ba4ea98c6fad0fba9b362d84f9" translate="yes" xml:space="preserve">
          <source>Watermelon</source>
          <target state="translated">Watermelon</target>
        </trans-unit>
        <trans-unit id="efcfd2863140aff2c4eb2bdd6fa9656ad7057054" translate="yes" xml:space="preserve">
          <source>Wave Arrow Pointing Directly Left</source>
          <target state="translated">直接左を指している波の矢印</target>
        </trans-unit>
        <trans-unit id="1d1fa735e928bfc4e19cadbd3eae648f435c998b" translate="yes" xml:space="preserve">
          <source>Waving Hand Sign</source>
          <target state="translated">手を振っている手のサイン</target>
        </trans-unit>
        <trans-unit id="5f0c28665bc4f163773e677f770df64f28f10a09" translate="yes" xml:space="preserve">
          <source>Wavy Dash</source>
          <target state="translated">ウェーブダッシュ</target>
        </trans-unit>
        <trans-unit id="78a2e376b64ecbcd255eac49c815de57f72c8cc7" translate="yes" xml:space="preserve">
          <source>Waxing Crescent Moon Symbol</source>
          <target state="translated">蝋引き三日月のシンボル</target>
        </trans-unit>
        <trans-unit id="369994eb3b0ebd5d85b9b8c5c1054fdb4a4e6a45" translate="yes" xml:space="preserve">
          <source>Waxing Gibbous Moon Symbol</source>
          <target state="translated">蝋引きギブス月のシンボル</target>
        </trans-unit>
        <trans-unit id="3761de263d1138df106d8089687e0582792188a8" translate="yes" xml:space="preserve">
          <source>We also define a convenience wrapper for a &lt;code&gt;SharedArray&lt;/code&gt; implementation</source>
          <target state="translated">&lt;code&gt;SharedArray&lt;/code&gt; 実装の便利なラッパーも定義します</target>
        </trans-unit>
        <trans-unit id="3cd7937c29f83be5fa8d995ae61932aae9d922a0" translate="yes" xml:space="preserve">
          <source>We can also specify multiple packages at once:</source>
          <target state="translated">一度に複数のパッケージを指定することも可能です。</target>
        </trans-unit>
        <trans-unit id="0cf25eada1cacba577a55ee72c0083a1f8723a92" translate="yes" xml:space="preserve">
          <source>We can ask for information about the active environment by using &lt;code&gt;status&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; を使用して、アクティブな環境に関する情報を要求できます。</target>
        </trans-unit>
        <trans-unit id="e272c4ad190b0938bc9c69088b0d3965bfa5c474" translate="yes" xml:space="preserve">
          <source>We can now execute &lt;code&gt;sub2ind_gen_impl&lt;/code&gt; and examine the expression it returns:</source>
          <target state="translated">これで、 &lt;code&gt;sub2ind_gen_impl&lt;/code&gt; を実行して、返される式を確認できます。</target>
        </trans-unit>
        <trans-unit id="6faffdfd84b81290f711f7dea5e21f96d49747fe" translate="yes" xml:space="preserve">
          <source>We can put our tests for the &lt;code&gt;foo(x)&lt;/code&gt; function in a test set:</source>
          <target state="translated">&lt;code&gt;foo(x)&lt;/code&gt; 関数のテストをテストセットに入れることができます。</target>
        </trans-unit>
        <trans-unit id="908493f843edf7ee66a6309d8ae472662e884e33" translate="yes" xml:space="preserve">
          <source>We can see &lt;code&gt;tutorial&lt;/code&gt; now contains &lt;code&gt;Example&lt;/code&gt; as a dependency.</source>
          <target state="translated">&lt;code&gt;tutorial&lt;/code&gt; は依存関係として &lt;code&gt;Example&lt;/code&gt; が含まれていることがわかります。</target>
        </trans-unit>
        <trans-unit id="965750ca8edc73d5edaf9b850ece4c5b04a1af65" translate="yes" xml:space="preserve">
          <source>We can see that the &lt;code&gt;&quot;human&quot;&lt;/code&gt; literal has been interpolated into the expression.</source>
          <target state="translated">&lt;code&gt;&quot;human&quot;&lt;/code&gt; リテラルが式に挿入されていることがわかります。</target>
        </trans-unit>
        <trans-unit id="41d616faac9f0af3ed6de89012b5a9c6f5afd1ce" translate="yes" xml:space="preserve">
          <source>We can see that the first two code units in the string &lt;code&gt;s&lt;/code&gt; form an overlong encoding of space character. It is invalid, but is accepted in a string as a single character. The next two code units form a valid start of a three-byte UTF-8 sequence. However, the fifth code unit &lt;code&gt;\xe2&lt;/code&gt; is not its valid continuation. Therefore code units 3 and 4 are also interpreted as malformed characters in this string. Similarly code unit 5 forms a malformed character because &lt;code&gt;|&lt;/code&gt; is not a valid continuation to it. Finally the string &lt;code&gt;s2&lt;/code&gt; contains one too high code point.</source>
          <target state="translated">文字列 &lt;code&gt;s&lt;/code&gt; の最初の2つのコード単位が、スペース文字の過度に長いエンコードを形成していることがわかります。これは無効ですが、文字列では1文字として受け入れられます。次の2つのコード単位は、3バイトのUTF-8シーケンスの有効な開始を形成します。ただし、5番目のコード単位 &lt;code&gt;\xe2&lt;/code&gt; は有効な継続ではありません。したがって、コードユニット3と4も、この文字列内の不正な文字として解釈されます。同様に、コードユニット5は不正な文字を形成します &lt;code&gt;|&lt;/code&gt; これは有効な継続ではありません。最後に、文字列 &lt;code&gt;s2&lt;/code&gt; には高すぎるコードポイントが1つ含まれています。</target>
        </trans-unit>
        <trans-unit id="5ec722680d02359489f3e45fa2c4562e09c9cd1c" translate="yes" xml:space="preserve">
          <source>We can see the &lt;a href=&quot;#Base.Filesystem.mtime&quot;&gt;&lt;code&gt;mtime&lt;/code&gt;&lt;/a&gt; has been modified by &lt;code&gt;touch&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#Base.Filesystem.mtime&quot;&gt; &lt;code&gt;mtime&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;touch&lt;/code&gt; によって変更されたことがわかります。</target>
        </trans-unit>
        <trans-unit id="05b69d4e7a91a49ec3c428dbce42702598bb1b02" translate="yes" xml:space="preserve">
          <source>We can test the info message using</source>
          <target state="translated">情報メッセージをテストするには</target>
        </trans-unit>
        <trans-unit id="d2480cee187d2cc1cc597f470eaeb54baa754265" translate="yes" xml:space="preserve">
          <source>We can use many of the builtin methods that work with iterables, like &lt;a href=&quot;../../base/collections/index#Base.in&quot;&gt;&lt;code&gt;in&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../../stdlib/statistics/index#Statistics.mean&quot;&gt;&lt;code&gt;mean&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../stdlib/statistics/index#Statistics.std&quot;&gt;&lt;code&gt;std&lt;/code&gt;&lt;/a&gt; from the &lt;code&gt;Statistics&lt;/code&gt; standard library module:</source>
          <target state="translated">&lt;a href=&quot;../../base/collections/index#Base.in&quot;&gt; &lt;code&gt;in&lt;/code&gt; &lt;/a&gt;や、 &lt;code&gt;Statistics&lt;/code&gt; 標準ライブラリモジュールの&lt;a href=&quot;../../stdlib/statistics/index#Statistics.mean&quot;&gt; &lt;code&gt;mean&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;../../stdlib/statistics/index#Statistics.std&quot;&gt; &lt;code&gt;std&lt;/code&gt; &lt;/a&gt;など、反復可能オブジェクトで動作する組み込みメソッドの多くを使用できます。</target>
        </trans-unit>
        <trans-unit id="863e927f5402597cd052d4595ad76ea62614af53" translate="yes" xml:space="preserve">
          <source>We can verify that this constructor works and constructs objects that are, in fact, self-referential:</source>
          <target state="translated">このコンストラクタが動作し、実際には自己参照的なオブジェクトを構築することを確認できます。</target>
        </trans-unit>
        <trans-unit id="8792a0f0d8b29fc2a8023ec8a7dd90ce3d0d4dbf" translate="yes" xml:space="preserve">
          <source>We can view the quoted return expression using the function &lt;a href=&quot;../../base/base/index#Base.macroexpand&quot;&gt;&lt;code&gt;macroexpand&lt;/code&gt;&lt;/a&gt; (&lt;strong&gt;important note:&lt;/strong&gt; this is an extremely useful tool for debugging macros):</source>
          <target state="translated">関数&lt;a href=&quot;../../base/base/index#Base.macroexpand&quot;&gt; &lt;code&gt;macroexpand&lt;/code&gt; &lt;/a&gt;を使用して、引用符で囲まれた戻り式を表示できます（&lt;strong&gt;重要な注意：&lt;/strong&gt;これはマクロのデバッグに非常に役立つツールです）。</target>
        </trans-unit>
        <trans-unit id="d4c6277bb37a454f2d70270bbbbe4dad7ec0b9f7" translate="yes" xml:space="preserve">
          <source>We define &lt;code&gt;prod(())&lt;/code&gt; to be 1, and the total number of elements in an array is the product of the size. The size of a zero-dimensional array is &lt;code&gt;()&lt;/code&gt;, and therefore its length is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;prod(())&lt;/code&gt; を1 と定義し、配列の要素の総数はサイズの積です。ゼロ次元配列のサイズは &lt;code&gt;()&lt;/code&gt; であるため、その長さは &lt;code&gt;1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f52fa955d41415a30b99848d48db3fb9c65e8a90" translate="yes" xml:space="preserve">
          <source>We define a &lt;code&gt;dlclose()&lt;/code&gt; method that accepts a parameter of type &lt;code&gt;Nothing&lt;/code&gt;, so that user code does not have to change its behavior for the case that &lt;code&gt;library_name&lt;/code&gt; was not found.</source>
          <target state="translated">タイプ &lt;code&gt;Nothing&lt;/code&gt; のパラメーターを受け入れる &lt;code&gt;dlclose()&lt;/code&gt; メソッドを定義します。これにより、 &lt;code&gt;library_name&lt;/code&gt; が見つからなかった場合にユーザーコードがその動作を変更する必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="dc149b91af6eb560f65443e1ee253cae2c610859" translate="yes" xml:space="preserve">
          <source>We find that global names are frequently constants, and declaring them as such greatly improves performance:</source>
          <target state="translated">グローバル名は定数であることが多く、そのように宣言することで性能が大幅に向上することがわかりました。</target>
        </trans-unit>
        <trans-unit id="483b04db385b0851198da03cd29da645e4ce9af2" translate="yes" xml:space="preserve">
          <source>We have already seen a function &lt;code&gt;f(::Expr...) -&amp;gt; Expr&lt;/code&gt; in a previous section. In fact, &lt;a href=&quot;../../base/base/index#Base.macroexpand&quot;&gt;&lt;code&gt;macroexpand&lt;/code&gt;&lt;/a&gt; is also such a function. So, why do macros exist?</source>
          <target state="translated">前のセクションで、すでに関数 &lt;code&gt;f(::Expr...) -&amp;gt; Expr&lt;/code&gt; ました。実際、&lt;a href=&quot;../../base/base/index#Base.macroexpand&quot;&gt; &lt;code&gt;macroexpand&lt;/code&gt; &lt;/a&gt;もそのような関数です。では、なぜマクロが存在するのでしょうか？</target>
        </trans-unit>
        <trans-unit id="344d6b40dfaca1361099ea7869e0ae03b90d8acf" translate="yes" xml:space="preserve">
          <source>We have now covered all the local scope rules, but before wrapping up this section, perhaps a few words should be said about why the ambiguous soft scope case is handled differently in interactive and non-interactive contexts. There are two obvious questions one could ask:</source>
          <target state="translated">ここまでですべてのローカル スコープ規則を網羅しましたが、この節を終える前に、なぜ曖昧なソフト スコープのケースが対話的なコンテキストと非対話的なコンテキストでは扱いが異なるのかについて少し触れておくべきでしょう。疑問に思うことは2つあります。</target>
        </trans-unit>
        <trans-unit id="6795658430c35f4c900b3f1e2f337a0f0021d3be" translate="yes" xml:space="preserve">
          <source>We have said that a parametric type like &lt;code&gt;Ptr&lt;/code&gt; acts as a supertype of all its instances (&lt;code&gt;Ptr{Int64}&lt;/code&gt; etc.). How does this work? &lt;code&gt;Ptr&lt;/code&gt; itself cannot be a normal data type, since without knowing the type of the referenced data the type clearly cannot be used for memory operations. The answer is that &lt;code&gt;Ptr&lt;/code&gt; (or other parametric types like &lt;code&gt;Array&lt;/code&gt;) is a different kind of type called a &lt;a href=&quot;../../base/base/index#Core.UnionAll&quot;&gt;&lt;code&gt;UnionAll&lt;/code&gt;&lt;/a&gt; type. Such a type expresses the &lt;em&gt;iterated union&lt;/em&gt; of types for all values of some parameter.</source>
          <target state="translated">&lt;code&gt;Ptr&lt;/code&gt; のようなパラメトリックタイプは、そのすべてのインスタンスのスーパータイプとして機能すると述べました（ &lt;code&gt;Ptr{Int64}&lt;/code&gt; など）。これはどのように作動しますか？ &lt;code&gt;Ptr&lt;/code&gt; 自体は通常のデータ型にはなれません。参照されるデータの型がわからなければ、その型は明らかにメモリ操作に使用できないからです。その答えは、 &lt;code&gt;Ptr&lt;/code&gt; （または &lt;code&gt;Array&lt;/code&gt; のような他のパラメトリックタイプ）が&lt;a href=&quot;../../base/base/index#Core.UnionAll&quot;&gt; &lt;code&gt;UnionAll&lt;/code&gt; &lt;/a&gt;タイプと呼ばれる別の種類のタイプであることです。このような型は、いくつかのパラメーターのすべての値の&lt;em&gt;反復&lt;/em&gt;型の&lt;em&gt;和集合&lt;/em&gt;を表します。</target>
        </trans-unit>
        <trans-unit id="636e3e40c3c73838a97fed4217e3ac9db49c3e9d" translate="yes" xml:space="preserve">
          <source>We now add some new definitions for &lt;code&gt;f(x)&lt;/code&gt;:</source>
          <target state="translated">ここで、 &lt;code&gt;f(x)&lt;/code&gt; の新しい定義をいくつか追加します。</target>
        </trans-unit>
        <trans-unit id="cfea8865c7e95aca15b99514b9e0cd50e09aceff" translate="yes" xml:space="preserve">
          <source>We now use &lt;code&gt;Regex(&quot;1&quot;)&lt;/code&gt; instead of &lt;code&gt;r&quot;1&quot;&lt;/code&gt; to make sure that Julia creates separate instances of &lt;code&gt;Regex&lt;/code&gt; object for each entry of &lt;code&gt;rx&lt;/code&gt; vector.</source>
          <target state="translated">ここで、 &lt;code&gt;r&quot;1&quot;&lt;/code&gt; 代わりに &lt;code&gt;Regex(&quot;1&quot;)&lt;/code&gt; を使用して、Juliaが &lt;code&gt;rx&lt;/code&gt; ベクトルの各エントリに対して &lt;code&gt;Regex&lt;/code&gt; オブジェクトの個別のインスタンスを作成することを確認します。</target>
        </trans-unit>
        <trans-unit id="ec35a5b84bcc09ce12511e4f9859c93b1a12cef2" translate="yes" xml:space="preserve">
          <source>We pass the &lt;code&gt;r&lt;/code&gt; vector to &lt;code&gt;g_fix&lt;/code&gt; as generating several RGNs is an expensive operation so we do not want to repeat it every time we run the function.</source>
          <target state="translated">いくつかの &lt;code&gt;g_fix&lt;/code&gt; を生成することは負荷の高い操作であり、関数を実行するたびにそれを繰り返したくないので、 &lt;code&gt;r&lt;/code&gt; ベクトルをg_fixに渡します。</target>
        </trans-unit>
        <trans-unit id="581b814b87b04c0b0319df4ca93ccb93aadd9579" translate="yes" xml:space="preserve">
          <source>We provide examples for each of these. We assume here that the choice of algorithm is independent of the RNG, so we use &lt;code&gt;AbstractRNG&lt;/code&gt; in our signatures.</source>
          <target state="translated">これらのそれぞれの例を示します。ここでは、アルゴリズムの選択はRNGに依存しないと想定しているため、署名には &lt;code&gt;AbstractRNG&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="c18a4ee9acbd3ff8d3e3a474425776415e254fbf" translate="yes" xml:space="preserve">
          <source>We should mention here that this is far from a complete picture of defining functions. Julia has a sophisticated type system and allows multiple dispatch on argument types. None of the examples given here provide any type annotations on their arguments, meaning that they are applicable to all types of arguments. The type system is described in &lt;a href=&quot;../types/index#man-types&quot;&gt;Types&lt;/a&gt; and defining a function in terms of methods chosen by multiple dispatch on run-time argument types is described in &lt;a href=&quot;../methods/index#Methods&quot;&gt;Methods&lt;/a&gt;.</source>
          <target state="translated">ここで、これは関数の定義の全体像からはほど遠いことをここで言及する必要があります。Juliaは洗練された型システムを備えており、引数型に対して複数のディスパッチを許可します。ここに示されている例はいずれも、引数に型の注釈を提供していません。つまり、すべての型の引数に適用できます。型システムは、中に記述されている&lt;a href=&quot;../types/index#man-types&quot;&gt;タイプ&lt;/a&gt;と、実行時の引数の型に複数の派遣により選択された方法の面で関数を定義で説明される&lt;a href=&quot;../methods/index#Methods&quot;&gt;方法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7268f16539c91dcce2fef5a6e0c3e4f4529fa7f0" translate="yes" xml:space="preserve">
          <source>We should mention here that this is far from a complete picture of defining functions. Julia has a sophisticated type system and allows multiple dispatch on argument types. None of the examples given here provide any type annotations on their arguments, meaning that they are applicable to all types of arguments. The type system is described in &lt;a href=&quot;../types/index#man-types-1&quot;&gt;Types&lt;/a&gt; and defining a function in terms of methods chosen by multiple dispatch on run-time argument types is described in &lt;a href=&quot;../methods/index#Methods-1&quot;&gt;Methods&lt;/a&gt;.</source>
          <target state="translated">これは関数の定義の全体像からはほど遠いことをここで言及する必要があります。 Juliaには洗練された型システムがあり、引数型に対して複数のディスパッチが可能です。ここに示す例では、引数に型注釈を付けていません。つまり、すべての型の引数に適用できます。型システムは、中に記述されている&lt;a href=&quot;../types/index#man-types-1&quot;&gt;タイプ&lt;/a&gt;と、実行時の引数の型に複数の派遣により選択された方法の面で関数を定義で説明される&lt;a href=&quot;../methods/index#Methods-1&quot;&gt;方法&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d2a67f0f52d7f08e2b4d80e7a86d1e32e2246dae" translate="yes" xml:space="preserve">
          <source>We start 4 workers to process a single &lt;code&gt;jobs&lt;/code&gt; remote channel. Jobs, identified by an id (&lt;code&gt;job_id&lt;/code&gt;), are written to the channel. Each remotely executing task in this simulation reads a &lt;code&gt;job_id&lt;/code&gt;, waits for a random amount of time and writes back a tuple of &lt;code&gt;job_id&lt;/code&gt;, time taken and its own &lt;code&gt;pid&lt;/code&gt; to the results channel. Finally all the &lt;code&gt;results&lt;/code&gt; are printed out on the master process.</source>
          <target state="translated">4つのワーカーを開始して、単一 &lt;code&gt;jobs&lt;/code&gt; リモートチャネルを処理します。 id（ &lt;code&gt;job_id&lt;/code&gt; ）で識別されるジョブは、チャネルに書き込まれます。このシミュレーションでリモートで実行される各タスクは、 &lt;code&gt;job_id&lt;/code&gt; を読み取り、ランダムな時間待機して、 &lt;code&gt;job_id&lt;/code&gt; のタプル、所要時間、および独自の &lt;code&gt;pid&lt;/code&gt; を結果チャネルに書き込みます。最後に、すべての &lt;code&gt;results&lt;/code&gt; がマスタープロセスに出力されます。</target>
        </trans-unit>
        <trans-unit id="c7602ad29472f270cdd747ca5767f7b21541f864" translate="yes" xml:space="preserve">
          <source>We start by opening Visual Studio and creating a new Console Application project. To the 'stdafx.h' header file, add the following lines at the end:</source>
          <target state="translated">まず、Visual Studio を開き、新しい Console Application プロジェクトを作成します。stdafx.h」ヘッダファイルに、最後に以下の行を追加します。</target>
        </trans-unit>
        <trans-unit id="5e7e52dbeb18f4aab9e295bb6c3fe3b794d7460e" translate="yes" xml:space="preserve">
          <source>We start with a simple C program that initializes Julia and calls some Julia code:</source>
          <target state="translated">まず、Juliaを初期化してJuliaのコードを呼び出すシンプルなC言語のプログラムから始めます。</target>
        </trans-unit>
        <trans-unit id="1ec966563751785e709c57a1206d5b2323de7847" translate="yes" xml:space="preserve">
          <source>We strongly encourage you to try all these examples to see how they work.</source>
          <target state="translated">これらの例をすべて試してみて、どのように機能するのかを確認することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="c178bdaf4eca20bba89f0485a67fed8fb6985604" translate="yes" xml:space="preserve">
          <source>We will first consider Julia &lt;a href=&quot;../control-flow/index#man-tasks-1&quot;&gt;Tasks (aka Coroutines)&lt;/a&gt; and other modules that rely on the Julia runtime library, that allow us to suspend and resume computations with full control of inter-&lt;code&gt;Tasks&lt;/code&gt; communication without having to manually interface with the operating system's scheduler. Julia also supports communication between &lt;code&gt;Tasks&lt;/code&gt; through operations like &lt;a href=&quot;../../base/parallel/index#Base.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;fetch&lt;/code&gt;. Communication and data synchronization is managed through &lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;s, which are the conduits that provide inter-&lt;code&gt;Tasks&lt;/code&gt; communication.</source>
          <target state="translated">最初に、Julia &lt;a href=&quot;../control-flow/index#man-tasks-1&quot;&gt;Tasks（別名コルーチン）&lt;/a&gt;およびJuliaランタイムライブラリに依存する他のモジュールについて検討します。これにより、オペレーティングシステムのスケジューラーと手動でインターフェースする必要なく、 &lt;code&gt;Tasks&lt;/code&gt; 間通信を完全に制御して計算を一時停止および再開できます。Juliaは、&lt;a href=&quot;../../base/parallel/index#Base.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt;や &lt;code&gt;fetch&lt;/code&gt; などの操作による &lt;code&gt;Tasks&lt;/code&gt; 間の通信もサポートしています。通信とデータ同期は、 &lt;code&gt;Tasks&lt;/code&gt; 間通信を提供する導管である&lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt; &lt;code&gt;Channel&lt;/code&gt; &lt;/a&gt;を介して管理されます。</target>
        </trans-unit>
        <trans-unit id="fd2f826c12c0cde32ff9c2aa3aacbda20d8da94e" translate="yes" xml:space="preserve">
          <source>We'll begin with a nice and clear-cut situation&amp;mdash;assignment inside of a hard scope, in this case a function body, when no local variable by that name already exists:</source>
          <target state="translated">まず、わかりやすく明確な状況から始めます。ハードスコープ（この場合は関数本体）内で、その名前のローカル変数がまだ存在しない場合の割り当てです。</target>
        </trans-unit>
        <trans-unit id="14bf173ec6449dfc053db0f852d649e379980987" translate="yes" xml:space="preserve">
          <source>WeakKeyDict</source>
          <target state="translated">WeakKeyDict</target>
        </trans-unit>
        <trans-unit id="f0314de0c1d3e072ee0c5f34821e6e9260b516aa" translate="yes" xml:space="preserve">
          <source>Weary Cat Face</source>
          <target state="translated">ウェアリーキャットフェイス</target>
        </trans-unit>
        <trans-unit id="acc7d3ff4cf1bd52c5872adea707797a48176eb4" translate="yes" xml:space="preserve">
          <source>Weary Face</source>
          <target state="translated">磨耗した顔</target>
        </trans-unit>
        <trans-unit id="ee2bf9bdc622233451493a19e0f78f4514fdb969" translate="yes" xml:space="preserve">
          <source>Wedding</source>
          <target state="translated">Wedding</target>
        </trans-unit>
        <trans-unit id="8bd12f2094b5f4ba0bbdd465685c8e4690ed946b" translate="yes" xml:space="preserve">
          <source>Welcome to the documentation for Julia 1.2.</source>
          <target state="translated">Julia 1.2 のドキュメントへようこそ。</target>
        </trans-unit>
        <trans-unit id="98684eeaaae0713e40f7faf02d029d7cc8b3c048" translate="yes" xml:space="preserve">
          <source>Welcome to the documentation for Julia 1.5.</source>
          <target state="translated">Julia 1.5 のドキュメントへようこそ。</target>
        </trans-unit>
        <trans-unit id="2be913c6a4cf9189e9c190ec0adc68e90e4c97e4" translate="yes" xml:space="preserve">
          <source>Whale</source>
          <target state="translated">Whale</target>
        </trans-unit>
        <trans-unit id="375144b7f845dc51bb4e72f8e608e2b7199156c4" translate="yes" xml:space="preserve">
          <source>What are the differences between zero-dimensional arrays and scalars?</source>
          <target state="translated">0次元配列とスカラの違いは?</target>
        </trans-unit>
        <trans-unit id="e7076b54a9ebe6ee2099ef19db17f5603e67dda2" translate="yes" xml:space="preserve">
          <source>What are the possible causes of an &lt;code&gt;UndefVarError&lt;/code&gt; during remote execution?</source>
          <target state="translated">リモート実行中の &lt;code&gt;UndefVarError&lt;/code&gt; の考えられる原因は何ですか？</target>
        </trans-unit>
        <trans-unit id="28e8482c889872b755ea864c2a6346e9a0dc7c13" translate="yes" xml:space="preserve">
          <source>What does &quot;type-stable&quot; mean?</source>
          <target state="translated">型崩れしない」とはどういうことですか?</target>
        </trans-unit>
        <trans-unit id="d18e5df2eb583dbf63c895d771307dc5beb0550b" translate="yes" xml:space="preserve">
          <source>What does the &lt;code&gt;...&lt;/code&gt; operator do?</source>
          <target state="translated">&lt;code&gt;...&lt;/code&gt; 演算子は何をしますか？</target>
        </trans-unit>
        <trans-unit id="150404929053fe30c3fed0d87906c36fb8c409b2" translate="yes" xml:space="preserve">
          <source>What does this code do? Hint: it's a trick question. The answer is &quot;it depends.&quot; If this code is entered interactively, it behaves the same way it does in a function body. But if the code appears in a file, it prints an ambiguity warning and throws an undefined variable error. Let's see it working in the REPL first:</source>
          <target state="translated">このコードは何をするのでしょうか?ヒント:これはトリックの質問です。答えは「場合による」です。このコードが対話的に入力された場合、関数本体と同じように動作します。しかし、コードがファイル内に現れた場合は、曖昧さの警告を表示し、未定義の変数エラーをスローします。まずはREPLで動作を確認してみましょう。</target>
        </trans-unit>
        <trans-unit id="e403edfbacc5a9300178b028475d72c9ac7f144e" translate="yes" xml:space="preserve">
          <source>What follows is a quick overview of Pkg, Julia's package manager. It should help new users become familiar with basic Pkg features.</source>
          <target state="translated">以下は Julia のパッケージマネージャである Pkg の簡単な概要です。これは新しいユーザが Pkg の基本的な機能に慣れるのに役立つはずです。</target>
        </trans-unit>
        <trans-unit id="d2f2c51d6b2884ac3c8f43369210b486f5aba512" translate="yes" xml:space="preserve">
          <source>What follows is a very brief introduction to Pkg. For more information on &lt;code&gt;Project.toml&lt;/code&gt; files, &lt;code&gt;Manifest.toml&lt;/code&gt; files, package version compatibility (&lt;code&gt;[compat]&lt;/code&gt;), environments, registries, etc., it is highly recommended to read the full manual, which is available here: &lt;a href=&quot;https://julialang.github.io/Pkg.jl/v1/&quot;&gt;https://julialang.github.io/Pkg.jl/v1/&lt;/a&gt;.</source>
          <target state="translated">以下は、Pkgのごく簡単な紹介です。詳細については &lt;code&gt;Project.toml&lt;/code&gt; のファイル、 &lt;code&gt;Manifest.toml&lt;/code&gt; のファイル、パッケージのバージョンの互換性（ &lt;code&gt;[compat]&lt;/code&gt; ）、環境、レジストリなど、非常にここに提供されていますフルマニュアルを読むことをお勧めします：&lt;a href=&quot;https://julialang.github.io/Pkg.jl/v1/&quot;&gt;https：//でjulialang .github.io / Pkg.jl / v1 /&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a4b5a9178463a6f64c403bbf3579ad70f39858c3" translate="yes" xml:space="preserve">
          <source>What follows is a very brief introduction to Pkg. It is highly recommended to read the full manual, which is available here: &lt;a href=&quot;https://julialang.github.io/Pkg.jl/v1/&quot;&gt;https://julialang.github.io/Pkg.jl/v1/&lt;/a&gt;.</source>
          <target state="translated">以下は、Pkgのごく簡単な紹介です。&lt;a href=&quot;https://julialang.github.io/Pkg.jl/v1/&quot;&gt;https://julialang.github.io/Pkg.jl/v1/に&lt;/a&gt;ある完全なマニュアルを読むことを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="4e1b405051e8aa0f8bb9f6f6cf42b1ad141a9ba2" translate="yes" xml:space="preserve">
          <source>What happens if &lt;code&gt;import Zebra&lt;/code&gt; is evaluated in the main &lt;code&gt;App&lt;/code&gt; code base? Since &lt;code&gt;Zebra&lt;/code&gt; does not appear in the project file, the import will fail even though &lt;code&gt;Zebra&lt;/code&gt;&lt;em&gt;does&lt;/em&gt; appear in the manifest file. Moreover, if &lt;code&gt;import Zebra&lt;/code&gt; occurs in the public &lt;code&gt;Priv&lt;/code&gt; package&amp;mdash;the one with UUID &lt;code&gt;2d15fe94-a1f7-436c-a4d8-07a9a496e01c&lt;/code&gt;&amp;mdash;then that would also fail since that &lt;code&gt;Priv&lt;/code&gt; package has no declared dependencies in the manifest file and therefore cannot load any packages. The &lt;code&gt;Zebra&lt;/code&gt; package can only be loaded by packages for which it appear as an explicit dependency in the manifest file: the &lt;code&gt;Pub&lt;/code&gt; package and one of the &lt;code&gt;Priv&lt;/code&gt; packages.</source>
          <target state="translated">場合はどうなるの &lt;code&gt;import Zebra&lt;/code&gt; メインで評価された &lt;code&gt;App&lt;/code&gt; コードベース？以来 &lt;code&gt;Zebra&lt;/code&gt; プロジェクトファイルには表示されませんが、輸入でも失敗する &lt;code&gt;Zebra&lt;/code&gt; &lt;em&gt;ない&lt;/em&gt;マニフェストファイルに表示されます。さらに、パブリック &lt;code&gt;Priv&lt;/code&gt; パッケージ（UUID &lt;code&gt;2d15fe94-a1f7-436c-a4d8-07a9a496e01c&lt;/code&gt; を含むもの）で &lt;code&gt;import Zebra&lt;/code&gt; が発生した場合、 &lt;code&gt;Priv&lt;/code&gt; パッケージはマニフェストファイルに依存関係が宣言されておらず、パッケージをロードできないため、これも失敗します。 &lt;code&gt;Zebra&lt;/code&gt; ：パッケージは、それがマニフェストファイルに明示的な依存関係として表示されるパッケージによってロードすることができ &lt;code&gt;Pub&lt;/code&gt; パッケージと &lt;code&gt;Priv&lt;/code&gt; パッケージの1つ。</target>
        </trans-unit>
        <trans-unit id="1df4ea25877d9225bf9beecd2604c556ef2f3aa4" translate="yes" xml:space="preserve">
          <source>What happens if we evaluate &lt;code&gt;foo&lt;/code&gt; again with a type that we have already used?</source>
          <target state="translated">&lt;code&gt;foo&lt;/code&gt; をすでに使用した型で再度評価するとどうなりますか？</target>
        </trans-unit>
        <trans-unit id="e1b168674d9032058d87b14f2643e8b740569003" translate="yes" xml:space="preserve">
          <source>What if we repeat the process? What is the type of a type of a type? As it happens, types are all composite values and thus all have a type of &lt;code&gt;DataType&lt;/code&gt;:</source>
          <target state="translated">このプロセスを繰り返すとどうなりますか？タイプのタイプのタイプは何ですか？たまたま、型はすべて複合値であるため、すべて &lt;code&gt;DataType&lt;/code&gt; 型になります。</target>
        </trans-unit>
        <trans-unit id="31c8231840d8c0a2ee8876da74fa758be586c4d5" translate="yes" xml:space="preserve">
          <source>What is brought into scope</source>
          <target state="translated">何が範囲に持ち込まれるか</target>
        </trans-unit>
        <trans-unit id="2b0c102525b96cde6901e5f5ceb8c7569053a70f" translate="yes" xml:space="preserve">
          <source>What is the difference between &quot;using&quot; and &quot;import&quot;?</source>
          <target state="translated">使用する」と「輸入する」の違いは?</target>
        </trans-unit>
        <trans-unit id="9bc322e3544ca572c436cc629f272e8f9083662e" translate="yes" xml:space="preserve">
          <source>What is the return value of an assignment?</source>
          <target state="translated">代入の戻り値は何ですか?</target>
        </trans-unit>
        <trans-unit id="2269bad70018db37aa152079ee07e395e293de2e" translate="yes" xml:space="preserve">
          <source>What purpose do parametric abstract types like &lt;code&gt;Pointy&lt;/code&gt; serve? Consider if we create a point-like implementation that only requires a single coordinate because the point is on the diagonal line &lt;em&gt;x = y&lt;/em&gt;:</source>
          <target state="translated">&lt;code&gt;Pointy&lt;/code&gt; ようなパラメトリック抽象型はどのような目的に役立ちますか？点が対角線&lt;em&gt;x = yにある&lt;/em&gt;ため、単一の座標のみを必要とする点のような実装を作成する場合を考えます。</target>
        </trans-unit>
        <trans-unit id="bd4e0eba4d9311f35f7a602da1112be78b3670c2" translate="yes" xml:space="preserve">
          <source>What's going on there? In the first line, we're adding 1 day to January 29th, which results in 2014-01-30; then we add 1 month, so we get 2014-02-30, which then adjusts down to 2014-02-28. In the second example, we add 1 month &lt;em&gt;first&lt;/em&gt;, where we get 2014-02-29, which adjusts down to 2014-02-28, and &lt;em&gt;then&lt;/em&gt; add 1 day, which results in 2014-03-01. One design principle that helps in this case is that, in the presence of multiple Periods, the operations will be ordered by the Periods' &lt;em&gt;types&lt;/em&gt;, not their value or positional order; this means &lt;code&gt;Year&lt;/code&gt; will always be added first, then &lt;code&gt;Month&lt;/code&gt;, then &lt;code&gt;Week&lt;/code&gt;, etc. Hence the following &lt;em&gt;does&lt;/em&gt; result in associativity and Just Works:</source>
          <target state="translated">何が起こっているのですか？最初の行では、1月29日に1日を追加しています。結果は2014-01-30になります。次に1か月追加するため、2014-02-30が得られ、2014-02-28に調整されます。 2番目の例では、&lt;em&gt;最初&lt;/em&gt;に1か月を追加します。2014-02-29は2014-02-28に調整され、&lt;em&gt;次に&lt;/em&gt; 1日を追加すると、2014-03-01になります。この場合に役立つ設計原則の1つは、複数のピリオドが存在する場合、操作は値や位置順ではなく、ピリオドの&lt;em&gt;タイプ&lt;/em&gt;によって順序付けられることです。この手段 &lt;code&gt;Year&lt;/code&gt; 常に、その後、最初に追加される &lt;code&gt;Month&lt;/code&gt; 、その後、 &lt;code&gt;Week&lt;/code&gt; 、などしたがって、以下&lt;em&gt;行い&lt;/em&gt;結合性とだけで動作し、結果：</target>
        </trans-unit>
        <trans-unit id="fdfb635074e8ec4cadb7236583c2872a090d4783" translate="yes" xml:space="preserve">
          <source>What's really going on here is that &lt;code&gt;Point&lt;/code&gt;, &lt;code&gt;Point{Float64}&lt;/code&gt; and &lt;code&gt;Point{Int64}&lt;/code&gt; are all different constructor functions. In fact, &lt;code&gt;Point{T}&lt;/code&gt; is a distinct constructor function for each type &lt;code&gt;T&lt;/code&gt;. Without any explicitly provided inner constructors, the declaration of the composite type &lt;code&gt;Point{T&amp;lt;:Real}&lt;/code&gt; automatically provides an inner constructor, &lt;code&gt;Point{T}&lt;/code&gt;, for each possible type &lt;code&gt;T&amp;lt;:Real&lt;/code&gt;, that behaves just like non-parametric default inner constructors do. It also provides a single general outer &lt;code&gt;Point&lt;/code&gt; constructor that takes pairs of real arguments, which must be of the same type. This automatic provision of constructors is equivalent to the following explicit declaration:</source>
          <target state="translated">ここで実際に行われているのは、 &lt;code&gt;Point&lt;/code&gt; 、 &lt;code&gt;Point{Float64}&lt;/code&gt; 、および &lt;code&gt;Point{Int64}&lt;/code&gt; がすべて異なるコンストラクター関数であるということです。実際、 &lt;code&gt;Point{T}&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; 型ごとに異なるコンストラクター関数です。明示的に提供された内部コンストラクターがない場合、複合タイプ &lt;code&gt;Point{T&amp;lt;:Real}&lt;/code&gt; の宣言は、可能な各タイプ &lt;code&gt;T&amp;lt;:Real&lt;/code&gt; に対して内部パラメーター &lt;code&gt;Point{T}&lt;/code&gt; 自動的に提供します。これは、ノンパラメトリックなデフォルトの内部コンストラクターのように動作します。行う。また、単一の一般的な外側の &lt;code&gt;Point&lt;/code&gt; 提供します同じ型でなければならない実引数のペアを取るコンストラクタ。このコンストラクタの自動提供は、次の明示的な宣言と同等です。</target>
        </trans-unit>
        <trans-unit id="dac94c61f72cef8a05dc1f143540e80e082b95ca" translate="yes" xml:space="preserve">
          <source>Wheelchair Symbol</source>
          <target state="translated">車椅子マーク</target>
        </trans-unit>
        <trans-unit id="e372ad539a5b6f69cfecd518ffee27baf201194a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--depwarn=no&lt;/code&gt;, simply return the result of executing &lt;code&gt;expression&lt;/code&gt;. When &lt;code&gt;--depwarn=error&lt;/code&gt;, check that an ErrorException is thrown.</source>
          <target state="translated">&lt;code&gt;--depwarn=no&lt;/code&gt; の場合は、単に &lt;code&gt;expression&lt;/code&gt; を実行した結果を返します。 &lt;code&gt;--depwarn=error&lt;/code&gt; の場合、ErrorExceptionがスローされることを確認します。</target>
        </trans-unit>
        <trans-unit id="37a200d2bf2141bef32e094222abeb6ea685aeb4" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;--depwarn=yes&lt;/code&gt;, test that &lt;code&gt;expression&lt;/code&gt; emits a deprecation warning and return the value of &lt;code&gt;expression&lt;/code&gt;. The log message string will be matched against &lt;code&gt;pattern&lt;/code&gt; which defaults to &lt;code&gt;r&quot;deprecated&quot;i&lt;/code&gt;.</source>
          <target state="translated">とき &lt;code&gt;--depwarn=yes&lt;/code&gt; 、というテスト &lt;code&gt;expression&lt;/code&gt; 非推奨の警告を発するの値を返す &lt;code&gt;expression&lt;/code&gt; 。ログメッセージ文字列は、デフォルトで &lt;code&gt;r&quot;deprecated&quot;i&lt;/code&gt; となる &lt;code&gt;pattern&lt;/code&gt; と照合されます。</target>
        </trans-unit>
        <trans-unit id="4c1a8dc42946acafa81c5740aa21d2dee07993bf" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;@sayhello&lt;/code&gt; is entered in the REPL, the expression executes immediately, thus we only see the evaluation result:</source>
          <target state="translated">とき &lt;code&gt;@sayhello&lt;/code&gt; は REPLに入力され、表現は、このように我々は唯一の評価結果を参照してください、すぐに実行します。</target>
        </trans-unit>
        <trans-unit id="1e793eb591e046c76c38f6001e51ca3fa2243395" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;A&lt;/code&gt; is sparse, a similar polyalgorithm is used. For indefinite matrices, the &lt;code&gt;LDLt&lt;/code&gt; factorization does not use pivoting during the numerical factorization and therefore the procedure can fail even for invertible matrices.</source>
          <target state="translated">場合 &lt;code&gt;A&lt;/code&gt; が疎であり、同様のpolyalgorithmが使用されます。不定行列の場合、 &lt;code&gt;LDLt&lt;/code&gt; 因数分解は数値因数分解中にピボットを使用しないため、可逆行列の場合でも手順が失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="5a8d30453be3346ceadf6f86b18d6a1b7d2c5482" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;abs&lt;/code&gt; is applied to signed integers, overflow may occur, resulting in the return of a negative value. This overflow occurs only when &lt;code&gt;abs&lt;/code&gt; is applied to the minimum representable value of a signed integer. That is, when &lt;code&gt;x == typemin(typeof(x))&lt;/code&gt;, &lt;code&gt;abs(x) == x &amp;lt; 0&lt;/code&gt;, not &lt;code&gt;-x&lt;/code&gt; as might be expected.</source>
          <target state="translated">場合 &lt;code&gt;abs&lt;/code&gt; 符号付き整数に適用され、オーバーフローが負の値のリターンをもたらす、起こり得ます。このオーバーフローは、 &lt;code&gt;abs&lt;/code&gt; が符号付き整数の表現可能な最小値に適用される場合にのみ発生します。つまり、 &lt;code&gt;x == typemin(typeof(x))&lt;/code&gt; 場合、 &lt;code&gt;abs(x) == x &amp;lt; 0&lt;/code&gt; 、予想される &lt;code&gt;-x&lt;/code&gt; ではありません。</target>
        </trans-unit>
        <trans-unit id="7ef7f5c5a085d7dd04543fecd677114d5fd72981" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;check = true&lt;/code&gt;, an error is thrown if the decomposition fails. When &lt;code&gt;check = false&lt;/code&gt;, responsibility for checking the decomposition's validity (via &lt;a href=&quot;#LinearAlgebra.issuccess&quot;&gt;&lt;code&gt;issuccess&lt;/code&gt;&lt;/a&gt;) lies with the user.</source>
          <target state="translated">ときに &lt;code&gt;check = true&lt;/code&gt; 分解が失敗した場合、エラーがスローされます。 &lt;code&gt;check = false&lt;/code&gt; 場合、分解の有効性を（&lt;a href=&quot;#LinearAlgebra.issuccess&quot;&gt; &lt;code&gt;issuccess&lt;/code&gt; &lt;/a&gt;を介して）チェックする責任はユーザーにあります。</target>
        </trans-unit>
        <trans-unit id="a2637af6fced184f7f479f36a4ece7d55ae2e730" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;data&lt;/code&gt; is not given, the buffer will be both readable and writable by default.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; が指定されていない場合、バッファはデフォルトで読み取りと書き込みの両方が可能です。</target>
        </trans-unit>
        <trans-unit id="bb1635e94802425023fba8788c61c2d8926fff7d" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;p=1&lt;/code&gt;, the operator norm is the maximum absolute column sum of &lt;code&gt;A&lt;/code&gt;:</source>
          <target state="translated">ときに &lt;code&gt;p=1&lt;/code&gt; 、演算子ノルムは最大絶対列合計であり、 &lt;code&gt;A&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="178ec586817b3a48abe80b928aa2dde1b98626f7" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;p=2&lt;/code&gt;, the operator norm is the spectral norm, equal to the largest singular value of &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="translated">とき &lt;code&gt;p=2&lt;/code&gt; 、演算子ノルムは、最大の特異値に等しいスペクトルノルムである &lt;code&gt;A&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="46c9763c674d94ae81ec6e72c5aee69686bbab29" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;p=Inf&lt;/code&gt;, the operator norm is the maximum absolute row sum of &lt;code&gt;A&lt;/code&gt;:</source>
          <target state="translated">場合 &lt;code&gt;p=Inf&lt;/code&gt; 、オペレータのノルムは最大絶対行の和である &lt;code&gt;A&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="12ded29676df364ceceab6c572522fc9e2e7af30" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;sp = Sampler(rng, x, repetition)&lt;/code&gt;, &lt;code&gt;rand(rng, sp)&lt;/code&gt; will be used to draw random values, and should be defined accordingly.</source>
          <target state="translated">場合 &lt;code&gt;sp = Sampler(rng, x, repetition)&lt;/code&gt; 、 &lt;code&gt;rand(rng, sp)&lt;/code&gt; ランダムな値を描画するために使用され、それに応じて定義されるべきです。</target>
        </trans-unit>
        <trans-unit id="86f72b2f90cae1c6e82409384ce1f3ceb6b9eefd" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;wait&lt;/code&gt; is false, the process' I/O streams are directed to &lt;code&gt;devnull&lt;/code&gt;. When &lt;code&gt;wait&lt;/code&gt; is true, I/O streams are shared with the parent process. Use &lt;a href=&quot;#Base.pipeline-Tuple%7BAny,Any,Any,Vararg%7BAny,N%7D%20where%20N%7D&quot;&gt;&lt;code&gt;pipeline&lt;/code&gt;&lt;/a&gt; to control I/O redirection.</source>
          <target state="translated">ときに &lt;code&gt;wait&lt;/code&gt; 偽で、プロセスのI / Oストリームはに向けられている &lt;code&gt;devnull&lt;/code&gt; 。とき &lt;code&gt;wait&lt;/code&gt; が trueで、I / Oストリームは、親プロセスと共有されています。&lt;a href=&quot;#Base.pipeline-Tuple%7BAny,Any,Any,Vararg%7BAny,N%7D%20where%20N%7D&quot;&gt; &lt;code&gt;pipeline&lt;/code&gt; &lt;/a&gt;を使用してI / Oリダイレクトを制御します。</target>
        </trans-unit>
        <trans-unit id="f6b99eaf978e18be85274c3305a641971a22fc94" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;x = &amp;lt;value&amp;gt;&lt;/code&gt; occurs in a local scope, Julia applies the following rules to decide what the expression means based on where the assignment expression occurs and what &lt;code&gt;x&lt;/code&gt; already refers to at that location:</source>
          <target state="translated">場合 &lt;code&gt;x = &amp;lt;value&amp;gt;&lt;/code&gt; 、ローカルスコープで起こる、ジュリアは何代入式が発生する場所に基づいて表現手段と決めるために、次の規則を適用 &lt;code&gt;x&lt;/code&gt; は既にその位置でを意味し：</target>
        </trans-unit>
        <trans-unit id="387339aa06f5aeaa40b73befd69307921f5c8373" translate="yes" xml:space="preserve">
          <source>When a &lt;code&gt;const&lt;/code&gt; definition is only used to define an alias of another definition, such as is the case with the function &lt;code&gt;div&lt;/code&gt; and its alias &lt;code&gt;&amp;divide;&lt;/code&gt; in &lt;code&gt;Base&lt;/code&gt;, do not document the alias and instead document the actual function.</source>
          <target state="translated">場合 &lt;code&gt;const&lt;/code&gt; 定義は、関数の場合と同様に、そのような別の定義のエイリアスを定義するために使用される &lt;code&gt;div&lt;/code&gt; そのエイリアス &lt;code&gt;&amp;divide;&lt;/code&gt; における &lt;code&gt;Base&lt;/code&gt; エイリアスを文書化し、代わりに実際の機能を文書化していません。</target>
        </trans-unit>
        <trans-unit id="66405af7de66d28093c269eb102282edc9ad91d6" translate="yes" xml:space="preserve">
          <source>When a bare identifier or dot expression occurs after a semicolon, the keyword argument name is implied by the identifier or field name. For example &lt;code&gt;plot(x, y; width)&lt;/code&gt; is equivalent to &lt;code&gt;plot(x, y; width=width)&lt;/code&gt; and &lt;code&gt;plot(x, y; options.width)&lt;/code&gt; is equivalent to &lt;code&gt;plot(x, y; width=options.width)&lt;/code&gt;.</source>
          <target state="translated">セミコロンの後に裸の識別子またはドット式が出現する場合、キーワード引数名​​は識別子またはフィールド名によって暗示されます。たとえば、 &lt;code&gt;plot(x, y; width)&lt;/code&gt; は &lt;code&gt;plot(x, y; width=width)&lt;/code&gt; と同等であり、 &lt;code&gt;plot(x, y; options.width)&lt;/code&gt; は &lt;code&gt;plot(x, y; width=options.width)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="d43f7beafb82d84f0b0ca093d70636ab00d5bb6c" translate="yes" xml:space="preserve">
          <source>When a channel is bound to multiple tasks, the first task to terminate will close the channel. When multiple channels are bound to the same task, termination of the task will close all of the bound channels.</source>
          <target state="translated">チャンネルが複数のタスクにバインドされている場合、最初のタスクが終了するとチャンネルが閉じられます。複数のチャンネルが同じタスクにバインドされている場合、タスクを終了すると、バインドされている全てのチャンネルがクローズされます。</target>
        </trans-unit>
        <trans-unit id="59c8aa513c5811a7c3a8d7b2460bea25a7005e55" translate="yes" xml:space="preserve">
          <source>When a file is run as the main script using &lt;code&gt;julia file.jl&lt;/code&gt; one might want to activate extra functionality like command line argument handling. A way to determine that a file is run in this fashion is to check if &lt;code&gt;abspath(PROGRAM_FILE) == @__FILE__&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;julia file.jl&lt;/code&gt; を使用してファイルをメインスクリプトとして実行する場合、コマンドライン引数の処理などの追加機能をアクティブにすることができます。この方法でファイルが実行されていることを確認する方法は、 &lt;code&gt;abspath(PROGRAM_FILE) == @__FILE__&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; であるかどうかを確認することです。</target>
        </trans-unit>
        <trans-unit id="5e7501453daabe62281039e1cf6e34fa2839c62e" translate="yes" xml:space="preserve">
          <source>When a piece of computing work (in practice, executing a particular function) is designated as a &lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt;, it becomes possible to interrupt it by switching to another &lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt;. The original &lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; can later be resumed, at which point it will pick up right where it left off. At first, this may seem similar to a function call. However there are two key differences. First, switching tasks does not use any space, so any number of task switches can occur without consuming the call stack. Second, switching among tasks can occur in any order, unlike function calls, where the called function must finish executing before control returns to the calling function.</source>
          <target state="translated">計算作業（実際には特定の機能の実行）が&lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt; &lt;code&gt;Task&lt;/code&gt; &lt;/a&gt;として指定されている場合、別の&lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt; &lt;code&gt;Task&lt;/code&gt; に&lt;/a&gt;切り替えることで中断することが可能になります。元の&lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt; &lt;code&gt;Task&lt;/code&gt; &lt;/a&gt;は後で再開できます。その時点で、中断したところから再開されます。最初は、これは関数呼び出しに似ているように見えるかもしれません。ただし、2つの重要な違いがあります。第1に、タスクの切り替えはスペースを使用しないため、コールスタックを消費せずにタスクの切り替えをいくつでも実行できます。次に、関数呼び出しとは異なり、タスク間の切り替えは任意の順序で発生する可能性があります。関数呼び出しでは、呼び出し元の関数に制御が戻る前に、呼び出された関数の実行が終了する必要があります。</target>
        </trans-unit>
        <trans-unit id="c322e0ffc2096cd6324029e4fa443fabe59bd5d8" translate="yes" xml:space="preserve">
          <source>When a program needs to interact with the outside world, for example communicating with another machine over the internet, operations in the program may need to happen in an unpredictable order. Say your program needs to download a file. We would like to initiate the download operation, perform other operations while we wait for it to complete, and then resume the code that needs the downloaded file when it is available. This sort of scenario falls in the domain of asynchronous programming, sometimes also referred to as concurrent programming (since, conceptually, multiple things are happening at once).</source>
          <target state="translated">例えば、インターネットを介して他のマシンと通信するなど、プログラムが外界と対話する必要がある場合、プログラム内の操作は予測不可能な順序で行われる必要があるかもしれません。例えば、プログラムがファイルをダウンロードする必要があるとします。ダウンロード操作を開始し、それが完了するのを待つ間に他の操作を行い、ダウンロードしたファイルが利用可能になったら、ダウンロードしたファイルを必要とするコードを再開したいとします。このようなシナリオは非同期プログラミングの領域に属します。</target>
        </trans-unit>
        <trans-unit id="6c9979982b20b6ded943786342ff40e25b341c71" translate="yes" xml:space="preserve">
          <source>When a scalar value is passed with &lt;code&gt;&amp;amp;&lt;/code&gt; as an argument of type &lt;code&gt;Ptr{T}&lt;/code&gt;, the value will first be converted to type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&lt;/code&gt; を &lt;code&gt;Ptr{T}&lt;/code&gt; 型の引数として渡してスカラー値を渡すと、値は最初に &lt;code&gt;T&lt;/code&gt; 型に変換されます。</target>
        </trans-unit>
        <trans-unit id="fe81791971f41be5d7864ff7745e79391be55d47" translate="yes" xml:space="preserve">
          <source>When a significant amount of repetitive boilerplate code is required, it is common to generate it programmatically to avoid redundancy. In most languages, this requires an extra build step, and a separate program to generate the repetitive code. In Julia, expression interpolation and &lt;a href=&quot;../../base/base/index#Base.MainInclude.eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; allow such code generation to take place in the normal course of program execution. For example, consider the following custom type</source>
          <target state="translated">大量の反復的なボイラープレートコードが必要な場合、冗長性を回避するためにプログラムで生成するのが一般的です。ほとんどの言語では、これには追加のビルドステップと、反復コードを生成するための別のプログラムが必要です。Juliaでは、式の補間と&lt;a href=&quot;../../base/base/index#Base.MainInclude.eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; を&lt;/a&gt;使用して、そのようなコード生成をプログラム実行の通常の過程で実行できます。たとえば、次のカスタムタイプを考えます。</target>
        </trans-unit>
        <trans-unit id="0f1094197338bf27238baecc37ce0fa2dfa2098d" translate="yes" xml:space="preserve">
          <source>When a type is applied like a function it is called a &lt;em&gt;constructor&lt;/em&gt;. Two constructors are generated automatically (these are called &lt;em&gt;default constructors&lt;/em&gt;). One accepts any arguments and calls &lt;a href=&quot;../../base/base/index#Base.convert&quot;&gt;&lt;code&gt;convert&lt;/code&gt;&lt;/a&gt; to convert them to the types of the fields, and the other accepts arguments that match the field types exactly. The reason both of these are generated is that this makes it easier to add new definitions without inadvertently replacing a default constructor.</source>
          <target state="translated">タイプが関数のように適用されるとき、それは&lt;em&gt;コンストラクタ&lt;/em&gt;と呼ば&lt;em&gt;れ&lt;/em&gt;ます。2つのコンストラクターが自動的に生成されます（これらは&lt;em&gt;デフォルトのコンストラクター&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;）。1つは引数を受け入れ、&lt;a href=&quot;../../base/base/index#Base.convert&quot;&gt; &lt;code&gt;convert&lt;/code&gt; &lt;/a&gt;を呼び出してそれらをフィールドのタイプに変換し、もう1つはフィールドタイプと完全に一致する引数を受け入れます。これらの両方が生成される理由は、デフォルトのコンストラクターを誤って置き換えずに新しい定義を追加するのが容易になるためです。</target>
        </trans-unit>
        <trans-unit id="98d1d001e4fb72f4a3da5b80ba6df14e5f1fa86f" translate="yes" xml:space="preserve">
          <source>When an &lt;code&gt;Integer&lt;/code&gt;-type value is needed, use &lt;code&gt;Integer(maxintfloat(T))&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;Integer&lt;/code&gt; 型値が必要とされ、使用 &lt;code&gt;Integer(maxintfloat(T))&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eec02c864c4b4a52ed32380f6bbcf97149ade981" translate="yes" xml:space="preserve">
          <source>When an array is passed to C as a &lt;code&gt;Ptr{T}&lt;/code&gt; argument, it is not reinterpret-cast: Julia requires that the element type of the array matches &lt;code&gt;T&lt;/code&gt;, and the address of the first element is passed.</source>
          <target state="translated">配列がCに &lt;code&gt;Ptr{T}&lt;/code&gt; 引数として渡される場合、それは再解釈キャストではありません。ジュリアは配列の要素型が &lt;code&gt;T&lt;/code&gt; と一致し、最初の要素のアドレスが渡されることを要求します。</target>
        </trans-unit>
        <trans-unit id="8566fd6fe66598ffc21c0e41c119f24c167f7a3e" translate="yes" xml:space="preserve">
          <source>When an event is triggered, the appropriate logger is found by looking for a task-local logger with the global logger as fallback. The idea here is that the application code knows how log events should be processed and exists somewhere at the top of the call stack. So we should look up through the call stack to discover the logger &amp;mdash; that is, the logger should be &lt;em&gt;dynamically scoped&lt;/em&gt;. (This is a point of contrast with logging frameworks where the logger is &lt;em&gt;lexically scoped&lt;/em&gt;; provided explicitly by the module author or as a simple global variable. In such a system it's awkward to control logging while composing functionality from multiple modules.)</source>
          <target state="translated">イベントがトリガーされると、フォールバックとしてグローバルロガーを持つタスクローカルロガーを探すことにより、適切なロガーが見つかります。ここでの考え方は、アプリケーションコードがログイベントの処理方法を認識し、コールスタックの最上部に存在するということです。したがって、コールスタックを調べてロガーを見つける必要があり&lt;em&gt;ます&lt;/em&gt;。つまり、ロガーの&lt;em&gt;スコープ&lt;/em&gt;は&lt;em&gt;動的に設定する&lt;/em&gt;必要があり&lt;em&gt;ます&lt;/em&gt;。 （これは、ロガーが&lt;em&gt;レキシカルにスコープ&lt;/em&gt;されているロギングフレームワークとは対照的なポイントです。モジュールの作成者によって明示的に提供されるか、単純なグローバル変数として提供されます。このようなシステムでは、複数のモジュールから機能を構成しながらロギングを制御するのは面倒です。）</target>
        </trans-unit>
        <trans-unit id="981c7afc180e088292ad80d1981131b0506db6e1" translate="yes" xml:space="preserve">
          <source>When an event occurs, a few steps of early filtering occur to avoid generating messages that will be discarded:</source>
          <target state="translated">イベントが発生すると、廃棄されるメッセージを生成しないように、早期にフィルタリングの数段階が発生します。</target>
        </trans-unit>
        <trans-unit id="fe255a18b8e1451834d407df7913b2e3977086f0" translate="yes" xml:space="preserve">
          <source>When an unexpected condition occurs, a function may be unable to return a reasonable value to its caller. In such cases, it may be best for the exceptional condition to either terminate the program while printing a diagnostic error message, or if the programmer has provided code to handle such exceptional circumstances then allow that code to take the appropriate action.</source>
          <target state="translated">予期せぬ条件が発生した場合、関数は呼び出し元に妥当な値を返すことができないことがあります。そのような場合は、診断エラーメッセージを表示しながらプログラムを終了させるか、プログラマーがそのような例外的な状況を処理するためのコードを提供している場合は、そのコードが適切なアクションを取ることを許可するのが最善の方法かもしれません。</target>
        </trans-unit>
        <trans-unit id="7d51c32014a3d44fbfbe45092f164ea5ddadbfc7" translate="yes" xml:space="preserve">
          <source>When appended to a variable on the left-hand side of an assignment, or as part of a &lt;code&gt;local&lt;/code&gt; declaration, the &lt;code&gt;::&lt;/code&gt; operator means something a bit different: it declares the variable to always have the specified type, like a type declaration in a statically-typed language such as C. Every value assigned to the variable will be converted to the declared type using &lt;a href=&quot;../../base/base/index#Base.convert&quot;&gt;&lt;code&gt;convert&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">代入の左側にある変数に追加したり、 &lt;code&gt;local&lt;/code&gt; 宣言の一部として追加したりした場合、 &lt;code&gt;::&lt;/code&gt; 演算子は少し異なる意味を持ちます。 Cなどの静的型付き言語。変数に割り当てられたすべての値は、&lt;a href=&quot;../../base/base/index#Base.convert&quot;&gt; &lt;code&gt;convert&lt;/code&gt; &lt;/a&gt;を使用して宣言された型に変換されます。</target>
        </trans-unit>
        <trans-unit id="ef999f924ed2b51c873965e3d0169626b4f532c7" translate="yes" xml:space="preserve">
          <source>When appended to an expression computing a value, the &lt;code&gt;::&lt;/code&gt; operator is read as &quot;is an instance of&quot;. It can be used anywhere to assert that the value of the expression on the left is an instance of the type on the right. When the type on the right is concrete, the value on the left must have that type as its implementation &amp;ndash; recall that all concrete types are final, so no implementation is a subtype of any other. When the type is abstract, it suffices for the value to be implemented by a concrete type that is a subtype of the abstract type. If the type assertion is not true, an exception is thrown, otherwise, the left-hand value is returned:</source>
          <target state="translated">値を計算する式に追加される場合、 &lt;code&gt;::&lt;/code&gt; 演算子は「のインスタンス」として読み取られます。どこでも使用でき、左側の式の値が右側の型のインスタンスであることを表明できます。右側の型が具象である場合、左側の値はその型を実装として持つ必要があります。具象型はすべてfinalであるため、実装は他のどのサブタイプでもないことを思い出してください。型が抽象の場合、抽象型のサブタイプである具象型によって値が実装されれば十分です。タイプアサーションがtrueでない場合は例外がスローされ、そうでない場合は左側の値が返されます。</target>
        </trans-unit>
        <trans-unit id="15c43c8db23e17e00320a3451d1f8da6af7074e8" translate="yes" xml:space="preserve">
          <source>When are deprecated functions removed?</source>
          <target state="translated">非推奨の機能はいつ削除されますか?</target>
        </trans-unit>
        <trans-unit id="3ea78d13024c34e2f2791c359e186295012c1709" translate="yes" xml:space="preserve">
          <source>When broadcasting with &lt;code&gt;in.(items, collection)&lt;/code&gt; or &lt;code&gt;items .&amp;isin; collection&lt;/code&gt;, both &lt;code&gt;item&lt;/code&gt; and &lt;code&gt;collection&lt;/code&gt; are broadcasted over, which is often not what is intended. For example, if both arguments are vectors (and the dimensions match), the result is a vector indicating whether each value in collection &lt;code&gt;items&lt;/code&gt; is &lt;code&gt;in&lt;/code&gt; the value at the corresponding position in &lt;code&gt;collection&lt;/code&gt;. To get a vector indicating whether each value in &lt;code&gt;items&lt;/code&gt; is in &lt;code&gt;collection&lt;/code&gt;, wrap &lt;code&gt;collection&lt;/code&gt; in a tuple or a &lt;code&gt;Ref&lt;/code&gt; like this: &lt;code&gt;in.(items, Ref(collection))&lt;/code&gt; or &lt;code&gt;items .&amp;isin; Ref(collection)&lt;/code&gt;.</source>
          <target state="translated">で放送する場合 &lt;code&gt;in.(items, collection)&lt;/code&gt; または &lt;code&gt;items .&amp;isin; collection&lt;/code&gt; 、両方の &lt;code&gt;item&lt;/code&gt; と &lt;code&gt;collection&lt;/code&gt; 意図されているものが多いされていない、以上放送されています。両方の引数がベクトル（および寸法が一致）であれば、例えば、結果は、コレクション内の各値か否かを示すベクトルである &lt;code&gt;items&lt;/code&gt; ある &lt;code&gt;in&lt;/code&gt; の対応する位置の値 &lt;code&gt;collection&lt;/code&gt; 。各値か否かを示すベクトル取得する &lt;code&gt;items&lt;/code&gt; である &lt;code&gt;collection&lt;/code&gt; 、ラップ &lt;code&gt;collection&lt;/code&gt; タプルまたはで &lt;code&gt;Ref&lt;/code&gt; このような： &lt;code&gt;in.(items, Ref(collection))&lt;/code&gt; または &lt;code&gt;items .&amp;isin; Ref(collection)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="092ed6ff2b31aa14c009c043eed4169ab86f21f9" translate="yes" xml:space="preserve">
          <source>When broadcasting with &lt;code&gt;items .&amp;notin; collection&lt;/code&gt;, both &lt;code&gt;item&lt;/code&gt; and &lt;code&gt;collection&lt;/code&gt; are broadcasted over, which is often not what is intended. For example, if both arguments are vectors (and the dimensions match), the result is a vector indicating whether each value in collection &lt;code&gt;items&lt;/code&gt; is not in the value at the corresponding position in &lt;code&gt;collection&lt;/code&gt;. To get a vector indicating whether each value in &lt;code&gt;items&lt;/code&gt; is not in &lt;code&gt;collection&lt;/code&gt;, wrap &lt;code&gt;collection&lt;/code&gt; in a tuple or a &lt;code&gt;Ref&lt;/code&gt; like this: &lt;code&gt;items .&amp;notin; Ref(collection)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;items .&amp;notin; collection&lt;/code&gt; でブロードキャストする場合、 &lt;code&gt;item&lt;/code&gt; と &lt;code&gt;collection&lt;/code&gt; 両方がブロードキャストされますが、これは意図されたものではないことがよくあります。両方の引数がベクトル（および寸法が一致）であれば、例えば、結果は、コレクション内の各値か否かを示すベクトルである &lt;code&gt;items&lt;/code&gt; に対応する位置の値にない &lt;code&gt;collection&lt;/code&gt; 。各値か否かを示すベクトル取得する &lt;code&gt;items&lt;/code&gt; でない &lt;code&gt;collection&lt;/code&gt; 、ラップ &lt;code&gt;collection&lt;/code&gt; タプルまたはで &lt;code&gt;Ref&lt;/code&gt; ：このような &lt;code&gt;items .&amp;notin; Ref(collection)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d2e75685386e4e2827a83db4cca905b6c592eba" translate="yes" xml:space="preserve">
          <source>When building generic code, there is often a need for constructing a similar object with some change made to the layout of the type, also necessitating a change of the type parameters. For instance, you might have some sort of abstract array with an arbitrary element type and want to write your computation on it with a specific element type. We must implement a method for each &lt;code&gt;AbstractArray{T}&lt;/code&gt; subtype that describes how to compute this type transform. There is no general transform of one subtype into another subtype with a different parameter. (Quick review: do you see why this is?)</source>
          <target state="translated">一般的なコードを作成する場合、タイプのレイアウトに何らかの変更を加えて同様のオブジェクトを構築する必要があり、タイプパラメータの変更も必要になります。たとえば、任意の要素タイプを含むある種の抽象配列があり、特定の要素タイプを使用して計算を記述したい場合があります。この型変換の計算方法を記述する &lt;code&gt;AbstractArray{T}&lt;/code&gt; サブタイプごとにメソッドを実装する必要があります。1つのサブタイプから別のパラメーターを持つ別のサブタイプへの一般的な変換はありません。（クイックレビュー：これがなぜなのか分かりますか？）</target>
        </trans-unit>
        <trans-unit id="195feaadaa8ee8245dc0e0889f4840c1a8154919" translate="yes" xml:space="preserve">
          <source>When called with no arguments, the temporary name will be an absolute path to a temporary name in the system temporary directory as given by &lt;code&gt;tempdir()&lt;/code&gt;. If a &lt;code&gt;parent&lt;/code&gt; directory argument is given, the temporary path will be in that directory instead.</source>
          <target state="translated">引数なしで呼び出された場合、一時名は、 &lt;code&gt;tempdir()&lt;/code&gt; で指定されたシステム一時ディレクトリ内の一時名への絶対パスになります。場合は &lt;code&gt;parent&lt;/code&gt; ディレクトリの引数が指定され、一時的なパスではなく、そのディレクトリになります。</target>
        </trans-unit>
        <trans-unit id="bacb27a3db8ad4d6fa07c864549f990e1b1f9b09" translate="yes" xml:space="preserve">
          <source>When calling &lt;a href=&quot;#Libdl.dlopen&quot;&gt;&lt;code&gt;dlopen&lt;/code&gt;&lt;/a&gt;, the paths in this list will be searched first, in order, before searching the system locations for a valid library handle.</source>
          <target state="translated">&lt;a href=&quot;#Libdl.dlopen&quot;&gt; &lt;code&gt;dlopen&lt;/code&gt; を&lt;/a&gt;呼び出すと、このリストのパスが最初に順番に検索されてから、システムの場所から有効なライブラリハンドルが検索されます。</target>
        </trans-unit>
        <trans-unit id="ef7e9d8c42190544bd3e1564f8b8ba2bd51f8bbc" translate="yes" xml:space="preserve">
          <source>When calling &lt;a href=&quot;../../base/strings/index#Base.match&quot;&gt;&lt;code&gt;match&lt;/code&gt;&lt;/a&gt;, you have the option to specify an index at which to start the search. For example:</source>
          <target state="translated">&lt;a href=&quot;../../base/strings/index#Base.match&quot;&gt; &lt;code&gt;match&lt;/code&gt; を&lt;/a&gt;呼び出すときに、検索を開始するインデックスを指定するオプションがあります。例えば：</target>
        </trans-unit>
        <trans-unit id="e92c3b1df4a4ce3ed62a3bfa6e7cf7fe1b90182a" translate="yes" xml:space="preserve">
          <source>When calling Fortran, all inputs must be passed by pointers to heap- or stack-allocated values, so all type correspondences above should contain an additional &lt;code&gt;Ptr{..}&lt;/code&gt; or &lt;code&gt;Ref{..}&lt;/code&gt; wrapper around their type specification.</source>
          <target state="translated">Fortranを呼び出すとき、すべての入力はヒープまたはスタックに割り当てられた値へのポインターによって渡される必要があるため、上記のすべての型の対応には、型指定の周りに追加の &lt;code&gt;Ptr{..}&lt;/code&gt; または &lt;code&gt;Ref{..}&lt;/code&gt; ラッパーが含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="5e331cf313a89110c14bb50e3eee2e7301f9cb8b" translate="yes" xml:space="preserve">
          <source>When chaining conditionals (including &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;elseif&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt;), the &lt;code&gt;@static&lt;/code&gt; must be repeated for each level (parentheses optional, but recommended for readability):</source>
          <target state="translated">条件 &lt;code&gt;@static&lt;/code&gt; （ &lt;code&gt;if&lt;/code&gt; / &lt;code&gt;elseif&lt;/code&gt; / &lt;code&gt;end&lt;/code&gt; を含む）をチェーンする場合、@ staticをレベルごとに繰り返す必要があります（括弧は省略可能ですが、読みやすくするためにお勧めします）。</target>
        </trans-unit>
        <trans-unit id="748b100cf67a798bdbecc39743101fa41a0714e1" translate="yes" xml:space="preserve">
          <source>When checking if a value is equal to some singleton it can be better for performance to check for identicality (&lt;code&gt;===&lt;/code&gt;) instead of equality (&lt;code&gt;==&lt;/code&gt;). The same advice applies to using &lt;code&gt;!==&lt;/code&gt; over &lt;code&gt;!=&lt;/code&gt;. These type of checks frequently occur e.g. when implementing the iteration protocol and checking if &lt;code&gt;nothing&lt;/code&gt; is returned from &lt;a href=&quot;../../base/collections/index#Base.iterate&quot;&gt;&lt;code&gt;iterate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">値がシングルトンに等しいかどうかをチェックするときは、パフォーマンスが等しい（ &lt;code&gt;==&lt;/code&gt; ）ではなく同一性（ &lt;code&gt;===&lt;/code&gt; ）をチェックする方がよい場合があります。同じアドバイスが使用に適用されます &lt;code&gt;!==&lt;/code&gt; オーバー &lt;code&gt;!=&lt;/code&gt; 。反復プロトコルを実装した場合にチェックするときのチェックのこれらのタイプは、しばしば例えば起こる &lt;code&gt;nothing&lt;/code&gt; から返されていない&lt;a href=&quot;../../base/collections/index#Base.iterate&quot;&gt; &lt;code&gt;iterate&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="15b9050639b920ff695156fa848d7ac41786789d" translate="yes" xml:space="preserve">
          <source>When control leaves the &lt;a href=&quot;#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt; block (for example, due to a &lt;a href=&quot;#return&quot;&gt;&lt;code&gt;return&lt;/code&gt;&lt;/a&gt;, or just finishing normally), &lt;a href=&quot;../io-network/index#Base.close&quot;&gt;&lt;code&gt;close(f)&lt;/code&gt;&lt;/a&gt; will be executed. If the &lt;code&gt;try&lt;/code&gt; block exits due to an exception, the exception will continue propagating. A &lt;code&gt;catch&lt;/code&gt; block may be combined with &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt; as well. In this case the &lt;code&gt;finally&lt;/code&gt; block will run after &lt;code&gt;catch&lt;/code&gt; has handled the error.</source>
          <target state="translated">制御が&lt;a href=&quot;#try&quot;&gt; &lt;code&gt;try&lt;/code&gt; &lt;/a&gt;ブロックを離れると（たとえば、&lt;a href=&quot;#return&quot;&gt; &lt;code&gt;return&lt;/code&gt; &lt;/a&gt;、または正常に終了した場合）、&lt;a href=&quot;../io-network/index#Base.close&quot;&gt; &lt;code&gt;close(f)&lt;/code&gt; &lt;/a&gt;が実行されます。例外が原因で &lt;code&gt;try&lt;/code&gt; ブロックが終了した場合、例外は伝播し続けます。 &lt;code&gt;catch&lt;/code&gt; ブロックは、と組み合わせることができる &lt;code&gt;try&lt;/code&gt; と &lt;code&gt;finally&lt;/code&gt; にも。この場合、 &lt;code&gt;catch&lt;/code&gt; がエラーを処理した後、 &lt;code&gt;finally&lt;/code&gt; ブロックが実行されます。</target>
        </trans-unit>
        <trans-unit id="174b27ef1832006fe6218d3c983f95e289715bc3" translate="yes" xml:space="preserve">
          <source>When control leaves the &lt;a href=&quot;#try&quot;&gt;&lt;code&gt;try&lt;/code&gt;&lt;/a&gt; block (for example, due to a &lt;a href=&quot;#return&quot;&gt;&lt;code&gt;return&lt;/code&gt;&lt;/a&gt;, or just finishing normally), &lt;code&gt;close(f)&lt;/code&gt; will be executed. If the &lt;code&gt;try&lt;/code&gt; block exits due to an exception, the exception will continue propagating. A &lt;code&gt;catch&lt;/code&gt; block may be combined with &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt; as well. In this case the &lt;code&gt;finally&lt;/code&gt; block will run after &lt;code&gt;catch&lt;/code&gt; has handled the error.</source>
          <target state="translated">コントロールが&lt;a href=&quot;#try&quot;&gt; &lt;code&gt;try&lt;/code&gt; &lt;/a&gt;ブロックを離れると（たとえば、&lt;a href=&quot;#return&quot;&gt; &lt;code&gt;return&lt;/code&gt; が&lt;/a&gt;原因で、または単に正常に終了したため）、 &lt;code&gt;close(f)&lt;/code&gt; が実行されます。例外が原因で &lt;code&gt;try&lt;/code&gt; ブロックが存在する場合、例外は引き続き伝播します。 &lt;code&gt;catch&lt;/code&gt; ブロックは、と組み合わせることができる &lt;code&gt;try&lt;/code&gt; と &lt;code&gt;finally&lt;/code&gt; にも。この場合、 &lt;code&gt;catch&lt;/code&gt; がエラーを処理した後に、 &lt;code&gt;finally&lt;/code&gt; ブロックが実行されます。</target>
        </trans-unit>
        <trans-unit id="ac01620653b38b07c8e2f2811a030ec92b4e1ad9" translate="yes" xml:space="preserve">
          <source>When control leaves the &lt;code&gt;try&lt;/code&gt; block (for example due to a &lt;code&gt;return&lt;/code&gt;, or just finishing normally), &lt;code&gt;close(f)&lt;/code&gt; will be executed. If the &lt;code&gt;try&lt;/code&gt; block exits due to an exception, the exception will continue propagating. A &lt;code&gt;catch&lt;/code&gt; block may be combined with &lt;code&gt;try&lt;/code&gt; and &lt;code&gt;finally&lt;/code&gt; as well. In this case the &lt;code&gt;finally&lt;/code&gt; block will run after &lt;code&gt;catch&lt;/code&gt; has handled the error.</source>
          <target state="translated">制御が（たとえば &lt;code&gt;return&lt;/code&gt; が原因で、または単に正常に終了したため） &lt;code&gt;try&lt;/code&gt; ブロックを離れると、 &lt;code&gt;close(f)&lt;/code&gt; が実行されます。例外が原因で &lt;code&gt;try&lt;/code&gt; ブロックが存在する場合、例外は引き続き伝播します。 &lt;code&gt;catch&lt;/code&gt; ブロックは、と組み合わせることができる &lt;code&gt;try&lt;/code&gt; と &lt;code&gt;finally&lt;/code&gt; にも。この場合、 &lt;code&gt;catch&lt;/code&gt; がエラーを処理した後に、 &lt;code&gt;finally&lt;/code&gt; ブロックが実行されます。</target>
        </trans-unit>
        <trans-unit id="2509f68dfaaa3b26bf821c041139b558402f6a85" translate="yes" xml:space="preserve">
          <source>When creating a &lt;code&gt;format&lt;/code&gt; you can use any non-code characters as a separator. For example to generate the string &quot;1996-01-15T00:00:00&quot; you could use &lt;code&gt;format&lt;/code&gt;: &quot;yyyy-mm-ddTHH:MM:SS&quot;. Note that if you need to use a code character as a literal you can use the escape character backslash. The string &quot;1996y01m&quot; can be produced with the format &quot;yyyy\ymm\m&quot;.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; を作成するときは、コード以外の文字を区切り文字として使用できます。たとえば、文字列「1996-01-15T00：00：00」を生成するには、「yyyy-mm-ddTHH：MM：SS」の &lt;code&gt;format&lt;/code&gt; 使用できます。コード文字をリテラルとして使用する必要がある場合は、エスケープ文字のバックスラッシュを使用できることに注意してください。文字列「1996y01m」は、「yyyy \ ymm \ m」の形式で生成できます。</target>
        </trans-unit>
        <trans-unit id="cbfb77e0645f23f4b5b667261005ff3593239667" translate="yes" xml:space="preserve">
          <source>When defining a function, one can optionally constrain the types of parameters it is applicable to, using the &lt;code&gt;::&lt;/code&gt; type-assertion operator, introduced in the section on &lt;a href=&quot;../types/index#Composite-Types&quot;&gt;Composite Types&lt;/a&gt;:</source>
          <target state="translated">関数を定義するとき、&lt;a href=&quot;../types/index#Composite-Types&quot;&gt;複合型の&lt;/a&gt;セクションで紹介されている &lt;code&gt;::&lt;/code&gt; type-assertion演算子を使用して、適用可能なパラメーターの型をオプションで制約できます。</target>
        </trans-unit>
        <trans-unit id="1de1f7de90353d88ef9000e4f79f92b8c808bdb2" translate="yes" xml:space="preserve">
          <source>When defining a function, one can optionally constrain the types of parameters it is applicable to, using the &lt;code&gt;::&lt;/code&gt; type-assertion operator, introduced in the section on &lt;a href=&quot;../types/index#Composite-Types-1&quot;&gt;Composite Types&lt;/a&gt;:</source>
          <target state="translated">関数を定義するとき、必要に応じて、&lt;a href=&quot;../types/index#Composite-Types-1&quot;&gt;複合型の&lt;/a&gt;セクションで紹介した &lt;code&gt;::&lt;/code&gt; 型アサーション演算子を使用して、適用可能なパラメーターの型を制約できます。</target>
        </trans-unit>
        <trans-unit id="152d609433f05c2afbaef9a063010fb7cf671728" translate="yes" xml:space="preserve">
          <source>When defining a new type, initially all ways of creating it should be defined as constructors. If it becomes clear that implicit conversion would be useful, and that some constructors meet the above &quot;safety&quot; criteria, then &lt;code&gt;convert&lt;/code&gt; methods can be added. These methods are typically quite simple, as they only need to call the appropriate constructor. Such a definition might look like this:</source>
          <target state="translated">新しいタイプを定義する場合、最初にそれを作成するすべての方法をコンストラクターとして定義する必要があります。暗黙的な変換が有用であることが明らかになり、一部のコンストラクターが上記の「安全性」の基準を満たしていることが判明した場合は、 &lt;code&gt;convert&lt;/code&gt; メソッドを追加できます。これらのメソッドは、適切なコンストラクターを呼び出すだけでよいため、通常は非常に単純です。このような定義は次のようになります。</target>
        </trans-unit>
        <trans-unit id="884ef6ca30a2264b960b8f9a3b28841cea79d9f1" translate="yes" xml:space="preserve">
          <source>When defining generated functions, there are five main differences to ordinary functions:</source>
          <target state="translated">生成関数を定義する場合、通常の関数との違いは大きく分けて5つあります。</target>
        </trans-unit>
        <trans-unit id="87c61f17e48da1bcacb16f9549d16af7280e11ed" translate="yes" xml:space="preserve">
          <source>When defining generated functions, there are four main differences to ordinary functions:</source>
          <target state="translated">生成関数を定義する場合、通常の関数との違いは大きく分けて4つあります。</target>
        </trans-unit>
        <trans-unit id="49efec53aeb1ae624503fb2c22137ba91bb625ee" translate="yes" xml:space="preserve">
          <source>When designing APIs, adhering to this general order as much as possible is likely to give users of your functions a more consistent experience.</source>
          <target state="translated">APIを設計する際には、可能な限りこの一般的な順序を守った方が、機能のユーザーにより一貫した体験を提供できる可能性が高いです。</target>
        </trans-unit>
        <trans-unit id="a941f10446d75f8958c1348bd2a746eb967d2e21" translate="yes" xml:space="preserve">
          <source>When exactly one index &lt;code&gt;i&lt;/code&gt; is provided, that index no longer represents a location in a particular dimension of the array. Instead, it selects the &lt;code&gt;i&lt;/code&gt;th element using the column-major iteration order that linearly spans the entire array. This is known as &lt;em&gt;linear indexing&lt;/em&gt;. It essentially treats the array as though it had been reshaped into a one-dimensional vector with &lt;a href=&quot;../../base/arrays/index#Base.vec&quot;&gt;&lt;code&gt;vec&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">インデックス &lt;code&gt;i&lt;/code&gt; が1つだけ指定されると、そのインデックスは配列の特定の次元の位置を表しなくなります。代わりに、配列全体に線形にまたがる列優先の反復順序を使用して、 &lt;code&gt;i&lt;/code&gt; 番目の要素を選択します。これは&lt;em&gt;線形インデックス&lt;/em&gt;と呼ばれます。これは基本的に、配列を&lt;a href=&quot;../../base/arrays/index#Base.vec&quot;&gt; &lt;code&gt;vec&lt;/code&gt; で&lt;/a&gt; 1次元ベクトルに再形成されたかのように扱います。</target>
        </trans-unit>
        <trans-unit id="d3d4ab6d8c0ec75d6d289814f9629ec5250796ab" translate="yes" xml:space="preserve">
          <source>When executing a remote function in parallel:</source>
          <target state="translated">リモート機能を並列に実行する場合</target>
        </trans-unit>
        <trans-unit id="60bf875610ed5f18bb5771424d18a32cfa69cc45" translate="yes" xml:space="preserve">
          <source>When fetching data from LibGit2, a typical usage would look like:</source>
          <target state="translated">LibGit2からデータを取得する場合、典型的な使用法は次のようになります。</target>
        </trans-unit>
        <trans-unit id="9f5749e51bc8ddb6474c3a822e03c976f400cb95" translate="yes" xml:space="preserve">
          <source>When is &lt;code&gt;convert&lt;/code&gt; called?</source>
          <target state="translated">ときにされ &lt;code&gt;convert&lt;/code&gt; と呼ばれますか？</target>
        </trans-unit>
        <trans-unit id="0bf200d46aca80912e82e9a0512bf3a557089224" translate="yes" xml:space="preserve">
          <source>When issuing a hint, the output should typically start with &lt;code&gt;\n&lt;/code&gt;.</source>
          <target state="translated">ヒントを発行する場合、出力は通常 &lt;code&gt;\n&lt;/code&gt; 始まる必要があります。</target>
        </trans-unit>
        <trans-unit id="033992315c0171a5bb54828a5de11a8f7b44c1ac" translate="yes" xml:space="preserve">
          <source>When loading from a pointer with &lt;code&gt;unsafe_load&lt;/code&gt;, the underlying object is implicitly used, for example &lt;code&gt;x&lt;/code&gt; is implicitly used by &lt;code&gt;unsafe_load(p)&lt;/code&gt; in the following:</source>
          <target state="translated">&lt;code&gt;unsafe_load&lt;/code&gt; を使用してポインターからロードする場合、基になるオブジェクトが暗黙的に使用されます。たとえば、次の &lt;code&gt;unsafe_load(p)&lt;/code&gt; によって &lt;code&gt;x&lt;/code&gt; が暗黙的に使用されます。</target>
        </trans-unit>
        <trans-unit id="18bdbef12210d17b4e3031ada949009b49167f95" translate="yes" xml:space="preserve">
          <source>When no supertype is given, the default supertype is &lt;code&gt;Any&lt;/code&gt; &amp;ndash; a predefined abstract type that all objects are instances of and all types are subtypes of. In type theory, &lt;code&gt;Any&lt;/code&gt; is commonly called &quot;top&quot; because it is at the apex of the type graph. Julia also has a predefined abstract &quot;bottom&quot; type, at the nadir of the type graph, which is written as &lt;code&gt;Union{}&lt;/code&gt;. It is the exact opposite of &lt;code&gt;Any&lt;/code&gt;: no object is an instance of &lt;code&gt;Union{}&lt;/code&gt; and all types are supertypes of &lt;code&gt;Union{}&lt;/code&gt;.</source>
          <target state="translated">スーパータイプが指定されていない場合、デフォルトのスーパータイプは &lt;code&gt;Any&lt;/code&gt; です。これは、すべてのオブジェクトがインスタンスであり、すべてのタイプがサブタイプである事前定義の抽象タイプです。型理論では、 &lt;code&gt;Any&lt;/code&gt; は型グラフの頂点にあるため、一般に「トップ」と呼ばれます。Juliaには、タイプグラフの最下点に、 &lt;code&gt;Union{}&lt;/code&gt; と書かれた、事前定義された抽象「ボトム」タイプもあります。 &lt;code&gt;Any&lt;/code&gt; の正反対です。どのオブジェクトも &lt;code&gt;Union{}&lt;/code&gt; インスタンスではなく、すべてのタイプは &lt;code&gt;Union{}&lt;/code&gt; スーパータイプです。</target>
        </trans-unit>
        <trans-unit id="1fcc651112bb76903e5ae0a3bf204e82def56437" translate="yes" xml:space="preserve">
          <source>When omitting &lt;em&gt;all&lt;/em&gt; indices with &lt;code&gt;A[]&lt;/code&gt;, this semantic provides a simple idiom to retrieve the only element in an array and simultaneously ensure that there was only one element.</source>
          <target state="translated">&lt;code&gt;A[]&lt;/code&gt; で&lt;em&gt;すべての&lt;/em&gt;インデックスを省略した場合、このセマンティクスは、配列内の唯一の要素を取得すると同時に、要素が1つだけであることを確認する簡単なイディオムを提供します。</target>
        </trans-unit>
        <trans-unit id="25a0968a84486d9bb369e312765b66f12f135bdd" translate="yes" xml:space="preserve">
          <source>When only the type of supplied arguments needs to be constrained &lt;code&gt;Vararg{T}&lt;/code&gt; can be equivalently written as &lt;code&gt;T...&lt;/code&gt;. For instance &lt;code&gt;f(x::Int...) = x&lt;/code&gt; is a shorthand for &lt;code&gt;f(x::Vararg{Int}) = x&lt;/code&gt;.</source>
          <target state="translated">指定された引数のタイプのみを制約する必要がある場合、 &lt;code&gt;Vararg{T}&lt;/code&gt; は &lt;code&gt;T...&lt;/code&gt; と同等に記述できます。たとえば、 &lt;code&gt;f(x::Int...) = x&lt;/code&gt; は、 &lt;code&gt;f(x::Vararg{Int}) = x&lt;/code&gt; 省略形です。</target>
        </trans-unit>
        <trans-unit id="4bc2691546974788c6f5f633b5af60f15dc7f704" translate="yes" xml:space="preserve">
          <source>When optional and keyword argument default expressions are evaluated, only &lt;em&gt;previous&lt;/em&gt; arguments are in scope. For example, given this definition:</source>
          <target state="translated">オプションおよびキーワード引数のデフォルト式が評価されるとき、&lt;em&gt;以前の&lt;/em&gt;引数のみがスコープ内にあります。たとえば、次の定義があるとします。</target>
        </trans-unit>
        <trans-unit id="328ccbd822376eb34037743aedfc016fe4fbbce4" translate="yes" xml:space="preserve">
          <source>When passed as a &lt;code&gt;ccall&lt;/code&gt; argument (either as a &lt;code&gt;Ptr&lt;/code&gt; or &lt;code&gt;Ref&lt;/code&gt; type), a &lt;code&gt;Ref&lt;/code&gt; object will be converted to a native pointer to the data it references.</source>
          <target state="translated">&lt;code&gt;ccall&lt;/code&gt; 引数として（ &lt;code&gt;Ptr&lt;/code&gt; または &lt;code&gt;Ref&lt;/code&gt; タイプとして）渡されると、 &lt;code&gt;Ref&lt;/code&gt; オブジェクトは、参照するデータへのネイティブポインターに変換されます。</target>
        </trans-unit>
        <trans-unit id="7ff24cc69534fdb104d1c11f0a561a2d6006bd40" translate="yes" xml:space="preserve">
          <source>When passing data to a &lt;a href=&quot;../../base/c/index#ccall&quot;&gt;&lt;code&gt;ccall&lt;/code&gt;&lt;/a&gt;, it is best to avoid using the &lt;a href=&quot;../../base/c/index#Base.pointer&quot;&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/a&gt; function. Instead define a convert method and pass the variables directly to the &lt;a href=&quot;../../base/c/index#ccall&quot;&gt;&lt;code&gt;ccall&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../../base/c/index#ccall&quot;&gt;&lt;code&gt;ccall&lt;/code&gt;&lt;/a&gt; automatically arranges that all of its arguments will be preserved from garbage collection until the call returns. If a C API will store a reference to memory allocated by Julia, after the &lt;a href=&quot;../../base/c/index#ccall&quot;&gt;&lt;code&gt;ccall&lt;/code&gt;&lt;/a&gt; returns, you must arrange that the object remains visible to the garbage collector. The suggested way to handle this is to make a global variable of type &lt;code&gt;Array{Ref,1}&lt;/code&gt; to hold these values, until the C library notifies you that it is finished with them.</source>
          <target state="translated">データを&lt;a href=&quot;../../base/c/index#ccall&quot;&gt; &lt;code&gt;ccall&lt;/code&gt; に&lt;/a&gt;渡すときは、&lt;a href=&quot;../../base/c/index#Base.pointer&quot;&gt; &lt;code&gt;pointer&lt;/code&gt; &lt;/a&gt;関数を使用しないことをお勧めします。代わりに、変換メソッドを定義し、変数を直接&lt;a href=&quot;../../base/c/index#ccall&quot;&gt; &lt;code&gt;ccall&lt;/code&gt; に渡し&lt;/a&gt;ます。&lt;a href=&quot;../../base/c/index#ccall&quot;&gt; &lt;code&gt;ccall&lt;/code&gt; &lt;/a&gt;は、呼び出しが戻るまで、すべての引数がガベージコレクションから保持されるように自動的に調整します。 C APIがJuliaによって割り当てられたメモリへの参照を格納する場合、&lt;a href=&quot;../../base/c/index#ccall&quot;&gt; &lt;code&gt;ccall&lt;/code&gt; &lt;/a&gt;が戻った後、オブジェクトがガベージコレクターから見えるように配置する必要があります。これを処理するための推奨方法は、タイプ &lt;code&gt;Array{Ref,1}&lt;/code&gt; グローバル変数を作成して、Cライブラリから通知が完了するまでこれらの値を保持することです。</target>
        </trans-unit>
        <trans-unit id="621b4b8b5a5149c69191e35b8edeeea1183d955f" translate="yes" xml:space="preserve">
          <source>When passing data to a &lt;a href=&quot;../../base/c/index#ccall&quot;&gt;&lt;code&gt;ccall&lt;/code&gt;&lt;/a&gt;, it is best to avoid using the &lt;a href=&quot;../../base/c/index#Base.pointer&quot;&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/a&gt; function. Instead define a convert method and pass the variables directly to the &lt;a href=&quot;../../base/c/index#ccall&quot;&gt;&lt;code&gt;ccall&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;../../base/c/index#ccall&quot;&gt;&lt;code&gt;ccall&lt;/code&gt;&lt;/a&gt; automatically arranges that all of its arguments will be preserved from garbage collection until the call returns. If a C API will store a reference to memory allocated by Julia, after the &lt;a href=&quot;../../base/c/index#ccall&quot;&gt;&lt;code&gt;ccall&lt;/code&gt;&lt;/a&gt; returns, you must ensure that the object remains visible to the garbage collector. The suggested way to do this is to make a global variable of type &lt;code&gt;Array{Ref,1}&lt;/code&gt; to hold these values, until the C library notifies you that it is finished with them.</source>
          <target state="translated">データを&lt;a href=&quot;../../base/c/index#ccall&quot;&gt; &lt;code&gt;ccall&lt;/code&gt; に&lt;/a&gt;渡すときは、&lt;a href=&quot;../../base/c/index#Base.pointer&quot;&gt; &lt;code&gt;pointer&lt;/code&gt; &lt;/a&gt;関数の使用を避けるのが最善です。代わりに、convertメソッドを定義し、変数を&lt;a href=&quot;../../base/c/index#ccall&quot;&gt; &lt;code&gt;ccall&lt;/code&gt; に&lt;/a&gt;直接渡します。&lt;a href=&quot;../../base/c/index#ccall&quot;&gt; &lt;code&gt;ccall&lt;/code&gt; &lt;/a&gt;は、呼び出しが戻るまで、すべての引数がガベージコレクションから保持されるように自動的に調整します。 C APIがJuliaによって割り当てられたメモリへの参照を格納する場合、&lt;a href=&quot;../../base/c/index#ccall&quot;&gt; &lt;code&gt;ccall&lt;/code&gt; &lt;/a&gt;が戻った後、オブジェクトがガベージコレクタに表示されたままであることを確認する必要があります。これを行うための推奨される方法は、Cライブラリが値の終了を通知するまで、これらの値を保持するように &lt;code&gt;Array{Ref,1}&lt;/code&gt; 型のグローバル変数を作成することです。</target>
        </trans-unit>
        <trans-unit id="a03a0776d698aabe1d1ee9b2fbaaca855d289cd3" translate="yes" xml:space="preserve">
          <source>When passing pointers to &lt;code&gt;ccall&lt;/code&gt;, the pointed-to object is implicitly used and should be preserved. (Note however that you should normally just pass &lt;code&gt;x&lt;/code&gt; directly to &lt;code&gt;ccall&lt;/code&gt; which counts as an explicit use.)</source>
          <target state="translated">ポインタを &lt;code&gt;ccall&lt;/code&gt; に渡すとき、ポイントされたオブジェクトは暗黙的に使用され、保持する必要があります。 （ただし、通常は、明示的な使用としてカウントされる &lt;code&gt;ccall&lt;/code&gt; に &lt;code&gt;x&lt;/code&gt; を直接渡す必要があることに注意してください。）</target>
        </trans-unit>
        <trans-unit id="4e4161f851acf4dfa4cc8665b77ecf5c1170bcb8" translate="yes" xml:space="preserve">
          <source>When possible, it helps to ensure that a function always returns a value of the same type. Consider the following definition:</source>
          <target state="translated">可能な場合、関数が常に同じ型の値を返すようにするのに役立ちます。次の定義を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="f980dac273e411c73db2f2997e398dee2af97484" translate="yes" xml:space="preserve">
          <source>When reading and writing to both ends of a pipeline from a single process, it is important to avoid forcing the kernel to buffer all of the data.</source>
          <target state="translated">単一プロセスからパイプラインの両端に読み書きする場合は、カーネルがすべてのデータをバッファリングすることを強制しないようにすることが重要です。</target>
        </trans-unit>
        <trans-unit id="432031c93a248af1a362c62ac61d4d3da70d6a24" translate="yes" xml:space="preserve">
          <source>When redefining a method or adding new methods, it is important to realize that these changes don't take effect immediately. This is key to Julia's ability to statically infer and compile code to run fast, without the usual JIT tricks and overhead. Indeed, any new method definition won't be visible to the current runtime environment, including Tasks and Threads (and any previously defined &lt;code&gt;@generated&lt;/code&gt; functions). Let's start with an example to see what this means:</source>
          <target state="translated">メソッドを再定義したり、新しいメソッドを追加したりするときは、これらの変更がすぐに有効にならないことを認識することが重要です。これは、通常のJITのトリックやオーバーヘッドなしに、コードを静的に推論およびコンパイルして高速に実行するJuliaの機能の鍵です。実際、新しいメソッド定義は、タスクとスレッド（および以前に定義された &lt;code&gt;@generated&lt;/code&gt; 関数）を含め、現在のランタイム環境からは見えません。これが何を意味するかを確認するための例から始めましょう：</target>
        </trans-unit>
        <trans-unit id="f67015b5342fb583f71d2f0a8849f5c8f2575736" translate="yes" xml:space="preserve">
          <source>When repeatedly generating random values (with the same &lt;code&gt;rand&lt;/code&gt; parameters), it happens for some types that the result of a computation is used for each call. In this case, the computation can be decoupled from actually generating the values. This is the case for example with the default implementation for &lt;code&gt;AbstractArray&lt;/code&gt;. Assume that &lt;code&gt;rand(rng, 1:20)&lt;/code&gt; has to be called repeatedly in a loop: the way to take advantage of this decoupling is as follows:</source>
          <target state="translated">（同じ &lt;code&gt;rand&lt;/code&gt; パラメーターで）ランダムな値を繰り返し生成する場合、一部のタイプでは、各呼び出しで計算の結果が使用されることがあります。この場合、実際に値を生成することから計算を切り離すことができます。これは、たとえば &lt;code&gt;AbstractArray&lt;/code&gt; のデフォルト実装の場合です。 &lt;code&gt;rand(rng, 1:20)&lt;/code&gt; をループ内で繰り返し呼び出す必要があると想定します。この分離を利用する方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="5775c96a25e19b8d91a7723e7ea52f8fd816253c" translate="yes" xml:space="preserve">
          <source>When retrieving documentation for a generic function, the metadata for each method is concatenated with the &lt;code&gt;catdoc&lt;/code&gt; function, which can of course be overridden for custom types.</source>
          <target state="translated">ジェネリック関数のドキュメントを取得する場合、各メソッドのメタデータは &lt;code&gt;catdoc&lt;/code&gt; 関数と連結されます。もちろん、カスタムタイプの場合はオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="fcdae2c11195f3a2ff681be9a1639c0d95a5dceb" translate="yes" xml:space="preserve">
          <source>When searching for files, &lt;code&gt;require&lt;/code&gt; first looks for package code in the global array &lt;a href=&quot;../constants/index#Base.LOAD_PATH&quot;&gt;&lt;code&gt;LOAD_PATH&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;require&lt;/code&gt; is case-sensitive on all platforms, including those with case-insensitive filesystems like macOS and Windows.</source>
          <target state="translated">ファイルを検索するとき、 &lt;code&gt;require&lt;/code&gt; は最初にグローバル配列&lt;a href=&quot;../constants/index#Base.LOAD_PATH&quot;&gt; &lt;code&gt;LOAD_PATH&lt;/code&gt; &lt;/a&gt;でパッケージコードを検索します。 &lt;code&gt;require&lt;/code&gt; は、macOSやWindowsなどの大文字と小文字を区別しないファイルシステムを含むすべてのプラットフォームで大文字と小文字を区別します。</target>
        </trans-unit>
        <trans-unit id="ae50cba0ad7de510b297784111877a1b60718702" translate="yes" xml:space="preserve">
          <source>When single-threaded, code could call the internal &lt;code&gt;jl_gc_enable_finalizers&lt;/code&gt; C function to prevent finalizers from being scheduled inside a critical region. Internally, this is used inside some functions (such as our C locks) to prevent recursion when doing certain operations (incremental package loading, codegen, etc.). The combination of a lock and this flag can be used to make finalizers safe.</source>
          <target state="translated">シングルスレッドの場合、コードは内部 &lt;code&gt;jl_gc_enable_finalizers&lt;/code&gt; C関数を呼び出して、ファイナライザーがクリティカル領域内でスケジュールされないようにすることができます。内部的には、これは一部の関数（Cロックなど）内で使用され、特定の操作（インクリメンタルパッケージの読み込み、codegenなど）を実行するときに再帰を防ぎます。ロックとこのフラグの組み合わせを使用して、ファイナライザーを安全にすることができます。</target>
        </trans-unit>
        <trans-unit id="b5caa784bb63149c778b19d4371f4d304c538230" translate="yes" xml:space="preserve">
          <source>When strings are created using triple-quotes (&lt;code&gt;&quot;&quot;&quot;...&quot;&quot;&quot;&lt;/code&gt;) they have some special behavior that can be useful for creating longer blocks of text.</source>
          <target state="translated">文字列は、三重引用符（ &lt;code&gt;&quot;&quot;&quot;...&quot;&quot;&quot;&lt;/code&gt; ）を使用して作成されると、長いテキストのブロックを作成するのに役立ついくつかの特別な動作があります。</target>
        </trans-unit>
        <trans-unit id="d9c021e0b023c23a7d814288842365e170962500" translate="yes" xml:space="preserve">
          <source>When the command is run, Julia does not capture its output unless you specifically arrange for it to. Instead, the output of the command by default goes to &lt;a href=&quot;../../base/io-network/index#Base.stdout&quot;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt; as it would using &lt;code&gt;libc&lt;/code&gt;'s &lt;code&gt;system&lt;/code&gt; call.</source>
          <target state="translated">コマンドを実行すると、Juliaは特別に調整しない限り、その出力をキャプチャしません。代わりに、コマンドの出力は、デフォルトでは &lt;code&gt;libc&lt;/code&gt; の &lt;code&gt;system&lt;/code&gt; コールを使用する場合と同様に&lt;a href=&quot;../../base/io-network/index#Base.stdout&quot;&gt; &lt;code&gt;stdout&lt;/code&gt; に&lt;/a&gt;送られます。</target>
        </trans-unit>
        <trans-unit id="2fa07c6647099037fc4a9f69e1680570128c974a" translate="yes" xml:space="preserve">
          <source>When the cursor is at the beginning of the line, the prompt can be changed to a help mode by typing &lt;code&gt;?&lt;/code&gt;. Julia will attempt to print help or documentation for anything entered in help mode:</source>
          <target state="translated">カーソルが行の先頭にある場合、 &lt;code&gt;?&lt;/code&gt; と入力すると、プロンプトをヘルプモードに変更できます。。Juliaは、ヘルプモードで入力されたすべてのヘルプまたはドキュメントを印刷しようとします。</target>
        </trans-unit>
        <trans-unit id="507cfdac68541961a8caed400c02e4110284216d" translate="yes" xml:space="preserve">
          <source>When the function is called, the semicolon is optional: one can either call &lt;code&gt;plot(x, y, width=2)&lt;/code&gt; or &lt;code&gt;plot(x, y; width=2)&lt;/code&gt;, but the former style is more common. An explicit semicolon is required only for passing varargs or computed keywords as described below.</source>
          <target state="translated">関数が呼び出されるとき、セミコロンはオプションです： &lt;code&gt;plot(x, y, width=2)&lt;/code&gt; または &lt;code&gt;plot(x, y; width=2)&lt;/code&gt; いずれかを呼び出すことができますが、前者のスタイルがより一般的です。明示的なセミコロンは、後述する可変引数または計算されたキーワードを渡す場合にのみ必要です。</target>
        </trans-unit>
        <trans-unit id="639ad8fb2203031e1f5890076ab452c005551734" translate="yes" xml:space="preserve">
          <source>When the latter holds, a function processing such a homogenous array can be productively specialized: Julia knows the type of each element in advance (all objects in the container have the same concrete type), so Julia can &quot;look up&quot; the correct method calls when the function is being compiled (obviating the need to check at run-time) and thereby emit efficient code for processing the whole list.</source>
          <target state="translated">後者の場合,このような均質な配列を処理する関数を生産的に特化することができます.Juliaは各要素の型を事前に知っているので(コンテナ内のすべてのオブジェクトは同じ具体的な型を持っています)、Juliaは関数のコンパイル時に正しいメソッド呼び出しを「検索」することができます(実行時にチェックする必要はありません)、それによってリスト全体を処理するための効率的なコードを出力することができます。</target>
        </trans-unit>
        <trans-unit id="b657ed862f19af0ea0f696008e9ac44d556c4b65" translate="yes" xml:space="preserve">
          <source>When these do not hold, then it's likely that you'll get no benefit; worse, the resulting &quot;combinatorial explosion of types&quot; will be counterproductive. If &lt;code&gt;items[i+1]&lt;/code&gt; has a different type than &lt;code&gt;item[i]&lt;/code&gt;, Julia has to look up the type at run-time, search for the appropriate method in method tables, decide (via type intersection) which one matches, determine whether it has been JIT-compiled yet (and do so if not), and then make the call. In essence, you're asking the full type- system and JIT-compilation machinery to basically execute the equivalent of a switch statement or dictionary lookup in your own code.</source>
          <target state="translated">これらが成立しない場合、あなたは何の利益も得られないでしょう。さらに悪いことに、結果として生じる「型の組み合わせ爆発」は逆効果になります。場合 &lt;code&gt;items[i+1]&lt;/code&gt; とは異なるタイプ有する &lt;code&gt;item[i]&lt;/code&gt; 、ジュリアは、メソッドテーブル内の適切な方法を探し、実行時に型をルックアップする必要がある、かどうかを決定したいずれかに一致する（型交差点を介して）決定まだJITコンパイルされており（そうでない場合はそうします）、呼び出しを行います。基本的に、完全な型システムとJITコンパイル機構に、基本的に独自のコードでswitchステートメントまたは辞書ルックアップと同等の機能を実行するように要求しています。</target>
        </trans-unit>
        <trans-unit id="daba9492446bca5f7a6499bbb7ab37d695e92939" translate="yes" xml:space="preserve">
          <source>When this approach is not possible, it may be worth starting a discussion with other developers about resolving the ambiguity; just because one method was defined first does not necessarily mean that it can't be modified or eliminated. As a last resort, one developer can define the &quot;band-aid&quot; method</source>
          <target state="translated">このアプローチが不可能な場合は、他の開発者と曖昧さを解決するための議論を始める価値があるかもしれません;一つのメソッドが最初に定義されたからといって、それを修正したり削除したりすることができないとは限りません。最後の手段として、ある開発者は &quot;バンドエイド&quot; メソッドを定義することができます。</target>
        </trans-unit>
        <trans-unit id="1c53522c3f28e638cb9b245fd7713a2c2d5ab598" translate="yes" xml:space="preserve">
          <source>When this function returns, the &lt;code&gt;lock&lt;/code&gt; has been released, so the caller should not attempt to &lt;code&gt;unlock&lt;/code&gt; it.</source>
          <target state="translated">この関数が戻ると、 &lt;code&gt;lock&lt;/code&gt; が解除されているため、呼び出し元は &lt;code&gt;unlock&lt;/code&gt; を解除しようとしないでください。</target>
        </trans-unit>
        <trans-unit id="afcec4d967a0515eaea7ceb3fcaeb59b279f583b" translate="yes" xml:space="preserve">
          <source>When to use T, Ptr{T} and Ref{T}</source>
          <target state="translated">T,Ptr{T},Ref{T}を使用する場合</target>
        </trans-unit>
        <trans-unit id="192e3e787a1f9ea7f9bd564c044daecfe8f0cc3a" translate="yes" xml:space="preserve">
          <source>When used for retrieving documentation, the &lt;code&gt;@doc&lt;/code&gt; macro (or equally, the &lt;code&gt;doc&lt;/code&gt; function) will search all &lt;code&gt;META&lt;/code&gt; dictionaries for metadata relevant to the given object and return it. The returned object (some Markdown content, for example) will by default display itself intelligently. This design also makes it easy to use the doc system in a programmatic way; for example, to re-use documentation between different versions of a function:</source>
          <target state="translated">ドキュメントを取得するために使用される場合、 &lt;code&gt;@doc&lt;/code&gt; &lt;code&gt;doc&lt;/code&gt; マクロ（またはdoc関数）は、指定されたオブジェクトに関連するメタデータのすべての &lt;code&gt;META&lt;/code&gt; 辞書を検索し、それを返します。返されたオブジェクト（一部のMarkdownコンテンツなど）は、デフォルトでインテリジェントに表示されます。この設計により、ドキュメントシステムをプログラム的に簡単に使用できるようになります。たとえば、関数の異なるバージョン間でドキュメントを再利用するには：</target>
        </trans-unit>
        <trans-unit id="0da1440377ce905990ebb1084be997ed9f823f6e" translate="yes" xml:space="preserve">
          <source>When used in a top-level expression (i.e. outside any function), &lt;code&gt;return&lt;/code&gt; causes the entire current top-level expression to terminate early.</source>
          <target state="translated">トップレベルの式（つまり、関数の外側）で使用すると、 &lt;code&gt;return&lt;/code&gt; は現在のトップレベルの式全体を早期に終了させます。</target>
        </trans-unit>
        <trans-unit id="ad90f9fad3e865dcdcc8e5c6f4ed1440be5209d1" translate="yes" xml:space="preserve">
          <source>When used in multiplication, &lt;code&gt;false&lt;/code&gt; acts as a &lt;em&gt;strong zero&lt;/em&gt;:</source>
          <target state="translated">乗算で使用する場合、 &lt;code&gt;false&lt;/code&gt; は&lt;em&gt;強いゼロ&lt;/em&gt;として機能し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="62c2368f15add98073b370ac7b8ec7c167ef17f5" translate="yes" xml:space="preserve">
          <source>When used recursively, &lt;code&gt;isbits&lt;/code&gt; types are stored inline. All other types are stored as a pointer to the data. When mirroring a struct used by-value inside another struct in C, it is imperative that you do not attempt to manually copy the fields over, as this will not preserve the correct field alignment. Instead, declare an &lt;code&gt;isbits&lt;/code&gt; struct type and use that instead. Unnamed structs are not possible in the translation to Julia.</source>
          <target state="translated">再帰的に使用すると、 &lt;code&gt;isbits&lt;/code&gt; タイプはインラインで格納されます。他のすべてのタイプは、データへのポインタとして格納されます。Cの別の構造体内の値で使用されている構造をミラーリングする場合、正しいフィールドの配置が保持されないため、フィールドを手動でコピーしないでください。代わりに、 &lt;code&gt;isbits&lt;/code&gt; 構造体型を宣言して、代わりにそれを使用してください。名前のない構造体は、ジュリアへの翻訳では不可能です。</target>
        </trans-unit>
        <trans-unit id="8037800c51683cda76306c47fbd67814674e8ca7" translate="yes" xml:space="preserve">
          <source>When used with floating point values, the exact result may not be representable by the type, and so rounding error may occur. In particular, if the exact result is very close to &lt;code&gt;y&lt;/code&gt;, then it may be rounded to &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">浮動小数点値で使用すると、正確な結果が型で表現できない場合があるため、丸めエラーが発生する場合があります。正確な結果は非常に近くにある場合、特に、 &lt;code&gt;y&lt;/code&gt; 、それはに丸みを帯びていてもよい &lt;code&gt;y&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="acd8680746460f581c6030ccf8473f00fb5891fe" translate="yes" xml:space="preserve">
          <source>When used without arguments, it applies to all arguments of the parent scope. In local scope, this means all arguments of the containing function. In global (top-level) scope, this means all methods subsequently defined in the current module.</source>
          <target state="translated">引数なしで使用する場合は、親スコープのすべての引数に適用されます。ローカルスコープでは、これは含まれる関数のすべての引数を意味します。グローバル (トップレベル)スコープでは、現在のモジュールで定義されているすべてのメソッドを意味します。</target>
        </trans-unit>
        <trans-unit id="fc5d430efeaf46d7a9bbfb42c02ab830cb54a4e3" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;julia&lt;/code&gt; in high-performance computing (HPC) facilities, invoking &lt;em&gt;n&lt;/em&gt;&lt;code&gt;julia&lt;/code&gt; processes simultaneously creates at most &lt;em&gt;n&lt;/em&gt; temporary copies of precompilation cache files. If this is an issue (slow and/or small distributed file system), you may:</source>
          <target state="translated">ハイパフォーマンスコンピューティング（HPC）機能で &lt;code&gt;julia&lt;/code&gt; を使用する場合、&lt;em&gt;n個の&lt;/em&gt; &lt;code&gt;julia&lt;/code&gt; プロセスを同時に呼び出すと、コンパイル前キャッシュファイルの最大&lt;em&gt;n個の&lt;/em&gt;一時コピーが同時に作成されます。これが問題である場合（低速および/または小さな分散ファイルシステム）、次のことができます。</target>
        </trans-unit>
        <trans-unit id="a2497c9ba2b3daea7dfb0574cb00ff1e7a9c7db7" translate="yes" xml:space="preserve">
          <source>When using custom transports:</source>
          <target state="translated">カスタムトランスポートを使用する場合</target>
        </trans-unit>
        <trans-unit id="c2b8bc3f498fe7ac6fdf02d7ec792cfe70836fab" translate="yes" xml:space="preserve">
          <source>When using multi-threading we have to be careful when using functions that are not &lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;pure&lt;/a&gt; as we might get a wrong answer. For instance functions that have a &lt;a href=&quot;../style-guide/index#bang-convention&quot;&gt;name ending with &lt;code&gt;!&lt;/code&gt;&lt;/a&gt; by convention modify their arguments and thus are not pure.</source>
          <target state="translated">マルチスレッドを使用する場合、間違った答えが得られる可能性があるため、&lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;純粋で&lt;/a&gt;ない関数を使用する場合は注意が必要です。たとえば、&lt;a href=&quot;../style-guide/index#bang-convention&quot;&gt;名前が &lt;code&gt;!&lt;/code&gt; で&lt;/a&gt;終わる関数 慣例により、引数を変更するため、純粋ではありません。</target>
        </trans-unit>
        <trans-unit id="c37c0d6d64c53d6358f8588b527452529dd78e26" translate="yes" xml:space="preserve">
          <source>When using multi-threading we have to be careful when using functions that are not &lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;pure&lt;/a&gt; as we might get a wrong answer. For instance functions that have their &lt;a href=&quot;https://docs.julialang.org/en/latest/manual/style-guide/#Append-!-to-names-of-functions-that-modify-their-arguments-1&quot;&gt;name ending with &lt;code&gt;!&lt;/code&gt;&lt;/a&gt; by convention modify their arguments and thus are not pure. However, there are functions that have side effects and their name does not end with &lt;code&gt;!&lt;/code&gt;. For instance &lt;code&gt;findfirst(regex, str)&lt;/code&gt; mutates its &lt;code&gt;regex&lt;/code&gt; argument or &lt;a href=&quot;../../stdlib/random/index#Base.rand&quot;&gt;&lt;code&gt;rand()&lt;/code&gt;&lt;/a&gt; changes &lt;code&gt;Base.GLOBAL_RNG&lt;/code&gt; :</source>
          <target state="translated">マルチスレッドを使用する場合、誤った答えを得る可能性があるため、&lt;a href=&quot;https://en.wikipedia.org/wiki/Pure_function&quot;&gt;純粋で&lt;/a&gt;ない関数を使用するときは注意する必要があります。たとえば、&lt;a href=&quot;https://docs.julialang.org/en/latest/manual/style-guide/#Append-!-to-names-of-functions-that-modify-their-arguments-1&quot;&gt;名前が &lt;code&gt;!&lt;/code&gt; で&lt;/a&gt;終わる関数慣例により、引数を変更するため、純粋ではありません。ただし、副作用があり、名前が &lt;code&gt;!&lt;/code&gt; で終わらない関数があります。。たとえば、 &lt;code&gt;findfirst(regex, str)&lt;/code&gt; その &lt;code&gt;regex&lt;/code&gt; 引数を変更するか、&lt;a href=&quot;../../stdlib/random/index#Base.rand&quot;&gt; &lt;code&gt;rand()&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;Base.GLOBAL_RNG&lt;/code&gt; を変更します。</target>
        </trans-unit>
        <trans-unit id="2b447ea6c22b7217cd1a32ca44046e314803b64e" translate="yes" xml:space="preserve">
          <source>When using precompilation, it is important to keep a clear sense of the distinction between the compilation phase and the execution phase. In this mode, it will often be much more clearly apparent that Julia is a compiler which allows execution of arbitrary Julia code, not a standalone interpreter that also generates compiled code.</source>
          <target state="translated">プリコンパイルを使用する際には、コンパイルフェーズと実行フェーズの区別を明確にしておくことが重要です。このモードでは、Juliaがコンパイルされたコードを生成するスタンドアロンのインタプリタではなく、任意のJuliaコードの実行を可能にするコンパイラであることがよくわかります。</target>
        </trans-unit>
        <trans-unit id="0e5558e1451a680e9ddfe72dac1bc38bd5461d8f" translate="yes" xml:space="preserve">
          <source>When working with parameterized types, including arrays, it is best to avoid parameterizing with abstract types where possible.</source>
          <target state="translated">配列を含むパラメータ化された型を扱う際には、可能な限り抽象型でのパラメータ化は避けた方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="abf66d0515d50ea07459b30e9a61d6da0706813b" translate="yes" xml:space="preserve">
          <source>When writing Julia callable functions, it might be necessary to validate arguments and throw exceptions to indicate errors. A typical type check looks like:</source>
          <target state="translated">Julia の callable 関数を書く際には、引数を検証してエラーを示す例外を投げる必要があるかもしれません。典型的な型チェックは次のようになります。</target>
        </trans-unit>
        <trans-unit id="2ad650f8bc2dfe7cd7aa17fa3b6b4fd4a9838167" translate="yes" xml:space="preserve">
          <source>When writing a generator expression with multiple dimensions inside an argument list, parentheses are needed to separate the generator from subsequent arguments:</source>
          <target state="translated">引数リスト内に複数のディメンジョンを持つジェネレータ式を書く場合、ジェネレータを後続の引数から分離するために括弧が必要です。</target>
        </trans-unit>
        <trans-unit id="a210e70d4d8e363a13a615aeef1246bcb22c3b70" translate="yes" xml:space="preserve">
          <source>When writing an error message, it is preferred to make the first word lowercase. For example,</source>
          <target state="translated">エラーメッセージを書くときは、最初の単語を小文字にすることが好ましい。例えば</target>
        </trans-unit>
        <trans-unit id="3b9df752ca25cefae3e41acb8144a7fbee28150d" translate="yes" xml:space="preserve">
          <source>When writing an error message, it is preferred to make the first word lowercase. For example, &lt;code&gt;size(A) == size(B) || throw(DimensionMismatch(&quot;size of A not equal to size of B&quot;))&lt;/code&gt;</source>
          <target state="translated">エラーメッセージを書き込むときは、最初の単語を小文字にすることをお勧めします。たとえば、 &lt;code&gt;size(A) == size(B) || throw(DimensionMismatch(&quot;size of A not equal to size of B&quot;))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="746943943c8bd0cb8ffebcb9533c46af3e156c32" translate="yes" xml:space="preserve">
          <source>When writing cross-platform applications or libraries, it is often necessary to allow for differences between operating systems. The variable &lt;code&gt;Sys.KERNEL&lt;/code&gt; can be used to handle such cases. There are several functions in the &lt;code&gt;Sys&lt;/code&gt; module intended to make this easier, such as &lt;code&gt;isunix&lt;/code&gt;, &lt;code&gt;islinux&lt;/code&gt;, &lt;code&gt;isapple&lt;/code&gt;, &lt;code&gt;isbsd&lt;/code&gt;, &lt;code&gt;isfreebsd&lt;/code&gt;, and &lt;code&gt;iswindows&lt;/code&gt;. These may be used as follows:</source>
          <target state="translated">クロスプラットフォームのアプリケーションまたはライブラリを作成する場合、オペレーティングシステム間の違いを考慮に入れる必要があることがよくあります。変数 &lt;code&gt;Sys.KERNEL&lt;/code&gt; を使用して、このような場合を処理できます。中にいくつかの機能があります &lt;code&gt;Sys&lt;/code&gt; モジュールのような、これを容易にすることを目的と &lt;code&gt;isunix&lt;/code&gt; 、 &lt;code&gt;islinux&lt;/code&gt; 、 &lt;code&gt;isapple&lt;/code&gt; 、 &lt;code&gt;isbsd&lt;/code&gt; 、 &lt;code&gt;isfreebsd&lt;/code&gt; 、および &lt;code&gt;iswindows&lt;/code&gt; 。これらは次のように使用できます。</target>
        </trans-unit>
        <trans-unit id="140bfa28c1af35b51bf1fbbfbb494996a50b8788" translate="yes" xml:space="preserve">
          <source>When writing data to a file (or other I/O device), forming extra intermediate strings is a source of overhead. Instead of:</source>
          <target state="translated">ファイル(または他のI/Oデバイス)にデータを書き込む場合、余分な中間文字列を形成することはオーバーヘッドの原因となります。その代わりに</target>
        </trans-unit>
        <trans-unit id="ea56a87bb36feaf518131b01ee237cf7ed3e22b2" translate="yes" xml:space="preserve">
          <source>When you are done experimenting with &lt;code&gt;tutorial&lt;/code&gt;, you can return to the &lt;strong&gt;default environment&lt;/strong&gt; by running &lt;code&gt;activate&lt;/code&gt; with no arguments:</source>
          <target state="translated">&lt;code&gt;tutorial&lt;/code&gt; の実験が終了したら、引数なしで &lt;code&gt;activate&lt;/code&gt; を実行することにより、&lt;strong&gt;デフォルト環境に&lt;/strong&gt;戻ることができます。</target>
        </trans-unit>
        <trans-unit id="af850b03f79f23506bb562acc1e616e437cdd077" translate="yes" xml:space="preserve">
          <source>When you might be tempted to dispatch on two or more arguments, consider whether a &quot;wrapper&quot; function might make for a simpler design. For example, instead of writing multiple variants:</source>
          <target state="translated">2つ以上の引数にディスパッチしたくなるかもしれないときは、「ラッパー」関数の方がよりシンプルな設計になるかどうかを考えてみましょう。例えば、複数のバリアントを書く代わりに</target>
        </trans-unit>
        <trans-unit id="3e23df6a20bd627b8c4a3ef7db880ac462400664" translate="yes" xml:space="preserve">
          <source>When your broadcast operation involves several arguments, individual argument styles get combined to determine a single &lt;code&gt;DestStyle&lt;/code&gt; that controls the type of the output container. For more details, see &lt;a href=&quot;#writing-binary-broadcasting-rules&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">ブロードキャスト操作に複数の引数が含まれる場合、個々の引数スタイルが組み合わされて、出力コンテナのタイプを制御する単一の &lt;code&gt;DestStyle&lt;/code&gt; が決定されます。詳細については、&lt;a href=&quot;#writing-binary-broadcasting-rules&quot;&gt;以下を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="048e5475f471182cd2ededcf0684d7e52f236fb2" translate="yes" xml:space="preserve">
          <source>When your broadcast operation involves several arguments, individual argument styles get combined to determine a single &lt;code&gt;DestStyle&lt;/code&gt; that controls the type of the output container. For more details, see &lt;a href=&quot;#writing-binary-broadcasting-rules-1&quot;&gt;below&lt;/a&gt;.</source>
          <target state="translated">ブロードキャスト操作に複数の引数が含まれる場合、個々の引数スタイルが組み合わされて、出力コンテナーのタイプを制御する単一の &lt;code&gt;DestStyle&lt;/code&gt; を決定します。詳細については、&lt;a href=&quot;#writing-binary-broadcasting-rules-1&quot;&gt;以下を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="3d4fb3c9ea296d79d861a0f19e5fe00c5f37399d" translate="yes" xml:space="preserve">
          <source>Whenever you have created a pointer to Julia data, you must ensure the original data exists until you are done with using the pointer. Many methods in Julia such as &lt;a href=&quot;../../base/c/index#Base.unsafe_load&quot;&gt;&lt;code&gt;unsafe_load&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;String&lt;/code&gt; make copies of data instead of taking ownership of the buffer, so that it is safe to free (or alter) the original data without affecting Julia. A notable exception is &lt;code&gt;unsafe_wrap&lt;/code&gt; which, for performance reasons, shares (or can be told to take ownership of) the underlying buffer.</source>
          <target state="translated">Juliaデータへのポインターを作成した場合は常に、ポインターの使用が完了するまで、元のデータが存在することを確認する必要があります。&lt;a href=&quot;../../base/c/index#Base.unsafe_load&quot;&gt; &lt;code&gt;unsafe_load&lt;/code&gt; &lt;/a&gt;や &lt;code&gt;String&lt;/code&gt; などのJuliaの多くのメソッドは、バッファーの所有権を取得する代わりにデータのコピーを作成するため、Juliaに影響を与えずに元のデータを解放（または変更）しても安全です。注目すべき例外は &lt;code&gt;unsafe_wrap&lt;/code&gt; です。これは、パフォーマンス上の理由から、基礎となるバッファーを共有します（または、そのバッファーの所有権を取得するように指示されます）。</target>
        </trans-unit>
        <trans-unit id="1f63c3900c5fc22683d6c7eea47a444379dfc1a7" translate="yes" xml:space="preserve">
          <source>Whenever you have created a pointer to Julia data, you must ensure the original data exists until you have finished using the pointer. Many methods in Julia such as &lt;a href=&quot;../../base/c/index#Base.unsafe_load&quot;&gt;&lt;code&gt;unsafe_load&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;String&lt;/code&gt; make copies of data instead of taking ownership of the buffer, so that it is safe to free (or alter) the original data without affecting Julia. A notable exception is &lt;code&gt;unsafe_wrap&lt;/code&gt; which, for performance reasons, shares (or can be told to take ownership of) the underlying buffer.</source>
          <target state="translated">Juliaデータへのポインターを作成するときは常に、ポインターの使用を終了するまで、元のデータが存在することを確認する必要があります。&lt;a href=&quot;../../base/c/index#Base.unsafe_load&quot;&gt; &lt;code&gt;unsafe_load&lt;/code&gt; &lt;/a&gt;や &lt;code&gt;String&lt;/code&gt; などのJuliaの多くのメソッドは、バッファの所有権を取得する代わりにデータのコピーを作成するため、Juliaに影響を与えることなく元のデータを安全に解放（または変更）できます。注目すべき例外は &lt;code&gt;unsafe_wrap&lt;/code&gt; です。これは、パフォーマンス上の理由から、基になるバッファーを共有します（または所有権を取得するように指示できます）。</target>
        </trans-unit>
        <trans-unit id="8cc3e56583b16a50bfba8e692c6fe776fd1cb4f1" translate="yes" xml:space="preserve">
          <source>Whenever you subtype &lt;code&gt;AbstractArrayStyle&lt;/code&gt;, you also need to define rules for combining dimensionalities, by creating a constructor for your style that takes a &lt;code&gt;Val(N)&lt;/code&gt; argument. For example:</source>
          <target state="translated">&lt;code&gt;AbstractArrayStyle&lt;/code&gt; をサブタイプするときはいつでも、 &lt;code&gt;Val(N)&lt;/code&gt; 引数を取るスタイルのコンストラクターを作成して、次元を組み合わせるためのルールを定義する必要もあります。例えば：</target>
        </trans-unit>
        <trans-unit id="3066b7d4e247d114bdc0ef476727d2a6ba818e4d" translate="yes" xml:space="preserve">
          <source>Where possible, try to avoid defining methods that dispatch on specific element types of abstract containers. For example,</source>
          <target state="translated">可能な限り、抽象コンテナの特定の要素タイプにディスパッチするメソッドを定義しないようにしてください。例えば</target>
        </trans-unit>
        <trans-unit id="e4b922c6b5958e9ab31dff7d65b2a0ee19971cda" translate="yes" xml:space="preserve">
          <source>Where required, mutable composite objects can be declared with the keyword &lt;a href=&quot;../../base/base/index#mutable%20struct&quot;&gt;&lt;code&gt;mutable struct&lt;/code&gt;&lt;/a&gt;, to be discussed in the next section.</source>
          <target state="translated">必要な場合は、次のセクションで説明するように、変更可能な複合オブジェクトをキーワード&lt;a href=&quot;../../base/base/index#mutable%20struct&quot;&gt; &lt;code&gt;mutable struct&lt;/code&gt; &lt;/a&gt;で宣言できます。</target>
        </trans-unit>
        <trans-unit id="d1c9c509d6368e040525363a2e496308085482cd" translate="yes" xml:space="preserve">
          <source>Wherever possible examples should be &lt;strong&gt;self-contained&lt;/strong&gt; and &lt;strong&gt;runnable&lt;/strong&gt; so that readers are able to try them out without having to include any dependencies.</source>
          <target state="translated">読者が依存関係を含めることなくそれらを試すことができるように、&lt;strong&gt;可能な&lt;/strong&gt;限り、例は&lt;strong&gt;自己完結型&lt;/strong&gt;で&lt;strong&gt;実行可能で&lt;/strong&gt;なければなりません。</target>
        </trans-unit>
        <trans-unit id="ef567ac5cd5d2b217cb8d699a0ed8bd87ebc66fa" translate="yes" xml:space="preserve">
          <source>Whether these Unicode characters are displayed as escapes or shown as special characters depends on your terminal's locale settings and its support for Unicode. String literals are encoded using the UTF-8 encoding. UTF-8 is a variable-width encoding, meaning that not all characters are encoded in the same number of bytes (&quot;code units&quot;). In UTF-8, ASCII characters &amp;mdash; i.e. those with code points less than 0x80 (128) &amp;ndash; are encoded as they are in ASCII, using a single byte, while code points 0x80 and above are encoded using multiple bytes &amp;mdash; up to four per character.</source>
          <target state="translated">これらのUnicode文字がエスケープとして表示されるか、特殊文字として表示されるかは、端末のロケール設定とUnicodeのサポートによって異なります。文字列リテラルは、UTF-8エンコーディングを使用してエンコードされます。 UTF-8は可変幅エンコーディングです。つまり、すべての文字が同じバイト数（「コード単位」）でエンコードされるわけではありません。 UTF-8では、ASCII文字（コードポイントが0x80（128）未満の文字）は、1バイトを使用してASCIIでエンコードされますが、コードポイント0x80以上は、複数バイトを使用してエンコードされます（1文字あたり最大4つ） 。</target>
        </trans-unit>
        <trans-unit id="f7fc267bb32bef8de2de3ffe243f0a016d661b84" translate="yes" xml:space="preserve">
          <source>Whether you're at the REPL or in IJulia, you can typically improve your development experience with &lt;a href=&quot;https://github.com/timholy/Revise.jl&quot;&gt;Revise&lt;/a&gt;. It is common to configure Revise to start whenever julia is started, as per the instructions in the &lt;a href=&quot;https://timholy.github.io/Revise.jl/stable/&quot;&gt;Revise documentation&lt;/a&gt;. Once configured, Revise will track changes to files in any loaded modules, and to any files loaded in to the REPL with &lt;code&gt;includet&lt;/code&gt; (but not with plain &lt;code&gt;include&lt;/code&gt;); you can then edit the files and the changes take effect without restarting your julia session. A standard workflow is similar to the REPL-based workflow above, with the following modifications:</source>
          <target state="translated">REPLでもIJuliaでも、通常は&lt;a href=&quot;https://github.com/timholy/Revise.jl&quot;&gt;Reviseを使用し&lt;/a&gt;て開発エクスペリエンスを改善できます。&lt;a href=&quot;https://timholy.github.io/Revise.jl/stable/&quot;&gt;Reviseドキュメントの&lt;/a&gt;指示に従って、juliaが起動するたびにReviseが起動するように設定するのが一般的です。設定が完了すると、改訂は、ロードされたモジュール内のファイルへの変更を追跡し、任意のファイルにしてREPLにロードされます &lt;code&gt;includet&lt;/code&gt; （ではなく、プレーンを持つ &lt;code&gt;include&lt;/code&gt; ）。その後、ファイルを編集すると、juliaセッションを再起動せずに変更が有効になります。標準ワークフローは、上記のREPLベースのワークフローに似ていますが、次の点が異なります。</target>
        </trans-unit>
        <trans-unit id="8a4dc663436f3244e6df7b1b5d61395f232fa789" translate="yes" xml:space="preserve">
          <source>Which dependencies a package in a package directory can import depends on whether the package contains a project file:</source>
          <target state="translated">パッケージディレクトリ内のパッケージがインポートできる依存関係は、パッケージにプロジェクトファイルが含まれているかどうかに依存します。</target>
        </trans-unit>
        <trans-unit id="756eba64f92afee04dba30cffc4bf61294ef8525" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;#Base.macroexpand&quot;&gt;&lt;code&gt;macroexpand&lt;/code&gt;&lt;/a&gt; has an explicit &lt;code&gt;module&lt;/code&gt; argument, &lt;code&gt;@macroexpand&lt;/code&gt; always</source>
          <target state="translated">一方で&lt;a href=&quot;#Base.macroexpand&quot;&gt; &lt;code&gt;macroexpand&lt;/code&gt; はは&lt;/a&gt;明示ている &lt;code&gt;module&lt;/code&gt; 引数を、 &lt;code&gt;@macroexpand&lt;/code&gt; 常に</target>
        </trans-unit>
        <trans-unit id="184a46eafa36dca281973d7f2d6b87f46821a4c2" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;#Base.macroexpand&quot;&gt;&lt;code&gt;macroexpand&lt;/code&gt;&lt;/a&gt; has an explicit &lt;code&gt;module&lt;/code&gt; argument, &lt;code&gt;@macroexpand&lt;/code&gt; always expands with respect to the module in which it is called.</source>
          <target state="translated">一方で&lt;a href=&quot;#Base.macroexpand&quot;&gt; &lt;code&gt;macroexpand&lt;/code&gt; はは&lt;/a&gt;明示ている &lt;code&gt;module&lt;/code&gt; 引数を、 &lt;code&gt;@macroexpand&lt;/code&gt; 常にそれが呼び出されるモジュールに関して拡大します。</target>
        </trans-unit>
        <trans-unit id="1cc49efbeeb77badc02c9b1bad7194e67a387a92" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;#Base.macroexpand&quot;&gt;&lt;code&gt;macroexpand&lt;/code&gt;&lt;/a&gt; takes a keyword argument &lt;code&gt;recursive&lt;/code&gt;, &lt;code&gt;@macroexpand&lt;/code&gt;</source>
          <target state="translated">一方で&lt;a href=&quot;#Base.macroexpand&quot;&gt; &lt;code&gt;macroexpand&lt;/code&gt; はは&lt;/a&gt;キーワード引数の取り &lt;code&gt;recursive&lt;/code&gt; 、 &lt;code&gt;@macroexpand&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a9228b710aa24ac839d6bc3a76205d3aff72284d" translate="yes" xml:space="preserve">
          <source>While &lt;a href=&quot;#Base.macroexpand&quot;&gt;&lt;code&gt;macroexpand&lt;/code&gt;&lt;/a&gt; takes a keyword argument &lt;code&gt;recursive&lt;/code&gt;, &lt;code&gt;@macroexpand&lt;/code&gt; is always recursive. For a non recursive macro version, see &lt;a href=&quot;#Base.@macroexpand1&quot;&gt;&lt;code&gt;@macroexpand1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">一方で&lt;a href=&quot;#Base.macroexpand&quot;&gt; &lt;code&gt;macroexpand&lt;/code&gt; はは&lt;/a&gt;キーワード引数の取り &lt;code&gt;recursive&lt;/code&gt; 、 &lt;code&gt;@macroexpand&lt;/code&gt; 常に再帰的です。非再帰的なマクロバージョンについては、&lt;a href=&quot;#Base.@macroexpand1&quot;&gt; &lt;code&gt;@macroexpand1&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f2c2f9203af0f3ce23ef8c2d94a94796ece99629" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;*&lt;/code&gt; may seem like a surprising choice to users of languages that provide &lt;code&gt;+&lt;/code&gt; for string concatenation, this use of &lt;code&gt;*&lt;/code&gt; has precedent in mathematics, particularly in abstract algebra.</source>
          <target state="translated">一方で &lt;code&gt;*&lt;/code&gt; が提供言語のユーザーに意外な選択のように見えるかもしれません &lt;code&gt;+&lt;/code&gt; 文字列連結のために、この使用 &lt;code&gt;*&lt;/code&gt; は、特に抽象代数学では、数学の先例を持っています。</target>
        </trans-unit>
        <trans-unit id="bbcff3d6feff5ad14e53fb09db15ddf33d0354ee" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;@simd&lt;/code&gt; needs to be placed directly in front of an innermost &lt;code&gt;for&lt;/code&gt; loop, both &lt;code&gt;@inbounds&lt;/code&gt; and &lt;code&gt;@fastmath&lt;/code&gt; can be applied to either single expressions or all the expressions that appear within nested blocks of code, e.g., using &lt;code&gt;@inbounds begin&lt;/code&gt; or &lt;code&gt;@inbounds for ...&lt;/code&gt;.</source>
          <target state="translated">ながら &lt;code&gt;@simd&lt;/code&gt; ニーズが最も内側の正面に配置されるように &lt;code&gt;for&lt;/code&gt; ループ、両方 &lt;code&gt;@inbounds&lt;/code&gt; と &lt;code&gt;@fastmath&lt;/code&gt; を用い、単一の表現または例えば、コードのネストされたブロック内に表示されるすべての式のいずれにも適用することができる &lt;code&gt;@inbounds begin&lt;/code&gt; または &lt;code&gt;@inbounds for ...&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3b0fd7a7891ebce6279ddd6c714b5386fc801ad6" translate="yes" xml:space="preserve">
          <source>While &lt;code&gt;jl_eval_string&lt;/code&gt; allows C to obtain the result of a Julia expression, it does not allow passing arguments computed in C to Julia. For this you will need to invoke Julia functions directly, using &lt;code&gt;jl_call&lt;/code&gt;:</source>
          <target state="translated">一方で &lt;code&gt;jl_eval_string&lt;/code&gt; は、 Cはジュリア式の結果を得ることができ、それはジュリアにCで計算された引数を渡すことはできません。このためには、 &lt;code&gt;jl_call&lt;/code&gt; を使用してJulia関数を直接呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="f07b0b9c023a9dca4df041f23eee5d568f348dc9" translate="yes" xml:space="preserve">
          <source>While Julia imposes few restrictions on valid names, it has become useful to adopt the following conventions:</source>
          <target state="translated">ジュリアは有効な名前にはほとんど制限を課していませんが、以下のような規約を採用することが有用になってきました。</target>
        </trans-unit>
        <trans-unit id="9611531e19b0b6f41cb83ee6678a76716493dd1f" translate="yes" xml:space="preserve">
          <source>While complex dispatch logic is not required for performance or usability, sometimes it can be the best way to express some algorithm. Here are a few common design patterns that come up sometimes when using dispatch in this way.</source>
          <target state="translated">複雑なディスパッチロジックは性能や使い勝手の面では必要ありませんが、何かしらのアルゴリズムを表現するためには最適な方法であることもあります。このような方法でディスパッチを使用する際に時々出てくる一般的なデザインパターンをいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="6a613d3a63e35707ed9f74c525fa3af91032ab48" translate="yes" xml:space="preserve">
          <source>While consecutive &lt;code&gt;remotecall&lt;/code&gt;s to the same worker are serialized in the order they are invoked, the order of executions on the remote worker is undetermined. For example, &lt;code&gt;remote_do(f1, 2); remotecall(f2, 2); remote_do(f3, 2)&lt;/code&gt; will serialize the call to &lt;code&gt;f1&lt;/code&gt;, followed by &lt;code&gt;f2&lt;/code&gt; and &lt;code&gt;f3&lt;/code&gt; in that order. However, it is not guaranteed that &lt;code&gt;f1&lt;/code&gt; is executed before &lt;code&gt;f3&lt;/code&gt; on worker 2.</source>
          <target state="translated">連続している間 &lt;code&gt;remotecall&lt;/code&gt; sは同じワーカーに、それらが呼び出される順番にシリアル化され、リモート作業者の実行の順序は未定です。たとえば、 &lt;code&gt;remote_do(f1, 2); remotecall(f2, 2); remote_do(f3, 2)&lt;/code&gt; は、 &lt;code&gt;f1&lt;/code&gt; への呼び出しをシリアル化し、その後に &lt;code&gt;f2&lt;/code&gt; と &lt;code&gt;f3&lt;/code&gt; をこの順序でシリアル化します。ただし、ワーカー2 で &lt;code&gt;f1&lt;/code&gt; が &lt;code&gt;f3&lt;/code&gt; の前に実行されるとは限りません。</target>
        </trans-unit>
        <trans-unit id="51e62aaaf2b53ae1f62514f54b2a553fcf0cfeab" translate="yes" xml:space="preserve">
          <source>While handling an exception further exceptions may be thrown. It can be useful to inspect all these exceptions to identify the root cause of a problem. The julia runtime supports this by pushing each exception onto an internal &lt;em&gt;exception stack&lt;/em&gt; as it occurs. When the code exits a &lt;code&gt;catch&lt;/code&gt; normally, any exceptions which were pushed onto the stack in the associated &lt;code&gt;try&lt;/code&gt; are considered to be successfully handled and are removed from the stack.</source>
          <target state="translated">例外の処理中に、さらに例外がスローされる場合があります。これらの例外をすべて調べて、問題の根本的な原因を特定すると便利です。 juliaランタイムは、発生時に内部&lt;em&gt;例外スタックに&lt;/em&gt;各例外をプッシュすることでこれをサポートします。コードが正常に &lt;code&gt;catch&lt;/code&gt; 終了すると、関連付けられた &lt;code&gt;try&lt;/code&gt; スタックにプッシュされた例外はすべて正常に処理されたと見なされ、スタックから削除されます。</target>
        </trans-unit>
        <trans-unit id="9ca37d3403041f9ab3487c0564b96870987e2b6c" translate="yes" xml:space="preserve">
          <source>While having easy access to information about the current state of the callstack can be helpful in many places, the most obvious application is in error handling and debugging.</source>
          <target state="translated">コールスタックの現在の状態に関する情報に簡単にアクセスできることは、多くの場所で役立ちますが、最も明白なアプリケーションはエラー処理とデバッグです。</target>
        </trans-unit>
        <trans-unit id="df4de512495b592481ddaae589dfa8a7c51cf0bd" translate="yes" xml:space="preserve">
          <source>While it isn't normally necessary, user-defined types can override the default &lt;code&gt;deepcopy&lt;/code&gt; behavior by defining a specialized version of the function &lt;code&gt;deepcopy_internal(x::T, dict::IdDict)&lt;/code&gt; (which shouldn't otherwise be used), where &lt;code&gt;T&lt;/code&gt; is the type to be specialized for, and &lt;code&gt;dict&lt;/code&gt; keeps track of objects copied so far within the recursion. Within the definition, &lt;code&gt;deepcopy_internal&lt;/code&gt; should be used in place of &lt;code&gt;deepcopy&lt;/code&gt;, and the &lt;code&gt;dict&lt;/code&gt; variable should be updated as appropriate before returning.</source>
          <target state="translated">通常は必要ありませんが、ユーザー定義型は、関数 &lt;code&gt;deepcopy_internal(x::T, dict::IdDict)&lt;/code&gt; 特別なバージョンを定義することで、デフォルトの &lt;code&gt;deepcopy&lt;/code&gt; 動作をオーバーライドできます（他の方法では使用しないでください）。ここで、 &lt;code&gt;T&lt;/code&gt; は特殊化するタイプであり、 &lt;code&gt;dict&lt;/code&gt; はこれまでに再帰的にコピーされたオブジェクトを追跡します。定義内では、 &lt;code&gt;deepcopy_internal&lt;/code&gt; 代わりに &lt;code&gt;deepcopy&lt;/code&gt; _internalを使用し、戻る前に &lt;code&gt;dict&lt;/code&gt; 変数を適切に更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="3f3d13eb12580ee4231b089eaa3cb6f0dbbb0c0a" translate="yes" xml:space="preserve">
          <source>While outer constructor methods succeed in addressing the problem of providing additional convenience methods for constructing objects, they fail to address the other two use cases mentioned in the introduction of this chapter: enforcing invariants, and allowing construction of self-referential objects. For these problems, one needs &lt;em&gt;inner&lt;/em&gt; constructor methods. An inner constructor method is like an outer constructor method, except for two differences:</source>
          <target state="translated">外部コンストラクターメソッドは、オブジェクトを作成するための追加の便利なメソッドを提供するという問題に対処することに成功しますが、この章の概要で述べた他の2つのユースケースに対処することに失敗します。これらの問題については、&lt;em&gt;内部&lt;/em&gt;コンストラクターメソッドが必要です。内部コンストラクターメソッドは、2つの違いを除いて、外部コンストラクターメソッドに似ています。</target>
        </trans-unit>
        <trans-unit id="cc7d60dfb2e235e3358134a6468c679f21f0ad14" translate="yes" xml:space="preserve">
          <source>While propercase return the same value in the corresponding &lt;a href=&quot;#Dates.Period&quot;&gt;&lt;code&gt;Period&lt;/code&gt;&lt;/a&gt; type:</source>
          <target state="translated">プロパケースは対応する&lt;a href=&quot;#Dates.Period&quot;&gt; &lt;code&gt;Period&lt;/code&gt; &lt;/a&gt;タイプで同じ値を返しますが、</target>
        </trans-unit>
        <trans-unit id="342603ec72e053e98ba85ef7e5ec03e87ad74dcc" translate="yes" xml:space="preserve">
          <source>While the &lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; constructor expects a 0-argument function, the &lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; method that creates a task-bound channel expects a function that accepts a single argument of type &lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;. A common pattern is for the producer to be parameterized, in which case a partial function application is needed to create a 0 or 1 argument &lt;a href=&quot;../functions/index#man-anonymous-functions&quot;&gt;anonymous function&lt;/a&gt;.</source>
          <target state="translated">一方で&lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt; &lt;code&gt;Task&lt;/code&gt; &lt;/a&gt;コンストラクタは0引数の機能を期待し、&lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt; &lt;code&gt;Channel&lt;/code&gt; &lt;/a&gt;タスクバウンドチャネルを作成する方法は、型の単一の引数受け入れ機能を期待&lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt; &lt;code&gt;Channel&lt;/code&gt; &lt;/a&gt;。一般的なパターンは、プロデューサーをパラメーター化することです。この場合、0または1引数の&lt;a href=&quot;../functions/index#man-anonymous-functions&quot;&gt;無名関数&lt;/a&gt;を作成するには、部分関数アプリケーションが必要です。</target>
        </trans-unit>
        <trans-unit id="0103ec498dfe3018e856d3ce11ad20db1b0525e9" translate="yes" xml:space="preserve">
          <source>While the &lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; constructor expects a 0-argument function, the &lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; method which creates a channel bound task expects a function that accepts a single argument of type &lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;. A common pattern is for the producer to be parameterized, in which case a partial function application is needed to create a 0 or 1 argument &lt;a href=&quot;../functions/index#man-anonymous-functions-1&quot;&gt;anonymous function&lt;/a&gt;.</source>
          <target state="translated">一方で&lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt; &lt;code&gt;Task&lt;/code&gt; &lt;/a&gt;コンストラクタは0引数の機能を期待し、&lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt; &lt;code&gt;Channel&lt;/code&gt; &lt;/a&gt;チャンネルバインドタスクを作成する方法は、型の単一の引数受け入れ機能を期待&lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt; &lt;code&gt;Channel&lt;/code&gt; &lt;/a&gt;。一般的なパターンは、プロデューサーをパラメーター化することです。この場合、0または1の引数の&lt;a href=&quot;../functions/index#man-anonymous-functions-1&quot;&gt;無名関数&lt;/a&gt;を作成するには、部分的な関数アプリケーションが必要です。</target>
        </trans-unit>
        <trans-unit id="218a44d9559edb27cfb4f29479eb4a5c8c1ee312" translate="yes" xml:space="preserve">
          <source>While the casual programmer need not explicitly use types or multiple dispatch, they are the core unifying features of Julia: functions are defined on different combinations of argument types, and applied by dispatching to the most specific matching definition. This model is a good fit for mathematical programming, where it is unnatural for the first argument to &quot;own&quot; an operation as in traditional object-oriented dispatch. Operators are just functions with special notation &amp;ndash; to extend addition to new user-defined data types, you define new methods for the &lt;code&gt;+&lt;/code&gt; function. Existing code then seamlessly applies to the new data types.</source>
          <target state="translated">カジュアルなプログラマーは明示的に型や複数のディスパッチを使用する必要はありませんが、それらはJuliaのコア統合機能です。関数は引数の型のさまざまな組み合わせで定義され、最も具体的な一致定義にディスパッチすることによって適用されます。このモデルは、数学的プログラミングに適しています。従来のオブジェクト指向のディスパッチのように、最初の引数で操作を「所有」するのは不自然です。演算子は、特別な表記を持つ単なる関数です。新しいユーザー定義のデータ型への追加を拡張するには、 &lt;code&gt;+&lt;/code&gt; 関数の新しいメソッドを定義します。次に、既存のコードが新しいデータ型にシームレスに適用されます。</target>
        </trans-unit>
        <trans-unit id="0bb2d55855117a6a29dcfe66a2d059180dbf3aa5" translate="yes" xml:space="preserve">
          <source>While the compiler can now do its job perfectly well, there are cases where &lt;em&gt;you&lt;/em&gt; might wish that your code could do different things depending on the &lt;em&gt;element type&lt;/em&gt; of &lt;code&gt;a&lt;/code&gt;. Usually the best way to achieve this is to wrap your specific operation (here, &lt;code&gt;foo&lt;/code&gt;) in a separate function:</source>
          <target state="translated">コンパイラは今や完全によくその仕事をすることができますが、例がある&lt;em&gt;あなたは&lt;/em&gt;あなたのコードがに応じて異なるもの行うことができることを望むかもしれない&lt;em&gt;要素型&lt;/em&gt;の。通常、これを実現する最良の方法は、特定の操作（ここでは &lt;code&gt;foo&lt;/code&gt; ）を別の関数でラップすることです。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a623753d4cea0b9be23eebbdfff0f9b8d6e62a17" translate="yes" xml:space="preserve">
          <source>While the default transport layer uses plain &lt;a href=&quot;../../stdlib/sockets/index#Sockets.TCPSocket&quot;&gt;&lt;code&gt;TCPSocket&lt;/code&gt;&lt;/a&gt;, it is possible for a Julia cluster to provide its own transport.</source>
          <target state="translated">デフォルトのトランスポート層は単純な&lt;a href=&quot;../../stdlib/sockets/index#Sockets.TCPSocket&quot;&gt; &lt;code&gt;TCPSocket&lt;/code&gt; を&lt;/a&gt;使用しますが、Juliaクラスターが独自のトランスポートを提供することは可能です。</target>
        </trans-unit>
        <trans-unit id="30845fa92bdd35d537ad635b6b31f53d4bb049ee" translate="yes" xml:space="preserve">
          <source>While the streaming I/O API is synchronous, the underlying implementation is fully asynchronous.</source>
          <target state="translated">ストリーミングI/O APIは同期型ですが、基本的な実装は完全に非同期です。</target>
        </trans-unit>
        <trans-unit id="5e5cf9df078dc718967f536a7ab7760f447547c9" translate="yes" xml:space="preserve">
          <source>While this behavior might surprise some, the choice is deliberate. The main reason is the presence of immutable objects within Julia, which cannot change their value once created. Indeed, a number is an immutable object; the statements &lt;code&gt;x = 5; x += 1&lt;/code&gt; do not modify the meaning of &lt;code&gt;5&lt;/code&gt;, they modify the value bound to &lt;code&gt;x&lt;/code&gt;. For an immutable, the only way to change the value is to reassign it.</source>
          <target state="translated">この動作は一部を驚かせるかもしれませんが、選択は慎重に行ってください。主な理由は、Julia内に不変オブジェクトが存在するためです。作成されたオブジェクトの値は変更できません。実際、数値は不変のオブジェクトです。ステートメント &lt;code&gt;x = 5; x += 1&lt;/code&gt; は &lt;code&gt;5&lt;/code&gt; の意味を変更せず、 &lt;code&gt;x&lt;/code&gt; にバインドされた値を変更します。不変の場合、値を変更する唯一の方法は、値を再割り当てすることです。</target>
        </trans-unit>
        <trans-unit id="a96e95242dd16f7c7d2c64c54621f6378735368c" translate="yes" xml:space="preserve">
          <source>While this can be inconvenient when you are developing new code, there's an excellent workaround. Modules can be replaced by redefining them, and so if you wrap all your new code inside a module you can redefine types and constants. You can't import the type names into &lt;code&gt;Main&lt;/code&gt; and then expect to be able to redefine them there, but you can use the module name to resolve the scope. In other words, while developing you might use a workflow something like this:</source>
          <target state="translated">これは、新しいコードを開発するときに不便になる場合がありますが、優れた回避策があります。モジュールはそれらを再定義することで置き換えることができるため、モジュール内にすべての新しいコードをラップすると、型と定数を再定義できます。タイプ名を &lt;code&gt;Main&lt;/code&gt; にインポートして、そこで再定義できると期待することはできませんが、モジュール名を使用してスコープを解決できます。言い換えると、開発中に次のようなワークフローを使用する場合があります。</target>
        </trans-unit>
        <trans-unit id="34c0c3d9948638672054e0c07121ec58601d9fa6" translate="yes" xml:space="preserve">
          <source>While this is starting to support more of the &lt;a href=&quot;../arrays/index#man-array-indexing&quot;&gt;indexing operations supported by some of the builtin types&lt;/a&gt;, there's still quite a number of behaviors missing. This &lt;code&gt;Squares&lt;/code&gt; sequence is starting to look more and more like a vector as we've added behaviors to it. Instead of defining all these behaviors ourselves, we can officially define it as a subtype of an &lt;a href=&quot;../../base/arrays/index#Core.AbstractArray&quot;&gt;&lt;code&gt;AbstractArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これ&lt;a href=&quot;../arrays/index#man-array-indexing&quot;&gt;により、一部の組み込み型&lt;/a&gt;でサポートされるより多くのインデックス作成操作がサポートされ始めていますが、まだかなりの数の動作が欠落しています。この &lt;code&gt;Squares&lt;/code&gt; シーケンスは、動作を追加するにつれて、ますますベクトルのように見え始めています。これらすべての動作を自分で定義する代わりに、&lt;a href=&quot;../../base/arrays/index#Core.AbstractArray&quot;&gt; &lt;code&gt;AbstractArray&lt;/code&gt; の&lt;/a&gt;サブタイプとして公式に定義することができます。</target>
        </trans-unit>
        <trans-unit id="649d185e29a40990efde41ef5a4ec1d691dac077" translate="yes" xml:space="preserve">
          <source>While this is starting to support more of the &lt;a href=&quot;../arrays/index#man-array-indexing-1&quot;&gt;indexing operations supported by some of the builtin types&lt;/a&gt;, there's still quite a number of behaviors missing. This &lt;code&gt;Squares&lt;/code&gt; sequence is starting to look more and more like a vector as we've added behaviors to it. Instead of defining all these behaviors ourselves, we can officially define it as a subtype of an &lt;a href=&quot;../../base/arrays/index#Core.AbstractArray&quot;&gt;&lt;code&gt;AbstractArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これ&lt;a href=&quot;../arrays/index#man-array-indexing-1&quot;&gt;により、一部の組み込みタイプ&lt;/a&gt;でサポートされているより多くのインデックス付け操作がサポートされるようになりましたが、まだ多くの動作が欠けています。この &lt;code&gt;Squares&lt;/code&gt; シーケンスは、ビヘイビアーを追加したため、ますますベクターのように見え始めています。これらすべての動作を自分で定義する代わりに、それを&lt;a href=&quot;../../base/arrays/index#Core.AbstractArray&quot;&gt; &lt;code&gt;AbstractArray&lt;/code&gt; の&lt;/a&gt;サブタイプとして公式に定義できます。</target>
        </trans-unit>
        <trans-unit id="425afa4408859b9cd15376be9e2c708f0297351c" translate="yes" xml:space="preserve">
          <source>While we can rely upon generic implementations, we can also extend specific methods where we know there is a simpler algorithm. For example, there's a formula to compute the sum of squares, so we can override the generic iterative version with a more performant solution:</source>
          <target state="translated">一般的な実装に頼ることもできますが、より単純なアルゴリズムがあることがわかっている場合には、特定のメソッドを拡張することもできます。例えば、二乗和を計算する式があるので、よりパフォーマンスの高い解で一般的な反復バージョンをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="e85aee206728001710e24ad54c1cc3e292a7042b" translate="yes" xml:space="preserve">
          <source>While you are allowed to create objects with uninitialized fields, any access to an uninitialized reference is an immediate error:</source>
          <target state="translated">初期化されていないフィールドを持つオブジェクトを作成することは可能ですが、初期化されていない参照へのアクセスは即時エラーとなります。</target>
        </trans-unit>
        <trans-unit id="cf81a2eac5fd3376ed443fa4628dd130f7562794" translate="yes" xml:space="preserve">
          <source>White Bullet</source>
          <target state="translated">白い弾丸</target>
        </trans-unit>
        <trans-unit id="e494bf31f9dcb1983954232ccfd79f61ec932828" translate="yes" xml:space="preserve">
          <source>White Circle</source>
          <target state="translated">ホワイトサークル</target>
        </trans-unit>
        <trans-unit id="a7bc8512f73b7bb391a5c2ccf19c842fbda78279" translate="yes" xml:space="preserve">
          <source>White Circle With Dot Right</source>
          <target state="translated">ドット右の白い円</target>
        </trans-unit>
        <trans-unit id="5b837af6377ef96cf6a166b867c0c8c92c78103a" translate="yes" xml:space="preserve">
          <source>White Circle With Lower Left Quadrant</source>
          <target state="translated">左下の象限の白い円</target>
        </trans-unit>
        <trans-unit id="7a596dbaa9fb2296442e407fd5b015383dac7bbf" translate="yes" xml:space="preserve">
          <source>White Circle With Lower Right Quadrant</source>
          <target state="translated">右下の象限の白い円</target>
        </trans-unit>
        <trans-unit id="672dc6b358ee6b861860cd20aec5494e0af288b8" translate="yes" xml:space="preserve">
          <source>White Circle With Two Dots</source>
          <target state="translated">二つのドットと白い円</target>
        </trans-unit>
        <trans-unit id="1f4da13b448e4c14ba5b609f9bb4745e9e5ca6e9" translate="yes" xml:space="preserve">
          <source>White Circle With Upper Left Quadrant</source>
          <target state="translated">左上の象限の白い円</target>
        </trans-unit>
        <trans-unit id="461fb2b1ea25d153f7a6aa34a5fd39118d45bba4" translate="yes" xml:space="preserve">
          <source>White Circle With Upper Right Quadrant</source>
          <target state="translated">右上の象限の白い円</target>
        </trans-unit>
        <trans-unit id="a6115fcd670ee20901c40ff2b1b9797df7dfa006" translate="yes" xml:space="preserve">
          <source>White Club Suit</source>
          <target state="translated">ホワイトクラブスーツ</target>
        </trans-unit>
        <trans-unit id="f952ed3ad8fab1cb62467e61cab89d2d1bc7c141" translate="yes" xml:space="preserve">
          <source>White Diamond</source>
          <target state="translated">ホワイトダイヤモンド</target>
        </trans-unit>
        <trans-unit id="55ff3a5814a60ca22f7334da0fe0a03866b29690" translate="yes" xml:space="preserve">
          <source>White Diamond Containing Black Small Diamond</source>
          <target state="translated">ホワイトダイヤモンド含有 ブラックスモールダイヤモンド</target>
        </trans-unit>
        <trans-unit id="8ede27e8a98dcab5fa658af9ff95c8f2de052979" translate="yes" xml:space="preserve">
          <source>White Diamond Suit</source>
          <target state="translated">ホワイトダイヤモンドスーツ</target>
        </trans-unit>
        <trans-unit id="25645a80840249c1631ced95a1131fd5693d26a2" translate="yes" xml:space="preserve">
          <source>White Down Pointing Backhand Index</source>
          <target state="translated">ホワイトダウンポインティングバックハンドインデックス</target>
        </trans-unit>
        <trans-unit id="3da143c67945743d6fa21635f9f5531063fb585f" translate="yes" xml:space="preserve">
          <source>White Down-Pointing Small Triangle / White Down Pointing Small Triangle</source>
          <target state="translated">ホワイトダウンポインティング小三角形/ホワイトダウンポインティング小三角形</target>
        </trans-unit>
        <trans-unit id="d85b319d306b744560c684c8558c3150f25c759e" translate="yes" xml:space="preserve">
          <source>White Down-Pointing Triangle / White Down Pointing Triangle</source>
          <target state="translated">ホワイトダウンポインティングトライアングル/ホワイトダウンポインティングトライアングル</target>
        </trans-unit>
        <trans-unit id="e9b368a5d40031b023d531fc80971be08451a032" translate="yes" xml:space="preserve">
          <source>White Exclamation Mark Ornament</source>
          <target state="translated">ホワイトエクスクラメーションマークオーナメント</target>
        </trans-unit>
        <trans-unit id="10d649860b97fdd765058196d5af9ef4b8dbb88c" translate="yes" xml:space="preserve">
          <source>White Flower</source>
          <target state="translated">白い花</target>
        </trans-unit>
        <trans-unit id="f94d39c1cd22b27b47b2f3f915dce302928d66ca" translate="yes" xml:space="preserve">
          <source>White Heart Suit</source>
          <target state="translated">ホワイトハートスーツ</target>
        </trans-unit>
        <trans-unit id="26de1b9a5e6c3681524ba9195b2307746d320518" translate="yes" xml:space="preserve">
          <source>White Heavy Check Mark</source>
          <target state="translated">ホワイトヘビーチェックマーク</target>
        </trans-unit>
        <trans-unit id="613af43285ba7a0ae894f4cfb736239ef65a6154" translate="yes" xml:space="preserve">
          <source>White Hexagon</source>
          <target state="translated">白の六角形</target>
        </trans-unit>
        <trans-unit id="7b5e7d13cd121c85b4bb13208c84034861c7cb6e" translate="yes" xml:space="preserve">
          <source>White Horizontal Ellipse</source>
          <target state="translated">白の水平楕円</target>
        </trans-unit>
        <trans-unit id="f4d79e99747238a6e41f2d61025ecfbc894087c0" translate="yes" xml:space="preserve">
          <source>White Large Square</source>
          <target state="translated">ホワイトラージスクエア</target>
        </trans-unit>
        <trans-unit id="e51ee8c21e96d837babac571a1cd183c3ac42093" translate="yes" xml:space="preserve">
          <source>White Left Pointing Backhand Index</source>
          <target state="translated">白左ポインティングバックハンドインデックス</target>
        </trans-unit>
        <trans-unit id="680cc5a2c271605dbb7cd76466eaa1ee28fd3e83" translate="yes" xml:space="preserve">
          <source>White Left-Pointing Pointer / White Left Pointing Pointer</source>
          <target state="translated">白い左ポインティングポインター/白い左ポインティングポインター</target>
        </trans-unit>
        <trans-unit id="2d97b16b2bf05311d60c6154fd15c292463d76a4" translate="yes" xml:space="preserve">
          <source>White Left-Pointing Small Triangle / White Left Pointing Small Triangle</source>
          <target state="translated">白の左寄せ小三角形/白の左寄せ小三角形</target>
        </trans-unit>
        <trans-unit id="b2bd60620f1288519f88e1cee597586190d78f96" translate="yes" xml:space="preserve">
          <source>White Left-Pointing Triangle / White Left Pointing Triangle</source>
          <target state="translated">白い左向きの三角形/白い左向きの三角形</target>
        </trans-unit>
        <trans-unit id="a5d0b3f0af3e38060d7de792c6bdcbb1eb5e3f10" translate="yes" xml:space="preserve">
          <source>White Medium Diamond</source>
          <target state="translated">ホワイトミディアムダイヤモンド</target>
        </trans-unit>
        <trans-unit id="f7c3621af62bb9ea6bd08a5b8ee3da3a2fd40e3f" translate="yes" xml:space="preserve">
          <source>White Medium Lozenge</source>
          <target state="translated">ホワイトミディアムロゼンジ</target>
        </trans-unit>
        <trans-unit id="ea7abd8f6fe495417dc6ec52a0a1c7afa3e6f9dc" translate="yes" xml:space="preserve">
          <source>White Medium Small Square</source>
          <target state="translated">白 中 小 スクエア</target>
        </trans-unit>
        <trans-unit id="a893fa5318683cd059cb5ee66a5b426a43ead599" translate="yes" xml:space="preserve">
          <source>White Medium Square</source>
          <target state="translated">ホワイトミディアムスクエア</target>
        </trans-unit>
        <trans-unit id="6f8fdba894c29225da318fd533696d2f839ae78e" translate="yes" xml:space="preserve">
          <source>White Medium Star</source>
          <target state="translated">ホワイトミディアムスター</target>
        </trans-unit>
        <trans-unit id="94f0f6d1e4fad29f296a0cc4fee17a4f4b0a35d5" translate="yes" xml:space="preserve">
          <source>White Parallelogram</source>
          <target state="translated">白平四辺形</target>
        </trans-unit>
        <trans-unit id="ac95a34ae3b4846ba7cad308897ae65184ceb6f9" translate="yes" xml:space="preserve">
          <source>White Pentagon</source>
          <target state="translated">ホワイトペンタゴン</target>
        </trans-unit>
        <trans-unit id="9907ea5b1099f4ea56141347654e577f39e45ef2" translate="yes" xml:space="preserve">
          <source>White Question Mark Ornament</source>
          <target state="translated">白のクエスチョンマークオーナメント</target>
        </trans-unit>
        <trans-unit id="dd8532ae60e7384f04353f222ba8f658123bc5cb" translate="yes" xml:space="preserve">
          <source>White Rectangle</source>
          <target state="translated">白い長方形</target>
        </trans-unit>
        <trans-unit id="cc520b6f425ec21f629f8629e02c0432fdbb8d02" translate="yes" xml:space="preserve">
          <source>White Right Pointing Backhand Index</source>
          <target state="translated">白の右ポインティングバックハンドインデックス</target>
        </trans-unit>
        <trans-unit id="727ea857bd3c329445166547fdb91d69eb72e260" translate="yes" xml:space="preserve">
          <source>White Right-Pointing Pentagon</source>
          <target state="translated">白人右傾化ペンタゴン</target>
        </trans-unit>
        <trans-unit id="ef4a6513f3dbf938488f4c84a4ec11d06b65d445" translate="yes" xml:space="preserve">
          <source>White Right-Pointing Pointer / White Right Pointing Pointer</source>
          <target state="translated">白い右ポインティングポインター/白い右ポインティングポインター</target>
        </trans-unit>
        <trans-unit id="eef06644e488135d446e5fbd8a4b2af2b92f1fca" translate="yes" xml:space="preserve">
          <source>White Right-Pointing Small Triangle / White Right Pointing Small Triangle</source>
          <target state="translated">白の直角小三角/白の直角小三角</target>
        </trans-unit>
        <trans-unit id="1b5953087f00f8c08a0eba9649a19ee7ed4ccc61" translate="yes" xml:space="preserve">
          <source>White Right-Pointing Triangle / White Right Pointing Triangle</source>
          <target state="translated">白の直角三角形/白の直角三角形</target>
        </trans-unit>
        <trans-unit id="4652a549f479384e502bd957e68bce478919740b" translate="yes" xml:space="preserve">
          <source>White Small Lozenge</source>
          <target state="translated">ホワイトスモールロゼンジ</target>
        </trans-unit>
        <trans-unit id="819c8924b69ae048832f9f245654a0f3675e7d7f" translate="yes" xml:space="preserve">
          <source>White Small Square</source>
          <target state="translated">ホワイトスモールスクエア</target>
        </trans-unit>
        <trans-unit id="9edb5e7c110d675d95bbe00187a763284fceeb66" translate="yes" xml:space="preserve">
          <source>White Small Star</source>
          <target state="translated">ホワイトスモールスター</target>
        </trans-unit>
        <trans-unit id="e827fa8115af6a8ff7e8694006fdc84821193ae1" translate="yes" xml:space="preserve">
          <source>White Smiling Face</source>
          <target state="translated">白い笑顔</target>
        </trans-unit>
        <trans-unit id="7292a4d2f1ad67f38f858a5ba2aa2f931216208d" translate="yes" xml:space="preserve">
          <source>White Spade Suit</source>
          <target state="translated">ホワイトスペードスーツ</target>
        </trans-unit>
        <trans-unit id="85e6d72ac7d40e888c68f97f937db0275136d4bc" translate="yes" xml:space="preserve">
          <source>White Square</source>
          <target state="translated">ホワイトスクエア</target>
        </trans-unit>
        <trans-unit id="8f0420eb950e967ab932dd0092a9e69b9e847452" translate="yes" xml:space="preserve">
          <source>White Square Button</source>
          <target state="translated">ホワイトスクエアボタン</target>
        </trans-unit>
        <trans-unit id="49c3968fd08318e52ffe077d152705799435b243" translate="yes" xml:space="preserve">
          <source>White Square Containing Black Small Square</source>
          <target state="translated">白い四角い四角い四角い黒い四角い四角い四角い四角い四角い四角い</target>
        </trans-unit>
        <trans-unit id="5619b6d53d6541754f6d6468f142e7fa76ad7d27" translate="yes" xml:space="preserve">
          <source>White Square With Lower Left Quadrant</source>
          <target state="translated">左下の象限が付いている白い正方形</target>
        </trans-unit>
        <trans-unit id="808c9e191bf161e38926f5c5f29bd3081aeff48c" translate="yes" xml:space="preserve">
          <source>White Square With Lower Right Quadrant</source>
          <target state="translated">右下の象限が付いている白い正方形</target>
        </trans-unit>
        <trans-unit id="4268bdeee136d632856d4e162626b19d1248aac4" translate="yes" xml:space="preserve">
          <source>White Square With Rounded Corners</source>
          <target state="translated">角の丸みを帯びた白い正方形</target>
        </trans-unit>
        <trans-unit id="72fbf1e699577a2d0f954dab09953632de3c1094" translate="yes" xml:space="preserve">
          <source>White Square With Upper Left Quadrant</source>
          <target state="translated">左上の象限が付いている白い正方形</target>
        </trans-unit>
        <trans-unit id="dd849fbc18756c006103ba9e64207f6b3bdef64c" translate="yes" xml:space="preserve">
          <source>White Square With Upper Right Quadrant</source>
          <target state="translated">右上の象限を持つ白い正方形</target>
        </trans-unit>
        <trans-unit id="2d9cf58f29a3fe6d4f0832346429f7ff203c4dbe" translate="yes" xml:space="preserve">
          <source>White Square With Vertical Bisecting Line</source>
          <target state="translated">垂直二等分線の白い正方形</target>
        </trans-unit>
        <trans-unit id="634d0a78d841ec0b40e03be702c56baf75674da8" translate="yes" xml:space="preserve">
          <source>White Star</source>
          <target state="translated">ホワイトスター</target>
        </trans-unit>
        <trans-unit id="059206764751f0f85f8e29888baea1aba1f8ee13" translate="yes" xml:space="preserve">
          <source>White Sun With Rays</source>
          <target state="translated">レイズの白い太陽</target>
        </trans-unit>
        <trans-unit id="1224c9826c7ff52b9fa1a2c1f96b20f15f4f5a00" translate="yes" xml:space="preserve">
          <source>White Trapezium</source>
          <target state="translated">白台形</target>
        </trans-unit>
        <trans-unit id="2db4ec41a4066aee4d15a98eb10d2e169c42101a" translate="yes" xml:space="preserve">
          <source>White Triangle Containing Small White Triangle</source>
          <target state="translated">小さな白い三角形を含む白い三角形</target>
        </trans-unit>
        <trans-unit id="07c000d04b8d0ed25a0985fd7cb107f60bb49aab" translate="yes" xml:space="preserve">
          <source>White Up Pointing Backhand Index</source>
          <target state="translated">ホワイトアップポインティングバックハンドインデックス</target>
        </trans-unit>
        <trans-unit id="c0825f3e41b65ad4e04d89a05f1a919af7180270" translate="yes" xml:space="preserve">
          <source>White Up Pointing Index</source>
          <target state="translated">ホワイトアップポインティングインデックス</target>
        </trans-unit>
        <trans-unit id="c739eac64ca9f680aa4858b15393910c507a241b" translate="yes" xml:space="preserve">
          <source>White Up-Pointing Small Triangle / White Up Pointing Small Triangle</source>
          <target state="translated">ホワイトアップポインティングスモールトライアングル/ホワイトアップポインティングスモールトライアングル</target>
        </trans-unit>
        <trans-unit id="2c2fafe73198844e99d5803401863be888da05ec" translate="yes" xml:space="preserve">
          <source>White Up-Pointing Triangle / White Up Pointing Triangle</source>
          <target state="translated">ホワイトアップポインティングトライアングル/ホワイトアップポインティングトライアングル</target>
        </trans-unit>
        <trans-unit id="b322ae097e5df051502f9578e5e4927b9661297e" translate="yes" xml:space="preserve">
          <source>White Up-Pointing Triangle With Dot / White Up Pointing Triangle With Dot</source>
          <target state="translated">ドットが付いている白い上向き三角形/ドットが付いている白い上向き三角形</target>
        </trans-unit>
        <trans-unit id="a0d24f6c4921190b94a3c24ff9acc8802c79083a" translate="yes" xml:space="preserve">
          <source>White Vertical Ellipse</source>
          <target state="translated">白の縦長楕円</target>
        </trans-unit>
        <trans-unit id="b6e53c0193060ce68c08e8717dafe1ff48bba21f" translate="yes" xml:space="preserve">
          <source>White Vertical Rectangle</source>
          <target state="translated">白の縦長長方形</target>
        </trans-unit>
        <trans-unit id="f4a3ad9816239183ef5bd3d0d3228e167207e61a" translate="yes" xml:space="preserve">
          <source>White Very Small Square</source>
          <target state="translated">白の非常に小さい正方形</target>
        </trans-unit>
        <trans-unit id="f7e1fe3853c28a0fe97ed3cd954b7712a00f380f" translate="yes" xml:space="preserve">
          <source>Why are my Julia benchmarks for linear algebra operations different from other languages?</source>
          <target state="translated">私のJuliaの線形代数演算のベンチマークが他の言語と異なるのはなぜですか?</target>
        </trans-unit>
        <trans-unit id="4bbb029eb21510032c8af609c080a79c369b7dce" translate="yes" xml:space="preserve">
          <source>Why do concurrent writes to the same stream result in inter-mixed output?</source>
          <target state="translated">なぜ同じストリームへの同時書き込みでは、混在出力が発生するのですか?</target>
        </trans-unit>
        <trans-unit id="1b4aae83fbf8014ab13afea081bebec6ec7f0b9d" translate="yes" xml:space="preserve">
          <source>Why does &lt;code&gt;x += y&lt;/code&gt; allocate memory when &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are arrays?</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; が配列の場合、なぜ &lt;code&gt;x += y&lt;/code&gt; はメモリを割り当てるのですか？</target>
        </trans-unit>
        <trans-unit id="00096e7a6fdbbe783ffa3d87f87fff2daaa46322" translate="yes" xml:space="preserve">
          <source>Why does Julia give a &lt;code&gt;DomainError&lt;/code&gt; for certain seemingly-sensible operations?</source>
          <target state="translated">Juliaが一見賢明な操作に &lt;code&gt;DomainError&lt;/code&gt; を返すのはなぜですか？</target>
        </trans-unit>
        <trans-unit id="2e029a53e5754836ebc5f2accd6987b7ec664e47" translate="yes" xml:space="preserve">
          <source>Why does Julia use &lt;code&gt;*&lt;/code&gt; for string concatenation? Why not &lt;code&gt;+&lt;/code&gt; or something else?</source>
          <target state="translated">Julia が文字列連結に &lt;code&gt;*&lt;/code&gt; を使用するのはなぜですか？なぜ &lt;code&gt;+&lt;/code&gt; か他に何かありませんか？</target>
        </trans-unit>
        <trans-unit id="3e93bc1af1398ad92317ee65e0617d4980dd38e8" translate="yes" xml:space="preserve">
          <source>Why does Julia use native machine integer arithmetic?</source>
          <target state="translated">なぜジュリアはネイティブマシンの整数演算を使うのか?</target>
        </trans-unit>
        <trans-unit id="30a4da2d9f0375ec9c7d6aacf65987f1f3472c14" translate="yes" xml:space="preserve">
          <source>Why doesn't it just work like in files everywhere? And maybe skip the warning?</source>
          <target state="translated">なぜそれはどこでもファイルのように動作しないのですか?あと、警告をスキップしてくれないかな?</target>
        </trans-unit>
        <trans-unit id="6c4ad57f8165d0120271f7fec6b3f8432a298f09" translate="yes" xml:space="preserve">
          <source>Why doesn't it just work like the REPL everywhere?</source>
          <target state="translated">なんでどこでもREPLみたいに動かないの?</target>
        </trans-unit>
        <trans-unit id="fcf72338b56ad52314b2887dbaf69181cccb526f" translate="yes" xml:space="preserve">
          <source>Why don't you compile Matlab/Python/R/&amp;hellip; code to Julia?</source>
          <target state="translated">Matlab / Python / R /&amp;hellip;コードをJuliaにコンパイルしてみませんか？</target>
        </trans-unit>
        <trans-unit id="d2e5203fdb2516ab2f5c1deafbcf63cb32540c19" translate="yes" xml:space="preserve">
          <source>Why round to the first day in July, even though it is month 7 (an odd number)? The key is that months are 1-indexed (the first month is assigned 1), unlike hours, minutes, seconds, and milliseconds (the first of which are assigned 0).</source>
          <target state="translated">7月は7月(奇数)なのに、なぜ最初の日に丸めてしまうのでしょうか?重要なのは、月は時、分、秒、ミリ秒(最初に0が割り当てられている)とは異なり、1インデックス(最初の月は1が割り当てられている)であることです。</target>
        </trans-unit>
        <trans-unit id="48ea3ab16df0e58995a85e5e959893106086f0d6" translate="yes" xml:space="preserve">
          <source>Wind Chime</source>
          <target state="translated">風鈴</target>
        </trans-unit>
        <trans-unit id="983f638e64348ade35b4611d310d66c9145e3880" translate="yes" xml:space="preserve">
          <source>Wine Glass</source>
          <target state="translated">ワイングラス</target>
        </trans-unit>
        <trans-unit id="abc7fe153bc9746ac855f60d74d0d8123c77b393" translate="yes" xml:space="preserve">
          <source>Winking Face</source>
          <target state="translated">ウインクフェイス</target>
        </trans-unit>
        <trans-unit id="581843091f10902932335f64cd6f3a2c9f96a3d3" translate="yes" xml:space="preserve">
          <source>With &lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;s, serializing an already fetched &lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; to a different node also sends the value since the original remote store may have collected the value by this time.</source>
          <target state="translated">&lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt; sは、既にフェッチされたシリアル化&lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;別のノードにも、元のリモートストアはこの時点で値を収集している可能性があるため値を送信します。</target>
        </trans-unit>
        <trans-unit id="75533720d520fbee81b81c1ba5dc661047b34eea" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;@macroexpand&lt;/code&gt; the expression expands where &lt;code&gt;@macroexpand&lt;/code&gt; appears in the code (module &lt;code&gt;M&lt;/code&gt; in the example). With &lt;code&gt;macroexpand&lt;/code&gt; the expression expands in the module given as the first argument.</source>
          <target state="translated">&lt;code&gt;@macroexpand&lt;/code&gt; 式膨張 &lt;code&gt;@macroexpand&lt;/code&gt; コード（モジュールに表示される &lt;code&gt;M&lt;/code&gt; 例で）。 &lt;code&gt;macroexpand&lt;/code&gt; は式は、最初の引数として与えられたモジュールに展開します。</target>
        </trans-unit>
        <trans-unit id="dc21453b1fccd61e9c2a2caa2cd4c8a04c421020" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;batch_size&lt;/code&gt; defined, the mapping function needs to be changed to accept an array of argument tuples and return an array of results. &lt;code&gt;map&lt;/code&gt; is used in the modified mapping function to achieve this.</source>
          <target state="translated">&lt;code&gt;batch_size&lt;/code&gt; 定義され、マッピング関数は、引数タプルの配列を受け入れ、結果の配列を返すように変更する必要があります。 &lt;code&gt;map&lt;/code&gt; は、変更されたマッピング関数でmapを使用して実現されます。</target>
        </trans-unit>
        <trans-unit id="de6d6c8d7c2f6e5e8324e5783051c41a94f0d494" translate="yes" xml:space="preserve">
          <source>With &lt;code&gt;ntasks=2&lt;/code&gt; all elements are processed in 2 tasks.</source>
          <target state="translated">&lt;code&gt;ntasks=2&lt;/code&gt; つの、すべての要素が2つのタスクで処理されています。</target>
        </trans-unit>
        <trans-unit id="c2a8e1e2f0076f36b7212590a0b6a34603804f4e" translate="yes" xml:space="preserve">
          <source>With a &lt;code&gt;waitfor&lt;/code&gt; value of 0, the call returns immediately with the workers scheduled for removal in a different task. The scheduled &lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; object is returned. The user should call &lt;a href=&quot;../../base/parallel/index#Base.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; on the task before invoking any other parallel calls.</source>
          <target state="translated">&lt;code&gt;waitfor&lt;/code&gt; 0の値は、すぐに別のタスクで削除される予定の労働者との通話に戻ります。スケジュールされた&lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt; &lt;code&gt;Task&lt;/code&gt; &lt;/a&gt;オブジェクトが返されます。ユーザーは、他の並列呼び出しを呼び出す前に、タスクで&lt;a href=&quot;../../base/parallel/index#Base.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt;を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="bded26b5569676e9053ab54c2f9e25c3c3e79857" translate="yes" xml:space="preserve">
          <source>With only &lt;a href=&quot;../../base/collections/index#Base.iterate&quot;&gt;&lt;code&gt;iterate&lt;/code&gt;&lt;/a&gt; definition, the &lt;code&gt;Squares&lt;/code&gt; type is already pretty powerful. We can iterate over all the elements:</source>
          <target state="translated">&lt;a href=&quot;../../base/collections/index#Base.iterate&quot;&gt; &lt;code&gt;iterate&lt;/code&gt; &lt;/a&gt;定義のみで、 &lt;code&gt;Squares&lt;/code&gt; タイプはすでにかなり強力です。すべての要素を繰り返し処理できます。</target>
        </trans-unit>
        <trans-unit id="77f7b875de446935bd4cc6f1a7d35fb26e7293e3" translate="yes" xml:space="preserve">
          <source>With such a declaration, it is acceptable to use any type that is a subtype of &lt;a href=&quot;../../base/numbers/index#Core.Real&quot;&gt;&lt;code&gt;Real&lt;/code&gt;&lt;/a&gt; in place of &lt;code&gt;T&lt;/code&gt;, but not types that are not subtypes of &lt;code&gt;Real&lt;/code&gt;:</source>
          <target state="translated">そのようなAの宣言で、のサブタイプである任意の型を使用することが可能です&lt;a href=&quot;../../base/numbers/index#Core.Real&quot;&gt; &lt;code&gt;Real&lt;/code&gt; &lt;/a&gt;の代わりに &lt;code&gt;T&lt;/code&gt; を、ではないのサブタイプではありません種類の &lt;code&gt;Real&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="fefc09d1374ace4b2cc6f62853ea9d51faf15a8a" translate="yes" xml:space="preserve">
          <source>With the &lt;code&gt;do&lt;/code&gt; block syntax, it helps to check the documentation or implementation to know how the arguments of the user function are initialized.</source>
          <target state="translated">&lt;code&gt;do&lt;/code&gt; ブロックの構文は、ユーザ関数の引数が初期化されている方法を知るためのマニュアルまたは実装をチェックするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="503bb222a1bcd305845bfa8706594c057e11f9bc" translate="yes" xml:space="preserve">
          <source>With this declaration, &lt;code&gt;Pointy{T}&lt;/code&gt; is a distinct abstract type for each type or integer value of &lt;code&gt;T&lt;/code&gt;. As with parametric composite types, each such instance is a subtype of &lt;code&gt;Pointy&lt;/code&gt;:</source>
          <target state="translated">この宣言で、 &lt;code&gt;Pointy{T}&lt;/code&gt; 、各タイプのまたは整数値のために別個の抽象タイプである &lt;code&gt;T&lt;/code&gt; 。パラメトリック複合型と同様に、そのような各インスタンスは &lt;code&gt;Pointy&lt;/code&gt; のサブタイプです。</target>
        </trans-unit>
        <trans-unit id="7a216c8e2bca2ef6b82975092df1fd3a30bc77dd" translate="yes" xml:space="preserve">
          <source>With this definition, the function can be called with either one, two or three arguments, and &lt;code&gt;1&lt;/code&gt; is automatically passed when any of the arguments is not specified:</source>
          <target state="translated">この定義では、関数は1つ、2つ、または3つの引数で呼び出すことができ、引数のいずれかが指定されていない場合は &lt;code&gt;1&lt;/code&gt; が自動的に渡されます。</target>
        </trans-unit>
        <trans-unit id="447b8dfb65dcbfcf6fcad2ab9a9aa921f47048b2" translate="yes" xml:space="preserve">
          <source>With this definition, the function can be called with either one, two or three arguments, and &lt;code&gt;1&lt;/code&gt; is automatically passed when only one or two of the arguments are specified:</source>
          <target state="translated">この定義では、関数は1つ、2つ、または3つの引数で呼び出すことができ、 &lt;code&gt;1&lt;/code&gt; つまたは2つの引数のみが指定されると、1が自動的に渡されます。</target>
        </trans-unit>
        <trans-unit id="5f10b122d0ba4c967956b4a13f71e5b19ab4662e" translate="yes" xml:space="preserve">
          <source>With this syntax, iterables may still refer to outer loop variables; e.g. &lt;code&gt;for i = 1:n, j = 1:i&lt;/code&gt; is valid. However a &lt;code&gt;break&lt;/code&gt; statement inside such a loop exits the entire nest of loops, not just the inner one. Both variables (&lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;) are set to their current iteration values each time the inner loop runs. Therefore, assignments to &lt;code&gt;i&lt;/code&gt; will not be visible to subsequent iterations:</source>
          <target state="translated">この構文では、反復可能オブジェクトは依然として外部ループ変数を参照する場合があります。たとえば &lt;code&gt;for i = 1:n, j = 1:i&lt;/code&gt; が有効です。ただし、そのようなループ内の &lt;code&gt;break&lt;/code&gt; ステートメントは、内側のループだけでなく、ループのネスト全体を終了します。両方の変数（ &lt;code&gt;i&lt;/code&gt; および &lt;code&gt;j&lt;/code&gt; ）は、内部ループが実行されるたびに現在の反復値に設定されます。したがって、 &lt;code&gt;i&lt;/code&gt; への割り当ては、以降の反復では表示されません。</target>
        </trans-unit>
        <trans-unit id="974560762d7f9d8809deddf944b7bb6130508cf8" translate="yes" xml:space="preserve">
          <source>Without keyword arguments, &lt;code&gt;x&lt;/code&gt; is rounded to an integer value, returning a value of type &lt;code&gt;T&lt;/code&gt;, or of the same type of &lt;code&gt;x&lt;/code&gt; if no &lt;code&gt;T&lt;/code&gt; is provided. An &lt;a href=&quot;../base/index#Core.InexactError&quot;&gt;&lt;code&gt;InexactError&lt;/code&gt;&lt;/a&gt; will be thrown if the value is not representable by &lt;code&gt;T&lt;/code&gt;, similar to &lt;a href=&quot;../base/index#Base.convert&quot;&gt;&lt;code&gt;convert&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">キーワード引数がない場合、 &lt;code&gt;x&lt;/code&gt; は整数値に丸められ、 &lt;code&gt;T&lt;/code&gt; 型、または &lt;code&gt;T&lt;/code&gt; が指定されていない場合は同じ型の &lt;code&gt;x&lt;/code&gt; の値を返します。アン&lt;a href=&quot;../base/index#Core.InexactError&quot;&gt; &lt;code&gt;InexactError&lt;/code&gt; は&lt;/a&gt;値がによって表現できない場合にスローされます &lt;code&gt;T&lt;/code&gt; と同様に、&lt;a href=&quot;../base/index#Base.convert&quot;&gt; &lt;code&gt;convert&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8b32189c1c5c8ca5b8d9a0a455eb12f4d1954923" translate="yes" xml:space="preserve">
          <source>Without parentheses, the expression &lt;code&gt;f&lt;/code&gt; refers to the function object, and can be passed around like any other value:</source>
          <target state="translated">括弧なしで、式 &lt;code&gt;f&lt;/code&gt; は関数オブジェクトを参照し、他の値と同じように渡すことができます。</target>
        </trans-unit>
        <trans-unit id="3aa3290590d6a6eeac6efebb9b9654e8c0a3a248" translate="yes" xml:space="preserve">
          <source>Without parentheses, the expression &lt;code&gt;f&lt;/code&gt; refers to the function object, and can be passed around like any value:</source>
          <target state="translated">括弧がない場合、式 &lt;code&gt;f&lt;/code&gt; は関数オブジェクトを参照し、任意の値のように渡すことができます。</target>
        </trans-unit>
        <trans-unit id="057c67438e0b378de20c837094077aeb4442b98f" translate="yes" xml:space="preserve">
          <source>Without the &lt;code&gt;break&lt;/code&gt; keyword, the above &lt;code&gt;while&lt;/code&gt; loop would never terminate on its own, and the &lt;code&gt;for&lt;/code&gt; loop would iterate up to 1000. These loops are both exited early by using &lt;code&gt;break&lt;/code&gt;.</source>
          <target state="translated">せずに &lt;code&gt;break&lt;/code&gt; キーワード、上記 &lt;code&gt;while&lt;/code&gt; ループが独自に終了することはない、と &lt;code&gt;for&lt;/code&gt; ループが1000まで繰り返すでしょうこれらのループは、両方使用することにより、早期に終了されている &lt;code&gt;break&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a346da9a68b13b25a9f7cb2fd78eb7978ee0a04a" translate="yes" xml:space="preserve">
          <source>Wolf Face</source>
          <target state="translated">ウルフフェイス</target>
        </trans-unit>
        <trans-unit id="1cb72b9108626d8ac566eba64409dacf9a40b11e" translate="yes" xml:space="preserve">
          <source>Woman</source>
          <target state="translated">Woman</target>
        </trans-unit>
        <trans-unit id="6dfb7f3a8d49e9c60ed61f82d18ca8ac2838458c" translate="yes" xml:space="preserve">
          <source>Woman With Bunny Ears</source>
          <target state="translated">うさ耳を持つ女性</target>
        </trans-unit>
        <trans-unit id="5a6394d24a5279ce017885520fdb48ffc70f08d4" translate="yes" xml:space="preserve">
          <source>Womans Boots</source>
          <target state="translated">レディースブーツ</target>
        </trans-unit>
        <trans-unit id="7d4124fc5a81619b81859db6f91943ca5bb45e8e" translate="yes" xml:space="preserve">
          <source>Womans Clothes</source>
          <target state="translated">婦人服</target>
        </trans-unit>
        <trans-unit id="ce5f716b57b265b131a17fffd163abf4c36c842b" translate="yes" xml:space="preserve">
          <source>Womans Hat</source>
          <target state="translated">レディースハット</target>
        </trans-unit>
        <trans-unit id="85aca00c09071a52aba584e53b36018f9b894c55" translate="yes" xml:space="preserve">
          <source>Womans Sandal</source>
          <target state="translated">レディースサンダル</target>
        </trans-unit>
        <trans-unit id="b78031fbb7d05c9d0ff329bbff3f7a6447a90388" translate="yes" xml:space="preserve">
          <source>Womens Symbol</source>
          <target state="translated">レディースシンボル</target>
        </trans-unit>
        <trans-unit id="57ecdc70b504efbceec0cd8d34cea25e9063a812" translate="yes" xml:space="preserve">
          <source>Word Joiner</source>
          <target state="translated">ワードジョイナー</target>
        </trans-unit>
        <trans-unit id="c3edbbb14bf867b6bece4274440ffdbbeba538be" translate="yes" xml:space="preserve">
          <source>Word separation can be indicated by underscores (&lt;code&gt;'_'&lt;/code&gt;), but use of underscores is discouraged unless the name would be hard to read otherwise.</source>
          <target state="translated">単語の区切りはアンダースコア（ &lt;code&gt;'_'&lt;/code&gt; ）で示すことができますが、名前が他の方法では読みにくい場合を除き、アンダースコアの使用はお勧めしません。</target>
        </trans-unit>
        <trans-unit id="719f23a34b446f1c2b8e5447594bf9f94eb261ef" translate="yes" xml:space="preserve">
          <source>Workflow Tips</source>
          <target state="translated">ワークフローのヒント</target>
        </trans-unit>
        <trans-unit id="72cf6cd09a850a2cf4790c3438a493e200f5281f" translate="yes" xml:space="preserve">
          <source>Working with &lt;code&gt;Broadcasted&lt;/code&gt; objects</source>
          <target state="translated">作業 &lt;code&gt;Broadcasted&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="f1554531a14293e9b5f2d548951c2491fa5894fd" translate="yes" xml:space="preserve">
          <source>Working with Arrays</source>
          <target state="translated">配列を使った作業</target>
        </trans-unit>
        <trans-unit id="83cf1b02634def5b23b868974db450a895a02f92" translate="yes" xml:space="preserve">
          <source>Working with Files</source>
          <target state="translated">ファイルを使った作業</target>
        </trans-unit>
        <trans-unit id="e561077dd059f1516770b93796c56838b6b06ebe" translate="yes" xml:space="preserve">
          <source>Working with Test Sets</source>
          <target state="translated">テストセットでの作業</target>
        </trans-unit>
        <trans-unit id="c94118dce35f5d3b4f01c86d6cba1023a7883418" translate="yes" xml:space="preserve">
          <source>Worried Face</source>
          <target state="translated">心配顔</target>
        </trans-unit>
        <trans-unit id="643f9be452aad16c5d4b635ba25e01524af427f5" translate="yes" xml:space="preserve">
          <source>Wrap a &lt;code&gt;Vector&lt;/code&gt; of exceptions thrown by a &lt;a href=&quot;../parallel/index#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; (e.g. generated from a remote worker over a channel or an asynchronously executing local I/O write or a remote worker under &lt;code&gt;pmap&lt;/code&gt;) with information about the series of exceptions. For example, if a group of workers are executing several tasks, and multiple workers fail, the resulting &lt;code&gt;CompositeException&lt;/code&gt; will contain a &quot;bundle&quot; of information from each worker indicating where and why the exception(s) occurred.</source>
          <target state="translated">一連の例外に関する情報を使用して、&lt;a href=&quot;../parallel/index#Core.Task&quot;&gt; &lt;code&gt;Task&lt;/code&gt; &lt;/a&gt;によってスローされた例外の &lt;code&gt;Vector&lt;/code&gt; をラップします（たとえば、チャネルを介してリモートワーカーから生成されるか、非同期に実行されるローカルI / O書き込みまたは &lt;code&gt;pmap&lt;/code&gt; の下でリモートワーカー）たとえば、ワーカーのグループがいくつかのタスクを実行していて、複数のワーカーが失敗した場合、結果の &lt;code&gt;CompositeException&lt;/code&gt; には、例外が発生した場所と理由を示す各ワーカーからの情報の「バンドル」が含まれます。</target>
        </trans-unit>
        <trans-unit id="ec473d4d05e151c4b0eb94d5d4eceaf44cd4f086" translate="yes" xml:space="preserve">
          <source>Wrap a Julia &lt;code&gt;Array&lt;/code&gt; object around the data at the address given by &lt;code&gt;pointer&lt;/code&gt;, without making a copy. The pointer element type &lt;code&gt;T&lt;/code&gt; determines the array element type. &lt;code&gt;dims&lt;/code&gt; is either an integer (for a 1d array) or a tuple of the array dimensions. &lt;code&gt;own&lt;/code&gt; optionally specifies whether Julia should take ownership of the memory, calling &lt;code&gt;free&lt;/code&gt; on the pointer when the array is no longer referenced.</source>
          <target state="translated">コピーを作成せずに、 &lt;code&gt;pointer&lt;/code&gt; で指定されたアドレスのデータをJulia &lt;code&gt;Array&lt;/code&gt; オブジェクトでラップします。ポインター要素タイプ &lt;code&gt;T&lt;/code&gt; は、配列要素タイプを決定します。 &lt;code&gt;dims&lt;/code&gt; は、整数（1d配列の場合）または配列次元のタプルです。 &lt;code&gt;own&lt;/code&gt; はオプションで、Juliaがメモリの所有権を取得するかどうかを指定し、配列が参照されなくなったときにポインタで &lt;code&gt;free&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="bb11cd0bd69cc50df511cf85ddf1cd4d48d9cd04" translate="yes" xml:space="preserve">
          <source>Wrap an expression in a &lt;a href=&quot;#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; and add it to the local machine's scheduler queue.</source>
          <target state="translated">式を&lt;a href=&quot;#Core.Task&quot;&gt; &lt;code&gt;Task&lt;/code&gt; &lt;/a&gt;ラップし、ローカルマシンのスケジューラキューに追加します。</target>
        </trans-unit>
        <trans-unit id="5073be58d66f221818fcea45c57ca978e66b8268" translate="yes" xml:space="preserve">
          <source>Wrap an expression in a &lt;a href=&quot;#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; without executing it, and return the &lt;a href=&quot;#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt;. This only creates a task, and does not run it.</source>
          <target state="translated">中での発現ラップ&lt;a href=&quot;#Core.Task&quot;&gt; &lt;code&gt;Task&lt;/code&gt; &lt;/a&gt;、それを実行せず、そして返す&lt;a href=&quot;#Core.Task&quot;&gt; &lt;code&gt;Task&lt;/code&gt; &lt;/a&gt;。これはタスクを作成するだけで、実行しません。</target>
        </trans-unit>
        <trans-unit id="a3a85a4dc41c5c5208ca7b5a5f20305e0dda2cfb" translate="yes" xml:space="preserve">
          <source>Wrap your function in a module:</source>
          <target state="translated">関数をモジュールで囲みます。</target>
        </trans-unit>
        <trans-unit id="0c727aa02984e9265ed720a0cc477eba7864a0a0" translate="yes" xml:space="preserve">
          <source>Wrapped Present</source>
          <target state="translated">ラッピングプレゼント</target>
        </trans-unit>
        <trans-unit id="4c299bd23d0a4bc5197aa857238f132545f5def2" translate="yes" xml:space="preserve">
          <source>Wrapper around &lt;a href=&quot;https://libgit2.org/libgit2/#HEAD/group/commit/git_commit_create&quot;&gt;&lt;code&gt;git_commit_create&lt;/code&gt;&lt;/a&gt;. Create a commit in the repository &lt;code&gt;repo&lt;/code&gt;. &lt;code&gt;msg&lt;/code&gt; is the commit message. Return the OID of the new commit.</source>
          <target state="translated">&lt;a href=&quot;https://libgit2.org/libgit2/#HEAD/group/commit/git_commit_create&quot;&gt; &lt;code&gt;git_commit_create&lt;/code&gt; の&lt;/a&gt;ラッパー。リポジトリにコミット作成し &lt;code&gt;repo&lt;/code&gt; 。 &lt;code&gt;msg&lt;/code&gt; はコミットメッセージです。新しいコミットのOIDを返します。</target>
        </trans-unit>
        <trans-unit id="914406aad26fbb402914377aadad7a61529e87cf" translate="yes" xml:space="preserve">
          <source>Wrapper types</source>
          <target state="translated">ラッパーの種類</target>
        </trans-unit>
        <trans-unit id="7da2bdafb830ea4034b4a9f75526a715fd0d86d0" translate="yes" xml:space="preserve">
          <source>Wreath Product</source>
          <target state="translated">リース製品</target>
        </trans-unit>
        <trans-unit id="60a77f2daf0e1f4113ff076604e19f8a61f8d079" translate="yes" xml:space="preserve">
          <source>Wrench</source>
          <target state="translated">Wrench</target>
        </trans-unit>
        <trans-unit id="9f4443f6abc474ecd391c80029564af8642f98e3" translate="yes" xml:space="preserve">
          <source>Write &quot;type-stable&quot; functions</source>
          <target state="translated">型が安定している」関数を書く</target>
        </trans-unit>
        <trans-unit id="108ebb82b60e8c92a8619b85402ca125571054b0" translate="yes" xml:space="preserve">
          <source>Write &lt;a href=&quot;../../base/base/index#Base.SimdLoop.@simd&quot;&gt;&lt;code&gt;@simd&lt;/code&gt;&lt;/a&gt; in front of &lt;code&gt;for&lt;/code&gt; loops to promise that the iterations are independent and may be reordered. Note that in many cases, Julia can automatically vectorize code without the &lt;code&gt;@simd&lt;/code&gt; macro; it is only beneficial in cases where such a transformation would otherwise be illegal, including cases like allowing floating-point re-associativity and ignoring dependent memory accesses (&lt;code&gt;@simd ivdep&lt;/code&gt;). Again, be very careful when asserting &lt;code&gt;@simd&lt;/code&gt; as erroneously annotating a loop with dependent iterations may result in unexpected results. In particular, note that &lt;code&gt;setindex!&lt;/code&gt; on some &lt;code&gt;AbstractArray&lt;/code&gt; subtypes is inherently dependent upon iteration order. &lt;strong&gt;This feature is experimental&lt;/strong&gt; and could change or disappear in future versions of Julia.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; ループの前に&lt;a href=&quot;../../base/base/index#Base.SimdLoop.@simd&quot;&gt; &lt;code&gt;@simd&lt;/code&gt; &lt;/a&gt;を記述して、反復が独立していて順序を変更できることを約束します。多くの場合、Juliaは &lt;code&gt;@simd&lt;/code&gt; マクロがなくてもコードを自動的にベクトル化できることに注意してください。これは、浮動小数点の再関連付けを許可したり、依存するメモリアクセスを無視したり（ &lt;code&gt;@simd ivdep&lt;/code&gt; ）する場合を含め、このような変換が違法となる場合にのみ有効です。繰り返しますが、依存する反復でループに誤って注釈を付けると予期しない結果が生じる可能性があるため、 &lt;code&gt;@simd&lt;/code&gt; をアサートするときは十分に注意してください。特に、 &lt;code&gt;setindex!&lt;/code&gt; 一部の &lt;code&gt;AbstractArray&lt;/code&gt; サブタイプでは、本質的に反復順序に依存しています。&lt;strong&gt;この機能は実験的なもので&lt;/strong&gt;あり、Juliaの将来のバージョンでは変更または削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="feda5417424a49ab311d7ff404b0540a63818aab" translate="yes" xml:space="preserve">
          <source>Write &lt;code&gt;A&lt;/code&gt; (a vector, matrix, or an iterable collection of iterable rows) as text to &lt;code&gt;f&lt;/code&gt; (either a filename string or an &lt;code&gt;IO&lt;/code&gt; stream) using the given delimiter &lt;code&gt;delim&lt;/code&gt; (which defaults to tab, but can be any printable Julia object, typically a &lt;code&gt;Char&lt;/code&gt; or &lt;code&gt;AbstractString&lt;/code&gt;).</source>
          <target state="translated">指定された区切り記号 &lt;code&gt;delim&lt;/code&gt; （デフォルトはタブですが、通常は印刷可能なJuliaオブジェクト、通常はタブ）を使用して、 &lt;code&gt;A&lt;/code&gt; （ベクトル、行列、または反復可能な行の反復可能なコレクション）をテキストとして &lt;code&gt;f&lt;/code&gt; （ファイル名文字列または &lt;code&gt;IO&lt;/code&gt; ストリーム）に書き込みます &lt;code&gt;Char&lt;/code&gt; または &lt;code&gt;AbstractString&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="775f113932a5efeffdda634c47beb3eed1ff2fe8" translate="yes" xml:space="preserve">
          <source>Write Permission</source>
          <target state="translated">書き込み許可</target>
        </trans-unit>
        <trans-unit id="cb1bb77575fa4409af2eee4cd439da1e073d5da8" translate="yes" xml:space="preserve">
          <source>Write a number in REPL and press &lt;code&gt;^Q&lt;/code&gt; to open editor at corresponding stackframe or method</source>
          <target state="translated">REPLに数値を記述し、 &lt;code&gt;^Q&lt;/code&gt; を押して、対応するスタックフレームまたはメソッドでエディターを開きます</target>
        </trans-unit>
        <trans-unit id="94dd4ad05923ad8ccb38018f26838043a0492298" translate="yes" xml:space="preserve">
          <source>Write a small function &lt;code&gt;op&lt;/code&gt; that expresses the set of operations performed by the kernel of the algorithm.</source>
          <target state="translated">アルゴリズムのカーネルによって実行される一連の操作を表す小さな関数 &lt;code&gt;op&lt;/code&gt; を記述します。</target>
        </trans-unit>
        <trans-unit id="597661e73835c59aca5441f10be576b8d382a273" translate="yes" xml:space="preserve">
          <source>Write a text representation of a value &lt;code&gt;x&lt;/code&gt; to the output stream &lt;code&gt;io&lt;/code&gt;. New types &lt;code&gt;T&lt;/code&gt; should overload &lt;code&gt;show(io::IO, x::T)&lt;/code&gt;. The representation used by &lt;code&gt;show&lt;/code&gt; generally includes Julia-specific formatting and type information, and should be parseable Julia code when possible.</source>
          <target state="translated">値 &lt;code&gt;x&lt;/code&gt; のテキスト表現を出力ストリーム &lt;code&gt;io&lt;/code&gt; に書き込みます。新しいタイプ &lt;code&gt;T&lt;/code&gt; は、 &lt;code&gt;show(io::IO, x::T)&lt;/code&gt; をオーバーロードする必要があります。 &lt;code&gt;show&lt;/code&gt; で使用される表現には、通常、Julia固有のフォーマットとタイプ情報が含まれており、可能な場合は解析可能なJuliaコードである必要があります。</target>
        </trans-unit>
        <trans-unit id="873f569b5d6881c314f347be4557cdf37101715d" translate="yes" xml:space="preserve">
          <source>Write an arbitrary value to a stream in an opaque format, such that it can be read back by &lt;a href=&quot;#Serialization.deserialize&quot;&gt;&lt;code&gt;deserialize&lt;/code&gt;&lt;/a&gt;. The read-back value will be as identical as possible to the original. In general, this process will not work if the reading and writing are done by different versions of Julia, or an instance of Julia with a different system image. &lt;code&gt;Ptr&lt;/code&gt; values are serialized as all-zero bit patterns (&lt;code&gt;NULL&lt;/code&gt;).</source>
          <target state="translated">それによってリードバックすることができるように、不透明なフォーマットでストリームに任意の値を書き込む&lt;a href=&quot;#Serialization.deserialize&quot;&gt; &lt;code&gt;deserialize&lt;/code&gt; &lt;/a&gt;。リードバック値は、元の値と可能な限り同じになります。一般に、このプロセスは、異なるバージョンのJulia、または別のシステムイメージを持つJuliaのインスタンスによって読み取りと書き込みが行われる場合は機能しません。 &lt;code&gt;Ptr&lt;/code&gt; 値は、すべてゼロのビットパターン（ &lt;code&gt;NULL&lt;/code&gt; ）としてシリアル化されます。</target>
        </trans-unit>
        <trans-unit id="2cc631af387b0b65068ed32b69656c5387524ad1" translate="yes" xml:space="preserve">
          <source>Write an identifying header to the specified serializer. The header consists of 8 bytes as follows:</source>
          <target state="translated">指定されたシリアライザに識別ヘッダを書き込みます。ヘッダは以下のように8バイトで構成されています。</target>
        </trans-unit>
        <trans-unit id="2c562290cfa3ebc3ed60533e7ccb58cb5506dbdf" translate="yes" xml:space="preserve">
          <source>Write an informative text representation of a value to the current output stream. New types should overload &lt;code&gt;show(io::IO, x)&lt;/code&gt; where the first argument is a stream. The representation used by &lt;code&gt;show&lt;/code&gt; generally includes Julia-specific formatting and type information.</source>
          <target state="translated">値の情報テキスト表現を現在の出力ストリームに書き込みます。新しい型は、最初の引数がストリームである &lt;code&gt;show(io::IO, x)&lt;/code&gt; をオーバーロードする必要があります。 &lt;code&gt;show&lt;/code&gt; で使用される表現には、通常、Julia固有のフォーマットおよびタイプ情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="cb2bbf69c8aaaca3e8ea4477fb12294ca0669ad1" translate="yes" xml:space="preserve">
          <source>Write functions with argument ordering similar to Julia Base</source>
          <target state="translated">Julia Baseと似たような引数順の関数を書く</target>
        </trans-unit>
        <trans-unit id="70a026cb8be32b7a74394524302a74d531860e33" translate="yes" xml:space="preserve">
          <source>Write functions, not just scripts</source>
          <target state="translated">スクリプトだけでなく関数を書く</target>
        </trans-unit>
        <trans-unit id="8434f9d9d28666de4a462912e8e0e307e3e65b92" translate="yes" xml:space="preserve">
          <source>Write the canonical binary representation of a value to the given I/O stream or file. Return the number of bytes written into the stream. See also &lt;a href=&quot;#Base.print&quot;&gt;&lt;code&gt;print&lt;/code&gt;&lt;/a&gt; to write a text representation (with an encoding that may depend upon &lt;code&gt;io&lt;/code&gt;).</source>
          <target state="translated">指定されたI / Oストリームまたはファイルに値の正規バイナリ表現を書き込みます。ストリームに書き込まれたバイト数を返します。（ &lt;code&gt;io&lt;/code&gt; に依存する可能性のあるエンコードを使用して）テキスト表現を書き込むには、&lt;a href=&quot;#Base.print&quot;&gt; &lt;code&gt;print&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="f504d192f85e8f747b7e397b2f6ba281860922fa" translate="yes" xml:space="preserve">
          <source>Write to &lt;code&gt;io&lt;/code&gt; (or to the default output stream &lt;a href=&quot;#Base.stdout&quot;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;io&lt;/code&gt; is not given) a canonical (un-decorated) text representation. The representation used by &lt;code&gt;print&lt;/code&gt; includes minimal formatting and tries to avoid Julia-specific details.</source>
          <target state="translated">&lt;code&gt;io&lt;/code&gt; （または &lt;code&gt;io&lt;/code&gt; が指定されていない場合はデフォルトの出力ストリーム&lt;a href=&quot;#Base.stdout&quot;&gt; &lt;code&gt;stdout&lt;/code&gt; &lt;/a&gt;）に、標準的な（装飾されていない）テキスト表現に書き込みます。 &lt;code&gt;print&lt;/code&gt; が使用する表現には最小限のフォーマットが含まれており、Julia固有の詳細を回避しようとします。</target>
        </trans-unit>
        <trans-unit id="e16e34e27c72e59ec455f0c0f1a3f2115cd3b225" translate="yes" xml:space="preserve">
          <source>Writing a function as many small definitions allows the compiler to directly call the most applicable code, or even inline it.</source>
          <target state="translated">関数を多くの小さな定義として記述することで、コンパイラは最も適用可能なコードを直接呼び出すことができ、インライン化することもできます。</target>
        </trans-unit>
        <trans-unit id="34e8aec81b31e6aaa5b50b350018faabd22de4c7" translate="yes" xml:space="preserve">
          <source>Writing binary broadcasting rules</source>
          <target state="translated">バイナリー放送のルールを書く</target>
        </trans-unit>
        <trans-unit id="97f498290acca274115f78b5edf4bcb344821f93" translate="yes" xml:space="preserve">
          <source>Writing code as a series of steps at the top level is a quick way to get started solving a problem, but you should try to divide a program into functions as soon as possible. Functions are more reusable and testable, and clarify what steps are being done and what their inputs and outputs are. Furthermore, code inside functions tends to run much faster than top level code, due to how Julia's compiler works.</source>
          <target state="translated">トップレベルで一連のステップとしてコードを書くことは、問題解決を始めるための手っ取り早い方法ですが、できるだけ早くプログラムを関数に分割するようにしましょう。関数の方が再利用性が高く、テストしやすく、どのようなステップが行われているのか、その入力と出力は何なのかを明確にします。さらに、関数の中のコードは、Julia のコンパイラがどのように動作するかによって、トップレベルのコードよりもはるかに速く実行される傾向があります。</target>
        </trans-unit>
        <trans-unit id="a484186f293d2862395499a0c5b61beb757d7d54" translate="yes" xml:space="preserve">
          <source>Writing log events to a file</source>
          <target state="translated">ログイベントをファイルに書き込む</target>
        </trans-unit>
        <trans-unit id="25744db574969e117a90b833b80467c34acec98d" translate="yes" xml:space="preserve">
          <source>Xor</source>
          <target state="translated">Xor</target>
        </trans-unit>
        <trans-unit id="f198e585f80c9955a647226ad90798053ac6ecf5" translate="yes" xml:space="preserve">
          <source>Yellow Heart</source>
          <target state="translated">イエローハート</target>
        </trans-unit>
        <trans-unit id="50b776c9e160796bdb426c1605a23b1af335b715" translate="yes" xml:space="preserve">
          <source>Yen Sign</source>
          <target state="translated">円記号</target>
        </trans-unit>
        <trans-unit id="2f53cab7d3c0dbe4951a04ff57f49550638bd4c8" translate="yes" xml:space="preserve">
          <source>You annotate the function declaration with the &lt;code&gt;@generated&lt;/code&gt; macro. This adds some information to the AST that lets the compiler know that this is a generated function.</source>
          <target state="translated">&lt;code&gt;@generated&lt;/code&gt; マクロを使用して関数宣言に注釈を付けます。これにより、ASTに情報が追加されます。これにより、コンパイラーはこれが生成された関数であることを認識できます。</target>
        </trans-unit>
        <trans-unit id="2bc8c1c8f5f11957d60869604a47850f7992e1dc" translate="yes" xml:space="preserve">
          <source>You are entirely responsible for ensuring that your program is data-race free, and nothing promised here can be assumed if you do not observe that requirement. The observed results may be highly unintuitive.</source>
          <target state="translated">あなたのプログラムがデータレースフリーであることを保証するのはあなたの全責任であり、その要件を守らなければ、ここで約束されたことは何も想定できません。観察された結果は非常に直感的ではないかもしれません。</target>
        </trans-unit>
        <trans-unit id="2fa58379787fb3328d4b2c9b156cc9d4992b0523" translate="yes" xml:space="preserve">
          <source>You can access the field values of a composite object using the traditional &lt;code&gt;foo.bar&lt;/code&gt; notation:</source>
          <target state="translated">従来の &lt;code&gt;foo.bar&lt;/code&gt; 表記を使用して、複合オブジェクトのフィールド値にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="9e327a40a7bf29c2f099c651d3dd2926aa5926b6" translate="yes" xml:space="preserve">
          <source>You can add information about the push refspecs in two other ways: by setting an option in the repository's &lt;code&gt;GitConfig&lt;/code&gt; (with &lt;code&gt;push.default&lt;/code&gt; as the key) or by calling &lt;a href=&quot;#LibGit2.add_push!&quot;&gt;&lt;code&gt;add_push!&lt;/code&gt;&lt;/a&gt;. Otherwise you will need to explicitly specify a push refspec in the call to &lt;code&gt;push&lt;/code&gt; for it to have any effect, like so: &lt;code&gt;LibGit2.push(repo, refspecs=[&quot;refs/heads/master&quot;])&lt;/code&gt;.</source>
          <target state="translated">他の2つの方法でプッシュrefspecに関する情報を追加できます。リポジトリの &lt;code&gt;GitConfig&lt;/code&gt; にオプションを設定する（ &lt;code&gt;push.default&lt;/code&gt; をキーとして）か、&lt;a href=&quot;#LibGit2.add_push!&quot;&gt; &lt;code&gt;add_push!&lt;/code&gt; を&lt;/a&gt;呼び出します。。そうしないと、明示的に呼び出しでプッシュrefspecを指定する必要があります &lt;code&gt;push&lt;/code&gt; それがどんな効果を持っているため、そのような： &lt;code&gt;LibGit2.push(repo, refspecs=[&quot;refs/heads/master&quot;])&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="059c37e831f26b52c6dfe5728025ecfe92438e23" translate="yes" xml:space="preserve">
          <source>You can also change the colors for the help and shell prompts and input and answer text by setting the appropriate field of &lt;code&gt;repl&lt;/code&gt; in the &lt;code&gt;customize_colors&lt;/code&gt; function above (respectively, &lt;code&gt;help_color&lt;/code&gt;, &lt;code&gt;shell_color&lt;/code&gt;, &lt;code&gt;input_color&lt;/code&gt;, and &lt;code&gt;answer_color&lt;/code&gt;). For the latter two, be sure that the &lt;code&gt;envcolors&lt;/code&gt; field is also set to false.</source>
          <target state="translated">上記の &lt;code&gt;customize_colors&lt;/code&gt; 関数で &lt;code&gt;repl&lt;/code&gt; の適切なフィールドを設定することにより、ヘルプとシェルプロンプト、入力テキストと応答テキストの色を変更することもできます（それぞれ、 &lt;code&gt;help_color&lt;/code&gt; 、 &lt;code&gt;shell_color&lt;/code&gt; 、 &lt;code&gt;input_color&lt;/code&gt; 、および &lt;code&gt;answer_color&lt;/code&gt; ）。後者の2つについては、 &lt;code&gt;envcolors&lt;/code&gt; フィールドもfalseに設定されていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="1638c4f5d9428b7a66ce134be7d9554e824e2b6d" translate="yes" xml:space="preserve">
          <source>You can also combine dot operations with function chaining using &lt;code&gt;|&amp;gt;&lt;/code&gt;, as in this example:</source>
          <target state="translated">次の例のように、 &lt;code&gt;|&amp;gt;&lt;/code&gt; を使用して、ドット演算と関数チェーンを組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="28db7f89bc085e06b706e35f0b6ac4581558f0a0" translate="yes" xml:space="preserve">
          <source>You can also customize the color used to render warning and informational messages by setting the appropriate environment variables. For instance, to render error, warning, and informational messages respectively in magenta, yellow, and cyan you can add the following to your &lt;code&gt;~/.julia/config/startup.jl&lt;/code&gt; file:</source>
          <target state="translated">また、適切な環境変数を設定することにより、警告メッセージと情報メッセージのレンダリングに使用する色をカスタマイズできます。たとえば、エラー、警告、および情報メッセージをそれぞれマゼンタ、イエロー、シアンでレンダリングするには、以下を &lt;code&gt;~/.julia/config/startup.jl&lt;/code&gt; ファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="48369480265e913602939792e933438854e1fd21" translate="yes" xml:space="preserve">
          <source>You can also extract a substring using range indexing:</source>
          <target state="translated">また、範囲インデキシングを使って部分文字列を抽出することもできます。</target>
        </trans-unit>
        <trans-unit id="9632f04ced8b0d99e58399a64d3197172994959f" translate="yes" xml:space="preserve">
          <source>You can also find the numerical precedence for any given operator via the built-in function &lt;code&gt;Base.operator_precedence&lt;/code&gt;, where higher numbers take precedence:</source>
          <target state="translated">また、組み込み関数 &lt;code&gt;Base.operator_precedence&lt;/code&gt; を使用して、特定の演算子の数値の優先順位を見つけることもできます。この場合、数値が大きいほど優先されます。</target>
        </trans-unit>
        <trans-unit id="bde95e81a4bd07b2fd0aae2c5489099dc8851cd2" translate="yes" xml:space="preserve">
          <source>You can also return multiple values using the &lt;code&gt;return&lt;/code&gt; keyword:</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; キーワードを使用して、複数の値を返すこともできます。</target>
        </trans-unit>
        <trans-unit id="8889f871b5013b5f51fc950bfb5b2804adab0a7a" translate="yes" xml:space="preserve">
          <source>You can also return multiple values via an explicit usage of the &lt;code&gt;return&lt;/code&gt; keyword:</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; キーワードを明示的に使用して、複数の値を返すこともできます。</target>
        </trans-unit>
        <trans-unit id="fd8ba1a0017da212fde89c54b0a00968d72dd8a6" translate="yes" xml:space="preserve">
          <source>You can also use the &lt;code&gt;dateformat&quot;&quot;&lt;/code&gt; string macro. This macro creates the &lt;code&gt;DateFormat&lt;/code&gt; object once when the macro is expanded and uses the same &lt;code&gt;DateFormat&lt;/code&gt; object even if a code snippet is run multiple times.</source>
          <target state="translated">また、 &lt;code&gt;dateformat&quot;&quot;&lt;/code&gt; 文字列マクロを使用することもできます。このマクロは、マクロが展開されると一度 &lt;code&gt;DateFormat&lt;/code&gt; オブジェクトを作成し、コードスニペットが複数回実行された場合でも同じ &lt;code&gt;DateFormat&lt;/code&gt; オブジェクトを使用します。</target>
        </trans-unit>
        <trans-unit id="45337346e75761db7f47d57b0a0f2d57b557f00b" translate="yes" xml:space="preserve">
          <source>You can call:</source>
          <target state="translated">電話してもいいよ</target>
        </trans-unit>
        <trans-unit id="54416a772feee0c2a6abe4feb994c4ff0911f0e5" translate="yes" xml:space="preserve">
          <source>You can create your own custom types that take values as parameters, and use them to control dispatch of custom types. By way of illustration of this idea, let's introduce a parametric type, &lt;code&gt;Val{x}&lt;/code&gt;, and a constructor &lt;code&gt;Val(x) = Val{x}()&lt;/code&gt;, which serves as a customary way to exploit this technique for cases where you don't need a more elaborate hierarchy.</source>
          <target state="translated">パラメータとして値を受け取る独自のカスタムタイプを作成し、それらを使用してカスタムタイプのディスパッチを制御できます。このアイデアを説明するために、パラメトリックタイプ &lt;code&gt;Val{x}&lt;/code&gt; とコンストラクター &lt;code&gt;Val(x) = Val{x}()&lt;/code&gt; 紹介しましょう。これは、この手法を使用しない場合にこの手法を活用する慣例的な方法として機能します。より複雑な階層が必要です。</target>
        </trans-unit>
        <trans-unit id="67ebafe0bb709b3a3bcb8a53db51ff716e9c8b39" translate="yes" xml:space="preserve">
          <source>You can do better by declaring the type of &lt;code&gt;a&lt;/code&gt;. Here, we are focused on the case where &lt;code&gt;a&lt;/code&gt; might be any one of several types, in which case the natural solution is to use parameters. For example:</source>
          <target state="translated">あなたはのタイプを宣言することによって、より良い行うことができます。ここでは、 &lt;code&gt;a&lt;/code&gt; がいくつかのタイプのいずれかである場合に焦点を当てています。その場合、自然な解決策はパラメーターを使用することです。例えば： &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e4caa428e60cf326fe234bff9118f30463ecc984" translate="yes" xml:space="preserve">
          <source>You can do comparisons and a limited amount of arithmetic with &lt;code&gt;Char&lt;/code&gt; values:</source>
          <target state="translated">&lt;code&gt;Char&lt;/code&gt; 値を使用して、比較と限られた量の演算を実行できます。</target>
        </trans-unit>
        <trans-unit id="213f6d383b8d704a68bbc7048875f6a46e354817" translate="yes" xml:space="preserve">
          <source>You can easily convert a &lt;code&gt;Char&lt;/code&gt; to its integer value, i.e. code point:</source>
          <target state="translated">&lt;code&gt;Char&lt;/code&gt; を整数値、つまりコードポイントに簡単に変換できます。</target>
        </trans-unit>
        <trans-unit id="cdf51e2713eacda965f72b9f170006ad6c4671fa" translate="yes" xml:space="preserve">
          <source>You can easily experiment in the same way with the associativity and precedence of various combinations of &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; and &lt;code&gt;||&lt;/code&gt; operators.</source>
          <target state="translated">&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; と &lt;code&gt;||&lt;/code&gt; のさまざまな組み合わせの結合性と優先順位を使用して、同じ方法で簡単に実験できます。演算子。</target>
        </trans-unit>
        <trans-unit id="297dd6d932ba3b9c077f90d9ae3e638bbc832d7a" translate="yes" xml:space="preserve">
          <source>You can easily see which methods exist for a function by entering the function object itself in an interactive session:</source>
          <target state="translated">インタラクティブなセッションで関数オブジェクト自体を入力することで、関数にどのメソッドが存在するかを簡単に確認することができます。</target>
        </trans-unit>
        <trans-unit id="9d9fc4e50c51febb70c8179dd7d3ee0d25d50a3e" translate="yes" xml:space="preserve">
          <source>You can easily sort in reverse order as well:</source>
          <target state="translated">逆順に並べ替えも簡単にできます。</target>
        </trans-unit>
        <trans-unit id="ae353c04e06eae0932d681939a80ca4e623d3dfb" translate="yes" xml:space="preserve">
          <source>You can extract the following info from a &lt;code&gt;RegexMatch&lt;/code&gt; object:</source>
          <target state="translated">&lt;code&gt;RegexMatch&lt;/code&gt; オブジェクトから次の情報を抽出できます。</target>
        </trans-unit>
        <trans-unit id="597d6825a8e66617cfc25b05c246ad4b54f231b3" translate="yes" xml:space="preserve">
          <source>You can get a near approximation of a &lt;code&gt;union&lt;/code&gt; if you know, a priori, the field that will have the greatest size (potentially including padding). When translating your fields to Julia, declare the Julia field to be only of that type.</source>
          <target state="translated">最大のサイズ（潜在的にパディングを含む）になるフィールドが事前にわかっている場合は、 &lt;code&gt;union&lt;/code&gt; 近似値を取得できます。フィールドをJuliaに変換するときは、Juliaフィールドがそのタイプのみであることを宣言してください。</target>
        </trans-unit>
        <trans-unit id="b8f2354d5e866a3fef788cc2117a49177430a807" translate="yes" xml:space="preserve">
          <source>You can get an approximation of a &lt;code&gt;union&lt;/code&gt; if you know, a priori, the field that will have the greatest size (potentially including padding). When translating your fields to Julia, declare the Julia field to be only of that type.</source>
          <target state="translated">最大サイズ（パディングを含む可能性がある）を持つフィールドが事前にわかっている場合は、 &lt;code&gt;union&lt;/code&gt; 近似値を取得できます。フィールドをJuliaに変換するときは、Juliaフィールドがそのタイプのみであることを宣言してください。</target>
        </trans-unit>
        <trans-unit id="4fb63027077e534b4bd1d351e2d6f0cd13eea49c" translate="yes" xml:space="preserve">
          <source>You can go in the other direction using the &lt;a href=&quot;../../base/arrays/index#Core.Array&quot;&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/a&gt; constructor. The &lt;a href=&quot;#SparseArrays.issparse&quot;&gt;&lt;code&gt;issparse&lt;/code&gt;&lt;/a&gt; function can be used to query if a matrix is sparse.</source>
          <target state="translated">&lt;a href=&quot;../../base/arrays/index#Core.Array&quot;&gt; &lt;code&gt;Array&lt;/code&gt; &lt;/a&gt;コンストラクターを使用して、別の方向に進むことができます。&lt;a href=&quot;#SparseArrays.issparse&quot;&gt; &lt;code&gt;issparse&lt;/code&gt; &lt;/a&gt;行列が疎である場合、この関数は、クエリに使用することができます。</target>
        </trans-unit>
        <trans-unit id="d3ef6d04d5b1e72dbe8e2e762201178f4553d19d" translate="yes" xml:space="preserve">
          <source>You can input any Unicode character in single quotes using &lt;code&gt;\u&lt;/code&gt; followed by up to four hexadecimal digits or &lt;code&gt;\U&lt;/code&gt; followed by up to eight hexadecimal digits (the longest valid value only requires six):</source>
          <target state="translated">&lt;code&gt;\u&lt;/code&gt; 後に最大4桁の16進数字、または &lt;code&gt;\U&lt;/code&gt; 後に最大8桁の16進数字を使用して、任意のUnicode文字を一重引用符で入力できます（最長の有効な値は6桁で十分です）。</target>
        </trans-unit>
        <trans-unit id="a1c3136389e599fc278301c384c96c386084d25f" translate="yes" xml:space="preserve">
          <source>You can iteratively modify the code in MyPkg in your editor and re-run the tests with &lt;code&gt;include(&quot;runtests.jl&quot;)&lt;/code&gt;. You generally should not need to restart your Julia session to see the changes take effect (subject to a few limitations, see https://timholy.github.io/Revise.jl/stable/limitations/).</source>
          <target state="translated">エディターでMyPkgのコードを繰り返し変更し、 &lt;code&gt;include(&quot;runtests.jl&quot;)&lt;/code&gt; を使用してテストを再実行できます。通常、変更が有効になるのを確認するためにJuliaセッションを再起動する必要はありません（いくつかの制限があります。https：//timholy.github.io/Revise.jl/stable/limitations/を参照してください）。</target>
        </trans-unit>
        <trans-unit id="01f1a9e77e1dab9c53cf6e54b009fbdd40624504" translate="yes" xml:space="preserve">
          <source>You can lexicographically compare strings using the standard comparison operators:</source>
          <target state="translated">標準の比較演算子を使用して、文字列を辞書的に比較することができます。</target>
        </trans-unit>
        <trans-unit id="49d7484742424e03da7e9cb1b2e9ef8dd1d529ad" translate="yes" xml:space="preserve">
          <source>You can lock your writes with a &lt;code&gt;ReentrantLock&lt;/code&gt; like this:</source>
          <target state="translated">次のような &lt;code&gt;ReentrantLock&lt;/code&gt; で書き込みをロックできます。</target>
        </trans-unit>
        <trans-unit id="02da3de9b76002a19afdbabf9d38695160c6abb0" translate="yes" xml:space="preserve">
          <source>You can modify the behavior of regular expressions by some combination of the flags &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;, and &lt;code&gt;x&lt;/code&gt; after the closing double quote mark. These flags have the same meaning as they do in Perl, as explained in this excerpt from the &lt;a href=&quot;http://perldoc.perl.org/perlre.html#Modifiers&quot;&gt;perlre manpage&lt;/a&gt;:</source>
          <target state="translated">二重引用符を閉じた後 &lt;code&gt;s&lt;/code&gt; フラグ &lt;code&gt;i&lt;/code&gt; 、 &lt;code&gt;m&lt;/code&gt; 、s、および &lt;code&gt;x&lt;/code&gt; の組み合わせによって、正規表現の動作を変更できます。これらのフラグは、&lt;a href=&quot;http://perldoc.perl.org/perlre.html#Modifiers&quot;&gt;perlreマンページ&lt;/a&gt;からのこの抜粋で説明されているように、Perlでのフラグと同じ意味を持っています。</target>
        </trans-unit>
        <trans-unit id="d563bb2419fe2e35302ac639bca513eb737c8ce0" translate="yes" xml:space="preserve">
          <source>You can obtain and configure the relevant parameters this way:</source>
          <target state="translated">このようにして、関連するパラメータを取得し、設定することができます。</target>
        </trans-unit>
        <trans-unit id="af014600f23a52a7d3b0ccd1627fdcdcfa305bf7" translate="yes" xml:space="preserve">
          <source>You can pass incomplete objects to other functions from inner constructors to delegate their completion:</source>
          <target state="translated">不完全なオブジェクトを内部コンストラクタから他の関数に渡して、その完了を委譲することができます。</target>
        </trans-unit>
        <trans-unit id="2e5cc0663f902336ac80075e9866fb096894bf72" translate="yes" xml:space="preserve">
          <source>You can perform all the standard arithmetic operations with complex numbers:</source>
          <target state="translated">複素数を使った標準的な算術演算をすべて行うことができます。</target>
        </trans-unit>
        <trans-unit id="82a61677ccdaa8b5a6b40eab46850f79a11022e3" translate="yes" xml:space="preserve">
          <source>You can perform arithmetic and other operations with &lt;a href=&quot;../../base/base/index#end&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt;, just like a normal value:</source>
          <target state="translated">通常の値と同じように、&lt;a href=&quot;../../base/base/index#end&quot;&gt; &lt;code&gt;end&lt;/code&gt; &lt;/a&gt;を使用して算術演算やその他の演算を実行できます。</target>
        </trans-unit>
        <trans-unit id="bde51aa2974cdddcc791ab18ecf0b461a4a8f184" translate="yes" xml:space="preserve">
          <source>You can search for the index of a particular character using the &lt;code&gt;findfirst&lt;/code&gt; and &lt;code&gt;findlast&lt;/code&gt; functions:</source>
          <target state="translated">あなたは使用して、特定の文字のインデックスを検索することができ &lt;code&gt;findfirst&lt;/code&gt; と &lt;code&gt;findlast&lt;/code&gt; 機能を：</target>
        </trans-unit>
        <trans-unit id="29f0c4ef93a19d9ea8874bfdfe84ad585d18096d" translate="yes" xml:space="preserve">
          <source>You can start the search for a character at a given offset by using the functions &lt;code&gt;findnext&lt;/code&gt; and &lt;code&gt;findprev&lt;/code&gt;:</source>
          <target state="translated">関数 &lt;code&gt;findnext&lt;/code&gt; および &lt;code&gt;findprev&lt;/code&gt; を使用して、特定のオフセットで文字の検索を開始できます。</target>
        </trans-unit>
        <trans-unit id="983a4e9a838b7c272bd7ce9841a71699f2f5f979" translate="yes" xml:space="preserve">
          <source>You can then run &lt;code&gt;make -C doc doctest=true&lt;/code&gt; to run all the doctests in the Julia Manual and API documentation, which will ensure that your example works.</source>
          <target state="translated">その後、 &lt;code&gt;make -C doc doctest=true&lt;/code&gt; を実行して、JuliaマニュアルおよびAPIドキュメントのすべてのdoctestを実行できます。これにより、例が確実に機能します。</target>
        </trans-unit>
        <trans-unit id="4814e310e21d1ccb6a91f06788291ec84faf6155" translate="yes" xml:space="preserve">
          <source>You can think of a &lt;code&gt;Task&lt;/code&gt; as a handle to a unit of computational work to be performed. It has a create-start-run-finish lifecycle. Tasks are created by calling the &lt;code&gt;Task&lt;/code&gt; constructor on a 0-argument function to run, or using the &lt;a href=&quot;../../base/parallel/index#Base.@task&quot;&gt;&lt;code&gt;@task&lt;/code&gt;&lt;/a&gt; macro:</source>
          <target state="translated">&lt;code&gt;Task&lt;/code&gt; は、実行される計算作業の単位へのハンドルと考えることができます。作成-開始-実行-終了のライフサイクルがあります。タスクは、実行する0引数関数で &lt;code&gt;Task&lt;/code&gt; コンストラクターを呼び出すか、&lt;a href=&quot;../../base/parallel/index#Base.@task&quot;&gt; &lt;code&gt;@task&lt;/code&gt; &lt;/a&gt;マクロを使用して作成されます。</target>
        </trans-unit>
        <trans-unit id="01884818eeefcdc6c4866d1d82554c6cbab8b4af" translate="yes" xml:space="preserve">
          <source>You can type the composition operator at the REPL and suitably-configured editors using &lt;code&gt;\circ&amp;lt;tab&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;\circ&amp;lt;tab&amp;gt;&lt;/code&gt; を使用して、REPLおよび適切に構成されたエディターで合成演算子を入力できます。</target>
        </trans-unit>
        <trans-unit id="671bb6ef5bfe755f6871d64b9b0adf82ab7550a3" translate="yes" xml:space="preserve">
          <source>You can use the &lt;a href=&quot;../../base/strings/index#Base.occursin&quot;&gt;&lt;code&gt;occursin&lt;/code&gt;&lt;/a&gt; function to check if a substring is found within a string:</source>
          <target state="translated">&lt;a href=&quot;../../base/strings/index#Base.occursin&quot;&gt; &lt;code&gt;occursin&lt;/code&gt; &lt;/a&gt;関数を使用して、文字列内に部分文字列が見つかったかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="1889689569d33c12e5c7365a4498ac549f0fa6b4" translate="yes" xml:space="preserve">
          <source>You can write multiple values with the same &lt;code&gt;write&lt;/code&gt; call. i.e. the following are equivalent:</source>
          <target state="translated">同じ &lt;code&gt;write&lt;/code&gt; 呼び出しで複数の値を書き込むことができます。つまり、以下は同等です。</target>
        </trans-unit>
        <trans-unit id="0a69b3c3747d382e37e0c069a0643adbff045b55" translate="yes" xml:space="preserve">
          <source>You could also add a zero-argument &lt;code&gt;Foo&lt;/code&gt; constructor method that supplies default values for both of the &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt; fields:</source>
          <target state="translated">また、 &lt;code&gt;bar&lt;/code&gt; フィールドと &lt;code&gt;baz&lt;/code&gt; フィールドの両方にデフォルト値を提供する引数なしの &lt;code&gt;Foo&lt;/code&gt; コンストラクターメソッドを追加することもできます。</target>
        </trans-unit>
        <trans-unit id="748f1f789b535f659a4d83b60f43c95c4a72b9c3" translate="yes" xml:space="preserve">
          <source>You do not have to make any modifications to your code to take timing measurements (in contrast to the alternative &lt;a href=&quot;https://github.com/timholy/IProfile.jl&quot;&gt;instrumenting profiler&lt;/a&gt;).</source>
          <target state="translated">タイミング測定を行うためにコードを変更する必要はありません（代替の&lt;a href=&quot;https://github.com/timholy/IProfile.jl&quot;&gt;インストルメンテーションプロファイラー&lt;/a&gt;とは異なります）。</target>
        </trans-unit>
        <trans-unit id="515bee5879927c5023670ad7c5704ff12c433189" translate="yes" xml:space="preserve">
          <source>You do not have to make any modifications to your code to take timing measurements.</source>
          <target state="translated">タイミング測定のためにコードを修正する必要はありません。</target>
        </trans-unit>
        <trans-unit id="e6c719aa5a89e4e9d767112f0eb9eee4442b7ddf" translate="yes" xml:space="preserve">
          <source>You do not need to write binary &lt;code&gt;BroadcastStyle&lt;/code&gt; rules unless you want to establish precedence for two or more non-&lt;code&gt;DefaultArrayStyle&lt;/code&gt; types.</source>
          <target state="translated">&lt;code&gt;DefaultArrayStyle&lt;/code&gt; 以外の 2つ以上のタイプの優先順位を確立する場合を除き、バイナリ &lt;code&gt;BroadcastStyle&lt;/code&gt; ルールを記述する必要はありません。</target>
        </trans-unit>
        <trans-unit id="98dd2765494f1835f8de8c7c9befa3251d03285e" translate="yes" xml:space="preserve">
          <source>You generally want to use &lt;a href=&quot;../../base/base/index#Core.isa&quot;&gt;&lt;code&gt;isa&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;&amp;lt;:&lt;/code&gt; for testing types, not &lt;code&gt;==&lt;/code&gt;. Checking types for exact equality typically only makes sense when comparing to a known concrete type (e.g. &lt;code&gt;T == Float64&lt;/code&gt;), or if you &lt;em&gt;really, really&lt;/em&gt; know what you're doing.</source>
          <target state="translated">通常、&lt;a href=&quot;../../base/base/index#Core.isa&quot;&gt; &lt;code&gt;isa&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;&amp;lt;:&lt;/code&gt; を使用して、 &lt;code&gt;==&lt;/code&gt; ではなく型をテストします。型が完全に等しいかどうかのチェックは、通常、既知の具象型（ &lt;code&gt;T == Float64&lt;/code&gt; ）と比較する場合にのみ意味があります。または、&lt;em&gt;本当に、本当に&lt;/em&gt;何をしているのかを知っている場合に限ります。</target>
        </trans-unit>
        <trans-unit id="14812b00d271b7b5f0ec10d0a35574667eaad1aa" translate="yes" xml:space="preserve">
          <source>You have homogenous lists of the same type of &lt;code&gt;Car&lt;/code&gt; to process, so that you can store them all in an &lt;code&gt;Array{Car{:Honda,:Accord},N}&lt;/code&gt;.</source>
          <target state="translated">処理する同じタイプの &lt;code&gt;Car&lt;/code&gt; の同種のリストがあるため、それらをすべて &lt;code&gt;Array{Car{:Honda,:Accord},N}&lt;/code&gt; 格納できます。</target>
        </trans-unit>
        <trans-unit id="54079830b99730e8b5b0840e83f7e3f6b6fec1f2" translate="yes" xml:space="preserve">
          <source>You may define your own exceptions in the following way:</source>
          <target state="translated">以下のように、独自の例外を定義することができます。</target>
        </trans-unit>
        <trans-unit id="75a4f74f7e0a2a762b20575e87e4a9f8afac9ea7" translate="yes" xml:space="preserve">
          <source>You may find a list of field names using the &lt;a href=&quot;../../base/base/index#Base.fieldnames&quot;&gt;&lt;code&gt;fieldnames&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;a href=&quot;../../base/base/index#Base.fieldnames&quot;&gt; &lt;code&gt;fieldnames&lt;/code&gt; &lt;/a&gt;関数を使用して、フィールド名のリストを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="321a16cad9d72ad66163bddd6d822e5c0fba0fe3" translate="yes" xml:space="preserve">
          <source>You may find that simple benchmarks of linear algebra building blocks like</source>
          <target state="translated">のような線形代数のビルディングブロックの単純なベンチマークを見つけることができるかもしれません。</target>
        </trans-unit>
        <trans-unit id="3b69612dc47009ecd3936a82f044980d92ef4b91" translate="yes" xml:space="preserve">
          <source>You may have noticed the &lt;code&gt;(v1.1)&lt;/code&gt; in the REPL prompt. This lets us know &lt;code&gt;v1.1&lt;/code&gt; is the &lt;strong&gt;active environment&lt;/strong&gt;. The active environment is the environment that will be modified by Pkg commands such as &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;rm&lt;/code&gt; and &lt;code&gt;update&lt;/code&gt;.</source>
          <target state="translated">REPLプロンプトの &lt;code&gt;(v1.1)&lt;/code&gt; に気づいたかもしれません。これにより、 &lt;code&gt;v1.1&lt;/code&gt; が&lt;strong&gt;アクティブな環境である&lt;/strong&gt;ことがわかり&lt;strong&gt;ます&lt;/strong&gt;。アクティブな環境とは、 &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;rm&lt;/code&gt; 、 &lt;code&gt;update&lt;/code&gt; などのPkgコマンドによって変更される環境です。</target>
        </trans-unit>
        <trans-unit id="94a57765c350792774cf5846e707a163457704ae" translate="yes" xml:space="preserve">
          <source>You may need to &lt;a href=&quot;../../base/io-network/index#Base.close&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; and reopen the &lt;code&gt;GitRemote&lt;/code&gt; in question after updating its push refspecs in order for the change to take effect and for calls to &lt;a href=&quot;#LibGit2.push&quot;&gt;&lt;code&gt;push&lt;/code&gt;&lt;/a&gt; to work.</source>
          <target state="translated">変更を有効にして&lt;a href=&quot;#LibGit2.push&quot;&gt; &lt;code&gt;push&lt;/code&gt; の&lt;/a&gt;呼び出しを機能させるには、push refspecを更新した後、問題の &lt;code&gt;GitRemote&lt;/code&gt; を&lt;a href=&quot;../../base/io-network/index#Base.close&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt;て再度開く必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="4229325c98965b7733293cd84ce7238967b6b57b" translate="yes" xml:space="preserve">
          <source>You may need to be aware of certain behaviors inherent in the creation of incremental shared libraries which may require care when writing your module. For example, external state is not preserved. To accommodate this, explicitly separate any initialization steps that must occur at &lt;em&gt;runtime&lt;/em&gt; from steps that can occur at &lt;em&gt;compile time&lt;/em&gt;. For this purpose, Julia allows you to define an &lt;code&gt;__init__()&lt;/code&gt; function in your module that executes any initialization steps that must occur at runtime. This function will not be called during compilation (&lt;code&gt;--output-*&lt;/code&gt;). Effectively, you can assume it will be run exactly once in the lifetime of the code. You may, of course, call it manually if necessary, but the default is to assume this function deals with computing state for the local machine, which does not need to be &amp;ndash; or even should not be &amp;ndash; captured in the compiled image. It will be called after the module is loaded into a process, including if it is being loaded into an incremental compile (&lt;code&gt;--output-incremental=yes&lt;/code&gt;), but not if it is being loaded into a full-compilation process.</source>
          <target state="translated">モジュールを作成するときに注意が必要な、増分共有ライブラリの作成に固有の動作に注意する必要がある場合があります。たとえば、外部状態は保存されません。これに対応するには、&lt;em&gt;実行時に&lt;/em&gt;発生する必要のある初期化ステップを、&lt;em&gt;コンパイル時に&lt;/em&gt;発生する可能性のあるステップから明示的に分離し&lt;em&gt;ます&lt;/em&gt;。この目的のために、Juliaでは、実行時に発生する必要のある初期化手順を実行する &lt;code&gt;__init__()&lt;/code&gt; 関数をモジュールに定義できます。この関数はコンパイル中に呼び出されません（ &lt;code&gt;--output-*&lt;/code&gt; ）。事実上、コードの有効期間中に1回だけ実行されると想定できます。もちろん、必要に応じて手動で呼び出すこともできますが、デフォルトでは、この関数はローカルマシンの計算状態を処理すると想定しています。これは、コンパイルされたイメージでキャプチャする必要がない、またはキャプチャする必要がない場合もあります。これは、モジュールがプロセスにロードされた後に呼び出されます。これは、インクリメンタルコンパイル（ &lt;code&gt;--output-incremental=yes&lt;/code&gt; ）にロードされているかどうかを含みますが、フルコンパイルプロセスにロードされている場合は呼び出されません。</target>
        </trans-unit>
        <trans-unit id="706389eb857acac994f27512bc713e1991d6229c" translate="yes" xml:space="preserve">
          <source>You may note that in non-interactive contexts the hard and soft scope behaviors are identical except that a warning is printed when an implicitly local variable (i.e. not declared with &lt;code&gt;local x&lt;/code&gt;) shadows a global. In interactive contexts, the rules follow a more complex heuristic for the sake of convenience. This is covered in depth in examples that follow.</source>
          <target state="translated">非対話型コンテキストでは、ハードスコープとソフトスコープの動作は同じですが、暗黙的にローカル変数（つまり、 &lt;code&gt;local x&lt;/code&gt; 宣言されていない）がグローバルをシャドウするときに警告が出力される点が異なります。インタラクティブなコンテキストでは、ルールは便宜上、より複雑なヒューリスティックに従います。これについては、以下の例で詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="44e65af1a6b8116a7d6a8ac10e4cee832d255f64" translate="yes" xml:space="preserve">
          <source>You may notice that in the example above the first stack frame points at line 4, where &lt;a href=&quot;../../base/stacktraces/index#Base.StackTraces.stacktrace&quot;&gt;&lt;code&gt;stacktrace&lt;/code&gt;&lt;/a&gt; is called, rather than line 2, where &lt;em&gt;bad_function&lt;/em&gt; is called, and &lt;code&gt;bad_function&lt;/code&gt;'s frame is missing entirely. This is understandable, given that &lt;a href=&quot;../../base/stacktraces/index#Base.StackTraces.stacktrace&quot;&gt;&lt;code&gt;stacktrace&lt;/code&gt;&lt;/a&gt; is called from the context of the &lt;em&gt;catch&lt;/em&gt;. While in this example it's fairly easy to find the actual source of the error, in complex cases tracking down the source of the error becomes nontrivial.</source>
          <target state="translated">あなたはその例では4行目で、第1のスタックフレームポイントの上方に気付くことができる&lt;a href=&quot;../../base/stacktraces/index#Base.StackTraces.stacktrace&quot;&gt; &lt;code&gt;stacktrace&lt;/code&gt; &lt;/a&gt;なくライン2より、呼び出され&lt;em&gt;bad_functionが&lt;/em&gt;呼び出され、 &lt;code&gt;bad_function&lt;/code&gt; のフレームが完全に欠けています。&lt;a href=&quot;../../base/stacktraces/index#Base.StackTraces.stacktrace&quot;&gt; &lt;code&gt;stacktrace&lt;/code&gt; &lt;/a&gt;が&lt;em&gt;catchの&lt;/em&gt;コンテキストから呼び出されることを考えると、これは理解できます。この例では、エラーの実際の原因を見つけるのはかなり簡単ですが、複雑なケースでは、エラーの原因を追跡することは簡単ではありません。</target>
        </trans-unit>
        <trans-unit id="d19cfc137102f94cf8a3e39329b48533e78155c7" translate="yes" xml:space="preserve">
          <source>You may notice that in the example above the first stack frame points points at line 4, where &lt;a href=&quot;../../base/stacktraces/index#Base.StackTraces.stacktrace&quot;&gt;&lt;code&gt;stacktrace&lt;/code&gt;&lt;/a&gt; is called, rather than line 2, where &lt;em&gt;bad_function&lt;/em&gt; is called, and &lt;code&gt;bad_function&lt;/code&gt;'s frame is missing entirely. This is understandable, given that &lt;a href=&quot;../../base/stacktraces/index#Base.StackTraces.stacktrace&quot;&gt;&lt;code&gt;stacktrace&lt;/code&gt;&lt;/a&gt; is called from the context of the &lt;em&gt;catch&lt;/em&gt;. While in this example it's fairly easy to find the actual source of the error, in complex cases tracking down the source of the error becomes nontrivial.</source>
          <target state="translated">上記の例では、最初のスタックフレームが、&lt;em&gt;bad_function&lt;/em&gt;が呼び出され、 &lt;code&gt;bad_function&lt;/code&gt; のフレームが完全に欠落している2行目ではなく、&lt;a href=&quot;../../base/stacktraces/index#Base.StackTraces.stacktrace&quot;&gt; &lt;code&gt;stacktrace&lt;/code&gt; &lt;/a&gt;が呼び出されている4行目を指しています。&lt;a href=&quot;../../base/stacktraces/index#Base.StackTraces.stacktrace&quot;&gt; &lt;code&gt;stacktrace&lt;/code&gt; &lt;/a&gt;が&lt;em&gt;catchの&lt;/em&gt;コンテキストから呼び出されることを考えると、これは理解できます。この例では、エラーの実際の原因を見つけるのはかなり簡単ですが、複雑なケースでは、エラーの原因を追跡することは簡単ではありません。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5e4c7a6ccbcbfd095ffe6620497bc770c0f876bf" translate="yes" xml:space="preserve">
          <source>You may prefer the LTS (Long Term Support) version of Julia if you are looking for a very stable code base. The current LTS version of Julia is versioned according to SemVer as v1.0.x; this branch will continue to recieve bugfixes until a new LTS branch is chosen, at which point the v1.0.x series will no longer recieved regular bug fixes and all but the most conservative users will be advised to upgrade to the new LTS version series. As a package developer, you may prefer to develop for the LTS version, to maximize the number of users who can use your package. As per SemVer, code written for v1.0 will continue to work for all future LTS and Stable versions. In general, even if targetting the LTS, one can develop and run code in the latest Stable version, to take advantage of the improved performance; so long as one avoids using new features (such as added library functions or new methods).</source>
          <target state="translated">非常に安定したコードベースをお探しの方は、LTS (Long Term Support)版のJuliaをお勧めします。現在のLTSバージョンのJuliaはSemVerによるとv1.0.xとしてバージョン管理されています。このブランチは新しいLTSブランチが選ばれるまでバグフィックスを受け続けます。パッケージ開発者としては、あなたのパッケージを利用するユーザの数を最大化するために、LTSバージョンで開発することを好むかもしれません。SemVerによると、v1.0で書かれたコードは、将来のLTSやStableバージョンでも動作します。一般的には、LTSをターゲットにしていても、最新のStable版でコードを開発して実行することで、パフォーマンスの向上を利用することができます。</target>
        </trans-unit>
        <trans-unit id="b76981634f75e5c11344317b4a4c06f7a789abab" translate="yes" xml:space="preserve">
          <source>You may prefer the beta version of Julia if you don't mind being slightly behind the latest bugfixes and changes, but find the slightly faster rate of changes more appealing. Additionally, these binaries are tested before they are published to ensure they are fully functional.</source>
          <target state="translated">最新のバグフィックスや変更が少し遅れているのは気にならないが、変更の速度が少し速いのが魅力的だという方は、Julia のベータ版をお勧めします。さらに、これらのバイナリは公開前にテストされ、完全に機能することを確認しています。</target>
        </trans-unit>
        <trans-unit id="0460fd971f5acf59556e02a1302869132f958a11" translate="yes" xml:space="preserve">
          <source>You may prefer the nightly version of Julia if you want to take advantage of the latest updates to the language, and don't mind if the version available today occasionally doesn't actually work.</source>
          <target state="translated">あなたは言語への最新の更新を活用したい場合は、ジュリアの毎晩バージョンを好むかもしれませんし、今日利用可能なバージョンが時々実際に動作しない場合は気にしないでください。</target>
        </trans-unit>
        <trans-unit id="36eadd3f0fe870572a5ea4a451370de0fa57fc6f" translate="yes" xml:space="preserve">
          <source>You may prefer the nightly version of Julia if you want to take advantage of the latest updates to the language, and don't mind if the version available today occasionally doesn't actually work. As the name implies, releases to the nightly version are made roughly every night (depending on build infrastructure stability). In general nightly released are fairly safe to use&amp;mdash;your code will not catch on fire. However, they may be occasional regressions and or issues that will not be found until more thorough pre-release testing. You may wish to test against the nightly version to ensure that such regressions that affect your use case are caught before a release is made.</source>
          <target state="translated">言語の最新の更新を利用したい場合は、Juliaのナイトリーバージョンをお勧めします。また、今日利用可能なバージョンが実際に機能しない場合もあります。名前が示すように、ナイトリーバージョンへのリリースはほぼ毎晩行われます（ビルドインフラストラクチャの安定性によって異なります）。一般に、毎晩リリースされるものはかなり安全に使用できます。コードが発火することはありません。ただし、それらは時折のリグレッションや問題である可能性があり、リリース前のより徹底的なテストまで発見されません。リリースが行われる前に、ユースケースに影響を与えるそのようなリグレッションがキャッチされることを確認するために、ナイトリーバージョンに対してテストすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3b13c20826345514f072a53cfc2e614b5a875ac2" translate="yes" xml:space="preserve">
          <source>You may prefer the release version of Julia if you are looking for a stable code base. Releases generally occur every 6 months, giving you a stable platform for writing code.</source>
          <target state="translated">安定したコードベースを探しているのであれば、リリース版のJuliaをお勧めします。リリースは通常6ヶ月ごとに行われ、コードを書くための安定したプラットフォームを提供します。</target>
        </trans-unit>
        <trans-unit id="a8603fb2a99f46c98dd43f967c904e067e7d516b" translate="yes" xml:space="preserve">
          <source>You may want to try this for yourself to see how it works.</source>
          <target state="translated">実際に試してみて効果を確かめてみるのもいいかもしれません。</target>
        </trans-unit>
        <trans-unit id="71eb424f61bc73bf2ac2a0d6b8ff2e2e2a212793" translate="yes" xml:space="preserve">
          <source>You might expect the second example to behave the same way, but in fact the &lt;code&gt;return&lt;/code&gt; there only breaks out of the &lt;em&gt;inner&lt;/em&gt; function (inside the &lt;code&gt;do&lt;/code&gt; block) and gives a value back to &lt;code&gt;map&lt;/code&gt;. &lt;code&gt;test2([5,6,7])&lt;/code&gt; then returns &lt;code&gt;[5,12,7]&lt;/code&gt;.</source>
          <target state="translated">あなたは同じように動作する第二の例を期待するかもしれないが、実際には &lt;code&gt;return&lt;/code&gt; そこが唯一の勃発&lt;em&gt;インナー&lt;/em&gt;（内部機能 &lt;code&gt;do&lt;/code&gt; ブロック）とする値の背中を与える &lt;code&gt;map&lt;/code&gt; 。次に &lt;code&gt;test2([5,6,7])&lt;/code&gt; は &lt;code&gt;[5,12,7]&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8eed329d4cf528497edb705ccaa35a89edfb626e" translate="yes" xml:space="preserve">
          <source>You might want broadcasting to preserve the &lt;code&gt;char&lt;/code&gt; &quot;metadata.&quot; First we define</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; 「メタデータ」を保持するためにブロードキャストする必要がある場合があります。最初に定義します</target>
        </trans-unit>
        <trans-unit id="01b172c9b8083a729ce8b5e678095c5e53087128" translate="yes" xml:space="preserve">
          <source>You require CPU-intensive processing on each &lt;code&gt;Car&lt;/code&gt;, and it becomes vastly more efficient if you know the &lt;code&gt;Make&lt;/code&gt; and &lt;code&gt;Model&lt;/code&gt; at compile time and the total number of different &lt;code&gt;Make&lt;/code&gt; or &lt;code&gt;Model&lt;/code&gt; that will be used is not too large.</source>
          <target state="translated">各 &lt;code&gt;Car&lt;/code&gt; でCPUを集中的に使用する処理が必要であり、コンパイル時に &lt;code&gt;Make&lt;/code&gt; と &lt;code&gt;Model&lt;/code&gt; がわかっていて、使用される異なる &lt;code&gt;Make&lt;/code&gt; または &lt;code&gt;Model&lt;/code&gt; 総数が多すぎない場合は、はるかに効率的になります。</target>
        </trans-unit>
        <trans-unit id="cae8f1e8790fd84f821e9cc3eb20a504f4b0534d" translate="yes" xml:space="preserve">
          <source>You should see a list of available commands along with short descriptions. You can ask for more detailed help by specifying a command:</source>
          <target state="translated">利用可能なコマンドの一覧と簡単な説明が表示されるはずです。コマンドを指定することで、より詳細なヘルプを求めることができます。</target>
        </trans-unit>
        <trans-unit id="eb798888844269226c94086ebe8f3c7329fdec21" translate="yes" xml:space="preserve">
          <source>Your code must be available on any process that runs it. For example, type the following into the Julia prompt:</source>
          <target state="translated">あなたのコードは、それを実行するすべてのプロセスで利用可能でなければなりません。例えば、Juliaプロンプトに次のように入力します。</target>
        </trans-unit>
        <trans-unit id="57bf44abb3ac22f4d7fc3ab61624aaa4d1a927ab" translate="yes" xml:space="preserve">
          <source>Z Notation Bag Membership</source>
          <target state="translated">Z表記のバッグ会員</target>
        </trans-unit>
        <trans-unit id="74e2105c5405ac305b485ea5d5fbf6c4fbc31a2b" translate="yes" xml:space="preserve">
          <source>Z Notation Schema Composition</source>
          <target state="translated">Z記法スキーマの構成</target>
        </trans-unit>
        <trans-unit id="561efdcba775fe560525de0b80ee246bac982519" translate="yes" xml:space="preserve">
          <source>Zero-dimensional arrays are arrays of the form &lt;code&gt;Array{T,0}&lt;/code&gt;. They behave similar to scalars, but there are important differences. They deserve a special mention because they are a special case which makes logical sense given the generic definition of arrays, but might be a bit unintuitive at first. The following line defines a zero-dimensional array:</source>
          <target state="translated">ゼロ次元配列は、 &lt;code&gt;Array{T,0}&lt;/code&gt; 形式の配列です。それらはスカラーと同様に動作しますが、重要な違いがあります。それらは、配列の一般的な定義を考えると論理的に意味のある特別なケースであるため、特別な言及に値しますが、最初は少し直感的ではないかもしれません。次の行は、ゼロ次元配列を定義しています。</target>
        </trans-unit>
        <trans-unit id="59e8673a8540d0e191f3f9440981811c0b28178f" translate="yes" xml:space="preserve">
          <source>Zero-dimensional arrays are the &quot;point&quot; to vector's &quot;line&quot; and matrix's &quot;plane&quot;. Just as a line has no area (but still represents a set of things), a point has no length or any dimensions at all (but still represents a thing).</source>
          <target state="translated">ゼロ次元配列は、ベクトルの「線」と行列の「面」に対する「点」です。線が面積を持たないのと同じように(それでも物の集合を表します)、点は長さも次元も全く持ちません(それでも物を表します)。</target>
        </trans-unit>
        <trans-unit id="ec2113ef23ab629753d460306640202ef42c12ef" translate="yes" xml:space="preserve">
          <source>Zero-dimensional arrays don't natively have any dimensions into which you index &amp;ndash; they&amp;rsquo;re just &lt;code&gt;A[]&lt;/code&gt;. We can apply the same &quot;trailing one&quot; rule for them as for all other array dimensionalities, so you can indeed index them as &lt;code&gt;A[1]&lt;/code&gt;, &lt;code&gt;A[1,1]&lt;/code&gt;, etc.</source>
          <target state="translated">ゼロ次元配列には、インデックスを付けるための次元はありません。それらは単なる &lt;code&gt;A[]&lt;/code&gt; です。他のすべての配列次元と同じ「末尾1」ルールを適用できるため、実際に &lt;code&gt;A[1]&lt;/code&gt; 、 &lt;code&gt;A[1,1]&lt;/code&gt; などとしてインデックスを付けることができます。</target>
        </trans-unit>
        <trans-unit id="df74de535f1392e594ef5eeab6807c001df2566f" translate="yes" xml:space="preserve">
          <source>Zero-dimensional arrays don't natively have any dimensions into which you index &amp;ndash; they&amp;rsquo;re just &lt;code&gt;A[]&lt;/code&gt;. We can apply the same &quot;trailing one&quot; rule for them as for all other array dimensionalities, so you can indeed index them as &lt;code&gt;A[1]&lt;/code&gt;, &lt;code&gt;A[1,1]&lt;/code&gt;, etc; see &lt;a href=&quot;../arrays/index#Omitted-and-extra-indices&quot;&gt;Omitted and extra indices&lt;/a&gt;.</source>
          <target state="translated">ゼロ次元配列には、インデックスを作成する次元がネイティブにありません。それらは &lt;code&gt;A[]&lt;/code&gt; です。他のすべての配列次元と同じ「トレーリングワン」ルールを適用できるため、実際に &lt;code&gt;A[1]&lt;/code&gt; 、 &lt;code&gt;A[1,1]&lt;/code&gt; などのインデックスを付けることができます。&lt;a href=&quot;../arrays/index#Omitted-and-extra-indices&quot;&gt;省略および追加のインデックスを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6b26e283b9285c59cfe6ee345d840ff32a08052c" translate="yes" xml:space="preserve">
          <source>\()</source>
          <target state="translated">\()</target>
        </trans-unit>
        <trans-unit id="8a50e72bbe47fcaef6adcffd656ebe2d54953f91" translate="yes" xml:space="preserve">
          <source>\0/3</source>
          <target state="translated">\0/3</target>
        </trans-unit>
        <trans-unit id="e9405388bd3e66f4f3f6c02d971bd28ccdccaa7e" translate="yes" xml:space="preserve">
          <source>\1/</source>
          <target state="translated">\1/</target>
        </trans-unit>
        <trans-unit id="f027585d51760b016dc9a17eb250918d79fe1656" translate="yes" xml:space="preserve">
          <source>\1/10</source>
          <target state="translated">\1/10</target>
        </trans-unit>
        <trans-unit id="6dc80eb8fd394a5094b26fce0a091081f171ade1" translate="yes" xml:space="preserve">
          <source>\1/2</source>
          <target state="translated">\1/2</target>
        </trans-unit>
        <trans-unit id="db0136fc9351c47aeacf89b3b63fad4f778dec79" translate="yes" xml:space="preserve">
          <source>\1/3</source>
          <target state="translated">\1/3</target>
        </trans-unit>
        <trans-unit id="4a2d541db798ac9dc012eee3270125d49f7e9e1c" translate="yes" xml:space="preserve">
          <source>\1/4</source>
          <target state="translated">\1/4</target>
        </trans-unit>
        <trans-unit id="a87f8d74f6a7e153af3fff916bf7c031788cc412" translate="yes" xml:space="preserve">
          <source>\1/5</source>
          <target state="translated">\1/5</target>
        </trans-unit>
        <trans-unit id="29a3bc136b5ab0d2bc309b5bb5e1735798643266" translate="yes" xml:space="preserve">
          <source>\1/6</source>
          <target state="translated">\1/6</target>
        </trans-unit>
        <trans-unit id="f06587711719aaef8bc36199cb763a5ca8ed5b90" translate="yes" xml:space="preserve">
          <source>\1/7</source>
          <target state="translated">\1/7</target>
        </trans-unit>
        <trans-unit id="be708686ec340bec50c515ce07649bcbd7b6d749" translate="yes" xml:space="preserve">
          <source>\1/8</source>
          <target state="translated">\1/8</target>
        </trans-unit>
        <trans-unit id="11557e1ac7de358cb1bffae8b8e0c31658c73a34" translate="yes" xml:space="preserve">
          <source>\1/9</source>
          <target state="translated">\1/9</target>
        </trans-unit>
        <trans-unit id="db66670627d1ece8d004dba27bd31bbae103a152" translate="yes" xml:space="preserve">
          <source>\2/3</source>
          <target state="translated">\2/3</target>
        </trans-unit>
        <trans-unit id="594a1082136db6d496ec37c3f2e137ee2b1c2304" translate="yes" xml:space="preserve">
          <source>\2/5</source>
          <target state="translated">\2/5</target>
        </trans-unit>
        <trans-unit id="5e8bc9e533252d09ee6c73afce5da2a72488888e" translate="yes" xml:space="preserve">
          <source>\3/4</source>
          <target state="translated">\3/4</target>
        </trans-unit>
        <trans-unit id="a50e9368238ca82ac4489585387d46083f64cae7" translate="yes" xml:space="preserve">
          <source>\3/5</source>
          <target state="translated">\3/5</target>
        </trans-unit>
        <trans-unit id="9c3d1367082b439189bfb85f04cc1ffae71ef96e" translate="yes" xml:space="preserve">
          <source>\3/8</source>
          <target state="translated">\3/8</target>
        </trans-unit>
        <trans-unit id="47f8a536df17c50df7c82a92959bbd0c66172c07" translate="yes" xml:space="preserve">
          <source>\4/5</source>
          <target state="translated">\4/5</target>
        </trans-unit>
        <trans-unit id="3184741692c487b7052b7005a5dcc990d42ec28b" translate="yes" xml:space="preserve">
          <source>\5/6</source>
          <target state="translated">\5/6</target>
        </trans-unit>
        <trans-unit id="a3e2d08140d306e29d0dd5197b4d63c56018fd06" translate="yes" xml:space="preserve">
          <source>\5/8</source>
          <target state="translated">\5/8</target>
        </trans-unit>
        <trans-unit id="031fd711b0ff2a77753aebd9b5a3ae56bd990afc" translate="yes" xml:space="preserve">
          <source>\7/8</source>
          <target state="translated">\7/8</target>
        </trans-unit>
        <trans-unit id="c0fe4a8468a676d3af614df303545f8085623ffa" translate="yes" xml:space="preserve">
          <source>\:+1:</source>
          <target state="translated">\:+1:</target>
        </trans-unit>
        <trans-unit id="1f409cc5566bb159aa3eb9a43ba7b112abdf8f37" translate="yes" xml:space="preserve">
          <source>\:-1:</source>
          <target state="translated">\:-1:</target>
        </trans-unit>
        <trans-unit id="37a8827d047ba1424645fac130045eb7ce513b10" translate="yes" xml:space="preserve">
          <source>\:100:</source>
          <target state="translated">\:100:</target>
        </trans-unit>
        <trans-unit id="7a8b4088e301737914602cb64abd1cef18d926f6" translate="yes" xml:space="preserve">
          <source>\:1234:</source>
          <target state="translated">\:1234:</target>
        </trans-unit>
        <trans-unit id="91888e08cbedf6bf8862c5b65163ce478af06bf9" translate="yes" xml:space="preserve">
          <source>\:8ball:</source>
          <target state="translated">\:8ball:</target>
        </trans-unit>
        <trans-unit id="893c710f650dbaf6e52a56817de430adc9320c23" translate="yes" xml:space="preserve">
          <source>\:a:</source>
          <target state="translated">\:a:</target>
        </trans-unit>
        <trans-unit id="f853d000810dd26060e2696126e145030271c584" translate="yes" xml:space="preserve">
          <source>\:ab:</source>
          <target state="translated">\:ab:</target>
        </trans-unit>
        <trans-unit id="f37a396dfa857265e3ecd90835458cdae5a6eefb" translate="yes" xml:space="preserve">
          <source>\:abc:</source>
          <target state="translated">\:abc:</target>
        </trans-unit>
        <trans-unit id="06fcc1368ba729df7b1dd45bddcbe5bfcfed511d" translate="yes" xml:space="preserve">
          <source>\:abcd:</source>
          <target state="translated">\:abcd:</target>
        </trans-unit>
        <trans-unit id="897745edd2f35f117be4ac8e8927668c74a4bf23" translate="yes" xml:space="preserve">
          <source>\:accept:</source>
          <target state="translated">\:accept:</target>
        </trans-unit>
        <trans-unit id="a7c6f0363b57fa69b1404b3a64f70c46b68a96e1" translate="yes" xml:space="preserve">
          <source>\:aerial_tramway:</source>
          <target state="translated">\:aerial_tramway:</target>
        </trans-unit>
        <trans-unit id="d6e282198ea6fc6d14a452f54562f9039fe5c632" translate="yes" xml:space="preserve">
          <source>\:airplane:</source>
          <target state="translated">\:airplane:</target>
        </trans-unit>
        <trans-unit id="4742d4fcf02027d38977477be1ea129391060c7b" translate="yes" xml:space="preserve">
          <source>\:alarm_clock:</source>
          <target state="translated">\:alarm_clock:</target>
        </trans-unit>
        <trans-unit id="b9106d98c9e6f148dea1bc5f0d0e2637fecc4f01" translate="yes" xml:space="preserve">
          <source>\:alien:</source>
          <target state="translated">\:alien:</target>
        </trans-unit>
        <trans-unit id="465acd14d1b878bbb5bc7cbb6f6379d1a64b42a3" translate="yes" xml:space="preserve">
          <source>\:ambulance:</source>
          <target state="translated">\:ambulance:</target>
        </trans-unit>
        <trans-unit id="ecc81069e165094bd92ebdeb19f4ff11e1e1fea0" translate="yes" xml:space="preserve">
          <source>\:anchor:</source>
          <target state="translated">\:anchor:</target>
        </trans-unit>
        <trans-unit id="a17c0ed6923a46686bb723b71bfb598646966379" translate="yes" xml:space="preserve">
          <source>\:angel:</source>
          <target state="translated">\:angel:</target>
        </trans-unit>
        <trans-unit id="91e16b740dc786abef7dd112d243ef891aa232d9" translate="yes" xml:space="preserve">
          <source>\:anger:</source>
          <target state="translated">\:anger:</target>
        </trans-unit>
        <trans-unit id="ba42be644a23dad29f524e1209c856fe9e7d20cf" translate="yes" xml:space="preserve">
          <source>\:angry:</source>
          <target state="translated">\:angry:</target>
        </trans-unit>
        <trans-unit id="42e2cd5dfd596ab5db1e024b35e386e2e2b49a82" translate="yes" xml:space="preserve">
          <source>\:anguished:</source>
          <target state="translated">\:anguished:</target>
        </trans-unit>
        <trans-unit id="c09512e256aad16fa471ab20fb66ce91a87e0858" translate="yes" xml:space="preserve">
          <source>\:ant:</source>
          <target state="translated">\:ant:</target>
        </trans-unit>
        <trans-unit id="b8e989820739e8bed885c3ee73871f53e1047f8f" translate="yes" xml:space="preserve">
          <source>\:apple:</source>
          <target state="translated">\:apple:</target>
        </trans-unit>
        <trans-unit id="5d4aff4545ea93d5ab7617ae5a6c4410f9530721" translate="yes" xml:space="preserve">
          <source>\:arrow_double_down:</source>
          <target state="translated">\:arrow_double_down:</target>
        </trans-unit>
        <trans-unit id="2c6437a87ec16150d50ed43e011df1617a29b699" translate="yes" xml:space="preserve">
          <source>\:arrow_double_up:</source>
          <target state="translated">\:arrow_double_up:</target>
        </trans-unit>
        <trans-unit id="622fb3188cbc77dcf0406cdbbe59d7d320d1a821" translate="yes" xml:space="preserve">
          <source>\:arrow_down:</source>
          <target state="translated">\:arrow_down:</target>
        </trans-unit>
        <trans-unit id="7ccd6e47506c0edfc91a361deba3694c4abbd2ab" translate="yes" xml:space="preserve">
          <source>\:arrow_down_small:</source>
          <target state="translated">\:arrow_down_small:</target>
        </trans-unit>
        <trans-unit id="58427091281cc58a0870d92247d87bba1d4f45c5" translate="yes" xml:space="preserve">
          <source>\:arrow_heading_down:</source>
          <target state="translated">\:arrow_heading_down:</target>
        </trans-unit>
        <trans-unit id="db4af64358e09cbbfd78a9c0e07b5649b2969f6a" translate="yes" xml:space="preserve">
          <source>\:arrow_heading_up:</source>
          <target state="translated">\:arrow_heading_up:</target>
        </trans-unit>
        <trans-unit id="6cd09f162aabf62506bcf47da1e2dd795fba514f" translate="yes" xml:space="preserve">
          <source>\:arrow_left:</source>
          <target state="translated">\:arrow_left:</target>
        </trans-unit>
        <trans-unit id="029efa19ad65054f78041ef0ab1986caa55f0a8f" translate="yes" xml:space="preserve">
          <source>\:arrow_right:</source>
          <target state="translated">\:arrow_right:</target>
        </trans-unit>
        <trans-unit id="a50aee4371aed8411b12b2c86a3d096f0add1f0a" translate="yes" xml:space="preserve">
          <source>\:arrow_up:</source>
          <target state="translated">\:arrow_up:</target>
        </trans-unit>
        <trans-unit id="ff525911412bcb2907803ac06c75d82c5b4ff597" translate="yes" xml:space="preserve">
          <source>\:arrow_up_small:</source>
          <target state="translated">\:arrow_up_small:</target>
        </trans-unit>
        <trans-unit id="d87aac00aa0e4b5361e85865a1c5a805ab6ae7d3" translate="yes" xml:space="preserve">
          <source>\:arrows_clockwise:</source>
          <target state="translated">\:arrows_clockwise:</target>
        </trans-unit>
        <trans-unit id="31ab82fa664be73335a42c002b198e517a8ff562" translate="yes" xml:space="preserve">
          <source>\:arrows_counterclockwise:</source>
          <target state="translated">\:arrows_counterclockwise:</target>
        </trans-unit>
        <trans-unit id="64f7bf6d53f6e32ea11bfd7f83b4d7a3154a23a4" translate="yes" xml:space="preserve">
          <source>\:art:</source>
          <target state="translated">\:art:</target>
        </trans-unit>
        <trans-unit id="01023fa1e472f00ebed742f18e78bc70de91f29a" translate="yes" xml:space="preserve">
          <source>\:articulated_lorry:</source>
          <target state="translated">\:articulated_lorry:</target>
        </trans-unit>
        <trans-unit id="aba4fc03b3ec950610688f5d8e84c122ff714e51" translate="yes" xml:space="preserve">
          <source>\:astonished:</source>
          <target state="translated">\:astonished:</target>
        </trans-unit>
        <trans-unit id="d10aae7a1f58e9e6ea766b23562c710dd1ecfd7d" translate="yes" xml:space="preserve">
          <source>\:athletic_shoe:</source>
          <target state="translated">\:athletic_shoe:</target>
        </trans-unit>
        <trans-unit id="7a8f6ac1fb6de318ab2f30c0cb0cff3986b935f1" translate="yes" xml:space="preserve">
          <source>\:atm:</source>
          <target state="translated">\:atm:</target>
        </trans-unit>
        <trans-unit id="e4102b75192b3b25b4b2401036e2755477e569df" translate="yes" xml:space="preserve">
          <source>\:b:</source>
          <target state="translated">\:b:</target>
        </trans-unit>
        <trans-unit id="ab5ac627fdff2cb25d697a44a12d85e6db922218" translate="yes" xml:space="preserve">
          <source>\:baby:</source>
          <target state="translated">\:baby:</target>
        </trans-unit>
        <trans-unit id="9d4fb89796a2777f46797e2c6ab68afa1427226d" translate="yes" xml:space="preserve">
          <source>\:baby_bottle:</source>
          <target state="translated">\:baby_bottle:</target>
        </trans-unit>
        <trans-unit id="d010ec78859c2ca99e025b26cea21b14e33a7900" translate="yes" xml:space="preserve">
          <source>\:baby_chick:</source>
          <target state="translated">\:baby_chick:</target>
        </trans-unit>
        <trans-unit id="09df6582e602512b14ab929b38515ca66e42be79" translate="yes" xml:space="preserve">
          <source>\:baby_symbol:</source>
          <target state="translated">\:baby_symbol:</target>
        </trans-unit>
        <trans-unit id="5df21ba646a8c814d5235aada423405fa74cb50f" translate="yes" xml:space="preserve">
          <source>\:back:</source>
          <target state="translated">\:back:</target>
        </trans-unit>
        <trans-unit id="3d2798f10aac399b833e56efe30b640f72a3556d" translate="yes" xml:space="preserve">
          <source>\:baggage_claim:</source>
          <target state="translated">\:baggage_claim:</target>
        </trans-unit>
        <trans-unit id="cecc206e4d80c1b3e2ab48aa76d5bfc31ff6d0ee" translate="yes" xml:space="preserve">
          <source>\:balloon:</source>
          <target state="translated">\:balloon:</target>
        </trans-unit>
        <trans-unit id="4199cd1e321f3ab1be6522ea6a0b675de67786cd" translate="yes" xml:space="preserve">
          <source>\:ballot_box_with_check:</source>
          <target state="translated">\:ballot_box_with_check:</target>
        </trans-unit>
        <trans-unit id="5d0b3797c7ba31baf2e0749c5d4a4f8ba56bf535" translate="yes" xml:space="preserve">
          <source>\:bamboo:</source>
          <target state="translated">\:bamboo:</target>
        </trans-unit>
        <trans-unit id="d11a6161828f2006e3d052b1adaaa17f606ee989" translate="yes" xml:space="preserve">
          <source>\:banana:</source>
          <target state="translated">\:banana:</target>
        </trans-unit>
        <trans-unit id="d9e595a27732957689ec9b34c1bb3d5dee7fe43c" translate="yes" xml:space="preserve">
          <source>\:bangbang:</source>
          <target state="translated">\:bangbang:</target>
        </trans-unit>
        <trans-unit id="3bb03c94a50b8f9a2294ee0d81b367aa2e825378" translate="yes" xml:space="preserve">
          <source>\:bank:</source>
          <target state="translated">\:bank:</target>
        </trans-unit>
        <trans-unit id="1e4410a56e42d963bfa2389e8187e2058d5a9b6f" translate="yes" xml:space="preserve">
          <source>\:bar_chart:</source>
          <target state="translated">\:bar_chart:</target>
        </trans-unit>
        <trans-unit id="42b83acdd61aec84b4023d5d1462556019f47da0" translate="yes" xml:space="preserve">
          <source>\:barber:</source>
          <target state="translated">\:barber:</target>
        </trans-unit>
        <trans-unit id="8e90d96fb37fe316a951852c3cc3adae8eff65ca" translate="yes" xml:space="preserve">
          <source>\:baseball:</source>
          <target state="translated">\:baseball:</target>
        </trans-unit>
        <trans-unit id="24fc5902a188c38e7efe5373b666a7e0ed2d17ec" translate="yes" xml:space="preserve">
          <source>\:basketball:</source>
          <target state="translated">\:basketball:</target>
        </trans-unit>
        <trans-unit id="6516bcba7024f76199acaa52f93dabe7de0c3521" translate="yes" xml:space="preserve">
          <source>\:bath:</source>
          <target state="translated">\:bath:</target>
        </trans-unit>
        <trans-unit id="d9bf42df05db447416c881c25adc3bb7e92ff193" translate="yes" xml:space="preserve">
          <source>\:bathtub:</source>
          <target state="translated">\:bathtub:</target>
        </trans-unit>
        <trans-unit id="0764d9168dc86c10755f31a62b4e1fbfff2bc957" translate="yes" xml:space="preserve">
          <source>\:battery:</source>
          <target state="translated">\:battery:</target>
        </trans-unit>
        <trans-unit id="1ae619dbbe5a156007f4353dcf0b21ee74031169" translate="yes" xml:space="preserve">
          <source>\:bear:</source>
          <target state="translated">\:bear:</target>
        </trans-unit>
        <trans-unit id="cbd2d7da879ceb97380740ad17ac3fa1d4659910" translate="yes" xml:space="preserve">
          <source>\:bee:</source>
          <target state="translated">\:bee:</target>
        </trans-unit>
        <trans-unit id="7730b8dbf405b6dc525134e6ef15bddc34b74ba0" translate="yes" xml:space="preserve">
          <source>\:beer:</source>
          <target state="translated">\:beer:</target>
        </trans-unit>
        <trans-unit id="2059778557562af988942b1d82227e4db48bd2e8" translate="yes" xml:space="preserve">
          <source>\:beers:</source>
          <target state="translated">\:beers:</target>
        </trans-unit>
        <trans-unit id="f133e91914fba621435d5708c21214b2486852b9" translate="yes" xml:space="preserve">
          <source>\:beetle:</source>
          <target state="translated">\:beetle:</target>
        </trans-unit>
        <trans-unit id="89922ca4b55877f00201f11118edae89680c7dcd" translate="yes" xml:space="preserve">
          <source>\:beginner:</source>
          <target state="translated">\:beginner:</target>
        </trans-unit>
        <trans-unit id="92fffa11964dfbcd06be0baf0273460988e09fde" translate="yes" xml:space="preserve">
          <source>\:bell:</source>
          <target state="translated">\:bell:</target>
        </trans-unit>
        <trans-unit id="4ad4176546e9a9275198c4baae37930e18a9312e" translate="yes" xml:space="preserve">
          <source>\:bento:</source>
          <target state="translated">\:bento:</target>
        </trans-unit>
        <trans-unit id="66c33ece884eb16cbee78356e2077b985aa67765" translate="yes" xml:space="preserve">
          <source>\:bicyclist:</source>
          <target state="translated">\:bicyclist:</target>
        </trans-unit>
        <trans-unit id="7b45e3c06d2f1da9e68a6af916498355b961076f" translate="yes" xml:space="preserve">
          <source>\:bike:</source>
          <target state="translated">\:bike:</target>
        </trans-unit>
        <trans-unit id="d98c194c90e64d31376a0fc97e1df1549772bddd" translate="yes" xml:space="preserve">
          <source>\:bikini:</source>
          <target state="translated">\:bikini:</target>
        </trans-unit>
        <trans-unit id="2552a9f774e659d536071d0b778cb74f12f6edda" translate="yes" xml:space="preserve">
          <source>\:bird:</source>
          <target state="translated">\:bird:</target>
        </trans-unit>
        <trans-unit id="9afad294f5e8c08185c013cb984a63a477319f59" translate="yes" xml:space="preserve">
          <source>\:birthday:</source>
          <target state="translated">\:birthday:</target>
        </trans-unit>
        <trans-unit id="c4d3a9b4eaefd3cbec5fd68111eefed1e334135d" translate="yes" xml:space="preserve">
          <source>\:black_joker:</source>
          <target state="translated">\:black_joker:</target>
        </trans-unit>
        <trans-unit id="061f3ba508039fd9d7ad248b3d1a0e18a0a8db7c" translate="yes" xml:space="preserve">
          <source>\:black_nib:</source>
          <target state="translated">\:black_nib:</target>
        </trans-unit>
        <trans-unit id="b2258ed2f37a23858af129cd56421add469b1aee" translate="yes" xml:space="preserve">
          <source>\:black_square_button:</source>
          <target state="translated">\:black_square_button:</target>
        </trans-unit>
        <trans-unit id="0c2dae2f9b957347a3e8a3d58fc66adc09070687" translate="yes" xml:space="preserve">
          <source>\:blossom:</source>
          <target state="translated">\:blossom:</target>
        </trans-unit>
        <trans-unit id="7d4a6dbd607e8908444532087e30b152a1c8175b" translate="yes" xml:space="preserve">
          <source>\:blowfish:</source>
          <target state="translated">\:blowfish:</target>
        </trans-unit>
        <trans-unit id="3490f851ecfaa4f251e4562cd19bd0803cacb00e" translate="yes" xml:space="preserve">
          <source>\:blue_book:</source>
          <target state="translated">\:blue_book:</target>
        </trans-unit>
        <trans-unit id="bb3afffd8470160efedf54a6588a88d71c1d1a7b" translate="yes" xml:space="preserve">
          <source>\:blue_car:</source>
          <target state="translated">\:blue_car:</target>
        </trans-unit>
        <trans-unit id="25d1442dd04cdca1e685558156eaa54c74bbc879" translate="yes" xml:space="preserve">
          <source>\:blue_heart:</source>
          <target state="translated">\:blue_heart:</target>
        </trans-unit>
        <trans-unit id="82a906b1778e8b0418d9af79c9c483d630420308" translate="yes" xml:space="preserve">
          <source>\:blush:</source>
          <target state="translated">\:blush:</target>
        </trans-unit>
        <trans-unit id="42d166f35790bd6389c4b44548d149a7f1fcdb85" translate="yes" xml:space="preserve">
          <source>\:boar:</source>
          <target state="translated">\:boar:</target>
        </trans-unit>
        <trans-unit id="2b19e6b34cfbdb3124bc8d0240a31d6dd4b062c5" translate="yes" xml:space="preserve">
          <source>\:boat:</source>
          <target state="translated">\:boat:</target>
        </trans-unit>
        <trans-unit id="8590e6a1a42f2b98222f933092ccc7c6023aa363" translate="yes" xml:space="preserve">
          <source>\:bomb:</source>
          <target state="translated">\:bomb:</target>
        </trans-unit>
        <trans-unit id="970d8d3a4fdd5aa9227f9f128f9dea9b092d5b5f" translate="yes" xml:space="preserve">
          <source>\:book:</source>
          <target state="translated">\:book:</target>
        </trans-unit>
        <trans-unit id="a173ff6b6b32a37b87ecca0c64d3a836d68eb516" translate="yes" xml:space="preserve">
          <source>\:bookmark:</source>
          <target state="translated">\:bookmark:</target>
        </trans-unit>
        <trans-unit id="3d519573a0662853bf92a77281e282c0a7e13d70" translate="yes" xml:space="preserve">
          <source>\:bookmark_tabs:</source>
          <target state="translated">\:bookmark_tabs:</target>
        </trans-unit>
        <trans-unit id="62d05f3ed561f3cb7114a826730ffc4258546dd0" translate="yes" xml:space="preserve">
          <source>\:books:</source>
          <target state="translated">\:books:</target>
        </trans-unit>
        <trans-unit id="ad3d774cdc66ee390a39fe571f75485ab4665914" translate="yes" xml:space="preserve">
          <source>\:boom:</source>
          <target state="translated">\:boom:</target>
        </trans-unit>
        <trans-unit id="3879514154f077b60d19362abb7c4e91ea7dc591" translate="yes" xml:space="preserve">
          <source>\:boot:</source>
          <target state="translated">\:boot:</target>
        </trans-unit>
        <trans-unit id="91204e4f6276832e4a953854b072ed696505e25f" translate="yes" xml:space="preserve">
          <source>\:bouquet:</source>
          <target state="translated">\:bouquet:</target>
        </trans-unit>
        <trans-unit id="c8be62d34f03816a417065a229daeb5da3cae06d" translate="yes" xml:space="preserve">
          <source>\:bow:</source>
          <target state="translated">\:bow:</target>
        </trans-unit>
        <trans-unit id="6263825346f295aa99461b59676a511a0252b64b" translate="yes" xml:space="preserve">
          <source>\:bowling:</source>
          <target state="translated">\:bowling:</target>
        </trans-unit>
        <trans-unit id="8bbccc68bff7d5dfb245a413b43fbcf32519f2a8" translate="yes" xml:space="preserve">
          <source>\:boy:</source>
          <target state="translated">\:boy:</target>
        </trans-unit>
        <trans-unit id="272e3d887cd2efd548e12a2a195d5445bcc337c9" translate="yes" xml:space="preserve">
          <source>\:bread:</source>
          <target state="translated">\:bread:</target>
        </trans-unit>
        <trans-unit id="86d6ee0cf6d788a1a253bc8069c6e0782b440662" translate="yes" xml:space="preserve">
          <source>\:bride_with_veil:</source>
          <target state="translated">\:bride_with_veil:</target>
        </trans-unit>
        <trans-unit id="8977b37e2f9f78ad5fd352469ec01ebca11a72e5" translate="yes" xml:space="preserve">
          <source>\:bridge_at_night:</source>
          <target state="translated">\:bridge_at_night:</target>
        </trans-unit>
        <trans-unit id="b69c7466c99448b76af9196fa98455462dd997f4" translate="yes" xml:space="preserve">
          <source>\:briefcase:</source>
          <target state="translated">\:briefcase:</target>
        </trans-unit>
        <trans-unit id="1d4aef8e2d826b9d9a20a959c9e3e7c083369407" translate="yes" xml:space="preserve">
          <source>\:broken_heart:</source>
          <target state="translated">\:broken_heart:</target>
        </trans-unit>
        <trans-unit id="4e08bdb51eef2fdf8195b46b4b8a64a4d5523568" translate="yes" xml:space="preserve">
          <source>\:bug:</source>
          <target state="translated">\:bug:</target>
        </trans-unit>
        <trans-unit id="e8bc29df5cca9498c76eb46ac437dd5eba730bba" translate="yes" xml:space="preserve">
          <source>\:bulb:</source>
          <target state="translated">\:bulb:</target>
        </trans-unit>
        <trans-unit id="b1493ae042dd87073780ca9a3d8bd5ca3ff7f06a" translate="yes" xml:space="preserve">
          <source>\:bullettrain_front:</source>
          <target state="translated">\:bullettrain_front:</target>
        </trans-unit>
        <trans-unit id="616a378a9b1c951df7782861ce06a97afaec4d6c" translate="yes" xml:space="preserve">
          <source>\:bullettrain_side:</source>
          <target state="translated">\:bullettrain_side:</target>
        </trans-unit>
        <trans-unit id="a4e9808a17a429c6b73c22ed790950f52801be8d" translate="yes" xml:space="preserve">
          <source>\:bus:</source>
          <target state="translated">\:bus:</target>
        </trans-unit>
        <trans-unit id="e30a14372184bbc52d5a7cd8cbbe8a4a1f10e23d" translate="yes" xml:space="preserve">
          <source>\:busstop:</source>
          <target state="translated">\:busstop:</target>
        </trans-unit>
        <trans-unit id="19b0242e1c3b01344acbdf4fc3f3902d5f522d6a" translate="yes" xml:space="preserve">
          <source>\:bust_in_silhouette:</source>
          <target state="translated">\:bust_in_silhouette:</target>
        </trans-unit>
        <trans-unit id="eaf0e2984c653e00f1740952845caa79b76beb68" translate="yes" xml:space="preserve">
          <source>\:busts_in_silhouette:</source>
          <target state="translated">\:busts_in_silhouette:</target>
        </trans-unit>
        <trans-unit id="4de9a96892ae20904c12f6fc62dcc760234f1848" translate="yes" xml:space="preserve">
          <source>\:cactus:</source>
          <target state="translated">\:cactus:</target>
        </trans-unit>
        <trans-unit id="804920ea73fb042b9e4b4637b553dab9046683bb" translate="yes" xml:space="preserve">
          <source>\:cake:</source>
          <target state="translated">\:cake:</target>
        </trans-unit>
        <trans-unit id="e14a6944c4c058ded6a348a993afcd9519291ba9" translate="yes" xml:space="preserve">
          <source>\:calendar:</source>
          <target state="translated">\:calendar:</target>
        </trans-unit>
        <trans-unit id="33c0e3dff3361506872cf8789c5ac3b5dbf741d0" translate="yes" xml:space="preserve">
          <source>\:calling:</source>
          <target state="translated">\:calling:</target>
        </trans-unit>
        <trans-unit id="ad24535a1d32a594471fc14ebe91a3c3d6352a2e" translate="yes" xml:space="preserve">
          <source>\:camel:</source>
          <target state="translated">\:camel:</target>
        </trans-unit>
        <trans-unit id="11cf7a36cba684fee5c34c419336074d9db220cd" translate="yes" xml:space="preserve">
          <source>\:camera:</source>
          <target state="translated">\:camera:</target>
        </trans-unit>
        <trans-unit id="d3a930fcdf4c81c50c6f00cf232c86b8268da70c" translate="yes" xml:space="preserve">
          <source>\:candy:</source>
          <target state="translated">\:candy:</target>
        </trans-unit>
        <trans-unit id="c69da1a9b8445e81cbc8f931c2c421769eea9d73" translate="yes" xml:space="preserve">
          <source>\:capital_abcd:</source>
          <target state="translated">\:capital_abcd:</target>
        </trans-unit>
        <trans-unit id="ba2c4dc425438792799e013ffb513e81da66428b" translate="yes" xml:space="preserve">
          <source>\:car:</source>
          <target state="translated">\:car:</target>
        </trans-unit>
        <trans-unit id="d3271c01a5dc6ec121cb9996c5caae7caacbe3f7" translate="yes" xml:space="preserve">
          <source>\:card_index:</source>
          <target state="translated">\:card_index:</target>
        </trans-unit>
        <trans-unit id="45b18e8532d195296dca46bd464c58e3dcfc9e30" translate="yes" xml:space="preserve">
          <source>\:carousel_horse:</source>
          <target state="translated">\:carousel_horse:</target>
        </trans-unit>
        <trans-unit id="76d2e8da1e4a4a21caa389964fa1bd8107b73bfe" translate="yes" xml:space="preserve">
          <source>\:cat2:</source>
          <target state="translated">\:cat2:</target>
        </trans-unit>
        <trans-unit id="5c2065b86b84530c8210be062bcba6e6a3b7e6da" translate="yes" xml:space="preserve">
          <source>\:cat:</source>
          <target state="translated">\:cat:</target>
        </trans-unit>
        <trans-unit id="f4a99889a998bf98fe4aaeb53f1422ac1a4f6ba6" translate="yes" xml:space="preserve">
          <source>\:cd:</source>
          <target state="translated">\:cd:</target>
        </trans-unit>
        <trans-unit id="b4c2bd16ee5b1f1cb87e0e5a6b3389d3e783dbca" translate="yes" xml:space="preserve">
          <source>\:chart:</source>
          <target state="translated">\:chart:</target>
        </trans-unit>
        <trans-unit id="327891e0f62b916ea70df23c9591512503f98d53" translate="yes" xml:space="preserve">
          <source>\:chart_with_downwards_trend:</source>
          <target state="translated">\:chart_with_downwards_trend:</target>
        </trans-unit>
        <trans-unit id="a0d10c9441286bdb39b2aaa95431e49fee31a184" translate="yes" xml:space="preserve">
          <source>\:chart_with_upwards_trend:</source>
          <target state="translated">\:chart_with_upwards_trend:</target>
        </trans-unit>
        <trans-unit id="ece72c3d59793710d32e596e928cee3fc1329324" translate="yes" xml:space="preserve">
          <source>\:checkered_flag:</source>
          <target state="translated">\:checkered_flag:</target>
        </trans-unit>
        <trans-unit id="efa9474e0b8f39b1881fc54935218b4331e451c1" translate="yes" xml:space="preserve">
          <source>\:cherries:</source>
          <target state="translated">\:cherries:</target>
        </trans-unit>
        <trans-unit id="3efe664d4dea4441a603d07026ae945f9d2c66cd" translate="yes" xml:space="preserve">
          <source>\:cherry_blossom:</source>
          <target state="translated">\:cherry_blossom:</target>
        </trans-unit>
        <trans-unit id="bef5b1a8fe633b79f95b2cf4cda2a806f62203a6" translate="yes" xml:space="preserve">
          <source>\:chestnut:</source>
          <target state="translated">\:chestnut:</target>
        </trans-unit>
        <trans-unit id="8ba3cfb2a11087e59f8888ab22c473d13b20e5ed" translate="yes" xml:space="preserve">
          <source>\:chicken:</source>
          <target state="translated">\:chicken:</target>
        </trans-unit>
        <trans-unit id="5afe9cd04be13fa9b25c4f3bd2e42f5b7e3f5b5a" translate="yes" xml:space="preserve">
          <source>\:children_crossing:</source>
          <target state="translated">\:children_crossing:</target>
        </trans-unit>
        <trans-unit id="d51b02aa5143f15d7da7299a05b567d5decf8435" translate="yes" xml:space="preserve">
          <source>\:chocolate_bar:</source>
          <target state="translated">\:chocolate_bar:</target>
        </trans-unit>
        <trans-unit id="ae6f17cbd30e71f8d0c3f60de4cb529343d1f0cd" translate="yes" xml:space="preserve">
          <source>\:christmas_tree:</source>
          <target state="translated">\:christmas_tree:</target>
        </trans-unit>
        <trans-unit id="00cbedbeecde20b181128a57d622eedd0b6a0eea" translate="yes" xml:space="preserve">
          <source>\:church:</source>
          <target state="translated">\:church:</target>
        </trans-unit>
        <trans-unit id="949b17cf645cb7661a6a9a7c6a28034736baa239" translate="yes" xml:space="preserve">
          <source>\:cinema:</source>
          <target state="translated">\:cinema:</target>
        </trans-unit>
        <trans-unit id="b8c8ef3216b0263eda948f7d1606fe83423d2172" translate="yes" xml:space="preserve">
          <source>\:circus_tent:</source>
          <target state="translated">\:circus_tent:</target>
        </trans-unit>
        <trans-unit id="08c6dd2e30e8213b17b6b9a30e42e79da329356e" translate="yes" xml:space="preserve">
          <source>\:city_sunrise:</source>
          <target state="translated">\:city_sunrise:</target>
        </trans-unit>
        <trans-unit id="016020845fd7997dc7231baf5939ea599a8cce35" translate="yes" xml:space="preserve">
          <source>\:city_sunset:</source>
          <target state="translated">\:city_sunset:</target>
        </trans-unit>
        <trans-unit id="0d027291920d722cf1c5b6644aebc5b553faa332" translate="yes" xml:space="preserve">
          <source>\:cl:</source>
          <target state="translated">\:cl:</target>
        </trans-unit>
        <trans-unit id="79ccfb9176f2f11147d70ca12488703e288830ce" translate="yes" xml:space="preserve">
          <source>\:clap:</source>
          <target state="translated">\:clap:</target>
        </trans-unit>
        <trans-unit id="8ac74f199fb3f9a3e2c55edd40ec4877b284555f" translate="yes" xml:space="preserve">
          <source>\:clapper:</source>
          <target state="translated">\:clapper:</target>
        </trans-unit>
        <trans-unit id="876e3689943b957c820a27121b361be1dd903fb9" translate="yes" xml:space="preserve">
          <source>\:clipboard:</source>
          <target state="translated">\:clipboard:</target>
        </trans-unit>
        <trans-unit id="744ed42b56d57b190999f12a2a43146e5f293808" translate="yes" xml:space="preserve">
          <source>\:clock1030:</source>
          <target state="translated">\:clock1030:</target>
        </trans-unit>
        <trans-unit id="435ea5e680721a3247998e4b510e392229e0119f" translate="yes" xml:space="preserve">
          <source>\:clock10:</source>
          <target state="translated">\:clock10:</target>
        </trans-unit>
        <trans-unit id="4f69d805697ab303839e31961a9c187a016bfce0" translate="yes" xml:space="preserve">
          <source>\:clock1130:</source>
          <target state="translated">\:clock1130:</target>
        </trans-unit>
        <trans-unit id="952a864afce948aaea217010227a97438ca7e276" translate="yes" xml:space="preserve">
          <source>\:clock11:</source>
          <target state="translated">\:clock11:</target>
        </trans-unit>
        <trans-unit id="ed60bee35ba5dec27cd13c56d7c882c13d69007a" translate="yes" xml:space="preserve">
          <source>\:clock1230:</source>
          <target state="translated">\:clock1230:</target>
        </trans-unit>
        <trans-unit id="cc6adfa2c6ac16a8cd9dd7f560a0f9462bffd14d" translate="yes" xml:space="preserve">
          <source>\:clock12:</source>
          <target state="translated">\:clock12:</target>
        </trans-unit>
        <trans-unit id="63441d5efb9f24676af5d8ffc2acbe4db2b78441" translate="yes" xml:space="preserve">
          <source>\:clock130:</source>
          <target state="translated">\:clock130:</target>
        </trans-unit>
        <trans-unit id="3d143639e3520cb5fb6c73d981cd76ed8d3d1cb0" translate="yes" xml:space="preserve">
          <source>\:clock1:</source>
          <target state="translated">\:clock1:</target>
        </trans-unit>
        <trans-unit id="0e2251e26f29b0845946a723411149eb25223f7c" translate="yes" xml:space="preserve">
          <source>\:clock230:</source>
          <target state="translated">\:clock230:</target>
        </trans-unit>
        <trans-unit id="959961ac716dab98a87da53cbeb025f08f65ee79" translate="yes" xml:space="preserve">
          <source>\:clock2:</source>
          <target state="translated">\:clock2:</target>
        </trans-unit>
        <trans-unit id="cd584ce39e373efaf2660e564d5f3cd7c5065d9f" translate="yes" xml:space="preserve">
          <source>\:clock330:</source>
          <target state="translated">\:clock330:</target>
        </trans-unit>
        <trans-unit id="bb8744f28b5b86ba6bc42e9d8ba327aecacea9c3" translate="yes" xml:space="preserve">
          <source>\:clock3:</source>
          <target state="translated">\:clock3:</target>
        </trans-unit>
        <trans-unit id="b9dd2bf4f00e61bf73e3ca0e6f2969c9b7ba4ac4" translate="yes" xml:space="preserve">
          <source>\:clock430:</source>
          <target state="translated">\:clock430:</target>
        </trans-unit>
        <trans-unit id="9531eb956b2a8a1bdc0dfc12f457f543d1b98fad" translate="yes" xml:space="preserve">
          <source>\:clock4:</source>
          <target state="translated">\:clock4:</target>
        </trans-unit>
        <trans-unit id="2849116ff28325b0bb3627954dcc7dec952bf8bd" translate="yes" xml:space="preserve">
          <source>\:clock530:</source>
          <target state="translated">\:clock530:</target>
        </trans-unit>
        <trans-unit id="ad8c1f67bae2a02dbb567e041b219f650047c22b" translate="yes" xml:space="preserve">
          <source>\:clock5:</source>
          <target state="translated">\:clock5:</target>
        </trans-unit>
        <trans-unit id="ae3a58504e2fa8889a89a0e053e7fc92792f5e49" translate="yes" xml:space="preserve">
          <source>\:clock630:</source>
          <target state="translated">\:clock630:</target>
        </trans-unit>
        <trans-unit id="756826e14582dca4a14bdfb211f54fec9b88ba1c" translate="yes" xml:space="preserve">
          <source>\:clock6:</source>
          <target state="translated">\:clock6:</target>
        </trans-unit>
        <trans-unit id="f442453ee237ad672534c07a866e44aadbda45e1" translate="yes" xml:space="preserve">
          <source>\:clock730:</source>
          <target state="translated">\:clock730:</target>
        </trans-unit>
        <trans-unit id="1e5700327cd19762fbabeb98183265b66afa634b" translate="yes" xml:space="preserve">
          <source>\:clock7:</source>
          <target state="translated">\:clock7:</target>
        </trans-unit>
        <trans-unit id="b19a562207fc617a4f662dbece9af64dd39ad40e" translate="yes" xml:space="preserve">
          <source>\:clock830:</source>
          <target state="translated">\:clock830:</target>
        </trans-unit>
        <trans-unit id="ddb821b6c6141af68ce6bc4ca8b32ce58108b5bd" translate="yes" xml:space="preserve">
          <source>\:clock8:</source>
          <target state="translated">\:clock8:</target>
        </trans-unit>
        <trans-unit id="367c43d3996675c66df5314d167ad24986ebeab8" translate="yes" xml:space="preserve">
          <source>\:clock930:</source>
          <target state="translated">\:clock930:</target>
        </trans-unit>
        <trans-unit id="8f9acc13159133cd5b9e08035533675276b1214b" translate="yes" xml:space="preserve">
          <source>\:clock9:</source>
          <target state="translated">\:clock9:</target>
        </trans-unit>
        <trans-unit id="e92d71a0adef480e954bf50ef24dcc60ab6c9954" translate="yes" xml:space="preserve">
          <source>\:closed_book:</source>
          <target state="translated">\:closed_book:</target>
        </trans-unit>
        <trans-unit id="e2e9409d8576371be67e1b091466e1324536b70c" translate="yes" xml:space="preserve">
          <source>\:closed_lock_with_key:</source>
          <target state="translated">\:closed_lock_with_key:</target>
        </trans-unit>
        <trans-unit id="5335cfdfcc7b6af2a496aa978d8ca253cfb4ee67" translate="yes" xml:space="preserve">
          <source>\:closed_umbrella:</source>
          <target state="translated">\:closed_umbrella:</target>
        </trans-unit>
        <trans-unit id="f2dbdb894f1aca874a85ca80b3700f9b7a5317b6" translate="yes" xml:space="preserve">
          <source>\:cloud:</source>
          <target state="translated">\:cloud:</target>
        </trans-unit>
        <trans-unit id="bb0df99b24d1bc93f0b3e26a67d7e92dbbd279bc" translate="yes" xml:space="preserve">
          <source>\:cocktail:</source>
          <target state="translated">\:cocktail:</target>
        </trans-unit>
        <trans-unit id="4a30e93f97af8e5aab2f2f2edede845d48a5f944" translate="yes" xml:space="preserve">
          <source>\:coffee:</source>
          <target state="translated">\:coffee:</target>
        </trans-unit>
        <trans-unit id="bebac1677ca37fc0b057d03f209f08f3a270a33b" translate="yes" xml:space="preserve">
          <source>\:cold_sweat:</source>
          <target state="translated">\:cold_sweat:</target>
        </trans-unit>
        <trans-unit id="7a9bab87bafe436374641127c9cd64e048f141d0" translate="yes" xml:space="preserve">
          <source>\:computer:</source>
          <target state="translated">\:computer:</target>
        </trans-unit>
        <trans-unit id="e1867aa8ddb75c011d622db24c5adbf7d9076832" translate="yes" xml:space="preserve">
          <source>\:confetti_ball:</source>
          <target state="translated">\:confetti_ball:</target>
        </trans-unit>
        <trans-unit id="62d40c2748c878a52bae54692ebd319eda8af4ca" translate="yes" xml:space="preserve">
          <source>\:confounded:</source>
          <target state="translated">\:confounded:</target>
        </trans-unit>
        <trans-unit id="2714a15411a00f9313125b6f0e86641488d1620a" translate="yes" xml:space="preserve">
          <source>\:confused:</source>
          <target state="translated">\:confused:</target>
        </trans-unit>
        <trans-unit id="5adf730be91ba2ae73f3645a5ada8a93b2c53c35" translate="yes" xml:space="preserve">
          <source>\:congratulations:</source>
          <target state="translated">\:congratulations:</target>
        </trans-unit>
        <trans-unit id="75e27a4aac67a711d8f609df96f640d36e0139d8" translate="yes" xml:space="preserve">
          <source>\:construction:</source>
          <target state="translated">\:construction:</target>
        </trans-unit>
        <trans-unit id="e6409f5ab3fac7d4270bd0258c3c576add3dcc3f" translate="yes" xml:space="preserve">
          <source>\:construction_worker:</source>
          <target state="translated">\:construction_worker:</target>
        </trans-unit>
        <trans-unit id="9794ebf7753be31f5ff1fe81ea24888d17c1a809" translate="yes" xml:space="preserve">
          <source>\:convenience_store:</source>
          <target state="translated">\:convenience_store:</target>
        </trans-unit>
        <trans-unit id="d4b4b052a2ad50f11cba76c00b6b9093d2fd9daa" translate="yes" xml:space="preserve">
          <source>\:cookie:</source>
          <target state="translated">\:cookie:</target>
        </trans-unit>
        <trans-unit id="91d39a35411cde7ab85bf802c4e9cce80eda4b87" translate="yes" xml:space="preserve">
          <source>\:cool:</source>
          <target state="translated">\:cool:</target>
        </trans-unit>
        <trans-unit id="c06bfa21ae4291ed9151914ced513cfef5ea9f9c" translate="yes" xml:space="preserve">
          <source>\:cop:</source>
          <target state="translated">\:cop:</target>
        </trans-unit>
        <trans-unit id="9244e215fb7575cc8e28f02f1845135e82da5dcf" translate="yes" xml:space="preserve">
          <source>\:corn:</source>
          <target state="translated">\:corn:</target>
        </trans-unit>
        <trans-unit id="b295d76b0beb0af143498cdc9e9328e0c78d476d" translate="yes" xml:space="preserve">
          <source>\:couple:</source>
          <target state="translated">\:couple:</target>
        </trans-unit>
        <trans-unit id="d39ef065b887bd2d13ba05d4eb95b0c32bcf7dca" translate="yes" xml:space="preserve">
          <source>\:couple_with_heart:</source>
          <target state="translated">\:couple_with_heart:</target>
        </trans-unit>
        <trans-unit id="d397db0e5a0d9686f03e8a79e4c036d6de88f361" translate="yes" xml:space="preserve">
          <source>\:couplekiss:</source>
          <target state="translated">\:couplekiss:</target>
        </trans-unit>
        <trans-unit id="0acb28380ae91098e33071cb9d102745a465f68b" translate="yes" xml:space="preserve">
          <source>\:cow2:</source>
          <target state="translated">\:cow2:</target>
        </trans-unit>
        <trans-unit id="ec88a6a443f6512ca0663e7680f021e2165590c3" translate="yes" xml:space="preserve">
          <source>\:cow:</source>
          <target state="translated">\:cow:</target>
        </trans-unit>
        <trans-unit id="767034451067943c3013a2ed1c06b729b8ae4509" translate="yes" xml:space="preserve">
          <source>\:credit_card:</source>
          <target state="translated">\:credit_card:</target>
        </trans-unit>
        <trans-unit id="e27537207e725d715b0b802682cdcfddeafcd9e3" translate="yes" xml:space="preserve">
          <source>\:crescent_moon:</source>
          <target state="translated">\:crescent_moon:</target>
        </trans-unit>
        <trans-unit id="4ac04ed7f3aac47dfb476f964da1458dea4c333a" translate="yes" xml:space="preserve">
          <source>\:crocodile:</source>
          <target state="translated">\:crocodile:</target>
        </trans-unit>
        <trans-unit id="404faf6aee7cb682e8fc697f4c2b945eaa732f54" translate="yes" xml:space="preserve">
          <source>\:crossed_flags:</source>
          <target state="translated">\:crossed_flags:</target>
        </trans-unit>
        <trans-unit id="4b1590a0aee056fad455e6f52e01369b2f3c0755" translate="yes" xml:space="preserve">
          <source>\:crown:</source>
          <target state="translated">\:crown:</target>
        </trans-unit>
        <trans-unit id="e3d209f1725877e7bf4712fdb87fbdaf861b880f" translate="yes" xml:space="preserve">
          <source>\:cry:</source>
          <target state="translated">\:cry:</target>
        </trans-unit>
        <trans-unit id="e7e3ebaa41104a5f63670e42dc09f50fe12b52c4" translate="yes" xml:space="preserve">
          <source>\:crying_cat_face:</source>
          <target state="translated">\:crying_cat_face:</target>
        </trans-unit>
        <trans-unit id="ea2205e04ff6734fab2c1d5c7348f17c96acd2a4" translate="yes" xml:space="preserve">
          <source>\:crystal_ball:</source>
          <target state="translated">\:crystal_ball:</target>
        </trans-unit>
        <trans-unit id="6298689b85b5483f6526e762d4f0409f96cdb710" translate="yes" xml:space="preserve">
          <source>\:cupid:</source>
          <target state="translated">\:cupid:</target>
        </trans-unit>
        <trans-unit id="a1bd8f679d0869072e418184d4b8f12c0444fa7b" translate="yes" xml:space="preserve">
          <source>\:curly_loop:</source>
          <target state="translated">\:curly_loop:</target>
        </trans-unit>
        <trans-unit id="f6e70f6e9e914a8d45564cb9bfe35ddf87abb048" translate="yes" xml:space="preserve">
          <source>\:currency_exchange:</source>
          <target state="translated">\:currency_exchange:</target>
        </trans-unit>
        <trans-unit id="8987fa8fdbb658e5056b34f8d7c2a06dcf7b100e" translate="yes" xml:space="preserve">
          <source>\:curry:</source>
          <target state="translated">\:curry:</target>
        </trans-unit>
        <trans-unit id="bdd61282c42f489e1387c0e31ed63a13e919783f" translate="yes" xml:space="preserve">
          <source>\:custard:</source>
          <target state="translated">\:custard:</target>
        </trans-unit>
        <trans-unit id="5b14ca39208fa1dab5bc777c3c55db01690f31eb" translate="yes" xml:space="preserve">
          <source>\:customs:</source>
          <target state="translated">\:customs:</target>
        </trans-unit>
        <trans-unit id="bb241231f43faa0f1c953a9749b424b5b6a845d8" translate="yes" xml:space="preserve">
          <source>\:cyclone:</source>
          <target state="translated">\:cyclone:</target>
        </trans-unit>
        <trans-unit id="7eefdc42e63a3a082765dfe6c2a6d87f835f0027" translate="yes" xml:space="preserve">
          <source>\:dancer:</source>
          <target state="translated">\:dancer:</target>
        </trans-unit>
        <trans-unit id="a2ffecb4690d13bb6d45329d061ce6a0ee5c605d" translate="yes" xml:space="preserve">
          <source>\:dancers:</source>
          <target state="translated">\:dancers:</target>
        </trans-unit>
        <trans-unit id="03600dc9aa3a5c8ebee1c4f7e4472404baca8eeb" translate="yes" xml:space="preserve">
          <source>\:dango:</source>
          <target state="translated">\:dango:</target>
        </trans-unit>
        <trans-unit id="4d3fb56abaebee7059f1129afa3f6c1bdffe61d9" translate="yes" xml:space="preserve">
          <source>\:dart:</source>
          <target state="translated">\:dart:</target>
        </trans-unit>
        <trans-unit id="8e6b7b0ee69309159fb8fa003d5580eeec491377" translate="yes" xml:space="preserve">
          <source>\:dash:</source>
          <target state="translated">\:dash:</target>
        </trans-unit>
        <trans-unit id="b800a41fcc4f9cf35ef55ed4b79e721c93d9ddb1" translate="yes" xml:space="preserve">
          <source>\:date:</source>
          <target state="translated">\:date:</target>
        </trans-unit>
        <trans-unit id="643b0ebfff2d297c07ff233de84ed9cb1c681693" translate="yes" xml:space="preserve">
          <source>\:deciduous_tree:</source>
          <target state="translated">\:deciduous_tree:</target>
        </trans-unit>
        <trans-unit id="b63cb7e512d56e698d0d07fd2ec6d397a34ba88d" translate="yes" xml:space="preserve">
          <source>\:department_store:</source>
          <target state="translated">\:department_store:</target>
        </trans-unit>
        <trans-unit id="9ba23c4464cd777d80899efcb17adb558780372b" translate="yes" xml:space="preserve">
          <source>\:diamond_shape_with_a_dot_inside:</source>
          <target state="translated">\:diamond_shape_with_a_dot_inside:</target>
        </trans-unit>
        <trans-unit id="6148e36f0aaba2457944b7921279e800a77318e5" translate="yes" xml:space="preserve">
          <source>\:disappointed:</source>
          <target state="translated">\:disappointed:</target>
        </trans-unit>
        <trans-unit id="1ac552d9778439cbd29ca541abaa32f62299a310" translate="yes" xml:space="preserve">
          <source>\:disappointed_relieved:</source>
          <target state="translated">\:disappointed_relieved:</target>
        </trans-unit>
        <trans-unit id="fb264230cde9cd68792fe328aad265e09dcf1a77" translate="yes" xml:space="preserve">
          <source>\:dizzy:</source>
          <target state="translated">\:dizzy:</target>
        </trans-unit>
        <trans-unit id="821f665e372508c6b8c69e5be501e485c595aead" translate="yes" xml:space="preserve">
          <source>\:dizzy_face:</source>
          <target state="translated">\:dizzy_face:</target>
        </trans-unit>
        <trans-unit id="764860e5d3d307b2aff89ef14e445a32e803beec" translate="yes" xml:space="preserve">
          <source>\:do_not_litter:</source>
          <target state="translated">\:do_not_litter:</target>
        </trans-unit>
        <trans-unit id="6f726947c6593155c8dc8ce2f3a58462b0607223" translate="yes" xml:space="preserve">
          <source>\:dog2:</source>
          <target state="translated">\:dog2:</target>
        </trans-unit>
        <trans-unit id="3374cbb709c7d6e8bf376a8f05325994110fde20" translate="yes" xml:space="preserve">
          <source>\:dog:</source>
          <target state="translated">\:dog:</target>
        </trans-unit>
        <trans-unit id="5cd2ff987dd63c867407aa215dd7653c862cbc0e" translate="yes" xml:space="preserve">
          <source>\:dollar:</source>
          <target state="translated">\:dollar:</target>
        </trans-unit>
        <trans-unit id="f3a1517b3b7668ac1095971b3172f9dcc4fff257" translate="yes" xml:space="preserve">
          <source>\:dolls:</source>
          <target state="translated">\:dolls:</target>
        </trans-unit>
        <trans-unit id="65e4bbc2ac31da523d6cf16d8730001ce34e4ecf" translate="yes" xml:space="preserve">
          <source>\:dolphin:</source>
          <target state="translated">\:dolphin:</target>
        </trans-unit>
        <trans-unit id="857282940e6936cc4a33f785b572a1aa7d9214b4" translate="yes" xml:space="preserve">
          <source>\:door:</source>
          <target state="translated">\:door:</target>
        </trans-unit>
        <trans-unit id="ae9bd8fc08335edc3ca71130aad0de4a41fa93ba" translate="yes" xml:space="preserve">
          <source>\:doughnut:</source>
          <target state="translated">\:doughnut:</target>
        </trans-unit>
        <trans-unit id="0aede83161185f05fb2b22ed1c040503b8a89dce" translate="yes" xml:space="preserve">
          <source>\:dragon:</source>
          <target state="translated">\:dragon:</target>
        </trans-unit>
        <trans-unit id="9e3ab55a027f0ee996efd59d0fbbcc012524914b" translate="yes" xml:space="preserve">
          <source>\:dragon_face:</source>
          <target state="translated">\:dragon_face:</target>
        </trans-unit>
        <trans-unit id="779b0b3212aa6cb1eb8c6270bf4ff17962dc62b3" translate="yes" xml:space="preserve">
          <source>\:dress:</source>
          <target state="translated">\:dress:</target>
        </trans-unit>
        <trans-unit id="51bc9477b437f4edfae4d5baded16fcec1173ff1" translate="yes" xml:space="preserve">
          <source>\:dromedary_camel:</source>
          <target state="translated">\:dromedary_camel:</target>
        </trans-unit>
        <trans-unit id="ddb855dfe102ba121b656ec6e6f388d30224991e" translate="yes" xml:space="preserve">
          <source>\:droplet:</source>
          <target state="translated">\:droplet:</target>
        </trans-unit>
        <trans-unit id="808e96a27b009dd71cdc5d0d17579dffad24171c" translate="yes" xml:space="preserve">
          <source>\:dvd:</source>
          <target state="translated">\:dvd:</target>
        </trans-unit>
        <trans-unit id="afc96c6cd14cfa77828de9a6695edecde86313c5" translate="yes" xml:space="preserve">
          <source>\:e-mail:</source>
          <target state="translated">\:e-mail:</target>
        </trans-unit>
        <trans-unit id="342b70334bbf5720445703775c579f7cca630a44" translate="yes" xml:space="preserve">
          <source>\:ear:</source>
          <target state="translated">\:ear:</target>
        </trans-unit>
        <trans-unit id="c8e215e17efdfe62d5180ca350c30dc2c3e681fe" translate="yes" xml:space="preserve">
          <source>\:ear_of_rice:</source>
          <target state="translated">\:ear_of_rice:</target>
        </trans-unit>
        <trans-unit id="8fe147b153746a63be25a328682e94ae978d1a7c" translate="yes" xml:space="preserve">
          <source>\:earth_africa:</source>
          <target state="translated">\:earth_africa:</target>
        </trans-unit>
        <trans-unit id="7872b354412ad6d0b26df4c9231e578224bde948" translate="yes" xml:space="preserve">
          <source>\:earth_americas:</source>
          <target state="translated">\:earth_americas:</target>
        </trans-unit>
        <trans-unit id="0f993bb7636b6a0221ad9b88f34849a4313f8471" translate="yes" xml:space="preserve">
          <source>\:earth_asia:</source>
          <target state="translated">\:earth_asia:</target>
        </trans-unit>
        <trans-unit id="2f0ff4228a9405fbb15562a48de301eb0143cbe6" translate="yes" xml:space="preserve">
          <source>\:egg:</source>
          <target state="translated">\:egg:</target>
        </trans-unit>
        <trans-unit id="60f5274b6430a0018392ff2c991781ec36f29258" translate="yes" xml:space="preserve">
          <source>\:eggplant:</source>
          <target state="translated">\:eggplant:</target>
        </trans-unit>
        <trans-unit id="ef6acc31fb78fb128d4aa6f3acfbdb96de042353" translate="yes" xml:space="preserve">
          <source>\:eight_pointed_black_star:</source>
          <target state="translated">\:eight_pointed_black_star:</target>
        </trans-unit>
        <trans-unit id="256871451345e0f8e2ad97ed1208214576af9cc1" translate="yes" xml:space="preserve">
          <source>\:eight_spoked_asterisk:</source>
          <target state="translated">\:eight_spoked_asterisk:</target>
        </trans-unit>
        <trans-unit id="463109f5aeb93e25d89da877aff2aa4a14c1e4c4" translate="yes" xml:space="preserve">
          <source>\:electric_plug:</source>
          <target state="translated">\:electric_plug:</target>
        </trans-unit>
        <trans-unit id="ae2112e4e4295f2b00f98fc19bab100bf405cbae" translate="yes" xml:space="preserve">
          <source>\:elephant:</source>
          <target state="translated">\:elephant:</target>
        </trans-unit>
        <trans-unit id="430b53e07cf0921d8fcaaa28bfa4e09b38098d6e" translate="yes" xml:space="preserve">
          <source>\:email:</source>
          <target state="translated">\:email:</target>
        </trans-unit>
        <trans-unit id="9960b453dddfdb466f65d7059b568addc3c383f6" translate="yes" xml:space="preserve">
          <source>\:end:</source>
          <target state="translated">\:end:</target>
        </trans-unit>
        <trans-unit id="76cdfeaf2a123479fcdaaec950745b5eeddf28ef" translate="yes" xml:space="preserve">
          <source>\:envelope_with_arrow:</source>
          <target state="translated">\:envelope_with_arrow:</target>
        </trans-unit>
        <trans-unit id="aaa8a40648743ea99ae7678d8e79ab592e84e2a5" translate="yes" xml:space="preserve">
          <source>\:euro:</source>
          <target state="translated">\:euro:</target>
        </trans-unit>
        <trans-unit id="023c0837bf821e216e39a1cafc6a7160051929fd" translate="yes" xml:space="preserve">
          <source>\:european_castle:</source>
          <target state="translated">\:european_castle:</target>
        </trans-unit>
        <trans-unit id="bdc20bcd7b0b6003706f5884c64437172cf1c04c" translate="yes" xml:space="preserve">
          <source>\:european_post_office:</source>
          <target state="translated">\:european_post_office:</target>
        </trans-unit>
        <trans-unit id="1b34f0e2cf43911c47177c7d6d3765026f801092" translate="yes" xml:space="preserve">
          <source>\:evergreen_tree:</source>
          <target state="translated">\:evergreen_tree:</target>
        </trans-unit>
        <trans-unit id="c6b6d0855b38729dfb84e26e84f49c30fc57bb59" translate="yes" xml:space="preserve">
          <source>\:exclamation:</source>
          <target state="translated">\:exclamation:</target>
        </trans-unit>
        <trans-unit id="ba5d1dbcaed41ac5c6bc5f64c6e1a1392ae2b453" translate="yes" xml:space="preserve">
          <source>\:expressionless:</source>
          <target state="translated">\:expressionless:</target>
        </trans-unit>
        <trans-unit id="18622e64ebd3e7de2b598df632ad63f8912ffa0d" translate="yes" xml:space="preserve">
          <source>\:eyeglasses:</source>
          <target state="translated">\:eyeglasses:</target>
        </trans-unit>
        <trans-unit id="a7da1b0807a892623f1c3727673d7ef72f65e554" translate="yes" xml:space="preserve">
          <source>\:eyes:</source>
          <target state="translated">\:eyes:</target>
        </trans-unit>
        <trans-unit id="d02f32a504982d86559b47f4c00a214b67ae1503" translate="yes" xml:space="preserve">
          <source>\:facepunch:</source>
          <target state="translated">\:facepunch:</target>
        </trans-unit>
        <trans-unit id="5a907517c618b26c91f1cfeabb2f5c4f40fdc791" translate="yes" xml:space="preserve">
          <source>\:factory:</source>
          <target state="translated">\:factory:</target>
        </trans-unit>
        <trans-unit id="c0e0da6907735eb5e0206302eb5951180c550861" translate="yes" xml:space="preserve">
          <source>\:fallen_leaf:</source>
          <target state="translated">\:fallen_leaf:</target>
        </trans-unit>
        <trans-unit id="b66642210fdefcbf23c2b7917817fb677011db2b" translate="yes" xml:space="preserve">
          <source>\:family:</source>
          <target state="translated">\:family:</target>
        </trans-unit>
        <trans-unit id="ed3ec616e68cc66512e14f769aa1253ff266259e" translate="yes" xml:space="preserve">
          <source>\:fast_forward:</source>
          <target state="translated">\:fast_forward:</target>
        </trans-unit>
        <trans-unit id="f0b8bb6286c35f069e4a1e90f8604f4bc62dc2a1" translate="yes" xml:space="preserve">
          <source>\:fax:</source>
          <target state="translated">\:fax:</target>
        </trans-unit>
        <trans-unit id="0bbcbc25c0eecfc841481e67fa9f6777fbd464a0" translate="yes" xml:space="preserve">
          <source>\:fearful:</source>
          <target state="translated">\:fearful:</target>
        </trans-unit>
        <trans-unit id="dfb7722d0a5f42db1ca95fce7cc4ad3a412d9431" translate="yes" xml:space="preserve">
          <source>\:feet:</source>
          <target state="translated">\:feet:</target>
        </trans-unit>
        <trans-unit id="a533586c1f3d88f9447dbd85e75f0159dfc758fa" translate="yes" xml:space="preserve">
          <source>\:ferris_wheel:</source>
          <target state="translated">\:ferris_wheel:</target>
        </trans-unit>
        <trans-unit id="8410fcb5f50c7b6b36a37c81dfce2f21c9289728" translate="yes" xml:space="preserve">
          <source>\:file_folder:</source>
          <target state="translated">\:file_folder:</target>
        </trans-unit>
        <trans-unit id="5f642a74f415d530d9e0c5161e141061f5048c2f" translate="yes" xml:space="preserve">
          <source>\:fire:</source>
          <target state="translated">\:fire:</target>
        </trans-unit>
        <trans-unit id="d31178ced29d67a2d79dd6806b8e2734a7210f59" translate="yes" xml:space="preserve">
          <source>\:fire_engine:</source>
          <target state="translated">\:fire_engine:</target>
        </trans-unit>
        <trans-unit id="99166886600ea54e3424e6eae7527e172415ab58" translate="yes" xml:space="preserve">
          <source>\:fireworks:</source>
          <target state="translated">\:fireworks:</target>
        </trans-unit>
        <trans-unit id="a5f27d6c8f245d7efcbee12ce0f0d34ecb795074" translate="yes" xml:space="preserve">
          <source>\:first_quarter_moon:</source>
          <target state="translated">\:first_quarter_moon:</target>
        </trans-unit>
        <trans-unit id="92ba03d67176c69aac120e23be17056ff654a2af" translate="yes" xml:space="preserve">
          <source>\:first_quarter_moon_with_face:</source>
          <target state="translated">\:first_quarter_moon_with_face:</target>
        </trans-unit>
        <trans-unit id="a477f6e7c890ec3d6a197083a8a5b84507070518" translate="yes" xml:space="preserve">
          <source>\:fish:</source>
          <target state="translated">\:fish:</target>
        </trans-unit>
        <trans-unit id="754188072f05e7845676bd8f59cd34073cc59ec8" translate="yes" xml:space="preserve">
          <source>\:fish_cake:</source>
          <target state="translated">\:fish_cake:</target>
        </trans-unit>
        <trans-unit id="96350c7bb269406ba40216612c5b8d8a4aa4046f" translate="yes" xml:space="preserve">
          <source>\:fishing_pole_and_fish:</source>
          <target state="translated">\:fishing_pole_and_fish:</target>
        </trans-unit>
        <trans-unit id="afb2fdba94eafd33339972c9cde902bd8d88183d" translate="yes" xml:space="preserve">
          <source>\:fist:</source>
          <target state="translated">\:fist:</target>
        </trans-unit>
        <trans-unit id="6fba42d42662f10baaf9aae465a0d330b9a22fe7" translate="yes" xml:space="preserve">
          <source>\:flags:</source>
          <target state="translated">\:flags:</target>
        </trans-unit>
        <trans-unit id="dee86e1eb9c34ff3fd2e76ab21e66155ddd1bfb9" translate="yes" xml:space="preserve">
          <source>\:flashlight:</source>
          <target state="translated">\:flashlight:</target>
        </trans-unit>
        <trans-unit id="ab7a714e6d6af892bbcefc56f3a9caf380f61cbe" translate="yes" xml:space="preserve">
          <source>\:floppy_disk:</source>
          <target state="translated">\:floppy_disk:</target>
        </trans-unit>
        <trans-unit id="3f3b11bf344ed631f7b08ed824e958f2d197eebd" translate="yes" xml:space="preserve">
          <source>\:flower_playing_cards:</source>
          <target state="translated">\:flower_playing_cards:</target>
        </trans-unit>
        <trans-unit id="07becb107390b18996293a798ac6171d731bb60b" translate="yes" xml:space="preserve">
          <source>\:flushed:</source>
          <target state="translated">\:flushed:</target>
        </trans-unit>
        <trans-unit id="aac07be89b7f97da8ff1714957e0b50c78fb3b0e" translate="yes" xml:space="preserve">
          <source>\:foggy:</source>
          <target state="translated">\:foggy:</target>
        </trans-unit>
        <trans-unit id="ea6f3ffda4db63053ed2b11fc0754de51566bff9" translate="yes" xml:space="preserve">
          <source>\:football:</source>
          <target state="translated">\:football:</target>
        </trans-unit>
        <trans-unit id="e2920013962db56b799e663f9371401f9f2e73ae" translate="yes" xml:space="preserve">
          <source>\:footprints:</source>
          <target state="translated">\:footprints:</target>
        </trans-unit>
        <trans-unit id="3f9c7ada8df9f30aa5e97fb8cd42a3be0a699c41" translate="yes" xml:space="preserve">
          <source>\:fork_and_knife:</source>
          <target state="translated">\:fork_and_knife:</target>
        </trans-unit>
        <trans-unit id="6e1c0b1dc5050db6421453bced78b829513f7532" translate="yes" xml:space="preserve">
          <source>\:fountain:</source>
          <target state="translated">\:fountain:</target>
        </trans-unit>
        <trans-unit id="91a454402bd64ebedd25f162a55553e97822bfec" translate="yes" xml:space="preserve">
          <source>\:four_leaf_clover:</source>
          <target state="translated">\:four_leaf_clover:</target>
        </trans-unit>
        <trans-unit id="f42b4f6d94e68b9ab012088fff26ded02f4b0d89" translate="yes" xml:space="preserve">
          <source>\:free:</source>
          <target state="translated">\:free:</target>
        </trans-unit>
        <trans-unit id="4ab8d77ca9e28c670e1bea7f6edf233ab8c04a0c" translate="yes" xml:space="preserve">
          <source>\:fried_shrimp:</source>
          <target state="translated">\:fried_shrimp:</target>
        </trans-unit>
        <trans-unit id="0b6eb9d008cc870e6d1d4ca5c5782cf925f58769" translate="yes" xml:space="preserve">
          <source>\:fries:</source>
          <target state="translated">\:fries:</target>
        </trans-unit>
        <trans-unit id="d650a0682549be1169559081c897bd1a56d82e3d" translate="yes" xml:space="preserve">
          <source>\:frog:</source>
          <target state="translated">\:frog:</target>
        </trans-unit>
        <trans-unit id="2742ac6926f4f88b9410f04c7ea56e51f3ebd6d0" translate="yes" xml:space="preserve">
          <source>\:frowning:</source>
          <target state="translated">\:frowning:</target>
        </trans-unit>
        <trans-unit id="56e48a8d3eaa7a4f9ee58730de2264a44c88c922" translate="yes" xml:space="preserve">
          <source>\:fuelpump:</source>
          <target state="translated">\:fuelpump:</target>
        </trans-unit>
        <trans-unit id="e9ee232804c33596308c636be649e8dfd7c6fc6f" translate="yes" xml:space="preserve">
          <source>\:full_moon:</source>
          <target state="translated">\:full_moon:</target>
        </trans-unit>
        <trans-unit id="1d17e3b9fd7f6470516768046b2614531b6138bf" translate="yes" xml:space="preserve">
          <source>\:full_moon_with_face:</source>
          <target state="translated">\:full_moon_with_face:</target>
        </trans-unit>
        <trans-unit id="ec1a93f48d5e8cc69f0397c1b86ec8ab1ae25967" translate="yes" xml:space="preserve">
          <source>\:game_die:</source>
          <target state="translated">\:game_die:</target>
        </trans-unit>
        <trans-unit id="3d22d282de92c405ea93daa9629d228a8ef356fc" translate="yes" xml:space="preserve">
          <source>\:gem:</source>
          <target state="translated">\:gem:</target>
        </trans-unit>
        <trans-unit id="61586c797e3f46bbc0fdc4374035a13e4388ac91" translate="yes" xml:space="preserve">
          <source>\:ghost:</source>
          <target state="translated">\:ghost:</target>
        </trans-unit>
        <trans-unit id="09e8db1424aa970a7b9eea0aadcdb8ed8e45f4ba" translate="yes" xml:space="preserve">
          <source>\:gift:</source>
          <target state="translated">\:gift:</target>
        </trans-unit>
        <trans-unit id="56b72e78e1ce7805c74a02df7e25841d36162fbf" translate="yes" xml:space="preserve">
          <source>\:gift_heart:</source>
          <target state="translated">\:gift_heart:</target>
        </trans-unit>
        <trans-unit id="25543880f70d890dc66d24e9fe21aaec7f1772b3" translate="yes" xml:space="preserve">
          <source>\:girl:</source>
          <target state="translated">\:girl:</target>
        </trans-unit>
        <trans-unit id="a3e89e111cc47eec6e460db70096e82175ab465a" translate="yes" xml:space="preserve">
          <source>\:globe_with_meridians:</source>
          <target state="translated">\:globe_with_meridians:</target>
        </trans-unit>
        <trans-unit id="ab196f2bec3cd3ab9d82813f9cf081a40365a79e" translate="yes" xml:space="preserve">
          <source>\:goat:</source>
          <target state="translated">\:goat:</target>
        </trans-unit>
        <trans-unit id="ed719de38fda896d8db1c163b43b8157544140d8" translate="yes" xml:space="preserve">
          <source>\:golf:</source>
          <target state="translated">\:golf:</target>
        </trans-unit>
        <trans-unit id="bad4d3ba66fc07b0bd85318625927109db2adffe" translate="yes" xml:space="preserve">
          <source>\:grapes:</source>
          <target state="translated">\:grapes:</target>
        </trans-unit>
        <trans-unit id="5c87f82bfdb61a23911d2cf5896ade45203f2e51" translate="yes" xml:space="preserve">
          <source>\:green_apple:</source>
          <target state="translated">\:green_apple:</target>
        </trans-unit>
        <trans-unit id="838189fcc067ca8397914e14f9e3eb8d1c7deb96" translate="yes" xml:space="preserve">
          <source>\:green_book:</source>
          <target state="translated">\:green_book:</target>
        </trans-unit>
        <trans-unit id="e183cff3dbc896f379685e638915b49016745afe" translate="yes" xml:space="preserve">
          <source>\:green_heart:</source>
          <target state="translated">\:green_heart:</target>
        </trans-unit>
        <trans-unit id="85aa6c7ad1d80e64f9bef0fad00d4043610a2602" translate="yes" xml:space="preserve">
          <source>\:grey_exclamation:</source>
          <target state="translated">\:grey_exclamation:</target>
        </trans-unit>
        <trans-unit id="17166e8e051ae3338b296ce626f5cb30e270e614" translate="yes" xml:space="preserve">
          <source>\:grey_question:</source>
          <target state="translated">\:grey_question:</target>
        </trans-unit>
        <trans-unit id="68520e5886a6f2a0abb47b6e25fc0963b580ad26" translate="yes" xml:space="preserve">
          <source>\:grimacing:</source>
          <target state="translated">\:grimacing:</target>
        </trans-unit>
        <trans-unit id="cce5340e57d64117cf21db918db8874a204e435a" translate="yes" xml:space="preserve">
          <source>\:grin:</source>
          <target state="translated">\:grin:</target>
        </trans-unit>
        <trans-unit id="0f1fa781c7642a02f5643799bf74c4e077ca3f5c" translate="yes" xml:space="preserve">
          <source>\:grinning:</source>
          <target state="translated">\:grinning:</target>
        </trans-unit>
        <trans-unit id="ef032ad2a13d8da2bb56339e65e775441a4c25e3" translate="yes" xml:space="preserve">
          <source>\:guardsman:</source>
          <target state="translated">\:guardsman:</target>
        </trans-unit>
        <trans-unit id="a972d453cbd7205b6a9a1dddedcc068bdf796581" translate="yes" xml:space="preserve">
          <source>\:guitar:</source>
          <target state="translated">\:guitar:</target>
        </trans-unit>
        <trans-unit id="a51d6f0b9190d629b1cda30f1c1e56bf449f22aa" translate="yes" xml:space="preserve">
          <source>\:gun:</source>
          <target state="translated">\:gun:</target>
        </trans-unit>
        <trans-unit id="f66b152c44faf9c0a24a1dd6fef7c89340f0fdaf" translate="yes" xml:space="preserve">
          <source>\:haircut:</source>
          <target state="translated">\:haircut:</target>
        </trans-unit>
        <trans-unit id="85aedcca8045f08a05c87f20bfac292819a4ad93" translate="yes" xml:space="preserve">
          <source>\:hamburger:</source>
          <target state="translated">\:hamburger:</target>
        </trans-unit>
        <trans-unit id="907fc978124793d22347e3e7fcd877d3caa89f6c" translate="yes" xml:space="preserve">
          <source>\:hammer:</source>
          <target state="translated">\:hammer:</target>
        </trans-unit>
        <trans-unit id="90fdea0c85a38788e5f5cecd739e98eaf2e645b8" translate="yes" xml:space="preserve">
          <source>\:hamster:</source>
          <target state="translated">\:hamster:</target>
        </trans-unit>
        <trans-unit id="85a6bd90152b5e22c307422b0767db692e5ec5d7" translate="yes" xml:space="preserve">
          <source>\:hand:</source>
          <target state="translated">\:hand:</target>
        </trans-unit>
        <trans-unit id="2b2b9d3e7357b586a98195211be59627e129df14" translate="yes" xml:space="preserve">
          <source>\:handbag:</source>
          <target state="translated">\:handbag:</target>
        </trans-unit>
        <trans-unit id="811b2dc747d647624b10868bf5a4d7f1ad1f15ee" translate="yes" xml:space="preserve">
          <source>\:hankey:</source>
          <target state="translated">\:hankey:</target>
        </trans-unit>
        <trans-unit id="b826819abd18a9e381b7bb08e8b393cf3ec13354" translate="yes" xml:space="preserve">
          <source>\:hatched_chick:</source>
          <target state="translated">\:hatched_chick:</target>
        </trans-unit>
        <trans-unit id="961fc5347826968c129900e146ec149afc14d1b1" translate="yes" xml:space="preserve">
          <source>\:hatching_chick:</source>
          <target state="translated">\:hatching_chick:</target>
        </trans-unit>
        <trans-unit id="fd13dbe756c2f7bec1e5fd3f11e35040bb929423" translate="yes" xml:space="preserve">
          <source>\:headphones:</source>
          <target state="translated">\:headphones:</target>
        </trans-unit>
        <trans-unit id="5b74b867b4e85bc99a8d4e081b412a2068bebfa2" translate="yes" xml:space="preserve">
          <source>\:hear_no_evil:</source>
          <target state="translated">\:hear_no_evil:</target>
        </trans-unit>
        <trans-unit id="ccb6fe30b2099b698ab1757148bbbfa20ded47b2" translate="yes" xml:space="preserve">
          <source>\:heart:</source>
          <target state="translated">\:heart:</target>
        </trans-unit>
        <trans-unit id="d19130804fd189a3217365acd20e8a55fee661c7" translate="yes" xml:space="preserve">
          <source>\:heart_decoration:</source>
          <target state="translated">\:heart_decoration:</target>
        </trans-unit>
        <trans-unit id="7fd7fc7da096929d65b442d3078005adbde95ec5" translate="yes" xml:space="preserve">
          <source>\:heart_eyes:</source>
          <target state="translated">\:heart_eyes:</target>
        </trans-unit>
        <trans-unit id="c743497e2a8415cb9689c73e20b2b475d6dc0aa4" translate="yes" xml:space="preserve">
          <source>\:heart_eyes_cat:</source>
          <target state="translated">\:heart_eyes_cat:</target>
        </trans-unit>
        <trans-unit id="0303cea12f05193a6575a3b06833743a2df98ec8" translate="yes" xml:space="preserve">
          <source>\:heartbeat:</source>
          <target state="translated">\:heartbeat:</target>
        </trans-unit>
        <trans-unit id="84eec40ef310877af50ac181032f31f711ecc75e" translate="yes" xml:space="preserve">
          <source>\:heartpulse:</source>
          <target state="translated">\:heartpulse:</target>
        </trans-unit>
        <trans-unit id="cce17d7c17b286ec8e76fbf2a7a635ef5af4da4f" translate="yes" xml:space="preserve">
          <source>\:heavy_check_mark:</source>
          <target state="translated">\:heavy_check_mark:</target>
        </trans-unit>
        <trans-unit id="ef2574882ba67253be321721a0d7a0a3789d0853" translate="yes" xml:space="preserve">
          <source>\:heavy_division_sign:</source>
          <target state="translated">\:heavy_division_sign:</target>
        </trans-unit>
        <trans-unit id="564cf55cbce579e6f0f2d5b6020c6d1079eadab8" translate="yes" xml:space="preserve">
          <source>\:heavy_dollar_sign:</source>
          <target state="translated">\:heavy_dollar_sign:</target>
        </trans-unit>
        <trans-unit id="3389894352ab55798f8586d6c0676e638f24a8b4" translate="yes" xml:space="preserve">
          <source>\:heavy_minus_sign:</source>
          <target state="translated">\:heavy_minus_sign:</target>
        </trans-unit>
        <trans-unit id="6d2a946978c021a995c0dbf7d6c667f1e213586d" translate="yes" xml:space="preserve">
          <source>\:heavy_multiplication_x:</source>
          <target state="translated">\:heavy_multiplication_x:</target>
        </trans-unit>
        <trans-unit id="51a3048909873e66e79db2a1c679d08d8e9946c3" translate="yes" xml:space="preserve">
          <source>\:heavy_plus_sign:</source>
          <target state="translated">\:heavy_plus_sign:</target>
        </trans-unit>
        <trans-unit id="4c209dc1b46c2d4fd1aabc606840cbf509597492" translate="yes" xml:space="preserve">
          <source>\:helicopter:</source>
          <target state="translated">\:helicopter:</target>
        </trans-unit>
        <trans-unit id="3d16f46b09472f5a35b37d0c88263766997edde5" translate="yes" xml:space="preserve">
          <source>\:herb:</source>
          <target state="translated">\:herb:</target>
        </trans-unit>
        <trans-unit id="0eda427d63afb6f8ae8c62ad3e610657974a1b8d" translate="yes" xml:space="preserve">
          <source>\:hibiscus:</source>
          <target state="translated">\:hibiscus:</target>
        </trans-unit>
        <trans-unit id="6301055ebc5235af7cfeb4a122046758607536d1" translate="yes" xml:space="preserve">
          <source>\:high_brightness:</source>
          <target state="translated">\:high_brightness:</target>
        </trans-unit>
        <trans-unit id="65de326b7d761878713c699bbe8d05c23928a01f" translate="yes" xml:space="preserve">
          <source>\:high_heel:</source>
          <target state="translated">\:high_heel:</target>
        </trans-unit>
        <trans-unit id="fdfbe50c4aba5f5092263322db165d7fba907cc6" translate="yes" xml:space="preserve">
          <source>\:hocho:</source>
          <target state="translated">\:hocho:</target>
        </trans-unit>
        <trans-unit id="efef59ac159cef18702821b259808a7da7d50a49" translate="yes" xml:space="preserve">
          <source>\:honey_pot:</source>
          <target state="translated">\:honey_pot:</target>
        </trans-unit>
        <trans-unit id="fa75f94f6f067c66c1972fd3d2091e70048c180b" translate="yes" xml:space="preserve">
          <source>\:horse:</source>
          <target state="translated">\:horse:</target>
        </trans-unit>
        <trans-unit id="fdef0d6640eb2571ffb16308c7980b77e524e7d1" translate="yes" xml:space="preserve">
          <source>\:horse_racing:</source>
          <target state="translated">\:horse_racing:</target>
        </trans-unit>
        <trans-unit id="61a9e5a0a7da234ce5f398aaa93c7dc9b62d313b" translate="yes" xml:space="preserve">
          <source>\:hospital:</source>
          <target state="translated">\:hospital:</target>
        </trans-unit>
        <trans-unit id="9a3b691ad4e378ca43461334f9515ec92433e64d" translate="yes" xml:space="preserve">
          <source>\:hotel:</source>
          <target state="translated">\:hotel:</target>
        </trans-unit>
        <trans-unit id="fc2dde6eaf60d12623f07c2628a1d58bff256517" translate="yes" xml:space="preserve">
          <source>\:hotsprings:</source>
          <target state="translated">\:hotsprings:</target>
        </trans-unit>
        <trans-unit id="78bff1fafe56bf8662de8f05039252c1f7ed3058" translate="yes" xml:space="preserve">
          <source>\:hourglass:</source>
          <target state="translated">\:hourglass:</target>
        </trans-unit>
        <trans-unit id="d6660d4ab7468bd130a788a520b856ddc92c34fe" translate="yes" xml:space="preserve">
          <source>\:hourglass_flowing_sand:</source>
          <target state="translated">\:hourglass_flowing_sand:</target>
        </trans-unit>
        <trans-unit id="77a74b1d6af5e0dd2f6744cb27fc9118cd9fa21f" translate="yes" xml:space="preserve">
          <source>\:house:</source>
          <target state="translated">\:house:</target>
        </trans-unit>
        <trans-unit id="3d97ad3a63f759728a7e1f0386effe24bba77e9f" translate="yes" xml:space="preserve">
          <source>\:house_with_garden:</source>
          <target state="translated">\:house_with_garden:</target>
        </trans-unit>
        <trans-unit id="3120a7b7a3bad39a47e81918bf4e7e5443442b12" translate="yes" xml:space="preserve">
          <source>\:hushed:</source>
          <target state="translated">\:hushed:</target>
        </trans-unit>
        <trans-unit id="2114ae059b0712fa881f9dbd5aa0b92c8265c78b" translate="yes" xml:space="preserve">
          <source>\:ice_cream:</source>
          <target state="translated">\:ice_cream:</target>
        </trans-unit>
        <trans-unit id="69460a6f4e102904e016c71a19fb5c40f59fa1ec" translate="yes" xml:space="preserve">
          <source>\:icecream:</source>
          <target state="translated">\:icecream:</target>
        </trans-unit>
        <trans-unit id="195ae110176e1c867d178e722909a436085d86c1" translate="yes" xml:space="preserve">
          <source>\:id:</source>
          <target state="translated">\:id:</target>
        </trans-unit>
        <trans-unit id="7b74738ca9656136db50876c02ded7440575effa" translate="yes" xml:space="preserve">
          <source>\:ideograph_advantage:</source>
          <target state="translated">\:ideograph_advantage:</target>
        </trans-unit>
        <trans-unit id="ac990dfb12419d28446a4bd3c2b4cb80477dc84a" translate="yes" xml:space="preserve">
          <source>\:imp:</source>
          <target state="translated">\:imp:</target>
        </trans-unit>
        <trans-unit id="9abf48ff7a2c9750bf4bacad546b7adfa108e924" translate="yes" xml:space="preserve">
          <source>\:inbox_tray:</source>
          <target state="translated">\:inbox_tray:</target>
        </trans-unit>
        <trans-unit id="ab6e8553cef846648ef74ec5c61e35dfd082f8f1" translate="yes" xml:space="preserve">
          <source>\:incoming_envelope:</source>
          <target state="translated">\:incoming_envelope:</target>
        </trans-unit>
        <trans-unit id="e5aae8be037b97e78d7d65435935ad1b926376a1" translate="yes" xml:space="preserve">
          <source>\:information_desk_person:</source>
          <target state="translated">\:information_desk_person:</target>
        </trans-unit>
        <trans-unit id="50696eca6dd53cce15313edffee9061f37583805" translate="yes" xml:space="preserve">
          <source>\:information_source:</source>
          <target state="translated">\:information_source:</target>
        </trans-unit>
        <trans-unit id="6a9d7f8e7caa52b913fcf42f28c2114f6973f06d" translate="yes" xml:space="preserve">
          <source>\:innocent:</source>
          <target state="translated">\:innocent:</target>
        </trans-unit>
        <trans-unit id="88c7780aa2b2754523f92f40c468e5f02243faaa" translate="yes" xml:space="preserve">
          <source>\:interrobang:</source>
          <target state="translated">\:interrobang:</target>
        </trans-unit>
        <trans-unit id="89553831067427a04402446076288a41f51d85c7" translate="yes" xml:space="preserve">
          <source>\:iphone:</source>
          <target state="translated">\:iphone:</target>
        </trans-unit>
        <trans-unit id="c6e95ab229f02caa9f80f351f0a2976966b1417d" translate="yes" xml:space="preserve">
          <source>\:izakaya_lantern:</source>
          <target state="translated">\:izakaya_lantern:</target>
        </trans-unit>
        <trans-unit id="d8b754896fdce4300cabebb06d1bb59f26449b87" translate="yes" xml:space="preserve">
          <source>\:jack_o_lantern:</source>
          <target state="translated">\:jack_o_lantern:</target>
        </trans-unit>
        <trans-unit id="e0d94d3bbdd2ae49e2e4cc952ab59f7c8db1bfd1" translate="yes" xml:space="preserve">
          <source>\:japan:</source>
          <target state="translated">\:japan:</target>
        </trans-unit>
        <trans-unit id="5d9efac54e6bacab40c7150f14c9996cbfe9de74" translate="yes" xml:space="preserve">
          <source>\:japanese_castle:</source>
          <target state="translated">\:japanese_castle:</target>
        </trans-unit>
        <trans-unit id="7a2838cc26d1ae0cd5a4f3e4de5b6604f149b3d8" translate="yes" xml:space="preserve">
          <source>\:japanese_goblin:</source>
          <target state="translated">\:japanese_goblin:</target>
        </trans-unit>
        <trans-unit id="2d6bb67fbb099c8b915fe9b9f0c0265286b7046f" translate="yes" xml:space="preserve">
          <source>\:japanese_ogre:</source>
          <target state="translated">\:japanese_ogre:</target>
        </trans-unit>
        <trans-unit id="a2146516486da5e5e9f8e7e4e2e7acb85870f2a7" translate="yes" xml:space="preserve">
          <source>\:jeans:</source>
          <target state="translated">\:jeans:</target>
        </trans-unit>
        <trans-unit id="ea868455085d13fef4fd5d894fc2ad2ded7b6ba6" translate="yes" xml:space="preserve">
          <source>\:joy:</source>
          <target state="translated">\:joy:</target>
        </trans-unit>
        <trans-unit id="064e1e4713eac1885087b8bd7438a16ced15082f" translate="yes" xml:space="preserve">
          <source>\:joy_cat:</source>
          <target state="translated">\:joy_cat:</target>
        </trans-unit>
        <trans-unit id="fbdd023d93f6bb1eaecb2d6c3fe0da079f796ed9" translate="yes" xml:space="preserve">
          <source>\:key:</source>
          <target state="translated">\:key:</target>
        </trans-unit>
        <trans-unit id="e849055eebefe6f4329c1bf5a14250673db58252" translate="yes" xml:space="preserve">
          <source>\:keycap_ten:</source>
          <target state="translated">\:keycap_ten:</target>
        </trans-unit>
        <trans-unit id="3a2438f7610437821d2e284acb513c43f16640ce" translate="yes" xml:space="preserve">
          <source>\:kimono:</source>
          <target state="translated">\:kimono:</target>
        </trans-unit>
        <trans-unit id="69836882bf2b229a60c7fc26e8dd2d39a0e6d632" translate="yes" xml:space="preserve">
          <source>\:kiss:</source>
          <target state="translated">\:kiss:</target>
        </trans-unit>
        <trans-unit id="b374f6fdedd99db97ebf74dbc217db0acb4fdbb6" translate="yes" xml:space="preserve">
          <source>\:kissing:</source>
          <target state="translated">\:kissing:</target>
        </trans-unit>
        <trans-unit id="401a71d1412dcacb36be5cdf24c21d5a7f00cb92" translate="yes" xml:space="preserve">
          <source>\:kissing_cat:</source>
          <target state="translated">\:kissing_cat:</target>
        </trans-unit>
        <trans-unit id="a87dcdd91fd62b83066f99f9ea1880b7c26d534c" translate="yes" xml:space="preserve">
          <source>\:kissing_closed_eyes:</source>
          <target state="translated">\:kissing_closed_eyes:</target>
        </trans-unit>
        <trans-unit id="87910c1eeadffb904163cb525409dfaa694da84a" translate="yes" xml:space="preserve">
          <source>\:kissing_heart:</source>
          <target state="translated">\:kissing_heart:</target>
        </trans-unit>
        <trans-unit id="219370630e5b4d1939866226f2b74bd305891f60" translate="yes" xml:space="preserve">
          <source>\:kissing_smiling_eyes:</source>
          <target state="translated">\:kissing_smiling_eyes:</target>
        </trans-unit>
        <trans-unit id="4be31d8193dae2129e450851916b924b8f08fea3" translate="yes" xml:space="preserve">
          <source>\:koala:</source>
          <target state="translated">\:koala:</target>
        </trans-unit>
        <trans-unit id="68a542b4ef03b641b9d47a3084da38002028562d" translate="yes" xml:space="preserve">
          <source>\:koko:</source>
          <target state="translated">\:koko:</target>
        </trans-unit>
        <trans-unit id="c04969d1c03a33477b9b68d52d3f316f04d4f03b" translate="yes" xml:space="preserve">
          <source>\:large_blue_circle:</source>
          <target state="translated">\:large_blue_circle:</target>
        </trans-unit>
        <trans-unit id="1484bf2ecab7017bdfc7353b9cca9f0b2b19c2bb" translate="yes" xml:space="preserve">
          <source>\:large_blue_diamond:</source>
          <target state="translated">\:large_blue_diamond:</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
