<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="julia">
    <body>
      <group id="julia">
        <trans-unit id="4475ebb24c0e359de01708bc1d247a728f337715" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exeflags&lt;/code&gt; should be set to the required command line arguments for new workers.</source>
          <target state="translated">&lt;code&gt;exeflags&lt;/code&gt; は、新しいワーカーに必要なコマンドライン引数に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="05f09246b7fa073a7f1026d572e6e088740c6e5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exeflags&lt;/code&gt;: additional flags passed to the worker processes.</source>
          <target state="translated">&lt;code&gt;exeflags&lt;/code&gt; ：ワーカープロセスに渡される追加のフラグ。</target>
        </trans-unit>
        <trans-unit id="3e8963f41f3051e232c8d5de842f5be607191c3b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exename&lt;/code&gt; &amp;ndash; the path to the Julia executable on the host, defaults to &lt;code&gt;&quot;$(Sys.BINDIR)/julia&quot;&lt;/code&gt; or &lt;code&gt;&quot;$(Sys.BINDIR)/julia-debug&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;exename&lt;/code&gt; &amp;ndash;ホスト上のJulia実行可能ファイルへのパス。デフォルトは &lt;code&gt;&quot;$(Sys.BINDIR)/julia&quot;&lt;/code&gt; または &lt;code&gt;&quot;$(Sys.BINDIR)/julia-debug&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cbecc18bae8e3704699c9ddb2d2f6ee8f7947be3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exename&lt;/code&gt; is the name of the &lt;code&gt;julia&lt;/code&gt; executable including the full path.</source>
          <target state="translated">&lt;code&gt;exename&lt;/code&gt; のは、の名前である &lt;code&gt;julia&lt;/code&gt; 完全なパスを含む実行可能。</target>
        </trans-unit>
        <trans-unit id="9e9777b51b1141d2eaeeb8767f03f02a288a8ebb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exename&lt;/code&gt;: name of the &lt;code&gt;julia&lt;/code&gt; executable. Defaults to &lt;code&gt;&quot;$(Sys.BINDIR)/julia&quot;&lt;/code&gt; or &lt;code&gt;&quot;$(Sys.BINDIR)/julia-debug&quot;&lt;/code&gt; as the case may be.</source>
          <target state="translated">&lt;code&gt;exename&lt;/code&gt; の：の名前 &lt;code&gt;julia&lt;/code&gt; 実行可能。場合によっては、デフォルトで &lt;code&gt;&quot;$(Sys.BINDIR)/julia&quot;&lt;/code&gt; または &lt;code&gt;&quot;$(Sys.BINDIR)/julia-debug&quot;&lt;/code&gt; なります。</target>
        </trans-unit>
        <trans-unit id="b6dc7570f94249d865b09eb2a692da386f794499" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;export&lt;/code&gt; is used within modules to tell Julia which functions should be made available to the user. For example: &lt;code&gt;export foo&lt;/code&gt; makes the name &lt;code&gt;foo&lt;/code&gt; available when &lt;a href=&quot;#using&quot;&gt;&lt;code&gt;using&lt;/code&gt;&lt;/a&gt; the module. See the &lt;a href=&quot;../../manual/modules/index#modules&quot;&gt;manual section about modules&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;export&lt;/code&gt; はモジュール内で使用され、ユーザーが使用できるようにする機能をJuliaに通知します。次に例を示し &lt;code&gt;export foo&lt;/code&gt; は、モジュールの使用時に &lt;code&gt;foo&lt;/code&gt; という名前を使用できるように&lt;a href=&quot;#using&quot;&gt; &lt;code&gt;using&lt;/code&gt; &lt;/a&gt;ます。詳細については、&lt;a href=&quot;../../manual/modules/index#modules&quot;&gt;モジュール&lt;/a&gt;に関するマニュアルのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="72d0445c62c1b3939fafe7b40795814fcba18b16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;export&lt;/code&gt; is used within modules to tell Julia which functions should be made available to the user. For example: &lt;code&gt;export foo&lt;/code&gt; makes the name &lt;code&gt;foo&lt;/code&gt; available when &lt;a href=&quot;#using&quot;&gt;&lt;code&gt;using&lt;/code&gt;&lt;/a&gt; the module. See the &lt;a href=&quot;../../manual/modules/index#modules-1&quot;&gt;manual section about modules&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;export&lt;/code&gt; モジュール内でexportを使用して、ユーザーが利用できるようにする機能をJuliaに指示します。例： &lt;code&gt;export foo&lt;/code&gt; は、モジュールの使用時に名前 &lt;code&gt;foo&lt;/code&gt; を使用可能に&lt;a href=&quot;#using&quot;&gt; &lt;code&gt;using&lt;/code&gt; &lt;/a&gt;ます。詳細については、&lt;a href=&quot;../../manual/modules/index#modules-1&quot;&gt;モジュール&lt;/a&gt;に関するマニュアルのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="6574aff1f598d8da6d01cfe7e24524b2c0a7bd1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;export&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;export&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="a7471ee53c91775ff9ce42d242abe595bcfc7dbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f(x)&lt;/code&gt; can be any call expression. Returns the result of &lt;code&gt;f(x)&lt;/code&gt; if the types match, and an &lt;code&gt;Error&lt;/code&gt;&lt;code&gt;Result&lt;/code&gt; if it finds different types.</source>
          <target state="translated">&lt;code&gt;f(x)&lt;/code&gt; は任意の呼び出し式にすることができます。タイプが一致する場合は &lt;code&gt;f(x)&lt;/code&gt; の結果を返し、異なるタイプが見つかった場合は &lt;code&gt;Error&lt;/code&gt; &lt;code&gt;Result&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="d0b49364119f011655f3a8d05e365aee509c9dd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; must not cause a task switch, which excludes most I/O operations such as &lt;code&gt;println&lt;/code&gt;. Using the &lt;code&gt;@async&lt;/code&gt; macro (to defer context switching to outside of the finalizer) or &lt;code&gt;ccall&lt;/code&gt; to directly invoke IO functions in C may be helpful for debugging purposes.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; は、 &lt;code&gt;println&lt;/code&gt; などのほとんどのI / O操作を除外するタスク切り替えを引き起こしてはなりません。使用 &lt;code&gt;@async&lt;/code&gt; のまたは（ファイナライザの外側に延期コンテキスト切り替えに）マクロ &lt;code&gt;ccall&lt;/code&gt; をすることは、直接CにおけるIO機能は、デバッグのために有用であり得る呼び出します。</target>
        </trans-unit>
        <trans-unit id="497f30aa399e54f4d4675a55c3eafb38181ea62b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;factors&lt;/code&gt; is an &lt;code&gt;m&lt;/code&gt;&amp;times;&lt;code&gt;n&lt;/code&gt; matrix.</source>
          <target state="translated">&lt;code&gt;factors&lt;/code&gt; は &lt;code&gt;m&lt;/code&gt; &amp;times; &lt;code&gt;n&lt;/code&gt; 行列です。</target>
        </trans-unit>
        <trans-unit id="17c27552004d64395046d29795efee05dcc044c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;factors&lt;/code&gt;, as in the &lt;a href=&quot;#LinearAlgebra.QR&quot;&gt;&lt;code&gt;QR&lt;/code&gt;&lt;/a&gt; type, is an &lt;code&gt;m&lt;/code&gt;&amp;times;&lt;code&gt;n&lt;/code&gt; matrix.</source>
          <target state="translated">&lt;code&gt;factors&lt;/code&gt; &lt;a href=&quot;#LinearAlgebra.QR&quot;&gt; &lt;code&gt;QR&lt;/code&gt; &lt;/a&gt;型と同様に、factorsは &lt;code&gt;m&lt;/code&gt; &amp;times; &lt;code&gt;n&lt;/code&gt; 行列です。</target>
        </trans-unit>
        <trans-unit id="d807df0dedd6adab6f030655307f5490121a67cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; (0)</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; （0）</target>
        </trans-unit>
        <trans-unit id="7c323dd694e4baf6f9a2d099639446439f70e26f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fastforward::Bool=false&lt;/code&gt;: If &lt;code&gt;fastforward&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, only merge if the merge is a fast-forward (the current branch head is an ancestor of the commits to be merged), otherwise refuse to merge and return &lt;code&gt;false&lt;/code&gt;. This is equivalent to the git CLI option &lt;code&gt;--ff-only&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fastforward::Bool=false&lt;/code&gt; ： &lt;code&gt;fastforward&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合、マージが早送り（現在のブランチヘッドがマージされるコミットの祖先である）の場合のみマージし、それ以外の場合はマージを拒否して &lt;code&gt;false&lt;/code&gt; を返します。これはgit CLIオプション &lt;code&gt;--ff-only&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="87c543b2d8b2065a2e5dc452819e6c3f937251e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fetch&lt;/code&gt; can be considered an explicit data movement operation, since it directly asks that an object be moved to the local machine. &lt;a href=&quot;../../stdlib/distributed/index#Distributed.@spawn&quot;&gt;&lt;code&gt;@spawn&lt;/code&gt;&lt;/a&gt; (and a few related constructs) also moves data, but this is not as obvious, hence it can be called an implicit data movement operation. Consider these two approaches to constructing and squaring a random matrix:</source>
          <target state="translated">&lt;code&gt;fetch&lt;/code&gt; は、オブジェクトをローカルマシンに移動するように直接要求するため、明示的なデータ移動操作と見なすことができます。&lt;a href=&quot;../../stdlib/distributed/index#Distributed.@spawn&quot;&gt; &lt;code&gt;@spawn&lt;/code&gt; &lt;/a&gt;（およびいくつかの関連する構成）もデータを移動しますが、これはそれほど明白ではないため、暗黙的なデータ移動操作と呼ぶことができます。ランダム行列を作成して二乗する次の2つの方法を検討してください。</target>
        </trans-unit>
        <trans-unit id="441aed98e0f65cd26d43e6c836d252a8cc6789ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fetch&lt;/code&gt; can be considered an explicit data movement operation, since it directly asks that an object be moved to the local machine. &lt;a href=&quot;../../stdlib/distributed/index#Distributed.@spawnat&quot;&gt;&lt;code&gt;@spawnat&lt;/code&gt;&lt;/a&gt; (and a few related constructs) also moves data, but this is not as obvious, hence it can be called an implicit data movement operation. Consider these two approaches to constructing and squaring a random matrix:</source>
          <target state="translated">&lt;code&gt;fetch&lt;/code&gt; は、オブジェクトをローカルマシンに移動するように直接要求するため、明示的なデータ移動操作と見なすことができます。&lt;a href=&quot;../../stdlib/distributed/index#Distributed.@spawnat&quot;&gt; &lt;code&gt;@spawnat&lt;/code&gt; &lt;/a&gt;（およびいくつかの関連する構成）もデータを移動しますが、これはそれほど明白ではないため、暗黙的なデータ移動操作と呼ぶことができます。ランダム行列を作成して2乗するための次の2つのアプローチを検討してください。</target>
        </trans-unit>
        <trans-unit id="f304481efd9961734ed02019c52b7f122e9caadf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fetch_opts&lt;/code&gt;: The options for performing the pre-checkout fetch of the remote as part of the clone.</source>
          <target state="translated">&lt;code&gt;fetch_opts&lt;/code&gt; ：クローンの一部としてリモートのチェックアウト前のフェッチを実行するためのオプション。</target>
        </trans-unit>
        <trans-unit id="b6fd3b698a115341e458d38e2ec7ad39b99bd28b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;file_favor&lt;/code&gt;: how to handle conflicting file contents for the &lt;code&gt;text&lt;/code&gt; driver.</source>
          <target state="translated">&lt;code&gt;file_favor&lt;/code&gt; ： &lt;code&gt;text&lt;/code&gt; ドライバーの競合するファイルコンテンツを処理する方法。</target>
        </trans-unit>
        <trans-unit id="4de1b4ec1dbc92d77323db107114a2663e47b3ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;file_flags&lt;/code&gt;: guidelines for merging files.</source>
          <target state="translated">&lt;code&gt;file_flags&lt;/code&gt; ：ファイルをマージするためのガイドライン。</target>
        </trans-unit>
        <trans-unit id="3fbf2559a3914fd50a580c62f1bf3a524a1b31f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;file_mode&lt;/code&gt;: read/write/access mode for any files involved in the checkout. Default is &lt;code&gt;0755&lt;/code&gt; or &lt;code&gt;0644&lt;/code&gt;, depending on the blob.</source>
          <target state="translated">&lt;code&gt;file_mode&lt;/code&gt; ：チェックアウトに関係するファイルの読み取り/書き込み/アクセスモード。デフォルトは &lt;code&gt;0755&lt;/code&gt; または &lt;code&gt;0644&lt;/code&gt; ブロブに応じて、。</target>
        </trans-unit>
        <trans-unit id="2c42aacc63e30d4330883c95cf718c8560278f6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;file_open_flags&lt;/code&gt;: bitflags used to open any files during the checkout.</source>
          <target state="translated">&lt;code&gt;file_open_flags&lt;/code&gt; ：チェックアウト中にファイルを開くために使用されるビットフラグ。</target>
        </trans-unit>
        <trans-unit id="5a0fc1d82d9beeb03810443c1cef5731061c18c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter::Set{Consts.DELTA_STATUS}=Set([Consts.DELTA_ADDED, Consts.DELTA_MODIFIED, Consts.DELTA_DELETED]))&lt;/code&gt;, and it sets options for the diff. The default is to show files added, modified, or deleted.</source>
          <target state="translated">&lt;code&gt;filter::Set{Consts.DELTA_STATUS}=Set([Consts.DELTA_ADDED, Consts.DELTA_MODIFIED, Consts.DELTA_DELETED]))&lt;/code&gt; 、そしてそれは差分のオプションを設定します。デフォルトでは、追加、変更、または削除されたファイルが表示されます。</target>
        </trans-unit>
        <trans-unit id="f1902a68a69fa5a2286af83a34ec192b45a3e6c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;finally&lt;/code&gt; Clauses</source>
          <target state="translated">&lt;code&gt;finally&lt;/code&gt; 節</target>
        </trans-unit>
        <trans-unit id="705dcca1f483b5f410a7d024bf9ea5567a98d882" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;finally&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;finally&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="a246350d082e2ecf351fc1a6227a9daf36f33939" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findnext(&quot;substring&quot;, string, i)&lt;/code&gt; == &lt;code&gt;start:stop&lt;/code&gt; such that &lt;code&gt;string[start:stop] == &quot;substring&quot;&lt;/code&gt; and &lt;code&gt;i &amp;lt;= start&lt;/code&gt;, or &lt;code&gt;nothing&lt;/code&gt; if unmatched.</source>
          <target state="translated">&lt;code&gt;findnext(&quot;substring&quot;, string, i)&lt;/code&gt; == &lt;code&gt;start:stop&lt;/code&gt; このような &lt;code&gt;string[start:stop] == &quot;substring&quot;&lt;/code&gt; および &lt;code&gt;i &amp;lt;= start&lt;/code&gt; 、または一致し &lt;code&gt;nothing&lt;/code&gt; 場合は何も。</target>
        </trans-unit>
        <trans-unit id="07de775ab3ffe3db837f89e66ab75d6248ad4f16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;findprev(&quot;substring&quot;, string, i)&lt;/code&gt; == &lt;code&gt;start:stop&lt;/code&gt; such that &lt;code&gt;string[start:stop] == &quot;substring&quot;&lt;/code&gt; and &lt;code&gt;stop &amp;lt;= i&lt;/code&gt;, or &lt;code&gt;nothing&lt;/code&gt; if unmatched.</source>
          <target state="translated">&lt;code&gt;findprev(&quot;substring&quot;, string, i)&lt;/code&gt; == &lt;code&gt;start:stop&lt;/code&gt; このような &lt;code&gt;string[start:stop] == &quot;substring&quot;&lt;/code&gt; および &lt;code&gt;stop &amp;lt;= i&lt;/code&gt; 、または一致し &lt;code&gt;nothing&lt;/code&gt; 場合は何も。</target>
        </trans-unit>
        <trans-unit id="6132598e6b7a6f7dbd326bd4b30b37bdb5c4535d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;: Flags for the delta and the objects on each side. Determines whether to treat the file(s) as binary/text, whether they exist on each side of the diff, and whether the object ids are known to be correct.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; ：デルタと両側のオブジェクトのフラグ。ファイルをバイナリ/テキストとして扱うかどうか、それらが差分の両側に存在するかどうか、オブジェクトIDが正しいことがわかっているかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="08dfea97d21ddfc07bbc16a2205aa96d1c822a29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;: a combination of the &lt;a href=&quot;https://libgit2.org/libgit2/#HEAD/type/git_diff_flag_t&quot;&gt;&lt;code&gt;git_diff_flag_t&lt;/code&gt;&lt;/a&gt; flags. The &lt;code&gt;i&lt;/code&gt;th bit of this integer sets the &lt;code&gt;i&lt;/code&gt;th flag.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; ：&lt;a href=&quot;https://libgit2.org/libgit2/#HEAD/type/git_diff_flag_t&quot;&gt; &lt;code&gt;git_diff_flag_t&lt;/code&gt; &lt;/a&gt;フラグの組み合わせ。この整数の &lt;code&gt;i&lt;/code&gt; 番目のビットは、 &lt;code&gt;i&lt;/code&gt; 番目のフラグを設定します。</target>
        </trans-unit>
        <trans-unit id="6a3f46c8ead4a96fd5e9f1735c77e01ac2e9df4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;: an &lt;code&gt;enum&lt;/code&gt; for flags describing merge behavior. Defined in &lt;a href=&quot;https://github.com/libgit2/libgit2/blob/HEAD/include/git2/merge.h#L95&quot;&gt;&lt;code&gt;git_merge_flag_t&lt;/code&gt;&lt;/a&gt;. The corresponding Julia enum is &lt;code&gt;GIT_MERGE&lt;/code&gt; and has values:</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; ：マージ動作を説明するフラグの &lt;code&gt;enum&lt;/code&gt; 。&lt;a href=&quot;https://github.com/libgit2/libgit2/blob/HEAD/include/git2/merge.h#L95&quot;&gt; &lt;code&gt;git_merge_flag_t&lt;/code&gt; で&lt;/a&gt;定義されています。対応するJulia列挙型は &lt;code&gt;GIT_MERGE&lt;/code&gt; であり、次の値があります。</target>
        </trans-unit>
        <trans-unit id="c7ad69674a910f1a345e02b973a2e9f13be3f925" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;: flags controlling which files will appear in the diff. Defaults to &lt;code&gt;DIFF_NORMAL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; ：diffに表示されるファイルを制御するフラグ。デフォルトは &lt;code&gt;DIFF_NORMAL&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ac96c3420fc47ecbae6d81e79e8646bf681816a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;: flags for controlling any callbacks used in a status call.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; ：ステータスコールで使用されるコールバックを制御するためのフラグ。</target>
        </trans-unit>
        <trans-unit id="0f514fc00776f1753b3aa88448a24342da8ef48c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt;: one of &lt;code&gt;Consts.BLAME_NORMAL&lt;/code&gt; or &lt;code&gt;Consts.BLAME_FIRST_PARENT&lt;/code&gt; (the other blame flags are not yet implemented by libgit2).</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; ： &lt;code&gt;Consts.BLAME_NORMAL&lt;/code&gt; または &lt;code&gt;Consts.BLAME_FIRST_PARENT&lt;/code&gt; （他の非難フラグはまだlibgit2で実装されていません）。</target>
        </trans-unit>
        <trans-unit id="e302baefdbfe650eed3e3989e00d95ff24420d69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;floor(T, x)&lt;/code&gt; converts the result to type &lt;code&gt;T&lt;/code&gt;, throwing an &lt;code&gt;InexactError&lt;/code&gt; if the value is not representable.</source>
          <target state="translated">&lt;code&gt;floor(T, x)&lt;/code&gt; は結果を型 &lt;code&gt;T&lt;/code&gt; に変換し、値が表現できない場合は &lt;code&gt;InexactError&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="83862f9f9b336e858b86ef3cce875e4b50041164" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;floor(x)&lt;/code&gt; returns the nearest integral value of the same type as &lt;code&gt;x&lt;/code&gt; that is less than or equal to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;floor(x)&lt;/code&gt; は、 &lt;code&gt;x&lt;/code&gt; と同じか、 &lt;code&gt;x&lt;/code&gt; 以下の同じ型の最も近い整数値を返します。</target>
        </trans-unit>
        <trans-unit id="555deaa32601a989d7598bcb2f199e104d3181cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for&lt;/code&gt; loops repeatedly evaluate a block of statements while iterating over a sequence of values.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; ループは、一連の値を反復しながらステートメントのブロックを繰り返し評価します。</target>
        </trans-unit>
        <trans-unit id="ffc0eadc34c155040e86b2da693e68d65e15d861" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for&lt;/code&gt; loops, &lt;code&gt;while&lt;/code&gt; loops, and &lt;a href=&quot;../arrays/index#Comprehensions-1&quot;&gt;Comprehensions&lt;/a&gt; have the following behavior: any new variables introduced in their body scopes are freshly allocated for each loop iteration, as if the loop body were surrounded by a &lt;code&gt;let&lt;/code&gt; block:</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; ループ、 &lt;code&gt;while&lt;/code&gt; ループ、および&lt;a href=&quot;../arrays/index#Comprehensions-1&quot;&gt;Comprehensionsの&lt;/a&gt;動作は次のとおりです。bodyスコープに導入された新しい変数は、ループ本体が &lt;code&gt;let&lt;/code&gt; ブロックで囲まれているかのように、ループの反復ごとに新しく割り当てられます。</target>
        </trans-unit>
        <trans-unit id="bec35bbf9967b12c572f1318ed025dfeae186ddd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;for&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="c53dd6aa8e8d475ff1ee618c1ee3d8f300a0e513" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;force::Bool=false&lt;/code&gt;: determines if the push will be a force push, overwriting the remote branch.</source>
          <target state="translated">&lt;code&gt;force::Bool=false&lt;/code&gt; ：プッシュが強制プッシュかどうかを決定し、リモートブランチを上書きします。</target>
        </trans-unit>
        <trans-unit id="4ffee3fe6299fc5a6f0fbcb9a6544eb7b084a999" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;force::Bool=false&lt;/code&gt;: if &lt;code&gt;true&lt;/code&gt;, branch creation will be forced.</source>
          <target state="translated">&lt;code&gt;force::Bool=false&lt;/code&gt; ： &lt;code&gt;true&lt;/code&gt; の場合、ブランチの作成が強制されます。</target>
        </trans-unit>
        <trans-unit id="26c5127fe157928b2cdc7f2f08c633baf7c246a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;force::Bool=false&lt;/code&gt;: if &lt;code&gt;true&lt;/code&gt;, existing references will be overwritten.</source>
          <target state="translated">&lt;code&gt;force::Bool=false&lt;/code&gt; ： &lt;code&gt;true&lt;/code&gt; の場合、既存の参照は上書きされます。</target>
        </trans-unit>
        <trans-unit id="d8ce10e1bd1c57308264cfa8a02820161529c9d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;force&lt;/code&gt;: if &lt;code&gt;true&lt;/code&gt;, a force-push will occur, disregarding conflicts.</source>
          <target state="translated">&lt;code&gt;force&lt;/code&gt; ： &lt;code&gt;true&lt;/code&gt; の場合、競合を無視して強制プッシュが発生します。</target>
        </trans-unit>
        <trans-unit id="e46f672d0974765d0e4d253aed78bcd6e5d3db60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt; &amp;ndash; Determines whether backtraces are printed with (default, &lt;code&gt;:tree&lt;/code&gt;) or without (&lt;code&gt;:flat&lt;/code&gt;) indentation indicating tree structure.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; &amp;ndash; ツリー構造を示すインデント付き（デフォルト、 &lt;code&gt;:tree&lt;/code&gt; ）またはなし（ &lt;code&gt;:flat&lt;/code&gt; ）でバックトレースを印刷するかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="c5f38a1c899e88a0f23d1dfceaf7e3fd37e72169" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;format&lt;/code&gt; &amp;ndash; Introduced above, determines whether backtraces are printed with (default, &lt;code&gt;:tree&lt;/code&gt;) or without (&lt;code&gt;:flat&lt;/code&gt;) indentation indicating tree structure.</source>
          <target state="translated">&lt;code&gt;format&lt;/code&gt; &amp;ndash;上で紹介したように、バックトレースを印刷するか（デフォルトでは &lt;code&gt;:tree&lt;/code&gt; ）、インデントを付けずに（ &lt;code&gt;:flat&lt;/code&gt; ）ツリー構造を示すかを決定します。</target>
        </trans-unit>
        <trans-unit id="07b58cbb5868ed67a3999d68cce4a5e6d8243fe7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forward&lt;/code&gt; &amp;ndash; the forwarding option used for &lt;code&gt;-L&lt;/code&gt; option of ssh</source>
          <target state="translated">&lt;code&gt;forward&lt;/code&gt; &lt;code&gt;-L&lt;/code&gt; オプションに使用される転送オプション</target>
        </trans-unit>
        <trans-unit id="c9f61b7b48011ec894bf5fdc902e3b4b8a9fb28f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;func&lt;/code&gt; must accept the bound channel as its only argument.</source>
          <target state="translated">&lt;code&gt;func&lt;/code&gt; は、バインドされたチャネルを唯一の引数として受け入れる必要があります。</target>
        </trans-unit>
        <trans-unit id="23fcdc8d4522728ad257672e40067d5a19c4c857" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;function&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;function&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="0109f2ca671c98fc793c2888fdfb44cb05b2f484" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;global const&lt;/code&gt; statements from local scope after &lt;code&gt;__init__()&lt;/code&gt; has been started (see issue #12010 for plans to add an error for this)</source>
          <target state="translated">&lt;code&gt;global const&lt;/code&gt; &lt;code&gt;__init__()&lt;/code&gt; が開始された後のローカルスコープからのグローバルconstステートメント（このエラーを追加する計画については、問題＃12010を参照してください）</target>
        </trans-unit>
        <trans-unit id="09097a47be30f38cda85035ead6ddf1a81219edb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;global x&lt;/code&gt; makes &lt;code&gt;x&lt;/code&gt; in the current scope and its inner scopes refer to the global variable of that name. See the &lt;a href=&quot;../../manual/variables-and-scoping/index#scope-of-variables&quot;&gt;manual section on variable scoping&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;global x&lt;/code&gt; 作る &lt;code&gt;x&lt;/code&gt; 現在のスコープで、その内側のスコープは、その名前のグローバル変数を参照してください。詳細については、&lt;a href=&quot;../../manual/variables-and-scoping/index#scope-of-variables&quot;&gt;変数スコープに関するマニュアルのセクションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fbcb126bd8fbe56f4b5b16fa14c6c4a92e9cf8a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;global x&lt;/code&gt; makes &lt;code&gt;x&lt;/code&gt; in the current scope and its inner scopes refer to the global variable of that name. See the &lt;a href=&quot;../../manual/variables-and-scoping/index#scope-of-variables-1&quot;&gt;manual section on variable scoping&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;global x&lt;/code&gt; 作る &lt;code&gt;x&lt;/code&gt; 現在のスコープで、その内側のスコープは、その名前のグローバル変数を参照してください。詳細については、&lt;a href=&quot;../../manual/variables-and-scoping/index#scope-of-variables-1&quot;&gt;変数のスコープに関するマニュアルのセクションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6c2e813901bd2d8f12c7e3878d31c8f733486073" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;global&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;global&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="a90e71a2c6d30f99d8ba5b28c6c2a5bb0f3aff1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hash&lt;/code&gt; is a full (&lt;code&gt;GitHash&lt;/code&gt;) or partial (&lt;code&gt;GitShortHash&lt;/code&gt;) hash.</source>
          <target state="translated">&lt;code&gt;hash&lt;/code&gt; は完全（ &lt;code&gt;GitHash&lt;/code&gt; ）または部分的（ &lt;code&gt;GitShortHash&lt;/code&gt; ）ハッシュです。</target>
        </trans-unit>
        <trans-unit id="6ab9710162b39252a4dfe60a21316f6a9dd04318" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;head_to_index&lt;/code&gt;: a pointer to a &lt;a href=&quot;#LibGit2.DiffDelta&quot;&gt;&lt;code&gt;DiffDelta&lt;/code&gt;&lt;/a&gt; which encapsulates the difference(s) between the file as it exists in HEAD and in the index.</source>
          <target state="translated">&lt;code&gt;head_to_index&lt;/code&gt; ：ファイルがHEADとインデックスに存在する場合のファイル間の差異をカプセル化する&lt;a href=&quot;#LibGit2.DiffDelta&quot;&gt; &lt;code&gt;DiffDelta&lt;/code&gt; &lt;/a&gt;へのポインター。</target>
        </trans-unit>
        <trans-unit id="a8fb6255646b88973be5d589e3e2cd202888275d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hessenberg!&lt;/code&gt; is the same as &lt;a href=&quot;#LinearAlgebra.hessenberg&quot;&gt;&lt;code&gt;hessenberg&lt;/code&gt;&lt;/a&gt;, but saves space by overwriting the input &lt;code&gt;A&lt;/code&gt;, instead of creating a copy.</source>
          <target state="translated">&lt;code&gt;hessenberg!&lt;/code&gt; &lt;a href=&quot;#LinearAlgebra.hessenberg&quot;&gt; &lt;code&gt;hessenberg&lt;/code&gt; &lt;/a&gt;と同じですが、コピーを作成する代わりに入力 &lt;code&gt;A&lt;/code&gt; を上書きすることでスペースを節約します。</target>
        </trans-unit>
        <trans-unit id="443aaa2d8a08dbab9eefb3c00c406e4d50854023" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;homedir&lt;/code&gt; determines the home directory via &lt;code&gt;libuv&lt;/code&gt;'s &lt;code&gt;uv_os_homedir&lt;/code&gt;. For details (for example on how to specify the home directory via environment variables), see the &lt;a href=&quot;http://docs.libuv.org/en/v1.x/misc.html#c.uv_os_homedir&quot;&gt;&lt;code&gt;uv_os_homedir&lt;/code&gt; documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;homedir&lt;/code&gt; は、 &lt;code&gt;libuv&lt;/code&gt; の &lt;code&gt;uv_os_homedir&lt;/code&gt; を介してホームディレクトリを決定します。詳細（環境変数を使用してホームディレクトリを指定する方法など）については、&lt;a href=&quot;http://docs.libuv.org/en/v1.x/misc.html#c.uv_os_homedir&quot;&gt; &lt;code&gt;uv_os_homedir&lt;/code&gt; のドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="25471dd737a8db4cd226555668049cca23bf99f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;host::AbstractString=&quot;&quot;&lt;/code&gt;: the hostname to use in the output. A hostname is required to be specified.</source>
          <target state="translated">&lt;code&gt;host::AbstractString=&quot;&quot;&lt;/code&gt; ：出力で使用するホスト名。ホスト名を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="6b6378d9ceebd483400cddb31fa9c2a3c49dd015" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;host&lt;/code&gt; &amp;ndash; the host address (either an &lt;code&gt;AbstractString&lt;/code&gt; or &lt;code&gt;Nothing&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;host&lt;/code&gt; &amp;ndash;ホストアドレス（ &lt;code&gt;AbstractString&lt;/code&gt; または &lt;code&gt;Nothing&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="98f2590aab388123acc554ec9786e12f2ed78dd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt; enables case-insensitive matching</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; 大文字と小文字を区別しないマッチングを可能にします</target>
        </trans-unit>
        <trans-unit id="1ac86474612cc32f61718a325d8179094b3f029b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id&lt;/code&gt; is unique across all references created from the worker specified by &lt;code&gt;whence&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; は、 &lt;code&gt;whence&lt;/code&gt; で指定されたワーカーから作成されたすべての参照にわたって一意です。</target>
        </trans-unit>
        <trans-unit id="77683aec1c525b2fa7ea4282b18b2bfd743591a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id&lt;/code&gt;: the &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; of the commit being worked on during this rebase step.</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; ：このリベースステップ中に作業中のコミットの&lt;a href=&quot;#LibGit2.GitHash&quot;&gt; &lt;code&gt;GitHash&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4632953193a9be88e4db3f78db33ec9c0b3e5355" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id&lt;/code&gt;: the &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; of the item in the diff. If the item is empty on this side of the diff (for instance, if the diff is of the removal of a file), this will be &lt;code&gt;GitHash(0)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; ：差分内のアイテムの&lt;a href=&quot;#LibGit2.GitHash&quot;&gt; &lt;code&gt;GitHash&lt;/code&gt; &lt;/a&gt;。項目がdiffのこちら側で空の場合（たとえば、diffがファイルの削除である場合）、これは &lt;code&gt;GitHash(0)&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="9e890a5aeabd7d8ed2134402d7301e54269b9fea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id_abbrev&lt;/code&gt;: only present in LibGit2 versions newer than or equal to &lt;code&gt;0.25.0&lt;/code&gt;. The length of the &lt;code&gt;id&lt;/code&gt; field when converted using &lt;a href=&quot;../../base/strings/index#Base.string&quot;&gt;&lt;code&gt;string&lt;/code&gt;&lt;/a&gt;. Usually equal to &lt;code&gt;OID_HEXSZ&lt;/code&gt; (40).</source>
          <target state="translated">&lt;code&gt;id_abbrev&lt;/code&gt; ：より新しいか等しいLibGit2バージョンにのみ存在 &lt;code&gt;0.25.0&lt;/code&gt; 。&lt;a href=&quot;../../base/strings/index#Base.string&quot;&gt; &lt;code&gt;string&lt;/code&gt; &lt;/a&gt;を使用して変換したときの &lt;code&gt;id&lt;/code&gt; フィールドの長さ。通常、 &lt;code&gt;OID_HEXSZ&lt;/code&gt; （40）と同じです。</target>
        </trans-unit>
        <trans-unit id="3d569a64dd1d8d5f907282660e533f0925b4121f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id_abbrev&lt;/code&gt;: sets the length of the abbreviated &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; to print. Default is &lt;code&gt;7&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;id_abbrev&lt;/code&gt; ：印刷する&lt;a href=&quot;#LibGit2.GitHash&quot;&gt; &lt;code&gt;GitHash&lt;/code&gt; &lt;/a&gt;の省略形の長さを設定します。デフォルトは &lt;code&gt;7&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9b126af9abc886e3ecfdde16a44fc1fd06cacab0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ident&lt;/code&gt; &amp;ndash; worker as identified by the &lt;a href=&quot;#Distributed.ClusterManager&quot;&gt;&lt;code&gt;ClusterManager&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;ident&lt;/code&gt; &amp;ndash; &lt;a href=&quot;#Distributed.ClusterManager&quot;&gt; &lt;code&gt;ClusterManager&lt;/code&gt; &lt;/a&gt;によって識別されたワーカー</target>
        </trans-unit>
        <trans-unit id="63b00d5176640c38aab5edaa5b524b6e779cf1b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; blocks also return a value, which may seem unintuitive to users coming from many other languages. This value is simply the return value of the last executed statement in the branch that was chosen, so</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; ブロックも値を返すため、他の多くの言語を使用しているユーザーには直感的でないように見える場合があります。この値は単に、選択されたブランチで最後に実行されたステートメントの戻り値なので、</target>
        </trans-unit>
        <trans-unit id="fcb2f9043fb5a6e861c26de7d9fc3e06f6279b43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt; blocks are &quot;leaky&quot;, i.e. they do not introduce a local scope. This means that new variables defined inside the &lt;code&gt;if&lt;/code&gt; clauses can be used after the &lt;code&gt;if&lt;/code&gt; block, even if they weren't defined before. So, we could have defined the &lt;code&gt;test&lt;/code&gt; function above as</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; ブロックが「漏洩」している場合、つまりローカルスコープが導入されていない場合。つまり、 &lt;code&gt;if&lt;/code&gt; 句内で定義された新しい変数は、前に定義されていなくても、 &lt;code&gt;if&lt;/code&gt; ブロックの後に使用できます。したがって、上記の &lt;code&gt;test&lt;/code&gt; 関数を次のように定義できます。</target>
        </trans-unit>
        <trans-unit id="4bf46a1a1630b72dba5a7f8db4ee562143b45f89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt;/&lt;code&gt;elseif&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; performs conditional evaluation, which allows portions of code to be evaluated or not evaluated depending on the value of a boolean expression. Here is the anatomy of the &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;elseif&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; conditional syntax:</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; / &lt;code&gt;elseif&lt;/code&gt; / &lt;code&gt;else&lt;/code&gt; は、条件式の評価を実行します。これにより、ブール式の値に応じて、コードの一部を評価することも評価しないこともできます。次に、 &lt;code&gt;if&lt;/code&gt; / &lt;code&gt;elseif&lt;/code&gt; / &lt;code&gt;else&lt;/code&gt; 条件付き構文の構造を示します。</target>
        </trans-unit>
        <trans-unit id="566ebce021ad66c3334658155da253a262017f6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;if&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="b5d807151cf5fb7a277f815a71877f8ac2493dd3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ignore_submodules&lt;/code&gt;: whether to look at files in submodules or not. Defaults to &lt;code&gt;SUBMODULE_IGNORE_UNSPECIFIED&lt;/code&gt;, which means the submodule's configuration will control whether it appears in the diff or not.</source>
          <target state="translated">&lt;code&gt;ignore_submodules&lt;/code&gt; ：サブモジュール内のファイルを見るかどうか。デフォルトは &lt;code&gt;SUBMODULE_IGNORE_UNSPECIFIED&lt;/code&gt; です。これは、サブモジュールの構成がdiffに表示されるかどうかを制御することを意味します。</target>
        </trans-unit>
        <trans-unit id="c7ec9971812e6bb11003c306876aa97764469071" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ignorestatus::Bool&lt;/code&gt;: If &lt;code&gt;true&lt;/code&gt; (defaults to &lt;code&gt;false&lt;/code&gt;), then the &lt;code&gt;Cmd&lt;/code&gt; will not throw an error if the return code is nonzero.</source>
          <target state="translated">&lt;code&gt;ignorestatus::Bool&lt;/code&gt; ： &lt;code&gt;true&lt;/code&gt; （デフォルトは &lt;code&gt;false&lt;/code&gt; ）の場合、戻りコードがゼロ以外の場合、 &lt;code&gt;Cmd&lt;/code&gt; はエラーをスローしません。</target>
        </trans-unit>
        <trans-unit id="b778f0523dec6fb0a23df4b4366a7735dc4e5360" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Foo&lt;/code&gt; will load the module or package &lt;code&gt;Foo&lt;/code&gt;. Names from the imported &lt;code&gt;Foo&lt;/code&gt; module can be accessed with dot syntax (e.g. &lt;code&gt;Foo.foo&lt;/code&gt; to access the name &lt;code&gt;foo&lt;/code&gt;). See the &lt;a href=&quot;../../manual/modules/index#modules&quot;&gt;manual section about modules&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;import Foo&lt;/code&gt; モジュールをロードするか、またはパッケージ化されます &lt;code&gt;Foo&lt;/code&gt; のを。インポートされた &lt;code&gt;Foo&lt;/code&gt; モジュールの名前には、ドット構文でアクセスできます（たとえば、名前 &lt;code&gt;foo&lt;/code&gt; にアクセスするには &lt;code&gt;Foo.foo&lt;/code&gt; ）。詳細については、&lt;a href=&quot;../../manual/modules/index#modules&quot;&gt;モジュール&lt;/a&gt;に関するマニュアルのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="9d73230963993ccbecb868483fbaecb6157d6cda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import Foo&lt;/code&gt; will load the module or package &lt;code&gt;Foo&lt;/code&gt;. Names from the imported &lt;code&gt;Foo&lt;/code&gt; module can be accessed with dot syntax (e.g. &lt;code&gt;Foo.foo&lt;/code&gt; to access the name &lt;code&gt;foo&lt;/code&gt;). See the &lt;a href=&quot;../../manual/modules/index#modules-1&quot;&gt;manual section about modules&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;import Foo&lt;/code&gt; モジュールをロードするか、またはパッケージ化されます &lt;code&gt;Foo&lt;/code&gt; のを。インポートされた &lt;code&gt;Foo&lt;/code&gt; モジュールからの名前は、ドット構文でアクセスできます（たとえば、名前 &lt;code&gt;foo&lt;/code&gt; にアクセスするための &lt;code&gt;Foo.foo&lt;/code&gt; ）。詳細については、&lt;a href=&quot;../../manual/modules/index#modules-1&quot;&gt;モジュール&lt;/a&gt;に関するマニュアルのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="3a86299ce603a7643e3664ff35ca004b94ad86d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;import&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;import&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="c35c5eb16c9e1c075a2a381e94cfe254e7dd0daa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;include&lt;/code&gt; the &lt;code&gt;tst.jl&lt;/code&gt; file in the Julia REPL with &lt;code&gt;include(&quot;tst.jl&quot;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;include&lt;/code&gt; &lt;code&gt;tst.jl&lt;/code&gt; のでジュリアREPLにファイルを &lt;code&gt;include(&quot;tst.jl&quot;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f768295f60d5987df59c14346dbea6137535cca3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index_to_workdir&lt;/code&gt;: a pointer to a &lt;code&gt;DiffDelta&lt;/code&gt; which encapsulates the difference(s) between the file as it exists in the index and in the &lt;a href=&quot;#LibGit2.workdir&quot;&gt;&lt;code&gt;workdir&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;index_to_workdir&lt;/code&gt; ：インデックスと&lt;a href=&quot;#LibGit2.workdir&quot;&gt; &lt;code&gt;workdir&lt;/code&gt; に&lt;/a&gt;存在するファイル間の違いをカプセル化する &lt;code&gt;DiffDelta&lt;/code&gt; へのポインタ。</target>
        </trans-unit>
        <trans-unit id="474f56e3f7f2db91f626ba947f94c8134a832be0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inds&lt;/code&gt; can be either an iterator or a collection of sorted and unique integer indices, or a boolean vector of the same length as &lt;code&gt;a&lt;/code&gt; with &lt;code&gt;true&lt;/code&gt; indicating entries to delete.</source>
          <target state="translated">&lt;code&gt;inds&lt;/code&gt; イテレータまたはソート及び固有の整数インデックスの集合、又は同じ長さのブールベクトルのいずれかとすることができると &lt;code&gt;true&lt;/code&gt; 削除することを示すエントリ。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f4b74525a3214d8995b7de35723cd0e10aa9cc48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init_worker(cookie, manager::FooManager)&lt;/code&gt;&lt;em&gt;must&lt;/em&gt; be called as part of worker process initialization.</source>
          <target state="translated">&lt;code&gt;init_worker(cookie, manager::FooManager)&lt;/code&gt; &lt;em&gt;は&lt;/em&gt;、ワーカープロセスの初期化の一部として呼び出す&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="062786138593a2c08d489ac7499ae90c9ac1b687" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inmemory&lt;/code&gt;: start an in-memory rebase. Callers working on the rebase can go through its steps and commit any changes, but cannot rewind HEAD or update the repository. The &lt;a href=&quot;#LibGit2.workdir&quot;&gt;&lt;code&gt;workdir&lt;/code&gt;&lt;/a&gt; will not be modified. Only present on libgit2 versions newer than or equal to 0.24.0.</source>
          <target state="translated">&lt;code&gt;inmemory&lt;/code&gt; ：インメモリリベースを開始します。リベースで作業している呼び出し元は、その手順を実行して変更をコミットできますが、HEADを巻き戻したり、リポジトリを更新したりすることはできません。&lt;a href=&quot;#LibGit2.workdir&quot;&gt; &lt;code&gt;workdir&lt;/code&gt; &lt;/a&gt;変更されません。0.24.0以降のlibgit2バージョンにのみ存在します。</target>
        </trans-unit>
        <trans-unit id="43f0e964371142a5bdcf673bc58ad413b60b5576" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int&lt;/code&gt;, &lt;code&gt;BOOL&lt;/code&gt; (C, typical)</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 、 &lt;code&gt;BOOL&lt;/code&gt; （C、標準）</target>
        </trans-unit>
        <trans-unit id="8c6987d5f4b696d5dad48c78ec3bd108e4434880" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;interhunk_lines&lt;/code&gt;: the maximum number of &lt;em&gt;unchanged&lt;/em&gt; lines &lt;em&gt;between&lt;/em&gt; two separate hunks allowed before the hunks will be combined. Default is 0.</source>
          <target state="translated">&lt;code&gt;interhunk_lines&lt;/code&gt; ：ハンクが結合される前に許可される2つの個別のハンク&lt;em&gt;間&lt;/em&gt;の&lt;em&gt;変更されていない&lt;/em&gt;行の最大数。デフォルトは0です。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5ac758c6df49f7e88cbaf72ed20736709216e27a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inv(::Missing)&lt;/code&gt; requires at least Julia 1.2.</source>
          <target state="translated">&lt;code&gt;inv(::Missing)&lt;/code&gt; には少なくともJulia 1.2が必要です。</target>
        </trans-unit>
        <trans-unit id="defccb8166cf527d394e34aea3f1751d7f3bf94e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inv&lt;/code&gt;, &lt;a href=&quot;#LinearAlgebra.det&quot;&gt;&lt;code&gt;det&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;inv&lt;/code&gt; 、&lt;a href=&quot;#LinearAlgebra.det&quot;&gt; &lt;code&gt;det&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="0f1625223f3bccb84ba7248a9f8ae3e5a6efc8f2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inv&lt;/code&gt;, &lt;a href=&quot;#LinearAlgebra.det&quot;&gt;&lt;code&gt;det&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#LinearAlgebra.logdet&quot;&gt;&lt;code&gt;logdet&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/math/index#Base.:/&quot;&gt;&lt;code&gt;/&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;inv&lt;/code&gt; 、&lt;a href=&quot;#LinearAlgebra.det&quot;&gt; &lt;code&gt;det&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#LinearAlgebra.logdet&quot;&gt; &lt;code&gt;logdet&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../base/math/index#Base.:/&quot;&gt; &lt;code&gt;/&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3fd375f58223ce99e67fd522a69ff52eeb0090c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inv&lt;/code&gt;, &lt;code&gt;sqrt&lt;/code&gt;, &lt;code&gt;exp&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;inv&lt;/code&gt; 、 &lt;code&gt;sqrt&lt;/code&gt; 、 &lt;code&gt;exp&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fb423dd8ec10d55f3420319afa3f79a334d2182d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;io&lt;/code&gt; &amp;ndash; Allows you to save the results to a buffer, e.g. a file, but the default is to print to &lt;code&gt;stdout&lt;/code&gt; (the console).</source>
          <target state="translated">&lt;code&gt;io&lt;/code&gt; &amp;ndash;結果をバッファー（ファイルなど）に保存できますが、デフォルトでは &lt;code&gt;stdout&lt;/code&gt; （コンソール）に出力されます。</target>
        </trans-unit>
        <trans-unit id="5546bdb05f19d23dc367936cace4cab1b8200d3e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;io&lt;/code&gt; &amp;ndash; the connection used to access the worker (a subtype of &lt;code&gt;IO&lt;/code&gt; or &lt;code&gt;Nothing&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;io&lt;/code&gt; &amp;ndash;ワーカーへのアクセスに使用される接続（サブタイプ &lt;code&gt;IO&lt;/code&gt; または &lt;code&gt;Nothing&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b8a259654f78220bfceb0da4679453a56d4d9938" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isbare::Bool=false&lt;/code&gt;: if &lt;code&gt;true&lt;/code&gt;, clone the remote as a bare repository, which will make &lt;code&gt;repo_path&lt;/code&gt; itself the git directory instead of &lt;code&gt;repo_path/.git&lt;/code&gt;. This means that a working tree cannot be checked out. Plays the role of the git CLI argument &lt;code&gt;--bare&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;isbare::Bool=false&lt;/code&gt; ： &lt;code&gt;true&lt;/code&gt; の場合、リモートをベアリポジトリとして複製します。これにより、 &lt;code&gt;repo_path&lt;/code&gt; 自体が &lt;code&gt;repo_path/.git&lt;/code&gt; ではなくgitディレクトリになります。つまり、作業ツリーはチェックアウトできません。git CLI引数 &lt;code&gt;--bare&lt;/code&gt; の役割を果たします。</target>
        </trans-unit>
        <trans-unit id="8f28ba244c2cc607da8b0fcf1f3367c037ee2322" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isequal&lt;/code&gt; can also be used to distinguish signed zeros:</source>
          <target state="translated">&lt;code&gt;isequal&lt;/code&gt; は、符号付きゼロを区別するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="6155f47b9568bd6b958ba232c62862f14186f428" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isequal&lt;/code&gt; is the comparison function used by hash tables (&lt;code&gt;Dict&lt;/code&gt;). &lt;code&gt;isequal(x,y)&lt;/code&gt; must imply that &lt;code&gt;hash(x) == hash(y)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;isequal&lt;/code&gt; は、ハッシュテーブル（ &lt;code&gt;Dict&lt;/code&gt; ）で使用される比較関数です。 &lt;code&gt;isequal(x,y)&lt;/code&gt; は、 &lt;code&gt;hash(x) == hash(y)&lt;/code&gt; ことを意味する必要があります。</target>
        </trans-unit>
        <trans-unit id="2c588e795f436dd4d05aaac17fde984ce26c5d8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ismerge&lt;/code&gt;: Boolean flag indicating whether the changes at the remote have been merged into the local copy yet or not. If &lt;code&gt;true&lt;/code&gt;, the local copy is up to date with the remote fetch head.</source>
          <target state="translated">&lt;code&gt;ismerge&lt;/code&gt; ：リモートでの変更がローカルコピーにまだマージされているかどうかを示すブールフラグ。場合は &lt;code&gt;true&lt;/code&gt; 、ローカルコピーは、リモートヘッドをフェッチして最新の状態にあります。</target>
        </trans-unit>
        <trans-unit id="cf09e161cb1b30fd41fdc4159954ec544ced0840" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isready&lt;/code&gt; - return false if a &lt;code&gt;take!&lt;/code&gt; on the pool would block, else true</source>
          <target state="translated">&lt;code&gt;isready&lt;/code&gt; - &lt;code&gt;take!&lt;/code&gt; 場合はfalseを返します！プールではブロックし、そうでなければtrue</target>
        </trans-unit>
        <trans-unit id="7ad6e3363b26358cf09c26c458c64943918beb93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;isready&lt;/code&gt; tests for the presence of any object in the channel, while &lt;a href=&quot;../../base/parallel/index#Base.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; waits for an object to become available.</source>
          <target state="translated">&lt;code&gt;isready&lt;/code&gt; はチャネル内にオブジェクトが存在するかどうかをテストし、&lt;a href=&quot;../../base/parallel/index#Base.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt;はオブジェクトが使用可能になるまで待機します。</target>
        </trans-unit>
        <trans-unit id="cf94b7544dc2a3713c698136abf41c0ffeb4bb19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jl_error&lt;/code&gt; takes a C string, and &lt;code&gt;jl_errorf&lt;/code&gt; is called like &lt;code&gt;printf&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;jl_error&lt;/code&gt; はC文字列を取り、 &lt;code&gt;jl_errorf&lt;/code&gt; は &lt;code&gt;printf&lt;/code&gt; のように呼び出されます。</target>
        </trans-unit>
        <trans-unit id="41fc079cf4386f9010ec6a2a6dcc4d336dfd5990" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jl_value_t**&lt;/code&gt; (a reference to a Julia Type)</source>
          <target state="translated">&lt;code&gt;jl_value_t**&lt;/code&gt; （ジュリア型への参照）</target>
        </trans-unit>
        <trans-unit id="c496bfdad90f2fcfcf408b69f7b755c0534067bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jl_value_t*&lt;/code&gt; (any Julia Type)</source>
          <target state="translated">&lt;code&gt;jl_value_t*&lt;/code&gt; （任意のJuliaタイプ）</target>
        </trans-unit>
        <trans-unit id="a6119baf62a14c4942fa709be955c8698c7254e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jpvt&lt;/code&gt; is an integer vector of length &lt;code&gt;n&lt;/code&gt; corresponding to the permutation $P$.</source>
          <target state="translated">&lt;code&gt;jpvt&lt;/code&gt; は、置換$ P $に対応する長さ &lt;code&gt;n&lt;/code&gt; の整数ベクトルです。</target>
        </trans-unit>
        <trans-unit id="5370bf4f79562ad85e01f701fe6974cf62dddd5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;julia    pkg&amp;gt; generate MyPkg              # type ] to enter pkg mode    julia&amp;gt; push!(LOAD_PATH, pwd())   # hit backspace to exit pkg mode&lt;/code&gt; If you restart your Julia session you'll have to re-issue that command modifying &lt;code&gt;LOAD_PATH&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;julia pkg&amp;gt; generate MyPkg # type ] to enter pkg mode julia&amp;gt; push!(LOAD_PATH, pwd()) # hit backspace to exit pkg mode&lt;/code&gt; するJuliaセッションを再起動する場合は、 &lt;code&gt;LOAD_PATH&lt;/code&gt; を変更するコマンドを再発行する必要があります。</target>
        </trans-unit>
        <trans-unit id="cdd73df7706c15ba69b8cb61854340ff6886bc85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;julia    using PkgTemplates    t = Template()    generate(&quot;MyPkg&quot;, t)&lt;/code&gt; This will create a blank package, &lt;code&gt;&quot;MyPkg&quot;&lt;/code&gt;, in your &lt;code&gt;.julia/dev&lt;/code&gt; directory. Note that PkgTemplates allows you to control many different options through its &lt;code&gt;Template&lt;/code&gt; constructor.</source>
          <target state="translated">&lt;code&gt;julia using PkgTemplates t = Template() generate(&quot;MyPkg&quot;, t)&lt;/code&gt; これにより、空のパッケージ &lt;code&gt;&quot;MyPkg&quot;&lt;/code&gt; が &lt;code&gt;.julia/dev&lt;/code&gt; ディレクトリに作成されます。PkgTemplatesでは、 &lt;code&gt;Template&lt;/code&gt; コンストラクターを介してさまざまなオプションを制御できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="625af536bb88ddf9aa5a8b9ba26a788c563e9774" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keepempty&lt;/code&gt;: whether empty fields should be kept in the result. Default is &lt;code&gt;false&lt;/code&gt; without a &lt;code&gt;dlm&lt;/code&gt; argument, &lt;code&gt;true&lt;/code&gt; with a &lt;code&gt;dlm&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;keepempty&lt;/code&gt; ：空のフィールドを結果に保持するかどうか。デフォルトは &lt;code&gt;false&lt;/code&gt; をせずに &lt;code&gt;dlm&lt;/code&gt; 引数、 &lt;code&gt;true&lt;/code&gt; と &lt;code&gt;dlm&lt;/code&gt; 引数。</target>
        </trans-unit>
        <trans-unit id="9c6fd799a7cffc4157ed068f75896f2a6f68342b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill(manager, pid, config)&lt;/code&gt; is called to remove a worker from the cluster. On the master process, the corresponding &lt;code&gt;IO&lt;/code&gt; objects must be closed by the implementation to ensure proper cleanup. The default implementation simply executes an &lt;code&gt;exit()&lt;/code&gt; call on the specified remote worker.</source>
          <target state="translated">&lt;code&gt;kill(manager, pid, config)&lt;/code&gt; が呼び出され、クラスターからワーカーを削除します。マスタープロセスでは、適切なクリーンアップを保証するために、対応する &lt;code&gt;IO&lt;/code&gt; オブジェクトを実装によって閉じる必要があります。デフォルトの実装では、指定されたリモートワーカーで単に &lt;code&gt;exit()&lt;/code&gt; 呼び出しを実行します。</target>
        </trans-unit>
        <trans-unit id="5bfba992423752658b61db87a6fc7a82071655e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;launched::Array&lt;/code&gt;: the array to append one or more &lt;code&gt;WorkerConfig&lt;/code&gt; objects to</source>
          <target state="translated">&lt;code&gt;launched::Array&lt;/code&gt; &lt;code&gt;WorkerConfig&lt;/code&gt; :: Array：1つ以上のWorkerConfigオブジェクトを追加する配列</target>
        </trans-unit>
        <trans-unit id="6c4472e72e5805ee9aa798ea6065a631b9f8120d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lazy&lt;/code&gt;: Applicable only with &lt;code&gt;topology=:all_to_all&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, worker-worker connections are setup lazily, i.e. they are setup at the first instance of a remote call between workers. Default is true.</source>
          <target state="translated">&lt;code&gt;lazy&lt;/code&gt; ： &lt;code&gt;topology=:all_to_all&lt;/code&gt; のみ適用されます。場合は &lt;code&gt;true&lt;/code&gt; 、労働者・労働者の接続が遅延して設定されている、彼らは労働者の間でリモート呼び出しの最初のインスタンスに設定されている。すなわち。デフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="6ab3641b567d7550fa4574b7e9fcd59486edd69f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;length(iter)&lt;/code&gt; and &lt;code&gt;size(iter, [dim])&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;length(iter)&lt;/code&gt; および &lt;code&gt;size(iter, [dim])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b82c15769674081bdc4b1e2732d829ab6f255a5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;length(str)&lt;/code&gt; the number of characters in &lt;code&gt;str&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;length(str)&lt;/code&gt; の文字数 &lt;code&gt;str&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="520336ce4b0d7ffb4223a859ab46df75e628bf97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;length(str, i, j)&lt;/code&gt; the number of valid character indices in &lt;code&gt;str&lt;/code&gt; from &lt;code&gt;i&lt;/code&gt; to &lt;code&gt;j&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;length(str, i, j)&lt;/code&gt; &lt;code&gt;i&lt;/code&gt; から &lt;code&gt;j&lt;/code&gt; までの &lt;code&gt;str&lt;/code&gt; 内の有効な文字インデックスの数。</target>
        </trans-unit>
        <trans-unit id="45f8144db4b1abe106783e820484be829d5e84bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt; statements allocate new variable bindings each time they run. Whereas an assignment modifies an existing value location, &lt;code&gt;let&lt;/code&gt; creates new locations. This difference is only detectable in the case of variables that outlive their scope via closures. The &lt;code&gt;let&lt;/code&gt; syntax accepts a comma-separated series of assignments and variable names:</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt; ステートメントは、実行するたびに新しい変数バインディングを割り当てます。割り当てによって既存の値の場所が変更されるのに対し、新しい場所を作成して &lt;code&gt;let&lt;/code&gt; 。この違いは、クロージャーを介してスコープを超えた変数の場合にのみ検出可能です。 &lt;code&gt;let&lt;/code&gt; 構文は、割り当てと変数名をカンマで区切った一連を受け付けます。</target>
        </trans-unit>
        <trans-unit id="2857b88b57ff8e8634f1fd5411364f41533e5276" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;let&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;let&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="6d34fd9ee3b3db157e9c05aba51e1a69d53562d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;limit&lt;/code&gt;: the maximum size of the result. &lt;code&gt;limit=0&lt;/code&gt; implies no maximum (default)</source>
          <target state="translated">&lt;code&gt;limit&lt;/code&gt; ：結果の最大サイズ。 &lt;code&gt;limit=0&lt;/code&gt; は最大値がないことを意味します（デフォルト）</target>
        </trans-unit>
        <trans-unit id="4701fc63cc18d0bd4efa7e7a724aa45a91814bab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;line&lt;/code&gt; - the line number to open the editor at</source>
          <target state="translated">&lt;code&gt;line&lt;/code&gt; -行番号でエディタを開くために</target>
        </trans-unit>
        <trans-unit id="ee768c9c42d9eb36402e2084b6758909461265e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local&lt;/code&gt; introduces a new local variable. See the &lt;a href=&quot;../../manual/variables-and-scoping/index#scope-of-variables&quot;&gt;manual section on variable scoping&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;local&lt;/code&gt; は、新しいローカル変数を導入します。詳細については、&lt;a href=&quot;../../manual/variables-and-scoping/index#scope-of-variables&quot;&gt;変数スコープに関するマニュアルのセクションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5a949f1c99f2882cd291b76f59d11378f665e213" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local&lt;/code&gt; introduces a new local variable. See the &lt;a href=&quot;../../manual/variables-and-scoping/index#scope-of-variables-1&quot;&gt;manual section on variable scoping&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;local&lt;/code&gt; は新しいローカル変数を導入します。詳細については、&lt;a href=&quot;../../manual/variables-and-scoping/index#scope-of-variables-1&quot;&gt;変数のスコープに関するマニュアルのセクションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f1237a0341e49a3e81f1f3559c045b64e25d095c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;local&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;local&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="b2ace899c61be5098940595710c0631ed9e0f98f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;localclone&lt;/code&gt;: Flag whether to clone a local object database or do a fetch. The default is to let git decide. It will not use the git-aware transport for a local clone, but will use it for URLs which begin with &lt;code&gt;file://&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;localclone&lt;/code&gt; ：ローカルオブジェクトデータベースのクローンを作成するか、フェッチを実行するかを示すフラグ。デフォルトではgitが決定します。ローカルクローンにはgit-awareトランスポートを使用しませんが、 &lt;code&gt;file://&lt;/code&gt; で始まるURLには使用します。</target>
        </trans-unit>
        <trans-unit id="45419d31c5c3e877e8801855f33df8c42b91a13b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lu!&lt;/code&gt; is the same as &lt;a href=&quot;#LinearAlgebra.lu&quot;&gt;&lt;code&gt;lu&lt;/code&gt;&lt;/a&gt;, but saves space by overwriting the input &lt;code&gt;A&lt;/code&gt;, instead of creating a copy. An &lt;a href=&quot;../../base/base/index#Core.InexactError&quot;&gt;&lt;code&gt;InexactError&lt;/code&gt;&lt;/a&gt; exception is thrown if the factorization produces a number not representable by the element type of &lt;code&gt;A&lt;/code&gt;, e.g. for integer types.</source>
          <target state="translated">&lt;code&gt;lu!&lt;/code&gt; は&lt;a href=&quot;#LinearAlgebra.lu&quot;&gt; &lt;code&gt;lu&lt;/code&gt; &lt;/a&gt;と同じですが、コピーを作成する代わりに入力 &lt;code&gt;A&lt;/code&gt; を上書きすることでスペースを節約します。アン&lt;a href=&quot;../../base/base/index#Core.InexactError&quot;&gt; &lt;code&gt;InexactError&lt;/code&gt; の&lt;/a&gt;因数分解は、の要素の型によって表現できない数生成する場合は、例外がスローされた &lt;code&gt;A&lt;/code&gt; 整数型用などを、。</target>
        </trans-unit>
        <trans-unit id="80e7ecffd4874930679049a4efd39c31c359825a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m&lt;/code&gt; treats the &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; tokens as matching the start and end of individual lines, as opposed to the whole string.</source>
          <target state="translated">&lt;code&gt;m&lt;/code&gt; は、文字列全体ではなく、 &lt;code&gt;^&lt;/code&gt; および &lt;code&gt;$&lt;/code&gt; トークンを、個々の行の開始と終了に一致するものとして扱います。</target>
        </trans-unit>
        <trans-unit id="959d5f8f25ccf34278c7231d15d752b5420fe0a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m&lt;/code&gt;-by-&lt;code&gt;n&lt;/code&gt; identity matrix</source>
          <target state="translated">&lt;code&gt;m&lt;/code&gt; 行 &lt;code&gt;n&lt;/code&gt; 列の単位行列</target>
        </trans-unit>
        <trans-unit id="f58713efbedd940089d6be8f8c2bd121e93d80c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;m&lt;/code&gt;-by-&lt;code&gt;n&lt;/code&gt; identity matrix. Requires &lt;code&gt;using LinearAlgebra&lt;/code&gt; for &lt;a href=&quot;../../stdlib/linearalgebra/index#LinearAlgebra.I&quot;&gt;&lt;code&gt;I&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;m&lt;/code&gt; 行 &lt;code&gt;n&lt;/code&gt; 列の単位行列。&lt;a href=&quot;../../stdlib/linearalgebra/index#LinearAlgebra.I&quot;&gt; &lt;code&gt;I&lt;/code&gt; には&lt;/a&gt; &lt;code&gt;using LinearAlgebra&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="d0804fc37d749faa6c59c487dd0fd30a88f27145" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;machine_spec&lt;/code&gt; is a string of the form &lt;code&gt;[user@]host[:port] [bind_addr[:port]]&lt;/code&gt;. &lt;code&gt;user&lt;/code&gt; defaults to current user, &lt;code&gt;port&lt;/code&gt; to the standard ssh port. If &lt;code&gt;[bind_addr[:port]]&lt;/code&gt; is specified, other workers will connect to this worker at the specified &lt;code&gt;bind_addr&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;machine_spec&lt;/code&gt; は、 &lt;code&gt;[user@]host[:port] [bind_addr[:port]]&lt;/code&gt; という形式の文字列です。 &lt;code&gt;user&lt;/code&gt; デフォルトは現在のユーザー、 &lt;code&gt;port&lt;/code&gt; は標準のsshポートです。場合は &lt;code&gt;[bind_addr[:port]]&lt;/code&gt; 、指定され、他の労働者は、指定された時にこの作業者に接続する &lt;code&gt;bind_addr&lt;/code&gt; と &lt;code&gt;port&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ae97bd7ed7d82dd19e12486744447e7aab4faa00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;machines&lt;/code&gt; is a vector of machine specifications. Workers are started for each specification.</source>
          <target state="translated">&lt;code&gt;machines&lt;/code&gt; は、マシン仕様のベクトルです。仕様ごとにワーカーが開始されます。</target>
        </trans-unit>
        <trans-unit id="6b0e0fb4129a24815ec030736714dbdf7a492aae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;macro&lt;/code&gt; defines a method for inserting generated code into a program. A macro maps a sequence of argument expressions to a returned expression, and the resulting expression is substituted directly into the program at the point where the macro is invoked. Macros are a way to run generated code without calling &lt;a href=&quot;https://docs.julialang.org/en/v1.2.0/devdocs/init/#Base.eval-1&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;, since the generated code instead simply becomes part of the surrounding program. Macro arguments may include expressions, literal values, and symbols.</source>
          <target state="translated">&lt;code&gt;macro&lt;/code&gt; は、生成されたコードをプログラムに挿入する方法を定義します。マクロは一連の引数式を返された式にマップし、結果の式はマクロが呼び出された時点でプログラムに直接置換されます。生成されたコードは代わりに単に周囲のプログラムの一部になるため、マクロは&lt;a href=&quot;https://docs.julialang.org/en/v1.2.0/devdocs/init/#Base.eval-1&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt;を呼び出さずに生成されたコードを実行する方法です。マクロ引数には、式、リテラル値、および記号を含めることができます。</target>
        </trans-unit>
        <trans-unit id="b776a97940ed8af56b4981f4f88255433cb44ef9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;macro&lt;/code&gt; defines a method for inserting generated code into a program. A macro maps a sequence of argument expressions to a returned expression, and the resulting expression is substituted directly into the program at the point where the macro is invoked. Macros are a way to run generated code without calling &lt;a href=&quot;https://docs.julialang.org/en/v1.5.3/devdocs/init/#Base.eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt;, since the generated code instead simply becomes part of the surrounding program. Macro arguments may include expressions, literal values, and symbols. Macros can be defined for variable number of arguments (varargs), but do not accept keyword arguments.</source>
          <target state="translated">&lt;code&gt;macro&lt;/code&gt; は、生成されたコードをプログラムに挿入するためのメソッドを定義します。マクロは、引数式のシーケンスを返された式にマップし、結果の式は、マクロが呼び出された時点でプログラムに直接代入されます。生成されたコードは単に周囲のプログラムの一部になるため、マクロは&lt;a href=&quot;https://docs.julialang.org/en/v1.5.3/devdocs/init/#Base.eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt;を呼び出さずに生成されたコードを実行する方法です。マクロ引数には、式、リテラル値、および記号を含めることができます。マクロは可変数の引数（varargs）に対して定義できますが、キーワード引数は受け入れません。</target>
        </trans-unit>
        <trans-unit id="8484bf3ce18b73a3cab86759b8f006be25dfcef0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;macro&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;macro&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="84b9fe4b3edfa78bd622af9c76d19c51a2ae7a5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;manage(manager::FooManager, id::Integer, config::WorkerConfig, op::Symbol)&lt;/code&gt; is called at different times during the worker's lifetime with appropriate &lt;code&gt;op&lt;/code&gt; values:</source>
          <target state="translated">&lt;code&gt;manage(manager::FooManager, id::Integer, config::WorkerConfig, op::Symbol)&lt;/code&gt; は、適切な &lt;code&gt;op&lt;/code&gt; 値を使用して、ワーカーのライフタイム中のさまざまな時点で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5a3811884df527d3a7abba9f083f81c97faa84f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;manager::ClusterManager&lt;/code&gt;: the cluster manager that &lt;a href=&quot;../../stdlib/distributed/index#Distributed.addprocs&quot;&gt;&lt;code&gt;addprocs&lt;/code&gt;&lt;/a&gt; is called with</source>
          <target state="translated">&lt;code&gt;manager::ClusterManager&lt;/code&gt; ：&lt;a href=&quot;../../stdlib/distributed/index#Distributed.addprocs&quot;&gt; &lt;code&gt;addprocs&lt;/code&gt; &lt;/a&gt;が呼び出されるクラスターマネージャー</target>
        </trans-unit>
        <trans-unit id="8fdaf74a3de08a38b1e7873c2d0c9cc29c15317c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;map!(f, values(dict::AbstractDict))&lt;/code&gt; requires Julia 1.2 or later.</source>
          <target state="translated">&lt;code&gt;map!(f, values(dict::AbstractDict))&lt;/code&gt; は、Julia1.2以降が必要です。</target>
        </trans-unit>
        <trans-unit id="f703846e4a33db719039e6bcacfcf60d0b7d137b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mapreduce&lt;/code&gt; with multiple iterators requires Julia 1.2 or later.</source>
          <target state="translated">&lt;code&gt;mapreduce&lt;/code&gt; 複数のイテレータを使用するmapreduceでは、Julia 1.2以降が必要です。</target>
        </trans-unit>
        <trans-unit id="404b7144aa3a425a14deb38ee5cef8b003767781" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_candidates_tags&lt;/code&gt;: consider this many most recent tags in &lt;code&gt;refs/tags&lt;/code&gt; to describe a commit. Defaults to 10 (so that the 10 most recent tags would be examined to see if they describe a commit).</source>
          <target state="translated">&lt;code&gt;max_candidates_tags&lt;/code&gt; ：コミットを説明するために、 &lt;code&gt;refs/tags&lt;/code&gt; にあるこの最近の多くのタグを検討してください。デフォルトは10です（そのため、最新の10個のタグを調べて、コミットを表すかどうかを確認します）。</target>
        </trans-unit>
        <trans-unit id="72981d27e1ab22dbc583a1145b1621a961f192c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_line&lt;/code&gt;: the last line of the file to which to blame. The default is &lt;code&gt;0&lt;/code&gt;, meaning the last line of the file.</source>
          <target state="translated">&lt;code&gt;max_line&lt;/code&gt; ：責任があるファイルの最後の行。デフォルトは &lt;code&gt;0&lt;/code&gt; で、ファイルの最後の行を意味します。</target>
        </trans-unit>
        <trans-unit id="15cedd55ecf1ad91d90724912d371f1e5caa41be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_parallel&lt;/code&gt; &amp;ndash; the maximum number of workers to connect to in parallel on the host</source>
          <target state="translated">&lt;code&gt;max_parallel&lt;/code&gt; &amp;ndash;ホスト上で並列に接続するワーカーの最大数</target>
        </trans-unit>
        <trans-unit id="d995f39223c4bb9a999a43cfcca6c5681ab1ad1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_parallel&lt;/code&gt;: specifies the maximum number of workers connected to in parallel at a host. Defaults to 10.</source>
          <target state="translated">&lt;code&gt;max_parallel&lt;/code&gt; ：ホストで並列に接続されるワーカーの最大数を指定します。デフォルトは10です。</target>
        </trans-unit>
        <trans-unit id="1b1d9f37af536ccd58c278c3e506d8652b8ac208" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;max_size&lt;/code&gt;: the maximum file size of a blob. Above this size, it will be treated as a binary blob. The default is 512 MB.</source>
          <target state="translated">&lt;code&gt;max_size&lt;/code&gt; ：blobの最大ファイルサイズ。このサイズを超えると、バイナリBLOBとして扱われます。デフォルトは512 MBです。</target>
        </trans-unit>
        <trans-unit id="eaffe3704906f8467b046897a2780542aedcf5e1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxdepth&lt;/code&gt; &amp;ndash; Limits frames at a depth higher than &lt;code&gt;maxdepth&lt;/code&gt; in the &lt;code&gt;:tree&lt;/code&gt; format.</source>
          <target state="translated">&lt;code&gt;maxdepth&lt;/code&gt; &amp;ndash; &lt;code&gt;:tree&lt;/code&gt; 形式で、 &lt;code&gt;maxdepth&lt;/code&gt; より高い深度でフレームを制限します。</target>
        </trans-unit>
        <trans-unit id="32491e760e7f18f6d8360a85f2a4709cc201ee79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxdepth&lt;/code&gt; &amp;ndash; Limits the depth higher than &lt;code&gt;maxdepth&lt;/code&gt; in the &lt;code&gt;:tree&lt;/code&gt; format.</source>
          <target state="translated">&lt;code&gt;maxdepth&lt;/code&gt; -より高い深さ制限 &lt;code&gt;maxdepth&lt;/code&gt; で &lt;code&gt;:tree&lt;/code&gt; フォーマットを。</target>
        </trans-unit>
        <trans-unit id="5f20d7bbc515704268a8c41e4ee1011847047e24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxlog=integer&lt;/code&gt; should be used as a hint to the backend that the message should be displayed no more than &lt;code&gt;maxlog&lt;/code&gt; times.</source>
          <target state="translated">&lt;code&gt;maxlog=integer&lt;/code&gt; は、メッセージが &lt;code&gt;maxlog&lt;/code&gt; 回以下で表示されるべきであるというバックエンドへのヒントとして使用されるべきです。</target>
        </trans-unit>
        <trans-unit id="234c5dd9163cc56272b3f54c2a5466c8b1f6eaee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;maxsize&lt;/code&gt;: specifies a size beyond which the buffer may not be grown.</source>
          <target state="translated">&lt;code&gt;maxsize&lt;/code&gt; ：バッファーを大きくできないサイズを指定します。</target>
        </trans-unit>
        <trans-unit id="98f6f1cd7ea6f9bdc2332e5a901da5db582cd3aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mean&lt;/code&gt; for empty arrays requires at least Julia 1.1.</source>
          <target state="translated">&lt;code&gt;mean&lt;/code&gt; 空の配列のためには、少なくともジュリア1.1が必要です。</target>
        </trans-unit>
        <trans-unit id="2f22ee8634e701a2f38532448ed1c500b069efd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;merge_opts::MergeOptions = MergeOptions()&lt;/code&gt;: options for how to perform the merge, including whether fastforwarding is allowed. See &lt;a href=&quot;#LibGit2.MergeOptions&quot;&gt;&lt;code&gt;MergeOptions&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;merge_opts::MergeOptions = MergeOptions()&lt;/code&gt; ：早送りが許可されているかどうかなど、マージを実行する方法のオプション。詳細については、&lt;a href=&quot;#LibGit2.MergeOptions&quot;&gt; &lt;code&gt;MergeOptions&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="71cc2e70735d9fd74fff0caeb5b8d510b36cbd2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;merge_opts::MergeOptions=MergeOptions()&lt;/code&gt;: &lt;code&gt;merge_opts&lt;/code&gt; specifies options for the merge, such as merge strategy in case of conflicts.</source>
          <target state="translated">&lt;code&gt;merge_opts::MergeOptions=MergeOptions()&lt;/code&gt; ： &lt;code&gt;merge_opts&lt;/code&gt; は、競合が発生した場合のマージ戦略など、マージのオプションを指定します。</target>
        </trans-unit>
        <trans-unit id="125e60bc501dba72f09f0b4976efe2ce6d4483cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;merge_opts&lt;/code&gt;: merge options controlling how the trees will be merged at each rebase step. Only present on libgit2 versions newer than or equal to 0.24.0.</source>
          <target state="translated">&lt;code&gt;merge_opts&lt;/code&gt; ：各リベースステップでツリーをマージする方法を制御するマージオプション。0.24.0以降のlibgit2バージョンにのみ存在します。</target>
        </trans-unit>
        <trans-unit id="a5c88c45c2e1535dc547029bf00d88024b7ab716" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mergewith!&lt;/code&gt; requires Julia 1.5 or later.</source>
          <target state="translated">&lt;code&gt;mergewith!&lt;/code&gt; Julia1.5以降が必要です。</target>
        </trans-unit>
        <trans-unit id="19d6df524e25091e18c8beea5b75a95d3f719841" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mergewith&lt;/code&gt; requires Julia 1.5 or later.</source>
          <target state="translated">&lt;code&gt;mergewith&lt;/code&gt; には、Julia1.5以降が必要です。</target>
        </trans-unit>
        <trans-unit id="9b67314512e49ee15c92e5c7e9f6dbd1931dab06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;message&lt;/code&gt; should be an expression which evaluates to a string which is a human readable description of the log event. By convention, this string will be formatted as markdown when presented.</source>
          <target state="translated">&lt;code&gt;message&lt;/code&gt; は、人間が読めるログイベントの説明である文字列に評価される式である必要があります。慣例により、この文字列は、提示されるとマークダウンとしてフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="b90e0c119e4dfcc2e9dd089d139594390c4da90a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;meta_formatter&lt;/code&gt; is a function which takes the log event metadata &lt;code&gt;(level, _module, group, id, file, line)&lt;/code&gt; and returns a color (as would be passed to printstyled), prefix and suffix for the log message. The default is to prefix with the log level and a suffix containing the module, file and line location.</source>
          <target state="translated">&lt;code&gt;meta_formatter&lt;/code&gt; は、ログイベントメタデータ &lt;code&gt;(level, _module, group, id, file, line)&lt;/code&gt; を取得し、色（printstyledに渡される）、ログメッセージのプレフィックスとサフィックスを返す関数です。デフォルトでは、ログレベルとモジュール、ファイル、行の場所を含むサフィックスがプレフィックスとして付けられます。</target>
        </trans-unit>
        <trans-unit id="793b666b763adfb5cbc980bd4657fe28ca8ebfa5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;metric&lt;/code&gt;: optional custom function to use to determine the similarity between two files for rename detection.</source>
          <target state="translated">&lt;code&gt;metric&lt;/code&gt; ：名前の変更を検出するために2つのファイル間の類似性を判断するために使用するオプションのカスタム関数。</target>
        </trans-unit>
        <trans-unit id="ee731c731c0b59328238d9d827bb96b9a9284c51" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;min_line&lt;/code&gt;: the first line of the file from which to starting blaming. The default is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;min_line&lt;/code&gt; ：非難を開始するファイルの最初の行。デフォルトは &lt;code&gt;1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4b3253f765bb04e11f5c63333adab3ac5b42e254" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;min_match_characters&lt;/code&gt;: the minimum number of &lt;em&gt;alphanumeric&lt;/em&gt; characters which much change in a commit in order for the change to be associated with that commit. The default is 20. Only takes effect if one of the &lt;code&gt;Consts.BLAME_*_COPIES&lt;/code&gt; flags are used, which libgit2 does not implement yet.</source>
          <target state="translated">&lt;code&gt;min_match_characters&lt;/code&gt; ：コミットに変更を関連付けるために、コミットで大幅に変更される&lt;em&gt;英数字&lt;/em&gt;の最小数。デフォルトは20です &lt;code&gt;Consts.BLAME_*_COPIES&lt;/code&gt; フラグの1つが使用されている場合にのみ有効です。これはlibgit2がまだ実装していません。</target>
        </trans-unit>
        <trans-unit id="5db057df9be404f6e7c104b6feff23b69ad90b59" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mincount&lt;/code&gt; &amp;ndash; Limits frames with less than &lt;code&gt;mincount&lt;/code&gt; occurrences.</source>
          <target state="translated">&lt;code&gt;mincount&lt;/code&gt; -未満と制限フレームを &lt;code&gt;mincount&lt;/code&gt; 出現。</target>
        </trans-unit>
        <trans-unit id="1560ab3a1270d2ec7101ba0ebabaa0d8741ee114" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mincount&lt;/code&gt; &amp;ndash; Limits the printout to only those lines with at least &lt;code&gt;mincount&lt;/code&gt; occurrences.</source>
          <target state="translated">&lt;code&gt;mincount&lt;/code&gt; &amp;ndash;少なくとも &lt;code&gt;mincount&lt;/code&gt; 個のオカレンスを持つ行のみに出力を制限します。</target>
        </trans-unit>
        <trans-unit id="7fc9303555177cabe6ff1fd33c9914d821e64acb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;missing&lt;/code&gt; values &lt;em&gt;propagate&lt;/em&gt; automatically when passed to standard mathematical operators and functions. For these functions, uncertainty about the value of one of the operands induces uncertainty about the result. In practice, this means a math operation involving a &lt;code&gt;missing&lt;/code&gt; value generally returns &lt;code&gt;missing&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;missing&lt;/code&gt; 値は、標準の数学演算子および関数に渡されると自動的に&lt;em&gt;伝播し&lt;/em&gt;ます。これらの関数の場合、オペランドの1つの値に関する不確実性は、結果に関する不確実性を引き起こします。実際には、これが関与する数学演算を意味 &lt;code&gt;missing&lt;/code&gt; 値は、一般的に返し &lt;code&gt;missing&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="62fbe82d06f465bb8d2948bd22cf8237ee9a59c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mod&lt;/code&gt; with offset 1; returns &lt;code&gt;r&amp;isin;(0,y]&lt;/code&gt; for &lt;code&gt;y&amp;gt;0&lt;/code&gt; or &lt;code&gt;r&amp;isin;[y,0)&lt;/code&gt; for &lt;code&gt;y&amp;lt;0&lt;/code&gt;, where &lt;code&gt;mod(r, y) == mod(x, y)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;mod&lt;/code&gt; オフセット1のmod ; &lt;code&gt;y&amp;gt;0&lt;/code&gt; の場合は &lt;code&gt;r&amp;isin;(0,y]&lt;/code&gt; 、y &amp;lt;0の場合は &lt;code&gt;r&amp;isin;[y,0)&lt;/code&gt; を返します &lt;code&gt;y&amp;lt;0&lt;/code&gt; ここで、 &lt;code&gt;mod(r, y) == mod(x, y)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d4ee2c86fd7250e19c9601f24f28fca8d9bdc9e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mode&lt;/code&gt; must be one of &lt;code&gt;&quot;r&quot;&lt;/code&gt;, &lt;code&gt;&quot;r+&quot;&lt;/code&gt;, &lt;code&gt;&quot;w+&quot;&lt;/code&gt;, or &lt;code&gt;&quot;a+&quot;&lt;/code&gt;, and defaults to &lt;code&gt;&quot;r+&quot;&lt;/code&gt; if the file specified by &lt;code&gt;filename&lt;/code&gt; already exists, or &lt;code&gt;&quot;w+&quot;&lt;/code&gt; if not. If an &lt;code&gt;init&lt;/code&gt; function of the type &lt;code&gt;initfn(S::SharedArray)&lt;/code&gt; is specified, it is called on all the participating workers. You cannot specify an &lt;code&gt;init&lt;/code&gt; function if the file is not writable.</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; は &lt;code&gt;&quot;r&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;r+&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;w+&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;a+&quot;&lt;/code&gt; いずれかである必要があり、 &lt;code&gt;filename&lt;/code&gt; 指定されたファイルがすでに存在する場合はデフォルトで &lt;code&gt;&quot;r+&quot;&lt;/code&gt; 、存在しない場合は &lt;code&gt;&quot;w+&quot;&lt;/code&gt; ます。場合 &lt;code&gt;init&lt;/code&gt; タイプの機能 &lt;code&gt;initfn(S::SharedArray)&lt;/code&gt; 指定され、それがすべての参加労働者と呼ばれています。ファイルが書き込み可能でない場合は、 &lt;code&gt;init&lt;/code&gt; 関数を指定できません。</target>
        </trans-unit>
        <trans-unit id="9a097698641d5469c04e6f0f998cce8e958f0b35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mode&lt;/code&gt;: the &lt;a href=&quot;../../base/file/index#Base.stat&quot;&gt;&lt;code&gt;stat&lt;/code&gt;&lt;/a&gt; mode for the item.</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; ：アイテムの&lt;a href=&quot;../../base/file/index#Base.stat&quot;&gt; &lt;code&gt;stat&lt;/code&gt; &lt;/a&gt;モード。</target>
        </trans-unit>
        <trans-unit id="2698588e3b9b4ad6d810639c1a90db1327c88c66" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt; declares a &lt;a href=&quot;#Core.Module&quot;&gt;&lt;code&gt;Module&lt;/code&gt;&lt;/a&gt;, which is a separate global variable workspace. Within a module, you can control which names from other modules are visible (via importing), and specify which of your names are intended to be public (via exporting). Modules allow you to create top-level definitions without worrying about name conflicts when your code is used together with somebody else&amp;rsquo;s. See the &lt;a href=&quot;../../manual/modules/index#modules&quot;&gt;manual section about modules&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; は、個別のグローバル変数ワークスペースである&lt;a href=&quot;#Core.Module&quot;&gt; &lt;code&gt;Module&lt;/code&gt; を&lt;/a&gt;宣言します。モジュール内で、他のモジュールのどの名前を（インポートを介して）表示するかを制御し、どの名前を（エクスポートを介して）公開するかを指定できます。モジュールを使用すると、コードを他の人と一緒に使用するときに名前の競合を心配することなく、トップレベルの定義を作成できます。詳細については、&lt;a href=&quot;../../manual/modules/index#modules&quot;&gt;モジュール&lt;/a&gt;に関するマニュアルのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="5f5158bf646d4d27259805df6c3a41ba7e37637e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt; declares a &lt;a href=&quot;#Core.Module&quot;&gt;&lt;code&gt;Module&lt;/code&gt;&lt;/a&gt;, which is a separate global variable workspace. Within a module, you can control which names from other modules are visible (via importing), and specify which of your names are intended to be public (via exporting). Modules allow you to create top-level definitions without worrying about name conflicts when your code is used together with somebody else&amp;rsquo;s. See the &lt;a href=&quot;../../manual/modules/index#modules-1&quot;&gt;manual section about modules&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; は、個別のグローバル変数ワークスペースである&lt;a href=&quot;#Core.Module&quot;&gt; &lt;code&gt;Module&lt;/code&gt; を&lt;/a&gt;宣言します。モジュール内では、他のモジュールのどの名前を表示するか（インポートを介して）、どの名前を公開するか（エクスポートを介して）を指定できます。モジュールを使用すると、コードが他の人と一緒に使用されたときに名前の競合を心配することなく、トップレベルの定義を作成できます。詳細については、&lt;a href=&quot;../../manual/modules/index#modules-1&quot;&gt;モジュール&lt;/a&gt;に関するマニュアルのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="d6b46915fd1e85bc90eb5d56fd7bd927a43d2f01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;module&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="c95192ba3e3940cd0188a72ebb62589a75aa7d1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msg::AbstractString=&quot;&quot;&lt;/code&gt;: the message for the tag.</source>
          <target state="translated">&lt;code&gt;msg::AbstractString=&quot;&quot;&lt;/code&gt; ：タグのメッセージ。</target>
        </trans-unit>
        <trans-unit id="f4d691c48a28d2ce55d8a4698e4a2c1aee668e25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;msg&lt;/code&gt;: a message to insert into the reflogs.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; ：reflogに挿入するメッセージ。</target>
        </trans-unit>
        <trans-unit id="487395b1bdfc7e61d7447898d434b73b3a4f1f9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;multicast_loop&lt;/code&gt;: loopback for multicast packets (default: &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;multicast_loop&lt;/code&gt; ：マルチキャストパケットのループバック（デフォルト： &lt;code&gt;true&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e99e21c3690f3dcdfa4d6c0fe75cee3eea8fe44c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;multicast_ttl&lt;/code&gt;: TTL for multicast packets (default: &lt;code&gt;nothing&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;multicast_ttl&lt;/code&gt; ：マルチキャストパケットのTTL（デフォルト： &lt;code&gt;nothing&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="187344f44af903c3b6f0efb3f7498faa785d7c24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;multiplex&lt;/code&gt; &amp;ndash; &lt;code&gt;true&lt;/code&gt; (use SSH multiplexing for tunneling) or &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;multiplex&lt;/code&gt; &amp;ndash; &lt;code&gt;true&lt;/code&gt; （トンネリングにSSH多重化を使用）または &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f44fe996e6d08709a8c10b3979d511d5e4323b6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;multiplex&lt;/code&gt;: if &lt;code&gt;true&lt;/code&gt; then SSH multiplexing is used for SSH tunneling. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;multiplex&lt;/code&gt; ： &lt;code&gt;true&lt;/code&gt; の場合、SSH多重化がSSHトンネリングに使用されます。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f56a3d584155f39e37a0ccc363839ae179552328" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mutable struct&lt;/code&gt; is similar to &lt;a href=&quot;#struct&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt;, but additionally allows the fields of the type to be set after construction. See the manual section on &lt;a href=&quot;../../manual/types/index#Composite-Types&quot;&gt;Composite Types&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;mutable struct&lt;/code&gt; は構造体に似ていますが、&lt;a href=&quot;#struct&quot;&gt; &lt;code&gt;struct&lt;/code&gt; &lt;/a&gt;後にタイプのフィールドを設定できるようになっています。詳細については、&lt;a href=&quot;../../manual/types/index#Composite-Types&quot;&gt;複合型&lt;/a&gt;に関するマニュアルのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="85f441746093557e9ec7fe5f7c0d91f2ae4fdd6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mutable struct&lt;/code&gt; is similar to &lt;a href=&quot;#struct&quot;&gt;&lt;code&gt;struct&lt;/code&gt;&lt;/a&gt;, but additionally allows the fields of the type to be set after construction. See the manual section on &lt;a href=&quot;../../manual/types/index#Composite-Types-1&quot;&gt;Composite Types&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;mutable struct&lt;/code&gt; 同様である&lt;a href=&quot;#struct&quot;&gt; &lt;code&gt;struct&lt;/code&gt; &lt;/a&gt;が、付加タイプのフィールドは、構成後に設定されることを可能にします。詳細については、&lt;a href=&quot;../../manual/types/index#Composite-Types-1&quot;&gt;複合型の&lt;/a&gt;手動セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="112c939f3f1e9b5e8b278904ec6b0b49257b0632" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;mutable struct&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;mutable struct&lt;/code&gt; キーワード</target>
        </trans-unit>
        <trans-unit id="320c0e13d8c7b9ff51bc77d61fd9070c11bc1ebc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;n&lt;/code&gt; is the total number of instruction pointers you can store, with a default value of &lt;code&gt;10^6&lt;/code&gt;. If your typical backtrace is 20 instruction pointers, then you can collect 50000 backtraces, which suggests a statistical uncertainty of less than 1%. This may be good enough for most applications.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; は、格納できる命令ポインターの総数で、デフォルト値は &lt;code&gt;10^6&lt;/code&gt; です。典型的なバックトレースが20の命令ポインターである場合、50000バックトレースを収集できます。これは、統計的不確実性が1％未満であることを示唆しています。これは、ほとんどのアプリケーションで十分です。</target>
        </trans-unit>
        <trans-unit id="e658555bc40ad43ec211978ec0729a0b02c58be6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt;: The full name of the committer or author of the commit.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; ：コミッターまたはコミットの作成者のフルネーム。</target>
        </trans-unit>
        <trans-unit id="552e03fffa49ac0ec7ab0ea1aaa5c130fedf4f05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;name&lt;/code&gt;: The name in the local reference database of the fetch head, for example, &lt;code&gt;&quot;refs/heads/master&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; ：フェッチヘッドのローカル参照データベース内の名前（例： &lt;code&gt;&quot;refs/heads/master&quot;&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="c5d29f5a5c3f202febb2a81757e5b837859f3823" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ncodeunits(str)&lt;/code&gt; number of &lt;a href=&quot;https://en.wikipedia.org/wiki/Character_encoding#Terminology&quot;&gt;code units&lt;/a&gt; in a string.</source>
          <target state="translated">&lt;code&gt;ncodeunits(str)&lt;/code&gt; 文字列内の&lt;a href=&quot;https://en.wikipedia.org/wiki/Character_encoding#Terminology&quot;&gt;コード単位の&lt;/a&gt;数。</target>
        </trans-unit>
        <trans-unit id="f909eb780ec20a645e7ec717e2b09ab499055360" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="735cb1802f16a2c6f76996e3fbd8153f32d4f6fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new_file&lt;/code&gt;: A &lt;a href=&quot;#LibGit2.DiffFile&quot;&gt;&lt;code&gt;DiffFile&lt;/code&gt;&lt;/a&gt; containing information about the file(s) after the changes.</source>
          <target state="translated">&lt;code&gt;new_file&lt;/code&gt; ：変更後のファイルに関する情報を含む&lt;a href=&quot;#LibGit2.DiffFile&quot;&gt; &lt;code&gt;DiffFile&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7be2c96b12a02f7083c9d25ea7528ad8667d09e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;new_prefix&lt;/code&gt;: the virtual file directory in which to place new files on one side of the diff. Default is &lt;code&gt;&quot;b&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;new_prefix&lt;/code&gt; ：新しいファイルを差分の片側に配置する仮想ファイルディレクトリ。デフォルトは &lt;code&gt;&quot;b&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e8c2e95eb3130b139d44d439028bbbfabf438e05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newest_commit&lt;/code&gt;: the &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; of the newest commit from which to look at changes.</source>
          <target state="translated">&lt;code&gt;newest_commit&lt;/code&gt; ：変更を確認するための最新のコミットの&lt;a href=&quot;#LibGit2.GitHash&quot;&gt; &lt;code&gt;GitHash&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8f40f498efe7ceacbe5a57c6f819e21dd76050f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;newline2lf=true&lt;/code&gt;, &lt;code&gt;newline2ls=true&lt;/code&gt;, or &lt;code&gt;newline2ps=true&lt;/code&gt;: convert various newline sequences (LF, CRLF, CR, NEL) into a linefeed (LF), line-separation (LS), or paragraph-separation (PS) character, respectively</source>
          <target state="translated">&lt;code&gt;newline2lf=true&lt;/code&gt; 、 &lt;code&gt;newline2ls=true&lt;/code&gt; 、または &lt;code&gt;newline2ps=true&lt;/code&gt; ：さまざまな改行シーケンス（LF、CRLF、CR、NEL）をそれぞれ改行（LF）、行区切り（LS）、または段落区切り（PS）文字に変換します</target>
        </trans-unit>
        <trans-unit id="4ec45f42c32c00b527d28e030133b724dbf610e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;nfiles&lt;/code&gt;: The number of files in the delta (for instance, if the delta was run on a submodule commit id, it may contain more than one file).</source>
          <target state="translated">&lt;code&gt;nfiles&lt;/code&gt; ：デルタ内のファイル数（たとえば、デルタがサブモジュールのコミットIDで実行された場合、複数のファイルが含まれる場合があります）。</target>
        </trans-unit>
        <trans-unit id="13583c0cdd9e082972c1e68b453244539921d780" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noisefloor&lt;/code&gt; &amp;ndash; Limits frames that are below the heuristic noise floor of the sample (only applies to format &lt;code&gt;:tree&lt;/code&gt;). A suggested value to try for this is 2.0 (the default is 0). This parameter hides samples for which &lt;code&gt;n &amp;lt;= noisefloor * &amp;radic;N&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the number of samples on this line, and &lt;code&gt;N&lt;/code&gt; is the number of samples for the callee.</source>
          <target state="translated">&lt;code&gt;noisefloor&lt;/code&gt; &amp;ndash;サンプルのヒューリスティックノイズフロアを下回るフレームを制限します（format &lt;code&gt;:tree&lt;/code&gt; にのみ適用）。これを試す推奨値は2.0です（デフォルトは0です）。このパラメーターは、 &lt;code&gt;n &amp;lt;= noisefloor * &amp;radic;N&lt;/code&gt; であるサンプルを非表示にします。ここで、 &lt;code&gt;n&lt;/code&gt; はこの行のサンプルの数、 &lt;code&gt;N&lt;/code&gt; は呼び出し先のサンプルの数です。</target>
        </trans-unit>
        <trans-unit id="f539796532455743d77bf293cbd17e25f2f2dad0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;noisefloor&lt;/code&gt; &amp;ndash; Limits frames that exceed the heuristic noise floor of the sample (only applies to format &lt;code&gt;:tree&lt;/code&gt;). A suggested value to try for this is 2.0 (the default is 0). This parameter hides samples for which &lt;code&gt;n &amp;lt;= noisefloor * &amp;radic;N&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the number of samples on this line, and &lt;code&gt;N&lt;/code&gt; is the number of samples for the callee.</source>
          <target state="translated">&lt;code&gt;noisefloor&lt;/code&gt; &amp;ndash;サンプルのヒューリスティックノイズフロアを超えるフレームを制限します（フォーマット &lt;code&gt;:tree&lt;/code&gt; にのみ適用されます）。これを試す推奨値は2.0です（デフォルトは0です）。このパラメーターは、 &lt;code&gt;n &amp;lt;= noisefloor * &amp;radic;N&lt;/code&gt; であるサンプルを非表示にします。ここで、 &lt;code&gt;n&lt;/code&gt; はこの行のサンプルの数、 &lt;code&gt;N&lt;/code&gt; は呼び出し先のサンプルの数です。</target>
        </trans-unit>
        <trans-unit id="7cccdf2a98a9aae590bd349512e62d461403b275" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notify_cb&lt;/code&gt;: An optional callback function to notify the user if a checkout conflict occurs. If this function returns a non-zero value, the checkout will be cancelled.</source>
          <target state="translated">&lt;code&gt;notify_cb&lt;/code&gt; ：チェックアウトの競合が発生した場合にユーザーに通知するオプションのコールバック関数。この関数がゼロ以外の値を返す場合、チェックアウトはキャンセルされます。</target>
        </trans-unit>
        <trans-unit id="30392c812d865b5c68f24732d969c588932dc51d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notify_cb&lt;/code&gt;: optional callback which will notify the user of changes to the diff as file deltas are added to it.</source>
          <target state="translated">&lt;code&gt;notify_cb&lt;/code&gt; ：オプションのコールバック。ファイルデルタが追加されたときに、diffへの変更をユーザーに通知します。</target>
        </trans-unit>
        <trans-unit id="5d44c57c1841b302e1e4a4864a4e16016feedd35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notify_flags&lt;/code&gt;: Flags for what sort of conflicts the user should be notified about.</source>
          <target state="translated">&lt;code&gt;notify_flags&lt;/code&gt; ：ユーザーに通知する必要がある競合の種類を示すフラグ。</target>
        </trans-unit>
        <trans-unit id="c444029454795fde1134c2d469857e669b1440c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;notify_payload&lt;/code&gt;: Payload for the notify callback function.</source>
          <target state="translated">&lt;code&gt;notify_payload&lt;/code&gt; ：通知コールバック関数のペイロード。</target>
        </trans-unit>
        <trans-unit id="f8a72ff21213c5747c87230deb5736ece00049c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ntasks&lt;/code&gt; can also be specified as a zero-arg function. In this case, the number of tasks to run in parallel is checked before processing every element and a new task started if the value of &lt;code&gt;ntasks_func&lt;/code&gt; is less than the current number of tasks.</source>
          <target state="translated">&lt;code&gt;ntasks&lt;/code&gt; は、引数なしの関数として指定することもできます。この場合、 &lt;code&gt;ntasks_func&lt;/code&gt; の値が現在のタスク数よりも小さい場合は、すべての要素を処理する前に、並行して実行するタスクの数がチェックされ、新しいタスクが開始されます。</target>
        </trans-unit>
        <trans-unit id="28a2d799c4775665ec0492395458a2421920f94b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ntasks&lt;/code&gt; specifies the number of tasks to run concurrently. Depending on the length of the collections, if &lt;code&gt;ntasks&lt;/code&gt; is unspecified, up to 100 tasks will be used for concurrent mapping.</source>
          <target state="translated">&lt;code&gt;ntasks&lt;/code&gt; は、同時に実行するタスクの数を指定します。コレクションの長さに応じて、 &lt;code&gt;ntasks&lt;/code&gt; が指定されていない場合、最大100個のタスクが同時マッピングに使用されます。</target>
        </trans-unit>
        <trans-unit id="649eb66db0ac1d45f589aa8e9473637c03ceaed8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;offset&lt;/code&gt; allows you to skip the specified number of bytes at the beginning of the file.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; 使用すると、ファイルの先頭で指定されたバイト数をスキップできます。</target>
        </trans-unit>
        <trans-unit id="f497a87199a32512c97994d5a18e9f772067d770" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;oid&lt;/code&gt;: The &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; of the tip of the fetch head.</source>
          <target state="translated">&lt;code&gt;oid&lt;/code&gt; ：フェッチヘッドの先端の&lt;a href=&quot;#LibGit2.GitHash&quot;&gt; &lt;code&gt;GitHash&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b1944d05e865a7be7c70b13dc44ad49d6eef824c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;old_file&lt;/code&gt;: A &lt;a href=&quot;#LibGit2.DiffFile&quot;&gt;&lt;code&gt;DiffFile&lt;/code&gt;&lt;/a&gt; containing information about the file(s) before the changes.</source>
          <target state="translated">&lt;code&gt;old_file&lt;/code&gt; ：変更前のファイルに関する情報を含む&lt;a href=&quot;#LibGit2.DiffFile&quot;&gt; &lt;code&gt;DiffFile&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0c4e9a36bc861c7981c727529931615c5c12cf7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;old_prefix&lt;/code&gt;: the virtual file directory in which to place old files on one side of the diff. Default is &lt;code&gt;&quot;a&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;old_prefix&lt;/code&gt; ：古いファイルをdiffの片側に配置する仮想ファイルディレクトリ。デフォルトは &lt;code&gt;&quot;a&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5c31e5cf28678d5c969358670eb5133dd3159a86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;oldest_commit&lt;/code&gt;: the &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; of the oldest commit from which to look at changes.</source>
          <target state="translated">&lt;code&gt;oldest_commit&lt;/code&gt; ：変更を確認する最も古いコミットの&lt;a href=&quot;#LibGit2.GitHash&quot;&gt; &lt;code&gt;GitHash&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1ab08f6dbafd16b32ce5160a5db1168198264195" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;only_follow_first_parent&lt;/code&gt;: when finding the distance from a matching reference to the described object, only consider the distance from the first parent.</source>
          <target state="translated">&lt;code&gt;only_follow_first_parent&lt;/code&gt; ：記述されたオブジェクトへの一致する参照からの距離を見つける場合、最初の親からの距離のみを考慮します。</target>
        </trans-unit>
        <trans-unit id="cf7b1529623e34aaf3b56dcbaf1430c042e15e1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optimize&lt;/code&gt; controls whether additional optimizations, such as inlining, are also applied. &lt;code&gt;raw&lt;/code&gt; makes all metadata and dbg.* calls visible. &lt;code&gt;debuginfo&lt;/code&gt; may be one of &lt;code&gt;:source&lt;/code&gt; (default) or &lt;code&gt;:none&lt;/code&gt;, to specify the verbosity of code comments. &lt;code&gt;dump_module&lt;/code&gt; prints the entire module that encapsulates the function.</source>
          <target state="translated">&lt;code&gt;optimize&lt;/code&gt; は、インライン化などの追加の最適化も適用するかどうかを制御します。 &lt;code&gt;raw&lt;/code&gt; は、すべてのメタデータとdbg。*呼び出しを可視にします。 &lt;code&gt;debuginfo&lt;/code&gt; は &lt;code&gt;:source&lt;/code&gt; （デフォルト）または &lt;code&gt;:none&lt;/code&gt; のいずれかで、コードコメントの詳細度を指定します。 &lt;code&gt;dump_module&lt;/code&gt; は、関数をカプセル化するモジュール全体を出力します。</target>
        </trans-unit>
        <trans-unit id="5c0c73b16f432720504516e2f958debb7c0a4f9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt;: determines the options for the fetch, e.g. whether to prune afterwards. See &lt;a href=&quot;#LibGit2.FetchOptions&quot;&gt;&lt;code&gt;FetchOptions&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; ：フェッチのオプションを決定します（後でプルーニングするかどうかなど）。詳細については、&lt;a href=&quot;#LibGit2.FetchOptions&quot;&gt; &lt;code&gt;FetchOptions&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6a9ddb6ecff4eeaf4d380bca97b4dd6f7fde407e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;options&lt;/code&gt;: determines the options for the push, e.g. which proxy headers to use. See &lt;a href=&quot;#LibGit2.PushOptions&quot;&gt;&lt;code&gt;PushOptions&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; ：使用するプロキシヘッダーなど、プッシュのオプションを決定します。詳細については、&lt;a href=&quot;#LibGit2.PushOptions&quot;&gt; &lt;code&gt;PushOptions&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d7f25b0d9ee03294770f82dddd1bc7bcef0fb64c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;optype&lt;/code&gt;: the type of rebase operation currently being performed. The options are:</source>
          <target state="translated">&lt;code&gt;optype&lt;/code&gt; ：現在実行されているリベース操作のタイプ。オプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d3e3a0e908208f76b5ccd84be51a34bb39927cfe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ospid&lt;/code&gt; &amp;ndash; the process ID according to the host OS, used to interrupt worker processes</source>
          <target state="translated">&lt;code&gt;ospid&lt;/code&gt; &amp;ndash;ワーカープロセスの中断に使用される、ホストOSに応じたプロセスID</target>
        </trans-unit>
        <trans-unit id="697de2c67496b1d84f2571e138792286e7da4946" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;our_label&lt;/code&gt;: In case of conflicts, the name of &quot;our&quot; side.</source>
          <target state="translated">&lt;code&gt;our_label&lt;/code&gt; ：競合する場合の「私たち」側の名前。</target>
        </trans-unit>
        <trans-unit id="6830be65e4ac77ca9e62be6dc5c7e0620fc0523a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;p&lt;/code&gt; can assume any numeric value (even though not all values produce a mathematically valid vector norm). In particular, &lt;code&gt;norm(A, Inf)&lt;/code&gt; returns the largest value in &lt;code&gt;abs.(A)&lt;/code&gt;, whereas &lt;code&gt;norm(A, -Inf)&lt;/code&gt; returns the smallest. If &lt;code&gt;A&lt;/code&gt; is a matrix and &lt;code&gt;p=2&lt;/code&gt;, then this is equivalent to the Frobenius norm.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; は任意の数値を想定できます（すべての値が数学的に有効なベクトルノルムを生成するわけではありません）。特に、内 &lt;code&gt;norm(A, Inf)&lt;/code&gt; 内の最大値を返し &lt;code&gt;abs.(A)&lt;/code&gt; に対し、 &lt;code&gt;norm(A, -Inf)&lt;/code&gt; 最小返します。場合 &lt;code&gt;A&lt;/code&gt; は行列であり &lt;code&gt;p=2&lt;/code&gt; 、これはフロベニウスノルムに相当します。</target>
        </trans-unit>
        <trans-unit id="c1263f31af18883ad798ffeb9ebfc0a698a746ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parallelism&lt;/code&gt;: if a pack file must be created, this variable sets the number of worker threads which will be spawned by the packbuilder. If &lt;code&gt;0&lt;/code&gt;, the packbuilder will auto-set the number of threads to use. The default is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;parallelism&lt;/code&gt; ：パックファイルを作成する必要がある場合、この変数はpackbuilderによって生成されるワーカースレッドの数を設定します。場合は &lt;code&gt;0&lt;/code&gt; 、packbuilderは、使用するスレッドの数を、自動設定されます。デフォルトは &lt;code&gt;1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="062dd574e97337bbf0642f566cbd632bf4e6858a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;params::Dict&lt;/code&gt;: all the keyword arguments passed to &lt;a href=&quot;../../stdlib/distributed/index#Distributed.addprocs&quot;&gt;&lt;code&gt;addprocs&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;code&gt;params::Dict&lt;/code&gt; ：&lt;a href=&quot;../../stdlib/distributed/index#Distributed.addprocs&quot;&gt; &lt;code&gt;addprocs&lt;/code&gt; に&lt;/a&gt;渡されるすべてのキーワード引数</target>
        </trans-unit>
        <trans-unit id="2c7beec041180be0f67a5413cf19dc80f87f5c60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parent_ids::Vector{GitHash}=GitHash[]&lt;/code&gt; is a list of commits by &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; to use as parent commits for the new one, and may be empty. A commit might have multiple parents if it is a merge commit, for example.</source>
          <target state="translated">&lt;code&gt;parent_ids::Vector{GitHash}=GitHash[]&lt;/code&gt; は、新しいコミットの親コミットとして使用する&lt;a href=&quot;#LibGit2.GitHash&quot;&gt; &lt;code&gt;GitHash&lt;/code&gt; &lt;/a&gt;によるコミットのリストであり、空の場合があります。たとえば、マージコミットの場合、コミットは複数の親を持つ場合があります。</target>
        </trans-unit>
        <trans-unit id="2aeba9857371fd4afaedeaa23fe9e52591dc0285" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;parse(Bool, str)&lt;/code&gt; requires at least Julia 1.1.</source>
          <target state="translated">&lt;code&gt;parse(Bool, str)&lt;/code&gt; は少なくともJulia 1.1が必要です。</target>
        </trans-unit>
        <trans-unit id="985febc2923b1ba06875dac2b326b7c44efb7b4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;password::AbstractString=&quot;&quot;&lt;/code&gt;: the password to use in the output if provided.</source>
          <target state="translated">&lt;code&gt;password::AbstractString=&quot;&quot;&lt;/code&gt; ：提供されている場合に出力で使用するパスワード。</target>
        </trans-unit>
        <trans-unit id="7b2d565e6b56d3e37cd4a4c107b73f4f88a4add0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path::AbstractString=&quot;&quot;&lt;/code&gt;: the path to use in the output if provided.</source>
          <target state="translated">&lt;code&gt;path::AbstractString=&quot;&quot;&lt;/code&gt; ：提供されている場合に出力で使用するパス。</target>
        </trans-unit>
        <trans-unit id="6bbb797e9183ff39fe99d21ff1e7ff0b15d193b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt; - the path to the source file to open</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; -開くソースファイルへのパス</target>
        </trans-unit>
        <trans-unit id="83a1cfd3ac44390db0e2939f5bb09d810d9dc716" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;path&lt;/code&gt;: a &lt;code&gt;NULL&lt;/code&gt; terminated path to the item relative to the working directory of the repository.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; ：リポジトリの作業ディレクトリを基準とした、アイテムへの &lt;code&gt;NULL&lt;/code&gt; で終了するパス。</target>
        </trans-unit>
        <trans-unit id="df78851e58e7c0164b5edaedb4aae38730252715" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;paths&lt;/code&gt;: If not empty, describes which paths to search during the checkout. If empty, the checkout will occur over all files in the repository.</source>
          <target state="translated">&lt;code&gt;paths&lt;/code&gt; ：空でない場合、チェックアウト中に検索するパスを記述します。空の場合、チェックアウトはリポジトリ内のすべてのファイルに対して行われます。</target>
        </trans-unit>
        <trans-unit id="aaac9c176103fbec24dd83078cf0783db26c54ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pathspec&lt;/code&gt;: an array of paths to use for path-matching. The behavior of the path-matching will vary depending on the values of &lt;code&gt;show&lt;/code&gt; and &lt;code&gt;flags&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pathspec&lt;/code&gt; ：パスマッチングに使用するパスの配列。パスマッチングの動作は、 &lt;code&gt;show&lt;/code&gt; および &lt;code&gt;flags&lt;/code&gt; の値によって異なります。</target>
        </trans-unit>
        <trans-unit id="ff5de9b2330e81c1ec09cc2a025ec36b4958e8f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pathspec&lt;/code&gt;: path to files to include in the diff. Default is to use all files in the repository.</source>
          <target state="translated">&lt;code&gt;pathspec&lt;/code&gt; ：差分に含めるファイルへのパス。デフォルトでは、リポジトリ内のすべてのファイルを使用します。</target>
        </trans-unit>
        <trans-unit id="5d5c79832426fbf09095f04929a254af7d30d839" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pattern&lt;/code&gt;: only consider tags which match &lt;code&gt;pattern&lt;/code&gt;. Supports glob expansion.</source>
          <target state="translated">&lt;code&gt;pattern&lt;/code&gt; ：のみ一致したタグを検討 &lt;code&gt;pattern&lt;/code&gt; 。グロブ拡張をサポートします。</target>
        </trans-unit>
        <trans-unit id="faa8387984da43a7639fa49609355dfec1758934" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;payload&lt;/code&gt;: the payload to be provided to the two callback functions.</source>
          <target state="translated">&lt;code&gt;payload&lt;/code&gt; ：2つのコールバック関数に提供されるペイロード。</target>
        </trans-unit>
        <trans-unit id="66e76aa49d7a614c921c6cec0e182e1bd4a6645c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;payload&lt;/code&gt;: the payload to pass to &lt;code&gt;notify_cb&lt;/code&gt; and &lt;code&gt;progress_cb&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;payload&lt;/code&gt; ： &lt;code&gt;notify_cb&lt;/code&gt; および &lt;code&gt;progress_cb&lt;/code&gt; に渡すペイロード。</target>
        </trans-unit>
        <trans-unit id="2913a1a2626baab62573ae3ba9c2e917e2edec43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;peakflops&lt;/code&gt; computes the peak flop rate of the computer by using double precision &lt;a href=&quot;#LinearAlgebra.BLAS.gemm!&quot;&gt;&lt;code&gt;gemm!&lt;/code&gt;&lt;/a&gt;. By default, if no arguments are specified, it multiplies a matrix of size &lt;code&gt;n x n&lt;/code&gt;, where &lt;code&gt;n = 2000&lt;/code&gt;. If the underlying BLAS is using multiple threads, higher flop rates are realized. The number of BLAS threads can be set with &lt;a href=&quot;#LinearAlgebra.BLAS.set_num_threads&quot;&gt;&lt;code&gt;BLAS.set_num_threads(n)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;peakflops&lt;/code&gt; は、倍精度&lt;a href=&quot;#LinearAlgebra.BLAS.gemm!&quot;&gt; &lt;code&gt;gemm!&lt;/code&gt; &lt;/a&gt;を使用してコンピューターのピークフロップレートを計算します。。引数を指定しない場合、デフォルトでは、それはサイズの行列乗算 &lt;code&gt;n x n&lt;/code&gt; 、 &lt;code&gt;n = 2000&lt;/code&gt; 。基盤となるBLASが複数のスレッドを使用している場合、より高いフロップレートが実現されます。BLASスレッドの数は&lt;a href=&quot;#LinearAlgebra.BLAS.set_num_threads&quot;&gt; &lt;code&gt;BLAS.set_num_threads(n)&lt;/code&gt; で&lt;/a&gt;設定できます。</target>
        </trans-unit>
        <trans-unit id="87b91990e60f0a690dd7da2850cc5ea9cee3bec3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perfdata_cb&lt;/code&gt;: An optional callback function to display performance data.</source>
          <target state="translated">&lt;code&gt;perfdata_cb&lt;/code&gt; ：パフォーマンスデータを表示するオプションのコールバック関数。</target>
        </trans-unit>
        <trans-unit id="e9d2d97fa30fe0159febc55e5a72c5956e0c05f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;perfdata_payload&lt;/code&gt;: Payload for the performance callback.</source>
          <target state="translated">&lt;code&gt;perfdata_payload&lt;/code&gt; ：パフォーマンスコールバックのペイロード。</target>
        </trans-unit>
        <trans-unit id="c5c86680e44cfade629b4ed2ebc1670d3a11ff31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;pmap&lt;/code&gt; can also use a mix of processes and tasks via the &lt;code&gt;batch_size&lt;/code&gt; argument. For batch sizes greater than 1, the collection is processed in multiple batches, each of length &lt;code&gt;batch_size&lt;/code&gt; or less. A batch is sent as a single request to a free worker, where a local &lt;a href=&quot;../../base/parallel/index#Base.asyncmap&quot;&gt;&lt;code&gt;asyncmap&lt;/code&gt;&lt;/a&gt; processes elements from the batch using multiple concurrent tasks.</source>
          <target state="translated">&lt;code&gt;pmap&lt;/code&gt; は、 &lt;code&gt;batch_size&lt;/code&gt; 引数を介してプロセスとタスクの組み合わせを使用することもできます。1より大きいバッチサイズの場合、コレクションは複数の長さの &lt;code&gt;batch_size&lt;/code&gt; 以下の複数のバッチで処理されます。バッチは単一のリクエストとしてフリーワーカーに&lt;a href=&quot;../../base/parallel/index#Base.asyncmap&quot;&gt; &lt;code&gt;asyncmap&lt;/code&gt; &lt;/a&gt;されます。ローカルの非同期マップでは、複数の同時タスクを使用してバッチの要素を処理します。</target>
        </trans-unit>
        <trans-unit id="a6062089bc8ea7356a1c0e294144b992c9b0d190" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;port::Union{AbstractString,Integer}=&quot;&quot;&lt;/code&gt;: the port number to use in the output if provided. Cannot be specified when using the scp-like syntax.</source>
          <target state="translated">&lt;code&gt;port::Union{AbstractString,Integer}=&quot;&quot;&lt;/code&gt; ：提供されている場合、出力で使用するポート番号。scpのような構文を使用する場合は指定できません。</target>
        </trans-unit>
        <trans-unit id="3926b6e41c21bebec38e3305ee3aef86c0f67cdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;port&lt;/code&gt; &amp;ndash; the port on the host used to connect to the worker (either an &lt;code&gt;Int&lt;/code&gt; or &lt;code&gt;Nothing&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;port&lt;/code&gt; &amp;ndash;ワーカーへの接続に使用されるホスト上のポート（ &lt;code&gt;Int&lt;/code&gt; または &lt;code&gt;Nothing&lt;/code&gt; のいずれか）</target>
        </trans-unit>
        <trans-unit id="d7ae02e4311ab0f64e68f548cb0826d87786e864" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;power_method&lt;/code&gt; repeatedly creates a new vector and normalizes it. We have not specified any type signature in function declaration, let's see if it works with the aforementioned datatypes:</source>
          <target state="translated">&lt;code&gt;power_method&lt;/code&gt; は、新しいベクトルを繰り返し作成して正規化します。関数宣言で型シグネチャを指定していません。前述のデータ型で機能するかどうか確認してみましょう。</target>
        </trans-unit>
        <trans-unit id="9113fbab087ead22351138a5675e71d4cc277d28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;precision&lt;/code&gt; as a keyword argument requires at least Julia 1.1. In Julia 1.0 &lt;code&gt;precision&lt;/code&gt; is the second positional argument (&lt;code&gt;BigFloat(x, precision)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;precision&lt;/code&gt; キーワード引数としての精度には、少なくともJulia 1.1が必要です。Julia 1.0では、 &lt;code&gt;precision&lt;/code&gt; は2番目の位置引数です（ &lt;code&gt;BigFloat(x, precision)&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="af54082b04f05e356fa41312f4ae5ca97f259a82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;primitive type&lt;/code&gt; declares a concrete type whose data consists only of a series of bits. Classic examples of primitive types are integers and floating-point values. Some example built-in primitive type declarations:</source>
          <target state="translated">&lt;code&gt;primitive type&lt;/code&gt; 、データが一連のビットのみで構成される具象型を宣言します。プリミティブ型の典型的な例は、整数と浮動小数点値です。組み込みプリミティブ型宣言の例：</target>
        </trans-unit>
        <trans-unit id="d408d986573283a26cbda182d85b826b49383c82" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;primitive type&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;primitive type&lt;/code&gt; キーワード</target>
        </trans-unit>
        <trans-unit id="ce0cc2b360368626a735bd2ae5d7c2a083fbb6e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;print&lt;/code&gt; and &lt;code&gt;println&lt;/code&gt; &quot;lock&quot; the stream during a call. Consequently changing &lt;code&gt;write&lt;/code&gt; to &lt;code&gt;println&lt;/code&gt; in the above example results in:</source>
          <target state="translated">&lt;code&gt;print&lt;/code&gt; と &lt;code&gt;println&lt;/code&gt; は、呼び出し中にストリームを「ロック」します。したがって、上記の例で &lt;code&gt;write&lt;/code&gt; を &lt;code&gt;println&lt;/code&gt; に変更すると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="1959b9f7871b156edd3a2de5e77463b33177e392" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;print&lt;/code&gt; falls back to calling &lt;code&gt;show&lt;/code&gt;, so most types should just define &lt;code&gt;show&lt;/code&gt;. Define &lt;code&gt;print&lt;/code&gt; if your type has a separate &quot;plain&quot; representation. For example, &lt;code&gt;show&lt;/code&gt; displays strings with quotes, and &lt;code&gt;print&lt;/code&gt; displays strings without quotes.</source>
          <target state="translated">&lt;code&gt;print&lt;/code&gt; は &lt;code&gt;show&lt;/code&gt; の呼び出しにフォールバックするため、ほとんどのタイプは &lt;code&gt;show&lt;/code&gt; を定義するだけです。タイプに個別の「プレーン」表現がある場合は、 &lt;code&gt;print&lt;/code&gt; 定義します。たとえば、 &lt;code&gt;show&lt;/code&gt; は引用符付きの文字列を表示し、 &lt;code&gt;print&lt;/code&gt; は引用符なしの文字列を表示します。</target>
        </trans-unit>
        <trans-unit id="d0178c5df89eb967f462cc2e8445f025988bec10" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;process&lt;/code&gt; &amp;ndash; the process which will be connected (usually the manager will assign this during &lt;a href=&quot;#Distributed.addprocs&quot;&gt;&lt;code&gt;addprocs&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">&lt;code&gt;process&lt;/code&gt; &amp;ndash;接続されるプロセス（通常、マネージャは&lt;a href=&quot;#Distributed.addprocs&quot;&gt; &lt;code&gt;addprocs&lt;/code&gt; &lt;/a&gt;中にこれを割り当てます）</target>
        </trans-unit>
        <trans-unit id="c63a4f1761d5adacd1e7460b66b481bd63cdd398" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;progress_cb&lt;/code&gt;: An optional callback function to display checkout progress.</source>
          <target state="translated">&lt;code&gt;progress_cb&lt;/code&gt; ：チェックアウトの進捗状況を表示するオプションのコールバック関数。</target>
        </trans-unit>
        <trans-unit id="7cb6a0f147459271d2a7a2a1bcb82b298199436d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;progress_cb&lt;/code&gt;: optional callback which will display diff progress. Only relevant on libgit2 versions at least as new as 0.24.0.</source>
          <target state="translated">&lt;code&gt;progress_cb&lt;/code&gt; ：差分の進行状況を表示するオプションのコールバック。少なくとも0.24.0以降のlibgit2バージョンにのみ関連します。</target>
        </trans-unit>
        <trans-unit id="a974da56e773f57fa11edfba525b0d17e70b3e1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;progress_payload&lt;/code&gt;: Payload for the progress callback.</source>
          <target state="translated">&lt;code&gt;progress_payload&lt;/code&gt; ：進捗コールバックのペイロード。</target>
        </trans-unit>
        <trans-unit id="9656c555e40a59798ca04ab2a0fd64ef8fcd145d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;propertynames(x)&lt;/code&gt; may return only &quot;public&quot; property names that are part of the documented interface of &lt;code&gt;x&lt;/code&gt;. If you want it to also return &quot;private&quot; fieldnames intended for internal use, pass &lt;code&gt;true&lt;/code&gt; for the optional second argument. REPL tab completion on &lt;code&gt;x.&lt;/code&gt; shows only the &lt;code&gt;private=false&lt;/code&gt; properties.</source>
          <target state="translated">&lt;code&gt;propertynames(x)&lt;/code&gt; は、 &lt;code&gt;x&lt;/code&gt; のドキュメント化されたインターフェイスの一部である「パブリック」プロパティ名のみを返す場合があります。内部使用を目的とした「プライベート」フィールド名も返すようにするには、オプションの2番目の引数に &lt;code&gt;true&lt;/code&gt; を渡します。 &lt;code&gt;x.&lt;/code&gt; REPLタブ補完。 &lt;code&gt;private=false&lt;/code&gt; プロパティのみを表示します。</target>
        </trans-unit>
        <trans-unit id="29d345329a2391a60fb2ebd4642c5f13f15f3a65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proxy_opts&lt;/code&gt;: only relevant if the LibGit2 version is greater than or equal to &lt;code&gt;0.25.0&lt;/code&gt;. Sets options for using a proxy to communicate with a remote. See &lt;a href=&quot;#LibGit2.ProxyOptions&quot;&gt;&lt;code&gt;ProxyOptions&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;proxy_opts&lt;/code&gt; ：LibGit2バージョンが0.25.0以上の場合にのみ関連し &lt;code&gt;0.25.0&lt;/code&gt; 。プロキシを使用してリモートと通信するためのオプションを設定します。詳細については、&lt;a href=&quot;#LibGit2.ProxyOptions&quot;&gt; &lt;code&gt;ProxyOptions&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="2a1c2878a9100523ed8ddcdc2ca50b8e3e3accca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proxy_opts&lt;/code&gt;: options for connecting to the remote through a proxy. See &lt;a href=&quot;#LibGit2.ProxyOptions&quot;&gt;&lt;code&gt;ProxyOptions&lt;/code&gt;&lt;/a&gt;. Only present on libgit2 versions newer than or equal to 0.25.0.</source>
          <target state="translated">&lt;code&gt;proxy_opts&lt;/code&gt; ：プロキシ経由でリモートに接続するためのオプション。&lt;a href=&quot;#LibGit2.ProxyOptions&quot;&gt; &lt;code&gt;ProxyOptions&lt;/code&gt; を&lt;/a&gt;参照してください。0.25.0以降のlibgit2バージョンにのみ存在します。</target>
        </trans-unit>
        <trans-unit id="2d1cca20f02fc7ef7b42d7136de423456f81b239" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;proxytype&lt;/code&gt;: an &lt;code&gt;enum&lt;/code&gt; for the type of proxy to use. Defined in &lt;a href=&quot;https://libgit2.org/libgit2/#HEAD/type/git_proxy_t&quot;&gt;&lt;code&gt;git_proxy_t&lt;/code&gt;&lt;/a&gt;. The corresponding Julia enum is &lt;code&gt;GIT_PROXY&lt;/code&gt; and has values:</source>
          <target state="translated">&lt;code&gt;proxytype&lt;/code&gt; ：使用するプロキシのタイプの &lt;code&gt;enum&lt;/code&gt; 。&lt;a href=&quot;https://libgit2.org/libgit2/#HEAD/type/git_proxy_t&quot;&gt; &lt;code&gt;git_proxy_t&lt;/code&gt; で&lt;/a&gt;定義されています。対応するJulia列挙型は &lt;code&gt;GIT_PROXY&lt;/code&gt; であり、値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7c30e484bc5a233582234aa0eaf5f9ff4b81c5cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;prune&lt;/code&gt;: whether to perform a prune after the fetch or not. The default is to use the setting from the &lt;code&gt;GitConfig&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;prune&lt;/code&gt; ：フェッチ後にプルーニングを実行するかどうか。デフォルトでは、 &lt;code&gt;GitConfig&lt;/code&gt; の設定を使用します。</target>
        </trans-unit>
        <trans-unit id="80d39971bfff573dc1ff9e1372624b262b5a7768" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;put!&lt;/code&gt; - put back a worker to the available pool</source>
          <target state="translated">&lt;code&gt;put!&lt;/code&gt; -ワーカーを利用可能なプールに戻す</target>
        </trans-unit>
        <trans-unit id="a29ba5aea9b5cc34e1af996fefeb1a63d0872750" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;qr!&lt;/code&gt; is the same as &lt;a href=&quot;#LinearAlgebra.qr&quot;&gt;&lt;code&gt;qr&lt;/code&gt;&lt;/a&gt; when &lt;code&gt;A&lt;/code&gt; is a subtype of &lt;a href=&quot;../../base/arrays/index#Base.StridedMatrix&quot;&gt;&lt;code&gt;StridedMatrix&lt;/code&gt;&lt;/a&gt;, but saves space by overwriting the input &lt;code&gt;A&lt;/code&gt;, instead of creating a copy. An &lt;a href=&quot;../../base/base/index#Core.InexactError&quot;&gt;&lt;code&gt;InexactError&lt;/code&gt;&lt;/a&gt; exception is thrown if the factorization produces a number not representable by the element type of &lt;code&gt;A&lt;/code&gt;, e.g. for integer types.</source>
          <target state="translated">&lt;code&gt;qr!&lt;/code&gt; &lt;code&gt;A&lt;/code&gt; が&lt;a href=&quot;../../base/arrays/index#Base.StridedMatrix&quot;&gt; &lt;code&gt;StridedMatrix&lt;/code&gt; の&lt;/a&gt;サブタイプである場合の&lt;a href=&quot;#LinearAlgebra.qr&quot;&gt; &lt;code&gt;qr&lt;/code&gt; &lt;/a&gt;と同じですが、コピーを作成する代わりに、入力 &lt;code&gt;A&lt;/code&gt; を上書きすることでスペースを節約します。アン&lt;a href=&quot;../../base/base/index#Core.InexactError&quot;&gt; &lt;code&gt;InexactError&lt;/code&gt; の&lt;/a&gt;因数分解は、の要素の型によって表現できない数生成する場合は、例外がスローされた &lt;code&gt;A&lt;/code&gt; 整数型用などを、。</target>
        </trans-unit>
        <trans-unit id="5d064f8a98d481de062cba01c97539bfc2f0871d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;qr!&lt;/code&gt; is the same as &lt;a href=&quot;#LinearAlgebra.qr&quot;&gt;&lt;code&gt;qr&lt;/code&gt;&lt;/a&gt; when &lt;code&gt;A&lt;/code&gt; is a subtype of &lt;code&gt;StridedMatrix&lt;/code&gt;, but saves space by overwriting the input &lt;code&gt;A&lt;/code&gt;, instead of creating a copy. An &lt;a href=&quot;../../base/base/index#Core.InexactError&quot;&gt;&lt;code&gt;InexactError&lt;/code&gt;&lt;/a&gt; exception is thrown if the factorization produces a number not representable by the element type of &lt;code&gt;A&lt;/code&gt;, e.g. for integer types.</source>
          <target state="translated">&lt;code&gt;qr!&lt;/code&gt; &lt;code&gt;A&lt;/code&gt; が &lt;code&gt;StridedMatrix&lt;/code&gt; のサブタイプである場合、&lt;a href=&quot;#LinearAlgebra.qr&quot;&gt; &lt;code&gt;qr&lt;/code&gt; &lt;/a&gt;と同じですが、コピーを作成する代わりに、入力 &lt;code&gt;A&lt;/code&gt; を上書きすることでスペースを節約します。アン&lt;a href=&quot;../../base/base/index#Core.InexactError&quot;&gt; &lt;code&gt;InexactError&lt;/code&gt; の&lt;/a&gt;因数分解は、の要素の型によって表現できない数生成する場合は、例外がスローされた &lt;code&gt;A&lt;/code&gt; 整数型用などを、。</target>
        </trans-unit>
        <trans-unit id="cf9e4bad0fd4a4794a48064d48581af7033259a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;qr&lt;/code&gt; returns multiple types because LAPACK uses several representations that minimize the memory storage requirements of products of Householder elementary reflectors, so that the &lt;code&gt;Q&lt;/code&gt; and &lt;code&gt;R&lt;/code&gt; matrices can be stored compactly rather as two separate dense matrices.</source>
          <target state="translated">&lt;code&gt;qr&lt;/code&gt; は複数のタイプを返します。LAPACKはハウスホルダー基本リフレクターの製品のメモリストレージ要件を最小限に抑えるいくつかの表現を使用するため、 &lt;code&gt;Q&lt;/code&gt; マトリックスと &lt;code&gt;R&lt;/code&gt; マトリックスを2つの個別の密なマトリックスとしてコンパクトに保存できます。</target>
        </trans-unit>
        <trans-unit id="fe298f4b4614717693aba0cf7548649332f44a5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;qsort&lt;/code&gt; expects a comparison function that return a C &lt;code&gt;int&lt;/code&gt;, so we annotate the return type to be &lt;code&gt;Cint&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;qsort&lt;/code&gt; はCの返す比較関数を期待 &lt;code&gt;int&lt;/code&gt; 型私たちはなるように戻り値の型注釈を付けて、 &lt;code&gt;Cint&lt;/code&gt; のを。</target>
        </trans-unit>
        <trans-unit id="56b9466c550831a8245833d9e56b4ae895f63c18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;quiet&lt;/code&gt;: inform other git clients helping with/working on the rebase that the rebase should be done &quot;quietly&quot;. Used for interoperability. The default is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;quiet&lt;/code&gt; ：リベースを支援する/リベースで作業する他のgitクライアントに、リベースを「静かに」行う必要があることを通知します。相互運用性のために使用されます。デフォルトは &lt;code&gt;1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="89148ab980d30701194964666d016c3558cde6f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;quote&lt;/code&gt; creates multiple expression objects in a block without using the explicit &lt;a href=&quot;#Core.Expr&quot;&gt;&lt;code&gt;Expr&lt;/code&gt;&lt;/a&gt; constructor. For example:</source>
          <target state="translated">&lt;code&gt;quote&lt;/code&gt; は、明示的な&lt;a href=&quot;#Core.Expr&quot;&gt; &lt;code&gt;Expr&lt;/code&gt; &lt;/a&gt;コンストラクターを使用せずに、ブロック内に複数の式オブジェクトを作成します。例えば：</target>
        </trans-unit>
        <trans-unit id="1f3b9755167388bcf3471ba197b6c40b6008de5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;quote&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;quote&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="9096a143fba87878f860ce663f000649f6400ccc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;r&quot;^\s*(?:#|$)&quot;&lt;/code&gt; produces a regular expression object rather than a string</source>
          <target state="translated">&lt;code&gt;r&quot;^\s*(?:#|$)&quot;&lt;/code&gt; は、文字列ではなく正規表現オブジェクトを生成します</target>
        </trans-unit>
        <trans-unit id="6ec672446bd53c264182855affbe5a78b442fb6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;read&lt;/code&gt;, &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;append&lt;/code&gt;: restricts operations to the buffer; see &lt;code&gt;open&lt;/code&gt; for details.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; 、 &lt;code&gt;write&lt;/code&gt; 、 &lt;code&gt;append&lt;/code&gt; ：操作をバッファに制限します。詳細については、 &lt;code&gt;open&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="ecf721b9c658fe1430c1a0d12d81daeb2549a2e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recur&lt;/code&gt; &amp;ndash; Controls the recursion handling in &lt;code&gt;:tree&lt;/code&gt; format. &lt;code&gt;:off&lt;/code&gt; (default) prints the tree as normal. &lt;code&gt;:flat&lt;/code&gt; instead compresses any recursion (by ip), showing the approximate effect of converting any self-recursion into an iterator. &lt;code&gt;:flatc&lt;/code&gt; does the same but also includes collapsing of C frames (may do odd things around &lt;code&gt;jl_apply&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;recur&lt;/code&gt; &amp;ndash; &lt;code&gt;:tree&lt;/code&gt; 形式で再帰処理を制御します。 &lt;code&gt;:off&lt;/code&gt; （デフォルト）は、通常どおりツリーを出力します。 &lt;code&gt;:flat&lt;/code&gt; は、代わりに（ipによって）再帰を圧縮し、自己再帰をイテレーターに変換するおおよその効果を示します。 &lt;code&gt;:flatc&lt;/code&gt; は同じことをしますが、Cフレームの折りたたみも含みます（ &lt;code&gt;jl_apply&lt;/code&gt; の周りで奇妙なことをするかもしれません）。</target>
        </trans-unit>
        <trans-unit id="00fbd8f3deb831b9f5ec8b1264c745debaec29b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;recursion_limit&lt;/code&gt;: the upper limit on the number of merges of common ancestors to perform to try to build a new virtual merge base for the merge. The default is no limit. This field is only present on libgit2 versions newer than 0.24.0.</source>
          <target state="translated">&lt;code&gt;recursion_limit&lt;/code&gt; ：マージの新しい仮想マージベースを構築するために実行する共通の祖先のマージ数の上限。デフォルトは無制限です。このフィールドは、0.24.0より新しいlibgit2バージョンにのみ存在します。</target>
        </trans-unit>
        <trans-unit id="e3223e9226e352a329b29a7eace6c1d31eb0a618" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;refname::AbstractString=Consts.HEAD_FILE&lt;/code&gt;: if not NULL, the name of the reference to update to point to the new commit. For example, &lt;code&gt;&quot;HEAD&quot;&lt;/code&gt; will update the HEAD of the current branch. If the reference does not yet exist, it will be created.</source>
          <target state="translated">&lt;code&gt;refname::AbstractString=Consts.HEAD_FILE&lt;/code&gt; ：NULLでない場合、新しいコミットを指すように更新する参照の名前。たとえば、 &lt;code&gt;&quot;HEAD&quot;&lt;/code&gt; は現在のブランチのHEADを更新します。参照がまだ存在しない場合は、作成されます。</target>
        </trans-unit>
        <trans-unit id="7c7e2623afd5bf4ea28699952aaf1e41bf326a1c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;refspecs=AbstractString[]&lt;/code&gt;: determines properties of the fetch.</source>
          <target state="translated">&lt;code&gt;refspecs=AbstractString[]&lt;/code&gt; ：フェッチのプロパティを決定します。</target>
        </trans-unit>
        <trans-unit id="cad51a938d649503c2ef46d1225a6fc56968236e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;refspecs=AbstractString[]&lt;/code&gt;: determines properties of the push.</source>
          <target state="translated">&lt;code&gt;refspecs=AbstractString[]&lt;/code&gt; ：プッシュのプロパティを決定します。</target>
        </trans-unit>
        <trans-unit id="789e0d7504799b3b38c290db69c2914eaa79a006" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rejectna=true&lt;/code&gt;: throw an error if unassigned code points are found</source>
          <target state="translated">&lt;code&gt;rejectna=true&lt;/code&gt; ：割り当てられていないコードポイントが見つかった場合、エラーをスローします</target>
        </trans-unit>
        <trans-unit id="47c34491f7ee239ad33defe253fb1defd64e8594" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remote::AbstractString=&quot;origin&quot;&lt;/code&gt;: the name of the upstream remote to push to.</source>
          <target state="translated">&lt;code&gt;remote::AbstractString=&quot;origin&quot;&lt;/code&gt; ：プッシュ先のアップストリームリモートの名前。</target>
        </trans-unit>
        <trans-unit id="4b26ba19c7207aa3b208454b432a26db97e4da0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remote::AbstractString=&quot;origin&quot;&lt;/code&gt;: which remote, specified by name, of &lt;code&gt;repo&lt;/code&gt; to fetch from. If this is empty, the URL will be used to construct an anonymous remote.</source>
          <target state="translated">&lt;code&gt;remote::AbstractString=&quot;origin&quot;&lt;/code&gt; ：名前で指定された、リモートから取得する &lt;code&gt;repo&lt;/code&gt; リモート。これが空の場合、URLは匿名リモートを構築するために使用されます。</target>
        </trans-unit>
        <trans-unit id="ffdcacc6e1483f4d462c34f2bea9360ca75d4db8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remote_cb::Ptr{Cvoid}=C_NULL&lt;/code&gt;: a callback which will be used to create the remote before it is cloned. If &lt;code&gt;C_NULL&lt;/code&gt; (the default), no attempt will be made to create the remote - it will be assumed to already exist.</source>
          <target state="translated">&lt;code&gt;remote_cb::Ptr{Cvoid}=C_NULL&lt;/code&gt; ：クローンが作成される前にリモートを作成するために使用されるコールバック。 &lt;code&gt;C_NULL&lt;/code&gt; （デフォルト）の場合、リモートを作成する試みは行われず、すでに存在していると見なされます。</target>
        </trans-unit>
        <trans-unit id="81f2145109807b12c478f9428b7d01692494e503" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remote_cb&lt;/code&gt;: An optional callback used to create the &lt;a href=&quot;#LibGit2.GitRemote&quot;&gt;&lt;code&gt;GitRemote&lt;/code&gt;&lt;/a&gt; before making the clone from it.</source>
          <target state="translated">&lt;code&gt;remote_cb&lt;/code&gt; ：そこからクローンを作成する前に&lt;a href=&quot;#LibGit2.GitRemote&quot;&gt; &lt;code&gt;GitRemote&lt;/code&gt; &lt;/a&gt;を作成するために使用されるオプションのコールバック。</target>
        </trans-unit>
        <trans-unit id="08210342f9819d0a52928951c3cf701a468f0a0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remote_cb_payload&lt;/code&gt;: The payload for the remote callback.</source>
          <target state="translated">&lt;code&gt;remote_cb_payload&lt;/code&gt; ：リモートコールバックのペイロード。</target>
        </trans-unit>
        <trans-unit id="0b84ddfb974082fe30d2fdbc1437b3f617f6a788" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remoteref_id&lt;/code&gt; is a low-level API which returns a &lt;code&gt;RRID&lt;/code&gt; object that wraps &lt;code&gt;whence&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt; values of a remote reference.</source>
          <target state="translated">&lt;code&gt;remoteref_id&lt;/code&gt; は、リモート参照の &lt;code&gt;whence&lt;/code&gt; 値と &lt;code&gt;id&lt;/code&gt; 値をラップする &lt;code&gt;RRID&lt;/code&gt; オブジェクトを返す低レベルAPI です。</target>
        </trans-unit>
        <trans-unit id="8507e85a94a6cd1cb8268156f73c57a12952c455" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remoteurl::AbstractString=&quot;&quot;&lt;/code&gt;: the URL of &lt;code&gt;remote&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;remoteurl::AbstractString=&quot;&quot;&lt;/code&gt; ： &lt;code&gt;remote&lt;/code&gt; のURL 。</target>
        </trans-unit>
        <trans-unit id="af1618648ef5cfe8bc793d28a4d2646feb098771" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;remoteurl::AbstractString=&quot;&quot;&lt;/code&gt;: the URL of &lt;code&gt;remote&lt;/code&gt;. If not specified, will be assumed based on the given name of &lt;code&gt;remote&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;remoteurl::AbstractString=&quot;&quot;&lt;/code&gt; ： &lt;code&gt;remote&lt;/code&gt; のURL 。指定しない場合は、指定された &lt;code&gt;remote&lt;/code&gt; 名に基づいて想定されます。</target>
        </trans-unit>
        <trans-unit id="609e8e82126a8aeb5967ff81fbb3ef2aa24bd998" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rename_threshold&lt;/code&gt;: how similar two files must to consider one a rename of the other. This is an integer that sets the percentage similarity. The default is 50.</source>
          <target state="translated">&lt;code&gt;rename_threshold&lt;/code&gt; ：一方がもう一方の名前変更であると見なすには、類似した2つのファイルがどの程度必要か。これは、類似性の割合を設定する整数です。デフォルトは50です。</target>
        </trans-unit>
        <trans-unit id="a1f245ca6c95e5deef1b0ce6ee0330ae1e9c18b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repetition&lt;/code&gt; can be &lt;code&gt;Val(1)&lt;/code&gt; or &lt;code&gt;Val(Inf)&lt;/code&gt;, and should be used as a suggestion for deciding the amount of precomputation, if applicable.</source>
          <target state="translated">&lt;code&gt;repetition&lt;/code&gt; は &lt;code&gt;Val(1)&lt;/code&gt; または &lt;code&gt;Val(Inf)&lt;/code&gt; にすることができ、該当する場合は、事前計算の量を決定するための提案として使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e2a99cf9dace7b445312c1ed6b449e6eaff870cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repository_cb&lt;/code&gt;: An optional callback which will be used to create the &lt;em&gt;new&lt;/em&gt; repository into which the clone is made.</source>
          <target state="translated">&lt;code&gt;repository_cb&lt;/code&gt; ：クローンが作成される&lt;em&gt;新しい&lt;/em&gt;リポジトリを作成するために使用されるオプションのコールバック。</target>
        </trans-unit>
        <trans-unit id="69b143fd85b9454789782c1eb3c8d602eb3b9b29" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repository_cb_payload&lt;/code&gt;: The payload for the repository callback.</source>
          <target state="translated">&lt;code&gt;repository_cb_payload&lt;/code&gt; ：リポジトリコールバックのペイロード。</target>
        </trans-unit>
        <trans-unit id="5023aea211818a0760fb42fd29ef6a5a0289aa0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;repr&lt;/code&gt; returns the output of &lt;code&gt;show&lt;/code&gt; as a string.</source>
          <target state="translated">&lt;code&gt;repr&lt;/code&gt; は、 &lt;code&gt;show&lt;/code&gt; の出力を文字列として返します。</target>
        </trans-unit>
        <trans-unit id="7ff0db60e6e9b0f8032c3c60e6fb8dfbe0818b4d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return x&lt;/code&gt; causes the enclosing function to exit early, passing the given value &lt;code&gt;x&lt;/code&gt; back to its caller. &lt;code&gt;return&lt;/code&gt; by itself with no value is equivalent to &lt;code&gt;return nothing&lt;/code&gt; (see &lt;a href=&quot;../constants/index#Core.nothing&quot;&gt;&lt;code&gt;nothing&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;return x&lt;/code&gt; は、囲んでいる関数を早期に終了させ、指定された値 &lt;code&gt;x&lt;/code&gt; を呼び出し元に返します。 &lt;code&gt;return&lt;/code&gt; 値なしでそれ自体では同等です &lt;code&gt;return nothing&lt;/code&gt; （見えない&lt;a href=&quot;../constants/index#Core.nothing&quot;&gt; &lt;code&gt;nothing&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="502272392029d8c1210ca8442ce973a51a80b2c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;return&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="45cec38c32f578811af123b4529c8927598f6954" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;rewrite_notes_ref&lt;/code&gt;: name of the reference to notes to use to rewrite the commit notes as the rebase is finished.</source>
          <target state="translated">&lt;code&gt;rewrite_notes_ref&lt;/code&gt; ：リベースの完了時にコミットノートを書き換えるために使用するノートへの参照の名前。</target>
        </trans-unit>
        <trans-unit id="ee12f97ff2f79dfd78b89cda4ab0e281561a61af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;right_justify&lt;/code&gt; is the integer column which log metadata is right justified at. The default is zero (metadata goes on its own line).</source>
          <target state="translated">&lt;code&gt;right_justify&lt;/code&gt; は、ログメタデータが右揃えされる整数列です。デフォルトはゼロです（メタデータは独自の行に配置されます）。</target>
        </trans-unit>
        <trans-unit id="b331dc2677ed78e2b46e6f7e4f15579bf2430629" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;round&lt;/code&gt; using this rounding mode is an alias for &lt;a href=&quot;#Base.ceil&quot;&gt;&lt;code&gt;ceil&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;round&lt;/code&gt; この丸めモードを使用するには、の別名です&lt;a href=&quot;#Base.ceil&quot;&gt; &lt;code&gt;ceil&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b82694560cc17d932ed74b0e5a76969bf6a0851b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;round&lt;/code&gt; using this rounding mode is an alias for &lt;a href=&quot;#Base.floor&quot;&gt;&lt;code&gt;floor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;round&lt;/code&gt; この丸めモードを使用するには、の別名である&lt;a href=&quot;#Base.floor&quot;&gt; &lt;code&gt;floor&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b6064aeb0303df233165e5be4f2a31b0e19b1991" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;round&lt;/code&gt; using this rounding mode is an alias for &lt;a href=&quot;#Base.trunc&quot;&gt;&lt;code&gt;trunc&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;round&lt;/code&gt; この丸めモードを使用するには、の別名です&lt;a href=&quot;#Base.trunc&quot;&gt; &lt;code&gt;trunc&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2e4f32289fec3fa365e6110d93226bbad2f67917" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;s&lt;/code&gt; allows the &lt;code&gt;.&lt;/code&gt; modifier to match newlines.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; はを許可し &lt;code&gt;.&lt;/code&gt; 改行と一致する修飾子。</target>
        </trans-unit>
        <trans-unit id="f9a850a68210f1321a24f7f9f7751b659bc2b984" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sB&lt;/code&gt; has been tagged as a matrix that's (real) symmetric, so for later operations we might perform on it, such as eigenfactorization or computing matrix-vector products, efficiencies can be found by only referencing half of it. For example:</source>
          <target state="translated">&lt;code&gt;sB&lt;/code&gt; は（実際の）対称の行列としてタグ付けされているので、固有因子分解や行列-ベクトル積の計算など、後の操作で実行する可能性があるため、その半分を参照するだけで効率を確認できます。例えば：</target>
        </trans-unit>
        <trans-unit id="ccc484e194571496ce1eda5190c7d8120eefadd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scheme::AbstractString=&quot;&quot;&lt;/code&gt;: the URL scheme which identifies the protocol to be used. For HTTP use &quot;http&quot;, SSH use &quot;ssh&quot;, etc. When &lt;code&gt;scheme&lt;/code&gt; is not provided the output format will be &quot;ssh&quot; but using the scp-like syntax.</source>
          <target state="translated">&lt;code&gt;scheme::AbstractString=&quot;&quot;&lt;/code&gt; ：使用するプロトコルを識別するURLスキーム。以下のためのHTTPの使用「のhttp」などのSSHの使用「SSH」、 &lt;code&gt;scheme&lt;/code&gt; 出力形式は、「SSH」が、SCP-ような構文を使用することになります提供されていません。</target>
        </trans-unit>
        <trans-unit id="93b2806e781d6fca17b7143cb112498a0b664a1a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;scroll::Symbol=:na&lt;/code&gt;: If &lt;code&gt;:wrap&lt;/code&gt; then wrap the cursor around top and bottom, if :&lt;code&gt;nowrap&lt;/code&gt; do not wrap cursor</source>
          <target state="translated">&lt;code&gt;scroll::Symbol=:na&lt;/code&gt; &lt;code&gt;:wrap&lt;/code&gt; 場合、カーソルを上下にラップします &lt;code&gt;nowrap&lt;/code&gt; ：nowrapの場合、カーソルをラップしません。</target>
        </trans-unit>
        <trans-unit id="4b280689ba075d50a8bf44f6918ee06bdd7f1ee9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_head::Bool=true&lt;/code&gt;: if &lt;code&gt;true&lt;/code&gt;, after the branch creation finishes the branch head will be set as the HEAD of &lt;code&gt;repo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;set_head::Bool=true&lt;/code&gt; 次の場合 &lt;code&gt;true&lt;/code&gt; の枝の作成が終了した後、ブランチヘッドはのHEADとして設定されます &lt;code&gt;repo&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3cc61ed461b5dbaa13fd1fd838ddca4a2542572c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;set_zero_subnormals(true)&lt;/code&gt; can speed up some computations on some hardware. However, it can break identities such as &lt;code&gt;(x-y==0) == (x==y)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;set_zero_subnormals(true)&lt;/code&gt; は、一部のハードウェアで一部の計算を高速化できます。ただし、 &lt;code&gt;(x-y==0) == (x==y)&lt;/code&gt; などのIDが壊れる可能性があります。</target>
        </trans-unit>
        <trans-unit id="2c2e75ceadb77395d5345eca4bc8bc47dec72358" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;shaxxx()&lt;/code&gt; takes &lt;code&gt;AbstractString&lt;/code&gt; and array-like objects (&lt;code&gt;NTuple&lt;/code&gt; and &lt;code&gt;Array&lt;/code&gt;) with elements of type &lt;code&gt;UInt8&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;shaxxx()&lt;/code&gt; は、 &lt;code&gt;UInt8&lt;/code&gt; 型の要素を持つ &lt;code&gt;AbstractString&lt;/code&gt; および配列のようなオブジェクト（ &lt;code&gt;NTuple&lt;/code&gt; および &lt;code&gt;Array&lt;/code&gt; ）を取ります。</target>
        </trans-unit>
        <trans-unit id="d4ec3df759f8c80bc7761d61c8e5aa7aa26b8f04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;show&lt;/code&gt;: a flag for which files to examine and in which order. The default is &lt;code&gt;Consts.STATUS_SHOW_INDEX_AND_WORKDIR&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;show&lt;/code&gt; ：どのファイルをどの順序で調べるかを示すフラグ。デフォルトは &lt;code&gt;Consts.STATUS_SHOW_INDEX_AND_WORKDIR&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a32266a7567a6361fd0030ea46dc886158ce573e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;show_commit_oid_as_fallback&lt;/code&gt;: if no matching reference can be found which describes a commit, show the commit's &lt;a href=&quot;#LibGit2.GitHash&quot;&gt;&lt;code&gt;GitHash&lt;/code&gt;&lt;/a&gt; instead of throwing an error (the default behavior).</source>
          <target state="translated">&lt;code&gt;show_commit_oid_as_fallback&lt;/code&gt; ：コミットを説明する一致する参照が見つからない場合、エラーをスローする代わりにコミットの&lt;a href=&quot;#LibGit2.GitHash&quot;&gt; &lt;code&gt;GitHash&lt;/code&gt; &lt;/a&gt;を表示します（デフォルトの動作）。</target>
        </trans-unit>
        <trans-unit id="321d9936b85b091cfbe32e4ed333aa1019f70153" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;show_limited&lt;/code&gt; limits the printing of large data structures to something which can fit on the screen by setting the &lt;code&gt;:limit&lt;/code&gt;&lt;code&gt;IOContext&lt;/code&gt; key during formatting.</source>
          <target state="translated">&lt;code&gt;show_limited&lt;/code&gt; は、フォーマット中に &lt;code&gt;:limit&lt;/code&gt; &lt;code&gt;IOContext&lt;/code&gt; キーを設定することにより、大きなデータ構造の出力を画面に収まるものに制限します。</target>
        </trans-unit>
        <trans-unit id="eb77d8781dd9b346f7972d289b6b8d6656b27a5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sig::Signature=Signature(repo)&lt;/code&gt;: the tagger's signature.</source>
          <target state="translated">&lt;code&gt;sig::Signature=Signature(repo)&lt;/code&gt; ：タガーの署名。</target>
        </trans-unit>
        <trans-unit id="d753c86afdec45711bc5c02d99a4e474cd4a4e96" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;similarity&lt;/code&gt;: Used to indicate if a file has been renamed or copied.</source>
          <target state="translated">&lt;code&gt;similarity&lt;/code&gt; ：ファイルが名前変更またはコピーされたかどうかを示すために使用されます。</target>
        </trans-unit>
        <trans-unit id="ff10e5c77568c1b5f3ae641f11c70c8c65f4ba74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size(A) == size(B) || throw(DimensionMismatch(&quot;Size of A not equal to size of B&quot;))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;size(A) == size(B) || throw(DimensionMismatch(&quot;Size of A not equal to size of B&quot;))&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7997da896750d945cfa8c2d3cb4698bd3a261b9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size(A,1) == size(B,2) || throw(DimensionMismatch(&quot;A has first dimension...&quot;))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;size(A,1) == size(B,2) || throw(DimensionMismatch(&quot;A has first dimension...&quot;))&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="d10f869613b60c50f32f40c9033fbe46c6290e23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;size&lt;/code&gt;: the size of the item in bytes.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; ：バイト単位のアイテムのサイズ。</target>
        </trans-unit>
        <trans-unit id="5477a94f16fd95259abdf4ec79e87fa8ddde3d4a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sizehint&lt;/code&gt;: suggests a capacity of the buffer (&lt;code&gt;data&lt;/code&gt; must implement &lt;code&gt;sizehint!(data, size)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;sizehint&lt;/code&gt; ：バッファの容量を提案します（ &lt;code&gt;data&lt;/code&gt; は &lt;code&gt;sizehint!(data, size)&lt;/code&gt; 実装する必要があります）。</target>
        </trans-unit>
        <trans-unit id="b8c3ba1857a9b0055e1e04c56e79b38b776b38ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sortedby&lt;/code&gt; &amp;ndash; Controls the order in &lt;code&gt;:flat&lt;/code&gt; format. &lt;code&gt;:filefuncline&lt;/code&gt; (default) sorts by the source line, &lt;code&gt;:count&lt;/code&gt; sorts in order of number of collected samples, and &lt;code&gt;:overhead&lt;/code&gt; sorts by the number of samples incurred by each function by itself.</source>
          <target state="translated">&lt;code&gt;sortedby&lt;/code&gt; &amp;ndash; &lt;code&gt;:flat&lt;/code&gt; 形式で順序を制御します。 &lt;code&gt;:filefuncline&lt;/code&gt; （デフォルト）はソース行でソートし、 &lt;code&gt;:count&lt;/code&gt; は収集されたサンプルの数でソートし、 &lt;code&gt;:overhead&lt;/code&gt; は各関数自体で発生したサンプルの数でソートします。</target>
        </trans-unit>
        <trans-unit id="e3b3de6bcf724e5eb7a7cd993fb64be110536dd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sortedby&lt;/code&gt; &amp;ndash; Controls the order in &lt;code&gt;:flat&lt;/code&gt; format. &lt;code&gt;:filefuncline&lt;/code&gt; (default) sorts by the source line, whereas &lt;code&gt;:count&lt;/code&gt; sorts in order of number of collected samples.</source>
          <target state="translated">&lt;code&gt;sortedby&lt;/code&gt; &amp;ndash; &lt;code&gt;:flat&lt;/code&gt; 形式で順序を制御します。 &lt;code&gt;:filefuncline&lt;/code&gt; （デフォルト）はソース行でソートしますが、 &lt;code&gt;:count&lt;/code&gt; は収集したサンプルの数でソートします。</target>
        </trans-unit>
        <trans-unit id="9ab7b3a3ab6403e446642819fa1d378711eeccfd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sortslices&lt;/code&gt; extends naturally to higher dimensions. E.g., if &lt;code&gt;A&lt;/code&gt; is a a 2x2x2 array, &lt;code&gt;sortslices(A, dims=3)&lt;/code&gt; will sort slices within the 3rd dimension, passing the 2x2 slices &lt;code&gt;A[:, :, 1]&lt;/code&gt; and &lt;code&gt;A[:, :, 2]&lt;/code&gt; to the comparison function. Note that while there is no default order on higher-dimensional slices, you may use the &lt;code&gt;by&lt;/code&gt; or &lt;code&gt;lt&lt;/code&gt; keyword argument to specify such an order.</source>
          <target state="translated">&lt;code&gt;sortslices&lt;/code&gt; は、より高い次元に自然に拡張されます。たとえば、 &lt;code&gt;A&lt;/code&gt; が2x2x2配列の場合、 &lt;code&gt;sortslices(A, dims=3)&lt;/code&gt; 、dims = 3）は3番目の次元内のスライスをソートし、2x2スライス &lt;code&gt;A[:, :, 1]&lt;/code&gt; および &lt;code&gt;A[:, :, 2]&lt;/code&gt; を比較関数に渡します。 。高次元のスライスにはデフォルトの順序はありませんが、 &lt;code&gt;by&lt;/code&gt; または &lt;code&gt;lt&lt;/code&gt; キーワード引数を使用してそのような順序を指定できます。</target>
        </trans-unit>
        <trans-unit id="4951048c7ac40b21df3d0f006898cdcb02270fbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;spec&lt;/code&gt; is a textual specification: see &lt;a href=&quot;https://git-scm.com/docs/git-rev-parse.html#_specifying_revisions&quot;&gt;the git docs&lt;/a&gt; for a full list.</source>
          <target state="translated">&lt;code&gt;spec&lt;/code&gt; はテキストによる仕様です。完全なリスト&lt;a href=&quot;https://git-scm.com/docs/git-rev-parse.html#_specifying_revisions&quot;&gt;はgit docs&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4f04859a49c065ca19fcdcec7b6d599fc9662e04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sqrt(x)&lt;/code&gt;, &lt;code&gt;&amp;radic;x&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sqrt(x)&lt;/code&gt; 、 &lt;code&gt;&amp;radic;x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1844a8d2cb0ff3056c35be76a61b67e6353a981b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sshflags&lt;/code&gt; &amp;ndash; flags to use in establishing the SSH connection</source>
          <target state="translated">&lt;code&gt;sshflags&lt;/code&gt; &amp;ndash; SSH接続の確立に使用するフラグ</target>
        </trans-unit>
        <trans-unit id="7a4e3e2ec23bd08e30d9fd3aad5785bb62849893" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;sshflags&lt;/code&gt;: specifies additional ssh options, e.g. &lt;code&gt;sshflags=`-i /home/foo/bar.pem&lt;/code&gt;`</source>
          <target state="translated">&lt;code&gt;sshflags&lt;/code&gt; ：指定する追加のsshオプション、例えば &lt;code&gt;sshflags=`-i /home/foo/bar.pem&lt;/code&gt; `</target>
        </trans-unit>
        <trans-unit id="482b777392d5aea02672e566aeba40602b1e6b50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stable=true&lt;/code&gt;: enforce Unicode Versioning Stability</source>
          <target state="translated">&lt;code&gt;stable=true&lt;/code&gt; ：Unicodeバージョン管理の安定性を適用します</target>
        </trans-unit>
        <trans-unit id="c3f34cc201b5d8b2b94a13ec51d0f5a9bea4d457" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stable=true&lt;/code&gt;: enforce Unicode versioning stability (never introduce characters missing from earlier Unicode versions)</source>
          <target state="translated">&lt;code&gt;stable=true&lt;/code&gt; ：Unicodeバージョン管理の安定性を強制します（以前のUnicodeバージョンから欠落している文字を導入しないでください）</target>
        </trans-unit>
        <trans-unit id="a1d673d269bddb99403b4804cd814dccb535526a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;start_worker&lt;/code&gt; is an internal function which is the default entry point for worker processes connecting via TCP/IP. It sets up the process as a Julia cluster worker.</source>
          <target state="translated">&lt;code&gt;start_worker&lt;/code&gt; は、TCP / IPを介して接続するワーカープロセスのデフォルトのエントリポイントである内部関数です。Juliaクラスターワーカーとしてプロセスを設定します。</target>
        </trans-unit>
        <trans-unit id="0d39313a7b53c31deacd642a6f563eef785766ea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;startswith&lt;/code&gt; does not compile the anchoring into the regular expression, but instead passes the anchoring as &lt;code&gt;match_option&lt;/code&gt; to PCRE. If compile time is amortized, &lt;code&gt;occursin(r&quot;^...&quot;, s)&lt;/code&gt; is faster than &lt;code&gt;startswith(s, r&quot;...&quot;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;startswith&lt;/code&gt; はアンカーを正規表現にコンパイルしませんが、代わりにアンカーを &lt;code&gt;match_option&lt;/code&gt; としてPCRE に渡します。コンパイル時間が償却される場合、 &lt;code&gt;occursin(r&quot;^...&quot;, s)&lt;/code&gt; は、 &lt;code&gt;startswith(s, r&quot;...&quot;)&lt;/code&gt; よりも高速です。</target>
        </trans-unit>
        <trans-unit id="15339811e6d33db9e7897efcdd503d8c3b49eea3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;status&lt;/code&gt;: One of &lt;code&gt;Consts.DELTA_STATUS&lt;/code&gt;, indicating whether the file has been added/modified/deleted.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; ： &lt;code&gt;Consts.DELTA_STATUS&lt;/code&gt; の 1つ。ファイルが追加/変更/削除されたかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="593409fff5972acd2d5fc66532b51e6073c0482a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;status&lt;/code&gt;: contains the status flags for the file, indicating if it is current, or has been changed in some way in the index or work tree.</source>
          <target state="translated">&lt;code&gt;status&lt;/code&gt; ：ファイルのステータスフラグが含まれ、ファイルが最新であるか、インデックスまたは作業ツリーで何らかの方法で変更されているかを示します。</target>
        </trans-unit>
        <trans-unit id="7130447a57fb8968eccd9497b959129d184d5ebe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stop&lt;/code&gt; as a positional argument requires at least Julia 1.1.</source>
          <target state="translated">&lt;code&gt;stop&lt;/code&gt; 位置引数は少なくともJulia 1.1を必要とするため停止します。</target>
        </trans-unit>
        <trans-unit id="d0f59bf23005820bb215225956bc86d1eabe9e2d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stop&lt;/code&gt; may be specified as either a positional or keyword argument.</source>
          <target state="translated">&lt;code&gt;stop&lt;/code&gt; は、位置引数またはキーワード引数として指定できます。</target>
        </trans-unit>
        <trans-unit id="e12b59a2409adf775bb3ba9ebdfd0542b9cb0251" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stream&lt;/code&gt; must be a &lt;code&gt;TTY&lt;/code&gt;, a &lt;code&gt;Pipe&lt;/code&gt;, or a socket.</source>
          <target state="translated">&lt;code&gt;stream&lt;/code&gt; は &lt;code&gt;TTY&lt;/code&gt; 、 &lt;code&gt;Pipe&lt;/code&gt; 、またはソケットでなければなりません。</target>
        </trans-unit>
        <trans-unit id="92d2aefd112ecb4c0e212056a16040530a1c9949" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;string&lt;/code&gt; should usually not be defined directly. Instead, define a method &lt;code&gt;print(io::IO, x::MyType)&lt;/code&gt;. If &lt;code&gt;string(x)&lt;/code&gt; for a certain type needs to be highly efficient, then it may make sense to add a method to &lt;code&gt;string&lt;/code&gt; and define &lt;code&gt;print(io::IO, x::MyType) = print(io, string(x))&lt;/code&gt; to ensure the functions are consistent.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; 通常、文字列は直接定義しないでください。代わりに、メソッド &lt;code&gt;print(io::IO, x::MyType)&lt;/code&gt; 定義します。場合 &lt;code&gt;string(x)&lt;/code&gt; 、特定のタイプのニーズのためには非常に効率的であるために、それはにメソッドを追加するために意味をなすことができる &lt;code&gt;string&lt;/code&gt; と定義 &lt;code&gt;print(io::IO, x::MyType) = print(io, string(x))&lt;/code&gt; 機能の一貫性を確保するため。</target>
        </trans-unit>
        <trans-unit id="3a0a1bd4f366a04445c7d0b5b5d4912e1e3e7619" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;strings&lt;/code&gt; can be any iterable over elements &lt;code&gt;x&lt;/code&gt; which are convertible to strings via &lt;code&gt;print(io::IOBuffer, x)&lt;/code&gt;. &lt;code&gt;strings&lt;/code&gt; will be printed to &lt;code&gt;io&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;strings&lt;/code&gt; は、 &lt;code&gt;print(io::IOBuffer, x)&lt;/code&gt; 介して文字列に変換可能な要素 &lt;code&gt;x&lt;/code&gt; を反復可能なものにすることができます。 &lt;code&gt;strings&lt;/code&gt; は &lt;code&gt;io&lt;/code&gt; に出力されます。</target>
        </trans-unit>
        <trans-unit id="03d10d2948fe43796bacbfe30f1e399090a85dee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stripcc=true&lt;/code&gt;: strip control characters; horizontal tabs and form feeds are converted to spaces; newlines are also converted to spaces unless a newline-conversion flag was specified</source>
          <target state="translated">&lt;code&gt;stripcc=true&lt;/code&gt; ：制御文字を削除します。水平タブとフォームフィードはスペースに変換されます。改行変換フラグが指定されていない限り、改行もスペースに変換されます</target>
        </trans-unit>
        <trans-unit id="348e9291c5b543afc5d72a87490213ecd8d4eb07" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stripignore=true&lt;/code&gt;: strip Unicode's &quot;default ignorable&quot; characters (e.g. the soft hyphen or the left-to-right marker)</source>
          <target state="translated">&lt;code&gt;stripignore=true&lt;/code&gt; ：Unicodeの「デフォルトの無視可能な」文字を削除します（たとえば、ソフトハイフンまたは左から右へのマーカー）</target>
        </trans-unit>
        <trans-unit id="ea8af5006099bc8365d7c8c2016e824fc2c530ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;stripmark=true&lt;/code&gt;: strip diacritical marks (e.g. accents)</source>
          <target state="translated">&lt;code&gt;stripmark=true&lt;/code&gt; ：分音記号（アクセントなど）を削除します</target>
        </trans-unit>
        <trans-unit id="152fe4fc303b0a193c1b742fe9f4ede9b98c674b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;struct T&lt;/code&gt; (including typedef to a struct)</source>
          <target state="translated">&lt;code&gt;struct T&lt;/code&gt; （構造体へのtypedefを含む）</target>
        </trans-unit>
        <trans-unit id="c56e50a4a868cc2df17e58d4812fe396996de54a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;struct&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="ba2cc4e0e66a121d0318b71f9b1e31d8945e78e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;struct&lt;/code&gt;s are immutable by default; an instance of one of these types cannot be modified after construction. Use &lt;a href=&quot;#mutable%20struct&quot;&gt;&lt;code&gt;mutable struct&lt;/code&gt;&lt;/a&gt; instead to declare a type whose instances can be modified.</source>
          <target state="translated">&lt;code&gt;struct&lt;/code&gt; はデフォルトでは不変です。これらのタイプのインスタンスは、作成後に変更することはできません。代わりに&lt;a href=&quot;#mutable%20struct&quot;&gt; &lt;code&gt;mutable struct&lt;/code&gt; &lt;/a&gt;を使用して、インスタンスを変更できる型を宣言してください。</target>
        </trans-unit>
        <trans-unit id="13e850a37abc68848cc3b254dc2d22440b355863" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;supertype operator&lt;/code&gt; (reverse of subtype operator)</source>
          <target state="translated">&lt;code&gt;supertype operator&lt;/code&gt; （サブタイプ演算子の逆）</target>
        </trans-unit>
        <trans-unit id="cc1fbbda24d7f513ea72de9ed041f7b7a1294c63" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;supress_output::Bool=false&lt;/code&gt;: For testing. If true, menu will not be printed to console.</source>
          <target state="translated">&lt;code&gt;supress_output::Bool=false&lt;/code&gt; ：テスト用。trueの場合、メニューはコンソールに出力されません。</target>
        </trans-unit>
        <trans-unit id="865fee67603befce1b0155fd32588cd0eea3727b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;svd!&lt;/code&gt; is the same as &lt;a href=&quot;#LinearAlgebra.svd&quot;&gt;&lt;code&gt;svd&lt;/code&gt;&lt;/a&gt;, but modifies the arguments &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; in-place, instead of making copies.</source>
          <target state="translated">&lt;code&gt;svd!&lt;/code&gt; は&lt;a href=&quot;#LinearAlgebra.svd&quot;&gt; &lt;code&gt;svd&lt;/code&gt; &lt;/a&gt;と同じですが、コピーを作成する代わりに、引数 &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; を変更します。</target>
        </trans-unit>
        <trans-unit id="5ac943a1020666f7a7da5c2717895ed9dd7a951a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;svd!&lt;/code&gt; is the same as &lt;a href=&quot;#LinearAlgebra.svd&quot;&gt;&lt;code&gt;svd&lt;/code&gt;&lt;/a&gt;, but modifies the arguments &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; in-place, instead of making copies. See documentation of &lt;a href=&quot;#LinearAlgebra.svd&quot;&gt;&lt;code&gt;svd&lt;/code&gt;&lt;/a&gt; for details. ```</source>
          <target state="translated">&lt;code&gt;svd!&lt;/code&gt; &lt;a href=&quot;#LinearAlgebra.svd&quot;&gt; &lt;code&gt;svd&lt;/code&gt; &lt;/a&gt;と同じですが、コピーを作成する代わりに、引数 &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; をインプレースで変更します。詳細については、&lt;a href=&quot;#LinearAlgebra.svd&quot;&gt; &lt;code&gt;svd&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。`` `</target>
        </trans-unit>
        <trans-unit id="23f1a2a22493ae52966dc56d654ec748102e1aa8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;svd!&lt;/code&gt; is the same as &lt;a href=&quot;#LinearAlgebra.svd&quot;&gt;&lt;code&gt;svd&lt;/code&gt;&lt;/a&gt;, but saves space by overwriting the input &lt;code&gt;A&lt;/code&gt;, instead of creating a copy.</source>
          <target state="translated">&lt;code&gt;svd!&lt;/code&gt; は&lt;a href=&quot;#LinearAlgebra.svd&quot;&gt; &lt;code&gt;svd&lt;/code&gt; &lt;/a&gt;と同じですが、コピーを作成する代わりに入力 &lt;code&gt;A&lt;/code&gt; を上書きすることでスペースを節約します。</target>
        </trans-unit>
        <trans-unit id="2f443b46f49f7a0ffb67743e11d80b3fef2023d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;svd!&lt;/code&gt; is the same as &lt;a href=&quot;#LinearAlgebra.svd&quot;&gt;&lt;code&gt;svd&lt;/code&gt;&lt;/a&gt;, but saves space by overwriting the input &lt;code&gt;A&lt;/code&gt;, instead of creating a copy. See documentation of &lt;a href=&quot;#LinearAlgebra.svd&quot;&gt;&lt;code&gt;svd&lt;/code&gt;&lt;/a&gt; for details. ```</source>
          <target state="translated">&lt;code&gt;svd!&lt;/code&gt; &lt;a href=&quot;#LinearAlgebra.svd&quot;&gt; &lt;code&gt;svd&lt;/code&gt; &lt;/a&gt;と同じですが、コピーを作成する代わりに、入力 &lt;code&gt;A&lt;/code&gt; を上書きすることでスペースを節約します。詳細については、&lt;a href=&quot;#LinearAlgebra.svd&quot;&gt; &lt;code&gt;svd&lt;/code&gt; の&lt;/a&gt;ドキュメントを参照してください。`` `</target>
        </trans-unit>
        <trans-unit id="26f8b179c1cd1baf106b501d9f23e6788334be4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;take!&lt;/code&gt; - take a worker from the available pool (to be used for remote function execution)</source>
          <target state="translated">&lt;code&gt;take!&lt;/code&gt; -利用可能なプールからワーカーを取得します（リモート関数の実行に使用されます）</target>
        </trans-unit>
        <trans-unit id="fbcd6c4d67df75ccaec5596e95f9f2b241b36c9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;take!&lt;/code&gt; and &lt;a href=&quot;#Base.fetch-Tuple%7BTask%7D&quot;&gt;&lt;code&gt;fetch&lt;/code&gt;&lt;/a&gt; on an empty, closed channel.</source>
          <target state="translated">&lt;code&gt;take!&lt;/code&gt; そして、&lt;a href=&quot;#Base.fetch-Tuple%7BTask%7D&quot;&gt; &lt;code&gt;fetch&lt;/code&gt; &lt;/a&gt;空、クローズドチャネル上。</target>
        </trans-unit>
        <trans-unit id="a385216e2414d1ff7d0e710e07a4b2820a4c3d37" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;take!&lt;/code&gt; and &lt;code&gt;fetch&lt;/code&gt; (which retrieves but does not remove the value) on a closed channel successfully return any existing values until it is emptied. Continuing the above example:</source>
          <target state="translated">&lt;code&gt;take!&lt;/code&gt; 閉じたチャネルで &lt;code&gt;fetch&lt;/code&gt; （値を取得しますが、削除はしません）は、空になるまで既存の値を正常に返します。上記の例を続けます。</target>
        </trans-unit>
        <trans-unit id="f655219d63910b18e55d1c7b6d809270664f739b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target_directory&lt;/code&gt;: If not empty, checkout to this directory instead of the &lt;code&gt;workdir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;target_directory&lt;/code&gt; ：空でない場合、 &lt;code&gt;workdir&lt;/code&gt; の代わりにこのディレクトリにチェックアウトします。</target>
        </trans-unit>
        <trans-unit id="73fa24ada0f915b08e5eb705950254ddb5149ac8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;target_limit&lt;/code&gt;: the maximum number of files to compare with to look for renames. The default is 200.</source>
          <target state="translated">&lt;code&gt;target_limit&lt;/code&gt; ：名前の変更を探すために比較するファイルの最大数。デフォルトは200です。</target>
        </trans-unit>
        <trans-unit id="8aa9f0c43ae05a2ce21f07a765041be8eb22e9f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;task_local_storage&lt;/code&gt; manipulates a key-value store specific to the current task.</source>
          <target state="translated">&lt;code&gt;task_local_storage&lt;/code&gt; は、現在のタスクに固有のKey-Valueストアを操作します。</target>
        </trans-unit>
        <trans-unit id="918476307e3ca43e70bc1905ec5bcef98a16e9bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;their_label&lt;/code&gt;: In case of conflicts, the name of &quot;their&quot; side.</source>
          <target state="translated">&lt;code&gt;their_label&lt;/code&gt; ：競合する場合の「彼ら」の側の名前。</target>
        </trans-unit>
        <trans-unit id="6030193bdbe78c187e1658db0e709e4fa8490cd8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;topology&lt;/code&gt;: Specifies how the workers connect to each other. Sending a message between unconnected workers results in an error.</source>
          <target state="translated">&lt;code&gt;topology&lt;/code&gt; ：ワーカーが相互に接続する方法を指定します。接続されていないワーカー間でメッセージを送信すると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="afb214098cd0d7a7d60c3cf6760db696f2f4fcce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;topology=:all_to_all&lt;/code&gt;: All processes are connected to each other. The default.</source>
          <target state="translated">&lt;code&gt;topology=:all_to_all&lt;/code&gt; ：すべてのプロセスが相互に接続されています。デフォルト。</target>
        </trans-unit>
        <trans-unit id="88dec064b9bfcaf6a26453d2e661939ebc23d230" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;topology=:custom&lt;/code&gt;: The &lt;code&gt;launch&lt;/code&gt; method of the cluster manager specifies the connection topology via fields &lt;code&gt;ident&lt;/code&gt; and &lt;code&gt;connect_idents&lt;/code&gt; in &lt;code&gt;WorkerConfig&lt;/code&gt;. A worker with a cluster manager identity &lt;code&gt;ident&lt;/code&gt; will connect to all workers specified in &lt;code&gt;connect_idents&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;topology=:custom&lt;/code&gt; ： &lt;code&gt;launch&lt;/code&gt; クラスタマネージャの方法は、フィールドを経由して接続トポロジを指定する &lt;code&gt;ident&lt;/code&gt; と &lt;code&gt;connect_idents&lt;/code&gt; で &lt;code&gt;WorkerConfig&lt;/code&gt; 。クラスターマネージャーIDの &lt;code&gt;ident&lt;/code&gt; を持つワーカーは、 &lt;code&gt;connect_idents&lt;/code&gt; で指定されたすべてのワーカーに接続します。</target>
        </trans-unit>
        <trans-unit id="e2b734d8bcd640fb2c65bc20498e0e55564a7cf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;topology=:master_worker&lt;/code&gt;: Only the driver process, i.e. &lt;code&gt;pid&lt;/code&gt; 1 connects to the workers. The workers do not connect to each other.</source>
          <target state="translated">&lt;code&gt;topology=:master_worker&lt;/code&gt; ：ドライバープロセスのみ、つまり &lt;code&gt;pid&lt;/code&gt; 1がワーカーに接続します。ワーカーは互いに接続しません。</target>
        </trans-unit>
        <trans-unit id="2d9f7d8f681c6583e7676e7d6edc9308af158917" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;track::AbstractString=&quot;&quot;&lt;/code&gt;: the name of the remote branch this new branch should track, if any. If empty (the default), no remote branch will be tracked.</source>
          <target state="translated">&lt;code&gt;track::AbstractString=&quot;&quot;&lt;/code&gt; ：この新しいブランチが追跡するリモートブランチの名前（ある場合）。空（デフォルト）の場合、リモートブランチは追跡されません。</target>
        </trans-unit>
        <trans-unit id="4e2130c7a7a9a101281bd18d3a385769f9600d03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trans&lt;/code&gt;/&lt;code&gt;tX&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;trans&lt;/code&gt;/&lt;code&gt;tX&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="14ddcb95a156c7bb55a2265603cd736316fe9393" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tree_id::GitHash = GitHash()&lt;/code&gt; is a git tree to use to create the commit, showing its ancestry and relationship with any other history. &lt;code&gt;tree&lt;/code&gt; must belong to &lt;code&gt;repo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tree_id::GitHash = GitHash()&lt;/code&gt; は、コミットの作成に使用するgitツリーであり、その祖先と他の履歴との関係を示します。 &lt;code&gt;tree&lt;/code&gt; は &lt;code&gt;repo&lt;/code&gt; 属している必要があります。</target>
        </trans-unit>
        <trans-unit id="c5eb7dc6b4355a5d1f4c868ec0c32021d4596579" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;true&lt;/code&gt; (1)</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; （1）</target>
        </trans-unit>
        <trans-unit id="0936c575e4a9bce1faa418b1592ef449dfc0490a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trunc(T, x)&lt;/code&gt; converts the result to type &lt;code&gt;T&lt;/code&gt;, throwing an &lt;code&gt;InexactError&lt;/code&gt; if the value is not representable.</source>
          <target state="translated">&lt;code&gt;trunc(T, x)&lt;/code&gt; は結果を &lt;code&gt;T&lt;/code&gt; 型に変換し、値が表現できない場合は &lt;code&gt;InexactError&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="7b21c9a0f1d3cee2b1f4d67453d1344f204a37a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;trunc(x)&lt;/code&gt; returns the nearest integral value of the same type as &lt;code&gt;x&lt;/code&gt; whose absolute value is less than or equal to &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;trunc(x)&lt;/code&gt; 同じタイプの最も近い整数値を返し &lt;code&gt;x&lt;/code&gt; 絶対値未満又はに等しい &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fbee0eec9b2e55430d527d6582dd8877f12bb7b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;truncate&lt;/code&gt;: truncates the buffer size to zero length.</source>
          <target state="translated">&lt;code&gt;truncate&lt;/code&gt; ：バッファサイズを長さゼロに切り捨てます。</target>
        </trans-unit>
        <trans-unit id="41b6e3b3fb48f326fbad1eec1eadf0a833f25b9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;try/catch&lt;/code&gt; statements also allow the &lt;code&gt;Exception&lt;/code&gt; to be saved in a variable. The following contrived example calculates the square root of the second element of &lt;code&gt;x&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is indexable, otherwise assumes &lt;code&gt;x&lt;/code&gt; is a real number and returns its square root:</source>
          <target state="translated">&lt;code&gt;try/catch&lt;/code&gt; ステートメントでは、 &lt;code&gt;Exception&lt;/code&gt; を変数に保存することもできます。次の不自然な例は、 &lt;code&gt;x&lt;/code&gt; がインデックス可能な場合、 &lt;code&gt;x&lt;/code&gt; の2番目の要素の平方根を計算します。そうでない場合、 &lt;code&gt;x&lt;/code&gt; は実数であると想定し、その平方根を返します。</target>
        </trans-unit>
        <trans-unit id="c33b1b48f85121178c6189a83f36ae5a4de3a504" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;try&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="abd7dd9b12720a69f43edb81b0af4bb55b4e9603" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ttl&lt;/code&gt;: Time-to-live of packets sent on the socket (default: &lt;code&gt;nothing&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;ttl&lt;/code&gt; ：ソケットで送信されたパケットの存続時間（デフォルト： &lt;code&gt;nothing&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="bbe2f11d5812292598ef7400b637ef93f999bc1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tunnel&lt;/code&gt; &amp;ndash; &lt;code&gt;true&lt;/code&gt; (use tunneling), &lt;code&gt;false&lt;/code&gt; (do not use tunneling), or &lt;a href=&quot;../../base/constants/index#Core.nothing&quot;&gt;&lt;code&gt;nothing&lt;/code&gt;&lt;/a&gt; (use default for the manager)</source>
          <target state="translated">&lt;code&gt;tunnel&lt;/code&gt; &amp;ndash; &lt;code&gt;true&lt;/code&gt; （トンネリングを使用）、 &lt;code&gt;false&lt;/code&gt; （トンネリングを使用しない）、または&lt;a href=&quot;../../base/constants/index#Core.nothing&quot;&gt; &lt;code&gt;nothing&lt;/code&gt; &lt;/a&gt;（マネージャーのデフォルトを使用）</target>
        </trans-unit>
        <trans-unit id="402b0271ddb14ba3adb678d7b893e14da34abca5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tunnel&lt;/code&gt;, &lt;code&gt;bind_addr&lt;/code&gt;, &lt;code&gt;sshflags&lt;/code&gt; and &lt;code&gt;max_parallel&lt;/code&gt; are used when a ssh tunnel is required to connect to the workers from the master process.</source>
          <target state="translated">&lt;code&gt;tunnel&lt;/code&gt; 、 &lt;code&gt;bind_addr&lt;/code&gt; 、 &lt;code&gt;sshflags&lt;/code&gt; および &lt;code&gt;max_parallel&lt;/code&gt; は、マスタープロセスからワーカーに接続するためにsshトンネルが必要な場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="3ae98d30d6b9f87be7214d21f7b1f1658026f596" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;tunnel&lt;/code&gt;: if &lt;code&gt;true&lt;/code&gt; then SSH tunneling will be used to connect to the worker from the master process. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tunnel&lt;/code&gt; ： &lt;code&gt;true&lt;/code&gt; の場合、マスタープロセスからワーカーに接続するためにSSHトンネリングが使用されます。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5fdfbb92ea4996a990fc0aedc71b8b96f842b098" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;unchecked::String=&quot;[ ]&quot;|&quot;⬚&quot;)&lt;/code&gt;: string to use for unchecked</source>
          <target state="translated">&lt;code&gt;unchecked::String=&quot;[ ]&quot;|&quot;⬚&quot;)&lt;/code&gt; ：未チェックに使用する文字列</target>
        </trans-unit>
        <trans-unit id="ae5641baee7f560f12b53646e74002ae2a7b0bf6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;up_arrow::Char='^'|'&amp;uarr;'&lt;/code&gt;: character to use for up arrow</source>
          <target state="translated">&lt;code&gt;up_arrow::Char='^'|'&amp;uarr;'&lt;/code&gt; ：上矢印に使用する文字</target>
        </trans-unit>
        <trans-unit id="1286bd62882b2197d9326752a14abf249e35dcf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;update_fetchhead&lt;/code&gt;: whether to update the &lt;a href=&quot;#LibGit2.FetchHead&quot;&gt;&lt;code&gt;FetchHead&lt;/code&gt;&lt;/a&gt; after the fetch. The default is to perform the update, which is the normal git behavior.</source>
          <target state="translated">&lt;code&gt;update_fetchhead&lt;/code&gt; ：フェッチ後に&lt;a href=&quot;#LibGit2.FetchHead&quot;&gt; &lt;code&gt;FetchHead&lt;/code&gt; &lt;/a&gt;を更新するかどうか。デフォルトでは、通常のgitの動作である更新を実行します。</target>
        </trans-unit>
        <trans-unit id="689158119264263de422838a5b03a631131c1362" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;uplo&lt;/code&gt;/&lt;code&gt;ul&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;uplo&lt;/code&gt;/&lt;code&gt;ul&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ab24710e9825de064a163f5ce94d79be47ade840" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;url&lt;/code&gt;: The URL of the fetch head.</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; ：フェッチヘッドのURL。</target>
        </trans-unit>
        <trans-unit id="f442181197e49f968f2471275a5f012e278f3859" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;url&lt;/code&gt;: the URL of the proxy.</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; ：プロキシのURL。</target>
        </trans-unit>
        <trans-unit id="19c4e769ed90cfd681ef1b310a2d6f9ad4296082" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;userdata&lt;/code&gt; is provided for custom cluster managers to store their own worker-specific information.</source>
          <target state="translated">&lt;code&gt;userdata&lt;/code&gt; は、カスタムクラスターマネージャーが独自のワーカー固有の情報を格納するために提供されます。</target>
        </trans-unit>
        <trans-unit id="d3b8331fceffede2316a7974124bb49b8eeb18b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;username::AbstractString=&quot;&quot;&lt;/code&gt;: the username to use in the output if provided.</source>
          <target state="translated">&lt;code&gt;username::AbstractString=&quot;&quot;&lt;/code&gt; ：提供されている場合に出力で使用するユーザー名。</target>
        </trans-unit>
        <trans-unit id="7d104208af9cf68b573f7feb14b42536431e64fe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;using Foo&lt;/code&gt; will load the module or package &lt;code&gt;Foo&lt;/code&gt; and make its &lt;a href=&quot;#export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt;ed names available for direct use. Names can also be used via dot syntax (e.g. &lt;code&gt;Foo.foo&lt;/code&gt; to access the name &lt;code&gt;foo&lt;/code&gt;), whether they are &lt;code&gt;export&lt;/code&gt;ed or not. See the &lt;a href=&quot;../../manual/modules/index#modules&quot;&gt;manual section about modules&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;using Foo&lt;/code&gt; モジュールをロードするか、またはパッケージ化されます &lt;code&gt;Foo&lt;/code&gt; 、その作り&lt;a href=&quot;#export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt;直接使用するためのED名が利用できます。名前は、 &lt;code&gt;export&lt;/code&gt; ているかどうかに関係なく、ドット構文（たとえば、 &lt;code&gt;Foo.foo&lt;/code&gt; を使用して名前 &lt;code&gt;foo&lt;/code&gt; にアクセスする）を介して使用することもできます。詳細については、&lt;a href=&quot;../../manual/modules/index#modules&quot;&gt;モジュール&lt;/a&gt;に関するマニュアルのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="6c27371ad1b21bb51acb86107c58f827061ba3f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;using Foo&lt;/code&gt; will load the module or package &lt;code&gt;Foo&lt;/code&gt; and make its &lt;a href=&quot;#export&quot;&gt;&lt;code&gt;export&lt;/code&gt;&lt;/a&gt;ed names available for direct use. Names can also be used via dot syntax (e.g. &lt;code&gt;Foo.foo&lt;/code&gt; to access the name &lt;code&gt;foo&lt;/code&gt;), whether they are &lt;code&gt;export&lt;/code&gt;ed or not. See the &lt;a href=&quot;../../manual/modules/index#modules-1&quot;&gt;manual section about modules&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;using Foo&lt;/code&gt; モジュールをロードするか、またはパッケージ化されます &lt;code&gt;Foo&lt;/code&gt; 、その作り&lt;a href=&quot;#export&quot;&gt; &lt;code&gt;export&lt;/code&gt; &lt;/a&gt;直接使用するためのED名が利用できます。名前は、 &lt;code&gt;export&lt;/code&gt; ているかどうかにかかわらず、ドット構文を介して使用することもできます（例： &lt;code&gt;foo&lt;/code&gt; にアクセスするための &lt;code&gt;Foo.foo&lt;/code&gt; ）。詳細については、&lt;a href=&quot;../../manual/modules/index#modules-1&quot;&gt;モジュール&lt;/a&gt;に関するマニュアルのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="838b54a9eab8767958b3b80fdcf1e81d2fcffe22" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;using&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;using&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="3e6a732011c1dc2660c4dbf3be189b6cbac8e5cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;v&lt;/code&gt; now gets converted to the channel's type with &lt;a href=&quot;../base/index#Base.convert&quot;&gt;&lt;code&gt;convert&lt;/code&gt;&lt;/a&gt; as &lt;code&gt;put!&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;v&lt;/code&gt; &lt;a href=&quot;../base/index#Base.convert&quot;&gt; &lt;code&gt;convert&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;put!&lt;/code&gt; としてチャネルのタイプに変換されるようになりました！と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="49167f4be17e10d892b6cbc7f3c57602c873f166" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;var&quot;name&quot;&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;var&quot;name&quot;&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="a66a7e6c62d3aec6a461aa958f979b8da4631830" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;verbose&lt;/code&gt;: print all additional information</source>
          <target state="translated">&lt;code&gt;verbose&lt;/code&gt; ：すべての追加情報を出力します</target>
        </trans-unit>
        <trans-unit id="38771c8d2e3b58102e803157f1021fdc77359ffa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;version&lt;/code&gt;: version of the struct in use, in case this changes later. For now, always &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;version&lt;/code&gt; ：後で変更された場合に使用する構造体のバージョン。今のところ、常に &lt;code&gt;1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1609ac09d4613eb0a602a783024f2b37f908873d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;vl&lt;/code&gt; is the lower bound of the window of eigenvalues to search for, and &lt;code&gt;vu&lt;/code&gt; is the upper bound.</source>
          <target state="translated">&lt;code&gt;vl&lt;/code&gt; は検索する固有値のウィンドウの下限で、 &lt;code&gt;vu&lt;/code&gt; は上限です。</target>
        </trans-unit>
        <trans-unit id="39634ab88344e26a6c4f7e1a95904a898f43f0de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;void&lt;/code&gt; and &lt;code&gt;[[noreturn]]&lt;/code&gt; or &lt;code&gt;_Noreturn&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;void&lt;/code&gt; および &lt;code&gt;[[noreturn]]&lt;/code&gt; または &lt;code&gt;_Noreturn&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f798cc6e3986d2379a7244ce2f55decce5179fd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;when&lt;/code&gt;: a &lt;a href=&quot;#LibGit2.TimeStruct&quot;&gt;&lt;code&gt;TimeStruct&lt;/code&gt;&lt;/a&gt; indicating when the commit was authored/committed into the repository.</source>
          <target state="translated">&lt;code&gt;when&lt;/code&gt; ：コミットがいつリポジトリに作成/コミットされた&lt;a href=&quot;#LibGit2.TimeStruct&quot;&gt; &lt;code&gt;TimeStruct&lt;/code&gt; &lt;/a&gt;示すTimeStruct。</target>
        </trans-unit>
        <trans-unit id="3719daed583548857eb7718a7ea0092ff6bffe3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;whence&lt;/code&gt; - refers to the node the remote reference was created from. Note that this is different from the node where the underlying object referred to actually exists. For example calling &lt;code&gt;RemoteChannel(2)&lt;/code&gt; from the master process would result in a &lt;code&gt;where&lt;/code&gt; value of 2 and a &lt;code&gt;whence&lt;/code&gt; value of 1.</source>
          <target state="translated">&lt;code&gt;whence&lt;/code&gt; -リモート参照の作成元のノードを指します。これは、参照される基になるオブジェクトが実際に存在するノードとは異なることに注意してください。たとえば、マスタープロセスから &lt;code&gt;RemoteChannel(2)&lt;/code&gt; を呼び出すと、 &lt;code&gt;where&lt;/code&gt; 値は2、 &lt;code&gt;whence&lt;/code&gt; 値は1になります。</target>
        </trans-unit>
        <trans-unit id="4feca933c79656bb4a1cc14d4c9d2c920ea65480" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;where&lt;/code&gt; - refers to the node where the underlying object/storage referred to by the reference actually exists.</source>
          <target state="translated">&lt;code&gt;where&lt;/code&gt; -は、参照によって参照される基になるオブジェクト/ストレージが実際に存在するノードを指します。</target>
        </trans-unit>
        <trans-unit id="be931cf43d24dd627ab40ea349a9901fcb931b4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;where&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;where&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="551426be1e371b3925c0f4c041a102931aa878ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while&lt;/code&gt; loops repeatedly evaluate a conditional expression, and continue evaluating the body of the while loop as long as the expression remains true. If the condition expression is false when the while loop is first reached, the body is never evaluated.</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt; ループは条件式を繰り返し評価し、式がtrueである限り、whileループの本体の評価を続けます。whileループに最初に到達したときに条件式がfalseの場合、本体は評価されません。</target>
        </trans-unit>
        <trans-unit id="f18b5d8d4e26142e2aee4c1c2ade071ef4896235" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;while&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;while&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="9e0e55014bc39303400ae1fa6e711c88709191dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;windows_hide::Bool&lt;/code&gt;: If &lt;code&gt;true&lt;/code&gt; (defaults to &lt;code&gt;false&lt;/code&gt;), then on Windows no new console window is displayed when the &lt;code&gt;Cmd&lt;/code&gt; is executed. This has no effect if a console is already open or on non-Windows systems.</source>
          <target state="translated">&lt;code&gt;windows_hide::Bool&lt;/code&gt; ： &lt;code&gt;true&lt;/code&gt; （デフォルトは &lt;code&gt;false&lt;/code&gt; ）の場合、Windowsでは、 &lt;code&gt;Cmd&lt;/code&gt; の実行時に新しいコンソールウィンドウは表示されません。これは、コンソールがすでに開いている場合、またはWindows以外のシステム上では効果がありません。</target>
        </trans-unit>
        <trans-unit id="dfac6550a56cdb5e20498842d2ca74d4884878f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;windows_verbatim::Bool&lt;/code&gt;: If &lt;code&gt;true&lt;/code&gt; (defaults to &lt;code&gt;false&lt;/code&gt;), then on Windows the &lt;code&gt;Cmd&lt;/code&gt; will send a command-line string to the process with no quoting or escaping of arguments, even arguments containing spaces. (On Windows, arguments are sent to a program as a single &quot;command-line&quot; string, and programs are responsible for parsing it into arguments. By default, empty arguments and arguments with spaces or tabs are quoted with double quotes &lt;code&gt;&quot;&lt;/code&gt; in the command line, and &lt;code&gt;\&lt;/code&gt; or &lt;code&gt;&quot;&lt;/code&gt; are preceded by backslashes. &lt;code&gt;windows_verbatim=true&lt;/code&gt; is useful for launching programs that parse their command line in nonstandard ways.) Has no effect on non-Windows systems.</source>
          <target state="translated">&lt;code&gt;windows_verbatim::Bool&lt;/code&gt; ： &lt;code&gt;true&lt;/code&gt; （デフォルトは &lt;code&gt;false&lt;/code&gt; ）の場合、Windowsでは &lt;code&gt;Cmd&lt;/code&gt; は引数を引用またはエスケープせずにコマンドライン文字列をプロセスに送信します。スペースを含む引数も含まれます。 （Windowsでは、引数は単一の「コマンドライン」文字列としてプログラムに送信され、プログラムはそれを引数に解析する必要があります。デフォルトでは、空の引数とスペースまたはタブを含む引数は、コマンド内で二重引用符 &lt;code&gt;&quot;&lt;/code&gt; で囲まれますline、および &lt;code&gt;\&lt;/code&gt; または &lt;code&gt;&quot;&lt;/code&gt; の前にはバックスラッシュが付きます &lt;code&gt;windows_verbatim=true&lt;/code&gt; は、コマンドラインを非標準的な方法で解析するプログラムを起動するのに役立ちます。Windows以外のシステムには影響しません。</target>
        </trans-unit>
        <trans-unit id="7b8aee3aafac635044e497c27a0514876ff35397" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;write(io, c)&lt;/code&gt;, in contrast, may emit an encoding depending on &lt;code&gt;typeof(c)&lt;/code&gt;, and &lt;code&gt;read(io, typeof(c))&lt;/code&gt; should read the same encoding as &lt;code&gt;write&lt;/code&gt;. New &lt;code&gt;AbstractChar&lt;/code&gt; types must provide their own implementations of &lt;code&gt;write&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;write(io, c)&lt;/code&gt; 対照的に、write（io、c）は &lt;code&gt;typeof(c)&lt;/code&gt; に応じてエンコーディングを出力し、 &lt;code&gt;read(io, typeof(c))&lt;/code&gt; は &lt;code&gt;write&lt;/code&gt; と同じエンコーディングを読み取る必要があります。新しい &lt;code&gt;AbstractChar&lt;/code&gt; 型は、 &lt;code&gt;write&lt;/code&gt; と &lt;code&gt;read&lt;/code&gt; 独自の実装を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="3fadd3731757e74adbe714a9fc3cde1b0f50d386" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x % T&lt;/code&gt; converts an integer &lt;code&gt;x&lt;/code&gt; to a value of integer type &lt;code&gt;T&lt;/code&gt; congruent to &lt;code&gt;x&lt;/code&gt; modulo &lt;code&gt;2^n&lt;/code&gt;, where &lt;code&gt;n&lt;/code&gt; is the number of bits in &lt;code&gt;T&lt;/code&gt;. In other words, the binary representation is truncated to fit.</source>
          <target state="translated">&lt;code&gt;x % T&lt;/code&gt; 、整数 &lt;code&gt;x&lt;/code&gt; を &lt;code&gt;2^n&lt;/code&gt; 法とする &lt;code&gt;x&lt;/code&gt; に一致する整数型 &lt;code&gt;T&lt;/code&gt; の値に変換します。ここで、 &lt;code&gt;n&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; のビット数です。言い換えると、バイナリ表現は、適合するように切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="90c41f1363237dda010ffbdcb1e50483f239fe01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x &amp;sdot; y&lt;/code&gt; (where &lt;code&gt;&amp;sdot;&lt;/code&gt; can be typed by tab-completing &lt;code&gt;\cdot&lt;/code&gt; in the REPL) is a synonym for &lt;code&gt;dot(x, y)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x &amp;sdot; y&lt;/code&gt; （ &lt;code&gt;&amp;sdot;&lt;/code&gt; はタブ完了することで入力できる &lt;code&gt;\cdot&lt;/code&gt; REPLでは）の同義語である &lt;code&gt;dot(x, y)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1a73d00c797f625743ed5be89aa6859e0e140e7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x*2^n&lt;/code&gt; computed efficiently for integer values of &lt;code&gt;n&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x*2^n&lt;/code&gt; 整数値に対して効率的に計算されるx * 2 ^ &lt;code&gt;n&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f1940ccb42a82ee4f57a9ef424ce506f2b4432f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a950a8c9e0c5cf38b19bf4e5268bb9ee46dfc69c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are identical</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; は同じです</target>
        </trans-unit>
        <trans-unit id="ab3ac69532931e0ece805a61f4c297980ed1e736" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; may also be arrays of numbers, in which case &lt;code&gt;norm&lt;/code&gt; defaults to the usual &lt;code&gt;norm&lt;/code&gt; function in LinearAlgebra, but may be changed by passing a &lt;code&gt;norm::Function&lt;/code&gt; keyword argument. (For numbers, &lt;code&gt;norm&lt;/code&gt; is the same thing as &lt;code&gt;abs&lt;/code&gt;.) When &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are arrays, if &lt;code&gt;norm(x-y)&lt;/code&gt; is not finite (i.e. &lt;code&gt;&amp;plusmn;Inf&lt;/code&gt; or &lt;code&gt;NaN&lt;/code&gt;), the comparison falls back to checking whether all elements of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are approximately equal component-wise.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; は数値の配列でもかまいません。その場合、 &lt;code&gt;norm&lt;/code&gt; はデフォルトでLinearAlgebraの通常の &lt;code&gt;norm&lt;/code&gt; 関数になりますが、 &lt;code&gt;norm::Function&lt;/code&gt; キーワード引数を渡すことで変更できます。 （数値の場合、 &lt;code&gt;norm&lt;/code&gt; は &lt;code&gt;abs&lt;/code&gt; と同じです。） &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; が配列の場合、 &lt;code&gt;norm(x-y)&lt;/code&gt; が有限でない場合（つまり、 &lt;code&gt;&amp;plusmn;Inf&lt;/code&gt; または &lt;code&gt;NaN&lt;/code&gt; ）、比較は、 &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; のすべての要素がコンポーネントごとにほぼ等しい。</target>
        </trans-unit>
        <trans-unit id="a48f8b3cde36a8ddf02a94dfeb998cab82856e48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; enables &quot;comment mode&quot;: whitespace is enabled except when escaped with &lt;code&gt;\&lt;/code&gt;, and &lt;code&gt;#&lt;/code&gt; is treated as starting a comment.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; は「コメントモード」を有効にします。 &lt;code&gt;\&lt;/code&gt; でエスケープされ、 &lt;code&gt;#&lt;/code&gt; がコメントの開始として扱われる場合を除いて、空白が有効になります。</target>
        </trans-unit>
        <trans-unit id="9b7e404002ef27b1a2197f45feec798673ffc690" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; is a finite number</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; は有限数です</target>
        </trans-unit>
        <trans-unit id="c0524cd745ecc91f2a8a799e342f5f682c7f1d35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; is infinite</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; は無限です</target>
        </trans-unit>
        <trans-unit id="47fb95081b3ce22a0b461fae81e21bbc77c62b2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;x&lt;/code&gt; is not a number</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; は数値ではありません</target>
        </trans-unit>
        <trans-unit id="bcdade3b450aacebe7ce055923202bb9a54acb72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;zip&lt;/code&gt; orders the calls to its subiterators in such a way that stateful iterators will not advance when another iterator finishes in the current iteration.</source>
          <target state="translated">&lt;code&gt;zip&lt;/code&gt; は、現在の反復で別のイテレータが終了したときにステートフルイテレータが進まないように、サブイテレータへの呼び出しを順序付けます。</target>
        </trans-unit>
        <trans-unit id="64a786472b355da8522bfc59ef4c0762b67c585b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;||&lt;/code&gt;Keyword</source>
          <target state="translated">&lt;code&gt;||&lt;/code&gt;Keyword</target>
        </trans-unit>
        <trans-unit id="54aac4fafe7a37588d94288478848558abaf1196" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;~/.julia&lt;/code&gt; where &lt;code&gt;~&lt;/code&gt; is the user home as appropriate on the system;</source>
          <target state="translated">&lt;code&gt;~/.julia&lt;/code&gt; ここで &lt;code&gt;~&lt;/code&gt; は、システム上の適切なユーザーの家です。</target>
        </trans-unit>
        <trans-unit id="e0376dc9fd7a8a47da8cd6fcc825a0caa36450a5" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;All&lt;/em&gt; functions are generic and use multiple dispatch. Argument lists don't have to follow the same template, which leads to a powerful idiom (see &lt;a href=&quot;../../base/base/index#do&quot;&gt;&lt;code&gt;do&lt;/code&gt;&lt;/a&gt;). Optional and keyword arguments are handled differently. Method ambiguities are not resolved like in the Common Lisp Object System, necessitating the definition of a more specific method for the intersection.</source>
          <target state="translated">&lt;em&gt;すべての&lt;/em&gt;関数は汎用であり、多重ディスパッチを使用します。引数リストは同じテンプレートに従う必要がないため、強力なイディオムになります（&lt;a href=&quot;../../base/base/index#do&quot;&gt; &lt;code&gt;do&lt;/code&gt; を&lt;/a&gt;参照）。オプション引数とキーワード引数の処理は異なります。Common Lisp Object Systemのようにメソッドのあいまいさは解決されないため、交差点に対してより具体的なメソッドを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="2df118c2fbb6c1d7ba0ff4dd87b88d00cf764a55" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Before&lt;/em&gt; loading any code, make sure you're running Revise: say &lt;code&gt;using Revise&lt;/code&gt; or follow its documentation on configuring it to run automatically.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;コードをロードする&lt;em&gt;前に&lt;/em&gt;、Reviseを実行していることを確認してください。Revise &lt;code&gt;using Revise&lt;/code&gt; か、ドキュメントに従って自動的に実行するように構成する方法を説明します。</target>
        </trans-unit>
        <trans-unit id="743bea8b6e02264a01bcef3ea67aed3f0cad8650" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Creating&lt;/em&gt; log events is the concern of the module author who needs to decide where events are triggered and which information to include.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;ログイベントの&lt;em&gt;作成&lt;/em&gt;は、イベントがトリガーされる場所と含める情報を決定する必要があるモジュール&lt;em&gt;作成&lt;/em&gt;者の関心事です。</target>
        </trans-unit>
        <trans-unit id="b124a7e86891727331d73882ce0c24f7eaafd8ac" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Don't copy these examples!&lt;/em&gt;</source>
          <target state="translated">&lt;em&gt;これらの例をコピーしないでください！&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1da7110d00e265f94760324ffd9a23c2410b52b7" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Implicit use&lt;/em&gt; of &lt;code&gt;x&lt;/code&gt; covers any indirect use of resources logically owned by &lt;code&gt;x&lt;/code&gt; which the compiler cannot see. Some examples:</source>
          <target state="translated">&lt;em&gt;暗黙の使用&lt;/em&gt;の &lt;code&gt;x&lt;/code&gt; は、論理的で所有するリソースのいずれかの間接的な使用網羅 &lt;code&gt;x&lt;/code&gt; コンパイラが見ることができません。いくつかの例：</target>
        </trans-unit>
        <trans-unit id="71cf9402e58fc3879fb68f8afe68b31dae06eee0" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;Processing&lt;/em&gt; of log events &amp;mdash; that is, display, filtering, aggregation and recording &amp;mdash; is the concern of the application author who needs to bring multiple modules together into a cooperating application.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;ログイベントの&lt;em&gt;処理&lt;/em&gt;（つまり、表示、フィルタリング、集約、および記録）は、複数のモジュールを連携するアプリケーションにまとめる必要があるアプリケーション作成者の関心事です。</target>
        </trans-unit>
        <trans-unit id="7685c1fa95d4518c2af3eb032fd247fef3129095" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;divide-and-conquer&lt;/em&gt; sort strategy.</source>
          <target state="translated">&lt;em&gt;分割統治&lt;/em&gt;ソート戦略。</target>
        </trans-unit>
        <trans-unit id="955d87cc46ecdddf5939b69f5d5e66211dd43025" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;divide-and-conquer&lt;/em&gt;: sort strategy similar to &lt;a href=&quot;#Base.Sort.MergeSort&quot;&gt;&lt;code&gt;MergeSort&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;分割統治&lt;/em&gt;：&lt;a href=&quot;#Base.Sort.MergeSort&quot;&gt; &lt;code&gt;MergeSort&lt;/code&gt; &lt;/a&gt;と同様のソート戦略。</target>
        </trans-unit>
        <trans-unit id="547c0f175b81af7715456826fa2ddb801ca75ea1" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;good performance&lt;/em&gt; for large collections.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;大規模なコレクションに&lt;em&gt;適したパフォーマンス&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="76e3721332fa8c80267a6d025e92a7b31c647f77" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;iid&lt;/em&gt;, independently and identically distributed.</source>
          <target state="translated">&lt;em&gt;iid&lt;/em&gt;、独立して同一に分散。</target>
        </trans-unit>
        <trans-unit id="4eecbf6b8e99fcad79c0f04ad8ffa79c56d8a143" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;in-place&lt;/em&gt; in memory.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;メモリ&lt;em&gt;内のインプレース&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="53b7f08036597cd9367e51ae64cec4b72d17fb7f" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;not in-place&lt;/em&gt; in memory.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;メモリ&lt;em&gt;内のインプレース&lt;/em&gt;で&lt;em&gt;はありません&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="69d8a8fdc356b8320c038747a06bcc5697c84ab8" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;not stable&lt;/em&gt;: does not preserve the ordering of elements which compare equal (e.g. &quot;a&quot; and &quot;A&quot; in a sort of letters which ignores case).</source>
          <target state="translated">&lt;em&gt;安定して&lt;/em&gt;いない：比較する要素の順序を保持しません（たとえば、大文字と小文字を無視する一種の文字の「a」と「A」）。</target>
        </trans-unit>
        <trans-unit id="bc0febd17aa71743548f98f48c43c546e1abfb04" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;quadratic performance&lt;/em&gt; in the number of elements to be sorted: it is well-suited to small collections but should not be used for large ones.</source>
          <target state="translated">&lt;em&gt;&lt;/em&gt;並べ替えられる要素の数の&lt;em&gt;2次パフォーマンス&lt;/em&gt;：小さなコレクションには適していますが、大きなコレクションには使用しないでください。</target>
        </trans-unit>
        <trans-unit id="a1491802554c00bcc7d066e787c837a325301ece" translate="yes" xml:space="preserve">
          <source>&lt;em&gt;stable&lt;/em&gt;: preserves the ordering of elements which compare equal (e.g. &quot;a&quot; and &quot;A&quot; in a sort of letters which ignores case).</source>
          <target state="translated">&lt;em&gt;stable&lt;/em&gt;：等しい要素の順序を保持&lt;em&gt;し&lt;/em&gt;ます（例：大文字と小文字を無視する一種の文字の &quot;a&quot;と &quot;A&quot;）。</target>
        </trans-unit>
        <trans-unit id="47450e33687d2bd35b73c1a40f6abb2479676524" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A package directory&lt;/strong&gt; is a directory containing the source trees of a set of packages as subdirectories, and forms an &lt;em&gt;implicit environment&lt;/em&gt;. If &lt;code&gt;X&lt;/code&gt; is a subdirectory of a package directory and &lt;code&gt;X/src/X.jl&lt;/code&gt; exists, then the package &lt;code&gt;X&lt;/code&gt; is available in the package directory environment and &lt;code&gt;X/src/X.jl&lt;/code&gt; is the source file by which it is loaded.</source>
          <target state="translated">&lt;strong&gt;パッケージディレクトリ&lt;/strong&gt;は、一連のパッケージのソースツリーをサブディレクトリとして含むディレクトリであり、&lt;em&gt;暗黙的な環境&lt;/em&gt;を形成し&lt;em&gt;ます&lt;/em&gt;。場合 &lt;code&gt;X&lt;/code&gt; は、パッケージディレクトリのサブディレクトリで、 &lt;code&gt;X/src/X.jl&lt;/code&gt; 存在する場合、パッケージ &lt;code&gt;X&lt;/code&gt; は、パッケージディレクトリ環境で利用可能で、 &lt;code&gt;X/src/X.jl&lt;/code&gt; 、それがロードされることにより、ソースファイルです。</target>
        </trans-unit>
        <trans-unit id="ab6e1278144bfe85f8b9792c5068eed40f8bd5eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A project environment&lt;/strong&gt; is a directory with a project file and an optional manifest file, and forms an &lt;em&gt;explicit environement&lt;/em&gt;. The project file determines what the names and identities of the direct dependencies of a project are. The manifest file, if present, gives a complete dependency graph, including all direct and indirect dependencies, exact versions of each dependency, and sufficient information to locate and load the correct version.</source>
          <target state="translated">&lt;strong&gt;プロジェクト環境&lt;/strong&gt;は、プロジェクトファイルとオプションのマニフェストファイルを含むディレクトリであり、&lt;em&gt;明示的な環境&lt;/em&gt;を形成します。プロジェクトファイルは、プロジェクトの直接的な依存関係の名前とIDを決定します。マニフェストファイルが存在する場合は、すべての直接および間接の依存関係、各依存関係の正確なバージョン、および正しいバージョンを見つけて読み込むための十分な情報を含む完全な依存関係グラフが提供されます。</target>
        </trans-unit>
        <trans-unit id="71e41c9cbdf8ac89f9996aae247a324d7f18b2e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;A project environment&lt;/strong&gt; is a directory with a project file and an optional manifest file, and forms an &lt;em&gt;explicit environment&lt;/em&gt;. The project file determines what the names and identities of the direct dependencies of a project are. The manifest file, if present, gives a complete dependency graph, including all direct and indirect dependencies, exact versions of each dependency, and sufficient information to locate and load the correct version.</source>
          <target state="translated">&lt;strong&gt;プロジェクト環境&lt;/strong&gt;は、プロジェクトファイルとオプションのマニフェストファイルを含むディレクトリであり、&lt;em&gt;明示的な環境&lt;/em&gt;を形成し&lt;em&gt;ます&lt;/em&gt;。プロジェクトファイルは、プロジェクトの直接の依存関係の名前とIDを決定します。マニフェストファイルが存在する場合は、すべての直接および間接の依存関係、各依存関係の正確なバージョン、および正しいバージョンを見つけてロードするための十分な情報を含む、完全な依存関係グラフを提供します。</target>
        </trans-unit>
        <trans-unit id="5dcf2f7a4986e6945bd060c2a9f0b685ebc4a479" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Automatic promotion for built-in arithmetic types and operators.&lt;/strong&gt; In most languages, built-in numeric types, when used as operands to arithmetic operators with infix syntax, such as &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, and &lt;code&gt;/&lt;/code&gt;, are automatically promoted to a common type to produce the expected results. C, Java, Perl, and Python, to name a few, all correctly compute the sum &lt;code&gt;1 + 1.5&lt;/code&gt; as the floating-point value &lt;code&gt;2.5&lt;/code&gt;, even though one of the operands to &lt;code&gt;+&lt;/code&gt; is an integer. These systems are convenient and designed carefully enough that they are generally all-but-invisible to the programmer: hardly anyone consciously thinks of this promotion taking place when writing such an expression, but compilers and interpreters must perform conversion before addition since integers and floating-point values cannot be added as-is. Complex rules for such automatic conversions are thus inevitably part of specifications and implementations for such languages.</source>
          <target state="translated">&lt;strong&gt;組み込みの算術型と演算子の自動昇格。&lt;/strong&gt;ほとんどの言語では、組み込み数値型は、 &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、 &lt;code&gt;/&lt;/code&gt; などのインフィックス構文の算術演算子のオペランドとして使用されると、期待される結果を生成するために自動的に共通の型に昇格されます。 C、Java、Perl、およびPythonを例にとると、オペランドの1つが &lt;code&gt;+&lt;/code&gt; であっても、合計 &lt;code&gt;1 + 1.5&lt;/code&gt; を浮動小数点値 &lt;code&gt;2.5&lt;/code&gt; として正しく計算します整数です。これらのシステムは便利で十分に注意深く設計されているため、プログラマーにはほとんど見えません。このような式を書くときに、誰もこのプロモーションが行われていることを意識することはほとんどありません。ポイント値をそのまま追加することはできません。したがって、そのような自動変換の複雑なルールは、必然的にそのような言語の仕様と実装の一部になります。</target>
        </trans-unit>
        <trans-unit id="40672dddf16a6430318b3eb0b9096db189222d38" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Brief description&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;簡単な説明&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="540bb8e1a8c92de3d9695826131a325154196169" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Broadcasting&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Broadcasting&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9f7d8aeead87b3699dcf3142b1e6dee864b1f9e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Bypassing default machinery&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;デフォルトの機械をバイパスする&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3c3f895628a42c1489009a0b0558d48806270adc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Code inclusion:&lt;/strong&gt; e.g. &lt;code&gt;include(&quot;source.jl&quot;)&lt;/code&gt;. Inclusion allows you to split a single program across multiple source files. The expression &lt;code&gt;include(&quot;source.jl&quot;)&lt;/code&gt; causes the contents of the file &lt;code&gt;source.jl&lt;/code&gt; to be evaluated in the global scope of the module where the &lt;code&gt;include&lt;/code&gt; call occurs. If &lt;code&gt;include(&quot;source.jl&quot;)&lt;/code&gt; is called multiple times, &lt;code&gt;source.jl&lt;/code&gt; is evaluated multiple times. The included path, &lt;code&gt;source.jl&lt;/code&gt;, is interpreted relative to the file where the &lt;code&gt;include&lt;/code&gt; call occurs. This makes it simple to relocate a subtree of source files. In the REPL, included paths are interpreted relative to the current working directory, &lt;a href=&quot;../../base/file/index#Base.Filesystem.pwd&quot;&gt;&lt;code&gt;pwd()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;コードのインクルード：&lt;/strong&gt;例： &lt;code&gt;include(&quot;source.jl&quot;)&lt;/code&gt; 。インクルージョンを使用すると、1つのプログラムを複数のソースファイルに分割できます。式 &lt;code&gt;include(&quot;source.jl&quot;)&lt;/code&gt; により、ファイル &lt;code&gt;source.jl&lt;/code&gt; の内容が、 &lt;code&gt;include&lt;/code&gt; 呼び出しが発生するモジュールのグローバルスコープで評価されます。場合 &lt;code&gt;include(&quot;source.jl&quot;)&lt;/code&gt; 、複数回呼び出され &lt;code&gt;source.jl&lt;/code&gt; 複数回評価されます。インクルードパス &lt;code&gt;source.jl&lt;/code&gt; は、 &lt;code&gt;include&lt;/code&gt; コールが発生するファイルに対して相対的に解釈されます。これにより、ソースファイルのサブツリーを簡単に再配置できます。 REPLでは、インクルードパスは現在の作業ディレクトリを基準にして解釈されます。&lt;a href=&quot;../../base/file/index#Base.Filesystem.pwd&quot;&gt; &lt;code&gt;pwd()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="01b2956aa02b611eba1c44ae4666e386f9a69158" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Conversion between linear and cartesian indices&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;線形インデックスとデカルトインデックス間の変換&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8981b2e89255132713afc6ec39691c7bdea5024d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Cursor movement&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;カーソル移動&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7f5b988cb89cb4ede6b56c1271511dfc59d67ac0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Default definition&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;デフォルトの定義&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1c863333a531bcda45cde640d9c35956bb33378" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Editing&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Editing&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9c838c65ad1ba4b74d30de6df9d506f5e2b0ac9d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Everything else&lt;/strong&gt;. Any other arguments.</source>
          <target state="translated">&lt;strong&gt;他のすべて&lt;/strong&gt;。その他の引数。</target>
        </trans-unit>
        <trans-unit id="4168878b06eaa6917a0f012585506612f5054ea6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bce3f4a409dc0c67054a7e806ad3eecf69f742f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Example&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Example&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5c3d140c8e464f134cec3b0eebd38bf683f55d62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Examples&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Examples&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aec29b6e22750bc511d0ca82430cb4a126753e79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Examples&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;Examples&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="19683dd3d8903f638a6b291d6c9f28ca79e6c660" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Existing local:&lt;/strong&gt; If &lt;code&gt;x&lt;/code&gt; is &lt;em&gt;already a local variable&lt;/em&gt;, then the existing local &lt;code&gt;x&lt;/code&gt; is assigned;</source>
          <target state="translated">&lt;strong&gt;地元の既存：&lt;/strong&gt;場合は &lt;code&gt;x&lt;/code&gt; ある&lt;em&gt;、すでにローカル変数&lt;/em&gt;は、既存のローカル &lt;code&gt;x&lt;/code&gt; が割り当てられます。</target>
        </trans-unit>
        <trans-unit id="3c9102cd5f3ec81f62379dfb14e7e329a015e35f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Extensions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Extensions&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9a9d05122489d09030ff3668a78437ee26a3f82b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;External links&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;外部リンク&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="83e0b267355d0c11ea2a53fe10c727c43451c8c7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Floating-point types:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;浮動小数点型：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9a16a8e8a484df94b3401f2c14b02422be6ca3e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Function argument&lt;/strong&gt;. Putting a function argument first permits the use of &lt;a href=&quot;../../base/base/index#do&quot;&gt;&lt;code&gt;do&lt;/code&gt;&lt;/a&gt; blocks for passing multiline anonymous functions.</source>
          <target state="translated">&lt;strong&gt;関数の引数&lt;/strong&gt;。関数の引数を最初に置くと、&lt;a href=&quot;../../base/base/index#do&quot;&gt; &lt;code&gt;do&lt;/code&gt; &lt;/a&gt;ブロックを使用して複数行の無名関数を渡すことができます。</target>
        </trans-unit>
        <trans-unit id="7ec40a2f0a30b472e6c7208cfd9385764834e554" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Hard scope:&lt;/strong&gt; If &lt;code&gt;x&lt;/code&gt; is &lt;em&gt;not already a local variable&lt;/em&gt; and assignment occurs inside of any hard scope construct (i.e. within a let block, function or macro body, comprehension, or generator), a new local named &lt;code&gt;x&lt;/code&gt; is created in the scope of the assignment;</source>
          <target state="translated">&lt;strong&gt;ハードスコープ：&lt;/strong&gt;場合は &lt;code&gt;x&lt;/code&gt; ある&lt;em&gt;まだないローカル変数&lt;/em&gt;と代入が任意のハードスコープ（すなわちLETブロック、関数やマクロ本体内で、理解力、または発電機）構造物の内部に発生した、新しいローカルの名前付き &lt;code&gt;x&lt;/code&gt; の範囲内に作成されます割り当て;</target>
        </trans-unit>
        <trans-unit id="1ca787ea86b26829b090b38d91fb7a76042f2799" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Higher dimensional examples&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;高次元の例&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b6a830a0dff55184e4ece6c75f5be5491d3d9702" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Higher dimensions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;高次元&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f0fb2b5df39867dacb9671eb2a360e55518f879f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;I/O stream&lt;/strong&gt;. Specifying the &lt;code&gt;IO&lt;/code&gt; object first permits passing the function to functions such as &lt;a href=&quot;../../base/io-network/index#Base.sprint&quot;&gt;&lt;code&gt;sprint&lt;/code&gt;&lt;/a&gt;, e.g. &lt;code&gt;sprint(show, x)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;I / Oストリーム&lt;/strong&gt;。 &lt;code&gt;IO&lt;/code&gt; オブジェクトを指定すると、最初に関数を&lt;a href=&quot;../../base/io-network/index#Base.sprint&quot;&gt; &lt;code&gt;sprint&lt;/code&gt; &lt;/a&gt;などの関数に渡すことができます &lt;code&gt;sprint(show, x)&lt;/code&gt; 例：sprint（show、x））。</target>
        </trans-unit>
        <trans-unit id="45650bbd2deb4cc345f368e53f1b5e765a99a0a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Implementation&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Implementation&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e6981e39179d49e3bc1edb6f6043ddc4d3a9c17e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Important optional methods&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;重要なオプションの方法&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="feaf5b204440e5d7b91a26fca33465989ee60de5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Input being mutated&lt;/strong&gt;. For example, in &lt;a href=&quot;../../base/arrays/index#Base.fill!&quot;&gt;&lt;code&gt;fill!(x, v)&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;x&lt;/code&gt; is the object being mutated and it appears before the value to be inserted into &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;変異する入力&lt;/strong&gt;。例えば、中&lt;a href=&quot;../../base/arrays/index#Base.fill!&quot;&gt; &lt;code&gt;fill!(x, v)&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;x&lt;/code&gt; オブジェクトが変異し、その値が挿入される前に、それが表示されている &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="35035aa4af72e7ec2407cb311a13aa4b3f4086e9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Input not being mutated&lt;/strong&gt;. In &lt;code&gt;fill!(x, v)&lt;/code&gt;, &lt;code&gt;v&lt;/code&gt; is &lt;em&gt;not&lt;/em&gt; being mutated and it comes after &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;入力は変化していません&lt;/strong&gt;。 &lt;code&gt;fill!(x, v)&lt;/code&gt; 、 &lt;code&gt;v&lt;/code&gt; がされて&lt;em&gt;いない&lt;/em&gt;変異されて、それが後に来る &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="96c1aac8a2ffe99a6f68662d283f199e4c7902db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Integer types:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;整数型：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a5b0deb4e2e9417b81879cdc846953811ed3197f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Key&lt;/strong&gt;. For associative collections, this is the key of the key-value pair(s). For other indexed collections, this is the index.</source>
          <target state="translated">&lt;strong&gt;キー&lt;/strong&gt;。連想コレクションの場合、これはキーと値のペアのキーです。他のインデックス付きコレクションの場合、これはインデックスです。</target>
        </trans-unit>
        <trans-unit id="ff1552788ed9b7867471169f6f6e13e67ae56e49" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Keyword Arguments&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;キーワード引数&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c6d1fbca2eaaca33fbedfae851b1718e81cb621c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Keyword arguments&lt;/strong&gt;. In Julia keyword arguments have to come last anyway in function definitions; they're listed here for the sake of completeness.</source>
          <target state="translated">&lt;strong&gt;キーワード引数&lt;/strong&gt;。Juliaでは、キーワード引数は関数定義でとにかく最後に来る必要があります。完全を期すために、ここにリストされています。</target>
        </trans-unit>
        <trans-unit id="940941ba13fb5db6a5ccc6b2d81447af0218c6f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Keywords&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Keywords&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="739565cef16139694d18e4e833e383d92f6229e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Lather. Rinse. Repeat.&lt;/strong&gt; Explore ideas at the &lt;code&gt;julia&lt;/code&gt; command prompt. Save good ideas in &lt;code&gt;tst.jl&lt;/code&gt;. To execute &lt;code&gt;tst.jl&lt;/code&gt; after it has been changed, just &lt;code&gt;include&lt;/code&gt; it again.</source>
          <target state="translated">&lt;strong&gt;泡。リンス。繰り返す。&lt;/strong&gt; &lt;code&gt;julia&lt;/code&gt; コマンドプロンプトでアイデアを探索します。良いアイデアを &lt;code&gt;tst.jl&lt;/code&gt; に保存します。変更後の &lt;code&gt;tst.jl&lt;/code&gt; を実行するに &lt;code&gt;include&lt;/code&gt; 、再度インクルードするだけです。</target>
        </trans-unit>
        <trans-unit id="062ff7c1f91aac8affdefeef654af299368b137e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;No automatic promotion.&lt;/strong&gt; This camp includes Ada and ML &amp;ndash; very &quot;strict&quot; statically typed languages. In these languages, every conversion must be explicitly specified by the programmer. Thus, the example expression &lt;code&gt;1 + 1.5&lt;/code&gt; would be a compilation error in both Ada and ML. Instead one must write &lt;code&gt;real(1) + 1.5&lt;/code&gt;, explicitly converting the integer &lt;code&gt;1&lt;/code&gt; to a floating-point value before performing addition. Explicit conversion everywhere is so inconvenient, however, that even Ada has some degree of automatic conversion: integer literals are promoted to the expected integer type automatically, and floating-point literals are similarly promoted to appropriate floating-point types.</source>
          <target state="translated">&lt;strong&gt;自動プロモーションはありません。&lt;/strong&gt;このキャンプには、AdaとMLが含まれています。これは、非常に「厳密な」静的型付け言語です。これらの言語では、すべての変換をプログラマーが明示的に指定する必要があります。したがって、例の式 &lt;code&gt;1 + 1.5&lt;/code&gt; は、AdaとMLの両方でコンパイルエラーになります。代わりに、 &lt;code&gt;real(1) + 1.5&lt;/code&gt; 記述して、加算を実行する前に整数 &lt;code&gt;1&lt;/code&gt; を浮動小数点値に明示的に変換する必要があります。あらゆる場所での明示的な変換は非常に不便ですが、Adaでもある程度の自動変換があります。整数リテラルは期待される整数型に自動的に昇格され、浮動小数点リテラルも同様に適切な浮動小数点型に昇格されます。</target>
        </trans-unit>
        <trans-unit id="19f000a09892ceb4a24beccfa194f3fb0e83a418" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Non-traditional indices&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;非伝統的な指標&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d3411b52319b78e51339257b20de47be2deece6a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: Due to the specifics of the &lt;code&gt;libgit2&lt;/code&gt; authentication procedure, when authentication fails, this function is called again without any indication whether authentication was successful or not. To avoid an infinite loop from repeatedly using the same faulty credentials, we will keep track of state using the payload.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;： &lt;code&gt;libgit2&lt;/code&gt; 認証手順の詳細により、認証が失敗すると、認証が成功したかどうかを示すことなく、この関数が再度呼び出されます。無限ループが同じ誤った資格情報を繰り返し使用しないようにするために、ペイロードを使用して状態を追跡します。</target>
        </trans-unit>
        <trans-unit id="9305d29fbc35afa9e63a3c399be778dee6ddefff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Note&lt;/strong&gt;: This section covers embedding Julia code in C on Unix-like operating systems. For doing this on Windows, please see the section following this.</source>
          <target state="translated">&lt;strong&gt;注&lt;/strong&gt;：このセクションでは、UnixライクなオペレーティングシステムでのJuliaコードのCへの埋め込みについて説明します。Windowsでこれを行うには、次のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="fbff1879231e49a20a9f4f3abc431b43d8a6387c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Optional methods&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;オプションの方法&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9fb86f3d0dc24e6e4655476741634ef5c5d50df1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Package loading:&lt;/strong&gt; e.g. &lt;code&gt;import X&lt;/code&gt; or &lt;code&gt;using X&lt;/code&gt;. The import mechanism allows you to load a package&amp;mdash;i.e. an independent, reusable collection of Julia code, wrapped in a module&amp;mdash;and makes the resulting module available by the name &lt;code&gt;X&lt;/code&gt; inside of the importing module. If the same &lt;code&gt;X&lt;/code&gt; package is imported multiple times in the same Julia session, it is only loaded the first time&amp;mdash;on subsequent imports, the importing module gets a reference to the same module. Note though, that &lt;code&gt;import X&lt;/code&gt; can load different packages in different contexts: &lt;code&gt;X&lt;/code&gt; can refer to one package named &lt;code&gt;X&lt;/code&gt; in the main project but potentially to different packages also named &lt;code&gt;X&lt;/code&gt; in each dependency. More on this below.</source>
          <target state="translated">&lt;strong&gt;パッケージの読み込み：&lt;/strong&gt;例 &lt;code&gt;import X&lt;/code&gt; または &lt;code&gt;using X&lt;/code&gt; 。インポートメカニズムを使用すると、パッケージ（つまり、モジュールにラップされた、Juliaコードの独立した再利用可能なコレクション）をロードし、結果のモジュールをインポートモジュール内の名前 &lt;code&gt;X&lt;/code&gt; で利用できるようになります。同じ &lt;code&gt;X&lt;/code&gt; パッケージが同じJuliaセッションで複数回インポートされる場合、最初にのみロードされます。後続のインポートでは、インポートモジュールは同じモジュールへの参照を取得します。 、そのかかわらず、注意 &lt;code&gt;import X&lt;/code&gt; 異なるコンテキストで異なるパッケージをロードすることができます： &lt;code&gt;X&lt;/code&gt; は、名前の一つのパッケージを参照することができます &lt;code&gt;X&lt;/code&gt; のメインプロジェクトではなく、潜在的にも名前の異なるパッケージに &lt;code&gt;X&lt;/code&gt; 各依存関係で。これについては、以下で詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="fd7c146c235ccd96ea634cfca88f3355f9e6c234" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Program control&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;プログラム制御&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a191672dfe99327da9dff700b45c0a90a2ec39c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Put code under development in a temporary module.&lt;/strong&gt; Create a file, say &lt;code&gt;Tmp.jl&lt;/code&gt;, and include within it</source>
          <target state="translated">&lt;strong&gt;開発中のコードを一時モジュールに入れます。&lt;/strong&gt; &lt;code&gt;Tmp.jl&lt;/code&gt; というファイルを作成し、その中に含めます</target>
        </trans-unit>
        <trans-unit id="4eebb852c621ba2a07cde7c387d74387c1073db2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Put your test code in another file.&lt;/strong&gt; Create another file, say &lt;code&gt;tst.jl&lt;/code&gt;, which looks like</source>
          <target state="translated">&lt;strong&gt;テストコードを別のファイルに配置します。&lt;/strong&gt;次のような別のファイル、たとえば &lt;code&gt;tst.jl&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="762b0b987efcf101541560526e8d90e402907514" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;References&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;References&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="261a3928dc6c3e62bad4f4dc9c5ff983868f3948" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;See also&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;こちらもご覧ください&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="36121b3eefd78b60d0003f60318af0689a90639e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Soft scope:&lt;/strong&gt; If &lt;code&gt;x&lt;/code&gt; is &lt;em&gt;not already a local variable&lt;/em&gt; and all of the scope constructs containing the assignment are soft scopes (loops, &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; blocks, or &lt;code&gt;struct&lt;/code&gt; blocks), the behavior depends on whether the global variable &lt;code&gt;x&lt;/code&gt; is defined:</source>
          <target state="translated">&lt;strong&gt;ソフトスコープ：&lt;/strong&gt;場合は &lt;code&gt;x&lt;/code&gt; ある&lt;em&gt;ローカル変数が存在していない&lt;/em&gt;と割り当てを含むスコープ構築物のすべてがソフトスコープ（ループ、ある &lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; ブロック、または &lt;code&gt;struct&lt;/code&gt; ブロック）、動作はグローバル変数かどうかに依存し &lt;code&gt;x&lt;/code&gt; 定義されています。</target>
        </trans-unit>
        <trans-unit id="b3021827c46a7ed515f5246c6017d78d244ed6bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;System Dependent Types&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;システム依存型&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="608f32cb9eef948fcb1ef6e535b6635c88420101" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;System Independent Types&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;システムに依存しないタイプ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="76a6a8a34ed60528197f028d9fedecb6c66b4c1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;System Independent:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;システムに依存しない：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="212d71ac9a214ae43f2cb6533589aa526743d53d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;System-dependent:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;System-dependent:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="62fabcca68af5e84228e26aadaf1eb51caedddfe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The dependency graph&lt;/strong&gt; of a project directory is determined by the presence and contents of project files in the subdirectory of each package. The rules are:</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;プロジェクトディレクトリ&lt;strong&gt;の依存関係グラフ&lt;/strong&gt;は、各パッケージのサブディレクトリにあるプロジェクトファイルの存在と内容によって決まります。ルールは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="35fd5fb379b76233f79b688e018757619277e941" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The dependency graph&lt;/strong&gt; of a project environment is determined by the contents of the manifest file, if present. If there is no manifest file, graph is empty. A manifest file contains a stanza for each of a project's direct or indirect dependencies. For each dependency, the file lists the package's UUID and a source tree hash or an explicit path to the source code. Consider the following example manifest file for &lt;code&gt;App&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;プロジェクト環境&lt;strong&gt;の依存関係グラフ&lt;/strong&gt;は、存在する場合、マニフェストファイルの内容によって決定されます。マニフェストファイルがない場合、グラフは空です。マニフェストファイルには、プロジェクトの直接的または間接的な依存関係のそれぞれに対するスタンザが含まれています。依存関係ごとに、ファイルにはパッケージのUUIDとソースツリーハッシュまたはソースコードへの明示的なパスがリストされます。 &lt;code&gt;App&lt;/code&gt; の次のマニフェストファイルの例を考えてみます。</target>
        </trans-unit>
        <trans-unit id="99a933b1a5fc31f0c493bc7563a8e1ef2ab60637" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The key point here is that Julia code is internally represented as a data structure that is accessible from the language itself.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ここでの要点は、Juliaコードは、言語自体からアクセス可能なデータ構造として内部的に表現されていることです。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4ec20ee36876b86777c4834a05d78e1ed0df59a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The paths map&lt;/strong&gt; in a package directory is simple: it maps subdirectory names to their corresponding entry-point paths. In other words, if the path to our example project directory is &lt;code&gt;/home/me/animals&lt;/code&gt; then the &lt;code&gt;paths&lt;/code&gt; map could be represented by this dictionary:</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;パッケージディレクトリ&lt;strong&gt;のパスマップ&lt;/strong&gt;は単純です。サブディレクトリ名を対応するエントリポイントパスにマップします。つまり、サンプルプロジェクトディレクトリへのパスが &lt;code&gt;/home/me/animals&lt;/code&gt; の場合、 &lt;code&gt;paths&lt;/code&gt; マップは次のディクショナリで表すことができます。</target>
        </trans-unit>
        <trans-unit id="7176439c445de46708b9fc3e70d97730d2317fd8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The paths map&lt;/strong&gt; of a project environment is extracted from the manifest file. The path of a package &lt;code&gt;uuid&lt;/code&gt; named &lt;code&gt;X&lt;/code&gt; is determined by these rules (in order):</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;プロジェクト環境&lt;strong&gt;のパスマップ&lt;/strong&gt;は、マニフェストファイルから抽出されます。 &lt;code&gt;X&lt;/code&gt; という名前のパッケージ &lt;code&gt;uuid&lt;/code&gt; のパスは、次の規則によって（順番に）決定されます。</target>
        </trans-unit>
        <trans-unit id="d3d291e6a57a7e987da705641960c2e565ce87e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The roots map&lt;/strong&gt; is determined by examining the contents of the package directory to generate a list of all packages that exist. Additionally, a UUID will be assigned to each entry as follows: For a given package found inside the folder &lt;code&gt;X&lt;/code&gt;...</source>
          <target state="translated">&lt;strong&gt;ルートマップ&lt;/strong&gt;は、パッケージディレクトリの内容を調べて、存在するすべてのパッケージのリストを生成することによって決定されます。さらに、UUIDは次のように各エントリに割り当てられます。フォルダ &lt;code&gt;X&lt;/code&gt; 内にある特定のパッケージについて...</target>
        </trans-unit>
        <trans-unit id="cd6e60a191a6ba1c08e90279b391c492d145ca70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The roots map&lt;/strong&gt; of the environment is determined by the contents of the project file, specifically, its top-level &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;uuid&lt;/code&gt; entries and its &lt;code&gt;[deps]&lt;/code&gt; section (all optional). Consider the following example project file for the hypothetical application, &lt;code&gt;App&lt;/code&gt;, as described earlier:</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;環境&lt;strong&gt;のルートマップ&lt;/strong&gt;は、プロジェクトファイルの内容、具体的には最上位の &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;uuid&lt;/code&gt; エントリ、およびその &lt;code&gt;[deps]&lt;/code&gt; セクション（すべてオプション）によって決定されます。前述のように、架空のアプリケーション &lt;code&gt;App&lt;/code&gt; の次のサンプルプロジェクトファイルを考えます。</target>
        </trans-unit>
        <trans-unit id="fda932e2af71b43d983578e7c22d5ddfec83e11d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;. Passing a type typically means that the output will have the given type. In &lt;a href=&quot;../../base/numbers/index#Base.parse&quot;&gt;&lt;code&gt;parse(Int, &quot;1&quot;)&lt;/code&gt;&lt;/a&gt;, the type comes before the string to parse. There are many such examples where the type appears first, but it's useful to note that in &lt;a href=&quot;../../base/io-network/index#Base.read&quot;&gt;&lt;code&gt;read(io, String)&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;IO&lt;/code&gt; argument appears before the type, which is in keeping with the order outlined here.</source>
          <target state="translated">&lt;strong&gt;と入力し&lt;/strong&gt;ます。タイプを渡すことは、通常、出力が指定されたタイプになることを意味します。では&lt;a href=&quot;../../base/numbers/index#Base.parse&quot;&gt; &lt;code&gt;parse(Int, &quot;1&quot;)&lt;/code&gt; &lt;/a&gt;の文字列を解析する前に、タイプが付属しています。タイプが最初に現れるそのような例はたくさんありますが、&lt;a href=&quot;../../base/io-network/index#Base.read&quot;&gt; &lt;code&gt;read(io, String)&lt;/code&gt; &lt;/a&gt;では、 &lt;code&gt;IO&lt;/code&gt; 引数がタイプの前に表示されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b586fc911b064b4cf7b9cf3a61a4f379ea0edfb7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use in broadcasting&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;放送での使用&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1eab55c50210340cd0c0df6a7519baa6abc6fcb9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Value&lt;/strong&gt;. For associative collections, this is the value of the key-value pair(s). In cases like &lt;a href=&quot;../../base/arrays/index#Base.fill!&quot;&gt;&lt;code&gt;fill!(x, v)&lt;/code&gt;&lt;/a&gt;, this is &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;値&lt;/strong&gt;。連想コレクションの場合、これはキーと値のペアの値です。&lt;a href=&quot;../../base/arrays/index#Base.fill!&quot;&gt; &lt;code&gt;fill!(x, v)&lt;/code&gt; &lt;/a&gt;ような場合、これは &lt;code&gt;v&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="93eadc871861400a6078e0c61f3521be0b3a0f8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Value&lt;/strong&gt;. For associative collections, this is the value of the key-value pair(s). In cases like &lt;code&gt;fill!(x, v)&lt;/code&gt;, this is &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;値&lt;/strong&gt;。連想コレクションの場合、これはキーと値のペアの値です。 &lt;code&gt;fill!(x, v)&lt;/code&gt; ような場合、これは &lt;code&gt;v&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e5d0e0a9d5ca3af4a899d7c1e28f16c0a7bba6fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Varargs&lt;/strong&gt;. This refers to arguments that can be listed indefinitely at the end of a function call. For example, in &lt;code&gt;Matrix{T}(undef, dims)&lt;/code&gt;, the dimensions can be given as a &lt;a href=&quot;../../base/base/index#Core.Tuple&quot;&gt;&lt;code&gt;Tuple&lt;/code&gt;&lt;/a&gt;, e.g. &lt;code&gt;Matrix{T}(undef, (1,2))&lt;/code&gt;, or as &lt;a href=&quot;../../base/base/index#Core.Vararg&quot;&gt;&lt;code&gt;Vararg&lt;/code&gt;&lt;/a&gt;s, e.g. &lt;code&gt;Matrix{T}(undef, 1, 2)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;Varargs&lt;/strong&gt;。これは、関数呼び出しの最後に無期限にリストできる引数を指します。たとえば、 &lt;code&gt;Matrix{T}(undef, dims)&lt;/code&gt; では、次元は&lt;a href=&quot;../../base/base/index#Core.Tuple&quot;&gt; &lt;code&gt;Tuple&lt;/code&gt; &lt;/a&gt;、たとえば &lt;code&gt;Matrix{T}(undef, (1,2))&lt;/code&gt; として、または&lt;a href=&quot;../../base/base/index#Core.Vararg&quot;&gt; &lt;code&gt;Vararg&lt;/code&gt; &lt;/a&gt; s、たとえば &lt;code&gt;Matrix{T}(undef, 1, 2)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="545631b4b295bbbbaed02465401d0864d0ba7cd1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What code will this generate?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;これによりどのコードが生成されますか？&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c3b9ef5ff046429380c724127c17394868104ef2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;What happens next?&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;次は何が起こる？&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d0ff7b4939bf14804a87f9610d1e80a40b4a40b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[1]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[1]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b12835c0c0b2c5b88b2a8e731d5eb2b1969e8e6c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[2]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[2]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a1a83d04dbd981bd8fe4ab619b42f958ca751fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[AH12]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[AH12]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b43d748a54903580e1f21b7242d8d7bb7c4a651a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[AH16_1]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[AH16_1]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1a356e5ff840b60f1a7fd81a3055863d97b69c77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[AH16_2]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[AH16_2]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="06b68ee69a50f3609b2ad16980f29687180123ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[AH16_3]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[AH16_3]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a85a3aeb27ca57bd4a8e009398c96aa33508ed10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[AH16_4]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[AH16_4]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ddd2e496892d30147f2d48e88aa633252774dbf0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[AH16_5]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[AH16_5]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8ddc74cbd626ac29e02b601b534c540a40ab5c0e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[AH16_6]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[AH16_6]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e97166948a5a3dd11986acbec9fbe6e3cecc60a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[AHR13]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[AHR13]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="65bccd8483458eb47f0cf100e59d18c925a72cfd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[B96]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[B96]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c87f94a30b3537fd21ece46a3be3dc64a62b55b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[BH83]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[BH83]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="11b1b49422b93ae8106416d25659e6c4a205faf3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[Bischof1987]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[Bischof1987]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="27d14e168d4fa4ad2378bdf18be346c186cebb91" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[Bunch1977]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[Bunch1977]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2a39f9cf2c50ef187780e440b9a6f2239b055ca1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[Clarke61]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[Clarke61]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d6c9f7af37c9c1abf3d2cee7bcb7b4328414a23f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[H05]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[H05]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="86010be2d69f415c30df7072124ec31548c70f03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[KY88]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[KY88]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="95c6fae5f939df06b7b59cc5c966b9329d025d70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[S84]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[S84]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aa6c947d8396f46ae50ccb15050b140acd93e682" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[Schreiber1989]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[Schreiber1989]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="274fa9920703743f7af11b5a3280a2a8b5492b20" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[issue8859]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[issue8859]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="deb59e9858773588134a730e8495054b325e35ab" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;graph:&lt;/strong&gt;&lt;code&gt;context::UUID&lt;/code&gt; ⟶ &lt;code&gt;name::Symbol&lt;/code&gt; ⟶ &lt;code&gt;uuid::UUID&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;グラフ：&lt;/strong&gt; &lt;code&gt;context::UUID&lt;/code&gt; UUID⟶ &lt;code&gt;name::Symbol&lt;/code&gt; Symbol⟶uuid &lt;code&gt;uuid::UUID&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="da29c13a3741ca50b24df3f7e215f047cc6fe3b1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;malloc/free&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;malloc/free&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7cc5e4770f37b853a29d3b06890d6a4abca810ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;paths:&lt;/strong&gt;&lt;code&gt;uuid::UUID&lt;/code&gt; &amp;times; &lt;code&gt;name::Symbol&lt;/code&gt; ⟶ &lt;code&gt;path::String&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;パス：&lt;/strong&gt; &lt;code&gt;uuid::UUID&lt;/code&gt; &amp;times; &lt;code&gt;name::Symbol&lt;/code&gt; ⟶ &lt;code&gt;path::String&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e060769be59aa948e668dd91db6570aedd04731c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;roots:&lt;/strong&gt;&lt;code&gt;name::Symbol&lt;/code&gt; ⟶ &lt;code&gt;uuid::UUID&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;roots：&lt;/strong&gt; &lt;code&gt;name::Symbol&lt;/code&gt; Symbol⟶uuid &lt;code&gt;uuid::UUID&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ec6dd4d3b2fc9b4797a8648dcfb6a94dffc781ff" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;4.0 &lt;i&gt;i&lt;/i&gt;&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;4.0 &lt;i&gt;i&lt;/i&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="21606782c65e44cac7afbb90977d8b6f82140e76" translate="yes" xml:space="preserve">
          <source>=</source>
          <target state="translated">=</target>
        </trans-unit>
        <trans-unit id="4b5fcf2420327f83a4a6033c345a55bd47a95680" translate="yes" xml:space="preserve">
          <source>==()</source>
          <target state="translated">==()</target>
        </trans-unit>
        <trans-unit id="924d44730ffe4a504a8c5b50688254e4e4997e86" translate="yes" xml:space="preserve">
          <source>@__DIR__</source>
          <target state="translated">@__DIR__</target>
        </trans-unit>
        <trans-unit id="bd05d820a39cc57788c144db33dd9e5d64bc802d" translate="yes" xml:space="preserve">
          <source>@__FILE__</source>
          <target state="translated">@__FILE__</target>
        </trans-unit>
        <trans-unit id="0a7e2fb02c2ce1b02c47c60a07b07cab4fff90c0" translate="yes" xml:space="preserve">
          <source>@__LINE__</source>
          <target state="translated">@__LINE__</target>
        </trans-unit>
        <trans-unit id="cc0701eaddfdfad8a65ef41e959c8e4f27062811" translate="yes" xml:space="preserve">
          <source>@__MODULE__</source>
          <target state="translated">@__MODULE__</target>
        </trans-unit>
        <trans-unit id="0662c8864fe3f1ee3b1e0fb430b61c3e64455909" translate="yes" xml:space="preserve">
          <source>@allocated</source>
          <target state="translated">@allocated</target>
        </trans-unit>
        <trans-unit id="521dba9e02174468f68a0b805b470b64bd37b2ab" translate="yes" xml:space="preserve">
          <source>@assert</source>
          <target state="translated">@assert</target>
        </trans-unit>
        <trans-unit id="3b7c965e962f36eb0e6c472eea82392cdc514ade" translate="yes" xml:space="preserve">
          <source>@async</source>
          <target state="translated">@async</target>
        </trans-unit>
        <trans-unit id="e9bfca0d6780244df737a5f488a11f321a4e3e28" translate="yes" xml:space="preserve">
          <source>@b_str</source>
          <target state="translated">@b_str</target>
        </trans-unit>
        <trans-unit id="f0925e6a5b16433b144a470019c1c0dd5de55e2d" translate="yes" xml:space="preserve">
          <source>@boundscheck</source>
          <target state="translated">@boundscheck</target>
        </trans-unit>
        <trans-unit id="4c462c8f8efc0e427cbc1cf6bea236a9cc0c83e0" translate="yes" xml:space="preserve">
          <source>@cfunction</source>
          <target state="translated">@cfunction</target>
        </trans-unit>
        <trans-unit id="4edd1d89ba51e67e5cde36c993ecbd6d4257872d" translate="yes" xml:space="preserve">
          <source>@deprecate</source>
          <target state="translated">@deprecate</target>
        </trans-unit>
        <trans-unit id="c460a7d72a405ba1e96118402a7742091a82dc52" translate="yes" xml:space="preserve">
          <source>@elapsed</source>
          <target state="translated">@elapsed</target>
        </trans-unit>
        <trans-unit id="34bfbc0fb605f42aad89cbd346daff31c66f5b0e" translate="yes" xml:space="preserve">
          <source>@eval</source>
          <target state="translated">@eval</target>
        </trans-unit>
        <trans-unit id="0ce3f8c769d6a2e9b95a931f13c7916418581d1b" translate="yes" xml:space="preserve">
          <source>@generated</source>
          <target state="translated">@generated</target>
        </trans-unit>
        <trans-unit id="d7621df9275358d3c30a2cfd8844f4521261ee73" translate="yes" xml:space="preserve">
          <source>@gensym</source>
          <target state="translated">@gensym</target>
        </trans-unit>
        <trans-unit id="a443a35e19dcd1ec15e45404c7ffcdeb21fd2474" translate="yes" xml:space="preserve">
          <source>@goto</source>
          <target state="translated">@goto</target>
        </trans-unit>
        <trans-unit id="19d47413bcaa88444056e76c473085f6a1b72db9" translate="yes" xml:space="preserve">
          <source>@inbounds</source>
          <target state="translated">@inbounds</target>
        </trans-unit>
        <trans-unit id="b5cf25ca00c54f41be13cd9463b582cceefc51b6" translate="yes" xml:space="preserve">
          <source>@inline</source>
          <target state="translated">@inline</target>
        </trans-unit>
        <trans-unit id="8ca0acccfff73ec5f39bf9a76ceb21c3d72aa439" translate="yes" xml:space="preserve">
          <source>@isdefined</source>
          <target state="translated">@isdefined</target>
        </trans-unit>
        <trans-unit id="03c2e7fdb001cbf566801d52a83375cbdaa52bd5" translate="yes" xml:space="preserve">
          <source>@label</source>
          <target state="translated">@label</target>
        </trans-unit>
        <trans-unit id="4ea1201781ae986fc43d71514b609cb6e748d76c" translate="yes" xml:space="preserve">
          <source>@macroexpand</source>
          <target state="translated">@macroexpand</target>
        </trans-unit>
        <trans-unit id="1fd88e55d30c6edcea950811aea00f2ce4456bac" translate="yes" xml:space="preserve">
          <source>@macroexpand1</source>
          <target state="translated">@macroexpand1</target>
        </trans-unit>
        <trans-unit id="78b6dbe95bbae61a934cb6e904cb50533688efaf" translate="yes" xml:space="preserve">
          <source>@noinline</source>
          <target state="translated">@noinline</target>
        </trans-unit>
        <trans-unit id="a5325bbb0409334c7f59038d601431b5a3a33c33" translate="yes" xml:space="preserve">
          <source>@nospecialize</source>
          <target state="translated">@nospecialize</target>
        </trans-unit>
        <trans-unit id="cacd42ee4286c01451a0c3f4cbfa6028f915c0f9" translate="yes" xml:space="preserve">
          <source>@polly</source>
          <target state="translated">@polly</target>
        </trans-unit>
        <trans-unit id="4806d3609cdd2247d8453f645dee6710dc41ea0f" translate="yes" xml:space="preserve">
          <source>@propagate_inbounds</source>
          <target state="translated">@propagate_inbounds</target>
        </trans-unit>
        <trans-unit id="8d60f37515947a1cb20c28aea812b1fc5a9f5bf0" translate="yes" xml:space="preserve">
          <source>@pure</source>
          <target state="translated">@pure</target>
        </trans-unit>
        <trans-unit id="3a55093c30bbbe794bf8d402406d8fcf7a4d1310" translate="yes" xml:space="preserve">
          <source>@r_str</source>
          <target state="translated">@r_str</target>
        </trans-unit>
        <trans-unit id="5996760e14e5f71bfe6fa0d484bd050be2d81350" translate="yes" xml:space="preserve">
          <source>@raw_str</source>
          <target state="translated">@raw_str</target>
        </trans-unit>
        <trans-unit id="97cb7ca3c593693dc788600f2394549a69a72d68" translate="yes" xml:space="preserve">
          <source>@s_str</source>
          <target state="translated">@s_str</target>
        </trans-unit>
        <trans-unit id="0b2cd610c2ee6714f1bb72ef08e30cbecc00753b" translate="yes" xml:space="preserve">
          <source>@show</source>
          <target state="translated">@show</target>
        </trans-unit>
        <trans-unit id="74ed0e99c473ebedb95b8c861f075073cb57397f" translate="yes" xml:space="preserve">
          <source>@specialize</source>
          <target state="translated">@specialize</target>
        </trans-unit>
        <trans-unit id="151387036f429960867face2abcd91f32770c4e2" translate="yes" xml:space="preserve">
          <source>@static</source>
          <target state="translated">@static</target>
        </trans-unit>
        <trans-unit id="a68f475d88760f9b0feb2de9ebbfc91426a3b8f2" translate="yes" xml:space="preserve">
          <source>@sync</source>
          <target state="translated">@sync</target>
        </trans-unit>
        <trans-unit id="d38a8f83640ce0fff0b022161540cfdf0fb32550" translate="yes" xml:space="preserve">
          <source>@task</source>
          <target state="translated">@task</target>
        </trans-unit>
        <trans-unit id="aa18b4621d361b5a46f6036593dc03baa5cf1328" translate="yes" xml:space="preserve">
          <source>@threadcall</source>
          <target state="translated">@threadcall</target>
        </trans-unit>
        <trans-unit id="692eee2d0727b5f3f157c333231a8f4d656b6df0" translate="yes" xml:space="preserve">
          <source>@threadcall (Experimental)</source>
          <target state="translated">@threadcall（実験的）</target>
        </trans-unit>
        <trans-unit id="cd087251781047bb579dc74d06a058b6ba3920e2" translate="yes" xml:space="preserve">
          <source>@time</source>
          <target state="translated">@time</target>
        </trans-unit>
        <trans-unit id="8568facb0a4570662a512fe404e622e193f338a6" translate="yes" xml:space="preserve">
          <source>@timed</source>
          <target state="translated">@timed</target>
        </trans-unit>
        <trans-unit id="27b687fc74e91aa623c8e1b6ee200080f7df4707" translate="yes" xml:space="preserve">
          <source>@timev</source>
          <target state="translated">@timev</target>
        </trans-unit>
        <trans-unit id="805c0ec7ef38a1e449165679942f376bf2b79ddf" translate="yes" xml:space="preserve">
          <source>@v_str</source>
          <target state="translated">@v_str</target>
        </trans-unit>
        <trans-unit id="30bb2b68176ace645967cfe93607300e8069c9f2" translate="yes" xml:space="preserve">
          <source>@view</source>
          <target state="translated">@view</target>
        </trans-unit>
        <trans-unit id="c0636d48f28866f15bfbc1ee9241d4414596eec3" translate="yes" xml:space="preserve">
          <source>@views</source>
          <target state="translated">@views</target>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="ae3a173d257f68d7b3200b2390513b03472ff42a" translate="yes" xml:space="preserve">
          <source>A &quot;strided&quot; array is stored in memory with elements laid out in regular offsets such that an instance with a supported &lt;code&gt;isbits&lt;/code&gt; element type can be passed to external C and Fortran functions that expect this memory layout. Strided arrays must define a &lt;a href=&quot;../../base/arrays/index#Base.strides&quot;&gt;&lt;code&gt;strides(A)&lt;/code&gt;&lt;/a&gt; method that returns a tuple of &quot;strides&quot; for each dimension; a provided &lt;a href=&quot;../../base/arrays/index#Base.stride&quot;&gt;&lt;code&gt;stride(A,k)&lt;/code&gt;&lt;/a&gt; method accesses the &lt;code&gt;k&lt;/code&gt;th element within this tuple. Increasing the index of dimension &lt;code&gt;k&lt;/code&gt; by &lt;code&gt;1&lt;/code&gt; should increase the index &lt;code&gt;i&lt;/code&gt; of &lt;code&gt;getindex(A,i)&lt;/code&gt; by &lt;a href=&quot;../../base/arrays/index#Base.stride&quot;&gt;&lt;code&gt;stride(A,k)&lt;/code&gt;&lt;/a&gt;. If a pointer conversion method &lt;a href=&quot;../../base/c/index#Base.unsafe_convert&quot;&gt;&lt;code&gt;Base.unsafe_convert(Ptr{T}, A)&lt;/code&gt;&lt;/a&gt; is provided, the memory layout must correspond in the same way to these strides. &lt;code&gt;DenseArray&lt;/code&gt; is a very specific example of a strided array where the elements are arranged contiguously, thus it provides its subtypes with the appropriate definition of &lt;code&gt;strides&lt;/code&gt;. More concrete examples can be found within the &lt;a href=&quot;../interfaces/index#man-interface-strided-arrays-1&quot;&gt;interface guide for strided arrays&lt;/a&gt;. &lt;a href=&quot;../../base/arrays/index#Base.StridedVector&quot;&gt;&lt;code&gt;StridedVector&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../base/arrays/index#Base.StridedMatrix&quot;&gt;&lt;code&gt;StridedMatrix&lt;/code&gt;&lt;/a&gt; are convenient aliases for many of the builtin array types that are considered strided arrays, allowing them to dispatch to select specialized implementations that call highly tuned and optimized BLAS and LAPACK functions using just the pointer and strides.</source>
          <target state="translated">サポートされている &lt;code&gt;isbits&lt;/code&gt; 要素タイプのインスタンスをこのメモリレイアウトを期待する外部CおよびFortran関数に渡すことができるように、「strided」配列はメモリに格納され、要素は通常のオフセットでレイアウトされます。ストライド配列は、各次元の「ストライド」のタプルを返すstrides &lt;a href=&quot;../../base/arrays/index#Base.strides&quot;&gt; &lt;code&gt;strides(A)&lt;/code&gt; &lt;/a&gt;メソッドを定義する必要があります。提供されている&lt;a href=&quot;../../base/arrays/index#Base.stride&quot;&gt; &lt;code&gt;stride(A,k)&lt;/code&gt; &lt;/a&gt;メソッドは、このタプル内の &lt;code&gt;k&lt;/code&gt; 番目の要素にアクセスします。次元の指数増加 &lt;code&gt;k&lt;/code&gt; することによって &lt;code&gt;1&lt;/code&gt; は、インデックス増やす必要 &lt;code&gt;i&lt;/code&gt; はの &lt;code&gt;getindex(A,i)&lt;/code&gt; することによって&lt;a href=&quot;../../base/arrays/index#Base.stride&quot;&gt; &lt;code&gt;stride(A,k)&lt;/code&gt; &lt;/a&gt;。ポインター変換メソッド&lt;a href=&quot;../../base/c/index#Base.unsafe_convert&quot;&gt; &lt;code&gt;Base.unsafe_convert(Ptr{T}, A)&lt;/code&gt; &lt;/a&gt;が提供されている場合、メモリレイアウトはこれらのストライドと同じように対応している必要があります。 &lt;code&gt;DenseArray&lt;/code&gt; は、要素が隣接して配置されているストライド配列の非常に具体的な例です。そのため、サブタイプに適切な &lt;code&gt;strides&lt;/code&gt; 定義を提供します。より具体的な例は&lt;a href=&quot;../interfaces/index#man-interface-strided-arrays-1&quot;&gt;、ストライド配列のインターフェイスガイドにあります&lt;/a&gt;。&lt;a href=&quot;../../base/arrays/index#Base.StridedVector&quot;&gt; &lt;code&gt;StridedVector&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../base/arrays/index#Base.StridedMatrix&quot;&gt; &lt;code&gt;StridedMatrix&lt;/code&gt; &lt;/a&gt;は、ストライド配列と見なされる多くの組み込み配列型の便利なエイリアスであり、ポインターとストライドだけを使用して高度に調整および最適化されたBLASおよびLAPACK関数を呼び出す特殊な実装を選択してディスパッチできます。</target>
        </trans-unit>
        <trans-unit id="b06ef311fe65245308768dcdeb585be5facb485c" translate="yes" xml:space="preserve">
          <source>A &amp;ldquo;view&amp;rdquo; is a data structure that acts like an array (it is a subtype of &lt;code&gt;AbstractArray&lt;/code&gt;), but the underlying data is actually part of another array.</source>
          <target state="translated">「ビュー」は配列のように機能するデータ構造です（ &lt;code&gt;AbstractArray&lt;/code&gt; のサブタイプです）が、基になるデータは実際には別の配列の一部です。</target>
        </trans-unit>
        <trans-unit id="87a6d45076b09098eb9df88807c997bb15e85369" translate="yes" xml:space="preserve">
          <source>A (all)</source>
          <target state="translated">A (すべて)</target>
        </trans-unit>
        <trans-unit id="9e0270f067c0a720b45c4eb9f114b3b4f763ba05" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#LibGit2.GitCommit&quot;&gt;&lt;code&gt;GitCommit&lt;/code&gt;&lt;/a&gt; will be peeled to a &lt;a href=&quot;#LibGit2.GitTree&quot;&gt;&lt;code&gt;GitTree&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;a href=&quot;#LibGit2.GitCommit&quot;&gt; &lt;code&gt;GitCommit&lt;/code&gt; は&lt;/a&gt;に剥離されます&lt;a href=&quot;#LibGit2.GitTree&quot;&gt; &lt;code&gt;GitTree&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ba75f83e672a51cdb25eeef228f835e8a4e0af8a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#LinearAlgebra.UniformScaling&quot;&gt;&lt;code&gt;UniformScaling&lt;/code&gt;&lt;/a&gt; operator represents a scalar times the identity operator, &lt;code&gt;&amp;lambda;*I&lt;/code&gt;. The identity operator &lt;code&gt;I&lt;/code&gt; is defined as a constant and is an instance of &lt;code&gt;UniformScaling&lt;/code&gt;. The size of these operators are generic and match the other matrix in the binary operations &lt;a href=&quot;../../base/math/index#Base.:+&quot;&gt;&lt;code&gt;+&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt; and &lt;code&gt;\&lt;/code&gt;. For &lt;code&gt;A+I&lt;/code&gt; and &lt;code&gt;A-I&lt;/code&gt; this means that &lt;code&gt;A&lt;/code&gt; must be square. Multiplication with the identity operator &lt;code&gt;I&lt;/code&gt; is a noop (except for checking that the scaling factor is one) and therefore almost without overhead.</source>
          <target state="translated">A &lt;a href=&quot;#LinearAlgebra.UniformScaling&quot;&gt; &lt;code&gt;UniformScaling&lt;/code&gt; の&lt;/a&gt;オペレータは、アイデンティティ演算子スカラー倍を表し、 &lt;code&gt;&amp;lambda;*I&lt;/code&gt; 。識別演算子 &lt;code&gt;I&lt;/code&gt; は定数として定義され、 &lt;code&gt;UniformScaling&lt;/code&gt; のインスタンスです。これらの演算子のサイズは一般的であり、二項演算&lt;a href=&quot;../../base/math/index#Base.:+&quot;&gt; &lt;code&gt;+&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; および &lt;code&gt;\&lt;/code&gt; の他の行列と一致します。 &lt;code&gt;A+I&lt;/code&gt; と &lt;code&gt;A-I&lt;/code&gt; この手段は &lt;code&gt;A&lt;/code&gt; は正方でなければなりません。識別演算子 &lt;code&gt;I&lt;/code&gt; との乗算は何もしない（スケーリング係数が1であることの確認を除く）ため、ほとんどオーバーヘッドがありません。</target>
        </trans-unit>
        <trans-unit id="c842dce0eb13d715db2132316b0c05a4d0e9a5e4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../base/numbers/index#Core.Float64&quot;&gt;&lt;code&gt;Float64&lt;/code&gt;&lt;/a&gt; that sets the value of &lt;code&gt;Distributed.worker_timeout()&lt;/code&gt; (default: &lt;code&gt;60.0&lt;/code&gt;). This function gives the number of seconds a worker process will wait for a master process to establish a connection before dying.</source>
          <target state="translated">&lt;code&gt;Distributed.worker_timeout()&lt;/code&gt; の値を設定する&lt;a href=&quot;../../base/numbers/index#Core.Float64&quot;&gt; &lt;code&gt;Float64&lt;/code&gt; &lt;/a&gt;（デフォルト： &lt;code&gt;60.0&lt;/code&gt; ）。この関数は、ワーカープロセスがマスタープロセスが接続を確立するまで待機する秒数を指定します。</target>
        </trans-unit>
        <trans-unit id="f904b64ee325fb09a13719884cf4994b4a67dc0b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; is in an open state initially. This means that it can be read from and written to freely via &lt;code&gt;take!&lt;/code&gt; and &lt;code&gt;put!&lt;/code&gt; calls. &lt;a href=&quot;../../base/io-network/index#Base.close&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; closes a &lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;. On a closed &lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;put!&lt;/code&gt; will fail. For example:</source>
          <target state="translated">A &lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt; &lt;code&gt;Channel&lt;/code&gt; &lt;/a&gt;最初に開いた状態になっています。これは、 &lt;code&gt;take!&lt;/code&gt; を介して自由に読み書きできることを意味します！そして、 &lt;code&gt;put!&lt;/code&gt; 呼び出します。&lt;a href=&quot;../../base/io-network/index#Base.close&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt; &lt;code&gt;Channel&lt;/code&gt; を&lt;/a&gt;閉じます。閉じた&lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt; &lt;code&gt;Channel&lt;/code&gt; &lt;/a&gt;に &lt;code&gt;put!&lt;/code&gt; 失敗します。例えば：</target>
        </trans-unit>
        <trans-unit id="8375d9780c1ae8c1682f81b0f7a6ce2515b39852" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; is local to a process. Worker 2 cannot directly refer to a &lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; on worker 3 and vice-versa. A &lt;a href=&quot;../../stdlib/distributed/index#Distributed.RemoteChannel&quot;&gt;&lt;code&gt;RemoteChannel&lt;/code&gt;&lt;/a&gt;, however, can put and take values across workers.</source>
          <target state="translated">A &lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt; &lt;code&gt;Channel&lt;/code&gt; &lt;/a&gt;プロセスに対してローカルです。ワーカー2は、ワーカー3の&lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt; &lt;code&gt;Channel&lt;/code&gt; &lt;/a&gt;を直接参照することはできません。逆も同様です。A &lt;a href=&quot;../../stdlib/distributed/index#Distributed.RemoteChannel&quot;&gt; &lt;code&gt;RemoteChannel&lt;/code&gt; は&lt;/a&gt;、しかし、置くと労働者間の値を取ることができます。</target>
        </trans-unit>
        <trans-unit id="fc8c6fb411b59b42a835d08f8b3cc960e82887e0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../stdlib/distributed/index#Distributed.RemoteChannel&quot;&gt;&lt;code&gt;RemoteChannel&lt;/code&gt;&lt;/a&gt; can be thought of as a &lt;em&gt;handle&lt;/em&gt; to a &lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;a href=&quot;../../stdlib/distributed/index#Distributed.RemoteChannel&quot;&gt; &lt;code&gt;RemoteChannel&lt;/code&gt; は&lt;/a&gt;と考えることができます&lt;em&gt;ハンドル&lt;/em&gt;に&lt;a href=&quot;../../base/parallel/index#Base.Channel&quot;&gt; &lt;code&gt;Channel&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="17cfa5600f21f142fc6aae797119fcc13529b73c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../numbers/index#Core.Float64&quot;&gt;&lt;code&gt;Float64&lt;/code&gt;&lt;/a&gt; iterator of length &lt;code&gt;n&lt;/code&gt; whose elements exponentially increase at a rate in the interval &lt;code&gt;factor&lt;/code&gt; * (1 &amp;plusmn; &lt;code&gt;jitter&lt;/code&gt;). The first element is &lt;code&gt;first_delay&lt;/code&gt; and all elements are clamped to &lt;code&gt;max_delay&lt;/code&gt;.</source>
          <target state="translated">A &lt;a href=&quot;../numbers/index#Core.Float64&quot;&gt; &lt;code&gt;Float64&lt;/code&gt; &lt;/a&gt;長さの反復子 &lt;code&gt;n&lt;/code&gt; 個の要素指数関数的間隔での速度で増加 &lt;code&gt;factor&lt;/code&gt; *（1つの&amp;plusmn; &lt;code&gt;jitter&lt;/code&gt; ）。最初の要素は &lt;code&gt;first_delay&lt;/code&gt; で、すべての要素は &lt;code&gt;max_delay&lt;/code&gt; に固定されています。</target>
        </trans-unit>
        <trans-unit id="4eff87e10245c4721bd18e0368a4c02ba6a49f3c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;(:function, &quot;library&quot;)&lt;/code&gt; pair (most common),</source>
          <target state="translated">&lt;code&gt;(:function, &quot;library&quot;)&lt;/code&gt; ペア（最も一般的）、</target>
        </trans-unit>
        <trans-unit id="7c79d61fbf339539f4166e2a7bfbe466aba53081" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;(:function, &quot;library&quot;)&lt;/code&gt; pair, which must be written as a literal constant,</source>
          <target state="translated">A &lt;code&gt;(:function, &quot;library&quot;)&lt;/code&gt; リテラル定数として書かれなければならない対、</target>
        </trans-unit>
        <trans-unit id="524fcaed9fa041013c206a6350ca0d844bfa68a7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;(name, library)&lt;/code&gt; function specification must be a constant expression. However, it is possible to use computed values as function names by staging through &lt;a href=&quot;../../base/base/index#Base.MainInclude.eval&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; as follows:</source>
          <target state="translated">&lt;code&gt;(name, library)&lt;/code&gt; 機能仕様は、定数式でなければなりません。ただし、次のように&lt;a href=&quot;../../base/base/index#Base.MainInclude.eval&quot;&gt; &lt;code&gt;eval&lt;/code&gt; &lt;/a&gt;をステージングすることで、計算された値を関数名として使用できます。</target>
        </trans-unit>
        <trans-unit id="d15e6f0f33d377d6237a8e9e56d281edb772d043" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;:&lt;/code&gt; character on either end of a column's header separator (the row containing &lt;code&gt;-&lt;/code&gt; characters) specifies whether the row is left-aligned, right-aligned, or (when &lt;code&gt;:&lt;/code&gt; appears on both ends) center-aligned. Providing no &lt;code&gt;:&lt;/code&gt; characters will default to right-aligning the column.</source>
          <target state="translated">&lt;code&gt;:&lt;/code&gt; 列のヘッダセパレータの両端に文字（含む行 &lt;code&gt;-&lt;/code&gt; 文字）行を右寄せ、または、左揃えにするかどうかを指定（場合 &lt;code&gt;:&lt;/code&gt; 両端に表示される）中央揃え。 &lt;code&gt;:&lt;/code&gt; を指定しないと、デフォルトで列が右揃えになります。</target>
        </trans-unit>
        <trans-unit id="d46ad2498166339bc8bbf3585924bc43d1e8d5c2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BufferStream&lt;/code&gt; is an in-memory &lt;a href=&quot;../../base/io-network/index#Base.IOBuffer&quot;&gt;&lt;code&gt;IOBuffer&lt;/code&gt;&lt;/a&gt; which behaves like an &lt;code&gt;IO&lt;/code&gt;&amp;ndash;it is a stream which can be handled asynchronously.</source>
          <target state="translated">A &lt;code&gt;BufferStream&lt;/code&gt; はメモリ内で&lt;a href=&quot;../../base/io-network/index#Base.IOBuffer&quot;&gt; &lt;code&gt;IOBuffer&lt;/code&gt; &lt;/a&gt;のように動作 &lt;code&gt;IO&lt;/code&gt; -itは非同期に処理することができるストリームです。</target>
        </trans-unit>
        <trans-unit id="d1f408408afbccca18234c62817be522377e93f0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CartesianIndex&lt;/code&gt; is sometimes produced by &lt;a href=&quot;#Base.eachindex&quot;&gt;&lt;code&gt;eachindex&lt;/code&gt;&lt;/a&gt;, and always when iterating with an explicit &lt;a href=&quot;#Base.IteratorsMD.CartesianIndices&quot;&gt;&lt;code&gt;CartesianIndices&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;CartesianIndex&lt;/code&gt; は時々によって生成される&lt;a href=&quot;#Base.eachindex&quot;&gt; &lt;code&gt;eachindex&lt;/code&gt; &lt;/a&gt;、常に明示的で反復する場合&lt;a href=&quot;#Base.IteratorsMD.CartesianIndices&quot;&gt; &lt;code&gt;CartesianIndices&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d375921fbca2bf53253dd9c9c9cb98fe33f687c8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Channel&lt;/code&gt; can be used as an iterable object in a &lt;code&gt;for&lt;/code&gt; loop, in which case the loop runs as long as the &lt;code&gt;Channel&lt;/code&gt; has data or is open. The loop variable takes on all values added to the &lt;code&gt;Channel&lt;/code&gt;. The &lt;code&gt;for&lt;/code&gt; loop is terminated once the &lt;code&gt;Channel&lt;/code&gt; is closed and emptied.</source>
          <target state="translated">A &lt;code&gt;Channel&lt;/code&gt; で反復可能オブジェクトとして使用することができる &lt;code&gt;for&lt;/code&gt; 、ループが長いほど走行する場合には、ループ、 &lt;code&gt;Channel&lt;/code&gt; データを有しているか、開いています。ループ変数は、 &lt;code&gt;Channel&lt;/code&gt; に追加されたすべての値を取ります。 &lt;code&gt;for&lt;/code&gt; いったんループが終了される &lt;code&gt;Channel&lt;/code&gt; 閉じられ、空にされます。</target>
        </trans-unit>
        <trans-unit id="1464a151c99f208872dfcf6ce120c5e13267f23e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Char&lt;/code&gt; value represents a single character: it is just a 32-bit primitive type with a special literal representation and appropriate arithmetic behaviors, and which can be converted to a numeric value representing a &lt;a href=&quot;https://en.wikipedia.org/wiki/Code_point&quot;&gt;Unicode code point&lt;/a&gt;. (Julia packages may define other subtypes of &lt;code&gt;AbstractChar&lt;/code&gt;, e.g. to optimize operations for other &lt;a href=&quot;https://en.wikipedia.org/wiki/Character_encoding&quot;&gt;text encodings&lt;/a&gt;.) Here is how &lt;code&gt;Char&lt;/code&gt; values are input and shown:</source>
          <target state="translated">A &lt;code&gt;Char&lt;/code&gt; それは特別なリテラル表現と適当な演算動作をするだけの32ビットプリミティブ型であり、そしてそれは表す数値に変換することができる：値は、単一の文字を表す&lt;a href=&quot;https://en.wikipedia.org/wiki/Code_point&quot;&gt;Unicodeコードポイント&lt;/a&gt;。 （Juliaパッケージは、 &lt;code&gt;AbstractChar&lt;/code&gt; の他のサブタイプを定義する場合があります。たとえば、他の&lt;a href=&quot;https://en.wikipedia.org/wiki/Character_encoding&quot;&gt;テキストエンコーディングの&lt;/a&gt;操作を最適化するためです。） &lt;code&gt;Char&lt;/code&gt; 値の入力方法と表示方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="29831ac830f246eb0b5dcfbe779b29bb30cb2979" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CompoundPeriod&lt;/code&gt; is useful for expressing time periods that are not a fixed multiple of smaller periods. For example, &quot;a year and a day&quot; is not a fixed number of days, but can be expressed using a &lt;code&gt;CompoundPeriod&lt;/code&gt;. In fact, a &lt;code&gt;CompoundPeriod&lt;/code&gt; is automatically generated by addition of different period types, e.g. &lt;code&gt;Year(1) + Day(1)&lt;/code&gt; produces a &lt;code&gt;CompoundPeriod&lt;/code&gt; result.</source>
          <target state="translated">A &lt;code&gt;CompoundPeriod&lt;/code&gt; は小さい周期の固定倍数でない時間帯を発現するために有用です。たとえば、「年と日」は一定の日数ではありませんが、 &lt;code&gt;CompoundPeriod&lt;/code&gt; を使用して表現できます。実際、 &lt;code&gt;CompoundPeriod&lt;/code&gt; は異なる期間タイプを追加することで自動的に生成されます。たとえば、 &lt;code&gt;Year(1) + Day(1)&lt;/code&gt; は、 &lt;code&gt;CompoundPeriod&lt;/code&gt; の結果を生成します。</target>
        </trans-unit>
        <trans-unit id="013639aa4c9e00f4e19703e4c05f20b5824ce3b4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DataType&lt;/code&gt; may be abstract or concrete. If it is concrete, it has a specified size, storage layout, and (optionally) field names. Thus a primitive type is a &lt;code&gt;DataType&lt;/code&gt; with nonzero size, but no field names. A composite type is a &lt;code&gt;DataType&lt;/code&gt; that has field names or is empty (zero size).</source>
          <target state="translated">A &lt;code&gt;DataType&lt;/code&gt; 、抽象やコンクリートかもしれません。具体的な場合は、サイズ、ストレージレイアウト、および（オプションで）フィールド名が指定されています。したがって、プリミティブ型はサイズがゼロ以外の &lt;code&gt;DataType&lt;/code&gt; ですが、フィールド名はありません。複合型は、フィールド名があるか、空（サイズがゼロ）の &lt;code&gt;DataType&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8254718d7cf35196b57a0c256656d29ca6967f68" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Future&lt;/code&gt; is a placeholder for a single computation of unknown termination status and time. For multiple potential computations, see &lt;code&gt;RemoteChannel&lt;/code&gt;. See &lt;code&gt;remoteref_id&lt;/code&gt; for identifying an &lt;code&gt;AbstractRemoteRef&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;Future&lt;/code&gt; 、未知の終了ステータスと時間の単一の計算のためのプレースホルダです。複数の潜在的な計算については、 &lt;code&gt;RemoteChannel&lt;/code&gt; を参照してください。 &lt;code&gt;AbstractRemoteRef&lt;/code&gt; の識別については、 &lt;code&gt;remoteref_id&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="c0a8047ce7922366b0e1686ff32c1d95d34209f7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;GitCommit&lt;/code&gt; will be peeled to a &lt;code&gt;GitTree&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;GitCommit&lt;/code&gt; はに剥離されます &lt;code&gt;GitTree&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d18c2ea92257c3ec465776fe14e9a5ed1ec94622" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;GitRevWalker&lt;/code&gt;&lt;em&gt;walks&lt;/em&gt; through the &lt;em&gt;revisions&lt;/em&gt; (i.e. commits) of a git repository &lt;code&gt;repo&lt;/code&gt;. It is a collection of the commits in the repository, and supports iteration and calls to &lt;a href=&quot;#LibGit2.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#LibGit2.count&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt; (for instance, &lt;code&gt;count&lt;/code&gt; could be used to determine what percentage of commits in a repository were made by a certain author).</source>
          <target state="translated">A &lt;code&gt;GitRevWalker&lt;/code&gt; は&lt;em&gt;歩い&lt;/em&gt;て&lt;em&gt;リビジョン&lt;/em&gt;のgitリポジトリの（すなわちコミット） &lt;code&gt;repo&lt;/code&gt; 。これはリポジトリ内のコミットのコレクションであり、反復と&lt;a href=&quot;#LibGit2.map&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#LibGit2.count&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt;呼び出しをサポートします（たとえば、特定の作成者がリポジトリ内のコミットの割合を決定するために &lt;code&gt;count&lt;/code&gt; を使用できます）。</target>
        </trans-unit>
        <trans-unit id="7218806e6e918d7a7efe224d0bbd25603b822749" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;GitTag&lt;/code&gt; will be peeled to the object it references.</source>
          <target state="translated">A &lt;code&gt;GitTag&lt;/code&gt; は、それが参照するオブジェクトに剥離されます。</target>
        </trans-unit>
        <trans-unit id="9ecaf0ba8d28df22c60ef1b5589bb9e3a4cbe6da" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Hessenberg&lt;/code&gt; object represents the Hessenberg factorization &lt;code&gt;QHQ'&lt;/code&gt; of a square matrix, or a shift &lt;code&gt;Q(H+&amp;mu;I)Q'&lt;/code&gt; thereof, which is produced by the &lt;a href=&quot;#LinearAlgebra.hessenberg&quot;&gt;&lt;code&gt;hessenberg&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">A &lt;code&gt;Hessenberg&lt;/code&gt; オブジェクトは、ヘッセン分解表し &lt;code&gt;QHQ'&lt;/code&gt; 正方行列の、又はシフト &lt;code&gt;Q(H+&amp;mu;I)Q'&lt;/code&gt; によって生成されるそれら、&lt;a href=&quot;#LinearAlgebra.hessenberg&quot;&gt; &lt;code&gt;hessenberg&lt;/code&gt; &lt;/a&gt;機能。</target>
        </trans-unit>
        <trans-unit id="56db16f375b3ec2b4282d7f16a671aeb187ec450" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MIME&lt;/code&gt; object can be passed as the second argument to &lt;a href=&quot;#Base.show-Tuple%7BAny%7D&quot;&gt;&lt;code&gt;show&lt;/code&gt;&lt;/a&gt; to request output in that format.</source>
          <target state="translated">&lt;code&gt;MIME&lt;/code&gt; のオブジェクトは、第2の引数として渡すことができる&lt;a href=&quot;#Base.show-Tuple%7BAny%7D&quot;&gt; &lt;code&gt;show&lt;/code&gt; &lt;/a&gt;、そのフォーマットで要求出力します。</target>
        </trans-unit>
        <trans-unit id="bd67479c52c92dddc64ec714d9c7069f1b10867a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MIME&lt;/code&gt; object can be passed as the second argument to &lt;a href=&quot;#Base.show-Tuple%7BIO,Any%7D&quot;&gt;&lt;code&gt;show&lt;/code&gt;&lt;/a&gt; to request output in that format.</source>
          <target state="translated">&lt;code&gt;MIME&lt;/code&gt; のオブジェクトは、第2の引数として渡すことができる&lt;a href=&quot;#Base.show-Tuple%7BIO,Any%7D&quot;&gt; &lt;code&gt;show&lt;/code&gt; &lt;/a&gt;、そのフォーマットで要求出力します。</target>
        </trans-unit>
        <trans-unit id="64ab14f4b27b0ebae05bdd35cfc7b0f0829b66e2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MersenneTwister&lt;/code&gt; or &lt;code&gt;RandomDevice&lt;/code&gt; RNG can generate uniformly random numbers of the following types: &lt;a href=&quot;../../base/numbers/index#Core.Float16&quot;&gt;&lt;code&gt;Float16&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/numbers/index#Core.Float32&quot;&gt;&lt;code&gt;Float32&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/numbers/index#Core.Float64&quot;&gt;&lt;code&gt;Float64&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/numbers/index#Base.MPFR.BigFloat&quot;&gt;&lt;code&gt;BigFloat&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/numbers/index#Core.Bool&quot;&gt;&lt;code&gt;Bool&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/numbers/index#Core.Int8&quot;&gt;&lt;code&gt;Int8&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/numbers/index#Core.UInt8&quot;&gt;&lt;code&gt;UInt8&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/numbers/index#Core.Int16&quot;&gt;&lt;code&gt;Int16&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/numbers/index#Core.UInt16&quot;&gt;&lt;code&gt;UInt16&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/numbers/index#Core.Int32&quot;&gt;&lt;code&gt;Int32&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/numbers/index#Core.UInt32&quot;&gt;&lt;code&gt;UInt32&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/numbers/index#Core.Int64&quot;&gt;&lt;code&gt;Int64&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/numbers/index#Core.UInt64&quot;&gt;&lt;code&gt;UInt64&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/numbers/index#Core.Int128&quot;&gt;&lt;code&gt;Int128&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/numbers/index#Core.UInt128&quot;&gt;&lt;code&gt;UInt128&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../base/numbers/index#Base.GMP.BigInt&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; (or complex numbers of those types). Random floating point numbers are generated uniformly in $[0, 1)$. As &lt;code&gt;BigInt&lt;/code&gt; represents unbounded integers, the interval must be specified (e.g. &lt;code&gt;rand(big.(1:6))&lt;/code&gt;).</source>
          <target state="translated">A &lt;code&gt;MersenneTwister&lt;/code&gt; 又は &lt;code&gt;RandomDevice&lt;/code&gt; ：RNGは、以下のタイプの一様乱数を生成することができる&lt;a href=&quot;../../base/numbers/index#Core.Float16&quot;&gt; &lt;code&gt;Float16&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../base/numbers/index#Core.Float32&quot;&gt; &lt;code&gt;Float32&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../base/numbers/index#Core.Float64&quot;&gt; &lt;code&gt;Float64&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../base/numbers/index#Base.MPFR.BigFloat&quot;&gt; &lt;code&gt;BigFloat&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../base/numbers/index#Core.Bool&quot;&gt; &lt;code&gt;Bool&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../base/numbers/index#Core.Int8&quot;&gt; &lt;code&gt;Int8&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../base/numbers/index#Core.UInt8&quot;&gt; &lt;code&gt;UInt8&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../base/numbers/index#Core.Int16&quot;&gt; &lt;code&gt;Int16&lt;/code&gt; 型&lt;/a&gt;、&lt;a href=&quot;../../base/numbers/index#Core.UInt16&quot;&gt; &lt;code&gt;UInt16&lt;/code&gt; 型&lt;/a&gt;、&lt;a href=&quot;../../base/numbers/index#Core.Int32&quot;&gt; &lt;code&gt;Int32&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../base/numbers/index#Core.UInt32&quot;&gt; &lt;code&gt;UInt32&lt;/code&gt; 型&lt;/a&gt;、&lt;a href=&quot;../../base/numbers/index#Core.Int64&quot;&gt; &lt;code&gt;Int64&lt;/code&gt; 型&lt;/a&gt;、&lt;a href=&quot;../../base/numbers/index#Core.UInt64&quot;&gt; &lt;code&gt;UInt64&lt;/code&gt; 型&lt;/a&gt;、&lt;a href=&quot;../../base/numbers/index#Core.Int128&quot;&gt; &lt;code&gt;Int128&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../base/numbers/index#Core.UInt128&quot;&gt; &lt;code&gt;UInt128&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../base/numbers/index#Base.GMP.BigInt&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt;（または複素数それらのタイプの）。ランダムな浮動小数点数は$ [0、1）$に均一に生成されます。 &lt;code&gt;BigInt&lt;/code&gt; として無制限の整数を表す場合、間隔を指定する必要があります（例： &lt;code&gt;rand(big.(1:6))&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="93e7981a3162e9783d86dcf2247127a2e48a689e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Module&lt;/code&gt; is a separate global variable workspace. See &lt;a href=&quot;#module&quot;&gt;&lt;code&gt;module&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;../../manual/modules/index#modules&quot;&gt;manual section about modules&lt;/a&gt; for details.</source>
          <target state="translated">A &lt;code&gt;Module&lt;/code&gt; 別々のグローバル変数のワークスペースです。詳細については、&lt;a href=&quot;#module&quot;&gt; &lt;code&gt;module&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../manual/modules/index#modules&quot;&gt;モジュール&lt;/a&gt;に関するマニュアルのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="fcc156039502be223f5f3af68d44a563690ef471" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Module&lt;/code&gt; is a separate global variable workspace. See &lt;a href=&quot;#module&quot;&gt;&lt;code&gt;module&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;../../manual/modules/index#modules-1&quot;&gt;manual section about modules&lt;/a&gt; for details.</source>
          <target state="translated">A &lt;code&gt;Module&lt;/code&gt; 別々のグローバル変数のワークスペースです。詳細については、&lt;a href=&quot;#module&quot;&gt; &lt;code&gt;module&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../manual/modules/index#modules-1&quot;&gt;モジュール&lt;/a&gt;に関するマニュアルのセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="a7ec3daecca2c04b2bae1c27f0094a5422da6aa1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;N&lt;/code&gt;-dimensional custom array that reports its &lt;code&gt;IndexStyle&lt;/code&gt; as &lt;code&gt;IndexCartesian&lt;/code&gt; needs to implement indexing (and indexed assignment) with exactly &lt;code&gt;N&lt;/code&gt;&lt;code&gt;Int&lt;/code&gt; indices; all other indexing expressions &amp;mdash; including linear indexing &amp;mdash; will be recomputed to the equivalent Cartesian location. For example, if &lt;code&gt;A&lt;/code&gt; were a &lt;code&gt;2&amp;times;3&lt;/code&gt; custom matrix with cartesian indexing, and we referenced &lt;code&gt;A[5]&lt;/code&gt;, this would be recomputed to the equivalent Cartesian index and call &lt;code&gt;A[1, 3]&lt;/code&gt; since &lt;code&gt;5 = 2*1 + 3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;IndexStyle&lt;/code&gt; として &lt;code&gt;IndexCartesian&lt;/code&gt; を報告する &lt;code&gt;N&lt;/code&gt; 次元のカスタム配列は、正確に &lt;code&gt;N&lt;/code&gt; 個の &lt;code&gt;Int&lt;/code&gt; インデックスを使用してインデックス付け（およびインデックス付き割り当て）を実装する必要があります。線形インデックスを含む他のすべてのインデックス式は、同等のデカルト位置に再計算されます。たとえば、 &lt;code&gt;A&lt;/code&gt; がデカルトインデックス付きの &lt;code&gt;2&amp;times;3&lt;/code&gt; カスタム行列であり、 &lt;code&gt;A[5]&lt;/code&gt; を参照した場合、 &lt;code&gt;5 = 2*1 + 3&lt;/code&gt; ため、これは同等のデカルトインデックスに再計算され、 &lt;code&gt;A[1, 3]&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="fe27036120fb22dce22db3d877ea4b7e275e7b94" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NamedTuple&lt;/code&gt; type can be used as a constructor, accepting a single tuple argument. The constructed &lt;code&gt;NamedTuple&lt;/code&gt; type can be either a concrete type, with both parameters specified, or a type that specifies only field names:</source>
          <target state="translated">&lt;code&gt;NamedTuple&lt;/code&gt; のタイプは、単一のタプル引数を受け入れ、コンストラクタとして使用することができます。構築される &lt;code&gt;NamedTuple&lt;/code&gt; 型は、両方のパラメーターが指定された具象型、またはフィールド名のみを指定する型のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="ea99f7079d8791c0343a7307d5e653f1f644267c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Polar&lt;/code&gt; object will then display automatically using HTML in an environment that supports HTML display, but you can call &lt;code&gt;show&lt;/code&gt; manually to get HTML output if you want:</source>
          <target state="translated">A &lt;code&gt;Polar&lt;/code&gt; オブジェクトは、サポートのHTML表示その環境でHTMLを使用して自動的に表示されますが、あなたは呼び出すことができます &lt;code&gt;show&lt;/code&gt; したい場合は、GET HTML出力に手動：</target>
        </trans-unit>
        <trans-unit id="3992f5106e091bf1a1db28341609bec19be4cafd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;VersionNumber&lt;/code&gt; object describing which version of Julia is in use. For details see &lt;a href=&quot;../../manual/strings/index#man-version-number-literals&quot;&gt;Version Number Literals&lt;/a&gt;.</source>
          <target state="translated">使用されているJuliaのバージョンを説明する &lt;code&gt;VersionNumber&lt;/code&gt; オブジェクト。詳細については、&lt;a href=&quot;../../manual/strings/index#man-version-number-literals&quot;&gt;バージョン番号リテラルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c3372e99dcae94f7a8aba1e912fc8ad984983e16" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;VersionNumber&lt;/code&gt; object describing which version of Julia is in use. For details see &lt;a href=&quot;../../manual/strings/index#man-version-number-literals-1&quot;&gt;Version Number Literals&lt;/a&gt;.</source>
          <target state="translated">Julia &lt;code&gt;VersionNumber&lt;/code&gt; バージョンが使用されているかを説明するVersionNumberオブジェクト。詳細については、&lt;a href=&quot;../../manual/strings/index#man-version-number-literals-1&quot;&gt;バージョン番号リテラルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6b5d6ebeedad778839a920e823243163f3ccd68a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;do&lt;/code&gt; block, like any other inner function, can &quot;capture&quot; variables from its enclosing scope. For example, the variable &lt;code&gt;data&lt;/code&gt; in the above example of &lt;code&gt;open...do&lt;/code&gt; is captured from the outer scope. Captured variables can create performance challenges as discussed in &lt;a href=&quot;../performance-tips/index#man-performance-captured&quot;&gt;performance tips&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;do&lt;/code&gt; その外側のスコープからのブロック、他の内部関数と同様に、できる「キャプチャ」変数。たとえば、上記の &lt;code&gt;open...do&lt;/code&gt; 例の変数 &lt;code&gt;data&lt;/code&gt; は、外部スコープからキャプチャされます。キャプチャされた変数は、&lt;a href=&quot;../performance-tips/index#man-performance-captured&quot;&gt;パフォーマンスのヒントで&lt;/a&gt;説明されているように、パフォーマンスの課題を生み出す可能性があります。</target>
        </trans-unit>
        <trans-unit id="ac1b0b9643100f5709d747b0fa1193640db35af9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;do&lt;/code&gt; block, like any other inner function, can &quot;capture&quot; variables from its enclosing scope. For example, the variable &lt;code&gt;data&lt;/code&gt; in the above example of &lt;code&gt;open...do&lt;/code&gt; is captured from the outer scope. Captured variables can create performance challenges as discussed in &lt;a href=&quot;../performance-tips/index#man-performance-tips-1&quot;&gt;performance tips&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;do&lt;/code&gt; その外側のスコープからのブロック、他の内部関数と同様に、できる「キャプチャ」変数。たとえば、上の &lt;code&gt;open...do&lt;/code&gt; 例の変数 &lt;code&gt;data&lt;/code&gt; は、外側のスコープから取得されます。キャプチャされた変数は、&lt;a href=&quot;../performance-tips/index#man-performance-tips-1&quot;&gt;パフォーマンスのヒントで&lt;/a&gt;説明されているように、パフォーマンスの問題を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="13afa4d8f5eaeee48f3a15d19e444c7dc58d320a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;for&lt;/code&gt; loop or comprehension iteration variable is always a new variable:</source>
          <target state="translated">A &lt;code&gt;for&lt;/code&gt; ループまたは理解反復変数は、常に新しい変数です。</target>
        </trans-unit>
        <trans-unit id="1cc87568b64210c7c32ecbee8a0599fd750c9777" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;group&lt;/code&gt; for the event, which is set to the base name of the file by default, without extension. This can be used to group messages into categories more finely than the log level (for example, all deprecation warnings have group &lt;code&gt;:depwarn&lt;/code&gt;), or into logical groupings across or within modules.</source>
          <target state="translated">イベントの &lt;code&gt;group&lt;/code&gt; 。拡張子なしで、デフォルトでファイルのベース名に設定されます。これは、メッセージをログレベルよりも細かくカテゴリにグループ化するために使用できます（たとえば、すべての非推奨警告にはgroup &lt;code&gt;:depwarn&lt;/code&gt; があります）、またはモジュール間またはモジュール内の論理グループにグループ化できます。</target>
        </trans-unit>
        <trans-unit id="236e91049303fa66d220cd5b5421a9050d83f949" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;try&lt;/code&gt;/&lt;code&gt;catch&lt;/code&gt; statement allows intercepting errors (exceptions) thrown by &lt;a href=&quot;#Core.throw&quot;&gt;&lt;code&gt;throw&lt;/code&gt;&lt;/a&gt; so that program execution can continue. For example, the following code attempts to write a file, but warns the user and proceeds instead of terminating execution if the file cannot be written:</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; / &lt;code&gt;catch&lt;/code&gt; ステートメントは、傍受のエラー（例外は）によってスロー可能に&lt;a href=&quot;#Core.throw&quot;&gt; &lt;code&gt;throw&lt;/code&gt; &lt;/a&gt;、プログラムの実行を継続できるようにします。たとえば、次のコードはファイルに書き込もうとしますが、ファイルに書き込めない場合、実行を終了する代わりにユーザーに警告して続行します。</target>
        </trans-unit>
        <trans-unit id="6f7e3d0cb44d68c0e786c74714c652c1e6239ca4" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;package&lt;/em&gt; is a source tree with a standard layout providing functionality that can be reused by other Julia projects. A package is loaded by &lt;code&gt;import X&lt;/code&gt; or &lt;code&gt;using X&lt;/code&gt; statements. These statements also make the module named &lt;code&gt;X&lt;/code&gt;&amp;mdash;which results from loading the package code&amp;mdash;available within the module where the import statement occurs. The meaning of &lt;code&gt;X&lt;/code&gt; in &lt;code&gt;import X&lt;/code&gt; is context-dependent: which &lt;code&gt;X&lt;/code&gt; package is loaded depends on what code the statement occurs in. Thus, handling of &lt;code&gt;import X&lt;/code&gt; happens in two stages: first, it determines &lt;strong&gt;what&lt;/strong&gt; package is defined to be &lt;code&gt;X&lt;/code&gt; in this context; second, it determines &lt;strong&gt;where&lt;/strong&gt; that particular &lt;code&gt;X&lt;/code&gt; package is found.</source>
          <target state="translated">&lt;em&gt;パッケージには、&lt;/em&gt;他のジュリア・プロジェクトで再利用することができ、標準的なレイアウト提供する機能を持つソースツリーです。パッケージは、 &lt;code&gt;import X&lt;/code&gt; または &lt;code&gt;using X&lt;/code&gt; ステートメントを使用してロードされます。これらのステートメントは、 &lt;code&gt;X&lt;/code&gt; という名前のモジュール（パッケージコードの読み込みの結果）も作成し、importステートメントが発生するモジュール内で使用できるようにします。意味 &lt;code&gt;X&lt;/code&gt; における &lt;code&gt;import X&lt;/code&gt; ：文脈依存である &lt;code&gt;X&lt;/code&gt; 文がで発生するどのようなコードに依存パッケージロードされているしたがって、の取り扱い。 &lt;code&gt;import X&lt;/code&gt; 二段階で起こる：最初に、決定&lt;strong&gt;するもの&lt;/strong&gt;パッケージがあることと定義されている &lt;code&gt;X&lt;/code&gt; この文脈では; 次に、特定の &lt;code&gt;X&lt;/code&gt; パッケージが&lt;strong&gt;どこに&lt;/strong&gt;あるかを判別します。</target>
        </trans-unit>
        <trans-unit id="0ea5ce3cb4556ddc297c6aeebda772ae9221423a" translate="yes" xml:space="preserve">
          <source>A C function declared to return &lt;code&gt;Cvoid&lt;/code&gt; will return the value &lt;code&gt;nothing&lt;/code&gt; in Julia.</source>
          <target state="translated">AC機能は、返すように宣言 &lt;code&gt;Cvoid&lt;/code&gt; を値の返しません &lt;code&gt;nothing&lt;/code&gt; ジュリアでは。</target>
        </trans-unit>
        <trans-unit id="390614814aa5adb2a2fccf6c0c90c7149f4d96ba" translate="yes" xml:space="preserve">
          <source>A C-style string composed of the native character type &lt;a href=&quot;#Base.Cchar&quot;&gt;&lt;code&gt;Cchar&lt;/code&gt;&lt;/a&gt;s. &lt;code&gt;Cstring&lt;/code&gt;s are NUL-terminated. For C-style strings composed of the native wide character type, see &lt;a href=&quot;#Base.Cwstring&quot;&gt;&lt;code&gt;Cwstring&lt;/code&gt;&lt;/a&gt;. For more information about string interopability with C, see the &lt;a href=&quot;../../manual/calling-c-and-fortran-code/index#man-bits-types&quot;&gt;manual&lt;/a&gt;.</source>
          <target state="translated">ネイティブ文字タイプ&lt;a href=&quot;#Base.Cchar&quot;&gt; &lt;code&gt;Cchar&lt;/code&gt; で&lt;/a&gt;構成されるCスタイルの文字列。 &lt;code&gt;Cstring&lt;/code&gt; はNULで終了します。ネイティブのワイド文字タイプで構成されるCスタイルの文字列については、&lt;a href=&quot;#Base.Cwstring&quot;&gt; &lt;code&gt;Cwstring&lt;/code&gt; を&lt;/a&gt;参照してください。Cとの文字列の相互運用性の詳細については、&lt;a href=&quot;../../manual/calling-c-and-fortran-code/index#man-bits-types&quot;&gt;マニュアルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="def83ea9fa11b0a4be5ef6b08c5ce4257e5755ca" translate="yes" xml:space="preserve">
          <source>A C-style string composed of the native character type &lt;a href=&quot;#Base.Cchar&quot;&gt;&lt;code&gt;Cchar&lt;/code&gt;&lt;/a&gt;s. &lt;code&gt;Cstring&lt;/code&gt;s are NUL-terminated. For C-style strings composed of the native wide character type, see &lt;a href=&quot;#Base.Cwstring&quot;&gt;&lt;code&gt;Cwstring&lt;/code&gt;&lt;/a&gt;. For more information about string interopability with C, see the &lt;a href=&quot;../../manual/calling-c-and-fortran-code/index#man-bits-types-1&quot;&gt;manual&lt;/a&gt;.</source>
          <target state="translated">ネイティブの文字型&lt;a href=&quot;#Base.Cchar&quot;&gt; &lt;code&gt;Cchar&lt;/code&gt; で&lt;/a&gt;構成されるCスタイルの文字列。 &lt;code&gt;Cstring&lt;/code&gt; はNULで終了します。ネイティブワイド文字タイプで構成されるCスタイルの文字列については、&lt;a href=&quot;#Base.Cwstring&quot;&gt; &lt;code&gt;Cwstring&lt;/code&gt; を&lt;/a&gt;参照してください。Cとの文字列の相互運用性の詳細については、&lt;a href=&quot;../../manual/calling-c-and-fortran-code/index#man-bits-types-1&quot;&gt;マニュアルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="18521ba47ad36cc4f8c112bae48ca35ecb2ee122" translate="yes" xml:space="preserve">
          <source>A C-style string composed of the native wide character type &lt;a href=&quot;#Base.Cwchar_t&quot;&gt;&lt;code&gt;Cwchar_t&lt;/code&gt;&lt;/a&gt;s. &lt;code&gt;Cwstring&lt;/code&gt;s are NUL-terminated. For C-style strings composed of the native character type, see &lt;a href=&quot;#Base.Cstring&quot;&gt;&lt;code&gt;Cstring&lt;/code&gt;&lt;/a&gt;. For more information about string interopability with C, see the &lt;a href=&quot;../../manual/calling-c-and-fortran-code/index#man-bits-types&quot;&gt;manual&lt;/a&gt;.</source>
          <target state="translated">ネイティブのワイド文字タイプ&lt;a href=&quot;#Base.Cwchar_t&quot;&gt; &lt;code&gt;Cwchar_t&lt;/code&gt; で&lt;/a&gt;構成されるCスタイルの文字列。 &lt;code&gt;Cwstring&lt;/code&gt; はNULで終了します。ネイティブ文字タイプで構成されるCスタイルの文字列については、&lt;a href=&quot;#Base.Cstring&quot;&gt; &lt;code&gt;Cstring&lt;/code&gt; を&lt;/a&gt;参照してください。Cとの文字列の相互運用性の詳細については、&lt;a href=&quot;../../manual/calling-c-and-fortran-code/index#man-bits-types&quot;&gt;マニュアルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ac0a9fe2ade0eb6e9c2e2cc4b61f726d6a965d9c" translate="yes" xml:space="preserve">
          <source>A C-style string composed of the native wide character type &lt;a href=&quot;#Base.Cwchar_t&quot;&gt;&lt;code&gt;Cwchar_t&lt;/code&gt;&lt;/a&gt;s. &lt;code&gt;Cwstring&lt;/code&gt;s are NUL-terminated. For C-style strings composed of the native character type, see &lt;a href=&quot;#Base.Cstring&quot;&gt;&lt;code&gt;Cstring&lt;/code&gt;&lt;/a&gt;. For more information about string interopability with C, see the &lt;a href=&quot;../../manual/calling-c-and-fortran-code/index#man-bits-types-1&quot;&gt;manual&lt;/a&gt;.</source>
          <target state="translated">ネイティブワイド文字タイプ&lt;a href=&quot;#Base.Cwchar_t&quot;&gt; &lt;code&gt;Cwchar_t&lt;/code&gt; で&lt;/a&gt;構成されるCスタイルの文字列。 &lt;code&gt;Cwstring&lt;/code&gt; はNULで終了します。ネイティブ文字タイプで構成されるCスタイルの文字列については、&lt;a href=&quot;#Base.Cstring&quot;&gt; &lt;code&gt;Cstring&lt;/code&gt; を&lt;/a&gt;参照してください。 Cとの文字列の相互運用性の詳細については、&lt;a href=&quot;../../manual/calling-c-and-fortran-code/index#man-bits-types-1&quot;&gt;マニュアルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c197fd05f688124d54264f0b58fc3c22d93ec77c" translate="yes" xml:space="preserve">
          <source>A Cartesian indexing style uses multiple integer indices to describe the position in a multidimensional array, with exactly one index per dimension. This means that requesting &lt;a href=&quot;#Base.eachindex&quot;&gt;&lt;code&gt;eachindex&lt;/code&gt;&lt;/a&gt; from an array that is &lt;code&gt;IndexCartesian&lt;/code&gt; will return a range of &lt;a href=&quot;#Base.IteratorsMD.CartesianIndices&quot;&gt;&lt;code&gt;CartesianIndices&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デカルトインデックススタイルは、複数の整数インデックスを使用して、次元ごとに1つのインデックスを使用して多次元配列内の位置を記述します。要求し、この手段&lt;a href=&quot;#Base.eachindex&quot;&gt; &lt;code&gt;eachindex&lt;/code&gt; を&lt;/a&gt;あるアレイから &lt;code&gt;IndexCartesian&lt;/code&gt; が範囲返され&lt;a href=&quot;#Base.IteratorsMD.CartesianIndices&quot;&gt; &lt;code&gt;CartesianIndices&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="023376b34dc0e6e575fb072d80744bfc1276423d" translate="yes" xml:space="preserve">
          <source>A Givens rotation linear operator. The fields &lt;code&gt;c&lt;/code&gt; and &lt;code&gt;s&lt;/code&gt; represent the cosine and sine of the rotation angle, respectively. The &lt;code&gt;Givens&lt;/code&gt; type supports left multiplication &lt;code&gt;G*A&lt;/code&gt; and conjugated transpose right multiplication &lt;code&gt;A*G'&lt;/code&gt;. The type doesn't have a &lt;code&gt;size&lt;/code&gt; and can therefore be multiplied with matrices of arbitrary size as long as &lt;code&gt;i2&amp;lt;=size(A,2)&lt;/code&gt; for &lt;code&gt;G*A&lt;/code&gt; or &lt;code&gt;i2&amp;lt;=size(A,1)&lt;/code&gt; for &lt;code&gt;A*G'&lt;/code&gt;.</source>
          <target state="translated">ギブンズ回転線形演算子。フィールド &lt;code&gt;c&lt;/code&gt; と &lt;code&gt;s&lt;/code&gt; は、それぞれ回転角のコサインとサインを表します。 &lt;code&gt;Givens&lt;/code&gt; タイプの支持体は、乗算左 &lt;code&gt;G*A&lt;/code&gt; をし、転置右乗算共役 &lt;code&gt;A*G'&lt;/code&gt; 。タイプには &lt;code&gt;size&lt;/code&gt; がないため、 &lt;code&gt;G*A&lt;/code&gt; の &lt;code&gt;i2&amp;lt;=size(A,2)&lt;/code&gt; または &lt;code&gt;A*G'&lt;/code&gt; &lt;code&gt;i2&amp;lt;=size(A,1)&lt;/code&gt; である限り、任意のサイズの行列を乗算できます。</target>
        </trans-unit>
        <trans-unit id="c0f95cfdddef2f3b16bd0eaacf8c5ec7871a86e5" translate="yes" xml:space="preserve">
          <source>A Julia Function</source>
          <target state="translated">ジュリア関数</target>
        </trans-unit>
        <trans-unit id="338b907694ffa95225d1463f09b5454501424162" translate="yes" xml:space="preserve">
          <source>A Julia cluster has the following characteristics:</source>
          <target state="translated">ジュリアクラスターには以下のような特徴があります。</target>
        </trans-unit>
        <trans-unit id="b46f55d05b4cea9eeb2d26c893736aefe4db768d" translate="yes" xml:space="preserve">
          <source>A Julia function</source>
          <target state="translated">ジュリア機能</target>
        </trans-unit>
        <trans-unit id="afbb147573dcd49250e15c543ce261c2ed456757" translate="yes" xml:space="preserve">
          <source>A Julia script may contain any number of functions, and all definitions will be externally visible when the file is loaded. Function definitions can be loaded from files outside the current working directory.</source>
          <target state="translated">Julia スクリプトにはいくつでも関数を含めることができ、ファイルをロードするとすべての定義が外部に表示されます。関数の定義は、現在の作業ディレクトリ以外のファイルから読み込むことができます。</target>
        </trans-unit>
        <trans-unit id="ec5c0a21b198e35d9011cfccf1720c04200ccca0" translate="yes" xml:space="preserve">
          <source>A LibGit2 credential callback function which provides different credential acquisition functionality w.r.t. a connection protocol. The &lt;code&gt;payload_ptr&lt;/code&gt; is required to contain a &lt;code&gt;LibGit2.CredentialPayload&lt;/code&gt; object which will keep track of state and settings.</source>
          <target state="translated">接続プロトコルに対してさまざまな資格情報取得機能を提供するLibGit2資格情報コールバック関数。 &lt;code&gt;payload_ptr&lt;/code&gt; を含むように要求され &lt;code&gt;LibGit2.CredentialPayload&lt;/code&gt; の状態や設定を追跡するオブジェクトを。</target>
        </trans-unit>
        <trans-unit id="01a933ad46a5f5ec0c3c3e174d75cd08e0a9bf13" translate="yes" xml:space="preserve">
          <source>A LibGit2 representation of an array of strings. Matches the &lt;a href=&quot;https://libgit2.org/libgit2/#HEAD/type/git_strarray&quot;&gt;&lt;code&gt;git_strarray&lt;/code&gt;&lt;/a&gt; struct.</source>
          <target state="translated">文字列の配列のLibGit2表現。&lt;a href=&quot;https://libgit2.org/libgit2/#HEAD/type/git_strarray&quot;&gt; &lt;code&gt;git_strarray&lt;/code&gt; &lt;/a&gt;構造体と一致します。</target>
        </trans-unit>
        <trans-unit id="eb6b4f3bedfc4889701c09c75dc083d1c8d58006" translate="yes" xml:space="preserve">
          <source>A QR matrix factorization stored in a compact blocked format, typically obtained from &lt;a href=&quot;#LinearAlgebra.qr&quot;&gt;&lt;code&gt;qr&lt;/code&gt;&lt;/a&gt;. If $A$ is an &lt;code&gt;m&lt;/code&gt;&amp;times;&lt;code&gt;n&lt;/code&gt; matrix, then</source>
          <target state="translated">通常は&lt;a href=&quot;#LinearAlgebra.qr&quot;&gt; &lt;code&gt;qr&lt;/code&gt; &lt;/a&gt;から取得される、コンパクトなブロック形式で保存されたQR行列因数分解。$ A $が &lt;code&gt;m&lt;/code&gt; &amp;times; &lt;code&gt;n&lt;/code&gt; 行列の場合、</target>
        </trans-unit>
        <trans-unit id="a2bfddaee8ff7a44aec0ab4b2b1e184a0f187d2e" translate="yes" xml:space="preserve">
          <source>A QR matrix factorization stored in a packed format, typically obtained from &lt;a href=&quot;#LinearAlgebra.qr&quot;&gt;&lt;code&gt;qr&lt;/code&gt;&lt;/a&gt;. If $A$ is an &lt;code&gt;m&lt;/code&gt;&amp;times;&lt;code&gt;n&lt;/code&gt; matrix, then</source>
          <target state="translated">パックされた形式で保存されたQR行列因数分解。通常、&lt;a href=&quot;#LinearAlgebra.qr&quot;&gt; &lt;code&gt;qr&lt;/code&gt; &lt;/a&gt;から取得されます。$ A $が &lt;code&gt;m&lt;/code&gt; &amp;times; &lt;code&gt;n&lt;/code&gt; 行列の場合、</target>
        </trans-unit>
        <trans-unit id="c9925c571d2e1e694cc1d660f2d03ec4cf1ec057" translate="yes" xml:space="preserve">
          <source>A QR matrix factorization with column pivoting in a packed format, typically obtained from &lt;a href=&quot;#LinearAlgebra.qr&quot;&gt;&lt;code&gt;qr&lt;/code&gt;&lt;/a&gt;. If $A$ is an &lt;code&gt;m&lt;/code&gt;&amp;times;&lt;code&gt;n&lt;/code&gt; matrix, then</source>
          <target state="translated">通常は&lt;a href=&quot;#LinearAlgebra.qr&quot;&gt; &lt;code&gt;qr&lt;/code&gt; &lt;/a&gt;から取得される、パック形式の列ピボットによるQR行列因数分解。$ A $が &lt;code&gt;m&lt;/code&gt; &amp;times; &lt;code&gt;n&lt;/code&gt; 行列の場合、</target>
        </trans-unit>
        <trans-unit id="028b2fd647f67d6a5b3b18c1e2a4be06ea973f76" translate="yes" xml:space="preserve">
          <source>A basic editor/REPL workflow</source>
          <target state="translated">基本的なエディタ/REPLのワークフロー</target>
        </trans-unit>
        <trans-unit id="3e270c005ba798894763e8eb54b974bf29e5d476" translate="yes" xml:space="preserve">
          <source>A buffered IO stream wrapping an OS file descriptor. Mostly used to represent files returned by &lt;a href=&quot;#Base.open&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">OSファイル記述子をラップするバッファリングされたIOストリーム。主に&lt;a href=&quot;#Base.open&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;によって返されるファイルを表すために使用されます。</target>
        </trans-unit>
        <trans-unit id="d6761a9dad52906730c7e2d2e824c87ab1ba9a0c" translate="yes" xml:space="preserve">
          <source>A call to &lt;a href=&quot;../../base/base/index#Base.backtrace&quot;&gt;&lt;code&gt;backtrace&lt;/code&gt;&lt;/a&gt; returns a vector of &lt;code&gt;Union{Ptr{Nothing}, Base.InterpreterIP}&lt;/code&gt;, which may then be passed into &lt;a href=&quot;../../base/stacktraces/index#Base.StackTraces.stacktrace&quot;&gt;&lt;code&gt;stacktrace&lt;/code&gt;&lt;/a&gt; for translation:</source>
          <target state="translated">&lt;a href=&quot;../../base/base/index#Base.backtrace&quot;&gt; &lt;code&gt;backtrace&lt;/code&gt; を&lt;/a&gt;呼び出すと、 &lt;code&gt;Union{Ptr{Nothing}, Base.InterpreterIP}&lt;/code&gt; ベクトルが返されます。これは、変換のために&lt;a href=&quot;../../base/stacktraces/index#Base.StackTraces.stacktrace&quot;&gt; &lt;code&gt;stacktrace&lt;/code&gt; &lt;/a&gt;に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="783595edaa0cd8106f88e2687e628c9ad8922d54" translate="yes" xml:space="preserve">
          <source>A cartesian indexing style uses multiple integers/indices to describe the position in the array. For example, if &lt;code&gt;A&lt;/code&gt; were a &lt;code&gt;(2, 3, 4)&lt;/code&gt; custom matrix type with cartesian indexing, we could reference &lt;code&gt;A[2, 1, 3]&lt;/code&gt; and Julia would automatically convert this into the correct location in the underlying memory. See also &lt;a href=&quot;#Base.IndexLinear&quot;&gt;&lt;code&gt;IndexLinear&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デカルトインデックススタイルでは、複数の整数/インデックスを使用して、配列内の位置を記述します。たとえば、 &lt;code&gt;A&lt;/code&gt; がデカルトインデックスを使用する &lt;code&gt;(2, 3, 4)&lt;/code&gt; カスタムマトリックス型である場合、 &lt;code&gt;A[2, 1, 3]&lt;/code&gt; 2、1、3 ]を参照すると、Juliaはこれを基になるメモリ内の正しい場所に自動的に変換します。&lt;a href=&quot;#Base.IndexLinear&quot;&gt; &lt;code&gt;IndexLinear&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="9b670cf7ce6aa053516969f59beb26f75521a626" translate="yes" xml:space="preserve">
          <source>A channel can be visualized as a pipe, i.e., it has a write end and a read end :</source>
          <target state="translated">チャンネルはパイプとして視覚化することができます。</target>
        </trans-unit>
        <trans-unit id="cda0bd3645d716870c693b3b59018dd4924caf33" translate="yes" xml:space="preserve">
          <source>A classic example is the standard C library &lt;code&gt;qsort&lt;/code&gt; function, declared as:</source>
          <target state="translated">古典的な例は、 &lt;code&gt;qsort&lt;/code&gt; ように宣言された標準Cライブラリのqsort関数です。</target>
        </trans-unit>
        <trans-unit id="e90162b2f2534c5d2ad98ffd6060c363829dd8a7" translate="yes" xml:space="preserve">
          <source>A cluster spanning machines using the &lt;code&gt;--machine-file&lt;/code&gt; option. This uses a passwordless &lt;code&gt;ssh&lt;/code&gt; login to start Julia worker processes (from the same path as the current host) on the specified machines.</source>
          <target state="translated">&lt;code&gt;--machine-file&lt;/code&gt; オプションを使用したマシンにまたがるクラスター。これは、パスワードなしの &lt;code&gt;ssh&lt;/code&gt; ログインを使用して、指定されたマシンで（現在のホストと同じパスから）Juliaワーカープロセスを開始します。</target>
        </trans-unit>
        <trans-unit id="7d02127d252ebd3948a9767c4487385c4243c197" translate="yes" xml:space="preserve">
          <source>A common pitfall when running external programs via a shell is that if a file name contains characters that are special to the shell, they may cause undesirable behavior. Suppose, for example, rather than &lt;code&gt;/etc/passwd&lt;/code&gt;, we wanted to sort the contents of the file &lt;code&gt;/Volumes/External HD/data.csv&lt;/code&gt;. Let's try it:</source>
          <target state="translated">シェルを介して外部プログラムを実行する際の一般的な落とし穴は、ファイル名にシェルに特有の文字が含まれている場合、望ましくない動作を引き起こす可能性があることです。たとえば、 &lt;code&gt;/etc/passwd&lt;/code&gt; ではなく、 &lt;code&gt;/Volumes/External HD/data.csv&lt;/code&gt; ファイルの内容をソートしたいとします。試してみよう：</target>
        </trans-unit>
        <trans-unit id="6454f39a38aef4a6a88d7b516cb03974038d7792" translate="yes" xml:space="preserve">
          <source>A common use of variables is giving names to specific, unchanging values. Such variables are only assigned once. This intent can be conveyed to the compiler using the &lt;a href=&quot;../../base/base/index#const&quot;&gt;&lt;code&gt;const&lt;/code&gt;&lt;/a&gt; keyword:</source>
          <target state="translated">変数の一般的な用途は、特定の変化しない値に名前を付けることです。このような変数は一度だけ割り当てられます。この意図は、&lt;a href=&quot;../../base/base/index#const&quot;&gt; &lt;code&gt;const&lt;/code&gt; &lt;/a&gt;キーワードを使用してコンパイラに伝えることができます。</target>
        </trans-unit>
        <trans-unit id="d3cb20f10d68d34ff29611ac3f50ba68dd4c4b99" translate="yes" xml:space="preserve">
          <source>A comprehensive overview of all documentable Julia syntax.</source>
          <target state="translated">ドキュメント化されたJuliaの構文の包括的な概要です。</target>
        </trans-unit>
        <trans-unit id="0d6d37f3dca8ed9b04613226e4330c5ab758e3f1" translate="yes" xml:space="preserve">
          <source>A concrete implementation of an &lt;code&gt;AbstractChannel&lt;/code&gt; (like &lt;code&gt;Channel&lt;/code&gt;), is required to implement &lt;code&gt;put!&lt;/code&gt;, &lt;code&gt;take!&lt;/code&gt;, &lt;code&gt;fetch&lt;/code&gt;, &lt;code&gt;isready&lt;/code&gt; and &lt;a href=&quot;../../base/parallel/index#Base.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt;. The remote object referred to by a &lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; is stored in a &lt;code&gt;Channel{Any}(1)&lt;/code&gt;, i.e., a &lt;code&gt;Channel&lt;/code&gt; of size 1 capable of holding objects of &lt;code&gt;Any&lt;/code&gt; type.</source>
          <target state="translated">&lt;code&gt;put!&lt;/code&gt; を実装するには、 &lt;code&gt;AbstractChannel&lt;/code&gt; （ &lt;code&gt;Channel&lt;/code&gt; のような）の具体的な実装が必要です。、 &lt;code&gt;take!&lt;/code&gt; 、 &lt;code&gt;fetch&lt;/code&gt; 、 &lt;code&gt;isready&lt;/code&gt; 、&lt;a href=&quot;../../base/parallel/index#Base.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;が参照するリモートオブジェクトは &lt;code&gt;Channel{Any}(1)&lt;/code&gt; に格納されます。つまり、 &lt;code&gt;Any&lt;/code&gt; タイプのオブジェクトを保持できるサイズ1の &lt;code&gt;Channel&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e6d94519717188d6531df826c6d7c056c25b4e04" translate="yes" xml:space="preserve">
          <source>A constructor is just like any other function in Julia in that its overall behavior is defined by the combined behavior of its methods. Accordingly, you can add functionality to a constructor by simply defining new methods. For example, let's say you want to add a constructor method for &lt;code&gt;Foo&lt;/code&gt; objects that takes only one argument and uses the given value for both the &lt;code&gt;bar&lt;/code&gt; and &lt;code&gt;baz&lt;/code&gt; fields. This is simple:</source>
          <target state="translated">コンストラクターは、その全体的な動作がそのメソッドの組み合わせた動作によって定義されるという点で、Juliaの他の関数と同じです。したがって、新しいメソッドを定義するだけで、コンストラクタに機能を追加できます。たとえば、引数を1つだけ取り、 &lt;code&gt;bar&lt;/code&gt; フィールドと &lt;code&gt;baz&lt;/code&gt; フィールドの両方に指定された値を使用する &lt;code&gt;Foo&lt;/code&gt; オブジェクトのコンストラクタメソッドを追加するとします。これは簡単です：</target>
        </trans-unit>
        <trans-unit id="da756968deae2626766b76b59d785afc3e81b3a6" translate="yes" xml:space="preserve">
          <source>A convenience macro for writing &lt;a href=&quot;#Base.Multimedia.MIME&quot;&gt;&lt;code&gt;MIME&lt;/code&gt;&lt;/a&gt; types, typically used when adding methods to &lt;a href=&quot;#Base.show-Tuple%7BAny%7D&quot;&gt;&lt;code&gt;show&lt;/code&gt;&lt;/a&gt;. For example the syntax &lt;code&gt;show(io::IO, ::MIME&quot;text/html&quot;, x::MyType) = ...&lt;/code&gt; could be used to define how to write an HTML representation of &lt;code&gt;MyType&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#Base.Multimedia.MIME&quot;&gt; &lt;code&gt;MIME&lt;/code&gt; &lt;/a&gt;タイプを記述するための便利なマクロで、通常、&lt;a href=&quot;#Base.show-Tuple%7BAny%7D&quot;&gt; &lt;code&gt;show&lt;/code&gt; に&lt;/a&gt;メソッドを追加するときに使用されます。たとえば、構文 &lt;code&gt;show(io::IO, ::MIME&quot;text/html&quot;, x::MyType) = ...&lt;/code&gt; を使用して、 &lt;code&gt;MyType&lt;/code&gt; の HTML表現を記述する方法を定義できます。</target>
        </trans-unit>
        <trans-unit id="70c4d119efcef0d9d58b6c1b731caa5e0cea492c" translate="yes" xml:space="preserve">
          <source>A convenience macro for writing &lt;a href=&quot;#Base.Multimedia.MIME&quot;&gt;&lt;code&gt;MIME&lt;/code&gt;&lt;/a&gt; types, typically used when adding methods to &lt;a href=&quot;#Base.show-Tuple%7BIO,Any%7D&quot;&gt;&lt;code&gt;show&lt;/code&gt;&lt;/a&gt;. For example the syntax &lt;code&gt;show(io::IO, ::MIME&quot;text/html&quot;, x::MyType) = ...&lt;/code&gt; could be used to define how to write an HTML representation of &lt;code&gt;MyType&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#Base.Multimedia.MIME&quot;&gt; &lt;code&gt;MIME&lt;/code&gt; &lt;/a&gt;タイプを記述するための便利なマクロ。通常、&lt;a href=&quot;#Base.show-Tuple%7BIO,Any%7D&quot;&gt; &lt;code&gt;show&lt;/code&gt; の&lt;/a&gt;メソッドを追加するときに使用されます。たとえば、構文 &lt;code&gt;show(io::IO, ::MIME&quot;text/html&quot;, x::MyType) = ...&lt;/code&gt; を使用して、 &lt;code&gt;MyType&lt;/code&gt; のHTML表現を作成する方法を定義できます。</target>
        </trans-unit>
        <trans-unit id="ce500fee8f2cf895c4ff2e81b81207ab74479894" translate="yes" xml:space="preserve">
          <source>A correct way to define a method that accepts all arguments of type &lt;code&gt;Point{T}&lt;/code&gt; where &lt;code&gt;T&lt;/code&gt; is a subtype of &lt;a href=&quot;../../base/numbers/index#Core.Real&quot;&gt;&lt;code&gt;Real&lt;/code&gt;&lt;/a&gt; is:</source>
          <target state="translated">タイプのすべての引数を受け付ける方法を定義するための正しい方法 &lt;code&gt;Point{T}&lt;/code&gt; &lt;code&gt;T&lt;/code&gt; は、のサブタイプである&lt;a href=&quot;../../base/numbers/index#Core.Real&quot;&gt; &lt;code&gt;Real&lt;/code&gt; &lt;/a&gt;されます。</target>
        </trans-unit>
        <trans-unit id="3fdea15c071a796482bb0cbad61dbe066b8e91d1" translate="yes" xml:space="preserve">
          <source>A curated list of useful learning resources to help new users get started can be found on the &lt;a href=&quot;https://julialang.org/learning/&quot;&gt;learning&lt;/a&gt; page of the main Julia web site.</source>
          <target state="translated">JuliaのメインWebサイトの&lt;a href=&quot;https://julialang.org/learning/&quot;&gt;学習&lt;/a&gt;ページに、新しいユーザーが始めるのに役立つ有用な学習リソースの精選されたリストがあります。</target>
        </trans-unit>
        <trans-unit id="195192cf6a65111d3220eb69daad42095c4bb54b" translate="yes" xml:space="preserve">
          <source>A custom array that reports its &lt;code&gt;IndexStyle&lt;/code&gt; as &lt;code&gt;IndexLinear&lt;/code&gt; only needs to implement indexing (and indexed assignment) with a single &lt;code&gt;Int&lt;/code&gt; index; all other indexing expressions &amp;mdash; including multidimensional accesses &amp;mdash; will be recomputed to the linear index. For example, if &lt;code&gt;A&lt;/code&gt; were a &lt;code&gt;2&amp;times;3&lt;/code&gt; custom matrix with linear indexing, and we referenced &lt;code&gt;A[1, 3]&lt;/code&gt;, this would be recomputed to the equivalent linear index and call &lt;code&gt;A[5]&lt;/code&gt; since &lt;code&gt;2*1 + 3 = 5&lt;/code&gt;.</source>
          <target state="translated">その報告カスタム配列 &lt;code&gt;IndexStyle&lt;/code&gt; を通り &lt;code&gt;IndexLinear&lt;/code&gt; は一つだけで、インデックス（インデックス付きの割り当て）を実装する必要がある &lt;code&gt;Int&lt;/code&gt; インデックス。多次元アクセスを含む他のすべてのインデックス式は、線形インデックスに再計算されます。たとえば、 &lt;code&gt;A&lt;/code&gt; が線形インデックス付きの &lt;code&gt;2&amp;times;3&lt;/code&gt; カスタム行列であり、 &lt;code&gt;A[1, 3]&lt;/code&gt; を参照した場合、これは同等の線形インデックスに再計算され、 &lt;code&gt;2*1 + 3 = 5&lt;/code&gt; ため &lt;code&gt;A[5]&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="3eda7036e705b5b4e6080ae4d063390e3d333bd8" translate="yes" xml:space="preserve">
          <source>A custom title for the box can be provided as a string (in double quotes) after the admonition type. For that standard types (&lt;code&gt;danger&lt;/code&gt;, &lt;code&gt;warning&lt;/code&gt;... etc_, if no title text is specified after the admonition type, then the type title used will be the type of the block. E.g. &lt;code&gt;&quot;Note&quot;&lt;/code&gt; in the case of the &lt;code&gt;note&lt;/code&gt; admonition.</source>
          <target state="translated">ボックスのカスタムタイトルは、警告タイプの後に文字列（二重引用符で囲む）として指定できます。その標準タイプ（ &lt;code&gt;danger&lt;/code&gt; 、 &lt;code&gt;warning&lt;/code&gt; など）の場合、警告タイプの後にタイトルテキストが指定されていない場合、使用されるタイプタイトルはブロックのタイプになります。たとえば、 &lt;code&gt;note&lt;/code&gt; 警告の場合は &lt;code&gt;&quot;Note&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f02f82182ef74a9efe3bec210a9632727895f0a5" translate="yes" xml:space="preserve">
          <source>A custom title for the box can be provided as a string (in double quotes) after the admonition type. If no title text is specified after the admonition type, then the title used will be the type of the block, i.e. &lt;code&gt;&quot;Note&quot;&lt;/code&gt; in the case of the &lt;code&gt;note&lt;/code&gt; admonition.</source>
          <target state="translated">ボックスのカスタムタイトルは、警告タイプの後に文字列として（二重引用符で）提供できます。警告タイプの後にタイトルテキストが指定されていない場合、使用されるタイトルはブロックのタイプになります。つまり、 &lt;code&gt;note&lt;/code&gt; 警告の場合は &lt;code&gt;&quot;Note&quot;&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="66ad883b8ebd4cb13361ac5dca2bf64c895374f2" translate="yes" xml:space="preserve">
          <source>A data buffer for exporting data from libgit2. Matches the &lt;a href=&quot;https://libgit2.org/libgit2/#HEAD/type/git_buf&quot;&gt;&lt;code&gt;git_buf&lt;/code&gt;&lt;/a&gt; struct.</source>
          <target state="translated">libgit2からデータをエクスポートするためのデータバッファー。&lt;a href=&quot;https://libgit2.org/libgit2/#HEAD/type/git_buf&quot;&gt; &lt;code&gt;git_buf&lt;/code&gt; &lt;/a&gt;構造体と一致します。</target>
        </trans-unit>
        <trans-unit id="043f580a8a8cc9a9005c9d9892ccd32895f20dc0" translate="yes" xml:space="preserve">
          <source>A deprecated function internally performs a lookup in order to print a relevant warning only once. This extra lookup can cause a significant slowdown, so all uses of deprecated functions should be modified as suggested by the warnings.</source>
          <target state="translated">非推奨の関数は、関連する警告を一度だけ表示するために内部的にルックアップを実行します。この余分なルックアップは大幅な速度低下を引き起こす可能性があるので、非推奨関数のすべての使用法は、警告で示唆されているように修正しなければなりません。</target>
        </trans-unit>
        <trans-unit id="30d96d8ddfc84bb803bea097ec17d062d6889473" translate="yes" xml:space="preserve">
          <source>A directory path that indicates which project should be the initial active project. Setting this environment variable has the same effect as specifying the &lt;code&gt;--project&lt;/code&gt; start-up option, but &lt;code&gt;--project&lt;/code&gt; has higher precedence. If the variable is set to &lt;code&gt;@.&lt;/code&gt; then Julia tries to find a project directory that contains &lt;code&gt;Project.toml&lt;/code&gt; or &lt;code&gt;JuliaProject.toml&lt;/code&gt; file from the current directory and its parents. See also the chapter on &lt;a href=&quot;../code-loading/index#Code-Loading&quot;&gt;Code Loading&lt;/a&gt;.</source>
          <target state="translated">どのプロジェクトを最初のアクティブなプロジェクトにするかを示すディレクトリパス。この環境変数を設定すると、 &lt;code&gt;--project&lt;/code&gt; 起動オプションを指定した場合と同じ効果があり &lt;code&gt;--project&lt;/code&gt; が、-projectの優先順位が高くなります。変数が &lt;code&gt;@.&lt;/code&gt; 設定されている場合。次に、Juliaは、現在のディレクトリとその親から &lt;code&gt;Project.toml&lt;/code&gt; または &lt;code&gt;JuliaProject.toml&lt;/code&gt; ファイルを含むプロジェクトディレクトリを見つけようとします。&lt;a href=&quot;../code-loading/index#Code-Loading&quot;&gt;コードの読み込み&lt;/a&gt;に関する章も参照してください。</target>
        </trans-unit>
        <trans-unit id="8caa8da69c3b3cb75cd1d014abbbf0696fbf4493" translate="yes" xml:space="preserve">
          <source>A directory path that indicates which project should be the initial active project. Setting this environment variable has the same effect as specifying the &lt;code&gt;--project&lt;/code&gt; start-up option, but &lt;code&gt;--project&lt;/code&gt; has higher precedence. If the variable is set to &lt;code&gt;@.&lt;/code&gt; then Julia tries to find a project directory that contains &lt;code&gt;Project.toml&lt;/code&gt; or &lt;code&gt;JuliaProject.toml&lt;/code&gt; file from the current directory and its parents. See also the chapter on &lt;a href=&quot;../code-loading/index#Code-Loading-1&quot;&gt;Code Loading&lt;/a&gt;.</source>
          <target state="translated">どのプロジェクトを最初のアクティブプロジェクトにするかを示すディレクトリパス。この環境変数を設定すると、 &lt;code&gt;--project&lt;/code&gt; 起動オプションを指定するのと同じ効果があり &lt;code&gt;--project&lt;/code&gt; が、-projectの方が優先されます。変数が &lt;code&gt;@.&lt;/code&gt; 設定されている場合。次に、Juliaは、現在のディレクトリとその親から &lt;code&gt;Project.toml&lt;/code&gt; または &lt;code&gt;JuliaProject.toml&lt;/code&gt; ファイルを含むプロジェクトディレクトリを見つけようとします。&lt;a href=&quot;../code-loading/index#Code-Loading-1&quot;&gt;コードのロード&lt;/a&gt;に関する章も参照してください。</target>
        </trans-unit>
        <trans-unit id="214eedeee1125bd3c3f68e94a3d499c9e468ec4a" translate="yes" xml:space="preserve">
          <source>A distributed memory, parallel for loop of the form :</source>
          <target state="translated">分散型メモリで、並列ループの形をしています。</target>
        </trans-unit>
        <trans-unit id="19754b4c8d91fdeebb8f2031c8dcc27614b27813" translate="yes" xml:space="preserve">
          <source>A document can be split up into different sections using headers. Headers use the following syntax:</source>
          <target state="translated">ドキュメントは、ヘッダを使って異なるセクションに分割することができます。ヘッダーは以下の構文を使用します。</target>
        </trans-unit>
        <trans-unit id="906831c5f1833fe1c6cead11729270eaa1e64820" translate="yes" xml:space="preserve">
          <source>A fast, unfair-scheduling version of &lt;code&gt;schedule(t, arg); yield()&lt;/code&gt; which immediately yields to &lt;code&gt;t&lt;/code&gt; before calling the scheduler.</source>
          <target state="translated">&lt;code&gt;schedule(t, arg); yield()&lt;/code&gt; の高速で不公平なバージョン。スケジューラを呼び出す前にすぐに &lt;code&gt;t&lt;/code&gt; に譲るyield（）。</target>
        </trans-unit>
        <trans-unit id="5b34dfa04ee74a34a9d1a9cbb45d550b2f88b889" translate="yes" xml:space="preserve">
          <source>A few general rules to note:</source>
          <target state="translated">注意すべき一般的なルールをいくつか。</target>
        </trans-unit>
        <trans-unit id="af07889865f77b7c4b96703878fe873de95ec344" translate="yes" xml:space="preserve">
          <source>A few other points to be aware of:</source>
          <target state="translated">他にもいくつか注意すべき点があります。</target>
        </trans-unit>
        <trans-unit id="60a8d349acf8be941cbc934da15ee121f8a78126" translate="yes" xml:space="preserve">
          <source>A few popular languages have singleton types, including Haskell, Scala and Ruby. In general usage, the term &quot;singleton type&quot; refers to a type whose only instance is a single value. This meaning applies to Julia's singleton types, but with that caveat that only type objects have singleton types.</source>
          <target state="translated">いくつかの一般的な言語には、Haskell、Scala、Rubyなどのシングルトン型があります。一般的な使用法では、「シングルトン型」という用語は、インスタンスが単一の値のみである型を指します。この意味はジュリアのシングルトン型にも当てはまりますが、型オブジェクトのみがシングルトン型を持つという注意点があります。</target>
        </trans-unit>
        <trans-unit id="00922cb6654b9fb1b8cc559d5766ed07010c9573" translate="yes" xml:space="preserve">
          <source>A few special expressions correspond to calls to functions with non-obvious names. These are:</source>
          <target state="translated">いくつかの特殊な式は、自明ではない名前の関数の呼び出しに対応しています。これらは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="df6e90fee529846cc6c25c991e16a7b9cfb908be" translate="yes" xml:space="preserve">
          <source>A file can also be preloaded on multiple processes at startup with the &lt;code&gt;-L&lt;/code&gt; flag, and a driver script can be used to drive the computation:</source>
          <target state="translated">&lt;code&gt;-L&lt;/code&gt; フラグを使用して、起動時にファイルを複数のプロセスにプリロードすることもでき、ドライバースクリプトを使用して計算を実行できます。</target>
        </trans-unit>
        <trans-unit id="f9a01e3bc84b099bc13fd4194e7a227e1495a2f3" translate="yes" xml:space="preserve">
          <source>A full list of tab-completions can be found in the &lt;a href=&quot;../../manual/unicode-input/index#Unicode-Input&quot;&gt;Unicode Input&lt;/a&gt; section of the manual.</source>
          <target state="translated">タブ補完の完全なリストは、マニュアルの&lt;a href=&quot;../../manual/unicode-input/index#Unicode-Input&quot;&gt;Unicode入力&lt;/a&gt;セクションにあります。</target>
        </trans-unit>
        <trans-unit id="bef6fc12def87705c0724012674763d06330988e" translate="yes" xml:space="preserve">
          <source>A full list of tab-completions can be found in the &lt;a href=&quot;../../manual/unicode-input/index#Unicode-Input-1&quot;&gt;Unicode Input&lt;/a&gt; section of the manual.</source>
          <target state="translated">タブ補完の完全なリストは、マニュアルの&lt;a href=&quot;../../manual/unicode-input/index#Unicode-Input-1&quot;&gt;Unicode入力&lt;/a&gt;セクションにあります。</target>
        </trans-unit>
        <trans-unit id="776e65341479516956a84c86603101c98f11aaf1" translate="yes" xml:space="preserve">
          <source>A full suite of parsing and formatting tests and examples is available in &lt;a href=&quot;https://github.com/JuliaLang/julia/blob/master/stdlib/Dates/test/io.jl&quot;&gt;&lt;code&gt;stdlib/Dates/test/io.jl&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">解析とフォーマットのテストとサンプルの完全なスイートは、&lt;a href=&quot;https://github.com/JuliaLang/julia/blob/master/stdlib/Dates/test/io.jl&quot;&gt; &lt;code&gt;stdlib/Dates/test/io.jl&lt;/code&gt; で&lt;/a&gt;入手できます。</target>
        </trans-unit>
        <trans-unit id="8d1efd2d920b71c04b3aea5f88fea207dff694c1" translate="yes" xml:space="preserve">
          <source>A function &lt;a href=&quot;#Base.Multimedia.display&quot;&gt;&lt;code&gt;display(x)&lt;/code&gt;&lt;/a&gt; to request the richest available multimedia display of a Julia object &lt;code&gt;x&lt;/code&gt; (with a plain-text fallback).</source>
          <target state="translated">Juliaオブジェクト &lt;code&gt;x&lt;/code&gt; の最もリッチで利用可能なマルチメディア表示を要求する関数&lt;a href=&quot;#Base.Multimedia.display&quot;&gt; &lt;code&gt;display(x)&lt;/code&gt; &lt;/a&gt;（プレーンテキストのフォールバック付き）。</target>
        </trans-unit>
        <trans-unit id="96f1b83c87e5168541a9af06566b09eb353921f1" translate="yes" xml:space="preserve">
          <source>A function is called using the traditional parenthesis syntax:</source>
          <target state="translated">関数は、従来の括弧構文を使用して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d5d505a0f9d0a8bc085cb6ea8549229cd44ccf9a" translate="yes" xml:space="preserve">
          <source>A function name may be used alone in place of the tuple (just &lt;code&gt;:function&lt;/code&gt; or &lt;code&gt;&quot;function&quot;&lt;/code&gt;). In this case the name is resolved within the current process. This form can be used to call C library functions, functions in the Julia runtime, or functions in an application linked to Julia.</source>
          <target state="translated">タプルの代わりに関数名を単独で使用できます（ &lt;code&gt;:function&lt;/code&gt; または &lt;code&gt;&quot;function&quot;&lt;/code&gt; のみ）。この場合、名前は現在のプロセス内で解決されます。このフォームは、Cライブラリ関数、Juliaランタイムの関数、またはJuliaにリンクされたアプリケーションの関数を呼び出すために使用できます。</target>
        </trans-unit>
        <trans-unit id="59d50016e8809b20104597755ad0d300cddc21a6" translate="yes" xml:space="preserve">
          <source>A function signature:</source>
          <target state="translated">関数のシグネチャ。</target>
        </trans-unit>
        <trans-unit id="fe743a5fafb686fdaff2fd3950e5909b38ec521c" translate="yes" xml:space="preserve">
          <source>A function with a declared return type converts its return value to that type.</source>
          <target state="translated">宣言された戻り値型を持つ関数は、その戻り値をその型に変換します。</target>
        </trans-unit>
        <trans-unit id="fff933fe03507e0a69f0bb2eb791a7b5f8b176b4" translate="yes" xml:space="preserve">
          <source>A functional programming style is fully supported by the language, including closures, but isn't always the idiomatic solution for Julia. Some &lt;a href=&quot;../performance-tips/index#man-performance-captured&quot;&gt;workarounds&lt;/a&gt; may be necessary for performance when modifying captured variables.</source>
          <target state="translated">関数型プログラミングスタイルは、クロージャを含め、言語によって完全にサポートされていますが、Juliaの慣用的な解決策であるとは限りません。キャプチャされた変数を変更するときのパフォーマンスには、いくつかの&lt;a href=&quot;../performance-tips/index#man-performance-captured&quot;&gt;回避策&lt;/a&gt;が必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="25a045a60155304dcdc010c60b6dbf032ba437c0" translate="yes" xml:space="preserve">
          <source>A git object identifier, based on the sha-1 hash. It is a 20 byte string (40 hex digits) used to identify a &lt;code&gt;GitObject&lt;/code&gt; in a repository.</source>
          <target state="translated">sha-1ハッシュに基づくgitオブジェクト識別子。これは、リポジトリ内の &lt;code&gt;GitObject&lt;/code&gt; を識別するために使用される20バイトの文字列（40桁の16進数）です。</target>
        </trans-unit>
        <trans-unit id="2b9dac9baaf8e5d26caf82470268456378e7b354" translate="yes" xml:space="preserve">
          <source>A given &lt;code&gt;AbstractChar&lt;/code&gt; subtype may be capable of representing only a subset of Unicode, in which case conversion from an unsupported &lt;code&gt;UInt32&lt;/code&gt; value may throw an error. Conversely, the built-in &lt;a href=&quot;#Core.Char&quot;&gt;&lt;code&gt;Char&lt;/code&gt;&lt;/a&gt; type represents a &lt;em&gt;superset&lt;/em&gt; of Unicode (in order to losslessly encode invalid byte streams), in which case conversion of a non-Unicode value &lt;em&gt;to&lt;/em&gt;&lt;code&gt;UInt32&lt;/code&gt; throws an error. The &lt;a href=&quot;#Base.isvalid-Tuple%7BAny%7D&quot;&gt;&lt;code&gt;isvalid&lt;/code&gt;&lt;/a&gt; function can be used to check which codepoints are representable in a given &lt;code&gt;AbstractChar&lt;/code&gt; type.</source>
          <target state="translated">特定の &lt;code&gt;AbstractChar&lt;/code&gt; サブタイプはUnicodeのサブセットのみを表すことができる場合があります。その場合、サポートされていない &lt;code&gt;UInt32&lt;/code&gt; 値からの変換はエラーをスローする可能性があります。逆に、組み込みの&lt;a href=&quot;#Core.Char&quot;&gt; &lt;code&gt;Char&lt;/code&gt; &lt;/a&gt;型は、Unicodeの&lt;em&gt;スーパーセット&lt;/em&gt;を表します（無効なバイトストリームを無損失でエンコードするため）。この場合、非Unicode値&lt;em&gt;を&lt;/em&gt; &lt;code&gt;UInt32&lt;/code&gt; に変換すると、エラーがスローされます。&lt;a href=&quot;#Base.isvalid-Tuple%7BAny%7D&quot;&gt; &lt;code&gt;isvalid&lt;/code&gt; &lt;/a&gt;関数は所与で表現されたコードポイントを確認するために使用することができる &lt;code&gt;AbstractChar&lt;/code&gt; のタイプ。</target>
        </trans-unit>
        <trans-unit id="04d95958adcacd4e7b4382e807134e41ec53c3fc" translate="yes" xml:space="preserve">
          <source>A global variable might have its value, and therefore its type, change at any point. This makes it difficult for the compiler to optimize code using global variables. Variables should be local, or passed as arguments to functions, whenever possible.</source>
          <target state="translated">グローバル変数の値、つまり型はいつでも変更される可能性があります。これにより、コンパイラがグローバル変数を使用したコードを最適化することが困難になります。変数は可能な限り、ローカル変数にするか、関数の引数として渡すべきです。</target>
        </trans-unit>
        <trans-unit id="e11090dc004521cb3583f54e041c822a584bd2f5" translate="yes" xml:space="preserve">
          <source>A great strength of Julia is that since the API is exposed synchronously even though the I/O is actually happening asynchronously, we didn't have to worry about callbacks or even making sure that the server gets to run. When we called &lt;code&gt;connect&lt;/code&gt; the current task waited for the connection to be established and only continued executing after that was done. In this pause, the server task resumed execution (because a connection request was now available), accepted the connection, printed the message and waited for the next client. Reading and writing works in the same way. To see this, consider the following simple echo server:</source>
          <target state="translated">Juliaの優れた点は、I / Oが実際には非同期で行われている場合でもAPIが同期的に公開されるため、コールバックについて心配したり、サーバーが実行できるようにする必要がないことです。 &lt;code&gt;connect&lt;/code&gt; を呼び出すと、現在のタスクは接続が確立されるのを待って、それが実行された後にのみ実行を続けました。この一時停止中に、サーバータスクは実行を再開し（接続要求が利用可能になったため）、接続を受け入れ、メッセージを出力し、次のクライアントを待機しました。読み書きは同じように機能します。これを確認するには、次の単純なエコーサーバーを検討してください。</target>
        </trans-unit>
        <trans-unit id="31c1ae4c7c3a38a0afd976393219aa6a44dd785b" translate="yes" xml:space="preserve">
          <source>A hard-coded &lt;a href=&quot;../base/index#Core.Union&quot;&gt;&lt;code&gt;Union&lt;/code&gt;&lt;/a&gt; of common array types that follow the &lt;a href=&quot;../../manual/interfaces/index#man-interface-strided-arrays&quot;&gt;strided array interface&lt;/a&gt;, with elements of type &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;N&lt;/code&gt; dimensions.</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; および &lt;code&gt;N&lt;/code&gt; の要素を持つ、&lt;a href=&quot;../../manual/interfaces/index#man-interface-strided-arrays&quot;&gt;ストライド配列インターフェイスに&lt;/a&gt;従う一般的な配列タイプのハードコードされた&lt;a href=&quot;../base/index#Core.Union&quot;&gt; &lt;code&gt;Union&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0a9e1db1edf203efc9535001b0c4d60d58c32400" translate="yes" xml:space="preserve">
          <source>A header line can contain any inline syntax in the same way as a paragraph can.</source>
          <target state="translated">ヘッダー行には、段落と同じようにインライン構文を含めることができます。</target>
        </trans-unit>
        <trans-unit id="a5bee9cb41ed39aedfa6d81eeafb7305d47a4fcb" translate="yes" xml:space="preserve">
          <source>A key part in defining an &lt;code&gt;AbstractArray&lt;/code&gt; subtype is &lt;a href=&quot;../../base/arrays/index#Base.IndexStyle&quot;&gt;&lt;code&gt;IndexStyle&lt;/code&gt;&lt;/a&gt;. Since indexing is such an important part of an array and often occurs in hot loops, it's important to make both indexing and indexed assignment as efficient as possible. Array data structures are typically defined in one of two ways: either it most efficiently accesses its elements using just one index (linear indexing) or it intrinsically accesses the elements with indices specified for every dimension. These two modalities are identified by Julia as &lt;code&gt;IndexLinear()&lt;/code&gt; and &lt;code&gt;IndexCartesian()&lt;/code&gt;. Converting a linear index to multiple indexing subscripts is typically very expensive, so this provides a traits-based mechanism to enable efficient generic code for all array types.</source>
          <target state="translated">&lt;code&gt;AbstractArray&lt;/code&gt; サブタイプを定義する上で重要なのは&lt;a href=&quot;../../base/arrays/index#Base.IndexStyle&quot;&gt; &lt;code&gt;IndexStyle&lt;/code&gt; &lt;/a&gt;です。インデックス付けは配列の非常に重要な部分であり、多くの場合ホットループで発生するため、インデックス付けとインデックス付き割り当ての両方をできるだけ効率的にすることが重要です。配列データ構造は通常、次の2つの方法のいずれかで定義されます。1つだけのインデックス（線形インデックス）を使用して要素に最も効率的にアクセスするか、すべての次元に指定されたインデックスを持つ要素に本質的にアクセスします。これら2つのモダリティは、Juliaによって &lt;code&gt;IndexLinear()&lt;/code&gt; および &lt;code&gt;IndexCartesian()&lt;/code&gt; として識別されます。線形インデックスを複数のインデックスの添え字に変換することは、通常、非常にコストがかかるため、すべての配列型に対して効率的な汎用コードを有効にする特性ベースのメカニズムを提供します。</target>
        </trans-unit>
        <trans-unit id="3a023b19be8aa0bdde697959a3cb353c50c4a7e6" translate="yes" xml:space="preserve">
          <source>A linear index into the array &lt;code&gt;A&lt;/code&gt; can be converted to a &lt;code&gt;CartesianIndex&lt;/code&gt; for cartesian indexing with &lt;code&gt;CartesianIndices(A)[i]&lt;/code&gt; (see &lt;a href=&quot;../../base/arrays/index#Base.IteratorsMD.CartesianIndices&quot;&gt;&lt;code&gt;CartesianIndices&lt;/code&gt;&lt;/a&gt;), and a set of &lt;code&gt;N&lt;/code&gt; cartesian indices can be converted to a linear index with &lt;code&gt;LinearIndices(A)[i_1, i_2, ..., i_N]&lt;/code&gt; (see &lt;a href=&quot;../../base/arrays/index#Base.LinearIndices&quot;&gt;&lt;code&gt;LinearIndices&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">アレイに線形インデックス &lt;code&gt;A&lt;/code&gt; は、に変換することができる &lt;code&gt;CartesianIndex&lt;/code&gt; と直交索引付け &lt;code&gt;CartesianIndices(A)[i]&lt;/code&gt; （参照&lt;a href=&quot;../../base/arrays/index#Base.IteratorsMD.CartesianIndices&quot;&gt; &lt;code&gt;CartesianIndices&lt;/code&gt; を&lt;/a&gt;）、および一組の &lt;code&gt;N&lt;/code&gt; デカルトインデックスは線形インデックスに変換することができる &lt;code&gt;LinearIndices(A)[i_1, i_2, ..., i_N]&lt;/code&gt; （&lt;a href=&quot;../../base/arrays/index#Base.LinearIndices&quot;&gt; &lt;code&gt;LinearIndices&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="2c3eb1f6f74eb080998f31c2d0aa44b3b54b4558" translate="yes" xml:space="preserve">
          <source>A linear indexing style uses one integer index to describe the position in the array (even if it's a multidimensional array) and column-major ordering is used to efficiently access the elements. This means that requesting &lt;a href=&quot;#Base.eachindex&quot;&gt;&lt;code&gt;eachindex&lt;/code&gt;&lt;/a&gt; from an array that is &lt;code&gt;IndexLinear&lt;/code&gt; will return a simple one-dimensional range, even if it is multidimensional.</source>
          <target state="translated">線形インデックススタイルは、1つの整数インデックスを使用して配列内の位置を記述し（多次元配列であっても）、要素に効率的にアクセスするために列優先の順序が使用されます。この手段はその要求&lt;a href=&quot;#Base.eachindex&quot;&gt; &lt;code&gt;eachindex&lt;/code&gt; を&lt;/a&gt;ある配列から &lt;code&gt;IndexLinear&lt;/code&gt; が、それは多次元であっても、単純な一次元の範囲を返します。</target>
        </trans-unit>
        <trans-unit id="fba3600321961b41d61a445772a6a0bbc42feb66" translate="yes" xml:space="preserve">
          <source>A linear indexing style uses one integer to describe the position in the array (even if it's a multidimensional array) and column-major ordering is used to access the elements. For example, if &lt;code&gt;A&lt;/code&gt; were a &lt;code&gt;(2, 3)&lt;/code&gt; custom matrix type with linear indexing, and we referenced &lt;code&gt;A[5]&lt;/code&gt; (using linear style), this would be equivalent to referencing &lt;code&gt;A[1, 3]&lt;/code&gt; (since &lt;code&gt;2*1 + 3 = 5&lt;/code&gt;). See also &lt;a href=&quot;#Base.IndexCartesian&quot;&gt;&lt;code&gt;IndexCartesian&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">線形インデックススタイルでは、1つの整数を使用して配列内の位置を記述し（多次元配列であっても）、要素へのアクセスには列優先順が使用されます。たとえば、 &lt;code&gt;A&lt;/code&gt; が線形インデックスを持つ &lt;code&gt;(2, 3)&lt;/code&gt; カスタムマトリックス型であり、 &lt;code&gt;A[5]&lt;/code&gt; を参照した場合（線形スタイルを使用）、これは &lt;code&gt;A[1, 3]&lt;/code&gt; を参照することと同等になります（ &lt;code&gt;2*1 + 3 = 5&lt;/code&gt; ）。&lt;a href=&quot;#Base.IndexCartesian&quot;&gt; &lt;code&gt;IndexCartesian&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="60b78a78e322605d51a66eddac408816c2a8d70e" translate="yes" xml:space="preserve">
          <source>A literal tuple of input types</source>
          <target state="translated">入力型のリテラルタプル</target>
        </trans-unit>
        <trans-unit id="abd07e8344438c1637a18b8d088b307bacd1facc" translate="yes" xml:space="preserve">
          <source>A little further down, you see:</source>
          <target state="translated">もう少し下に行くと</target>
        </trans-unit>
        <trans-unit id="b734fc221d82e75922a1b3bf7185abae1cf63084" translate="yes" xml:space="preserve">
          <source>A local cluster specified with the &lt;code&gt;-p&lt;/code&gt; option as shown above.</source>
          <target state="translated">上記のように &lt;code&gt;-p&lt;/code&gt; オプションで指定されたローカルクラスター。</target>
        </trans-unit>
        <trans-unit id="b83cf191c90b25b0d5f433557856a4746d3a9017" translate="yes" xml:space="preserve">
          <source>A logger controls how log records are filtered and dispatched. When a log record is generated, the logger is the first piece of user configurable code which gets to inspect the record and decide what to do with it.</source>
          <target state="translated">ロガーは、ログ レコードがどのようにフィルタリングされ、ディスパッチされるかを制御します。ログレコードが生成されると、ロガーはユーザーが設定可能なコードの最初の部分であり、レコードを検査して、そのレコードをどうするかを決定します。</target>
        </trans-unit>
        <trans-unit id="042546047eaee48205b79c0943331492c9d777d2" translate="yes" xml:space="preserve">
          <source>A lot of the power and extensibility in Julia comes from a collection of informal interfaces. By extending a few specific methods to work for a custom type, objects of that type not only receive those functionalities, but they are also able to be used in other methods that are written to generically build upon those behaviors.</source>
          <target state="translated">Julia のパワーと拡張性の多くは、非公式なインターフェイスの集合から来ています。いくつかの特定のメソッドを拡張してカスタム型で動作するようにすることで、その型のオブジェクトはそれらの機能を受け取るだけでなく、それらの動作を一般的に構築するために書かれた他のメソッドでも使用することができます。</target>
        </trans-unit>
        <trans-unit id="cdda590f5cebd6037d45dcdc70b7f61af7141059" translate="yes" xml:space="preserve">
          <source>A low-level API which returns the backing &lt;code&gt;AbstractChannel&lt;/code&gt; for an &lt;code&gt;id&lt;/code&gt; returned by &lt;a href=&quot;#Distributed.remoteref_id&quot;&gt;&lt;code&gt;remoteref_id&lt;/code&gt;&lt;/a&gt;. The call is valid only on the node where the backing channel exists.</source>
          <target state="translated">&lt;a href=&quot;#Distributed.remoteref_id&quot;&gt; &lt;code&gt;remoteref_id&lt;/code&gt; &lt;/a&gt;によって返された &lt;code&gt;id&lt;/code&gt; バッキング &lt;code&gt;AbstractChannel&lt;/code&gt; を返す低レベルAPI 。呼び出しは、バッキングチャネルが存在するノードでのみ有効です。</target>
        </trans-unit>
        <trans-unit id="43d1ae4e08959da49eefb761652820ef46f3ee1d" translate="yes" xml:space="preserve">
          <source>A low-level API which, given a &lt;code&gt;IO&lt;/code&gt; connection or a &lt;code&gt;Worker&lt;/code&gt;, returns the &lt;code&gt;pid&lt;/code&gt; of the worker it is connected to. This is useful when writing custom &lt;a href=&quot;../serialization/index#Serialization.serialize&quot;&gt;&lt;code&gt;serialize&lt;/code&gt;&lt;/a&gt; methods for a type, which optimizes the data written out depending on the receiving process id.</source>
          <target state="translated">&lt;code&gt;IO&lt;/code&gt; 接続または &lt;code&gt;Worker&lt;/code&gt; を指定すると、接続先のワーカーの &lt;code&gt;pid&lt;/code&gt; を返す低レベルAPI 。これは、型のカスタム&lt;a href=&quot;../serialization/index#Serialization.serialize&quot;&gt; &lt;code&gt;serialize&lt;/code&gt; &lt;/a&gt;メソッドを作成するときに役立ちます。これにより、受信プロセスIDに応じて、書き出されるデータが最適化されます。</target>
        </trans-unit>
        <trans-unit id="ba795db29049d0891e980ecd11cc60ac3e97da8e" translate="yes" xml:space="preserve">
          <source>A machine specification is either a string &lt;code&gt;machine_spec&lt;/code&gt; or a tuple - &lt;code&gt;(machine_spec, count)&lt;/code&gt;.</source>
          <target state="translated">マシン仕様は、文字列 &lt;code&gt;machine_spec&lt;/code&gt; またはタプル- &lt;code&gt;(machine_spec, count)&lt;/code&gt; いずれかです。</target>
        </trans-unit>
        <trans-unit id="cd1f8848b8ea19b616dae75f53fa9e5a2b6e59a0" translate="yes" xml:space="preserve">
          <source>A macro to evaluate an expression, discarding the resulting value, instead returning the number of seconds it took to execute as a floating-point number.</source>
          <target state="translated">式を評価し、結果の値を破棄し、その代わりに実行に要した秒数を浮動小数点数として返すマクロ。</target>
        </trans-unit>
        <trans-unit id="25d6ce8e35c816ac4036b6028811a1a2075b37da" translate="yes" xml:space="preserve">
          <source>A macro to evaluate an expression, discarding the resulting value, instead returning the total number of bytes allocated during evaluation of the expression.</source>
          <target state="translated">式を評価し、結果の値を破棄して、式の評価中に割り当てられた総バイト数を返すマクロ。</target>
        </trans-unit>
        <trans-unit id="eb3b3a4181a161e900f67d35ae07d34f42540d5c" translate="yes" xml:space="preserve">
          <source>A macro to evaluate an expression, discarding the resulting value, instead returning the total number of bytes allocated during evaluation of the expression. Note: the expression is evaluated inside a local function, instead of the current context, in order to eliminate the effects of compilation, however, there still may be some allocations due to JIT compilation. This also makes the results inconsistent with the &lt;code&gt;@time&lt;/code&gt; macros, which do not try to adjust for the effects of compilation.</source>
          <target state="translated">式を評価するマクロ。結果の値を破棄し、代わりに式の評価中に割り当てられた合計バイト数を返します。注：式は、コンパイルの影響を排除するために、現在のコンテキストではなくローカル関数内で評価されますが、JITコンパイルのために一部の割り当てが残っている可能性があります。これにより、コンパイルの影響を調整しようとしない &lt;code&gt;@time&lt;/code&gt; マクロと結果が一致しなくなります。</target>
        </trans-unit>
        <trans-unit id="d8419a19f9c35dcf69afb6a224b11b1158512f81" translate="yes" xml:space="preserve">
          <source>A macro to execute an expression, and return the value of the expression, elapsed time, total bytes allocated, garbage collection time, and an object with various memory allocation counters.</source>
          <target state="translated">式を実行し、式の値、経過時間、割り当てられた総バイト数、ガベージコレクション時間、各種メモリ割り当てカウンタを持つオブジェクトを返すマクロです。</target>
        </trans-unit>
        <trans-unit id="ec81ff86af0859e961659a65c9fded1ce9fa3695" translate="yes" xml:space="preserve">
          <source>A macro to execute an expression, printing the time it took to execute, the number of allocations, and the total number of bytes its execution caused to be allocated, before returning the value of the expression.</source>
          <target state="translated">式を実行するためのマクロで、式の値を返す前に、式の実行にかかった時間、割り当て数、およびその実行によって割り当てられた総バイト数を表示します。</target>
        </trans-unit>
        <trans-unit id="e612ee47dedcebb8c33ec68affacf4a81104cb7f" translate="yes" xml:space="preserve">
          <source>A macro to parallelize a &lt;code&gt;for&lt;/code&gt; loop to run with multiple threads. Splits the iteration space among multiple tasks and runs those tasks on threads according to a scheduling policy. A barrier is placed at the end of the loop which waits for all tasks to finish execution.</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; ループを並列化して複数のスレッドで実行するマクロ。反復スペースを複数のタスクに分割し、スケジューリングポリシーに従ってスレッド上でそれらのタスクを実行します。ループの最後にバリアが配置され、すべてのタスクの実行が完了するのを待ちます。</target>
        </trans-unit>
        <trans-unit id="f89e0c8d5e0780de8c8e7183eaddeb751b876c48" translate="yes" xml:space="preserve">
          <source>A macro to parallelize a for-loop to run with multiple threads. This spawns &lt;code&gt;nthreads()&lt;/code&gt; number of threads, splits the iteration space amongst them, and iterates in parallel. A barrier is placed at the end of the loop which waits for all the threads to finish execution, and the loop returns.</source>
          <target state="translated">forループを並列化して複数のスレッドで実行するマクロ。これにより、 &lt;code&gt;nthreads()&lt;/code&gt; 個のスレッドが生成され、それらの間で反復スペースが分割され、並列に反復されます。バリアがループの最後に配置され、すべてのスレッドが実行を完了するのを待って、ループが戻ります。</target>
        </trans-unit>
        <trans-unit id="4056e98728a50b1503d6d58ab30b4f400279b462" translate="yes" xml:space="preserve">
          <source>A memory address referring to data of type &lt;code&gt;T&lt;/code&gt;. However, there is no guarantee that the memory is actually valid, or that it actually represents data of the specified type.</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; のデータを参照するメモリアドレス。ただし、メモリが実際に有効であること、または指定されたタイプのデータを実際に表していることは保証されません。</target>
        </trans-unit>
        <trans-unit id="95d230cf10af62aec1cf82bb28af648076032cf6" translate="yes" xml:space="preserve">
          <source>A message &lt;code&gt;id&lt;/code&gt; that is a unique, fixed identifier for the &lt;em&gt;source code statement&lt;/em&gt; where the logging macro appears. This identifier is designed to be fairly stable even if the source code of the file changes, as long as the logging statement itself remains the same.</source>
          <target state="translated">ログマクロが表示される&lt;em&gt;ソースコードステートメントの&lt;/em&gt;一意の固定識別子であるメッセージ &lt;code&gt;id&lt;/code&gt; 。この識別子は、ログステートメント自体が同じである限り、ファイルのソースコードが変更されてもかなり安定するように設計されています。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2750f8d62ad398e67307a20fbfa3a8d50bdd8b0e" translate="yes" xml:space="preserve">
          <source>A method with the required type signature does not exist in the given generic function. Alternatively, there is no unique most-specific method.</source>
          <target state="translated">必要な型シグネチャを持つメソッドが、指定された汎用関数には存在しません。あるいは、一意の最特定メソッドが存在しない。</target>
        </trans-unit>
        <trans-unit id="cb18ac1bbb6e9e8d32b3f5b781aaa128caf3d148" translate="yes" xml:space="preserve">
          <source>A more portable file would need to encode the word size &amp;ndash; 32 bit or 64 bit &amp;ndash; and endianness information in the header. In practice, consider encoding binary data using standard formats like HDF5 (which can be used with memory-mapping).</source>
          <target state="translated">よりポータブルなファイルでは、ワードサイズ（32ビットまたは64ビット）およびエンディアン情報をヘッダーにエンコードする必要があります。実際には、HDF5（メモリマッピングで使用できる）などの標準形式を使用してバイナリデータをエンコードすることを検討してください。</target>
        </trans-unit>
        <trans-unit id="d12bebeb20e9c7a91d427b124d0d24b749dfc69d" translate="yes" xml:space="preserve">
          <source>A natural extension to the iterated dispatch above is to add a layer to method selection that allows to dispatch on sets of types which are independent from the sets defined by the type hierarchy. We could construct such a set by writing out a &lt;code&gt;Union&lt;/code&gt; of the types in question, but then this set would not be extensible as &lt;code&gt;Union&lt;/code&gt;-types cannot be altered after creation. However, such an extensible set can be programmed with a design pattern often referred to as a &lt;a href=&quot;https://github.com/JuliaLang/julia/issues/2345#issuecomment-54537633&quot;&gt;&quot;Holy-trait&quot;&lt;/a&gt;.</source>
          <target state="translated">上記の反復ディスパッチの自然な拡張は、タイプ階層によって定義されたセットから独立しているタイプのセットでディスパッチできるようにするメソッド選択にレイヤーを追加することです。私たちは、書き出すことにより、このようなセットを構築することができ &lt;code&gt;Union&lt;/code&gt; 問題の種類のを、しかし、のように、このセットは拡張可能ではないでしょう &lt;code&gt;Union&lt;/code&gt; -typesは、作成後に変更することはできません。ただし、このような拡張可能なセットは、&lt;a href=&quot;https://github.com/JuliaLang/julia/issues/2345#issuecomment-54537633&quot;&gt;「聖特性」&lt;/a&gt;と呼ばれることが多い設計パターンでプログラムできます。</target>
        </trans-unit>
        <trans-unit id="1df2e0e7411bff84daf33858b6c998ccc3af6df2" translate="yes" xml:space="preserve">
          <source>A negative value returned from &lt;code&gt;f&lt;/code&gt; stops the tree walk. A positive value means that the entry will be skipped if &lt;code&gt;post&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; から返される負の値は、ツリーのウォークを停止します。正の値は、 &lt;code&gt;post&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合にエントリがスキップされることを意味します。</target>
        </trans-unit>
        <trans-unit id="62d79b805fd70e21e9dc784de34e11e7bbeb08de" translate="yes" xml:space="preserve">
          <source>A new local scope is introduced by most code blocks (see above &lt;a href=&quot;#man-scope-table&quot;&gt;table&lt;/a&gt; for a complete list). Some programming languages require explicitly declaring new variables before using them. Explicit declaration works in Julia too: in any local scope, writing &lt;code&gt;local x&lt;/code&gt; declares a new local variable in that scope, regardless of whether there is already a variable named &lt;code&gt;x&lt;/code&gt; in an outer scope or not. Declaring each new local like this is somewhat verbose and tedious, however, so Julia, like many other languages, considers assignment to a new variable in a local scope to implicitly declare that variable as a new local. Mostly this is pretty intuitive, but as with many things that behave intuitively, the details are more subtle than one might na&amp;iuml;vely imagine.</source>
          <target state="translated">ほとんどのコードブロックで新しいローカルスコープが導入されています（完全なリストについては、上記の&lt;a href=&quot;#man-scope-table&quot;&gt;表&lt;/a&gt;を参照してください）。一部のプログラミング言語では、新しい変数を使用する前に、それらを明示的に宣言する必要があります。明示的な宣言はJuliaでも機能します。どのローカルスコープでも、 &lt;code&gt;local x&lt;/code&gt; 書き込むと、外部スコープに &lt;code&gt;x&lt;/code&gt; という名前の変数が既に存在するかどうかに関係なく、そのスコープに新しいローカル変数が宣言されます。このように新しいローカルを宣言するのはやや冗長で面倒ですが、Juliaは他の多くの言語と同様に、ローカルスコープ内の新しい変数への割り当てを検討して、その変数を新しいローカルとして暗黙的に宣言します。ほとんどの場合、これは非常に直感的ですが、直感的に動作する多くのものと同様に、細部は素朴に想像するよりも微妙です。</target>
        </trans-unit>
        <trans-unit id="6eadc295d0ba924158738dd40574dc88fa55d3a0" translate="yes" xml:space="preserve">
          <source>A new local scope is introduced by most code blocks (see above &lt;a href=&quot;#man-scope-table-1&quot;&gt;table&lt;/a&gt; for a complete list). A local scope inherits all the variables from a parent local scope, both for reading and writing. Unlike global scopes, local scopes are not namespaces, thus variables in an inner scope cannot be retrieved from the parent scope through some sort of qualified access.</source>
          <target state="translated">新しいローカルスコープは、ほとんどのコードブロックによって導入されています（完全なリストについては、上記の&lt;a href=&quot;#man-scope-table-1&quot;&gt;表&lt;/a&gt;を参照してください）。ローカルスコープは、読み取りと書き込みの両方で、親ローカルスコープからすべての変数を継承します。グローバルスコープとは異なり、ローカルスコープは名前空間ではないため、内部スコープの変数は、何らかの修飾されたアクセスを通じて親スコープから取得できません。</target>
        </trans-unit>
        <trans-unit id="d714251afe7092bca2f3b7a144d31cf965234924" translate="yes" xml:space="preserve">
          <source>A not-a-number value of type &lt;a href=&quot;#Core.Float16&quot;&gt;&lt;code&gt;Float16&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#Core.Float16&quot;&gt; &lt;code&gt;Float16&lt;/code&gt; &lt;/a&gt;型の非数値。</target>
        </trans-unit>
        <trans-unit id="2193a2ca1ad4d9733b4b0300e7ecba88f3943810" translate="yes" xml:space="preserve">
          <source>A not-a-number value of type &lt;a href=&quot;#Core.Float32&quot;&gt;&lt;code&gt;Float32&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#Core.Float32&quot;&gt; &lt;code&gt;Float32&lt;/code&gt; &lt;/a&gt;型の非数値。</target>
        </trans-unit>
        <trans-unit id="81968f8bb93ba2bc693aa91379d45e0967799536" translate="yes" xml:space="preserve">
          <source>A not-a-number value of type &lt;a href=&quot;#Core.Float64&quot;&gt;&lt;code&gt;Float64&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#Core.Float64&quot;&gt; &lt;code&gt;Float64&lt;/code&gt; &lt;/a&gt;型の非数値。</target>
        </trans-unit>
        <trans-unit id="91d3c0787a3293d9e014f25bc097c52cd39aa358" translate="yes" xml:space="preserve">
          <source>A numeric literal placed directly before an identifier or parentheses, e.g. &lt;code&gt;2x&lt;/code&gt; or &lt;code&gt;2(x+y)&lt;/code&gt;, is treated as a multiplication, except with higher precedence than other binary operations. See &lt;a href=&quot;../integers-and-floating-point-numbers/index#man-numeric-literal-coefficients&quot;&gt;Numeric Literal Coefficients&lt;/a&gt; for details.</source>
          <target state="translated">識別子または括弧の直前に配置された数値リテラル &lt;code&gt;2(x+y)&lt;/code&gt; &lt;code&gt;2x&lt;/code&gt; または2（x + y）など）は、他の2項演算よりも優先順位が高い場合を除いて、乗算として扱われます。詳細については、&lt;a href=&quot;../integers-and-floating-point-numbers/index#man-numeric-literal-coefficients&quot;&gt;数値リテラル係数&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="bf0553a64a83d6adf63b024a57032beb1f6f23e7" translate="yes" xml:space="preserve">
          <source>A one-dimensional &lt;a href=&quot;#SharedArrays.SharedArray&quot;&gt;&lt;code&gt;SharedArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">1次元の&lt;a href=&quot;#SharedArrays.SharedArray&quot;&gt; &lt;code&gt;SharedArray&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="763a944bd46fad5722e83f3b2781f484dab35fa0" translate="yes" xml:space="preserve">
          <source>A package can only be loaded once per Julia session. If you have run &lt;code&gt;import Example&lt;/code&gt; in the current Julia session, you will have to restart Julia and rerun &lt;code&gt;activate tutorial&lt;/code&gt; in the Pkg REPL. &lt;a href=&quot;https://github.com/timholy/Revise.jl/&quot;&gt;Revise.jl&lt;/a&gt; can make this process significantly more pleasant, but setting it up is beyond the scope of this guide.</source>
          <target state="translated">パッケージは、Juliaセッションごとに1回だけロードできます。現在のJuliaセッションで &lt;code&gt;import Example&lt;/code&gt; を実行した場合は、Juliaを再 &lt;code&gt;activate tutorial&lt;/code&gt; して、Pkg REPLのアクティブ化チュートリアルを再実行する必要があります。&lt;a href=&quot;https://github.com/timholy/Revise.jl/&quot;&gt;Revise.jlを&lt;/a&gt;使用すると、このプロセスを大幅に快適にすることができますが、設定はこのガイドの範囲を超えています。</target>
        </trans-unit>
        <trans-unit id="d8ea4ea99a9ccce09db2edcbcf21139124c0c674" translate="yes" xml:space="preserve">
          <source>A package with a project file but no explicit UUID can only be depended on by packages without project files since dummy UUIDs assigned to these packages are strictly internal.</source>
          <target state="translated">プロジェクトファイルを持っていて明示的な UUID を持たないパッケージは、 プロジェクトファイルを持たないパッケージにのみ依存することができます。</target>
        </trans-unit>
        <trans-unit id="74b114825488547a02a0f9d88544ac2cd2767c9b" translate="yes" xml:space="preserve">
          <source>A package with a project file cannot depend on one without a project file since packages with project files can only load packages in &lt;code&gt;graph&lt;/code&gt; and packages without project files do not appear in &lt;code&gt;graph&lt;/code&gt;.</source>
          <target state="translated">プロジェクトファイルを持つパッケージのみでパッケージを読み込むことができるので、プロジェクトファイルとパッケージは、プロジェクトファイルなしで1に依存することはできません &lt;code&gt;graph&lt;/code&gt; プロジェクトファイルなしとパッケージに表示されません &lt;code&gt;graph&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd75d89f707123dd68c78d210bdb2e047dca58d2" translate="yes" xml:space="preserve">
          <source>A package without a project file can depend on any top-level dependency, and since every package in a package directory is available at the top-level, it can import all packages in the environment.</source>
          <target state="translated">プロジェクトファイルを持たないパッケージは、トップレベルの依存関係に依存することができ、パッケージディレクトリ内のすべてのパッケージがトップレベルで利用可能なので、環境内のすべてのパッケージをインポートすることができます。</target>
        </trans-unit>
        <trans-unit id="5392bfe5103ecd0e6030986407ee36c2237b3b31" translate="yes" xml:space="preserve">
          <source>A paragraph is a block of plain text, possibly containing any number of inline elements defined in the &lt;a href=&quot;#Inline-elements&quot;&gt;Inline elements&lt;/a&gt; section above, with one or more blank lines above and below it.</source>
          <target state="translated">段落はプレーンテキストのブロックであり、上記の[&lt;a href=&quot;#Inline-elements&quot;&gt;インライン要素]&lt;/a&gt;セクションで定義された任意の数のインライン要素が含まれている可能性があり、その上下に1つ以上の空白行があります。</target>
        </trans-unit>
        <trans-unit id="b56c2cd76cad76c5809c4c87d958f6925a4c437f" translate="yes" xml:space="preserve">
          <source>A paragraph is a block of plain text, possibly containing any number of inline elements defined in the &lt;a href=&quot;#Inline-elements-1&quot;&gt;Inline elements&lt;/a&gt; section above, with one or more blank lines above and below it.</source>
          <target state="translated">段落はプレーンテキストのブロックであり、上記の[ &lt;a href=&quot;#Inline-elements-1&quot;&gt;インライン要素]&lt;/a&gt;セクションで定義された任意の数のインライン要素を含み、その上下に1行以上の空白行があります。</target>
        </trans-unit>
        <trans-unit id="6007e06cc6ef0228d827b11a1334d34e7c3bc855" translate="yes" xml:space="preserve">
          <source>A particularly useful case of a &lt;code&gt;Union&lt;/code&gt; type is &lt;code&gt;Union{T, Nothing}&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; can be any type and &lt;a href=&quot;../../base/base/index#Core.Nothing&quot;&gt;&lt;code&gt;Nothing&lt;/code&gt;&lt;/a&gt; is the singleton type whose only instance is the object &lt;a href=&quot;../../base/constants/index#Core.nothing&quot;&gt;&lt;code&gt;nothing&lt;/code&gt;&lt;/a&gt;. This pattern is the Julia equivalent of &lt;a href=&quot;https://en.wikipedia.org/wiki/Nullable_type&quot;&gt;&lt;code&gt;Nullable&lt;/code&gt;, &lt;code&gt;Option&lt;/code&gt; or &lt;code&gt;Maybe&lt;/code&gt;&lt;/a&gt; types in other languages. Declaring a function argument or a field as &lt;code&gt;Union{T, Nothing}&lt;/code&gt; allows setting it either to a value of type &lt;code&gt;T&lt;/code&gt;, or to &lt;code&gt;nothing&lt;/code&gt; to indicate that there is no value. See &lt;a href=&quot;../faq/index#faq-nothing&quot;&gt;this FAQ entry&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;Union&lt;/code&gt; 型の特に有用なケースは &lt;code&gt;Union{T, Nothing}&lt;/code&gt; 。ここで、 &lt;code&gt;T&lt;/code&gt; は任意の型であり、&lt;a href=&quot;../../base/base/index#Core.Nothing&quot;&gt; &lt;code&gt;Nothing&lt;/code&gt; &lt;/a&gt;は、唯一のインスタンスがオブジェクト&lt;a href=&quot;../../base/constants/index#Core.nothing&quot;&gt; &lt;code&gt;nothing&lt;/code&gt; &lt;/a&gt;であるシングルトン型です。このパターンは、他の言語の&lt;a href=&quot;https://en.wikipedia.org/wiki/Nullable_type&quot;&gt; &lt;code&gt;Nullable&lt;/code&gt; 、 &lt;code&gt;Option&lt;/code&gt; 、または &lt;code&gt;Maybe&lt;/code&gt; &lt;/a&gt;タイプに相当するJuliaです。関数の引数またはフィールドを &lt;code&gt;Union{T, Nothing}&lt;/code&gt; として宣言すると、タイプ &lt;code&gt;T&lt;/code&gt; の値に設定することも、値が &lt;code&gt;nothing&lt;/code&gt; ことを示すためにnothingに設定することもできます。詳細については、&lt;a href=&quot;../faq/index#faq-nothing&quot;&gt;このFAQエントリ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="83f9c9755a3a3b90210c6624d61e0b0a1f59e0fa" translate="yes" xml:space="preserve">
          <source>A particularly useful case of a &lt;code&gt;Union&lt;/code&gt; type is &lt;code&gt;Union{T, Nothing}&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; can be any type and &lt;a href=&quot;../../base/base/index#Core.Nothing&quot;&gt;&lt;code&gt;Nothing&lt;/code&gt;&lt;/a&gt; is the singleton type whose only instance is the object &lt;a href=&quot;../../base/constants/index#Core.nothing&quot;&gt;&lt;code&gt;nothing&lt;/code&gt;&lt;/a&gt;. This pattern is the Julia equivalent of &lt;a href=&quot;https://en.wikipedia.org/wiki/Nullable_type&quot;&gt;&lt;code&gt;Nullable&lt;/code&gt;, &lt;code&gt;Option&lt;/code&gt; or &lt;code&gt;Maybe&lt;/code&gt;&lt;/a&gt; types in other languages. Declaring a function argument or a field as &lt;code&gt;Union{T, Nothing}&lt;/code&gt; allows setting it either to a value of type &lt;code&gt;T&lt;/code&gt;, or to &lt;code&gt;nothing&lt;/code&gt; to indicate that there is no value. See &lt;a href=&quot;../faq/index#faq-nothing-1&quot;&gt;this FAQ entry&lt;/a&gt; for more information.</source>
          <target state="translated">特に有用な場合 &lt;code&gt;Union&lt;/code&gt; タイプは &lt;code&gt;Union{T, Nothing}&lt;/code&gt; 、 &lt;code&gt;T&lt;/code&gt; は任意のタイプとすることができ、&lt;a href=&quot;../../base/base/index#Core.Nothing&quot;&gt; &lt;code&gt;Nothing&lt;/code&gt; &lt;/a&gt;その唯一のインスタンスオブジェクトではないシングルトンタイプである&lt;a href=&quot;../../base/constants/index#Core.nothing&quot;&gt; &lt;code&gt;nothing&lt;/code&gt; &lt;/a&gt;。このパターンは、他の言語でのJuliaの&lt;a href=&quot;https://en.wikipedia.org/wiki/Nullable_type&quot;&gt; &lt;code&gt;Nullable&lt;/code&gt; 、 &lt;code&gt;Option&lt;/code&gt; 、または &lt;code&gt;Maybe&lt;/code&gt; &lt;/a&gt;型に相当します。関数の引数として、またはフィールド宣言 &lt;code&gt;Union{T, Nothing}&lt;/code&gt; 型の値のいずれかを設定可能に &lt;code&gt;T&lt;/code&gt; 、またはに &lt;code&gt;nothing&lt;/code&gt; 値がないことを示すために。詳細については、&lt;a href=&quot;../faq/index#faq-nothing-1&quot;&gt;このFAQエントリ&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c0f8b8ac2cfde0d10f30bb94c874c9e1f1def48e" translate="yes" xml:space="preserve">
          <source>A pointer to the data block</source>
          <target state="translated">データブロックへのポインタ</target>
        </trans-unit>
        <trans-unit id="6b9ee627484ba20558d37b2c66115f6d170670ea" translate="yes" xml:space="preserve">
          <source>A positive &lt;code&gt;Int&lt;/code&gt; that determines how much time the max-sum subroutine &lt;code&gt;MaxSum.maxsum()&lt;/code&gt; of the package dependency resolver will devote to attempting satisfying constraints before giving up: this value is by default &lt;code&gt;1&lt;/code&gt;, and larger values correspond to larger amounts of time.</source>
          <target state="translated">パッケージの依存関係リゾルバーのmax-sumサブルーチン &lt;code&gt;MaxSum.maxsum()&lt;/code&gt; が、あきらめる前に制約を満たすために費やす時間を決定する正の &lt;code&gt;Int&lt;/code&gt; ：この値はデフォルトで &lt;code&gt;1&lt;/code&gt; であり、値が大きいほど時間が長くなります。</target>
        </trans-unit>
        <trans-unit id="30e83519d088c9c533da7a48902b81020f8078b5" translate="yes" xml:space="preserve">
          <source>A pre-computed &lt;code&gt;mean&lt;/code&gt; may be provided.</source>
          <target state="translated">事前に計算された &lt;code&gt;mean&lt;/code&gt; が提供される場合があります。</target>
        </trans-unit>
        <trans-unit id="d945dad8bbc2c247c2aec246f6c166ddc81c4918" translate="yes" xml:space="preserve">
          <source>A pre-computed &lt;code&gt;mean&lt;/code&gt; may be provided. When &lt;code&gt;dims&lt;/code&gt; is specified, &lt;code&gt;mean&lt;/code&gt; must be an array with the same shape as &lt;code&gt;mean(itr, dims=dims)&lt;/code&gt; (additional trailing singleton dimensions are allowed).</source>
          <target state="translated">事前に計算された &lt;code&gt;mean&lt;/code&gt; が提供される場合があります。 &lt;code&gt;dims&lt;/code&gt; を指定する場合、 &lt;code&gt;mean&lt;/code&gt; は &lt;code&gt;mean(itr, dims=dims)&lt;/code&gt; と同じ形状の配列である必要があります（追加の末尾のシングルトン次元が許可されます）。</target>
        </trans-unit>
        <trans-unit id="e2cb212a617bce583ce37ac7b92063a39d21aed2" translate="yes" xml:space="preserve">
          <source>A prefix &lt;code&gt;&amp;amp;&lt;/code&gt; is used on an argument to &lt;a href=&quot;../../base/c/index#ccall&quot;&gt;&lt;code&gt;ccall&lt;/code&gt;&lt;/a&gt; to indicate that a pointer to a scalar argument should be passed instead of the scalar value itself (required for all Fortran function arguments, as noted above). The following example computes a dot product using a BLAS function.</source>
          <target state="translated">接頭辞 &lt;code&gt;&amp;amp;&lt;/code&gt; は、&lt;a href=&quot;../../base/c/index#ccall&quot;&gt; &lt;code&gt;ccall&lt;/code&gt; の&lt;/a&gt;引数で使用され、スカラー値自体ではなく、スカラー引数へのポインターが渡されることを示します（上記のように、すべてのFortran関数引数に必要です）。次の例では、BLAS関数を使用して内積を計算します。</target>
        </trans-unit>
        <trans-unit id="1649f26efb9cb12037079805dd99e4da0fb754f9" translate="yes" xml:space="preserve">
          <source>A primitive type is a concrete type whose data consists of plain old bits. Classic examples of primitive types are integers and floating-point values. Unlike most languages, Julia lets you declare your own primitive types, rather than providing only a fixed set of built-in ones. In fact, the standard primitive types are all defined in the language itself:</source>
          <target state="translated">原始型とは、データが古いビットで構成された具体的な型のことです。原始型の古典的な例としては、整数と浮動小数点値があります。多くの言語とは異なり、Juliaでは組み込み型の固定されたセットだけを提供するのではなく、独自の原始型を宣言することができます。実際、標準的なプリミティブ型はすべてこの言語で定義されています。</target>
        </trans-unit>
        <trans-unit id="f4a9df194804c22a7662de8018248499081325a7" translate="yes" xml:space="preserve">
          <source>A project environment is determined by a directory containing a project file called &lt;code&gt;Project.toml&lt;/code&gt;, and optionally a manifest file called &lt;code&gt;Manifest.toml&lt;/code&gt;. These files may also be called &lt;code&gt;JuliaProject.toml&lt;/code&gt; and &lt;code&gt;JuliaManifest.toml&lt;/code&gt;, in which case &lt;code&gt;Project.toml&lt;/code&gt; and &lt;code&gt;Manifest.toml&lt;/code&gt; are ignored. This allows for coexistence with other tools that might consider files called &lt;code&gt;Project.toml&lt;/code&gt; and &lt;code&gt;Manifest.toml&lt;/code&gt; significant. For pure Julia projects, however, the names &lt;code&gt;Project.toml&lt;/code&gt; and &lt;code&gt;Manifest.toml&lt;/code&gt; are preferred.</source>
          <target state="translated">プロジェクト環境は、 &lt;code&gt;Project.toml&lt;/code&gt; というプロジェクトファイルと、オプションで &lt;code&gt;Manifest.toml&lt;/code&gt; というマニフェストファイルを含むディレクトリによって決定されます。これらのファイルは、 &lt;code&gt;JuliaProject.toml&lt;/code&gt; および &lt;code&gt;JuliaManifest.toml&lt;/code&gt; と呼ばれることもあります。この場合、 &lt;code&gt;Project.toml&lt;/code&gt; および &lt;code&gt;Manifest.toml&lt;/code&gt; は無視されます。これにより、 &lt;code&gt;Project.toml&lt;/code&gt; および &lt;code&gt;Manifest.toml&lt;/code&gt; というファイルを重要であると見なす可能性のある他のツールとの共存が可能になります。ただし、純粋なJuliaプロジェクトの場合、 &lt;code&gt;Project.toml&lt;/code&gt; および &lt;code&gt;Manifest.toml&lt;/code&gt; という名前が推奨されます。</target>
        </trans-unit>
        <trans-unit id="69645bb907ec77da55ad793cb959dcc26c6879c9" translate="yes" xml:space="preserve">
          <source>A pure function can only depend on immutable information. This also means a &lt;code&gt;@pure&lt;/code&gt; function cannot use any global mutable state, including generic functions. Calls to generic functions depend on method tables which are mutable global state. Use with caution, incorrect &lt;code&gt;@pure&lt;/code&gt; annotation of a function may introduce hard to identify bugs. Double check for calls to generic functions.</source>
          <target state="translated">純粋な関数は、不変の情報にのみ依存できます。これは、 &lt;code&gt;@pure&lt;/code&gt; 関数が、汎用関数を含むグローバルな可変状態を使用できないことも意味します。ジェネリック関数の呼び出しは、変更可能なグローバル状態であるメソッドテーブルに依存します。関数の不適切な &lt;code&gt;@pure&lt;/code&gt; アノテーションを使用すると、バグの特定が困難になる可能性があるため、注意して使用してください。ジェネリック関数の呼び出しを再確認してください。</target>
        </trans-unit>
        <trans-unit id="a38ae91b9307c68d0e967bb52415d492ca7b2c6c" translate="yes" xml:space="preserve">
          <source>A pure function can only depend on immutable information. This also means a &lt;code&gt;@pure&lt;/code&gt; function cannot use any global mutable state, including generic functions. Calls to generic functions depend on method tables which are mutable global state. Use with caution, incorrect &lt;code&gt;@pure&lt;/code&gt; annotation of a function may introduce hard to identify bugs. Double check for calls to generic functions. This macro is intended for internal compiler use and may be subject to changes.</source>
          <target state="translated">純粋関数は不変の情報にのみ依存することができます。これは、 &lt;code&gt;@pure&lt;/code&gt; 関数がジェネリック関数を含むグローバルな可変状態を使用できないことも意味します。ジェネリック関数の呼び出しは、可変のグローバル状態であるメソッドテーブルに依存します。関数の &lt;code&gt;@pure&lt;/code&gt; アノテーションが正しくないと、バグを特定するのが困難になる可能性があるため、注意して使用してください。ジェネリック関数の呼び出しを再確認してください。このマクロは内部コンパイラでの使用を目的としており、変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="ceda790c7683875242632789b7229b6b3328dc5d" translate="yes" xml:space="preserve">
          <source>A quoted piece of code, that does not support interpolation. See the &lt;a href=&quot;../../manual/metaprogramming/index#man-quote-node&quot;&gt;manual section about QuoteNodes&lt;/a&gt; for details.</source>
          <target state="translated">補間をサポートしない引用符で囲まれたコード。詳細については、&lt;a href=&quot;../../manual/metaprogramming/index#man-quote-node&quot;&gt;QuoteNodes&lt;/a&gt;に関するマニュアルセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="f6f0f859ed475e8984520389a632de12d979f1bf" translate="yes" xml:space="preserve">
          <source>A range &lt;code&gt;r&lt;/code&gt; where &lt;code&gt;r[i]&lt;/code&gt; produces values of type &lt;code&gt;T&lt;/code&gt; (in the second form, &lt;code&gt;T&lt;/code&gt; is deduced automatically), parameterized by a &lt;code&gt;ref&lt;/code&gt;erence value, a &lt;code&gt;step&lt;/code&gt;, and the &lt;code&gt;len&lt;/code&gt;gth. By default &lt;code&gt;ref&lt;/code&gt; is the starting value &lt;code&gt;r[1]&lt;/code&gt;, but alternatively you can supply it as the value of &lt;code&gt;r[offset]&lt;/code&gt; for some other index &lt;code&gt;1 &amp;lt;= offset &amp;lt;= len&lt;/code&gt;. In conjunction with &lt;code&gt;TwicePrecision&lt;/code&gt; this can be used to implement ranges that are free of roundoff error.</source>
          <target state="translated">範囲 &lt;code&gt;r&lt;/code&gt; &lt;code&gt;r[i]&lt;/code&gt; 式の値が生成さ &lt;code&gt;T&lt;/code&gt; （第2形態において、 &lt;code&gt;T&lt;/code&gt; は、によってパラメータ自動的に推定される）、 &lt;code&gt;ref&lt;/code&gt; レンス値、 &lt;code&gt;step&lt;/code&gt; 、及び &lt;code&gt;len&lt;/code&gt; GTHを。デフォルトでは &lt;code&gt;ref&lt;/code&gt; は開始値 &lt;code&gt;r[1]&lt;/code&gt; ですが、別の方法として、他のインデックス &lt;code&gt;1 &amp;lt;= offset &amp;lt;= len&lt;/code&gt; の &lt;code&gt;r[offset]&lt;/code&gt; 値として指定することもできます。 &lt;code&gt;TwicePrecision&lt;/code&gt; と組み合わせて使用すると、丸め誤差のない範囲を実装できます。</target>
        </trans-unit>
        <trans-unit id="c9b444cdaa1ec0c32645903217d293c523a2b655" translate="yes" xml:space="preserve">
          <source>A range parameterized by a &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; of type &lt;code&gt;T&lt;/code&gt;, filled with elements spaced by &lt;code&gt;1&lt;/code&gt; from &lt;code&gt;start&lt;/code&gt; until &lt;code&gt;stop&lt;/code&gt; is exceeded. The syntax &lt;code&gt;a:b&lt;/code&gt; with &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; both &lt;code&gt;Integer&lt;/code&gt;s creates a &lt;code&gt;UnitRange&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; の &lt;code&gt;start&lt;/code&gt; と &lt;code&gt;stop&lt;/code&gt; でパラメーター化された範囲で、 &lt;code&gt;start&lt;/code&gt; から &lt;code&gt;stop&lt;/code&gt; を超えるまで &lt;code&gt;1&lt;/code&gt; の間隔を空けた要素で埋められます。構文 &lt;code&gt;a:b&lt;/code&gt; と &lt;code&gt;a&lt;/code&gt; および &lt;code&gt;b&lt;/code&gt; 両方の &lt;code&gt;Integer&lt;/code&gt; sは、 &lt;code&gt;UnitRange&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="f6f1f96e933c37623ad62bee872115dc2545ea76" translate="yes" xml:space="preserve">
          <source>A range with &lt;code&gt;len&lt;/code&gt; linearly spaced elements between its &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt;. The size of the spacing is controlled by &lt;code&gt;len&lt;/code&gt;, which must be an &lt;code&gt;Int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; と &lt;code&gt;stop&lt;/code&gt; の間に &lt;code&gt;len&lt;/code&gt; の線形間隔の要素がある範囲。間隔のサイズは &lt;code&gt;len&lt;/code&gt; によって制御されます。これは &lt;code&gt;Int&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="706e2d69e0228bb191f57826b2fe6dee1a0d2fd7" translate="yes" xml:space="preserve">
          <source>A related strategy exploits &lt;code&gt;promote&lt;/code&gt; to bring &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; to a common type:</source>
          <target state="translated">関連する戦略のエクスプロイトは、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; を共通の型にすることを &lt;code&gt;promote&lt;/code&gt; しています。</target>
        </trans-unit>
        <trans-unit id="d7c0e6452fd18c0732cb625754236d5f55a408f6" translate="yes" xml:space="preserve">
          <source>A related third strategy is to use a yield-free queue. We don't currently have a lock-free queue implemented in Base, but &lt;code&gt;Base.InvasiveLinkedListSynchronized{T}&lt;/code&gt; is suitable. This can frequently be a good strategy to use for code with event loops. For example, this strategy is employed by &lt;code&gt;Gtk.jl&lt;/code&gt; to manage lifetime ref-counting. In this approach, we don't do any explicit work inside the &lt;code&gt;finalizer&lt;/code&gt;, and instead add it to a queue to run at a safer time. In fact, Julia's task scheduler already uses this, so defining the finalizer as &lt;code&gt;x -&amp;gt; @spawn do_cleanup(x)&lt;/code&gt; is one example of this approach. Note however that this doesn't control which thread &lt;code&gt;do_cleanup&lt;/code&gt; runs on, so &lt;code&gt;do_cleanup&lt;/code&gt; would still need to acquire a lock. That doesn't need to be true if you implement your own queue, as you can explicitly only drain that queue from your thread.</source>
          <target state="translated">関連する3番目の戦略は、イールドフリーキューを使用することです。現在、Baseにはロックフリーキューが実装されていませんが、 &lt;code&gt;Base.InvasiveLinkedListSynchronized{T}&lt;/code&gt; が適しています。これは、イベントループのあるコードに使用するのに適した戦略であることがよくあります。たとえば、この戦略は、生涯の参照カウントを管理するために &lt;code&gt;Gtk.jl&lt;/code&gt; によって採用されています。このアプローチでは、 &lt;code&gt;finalizer&lt;/code&gt; 内で明示的な作業を行わず、代わりにキューに追加して、より安全な時間に実行します。実際、Juliaのタスクスケジューラはすでにこれを使用しているため、ファイナライザーを &lt;code&gt;x -&amp;gt; @spawn do_cleanup(x)&lt;/code&gt; として定義することはこのアプローチの一例です。ただし、これは &lt;code&gt;do_cleanup&lt;/code&gt; が実行されるスレッドを制御しないため、 &lt;code&gt;do_cleanup&lt;/code&gt; に注意してください。それでもロックを取得する必要があります。独自のキューを実装する場合は、そのキューをスレッドから明示的にのみ排出できるため、これが当てはまる必要はありません。</target>
        </trans-unit>
        <trans-unit id="1aacdb7c22de01fd91d580f3ce3c32f6aebf1795" translate="yes" xml:space="preserve">
          <source>A remote call returns a &lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; to its result. Remote calls return immediately; the process that made the call proceeds to its next operation while the remote call happens somewhere else. You can wait for a remote call to finish by calling &lt;a href=&quot;../../base/parallel/index#Base.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt; on the returned &lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;, and you can obtain the full value of the result using &lt;code&gt;fetch&lt;/code&gt;.</source>
          <target state="translated">リモート呼び出しは、その結果に&lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;を返します。リモート呼び出しはすぐに戻ります。呼び出しを行ったプロセスは次の操作に進みますが、リモート呼び出しは別の場所で行われます。返された&lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;で&lt;a href=&quot;../../base/parallel/index#Base.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt;を呼び出すことにより、リモート呼び出しが完了するのを待つことができ、 &lt;code&gt;fetch&lt;/code&gt; を使用して結果の完全な値を取得できます。</target>
        </trans-unit>
        <trans-unit id="c718be7a47524e3c8c121a2838b8196bfca32d81" translate="yes" xml:space="preserve">
          <source>A return type can also be specified in the function declaration using the &lt;code&gt;::&lt;/code&gt; operator. This converts the return value to the specified type.</source>
          <target state="translated">&lt;code&gt;::&lt;/code&gt; 演算子を使用して、関数宣言で戻り値の型を指定することもできます。これにより、戻り値が指定された型に変換されます。</target>
        </trans-unit>
        <trans-unit id="f794450cdef21a1d306e7fb59ec235acfc19011a" translate="yes" xml:space="preserve">
          <source>A return type can be specified in the function declaration using the &lt;code&gt;::&lt;/code&gt; operator. This converts the return value to the specified type.</source>
          <target state="translated">戻り値の型は、 &lt;code&gt;::&lt;/code&gt; 演算子を使用して関数宣言で指定できます。これにより、戻り値が指定された型に変換されます。</target>
        </trans-unit>
        <trans-unit id="487eaf5a6ef062e68fb2638581518230a5bbf1cb" translate="yes" xml:space="preserve">
          <source>A return type of &lt;code&gt;Union{}&lt;/code&gt; means the function will not return i.e. C++11 &lt;code&gt;[[noreturn]]&lt;/code&gt; or C11 &lt;code&gt;_Noreturn&lt;/code&gt; (e.g. &lt;code&gt;jl_throw&lt;/code&gt; or &lt;code&gt;longjmp&lt;/code&gt;). Do not use this for functions that return no value (&lt;code&gt;void&lt;/code&gt;) but do return, use &lt;code&gt;Cvoid&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;Union{}&lt;/code&gt; 戻り値の型は、関数がC ++ 11 &lt;code&gt;[[noreturn]]&lt;/code&gt; またはC11 &lt;code&gt;_Noreturn&lt;/code&gt; （例： &lt;code&gt;jl_throw&lt;/code&gt; または &lt;code&gt;longjmp&lt;/code&gt; ）を返さないことを意味します。値を返さない関数（ &lt;code&gt;void&lt;/code&gt; ）にはこれを使用せずに戻ります。代わりに &lt;code&gt;Cvoid&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="0df8658c1a2663d5b4b16580728c11544340a3ac" translate="yes" xml:space="preserve">
          <source>A return type of &lt;code&gt;Union{}&lt;/code&gt; means the function will not return, i.e., C++11 &lt;code&gt;[[noreturn]]&lt;/code&gt; or C11 &lt;code&gt;_Noreturn&lt;/code&gt; (e.g. &lt;code&gt;jl_throw&lt;/code&gt; or &lt;code&gt;longjmp&lt;/code&gt;). Do not use this for functions that return no value (&lt;code&gt;void&lt;/code&gt;) but do return, use &lt;code&gt;Cvoid&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;Union{}&lt;/code&gt; 戻り値の型は、関数が返されないことを意味します。つまり、C ++ 11 &lt;code&gt;[[noreturn]]&lt;/code&gt; または &lt;code&gt;_Noreturn&lt;/code&gt; （ &lt;code&gt;jl_throw&lt;/code&gt; または &lt;code&gt;longjmp&lt;/code&gt; など）です。値を返さない（ &lt;code&gt;void&lt;/code&gt; ）関数にはこれを使用しないでください。代わりに &lt;code&gt;Cvoid&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="3d36c3c7861e0bdac1682c4b5f59e170ca861f5e" translate="yes" xml:space="preserve">
          <source>A rich language of types for constructing and describing objects, that can also optionally be used to make type declarations</source>
          <target state="translated">オブジェクトを構築・記述するための豊富な型の言語で、オプションで型宣言を行うこともできます。</target>
        </trans-unit>
        <trans-unit id="3b35eab36ca2f92e10ca8fc1b981602576d246ef" translate="yes" xml:space="preserve">
          <source>A sampler for types, containing no other information. The default fallback for &lt;code&gt;Sampler&lt;/code&gt; when called with types.</source>
          <target state="translated">他の情報を含まないタイプのサンプラー。タイプで呼び出されたときの &lt;code&gt;Sampler&lt;/code&gt; のデフォルトのフォールバック。</target>
        </trans-unit>
        <trans-unit id="72264caef899e2b19ef0b87abaee4b3d2fbc99bb" translate="yes" xml:space="preserve">
          <source>A sampling profiler does not provide complete line-by-line coverage, because the backtraces occur at intervals (by default, 1 ms on Unix systems and 10 ms on Windows, although the actual scheduling is subject to operating system load). Moreover, as discussed further below, because samples are collected at a sparse subset of all execution points, the data collected by a sampling profiler is subject to statistical noise.</source>
          <target state="translated">サンプリング・プロファイラは、バックトレースが間隔をおいて行われるため、ライン・バイ・ラインの完全なカバレッジを提供することはできません(デフォルトでは、Unix システムでは 1 ms、Windows では 10 ms となっていますが、実際のスケジューリングはオペレーティング・システムの負荷に左右されます)。さらに、後述するように、サンプルはすべての実行ポイントの疎なサブセットで収集されるため、サンプリング・プロファイラによって収集されたデータは統計的なノイズの影響を受けます。</target>
        </trans-unit>
        <trans-unit id="1c43fdae247597897ddce375dd4bc720d67a5129" translate="yes" xml:space="preserve">
          <source>A scalar index. By default this includes:</source>
          <target state="translated">スカラーインデックス。デフォルトではこれが含まれます。</target>
        </trans-unit>
        <trans-unit id="2e149e1fe6cf738b9500f7f73419a47eddcaa861" translate="yes" xml:space="preserve">
          <source>A second strategy, employed by Base in a couple places, is to explicitly delay a finalizer until it may be able to acquire its lock non-recursively. The following example demonstrates how this strategy could be applied to &lt;code&gt;Distributed.finalize_ref&lt;/code&gt;:</source>
          <target state="translated">Baseがいくつかの場所で採用している2番目の戦略は、ファイナライザーが非再帰的にロックを取得できるようになるまで、ファイナライザーを明示的に遅らせることです。次の例は、この戦略を &lt;code&gt;Distributed.finalize_ref&lt;/code&gt; に適用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="b55191124d22706cdd504c425bc25474c70cfe4b" translate="yes" xml:space="preserve">
          <source>A shortened git object identifier, which can be used to identify a git object when it is unique, consisting of the initial &lt;code&gt;len&lt;/code&gt; hexadecimal digits of &lt;code&gt;hash&lt;/code&gt; (the remaining digits are ignored).</source>
          <target state="translated">&lt;code&gt;hash&lt;/code&gt; 最初の &lt;code&gt;len&lt;/code&gt; 16進数字で構成される、固有のgitオブジェクトを識別するために使用できる短縮されたgitオブジェクト識別子（残りの数字は無視されます）。</target>
        </trans-unit>
        <trans-unit id="077f5f2c61a2286cb303f8e0203873661f4fb602" translate="yes" xml:space="preserve">
          <source>A simple TCP example</source>
          <target state="translated">簡単なTCPの例</target>
        </trans-unit>
        <trans-unit id="a9e3389d4f0df30d0d029c511221cff89bde7e83" translate="yes" xml:space="preserve">
          <source>A simple example is an iterable sequence of square numbers with a defined length:</source>
          <target state="translated">簡単な例としては、定義された長さの正方数の反復可能な列があります。</target>
        </trans-unit>
        <trans-unit id="74210b965c13b3f0a92488bc76d8ed6610e194df" translate="yes" xml:space="preserve">
          <source>A simple sampler without pre-computed data</source>
          <target state="translated">事前に計算されたデータのないシンプルなサンプラー</target>
        </trans-unit>
        <trans-unit id="4f74541df487be036520d1a453fae53d9f7cabea" translate="yes" xml:space="preserve">
          <source>A simple use of this script is from the command line. Assuming that &lt;code&gt;julia-config.jl&lt;/code&gt; is located in &lt;code&gt;/usr/local/julia/share/julia&lt;/code&gt;, it can be invoked on the command line directly and takes any combination of 3 flags:</source>
          <target state="translated">このスクリプトの簡単な使い方は、コマンドラインからです。 &lt;code&gt;julia-config.jl&lt;/code&gt; が &lt;code&gt;/usr/local/julia/share/julia&lt;/code&gt; にあると仮定すると、コマンドラインから直接呼び出すことができ、3つのフラグの任意の組み合わせを取ります。</target>
        </trans-unit>
        <trans-unit id="fa70eb6573e06a90b5cea95755e1d5d87242bd36" translate="yes" xml:space="preserve">
          <source>A singleton of this type provides a hash table interface to environment variables.</source>
          <target state="translated">この型のシングルトンは、環境変数へのハッシュ・テーブル・インターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="742dc31813ae03b1c856e52c5abe6409c9fab8c0" translate="yes" xml:space="preserve">
          <source>A special syntax exists for broadcasting: &lt;code&gt;f.(args...)&lt;/code&gt; is equivalent to &lt;code&gt;broadcast(f, args...)&lt;/code&gt;, and nested &lt;code&gt;f.(g.(args...))&lt;/code&gt; calls are fused into a single broadcast loop.</source>
          <target state="translated">ブロードキャストには特別な構文が存在します： &lt;code&gt;f.(args...)&lt;/code&gt; は &lt;code&gt;broadcast(f, args...)&lt;/code&gt; args ...）と同等であり、ネストされた &lt;code&gt;f.(g.(args...))&lt;/code&gt; 呼び出しは単一のブロードキャストループに融合されます。</target>
        </trans-unit>
        <trans-unit id="c0fbd3b8f6db43e593e0be31ea0f379f85f1e4ca" translate="yes" xml:space="preserve">
          <source>A stack of &quot;depot&quot; locations where the package manager, as well as Julia's code loading mechanisms, look for package registries, installed packages, named environments, repo clones, cached compiled package images, and configuration files. By default it includes:</source>
          <target state="translated">パッケージマネージャと Julia のコード読み込み機構が、パッケージレジストリ、インストール済みパッケージ、名前付き環境、レポクローン、キャッシュされたコンパイル済みパッケージイメージ、設定ファイルを探す「depot」の場所のスタックです。デフォルトでは以下のものが含まれています。</target>
        </trans-unit>
        <trans-unit id="83cbeda4e6c8af61ba213e9c4a7b5e87e7da5098" translate="yes" xml:space="preserve">
          <source>A strided array is a subtype of &lt;code&gt;AbstractArray&lt;/code&gt; whose entries are stored in memory with fixed strides. Provided the element type of the array is compatible with BLAS, a strided array can utilize BLAS and LAPACK routines for more efficient linear algebra routines. A typical example of a user-defined strided array is one that wraps a standard &lt;code&gt;Array&lt;/code&gt; with additional structure.</source>
          <target state="translated">ストライド配列は &lt;code&gt;AbstractArray&lt;/code&gt; のサブタイプであり、そのエントリは固定ストライドでメモリに格納されます。配列の要素タイプがBLASと互換性がある場合、ストライド配列はBLASおよびLAPACKルーチンを利用して、より効率的な線形代数ルーチンを実現できます。ユーザー定義のストライド配列の典型的な例は、標準の &lt;code&gt;Array&lt;/code&gt; を追加の構造でラップしたものです。</target>
        </trans-unit>
        <trans-unit id="1b1c35701525a8cf6b4348121d4ed856a675b22b" translate="yes" xml:space="preserve">
          <source>A string containing the build triple.</source>
          <target state="translated">ビルドトリプルを含む文字列。</target>
        </trans-unit>
        <trans-unit id="8f5d09501ae972f4c8432e623c2b5b34015798e0" translate="yes" xml:space="preserve">
          <source>A string containing the full path to the directory containing the &lt;code&gt;julia&lt;/code&gt; executable.</source>
          <target state="translated">&lt;code&gt;julia&lt;/code&gt; 実行可能ファイルを含むディレクトリへのフルパスを含む文字列。</target>
        </trans-unit>
        <trans-unit id="bfd4ca3ee2c70681a147013214927fa8b03d2dc0" translate="yes" xml:space="preserve">
          <source>A string containing the script name passed to Julia from the command line. Note that the script name remains unchanged from within included files. Alternatively see &lt;a href=&quot;../file/index#Base.@__FILE__&quot;&gt;&lt;code&gt;@__FILE__&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">コマンドラインからJuliaに渡されたスクリプト名を含む文字列。インクルードされたファイル内からスクリプト名は変更されないことに注意してください。または、&lt;a href=&quot;../file/index#Base.@__FILE__&quot;&gt; &lt;code&gt;@__FILE__&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0797e0a3c7343edc1c5ee87f67440aa1e7a16452" translate="yes" xml:space="preserve">
          <source>A string giving the literal bit representation of a number.</source>
          <target state="translated">数値のリテラルビット表現を与える文字列。</target>
        </trans-unit>
        <trans-unit id="99fade2fd2012046282e2903a7ae0c96b265f5e9" translate="yes" xml:space="preserve">
          <source>A struct can also declare an abstract super type via &lt;code&gt;&amp;lt;:&lt;/code&gt; syntax:</source>
          <target state="translated">構造体は、 &lt;code&gt;&amp;lt;:&lt;/code&gt; 構文を介して抽象スーパータイプを宣言することもできます。</target>
        </trans-unit>
        <trans-unit id="d8c381a5b7c7400aeadc10868e02841473506c28" translate="yes" xml:space="preserve">
          <source>A successful invocation indicates that the request has been accepted for execution on the remote node.</source>
          <target state="translated">呼び出しが成功すると、リモートノード上での実行のためにリクエストが受け入れられたことを示します。</target>
        </trans-unit>
        <trans-unit id="62cc4725cdcde932b6f43e77c33829a7243aa044" translate="yes" xml:space="preserve">
          <source>A symbol in the current scope is not defined.</source>
          <target state="translated">現在のスコープ内のシンボルが定義されていません。</target>
        </trans-unit>
        <trans-unit id="c20565dfe8ced2501d963ee2eb2804c69c838706" translate="yes" xml:space="preserve">
          <source>A symbol representing the architecture of the build configuration.</source>
          <target state="translated">ビルド構成のアーキテクチャを表すシンボル。</target>
        </trans-unit>
        <trans-unit id="1630c742579320a925646310ce24a54343db4200" translate="yes" xml:space="preserve">
          <source>A symbol representing the name of the operating system, as returned by &lt;code&gt;uname&lt;/code&gt; of the build configuration.</source>
          <target state="translated">ビルド構成の &lt;code&gt;uname&lt;/code&gt; によって返される、オペレーティングシステムの名前を表すシンボル。</target>
        </trans-unit>
        <trans-unit id="55d0851ad9930d2d2a1ce1a82a1321a9316a97a9" translate="yes" xml:space="preserve">
          <source>A symbol representing the operator associativity can also be found by calling the built-in function &lt;code&gt;Base.operator_associativity&lt;/code&gt;:</source>
          <target state="translated">組み込み関数 &lt;code&gt;Base.operator_associativity&lt;/code&gt; を呼び出すことによって、演算子の関連付けを表すシンボルを見つけることもできます。</target>
        </trans-unit>
        <trans-unit id="31ca630f0d77e0cda110e0b86407ebc755d3a20f" translate="yes" xml:space="preserve">
          <source>A system call failed with an error code (in the &lt;code&gt;errno&lt;/code&gt; global variable).</source>
          <target state="translated">システムコールがエラーコード（ &lt;code&gt;errno&lt;/code&gt; グローバル変数内）で失敗しました。</target>
        </trans-unit>
        <trans-unit id="e7383f155bc43b22861eb93ff761378a3dfd82ac" translate="yes" xml:space="preserve">
          <source>A task created explicitly by calling &lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; is initially not known to the scheduler. This allows you to manage tasks manually using &lt;a href=&quot;../../base/parallel/index#Base.yieldto&quot;&gt;&lt;code&gt;yieldto&lt;/code&gt;&lt;/a&gt; if you wish. However, when such a task waits for an event, it still gets restarted automatically when the event happens, as you would expect.</source>
          <target state="translated">&lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt; &lt;code&gt;Task&lt;/code&gt; &lt;/a&gt;を呼び出すことによって明示的に作成されたタスクは、最初はスケジューラーに認識されません。これにより、必要に&lt;a href=&quot;../../base/parallel/index#Base.yieldto&quot;&gt; &lt;code&gt;yieldto&lt;/code&gt; &lt;/a&gt;、yieldtoを使用してタスクを手動で管理できます。ただし、そのようなタスクがイベントを待機している場合でも、予想どおり、イベントが発生すると自動的に再起動されます。</target>
        </trans-unit>
        <trans-unit id="9449233a2f73e499e6bb945337a8062b4696d604" translate="yes" xml:space="preserve">
          <source>A task created explicitly by calling &lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; is initially not known to the scheduler. This allows you to manage tasks manually using &lt;a href=&quot;../../base/parallel/index#Base.yieldto&quot;&gt;&lt;code&gt;yieldto&lt;/code&gt;&lt;/a&gt; if you wish. However, when such a task waits for an event, it still gets restarted automatically when the event happens, as you would expect. It is also possible to make the scheduler run a task whenever it can, without necessarily waiting for any events. This is done by calling &lt;a href=&quot;../../base/parallel/index#Base.schedule&quot;&gt;&lt;code&gt;schedule&lt;/code&gt;&lt;/a&gt;, or using the &lt;a href=&quot;../../base/parallel/index#Base.@async&quot;&gt;&lt;code&gt;@async&lt;/code&gt;&lt;/a&gt; macro (see &lt;a href=&quot;../parallel-computing/index#Parallel-Computing-1&quot;&gt;Parallel Computing&lt;/a&gt; for more details).</source>
          <target state="translated">&lt;a href=&quot;../../base/parallel/index#Core.Task&quot;&gt; &lt;code&gt;Task&lt;/code&gt; &lt;/a&gt;を呼び出すことによって明示的に作成されたタスクは、最初はスケジューラに認識されていません。これにより、必要に応じて&lt;a href=&quot;../../base/parallel/index#Base.yieldto&quot;&gt; &lt;code&gt;yieldto&lt;/code&gt; &lt;/a&gt;を使用してタスクを手動で管理できます。ただし、そのようなタスクがイベントを待機している場合でも、予想どおり、イベントが発生すると自動的に再起動されます。また、必ずしもイベントを待機することなく、可能な限りいつでもスケジューラーにタスクを実行させることもできます。これは、呼び出して実行され&lt;a href=&quot;../../base/parallel/index#Base.schedule&quot;&gt; &lt;code&gt;schedule&lt;/code&gt; &lt;/a&gt;、または使用して&lt;a href=&quot;../../base/parallel/index#Base.@async&quot;&gt; &lt;code&gt;@async&lt;/code&gt; &lt;/a&gt;（参照マクロを&lt;a href=&quot;../parallel-computing/index#Parallel-Computing-1&quot;&gt;並列コンピューティング&lt;/a&gt;の詳細については）。</target>
        </trans-unit>
        <trans-unit id="98741cc98ee16d9ab3a998adf5789df91d6bd8b6" translate="yes" xml:space="preserve">
          <source>A thread-safe version of &lt;a href=&quot;#Base.Condition&quot;&gt;&lt;code&gt;Base.Condition&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#Base.Condition&quot;&gt; &lt;code&gt;Base.Condition&lt;/code&gt; の&lt;/a&gt;スレッドセーフバージョン。</target>
        </trans-unit>
        <trans-unit id="edef5e7571427a5f91f025df54f077af0dd3024e" translate="yes" xml:space="preserve">
          <source>A thread-safe version of &lt;a href=&quot;../parallel/index#Base.Condition&quot;&gt;&lt;code&gt;Base.Condition&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../parallel/index#Base.Condition&quot;&gt; &lt;code&gt;Base.Condition&lt;/code&gt; の&lt;/a&gt;スレッドセーフバージョン。</target>
        </trans-unit>
        <trans-unit id="2b58805de54debccfbd0e801ac822dbec053b647" translate="yes" xml:space="preserve">
          <source>A tuple of input types, corresponding to the function signature</source>
          <target state="translated">関数シグネチャに対応する入力型のタプル</target>
        </trans-unit>
        <trans-unit id="742c13a103d2480e968af031241292dc13ffa910" translate="yes" xml:space="preserve">
          <source>A tuple of input types. The input types must be written as a literal tuple, not a tuple-valued variable or expression.</source>
          <target state="translated">入力型のタプル。入力型は、タプル値を持つ変数や式ではなく、リテラルタプルとして書かれなければなりません。</target>
        </trans-unit>
        <trans-unit id="02ac3688690ac8c45320416c8e40058c167fb818" translate="yes" xml:space="preserve">
          <source>A two-dimensional &lt;a href=&quot;#SharedArrays.SharedArray&quot;&gt;&lt;code&gt;SharedArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">2次元の&lt;a href=&quot;#SharedArrays.SharedArray&quot;&gt; &lt;code&gt;SharedArray&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2cae43ab9952736150051924872c889307cc7b33" translate="yes" xml:space="preserve">
          <source>A type assertion failure, or calling an intrinsic function with an incorrect argument type.</source>
          <target state="translated">型アサーションの失敗、または正しくない引数型で本質的な関数を呼び出した場合。</target>
        </trans-unit>
        <trans-unit id="6c65420499bd2ab6c38a5269a2949906fd25fe5c" translate="yes" xml:space="preserve">
          <source>A type representing a standard internet data format. &quot;MIME&quot; stands for &quot;Multipurpose Internet Mail Extensions&quot;, since the standard was originally used to describe multimedia attachments to email messages.</source>
          <target state="translated">インターネットの標準的なデータ形式を表すタイプ。&quot;MIME&quot; は &quot;Multipurpose Internet Mail Extensions&quot; の略で、元々は電子メールメッセージにマルチメディアの添付ファイルを記述するために使用されていた規格です。</target>
        </trans-unit>
        <trans-unit id="fa12877ef329dc75c9fda25bdec3c035fe723779" translate="yes" xml:space="preserve">
          <source>A type representing compound expressions in parsed julia code (ASTs). Each expression consists of a &lt;code&gt;head&lt;/code&gt;&lt;code&gt;Symbol&lt;/code&gt; identifying which kind of expression it is (e.g. a call, for loop, conditional statement, etc.), and subexpressions (e.g. the arguments of a call). The subexpressions are stored in a &lt;code&gt;Vector{Any}&lt;/code&gt; field called &lt;code&gt;args&lt;/code&gt;.</source>
          <target state="translated">解析されたジュリアコード（AST）の複合式を表す型。各式は、それがどの種類の式であるかを示す &lt;code&gt;head&lt;/code&gt; &lt;code&gt;Symbol&lt;/code&gt; （たとえば、呼び出し、forループ、条件ステートメントなど）と部分式（たとえば、呼び出しの引数）で構成されます。部分式は &lt;code&gt;args&lt;/code&gt; と呼ばれる &lt;code&gt;Vector{Any}&lt;/code&gt; フィールドに格納されます。</target>
        </trans-unit>
        <trans-unit id="12166025929849592cdb9b904ad437a429f4da9f" translate="yes" xml:space="preserve">
          <source>A type union is a special abstract type which includes as objects all instances of any of its argument types, constructed using the special &lt;a href=&quot;../../base/base/index#Core.Union&quot;&gt;&lt;code&gt;Union&lt;/code&gt;&lt;/a&gt; keyword:</source>
          <target state="translated">型共用体は特別な抽象型であり、オブジェクトとして、その引数型のすべてのインスタンスを含み、特別な&lt;a href=&quot;../../base/base/index#Core.Union&quot;&gt; &lt;code&gt;Union&lt;/code&gt; &lt;/a&gt;キーワードを使用して構築されます。</target>
        </trans-unit>
        <trans-unit id="c659722eaa7a1851dcf2b15fa8b1da6d2c52b7b1" translate="yes" xml:space="preserve">
          <source>A type union is an abstract type which includes all instances of any of its argument types. The empty union &lt;a href=&quot;#Union%7B%7D&quot;&gt;&lt;code&gt;Union{}&lt;/code&gt;&lt;/a&gt; is the bottom type of Julia.</source>
          <target state="translated">型共用体は、任意の引数型のすべてのインスタンスを含む抽象型です。空の労働&lt;a href=&quot;#Union%7B%7D&quot;&gt; &lt;code&gt;Union{}&lt;/code&gt; &lt;/a&gt;はジュリアの最下位タイプです。</target>
        </trans-unit>
        <trans-unit id="d4feddb63143773f90aec3aa6e9e79164c040b57" translate="yes" xml:space="preserve">
          <source>A type used for controlling the rounding mode of floating point operations (via &lt;a href=&quot;../numbers/index#Base.Rounding.rounding&quot;&gt;&lt;code&gt;rounding&lt;/code&gt;&lt;/a&gt;/&lt;code&gt;setrounding&lt;/code&gt; functions), or as optional arguments for rounding to the nearest integer (via the &lt;a href=&quot;#Base.round-Tuple%7BType,Any%7D&quot;&gt;&lt;code&gt;round&lt;/code&gt;&lt;/a&gt; function).</source>
          <target state="translated">（介して浮動小数点演算の丸めモードを制御するために使用されるタイプ&lt;a href=&quot;../numbers/index#Base.Rounding.rounding&quot;&gt; &lt;code&gt;rounding&lt;/code&gt; &lt;/a&gt;/ &lt;code&gt;setrounding&lt;/code&gt; 関数）、または（経由最も近い整数に丸めるためのオプションの引数として&lt;a href=&quot;#Base.round-Tuple%7BType,Any%7D&quot;&gt; &lt;code&gt;round&lt;/code&gt; &lt;/a&gt;関数）。</target>
        </trans-unit>
        <trans-unit id="78a19252283d099431e9543c48dcfeb2c0c70cdb" translate="yes" xml:space="preserve">
          <source>A type used for controlling the rounding mode of floating point operations (via &lt;a href=&quot;../numbers/index#Base.Rounding.rounding&quot;&gt;&lt;code&gt;rounding&lt;/code&gt;&lt;/a&gt;/&lt;code&gt;setrounding&lt;/code&gt; functions), or as optional arguments for rounding to the nearest integer (via the &lt;code&gt;round&lt;/code&gt; function).</source>
          <target state="translated">浮動小数点演算の丸めモードを制御するために使用されるタイプ（&lt;a href=&quot;../numbers/index#Base.Rounding.rounding&quot;&gt; &lt;code&gt;rounding&lt;/code&gt; &lt;/a&gt; / &lt;code&gt;setrounding&lt;/code&gt; 関数を介して）、または最も近い整数に丸めるためのオプションの引数として（ &lt;code&gt;round&lt;/code&gt; 関数を介して）使用されるタイプ。</target>
        </trans-unit>
        <trans-unit id="cce4e44b3212d47f6685805f453e4928d3ab1723" translate="yes" xml:space="preserve">
          <source>A type with no fields that is the type of &lt;a href=&quot;../constants/index#Core.nothing&quot;&gt;&lt;code&gt;nothing&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../constants/index#Core.nothing&quot;&gt; &lt;code&gt;nothing&lt;/code&gt; &lt;/a&gt;タイプであるフィールドのないタイプ。</target>
        </trans-unit>
        <trans-unit id="2c8120bb7a13d8189f767168488ba78dd50f96b4" translate="yes" xml:space="preserve">
          <source>A type with no fields whose singleton instance &lt;a href=&quot;#Base.missing&quot;&gt;&lt;code&gt;missing&lt;/code&gt;&lt;/a&gt; is used to represent missing values.</source>
          <target state="translated">シングルトンインスタンスが&lt;a href=&quot;#Base.missing&quot;&gt; &lt;code&gt;missing&lt;/code&gt; &lt;/a&gt;いるフィールドがないタイプは、欠落した値を表すために使用されます。</target>
        </trans-unit>
        <trans-unit id="306e436a1878b67ebef890bd34b67f5c57414a92" translate="yes" xml:space="preserve">
          <source>A typical usage of such a pair of return values, however, extracts each value into a variable. Julia supports simple tuple &quot;destructuring&quot; that facilitates this:</source>
          <target state="translated">しかし、このような戻り値のペアの典型的な使用法は、それぞれの値を変数に抽出します。Julia はこれを容易にするシンプルなタプルの &quot;破壊&quot; をサポートしています。</target>
        </trans-unit>
        <trans-unit id="913d40733121bbdbb40702c29375806cce6f85d2" translate="yes" xml:space="preserve">
          <source>A union of types over all values of a type parameter. &lt;code&gt;UnionAll&lt;/code&gt; is used to describe parametric types where the values of some parameters are not known.</source>
          <target state="translated">型パラメーターのすべての値に対する型の和集合。 &lt;code&gt;UnionAll&lt;/code&gt; は、一部のパラメーターの値が不明なパラメトリックタイプを記述するために使用されます。</target>
        </trans-unit>
        <trans-unit id="a657ba8f21c293af12b12dfaacd8ec7d70ec5e5a" translate="yes" xml:space="preserve">
          <source>A useful tool for measuring performance is the &lt;a href=&quot;../../base/base/index#Base.@time&quot;&gt;&lt;code&gt;@time&lt;/code&gt;&lt;/a&gt; macro. We here repeat the example with the global variable above, but this time with the type annotation removed:</source>
          <target state="translated">パフォーマンスを測定するための便利なツールは、&lt;a href=&quot;../../base/base/index#Base.@time&quot;&gt; &lt;code&gt;@time&lt;/code&gt; &lt;/a&gt;マクロです。ここでは、上記のグローバル変数を使用して例を繰り返しますが、今回は型注釈を削除しています。</target>
        </trans-unit>
        <trans-unit id="c5253993e5fc44814c87723bb62dfda7d99d25d2" translate="yes" xml:space="preserve">
          <source>A variable name can be &quot;reserved&quot; without assigning to it by declaring it as &lt;code&gt;global x&lt;/code&gt;. This prevents name conflicts for globals initialized after load time.</source>
          <target state="translated">変数名は、 &lt;code&gt;global x&lt;/code&gt; として宣言することにより、割り当てずに「予約」できます。これにより、ロード後に初期化されたグローバルの名前の競合が防止されます。</target>
        </trans-unit>
        <trans-unit id="7fd534d23374f6545f94032e172165c5e2ffe3bb" translate="yes" xml:space="preserve">
          <source>A variable referring to the last computed value, automatically set at the interactive prompt.</source>
          <target state="translated">最後に計算された値を参照する変数で、インタラクティブなプロンプトで自動的に設定されます。</target>
        </trans-unit>
        <trans-unit id="9301af4052e23061aeab00f8629595c8531efad3" translate="yes" xml:space="preserve">
          <source>A variable, in Julia, is a name associated (or bound) to a value. It's useful when you want to store a value (that you obtained after some math, for example) for later use. For example:</source>
          <target state="translated">ジュリアでは、変数とは、値に関連付けられた(またはバインドされた)名前のことです。これは、後で使用するために値を保存しておきたい場合に便利です(例えば、計算の後に得た値など)。例えば</target>
        </trans-unit>
        <trans-unit id="343ec2d984e66e00b3ae00539feb443a8166ee65" translate="yes" xml:space="preserve">
          <source>A variation on this approach, which avoids the appearance of type instability is to merge the &lt;code&gt;Int&lt;/code&gt; and &lt;a href=&quot;../../base/numbers/index#Base.GMP.BigInt&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; types into a single hybrid integer type, that internally changes representation when a result no longer fits into the size of a machine integer. While this superficially avoids type-instability at the level of Julia code, it just sweeps the problem under the rug by foisting all of the same difficulties onto the C code implementing this hybrid integer type. This approach &lt;em&gt;can&lt;/em&gt; be made to work and can even be made quite fast in many cases, but has several drawbacks. One problem is that the in-memory representation of integers and arrays of integers no longer match the natural representation used by C, Fortran and other languages with native machine integers. Thus, to interoperate with those languages, we would ultimately need to introduce native integer types anyway. Any unbounded representation of integers cannot have a fixed number of bits, and thus cannot be stored inline in an array with fixed-size slots &amp;ndash; large integer values will always require separate heap-allocated storage. And of course, no matter how clever a hybrid integer implementation one uses, there are always performance traps &amp;ndash; situations where performance degrades unexpectedly. Complex representation, lack of interoperability with C and Fortran, the inability to represent integer arrays without additional heap storage, and unpredictable performance characteristics make even the cleverest hybrid integer implementations a poor choice for high-performance numerical work.</source>
          <target state="translated">このアプローチのバリエーションは、型が不安定になることを&lt;a href=&quot;../../base/numbers/index#Base.GMP.BigInt&quot;&gt; &lt;code&gt;BigInt&lt;/code&gt; &lt;/a&gt;ために、 &lt;code&gt;Int&lt;/code&gt; 型とBigInt型を単一のハイブリッド整数型にマージし、結果がマシン整数のサイズに収まらない場合に内部で表現を変更します。これは表面的にはJuliaコードのレベルで型の不安定性を回避しますが、このハイブリッド整数型を実装するCコードに同じ問題をすべて投げかけることで、ラグの下で問題を一掃するだけです。このアプローチ&lt;em&gt;は&lt;/em&gt;動作するように作られ、多くの場合かなり高速にさえできますが、いくつかの欠点があります。 1つの問題は、整数のメモリ内表現と整数の配列が、ネイティブマシンの整数でC、Fortran、およびその他の言語で使用される自然な表現と一致しないことです。したがって、これらの言語と相互運用するには、最終的にネイティブ整数型を導入する必要があります。整数の制限のない表現は、固定ビット数を持つことができないため、固定サイズのスロットを持つ配列にインラインで格納することはできません。大きな整数値には、個別のヒープ割り当てストレージが常に必要です。そしてもちろん、ハイブリッド整数の実装がいかに巧妙であっても、常にパフォーマンストラップがあります。これは、パフォーマンスが予期せず低下する状況です。複雑な表現、CおよびFortranとの相互運用性の欠如、追加のヒープストレージなしに整数配列を表現できないこと、および予測できないパフォーマンス特性により、賢いハイブリッド整数の実装でさえ、高性能数値計算に適さない選択肢となっています。</target>
        </trans-unit>
        <trans-unit id="e58331c965191dacd80a8789c7e948a53ee2b04e" translate="yes" xml:space="preserve">
          <source>A very special macro is &lt;a href=&quot;../../base/base/index#Base.@generated&quot;&gt;&lt;code&gt;@generated&lt;/code&gt;&lt;/a&gt;, which allows you to define so-called &lt;em&gt;generated functions&lt;/em&gt;. These have the capability to generate specialized code depending on the types of their arguments with more flexibility and/or less code than what can be achieved with multiple dispatch. While macros work with expressions at parse time and cannot access the types of their inputs, a generated function gets expanded at a time when the types of the arguments are known, but the function is not yet compiled.</source>
          <target state="translated">非常に特殊なマクロは&lt;a href=&quot;../../base/base/index#Base.@generated&quot;&gt; &lt;code&gt;@generated&lt;/code&gt; で&lt;/a&gt;、これにより、いわゆる&lt;em&gt;生成された関数&lt;/em&gt;を定義できます。これらは、引数のタイプに応じて、複数のディスパッチで実現できるものよりも柔軟性が高く、コードが少ない特殊なコードを生成する機能を備えています。マクロは解析時に式を処理し、その入力の型にアクセスできませんが、生成された関数は、引数の型がわかっているときに展開されますが、関数はまだコンパイルされていません。</target>
        </trans-unit>
        <trans-unit id="141d8c5657b1c8b0553ace4a61596a7c1734a9a6" translate="yes" xml:space="preserve">
          <source>A wrapper type used in &lt;code&gt;Union{Some{T}, Nothing}&lt;/code&gt; to distinguish between the absence of a value (&lt;a href=&quot;../constants/index#Core.nothing&quot;&gt;&lt;code&gt;nothing&lt;/code&gt;&lt;/a&gt;) and the presence of a &lt;code&gt;nothing&lt;/code&gt; value (i.e. &lt;code&gt;Some(nothing)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Union{Some{T}, Nothing}&lt;/code&gt; 使用されるラッパー型で、値の不在（&lt;a href=&quot;../constants/index#Core.nothing&quot;&gt; &lt;code&gt;nothing&lt;/code&gt; &lt;/a&gt;）と &lt;code&gt;nothing&lt;/code&gt; 値の存在（つまり、 &lt;code&gt;Some(nothing)&lt;/code&gt; ）を区別します。</target>
        </trans-unit>
        <trans-unit id="80d305c58f97edfae92a3627f5a66d9bef4d8d46" translate="yes" xml:space="preserve">
          <source>AM</source>
          <target state="translated">AM</target>
        </trans-unit>
        <trans-unit id="89c25a6e98b7d12432623429744aea6cf501424a" translate="yes" xml:space="preserve">
          <source>API reference</source>
          <target state="translated">エーピーアイさんしょう</target>
        </trans-unit>
        <trans-unit id="f6db2b825c2703e26c1c6b659f77956e578c5caf" translate="yes" xml:space="preserve">
          <source>ARGS</source>
          <target state="translated">ARGS</target>
        </trans-unit>
        <trans-unit id="a1df128dfacd3f460cbb61bb4087bb92287d3fcb" translate="yes" xml:space="preserve">
          <source>ARI</source>
          <target state="translated">ARI</target>
        </trans-unit>
        <trans-unit id="cade2543bf82eecb0447ba12066fcc5daa136208" translate="yes" xml:space="preserve">
          <source>ASCII characters and ASCII escapes produce a single byte.</source>
          <target state="translated">ASCII文字とASCIIエスケープは1バイトを生成します。</target>
        </trans-unit>
        <trans-unit id="20ab2d9088d2ab458d63ed3bd729fda9297db5a4" translate="yes" xml:space="preserve">
          <source>AV</source>
          <target state="translated">AV</target>
        </trans-unit>
        <trans-unit id="33a783add30fb01fc6df3bfeb87611c9fd6e0247" translate="yes" xml:space="preserve">
          <source>Abbr.</source>
          <target state="translated">Abbr.</target>
        </trans-unit>
        <trans-unit id="125c32f24e67f8006c45d7fdea568e01f28fd48b" translate="yes" xml:space="preserve">
          <source>Abbreviated days of the week</source>
          <target state="translated">曜日の省略</target>
        </trans-unit>
        <trans-unit id="d634b593f2d04c176e6178cce99b9871b914261f" translate="yes" xml:space="preserve">
          <source>Above, it was pointed out that one can resolve ambiguities like</source>
          <target state="translated">のような曖昧さを解決できることが指摘されていました。</target>
        </trans-unit>
        <trans-unit id="444368fcd88ae8ee9706df79374d2260c8851efb" translate="yes" xml:space="preserve">
          <source>Abstract Arrays</source>
          <target state="translated">抽象的な配列</target>
        </trans-unit>
        <trans-unit id="afab87d7da169104e68739efdca076e3028a0b71" translate="yes" xml:space="preserve">
          <source>Abstract Types</source>
          <target state="translated">抽象的なタイプ</target>
        </trans-unit>
        <trans-unit id="3731303601cb9a5262dd9843918c4065a4b09ed2" translate="yes" xml:space="preserve">
          <source>Abstract containers and element types</source>
          <target state="translated">抽象的なコンテナと要素の種類</target>
        </trans-unit>
        <trans-unit id="b81afa6e965e7c1908221b1c01f57fb3e1ed309d" translate="yes" xml:space="preserve">
          <source>Abstract number types</source>
          <target state="translated">抽象的な番号タイプ</target>
        </trans-unit>
        <trans-unit id="203bf0ca60eba0b4df86ca193ff6564bf1f08046" translate="yes" xml:space="preserve">
          <source>Abstract supertype describing types that implement the synchronization primitives: &lt;a href=&quot;#Base.lock&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.trylock&quot;&gt;&lt;code&gt;trylock&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Base.unlock&quot;&gt;&lt;code&gt;unlock&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#Base.islocked&quot;&gt;&lt;code&gt;islocked&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">同期プリミティブを実装タイプを記述する抽象スーパータイプ：&lt;a href=&quot;#Base.lock&quot;&gt; &lt;code&gt;lock&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#Base.trylock&quot;&gt; &lt;code&gt;trylock&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#Base.unlock&quot;&gt; &lt;code&gt;unlock&lt;/code&gt; &lt;/a&gt;、及び&lt;a href=&quot;#Base.islocked&quot;&gt; &lt;code&gt;islocked&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="161cfe5f22c6ec0c5c1636e00ae6b86b4dfab7b0" translate="yes" xml:space="preserve">
          <source>Abstract supertype for IP addresses. &lt;a href=&quot;#Sockets.IPv4&quot;&gt;&lt;code&gt;IPv4&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Sockets.IPv6&quot;&gt;&lt;code&gt;IPv6&lt;/code&gt;&lt;/a&gt; are subtypes of this.</source>
          <target state="translated">IPアドレスの抽象スーパータイプ。&lt;a href=&quot;#Sockets.IPv4&quot;&gt; &lt;code&gt;IPv4&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#Sockets.IPv6&quot;&gt; &lt;code&gt;IPv6&lt;/code&gt; &lt;/a&gt;はこのサブタイプです。</target>
        </trans-unit>
        <trans-unit id="7ec52c1e034eaa75fbf55c8ad047e12dee7c43d5" translate="yes" xml:space="preserve">
          <source>Abstract supertype for all floating point numbers.</source>
          <target state="translated">すべての浮動小数点数の抽象的なスーパータイプ。</target>
        </trans-unit>
        <trans-unit id="d3c5cb7bbcaf4de0abc6af421aee06fd1805c5f7" translate="yes" xml:space="preserve">
          <source>Abstract supertype for all integers.</source>
          <target state="translated">すべての整数の抽象的なスーパータイプ。</target>
        </trans-unit>
        <trans-unit id="c2307397eab7e7e325b924259a7acd689ce9202f" translate="yes" xml:space="preserve">
          <source>Abstract supertype for all number types.</source>
          <target state="translated">すべての数値型の抽象的なスーパータイプ。</target>
        </trans-unit>
        <trans-unit id="8137ecd293ea0b9f148b79a2c5d9ef23135b11e0" translate="yes" xml:space="preserve">
          <source>Abstract supertype for all real numbers.</source>
          <target state="translated">すべての実数の抽象的なスーパータイプ。</target>
        </trans-unit>
        <trans-unit id="5d4c24eb8dfef4792ccde0796267cae116c984c2" translate="yes" xml:space="preserve">
          <source>Abstract supertype for all signed integers.</source>
          <target state="translated">すべての符号付き整数の抽象的な超型.</target>
        </trans-unit>
        <trans-unit id="98c1a75aa7f0d6a8990b451bf94db6a410025a03" translate="yes" xml:space="preserve">
          <source>Abstract supertype for all unsigned integers.</source>
          <target state="translated">すべての符号なし整数の抽象的なスーパータイプ。</target>
        </trans-unit>
        <trans-unit id="93e4098f9689d748060c11ebe52324df10ec1351" translate="yes" xml:space="preserve">
          <source>Abstract supertype for rich display output devices. &lt;a href=&quot;#Base.Multimedia.TextDisplay&quot;&gt;&lt;code&gt;TextDisplay&lt;/code&gt;&lt;/a&gt; is a subtype of this.</source>
          <target state="translated">リッチディスプレイ出力デバイスの抽象スーパータイプ。&lt;a href=&quot;#Base.Multimedia.TextDisplay&quot;&gt; &lt;code&gt;TextDisplay&lt;/code&gt; &lt;/a&gt;はこのサブタイプです。</target>
        </trans-unit>
        <trans-unit id="5e9597d58105eaf8a30d20d99c956a69b4d700ba" translate="yes" xml:space="preserve">
          <source>Abstract type for &lt;a href=&quot;https://en.wikipedia.org/wiki/Matrix_decomposition&quot;&gt;matrix factorizations&lt;/a&gt; a.k.a. matrix decompositions. See &lt;a href=&quot;#man-linalg-factorizations&quot;&gt;online documentation&lt;/a&gt; for a list of available matrix factorizations.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Matrix_decomposition&quot;&gt;行列因数分解、&lt;/a&gt;別名行列分解の抽象型。利用可能な行列因数分解のリスト&lt;a href=&quot;#man-linalg-factorizations&quot;&gt;について&lt;/a&gt;は、オンラインドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="76cd9a3f07be7d40989b1baf043119bf5df6066e" translate="yes" xml:space="preserve">
          <source>Abstract type of all functions.</source>
          <target state="translated">すべての関数の抽象型。</target>
        </trans-unit>
        <trans-unit id="84e429cc9f28682f2f27e8d636ad9613a3b2da6d" translate="yes" xml:space="preserve">
          <source>Abstract types are declared using the &lt;a href=&quot;../../base/base/index#abstract%20type&quot;&gt;&lt;code&gt;abstract type&lt;/code&gt;&lt;/a&gt; keyword. The general syntaxes for declaring an abstract type are:</source>
          <target state="translated">抽象型は、&lt;a href=&quot;../../base/base/index#abstract%20type&quot;&gt; &lt;code&gt;abstract type&lt;/code&gt; &lt;/a&gt;キーワードを使用して宣言されます。抽象型を宣言するための一般的な構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c58fec15e5232080566685f01231f0dc1e49a918" translate="yes" xml:space="preserve">
          <source>Abstract types cannot be instantiated, and serve only as nodes in the type graph, thereby describing sets of related concrete types: those concrete types which are their descendants. We begin with abstract types even though they have no instantiation because they are the backbone of the type system: they form the conceptual hierarchy which makes Julia's type system more than just a collection of object implementations.</source>
          <target state="translated">抽象型はインスタンス化することができず、型グラフのノードとしてしか機能せず、それによって関連する具象型の集合、つまりそれらの子孫である具象型を記述する。抽象型は型システムのバックボーンであり、ジュリアの型システムを単なるオブジェクト実装の集合以上のものにする概念的な階層を形成しているからです。</target>
        </trans-unit>
        <trans-unit id="99f8f0ef23e181287cd6d3022637085c03e3e6b8" translate="yes" xml:space="preserve">
          <source>AbstractDict</source>
          <target state="translated">AbstractDict</target>
        </trans-unit>
        <trans-unit id="c0458876d81208a95087a4de5e1caaa1d2000c99" translate="yes" xml:space="preserve">
          <source>AbstractDisplay &lt;code&gt;x&lt;/code&gt; using the topmost applicable display in the display stack, typically using the richest supported multimedia output for &lt;code&gt;x&lt;/code&gt;, with plain-text &lt;a href=&quot;#Base.stdout&quot;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt; output as a fallback. The &lt;code&gt;display(d, x)&lt;/code&gt; variant attempts to display &lt;code&gt;x&lt;/code&gt; on the given display &lt;code&gt;d&lt;/code&gt; only, throwing a &lt;a href=&quot;../base/index#Core.MethodError&quot;&gt;&lt;code&gt;MethodError&lt;/code&gt;&lt;/a&gt; if &lt;code&gt;d&lt;/code&gt; cannot display objects of this type.</source>
          <target state="translated">AbstractDisplay &lt;code&gt;x&lt;/code&gt; は、ディスプレイスタックの最上位の該当するディスプレイを使用します。通常、サポートされている最もリッチな &lt;code&gt;x&lt;/code&gt; のマルチメディア出力を使用し、フォールバックとしてプレーンテキストの&lt;a href=&quot;#Base.stdout&quot;&gt; &lt;code&gt;stdout&lt;/code&gt; &lt;/a&gt;出力を使用します。 &lt;code&gt;display(d, x)&lt;/code&gt; 表示に変異試行 &lt;code&gt;x&lt;/code&gt; 所与のディスプレイ上の &lt;code&gt;d&lt;/code&gt; 投げのみ、&lt;a href=&quot;../base/index#Core.MethodError&quot;&gt; &lt;code&gt;MethodError&lt;/code&gt; の&lt;/a&gt;場合 &lt;code&gt;d&lt;/code&gt; 、このタイプのオブジェクトを表示することができません。</target>
        </trans-unit>
        <trans-unit id="7eaed6a73d55c164395b7a1a21e441cbb954faed" translate="yes" xml:space="preserve">
          <source>AbstractIrrational</source>
          <target state="translated">AbstractIrrational</target>
        </trans-unit>
        <trans-unit id="bf18f60e42cfb0779a9b4f7ddad8d2d330b3942c" translate="yes" xml:space="preserve">
          <source>AbstractLock</source>
          <target state="translated">AbstractLock</target>
        </trans-unit>
        <trans-unit id="b088bdfb0583418c7216120363be65d53cfb24c4" translate="yes" xml:space="preserve">
          <source>AbstractMatrix</source>
          <target state="translated">AbstractMatrix</target>
        </trans-unit>
        <trans-unit id="1a85fd0dbacd4a4cf6bcd5291fb7d75e1f9be36d" translate="yes" xml:space="preserve">
          <source>AbstractRange</source>
          <target state="translated">AbstractRange</target>
        </trans-unit>
        <trans-unit id="ce89d8527dc144fe8623087bd9235422a835ad7f" translate="yes" xml:space="preserve">
          <source>AbstractSet</source>
          <target state="translated">AbstractSet</target>
        </trans-unit>
        <trans-unit id="1d4be86b60074a8c81bb5c652c7352a1af4f56bd" translate="yes" xml:space="preserve">
          <source>AbstractUnitRange</source>
          <target state="translated">AbstractUnitRange</target>
        </trans-unit>
        <trans-unit id="69ac868610201e6a40f57ef6a33cac3933afa73e" translate="yes" xml:space="preserve">
          <source>AbstractVecOrMat</source>
          <target state="translated">AbstractVecOrMat</target>
        </trans-unit>
        <trans-unit id="6167adb4464ed99a679a24201ae93baff8fe87bb" translate="yes" xml:space="preserve">
          <source>AbstractVector</source>
          <target state="translated">AbstractVector</target>
        </trans-unit>
        <trans-unit id="ff33b5833701038044ed7a8bf95bb5da1639a716" translate="yes" xml:space="preserve">
          <source>Abusing this will corrupt the runtime system and cause undefined behavior:</source>
          <target state="translated">これを悪用するとランタイムシステムが破損し、定義されていない動作が発生します。</target>
        </trans-unit>
        <trans-unit id="1067d0a82d1d5a296a37f79af88170005dbcf1e6" translate="yes" xml:space="preserve">
          <source>Ac Current</source>
          <target state="translated">交流電流</target>
        </trans-unit>
        <trans-unit id="d1e31fbd4f9f4072d2446b9b7e8c1f20663d7c76" translate="yes" xml:space="preserve">
          <source>Accepts a connection on the given server and returns a connection to the client. An uninitialized client stream may be provided, in which case it will be used instead of creating a new stream.</source>
          <target state="translated">指定したサーバからの接続を受け付け、クライアントへの接続を返します。初期化されていないクライアントストリームが提供されることもありますが、その場合は新しいストリームを作成する代わりにそれが使用されます。</target>
        </trans-unit>
        <trans-unit id="5a231d65a330d9d9348434455d2fcc49d60050da" translate="yes" xml:space="preserve">
          <source>Access arrays in memory order, along columns</source>
          <target state="translated">列に沿ってメモリ順に配列にアクセス</target>
        </trans-unit>
        <trans-unit id="b34a6bc7b1bae42bda9d01ca1c470c5375ab7fb7" translate="yes" xml:space="preserve">
          <source>Accesses must have a stride pattern and cannot be &quot;gathers&quot; (random-index reads) or &quot;scatters&quot; (random-index writes).</source>
          <target state="translated">アクセスはストライドパターンを持っていなければならず、「ギャザー」(ランダムインデックスの読み取り)や「スキャッター」(ランダムインデックスの書き込み)はできません。</target>
        </trans-unit>
        <trans-unit id="04dff1094ca04d8d22abd4cb907396dab9a3d50f" translate="yes" xml:space="preserve">
          <source>Accessing Data through a Pointer</source>
          <target state="translated">ポインタを使ったデータへのアクセス</target>
        </trans-unit>
        <trans-unit id="4e0aa606654432d6afe63016328a7456acbf5548" translate="yes" xml:space="preserve">
          <source>Accessing Documentation</source>
          <target state="translated">ドキュメントへのアクセス</target>
        </trans-unit>
        <trans-unit id="5effc224ab155ff163fdf8204037715e80f5787f" translate="yes" xml:space="preserve">
          <source>Accessing Global Variables</source>
          <target state="translated">グローバル変数へのアクセス</target>
        </trans-unit>
        <trans-unit id="eece63f5b1a8127dcc472656346b5e65a1a16b4d" translate="yes" xml:space="preserve">
          <source>Accessing Returned Arrays</source>
          <target state="translated">返された配列へのアクセス</target>
        </trans-unit>
        <trans-unit id="06321d9fadb0d72695135f33706dc1e00ad6f5c5" translate="yes" xml:space="preserve">
          <source>Accessing memory of an object directly via a &lt;code&gt;Ptr&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Ptr&lt;/code&gt; を介してオブジェクトのメモリに直接アクセスする</target>
        </trans-unit>
        <trans-unit id="94331919d037782e6104eb270ff9d9fb7da43903" translate="yes" xml:space="preserve">
          <source>Accessing the value associated with a name in a named tuple can be done using field access syntax, e.g. &lt;code&gt;x.a&lt;/code&gt;, or using &lt;a href=&quot;../collections/index#Base.getindex&quot;&gt;&lt;code&gt;getindex&lt;/code&gt;&lt;/a&gt;, e.g. &lt;code&gt;x[:a]&lt;/code&gt;. A tuple of the names can be obtained using &lt;a href=&quot;../collections/index#Base.keys&quot;&gt;&lt;code&gt;keys&lt;/code&gt;&lt;/a&gt;, and a tuple of the values can be obtained using &lt;a href=&quot;../collections/index#Base.values&quot;&gt;&lt;code&gt;values&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">名前付きタプルの名前に関連付けられた値へのアクセスは、フィールドアクセス構文（ &lt;code&gt;x.a&lt;/code&gt; など）を使用するか、&lt;a href=&quot;../collections/index#Base.getindex&quot;&gt; &lt;code&gt;getindex&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;x[:a]&lt;/code&gt; など）を使用して実行できます。名前のタプルは&lt;a href=&quot;../collections/index#Base.keys&quot;&gt; &lt;code&gt;keys&lt;/code&gt; &lt;/a&gt;を使用して取得でき、値のタプルは値を使用して取得でき&lt;a href=&quot;../collections/index#Base.values&quot;&gt; &lt;code&gt;values&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3e66b7f3723702c43ff6e0aa8ffbcb4594a04f89" translate="yes" xml:space="preserve">
          <source>Accessor Functions</source>
          <target state="translated">アクセッサー機能</target>
        </trans-unit>
        <trans-unit id="d2767f0a53b5589f58d10c2a600ba9c937b4860b" translate="yes" xml:space="preserve">
          <source>Accumulation and clearing</source>
          <target state="translated">蓄積とクリア</target>
        </trans-unit>
        <trans-unit id="8d4bc1e3633428932020325ab9038391aedb805b" translate="yes" xml:space="preserve">
          <source>Accurate natural logarithm of &lt;code&gt;1+x&lt;/code&gt;. Throws &lt;a href=&quot;../base/index#Core.DomainError&quot;&gt;&lt;code&gt;DomainError&lt;/code&gt;&lt;/a&gt; for &lt;a href=&quot;../numbers/index#Core.Real&quot;&gt;&lt;code&gt;Real&lt;/code&gt;&lt;/a&gt; arguments less than -1.</source>
          <target state="translated">&lt;code&gt;1+x&lt;/code&gt; の正確な自然対数。例外&lt;a href=&quot;../base/index#Core.DomainError&quot;&gt; &lt;code&gt;DomainError&lt;/code&gt; は&lt;/a&gt;のために&lt;a href=&quot;../numbers/index#Core.Real&quot;&gt; &lt;code&gt;Real&lt;/code&gt; &lt;/a&gt; -1未満の引数。</target>
        </trans-unit>
        <trans-unit id="daec25040f3792b222435be23467b3ab6876b7a5" translate="yes" xml:space="preserve">
          <source>Accurately compute $e^x-1$.</source>
          <target state="translated">e^x-1$を正確に計算します。</target>
        </trans-unit>
        <trans-unit id="11d200c26fa49e2ce4befb8e0cf46e14cd0db2d8" translate="yes" xml:space="preserve">
          <source>Acquire the &lt;code&gt;lock&lt;/code&gt; when it becomes available. If the lock is already locked by a different task/thread, wait for it to become available.</source>
          <target state="translated">使用可能になったときに &lt;code&gt;lock&lt;/code&gt; 取得します。ロックが別のタスク/スレッドによってすでにロックされている場合は、ロックが使用可能になるまで待ちます。</target>
        </trans-unit>
        <trans-unit id="1b62ab8ac8364cef9cfdb46dc16347ea263ed957" translate="yes" xml:space="preserve">
          <source>Acquire the &lt;code&gt;lock&lt;/code&gt;, execute &lt;code&gt;f&lt;/code&gt; with the &lt;code&gt;lock&lt;/code&gt; held, and release the &lt;code&gt;lock&lt;/code&gt; when &lt;code&gt;f&lt;/code&gt; returns. If the lock is already locked by a different task/thread, wait for it to become available.</source>
          <target state="translated">&lt;code&gt;lock&lt;/code&gt; 取得し、 &lt;code&gt;lock&lt;/code&gt; 保持したまま &lt;code&gt;f&lt;/code&gt; を実行し、 &lt;code&gt;f&lt;/code&gt; が戻ったら &lt;code&gt;lock&lt;/code&gt; します。ロックが別のタスク/スレッドによってすでにロックされている場合は、それが使用可能になるまで待ちます。</target>
        </trans-unit>
        <trans-unit id="111fa83b00bb4738853e63e06a10c68a0195c86f" translate="yes" xml:space="preserve">
          <source>Acquire the lock if it is available, and return &lt;code&gt;true&lt;/code&gt; if successful. If the lock is already locked by a different task/thread, return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">利用可能な場合はロックを取得し、成功した場合は &lt;code&gt;true&lt;/code&gt; を返します。ロックが別のタスク/スレッドによってすでにロックされている場合は、 &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f2342ed0f0b229a0d03ed8168b59f19edf073636" translate="yes" xml:space="preserve">
          <source>Acute Angle</source>
          <target state="translated">急性角度</target>
        </trans-unit>
        <trans-unit id="4e210cb6cb9deed65bd9b851c840063ddc24f3fc" translate="yes" xml:space="preserve">
          <source>Add a &lt;a href=&quot;#Core.Task&quot;&gt;&lt;code&gt;Task&lt;/code&gt;&lt;/a&gt; to the scheduler's queue. This causes the task to run constantly when the system is otherwise idle, unless the task performs a blocking operation such as &lt;a href=&quot;#Base.wait&quot;&gt;&lt;code&gt;wait&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#Core.Task&quot;&gt; &lt;code&gt;Task&lt;/code&gt; &lt;/a&gt;をスケジューラのキューに追加します。これにより、タスクが&lt;a href=&quot;#Base.wait&quot;&gt; &lt;code&gt;wait&lt;/code&gt; &lt;/a&gt;などのブロック操作を実行しない限り、システムがアイドル状態のときにタスクが常に実行されます。</target>
        </trans-unit>
        <trans-unit id="ba7029093da6b4c90c7e27d2113f54b848408051" translate="yes" xml:space="preserve">
          <source>Add a &lt;em&gt;fetch&lt;/em&gt; refspec for the specified &lt;code&gt;rmt&lt;/code&gt;. This refspec will contain information about which branch(es) to fetch from.</source>
          <target state="translated">指定された &lt;code&gt;rmt&lt;/code&gt; の&lt;em&gt;フェッチ&lt;/em&gt; refspecを追加します。このrefspecには、どのブランチからフェッチするかに関する情報が含まれます。</target>
        </trans-unit>
        <trans-unit id="bc32e59f77d37df698d49af8f9d944b43a7af79c" translate="yes" xml:space="preserve">
          <source>Add a &lt;em&gt;push&lt;/em&gt; refspec for the specified &lt;code&gt;rmt&lt;/code&gt;. This refspec will contain information about which branch(es) to push to.</source>
          <target state="translated">指定された &lt;code&gt;rmt&lt;/code&gt; の&lt;em&gt;プッシュ&lt;/em&gt; refspecを追加します。このrefspecには、プッシュ先のブランチに関する情報が含まれます。</target>
        </trans-unit>
        <trans-unit id="7d2e4a20c94af16618f42a95303b58afe01cacad" translate="yes" xml:space="preserve">
          <source>Add a mark at the current position of stream &lt;code&gt;s&lt;/code&gt;. Return the marked position.</source>
          <target state="translated">ストリーム &lt;code&gt;s&lt;/code&gt; の現在の位置にマークを追加します。マークされた位置を返します。</target>
        </trans-unit>
        <trans-unit id="c81d1e9a4af83f24f843b4a0dd03ec8759d823af" translate="yes" xml:space="preserve">
          <source>Add all the files with paths specified by &lt;code&gt;files&lt;/code&gt; to the index &lt;code&gt;idx&lt;/code&gt; (or the index of the &lt;code&gt;repo&lt;/code&gt;). If the file already exists, the index entry will be updated. If the file does not exist already, it will be newly added into the index. &lt;code&gt;files&lt;/code&gt; may contain glob patterns which will be expanded and any matching files will be added (unless &lt;code&gt;INDEX_ADD_DISABLE_PATHSPEC_MATCH&lt;/code&gt; is set, see below). If a file has been ignored (in &lt;code&gt;.gitignore&lt;/code&gt; or in the config), it &lt;em&gt;will not&lt;/em&gt; be added, &lt;em&gt;unless&lt;/em&gt; it is already being tracked in the index, in which case it &lt;em&gt;will&lt;/em&gt; be updated. The keyword argument &lt;code&gt;flags&lt;/code&gt; is a set of bit-flags which control the behavior with respect to ignored files:</source>
          <target state="translated">で指定されたパスを持つすべてのファイルを追加し &lt;code&gt;files&lt;/code&gt; のインデックスに &lt;code&gt;idx&lt;/code&gt; （またはのインデックス &lt;code&gt;repo&lt;/code&gt; ）。ファイルが既に存在する場合、インデックスエントリが更新されます。ファイルがまだ存在しない場合は、新しくインデックスに追加されます。 &lt;code&gt;files&lt;/code&gt; は、展開され、一致するファイルが追加されるグロブパターンが含まれる場合があります（ &lt;code&gt;INDEX_ADD_DISABLE_PATHSPEC_MATCH&lt;/code&gt; が設定されていない限り、以下を参照してください）。ファイルが（では無視されている場合 &lt;code&gt;.gitignore&lt;/code&gt; または設定で）、それは&lt;em&gt;ありません&lt;/em&gt;、添加され&lt;em&gt;ない限り、&lt;/em&gt;それが既にそれが、その場合、インデックスに追跡されている&lt;em&gt;であろう&lt;/em&gt;更新されます。キーワード引数 &lt;code&gt;flags&lt;/code&gt; 無視されたファイルに関する動作を制御するビットフラグのセットです。</target>
        </trans-unit>
        <trans-unit id="f9859b5e151c0d4dccb9ba69eeb3e7174642b756" translate="yes" xml:space="preserve">
          <source>Add processes on remote machines via SSH. Requires &lt;code&gt;julia&lt;/code&gt; to be installed in the same location on each node, or to be available via a shared file system.</source>
          <target state="translated">SSH経由でリモートマシンにプロセスを追加します。必要 &lt;code&gt;julia&lt;/code&gt; 、各ノード上の同じ場所にインストールされる、または共有ファイル・システムを介して利用可能です。</target>
        </trans-unit>
        <trans-unit id="c93d7a95d43dad0a2e3566faa9380568c513bf49" translate="yes" xml:space="preserve">
          <source>Add the elements of &lt;code&gt;collection2&lt;/code&gt; to the end of &lt;code&gt;collection&lt;/code&gt;.</source>
          <target state="translated">要素の追加 &lt;code&gt;collection2&lt;/code&gt; の最後に &lt;code&gt;collection&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e8428e85c661f03dd33db8f12b20a010ab5be5e" translate="yes" xml:space="preserve">
          <source>Addition</source>
          <target state="translated">Addition</target>
        </trans-unit>
        <trans-unit id="8f60daef6009f4b56c282cccb45652345ff90737" translate="yes" xml:space="preserve">
          <source>Addition operator. &lt;code&gt;x+y+z+...&lt;/code&gt; calls this function with all arguments, i.e. &lt;code&gt;+(x, y, z, ...)&lt;/code&gt;.</source>
          <target state="translated">加算演算子。 &lt;code&gt;x+y+z+...&lt;/code&gt; は、この関数をすべての引数、つまり &lt;code&gt;+(x, y, z, ...)&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="23397c083849f8b996730f9a8baa14e28dc8e903" translate="yes" xml:space="preserve">
          <source>Additional examples and tests are available in &lt;a href=&quot;https://github.com/JuliaLang/julia/blob/master/stdlib/Dates/test/adjusters.jl&quot;&gt;&lt;code&gt;stdlib/Dates/test/adjusters.jl&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">追加の例とテストは&lt;a href=&quot;https://github.com/JuliaLang/julia/blob/master/stdlib/Dates/test/adjusters.jl&quot;&gt; &lt;code&gt;stdlib/Dates/test/adjusters.jl&lt;/code&gt; にあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="685ef1698c6666c2bd0d492d0ee46828879da80d" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;a href=&quot;../../base/arrays/index#Base.Broadcast.broadcast&quot;&gt;&lt;code&gt;broadcast&lt;/code&gt;&lt;/a&gt; is not limited to arrays (see the function documentation), it also handles tuples and treats any argument that is not an array, tuple or &lt;a href=&quot;../../base/c/index#Core.Ref&quot;&gt;&lt;code&gt;Ref&lt;/code&gt;&lt;/a&gt; (except for &lt;a href=&quot;../../base/c/index#Core.Ptr&quot;&gt;&lt;code&gt;Ptr&lt;/code&gt;&lt;/a&gt;) as a &quot;scalar&quot;.</source>
          <target state="translated">さらに、&lt;a href=&quot;../../base/arrays/index#Base.Broadcast.broadcast&quot;&gt; &lt;code&gt;broadcast&lt;/code&gt; &lt;/a&gt;は配列に限定されず（関数のドキュメントを参照）、タプルを処理し、配列、タプル、または&lt;a href=&quot;../../base/c/index#Core.Ref&quot;&gt; &lt;code&gt;Ref&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;../../base/c/index#Core.Ptr&quot;&gt; &lt;code&gt;Ptr&lt;/code&gt; &lt;/a&gt;を除く）以外の引数を「スカラー」として扱います。</target>
        </trans-unit>
        <trans-unit id="945097f233edb04921a995b222a7aba704c8bec8" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;a href=&quot;../../base/arrays/index#Base.Broadcast.broadcast&quot;&gt;&lt;code&gt;broadcast&lt;/code&gt;&lt;/a&gt; is not limited to arrays (see the function documentation); it also handles scalars, tuples and other collections. By default, only some argument types are considered scalars, including (but not limited to) &lt;code&gt;Number&lt;/code&gt;s, &lt;code&gt;String&lt;/code&gt;s, &lt;code&gt;Symbol&lt;/code&gt;s, &lt;code&gt;Type&lt;/code&gt;s, &lt;code&gt;Function&lt;/code&gt;s and some common singletons like &lt;code&gt;missing&lt;/code&gt; and &lt;code&gt;nothing&lt;/code&gt;. All other arguments are iterated over or indexed into elementwise.</source>
          <target state="translated">さらに、&lt;a href=&quot;../../base/arrays/index#Base.Broadcast.broadcast&quot;&gt; &lt;code&gt;broadcast&lt;/code&gt; &lt;/a&gt;は配列に限定されません（関数のドキュメントを参照）。また、スカラー、タプル、その他のコレクションも処理します。デフォルトでは、 &lt;code&gt;Number&lt;/code&gt; 、 &lt;code&gt;String&lt;/code&gt; 、 &lt;code&gt;Symbol&lt;/code&gt; 、 &lt;code&gt;Type&lt;/code&gt; 、 &lt;code&gt;Function&lt;/code&gt; 、および &lt;code&gt;missing&lt;/code&gt; や &lt;code&gt;nothing&lt;/code&gt; などの一般的なシングルトンを含む（ただしこれらに限定されない）一部の引数タイプのみがスカラーと見なされます。他のすべての引数は、要素ごとに繰り返されるか、インデックスが付けられます。</target>
        </trans-unit>
        <trans-unit id="7f79534c24bf8f2a16bd71a1b6a3a39a544a8226" translate="yes" xml:space="preserve">
          <source>Additionally, &lt;a href=&quot;../../base/math/index#Base.Math.sinpi&quot;&gt;&lt;code&gt;sinpi(x)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../base/math/index#Base.Math.cospi&quot;&gt;&lt;code&gt;cospi(x)&lt;/code&gt;&lt;/a&gt; are provided for more accurate computations of &lt;code&gt;sin(pi*x)&lt;/code&gt; and &lt;code&gt;cos(pi*x)&lt;/code&gt; respectively.</source>
          <target state="translated">さらに、&lt;a href=&quot;../../base/math/index#Base.Math.sinpi&quot;&gt; &lt;code&gt;sinpi(x)&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../base/math/index#Base.Math.cospi&quot;&gt; &lt;code&gt;cospi(x)&lt;/code&gt; &lt;/a&gt;は、それぞれ &lt;code&gt;sin(pi*x)&lt;/code&gt; および &lt;code&gt;cos(pi*x)&lt;/code&gt; のより正確な計算のために提供されています。</target>
        </trans-unit>
        <trans-unit id="6351bb5c94d5c92615addcb5b2795472a480f027" translate="yes" xml:space="preserve">
          <source>Additionally, Julia is not memory safe in the presence of a data race. Be very careful about reading a global variable (or closure variable) if another thread might write to it! Instead, always use the lock pattern above when changing any data (such as assigning to a global) visible to multiple threads.</source>
          <target state="translated">さらに、データ競合が発生した場合、Julia はメモリセーフではありません。他のスレッドがグローバル変数(またはクロージャ変数)に書き込む可能性がある場合、その読み込みには十分に注意してください! 代わりに、複数のスレッドから見えるデータ(グローバルへの代入など)を変更する場合は、常に上記のロックパターンを使用してください。</target>
        </trans-unit>
        <trans-unit id="bf3a3f7bf5e98e1e5497ee4fe9676516a92be473" translate="yes" xml:space="preserve">
          <source>Additionally, code blocks can be enclosed using triple backticks with an optional &quot;language&quot; to specify how a block of code should be highlighted.</source>
          <target state="translated">さらに、コードブロックは、コードブロックがどのようにハイライトされるかを指定するために、オプションの &quot;language &quot;を使用して、トリプルバックティックを使用して囲むことができます。</target>
        </trans-unit>
        <trans-unit id="1f4cc224a45b05b5c73175d158a7eca11aff2c5e" translate="yes" xml:space="preserve">
          <source>Additionally, full support for &lt;a href=&quot;../complex-and-rational-numbers/index#Complex-and-Rational-Numbers&quot;&gt;Complex and Rational Numbers&lt;/a&gt; is built on top of these primitive numeric types. All numeric types interoperate naturally without explicit casting, thanks to a flexible, user-extensible &lt;a href=&quot;../conversion-and-promotion/index#conversion-and-promotion&quot;&gt;type promotion system&lt;/a&gt;.</source>
          <target state="translated">さらに、&lt;a href=&quot;../complex-and-rational-numbers/index#Complex-and-Rational-Numbers&quot;&gt;複素数と有理数の&lt;/a&gt;完全なサポートは、これらのプリミティブな数値タイプの上に構築されています。柔軟でユーザー拡張可能な&lt;a href=&quot;../conversion-and-promotion/index#conversion-and-promotion&quot;&gt;型プロモーションシステムの&lt;/a&gt;おかげで、すべての数値型は明示的なキャストなしで自然に相互運用できます。</target>
        </trans-unit>
        <trans-unit id="aa6d0dd52c8f973d7d02448858d93589ccb8e270" translate="yes" xml:space="preserve">
          <source>Additionally, full support for &lt;a href=&quot;../complex-and-rational-numbers/index#Complex-and-Rational-Numbers-1&quot;&gt;Complex and Rational Numbers&lt;/a&gt; is built on top of these primitive numeric types. All numeric types interoperate naturally without explicit casting, thanks to a flexible, user-extensible &lt;a href=&quot;../conversion-and-promotion/index#conversion-and-promotion-1&quot;&gt;type promotion system&lt;/a&gt;.</source>
          <target state="translated">さらに、&lt;a href=&quot;../complex-and-rational-numbers/index#Complex-and-Rational-Numbers-1&quot;&gt;複素数と有理数の&lt;/a&gt;完全なサポートは、これらのプリミティブ数値型の上に構築されています。すべての数値型は、柔軟でユーザーが拡張可能な&lt;a href=&quot;../conversion-and-promotion/index#conversion-and-promotion-1&quot;&gt;型プロモーションシステムの&lt;/a&gt;おかげで、明示的なキャストなしで自然に相互運用できます。</target>
        </trans-unit>
        <trans-unit id="ccda9828ec19af11c51796660b5ccb16a7d0e952" translate="yes" xml:space="preserve">
          <source>Additionally, normal and exponential distributions are implemented for some &lt;code&gt;AbstractFloat&lt;/code&gt; and &lt;code&gt;Complex&lt;/code&gt; types, see &lt;a href=&quot;#Base.randn&quot;&gt;&lt;code&gt;randn&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#Random.randexp&quot;&gt;&lt;code&gt;randexp&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">さらに、一部の &lt;code&gt;AbstractFloat&lt;/code&gt; および &lt;code&gt;Complex&lt;/code&gt; タイプに対して正規分布および指数分布が実装されています。詳細については、&lt;a href=&quot;#Base.randn&quot;&gt; &lt;code&gt;randn&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#Random.randexp&quot;&gt; &lt;code&gt;randexp&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="99173595dabed80445cea4531dee6a385768b591" translate="yes" xml:space="preserve">
          <source>Additionally, parenthesized expressions can be used as coefficients to variables, implying multiplication of the expression by the variable:</source>
          <target state="translated">さらに、括弧で囲まれた式は、変数の係数として使用することができ、変数による式の乗算を意味します。</target>
        </trans-unit>
        <trans-unit id="fc43d556aa5aff0175b36169557918148740e7bb" translate="yes" xml:space="preserve">
          <source>Additionally, some exception types take one or more arguments that are used for error reporting:</source>
          <target state="translated">さらに、いくつかの例外型は、エラー報告に使用される1つ以上の引数を取ります。</target>
        </trans-unit>
        <trans-unit id="7c53242e98f029fd9fd99fe8ac859128c91d92ea" translate="yes" xml:space="preserve">
          <source>Additionally, to support the syntax &lt;code&gt;S[begin]&lt;/code&gt; and &lt;code&gt;S[end]&lt;/code&gt;, we must define &lt;a href=&quot;../../base/collections/index#Base.firstindex&quot;&gt;&lt;code&gt;firstindex&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../base/collections/index#Base.lastindex&quot;&gt;&lt;code&gt;lastindex&lt;/code&gt;&lt;/a&gt; to specify the first and last valid indices, respectively:</source>
          <target state="translated">さらに、構文 &lt;code&gt;S[begin]&lt;/code&gt; と &lt;code&gt;S[end]&lt;/code&gt; をサポートするには、&lt;a href=&quot;../../base/collections/index#Base.firstindex&quot;&gt; &lt;code&gt;firstindex&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../../base/collections/index#Base.lastindex&quot;&gt; &lt;code&gt;lastindex&lt;/code&gt; &lt;/a&gt;を定義して、それぞれ最初と最後の有効なインデックスを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="8af66c1813abced10595ff4db44c8598650f35a8" translate="yes" xml:space="preserve">
          <source>Additionally, to support the syntax &lt;code&gt;S[end]&lt;/code&gt;, we must define &lt;a href=&quot;../../base/collections/index#Base.lastindex&quot;&gt;&lt;code&gt;lastindex&lt;/code&gt;&lt;/a&gt; to specify the last valid index. It is recommended to also define &lt;a href=&quot;../../base/collections/index#Base.firstindex&quot;&gt;&lt;code&gt;firstindex&lt;/code&gt;&lt;/a&gt; to specify the first valid index:</source>
          <target state="translated">さらに、構文 &lt;code&gt;S[end]&lt;/code&gt; をサポートするには、&lt;a href=&quot;../../base/collections/index#Base.lastindex&quot;&gt; &lt;code&gt;lastindex&lt;/code&gt; &lt;/a&gt;を定義して、最後の有効なインデックスを指定する必要があります。&lt;a href=&quot;../../base/collections/index#Base.firstindex&quot;&gt; &lt;code&gt;firstindex&lt;/code&gt; &lt;/a&gt;も定義して、最初の有効なインデックスを指定することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0d6e9dda2992ae61bd194a5d6431ac6a6fc0e4af" translate="yes" xml:space="preserve">
          <source>Adds docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; to &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; each of which should be a documentable expression. This syntax is equivalent to</source>
          <target state="translated">docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; を &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; に追加します。それぞれをドキュメント化可能な式にする必要があります。この構文は次と同等です。</target>
        </trans-unit>
        <trans-unit id="8943e54e348b67270f56f401533e4c55795efd88" translate="yes" xml:space="preserve">
          <source>Adds docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; to expression generated by expanding &lt;code&gt;@m expression&lt;/code&gt;. This allows for expressions decorated with &lt;code&gt;@inline&lt;/code&gt;, &lt;code&gt;@noinline&lt;/code&gt;, &lt;code&gt;@generated&lt;/code&gt;, or any other macro to be documented in the same way as undecorated expressions.</source>
          <target state="translated">&lt;code&gt;@m expression&lt;/code&gt; を展開して生成された式にdocstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; を追加します。これにより、 &lt;code&gt;@noinline&lt;/code&gt; &lt;code&gt;@inline&lt;/code&gt; 、@noinline、 &lt;code&gt;@generated&lt;/code&gt; 、またはその他のマクロで装飾された式を、装飾されていない式と同じ方法で文書化できます。</target>
        </trans-unit>
        <trans-unit id="c5cf536102070d30975cbdc29561f68968871a8c" translate="yes" xml:space="preserve">
          <source>Adds docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; to the &lt;code&gt;@m(::Any)&lt;/code&gt; macro definition.</source>
          <target state="translated">docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; を &lt;code&gt;@m(::Any)&lt;/code&gt; マクロ定義に追加します。</target>
        </trans-unit>
        <trans-unit id="84e25857657b333b201a4364df19960589319dca" translate="yes" xml:space="preserve">
          <source>Adds docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; to the &lt;code&gt;Binding&lt;/code&gt;s &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, and &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; を &lt;code&gt;Binding&lt;/code&gt; s &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;b&lt;/code&gt; 、および &lt;code&gt;c&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="2f9a2f04c857c99469b4786ce6042e5c04d6c307" translate="yes" xml:space="preserve">
          <source>Adds docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; to the &lt;code&gt;Module&lt;/code&gt;&lt;code&gt;M&lt;/code&gt;. Adding the docstring above the &lt;code&gt;Module&lt;/code&gt; is the preferred syntax, however both are equivalent.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; &lt;code&gt;M&lt;/code&gt; に docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; を追加します。 &lt;code&gt;Module&lt;/code&gt; 上にdocstringを追加することをお勧めしますが、どちらも同等です。</target>
        </trans-unit>
        <trans-unit id="82e1da815004f8c82f5b3b4ddf196b362c9b6b8a" translate="yes" xml:space="preserve">
          <source>Adds docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; to the expression generated by expanding &lt;code&gt;@m expression&lt;/code&gt;. This allows for expressions decorated with &lt;code&gt;@inline&lt;/code&gt;, &lt;code&gt;@noinline&lt;/code&gt;, &lt;code&gt;@generated&lt;/code&gt;, or any other macro to be documented in the same way as undecorated expressions.</source>
          <target state="translated">&lt;code&gt;@m expression&lt;/code&gt; 展開して生成された式にdocstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; を追加します。これにより、 &lt;code&gt;@noinline&lt;/code&gt; &lt;code&gt;@inline&lt;/code&gt; 、@ noinline、 &lt;code&gt;@generated&lt;/code&gt; 、またはその他のマクロで装飾された式を、装飾されていない式と同じ方法で文書化できます。</target>
        </trans-unit>
        <trans-unit id="d607a4ba66a2defbbbd671ccd4f1fc3f1e66348d" translate="yes" xml:space="preserve">
          <source>Adds docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; to the function &lt;code&gt;f&lt;/code&gt;. The first version is the preferred syntax, however both are equivalent.</source>
          <target state="translated">docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; を関数 &lt;code&gt;f&lt;/code&gt; に追加します。最初のバージョンが推奨される構文ですが、どちらも同等です。</target>
        </trans-unit>
        <trans-unit id="015afea43fcf05b33dc7ee7ee68bca2953573884" translate="yes" xml:space="preserve">
          <source>Adds docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; to the macro named &lt;code&gt;@m&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@m&lt;/code&gt; という名前のマクロにdocstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="827af43a45abefcd341e6f719f9f401e5c730792" translate="yes" xml:space="preserve">
          <source>Adds docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; to the method &lt;code&gt;f(::Any)&lt;/code&gt;.</source>
          <target state="translated">docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; をメソッド &lt;code&gt;f(::Any)&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="b443c2f582d2d534bd4dd25c05fdf4fba408aed1" translate="yes" xml:space="preserve">
          <source>Adds docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; to the value associated with &lt;code&gt;sym&lt;/code&gt;. However, it is preferred that &lt;code&gt;sym&lt;/code&gt; is documented where it is defined.</source>
          <target state="translated">&lt;code&gt;sym&lt;/code&gt; に関連付けられた値にdocstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; を追加します。ただし、 &lt;code&gt;sym&lt;/code&gt; は、定義されている場所に文書化することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c8df7e7a7df772447527b2f26ed82b0a9c8b23e3" translate="yes" xml:space="preserve">
          <source>Adds docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; to the value associated with &lt;code&gt;sym&lt;/code&gt;. Users should prefer documenting &lt;code&gt;sym&lt;/code&gt; at its definition.</source>
          <target state="translated">docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; を &lt;code&gt;sym&lt;/code&gt; に関連付けられた値に追加します。ユーザーは &lt;code&gt;sym&lt;/code&gt; をその定義で文書化することを好むはずです。</target>
        </trans-unit>
        <trans-unit id="7496f9703fbec9a9c078ee921645986d1520779f" translate="yes" xml:space="preserve">
          <source>Adds docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; to two &lt;code&gt;Method&lt;/code&gt;s, namely &lt;code&gt;f(::Any)&lt;/code&gt; and &lt;code&gt;f(::Any, ::Any)&lt;/code&gt;.</source>
          <target state="translated">docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; を2つの &lt;code&gt;Method&lt;/code&gt; 、つまり &lt;code&gt;f(::Any)&lt;/code&gt; と &lt;code&gt;f(::Any, ::Any)&lt;/code&gt; 追加します。</target>
        </trans-unit>
        <trans-unit id="9c8aaa795c4bb3bd668d398ed223b6d5b98c3053" translate="yes" xml:space="preserve">
          <source>Adds docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; to type &lt;code&gt;T&lt;/code&gt;, &lt;code&gt;&quot;x&quot;&lt;/code&gt; to field &lt;code&gt;T.x&lt;/code&gt; and &lt;code&gt;&quot;y&quot;&lt;/code&gt; to field &lt;code&gt;T.y&lt;/code&gt;. Also applicable to &lt;code&gt;mutable struct&lt;/code&gt; types.</source>
          <target state="translated">docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; をタイプ &lt;code&gt;T&lt;/code&gt; に、 &lt;code&gt;&quot;x&quot;&lt;/code&gt; をフィールド &lt;code&gt;T.x&lt;/code&gt; 、 &lt;code&gt;&quot;y&quot;&lt;/code&gt; をフィールド &lt;code&gt;T.y&lt;/code&gt; 追加します。 &lt;code&gt;mutable struct&lt;/code&gt; 体型にも適用できます。</target>
        </trans-unit>
        <trans-unit id="509ef7b304e0d5048959f5a1e066b6245d575e62" translate="yes" xml:space="preserve">
          <source>Adds the docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; to types &lt;code&gt;T1&lt;/code&gt;, &lt;code&gt;T2&lt;/code&gt;, and &lt;code&gt;T3&lt;/code&gt;.</source>
          <target state="translated">docstring &lt;code&gt;&quot;...&quot;&lt;/code&gt; をタイプ &lt;code&gt;T1&lt;/code&gt; 、 &lt;code&gt;T2&lt;/code&gt; 、および &lt;code&gt;T3&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="e9a51c66a638e61a03f3ba3bc6a5ae7966f901a4" translate="yes" xml:space="preserve">
          <source>Adjuster Functions</source>
          <target state="translated">アジャスター機能</target>
        </trans-unit>
        <trans-unit id="3ed15208c269239266d3575007709a349ee8dcb4" translate="yes" xml:space="preserve">
          <source>Adjusts &lt;code&gt;dt&lt;/code&gt; by iterating at most &lt;code&gt;limit&lt;/code&gt; iterations by &lt;code&gt;step&lt;/code&gt; increments until &lt;code&gt;func&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. &lt;code&gt;func&lt;/code&gt; must take a single &lt;code&gt;TimeType&lt;/code&gt; argument and return a &lt;a href=&quot;../../base/numbers/index#Core.Bool&quot;&gt;&lt;code&gt;Bool&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;same&lt;/code&gt; allows &lt;code&gt;dt&lt;/code&gt; to be considered in satisfying &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="translated">調整するには、 &lt;code&gt;dt&lt;/code&gt; 最大で繰り返すことによって &lt;code&gt;limit&lt;/code&gt; により、反復 &lt;code&gt;step&lt;/code&gt; まで増加 &lt;code&gt;func&lt;/code&gt; 戻り &lt;code&gt;true&lt;/code&gt; 。 &lt;code&gt;func&lt;/code&gt; は単一の &lt;code&gt;TimeType&lt;/code&gt; 引数を取り、&lt;a href=&quot;../../base/numbers/index#Core.Bool&quot;&gt; &lt;code&gt;Bool&lt;/code&gt; &lt;/a&gt;を返す必要があります。 &lt;code&gt;same&lt;/code&gt; ことにより、 &lt;code&gt;dt&lt;/code&gt; が &lt;code&gt;func&lt;/code&gt; を満たすときに考慮されます。</target>
        </trans-unit>
        <trans-unit id="542b7e7c2fd74f8d271308bdddf4ad37b5294110" translate="yes" xml:space="preserve">
          <source>Adjusts &lt;code&gt;dt&lt;/code&gt; to the Monday of its week.</source>
          <target state="translated">&lt;code&gt;dt&lt;/code&gt; をその週の月曜日に調整します。</target>
        </trans-unit>
        <trans-unit id="ba3476b1421df6e3edaa8e17f787d5952e83be65" translate="yes" xml:space="preserve">
          <source>Adjusts &lt;code&gt;dt&lt;/code&gt; to the Sunday of its week.</source>
          <target state="translated">&lt;code&gt;dt&lt;/code&gt; をその週の日曜日に調整します。</target>
        </trans-unit>
        <trans-unit id="3224cd68e5551ff4e3fc4fc6b2b947ffc7f24a64" translate="yes" xml:space="preserve">
          <source>Adjusts &lt;code&gt;dt&lt;/code&gt; to the first &lt;code&gt;dow&lt;/code&gt; of its month. Alternatively, &lt;code&gt;of=Year&lt;/code&gt; will adjust to the first &lt;code&gt;dow&lt;/code&gt; of the year.</source>
          <target state="translated">&lt;code&gt;dt&lt;/code&gt; をその月の最初の &lt;code&gt;dow&lt;/code&gt; に調整します。または、 &lt;code&gt;of=Year&lt;/code&gt; はその年の最初の &lt;code&gt;dow&lt;/code&gt; に調整されます。</target>
        </trans-unit>
        <trans-unit id="85f046851c6e044a73b6195b73c28ea067eb7654" translate="yes" xml:space="preserve">
          <source>Adjusts &lt;code&gt;dt&lt;/code&gt; to the first day of its month.</source>
          <target state="translated">&lt;code&gt;dt&lt;/code&gt; をその月の最初の日に調整します。</target>
        </trans-unit>
        <trans-unit id="f4430fe642c3e3cf011a04583f6d0f8ce92cdee6" translate="yes" xml:space="preserve">
          <source>Adjusts &lt;code&gt;dt&lt;/code&gt; to the first day of its quarter.</source>
          <target state="translated">&lt;code&gt;dt&lt;/code&gt; をその四半期の最初の日に調整します。</target>
        </trans-unit>
        <trans-unit id="84bc65bd05f794b2297c4096e727f0dd2edbb9dd" translate="yes" xml:space="preserve">
          <source>Adjusts &lt;code&gt;dt&lt;/code&gt; to the first day of its year.</source>
          <target state="translated">&lt;code&gt;dt&lt;/code&gt; をその年の最初の日に調整します。</target>
        </trans-unit>
        <trans-unit id="2f0c9a334203505d658bff6209e3cc9cb72c986e" translate="yes" xml:space="preserve">
          <source>Adjusts &lt;code&gt;dt&lt;/code&gt; to the last &lt;code&gt;dow&lt;/code&gt; of its month. Alternatively, &lt;code&gt;of=Year&lt;/code&gt; will adjust to the last &lt;code&gt;dow&lt;/code&gt; of the year.</source>
          <target state="translated">&lt;code&gt;dt&lt;/code&gt; をその月の最後の &lt;code&gt;dow&lt;/code&gt; に調整します。または、 &lt;code&gt;of=Year&lt;/code&gt; はその年の最後の &lt;code&gt;dow&lt;/code&gt; に調整されます。</target>
        </trans-unit>
        <trans-unit id="78d3c49adba39ac1f401e060e547fe0cc0d6d99c" translate="yes" xml:space="preserve">
          <source>Adjusts &lt;code&gt;dt&lt;/code&gt; to the last day of its month.</source>
          <target state="translated">&lt;code&gt;dt&lt;/code&gt; をその月の最終日に調整します。</target>
        </trans-unit>
        <trans-unit id="64612df263c1926bf9efeecdbaf1b82e9cd07b8e" translate="yes" xml:space="preserve">
          <source>Adjusts &lt;code&gt;dt&lt;/code&gt; to the last day of its quarter.</source>
          <target state="translated">&lt;code&gt;dt&lt;/code&gt; をその四半期の最終日に調整します。</target>
        </trans-unit>
        <trans-unit id="91489c37594baa78e3476045075dafd7e9ef8e93" translate="yes" xml:space="preserve">
          <source>Adjusts &lt;code&gt;dt&lt;/code&gt; to the last day of its year.</source>
          <target state="translated">&lt;code&gt;dt&lt;/code&gt; をその年の最終日に調整します。</target>
        </trans-unit>
        <trans-unit id="f360011526f7451524f23fc8d46d352e948cc7d3" translate="yes" xml:space="preserve">
          <source>Adjusts &lt;code&gt;dt&lt;/code&gt; to the next day of week corresponding to &lt;code&gt;dow&lt;/code&gt; with &lt;code&gt;1 = Monday, 2 = Tuesday, etc&lt;/code&gt;. Setting &lt;code&gt;same=true&lt;/code&gt; allows the current &lt;code&gt;dt&lt;/code&gt; to be considered as the next &lt;code&gt;dow&lt;/code&gt;, allowing for no adjustment to occur.</source>
          <target state="translated">調整するには、 &lt;code&gt;dt&lt;/code&gt; に対応する週の次の日に &lt;code&gt;dow&lt;/code&gt; で &lt;code&gt;1 = Monday, 2 = Tuesday, etc&lt;/code&gt; 。 &lt;code&gt;same=true&lt;/code&gt; を設定すると、現在の &lt;code&gt;dt&lt;/code&gt; が次の &lt;code&gt;dow&lt;/code&gt; と見なされ、調整を行うことができなくなります。</target>
        </trans-unit>
        <trans-unit id="068372d2e011960d73021d80afa760372bcf985c" translate="yes" xml:space="preserve">
          <source>Adjusts &lt;code&gt;dt&lt;/code&gt; to the previous day of week corresponding to &lt;code&gt;dow&lt;/code&gt; with &lt;code&gt;1 = Monday, 2 = Tuesday, etc&lt;/code&gt;. Setting &lt;code&gt;same=true&lt;/code&gt; allows the current &lt;code&gt;dt&lt;/code&gt; to be considered as the previous &lt;code&gt;dow&lt;/code&gt;, allowing for no adjustment to occur.</source>
          <target state="translated">調整するには、 &lt;code&gt;dt&lt;/code&gt; に対応する週の前日に &lt;code&gt;dow&lt;/code&gt; で &lt;code&gt;1 = Monday, 2 = Tuesday, etc&lt;/code&gt; 。 &lt;code&gt;same=true&lt;/code&gt; を設定すると、現在の &lt;code&gt;dt&lt;/code&gt; が前の &lt;code&gt;dow&lt;/code&gt; と見なされ、調整を行うことができなくなります。</target>
        </trans-unit>
        <trans-unit id="59c3f81e00ff6162254f4463064f47b013b2418f" translate="yes" xml:space="preserve">
          <source>Admonitions</source>
          <target state="translated">Admonitions</target>
        </trans-unit>
        <trans-unit id="836a223dfb6110b2db06c9c781ddc336919a8a06" translate="yes" xml:space="preserve">
          <source>Admonitions, like most other toplevel elements, can contain other toplevel elements.</source>
          <target state="translated">戒めは、他のほとんどのトップレベル要素と同様に、他のトップレベル要素を含むことができます。</target>
        </trans-unit>
        <trans-unit id="b83b0b84935203a338ba6594cae9f540216d121e" translate="yes" xml:space="preserve">
          <source>Advance the iterator to obtain the next element. If no elements remain, &lt;code&gt;nothing&lt;/code&gt; should be returned. Otherwise, a 2-tuple of the next element and the new iteration state should be returned.</source>
          <target state="translated">イテレータを進めて、次の要素を取得します。要素が残っていない場合は、 &lt;code&gt;nothing&lt;/code&gt; も返されません。それ以外の場合は、次の要素の2タプルと新しい反復状態が返されます。</target>
        </trans-unit>
        <trans-unit id="4b6a7abaa616c69342aad0f3bc06d227b49b3cf3" translate="yes" xml:space="preserve">
          <source>Advance the stream &lt;code&gt;io&lt;/code&gt; such that the next-read character will be the first remaining for which &lt;code&gt;predicate&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;. If the keyword argument &lt;code&gt;linecomment&lt;/code&gt; is specified, all characters from that character until the start of the next line are ignored.</source>
          <target state="translated">次の読み取り文字が、 &lt;code&gt;predicate&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; を返す最初の残りの文字になるようにストリーム &lt;code&gt;io&lt;/code&gt; を進めます。キーワード引数 &lt;code&gt;linecomment&lt;/code&gt; が指定されている場合、その文字から次の行の先頭までのすべての文字は無視されます。</target>
        </trans-unit>
        <trans-unit id="ec9c1eee60a6c8d412e86494c4538774b81ce815" translate="yes" xml:space="preserve">
          <source>Advanced Usage</source>
          <target state="translated">高度な使用法</target>
        </trans-unit>
        <trans-unit id="ff26be938424cf2d67217e2575645ca68557c533" translate="yes" xml:space="preserve">
          <source>Aerial Tramway</source>
          <target state="translated">路面電車</target>
        </trans-unit>
        <trans-unit id="c3753451b13262a44f9a5817e07e24e560603141" translate="yes" xml:space="preserve">
          <source>After a call like &lt;code&gt;x = 5; y = power_by_squaring(x, 4)&lt;/code&gt;, you would get the expected result: &lt;code&gt;x == 5 &amp;amp;&amp;amp; y == 625&lt;/code&gt;. However, now suppose that &lt;code&gt;*=&lt;/code&gt;, when used with matrices, instead mutated the left hand side. There would be two problems:</source>
          <target state="translated">&lt;code&gt;x = 5; y = power_by_squaring(x, 4)&lt;/code&gt; ような呼び出しの後; y = power_by_squaring（x、4）、期待される結果が得られます： &lt;code&gt;x == 5 &amp;amp;&amp;amp; y == 625&lt;/code&gt; 。ただし、ここで &lt;code&gt;*=&lt;/code&gt; を行列と一緒に使用すると、左側が変更されたと仮定します。2つの問題があります。</target>
        </trans-unit>
        <trans-unit id="ad5164f2f115375c06ec8f88153f96f0d31b808d" translate="yes" xml:space="preserve">
          <source>After a task starts running on a certain thread (e.g. via &lt;code&gt;@spawn&lt;/code&gt;), it will always be restarted on the same thread after blocking. In the future this limitation will be removed, and tasks will migrate between threads.</source>
          <target state="translated">タスクが特定のスレッドで（たとえば &lt;code&gt;@spawn&lt;/code&gt; を介して）実行を開始すると、ブロック後に常に同じスレッドで再起動されます。将来、この制限はなくなり、タスクはスレッド間で移行されます。</target>
        </trans-unit>
        <trans-unit id="db34be90d58adae735cb60ab04365869aa56065b" translate="yes" xml:space="preserve">
          <source>Airplane</source>
          <target state="translated">Airplane</target>
        </trans-unit>
        <trans-unit id="80135999396a20e42730a1c2e1dfae947e0952c1" translate="yes" xml:space="preserve">
          <source>Alarm Clock</source>
          <target state="translated">目覚まし時計</target>
        </trans-unit>
        <trans-unit id="4c76737983211c324879531ef47ac946ce297c2e" translate="yes" xml:space="preserve">
          <source>Alef Symbol / First Transfinite Cardinal</source>
          <target state="translated">アレフシンボル/第一トランスフィニットカーディナル</target>
        </trans-unit>
        <trans-unit id="f2f34a33d9ae0109b50986f6079e5b5b8422fa27" translate="yes" xml:space="preserve">
          <source>Alias for &lt;code&gt;UndefInitializer()&lt;/code&gt;, which constructs an instance of the singleton type &lt;a href=&quot;#Core.UndefInitializer&quot;&gt;&lt;code&gt;UndefInitializer&lt;/code&gt;&lt;/a&gt;, used in array initialization to indicate the array-constructor-caller would like an uninitialized array.</source>
          <target state="translated">シングルトン型&lt;a href=&quot;#Core.UndefInitializer&quot;&gt; &lt;code&gt;UndefInitializer&lt;/code&gt; の&lt;/a&gt;インスタンスを構築する &lt;code&gt;UndefInitializer()&lt;/code&gt; のエイリアスは、配列の初期化で使用され、array-constructor-callerが初期化されていない配列を望んでいることを示します。</target>
        </trans-unit>
        <trans-unit id="38d75bc82e2c72130349f85ee2dea5673d201a42" translate="yes" xml:space="preserve">
          <source>Alien Monster</source>
          <target state="translated">エイリアンモンスター</target>
        </trans-unit>
        <trans-unit id="0c70d0069c9dc176b6060d55ab195149b38ec01a" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;export&lt;/code&gt;ed names (&lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;), &lt;code&gt;MyModule.x&lt;/code&gt;, &lt;code&gt;MyModule.y&lt;/code&gt; and &lt;code&gt;MyModule.p&lt;/code&gt;</source>
          <target state="translated">すべての &lt;code&gt;export&lt;/code&gt; 名前（ &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; ）、 &lt;code&gt;MyModule.x&lt;/code&gt; 、 &lt;code&gt;MyModule.y&lt;/code&gt; 、および &lt;code&gt;MyModule.p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91f95289d7bb9f459a113b14aa6caea6d6b0ee5b" translate="yes" xml:space="preserve">
          <source>All Equal To</source>
          <target state="translated">すべてに等しい</target>
        </trans-unit>
        <trans-unit id="59150af6415167841703220f4f97802416f10725" translate="yes" xml:space="preserve">
          <source>All I/O tasks, timers, REPL commands, etc are multiplexed onto a single OS thread via an event loop. A patched version of libuv (&lt;a href=&quot;http://docs.libuv.org/en/v1.x/&quot;&gt;http://docs.libuv.org/en/v1.x/&lt;/a&gt;) provides this functionality. Yield points provide for co-operatively scheduling multiple tasks onto the same OS thread. I/O tasks and timers yield implicitly while waiting for the event to occur. Calling &lt;a href=&quot;../../base/parallel/index#Base.yield&quot;&gt;&lt;code&gt;yield&lt;/code&gt;&lt;/a&gt; explicitly allows for other tasks to be scheduled.</source>
          <target state="translated">すべてのI / Oタスク、タイマー、REPLコマンドなどは、イベントループを介して単一のOSスレッドに多重化されます。libuvのパッチバージョン（&lt;a href=&quot;http://docs.libuv.org/en/v1.x/&quot;&gt;http://docs.libuv.org/en/v1.x/&lt;/a&gt;）がこの機能を提供します。降伏ポイントは、複数のタスクを同じOSスレッドに協調的にスケジュールすることを可能にします。I / Oタスクとタイマーは、イベントの発生を待機している間、暗黙的に生成されます。&lt;a href=&quot;../../base/parallel/index#Base.yield&quot;&gt; &lt;code&gt;yield&lt;/code&gt; を&lt;/a&gt;明示的に呼び出すと、他のタスクをスケジュールすることができます。</target>
        </trans-unit>
        <trans-unit id="e522896e2dfc730e2866839376a2a265314c5b2a" translate="yes" xml:space="preserve">
          <source>All Julia streams expose at least a &lt;a href=&quot;../../base/io-network/index#Base.read&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;../../base/io-network/index#Base.write&quot;&gt;&lt;code&gt;write&lt;/code&gt;&lt;/a&gt; method, taking the stream as their first argument, e.g.:</source>
          <target state="translated">すべてのJuliaストリームは、少なくとも&lt;a href=&quot;../../base/io-network/index#Base.read&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt;メソッドと&lt;a href=&quot;../../base/io-network/index#Base.write&quot;&gt; &lt;code&gt;write&lt;/code&gt; &lt;/a&gt;メソッドを公開し、ストリームを最初の引数として受け取ります。例：</target>
        </trans-unit>
        <trans-unit id="c6a6b81f53852c577455dd25f826592290abcb2e" translate="yes" xml:space="preserve">
          <source>All Objects</source>
          <target state="translated">すべてのオブジェクト</target>
        </trans-unit>
        <trans-unit id="dd1ab7575b34c95371319e3c78f1e648aa0611b0" translate="yes" xml:space="preserve">
          <source>All Unicode code points (&lt;code&gt;\U&lt;/code&gt; with 1-8 trailing hex digits; max value = 0010ffff)</source>
          <target state="translated">すべてのUnicodeコードポイント（ &lt;code&gt;\U&lt;/code&gt; 末尾に1〜8桁の16進数、最大値= 0010ffff）</target>
        </trans-unit>
        <trans-unit id="b272413234229118c2015aaa68ca35bdb9c75799" translate="yes" xml:space="preserve">
          <source>All code in the REPL is evaluated in global scope, so a variable defined and assigned at top level will be a &lt;strong&gt;global&lt;/strong&gt; variable. Variables defined at top level scope inside modules are also global.</source>
          <target state="translated">REPL内のすべてのコードはグローバルスコープで評価されるため、トップレベルで定義および割り当てられた変数は&lt;strong&gt;グローバル&lt;/strong&gt;変数になります。モジュール内の最上位スコープで定義された変数もグローバルです。</target>
        </trans-unit>
        <trans-unit id="d45486021b7cdd7677275ec32e5637b641c26f3c" translate="yes" xml:space="preserve">
          <source>All comma-separated expressions after &lt;code&gt;for&lt;/code&gt; are interpreted as ranges. Adding parentheses lets us add a third argument to &lt;a href=&quot;../../base/collections/index#Base.map&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;for&lt;/code&gt; の後のすべてのコンマ区切りの式は、範囲として解釈されます。括弧を追加すると、&lt;a href=&quot;../../base/collections/index#Base.map&quot;&gt; &lt;code&gt;map&lt;/code&gt; に&lt;/a&gt; 3番目の引数を追加できます。</target>
        </trans-unit>
        <trans-unit id="e1833bbb77ee3eab574ef8615d776277ec2b68aa" translate="yes" xml:space="preserve">
          <source>All connections are authenticated on both sides to ensure that only workers started by the master are allowed to connect to each other.</source>
          <target state="translated">すべての接続は双方で認証され、マスターによって開始されたワーカーのみがお互いに接続を許可されるようになっています。</target>
        </trans-unit>
        <trans-unit id="9ad5ec5b3a4aaf8bd9fb90db1fc3be44898322c8" translate="yes" xml:space="preserve">
          <source>All declared types (the &lt;code&gt;DataType&lt;/code&gt; variety) can be parameterized, with the same syntax in each case. We will discuss them in the following order: first, parametric composite types, then parametric abstract types, and finally parametric primitive types.</source>
          <target state="translated">すべての宣言された型（ &lt;code&gt;DataType&lt;/code&gt; の種類）は、いずれの場合も同じ構文でパラメーター化できます。最初にパラメトリック複合タイプ、次にパラメトリック抽象タイプ、最後にパラメトリックプリミティブタイプの順に説明します。</target>
        </trans-unit>
        <trans-unit id="d9c5dd854b32fb08dbc64da03bc88b2f5ca50052" translate="yes" xml:space="preserve">
          <source>All instances of some abstract types are by default considered &quot;sufficiently similar&quot; that a universal &lt;code&gt;convert&lt;/code&gt; definition is provided in Julia Base. For example, this definition states that it's valid to &lt;code&gt;convert&lt;/code&gt; any &lt;code&gt;Number&lt;/code&gt; type to any other by calling a 1-argument constructor:</source>
          <target state="translated">一部の抽象型のすべてのインスタンスは、デフォルトでは、Julia Baseで提供されている汎用 &lt;code&gt;convert&lt;/code&gt; 定義と「十分に類似」していると見なされます。たとえば、次の定義は、1つの引数のコンストラクターを呼び出すことにより &lt;code&gt;convert&lt;/code&gt; 任意の &lt;code&gt;Number&lt;/code&gt; 型を他の型に変換することが有効であることを示しています。</target>
        </trans-unit>
        <trans-unit id="40a2b8b6f65bf4cf79d2f004dafadcaa12f30e1e" translate="yes" xml:space="preserve">
          <source>All interface customization is done through the keyword only &lt;code&gt;TerminalMenus.config()&lt;/code&gt; function.</source>
          <target state="translated">すべてのインターフェイスのカスタマイズは、キーワードのみの &lt;code&gt;TerminalMenus.config()&lt;/code&gt; 関数を介して行われます。</target>
        </trans-unit>
        <trans-unit id="5e93c45e883f28df975e96b20e62c4d715867d52" translate="yes" xml:space="preserve">
          <source>All non-real parts of the diagonal will be ignored.</source>
          <target state="translated">対角線の実在しない部分はすべて無視されます。</target>
        </trans-unit>
        <trans-unit id="7f36c1fb18a59b1d9f547660c394427791f475ab" translate="yes" xml:space="preserve">
          <source>All of the logging macros &lt;code&gt;@debug&lt;/code&gt;, &lt;code&gt;@info&lt;/code&gt;, &lt;code&gt;@warn&lt;/code&gt; and &lt;code&gt;@error&lt;/code&gt; share common features that are described in detail in the documentation for the more general macro &lt;a href=&quot;#Base.CoreLogging.@logmsg&quot;&gt;&lt;code&gt;@logmsg&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ログマクロ &lt;code&gt;@debug&lt;/code&gt; 、 &lt;code&gt;@info&lt;/code&gt; 、 &lt;code&gt;@warn&lt;/code&gt; 、および &lt;code&gt;@error&lt;/code&gt; はすべて、より一般的なマクロ&lt;a href=&quot;#Base.CoreLogging.@logmsg&quot;&gt; &lt;code&gt;@logmsg&lt;/code&gt; の&lt;/a&gt;ドキュメントで詳細に説明されている共通の機能を共有しています。</target>
        </trans-unit>
        <trans-unit id="ec4e52b5ca9f88c6fa22f8c3f3902856d9403989" translate="yes" xml:space="preserve">
          <source>All of the logging macros &lt;code&gt;@debug&lt;/code&gt;, &lt;code&gt;@info&lt;/code&gt;, &lt;code&gt;@warn&lt;/code&gt; and &lt;code&gt;@error&lt;/code&gt; share common features that are described in detail in the documentation for the more general macro &lt;a href=&quot;#Logging.@logmsg&quot;&gt;&lt;code&gt;@logmsg&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">すべてのロギングマクロ &lt;code&gt;@debug&lt;/code&gt; 、 &lt;code&gt;@info&lt;/code&gt; 、 &lt;code&gt;@warn&lt;/code&gt; 、および &lt;code&gt;@error&lt;/code&gt; は、より一般的なマクロ&lt;a href=&quot;#Logging.@logmsg&quot;&gt; &lt;code&gt;@logmsg&lt;/code&gt; の&lt;/a&gt;ドキュメントで詳細に説明されている共通の機能を共有しています。</target>
        </trans-unit>
        <trans-unit id="97250d85e46e2f0063062a4fe00d04b5c8c86241" translate="yes" xml:space="preserve">
          <source>All operations on sparse matrices are carefully implemented to exploit the CSC data structure for performance, and to avoid expensive operations.</source>
          <target state="translated">疎な行列に対するすべての操作は,CSC データ構造を利用してパフォーマンスを向上させ,高価な操作を避けるために慎重に実装されています.</target>
        </trans-unit>
        <trans-unit id="d92bd72fff847012d04881678e278a18d2126812" translate="yes" xml:space="preserve">
          <source>All other combinations of arguments default to returning an &lt;code&gt;Array&lt;/code&gt;, but custom container types can define their own implementation and promotion-like rules to customize the result when they appear as arguments.</source>
          <target state="translated">他のすべての引数の組み合わせはデフォルトで &lt;code&gt;Array&lt;/code&gt; を返しますが、カスタムコンテナタイプは独自の実装とプロモーションのようなルールを定義して、引数として表示されるときの結果をカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="de25475b274a168126e2d504207af50116291e77" translate="yes" xml:space="preserve">
          <source>All processes can directly communicate with each other.</source>
          <target state="translated">すべてのプロセスは、お互いに直接通信することができます。</target>
        </trans-unit>
        <trans-unit id="7feddee30f64db86bbc24d86a29d550a804d3b31" translate="yes" xml:space="preserve">
          <source>All processes in a cluster share the same cookie which, by default, is a randomly generated string on the master process:</source>
          <target state="translated">クラスタ内のすべてのプロセスは同じクッキーを共有しますが、デフォルトではマスタープロセス上でランダムに生成された文字列です。</target>
        </trans-unit>
        <trans-unit id="ad59be0f62242de6d2f5d39eccfa83593fd9484b" translate="yes" xml:space="preserve">
          <source>All string types are subtypes of the abstract type &lt;code&gt;AbstractString&lt;/code&gt;, and external packages define additional &lt;code&gt;AbstractString&lt;/code&gt; subtypes (e.g. for other encodings). If you define a function expecting a string argument, you should declare the type as &lt;code&gt;AbstractString&lt;/code&gt; in order to accept any string type.</source>
          <target state="translated">すべての文字列型は抽象型 &lt;code&gt;AbstractString&lt;/code&gt; のサブタイプであり、外部パッケージは追加の &lt;code&gt;AbstractString&lt;/code&gt; サブタイプを定義します（他のエンコーディングなど）。文字列引数を期待する関数を定義する場合、文字列型を受け入れるために、その型を &lt;code&gt;AbstractString&lt;/code&gt; として宣言する必要があります。</target>
        </trans-unit>
        <trans-unit id="b0dc699cc676b22c3459d4cf16d1eaa2e5774729" translate="yes" xml:space="preserve">
          <source>All subtypes of &lt;code&gt;AbstractDateToken&lt;/code&gt; must define this method in order to be able to print a Date / DateTime object according to a &lt;code&gt;DateFormat&lt;/code&gt; containing that token.</source>
          <target state="translated">そのトークンを含む &lt;code&gt;DateFormat&lt;/code&gt; に従ってDate / DateTimeオブジェクトを出力できるようにするには、 &lt;code&gt;AbstractDateToken&lt;/code&gt; のすべてのサブタイプでこのメソッドを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="1c882b6f017fe5d01060c9bf473577d13959404c" translate="yes" xml:space="preserve">
          <source>All the sorting and order related functions rely on a &quot;less than&quot; relation defining a total order on the values to be manipulated. The &lt;code&gt;isless&lt;/code&gt; function is invoked by default, but the relation can be specified via the &lt;code&gt;lt&lt;/code&gt; keyword.</source>
          <target state="translated">並べ替えと順序に関連するすべての関数は、操作する値の合計順序を定義する「より小」関係に依存しています。 &lt;code&gt;isless&lt;/code&gt; の機能はデフォルトで起動されたが、関係を介して指定することができる &lt;code&gt;lt&lt;/code&gt; キーワード。</target>
        </trans-unit>
        <trans-unit id="3c82535675951a4a1fb997658084e8ecb7b3e47f" translate="yes" xml:space="preserve">
          <source>All the standard trigonometric and hyperbolic functions are also defined:</source>
          <target state="translated">標準的な三角関数や双曲線関数もすべて定義されています。</target>
        </trans-unit>
        <trans-unit id="47776a059f25c3e9e75665d89b25759946e151d9" translate="yes" xml:space="preserve">
          <source>All workers in a cluster share the same &lt;a href=&quot;#man-cluster-cookie&quot;&gt;cookie&lt;/a&gt; as the master. When the cookie is unspecified, i.e, with the &lt;code&gt;--worker&lt;/code&gt; option, the worker tries to read it from its standard input. &lt;code&gt;LocalManager&lt;/code&gt; and &lt;code&gt;SSHManager&lt;/code&gt; both pass the cookie to newly launched workers via their standard inputs.</source>
          <target state="translated">クラスター内のすべてのワーカーは、マスターと同じ&lt;a href=&quot;#man-cluster-cookie&quot;&gt;Cookie&lt;/a&gt;を共有します。Cookieが指定されていない場合、つまり &lt;code&gt;--worker&lt;/code&gt; オプションを使用している場合、ワーカーは標準入力からCookieを読み取ろうとします。 &lt;code&gt;LocalManager&lt;/code&gt; と &lt;code&gt;SSHManager&lt;/code&gt; はどちらも、標準の入力を介して新しく起動されたワーカーにCookieを渡します。</target>
        </trans-unit>
        <trans-unit id="6670e96208b5b1af061bdf66066d2386e48cd71d" translate="yes" xml:space="preserve">
          <source>All workers in a cluster share the same &lt;a href=&quot;#man-cluster-cookie-1&quot;&gt;cookie&lt;/a&gt; as the master. When the cookie is unspecified, i.e, with the &lt;code&gt;--worker&lt;/code&gt; option, the worker tries to read it from its standard input. &lt;code&gt;LocalManager&lt;/code&gt; and &lt;code&gt;SSHManager&lt;/code&gt; both pass the cookie to newly launched workers via their standard inputs.</source>
          <target state="translated">クラスタ内のすべてのワーカーは、マスターと同じ&lt;a href=&quot;#man-cluster-cookie-1&quot;&gt;Cookie&lt;/a&gt;を共有します。 &lt;code&gt;--worker&lt;/code&gt; オプションを使用してCookieが指定されていない場合、ワーカーは標準入力からCookie を読み取ろうとします。 &lt;code&gt;LocalManager&lt;/code&gt; と &lt;code&gt;SSHManager&lt;/code&gt; はどちらも、標準入力を介してCookieを新しく起動したワーカーに渡します。</target>
        </trans-unit>
        <trans-unit id="cc1f71fefd88bfe7d7be3a2017ea32033d467364" translate="yes" xml:space="preserve">
          <source>Allocation of output container</source>
          <target state="translated">出力コンテナの割り当て</target>
        </trans-unit>
        <trans-unit id="dbd9853a9ad8ada702240986063881992112c9e5" translate="yes" xml:space="preserve">
          <source>Allowed Variable Names</source>
          <target state="translated">許可された変数名</target>
        </trans-unit>
        <trans-unit id="91b9aa574b0fcbb72864d68cfe9f2b306633c73a" translate="yes" xml:space="preserve">
          <source>Allowed within</source>
          <target state="translated">内で許可されている</target>
        </trans-unit>
        <trans-unit id="18ef6092b26e1508d93983ee74a79d58892de4c1" translate="yes" xml:space="preserve">
          <source>Almost Equal Or Equal To</source>
          <target state="translated">ほぼ同等</target>
        </trans-unit>
        <trans-unit id="1fbf3e4677335672b3087596163b48e552785b56" translate="yes" xml:space="preserve">
          <source>Almost Equal To</source>
          <target state="translated">にほぼ等しい</target>
        </trans-unit>
        <trans-unit id="7475fcee6d3c9395bedceacb414c243d6b969b91" translate="yes" xml:space="preserve">
          <source>Almost Equal To With Circumflex Accent</source>
          <target state="translated">ほぼイコールウィズサーカムフレックスアクセント</target>
        </trans-unit>
        <trans-unit id="2c35923911b4ba37311dbb677458e2c0adca9382" translate="yes" xml:space="preserve">
          <source>Alright, now that we have a better understanding of how generated functions work, let's use them to build some more advanced (and valid) functionality...</source>
          <target state="translated">さて、生成された関数がどのように動くのかをよりよく理解できたので、それを使ってより高度な (そして有効な)機能を構築してみましょう...</target>
        </trans-unit>
        <trans-unit id="c2ff920784db1defb83bee5378709d9aaacf2e45" translate="yes" xml:space="preserve">
          <source>Also notice the difference between &lt;code&gt;max.(a,b)&lt;/code&gt;, which &lt;a href=&quot;../../base/arrays/index#Base.Broadcast.broadcast&quot;&gt;&lt;code&gt;broadcast&lt;/code&gt;&lt;/a&gt;s &lt;a href=&quot;../../base/math/index#Base.max&quot;&gt;&lt;code&gt;max&lt;/code&gt;&lt;/a&gt; elementwise over &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, and &lt;a href=&quot;../../base/collections/index#Base.maximum&quot;&gt;&lt;code&gt;maximum(a)&lt;/code&gt;&lt;/a&gt;, which finds the largest value within &lt;code&gt;a&lt;/code&gt;. The same relationship holds for &lt;code&gt;min.(a,b)&lt;/code&gt; and &lt;code&gt;minimum(a)&lt;/code&gt;.</source>
          <target state="translated">また、要素ごとにs &lt;a href=&quot;../../base/math/index#Base.max&quot;&gt; &lt;code&gt;max&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; に&lt;a href=&quot;../../base/arrays/index#Base.Broadcast.broadcast&quot;&gt; &lt;code&gt;broadcast&lt;/code&gt; &lt;/a&gt; &lt;code&gt;max.(a,b)&lt;/code&gt; と、a内の最大値を見つける&lt;a href=&quot;../../base/collections/index#Base.maximum&quot;&gt; &lt;code&gt;maximum(a)&lt;/code&gt; &lt;/a&gt;の違いにも注意し &lt;code&gt;a&lt;/code&gt; 。同じ関係が &lt;code&gt;min.(a,b)&lt;/code&gt; と &lt;code&gt;minimum(a)&lt;/code&gt; a）にも当てはまります。</target>
        </trans-unit>
        <trans-unit id="9c0081a46476345434d3719172fe53c135ada9e3" translate="yes" xml:space="preserve">
          <source>Also observe the significant distinction between &lt;code&gt;\xff&lt;/code&gt; and &lt;code&gt;\uff&lt;/code&gt;: the former escape sequence encodes the &lt;em&gt;byte 255&lt;/em&gt;, whereas the latter escape sequence represents the &lt;em&gt;code point 255&lt;/em&gt;, which is encoded as two bytes in UTF-8:</source>
          <target state="translated">また、有意な違いを観察する間 &lt;code&gt;\xff&lt;/code&gt; と &lt;code&gt;\uff&lt;/code&gt; ：前者のエスケープシーケンスは、コード&lt;em&gt;バイト255を&lt;/em&gt;後者のエスケープシーケンスを表すのに対し、&lt;em&gt;コードポイント255&lt;/em&gt; UTF-8で2バイトとして符号化されます：</target>
        </trans-unit>
        <trans-unit id="6bc9da3cb0ed97f96102bee03dd8744d00eda6b1" translate="yes" xml:space="preserve">
          <source>Also recommended is Bruce Dawson's &lt;a href=&quot;https://randomascii.wordpress.com/2012/05/20/thats-not-normalthe-performance-of-odd-floats/&quot;&gt;series of blog posts on floating-point numbers&lt;/a&gt;.</source>
          <target state="translated">また&lt;a href=&quot;https://randomascii.wordpress.com/2012/05/20/thats-not-normalthe-performance-of-odd-floats/&quot;&gt;、浮動小数点数に関する&lt;/a&gt; Bruce Dawsonの一連のブログ投稿もお勧めします。</target>
        </trans-unit>
        <trans-unit id="3be1a8ba3f90adcceb5c1de0a45416e04c2e2aa6" translate="yes" xml:space="preserve">
          <source>Also, &lt;em&gt;every&lt;/em&gt; binary operator supports a &lt;a href=&quot;../mathematical-operations/index#man-dot-operators&quot;&gt;dot version&lt;/a&gt; that can be applied to arrays (and combinations of arrays and scalars) in such &lt;a href=&quot;../functions/index#man-vectorized&quot;&gt;fused broadcasting operations&lt;/a&gt;, e.g. &lt;code&gt;z .== sin.(x .* y)&lt;/code&gt;.</source>
          <target state="translated">また、&lt;em&gt;すべての&lt;/em&gt;二項演算子は、このような&lt;a href=&quot;../functions/index#man-vectorized&quot;&gt;融合ブロードキャスト操作&lt;/a&gt;で配列（および配列とスカラーの組み合わせ）に適用できる&lt;a href=&quot;../mathematical-operations/index#man-dot-operators&quot;&gt;ドットバージョン&lt;/a&gt;をサポートします（例： &lt;code&gt;z .== sin.(x .* y)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a4d960a868768098e1ba53fb3f2c0df8ab0a40a7" translate="yes" xml:space="preserve">
          <source>Also, &lt;em&gt;every&lt;/em&gt; binary operator supports a &lt;a href=&quot;../mathematical-operations/index#man-dot-operators-1&quot;&gt;dot version&lt;/a&gt; that can be applied to arrays (and combinations of arrays and scalars) in such &lt;a href=&quot;../functions/index#man-vectorized-1&quot;&gt;fused broadcasting operations&lt;/a&gt;, e.g. &lt;code&gt;z .== sin.(x .* y)&lt;/code&gt;.</source>
          <target state="translated">また、&lt;em&gt;すべての&lt;/em&gt; 2項演算子は、このような&lt;a href=&quot;../functions/index#man-vectorized-1&quot;&gt;融合型ブロードキャスト操作&lt;/a&gt;で配列（および配列とスカラーの組み合わせ）に適用できる&lt;a href=&quot;../mathematical-operations/index#man-dot-operators-1&quot;&gt;ドットバージョン&lt;/a&gt;をサポートしています（例： &lt;code&gt;z .== sin.(x .* y)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef09b3cc10de506de44d97115e3fd6f71c9ee1fa" translate="yes" xml:space="preserve">
          <source>Also, the function that arguments are splatted into need not be a varargs function (although it often is):</source>
          <target state="translated">また、引数がスプラットされる関数は varargs 関数である必要はありません (よくありますが)。</target>
        </trans-unit>
        <trans-unit id="a36cb69e8042fa50a20647f8ee8afd7f80876eda" translate="yes" xml:space="preserve">
          <source>Alternate syntax for open, where a string-based mode specifier is used instead of the five booleans. The values of &lt;code&gt;mode&lt;/code&gt; correspond to those from &lt;code&gt;fopen(3)&lt;/code&gt; or Perl &lt;code&gt;open&lt;/code&gt;, and are equivalent to setting the following boolean groups:</source>
          <target state="translated">5つのブール値の代わりに文字列ベースのモード指定子が使用される、openの代替構文。 &lt;code&gt;mode&lt;/code&gt; の値は、 &lt;code&gt;fopen(3)&lt;/code&gt; またはPerl &lt;code&gt;open&lt;/code&gt; の値に対応し、次のブールグループの設定と同等です。</target>
        </trans-unit>
        <trans-unit id="a084d20c27ad4b5e370e6e41af49a7a8b0bbbe9c" translate="yes" xml:space="preserve">
          <source>Alternatively, &lt;code&gt;using Module&lt;/code&gt; will import all exported &lt;code&gt;Module&lt;/code&gt; functions into the current namespace.</source>
          <target state="translated">または、 &lt;code&gt;using Module&lt;/code&gt; を使用すると、エクスポートされたすべての &lt;code&gt;Module&lt;/code&gt; 関数が現在の名前空間にインポートされます。</target>
        </trans-unit>
        <trans-unit id="cfd0514a347606051a7fccfba50cde275fcde17f" translate="yes" xml:space="preserve">
          <source>Alternatively, a sequence of pair arguments may be passed.</source>
          <target state="translated">あるいは、一連のペア引数を渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="05c4eee40518a92290ba5caa4623a48a40f59cc6" translate="yes" xml:space="preserve">
          <source>Alternatively, finer control and additional transformations may be be obtained by calling &lt;code&gt;Unicode.normalize(s; keywords...)&lt;/code&gt;, where any number of the following boolean keywords options (which all default to &lt;code&gt;false&lt;/code&gt; except for &lt;code&gt;compose&lt;/code&gt;) are specified:</source>
          <target state="translated">または、 &lt;code&gt;Unicode.normalize(s; keywords...)&lt;/code&gt; 呼び出すことにより、より細かい制御と追加の変換を取得できます。ここでは、次のブールキーワードオプション（ &lt;code&gt;compose&lt;/code&gt; を除いてすべてデフォルトで &lt;code&gt;false&lt;/code&gt; ）を指定します。</target>
        </trans-unit>
        <trans-unit id="afdfa160e58c5d1c29ca9c36c54e36dba734b5d6" translate="yes" xml:space="preserve">
          <source>Alternatively, finer control and additional transformations may be obtained by calling &lt;code&gt;Unicode.normalize(s; keywords...)&lt;/code&gt;, where any number of the following boolean keywords options (which all default to &lt;code&gt;false&lt;/code&gt; except for &lt;code&gt;compose&lt;/code&gt;) are specified:</source>
          <target state="translated">または、 &lt;code&gt;Unicode.normalize(s; keywords...)&lt;/code&gt; 呼び出すことで、より細かい制御と追加の変換を行うことができます。ここでは、次のブールキーワードオプション（ &lt;code&gt;compose&lt;/code&gt; を除くすべてがデフォルトで &lt;code&gt;false&lt;/code&gt; ）をいくつでも指定できます。</target>
        </trans-unit>
        <trans-unit id="010a2642adb5dc50cd6b75461c8c6c62daaeaa3c" translate="yes" xml:space="preserve">
          <source>Alternatively, for all methods but one you can insist that there is at least one element in the tuple:</source>
          <target state="translated">あるいは、1つのメソッド以外のすべてのメソッドについて、タプルに少なくとも1つの要素があることを主張することもできます。</target>
        </trans-unit>
        <trans-unit id="658838e4feeee97296786aaec18103d8deb93854" translate="yes" xml:space="preserve">
          <source>Alternatively, if you have already allocated the array you can generate a thin wrapper around its data:</source>
          <target state="translated">あるいは、すでに配列を確保している場合は、そのデータの周りに薄いラッパーを生成することもできます。</target>
        </trans-unit>
        <trans-unit id="09d124820084afee646f363e2b5b6737ae2fc063" translate="yes" xml:space="preserve">
          <source>Alternatively, look at the &lt;code&gt;embedding.c&lt;/code&gt; program in the Julia source tree in the &lt;code&gt;test/embedding/&lt;/code&gt; folder. The file &lt;code&gt;ui/repl.c&lt;/code&gt; program is another simple example of how to set &lt;code&gt;jl_options&lt;/code&gt; options while linking against &lt;code&gt;libjulia&lt;/code&gt;.</source>
          <target state="translated">または、 &lt;code&gt;test/embedding/&lt;/code&gt; フォルダーのJuliaソースツリーにある &lt;code&gt;embedding.c&lt;/code&gt; プログラムを確認します。ファイル &lt;code&gt;ui/repl.c&lt;/code&gt; プログラムは、 &lt;code&gt;libjulia&lt;/code&gt; にリンクするときに &lt;code&gt;jl_options&lt;/code&gt; オプションを設定する方法のもう1つの簡単な例です。</target>
        </trans-unit>
        <trans-unit id="0651e957590c9ae374820826fa54266e498875fb" translate="yes" xml:space="preserve">
          <source>Alternatively, one of the four &quot;normal forms&quot; of the Unicode standard can be specified: &lt;code&gt;normalform&lt;/code&gt; can be &lt;code&gt;:NFC&lt;/code&gt;, &lt;code&gt;:NFD&lt;/code&gt;, &lt;code&gt;:NFKC&lt;/code&gt;, or &lt;code&gt;:NFKD&lt;/code&gt;. Normal forms C (canonical composition) and D (canonical decomposition) convert different visually identical representations of the same abstract string into a single canonical form, with form C being more compact. Normal forms KC and KD additionally canonicalize &quot;compatibility equivalents&quot;: they convert characters that are abstractly similar but visually distinct into a single canonical choice (e.g. they expand ligatures into the individual characters), with form KC being more compact.</source>
          <target state="translated">または、Unicode標準の4つの「正規形」のいずれかを指定できます &lt;code&gt;normalform&lt;/code&gt; は &lt;code&gt;:NFC&lt;/code&gt; 、 &lt;code&gt;:NFD&lt;/code&gt; 、 &lt;code&gt;:NFKC&lt;/code&gt; 、または &lt;code&gt;:NFKD&lt;/code&gt; です。正規形C（正規構成）とD（正規分解）は、同じ抽象文字列の視覚的に同一の異なる表現を単一の正規形式に変換します。形式Cはよりコンパクトです。正規形KCおよびKDはさらに、「互換性の同等物」を正規化します。これらは、抽象的に類似しているが視覚的に異なる文字を単一の正規の選択肢に変換し（たとえば、合字を個々の文字に拡張します）、形式KCはよりコンパクトです。</target>
        </trans-unit>
        <trans-unit id="138af7c8699b17e1331dd202694df9508d5db6a5" translate="yes" xml:space="preserve">
          <source>Although MATLAB users may find Julia's syntax familiar, Julia is not a MATLAB clone. There are major syntactic and functional differences. The following are some noteworthy differences that may trip up Julia users accustomed to MATLAB:</source>
          <target state="translated">MATLABユーザはJuliaの構文に見覚えがあるかもしれませんが、JuliaはMATLABのクローンではありません。構文的にも機能的にも大きな違いがあります。以下は、MATLABに慣れているJuliaのユーザを悩ませるような顕著な違いです。</target>
        </trans-unit>
        <trans-unit id="995141b8a0f9c91fdda45a6f5368f07495906a19" translate="yes" xml:space="preserve">
          <source>Although it is generally a good idea to return a fully initialized object from an inner constructor, it is possible to return incompletely initialized objects:</source>
          <target state="translated">内部コンストラクタから完全に初期化されたオブジェクトを返すのが一般的ですが、不完全に初期化されたオブジェクトを返すことも可能です。</target>
        </trans-unit>
        <trans-unit id="37777e78887373deee2eff18df3fa452fb79fe3f" translate="yes" xml:space="preserve">
          <source>Although it seems a simple concept, multiple dispatch on the types of values is perhaps the single most powerful and central feature of the Julia language. Core operations typically have dozens of methods:</source>
          <target state="translated">単純な概念のように見えますが、値の型に対する複数のディスパッチはおそらくJulia言語の最も強力で中心的な機能です。コアとなる操作には、一般的に数十個のメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="29da1b638100965fc90d2d714395923c89f62871" translate="yes" xml:space="preserve">
          <source>Although one could, in principle, define methods for the &lt;code&gt;promote&lt;/code&gt; function directly, this would require many redundant definitions for all possible permutations of argument types. Instead, the behavior of &lt;code&gt;promote&lt;/code&gt; is defined in terms of an auxiliary function called &lt;a href=&quot;../../base/base/index#Base.promote_rule&quot;&gt;&lt;code&gt;promote_rule&lt;/code&gt;&lt;/a&gt;, which one can provide methods for. The &lt;code&gt;promote_rule&lt;/code&gt; function takes a pair of type objects and returns another type object, such that instances of the argument types will be promoted to the returned type. Thus, by defining the rule:</source>
          <target state="translated">原則として、 &lt;code&gt;promote&lt;/code&gt; 関数のメソッドを直接定義することもできますが、これには、引数タイプの可能なすべての順列に対して多くの冗長な定義が必要になります。代わりに、 &lt;code&gt;promote&lt;/code&gt; の動作は、メソッドを提供できる&lt;a href=&quot;../../base/base/index#Base.promote_rule&quot;&gt; &lt;code&gt;promote_rule&lt;/code&gt; &lt;/a&gt;と呼ばれる補助関数によって定義されます。 &lt;code&gt;promote_rule&lt;/code&gt; の関数は、引数の型のインスタンスが返される型に昇格されるように、タイプオブジェクトのペアを取り、別のタイプのオブジェクトを返します。したがって、ルールを定義することにより：</target>
        </trans-unit>
        <trans-unit id="b980acb1a668eb7b397d3aa918a20ac9dccd65cc" translate="yes" xml:space="preserve">
          <source>Although one sometimes speaks of dynamic languages as being &quot;typeless&quot;, they are definitely not: every object, whether primitive or user-defined, has a type. The lack of type declarations in most dynamic languages, however, means that one cannot instruct the compiler about the types of values, and often cannot explicitly talk about types at all. In static languages, on the other hand, while one can &amp;ndash; and usually must &amp;ndash; annotate types for the compiler, types exist only at compile time and cannot be manipulated or expressed at run time. In Julia, types are themselves run-time objects, and can also be used to convey information to the compiler.</source>
          <target state="translated">動的言語は「型なし」であると言われることもありますが、そうではありません。プリミティブであろうとユーザー定義であろうと、すべてのオブジェクトには型があります。ただし、ほとんどの動的言語では型宣言がないため、値の型についてコンパイラーに指示することができず、型について明示的に話すことはできません。一方、静的言語では、コンパイラの型に注釈を付けることができ（通常は必須）、型はコンパイル時にのみ存在し、実行時に操作または表現することはできません。 Juliaでは、型自体がランタイムオブジェクトであり、コンパイラに情報を伝達するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="125f5076dabfcecbce55bdc53934ea25594cddd6" translate="yes" xml:space="preserve">
          <source>Although this seems innocent enough, the problem is that &lt;code&gt;0&lt;/code&gt; is an integer (of type &lt;code&gt;Int&lt;/code&gt;) and &lt;code&gt;x&lt;/code&gt; might be of any type. Thus, depending on the value of &lt;code&gt;x&lt;/code&gt;, this function might return a value of either of two types. This behavior is allowed, and may be desirable in some cases. But it can easily be fixed as follows:</source>
          <target state="translated">これは無実のように見えますが、問題は、 &lt;code&gt;0&lt;/code&gt; が（タイプ &lt;code&gt;Int&lt;/code&gt; の）整数であり、 &lt;code&gt;x&lt;/code&gt; が任意のタイプである可能性があることです。したがって、 &lt;code&gt;x&lt;/code&gt; の値に応じて、この関数は2つのタイプのいずれかの値を返す可能性があります。この動作は許可されており、場合によっては望ましいことがあります。ただし、次のように簡単に修正できます。</target>
        </trans-unit>
        <trans-unit id="0ec497a089c99ee5c6f04e61edfbbd31dd8344ae" translate="yes" xml:space="preserve">
          <source>Always gives the opposite answer as &lt;a href=&quot;../base/index#Core.:===&quot;&gt;&lt;code&gt;===&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">常に反対の答えを&lt;a href=&quot;../base/index#Core.:===&quot;&gt; &lt;code&gt;===&lt;/code&gt; &lt;/a&gt;として返します。</target>
        </trans-unit>
        <trans-unit id="d4fd498143f69490fe006adbf63236a973c15889" translate="yes" xml:space="preserve">
          <source>Always show the signature of a function at the top of the documentation, with a four-space indent so that it is printed as Julia code.</source>
          <target state="translated">関数のシグネチャは必ずドキュメントの先頭に表示してください。</target>
        </trans-unit>
        <trans-unit id="660916a9bd0a5e0c60196e069f980a7e1234e2f9" translate="yes" xml:space="preserve">
          <source>Amalgamation Or Coproduct</source>
          <target state="translated">併合または共同製品</target>
        </trans-unit>
        <trans-unit id="6ed272289e5ab5f2571a80ecd7c9ab3c53aaab06" translate="yes" xml:space="preserve">
          <source>Ambulance</source>
          <target state="translated">Ambulance</target>
        </trans-unit>
        <trans-unit id="6d1fa3121887df24f251a0892c85ff68056930fd" translate="yes" xml:space="preserve">
          <source>American Football</source>
          <target state="translated">アメリカンフットボール</target>
        </trans-unit>
        <trans-unit id="f035eead5c54745562ec49798968d1579aa5f09e" translate="yes" xml:space="preserve">
          <source>An 8-byte identifying header is written to the stream first. To avoid writing the header, construct a &lt;code&gt;Serializer&lt;/code&gt; and use it as the first argument to &lt;code&gt;serialize&lt;/code&gt; instead. See also &lt;a href=&quot;#Serialization.writeheader&quot;&gt;&lt;code&gt;Serialization.writeheader&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">最初に8バイトの識別ヘッダーがストリームに書き込まれます。ヘッダを書き込まないようにするには、構築 &lt;code&gt;Serializer&lt;/code&gt; しての最初の引数として使用 &lt;code&gt;serialize&lt;/code&gt; 代わりに。&lt;a href=&quot;#Serialization.writeheader&quot;&gt; &lt;code&gt;Serialization.writeheader&lt;/code&gt; &lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="9f8eb9358e7cc36217bd2b82eb7c1c39f3757d67" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;#Base.IOBuffer&quot;&gt;&lt;code&gt;IOBuffer&lt;/code&gt;&lt;/a&gt; that allows reading and performs writes by appending. Seeking and truncating are not supported. See &lt;a href=&quot;#Base.IOBuffer&quot;&gt;&lt;code&gt;IOBuffer&lt;/code&gt;&lt;/a&gt; for the available constructors. If &lt;code&gt;data&lt;/code&gt; is given, creates a &lt;code&gt;PipeBuffer&lt;/code&gt; to operate on a data vector, optionally specifying a size beyond which the underlying &lt;code&gt;Array&lt;/code&gt; may not be grown.</source>
          <target state="translated">追加によって読み取りを許可し、書き込みを実行する&lt;a href=&quot;#Base.IOBuffer&quot;&gt; &lt;code&gt;IOBuffer&lt;/code&gt; &lt;/a&gt;。シークと切り捨てはサポートされていません。使用可能なコンストラクターについては、&lt;a href=&quot;#Base.IOBuffer&quot;&gt; &lt;code&gt;IOBuffer&lt;/code&gt; &lt;/a&gt;を参照してください。 &lt;code&gt;data&lt;/code&gt; が指定されている場合は、データベクタを操作する &lt;code&gt;PipeBuffer&lt;/code&gt; を作成します。オプションで、基になる &lt;code&gt;Array&lt;/code&gt; 拡張できないサイズを指定します。</target>
        </trans-unit>
        <trans-unit id="46a38d582619a610af47f792a125ea49f7521df6" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../../base/base/index#Core.ErrorException&quot;&gt;&lt;code&gt;ErrorException&lt;/code&gt;&lt;/a&gt; is raised if all workers cannot be terminated before the requested &lt;code&gt;waitfor&lt;/code&gt; seconds.</source>
          <target state="translated">アン&lt;a href=&quot;../../base/base/index#Core.ErrorException&quot;&gt; &lt;code&gt;ErrorException&lt;/code&gt; は、&lt;/a&gt;すべての労働者が要求する前に終了することができない場合にスローされる &lt;code&gt;waitfor&lt;/code&gt; 秒。</target>
        </trans-unit>
        <trans-unit id="1bb56954c25d718243d7106afdb56cc9d480c633" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AbstractRange&lt;/code&gt; giving the indices of the &lt;code&gt;k&lt;/code&gt;th diagonal of the matrix &lt;code&gt;M&lt;/code&gt;.</source>
          <target state="translated">AN &lt;code&gt;AbstractRange&lt;/code&gt; の指標を与える &lt;code&gt;k&lt;/code&gt; 番目の対角行列の &lt;code&gt;M&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="213f54bf4207eca3291be6421983a526dc7b3d7a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ArgumentError&lt;/code&gt; is thrown if &lt;code&gt;itr&lt;/code&gt; contains &lt;code&gt;NaN&lt;/code&gt; or &lt;a href=&quot;../../base/base/index#Base.missing&quot;&gt;&lt;code&gt;missing&lt;/code&gt;&lt;/a&gt; values. Use the &lt;a href=&quot;../../base/base/index#Base.skipmissing&quot;&gt;&lt;code&gt;skipmissing&lt;/code&gt;&lt;/a&gt; function to omit &lt;code&gt;missing&lt;/code&gt; entries and compute the quantiles of non-missing values.</source>
          <target state="translated">アン &lt;code&gt;ArgumentError&lt;/code&gt; 場合にスローされる &lt;code&gt;itr&lt;/code&gt; 含まれている &lt;code&gt;NaN&lt;/code&gt; または&lt;a href=&quot;../../base/base/index#Base.missing&quot;&gt; &lt;code&gt;missing&lt;/code&gt; &lt;/a&gt;値を。&lt;a href=&quot;../../base/base/index#Base.skipmissing&quot;&gt; &lt;code&gt;skipmissing&lt;/code&gt; &lt;/a&gt;関数を使用して、 &lt;code&gt;missing&lt;/code&gt; エントリを省略し、欠落していない値の分位数を計算します。</target>
        </trans-unit>
        <trans-unit id="6168a5d96f0d40b398487557f6a06e26763f063a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ArgumentError&lt;/code&gt; is thrown if &lt;code&gt;v&lt;/code&gt; contains &lt;code&gt;NaN&lt;/code&gt; or &lt;a href=&quot;../../base/base/index#Base.missing&quot;&gt;&lt;code&gt;missing&lt;/code&gt;&lt;/a&gt; values.</source>
          <target state="translated">アン &lt;code&gt;ArgumentError&lt;/code&gt; 場合にスローさ &lt;code&gt;v&lt;/code&gt; が含まれている &lt;code&gt;NaN&lt;/code&gt; または&lt;a href=&quot;../../base/base/index#Base.missing&quot;&gt; &lt;code&gt;missing&lt;/code&gt; &lt;/a&gt;値を。</target>
        </trans-unit>
        <trans-unit id="273b5060458d33a00226d8a4b324524243edaee5" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ArgumentError&lt;/code&gt; is thrown if &lt;code&gt;v&lt;/code&gt; contains &lt;code&gt;NaN&lt;/code&gt; or &lt;a href=&quot;../../base/base/index#Base.missing&quot;&gt;&lt;code&gt;missing&lt;/code&gt;&lt;/a&gt; values. Use the &lt;a href=&quot;../../base/base/index#Base.skipmissing&quot;&gt;&lt;code&gt;skipmissing&lt;/code&gt;&lt;/a&gt; function to omit &lt;code&gt;missing&lt;/code&gt; entries and compute the quantiles of non-missing values.</source>
          <target state="translated">アン &lt;code&gt;ArgumentError&lt;/code&gt; 場合にスローさ &lt;code&gt;v&lt;/code&gt; が含まれている &lt;code&gt;NaN&lt;/code&gt; または&lt;a href=&quot;../../base/base/index#Base.missing&quot;&gt; &lt;code&gt;missing&lt;/code&gt; &lt;/a&gt;値を。&lt;a href=&quot;../../base/base/index#Base.skipmissing&quot;&gt; &lt;code&gt;skipmissing&lt;/code&gt; &lt;/a&gt;関数を使用して、 &lt;code&gt;missing&lt;/code&gt; エントリを省略し、欠落していない値の分位数を計算します。</target>
        </trans-unit>
        <trans-unit id="de0265152d952d723c42ab1da85aac224914443f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;N&lt;/code&gt; dimensional &lt;em&gt;strided&lt;/em&gt; array with elements of type &lt;code&gt;T&lt;/code&gt;. These arrays follow the &lt;a href=&quot;../../manual/interfaces/index#man-interface-strided-arrays-1&quot;&gt;strided array interface&lt;/a&gt;. If &lt;code&gt;A&lt;/code&gt; is a &lt;code&gt;StridedArray&lt;/code&gt;, then its elements are stored in memory with offsets, which may vary between dimensions but are constant within a dimension. For example, &lt;code&gt;A&lt;/code&gt; could have stride 2 in dimension 1, and stride 3 in dimension 2. Incrementing &lt;code&gt;A&lt;/code&gt; along dimension &lt;code&gt;d&lt;/code&gt; jumps in memory by [&lt;code&gt;strides(A, d)&lt;/code&gt;] slots. Strided arrays are particularly important and useful because they can sometimes be passed directly as pointers to foreign language libraries like BLAS.</source>
          <target state="translated">&lt;code&gt;N&lt;/code&gt; 次元の&lt;em&gt;ストライド&lt;/em&gt;型の要素を持つアレイ &lt;code&gt;T&lt;/code&gt; 。これらの配列は、&lt;a href=&quot;../../manual/interfaces/index#man-interface-strided-arrays-1&quot;&gt;ストライド配列インターフェースに&lt;/a&gt;従います。場合 &lt;code&gt;A&lt;/code&gt; がある &lt;code&gt;StridedArray&lt;/code&gt; 、その要素は、大きさの間で変化しなく寸法内で一定であることができるオフセットとメモリに格納されています。たとえば、 &lt;code&gt;A&lt;/code&gt; は次元1にストライド2、次元2にストライド3を持つことができます。次元 &lt;code&gt;d&lt;/code&gt; に沿って &lt;code&gt;A&lt;/code&gt; をインクリメントすると、[ &lt;code&gt;strides(A, d)&lt;/code&gt; ]スロットだけメモリ内でジャンプします。ストライド配列は、BLASなどの外国語ライブラリへのポインタとして直接渡される場合があるため、特に重要で便利です。</target>
        </trans-unit>
        <trans-unit id="aa4010002940515c72a60f1328742b5780fa5172" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;NTuple&lt;/code&gt; of &lt;code&gt;N&lt;/code&gt;&lt;code&gt;Int&lt;/code&gt;s used to represent the dimensions of an &lt;a href=&quot;#Core.AbstractArray&quot;&gt;&lt;code&gt;AbstractArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">AN &lt;code&gt;NTuple&lt;/code&gt; の &lt;code&gt;N&lt;/code&gt; &lt;code&gt;Int&lt;/code&gt; Sはの寸法表すために使用&lt;a href=&quot;#Core.AbstractArray&quot;&gt; &lt;code&gt;AbstractArray&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="86ab7a7129a70bb02730939dd401c0c0cf3528b7" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;environment&lt;/em&gt; determines what &lt;code&gt;import X&lt;/code&gt; and &lt;code&gt;using X&lt;/code&gt; mean in various code contexts and what files these statements cause to be loaded. Julia understands two kinds of environments:</source>
          <target state="translated">&lt;em&gt;環境が&lt;/em&gt;決まり &lt;code&gt;import X&lt;/code&gt; と &lt;code&gt;using X&lt;/code&gt; ロードされるように、平均でさまざまなコードコンテキストをし、どのようなファイルこれらの文が引き起こします。ジュリアは2種類の環境を理解しています。</target>
        </trans-unit>
        <trans-unit id="d4692c48e17766970146c81604672bba8f6ba8a0" translate="yes" xml:space="preserve">
          <source>An HTML renderer would display this as: &lt;code&gt;Polar{Float64}&lt;/code&gt; complex number: 3.0</source>
          <target state="translated">HTMLレンダラーはこれを次のように表示します： &lt;code&gt;Polar{Float64}&lt;/code&gt; 複素数：3.0</target>
        </trans-unit>
        <trans-unit id="f5d640fb430f989eb8d86d4a923189e2c2ab6f36" translate="yes" xml:space="preserve">
          <source>An action signature (e.g. for committers, taggers, etc). Matches the &lt;a href=&quot;https://libgit2.org/libgit2/#HEAD/type/git_signature&quot;&gt;&lt;code&gt;git_signature&lt;/code&gt;&lt;/a&gt; struct.</source>
          <target state="translated">アクションの署名（コミッター、タガーなど）。&lt;a href=&quot;https://libgit2.org/libgit2/#HEAD/type/git_signature&quot;&gt; &lt;code&gt;git_signature&lt;/code&gt; &lt;/a&gt;構造体と一致します。</target>
        </trans-unit>
        <trans-unit id="831ca4165fd1236bfdc4d70ab9d199abd7cc83b7" translate="yes" xml:space="preserve">
          <source>An advanced example</source>
          <target state="translated">先進的な例</target>
        </trans-unit>
        <trans-unit id="d38eace5e9dd251808391417899bd07eb120ad72" translate="yes" xml:space="preserve">
          <source>An alias for &lt;code&gt;Vector{StackFrame}&lt;/code&gt; provided for convenience; returned by calls to &lt;code&gt;stacktrace&lt;/code&gt;.</source>
          <target state="translated">便宜上提供された &lt;code&gt;Vector{StackFrame}&lt;/code&gt; のエイリアス。 &lt;code&gt;stacktrace&lt;/code&gt; の呼び出しによって返されます。</target>
        </trans-unit>
        <trans-unit id="90783e8e994e5b4a2ae87f94a62cbca8637e0361" translate="yes" xml:space="preserve">
          <source>An alternative is to create a &quot;view&quot; of the array, which is an array object (a &lt;code&gt;SubArray&lt;/code&gt;) that actually references the data of the original array in-place, without making a copy. (If you write to a view, it modifies the original array's data as well.) This can be done for individual slices by calling &lt;a href=&quot;../../base/arrays/index#Base.view&quot;&gt;&lt;code&gt;view&lt;/code&gt;&lt;/a&gt;, or more simply for a whole expression or block of code by putting &lt;a href=&quot;../../base/arrays/index#Base.@views&quot;&gt;&lt;code&gt;@views&lt;/code&gt;&lt;/a&gt; in front of that expression. For example:</source>
          <target state="translated">別の方法は、コピーを作成せずに元の配列のデータをインプレースで実際に参照する配列オブジェクト（ &lt;code&gt;SubArray&lt;/code&gt; ）である配列の「ビュー」を作成することです。（ビューに書き込むと、元の配列のデータも変更されます。）これは、&lt;a href=&quot;../../base/arrays/index#Base.view&quot;&gt; &lt;code&gt;view&lt;/code&gt; &lt;/a&gt;を呼び出すことによって個々のスライスに対して行うことができます。より簡単には、式全体の前に&lt;a href=&quot;../../base/arrays/index#Base.@views&quot;&gt; &lt;code&gt;@views&lt;/code&gt; &lt;/a&gt;を置くことにより、式全体またはコードのブロックに対して行うことができます。例えば：</target>
        </trans-unit>
        <trans-unit id="885d0eebcc9f4c68f23331045091c9a5f90ade43" translate="yes" xml:space="preserve">
          <source>An alternative to using hybrid integers or promoting to BigInts is to use saturating integer arithmetic, where adding to the largest integer value leaves it unchanged and likewise for subtracting from the smallest integer value. This is precisely what Matlab&amp;trade; does:</source>
          <target state="translated">ハイブリッド整数を使用するか、BigIntsに昇格する代わりに、飽和整数演算を使用することができます。最大整数値に加算すると不変のままになり、同様に最小整数値から減算されます。これは、まさにMatlab&amp;trade;が行うことです。</target>
        </trans-unit>
        <trans-unit id="91592a446374cc055177971cd79c3aca7e004b7f" translate="yes" xml:space="preserve">
          <source>An alternative way to invoke a macro over an array literal (or comprehension) is to juxtapose both without using parentheses. In this case, the array will be the only expression fed to the macro. The following syntax is equivalent (and different from &lt;code&gt;@name [a b] * v&lt;/code&gt;):</source>
          <target state="translated">配列リテラル（または内包表記）に対してマクロを呼び出す別の方法は、括弧を使用せずに両方を並置することです。この場合、配列はマクロに渡される唯一の式になります。次の構文は同等です（ &lt;code&gt;@name [a b] * v&lt;/code&gt; とは異なります）。</target>
        </trans-unit>
        <trans-unit id="f03a7e8903dd9860d01fd9cd12eaf55e1fc8996a" translate="yes" xml:space="preserve">
          <source>An analogous &quot;type-stability&quot; problem exists for variables used repeatedly within a function:</source>
          <target state="translated">関数内で繰り返し使用される変数には、類似の「型安定性」の問題が存在します。</target>
        </trans-unit>
        <trans-unit id="743741f9ed42719bff5265ccfe550c12e7459fce" translate="yes" xml:space="preserve">
          <source>An annotated git commit carries with it information about how it was looked up and why, so that rebase or merge operations have more information about the context of the commit. Conflict files contain information about the source/target branches in the merge which are conflicting, for instance. An annotated commit can refer to the tip of a remote branch, for instance when a &lt;a href=&quot;#LibGit2.FetchHead&quot;&gt;&lt;code&gt;FetchHead&lt;/code&gt;&lt;/a&gt; is passed, or to a branch head described using &lt;code&gt;GitReference&lt;/code&gt;.</source>
          <target state="translated">注釈付きのgitコミットには、ルックアップの方法と理由に関する情報が含まれているため、リベースまたはマージ操作には、コミットのコンテキストに関する詳細情報が含まれます。競合ファイルには、たとえば競合しているマージのソース/ターゲットブランチに関する情報が含まれています。注釈付きコミットは、&lt;a href=&quot;#LibGit2.FetchHead&quot;&gt; &lt;code&gt;FetchHead&lt;/code&gt; &lt;/a&gt;が渡されたときなどのリモートブランチの先端、または &lt;code&gt;GitReference&lt;/code&gt; を使用して記述されたブランチヘッドを参照できます。</target>
        </trans-unit>
        <trans-unit id="0977e50dcc26db8fee5c84903315951fecb439bb" translate="yes" xml:space="preserve">
          <source>An anonymous function accepting multiple arguments can be written using the syntax &lt;code&gt;(x,y,z)-&amp;gt;2x+y-z&lt;/code&gt;. A zero-argument anonymous function is written as &lt;code&gt;()-&amp;gt;3&lt;/code&gt;. The idea of a function with no arguments may seem strange, but is useful for &quot;delaying&quot; a computation. In this usage, a block of code is wrapped in a zero-argument function, which is later invoked by calling it as &lt;code&gt;f&lt;/code&gt;.</source>
          <target state="translated">複数の引数を受け入れる無名関数は、構文 &lt;code&gt;(x,y,z)-&amp;gt;2x+y-z&lt;/code&gt; を使用して記述できます。引数なしの無名関数は &lt;code&gt;()-&amp;gt;3&lt;/code&gt; と記述されます。引数のない関数の考え方は奇妙に思えるかもしれませんが、計算を「遅らせる」のに役立ちます。この使用方法では、コードのブロックは引数なしの関数にラップされ、後で &lt;code&gt;f&lt;/code&gt; として呼び出すことによって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="670132e18df0dbda4c7927cbfa1f5f772c1b879a" translate="yes" xml:space="preserve">
          <source>An array allowing for &lt;code&gt;missing&lt;/code&gt; values but which does not contain any such value can be converted back to an array which does not allow for missing values using &lt;a href=&quot;../../base/base/index#Base.convert&quot;&gt;&lt;code&gt;convert&lt;/code&gt;&lt;/a&gt;. If the array contains &lt;code&gt;missing&lt;/code&gt; values, a &lt;code&gt;MethodError&lt;/code&gt; is thrown during conversion</source>
          <target state="translated">&lt;code&gt;missing&lt;/code&gt; 値を許容するが、そのような値を含まない配列は、&lt;a href=&quot;../../base/base/index#Base.convert&quot;&gt; &lt;code&gt;convert&lt;/code&gt; &lt;/a&gt;を使用して欠損値を許容しない配列に変換し直すことができます。配列に &lt;code&gt;missing&lt;/code&gt; 値が含まれている場合、変換中に &lt;code&gt;MethodError&lt;/code&gt; がスローされます</target>
        </trans-unit>
        <trans-unit id="1aa345a94617c2935e2b045aa7c4690942cd7adb" translate="yes" xml:space="preserve">
          <source>An array is &quot;strided&quot; if it is stored in memory with well-defined spacings (strides) between its elements. A strided array with a supported element type may be passed to an external (non-Julia) library like BLAS or LAPACK by simply passing its &lt;a href=&quot;../../base/c/index#Base.pointer&quot;&gt;&lt;code&gt;pointer&lt;/code&gt;&lt;/a&gt; and the stride for each dimension. The &lt;a href=&quot;../../base/arrays/index#Base.stride&quot;&gt;&lt;code&gt;stride(A, d)&lt;/code&gt;&lt;/a&gt; is the distance between elements along dimension &lt;code&gt;d&lt;/code&gt;. For example, the builtin &lt;code&gt;Array&lt;/code&gt; returned by &lt;code&gt;rand(5,7,2)&lt;/code&gt; has its elements arranged contiguously in column major order. This means that the stride of the first dimension &amp;mdash; the spacing between elements in the same column &amp;mdash; is &lt;code&gt;1&lt;/code&gt;:</source>
          <target state="translated">配列は、要素間に明確に定義された間隔（ストライド）でメモリに格納されている場合、「ストライド」されます。サポートされている要素タイプのストライド配列は、&lt;a href=&quot;../../base/c/index#Base.pointer&quot;&gt; &lt;code&gt;pointer&lt;/code&gt; &lt;/a&gt;と各次元のストライドを渡すだけで、BLASやLAPACKなどの外部（非ジュリア）ライブラリに渡すことができます。&lt;a href=&quot;../../base/arrays/index#Base.stride&quot;&gt; &lt;code&gt;stride(A, d)&lt;/code&gt; &lt;/a&gt;次元に沿った要素の間の距離である &lt;code&gt;d&lt;/code&gt; 。たとえば、 &lt;code&gt;rand(5,7,2)&lt;/code&gt; によって返される組み込み &lt;code&gt;Array&lt;/code&gt; には、要素が列の主要な順序で連続して配置されています。この第一次元のストライドことを意味する-同じ列の要素間の間隔が-である &lt;code&gt;1&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="41ac00a0bf9a5b610ef1696b9ce7b1bd86b26f82" translate="yes" xml:space="preserve">
          <source>An array is a collection of objects stored in a multi-dimensional grid. In the most general case, an array may contain objects of type &lt;a href=&quot;../../base/base/index#Core.Any&quot;&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/a&gt;. For most computational purposes, arrays should contain objects of a more specific type, such as &lt;a href=&quot;../../base/numbers/index#Core.Float64&quot;&gt;&lt;code&gt;Float64&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../base/numbers/index#Core.Int32&quot;&gt;&lt;code&gt;Int32&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列は、多次元グリッドに格納されているオブジェクトのコレクションです。最も一般的なケースでは、配列には&lt;a href=&quot;../../base/base/index#Core.Any&quot;&gt; &lt;code&gt;Any&lt;/code&gt; &lt;/a&gt;型のオブジェクトを含めることができます。ほとんどの計算目的では、配列には&lt;a href=&quot;../../base/numbers/index#Core.Float64&quot;&gt; &lt;code&gt;Float64&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../../base/numbers/index#Core.Int32&quot;&gt; &lt;code&gt;Int32&lt;/code&gt; &lt;/a&gt;などのより具体的なタイプのオブジェクトを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="4ca0d5271db66618f81cc70b668cef389e0b4f2d" translate="yes" xml:space="preserve">
          <source>An array of paths for &lt;code&gt;using&lt;/code&gt; and &lt;code&gt;import&lt;/code&gt; statements to consider as project environments or package directories when loading code. It is populated based on the &lt;a href=&quot;../../manual/environment-variables/index#JULIA_LOAD_PATH&quot;&gt;&lt;code&gt;JULIA_LOAD_PATH&lt;/code&gt;&lt;/a&gt; environment variable if set; otherwise it defaults to &lt;code&gt;[&quot;@&quot;, &quot;@v#.#&quot;, &quot;@stdlib&quot;]&lt;/code&gt;. Entries starting with &lt;code&gt;@&lt;/code&gt; have special meanings:</source>
          <target state="translated">コードをロードするときにプロジェクト環境またはパッケージディレクトリと見なすステートメントを &lt;code&gt;using&lt;/code&gt; および &lt;code&gt;import&lt;/code&gt; ためのパスの配列。設定されている場合は、&lt;a href=&quot;../../manual/environment-variables/index#JULIA_LOAD_PATH&quot;&gt; &lt;code&gt;JULIA_LOAD_PATH&lt;/code&gt; &lt;/a&gt;環境変数に基づいて入力されます。それ以外の場合は、デフォルトで &lt;code&gt;[&quot;@&quot;, &quot;@v#.#&quot;, &quot;@stdlib&quot;]&lt;/code&gt; ます。 &lt;code&gt;@&lt;/code&gt; で始まるエントリには、特別な意味があります。</target>
        </trans-unit>
        <trans-unit id="4fe522b01ac3a23b4adab253f39d747e24150892" translate="yes" xml:space="preserve">
          <source>An array of paths for &lt;code&gt;using&lt;/code&gt; and &lt;code&gt;import&lt;/code&gt; statements to consider as project environments or package directories when loading code. It is populated based on the &lt;a href=&quot;../../manual/environment-variables/index#JULIA_LOAD_PATH-1&quot;&gt;&lt;code&gt;JULIA_LOAD_PATH&lt;/code&gt;&lt;/a&gt; environment variable if set; otherwise it defaults to &lt;code&gt;[&quot;@&quot;, &quot;@v#.#&quot;, &quot;@stdlib&quot;]&lt;/code&gt;. Entries starting with &lt;code&gt;@&lt;/code&gt; have special meanings:</source>
          <target state="translated">コードの読み込み時にプロジェクト環境またはパッケージディレクトリと見なすステートメントを &lt;code&gt;using&lt;/code&gt; および &lt;code&gt;import&lt;/code&gt; ためのパスの配列。設定されている場合、&lt;a href=&quot;../../manual/environment-variables/index#JULIA_LOAD_PATH-1&quot;&gt; &lt;code&gt;JULIA_LOAD_PATH&lt;/code&gt; &lt;/a&gt;環境変数に基づいて入力されます。それ以外の場合、デフォルトは &lt;code&gt;[&quot;@&quot;, &quot;@v#.#&quot;, &quot;@stdlib&quot;]&lt;/code&gt; です。 &lt;code&gt;@&lt;/code&gt; で始まるエントリには特別な意味があります。</target>
        </trans-unit>
        <trans-unit id="cfcaca5094f1a9b10cd4725d7c73753c4f7c3e54" translate="yes" xml:space="preserve">
          <source>An array of scalar indices. This includes:</source>
          <target state="translated">スカラーインデックスの配列。これには以下のものが含まれます。</target>
        </trans-unit>
        <trans-unit id="81e3e729218c7a16f9993c281c977ad17183e8f6" translate="yes" xml:space="preserve">
          <source>An array of the command line arguments passed to Julia, as strings.</source>
          <target state="translated">Julia に文字列として渡されるコマンドライン引数の配列。</target>
        </trans-unit>
        <trans-unit id="a0af30d315d1e58152feb3e6efd0b431012c6b41" translate="yes" xml:space="preserve">
          <source>An array with a specific element type can be constructed using the syntax &lt;code&gt;T[A, B, C, ...]&lt;/code&gt;. This will construct a 1-d array with element type &lt;code&gt;T&lt;/code&gt;, initialized to contain elements &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, etc. For example, &lt;code&gt;Any[x, y, z]&lt;/code&gt; constructs a heterogeneous array that can contain any values.</source>
          <target state="translated">特定の要素タイプの配列は、構文 &lt;code&gt;T[A, B, C, ...]&lt;/code&gt; を使用して構築できます。これは、要素タイプ &lt;code&gt;T&lt;/code&gt; の 1次元配列を構築し、要素 &lt;code&gt;A&lt;/code&gt; 、 &lt;code&gt;B&lt;/code&gt; 、 &lt;code&gt;C&lt;/code&gt; などを含むように初期化されます。たとえば、 &lt;code&gt;Any[x, y, z]&lt;/code&gt; は、任意の値を含むことができる異種配列を構築します。</target>
        </trans-unit>
        <trans-unit id="d49e95020e020a9b4ba7b0d2bd91635b96ade391" translate="yes" xml:space="preserve">
          <source>An assert might be disabled at various optimization levels. Assert should therefore only be used as a debugging tool and not used for authentication verification (e.g., verifying passwords), nor should side effects needed for the function to work correctly be used inside of asserts.</source>
          <target state="translated">アサートは様々な最適化レベルで無効化される可能性があります。したがって、アサートはデバッグツールとしてのみ使用し、認証検証(パスワードの検証など)には使用しないようにしてください。</target>
        </trans-unit>
        <trans-unit id="71e89ce9e3702ca0f3496a7358d3f83d3e141bca" translate="yes" xml:space="preserve">
          <source>An assignment introducing a variable used inside a function, type or macro definition need not come before its inner usage:</source>
          <target state="translated">関数、型、マクロ定義の内部で使用される変数を導入する代入は、その内部で使用される前に来る必要はありません。</target>
        </trans-unit>
        <trans-unit id="d60802623cdaa53cdbcd142bd02b31e05d1a86f4" translate="yes" xml:space="preserve">
          <source>An easy way to find out is to extract the body into another (regular) function:</source>
          <target state="translated">簡単に分かる方法は、別の(規則的な)機能に抽出することです。</target>
        </trans-unit>
        <trans-unit id="1b60a8e096bfa335613b61303e86087f18cd47ed" translate="yes" xml:space="preserve">
          <source>An entirely independent approach to profile visualization is &lt;a href=&quot;https://github.com/vchuravy/PProf.jl&quot;&gt;PProf.jl&lt;/a&gt;, which uses the external &lt;code&gt;pprof&lt;/code&gt; tool.</source>
          <target state="translated">プロファイル可視化に完全に独立したアプローチである&lt;a href=&quot;https://github.com/vchuravy/PProf.jl&quot;&gt;PProf.jl&lt;/a&gt;外部の使用、 &lt;code&gt;pprof&lt;/code&gt; のツール。</target>
        </trans-unit>
        <trans-unit id="75ba7cfd59f985e2f5eac9d9bfbe0747c5db6475" translate="yes" xml:space="preserve">
          <source>An environment's graph is a multilevel map which assigns, for each &lt;code&gt;context&lt;/code&gt; UUID, a map from names to UUIDs, similar to the roots map but specific to that &lt;code&gt;context&lt;/code&gt;. When Julia sees &lt;code&gt;import X&lt;/code&gt; in the code of the package whose UUID is &lt;code&gt;context&lt;/code&gt;, it looks up the identity of &lt;code&gt;X&lt;/code&gt; as &lt;code&gt;graph[context][:X]&lt;/code&gt;. In particular, this means that &lt;code&gt;import X&lt;/code&gt; can refer to different packages depending on &lt;code&gt;context&lt;/code&gt;.</source>
          <target state="translated">環境のグラフは、マルチレベルごとに割り当て、マップで &lt;code&gt;context&lt;/code&gt; UUID、根に似たUUIDに名前からマップは、マップそれに固有 &lt;code&gt;context&lt;/code&gt; 。 Juliaは、UUIDが &lt;code&gt;context&lt;/code&gt; であるパッケージのコードで &lt;code&gt;import X&lt;/code&gt; を検出すると、 &lt;code&gt;X&lt;/code&gt; のIDを &lt;code&gt;graph[context][:X]&lt;/code&gt; として検索します。特に、これは、 &lt;code&gt;import X&lt;/code&gt; が &lt;code&gt;context&lt;/code&gt; 応じて異なるパッケージを参照できることを意味します。</target>
        </trans-unit>
        <trans-unit id="4e064b0051e803a86c003daf19461cf607e832da" translate="yes" xml:space="preserve">
          <source>An environment's roots map assigns package names to UUIDs for all the top-level dependencies that the environment makes available to the main project (i.e. the ones that can be loaded in &lt;code&gt;Main&lt;/code&gt;). When Julia encounters &lt;code&gt;import X&lt;/code&gt; in the main project, it looks up the identity of &lt;code&gt;X&lt;/code&gt; as &lt;code&gt;roots[:X]&lt;/code&gt;.</source>
          <target state="translated">環境のルートマップは、環境がメインプロジェクトで使用できるようにするすべてのトップレベルの依存関係（つまり、 &lt;code&gt;Main&lt;/code&gt; にロードできる依存関係）のUUIDにパッケージ名を割り当てます。Juliaがメインプロジェクトで &lt;code&gt;import X&lt;/code&gt; に遭遇すると、 &lt;code&gt;X&lt;/code&gt; のIDを &lt;code&gt;roots[:X]&lt;/code&gt; として検索します。</target>
        </trans-unit>
        <trans-unit id="5a6b075a0dfee676c2586ba796e8721ea7d846f5" translate="yes" xml:space="preserve">
          <source>An error occurred when running a module's &lt;code&gt;__init__&lt;/code&gt; function. The actual error thrown is available in the &lt;code&gt;.error&lt;/code&gt; field.</source>
          <target state="translated">モジュールの &lt;code&gt;__init__&lt;/code&gt; 関数の実行中にエラーが発生しました。スローされた実際のエラーは &lt;code&gt;.error&lt;/code&gt; フィールドで確認できます。</target>
        </trans-unit>
        <trans-unit id="f872e576e1623149d829361d58e2cd908722e2d7" translate="yes" xml:space="preserve">
          <source>An error occurred when trying to access &lt;code&gt;str&lt;/code&gt; at index &lt;code&gt;i&lt;/code&gt; that is not valid.</source>
          <target state="translated">無効なインデックス &lt;code&gt;i&lt;/code&gt; で &lt;code&gt;str&lt;/code&gt; にアクセスしようとしたときにエラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="f33bd5b60514925c67cf1bcd27c0b818d1eaa51d" translate="yes" xml:space="preserve">
          <source>An error occurred while &lt;a href=&quot;#Base.include&quot;&gt;&lt;code&gt;include&lt;/code&gt;&lt;/a&gt;ing, &lt;a href=&quot;#Base.require&quot;&gt;&lt;code&gt;require&lt;/code&gt;&lt;/a&gt;ing, or &lt;a href=&quot;#using&quot;&gt;&lt;code&gt;using&lt;/code&gt;&lt;/a&gt; a file. The error specifics should be available in the &lt;code&gt;.error&lt;/code&gt; field.</source>
          <target state="translated">ファイルの取り込み、&lt;a href=&quot;#Base.require&quot;&gt; &lt;code&gt;require&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;#using&quot;&gt; &lt;code&gt;using&lt;/code&gt; &lt;/a&gt;中&lt;a href=&quot;#Base.include&quot;&gt; &lt;code&gt;include&lt;/code&gt; &lt;/a&gt;エラーが発生しました。エラーの詳細は、 &lt;code&gt;.error&lt;/code&gt; フィールドで確認できます。</target>
        </trans-unit>
        <trans-unit id="07364c5431123506298c1f1b97819a8211a7dee0" translate="yes" xml:space="preserve">
          <source>An example of correct usage of &lt;code&gt;Val&lt;/code&gt; would be:</source>
          <target state="translated">&lt;code&gt;Val&lt;/code&gt; の正しい使用例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="25c5e7a2c4027183bf26e4e9c2615052f9de37e7" translate="yes" xml:space="preserve">
          <source>An example of overflow behavior and how to potentially resolve it is as follows:</source>
          <target state="translated">オーバーフローの動作の例と、それを解決する可能性のある方法を以下に示します。</target>
        </trans-unit>
        <trans-unit id="c493074be2f87d14f247d6f580604d1e79d5ee3a" translate="yes" xml:space="preserve">
          <source>An exception is raised if a global constant is requested to be cleared.</source>
          <target state="translated">グローバル定数のクリアが要求された場合、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="74b831638ce2bece413802b1ce5999bdb817b935" translate="yes" xml:space="preserve">
          <source>An explicit &lt;code&gt;global&lt;/code&gt; is needed to assign to a global variable:</source>
          <target state="translated">グローバル変数に割り当てるには、明示的 &lt;code&gt;global&lt;/code&gt; が必要です。</target>
        </trans-unit>
        <trans-unit id="fa929fb7568ac9e14759cbe89ba07ba8ca4d3c90" translate="yes" xml:space="preserve">
          <source>An expression wrapped in this manner is left alone by the macro expander and simply pasted into the output verbatim. Therefore it will be resolved in the macro call environment.</source>
          <target state="translated">このようにラップされた式は、マクロエキスパンダによって放置され、単にそのまま出力に貼り付けられます。したがって、マクロ呼び出し環境で解決されます。</target>
        </trans-unit>
        <trans-unit id="4f8ce9f561ef25fa8ebcdf84d21250bf4af4d01b" translate="yes" xml:space="preserve">
          <source>An immutable object might contain mutable objects, such as arrays, as fields. Those contained objects will remain mutable; only the fields of the immutable object itself cannot be changed to point to different objects.</source>
          <target state="translated">不変オブジェクトには、フィールドとして配列のような変異可能なオブジェクトが含まれている場合があります。不変オブジェクトのフィールドだけが異なるオブジェクトを指すように変更することはできません。</target>
        </trans-unit>
        <trans-unit id="a6b2f30177c22471afdf680fdefbc947052099b3" translate="yes" xml:space="preserve">
          <source>An implementation of an &lt;code&gt;AbstractWorkerPool&lt;/code&gt;. &lt;a href=&quot;#Distributed.remote&quot;&gt;&lt;code&gt;remote&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Distributed.remotecall_fetch-Tuple%7BAny,Integer,Vararg%7BAny,N%7D%20where%20N%7D&quot;&gt;&lt;code&gt;remotecall_fetch&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#Distributed.pmap&quot;&gt;&lt;code&gt;pmap&lt;/code&gt;&lt;/a&gt; (and other remote calls which execute functions remotely) benefit from caching the serialized/deserialized functions on the worker nodes, especially closures (which may capture large amounts of data).</source>
          <target state="translated">&lt;code&gt;AbstractWorkerPool&lt;/code&gt; の実装。&lt;a href=&quot;#Distributed.remote&quot;&gt; &lt;code&gt;remote&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#Distributed.remotecall_fetch-Tuple%7BAny,Integer,Vararg%7BAny,N%7D%20where%20N%7D&quot;&gt; &lt;code&gt;remotecall_fetch&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#Distributed.pmap&quot;&gt; &lt;code&gt;pmap&lt;/code&gt; &lt;/a&gt;（およびリモートで関数を実行する他のリモート呼び出し）は、ワーカーノード、特にクロージャー（大量のデータをキャプチャする可能性がある）のシリアル化/非シリアル化関数をキャッシュすることでメリットを得ます。</target>
        </trans-unit>
        <trans-unit id="22b306a470a7687a028d866f374bb4a4513c3bca" translate="yes" xml:space="preserve">
          <source>An implementation of distributed memory parallel computing is provided by module &lt;code&gt;Distributed&lt;/code&gt; as part of the standard library shipped with Julia.</source>
          <target state="translated">分散メモリ並列計算の実装は、Juliaに付属の標準ライブラリの一部として、 &lt;code&gt;Distributed&lt;/code&gt; モジュールによって提供されます。</target>
        </trans-unit>
        <trans-unit id="d783ac603cd4b08c0d7cd2a76549bc1da1d2e64a" translate="yes" xml:space="preserve">
          <source>An important and powerful feature of Julia's type system is that it is parametric: types can take parameters, so that type declarations actually introduce a whole family of new types &amp;ndash; one for each possible combination of parameter values. There are many languages that support some version of &lt;a href=&quot;https://en.wikipedia.org/wiki/Generic_programming&quot;&gt;generic programming&lt;/a&gt;, wherein data structures and algorithms to manipulate them may be specified without specifying the exact types involved. For example, some form of generic programming exists in ML, Haskell, Ada, Eiffel, C++, Java, C#, F#, and Scala, just to name a few. Some of these languages support true parametric polymorphism (e.g. ML, Haskell, Scala), while others support ad-hoc, template-based styles of generic programming (e.g. C++, Java). With so many different varieties of generic programming and parametric types in various languages, we won't even attempt to compare Julia's parametric types to other languages, but will instead focus on explaining Julia's system in its own right. We will note, however, that because Julia is a dynamically typed language and doesn't need to make all type decisions at compile time, many traditional difficulties encountered in static parametric type systems can be relatively easily handled.</source>
          <target state="translated">Juliaの型システムの重要かつ強力な機能は、それがパラメトリックであることです。型はパラメーターを取ることができるので、型宣言は実際に新しい型のファミリー全体（パラメーター値の可能な組み合わせごとに1つ）を導入します。&lt;a href=&quot;https://en.wikipedia.org/wiki/Generic_programming&quot;&gt;一般的なプログラミングの&lt;/a&gt;いくつかのバージョンをサポートする多くの言語があります、データ構造とそれらを操作するアルゴリズムは、含まれる正確なタイプを指定せずに指定できます。たとえば、ML、Haskell、Ada、Eiffel、C ++、Java、C＃、F＃、Scalaには、いくつかの一般的なプログラミング形式が存在します。これらの言語の一部は真のパラメトリック多態性（例：ML、Haskell、Scala）をサポートしていますが、他の言語はテンプレートベースのジェネリックプログラミングスタイル（例：C ++、Java）をサポートしています。非常に多くの種類の汎用プログラミングとパラメトリックタイプがさまざまな言語で用意されているため、Juliaのパラメトリックタイプを他の言語と比較することはせず、Juliaのシステムの説明に重点を置きます。ただし、ジュリアは動的に型付けされた言語であり、コンパイル時にすべての型の決定を行う必要がないため、静的パラメトリックタイプのシステムで発生する多くの従来の問題は、比較的簡単に処理できます。</target>
        </trans-unit>
        <trans-unit id="cbe22d7af0ef7feda8cfd84ded555dd181a687db" translate="yes" xml:space="preserve">
          <source>An important point to note is that there is no loss in performance if the programmer relies on a function whose arguments are abstract types, because it is recompiled for each tuple of argument concrete types with which it is invoked. (There may be a performance issue, however, in the case of function arguments that are containers of abstract types; see &lt;a href=&quot;../performance-tips/index#man-performance-abstract-container&quot;&gt;Performance Tips&lt;/a&gt;.)</source>
          <target state="translated">注意すべき重要な点は、プログラマーが引数が抽象型である関数に依存している場合、それが呼び出される引数の具象型のタプルごとに再コンパイルされるため、パフォーマンスが低下しないことです。（ただし、抽象型のコンテナーである関数の引数の場合は、パフォーマンスの問題が発生する可能性があります。&lt;a href=&quot;../performance-tips/index#man-performance-abstract-container&quot;&gt;パフォーマンスのヒントを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="a620af1ece25f934c185b8ddc35721eeb3f3fac2" translate="yes" xml:space="preserve">
          <source>An important point to note is that there is no loss in performance if the programmer relies on a function whose arguments are abstract types, because it is recompiled for each tuple of argument concrete types with which it is invoked. (There may be a performance issue, however, in the case of function arguments that are containers of abstract types; see &lt;a href=&quot;../performance-tips/index#man-performance-tips-1&quot;&gt;Performance Tips&lt;/a&gt;.)</source>
          <target state="translated">注意すべき重要な点は、プログラマーが、引数が抽象型である関数に依存している場合、それが呼び出される引数具象型のタプルごとに再コンパイルされるため、パフォーマンスが低下しないことです。（ただし、抽象型のコンテナである関数引数の場合、パフォーマンスの問題が発生する可能性があります。&lt;a href=&quot;../performance-tips/index#man-performance-tips-1&quot;&gt;パフォーマンスのヒントを&lt;/a&gt;参照してください。）</target>
        </trans-unit>
        <trans-unit id="a9c84445e53230deb0eebf338b52d84f7d83ccf2" translate="yes" xml:space="preserve">
          <source>An important property of this design is that any code that executes in a file without a warning will behave the same way in a fresh REPL. And on the flip side, if you take a REPL session and save it to file, if it behaves differently than it did in the REPL, then you will get a warning.</source>
          <target state="translated">この設計の重要な特性は、警告なしでファイル内で実行されるコードは、新鮮な REPL で同じように動作するということです。また、逆に、REPL セッションをファイルに保存した場合、REPL での動作とは異なる動作をすると警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="8a07f992d12e5a1cbc667f425042e464cb426b62" translate="yes" xml:space="preserve">
          <source>An important thing to remember is that, once fetched, a &lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; will cache its value locally. Further &lt;code&gt;fetch&lt;/code&gt; calls do not entail a network hop. Once all referencing &lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;s have fetched, the remote stored value is deleted.</source>
          <target state="translated">覚えておくべき重要なことは、一度フェッチされると、&lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;はその値をローカルにキャッシュするということです。それ以上の &lt;code&gt;fetch&lt;/code&gt; 呼び出しはネットワークホップを伴いません。参照しているすべての&lt;a href=&quot;../../stdlib/distributed/index#Distributed.Future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;がフェッチされると、リモートに保存された値は削除されます。</target>
        </trans-unit>
        <trans-unit id="4b9125cf95c1847e0bf4f4e8c480c3ff78274eac" translate="yes" xml:space="preserve">
          <source>An important use of abstract types is to provide default implementations for concrete types. To give a simple example, consider:</source>
          <target state="translated">抽象型の重要な使い方は、具象型のデフォルト実装を提供することです。簡単な例を挙げると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="46c08a285690627fd53df02bea8440f31cc7ca2d" translate="yes" xml:space="preserve">
          <source>An indexing operation into an &lt;code&gt;AbstractDict&lt;/code&gt; (&lt;code&gt;Dict&lt;/code&gt;) or &lt;code&gt;Set&lt;/code&gt; like object tried to access or delete a non-existent element.</source>
          <target state="translated">&lt;code&gt;AbstractDict&lt;/code&gt; （ &lt;code&gt;Dict&lt;/code&gt; ）または &lt;code&gt;Set&lt;/code&gt; likeオブジェクトへのインデックス操作で、存在しない要素にアクセスまたは削除しようとしました。</target>
        </trans-unit>
        <trans-unit id="c0ef57c4e27de9e0e08cd005dba316af8fe9863a" translate="yes" xml:space="preserve">
          <source>An indexing operation into an array, &lt;code&gt;a&lt;/code&gt;, tried to access an out-of-bounds element at index &lt;code&gt;i&lt;/code&gt;.</source>
          <target state="translated">配列 &lt;code&gt;a&lt;/code&gt; へのインデックス操作で、インデックス &lt;code&gt;i&lt;/code&gt; の範囲外の要素にアクセスしようとしました。</target>
        </trans-unit>
        <trans-unit id="ba7dc87158f89283a983f53bb3f993c869462761" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;Point{Float64}&lt;/code&gt; can be represented compactly and efficiently as an immediate pair of 64-bit values;</source>
          <target state="translated">&lt;code&gt;Point{Float64}&lt;/code&gt; のインスタンスは、64ビット値の直接のペアとしてコンパクトかつ効率的に表すことができます。</target>
        </trans-unit>
        <trans-unit id="81188cb690cdf51aa857fee109d4a9ecc33db0cb" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;Point{Real}&lt;/code&gt; must be able to hold any pair of instances of &lt;a href=&quot;../../base/numbers/index#Core.Real&quot;&gt;&lt;code&gt;Real&lt;/code&gt;&lt;/a&gt;. Since objects that are instances of &lt;code&gt;Real&lt;/code&gt; can be of arbitrary size and structure, in practice an instance of &lt;code&gt;Point{Real}&lt;/code&gt; must be represented as a pair of pointers to individually allocated &lt;code&gt;Real&lt;/code&gt; objects.</source>
          <target state="translated">インスタンス &lt;code&gt;Point{Real}&lt;/code&gt; のインスタンスの任意のペアを保持することができなければならない&lt;a href=&quot;../../base/numbers/index#Core.Real&quot;&gt; &lt;code&gt;Real&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;Real&lt;/code&gt; のインスタンスであるオブジェクトは任意のサイズと構造にすることができるため、実際には、 &lt;code&gt;Point{Real}&lt;/code&gt; インスタンスは、個別に割り当てられた &lt;code&gt;Real&lt;/code&gt; オブジェクトへのポインターのペアとして表す必要があります。</target>
        </trans-unit>
        <trans-unit id="12aa0088bc6a62b5d720f6445639bc7feea0dfd4" translate="yes" xml:space="preserve">
          <source>An issue that arises in more complex macros is that of &lt;a href=&quot;https://en.wikipedia.org/wiki/Hygienic_macro&quot;&gt;hygiene&lt;/a&gt;. In short, macros must ensure that the variables they introduce in their returned expressions do not accidentally clash with existing variables in the surrounding code they expand into. Conversely, the expressions that are passed into a macro as arguments are often &lt;em&gt;expected&lt;/em&gt; to evaluate in the context of the surrounding code, interacting with and modifying the existing variables. Another concern arises from the fact that a macro may be called in a different module from where it was defined. In this case we need to ensure that all global variables are resolved to the correct module. Julia already has a major advantage over languages with textual macro expansion (like C) in that it only needs to consider the returned expression. All the other variables (such as &lt;code&gt;msg&lt;/code&gt; in &lt;code&gt;@assert&lt;/code&gt; above) follow the &lt;a href=&quot;../variables-and-scoping/index#scope-of-variables&quot;&gt;normal scoping block behavior&lt;/a&gt;.</source>
          <target state="translated">より複雑なマクロで発生する問題は、&lt;a href=&quot;https://en.wikipedia.org/wiki/Hygienic_macro&quot;&gt;衛生の問題&lt;/a&gt;です。つまり、マクロは、返される式で導入する変数が、展開先のコード内の既存の変数と誤って衝突しないようにする必要があります。逆に、引数としてマクロに渡される式は、多くの場合&lt;em&gt;期待されます&lt;/em&gt;周囲のコードのコンテキストで評価し、既存の変数と対話して変更します。別の懸念は、マクロが定義された場所とは異なるモジュールで呼び出される可能性があるという事実から生じます。この場合、すべてのグローバル変数が正しいモジュールに解決されることを確認する必要があります。Juliaは、返された式を考慮するだけでよいという点で、テキストマクロ展開（Cなど）を備えた言語に比べてすでに大きな利点があります。（例えば、他の全ての変数 &lt;code&gt;msg&lt;/code&gt; で &lt;code&gt;@assert&lt;/code&gt; 上記）が従う&lt;a href=&quot;../variables-and-scoping/index#scope-of-variables&quot;&gt;通常のスコープブロックの動作を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d49ef831f7376a07158e43b82f759fbd73bc08a0" translate="yes" xml:space="preserve">
          <source>An issue that arises in more complex macros is that of &lt;a href=&quot;https://en.wikipedia.org/wiki/Hygienic_macro&quot;&gt;hygiene&lt;/a&gt;. In short, macros must ensure that the variables they introduce in their returned expressions do not accidentally clash with existing variables in the surrounding code they expand into. Conversely, the expressions that are passed into a macro as arguments are often &lt;em&gt;expected&lt;/em&gt; to evaluate in the context of the surrounding code, interacting with and modifying the existing variables. Another concern arises from the fact that a macro may be called in a different module from where it was defined. In this case we need to ensure that all global variables are resolved to the correct module. Julia already has a major advantage over languages with textual macro expansion (like C) in that it only needs to consider the returned expression. All the other variables (such as &lt;code&gt;msg&lt;/code&gt; in &lt;code&gt;@assert&lt;/code&gt; above) follow the &lt;a href=&quot;../variables-and-scoping/index#scope-of-variables-1&quot;&gt;normal scoping block behavior&lt;/a&gt;.</source>
          <target state="translated">より複雑なマクロで発生する問題は、&lt;a href=&quot;https://en.wikipedia.org/wiki/Hygienic_macro&quot;&gt;衛生の問題&lt;/a&gt;です。つまり、マクロは、返された式に導入された変数が、展開先の周囲のコード内の既存の変数と誤って競合しないようにする必要があります。逆に、引数としてマクロに渡される式は、多くの場合&lt;em&gt;期待されます&lt;/em&gt;周囲のコードのコンテキストで評価し、既存の変数と対話して変更します。別の懸念は、マクロがそれが定義された場所とは異なるモジュールで呼び出される可能性があるという事実から生じます。この場合、すべてのグローバル変数が正しいモジュールに解決されるようにする必要があります。 Juliaは、返された式を考慮するだけでよいという点で、テキストマクロ展開（Cなど）を備えた言語よりも優れています。 （例えば、他の全ての変数 &lt;code&gt;msg&lt;/code&gt; で &lt;code&gt;@assert&lt;/code&gt; 上記）が従う&lt;a href=&quot;../variables-and-scoping/index#scope-of-variables-1&quot;&gt;通常のスコープブロックの動作を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5758b288cd7216deea6832521aad4c2142aa23b0" translate="yes" xml:space="preserve">
          <source>An iterator that accesses each element of the array &lt;code&gt;A&lt;/code&gt;, returning &lt;code&gt;i =&amp;gt; x&lt;/code&gt;, where &lt;code&gt;i&lt;/code&gt; is the index for the element and &lt;code&gt;x = A[i]&lt;/code&gt;. Identical to &lt;code&gt;pairs(A)&lt;/code&gt;, except that the style of index can be selected. Also similar to &lt;code&gt;enumerate(A)&lt;/code&gt;, except &lt;code&gt;i&lt;/code&gt; will be a valid index for &lt;code&gt;A&lt;/code&gt;, while &lt;code&gt;enumerate&lt;/code&gt; always counts from 1 regardless of the indices of &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="translated">配列 &lt;code&gt;A&lt;/code&gt; の各要素にアクセスする反復子 &lt;code&gt;i =&amp;gt; x&lt;/code&gt; 返します。ここで、 &lt;code&gt;i&lt;/code&gt; は要素のインデックスであり、 &lt;code&gt;x = A[i]&lt;/code&gt; です。インデックスのスタイルを選択できることを除いて、 &lt;code&gt;pairs(A)&lt;/code&gt; と同じです。 &lt;code&gt;enumerate(A)&lt;/code&gt; にも似ていますが、 &lt;code&gt;i&lt;/code&gt; が &lt;code&gt;A&lt;/code&gt; の有効なインデックスになる一方で、 &lt;code&gt;enumerate&lt;/code&gt; は &lt;code&gt;A&lt;/code&gt; のインデックスに関係なく常に1からカウントされます。</target>
        </trans-unit>
        <trans-unit id="b7a506ba2a82dcb065490fadb0cc0de3162d7501" translate="yes" xml:space="preserve">
          <source>An iterator that counts forever, starting at &lt;code&gt;start&lt;/code&gt; and incrementing by &lt;code&gt;step&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; し、 &lt;code&gt;step&lt;/code&gt; 増分する、永久にカウントするイテレータ。</target>
        </trans-unit>
        <trans-unit id="48922b72538924c877a99f16d2a1501116dd1387" translate="yes" xml:space="preserve">
          <source>An iterator that cycles through &lt;code&gt;iter&lt;/code&gt; forever. If &lt;code&gt;iter&lt;/code&gt; is empty, so is &lt;code&gt;cycle(iter)&lt;/code&gt;.</source>
          <target state="translated">反復を永久に &lt;code&gt;iter&lt;/code&gt; 反復子。 &lt;code&gt;iter&lt;/code&gt; が空の場合、 &lt;code&gt;cycle(iter)&lt;/code&gt; も空になります。</target>
        </trans-unit>
        <trans-unit id="99ec5bfacc5e607a59f3f0e21acc0539e9b04968" translate="yes" xml:space="preserve">
          <source>An iterator that drops element from &lt;code&gt;iter&lt;/code&gt; as long as predicate &lt;code&gt;pred&lt;/code&gt; is true, afterwards, returns every element.</source>
          <target state="translated">述語 &lt;code&gt;pred&lt;/code&gt; がtrueである限り、要素を &lt;code&gt;iter&lt;/code&gt; から削除するイテレーターは、その後、すべての要素を返します。</target>
        </trans-unit>
        <trans-unit id="2529486fdd6052d642060ef494ef6207d50e0319" translate="yes" xml:space="preserve">
          <source>An iterator that generates all but the first &lt;code&gt;n&lt;/code&gt; elements of &lt;code&gt;iter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;iter&lt;/code&gt; の最初の &lt;code&gt;n&lt;/code&gt; 個の要素を除くすべてを生成するイテレータ。</target>
        </trans-unit>
        <trans-unit id="225cd1fc20e6b5e9157d6660f2d5a16cf5eaa208" translate="yes" xml:space="preserve">
          <source>An iterator that generates at most the first &lt;code&gt;n&lt;/code&gt; elements of &lt;code&gt;iter&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;iter&lt;/code&gt; の最初の &lt;code&gt;n&lt;/code&gt; 個の要素を生成するイテレータ。</target>
        </trans-unit>
        <trans-unit id="d764aa048a3e74537873dd366c614add03dee409" translate="yes" xml:space="preserve">
          <source>An iterator that generates element from &lt;code&gt;iter&lt;/code&gt; as long as predicate &lt;code&gt;pred&lt;/code&gt; is true, afterwards, drops every element.</source>
          <target state="translated">述語 &lt;code&gt;pred&lt;/code&gt; がtrueである限り、 &lt;code&gt;iter&lt;/code&gt; から要素を生成するイテレーターは、その後、すべての要素を削除します。</target>
        </trans-unit>
        <trans-unit id="0e73058facca13f8b20620aa03238c21f3f77bff" translate="yes" xml:space="preserve">
          <source>An iterator that generates the value &lt;code&gt;x&lt;/code&gt; forever. If &lt;code&gt;n&lt;/code&gt; is specified, generates &lt;code&gt;x&lt;/code&gt; that many times (equivalent to &lt;code&gt;take(repeated(x), n)&lt;/code&gt;).</source>
          <target state="translated">値 &lt;code&gt;x&lt;/code&gt; を永久に生成する反復子。 &lt;code&gt;n&lt;/code&gt; が指定されている場合、 &lt;code&gt;x&lt;/code&gt; を何度も生成し &lt;code&gt;take(repeated(x), n)&lt;/code&gt; と同じ）。</target>
        </trans-unit>
        <trans-unit id="36e9bbba550395bdb9417724cabe5c648e9c151a" translate="yes" xml:space="preserve">
          <source>An iterator that yields &lt;code&gt;(i, x)&lt;/code&gt; where &lt;code&gt;i&lt;/code&gt; is a counter starting at 1, and &lt;code&gt;x&lt;/code&gt; is the &lt;code&gt;i&lt;/code&gt;th value from the given iterator. It's useful when you need not only the values &lt;code&gt;x&lt;/code&gt; over which you are iterating, but also the number of iterations so far. Note that &lt;code&gt;i&lt;/code&gt; may not be valid for indexing &lt;code&gt;iter&lt;/code&gt;; it's also possible that &lt;code&gt;x != iter[i]&lt;/code&gt;, if &lt;code&gt;iter&lt;/code&gt; has indices that do not start at 1. See the &lt;code&gt;pairs(IndexLinear(), iter)&lt;/code&gt; method if you want to ensure that &lt;code&gt;i&lt;/code&gt; is an index.</source>
          <target state="translated">収率ことイテレータ &lt;code&gt;(i, x)&lt;/code&gt; &lt;code&gt;i&lt;/code&gt; は 1から始まるカウンタであり、 &lt;code&gt;x&lt;/code&gt; はある &lt;code&gt;i&lt;/code&gt; 所与イテレータから番目の値。これは、反復する値 &lt;code&gt;x&lt;/code&gt; だけでなく、これまでの反復回数も必要な場合に役立ちます。注意 &lt;code&gt;i&lt;/code&gt; インデックスのために有効ではない可能性が &lt;code&gt;iter&lt;/code&gt; 。そのことも可能です &lt;code&gt;x != iter[i]&lt;/code&gt; 場合は、 &lt;code&gt;iter&lt;/code&gt; 1を参照してくださいでは始まらない指標がある &lt;code&gt;pairs(IndexLinear(), iter)&lt;/code&gt; あなたがいることを確実にしたい場合はこの方法を &lt;code&gt;i&lt;/code&gt; インデックスです。</target>
        </trans-unit>
        <trans-unit id="266c36edd3f7797ff58b1ca95649bcf6b5c4372b" translate="yes" xml:space="preserve">
          <source>An iterator that yields the same elements as &lt;code&gt;iter&lt;/code&gt;, but starting at the given &lt;code&gt;state&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;iter&lt;/code&gt; と同じ要素を生成するが、指定された &lt;code&gt;state&lt;/code&gt; から始まるイテレータ。</target>
        </trans-unit>
        <trans-unit id="5702ee8b32ef9343efe014a1fb61b5e64e3eeb50" translate="yes" xml:space="preserve">
          <source>An object of type &lt;a href=&quot;#LinearAlgebra.UniformScaling&quot;&gt;&lt;code&gt;UniformScaling&lt;/code&gt;&lt;/a&gt;, representing an identity matrix of any size.</source>
          <target state="translated">任意のサイズの単位行列を表す&lt;a href=&quot;#LinearAlgebra.UniformScaling&quot;&gt; &lt;code&gt;UniformScaling&lt;/code&gt; &lt;/a&gt;型のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="71c4c33f82250491a99ad21209540c93bfa32676" translate="yes" xml:space="preserve">
          <source>An object that represents an array of scalar indices and can be converted to such by &lt;a href=&quot;../../base/arrays/index#Base.to_indices&quot;&gt;&lt;code&gt;to_indices&lt;/code&gt;&lt;/a&gt;. By default this includes:</source>
          <target state="translated">スカラーインデックスの配列を表すオブジェクトで、&lt;a href=&quot;../../base/arrays/index#Base.to_indices&quot;&gt; &lt;code&gt;to_indices&lt;/code&gt; &lt;/a&gt;によってそれに変換できます。デフォルトでは以下が含まれます：</target>
        </trans-unit>
        <trans-unit id="d4b6750cc125525c2ec2f6b1301138ae1f12a25d" translate="yes" xml:space="preserve">
          <source>An object that safely references data of type &lt;code&gt;T&lt;/code&gt;. This type is guaranteed to point to valid, Julia-allocated memory of the correct type. The underlying data is protected from freeing by the garbage collector as long as the &lt;code&gt;Ref&lt;/code&gt; itself is referenced.</source>
          <target state="translated">タイプ &lt;code&gt;T&lt;/code&gt; のデータを安全に参照するオブジェクト。このタイプは、正しいタイプのジュリアが割り当てた有効なメモリを指すことが保証されています。基になるデータは、 &lt;code&gt;Ref&lt;/code&gt; 自体が参照されている限り、ガベージコレクターによる解放から保護されます。</target>
        </trans-unit>
        <trans-unit id="89e56b05f03b0a54be4311a52e3844ad08220010" translate="yes" xml:space="preserve">
          <source>An object with an immutable type may be copied freely by the compiler since its immutability makes it impossible to programmatically distinguish between the original object and a copy.</source>
          <target state="translated">不変型を持つオブジェクトは、その不変性により、プログラム上で元のオブジェクトとコピーを区別することができないため、コンパイラによって自由にコピーすることができます。</target>
        </trans-unit>
        <trans-unit id="85eb57c0af1152d6c55f74e29c04701d2792e006" translate="yes" xml:space="preserve">
          <source>An operation allocated too much memory for either the system or the garbage collector to handle properly.</source>
          <target state="translated">システムまたはガベージコレクタが適切に処理するためにメモリを割り当てすぎた操作。</target>
        </trans-unit>
        <trans-unit id="51b16b4dd3a608065010ab050f1c044d587e4984" translate="yes" xml:space="preserve">
          <source>An operation tried to write to memory that is read-only.</source>
          <target state="translated">読み取り専用のメモリへの書き込みを試みました。</target>
        </trans-unit>
        <trans-unit id="0cdeff47b1133140cdc39aa6281a4193e4a3fd25" translate="yes" xml:space="preserve">
          <source>An optimized method for matrix-matrix operations is available</source>
          <target state="translated">行列-行列演算のために最適化された手法が利用可能です。</target>
        </trans-unit>
        <trans-unit id="0f3dca7e150e49f15f11e7561b432ec79e089bf1" translate="yes" xml:space="preserve">
          <source>An optimized method for matrix-scalar operations is available</source>
          <target state="translated">行列スカラ演算のための最適化された手法が利用可能です。</target>
        </trans-unit>
        <trans-unit id="061f7a534d622ec7d7b76381cb35a581642e8473" translate="yes" xml:space="preserve">
          <source>An optimized method for matrix-vector operations is available</source>
          <target state="translated">行列ベクトル演算のために最適化された手法が利用可能です</target>
        </trans-unit>
        <trans-unit id="1459d918f4690c46e6b424c4fc07b16a81bb1321" translate="yes" xml:space="preserve">
          <source>An optimized method to find all the characteristic values and/or vectors is available</source>
          <target state="translated">すべての特性値および/またはベクトルを見つけるための最適化された方法が利用可能です。</target>
        </trans-unit>
        <trans-unit id="cf356b7797f09dd430255cabba22e6b669b5778d" translate="yes" xml:space="preserve">
          <source>An optimized method to find the &lt;code&gt;il&lt;/code&gt;th through the &lt;code&gt;ih&lt;/code&gt;th characteristic values are available</source>
          <target state="translated">&lt;code&gt;il&lt;/code&gt; 番目から &lt;code&gt;ih&lt;/code&gt; 番目までの特性値を見つけるための最適化された方法が利用可能</target>
        </trans-unit>
        <trans-unit id="55662dcd806465abd15ea9ee92465cc49d4f4bb3" translate="yes" xml:space="preserve">
          <source>An optimized method to find the characteristic values in the interval [&lt;code&gt;vl&lt;/code&gt;, &lt;code&gt;vh&lt;/code&gt;] is available</source>
          <target state="translated">区間[ &lt;code&gt;vl&lt;/code&gt; 、 &lt;code&gt;vh&lt;/code&gt; ] の特性値を見つけるための最適化された方法が利用可能です</target>
        </trans-unit>
        <trans-unit id="06771105d28cfe0fe650b94de200ff6d276e071c" translate="yes" xml:space="preserve">
          <source>An optimized method to find the characteristic vectors corresponding to the characteristic values &lt;code&gt;x=[x1, x2,...]&lt;/code&gt; is available</source>
          <target state="translated">特性値 &lt;code&gt;x=[x1, x2,...]&lt;/code&gt; 対応する特性ベクトルを見つけるための最適化された方法が利用可能です</target>
        </trans-unit>
        <trans-unit id="f744563fd636d437613d62cd83f1a88cf9af7cbd" translate="yes" xml:space="preserve">
          <source>An optimized sampler with pre-computed data</source>
          <target state="translated">事前に計算されたデータを用いた最適化されたサンプラー</target>
        </trans-unit>
        <trans-unit id="f0a93e7d7160ec681ea6d7e4c04a7926b5ad27e7" translate="yes" xml:space="preserve">
          <source>An ordered list may start from a number other than one, as in the second list of the above example, where it is numbered from five. As with unordered lists, ordered lists can contain nested toplevel elements.</source>
          <target state="translated">順序付きリストは、上記の例の 2 番目のリストのように、1 以外の番号から開始することができ、5 から番号が付けられています。順不同のリストと同様に、順不同のリストは入れ子になったトップレベル要素を含むことができます。</target>
        </trans-unit>
        <trans-unit id="03ca662d4f2c4b45816c66be6d31e3cf1480577f" translate="yes" xml:space="preserve">
          <source>An unsigned 64-bit integer (&lt;code&gt;uint64_t&lt;/code&gt;) that sets the maximum number of threads available to Julia. If &lt;code&gt;$JULIA_NUM_THREADS&lt;/code&gt; exceeds the number of available physical CPU cores, then the number of threads is set to the number of cores. If &lt;code&gt;$JULIA_NUM_THREADS&lt;/code&gt; is not positive or is not set, or if the number of CPU cores cannot be determined through system calls, then the number of threads is set to &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">Juliaが使用できるスレッドの最大数を設定する符号なし64ビット整数（ &lt;code&gt;uint64_t&lt;/code&gt; ）。 &lt;code&gt;$JULIA_NUM_THREADS&lt;/code&gt; が使用可能な物理CPUコアの数を超える場合、スレッドの数はコアの数に設定されます。場合は &lt;code&gt;$JULIA_NUM_THREADS&lt;/code&gt; 正でないか、設定されていないか、CPUコアの数は、システムコールを介して決定することができない場合、スレッドの数は次のように設定されている &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d32b092601fd9ebd2ac1ea5cb15d47455e3d9c4d" translate="yes" xml:space="preserve">
          <source>An updating operator rebinds the variable on the left-hand side. As a result, the type of the variable may change.</source>
          <target state="translated">更新演算子は、左側の変数をリバインドします。その結果、変数の型が変わることがあります。</target>
        </trans-unit>
        <trans-unit id="8f8c77e7404ca30dcccf92c73c985f04a86420e7" translate="yes" xml:space="preserve">
          <source>Anchor</source>
          <target state="translated">Anchor</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
