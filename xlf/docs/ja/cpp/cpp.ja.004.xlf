<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="cpp">
    <body>
      <group id="cpp">
        <trans-unit id="8391c2c17f2f4f13c610d9f810ea10436298326c" translate="yes" xml:space="preserve">
          <source>2) Replaces the contents with a copy of &lt;code&gt;str&lt;/code&gt;. Equivalent to &lt;code&gt;*this = str;&lt;/code&gt;. In particular, allocator propagation may take place.(since C++11)</source>
          <target state="translated">2）内容を &lt;code&gt;str&lt;/code&gt; のコピーで置き換えます。 &lt;code&gt;*this = str;&lt;/code&gt; 同等。。特に、アロケータの伝達が行われる可能性があります（C ++ 11以降）。</target>
        </trans-unit>
        <trans-unit id="55f5b0316d675d818ea9ce9e4ccf85ef81a1eb0e" translate="yes" xml:space="preserve">
          <source>2) Replaces the contents with copies of those in the range &lt;code&gt;[first, last)&lt;/code&gt;.</source>
          <target state="translated">2）内容を &lt;code&gt;[first, last)&lt;/code&gt; 範囲の内容のコピーで置き換えます。</target>
        </trans-unit>
        <trans-unit id="d972332734e8b5d2c5018aca70fe2138a08cfe8f" translate="yes" xml:space="preserve">
          <source>2) Replaces the contents with those of &lt;code&gt;str&lt;/code&gt; using move semantics. &lt;code&gt;str&lt;/code&gt; is in a valid but unspecified state afterwards. If &lt;code&gt;std::allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_move_assignment()&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the target allocator is replaced by a copy of the source allocator. If it is &lt;code&gt;false&lt;/code&gt; and the source and the target allocators do not compare equal, the target cannot take ownership of the source memory and must assign each character individually, allocating additional memory using its own allocator as needed. Unlike other container move assignments, references, pointers, and iterators to &lt;code&gt;str&lt;/code&gt; may be invalidated.</source>
          <target state="translated">2）moveセマンティクスを使用して、コンテンツを &lt;code&gt;str&lt;/code&gt; のコンテンツに置き換えます。 &lt;code&gt;str&lt;/code&gt; は、その後は有効ですが指定されていない状態です。場合 &lt;code&gt;std::allocator_traits&amp;lt;Allocator&amp;gt;::propagate_on_container_move_assignment()&lt;/code&gt; である &lt;code&gt;true&lt;/code&gt; 、ターゲット・アロケータは、ソースアロケータのコピーに置き換えられます。これが &lt;code&gt;false&lt;/code&gt; で、ソースとターゲットのアロケータが等しい場合、ターゲットはソースメモリの所有権を取得できず、各文字を個別に割り当て、必要に応じて独自のアロケータを使用して追加のメモリを割り当てる必要があります。他のコンテナー移動割り当てとは異なり、参照、ポインター、および &lt;code&gt;str&lt;/code&gt; へのイテレーターは無効になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="d8aa53b7f74bebffc4fbda5847fc2a84f6c97988" translate="yes" xml:space="preserve">
          <source>2) Replaces the file position state with the value of &lt;code&gt;st&lt;/code&gt;.</source>
          <target state="translated">2）ファイルの位置状態を &lt;code&gt;st&lt;/code&gt; の値に置き換えます。</target>
        </trans-unit>
        <trans-unit id="00c2b558ca04a505b3df69c0f209e5d8c8b87e51" translate="yes" xml:space="preserve">
          <source>2) Resolves ambiguity according to the value of &lt;code&gt;z&lt;/code&gt;:</source>
          <target state="translated">2） &lt;code&gt;z&lt;/code&gt; の値に従ってあいまいさを解決します。</target>
        </trans-unit>
        <trans-unit id="68e2fa5afec319a37b25ba54d39a3436371cf00c" translate="yes" xml:space="preserve">
          <source>2) Restores the distribution parameters and internal state with data read from &lt;code&gt;ist&lt;/code&gt;. The formatting flags of &lt;code&gt;ist&lt;/code&gt; are unchanged. The data must have been written using a stream with the same locale, &lt;code&gt;CharT&lt;/code&gt; and &lt;code&gt;Traits&lt;/code&gt; template parameters, otherwise the behavior is undefined. If bad input is encountered, &lt;code&gt;ist.setstate(std::ios::failbit)&lt;/code&gt; is called, which may throw &lt;code&gt;&lt;a href=&quot;../../../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;d&lt;/code&gt; is unchanged in that case.</source>
          <target state="translated">2） &lt;code&gt;ist&lt;/code&gt; から読み取ったデータを使用して、分布パラメーターと内部状態を復元します。 &lt;code&gt;ist&lt;/code&gt; のフォーマットフラグは変更されていません。データは、同じロケール、 &lt;code&gt;CharT&lt;/code&gt; および &lt;code&gt;Traits&lt;/code&gt; テンプレートパラメータを持つストリームを使用して書き込まれている必要があります。そうでない場合、動作は未定義です。不正な入力が検出されると、 &lt;code&gt;ist.setstate(std::ios::failbit)&lt;/code&gt; が呼び出され、 &lt;code&gt;&lt;a href=&quot;../../../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; がスローされる可能性があります。その場合、 &lt;code&gt;d&lt;/code&gt; は変更されません。</target>
        </trans-unit>
        <trans-unit id="12ce85ecd6eacf5e22a64dc9082d8c8da89ac681" translate="yes" xml:space="preserve">
          <source>2) Restores the internal state of the pseudo-random number engine &lt;code&gt;e&lt;/code&gt; from the serialized representation, which was created by an earlier call to &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; using a stream with the same imbued locale and the same &lt;code&gt;CharT&lt;/code&gt; and &lt;code&gt;Traits&lt;/code&gt;. If the input cannot be deserialized, &lt;code&gt;e&lt;/code&gt; is left unchanged and &lt;code&gt;failbit&lt;/code&gt; is raised on &lt;code&gt;ist&lt;/code&gt;</source>
          <target state="translated">2）同じ &lt;code&gt;CharT&lt;/code&gt; ロケールと同じCharTと &lt;code&gt;Traits&lt;/code&gt; を持つストリームを使用して、 &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; への以前の呼び出しによって作成された、シリアル化された表現から疑似乱数エンジン &lt;code&gt;e&lt;/code&gt; の内部状態を復元します。入力をデシリアライズできない場合、 &lt;code&gt;e&lt;/code&gt; は変更されず、 &lt;code&gt;ist&lt;/code&gt; で &lt;code&gt;failbit&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="b643562f5497c25a66a27bfb34dea13cd6b925a7" translate="yes" xml:space="preserve">
          <source>2) Restores the internal state of the pseudo-random number engine adaptor &lt;code&gt;e&lt;/code&gt; from the serialized representation, which was created by an earlier call to &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; using a stream with the same imbued locale and the same &lt;code&gt;CharT&lt;/code&gt; and &lt;code&gt;Traits&lt;/code&gt;. If the input cannot be deserialized, &lt;code&gt;e&lt;/code&gt; is left unchanged and &lt;code&gt;failbit&lt;/code&gt; is raised on &lt;code&gt;ist&lt;/code&gt;</source>
          <target state="translated">2）同じ &lt;code&gt;CharT&lt;/code&gt; ロケールと同じCharTと &lt;code&gt;Traits&lt;/code&gt; を持つストリームを使用して、 &lt;code&gt;operator&amp;lt;&amp;lt;&lt;/code&gt; への以前の呼び出しによって作成された、シリアル化された表現から疑似乱数エンジンアダプター &lt;code&gt;e&lt;/code&gt; の内部状態を復元します。入力をデシリアライズできない場合、 &lt;code&gt;e&lt;/code&gt; は変更されず、 &lt;code&gt;ist&lt;/code&gt; で &lt;code&gt;failbit&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="a8a9c718bf3f1c50f601c7a42168cf9675fd5b33" translate="yes" xml:space="preserve">
          <source>2) Results in &lt;code&gt;container-&amp;gt;push_back(std::move(value))&lt;/code&gt;</source>
          <target state="translated">2）結果は、 &lt;code&gt;container-&amp;gt;push_back(std::move(value))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f4f49d2a78a32ec92ef629659a6ef39651123985" translate="yes" xml:space="preserve">
          <source>2) Results in &lt;code&gt;container-&amp;gt;push_front(std::move(value))&lt;/code&gt;</source>
          <target state="translated">2）結果は、 &lt;code&gt;container-&amp;gt;push_front(std::move(value))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="88d460ebcb4a7e227650a141fb844f9ae792cd96" translate="yes" xml:space="preserve">
          <source>2) Results in &lt;code&gt;iter = container-&amp;gt;insert(iter, std::move(value)); ++iter;&lt;/code&gt;</source>
          <target state="translated">2）結果は &lt;code&gt;iter = container-&amp;gt;insert(iter, std::move(value)); ++iter;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="516b0aee43907957ab96c5142d8c0766a5dbe91a" translate="yes" xml:space="preserve">
          <source>2) Rethrows the currently handled exception. Abandons the execution of the current catch block and passes control to the next matching exception handler (but not to another catch clause after the same try block: its compound-statement is considered to have been 'exited'), reusing the existing exception object: no new objects are made. This form is only allowed when an exception is presently being handled (it calls &lt;code&gt;&lt;a href=&quot;../error/terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt; if used otherwise). The catch clause associated with a &lt;a href=&quot;function-try-block&quot;&gt;function-try-block&lt;/a&gt; must exit via rethrowing if used on a constructor.</source>
          <target state="translated">2）現在処理されている例外を再スローします。現在のcatchブロックの実行を中止し、次の一致する例外ハンドラーに制御を渡します（ただし、同じtryブロックの後の別のcatch句には渡しません：その複合ステートメントは「終了した」と見なされます）。既存の例外オブジェクトを再利用します。新しいオブジェクトは作成されません。この形式は、例外が現在処理されている場合にのみ許可されます（使用しない場合は &lt;code&gt;&lt;a href=&quot;../error/terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt; 呼び出します）。&lt;a href=&quot;function-try-block&quot;&gt;function-try-blockに&lt;/a&gt;関連付けられたcatch句は、コンストラクターで使用する場合、再スローによって終了する必要があります。</target>
        </trans-unit>
        <trans-unit id="26438c9c057589edffd553b839a29cc2990f931f" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;!(*this == rhs)&lt;/code&gt;</source>
          <target state="translated">2）を返します &lt;code&gt;!(*this == rhs)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="92ca7ae99ad5913e1af0f0bbf6f9c1d65dc3dae9" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;!(lhs == rhs)&lt;/code&gt;</source>
          <target state="translated">2）戻り値 &lt;code&gt;!(lhs == rhs)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30afc5c8f541051bb4c57d5c54e5be145efd2b96" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;*this&lt;/code&gt; made relative to &lt;code&gt;base&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;*this&lt;/code&gt; は &lt;code&gt;base&lt;/code&gt; に対して相対的に作成されます。</target>
        </trans-unit>
        <trans-unit id="e3acac0b6d2e53b82e830799ae6da07212d04f42" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;&lt;a href=&quot;reverse_iterator&quot;&gt;std::reverse_iterator&lt;/a&gt;&amp;lt;T*&amp;gt;&lt;/code&gt; to the reverse-beginning of the array &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;&lt;a href=&quot;reverse_iterator&quot;&gt;std::reverse_iterator&lt;/a&gt;&amp;lt;T*&amp;gt;&lt;/code&gt; を配列 &lt;code&gt;array&lt;/code&gt; の逆始まりに戻します。</target>
        </trans-unit>
        <trans-unit id="64e1b994f736103a0d5e098cbbbeaa4e06129696" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;&lt;a href=&quot;reverse_iterator&quot;&gt;std::reverse_iterator&lt;/a&gt;&amp;lt;T*&amp;gt;&lt;/code&gt; to the reverse-end of the array &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;&lt;a href=&quot;reverse_iterator&quot;&gt;std::reverse_iterator&lt;/a&gt;&amp;lt;T*&amp;gt;&lt;/code&gt; を配列 &lt;code&gt;array&lt;/code&gt; の逆の端に戻します。</target>
        </trans-unit>
        <trans-unit id="8a4b5c8e19fea5024a1dcc49ddfbbf4cf4cab932" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;false&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="2d25ac2f6942aefebe5cc0c771c9533e84a2d592" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;p&lt;/code&gt; made relative to &lt;code&gt;base&lt;/code&gt;. Resolves symlinks and normalizes both &lt;code&gt;p&lt;/code&gt; and &lt;code&gt;base&lt;/code&gt; before other processing. Effectively returns &lt;code&gt;weakly_canonical(p).lexically_relative(weakly_canonical(base))&lt;/code&gt; or &lt;code&gt;weakly_canonical(p, ec).lexically_relative(weakly_canonical(base, ec))&lt;/code&gt;, except the error code form returns &lt;code&gt;path()&lt;/code&gt; at the first error occurrence, if any.</source>
          <target state="translated">2） &lt;code&gt;base&lt;/code&gt; を基準にして作られた &lt;code&gt;p&lt;/code&gt; を返します。他の処理の前に、シンボリックリンクを解決し、 &lt;code&gt;p&lt;/code&gt; と &lt;code&gt;base&lt;/code&gt; の両方を正規化します。エラーコード形式が最初のエラー発生時に &lt;code&gt;path()&lt;/code&gt; を返す場合を除いて、 &lt;code&gt;weakly_canonical(p).lexically_relative(weakly_canonical(base))&lt;/code&gt; または &lt;code&gt;weakly_canonical(p, ec).lexically_relative(weakly_canonical(base, ec))&lt;/code&gt; 効果的に返します。</target>
        </trans-unit>
        <trans-unit id="83221ec8f90b5a4723cfa7e220ac05808e72fdf1" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; are not equal, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">2）を返し &lt;code&gt;true&lt;/code&gt; 場合 &lt;code&gt;lhs&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; 、等しくない &lt;code&gt;false&lt;/code&gt; そう。</target>
        </trans-unit>
        <trans-unit id="3cd0abb5956f8b68030ed2093a06101c77846543" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs&lt;/code&gt; is</source>
          <target state="translated">2） &lt;code&gt;lhs&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合、trueを返します</target>
        </trans-unit>
        <trans-unit id="c5a778d30fccc8ec1566cb66ced23b2892bdb820" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;true&lt;/code&gt; if both &lt;code&gt;&lt;a href=&quot;in&quot;&gt;do_in()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;out&quot;&gt;do_out()&lt;/a&gt;&lt;/code&gt; return &lt;code&gt;std::codecvt_base::noconv&lt;/code&gt; for all valid inputs.</source>
          <target state="translated">2）を返し &lt;code&gt;true&lt;/code&gt; 場合は、両方の &lt;code&gt;&lt;a href=&quot;in&quot;&gt;do_in()&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;out&quot;&gt;do_out()&lt;/a&gt;&lt;/code&gt; の戻り &lt;code&gt;std::codecvt_base::noconv&lt;/code&gt; すべての有効な入力のために。</target>
        </trans-unit>
        <trans-unit id="e77c30e0fa90c18c95cdcfc1da799d5f6016daba" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;true&lt;/code&gt; if lhs is greater than rhs, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">2）lhsがrhsより大きい場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="48be6dacbaf7388f10e8de845fe77d895de78af4" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;true&lt;/code&gt; if the stream has no errors and is ready for I/O operations. Specifically, returns &lt;code&gt;!fail()&lt;/code&gt;.</source>
          <target state="translated">2）ストリームにエラーがなく、I / O操作の準備ができている場合は &lt;code&gt;true&lt;/code&gt; を返します。具体的には、 &lt;code&gt;!fail()&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="762d160a639ed47eeb92d2c2c6a7aafa24873bb3" translate="yes" xml:space="preserve">
          <source>2) Returns &lt;code&gt;​0​&lt;/code&gt; on success, &lt;code&gt;-1&lt;/code&gt; otherwise. The base class version returns &lt;code&gt;​0​&lt;/code&gt;.</source>
          <target state="translated">2）を返します &lt;code&gt;​0​&lt;/code&gt; 、成功の上に &lt;code&gt;-1&lt;/code&gt; そう。基底クラスのバージョンが返されます &lt;code&gt;​0​&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="66573d89c9a3008cd075232e504c463488cb532d" translate="yes" xml:space="preserve">
          <source>2) Returns a &lt;code&gt;bitset&amp;lt;N&amp;gt;&lt;/code&gt; containing the result of binary OR on corresponding pairs of bits of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;lhs&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; の対応するビットのペアに対するバイナリORの結果を含む &lt;code&gt;bitset&amp;lt;N&amp;gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="3ba6959d321f862e02b03b004377d2fb52fb3818" translate="yes" xml:space="preserve">
          <source>2) Returns a &lt;code&gt;year&lt;/code&gt; whose year value is the negation of that of &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">2）年の値が &lt;code&gt;*this&lt;/code&gt; の年の否定である &lt;code&gt;year&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="67b3079f22afff50aa564be73562ad64837f5523" translate="yes" xml:space="preserve">
          <source>2) Returns a default-constructed &lt;a href=&quot;../directory_iterator&quot;&gt;&lt;code&gt;directory_iterator&lt;/code&gt;&lt;/a&gt;, which serves as the end iterator. The argument is ignored.</source>
          <target state="translated">2）終了反復子として機能する、デフォルトで構築された&lt;a href=&quot;../directory_iterator&quot;&gt; &lt;code&gt;directory_iterator&lt;/code&gt; を&lt;/a&gt;返します。引数は無視されます。</target>
        </trans-unit>
        <trans-unit id="e34c79461484febbceafa098cb208a0bb2cd9f56" translate="yes" xml:space="preserve">
          <source>2) Returns a default-constructed &lt;a href=&quot;../recursive_directory_iterator&quot;&gt;&lt;code&gt;recursive_directory_iterator&lt;/code&gt;&lt;/a&gt;, which serves as the end iterator. The argument is ignored.</source>
          <target state="translated">2）終了反復子として機能する、デフォルトで作成された&lt;a href=&quot;../recursive_directory_iterator&quot;&gt; &lt;code&gt;recursive_directory_iterator&lt;/code&gt; を&lt;/a&gt;返します。引数は無視されます。</target>
        </trans-unit>
        <trans-unit id="47aed59f34ac1bd3202e0e3fc97867fbe31dbf46" translate="yes" xml:space="preserve">
          <source>2) Returns a numeric array of &lt;code&gt;bool&lt;/code&gt; containing elements each of which is obtained by applying the indicated comparison operator to &lt;code&gt;lhsv&lt;/code&gt; and the corresponding value of &lt;code&gt;rhs&lt;/code&gt; .</source>
          <target state="translated">2）指定された比較演算子を &lt;code&gt;lhsv&lt;/code&gt; と対応する &lt;code&gt;rhs&lt;/code&gt; の値に適用することによってそれぞれ取得された要素を含む &lt;code&gt;bool&lt;/code&gt; の数値配列を返します。</target>
        </trans-unit>
        <trans-unit id="cc704d1c42183b0c73e7522741b146fa164f7f50" translate="yes" xml:space="preserve">
          <source>2) Returns a pointer to the beginning of the &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;array&lt;/code&gt; 先頭へのポインタを返します。</target>
        </trans-unit>
        <trans-unit id="350ac100a15d145bd87da82000afa024dd9fbd66" translate="yes" xml:space="preserve">
          <source>2) Returns a pointer to the current &lt;code&gt;&lt;a href=&quot;../match_results&quot;&gt;std::match_results&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">2）現在の &lt;code&gt;&lt;a href=&quot;../match_results&quot;&gt;std::match_results&lt;/a&gt;&lt;/code&gt; へのポインターを返します。</target>
        </trans-unit>
        <trans-unit id="506a20237313f2c82ad97328770e6018e02606f8" translate="yes" xml:space="preserve">
          <source>2) Returns a pointer to the end of the array &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">2）配列 &lt;code&gt;array&lt;/code&gt; の末尾へのポインターを返します。</target>
        </trans-unit>
        <trans-unit id="8dae6713ed6251680c0d1f1ccf90281e5966181b" translate="yes" xml:space="preserve">
          <source>2) Returns a pointer to the object owned by &lt;code&gt;*this&lt;/code&gt;, i.e. &lt;code&gt;get()&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;*this&lt;/code&gt; が所有するオブジェクトへのポインタ、つまり &lt;code&gt;get()&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="4f4fe41136a0d797668375e878d70d661fd05508" translate="yes" xml:space="preserve">
          <source>2) Returns a reference to the contained value.</source>
          <target state="translated">2)含まれる値への参照を返します。</target>
        </trans-unit>
        <trans-unit id="798b546c2dd4437c5b2cef49d04028fbf7e65964" translate="yes" xml:space="preserve">
          <source>2) Returns a reference to the first &lt;code&gt;std::chrono::tzdb&lt;/code&gt; object held by the &lt;code&gt;tzdb_list&lt;/code&gt; singleton. Equivalent to &lt;code&gt;std::chrono::get_tzdb_list().front()&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;tzdb_list&lt;/code&gt; シングルトンが保持する最初の &lt;code&gt;std::chrono::tzdb&lt;/code&gt; オブジェクトへの参照を返します。 &lt;code&gt;std::chrono::get_tzdb_list().front()&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="588aa1d3a713e3c976e8b811a2ec64cec501ee66" translate="yes" xml:space="preserve">
          <source>2) Returns a value of type &lt;code&gt;&lt;a href=&quot;../time_base&quot;&gt;std::time_base::dateorder&lt;/a&gt;&lt;/code&gt;, which describes the default date format used by this locale (expected by &lt;code&gt;&lt;a href=&quot;get_date&quot;&gt;get_date()&lt;/a&gt;&lt;/code&gt; and produced by &lt;code&gt;&lt;a href=&quot;../../chrono/c/strftime&quot;&gt;std::strftime()&lt;/a&gt;&lt;/code&gt; with format specifier &lt;code&gt;'%x'&lt;/code&gt;).</source>
          <target state="translated">2）このロケールで使用されるデフォルトの日付形式を記述する &lt;code&gt;&lt;a href=&quot;../time_base&quot;&gt;std::time_base::dateorder&lt;/a&gt;&lt;/code&gt; 型の値を返します（ &lt;code&gt;&lt;a href=&quot;get_date&quot;&gt;get_date()&lt;/a&gt;&lt;/code&gt; で予期され、形式指定子 &lt;code&gt;'%x'&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;../../chrono/c/strftime&quot;&gt;std::strftime()&lt;/a&gt;&lt;/code&gt; で生成されます）。</target>
        </trans-unit>
        <trans-unit id="ea94db201f751ed9cb97ddd5bc62214b4ec98591" translate="yes" xml:space="preserve">
          <source>2) Returns an &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; holding, in each &lt;code&gt;char&lt;/code&gt; element, the number of digits in each group of the numeric output formatted by &lt;a href=&quot;../num_put/put&quot;&gt;&lt;code&gt;num_put::put()&lt;/code&gt;&lt;/a&gt; (and, therefore, &lt;a href=&quot;../../io/basic_ostream/operator_ltlt&quot;&gt;&lt;code&gt;basic_ostream::operator&amp;lt;&amp;lt;&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">2）を返し &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::string&lt;/a&gt;&lt;/code&gt; 毎に保持、 &lt;code&gt;char&lt;/code&gt; 要素、によってフォーマット数値出力の各グループの桁数&lt;a href=&quot;../num_put/put&quot;&gt; &lt;code&gt;num_put::put()&lt;/code&gt; &lt;/a&gt;（及び、従って、&lt;a href=&quot;../../io/basic_ostream/operator_ltlt&quot;&gt; &lt;code&gt;basic_ostream::operator&amp;lt;&amp;lt;&lt;/code&gt; &lt;/a&gt;）を</target>
        </trans-unit>
        <trans-unit id="77e59afe50d770c0295182779e46a141c9d1cf63" translate="yes" xml:space="preserve">
          <source>2) Returns an iterator one past the last element of the path. Dereferencing this iterator is undefined behavior.</source>
          <target state="translated">2)パスの最後の要素から 1 つ前のイテレータを返します。このイテレータの再参照は未定義の動作です。</target>
        </trans-unit>
        <trans-unit id="eb4f3ba0ac2bd3ce2cbe950ba8232429bb8eb092" translate="yes" xml:space="preserve">
          <source>2) Returns an iterator pointing to the first element that compares</source>
          <target state="translated">2)比較する最初の要素を指すイテレータを返します。</target>
        </trans-unit>
        <trans-unit id="72ed9d6d08781485225f3096900ed434af13eb8d" translate="yes" xml:space="preserve">
          <source>2) Returns an iterator to the character following the last character of the view. Equivalent to &lt;code&gt;sv.end()&lt;/code&gt;.</source>
          <target state="translated">2）ビューの最後の文字に続く文字に反復子を返します。 &lt;code&gt;sv.end()&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="d7cac8eb55cdb675a9398f7f2b4bdfa43a3c7ff9" translate="yes" xml:space="preserve">
          <source>2) Returns an iterator to the element following the last element of the span. Equivalent to &lt;code&gt;s.end()&lt;/code&gt;.</source>
          <target state="translated">2）スパンの最後の要素に続く要素の反復子を返します。 &lt;code&gt;s.end()&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="9bd6d6589506956e23a5e2a9a1ff6a171e4f6a54" translate="yes" xml:space="preserve">
          <source>2) Returns status of the entry, as if determined by a &lt;a href=&quot;../status&quot;&gt;symlink_status&lt;/a&gt; call (symlinks are not followed)</source>
          <target state="translated">2）&lt;a href=&quot;../status&quot;&gt;symlink_status&lt;/a&gt;呼び出しによって決定されたかのように、エントリのステータスを返します（シンボリックリンクは追跡されません）</target>
        </trans-unit>
        <trans-unit id="e54c83ae65a74a9b190132d6cd903e49997eb107" translate="yes" xml:space="preserve">
          <source>2) Returns the</source>
          <target state="translated">2)</target>
        </trans-unit>
        <trans-unit id="b8d3c6dce0679b1b8a24fe8e08411367b4c8f7a0" translate="yes" xml:space="preserve">
          <source>2) Returns the &amp;beta; distribution parameter. It is also known as the scale parameter. The default value is &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">2）&amp;beta;分布パラメーターを返します。スケールパラメータとも呼ばれます。デフォルト値は &lt;code&gt;1.0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0e39147e488e17ede3f2e916406eef021f8304a9" translate="yes" xml:space="preserve">
          <source>2) Returns the b distribution parameter (scale). The default value is &lt;code&gt;0.0&lt;/code&gt;.</source>
          <target state="translated">2）b分布パラメーター（スケール）を返します。デフォルト値は &lt;code&gt;0.0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2a1c40654e49142d3480db2bab15da801206336f" translate="yes" xml:space="preserve">
          <source>2) Returns the b parameter. It defines the scale of the distribution. The default value is &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">2）bパラメータを返します。分布のスケールを定義します。デフォルト値は &lt;code&gt;1.0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4384308f7cc6a52ea5418f2de8024a3c3a3c2c6b" translate="yes" xml:space="preserve">
          <source>2) Returns the character to be used as the decimal separator between integer and fractional parts.</source>
          <target state="translated">2)整数部と小数部の区切り文字として使用する文字を返します。</target>
        </trans-unit>
        <trans-unit id="8961e82863ed0805c731bebeee2322f77d00efe2" translate="yes" xml:space="preserve">
          <source>2) Returns the character to be used as the separator between digit groups when parsing or formatting integers and integral parts of floating-point values.</source>
          <target state="translated">2)整数や浮動小数点値の積分部分を解析したりフォーマットしたりする際に、桁群間の区切り文字として使用する文字を返します。</target>
        </trans-unit>
        <trans-unit id="3e73b8cb6dc92025602bb774def09663c95d6b93" translate="yes" xml:space="preserve">
          <source>2) Returns the character to be used as the separator between digit groups when parsing or formatting the integral parts of monetary values.</source>
          <target state="translated">2)金額の積分部分を解析またはフォーマットする際に、桁グループ間の区切り文字として使用する文字を返します。</target>
        </trans-unit>
        <trans-unit id="4736b20e57c9d91e8b07f86c4a28b0f5b7549949" translate="yes" xml:space="preserve">
          <source>2) Returns the character to use as the decimal point separator in monetary I/O if the format uses fractions (that is, if &lt;code&gt;&lt;a href=&quot;frac_digits&quot;&gt;do_frac_digits()&lt;/a&gt;&lt;/code&gt; is greater than zero). For typical U.S. locales, it is the character &lt;code&gt;'.'&lt;/code&gt; (or &lt;code&gt;L'.'&lt;/code&gt;)</source>
          <target state="translated">2）形式が分数を使用する場合（つまり、 &lt;code&gt;&lt;a href=&quot;frac_digits&quot;&gt;do_frac_digits()&lt;/a&gt;&lt;/code&gt; がゼロより大きい場合）、通貨I / Oで小数点セパレーターとして使用する文字を返します。典型的な米国のロケールでは、これは文字 &lt;code&gt;'.'&lt;/code&gt; （または &lt;code&gt;L'.'&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b554cfad13c768d6c6936e57bea479631302cc17" translate="yes" xml:space="preserve">
          <source>2) Returns the deviation &amp;sigma; distribution parameter. The default value is &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">2）偏差&amp;sigma;分布パラメーターを返します。デフォルト値は &lt;code&gt;1.0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a16f7e36cd153c7134e59830023018cf12b3111a" translate="yes" xml:space="preserve">
          <source>2) Returns the k distribution parameter. It defines the number of desired outcomes. The default value is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">2）k分布パラメーターを返します。これは、望ましい結果の数を定義します。デフォルト値は &lt;code&gt;1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b21a8bb9b9b3a04278f3900bbbd3b199805e705d" translate="yes" xml:space="preserve">
          <source>2) Returns the list of probability densities at the boundaries of the intervals.</source>
          <target state="translated">2)区間の境界における確率密度のリストを返します。</target>
        </trans-unit>
        <trans-unit id="26a8967f9cce057e3e53621ae15b1f2057d7a692" translate="yes" xml:space="preserve">
          <source>2) Returns the list of probability densities of the intervals.</source>
          <target state="translated">2)間隔の確率密度のリストを返します。</target>
        </trans-unit>
        <trans-unit id="754e3d9a4f9435aca8034f9cad895b0773aa5893" translate="yes" xml:space="preserve">
          <source>2) Returns the log-deviation s distribution parameter. The default value is &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">2）対数偏差の分布パラメーターを返します。デフォルト値は &lt;code&gt;1.0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="569144734182803819c2b1f446596d1d1bc31778" translate="yes" xml:space="preserve">
          <source>2) Returns the maximum value that &lt;code&gt;do_length(state, from, from_end, 1)&lt;/code&gt; can return for any valid range &lt;code&gt;[from, from_end)&lt;/code&gt; and any valid &lt;code&gt;state&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;do_length(state, from, from_end, 1)&lt;/code&gt; が有効な範囲 &lt;code&gt;[from, from_end)&lt;/code&gt; と有効な &lt;code&gt;state&lt;/code&gt; に対して返すことができる最大値を返します。</target>
        </trans-unit>
        <trans-unit id="2f8e55cc906769114f45735cef4925644dc0a387" translate="yes" xml:space="preserve">
          <source>2) Returns the n (the second degree of freedom) distribution parameter. The default value is &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">2）n（2番目の自由度）分布パラメーターを返します。デフォルト値は &lt;code&gt;1.0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="630d3485cc733125051ccc35d473642df2403363" translate="yes" xml:space="preserve">
          <source>2) Returns the native-format representation of the pathname by reference.</source>
          <target state="translated">2)参照によるパス名のネイティブフォーマット表現を返します。</target>
        </trans-unit>
        <trans-unit id="a7208a0a65b27afbe2949c62cf9109c3f234ff6e" translate="yes" xml:space="preserve">
          <source>2) Returns the number of digits to be displayed after the decimal point when printing monetary values</source>
          <target state="translated">2)金額を印刷する際の小数点以下の表示桁数を返します。</target>
        </trans-unit>
        <trans-unit id="8939e2e3255d359791ad89a0ba7144c75377fcbc" translate="yes" xml:space="preserve">
          <source>2) Returns the number of elements with key that compares equivalent to the specified argument &lt;code&gt;x&lt;/code&gt;. This overload only participates in overload resolution if the qualified-id &lt;code&gt;Hash::transparent_key_equal&lt;/code&gt; is valid and denotes a type. This assumes that such Hash is callable with both K and Key type, and that its key_equal is transparent, which, together, allows calling this function without constructing an instance of &lt;code&gt;Key&lt;/code&gt;.</source>
          <target state="translated">2）指定された引数 &lt;code&gt;x&lt;/code&gt; に相当するキーを持つ要素の数を返します。このオーバーロードは、修飾ID &lt;code&gt;Hash::transparent_key_equal&lt;/code&gt; が有効で、タイプを示す場合にのみ、オーバーロードの解決に参加します。これは、そのようなハッシュがKとKeyの両方のタイプで呼び出し可能であり、そのkey_equalが透過的であることを前提としています。これにより、 &lt;code&gt;Key&lt;/code&gt; のインスタンスを作成せずにこの関数を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="9886b36293703ed26c455b85b7846e216f3a6fe0" translate="yes" xml:space="preserve">
          <source>2) Returns the number of elements with key that compares equivalent to the value &lt;code&gt;x&lt;/code&gt;. This overload only participates in overload resolution if the qualified-id &lt;code&gt;Compare::is_transparent&lt;/code&gt; is valid and denotes a type. They allow calling this function without constructing an instance of &lt;code&gt;Key&lt;/code&gt;.</source>
          <target state="translated">2）値 &lt;code&gt;x&lt;/code&gt; に相当するキーを持つ要素の数を返します。このオーバーロードは、qualified-id &lt;code&gt;Compare::is_transparent&lt;/code&gt; が有効で、タイプを示す場合にのみ、オーバーロードの解決に参加します。 &lt;code&gt;Key&lt;/code&gt; のインスタンスを作成せずにこの関数を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="3226377a15a6ccddbefc7c046fcde51186e3a0fb" translate="yes" xml:space="preserve">
          <source>2) Returns the number of files and directories that were deleted (which may be zero if &lt;code&gt;p&lt;/code&gt; did not exist to begin with). The overload that takes &lt;code&gt;error_code&amp;amp;&lt;/code&gt; argument returns &lt;code&gt;static_cast&amp;lt;&lt;a href=&quot;../types/integer&quot;&gt;std::uintmax_t&lt;/a&gt;&amp;gt;(-1)&lt;/code&gt; on error.</source>
          <target state="translated">2）削除されたファイルとディレクトリの数を返します（最初に &lt;code&gt;p&lt;/code&gt; が存在しなかった場合はゼロになる場合があります）。 &lt;code&gt;error_code&amp;amp;&lt;/code&gt; 引数を取るオーバーロードは、エラー時に &lt;code&gt;static_cast&amp;lt;&lt;a href=&quot;../types/integer&quot;&gt;std::uintmax_t&lt;/a&gt;&amp;gt;(-1)&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2ada8a9006c100c5271456adbb709585239f2993" translate="yes" xml:space="preserve">
          <source>2) Returns the pattern that determines the grouping of the digits in the monetary output, with the same exact meaning as &lt;code&gt;&lt;a href=&quot;../numpunct/grouping&quot;&gt;std::numpunct::do_grouping&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;&lt;a href=&quot;../numpunct/grouping&quot;&gt;std::numpunct::do_grouping&lt;/a&gt;&lt;/code&gt; とまったく同じ意味で、通貨出力の数字のグループ化を決定するパターンを返します</target>
        </trans-unit>
        <trans-unit id="32130ac3baff2871f6e8f13f30c7ab4d36aeca4a" translate="yes" xml:space="preserve">
          <source>2) Returns the pointer to the current character (</source>
          <target state="translated">2)現在の文字へのポインタを返します (</target>
        </trans-unit>
        <trans-unit id="f5360db51f28dbcd38bdf26ba565406cd6213bcb" translate="yes" xml:space="preserve">
          <source>2) Returns the stored &lt;code&gt;std::chrono::day&lt;/code&gt; value.</source>
          <target state="translated">2）保存された &lt;code&gt;std::chrono::day&lt;/code&gt; 値を返します。</target>
        </trans-unit>
        <trans-unit id="cad58dfef066540adfa02f66b3a706acd79aa932" translate="yes" xml:space="preserve">
          <source>2) Returns the stored &lt;code&gt;std::chrono::month&lt;/code&gt; value.</source>
          <target state="translated">2）保存された &lt;code&gt;std::chrono::month&lt;/code&gt; 値を返します。</target>
        </trans-unit>
        <trans-unit id="c6aba27c3fb9f5c674debbeb61e48936205d14bd" translate="yes" xml:space="preserve">
          <source>2) Returns the string used as the currency identifier by this locale. If &lt;code&gt;International&lt;/code&gt; (the second template parameter of &lt;code&gt;std::moneypunct&lt;/code&gt;) is &lt;code&gt;false&lt;/code&gt;, the identifier is usually a single (wide) character, such as &lt;code&gt;&quot;￥&quot;&lt;/code&gt; or &lt;code&gt;&quot;$&quot;&lt;/code&gt;. If &lt;code&gt;International&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the identifier is usually a four-character string holding the three-character &lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO 4217&lt;/a&gt; currency code followed by a space (&lt;code&gt;&quot;JPY &quot;&lt;/code&gt; or &lt;code&gt;&quot;USD &quot;&lt;/code&gt;)</source>
          <target state="translated">2）このロケールで通貨識別子として使用される文字列を返します。場合は &lt;code&gt;International&lt;/code&gt; （の第2のテンプレートパラメータ &lt;code&gt;std::moneypunct&lt;/code&gt; ）である &lt;code&gt;false&lt;/code&gt; 、識別子は、通常、単一の（ワイド）文字、などである &lt;code&gt;&quot;￥&quot;&lt;/code&gt; または &lt;code&gt;&quot;$&quot;&lt;/code&gt; 。場合 &lt;code&gt;International&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 、識別子は3文字保持4文字の文字列通常、&lt;a href=&quot;https://en.wikipedia.org/wiki/ISO_4217&quot;&gt;ISO 4217&lt;/a&gt;通貨コードは、スペース（続く &lt;code&gt;&quot;JPY &quot;&lt;/code&gt; または &lt;code&gt;&quot;USD &quot;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="e7887877b659c0a6b382ef0cf51d12c66fa1c192" translate="yes" xml:space="preserve">
          <source>2) Returns the t distribution parameter. It identifies the number of trials. The default value is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">2）t分布パラメーターを返します。試行回数を識別します。デフォルト値は &lt;code&gt;1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2b66ebd4cece8d564e6d69a38f8b8cf7bb39a807" translate="yes" xml:space="preserve">
          <source>2) Returns the value of the &lt;a href=&quot;fe_round&quot;&gt;floating point rounding macro&lt;/a&gt; that corresponds to the current rounding direction.</source>
          <target state="translated">2）現在の丸め方向に対応する&lt;a href=&quot;fe_round&quot;&gt;浮動小数点丸めマクロ&lt;/a&gt;の値を返します。</target>
        </trans-unit>
        <trans-unit id="04ebaa70e4b5ae1242601266262488efa93190b5" translate="yes" xml:space="preserve">
          <source>2) Returns true if any of the bits in &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; are not equal.</source>
          <target state="translated">2） &lt;code&gt;*this&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; のいずれかのビットが等しくない場合にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="684706ea115b5dd7bb203b7172a34dcaa9b23da0" translate="yes" xml:space="preserve">
          <source>2) Rvalue overload is deleted to prevent taking the address of &lt;code&gt;const&lt;/code&gt; rvalues.</source>
          <target state="translated">2）右辺値のオーバーロードは、 &lt;code&gt;const&lt;/code&gt; 右辺値のアドレスを取得しないように削除されます。</target>
        </trans-unit>
        <trans-unit id="d86238bbc8e36a925c9f80302fa4069c3f0285ea" translate="yes" xml:space="preserve">
          <source>2) Same as (1) but may also propagate exceptions thrown by &lt;code&gt;pred&lt;/code&gt;</source>
          <target state="translated">2）（1）と同じですが、 &lt;code&gt;pred&lt;/code&gt; によってスローされた例外も伝播する可能性があります</target>
        </trans-unit>
        <trans-unit id="57e247ebdf60c709e9ae22b0dda69f06a24842e0" translate="yes" xml:space="preserve">
          <source>2) Same as (1) but returns &lt;code&gt;local_days&lt;/code&gt; instead. Equivalent to &lt;code&gt;return local_days(sys_days(*this).time_since_epoch());&lt;/code&gt;.</source>
          <target state="translated">2）（1）と同じですが、代わりに &lt;code&gt;local_days&lt;/code&gt; を返します。相当 &lt;code&gt;return local_days(sys_days(*this).time_since_epoch());&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="787ba623083b654803cc944b335d98a13f139e8d" translate="yes" xml:space="preserve">
          <source>2) Same as (1) except that the behavior is as if the POSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/lstat.html&quot;&gt;lstat&lt;/a&gt; is used (symlinks are not followed):</source>
          <target state="translated">2）（1）と同じですが、動作はPOSIX &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/9699919799/functions/lstat.html&quot;&gt;lstat&lt;/a&gt;が使用されている場合と同じです（シンボリックリンクは追跡されません）。</target>
        </trans-unit>
        <trans-unit id="9f60da33f6d9ebea7c44566f862bef1b340c47b0" translate="yes" xml:space="preserve">
          <source>2) Same as (1) except that the behavior is as if the POSIX &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/functions/lstat.html&quot;&gt;lstat&lt;/a&gt; is used (symlinks are not followed):</source>
          <target state="translated">2）POSIX &lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/9699919799/functions/lstat.html&quot;&gt;lstat&lt;/a&gt;が使用されているかのように動作することを除いて（1）と同じです（シンボリックリンクはたどられません）：</target>
        </trans-unit>
        <trans-unit id="1af966e118b06a72069dac8f7adf8f4ef42e3077" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but executed according to &lt;code&gt;policy&lt;/code&gt;. This overload does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;../algorithm/is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true</source>
          <target state="translated">2）（1）と同じですが、 &lt;code&gt;policy&lt;/code&gt; に従って実行されます。 &lt;code&gt;&lt;a href=&quot;../algorithm/is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; がtrueでない限り、このオーバーロードはオーバーロードの解決に参加しません</target>
        </trans-unit>
        <trans-unit id="c8683577e7b56386701932faf733e071045d7c48" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but executed according to &lt;code&gt;policy&lt;/code&gt;. This overload does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;../algorithm/is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true.</source>
          <target state="translated">2）（1）と同じですが、 &lt;code&gt;policy&lt;/code&gt; に従って実行されます。 &lt;code&gt;&lt;a href=&quot;../algorithm/is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; がtrueでない限り、このオーバーロードはオーバーロードの解決に参加しません。</target>
        </trans-unit>
        <trans-unit id="1654a4224b07ce94f8df3a08a02ac31f28af9634" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but executed according to &lt;code&gt;policy&lt;/code&gt;. This overload does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true</source>
          <target state="translated">2）（1）と同じですが、 &lt;code&gt;policy&lt;/code&gt; に従って実行されます。 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; がtrueでない限り、このオーバーロードはオーバーロードの解決に参加しません</target>
        </trans-unit>
        <trans-unit id="8521ba6b576268e0c550134ea77e3e28433962a8" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but executed according to &lt;code&gt;policy&lt;/code&gt;. This overload only participates in overload resolution if &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true</source>
          <target state="translated">2）（1）と同じですが、 &lt;code&gt;policy&lt;/code&gt; に従って実行されます。このオーバーロードは、 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; がtrueの場合にのみ、オーバーロード解決に参加します</target>
        </trans-unit>
        <trans-unit id="2124cbf53740fd55ccaf10707b644f6d1c12182c" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but executed according to &lt;code&gt;policy&lt;/code&gt;. This overload only participates in overload resolution if &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true.</source>
          <target state="translated">2）（1）と同じですが、 &lt;code&gt;policy&lt;/code&gt; に従って実行されます。このオーバーロードは、 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; がtrueの場合にのみ、オーバーロードの解決に参加します。</target>
        </trans-unit>
        <trans-unit id="ebe57bded2a9a79d759a27216ef62cd996223a04" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but may also fail spuriously.</source>
          <target state="translated">2)(1)と同じですが、スプラで失敗することもあります。</target>
        </trans-unit>
        <trans-unit id="fb44f4f0eddcc4027b2c0e9421a0ee805eb12d71" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but returns &lt;code&gt;local_days&lt;/code&gt; instead of &lt;code&gt;sys_days&lt;/code&gt;. Equivalent to &lt;code&gt;local_days(sys_days(*this).time_since_epoch())&lt;/code&gt;.</source>
          <target state="translated">2）（1）と同じですが、 &lt;code&gt;local_days&lt;/code&gt; ではなく &lt;code&gt;sys_days&lt;/code&gt; 返します。相当 &lt;code&gt;local_days(sys_days(*this).time_since_epoch())&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a008aea8c4be4287c7f35d50f7f1955a8a9ab4d8" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but the conversion is also &lt;code&gt;noexcept&lt;/code&gt;.</source>
          <target state="translated">2）（1）と同じですが、変換も &lt;code&gt;noexcept&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2b819c4b56ae1847eca755461645ce664da870ec" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but uses &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_trivially_constructible&lt;/a&gt;&amp;lt;T, T&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">2）（1）と同じですが、 &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_trivially_constructible&lt;/a&gt;&amp;lt;T, T&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="158d4174fc7bb0b591092979e26bc0885b332afe" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but uses &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_trivially_constructible&lt;/a&gt;&amp;lt;T, const T&amp;amp;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">2）（1）と同じですが、 &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_trivially_constructible&lt;/a&gt;&amp;lt;T, const T&amp;amp;&amp;gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="2455df7b2175063ab628cedb488b1ec74f8ce49e" translate="yes" xml:space="preserve">
          <source>2) Same as (1), but uses &lt;code&gt;comp&lt;/code&gt; to compare the values.</source>
          <target state="translated">2）（1）と同じですが、 &lt;code&gt;comp&lt;/code&gt; を使用して値を比較します。</target>
        </trans-unit>
        <trans-unit id="39d0d7b7ea9ff9127aed6deb2d0c6e2be24394f1" translate="yes" xml:space="preserve">
          <source>2) Same as (1), except that the attributes of the new directory are copied from &lt;code&gt;existing_p&lt;/code&gt; (which must be a directory that exists). It is OS-dependent which attributes are copied: on POSIX systems, the attributes are copied as if by</source>
          <target state="translated">2）（1）と同じですが、新しいディレクトリの属性が &lt;code&gt;existing_p&lt;/code&gt; （存在するディレクトリでなければなりません）からコピーされます。どの属性がコピーされるかはOSに依存します。POSIXシステムでは、属性は次のようにコピーされます。</target>
        </trans-unit>
        <trans-unit id="2341cc9c6fc2861406e421041432094a4694bfee" translate="yes" xml:space="preserve">
          <source>2) Same as 1), but uses &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_trivially_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, T&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">2）1）と同じですが、 &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_trivially_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, T&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b7a7f1c4d66140d59703ce2be9bd8d7b0dd5ce5" translate="yes" xml:space="preserve">
          <source>2) Same as 1), but uses &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_trivially_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, const T&amp;amp;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">2）1）と同じですが、 &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_trivially_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, const T&amp;amp;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d88bfbdbb36791f1cf47a00b69cd034575faa322" translate="yes" xml:space="preserve">
          <source>2) Same as &lt;code&gt;getline(input, str, input.widen('\n'))&lt;/code&gt;, that is, the default delimiter is the endline character.</source>
          <target state="translated">2） &lt;code&gt;getline(input, str, input.widen('\n'))&lt;/code&gt; と同じです。つまり、デフォルトの区切り文字はエンドライン文字です。</target>
        </trans-unit>
        <trans-unit id="2a60510c8e118ec323113052c9e5cc32ed9184d2" translate="yes" xml:space="preserve">
          <source>2) Same as &lt;code&gt;ostreambuf_iterator(stream.rdbuf())&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;ostreambuf_iterator(stream.rdbuf())&lt;/code&gt; ）と同じ</target>
        </trans-unit>
        <trans-unit id="ae067033883014113425e5c4744db861b7d52f7a" translate="yes" xml:space="preserve">
          <source>2) Same, but &lt;code&gt;type&lt;/code&gt; cannot include parentheses:</source>
          <target state="translated">2）同じですが、 &lt;code&gt;type&lt;/code&gt; に括弧を含めることはできません：</target>
        </trans-unit>
        <trans-unit id="6d22cf7ab9fd315890290eaf83df26949f2ed10d" translate="yes" xml:space="preserve">
          <source>2) Searches for the file in implementation-defined manner. The intent of this syntax is to search for the files that are not controlled by the implementation. Typical implementations first search the directory where the current file resides and, only if the file is not found, search the standard include directories as with (1).</source>
          <target state="translated">2)実装で定義された方法でファイルを検索します。この構文の意図は、実装によって制御されていないファイルを検索することです。典型的な実装では、まず現在のファイルが存在するディレクトリを検索し、ファイルが見つからない場合にのみ、(1)と同様に標準インクルードディレクトリを検索します。</target>
        </trans-unit>
        <trans-unit id="83e5006ee900293f9b17ba0a56fb606c36cc67ec" translate="yes" xml:space="preserve">
          <source>2) Seeds the underlying engine with the seed value &lt;code&gt;s&lt;/code&gt;. Effectively calls &lt;code&gt;e.seed(value)&lt;/code&gt;, where &lt;code&gt;e&lt;/code&gt; is the underlying engine.</source>
          <target state="translated">2）基になるエンジンにシード値 &lt;code&gt;s&lt;/code&gt; をシードします。 &lt;code&gt;e.seed(value)&lt;/code&gt; を効果的に呼び出します。ここで、 &lt;code&gt;e&lt;/code&gt; は基礎となるエンジンです。</target>
        </trans-unit>
        <trans-unit id="070208aa54c5c3954acc1133746650d7456b1255" translate="yes" xml:space="preserve">
          <source>2) Sets file permissions to &lt;code&gt;perm&lt;/code&gt;.</source>
          <target state="translated">2）ファイルの権限を &lt;code&gt;perm&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="4d8dff5e60439f19fbad0a1038c513b3b1664a7a" translate="yes" xml:space="preserve">
          <source>2) Sets file type to &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">2）ファイルタイプを &lt;code&gt;type&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="cf5a1b8f6cba4055279c48e656c448a9fd8e8e35" translate="yes" xml:space="preserve">
          <source>2) Sets the &lt;code&gt;floatfield&lt;/code&gt; of the stream &lt;code&gt;str&lt;/code&gt; to &lt;code&gt;scientific&lt;/code&gt; as if by calling &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::scientific&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::floatfield&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::scientific&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::floatfield&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: scientific&lt;/a&gt;、&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: floatfield&lt;/a&gt;）を呼び出すかのように、ストリーム &lt;code&gt;str&lt;/code&gt; の &lt;code&gt;floatfield&lt;/code&gt; を &lt;code&gt;scientific&lt;/code&gt; 設定します</target>
        </trans-unit>
        <trans-unit id="99f73e99b187c8783f2c722bce29a1143d224da1" translate="yes" xml:space="preserve">
          <source>2) Sets the associated parameter set to &lt;code&gt;params&lt;/code&gt;.</source>
          <target state="translated">2）関連するパラメーターセットを &lt;code&gt;params&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="a2e381e457457391dbb433f5bac59ef2a2057289" translate="yes" xml:space="preserve">
          <source>2) Sets the associated stream buffer to &lt;code&gt;sb&lt;/code&gt;. The error state is cleared by calling &lt;code&gt;&lt;a href=&quot;clear&quot;&gt;clear()&lt;/a&gt;&lt;/code&gt;. Returns the associated stream buffer before the operation. If there is no associated stream buffer, returns a null pointer.</source>
          <target state="translated">2）関連するストリームバッファを &lt;code&gt;sb&lt;/code&gt; に設定します。エラー状態は、 &lt;code&gt;&lt;a href=&quot;clear&quot;&gt;clear()&lt;/a&gt;&lt;/code&gt; を呼び出すことによってクリアされます。操作の前に関連付けられたストリームバッファーを返します。関連付けられたストリームバッファがない場合は、nullポインタを返します。</target>
        </trans-unit>
        <trans-unit id="3cd279df430bb5b0e476b556bd51490847c7b224" translate="yes" xml:space="preserve">
          <source>2) Sets the bit at position &lt;code&gt;pos&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">2）位置 &lt;code&gt;pos&lt;/code&gt; のビットを &lt;code&gt;false&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="b8b32bc3c8c48c3006f1655e8b5b333cd56c1c36" translate="yes" xml:space="preserve">
          <source>2) Sets the bit at position &lt;code&gt;pos&lt;/code&gt; to the value &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">2）位置 &lt;code&gt;pos&lt;/code&gt; のビットを値 &lt;code&gt;value&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="c47fc2c83cdaef8884ec3896c7e1ab60732f5c0e" translate="yes" xml:space="preserve">
          <source>2) Sets the bits to the result of binary OR on corresponding pairs of bits of &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;*this&lt;/code&gt; と &lt;code&gt;other&lt;/code&gt; の対応するビットのペアのバイナリORの結果にビットを設定します。</target>
        </trans-unit>
        <trans-unit id="daafd4dc2b436ef899267802eb37328bbf36e368" translate="yes" xml:space="preserve">
          <source>2) Sets the current tied stream to &lt;code&gt;str&lt;/code&gt;. Returns the tied stream before the operation. If there is no tied stream, a null pointer is returned.</source>
          <target state="translated">2）現在の関連付けられたストリームを &lt;code&gt;str&lt;/code&gt; に設定します。操作の前に関連付けられたストリームを返します。関連付けられたストリームがない場合は、nullポインターが返されます。</target>
        </trans-unit>
        <trans-unit id="77ef7fdb4c58ab14628d94dcbe6a4c1c1b4ed5c8" translate="yes" xml:space="preserve">
          <source>2) Sets the exception mask to &lt;code&gt;except&lt;/code&gt;.</source>
          <target state="translated">2）例外マスクを &lt;code&gt;except&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="fe88e0919da14b89eabe35a9907df557c195fc76" translate="yes" xml:space="preserve">
          <source>2) Sets the field width to the given one. Returns the previous field width.</source>
          <target state="translated">2)与えられたフィールド幅を設定します。前のフィールド幅を返します。</target>
        </trans-unit>
        <trans-unit id="89465e990db1d146cca41beafec452ffb5abc825" translate="yes" xml:space="preserve">
          <source>2) Sets the imaginary part to &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">2）虚数部を &lt;code&gt;value&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="b62840a247fe057f7a18395f3da8e01892fcb3b0" translate="yes" xml:space="preserve">
          <source>2) Sets the maximum load factor to &lt;code&gt;ml&lt;/code&gt;.</source>
          <target state="translated">2）最大負荷係数を &lt;code&gt;ml&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="60a12819ebc66ac9d400a09d83bc6795b16636bc" translate="yes" xml:space="preserve">
          <source>2) Sets the precision to the given one. Returns the previous precision.</source>
          <target state="translated">2)与えられた精度を設定します。前の精度を返します。</target>
        </trans-unit>
        <trans-unit id="d6f51212b959249e62b31b51142e82969ad6fe1c" translate="yes" xml:space="preserve">
          <source>2) Sets the real part to &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">2）実数部を &lt;code&gt;value&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="a1f9add7f2592687e514ad4fdcadfd417e5bed21" translate="yes" xml:space="preserve">
          <source>2) Similar to (1), but it yields a specialization of &lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/subrange&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt;&lt;code&gt;ranges::subrange&lt;/code&gt;&lt;/a&gt; when the the same condition is met.</source>
          <target state="translated">2）（1）に似ていますが、同じ条件が満たされると、&lt;a href=&quot;https://en.cppreference.com/mwiki/index.php?title=cpp/ranges/subrange&amp;amp;action=edit&amp;amp;redlink=1&quot;&gt; &lt;code&gt;ranges::subrange&lt;/code&gt; &lt;/a&gt;特殊化が行われます。</target>
        </trans-unit>
        <trans-unit id="10aec6917ed97b26abd3c7faee4f84f08daa3b28" translate="yes" xml:space="preserve">
          <source>2) Specialization for pointers. If &lt;code&gt;T&lt;/code&gt; is an object type, provides a member type &lt;code&gt;value_type&lt;/code&gt; equal to &lt;code&gt;&lt;a href=&quot;../types/remove_cv&quot;&gt;std::remove_cv_t&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;. Otherwise, there is no member &lt;code&gt;value_type&lt;/code&gt;.</source>
          <target state="translated">2）ポインターの特殊化。 &lt;code&gt;T&lt;/code&gt; がオブジェクト型の場合、メンバー型 &lt;code&gt;value_type&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;../types/remove_cv&quot;&gt;std::remove_cv_t&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; remove_cv_t &amp;lt;T&amp;gt;と等しくします。それ以外の場合、メンバー &lt;code&gt;value_type&lt;/code&gt; はありません。</target>
        </trans-unit>
        <trans-unit id="45c18ec003fcf5c20890b10f5b1f5fbdbd2e3fbd" translate="yes" xml:space="preserve">
          <source>2) Specialization for pointers. Provides a member type &lt;code&gt;difference_type&lt;/code&gt; equal to &lt;code&gt;&lt;a href=&quot;../types/ptrdiff_t&quot;&gt;std::ptrdiff_t&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">2）ポインターの特殊化。 &lt;code&gt;&lt;a href=&quot;../types/ptrdiff_t&quot;&gt;std::ptrdiff_t&lt;/a&gt;&lt;/code&gt; &lt;code&gt;difference_type&lt;/code&gt; 等しいメンバー型のdifference_typeを提供します。</target>
        </trans-unit>
        <trans-unit id="25d86a47c6b899b1f1df9adcb96e0ab88206f967" translate="yes" xml:space="preserve">
          <source>2) Specialization for type &lt;code&gt;void&lt;/code&gt; is provided, it declares the typedef &lt;code&gt;element_type&lt;/code&gt;, but no member functions.</source>
          <target state="translated">2） &lt;code&gt;void&lt;/code&gt; 型の特殊化が提供され、typedef &lt;code&gt;element_type&lt;/code&gt; を宣言しますが、メンバー関数はありません。</target>
        </trans-unit>
        <trans-unit id="65a6768970698c58445ab21fb7c4dc1771866f7c" translate="yes" xml:space="preserve">
          <source>2) Static or thread-local object of class type that is initialized by a constructor call, if the constructor is &lt;a href=&quot;constexpr&quot;&gt;constexpr&lt;/a&gt; and all constructor arguments (including implicit conversions) are &lt;a href=&quot;constant_expression&quot;&gt;constant expressions&lt;/a&gt;, and if the initializers in the constructor's initializer list and the brace-or-equal initializers of the class members only contain constant expressions.</source>
          <target state="translated">2）コンストラクターが&lt;a href=&quot;constexpr&quot;&gt;constexprで&lt;/a&gt;あり、すべてのコンストラクター引数（暗黙の変換を含む）が&lt;a href=&quot;constant_expression&quot;&gt;定数式&lt;/a&gt;であり、コンストラクターの初期化子リスト内のイニシャライザと中括弧がある場合、コンストラクター呼び出しによって初期化されるクラス型の静的またはスレッドローカルオブジェクトクラスメンバーのor-equal初期化子には定数式のみが含まれます。</target>
        </trans-unit>
        <trans-unit id="9ec197091834ee7983cb09b5df85878fb3b9ec6c" translate="yes" xml:space="preserve">
          <source>2) Suitably declared &lt;a href=&quot;name#Unqualified_identifiers&quot;&gt;unqualified identifiers&lt;/a&gt; (e.g. &lt;code&gt;n&lt;/code&gt; or &lt;code&gt;cout&lt;/code&gt;)</source>
          <target state="translated">2）適切に宣言された&lt;a href=&quot;name#Unqualified_identifiers&quot;&gt;非修飾識別子&lt;/a&gt;（例： &lt;code&gt;n&lt;/code&gt; または &lt;code&gt;cout&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b9af18f09c2ee1b5cddd8be9c39c6ceeb0373660" translate="yes" xml:space="preserve">
          <source>2) Swaps the arrays &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;. In effect calls &lt;code&gt;&lt;a href=&quot;swap_ranges&quot;&gt;std::swap_ranges&lt;/a&gt;(a, a+N, b)&lt;/code&gt;. This overload does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;../types/is_swappable&quot;&gt;std::is_swappable_v&lt;/a&gt;&amp;lt;T2&amp;gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.(since C++17)</source>
          <target state="translated">2）配列 &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; を交換します。実際には、 &lt;code&gt;&lt;a href=&quot;swap_ranges&quot;&gt;std::swap_ranges&lt;/a&gt;(a, a+N, b)&lt;/code&gt; 呼び出します。 &lt;code&gt;&lt;a href=&quot;../types/is_swappable&quot;&gt;std::is_swappable_v&lt;/a&gt;&amp;lt;T2&amp;gt;&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; でない限り、このオーバーロードはオーバーロードの解決に参加しません。（C ++ 17以降）</target>
        </trans-unit>
        <trans-unit id="3079d4646f618c386a0708d5fd966b77ead14111" translate="yes" xml:space="preserve">
          <source>2) The</source>
          <target state="translated">2)の</target>
        </trans-unit>
        <trans-unit id="b793c688c914f8efd311b91fa7fe03541be021f3" translate="yes" xml:space="preserve">
          <source>2) The &lt;code&gt;enable_view&lt;/code&gt; variable template is used to indicate that whether a &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; is a &lt;code&gt;&lt;a href=&quot;../range/view&quot;&gt;View&lt;/a&gt;&lt;/code&gt;, as follows:</source>
          <target state="translated">2）次のように、 &lt;code&gt;enable_view&lt;/code&gt; 変数テンプレートは、&lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;&lt;a href=&quot;../range/view&quot;&gt;View&lt;/a&gt;&lt;/code&gt; であるかどうかを示すために使用されます。</target>
        </trans-unit>
        <trans-unit id="950c7bd5b13b8129416b8148a9c0282c83ea9997" translate="yes" xml:space="preserve">
          <source>2) The &lt;code&gt;explicit&lt;/code&gt; specifier may be used with a constant expression. The function is explicit if and only if that constant expression evaluates to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;explicit&lt;/code&gt; 指定子は定数式で使用できます。その定数式が &lt;code&gt;true&lt;/code&gt; に評価される場合にのみ、関数は明示的です。</target>
        </trans-unit>
        <trans-unit id="b4767755beb1e73cb3990ecf20a0c7d3d41705d3" translate="yes" xml:space="preserve">
          <source>2) The &lt;code&gt;register&lt;/code&gt; specifier is only allowed for objects declared at block scope and in function parameter lists. It indicates automatic storage duration, which is the default for these kinds of declarations. Additionally, the presence of this keyword may be used as a hint for the optimizer to store the value of this variable in a CPU register. This keyword was deprecated in C++11.</source>
          <target state="translated">2） &lt;code&gt;register&lt;/code&gt; 指定子は、ブロックスコープおよび関数パラメーターリストで宣言されたオブジェクトに対してのみ許可されます。自動保存期間を示します。これは、これらの種類の宣言のデフォルトです。さらに、このキーワードの存在は、オプティマイザがこの変数の値をCPUレジスタに格納するためのヒントとして使用できます。このキーワードはC ++ 11で廃止されました。</target>
        </trans-unit>
        <trans-unit id="8290887e0e90e327b45b2d6d2c9b24ed2b76d9cf" translate="yes" xml:space="preserve">
          <source>2) The b distribution parameter (scale).</source>
          <target state="translated">2)bの分布パラメータ(スケール)。</target>
        </trans-unit>
        <trans-unit id="1a6f30ed216fc867166296b947e88c6b600594a5" translate="yes" xml:space="preserve">
          <source>2) The base class version of this function has no effect. The derived classes may override this function in order to be informed about the changes of the locale. The derived class may cache the locale and member facets between calls to &lt;code&gt;imbue()&lt;/code&gt;.</source>
          <target state="translated">2）この関数の基本クラスバージョンは無効です。派生クラスは、ロケールの変更について通知を受けるために、この関数をオーバーライドする場合があります。派生クラスは、 &lt;code&gt;imbue()&lt;/code&gt; の呼び出し間のロケールとメンバーファセットをキャッシュする場合があります。</target>
        </trans-unit>
        <trans-unit id="14f9537c60c7b804288e7d756fa9eea92d2a2a54" translate="yes" xml:space="preserve">
          <source>2) The base class version of this function has no effect. The derived classes may override this function to allow absolute positioning of the position indicator.</source>
          <target state="translated">2)この関数の基底クラス版には何の影響もありません。派生クラスでは、この関数をオーバーライドして、位置指示器の絶対配置を可能にすることができます。</target>
        </trans-unit>
        <trans-unit id="9210537b543c7ccb676ed8876ffff77435659859" translate="yes" xml:space="preserve">
          <source>2) The base class version of this function has no effect. The derived classes may override this function to allow relative positioning of the position indicator.</source>
          <target state="translated">2)この関数の基底クラス版には何の影響もありません。派生クラスは、この関数をオーバーライドして、位置指示器の相対的な位置決めを可能にすることができます。</target>
        </trans-unit>
        <trans-unit id="489cbc60d9e4ff2e05e82f993298aae5d533030c" translate="yes" xml:space="preserve">
          <source>2) The base class version of this function has no effect. The derived classes may override this function to allow removal or replacement of the controlled character sequence (the buffer) with a user-provided array, or for any other implementation-specific purpose.</source>
          <target state="translated">2)この関数の基底クラス版には何の影響もありません。派生クラスはこの関数をオーバーライドして、制御されている文字列(バッファ)をユーザが提供した配列で削除したり置き換えたりすることができます。</target>
        </trans-unit>
        <trans-unit id="de1ce89e13aae48a39f38fea924ee26418e5a148" translate="yes" xml:space="preserve">
          <source>2) The base class version of this function has no effect. The derived classes may override this function to allow synchronizing the underlying device with the buffers.</source>
          <target state="translated">2)この関数の基底クラス版には何の影響もありません。派生クラスはこの関数をオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="9fe09d21a907cdcf7d545368a26b8685b7df2a85" translate="yes" xml:space="preserve">
          <source>2) The caller attempts to putback a different character from the one retrieved earlier (&lt;code&gt;pbackfail()&lt;/code&gt; is called with the character that needs to be put back), in which case</source>
          <target state="translated">2）呼び出し元が、以前に取得した文字とは異なる文字をプットバックしようとします（ &lt;code&gt;pbackfail()&lt;/code&gt; が、プットバックする必要がある文字で呼び出されます）。この場合、</target>
        </trans-unit>
        <trans-unit id="9f5d083c5637aa1678ab08f5602c6f753d6d8e5b" translate="yes" xml:space="preserve">
          <source>2) The caller attempts to putback a different character from the one retrieved earlier (&lt;code&gt;pbackfail()&lt;/code&gt; is called with the character that needs to be put back). In this situation, the purpose of &lt;code&gt;pbackfail()&lt;/code&gt; is to place the character &lt;code&gt;c&lt;/code&gt; into the get area at the position just before &lt;a href=&quot;gptr&quot;&gt;&lt;code&gt;basic_streambuf::gptr()&lt;/code&gt;&lt;/a&gt;, and, if possible, to modify the associated character sequence to reflect this change. This may involve backing up the get area as in the first variant.</source>
          <target state="translated">2）呼び出し元は、以前に取得した文字とは異なる文字をプットバックしようとします（ &lt;code&gt;pbackfail()&lt;/code&gt; は、プットバックする必要がある文字で呼び出されます）。この状況で、 &lt;code&gt;pbackfail()&lt;/code&gt; の目的は、文字 &lt;code&gt;c&lt;/code&gt; を&lt;a href=&quot;gptr&quot;&gt; &lt;code&gt;basic_streambuf::gptr()&lt;/code&gt; &lt;/a&gt;直前の位置に配置し、可能であれば、関連する文字シーケンスを変更してこの変更を反映することです。これには、最初のバリアントと同様に、get領域のバックアップが含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="7cc89399707702f1779e5368a5c0ea82b8b2ae57" translate="yes" xml:space="preserve">
          <source>2) The concept &lt;code&gt;StrictTotallyOrderedWith&amp;lt;T, U&amp;gt;&lt;/code&gt; specifies that the comparison operators &lt;code&gt;==,!=,&amp;lt;,&amp;gt;,&amp;lt;=,&amp;gt;=&lt;/code&gt; on (possibly mixed) &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; operands yield results consistent with a strict total order. Comparing mixed operands yields results equivalent to comparing the operands converted to their common type.</source>
          <target state="translated">2）概念 &lt;code&gt;StrictTotallyOrderedWith&amp;lt;T, U&amp;gt;&lt;/code&gt; は、比較演算子 &lt;code&gt;==,!=,&amp;lt;,&amp;gt;,&amp;lt;=,&amp;gt;=&lt;/code&gt; が（混合される可能性がある） &lt;code&gt;T&lt;/code&gt; オペランドと &lt;code&gt;U&lt;/code&gt; オペランドが厳密な合計順序と一致する結果を生成することを指定します。混合オペランドを比較すると、共通の型に変換されたオペランドを比較するのと同等の結果が得られます。</target>
        </trans-unit>
        <trans-unit id="f1e8c720cabc3e6d248f5d6b3fbe38dd3202d194" translate="yes" xml:space="preserve">
          <source>2) The copy assignment operator is deleted; &lt;code&gt;basic_filebuf&lt;/code&gt; is not &lt;a href=&quot;../../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;.</source>
          <target state="translated">2）コピー割り当て演算子が削除されます。 &lt;code&gt;basic_filebuf&lt;/code&gt; はCopyAssignableではありませ&lt;a href=&quot;../../named_req/copyassignable&quot;&gt;ん&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9a63ad58af1bf84a2a92c4abcc14be43a779582a" translate="yes" xml:space="preserve">
          <source>2) The copy assignment operator is deleted; &lt;code&gt;basic_stringbuf&lt;/code&gt; is not &lt;a href=&quot;../../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;.</source>
          <target state="translated">2）コピー割り当て演算子が削除されます。 &lt;code&gt;basic_stringbuf&lt;/code&gt; は&lt;a href=&quot;../../named_req/copyassignable&quot;&gt;CopyAssignableで&lt;/a&gt;はありません。</target>
        </trans-unit>
        <trans-unit id="d0d21c7d0475cf5df4659c95a45488e713b12ffb" translate="yes" xml:space="preserve">
          <source>2) The copy constructor is defaulted (makes a bitwise copy of the tick count).</source>
          <target state="translated">2)copy コンストラクタはデフォルトです(目盛り数のビット単位のコピーを作成します)。</target>
        </trans-unit>
        <trans-unit id="5e25cd324c0b4b9ecaec01218a96f7b5b9a97d5c" translate="yes" xml:space="preserve">
          <source>2) The copy constructor is deleted: &lt;code&gt;std::seed_seq&lt;/code&gt; is not copyable.</source>
          <target state="translated">2）コピーコンストラクターが削除されます &lt;code&gt;std::seed_seq&lt;/code&gt; はコピーできません。</target>
        </trans-unit>
        <trans-unit id="08ad7891ad7f0d7821788e8bf342fd9ee9291913" translate="yes" xml:space="preserve">
          <source>2) The copy constructor is deleted; &lt;code&gt;&lt;a href=&quot;../atomic_flag&quot;&gt;std::atomic_flag&lt;/a&gt;&lt;/code&gt; is not copyable.</source>
          <target state="translated">2）コピーコンストラクターが削除されます。 &lt;code&gt;&lt;a href=&quot;../atomic_flag&quot;&gt;std::atomic_flag&lt;/a&gt;&lt;/code&gt; はコピーできません。</target>
        </trans-unit>
        <trans-unit id="17290718c8349e1e2c025dae201d8975e42af596" translate="yes" xml:space="preserve">
          <source>2) The copy constructor is deleted; &lt;code&gt;std::basic_filebuf&lt;/code&gt; is not &lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;</source>
          <target state="translated">2）コピーコンストラクターが削除されます。 &lt;code&gt;std::basic_filebuf&lt;/code&gt; はCopyConstructibleではありませ&lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;ん&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="eefd9b2d10ed93c62bbd922dbbaad8de45efe224" translate="yes" xml:space="preserve">
          <source>2) The copy constructor is protected, and is deleted. Input streams are not copyable.</source>
          <target state="translated">2)コピーコンストラクタは保護されており、削除されます。入力ストリームはコピーできません。</target>
        </trans-unit>
        <trans-unit id="a2c4271a1901edd678bd8ec31a1788d4eb0a2900" translate="yes" xml:space="preserve">
          <source>2) The copy constructor is protected, and is deleted. Output streams are not copyable.</source>
          <target state="translated">2)コピーコンストラクタは保護されており、削除されます。出力ストリームはコピーできません。</target>
        </trans-unit>
        <trans-unit id="cfe26d4fa627a1587125f8a89a2ee75c1a944b93" translate="yes" xml:space="preserve">
          <source>2) The default constructor is protected: only derived classes may construct &lt;code&gt;std::ios_base&lt;/code&gt;. The internal state is undefined after the construction. The derived class must call &lt;a href=&quot;../basic_ios/init&quot;&gt;&lt;code&gt;basic_ios::init()&lt;/code&gt;&lt;/a&gt; to complete initialization before first use or before destructor; otherwise the behavior is undefined.</source>
          <target state="translated">2）デフォルトのコンストラクタは保護されています。派生クラスのみが &lt;code&gt;std::ios_base&lt;/code&gt; 構築できます。構築後の内部状態は未定義です。派生クラスは、&lt;a href=&quot;../basic_ios/init&quot;&gt; &lt;code&gt;basic_ios::init()&lt;/code&gt; &lt;/a&gt;を呼び出して、最初の使用前またはデストラクタの前に初期化を完了する必要があります。それ以外の場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="529a7ebc0c45dfd108d48d65115f536369081f55" translate="yes" xml:space="preserve">
          <source>2) The definition of an inline function or variable(since C++17) must be present in the translation unit where it is accessed (not necessarily before the point of access).</source>
          <target state="translated">2)インライン関数または変数(C++17 以降)の定義は、それがアクセスされる変換単位内に存在している必要があります(必ずしもアクセスポイントの前に存在している必要はありません)。</target>
        </trans-unit>
        <trans-unit id="2cd86adb5facff344b42dfbbad25e5bc6252a398" translate="yes" xml:space="preserve">
          <source>2) The deviation &amp;sigma; distribution parameter.</source>
          <target state="translated">2）偏差&amp;sigma;分布パラメーター。</target>
        </trans-unit>
        <trans-unit id="86710c51236c9a5163f0d4a5fa18d71634ee3f9e" translate="yes" xml:space="preserve">
          <source>2) The execution policy type used as a unique type to disambiguate parallel algorithm overloading and indicate that a parallel algorithm's execution may be parallelized. The invocations of element access functions in parallel algorithms invoked with this policy (usually specified as &lt;code&gt;&lt;a href=&quot;execution_policy_tag&quot;&gt;std::execution::par&lt;/a&gt;&lt;/code&gt;) are permitted to execute in either the invoking thread or in a thread implicitly created by the library to support parallel algorithm execution. Any such invocations executing in the same thread are indeterminately sequenced with respect to each other.</source>
          <target state="translated">2）並列ポリシーのオーバーロードを明確にし、並列アルゴリズムの実行が並列化される可能性があることを示すために一意のタイプとして使用される実行ポリシータイプ。このポリシー（通常は &lt;code&gt;&lt;a href=&quot;execution_policy_tag&quot;&gt;std::execution::par&lt;/a&gt;&lt;/code&gt; として指定）で呼び出された並列アルゴリズムでの要素アクセス関数の呼び出しは、呼び出し側のスレッド、または並列アルゴリズムの実行をサポートするためにライブラリによって暗黙的に作成されたスレッドで実行できます。同じスレッドで実行されるそのような呼び出しは、相互に不確定にシーケンスされます。</target>
        </trans-unit>
        <trans-unit id="96746981c0d5232419ee12cdfeeb5a231b82c80f" translate="yes" xml:space="preserve">
          <source>2) The exponent syntax for hexadecimal floating-point literal</source>
          <target state="translated">2)16進数浮動小数点リテラルの指数構文</target>
        </trans-unit>
        <trans-unit id="cbf30cf8905eae41f89d2b7e6cf429ccc5aa78e4" translate="yes" xml:space="preserve">
          <source>2) The expression &lt;code&gt;view::filter(E, P)&lt;/code&gt; is</source>
          <target state="translated">2）式 &lt;code&gt;view::filter(E, P)&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="b5c63534cd94f69bdc3e117d5503a36fbc1dda7a" translate="yes" xml:space="preserve">
          <source>2) The expression of a &lt;a href=&quot;decltype&quot;&gt;decltype&lt;/a&gt;-specifier:</source>
          <target state="translated">2）&lt;a href=&quot;decltype&quot;&gt;decltype -specifier&lt;/a&gt;の式：</target>
        </trans-unit>
        <trans-unit id="4739a2426c595a401e800dc1225729611896ba2f" translate="yes" xml:space="preserve">
          <source>2) The first operand must be an expression of pointer to complete class type &lt;code&gt;T*&lt;/code&gt;.</source>
          <target state="translated">2）最初のオペランドは、完全なクラス型 &lt;code&gt;T*&lt;/code&gt; へのポインターの式でなければなりません。</target>
        </trans-unit>
        <trans-unit id="f2af795c7d5bb9f0a87c417eb44bb2189e5facca" translate="yes" xml:space="preserve">
          <source>2) The form with brace-enclosed list inside the square brackets is only used to call an overloaded &lt;code&gt;operator[]&lt;/code&gt;</source>
          <target state="translated">2）角かっこ内に中かっこで囲まれたリストを含むフォームは、多重定義された &lt;code&gt;operator[]&lt;/code&gt; を呼び出すためにのみ使用されます[]</target>
        </trans-unit>
        <trans-unit id="dd6b710a6029adf010e772119c69ce0fcd260658" translate="yes" xml:space="preserve">
          <source>2) The format character sequence is defined by the characters in &lt;code&gt;fmt&lt;/code&gt;. The resulting character sequence is copied to &lt;code&gt;out&lt;/code&gt;.</source>
          <target state="translated">2）フォーマット文字シーケンスは、 &lt;code&gt;fmt&lt;/code&gt; の文字によって定義されます。結果の文字シーケンスは &lt;code&gt;out&lt;/code&gt; にコピーされます。</target>
        </trans-unit>
        <trans-unit id="8f0e2f66751993cfa31f02e0999c593fdd8fa23c" translate="yes" xml:space="preserve">
          <source>2) The input is performed as a series of simple formatted extractions. Whitespace skipping is the same for each of them.</source>
          <target state="translated">2)入力はシンプルなフォーマットの一連の抽出物として実行されます。空白スキップはそれぞれ同じです。</target>
        </trans-unit>
        <trans-unit id="208b880632c15b8a0391499a7047133f8c2cbfa2" translate="yes" xml:space="preserve">
          <source>2) The k distribution parameter.</source>
          <target state="translated">2)k 分布パラメータ。</target>
        </trans-unit>
        <trans-unit id="97953aa781e3453c2f633e5ab6cd39cc03c48465" translate="yes" xml:space="preserve">
          <source>2) The list of probability densities at the boundaries of the intervals.</source>
          <target state="translated">2)間隔の境界にある確率密度のリスト。</target>
        </trans-unit>
        <trans-unit id="10593803365fb6897be674b2da020e1166ff0c08" translate="yes" xml:space="preserve">
          <source>2) The list of probability densities of the intervals.</source>
          <target state="translated">2)間隔の確率密度のリスト。</target>
        </trans-unit>
        <trans-unit id="a48f0fe6e25df28c9399e861a734cfa34f2cea35" translate="yes" xml:space="preserve">
          <source>2) The log-deviation s distribution parameter.</source>
          <target state="translated">2)対数偏差sの分布パラメータ。</target>
        </trans-unit>
        <trans-unit id="0c46a443ec6b4f56f41d8d853075c97ec49a517e" translate="yes" xml:space="preserve">
          <source>2) The members declared after the specifier have protected member access</source>
          <target state="translated">2)指定子の後に宣言されたメンバーは、保護されたメンバーアクセスを持っています。</target>
        </trans-unit>
        <trans-unit id="b7753c2a669f5dcffda1888b9670b0695adb2af3" translate="yes" xml:space="preserve">
          <source>2) The move assignment operator exchanges all data members of the base class, except for &lt;code&gt;rdbuf()&lt;/code&gt;, with &lt;code&gt;rhs&lt;/code&gt;, as if by calling &lt;code&gt;swap(*rhs)&lt;/code&gt;. This move assignment operator is protected: it is only called by the move assignment operators of the derived movable output stream classes &lt;code&gt;&lt;a href=&quot;../basic_ofstream&quot;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../basic_ostringstream&quot;&gt;std::basic_ostringstream&lt;/a&gt;&lt;/code&gt;, which know how to correctly move-assign the associated streambuffers.</source>
          <target state="translated">2）を除く移動代入演算子交換基本クラスのすべてのデータメンバー、 &lt;code&gt;rdbuf()&lt;/code&gt; と、 &lt;code&gt;rhs&lt;/code&gt; かのように呼び出すことにより、 &lt;code&gt;swap(*rhs)&lt;/code&gt; 。この移動割り当て演算子は保護されています。関連するストリーム &lt;code&gt;&lt;a href=&quot;../basic_ofstream&quot;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt; を正しく移動割り当てする方法を知っている、派生した移動可能な出力ストリームクラスstd :: basic_ofstreamおよび &lt;code&gt;&lt;a href=&quot;../basic_ostringstream&quot;&gt;std::basic_ostringstream&lt;/a&gt;&lt;/code&gt; の移動割り当て演算子によってのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5ce749b0f73c8cb8352129428b67e0a96b2a6a64" translate="yes" xml:space="preserve">
          <source>2) The move assignment operator exchanges the gcount() values and all data members of the base class, except for &lt;code&gt;rdbuf()&lt;/code&gt;, with &lt;code&gt;rhs&lt;/code&gt;, as if by calling &lt;code&gt;swap(*rhs)&lt;/code&gt;. This move assignment operator is protected: it is only called by the move assignment operators of the derived movable input stream classes &lt;code&gt;&lt;a href=&quot;../basic_ifstream&quot;&gt;std::basic_ifstream&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../basic_istringstream&quot;&gt;std::basic_istringstream&lt;/a&gt;&lt;/code&gt;, which know how to correctly move-assign the associated streambuffers.</source>
          <target state="translated">2）割り当ての移動演算子は、 &lt;code&gt;swap(*rhs)&lt;/code&gt; を呼び出すのと同じように、 &lt;code&gt;rdbuf()&lt;/code&gt; を除き、基本クラスのgcount（）値とすべてのデータメンバーを &lt;code&gt;rhs&lt;/code&gt; と交換します。この移動割り当て演算子は保護されています。関連するストリーム &lt;code&gt;&lt;a href=&quot;../basic_ifstream&quot;&gt;std::basic_ifstream&lt;/a&gt;&lt;/code&gt; を正しく移動割り当てする方法を知っている、派生した移動可能な入力ストリームクラスstd :: basic_ifstreamおよび &lt;code&gt;&lt;a href=&quot;../basic_istringstream&quot;&gt;std::basic_istringstream&lt;/a&gt;&lt;/code&gt; の移動割り当て演算子によってのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="cb032184de4bbe34484b6d70d20a6e29f4d859c6" translate="yes" xml:space="preserve">
          <source>2) The n (the second degree of freedom) distribution parameter.</source>
          <target state="translated">2)n(2次自由度)の分布パラメータ。</target>
        </trans-unit>
        <trans-unit id="99aa6ef75bd26ba2de70b65023abcfea43c79ddd" translate="yes" xml:space="preserve">
          <source>2) The name of the &lt;code&gt;std::chrono::time_zone&lt;/code&gt; for which this &lt;code&gt;link&lt;/code&gt; object provides an alternative name.</source>
          <target state="translated">2）この &lt;code&gt;link&lt;/code&gt; オブジェクトが代替名を提供する &lt;code&gt;std::chrono::time_zone&lt;/code&gt; 名前。</target>
        </trans-unit>
        <trans-unit id="7fad383a36eccd125aeacc9525f3bf6c33c8a7df" translate="yes" xml:space="preserve">
          <source>2) The new pointer offset &lt;code&gt;newoff&lt;/code&gt; of type &lt;code&gt;off_type&lt;/code&gt; is determined</source>
          <target state="translated">2）新たなポインタオフセット &lt;code&gt;newoff&lt;/code&gt; 型の &lt;code&gt;off_type&lt;/code&gt; が決定されます</target>
        </trans-unit>
        <trans-unit id="5aec990e14101c0bcd77f4e22cf6a7cfb2367418" translate="yes" xml:space="preserve">
          <source>2) The non-member &lt;code&gt;any_cast&lt;/code&gt; functions provide type-safe access to the contained object.</source>
          <target state="translated">2）非メンバーの &lt;code&gt;any_cast&lt;/code&gt; 関数は、含まれるオブジェクトへのタイプセーフなアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="582c67ddf6f62ce1c1ef7f0f690cb6a06c0edb34" translate="yes" xml:space="preserve">
          <source>2) The number of uncaught exception objects in the current thread.</source>
          <target state="translated">2)現在のスレッドで捕捉されていない例外オブジェクトの数。</target>
        </trans-unit>
        <trans-unit id="7f51319659c9a755cf2ce8b0c57e0fcc6d543174" translate="yes" xml:space="preserve">
          <source>2) The old value of the iterator.</source>
          <target state="translated">2)イテレータの古い値。</target>
        </trans-unit>
        <trans-unit id="dff5eafdffdb27565dbaeb4c69f6dd5798db7cee" translate="yes" xml:space="preserve">
          <source>2) The overload that does not take a &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; parameter throws &lt;a href=&quot;filesystem_error&quot;&gt;&lt;code&gt;filesystem_error&lt;/code&gt;&lt;/a&gt; on underlying OS API errors, constructed with &lt;code&gt;p&lt;/code&gt; as the first path argument and the OS error code as the error code argument. The overload taking a &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; parameter sets it to the OS API error code if an OS API call fails, and executes &lt;code&gt;ec.clear()&lt;/code&gt; if no errors occur. Any overload not marked &lt;code&gt;noexcept&lt;/code&gt; may throw &lt;code&gt;&lt;a href=&quot;../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; if memory allocation fails.</source>
          <target state="translated">2） &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; パラメーターをとらないオーバーロードは、最初のパス引数として &lt;code&gt;p&lt;/code&gt; を使用し、エラーコード引数としてOSエラーコードを使用して構築された、基になるOS APIエラーに対して&lt;a href=&quot;filesystem_error&quot;&gt; &lt;code&gt;filesystem_error&lt;/code&gt; &lt;/a&gt;をスローします。 &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; ＆パラメータを取るオーバーロードは、OS API呼び出しが失敗した場合にOS APIエラーコードに設定し、エラーが発生しない場合は &lt;code&gt;ec.clear()&lt;/code&gt; を実行します。 &lt;code&gt;noexcept&lt;/code&gt; とマークされていないオーバーロードは、メモリの割り当てに失敗した場合に &lt;code&gt;&lt;a href=&quot;../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; スローする可能性があります。</target>
        </trans-unit>
        <trans-unit id="83271095603ab7c6322a5e8f3914d379855a298a" translate="yes" xml:space="preserve">
          <source>2) The overload that does not take a &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; parameter throws &lt;a href=&quot;filesystem_error&quot;&gt;&lt;code&gt;filesystem_error&lt;/code&gt;&lt;/a&gt; on underlying OS API errors, constructed with &lt;code&gt;p&lt;/code&gt; as the first path argument, &lt;code&gt;existing_p&lt;/code&gt; as the second path argument, and the OS error code as the error code argument. The overload taking a &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; parameter sets it to the OS API error code if an OS API call fails, and executes &lt;code&gt;ec.clear()&lt;/code&gt; if no errors occur. Any overload not marked &lt;code&gt;noexcept&lt;/code&gt; may throw &lt;code&gt;&lt;a href=&quot;../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; if memory allocation fails.</source>
          <target state="translated">2） &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; パラメーターをとらないオーバーロードは、最初のパス引数として &lt;code&gt;p&lt;/code&gt; 、2番目のパス引数として &lt;code&gt;existing_p&lt;/code&gt; 、エラーコード引数としてOSエラーコードで構築された、基になるOS APIエラーに対して&lt;a href=&quot;filesystem_error&quot;&gt; &lt;code&gt;filesystem_error&lt;/code&gt; &lt;/a&gt;をスローします。 &lt;code&gt;&lt;a href=&quot;../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; ＆パラメータを取るオーバーロードは、OS API呼び出しが失敗した場合にOS APIエラーコードに設定し、エラーが発生しない場合は &lt;code&gt;ec.clear()&lt;/code&gt; を実行します。 &lt;code&gt;noexcept&lt;/code&gt; とマークされていないオーバーロードは、メモリの割り当てに失敗した場合に &lt;code&gt;&lt;a href=&quot;../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; スローする可能性があります。</target>
        </trans-unit>
        <trans-unit id="fedfe40539ff845ce724bcdefe4c0b4b5d1b5ab2" translate="yes" xml:space="preserve">
          <source>2) The pointer to the current character (</source>
          <target state="translated">2)現在の文字へのポインタ (</target>
        </trans-unit>
        <trans-unit id="69cbd3e5e4d3a9ed59133e0252cfe374d2de3548" translate="yes" xml:space="preserve">
          <source>2) The previous value of the iterator.</source>
          <target state="translated">2)イテレータの前の値。</target>
        </trans-unit>
        <trans-unit id="561da9d0b8eb74564b3a716e4ed759c78b513270" translate="yes" xml:space="preserve">
          <source>2) The program is ill-formed if &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;T, U&amp;amp;&amp;gt;&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;T, U&amp;amp;&amp;gt;&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合、プログラムの形式が正しくありません。</target>
        </trans-unit>
        <trans-unit id="eca0f0583779e3e634f1c30803b6db16b0c89fa9" translate="yes" xml:space="preserve">
          <source>2) The random number generator is the function object &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">2）乱数ジェネレーターは関数オブジェクト &lt;code&gt;r&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="35e25ae4654ad718f8a3bffc69a7bad39d1064e8" translate="yes" xml:space="preserve">
          <source>2) The reference stored as value in the shared state.</source>
          <target state="translated">2)共有状態で値として格納されている参照。</target>
        </trans-unit>
        <trans-unit id="4dd94f6e52cf209cce4446ec0ad840b5d75fceea" translate="yes" xml:space="preserve">
          <source>2) The relative form of the path</source>
          <target state="translated">2)パスの相対的な形</target>
        </trans-unit>
        <trans-unit id="14e40c14e23a63774678bf09d3818d732824ff47" translate="yes" xml:space="preserve">
          <source>2) The result of &lt;a href=&quot;https://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;left fold&lt;/a&gt; of the given range over &lt;code&gt;op&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;op&lt;/code&gt; での指定範囲の&lt;a href=&quot;https://en.wikipedia.org/wiki/Fold_(higher-order_function)&quot;&gt;左フォールド&lt;/a&gt;の結果</target>
        </trans-unit>
        <trans-unit id="3381c306fe1c5e44690c74135fdd2c831b92183b" translate="yes" xml:space="preserve">
          <source>2) The result of &lt;code&gt;!lhs.equal(rhs)&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;!lhs.equal(rhs)&lt;/code&gt; ）の結果。</target>
        </trans-unit>
        <trans-unit id="7078d6b39da2557d2cfb099d99aaeab3db9616ea" translate="yes" xml:space="preserve">
          <source>2) The resulting absolute position as defined by the position indicator. The base class version returns &lt;code&gt;pos_type(off_type(-1))&lt;/code&gt;.</source>
          <target state="translated">2）位置インジケータによって定義された結果の絶対位置。基本クラスバージョンは &lt;code&gt;pos_type(off_type(-1))&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0e07d028ef438d861afc0f1edd39bd5977ee4657" translate="yes" xml:space="preserve">
          <source>2) The return type is &lt;code&gt;R&lt;/code&gt;. If &lt;code&gt;R&lt;/code&gt; is (possibly cv-qualified) &lt;code&gt;void&lt;/code&gt;, the result of the &lt;code&gt;invoke&lt;/code&gt; expression is discarded.</source>
          <target state="translated">2）戻り型は &lt;code&gt;R&lt;/code&gt; です。場合 &lt;code&gt;R&lt;/code&gt; は（おそらくCV修飾）である &lt;code&gt;void&lt;/code&gt; の結果 &lt;code&gt;invoke&lt;/code&gt; 式が破棄されます。</target>
        </trans-unit>
        <trans-unit id="181a8cbb0dd338fa6fde71b3b9f2a20764e605be" translate="yes" xml:space="preserve">
          <source>2) The return type meets the requirements of constant &lt;a href=&quot;../../named_req/randomaccessiterator&quot;&gt;LegacyRandomAccessIterator&lt;/a&gt;.</source>
          <target state="translated">2）戻り値の型は、定数&lt;a href=&quot;../../named_req/randomaccessiterator&quot;&gt;LegacyRandomAccessIteratorの&lt;/a&gt;要件を満たしています。</target>
        </trans-unit>
        <trans-unit id="c42ab30e0dcd2fd028e8b3702d8a26313fc2f43e" translate="yes" xml:space="preserve">
          <source>2) The stored pointer, i.e., &lt;code&gt;get()&lt;/code&gt;</source>
          <target state="translated">2）格納されたポインタ、つまり &lt;code&gt;get()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a5d5eedbfa032d05689dff895c55d7f69642213" translate="yes" xml:space="preserve">
          <source>2) The t distribution parameter.</source>
          <target state="translated">2)t分布パラメータ。</target>
        </trans-unit>
        <trans-unit id="90f6ebb11f7b879e1a2203264460377befcb1ed5" translate="yes" xml:space="preserve">
          <source>2) The transformed &lt;code&gt;A&lt;/code&gt; can be another pointer or pointer to member type that can be converted to the deduced &lt;code&gt;A&lt;/code&gt; via a &lt;a href=&quot;implicit_cast#Qualification_conversions&quot;&gt;qualification conversions&lt;/a&gt;or a function pointer conversion(since C++17):</source>
          <target state="translated">2）形質転換された &lt;code&gt;A&lt;/code&gt; は、推定に変換することができるメンバー型に別のポインタまたはポインタとすることができる &lt;code&gt;A&lt;/code&gt; を介して&lt;a href=&quot;implicit_cast#Qualification_conversions&quot;&gt;資格変換&lt;/a&gt; C ++ 17以降または関数ポインタ変換（）：</target>
        </trans-unit>
        <trans-unit id="07df329930b026a6f5fd1751d93dbb43466ead78" translate="yes" xml:space="preserve">
          <source>2) The underlying iterator is initialized with &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">2）基礎となるイテレーターは &lt;code&gt;x&lt;/code&gt; で初期化されます。</target>
        </trans-unit>
        <trans-unit id="7f5f72f52c7e8c564188399cb1ef1e5c4a31bca9" translate="yes" xml:space="preserve">
          <source>2) The value of the</source>
          <target state="translated">2)の値は</target>
        </trans-unit>
        <trans-unit id="b137e4833770fca0acf1fbd8939ba1635543491d" translate="yes" xml:space="preserve">
          <source>2) The value of the b parameter.</source>
          <target state="translated">2)b パラメータの値。</target>
        </trans-unit>
        <trans-unit id="246b1340a1e80fa9e2f300866c54dea20d6847c5" translate="yes" xml:space="preserve">
          <source>2) The version of this function in the specialization of &lt;code&gt;&lt;a href=&quot;../pointer_traits&quot;&gt;std::pointer_traits&lt;/a&gt;&lt;/code&gt; for pointer types returns &lt;code&gt;&lt;a href=&quot;../addressof&quot;&gt;std::addressof&lt;/a&gt;(r)&lt;/code&gt;</source>
          <target state="translated">2）ポインタ型の &lt;code&gt;&lt;a href=&quot;../pointer_traits&quot;&gt;std::pointer_traits&lt;/a&gt;&lt;/code&gt; 特殊化におけるこの関数のバージョンは、 &lt;code&gt;&lt;a href=&quot;../addressof&quot;&gt;std::addressof&lt;/a&gt;(r)&lt;/code&gt; （r）を返します</target>
        </trans-unit>
        <trans-unit id="7dc2591abff722b9450a8c74df7c5f201c0d140c" translate="yes" xml:space="preserve">
          <source>2) Then attempts to classify the character in the imbued locale by calling &lt;code&gt;&lt;a href=&quot;../../locale/use_facet&quot;&gt;std::use_facet&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../locale/ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;CharT&amp;gt;&amp;gt;(getloc()).is(m, c)&lt;/code&gt;. If that returned &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt; is returned by &lt;code&gt;isctype()&lt;/code&gt;.</source>
          <target state="translated">2）次に、 &lt;code&gt;&lt;a href=&quot;../../locale/use_facet&quot;&gt;std::use_facet&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../locale/ctype&quot;&gt;std::ctype&lt;/a&gt;&amp;lt;CharT&amp;gt;&amp;gt;(getloc()).is(m, c)&lt;/code&gt; 呼び出して、組み込みロケールで文字を分類しようとします。それが返された場合は &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;true&lt;/code&gt; で返される &lt;code&gt;isctype()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a820a48acae67c57a408630003c72d23b5246a78" translate="yes" xml:space="preserve">
          <source>2) Then, direct base classes are initialized in left-to-right order as they appear in this class's base-specifier list</source>
          <target state="translated">2)そして、直接基底クラスは、このクラスの基底指定子リストに現れるように左から右の順に初期化されます。</target>
        </trans-unit>
        <trans-unit id="4c3eecd413e417961bcb5a2f9c21daa3a6a178a8" translate="yes" xml:space="preserve">
          <source>2) There is no other side effect X to M where A</source>
          <target state="translated">2)他の副作用XからMまではなく、ここでA</target>
        </trans-unit>
        <trans-unit id="a88fc3e49ead65c6e85be6221f3afd1cf04a39d3" translate="yes" xml:space="preserve">
          <source>2) This overload only participates in overload resolution if T is a specialization of std::pair. For &lt;code&gt;T = &lt;a href=&quot;../utility/pair&quot;&gt;std::pair&lt;/a&gt;&amp;lt;T1, T2&amp;gt;&lt;/code&gt;, equivalent to</source>
          <target state="translated">2）このオーバーロードは、Tがstd :: pairの特殊化である場合にのみ、オーバーロードの解決に参加します。以下のための &lt;code&gt;T = &lt;a href=&quot;../utility/pair&quot;&gt;std::pair&lt;/a&gt;&amp;lt;T1, T2&amp;gt;&lt;/code&gt; 、同等に</target>
        </trans-unit>
        <trans-unit id="8efa49525e665271a26732b061954aa9e798e3b4" translate="yes" xml:space="preserve">
          <source>2) Through a</source>
          <target state="translated">2)を介して</target>
        </trans-unit>
        <trans-unit id="397f7293066a1b923f53b2bbda4edb83f5fcee95" translate="yes" xml:space="preserve">
          <source>2) Throws &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;pos&lt;/code&gt; does not correspond to a valid position within the bitset</source>
          <target state="translated">2） &lt;code&gt;pos&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; 内の有効な位置に対応していない場合、std :: out_of_rangeをスローします</target>
        </trans-unit>
        <trans-unit id="fe12b00471782d3abe332b068facbae269da8878" translate="yes" xml:space="preserve">
          <source>2) Throws &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;pos&lt;/code&gt; does not correspond to a valid position within the bitset.</source>
          <target state="translated">2） &lt;code&gt;pos&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; 内の有効な位置に対応しない場合、std :: out_of_rangeをスローします。</target>
        </trans-unit>
        <trans-unit id="e43b7e9cee947139e2e922b0e4d3005ec198aefd" translate="yes" xml:space="preserve">
          <source>2) Throws any exception thrown by the constructor of &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;T&lt;/code&gt; のコンストラクターによってスローされた例外をスローします。</target>
        </trans-unit>
        <trans-unit id="d7de87e6665156bf82e0c82660acd2d3ddcb1982" translate="yes" xml:space="preserve">
          <source>2) Throws nothing</source>
          <target state="translated">2)何も投げない</target>
        </trans-unit>
        <trans-unit id="d5f42bf81f9fa4ac5617a479c682553058d7f909" translate="yes" xml:space="preserve">
          <source>2) Throws nothing.</source>
          <target state="translated">2)何も投げない。</target>
        </trans-unit>
        <trans-unit id="0aa8ff3d596328fb6ad4bd526319cc23a22db45f" translate="yes" xml:space="preserve">
          <source>2) To form a &lt;a href=&quot;pointer&quot;&gt;pointer to non-static member&lt;/a&gt;.</source>
          <target state="translated">2）&lt;a href=&quot;pointer&quot;&gt;非静的メンバーへ&lt;/a&gt;のポインターを形成する。</target>
        </trans-unit>
        <trans-unit id="b4abc5107f2e2f3e76cbfd525f378aead236b0cb" translate="yes" xml:space="preserve">
          <source>2) Trailing return type declaration: trailing return type is only allowed on the outermost function declarator. The decl-specifier-seq in this case must contain the keyword &lt;code&gt;auto&lt;/code&gt;</source>
          <target state="translated">2）末尾の戻り型宣言：末尾の戻り型は、最も外側の関数宣言子でのみ許可されます。この場合のdecl-specifier-seqにはキーワード &lt;code&gt;auto&lt;/code&gt; が含まれている必要があります</target>
        </trans-unit>
        <trans-unit id="302ab7f6af0594883108e1d3845c83b71c408a4a" translate="yes" xml:space="preserve">
          <source>2) Transfers the element pointed to by &lt;code&gt;it&lt;/code&gt; from &lt;code&gt;other&lt;/code&gt; into &lt;code&gt;*this&lt;/code&gt;. The element is inserted before the element pointed to by &lt;code&gt;pos&lt;/code&gt;.</source>
          <target state="translated">2）によって指される要素転送し &lt;code&gt;it&lt;/code&gt; から、 &lt;code&gt;other&lt;/code&gt; に &lt;code&gt;*this&lt;/code&gt; 。要素は、 &lt;code&gt;pos&lt;/code&gt; が指す要素の前に挿入されます。</target>
        </trans-unit>
        <trans-unit id="a1776a89f9cd0f98f22ff560bf94f4fc7cf05476" translate="yes" xml:space="preserve">
          <source>2) Type-based non-throwing accessor: Equivalent to (1) with &lt;code&gt;I&lt;/code&gt; being the zero-based index of &lt;code&gt;T&lt;/code&gt; in &lt;code&gt;Types...&lt;/code&gt;. The call is ill-formed if &lt;code&gt;T&lt;/code&gt; is not a unique element of &lt;code&gt;Types...&lt;/code&gt;.</source>
          <target state="translated">2）タイプベースの非スローアクセサー：（1）と同等で、 &lt;code&gt;I&lt;/code&gt; は &lt;code&gt;Types...&lt;/code&gt; の &lt;code&gt;T&lt;/code&gt; のゼロベースのインデックスです。 &lt;code&gt;T&lt;/code&gt; が &lt;code&gt;Types...&lt;/code&gt; 一意の要素でない場合、呼び出しは不正な形式です。</target>
        </trans-unit>
        <trans-unit id="56276b30aff93b4c918ce9dcc07191cd1b1bd869" translate="yes" xml:space="preserve">
          <source>2) Type-based value accessor: If &lt;code&gt;v&lt;/code&gt; holds the alternative &lt;code&gt;T&lt;/code&gt;, returns a reference to the value stored in &lt;code&gt;v&lt;/code&gt;. Otherwise, throws &lt;code&gt;&lt;a href=&quot;bad_variant_access&quot;&gt;std::bad_variant_access&lt;/a&gt;&lt;/code&gt;. The call is ill-formed if &lt;code&gt;T&lt;/code&gt; is not a unique element of &lt;code&gt;Types...&lt;/code&gt;.</source>
          <target state="translated">2）タイプベースの値アクセサー： &lt;code&gt;v&lt;/code&gt; が代替 &lt;code&gt;T&lt;/code&gt; を保持している場合、 &lt;code&gt;v&lt;/code&gt; に格納されている値への参照を返します。それ以外の場合は、 &lt;code&gt;&lt;a href=&quot;bad_variant_access&quot;&gt;std::bad_variant_access&lt;/a&gt;&lt;/code&gt; スローします。 &lt;code&gt;T&lt;/code&gt; が &lt;code&gt;Types...&lt;/code&gt; 一意の要素でない場合、呼び出しは不正な形式です。</target>
        </trans-unit>
        <trans-unit id="2a28ac043b5a92413f90ca050cb84f25029dc5d9" translate="yes" xml:space="preserve">
          <source>2) UTF-8 character literal, e.g. &lt;code&gt;u8'a'&lt;/code&gt;. Such literal has type &lt;code&gt;char&lt;/code&gt;(until C++20)&lt;code&gt;char8_t&lt;/code&gt;(since C++20) and the value equal to ISO 10646 code point value of c-char, provided that the code point value is representable with a single UTF-8 code unit (that is, c-char is in the range 0x0-0x7F, inclusive). If c-char is not representable with a single UTF-8 code unit, the program is ill-formed.</source>
          <target state="translated">2）UTF-8文字リテラル、たとえば &lt;code&gt;u8'a'&lt;/code&gt; 。このようなリテラルは、タイプ &lt;code&gt;char&lt;/code&gt; （C ++ 20まで） &lt;code&gt;char8_t&lt;/code&gt; （C ++ 20以降）と、コードポイント値が単一のUTF-8コードで表現できる場合、c-charのISO 10646コードポイント値に等しい値を持ちます。ユニット（つまり、c-charは0x0〜0x7Fの範囲にあります）。 c-charが単一のUTF-8コード単位で表現できない場合、プログラムの形式が正しくありません。</target>
        </trans-unit>
        <trans-unit id="be9e88a87a39032aa3c067ba42a4b3d35179387c" translate="yes" xml:space="preserve">
          <source>2) Unary left fold (... op E) becomes (((E</source>
          <target state="translated">2)単項左折(...op E)は (((E)になる)</target>
        </trans-unit>
        <trans-unit id="41961fb00708d365837720af730227f1e7508793" translate="yes" xml:space="preserve">
          <source>2) Underflow occurs (and &lt;code&gt;&lt;a href=&quot;../../numeric/fenv/fe_exceptions&quot;&gt;FE_UNDERFLOW&lt;/a&gt;&lt;/code&gt; may be raised) if after the rounding of the result to the target floating-point type (that is, rounding to &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::digits&lt;/code&gt; bits), the result's absolute value is smaller than &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::min()&lt;/code&gt;. Formally, the absolute value of a nonzero result computed as though the exponent range were unbounded is smaller than &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::min()&lt;/code&gt;. Such implementation detects tinyness after rounding (e.g. SuperSparc)</source>
          <target state="translated">2）結果をターゲット浮動小数点型に丸めた後（つまり、 &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::digits&lt;/code&gt; &amp;lt;T&amp;gt; :: digitsビットに丸めた後）に、アンダーフローが発生し（ &lt;code&gt;&lt;a href=&quot;../../numeric/fenv/fe_exceptions&quot;&gt;FE_UNDERFLOW&lt;/a&gt;&lt;/code&gt; が発生する場合があります）、結果の絶対値が小さい &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::min()&lt;/code&gt; 分&amp;lt;T&amp;gt; ::（） 。正式には、指数範囲が無制限であるかのように計算されたゼロ以外の結果の絶対値は、 &lt;code&gt;&lt;a href=&quot;../numeric_limits&quot;&gt;std::numeric_limits&lt;/a&gt;&amp;lt;T&amp;gt;::min()&lt;/code&gt; &amp;lt;T&amp;gt; :: min（）より小さいです。このような実装は、丸め後の極小を検出します（例：SuperSparc）</target>
        </trans-unit>
        <trans-unit id="056c7ca31755058b072f2f89c93270a864830745" translate="yes" xml:space="preserve">
          <source>2) Used to obtain the sentinel type of the type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">2）タイプ &lt;code&gt;T&lt;/code&gt; のセンチネルタイプを取得するために使用されます。</target>
        </trans-unit>
        <trans-unit id="c1b0681dd646343ae259502e821d37cfe07693da" translate="yes" xml:space="preserve">
          <source>2) Uses &lt;a href=&quot;list_initialization&quot;&gt;copy-list-initialization&lt;/a&gt; to construct the return value of the function.</source>
          <target state="translated">2）&lt;a href=&quot;list_initialization&quot;&gt;copy-list-initialization&lt;/a&gt;を使用して、関数の戻り値を作成します。</target>
        </trans-unit>
        <trans-unit id="11c95151bab62e4037704f2e8ebaf4a0bf219403" translate="yes" xml:space="preserve">
          <source>2) Uses the delete expression as the deleter. A valid delete expression must be available, i.e. &lt;code&gt;delete ptr&lt;/code&gt; must be well formed, have well-defined behavior and not throw any exceptions. Equivalent to &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;(ptr).swap(*this);&lt;/code&gt;.</source>
          <target state="translated">2）削除式を削除子として使用します。有効な削除式が使用可能である必要があります。つまり、 &lt;code&gt;delete ptr&lt;/code&gt; は整形式であり、明確に定義された動作を持ち、例外をスローしない必要があります。 &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;(ptr).swap(*this);&lt;/code&gt; 同等です。。</target>
        </trans-unit>
        <trans-unit id="4e138513d3ab1d7c6f9259e0ed42b6bf151df482" translate="yes" xml:space="preserve">
          <source>2) Value assignment, equivalent to &lt;code&gt;store(desired)&lt;/code&gt;</source>
          <target state="translated">2）値の割り当て、 &lt;code&gt;store(desired)&lt;/code&gt; と同等（望ましい）</target>
        </trans-unit>
        <trans-unit id="a10df013e9f0915b14bc450f19b61d3443e16f51" translate="yes" xml:space="preserve">
          <source>2) Variable template for &lt;code&gt;empty_view&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;empty_view&lt;/code&gt; の変数テンプレート。</target>
        </trans-unit>
        <trans-unit id="e3a2875ae0d9153472ecdc37f03b5d1c3ad03471" translate="yes" xml:space="preserve">
          <source>2) Virtual destructor is usually required in a base class</source>
          <target state="translated">2)仮想デストラクタは通常基底クラスで必要です。</target>
        </trans-unit>
        <trans-unit id="c29a0e8b717ed75e29ab47bcc40fdaa82b2309d1" translate="yes" xml:space="preserve">
          <source>2) When a named &lt;a href=&quot;reference#Rvalue_references&quot;&gt;rvalue reference&lt;/a&gt; variable is declared with an initializer</source>
          <target state="translated">2）名前付き&lt;a href=&quot;reference#Rvalue_references&quot;&gt;右辺値参照&lt;/a&gt;変数が初期化子で宣言されている場合</target>
        </trans-unit>
        <trans-unit id="c8ce328e0bb39ff88d5896c9ea941531a6c56240" translate="yes" xml:space="preserve">
          <source>2) When two functions with the same unqualified name are declared in different namespaces, and both have &lt;code&gt;&quot;C&quot;&lt;/code&gt; language linkage, the declarations refer to the same function.</source>
          <target state="translated">2）同じ非修飾名を持つ2つの関数が異なる名前空間で宣言されており、両方に &lt;code&gt;&quot;C&quot;&lt;/code&gt; 言語リンケージがある場合、宣言は同じ関数を参照します。</target>
        </trans-unit>
        <trans-unit id="a96294adb5fa3f90b21afdca0b3c8233e6403754" translate="yes" xml:space="preserve">
          <source>2) Wide string literal. The type of a &lt;code&gt;L&quot;...&quot;&lt;/code&gt; string literal is &lt;code&gt;const wchar_t[N]&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is the size of the string in code units of the execution wide encoding, including the null terminator.</source>
          <target state="translated">2）ワイド文字列リテラル。 &lt;code&gt;L&quot;...&quot;&lt;/code&gt; 文字列リテラルのタイプは &lt;code&gt;const wchar_t[N]&lt;/code&gt; です &lt;code&gt;N&lt;/code&gt; は、nullターミネーターを含む実行ワイドエンコーディングのコード単位での文字列のサイズです。</target>
        </trans-unit>
        <trans-unit id="d8b7ed238c60758453d42719ed9f033ea33dcb89" translate="yes" xml:space="preserve">
          <source>2) Wraps a const member function with no parameters.</source>
          <target state="translated">2)パラメータなしの const メンバ関数をラップします。</target>
        </trans-unit>
        <trans-unit id="82be08f8e41bb938b3c303da8f2c0cf4ad97e7ae" translate="yes" xml:space="preserve">
          <source>2) Writes &lt;code&gt;count&lt;/code&gt; characters to the output sequence from the character array whose first element is pointed to by &lt;code&gt;s&lt;/code&gt;. The characters are written as if by repeated calls to &lt;code&gt;&lt;a href=&quot;sputc&quot;&gt;sputc()&lt;/a&gt;&lt;/code&gt;. Writing stops when either &lt;code&gt;count&lt;/code&gt; characters are written or a call to &lt;code&gt;&lt;a href=&quot;sputc&quot;&gt;sputc()&lt;/a&gt;&lt;/code&gt; would have returned &lt;code&gt;Traits::eof()&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;count&lt;/code&gt; 個の文字を、最初の要素が &lt;code&gt;s&lt;/code&gt; で指されている文字配列から出力シーケンスに書き込みます。文字は、 &lt;code&gt;&lt;a href=&quot;sputc&quot;&gt;sputc()&lt;/a&gt;&lt;/code&gt; を繰り返し呼び出すかのように書き込まれます。 &lt;code&gt;count&lt;/code&gt; 個の文字が書き込まれるか、または &lt;code&gt;&lt;a href=&quot;sputc&quot;&gt;sputc()&lt;/a&gt;&lt;/code&gt; の呼び出しが &lt;code&gt;Traits::eof()&lt;/code&gt; を返した場合、書き込みは停止します。</target>
        </trans-unit>
        <trans-unit id="66af2655e87a9e9c59e356b783a2d60c640f92a8" translate="yes" xml:space="preserve">
          <source>2) Writes characters to the output sequence &lt;code&gt;out&lt;/code&gt; which represent the value of &lt;code&gt;v&lt;/code&gt;, formatted as requested by the formatting flags &lt;code&gt;str.flags()&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;../numpunct&quot;&gt;std::numpunct&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; facets of the locale imbued in the stream &lt;code&gt;str&lt;/code&gt;. This function is called by all formatted output stream operators, such as &lt;code&gt;&lt;a href=&quot;../../io/cout&quot;&gt;std::cout&lt;/a&gt; &amp;lt;&amp;lt; n;&lt;/code&gt;.</source>
          <target state="translated">2）フォーマットフラグ &lt;code&gt;str.flags()&lt;/code&gt; と、ストリーム &lt;code&gt;str&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;../numpunct&quot;&gt;std::numpunct&lt;/a&gt;&lt;/code&gt; たロケールのstd :: numpunctおよび &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; ファセットの要求に従ってフォーマットされた、 &lt;code&gt;v&lt;/code&gt; の値を表す文字を出力シーケンス &lt;code&gt;out&lt;/code&gt; に書き込みます。この関数は、 &lt;code&gt;&lt;a href=&quot;../../io/cout&quot;&gt;std::cout&lt;/a&gt; &amp;lt;&amp;lt; n;&lt;/code&gt; &amp;lt;&amp;lt; n;などのすべてのフォーマット済み出力ストリーム演算子によって呼び出されます。。</target>
        </trans-unit>
        <trans-unit id="fb68e180bc5c9076b0953a9a46e57364a26f7b3a" translate="yes" xml:space="preserve">
          <source>2) Writes the results to a file stream &lt;code&gt;stream&lt;/code&gt;.</source>
          <target state="translated">2）結果をファイルストリーム &lt;code&gt;stream&lt;/code&gt; に書き込みます。</target>
        </trans-unit>
        <trans-unit id="e9d0bd4175c1bf2f0c0c43a79ba1a6a29c0912cf" translate="yes" xml:space="preserve">
          <source>2) Yields the size in bytes of the object representation of the type of expression, if that expression is evaluated.</source>
          <target state="translated">2)式が評価された場合、その式の型のオブジェクト表現のサイズをバイト単位で返します。</target>
        </trans-unit>
        <trans-unit id="58f04a4a1a97eaf9db591eff20c86cd6c7270539" translate="yes" xml:space="preserve">
          <source>2) a copy of the &lt;code&gt;std::chrono::weekday_indexed&lt;/code&gt; object stored in &lt;code&gt;*this&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;*this&lt;/code&gt; に格納されている &lt;code&gt;std::chrono::weekday_indexed&lt;/code&gt; オブジェクトのコピー</target>
        </trans-unit>
        <trans-unit id="d34a26780a58ee4350b0f0c7a2e4d9baecbeb883" translate="yes" xml:space="preserve">
          <source>2) a copy of the &lt;code&gt;std::chrono::weekday_last&lt;/code&gt; object stored in &lt;code&gt;*this&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;*this&lt;/code&gt; に格納されている &lt;code&gt;std::chrono::weekday_last&lt;/code&gt; オブジェクトのコピー</target>
        </trans-unit>
        <trans-unit id="a7b1f6c13fab1c610bcf2ea7c0fa72e2704508d1" translate="yes" xml:space="preserve">
          <source>2) a copy of this duration object, with the number of ticks negated</source>
          <target state="translated">2)この継続時間オブジェクトのコピーで、目盛りの数は否定されます。</target>
        </trans-unit>
        <trans-unit id="dcb5152138c7fa69e4b774009c9b97f2edbf85ae" translate="yes" xml:space="preserve">
          <source>2) a declaration of a function at block scope (that's not a &lt;a href=&quot;namespace#Using-declarations&quot;&gt;using-declaration&lt;/a&gt;)</source>
          <target state="translated">2）ブロックスコープでの関数の宣言（&lt;a href=&quot;namespace#Using-declarations&quot;&gt;using-declarationで&lt;/a&gt;はありません）</target>
        </trans-unit>
        <trans-unit id="1a77efcd1ed046f4a26409e7bf6b31f5ae0d09f8" translate="yes" xml:space="preserve">
          <source>2) a function directly invoked by the exception handling mechanism while handling an exception that has not yet been caught exits via an exception (e.g. a destructor of some local object, or a copy constructor constructing a catch-clause parameter)</source>
          <target state="translated">2)まだ捕捉されていない例外を処理している間に、例外処理機構によって直接呼び出された関数が、例外を経由して終了します (例えば、ローカルオブジェクトのデストラクタや、キャッチ句のパラメータを作成するコピーコンストラクタなど)。</target>
        </trans-unit>
        <trans-unit id="d6739c9b1964142e8846c31adb098c5b9114a60a" translate="yes" xml:space="preserve">
          <source>2) additional copies of &lt;code&gt;value&lt;/code&gt; are appended</source>
          <target state="translated">2）付加 &lt;code&gt;value&lt;/code&gt; コピーが追加されます</target>
        </trans-unit>
        <trans-unit id="0be286efeb0ed06601c983729d7755efd172d770" translate="yes" xml:space="preserve">
          <source>2) adds &lt;code&gt;const&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;const&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="77c1cb5073f792c06543a1b7139e1e7603aca7e7" translate="yes" xml:space="preserve">
          <source>2) all C streams are flushed and closed</source>
          <target state="translated">2)すべてのCの流れがフラッシュされ、閉鎖されます。</target>
        </trans-unit>
        <trans-unit id="d6324e66394574789cab02decb32e99d55fbb6dd" translate="yes" xml:space="preserve">
          <source>2) allocated buffer size (the beginning of the buffer does not need a special data member, it may be stored in the inherited pointer &lt;code&gt;&lt;a href=&quot;basic_streambuf/gptr&quot;&gt;eback()&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">2）割り当てられたバッファーサイズ（バッファーの先頭には特別なデータメンバーは必要ありません。継承されたポインター &lt;code&gt;&lt;a href=&quot;basic_streambuf/gptr&quot;&gt;eback()&lt;/a&gt;&lt;/code&gt; に格納できます）</target>
        </trans-unit>
        <trans-unit id="2b1167aa9a7c025f6231e3af912f3af7dfa5d094" translate="yes" xml:space="preserve">
          <source>2) an object of type &lt;code&gt;&lt;a href=&quot;reference&quot;&gt;std::bitset::reference&lt;/a&gt;&lt;/code&gt;, which allows writing to the requested bit.</source>
          <target state="translated">2）タイプ &lt;code&gt;&lt;a href=&quot;reference&quot;&gt;std::bitset::reference&lt;/a&gt;&lt;/code&gt; オブジェクト。これにより、要求されたビットへの書き込みが可能になります。</target>
        </trans-unit>
        <trans-unit id="cf7b40054eb1c9e4f754b5453651c07e5d31d0b3" translate="yes" xml:space="preserve">
          <source>2) attempts to convert the &lt;code&gt;externT&lt;/code&gt; characters from the character array defined by &lt;code&gt;[from, from_end)&lt;/code&gt;, given initial conversion state &lt;code&gt;state&lt;/code&gt;, to at most &lt;code&gt;max&lt;/code&gt;&lt;code&gt;internT&lt;/code&gt; characters, and returns the number of &lt;code&gt;externT&lt;/code&gt; characters that such conversion would consume. Modifies &lt;code&gt;state&lt;/code&gt; as if by executing &lt;code&gt;do_in(state, from, from_end, from, to, to+max, to)&lt;/code&gt; for some imaginary &lt;code&gt;[to, to+max)&lt;/code&gt; output buffer.</source>
          <target state="translated">2） &lt;code&gt;[from, from_end)&lt;/code&gt; で定義された文字配列の &lt;code&gt;externT&lt;/code&gt; 文字を、初期変換状態 &lt;code&gt;state&lt;/code&gt; を指定して &lt;code&gt;max&lt;/code&gt; &lt;code&gt;internT&lt;/code&gt; 文字に変換しようとし、そのような変換で消費される &lt;code&gt;externT&lt;/code&gt; 文字の数を返します。架空の &lt;code&gt;[to, to+max)&lt;/code&gt; 出力バッファーに対して &lt;code&gt;do_in(state, from, from_end, from, to, to+max, to)&lt;/code&gt; を実行するかのように &lt;code&gt;state&lt;/code&gt; を変更します。</target>
        </trans-unit>
        <trans-unit id="01558284619f4fae390cae47f474668f6cbe82d9" translate="yes" xml:space="preserve">
          <source>2) attribute with a namespace, such as &lt;code&gt;[[gnu::unused]]&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;[[gnu::unused]]&lt;/code&gt; などの名前空間を持つ属性</target>
        </trans-unit>
        <trans-unit id="d38cc158f020fe363e0e7d5e3c35d177e155dae2" translate="yes" xml:space="preserve">
          <source>2) average case linear worst case quadratic in distance between &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;first&lt;/code&gt; と &lt;code&gt;last&lt;/code&gt; 間の距離の平均ケース線形最悪ケース2次</target>
        </trans-unit>
        <trans-unit id="2cf7ae39809692ef985348cfe0b01a2972cbd32b" translate="yes" xml:space="preserve">
          <source>2) bitwise AND</source>
          <target state="translated">2)ビットごとのAND</target>
        </trans-unit>
        <trans-unit id="917e9313c6fe9305ed1ce14d0a1c000bca25cdc7" translate="yes" xml:space="preserve">
          <source>2) by the members and friends(until C++17) of any class derived from &lt;code&gt;Base&lt;/code&gt;, but only when operating on an object of a type that is derived from &lt;code&gt;Base&lt;/code&gt; (including &lt;code&gt;this&lt;/code&gt;)</source>
          <target state="translated">2）から誘導される任意のクラスの++ 17 Cまでメンバーや友人（）によって &lt;code&gt;Base&lt;/code&gt; が、から誘導されるタイプのオブジェクト上で動作する場合にのみ、 &lt;code&gt;Base&lt;/code&gt; を含む（ &lt;code&gt;this&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b0521420c91cdfff77257c87adc6c76f6433608a" translate="yes" xml:space="preserve">
          <source>2) calls &lt;code&gt;&lt;a href=&quot;../byte/strtof&quot;&gt;std::strtod&lt;/a&gt;(str.c_str(), &amp;amp;ptr)&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../wide/wcstof&quot;&gt;std::wcstod&lt;/a&gt;(str.c_str(), &amp;amp;ptr)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;&lt;a href=&quot;../byte/strtof&quot;&gt;std::strtod&lt;/a&gt;(str.c_str(), &amp;amp;ptr)&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../wide/wcstof&quot;&gt;std::wcstod&lt;/a&gt;(str.c_str(), &amp;amp;ptr)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ecc50aee5b5ce757053b94146270424166e2c821" translate="yes" xml:space="preserve">
          <source>2) calls &lt;code&gt;&lt;a href=&quot;../byte/strtol&quot;&gt;std::strtol&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../wide/wcstol&quot;&gt;std::wcstol&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;&lt;a href=&quot;../byte/strtol&quot;&gt;std::strtol&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../wide/wcstol&quot;&gt;std::wcstol&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3c249120747da0d4828fd641dcd88f54ce3314ec" translate="yes" xml:space="preserve">
          <source>2) calls &lt;code&gt;&lt;a href=&quot;../byte/strtoul&quot;&gt;std::strtoull&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../wide/wcstoul&quot;&gt;std::wcstoull&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;&lt;a href=&quot;../byte/strtoul&quot;&gt;std::strtoull&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../wide/wcstoul&quot;&gt;std::wcstoull&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f476f1b473d513799e1fda6615dbe01673d2b3bb" translate="yes" xml:space="preserve">
          <source>2) calls &lt;code&gt;buf.set_emit_on_sync(false)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;buf.set_emit_on_sync(false)&lt;/code&gt; ）を呼び出します</target>
        </trans-unit>
        <trans-unit id="dc3e098ebd99b1fbf8ea67cf00bf2d155646c454" translate="yes" xml:space="preserve">
          <source>2) case label in a &lt;a href=&quot;switch&quot;&gt;switch&lt;/a&gt; statement;</source>
          <target state="translated">2）&lt;a href=&quot;switch&quot;&gt;switch&lt;/a&gt;ステートメントのcaseラベル。</target>
        </trans-unit>
        <trans-unit id="3a69a6f3529b5647edf421af5578258207f416ec" translate="yes" xml:space="preserve">
          <source>2) class types with trivial default constructors and trivial destructors declared without initializers</source>
          <target state="translated">2)イニシャライザなしで宣言されたトリビアルなデフォルトコンストラクタとトリビアルなデストラクタを持つクラス型</target>
        </trans-unit>
        <trans-unit id="cacc01b059fe15e1b8839f6d680fd21c86299d7e" translate="yes" xml:space="preserve">
          <source>2) compound statements;</source>
          <target state="translated">2)複合文。</target>
        </trans-unit>
        <trans-unit id="47e0994774c3ad8efaaa35e819143ffb77306134" translate="yes" xml:space="preserve">
          <source>2) const rvalue reference overload is deleted to disallow rvalue arguments</source>
          <target state="translated">2)const rvalue 参照オーバーロードを削除し、rvalue 引数を使用できないようにしました。</target>
        </trans-unit>
        <trans-unit id="9268cbb9d1e8f2ae2abf9d99805de2adbac5a42a" translate="yes" xml:space="preserve">
          <source>2) constructs an object of type &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;&lt;/code&gt;, &lt;a href=&quot;../../language/direct_initialization&quot;&gt;direct-non-list-initialized&lt;/a&gt; from &lt;code&gt;il, &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt;, as the contained object. This overload only participates in overload resolution if &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;, &lt;a href=&quot;../initializer_list&quot;&gt;std::initializer_list&lt;/a&gt;&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_copy_constructible&quot;&gt;std::is_copy_constructible_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;&amp;gt;&lt;/code&gt; are both &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">2）タイプのオブジェクト構築 &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;&lt;/code&gt; 、&lt;a href=&quot;../../language/direct_initialization&quot;&gt;直接非リスト初期化&lt;/a&gt;から &lt;code&gt;il, &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; 含まれるオブジェクトとして、。このオーバーロードは、 &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;, &lt;a href=&quot;../initializer_list&quot;&gt;std::initializer_list&lt;/a&gt;&amp;lt;U&amp;gt;&amp;amp;, Args...&amp;gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;../../types/is_copy_constructible&quot;&gt;std::is_copy_constructible_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;&amp;gt;&lt;/code&gt; ...&amp;gt;およびstd :: is_copy_constructible_v &amp;lt; std :: decay_t &amp;lt;ValueType &amp;gt;&amp;gt;の場合にのみ、オーバーロード解決に参加しますどちらも &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f6b432dab38092bde1f129853c4eec5b529f802a" translate="yes" xml:space="preserve">
          <source>2) constructs the container with the contents of the range &lt;code&gt;[first, last)&lt;/code&gt;. Sets &lt;code&gt;max_load_factor()&lt;/code&gt; to 1.0.</source>
          <target state="translated">2）範囲 &lt;code&gt;[first, last)&lt;/code&gt; の内容でコンテナを構築します。 &lt;code&gt;max_load_factor()&lt;/code&gt; を1.0に設定します。</target>
        </trans-unit>
        <trans-unit id="62f4f2991fefcca16e226626cf3ebd69b1d81898" translate="yes" xml:space="preserve">
          <source>2) constructs the container with the contents of the range &lt;code&gt;[first, last)&lt;/code&gt;. Sets &lt;code&gt;max_load_factor()&lt;/code&gt; to 1.0. If multiple elements in the range have keys that compare equivalent, it is unspecified which element is inserted (pending &lt;a href=&quot;http://wg21.link/lwg2844&quot;&gt;LWG2844&lt;/a&gt;).</source>
          <target state="translated">2）範囲 &lt;code&gt;[first, last)&lt;/code&gt; の内容でコンテナを構築します。 &lt;code&gt;max_load_factor()&lt;/code&gt; を1.0に設定します。範囲内の複数の要素に同等のものを比較するキーがある場合、どの要素が挿入されるかは不定です（保留中の&lt;a href=&quot;http://wg21.link/lwg2844&quot;&gt;LWG2844&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="5d77c666dae232bb4a839f2c318c7defedbce010" translate="yes" xml:space="preserve">
          <source>2) control information: flags that control formatting of both input and output sequences and the imbued locale</source>
          <target state="translated">2)制御情報:入出力シーケンスの書式設定やインバウンドされたロケールを制御するフラグ</target>
        </trans-unit>
        <trans-unit id="473e0ed1d382ee82a31f797c07d4f95fa3c33b65" translate="yes" xml:space="preserve">
          <source>2) copy constructor is deleted; &lt;code&gt;&lt;a href=&quot;../facet&quot;&gt;std::locale::facet&lt;/a&gt;&lt;/code&gt; is not copyable.</source>
          <target state="translated">2）コピーコンストラクターが削除されます。 &lt;code&gt;&lt;a href=&quot;../facet&quot;&gt;std::locale::facet&lt;/a&gt;&lt;/code&gt; はコピーできません。</target>
        </trans-unit>
        <trans-unit id="9bd8f9603471cf7f157350f038ce21151ef6f49b" translate="yes" xml:space="preserve">
          <source>2) copy constructor is deleted; &lt;code&gt;&lt;a href=&quot;../id&quot;&gt;std::locale::id&lt;/a&gt;&lt;/code&gt; is not copyable.</source>
          <target state="translated">2）コピーコンストラクターが削除されます。 &lt;code&gt;&lt;a href=&quot;../id&quot;&gt;std::locale::id&lt;/a&gt;&lt;/code&gt; はコピーできません。</target>
        </trans-unit>
        <trans-unit id="396006b0bd215875c55d5929e74c63edfb2ed272" translate="yes" xml:space="preserve">
          <source>2) disables the &lt;code&gt;showbase&lt;/code&gt; flag in the stream &lt;code&gt;str&lt;/code&gt; as if by calling &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::showbase&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::showbase&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: showbase&lt;/a&gt;）を呼び出すかのように、ストリーム &lt;code&gt;str&lt;/code&gt; の &lt;code&gt;showbase&lt;/code&gt; フラグを無効にします。</target>
        </trans-unit>
        <trans-unit id="ea089be7fb3dd90f719ef73bf77145d14addb599" translate="yes" xml:space="preserve">
          <source>2) disables the &lt;code&gt;showpoint&lt;/code&gt; flag in the stream &lt;code&gt;str&lt;/code&gt; as if by calling &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::showpoint&lt;/a&gt;)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::showpoint&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: showpoint&lt;/a&gt;）を呼び出すかのように、ストリーム &lt;code&gt;str&lt;/code&gt; の &lt;code&gt;showpoint&lt;/code&gt; フラグを無効にします</target>
        </trans-unit>
        <trans-unit id="f8d6e35d033a29ee999c97df16b555d1e1f857e0" translate="yes" xml:space="preserve">
          <source>2) disables the &lt;code&gt;showpos&lt;/code&gt; flag in the stream &lt;code&gt;str&lt;/code&gt; as if by calling &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::showpos&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::showpos&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: showpos&lt;/a&gt;）を呼び出すかのように、ストリーム &lt;code&gt;str&lt;/code&gt; の &lt;code&gt;showpos&lt;/code&gt; フラグを無効にします。</target>
        </trans-unit>
        <trans-unit id="01e2d044e2d50726f863fa86ebcfc98bb6b76a02" translate="yes" xml:space="preserve">
          <source>2) disables the &lt;code&gt;skipws&lt;/code&gt; flag in the stream &lt;code&gt;str&lt;/code&gt; as if by calling &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::skipws&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::skipws&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: skipws&lt;/a&gt;）を呼び出すかのように、ストリーム &lt;code&gt;str&lt;/code&gt; の &lt;code&gt;skipws&lt;/code&gt; フラグを無効にします。</target>
        </trans-unit>
        <trans-unit id="830ed3861a4df7ae908b1e848e8fa4ea0500a122" translate="yes" xml:space="preserve">
          <source>2) disables the &lt;code&gt;unitbuf&lt;/code&gt; flag in the stream &lt;code&gt;str&lt;/code&gt; as if by calling &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::unitbuf&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::unitbuf&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: unitbuf&lt;/a&gt;）を呼び出すかのように、ストリーム &lt;code&gt;str&lt;/code&gt; の &lt;code&gt;unitbuf&lt;/code&gt; フラグを無効にします。</target>
        </trans-unit>
        <trans-unit id="df759cba18f24a52c289d053ce0420ec880cefe1" translate="yes" xml:space="preserve">
          <source>2) disables the &lt;code&gt;uppercase&lt;/code&gt; flag in the stream &lt;code&gt;str&lt;/code&gt; as if by calling &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::uppercase&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;str.unsetf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::uppercase&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: uppercase&lt;/a&gt;）を呼び出すのと同じように、ストリーム &lt;code&gt;str&lt;/code&gt; の &lt;code&gt;uppercase&lt;/code&gt; フラグを無効にします。</target>
        </trans-unit>
        <trans-unit id="80336a7030dd6d36dd046135aa4d22da3f45e952" translate="yes" xml:space="preserve">
          <source>2) disjunctions</source>
          <target state="translated">2)接続詞</target>
        </trans-unit>
        <trans-unit id="5c21314f84712eeb476d7ec135879bf2bfabaa49" translate="yes" xml:space="preserve">
          <source>2) division</source>
          <target state="translated">2)分割</target>
        </trans-unit>
        <trans-unit id="8128a517db1b59c5831edee42b0cf151beb26496" translate="yes" xml:space="preserve">
          <source>2) elaborated type specifier for a enumeration type</source>
          <target state="translated">2)列挙型のための精巧な型指定子</target>
        </trans-unit>
        <trans-unit id="8377f82ef52c02c38207b4d52ec015819e7bd77b" translate="yes" xml:space="preserve">
          <source>2) floating-point literal, returns a floating-point duration equivalent to &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::hours&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">2）浮動小数点リテラル &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::hours&lt;/a&gt;&lt;/code&gt; と同等の浮動小数点期間を返します</target>
        </trans-unit>
        <trans-unit id="b12f1f31e0a00498b42c89d5162c64b275deed11" translate="yes" xml:space="preserve">
          <source>2) floating-point literal, returns a floating-point duration equivalent to &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::microseconds&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">2）浮動小数点リテラル &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::microseconds&lt;/a&gt;&lt;/code&gt; と同等の浮動小数点期間を返します</target>
        </trans-unit>
        <trans-unit id="bf29beb4a159551ee80a7ff99c9dff5b717bc0c3" translate="yes" xml:space="preserve">
          <source>2) floating-point literal, returns a floating-point duration equivalent to &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::milliseconds&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">2）浮動小数点リテラル &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::milliseconds&lt;/a&gt;&lt;/code&gt; と同等の浮動小数点期間を返します</target>
        </trans-unit>
        <trans-unit id="0f0d687244388427a907f0080302cf11c3885f50" translate="yes" xml:space="preserve">
          <source>2) floating-point literal, returns a floating-point duration equivalent to &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::minutes&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">2）浮動小数点リテラル &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::minutes&lt;/a&gt;&lt;/code&gt; と同等の浮動小数点期間を返します</target>
        </trans-unit>
        <trans-unit id="7b9aff7642fac0c3d46f0b1ce848886720f4a928" translate="yes" xml:space="preserve">
          <source>2) floating-point literal, returns a floating-point duration equivalent to &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::nanoseconds&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">2）浮動小数点リテラル &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::nanoseconds&lt;/a&gt;&lt;/code&gt; と同等の浮動小数点期間を返します</target>
        </trans-unit>
        <trans-unit id="e222c60ec7dacdbddc32c2115494185b0615426b" translate="yes" xml:space="preserve">
          <source>2) floating-point literal, returns a floating-point duration equivalent to &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::seconds&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">2）浮動小数点リテラル &lt;code&gt;&lt;a href=&quot;duration&quot;&gt;std::chrono::seconds&lt;/a&gt;&lt;/code&gt; と同等の浮動小数点期間を返します</target>
        </trans-unit>
        <trans-unit id="2ee8b074561a5f3f646fcbcedde42cf80cc7620c" translate="yes" xml:space="preserve">
          <source>2) forms a literal &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;float&amp;gt;&lt;/code&gt; with the real part zero and imaginary part &lt;code&gt;arg&lt;/code&gt;</source>
          <target state="translated">2）実数部ゼロと虚数部 &lt;code&gt;arg&lt;/code&gt; を持つリテラル &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;float&amp;gt;&lt;/code&gt; を形成します</target>
        </trans-unit>
        <trans-unit id="79b55506fece8f977c8c2b7f39816a4ddf769c23" translate="yes" xml:space="preserve">
          <source>2) if &lt;code&gt;E2&lt;/code&gt; is a pointer to member function, the result is a special kind of prvalue designating that member function that can only be used as the left-hand operand of a member function call operator, and for no other purpose;</source>
          <target state="translated">2） &lt;code&gt;E2&lt;/code&gt; がメンバー関数へのポインターである場合、結果は、メンバー関数呼び出し演算子の左側のオペランドとしてのみ使用でき、他の目的では使用できないそのメンバー関数を指定する特別な種類のprvalueです。</target>
        </trans-unit>
        <trans-unit id="3f4528db942063533e667fd6958b5f4ed40d06f3" translate="yes" xml:space="preserve">
          <source>2) if &lt;code&gt;T&lt;/code&gt; is a pointer to member function of class &lt;code&gt;T0&lt;/code&gt; that takes no arguments, then &lt;code&gt;argument_type&lt;/code&gt; is &lt;code&gt;T0*&lt;/code&gt;, possibly cv-qualified</source>
          <target state="translated">2） &lt;code&gt;T&lt;/code&gt; が引数を取らないクラス &lt;code&gt;T0&lt;/code&gt; のメンバー関数へのポインターである場合、 &lt;code&gt;argument_type&lt;/code&gt; は &lt;code&gt;T0*&lt;/code&gt; であり、cv修飾されている可能性があります</target>
        </trans-unit>
        <trans-unit id="4d3e032823b314823fde43f6d99a328a7b9894f9" translate="yes" xml:space="preserve">
          <source>2) if &lt;code&gt;T&lt;/code&gt; is a pointer to member function of class &lt;code&gt;T0&lt;/code&gt; that takes one argument &lt;code&gt;A1&lt;/code&gt;, then &lt;code&gt;second_argument_type&lt;/code&gt; is &lt;code&gt;A1&lt;/code&gt;, possibly cv-qualified</source>
          <target state="translated">2） &lt;code&gt;T&lt;/code&gt; が1つの引数 &lt;code&gt;A1&lt;/code&gt; を取るクラス &lt;code&gt;T0&lt;/code&gt; のメンバー関数へのポインターである場合、 &lt;code&gt;second_argument_type&lt;/code&gt; は &lt;code&gt;A1&lt;/code&gt; であり、cv修飾されている可能性があります</target>
        </trans-unit>
        <trans-unit id="d98e4582962c58e5be233886dc5d9025bc1d8d0c" translate="yes" xml:space="preserve">
          <source>2) if &lt;code&gt;T&lt;/code&gt; is a pointer to member function of class &lt;code&gt;T0&lt;/code&gt; that takes one argument, then &lt;code&gt;first_argument_type&lt;/code&gt; is &lt;code&gt;T0*&lt;/code&gt;, possibly cv-qualified</source>
          <target state="translated">2） &lt;code&gt;T&lt;/code&gt; が1つの引数を取るクラス &lt;code&gt;T0&lt;/code&gt; のメンバー関数へのポインターである場合、 &lt;code&gt;first_argument_type&lt;/code&gt; は &lt;code&gt;T0*&lt;/code&gt; であり、cv修飾されている可能性があります</target>
        </trans-unit>
        <trans-unit id="8f4d29ee073785a8e8a69bfa088887f404fc9621" translate="yes" xml:space="preserve">
          <source>2) if the encoding represented by this &lt;code&gt;codecvt&lt;/code&gt; facet is state-dependent, and &lt;code&gt;state&lt;/code&gt; represents a conversion state that is not the initial shift state, writes the characters necessary to return to the initial shift state. The characters are written to a character array whose first element is pointed to by &lt;code&gt;to&lt;/code&gt;. No more than &lt;code&gt;to_end-to&lt;/code&gt; characters are written. The parameter &lt;code&gt;to_next&lt;/code&gt; is updated to point one past the last character written.</source>
          <target state="translated">2）この &lt;code&gt;codecvt&lt;/code&gt; ファセットで表されるエンコードが状態に依存し、 &lt;code&gt;state&lt;/code&gt; が初期シフト状態ではない変換状態を表す場合、初期シフト状態に戻るために必要な文字を書き込みます。文字は、その最初の要素によって指される文字配列に書き込まれる &lt;code&gt;to&lt;/code&gt; 。以上ませ &lt;code&gt;to_end-to&lt;/code&gt; 文字が書かれていません。パラメータ &lt;code&gt;to_next&lt;/code&gt; は、書き込まれた最後の文字の1つ後を指すように更新されます。</target>
        </trans-unit>
        <trans-unit id="28d8548256bf1d499db58bc732188e8cdc34c77d" translate="yes" xml:space="preserve">
          <source>2) if the encoding represented by this codecvt facet maps each internal character to the same, constant number of external characters, returns that number. If the encoding is variable-length (e.g. UTF-8 or UTF-16), returns &lt;code&gt;​0​&lt;/code&gt;. If the encoding is state-dependent, returns &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">2）このcodecvtファセットで表されるエンコーディングが各内部文字を同じ一定数の外部文字にマップする場合、その数を返します。符号化が可変長である場合（例えば、UTF-8やUTF-16）、リターン &lt;code&gt;​0​&lt;/code&gt; 。エンコーディングが状態に依存する場合は、 &lt;code&gt;-1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="08eeb0877191f1272e5eed218f6c93d52d399e44" translate="yes" xml:space="preserve">
          <source>2) initialization of an object of non-class type with a single brace-enclosed initializer (note: for class types and other uses of braced-init-list, see &lt;a href=&quot;list_initialization&quot;&gt;list-initialization&lt;/a&gt;)</source>
          <target state="translated">2）中括弧で囲まれた単一のイニシャライザを使用した非クラス型のオブジェクトの初期化（注：クラス型およびbraced-init-listの他の使用については、&lt;a href=&quot;list_initialization&quot;&gt;list-initializationを&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="585964c490ac88716b76a845d5cadea440830d95" translate="yes" xml:space="preserve">
          <source>2) initialization of an unnamed temporary with a</source>
          <target state="translated">2)名前のないテンポラリの初期化を</target>
        </trans-unit>
        <trans-unit id="1b6bff53e82250c6f4273af8416bffa5d1585880" translate="yes" xml:space="preserve">
          <source>2) iterator pointing to the character immediately following the character erased, or &lt;code&gt;end()&lt;/code&gt; if no such character exists</source>
          <target state="translated">2）消去された文字の直後の文字を指すイテレータ、またはそのような文字が存在しない場合は &lt;code&gt;end()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b678b5b22484ed40a0467b3073907ad86d0cfa2" translate="yes" xml:space="preserve">
          <source>2) linear in size of &lt;code&gt;str&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;str&lt;/code&gt; のサイズが線形</target>
        </trans-unit>
        <trans-unit id="1a4523cc0aae262f701a5c62cdf70900862b2ab7" translate="yes" xml:space="preserve">
          <source>2) linear in the size of &lt;code&gt;this&lt;/code&gt; (formally, each CharT has to be destroyed). If allocators do not compare equal and do not propagate, then also linear in the size of &lt;code&gt;str&lt;/code&gt; (copy must be made)</source>
          <target state="translated">2） &lt;code&gt;this&lt;/code&gt; サイズで線形（正式には、各CharTを破棄する必要があります）。アロケーターが等しいと比較せず、伝搬しない場合、 &lt;code&gt;str&lt;/code&gt; のサイズも線形になります（コピーを作成する必要があります）</target>
        </trans-unit>
        <trans-unit id="4e280b0c39065f539943713b34d12de8fe15d5b8" translate="yes" xml:space="preserve">
          <source>2) log(a.size())</source>
          <target state="translated">2)log(a.size()</target>
        </trans-unit>
        <trans-unit id="1379bd25758af5980d6e604ffcaf7e06c26ae1d6" translate="yes" xml:space="preserve">
          <source>2) lvalue of any type &lt;code&gt;T&lt;/code&gt; may be converted to a lvalue or rvalue reference to the same type &lt;code&gt;T&lt;/code&gt;, more or less cv-qualified. Likewise, an rvalue may be converted to a more or less cv-qualified rvalue reference. The result of a reference &lt;code&gt;const_cast&lt;/code&gt; refers to the original object if expression is a glvalue and to the &lt;a href=&quot;implicit_cast#Temporary_materialization&quot;&gt;materialized temporary&lt;/a&gt; otherwise(since C++17).</source>
          <target state="translated">2）任意の型 &lt;code&gt;T&lt;/code&gt; の左辺値は、同じ型 &lt;code&gt;T&lt;/code&gt; への左辺値または右辺値参照に変換できます。同様に、右辺値は、多かれ少なかれcv修飾された右辺値参照に変換されます。参照 &lt;code&gt;const_cast&lt;/code&gt; の結果は、式がglvalueの場合は元のオブジェクトを参照し、それ以外の場合は&lt;a href=&quot;implicit_cast#Temporary_materialization&quot;&gt;実体化された一時&lt;/a&gt;オブジェクトを参照します（C ++ 17以降）。</target>
        </trans-unit>
        <trans-unit id="7f9e3952e5b6d2c8c74148b79121eba39f85c9e8" translate="yes" xml:space="preserve">
          <source>2) may throw &lt;code&gt;&lt;a href=&quot;../../../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; on bad input.</source>
          <target state="translated">2）不正な入力に対して &lt;code&gt;&lt;a href=&quot;../../../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; をスローする場合があります。</target>
        </trans-unit>
        <trans-unit id="aa25d9823fb0d85b3d522883742bda293bd67276" translate="yes" xml:space="preserve">
          <source>2) may throw &lt;code&gt;&lt;a href=&quot;../../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; if no characters are extracted from &lt;code&gt;is&lt;/code&gt; (e.g the stream is at end of file, or consists of whitespace only), or if an exception is thrown during input.</source>
          <target state="translated">2）投げること &lt;code&gt;&lt;a href=&quot;../../io/ios_base/failure&quot;&gt;std::ios_base::failure&lt;/a&gt;&lt;/code&gt; 何文字がから抽出されていない場合 &lt;code&gt;is&lt;/code&gt; （例えば、ストリームがファイルの末尾にある、または空白のみで構成）、または例外が入力中にスローされます。</target>
        </trans-unit>
        <trans-unit id="45c022142f0968e893d85127c3f2d5f098a97b3f" translate="yes" xml:space="preserve">
          <source>2) meets the &lt;a href=&quot;../../named_req/transformationtrait&quot;&gt;TransformationTrait&lt;/a&gt; requirements with a member typedef &lt;code&gt;type&lt;/code&gt; equal to the type of the alternative with index &lt;code&gt;I&lt;/code&gt;</source>
          <target state="translated">2）メンバーtypedef &lt;code&gt;type&lt;/code&gt; がインデックス &lt;code&gt;I&lt;/code&gt; の代替の型と等しいことで、&lt;a href=&quot;../../named_req/transformationtrait&quot;&gt;TransformationTrait&lt;/a&gt;要件を満たします</target>
        </trans-unit>
        <trans-unit id="d8bcea9e674521c4899dd60c9eca9cb5f872efd5" translate="yes" xml:space="preserve">
          <source>2) meets the &lt;a href=&quot;../../named_req/unarytypetrait&quot;&gt;UnaryTypeTrait&lt;/a&gt; requirements with a BaseCharacteristic of &lt;code&gt;std::integral_constant&amp;lt;std::size_t, sizeof...(Types)&amp;gt;&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;std::integral_constant&amp;lt;std::size_t, sizeof...(Types)&amp;gt;&lt;/code&gt; BaseCharacteristicで&lt;a href=&quot;../../named_req/unarytypetrait&quot;&gt;UnaryTypeTrait&lt;/a&gt;要件を満たします</target>
        </trans-unit>
        <trans-unit id="7b0922619c98ef3bf3372e9384eca35939556879" translate="yes" xml:space="preserve">
          <source>2) member functions</source>
          <target state="translated">2)メンバー機能</target>
        </trans-unit>
        <trans-unit id="fb4b2188b3d1b79a923bf27b35991a95b8e14a70" translate="yes" xml:space="preserve">
          <source>2) namespace-scoped friend functions (and function templates) that are declared in an associated class are visible through ADL even if they are not visible through ordinary lookup</source>
          <target state="translated">2)関連するクラスで宣言されている名前空間対応のフレンド関数(および関数テンプレート)は、通常のルックアップでは表示されなくても、ADLを通して表示されます。</target>
        </trans-unit>
        <trans-unit id="d915fbc4ed419e4439c5ad936fe45e0dedcaae04" translate="yes" xml:space="preserve">
          <source>2) negated argument, &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;T&amp;gt;(-val.real(), -val.imag())&lt;/code&gt;</source>
          <target state="translated">2）否定された引数、 &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;T&amp;gt;(-val.real(), -val.imag())&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="16e923e3764201cfaef48dd9a7a680923e571a7c" translate="yes" xml:space="preserve">
          <source>2) non-void specialization, used to communicate objects between threads</source>
          <target state="translated">2)スレッド間でオブジェクトを通信するために使用される非ボイド特殊化</target>
        </trans-unit>
        <trans-unit id="3d1c3db64b3d601282a0882fa99ed29819cb2aef" translate="yes" xml:space="preserve">
          <source>2) none.</source>
          <target state="translated">2)なし。</target>
        </trans-unit>
        <trans-unit id="97c56d63e57e1af1443f0668c051f87f45a87914" translate="yes" xml:space="preserve">
          <source>2) on the right-hand-side of an assignment expression</source>
          <target state="translated">2)代入式の右側にある</target>
        </trans-unit>
        <trans-unit id="39de1086ff80ca534b5ee60f09d0d884373b7078" translate="yes" xml:space="preserve">
          <source>2) op ...) op E</source>
          <target state="translated">2)on ...on E)</target>
        </trans-unit>
        <trans-unit id="dacfb6cd3e6ec129fc896095f6537b2598811395" translate="yes" xml:space="preserve">
          <source>2) or, if not that, (only in context of non-class initialization by conversion), the standard conversion sequence from the return type of F1 to the type being initialized is</source>
          <target state="translated">2)、あるいは、そうでない場合(変換による非クラス初期化の文脈でのみ)、F1の戻り型から初期化される型への標準的な変換シーケンスは</target>
        </trans-unit>
        <trans-unit id="42eeea1f07d3ce5dda592abea703417ac1f6924d" translate="yes" xml:space="preserve">
          <source>2) p made proximate against base</source>
          <target state="translated">2)ベースに対して近距離に作られたp</target>
        </trans-unit>
        <trans-unit id="645ee1721eafcc6400b43f5e73a9f28be73534dc" translate="yes" xml:space="preserve">
          <source>2) postfix decrement (post-decrement)</source>
          <target state="translated">2)ポストフィックス・デクリメント(ポスト・デクリメント</target>
        </trans-unit>
        <trans-unit id="499d2c537c0841899b7c2716bd8ba882c873094b" translate="yes" xml:space="preserve">
          <source>2) prefix decrement (pre-decrement)</source>
          <target state="translated">2)接頭辞デクリメント(プリデクリメント</target>
        </trans-unit>
        <trans-unit id="2908071c8896ac2f011ed5dcba01e5a36aebb624" translate="yes" xml:space="preserve">
          <source>2) removes the topmost &lt;code&gt;const&lt;/code&gt;.</source>
          <target state="translated">2）最上位の &lt;code&gt;const&lt;/code&gt; を削除します。</target>
        </trans-unit>
        <trans-unit id="8d00c166bfa15f423524d248b38172b36c084eb2" translate="yes" xml:space="preserve">
          <source>2) replaces current settings with given ones.</source>
          <target state="translated">2)現在の設定を与えられたものに置き換えます。</target>
        </trans-unit>
        <trans-unit id="4db887dd9860a46694236e4cae62ff9e065fb444" translate="yes" xml:space="preserve">
          <source>2) replaces the associated byte stream with &lt;code&gt;bytebuf&lt;/code&gt; .</source>
          <target state="translated">2）関連するバイトストリームを &lt;code&gt;bytebuf&lt;/code&gt; で置き換えます。</target>
        </trans-unit>
        <trans-unit id="2fe6d5892d176d177b26eff6ead780f12b24b413" translate="yes" xml:space="preserve">
          <source>2) returns &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;false&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="71e3b774300d2eebd3845a90f2b9e3f07562f569" translate="yes" xml:space="preserve">
          <source>2) returns &lt;code&gt;static_cast&amp;lt;const OuterAlloc&amp;amp;&amp;gt;(*this)&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;static_cast&amp;lt;const OuterAlloc&amp;amp;&amp;gt;(*this)&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="c8070e737f861b063b5a5931976bab26eba33624" translate="yes" xml:space="preserve">
          <source>2) returns &lt;code&gt;std::u8string_view{str, len}&lt;/code&gt;</source>
          <target state="translated">2）戻り &lt;code&gt;std::u8string_view{str, len}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="741e74c6d31e5f009d234037c3e5515d65a95079" translate="yes" xml:space="preserve">
          <source>2) returns &lt;code&gt;std::u8string{str, len}&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;std::u8string{str, len}&lt;/code&gt; 返します</target>
        </trans-unit>
        <trans-unit id="72cef41fc2856e5795da50c38e552f85c1551ef4" translate="yes" xml:space="preserve">
          <source>2) right shift of lhs by rhs bits</source>
          <target state="translated">2)rhs ビットによる lhs の右シフト</target>
        </trans-unit>
        <trans-unit id="4b78590ed44f9576a3024115fa5bf682c65bbc4e" translate="yes" xml:space="preserve">
          <source>2) rvalues can be bound to non-const implicit object parameter (unless this is for a ref-qualified member function)(since C++11) and do not affect the ranking of the implicit conversions.</source>
          <target state="translated">2)r値は,コンスタントではない暗黙のオブジェクトパラメータにバインドすることができます(これが ref-qualified メンバ関数の場合を除く)(C++11以降),暗黙の変換の順位には影響しません.</target>
        </trans-unit>
        <trans-unit id="4983d8348f815ac7500fbb734db536a9ef8cbf55" translate="yes" xml:space="preserve">
          <source>2) same as (1), but the evaluation of the assignment expression will not call any operation that is not trivial. For the purposes of this check, a call to &lt;code&gt;&lt;a href=&quot;../utility/declval&quot;&gt;std::declval&lt;/a&gt;&lt;/code&gt; is considered trivial and not considered an &lt;a href=&quot;../language/definition#ODR-use&quot;&gt;odr-use&lt;/a&gt; of &lt;code&gt;&lt;a href=&quot;../utility/declval&quot;&gt;std::declval&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">2）（1）と同じですが、代入式の評価では、重要な操作は呼び出されません。このチェックの目的のために、への呼び出し &lt;code&gt;&lt;a href=&quot;../utility/declval&quot;&gt;std::declval&lt;/a&gt;&lt;/code&gt; 些細とみなされ、考慮されていない&lt;a href=&quot;../language/definition#ODR-use&quot;&gt;ODR-使用&lt;/a&gt;の &lt;code&gt;&lt;a href=&quot;../utility/declval&quot;&gt;std::declval&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="040bf5037ee6e2b0b7c99f42d9d6e90979f99631" translate="yes" xml:space="preserve">
          <source>2) same as 1), and additionally &lt;code&gt;&lt;a href=&quot;remove_all_extents&quot;&gt;std::remove_all_extents&lt;/a&gt;&amp;lt;T&amp;gt;::type&lt;/code&gt; is either a non-class type or a class type with a trivial destructor.</source>
          <target state="translated">2）1）と同じ、さらに &lt;code&gt;&lt;a href=&quot;remove_all_extents&quot;&gt;std::remove_all_extents&lt;/a&gt;&amp;lt;T&amp;gt;::type&lt;/code&gt; は、非クラス型または自明なデストラクタを持つクラス型です。</target>
        </trans-unit>
        <trans-unit id="5fde760dde32ffe3dbeb0423cd83e67b12e713fb" translate="yes" xml:space="preserve">
          <source>2) same as 1), but the formatted replacement is performed as if by calling &lt;a href=&quot;match_results/format&quot;&gt;&lt;code&gt;out = m.format(out, fmt, fmt + char_traits&amp;lt;charT&amp;gt;::length(fmt), flags)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">2）1）と同じですが、フォーマットされた置換は、&lt;a href=&quot;match_results/format&quot;&gt; &lt;code&gt;out = m.format(out, fmt, fmt + char_traits&amp;lt;charT&amp;gt;::length(fmt), flags)&lt;/code&gt; &lt;/a&gt;呼び出すかのように実行されます</target>
        </trans-unit>
        <trans-unit id="fa0f781ec9fd767be727083ea0b6bc0d022b3634" translate="yes" xml:space="preserve">
          <source>2) same as 1), but the variable definition does not call any operation that is not trivial. For the purposes of this check, the call to &lt;code&gt;&lt;a href=&quot;../utility/declval&quot;&gt;std::declval&lt;/a&gt;&lt;/code&gt; is considered trivial.</source>
          <target state="translated">2）1）と同じですが、変数の定義では、重要な操作は呼び出されません。このチェックのために、 &lt;code&gt;&lt;a href=&quot;../utility/declval&quot;&gt;std::declval&lt;/a&gt;&lt;/code&gt; は簡単なものと見なされます。</target>
        </trans-unit>
        <trans-unit id="9bf77a6ee39f03c968c06bdd069b8f0fab44acc1" translate="yes" xml:space="preserve">
          <source>2) sets the &lt;code&gt;adjustfield&lt;/code&gt; of the stream &lt;code&gt;str&lt;/code&gt; to &lt;code&gt;right&lt;/code&gt; as if by calling &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::right&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::adjustfield&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::right&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::adjustfield&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: right&lt;/a&gt;、&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: adjustfield&lt;/a&gt;）を呼び出すかのように、ストリーム &lt;code&gt;str&lt;/code&gt; の &lt;code&gt;adjustfield&lt;/code&gt; を &lt;code&gt;right&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="6ea314d9ffcbac359db2b200393e32fbd3767e53" translate="yes" xml:space="preserve">
          <source>2) sets the &lt;code&gt;basefield&lt;/code&gt; of the stream &lt;code&gt;str&lt;/code&gt; to &lt;code&gt;hex&lt;/code&gt; as if by calling &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::hex&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::basefield&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::hex&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::basefield&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: hex&lt;/a&gt;、&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: basefield&lt;/a&gt;）を呼び出すかのように、ストリーム &lt;code&gt;str&lt;/code&gt; の &lt;code&gt;basefield&lt;/code&gt; を &lt;code&gt;hex&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="fd06baac4e12d446a33abcc0a3f84fb823191950" translate="yes" xml:space="preserve">
          <source>2) sets the fill character to &lt;code&gt;ch&lt;/code&gt;, returns previous value of the fill character</source>
          <target state="translated">2）フィル文字を &lt;code&gt;ch&lt;/code&gt; に設定し、フィル文字の以前の値を返します</target>
        </trans-unit>
        <trans-unit id="5544c78645ec7a0b4e796edd30f176b5b185272d" translate="yes" xml:space="preserve">
          <source>2) sets the input position indicator to position &lt;code&gt;off&lt;/code&gt;, relative to position, defined by &lt;code&gt;dir&lt;/code&gt;. Specifically, executes &lt;code&gt;rdbuf()-&amp;gt;pubseekoff(off, dir, &lt;a href=&quot;../ios_base/openmode&quot;&gt;std::ios_base::in&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;dir&lt;/code&gt; で定義された位置を基準に &lt;code&gt;off&lt;/code&gt; 、入力位置インジケーターを位置offに設定します。具体的には、 &lt;code&gt;rdbuf()-&amp;gt;pubseekoff(off, dir, &lt;a href=&quot;../ios_base/openmode&quot;&gt;std::ios_base::in&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/openmode&quot;&gt;std :: ios_base :: in&lt;/a&gt;）を実行します。</target>
        </trans-unit>
        <trans-unit id="9c863ac3c9ba4c51f67bffe142fd6d2825fa6de7" translate="yes" xml:space="preserve">
          <source>2) sets the output position indicator to offset &lt;code&gt;off&lt;/code&gt; relative to &lt;code&gt;dir&lt;/code&gt; by calling &lt;code&gt;rdbuf()-&amp;gt;pubseekoff(off, dir, &lt;a href=&quot;../ios_base/openmode&quot;&gt;std::ios_base::out&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;rdbuf()-&amp;gt;pubseekoff(off, dir, &lt;a href=&quot;../ios_base/openmode&quot;&gt;std::ios_base::out&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/openmode&quot;&gt;std :: ios_base :: out&lt;/a&gt;）を呼び出すことにより、出力位置インジケーターを &lt;code&gt;dir&lt;/code&gt; に対してオフセット &lt;code&gt;off&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="422c09505cfb974f530d194e14890378649b74da" translate="yes" xml:space="preserve">
          <source>2) simple by-copy capture that is a &lt;a href=&quot;parameter_pack&quot;&gt;pack expansion&lt;/a&gt;</source>
          <target state="translated">2）&lt;a href=&quot;parameter_pack&quot;&gt;パックの拡張で&lt;/a&gt;ある単純なバイコピーキャプチャ</target>
        </trans-unit>
        <trans-unit id="62337324964c46f8ae9d574acd9e8ea18781c64c" translate="yes" xml:space="preserve">
          <source>2) substring &lt;code&gt;[pos2, pos2 + count2)&lt;/code&gt; of &lt;code&gt;str&lt;/code&gt;, except if &lt;code&gt;count2==npos&lt;/code&gt; or if would extend past &lt;code&gt;str.size()&lt;/code&gt;, &lt;code&gt;[pos2, str.size())&lt;/code&gt; is used.</source>
          <target state="translated">2）サブストリング &lt;code&gt;[pos2, pos2 + count2)&lt;/code&gt; の &lt;code&gt;str&lt;/code&gt; 場合を除き、 &lt;code&gt;count2==npos&lt;/code&gt; や過去伸びるかどう &lt;code&gt;str.size()&lt;/code&gt; 、 &lt;code&gt;[pos2, str.size())&lt;/code&gt; 用いています。</target>
        </trans-unit>
        <trans-unit id="cb0d0968e5aceea7da38db43e4ede65eb85ea624" translate="yes" xml:space="preserve">
          <source>2) subtraction</source>
          <target state="translated">2)減算</target>
        </trans-unit>
        <trans-unit id="85eba9dd44e727bee6ef5572598d349081d2c4ed" translate="yes" xml:space="preserve">
          <source>2) terminate the program (e.g. by calling &lt;code&gt;&lt;a href=&quot;../../error/terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">2）プログラムを終了します（例： &lt;code&gt;&lt;a href=&quot;../../error/terminate&quot;&gt;std::terminate&lt;/a&gt;&lt;/code&gt; 呼び出して）</target>
        </trans-unit>
        <trans-unit id="2e38f68a7a5ee1660aed123acffe528717b1858a" translate="yes" xml:space="preserve">
          <source>2) the &lt;a href=&quot;fe_round&quot;&gt;floating point rounding macro&lt;/a&gt; describing the current rounding direction or a negative value if the direction cannot be determined.</source>
          <target state="translated">2）現在の丸め方向を記述する&lt;a href=&quot;fe_round&quot;&gt;浮動小数点丸めマクロ&lt;/a&gt;、または方向を決定できない場合は負の値。</target>
        </trans-unit>
        <trans-unit id="61cdf37d9e22d6701ff8a91312cc3be8a510bbc3" translate="yes" xml:space="preserve">
          <source>2) the equals sign followed by an expression</source>
          <target state="translated">2)式に続く等号</target>
        </trans-unit>
        <trans-unit id="6849194d4d225f049cba72ebb81aec654d5b7f9c" translate="yes" xml:space="preserve">
          <source>2) the exception thrown by &lt;code&gt;std::unexpected_handler&lt;/code&gt; still violates the exception specification:</source>
          <target state="translated">2） &lt;code&gt;std::unexpected_handler&lt;/code&gt; によってスローされた例外は、依然として例外仕様に違反しています。</target>
        </trans-unit>
        <trans-unit id="d732e7f4be12377ae50409a2eaff4e24e66a812f" translate="yes" xml:space="preserve">
          <source>2) the integral number of minutes &lt;code&gt;since_midnight&lt;/code&gt; is after &lt;code&gt;(00:00:00 + hours())&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;since_midnight&lt;/code&gt; の整数分は &lt;code&gt;(00:00:00 + hours())&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="63345f37c9e05c2005df6177be1f792d4d248c46" translate="yes" xml:space="preserve">
          <source>2) the prefix is a single character</source>
          <target state="translated">2)接頭辞は1文字</target>
        </trans-unit>
        <trans-unit id="bfa7f660ebffe298de690d4fab7feb1a53102985" translate="yes" xml:space="preserve">
          <source>2) the prefix is a single character. Effectively returns &lt;code&gt;!empty() &amp;amp;&amp;amp; Traits::eq(front(), x)&lt;/code&gt;</source>
          <target state="translated">2）接頭辞は1文字です。 &lt;code&gt;!empty() &amp;amp;&amp;amp; Traits::eq(front(), x)&lt;/code&gt; 効果的に返します</target>
        </trans-unit>
        <trans-unit id="6702473a4d8bb1b1d89df01f1d19448729deb164" translate="yes" xml:space="preserve">
          <source>2) the previous byte stream.</source>
          <target state="translated">2)前のバイトストリーム。</target>
        </trans-unit>
        <trans-unit id="28f08b05497ffb72cbe3e2c7c0b6212dfa1f47ff" translate="yes" xml:space="preserve">
          <source>2) the static version of the initialization produces the same value in the initialized variable as would be produced by the dynamic initialization if all variables not required to be initialized statically were initialized dynamically.</source>
          <target state="translated">2)静的に初期化する必要のないすべての変数が動的に初期化されている場合、静的バージョンの初期化では、動的な初期化で生成されるのと同じ値が初期化された変数に生成されます。</target>
        </trans-unit>
        <trans-unit id="8d94628f33dfdde218a3cdc0aaec377ed0669117" translate="yes" xml:space="preserve">
          <source>2) the suffix is a single character</source>
          <target state="translated">2)接尾辞が一文字の場合</target>
        </trans-unit>
        <trans-unit id="620c5465e17ddd3a791e6b26fc6d5cca3448c79c" translate="yes" xml:space="preserve">
          <source>2) the suffix is a single character. Effectively returns &lt;code&gt;!empty() &amp;amp;&amp;amp; Traits::eq(back(), x)&lt;/code&gt;</source>
          <target state="translated">2）サフィックスは単一の文字です。 &lt;code&gt;!empty() &amp;amp;&amp;amp; Traits::eq(back(), x)&lt;/code&gt; 効果的に返します</target>
        </trans-unit>
        <trans-unit id="30957c44c756ec33162837ef900bb78b3e525036" translate="yes" xml:space="preserve">
          <source>2) throws &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;pos&lt;/code&gt; does not correspond to a valid position within the bitset.</source>
          <target state="translated">2） &lt;code&gt;pos&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; 内の有効な位置に対応していない場合、std :: out_of_rangeをスローします。</target>
        </trans-unit>
        <trans-unit id="083e3f94c31c2f99fb9a39f11563a44aae36fff7" translate="yes" xml:space="preserve">
          <source>2) total size of the new array would exceed implementation-defined maximum value.</source>
          <target state="translated">2)新しい配列の合計サイズが,実装で定義された最大値を超える場合。</target>
        </trans-unit>
        <trans-unit id="18b66566486cc99d527e4485b441b36c5c6fe953" translate="yes" xml:space="preserve">
          <source>2) unary left fold</source>
          <target state="translated">2)単項左折</target>
        </trans-unit>
        <trans-unit id="96201f4eb7637c46af19688b2e4dde22bd2fd7ab" translate="yes" xml:space="preserve">
          <source>2) unary minus (negation).</source>
          <target state="translated">2)単項マイナス(否定)。</target>
        </trans-unit>
        <trans-unit id="b2f68d3087fdc4bafce8692c0f66f6935f2ad59e" translate="yes" xml:space="preserve">
          <source>2) value is converted to a string as if by &lt;code&gt;&lt;a href=&quot;../io/c/printf&quot;&gt;std::printf&lt;/a&gt;&lt;/code&gt; in the default (&quot;C&quot;) locale. The conversion specifier is &lt;code&gt;f&lt;/code&gt; or &lt;code&gt;e&lt;/code&gt; (resolving in favor of &lt;code&gt;f&lt;/code&gt; in case of a tie), chosen according to the requirement for a shortest representation: the string representation consists of the smallest number of characters such that there is at least one digit before the radix point (if present) and parsing the representation using the corresponding &lt;a href=&quot;from_chars&quot;&gt;&lt;code&gt;std::from_chars&lt;/code&gt;&lt;/a&gt; function recovers value exactly. If there are several such representations, one with the smallest difference to &lt;code&gt;value&lt;/code&gt; is chosen, resolving any remaining ties using rounding according to &lt;code&gt;&lt;a href=&quot;../types/numeric_limits/float_round_style&quot;&gt;std::round_to_nearest&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">2）値は、デフォルト（ &quot;C&quot;）ロケールの &lt;code&gt;&lt;a href=&quot;../io/c/printf&quot;&gt;std::printf&lt;/a&gt;&lt;/code&gt; と同様に文字列に変換されます。変換指定子は &lt;code&gt;f&lt;/code&gt; または &lt;code&gt;e&lt;/code&gt; （同点の場合は &lt;code&gt;f&lt;/code&gt; を優先して解決）であり、最短の表現の要件に従って選択されます。基数ポイント（存在する場合）および対応する&lt;a href=&quot;from_chars&quot;&gt; &lt;code&gt;std::from_chars&lt;/code&gt; &lt;/a&gt;関数を使用して表現を解析すると、値が正確に回復されます。そのような表現が複数ある場合は、 &lt;code&gt;value&lt;/code&gt; との差が最も小さいものを選択し、残りの結合を &lt;code&gt;&lt;a href=&quot;../types/numeric_limits/float_round_style&quot;&gt;std::round_to_nearest&lt;/a&gt;&lt;/code&gt; に従って丸めを使用して解決します。</target>
        </trans-unit>
        <trans-unit id="cf3e79486507c8bb6a0d07aedec8a96331370665" translate="yes" xml:space="preserve">
          <source>2) when an object with dynamic storage duration is created by a &lt;a href=&quot;new&quot;&gt;new-expression&lt;/a&gt; with no initializer or when an object is created by a new-expression with the initializer consisting of an empty pair of parentheses(until C++03);</source>
          <target state="translated">2）動的ストレージ期間を持つオブジェクトが、初期化子のない&lt;a href=&quot;new&quot;&gt;new-expression&lt;/a&gt;によって作成されたとき、または括弧が空のペアで構成される初期化子のnew-expressionによってオブジェクトが作成されたとき（C ++ 03まで）;</target>
        </trans-unit>
        <trans-unit id="0b6215cf3787fe42bfd61b320c1fbb2949360c37" translate="yes" xml:space="preserve">
          <source>2) when the &lt;a href=&quot;overloaded_address&quot;&gt;address of a function template specialization&lt;/a&gt; is taken</source>
          <target state="translated">2）&lt;a href=&quot;overloaded_address&quot;&gt;関数テンプレート特殊化のアドレス&lt;/a&gt;が取得されたとき</target>
        </trans-unit>
        <trans-unit id="309961c401f19c5969dc3218b3cbe7bde15a51e3" translate="yes" xml:space="preserve">
          <source>2) within the &lt;a href=&quot;function&quot;&gt;declaration&lt;/a&gt; of a non-static member function anywhere after the (optional) cv-qualifier sequence, including &lt;a href=&quot;except_spec&quot;&gt;dynamic exception specification&lt;/a&gt;(deprecated), &lt;a href=&quot;noexcept_spec&quot;&gt;noexcept specification&lt;/a&gt;(C++11), and the trailing return type(since C++11)</source>
          <target state="translated">2）&lt;a href=&quot;except_spec&quot;&gt;動的例外仕様&lt;/a&gt;（非推奨）、&lt;a href=&quot;noexcept_spec&quot;&gt;noexcept仕様&lt;/a&gt;（C ++ 11）、および末尾の戻り型（C ++以降）を含む、（オプションの）cv修飾子シーケンスの後の任意の場所にある非静的メンバー関数の&lt;a href=&quot;function&quot;&gt;宣言&lt;/a&gt;内11）</target>
        </trans-unit>
        <trans-unit id="7bc012a5869f0d7cc3571080bd458da9a19bcb7f" translate="yes" xml:space="preserve">
          <source>2) zero or one</source>
          <target state="translated">2)ゼロまたは1</target>
        </trans-unit>
        <trans-unit id="b68032e197ec2f3a82f44aed13bbe55f177daa36" translate="yes" xml:space="preserve">
          <source>2)(until C++11)when a named variable of a scalar type &lt;code&gt;T&lt;/code&gt; is declared with the initializer consisting of an equals sign followed by a brace-enclosed expression (Note: as of C++11, this is classified as &lt;a href=&quot;list_initialization&quot;&gt;list initialization&lt;/a&gt;, and narrowing conversion is not allowed).</source>
          <target state="translated">2）（C ++ 11まで）スカラー型の名前付き変数 &lt;code&gt;T&lt;/code&gt; の、等号と中括弧で囲まれた式で構成される初期化子で宣言されている場合（注：C ++ 11以降、これは&lt;a href=&quot;list_initialization&quot;&gt;リスト&lt;/a&gt;として分類されます）初期化、およびナローイング変換は許可されていません）。</target>
        </trans-unit>
        <trans-unit id="c98e8d57709194b724950d3113eba02c58efa92c" translate="yes" xml:space="preserve">
          <source>2)&lt;a href=&quot;cast_operator&quot;&gt;user-defined conversion function&lt;/a&gt;;</source>
          <target state="translated">2）&lt;a href=&quot;cast_operator&quot;&gt;ユーザー定義の変換関数&lt;/a&gt; ;</target>
        </trans-unit>
        <trans-unit id="91986c83bc299300b48be931117bb4e5bb08ac39" translate="yes" xml:space="preserve">
          <source>2)&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt; in the statement will execute iteration_expression</source>
          <target state="translated">2）&lt;a href=&quot;continue&quot;&gt;&lt;/a&gt;ステートメントを続行すると、iteration_expressionが実行されます</target>
        </trans-unit>
        <trans-unit id="a33439daf73c7fbc692eaa66fa48355cfaeecb68" translate="yes" xml:space="preserve">
          <source>2)&lt;a href=&quot;continue&quot;&gt;continue&lt;/a&gt; statement;</source>
          <target state="translated">2）&lt;a href=&quot;continue&quot;&gt;継続&lt;/a&gt;ステートメント;</target>
        </trans-unit>
        <trans-unit id="b01e8220c5eaa6f43f0caa381375a0b71590a265" translate="yes" xml:space="preserve">
          <source>2)&lt;a href=&quot;do&quot;&gt;do-while&lt;/a&gt; loop;</source>
          <target state="translated">2）&lt;a href=&quot;do&quot;&gt; do-while&lt;/a&gt;ループ;</target>
        </trans-unit>
        <trans-unit id="f5c2df16cf17af221fc1d03b553776874dc28aef" translate="yes" xml:space="preserve">
          <source>2)&lt;a href=&quot;escape&quot;&gt;Escape sequences&lt;/a&gt; and universal character names in character literals and non-raw string literals are expanded and converted to the</source>
          <target state="translated">2）&lt;a href=&quot;escape&quot;&gt;&lt;/a&gt;文字リテラルおよび非raw文字列リテラルのエスケープシーケンスとユニバーサル文字名が展開され、</target>
        </trans-unit>
        <trans-unit id="51138821a0d6f922459861204dc6af4353b9aef7" translate="yes" xml:space="preserve">
          <source>2)&lt;a href=&quot;function-try-block&quot;&gt;function-try-block&lt;/a&gt; (which is a regular function body wrapped in a try/catch block)</source>
          <target state="translated">2）&lt;a href=&quot;function-try-block&quot;&gt; function-try-block&lt;/a&gt;（これは、try / catchブロックでラップされた通常の関数本体です）</target>
        </trans-unit>
        <trans-unit id="eec7dc365cda0c10c4fff1e5f84f467fccf9fe50" translate="yes" xml:space="preserve">
          <source>2)&lt;a href=&quot;if&quot;&gt;if&lt;/a&gt; statement with an else clause;</source>
          <target state="translated">2）&lt;a href=&quot;if&quot;&gt;&lt;/a&gt; else節を含むifステートメント。</target>
        </trans-unit>
        <trans-unit id="a9a965269fa27f6f5a50240a851257ecf688076a" translate="yes" xml:space="preserve">
          <source>2)&lt;a href=&quot;namespace#Inline_namespaces&quot;&gt;Inline namespace definition&lt;/a&gt; for the namespace ns_name. Declarations inside ns_name will be visible in its enclosing namespace.</source>
          <target state="translated">2）&lt;a href=&quot;namespace#Inline_namespaces&quot;&gt;&lt;/a&gt;ネームスペースns_nameのインラインネームスペース定義。ns_name内の宣言は、それを囲む名前空間に表示されます。</target>
        </trans-unit>
        <trans-unit id="188a0d073dc039d6e86eac5be9dd98834331e16d" translate="yes" xml:space="preserve">
          <source>2)&lt;a href=&quot;this&quot;&gt;&lt;code&gt;*this&lt;/code&gt;&lt;/a&gt; is odr-used if &lt;code&gt;this&lt;/code&gt; appears as a</source>
          <target state="translated">2）&lt;a href=&quot;this&quot;&gt; &lt;code&gt;*this&lt;/code&gt; &lt;/a&gt;は以下の場合にODR使用されます &lt;code&gt;this&lt;/code&gt; が</target>
        </trans-unit>
        <trans-unit id="167daa046c9063e2ff86329a1abd25df65a907cb" translate="yes" xml:space="preserve">
          <source>2)&lt;b&gt;Pointer to member declarator&lt;/b&gt;: the declaration &lt;code&gt;S C::* D;&lt;/code&gt; declares &lt;code&gt;D&lt;/code&gt; as a pointer to non-static member of &lt;code&gt;C&lt;/code&gt; of type determined by decl-specifier-seq&lt;code&gt;S&lt;/code&gt;.</source>
          <target state="translated">2）&lt;b&gt;メンバー宣言子へのポインター&lt;/b&gt;：宣言 &lt;code&gt;S C::* D;&lt;/code&gt; &lt;code&gt;D&lt;/code&gt; をdecl-specifier-seqによって決定されるタイプの &lt;code&gt;C&lt;/code&gt; の非静的メンバーへのポインターとして宣言します &lt;code&gt;S&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="61f159f773894aa1dfa2d0261f590d402930ff0d" translate="yes" xml:space="preserve">
          <source>2)&lt;b&gt;Promotion&lt;/b&gt;: integral promotion, floating-point promotion</source>
          <target state="translated">2）&lt;b&gt;プロモーション&lt;/b&gt;：統合プロモーション、浮動小数点プロモーション</target>
        </trans-unit>
        <trans-unit id="20497d82cd2021b3351ca3f338cd20fcfa75f8d7" translate="yes" xml:space="preserve">
          <source>2)&lt;b&gt;Read-read coherence&lt;/b&gt;: if a value computation A of some atomic M (a read)</source>
          <target state="translated">2）&lt;b&gt;読み取り-読み取りコヒーレンス&lt;/b&gt;：ある原子M（読み取り）の値計算​​A</target>
        </trans-unit>
        <trans-unit id="a1f77cbb89c6cb2d76ae40c6c9354f6b5cf1ed3e" translate="yes" xml:space="preserve">
          <source>2)&lt;b&gt;Rvalue reference declarator&lt;/b&gt;: the declaration &lt;code&gt;S&amp;amp;&amp;amp; D;&lt;/code&gt; declares &lt;code&gt;D&lt;/code&gt; as an</source>
          <target state="translated">2）&lt;b&gt;右辺値参照宣言子&lt;/b&gt;：宣言 &lt;code&gt;S&amp;amp;&amp;amp; D;&lt;/code&gt; 宣言する &lt;code&gt;D&lt;/code&gt; は、として</target>
        </trans-unit>
        <trans-unit id="17aa2b86cd788ca1bca9d7dc2dc4748a8898c88c" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;!(a == b)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;!(a == b)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68d0b5297e5c8c8128bb182e4423740892d91c7a" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;!(lhs == rhs)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;!(lhs == rhs)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a4d0f7d78504e926245fc71573216fb642484916" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;!(x == y)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;!(x == y)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="209c1b247609e7892d029b3ba1cf5a71fa9e1033" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;!(x == y)&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;!(x == y)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3ac5cc2c6f8787cccabf54bfdcf6c6c7da70ac51" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;&quot;C&quot;&lt;/code&gt;, which makes it possible to link with functions written in the C programming language, and to define, in a C++ program, functions that can be called from the modules written in C.</source>
          <target state="translated">2） &lt;code&gt;&quot;C&quot;&lt;/code&gt; は、Cプログラミング言語で記述された関数とリンクし、C ++プログラムで、Cで記述されたモジュールから呼び出すことができる関数を定義できるようにします。</target>
        </trans-unit>
        <trans-unit id="efa2f1dfeca7c20055549fb5a0e6e60b313f6708" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;&amp;amp;a[i+j] == &amp;amp;a[i] + j&lt;/code&gt; This means that valarray elements are adjacent in memory.</source>
          <target state="translated">2） &lt;code&gt;&amp;amp;a[i+j] == &amp;amp;a[i] + j&lt;/code&gt; これは、valarray要素がメモリ内で隣接していることを意味します。</target>
        </trans-unit>
        <trans-unit id="c663ca95a48b238acac9a191fcaf1233ad371a51" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;&lt;a href=&quot;../c/fgetc&quot;&gt;std::fgetc&lt;/a&gt;(f)&lt;/code&gt; and &lt;code&gt;str.rdbuf()-&amp;gt;sbumpc()&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;&lt;a href=&quot;../c/fgetc&quot;&gt;std::fgetc&lt;/a&gt;(f)&lt;/code&gt; および &lt;code&gt;str.rdbuf()-&amp;gt;sbumpc()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="03dc35247d364d06cd2ed344c06491dcca58915d" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;&lt;a href=&quot;../new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; if required additional memory could not be obtained. May throw implementation-defined exception for other errors. &lt;code&gt;delete ptr&lt;/code&gt; is called if an exception occurs.</source>
          <target state="translated">2） &lt;code&gt;&lt;a href=&quot;../new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; 必要な追加メモリを取得できなかった場合）。他のエラーの場合、実装定義の例外をスローする可能性があります。 &lt;code&gt;delete ptr&lt;/code&gt; 例外が発生すると、delete ptrが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="21b412f899d6bd8e2db71c5f644078ec3ba1fff8" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;&lt;a href=&quot;../weekday_last&quot;&gt;std::chrono::weekday_last&lt;/a&gt;(*this)&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;&lt;a href=&quot;../weekday_last&quot;&gt;std::chrono::weekday_last&lt;/a&gt;(*this)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d6a8d61a4904228a32c2542301d01e717400a174" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;&lt;a href=&quot;../year&quot;&gt;std::chrono::year&lt;/a&gt;(-int(*this))&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;&lt;a href=&quot;../year&quot;&gt;std::chrono::year&lt;/a&gt;(-int(*this))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9da2081446b74e8533d68b5bed358389c881ed97" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;&lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;&amp;lt;Dest, &lt;a href=&quot;system_clock&quot;&gt;std::chrono::system_clock&lt;/a&gt;&amp;gt;{}(&lt;br/&gt; &lt;p&gt;&lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;&amp;lt;&lt;a href=&quot;system_clock&quot;&gt;std::chrono::system_clock&lt;/a&gt;, &lt;a href=&quot;utc_clock&quot;&gt;std::chrono::utc_clock&lt;/a&gt;&amp;gt;{}(&lt;br/&gt; &lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;.&lt;/p&gt;
&amp;lt;&lt;a href=&quot;utc_clock&quot;&gt;std::chrono::utc_clock&lt;/a&gt;, Source&amp;gt;{}(t)))&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;&lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;&amp;lt;Dest, &lt;a href=&quot;system_clock&quot;&gt;std::chrono::system_clock&lt;/a&gt;&amp;gt;{}(&lt;br/&gt; &lt;p&gt;&lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;&amp;lt;&lt;a href=&quot;system_clock&quot;&gt;std::chrono::system_clock&lt;/a&gt;, &lt;a href=&quot;utc_clock&quot;&gt;std::chrono::utc_clock&lt;/a&gt;&amp;gt;{}(&lt;br/&gt; &lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;.&lt;/p&gt; &amp;lt;&lt;a href=&quot;utc_clock&quot;&gt;std::chrono::utc_clock&lt;/a&gt;, Source&amp;gt;{}(t)))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5bdc15719dd74f0c6f4f73fa3a42e8e5560d74df" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;&lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;&amp;lt;Dest, &lt;a href=&quot;utc_clock&quot;&gt;std::chrono::utc_clock&lt;/a&gt;&amp;gt;{}(&lt;br/&gt; &lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;&amp;lt;&lt;a href=&quot;utc_clock&quot;&gt;std::chrono::utc_clock&lt;/a&gt;, Source&amp;gt;{}(t))&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;&lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;&amp;lt;Dest, &lt;a href=&quot;utc_clock&quot;&gt;std::chrono::utc_clock&lt;/a&gt;&amp;gt;{}(&lt;br/&gt; &lt;a href=&quot;clock_time_conversion&quot;&gt;std::chrono::clock_time_conversion&lt;/a&gt;&amp;lt;&lt;a href=&quot;utc_clock&quot;&gt;std::chrono::utc_clock&lt;/a&gt;, Source&amp;gt;{}(t))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5fd0a1f3909570ced0b9ae890fc9b11f99be42db" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;&lt;a href=&quot;year_month&quot;&gt;std::chrono::year_month&lt;/a&gt;(y, &lt;a href=&quot;month&quot;&gt;std::chrono::month&lt;/a&gt;(m))&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;&lt;a href=&quot;year_month&quot;&gt;std::chrono::year_month&lt;/a&gt;(y, &lt;a href=&quot;month&quot;&gt;std::chrono::month&lt;/a&gt;(m))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="acd9d7e3b8118ba59ea394984d0f99cabfe6ecf8" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;CD(CD(lhs).count() - CD(rhs).count())&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;CD(CD(lhs).count() - CD(rhs).count())&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6534086490d8319b71fa9e9d4a9d0d77a3840b06" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;O(N log N)&lt;/code&gt; swaps &lt;code&gt;and O(N)&lt;/code&gt; applications of the predicate.</source>
          <target state="translated">2） &lt;code&gt;O(N log N)&lt;/code&gt; スワップ &lt;code&gt;and O(N)&lt;/code&gt; 述語のO（N）アプリケーション。</target>
        </trans-unit>
        <trans-unit id="7ef2cb96bd5ccf1761333f5951c2e5db040dcda2" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;O(N log N)&lt;/code&gt; swaps and &lt;code&gt;O(N)&lt;/code&gt; applications of the predicate</source>
          <target state="translated">2） &lt;code&gt;O(N log N)&lt;/code&gt; スワップおよび &lt;code&gt;O(N)&lt;/code&gt; 述語のアプリケーション</target>
        </trans-unit>
        <trans-unit id="3d75bb5849e659c2d768f741007272a5d59e85c6" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;T&lt;/code&gt; has a constructor which takes &lt;code&gt;Alloc&lt;/code&gt; as the last argument.</source>
          <target state="translated">2） &lt;code&gt;T&lt;/code&gt; には、 &lt;code&gt;Alloc&lt;/code&gt; を最後の引数として取るコンストラクタがあります。</target>
        </trans-unit>
        <trans-unit id="8e17b88d3502f3955838e6da2af2c9bb9a1f0be1" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;atomic_ref&lt;/code&gt; is not &lt;a href=&quot;../../named_req/copyassignable&quot;&gt;CopyAssignable&lt;/a&gt;.</source>
          <target state="translated">2） &lt;code&gt;atomic_ref&lt;/code&gt; はCopyAssignableではありませ&lt;a href=&quot;../../named_req/copyassignable&quot;&gt;ん&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="df09275d22528baad4008ee4c1661aebfd696ae3" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;auto&amp;amp;&amp;amp;&lt;/code&gt; except when deduced from a brace-enclosed initializer list:</source>
          <target state="translated">2） &lt;code&gt;auto&amp;amp;&amp;amp;&lt;/code&gt; ブレースで囲まれたイニシャライザリストから推定される場合を除いて、：</target>
        </trans-unit>
        <trans-unit id="bdf62302556c80a37217ea882bfdeb070d3a3b9a" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;bitset&amp;lt;N&amp;gt;(lhs) |= rhs&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;bitset&amp;lt;N&amp;gt;(lhs) |= rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1e8de1aa93764c63662e23a0edbf0abcb986bed0" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;cmp != 0&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;cmp != 0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ce8a5a15e0bb9875702e4b0d55ed84209615564e" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;dangling&lt;/code&gt; can be constructed from arguments of arbitrary number and arbitrary non-void type. The construction does not have any side-effect itself.</source>
          <target state="translated">2） &lt;code&gt;dangling&lt;/code&gt; は、任意の数と任意の非void型の引数から構成できます。構造自体に副作用はありません。</target>
        </trans-unit>
        <trans-unit id="fc3f48befd81e28228ddc5beb272800d1793f5a1" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ccc3be7b97f38d22a1e17f0b013935646b992a0a" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;false&lt;/code&gt; if the path is absolute, &lt;code&gt;true&lt;/code&gt; otherwise.</source>
          <target state="translated">2）パスが絶対パスの場合は &lt;code&gt;false&lt;/code&gt; 、それ以外の場合は &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="03e0208607adbd050c3d708e8ff2fd0e1c9f6ce3" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;false&lt;/code&gt; if the predicate &lt;code&gt;pred&lt;/code&gt; still evaluates to &lt;code&gt;false&lt;/code&gt; after the &lt;code&gt;rel_time&lt;/code&gt; timeout expired, otherwise &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;false&lt;/code&gt; 述語があれば &lt;code&gt;pred&lt;/code&gt; ががまだあると評価 &lt;code&gt;false&lt;/code&gt; 後 &lt;code&gt;rel_time&lt;/code&gt; タイムアウトの期限が切れそうでない場合、 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2937f73af771d7d2711fc006ab6b9eb827e0884c" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;false&lt;/code&gt; if the predicate &lt;code&gt;pred&lt;/code&gt; still evaluates to &lt;code&gt;false&lt;/code&gt; after the &lt;code&gt;timeout_time&lt;/code&gt; timeout expired, otherwise &lt;code&gt;true&lt;/code&gt;. If the timeout had already expired, evaluates and returns the result of &lt;code&gt;pred&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;false&lt;/code&gt; 述語があれば &lt;code&gt;pred&lt;/code&gt; ががまだあると評価 &lt;code&gt;false&lt;/code&gt; 後 &lt;code&gt;timeout_time&lt;/code&gt; のタイムアウトの期限が切れそうでない場合、 &lt;code&gt;true&lt;/code&gt; 。タイムアウトの期限がすでに切れている場合は、 &lt;code&gt;pred&lt;/code&gt; の結果を評価して返します。</target>
        </trans-unit>
        <trans-unit id="c5b309196039b593e5bde33ca66e5d1ebc71780a" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;from_stream(is, fmt.c_str(), tp, &lt;a href=&quot;../memory/addressof&quot;&gt;std::addressof&lt;/a&gt;(abbrev))&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;from_stream(is, fmt.c_str(), tp, &lt;a href=&quot;../memory/addressof&quot;&gt;std::addressof&lt;/a&gt;(abbrev))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0de3c1229e14304085c63b87dea1a3d01bbe7dbf" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;get()&lt;/code&gt;.</source>
          <target state="translated">2)&lt;code&gt;get()&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="956bf8794e664c4a6a56406efc55a69e5ffb8ffd" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;greater&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;less&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;, otherwise &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;greater&lt;/code&gt; 場合に &lt;code&gt;v&lt;/code&gt; ある &lt;code&gt;less&lt;/code&gt; 、 &lt;code&gt;less&lt;/code&gt; 場合に &lt;code&gt;v&lt;/code&gt; ある &lt;code&gt;greater&lt;/code&gt; 、そうでない場合は &lt;code&gt;v&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ea990990d655c174dfc674caf5fec20a3b3cb7e2" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;high&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;high&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="557907f628f8a4df2207aeeacb4ddc1348607b0f" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;int(x) != int(y)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;int(x) != int(y)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b739feb81f47d8bb969efaec0e9c7cb1af19ded" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;is&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;is&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bd88b678e478307587a341bc9a067cec7e1cf414" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;ist&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;ist&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a17307ad800cb24e7fb176aba00747b738ae261e" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;last&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;last&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac7880d21715c5fae0f76e62a180d1664762db29" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;lhs.base() != rhs.base()&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;lhs.base() != rhs.base()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8babffe6e9283750603d7f4b5b90a1f65de68877" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;log(c.size()) + &lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first, last)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;log(c.size()) + &lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first, last)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7de9d64257b17c86d839e38026fb3af4bb82075b" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;obj-&amp;gt;compare_exchange_strong(*expected, desired)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;obj-&amp;gt;compare_exchange_strong(*expected, desired)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3635cbb0f0f5968f893eefee0ff5678b7314d6af" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;obj-&amp;gt;fetch_add(arg, order)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;obj-&amp;gt;fetch_add(arg, order)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6886be927e5d544963384275f42886f76a4d3987" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;obj-&amp;gt;fetch_and(arg, order)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;obj-&amp;gt;fetch_and(arg, order)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ef2212d45844f497c1aab8e8e06c470b1fb768a9" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;obj-&amp;gt;fetch_or(arg, order)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;obj-&amp;gt;fetch_or(arg, order)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ce9500af54b795a690eff591da1cf50d8028a244" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;obj-&amp;gt;fetch_sub(arg, order)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;obj-&amp;gt;fetch_sub(arg, order)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e1ab3c7bfffc76f60244e1dab4c05c3208eb605b" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;obj-&amp;gt;fetch_xor(arg, order)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;obj-&amp;gt;fetch_xor(arg, order)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8470e7cea6faca21bb2b1d45ce7c0bfb7552ffa9" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;other.get_id()&lt;/code&gt; equal to &lt;code&gt;&lt;a href=&quot;id&quot;&gt;std::thread::id()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;get_id&quot;&gt;get_id()&lt;/a&gt;&lt;/code&gt; returns the value of &lt;code&gt;other.get_id()&lt;/code&gt; prior to the start of construction</source>
          <target state="translated">2） &lt;code&gt;other.get_id()&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;id&quot;&gt;std::thread::id()&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;&lt;a href=&quot;get_id&quot;&gt;get_id()&lt;/a&gt;&lt;/code&gt; 、get_id（）は構築開始前の &lt;code&gt;other.get_id()&lt;/code&gt; の値を返します</target>
        </trans-unit>
        <trans-unit id="2a7c7251cece5e074050666e58aec5887c5eb70e" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;p&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;p&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c885b043f15502c71fdc41eb13ad0dab35453eff" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;promise&lt;/code&gt; is not copy-assignable.</source>
          <target state="translated">2） &lt;code&gt;promise&lt;/code&gt; はコピー割り当て可能ではありません。</target>
        </trans-unit>
        <trans-unit id="2f45cff909050496aac313641faf97c17c2ead19" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;ref(t.get())&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;ref(t.get())&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a07e188a9620802a099d9fca724f54d2fd5fdd28" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;s.end()&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;s.end()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5b12866528a2c911c1f5c811b5f59fc449c53c93" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;std::chrono::get_tzdb_list().front()&lt;/code&gt;.</source>
          <target state="translated">2)&lt;code&gt;std::chrono::get_tzdb_list().front()&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="a4a610da0c2483e0dcc93c17aca83b8098bacc9e" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;std::pmr::vector&lt;/code&gt; is an alias template that uses a &lt;a href=&quot;../memory/polymorphic_allocator&quot;&gt;polymorphic allocator&lt;/a&gt;</source>
          <target state="translated">2） &lt;code&gt;std::pmr::vector&lt;/code&gt; は、&lt;a href=&quot;../memory/polymorphic_allocator&quot;&gt;ポリモーフィックアロケーター&lt;/a&gt;を使用するエイリアステンプレートです。</target>
        </trans-unit>
        <trans-unit id="63687de7020d8df795b2441c184eae9b671e1dfa" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;sv.end()&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;sv.end()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ea97bdab6c615953d04cb8f009a67d59f3778984" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;this&lt;/code&gt;</source>
          <target state="translated">2)&lt;code&gt;this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd92d0ea25d947deb6fe0798ff216199799c8b60" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; do not refer to the same object, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">2） &lt;code&gt;*this&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; が同じオブジェクトを参照していない場合は &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;false&lt;/code&gt; それ以外の場合。</target>
        </trans-unit>
        <trans-unit id="6cbbc40c9ec2fec480131704cdcb6a50f9fcc740" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;a&lt;/code&gt; is</source>
          <target state="translated">2） &lt;code&gt;a&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合</target>
        </trans-unit>
        <trans-unit id="f2481e7d7710cf162f60ff612735fe1d03ebc175" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; are not equal, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 場合 &lt;code&gt;lhs&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; 等しくない、ある &lt;code&gt;false&lt;/code&gt; そう。</target>
        </trans-unit>
        <trans-unit id="c4f5f0094da64c29d409c1ba2c415bfff00d7719" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs&lt;/code&gt; is</source>
          <target state="translated">2） &lt;code&gt;lhs&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合</target>
        </trans-unit>
        <trans-unit id="8872cc369fa854f8baf4c05b786ced317e80c56e" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;path() != rhs.path()&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">2） &lt;code&gt;path() != rhs.path()&lt;/code&gt; 場合は &lt;code&gt;true&lt;/code&gt; 、それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d8ac909094e680682b3c146b6aea624f8b106cd2" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt; or &lt;code&gt;equivalent&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;v&lt;/code&gt; が &lt;code&gt;greater&lt;/code&gt; か &lt;code&gt;equivalent&lt;/code&gt; で &lt;code&gt;true&lt;/code&gt; 場合はtrue、 &lt;code&gt;v&lt;/code&gt; が &lt;code&gt;less&lt;/code&gt; 場合は &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f7670f5df5ce0244c44ee6d7e0007f11e6492346" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt; or &lt;code&gt;equivalent&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;unordered&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;v&lt;/code&gt; が &lt;code&gt;greater&lt;/code&gt; か &lt;code&gt;equivalent&lt;/code&gt; で &lt;code&gt;true&lt;/code&gt; 場合はtrue、 &lt;code&gt;v&lt;/code&gt; が &lt;code&gt;less&lt;/code&gt; か等しい場合は &lt;code&gt;false&lt;/code&gt; &lt;code&gt;unordered&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e7a6df0daf1bf3e22bd7340faab527a0fe8ed4c5" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;, &lt;code&gt;equivalent&lt;/code&gt;, or &lt;code&gt;equal&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 場合に &lt;code&gt;v&lt;/code&gt; ある &lt;code&gt;greater&lt;/code&gt; 、 &lt;code&gt;equivalent&lt;/code&gt; 、または &lt;code&gt;equal&lt;/code&gt; 、および &lt;code&gt;false&lt;/code&gt; 場合に &lt;code&gt;v&lt;/code&gt; ある &lt;code&gt;less&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5faf547f449d141528b8c168939dd4a1baba058e" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;equivalent&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 場合 &lt;code&gt;v&lt;/code&gt; がある &lt;code&gt;greater&lt;/code&gt; 、と &lt;code&gt;false&lt;/code&gt; 場合 &lt;code&gt;v&lt;/code&gt; がある &lt;code&gt;less&lt;/code&gt; または &lt;code&gt;equivalent&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a8ff1a288f926bf97b773c82282a1aa87ed35ac" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;equivalent&lt;/code&gt;, or &lt;code&gt;equal&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 場合に &lt;code&gt;v&lt;/code&gt; で &lt;code&gt;greater&lt;/code&gt; 、そして &lt;code&gt;false&lt;/code&gt; 場合に &lt;code&gt;v&lt;/code&gt; ある &lt;code&gt;less&lt;/code&gt; 、 &lt;code&gt;equivalent&lt;/code&gt; 、又は &lt;code&gt;equal&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ca5b6c3deda05ece1e197fb794aa33090cfb1f07" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;equivalent&lt;/code&gt;, or &lt;code&gt;unordered&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 場合に &lt;code&gt;v&lt;/code&gt; で &lt;code&gt;greater&lt;/code&gt; 、そして &lt;code&gt;false&lt;/code&gt; 場合に &lt;code&gt;v&lt;/code&gt; ある &lt;code&gt;less&lt;/code&gt; 、 &lt;code&gt;equivalent&lt;/code&gt; 、又は &lt;code&gt;unordered&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ebad42849438542001adc103e3fce9deb7075cca" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;equivalent&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;v&lt;/code&gt; が &lt;code&gt;less&lt;/code&gt; か &lt;code&gt;equivalent&lt;/code&gt; で &lt;code&gt;true&lt;/code&gt; 場合はtrue、 &lt;code&gt;v&lt;/code&gt; が &lt;code&gt;greater&lt;/code&gt; 場合は &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6c796b516162af0e3e1844f636929b827becd470" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt; or &lt;code&gt;equivalent&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt; or &lt;code&gt;unordered&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;v&lt;/code&gt; が &lt;code&gt;less&lt;/code&gt; か &lt;code&gt;equivalent&lt;/code&gt; で &lt;code&gt;true&lt;/code&gt; 場合はtrue、 &lt;code&gt;v&lt;/code&gt; が &lt;code&gt;greater&lt;/code&gt; か同等で &lt;code&gt;false&lt;/code&gt; 場合はfalse &lt;code&gt;unordered&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa349488701da2b5bb041f0c069dc832a540a62e" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, &lt;code&gt;equivalent&lt;/code&gt;, or &lt;code&gt;equal&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 場合に &lt;code&gt;v&lt;/code&gt; ある &lt;code&gt;less&lt;/code&gt; 、 &lt;code&gt;equivalent&lt;/code&gt; 、または &lt;code&gt;equal&lt;/code&gt; 、そして &lt;code&gt;false&lt;/code&gt; 場合に &lt;code&gt;v&lt;/code&gt; ある &lt;code&gt;greater&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cb543f0b0635803b005cff8b3d70792484822295" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt; or &lt;code&gt;equivalent&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 場合 &lt;code&gt;v&lt;/code&gt; あり &lt;code&gt;less&lt;/code&gt; 、そして &lt;code&gt;false&lt;/code&gt; 場合 &lt;code&gt;v&lt;/code&gt; はある &lt;code&gt;greater&lt;/code&gt; または &lt;code&gt;equivalent&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0fafe82d07cce3a72ad60f1082ad877e38a7a846" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;, &lt;code&gt;equivalent&lt;/code&gt;, or &lt;code&gt;equal&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 場合に &lt;code&gt;v&lt;/code&gt; ある &lt;code&gt;less&lt;/code&gt; 、そして &lt;code&gt;false&lt;/code&gt; 場合に &lt;code&gt;v&lt;/code&gt; ある &lt;code&gt;greater&lt;/code&gt; 、 &lt;code&gt;equivalent&lt;/code&gt; 、又は &lt;code&gt;equal&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f1c04c48f2380be99a3959e21acedbd7706ca6e7" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;less&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;greater&lt;/code&gt;, &lt;code&gt;equivalent&lt;/code&gt;, or &lt;code&gt;unordered&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; 場合に &lt;code&gt;v&lt;/code&gt; ある &lt;code&gt;less&lt;/code&gt; 、そして &lt;code&gt;false&lt;/code&gt; 場合に &lt;code&gt;v&lt;/code&gt; ある &lt;code&gt;greater&lt;/code&gt; 、 &lt;code&gt;equivalent&lt;/code&gt; 、又は &lt;code&gt;unordered&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="669fedb296937f0eb00beb590eb4c8e5d76deae6" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if any of the bits are set to &lt;code&gt;true&lt;/code&gt;, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;true&lt;/code&gt; ビットのいずれかに設定されている場合 &lt;code&gt;true&lt;/code&gt; そうでない場合、 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="287cc9eae751ada4e1dd47095ac82f3074353eca" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; refer to different time points, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">2） &lt;code&gt;lhs&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; が異なる時点を参照している場合は &lt;code&gt;true&lt;/code&gt; 、そうでない場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e0fc69e6e56c78afd9b58a19ea3fabc3b75c644b" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if the contents of the containers are not equal, &lt;code&gt;false&lt;/code&gt; otherwise</source>
          <target state="translated">2）コンテナーの内容が等しくない場合は &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;false&lt;/code&gt; さもなければ</target>
        </trans-unit>
        <trans-unit id="4f110d7fa78436badfd4c486f7d495c5b954c0b2" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if the engine adaptors are not equivalent, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">2）エンジンアダプターが同等でない場合は &lt;code&gt;true&lt;/code&gt; 、それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7d308c5dcea009527f8637c73b94b3c8d7fa352f" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if the engines are not equivalent, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">2）エンジンが同等でない場合は &lt;code&gt;true&lt;/code&gt; 、そうでない場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f3f37d6d416c5b842473de2bb0dcf54960dd993b" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;true&lt;/code&gt; if the error category or error value compare are not equal.</source>
          <target state="translated">2）エラーカテゴリまたはエラー値の比較が等しくない場合は &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b7acf72ef6740f62149d3e00aa8746801dafb3a" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;unsigned(x) != unsigned(y)&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;unsigned(x) != unsigned(y)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="35e660f8192c1e06658f32d65e5f4c81fc545b6d" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;value&lt;/code&gt; is moved into the new element.</source>
          <target state="translated">2） &lt;code&gt;value&lt;/code&gt; が新しい要素に移動されます。</target>
        </trans-unit>
        <trans-unit id="a2034b68d3bb5a2db84b6d1ac1a90557d76f11fd" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;view::iota(E)&lt;/code&gt; and &lt;code&gt;view::iota(E, F)&lt;/code&gt; are</source>
          <target state="translated">2） &lt;code&gt;view::iota(E)&lt;/code&gt; と &lt;code&gt;view::iota(E, F)&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="ef4883b8e5c4ddc733a492033816ad54c6b64921" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;x.date() != y.date()&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;x.date() != y.date()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5086dbfca06a7a641a147fcc1f91aacab45b4881" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;x.month() != y.month()&lt;/code&gt;</source>
          <target state="translated">2） &lt;code&gt;x.month() != y.month()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd1daf01bf695865810181b1ceec896f7ede3b9d" translate="yes" xml:space="preserve">
          <source>2)&lt;code&gt;x.name() != y.name()&lt;/code&gt;.</source>
          <target state="translated">2） &lt;code&gt;x.name() != y.name()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f72e378da18db8d2186d4ae16a5b235f978d73c8" translate="yes" xml:space="preserve">
          <source>2)digit-sequence representing a whole number with a decimal separator, in this case the exponent is optional: &lt;code&gt;1.&lt;/code&gt;, &lt;code&gt;1.e-2&lt;/code&gt;</source>
          <target state="translated">2）小数点を含む整数を表すdigit-sequence。この場合、指数はオプションです： &lt;code&gt;1.&lt;/code&gt; 、 &lt;code&gt;1.e-2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="446e6652a695015432d0d61d79646a32852def09" translate="yes" xml:space="preserve">
          <source>2)lhs must be an expression of type pointer to class type &lt;code&gt;T*&lt;/code&gt;.</source>
          <target state="translated">2）lhsは、クラス型 &lt;code&gt;T*&lt;/code&gt; へのポインター型の式でなければなりません。</target>
        </trans-unit>
        <trans-unit id="d173a9d60b71f0cf3b81d723c7bcb2084845d154" translate="yes" xml:space="preserve">
          <source>2)root-directory (if any)</source>
          <target state="translated">2)ルートディレクトリ(あれば)</target>
        </trans-unit>
        <trans-unit id="ccbc1bba81b28ef9c3dc15ca80a9ef2fa5bf6618" translate="yes" xml:space="preserve">
          <source>2*arg</source>
          <target state="translated">2*arg</target>
        </trans-unit>
        <trans-unit id="a57d6ad1b24fb56cef62c7ce08063a39f49da8fd" translate="yes" xml:space="preserve">
          <source>2, 4-8) (none)</source>
          <target state="translated">2,4-8)(なし)</target>
        </trans-unit>
        <trans-unit id="2eeedb90968ab94c40f7bd7f3be7d59b5e08f0e0" translate="yes" xml:space="preserve">
          <source>2,3) A copy of the pointed-to shared pointer.</source>
          <target state="translated">2,3)指向された共有ポインタのコピー。</target>
        </trans-unit>
        <trans-unit id="1fbf20b3e41b170f4a6146dae9e7a474742f472e" translate="yes" xml:space="preserve">
          <source>2,3) Applies the operator between each element of the valarray and the scalar.</source>
          <target state="translated">2,3)値配列の各要素とスカラの間に演算子を適用します.</target>
        </trans-unit>
        <trans-unit id="7f541936d449a0b44e0a16f37b1f62331d08f498" translate="yes" xml:space="preserve">
          <source>2,3) Assigns &lt;code&gt;cx.real()&lt;/code&gt; and &lt;code&gt;cx.imag()&lt;/code&gt; to the real and the imaginary parts of the complex number respectively.</source>
          <target state="translated">2,3） &lt;code&gt;cx.real()&lt;/code&gt; と &lt;code&gt;cx.imag()&lt;/code&gt; をそれぞれ複素数の実数部と虚数部に割り当てます。</target>
        </trans-unit>
        <trans-unit id="0a5e4af74c00b93030ced3220c542f8aa2ec422a" translate="yes" xml:space="preserve">
          <source>2,3) Expands to an integer constant expression with value</source>
          <target state="translated">2,3)値を持つ整数定数式への展開</target>
        </trans-unit>
        <trans-unit id="9ba5a933a3a33bf4477ec8b7b37691aae4e37c7a" translate="yes" xml:space="preserve">
          <source>2,3) Same as (1), but accepts any &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../string/basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;, null-terminated multicharacter string, or an input iterator pointing to a null-terminated multicharacter sequence. Equivalent to &lt;code&gt;return operator/=(path(source));&lt;/code&gt;.</source>
          <target state="translated">2,3）（1）と同じですが、任意の &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../../string/basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt; 、nullで終了する複数文字の文字列、またはnullで終了する複数文字のシーケンスを指す入力反復子を受け入れます。相当する &lt;code&gt;return operator/=(path(source));&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bf1a28ef18e811865e16ae09ce175a696143c037" translate="yes" xml:space="preserve">
          <source>2,3) Same as (1), but the object constructed is a possibly-multidimensional array whose every non-array element is initialized as if by the expression &lt;code&gt;&lt;a href=&quot;../allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;A2&amp;gt;::construct(a2, pv)&lt;/code&gt; where &lt;code&gt;a2&lt;/code&gt; of type &lt;code&gt;A2&lt;/code&gt; is the copy of the allocator rebound to manage objects of type &lt;code&gt;&lt;a href=&quot;../../types/remove_cv&quot;&gt;std::remove_cv_t&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/remove_all_extents&quot;&gt;std::remove_all_extents_t&lt;/a&gt;&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;. The overload (2) creates an array of size &lt;code&gt;N&lt;/code&gt; along its first dimension. The array elements are initialized in ascending order of their addresses, and when their lifetime ends are destroyed in the reverse order of their original construction.</source>
          <target state="translated">2,3）（1）と同じですが、構築されたオブジェクトは多次元配列である可能性があり、そのすべての非配列要素は、式 &lt;code&gt;&lt;a href=&quot;../allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;A2&amp;gt;::construct(a2, pv)&lt;/code&gt; where &lt;code&gt;a2&lt;/code&gt; のように初期化されますタイプ &lt;code&gt;A2&lt;/code&gt; は、タイプ &lt;code&gt;&lt;a href=&quot;../../types/remove_cv&quot;&gt;std::remove_cv_t&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/remove_all_extents&quot;&gt;std::remove_all_extents_t&lt;/a&gt;&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; オブジェクトを管理するためのアロケーターリバウンドのコピーです。オーバーロード（2）は、最初の次元に沿ってサイズ &lt;code&gt;N&lt;/code&gt; の配列を作成します。配列要素はアドレスの昇順で初期化され、その寿命が終了すると元の構成とは逆の順序で破棄されます。</target>
        </trans-unit>
        <trans-unit id="018f274ddc47293c462130d5bd238bc492ecf46c" translate="yes" xml:space="preserve">
          <source>2,3) Same as (1), but the object constructed is a possibly-multidimensional array whose non-array elements of type &lt;code&gt;std::remove_all_extents_t&amp;lt;T&amp;gt;&lt;/code&gt; are value-initialized as if by placement-new expression &lt;code&gt;::new(pv) &lt;a href=&quot;../../types/remove_all_extents&quot;&gt;std::remove_all_extents_t&lt;/a&gt;&amp;lt;T&amp;gt;()&lt;/code&gt;. The overload (2) creates an array of size &lt;code&gt;N&lt;/code&gt; along the first dimension. The array elements are initialized in ascending order of their addresses, and when their lifetime ends are destroyed in the reverse order of their original construction.</source>
          <target state="translated">2,3）（1）と同じですが、構築されたオブジェクトは多次元配列である可能性があり、その型が &lt;code&gt;std::remove_all_extents_t&amp;lt;T&amp;gt;&lt;/code&gt; 非配列要素は、プレースメント-新しい式 &lt;code&gt;::new(pv) &lt;a href=&quot;../../types/remove_all_extents&quot;&gt;std::remove_all_extents_t&lt;/a&gt;&amp;lt;T&amp;gt;()&lt;/code&gt; 。オーバーロード（2）は、最初の次元に沿ってサイズ &lt;code&gt;N&lt;/code&gt; の配列を作成します。配列要素はアドレスの昇順で初期化され、その寿命が終了すると元の構成とは逆の順序で破棄されます。</target>
        </trans-unit>
        <trans-unit id="3d453906f3db33d3d81c44ff93850c3210eb625f" translate="yes" xml:space="preserve">
          <source>2,4) Elements are compared using the given binary predicate &lt;code&gt;p&lt;/code&gt;. The behavior is undefined if it is not an equivalence relation.</source>
          <target state="translated">2,4）要素は、与えられたバイナリ述語 &lt;code&gt;p&lt;/code&gt; を使用して比較されます。同値関係でない場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="a9fd0b8ea9fe33311db94688fbdc0e5e98eb140e" translate="yes" xml:space="preserve">
          <source>2,4) O(N) applications of the predicate, and O(N log N) swaps, where N = last - first.</source>
          <target state="translated">2,4)O(N)述語の応用、およびO(N log N)スワップ、ここでN=last-first.</target>
        </trans-unit>
        <trans-unit id="82bfbd27f6c900324f67720ca2a407bd89554dd7" translate="yes" xml:space="preserve">
          <source>2,4) Performs &lt;code&gt;*d_first = *first;&lt;/code&gt;. For every &lt;code&gt;d&lt;/code&gt; in &lt;code&gt;[1, last - first - 1]&lt;/code&gt;, assigns &lt;code&gt;*(first + d) - *(first + d - 1)&lt;/code&gt; (overload (2)) or &lt;code&gt;op(*(first + d), *(first + d - 1))&lt;/code&gt; (overload (4)) to &lt;code&gt;*(d_first + d)&lt;/code&gt;. This is executed according to &lt;code&gt;policy&lt;/code&gt;. This overload only participates in overload resolution if &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true.</source>
          <target state="translated">2,4） &lt;code&gt;*d_first = *first;&lt;/code&gt; 実行します。。すべてのための &lt;code&gt;d&lt;/code&gt; における &lt;code&gt;[1, last - first - 1]&lt;/code&gt; 、割り当て &lt;code&gt;*(first + d) - *(first + d - 1)&lt;/code&gt; （過負荷（2））、または &lt;code&gt;op(*(first + d), *(first + d - 1))&lt;/code&gt; （overload（4））to &lt;code&gt;*(d_first + d)&lt;/code&gt; 。これは &lt;code&gt;policy&lt;/code&gt; に従って実行されます。このオーバーロードは、 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; がtrueの場合にのみ、オーバーロードの解決に参加します。</target>
        </trans-unit>
        <trans-unit id="f2c70c4348c997f8ada3083a9866ea3442c47537" translate="yes" xml:space="preserve">
          <source>2,4) Same as (1) and (3), respectively, but executed according to &lt;code&gt;policy&lt;/code&gt; and the moves may be performed in any order. These overloads does not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true.</source>
          <target state="translated">2,4）それぞれ（1）および（3）と同じですが、 &lt;code&gt;policy&lt;/code&gt; に従って実行され、移動は任意の順序で実行できます。 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; がtrueでない限り、これらのオーバーロードはオーバーロードの解決に参加しません。</target>
        </trans-unit>
        <trans-unit id="7e23a0134ee56102030a6d7a6f0b48bf5b193fa4" translate="yes" xml:space="preserve">
          <source>2,4) Same as (1,3), but executed according to &lt;code&gt;policy&lt;/code&gt;. These overloads do not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true</source>
          <target state="translated">2,4）（1,3）と同じですが、 &lt;code&gt;policy&lt;/code&gt; に従って実行されます。 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; がtrueでない限り、これらのオーバーロードはオーバーロードの解決に参加しません</target>
        </trans-unit>
        <trans-unit id="24d59d8f6154a1aa99b7e79fa09bf73989c0371f" translate="yes" xml:space="preserve">
          <source>2,4) Same as (1,3), but executed according to &lt;code&gt;policy&lt;/code&gt;. These overloads do not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true.</source>
          <target state="translated">2,4）（1,3）と同じですが、 &lt;code&gt;policy&lt;/code&gt; に従って実行されます。 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; がtrueでない限り、これらのオーバーロードはオーバーロードの解決に参加しません。</target>
        </trans-unit>
        <trans-unit id="86b93d93131c4d8e7de7d3ec5d3cdb6efa1deaf7" translate="yes" xml:space="preserve">
          <source>2,4) Same as (1,3), but executed according to &lt;code&gt;policy&lt;/code&gt;. This overload only participates in overload resolution if &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true</source>
          <target state="translated">2,4）（1,3）と同じですが、 &lt;code&gt;policy&lt;/code&gt; に従って実行されます。このオーバーロードは、 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; がtrueの場合にのみ、オーバーロード解決に参加します</target>
        </trans-unit>
        <trans-unit id="86f3e31fcf2db7c0bc61ea56eb43cb46106da43c" translate="yes" xml:space="preserve">
          <source>2,4) Same as (1,3), except the mapped value is constructed from &lt;code&gt;value_type(std::move(k), &lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;M&amp;gt;(obj))&lt;/code&gt;</source>
          <target state="translated">2,4）（1,3）と同じですが、マップされた値が &lt;code&gt;value_type(std::move(k), &lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;M&amp;gt;(obj))&lt;/code&gt; &lt;a href=&quot;../../utility/forward&quot;&gt;std :: forward&lt;/a&gt; &amp;lt;M&amp;gt;（obj））から作成されます</target>
        </trans-unit>
        <trans-unit id="918d9a24234a4b6eaab57e11c9c3d0527b8bc575" translate="yes" xml:space="preserve">
          <source>2,4) The object of type &lt;code&gt;string_type&lt;/code&gt; to use as the representation of &lt;code&gt;false&lt;/code&gt;. The standard specializations of &lt;code&gt;std::numpunct&lt;/code&gt; return &lt;code&gt;&quot;false&quot;&lt;/code&gt; and &lt;code&gt;L&quot;false&quot;&lt;/code&gt;.</source>
          <target state="translated">2,4） &lt;code&gt;false&lt;/code&gt; の表現として使用するタイプ &lt;code&gt;string_type&lt;/code&gt; のオブジェクト。 &lt;code&gt;std::numpunct&lt;/code&gt; の標準的な特殊化は &lt;code&gt;&quot;false&quot;&lt;/code&gt; と &lt;code&gt;L&quot;false&quot;&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="d44bfea873efca969b40fd5f871fa83ea6d17e4e" translate="yes" xml:space="preserve">
          <source>2,4) The value of the atomic variable before the modification. Formally, the value immediately preceding the effects of this function in the &lt;a href=&quot;../memory_order#Modification_order&quot;&gt;modification order&lt;/a&gt; of &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">2,4）変更前のアトミック変数の値。正式には、 &lt;code&gt;*this&lt;/code&gt; の&lt;a href=&quot;../memory_order#Modification_order&quot;&gt;変更順序&lt;/a&gt;でこの関数の効果の直前の値。</target>
        </trans-unit>
        <trans-unit id="4ae83859a203ce9166a88c2baacaa761e0e817c2" translate="yes" xml:space="preserve">
          <source>2,4) The value of the referenced object before the modification.</source>
          <target state="translated">2,4)変更前の参照オブジェクトの値。</target>
        </trans-unit>
        <trans-unit id="e08c409333299d333c6484f0c8e738bbbac6725b" translate="yes" xml:space="preserve">
          <source>2,4) a copy of the &lt;code&gt;day&lt;/code&gt; made before modification</source>
          <target state="translated">2,4）変更前に作成された &lt;code&gt;day&lt;/code&gt; コピー</target>
        </trans-unit>
        <trans-unit id="19f62009cf80411e41d4843867ad567578f32188" translate="yes" xml:space="preserve">
          <source>2,4) a copy of the &lt;code&gt;month&lt;/code&gt; made before modification</source>
          <target state="translated">2,4）変更前に作成された &lt;code&gt;month&lt;/code&gt; コピー</target>
        </trans-unit>
        <trans-unit id="e33ea80cde798ea0598cf06c35fd6879cd8fe605" translate="yes" xml:space="preserve">
          <source>2,4) a copy of the &lt;code&gt;time_point&lt;/code&gt; made before modification</source>
          <target state="translated">2,4）変更前に &lt;code&gt;time_point&lt;/code&gt; れたtime_pointのコピー</target>
        </trans-unit>
        <trans-unit id="3791d25d6538cdfe2b33ae1eb6bb04fcf70cc2dc" translate="yes" xml:space="preserve">
          <source>2,4) a copy of the &lt;code&gt;weekday&lt;/code&gt; made before modification</source>
          <target state="translated">2,4）変更前に作成された &lt;code&gt;weekday&lt;/code&gt; コピー</target>
        </trans-unit>
        <trans-unit id="e542c06cfbd7a826f7b1876b6eb5154d84d94242" translate="yes" xml:space="preserve">
          <source>2,4) a copy of the &lt;code&gt;year&lt;/code&gt; made before modification</source>
          <target state="translated">2,4）変更前に作成された &lt;code&gt;year&lt;/code&gt; コピー</target>
        </trans-unit>
        <trans-unit id="2d94fdd2ad152c7fecf4d370a5a9d9ea672955ad" translate="yes" xml:space="preserve">
          <source>2,4) a copy of the duration made before modification</source>
          <target state="translated">2,4)変更前に作成された期間のコピー</target>
        </trans-unit>
        <trans-unit id="6799429717fc8f4c3da105fa656767ff8d9b555f" translate="yes" xml:space="preserve">
          <source>2,4) type is &lt;a href=&quot;decltype&quot;&gt;&lt;code&gt;decltype(e)&lt;/code&gt;&lt;/a&gt;, where &lt;code&gt;e&lt;/code&gt; is the initializer.</source>
          <target state="translated">2,4）タイプは&lt;a href=&quot;decltype&quot;&gt; &lt;code&gt;decltype(e)&lt;/code&gt; &lt;/a&gt;で、 &lt;code&gt;e&lt;/code&gt; は初期化子です。</target>
        </trans-unit>
        <trans-unit id="216b22061fff2e1006cda85a67ec6ef180591376" translate="yes" xml:space="preserve">
          <source>2,4)&lt;code&gt;*this&lt;/code&gt;</source>
          <target state="translated">2,4)&lt;code&gt;*this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="82a86776052eec0eab672ec07043fdf2b3dd0395" translate="yes" xml:space="preserve">
          <source>2,4)&lt;code&gt;O(&lt;a href=&quot;../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first1, last1) + &lt;a href=&quot;../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first2, last2))&lt;/code&gt;</source>
          <target state="translated">2,4） &lt;code&gt;O(&lt;a href=&quot;../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first1, last1) + &lt;a href=&quot;../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first2, last2))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7ab87de2e789914e676e6d2bb6b8a4775bf3a9c7" translate="yes" xml:space="preserve">
          <source>2,4)&lt;code&gt;O(N log N)&lt;/code&gt; comparisons.</source>
          <target state="translated">2,4） &lt;code&gt;O(N log N)&lt;/code&gt; の比較。</target>
        </trans-unit>
        <trans-unit id="e9aa2496405f6a2ea1fcb56cc9009f28d2f0dcb0" translate="yes" xml:space="preserve">
          <source>2,4)&lt;code&gt;O(last-first)&lt;/code&gt; applications of the corresponding predicate.</source>
          <target state="translated">2,4）対応する述語の &lt;code&gt;O(last-first)&lt;/code&gt; アプリケーション。</target>
        </trans-unit>
        <trans-unit id="5b9f0b74be025b0dc4b7ef0dc2adf927918206f7" translate="yes" xml:space="preserve">
          <source>2,4)&lt;code&gt;end&lt;/code&gt;</source>
          <target state="translated">2,4)&lt;code&gt;end&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8de80d6dff656985a666188baa2ab5f4106fee86" translate="yes" xml:space="preserve">
          <source>2,4)&lt;code&gt;end&lt;/code&gt;.</source>
          <target state="translated">2,4)&lt;code&gt;end&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="00383d73e24daabb7d9b6599e85970721380f34f" translate="yes" xml:space="preserve">
          <source>2,4)&lt;code&gt;high&lt;/code&gt;</source>
          <target state="translated">2,4)&lt;code&gt;high&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="716afc08a0831396510b7316c8cd1087855f0db7" translate="yes" xml:space="preserve">
          <source>2,4,5,6) Throws any exception thrown by the constructor of the contained type.</source>
          <target state="translated">2,4,5,6)含まれる型のコンストラクタからスローされた例外をスローします。</target>
        </trans-unit>
        <trans-unit id="92d1d705523a7a8cb79bfb49d3e6d4bf49999160" translate="yes" xml:space="preserve">
          <source>2,4,6) Same as (1,3,5), but executed according to &lt;code&gt;policy&lt;/code&gt;. These overloads do not participate in overload resolution unless &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true</source>
          <target state="translated">2,4,6）（1,3,5）と同じですが、 &lt;code&gt;policy&lt;/code&gt; に従って実行されます。 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; がtrueでない限り、これらのオーバーロードはオーバーロードの解決に参加しません</target>
        </trans-unit>
        <trans-unit id="53cefd5728cb595aa61919f16f02740aa20b127d" translate="yes" xml:space="preserve">
          <source>2,4,6) Same as (1,3,5), but executed according to &lt;code&gt;policy&lt;/code&gt;. This overload only participates in overload resolution if &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true</source>
          <target state="translated">2,4,6）（1,3,5）と同じですが、 &lt;code&gt;policy&lt;/code&gt; に従って実行されます。このオーバーロードは、 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; がtrueの場合にのみ、オーバーロード解決に参加します</target>
        </trans-unit>
        <trans-unit id="39c0eb8a2d4bcf5102382b35a0547b3dc653b8ad" translate="yes" xml:space="preserve">
          <source>2,4,6) Same as (1,3,5), but uses &lt;code&gt;r&lt;/code&gt; as the source range, as if using &lt;code&gt;ranges::begin(r)&lt;/code&gt; as &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;ranges::end(r)&lt;/code&gt; as &lt;code&gt;last&lt;/code&gt;.</source>
          <target state="translated">2,4,6）（1,3,5）と同じですが、 &lt;code&gt;ranges::begin(r)&lt;/code&gt; を &lt;code&gt;first&lt;/code&gt; として使用し、 &lt;code&gt;ranges::end(r)&lt;/code&gt; を &lt;code&gt;last&lt;/code&gt; として使用するかのように、ソース範囲として &lt;code&gt;r&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="f16da40abb78f97ba13b5d63ffc526f9398f845f" translate="yes" xml:space="preserve">
          <source>2,4,6)&lt;code&gt;O(last-first)&lt;/code&gt; applications of the predicate</source>
          <target state="translated">2,4,6）述語の &lt;code&gt;O(last-first)&lt;/code&gt; アプリケーション</target>
        </trans-unit>
        <trans-unit id="f8e4aead195ed743595e6e6ae9859d5e747fcf09" translate="yes" xml:space="preserve">
          <source>2,4,6,8) Same as (1,3,5,7), but executed according to &lt;code&gt;policy&lt;/code&gt;. This overload only participates in overload resolution if &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; is true</source>
          <target state="translated">2,4,6,8）（1,3,5,7）と同じですが、 &lt;code&gt;policy&lt;/code&gt; に従って実行されます。このオーバーロードは、 &lt;code&gt;&lt;a href=&quot;is_execution_policy&quot;&gt;std::is_execution_policy_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ExecutionPolicy&amp;gt;&amp;gt;&lt;/code&gt; がtrueの場合にのみ、オーバーロード解決に参加します</target>
        </trans-unit>
        <trans-unit id="ad1b343f55d0b389cca0a209a5ee49a16e5f70d1" translate="yes" xml:space="preserve">
          <source>2,4,6,8) same, but the complexity is specified as O(x), rather than &quot;at most x&quot;</source>
          <target state="translated">2,4,6,8)と同じですが、複雑さはO(x)と指定されています。</target>
        </trans-unit>
        <trans-unit id="3e6a52365e1b13ced4b61bed6e82ccaa4dd25594" translate="yes" xml:space="preserve">
          <source>2,6) Subtracts &lt;code&gt;other&lt;/code&gt; from &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">2,6） &lt;code&gt;*this&lt;/code&gt; から &lt;code&gt;other&lt;/code&gt; を減算します。</target>
        </trans-unit>
        <trans-unit id="b8fedb0dda8560210a9d701d71d490f5698436c7" translate="yes" xml:space="preserve">
          <source>2,6) when an object with dynamic storage duration is created by a &lt;a href=&quot;new&quot;&gt;new-expression&lt;/a&gt; with the initializer consisting of an empty pair of parentheses or braces(since C++11);</source>
          <target state="translated">2,6）動的ストレージ期間のオブジェクトが、括弧または中括弧の空のペアで構成されるイニシャライザを備えた&lt;a href=&quot;new&quot;&gt;new-expression&lt;/a&gt;によって作成された場合（C ++ 11以降）。</target>
        </trans-unit>
        <trans-unit id="b63fd28bc6d3336dcf79fecc0debc624e0e77a98" translate="yes" xml:space="preserve">
          <source>2-1074</source>
          <target state="translated">2-1074</target>
        </trans-unit>
        <trans-unit id="94963ab36f819bd40319201d4921403178e34b4b" translate="yes" xml:space="preserve">
          <source>2-149</source>
          <target state="translated">2-149</target>
        </trans-unit>
        <trans-unit id="516e471b863562f9eb4fdd5c58c36fa25d326323" translate="yes" xml:space="preserve">
          <source>2-3) (none)</source>
          <target state="translated">2-3)(なし)</target>
        </trans-unit>
        <trans-unit id="0aa8dcbb8de0bf30bc36092ba04ce217c33a893d" translate="yes" xml:space="preserve">
          <source>2-3) &lt;code&gt;bool&lt;/code&gt;</source>
          <target state="translated">2-3） &lt;code&gt;bool&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="740751042416ade8ac442d2d79ce8b0d75bc3c1b" translate="yes" xml:space="preserve">
          <source>2-3) Assigns the state of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">2-3） &lt;code&gt;other&lt;/code&gt; の状態を割り当てます。</target>
        </trans-unit>
        <trans-unit id="889691d541af4e86b741adf70af8ab79df8a09da" translate="yes" xml:space="preserve">
          <source>2-3) Constructs a &lt;code&gt;polymorphic_allocator&lt;/code&gt; using &lt;code&gt;other.resource()&lt;/code&gt; as the underlying memory resource.</source>
          <target state="translated">2-3）基になるメモリリソースとして &lt;code&gt;other.resource()&lt;/code&gt; を使用して &lt;code&gt;polymorphic_allocator&lt;/code&gt; を構築します。</target>
        </trans-unit>
        <trans-unit id="7bfc152513f74bc3f451b1d8fa223f5179a67f6e" translate="yes" xml:space="preserve">
          <source>2-3) Copies (2) or moves (3) content of &lt;code&gt;other&lt;/code&gt; into a new instance, so that any content is equivalent in both type and value to those of &lt;code&gt;other&lt;/code&gt; prior to the constructor call, or empty if &lt;code&gt;other&lt;/code&gt; is empty. Formally,</source>
          <target state="translated">2-3） &lt;code&gt;other&lt;/code&gt; のコンテンツを新しいインスタンスにコピー（2）または移動（3）します。これにより、すべてのコンテンツのタイプと値の両方が、コンストラクター呼び出し &lt;code&gt;other&lt;/code&gt; 前にotherと同等になるか、 &lt;code&gt;other&lt;/code&gt; が空の場合は空になります。正式には</target>
        </trans-unit>
        <trans-unit id="4ef6e9ddbb0060905f916920d28833ac56897878" translate="yes" xml:space="preserve">
          <source>2-3) Copy and move constructors are defaulted.</source>
          <target state="translated">2-3)コピーと移動のコンストラクタはデフォルトです。</target>
        </trans-unit>
        <trans-unit id="e5ec3fa89ad90a7aa3abfd97ec4476c90c5eb7dc" translate="yes" xml:space="preserve">
          <source>2-3) First, performs the same steps as the default constructor, then associates the stream with a file by calling &lt;code&gt;rdbuf()-&amp;gt;open(filename, mode | &lt;a href=&quot;../ios_base/openmode&quot;&gt;std::ios_base::in&lt;/a&gt;)&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;../basic_filebuf/open&quot;&gt;std::basic_filebuf::open&lt;/a&gt;&lt;/code&gt; for the details on the effects of that call). If the &lt;code&gt;open()&lt;/code&gt; call returns a null pointer, sets &lt;code&gt;setstate(failbit)&lt;/code&gt;. Overload (3) is only provided if &lt;code&gt;std::filesystem::path::value_type&lt;/code&gt; is not &lt;code&gt;char&lt;/code&gt;.(since C++17)</source>
          <target state="translated">2-3）最初に、デフォルトのコンストラクターと同じ手順を実行し、次に &lt;code&gt;rdbuf()-&amp;gt;open(filename, mode | &lt;a href=&quot;../ios_base/openmode&quot;&gt;std::ios_base::in&lt;/a&gt;)&lt;/code&gt; 呼び出してストリームをファイルに関連付けます（ &lt;code&gt;&lt;a href=&quot;../basic_filebuf/open&quot;&gt;std::basic_filebuf::open&lt;/a&gt;&lt;/code&gt; 参照： ：openは、その呼び出しの影響の詳細を表示します）。 &lt;code&gt;open()&lt;/code&gt; 呼び出しがnullポインターを返す場合、 &lt;code&gt;setstate(failbit)&lt;/code&gt; を設定します。オーバーロード（3）は、 &lt;code&gt;std::filesystem::path::value_type&lt;/code&gt; が &lt;code&gt;char&lt;/code&gt; でない場合にのみ提供されます。（C ++ 17以降）</target>
        </trans-unit>
        <trans-unit id="af710b1b50adee94452ffb3c81b729f9644bd669" translate="yes" xml:space="preserve">
          <source>2-3) First, performs the same steps as the default constructor, then associates the stream with a file by calling &lt;code&gt;rdbuf()-&amp;gt;open(filename, mode | &lt;a href=&quot;../ios_base/openmode&quot;&gt;std::ios_base::out&lt;/a&gt;)&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;../basic_filebuf/open&quot;&gt;std::basic_filebuf::open&lt;/a&gt;&lt;/code&gt; for the details on the effects of that call). If the &lt;code&gt;open()&lt;/code&gt; call returns a null pointer, sets &lt;code&gt;setstate(failbit)&lt;/code&gt;. Overload (3) is only provided if &lt;code&gt;std::filesystem::path::value_type&lt;/code&gt; is not &lt;code&gt;char&lt;/code&gt;.(since C++17)</source>
          <target state="translated">2-3）最初に、デフォルトのコンストラクターと同じ手順を実行し、次に &lt;code&gt;rdbuf()-&amp;gt;open(filename, mode | &lt;a href=&quot;../ios_base/openmode&quot;&gt;std::ios_base::out&lt;/a&gt;)&lt;/code&gt; 呼び出してストリームをファイルに関連付けます（ &lt;code&gt;&lt;a href=&quot;../basic_filebuf/open&quot;&gt;std::basic_filebuf::open&lt;/a&gt;&lt;/code&gt; 参照： ：openは、その呼び出しの影響の詳細を表示します）。 &lt;code&gt;open()&lt;/code&gt; 呼び出しがnullポインターを返す場合、 &lt;code&gt;setstate(failbit)&lt;/code&gt; を設定します。オーバーロード（3）は、 &lt;code&gt;std::filesystem::path::value_type&lt;/code&gt; が &lt;code&gt;char&lt;/code&gt; でない場合にのみ提供されます。（C ++ 17以降）</target>
        </trans-unit>
        <trans-unit id="a4cc98c07fb98634c349771cc526894afed8857f" translate="yes" xml:space="preserve">
          <source>2-3) First, performs the same steps as the default constructor, then associates the stream with a file by calling &lt;code&gt;rdbuf()-&amp;gt;open(filename, mode)&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;../basic_filebuf/open&quot;&gt;std::basic_filebuf::open&lt;/a&gt;&lt;/code&gt; for the details on the effects of that call). If the &lt;code&gt;open()&lt;/code&gt; call returns a null pointer, sets &lt;code&gt;setstate(failbit)&lt;/code&gt;. Overload (3) is only provided if &lt;code&gt;std::filesystem::path::value_type&lt;/code&gt; is not &lt;code&gt;char&lt;/code&gt;.(since C++17)</source>
          <target state="translated">2-3）まず、実行するデフォルトコンストラクタと同じ手順、そして呼び出すことによって、ファイルストリームと結びつける &lt;code&gt;rdbuf()-&amp;gt;open(filename, mode)&lt;/code&gt; （参照 &lt;code&gt;&lt;a href=&quot;../basic_filebuf/open&quot;&gt;std::basic_filebuf::open&lt;/a&gt;&lt;/code&gt; 効果の詳細については、その呼び出しの）。 &lt;code&gt;open()&lt;/code&gt; 呼び出しがnullポインターを返す場合、 &lt;code&gt;setstate(failbit)&lt;/code&gt; を設定します。オーバーロード（3）は、 &lt;code&gt;std::filesystem::path::value_type&lt;/code&gt; が &lt;code&gt;char&lt;/code&gt; でない場合にのみ提供されます。（C ++ 17以降）</target>
        </trans-unit>
        <trans-unit id="ac1a3cb5611393a23cd5b6bae53cdf7081154423" translate="yes" xml:space="preserve">
          <source>2-3) Linear in &lt;code&gt;count&lt;/code&gt;</source>
          <target state="translated">2-3） &lt;code&gt;count&lt;/code&gt; 線形</target>
        </trans-unit>
        <trans-unit id="0653ebee98127d5677f6e705dbde0779dcb5a981" translate="yes" xml:space="preserve">
          <source>2-3) These deduction guides are provided for &lt;code&gt;&lt;a href=&quot;../basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; to allow deduction from a &lt;code&gt;&lt;a href=&quot;../basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;size_type&lt;/code&gt; parameter type in (3) refers to the &lt;code&gt;size_type&lt;/code&gt; member type of the type deduced by the deduction guide. These overloads only participate in overload resolution if &lt;code&gt;Alloc&lt;/code&gt; satisfies &lt;a href=&quot;../../named_req/allocator&quot;&gt;Allocator&lt;/a&gt;.</source>
          <target state="translated">2-3）これらの控除ガイドをするために設けられている &lt;code&gt;&lt;a href=&quot;../basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; から控除できるようにする &lt;code&gt;&lt;a href=&quot;../basic_string_view&quot;&gt;std::basic_string_view&lt;/a&gt;&lt;/code&gt; 。（3）の &lt;code&gt;size_type&lt;/code&gt; パラメーターの型は、演繹ガイドによって推定された型の &lt;code&gt;size_type&lt;/code&gt; メンバー型を指します。これらのオーバーロードは、 &lt;code&gt;Alloc&lt;/code&gt; が&lt;a href=&quot;../../named_req/allocator&quot;&gt;Allocatorを&lt;/a&gt;満たす場合にのみ、オーバーロードの解決に参加します。</target>
        </trans-unit>
        <trans-unit id="bc443359bc7da4318780f5fab12b2865c734117b" translate="yes" xml:space="preserve">
          <source>2-3) Throws nothing.</source>
          <target state="translated">2-3)何も投げない。</target>
        </trans-unit>
        <trans-unit id="587c3d9cdb15c3845ebca72f800e9ac08fe5a765" translate="yes" xml:space="preserve">
          <source>2-3)&lt;code&gt;&lt;a href=&quot;../regex_error&quot;&gt;std::regex_error&lt;/a&gt;&lt;/code&gt; if the supplied regular expression is not valid.</source>
          <target state="translated">2-3）指定された正規表現が有効でない場合、 &lt;code&gt;&lt;a href=&quot;../regex_error&quot;&gt;std::regex_error&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5453310cbaed08a6a438ac8591e07014d55e7a8e" translate="yes" xml:space="preserve">
          <source>2-4) Replaces the managed object with an object pointed to by &lt;code&gt;ptr&lt;/code&gt;. &lt;code&gt;Y&lt;/code&gt; must be a complete type and implicitly convertible to &lt;code&gt;T&lt;/code&gt;. Additionally:</source>
          <target state="translated">2-4）管理対象オブジェクトを、 &lt;code&gt;ptr&lt;/code&gt; が指すオブジェクトに置き換えます。 &lt;code&gt;Y&lt;/code&gt; は完全な型で、暗黙的に &lt;code&gt;T&lt;/code&gt; に変換可能でなければなりません。さらに：</target>
        </trans-unit>
        <trans-unit id="c3b4b5e4cfda469127ab508c67ab25aa8ac7bd9a" translate="yes" xml:space="preserve">
          <source>2-4) in the specialization for arrays behave the same as the constructors that take a pointer parameter in the primary template except that they additionally do not participate in overload resolution unless one of the following is true:</source>
          <target state="translated">2-4)の配列の特殊化は,以下のいずれかが真でない限りオーバーロード解決に参加しないことを除いては,プライマリテンプレート内のポインタパラメータを取るコンストラクタと同じ動作をします.</target>
        </trans-unit>
        <trans-unit id="bab11a81a191ef4f40ffd3d426d5a68fccc4e31e" translate="yes" xml:space="preserve">
          <source>2-4) linear in &lt;code&gt;count&lt;/code&gt;</source>
          <target state="translated">2-4） &lt;code&gt;count&lt;/code&gt; 線形</target>
        </trans-unit>
        <trans-unit id="07f1cf8e1830909c73f8514ca9ae21b1aaf53359" translate="yes" xml:space="preserve">
          <source>2-5) First, copies the list of the requested submatch out of the &lt;code&gt;submatches&lt;/code&gt; or &lt;code&gt;submatch&lt;/code&gt; argument into the member list stored in the iterator and constructs the member &lt;code&gt;&lt;a href=&quot;../regex_iterator&quot;&gt;std::regex_iterator&lt;/a&gt;&lt;/code&gt; by passing &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;re&lt;/code&gt;, and &lt;code&gt;m&lt;/code&gt; to its four-argument constructor (that constructor performs the initial call to &lt;code&gt;&lt;a href=&quot;../regex_search&quot;&gt;std::regex_search&lt;/a&gt;&lt;/code&gt;) and sets the internal counter of submatches to zero.</source>
          <target state="translated">2-5）まず、外コピー要求部分マッチのリストを &lt;code&gt;submatches&lt;/code&gt; 又は &lt;code&gt;submatch&lt;/code&gt; イテレータに格納されているメンバーリストに引数とメンバ構築 &lt;code&gt;&lt;a href=&quot;../regex_iterator&quot;&gt;std::regex_iterator&lt;/a&gt;&lt;/code&gt; 通過させることにより、 &lt;code&gt;b&lt;/code&gt; 、 &lt;code&gt;re&lt;/code&gt; 、および &lt;code&gt;m&lt;/code&gt; は、その四に引数コンストラクター（そのコンストラクターは &lt;code&gt;&lt;a href=&quot;../regex_search&quot;&gt;std::regex_search&lt;/a&gt;&lt;/code&gt; への最初の呼び出しを実行します）とサブマッチの内部カウンターをゼロに設定します。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd7f0186fa34163a5969c15d6ebcb56229957b74" translate="yes" xml:space="preserve">
          <source>2-5) The overload that does not take a &lt;code&gt;&lt;a href=&quot;../../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; parameter throws &lt;a href=&quot;../filesystem_error&quot;&gt;&lt;code&gt;filesystem_error&lt;/code&gt;&lt;/a&gt; on underlying OS API errors, constructed with &lt;code&gt;p&lt;/code&gt; as the first path argument and the OS error code as the error code argument. The overload taking a &lt;code&gt;&lt;a href=&quot;../../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; parameter sets it to the OS API error code if an OS API call fails, and executes &lt;code&gt;ec.clear()&lt;/code&gt; if no errors occur. Any overload not marked &lt;code&gt;noexcept&lt;/code&gt; may throw &lt;code&gt;&lt;a href=&quot;../../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; if memory allocation fails.</source>
          <target state="translated">2-5） &lt;code&gt;&lt;a href=&quot;../../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; パラメーターを取らないオーバーロードは、最初のパス引数として &lt;code&gt;p&lt;/code&gt; を使用し、エラーコード引数としてOSエラーコードを使用して構築された、基になるOS APIエラーに対して&lt;a href=&quot;../filesystem_error&quot;&gt; &lt;code&gt;filesystem_error&lt;/code&gt; &lt;/a&gt;をスローします。 &lt;code&gt;&lt;a href=&quot;../../error/error_code&quot;&gt;std::error_code&lt;/a&gt;&amp;amp;&lt;/code&gt; ＆パラメータを取るオーバーロードは、OS API呼び出しが失敗した場合にOS APIエラーコードに設定し、エラーが発生しない場合は &lt;code&gt;ec.clear()&lt;/code&gt; を実行します。 &lt;code&gt;noexcept&lt;/code&gt; とマークされていないオーバーロードは、メモリの割り当てに失敗した場合に &lt;code&gt;&lt;a href=&quot;../../memory/new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; スローする可能性があります。</target>
        </trans-unit>
        <trans-unit id="a93e93a5dcf699744c91784f301e4092ebc0ed6f" translate="yes" xml:space="preserve">
          <source>2-6) Throws any exception thrown by the constructor or assignment operator of &lt;code&gt;T&lt;/code&gt;. If an exception is thrown, the initialization state of &lt;code&gt;*this&lt;/code&gt; (and of &lt;code&gt;other&lt;/code&gt; in case of (2-3) and (5-6) ) is unchanged, i.e. if the object contained a value, it still contains a value, and the other way round. The contents of &lt;code&gt;value&lt;/code&gt; and the contained values of &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt; depend on the exception safety guarantees of the operation from which the exception originates (copy-constructor, move-assignment, etc.).</source>
          <target state="translated">2-6） &lt;code&gt;T&lt;/code&gt; のコンストラクタまたは代入演算子によってスローされた例外をスローします。例外がスローされた場合、 &lt;code&gt;*this&lt;/code&gt; （および（2-3）と（5-6）の場合は &lt;code&gt;other&lt;/code&gt; ）の初期化状態は変更されません。つまり、オブジェクトに値が含まれている場合でも、オブジェクトには値が含まれ、別の方法で。 &lt;code&gt;value&lt;/code&gt; の内容と &lt;code&gt;*this&lt;/code&gt; および &lt;code&gt;other&lt;/code&gt; の含まれる値は、例外が発生した操作の例外安全性保証（コピーコンストラクター、移動割り当てなど）に依存します。</target>
        </trans-unit>
        <trans-unit id="8168f14f6082b85346fd88fc93ff27220a67c1bd" translate="yes" xml:space="preserve">
          <source>2-6)&lt;code&gt;*this&lt;/code&gt;</source>
          <target state="translated">2-6)&lt;code&gt;*this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6fca03c9c3234b4ce9edc76e008229226b7c4185" translate="yes" xml:space="preserve">
          <source>2. Omitted, in which case it is &lt;code&gt;int&lt;/code&gt; for scoped enumerations or an implementation-defined integral type capable of representing all values of the enum (for unscoped enumerations).</source>
          <target state="translated">2.省略。その場合、スコープ付き列挙型または列挙型のすべての値を表すことができる実装定義の整数型（スコープなし列挙型の場合）は &lt;code&gt;int&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bb9bcd435bd2ebea492b9adefdaf2a99e9f2889f" translate="yes" xml:space="preserve">
          <source>2. Otherwise, if either argument is &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;double&amp;gt;&lt;/code&gt; or integer type, then both arguments are cast to &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;double&amp;gt;&lt;/code&gt;</source>
          <target state="translated">2.それ以外の場合、いずれかの引数が &lt;code&gt;double&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;double&amp;gt;&lt;/code&gt; または整数型の場合、両方の引数が &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;double&amp;gt;&lt;/code&gt; &amp;lt;double&amp;gt;にキャストされます。</target>
        </trans-unit>
        <trans-unit id="0a030694b1f0fe28d4604a6643a9438aff3bca99" translate="yes" xml:space="preserve">
          <source>2. Returns a value of type &lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt; that represents the hash value of the parameter.</source>
          <target state="translated">2. パラメータのハッシュ値を表す &lt;code&gt;&lt;a href=&quot;../types/size_t&quot;&gt;std::size_t&lt;/a&gt;&lt;/code&gt; 型の値を返します。</target>
        </trans-unit>
        <trans-unit id="6e7999ab528fc5eee95f558f2a5f5551abee5281" translate="yes" xml:space="preserve">
          <source>2.1 Phases of translation [lex.phases]</source>
          <target state="translated">2.1 翻訳のフェーズ [lex.phase]</target>
        </trans-unit>
        <trans-unit id="3da874ea4f4f8acb8fd90317fef0f6203e8d2b8e" translate="yes" xml:space="preserve">
          <source>2.2 Phases of translation [lex.phases]</source>
          <target state="translated">2.2 翻訳のフェーズ [lex.phase]</target>
        </trans-unit>
        <trans-unit id="a36d13b57797389bde90bd9f90d71624172b9ee5" translate="yes" xml:space="preserve">
          <source>20) If defined, called by the custom array form of &lt;a href=&quot;../../language/new&quot;&gt;placement new[] &lt;/a&gt; expression with the matching signature if allocating an array of objects of type T.</source>
          <target state="translated">20）定義されている場合、T型のオブジェクトの配列を割り当てる場合、一致するシグネチャを持つ&lt;a href=&quot;../../language/new&quot;&gt;配置new []&lt;/a&gt;式のカスタム配列形式によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e069377af238426154821ca13205027e4508e443" translate="yes" xml:space="preserve">
          <source>20) Returns &lt;code&gt;bool(opt) ? value == *opt : false&lt;/code&gt;.</source>
          <target state="translated">20） &lt;code&gt;bool(opt) ? value == *opt : false&lt;/code&gt; ）を返しますか？値== * opt：false。</target>
        </trans-unit>
        <trans-unit id="9082079c7fd7d756a2ca1dea888cbb83753b7b38" translate="yes" xml:space="preserve">
          <source>20)&lt;code&gt;&lt;a href=&quot;year_month_day&quot;&gt;std::chrono::year_month_day&lt;/a&gt;(ym.year(), ym.month(), d)&lt;/code&gt;</source>
          <target state="translated">20） &lt;code&gt;&lt;a href=&quot;year_month_day&quot;&gt;std::chrono::year_month_day&lt;/a&gt;(ym.year(), ym.month(), d)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ad1384880a61d5d618b57013cff8835b92cb787f" translate="yes" xml:space="preserve">
          <source>20.4 Tuples [tuple]</source>
          <target state="translated">20.4 タプル [タプル]</target>
        </trans-unit>
        <trans-unit id="db4f17f6a672f5349653a3ec9fd1f4670b78bdc1" translate="yes" xml:space="preserve">
          <source>20.5.1.3 Freestanding implementations (p: 458)</source>
          <target state="translated">20.5.1.3 自立型実装 (p:458)</target>
        </trans-unit>
        <trans-unit id="18b0171738e934d28c51bcaf474b7720a328bae3" translate="yes" xml:space="preserve">
          <source>201210L</source>
          <target state="translated">201210L</target>
        </trans-unit>
        <trans-unit id="28faf88dd60cdf723204487a4f7df0aafc48b579" translate="yes" xml:space="preserve">
          <source>201304L</source>
          <target state="translated">201304L</target>
        </trans-unit>
        <trans-unit id="a6773c442ad40a34d6d049c0a3b43e047b8faf73" translate="yes" xml:space="preserve">
          <source>201309L</source>
          <target state="translated">201309L</target>
        </trans-unit>
        <trans-unit id="22e1780cf464ae56301359d6053c77eece6bf03c" translate="yes" xml:space="preserve">
          <source>201402L</source>
          <target state="translated">201402L</target>
        </trans-unit>
        <trans-unit id="570780b72403d061c69a2c525c832b5dcab07c2d" translate="yes" xml:space="preserve">
          <source>201411L</source>
          <target state="translated">201411L</target>
        </trans-unit>
        <trans-unit id="a86efe0a5f51a64efd9d09ae4295c2df7832c101" translate="yes" xml:space="preserve">
          <source>201505L</source>
          <target state="translated">201505L</target>
        </trans-unit>
        <trans-unit id="2c6c6b5fbca54afe21f48f9914d33b2fb3a8de15" translate="yes" xml:space="preserve">
          <source>201510L</source>
          <target state="translated">201510L</target>
        </trans-unit>
        <trans-unit id="8c9556aee6c253eb2033ecd408d371fb236ecb14" translate="yes" xml:space="preserve">
          <source>201603L</source>
          <target state="translated">201603L</target>
        </trans-unit>
        <trans-unit id="8baf514ae5246c02581735d581edda919cc8495d" translate="yes" xml:space="preserve">
          <source>201606L</source>
          <target state="translated">201606L</target>
        </trans-unit>
        <trans-unit id="839656e8a730180b7d5b1cabbc6ba903b5f6645d" translate="yes" xml:space="preserve">
          <source>201611L</source>
          <target state="translated">201611L</target>
        </trans-unit>
        <trans-unit id="6558e2e4db996ec157f4f4d4a3660c06b5769758" translate="yes" xml:space="preserve">
          <source>201703L</source>
          <target state="translated">201703L</target>
        </trans-unit>
        <trans-unit id="29f571fe0fb8e73e4d69b21fc4b7e306595a9d00" translate="yes" xml:space="preserve">
          <source>201711L</source>
          <target state="translated">201711L</target>
        </trans-unit>
        <trans-unit id="811750e354c2e1f1ba98b25a78490cf52f54fe34" translate="yes" xml:space="preserve">
          <source>201806L</source>
          <target state="translated">201806L</target>
        </trans-unit>
        <trans-unit id="1b640a5a2b2026a8e1225ac802370770ed8f0a73" translate="yes" xml:space="preserve">
          <source>201811L</source>
          <target state="translated">201811L</target>
        </trans-unit>
        <trans-unit id="538a51da7bb400f7f64247da30ed80832acc1598" translate="yes" xml:space="preserve">
          <source>201902L</source>
          <target state="translated">201902L</target>
        </trans-unit>
        <trans-unit id="4d26f186658c382630f11aff54a5a188c8cbadb2" translate="yes" xml:space="preserve">
          <source>21) If defined, and if (17) is not defined, called by the usual single-object &lt;a href=&quot;../../language/delete&quot;&gt;delete-expressions&lt;/a&gt; if deallocating an object of type T.</source>
          <target state="translated">21）定義されている場合、および（17）が定義されていない場合、タイプTのオブジェクトの割り当てを解除する場合、通常の単一オブジェクトの&lt;a href=&quot;../../language/delete&quot;&gt;削除式&lt;/a&gt;によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5c687b9d6d81e1ea6f8820127b8762a31537aafb" translate="yes" xml:space="preserve">
          <source>21) If defined, called by the custom single-object &lt;a href=&quot;../../language/new&quot;&gt;placement new&lt;/a&gt; expression with the matching signature if allocating an object of type T if its alignment requirement exceeds &lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt;. If this overload is not provided, but allocator-unaware member form (19) is, allocator-unaware member overload is called instead.</source>
          <target state="translated">21）定義されている場合、タイプTのオブジェクトを割り当てる場合、そのアライメント要件が &lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt; を超える場合に、一致するシグネチャを持つカスタム単一オブジェクト&lt;a href=&quot;../../language/new&quot;&gt;配置の新しい&lt;/a&gt;式によって呼び出されます。このオーバーロードが提供されていないが、アロケーター非対応メンバー形式（19）が提供されている場合、代わりにアロケーター非対応メンバーオーバーロードが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="36b65a43bf6055bd665cc844c1788411523c60c2" translate="yes" xml:space="preserve">
          <source>21) Returns &lt;code&gt;bool(opt) ? *opt != value : true&lt;/code&gt;.</source>
          <target state="translated">21） &lt;code&gt;bool(opt) ? *opt != value : true&lt;/code&gt; ）を返しますか？* opt！= value：true。</target>
        </trans-unit>
        <trans-unit id="a9ac7d2cda4a2ae92fcfcd611a816af9bfca61f8" translate="yes" xml:space="preserve">
          <source>21)&lt;code&gt;&lt;a href=&quot;year_month_day&quot;&gt;std::chrono::year_month_day&lt;/a&gt;(ym.year(), ym.month(), &lt;a href=&quot;day&quot;&gt;std::chrono::day&lt;/a&gt;(d))&lt;/code&gt;</source>
          <target state="translated">21） &lt;code&gt;&lt;a href=&quot;year_month_day&quot;&gt;std::chrono::year_month_day&lt;/a&gt;(ym.year(), ym.month(), &lt;a href=&quot;day&quot;&gt;std::chrono::day&lt;/a&gt;(d))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dda19e5a3ed35617e12ccce718920ea28415853f" translate="yes" xml:space="preserve">
          <source>22) If defined, and if (18) is not defined, called by the usual array &lt;a href=&quot;../../language/delete&quot;&gt;delete[]-expressions&lt;/a&gt; if deallocating an array of objects of type T.</source>
          <target state="translated">22）定義され、かつ（18）が定義されていない場合、T型のオブジェクトの配列の割り当てを解除する場合、通常の配列&lt;a href=&quot;../../language/delete&quot;&gt;delete []&lt;/a&gt; -expressions によって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9859b0ada183b94584f103ed56619889d5739710" translate="yes" xml:space="preserve">
          <source>22) If defined, called by the custom array form of &lt;a href=&quot;../../language/new&quot;&gt;placement new[] &lt;/a&gt; expression with the matching signature if allocating an array of objects of type T. if its alignment requirement exceeds &lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt;. If this overload is not provided, but allocator-unaware member form (20) is, allocator-unaware member overload is called instead.</source>
          <target state="translated">22）定義されている場合、T型のオブジェクトの配列を割り当てる場合、一致するシグネチャを持つ&lt;a href=&quot;../../language/new&quot;&gt;配置new []&lt;/a&gt;式のカスタム配列形式によって呼び出されます。配置要件が &lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt; を超える場合。このオーバーロードが提供されていないが、アロケーター非対応メンバー形式（20）が提供されている場合、代わりにアロケーター非対応メンバーオーバーロードが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a5a5e9ec9432a7b6777283f2cd1eac168d5c4020" translate="yes" xml:space="preserve">
          <source>22) Returns &lt;code&gt;bool(opt) ? value != *opt : true&lt;/code&gt;.</source>
          <target state="translated">22） &lt;code&gt;bool(opt) ? value != *opt : true&lt;/code&gt; ）を返しますか？値！= * opt：true。</target>
        </trans-unit>
        <trans-unit id="8dc6ff218c8bdb4582de327769a00b45673ff8c4" translate="yes" xml:space="preserve">
          <source>22,24)&lt;code&gt;&lt;a href=&quot;year_month_day&quot;&gt;std::chrono::year_month_day&lt;/a&gt;(y, md.month(), md.day())&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;year_month_day&quot;&gt;std::chrono::year_month_day&lt;/a&gt;(y, md.month(), md.day())&lt;/code&gt; ）std :: chrono :: year_month_day（y、md.month（）、md.day（））</target>
        </trans-unit>
        <trans-unit id="c554e18f1f7efcd614d3a775eaa00548f94bb604" translate="yes" xml:space="preserve">
          <source>23) Returns &lt;code&gt;bool(opt) ? *opt &amp;lt; value : true&lt;/code&gt;.</source>
          <target state="translated">23） &lt;code&gt;bool(opt) ? *opt &amp;lt; value : true&lt;/code&gt; ）を返しますか？* opt &amp;lt;value：true。</target>
        </trans-unit>
        <trans-unit id="63c937d92e7f2c97253aa685c09999050bc61791" translate="yes" xml:space="preserve">
          <source>23,24) If defined, and if (19,20) are not defined, called in preference to allocator-unaware members if the alignment requirement exceeds &lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt;.</source>
          <target state="translated">23,24）定義されている場合、および（19,20）が定義されていない場合、配置要件が &lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt; を超えると、アロケータ非対応メンバーに優先して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="bf06d7fc10ff49bfeadb22775c70dfc06e9b84bd" translate="yes" xml:space="preserve">
          <source>23,25)&lt;code&gt;&lt;a href=&quot;year_month_day&quot;&gt;std::chrono::year_month_day&lt;/a&gt;(&lt;a href=&quot;year&quot;&gt;std::chrono::year&lt;/a&gt;(y), md.month(), md.day())&lt;/code&gt;</source>
          <target state="translated">23,25） &lt;code&gt;&lt;a href=&quot;year_month_day&quot;&gt;std::chrono::year_month_day&lt;/a&gt;(&lt;a href=&quot;year&quot;&gt;std::chrono::year&lt;/a&gt;(y), md.month(), md.day())&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2ad1b6658bf460d78521a43b6624d60b4d50cb84" translate="yes" xml:space="preserve">
          <source>24) Returns &lt;code&gt;bool(opt) ? value &amp;lt; *opt : false&lt;/code&gt;.</source>
          <target state="translated">24） &lt;code&gt;bool(opt) ? value &amp;lt; *opt : false&lt;/code&gt; ）を返しますか？値&amp;lt;* opt：false。</target>
        </trans-unit>
        <trans-unit id="2f1edab4092b028014791e589c249930e7c2f2ea" translate="yes" xml:space="preserve">
          <source>24-bit RANLUX generator by Martin L&amp;uuml;scher and Fred James, 1994.</source>
          <target state="translated">MartinL&amp;uuml;scherとFred Jamesによる24ビットRANLUXジェネレータ、1994年。</target>
        </trans-unit>
        <trans-unit id="6744f34128a774233270686b8f8d4a1f82f7137a" translate="yes" xml:space="preserve">
          <source>24-hour format</source>
          <target state="translated">24時間形式</target>
        </trans-unit>
        <trans-unit id="4a0accf14cd80c6d8c7dbffc298bb4b2d07c4c08" translate="yes" xml:space="preserve">
          <source>25) If defined, called by the custom single-object &lt;a href=&quot;../../language/new&quot;&gt;placement new&lt;/a&gt; expression with the matching signature if the object's constructor throws an exception. If this function is not provided, and a matching (15) is not provided either, no deallocation function is called.</source>
          <target state="translated">25）定義されている場合、オブジェクトのコンストラクターが例外をスローした場合に、一致するシグネチャを持つカスタム単一オブジェクト&lt;a href=&quot;../../language/new&quot;&gt;配置の新しい&lt;/a&gt;式によって呼び出されます。この関数が提供されておらず、対応する（15）も提供されていない場合、割り当て解除関数は呼び出されません。</target>
        </trans-unit>
        <trans-unit id="fe16ddc062ab560dc4c18cbd4db2ff6d25ea9478" translate="yes" xml:space="preserve">
          <source>25) Returns &lt;code&gt;bool(opt) ? *opt &amp;lt;= value : true&lt;/code&gt;.</source>
          <target state="translated">25） &lt;code&gt;bool(opt) ? *opt &amp;lt;= value : true&lt;/code&gt; ）を返しますか？* opt &amp;lt;= value：true。</target>
        </trans-unit>
        <trans-unit id="0cdc19fa8cfab3913be1bb9e9d6243bd831b9f65" translate="yes" xml:space="preserve">
          <source>26) If defined, called by the custom array form of &lt;a href=&quot;../../language/new&quot;&gt;placement new[] &lt;/a&gt; expression with the matching signature if any of the objects' constructors throws an exception (after executing the destructors for all objects that were constructed successfully). If this function is not provided, and a matching (16) is not provided either, no deallocation function is called.</source>
          <target state="translated">26）定義されている場合、オブジェクトのコンストラクターのいずれかが例外をスローした場合（正常に構築されたすべてのオブジェクトのデストラクターを実行した後）、カスタム配列形式の&lt;a href=&quot;../../language/new&quot;&gt;配置new []&lt;/a&gt;式と一致するシグニチャーで呼び出されます。この関数が提供されておらず、対応する（16）も提供されていない場合、割り当て解除関数は呼び出されません。</target>
        </trans-unit>
        <trans-unit id="f369615dab0da56359caf5ac2d7325c47c4f2e65" translate="yes" xml:space="preserve">
          <source>26) Returns &lt;code&gt;bool(opt) ? value &amp;lt;= *opt : false&lt;/code&gt;.</source>
          <target state="translated">26） &lt;code&gt;bool(opt) ? value &amp;lt;= *opt : false&lt;/code&gt; ）を返しますか？値&amp;lt;= * opt：false。</target>
        </trans-unit>
        <trans-unit id="1997cc535be30b9938fc6401ebda36b2512111ec" translate="yes" xml:space="preserve">
          <source>26)&lt;code&gt;&lt;a href=&quot;year_month_day_last&quot;&gt;std::chrono::year_month_day_last&lt;/a&gt;(ym.year(), &lt;a href=&quot;month_day_last&quot;&gt;std::chrono::month_day_last&lt;/a&gt;(ym.month()))&lt;/code&gt;</source>
          <target state="translated">26） &lt;code&gt;&lt;a href=&quot;year_month_day_last&quot;&gt;std::chrono::year_month_day_last&lt;/a&gt;(ym.year(), &lt;a href=&quot;month_day_last&quot;&gt;std::chrono::month_day_last&lt;/a&gt;(ym.month()))&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f48468f12b58ba04a79b8034682b682e54eacc0e" translate="yes" xml:space="preserve">
          <source>27) Returns &lt;code&gt;bool(opt) ? *opt &amp;gt; value : false&lt;/code&gt;.</source>
          <target state="translated">27） &lt;code&gt;bool(opt) ? *opt &amp;gt; value : false&lt;/code&gt; ）を返しますか？* opt&amp;gt; value：false。</target>
        </trans-unit>
        <trans-unit id="45c9dc4681c196ab01796a0295947eab8f490743" translate="yes" xml:space="preserve">
          <source>27,29)&lt;code&gt;&lt;a href=&quot;year_month_day_last&quot;&gt;std::chrono::year_month_day_last&lt;/a&gt;(y, mdl)&lt;/code&gt;</source>
          <target state="translated">27,29） &lt;code&gt;&lt;a href=&quot;year_month_day_last&quot;&gt;std::chrono::year_month_day_last&lt;/a&gt;(y, mdl)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7853db86124acd126bbb4b74a3853f85b1a4d90b" translate="yes" xml:space="preserve">
          <source>27-30) If defined, &lt;a href=&quot;../../language/delete&quot;&gt;delete-expressions&lt;/a&gt; does not execute the destructor for *p before placing a call to &lt;code&gt;operator delete&lt;/code&gt;. Instead, direct invocation of the destructor such as by &lt;code&gt;p-&amp;gt;~T();&lt;/code&gt; becomes the responsibility of this user-defined operator delete.</source>
          <target state="translated">27-30）定義されている場合、&lt;a href=&quot;../../language/delete&quot;&gt;delete-expressions&lt;/a&gt;は、 &lt;code&gt;operator delete&lt;/code&gt; 呼び出す前に* pのデストラクタを実行しません。代わりに、 &lt;code&gt;p-&amp;gt;~T();&lt;/code&gt; などによるデストラクタの直接呼び出し。このユーザー定義演算子の削除の責任になります。</target>
        </trans-unit>
        <trans-unit id="0e46112e4fed32117edbd51fcc6057597df7a5e3" translate="yes" xml:space="preserve">
          <source>28) Returns &lt;code&gt;bool(opt) ? value &amp;gt; *opt : true&lt;/code&gt;.</source>
          <target state="translated">28） &lt;code&gt;bool(opt) ? value &amp;gt; *opt : true&lt;/code&gt; ）を返しますか？値&amp;gt; * opt：true。</target>
        </trans-unit>
        <trans-unit id="84fc5e5ce62c45455d09d92f5a6c243264a6032c" translate="yes" xml:space="preserve">
          <source>28,30)&lt;code&gt;&lt;a href=&quot;year_month_day_last&quot;&gt;std::chrono::year_month_day_last&lt;/a&gt;(&lt;a href=&quot;year&quot;&gt;std::chrono::year&lt;/a&gt;(y), mdl)&lt;/code&gt;</source>
          <target state="translated">28,30） &lt;code&gt;&lt;a href=&quot;year_month_day_last&quot;&gt;std::chrono::year_month_day_last&lt;/a&gt;(&lt;a href=&quot;year&quot;&gt;std::chrono::year&lt;/a&gt;(y), mdl)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="55c84e953fbaeb30e380ed10fb458eea7ca66da9" translate="yes" xml:space="preserve">
          <source>29) Returns &lt;code&gt;bool(opt) ? *opt &amp;gt;= value : false&lt;/code&gt;.</source>
          <target state="translated">29） &lt;code&gt;bool(opt) ? *opt &amp;gt;= value : false&lt;/code&gt; ）を返しますか？* opt&amp;gt; = value：false。</target>
        </trans-unit>
        <trans-unit id="7ee1b608113c55f0834af57e55d70aa3dd86701f" translate="yes" xml:space="preserve">
          <source>2a) however, the exception specification allows &lt;code&gt;&lt;a href=&quot;../bad_exception&quot;&gt;std::bad_exception&lt;/a&gt;&lt;/code&gt;: the thrown exception object is destroyed, and &lt;code&gt;&lt;a href=&quot;../bad_exception&quot;&gt;std::bad_exception&lt;/a&gt;&lt;/code&gt; is constructed by the C++ runtime and thrown instead.</source>
          <target state="translated">2a）ただし、例外仕様では &lt;code&gt;&lt;a href=&quot;../bad_exception&quot;&gt;std::bad_exception&lt;/a&gt;&lt;/code&gt; ます。スローされた例外オブジェクトは破棄され、 &lt;code&gt;&lt;a href=&quot;../bad_exception&quot;&gt;std::bad_exception&lt;/a&gt;&lt;/code&gt; はC ++ランタイムによって構築され、代わりにスローされます。</target>
        </trans-unit>
        <trans-unit id="5cb9439c87e44f0eee76910f343289a5fc58e58c" translate="yes" xml:space="preserve">
          <source>2b) the exception specification does not allow &lt;code&gt;&lt;a href=&quot;../bad_exception&quot;&gt;std::bad_exception&lt;/a&gt;&lt;/code&gt;: &lt;code&gt;&lt;a href=&quot;../terminate&quot;&gt;std::terminate&lt;/a&gt;()&lt;/code&gt; is called.</source>
          <target state="translated">2b）例外仕様では &lt;code&gt;&lt;a href=&quot;../bad_exception&quot;&gt;std::bad_exception&lt;/a&gt;&lt;/code&gt; 許可されていません： &lt;code&gt;&lt;a href=&quot;../terminate&quot;&gt;std::terminate&lt;/a&gt;()&lt;/code&gt; が呼び出されています</target>
        </trans-unit>
        <trans-unit id="ec9980ec2e616ee3315db433b1e89c30f9377afb" translate="yes" xml:space="preserve">
          <source>2c) if &lt;code&gt;T1&lt;/code&gt; is allocator-aware (&lt;code&gt;&lt;a href=&quot;../uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&amp;lt;T1, inner_allocator_type&amp;gt;::value==true&lt;/code&gt;), and its constructor takes the allocator as the last argument (&lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible&lt;/a&gt;&amp;lt;T1, Args1..., inner_allocator_type&amp;amp;&amp;gt;::value==true&lt;/code&gt;), then &lt;code&gt;xprime&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../../utility/tuple/tuple_cat&quot;&gt;std::tuple_cat&lt;/a&gt;(&lt;a href=&quot;../../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;Args1&amp;amp;&amp;amp;...&amp;gt;(std::move(x)), &lt;a href=&quot;../../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;inner_allocator_type&amp;amp;&amp;gt;(inner_allocator()))&lt;/code&gt;.  Same rules apply to &lt;code&gt;T2&lt;/code&gt; and the replacement of &lt;code&gt;y&lt;/code&gt; with &lt;code&gt;yprime&lt;/code&gt;  Once &lt;code&gt;xprime&lt;/code&gt; and &lt;code&gt;yprime&lt;/code&gt; are constructed, constructs the pair &lt;code&gt;p&lt;/code&gt; in allocated storage by calling</source>
          <target state="translated">2c） &lt;code&gt;T1&lt;/code&gt; がアロケータ対応（ &lt;code&gt;&lt;a href=&quot;../uses_allocator&quot;&gt;std::uses_allocator&lt;/a&gt;&amp;lt;T1, inner_allocator_type&amp;gt;::value==true&lt;/code&gt; ）で、そのコンストラクタがアロケータを最後の引数として取る場合（ &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible&lt;/a&gt;&amp;lt;T1, Args1..., inner_allocator_type&amp;amp;&amp;gt;::value==true&lt;/code&gt; ）の場合、 &lt;code&gt;xprime&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../../utility/tuple/tuple_cat&quot;&gt;std::tuple_cat&lt;/a&gt;(&lt;a href=&quot;../../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;Args1&amp;amp;&amp;amp;...&amp;gt;(std::move(x)), &lt;a href=&quot;../../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;inner_allocator_type&amp;amp;&amp;gt;(inner_allocator()))&lt;/code&gt; 。同じルールが適用さ &lt;code&gt;T2&lt;/code&gt; との交換 &lt;code&gt;y&lt;/code&gt; と &lt;code&gt;yprime&lt;/code&gt; たら &lt;code&gt;xprime&lt;/code&gt; と &lt;code&gt;yprime&lt;/code&gt; が構成され、一対の構築物 &lt;code&gt;p&lt;/code&gt; 呼び出しによって割り当てられたストレージ内</target>
        </trans-unit>
        <trans-unit id="7eb05f281d790790f78faabeb621483c68bf74dd" translate="yes" xml:space="preserve">
          <source>2i</source>
          <target state="translated">2i</target>
        </trans-unit>
        <trans-unit id="9a858fdd0a0969f96224393e42f1671ec2f233ef" translate="yes" xml:space="preserve">
          <source>2n</source>
          <target state="translated">2n</target>
        </trans-unit>
        <trans-unit id="2dcaeb9e7ed7e579aa8b8ba6e8829281084ce59d" translate="yes" xml:space="preserve">
          <source>2s2</source>
          <target state="translated">2s2</target>
        </trans-unit>
        <trans-unit id="77de68daecd823babbb58edb1c8e14d7106e83bb" translate="yes" xml:space="preserve">
          <source>3</source>
          <target state="translated">3</target>
        </trans-unit>
        <trans-unit id="93ed9c6938b1842bf41a4b8540f19c023806ca02" translate="yes" xml:space="preserve">
          <source>3) (for data members only, not member functions) When used in &lt;a href=&quot;expressions#Unevaluated_expressions&quot;&gt;unevaluated operands&lt;/a&gt;.</source>
          <target state="translated">3）（メンバー関数ではなく、データメンバーのみ）&lt;a href=&quot;expressions#Unevaluated_expressions&quot;&gt;未評価のオペランドで&lt;/a&gt;使用する場合。</target>
        </trans-unit>
        <trans-unit id="4fd3dc7487f8a80579d5f8be29c2412440b68dd8" translate="yes" xml:space="preserve">
          <source>3) (none).</source>
          <target state="translated">3)(なし)。</target>
        </trans-unit>
        <trans-unit id="f412c21f9fd850859756cf6f8cde85c9cc2a4f8c" translate="yes" xml:space="preserve">
          <source>3) &lt;code&gt;(bool)(std::get&amp;lt;0&amp;gt;(lhs) &amp;lt; std::get&amp;lt;0&amp;gt;(rhs)) || (!(bool)(std::get&amp;lt;0&amp;gt;(rhs) &amp;lt; std::get&amp;lt;0&amp;gt;(lhs)) &amp;amp;&amp;amp; lhstail &amp;lt; rhstail)&lt;/code&gt;, where &lt;code&gt;lhstail&lt;/code&gt; is lhs without its first element, and &lt;code&gt;rhstail&lt;/code&gt; is rhs without its first element. For two empty tuples, returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;(bool)(std::get&amp;lt;0&amp;gt;(lhs) &amp;lt; std::get&amp;lt;0&amp;gt;(rhs)) || (!(bool)(std::get&amp;lt;0&amp;gt;(rhs) &amp;lt; std::get&amp;lt;0&amp;gt;(lhs)) &amp;amp;&amp;amp; lhstail &amp;lt; rhstail)&lt;/code&gt; 、 &lt;code&gt;lhstail&lt;/code&gt; は、その最初の要素なしLHSで、 &lt;code&gt;rhstail&lt;/code&gt; はその最初のなしRHSです素子。2つの空のタプルの場合、 &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e6a3ffaf1f8e433f953a495e10b6acbfb87664db" translate="yes" xml:space="preserve">
          <source>3) &lt;code&gt;&lt;a href=&quot;../../utility/functional/less&quot;&gt;std::less&lt;/a&gt;&amp;lt;CT&amp;gt;()(x.get(), y.get())&lt;/code&gt;, where &lt;code&gt;CT&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;../../types/common_type&quot;&gt;std::common_type&lt;/a&gt;&amp;lt;unique_ptr&amp;lt;T1, D1&amp;gt;::pointer, unique_ptr&amp;lt;T2, D2&amp;gt;::pointer&amp;gt;::type&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../../utility/functional/less&quot;&gt;std::less&lt;/a&gt;&amp;lt;CT&amp;gt;()(x.get(), y.get())&lt;/code&gt; 、ここで &lt;code&gt;CT&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../../types/common_type&quot;&gt;std::common_type&lt;/a&gt;&amp;lt;unique_ptr&amp;lt;T1, D1&amp;gt;::pointer, unique_ptr&amp;lt;T2, D2&amp;gt;::pointer&amp;gt;::type&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2be4071f71740c496b54640b542bc8c3b487d937" translate="yes" xml:space="preserve">
          <source>3) &lt;code&gt;&lt;a href=&quot;weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;weak_ptr&quot;&gt;std::weak_ptr&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6e1cbcd61f251bf7ac6d32239024455fbf326f65" translate="yes" xml:space="preserve">
          <source>3) &lt;code&gt;CT(lhs).count() &amp;lt; CT(rhs).count()&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;CT(lhs).count() &amp;lt; CT(rhs).count()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="87bee209fbf0b7f657eeac78da3fcefe66a99f50" translate="yes" xml:space="preserve">
          <source>3) A</source>
          <target state="translated">3)A</target>
        </trans-unit>
        <trans-unit id="8f333f080a1eab002bc9740bac51bf9769477bd2" translate="yes" xml:space="preserve">
          <source>3) A &lt;a href=&quot;structured_binding&quot;&gt;structured binding&lt;/a&gt; is odr-used if it appears as a</source>
          <target state="translated">3）&lt;a href=&quot;structured_binding&quot;&gt;構造化バインディング&lt;/a&gt;は、それが</target>
        </trans-unit>
        <trans-unit id="b188a6ff7ea0de5610c6653bc130c0fbd5477958" translate="yes" xml:space="preserve">
          <source>3) A &lt;code&gt;std::chrono::day&lt;/code&gt; value corresponding to the last day of the stored year and month.</source>
          <target state="translated">3）保存された年と月の最後の日に対応する &lt;code&gt;std::chrono::day&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="5a1c89bc54d1a6b6db2e7d3303f208fade04441e" translate="yes" xml:space="preserve">
          <source>3) A carries dependency into another evaluation X, and X carries dependency into B</source>
          <target state="translated">3)Aは別の評価Xに依存関係を持ち、XはBに依存関係を持ちます。</target>
        </trans-unit>
        <trans-unit id="7af017b7c88a6276245e5bf115b539d97b0b7ffa" translate="yes" xml:space="preserve">
          <source>3) A declaration that consists solely of an elaborated type specifier always declares a class type named by identifier in the &lt;a href=&quot;scope&quot;&gt;scope&lt;/a&gt; that contains the declaration.</source>
          <target state="translated">3）エラボレートされた型指定子のみで構成される宣言は、常に、その宣言を含む&lt;a href=&quot;scope&quot;&gt;スコープ内&lt;/a&gt;で識別子によって名前が付けられたクラス型を宣言します。</target>
        </trans-unit>
        <trans-unit id="39d0bb31e412d6eadcee39bd1861a2cc86e62eca" translate="yes" xml:space="preserve">
          <source>3) A non-type template &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt; with an optional name.</source>
          <target state="translated">3）オプションの名前を持つ非タイプテンプレート&lt;a href=&quot;parameter_pack&quot;&gt;パラメータパック&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0d581f61df3255edce79e2bcf896c0f882f281e4" translate="yes" xml:space="preserve">
          <source>3) A non-type template argument or an array bound in which a subexpression references a template</source>
          <target state="translated">3)型を持たないテンプレートの引数、または subexpression がテンプレートを参照する配列のバインド</target>
        </trans-unit>
        <trans-unit id="fa8572e10980da3c78b1f6510cdbda7fceba97e6" translate="yes" xml:space="preserve">
          <source>3) A specialization for user-defined fancy pointer types may define an additional static member function.</source>
          <target state="translated">3)ユーザ定義のファンシーポインタ型のための専門化は、追加の静的メンバ関数を定義することができる。</target>
        </trans-unit>
        <trans-unit id="0c89d927e6bd97c96c485fc4a17feacc218eb28b" translate="yes" xml:space="preserve">
          <source>3) A standard conversion sequence &lt;code&gt;S1&lt;/code&gt; is</source>
          <target state="translated">3）標準変換シーケンス &lt;code&gt;S1&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="a404e0480fce5bf74f08f5befd742384386fb31b" translate="yes" xml:space="preserve">
          <source>3) A string containing the latest remote database version.</source>
          <target state="translated">3)最新のリモートデータベースのバージョンを含む文字列。</target>
        </trans-unit>
        <trans-unit id="840f814d1ba6d22fe1578d48daf10220a13af485" translate="yes" xml:space="preserve">
          <source>3) A template template &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt; with an optional name.</source>
          <target state="translated">3）オプションの名前を持つテンプレートテンプレート&lt;a href=&quot;parameter_pack&quot;&gt;パラメータパック&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="778baf7289829434b4c6c05167a0700403180cc6" translate="yes" xml:space="preserve">
          <source>3) A template template parameter pack with an optional name</source>
          <target state="translated">3)オプションの名前を持つテンプレートテンプレートパラメータパック</target>
        </trans-unit>
        <trans-unit id="770b543e148403ea4dededf7526f310ae3d46b3e" translate="yes" xml:space="preserve">
          <source>3) A type template &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt;.</source>
          <target state="translated">3）タイプテンプレート&lt;a href=&quot;parameter_pack&quot;&gt;パラメータパック&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="14fdc9083f4eac7a50f08f933d275b687d9bb749" translate="yes" xml:space="preserve">
          <source>3) A value of any integral or enumeration type can be converted to a pointer type. A pointer converted to an integer of sufficient size and back to the same pointer type is guaranteed to have its original value, otherwise the resulting pointer cannot be dereferenced safely (the round-trip conversion in the opposite direction is not guaranteed; the same pointer may have multiple integer representations) The null pointer constant &lt;code&gt;&lt;a href=&quot;../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; or integer zero is not guaranteed to yield the null pointer value of the target type; &lt;a href=&quot;static_cast&quot;&gt;static_cast&lt;/a&gt; or &lt;a href=&quot;implicit_cast&quot;&gt;implicit conversion&lt;/a&gt; should be used for this purpose.</source>
          <target state="translated">3）整数型または列挙型の値は、ポインター型に変換できます。十分なサイズの整数に変換され、同じポインター型に戻るポインターは、元の値を持つことが保証されます。それ以外の場合、結果のポインターは安全に逆参照できません（反対方向の往復変換は保証されません。同じポインターが複数の整数表現を持つ）nullポインタ定数 &lt;code&gt;&lt;a href=&quot;../types/null&quot;&gt;NULL&lt;/a&gt;&lt;/code&gt; または整数0は、ターゲットタイプのnullポインタ値を生成するとは限りません。このためには、&lt;a href=&quot;static_cast&quot;&gt;static_cast&lt;/a&gt;または&lt;a href=&quot;implicit_cast&quot;&gt;暗黙の変換&lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="f552c1726716c82fbccf7a2867e0be7c5de21a4c" translate="yes" xml:space="preserve">
          <source>3) An inline function or variable(since C++17) with &lt;a href=&quot;storage_duration&quot;&gt;external linkage&lt;/a&gt; (e.g. not declared &lt;code&gt;static&lt;/code&gt;) has the following additional properties:</source>
          <target state="translated">3）&lt;a href=&quot;storage_duration&quot;&gt;外部リンケージ&lt;/a&gt;（例： &lt;code&gt;static&lt;/code&gt; と宣言されていない）を含むインライン関数または変数（C ++ 17以降）には、次の追加のプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="e125c75ae4a99ed3a1eb8a67cdd34c16a97207b5" translate="yes" xml:space="preserve">
          <source>3) Analyzes a string &lt;code&gt;s&lt;/code&gt;. Match results are returned in &lt;code&gt;m&lt;/code&gt;.</source>
          <target state="translated">3）文字列 &lt;code&gt;s&lt;/code&gt; を分析します。一致結果は &lt;code&gt;m&lt;/code&gt; に返されます。</target>
        </trans-unit>
        <trans-unit id="99c474666d172eea06f27f6e7791328349727abf" translate="yes" xml:space="preserve">
          <source>3) Any exception thrown by the move constructor of &lt;code&gt;value&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;value&lt;/code&gt; 移動コンストラクターによってスローされた例外</target>
        </trans-unit>
        <trans-unit id="277dd10cd98338b61305a206c3ba9cc041bb39c5" translate="yes" xml:space="preserve">
          <source>3) Any exceptions thrown by copy/move constructor of &lt;code&gt;f&lt;/code&gt; and by the allocator's &lt;code&gt;allocate&lt;/code&gt; function if memory allocation fails.</source>
          <target state="translated">3）メモリの割り当てに失敗した場合、 &lt;code&gt;f&lt;/code&gt; のコピー/移動コンストラクターとアロケーターの &lt;code&gt;allocate&lt;/code&gt; 関数によってスローされる例外。</target>
        </trans-unit>
        <trans-unit id="c344ba4971b23645d12f07ff10b697bda0957870" translate="yes" xml:space="preserve">
          <source>3) Any exceptions thrown by the &lt;code&gt;Compare&lt;/code&gt; object.</source>
          <target state="translated">3） &lt;code&gt;Compare&lt;/code&gt; オブジェクトによってスローされた例外。</target>
        </trans-unit>
        <trans-unit id="711b68a51c1768e3b8e3ae3b077cfbddb75664a9" translate="yes" xml:space="preserve">
          <source>3) Appends a substring &lt;code&gt;[pos, pos+count)&lt;/code&gt; of &lt;code&gt;str&lt;/code&gt;. If the requested substring lasts past the end of the string, or if &lt;code&gt;count == npos&lt;/code&gt;, the appended substring is &lt;code&gt;[pos, size())&lt;/code&gt;. If &lt;code&gt;pos &amp;gt; str.size()&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; is thrown.</source>
          <target state="translated">3） &lt;code&gt;str&lt;/code&gt; の部分文字列 &lt;code&gt;[pos, pos+count)&lt;/code&gt; を追加します。要求された部分文字列が文字列の終わりを超えて続く場合、または &lt;code&gt;count == npos&lt;/code&gt; 場合、追加される部分文字列は &lt;code&gt;[pos, size())&lt;/code&gt; です。 &lt;code&gt;pos &amp;gt; str.size()&lt;/code&gt; 場合、 &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="80e2a402b0577257e8c7923fedcad6eb1cc319fe" translate="yes" xml:space="preserve">
          <source>3) Applies &lt;code&gt;unary_op&lt;/code&gt; to each element in the range [first; last) and reduces the results (possibly permuted and aggregated in unspecified manner) along with the initial value &lt;code&gt;init&lt;/code&gt; over &lt;code&gt;binary_op&lt;/code&gt;.</source>
          <target state="translated">3）範囲内の各要素に &lt;code&gt;unary_op&lt;/code&gt; を適用します[最初; 最後）そして、結果（おそらく不特定の方法で &lt;code&gt;binary_op&lt;/code&gt; られ、集計されます）と、binary_opに対する初期値 &lt;code&gt;init&lt;/code&gt; を削減します。</target>
        </trans-unit>
        <trans-unit id="c31e7c2f08c0e946090d4f29f5797e5765024af1" translate="yes" xml:space="preserve">
          <source>3) Applies the offset &lt;code&gt;d&lt;/code&gt; to &lt;code&gt;pt&lt;/code&gt; in negative direction. Effectively returns &lt;code&gt;CT(ot.time_since_epoch() - d)&lt;/code&gt;, where &lt;code&gt;CT&lt;/code&gt; is the return type.</source>
          <target state="translated">3）負の方向に &lt;code&gt;pt&lt;/code&gt; にオフセット &lt;code&gt;d&lt;/code&gt; を適用します。有効返す &lt;code&gt;CT(ot.time_since_epoch() - d)&lt;/code&gt; 、 &lt;code&gt;CT&lt;/code&gt; は戻り型であるが。</target>
        </trans-unit>
        <trans-unit id="4de92ce9b6ae9639e9b18c50ba6cdaf2bfe64abf" translate="yes" xml:space="preserve">
          <source>3) Assigns a null-terminated character string pointed to by &lt;code&gt;ptr&lt;/code&gt;. Equivalent to &lt;code&gt;assign(ptr);&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;ptr&lt;/code&gt; が指すヌル終了文字ストリングを割り当てます。 &lt;code&gt;assign(ptr);&lt;/code&gt; と同等。。</target>
        </trans-unit>
        <trans-unit id="afa3c34805c67bd23f3ac1c048f464b6df724f6b" translate="yes" xml:space="preserve">
          <source>3) Assigns a null-terminated string pointed to by &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;s&lt;/code&gt; が指すnullで終了する文字列を割り当てます。</target>
        </trans-unit>
        <trans-unit id="8d825df8ba69b54dafc39a8f5e95c82cb9c5a093" translate="yes" xml:space="preserve">
          <source>3) Assigns the pathname identified by detected-format character range &lt;code&gt;[first, last)&lt;/code&gt;.</source>
          <target state="translated">3）検出された形式の文字範囲 &lt;code&gt;[first, last)&lt;/code&gt; 識別されるパス名を割り当てます。</target>
        </trans-unit>
        <trans-unit id="5e2f95e0668e5ea74a4004353550d86f7032a01d" translate="yes" xml:space="preserve">
          <source>3) Assigns the selected elements from &lt;code&gt;sl_arr&lt;/code&gt; to the referred to elements of &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;sl_arr&lt;/code&gt; から選択された要素を &lt;code&gt;*this&lt;/code&gt; の参照される要素に割り当てます。</target>
        </trans-unit>
        <trans-unit id="bcf8c246ad821da73e30c82a073b3e8a40983b64" translate="yes" xml:space="preserve">
          <source>3) Assigns the type and value of &lt;code&gt;rhs&lt;/code&gt;, as if by &lt;code&gt;any(&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;ValueType&amp;gt;(rhs)).swap(*this)&lt;/code&gt;. This overload only participates in overload resolution if &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;&lt;/code&gt; is not the same type as &lt;code&gt;any&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../types/is_copy_constructible&quot;&gt;std::is_copy_constructible_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;&amp;gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. .</source>
          <target state="translated">3） &lt;code&gt;any(&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;ValueType&amp;gt;(rhs)).swap(*this)&lt;/code&gt; &lt;a href=&quot;../forward&quot;&gt;std :: forward&lt;/a&gt; &amp;lt;ValueType&amp;gt;（rhs））。swap（* this）のように、 &lt;code&gt;rhs&lt;/code&gt; のタイプと値を割り当てます。このオーバーロードは、 &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;&lt;/code&gt; &amp;lt;ValueType&amp;gt;が &lt;code&gt;any&lt;/code&gt; とも同じタイプではなく、 &lt;code&gt;&lt;a href=&quot;../../types/is_copy_constructible&quot;&gt;std::is_copy_constructible_v&lt;/a&gt;&amp;lt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay_t&lt;/a&gt;&amp;lt;ValueType&amp;gt;&amp;gt;&lt;/code&gt; &amp;lt; &lt;a href=&quot;../../types/decay&quot;&gt;std :: decay_t&lt;/a&gt; &amp;lt;ValueType &amp;gt;&amp;gt;が &lt;code&gt;true&lt;/code&gt; の場合にのみ、オーバーロード解決に参加します。。</target>
        </trans-unit>
        <trans-unit id="72455795a2eb56051b09bfa5eae38d55c9855cf4" translate="yes" xml:space="preserve">
          <source>3) At the end of this phase, all preprocessor directives are removed from the source.</source>
          <target state="translated">3)このフェーズの最後に、すべてのプリプロセッサディレクティブがソースから削除されます。</target>
        </trans-unit>
        <trans-unit id="b617b63b51df48825f9812a2ff92c4ab9db6bbd3" translate="yes" xml:space="preserve">
          <source>3) Atomic types are not copy/move constructible</source>
          <target state="translated">3)アトミック型はコピー/移動可能な構成要素ではない</target>
        </trans-unit>
        <trans-unit id="125fa86e943fea4422d5e5c22612a46dba3c3dc2" translate="yes" xml:space="preserve">
          <source>3) Atomic variables are not &lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;.</source>
          <target state="translated">3）アトミック変数は&lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructibleで&lt;/a&gt;はありません。</target>
        </trans-unit>
        <trans-unit id="df76596a0cd8cc957f4b28abfe1ee8efc6c0976e" translate="yes" xml:space="preserve">
          <source>3) Average case: &lt;code&gt;c.count(key)&lt;/code&gt;, worst case: &lt;code&gt;c.size()&lt;/code&gt;</source>
          <target state="translated">3）平均的なケース： &lt;code&gt;c.count(key)&lt;/code&gt; 、最悪のケース： &lt;code&gt;c.size()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a4709e9943c676621b3bd79567e41f762a7b9cb" translate="yes" xml:space="preserve">
          <source>3) Behaves the same as the reset member of the primary template, except that it will only participate in overload resolution if either</source>
          <target state="translated">3)プライマリテンプレートのリセットメンバと同じ動作をします。</target>
        </trans-unit>
        <trans-unit id="db0a5cb60cad1b857e2dc32774d4170343af6876" translate="yes" xml:space="preserve">
          <source>3) Binary right fold (E op ... op I) becomes (E</source>
          <target state="translated">3)二項右折(E op ...op I)は(E)になります。</target>
        </trans-unit>
        <trans-unit id="a6c533dca72a273606f1a4bdcd3aae2cd8adcbd1" translate="yes" xml:space="preserve">
          <source>3) Both ranges must be sorted with the given comparison function &lt;code&gt;comp&lt;/code&gt;.</source>
          <target state="translated">3）両方の範囲は、指定された比較関数 &lt;code&gt;comp&lt;/code&gt; でソートする必要があります。</target>
        </trans-unit>
        <trans-unit id="9f24dab55a5be9d15ce3a2dfff9cf8e261471119" translate="yes" xml:space="preserve">
          <source>3) Called by non-array &lt;a href=&quot;../../language/new&quot;&gt;new-expressions&lt;/a&gt; to allocate storage required for a single object whose alignment requirement exceeds &lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt;</source>
          <target state="translated">3）配列要件が &lt;code&gt;__STDCPP_DEFAULT_NEW_ALIGNMENT__&lt;/code&gt; を超える単一オブジェクトに必要なストレージを割り当てるために、配列ではない&lt;a href=&quot;../../language/new&quot;&gt;new-expressions&lt;/a&gt;によって呼び出されます</target>
        </trans-unit>
        <trans-unit id="517a2e7859fad342e8339288262270e3d64cd5ae" translate="yes" xml:space="preserve">
          <source>3) Calls every callback registered by &lt;code&gt;&lt;a href=&quot;../ios_base/register_callback&quot;&gt;register_callback()&lt;/a&gt;&lt;/code&gt; passing &lt;a href=&quot;../ios_base/event&quot;&gt;&lt;code&gt;copyfmt_event&lt;/code&gt;&lt;/a&gt; as parameter</source>
          <target state="translated">3）&lt;a href=&quot;../ios_base/event&quot;&gt; &lt;code&gt;copyfmt_event&lt;/code&gt; &lt;/a&gt;をパラメーターとして渡して、 &lt;code&gt;&lt;a href=&quot;../ios_base/register_callback&quot;&gt;register_callback()&lt;/a&gt;&lt;/code&gt; によって登録されたすべてのコールバックを呼び出します</target>
        </trans-unit>
        <trans-unit id="138ee6153e3047f1d93689ab3206212aab811973" translate="yes" xml:space="preserve">
          <source>3) Calls the appropriate insertion operator, given an rvalue reference to an output stream object (equivalent to &lt;code&gt;os &amp;lt;&amp;lt; value&lt;/code&gt;). This function template does not participate in overload resolution unless the expression &lt;code&gt;os &amp;lt;&amp;lt; value&lt;/code&gt; is well-formed.(since C++17)</source>
          <target state="translated">3）出力ストリームオブジェクトへの右辺値参照を指定して、適切な挿入演算子を呼び出します（ &lt;code&gt;os &amp;lt;&amp;lt; value&lt;/code&gt; と同等）。この関数テンプレートは、式 &lt;code&gt;os &amp;lt;&amp;lt; value&lt;/code&gt; が整形式でない限り、オーバーロードの解決に参加しません。（C ++ 17以降）</target>
        </trans-unit>
        <trans-unit id="de070a5983dd60787ac4aa28adf1665de1e9000e" translate="yes" xml:space="preserve">
          <source>3) Catch-all handler, which is activated for any exception</source>
          <target state="translated">3)例外が発生した場合に起動されるキャッチオールハンドラ</target>
        </trans-unit>
        <trans-unit id="0dc4b2fd6e3b694b7ff8fd35f20434adce6f039f" translate="yes" xml:space="preserve">
          <source>3) Checks if none of the bits are set to &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">3）どのビットも &lt;code&gt;true&lt;/code&gt; に設定されていないかどうかを確認します</target>
        </trans-unit>
        <trans-unit id="6982458057cdcb098a70a57ce003a934dc6a6555" translate="yes" xml:space="preserve">
          <source>3) Checks if the character &lt;code&gt;c&lt;/code&gt; is classified by the mask &lt;code&gt;m&lt;/code&gt;</source>
          <target state="translated">3）文字 &lt;code&gt;c&lt;/code&gt; がマスク &lt;code&gt;m&lt;/code&gt; によって分類されているかどうかを確認します</target>
        </trans-unit>
        <trans-unit id="3f66e3e4edb359a08dd261ed52a0bda80001c7a1" translate="yes" xml:space="preserve">
          <source>3) Checks if unary predicate &lt;code&gt;p&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; for at least one element in the range &lt;code&gt;[first, last)&lt;/code&gt;.</source>
          <target state="translated">3）単項述語 &lt;code&gt;p&lt;/code&gt; が範囲 &lt;code&gt;[first, last)&lt;/code&gt; 少なくとも1つの要素に対して &lt;code&gt;true&lt;/code&gt; を返すかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="a6ad21aeb5bc08ed6ed57f70c99d7834d64b675d" translate="yes" xml:space="preserve">
          <source>3) Checks if unary predicate &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; for at least one element in the range &lt;code&gt;[first, last)&lt;/code&gt; (after projecting with the projection &lt;code&gt;proj&lt;/code&gt;).</source>
          <target state="translated">3）単項述語 &lt;code&gt;pred&lt;/code&gt; が範囲 &lt;code&gt;[first, last)&lt;/code&gt; 少なくとも1つの要素に対して &lt;code&gt;true&lt;/code&gt; を返すかどうかをチェックします（投影 &lt;code&gt;proj&lt;/code&gt; で投影した後）。</target>
        </trans-unit>
        <trans-unit id="8551280e75bef1b3f4675121add3c0f3124fb646" translate="yes" xml:space="preserve">
          <source>3) Checks whether &lt;a href=&quot;root_directory&quot;&gt;&lt;code&gt;root_directory()&lt;/code&gt;&lt;/a&gt; is empty.</source>
          <target state="translated">3）&lt;a href=&quot;root_directory&quot;&gt; &lt;code&gt;root_directory()&lt;/code&gt; &lt;/a&gt;が空かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="cc9f436acf6b24c0d26142d074257a80ae6cc54c" translate="yes" xml:space="preserve">
          <source>3) Checks whether &lt;code&gt;lhs&lt;/code&gt; is</source>
          <target state="translated">3） &lt;code&gt;lhs&lt;/code&gt; が</target>
        </trans-unit>
        <trans-unit id="24e17aba77f331c3ab3ac15c7858d72606dceab0" translate="yes" xml:space="preserve">
          <source>3) Checks whether &lt;code&gt;lhs&lt;/code&gt; is less than &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;lhs&lt;/code&gt; が &lt;code&gt;rhs&lt;/code&gt; より小さいかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="d2f3181e798a05645e2751614f028ec0cfcd196d" translate="yes" xml:space="preserve">
          <source>3) Checks whether &lt;code&gt;lhs&lt;/code&gt; is less than &lt;code&gt;rhs&lt;/code&gt;. Equivalent to &lt;code&gt;lhs.compare(rhs) &amp;lt; 0&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;lhs&lt;/code&gt; が &lt;code&gt;rhs&lt;/code&gt; より小さいかどうかを確認します。 &lt;code&gt;lhs.compare(rhs) &amp;lt; 0&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="fb940299605f34d29ed114c450d6d0424c55fa83" translate="yes" xml:space="preserve">
          <source>3) Compares a &lt;code&gt;[pos1, pos1+count1)&lt;/code&gt; substring of this string to a substring &lt;code&gt;[pos2, pos2+count2)&lt;/code&gt; of</source>
          <target state="translated">3）比較 &lt;code&gt;[pos1, pos1+count1)&lt;/code&gt; サブこの文字列の部分文字列 &lt;code&gt;[pos2, pos2+count2)&lt;/code&gt; の</target>
        </trans-unit>
        <trans-unit id="4af7afc9d4203c77090cf48e632fdd4573df17e1" translate="yes" xml:space="preserve">
          <source>3) Compares a &lt;code&gt;sub_match&lt;/code&gt; with a null-terminated sequence of the underlying character type pointed to by &lt;code&gt;s&lt;/code&gt;. Equivalent to &lt;code&gt;str().compare(c)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;sub_match&lt;/code&gt; を、 &lt;code&gt;s&lt;/code&gt; が指す基本となる文字型のヌル終了シーケンスと比較します。 &lt;code&gt;str().compare(c)&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="f69c1fbb422599bc962725dbb96d7bdaad883f11" translate="yes" xml:space="preserve">
          <source>3) Computes the</source>
          <target state="translated">3)計算します。</target>
        </trans-unit>
        <trans-unit id="a465bbf8b7710efdab73d9b8968c0c39cc33a3c0" translate="yes" xml:space="preserve">
          <source>3) Computes the inverse tangent of &lt;code&gt;vy&lt;/code&gt; and each value in the numeric array &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;vy&lt;/code&gt; の逆正接と数値配列 &lt;code&gt;x&lt;/code&gt; の各値を計算します。</target>
        </trans-unit>
        <trans-unit id="23b37ceb45df6ff2140af9f2e37a5581f8c59a28" translate="yes" xml:space="preserve">
          <source>3) Computes the values of &lt;code&gt;vbase&lt;/code&gt; raised to the power defined by the elements in the numeric array &lt;code&gt;exp&lt;/code&gt;.</source>
          <target state="translated">3）数値配列 &lt;code&gt;exp&lt;/code&gt; の要素で定義された累乗の &lt;code&gt;vbase&lt;/code&gt; の値を計算します。</target>
        </trans-unit>
        <trans-unit id="e286893b47fa45ff6c3363e04afec204645e51c3" translate="yes" xml:space="preserve">
          <source>3) Constant if &lt;code&gt;other&lt;/code&gt; refers to the same object as &lt;code&gt;*this&lt;/code&gt;, otherwise linear in &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first, last)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;other&lt;/code&gt; が &lt;code&gt;*this&lt;/code&gt; と同じオブジェクトを参照する場合は定数、それ以外の場合は &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first, last)&lt;/code&gt; 線形。</target>
        </trans-unit>
        <trans-unit id="e57bad1d757a6ed22cdc55d4717801ae6b025f43" translate="yes" xml:space="preserve">
          <source>3) Constructs a &lt;code&gt;std::basic_stringbuf&lt;/code&gt; object by performing the same initialization as 1), followed by initializing the associated character sequence as if by calling &lt;code&gt;&lt;a href=&quot;str&quot;&gt;str(new_str)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">3）1）と同じ初期化を実行して &lt;code&gt;std::basic_stringbuf&lt;/code&gt; オブジェクトを作成し、続いて &lt;code&gt;&lt;a href=&quot;str&quot;&gt;str(new_str)&lt;/a&gt;&lt;/code&gt; を呼び出すのと同じように関連する文字シーケンスを初期化します。</target>
        </trans-unit>
        <trans-unit id="00f3989c9581377f00769097da18714b0f548a59" translate="yes" xml:space="preserve">
          <source>3) Constructs a &lt;code&gt;std::default_delete&amp;lt;U[]&amp;gt;&lt;/code&gt; object from another &lt;code&gt;std::default_delete&amp;lt;U[]&amp;gt;&lt;/code&gt; object. This constructor will only participate in overload resolution if &lt;code&gt;U(*)[]&lt;/code&gt; is implicitly convertible to &lt;code&gt;T(*)[]&lt;/code&gt;.</source>
          <target state="translated">3）構築物A &lt;code&gt;std::default_delete&amp;lt;U[]&amp;gt;&lt;/code&gt; 別の目的 &lt;code&gt;std::default_delete&amp;lt;U[]&amp;gt;&lt;/code&gt; オブジェクト。このコンストラクタは、 &lt;code&gt;U(*)[]&lt;/code&gt; が &lt;code&gt;T(*)[]&lt;/code&gt; に暗黙的に変換可能な場合にのみ、オーバーロードの解決に参加します。</target>
        </trans-unit>
        <trans-unit id="96dd5708df38048ad24e2fe617abdc01737563f0" translate="yes" xml:space="preserve">
          <source>3) Constructs a &lt;code&gt;std::packaged_task&lt;/code&gt; object with a shared state and a copy of the task, initialized with &lt;code&gt;&lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;F&amp;gt;(f)&lt;/code&gt;. Uses the provided allocator to allocate memory necessary to store the task. This constructor does not participate in overload resolution if &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay&lt;/a&gt;&amp;lt;F&amp;gt;::type&lt;/code&gt; is the same type as &lt;code&gt;&lt;a href=&quot;../packaged_task&quot;&gt;std::packaged_task&lt;/a&gt;&amp;lt;R(ArgTypes...)&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;F&amp;gt;(f)&lt;/code&gt; &amp;lt;F&amp;gt;（f）で初期化 &lt;code&gt;std::packaged_task&lt;/code&gt; れた、共有状態とタスクのコピーを使用してstd :: packaged_taskオブジェクトを構築します。提供されたアロケータを使用して、タスクを格納するために必要なメモリを割り当てます。 &lt;code&gt;&lt;a href=&quot;../../types/decay&quot;&gt;std::decay&lt;/a&gt;&amp;lt;F&amp;gt;::type&lt;/code&gt; &amp;lt;F&amp;gt; :: typeが &lt;code&gt;&lt;a href=&quot;../packaged_task&quot;&gt;std::packaged_task&lt;/a&gt;&amp;lt;R(ArgTypes...)&amp;gt;&lt;/code&gt; &amp;lt;R（ArgTypes ...）&amp;gt;と同じタイプの場合、このコンストラクターはオーバーロードの解決に参加しません。</target>
        </trans-unit>
        <trans-unit id="cb8305cde77f61f5d205904b755db7179acca055" translate="yes" xml:space="preserve">
          <source>3) Constructs a &lt;code&gt;std::seed_seq&lt;/code&gt; with the initial seed sequence obtained by iterating over the range &lt;code&gt;[begin, end)&lt;/code&gt; and copying the values obtained by dereferencing the iterator, modulo 232</source>
          <target state="translated">3）範囲 &lt;code&gt;[begin, end)&lt;/code&gt; を反復して得られた初期シードシーケンスで &lt;code&gt;std::seed_seq&lt;/code&gt; を作成し、232を法として、反復子を逆参照して得られた値をコピーします。</target>
        </trans-unit>
        <trans-unit id="13a04e470438cbc38e9779df6f1cea0bcdcef69e" translate="yes" xml:space="preserve">
          <source>3) Constructs a &lt;code&gt;time_point&lt;/code&gt; by converting &lt;code&gt;t&lt;/code&gt; to &lt;code&gt;duration&lt;/code&gt;. This constructor only participates in overload resolution if &lt;code&gt;Duration2&lt;/code&gt; is implicitly convertible to &lt;code&gt;duration&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;t&lt;/code&gt; を &lt;code&gt;duration&lt;/code&gt; に変換して、 &lt;code&gt;time_point&lt;/code&gt; を構築します。このコンストラクタは、 &lt;code&gt;Duration2&lt;/code&gt; が暗黙的に &lt;code&gt;duration&lt;/code&gt; に変換可能な場合にのみ、オーバーロードの解決に参加します。</target>
        </trans-unit>
        <trans-unit id="a2a1529ec0920516a4d3095830d89fe2d0a3f650" translate="yes" xml:space="preserve">
          <source>3) Constructs a &lt;code&gt;weekday&lt;/code&gt; object representing the day of the week &lt;code&gt;dp&lt;/code&gt; corresponds to. This constructor defines an implicit conversion from &lt;code&gt;std::chrono::sys_days&lt;/code&gt; to &lt;code&gt;weekday&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;dp&lt;/code&gt; が対応する曜日を表す &lt;code&gt;weekday&lt;/code&gt; オブジェクトを構築します。このコンストラクタは、からの暗黙の型変換定義 &lt;code&gt;std::chrono::sys_days&lt;/code&gt; に &lt;code&gt;weekday&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="99a57aece3f0696c55f367ff55ed379ddd1a6cf7" translate="yes" xml:space="preserve">
          <source>3) Constructs a &lt;code&gt;year_month_day&lt;/code&gt; object that stores the year &lt;code&gt;ymdl.year()&lt;/code&gt;, month &lt;code&gt;ymdl.month()&lt;/code&gt; and day &lt;code&gt;ymdl.day()&lt;/code&gt;.</source>
          <target state="translated">3）年 &lt;code&gt;ymdl.year()&lt;/code&gt; 、月 &lt;code&gt;ymdl.month()&lt;/code&gt; および日 &lt;code&gt;ymdl.day()&lt;/code&gt; を格納する &lt;code&gt;year_month_day&lt;/code&gt; オブジェクトを構築します。</target>
        </trans-unit>
        <trans-unit id="476b68f911e0029bec53a4f4a3685c41402606cb" translate="yes" xml:space="preserve">
          <source>3) Constructs a &lt;code&gt;year_month_weekday&lt;/code&gt; object corresponding to the date represented by &lt;code&gt;dp&lt;/code&gt;. For any &lt;code&gt;year_month_weekday&lt;/code&gt; object storing a valid date, converting it to &lt;code&gt;sys_days&lt;/code&gt; and back yields the same value. This constructor defines an implicit conversion from &lt;code&gt;sys_days&lt;/code&gt; to &lt;code&gt;year_month_weekday&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;dp&lt;/code&gt; で表される日付に対応する &lt;code&gt;year_month_weekday&lt;/code&gt; オブジェクトを構築します。どんなについて &lt;code&gt;year_month_weekday&lt;/code&gt; のオブジェクトは、有効な日付を格納に変換 &lt;code&gt;sys_days&lt;/code&gt; バックと同じ値が得られます。このコンストラクターは、 &lt;code&gt;sys_days&lt;/code&gt; からyear_month_weekdayへの暗黙的な変換を定義し &lt;code&gt;year_month_weekday&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="91b0e2de75ca61ecc916b3d71ac67dbe804f50e5" translate="yes" xml:space="preserve">
          <source>3) Constructs a bitset using the characters in the &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt;&lt;code&gt;str&lt;/code&gt;. An optional starting position &lt;code&gt;pos&lt;/code&gt; and length &lt;code&gt;n&lt;/code&gt; can be provided, as well as characters denoting alternate values for set (&lt;code&gt;one&lt;/code&gt;) and unset (&lt;code&gt;zero&lt;/code&gt;) bits. &lt;code&gt;Traits::eq()&lt;/code&gt; is used to compare the character values.</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../../string/basic_string&quot;&gt;std::basic_string&lt;/a&gt;&lt;/code&gt; &lt;code&gt;str&lt;/code&gt; の文字を使用してビットセットを構築します。オプションの開始位置 &lt;code&gt;pos&lt;/code&gt; と長さ &lt;code&gt;n&lt;/code&gt; 、およびセット（ &lt;code&gt;one&lt;/code&gt; ）ビットとアンセット（ &lt;code&gt;zero&lt;/code&gt; ）ビットの代替値を示す文字を指定できます。 &lt;code&gt;Traits::eq()&lt;/code&gt; は文字値を比較するために使用されます。</target>
        </trans-unit>
        <trans-unit id="2ecc8edae63177c476e693356ecaafbb380e0079" translate="yes" xml:space="preserve">
          <source>3) Constructs a copy of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;other&lt;/code&gt; のコピーを作成します。</target>
        </trans-unit>
        <trans-unit id="2c604462fc4435d3e62e6e0e1364f0662b73eca6" translate="yes" xml:space="preserve">
          <source>3) Constructs a copy of &lt;code&gt;other&lt;/code&gt;. If &lt;code&gt;&lt;a href=&quot;../../types/is_copy_constructible&quot;&gt;std::is_trivially_copy_constructible_v&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; , this copy constructor is a trivial copy constructor.</source>
          <target state="translated">3） &lt;code&gt;other&lt;/code&gt; のコピーを作成します。場合 &lt;code&gt;&lt;a href=&quot;../../types/is_copy_constructible&quot;&gt;std::is_trivially_copy_constructible_v&lt;/a&gt;&amp;lt;T&amp;gt;&lt;/code&gt; あり &lt;code&gt;true&lt;/code&gt; 、このコピーコンストラクタは、些細なコピーコンストラクタです。</target>
        </trans-unit>
        <trans-unit id="b6551e4ab1347d774118033aacfc8b835d211089" translate="yes" xml:space="preserve">
          <source>3) Constructs a distribution object where the intervals are taken from the initializer list &lt;code&gt;bl&lt;/code&gt; and the weights generated by the function &lt;code&gt;fw&lt;/code&gt;.</source>
          <target state="translated">3）間隔が初期化子リスト &lt;code&gt;bl&lt;/code&gt; および関数 &lt;code&gt;fw&lt;/code&gt; によって生成された重みから取得される分布オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="fe98fada32eafe7fee0c1f9b54c5d85a913e88ea" translate="yes" xml:space="preserve">
          <source>3) Constructs a distribution object where the intervals are taken from the initializer list &lt;code&gt;ilist&lt;/code&gt; and the weights generated by the function &lt;code&gt;fw&lt;/code&gt;.</source>
          <target state="translated">3）間隔が初期化リスト &lt;code&gt;ilist&lt;/code&gt; と関数 &lt;code&gt;fw&lt;/code&gt; によって生成された重みから取得される分布オブジェクトを構築します。</target>
        </trans-unit>
        <trans-unit id="9010ff91722191d49898f46fb2db293153fd9fcb" translate="yes" xml:space="preserve">
          <source>3) Constructs a duration with &lt;code&gt;r&lt;/code&gt; ticks. Note that this constructor only participates in overload resolution if &lt;code&gt;Rep2&lt;/code&gt; (the argument type) is implicitly convertible to &lt;code&gt;rep&lt;/code&gt; (the type of this duration's ticks) and</source>
          <target state="translated">3） &lt;code&gt;r&lt;/code&gt; ティックで期間を構築します。このコンストラクターは、 &lt;code&gt;Rep2&lt;/code&gt; （引数の型）が暗黙的に &lt;code&gt;rep&lt;/code&gt; （この期間のティックの型）に変換可能な場合にのみ、オーバーロードの解決に参加することに注意してください。</target>
        </trans-unit>
        <trans-unit id="5fcbc718af2ff4abacd7d3b3cccb97a2e4243517" translate="yes" xml:space="preserve">
          <source>3) Constructs a numeric array with &lt;code&gt;count&lt;/code&gt; copies of &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;val&lt;/code&gt; の &lt;code&gt;count&lt;/code&gt; 個のコピーを持つ数値配列を作成します。</target>
        </trans-unit>
        <trans-unit id="c7e48481604863d0dfa95055a712627ab6abe30d" translate="yes" xml:space="preserve">
          <source>3) Constructs a regex from a sequence of &lt;code&gt;count&lt;/code&gt; characters, pointed to by &lt;code&gt;s&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;s&lt;/code&gt; が指す &lt;code&gt;count&lt;/code&gt; 文字のシーケンスから正規表現を作成します。</target>
        </trans-unit>
        <trans-unit id="3df5c87f17409e414fcfbef003853974662da9be" translate="yes" xml:space="preserve">
          <source>3) Constructs a span that is a view over the range &lt;code&gt;[first, last)&lt;/code&gt;; equivalent to &lt;code&gt;span(first, last - first)&lt;/code&gt;.</source>
          <target state="translated">3）範囲のビューであるスパンを構築します &lt;code&gt;[first, last)&lt;/code&gt; ; &lt;code&gt;span(first, last - first)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="67ec80fdc38d323b47d618c8fc41ea3821841740" translate="yes" xml:space="preserve">
          <source>3) Constructs a view of the first &lt;code&gt;count&lt;/code&gt; characters of the character array starting with the element pointed by &lt;code&gt;s&lt;/code&gt;. &lt;code&gt;s&lt;/code&gt; can contain null characters. The behavior is undefined if &lt;code&gt;[s, s+count)&lt;/code&gt; is not a valid range (even though the constructor may not access any of the elements of this range). After construction, &lt;code&gt;&lt;a href=&quot;data&quot;&gt;data()&lt;/a&gt;&lt;/code&gt; is equal to &lt;code&gt;s&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;size&quot;&gt;size()&lt;/a&gt;&lt;/code&gt; is equal to &lt;code&gt;count&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;s&lt;/code&gt; が指す要素で始まる文字配列の最初の &lt;code&gt;count&lt;/code&gt; 文字のビューを作成します。 &lt;code&gt;s&lt;/code&gt; にはnull文字を含めることができます。 &lt;code&gt;[s, s+count)&lt;/code&gt; が有効な範囲でない場合の動作は未定義です（コンストラクターがこの範囲の要素にアクセスできない場合でも）。作成後、 &lt;code&gt;&lt;a href=&quot;data&quot;&gt;data()&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;s&lt;/code&gt; に等しくなり、 &lt;code&gt;&lt;a href=&quot;size&quot;&gt;size()&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;count&lt;/code&gt; に等しくなります。</target>
        </trans-unit>
        <trans-unit id="964a4bae8736a3a8075177aac2441d4c603692a7" translate="yes" xml:space="preserve">
          <source>3) Constructs error code from an error code enum &lt;code&gt;e&lt;/code&gt;. Equivalent to &lt;code&gt;*this = make_error_code(e)&lt;/code&gt;. The overload participates in overload resolutions only if &lt;code&gt;&lt;a href=&quot;is_error_code_enum&quot;&gt;std::is_error_code_enum&lt;/a&gt;&amp;lt;ErrorCodeEnum&amp;gt;::value == true&lt;/code&gt;.</source>
          <target state="translated">3）エラーコードenum &lt;code&gt;e&lt;/code&gt; からエラーコードを作成します。 &lt;code&gt;*this = make_error_code(e)&lt;/code&gt; 同等です。オーバーロードは、 &lt;code&gt;&lt;a href=&quot;is_error_code_enum&quot;&gt;std::is_error_code_enum&lt;/a&gt;&amp;lt;ErrorCodeEnum&amp;gt;::value == true&lt;/code&gt; 場合にのみ、オーバーロードの解決に参加します。</target>
        </trans-unit>
        <trans-unit id="a3eb138f76af62a7607422b7f4c883c461912cca" translate="yes" xml:space="preserve">
          <source>3) Constructs the &lt;code&gt;wstring_convert&lt;/code&gt; object with a specified conversion facet and specified shift state, using default-constructed values for the error strings</source>
          <target state="translated">3）エラー文字列のデフォルトで構築された値を使用して、指定された変換ファセットと指定されたシフト状態で &lt;code&gt;wstring_convert&lt;/code&gt; オブジェクトを構築します</target>
        </trans-unit>
        <trans-unit id="a33d1d304b0a25cef109d968ef63330daaa9f944" translate="yes" xml:space="preserve">
          <source>3) Constructs the container with &lt;code&gt;count&lt;/code&gt;&lt;a href=&quot;../../named_req/defaultinsertable&quot;&gt;default-inserted&lt;/a&gt; instances of &lt;code&gt;T&lt;/code&gt;. No copies are made.</source>
          <target state="translated">3）を用いて容器を構築 &lt;code&gt;count&lt;/code&gt; &lt;a href=&quot;../../named_req/defaultinsertable&quot;&gt;デフォルト挿入&lt;/a&gt;のインスタンス &lt;code&gt;T&lt;/code&gt; 。コピーは作成されません。</target>
        </trans-unit>
        <trans-unit id="830d36d02be6282ca0f8a0acac62fe5e14e68950" translate="yes" xml:space="preserve">
          <source>3) Constructs the distribution with weights in &lt;code&gt;weights&lt;/code&gt;. Effectively calls &lt;code&gt;discrete_distribution(weights.begin(), weights.end())&lt;/code&gt;.  4) Constructs the distribution with &lt;code&gt;count&lt;/code&gt; weights that are generated using function &lt;code&gt;unary_op&lt;/code&gt;. Each of the weights is equal to w.</source>
          <target state="translated">3）weightsの重みで分布を構築し &lt;code&gt;weights&lt;/code&gt; 。 &lt;code&gt;discrete_distribution(weights.begin(), weights.end())&lt;/code&gt; 効果的に呼び出します。4）関数 &lt;code&gt;unary_op&lt;/code&gt; を使用して生成された &lt;code&gt;count&lt;/code&gt; 重みを持つ分布を構築します。それぞれの重みはwに等しい。</target>
        </trans-unit>
        <trans-unit id="3cd122753f7c40e2ec55d1daa7ae71573e4c662b" translate="yes" xml:space="preserve">
          <source>3) Constructs the engine and initializes the state by calling &lt;code&gt;s.generate(a, a+n*k)&lt;/code&gt; where a is an array of length n*k and k is ceil(w/32) and then, iteratively for i=-n,...,-1, setting each element of the engine state X</source>
          <target state="translated">3）エンジンを構築し、 &lt;code&gt;s.generate(a, a+n*k)&lt;/code&gt; 呼び出して状態を初期化します。ここで、aは長さn * kの配列であり、kはceil（w / 32）であり、その後i =- n、...、-1、エンジン状態Xの各要素の設定</target>
        </trans-unit>
        <trans-unit id="feefcacec5d3c35a3cd07177a9d51f945c665e9c" translate="yes" xml:space="preserve">
          <source>3) Constructs the string with a substring &lt;code&gt;[pos, pos+count)&lt;/code&gt; of &lt;code&gt;other&lt;/code&gt;. If &lt;code&gt;count == npos&lt;/code&gt;, if &lt;code&gt;count&lt;/code&gt; is not specified, or if the requested substring lasts past the end of the string, the resulting substring is &lt;code&gt;[pos, other.size())&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;other&lt;/code&gt; の部分文字列 &lt;code&gt;[pos, pos+count)&lt;/code&gt; で文字列を作成します。場合は &lt;code&gt;count == npos&lt;/code&gt; 、場合 &lt;code&gt;count&lt;/code&gt; 指定されていない場合、または要求されたサブ文字列の末尾を越えて続いた場合、結果のストリングがあり &lt;code&gt;[pos, other.size())&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="54929ae13db823098c100ac62d399b341043eb6f" translate="yes" xml:space="preserve">
          <source>3) Constructs the underlying engine with seed sequence &lt;code&gt;seq&lt;/code&gt;. This constructor only participate in overload resolution if &lt;code&gt;Sseq&lt;/code&gt; qualifies as a &lt;a href=&quot;../../../named_req/seedsequence&quot;&gt;SeedSequence&lt;/a&gt;. In particular, this constructor does not participate in overload resolution if &lt;code&gt;Sseq&lt;/code&gt; is implicitly convertible to &lt;code&gt;result_type&lt;/code&gt;.</source>
          <target state="translated">3）シードシーケンス &lt;code&gt;seq&lt;/code&gt; を使用して、基になるエンジンを構築します。場合は、このコンストラクタは唯一のオーバーロードの解決に参加 &lt;code&gt;Sseq&lt;/code&gt; がとしての資格&lt;a href=&quot;../../../named_req/seedsequence&quot;&gt;SeedSequence&lt;/a&gt;。特に、 &lt;code&gt;Sseq&lt;/code&gt; が暗黙的に &lt;code&gt;result_type&lt;/code&gt; に変換可能な場合、このコンストラクターはオーバーロードの解決に参加しません。</target>
        </trans-unit>
        <trans-unit id="7ff9e2d6bae24b89f3f3d60f64fe7f2302f8db90" translate="yes" xml:space="preserve">
          <source>3) Constructs with underlying error code &lt;code&gt;ev&lt;/code&gt; and associated error category &lt;code&gt;ecat&lt;/code&gt;.</source>
          <target state="translated">3）根本的なエラーコード &lt;code&gt;ev&lt;/code&gt; および関連するエラーカテゴリ &lt;code&gt;ecat&lt;/code&gt; を使用して構成します。</target>
        </trans-unit>
        <trans-unit id="f812bfcbb7b7abc8f2a249295f4b678a65bf2709" translate="yes" xml:space="preserve">
          <source>3) Conversion that converts pointer-to-derived to pointer-to-base is better than the conversion of pointer-to-derived to pointer-to-void, and conversion of pointer-to-base to void is better than pointer-to-derived to void.</source>
          <target state="translated">3)ポインタ-to-derivedをポインタ-to-baseに変換する変換は、ポインタ-to-derivedをポインタ-to-voidに変換する変換よりも、ポインタ-to-baseをvoidに変換する変換の方が、ポインタ-to-derivedをvoidに変換する変換よりも、ポインタ-to-baseをvoidに変換する変換の方が優れています。</target>
        </trans-unit>
        <trans-unit id="e63ec24229261a6479dd28ae8072057c214c2012" translate="yes" xml:space="preserve">
          <source>3) Converting constructor. Initializes each element of the tuple with the corresponding value in &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;UTypes&amp;gt;(args)&lt;/code&gt;.</source>
          <target state="translated">3）変換コンストラクター。 &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;UTypes&amp;gt;(args)&lt;/code&gt; の対応する値を使用して、タプルの各要素を初期化します。</target>
        </trans-unit>
        <trans-unit id="af805f3b773460453ed30bf0c519ec57ec7edb30" translate="yes" xml:space="preserve">
          <source>3) Converts &lt;code&gt;other&lt;/code&gt; to a &lt;code&gt;std::chrono::sys_time&lt;/code&gt; as if by &lt;code&gt;zone-&amp;gt;to_sys(other)&lt;/code&gt; (where &lt;code&gt;zone&lt;/code&gt; is the non-static data member holding the stored time zone pointer) and assigns the result to the stored time point. The time zone pointer is unchanged. After this call, &lt;code&gt;get_local_time() == other&lt;/code&gt;.</source>
          <target state="translated">3）変換し &lt;code&gt;other&lt;/code&gt; の &lt;code&gt;std::chrono::sys_time&lt;/code&gt; たかのように &lt;code&gt;zone-&amp;gt;to_sys(other)&lt;/code&gt; （ここで &lt;code&gt;zone&lt;/code&gt; 格納されたタイムゾーンのポインタを保持する非静的データメンバーである）と、記憶された時点に結果を割り当てます。タイムゾーンポインターは変更されません。この呼び出しの後、 &lt;code&gt;get_local_time() == other&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb3f848d2885d8f262ac8c726f9425d1c4e86823" translate="yes" xml:space="preserve">
          <source>3) Converts a signed decimal integer to a string with the same content as what &lt;code&gt;&lt;a href=&quot;../../io/c/fprintf&quot;&gt;std::sprintf&lt;/a&gt;(buf, &quot;%lld&quot;, value)&lt;/code&gt; would produce for sufficiently large &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../../io/c/fprintf&quot;&gt;std::sprintf&lt;/a&gt;(buf, &quot;%lld&quot;, value)&lt;/code&gt; が十分に大きな &lt;code&gt;buf&lt;/code&gt; に対して生成するものと同じ内容の符号付き10進整数を文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="e75aea4c132f1d76b2355f56c6289278e0523232" translate="yes" xml:space="preserve">
          <source>3) Converts a signed decimal integer to a wide string with the same content as what &lt;code&gt;&lt;a href=&quot;../../io/c/fwprintf&quot;&gt;std::swprintf&lt;/a&gt;(buf, sz, L&quot;%lld&quot;, value)&lt;/code&gt; would produce for sufficiently large &lt;code&gt;buf&lt;/code&gt;.</source>
          <target state="translated">3）符号付き10進整数を、 &lt;code&gt;&lt;a href=&quot;../../io/c/fwprintf&quot;&gt;std::swprintf&lt;/a&gt;(buf, sz, L&quot;%lld&quot;, value)&lt;/code&gt; が十分に大きい &lt;code&gt;buf&lt;/code&gt; に対して生成するものと同じ内容のワイド文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="dd8f5032db43607915e0d96906bf3d79af6eb796" translate="yes" xml:space="preserve">
          <source>3) Converts the (possibly wide) character &lt;code&gt;c&lt;/code&gt; to multibyte representation if the character can be represented with a single byte (for example, ASCII characters in UTF-8 encoding are single bytes). Returns &lt;code&gt;dflt&lt;/code&gt; if such conversion does not exist.</source>
          <target state="translated">3）文字がシングルバイトで表現できる場合（たとえば、ワイド文字）の文字 &lt;code&gt;c&lt;/code&gt; をマルチバイト表現に変換します（たとえば、UTF-8エンコーディングのASCII文字はシングルバイトです）。 &lt;code&gt;dflt&lt;/code&gt; ような変換が存在しない場合は、dfltを返します。</target>
        </trans-unit>
        <trans-unit id="31f9446d0d45d092b3886a9085482b5ea7b4f82b" translate="yes" xml:space="preserve">
          <source>3) Converts the calendar date and time stored in the &lt;code&gt;&lt;a href=&quot;../../chrono/c/tm&quot;&gt;std::tm&lt;/a&gt;&lt;/code&gt; object pointed to by &lt;code&gt;t&lt;/code&gt; into a character string, according to the format conversion sequence formed by concatenating &lt;code&gt;'%'&lt;/code&gt;, the value of &lt;code&gt;modifier&lt;/code&gt; if not &lt;code&gt;'\0'&lt;/code&gt;, and the value of &lt;code&gt;format&lt;/code&gt;. The format is interpreted the same way as the function &lt;code&gt;&lt;a href=&quot;../../chrono/c/strftime&quot;&gt;std::strftime&lt;/a&gt;&lt;/code&gt;, except that the formats that are described as locale-dependent are defined by this locale, and additional format specifiers may be supported (the &lt;code&gt;fill&lt;/code&gt; argument is provided for these implementation-defined format specifiers to use). The string is written to the output iterator &lt;code&gt;out&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;'%'&lt;/code&gt; と &lt;code&gt;'\0'&lt;/code&gt; でない場合の &lt;code&gt;modifier&lt;/code&gt; の値を連結して形成されるフォーマット変換シーケンスに従って、 &lt;code&gt;t&lt;/code&gt; が指す &lt;code&gt;&lt;a href=&quot;../../chrono/c/tm&quot;&gt;std::tm&lt;/a&gt;&lt;/code&gt; オブジェクトに格納されているカレンダーの日付と時刻を文字列に変換します。 &lt;code&gt;format&lt;/code&gt; の値。形式は、関数 &lt;code&gt;&lt;a href=&quot;../../chrono/c/strftime&quot;&gt;std::strftime&lt;/a&gt;&lt;/code&gt; と同じように解釈されますが、ロケール依存として記述されている形式はこのロケールによって定義され、追加の形式指定子がサポートされる場合があります（これらの実装定義に対して &lt;code&gt;fill&lt;/code&gt; 引数が提供されます）使用するフォーマット指定子）。文字列は出力イテレータ &lt;code&gt;out&lt;/code&gt; に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="d88e37ff7b6eb3524e059b8810e273e70057345d" translate="yes" xml:space="preserve">
          <source>3) Converts the character &lt;code&gt;c&lt;/code&gt; to lower case if a lower case form is defined by this locale.</source>
          <target state="translated">3）このロケールで小文字の形式が定義されている場合、文字 &lt;code&gt;c&lt;/code&gt; を小文字に変換します。</target>
        </trans-unit>
        <trans-unit id="1d53e1f3c14ea87c07a93345c0b40052af556c2d" translate="yes" xml:space="preserve">
          <source>3) Converts the character &lt;code&gt;c&lt;/code&gt; to upper case if an upper case form is defined by this locale.</source>
          <target state="translated">3）大文字の形式がこのロケールで定義されている場合、文字 &lt;code&gt;c&lt;/code&gt; を大文字に変換します。</target>
        </trans-unit>
        <trans-unit id="367ceb3385c6acfacdbf505e5a4a5dd25e4edee3" translate="yes" xml:space="preserve">
          <source>3) Converts the narrow string &lt;code&gt;str&lt;/code&gt; to wide_string.</source>
          <target state="translated">3）ナロー文字列 &lt;code&gt;str&lt;/code&gt; をwide_stringに変換します。</target>
        </trans-unit>
        <trans-unit id="61921ae71470ece8e99faa506a905265438537f8" translate="yes" xml:space="preserve">
          <source>3) Converts the single-byte character &lt;code&gt;c&lt;/code&gt; to the corresponding wide character representation using the simplest reasonable transformation. Typically, this applies only to the characters whose multibyte encoding is a single byte (e.g. U+0000-U+007F in UTF-8).</source>
          <target state="translated">3）最も単純で妥当な変換を使用して、シングルバイト文字 &lt;code&gt;c&lt;/code&gt; を対応するワイド文字表現に変換します。通常、これはマルチバイトエンコーディングが1バイトの文字（たとえば、UTF-8のU + 0000-U + 007F）にのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="31c2af87cdf387057c1ad476332cd7f87f9f25b9" translate="yes" xml:space="preserve">
          <source>3) Converts the wide string &lt;code&gt;str&lt;/code&gt; to &lt;code&gt;byte_string&lt;/code&gt;.</source>
          <target state="translated">3）ワイド文字列 &lt;code&gt;str&lt;/code&gt; を &lt;code&gt;byte_string&lt;/code&gt; に変換します。</target>
        </trans-unit>
        <trans-unit id="68e37c01f15885010341eed1f8525729244327e1" translate="yes" xml:space="preserve">
          <source>3) Copies a &lt;code&gt;regex_iterator&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;regex_iterator&lt;/code&gt; をコピーします。</target>
        </trans-unit>
        <trans-unit id="9a6178933fbb19c7258b289edd5b4e450a3bbb69" translate="yes" xml:space="preserve">
          <source>3) Copy constructor is deleted.</source>
          <target state="translated">3)コピーコンストラクタを削除します。</target>
        </trans-unit>
        <trans-unit id="96208b9a778d7b0bcebef2b7c7aff7a8dc5a3deb" translate="yes" xml:space="preserve">
          <source>3) Copy constructor. Constructs the container with the copy of the contents of &lt;code&gt;other&lt;/code&gt;. If &lt;code&gt;alloc&lt;/code&gt; is not provided, allocator is obtained by calling &lt;code&gt;&lt;a href=&quot;../../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::select_on_container_copy_construction(other.get_allocator())&lt;/code&gt;.</source>
          <target state="translated">3）コンストラクタをコピーします。 &lt;code&gt;other&lt;/code&gt; の内容のコピーでコンテナを構築します。場合 &lt;code&gt;alloc&lt;/code&gt; 設けられていない、アロケータを呼び出すことによって取得された &lt;code&gt;&lt;a href=&quot;../../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::select_on_container_copy_construction(other.get_allocator())&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c55c22645cc620c02a81fb5ca61445338606b562" translate="yes" xml:space="preserve">
          <source>3) Copy-constructor. Constructs a match result with a copy of &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">3）コピーコンストラクター。 &lt;code&gt;rhs&lt;/code&gt; のコピーを使用して一致結果を構築します。</target>
        </trans-unit>
        <trans-unit id="efdb897683cf7111b40201a35236bb4fe024dc9f" translate="yes" xml:space="preserve">
          <source>3) Copy-constructor: initializes each allocator from the corresponding allocator of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">3）コピーコンストラクター： &lt;code&gt;other&lt;/code&gt; の対応するアロケーターから各アロケーターを初期化します。</target>
        </trans-unit>
        <trans-unit id="a026ea4ae7c67343b1a2c863b4606ed80bd8ed23" translate="yes" xml:space="preserve">
          <source>3) Copy-constructs the underlying container &lt;code&gt;c&lt;/code&gt; with the contents of &lt;code&gt;cont&lt;/code&gt;. Copy-constructs the comparison functor &lt;code&gt;comp&lt;/code&gt; with the contents of &lt;code&gt;compare&lt;/code&gt;. Calls &lt;code&gt;&lt;a href=&quot;../../algorithm/make_heap&quot;&gt;std::make_heap&lt;/a&gt;(c.begin(), c.end(), comp)&lt;/code&gt;.  This is also the default constructor.(until C++11)</source>
          <target state="translated">3）基になるコンテナー &lt;code&gt;c&lt;/code&gt; を &lt;code&gt;cont&lt;/code&gt; の内容でコピー構築します。 &lt;code&gt;compare&lt;/code&gt; の内容で比較ファンクター &lt;code&gt;comp&lt;/code&gt; をコピーして構築します。 &lt;code&gt;&lt;a href=&quot;../../algorithm/make_heap&quot;&gt;std::make_heap&lt;/a&gt;(c.begin(), c.end(), comp)&lt;/code&gt; （c.begin（）、c.end（）、comp）を呼び出します。これもデフォルトのコンストラクタです。（C ++ 11まで）</target>
        </trans-unit>
        <trans-unit id="256485a8519f254b2dc39000e98b72eb990ce7ed" translate="yes" xml:space="preserve">
          <source>3) Creates an optional object constructed in-place from &lt;code&gt;il&lt;/code&gt; and &lt;code&gt;args...&lt;/code&gt;. Equivalent to &lt;code&gt;return &lt;a href=&quot;../optional&quot;&gt;std::optional&lt;/a&gt;&amp;lt;T&amp;gt;(&lt;a href=&quot;../in_place&quot;&gt;std::in_place&lt;/a&gt;, il, &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...);&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;il&lt;/code&gt; と &lt;code&gt;args...&lt;/code&gt; からインプレースで構築されたオプションのオブジェクトを作成します。 &lt;code&gt;return &lt;a href=&quot;../optional&quot;&gt;std::optional&lt;/a&gt;&amp;lt;T&amp;gt;(&lt;a href=&quot;../in_place&quot;&gt;std::in_place&lt;/a&gt;, il, &lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...);&lt;/code&gt; &amp;lt;T&amp;gt;（&lt;a href=&quot;../in_place&quot;&gt;std :: in_place&lt;/a&gt;、il、&lt;a href=&quot;../forward&quot;&gt;std :: forward&lt;/a&gt; &amp;lt; Args &amp;gt;（args）...）;を返すのと同じです。。</target>
        </trans-unit>
        <trans-unit id="7aa2dd3231d1498c19cd0271b11d4ff43cd4ac9a" translate="yes" xml:space="preserve">
          <source>3) Creates new &lt;code&gt;std::thread&lt;/code&gt; object and associates it with a thread of execution. The new thread of execution starts executing</source>
          <target state="translated">3）新しい &lt;code&gt;std::thread&lt;/code&gt; オブジェクトを作成し、それを実行のスレッドに関連付けます。新しい実行スレッドが実行を開始します</target>
        </trans-unit>
        <trans-unit id="3624e9fc407de6e033f497636094f84ab9eb4ab4" translate="yes" xml:space="preserve">
          <source>3) Declares an unnamed parameter</source>
          <target state="translated">3)名前のないパラメータを宣言する</target>
        </trans-unit>
        <trans-unit id="82314d8e4577e9e1f4378af06c54f895d00398d2" translate="yes" xml:space="preserve">
          <source>3) Defaulted move constructor.</source>
          <target state="translated">3)デフォルトの動作コンストラクタです。</target>
        </trans-unit>
        <trans-unit id="08f8f359c5d1c597a7e97c802c134f8992f03134" translate="yes" xml:space="preserve">
          <source>3) Defines an</source>
          <target state="translated">3)定義</target>
        </trans-unit>
        <trans-unit id="0bcda4427e20520699a650963f66ff8713a2c96d" translate="yes" xml:space="preserve">
          <source>3) Deleted default constructor: if it is selected by &lt;a href=&quot;overload_resolution&quot;&gt;overload resolution&lt;/a&gt;, the program fails to compile.</source>
          <target state="translated">3）削除されたデフォルトコンストラクター：&lt;a href=&quot;overload_resolution&quot;&gt;オーバーロード解決&lt;/a&gt;によって選択された場合、プログラムはコンパイルに失敗します。</target>
        </trans-unit>
        <trans-unit id="c8c622798603707f70de1bc37982045bcd4b7a94" translate="yes" xml:space="preserve">
          <source>3) Deriving from &lt;code&gt;view_base&lt;/code&gt; enables &lt;a href=&quot;range&quot;&gt;&lt;code&gt;Range&lt;/code&gt;&lt;/a&gt; types to model &lt;code&gt;&lt;a href=&quot;../range/view&quot;&gt;View&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;view_base&lt;/code&gt; から派生させると、&lt;a href=&quot;range&quot;&gt; &lt;code&gt;Range&lt;/code&gt; &lt;/a&gt;タイプで &lt;code&gt;&lt;a href=&quot;../range/view&quot;&gt;View&lt;/a&gt;&lt;/code&gt; をモデル化できます。</target>
        </trans-unit>
        <trans-unit id="d760507a71a3d976887ec24433ae871eb44095f6" translate="yes" xml:space="preserve">
          <source>3) Designates the class, struct, or union named by the elaborated-class-specifier (see &lt;a href=&quot;elaborated_type_specifier&quot;&gt;elaborated type specifier&lt;/a&gt;) as a friend of this class. This means that the friend's member declarations and definitions can access private and protected members of this class and also that the friend can inherit from private and protected members of this class. The name of the class that is used in this friend declaration does not need to be previously declared.</source>
          <target state="translated">3）エラボレートされたクラス指定子（&lt;a href=&quot;elaborated_type_specifier&quot;&gt;エラボレートさ&lt;/a&gt;れた型指定子を参照）によって指定されたクラス、構造体、または共用体をこのクラスのフレンドとして指定します。これは、フレンドのメンバー宣言と定義がこのクラスのプライベートおよび保護されたメンバーにアクセスできること、およびフレンドがこのクラスのプライベートおよび保護されたメンバーから継承できることを意味します。このフレンド宣言で使用されるクラスの名前は、事前に宣言する必要はありません。</target>
        </trans-unit>
        <trans-unit id="b69a0016830c846f181b39dcd147ee1a295aed28" translate="yes" xml:space="preserve">
          <source>3) Determines whether &lt;code&gt;Fn&lt;/code&gt; is callable with the arguments &lt;code&gt;ArgTypes...&lt;/code&gt; (same as (1)), and that such call is known not to throw any exceptions.</source>
          <target state="translated">3） &lt;code&gt;Fn&lt;/code&gt; が引数 &lt;code&gt;ArgTypes...&lt;/code&gt; （（1）と同じ）で呼び出し可能かどうか、およびそのような呼び出しが例外をスローしないことがわかっているかどうかを判別します。</target>
        </trans-unit>
        <trans-unit id="85f4c27522c0349d0ae6adbeefa55004d2b19d37" translate="yes" xml:space="preserve">
          <source>3) Directly from within the body of a member function of X</source>
          <target state="translated">3)Xのメンバー機能の本体内から直接</target>
        </trans-unit>
        <trans-unit id="6d2317fc5f8f9714149de99823ef08e6b0ec3451" translate="yes" xml:space="preserve">
          <source>3) Drops the current</source>
          <target state="translated">3)現在のものを削除します。</target>
        </trans-unit>
        <trans-unit id="371ba3aa6758a6944bc9b3944af0b40ae779e73b" translate="yes" xml:space="preserve">
          <source>3) Each comment is replaced by one space character.</source>
          <target state="translated">3)各コメントはスペース1文字で置き換えられます。</target>
        </trans-unit>
        <trans-unit id="358db00ca9b7b7ee0f23a4c02934608814d1a665" translate="yes" xml:space="preserve">
          <source>3) Effectively calls &lt;code&gt;reset(m.release())&lt;/code&gt;. &lt;code&gt;auto_ptr_ref&lt;/code&gt; is an implementation-defined type that holds a reference to &lt;code&gt;auto_ptr&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;../auto_ptr&quot;&gt;std::auto_ptr&lt;/a&gt;&lt;/code&gt; is implicitly &lt;a href=&quot;operator_auto_ptr&quot;&gt;convertible to&lt;/a&gt; and &lt;a href=&quot;auto_ptr&quot;&gt;from&lt;/a&gt; this type. The implementation is allowed to provide the template with a different name or implement equivalent functionality in other ways.</source>
          <target state="translated">3） &lt;code&gt;reset(m.release())&lt;/code&gt; 的にreset（m.release（））を呼び出します。 &lt;code&gt;auto_ptr_ref&lt;/code&gt; は参照保持実装定義型で &lt;code&gt;auto_ptr&lt;/code&gt; はに。 &lt;code&gt;&lt;a href=&quot;../auto_ptr&quot;&gt;std::auto_ptr&lt;/a&gt;&lt;/code&gt; は&lt;a href=&quot;auto_ptr&quot;&gt;、&lt;/a&gt;この型との間で暗黙的に&lt;a href=&quot;operator_auto_ptr&quot;&gt;変換可能&lt;/a&gt;です。実装では、テンプレートに別の名前を付けたり、他の方法で同等の機能を実装したりできます。</target>
        </trans-unit>
        <trans-unit id="ea208722e0a45d69241102c67a42ab1b3451dbab" translate="yes" xml:space="preserve">
          <source>3) Elements are compared using the given binary comparison function &lt;code&gt;comp&lt;/code&gt; and the ranges must be sorted with respect to the same.</source>
          <target state="translated">3）要素は、与えられたバイナリ比較関数 &lt;code&gt;comp&lt;/code&gt; を使用して比較され、範囲は同じ要素に対してソートされる必要があります。</target>
        </trans-unit>
        <trans-unit id="5d22482345876679aa9fdfb5d7b06e47e4ef8653" translate="yes" xml:space="preserve">
          <source>3) Elements are compared using the given binary comparison function &lt;code&gt;comp&lt;/code&gt;.</source>
          <target state="translated">3）要素は、与えられたバイナリ比較関数 &lt;code&gt;comp&lt;/code&gt; を使用して比較されます。</target>
        </trans-unit>
        <trans-unit id="59b37effce3cec5b869a56a3839a873a040b696e" translate="yes" xml:space="preserve">
          <source>3) Elements are compared using the given binary predicate &lt;code&gt;p&lt;/code&gt;.</source>
          <target state="translated">3）要素は、与えられたバイナリ述語 &lt;code&gt;p&lt;/code&gt; を使用して比較されます。</target>
        </trans-unit>
        <trans-unit id="17053674bbf2a8299fe18a28822bedb78c3e43d2" translate="yes" xml:space="preserve">
          <source>3) Elements are compared using the given binary predicate &lt;code&gt;p&lt;/code&gt;. The behavior is undefined if it is not an equivalence relation.</source>
          <target state="translated">3）要素は、与えられたバイナリ述語 &lt;code&gt;p&lt;/code&gt; を使用して比較されます。同値関係でない場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="91ebae6040c235a28005697223fcadfa976d1c3f" translate="yes" xml:space="preserve">
          <source>3) Elements are compared using the given comparison function &lt;code&gt;comp&lt;/code&gt;.</source>
          <target state="translated">3）要素は、与えられた比較関数 &lt;code&gt;comp&lt;/code&gt; を使用して比較されます。</target>
        </trans-unit>
        <trans-unit id="e6cf8873670f23aba3147d8e63b8ec2ca7a42a6a" translate="yes" xml:space="preserve">
          <source>3) Empty condition is equivalent to &lt;code&gt;while(true)&lt;/code&gt;</source>
          <target state="translated">3）空の条件は &lt;code&gt;while(true)&lt;/code&gt; と同等です</target>
        </trans-unit>
        <trans-unit id="febe29958b978cc0b5ed698897c04c8f1c90ad59" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;*this = *this - dy;&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;*this = *this - dy;&lt;/code&gt; 同等</target>
        </trans-unit>
        <trans-unit id="55215fb0ae7aa1bda84ea52ce0fbe8b05b033324" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;--d_; return *this;&lt;/code&gt;</source>
          <target state="translated">3）-- &lt;code&gt;--d_; return *this;&lt;/code&gt; 同等です。* thisを返す;</target>
        </trans-unit>
        <trans-unit id="dfeae69bb12877f410f2084a8a1fec7071220c90" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;--rep_; return *this;&lt;/code&gt;</source>
          <target state="translated">3）-- &lt;code&gt;--rep_; return *this;&lt;/code&gt; 同等です。* thisを返す;</target>
        </trans-unit>
        <trans-unit id="28ad7cdc9d8ad0b552ad9519fa54146bb4fbd6db" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;compare(path(s))&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;compare(path(s))&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="c1b42a201ef2b69b394c723dc2226ee5d29f1161" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;construct(p, &lt;a href=&quot;../../utility/piecewise_construct&quot;&gt;std::piecewise_construct&lt;/a&gt;, &lt;a href=&quot;../../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;&amp;gt;(), &lt;a href=&quot;../../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;&amp;gt;())&lt;/code&gt;, that is, passes the inner allocator on to the pair's member types if they accept them. 4) Equivalent to</source>
          <target state="translated">3） &lt;code&gt;construct(p, &lt;a href=&quot;../../utility/piecewise_construct&quot;&gt;std::piecewise_construct&lt;/a&gt;, &lt;a href=&quot;../../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;&amp;gt;(), &lt;a href=&quot;../../utility/tuple&quot;&gt;std::tuple&lt;/a&gt;&amp;lt;&amp;gt;())&lt;/code&gt; と同等です。つまり、内部アロケーターがペアを受け入れる場合、ペアのメンバータイプに渡します。4）に相当</target>
        </trans-unit>
        <trans-unit id="ca271bc27bb8474ab419c4adc63a86f71a080cc3" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;find(basic_string_view(s, count), pos)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;find(basic_string_view(s, count), pos)&lt;/code&gt; ）と同等です。</target>
        </trans-unit>
        <trans-unit id="518e357748186b4bbd10dce6b0caf559889d1367" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;find_first_not_of(basic_string_view(s, count), pos)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;find_first_not_of(basic_string_view(s, count), pos)&lt;/code&gt; ）と同等です。</target>
        </trans-unit>
        <trans-unit id="689eda5bae81027f2f599a002893efef293ed99e" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;find_first_of(basic_string_view(s, count), pos)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;find_first_of(basic_string_view(s, count), pos)&lt;/code&gt; ）と同等です。</target>
        </trans-unit>
        <trans-unit id="d655f76faa2a47414ae96366af6b3d45d8678096" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;find_last_not_of(basic_string_view(s, count), pos)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;find_last_not_of(basic_string_view(s, count), pos)&lt;/code&gt; ）と同等です。</target>
        </trans-unit>
        <trans-unit id="94546a75c6157c8961a1d464fa70fbf18c1722ef" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;find_last_of(basic_string_view(s, count), pos)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;find_last_of(basic_string_view(s, count), pos)&lt;/code&gt; ）と同等です。</target>
        </trans-unit>
        <trans-unit id="f2c9d9a6578fab3a1310fb014e51bb73b63b4a8a" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;rep_ *= rhs; return *this;&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;rep_ *= rhs; return *this;&lt;/code&gt; 同等。* thisを返す;</target>
        </trans-unit>
        <trans-unit id="b1f2c02c0a848dd1986f1a6b291721df46d46019" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;rfind(basic_string_view(s, count), pos)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;rfind(basic_string_view(s, count), pos)&lt;/code&gt; ）と同等です。</target>
        </trans-unit>
        <trans-unit id="7e4ac87b75bbf9fe4e9f8ec0af038f5fdcb3e071" translate="yes" xml:space="preserve">
          <source>3) Equivalent to &lt;code&gt;substr(pos1, count1).compare(v.substr(pos2, count2))&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;substr(pos1, count1).compare(v.substr(pos2, count2))&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1c29ecc183143b7582767ac6c6b23b3d8ccc95ae" translate="yes" xml:space="preserve">
          <source>3) Equivalent to multiple alignas specifiers applied to the same declaration, one for each member of the &lt;a href=&quot;parameter_pack&quot;&gt;parameter pack&lt;/a&gt;, which can be either type or non-type parameter pack.</source>
          <target state="translated">3）同じ宣言に適用された複数のalignas指定子に相当し&lt;a href=&quot;parameter_pack&quot;&gt;ます。パラメーターパックの&lt;/a&gt;メンバーごとに1つあり、型または非型パラメーターパックのいずれかです。</target>
        </trans-unit>
        <trans-unit id="c2846db01371a2675f89c2fdde8bf5ebf2aaa44e" translate="yes" xml:space="preserve">
          <source>3) Equivalent to: &lt;code&gt;return compare_exchange_strong(expected, desired, order, fail_order);&lt;/code&gt;, where &lt;code&gt;fail_order&lt;/code&gt; is the same as &lt;code&gt;order&lt;/code&gt; except that &lt;code&gt;std:memory_order_acq_rel&lt;/code&gt; is replaced by &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_acquire&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_release&lt;/a&gt;&lt;/code&gt; is replaced by &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_relaxed&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">3）同等： &lt;code&gt;return compare_exchange_strong(expected, desired, order, fail_order);&lt;/code&gt; ここで、 &lt;code&gt;fail_order&lt;/code&gt; は同じである &lt;code&gt;order&lt;/code&gt; ことを除いて &lt;code&gt;std:memory_order_acq_rel&lt;/code&gt; 置き換えられている &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_acquire&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_release&lt;/a&gt;&lt;/code&gt; 置き換えられている &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_relaxed&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="300e574cb8d2b13ad4d80db6cdaab7e7dd27c5a7" translate="yes" xml:space="preserve">
          <source>3) Equivalent to: &lt;code&gt;return l = l ^ r;&lt;/code&gt;.</source>
          <target state="translated">3）と同等： &lt;code&gt;return l = l ^ r;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7f58ee1cc15a004eaa02255565eae7753771767" translate="yes" xml:space="preserve">
          <source>3) Equivalent to: &lt;code&gt;return std::byte(static_cast&amp;lt;unsigned int&amp;gt;(l) ^ static_cast&amp;lt;unsigned int&amp;gt;(r));&lt;/code&gt;.</source>
          <target state="translated">3）と同等： &lt;code&gt;return std::byte(static_cast&amp;lt;unsigned int&amp;gt;(l) ^ static_cast&amp;lt;unsigned int&amp;gt;(r));&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ae59c372c71c2577a6a605eb96f49235932b16a" translate="yes" xml:space="preserve">
          <source>3) Executes (1) for every element of &lt;code&gt;p&lt;/code&gt; that does not already exist. If &lt;code&gt;p&lt;/code&gt; already exists, the function does nothing (this condition is not treated as an error).</source>
          <target state="translated">3）まだ存在していない &lt;code&gt;p&lt;/code&gt; のすべての要素に対して（1）を実行します。もし &lt;code&gt;p&lt;/code&gt; すでに存在している、機能が（この条件はエラーとして扱われていない）何もしません。</target>
        </trans-unit>
        <trans-unit id="c5b2efd0c240c794cc63ccee8608aa8fa2795f22" translate="yes" xml:space="preserve">
          <source>3) Explicit instantiation declaration (without template argument deduction if every non-default template parameter is explicitly specified)</source>
          <target state="translated">3)明示的なインスタンス化宣言(デフォルト以外のテンプレートパラメータがすべて明示的に指定されている場合は、テンプレート引数の推論を行わない</target>
        </trans-unit>
        <trans-unit id="da06a15019c259b377c2872d2d85209978de2728" translate="yes" xml:space="preserve">
          <source>3) Extracts characters from &lt;code&gt;in&lt;/code&gt; and appends them to &lt;code&gt;s&lt;/code&gt;, except that whenever an &lt;code&gt;escape&lt;/code&gt; character is extracted, it is ignored and the next character is appended to &lt;code&gt;s&lt;/code&gt;. Extraction stops when &lt;code&gt;!in==true&lt;/code&gt; or when an unescaped &lt;code&gt;delim&lt;/code&gt; character is found.</source>
          <target state="translated">3） &lt;code&gt;in&lt;/code&gt; から文字を抽出し、それらを &lt;code&gt;s&lt;/code&gt; に追加します。ただし、 &lt;code&gt;escape&lt;/code&gt; 文字が抽出されるときは常に無視され、次の文字が &lt;code&gt;s&lt;/code&gt; に追加されます。 &lt;code&gt;!in==true&lt;/code&gt; またはエスケープされていない &lt;code&gt;delim&lt;/code&gt; のときに抽出が停止する文字が検出さ。</target>
        </trans-unit>
        <trans-unit id="5fba60a745b100066e65b0f865c19e1368649f58" translate="yes" xml:space="preserve">
          <source>3) Finds the first character equal to none of characters in character string pointed to by &lt;code&gt;s&lt;/code&gt;. The length of the string is determined by the first null character using &lt;code&gt;Traits::length(s)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;s&lt;/code&gt; が指す文字列のどの文字とも一致しない最初の文字を検索します。文字列の長さは、 &lt;code&gt;Traits::length(s)&lt;/code&gt; を使用して最初のnull文字によって決定されます。</target>
        </trans-unit>
        <trans-unit id="743c48cacd7f806bd5330d71c1fe59f65526abaa" translate="yes" xml:space="preserve">
          <source>3) Finds the first character equal to one of the characters in character string pointed to by &lt;code&gt;s&lt;/code&gt;. The length of the string is determined by the first null character using &lt;code&gt;Traits::length(s)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;s&lt;/code&gt; が指す文字列の文字の1つに等しい最初の文字を検索します。文字列の長さは、 &lt;code&gt;Traits::length(s)&lt;/code&gt; を使用して最初のnull文字によって決定されます。</target>
        </trans-unit>
        <trans-unit id="1c4f9369d9aa41e3c2e70caf678cef11bd5c59bc" translate="yes" xml:space="preserve">
          <source>3) Finds the first substring equal to the character string pointed to by &lt;code&gt;s&lt;/code&gt;. The length of the string is determined by the first null character using &lt;code&gt;Traits::length(s)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;s&lt;/code&gt; が指す文字列に等しい最初の部分文字列を見つけます。文字列の長さは、 &lt;code&gt;Traits::length(s)&lt;/code&gt; を使用して最初のnull文字によって決定されます。</target>
        </trans-unit>
        <trans-unit id="5f47c71c2880d2fbd432e526b56eb61b5a06792b" translate="yes" xml:space="preserve">
          <source>3) Finds the last character equal to none of characters in character string pointed to by &lt;code&gt;s&lt;/code&gt;. The length of the string is determined by the first null character using &lt;code&gt;Traits::length(s)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;s&lt;/code&gt; が指す文字列のどの文字にも等しい最後の文字を見つけます。文字列の長さは、 &lt;code&gt;Traits::length(s)&lt;/code&gt; を使用して最初のnull文字によって決定されます。</target>
        </trans-unit>
        <trans-unit id="81dc74e59e430cbc397dc6041420bcec0328bf2d" translate="yes" xml:space="preserve">
          <source>3) Finds the last character equal to one of characters in character string pointed to by &lt;code&gt;s&lt;/code&gt;. The length of the string is determined by the first null character using &lt;code&gt;Traits::length(s)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;s&lt;/code&gt; が指す文字列の文字のいずれかに等しい最後の文字を検索します。文字列の長さは、 &lt;code&gt;Traits::length(s)&lt;/code&gt; を使用して最初のnull文字によって決定されます。</target>
        </trans-unit>
        <trans-unit id="8de8caf6e440fce8a707b30a798616333911f49f" translate="yes" xml:space="preserve">
          <source>3) Finds the last substring equal to the character string pointed to by &lt;code&gt;s&lt;/code&gt;. The length of the string is determined by the first null character using &lt;code&gt;Traits::length(s)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;s&lt;/code&gt; が指す文字列に等しい最後の部分文字列を検索します。文字列の長さは、 &lt;code&gt;Traits::length(s)&lt;/code&gt; を使用して最初のnull文字によって決定されます。</target>
        </trans-unit>
        <trans-unit id="d8aa0b5faac0679b63d25e5d332bcf8124bbc228" translate="yes" xml:space="preserve">
          <source>3) First, destroys the currently contained value (if any). Then &lt;a href=&quot;../../language/direct_initialization&quot;&gt;direct-initializes&lt;/a&gt; the contained value as if constructing a value of type &lt;code&gt;T_I&lt;/code&gt; with the arguments &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt;. If an exception is thrown, &lt;code&gt;*this&lt;/code&gt; may become &lt;a href=&quot;valueless_by_exception&quot;&gt;valueless_by_exception&lt;/a&gt;. This overload only participates in overload resolution if &lt;code&gt;std::is_constructible_v&amp;lt;T_I, Args...&amp;gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;. The behavior is undefined if &lt;code&gt;I&lt;/code&gt; is not less than &lt;code&gt;sizeof...(Types)&lt;/code&gt;.</source>
          <target state="translated">3）最初に、現在含まれている値（存在する場合）を破棄します。次に、引数 &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;Args&amp;gt;(args)...&lt;/code&gt; &amp;lt; &lt;code&gt;T_I&lt;/code&gt; &amp;gt;（args）...を使用してT_I型の値を作成する場合と同様に、含まれている値を&lt;a href=&quot;../../language/direct_initialization&quot;&gt;直接初期化&lt;/a&gt;します。例外がスローされた場合、 &lt;code&gt;*this&lt;/code&gt; は&lt;a href=&quot;valueless_by_exception&quot;&gt;valueless_by_exceptionに&lt;/a&gt;なる可能性があります。このオーバーロードは、 &lt;code&gt;std::is_constructible_v&amp;lt;T_I, Args...&amp;gt;&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合にのみ、オーバーロードの解決に参加します。場合の振舞いは未定義である &lt;code&gt;I&lt;/code&gt; 未満ではない &lt;code&gt;sizeof...(Types)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b74c9c6cec2f0fc5a85adb2516f8f8d0411e086f" translate="yes" xml:space="preserve">
          <source>3) For all &lt;code&gt;i&lt;/code&gt;, assigns &lt;code&gt;std::get&amp;lt;i&amp;gt;(other)&lt;/code&gt; to &lt;code&gt;std::get&amp;lt;i&amp;gt;(*this)&lt;/code&gt;.</source>
          <target state="translated">3）すべての &lt;code&gt;i&lt;/code&gt; について、 &lt;code&gt;std::get&amp;lt;i&amp;gt;(other)&lt;/code&gt; を &lt;code&gt;std::get&amp;lt;i&amp;gt;(*this)&lt;/code&gt; に割り当てます。</target>
        </trans-unit>
        <trans-unit id="fda0586ac2841e1c4bf77f4ed375e08016f88616" translate="yes" xml:space="preserve">
          <source>3) For arguments whose type is a &lt;a href=&quot;class_template&quot;&gt;class template&lt;/a&gt; specialization, in addition to the class rules, the following types are examined and their associated classes and namespaces are added to the set</source>
          <target state="translated">3）型が&lt;a href=&quot;class_template&quot;&gt;クラステンプレート&lt;/a&gt;である引数の場合特殊化で、クラスルールに加えて、次のタイプが検査され、関連するクラスと名前空間がセットに追加されます。</target>
        </trans-unit>
        <trans-unit id="9a96fde6dc6a721ec123f58887136dd6d5e5bae9" translate="yes" xml:space="preserve">
          <source>3) For user-defined string literals, let &lt;code&gt;str&lt;/code&gt; be the literal without ud-suffix:</source>
          <target state="translated">3）ユーザー定義の文字列リテラルの場合、 &lt;code&gt;str&lt;/code&gt; をud-suffixのない。</target>
        </trans-unit>
        <trans-unit id="ca581ff7dc4b7ab8bca2073141703488dd827412" translate="yes" xml:space="preserve">
          <source>3) Forcing a destructor to be generated by the compiler</source>
          <target state="translated">3)コンパイラでデストラクタを強制的に生成する</target>
        </trans-unit>
        <trans-unit id="a001493f7c64ebd5131c969f057200e92f277664" translate="yes" xml:space="preserve">
          <source>3) Generalized sum of &lt;code&gt;init&lt;/code&gt; and &lt;code&gt;unary_op(*first)&lt;/code&gt;, &lt;code&gt;unary_op(*(first+1))&lt;/code&gt;, ... &lt;code&gt;unary_op(*(last-1))&lt;/code&gt; over &lt;code&gt;binary_op&lt;/code&gt;,</source>
          <target state="translated">3） &lt;code&gt;init&lt;/code&gt; と &lt;code&gt;unary_op(*first)&lt;/code&gt; 、 &lt;code&gt;unary_op(*(first+1))&lt;/code&gt; 、... &lt;code&gt;unary_op(*(last-1))&lt;/code&gt; れた &lt;code&gt;binary_op&lt;/code&gt; 、</target>
        </trans-unit>
        <trans-unit id="ce3eea3f5ef8fb841547136c9dd4631e86f4c26f" translate="yes" xml:space="preserve">
          <source>3) Hexadecimal integer literal (base 16, the first digit is the most significant, the letters 'a' through 'f' represent values (decimal) 10 through 15)</source>
          <target state="translated">3)16進整数リテラル(16進数、最初の桁が最上位、'a'から'f'までの文字は値(10進数)10から15を表します)</target>
        </trans-unit>
        <trans-unit id="18e078a9567ad63837bd7d87285b557739f3eebb" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_nothrow_constructible&lt;/a&gt;&amp;lt;T&amp;gt;::value&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, provides the member constant &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;true&lt;/code&gt;, otherwise &lt;code&gt;value&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_nothrow_constructible&lt;/a&gt;&amp;lt;T&amp;gt;::value&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合、trueに等しいメンバー定数 &lt;code&gt;value&lt;/code&gt; 提供し &lt;code&gt;true&lt;/code&gt; 。それ以外の場合、 &lt;code&gt;value&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; ですです。</target>
        </trans-unit>
        <trans-unit id="e94749bfa4a5a0b79c148b4ca19fb18bb64dba88" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;P&lt;/code&gt; is a class and &lt;code&gt;P&lt;/code&gt; has the form &lt;a href=&quot;templates#template-id&quot;&gt;simple-template-id&lt;/a&gt;, then the transformed &lt;code&gt;A&lt;/code&gt; can be a derived class of the deduced &lt;code&gt;A&lt;/code&gt;. Likewise, if &lt;code&gt;P&lt;/code&gt; is a pointer to a class of the form</source>
          <target state="translated">場合3） &lt;code&gt;P&lt;/code&gt; は、クラスであり、 &lt;code&gt;P&lt;/code&gt; は、フォーム有する&lt;a href=&quot;templates#template-id&quot;&gt;単純なテンプレートIDを&lt;/a&gt;、次いで、形質転換された &lt;code&gt;A&lt;/code&gt; は、推定の派生クラスであることができる &lt;code&gt;A&lt;/code&gt; 。同様に、 &lt;code&gt;P&lt;/code&gt; が次の形式のクラスへのポインタである場合</target>
        </trans-unit>
        <trans-unit id="ef5a440cf5a7d96884abf3428d187a098ad5ef5e" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;P&lt;/code&gt; is a reference type, the type referred to by &lt;code&gt;P&lt;/code&gt; is used for deduction.</source>
          <target state="translated">場合3） &lt;code&gt;P&lt;/code&gt; は、参照型である、によって参照されるタイプ &lt;code&gt;P&lt;/code&gt; を推論するために使用されます。</target>
        </trans-unit>
        <trans-unit id="6bc253b23035e64331429769682cb2e482d523c1" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;bool(rhs) == false&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;bool(rhs) == false&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; を返す場合</target>
        </trans-unit>
        <trans-unit id="1807f237b62d7c0ff529f93d2db801fcd9c690de" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;lhs.first&amp;lt;rhs.first&lt;/code&gt;, returns &lt;code&gt;true&lt;/code&gt;. Otherwise, if &lt;code&gt;rhs.first&amp;lt;lhs.first&lt;/code&gt;, returns &lt;code&gt;false&lt;/code&gt;. Otherwise, if &lt;code&gt;lhs.second&amp;lt;rhs.second&lt;/code&gt;, returns &lt;code&gt;true&lt;/code&gt;. Otherwise, returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;lhs.first&amp;lt;rhs.first&lt;/code&gt; 場合、 &lt;code&gt;true&lt;/code&gt; を返します。それ以外の場合、 &lt;code&gt;rhs.first&amp;lt;lhs.first&lt;/code&gt; 場合、 &lt;code&gt;false&lt;/code&gt; を返します。それ以外の場合、 &lt;code&gt;lhs.second&amp;lt;rhs.second&lt;/code&gt; 場合、 &lt;code&gt;true&lt;/code&gt; を返します。それ以外の場合は、 &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="67866eea868fe4a8c70c8483deec54f1cc4ac010" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;newoff + off &amp;lt; 0&lt;/code&gt; (the repositioning would move the pointer to before the beginning of the buffer) or if &lt;code&gt;newoff + off&lt;/code&gt; would point past the end of the buffer (or past the last initialized character in the buffer if overallocation is used), the function fails</source>
          <target state="translated">3） &lt;code&gt;newoff + off &amp;lt; 0&lt;/code&gt; （再配置によりポインターがバッファーの先頭の前に移動する）の場合、または &lt;code&gt;newoff + off&lt;/code&gt; がバッファーの末尾を超えた場合（または割り当て超過が使用されている場合は、バッファー内の最後に初期化された文字を超えた場合） ）、関数は失敗します</target>
        </trans-unit>
        <trans-unit id="0df5689e29daebbe75d2f6ac6c767d39a929b0bf" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;newoff + off&lt;/code&gt; is negative or out of bounds of the initialized part of the buffer, the function fails</source>
          <target state="translated">3） &lt;code&gt;newoff + off&lt;/code&gt; が負であるか、バッファの初期化された部分の範囲外の場合、関数は失敗します</target>
        </trans-unit>
        <trans-unit id="19ba36340ed98541145953df41d284633158ec39" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;other&lt;/code&gt; is empty, the constructed object is empty. Otherwise, the constructed object contains either the object contained in &lt;code&gt;other&lt;/code&gt;, or an object of the same type constructed from the object contained in &lt;code&gt;other&lt;/code&gt;, considering that object as an rvalue.</source>
          <target state="translated">3） &lt;code&gt;other&lt;/code&gt; が空の場合、構築されたオブジェクトは空です。そうでない場合は、構築されたオブジェクトが含まれているいずれかのオブジェクトは、中に含まれる &lt;code&gt;other&lt;/code&gt; 、またはオブジェクトから構成され、同じタイプのオブジェクトは、中に含まれる &lt;code&gt;other&lt;/code&gt; 、そのオブジェクトを右辺値と見なしてにます。</target>
        </trans-unit>
        <trans-unit id="cd2aa3e86b06b6154367fb110e80875de0a3964b" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;x.year() != y.year()&lt;/code&gt;, &lt;code&gt;x.year() &amp;lt; y.year()&lt;/code&gt;; otherwise if &lt;code&gt;x.month() != y.month()&lt;/code&gt;, &lt;code&gt;x.month() &amp;lt; y.month()&lt;/code&gt;; otherwise &lt;code&gt;x.day() &amp;lt; y.day()&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;x.year() != y.year()&lt;/code&gt; 場合、 &lt;code&gt;x.year() &amp;lt; y.year()&lt;/code&gt; ; それ以外の場合、 &lt;code&gt;x.month() != y.month()&lt;/code&gt; 、 &lt;code&gt;x.month() &amp;lt; y.month()&lt;/code&gt; ; それ以外の場合、 &lt;code&gt;x.day() &amp;lt; y.day()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d0b5f4a61ac6473689f8135a405addb4bf6a0345" translate="yes" xml:space="preserve">
          <source>3) If &lt;code&gt;x.year() != y.year()&lt;/code&gt;, &lt;code&gt;x.year() &amp;lt; y.year()&lt;/code&gt;; otherwise, &lt;code&gt;x.month() &amp;lt; y.month()&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;x.year() != y.year()&lt;/code&gt; 場合、 &lt;code&gt;x.year() &amp;lt; y.year()&lt;/code&gt; ; それ以外の場合、 &lt;code&gt;x.month() &amp;lt; y.month()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="91aa1ac09d5fdd2c721db5151ac9be65d3a40a3f" translate="yes" xml:space="preserve">
          <source>3) If a key equivalent to &lt;code&gt;k&lt;/code&gt; already exists in the container, does nothing. Otherwise, behaves like &lt;a href=&quot;emplace_hint&quot;&gt;emplace_hint&lt;/a&gt; except that the element is constructed as &lt;code&gt;value_type(std::piecewise_construct, std::forward_as_tuple(k), std::forward_as_tuple(std::forward&amp;lt;Args&amp;gt;(args)...))&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;k&lt;/code&gt; に相当するキーがコンテナにすでに存在する場合、何もしません。それ以外の場合、要素が &lt;code&gt;value_type(std::piecewise_construct, std::forward_as_tuple(k), std::forward_as_tuple(std::forward&amp;lt;Args&amp;gt;(args)...))&lt;/code&gt; として構築されることを除いて、&lt;a href=&quot;emplace_hint&quot;&gt;emplace_hintの&lt;/a&gt;ように動作します。</target>
        </trans-unit>
        <trans-unit id="086bb4d0a1b953edf002802349143c605fdb99a8" translate="yes" xml:space="preserve">
          <source>3) If an exception is thrown, the transaction is committed normally.</source>
          <target state="translated">3)例外が発生した場合、トランザクションは正常にコミットされます。</target>
        </trans-unit>
        <trans-unit id="5af73dfc31bb8d64df3c5724de8db163c310bf9b" translate="yes" xml:space="preserve">
          <source>3) If any argument is a pack expansion, it must be the last argument in the list</source>
          <target state="translated">3)いずれかの引数がパック拡張である場合は、リストの最後の引数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="4748e891646a457897a2c3a6d8280513e474d98e" translate="yes" xml:space="preserve">
          <source>3) If new_type is a pointer or reference to &lt;code&gt;Base&lt;/code&gt;, and the type of expression is a pointer or reference to &lt;code&gt;Derived&lt;/code&gt;, where &lt;code&gt;Base&lt;/code&gt; is a unique, accessible base class of &lt;code&gt;Derived&lt;/code&gt;, the result is a pointer or reference to the &lt;code&gt;Base&lt;/code&gt; class subobject within the &lt;code&gt;Derived&lt;/code&gt; object pointed or identified by expression. (Note: an implicit conversion and &lt;code&gt;static_cast&lt;/code&gt; can perform this conversion as well.)</source>
          <target state="translated">3）new_typeはへのポインタまたは参照である場合 &lt;code&gt;Base&lt;/code&gt; 、および式の型は、へのポインタまたは参照である &lt;code&gt;Derived&lt;/code&gt; 場合、 &lt;code&gt;Base&lt;/code&gt; が固有の、アクセス可能な基底クラスである &lt;code&gt;Derived&lt;/code&gt; 結果を指すポインタまたは参照である &lt;code&gt;Base&lt;/code&gt; 内のクラスのサブオブジェクト &lt;code&gt;Derived&lt;/code&gt; オブジェクトが指摘または式で識別されます。（注：暗黙的な変換と &lt;code&gt;static_cast&lt;/code&gt; もこの変換を実行できます。）</target>
        </trans-unit>
        <trans-unit id="9e5e61a20823b52cf2d425fddca3543d9f64af78" translate="yes" xml:space="preserve">
          <source>3) If new_type is an rvalue reference type, &lt;code&gt;static_cast&lt;/code&gt; converts the value of glvalue, class prvalue, or array prvalue(until C++17)any lvalue(since C++17)expression to</source>
          <target state="translated">3）new_typeは右辺値参照型である場合、 &lt;code&gt;static_cast&lt;/code&gt; を変換glvalueの値、クラスprvalue、または配列prvalue（C ++ 17）任意の左辺値まで（C以降++ 17）式とは</target>
        </trans-unit>
        <trans-unit id="9ec4ed623544cdc35eda94b168316c079c5a765d" translate="yes" xml:space="preserve">
          <source>3) If no characters were extracted for whatever reason (not even the discarded delimiter), &lt;code&gt;getline&lt;/code&gt; sets &lt;a href=&quot;../../io/ios_base/iostate&quot;&gt;&lt;code&gt;failbit&lt;/code&gt;&lt;/a&gt; and returns.</source>
          <target state="translated">3）何らかの理由で文字が抽出されなかった場合（破棄された区切り文字でさえも）、 &lt;code&gt;getline&lt;/code&gt; は&lt;a href=&quot;../../io/ios_base/iostate&quot;&gt; &lt;code&gt;failbit&lt;/code&gt; &lt;/a&gt;を設定して戻ります。</target>
        </trans-unit>
        <trans-unit id="1de74d7eeabbd39188b5931c52aa25d198f922c8" translate="yes" xml:space="preserve">
          <source>3) If no specializations match, the primary template is used</source>
          <target state="translated">3)スペシャライゼーションが一致しない場合は、プライマリテンプレートが使用されます。</target>
        </trans-unit>
        <trans-unit id="0a80c955f7945b93bfc82dd8cbfbecbc9435ea49" translate="yes" xml:space="preserve">
          <source>3) If one operand is pointer to</source>
          <target state="translated">3)1つのオペランドが</target>
        </trans-unit>
        <trans-unit id="df1474025a19d6acd889fb32730262ba99f1d4f7" translate="yes" xml:space="preserve">
          <source>3) If return-type-requirement is present, then:</source>
          <target state="translated">3)return-type-requirementがある場合。</target>
        </trans-unit>
        <trans-unit id="80f164dcbf1bf6e176fb4108c247e347c553d841" translate="yes" xml:space="preserve">
          <source>3) If the argument is an unparenthesized &lt;a href=&quot;name&quot;&gt;id-expression&lt;/a&gt; or an unparenthesized &lt;a href=&quot;operator_member_access&quot;&gt;class member access&lt;/a&gt; expression, then decltype yields the type of the entity named by this expression. If there is no such entity, or if the argument names a set of overloaded functions, the program is ill-formed.</source>
          <target state="translated">3）引数が括弧なしの&lt;a href=&quot;name&quot;&gt;id式&lt;/a&gt;または括弧なしの&lt;a href=&quot;operator_member_access&quot;&gt;クラスメンバーアクセス&lt;/a&gt;式である場合、decltypeはこの式で指定されたエンティティのタイプを生成します。そのようなエンティティが存在しない場合、または引数がオーバーロードされた関数のセットを指定している場合、プログラムは不正な形式です。</target>
        </trans-unit>
        <trans-unit id="f51692ad66852966d7b1e054dde635a17d3a5a6b" translate="yes" xml:space="preserve">
          <source>3) If the candidate function has more than &lt;code&gt;M&lt;/code&gt; parameters and the &lt;code&gt;M+1&lt;/code&gt;'st parameter and all parameters that follow have default arguments, it is viable. For the rest of overload resolution, the parameter list is truncated at M.</source>
          <target state="translated">3）候補関数に &lt;code&gt;M&lt;/code&gt; 個を超えるパラメーターがあり、 &lt;code&gt;M+1&lt;/code&gt; 番目のパラメーターとそれに続くすべてのパラメーターにデフォルトの引数がある場合、それは実行可能です。残りのオーバーロード解決では、パラメーターリストはMで切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="03d0370f5977c4c68bd33fce7688cacef8c7ef93" translate="yes" xml:space="preserve">
          <source>3) If the pointers are pointers to object and represent the same address, they</source>
          <target state="translated">3)ポインタがオブジェクトへのポインタであり、同じアドレスを表す場合は</target>
        </trans-unit>
        <trans-unit id="99be6833ae341b08b300b24b7cd653a2949d68a3" translate="yes" xml:space="preserve">
          <source>3) If the type is a function type F, it is replaced by the type &quot;pointer to F&quot;</source>
          <target state="translated">3)型が関数型Fの場合は、&quot;Fへのポインタ &quot;という型に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="22721145066de589245fca01eb49ec62017cd25a" translate="yes" xml:space="preserve">
          <source>3) If the value of &lt;code&gt;lexically_relative(base)&lt;/code&gt; is not an empty path, return it. Otherwise return &lt;code&gt;*this&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;lexically_relative(base)&lt;/code&gt; の値が空のパスでない場合は、それを返します。それ以外の場合は &lt;code&gt;*this&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="119a07d4658a0a6516be001b781bcc4272659c92" translate="yes" xml:space="preserve">
          <source>3) If there are more than one expression in parentheses, new_type must be a class with a suitably declared &lt;a href=&quot;constructor&quot;&gt;constructor&lt;/a&gt;. This expression is a prvalue of type new_typedesignating a temporary(until C++17)whose result object is(since C++17)&lt;a href=&quot;direct_initialization&quot;&gt;direct-initialized&lt;/a&gt; with expressions.</source>
          <target state="translated">3）括弧内に複数の式がある場合、new_typeは適切に宣言&lt;a href=&quot;constructor&quot;&gt;さ&lt;/a&gt;れたコンストラクタを持つクラスでなければなりません。この式は、結果オブジェクトが（C ++ 17以降）式で&lt;a href=&quot;direct_initialization&quot;&gt;直接初期化さ&lt;/a&gt;れる一時（C ++ 17まで）を指定するタイプnew_typeのprvalue です。</target>
        </trans-unit>
        <trans-unit id="e60aa24e7bd0dfc16a7572c5c73ae791cffaa4a3" translate="yes" xml:space="preserve">
          <source>3) If, within an object of non-union class type, two pointers point to different non-static data members with the same &lt;a href=&quot;access&quot;&gt;member access&lt;/a&gt;, or to subobjects or array elements of such members, recursively, the pointer to the later declared member</source>
          <target state="translated">3）非共用クラス型のオブジェクト内で、2つのポインターが同じ&lt;a href=&quot;access&quot;&gt;メンバーアクセスを&lt;/a&gt;持つ異なる非静的データメンバーを指す場合、またはそのようなメンバーのサブオブジェクトまたは配列要素を再帰的に指す場合、後で宣言されるメンバーへのポインター</target>
        </trans-unit>
        <trans-unit id="e58698e166a9caf0503ebde7652c7737d0b733d7" translate="yes" xml:space="preserve">
          <source>3) Ignores all elements for which predicate &lt;code&gt;p&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">3）述語 &lt;code&gt;p&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返すすべての要素を無視します。</target>
        </trans-unit>
        <trans-unit id="5e51728260b227dbe5a1a22bea06c587fc12f926" translate="yes" xml:space="preserve">
          <source>3) Implements &lt;code&gt;operator&amp;lt;=&lt;/code&gt; in terms of &lt;code&gt;operator&amp;lt;&lt;/code&gt;.</source>
          <target state="translated">3）を実装 &lt;code&gt;operator&amp;lt;=&lt;/code&gt; という点で &lt;code&gt;operator&amp;lt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dadd6f16c0b728768b490b7f262229e212a5c803" translate="yes" xml:space="preserve">
          <source>3) In a class definition, &lt;code&gt;final&lt;/code&gt; may appear as class-virt-specifier immediately after the name of the class, just before the colon that begins the base-clause, if used.</source>
          <target state="translated">3）クラス定義では、 &lt;code&gt;final&lt;/code&gt; は、クラス名の直後、base-clauseを開始するコロン（使用されている場合）の直前に、class-virt-specifierとして現れる場合があります。</target>
        </trans-unit>
        <trans-unit id="4201ae0917c987e398845110d21d6318890f1e11" translate="yes" xml:space="preserve">
          <source>3) In a function call expression, when the function parameter has reference type</source>
          <target state="translated">3)関数呼び出し式において、関数パラメータが参照型の場合</target>
        </trans-unit>
        <trans-unit id="ab655fee316e27400bec8121994a361b2d320ee2" translate="yes" xml:space="preserve">
          <source>3) Informs the compiler that multiplication, division, and absolute value of complex numbers may use simplified mathematical formulas (x+iy)&amp;times;(u+iv) = (xu-yv)+i(yu+xv), (x+iy)/(u+iv) = [(xu+yv)+i(yu-xv)]/(u2</source>
          <target state="translated">3）複素数の乗算、除算、および絶対値が簡略化された数式（x + iy）&amp;times;（u + iv）=（xu-yv）+ i（yu + xv）、（x + iy ）/（u + iv）= [（xu + yv）+ i（yu-xv）] /（u2</target>
        </trans-unit>
        <trans-unit id="b9bce6884c7af5520b8d268ea7b7f89893834131" translate="yes" xml:space="preserve">
          <source>3) Initializes &lt;code&gt;base_&lt;/code&gt; with &lt;code&gt;view::all(&lt;a href=&quot;../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;R&amp;gt;(r))&lt;/code&gt; and initializes &lt;code&gt;pred_&lt;/code&gt; with &lt;code&gt;std::​move(pred)&lt;/code&gt;.</source>
          <target state="translated">3）初期化 &lt;code&gt;base_&lt;/code&gt; と &lt;code&gt;view::all(&lt;a href=&quot;../utility/forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;R&amp;gt;(r))&lt;/code&gt; 及び初期化は &lt;code&gt;pred_&lt;/code&gt; と &lt;code&gt;std::​move(pred)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f6ff8ebdb0b4a588f1d0b70d1c1e4c5e34fd0a1d" translate="yes" xml:space="preserve">
          <source>3) Initializes &lt;code&gt;first&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U1&amp;gt;(x)&lt;/code&gt; and &lt;code&gt;second&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U2&amp;gt;(y)&lt;/code&gt;.</source>
          <target state="translated">3）を初期化する &lt;code&gt;first&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U1&amp;gt;(x)&lt;/code&gt; と &lt;code&gt;second&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../forward&quot;&gt;std::forward&lt;/a&gt;&amp;lt;U2&amp;gt;(y)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="040ad719b13d0b757b1cbb72e508c554d548be29" translate="yes" xml:space="preserve">
          <source>3) Initializes &lt;code&gt;value_&lt;/code&gt; with &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;bound_&lt;/code&gt; with &lt;code&gt;bound&lt;/code&gt;. This constructor is used to create bounded iota views, e.g. &lt;code&gt;iota(10, 20)&lt;/code&gt; yields numbers from 10 to 19.</source>
          <target state="translated">3） &lt;code&gt;value_&lt;/code&gt; を &lt;code&gt;value&lt;/code&gt; で、 &lt;code&gt;bound_&lt;/code&gt; を &lt;code&gt;bound&lt;/code&gt; で初期化します。このコンストラクターは、制限付きのイオタビューを作成するために使用されます。たとえば、 &lt;code&gt;iota(10, 20)&lt;/code&gt; 10〜19の数値を生成します。</target>
        </trans-unit>
        <trans-unit id="c3c6f0b13c08ef174375cc6daaba8db4923159bb" translate="yes" xml:space="preserve">
          <source>3) Initializes multiple bases using a &lt;a href=&quot;parameter_pack#Base_specifiers_and_member_initializer_lists&quot;&gt;pack expansion&lt;/a&gt;</source>
          <target state="translated">3）&lt;a href=&quot;parameter_pack#Base_specifiers_and_member_initializer_lists&quot;&gt;パック拡張&lt;/a&gt;を使用して複数のベースを初期化します</target>
        </trans-unit>
        <trans-unit id="de45a418929d5ac281d3dc92cf05db0c626eaab5" translate="yes" xml:space="preserve">
          <source>3) Initializes the error condition with error code &lt;code&gt;val&lt;/code&gt; and error category &lt;code&gt;cat&lt;/code&gt;.</source>
          <target state="translated">3）エラーコード &lt;code&gt;val&lt;/code&gt; およびエラーカテゴリ &lt;code&gt;cat&lt;/code&gt; でエラー条件を初期化します。</target>
        </trans-unit>
        <trans-unit id="45dcae9221ffb9ec9919501350f4a76a243888ac" translate="yes" xml:space="preserve">
          <source>3) Initializes the iterator and stores the value of &lt;code&gt;s&lt;/code&gt; in a data member. If &lt;code&gt;s&lt;/code&gt; is null, then end-of-stream iterator is constructed.</source>
          <target state="translated">3）イテレータを初期化し、 &lt;code&gt;s&lt;/code&gt; の値をデータメンバーに格納します。 &lt;code&gt;s&lt;/code&gt; がnullの場合、ストリームの終わりの反復子が構築されます。</target>
        </trans-unit>
        <trans-unit id="44906afb9363eaecfe4cb84873e486483d3b541e" translate="yes" xml:space="preserve">
          <source>3) Inserts the characters in the range &lt;code&gt;[s, s+count)&lt;/code&gt; at the position &lt;code&gt;index&lt;/code&gt;. The range can contain null characters.</source>
          <target state="translated">3）位置 &lt;code&gt;index&lt;/code&gt; &lt;code&gt;[s, s+count)&lt;/code&gt; 範囲[s、s + count）の文字を挿入します。範囲にはnull文字を含めることができます。</target>
        </trans-unit>
        <trans-unit id="8b12c6c2ba3cb6246a33014dc234b4fb0cd5c695" translate="yes" xml:space="preserve">
          <source>3) It cannot be defined as deleted or declared with C &lt;a href=&quot;language_linkage&quot;&gt;language linkage&lt;/a&gt;(since C++17), &lt;a href=&quot;inline&quot;&gt;inline&lt;/a&gt;, &lt;a href=&quot;static&quot;&gt;static&lt;/a&gt;, or &lt;a href=&quot;constexpr&quot;&gt;constexpr&lt;/a&gt;</source>
          <target state="translated">3）C &lt;a href=&quot;language_linkage&quot;&gt;言語リンケージ&lt;/a&gt;（C ++ 17以降）、&lt;a href=&quot;inline&quot;&gt;インライン&lt;/a&gt;、&lt;a href=&quot;static&quot;&gt;静的&lt;/a&gt;、または&lt;a href=&quot;constexpr&quot;&gt;constexprで&lt;/a&gt;削除または宣言されたものとして定義することはできません。</target>
        </trans-unit>
        <trans-unit id="15428be4fcb993ee6f6258c59a10daa1006cc23e" translate="yes" xml:space="preserve">
          <source>3) Iterator pointing to the first element inserted, or &lt;code&gt;pos&lt;/code&gt; if &lt;code&gt;count==0&lt;/code&gt;.</source>
          <target state="translated">3）挿入された最初の要素を指すイテレータ、または &lt;code&gt;count==0&lt;/code&gt; 場合は &lt;code&gt;pos&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="83292122e3a0ca8a4e419d61132b33af01c55f4b" translate="yes" xml:space="preserve">
          <source>3) Iterator to the last element inserted, or &lt;code&gt;pos&lt;/code&gt; if &lt;code&gt;count==0&lt;/code&gt;.</source>
          <target state="translated">3）最後に挿入された要素へのイテレータ、または &lt;code&gt;count==0&lt;/code&gt; 場合は &lt;code&gt;pos&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="86650132452794ca72a06d35352364377c46886a" translate="yes" xml:space="preserve">
          <source>3) Less-than operator for variants:</source>
          <target state="translated">3)亜種のための劣等演算子。</target>
        </trans-unit>
        <trans-unit id="ad1d235b6022b632bfd1ecf8353fb1f773b001d5" translate="yes" xml:space="preserve">
          <source>3) Linear in &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first, last)&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../../iterator/distance&quot;&gt;std::distance&lt;/a&gt;(first, last)&lt;/code&gt; 線形（最初、最後）</target>
        </trans-unit>
        <trans-unit id="04c6071f6596bd7e8bbddff803623c685bda15bc" translate="yes" xml:space="preserve">
          <source>3) Linear in &lt;code&gt;count&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;count&lt;/code&gt; 線形</target>
        </trans-unit>
        <trans-unit id="c560ac0ad5a730cae89247a67aa496ace192c481" translate="yes" xml:space="preserve">
          <source>3) Linear in &lt;code&gt;count&lt;/code&gt; plus linear in the distance between &lt;code&gt;pos&lt;/code&gt; and end of the container.</source>
          <target state="translated">3）リニアに &lt;code&gt;count&lt;/code&gt; との間の距離に加えて線形 &lt;code&gt;pos&lt;/code&gt; と容器の端。</target>
        </trans-unit>
        <trans-unit id="5a139df81a0286fecf91448f4312bacb00685b92" translate="yes" xml:space="preserve">
          <source>3) Linear in &lt;code&gt;count&lt;/code&gt; plus linear in the lesser of the distances between &lt;code&gt;pos&lt;/code&gt; and either of the ends of the container.</source>
          <target state="translated">3） &lt;code&gt;count&lt;/code&gt; 線形プラス &lt;code&gt;pos&lt;/code&gt; とコンテナーのいずれかの端の間の距離の短い方の線形。</target>
        </trans-unit>
        <trans-unit id="8068c94a235a98640c2d4d1bdc4cc9d21c073f98" translate="yes" xml:space="preserve">
          <source>3) Linear in &lt;code&gt;ilist.size()&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;ilist.size()&lt;/code&gt; ）の線形</target>
        </trans-unit>
        <trans-unit id="44f4ac8bda69ffee597405d7bfd5538cbc07ef19" translate="yes" xml:space="preserve">
          <source>3) Linear in size of &lt;code&gt;other&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;other&lt;/code&gt; サイズで線形</target>
        </trans-unit>
        <trans-unit id="65888332e68ca1792c776ad0e92aa6e8f144ec5a" translate="yes" xml:space="preserve">
          <source>3) Linear in the size of &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;ilist&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;*this&lt;/code&gt; および &lt;code&gt;ilist&lt;/code&gt; のサイズで線形。</target>
        </trans-unit>
        <trans-unit id="9976c7fa0c26c5aebc4ef6a454fb47e62e0b73b2" translate="yes" xml:space="preserve">
          <source>3) Literal operators with these parameter lists are the first-choice literal operator for user-defined floating-point literals</source>
          <target state="translated">3)これらのパラメータリストを持つリテラル演算子は、ユーザー定義の浮動小数点リテラルの第一選択のリテラル演算子です。</target>
        </trans-unit>
        <trans-unit id="670c5df297f8149bf34051561218c28c5b7037c7" translate="yes" xml:space="preserve">
          <source>3) Locks the associated mutex by calling &lt;code&gt;m.lock()&lt;/code&gt;. The behavior is undefined if the current thread already owns the mutex except when the mutex is recursive.</source>
          <target state="translated">3） &lt;code&gt;m.lock()&lt;/code&gt; を呼び出して、関連するミューテックスをロックします。mutexが再帰的である場合を除いて、現在のスレッドがすでにmutexを所有している場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="9f4fbadacf39bbf3f9bcc1471343229056016eaf" translate="yes" xml:space="preserve">
          <source>3) Locks the associated mutex in shared mode by calling &lt;code&gt;m.lock_shared()&lt;/code&gt;. The behavior is undefined if this thread already owns the mutex in any mode.</source>
          <target state="translated">3） &lt;code&gt;m.lock_shared()&lt;/code&gt; を呼び出して、関連するミューテックスを共有モードでロックします。このスレッドがいずれかのモードですでにミューテックスを所有している場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="cb3fb484080da1fee970fd8a475c6c772acae1a4" translate="yes" xml:space="preserve">
          <source>3) Logical inclusive OR</source>
          <target state="translated">3)論理的包括的OR</target>
        </trans-unit>
        <trans-unit id="a7ba55ea9804b266aca10a49cf13a6dec30af883" translate="yes" xml:space="preserve">
          <source>3) May throw any exception thrown by move-constructing any T_i in &lt;code&gt;Types...&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;Types...&lt;/code&gt; T_iをmove-constructingすることによってスローされた例外をスローする可能性があります。</target>
        </trans-unit>
        <trans-unit id="ca40123da837f0fee79c9b550ed45612562fb752" translate="yes" xml:space="preserve">
          <source>3) Move assignment operator. Replaces the contents with those of &lt;code&gt;other&lt;/code&gt; using move semantics.</source>
          <target state="translated">3）代入演算子を移動します。移動セマンティクスを使用して、コンテンツを &lt;code&gt;other&lt;/code&gt; コンテンツに置き換えます。</target>
        </trans-unit>
        <trans-unit id="5b47250dca512e9cbfd28a37162f550d375a96df" translate="yes" xml:space="preserve">
          <source>3) Move constructor.</source>
          <target state="translated">3)コンストラクタを移動します。</target>
        </trans-unit>
        <trans-unit id="ab9942e808a2d88c706e7eac74af13a25ba991ba" translate="yes" xml:space="preserve">
          <source>3) Move constructor. Constructs a path whose pathname, in both native and generic formats, is the same as that of &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt; is left in valid but unspecified state.</source>
          <target state="translated">3）コンストラクターを移動します。そのパス名、両方のネイティブおよび一般的なフォーマットで、のと同じであるパス構築 &lt;code&gt;p&lt;/code&gt; 、 &lt;code&gt;p&lt;/code&gt; は有効ですが、未指定の状態で放置されています。</target>
        </trans-unit>
        <trans-unit id="799e4c4e82132cadecf2ebc2ddbcdc904f042751" translate="yes" xml:space="preserve">
          <source>3) Move constructor. Constructs the promise with the shared state of &lt;code&gt;other&lt;/code&gt; using move semantics. After construction, &lt;code&gt;other&lt;/code&gt; has no shared state.</source>
          <target state="translated">3）コンストラクターを移動します。移動セマンティクスを使用して、 &lt;code&gt;other&lt;/code&gt; のユーザーの共有状態でpromiseを構築します。構築後、 &lt;code&gt;other&lt;/code&gt; は共有状態はありません。</target>
        </trans-unit>
        <trans-unit id="bde2905f8fda7b64e53c6f7498f3e51ad8fdcbed" translate="yes" xml:space="preserve">
          <source>3) Move constructor. If &lt;code&gt;other&lt;/code&gt; is not &lt;a href=&quot;valueless_by_exception&quot;&gt;valueless_by_exception&lt;/a&gt;, constructs a variant holding the same alternative as &lt;code&gt;other&lt;/code&gt; and &lt;a href=&quot;../../language/direct_initialization&quot;&gt;direct-initializes&lt;/a&gt; the contained value with &lt;code&gt;std::get&amp;lt;other.index()&amp;gt;(std::move(other))&lt;/code&gt;. Otherwise, initializes a &lt;code&gt;valueless_by_exception&lt;/code&gt; variant. This overload only participates in overload resolution if &lt;code&gt;&lt;a href=&quot;../../types/is_move_constructible&quot;&gt;std::is_move_constructible_v&lt;/a&gt;&amp;lt;T_i&amp;gt;&lt;/code&gt; is true for all &lt;code&gt;T_i&lt;/code&gt; in &lt;code&gt;Types...&lt;/code&gt;. It is trivial if &lt;code&gt;&lt;a href=&quot;../../types/is_move_constructible&quot;&gt;std::is_trivially_move_constructible_v&lt;/a&gt;&amp;lt;T_i&amp;gt;&lt;/code&gt; is true for all &lt;code&gt;T_i&lt;/code&gt; in &lt;code&gt;Types...&lt;/code&gt;.</source>
          <target state="translated">3）コンストラクターを移動します。場合 &lt;code&gt;other&lt;/code&gt; ない&lt;a href=&quot;valueless_by_exception&quot;&gt;valueless_by_exception&lt;/a&gt;、同じ代替保持変異体構築物 &lt;code&gt;other&lt;/code&gt; と&lt;a href=&quot;../../language/direct_initialization&quot;&gt;直接初期化する&lt;/a&gt;とともに含まれている値 &lt;code&gt;std::get&amp;lt;other.index()&amp;gt;(std::move(other))&lt;/code&gt; 。それ以外の場合は、 &lt;code&gt;valueless_by_exception&lt;/code&gt; バリアントを初期化します。場合は、このオーバーロードは唯一のオーバーロードの解決に参加する &lt;code&gt;&lt;a href=&quot;../../types/is_move_constructible&quot;&gt;std::is_move_constructible_v&lt;/a&gt;&amp;lt;T_i&amp;gt;&lt;/code&gt; すべてのために真である &lt;code&gt;T_i&lt;/code&gt; で &lt;code&gt;Types...&lt;/code&gt; 。かどうかは自明で &lt;code&gt;&lt;a href=&quot;../../types/is_move_constructible&quot;&gt;std::is_trivially_move_constructible_v&lt;/a&gt;&amp;lt;T_i&amp;gt;&lt;/code&gt; すべてのために真である &lt;code&gt;T_i&lt;/code&gt; に &lt;code&gt;Types...&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a86f7af723b648e64c975342ed4cc057730f5be8" translate="yes" xml:space="preserve">
          <source>3) Move constructor: If &lt;code&gt;other&lt;/code&gt; contains a value, initializes the contained value as if &lt;a href=&quot;../../language/direct_initialization&quot;&gt;direct-initializing&lt;/a&gt; (but not direct-list-initializing) an object of type &lt;code&gt;T&lt;/code&gt; with the expression &lt;code&gt;std::move(*other)&lt;/code&gt; and</source>
          <target state="translated">3）移動コンストラクター： &lt;code&gt;other&lt;/code&gt; に値が含まれている場合、式 &lt;code&gt;std::move(*other)&lt;/code&gt; を使用してタイプ &lt;code&gt;T&lt;/code&gt; のオブジェクトを直接&lt;a href=&quot;../../language/direct_initialization&quot;&gt;初期化&lt;/a&gt;（ただし直接リスト初期化ではない）するかのように、含まれている値を初期化します。</target>
        </trans-unit>
        <trans-unit id="bb85cf7a1f9e7ee2dbe753e86c7632bc1cd9b12a" translate="yes" xml:space="preserve">
          <source>3) Move constructor: move-constructs a &lt;code&gt;std::basic_syncbuf&lt;/code&gt; object by moving all contents from another &lt;code&gt;std::basic_syncbuf&lt;/code&gt; object &lt;code&gt;rhs&lt;/code&gt;, including the temporary storage, the wrapped stream pointer, policy, and all other state (such as the mutex pointer). After move, &lt;code&gt;rhs&lt;/code&gt; is not associated with a stream, and &lt;code&gt;rhs.get_wrapped()==nullptr&lt;/code&gt;. The put area member pointers of the base class &lt;code&gt;&lt;a href=&quot;../basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;rhs&lt;/code&gt; are guaranteed to be null. Destroying a moved-from &lt;code&gt;rhs&lt;/code&gt; will not produce any output.</source>
          <target state="translated">3）コンストラクターを移動します。一時ストレージ、ラップされたストリームポインター、ポリシー、およびその他のすべての状態（ミューテックスポインターなど）を含む、すべてのコンテンツを別の &lt;code&gt;std::basic_syncbuf&lt;/code&gt; オブジェクト &lt;code&gt;rhs&lt;/code&gt; から移動することにより、 &lt;code&gt;std::basic_syncbuf&lt;/code&gt; オブジェクトを移動構築します。移動後、 &lt;code&gt;rhs&lt;/code&gt; はストリームに関連付けられず、 &lt;code&gt;rhs.get_wrapped()==nullptr&lt;/code&gt; になります。基本クラスのプットエリアのメンバーポインタ &lt;code&gt;&lt;a href=&quot;../basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;rhs&lt;/code&gt; ヌルであることが保証されています。移動した &lt;code&gt;rhs&lt;/code&gt; を破棄しても出力は生成されません。</target>
        </trans-unit>
        <trans-unit id="a3014b09e00db1e8e8f66806e4206bf583890196" translate="yes" xml:space="preserve">
          <source>3) Move constructor: move-constructs the first base class &lt;code&gt;basic_istream&lt;/code&gt; as &lt;code&gt;basic_istream&amp;lt;CharT,Traits&amp;gt;(std::move(rhs));&lt;/code&gt;, which in turn move-constructs and initializes the virtual base &lt;code&gt;&lt;a href=&quot;../basic_ios&quot;&gt;std::basic_ios&lt;/a&gt;&lt;/code&gt;. The initialization of the other base, &lt;code&gt;basic_ostream&lt;/code&gt;, is implementation-defined (e.g., a protected default constructor may be added to &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt;, which does nothing) because move-construction cannot use &lt;code&gt;rhs&lt;/code&gt; twice. This move constructor is protected: it is called by the move constructors of the derived stream classes &lt;code&gt;&lt;a href=&quot;../basic_fstream&quot;&gt;std::basic_fstream&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../basic_stringstream&quot;&gt;std::basic_stringstream&lt;/a&gt;&lt;/code&gt; before they move-construct and associate the stream buffer.</source>
          <target state="translated">3）移動コンストラクター： &lt;code&gt;basic_istream&lt;/code&gt; 最初の基本クラスbasic_istreamを &lt;code&gt;basic_istream&amp;lt;CharT,Traits&amp;gt;(std::move(rhs));&lt;/code&gt; は、仮想ベース &lt;code&gt;&lt;a href=&quot;../basic_ios&quot;&gt;std::basic_ios&lt;/a&gt;&lt;/code&gt; 移動して構築し、初期化します。move-constructionは &lt;code&gt;rhs&lt;/code&gt; を 2回使用できないため、他のベース &lt;code&gt;basic_ostream&lt;/code&gt; の初期化は実装定義です（たとえば、保護されたデフォルトコンストラクターは &lt;code&gt;&lt;a href=&quot;../basic_ostream&quot;&gt;std::basic_ostream&lt;/a&gt;&lt;/code&gt; 追加され、何も行いません）。この移動コンストラクターは保護されています。これは、ストリームバッファーを移動して関連付けて関連付ける前に、派生ストリームクラス &lt;code&gt;&lt;a href=&quot;../basic_fstream&quot;&gt;std::basic_fstream&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;../basic_stringstream&quot;&gt;std::basic_stringstream&lt;/a&gt;&lt;/code&gt; の移動コンストラクターによって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="20482acf4cb43ffb2b523d35fee40416682818a0" translate="yes" xml:space="preserve">
          <source>3) Move constructors. Moves a weak_ptr instance from &lt;code&gt;r&lt;/code&gt; into &lt;code&gt;*this&lt;/code&gt;. After this, &lt;code&gt;r&lt;/code&gt; is empty and &lt;code&gt;r.use_count()==0&lt;/code&gt;. The templated overload doesn't participate in the overload resolution unless &lt;code&gt;Y*&lt;/code&gt; is implicitly convertible to &lt;code&gt;T*&lt;/code&gt;</source>
          <target state="translated">3）コンストラクターを移動します。 weak_ptrインスタンスを &lt;code&gt;r&lt;/code&gt; から &lt;code&gt;*this&lt;/code&gt; に移動します。この後、 &lt;code&gt;r&lt;/code&gt; は空になり、 &lt;code&gt;r.use_count()==0&lt;/code&gt; になります。テンプレート化されたオーバーロードは、 &lt;code&gt;Y*&lt;/code&gt; が暗黙的に &lt;code&gt;T*&lt;/code&gt; 変換可能でない限り、オーバーロードの解決に参加しません。</target>
        </trans-unit>
        <trans-unit id="c832b249444bf57f849b280268cf06acdcca18ef" translate="yes" xml:space="preserve">
          <source>3) Move-constructs a &lt;code&gt;std::basic_filebuf&lt;/code&gt; object by moving all contents from another &lt;code&gt;std::basic_filebuf&lt;/code&gt; object &lt;code&gt;rhs&lt;/code&gt;, including the buffers, the associated file, the locale, the openmode, the is_open variable, and all other state. After move, &lt;code&gt;rhs&lt;/code&gt; is not associated with a file and &lt;code&gt;rhs.is_open()==false&lt;/code&gt;. The member pointers of the base class &lt;code&gt;&lt;a href=&quot;../basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;rhs&lt;/code&gt; and of the base class of &lt;code&gt;*this&lt;/code&gt; are guaranteed to point to different buffers (unless null).</source>
          <target state="translated">3）バッファー、関連ファイル、ロケール、openmode、is_open変数、およびその他のすべての状態を含む別の &lt;code&gt;std::basic_filebuf&lt;/code&gt; オブジェクト &lt;code&gt;rhs&lt;/code&gt; からすべてのコンテンツを移動することにより、 &lt;code&gt;std::basic_filebuf&lt;/code&gt; オブジェクトを移動構築します。移動後、 &lt;code&gt;rhs&lt;/code&gt; はファイルに関連付けられず、 &lt;code&gt;rhs.is_open()==false&lt;/code&gt; になります。基本クラスのメンバーポインタ &lt;code&gt;&lt;a href=&quot;../basic_streambuf&quot;&gt;std::basic_streambuf&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;rhs&lt;/code&gt; との基底クラスの &lt;code&gt;*this&lt;/code&gt; （nullの場合を除き）別のバッファにポイントに保証されています。</target>
        </trans-unit>
        <trans-unit id="2e36d88fd76fb51a1c6930542afcef0cf2138ad2" translate="yes" xml:space="preserve">
          <source>3) Move-constructs the underlying container &lt;code&gt;c&lt;/code&gt; with &lt;code&gt;std::move(cont)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;std::move(cont)&lt;/code&gt; して、基になるコンテナー &lt;code&gt;c&lt;/code&gt; をMove-constructします。</target>
        </trans-unit>
        <trans-unit id="7bd22c8f7f1e8644439876601f5406f410be68be" translate="yes" xml:space="preserve">
          <source>3) Moves the elements in the range &lt;code&gt;(first, last)&lt;/code&gt; from &lt;code&gt;other&lt;/code&gt; into &lt;code&gt;*this&lt;/code&gt;. The elements are inserted after the element pointed to by &lt;code&gt;pos&lt;/code&gt;. The element pointed-to by &lt;code&gt;first&lt;/code&gt; is not moved. The behavior is undefined if &lt;code&gt;pos&lt;/code&gt; is an iterator in the range &lt;code&gt;(first,last)&lt;/code&gt;.</source>
          <target state="translated">3）の範囲内の要素を移動し &lt;code&gt;(first, last)&lt;/code&gt; から &lt;code&gt;other&lt;/code&gt; に &lt;code&gt;*this&lt;/code&gt; 。要素は、 &lt;code&gt;pos&lt;/code&gt; が指す要素の後に挿入されます。 &lt;code&gt;first&lt;/code&gt; ポイントされた要素は移動されません。 &lt;code&gt;pos&lt;/code&gt; が &lt;code&gt;(first,last)&lt;/code&gt; 範囲の反復子である場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="0d9ad0647ad5c759b3ec9f1989561dc61f998495" translate="yes" xml:space="preserve">
          <source>3) Non-throwing &lt;a href=&quot;except_spec&quot;&gt;dynamic exception specification&lt;/a&gt; (unlike &lt;code&gt;noexcept(true)&lt;/code&gt; guarantees stack unwinding and may call &lt;code&gt;&lt;a href=&quot;../error/exception/unexpected&quot;&gt;std::unexpected&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">3）スローしない&lt;a href=&quot;except_spec&quot;&gt;動的例外指定&lt;/a&gt;（ &lt;code&gt;noexcept(true)&lt;/code&gt; とは異なり、スタックの巻き戻しを保証し、 &lt;code&gt;&lt;a href=&quot;../error/exception/unexpected&quot;&gt;std::unexpected&lt;/a&gt;&lt;/code&gt; 呼び出す場合があります）</target>
        </trans-unit>
        <trans-unit id="b76732269d03ccd8485ad891bb696c1eba4abbdc" translate="yes" xml:space="preserve">
          <source>3) Nothing.</source>
          <target state="translated">3)何もない。</target>
        </trans-unit>
        <trans-unit id="4003a149764097ada52339a281c59e55001f55f7" translate="yes" xml:space="preserve">
          <source>3) Number of characters written if successful (not including the terminating null character) or a negative value if an error occurred.</source>
          <target state="translated">3)成功した場合は書き込まれた文字数(終端のヌル文字は含まない)、エラーが発生した場合は負の値。</target>
        </trans-unit>
        <trans-unit id="199f53855c03aabdcac6f164ee51dd6230e50052" translate="yes" xml:space="preserve">
          <source>3) Number of elements removed.</source>
          <target state="translated">3)削除された要素の数。</target>
        </trans-unit>
        <trans-unit id="745cde883a1fe304fa578edf6da7aab7e013ee7d" translate="yes" xml:space="preserve">
          <source>3) Number of wide characters written (not counting the terminating null wide character) if successful or negative value if an encoding error occurred or if the number of characters to be generated was equal or greater than &lt;code&gt;size&lt;/code&gt; (including when &lt;code&gt;size&lt;/code&gt; is zero)</source>
          <target state="translated">3）エンコードエラーが発生した場合、または生成される文字数が &lt;code&gt;size&lt;/code&gt; 以上の場合（ &lt;code&gt;size&lt;/code&gt; がゼロの場合を含む）、成功または負の値の場合、書き込まれたワイド文字の数（終端のnullワイド文字は含まない）</target>
        </trans-unit>
        <trans-unit id="2662cd45cc5538f6af799495aa4fbbbd7a58c342" translate="yes" xml:space="preserve">
          <source>3) Number of wide characters written (not counting the terminating null wide character) if successful or negative value if an encoding error occurred or if the number of characters to be generated was equal or greater than &lt;code&gt;size&lt;/code&gt;.</source>
          <target state="translated">3）成功した​​場合、またはエンコードエラーが発生した場合、または生成される文字数が &lt;code&gt;size&lt;/code&gt; 以上の場合は負の値の場合、書き込まれたワイド文字の数（終端のnullワイド文字は含まない）。</target>
        </trans-unit>
        <trans-unit id="75ab421ee70fed4ed412a4d704fcf006774db642" translate="yes" xml:space="preserve">
          <source>3) O(NlogN) in general, where N is &lt;code&gt;size() + ilist.size()&lt;/code&gt;. Linear if &lt;code&gt;ilist&lt;/code&gt; is sorted with respect to &lt;code&gt;&lt;a href=&quot;value_comp&quot;&gt;value_comp()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">3）一般的にO（NlogN）。Nは &lt;code&gt;size() + ilist.size()&lt;/code&gt; です。場合線形 &lt;code&gt;ilist&lt;/code&gt; に関してソートさ &lt;code&gt;&lt;a href=&quot;value_comp&quot;&gt;value_comp()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb9e7f6922c74f96dcd64727f3598e1705b1d870" translate="yes" xml:space="preserve">
          <source>3) Omitted trailing-return-type: the return type of the closure's &lt;code&gt;operator()&lt;/code&gt; is &lt;a href=&quot;template_argument_deduction&quot;&gt;deduced&lt;/a&gt; from &lt;a href=&quot;return&quot;&gt;&lt;code&gt;return&lt;/code&gt;&lt;/a&gt; statements as if for a function whose &lt;a href=&quot;function#Return_type_deduction&quot;&gt;return type is declared auto&lt;/a&gt;.</source>
          <target state="translated">3）トレーリング戻り値型を省略：閉鎖のの戻り値の型 &lt;code&gt;operator()&lt;/code&gt; された&lt;a href=&quot;template_argument_deduction&quot;&gt;推論&lt;/a&gt;から&lt;a href=&quot;return&quot;&gt; &lt;code&gt;return&lt;/code&gt; &lt;/a&gt;、その機能のためにあるかのように文&lt;a href=&quot;function#Return_type_deduction&quot;&gt;の戻り型の自動宣言されています&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b6e13d8366bd793510883424adeab2b27b28314b" translate="yes" xml:space="preserve">
          <source>3) Only copies the elements for which the predicate &lt;code&gt;pred&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;. The relative order of the elements that are copied is preserved. The behavior is undefined if the source and the destination ranges overlap.</source>
          <target state="translated">3）述語 &lt;code&gt;pred&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返す要素のみをコピーします。コピーされる要素の相対的な順序は保持されます。ソースと宛先の範囲が重複する場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="9106723e00be9201249bf6af1408d15a2c80d988" translate="yes" xml:space="preserve">
          <source>3) Opaque enum declaration for an unscoped enumeration must specify the underlying type.</source>
          <target state="translated">3)スコープされていない列挙のための不透明な列挙宣言は、その下の型を指定しなければならない。</target>
        </trans-unit>
        <trans-unit id="23973f1d942c2275f88c02ce2f4462cbc2b04733" translate="yes" xml:space="preserve">
          <source>3) Orders &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt; by the order of &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;&amp;amp;rhs&lt;/code&gt;. Equivalent to &lt;code&gt;&lt;a href=&quot;../../utility/functional/less&quot;&gt;std::less&lt;/a&gt;&amp;lt;const error_category*&amp;gt;()(this, &amp;amp;rhs)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;this&lt;/code&gt; と &lt;code&gt;&amp;amp;rhs&lt;/code&gt; の順序で &lt;code&gt;*this&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; を注文します。 &lt;code&gt;&lt;a href=&quot;../../utility/functional/less&quot;&gt;std::less&lt;/a&gt;&amp;lt;const error_category*&amp;gt;()(this, &amp;amp;rhs)&lt;/code&gt; &amp;lt;const error_category *&amp;gt;（）（this、＆rhs）と同等です。</target>
        </trans-unit>
        <trans-unit id="2b8de6cc0c7aed032be141148a8b722d842daa5d" translate="yes" xml:space="preserve">
          <source>3) Otherwise, checks whether &lt;code&gt;c&lt;/code&gt; equals &lt;code&gt;'_'&lt;/code&gt; and the bitmask &lt;code&gt;f&lt;/code&gt; includes the result of calling &lt;code&gt;&lt;a href=&quot;lookup_classname&quot;&gt;lookup_classname()&lt;/a&gt;&lt;/code&gt; for the character class &lt;code&gt;[:w:]&lt;/code&gt;, in which case &lt;code&gt;true&lt;/code&gt; is returned.</source>
          <target state="translated">3）それ以外の場合は、 &lt;code&gt;c&lt;/code&gt; が &lt;code&gt;'_'&lt;/code&gt; 等しく、ビットマスク &lt;code&gt;f&lt;/code&gt; に文字クラス &lt;code&gt;[:w:]&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;lookup_classname&quot;&gt;lookup_classname()&lt;/a&gt;&lt;/code&gt; の呼び出し結果が含まれるかどうかをチェックします。この場合、 &lt;code&gt;true&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="70f4c9c154011c2187f7759ba9e0a58967135971" translate="yes" xml:space="preserve">
          <source>3) Otherwise, if &lt;code&gt;E2&lt;/code&gt; and &lt;code&gt;E3&lt;/code&gt; have different types, at least one of which is a (possibly cv-qualified) class type, or both are glvalues of the same value category and have the same type except for cv-qualification, then an attempt is made to form an &lt;a href=&quot;implicit_cast&quot;&gt;implicit conversion sequence&lt;/a&gt; ignoring member access, whether an operand is a bit-field, or whether a conversion function is deleted(since C++14) from each of the operands to the</source>
          <target state="translated">3）それ以外の場合、 &lt;code&gt;E2&lt;/code&gt; と &lt;code&gt;E3&lt;/code&gt; の型が異なり、そのうちの少なくとも1つが（おそらくcv修飾された）クラス型であるか、または両方が同じ値カテゴリのglvalueであり、cv修飾を除いて同じ型である場合、オペランドがビットフィールドであるかどうか、または各オペランドから（C ++ 14以降）に変換関数が削除されているかどうかにかかわらず、メンバーアクセスを無視して&lt;a href=&quot;implicit_cast&quot;&gt;暗黙の変換シーケンス&lt;/a&gt;を形成する試みが行われます。</target>
        </trans-unit>
        <trans-unit id="e3e1f4bc9437f198420f3a42654833fe270a5008" translate="yes" xml:space="preserve">
          <source>3) Otherwise, if &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; are both &lt;code&gt;V&amp;amp;&lt;/code&gt; for some type &lt;code&gt;V&lt;/code&gt; that meets the syntactic requirements of &lt;code&gt;&lt;a href=&quot;../../concepts/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;&amp;lt;V&amp;gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../../concepts/assignable&quot;&gt;Assignable&lt;/a&gt;&amp;lt;V&amp;amp;, V&amp;gt;&lt;/code&gt;, exchanges the referenced values as if by &lt;code&gt;V v{std::move(t)}; t = std::move(u); u = std::move(v);&lt;/code&gt;. If the semantic requirements of either concept are not satisfied, the program is ill-formed; no diagnostic required.</source>
          <target state="translated">3）それ以外の場合は、場合 &lt;code&gt;T&lt;/code&gt; および &lt;code&gt;U&lt;/code&gt; は両方とも &lt;code&gt;V&amp;amp;&lt;/code&gt; いくつかのタイプのために &lt;code&gt;V&lt;/code&gt; の構文上の要件を満たし &lt;code&gt;&lt;a href=&quot;../../concepts/moveconstructible&quot;&gt;MoveConstructible&lt;/a&gt;&amp;lt;V&amp;gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../../concepts/assignable&quot;&gt;Assignable&lt;/a&gt;&amp;lt;V&amp;amp;, V&amp;gt;&lt;/code&gt; あたかもによって、交流参照値 &lt;code&gt;V v{std::move(t)}; t = std::move(u); u = std::move(v);&lt;/code&gt; 。どちらかの概念の意味上の要件が満たされていない場合、プログラムの形式は正しくありません。診断は必要ありません。</target>
        </trans-unit>
        <trans-unit id="88c61c2e4aab2e466e58588f765636b5775a65dc" translate="yes" xml:space="preserve">
          <source>3) Otherwise, if either is a pointer to a virtual member function, the result is unspecified.</source>
          <target state="translated">3)それ以外の場合、どちらかが仮想メンバ関数へのポインタである場合、結果は不定です。</target>
        </trans-unit>
        <trans-unit id="6368464f68e30f03aa03ef43c24298e8b78b1d76" translate="yes" xml:space="preserve">
          <source>3) Otherwise, if the stream buffer mode is not dynamic or the stream buffer is currently frozen, the function fails and returns &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;EOF&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">3）それ以外の場合、ストリームバッファモードが動的でないか、ストリームバッファが現在凍結されている場合、関数は失敗し、 &lt;code&gt;&lt;a href=&quot;../c&quot;&gt;EOF&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="a6d0283f448702fd1a84893cf29fed278ede2c82" translate="yes" xml:space="preserve">
          <source>3) Otherwise, returns &lt;code&gt;Traits::eof()&lt;/code&gt;.</source>
          <target state="translated">3）それ以外の場合は、 &lt;code&gt;Traits::eof()&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="df96ecf19fcd5f311c11c51bc719bc29c39a8c66" translate="yes" xml:space="preserve">
          <source>3) Otherwise, the next pointer is assigned as if by &lt;code&gt;gptr() = eback()+newoff&lt;/code&gt; or &lt;code&gt;pptr() = pbase()+newoff&lt;/code&gt;.</source>
          <target state="translated">3）それ以外の場合、次のポインターは &lt;code&gt;gptr() = eback()+newoff&lt;/code&gt; または &lt;code&gt;pptr() = pbase()+newoff&lt;/code&gt; pbase（）+ newoffの場合と同じように割り当てられます。</target>
        </trans-unit>
        <trans-unit id="f22651593e63fb4e87b2b2b71befdd326088533a" translate="yes" xml:space="preserve">
          <source>3) Performs atomic bitwise and. Equivalent to &lt;code&gt;fetch_and(arg)&lt;/code&gt; &amp;amp; arg.</source>
          <target state="translated">3）アトミックなビット単位のandを実行します。 &lt;code&gt;fetch_and(arg)&lt;/code&gt; ＆arg と同じです。</target>
        </trans-unit>
        <trans-unit id="7cf61b6c18bada575e3f374e9983692fff35fc84" translate="yes" xml:space="preserve">
          <source>3) Performs atomic bitwise and. Equivalent to &lt;code&gt;return fetch_and(arg) &amp;amp; arg;&lt;/code&gt;.</source>
          <target state="translated">3）アトミックなビット単位のandを実行します。 &lt;code&gt;return fetch_and(arg) &amp;amp; arg;&lt;/code&gt; を返すのと同じです。。</target>
        </trans-unit>
        <trans-unit id="b2a57e6a26fb685bd0f06d7735ce653db8cdf8a7" translate="yes" xml:space="preserve">
          <source>3) Performs atomic pre-decrement. Equivalent to &lt;code&gt;fetch_sub(1)-1&lt;/code&gt;</source>
          <target state="translated">3）アトミックなプリデクリメントを実行します。 &lt;code&gt;fetch_sub(1)-1&lt;/code&gt; と同等</target>
        </trans-unit>
        <trans-unit id="a33f9787080e90df24bcc4e78fb7039f6e2e90e8" translate="yes" xml:space="preserve">
          <source>3) Performs atomic pre-decrement. Equivalent to &lt;code&gt;return fetch_sub(1) - 1;&lt;/code&gt;</source>
          <target state="translated">3）アトミックなプリデクリメントを実行します。 &lt;code&gt;return fetch_sub(1) - 1;&lt;/code&gt; を返すのと同じです。</target>
        </trans-unit>
        <trans-unit id="dce1f3cb4ef8a04d6922cc12c907cc7112350620" translate="yes" xml:space="preserve">
          <source>3) Preprocessor constant expression that evaluates to &lt;code&gt;1&lt;/code&gt; if the file name is found and &lt;code&gt;​0​&lt;/code&gt; if not. The program is ill-formed if the argument would not be a valid argument to the &lt;code&gt;#include&lt;/code&gt; directive.</source>
          <target state="translated">3）プリプロセッサ定数式に評価することを &lt;code&gt;1&lt;/code&gt; 、ファイル名が見つかった場合や &lt;code&gt;​0​&lt;/code&gt; ではない場合。引数が &lt;code&gt;#include&lt;/code&gt; ディレクティブへの有効な引数ではない場合、プログラムの形式が正しくありません。</target>
        </trans-unit>
        <trans-unit id="0b8721f805f20b3b05c9fc921d29e29ad249bfbd" translate="yes" xml:space="preserve">
          <source>3) Prompting text which is sent to interactive devices will be shown before the program waits for input.</source>
          <target state="translated">3)対話型デバイスに送信されるプロンプティングテキストは、プログラムが入力を待つ前に表示されます。</target>
        </trans-unit>
        <trans-unit id="3c0a3af8a4ffb7e108373f747a9b0226794ff8a5" translate="yes" xml:space="preserve">
          <source>3) Reads the data from null-terminated character string &lt;code&gt;buffer&lt;/code&gt;</source>
          <target state="translated">3）nullで終了する文字列 &lt;code&gt;buffer&lt;/code&gt; からデータを読み取ります</target>
        </trans-unit>
        <trans-unit id="1987c2e2bf2f178daacab600c61051e608bea8ac" translate="yes" xml:space="preserve">
          <source>3) Reads the data from null-terminated character string &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">3）nullで終了する文字列 &lt;code&gt;buffer&lt;/code&gt; からデータを読み取ります。</target>
        </trans-unit>
        <trans-unit id="8f00b2bef9860a58dc87b440b7afccf7db80d98a" translate="yes" xml:space="preserve">
          <source>3) Reads the data from null-terminated wide string &lt;code&gt;buffer&lt;/code&gt;</source>
          <target state="translated">3）nullで終了するワイド文字列 &lt;code&gt;buffer&lt;/code&gt; からデータを読み取ります</target>
        </trans-unit>
        <trans-unit id="17ff56ed2692b9b2018a3f5600ca3878c8e0e80f" translate="yes" xml:space="preserve">
          <source>3) Reads the data from null-terminated wide string &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">3）nullで終了するワイド文字列 &lt;code&gt;buffer&lt;/code&gt; からデータを読み取ります。</target>
        </trans-unit>
        <trans-unit id="64312e0e2af20f65585c2deb188b505ac912b497" translate="yes" xml:space="preserve">
          <source>3) Removes all elements for which predicate &lt;code&gt;p&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">3）述語 &lt;code&gt;p&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返すすべての要素を削除します。</target>
        </trans-unit>
        <trans-unit id="310f5ebf8540a04bda8b40a1bc9d4dd5526e65b4" translate="yes" xml:space="preserve">
          <source>3) Removes all elements with the key equivalent to &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">3）keyと同等のキーを持つすべての要素を削除し &lt;code&gt;key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4415369549290e578edb60f8e1f33b4e74708761" translate="yes" xml:space="preserve">
          <source>3) Removes the characters in the range &lt;code&gt;[first, last)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;[first, last)&lt;/code&gt; 範囲の文字を削除します。</target>
        </trans-unit>
        <trans-unit id="544c58ab324d92afbde9bd592b0d8902e8476d0b" translate="yes" xml:space="preserve">
          <source>3) Removes the element (if one exists) with the key equivalent to &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">3）keyと同等のキーを持つ要素（存在する場合）を削除し &lt;code&gt;key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="81c9303915ae21b5cd2b6b5570fd3e30353c9770" translate="yes" xml:space="preserve">
          <source>3) Replace each slash character in the root-name with &lt;code&gt;path::preferred_separator&lt;/code&gt;.</source>
          <target state="translated">3）ルート名の各スラッシュ文字を &lt;code&gt;path::preferred_separator&lt;/code&gt; 置き換えます。</target>
        </trans-unit>
        <trans-unit id="6f9d84cda7d3d351025115d6a2983f6e3213f125" translate="yes" xml:space="preserve">
          <source>3) Replaces all elements for which predicate &lt;code&gt;p&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">3）述語 &lt;code&gt;p&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返すすべての要素を置き換えます。</target>
        </trans-unit>
        <trans-unit id="cc2407531d0f96aaaeadd7acec07ab09d97704c4" translate="yes" xml:space="preserve">
          <source>3) Replaces each value in &lt;code&gt;*this&lt;/code&gt; with a copy of &lt;code&gt;val&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;*this&lt;/code&gt; の各値を &lt;code&gt;val&lt;/code&gt; のコピーで置き換えます。</target>
        </trans-unit>
        <trans-unit id="b5a886685c3e16dded625568a49d963af8f0fb7f" translate="yes" xml:space="preserve">
          <source>3) Replaces the contents of &lt;code&gt;*this&lt;/code&gt; with a new path value constructed from detected-format &lt;code&gt;source&lt;/code&gt;, which is left in valid, but unspecified state. Equivalent to &lt;code&gt;assign(std::move(source))&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;*this&lt;/code&gt; の内容を、検出されたフォーマット &lt;code&gt;source&lt;/code&gt; から構築された新しいパス値で置き換えます。これは、有効なままですが、指定されていない状態です。 &lt;code&gt;assign(std::move(source))&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="576824a8f9ea5847e8fcc701cc58c3cc93280e22" translate="yes" xml:space="preserve">
          <source>3) Replaces the contents with a substring &lt;code&gt;[pos, pos+count)&lt;/code&gt; of &lt;code&gt;str&lt;/code&gt;. If the requested substring lasts past the end of the string, or if &lt;code&gt;count == npos&lt;/code&gt;, the resulting substring is &lt;code&gt;[pos, str.size())&lt;/code&gt;. If &lt;code&gt;pos &amp;gt; str.size()&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; is thrown.</source>
          <target state="translated">3）内容を &lt;code&gt;str&lt;/code&gt; の部分文字列 &lt;code&gt;[pos, pos+count)&lt;/code&gt; で置き換えます。要求された部分文字列が文字列の終わりを超えて続く場合、または &lt;code&gt;count == npos&lt;/code&gt; 場合、結果の部分文字列は &lt;code&gt;[pos, str.size())&lt;/code&gt; です。 &lt;code&gt;pos &amp;gt; str.size()&lt;/code&gt; 場合、 &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="03b2fcf1f7504d24271eb69478891bb5b7d2cabc" translate="yes" xml:space="preserve">
          <source>3) Replaces the contents with the elements from the initializer list &lt;code&gt;ilist&lt;/code&gt;.</source>
          <target state="translated">3）初期化リスト &lt;code&gt;ilist&lt;/code&gt; の要素でコンテンツを置き換えます。</target>
        </trans-unit>
        <trans-unit id="13bb493e1a2a07b34e03b2b85046f26ec68eae8f" translate="yes" xml:space="preserve">
          <source>3) Replaces the contents with those identified by initializer list &lt;code&gt;ilist&lt;/code&gt;.</source>
          <target state="translated">3）初期化リスト &lt;code&gt;ilist&lt;/code&gt; で識別されたコンテンツに置き換えます。</target>
        </trans-unit>
        <trans-unit id="ef480fdc4715540c535b67104f0be3a077d9ff0a" translate="yes" xml:space="preserve">
          <source>3) Replaces the contents with those of null-terminated character string pointed to by &lt;code&gt;s&lt;/code&gt; as if by &lt;code&gt;assign(s, Traits::length(s))&lt;/code&gt;.</source>
          <target state="translated">3）内容を、 &lt;code&gt;assign(s, Traits::length(s))&lt;/code&gt; 場合と同様に、 &lt;code&gt;s&lt;/code&gt; が指すnullで終了する文字列の内容に置き換えます。</target>
        </trans-unit>
        <trans-unit id="e269b1ba162c3802910e2880f4db900ea451a1f3" translate="yes" xml:space="preserve">
          <source>3) Returns &lt;code&gt;proximate(p, current_path(), ec)&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;proximate(p, current_path(), ec)&lt;/code&gt; 返します</target>
        </trans-unit>
        <trans-unit id="fcd3e9270cb3648094c10618d20e91cf9291367f" translate="yes" xml:space="preserve">
          <source>3) Returns &lt;code&gt;static_cast&amp;lt;T&amp;gt;(std::move(*std::any_cast&amp;lt;U&amp;gt;(&amp;amp;operand)))&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;static_cast&amp;lt;T&amp;gt;(std::move(*std::any_cast&amp;lt;U&amp;gt;(&amp;amp;operand)))&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="3dae875d437b9ad5b93fadfd5f4be759cb67b989" translate="yes" xml:space="preserve">
          <source>3) Returns &lt;code&gt;std::regex_match(str, str + &lt;a href=&quot;../string/char_traits&quot;&gt;std::char_traits&lt;/a&gt;&amp;lt;charT&amp;gt;::length(str), m, e, flags)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;std::regex_match(str, str + &lt;a href=&quot;../string/char_traits&quot;&gt;std::char_traits&lt;/a&gt;&amp;lt;charT&amp;gt;::length(str), m, e, flags)&lt;/code&gt; ）を返します。</target>
        </trans-unit>
        <trans-unit id="8abe04d6a65d859a86311ce0c8798df947619f86" translate="yes" xml:space="preserve">
          <source>3) Returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs&lt;/code&gt; is</source>
          <target state="translated">3） &lt;code&gt;lhs&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合、trueを返します</target>
        </trans-unit>
        <trans-unit id="7918b80e898ded5d6e97ac97b077589e837608a6" translate="yes" xml:space="preserve">
          <source>3) Returns &lt;code&gt;true&lt;/code&gt; if lhs is less than or equal to rhs, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">3）lhsがrhs以下の場合は &lt;code&gt;true&lt;/code&gt; 、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0b4b3fc69cba2c69b75d5370bf375d279f982337" translate="yes" xml:space="preserve">
          <source>3) Returns a &lt;code&gt;bitset&amp;lt;N&amp;gt;&lt;/code&gt; containing the result of binary XOR on corresponding pairs of bits of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhs&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;lhs&lt;/code&gt; と &lt;code&gt;rhs&lt;/code&gt; の対応するビットのペアに対するバイナリXORの結果を含む &lt;code&gt;bitset&amp;lt;N&amp;gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9a23ccf8edcb838b99e8ee8c314068aead06ea37" translate="yes" xml:space="preserve">
          <source>3) Returns a const-qualified iterator to the reverse-beginning of the container &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">3）constで修飾されたイテレータをコンテナ &lt;code&gt;c&lt;/code&gt; の逆開始に戻します。</target>
        </trans-unit>
        <trans-unit id="389c919ddf46812630bd663635937fafcec64a1e" translate="yes" xml:space="preserve">
          <source>3) Returns a const-qualified iterator to the reverse-end of the container &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">3）constで修飾されたイテレータをコンテナ &lt;code&gt;c&lt;/code&gt; のリバースエンドに返します。</target>
        </trans-unit>
        <trans-unit id="bba8a7d67c95b0c502523c9d7a3e9ff7954f65f2" translate="yes" xml:space="preserve">
          <source>3) Returns a numeric array of &lt;code&gt;bool&lt;/code&gt; containing elements each of which is obtained by applying the indicated comparison operator to the corresponding value of &lt;code&gt;lhs&lt;/code&gt; and &lt;code&gt;rhsv&lt;/code&gt;.</source>
          <target state="translated">3）指定された比較演算子を &lt;code&gt;lhs&lt;/code&gt; および &lt;code&gt;rhsv&lt;/code&gt; の対応する値に適用することによってそれぞれ取得された要素を含む &lt;code&gt;bool&lt;/code&gt; の数値配列を返します。</target>
        </trans-unit>
        <trans-unit id="347d9f13e5f0de90871565d57db2a0da42067b3a" translate="yes" xml:space="preserve">
          <source>3) Returns a string containing the latest remote database version.</source>
          <target state="translated">3)最新のリモートデータベースのバージョンを含む文字列を返します。</target>
        </trans-unit>
        <trans-unit id="3125c23569a2a0a23a19892e81d51814a585e9fc" translate="yes" xml:space="preserve">
          <source>3) Returns exactly &lt;code&gt;std::begin(c)&lt;/code&gt;, with &lt;code&gt;c&lt;/code&gt; always treated as const-qualified. If &lt;code&gt;C&lt;/code&gt; is a standard &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt;, this always returns &lt;code&gt;C::const_iterator&lt;/code&gt;.</source>
          <target state="translated">3）戻り値は、正確に &lt;code&gt;std::begin(c)&lt;/code&gt; し、 &lt;code&gt;c&lt;/code&gt; は常にconst修飾として処理します。 &lt;code&gt;C&lt;/code&gt; が標準の&lt;a href=&quot;../named_req/container&quot;&gt;Containerの&lt;/a&gt;場合、これは常に &lt;code&gt;C::const_iterator&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="59aa2d9d6dec20809b1d0a178cdfd88d91b8be3e" translate="yes" xml:space="preserve">
          <source>3) Returns exactly &lt;code&gt;std::end(c)&lt;/code&gt;, with &lt;code&gt;c&lt;/code&gt; always treated as const-qualified. If &lt;code&gt;C&lt;/code&gt; is a standard &lt;a href=&quot;../named_req/container&quot;&gt;Container&lt;/a&gt;, this always returns a &lt;code&gt;C::const_iterator&lt;/code&gt;.</source>
          <target state="translated">3）戻り値は、正確に &lt;code&gt;std::end(c)&lt;/code&gt; 、と &lt;code&gt;c&lt;/code&gt; 常にconst修飾として処理します。 &lt;code&gt;C&lt;/code&gt; が標準の&lt;a href=&quot;../named_req/container&quot;&gt;Containerの&lt;/a&gt;場合、これは常に &lt;code&gt;C::const_iterator&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="996196d6521c5c7b2c554427b75896857ce5f751" translate="yes" xml:space="preserve">
          <source>3) Returns the format structure (of type &lt;a href=&quot;../money_base&quot;&gt;&lt;code&gt;std::money_base::format&lt;/code&gt;&lt;/a&gt;) which describes the formatting of positive monetary values.</source>
          <target state="translated">3）正の通貨値のフォーマットを記述する（&lt;a href=&quot;../money_base&quot;&gt; &lt;code&gt;std::money_base::format&lt;/code&gt; &lt;/a&gt;タイプの）フォーマット構造を返します。</target>
        </trans-unit>
        <trans-unit id="477bbd5c6845e534597a26535c28e03e8a1d8033" translate="yes" xml:space="preserve">
          <source>3) Returns the native-format representation of the pathname by value.</source>
          <target state="translated">3)パス名のネイティブフォーマット表現を値で返します。</target>
        </trans-unit>
        <trans-unit id="216c048ed4bc4f444c6c4082ca1c39abe2a50014" translate="yes" xml:space="preserve">
          <source>3) Returns the pointer one past the end of the get area.</source>
          <target state="translated">3)取得領域の端から1つ先のポインタを返します。</target>
        </trans-unit>
        <trans-unit id="8134a36d5fcae3e74503193ede20ea1921facc82" translate="yes" xml:space="preserve">
          <source>3) Returns the pointer one past the end of the put area.</source>
          <target state="translated">3)put 領域の端から 1 つ先のポインタを返します。</target>
        </trans-unit>
        <trans-unit id="bfe9a00312f690b0210d8e9e30a3959a15595212" translate="yes" xml:space="preserve">
          <source>3) Returns the shared pointer pointed-to by &lt;code&gt;p&lt;/code&gt;. As with the non-specialized &lt;code&gt;&lt;a href=&quot;../../atomic/atomic_load&quot;&gt;std::atomic_load_explicit&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;mo&lt;/code&gt; cannot be &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_release&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_acq_rel&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;p&lt;/code&gt; が指す共有ポインタを返します。特殊化されていない &lt;code&gt;&lt;a href=&quot;../../atomic/atomic_load&quot;&gt;std::atomic_load_explicit&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;mo&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_release&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../../atomic/memory_order&quot;&gt;std::memory_order_acq_rel&lt;/a&gt;&lt;/code&gt; することはできません</target>
        </trans-unit>
        <trans-unit id="30ff31b55716571c59891a700329900acd714bc3" translate="yes" xml:space="preserve">
          <source>3) Returns the stored &lt;code&gt;std::chrono::day&lt;/code&gt; value.</source>
          <target state="translated">3）保存された &lt;code&gt;std::chrono::day&lt;/code&gt; 値を返します。</target>
        </trans-unit>
        <trans-unit id="407bd14ded9dfd8122000901458dcecf239dd014" translate="yes" xml:space="preserve">
          <source>3) Returns the stored &lt;code&gt;std::chrono::weekday&lt;/code&gt; value.</source>
          <target state="translated">3）保存された &lt;code&gt;std::chrono::weekday&lt;/code&gt; 値を返します。</target>
        </trans-unit>
        <trans-unit id="0b6d156648e07714726cb41e1c416ee8bbf5bae5" translate="yes" xml:space="preserve">
          <source>3) Returns the string that is used for formatting of negative monetary values.</source>
          <target state="translated">3)負の金額の書式設定に使用する文字列を返します。</target>
        </trans-unit>
        <trans-unit id="653086588b06d64a925a3b2058d67d280de70556" translate="yes" xml:space="preserve">
          <source>3) Returns the string that is used for formatting of positive monetary values.</source>
          <target state="translated">3)正の金額の書式設定に使用する文字列を返します。</target>
        </trans-unit>
        <trans-unit id="ad5ed1f6fd61797eb99ea91f52811e8b9c04cba8" translate="yes" xml:space="preserve">
          <source>3) Returns the string to be used as the representation of the boolean value &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">3）ブール値 &lt;code&gt;true&lt;/code&gt; の表現として使用される文字列を返します。</target>
        </trans-unit>
        <trans-unit id="40ceb43e70d8dd1204d160e3ce8b5e87fa0a3ebb" translate="yes" xml:space="preserve">
          <source>3) Same as (1), but evaluations of both expressions from (1) are known not to throw exceptions</source>
          <target state="translated">3)(1)と同じですが、(1)の両式の評価は例外を投げないことが知られています。</target>
        </trans-unit>
        <trans-unit id="75fdda12724b08f74cb742d27bc91e98893793ec" translate="yes" xml:space="preserve">
          <source>3) Same as (1), but uses &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_nothrow_constructible&lt;/a&gt;&amp;lt;T, T&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">3）（1）と同じですが、 &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_nothrow_constructible&lt;/a&gt;&amp;lt;T, T&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="4666db7c3270a52a92a3e4e85c6daac2091990b6" translate="yes" xml:space="preserve">
          <source>3) Same as (1), but uses &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_nothrow_constructible&lt;/a&gt;&amp;lt;T, const T&amp;amp;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">3）（1）と同じですが、 &lt;code&gt;&lt;a href=&quot;is_constructible&quot;&gt;std::is_nothrow_constructible&lt;/a&gt;&amp;lt;T, const T&amp;amp;&amp;gt;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="5b74c80c3864f0ecdb94780d074fa5d1029adf44" translate="yes" xml:space="preserve">
          <source>3) Same as (2), but if &lt;code&gt;&lt;a href=&quot;../directory_options&quot;&gt;std::filesystem::directory_options::skip_permission_denied&lt;/a&gt;&lt;/code&gt; is set in &lt;code&gt;options&lt;/code&gt; and construction encounters a permissions denied error, constructs the end iterator and does not report an error.</source>
          <target state="translated">3）（2）と同じですが、 &lt;code&gt;&lt;a href=&quot;../directory_options&quot;&gt;std::filesystem::directory_options::skip_permission_denied&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;options&lt;/code&gt; で設定されており、構築で権限拒否エラーが発生した場合、終了反復子を構築し、エラーを報告しません。</target>
        </trans-unit>
        <trans-unit id="29cb7d52643a6db784f8f2d44725bcdca11329ab" translate="yes" xml:space="preserve">
          <source>3) Same as (2). &lt;code&gt;Y*&lt;/code&gt; must be implicitly convertible to &lt;code&gt;T*&lt;/code&gt;.</source>
          <target state="translated">3）（2）と同じ。 &lt;code&gt;Y*&lt;/code&gt; は暗黙的に &lt;code&gt;T*&lt;/code&gt; 変換可能でなければなりません。</target>
        </trans-unit>
        <trans-unit id="43d958e8ae30ecb323acdee3ad42ee7d8c5989b9" translate="yes" xml:space="preserve">
          <source>3) Same as 1), but uses &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_nothrow_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, T&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">3）1）と同じですが、 &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_nothrow_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, T&amp;amp;&amp;amp;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f0b6e4619b9b66b516a340ac59b04dc8ecf3114d" translate="yes" xml:space="preserve">
          <source>3) Same as 1), but uses &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_nothrow_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, const T&amp;amp;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">3）1）と同じですが、 &lt;code&gt;&lt;a href=&quot;is_assignable&quot;&gt;std::is_nothrow_assignable&lt;/a&gt;&amp;lt;T&amp;amp;, const T&amp;amp;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf00c1915110a8f8302efd280a583c34435221bc" translate="yes" xml:space="preserve">
          <source>3) Same as &lt;code&gt;get(s, count, widen('\n'))&lt;/code&gt;, that is, reads at most &lt;code&gt;count-1&lt;/code&gt; characters and stores them into character string pointed to by &lt;code&gt;s&lt;/code&gt; until &lt;code&gt;'\n'&lt;/code&gt; is found.</source>
          <target state="translated">3） &lt;code&gt;get(s, count, widen('\n'))&lt;/code&gt; と同じです。つまり、最大で &lt;code&gt;count-1&lt;/code&gt; 文字を読み取り、 &lt;code&gt;'\n'&lt;/code&gt; が見つかるまで &lt;code&gt;s&lt;/code&gt; が指す文字列に格納します。</target>
        </trans-unit>
        <trans-unit id="f35e1ceefb7704839e967552ca2749d9e731cbf4" translate="yes" xml:space="preserve">
          <source>3) Same as &lt;code&gt;noexcept(true)&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;noexcept(true)&lt;/code&gt; ）と同じ</target>
        </trans-unit>
        <trans-unit id="28927916b5f2d702653bd8d3cdb9d87d5f2105c2" translate="yes" xml:space="preserve">
          <source>3) Same rules apply to possibly multilevel pointers to data members and possibly multilevel pointers to arrays of known and unknown bound (arrays to cv-qualified elements are considered to be cv-qualified themselves)(since C++17)</source>
          <target state="translated">3)データメンバへの多値ポインタの場合もあれば,既知および未知の境界を持つ配列への多値ポインタの場合もあります(cv-qualified 要素への配列は,それ自体が cv-qualified とみなされます)(C++17 以降)(C++17)</target>
        </trans-unit>
        <trans-unit id="c88bdf1e6603ab75c1a66dc891e02f5dac9a3278" translate="yes" xml:space="preserve">
          <source>3) Seeds the underlying engine with the seed sequence &lt;code&gt;seq&lt;/code&gt;. Effectively calls &lt;code&gt;e.seed(seq)&lt;/code&gt;, where &lt;code&gt;e&lt;/code&gt; is the underlying engine. This template only participate in overload resolution if &lt;code&gt;Sseq&lt;/code&gt; qualifies as a &lt;a href=&quot;../../../named_req/seedsequence&quot;&gt;SeedSequence&lt;/a&gt;. In particular, this template does not participate in overload resolution if &lt;code&gt;Sseq&lt;/code&gt; is implicitly convertible to &lt;code&gt;result_type&lt;/code&gt;.</source>
          <target state="translated">3）基になるエンジンにシードシーケンス &lt;code&gt;seq&lt;/code&gt; をシードします。 &lt;code&gt;e.seed(seq)&lt;/code&gt; を効果的に呼び出します。ここで、 &lt;code&gt;e&lt;/code&gt; は基礎となるエンジンです。場合は、このテンプレートは、唯一のオーバーロードの解決に参加 &lt;code&gt;Sseq&lt;/code&gt; がとしての資格&lt;a href=&quot;../../../named_req/seedsequence&quot;&gt;SeedSequence&lt;/a&gt;。特に、 &lt;code&gt;Sseq&lt;/code&gt; が暗黙的に &lt;code&gt;result_type&lt;/code&gt; に変換可能な場合、このテンプレートはオーバーロードの解決に参加しません。</target>
        </trans-unit>
        <trans-unit id="66256b254b71b452daa6c3c11989098848af677f" translate="yes" xml:space="preserve">
          <source>3) Sets the &lt;code&gt;floatfield&lt;/code&gt; of the stream &lt;code&gt;str&lt;/code&gt; to &lt;code&gt;fixed&lt;/code&gt; and &lt;code&gt;scientific&lt;/code&gt; simultaneously as if by calling &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::fixed&lt;/a&gt; | &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::scientific&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::floatfield&lt;/a&gt;)&lt;/code&gt;. This enables hexadecimal floating-point formatting.</source>
          <target state="translated">3）を設定します &lt;code&gt;floatfield&lt;/code&gt; ストリームの &lt;code&gt;str&lt;/code&gt; に &lt;code&gt;fixed&lt;/code&gt; し、 &lt;code&gt;scientific&lt;/code&gt; 呼び出すことであるかのように同時に &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::fixed&lt;/a&gt; | &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::scientific&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::floatfield&lt;/a&gt;)&lt;/code&gt; 。これにより、16進浮動小数点フォーマットが可能になります。</target>
        </trans-unit>
        <trans-unit id="539c675f402dc407efe8702c820cd3501d36e4b9" translate="yes" xml:space="preserve">
          <source>3) Sets the bits to the result of binary XOR on corresponding pairs of bits of &lt;code&gt;*this&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;*this&lt;/code&gt; と &lt;code&gt;other&lt;/code&gt; の対応するビットのペアのバイナリXORの結果にビットを設定します。</target>
        </trans-unit>
        <trans-unit id="0880c4c5eccb5f5716a83df72128c2a2e98bf13e" translate="yes" xml:space="preserve">
          <source>3) Shifts the elements towards the end of the range. If &lt;code&gt;n &amp;lt;= 0 || n &amp;gt;= last - first&lt;/code&gt;, there are no effects. Otherwise, for every integer &lt;code&gt;i&lt;/code&gt; in &lt;code&gt;[0, last - first - n)&lt;/code&gt;, moves the element originally at position &lt;code&gt;first + i&lt;/code&gt; to position &lt;code&gt;first + n + i&lt;/code&gt;. If &lt;code&gt;ForwardIt&lt;/code&gt; meets the &lt;a href=&quot;../named_req/bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt; requirements, then the moves are performed in decreasing order of &lt;code&gt;i&lt;/code&gt; starting from &lt;code&gt;last - first - n - 1&lt;/code&gt;.</source>
          <target state="translated">3）要素を範囲の終わりに向かってシフトします。 &lt;code&gt;n &amp;lt;= 0 || n &amp;gt;= last - first&lt;/code&gt; 場合|| n&amp;gt; = last-first、影響はありません。それ以外の場合、 &lt;code&gt;[0, last - first - n)&lt;/code&gt; すべての整数 &lt;code&gt;i&lt;/code&gt; について、最初に位置 &lt;code&gt;first + i&lt;/code&gt; 要素を位置 &lt;code&gt;first + n + i&lt;/code&gt; ます。 &lt;code&gt;ForwardIt&lt;/code&gt; が&lt;a href=&quot;../named_req/bidirectionaliterator&quot;&gt;LegacyBidirectionalIterator&lt;/a&gt;要件を満たしている場合、移動は、 &lt;code&gt;last - first - n - 1&lt;/code&gt; から始まる &lt;code&gt;i&lt;/code&gt; の降順で実行されます。</target>
        </trans-unit>
        <trans-unit id="3c9d0c2185c5586bd7bed52acf3ae314e951d96c" translate="yes" xml:space="preserve">
          <source>3) Specialization for array types. Provides a member type &lt;code&gt;value_type&lt;/code&gt; equal to &lt;code&gt;&lt;a href=&quot;../types/remove_cv&quot;&gt;std::remove_cv_t&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/remove_extent&quot;&gt;std::remove_extent_t&lt;/a&gt;&amp;lt;I&amp;gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">3）配列型の特殊化。提供会員種別 &lt;code&gt;value_type&lt;/code&gt; に等しい &lt;code&gt;&lt;a href=&quot;../types/remove_cv&quot;&gt;std::remove_cv_t&lt;/a&gt;&amp;lt;&lt;a href=&quot;../types/remove_extent&quot;&gt;std::remove_extent_t&lt;/a&gt;&amp;lt;I&amp;gt;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="58bd4662686ae1223f5baf954179e2d03f2c1d7f" translate="yes" xml:space="preserve">
          <source>3) Specialization for const-qualified types.</source>
          <target state="translated">3)const修飾型の特殊化。</target>
        </trans-unit>
        <trans-unit id="54ab7c739fef8476a189076fbf661003474506a2" translate="yes" xml:space="preserve">
          <source>3) Static or thread-local object (not necessarily of class type), that is not initialized by a constructor call, if the object is &lt;a href=&quot;value_initialization&quot;&gt;value-initialized&lt;/a&gt; or if every expression in its initializer is a constant expression.</source>
          <target state="translated">3）オブジェクトが&lt;a href=&quot;value_initialization&quot;&gt;値で初期&lt;/a&gt;化されている場合、またはその初期化子のすべての式が定数式である場合、コンストラクター呼び出しによって初期化されない静的またはスレッドローカルオブジェクト（必ずしもクラスタイプではない）。</target>
        </trans-unit>
        <trans-unit id="097d0b441067ba5d47d8543320b37efde3660d0b" translate="yes" xml:space="preserve">
          <source>3) Subtracts &lt;code&gt;d.count()&lt;/code&gt; days from &lt;code&gt;wd&lt;/code&gt;. Equivalent to &lt;code&gt;return wd + -d;&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;wd&lt;/code&gt; から &lt;code&gt;d.count()&lt;/code&gt; 日を差し引きます。 &lt;code&gt;return wd + -d;&lt;/code&gt; を返すのと同じです。</target>
        </trans-unit>
        <trans-unit id="2f3dca6824ef61799f78ac90e853a90658e6bfab" translate="yes" xml:space="preserve">
          <source>3) Subtracts &lt;code&gt;ds.count()&lt;/code&gt; days from &lt;code&gt;d&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;d&lt;/code&gt; から &lt;code&gt;ds.count()&lt;/code&gt; 日を減算します。</target>
        </trans-unit>
        <trans-unit id="7037daccc56ce1933ba8a1fbeeb87a58e2f62d6d" translate="yes" xml:space="preserve">
          <source>3) Subtracts &lt;code&gt;ms.count()&lt;/code&gt; months from &lt;code&gt;m&lt;/code&gt; and returns the result. Equivalent to &lt;code&gt;return m + -ms;&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;m&lt;/code&gt; から &lt;code&gt;ms.count()&lt;/code&gt; か月を引いて、結果を返します。 &lt;code&gt;return m + -ms;&lt;/code&gt; を返すのと同じです。</target>
        </trans-unit>
        <trans-unit id="ed35f317e0d17207eecbd63ea299f598c773b64d" translate="yes" xml:space="preserve">
          <source>3) Subtracts &lt;code&gt;ys.count()&lt;/code&gt; years from &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;y&lt;/code&gt; から &lt;code&gt;ys.count()&lt;/code&gt; 年を減算します。</target>
        </trans-unit>
        <trans-unit id="05713a69cd3b7ea822c8c9b8e7caf63a80afbb9b" translate="yes" xml:space="preserve">
          <source>3) Suitably declared &lt;a href=&quot;name#Qualified_identifiers&quot;&gt;qualified identifiers&lt;/a&gt; (e.g. &lt;code&gt;&lt;a href=&quot;../string/basic_string/npos&quot;&gt;std::string::npos&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">3）適切に宣言された&lt;a href=&quot;name#Qualified_identifiers&quot;&gt;修飾識別子&lt;/a&gt;（例： &lt;code&gt;&lt;a href=&quot;../string/basic_string/npos&quot;&gt;std::string::npos&lt;/a&gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="4f76236eac167e2ccfa25151cd48c3dd1b1bd111" translate="yes" xml:space="preserve">
          <source>3) The</source>
          <target state="translated">3)の</target>
        </trans-unit>
        <trans-unit id="bfa5d73f47f7efd6871f71c1cedbefaef7874a84" translate="yes" xml:space="preserve">
          <source>3) The &lt;code&gt;static&lt;/code&gt; specifier is only allowed in the declarations of objects (except in function parameter lists), declarations of functions (except at block scope), and declarations of anonymous unions. When used in a declaration of a class member, it declares a &lt;a href=&quot;static&quot;&gt;static member&lt;/a&gt;. When used in a declaration of an object, it specifies static storage duration (except if accompanied by &lt;code&gt;thread_local&lt;/code&gt;). When used in a declaration at namespace scope, it specifies internal linkage.</source>
          <target state="translated">3） &lt;code&gt;static&lt;/code&gt; 指定子は、オブジェクトの宣言（関数パラメーターリストを除く）、関数の宣言（ブロックスコープを除く）、および無名共用体の宣言でのみ許可されます。クラスメンバーの宣言で使用すると、&lt;a href=&quot;static&quot;&gt;静的メンバーを&lt;/a&gt;宣言します。オブジェクトの宣言で使用する場合は、静的な保存期間を指定します（ &lt;code&gt;thread_local&lt;/code&gt; を伴う場合を除く）。名前空間スコープの宣言で使用する場合、内部リンケージを指定します。</target>
        </trans-unit>
        <trans-unit id="a47e59365dd3deb1e9dc95fb2cf9637cc23e5693" translate="yes" xml:space="preserve">
          <source>3) The binary operation &lt;code&gt;binary_op&lt;/code&gt; is applied to pairs of elements from two ranges: one defined by &lt;code&gt;[first1, last1)&lt;/code&gt; and the other beginning at &lt;code&gt;first2&lt;/code&gt;.</source>
          <target state="translated">3）二項演算 &lt;code&gt;binary_op&lt;/code&gt; は、によって定義され2つの範囲の要素のペアに適用される &lt;code&gt;[first1, last1)&lt;/code&gt; とにおける他の開始 &lt;code&gt;first2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="99a25d1bfda3ab89fd10b1a019376ed17dbddf19" translate="yes" xml:space="preserve">
          <source>3) The buffer, which may be replaced by an external, user-provided buffer.</source>
          <target state="translated">3)ユーザが提供する外部バッファに置き換えることができるバッファ。</target>
        </trans-unit>
        <trans-unit id="b9fea7e9e911871543216c2bca462ae2d68f713a" translate="yes" xml:space="preserve">
          <source>3) The comma operator (&lt;code&gt;,&lt;/code&gt;). The value for the empty pack is &lt;code&gt;void()&lt;/code&gt;</source>
          <target state="translated">3）カンマ演算子（ &lt;code&gt;,&lt;/code&gt; ）。空のパックの値は &lt;code&gt;void()&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="106baa92685ed4789c9f3278b624715075f482d4" translate="yes" xml:space="preserve">
          <source>3) The copy constructor is deleted, &lt;code&gt;wbuffer_convert&lt;/code&gt; is not &lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;</source>
          <target state="translated">3）コピーコンストラクターが削除され、 &lt;code&gt;wbuffer_convert&lt;/code&gt; ない&lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;コピーコンストラクト&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="57c540f15553b610f14a86f8853f67d76a13deaa" translate="yes" xml:space="preserve">
          <source>3) The copy constructor is deleted: &lt;code&gt;std::random_device&lt;/code&gt; is not copyable nor movable.</source>
          <target state="translated">3）コピーコンストラクターが削除されます。 &lt;code&gt;std::random_device&lt;/code&gt; はコピーも移動もできません。</target>
        </trans-unit>
        <trans-unit id="538902239ad978c74ef7a4bcaa6ed7a88a4c7c1c" translate="yes" xml:space="preserve">
          <source>3) The copy constructor was declared &lt;code&gt;private:&lt;/code&gt; and not defined until C++11 and is declared as deleted in C++11: I/O streams are not &lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;.</source>
          <target state="translated">3）コピーコンストラクターは &lt;code&gt;private:&lt;/code&gt; として宣言されました。として宣言され、C ++ 11まで定義されておらず、C ++ 11で削除済みとして宣言されています&lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;。I&lt;/a&gt; / OストリームはCopyConstructibleではありません。</target>
        </trans-unit>
        <trans-unit id="ef862ed2daae32aa871acb691d2af8257cf12604" translate="yes" xml:space="preserve">
          <source>3) The execution policy type used as a unique type to disambiguate parallel algorithm overloading and indicate that a parallel algorithm's execution may be parallelized, vectorized, or migrated across threads (such as by a parent-stealing scheduler). The invocations of element access functions in parallel algorithms invoked with this policy are permitted to execute in an unordered fashion in unspecified threads, and unsequenced with respect to one another within each thread.</source>
          <target state="translated">3)実行ポリシータイプは、並列アルゴリズムのオーバーロードを曖昧にせず、並列アルゴリズムの実行が並列化、ベクトル化、またはスレッド間での移行(親ステーリングスケジューラなど)が可能であることを示すためのユニークなタイプとして使用されます。このポリシーで呼び出された並列アルゴリズムにおける要素アクセス関数の呼び出しは、指定されていないスレッド内で順序付けられていない方法で実行されることが許可されており、各スレッド内の互いに関連して順序付けられていません。</target>
        </trans-unit>
        <trans-unit id="5b969fc5d4983cfa6b335ab96d4eaa577cf84b39" translate="yes" xml:space="preserve">
          <source>3) The members declared after the specifier have private member access</source>
          <target state="translated">3)指定子の後に宣言されたメンバーは、プライベートメンバーにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="a27c6d6d4626ae8c9e794867e6db9bdc8a12c3bb" translate="yes" xml:space="preserve">
          <source>3) The move constructor copies the value of &lt;code&gt;gcount()&lt;/code&gt; from &lt;code&gt;rhs&lt;/code&gt;, sets the gcount() value of rhs to zero, and uses &lt;code&gt;basic_ios&amp;lt;CharT, Traits&amp;gt;::move(rhs)&lt;/code&gt; to move all basic_ios members, except for the &lt;code&gt;rdbuf()&lt;/code&gt;, from &lt;code&gt;rhs&lt;/code&gt; into &lt;code&gt;*this&lt;/code&gt;. This move constructor is protected: it is called by the move constructors of movable input stream classes &lt;code&gt;&lt;a href=&quot;../basic_ifstream&quot;&gt;std::basic_ifstream&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../basic_istringstream&quot;&gt;std::basic_istringstream&lt;/a&gt;&lt;/code&gt;, which know how to correctly move the associated stream buffer.</source>
          <target state="translated">3）移動コンストラクタコピーの値 &lt;code&gt;gcount()&lt;/code&gt; から &lt;code&gt;rhs&lt;/code&gt; 、（gcountを設定）がゼロにRHSの値、および使用 &lt;code&gt;basic_ios&amp;lt;CharT, Traits&amp;gt;::move(rhs)&lt;/code&gt; を除き、すべてのbasic_ios部材を移動させる &lt;code&gt;rdbuf()&lt;/code&gt; 、 &lt;code&gt;rhs&lt;/code&gt; から &lt;code&gt;*this&lt;/code&gt; へ。この動きコンストラクタは保護されています。それは、可動入力ストリームクラスの移動コンストラクタによって呼び出され &lt;code&gt;&lt;a href=&quot;../basic_ifstream&quot;&gt;std::basic_ifstream&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;../basic_istringstream&quot;&gt;std::basic_istringstream&lt;/a&gt;&lt;/code&gt; 、関連するストリームバッファーを正しく移動する方法を知っている、 std :: basic_istringstreamます。</target>
        </trans-unit>
        <trans-unit id="8253f464ab63b9544bb4b7a5ba673657dcaa92f7" translate="yes" xml:space="preserve">
          <source>3) The move constructor uses &lt;code&gt;basic_ios&amp;lt;CharT, Traits&amp;gt;::move(rhs)&lt;/code&gt; to move all basic_ios members, except for the &lt;code&gt;rdbuf()&lt;/code&gt;, from &lt;code&gt;rhs&lt;/code&gt; into &lt;code&gt;*this&lt;/code&gt;. This move constructor is protected: it is called by the move constructors of movable output stream classes &lt;code&gt;&lt;a href=&quot;../basic_ofstream&quot;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../basic_ostringstream&quot;&gt;std::basic_ostringstream&lt;/a&gt;&lt;/code&gt;, which know how to correctly move the associated streambuffer.</source>
          <target state="translated">3）moveコンストラクターは、 &lt;code&gt;basic_ios&amp;lt;CharT, Traits&amp;gt;::move(rhs)&lt;/code&gt; を使用して、 &lt;code&gt;rdbuf()&lt;/code&gt; を除くすべてのbasic_iosメンバーを &lt;code&gt;rhs&lt;/code&gt; から &lt;code&gt;*this&lt;/code&gt; に移動します。この移動コンストラクターは保護されています。これは、関連するストリーム &lt;code&gt;&lt;a href=&quot;../basic_ofstream&quot;&gt;std::basic_ofstream&lt;/a&gt;&lt;/code&gt; を正しく移動する方法を知っている、移動可能な出力ストリームクラスstd :: basic_ofstreamおよび &lt;code&gt;&lt;a href=&quot;../basic_ostringstream&quot;&gt;std::basic_ostringstream&lt;/a&gt;&lt;/code&gt; の移動コンストラクターによって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1c5f5e6303c3981281bdf12b22a9967c96eff97c" translate="yes" xml:space="preserve">
          <source>3) The numeric arguments &lt;code&gt;units&lt;/code&gt; is converted to a wide character string as if by &lt;code&gt;ct.widen(buf1, buf1 + &lt;a href=&quot;../../io/c/fprintf&quot;&gt;std::sprintf&lt;/a&gt;(buf1, &quot;%.0Lf&quot;, units), buf2)&lt;/code&gt;, where &lt;code&gt;ct&lt;/code&gt; is the &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; facet imbued in &lt;code&gt;str.getloc()&lt;/code&gt; and &lt;code&gt;buf1&lt;/code&gt; and &lt;code&gt;buf2&lt;/code&gt; are sufficiently large character buffers. The resulting character string &lt;code&gt;buf2&lt;/code&gt; is processed, formatted, and output to &lt;code&gt;out&lt;/code&gt; as desribed below.</source>
          <target state="translated">3）数値引数の &lt;code&gt;units&lt;/code&gt; は、 &lt;code&gt;ct.widen(buf1, buf1 + &lt;a href=&quot;../../io/c/fprintf&quot;&gt;std::sprintf&lt;/a&gt;(buf1, &quot;%.0Lf&quot;, units), buf2)&lt;/code&gt; ようにワイド文字列に変換されます。ここで、 &lt;code&gt;ct&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;../ctype&quot;&gt;std::ctype&lt;/a&gt;&lt;/code&gt; &lt;code&gt;str.getloc()&lt;/code&gt; に組み込まれたctypeファセット、 &lt;code&gt;buf1&lt;/code&gt; と &lt;code&gt;buf2&lt;/code&gt; は十分に大きな文字バッファーです。結果の文字列 &lt;code&gt;buf2&lt;/code&gt; は処理され、フォーマットさ &lt;code&gt;out&lt;/code&gt; 、次に説明するように出力されます。</target>
        </trans-unit>
        <trans-unit id="9d23036119f9057dac90391026d9f10d74793ec9" translate="yes" xml:space="preserve">
          <source>3) The pointer one past the end of the get area.</source>
          <target state="translated">3)取得領域の端から1つ先のポインタ。</target>
        </trans-unit>
        <trans-unit id="4522f0a21976a2225b32579b72b1aea157568164" translate="yes" xml:space="preserve">
          <source>3) The pointer one past the end of the put area.</source>
          <target state="translated">3)パットエリアの端から1つ先のポインター。</target>
        </trans-unit>
        <trans-unit id="5739e5b8d09abf81265c1829686de1ae25206b35" translate="yes" xml:space="preserve">
          <source>3) The program is ill-formed if &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;T, U&amp;gt;&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../../types/is_constructible&quot;&gt;std::is_constructible_v&lt;/a&gt;&amp;lt;T, U&amp;gt;&lt;/code&gt; &amp;lt;T、U&amp;gt;の場合、プログラムの形式が正しくありませんが &lt;code&gt;false&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="6233aa93b494442e3d3982e63f956a5fb19dfba8" translate="yes" xml:space="preserve">
          <source>3) The proximate form of the path</source>
          <target state="translated">3)パスの近似形</target>
        </trans-unit>
        <trans-unit id="f7c28efecd0b1bf8f774df7cb16171047445f27c" translate="yes" xml:space="preserve">
          <source>3) The random number generator is the function object &lt;code&gt;g&lt;/code&gt;.</source>
          <target state="translated">3）乱数ジェネレーターは関数オブジェクトです &lt;code&gt;g&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e800546551b8927f2c5472761bbbcc6aea77c856" translate="yes" xml:space="preserve">
          <source>3) The result encoding in the case of &lt;code&gt;u8string()&lt;/code&gt; is always UTF-8.</source>
          <target state="translated">3）の場合の結果のエンコーディング &lt;code&gt;u8string()&lt;/code&gt; のは常にUTF-8です。</target>
        </trans-unit>
        <trans-unit id="8c7594a004dbf92a4cfa7dbf8383d65e67748ae8" translate="yes" xml:space="preserve">
          <source>3) The underlying iterator is initialized with that of &lt;code&gt;other&lt;/code&gt;.</source>
          <target state="translated">3）基礎となるイテレータは &lt;code&gt;other&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="37983c33230cd98fd38753f8dbad4d00fc819fa2" translate="yes" xml:space="preserve">
          <source>3) Then, non-static data members are initialized in order of declaration in the class definition.</source>
          <target state="translated">3)そして、非静的データメンバは、クラス定義で宣言された順に初期化されます。</target>
        </trans-unit>
        <trans-unit id="09efa6229584955cc0d4f32db27a05bce6094a2d" translate="yes" xml:space="preserve">
          <source>3) This overload only participates in overload resolution if T is a specialization of std::pair. Equivalent to</source>
          <target state="translated">3)このオーバーロードは、T が std::pair の特殊化である場合にのみ、オーバーロード解決に参加します。に相当します。</target>
        </trans-unit>
        <trans-unit id="e8d1f320a7a5eb1a513d5f28ed9a79257cee0b53" translate="yes" xml:space="preserve">
          <source>3) Throws any exception thrown by the constructor of &lt;code&gt;T&lt;/code&gt;. Has the following</source>
          <target state="translated">3）のコンストラクターによってスローされた例外をスローします &lt;code&gt;T&lt;/code&gt; ます。次を持っています</target>
        </trans-unit>
        <trans-unit id="180d52fc736ff4085fc3cd183c0e31bace34a9e5" translate="yes" xml:space="preserve">
          <source>3) Transfers the elements in the range &lt;code&gt;[first, last)&lt;/code&gt; from &lt;code&gt;other&lt;/code&gt; into &lt;code&gt;*this&lt;/code&gt;. The elements are inserted before the element pointed to by &lt;code&gt;pos&lt;/code&gt;. The behavior is undefined if &lt;code&gt;pos&lt;/code&gt; is an iterator in the range &lt;code&gt;[first,last)&lt;/code&gt;.</source>
          <target state="translated">3）の範囲内の要素を転送し &lt;code&gt;[first, last)&lt;/code&gt; から &lt;code&gt;other&lt;/code&gt; に &lt;code&gt;*this&lt;/code&gt; 。要素は、 &lt;code&gt;pos&lt;/code&gt; が指す要素の前に挿入されます。 &lt;code&gt;pos&lt;/code&gt; が &lt;code&gt;[first,last)&lt;/code&gt; 範囲の反復子である場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="3664df048e90beb28440427bae630d23ce78e957" translate="yes" xml:space="preserve">
          <source>3) Transfers the ownership of the object managed by &lt;code&gt;r&lt;/code&gt; to &lt;code&gt;*this&lt;/code&gt;. If &lt;code&gt;r&lt;/code&gt; manages no object, &lt;code&gt;*this&lt;/code&gt; manages no object too. After the assignment, &lt;code&gt;*this&lt;/code&gt; contains the pointer previously held by &lt;code&gt;r&lt;/code&gt;, and &lt;code&gt;use_count()==1&lt;/code&gt;; also &lt;code&gt;r&lt;/code&gt; is empty. Equivalent to &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;(r).swap(*this)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;r&lt;/code&gt; が管理するオブジェクトの所有権を &lt;code&gt;*this&lt;/code&gt; に転送します。場合 &lt;code&gt;r&lt;/code&gt; は何のオブジェクトを管理していない、 &lt;code&gt;*this&lt;/code&gt; あまりにも何のオブジェクトを管理していません。割り当て後、 &lt;code&gt;*this&lt;/code&gt; 、以前に保持されたポインタ含ま &lt;code&gt;r&lt;/code&gt; 、及び &lt;code&gt;use_count()==1&lt;/code&gt; 。また、 &lt;code&gt;r&lt;/code&gt; は空です。 &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;(r).swap(*this)&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="8fb32edff5d6d482cde4402d55a0f26597a58a64" translate="yes" xml:space="preserve">
          <source>3) UTF-16 character literal, e.g. &lt;code&gt;u'貓'&lt;/code&gt;, but not &lt;code&gt;u'🍌'&lt;/code&gt; (&lt;code&gt;u'\U0001f34c'&lt;/code&gt;). Such literal has type &lt;code&gt;char16_t&lt;/code&gt; and the value equal to ISO 10646 code point value of c-char, provided that the code point value is representable with a single UTF-16 code unit (that is, c-char is in the range 0x0-0xFFFF, inclusive). If c-char is not representable with a single UTF-16 code unit, the program is ill-formed.</source>
          <target state="translated">3）UTF-16文字リテラル、たとえば &lt;code&gt;u'貓'&lt;/code&gt; ではなく &lt;code&gt;u'🍌'&lt;/code&gt; （ &lt;code&gt;u'\U0001f34c'&lt;/code&gt; ）。そのようなリテラルにはタイプがあります &lt;code&gt;char16_t&lt;/code&gt; であり、値はc-charのISO 10646コードポイント値に等しい（ただし、コードポイント値が単一のUTF-16コード単位で表現できる場合（つまり、c-charは0x0-0xFFFFの範囲内）を含みます）。c-charが単一のUTF-16コード単位で表現できない場合、プログラムの形式は正しくありません。</target>
        </trans-unit>
        <trans-unit id="0eb1cd751938a22a6214ac1b9240979fd29cc6b0" translate="yes" xml:space="preserve">
          <source>3) UTF-8 encoded string literal. The type of a &lt;code&gt;u8&quot;...&quot;&lt;/code&gt; string literal is &lt;code&gt;const char[N]&lt;/code&gt;(until C++20)&lt;code&gt;const char8_t[N]&lt;/code&gt;(since C++20), where &lt;code&gt;N&lt;/code&gt; is the size of the string in UTF-8 code units including the null terminator.</source>
          <target state="translated">3）UTF-8でエンコードされた文字列リテラル。 &lt;code&gt;u8&quot;...&quot;&lt;/code&gt; 文字列リテラルのタイプは &lt;code&gt;const char[N]&lt;/code&gt; （C ++ 20まで） &lt;code&gt;const char8_t[N]&lt;/code&gt; （C ++ 20以降）です。ここで、 &lt;code&gt;N&lt;/code&gt; はUTF-8での文字列のサイズです。 nullターミネーターを含むコード単位。</target>
        </trans-unit>
        <trans-unit id="04ad1633cce0abf907d5083b7a4ffaf95348fe38" translate="yes" xml:space="preserve">
          <source>3) Uses a copy of &lt;code&gt;str&lt;/code&gt; as initial contents of the underlying string device. The underlying &lt;code&gt;basic_stringbuf&lt;/code&gt; object is constructed as &lt;code&gt;basic_stringbuf&amp;lt;Char,Traits,Allocator&amp;gt;(str, mode | ios_base::in)&lt;/code&gt;.</source>
          <target state="translated">3）基礎となる文字列デバイスの初期コンテンツとして &lt;code&gt;str&lt;/code&gt; のコピーを使用します。基本的な &lt;code&gt;basic_stringbuf&lt;/code&gt; オブジェクトは次のように構築されます &lt;code&gt;basic_stringbuf&amp;lt;Char,Traits,Allocator&amp;gt;(str, mode | ios_base::in)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e835e4bcc4392bc0a331b564871e685c77ddf29f" translate="yes" xml:space="preserve">
          <source>3) Uses a copy of &lt;code&gt;str&lt;/code&gt; as initial contents of the underlying string device. The underlying &lt;code&gt;basic_stringbuf&lt;/code&gt; object is constructed as &lt;code&gt;basic_stringbuf&amp;lt;Char,Traits,Allocator&amp;gt;(str, mode | ios_base::out)&lt;/code&gt;.</source>
          <target state="translated">3）基礎となる文字列デバイスの初期コンテンツとして &lt;code&gt;str&lt;/code&gt; のコピーを使用します。基本となる &lt;code&gt;basic_stringbuf&lt;/code&gt; オブジェクトは、 &lt;code&gt;basic_stringbuf&amp;lt;Char,Traits,Allocator&amp;gt;(str, mode | ios_base::out)&lt;/code&gt; として構築されます。</target>
        </trans-unit>
        <trans-unit id="83d42b2907d10c4217066cc14296a1b1547d6768" translate="yes" xml:space="preserve">
          <source>3) Uses a copy of &lt;code&gt;str&lt;/code&gt; as initial contents of the underlying string device. The underlying &lt;code&gt;basic_stringbuf&lt;/code&gt; object is constructed as &lt;code&gt;basic_stringbuf&amp;lt;Char,Traits,Allocator&amp;gt;(str, mode)&lt;/code&gt;.</source>
          <target state="translated">3）基礎となる文字列デバイスの初期コンテンツとして &lt;code&gt;str&lt;/code&gt; のコピーを使用します。基本となる &lt;code&gt;basic_stringbuf&lt;/code&gt; オブジェクトは、 &lt;code&gt;basic_stringbuf&amp;lt;Char,Traits,Allocator&amp;gt;(str, mode)&lt;/code&gt; として構築されます。</target>
        </trans-unit>
        <trans-unit id="09bc43c84c31674f028769647df22694756ec5ee" translate="yes" xml:space="preserve">
          <source>3) Uses the &lt;a href=&quot;../../language/delete&quot;&gt;delete-expression&lt;/a&gt;&lt;code&gt;delete ptr&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is not an array type; &lt;code&gt;delete[] ptr&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is an array type(since C++17) as the deleter. &lt;code&gt;Y&lt;/code&gt; must be a complete type. The delete expression must be well-formed, have well-defined behavior and not throw any exceptions. This constructor additionally does not participate in overload resolution if the delete expression is not well-formed.(since C++17)</source>
          <target state="translated">3） &lt;code&gt;T&lt;/code&gt; が配列型でない場合は、&lt;a href=&quot;../../language/delete&quot;&gt;delete-expression &lt;/a&gt; &lt;code&gt;delete ptr&lt;/code&gt; を使用します。 &lt;code&gt;delete[] ptr&lt;/code&gt; 場合 &lt;code&gt;T&lt;/code&gt; は削除手段として（C ++ 17以降）配列型です。 &lt;code&gt;Y&lt;/code&gt; は完全な型でなければなりません。削除式は整形式でなければならず、明確に定義された動作を持ち、例外をスローしない必要があります。このコンストラクタは、削除式が整形式でない場合、オーバーロードの解決に参加しません。（C ++ 17以降）</target>
        </trans-unit>
        <trans-unit id="c395b404baa79c386b4d710ca413c2f1807e804e" translate="yes" xml:space="preserve">
          <source>3) Uses the specified deleter &lt;code&gt;d&lt;/code&gt; as the deleter. &lt;code&gt;Deleter&lt;/code&gt; must be callable for the type &lt;code&gt;T&lt;/code&gt;, i.e. &lt;code&gt;d(ptr)&lt;/code&gt; must be well formed, have well-defined behavior and not throw any exceptions. &lt;code&gt;Deleter&lt;/code&gt; must be &lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;, and its copy constructor and destructor must not throw exceptions. Equivalent to &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;(ptr, d).swap(*this);&lt;/code&gt;.</source>
          <target state="translated">3）指定された削除者 &lt;code&gt;d&lt;/code&gt; を削除者として使用します。 &lt;code&gt;Deleter&lt;/code&gt; は &lt;code&gt;T&lt;/code&gt; 型に対して呼び出し可能でなければなりません。つまり、 &lt;code&gt;d(ptr)&lt;/code&gt; は整形式で、明確に定義された動作を持ち、例外をスローしない必要があります。 &lt;code&gt;Deleter&lt;/code&gt; は&lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;である必要があり、そのコピーコンストラクタとデストラクタは例外をスローしてはなりません。相当 &lt;code&gt;shared_ptr&amp;lt;T&amp;gt;(ptr, d).swap(*this);&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8035b06b4704ada294cf21d12af4d289132f3e32" translate="yes" xml:space="preserve">
          <source>3) When an array of any &lt;a href=&quot;types#Character_types&quot;&gt;character type&lt;/a&gt; is &lt;a href=&quot;aggregate_initialization#Character_arrays&quot;&gt;initialized with a string literal&lt;/a&gt; that is too short, the remainder of the array is zero-initialized.</source>
          <target state="translated">3）いずれかの配列すると&lt;a href=&quot;types#Character_types&quot;&gt;、文字の種類が&lt;/a&gt;され&lt;a href=&quot;aggregate_initialization#Character_arrays&quot;&gt;、文字列リテラルで初期化&lt;/a&gt;短すぎる、アレイの残りはゼロで初期化されます。</target>
        </trans-unit>
        <trans-unit id="7f13d95ac4e8156c5779496326ed3f4e7b6fe42b" translate="yes" xml:space="preserve">
          <source>3) When two variables with &lt;code&gt;&quot;C&quot;&lt;/code&gt; language linkage and the same name that appear in different namespaces, they refer to the same variable.</source>
          <target state="translated">3）2つの変数が &lt;code&gt;&quot;C&quot;&lt;/code&gt; 言語リンケージを持ち、名前空間が異なる同じ名前の同じ変数を参照している場合。</target>
        </trans-unit>
        <trans-unit id="4155f7c75562837f51e2a50206a32e961f0f059b" translate="yes" xml:space="preserve">
          <source>3) Wraps a non-const member function with a single parameter.</source>
          <target state="translated">3)const ではないメンバ関数を単一のパラメータでラップします。</target>
        </trans-unit>
        <trans-unit id="295654c8321ff1ec4c4e8a96eac87a6e3ed5f21e" translate="yes" xml:space="preserve">
          <source>3) Writes the results to a character string &lt;code&gt;buffer&lt;/code&gt;.</source>
          <target state="translated">3）結果を文字列 &lt;code&gt;buffer&lt;/code&gt; 書き込みます。</target>
        </trans-unit>
        <trans-unit id="4f587e6945116c94dad66390db735ce2ddace527" translate="yes" xml:space="preserve">
          <source>3) Writes the results to a wide string &lt;code&gt;buffer&lt;/code&gt;. At most &lt;code&gt;size-1&lt;/code&gt; wide characters are written followed by null wide character.</source>
          <target state="translated">3）結果をワイド文字列 &lt;code&gt;buffer&lt;/code&gt; 書き込みます。最大で &lt;code&gt;size-1&lt;/code&gt; のワイド文字が書き込まれ、その後にnullワイド文字が続きます。</target>
        </trans-unit>
        <trans-unit id="803e45e8f371490b430b8a7554b3a153af2d6267" translate="yes" xml:space="preserve">
          <source>3) adds &lt;code&gt;volatile&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;volatile&lt;/code&gt; 追加します。</target>
        </trans-unit>
        <trans-unit id="0283dee7c30148a16571de6fdc53d78b6a17c0c6" translate="yes" xml:space="preserve">
          <source>3) all names except for the functions and function templates are ignored (no collision with variables)</source>
          <target state="translated">3)関数と関数テンプレート以外の名前はすべて無視されます(変数との衝突はありません)</target>
        </trans-unit>
        <trans-unit id="b92787ecfa67da771730f619ea829e7c5b701fde" translate="yes" xml:space="preserve">
          <source>3) any declaration that is not a function or a function template (e.g. a function object or another variable whose name conflicts with the name of the function that's being looked up)</source>
          <target state="translated">3)関数や関数テンプレートではない宣言(例えば、関数オブジェクトや、名前が検索している関数の名前と競合する別の変数)</target>
        </trans-unit>
        <trans-unit id="658e8718bdcaedd95b8e191a1d44644c43f146f3" translate="yes" xml:space="preserve">
          <source>3) as a function call argument</source>
          <target state="translated">3)関数呼び出しの引数として</target>
        </trans-unit>
        <trans-unit id="7edf1af248df188c9ec386cbc14ba718e90ef9b4" translate="yes" xml:space="preserve">
          <source>3) atomic constraints</source>
          <target state="translated">3)原子制約</target>
        </trans-unit>
        <trans-unit id="3e3283342f36405013afd4a4f53a71bf0470e73a" translate="yes" xml:space="preserve">
          <source>3) attribute with arguments, such as &lt;code&gt;[[deprecated(&quot;because&quot;)]]&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;[[deprecated(&quot;because&quot;)]]&lt;/code&gt; などの引数を持つ属性</target>
        </trans-unit>
        <trans-unit id="6d691fb320f3108e5388841a4dc3ecd35f03a748" translate="yes" xml:space="preserve">
          <source>3) binary right fold</source>
          <target state="translated">3)バイナリ右折</target>
        </trans-unit>
        <trans-unit id="04a489ba555c6fcc3c9976d9b52269cfe1cff7db" translate="yes" xml:space="preserve">
          <source>3) bitwise OR</source>
          <target state="translated">3)ビットごとのOR</target>
        </trans-unit>
        <trans-unit id="652c10999778959225a32c8a85781e8e17e5cf95" translate="yes" xml:space="preserve">
          <source>3) braced-init-list: possibly empty, comma-separated list of expressions and other braced-init-lists</source>
          <target state="translated">3)中括弧付き初期化リスト:空の可能性があり、カンマで区切られた式のリストとその他の中括弧付き初期化リスト</target>
        </trans-unit>
        <trans-unit id="4a92bfe20c2b41c2ffab2f58ee0fc0a40ff982ba" translate="yes" xml:space="preserve">
          <source>3) by-copy capture with an &lt;a href=&quot;initialization&quot;&gt;initializer&lt;/a&gt;</source>
          <target state="translated">3）&lt;a href=&quot;initialization&quot;&gt;イニシャライザを使用&lt;/a&gt;したコピーごとのキャプチャ</target>
        </trans-unit>
        <trans-unit id="bc97f5c61121198677a9697e708fca91bc3491c3" translate="yes" xml:space="preserve">
          <source>3) calls &lt;code&gt;&lt;a href=&quot;../byte/strtof&quot;&gt;std::strtold&lt;/a&gt;(str.c_str(), &amp;amp;ptr)&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../wide/wcstof&quot;&gt;std::wcstold&lt;/a&gt;(str.c_str(), &amp;amp;ptr)&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../byte/strtof&quot;&gt;std::strtold&lt;/a&gt;(str.c_str(), &amp;amp;ptr)&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../wide/wcstof&quot;&gt;std::wcstold&lt;/a&gt;(str.c_str(), &amp;amp;ptr)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8f57fc1089d4ab92c199a3abb2e4e84fe0b895d7" translate="yes" xml:space="preserve">
          <source>3) calls &lt;code&gt;&lt;a href=&quot;../byte/strtol&quot;&gt;std::strtoll&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;../wide/wcstol&quot;&gt;std::wcstoll&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../byte/strtol&quot;&gt;std::strtoll&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;../wide/wcstol&quot;&gt;std::wcstoll&lt;/a&gt;(str.c_str(), &amp;amp;ptr, base)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b58c2fe23c209a07cbd3e585d20b1c41b3e21888" translate="yes" xml:space="preserve">
          <source>3) characters in the range &lt;code&gt;[first2, last2)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;[first2, last2)&lt;/code&gt; 範囲の文字。</target>
        </trans-unit>
        <trans-unit id="55c9063212dece2c40b250c09342ca588b514856" translate="yes" xml:space="preserve">
          <source>3) copy constructor. Constructs the container with the copy of the contents of &lt;code&gt;other&lt;/code&gt;, copies the load factor, the predicate, and the hash function as well. If &lt;code&gt;alloc&lt;/code&gt; is not provided, allocator is obtained by calling &lt;code&gt;&lt;a href=&quot;../../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::select_on_container_copy_construction(other.get_allocator())&lt;/code&gt;.</source>
          <target state="translated">3）コンストラクタをコピーします。 &lt;code&gt;other&lt;/code&gt; の内容のコピーでコンテナを構築し、負荷係数、述語、ハッシュ関数もコピーします。場合 &lt;code&gt;alloc&lt;/code&gt; 設けられていない、アロケータを呼び出すことによって取得された &lt;code&gt;&lt;a href=&quot;../../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::select_on_container_copy_construction(other.get_allocator())&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6893855af86b5c0cd63c25edcf00090090e8fc67" translate="yes" xml:space="preserve">
          <source>3) counts elements for which predicate &lt;code&gt;p&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">3）述語 &lt;code&gt;p&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返す要素をカウントします。</target>
        </trans-unit>
        <trans-unit id="760b93562a5dc4b1eb578d2151b6295f3cf52a06" translate="yes" xml:space="preserve">
          <source>3) cv-qualification rules are the same as for member of object operator, with one additional rule: a pointer to member that refers to a mutable member cannot be used to modify that member in a const object;</source>
          <target state="translated">3)cv-qualification の規則は,オブジェクト演算子のメンバと同じですが,1つだけ追加の規則があります:変更可能なメンバを参照するメンバへのポインタは,const オブジェクト内のそのメンバを変更するためには利用できません.</target>
        </trans-unit>
        <trans-unit id="a0f626627b9f81f4e7e0997546307bc99fec13bb" translate="yes" xml:space="preserve">
          <source>3) cv-qualified versions of one of the above</source>
          <target state="translated">3)上記のいずれかのCV版</target>
        </trans-unit>
        <trans-unit id="1048b9840acffeb9919c9a3a9dd1d739a28b7cb3" translate="yes" xml:space="preserve">
          <source>3) default label in a &lt;a href=&quot;switch&quot;&gt;switch&lt;/a&gt; statement.</source>
          <target state="translated">3）&lt;a href=&quot;switch&quot;&gt;スイッチの&lt;/a&gt;デフォルトラベルステートメントの。</target>
        </trans-unit>
        <trans-unit id="b3ed4381a4c5a4a0a776d0e839431fab990896f2" translate="yes" xml:space="preserve">
          <source>3) explicitly deleted function definition</source>
          <target state="translated">3)明示的に削除された関数定義</target>
        </trans-unit>
        <trans-unit id="a97ff3ac0c9ec92446d737c4d9d5b54e6f2b8b3b" translate="yes" xml:space="preserve">
          <source>3) files created by &lt;code&gt;&lt;a href=&quot;../../io/c/tmpfile&quot;&gt;std::tmpfile&lt;/a&gt;&lt;/code&gt; are removed</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../../io/c/tmpfile&quot;&gt;std::tmpfile&lt;/a&gt;&lt;/code&gt; によって作成されたファイルが削除されます</target>
        </trans-unit>
        <trans-unit id="eb4b749f55c8e582961149bc519050d0fdb8be68" translate="yes" xml:space="preserve">
          <source>3) forms a literal &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;long double&amp;gt;&lt;/code&gt; with the real part zero and imaginary part &lt;code&gt;arg&lt;/code&gt;</source>
          <target state="translated">3）実数部がゼロで虚数部が &lt;code&gt;arg&lt;/code&gt; のリテラル &lt;code&gt;&lt;a href=&quot;../complex&quot;&gt;std::complex&lt;/a&gt;&amp;lt;long double&amp;gt;&lt;/code&gt; を形成します</target>
        </trans-unit>
        <trans-unit id="65f35e330e5d2b7197814a8722f3d83824815d80" translate="yes" xml:space="preserve">
          <source>3) if &lt;code&gt;E2&lt;/code&gt; is a &lt;a href=&quot;static&quot;&gt;static member function&lt;/a&gt;, the result is an lvalue designating that static member function. Essentially, &lt;code&gt;E1&lt;/code&gt; is evaluated and discarded in this case;</source>
          <target state="translated">3） &lt;code&gt;E2&lt;/code&gt; が&lt;a href=&quot;static&quot;&gt;静的メンバー関数の&lt;/a&gt;場合、結果はその静的メンバー関数を指定する左辺値になります。基本的に、この場合 &lt;code&gt;E1&lt;/code&gt; が評価されて破棄されます。</target>
        </trans-unit>
        <trans-unit id="e25fdb0857d791e3ee9fff7d173d5fcc148e102f" translate="yes" xml:space="preserve">
          <source>3) if &lt;code&gt;T&lt;/code&gt; is a class type with a member type &lt;code&gt;T::argument_type&lt;/code&gt;, then &lt;code&gt;argument_type&lt;/code&gt; is an alias of that.</source>
          <target state="translated">3） &lt;code&gt;T&lt;/code&gt; がメンバー型 &lt;code&gt;T::argument_type&lt;/code&gt; クラス型である場合、 &lt;code&gt;argument_type&lt;/code&gt; はその別名です。</target>
        </trans-unit>
        <trans-unit id="ae210b7bef5f4480ec5f9f0fe776140f4e8d036d" translate="yes" xml:space="preserve">
          <source>3) if &lt;code&gt;T&lt;/code&gt; is a class type with a member type &lt;code&gt;T::first_argument_type&lt;/code&gt;, then &lt;code&gt;first_argument_type&lt;/code&gt; is an alias of that.</source>
          <target state="translated">3） &lt;code&gt;T&lt;/code&gt; がメンバー型 &lt;code&gt;T::first_argument_type&lt;/code&gt; クラス型である場合、 &lt;code&gt;first_argument_type&lt;/code&gt; はその別名です。</target>
        </trans-unit>
        <trans-unit id="0806903e4bdd82779de06ae3f5540676a2dcfab4" translate="yes" xml:space="preserve">
          <source>3) if &lt;code&gt;T&lt;/code&gt; is a class type with a member type &lt;code&gt;T::second_argument_type&lt;/code&gt;, then &lt;code&gt;second_argument_type&lt;/code&gt; is an alias of that.</source>
          <target state="translated">3） &lt;code&gt;T&lt;/code&gt; がメンバー型 &lt;code&gt;T::second_argument_type&lt;/code&gt; クラス型の場合、 &lt;code&gt;second_argument_type&lt;/code&gt; はその別名です。</target>
        </trans-unit>
        <trans-unit id="5187a9b908ae317f2fa0d3270c45a1c06f97df60" translate="yes" xml:space="preserve">
          <source>3) if &lt;code&gt;T&lt;/code&gt; is an array type, each element of the array is value-initialized;</source>
          <target state="translated">3） &lt;code&gt;T&lt;/code&gt; が配列型の場合、配列の各要素は値で初期化されます。</target>
        </trans-unit>
        <trans-unit id="048ef5dbf48237f293fb0aacd098a3a77010af17" translate="yes" xml:space="preserve">
          <source>3) initialization of a prvalue temporary by &lt;a href=&quot;explicit_cast&quot;&gt;functional cast&lt;/a&gt; or with a parenthesized expression list</source>
          <target state="translated">3）&lt;a href=&quot;explicit_cast&quot;&gt;関数キャスト&lt;/a&gt;または括弧で囲まれた式リストによる一時的なprvalueの初期化</target>
        </trans-unit>
        <trans-unit id="a4101a4f5111b9bc9e8639bcdb38879ae15c070b" translate="yes" xml:space="preserve">
          <source>3) initialization of an object with dynamic storage duration with a &lt;a href=&quot;new&quot;&gt;new-expression&lt;/a&gt;, where the initializer is a brace-init-list</source>
          <target state="translated">3）&lt;a href=&quot;new&quot;&gt;new-expressionを使用&lt;/a&gt;した動的ストレージ期間を持つオブジェクトの初期化。初期化子はbrace-init-listです。</target>
        </trans-unit>
        <trans-unit id="6b17f8578d2fcc738f6a3ee08e2209758da8a73f" translate="yes" xml:space="preserve">
          <source>3) inserts &lt;code&gt;count&lt;/code&gt; copies of the &lt;code&gt;value&lt;/code&gt; after the element pointed to by &lt;code&gt;pos&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;pos&lt;/code&gt; が指す要素の後に &lt;code&gt;value&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; コピーを挿入します</target>
        </trans-unit>
        <trans-unit id="739382f91ea511bc575531ff12244cb1f7da1949" translate="yes" xml:space="preserve">
          <source>3) inserts &lt;code&gt;count&lt;/code&gt; copies of the &lt;code&gt;value&lt;/code&gt; before &lt;code&gt;pos&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;pos&lt;/code&gt; の前に &lt;code&gt;value&lt;/code&gt; &lt;code&gt;count&lt;/code&gt; コピーを挿入します</target>
        </trans-unit>
        <trans-unit id="50a391ff617f9d513ed9544c032250601e82fa2f" translate="yes" xml:space="preserve">
          <source>3) iterator pointing to the character &lt;code&gt;last&lt;/code&gt; pointed to before the erase, or &lt;code&gt;end()&lt;/code&gt; if no such character exists</source>
          <target state="translated">3）消去の前に &lt;code&gt;last&lt;/code&gt; ポイントされた文字を指すイテレーター、または &lt;code&gt;end()&lt;/code&gt; そのような文字が存在しない場合は</target>
        </trans-unit>
        <trans-unit id="bc7972856cd774c97ade8a6c1051488492723094" translate="yes" xml:space="preserve">
          <source>3) linear in &lt;code&gt;count&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;count&lt;/code&gt; 線形</target>
        </trans-unit>
        <trans-unit id="65ad8d83fcd2f6d74a5f43e50c748c4101d25c3d" translate="yes" xml:space="preserve">
          <source>3) linear in size of &lt;code&gt;other&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;other&lt;/code&gt; サイズで線形</target>
        </trans-unit>
        <trans-unit id="8880501fa9d2e5a0f3c44a1480b013b5066ec13a" translate="yes" xml:space="preserve">
          <source>3) linear in size of &lt;code&gt;s&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;s&lt;/code&gt; のサイズが線形</target>
        </trans-unit>
        <trans-unit id="f5919b81092eb362583fce5f28096ef4be37d0f6" translate="yes" xml:space="preserve">
          <source>3) meets the &lt;a href=&quot;../../named_req/transformationtrait&quot;&gt;TransformationTrait&lt;/a&gt; requirements with a member typedef &lt;code&gt;type&lt;/code&gt; that names, respectively, &lt;code&gt;&lt;a href=&quot;../../types/add_cv&quot;&gt;std::add_const_t&lt;/a&gt;&amp;lt;std::variant_alternative&amp;lt;I,T&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../types/add_cv&quot;&gt;std::add_volatile_t&lt;/a&gt;&amp;lt;std::variant_alternative&amp;lt;I,T&amp;gt;&amp;gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;../../types/add_cv&quot;&gt;std::add_cv_t&lt;/a&gt;&amp;lt;std::variant_alternative&amp;lt;I,T&amp;gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">3）を満たす&lt;a href=&quot;../../named_req/transformationtrait&quot;&gt;TransformationTrait用&lt;/a&gt;のtypedef部材との要件を &lt;code&gt;type&lt;/code&gt; 名、それぞれこと &lt;code&gt;&lt;a href=&quot;../../types/add_cv&quot;&gt;std::add_const_t&lt;/a&gt;&amp;lt;std::variant_alternative&amp;lt;I,T&amp;gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../../types/add_cv&quot;&gt;std::add_volatile_t&lt;/a&gt;&amp;lt;std::variant_alternative&amp;lt;I,T&amp;gt;&amp;gt;&lt;/code&gt; 、及び &lt;code&gt;&lt;a href=&quot;../../types/add_cv&quot;&gt;std::add_cv_t&lt;/a&gt;&amp;lt;std::variant_alternative&amp;lt;I,T&amp;gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7da20d5c8aa15b36c664a144aed60475997a65c7" translate="yes" xml:space="preserve">
          <source>3) meets the &lt;a href=&quot;../../named_req/unarytypetrait&quot;&gt;UnaryTypeTrait&lt;/a&gt; requirements with a BaseCharacteristic of &lt;code&gt;std::integral_constant&amp;lt;std::size_t, variant_size&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;std::integral_constant&amp;lt;std::size_t, variant_size&amp;lt;T&amp;gt;&amp;gt;&lt;/code&gt; BaseCharacteristicで&lt;a href=&quot;../../named_req/unarytypetrait&quot;&gt;UnaryTypeTrait&lt;/a&gt;要件を満たします</target>
        </trans-unit>
        <trans-unit id="f140a0dadbf9861e93c2d7f748cf156f6e335408" translate="yes" xml:space="preserve">
          <source>3) nested types</source>
          <target state="translated">3)入れ子になったタイプ</target>
        </trans-unit>
        <trans-unit id="aace007f9daf107f5ee3d35b2c3626a157b0bafb" translate="yes" xml:space="preserve">
          <source>3) or, if not that, (only in context of initialization by conversion function for direct reference binding of a reference to function type), the return type of F1 is the same kind of reference (lvalue or rvalue) as the reference being initialized, and the return type of F2 is not</source>
          <target state="translated">3)、または、そうでない場合(関数型への参照の直接参照結合のための変換関数による初期化の文脈でのみ)、F1の戻り値の型は、初期化される参照と同じ種類の参照(lvalueまたはrvalue)であり、F2の戻り値の型は</target>
        </trans-unit>
        <trans-unit id="edd8dcf20c7ac7372295c877853c3c50cd4a0d2f" translate="yes" xml:space="preserve">
          <source>3) pointer to user-provided allocation function</source>
          <target state="translated">3)ユーザが提供する割当関数へのポインタ</target>
        </trans-unit>
        <trans-unit id="cf0da5f3045a63172f8ea6c259a1dc694fa07b5f" translate="yes" xml:space="preserve">
          <source>3) private storage: indexed extensible data structure that allows both &lt;code&gt;long&lt;/code&gt; and &lt;code&gt;void*&lt;/code&gt; members, which may be implemented as two arbitrary-length arrays or a single array of two-element structs or another container.</source>
          <target state="translated">3）プライベートストレージ：2つの任意の長さの配列または2つの要素の構造体の単一の配列または別のコンテナーとして実装できる、 &lt;code&gt;long&lt;/code&gt; メンバーと &lt;code&gt;void*&lt;/code&gt; メンバーの両方を許可するインデックス付きの拡張可能なデータ構造。</target>
        </trans-unit>
        <trans-unit id="322b17151b0745396c865a8bac191207b1f57b49" translate="yes" xml:space="preserve">
          <source>3) remainder</source>
          <target state="translated">3)残り</target>
        </trans-unit>
        <trans-unit id="2351f17694b79338b53c2d32168976a4792dffa5" translate="yes" xml:space="preserve">
          <source>3) removes the topmost &lt;code&gt;volatile&lt;/code&gt;.</source>
          <target state="translated">3）一番上の &lt;code&gt;volatile&lt;/code&gt; 取り除きます。</target>
        </trans-unit>
        <trans-unit id="68f693d59bb82f6a335d7b8b6db09b00e73b4ebf" translate="yes" xml:space="preserve">
          <source>3) returns &lt;code&gt;&lt;a href=&quot;../basic_string&quot;&gt;std::u16string&lt;/a&gt;{str, len}&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../basic_string&quot;&gt;std::u16string&lt;/a&gt;{str, len}&lt;/code&gt; {str、len}を返します</target>
        </trans-unit>
        <trans-unit id="41bf597f82b1d1cad984db5bf1743e58d7e7fd73" translate="yes" xml:space="preserve">
          <source>3) returns &lt;code&gt;&lt;a href=&quot;../basic_string_view&quot;&gt;std::u16string_view&lt;/a&gt;{str, len}&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../basic_string_view&quot;&gt;std::u16string_view&lt;/a&gt;{str, len}&lt;/code&gt; {str、len}を返します</target>
        </trans-unit>
        <trans-unit id="7e108ba8ca31bd5a74bfc0038ace97fffddb4d2d" translate="yes" xml:space="preserve">
          <source>3) returns &lt;code&gt;array&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;array&lt;/code&gt; 返す</target>
        </trans-unit>
        <trans-unit id="7de3f2600661414fd71954cabb9a03a6cda6f63d" translate="yes" xml:space="preserve">
          <source>3) returns &lt;code&gt;il.size() == 0&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;il.size() == 0&lt;/code&gt; 返します</target>
        </trans-unit>
        <trans-unit id="f730a2a3ae2515ddc24201563e53cace850bcbe9" translate="yes" xml:space="preserve">
          <source>3) same as (1), but the evaluation of the assignment expression will not call any operation that is not noexcept.</source>
          <target state="translated">3)(1)と同じですが、代入式の評価ではnoexceptではない操作は呼び出されません。</target>
        </trans-unit>
        <trans-unit id="03d5a2a70ee8ca2243558b268e4e4f3b9f09b5aa" translate="yes" xml:space="preserve">
          <source>3) same as (2), but the conversion specified for the as-if printf is &lt;code&gt;f&lt;/code&gt; if &lt;code&gt;fmt&lt;/code&gt; is &lt;a href=&quot;chars_format&quot;&gt;&lt;code&gt;std::chars_format::fixed&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;e&lt;/code&gt; if &lt;code&gt;fmt&lt;/code&gt; is &lt;a href=&quot;chars_format&quot;&gt;&lt;code&gt;std::chars_format::scientific&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;a&lt;/code&gt; (but without leading &quot;0x&quot; in the result) if &lt;code&gt;fmt&lt;/code&gt; is &lt;a href=&quot;chars_format&quot;&gt;&lt;code&gt;std::chars_format::hex&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;g&lt;/code&gt; if &lt;code&gt;fmt&lt;/code&gt; is &lt;a href=&quot;chars_format&quot;&gt;&lt;code&gt;chars_format::general&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">3）（2）が、printf関数であるかのように、のために指定された変換と同じ &lt;code&gt;f&lt;/code&gt; の場合 &lt;code&gt;fmt&lt;/code&gt; IS &lt;a href=&quot;chars_format&quot;&gt; &lt;code&gt;std::chars_format::fixed&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;e&lt;/code&gt; なら &lt;code&gt;fmt&lt;/code&gt; IS &lt;a href=&quot;chars_format&quot;&gt; &lt;code&gt;std::chars_format::scientific&lt;/code&gt; &lt;/a&gt;、（しかし招くことなく、「0X 「IF）結果で &lt;code&gt;fmt&lt;/code&gt; IS &lt;a href=&quot;chars_format&quot;&gt; &lt;code&gt;std::chars_format::hex&lt;/code&gt; &lt;/a&gt;、及び &lt;code&gt;g&lt;/code&gt; 場合 &lt;code&gt;fmt&lt;/code&gt; ある&lt;a href=&quot;chars_format&quot;&gt; &lt;code&gt;chars_format::general&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8ca3056fd191501960dcfeda57e3b77eade0904b" translate="yes" xml:space="preserve">
          <source>3) same as 1), but the destructor is noexcept.</source>
          <target state="translated">3)は1)と同じですが、デストラクタはnoexceptです。</target>
        </trans-unit>
        <trans-unit id="062bfe9955207c02833ad59b374c43c1054ba514" translate="yes" xml:space="preserve">
          <source>3) same as 1), but the variable definition is &lt;code&gt;noexcept&lt;/code&gt;.</source>
          <target state="translated">3）1）と同じですが、変数の定義は &lt;code&gt;noexcept&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="66679282225c2a9805ff609db87b9d14b1b16d41" translate="yes" xml:space="preserve">
          <source>3) same as &lt;code&gt;reduce(first, last, init, &lt;a href=&quot;../utility/functional/plus&quot;&gt;std::plus&lt;/a&gt;&amp;lt;&amp;gt;())&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;reduce(first, last, init, &lt;a href=&quot;../utility/functional/plus&quot;&gt;std::plus&lt;/a&gt;&amp;lt;&amp;gt;())&lt;/code&gt; &lt;a href=&quot;../utility/functional/plus&quot;&gt;std :: plus&lt;/a&gt; &amp;lt;&amp;gt;（））と同じ</target>
        </trans-unit>
        <trans-unit id="493d1c0f698618d6fcf449a293e4e494204001cd" translate="yes" xml:space="preserve">
          <source>3) selection statements;</source>
          <target state="translated">3)選択文。</target>
        </trans-unit>
        <trans-unit id="e40a06b4c4c919cace92ac3e95bd905380d8d850" translate="yes" xml:space="preserve">
          <source>3) sequence of file-names, omitting any directory separators</source>
          <target state="translated">3)ディレクトリセパレータを省略したファイル名のシーケンス</target>
        </trans-unit>
        <trans-unit id="9dab6dd52eb6a5b6430a643119131d10af088428" translate="yes" xml:space="preserve">
          <source>3) sets the &lt;code&gt;adjustfield&lt;/code&gt; of the stream &lt;code&gt;str&lt;/code&gt; to &lt;code&gt;internal&lt;/code&gt; as if by calling &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::internal&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::adjustfield&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">3）設定 &lt;code&gt;adjustfield&lt;/code&gt; ストリームの &lt;code&gt;str&lt;/code&gt; する &lt;code&gt;internal&lt;/code&gt; 呼び出したかのように &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::internal&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::adjustfield&lt;/a&gt;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a030f7757853bd064515368512146c6208e9c3a5" translate="yes" xml:space="preserve">
          <source>3) sets the &lt;code&gt;basefield&lt;/code&gt; of the stream &lt;code&gt;str&lt;/code&gt; to &lt;code&gt;oct&lt;/code&gt; as if by calling &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::oct&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::basefield&lt;/a&gt;)&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;str.setf(&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::oct&lt;/a&gt;, &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std::ios_base::basefield&lt;/a&gt;)&lt;/code&gt; &lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: oct&lt;/a&gt;、&lt;a href=&quot;../ios_base/fmtflags&quot;&gt;std :: ios_base :: basefield&lt;/a&gt;）を呼び出すかのように、ストリーム &lt;code&gt;str&lt;/code&gt; の &lt;code&gt;basefield&lt;/code&gt; を &lt;code&gt;oct&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="8b9f444b741cfcacfcfa162ebe7a6d19a187794e" translate="yes" xml:space="preserve">
          <source>3) the constructor or the destructor of a static or thread-local object throws an exception</source>
          <target state="translated">3)静的またはスレッドローカルなオブジェクトのコンストラクタまたはデストラクタが例外をスローする。</target>
        </trans-unit>
        <trans-unit id="d3a14c2c25daeecf9721e0c14c79c2509890a20e" translate="yes" xml:space="preserve">
          <source>3) the integral number of seconds &lt;code&gt;since_midnight&lt;/code&gt; is after &lt;code&gt;(00:00:00 + hours() + minutes())&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;since_midnight&lt;/code&gt; が &lt;code&gt;(00:00:00 + hours() + minutes())&lt;/code&gt; 後の整数秒。</target>
        </trans-unit>
        <trans-unit id="ae09ff8d6024c2ce661567593dee2e65e0a180e2" translate="yes" xml:space="preserve">
          <source>3) the number of initializer-clauses exceeds the number of elements to initialize.</source>
          <target state="translated">3)イニシャライザークローの数が初期化する要素の数を超えている。</target>
        </trans-unit>
        <trans-unit id="99f391f7d7fd6d3e3aed88d7abe41b7608b6acbc" translate="yes" xml:space="preserve">
          <source>3) the prefix is a C-style string</source>
          <target state="translated">3)接頭辞がC言語の文字列であること</target>
        </trans-unit>
        <trans-unit id="ff4d37a601705f3d7c6ad760cc78a5d303d9b145" translate="yes" xml:space="preserve">
          <source>3) the prefix is a C-style string. Effectively returns &lt;code&gt;starts_with(basic_string_view(x))&lt;/code&gt;</source>
          <target state="translated">3）接頭辞はCスタイルの文字列です。事実上、 &lt;code&gt;starts_with(basic_string_view(x))&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="f0e9f99a03ccb78d7ba37682df275e5edfbc0f81" translate="yes" xml:space="preserve">
          <source>3) the suffix is a C-style string</source>
          <target state="translated">3)サフィックスがC言語の文字列であること</target>
        </trans-unit>
        <trans-unit id="90859d09b3d3abd69f86a6ae803a432705ce263f" translate="yes" xml:space="preserve">
          <source>3) the suffix is a C-style string. Effectively returns &lt;code&gt;ends_with(basic_string_view(x))&lt;/code&gt;</source>
          <target state="translated">3）接尾辞はCスタイルの文字列です。事実上、 &lt;code&gt;ends_with(basic_string_view(x))&lt;/code&gt; を返します</target>
        </trans-unit>
        <trans-unit id="30c54d48beb81bd741cbc614ddde246ff002abb9" translate="yes" xml:space="preserve">
          <source>3) throw exception of type &lt;code&gt;&lt;a href=&quot;bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; or derived from &lt;code&gt;&lt;a href=&quot;bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; 型の例外、または &lt;code&gt;&lt;a href=&quot;bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; から派生した例外をスローします。</target>
        </trans-unit>
        <trans-unit id="c4477776429f85888df04e99879179c77664579a" translate="yes" xml:space="preserve">
          <source>3) void specialization, used to communicate stateless events</source>
          <target state="translated">3)void の特殊化、ステートレスイベントの通信に使用される</target>
        </trans-unit>
        <trans-unit id="f7a2a2b99877d43ec11afa3802d7fabc4254a28b" translate="yes" xml:space="preserve">
          <source>3) when &lt;a href=&quot;operator_other#Built-in_function_call_operator&quot;&gt;passing an argument&lt;/a&gt; to a function by value</source>
          <target state="translated">3）関数に&lt;a href=&quot;operator_other#Built-in_function_call_operator&quot;&gt;引数&lt;/a&gt;を値で渡す場合</target>
        </trans-unit>
        <trans-unit id="ca998f5ae7afbeb398d907d4e1568527eb4c8fbf" translate="yes" xml:space="preserve">
          <source>3) when a &lt;a href=&quot;../memory/new/operator_delete&quot;&gt;placement operator delete&lt;/a&gt; that is a function template specialization is selected to match a placement operator new</source>
          <target state="translated">3）関数テンプレートの特殊化である&lt;a href=&quot;../memory/new/operator_delete&quot;&gt;配置演算子削除&lt;/a&gt;が、配置演算子newと一致するように選択された場合</target>
        </trans-unit>
        <trans-unit id="ba5d76df1540f5a2ad7124efb079b6d27a6bcdee" translate="yes" xml:space="preserve">
          <source>3) when a base class or a non-static data member is not mentioned in a constructor &lt;a href=&quot;constructor&quot;&gt;initializer list&lt;/a&gt; and that constructor is called.</source>
          <target state="translated">3）基本クラスまたは非静的データメンバーがコンストラクター&lt;a href=&quot;constructor&quot;&gt;初期化子リスト&lt;/a&gt;に記述されておらず、そのコンストラクターが呼び出された場合。</target>
        </trans-unit>
        <trans-unit id="88a8d15a551fe11ceb9affb6bfc4fea786e0d27b" translate="yes" xml:space="preserve">
          <source>3) within &lt;a href=&quot;data_members#Member_initialization&quot;&gt;default member initializer&lt;/a&gt;(since C++11)</source>
          <target state="translated">3）&lt;a href=&quot;data_members#Member_initialization&quot;&gt;デフォルトのメンバー初期化子&lt;/a&gt;内（C ++ 11以降）</target>
        </trans-unit>
        <trans-unit id="003ed6baf0ee44b4225c9005067d80bc0fd7c3a1" translate="yes" xml:space="preserve">
          <source>3) zero or one</source>
          <target state="translated">3)ゼロまたは1</target>
        </trans-unit>
        <trans-unit id="80a03ff972d6d894bbb0e1e9623570323fe77a56" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;../../language/converting_constructor&quot;&gt;Converting constructor&lt;/a&gt;. Constructs the object from a complex number of a different type.</source>
          <target state="translated">3）&lt;a href=&quot;../../language/converting_constructor&quot;&gt;変換コンストラクター&lt;/a&gt;。異なる型の複素数からオブジェクトを構築します。</target>
        </trans-unit>
        <trans-unit id="34ebe71d05fa1515274916febf5c9aa334da85c4" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;../../language/copy_constructor&quot;&gt;Copy constructor&lt;/a&gt;. Constructs the container with the copy of the contents of &lt;code&gt;other&lt;/code&gt;. If &lt;code&gt;alloc&lt;/code&gt; is not provided, allocator is obtained by calling &lt;code&gt;&lt;a href=&quot;../../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::select_on_container_copy_construction(other.get_allocator())&lt;/code&gt;.</source>
          <target state="translated">3）&lt;a href=&quot;../../language/copy_constructor&quot;&gt;コンストラクターをコピーし&lt;/a&gt;ます。 &lt;code&gt;other&lt;/code&gt; の内容のコピーでコンテナを構築します。場合 &lt;code&gt;alloc&lt;/code&gt; 設けられていない、アロケータを呼び出すことによって取得された &lt;code&gt;&lt;a href=&quot;../../memory/allocator_traits&quot;&gt;std::allocator_traits&lt;/a&gt;&amp;lt;allocator_type&amp;gt;::select_on_container_copy_construction(other.get_allocator())&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f2930629e5508933cf0fbf8a631b540b919d2a22" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;../memory/new/operator_new&quot;&gt;allocation function&lt;/a&gt;;</source>
          <target state="translated">3）&lt;a href=&quot;../memory/new/operator_new&quot;&gt;割り当て関数&lt;/a&gt; ;</target>
        </trans-unit>
        <trans-unit id="0a60eec6ef68d32907f86128f2d9f998e1595759" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;access&quot;&gt;Access specifiers&lt;/a&gt;&lt;code&gt;public:&lt;/code&gt;, &lt;code&gt;protected:&lt;/code&gt;, and &lt;code&gt;private:&lt;/code&gt;</source>
          <target state="translated">3）&lt;a href=&quot;access&quot;&gt;アクセス指定子&lt;/a&gt; &lt;code&gt;public:&lt;/code&gt; 、 &lt;code&gt;protected:&lt;/code&gt; 、 &lt;code&gt;private:&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ea5b006c914513406213f5f5f6569ad1d6471537" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;for&quot;&gt;for&lt;/a&gt; loop;</source>
          <target state="translated">3）&lt;a href=&quot;for&quot;&gt;for&lt;/a&gt;ループ;</target>
        </trans-unit>
        <trans-unit id="3f914731c94ec7072589bdea0eb1de05a4fb29fa" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;namespace#Unnamed_namespaces&quot;&gt;Unnamed namespace definition&lt;/a&gt;. Its members have potential scope from their point of declaration to the end of the translation unit, and have &lt;a href=&quot;storage_duration&quot;&gt;internal linkage&lt;/a&gt;.</source>
          <target state="translated">3）&lt;a href=&quot;namespace#Unnamed_namespaces&quot;&gt;名前のない名前空間の定義&lt;/a&gt;。そのメンバーは、宣言の時点から翻訳単位の終わりまで潜在的な範囲を持ち、&lt;a href=&quot;storage_duration&quot;&gt;内部リンク&lt;/a&gt;を持っています。</target>
        </trans-unit>
        <trans-unit id="24d0238fcca8074356e620b3e61cf1c23e9e578a" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;operator_alternative&quot;&gt;Trigraph sequences&lt;/a&gt; are replaced by corresponding single-character representations.</source>
          <target state="translated">3）&lt;a href=&quot;operator_alternative&quot;&gt;トリグラフシーケンス&lt;/a&gt;は、対応する単一文字表現に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="186935f90c2a2d47aa24834883a2b6cf13d0e96a" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;parameter_pack&quot;&gt;Parameter pack&lt;/a&gt;, only appears in &lt;a href=&quot;function#Parameter_list&quot;&gt;parameter declarations&lt;/a&gt;.</source>
          <target state="translated">3）&lt;a href=&quot;parameter_pack&quot;&gt;パラメータパック&lt;/a&gt;。&lt;a href=&quot;function#Parameter_list&quot;&gt;パラメータ宣言に&lt;/a&gt;のみ表示されます。</target>
        </trans-unit>
        <trans-unit id="8ac9cefd36a7e8cb498276532e1236485f6fe0c8" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;return&quot;&gt;return&lt;/a&gt; statement with an optional expression;</source>
          <target state="translated">3）オプションの式を含むステートメントを&lt;a href=&quot;return&quot;&gt;返す&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0d5704a9796efaca386f916b15a809d3bad39fd9" translate="yes" xml:space="preserve">
          <source>3)&lt;a href=&quot;switch&quot;&gt;switch&lt;/a&gt; statement.</source>
          <target state="translated">3）&lt;a href=&quot;switch&quot;&gt;switch&lt;/a&gt;ステートメント。</target>
        </trans-unit>
        <trans-unit id="cb94de0bcb8492e48f1dc19ce4b95eb2fe7ea34a" translate="yes" xml:space="preserve">
          <source>3)&lt;b&gt;Conversion&lt;/b&gt;: integral conversion, floating-point conversion, floating-integral conversion, pointer conversion, pointer-to-member conversion, boolean conversion, user-defined conversion of a derived class to its base</source>
          <target state="translated">3）&lt;b&gt;変換&lt;/b&gt;：整数変換、浮動小数点変換、浮動小数点整数変換、ポインター変換、ポインターからメンバーへの変換、ブール変換、派生クラスからそのベースへのユーザー定義変換</target>
        </trans-unit>
        <trans-unit id="b1fc0b76711dae95edf8d9e2aad2b35ac1298f6f" translate="yes" xml:space="preserve">
          <source>3)&lt;b&gt;Read-write coherence&lt;/b&gt;: if a value computation A of some atomic M (a read)</source>
          <target state="translated">3）&lt;b&gt;読み書きコヒーレンス&lt;/b&gt;：ある原子M（読み取り）の値計算​​A</target>
        </trans-unit>
        <trans-unit id="0f479b86781470652259f260d7283ed76366bc7e" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&amp;amp;a[i] != &amp;amp;b[j]&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&amp;amp;a[i] != &amp;amp;b[j]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="daf6e681ae9fc502f0178f2bf8f9b8378995ef59" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;*this&lt;/code&gt;</source>
          <target state="translated">3)&lt;code&gt;*this&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="11b6284f44475577270c81f0fcc53c5bc937506a" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;pos &amp;gt; other.size()&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;pos &amp;gt; other.size()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="80be02499b71a5b42a6ad2cd00ad202c75cd9f8a" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; if &lt;code&gt;pos &amp;gt; str.size()&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;../../error/invalid_argument/invalid_argument&quot;&gt;std::invalid_argument&lt;/a&gt;&lt;/code&gt; if any character is not one or zero</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../../error/out_of_range/out_of_range&quot;&gt;std::out_of_range&lt;/a&gt;&lt;/code&gt; 場合 &lt;code&gt;pos &amp;gt; str.size()&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;../../error/invalid_argument/invalid_argument&quot;&gt;std::invalid_argument&lt;/a&gt;&lt;/code&gt; 任意の文字は、1または0でない場合</target>
        </trans-unit>
        <trans-unit id="ee0ee61edbc835898bbe9e881b557190690360d9" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&lt;a href=&quot;../../error/system_error&quot;&gt;std::system_error&lt;/a&gt;&lt;/code&gt; if the thread could not be started. The exception may represent the error condition &lt;code&gt;std::errc::resource_unavailable_try_again&lt;/code&gt; or another implementation-specific error condition.</source>
          <target state="translated">3）スレッドを開始できなかった場合は &lt;code&gt;&lt;a href=&quot;../../error/system_error&quot;&gt;std::system_error&lt;/a&gt;&lt;/code&gt; 。例外は、エラー条件 &lt;code&gt;std::errc::resource_unavailable_try_again&lt;/code&gt; または別の実装固有のエラー条件を表す場合があります。</target>
        </trans-unit>
        <trans-unit id="04b6bddd10bd85f982b7c7e02fa8e5ec50c3bb97" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&lt;a href=&quot;../../utility/functional/less&quot;&gt;std::less&lt;/a&gt;&amp;lt;V&amp;gt;()(lhs.get(), rhs.get())&lt;/code&gt;, where V is the &lt;a href=&quot;../../language/operator_comparison#Pointer_comparison_operators&quot;&gt;composite pointer type&lt;/a&gt; of &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;::element_type*&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;U&amp;gt;::element_type*&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../../utility/functional/less&quot;&gt;std::less&lt;/a&gt;&amp;lt;V&amp;gt;()(lhs.get(), rhs.get())&lt;/code&gt; 、ここでVは &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;T&amp;gt;::element_type*&lt;/code&gt; &amp;lt;T&amp;gt; :: element_type *および &lt;code&gt;&lt;a href=&quot;../shared_ptr&quot;&gt;std::shared_ptr&lt;/a&gt;&amp;lt;U&amp;gt;::element_type*&lt;/code&gt; &amp;lt;の&lt;a href=&quot;../../language/operator_comparison#Pointer_comparison_operators&quot;&gt;複合ポインター型&lt;/a&gt;ですU&amp;gt; :: element_type *</target>
        </trans-unit>
        <trans-unit id="b2ff6b581a992bc5ed00241f6be98110fc897f2c" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&lt;a href=&quot;../c/ungetc&quot;&gt;std::ungetc&lt;/a&gt;(c, f)&lt;/code&gt; and &lt;code&gt;str.rdbuf()-&amp;gt;sputbackc(c)&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../c/ungetc&quot;&gt;std::ungetc&lt;/a&gt;(c, f)&lt;/code&gt; および &lt;code&gt;str.rdbuf()-&amp;gt;sputbackc(c)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="12c4fe0dced8910c1ebe55544adc6ae1452c2cc4" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&lt;a href=&quot;../day&quot;&gt;std::chrono::day&lt;/a&gt;(unsigned(d) - ds.count())&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../day&quot;&gt;std::chrono::day&lt;/a&gt;(unsigned(d) - ds.count())&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a68e58864d24db1442e3fbde87a9c0a831b953b8" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&lt;a href=&quot;../new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; if required additional memory could not be obtained. May throw implementation-defined exception for other errors. &lt;code&gt;delete ptr&lt;/code&gt; if &lt;code&gt;T&lt;/code&gt; is not an array type, &lt;code&gt;delete[] ptr&lt;/code&gt; otherwise)(since C++17) is called if an exception occurs.</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../new/bad_alloc&quot;&gt;std::bad_alloc&lt;/a&gt;&lt;/code&gt; 必要な追加メモリを取得できなかった場合。他のエラーの場合、実装定義の例外をスローする可能性があります。 &lt;code&gt;T&lt;/code&gt; が配列型でない場合は &lt;code&gt;delete ptr&lt;/code&gt; 、それ以外の場合は &lt;code&gt;delete[] ptr&lt;/code&gt; ）（C ++ 17以降）例外が発生した場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="af5d815259c3b60276bf884c88405bc53b10a777" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&lt;a href=&quot;../year&quot;&gt;std::chrono::year&lt;/a&gt;(int(y) - ys.count())&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;../year&quot;&gt;std::chrono::year&lt;/a&gt;(int(y) - ys.count())&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="22376aa5bc2befa5e18854f733111daf08cf9111" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;&lt;a href=&quot;get_id&quot;&gt;get_id()&lt;/a&gt;&lt;/code&gt; not equal to &lt;code&gt;&lt;a href=&quot;id&quot;&gt;std::thread::id()&lt;/a&gt;&lt;/code&gt; (i.e. &lt;code&gt;&lt;a href=&quot;joinable&quot;&gt;joinable&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;)</source>
          <target state="translated">3） &lt;code&gt;&lt;a href=&quot;get_id&quot;&gt;get_id()&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;id&quot;&gt;std::thread::id()&lt;/a&gt;&lt;/code&gt; と等しくない（つまり、 &lt;code&gt;&lt;a href=&quot;joinable&quot;&gt;joinable&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; である）</target>
        </trans-unit>
        <trans-unit id="00464795ad06ca2789a7eb293b09e4790d31f33f" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;bitset&amp;lt;N&amp;gt;(lhs) ^= rhs&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;bitset&amp;lt;N&amp;gt;(lhs) ^= rhs&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="54676b88618d9bf0a4f1322beff074c3d0b3a270" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;cmp &amp;lt; 0&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;cmp &amp;lt; 0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="03cbcb175c6041d32cc33d77f7d3646888c1168f" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;find_if&lt;/code&gt; searches for an element for which predicate &lt;code&gt;p&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;find_if&lt;/code&gt; は、述語 &lt;code&gt;p&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返す要素を検索します</target>
        </trans-unit>
        <trans-unit id="10c799d009d312c8c1e7d60be1224553fe978d1a" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;from_stream(is, fmt.c_str(), tp, nullptr, &amp;amp;offset)&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;from_stream(is, fmt.c_str(), tp, nullptr, &amp;amp;offset)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91aa2433cb57e87ad1fedf9d9afb1081fd513bc3" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;int(x) &amp;lt; int(y)&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;int(x) &amp;lt; int(y)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7ee42b1e4054bff3d4bc18fbb76e88e170b2c7ca" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;lhs.base() &amp;gt; rhs.base()&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;lhs.base() &amp;gt; rhs.base()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8fe1c79e81a8df8bd999c7bb3f74c1117d4d23ab" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;lhs.base() &amp;lt; rhs.base()&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;lhs.base() &amp;lt; rhs.base()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e67819b5769ff9ce78e7a0f8090966cdd8db4eda" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;log(c.size()) + c.count(k)&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;log(c.size()) + c.count(k)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3043b605bf8664d093a88682bdeb768f76394119" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;obj-&amp;gt;compare_exchange_weak(*expected, desired, succ, fail)&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;obj-&amp;gt;compare_exchange_weak(*expected, desired, succ, fail)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="70be4c4f47064bf34fe1b11183a074306e30992d" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;std::future&lt;/code&gt; is not &lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructible&lt;/a&gt;.</source>
          <target state="translated">3） &lt;code&gt;std::future&lt;/code&gt; は&lt;a href=&quot;../../named_req/copyconstructible&quot;&gt;CopyConstructibleで&lt;/a&gt;はありません。</target>
        </trans-unit>
        <trans-unit id="ad543b3625d76ef9b046adbca5547f55a88e8121" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;*this&lt;/code&gt; is less than &lt;code&gt;rhs&lt;/code&gt; as defined by the order of &lt;code&gt;this&lt;/code&gt; and &lt;code&gt;&amp;amp;rhs&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;true&lt;/code&gt; 場合 &lt;code&gt;*this&lt;/code&gt; 未満で &lt;code&gt;rhs&lt;/code&gt; の順序によって定義される &lt;code&gt;this&lt;/code&gt; と &lt;code&gt;&amp;amp;rhs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a88814c75f464c72593230dad55ac4babb59c5a8" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs.category() &amp;lt; rhs.category()&lt;/code&gt;. Otherwise, &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs.category() == rhs.category() &amp;amp;&amp;amp; lhs.value() &amp;lt; rhs.value()&lt;/code&gt;. Otherwise, &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;lhs.category() &amp;lt; rhs.category()&lt;/code&gt; 場合は &lt;code&gt;true&lt;/code&gt; 。それ以外の場合、 &lt;code&gt;lhs.category() == rhs.category() &amp;amp;&amp;amp; lhs.value() &amp;lt; rhs.value()&lt;/code&gt; 場合は &lt;code&gt;true&lt;/code&gt; です。それ以外の場合は、 &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c72507023428e56ff45ee7b56e7dd4f83b81a696" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs.category() &amp;lt; rhs.category()&lt;/code&gt;. Otherwise, &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;lhs.category() == rhs.category() &amp;amp;&amp;amp; lhs.value() &amp;lt; rhs.value()&lt;/code&gt;. Otherwise, &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">3） &lt;code&gt;lhs.category() &amp;lt; rhs.category()&lt;/code&gt; 場合は &lt;code&gt;true&lt;/code&gt; 。それ以外の場合、 &lt;code&gt;lhs.category() == rhs.category() &amp;amp;&amp;amp; lhs.value() &amp;lt; rhs.value()&lt;/code&gt; 場合は &lt;code&gt;true&lt;/code&gt; です。それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa77abcbdcd2f48d164e5dd8000ad38d0f0cb146" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;true&lt;/code&gt; if &lt;code&gt;path() &amp;lt; rhs.path()&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">3） &lt;code&gt;path() &amp;lt; rhs.path()&lt;/code&gt; 場合は &lt;code&gt;true&lt;/code&gt; 、それ以外の場合は &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee302b109c618e0a780fe3b5fbe71a7826b5e330" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;true&lt;/code&gt; if none of the bits are set to &lt;code&gt;true&lt;/code&gt;, otherwise &lt;code&gt;false&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;true&lt;/code&gt; ビットも &lt;code&gt;true&lt;/code&gt; に設定されていない場合はtrue、それ以外の場合は &lt;code&gt;false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7eaa355954b88254373deea6dae34705f8d24530" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;true&lt;/code&gt; if the &lt;code&gt;lhs&lt;/code&gt; refers to time point</source>
          <target state="translated">3） &lt;code&gt;lhs&lt;/code&gt; が時点を指す場合は &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9c102c6444ed9fc5851c91a8e4dc902adc0590c" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;true&lt;/code&gt; if the contents of the &lt;code&gt;lhs&lt;/code&gt; are lexicographically</source>
          <target state="translated">3） &lt;code&gt;lhs&lt;/code&gt; の内容が辞書式順序であれば &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1dd7a248be501a4042d715962342e1a95b29904f" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;unsigned(x) &amp;lt; unsigned(y)&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;unsigned(x) &amp;lt; unsigned(y)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9e2d0cf46781a3fb477eea2995343c50cf9b536b" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;x.date() &amp;lt; y.date()&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;x.date() &amp;lt; y.date()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f089b779b450b4bef75dc0cf56ee5679085489e9" translate="yes" xml:space="preserve">
          <source>3)&lt;code&gt;x.month() &amp;lt; y.month() || (x.month() == y.month() &amp;amp;&amp;amp; x.day() &amp;lt; y.day())&lt;/code&gt;</source>
          <target state="translated">3） &lt;code&gt;x.month() &amp;lt; y.month() || (x.month() == y.month() &amp;amp;&amp;amp; x.day() &amp;lt; y.day())&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
