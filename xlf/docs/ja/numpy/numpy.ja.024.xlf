<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="numpy">
    <body>
      <group id="numpy">
        <trans-unit id="97ab86f3d69d58ce3be53a871603ed078f8824cf" translate="yes" xml:space="preserve">
          <source>To describe the type of scalar data, there are several &lt;a href=&quot;arrays.scalars#arrays-scalars-built-in&quot;&gt;built-in scalar types&lt;/a&gt; in NumPy for various precision of integers, floating-point numbers, &lt;em&gt;etc&lt;/em&gt;. An item extracted from an array, &lt;em&gt;e.g.&lt;/em&gt;, by indexing, will be a Python object whose type is the scalar type associated with the data type of the array.</source>
          <target state="translated">スカラーデータのタイプを説明するために、NumPyには、整数、浮動小数点数&lt;em&gt;などの&lt;/em&gt;さまざまな精度の&lt;a href=&quot;arrays.scalars#arrays-scalars-built-in&quot;&gt;組み込みスカラータイプ&lt;/a&gt;がいくつかあります。アレイから抽出された項目は、&lt;em&gt;例えば&lt;/em&gt;、索引付けすることによって、その型配列のデータ型に関連付けられているスカラ型であるPythonオブジェクトあろう。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="44e1fab9f28a4fa50d8975e0a1e46a2e64c1e9dc" translate="yes" xml:space="preserve">
          <source>To determine the type of an array, look at the dtype attribute:</source>
          <target state="translated">配列の型を決定するには、dtype属性を見てください。</target>
        </trans-unit>
        <trans-unit id="9f971fbdece5884152a2421faf1e4b6e44db96d0" translate="yes" xml:space="preserve">
          <source>To disable this behaviour and force NumPy to print the entire array, you can change the printing options using &lt;code&gt;set_printoptions&lt;/code&gt;.</source>
          <target state="translated">この動作を無効にして、NumPyに配列全体を強制的に印刷させるには、 &lt;code&gt;set_printoptions&lt;/code&gt; を使用して印刷オプションを変更できます。</target>
        </trans-unit>
        <trans-unit id="42815d30b39c91ade5f76679c62182278601bee8" translate="yes" xml:space="preserve">
          <source>To do buffered reduction requires yet another adjustment during the setup. Normally the iterator construction involves copying the first buffer of data from the readable arrays into the buffer. Any reduction operand is readable, so it may be read into a buffer. Unfortunately, initialization of the operand after this buffering operation is complete will not be reflected in the buffer that the iteration starts with, and garbage results will be produced.</source>
          <target state="translated">バッファ付きリダクションを行うには、セットアップ中にさらに別の調整が必要になります。通常、イテレータの構築では、読み出し可能な配列からバッファにデータの最初のバッファをコピーすることを含みます。任意のリダクションオペランドは可読なので、バッファに読み込まれても構いません。残念ながら、このバッファリング操作が完了した後のオペランドの初期化は、イテレータが開始するバッファに反映されず、ガベージ結果が発生します。</target>
        </trans-unit>
        <trans-unit id="7bb73bf7d0560f6eb01b8f605dab2705b707dec2" translate="yes" xml:space="preserve">
          <source>To do this we need two files. The first is the C file which contains the actual code, and the second is the setup.py file used to create the module.</source>
          <target state="translated">これを行うには、2つのファイルが必要です。1つ目は実際のコードを含むCファイルで、2つ目はモジュールを作成するためのsetup.pyファイルです。</target>
        </trans-unit>
        <trans-unit id="2a3fff7f3035206492b3a95d3cbf852432de0dee" translate="yes" xml:space="preserve">
          <source>To enable and control broadcasting, use an ellipsis. Default NumPy-style broadcasting is done by adding an ellipsis to the left of each term, like &lt;code&gt;np.einsum('...ii-&amp;gt;...i', a)&lt;/code&gt;. To take the trace along the first and last axes, you can do &lt;code&gt;np.einsum('i...i', a)&lt;/code&gt;, or to do a matrix-matrix product with the left-most indices instead of rightmost, one can do &lt;code&gt;np.einsum('ij...,jk...-&amp;gt;ik...', a, b)&lt;/code&gt;.</source>
          <target state="translated">ブロードキャストを有効にして制御するには、省略記号を使用します。デフォルトのNumPyスタイルのブロードキャストは、 &lt;code&gt;np.einsum('...ii-&amp;gt;...i', a)&lt;/code&gt; ように、各用語の左側に省略記号を追加することによって行われます。最初と最後の軸に沿ってトレースを取得するには、 &lt;code&gt;np.einsum('i...i', a)&lt;/code&gt; を実行するか、右端ではなく左端のインデックスを使用して行列-行列積を実行することができます &lt;code&gt;np.einsum('ij...,jk...-&amp;gt;ik...', a, b)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="73e17138c97818c1d4c0e646e333300b5a17a016" translate="yes" xml:space="preserve">
          <source>To enforce summaries when doing merges (&lt;code&gt;~/.gitconfig&lt;/code&gt; file again):</source>
          <target state="translated">マージを実行するときに要約を適用するには（ &lt;code&gt;~/.gitconfig&lt;/code&gt; ファイルを再度）：</target>
        </trans-unit>
        <trans-unit id="03b64a95ca31ed1440ed9609a8efdae966875477" translate="yes" xml:space="preserve">
          <source>To ensure all elements within an &lt;code&gt;object&lt;/code&gt; array are copied, use &lt;a href=&quot;https://docs.python.org/dev/library/copy.html#copy.deepcopy&quot;&gt;&lt;code&gt;copy.deepcopy&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;object&lt;/code&gt; 配列内のすべての要素が確実にコピーされるようにするには、&lt;a href=&quot;https://docs.python.org/dev/library/copy.html#copy.deepcopy&quot;&gt; &lt;code&gt;copy.deepcopy&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="e7550453146cba531db73646e9c8ba39942085d8" translate="yes" xml:space="preserve">
          <source>To ensure that your code does not have to be compiled for a specific NumPy version, you may add a constant, leaving room for changes in NumPy. A solution guaranteed to be compatible with any future NumPy version requires the use of a runtime calculate offset and allocation size.</source>
          <target state="translated">特定のNumPyのバージョンに合わせてコードをコンパイルする必要がないようにするには、定数を追加してNumPyの変更に対応する余地を残しておくとよい。将来のあらゆるNumPyバージョンとの互換性を保証する解決策は、実行時計算オフセットとアロケーション・サイズの使用を必要とする。</target>
        </trans-unit>
        <trans-unit id="56d44cf88fb39b36da11cf8bbe02f976134b23c7" translate="yes" xml:space="preserve">
          <source>To facilitate easy matching of array shapes with expressions and in assignments, the np.newaxis object can be used within array indices to add new dimensions with a size of 1. For example:</source>
          <target state="translated">配列形状を式や代入で簡単にマッチングさせるために、配列インデックス内でnp.newaxisオブジェクトを使用して、サイズが1の新しい次元を追加することができます。 例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="09fc0ca575462761f878d637a2fecf46e1ccd71c" translate="yes" xml:space="preserve">
          <source>To facilitate this many similar unit tests, some high-level programming techniques are employed, including C and &lt;a href=&quot;http://www.swig.org&quot;&gt;SWIG&lt;/a&gt; macros, as well as Python inheritance. The purpose of this document is to describe the testing infrastructure employed to verify that the &lt;code&gt;numpy.i&lt;/code&gt; typemaps are working as expected.</source>
          <target state="translated">この多くの同様の単体テストを容易にするために、Pythonの継承だけでなく、Cおよび&lt;a href=&quot;http://www.swig.org&quot;&gt;SWIG&lt;/a&gt;マクロを含むいくつかの高レベルのプログラミング手法が採用されています。このドキュメントの目的は、 &lt;code&gt;numpy.i&lt;/code&gt; タイプマップが期待どおりに機能していることを確認するために採用されているテストインフラストラクチャについて説明することです。</target>
        </trans-unit>
        <trans-unit id="df1248d3a4c3c276bf78a49ecea34ca2333414db" translate="yes" xml:space="preserve">
          <source>To find how many valid days there are in a specified range of datetime64 dates, use &lt;a href=&quot;generated/numpy.busday_count#numpy.busday_count&quot;&gt;&lt;code&gt;busday_count&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">指定されたdatetime64日付の範囲に有効な日数を見つけるには、&lt;a href=&quot;generated/numpy.busday_count#numpy.busday_count&quot;&gt; &lt;code&gt;busday_count&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="319db282e290412afdbf4c23744ae53a90ac551e" translate="yes" xml:space="preserve">
          <source>To find the number of dimensions of the array, run:</source>
          <target state="translated">配列の次元数を求めるには、実行します。</target>
        </trans-unit>
        <trans-unit id="f3533d0798888b92292cdc274cd5cbd4e7bdef89" translate="yes" xml:space="preserve">
          <source>To find the total number of elements in the array, run:</source>
          <target state="translated">配列の要素数の合計を求めるには、実行します。</target>
        </trans-unit>
        <trans-unit id="381cf7b173efa6d304977d6f48b6eab1589b8ebf" translate="yes" xml:space="preserve">
          <source>To find the union of more than two arrays, use functools.reduce:</source>
          <target state="translated">2つ以上の配列の和を見つけるには、functools.reduceを使用します。</target>
        </trans-unit>
        <trans-unit id="f20ef83823da30eba7178dbce314c99b1ef83b27" translate="yes" xml:space="preserve">
          <source>To get a feel for writing custom array containers, we&amp;rsquo;ll begin with a simple example that has rather narrow utility but illustrates the concepts involved.</source>
          <target state="translated">カスタム配列コンテナの作成の感触をつかむために、ユーティリティがかなり狭いが、関連する概念を説明する簡単な例から始めます。</target>
        </trans-unit>
        <trans-unit id="e3a3751da83fe0d7f7a6c4230ed886f73729cca0" translate="yes" xml:space="preserve">
          <source>To get back to a plain ndarray both the dtype and type must be reset. The following view does so, taking into account the unusual case that the recordarr was not a structured type:</source>
          <target state="translated">プレーンなndarrayに戻すには、dtypeとtypeの両方をリセットしなければなりません。以下のビューでは、recordarrが構造化型ではないという珍しいケースを考慮してリセットしています。</target>
        </trans-unit>
        <trans-unit id="4469a3b55f422122d26688e1424f485904a4794e" translate="yes" xml:space="preserve">
          <source>To get the indices of unique values in a NumPy array (an array of first index positions of unique values in the array), just pass the &lt;code&gt;return_index&lt;/code&gt; argument in &lt;code&gt;np.unique()&lt;/code&gt; as well as your array.</source>
          <target state="translated">NumPy配列（配列内の一意の値の最初のインデックス位置の配列）内の一意の値のインデックスを &lt;code&gt;return_index&lt;/code&gt; するには、 &lt;code&gt;np.unique()&lt;/code&gt; のreturn_index引数と配列を渡すだけです。</target>
        </trans-unit>
        <trans-unit id="f05508b4b1612d928370bd8d22c78ce6740d7d75" translate="yes" xml:space="preserve">
          <source>To get the necessary information for the npymath library from NumPy:</source>
          <target state="translated">npymathライブラリに必要な情報をNumPyから取得する。</target>
        </trans-unit>
        <trans-unit id="6b92fc58e63db5aa668493a43f6017a9433c467a" translate="yes" xml:space="preserve">
          <source>To get the unique rows, index position, and occurrence count, you can use:</source>
          <target state="translated">ユニークな行、インデックスの位置、発生数を取得するには</target>
        </trans-unit>
        <trans-unit id="8cb65420b2ca2983f196bbc9804b56531579abff" translate="yes" xml:space="preserve">
          <source>To group the indices by element, rather than dimension, use &lt;a href=&quot;numpy.argwhere#numpy.argwhere&quot;&gt;&lt;code&gt;argwhere&lt;/code&gt;&lt;/a&gt;, which returns a row for each non-zero element.</source>
          <target state="translated">次元ではなく要素ごとにインデックスをグループ化するには、&lt;a href=&quot;numpy.argwhere#numpy.argwhere&quot;&gt; &lt;code&gt;argwhere&lt;/code&gt; を&lt;/a&gt;使用します。これは、ゼロ以外の各要素の行を返します。</target>
        </trans-unit>
        <trans-unit id="dd77da9e3cc0e1b206296360b148e66d7e5bf3e1" translate="yes" xml:space="preserve">
          <source>To group the indices by element, rather than dimension, use instead:</source>
          <target state="translated">インデックスを次元ではなく要素ごとにグループ化するには、代わりに使用します。</target>
        </trans-unit>
        <trans-unit id="ee4cd0adbfaa4d4a1d76673c36c93886ead4c8dd" translate="yes" xml:space="preserve">
          <source>To have a particular script file executed when the interactive Python interpreter is started, define the &lt;code&gt;PYTHONSTARTUP&lt;/code&gt; environment variable to contain the name of your startup script.</source>
          <target state="translated">インタラクティブなPythonインタープリターの起動時に特定のスクリプトファイルを実行するには、起動スクリプトの名前を含むように &lt;code&gt;PYTHONSTARTUP&lt;/code&gt; 環境変数を定義します。</target>
        </trans-unit>
        <trans-unit id="01fa3621bdaf741ed6a071c7af18f6f77c074d16" translate="yes" xml:space="preserve">
          <source>To implement the second method, NumPy provides the class-factory function &lt;a href=&quot;#ndpointer&quot;&gt;&lt;code&gt;ndpointer&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&quot;../reference/routines.ctypeslib#module-numpy.ctypeslib&quot;&gt;&lt;code&gt;numpy.ctypeslib&lt;/code&gt;&lt;/a&gt; module. This class-factory function produces an appropriate class that can be placed in an argtypes attribute entry of a ctypes function. The class will contain a from_param method which ctypes will use to convert any ndarray passed in to the function to a ctypes-recognized object. In the process, the conversion will perform checking on any properties of the ndarray that were specified by the user in the call to &lt;a href=&quot;#ndpointer&quot;&gt;&lt;code&gt;ndpointer&lt;/code&gt;&lt;/a&gt;. Aspects of the ndarray that can be checked include the data-type, the number-of-dimensions, the shape, and/or the state of the flags on any array passed. The return value of the from_param method is the ctypes attribute of the array which (because it contains the &lt;code&gt;_as_parameter_&lt;/code&gt; attribute pointing to the array data area) can be used by ctypes directly.</source>
          <target state="translated">2番目のメソッドを実装するために、NumPyは&lt;a href=&quot;../reference/routines.ctypeslib#module-numpy.ctypeslib&quot;&gt; &lt;code&gt;numpy.ctypeslib&lt;/code&gt; &lt;/a&gt;モジュールにクラスファクトリ関数&lt;a href=&quot;#ndpointer&quot;&gt; &lt;code&gt;ndpointer&lt;/code&gt; &lt;/a&gt;を提供します。このクラスファクトリ関数は、ctypes関数のargtypes属性エントリに配置できる適切なクラスを生成します。このクラスには、関数に渡されたndarrayをctypesで認識されるオブジェクトに変換するためにctypesが使用するfrom_paramメソッドが含まれます。その過程で、変換は、ndpointerの呼び出しでユーザーが指定したndarrayのプロパティのチェックを実行し&lt;a href=&quot;#ndpointer&quot;&gt; &lt;code&gt;ndpointer&lt;/code&gt; &lt;/a&gt;。チェックできるndarrayの側面には、渡された配列のデータ型、次元数、形状、および/またはフラグの状態が含まれます。from_paramメソッドの戻り値は、配列のctypes属性であり、（配列データ領域を指す &lt;code&gt;_as_parameter_&lt;/code&gt; 属性が含まれているため）ctypesが直接使用できます。</target>
        </trans-unit>
        <trans-unit id="50d801e69012a04f7e0e0473d58cee9ab38e87fd" translate="yes" xml:space="preserve">
          <source>To install NumPy, run:</source>
          <target state="translated">NumPyをインストールするには、実行します。</target>
        </trans-unit>
        <trans-unit id="bd5ace9a611ff0639bf97923787f31ff3babad6c" translate="yes" xml:space="preserve">
          <source>To install NumPy, we strongly recommend using a scientific Python distribution. If you&amp;rsquo;re looking for the full instructions for installing NumPy on your operating system, you can &lt;a href=&quot;https://www.scipy.org/install.html&quot;&gt;find all of the details here&lt;/a&gt;.</source>
          <target state="translated">NumPyをインストールするには、科学的なPythonディストリビューションを使用することを強くお勧めします。オペレーティングシステムにNumPyをインストールするための完全な手順を探している場合&lt;a href=&quot;https://www.scipy.org/install.html&quot;&gt;は、ここですべての詳細を見つける&lt;/a&gt;ことができます。</target>
        </trans-unit>
        <trans-unit id="5ceadcdbd2ecba0b0b71d04b040d27f4a8978392" translate="yes" xml:space="preserve">
          <source>To intersect more than two arrays, use functools.reduce:</source>
          <target state="translated">2つ以上の配列を交差させるには、functools.reduceを使用します。</target>
        </trans-unit>
        <trans-unit id="1eeff99dc3325ea11208d15f34bf3ae08056f134" translate="yes" xml:space="preserve">
          <source>To keep in sync with changes in NumPy, you want to set up your repository so it pulls from &lt;code&gt;upstream&lt;/code&gt; by default. This can be done with:</source>
          <target state="translated">NumPyの変更との同期を維持するには、デフォルトで &lt;code&gt;upstream&lt;/code&gt; からプルするようにリポジトリを設定する必要があります。これは次の方法で実行できます。</target>
        </trans-unit>
        <trans-unit id="422eea08f184929b902e9a6c5257e9028826306a" translate="yes" xml:space="preserve">
          <source>To learn more about finding the unique elements in an array, see &lt;a href=&quot;../reference/generated/numpy.unique#numpy.unique&quot;&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列内のユニークな要素を見つけることについての詳細を学ぶために、参照&lt;a href=&quot;../reference/generated/numpy.unique#numpy.unique&quot;&gt; &lt;code&gt;unique&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2f5278c1b18ea2b8e10ed17f38664074c6889df4" translate="yes" xml:space="preserve">
          <source>To learn more about transposing and reshaping arrays, see &lt;a href=&quot;../reference/generated/numpy.transpose#numpy.transpose&quot;&gt;&lt;code&gt;transpose&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../reference/generated/numpy.reshape#numpy.reshape&quot;&gt;&lt;code&gt;reshape&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列の&lt;a href=&quot;../reference/generated/numpy.transpose#numpy.transpose&quot;&gt; &lt;code&gt;transpose&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../reference/generated/numpy.reshape#numpy.reshape&quot;&gt; &lt;code&gt;reshape&lt;/code&gt; &lt;/a&gt;詳細については、転置と再形成を参照してください。</target>
        </trans-unit>
        <trans-unit id="68755700558e4129caf4a1646cfbb8316cee0dd6" translate="yes" xml:space="preserve">
          <source>To make an iterator similar to the old iterator, this should work.</source>
          <target state="translated">古いイテレータに似たようなイテレータを作るには、これがうまくいくはずです。</target>
        </trans-unit>
        <trans-unit id="36529c6f3589cad07eabf913ffb155048ea1dac5" translate="yes" xml:space="preserve">
          <source>To make it concrete, we can pick the operation to be the array-reversal function &lt;a href=&quot;reference/generated/numpy.flip#numpy.flip&quot;&gt;&lt;code&gt;numpy.flip&lt;/code&gt;&lt;/a&gt;, which accepts an &lt;code&gt;axis&lt;/code&gt; argument. We construct a 3 x 4 array &lt;code&gt;a&lt;/code&gt;:</source>
          <target state="translated">具体的には、 &lt;code&gt;axis&lt;/code&gt; 引数を受け入れる配列反転関数&lt;a href=&quot;reference/generated/numpy.flip#numpy.flip&quot;&gt; &lt;code&gt;numpy.flip&lt;/code&gt; を&lt;/a&gt;操作として選択できます。3 x4の配列を作成 &lt;code&gt;a&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="6d696015c14a0cbcd57511007788b5810594a8d0" translate="yes" xml:space="preserve">
          <source>To make its properties more readily accessible during iteration, &lt;a href=&quot;generated/numpy.nditer#numpy.nditer&quot;&gt;&lt;code&gt;nditer&lt;/code&gt;&lt;/a&gt; has an alternative syntax for iterating, which works explicitly with the iterator object itself. With this looping construct, the current value is accessible by indexing into the iterator. Other properties, such as tracked indices remain as before. The examples below produce identical results to the ones in the previous section.</source>
          <target state="translated">反復中にそのプロパティに簡単にアクセスできるようにするために、&lt;a href=&quot;generated/numpy.nditer#numpy.nditer&quot;&gt; &lt;code&gt;nditer&lt;/code&gt; に&lt;/a&gt;は反復の代替構文があり、これは反復オブジェクト自体と明示的に連携します。このループ構造では、イテレータにインデックスを付けることで現在の値にアクセスできます。追跡されたインデックスなどの他のプロパティは、以前と同じです。以下の例では、前のセクションの例と同じ結果が得られます。</target>
        </trans-unit>
        <trans-unit id="dcb62bb890eb45640b1d129077fff1a1982947c5" translate="yes" xml:space="preserve">
          <source>To make the necessary build options available to third parties, you could use the &lt;code&gt;npy-pkg-config&lt;/code&gt; mechanism implemented in &lt;a href=&quot;#module-numpy.distutils&quot;&gt;&lt;code&gt;numpy.distutils&lt;/code&gt;&lt;/a&gt;. This mechanism is based on a .ini file which contains all the options. A .ini file is very similar to .pc files as used by the pkg-config unix utility:</source>
          <target state="translated">必要なビルドオプションをサードパーティが利用できるようにするには、&lt;a href=&quot;#module-numpy.distutils&quot;&gt; &lt;code&gt;numpy.distutils&lt;/code&gt; に&lt;/a&gt;実装されている &lt;code&gt;npy-pkg-config&lt;/code&gt; メカニズムを使用できます。このメカニズムは、すべてのオプションを含む.iniファイルに基づいています。.iniファイルは、pkg-config unixユーティリティで使用される.pcファイルとよく似ています。</target>
        </trans-unit>
        <trans-unit id="33556655b7ed4636c5875606d6d2c0f4cbb51bbb" translate="yes" xml:space="preserve">
          <source>To make your key more readily identifiable as you, consider sending your key to public keyservers, with a command such as:</source>
          <target state="translated">自分の鍵を自分であることを容易に識別できるようにするには、公開鍵サーバに自分の鍵を送信することを検討してください。</target>
        </trans-unit>
        <trans-unit id="18c1e38c6bb6394f66a0d335e612f3011262ff50" translate="yes" xml:space="preserve">
          <source>To measure the test coverage, install &lt;a href=&quot;https://pytest-cov.readthedocs.io/en/latest/&quot;&gt;pytest-cov&lt;/a&gt; and then run:</source>
          <target state="translated">テストカバレッジを測定するには、&lt;a href=&quot;https://pytest-cov.readthedocs.io/en/latest/&quot;&gt;pytest-covを&lt;/a&gt;インストールしてから、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="6239277562da98f7f93ad4e57c8a93f41fe39464" translate="yes" xml:space="preserve">
          <source>To modify your Python search path to include the locations of your own modules, define the &lt;code&gt;PYTHONPATH&lt;/code&gt; environment variable.</source>
          <target state="translated">Python検索パスを変更して独自のモジュールの場所を &lt;code&gt;PYTHONPATH&lt;/code&gt; には、PYTHONPATH環境変数を定義します。</target>
        </trans-unit>
        <trans-unit id="8d1963ae310b977b5fdaf7c01ceaf03485096cb4" translate="yes" xml:space="preserve">
          <source>To override the automatic detection of available memory, set the environment variable &lt;code&gt;NPY_AVAILABLE_MEM&lt;/code&gt;, for example &lt;code&gt;NPY_AVAILABLE_MEM=32GB&lt;/code&gt;, or using pytest &lt;code&gt;--available-memory=32GB&lt;/code&gt; target option.</source>
          <target state="translated">使用可能なメモリの自動検出をオーバーライドするには、環境変数 &lt;code&gt;NPY_AVAILABLE_MEM&lt;/code&gt; を設定します（例： &lt;code&gt;NPY_AVAILABLE_MEM=32GB&lt;/code&gt; ）。または、pytest &lt;code&gt;--available-memory=32GB&lt;/code&gt; ターゲットオプションを使用します。</target>
        </trans-unit>
        <trans-unit id="d1c61949e0ad3dc492f05ebb9e5438319174c320" translate="yes" xml:space="preserve">
          <source>To perform an in-place build that can be run from the source folder run:</source>
          <target state="translated">ソースフォルダから実行可能なインプレースビルドを実行するには run を実行します。</target>
        </trans-unit>
        <trans-unit id="c334cf8d4bed58e0564b6be3f28b72afdf600e2c" translate="yes" xml:space="preserve">
          <source>To proceed, import the linear algebra submodule from NumPy:</source>
          <target state="translated">先に進むには、NumPyから線形代数サブモジュールをインポートします。</target>
        </trans-unit>
        <trans-unit id="02d722ee9de32d295a3f1aa488c332a62e29240a" translate="yes" xml:space="preserve">
          <source>To put back the default options, you can use:</source>
          <target state="translated">デフォルトのオプションに戻すには</target>
        </trans-unit>
        <trans-unit id="4f4e1d38162c68bbafa8964bc64bfa72b23866db" translate="yes" xml:space="preserve">
          <source>To read more about Matplotlib and what it can do, take a look at &lt;a href=&quot;https://matplotlib.org/&quot;&gt;the official documentation&lt;/a&gt;. For directions regarding installing Matplotlib, see the official &lt;a href=&quot;https://matplotlib.org/users/installing.html&quot;&gt;installation section&lt;/a&gt;.</source>
          <target state="translated">Matplotlibとその機能の詳細については&lt;a href=&quot;https://matplotlib.org/&quot;&gt;、公式ドキュメントを&lt;/a&gt;ご覧ください。Matplotlibのインストールに関する指示については、公式の&lt;a href=&quot;https://matplotlib.org/users/installing.html&quot;&gt;インストールセクションを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="98026c8318a10abcb126d49806744b4ae23d3123" translate="yes" xml:space="preserve">
          <source>To read more about concatenate, see: &lt;a href=&quot;../reference/generated/numpy.concatenate#numpy.concatenate&quot;&gt;&lt;code&gt;concatenate&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">CONCATENATE詳細情報は、以下を参照してください。&lt;a href=&quot;../reference/generated/numpy.concatenate#numpy.concatenate&quot;&gt; &lt;code&gt;concatenate&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="425cb75a01c3201b08612ec800f1a7971e0378d1" translate="yes" xml:space="preserve">
          <source>To read more about sorting an array, see: &lt;a href=&quot;../reference/generated/numpy.sort#numpy.sort&quot;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列の&lt;a href=&quot;../reference/generated/numpy.sort#numpy.sort&quot;&gt; &lt;code&gt;sort&lt;/code&gt; &lt;/a&gt;詳細については、sortを参照してください。</target>
        </trans-unit>
        <trans-unit id="33f422775354a46e3c9c41ff160bfb3c38d25920" translate="yes" xml:space="preserve">
          <source>To reduce the chance of misinterpretation, even though the following &amp;ldquo;abuse&amp;rdquo; is nominally supported, &lt;code&gt;choices&lt;/code&gt; should neither be, nor be thought of as, a single array, i.e., the outermost sequence-like container should be either a list or a tuple.</source>
          <target state="translated">誤解の可能性を減らすために、次の「乱用」は名目上サポートされていますが、 &lt;code&gt;choices&lt;/code&gt; は単一の配列ではなく、またそのように考えるべきではありません。</target>
        </trans-unit>
        <trans-unit id="69f7fdf215ee6723757c121f1000e16153523a1d" translate="yes" xml:space="preserve">
          <source>To retrieve only the valid entries, we can use the inverse of the mask as an index. The inverse of the mask can be calculated with the &lt;a href=&quot;generated/numpy.logical_not#numpy.logical_not&quot;&gt;&lt;code&gt;numpy.logical_not&lt;/code&gt;&lt;/a&gt; function or simply with the &lt;code&gt;~&lt;/code&gt; operator:</source>
          <target state="translated">有効なエントリのみを取得するには、マスクの逆をインデックスとして使用できます。マスクの逆は、&lt;a href=&quot;generated/numpy.logical_not#numpy.logical_not&quot;&gt; &lt;code&gt;numpy.logical_not&lt;/code&gt; &lt;/a&gt;関数または単に &lt;code&gt;~&lt;/code&gt; 演算子を使用して計算できます。</target>
        </trans-unit>
        <trans-unit id="e546770d4089912cdd192abaecf0b1e29a9e2943" translate="yes" xml:space="preserve">
          <source>To return the indices of the values common to the input arrays along with the intersected values:</source>
          <target state="translated">入力配列に共通する値のインデックスを,交差する値とともに返す。</target>
        </trans-unit>
        <trans-unit id="67e6eaca69e6f48eb1845e3b15fc19b5fce3851f" translate="yes" xml:space="preserve">
          <source>To run SciPy&amp;rsquo;s full test suite, use the following:</source>
          <target state="translated">SciPyの完全なテストスイートを実行するには、以下を使用します。</target>
        </trans-unit>
        <trans-unit id="402853161da9a462a3784d2121c2566aac78b1d2" translate="yes" xml:space="preserve">
          <source>To run a benchmark defined in a class, such as &lt;code&gt;Mandelbrot&lt;/code&gt; from &lt;code&gt;bench_avx.py&lt;/code&gt;:</source>
          <target state="translated">以下のようなクラスで定義されたベンチマークを実行するには &lt;code&gt;Mandelbrot&lt;/code&gt; から &lt;code&gt;bench_avx.py&lt;/code&gt; を：</target>
        </trans-unit>
        <trans-unit id="3862a782eb6529a8c99b98cef4c13299f47f23c0" translate="yes" xml:space="preserve">
          <source>To run all benchmarks, navigate to the root NumPy directory at the command line and execute:</source>
          <target state="translated">すべてのベンチマークを実行するには、コマンドラインでルートのNumPyディレクトリに移動して実行します。</target>
        </trans-unit>
        <trans-unit id="12365d76682fb967acae76310ae656f9290fed8d" translate="yes" xml:space="preserve">
          <source>To run benchmarks from a particular benchmark module, such as &lt;code&gt;bench_core.py&lt;/code&gt;, simply append the filename without the extension:</source>
          <target state="translated">&lt;code&gt;bench_core.py&lt;/code&gt; などの特定のベンチマークモジュールからベンチマークを実行するには、拡張子を付けずにファイル名を追加するだけです。</target>
        </trans-unit>
        <trans-unit id="9661928d3b7e0b0f53e4248625106d96b260f714" translate="yes" xml:space="preserve">
          <source>To sample from N evenly spaced floating-point numbers between a and b, use:</source>
          <target state="translated">aとbの間の等間隔のN個の浮動小数点数からサンプリングするには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="cd520022e6b8a6d4a06e76bb94b1b7fee07bd6cf" translate="yes" xml:space="preserve">
          <source>To scan Fortran sources and generate a signature file, use</source>
          <target state="translated">Fortranソースをスキャンして署名ファイルを生成するには</target>
        </trans-unit>
        <trans-unit id="67f8780eccc675b04bcebf369f6ed02655b97ea2" translate="yes" xml:space="preserve">
          <source>To see a graphical representation of the repository branches and commits:</source>
          <target state="translated">リポジトリのブランチとコミットをグラフィカルに表示します。</target>
        </trans-unit>
        <trans-unit id="39780ed9cf55125c359d05489224449255a114a4" translate="yes" xml:space="preserve">
          <source>To see a linear list of commits for this branch:</source>
          <target state="translated">このブランチのコミット一覧を表示します。</target>
        </trans-unit>
        <trans-unit id="8b637e484b0579f8dde3e86fc54af28832dba4d1" translate="yes" xml:space="preserve">
          <source>To see how striding underlies the power of NumPy views, see &lt;a href=&quot;https://arxiv.org/pdf/1102.1523.pdf&quot;&gt;The NumPy array: a structure for efficient numerical computation. &lt;/a&gt;</source>
          <target state="translated">ストライドがNumPyビューの能力の根底にあることを確認するには&lt;a href=&quot;https://arxiv.org/pdf/1102.1523.pdf&quot;&gt;、NumPy配列：効率的な数値計算のための構造を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="79f07a6533e986fa44fe540266db879b8c346cb7" translate="yes" xml:space="preserve">
          <source>To see if an approximation is reasonable, we can check the values in &lt;code&gt;s&lt;/code&gt;:</source>
          <target state="translated">近似が妥当かどうかを確認するために、 &lt;code&gt;s&lt;/code&gt; の値を確認できます。</target>
        </trans-unit>
        <trans-unit id="bc4aaad8d81152b0e7e6f7703b5cec989fcf2cef" translate="yes" xml:space="preserve">
          <source>To see if this makes sense in our image, we should use a colormap from &lt;code&gt;matplotlib&lt;/code&gt; corresponding to the color we wish to see in out image (otherwise, &lt;code&gt;matplotlib&lt;/code&gt; will default to a colormap that does not correspond to the real data).</source>
          <target state="translated">これが画像で意味があるかどうかを確認するには、画像に表示したい色に対応する &lt;code&gt;matplotlib&lt;/code&gt; のカラーマップを使用する必要があります（そうでない場合、 &lt;code&gt;matplotlib&lt;/code&gt; はデフォルトで実際のデータに対応しないカラーマップになります）。</target>
        </trans-unit>
        <trans-unit id="c11e108b211eeb3196e6c957c1a55cfbb8da63bc" translate="yes" xml:space="preserve">
          <source>To see the documentation for a specific ufunc, use &lt;a href=&quot;numpy.info#numpy.info&quot;&gt;&lt;code&gt;info&lt;/code&gt;&lt;/a&gt;. For example, &lt;code&gt;np.info(np.sin)&lt;/code&gt;. Because ufuncs are written in C (for speed) and linked into Python with NumPy&amp;rsquo;s ufunc facility, Python&amp;rsquo;s help() function finds this page whenever help() is called on a ufunc.</source>
          <target state="translated">特定のufuncのドキュメントを表示するには、&lt;a href=&quot;numpy.info#numpy.info&quot;&gt; &lt;code&gt;info&lt;/code&gt; を&lt;/a&gt;使用してください。たとえば、 &lt;code&gt;np.info(np.sin)&lt;/code&gt; 。ufuncはC（速度のため）で記述され、NumPyのufunc機能を使用してPythonにリンクされているため、Pythonのhelp（）関数は、ufuncでhelp（）が呼び出されるたびにこのページを見つけます。</target>
        </trans-unit>
        <trans-unit id="74691658cd7769d44a45cda5e12dd3bc908a227e" translate="yes" xml:space="preserve">
          <source>To see whether F2PY generated interface performs copies of array arguments, use &lt;code&gt;-DF2PY_REPORT_ON_ARRAY_COPY=&amp;lt;int&amp;gt;&lt;/code&gt;. When the size of an array argument is larger than &lt;code&gt;&amp;lt;int&amp;gt;&lt;/code&gt;, a message about the coping is sent to &lt;code&gt;stderr&lt;/code&gt;.</source>
          <target state="translated">F2PYで生成されたインターフェイスが配列引数のコピーを実行するかどうかを確認するには、 &lt;code&gt;-DF2PY_REPORT_ON_ARRAY_COPY=&amp;lt;int&amp;gt;&lt;/code&gt; を使用します。配列引数のサイズが &lt;code&gt;&amp;lt;int&amp;gt;&lt;/code&gt; より大きい場合、対処に関するメッセージが &lt;code&gt;stderr&lt;/code&gt; に送信されます。</target>
        </trans-unit>
        <trans-unit id="1ed1275cdacf759ff47d03a08e3787f0594bb1bb" translate="yes" xml:space="preserve">
          <source>To set up on another computer, you can copy your &lt;code&gt;~/.gitconfig&lt;/code&gt; file, or run the commands above.</source>
          <target state="translated">別のコンピューターでセットアップするには、 &lt;code&gt;~/.gitconfig&lt;/code&gt; ファイルをコピーするか、上記のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="e4d00e748aea08f0006873ab29acb7a55ab4663b" translate="yes" xml:space="preserve">
          <source>To shuffle the rows of &lt;code&gt;x&lt;/code&gt; in-place, pass &lt;code&gt;x&lt;/code&gt; as the &lt;code&gt;out&lt;/code&gt; parameter:</source>
          <target state="translated">行シャッフルする &lt;code&gt;x&lt;/code&gt; パス、インプレースを &lt;code&gt;x&lt;/code&gt; ととして &lt;code&gt;out&lt;/code&gt; パラメータ：</target>
        </trans-unit>
        <trans-unit id="a4d884174d72a1ce55f9ee4b7d870c154a7a32b7" translate="yes" xml:space="preserve">
          <source>To skip a test, simply use &lt;code&gt;skipif&lt;/code&gt;:</source>
          <target state="translated">テストをスキップするには、単に &lt;code&gt;skipif&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="3dc6e4230f5944b1098c8c2df7bd61f24c145894" translate="yes" xml:space="preserve">
          <source>To submit your contribution:</source>
          <target state="translated">投稿するには</target>
        </trans-unit>
        <trans-unit id="ceffd750378d21341a7019937d0c789148b4f90a" translate="yes" xml:space="preserve">
          <source>To support it, we need to define the Python interfaces &lt;code&gt;__add__&lt;/code&gt;, &lt;code&gt;__lt__&lt;/code&gt;, and so on to dispatch to the corresponding ufunc. We can achieve this conveniently by inheriting from the mixin &lt;a href=&quot;../reference/generated/numpy.lib.mixins.ndarrayoperatorsmixin#numpy.lib.mixins.NDArrayOperatorsMixin&quot;&gt;&lt;code&gt;NDArrayOperatorsMixin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これをサポートするには、対応するufuncにディスパッチするPythonインターフェース &lt;code&gt;__add__&lt;/code&gt; 、 &lt;code&gt;__lt__&lt;/code&gt; などを定義する必要があります。これは、ミックスイン&lt;a href=&quot;../reference/generated/numpy.lib.mixins.ndarrayoperatorsmixin#numpy.lib.mixins.NDArrayOperatorsMixin&quot;&gt; &lt;code&gt;NDArrayOperatorsMixin&lt;/code&gt; &lt;/a&gt;から継承することで簡単に実現できます。</target>
        </trans-unit>
        <trans-unit id="673335eebf9011c1628160cca5d99d26576f081d" translate="yes" xml:space="preserve">
          <source>To take the running sum of four successive values:</source>
          <target state="translated">4つの連続した値の総和を取ること。</target>
        </trans-unit>
        <trans-unit id="54587f602166cab38648eb3409cd921150aa4e7e" translate="yes" xml:space="preserve">
          <source>To test a datetime64 value to see if it is a valid day, use &lt;a href=&quot;generated/numpy.is_busday#numpy.is_busday&quot;&gt;&lt;code&gt;is_busday&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">datetime64値をテストして、それが有効な日であるかどうかを確認するには、&lt;a href=&quot;generated/numpy.is_busday#numpy.is_busday&quot;&gt; &lt;code&gt;is_busday&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="054b90fbdf163bc568eceff518fb7e05620b88d4" translate="yes" xml:space="preserve">
          <source>To test the performance of F2PY generated interfaces, use &lt;code&gt;-DF2PY_REPORT_ATEXIT&lt;/code&gt;. Then a report of various timings is printed out at the exit of Python. This feature may not work on all platforms, currently only Linux platform is supported.</source>
          <target state="translated">F2PYで生成されたインターフェイスのパフォーマンスをテストするには、 &lt;code&gt;-DF2PY_REPORT_ATEXIT&lt;/code&gt; を使用します。次に、Pythonの終了時にさまざまなタイミングのレポートが出力されます。この機能はすべてのプラットフォームで機能するとは限りません。現在、Linuxプラットフォームのみがサポートされています。</target>
        </trans-unit>
        <trans-unit id="01b5e9d9370a428c2b83ae13e33fb71722d9bb4f" translate="yes" xml:space="preserve">
          <source>To test whether an array is C-contiguous, use the &lt;code&gt;.flags.c_contiguous&lt;/code&gt; attribute of NumPy arrays. To test for Fortran contiguity, use the &lt;code&gt;.flags.f_contiguous&lt;/code&gt; attribute.</source>
          <target state="translated">配列がC連続であるかどうかをテストするには、NumPy配列の &lt;code&gt;.flags.c_contiguous&lt;/code&gt; 属性を使用します。Fortranの隣接性をテストするには、 &lt;code&gt;.flags.f_contiguous&lt;/code&gt; 属性を使用します。</target>
        </trans-unit>
        <trans-unit id="8ab2b1e95b971bb4c5c35b359a5634bf815d8fa6" translate="yes" xml:space="preserve">
          <source>To the extent possible under law, the authors have waived all copyright and related or neighboring rights to the NumPy project governance and decision-making document, as per the &lt;a href=&quot;https://creativecommons.org/publicdomain/zero/1.0/&quot;&gt;CC-0 public domain dedication / license&lt;/a&gt;.</source>
          <target state="translated">法律の下で可能な範囲で、著者は、&lt;a href=&quot;https://creativecommons.org/publicdomain/zero/1.0/&quot;&gt;CC-0パブリックドメインの献身/ライセンス&lt;/a&gt;に従って、NumPyプロジェクトガバナンスおよび意思決定文書に対するすべての著作権および関連する権利または隣接権を放棄しました。</target>
        </trans-unit>
        <trans-unit id="4b06b82cac8a278e2d618ab82ddb18a2d508ecee" translate="yes" xml:space="preserve">
          <source>To the maximum extent possible, Council discussions and activities will be public and done in collaboration and discussion with the Project Contributors and Community. The Council will have a private mailing list that will be used sparingly and only when a specific matter requires privacy. When private communications and decisions are needed, the Council will do its best to summarize those to the Community after eliding personal/private/sensitive information that should not be posted to the public internet.</source>
          <target state="translated">可能な限り、協議会の議論や活動は公開され、プロジェクトのコントリビューターやコミュニティとの共同作業や議論の中で行われます。協議会にはプライベートなメーリングリストがあり、特定の問題でプライバシーが必要な場合にのみ、控えめに使用される。協議会は、個人的な連絡や決定が必要な場合は、公開されていないインターネット上の個人情報や個人情報、機密性の高い情報を排除した上で、コミュニティに対して最善を尽くしてそれらを要約します。</target>
        </trans-unit>
        <trans-unit id="3cb8696297023077cd0b0457359ff13c01cdb0ce" translate="yes" xml:space="preserve">
          <source>To transform input arrays to column major storage order before passing them to Fortran routines, use the function &lt;code&gt;numpy.asfortranarray(&amp;lt;array&amp;gt;)&lt;/code&gt;.</source>
          <target state="translated">入力配列をFortranルーチンに渡す前に列の主要な格納順序に変換するには、関数 &lt;code&gt;numpy.asfortranarray(&amp;lt;array&amp;gt;)&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="ecbd73988a92874f75c5ca6f8256cc9806ceef6d" translate="yes" xml:space="preserve">
          <source>To unmask all masked entries of a masked array (provided the mask isn&amp;rsquo;t a hard mask), the simplest solution is to assign the constant &lt;a href=&quot;maskedarray.baseclass#numpy.ma.nomask&quot;&gt;&lt;code&gt;nomask&lt;/code&gt;&lt;/a&gt; to the mask:</source>
          <target state="translated">マスクされた配列のすべてのマスクされたエントリのマスクを解除するには（マスクがハードマスクでない場合）、最も簡単な解決策は、定数&lt;a href=&quot;maskedarray.baseclass#numpy.ma.nomask&quot;&gt; &lt;code&gt;nomask&lt;/code&gt; &lt;/a&gt;をマスクに割り当てることです。</target>
        </trans-unit>
        <trans-unit id="573c20b6a49882f7eb74a61c9d6cc94e9816cad4" translate="yes" xml:space="preserve">
          <source>To unmask one or several specific entries, we can just assign one or several new valid values to them:</source>
          <target state="translated">1つまたは複数の特定のエントリのマスクを解除するには、それらのエントリに1つまたは複数の新しい有効な値を代入するだけです。</target>
        </trans-unit>
        <trans-unit id="9a8a0e07a3236c692c34f1277c4ab67311d7e811" translate="yes" xml:space="preserve">
          <source>To update your PR, make your changes on your local repository, commit, &lt;strong&gt;run tests, and only if they succeed&lt;/strong&gt; push to your fork. As soon as those changes are pushed up (to the same branch as before) the PR will update automatically. If you have no idea how to fix the test failures, you may push your changes anyway and ask for help in a PR comment.</source>
          <target state="translated">PRを更新するには、ローカルリポジトリで変更を加え、コミットし&lt;strong&gt;てテストを実行し、成功した場合にのみ&lt;/strong&gt;フォークにプッシュします。これらの変更が（以前と同じブランチに）プッシュされるとすぐに、PRは自動的に更新されます。テストの失敗を修正する方法がわからない場合は、とにかく変更をプッシュして、PRコメントで助けを求めることができます。</target>
        </trans-unit>
        <trans-unit id="334270275fd281b533f438d90c3f3ba9ca0332d2" translate="yes" xml:space="preserve">
          <source>To use ctypes you must</source>
          <target state="translated">ctypesを使用するには</target>
        </trans-unit>
        <trans-unit id="678a8d94c4368f39ac59f5979ae212033bfc0aa2" translate="yes" xml:space="preserve">
          <source>To use the NPY_NO_DEPRECATED_API mechanism, you need to #define it to the target API version of NumPy before #including any NumPy headers. If you want to confirm that your code is clean against 1.7, use:</source>
          <target state="translated">NPY_NO_DEPRECATED_APIメカニズムを使用するには、#NumPyヘッダを含む前に、#NumPyのターゲットAPIバージョンに定義する必要があります。1.7に対してコードがクリーンであることを確認したい場合は、以下を使ってください。</target>
        </trans-unit>
        <trans-unit id="a6632c1bd45113f2d4d1587bfeed07e24b0355a1" translate="yes" xml:space="preserve">
          <source>To use the core math library in your own extension, you need to add the npymath compile and link options to your extension in your setup.py:</source>
          <target state="translated">コア数学ライブラリを独自の拡張機能で使用するには、setup.py で npymath のコンパイルとリンクオプションを拡張機能に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="b2026079012933359e4262f13af10283bf7286e8" translate="yes" xml:space="preserve">
          <source>To use the default &lt;a href=&quot;bit_generators/pcg64#numpy.random.PCG64&quot;&gt;&lt;code&gt;PCG64&lt;/code&gt;&lt;/a&gt; bit generator, one can instantiate it directly and pass it to &lt;a href=&quot;generator#numpy.random.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">デフォルトの&lt;a href=&quot;bit_generators/pcg64#numpy.random.PCG64&quot;&gt; &lt;code&gt;PCG64&lt;/code&gt; &lt;/a&gt;ビットジェネレーターを使用するには、それを直接インスタンス化して&lt;a href=&quot;generator#numpy.random.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; &lt;/a&gt;渡すことができます。</target>
        </trans-unit>
        <trans-unit id="b22691af04491d10741332ecd435870cd225e63a" translate="yes" xml:space="preserve">
          <source>To use the deprecated &lt;code&gt;matrix&lt;/code&gt; and other &lt;code&gt;matlib&lt;/code&gt; functions:</source>
          <target state="translated">非推奨の &lt;code&gt;matrix&lt;/code&gt; およびその他の &lt;code&gt;matlib&lt;/code&gt; 関数を使用するには：</target>
        </trans-unit>
        <trans-unit id="500206efd24c09b049a15922610b46ea489a6382" translate="yes" xml:space="preserve">
          <source>To use the setup.py file, place setup.py and spammodule.c in the same folder. Then python setup.py build will build the module to import, or setup.py install will install the module to your site-packages directory.</source>
          <target state="translated">setup.pyファイルを使うには、setup.pyとspammodule.cを同じフォルダに置きます。そして、pythonのsetup.py buildでインポートするモジュールをビルドし、setup.py installでサイトパッケージディレクトリにインストールします。</target>
        </trans-unit>
        <trans-unit id="a62551f1b73595ab5f0441644c3e3f73182c8a6d" translate="yes" xml:space="preserve">
          <source>To work the examples, you&amp;rsquo;ll need &lt;code&gt;matplotlib&lt;/code&gt; installed in addition to NumPy.</source>
          <target state="translated">例を実行するには、NumPyに加えて &lt;code&gt;matplotlib&lt;/code&gt; をインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="9b09eedfc76bdeeb31bc979256f245ac870f03de" translate="yes" xml:space="preserve">
          <source>Toggle between low-endian and big-endian data representation by returning a byteswapped array, optionally swapped in-place.</source>
          <target state="translated">バイトスワップされた配列を返すことで、ローエンディアンとビッグエンディアンのデータ表現を切り替えます。</target>
        </trans-unit>
        <trans-unit id="7ff4f3dd9acfe46112f7adc4d9246b8e34598f79" translate="yes" xml:space="preserve">
          <source>Toggle between low-endian and big-endian data representation by returning a byteswapped array, optionally swapped in-place. Arrays of byte-strings are not swapped. The real and imaginary parts of a complex number are swapped individually.</source>
          <target state="translated">バイトスワップされた配列を返すことで、ローエンディアンとビッグエンディアンのデータ表現を切り替えます。バイト列の配列はスワップされません。複素数の実部と虚部は個別にスワップされます。</target>
        </trans-unit>
        <trans-unit id="7b37ca94c4e2eda42b84355ca6a25cdc55774133" translate="yes" xml:space="preserve">
          <source>Tolerance in machine epsilons for the complex part of the elements in the array.</source>
          <target state="translated">配列内の要素の複雑な部分のマシンイプシロンでの公差。</target>
        </trans-unit>
        <trans-unit id="7a686b14e99b6f371ad9d543037e8be2650e9924" translate="yes" xml:space="preserve">
          <source>Tolerance parameters passed on to &lt;a href=&quot;numpy.isclose#numpy.isclose&quot;&gt;&lt;code&gt;isclose&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;numpy.isclose#numpy.isclose&quot;&gt; &lt;code&gt;isclose&lt;/code&gt; に&lt;/a&gt;渡される許容パラメータ</target>
        </trans-unit>
        <trans-unit id="eb34b2131d6523965cdff1a43f4d01b982373d17" translate="yes" xml:space="preserve">
          <source>Tolerance parameters passed on to &lt;code&gt;isclose&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;isclose&lt;/code&gt; に渡される許容パラメータ</target>
        </trans-unit>
        <trans-unit id="6670aa4fd96fc23b9c267762a58d3e2634e5e33d" translate="yes" xml:space="preserve">
          <source>Tolerance when checking the singular values in covariance matrix. cov is cast to double before the check.</source>
          <target state="translated">共分散行列の特異値をチェックする際の許容範囲.</target>
        </trans-unit>
        <trans-unit id="849d7597da246bfdf3ea363c9c3966af6e67a060" translate="yes" xml:space="preserve">
          <source>Tool chain</source>
          <target state="translated">ツールチェーン</target>
        </trans-unit>
        <trans-unit id="6e7bd14cfcb5cad5c21ec7a7360b81cb111dc93e" translate="yes" xml:space="preserve">
          <source>Top priority goes to &lt;strong&gt;technical inaccuracies&lt;/strong&gt; &amp;ndash; a docstring missing a parameter, a faulty description of a function/parameter/method, and so on. Other &amp;ldquo;structural&amp;rdquo; defects like broken links also get priority. All these fixes are easy to confirm and put in place. You can submit a &lt;a href=&quot;https://numpy.org/devdocs/dev/index.html#devindex&quot;&gt;pull request (PR)&lt;/a&gt; with the fix, if you know how to do that; otherwise please &lt;a href=&quot;https://github.com/numpy/numpy/issues&quot;&gt;open an issue&lt;/a&gt;.</source>
          <target state="translated">最優先事項は、&lt;strong&gt;技術的な不正確さです。&lt;/strong&gt;たとえば、docstringにパラメーターがない、関数/パラメーター/メソッドの説明に誤りがあるなどです。リンク切れなどの他の「構造的」欠陥も優先されます。これらの修正はすべて、簡単に確認して実施できます。その方法を知っている場合は、修正を加えた&lt;a href=&quot;https://numpy.org/devdocs/dev/index.html#devindex&quot;&gt;プルリクエスト（PR）&lt;/a&gt;を送信できます。それ以外の場合は&lt;a href=&quot;https://github.com/numpy/numpy/issues&quot;&gt;、問題&lt;/a&gt;を開いてください。</target>
        </trans-unit>
        <trans-unit id="7bae3881b1524f2891087bd43b6435b29e2fd654" translate="yes" xml:space="preserve">
          <source>Topics not covered in this tutorial can be found in the documentation:</source>
          <target state="translated">このチュートリアルで説明されていない内容は、ドキュメントに記載されています。</target>
        </trans-unit>
        <trans-unit id="62511550774b90e55fa9f4d081340a2b9a412907" translate="yes" xml:space="preserve">
          <source>Total bytes consumed by the elements of the array.</source>
          <target state="translated">配列の要素で消費される総バイト数。</target>
        </trans-unit>
        <trans-unit id="f98da7ab34ca5eed412ebdc84c5c6ee4a001f890" translate="yes" xml:space="preserve">
          <source>Total number of array elements which trigger summarization rather than full repr (default 1000).</source>
          <target state="translated">完全なreprではなくサマリー化を行う配列要素の総数(デフォルトは1000)。</target>
        </trans-unit>
        <trans-unit id="af14b2afdcc9cc3c661815c98f45cde11a73254a" translate="yes" xml:space="preserve">
          <source>Total number of array elements which trigger summarization rather than full repr (default 1000). To always use the full repr without summarization, pass &lt;a href=&quot;https://docs.python.org/dev/library/sys.html#sys.maxsize&quot;&gt;&lt;code&gt;sys.maxsize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">完全なreprではなく要約をトリガーする配列要素の総数（デフォルトは1000）。要約せずに常に完全なreprを使用するには、&lt;a href=&quot;https://docs.python.org/dev/library/sys.html#sys.maxsize&quot;&gt; &lt;code&gt;sys.maxsize&lt;/code&gt; を渡し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d7665d1d201c9ce2fd429127a2f276d913bba99d" translate="yes" xml:space="preserve">
          <source>Total number of array elements which trigger summarization rather than full repr. Defaults to &lt;code&gt;numpy.get_printoptions()['threshold']&lt;/code&gt;.</source>
          <target state="translated">完全な表現ではなく要約をトリガーする配列要素の総数。デフォルトは &lt;code&gt;numpy.get_printoptions()['threshold']&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7b009fd84652963a9ad5cd24ef82072817ddee41" translate="yes" xml:space="preserve">
          <source>Total size of broadcasted result.</source>
          <target state="translated">放送された結果の合計サイズ。</target>
        </trans-unit>
        <trans-unit id="77cca581150b844f956409245e7a5aa4e911b340" translate="yes" xml:space="preserve">
          <source>Trace of a matrix:</source>
          <target state="translated">行列のトレース。</target>
        </trans-unit>
        <trans-unit id="b67024bc850bfd9a0093e89cd78bf7093386c17c" translate="yes" xml:space="preserve">
          <source>Trace of an array, &lt;a href=&quot;numpy.trace#numpy.trace&quot;&gt;&lt;code&gt;numpy.trace&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列のトレース&lt;a href=&quot;numpy.trace#numpy.trace&quot;&gt; &lt;code&gt;numpy.trace&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ed0e339a8e0484e2fd0a0d26f8fea815f7ce8155" translate="yes" xml:space="preserve">
          <source>Tracking an Index or Multi-Index</source>
          <target state="translated">インデックスまたはマルチインデックスのトラッキング</target>
        </trans-unit>
        <trans-unit id="4cf0fc0db43adb86a6609aeef379773c878c22d3" translate="yes" xml:space="preserve">
          <source>Tracking an index or multi-index is incompatible with using an external loop, because it requires a different index value per element. If you try to combine these flags, the &lt;a href=&quot;generated/numpy.nditer#numpy.nditer&quot;&gt;&lt;code&gt;nditer&lt;/code&gt;&lt;/a&gt; object will raise an exception</source>
          <target state="translated">インデックスまたはマルチインデックスの追跡は、要素ごとに異なるインデックス値が必要になるため、外部ループの使用と互換性がありません。これらのフラグを組み合わせようとすると、&lt;a href=&quot;generated/numpy.nditer#numpy.nditer&quot;&gt; &lt;code&gt;nditer&lt;/code&gt; &lt;/a&gt;オブジェクトは例外を発生させます</target>
        </trans-unit>
        <trans-unit id="d235c585e89d9d88a2fc997aec36a615cac97376" translate="yes" xml:space="preserve">
          <source>Tracking an index or multi-index is incompatible with using an external loop, because it requires a different index value per element. If you try to combine these flags, the &lt;a href=&quot;generated/numpy.nditer#numpy.nditer&quot;&gt;&lt;code&gt;nditer&lt;/code&gt;&lt;/a&gt; object will raise an exception.</source>
          <target state="translated">インデックスまたはマルチインデックスの追跡は、要素ごとに異なるインデックス値を必要とするため、外部ループの使用と互換性がありません。これらのフラグを組み合わせようとすると、&lt;a href=&quot;generated/numpy.nditer#numpy.nditer&quot;&gt; &lt;code&gt;nditer&lt;/code&gt; &lt;/a&gt;オブジェクトは例外を発生させます。</target>
        </trans-unit>
        <trans-unit id="0de8c9ca9943956fbbe74f36e563016e4ecbb6f6" translate="yes" xml:space="preserve">
          <source>Trailing (i.e., highest order) elements with absolute value less than or equal to &lt;code&gt;tol&lt;/code&gt; (default value is zero) are removed.</source>
          <target state="translated">絶対値が &lt;code&gt;tol&lt;/code&gt; （デフォルト値はゼロ）以下の末尾（つまり、最高次数）の要素は削除されます。</target>
        </trans-unit>
        <trans-unit id="60e5d748c9218c048de8740bcac1703e7a50da1a" translate="yes" xml:space="preserve">
          <source>Trailing comments should be used sparingly. Instead of</source>
          <target state="translated">後続のコメントは控えめに使用してください。その代わりに</target>
        </trans-unit>
        <trans-unit id="b4e92ff02a7f9ca1e9c93153fdca1e9712b3f065" translate="yes" xml:space="preserve">
          <source>Trailing slices can be omitted:</source>
          <target state="translated">トレイリング・スライスは省略可能です。</target>
        </trans-unit>
        <trans-unit id="556492d634d78a1f54a40b4fbbb6e6c53716147d" translate="yes" xml:space="preserve">
          <source>Trailing zeros in the coefficients will be used in the evaluation, so they should be avoided if efficiency is a concern.</source>
          <target state="translated">係数の末尾のゼロは評価に使用されるので、効率性を重視する場合は避けるべきです。</target>
        </trans-unit>
        <trans-unit id="745b5ecf9a2d85dc724cf9ddd7a6df396eb1df69" translate="yes" xml:space="preserve">
          <source>Transforms a masked array into a flexible-type array.</source>
          <target state="translated">マスクされた配列をフレキシブル型の配列に変換します.</target>
        </trans-unit>
        <trans-unit id="5335ed0e86bcde3b96f32fd1545910f420f14d2e" translate="yes" xml:space="preserve">
          <source>Transition notice</source>
          <target state="translated">移行のお知らせ</target>
        </trans-unit>
        <trans-unit id="d362208ff2e702ca3538568841ed00ca61c441f9" translate="yes" xml:space="preserve">
          <source>Translate slice objects to concatenation along the first axis.</source>
          <target state="translated">スライスオブジェクトを第1軸に沿って連結するように変換します。</target>
        </trans-unit>
        <trans-unit id="c42fc49440b8d06a906b44be13eb608ca2ffc1dd" translate="yes" xml:space="preserve">
          <source>Translates slice objects to concatenation along the first axis.</source>
          <target state="translated">スライスオブジェクトを第1軸に沿った連結に変換します。</target>
        </trans-unit>
        <trans-unit id="ff7c65a71ec845e39d241d138fd72490df88fa74" translate="yes" xml:space="preserve">
          <source>Translates slice objects to concatenation along the second axis.</source>
          <target state="translated">スライスオブジェクトを第2軸に沿った連結に変換します。</target>
        </trans-unit>
        <trans-unit id="59ccc78dea6365b58077aeb5bd29c68b822c1ef5" translate="yes" xml:space="preserve">
          <source>Translating content</source>
          <target state="translated">コンテンツの翻訳</target>
        </trans-unit>
        <trans-unit id="8def3943422e0dc87b7f47772bd3dc4ad8ea550b" translate="yes" xml:space="preserve">
          <source>Transpose-like operations</source>
          <target state="translated">トランスポーズのような操作</target>
        </trans-unit>
        <trans-unit id="1dfdbda20e491607190c97bd4edf114a4a693811" translate="yes" xml:space="preserve">
          <source>Transposing a 1-D array returns an unchanged view of the original array.</source>
          <target state="translated">1次元配列を転置すると,元の配列の変更されていないビューが返されます.</target>
        </trans-unit>
        <trans-unit id="cfbc312acbc39b5f0298bdc7c7b5f4e1b759968b" translate="yes" xml:space="preserve">
          <source>Transposing and reshaping a matrix</source>
          <target state="translated">行列の転置とリシェイプ</target>
        </trans-unit>
        <trans-unit id="66408bfa15c9ed2902e447a43b1f7abcdee55a60" translate="yes" xml:space="preserve">
          <source>Transpositions and permutations, &lt;a href=&quot;numpy.transpose#numpy.transpose&quot;&gt;&lt;code&gt;numpy.transpose&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">転置と順列、&lt;a href=&quot;numpy.transpose#numpy.transpose&quot;&gt; &lt;code&gt;numpy.transpose&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="65154a91dcd03eb78f603f149abeb7b4b5c5b547" translate="yes" xml:space="preserve">
          <source>Travis Oliphant &amp;ndash; project founder / emeritus leader (2005-2012)</source>
          <target state="translated">トラビスオリファント&amp;ndash;プロジェクト創設者/名誉リーダー（2005-2012）</target>
        </trans-unit>
        <trans-unit id="a7b41f9df87a78abbe8128d5a249676911368def" translate="yes" xml:space="preserve">
          <source>Travis Oliphant - Project Founder / Emeritus Leader (served: 2005-2012)</source>
          <target state="translated">トラビス・オリファント-プロジェクト創設者/名誉リーダー(在任期間:2005年~2012年</target>
        </trans-unit>
        <trans-unit id="8cd1d8f1121212090792af3b195766028fb3300b" translate="yes" xml:space="preserve">
          <source>Treatment for division by zero.</source>
          <target state="translated">0で除算した場合の処理。</target>
        </trans-unit>
        <trans-unit id="c576a1cfdbaf816c1398a32382e59edc28900bee" translate="yes" xml:space="preserve">
          <source>Treatment for floating-point overflow.</source>
          <target state="translated">浮動小数点オーバーフローの処理</target>
        </trans-unit>
        <trans-unit id="17721dd3ac43e33f85ad621f2dc25c086c0470c0" translate="yes" xml:space="preserve">
          <source>Treatment for floating-point underflow.</source>
          <target state="translated">浮動小数点アンダーフローの処理。</target>
        </trans-unit>
        <trans-unit id="a13040b51033dafdb26f7572598a0d12e22e4ffe" translate="yes" xml:space="preserve">
          <source>Treatment for invalid floating-point operation.</source>
          <target state="translated">浮動小数点演算が無効な場合の処理</target>
        </trans-unit>
        <trans-unit id="1150736fa84c0c4e53f25517e34313dcdeeed227" translate="yes" xml:space="preserve">
          <source>Tricks and Tips</source>
          <target state="translated">コツとコツ</target>
        </trans-unit>
        <trans-unit id="daa2b8a97e48dc7878c0a5d70afe5d62a641a9fe" translate="yes" xml:space="preserve">
          <source>Trigger a build by pushing a commit of your edits to the repository. Note that you can do this on a branch, but it must be pushed upstream to the &lt;code&gt;MacPython/numpy-wheels&lt;/code&gt; repository to trigger uploads since only that repo has the appropriate tokens to allow uploads.</source>
          <target state="translated">編集のコミットをリポジトリにプッシュして、ビルドをトリガーします。ブランチでこれを行うことができますが、アップロードをトリガーするには、そのリポジトリのみがアップロードを許可する適切なトークンを持っているため、 &lt;code&gt;MacPython/numpy-wheels&lt;/code&gt; リポジトリにアップストリームでプッシュする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9ba6ba3648cadff3a99f26c6371ef76b8f5ec198" translate="yes" xml:space="preserve">
          <source>Trigger the wheel builds</source>
          <target state="translated">トリガーでホイールを構築</target>
        </trans-unit>
        <trans-unit id="05468e0c8d821343ed9a233c1d01733b9266bd0b" translate="yes" xml:space="preserve">
          <source>Trigger the wheels build by pointing the numpy-wheels repository at this commit. This can take up to an hour. The numpy-wheels repository is cloned from &lt;a href=&quot;https://github.com/MacPython/numpy-wheels&quot;&gt;https://github.com/MacPython/numpy-wheels&lt;/a&gt;. If this is the first release in a series, start with a pull as the repo may have been accessed and changed by someone else, then create a new branch for the series. If the branch already exists skip this:</source>
          <target state="translated">このコミットでnumpy-wheelsリポジトリをポイントして、wheelsビルドをトリガーします。これには最大1時間かかる場合があります。numpy-wheelsリポジトリは、&lt;a href=&quot;https://github.com/MacPython/numpy-wheels&quot;&gt;https：//github.com/MacPython/numpy-wheels&lt;/a&gt;から複製されます。これがシリーズの最初のリリースである場合は、他の誰かがリポジトリにアクセスして変更した可能性があるため、プルから始めて、シリーズの新しいブランチを作成します。ブランチがすでに存在する場合は、これをスキップしてください。</target>
        </trans-unit>
        <trans-unit id="4be7bc22dfdfa583bec627625a7e1101bc895967" translate="yes" xml:space="preserve">
          <source>Trigger the wheels build by pointing the numpy-wheels repository at this commit. This can take up to an hour. The numpy-wheels repository is cloned from &lt;a href=&quot;https://github.com/MacPython/numpy-wheels&quot;&gt;https://github.com/MacPython/numpy-wheels&lt;/a&gt;. Start with a pull as the repo may have been accessed and changed by someone else and a push will fail:</source>
          <target state="translated">このコミットでnumpy-wheelsリポジトリをポイントして、wheelsビルドをトリガーします。これには最大1時間かかる場合があります。numpy-wheelsリポジトリは、&lt;a href=&quot;https://github.com/MacPython/numpy-wheels&quot;&gt;https：//github.com/MacPython/numpy-wheels&lt;/a&gt;から複製されます。リポジトリが他の誰かによってアクセスおよび変更された可能性があり、プッシュが失敗するため、プルから開始します。</target>
        </trans-unit>
        <trans-unit id="3a49a3516e9535a98c78b0ab59efaa267faaaeac" translate="yes" xml:space="preserve">
          <source>Triggers &lt;a href=&quot;#c.NPY_ITER_COPY&quot;&gt;&lt;code&gt;NPY_ITER_COPY&lt;/code&gt;&lt;/a&gt;, and when an array operand is flagged for writing and is copied, causes the data in a copy to be copied back to &lt;code&gt;op[i]&lt;/code&gt; when &lt;code&gt;NpyIter_Deallocate&lt;/code&gt; is called.</source>
          <target state="translated">&lt;a href=&quot;#c.NPY_ITER_COPY&quot;&gt; &lt;code&gt;NPY_ITER_COPY&lt;/code&gt; を&lt;/a&gt;トリガーし、配列オペランドに書き込みのフラグが付けられてコピーされると、 &lt;code&gt;NpyIter_Deallocate&lt;/code&gt; が呼び出されたときにコピーのデータが &lt;code&gt;op[i]&lt;/code&gt; にコピーされます。</target>
        </trans-unit>
        <trans-unit id="b9e4c026492c440bf32166e0789393487d03b254" translate="yes" xml:space="preserve">
          <source>Trigonometric functions</source>
          <target state="translated">三角関数</target>
        </trans-unit>
        <trans-unit id="58cf0aee76fad599f97ff1db8c6a47d2270860db" translate="yes" xml:space="preserve">
          <source>Trigonometric inverse cosine, element-wise.</source>
          <target state="translated">三角関数の逆コサイン、要素法。</target>
        </trans-unit>
        <trans-unit id="b0b82a06c2ae28e8fcf146e965d0c41fd4531e3a" translate="yes" xml:space="preserve">
          <source>Trigonometric inverse tangent, element-wise.</source>
          <target state="translated">三角関数の逆正接、要素ごとに。</target>
        </trans-unit>
        <trans-unit id="ce4f3fa4852db4b9b207eedadc12e11135e46d85" translate="yes" xml:space="preserve">
          <source>Trigonometric sine, element-wise.</source>
          <target state="translated">三角関数的な正弦、要素ごとに。</target>
        </trans-unit>
        <trans-unit id="10a283c17897bbd0b4cb4fd810a9eeb88aa8ef58" translate="yes" xml:space="preserve">
          <source>Trim the leading and/or trailing zeros from a 1-D array or sequence.</source>
          <target state="translated">1次元配列またはシーケンスから先頭および/または末尾のゼロをトリミングします。</target>
        </trans-unit>
        <trans-unit id="e488bb5cb2e281f3b003ce95222b8e4917db65a6" translate="yes" xml:space="preserve">
          <source>Troubleshooting ImportError</source>
          <target state="translated">ImportErrorのトラブルシューティング</target>
        </trans-unit>
        <trans-unit id="88b33e4e12f75ac8bf792aebde41f1a090f3a612" translate="yes" xml:space="preserve">
          <source>True</source>
          <target state="translated">True</target>
        </trans-unit>
        <trans-unit id="dec064efe14ed7a73f97fa4832f7dc39f8d37259" translate="yes" xml:space="preserve">
          <source>True divide self by other in-place.</source>
          <target state="translated">真の意味での自己を他の場所で分割する。</target>
        </trans-unit>
        <trans-unit id="7c6199295c88c515de03909ca69e74e54d8c40d0" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;element&lt;/code&gt; is a scalar type, False if it is not.</source>
          <target state="translated">&lt;code&gt;element&lt;/code&gt; がスカラー型の場合はTrue、そうでない場合はFalse。</target>
        </trans-unit>
        <trans-unit id="39cf2a1ac05eb7ec1f611fa8df3b32f9cff1d558" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;m.dtype.type&lt;/code&gt; is MaskType, False otherwise.</source>
          <target state="translated">&lt;code&gt;m.dtype.type&lt;/code&gt; がMaskTypeの場合はTrue、それ以外の場合はFalse。</target>
        </trans-unit>
        <trans-unit id="c7e5263b6e49f0164ce122995ea161e565df58fa" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;num&lt;/code&gt; is a scalar type, False if it is not.</source>
          <target state="translated">&lt;code&gt;num&lt;/code&gt; がスカラー型の場合はTrue、そうでない場合はFalse。</target>
        </trans-unit>
        <trans-unit id="2655b1728487edfb72db0ecd08ff9ea666177ee0" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;path&lt;/code&gt; exists.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; が存在する場合は真。</target>
        </trans-unit>
        <trans-unit id="0acadbce2849d20449e701a26739adbff1b98e78" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;x&lt;/code&gt; is a MaskedArray with masked values, False otherwise.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; がマスクされた値を持つMaskedArrayの場合はTrue、そうでない場合はFalse。</target>
        </trans-unit>
        <trans-unit id="83f25ea97ce8639113893298b33aa2fdafa083b7" translate="yes" xml:space="preserve">
          <source>True if &lt;code&gt;x&lt;/code&gt; is a MaskedArray.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; がMaskedArrayの場合はTrue 。</target>
        </trans-unit>
        <trans-unit id="05ff71445923acdd0c38d736b463809c9ccd39de" translate="yes" xml:space="preserve">
          <source>True if a Fortran 77 compiler is available (because a simple Fortran 77 code was able to be compiled successfully).</source>
          <target state="translated">Fortran 77コンパイラが利用可能な場合は真です(単純なFortran 77コードが正常にコンパイルできたため)。</target>
        </trans-unit>
        <trans-unit id="00cd0fd9fd4e9fcf05a5961ba064f7c5fc57b8ef" translate="yes" xml:space="preserve">
          <source>True if a Fortran 90 compiler is available (because a simple Fortran 90 code was able to be compiled successfully)</source>
          <target state="translated">Fortran 90 コンパイラが利用可能な場合は真(単純な Fortran 90 コードが正常にコンパイルできたため</target>
        </trans-unit>
        <trans-unit id="3616df3a5e4787a2b7d174f6c5a2763bf50c6e85" translate="yes" xml:space="preserve">
          <source>True if byteorder characters ( &lt;a href=&quot;#c.NPY_LITTLE&quot;&gt;&lt;code&gt;NPY_LITTLE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#c.NPY_BIG&quot;&gt;&lt;code&gt;NPY_BIG&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#c.NPY_NATIVE&quot;&gt;&lt;code&gt;NPY_NATIVE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#c.NPY_IGNORE&quot;&gt;&lt;code&gt;NPY_IGNORE&lt;/code&gt;&lt;/a&gt; ) are either equal or equivalent as to their specification of a native byte order. Thus, on a little-endian machine &lt;a href=&quot;#c.NPY_LITTLE&quot;&gt;&lt;code&gt;NPY_LITTLE&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#c.NPY_NATIVE&quot;&gt;&lt;code&gt;NPY_NATIVE&lt;/code&gt;&lt;/a&gt; are equivalent where they are not equivalent on a big-endian machine.</source>
          <target state="translated">バイトオーダー文字（&lt;a href=&quot;#c.NPY_LITTLE&quot;&gt; &lt;code&gt;NPY_LITTLE&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#c.NPY_BIG&quot;&gt; &lt;code&gt;NPY_BIG&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#c.NPY_NATIVE&quot;&gt; &lt;code&gt;NPY_NATIVE&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#c.NPY_IGNORE&quot;&gt; &lt;code&gt;NPY_IGNORE&lt;/code&gt; &lt;/a&gt;）が、ネイティブバイトオーダーの指定と等しいか同等である場合に真。したがって、リトルエンディアンのマシンでは、&lt;a href=&quot;#c.NPY_LITTLE&quot;&gt; &lt;code&gt;NPY_LITTLE&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#c.NPY_NATIVE&quot;&gt; &lt;code&gt;NPY_NATIVE&lt;/code&gt; &lt;/a&gt;は同等ですが、ビッグエンディアンのマシンでは同等ではありません。</target>
        </trans-unit>
        <trans-unit id="213506708b75038d86119f896c93fd459688fdaa" translate="yes" xml:space="preserve">
          <source>True if byteorder characters ( &lt;code&gt;NPY_LITTLE&lt;/code&gt;, &lt;code&gt;NPY_BIG&lt;/code&gt;, &lt;code&gt;NPY_NATIVE&lt;/code&gt;, &lt;code&gt;NPY_IGNORE&lt;/code&gt; ) are either equal or equivalent as to their specification of a native byte order. Thus, on a little-endian machine &lt;code&gt;NPY_LITTLE&lt;/code&gt; and &lt;code&gt;NPY_NATIVE&lt;/code&gt; are equivalent where they are not equivalent on a big-endian machine.</source>
          <target state="translated">バイトオーダー文字（ &lt;code&gt;NPY_LITTLE&lt;/code&gt; 、 &lt;code&gt;NPY_BIG&lt;/code&gt; 、 &lt;code&gt;NPY_NATIVE&lt;/code&gt; 、 &lt;code&gt;NPY_IGNORE&lt;/code&gt; ）がネイティブのバイトオーダーの指定に関して等しいか同等である場合はtrue。したがって、リトルエンディアンマシンでは、 &lt;code&gt;NPY_LITTLE&lt;/code&gt; と &lt;code&gt;NPY_NATIVE&lt;/code&gt; は同等ですが、ビッグエンディアンマシンでは同等ではありません。</target>
        </trans-unit>
        <trans-unit id="ba3294550f0a20e5d9deb7f04a95fb8e4b4d1d46" translate="yes" xml:space="preserve">
          <source>True if cast can occur according to the casting rule.</source>
          <target state="translated">キャストルールに従ってキャストが発生すれば真。</target>
        </trans-unit>
        <trans-unit id="1f63565b32d103f3a4de31640d426343af47dd7d" translate="yes" xml:space="preserve">
          <source>True if equivalent, False otherwise.</source>
          <target state="translated">等価であれば真、そうでなければ偽。</target>
        </trans-unit>
        <trans-unit id="1e741019d05ad4b1c0222d2d53486f99a6732190" translate="yes" xml:space="preserve">
          <source>True if other is same class as self</source>
          <target state="translated">その他が自己と同じクラスであれば真</target>
        </trans-unit>
        <trans-unit id="70fbd415e3863800b42dd70f2afc2d0435498df0" translate="yes" xml:space="preserve">
          <source>True if the coefficients are the same, False otherwise.</source>
          <target state="translated">係数が同じであれば真、そうでなければ偽。</target>
        </trans-unit>
        <trans-unit id="a6afbacb41b3137cec218f989dffb959ca4f44cd" translate="yes" xml:space="preserve">
          <source>True if the domains are the same, False otherwise.</source>
          <target state="translated">ドメインが同じ場合はTrue、そうでない場合はFalse。</target>
        </trans-unit>
        <trans-unit id="4bc2a6d6f70eb24c8def5df03724644edb474780" translate="yes" xml:space="preserve">
          <source>True if the windows are the same, False otherwise.</source>
          <target state="translated">ウィンドウが同じ場合はTrue、そうでない場合はFalse。</target>
        </trans-unit>
        <trans-unit id="24f9df4fb7133abd7e86f4b5f0391c10a93621e7" translate="yes" xml:space="preserve">
          <source>True if two arrays have the same shape and elements, False otherwise.</source>
          <target state="translated">2つの配列が同じ形状と要素を持つ場合はTrue、そうでない場合はFalse。</target>
        </trans-unit>
        <trans-unit id="755e15abf3303ababe3ade30f10af71c607d4530" translate="yes" xml:space="preserve">
          <source>True where &lt;code&gt;x&lt;/code&gt; is NaN, false otherwise. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; がNaNの場合はtrue、それ以外の場合はfalse。 &lt;code&gt;x&lt;/code&gt; がスカラーの場合、これはスカラーです。</target>
        </trans-unit>
        <trans-unit id="dc0b3f0e3c0fa8c731e1bcdadee661ee71b2ddb8" translate="yes" xml:space="preserve">
          <source>True where &lt;code&gt;x&lt;/code&gt; is NaT, false otherwise. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="translated">真のどこ &lt;code&gt;x&lt;/code&gt; は NAT、それ以外の場合はfalseです。 &lt;code&gt;x&lt;/code&gt; がスカラーの場合、これはスカラーです。</target>
        </trans-unit>
        <trans-unit id="cd270c6be47d5f9045a9640d5cc8ead8711407bc" translate="yes" xml:space="preserve">
          <source>True where &lt;code&gt;x&lt;/code&gt; is not positive infinity, negative infinity, or NaN; false otherwise. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; が正の無限大、負の無限大、またはNaNでない場合は真。それ以外の場合はfalse。 &lt;code&gt;x&lt;/code&gt; がスカラーの場合、これはスカラーです。</target>
        </trans-unit>
        <trans-unit id="3170e8eb3762dd10d0e3ab109761eb5c944e9ac1" translate="yes" xml:space="preserve">
          <source>True where &lt;code&gt;x&lt;/code&gt; is positive or negative infinity, false otherwise. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="translated">どこ真 &lt;code&gt;x&lt;/code&gt; が正または負の無限大である、そうでない場合はfalse。 &lt;code&gt;x&lt;/code&gt; がスカラーの場合、これはスカラーです。</target>
        </trans-unit>
        <trans-unit id="425b939d0909e079d100ad47521c0febc0bd307a" translate="yes" xml:space="preserve">
          <source>Truncate s values at 50 so plot is interesting:</source>
          <target state="translated">sの値を50で切り捨てているので、プロットが面白いです。</target>
        </trans-unit>
        <trans-unit id="8726579bd5d3f34275a243eb604a9ceb6cbd38eb" translate="yes" xml:space="preserve">
          <source>Truncate series to length &lt;code&gt;size&lt;/code&gt;.</source>
          <target state="translated">シリーズを長さ &lt;code&gt;size&lt;/code&gt; 切り詰めます。</target>
        </trans-unit>
        <trans-unit id="adcf68c15599690309b811decf083d5555853eeb" translate="yes" xml:space="preserve">
          <source>Truncate series to the given degree.</source>
          <target state="translated">級数を与えられた程度に切り捨てます。</target>
        </trans-unit>
        <trans-unit id="d2338e206b938414aa6688a0afb4b20ac9ad0ec9" translate="yes" xml:space="preserve">
          <source>Truth value of an array (&lt;a href=&quot;https://docs.python.org/dev/library/functions.html#bool&quot;&gt;&lt;code&gt;bool()&lt;/code&gt;&lt;/a&gt;):</source>
          <target state="translated">配列の真理値（&lt;a href=&quot;https://docs.python.org/dev/library/functions.html#bool&quot;&gt; &lt;code&gt;bool()&lt;/code&gt; &lt;/a&gt;）：</target>
        </trans-unit>
        <trans-unit id="d78b8c914ad90242aebfa1ad45be017c8a4ed426" translate="yes" xml:space="preserve">
          <source>Truth value of an array (&lt;code&gt;bool&lt;/code&gt;):</source>
          <target state="translated">配列の真理値（ &lt;code&gt;bool&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="d14d79df6800bf8b855c978794baaad558b55ab7" translate="yes" xml:space="preserve">
          <source>Truth value testing</source>
          <target state="translated">真理値検査</target>
        </trans-unit>
        <trans-unit id="a34d6317df428f3a0882e4fcc17ec8a423d926fc" translate="yes" xml:space="preserve">
          <source>Truth-value testing of an array invokes &lt;a href=&quot;generated/numpy.ndarray.__bool__#numpy.ndarray.__bool__&quot;&gt;&lt;code&gt;ndarray.__bool__&lt;/code&gt;&lt;/a&gt;, which raises an error if the number of elements in the array is larger than 1, because the truth value of such arrays is ambiguous. Use &lt;a href=&quot;generated/numpy.ndarray.any#numpy.ndarray.any&quot;&gt;&lt;code&gt;.any()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;generated/numpy.ndarray.all#numpy.ndarray.all&quot;&gt;&lt;code&gt;.all()&lt;/code&gt;&lt;/a&gt; instead to be clear about what is meant in such cases. (If the number of elements is 0, the array evaluates to &lt;code&gt;False&lt;/code&gt;.)</source>
          <target state="translated">配列の真理値のテストでは&lt;a href=&quot;generated/numpy.ndarray.__bool__#numpy.ndarray.__bool__&quot;&gt; &lt;code&gt;ndarray.__bool__&lt;/code&gt; &lt;/a&gt;が呼び出され、配列の要素の数が1より大きい場合、そのような配列の真理値は不明確であるため、エラーが発生します。使用&lt;a href=&quot;generated/numpy.ndarray.any#numpy.ndarray.any&quot;&gt; &lt;code&gt;.any()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;generated/numpy.ndarray.all#numpy.ndarray.all&quot;&gt; &lt;code&gt;.all()&lt;/code&gt; &lt;/a&gt;の代わりにこのような場合に何を意味するかについて明確にします。（要素の数が0の場合、配列は &lt;code&gt;False&lt;/code&gt; と評価されます。）</target>
        </trans-unit>
        <trans-unit id="2ecf59a43e289ad2b017cf95dec49da40904a53e" translate="yes" xml:space="preserve">
          <source>Try to get version string of a package.</source>
          <target state="translated">パッケージのバージョン文字列を取得してみます。</target>
        </trans-unit>
        <trans-unit id="d41c38be32c336059996707815d0e3ddc6359848" translate="yes" xml:space="preserve">
          <source>Try to keep the runtime of the benchmark reasonable.</source>
          <target state="translated">ベンチマークの実行時間を合理的に保つようにしてください。</target>
        </trans-unit>
        <trans-unit id="78b28b6348f61eb4f458af0454cbb48914113f96" translate="yes" xml:space="preserve">
          <source>Tuple &lt;code&gt;(item_dtype, shape)&lt;/code&gt; if this &lt;a href=&quot;#numpy.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt; describes a sub-array, and None otherwise.</source>
          <target state="translated">この&lt;a href=&quot;#numpy.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt;がサブ配列を表す場合はタプル &lt;code&gt;(item_dtype, shape)&lt;/code&gt; 、それ以外の場合はNone。</target>
        </trans-unit>
        <trans-unit id="3e6ddb0c1b967dfa42de0aef208f74bd1f3fd6c6" translate="yes" xml:space="preserve">
          <source>Tuple &lt;code&gt;(item_dtype, shape)&lt;/code&gt; if this &lt;a href=&quot;generated/numpy.dtype#numpy.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt; describes a sub-array, and None otherwise.</source>
          <target state="translated">この&lt;a href=&quot;generated/numpy.dtype#numpy.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt;がサブ配列を表す場合はタプル &lt;code&gt;(item_dtype, shape)&lt;/code&gt; 、それ以外の場合はNone。</target>
        </trans-unit>
        <trans-unit id="f3757a0166a586f2a2125cefab21784843d386d2" translate="yes" xml:space="preserve">
          <source>Tuple &lt;code&gt;(item_dtype, shape)&lt;/code&gt; if this &lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt; describes a sub-array, and None otherwise.</source>
          <target state="translated">この&lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt;がサブ配列を表す場合はタプル &lt;code&gt;(item_dtype, shape)&lt;/code&gt; 、それ以外の場合はNone。</target>
        </trans-unit>
        <trans-unit id="84be13d7b7fcc75e7ec8441a86e66cf302003bb9" translate="yes" xml:space="preserve">
          <source>Tuple axis arguments to ufuncs are equivalent:</source>
          <target state="translated">ufuncsへのタプル軸の引数は等価です。</target>
        </trans-unit>
        <trans-unit id="92e7c78c7d4063f090081adef280802cf975a20b" translate="yes" xml:space="preserve">
          <source>Tuple object dtypes</source>
          <target state="translated">タプルオブジェクトdtypes</target>
        </trans-unit>
        <trans-unit id="288ea08ff10a961743d4d8b925f5d1931f661310" translate="yes" xml:space="preserve">
          <source>Tuple of array dimensions.</source>
          <target state="translated">配列の次元のタプル。</target>
        </trans-unit>
        <trans-unit id="f5d08265a0d5770b0b5299133319ac3ca12e44d4" translate="yes" xml:space="preserve">
          <source>Tuple of bytes steps in each dimension.</source>
          <target state="translated">各次元のバイト・ステップのタプル。</target>
        </trans-unit>
        <trans-unit id="119e92503836c54689c5f8c6dff4e15a28816a46" translate="yes" xml:space="preserve">
          <source>Tuple of bytes to step in each dimension when traversing an array.</source>
          <target state="translated">配列を横断する際に各次元でステップするバイトのタプル。</target>
        </trans-unit>
        <trans-unit id="08a4b4faf13c4a1ee940941cfebf009124c6372f" translate="yes" xml:space="preserve">
          <source>Tuple whose elements are the array size in each dimension. Each entry is an integer (a Python &lt;a href=&quot;https://docs.python.org/dev/library/functions.html#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;). Note that these integers could be larger than the platform &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;long&lt;/code&gt; could hold (a Python &lt;a href=&quot;https://docs.python.org/dev/library/functions.html#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt; is a C &lt;code&gt;long&lt;/code&gt;). It is up to the code using this attribute to handle this appropriately; either by raising an error when overflow is possible, or by using &lt;code&gt;long long&lt;/code&gt; as the C type for the shapes.</source>
          <target state="translated">要素が各次元の配列サイズであるタプル。各エントリは整数（Python &lt;a href=&quot;https://docs.python.org/dev/library/functions.html#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt;）です。これらの整数は、プラットフォームの &lt;code&gt;int&lt;/code&gt; または &lt;code&gt;long&lt;/code&gt; が保持できるよりも大きくなる可能性があることに注意してください（Pythonの&lt;a href=&quot;https://docs.python.org/dev/library/functions.html#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt;はC &lt;code&gt;long&lt;/code&gt; です）。これを適切に処理するのは、この属性を使用するコード次第です。オーバーフローが発生する可能性があるときにエラーを発生させるか、形状にCタイプとして &lt;code&gt;long long&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="a39e9bc9ce6796bfca6ebd0c63299d64e075f553" translate="yes" xml:space="preserve">
          <source>Tuple whose elements are the array size in each dimension. Each entry is an integer (a Python int or long). Note that these integers could be larger than the platform &amp;ldquo;int&amp;rdquo; or &amp;ldquo;long&amp;rdquo; could hold (a Python int is a C long). It is up to the code using this attribute to handle this appropriately; either by raising an error when overflow is possible, or by using &lt;code&gt;Py_LONG_LONG&lt;/code&gt; as the C type for the shapes.</source>
          <target state="translated">要素が各次元の配列サイズであるタプル。各エントリは整数（Pythonのintまたはlong）です。これらの整数は、プラットフォームの「int」または「long」が保持できるよりも大きい可能性があることに注意してください（PythonのintはCのlongです）。これを適切に処理するかどうかは、この属性を使用するコード次第です。オーバーフローが発生する可能性がある場合にエラーを発生させるか、シェイプのCタイプとして &lt;code&gt;Py_LONG_LONG&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="20d441ae2c7520e9597892d62d069dab012afe76" translate="yes" xml:space="preserve">
          <source>Turns pure python into efficient machine code through jit-like optimizations</source>
          <target state="translated">純粋な python を jit ライクな最適化により効率的なマシンコードに変換します。</target>
        </trans-unit>
        <trans-unit id="d9bd3e52f2caf4d6594b811b3960a4952fbdcd14" translate="yes" xml:space="preserve">
          <source>Tutorial: Linear algebra on n-dimensional arrays</source>
          <target state="translated">チュートリアル.n次元配列上の線形代数</target>
        </trans-unit>
        <trans-unit id="6cedb23d3e7c47dc54b88999730d0194898d3934" translate="yes" xml:space="preserve">
          <source>Tutorial: Masked Arrays</source>
          <target state="translated">チュートリアル マスクド・アレイ</target>
        </trans-unit>
        <trans-unit id="654171647baa6be8557a5d627cf35c7075ebb257" translate="yes" xml:space="preserve">
          <source>Tutorials</source>
          <target state="translated">Tutorials</target>
        </trans-unit>
        <trans-unit id="a3aad8fcfc1fb793d988e46dd13b4c587f04cc94" translate="yes" xml:space="preserve">
          <source>Tutorials and summaries</source>
          <target state="translated">チュートリアルとまとめ</target>
        </trans-unit>
        <trans-unit id="0e8bc0a325097293ba3968264a6e780fc207371f" translate="yes" xml:space="preserve">
          <source>Tweaking the conversion</source>
          <target state="translated">変換を微調整する</target>
        </trans-unit>
        <trans-unit id="a84f46a1bd48b0888bd11bac416f31bd455192d4" translate="yes" xml:space="preserve">
          <source>Two and three dots in difference specs</source>
          <target state="translated">2ドットと3ドットの差スペック</target>
        </trans-unit>
        <trans-unit id="eff015ed2b91595519ef0f82b5da310790ed8380" translate="yes" xml:space="preserve">
          <source>Two groups, children of diabetics (25 people) and children from people without diabetes (25 controls). Fasting blood glucose was measured, case group had a mean value of 86.1, controls had a mean value of 82.2. Standard deviations were 2.09 and 2.49 respectively. Are these data consistent with the null hypothesis that the parents diabetic status does not affect their children&amp;rsquo;s blood glucose levels? Calculating the F statistic from the data gives a value of 36.01.</source>
          <target state="translated">2つのグループ、糖尿病の子供（25人）と糖尿病のない人（25人の対照）の子供。空腹時血糖が測定され、症例群の平均値は86.1、対照群の平均値は82.2でした。標準偏差はそれぞれ2.09と2.49でした。これらのデータは、親の糖尿病状態が子供の血糖値に影響を与えないという帰無仮説と一致していますか？データからF統計を計算すると、値は36.01になります。</target>
        </trans-unit>
        <trans-unit id="9a29304c220b1dd3134936cc76050af186cb5278" translate="yes" xml:space="preserve">
          <source>Two times the reciprocal of pi (</source>
          <target state="translated">πの逆数の2倍(</target>
        </trans-unit>
        <trans-unit id="c6b3128dd2f1c22ff8a2b286be1379fe8a8fe179" translate="yes" xml:space="preserve">
          <source>Two-by-four array of samples from</source>
          <target state="translated">からのサンプルのツーバイフォー配列</target>
        </trans-unit>
        <trans-unit id="b1f6d6c8746a437f90f0dee674c0b93df2f99381" translate="yes" xml:space="preserve">
          <source>Two-by-four array of samples from N(3, 6.25):</source>
          <target state="translated">N(3,6.25)からのサンプルの2×4配列。</target>
        </trans-unit>
        <trans-unit id="3db221513448342ff7f1391357dc023cdf6dc3dc" translate="yes" xml:space="preserve">
          <source>Two-by-four matrix of samples from</source>
          <target state="translated">からのサンプルの2×4マトリックス</target>
        </trans-unit>
        <trans-unit id="862d5ad68d4b198349fd0cc9c98a5797e23f13c7" translate="yes" xml:space="preserve">
          <source>Two-dimensional array:</source>
          <target state="translated">二次元配列。</target>
        </trans-unit>
        <trans-unit id="4ca814bb64ef6897ea819d313fffbc4815334f0e" translate="yes" xml:space="preserve">
          <source>Two-dimensional arrays are tested in exactly the same manner. The above description applies, but with &lt;code&gt;Matrix&lt;/code&gt; substituted for &lt;code&gt;Vector&lt;/code&gt;. For three-dimensional tests, substitute &lt;code&gt;Tensor&lt;/code&gt; for &lt;code&gt;Vector&lt;/code&gt;. For four-dimensional tests, substitute &lt;code&gt;SuperTensor&lt;/code&gt; for &lt;code&gt;Vector&lt;/code&gt;. For flat in-place array tests, substitute &lt;code&gt;Flat&lt;/code&gt; for &lt;code&gt;Vector&lt;/code&gt;. For the descriptions that follow, we will reference the &lt;code&gt;Vector&lt;/code&gt; tests, but the same information applies to &lt;code&gt;Matrix&lt;/code&gt;, &lt;code&gt;Tensor&lt;/code&gt; and &lt;code&gt;SuperTensor&lt;/code&gt; tests.</source>
          <target state="translated">2次元配列は、まったく同じ方法でテストされます。上記の説明が適用されますが、 &lt;code&gt;Vector&lt;/code&gt; の代わりに &lt;code&gt;Matrix&lt;/code&gt; が使用されます。 3次元のテストでは、代用 &lt;code&gt;Tensor&lt;/code&gt; するために &lt;code&gt;Vector&lt;/code&gt; 。 4次元のテストでは、代用 &lt;code&gt;SuperTensor&lt;/code&gt; をするために &lt;code&gt;Vector&lt;/code&gt; 。フラットインプレース配列のテストでは、代わりに &lt;code&gt;Flat&lt;/code&gt; するために &lt;code&gt;Vector&lt;/code&gt; 。以下の説明では、 &lt;code&gt;Vector&lt;/code&gt; テストを参照しますが、同じ情報が &lt;code&gt;Matrix&lt;/code&gt; テスト、 &lt;code&gt;Tensor&lt;/code&gt; テスト、および &lt;code&gt;SuperTensor&lt;/code&gt; テストにも適用されます。</target>
        </trans-unit>
        <trans-unit id="3deb7456519697ecf4eefc455516c969a3681bae" translate="yes" xml:space="preserve">
          <source>Type</source>
          <target state="translated">Type</target>
        </trans-unit>
        <trans-unit id="4f87d1dd8d472cbdfec76a8cf89933a4a1cf8dbd" translate="yes" xml:space="preserve">
          <source>Type Promotion</source>
          <target state="translated">タイプ別プロモーション</target>
        </trans-unit>
        <trans-unit id="315f6367d2e7e25cde681d099ca28e1c2c774de1" translate="yes" xml:space="preserve">
          <source>Type declarations</source>
          <target state="translated">型宣言</target>
        </trans-unit>
        <trans-unit id="546ef13b4643b6acadc0951eac37d6f468caac3d" translate="yes" xml:space="preserve">
          <source>Type description examples</source>
          <target state="translated">タイプ記述例</target>
        </trans-unit>
        <trans-unit id="966782d7443e2170cf499e59f9a8368a7b7380cd" translate="yes" xml:space="preserve">
          <source>Type has fields associated with it.</source>
          <target state="translated">タイプには、それに関連付けられたフィールドがあります。</target>
        </trans-unit>
        <trans-unit id="ad1651cc08eba91d6dce8f9e7cbe0420ed624c49" translate="yes" xml:space="preserve">
          <source>Type has no size information attached, and can be resized. Should only be called on flexible dtypes. Types that are attached to an array will always be sized, hence the array form of this macro not existing.</source>
          <target state="translated">この型はサイズ情報を持たず、サイズを変更することができます。柔軟性のある dtypes でのみ呼び出されるべきです。配列にアタッチされた型は常にサイズが変更されます。</target>
        </trans-unit>
        <trans-unit id="00fea5456fe9ccd4a61fecaaa45953e334c1c594" translate="yes" xml:space="preserve">
          <source>Type is either flexible or user-defined.</source>
          <target state="translated">タイプは、柔軟性のあるものとユーザー定義のものがあります。</target>
        </trans-unit>
        <trans-unit id="fd89c694ef19c6e785630016c5d715bce35c6076" translate="yes" xml:space="preserve">
          <source>Type is preserved for boolean arrays, so the result will contain &lt;code&gt;False&lt;/code&gt; when consecutive elements are the same and &lt;code&gt;True&lt;/code&gt; when they differ.</source>
          <target state="translated">ブール配列のタイプは保持されるため、連続する要素が同じ場合は結果に &lt;code&gt;False&lt;/code&gt; が含まれ、異なる場合は &lt;code&gt;True&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="5f129dda4a5f86710986e28a3910cacd0ab66b0a" translate="yes" xml:space="preserve">
          <source>Type of comparison.</source>
          <target state="translated">比較の種類。</target>
        </trans-unit>
        <trans-unit id="c36d17e1133f5c5a545edd7db2e2ccd0a71a9cf5" translate="yes" xml:space="preserve">
          <source>Type of the data (integer, float, Python object, etc.)</source>
          <target state="translated">データの型(整数、float、Pythonオブジェクトなど</target>
        </trans-unit>
        <trans-unit id="dd429360d0a73315317719cd2b034bd7849c79e3" translate="yes" xml:space="preserve">
          <source>Type of the returned array and of the accumulator in which the elements are summed. If &lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt; is not specified, it defaults to the dtype of &lt;code&gt;a&lt;/code&gt;, unless &lt;code&gt;a&lt;/code&gt; has an integer dtype with a precision less than that of the default platform integer. In that case, the default platform integer is used.</source>
          <target state="translated">返された配列と、要素が合計されるアキュムレータのタイプ。&lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt;が指定されていない場合、デフォルトのプラットフォーム整数の精度よりも低い精度の整数dtypeがない限り &lt;code&gt;a&lt;/code&gt; デフォルトで &lt;code&gt;a&lt;/code&gt; のdtype になります。その場合、デフォルトのプラットフォーム整数が使用されます。</target>
        </trans-unit>
        <trans-unit id="07bc03c5a2d510ae05b611f9e4728e3dfbb4d656" translate="yes" xml:space="preserve">
          <source>Type of the returned array, as well as of the accumulator in which the elements are multiplied. If &lt;em&gt;dtype&lt;/em&gt; is not specified, it defaults to the dtype of &lt;code&gt;a&lt;/code&gt;, unless &lt;code&gt;a&lt;/code&gt; has an integer dtype with a precision less than that of the default platform integer. In that case, the default platform integer is used instead.</source>
          <target state="translated">返される配列のタイプと、要素が乗算されるアキュムレータのタイプ。&lt;em&gt;dtype&lt;/em&gt;が指定されていない場合、デフォルトのプラットフォーム整数の精度よりも低い精度の整数dtypeがない限り &lt;code&gt;a&lt;/code&gt; デフォルトで &lt;code&gt;a&lt;/code&gt; のdtype になります。その場合、デフォルトのプラットフォーム整数が代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="2fbcc881be006ea806d10d1a75e79dec487e047f" translate="yes" xml:space="preserve">
          <source>Type of the returned view, e.g., ndarray or matrix. Again, omission of the parameter results in type preservation.</source>
          <target state="translated">返されるビューの型。ここでも、パラメータを省略すると型が保存されます。</target>
        </trans-unit>
        <trans-unit id="36795fd8406bf11fda0ac3128a88df4463dd2892" translate="yes" xml:space="preserve">
          <source>Type of the returned view, e.g., ndarray or matrix. Again, the default None results in type preservation.</source>
          <target state="translated">返されるビューの型(例:ndarrayやmatrix)。ここでも、デフォルトの None は型を保持します。</target>
        </trans-unit>
        <trans-unit id="e3dd48b9d6f09dc7416ab4d63d6ccc2dc14a5715" translate="yes" xml:space="preserve">
          <source>Type of the returned view, either ndarray or a subclass. The default None results in type preservation.</source>
          <target state="translated">返されるビューの型は ndarray またはサブクラスのいずれかです。デフォルトの None は型を保持します。</target>
        </trans-unit>
        <trans-unit id="9d0b3189219da3d7ba109eef463be8e2071fbe7e" translate="yes" xml:space="preserve">
          <source>Type promotion in NumPy works similarly to the rules in languages like C++, with some slight differences. When both scalars and arrays are used, the array&amp;rsquo;s type takes precedence and the actual value of the scalar is taken into account.</source>
          <target state="translated">NumPyでの型の昇格は、C ++などの言語の規則と同様に機能しますが、若干の違いがあります。スカラーと配列の両方が使用される場合、配列の型が優先され、スカラーの実際の値が考慮されます。</target>
        </trans-unit>
        <trans-unit id="66585ef6b68c044b299bc7220f22788121e21167" translate="yes" xml:space="preserve">
          <source>Type provided:</source>
          <target state="translated">タイプが提供されています。</target>
        </trans-unit>
        <trans-unit id="bc25fc1327a92506da2b55272b3113fcffa65d61" translate="yes" xml:space="preserve">
          <source>Type represents Boolean data type.</source>
          <target state="translated">型はブール値のデータ型を表します。</target>
        </trans-unit>
        <trans-unit id="60db025c166ec63b9a181b61c24b20c5d24b0648" translate="yes" xml:space="preserve">
          <source>Type represents a signed integer.</source>
          <target state="translated">型は符号付き整数を表します。</target>
        </trans-unit>
        <trans-unit id="acb6256437982d272438054c848d82884163b4d8" translate="yes" xml:space="preserve">
          <source>Type represents a string data type.</source>
          <target state="translated">型は文字列データ型を表します。</target>
        </trans-unit>
        <trans-unit id="08f325041fae51a65ee6e08f868548827f3e2b61" translate="yes" xml:space="preserve">
          <source>Type represents a user-defined type.</source>
          <target state="translated">Typeは、ユーザー定義のタイプを表します。</target>
        </trans-unit>
        <trans-unit id="f5f87b05bbeb10ab3c2ec34871c51fb7f3e190f2" translate="yes" xml:space="preserve">
          <source>Type represents an enumerated type corresponding to one of the standard Python scalar (bool, int, float, or complex).</source>
          <target state="translated">Typeは、Pythonの標準スカラ(bool,int,float,complex)のいずれかに対応する列挙型を表します。</target>
        </trans-unit>
        <trans-unit id="6fc847c0dbefe834d836a7b9b36c518b8a349fc4" translate="yes" xml:space="preserve">
          <source>Type represents an unsigned integer.</source>
          <target state="translated">型は符号なし整数を表します。</target>
        </trans-unit>
        <trans-unit id="f8e7a296ef6aceb534615bd823bf7fad61a5043e" translate="yes" xml:space="preserve">
          <source>Type represents any complex floating point number.</source>
          <target state="translated">型は任意の複素浮動小数点数を表します。</target>
        </trans-unit>
        <trans-unit id="28cd3b87be44c11187d7cc10075315e307082083" translate="yes" xml:space="preserve">
          <source>Type represents any floating point number.</source>
          <target state="translated">型は任意の浮動小数点数を表します。</target>
        </trans-unit>
        <trans-unit id="579601ba7e8ea9eb8623a33cadfe20f9eaea6f83" translate="yes" xml:space="preserve">
          <source>Type represents any integer, floating point, or complex floating point number.</source>
          <target state="translated">型は、任意の整数、浮動小数点、または複素浮動小数点数を表します。</target>
        </trans-unit>
        <trans-unit id="051ab06f1a62606ef03aadb95e9e56f705f31488" translate="yes" xml:space="preserve">
          <source>Type represents any integer.</source>
          <target state="translated">型は任意の整数を表します。</target>
        </trans-unit>
        <trans-unit id="a2ba1da5781162c52e0abb1d3993de06d380b834" translate="yes" xml:space="preserve">
          <source>Type represents object data type.</source>
          <target state="translated">Typeはオブジェクトのデータ型を表します。</target>
        </trans-unit>
        <trans-unit id="20eece7c06865b2554e5d1db1375400953d56528" translate="yes" xml:space="preserve">
          <source>Type represents one of the flexible array types ( &lt;a href=&quot;c-api.dtype#c.NPY_STRING&quot;&gt;&lt;code&gt;NPY_STRING&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;c-api.dtype#c.NPY_UNICODE&quot;&gt;&lt;code&gt;NPY_UNICODE&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;c-api.dtype#c.NPY_VOID&quot;&gt;&lt;code&gt;NPY_VOID&lt;/code&gt;&lt;/a&gt; ).</source>
          <target state="translated">Typeは、柔軟な配列タイプ（&lt;a href=&quot;c-api.dtype#c.NPY_STRING&quot;&gt; &lt;code&gt;NPY_STRING&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;c-api.dtype#c.NPY_UNICODE&quot;&gt; &lt;code&gt;NPY_UNICODE&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;c-api.dtype#c.NPY_VOID&quot;&gt; &lt;code&gt;NPY_VOID&lt;/code&gt; &lt;/a&gt;）の1つを表します。</target>
        </trans-unit>
        <trans-unit id="8e6c44e27b4edb7108b331e3527612380352acbf" translate="yes" xml:space="preserve">
          <source>Type represents one of the flexible array types ( &lt;a href=&quot;dtype#c.NPY_STRING&quot;&gt;&lt;code&gt;NPY_STRING&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;dtype#c.NPY_UNICODE&quot;&gt;&lt;code&gt;NPY_UNICODE&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;dtype#c.NPY_VOID&quot;&gt;&lt;code&gt;NPY_VOID&lt;/code&gt;&lt;/a&gt; ).</source>
          <target state="translated">タイプは、柔軟な配列タイプ（&lt;a href=&quot;dtype#c.NPY_STRING&quot;&gt; &lt;code&gt;NPY_STRING&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;dtype#c.NPY_UNICODE&quot;&gt; &lt;code&gt;NPY_UNICODE&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;dtype#c.NPY_VOID&quot;&gt; &lt;code&gt;NPY_VOID&lt;/code&gt; &lt;/a&gt;）の1つを表します。</target>
        </trans-unit>
        <trans-unit id="cab551b16a69b24d82e03c4a0d668cc3040d4465" translate="yes" xml:space="preserve">
          <source>Type specific, core 1-d functions for ufuncs where each calculation is obtained by calling a function taking one input argument and returning one output. This function is passed in &lt;code&gt;func&lt;/code&gt;. The letters correspond to dtypechar&amp;rsquo;s of the supported data types ( &lt;code&gt;e&lt;/code&gt; - half, &lt;code&gt;f&lt;/code&gt; - float, &lt;code&gt;d&lt;/code&gt; - double, &lt;code&gt;g&lt;/code&gt; - long double, &lt;code&gt;F&lt;/code&gt; - cfloat, &lt;code&gt;D&lt;/code&gt; - cdouble, &lt;code&gt;G&lt;/code&gt; - clongdouble). The argument &lt;em&gt;func&lt;/em&gt; must support the same signature. The _As_X_X variants assume ndarray&amp;rsquo;s of one data type but cast the values to use an underlying function that takes a different data type. Thus, &lt;a href=&quot;#c.PyUFunc_f_f_As_d_d&quot;&gt;&lt;code&gt;PyUFunc_f_f_As_d_d&lt;/code&gt;&lt;/a&gt; uses ndarrays of data type &lt;a href=&quot;c-api.dtype#c.NPY_FLOAT&quot;&gt;&lt;code&gt;NPY_FLOAT&lt;/code&gt;&lt;/a&gt; but calls out to a C-function that takes double and returns double.</source>
          <target state="translated">ufuncのタイプ固有のコア1-d関数。各計算は、1つの入力引数を取り、1つの出力を返す関数を呼び出すことによって取得されます。この関数は &lt;code&gt;func&lt;/code&gt; に渡されます。文字は、サポートされているデータ型のdtypecharに対応します（ &lt;code&gt;e&lt;/code&gt; -ハーフ、 &lt;code&gt;f&lt;/code&gt; -フロート、 &lt;code&gt;d&lt;/code&gt; -ダブル、 &lt;code&gt;g&lt;/code&gt; -ロングダブル、 &lt;code&gt;F&lt;/code&gt; -cfloat、 &lt;code&gt;D&lt;/code&gt; -cdouble、 &lt;code&gt;G&lt;/code&gt; -clongdouble）。引数&lt;em&gt;func&lt;/em&gt;は同じ署名をサポートする必要があります。 _As_X_Xバリアントは、1つのデータ型のndarrayを想定していますが、値をキャストして、異なるデータ型を取る基本的な関数を使用します。したがって、&lt;a href=&quot;#c.PyUFunc_f_f_As_d_d&quot;&gt; &lt;code&gt;PyUFunc_f_f_As_d_d&lt;/code&gt; &lt;/a&gt;データ型&lt;a href=&quot;c-api.dtype#c.NPY_FLOAT&quot;&gt; &lt;code&gt;NPY_FLOAT&lt;/code&gt; の&lt;/a&gt; ndarraysを使用しますが、doubleを受け取ってdoubleを返すC関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="e494b69883a66d9ceddef7c995f1d4e3172789f0" translate="yes" xml:space="preserve">
          <source>Type specific, core 1-d functions for ufuncs where each calculation is obtained by calling a function taking one input argument and returning one output. This function is passed in &lt;code&gt;func&lt;/code&gt;. The letters correspond to dtypechar&amp;rsquo;s of the supported data types ( &lt;code&gt;e&lt;/code&gt; - half, &lt;code&gt;f&lt;/code&gt; - float, &lt;code&gt;d&lt;/code&gt; - double, &lt;code&gt;g&lt;/code&gt; - long double, &lt;code&gt;F&lt;/code&gt; - cfloat, &lt;code&gt;D&lt;/code&gt; - cdouble, &lt;code&gt;G&lt;/code&gt; - clongdouble). The argument &lt;em&gt;func&lt;/em&gt; must support the same signature. The _As_X_X variants assume ndarray&amp;rsquo;s of one data type but cast the values to use an underlying function that takes a different data type. Thus, &lt;a href=&quot;#c.PyUFunc_f_f_As_d_d&quot;&gt;&lt;code&gt;PyUFunc_f_f_As_d_d&lt;/code&gt;&lt;/a&gt; uses ndarrays of data type &lt;a href=&quot;dtype#c.NPY_FLOAT&quot;&gt;&lt;code&gt;NPY_FLOAT&lt;/code&gt;&lt;/a&gt; but calls out to a C-function that takes double and returns double.</source>
          <target state="translated">ufuncsのタイプ固有のコア1-d関数。各計算は、1つの入力引数を取り、1つの出力を返す関数を呼び出すことによって取得されます。この関数は &lt;code&gt;func&lt;/code&gt; で渡されます。文字は、サポートされているデータ型のdtypecharに対応します（ &lt;code&gt;e&lt;/code&gt; -half、 &lt;code&gt;f&lt;/code&gt; -float、 &lt;code&gt;d&lt;/code&gt; -double、 &lt;code&gt;g&lt;/code&gt; -long double、 &lt;code&gt;F&lt;/code&gt; -cfloat、 &lt;code&gt;D&lt;/code&gt; -cdouble、 &lt;code&gt;G&lt;/code&gt; -clongdouble）。引数&lt;em&gt;func&lt;/em&gt;は同じ署名をサポートする必要があります。 _As_X_Xバリアントは、1つのデータ型のndarrayを想定していますが、異なるデータ型をとる基になる関数を使用するように値をキャストしています。したがって、&lt;a href=&quot;#c.PyUFunc_f_f_As_d_d&quot;&gt; &lt;code&gt;PyUFunc_f_f_As_d_d&lt;/code&gt; &lt;/a&gt;データ型&lt;a href=&quot;dtype#c.NPY_FLOAT&quot;&gt; &lt;code&gt;NPY_FLOAT&lt;/code&gt; の&lt;/a&gt;ndarrayを使用しますが、doubleを取り、doubleを返すC関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="2718d921f0c8c7bb73eed2147fee6ea79b6b6859" translate="yes" xml:space="preserve">
          <source>Type specific, core 1-d functions for ufuncs where each calculation is obtained by calling a function taking two input arguments and returning one output. The underlying function to call is passed in as &lt;em&gt;func&lt;/em&gt;. The letters correspond to dtypechar&amp;rsquo;s of the specific data type supported by the general-purpose function. The argument &lt;code&gt;func&lt;/code&gt; must support the corresponding signature. The &lt;code&gt;_As_XX_X&lt;/code&gt; variants assume ndarrays of one data type but cast the values at each iteration of the loop to use the underlying function that takes a different data type.</source>
          <target state="translated">2つの入力引数を取り、1つの出力を返す関数を呼び出すことによって各計算が得られるufuncsのタイプ固有のコア1-d関数。呼び出す基礎となる関数は&lt;em&gt;func&lt;/em&gt;として渡されます。文字は、汎用関数でサポートされている特定のデータ型のdtypecharに対応しています。引数 &lt;code&gt;func&lt;/code&gt; は対応する署名をサポートする必要があります。 &lt;code&gt;_As_XX_X&lt;/code&gt; の変種は、1つのデータ型のndarraysを前提としたが、異なるデータ型を取る基本的な機能を使用するために、ループの各繰り返しで値をキャスト。</target>
        </trans-unit>
        <trans-unit id="ef2ee12d948765f441a77e0dc116238b4eb26327" translate="yes" xml:space="preserve">
          <source>Type specifier strings are convertible to dtypes and can therefore be used instead of dtypes:</source>
          <target state="translated">型指定文字列はd型に変換可能なので、d型の代わりに使用することができます。</target>
        </trans-unit>
        <trans-unit id="f7df157385540da09117c232afd23b684eee205b" translate="yes" xml:space="preserve">
          <source>Type strings</source>
          <target state="translated">文字列を入力します。</target>
        </trans-unit>
        <trans-unit id="49d07ace07256156d179be0651876cfb45bce120" translate="yes" xml:space="preserve">
          <source>Type to use in computing the mean. For integer inputs, the default is &lt;a href=&quot;../arrays.scalars#numpy.float64&quot;&gt;&lt;code&gt;float64&lt;/code&gt;&lt;/a&gt;; for floating point inputs, it is the same as the input dtype.</source>
          <target state="translated">平均の計算に使用するタイプ。整数入力の場合、デフォルトは&lt;a href=&quot;../arrays.scalars#numpy.float64&quot;&gt; &lt;code&gt;float64&lt;/code&gt; &lt;/a&gt;です。浮動小数点入力の場合、入力dtypeと同じです。</target>
        </trans-unit>
        <trans-unit id="3e254f683fcb738da4c686306a38d5b35595c5b4" translate="yes" xml:space="preserve">
          <source>Type to use in computing the mean. For integer inputs, the default is &lt;a href=&quot;../arrays.scalars#numpy.float64&quot;&gt;&lt;code&gt;float64&lt;/code&gt;&lt;/a&gt;; for inexact inputs, it is the same as the input dtype.</source>
          <target state="translated">平均の計算に使用するタイプ。整数入力の場合、デフォルトは&lt;a href=&quot;../arrays.scalars#numpy.float64&quot;&gt; &lt;code&gt;float64&lt;/code&gt; &lt;/a&gt;です。不正確な入力の場合、入力dtypeと同じです。</target>
        </trans-unit>
        <trans-unit id="b6e792a3d08a7bd144dac10e42edb461fd3dd2e3" translate="yes" xml:space="preserve">
          <source>Type to use in computing the mean. For integer inputs, the default is &lt;code&gt;float64&lt;/code&gt;; for floating point inputs, it is the same as the input dtype.</source>
          <target state="translated">平均の計算に使用するタイプ。整数入力の場合、デフォルトは &lt;code&gt;float64&lt;/code&gt; です。浮動小数点入力の場合、入力dtypeと同じです。</target>
        </trans-unit>
        <trans-unit id="9f9df4fba8dcd1fb7d56164c04214c5a4ba9ba6b" translate="yes" xml:space="preserve">
          <source>Type to use in computing the mean. For integer inputs, the default is &lt;code&gt;float64&lt;/code&gt;; for inexact inputs, it is the same as the input dtype.</source>
          <target state="translated">平均の計算に使用するタイプ。整数入力の場合、デフォルトは &lt;code&gt;float64&lt;/code&gt; です。不正確な入力の場合、入力dtypeと同じです。</target>
        </trans-unit>
        <trans-unit id="3131a42adb40886f91b9db8d1e4f4fee7e5c8913" translate="yes" xml:space="preserve">
          <source>Type to use in computing the standard deviation. For arrays of integer type the default is float64, for arrays of float types it is the same as the array type.</source>
          <target state="translated">標準偏差を計算する際に使用する型。整数型の配列のデフォルトは float64 で、float 型の配列の場合は配列の型と同じです。</target>
        </trans-unit>
        <trans-unit id="80e97dffa22c435830b854e8d6fb1c6cb57a1b46" translate="yes" xml:space="preserve">
          <source>Type to use in computing the variance. For arrays of integer type</source>
          <target state="translated">分散の計算に使用する型.整数型の配列の場合</target>
        </trans-unit>
        <trans-unit id="af41caa041c2dd1ec692f185fc4f70fc76fd368b" translate="yes" xml:space="preserve">
          <source>Type to use in computing the variance. For arrays of integer type the default is &lt;a href=&quot;../arrays.scalars#numpy.float64&quot;&gt;&lt;code&gt;float64&lt;/code&gt;&lt;/a&gt;; for arrays of float types it is the same as the array type.</source>
          <target state="translated">分散の計算に使用するタイプ。整数型の配列の場合、デフォルトは&lt;a href=&quot;../arrays.scalars#numpy.float64&quot;&gt; &lt;code&gt;float64&lt;/code&gt; &lt;/a&gt;です。float型の配列の場合、配列型と同じです。</target>
        </trans-unit>
        <trans-unit id="c52f694878c4817d9cf0e30a93a5ac5c826ca338" translate="yes" xml:space="preserve">
          <source>Type to use in computing the variance. For arrays of integer type the default is &lt;code&gt;float32&lt;/code&gt;; for arrays of float types it is the same as the array type.</source>
          <target state="translated">分散の計算に使用するタイプ。整数型の配列の場合、デフォルトは &lt;code&gt;float32&lt;/code&gt; です。float型の配列の場合は、配列型と同じです。</target>
        </trans-unit>
        <trans-unit id="251490cecef7141a0dccef6fed5a02c3f5f10907" translate="yes" xml:space="preserve">
          <source>Type to use in computing the variance. For arrays of integer type the default is &lt;code&gt;float64&lt;/code&gt;; for arrays of float types it is the same as the array type.</source>
          <target state="translated">分散の計算に使用するタイプ。整数型の配列の場合、デフォルトは &lt;code&gt;float64&lt;/code&gt; です。float型の配列の場合、配列型と同じです。</target>
        </trans-unit>
        <trans-unit id="9af8f14bd15271db0f113f7c146e7fa9294b1caa" translate="yes" xml:space="preserve">
          <source>TypeError</source>
          <target state="translated">TypeError</target>
        </trans-unit>
        <trans-unit id="d160c5845a8a77a5befb4851a7053d8bdf35eb94" translate="yes" xml:space="preserve">
          <source>Typecode or data-type to which the array is cast.</source>
          <target state="translated">配列がキャストされる型コードまたはデータ型。</target>
        </trans-unit>
        <trans-unit id="41a5cdb8ef55e142306841748946bd3431f088b4" translate="yes" xml:space="preserve">
          <source>Typed versions of many of the &lt;a href=&quot;generator#numpy.random.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;bit_generators/generated/numpy.random.bitgenerator#numpy.random.BitGenerator&quot;&gt;&lt;code&gt;BitGenerator&lt;/code&gt;&lt;/a&gt; methods as well as the classes themselves can be accessed directly from Cython via</source>
          <target state="translated">多くの&lt;a href=&quot;generator#numpy.random.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; &lt;/a&gt;メソッドと&lt;a href=&quot;bit_generators/generated/numpy.random.bitgenerator#numpy.random.BitGenerator&quot;&gt; &lt;code&gt;BitGenerator&lt;/code&gt; &lt;/a&gt;メソッドの型付きバージョン、およびクラス自体には、Cythonから直接アクセスできます。</target>
        </trans-unit>
        <trans-unit id="23cf72e69c01c79ece86b50f4bc0e1b659346558" translate="yes" xml:space="preserve">
          <source>Typemap conversions for complex floating-point types is also not supported automatically. This is because Python and NumPy are written in C, which does not have native complex types. Both Python and NumPy implement their own (essentially equivalent) &lt;code&gt;struct&lt;/code&gt; definitions for complex variables:</source>
          <target state="translated">複雑な浮動小数点型のタイプマップ変換も自動的にサポートされません。これは、PythonとNumPyがネイティブな複合型を持たないCで記述されているためです。PythonとNumPyはどちらも、複雑な変数に対して独自の（本質的に同等の） &lt;code&gt;struct&lt;/code&gt; 定義を実装しています。</target>
        </trans-unit>
        <trans-unit id="f2014cb40164abd5b9ac9cf3258c64ef343de062" translate="yes" xml:space="preserve">
          <source>Typemaps are keyed off a list of one or more function arguments, either by type or by type and name. We will refer to such lists as &lt;em&gt;signatures&lt;/em&gt;. One of the many typemaps defined by &lt;code&gt;numpy.i&lt;/code&gt; is used above and has the signature &lt;code&gt;(double* IN_ARRAY1, int DIM1)&lt;/code&gt;. The argument names are intended to suggest that the &lt;code&gt;double*&lt;/code&gt; argument is an input array of one dimension and that the &lt;code&gt;int&lt;/code&gt; represents the size of that dimension. This is precisely the pattern in the &lt;code&gt;rms&lt;/code&gt; prototype.</source>
          <target state="translated">タイプマップは、1つまたは複数の関数引数のリストから、タイプまたはタイプと名前のいずれかでキーイングされます。このようなリストを&lt;em&gt;署名&lt;/em&gt;と呼びます。 &lt;code&gt;numpy.i&lt;/code&gt; で定義されている多くのタイプマップの1つが上記で使用され、シグニチャー &lt;code&gt;(double* IN_ARRAY1, int DIM1)&lt;/code&gt; ます。引数名は、 &lt;code&gt;double*&lt;/code&gt; 引数が1次元の入力配列であり、 &lt;code&gt;int&lt;/code&gt; がその次元のサイズを表すことを示唆することを目的としています。これはまさに &lt;code&gt;rms&lt;/code&gt; プロトタイプのパターンです。</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Types</target>
        </trans-unit>
        <trans-unit id="908f34305dca26ca1d02c401b17bcc9125b1ab5c" translate="yes" xml:space="preserve">
          <source>Types with &lt;code&gt;.dtype&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.dtype&lt;/code&gt; を使用したタイプ</target>
        </trans-unit>
        <trans-unit id="9f433de3a09f2cf5cd13a827c57725457d725e39" translate="yes" xml:space="preserve">
          <source>Typical usage:</source>
          <target state="translated">典型的な使い方。</target>
        </trans-unit>
        <trans-unit id="e390f0c6d81411459ef6be418905b3473133c360" translate="yes" xml:space="preserve">
          <source>Typically a &amp;lsquo;greedy&amp;rsquo; algorithm is applied which empirical tests have shown returns the optimal path in the majority of cases. In some cases &amp;lsquo;optimal&amp;rsquo; will return the superlative path through a more expensive, exhaustive search. For iterative calculations it may be advisable to calculate the optimal path once and reuse that path by supplying it as an argument. An example is given below.</source>
          <target state="translated">通常、「貪欲」アルゴリズムが適用されます。これは、経験的テストで示されているように、ほとんどの場合に最適なパスを返します。場合によっては、 'optimal'は、より高価で徹底的な検索を通じて最上級のパスを返すことがあります。反復計算の場合は、最適パスを1回計算し、それを引数として指定して再利用することをお勧めします。以下に例を示します。</target>
        </trans-unit>
        <trans-unit id="291bb923a1cf51e55db8c8127cc92200f5117732" translate="yes" xml:space="preserve">
          <source>Typically these new versions of the array metadata but the same data buffer are new &amp;lsquo;views&amp;rsquo; into the data buffer. There is a different ndarray object, but it uses the same data buffer. This is why it is necessary to force copies through use of the .copy() method if one really wants to make a new and independent copy of the data buffer.</source>
          <target state="translated">通常、これらの新しいバージョンの配列メタデータですが、同じデータバッファーは、データバッファーへの新しい「ビュー」です。別のndarrayオブジェクトがありますが、同じデータバッファーを使用しています。これが、データバッファの新しく独立したコピーを本当に作成したい場合に、.copy（）メソッドを使用してコピーを強制する必要がある理由です。</target>
        </trans-unit>
        <trans-unit id="54a23bec4dd6b17bf03f7139f1786ecb950b41b8" translate="yes" xml:space="preserve">
          <source>Typically this value will be one more than what you might expect because all ufuncs take the optional &amp;ldquo;out&amp;rdquo; argument.</source>
          <target state="translated">通常、この値はすべてのufuncがオプションの「out」引数を取るため、予想よりも1つ大きくなります。</target>
        </trans-unit>
        <trans-unit id="2db839a7e94204fc83aa9e6a4d27e6c5c452f385" translate="yes" xml:space="preserve">
          <source>Typically though, &lt;code&gt;self.min(axis=axis)&lt;/code&gt; is sufficient.</source>
          <target state="translated">ただし、通常は &lt;code&gt;self.min(axis=axis)&lt;/code&gt; で十分です。</target>
        </trans-unit>
        <trans-unit id="32606a7a80aee72f839ad47d7de51922ee1b0957" translate="yes" xml:space="preserve">
          <source>Typically you get a new reference to a variable when it is created or is the return value of some function (there are some prominent exceptions, however &amp;mdash; such as getting an item out of a tuple or a dictionary). When you own the reference, you are responsible to make sure that &lt;a href=&quot;https://docs.python.org/dev/c-api/refcounting.html#c.Py_DECREF&quot;&gt;&lt;code&gt;Py_DECREF&lt;/code&gt;&lt;/a&gt; (var) is called when the variable is no longer necessary (and no other function has &amp;ldquo;stolen&amp;rdquo; its reference). Also, if you are passing a Python object to a function that will &amp;ldquo;steal&amp;rdquo; the reference, then you need to make sure you own it (or use &lt;a href=&quot;https://docs.python.org/dev/c-api/refcounting.html#c.Py_INCREF&quot;&gt;&lt;code&gt;Py_INCREF&lt;/code&gt;&lt;/a&gt; to get your own reference). You will also encounter the notion of borrowing a reference. A function that borrows a reference does not alter the reference count of the object and does not expect to &amp;ldquo;hold on &amp;ldquo;to the reference. It&amp;rsquo;s just going to use the object temporarily. When you use &lt;a href=&quot;https://docs.python.org/dev/c-api/arg.html#c.PyArg_ParseTuple&quot;&gt;&lt;code&gt;PyArg_ParseTuple&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/dev/c-api/arg.html#c.PyArg_UnpackTuple&quot;&gt;&lt;code&gt;PyArg_UnpackTuple&lt;/code&gt;&lt;/a&gt; you receive a borrowed reference to the objects in the tuple and should not alter their reference count inside your function. With practice, you can learn to get reference counting right, but it can be frustrating at first.</source>
          <target state="translated">通常、変数が作成されたとき、または関数の戻り値であるときに、変数への新しい参照を取得します（ただし、タプルやディクショナリからアイテムを取得するなど、いくつかの顕著な例外があります）。参照を所有している場合、変数が不要になったとき（および他の関数がその参照を「盗んだ」ことがないとき）に&lt;a href=&quot;https://docs.python.org/dev/c-api/refcounting.html#c.Py_DECREF&quot;&gt; &lt;code&gt;Py_DECREF&lt;/code&gt; &lt;/a&gt;（var）が呼び出されることを確認する必要があります。また、参照を「盗む」関数にPythonオブジェクトを渡す場合は、それを所有していることを確認する必要があります（または、&lt;a href=&quot;https://docs.python.org/dev/c-api/refcounting.html#c.Py_INCREF&quot;&gt; &lt;code&gt;Py_INCREF&lt;/code&gt; を&lt;/a&gt;使用します）。あなた自身の参照を得るために）。また、参照を借用するという概念にも遭遇します。参照を借用する関数は、オブジェクトの参照カウントを変更せず、参照を「保持」することを期待しません。オブジェクトを一時的に使用するだけです。&lt;a href=&quot;https://docs.python.org/dev/c-api/arg.html#c.PyArg_ParseTuple&quot;&gt; &lt;code&gt;PyArg_ParseTuple&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;https://docs.python.org/dev/c-api/arg.html#c.PyArg_UnpackTuple&quot;&gt; &lt;code&gt;PyArg_UnpackTuple&lt;/code&gt; &lt;/a&gt;を使用すると、タプル内のオブジェクトへの借用参照を受け取り、関数内でそれらの参照カウントを変更しないでください。練習すれば、参照カウントを正しく行う方法を学ぶことができますが、最初はイライラすることがあります。</target>
        </trans-unit>
        <trans-unit id="3fadc3f723273062c4d9c5a6483a39eed14f9c66" translate="yes" xml:space="preserve">
          <source>Typically, the size of all core dimensions in an output will be determined by the size of a core dimension with the same label in an input array. This is not a requirement, and it is possible to define a signature where a label comes up for the first time in an output, although some precautions must be taken when calling such a function. An example would be the function &lt;code&gt;euclidean_pdist(a)&lt;/code&gt;, with signature &lt;code&gt;(n,d)-&amp;gt;(p)&lt;/code&gt;, that given an array of &lt;code&gt;n&lt;/code&gt;&lt;code&gt;d&lt;/code&gt;-dimensional vectors, computes all unique pairwise Euclidean distances among them. The output dimension &lt;code&gt;p&lt;/code&gt; must therefore be equal to &lt;code&gt;n * (n - 1) / 2&lt;/code&gt;, but it is the caller&amp;rsquo;s responsibility to pass in an output array of the right size. If the size of a core dimension of an output cannot be determined from a passed in input or output array, an error will be raised.</source>
          <target state="translated">通常、出力のすべてのコアディメンションのサイズは、入力配列の同じラベルを持つコアディメンションのサイズによって決定されます。これは要件ではなく、出力でラベルが初めて表示されるシグネチャを定義することは可能ですが、そのような関数を呼び出すときにはいくつかの注意を払う必要があります。例としては、関数 &lt;code&gt;euclidean_pdist(a)&lt;/code&gt; があり、シグネチャ &lt;code&gt;(n,d)-&amp;gt;(p)&lt;/code&gt; 、 &lt;code&gt;n&lt;/code&gt; &lt;code&gt;d&lt;/code&gt; 次元のベクトルの配列が与えられ、それらの間のすべての一意のペアワイズユークリッド距離を計算しますしたがって、出力次元 &lt;code&gt;p&lt;/code&gt; は &lt;code&gt;n * (n - 1) / 2&lt;/code&gt; 等しくなければなりません。ですが、正しいサイズの出力配列を渡すのは呼び出し側の責任です。渡された入力配列または出力配列から出力のコアディメンションのサイズを決定できない場合、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="81f4149c1a20e72abefc686a48b22d01b3176b3b" translate="yes" xml:space="preserve">
          <source>Typing (&lt;code&gt;numpy.typing&lt;/code&gt;)</source>
          <target state="translated">入力（ &lt;code&gt;numpy.typing&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="59adc3948a7b50794673f56a730ed1dc08703d52" translate="yes" xml:space="preserve">
          <source>Typing (numpy.typing)</source>
          <target state="translated">タイピング (numpy.typing)</target>
        </trans-unit>
        <trans-unit id="b2c7c0caa10a0cca5ea7d69e54018ae0c0389dd6" translate="yes" xml:space="preserve">
          <source>U</source>
          <target state="translated">U</target>
        </trans-unit>
        <trans-unit id="c093fd2ae7a1b6c1d5d85e7bc3cb2abb1cfc0cb0" translate="yes" xml:space="preserve">
          <source>UC Berkeley (St&amp;eacute;fan van der Walt, Sebastian Berg, Warren Weckesser, Ross Barnowski)</source>
          <target state="translated">カリフォルニア大学バークレー校（ステファン・ファン・デル・ウォルト、セバスチャン・バーグ、ウォーレン・ウェッケサー、ロス・バルノウスキー）</target>
        </trans-unit>
        <trans-unit id="f1bad5a5addf87c78243a0908ff2f26f2b5c976f" translate="yes" xml:space="preserve">
          <source>UC Berkeley (Stefan van der Walt, Sebastian Berg, Warren Weckesser, Ross Barnowski)</source>
          <target state="translated">UCバークレー(ステファン・ファン・デル・ウォルト、セバスチャン・バーグ、ウォーレン・ウェケッサー、ロス・バルノウスキー</target>
        </trans-unit>
        <trans-unit id="054ec2a1c571b996a33a40629d7bbd3a2c7c7a03" translate="yes" xml:space="preserve">
          <source>UFUNC_CHECK_ERROR()</source>
          <target state="translated">UFUNC_CHECK_ERROR()</target>
        </trans-unit>
        <trans-unit id="d2291265ceb8694acf9ebd2a0083ea66791f6665" translate="yes" xml:space="preserve">
          <source>UFUNC_CHECK_STATUS()</source>
          <target state="translated">UFUNC_CHECK_STATUS()</target>
        </trans-unit>
        <trans-unit id="7c45c7778c0f3c31bbfb06962ea0f2b3d024a473" translate="yes" xml:space="preserve">
          <source>UFUNC_ERR_{HANDLER}</source>
          <target state="translated">UFUNC_ERR_{HANDLER}</target>
        </trans-unit>
        <trans-unit id="46518eb931ec8d24ef410f576a7160b8b457bb69" translate="yes" xml:space="preserve">
          <source>UFunc API</source>
          <target state="translated">UFunc API</target>
        </trans-unit>
        <trans-unit id="779cd7c4bcd3367298526e617162cab51fe8f735" translate="yes" xml:space="preserve">
          <source>UPDATEIFCOPY (U) (deprecated), replaced by WRITEBACKIFCOPY;</source>
          <target state="translated">UPDATEIFCOPY (U)(非推奨)を WRITEBACKIFCOPY に置き換えました。</target>
        </trans-unit>
        <trans-unit id="4eab2a5ea17917129ec8fa19b15a7cfda3fe1d46" translate="yes" xml:space="preserve">
          <source>UPDATEIFCOPY / U</source>
          <target state="translated">UPDATEIFCOPY/U</target>
        </trans-unit>
        <trans-unit id="8c955f87125d1d07da79b0f8b10f03f3519e41af" translate="yes" xml:space="preserve">
          <source>UPDATEIFCOPY can only be set &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">UPDATEIFCOPYは &lt;code&gt;False&lt;/code&gt; にのみ設定できます。</target>
        </trans-unit>
        <trans-unit id="7033cb6e00b408f93174a1cb4dc874e5ec8f4436" translate="yes" xml:space="preserve">
          <source>URLs require a scheme string (&lt;code&gt;http://&lt;/code&gt;) to be used, without it they will fail:</source>
          <target state="translated">URLにはスキーム文字列（ &lt;code&gt;http://&lt;/code&gt; ）を使用する必要があります。使用しないと失敗します。</target>
        </trans-unit>
        <trans-unit id="76298f39f520148528f0c1a12443b1e9a612a67d" translate="yes" xml:space="preserve">
          <source>Ufunc API</source>
          <target state="translated">ユーファンクエーピーアイ</target>
        </trans-unit>
        <trans-unit id="07fbda00eaafb6ceaaf8098d7abd7adf2f3fa665" translate="yes" xml:space="preserve">
          <source>Ufunc behavior for overlapping inputs</source>
          <target state="translated">入力が重複している場合のUfuncの動作</target>
        </trans-unit>
        <trans-unit id="01787e5708f1880517c980a345514f0ac0d4f3a1" translate="yes" xml:space="preserve">
          <source>Ufuncs allow other array-like classes to be passed seamlessly through the interface in that inputs of a particular class will induce the outputs to be of that same class. The mechanism by which this works is the following. If any of the inputs are not ndarrays and define the &lt;a href=&quot;arrays.classes#numpy.class.__array_wrap__&quot;&gt;&lt;code&gt;__array_wrap__&lt;/code&gt;&lt;/a&gt; method, then the class with the largest &lt;a href=&quot;arrays.classes#numpy.class.__array_priority__&quot;&gt;&lt;code&gt;__array_priority__&lt;/code&gt;&lt;/a&gt; attribute determines the type of all the outputs (with the exception of any output arrays passed in). The &lt;a href=&quot;arrays.classes#numpy.class.__array_wrap__&quot;&gt;&lt;code&gt;__array_wrap__&lt;/code&gt;&lt;/a&gt; method of the input array will be called with the ndarray being returned from the ufunc as it&amp;rsquo;s input. There are two calling styles of the &lt;a href=&quot;arrays.classes#numpy.class.__array_wrap__&quot;&gt;&lt;code&gt;__array_wrap__&lt;/code&gt;&lt;/a&gt; function supported. The first takes the ndarray as the first argument and a tuple of &amp;ldquo;context&amp;rdquo; as the second argument. The context is (ufunc, arguments, output argument number). This is the first call tried. If a TypeError occurs, then the function is called with just the ndarray as the first argument.</source>
          <target state="translated">Ufuncsを使用すると、特定のクラスの入力が同じクラスの出力になるように、他の配列のようなクラスをインターフェースを介してシームレスに渡すことができます。これが機能するメカニズムは次のとおりです。入力のいずれかがndarraysではなく、&lt;a href=&quot;arrays.classes#numpy.class.__array_wrap__&quot;&gt; &lt;code&gt;__array_wrap__&lt;/code&gt; &lt;/a&gt;メソッドを定義している場合、最大の&lt;a href=&quot;arrays.classes#numpy.class.__array_priority__&quot;&gt; &lt;code&gt;__array_priority__&lt;/code&gt; &lt;/a&gt;属性を持つクラスが、すべての出力のタイプを決定します（渡された出力配列を除く）。入力配列の&lt;a href=&quot;arrays.classes#numpy.class.__array_wrap__&quot;&gt; &lt;code&gt;__array_wrap__&lt;/code&gt; &lt;/a&gt;メソッドは、ufuncから入力として返されるndarrayで呼び出されます。&lt;a href=&quot;arrays.classes#numpy.class.__array_wrap__&quot;&gt; &lt;code&gt;__array_wrap__&lt;/code&gt; に&lt;/a&gt;は2つの呼び出しスタイルがあります。サポートされる機能。1つ目は、最初の引数としてndarrayを取り、2つ目の引数として「コンテキスト」のタプルを受け取ります。コンテキストは（ufunc、引数、出力引数番号）です。これは最初に試行された呼び出しです。TypeErrorが発生した場合、関数はndarrayだけを最初の引数として呼び出されます。</target>
        </trans-unit>
        <trans-unit id="bb1e7beaee60184f94b2766ad490881fcda15d1a" translate="yes" xml:space="preserve">
          <source>Ufuncs also have a fifth method that allows in place operations to be performed using fancy indexing. No buffering is used on the dimensions where fancy indexing is used, so the fancy index can list an item more than once and the operation will be performed on the result of the previous operation for that item.</source>
          <target state="translated">Ufuncsには、ファンシーインデックスを使用してインプレース操作を行うことができる第5の方法もあります。ファンシーインデックスが使用されるディメンジョンではバッファリングが使用されないので、ファンシーインデックスは複数回項目をリストアップすることができ、その項目に対する前回の操作の結果に対して操作が実行されます。</target>
        </trans-unit>
        <trans-unit id="ebe1370731077d311895107006a4816f68d36e75" translate="yes" xml:space="preserve">
          <source>Ufuncs: If the &lt;code&gt;ALIGNED&lt;/code&gt; flag of an array is False, ufuncs will buffer/cast the array before evaluation. This is needed since ufunc inner loops access raw elements directly, which might fail on some archs if the elements are not true-aligned.</source>
          <target state="translated">Ufuncs：配列の &lt;code&gt;ALIGNED&lt;/code&gt; フラグがFalseの場合、ufuncsは評価前に配列をバッファー/キャストします。ufuncの内部ループはraw要素に直接アクセスするため、これが必要です。要素がtrueに整列されていない場合、一部のアーチでは失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="781ffa6fd9f0234942bb6847c5bb2f8924769498" translate="yes" xml:space="preserve">
          <source>Umath and multiarray c-extension modules merged into a single module</source>
          <target state="translated">Umathとmultiarrayのc-extensionモジュールを1つのモジュールに統合しました。</target>
        </trans-unit>
        <trans-unit id="52313eed90dffcad6d336fc2df812a51c07afa3f" translate="yes" xml:space="preserve">
          <source>Un-sized flexible data-type objects do not have this attribute.</source>
          <target state="translated">非サイズの柔軟なデータ型オブジェクトは、この属性を持ちません。</target>
        </trans-unit>
        <trans-unit id="b7fcaea31c03023df34e5b7b17cd0d3a054b94c0" translate="yes" xml:space="preserve">
          <source>Unary operations:</source>
          <target state="translated">単項演算。</target>
        </trans-unit>
        <trans-unit id="eb11f871299eef811cd072499c803b05b282a2bf" translate="yes" xml:space="preserve">
          <source>Under certain conditions, &lt;code&gt;nditer&lt;/code&gt; must be used in a context manager</source>
          <target state="translated">特定の条件下では、 &lt;code&gt;nditer&lt;/code&gt; をコンテキストマネージャーで使用する必要があります</target>
        </trans-unit>
        <trans-unit id="a813a893f115799fcd0b6f6dee8828d16c00cb4d" translate="yes" xml:space="preserve">
          <source>Under-the-hood Documentation for developers</source>
          <target state="translated">開発者のためのアンダーザフッド文書</target>
        </trans-unit>
        <trans-unit id="ee256bb7a636957391cc28f26fc314ab3aeba52b" translate="yes" xml:space="preserve">
          <source>Under-the-hood docs</source>
          <target state="translated">アンダーザフッド ドック</target>
        </trans-unit>
        <trans-unit id="56332d95dfcc595c6bea8676636a72713f221f0a" translate="yes" xml:space="preserve">
          <source>Underflow: result so close to zero that some precision was lost.</source>
          <target state="translated">アンダーフロー:結果がゼロに近く、精度が失われました。</target>
        </trans-unit>
        <trans-unit id="59c608e219e1ef1b3832d726571dbc3af32612af" translate="yes" xml:space="preserve">
          <source>Understand axis and shape properties for n-dimensional arrays.</source>
          <target state="translated">n次元配列の軸と形状の特性を理解する。</target>
        </trans-unit>
        <trans-unit id="cd6d50dccc320b7b45e093ddb7f7dd61e7e784a1" translate="yes" xml:space="preserve">
          <source>Understand how to access and modify data for masked arrays</source>
          <target state="translated">マスクド・アレイのデータへのアクセスと修正方法の理解</target>
        </trans-unit>
        <trans-unit id="7a82cdb76fef36e8a84963b1363d0b9e06ddc672" translate="yes" xml:space="preserve">
          <source>Understand how to apply some linear algebra operations to n-dimensional arrays without using for-loops;</source>
          <target state="translated">for-loopを使わずにn次元配列に線形代数演算を適用する方法を理解する。</target>
        </trans-unit>
        <trans-unit id="c54944247198ee020e57c96492a8adaa8f1c26ce" translate="yes" xml:space="preserve">
          <source>Understand the difference between one-, two- and n-dimensional arrays in NumPy;</source>
          <target state="translated">NumPyで1次元、2次元、n次元の配列の違いを理解する。</target>
        </trans-unit>
        <trans-unit id="0ac405cd12d1e61ef3ec9ed67b16e321b2ef49d7" translate="yes" xml:space="preserve">
          <source>Understand what are masked arrays and how they can be created</source>
          <target state="translated">マスクド・アレイとは何か、どのようにして作成するのかを理解する。</target>
        </trans-unit>
        <trans-unit id="64abb06a1b37c1ebb0933941a714064fe78f5ee7" translate="yes" xml:space="preserve">
          <source>Understanding CPU Dispatching, How the NumPy dispatcher works?</source>
          <target state="translated">CPUディスパッチングを理解する,NumPyディスパッチャーの仕組みとは?</target>
        </trans-unit>
        <trans-unit id="233fa68a512b31fd9c7e11c16b1a271f55f3bf8e" translate="yes" xml:space="preserve">
          <source>Understanding the code &amp;amp; getting started</source>
          <target state="translated">コードを理解して開始する</target>
        </trans-unit>
        <trans-unit id="de8fa4e24f45bc650b9e48b7af77833b4a2c462a" translate="yes" xml:space="preserve">
          <source>Undoes &lt;a href=&quot;numpy.fft.fftshift#numpy.fft.fftshift&quot;&gt;&lt;code&gt;fftshift&lt;/code&gt;&lt;/a&gt;, shifts zero-frequency terms to beginning of array.</source>
          <target state="translated">取り消しは、&lt;a href=&quot;numpy.fft.fftshift#numpy.fft.fftshift&quot;&gt; &lt;code&gt;fftshift&lt;/code&gt; &lt;/a&gt;アレイの先頭に移行し、ゼロ周波数項を。</target>
        </trans-unit>
        <trans-unit id="9ab0bd9a6126ee4b9d7538d5c6cba7aa587f31ed" translate="yes" xml:space="preserve">
          <source>Unicode</source>
          <target state="translated">Unicode</target>
        </trans-unit>
        <trans-unit id="4fee0b7959c07c12abdb6224e31004ed0e03fe8f" translate="yes" xml:space="preserve">
          <source>Unicode (fixed-length sequence of &lt;a href=&quot;https://docs.python.org/dev/c-api/unicode.html#c.Py_UNICODE&quot;&gt;&lt;code&gt;Py_UNICODE&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">Unicode（&lt;a href=&quot;https://docs.python.org/dev/c-api/unicode.html#c.Py_UNICODE&quot;&gt; &lt;code&gt;Py_UNICODE&lt;/code&gt; の&lt;/a&gt;固定長シーケンス）</target>
        </trans-unit>
        <trans-unit id="1b41da839119c4860ed2bab536f19149822ad0f7" translate="yes" xml:space="preserve">
          <source>Unicode string</source>
          <target state="translated">ユニコード文字列</target>
        </trans-unit>
        <trans-unit id="b817c790c0e1eb2da135f6728ba7e7a734d36d2a" translate="yes" xml:space="preserve">
          <source>Uniforms</source>
          <target state="translated">Uniforms</target>
        </trans-unit>
        <trans-unit id="bd181d4ea0c5f747e6be59067008be3f6a568280" translate="yes" xml:space="preserve">
          <source>Uniforms (&lt;a href=&quot;generated/numpy.random.generator.random#numpy.random.Generator.random&quot;&gt;&lt;code&gt;random&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;generated/numpy.random.generator.integers#numpy.random.Generator.integers&quot;&gt;&lt;code&gt;integers&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">制服（&lt;a href=&quot;generated/numpy.random.generator.random#numpy.random.Generator.random&quot;&gt; &lt;code&gt;random&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;generated/numpy.random.generator.integers#numpy.random.Generator.integers&quot;&gt; &lt;code&gt;integers&lt;/code&gt; &lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="e9cccdf4596cb9bd6da09d86e9aec754328ad900" translate="yes" xml:space="preserve">
          <source>Uniforms (&lt;a href=&quot;generated/numpy.random.generator.random#numpy.random.Generator.random&quot;&gt;&lt;code&gt;random&lt;/code&gt;&lt;/a&gt;)</source>
          <target state="translated">ユニフォーム（&lt;a href=&quot;generated/numpy.random.generator.random#numpy.random.Generator.random&quot;&gt; &lt;code&gt;random&lt;/code&gt; &lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="2697f04d1c34bc0fd003a5d4f2f248be3c9842cb" translate="yes" xml:space="preserve">
          <source>Union types</source>
          <target state="translated">ユニオンタイプ</target>
        </trans-unit>
        <trans-unit id="7d19a005048195442e1a0367112ec40ef36c8dd2" translate="yes" xml:space="preserve">
          <source>Unique, sorted union of the input arrays.</source>
          <target state="translated">入力配列の一意でソートされた連合.</target>
        </trans-unit>
        <trans-unit id="76a96316e226896e4f1438a10bfe2c7d74733b0a" translate="yes" xml:space="preserve">
          <source>Unit Conversion</source>
          <target state="translated">単位変換</target>
        </trans-unit>
        <trans-unit id="2b379c9399e276f2dc8f9383decfb02923fa06dd" translate="yes" xml:space="preserve">
          <source>Unitary array(s). The first &lt;code&gt;a.ndim - 2&lt;/code&gt; dimensions have the same size as those of the input &lt;code&gt;a&lt;/code&gt;. The size of the last two dimensions depends on the value of &lt;code&gt;full_matrices&lt;/code&gt;. Only returned when &lt;code&gt;compute_uv&lt;/code&gt; is True.</source>
          <target state="translated">ユニタリー配列。最初の &lt;code&gt;a.ndim - 2&lt;/code&gt; 次元は、入力 &lt;code&gt;a&lt;/code&gt; と同じサイズです。最後の2つの次元のサイズは、 &lt;code&gt;full_matrices&lt;/code&gt; の値によって異なります。 &lt;code&gt;compute_uv&lt;/code&gt; がTrueの場合にのみ返されます。</target>
        </trans-unit>
        <trans-unit id="89952e170b7f249d54c02c56dc948ea92d581887" translate="yes" xml:space="preserve">
          <source>Universal Functions</source>
          <target state="translated">ユニバーサル機能</target>
        </trans-unit>
        <trans-unit id="7d5959424165b0a7771ddfd877626852ebcf0b02" translate="yes" xml:space="preserve">
          <source>Universal function. A fast element-wise, &lt;a href=&quot;#term-vectorization&quot;&gt;vectorized&lt;/a&gt; array operation. Examples include &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;sin&lt;/code&gt; and &lt;code&gt;logical_or&lt;/code&gt;.</source>
          <target state="translated">ユニバーサル機能。要素ごとの高速な&lt;a href=&quot;#term-vectorization&quot;&gt;ベクトル化された&lt;/a&gt;配列操作。例には、 &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;sin&lt;/code&gt; 、 &lt;code&gt;logical_or&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="c4ed03ac8db5e6ac9dfa92939a06553bcbad44ab" translate="yes" xml:space="preserve">
          <source>Universal functions</source>
          <target state="translated">ユニバーサル機能</target>
        </trans-unit>
        <trans-unit id="e3950ded82824788c1d59c1dc67f67776133fd02" translate="yes" xml:space="preserve">
          <source>Universal functions (&lt;code&gt;ufunc&lt;/code&gt;)</source>
          <target state="translated">ユニバーサル関数（ &lt;code&gt;ufunc&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="825ac503579fb05389d22b5b4afa49b44dc3e914" translate="yes" xml:space="preserve">
          <source>Universal functions (ufunc)</source>
          <target state="translated">ユニバーサル関数 (ufunc)</target>
        </trans-unit>
        <trans-unit id="1c8ff35a75bf6e5497766666bbe2a77eb53892e4" translate="yes" xml:space="preserve">
          <source>Universal functions are callable objects that take</source>
          <target state="translated">ユニバーサル関数は</target>
        </trans-unit>
        <trans-unit id="14ef4c614fdbba7fe91a08e7e1d79eb5845cd489" translate="yes" xml:space="preserve">
          <source>Universal functions can trip special floating-point status registers in your hardware (such as divide-by-zero). If available on your platform, these registers will be regularly checked during calculation. Error handling is controlled on a per-thread basis, and can be configured using the functions</source>
          <target state="translated">ユニバーサル関数は、ハードウェア内の特殊な浮動小数点ステータスレジスタをトリップさせることができます(ゼロ除算など)。ご使用のプラットフォームで利用可能な場合、これらのレジスタは計算中に定期的にチェックされます。エラー処理はスレッドごとに制御され、以下の関数を使用して構成できます。</target>
        </trans-unit>
        <trans-unit id="f2a6f922fe59febd69c7ec0550beca70f253abf6" translate="yes" xml:space="preserve">
          <source>Universal functions in NumPy are flexible enough to have mixed type signatures. Thus, for example, a universal function could be defined that works with floating-point and integer values. See &lt;a href=&quot;generated/numpy.ldexp#numpy.ldexp&quot;&gt;&lt;code&gt;ldexp&lt;/code&gt;&lt;/a&gt; for an example.</source>
          <target state="translated">NumPyのユニバーサル関数は、型シグネチャが混在するほど柔軟です。したがって、たとえば、浮動小数点値および整数値を処理する汎用関数を定義できます。例については、&lt;a href=&quot;generated/numpy.ldexp#numpy.ldexp&quot;&gt; &lt;code&gt;ldexp&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3933468b1ecf18729ecddd910fc6819434f5cf58" translate="yes" xml:space="preserve">
          <source>Unlabeled tests like the ones above are run in the default &lt;code&gt;numpy.test()&lt;/code&gt; run. If you want to label your test as slow - and therefore reserved for a full &lt;code&gt;numpy.test(label='full')&lt;/code&gt; run, you can label it with &lt;code&gt;pytest.mark.slow&lt;/code&gt;:</source>
          <target state="translated">上記のような &lt;code&gt;numpy.test()&lt;/code&gt; のないテストは、デフォルトのnumpy.test（）の実行で実行されます。テストに低速のラベルを付けたい場合、つまり &lt;code&gt;numpy.test(label='full')&lt;/code&gt; の完全な実行用に予約している場合は、 &lt;code&gt;pytest.mark.slow&lt;/code&gt; でラベルを付けることができます。</target>
        </trans-unit>
        <trans-unit id="dc2928ef9066faa49b65eacee08cc9ff5b8df03a" translate="yes" xml:space="preserve">
          <source>Unlabeled tests like the ones above are run in the default &lt;code&gt;scipy.test()&lt;/code&gt; run. If you want to label your test as slow - and therefore reserved for a full &lt;code&gt;scipy.test(label='full')&lt;/code&gt; run, you can label it with a decorator:</source>
          <target state="translated">上記のような &lt;code&gt;scipy.test()&lt;/code&gt; のないテストは、デフォルトのscipy.test（）実行で実行されます。テストに低速のラベルを付けたい場合-したがって、フル &lt;code&gt;scipy.test(label='full')&lt;/code&gt; の実行用に予約されている場合は、デコレータでラベルを付けることができます。</target>
        </trans-unit>
        <trans-unit id="f80a919f246626907387dd0726bbe89b8b51b4df" translate="yes" xml:space="preserve">
          <source>Unless &lt;a href=&quot;numpy.char.chararray.copy#numpy.char.chararray.copy&quot;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; is False and the other conditions for returning the input array are satisfied (see description for &lt;a href=&quot;numpy.char.chararray.copy#numpy.char.chararray.copy&quot;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; input parameter), &lt;code&gt;arr_t&lt;/code&gt; is a new array of the same shape as the input array, with dtype, order given by &lt;a href=&quot;numpy.char.chararray.dtype#numpy.char.chararray.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;order&lt;/code&gt;.</source>
          <target state="translated">ない限り&lt;a href=&quot;numpy.char.chararray.copy#numpy.char.chararray.copy&quot;&gt; &lt;code&gt;copy&lt;/code&gt; &lt;/a&gt;（の説明を参照Falseで、入力配列を返すための他の条件が満たされている&lt;a href=&quot;numpy.char.chararray.copy#numpy.char.chararray.copy&quot;&gt; &lt;code&gt;copy&lt;/code&gt; &lt;/a&gt;の入力パラメータ）、 &lt;code&gt;arr_t&lt;/code&gt; DTYPE、によって与えられた順序で入力配列と同じ形状の新しい配列である&lt;a href=&quot;numpy.char.chararray.dtype#numpy.char.chararray.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;order&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef7dd27d4664eeedf99baaa7e0c49db6deaa478b" translate="yes" xml:space="preserve">
          <source>Unless &lt;a href=&quot;numpy.copy#numpy.copy&quot;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; is False and the other conditions for returning the input array are satisfied (see description for &lt;a href=&quot;numpy.copy#numpy.copy&quot;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; input parameter), &lt;code&gt;arr_t&lt;/code&gt; is a new array of the same shape as the input array, with dtype, order given by &lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;order&lt;/code&gt;.</source>
          <target state="translated">ない限り&lt;a href=&quot;numpy.copy#numpy.copy&quot;&gt; &lt;code&gt;copy&lt;/code&gt; &lt;/a&gt;（の説明を参照Falseで、入力配列を返すための他の条件が満たされている&lt;a href=&quot;numpy.copy#numpy.copy&quot;&gt; &lt;code&gt;copy&lt;/code&gt; &lt;/a&gt;の入力パラメータ）、 &lt;code&gt;arr_t&lt;/code&gt; DTYPE、によって与えられた順序で入力配列と同じ形状の新しい配列である&lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;order&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b5fb1f8307f01c7e357482bf17ec2115ae4f2033" translate="yes" xml:space="preserve">
          <source>Unless &lt;a href=&quot;numpy.ma.copy#numpy.ma.copy&quot;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; is False and the other conditions for returning the input array are satisfied (see description for &lt;a href=&quot;numpy.ma.copy#numpy.ma.copy&quot;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; input parameter), &lt;code&gt;arr_t&lt;/code&gt; is a new array of the same shape as the input array, with dtype, order given by &lt;a href=&quot;numpy.ma.masked_array.dtype#numpy.ma.masked_array.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;order&lt;/code&gt;.</source>
          <target state="translated">ない限り&lt;a href=&quot;numpy.ma.copy#numpy.ma.copy&quot;&gt; &lt;code&gt;copy&lt;/code&gt; &lt;/a&gt;（の説明を参照Falseで、入力配列を返すための他の条件が満たされている&lt;a href=&quot;numpy.ma.copy#numpy.ma.copy&quot;&gt; &lt;code&gt;copy&lt;/code&gt; &lt;/a&gt;の入力パラメータ）、 &lt;code&gt;arr_t&lt;/code&gt; DTYPE、によって与えられた順序で入力配列と同じ形状の新しい配列である&lt;a href=&quot;numpy.ma.masked_array.dtype#numpy.ma.masked_array.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;order&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd72f00597798516e6971a2dbcb92a29bbbdaed9" translate="yes" xml:space="preserve">
          <source>Unless &lt;a href=&quot;numpy.ma.copy#numpy.ma.copy&quot;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; is False and the other conditions for returning the input array are satisfied (see description for &lt;a href=&quot;numpy.ma.copy#numpy.ma.copy&quot;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; input parameter), &lt;code&gt;arr_t&lt;/code&gt; is a new array of the same shape as the input array, with dtype, order given by &lt;a href=&quot;numpy.ma.maskedarray.dtype#numpy.ma.MaskedArray.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;order&lt;/code&gt;.</source>
          <target state="translated">ない限り&lt;a href=&quot;numpy.ma.copy#numpy.ma.copy&quot;&gt; &lt;code&gt;copy&lt;/code&gt; &lt;/a&gt;（の説明を参照Falseで、入力配列を返すための他の条件が満たされている&lt;a href=&quot;numpy.ma.copy#numpy.ma.copy&quot;&gt; &lt;code&gt;copy&lt;/code&gt; &lt;/a&gt;の入力パラメータ）、 &lt;code&gt;arr_t&lt;/code&gt; DTYPE、によって与えられた順序で入力配列と同じ形状の新しい配列である&lt;a href=&quot;numpy.ma.maskedarray.dtype#numpy.ma.MaskedArray.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;order&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6e2517e50c2cd18f9fa374a65d4b11b6882475bf" translate="yes" xml:space="preserve">
          <source>Unless &lt;code&gt;refcheck&lt;/code&gt; is False:</source>
          <target state="translated">&lt;code&gt;refcheck&lt;/code&gt; がFalseでない限り：</target>
        </trans-unit>
        <trans-unit id="5c06c023a0677199fe16b8704d88475521f3247a" translate="yes" xml:space="preserve">
          <source>Unless NumPy is made aware of an issue with this, this function is scheduled for rapid removal without replacement.</source>
          <target state="translated">NumPyがこの問題に気付かない限り、この機能は交換せずに速やかに削除される予定です。</target>
        </trans-unit>
        <trans-unit id="b12a052540dd37bc0bf5e60cc41fc32cdcbd4cfa" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;numpy.equal#numpy.equal&quot;&gt;&lt;code&gt;numpy.equal&lt;/code&gt;&lt;/a&gt;, this comparison is performed by first stripping whitespace characters from the end of the string. This behavior is provided for backward-compatibility with numarray.</source>
          <target state="translated">&lt;a href=&quot;numpy.equal#numpy.equal&quot;&gt; &lt;code&gt;numpy.equal&lt;/code&gt; &lt;/a&gt;とは異なり、この比較は最初に文字列の末尾から空白文字を削除することによって実行されます。この動作は、numarrayとの下位互換性のために提供されています。</target>
        </trans-unit>
        <trans-unit id="6b2b2c64bbd5177dd4a58ffb6ba3be3f39244e9c" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;numpy.fft.fftfreq#numpy.fft.fftfreq&quot;&gt;&lt;code&gt;fftfreq&lt;/code&gt;&lt;/a&gt; (but like &lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.rfftfreq.html#scipy.fftpack.rfftfreq&quot;&gt;&lt;code&gt;scipy.fftpack.rfftfreq&lt;/code&gt;&lt;/a&gt;) the Nyquist frequency component is considered to be positive.</source>
          <target state="translated">異なり&lt;a href=&quot;numpy.fft.fftfreq#numpy.fft.fftfreq&quot;&gt; &lt;code&gt;fftfreq&lt;/code&gt; &lt;/a&gt;（しかし等&lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/generated/scipy.fftpack.rfftfreq.html#scipy.fftpack.rfftfreq&quot;&gt; &lt;code&gt;scipy.fftpack.rfftfreq&lt;/code&gt; &lt;/a&gt;）ナイキスト周波数成分が陽性であると考えられます。</target>
        </trans-unit>
        <trans-unit id="5f3a2cd1365b2531abc2f011c55c5607d024f719" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;numpy.greater#numpy.greater&quot;&gt;&lt;code&gt;numpy.greater&lt;/code&gt;&lt;/a&gt;, this comparison is performed by first stripping whitespace characters from the end of the string. This behavior is provided for backward-compatibility with numarray.</source>
          <target state="translated">&lt;a href=&quot;numpy.greater#numpy.greater&quot;&gt; &lt;code&gt;numpy.greater&lt;/code&gt; &lt;/a&gt;とは異なり、この比較は最初に文字列の末尾から空白文字を削除することによって実行されます。この動作は、numarrayとの下位互換性のために提供されています。</target>
        </trans-unit>
        <trans-unit id="8db96ae1e185ea43483bbcf2e2a064fdf5d5ac53" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;numpy.greater_equal#numpy.greater_equal&quot;&gt;&lt;code&gt;numpy.greater_equal&lt;/code&gt;&lt;/a&gt;, this comparison is performed by first stripping whitespace characters from the end of the string. This behavior is provided for backward-compatibility with numarray.</source>
          <target state="translated">&lt;a href=&quot;numpy.greater_equal#numpy.greater_equal&quot;&gt; &lt;code&gt;numpy.greater_equal&lt;/code&gt; &lt;/a&gt;とは異なり、この比較は最初に文字列の末尾から空白文字を削除することによって実行されます。この動作は、numarrayとの下位互換性のために提供されています。</target>
        </trans-unit>
        <trans-unit id="cc98934fa39c9d5a378edf27cd9d3fdf09aca64f" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;numpy.less_equal#numpy.less_equal&quot;&gt;&lt;code&gt;numpy.less_equal&lt;/code&gt;&lt;/a&gt;, this comparison is performed by first stripping whitespace characters from the end of the string. This behavior is provided for backward-compatibility with numarray.</source>
          <target state="translated">&lt;a href=&quot;numpy.less_equal#numpy.less_equal&quot;&gt; &lt;code&gt;numpy.less_equal&lt;/code&gt; &lt;/a&gt;とは異なり、この比較は最初に文字列の末尾から空白文字を削除することによって実行されます。この動作は、numarrayとの下位互換性のために提供されています。</target>
        </trans-unit>
        <trans-unit id="13463cefef0c63fb378a22fb3869ee59d3559110" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;numpy.matrix#numpy.matrix&quot;&gt;&lt;code&gt;matrix&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#numpy.asmatrix&quot;&gt;&lt;code&gt;asmatrix&lt;/code&gt;&lt;/a&gt; does not make a copy if the input is already a matrix or an ndarray. Equivalent to &lt;code&gt;matrix(data, copy=False)&lt;/code&gt;.</source>
          <target state="translated">異なり&lt;a href=&quot;numpy.matrix#numpy.matrix&quot;&gt; &lt;code&gt;matrix&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#numpy.asmatrix&quot;&gt; &lt;code&gt;asmatrix&lt;/code&gt; は、&lt;/a&gt;入力が既に行列またはndarrayであればコピーを作成しません。 &lt;code&gt;matrix(data, copy=False)&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="c0d5bc239c5d20908848ae252443d0a4e4413dd3" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;numpy.matrix#numpy.matrix&quot;&gt;&lt;code&gt;matrix&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;numpy.asmatrix#numpy.asmatrix&quot;&gt;&lt;code&gt;asmatrix&lt;/code&gt;&lt;/a&gt; does not make a copy if the input is already a matrix or an ndarray. Equivalent to &lt;code&gt;matrix(data, copy=False)&lt;/code&gt;.</source>
          <target state="translated">異なり&lt;a href=&quot;numpy.matrix#numpy.matrix&quot;&gt; &lt;code&gt;matrix&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;numpy.asmatrix#numpy.asmatrix&quot;&gt; &lt;code&gt;asmatrix&lt;/code&gt; は、&lt;/a&gt;入力が既に行列またはndarrayであればコピーを作成しません。 &lt;code&gt;matrix(data, copy=False)&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="a5b1299452ddecaa69fc7626dc84ab62f7aec6df" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;numpy.not_equal#numpy.not_equal&quot;&gt;&lt;code&gt;numpy.not_equal&lt;/code&gt;&lt;/a&gt;, this comparison is performed by first stripping whitespace characters from the end of the string. This behavior is provided for backward-compatibility with numarray.</source>
          <target state="translated">&lt;a href=&quot;numpy.not_equal#numpy.not_equal&quot;&gt; &lt;code&gt;numpy.not_equal&lt;/code&gt; &lt;/a&gt;とは異なり、この比較は、文字列の末尾から最初に空白文字を取り除くことによって実行されます。この動作は、numarrayとの下位互換性のために提供されています。</target>
        </trans-unit>
        <trans-unit id="67d52aad6ea0dc9937241f5063f5755aaf1c098a" translate="yes" xml:space="preserve">
          <source>Unlike &lt;a href=&quot;numpy.random.generator.shuffle#numpy.random.Generator.shuffle&quot;&gt;&lt;code&gt;shuffle&lt;/code&gt;&lt;/a&gt;, each slice along the given axis is shuffled independently of the others.</source>
          <target state="translated">&lt;a href=&quot;numpy.random.generator.shuffle#numpy.random.Generator.shuffle&quot;&gt; &lt;code&gt;shuffle&lt;/code&gt; &lt;/a&gt;とは異なり、特定の軸に沿った各スライスは、他のスライスとは独立してシャッフルされます。</target>
        </trans-unit>
        <trans-unit id="1df4f0edb26736c54c37d1f3f53f3c4e05be97d2" translate="yes" xml:space="preserve">
          <source>Unlike MATLAB&amp;reg;, where anything on your path can be called immediately, with Python you need to first do an &amp;lsquo;import&amp;rsquo; statement to make functions in a particular file accessible.</source>
          <target state="translated">パス上のすべてのものをすぐに呼び出すことができるMATLAB&amp;reg;とは異なり、Pythonでは、最初に「import」ステートメントを実行して、特定のファイル内の関数にアクセスできるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="5e87736758d47e2ea2a3e97a051391d1169b07f7" translate="yes" xml:space="preserve">
          <source>Unlike MATLAB, where anything on your path can be called immediately, with Python you need to first do an &amp;lsquo;import&amp;rsquo; statement to make functions in a particular file accessible.</source>
          <target state="translated">パス上のすべてのものをすぐに呼び出すことができるMATLABとは異なり、Pythonでは、特定のファイル内の関数にアクセスできるようにするために、最初に「import」ステートメントを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="dd2a67552682e7936714b3e48fc7203a2e15901a" translate="yes" xml:space="preserve">
          <source>Unlike in many matrix languages, the product operator &lt;code&gt;*&lt;/code&gt; operates elementwise in NumPy arrays. The matrix product can be performed using the &lt;code&gt;@&lt;/code&gt; operator (in python &amp;gt;=3.5) or the &lt;code&gt;dot&lt;/code&gt; function or method:</source>
          <target state="translated">多くのマトリックス言語とは異なり、積演算子 &lt;code&gt;*&lt;/code&gt; はNumPy配列で要素ごとに動作します。行列積は、 &lt;code&gt;@&lt;/code&gt; 演算子（Python&amp;gt; = 3.5の場合）または &lt;code&gt;dot&lt;/code&gt; 関数またはメソッドを使用して実行できます。</target>
        </trans-unit>
        <trans-unit id="991d558a10f3fed386601ea572b9a25a236458aa" translate="yes" xml:space="preserve">
          <source>Unlike in the case of integer index arrays, in the boolean case, the result is a 1-D array containing all the elements in the indexed array corresponding to all the true elements in the boolean array. The elements in the indexed array are always iterated and returned in &lt;a href=&quot;../glossary#term-row-major&quot;&gt;row-major&lt;/a&gt; (C-style) order. The result is also identical to &lt;code&gt;y[np.nonzero(b)]&lt;/code&gt;. As with index arrays, what is returned is a copy of the data, not a view as one gets with slices.</source>
          <target state="translated">整数インデックス配列の場合とは異なり、ブールの場合、結果は、ブール配列のすべての真の要素に対応するインデックス付き配列のすべての要素を含む1次元配列になります。インデックス付き配列の要素は常に繰り返され、&lt;a href=&quot;../glossary#term-row-major&quot;&gt;行&lt;/a&gt;優先（Cスタイル）の順序で返されます。結果も &lt;code&gt;y[np.nonzero(b)]&lt;/code&gt; と同じです。インデックス配列と同様に、返されるのはデータのコピーであり、スライスで取得するビューではありません。</target>
        </trans-unit>
        <trans-unit id="9b9e6d341e111d5abaa8c91d594d12353e24be13" translate="yes" xml:space="preserve">
          <source>Unlike lists and tuples, numpy arrays support multidimensional indexing for multidimensional arrays. That means that it is not necessary to separate each dimension&amp;rsquo;s index into its own set of square brackets.</source>
          <target state="translated">リストやタプルとは異なり、numpy配列は多次元配列の多次元インデックスをサポートします。つまり、各ディメンションのインデックスを独自の角かっこで区切る必要はありません。</target>
        </trans-unit>
        <trans-unit id="70d4d959a48f1152d15702553262318c5fb98806" translate="yes" xml:space="preserve">
          <source>Unlike multiplication, division, etc., the difference of two Chebyshev series is a Chebyshev series (without having to &amp;ldquo;reproject&amp;rdquo; the result onto the basis set) so subtraction, just like that of &amp;ldquo;standard&amp;rdquo; polynomials, is simply &amp;ldquo;component-wise.&amp;rdquo;</source>
          <target state="translated">乗算、除算などとは異なり、2つのチェビシェフシリーズの違いはチェビシェフシリーズであり（結果を基底セットに「再投影」する必要はありません）、減算は、「標準」多項式の場合と同様に、単純に「コンポーネントごと」になります。 。」</target>
        </trans-unit>
        <trans-unit id="e46cc304c2f214fabbfe81dd6c99872edb6df227" translate="yes" xml:space="preserve">
          <source>Unlike multiplication, division, etc., the difference of two Hermite series is a Hermite series (without having to &amp;ldquo;reproject&amp;rdquo; the result onto the basis set) so subtraction, just like that of &amp;ldquo;standard&amp;rdquo; polynomials, is simply &amp;ldquo;component-wise.&amp;rdquo;</source>
          <target state="translated">乗算、除算などとは異なり、2つのエルミートシリーズの違いはエルミートシリーズ（結果を基底セットに「再投影」する必要がない）であるため、「標準」多項式の場合と同様に、減算は単に「コンポーネントごと」になります。 。」</target>
        </trans-unit>
        <trans-unit id="0beee9ca9d008b84130a4966827a4791db0f0fc1" translate="yes" xml:space="preserve">
          <source>Unlike multiplication, division, etc., the difference of two Laguerre series is a Laguerre series (without having to &amp;ldquo;reproject&amp;rdquo; the result onto the basis set) so subtraction, just like that of &amp;ldquo;standard&amp;rdquo; polynomials, is simply &amp;ldquo;component-wise.&amp;rdquo;</source>
          <target state="translated">乗算、除算などとは異なり、2つのラゲール級数の違いはラゲール級数であり（結果を基底セットに「再投影」する必要はありません）、減算は、「標準」多項式の場合と同様に、単に「コンポーネントごと」になります。 。」</target>
        </trans-unit>
        <trans-unit id="853913b39ae1eac706caf9dd0fbf8022480e5898" translate="yes" xml:space="preserve">
          <source>Unlike multiplication, division, etc., the difference of two Legendre series is a Legendre series (without having to &amp;ldquo;reproject&amp;rdquo; the result onto the basis set) so subtraction, just like that of &amp;ldquo;standard&amp;rdquo; polynomials, is simply &amp;ldquo;component-wise.&amp;rdquo;</source>
          <target state="translated">乗算、除算などとは異なり、2つのルジャンドル級数の違いはルジャンドル級数であり（結果を基底セットに「再投影」する必要はありません）、「標準」多項式の場合と同様に、減算は単に「コンポーネントごと」になります。」</target>
        </trans-unit>
        <trans-unit id="817c653b37e40c515ff2966447fe5fceb6d50c2b" translate="yes" xml:space="preserve">
          <source>Unlike multiplication, division, etc., the sum of two Chebyshev series is a Chebyshev series (without having to &amp;ldquo;reproject&amp;rdquo; the result onto the basis set) so addition, just like that of &amp;ldquo;standard&amp;rdquo; polynomials, is simply &amp;ldquo;component-wise.&amp;rdquo;</source>
          <target state="translated">乗算、除算などとは異なり、2つのチェビシェフシリーズの合計はチェビシェフシリーズであり（結果を基底セットに「再投影」する必要はありません）、「標準」多項式と同様に、加算は単に「コンポーネントごと」になります。」</target>
        </trans-unit>
        <trans-unit id="96e94bebc99e72aa93e0ba2b3e9d976f9a242788" translate="yes" xml:space="preserve">
          <source>Unlike multiplication, division, etc., the sum of two Hermite series is a Hermite series (without having to &amp;ldquo;reproject&amp;rdquo; the result onto the basis set) so addition, just like that of &amp;ldquo;standard&amp;rdquo; polynomials, is simply &amp;ldquo;component-wise.&amp;rdquo;</source>
          <target state="translated">乗算、除算などとは異なり、2つのHermiteシリーズの合計はHermiteシリーズであり（結果を基底セットに「再投影」する必要はありません）、「標準」多項式と同様に、加算は単に「コンポーネントごと」になります。」</target>
        </trans-unit>
        <trans-unit id="a1bfae60ca127fe23c05d0fcb5e3af8c025e808e" translate="yes" xml:space="preserve">
          <source>Unlike multiplication, division, etc., the sum of two Laguerre series is a Laguerre series (without having to &amp;ldquo;reproject&amp;rdquo; the result onto the basis set) so addition, just like that of &amp;ldquo;standard&amp;rdquo; polynomials, is simply &amp;ldquo;component-wise.&amp;rdquo;</source>
          <target state="translated">乗算、除算などとは異なり、2つのラゲール級数の合計はラゲール級数であるため（結果を基底セットに「再投影」する必要はありません）、「標準」多項式の場合と同様に、加算は単に「コンポーネントごと」になります。」</target>
        </trans-unit>
        <trans-unit id="479fccdc37cae736330d681081d02fd22d2b4c05" translate="yes" xml:space="preserve">
          <source>Unlike multiplication, division, etc., the sum of two Legendre series is a Legendre series (without having to &amp;ldquo;reproject&amp;rdquo; the result onto the basis set) so addition, just like that of &amp;ldquo;standard&amp;rdquo; polynomials, is simply &amp;ldquo;component-wise.&amp;rdquo;</source>
          <target state="translated">乗算、除算などとは異なり、2つのルジャンドル級数の和はルジャンドル級数であるため（結果を基底セットに「再投影」する必要はありません）、「標準」多項式と同様に、加算は単に「コンポーネントごと」になります。」</target>
        </trans-unit>
        <trans-unit id="c37836d2f2fa6578d699e351ca0672a2d96cc650" translate="yes" xml:space="preserve">
          <source>Unlike other numpy scalars, structured scalars are mutable and act like views into the original array, such that modifying the scalar will modify the original array. Structured scalars also support access and assignment by field name:</source>
          <target state="translated">他の numpy スカラとは異なり、構造化スカラは mutable であり、元の配列へのビューのように動作します。構造化スカラは、フィールド名によるアクセスや代入もサポートしています。</target>
        </trans-unit>
        <trans-unit id="191384b28da289c339b69142c174b4bdb8ca4902" translate="yes" xml:space="preserve">
          <source>Unlike some of the references (such as array and mask indices) assignments are always made to the original data in the array (indeed, nothing else would make sense!). Note though, that some actions may not work as one may naively expect. This particular example is often surprising to people:</source>
          <target state="translated">いくつかの参照(配列やマスクインデックスなど)とは異なり、代入は常に配列内の元のデータに行われます(実際には、他に意味のあるものはありません!)。しかし、いくつかのアクションは単純に期待しているようには動作しないかもしれないことに注意してください。この特定の例は、しばしば人々を驚かせます。</target>
        </trans-unit>
        <trans-unit id="6138c52b3d14f1f06df9ad9cd32f8b7c13aad36f" translate="yes" xml:space="preserve">
          <source>Unlike the built-in &lt;a href=&quot;https://docs.python.org/dev/library/math.html#math.isclose&quot;&gt;&lt;code&gt;math.isclose&lt;/code&gt;&lt;/a&gt;, the above equation is not symmetric in &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; &amp;ndash; it assumes &lt;code&gt;b&lt;/code&gt; is the reference value &amp;ndash; so that &lt;code&gt;isclose(a, b)&lt;/code&gt; might be different from &lt;code&gt;isclose(b, a)&lt;/code&gt;. Furthermore, the default value of atol is not zero, and is used to determine what small values should be considered close to zero. The default value is appropriate for expected values of order unity: if the expected values are significantly smaller than one, it can result in false positives. &lt;code&gt;atol&lt;/code&gt; should be carefully selected for the use case at hand. A zero value for &lt;code&gt;atol&lt;/code&gt; will result in &lt;code&gt;False&lt;/code&gt; if either &lt;code&gt;a&lt;/code&gt; or &lt;code&gt;b&lt;/code&gt; is zero.</source>
          <target state="translated">組み込みの&lt;a href=&quot;https://docs.python.org/dev/library/math.html#math.isclose&quot;&gt; &lt;code&gt;math.isclose&lt;/code&gt; &lt;/a&gt;とは異なり、上記の方程式は &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; で対称ではありません。これは &lt;code&gt;b&lt;/code&gt; が参照値であると想定しているため、 &lt;code&gt;isclose(a, b)&lt;/code&gt; が &lt;code&gt;isclose(b, a)&lt;/code&gt; a）と異なる場合があります。さらに、atolのデフォルト値はゼロではなく、ゼロに近いと見なすべき小さな値を決定するために使用されます。デフォルト値は、次数が1の期待値に適しています。期待値が1を大幅に下回ると、誤検知が発生する可能性があります。 &lt;code&gt;atol&lt;/code&gt; は、目前のユースケースに合わせて慎重に選択する必要があります。 &lt;code&gt;atol&lt;/code&gt; のゼロ値は、次のいずれか &lt;code&gt;a&lt;/code&gt; 場合に &lt;code&gt;False&lt;/code&gt; になります。または &lt;code&gt;b&lt;/code&gt; はゼロです。</target>
        </trans-unit>
        <trans-unit id="f562bb48bffcb6e3afb75a4ff67fcee5424e89c9" translate="yes" xml:space="preserve">
          <source>Unlike the builtin &lt;a href=&quot;https://docs.python.org/dev/library/stdtypes.html#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt;, this supports the &lt;a href=&quot;https://docs.python.org/dev/c-api/buffer.html#bufferobjects&quot;&gt;Buffer Protocol&lt;/a&gt;, exposing its contents as UCS4:</source>
          <target state="translated">組み込みの&lt;a href=&quot;https://docs.python.org/dev/library/stdtypes.html#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;とは異なり、これは&lt;a href=&quot;https://docs.python.org/dev/c-api/buffer.html#bufferobjects&quot;&gt;Buffer Protocolを&lt;/a&gt;サポートし、その内容をUCS4として公開します。</target>
        </trans-unit>
        <trans-unit id="b9b43bc2298a20c8156a6023d94ab148e7869ea1" translate="yes" xml:space="preserve">
          <source>Unlike the free function &lt;a href=&quot;numpy.reshape#numpy.reshape&quot;&gt;&lt;code&gt;numpy.reshape&lt;/code&gt;&lt;/a&gt;, this method on &lt;a href=&quot;numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; allows the elements of the shape parameter to be passed in as separate arguments. For example, &lt;code&gt;a.reshape(10, 11)&lt;/code&gt; is equivalent to &lt;code&gt;a.reshape((10, 11))&lt;/code&gt;.</source>
          <target state="translated">フリー機能とは異なり&lt;a href=&quot;numpy.reshape#numpy.reshape&quot;&gt; &lt;code&gt;numpy.reshape&lt;/code&gt; &lt;/a&gt;、上でこの方法&lt;a href=&quot;numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; は、&lt;/a&gt;形状パラメータの要素が別の引数として渡されることを可能にします。たとえば、 &lt;code&gt;a.reshape(10, 11)&lt;/code&gt; は &lt;code&gt;a.reshape((10, 11))&lt;/code&gt; ））と同等です。</target>
        </trans-unit>
        <trans-unit id="c055ec1da31f5b3a36529d3d52329cd0cef8c5de" translate="yes" xml:space="preserve">
          <source>Unlike the free function &lt;a href=&quot;numpy.reshape#numpy.reshape&quot;&gt;&lt;code&gt;numpy.reshape&lt;/code&gt;&lt;/a&gt;, this method on &lt;code&gt;ndarray&lt;/code&gt; allows the elements of the shape parameter to be passed in as separate arguments. For example, &lt;code&gt;a.reshape(10, 11)&lt;/code&gt; is equivalent to &lt;code&gt;a.reshape((10, 11))&lt;/code&gt;.</source>
          <target state="translated">フリー機能とは異なり&lt;a href=&quot;numpy.reshape#numpy.reshape&quot;&gt; &lt;code&gt;numpy.reshape&lt;/code&gt; &lt;/a&gt;、上でこの方法 &lt;code&gt;ndarray&lt;/code&gt; は、形状パラメータの要素が別の引数として渡されることを可能にします。たとえば、 &lt;code&gt;a.reshape(10, 11)&lt;/code&gt; は &lt;code&gt;a.reshape((10, 11))&lt;/code&gt; ））と同等です。</target>
        </trans-unit>
        <trans-unit id="f6f1b0bab79178181c6f1258ede14dd475f1a6b3" translate="yes" xml:space="preserve">
          <source>Unlike the previous &lt;code&gt;nose&lt;/code&gt;-based implementation, this class is not publicly exposed as it performs some &lt;code&gt;numpy&lt;/code&gt;-specific warning suppression.</source>
          <target state="translated">以前の &lt;code&gt;nose&lt;/code&gt; ベースの実装とは異なり、このクラスは、 &lt;code&gt;numpy&lt;/code&gt; 固有の警告抑制を実行するため、公開されていません。</target>
        </trans-unit>
        <trans-unit id="0206a9a6a08e980ce9de3768f0db78bc718405ea" translate="yes" xml:space="preserve">
          <source>Unlike the standard numpy comparison operators, the ones in the &lt;code&gt;char&lt;/code&gt; module strip trailing whitespace characters before performing the comparison.</source>
          <target state="translated">標準のnumpy比較演算子とは異なり、 &lt;code&gt;char&lt;/code&gt; モジュールの演算子は、比較を実行する前に末尾の空白文字を削除します。</target>
        </trans-unit>
        <trans-unit id="7fbacb4b6a81b741ccf818cdd058fa9d9f52d43b" translate="yes" xml:space="preserve">
          <source>Unmasking an entry</source>
          <target state="translated">エントリのマスク解除</target>
        </trans-unit>
        <trans-unit id="de9f965938adc0324fd8157cc466e2436f4a68e4" translate="yes" xml:space="preserve">
          <source>Unmasking an entry by direct assignment will silently fail if the masked array has a &lt;em&gt;hard&lt;/em&gt; mask, as shown by the &lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray.hardmask&quot;&gt;&lt;code&gt;hardmask&lt;/code&gt;&lt;/a&gt; attribute. This feature was introduced to prevent overwriting the mask. To force the unmasking of an entry where the array has a hard mask, the mask must first to be softened using the &lt;a href=&quot;generated/numpy.ma.soften_mask#numpy.ma.soften_mask&quot;&gt;&lt;code&gt;soften_mask&lt;/code&gt;&lt;/a&gt; method before the allocation. It can be re-hardened with &lt;a href=&quot;generated/numpy.ma.harden_mask#numpy.ma.harden_mask&quot;&gt;&lt;code&gt;harden_mask&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">hardmask属性で示されているように、&lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray.hardmask&quot;&gt; &lt;code&gt;hardmask&lt;/code&gt; &lt;/a&gt;された配列に&lt;em&gt;ハード&lt;/em&gt;マスクがある場合、直接割り当てによるエントリのマスク解除はサイレントに失敗します。この機能は、マスクの上書きを防ぐために導入されました。配列にハードマスクがあるエントリのマスクを&lt;a href=&quot;generated/numpy.ma.soften_mask#numpy.ma.soften_mask&quot;&gt; &lt;code&gt;soften_mask&lt;/code&gt; &lt;/a&gt;的に解除するには、割り当ての前に、soften_maskメソッドを使用してマスクを最初にソフト化する必要があります。&lt;a href=&quot;generated/numpy.ma.harden_mask#numpy.ma.harden_mask&quot;&gt; &lt;code&gt;harden_mask&lt;/code&gt; で&lt;/a&gt;再硬化できます：</target>
        </trans-unit>
        <trans-unit id="c37a5ee094534c733a693e498e6b83c12096d6e0" translate="yes" xml:space="preserve">
          <source>Unmasking an entry by direct assignment will silently fail if the masked array has a &lt;em&gt;hard&lt;/em&gt; mask, as shown by the &lt;code&gt;hardmask&lt;/code&gt; attribute. This feature was introduced to prevent overwriting the mask. To force the unmasking of an entry where the array has a hard mask, the mask must first to be softened using the &lt;a href=&quot;generated/numpy.ma.soften_mask#numpy.ma.soften_mask&quot;&gt;&lt;code&gt;soften_mask&lt;/code&gt;&lt;/a&gt; method before the allocation. It can be re-hardened with &lt;a href=&quot;generated/numpy.ma.harden_mask#numpy.ma.harden_mask&quot;&gt;&lt;code&gt;harden_mask&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">hardmask 属性によって示されるように、 &lt;code&gt;hardmask&lt;/code&gt; された配列に&lt;em&gt;ハード&lt;/em&gt;マスクがある場合、直接割り当てによってエントリのマスクを解除すると、警告なしに失敗します。この機能は、マスクの上書きを防ぐために導入されました。配列にハードマスクがあるエントリのマスクを&lt;a href=&quot;generated/numpy.ma.soften_mask#numpy.ma.soften_mask&quot;&gt; &lt;code&gt;soften_mask&lt;/code&gt; &lt;/a&gt;的に解除するには、割り当ての前に、まずsoften_maskメソッドを使用してマスクをソフトにする必要があります。&lt;a href=&quot;generated/numpy.ma.harden_mask#numpy.ma.harden_mask&quot;&gt; &lt;code&gt;harden_mask&lt;/code&gt; で&lt;/a&gt;再強化できます。</target>
        </trans-unit>
        <trans-unit id="5724dd60c593622fc16f28573a8be39237c1817b" translate="yes" xml:space="preserve">
          <source>Unmodified core dimensions that share the same name must have the same size. Each dimension name typically corresponds to one level of looping in the elementary function&amp;rsquo;s implementation.</source>
          <target state="translated">同じ名前を共有する未修正のコア寸法は、同じサイズでなければなりません。通常、各ディメンション名は、基本関数の実装における1レベルのループに対応しています。</target>
        </trans-unit>
        <trans-unit id="0c8c8df9f7c1cb71b2c99863e55f28b2342c49c8" translate="yes" xml:space="preserve">
          <source>Unpacks elements of a uint8 array into a binary-valued output array.</source>
          <target state="translated">uint8 配列の要素をバイナリ値の出力配列に展開します。</target>
        </trans-unit>
        <trans-unit id="cfb0e26f84a72aa991cbd86d2a8e70f9268c36da" translate="yes" xml:space="preserve">
          <source>Unpickling while loading requires explicit opt-in</source>
          <target state="translated">ロード中にアンピックリングを解除するには、明示的なオプトインが必要です。</target>
        </trans-unit>
        <trans-unit id="c2316b90ad07a17bab89992c697827520a7c1a76" translate="yes" xml:space="preserve">
          <source>Unsafe int casting of the num attribute in &lt;code&gt;linspace&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;linspace&lt;/code&gt; でのnum属性の安全でないintキャスト</target>
        </trans-unit>
        <trans-unit id="9b27e09825b38c1619e31484868bfeb48e96d8d2" translate="yes" xml:space="preserve">
          <source>Unsigned integer</source>
          <target state="translated">符号なし整数</target>
        </trans-unit>
        <trans-unit id="19201d9c175004fe2d2c285a14b33dc2f3c58964" translate="yes" xml:space="preserve">
          <source>Unsigned integer (0 to 18446744073709551615)</source>
          <target state="translated">符号なし整数(0~18446744073709551615</target>
        </trans-unit>
        <trans-unit id="d614ab4b08ea51c529ca2afd42bd5cb8f14039b7" translate="yes" xml:space="preserve">
          <source>Unsigned integer (0 to 255)</source>
          <target state="translated">符号なし整数(0~255</target>
        </trans-unit>
        <trans-unit id="ece1b13212dbdde6f6979b0eb6cfffcea163e303" translate="yes" xml:space="preserve">
          <source>Unsigned integer (0 to 4294967295)</source>
          <target state="translated">符号なし整数(0~4294967295</target>
        </trans-unit>
        <trans-unit id="5280260c5f39b844aa889ca5265bd63ac321070f" translate="yes" xml:space="preserve">
          <source>Unsigned integer (0 to 65535)</source>
          <target state="translated">符号なし整数(0~65535</target>
        </trans-unit>
        <trans-unit id="b2aab86479226bc8229a66fd8baa56a5fe8412a4" translate="yes" xml:space="preserve">
          <source>Unsigned integer type, compatible with C &lt;code&gt;unsigned char&lt;/code&gt;.</source>
          <target state="translated">符号なし整数型。Cの &lt;code&gt;unsigned char&lt;/code&gt; と互換性があります。</target>
        </trans-unit>
        <trans-unit id="595c836cdf50bf3f4050476b93f63ab67a1da92f" translate="yes" xml:space="preserve">
          <source>Unsigned integer type, compatible with C &lt;code&gt;unsigned int&lt;/code&gt;.</source>
          <target state="translated">Cと互換性のある符号なし整数型、 &lt;code&gt;unsigned int&lt;/code&gt; 型。</target>
        </trans-unit>
        <trans-unit id="2e05de9d1a63c40d810e731eb7ec8ec87ae658b9" translate="yes" xml:space="preserve">
          <source>Unsigned integer type, compatible with C &lt;code&gt;unsigned long&lt;/code&gt;.</source>
          <target state="translated">Cと互換性のある符号なし整数型、 &lt;code&gt;unsigned long&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c931b6dcc5518010a4218c052e902b5fef939e8d" translate="yes" xml:space="preserve">
          <source>Unsigned integer type, compatible with C &lt;code&gt;unsigned short&lt;/code&gt;.</source>
          <target state="translated">符号なし整数型。Cの &lt;code&gt;unsigned short&lt;/code&gt; と互換性があります。</target>
        </trans-unit>
        <trans-unit id="fd0a7731fa8a0a0f488308cec0945059f2de6581" translate="yes" xml:space="preserve">
          <source>Unsigned integer types</source>
          <target state="translated">符号なし整数型</target>
        </trans-unit>
        <trans-unit id="432373371510943ee2651ebf21148b86384d0a29" translate="yes" xml:space="preserve">
          <source>Unsigned integers:</source>
          <target state="translated">符号なし整数。</target>
        </trans-unit>
        <trans-unit id="c824dd22d12bde4feee6277b067eb0b05fa4fdf1" translate="yes" xml:space="preserve">
          <source>Unsigned versions of the integers can be defined by pre-pending a &amp;lsquo;u&amp;rsquo; to the front of the integer name.</source>
          <target state="translated">整数の符号なしバージョンは、整数名の前に「u」を付加することで定義できます。</target>
        </trans-unit>
        <trans-unit id="3b4a1ed161e3d5d468bc7819a4a4469e69fb390c" translate="yes" xml:space="preserve">
          <source>Unstructured array or dtype to convert.</source>
          <target state="translated">変換する非構造化配列または dtype。</target>
        </trans-unit>
        <trans-unit id="8443c9cc12807ec6c811788bbce2592aaf619083" translate="yes" xml:space="preserve">
          <source>Unstructured array with one more dimension.</source>
          <target state="translated">1つの次元が増える非構造化配列.</target>
        </trans-unit>
        <trans-unit id="239cbdafe6ac9fc4ef398b9a7b1e9b6cb6e3e71d" translate="yes" xml:space="preserve">
          <source>Until August 2020, this said:</source>
          <target state="translated">2020年8月まで、と。</target>
        </trans-unit>
        <trans-unit id="cd4f4dc80803ac1f52848ab12f25d8e2d5b8e16f" translate="yes" xml:space="preserve">
          <source>Until Python 3.5 the only disadvantage of using the array type was that you had to use &lt;code&gt;dot&lt;/code&gt; instead of &lt;code&gt;*&lt;/code&gt; to multiply (reduce) two tensors (scalar product, matrix vector multiplication etc.). Since Python 3.5 you can use the matrix multiplication &lt;code&gt;@&lt;/code&gt; operator.</source>
          <target state="translated">Python 3.5までは、配列型を使用することの唯一の欠点は、2つのテンソル（スカラー積、行列ベクトルの乗算など）を乗算（削減）するために &lt;code&gt;*&lt;/code&gt; の代わりに &lt;code&gt;dot&lt;/code&gt; を使用する必要があることでした。Python 3.5以降、行列乗算 &lt;code&gt;@&lt;/code&gt; 演算子を使用できます。</target>
        </trans-unit>
        <trans-unit id="91aa49f62879d325c6707e96a59652eaa942e8ca" translate="yes" xml:space="preserve">
          <source>Until the 1.15 release, NumPy used the &lt;a href=&quot;https://nose.readthedocs.io/en/latest/&quot;&gt;nose&lt;/a&gt; testing framework, it now uses the &lt;a href=&quot;https://pytest.readthedocs.io&quot;&gt;pytest&lt;/a&gt; framework. The older framework is still maintained in order to support downstream projects that use the old numpy framework, but all tests for NumPy should use pytest.</source>
          <target state="translated">1.15リリースまでは、NumPyは&lt;a href=&quot;https://nose.readthedocs.io/en/latest/&quot;&gt;ノーズ&lt;/a&gt;テストフレームワークを使用していましたが、現在は&lt;a href=&quot;https://pytest.readthedocs.io&quot;&gt;pytest&lt;/a&gt;フレームワークを使用しています。古いnumpyフレームワークを使用するダウンストリームプロジェクトをサポートするために、古いフレームワークは引き続き維持されますが、NumPyのすべてのテストではpytestを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="f13be7738e1389f72c0f88aa84d17719f746bf4a" translate="yes" xml:space="preserve">
          <source>Unused.</source>
          <target state="translated">Unused.</target>
        </trans-unit>
        <trans-unit id="52bd5ee224646394816a409132afdc6f181c7d8b" translate="yes" xml:space="preserve">
          <source>Unwelcome sexual attention.</source>
          <target state="translated">歓迎されない性的注意</target>
        </trans-unit>
        <trans-unit id="91235b6cec5e2bdecb806fae5c6f1c673c46dd54" translate="yes" xml:space="preserve">
          <source>Unwrap by changing deltas between values to 2*pi complement.</source>
          <target state="translated">値間のデルタを2*pi補数に変更してアンラップします。</target>
        </trans-unit>
        <trans-unit id="cba2ade8e0d37d0f36a249f716f7633b555a4616" translate="yes" xml:space="preserve">
          <source>Unwrap radian phase &lt;code&gt;p&lt;/code&gt; by changing absolute jumps greater than &lt;code&gt;discont&lt;/code&gt; to their 2*pi complement along the given axis.</source>
          <target state="translated">与えられた軸に沿って、 &lt;code&gt;discont&lt;/code&gt; より大きい絶対ジャンプを2 * pi補数に変更することにより、ラジアン位相 &lt;code&gt;p&lt;/code&gt; をアンラップします。</target>
        </trans-unit>
        <trans-unit id="31f87bfbdb61e41f06f9d6ba5c2c33b85dec73cd" translate="yes" xml:space="preserve">
          <source>Upcasting:</source>
          <target state="translated">Upcasting:</target>
        </trans-unit>
        <trans-unit id="579edc70cbe349fcc3048fa42d7c965a563d10ae" translate="yes" xml:space="preserve">
          <source>Update PyPI</source>
          <target state="translated">PyPIの更新</target>
        </trans-unit>
        <trans-unit id="a305b240bddfefe147af5326421c8f0107898199" translate="yes" xml:space="preserve">
          <source>Update Release documentation</source>
          <target state="translated">リリース文書の更新</target>
        </trans-unit>
        <trans-unit id="a858dc159ecba3062c1406c8e0fb587c83eace91" translate="yes" xml:space="preserve">
          <source>Update policy documents such as this one.</source>
          <target state="translated">このような方針書を更新します。</target>
        </trans-unit>
        <trans-unit id="676d87bea990c4c73ff4081f6b93aae5ebcc7dac" translate="yes" xml:space="preserve">
          <source>Update scipy.org</source>
          <target state="translated">scipy.orgを更新</target>
        </trans-unit>
        <trans-unit id="64e81e08ab40d294f4651a8208d4e909d5156cbf" translate="yes" xml:space="preserve">
          <source>Update the Milestones in Trac.</source>
          <target state="translated">Tracのマイルストーンを更新します。</target>
        </trans-unit>
        <trans-unit id="8117487cd3d843fb21b5965b5f6cf86d9fd9d8a6" translate="yes" xml:space="preserve">
          <source>Update the release notes with a Highlights section. Mention some of the following:</source>
          <target state="translated">リリースノートをハイライトセクションで更新します。以下のいくつかに言及してください。</target>
        </trans-unit>
        <trans-unit id="cd25c09dc3e898187644d607cbbc12c4edc2554e" translate="yes" xml:space="preserve">
          <source>Update the release status and create a release &amp;ldquo;tag&amp;rdquo;</source>
          <target state="translated">リリースステータスを更新し、リリース「タグ」を作成します</target>
        </trans-unit>
        <trans-unit id="1db22e1acc193e90fbde99ab0d68584a24cec01a" translate="yes" xml:space="preserve">
          <source>Update the version of the master branch</source>
          <target state="translated">マスターブランチのバージョンを更新する</target>
        </trans-unit>
        <trans-unit id="777088119e41bc0469a64ccb283496abe08bc95e" translate="yes" xml:space="preserve">
          <source>Updated version of PyArray_Correlate, which uses the usual definition of correlation for 1d arrays. The correlation is computed at each output point by multiplying &lt;em&gt;op1&lt;/em&gt; by a shifted version of &lt;em&gt;op2&lt;/em&gt; and summing the result. As a result of the shift, needed values outside of the defined range of &lt;em&gt;op1&lt;/em&gt; and &lt;em&gt;op2&lt;/em&gt; are interpreted as zero. The mode determines how many shifts to return: 0 - return only shifts that did not need to assume zero- values; 1 - return an object that is the same size as &lt;em&gt;op1&lt;/em&gt;, 2 - return all possible shifts (any overlap at all is accepted).</source>
          <target state="translated">1次元配列の相関の通常の定義を使用するPyArray_Correlateの更新バージョン。相関は、&lt;em&gt;op1&lt;/em&gt;にシフトされたバージョンの&lt;em&gt;op2&lt;/em&gt;を乗算して結果を合計することにより、各出力ポイントで計算されます。シフトの結果、&lt;em&gt;op1&lt;/em&gt;と&lt;em&gt;op2の&lt;/em&gt;定義された範囲外の必要な値はゼロとして解釈されます。モードは、返すシフトの数を決定します。0-ゼロ値を想定する必要のないシフトのみを返します。1- &lt;em&gt;op1&lt;/em&gt;と同じサイズのオブジェクトを返します&lt;em&gt;。2-&lt;/em&gt;可能なすべてのシフトを返します（オーバーラップはすべて受け入れられます）。</target>
        </trans-unit>
        <trans-unit id="a7409084cf2605b5cad89ac1878143241b496ed1" translate="yes" xml:space="preserve">
          <source>Updating the code</source>
          <target state="translated">コードの更新</target>
        </trans-unit>
        <trans-unit id="2ab89ee68187f5c809160685dea5430718e73ea0" translate="yes" xml:space="preserve">
          <source>Upload &lt;code&gt;doc/changelog/1.14.5-changelog.rst&lt;/code&gt; as a binary file.</source>
          <target state="translated">&lt;code&gt;doc/changelog/1.14.5-changelog.rst&lt;/code&gt; バイナリファイルとしてアップロードします。</target>
        </trans-unit>
        <trans-unit id="d1cf0b974aedc608d19f10cd46abf353ccf013a1" translate="yes" xml:space="preserve">
          <source>Upload &lt;code&gt;doc/changelog/1.19.0-changelog.rst&lt;/code&gt; as a binary file.</source>
          <target state="translated">&lt;code&gt;doc/changelog/1.19.0-changelog.rst&lt;/code&gt; バイナリファイルとしてアップロードします。</target>
        </trans-unit>
        <trans-unit id="e8242899ac44525eea3639fc9196319bcd5798e1" translate="yes" xml:space="preserve">
          <source>Upload &lt;code&gt;release/README.rst&lt;/code&gt; as a binary file.</source>
          <target state="translated">&lt;code&gt;release/README.rst&lt;/code&gt; をバイナリファイルとしてアップロードします。</target>
        </trans-unit>
        <trans-unit id="4be4f20f37deddb1b1a33a72c43f77bfa0490a76" translate="yes" xml:space="preserve">
          <source>Upload &lt;code&gt;release/installers/numpy-1.14.5.tar.gz&lt;/code&gt; as a binary file.</source>
          <target state="translated">&lt;code&gt;release/installers/numpy-1.14.5.tar.gz&lt;/code&gt; をバイナリファイルとしてアップロードします。</target>
        </trans-unit>
        <trans-unit id="c5f92deadaf10f46166261ad542bc8986cab5d64" translate="yes" xml:space="preserve">
          <source>Upload &lt;code&gt;release/installers/numpy-1.14.5.zip&lt;/code&gt; as a binary file.</source>
          <target state="translated">&lt;code&gt;release/installers/numpy-1.14.5.zip&lt;/code&gt; をバイナリファイルとしてアップロードします。</target>
        </trans-unit>
        <trans-unit id="33203022b8466a3576e1acf3d1dc460eb5c8960e" translate="yes" xml:space="preserve">
          <source>Upload &lt;code&gt;release/installers/numpy-1.19.0.tar.gz&lt;/code&gt; as a binary file.</source>
          <target state="translated">&lt;code&gt;release/installers/numpy-1.19.0.tar.gz&lt;/code&gt; をバイナリファイルとしてアップロードします。</target>
        </trans-unit>
        <trans-unit id="0420f995c997e7a2ced387d97a072ef37e7e87ef" translate="yes" xml:space="preserve">
          <source>Upload &lt;code&gt;release/installers/numpy-1.19.0.zip&lt;/code&gt; as a binary file.</source>
          <target state="translated">&lt;code&gt;release/installers/numpy-1.19.0.zip&lt;/code&gt; をバイナリファイルとしてアップロードします。</target>
        </trans-unit>
        <trans-unit id="feca53bac4346b96bf1a7a8af5a58f9b95162f3b" translate="yes" xml:space="preserve">
          <source>Upload documents to numpy.org</source>
          <target state="translated">ドキュメントをnumpy.orgにアップロードする</target>
        </trans-unit>
        <trans-unit id="8bc2fac0bfff4c1c9d6c6f5a22fc6d38d8b5119c" translate="yes" xml:space="preserve">
          <source>Upload files to github</source>
          <target state="translated">githubにファイルをアップロードする</target>
        </trans-unit>
        <trans-unit id="37ea156fa200c4b1e62bfc88ad83c78600949638" translate="yes" xml:space="preserve">
          <source>Upload to PyPI</source>
          <target state="translated">PyPIへのアップロード</target>
        </trans-unit>
        <trans-unit id="c16ab259dc55f6326fdf3044018a5aed36c63fd1" translate="yes" xml:space="preserve">
          <source>Upload to PyPI using &lt;code&gt;twine&lt;/code&gt;. A recent version of &lt;code&gt;twine&lt;/code&gt; of is needed after recent PyPI changes, version &lt;code&gt;1.11.0&lt;/code&gt; was used here.</source>
          <target state="translated">&lt;code&gt;twine&lt;/code&gt; を使用してPyPIにアップロードします。最近のバージョン &lt;code&gt;twine&lt;/code&gt; 、最近は、PyPIの変更後に必要とされるのは、バージョン &lt;code&gt;1.11.0&lt;/code&gt; は、ここで使用されました。</target>
        </trans-unit>
        <trans-unit id="440f57ef8033b34c5e177db217a4c616fe0710cc" translate="yes" xml:space="preserve">
          <source>Upload to PyPI using &lt;code&gt;twine&lt;/code&gt;. A recent version of &lt;code&gt;twine&lt;/code&gt; of is needed after recent PyPI changes, version &lt;code&gt;3.1.1&lt;/code&gt; was used here:</source>
          <target state="translated">&lt;code&gt;twine&lt;/code&gt; を使用してPyPIにアップロードします。最近のPyPIの変更後、最新バージョンの &lt;code&gt;twine&lt;/code&gt; が必要です。バージョン &lt;code&gt;3.1.1&lt;/code&gt; がここで使用されました。</target>
        </trans-unit>
        <trans-unit id="6565e74e2ff5bcf02b09c60c49c14fcfab1feb84" translate="yes" xml:space="preserve">
          <source>Uploading to PyPI</source>
          <target state="translated">PyPIへのアップロード</target>
        </trans-unit>
        <trans-unit id="9b72e324adb06ca1d01de4a8922403d911a439a0" translate="yes" xml:space="preserve">
          <source>Upper bound to relative error due to rounding in 64-bit floating point arithmetic.</source>
          <target state="translated">64ビット浮動小数点演算の丸めによる相対誤差の上限値。</target>
        </trans-unit>
        <trans-unit id="80d1841e63317d86d0b2bbae07f2e08dc59ff7f9" translate="yes" xml:space="preserve">
          <source>Upper boundary of the output interval. All values generated will be less than high. The default value is 1.0.</source>
          <target state="translated">出力間隔の上限。生成される値はすべて高値以下になります。デフォルト値は1.0です。</target>
        </trans-unit>
        <trans-unit id="94608c7ff5f4700d78cab2cf3285f4a9e6dc1615" translate="yes" xml:space="preserve">
          <source>Upper boundary of the output interval. All values generated will be less than or equal to high. The default value is 1.0.</source>
          <target state="translated">出力間隔の上限。生成されるすべての値は高値以下になります。デフォルト値は1.0です。</target>
        </trans-unit>
        <trans-unit id="52be5864b9af229753de85f916fa14a1fa97d3a1" translate="yes" xml:space="preserve">
          <source>Upper limit, must be larger than &lt;code&gt;left&lt;/code&gt;.</source>
          <target state="translated">上限。 &lt;code&gt;left&lt;/code&gt; より大きくする必要があります。</target>
        </trans-unit>
        <trans-unit id="528933f6438e2665073f1a6a0a370889bd9e0bae" translate="yes" xml:space="preserve">
          <source>Upper or lower-triangular Cholesky factor of &lt;code&gt;a&lt;/code&gt;. Returns a matrix object if &lt;code&gt;a&lt;/code&gt; is a matrix object.</source>
          <target state="translated">上側または下三角コレスキー因子。場合は行列オブジェクトを返しマトリックスオブジェクトです。 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="57bb98258946012ee6623d2627640ef4f5f0bbc8" translate="yes" xml:space="preserve">
          <source>Upper triangle of an array.</source>
          <target state="translated">配列の上三角形。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="0385484fbb876c4198e9c03bf37e041d3810df5e" translate="yes" xml:space="preserve">
          <source>Usage and Examples</source>
          <target state="translated">使い方と例</target>
        </trans-unit>
        <trans-unit id="a6ddf950ead3f5a277ec641c8bb4408b4523e874" translate="yes" xml:space="preserve">
          <source>Usage of ATLAS and other accelerated libraries in NumPy can be disabled via:</source>
          <target state="translated">NumPyでのATLASや他のアクセラレータライブラリの使用を無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="861a0e430ffac5e4ae6e11b7a947f2c32d388cf4" translate="yes" xml:space="preserve">
          <source>Usage:</source>
          <target state="translated">Usage:</target>
        </trans-unit>
        <trans-unit id="f8422a8af0050351fb69661fa171b15f26430c90" translate="yes" xml:space="preserve">
          <source>Use 4-space indents and no tabs at all.</source>
          <target state="translated">4スペースのインデントを使用し、タブは一切使用しません。</target>
        </trans-unit>
        <trans-unit id="a4f4f55257b83792366b61f4d5627bfeafb83aa3" translate="yes" xml:space="preserve">
          <source>Use 64-bit integer size on 64-bit platforms in fallback lapack_lite</source>
          <target state="translated">フォールバック lapack_lite で 64 ビットプラットフォームで 64 ビット整数サイズを使用する</target>
        </trans-unit>
        <trans-unit id="a15df8cc43a52230464924d2366701940520ece7" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;#numpy.inf&quot;&gt;&lt;code&gt;inf&lt;/code&gt;&lt;/a&gt; because &lt;a href=&quot;#numpy.Inf&quot;&gt;&lt;code&gt;Inf&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#numpy.Infinity&quot;&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#numpy.PINF&quot;&gt;&lt;code&gt;PINF&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#numpy.infty&quot;&gt;&lt;code&gt;infty&lt;/code&gt;&lt;/a&gt; are aliases for &lt;a href=&quot;#numpy.inf&quot;&gt;&lt;code&gt;inf&lt;/code&gt;&lt;/a&gt;. For more details, see &lt;a href=&quot;#numpy.inf&quot;&gt;&lt;code&gt;inf&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用&lt;a href=&quot;#numpy.inf&quot;&gt; &lt;code&gt;inf&lt;/code&gt; &lt;/a&gt;ので&lt;a href=&quot;#numpy.Inf&quot;&gt; &lt;code&gt;Inf&lt;/code&gt; を&lt;/a&gt;、&lt;a href=&quot;#numpy.Infinity&quot;&gt; &lt;code&gt;Infinity&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#numpy.PINF&quot;&gt; &lt;code&gt;PINF&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#numpy.infty&quot;&gt; &lt;code&gt;infty&lt;/code&gt; のは&lt;/a&gt;の別名です&lt;a href=&quot;#numpy.inf&quot;&gt; &lt;code&gt;inf&lt;/code&gt; ファイル&lt;/a&gt;。詳細については、&lt;a href=&quot;#numpy.inf&quot;&gt; &lt;code&gt;inf&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="351414f7c521f4b341a7a407035466c24988a100" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../reference/generated/numpy.genfromtxt#numpy.genfromtxt&quot;&gt;&lt;code&gt;numpy.genfromtxt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../reference/generated/numpy.genfromtxt#numpy.genfromtxt&quot;&gt; &lt;code&gt;numpy.genfromtxt&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="1081c5bfa15ce1f1d2793775db1564a0d257f094" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../reference/generated/numpy.load#numpy.load&quot;&gt;&lt;code&gt;numpy.load&lt;/code&gt;&lt;/a&gt;. It can read files generated by any of &lt;a href=&quot;../reference/generated/numpy.save#numpy.save&quot;&gt;&lt;code&gt;numpy.save&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../reference/generated/numpy.savez#numpy.savez&quot;&gt;&lt;code&gt;numpy.savez&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../reference/generated/numpy.savez_compressed#numpy.savez_compressed&quot;&gt;&lt;code&gt;numpy.savez_compressed&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../reference/generated/numpy.load#numpy.load&quot;&gt; &lt;code&gt;numpy.load&lt;/code&gt; を&lt;/a&gt;使用します。&lt;a href=&quot;../reference/generated/numpy.save#numpy.save&quot;&gt; &lt;code&gt;numpy.save&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../reference/generated/numpy.savez#numpy.savez&quot;&gt; &lt;code&gt;numpy.savez&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../reference/generated/numpy.savez_compressed#numpy.savez_compressed&quot;&gt; &lt;code&gt;numpy.savez_compressed&lt;/code&gt; の&lt;/a&gt;いずれかによって生成されたファイルを読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="c2da46a0755bb961c8bf3e39960e920a669632f9" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../reference/generated/numpy.loadtxt#numpy.loadtxt&quot;&gt;&lt;code&gt;numpy.loadtxt&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../reference/generated/numpy.loadtxt#numpy.loadtxt&quot;&gt; &lt;code&gt;numpy.loadtxt&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="f4f8ac8fa6bbe32be50850bd12eaa662fa8d4dcb" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../reference/generated/numpy.save#numpy.save&quot;&gt;&lt;code&gt;numpy.save&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../reference/generated/numpy.load#numpy.load&quot;&gt;&lt;code&gt;numpy.load&lt;/code&gt;&lt;/a&gt;. Set &lt;code&gt;allow_pickle=False&lt;/code&gt;, unless the array dtype includes Python objects, in which case pickling is required.</source>
          <target state="translated">&lt;a href=&quot;../reference/generated/numpy.save#numpy.save&quot;&gt; &lt;code&gt;numpy.save&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../reference/generated/numpy.load#numpy.load&quot;&gt; &lt;code&gt;numpy.load&lt;/code&gt; を&lt;/a&gt;使用します。配列dtypeにPythonオブジェクトが含まれている場合を除き、 &lt;code&gt;allow_pickle=False&lt;/code&gt; を設定します。この場合、pickle化が必要です。</target>
        </trans-unit>
        <trans-unit id="02b4c353908e359bf6eb7d8604286846ac3d1bd8" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;../reference/generated/numpy.save#numpy.save&quot;&gt;&lt;code&gt;numpy.save&lt;/code&gt;&lt;/a&gt;, or to store multiple arrays &lt;a href=&quot;../reference/generated/numpy.savez#numpy.savez&quot;&gt;&lt;code&gt;numpy.savez&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../reference/generated/numpy.savez_compressed#numpy.savez_compressed&quot;&gt;&lt;code&gt;numpy.savez_compressed&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../reference/generated/numpy.save#numpy.save&quot;&gt; &lt;code&gt;numpy.save&lt;/code&gt; を&lt;/a&gt;使用するか、複数の配列&lt;a href=&quot;../reference/generated/numpy.savez#numpy.savez&quot;&gt; &lt;code&gt;numpy.savez&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../reference/generated/numpy.savez_compressed#numpy.savez_compressed&quot;&gt; &lt;code&gt;numpy.savez_compressed&lt;/code&gt; を格納し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6250a8c021e0b5f57d8def96501e9671eb570fb3" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;bit_generators/generated/numpy.random.seedsequence.spawn#numpy.random.SeedSequence.spawn&quot;&gt;&lt;code&gt;SeedSequence.spawn&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;bit_generators/generated/numpy.random.seedsequence.spawn#numpy.random.SeedSequence.spawn&quot;&gt; &lt;code&gt;SeedSequence.spawn&lt;/code&gt; を&lt;/a&gt;使用する</target>
        </trans-unit>
        <trans-unit id="315e845b90149a11b36b35f1bf0bf7c4eadadf53" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;bit_generators/generated/numpy.random.seedsequence.spawn#numpy.random.SeedSequence.spawn&quot;&gt;&lt;code&gt;spawn&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;bit_generators/generated/numpy.random.seedsequence.spawn#numpy.random.SeedSequence.spawn&quot;&gt; &lt;code&gt;spawn&lt;/code&gt; &lt;/a&gt;使用</target>
        </trans-unit>
        <trans-unit id="6cd23ceb7d31c81e1ae51bfa02cfeb8d16da6862" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;https://github.com/hawkowl/towncrier&quot;&gt;towncrier&lt;/a&gt; to build the release note and commit the changes. This will remove all the fragments from &lt;code&gt;doc/release/upcoming_changes&lt;/code&gt; and add &lt;code&gt;doc/release/&amp;lt;version&amp;gt;-note.rst&lt;/code&gt;. Note that currently towncrier must be installed from its master branch as the last release (19.2.0) is outdated.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/hawkowl/towncrier&quot;&gt;Towncrier&lt;/a&gt;を使用してリリースノートを作成し、変更をコミットします。これにより、 &lt;code&gt;doc/release/upcoming_changes&lt;/code&gt; からすべてのフラグメントが削除され、 &lt;code&gt;doc/release/&amp;lt;version&amp;gt;-note.rst&lt;/code&gt; ます。前回のリリース（19.2.0）は古くなっているため、現在、towncrierはマスターブランチからインストールする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="239d871fd4cf571322892166220cc9bdd722de95" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;numpy.printoptions#numpy.printoptions&quot;&gt;&lt;code&gt;printoptions&lt;/code&gt;&lt;/a&gt; as a context manager to set the values temporarily.</source>
          <target state="translated">値を一時的に設定するには、コンテキストマネージャーとして&lt;a href=&quot;numpy.printoptions#numpy.printoptions&quot;&gt; &lt;code&gt;printoptions&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="f81e110951d1c31f755b7eda89bda400f45185fe" translate="yes" xml:space="preserve">
          <source>Use &lt;a href=&quot;numpy.testing.assert_allclose#numpy.testing.assert_allclose&quot;&gt;&lt;code&gt;assert_allclose&lt;/code&gt;&lt;/a&gt; or one of the nulp (number of floating point values) functions for these cases instead:</source>
          <target state="translated">使用&lt;a href=&quot;numpy.testing.assert_allclose#numpy.testing.assert_allclose&quot;&gt; &lt;code&gt;assert_allclose&lt;/code&gt; &lt;/a&gt;又はnulpの（浮動小数点値の数）の代わりにこれらのケースのための機能：</target>
        </trans-unit>
        <trans-unit id="c2c3133adfff844d3d7390f3b12e049c01cfbf85" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;*italics*&lt;/code&gt;, &lt;code&gt;**bold**&lt;/code&gt; and &lt;code&gt;``monospace``&lt;/code&gt; if needed in any explanations (but not for variable names and doctest code or multi-line code). Variable, module, function, and class names should be written between single back-ticks (&lt;code&gt;`numpy`&lt;/code&gt;).</source>
          <target state="translated">使用 &lt;code&gt;*italics*&lt;/code&gt; 、 &lt;code&gt;**bold**&lt;/code&gt; と &lt;code&gt;``monospace``&lt;/code&gt; 任意の説明では、必要に応じて（ただし、変数名やdoctestのコードまたは複数行のコード）。変数、モジュール、関数、およびクラスの名前は、単一のバックティック（ &lt;code&gt;`numpy`&lt;/code&gt; ）の間に記述する必要があります。</target>
        </trans-unit>
        <trans-unit id="f96b961e5f74e075163f17783fa068cb28fd7dac" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;Py_BEGIN_ALLOW_THREADS .. Py_END_ALLOW_THREADS&lt;/code&gt; block around the call to Fortran/C function.</source>
          <target state="translated">&lt;code&gt;Py_BEGIN_ALLOW_THREADS .. Py_END_ALLOW_THREADS&lt;/code&gt; ブロックを使用して、Fortran / C関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="279c8e9cb261d8451ee87221b2c4c3c0acff77e2" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;atleast1d&lt;/code&gt; explicitly if this behavior is deliberate.</source>
          <target state="translated">この動作が意図的なものである場合は、明示的に &lt;code&gt;atleast1d&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="1f3c1a16eb9a2500b8452a8a5360fe793c9d0e80" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;integers(0, np.iinfo(np.int_).max,&lt;/code&gt;&lt;code&gt;endpoint=False)&lt;/code&gt;</source>
          <target state="translated">使用 &lt;code&gt;integers(0, np.iinfo(np.int_).max,&lt;/code&gt; &lt;code&gt;endpoint=False)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9990e788a91877bc1314e512b42f5fa96b72afa8" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;intent(callback)&lt;/code&gt; in situations where a Fortran/C code assumes that a user implements a function with given prototype and links it to an executable. Don&amp;rsquo;t use &lt;code&gt;intent(callback)&lt;/code&gt; if function appears in the argument list of a Fortran routine.</source>
          <target state="translated">Fortran / Cコードが、ユーザーが指定されたプロトタイプを使用して関数を実装し、それを実行可能ファイルにリンクすると想定する状況では、 &lt;code&gt;intent(callback)&lt;/code&gt; を使用します。関数がFortranルーチンの引数リストにある場合は、 &lt;code&gt;intent(callback)&lt;/code&gt; を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="c8f354d8129891e4371211f7e2b02c3e86182e68" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;np.rec.fromrecords&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;np.rec.fromrecords&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="7b891c3328df6ed66c13f42757acead75f849207" translate="yes" xml:space="preserve">
          <source>Use &lt;code&gt;transpose(a, argsort(axes))&lt;/code&gt; to invert the transposition of tensors when using the &lt;code&gt;axes&lt;/code&gt; keyword argument.</source>
          <target state="translated">使用 &lt;code&gt;transpose(a, argsort(axes))&lt;/code&gt; 使用している場合テンソルの転置を反転させる &lt;code&gt;axes&lt;/code&gt; キーワード引数を。</target>
        </trans-unit>
        <trans-unit id="464b9132a697ad83a17ca6141a5f052f243225bc" translate="yes" xml:space="preserve">
          <source>Use AVX512 intrinsic to implement &lt;code&gt;np.exp&lt;/code&gt; when input is &lt;code&gt;np.float64&lt;/code&gt;</source>
          <target state="translated">実装に使用AVX512の固有 &lt;code&gt;np.exp&lt;/code&gt; 入力されたとき &lt;code&gt;np.float64&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="54252b83acef1c2d4145831c1849100189007324" translate="yes" xml:space="preserve">
          <source>Use C99 (that is, the standard defined by ISO/IEC 9899:1999).</source>
          <target state="translated">C99(つまり、ISO/IEC 9899:1999で定義された規格)を使用する。</target>
        </trans-unit>
        <trans-unit id="711cfaf9a47519e9f223142a373928a92e01f581" translate="yes" xml:space="preserve">
          <source>Use C99 complex functions when available</source>
          <target state="translated">利用可能な場合はC99の複合関数を使用</target>
        </trans-unit>
        <trans-unit id="86275be9977f886d82e016929a242789bd409942" translate="yes" xml:space="preserve">
          <source>Use a &lt;a href=&quot;basics.rec&quot;&gt;structured array&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;basics.rec&quot;&gt;構造化配列を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="98bf81203a370aca52162542f86441968d5a857b" translate="yes" xml:space="preserve">
          <source>Use a code checker:</source>
          <target state="translated">コードチェッカーを使用します。</target>
        </trans-unit>
        <trans-unit id="e79cdecbdf930a5fc02d963ddb3cee0b341e1836" translate="yes" xml:space="preserve">
          <source>Use an index array to construct a new array from a set of choices.</source>
          <target state="translated">インデックス配列を使用して、選択肢の集合から新しい配列を構築します。</target>
        </trans-unit>
        <trans-unit id="b449716c39e8e2ad1701598e0a781904fd930dad" translate="yes" xml:space="preserve">
          <source>Use boolean indexing to select all rows adding up to an even number. At the same time columns 0 and 2 should be selected with an advanced integer index. Using the &lt;a href=&quot;generated/numpy.ix_#numpy.ix_&quot;&gt;&lt;code&gt;ix_&lt;/code&gt;&lt;/a&gt; function this can be done with:</source>
          <target state="translated">ブールインデックスを使用して、合計が偶数になるすべての行を選択します。同時に、列0および2は、拡張整数インデックスで選択する必要があります。&lt;a href=&quot;generated/numpy.ix_#numpy.ix_&quot;&gt; &lt;code&gt;ix_&lt;/code&gt; &lt;/a&gt;関数を使用すると、これは次のように実行できます。</target>
        </trans-unit>
        <trans-unit id="8b644965af35188379a837d813ccb011d1f78f91" translate="yes" xml:space="preserve">
          <source>Use f90 compiler specified by the command line args</source>
          <target state="translated">コマンドラインの引数で指定されたf90コンパイラを使用します。</target>
        </trans-unit>
        <trans-unit id="8f82174ebfd083d8637822ce00a0c4c91588113b" translate="yes" xml:space="preserve">
          <source>Use frompyfunc to add broadcasting to the Python function &lt;code&gt;oct&lt;/code&gt;:</source>
          <target state="translated">frompyfuncを使用して、Python関数 &lt;code&gt;oct&lt;/code&gt; にブロードキャストを追加します。</target>
        </trans-unit>
        <trans-unit id="1985c7d495449d5cb406d70622b9f8f51933acf4" translate="yes" xml:space="preserve">
          <source>Use integers()</source>
          <target state="translated">integers()を使用します。</target>
        </trans-unit>
        <trans-unit id="dc8e632ae2c46f77a697535ec370bf0774d7d3a3" translate="yes" xml:space="preserve">
          <source>Use it inside source generating function to ensure that setup distribution instance has been initialized.</source>
          <target state="translated">ソース生成関数の内部で使用し、セットアップ配布インスタンスが初期化されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="19f951b7351050e3c262a94c6097609e26d32919" translate="yes" xml:space="preserve">
          <source>Use memory mapping. See &lt;a href=&quot;../reference/generated/numpy.lib.format.open_memmap#numpy.lib.format.open_memmap&quot;&gt;&lt;code&gt;numpy.lib.format.open_memmap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">メモリマッピングを使用します。&lt;a href=&quot;../reference/generated/numpy.lib.format.open_memmap#numpy.lib.format.open_memmap&quot;&gt; &lt;code&gt;numpy.lib.format.open_memmap&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2ee4c011b47d55b7bfff5ce2a411098048a912df" translate="yes" xml:space="preserve">
          <source>Use numpy data types instead of strings (&lt;code&gt;np.uint8&lt;/code&gt; instead of &lt;code&gt;&quot;uint8&quot;&lt;/code&gt;).</source>
          <target state="translated">文字列の代わりにnumpyデータ型を使用します（ &lt;code&gt;&quot;uint8&quot;&lt;/code&gt; 代わりに &lt;code&gt;np.uint8&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2623e95742f95738b81e96ff23790e2857ea53b8" translate="yes" xml:space="preserve">
          <source>Use of Special Libraries</source>
          <target state="translated">特別図書館の利用</target>
        </trans-unit>
        <trans-unit id="71894ec37f432f11f7de9a5b9b593a7cdf8ac0f3" translate="yes" xml:space="preserve">
          <source>Use of internal buffers</source>
          <target state="translated">内部バッファの使用</target>
        </trans-unit>
        <trans-unit id="19e9181ca40527ae40c5f3d764f8d2f436e1e1db" translate="yes" xml:space="preserve">
          <source>Use of special library functions (e.g., random)</source>
          <target state="translated">特殊なライブラリ関数の使用(ランダムなど</target>
        </trans-unit>
        <trans-unit id="375ee90511f8800725237c9c32010dd6bfc434d9" translate="yes" xml:space="preserve">
          <source>Use one of the two predefined instances &lt;code&gt;index_exp&lt;/code&gt; or &lt;a href=&quot;#numpy.s_&quot;&gt;&lt;code&gt;s_&lt;/code&gt;&lt;/a&gt; rather than directly using &lt;code&gt;IndexExpression&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;IndexExpression&lt;/code&gt; を直接使用するのではなく、2つの定義済みインスタンス &lt;code&gt;index_exp&lt;/code&gt; または&lt;a href=&quot;#numpy.s_&quot;&gt; &lt;code&gt;s_&lt;/code&gt; のいずれ&lt;/a&gt;かを使用します。</target>
        </trans-unit>
        <trans-unit id="4baff69e242f9bdf1683765ea1f2508b120d6009" translate="yes" xml:space="preserve">
          <source>Use statements:</source>
          <target state="translated">ステートメントを使用します。</target>
        </trans-unit>
        <trans-unit id="f399bcf7c74a9a9e383f645bfc3f3a24ebea505e" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;--f2cmap&lt;/code&gt; command-line option to pass the file name to F2PY. By default, F2PY assumes file name is &lt;code&gt;.f2py_f2cmap&lt;/code&gt; in the current working directory.</source>
          <target state="translated">&lt;code&gt;--f2cmap&lt;/code&gt; コマンドラインオプションを使用して、ファイル名をF2PYに渡します。デフォルトでは、F2PYは、ファイル名が現在の作業ディレクトリの &lt;code&gt;.f2py_f2cmap&lt;/code&gt; であると想定します。</target>
        </trans-unit>
        <trans-unit id="563d6ccf41351782f370e56a915df0b3956e26f4" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;buf&lt;/code&gt; keyword.</source>
          <target state="translated">&lt;code&gt;buf&lt;/code&gt; キーワードを使用します。</target>
        </trans-unit>
        <trans-unit id="6e0dab0efbd30d7f80d43f09e327292cfe0afdb8" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;endpoint&lt;/code&gt; kwarg to adjust the inclusion or exclution of the &lt;code&gt;high&lt;/code&gt; interval endpoint</source>
          <target state="translated">&lt;code&gt;endpoint&lt;/code&gt; クワーグを使用して、 &lt;code&gt;high&lt;/code&gt; 間隔エンドポイントの包含または除外を調整します</target>
        </trans-unit>
        <trans-unit id="1a4a01452f45e746c6cb102d0e1fd6cdbe229239" translate="yes" xml:space="preserve">
          <source>Use the &lt;code&gt;order&lt;/code&gt; keyword to specify a field to use when sorting a structured array:</source>
          <target state="translated">&lt;code&gt;order&lt;/code&gt; キーワードを使用して、構造化配列をソートするときに使用するフィールドを指定します。</target>
        </trans-unit>
        <trans-unit id="bd1412430a20e73aea7c2107ffe5351cd94a8833" translate="yes" xml:space="preserve">
          <source>Use the following import conventions:</source>
          <target state="translated">以下のインポート規約を使用してください。</target>
        </trans-unit>
        <trans-unit id="25cbadfbabe4aec8c49a2fe4ad5d41f89ab2957d" translate="yes" xml:space="preserve">
          <source>Use the indices of the non-zero elements as an index array to extract these elements:</source>
          <target state="translated">ゼロではない要素のインデックスをインデックス配列として使用して、これらの要素を抽出します。</target>
        </trans-unit>
        <trans-unit id="053906d6c11e234d0523bc070994cf48c59e8878" translate="yes" xml:space="preserve">
          <source>Use the library &lt;code&gt;&amp;lt;libname&amp;gt;&lt;/code&gt; when linking.</source>
          <target state="translated">リンクするときは、ライブラリ &lt;code&gt;&amp;lt;libname&amp;gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="52a989636199f4d3c95f768797df44dd326f52d3" translate="yes" xml:space="preserve">
          <source>Use the same sections as outlined above (all except &lt;code&gt;Returns&lt;/code&gt; are applicable). The constructor (&lt;code&gt;__init__&lt;/code&gt;) should also be documented here, the &lt;strong&gt;Parameters&lt;/strong&gt; section of the docstring details the constructors parameters.</source>
          <target state="translated">上記と同じセクションを使用してください（ &lt;code&gt;Returns&lt;/code&gt; を除くすべてが適用されます）。コンストラクター（ &lt;code&gt;__init__&lt;/code&gt; ）もここに文書化する必要があります。docstringの&lt;strong&gt;パラメーター&lt;/strong&gt;セクションにコンストラクターパラメーターの詳細が記載されています。</target>
        </trans-unit>
        <trans-unit id="bcbe93ff8f6462c82dd7a279518d76404badb4f2" translate="yes" xml:space="preserve">
          <source>Use the same sections as outlined for functions where applicable:</source>
          <target state="translated">該当する場合は、機能の概要と同じセクションを使用してください。</target>
        </trans-unit>
        <trans-unit id="91b5ae96e69a49c5a6862c6b40c4da95f9ee09c6" translate="yes" xml:space="preserve">
          <source>Use these sparingly, as they do not look very good in text terminals and are not often necessary. One situation in which a warning can be useful is for marking a known bug that is not yet fixed.</source>
          <target state="translated">テキスト端末ではあまり見栄えが良くないし、必要とされないことも多いので、 控えめに使いましょう。警告が有用な状況のひとつに、まだ修正されていない既知のバグをマークすることがあります。</target>
        </trans-unit>
        <trans-unit id="fce2d931323b452a238b3e2d786e8a8211d7c7e3" translate="yes" xml:space="preserve">
          <source>Used as an alias of &lt;a href=&quot;#c.NPY_MERGESORT&quot;&gt;&lt;code&gt;NPY_MERGESORT&lt;/code&gt;&lt;/a&gt; and vica versa.</source>
          <target state="translated">&lt;a href=&quot;#c.NPY_MERGESORT&quot;&gt; &lt;code&gt;NPY_MERGESORT&lt;/code&gt; の&lt;/a&gt;エイリアスとして使用され、その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="fd6f1513bb6f3e4a98050539792c7f3cbaf760a6" translate="yes" xml:space="preserve">
          <source>Used as-is.</source>
          <target state="translated">そのまま使用しています。</target>
        </trans-unit>
        <trans-unit id="07b7a5c37f889b88311324311f27b8d80e97eae1" translate="yes" xml:space="preserve">
          <source>Used exclusively for the purpose static type checking, &lt;a href=&quot;#numpy.typing.NBitBase&quot;&gt;&lt;code&gt;NBitBase&lt;/code&gt;&lt;/a&gt; represents the base of a hierachieral set of subclasses. Each subsequent subclass is herein used for representing a lower level of precision, &lt;em&gt;e.g.&lt;/em&gt;&lt;code&gt;64Bit &amp;gt; 32Bit &amp;gt; 16Bit&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#numpy.typing.NBitBase&quot;&gt; &lt;code&gt;NBitBase&lt;/code&gt; &lt;/a&gt;は、静的型チェックの目的でのみ使用され、サブクラスの階層セットのベースを表します。後続の各サブクラスは、本明細書に精度の低いレベル、表現するために使用され&lt;em&gt;、例えば&lt;/em&gt; &lt;code&gt;64Bit &amp;gt; 32Bit &amp;gt; 16Bit&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="86d25879dd6e8e65f51cfd2c9e310da0aa3fb93c" translate="yes" xml:space="preserve">
          <source>Used for an array, &lt;em&gt;op&lt;/em&gt;, that contains any Python objects. It decrements the reference count of every object in the array according to the data-type of &lt;em&gt;op&lt;/em&gt;. Normal return value is 0. A -1 is returned if an error occurs.</source>
          <target state="translated">Pythonオブジェクトを含む配列&lt;em&gt;opに&lt;/em&gt;使用されます。&lt;em&gt;opの&lt;/em&gt;データ型に従って、配列内のすべてのオブジェクトの参照カウントを減らします。通常の戻り値は0です。エラーが発生した場合は-1が返されます。</target>
        </trans-unit>
        <trans-unit id="12676328e0f8258da10db691bf737e9cd286a726" translate="yes" xml:space="preserve">
          <source>Used for an array, &lt;em&gt;op&lt;/em&gt;, that contains any Python objects. It increments the reference count of every object in the array according to the data-type of &lt;em&gt;op&lt;/em&gt;. A -1 is returned if an error occurs, otherwise 0 is returned.</source>
          <target state="translated">Pythonオブジェクトを含む配列&lt;em&gt;opに&lt;/em&gt;使用されます。&lt;em&gt;opの&lt;/em&gt;データ型に従って、配列内のすべてのオブジェクトの参照カウントをインクリメントします。エラーが発生した場合は-1が返され、それ以外の場合は0が返されます。</target>
        </trans-unit>
        <trans-unit id="2a13b41ea5661dcbc4d05b7183bc9d474dd67bb8" translate="yes" xml:space="preserve">
          <source>Used if &lt;a href=&quot;https://docs.python.org/dev/library/copy.html#copy.copy&quot;&gt;&lt;code&gt;copy.copy&lt;/code&gt;&lt;/a&gt; is called on an array.</source>
          <target state="translated">配列で&lt;a href=&quot;https://docs.python.org/dev/library/copy.html#copy.copy&quot;&gt; &lt;code&gt;copy.copy&lt;/code&gt; &lt;/a&gt;が呼び出された場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="b1500692edf9e6d67bd590cb2e6428fecab9820c" translate="yes" xml:space="preserve">
          <source>Used if &lt;a href=&quot;https://docs.python.org/dev/library/copy.html#copy.copy&quot;&gt;&lt;code&gt;copy.copy&lt;/code&gt;&lt;/a&gt; is called on an array. Returns a copy of the array.</source>
          <target state="translated">配列で&lt;a href=&quot;https://docs.python.org/dev/library/copy.html#copy.copy&quot;&gt; &lt;code&gt;copy.copy&lt;/code&gt; &lt;/a&gt;が呼び出された場合に使用されます。配列のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="054ce70cbf81d2356ba6ae20aa8fb864ef13bf9e" translate="yes" xml:space="preserve">
          <source>Used if &lt;a href=&quot;https://docs.python.org/dev/library/copy.html#copy.deepcopy&quot;&gt;&lt;code&gt;copy.deepcopy&lt;/code&gt;&lt;/a&gt; is called on an array.</source>
          <target state="translated">配列で&lt;a href=&quot;https://docs.python.org/dev/library/copy.html#copy.deepcopy&quot;&gt; &lt;code&gt;copy.deepcopy&lt;/code&gt; &lt;/a&gt;が呼び出された場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="df1278433c263cdbbd69170e679d3f52bb78e816" translate="yes" xml:space="preserve">
          <source>Used in &amp;lsquo;constant&amp;rsquo;. The values to set the padded values for each axis.</source>
          <target state="translated">「定数」で使用されます。各軸のパディングされた値を設定する値。</target>
        </trans-unit>
        <trans-unit id="465b8fcd19cd5e2ed77adff74f2ff5a3fc18db79" translate="yes" xml:space="preserve">
          <source>Used in &amp;lsquo;linear_ramp&amp;rsquo;. The values used for the ending value of the linear_ramp and that will form the edge of the padded array.</source>
          <target state="translated">「linear_ramp」で使用されます。linear_rampの終了値に使用され、パディングされた配列のエッジを形成する値。</target>
        </trans-unit>
        <trans-unit id="d71d6f65b16e9b35cb9fcf9b7569838936b2caa2" translate="yes" xml:space="preserve">
          <source>Used in &amp;lsquo;maximum&amp;rsquo;, &amp;lsquo;mean&amp;rsquo;, &amp;lsquo;median&amp;rsquo;, and &amp;lsquo;minimum&amp;rsquo;. Number of values at edge of each axis used to calculate the statistic value.</source>
          <target state="translated">「最大」、「平均」、「中央値」、「最小」で使用されます。統計値の計算に使用される各軸の端にある値の数。</target>
        </trans-unit>
        <trans-unit id="4325f42e7e418215aac0a73c897c39904b4d0a1e" translate="yes" xml:space="preserve">
          <source>Used in &amp;lsquo;reflect&amp;rsquo;, and &amp;lsquo;symmetric&amp;rsquo;. The &amp;lsquo;even&amp;rsquo; style is the default with an unaltered reflection around the edge value. For the &amp;lsquo;odd&amp;rsquo; style, the extended part of the array is created by subtracting the reflected values from two times the edge value.</source>
          <target state="translated">「反映」および「対称」で使用されます。「偶数」スタイルがデフォルトで、エッジ値の周りの反射は変更されません。「奇数」スタイルの場合、配列の拡張部分は、エッジ値の2倍から反射値を差し引くことによって作成されます。</target>
        </trans-unit>
        <trans-unit id="6a848d84f0829fb89fe0a4c3ff31da438ec74574" translate="yes" xml:space="preserve">
          <source>Used in universal function code to only release the Python GIL if loop-&amp;gt;obj is not true (&lt;em&gt;i.e.&lt;/em&gt; this is not an OBJECT array loop). Requires use of &lt;a href=&quot;array#c.NPY_BEGIN_THREADS_DEF&quot;&gt;&lt;code&gt;NPY_BEGIN_THREADS_DEF&lt;/code&gt;&lt;/a&gt; in variable declaration area.</source>
          <target state="translated">ユニバーサル関数コードで使用され、loop-&amp;gt; objがtrueでない場合（&lt;em&gt;つまり、&lt;/em&gt;これがOBJECT配列ループではない場合）にのみPythonGILを解放します。変数宣言領域で&lt;a href=&quot;array#c.NPY_BEGIN_THREADS_DEF&quot;&gt; &lt;code&gt;NPY_BEGIN_THREADS_DEF&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="1b7f1793a4a4b44dd1933f922f757d629d3be5a3" translate="yes" xml:space="preserve">
          <source>Used in universal function code to only release the Python GIL if loop-&amp;gt;obj is not true (&lt;em&gt;i.e.&lt;/em&gt; this is not an OBJECT array loop). Requires use of &lt;a href=&quot;c-api.array#c.NPY_BEGIN_THREADS_DEF&quot;&gt;&lt;code&gt;NPY_BEGIN_THREADS_DEF&lt;/code&gt;&lt;/a&gt; in variable declaration area.</source>
          <target state="translated">loop-&amp;gt; objがtrueでない（&lt;em&gt;つまり、&lt;/em&gt;これがOBJECT配列ループではない）場合にのみPython GILを解放するために、ユニバーサル関数コードで使用されます。変数宣言領域で&lt;a href=&quot;c-api.array#c.NPY_BEGIN_THREADS_DEF&quot;&gt; &lt;code&gt;NPY_BEGIN_THREADS_DEF&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="10031fc1a49c2cbba6bbb424956b8667cda6fefa" translate="yes" xml:space="preserve">
          <source>Used in universal function code to re-acquire the Python GIL if it was released (because loop-&amp;gt;obj was not true).</source>
          <target state="translated">Python GILがリリースされた場合、それを再取得するためにユニバーサル関数コードで使用されます（loop-&amp;gt; objがtrueでないため）。</target>
        </trans-unit>
        <trans-unit id="5e817653770e3b6919ac9612c69ec10ee688db47" translate="yes" xml:space="preserve">
          <source>Used synonymously in the NumPy docs with &lt;a href=&quot;#term-ndarray&quot;&gt;ndarray&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#term-ndarray&quot;&gt;ndarrayを&lt;/a&gt;使用してNumPyドキュメントで同義語として使用されます。</target>
        </trans-unit>
        <trans-unit id="c23b41a6c14497a2fa2fb894918e5ebdff35b118" translate="yes" xml:space="preserve">
          <source>Used to construct the convolution operator.</source>
          <target state="translated">畳み込み演算子を構築するために使用します。</target>
        </trans-unit>
        <trans-unit id="c5c64c33615821368bc9743122d8a6c96ff848fe" translate="yes" xml:space="preserve">
          <source>Used to fill the array with data.</source>
          <target state="translated">配列をデータで埋めるために使用します。</target>
        </trans-unit>
        <trans-unit id="9ead00318903d57eb423777b76455ee4a052f86f" translate="yes" xml:space="preserve">
          <source>Used to select only certain elements from a sequence:</source>
          <target state="translated">シーケンスから特定の要素のみを選択するために使用します。</target>
        </trans-unit>
        <trans-unit id="4b06029f962bdaa60d205631cac84f36f3e29d6f" translate="yes" xml:space="preserve">
          <source>Useful functions in &lt;code&gt;numpy.distutils.misc_util&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;numpy.distutils.misc_util&lt;/code&gt; の便利な関数</target>
        </trans-unit>
        <trans-unit id="7dc863346a17f843606dc78b7fd5eaa70c18759a" translate="yes" xml:space="preserve">
          <source>Useful math constants</source>
          <target state="translated">便利な数学定数</target>
        </trans-unit>
        <trans-unit id="d7e7cae700d3c37685c439282d2378cb79df959c" translate="yes" xml:space="preserve">
          <source>Useful to regain the GIL in situations where it was released using the BEGIN form of this macro.</source>
          <target state="translated">このマクロのBEGINフォームを使用して解放された状況でGILを取り戻すのに便利です。</target>
        </trans-unit>
        <trans-unit id="8cef70f655bb7cdb9d1c581e3560341cb090e5c3" translate="yes" xml:space="preserve">
          <source>Useful to release the GIL only if &lt;em&gt;dtype&lt;/em&gt; does not contain arbitrary Python objects which may need the Python interpreter during execution of the loop.</source>
          <target state="translated">ループの実行中にPythonインタープリターを必要とする可能性のある任意のPythonオブジェクトが&lt;em&gt;dtypeに&lt;/em&gt;含まれていない場合にのみ、GILを解放するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="d580b2c9b4825f08cb2691c40cd94404df444f3e" translate="yes" xml:space="preserve">
          <source>Useful to release the GIL only if &lt;em&gt;dtype&lt;/em&gt; does not contain arbitrary Python objects which may need the Python interpreter during execution of the loop. Equivalent to</source>
          <target state="translated">ループの実行中にPythonインタープリターが必要になる可能性のある任意のPythonオブジェクトが&lt;em&gt;dtypeに&lt;/em&gt;含まれていない場合にのみ、GILを解放するのに役立ちます。に相当</target>
        </trans-unit>
        <trans-unit id="2978535fda1f10395442e618746112da0bb87d3a" translate="yes" xml:space="preserve">
          <source>Useful to release the GIL only if &lt;em&gt;loop_size&lt;/em&gt; exceeds a minimum threshold, currently set to 500. Should be matched with a &lt;a href=&quot;#c.NPY_END_THREADS&quot;&gt;&lt;code&gt;NPY_END_THREADS&lt;/code&gt;&lt;/a&gt; to regain the GIL.</source>
          <target state="translated">&lt;em&gt;loop_size&lt;/em&gt;が現在500に設定されている最小しきい値を超えた場合にのみGILを解放するのに役立ちます&lt;a href=&quot;#c.NPY_END_THREADS&quot;&gt; &lt;code&gt;NPY_END_THREADS&lt;/code&gt; &lt;/a&gt;を回復するには、NPY_END_THREADSと一致させる必要があります。</target>
        </trans-unit>
        <trans-unit id="67dcf8adc685ecdcc2081b1b467df13f891ef2cf" translate="yes" xml:space="preserve">
          <source>User documentation</source>
          <target state="translated">ユーザードキュメント</target>
        </trans-unit>
        <trans-unit id="377ee38d9430016857a7ac84277e93d26f665af8" translate="yes" xml:space="preserve">
          <source>User-defined BLAS detection order</source>
          <target state="translated">ユーザー定義のBLAS検出順序</target>
        </trans-unit>
        <trans-unit id="01d8c2fd752b3823aa5ae01359574a0ac7005a6d" translate="yes" xml:space="preserve">
          <source>User-defined LAPACK detection order</source>
          <target state="translated">ユーザー定義のLAPACK検出順序</target>
        </trans-unit>
        <trans-unit id="feb130415c58c07804dd84fa00fab56690d584a4" translate="yes" xml:space="preserve">
          <source>User-defined data-types</source>
          <target state="translated">ユーザー定義データ型</target>
        </trans-unit>
        <trans-unit id="77352cf9f5e0b55e17c69c67b2dd7ed545a9424a" translate="yes" xml:space="preserve">
          <source>User-defined types now need to implement &lt;code&gt;__str__&lt;/code&gt; and &lt;code&gt;__repr__&lt;/code&gt;</source>
          <target state="translated">ユーザー定義型は、 &lt;code&gt;__repr__&lt;/code&gt; &lt;code&gt;__str__&lt;/code&gt; と__repr__を実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="2314f2b86670571851375cde1d05391e4ea574a3" translate="yes" xml:space="preserve">
          <source>Users can create arbitrarily complex &lt;a href=&quot;#term-dtype&quot;&gt;dtypes&lt;/a&gt; that can include other arrays and dtypes. These composite dtypes are called &lt;a href=&quot;user/basics.rec&quot;&gt;structured data types.&lt;/a&gt;</source>
          <target state="translated">ユーザーは、他の配列やdtypeを含めることができる任意の複雑な&lt;a href=&quot;#term-dtype&quot;&gt;dtype&lt;/a&gt;を作成できます。これらの複合dtypeは、&lt;a href=&quot;user/basics.rec&quot;&gt;構造化データ型&lt;/a&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="fd331bef50cb48757824818608d12be462d6034d" translate="yes" xml:space="preserve">
          <source>Users looking to manipulate tabular data, such as stored in csv files, may find other pydata projects more suitable, such as xarray, pandas, or DataArray. These provide a high-level interface for tabular data analysis and are better optimized for that use. For instance, the C-struct-like memory layout of structured arrays in numpy can lead to poor cache behavior in comparison.</source>
          <target state="translated">csvファイルに保存されているような表形式のデータを操作したいと考えているユーザーは、xarray、pandas、DataArrayなどの他のpydataプロジェクトの方が適しているかもしれません。これらのプロジェクトは表形式データ分析のための高レベルのインターフェイスを提供し、その用途に最適化されています。例えば、numpyの構造化配列のC-structのようなメモリレイアウトは、比較するとキャッシュの挙動が悪くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="2637443926c71ce03a091c2e95bf9b5610348992" translate="yes" xml:space="preserve">
          <source>Using &amp;lsquo;r&amp;rsquo; or &amp;lsquo;c&amp;rsquo; as a first string argument creates a matrix.</source>
          <target state="translated">最初の文字列引数として「r」または「c」を使用すると、行列が作成されます。</target>
        </trans-unit>
        <trans-unit id="65fcf8542af4dfa98c8e336c7ebb663b2e96f530" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#numpy.ix_&quot;&gt;&lt;code&gt;ix_&lt;/code&gt;&lt;/a&gt; one can quickly construct index arrays that will index the cross product. &lt;code&gt;a[np.ix_([1,3],[2,5])]&lt;/code&gt; returns the array &lt;code&gt;[[a[1,2] a[1,5]], [a[3,2] a[3,5]]]&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#numpy.ix_&quot;&gt; &lt;code&gt;ix_&lt;/code&gt; &lt;/a&gt;を使用すると、クロス積にインデックスを付けるインデックス配列をすばやく構築できます。 &lt;code&gt;a[np.ix_([1,3],[2,5])]&lt;/code&gt; は配列 &lt;code&gt;[[a[1,2] a[1,5]], [a[3,2] a[3,5]]]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="32ece8fbb6c1ed850bf1c3c8fb0f4d5a7300c2c0" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#numpy.savez&quot;&gt;&lt;code&gt;savez&lt;/code&gt;&lt;/a&gt; with **kwds, the arrays are saved with the keyword names.</source>
          <target state="translated">** kwdsで&lt;a href=&quot;#numpy.savez&quot;&gt; &lt;code&gt;savez&lt;/code&gt; &lt;/a&gt;を使用すると、配列はキーワード名で保存されます。</target>
        </trans-unit>
        <trans-unit id="8c36d4099fe15bc91bbfe91acb74cd64e75d6b3f" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;#numpy.savez&quot;&gt;&lt;code&gt;savez&lt;/code&gt;&lt;/a&gt; with *args, the arrays are saved with default names.</source>
          <target state="translated">* argsで&lt;a href=&quot;#numpy.savez&quot;&gt; &lt;code&gt;savez&lt;/code&gt; &lt;/a&gt;を使用すると、配列はデフォルト名で保存されます。</target>
        </trans-unit>
        <trans-unit id="a65056bb65a5824d8a28541dbacefafbcbe064d0" translate="yes" xml:space="preserve">
          <source>Using &lt;a href=&quot;../reference/generated/numpy.hsplit#numpy.hsplit&quot;&gt;&lt;code&gt;hsplit&lt;/code&gt;&lt;/a&gt;, you can split an array along its horizontal axis, either by specifying the number of equally shaped arrays to return, or by specifying the columns after which the division should occur:</source>
          <target state="translated">&lt;a href=&quot;../reference/generated/numpy.hsplit#numpy.hsplit&quot;&gt; &lt;code&gt;hsplit&lt;/code&gt; &lt;/a&gt;を使用すると、返す同じ形状の配列の数を指定するか、分割が発生する列を指定することにより、水平軸に沿って配列を分割できます。</target>
        </trans-unit>
        <trans-unit id="abcbf246bed1356ef5a4f7a84e0efa6276b04144" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;arr.reshape()&lt;/code&gt; will give a new shape to an array without changing the data. Just remember that when you use the reshape method, the array you want to produce needs to have the same number of elements as the original array. If you start with an array with 12 elements, you&amp;rsquo;ll need to make sure that your new array also has a total of 12 elements.</source>
          <target state="translated">&lt;code&gt;arr.reshape()&lt;/code&gt; を使用すると、データを変更せずに配列に新しい形状が与えられます。reshapeメソッドを使用する場合、生成する配列は元の配列と同じ数の要素を持っている必要があることを覚えておいてください。12個の要素を持つ配列から始める場合は、新しい配列にも合計12個の要素があることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="c05ea485672c370249efc13cf02206fa0079194e" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;intent(inout)&lt;/code&gt; is generally not recommended, use &lt;code&gt;intent(in,out)&lt;/code&gt; instead. See also &lt;code&gt;intent(inplace)&lt;/code&gt; attribute.</source>
          <target state="translated">使用 &lt;code&gt;intent(inout)&lt;/code&gt; 一般的に推奨されていない、使用 &lt;code&gt;intent(in,out)&lt;/code&gt; 代わりに。 &lt;code&gt;intent(inplace)&lt;/code&gt; 属性も参照してください。</target>
        </trans-unit>
        <trans-unit id="d44e140015f4a842157d0c38e650d4d90f0d7d32" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;intent(inplace)&lt;/code&gt; is generally not recommended either. For example, when slices have been taken from an &lt;code&gt;intent(inplace)&lt;/code&gt; argument then after in-place changes, slices data pointers may point to unallocated memory area.</source>
          <target state="translated">通常、 &lt;code&gt;intent(inplace)&lt;/code&gt; の使用もお勧めしません。たとえば、スライスが &lt;code&gt;intent(inplace)&lt;/code&gt; 引数から取得され、インプレースが変更された後、スライスデータポインタが未割り当てのメモリ領域を指している場合があります。</target>
        </trans-unit>
        <trans-unit id="9b0a1a12d91b1a55351df033aec60b12c39daa72" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;np.newaxis&lt;/code&gt; will increase the dimensions of your array by one dimension when used once. This means that a &lt;strong&gt;1D&lt;/strong&gt; array will become a &lt;strong&gt;2D&lt;/strong&gt; array, a &lt;strong&gt;2D&lt;/strong&gt; array will become a &lt;strong&gt;3D&lt;/strong&gt; array, and so on.</source>
          <target state="translated">&lt;code&gt;np.newaxis&lt;/code&gt; を使用すると、一度使用すると配列の次元が1次元増加します。ことをこれは、&lt;strong&gt;1次元&lt;/strong&gt;アレイになるであろう&lt;strong&gt;2次元&lt;/strong&gt;アレイ、&lt;strong&gt;二次元&lt;/strong&gt;アレイになるであろう&lt;strong&gt;3次元&lt;/strong&gt;アレイなど。</target>
        </trans-unit>
        <trans-unit id="191982a04357e09366b8b88accf4a58472233372" translate="yes" xml:space="preserve">
          <source>Using &lt;code&gt;runtests.py&lt;/code&gt; is the recommended approach to running tests. There are also a number of alternatives to it, for example in-place build or installing to a virtualenv. See the FAQ below for details.</source>
          <target state="translated">&lt;code&gt;runtests.py&lt;/code&gt; を使用することは、テストを実行するための推奨されるアプローチです。インプレースビルドやvirtualenvへのインストールなど、それに代わる方法もいくつかあります。詳細については、以下のFAQを参照してください。</target>
        </trans-unit>
        <trans-unit id="f797cc0ae3c70b42806d8484c2173341138aa334" translate="yes" xml:space="preserve">
          <source>Using Eclipse/PyDev with Anaconda/conda Python (or environments)</source>
          <target state="translated">Anaconda/conda Python(または環境)でEclipse/PyDevを使う</target>
        </trans-unit>
        <trans-unit id="0f4523c954e2a9e31bfb34aa3f197069ed09884a" translate="yes" xml:space="preserve">
          <source>Using F2PY</source>
          <target state="translated">F2PYの使用</target>
        </trans-unit>
        <trans-unit id="b5ca717d067542a1c5fc904dd82ea349b1543085" translate="yes" xml:space="preserve">
          <source>Using F2PY bindings in Python</source>
          <target state="translated">PythonでF2PYバインディングを使う</target>
        </trans-unit>
        <trans-unit id="805e17bb02b4c971b82b3da2b45fde14cdb9678e" translate="yes" xml:space="preserve">
          <source>Using NumPy C-API</source>
          <target state="translated">NumPy C-APIの使用</target>
        </trans-unit>
        <trans-unit id="9c7bc452a9834b5876e355900cc35464401d0f74" translate="yes" xml:space="preserve">
          <source>Using PyCharm with Anaconda/conda Python</source>
          <target state="translated">Anaconda/conda PythonでPyCharmを使う</target>
        </trans-unit>
        <trans-unit id="b9863374b5764d5e46c1682602eaea50268a1efa" translate="yes" xml:space="preserve">
          <source>Using Python as glue</source>
          <target state="translated">パイソンを接着剤として使う</target>
        </trans-unit>
        <trans-unit id="6f2e5d63438a571f3123ef33ae03e1d5f2864e48" translate="yes" xml:space="preserve">
          <source>Using Python from &lt;code&gt;conda&lt;/code&gt; (Anaconda)</source>
          <target state="translated">&lt;code&gt;conda&lt;/code&gt; （Anaconda）のPythonを使用する</target>
        </trans-unit>
        <trans-unit id="e43089c0ec4ca3358f03ef23a9043bc3004dbaed" translate="yes" xml:space="preserve">
          <source>Using VSCode with Anaconda/conda Python (or environments)</source>
          <target state="translated">Anaconda/conda Python(または環境)でVSCodeを使う</target>
        </trans-unit>
        <trans-unit id="e7d91cc202089a17bf1dca7f6ffac1974935ce7f" translate="yes" xml:space="preserve">
          <source>Using a flexible &lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">柔軟な&lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="d4ecb91f09183edc4f23a5cc314556ac8c1af3c8" translate="yes" xml:space="preserve">
          <source>Using a flexible &lt;code&gt;dtype&lt;/code&gt;.</source>
          <target state="translated">柔軟な &lt;code&gt;dtype&lt;/code&gt; を使用する。</target>
        </trans-unit>
        <trans-unit id="cfac66afdbdc20a411f9f9f200f87cdcbe870cdd" translate="yes" xml:space="preserve">
          <source>Using a view to convert an array to a recarray:</source>
          <target state="translated">ビューを使用して配列を再配列に変換します。</target>
        </trans-unit>
        <trans-unit id="a4fb72e0c5f0602466b0b452237f4e23496663cc" translate="yes" xml:space="preserve">
          <source>Using an External Loop</source>
          <target state="translated">外部ループの使用</target>
        </trans-unit>
        <trans-unit id="f210f428b873c49c7b2b57aa15cfa3164fde53af" translate="yes" xml:space="preserve">
          <source>Using an instance of &lt;a href=&quot;#numpy.errstate&quot;&gt;&lt;code&gt;errstate&lt;/code&gt;&lt;/a&gt; as a context manager allows statements in that context to execute with a known error handling behavior. Upon entering the context the error handling is set with &lt;a href=&quot;numpy.seterr#numpy.seterr&quot;&gt;&lt;code&gt;seterr&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;numpy.seterrcall#numpy.seterrcall&quot;&gt;&lt;code&gt;seterrcall&lt;/code&gt;&lt;/a&gt;, and upon exiting it is reset to what it was before.</source>
          <target state="translated">&lt;a href=&quot;#numpy.errstate&quot;&gt; &lt;code&gt;errstate&lt;/code&gt; &lt;/a&gt;のインスタンスをコンテキストマネージャーとして使用すると、そのコンテキスト内のステートメントを既知のエラー処理動作で実行できます。コンテキストに入ると、エラー処理は&lt;a href=&quot;numpy.seterr#numpy.seterr&quot;&gt; &lt;code&gt;seterr&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;numpy.seterrcall#numpy.seterrcall&quot;&gt; &lt;code&gt;seterrcall&lt;/code&gt; &lt;/a&gt;で設定され、終了すると、以前の状態にリセットされます。</target>
        </trans-unit>
        <trans-unit id="d1fe8e1d4770589cbebb7564eb13c83317ecba70" translate="yes" xml:space="preserve">
          <source>Using an ndpointer class in the argtypes method can make it significantly safer to call a C function using ctypes and the data- area of an ndarray. You may still want to wrap the function in an additional Python wrapper to make it user-friendly (hiding some obvious arguments and making some arguments output arguments). In this process, the &lt;code&gt;requires&lt;/code&gt; function in NumPy may be useful to return the right kind of array from a given input.</source>
          <target state="translated">argtypesメソッドでndpointerクラスを使用すると、ctypesとndarrayのデータ領域を使用してC関数を呼び出すのが非常に安全になります。関数を追加のPythonラッパーでラップして、ユーザーフレンドリーにすることもできます（いくつかの明白な引数を非表示にし、いくつかの引数を出力引数にします）。このプロセスでは、NumPyの &lt;code&gt;requires&lt;/code&gt; 関数が、特定の入力から適切な種類の配列を返すのに役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="7af0c7a348040b3b4ff1744a0608d17163c9138e" translate="yes" xml:space="preserve">
          <source>Using array-protocol type strings:</source>
          <target state="translated">配列プロトコル型の文字列を使用しています。</target>
        </trans-unit>
        <trans-unit id="fd7054fa064ad2611d4b7d00df8240d7735e3c37" translate="yes" xml:space="preserve">
          <source>Using array-scalar type:</source>
          <target state="translated">配列スカラ型を使用しています。</target>
        </trans-unit>
        <trans-unit id="03a2b430abf28e746816ea1cff1b193db00a94c9" translate="yes" xml:space="preserve">
          <source>Using comma-separated field formats. The shape is (2,3):</source>
          <target state="translated">カンマで区切られたフィールド形式を使用して 形は(2,3)です。</target>
        </trans-unit>
        <trans-unit id="e282c417933d97d3a53a56d481d1f405a74c7c0d" translate="yes" xml:space="preserve">
          <source>Using complex sequences:</source>
          <target state="translated">複雑なシーケンスを使用しています。</target>
        </trans-unit>
        <trans-unit id="eb191c9fcdc8ee9e52364b3acea1bba66afa1818" translate="yes" xml:space="preserve">
          <source>Using ctypes is a powerful way to connect Python with arbitrary C-code. Its advantages for extending Python include</source>
          <target state="translated">ctypesを使用することで、Pythonと任意のCコードを接続するための強力な方法です。Pythonを拡張するための利点は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="26e522c98bd807e94f2ab9fc3a1975ce203f287e" translate="yes" xml:space="preserve">
          <source>Using dictionaries. Two fields named &amp;lsquo;gender&amp;rsquo; and &amp;lsquo;age&amp;rsquo;:</source>
          <target state="translated">辞書を使用する。「gender」と「age」という2つのフィールド：</target>
        </trans-unit>
        <trans-unit id="af330b02f13d207e5fac3c22b8c9bdbaab36afee" translate="yes" xml:space="preserve">
          <source>Using dtype = None</source>
          <target state="translated">dtype=Noneを使用する</target>
        </trans-unit>
        <trans-unit id="78961faefc955a768bc7940893e23db94f94772b" translate="yes" xml:space="preserve">
          <source>Using masked arrays to see COVID-19 data</source>
          <target state="translated">COVID-19のデータを見るためのマスクド・アレイの使用</target>
        </trans-unit>
        <trans-unit id="00ac7fffb347ca02e4efcd6c4f0a66db988cde12" translate="yes" xml:space="preserve">
          <source>Using missing and filling values</source>
          <target state="translated">欠損値と充填値の使用</target>
        </trans-unit>
        <trans-unit id="8d2131672fafcfdf449f29b29350743e40c17d69" translate="yes" xml:space="preserve">
          <source>Using months for the unit:</source>
          <target state="translated">単位に月を使う</target>
        </trans-unit>
        <trans-unit id="68007c19f643deebacff69bbb71fb357fa3f341a" translate="yes" xml:space="preserve">
          <source>Using non-symbol-suffixed 64-bit BLAS/LAPACK in a program that also uses 32-bit BLAS/LAPACK can cause crashes under certain conditions (e.g. with embedded Python interpreters on Linux).</source>
          <target state="translated">32 ビット BLAS/LAPACK も使用しているプログラムで、符号付きではない 64 ビット BLAS/LAPACK を使用すると、特定の条件下でクラッシュが発生することがあります (Linux 上の組み込み Python インタプリタなど)。</target>
        </trans-unit>
        <trans-unit id="2f696379652fe6905a66fc5fd2b9273fa2471296" translate="yes" xml:space="preserve">
          <source>Using numpy.i</source>
          <target state="translated">numpy.iを使う</target>
        </trans-unit>
        <trans-unit id="e8111da9fdc8286f7fa1decedd3c62fdfaa40d28" translate="yes" xml:space="preserve">
          <source>Using numpy.ma</source>
          <target state="translated">numpy.maを使う</target>
        </trans-unit>
        <trans-unit id="fca1ba2673c50c8d4a43a28f5b4401d362ff3c79" translate="yes" xml:space="preserve">
          <source>Using numpy.random.binomial may change the RNG state vs. numpy &amp;lt; 1.9</source>
          <target state="translated">numpy.random.binomialを使用すると、RNG状態が変化する可能性があります。numpy&amp;lt;1.9</target>
        </trans-unit>
        <trans-unit id="03252764a2ca129ee8f53a1ebcd3c94ffd3382b7" translate="yes" xml:space="preserve">
          <source>Using poly1d objects:</source>
          <target state="translated">poly1dオブジェクトを使用しています。</target>
        </trans-unit>
        <trans-unit id="79eb3bbcb08c7d6704be86d77b0727b917270b3d" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;axis&lt;/code&gt; argument to compute matrix norms:</source>
          <target state="translated">使用する &lt;code&gt;axis&lt;/code&gt; 計算行列ノルムに引数を：</target>
        </trans-unit>
        <trans-unit id="9e684f49459c0d5aba4c5f2579aeb17add74610d" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;axis&lt;/code&gt; argument to compute vector norms:</source>
          <target state="translated">使用する &lt;code&gt;axis&lt;/code&gt; 計算ベクトルの規範に引数を：</target>
        </trans-unit>
        <trans-unit id="0049dd8bb80b8109d30cf294edeebc9226866484" translate="yes" xml:space="preserve">
          <source>Using the &lt;code&gt;copy&lt;/code&gt; method will make a complete copy of the array and its data (a &lt;em&gt;deep copy&lt;/em&gt;). To use this on your array, you could run:</source>
          <target state="translated">&lt;code&gt;copy&lt;/code&gt; メソッドを使用すると、配列とそのデータの完全なコピーが作成されます（&lt;em&gt;ディープコピー&lt;/em&gt;）。アレイでこれを使用するには、次のコマンドを実行できます。</target>
        </trans-unit>
        <trans-unit id="b9ba36c2f053a06ac3abc3a930f4a1d05aada052" translate="yes" xml:space="preserve">
          <source>Using the Convenience Classes</source>
          <target state="translated">便利教室の使い方</target>
        </trans-unit>
        <trans-unit id="1bd2966f639ab87086919a9a710a3ff850eadf79" translate="yes" xml:space="preserve">
          <source>Using the Einstein summation convention, many common multi-dimensional, linear algebraic array operations can be represented in a simple fashion. In &lt;em&gt;implicit&lt;/em&gt; mode &lt;a href=&quot;#numpy.einsum&quot;&gt;&lt;code&gt;einsum&lt;/code&gt;&lt;/a&gt; computes these values.</source>
          <target state="translated">Einstein総和規約を使用すると、多くの一般的な多次元線形代数配列演算を簡単な方法で表すことができます。では&lt;em&gt;、暗黙の&lt;/em&gt;モード&lt;a href=&quot;#numpy.einsum&quot;&gt; &lt;code&gt;einsum&lt;/code&gt; は&lt;/a&gt;、これらの値を計算します。</target>
        </trans-unit>
        <trans-unit id="44ec7387e738c4a2877c9993514a14374905ca3a" translate="yes" xml:space="preserve">
          <source>Using the aliases of builtin types like &lt;code&gt;np.int&lt;/code&gt; is deprecated</source>
          <target state="translated">&lt;code&gt;np.int&lt;/code&gt; のような組み込み型のエイリアスの使用は非推奨です</target>
        </trans-unit>
        <trans-unit id="75da2a462c666654f41a122b8cf7201ccca6f453" translate="yes" xml:space="preserve">
          <source>Using the casting rules</source>
          <target state="translated">キャスティングルールを使って</target>
        </trans-unit>
        <trans-unit id="eed50259686b11043b2277964d70797ed9e23c6d" translate="yes" xml:space="preserve">
          <source>Using the new casting implementation</source>
          <target state="translated">新しいキャスティング実装の使用</target>
        </trans-unit>
        <trans-unit id="a7a6cb5aa0103dc18935f9ad693972e0008b2a2f" translate="yes" xml:space="preserve">
          <source>Using the object looks like this:</source>
          <target state="translated">オブジェクトを使うとこんな感じになります。</target>
        </trans-unit>
        <trans-unit id="0e2a18ad6df592872579dd4bbee44818b7034db3" translate="yes" xml:space="preserve">
          <source>Using these #defines you can use the C-API in multiple files for a single extension module. In each file you must define &lt;a href=&quot;#c.PY_ARRAY_UNIQUE_SYMBOL&quot;&gt;&lt;code&gt;PY_ARRAY_UNIQUE_SYMBOL&lt;/code&gt;&lt;/a&gt; to some name that will hold the C-API (&lt;em&gt;e.g.&lt;/em&gt; myextension_ARRAY_API). This must be done &lt;strong&gt;before&lt;/strong&gt; including the numpy/arrayobject.h file. In the module initialization routine you call &lt;a href=&quot;#c.import_array&quot;&gt;&lt;code&gt;import_array&lt;/code&gt;&lt;/a&gt;. In addition, in the files that do not have the module initialization sub_routine define &lt;a href=&quot;#c.NO_IMPORT_ARRAY&quot;&gt;&lt;code&gt;NO_IMPORT_ARRAY&lt;/code&gt;&lt;/a&gt; prior to including numpy/arrayobject.h.</source>
          <target state="translated">これらの#definesを使用すると、単一の拡張モジュールの複数のファイルでC-APIを使用できます。各ファイルでは定義する必要があり&lt;a href=&quot;#c.PY_ARRAY_UNIQUE_SYMBOL&quot;&gt; &lt;code&gt;PY_ARRAY_UNIQUE_SYMBOL&lt;/code&gt; を&lt;/a&gt; C-APIを保持するいくつかの名前（に&lt;em&gt;例えば&lt;/em&gt; myextension_ARRAY_API）。これは、numpy / arrayobject.hファイルをインクルードする&lt;strong&gt;前&lt;/strong&gt;に行う必要があります。モジュール初期化ルーチンでは、&lt;a href=&quot;#c.import_array&quot;&gt; &lt;code&gt;import_array&lt;/code&gt; &lt;/a&gt;を呼び出します。また、モジュールの初期化sub_routineを持っていないファイルで定義&lt;a href=&quot;#c.NO_IMPORT_ARRAY&quot;&gt; &lt;code&gt;NO_IMPORT_ARRAY&lt;/code&gt; &lt;/a&gt; numpyの/ arrayobject.h含めて前に。</target>
        </trans-unit>
        <trans-unit id="315900bdae1d95768693f5caf49a459c0e9247e8" translate="yes" xml:space="preserve">
          <source>Using this result to index &lt;code&gt;a&lt;/code&gt; is equivalent to using the mask directly:</source>
          <target state="translated">この結果を使用して &lt;code&gt;a&lt;/code&gt; にインデックスを付けることは、マスクを直接使用することと同じです。</target>
        </trans-unit>
        <trans-unit id="2b3c55a8f302db1fd2b8e30d4741e13199d60cd0" translate="yes" xml:space="preserve">
          <source>Using this scheme, an upper bound on the probability of a collision can be estimated if one knows the number of streams that you derive. &lt;a href=&quot;bit_generators/generated/numpy.random.seedsequence#numpy.random.SeedSequence&quot;&gt;&lt;code&gt;SeedSequence&lt;/code&gt;&lt;/a&gt; hashes its inputs, both the seed and the spawn-tree-path, down to a 128-bit pool by default. The probability that there is a collision in that pool, pessimistically-estimated (&lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;), will be about</source>
          <target state="translated">このスキームを使用すると、導出するストリームの数がわかっている場合、衝突の確率の上限を見積もることができます。&lt;a href=&quot;bit_generators/generated/numpy.random.seedsequence#numpy.random.SeedSequence&quot;&gt; &lt;code&gt;SeedSequence&lt;/code&gt; &lt;/a&gt;は、シードとspawn-tree-pathの両方の入力を、デフォルトで128ビットプールにハッシュします。そのプールで衝突が発生する確率は、悲観的に推定され（&lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;）、約</target>
        </trans-unit>
        <trans-unit id="f1e207983fdf75c13618b12af3dac2cc9b09a86a" translate="yes" xml:space="preserve">
          <source>Using this scheme, an upper bound on the probability of a collision can be estimated if one knows the number of streams that you derive. &lt;a href=&quot;bit_generators/generated/numpy.random.seedsequence#numpy.random.SeedSequence&quot;&gt;&lt;code&gt;SeedSequence&lt;/code&gt;&lt;/a&gt; hashes its inputs, both the seed and the spawn-tree-path, down to a 128-bit pool by default. The probability that there is a collision in that pool, pessimistically-estimated (&lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;), will be about</source>
          <target state="translated">このスキームを使用すると、導出するストリームの数がわかっている場合、衝突の確率の上限を推定できます。&lt;a href=&quot;bit_generators/generated/numpy.random.seedsequence#numpy.random.SeedSequence&quot;&gt; &lt;code&gt;SeedSequence&lt;/code&gt; &lt;/a&gt;は、シードとspawn-tree-pathの両方の入力を、デフォルトで128ビットプールにハッシュします。そのプールに衝突がある確率は、悲観的に見積もられ（&lt;a href=&quot;#id3&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;）、およそ</target>
        </trans-unit>
        <trans-unit id="81f2b8dfbfc71c96c12b186f5770d7cbd6cb20f2" translate="yes" xml:space="preserve">
          <source>Using tuples. &lt;code&gt;int&lt;/code&gt; is a fixed type, 3 the field&amp;rsquo;s shape. &lt;code&gt;void&lt;/code&gt; is a flexible type, here of size 10:</source>
          <target state="translated">タプルの使用。 &lt;code&gt;int&lt;/code&gt; は固定型で、フィールドの形状です。 &lt;code&gt;void&lt;/code&gt; は、ここではサイズ10の柔軟な型です。</target>
        </trans-unit>
        <trans-unit id="824f10f86cbfa339b11bf5f57f7a0ce042086b4a" translate="yes" xml:space="preserve">
          <source>Using via &lt;code&gt;numpy.distutils&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;numpy.distutils&lt;/code&gt; 経由で使用</target>
        </trans-unit>
        <trans-unit id="6043061ff0da53be43d1b2e098be1b0520525dba" translate="yes" xml:space="preserve">
          <source>Using via numpy.distutils</source>
          <target state="translated">via numpy.distutils の使用</target>
        </trans-unit>
        <trans-unit id="73888fb9a3aa49066395d1b7748b2f3a75b9907a" translate="yes" xml:space="preserve">
          <source>Using virtualenvs</source>
          <target state="translated">virtualenvs.</target>
        </trans-unit>
        <trans-unit id="ef8b4345a7cc12338d15d1fb67d9e4a4feb23426" translate="yes" xml:space="preserve">
          <source>Usually denoted</source>
          <target state="translated">通常は</target>
        </trans-unit>
        <trans-unit id="9efea8253bd046afd804470a677e434b3a6392ca" translate="yes" xml:space="preserve">
          <source>Usually there is no need to worry about how the arrays are stored in memory and whether the wrapped functions, being either Fortran or C functions, assume one or another storage order. F2PY automatically ensures that wrapped functions get arguments with proper storage order; the corresponding algorithm is designed to make copies of arrays only when absolutely necessary. However, when dealing with very large multidimensional input arrays with sizes close to the size of the physical memory in your computer, then a care must be taken to use always proper-contiguous and proper type arguments.</source>
          <target state="translated">通常、配列がどのようにメモリに格納されているか、またラップされた関数がFortranまたはC関数であるかどうかについて心配する必要はありません。F2PY は、ラップされた関数が適切なストレージ順序で引数を取得することを自動的に保証します;対応するアルゴリズムは、絶対に必要な場合にのみ配列のコピーを作成するように設計されています。しかし、コンピュータの物理メモリのサイズに近いサイズの非常に大きな多次元入力配列を扱う場合、常に適切な連続した適切な型の引数を使うように注意しなければなりません。</target>
        </trans-unit>
        <trans-unit id="409d8adcbc7ff9f8ede9fa136b31fc43f33b4ab8" translate="yes" xml:space="preserve">
          <source>Usually, defining a dtype is sufficient to define how the sequence of strings must be converted. However, some additional control may sometimes be required. For example, we may want to make sure that a date in a format &lt;code&gt;YYYY/MM/DD&lt;/code&gt; is converted to a &lt;a href=&quot;https://docs.python.org/dev/library/datetime.html#datetime.datetime&quot;&gt;&lt;code&gt;datetime&lt;/code&gt;&lt;/a&gt; object, or that a string like &lt;code&gt;xx%&lt;/code&gt; is properly converted to a float between 0 and 1. In such cases, we should define conversion functions with the &lt;code&gt;converters&lt;/code&gt; arguments.</source>
          <target state="translated">通常、文字列のシーケンスを変換する方法を定義するには、dtypeを定義するだけで十分です。ただし、追加の制御が必要になる場合があります。たとえば、 &lt;code&gt;YYYY/MM/DD&lt;/code&gt; 形式の日付が&lt;a href=&quot;https://docs.python.org/dev/library/datetime.html#datetime.datetime&quot;&gt; &lt;code&gt;datetime&lt;/code&gt; &lt;/a&gt;オブジェクトに変換されていること、または &lt;code&gt;xx%&lt;/code&gt; のような文字列が0から1の間のfloatに適切に変換されていることを確認したい場合があります。 &lt;code&gt;converters&lt;/code&gt; 引数を使用して変換関数を定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="04880c31a806536e09375a28b6393c4ae89b3000" translate="yes" xml:space="preserve">
          <source>Usually, defining a dtype is sufficient to define how the sequence of strings must be converted. However, some additional control may sometimes be required. For example, we may want to make sure that a date in a format &lt;code&gt;YYYY/MM/DD&lt;/code&gt; is converted to a &lt;code&gt;datetime&lt;/code&gt; object, or that a string like &lt;code&gt;xx%&lt;/code&gt; is properly converted to a float between 0 and 1. In such cases, we should define conversion functions with the &lt;code&gt;converters&lt;/code&gt; arguments.</source>
          <target state="translated">通常、文字列のシーケンスを変換する方法を定義するには、dtypeを定義するだけで十分です。ただし、追加の制御が必要になる場合があります。たとえば、 &lt;code&gt;YYYY/MM/DD&lt;/code&gt; 形式の日付が &lt;code&gt;datetime&lt;/code&gt; オブジェクトに変換されていること、または &lt;code&gt;xx%&lt;/code&gt; のような文字列が0から1の間のfloatに適切に変換されていることを確認したい場合があります。 &lt;code&gt;converters&lt;/code&gt; 引数を使用して変換関数を定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="a5abc30aa6f2b926c1472fe22071db5adb16a0bc" translate="yes" xml:space="preserve">
          <source>Usually, however, adding the &lt;code&gt;tests/&lt;/code&gt; directory to the python path isn&amp;rsquo;t desirable. Instead it would better to invoke the test straight from the module &lt;code&gt;xxx&lt;/code&gt;. To this end, simply place the following lines at the end of your package&amp;rsquo;s &lt;code&gt;__init__.py&lt;/code&gt; file:</source>
          <target state="translated">ただし、通常、 &lt;code&gt;tests/&lt;/code&gt; ディレクトリをpythonパスに追加することは望ましくありません。代わりに、モジュール &lt;code&gt;xxx&lt;/code&gt; から直接テストを呼び出すほうがよいでしょう。そのためには、パッケージの &lt;code&gt;__init__.py&lt;/code&gt; ファイルの最後に次の行を配置するだけです。</target>
        </trans-unit>
        <trans-unit id="89189507b2a074e98b2e877227343a6e1f27b3ab" translate="yes" xml:space="preserve">
          <source>Utility</source>
          <target state="translated">Utility</target>
        </trans-unit>
        <trans-unit id="6be23322b56766a1db9b8621387497e594f16d2d" translate="yes" xml:space="preserve">
          <source>Utility classes and functions for the polynomial modules.</source>
          <target state="translated">多項式モジュールのためのユーティリティクラスと関数</target>
        </trans-unit>
        <trans-unit id="c9ee5681d3c59f7541c27a38b67edf46259e187b" translate="yes" xml:space="preserve">
          <source>V</source>
          <target state="translated">V</target>
        </trans-unit>
        <trans-unit id="d00ce61cfc8e3df435adebc36c2fa866be4f94a4" translate="yes" xml:space="preserve">
          <source>Valid dtype for all arrays</source>
          <target state="translated">すべての配列に対して有効なdtype</target>
        </trans-unit>
        <trans-unit id="1221b238d98a98303bde26ccb737f70710cfeaec" translate="yes" xml:space="preserve">
          <source>Valid dtype for array.</source>
          <target state="translated">配列の有効なdtypeです。</target>
        </trans-unit>
        <trans-unit id="7c5b11cbfd943ab04293f9f062d297257b4ba0e8" translate="yes" xml:space="preserve">
          <source>Validating names</source>
          <target state="translated">名前の検証</target>
        </trans-unit>
        <trans-unit id="3522db33c6e586ed6f52f3af3bea08c2509cdaed" translate="yes" xml:space="preserve">
          <source>Value indicating that a masked array has no invalid entry. &lt;a href=&quot;#numpy.ma.nomask&quot;&gt;&lt;code&gt;nomask&lt;/code&gt;&lt;/a&gt; is used internally to speed up computations when the mask is not needed.</source>
          <target state="translated">マスクされた配列に無効なエントリがないことを示す値。&lt;a href=&quot;#numpy.ma.nomask&quot;&gt; &lt;code&gt;nomask&lt;/code&gt; &lt;/a&gt;は、マスクが不要な場合に計算を高速化するために内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="a1c7830f6acd0062d2809fbc11f2bfb2e8aedd16" translate="yes" xml:space="preserve">
          <source>Value indicating that a masked array has no invalid entry. &lt;a href=&quot;#numpy.ma.nomask&quot;&gt;&lt;code&gt;nomask&lt;/code&gt;&lt;/a&gt; is used internally to speed up computations when the mask is not needed. It is represented internally as &lt;code&gt;np.False_&lt;/code&gt;.</source>
          <target state="translated">マスクされた配列に無効なエントリがないことを示す値。&lt;a href=&quot;#numpy.ma.nomask&quot;&gt; &lt;code&gt;nomask&lt;/code&gt; &lt;/a&gt;は、マスクが不要な場合に計算を高速化するために内部的に使用されます。内部的には &lt;code&gt;np.False_&lt;/code&gt; として表されます。</target>
        </trans-unit>
        <trans-unit id="0b9ec234c1eee91fedfeaba35509216217fe21cd" translate="yes" xml:space="preserve">
          <source>Value of &lt;code&gt;operands&lt;/code&gt; at current iteration. Normally, this is a tuple of array scalars, but if the flag &lt;code&gt;external_loop&lt;/code&gt; is used, it is a tuple of one dimensional arrays.</source>
          <target state="translated">現在の反復での &lt;code&gt;operands&lt;/code&gt; 値。通常、これは配列スカラーのタプルですが、 &lt;code&gt;external_loop&lt;/code&gt; フラグが使用されている場合は、1次元配列のタプルです。</target>
        </trans-unit>
        <trans-unit id="d866e0938fcfdf12b88042317593d4295facb33c" translate="yes" xml:space="preserve">
          <source>Value to be placed in field.</source>
          <target state="translated">フィールドに配置する値。</target>
        </trans-unit>
        <trans-unit id="4ba37300f6a7d1d653bfd085d1c3e62828c53205" translate="yes" xml:space="preserve">
          <source>Value to be used to fill NaN values. If no value is passed then NaN values will be replaced with 0.0.</source>
          <target state="translated">NaN値を埋めるために使用する値。値が渡されなかった場合、NaNの値は0.0に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="73822c64a61d90da64aca29978cabf65524aa150" translate="yes" xml:space="preserve">
          <source>Value to be used to fill negative infinity values. If no value is passed then negative infinity values will be replaced with a very small (or negative) number.</source>
          <target state="translated">負の無限大値を埋めるために使用される値。値を渡さなかった場合、負の無限大値は非常に小さな(または負の)数値に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="f4796b06e4cb3d07bcdfe89591ec37b878b0609f" translate="yes" xml:space="preserve">
          <source>Value to be used to fill positive infinity values. If no value is passed then positive infinity values will be replaced with a very large number.</source>
          <target state="translated">正の無限大値を埋めるために使用される値。値を渡さなかった場合、正の無限大の値は非常に大きな数に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="f7cccdf775f458dbd65351fa14dd9eb110134681" translate="yes" xml:space="preserve">
          <source>Value to be written on the diagonal, its type must be compatible with that of the array a.</source>
          <target state="translated">対角線上に書き込まれる値は,その型が配列aの型と互換性がなければなりません.</target>
        </trans-unit>
        <trans-unit id="715dcdd8f6ff522d4658e491027e9aae31a8b5e6" translate="yes" xml:space="preserve">
          <source>Value to format.</source>
          <target state="translated">フォーマットへの値。</target>
        </trans-unit>
        <trans-unit id="3d3e32ccc4b0ab4e1f0dc806d286fb59b6c443d6" translate="yes" xml:space="preserve">
          <source>Value to return for &lt;code&gt;x &amp;gt; xp[-1]&lt;/code&gt;, default is &lt;code&gt;fp[-1]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x &amp;gt; xp[-1]&lt;/code&gt; に対して返す値。デフォルトは &lt;code&gt;fp[-1]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="26d4865cbe90216e1386cb06fe27a2a8a2fdea6f" translate="yes" xml:space="preserve">
          <source>Value to return for &lt;code&gt;x &amp;lt; xp[0]&lt;/code&gt;, default is &lt;code&gt;fp[0]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x &amp;lt; xp[0]&lt;/code&gt; に対して返す値。デフォルトは &lt;code&gt;fp[0]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d7a5e0e3824dade99c632ba9171e408c2ecc5e00" translate="yes" xml:space="preserve">
          <source>Value used for fixing invalid data. Default is None, in which case the &lt;code&gt;a.fill_value&lt;/code&gt; is used.</source>
          <target state="translated">無効なデータを修正するために使用される値。デフォルトはNone です。この場合、 &lt;code&gt;a.fill_value&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="69ddc9b73f581b3343b0affbf7e4377d672439b1" translate="yes" xml:space="preserve">
          <source>Value used internally for the masked values. If &lt;code&gt;fill_value&lt;/code&gt; is not None, it supersedes &lt;code&gt;endwith&lt;/code&gt;.</source>
          <target state="translated">マスクされた値に内部的に使用される値。 &lt;code&gt;fill_value&lt;/code&gt; がNoneでない場合、それは &lt;code&gt;endwith&lt;/code&gt; に取って代わります。</target>
        </trans-unit>
        <trans-unit id="328663db0b3aba67f0d82903937cd9193c3e207c" translate="yes" xml:space="preserve">
          <source>Value used to fill in the masked values when necessary. If None, a default based on the data-type is used.</source>
          <target state="translated">必要に応じてマスクされた値を埋めるために使用される値。Noneの場合、データタイプに基づくデフォルトが使用されます。</target>
        </trans-unit>
        <trans-unit id="ac07a9705ce80720af8585478b1d81e8b7b8b456" translate="yes" xml:space="preserve">
          <source>Value used to fill in the masked values.</source>
          <target state="translated">マスクされた値を埋めるために使用される値。</target>
        </trans-unit>
        <trans-unit id="86e71cf73f1d7bc170999262699205370f1f93e4" translate="yes" xml:space="preserve">
          <source>Value used to fill in the masked values. Default is None, in which case &lt;a href=&quot;../maskedarray.baseclass#numpy.ma.MaskedArray.fill_value&quot;&gt;&lt;code&gt;MaskedArray.fill_value&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">マスクされた値を埋めるために使用される値。デフォルトはNone です。この場合、&lt;a href=&quot;../maskedarray.baseclass#numpy.ma.MaskedArray.fill_value&quot;&gt; &lt;code&gt;MaskedArray.fill_value&lt;/code&gt; &lt;/a&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="8d8761f6b2df3e19fd6227b05e79d17f94c040e4" translate="yes" xml:space="preserve">
          <source>Value used to fill in the masked values. Default is None, in which case &lt;code&gt;MaskedArray.fill_value&lt;/code&gt; is used.</source>
          <target state="translated">マスクされた値を入力するために使用される値。デフォルトはNoneです。この場合、 &lt;code&gt;MaskedArray.fill_value&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="19866b65a013a0eb3c733fc479da8433fc02a5f3" translate="yes" xml:space="preserve">
          <source>Value used to fill in the masked values. If None, the output of maximum_fill_value(self._data) is used instead.</source>
          <target state="translated">マスクされた値を塗りつぶすのに使われる値。Noneの場合は、maximum_fill_value(self._data)の出力が代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="5c0a58c6eeb18776376a78bc0a9866ce44b1ad27" translate="yes" xml:space="preserve">
          <source>Value used to fill in the masked values. If None, the output of minimum_fill_value(self._data) is used instead.</source>
          <target state="translated">マスクされた値を塗りつぶすのに使われる値。Noneの場合は、代わりにminimum_fill_value(self._data)の出力が使用されます。</target>
        </trans-unit>
        <trans-unit id="07a803442a8c55907703d44ba611d57fdb6545b5" translate="yes" xml:space="preserve">
          <source>Value used to fill in the masked values. If None, use the output of &lt;a href=&quot;numpy.ma.minimum_fill_value#numpy.ma.minimum_fill_value&quot;&gt;&lt;code&gt;minimum_fill_value&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">マスクされた値を入力するために使用される値。Noneの場合、&lt;a href=&quot;numpy.ma.minimum_fill_value#numpy.ma.minimum_fill_value&quot;&gt; &lt;code&gt;minimum_fill_value&lt;/code&gt; &lt;/a&gt;の出力を使用します。</target>
        </trans-unit>
        <trans-unit id="752e711d9ae184609f9efa220ffeb98e2623ff23" translate="yes" xml:space="preserve">
          <source>Value used to fill in the masked values. If None, use the output of &lt;code&gt;minimum_fill_value&lt;/code&gt;.</source>
          <target state="translated">マスクされた値を埋めるために使用される値。Noneの場合、 &lt;code&gt;minimum_fill_value&lt;/code&gt; の出力を使用します。</target>
        </trans-unit>
        <trans-unit id="94b3fde97e6b1196d461cd6d1087f12e6dea54b2" translate="yes" xml:space="preserve">
          <source>Value used to fill in the masked values. If None, use the output of maximum_fill_value().</source>
          <target state="translated">マスクされた値を塗りつぶすのに使われる値。None の場合は、maximum_fill_value()の出力を使用します。</target>
        </trans-unit>
        <trans-unit id="017e62bc34ab2d5b5f6988aa11de1c343e6dfb88" translate="yes" xml:space="preserve">
          <source>Value(s) to write on the diagonal. If &lt;code&gt;val&lt;/code&gt; is scalar, the value is written along the diagonal. If array-like, the flattened &lt;code&gt;val&lt;/code&gt; is written along the diagonal, repeating if necessary to fill all diagonal entries.</source>
          <target state="translated">対角線に書き込む値。場合 &lt;code&gt;val&lt;/code&gt; はスカラーで、値が対角線に沿って書かれています。配列のような場合、フラット化された &lt;code&gt;val&lt;/code&gt; は対角線に沿って書き込まれ、必要に応じて繰り返してすべての対角線エントリを埋めます。</target>
        </trans-unit>
        <trans-unit id="ca5e1888f7ff9f4679a3377b455596a48d014681" translate="yes" xml:space="preserve">
          <source>ValueError</source>
          <target state="translated">ValueError</target>
        </trans-unit>
        <trans-unit id="cff85a0729a85ef9e54dee30d0bb637ac055b748" translate="yes" xml:space="preserve">
          <source>ValueError: shape mismatch</source>
          <target state="translated">ValueError:Shape Mismatch</target>
        </trans-unit>
        <trans-unit id="eddd55b4550fcb347a1d6bf73a696e1497719104" translate="yes" xml:space="preserve">
          <source>Values are appended to a copy of this array.</source>
          <target state="translated">値はこの配列のコピーに追加されます。</target>
        </trans-unit>
        <trans-unit id="24421420351a973d79bcca3d2ef0e453017e616f" translate="yes" xml:space="preserve">
          <source>Values are generated within the half-open interval &lt;code&gt;[start, stop)&lt;/code&gt; (in other words, the interval including &lt;code&gt;start&lt;/code&gt; but excluding &lt;code&gt;stop&lt;/code&gt;). For integer arguments the function is equivalent to the Python built-in &lt;code&gt;range&lt;/code&gt; function, but returns an ndarray rather than a list.</source>
          <target state="translated">値は、ハーフオープンインターバル &lt;code&gt;[start, stop)&lt;/code&gt; （つまり、 &lt;code&gt;start&lt;/code&gt; を含み、 &lt;code&gt;stop&lt;/code&gt; を除外したインターバル）内で生成されます。整数引数の場合、この関数はPythonの組み込み &lt;code&gt;range&lt;/code&gt; 関数と同等ですが、リストではなくndarrayを返します。</target>
        </trans-unit>
        <trans-unit id="38b38aff8e14ce007107a5b62d7837a43399e916" translate="yes" xml:space="preserve">
          <source>Values at which the weight function will be computed.</source>
          <target state="translated">重み関数が計算される値。</target>
        </trans-unit>
        <trans-unit id="8afc1edfb8d26a9a4bac7610a9a2ed43bc17c240" translate="yes" xml:space="preserve">
          <source>Values from which to choose. &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;condition&lt;/code&gt; need to be broadcastable to some shape.</source>
          <target state="translated">選択する値。 &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;y&lt;/code&gt; 、および &lt;code&gt;condition&lt;/code&gt; は、何らかの形でブロードキャストできる必要があります。</target>
        </trans-unit>
        <trans-unit id="55fd9fa348e62e91b8d05086f74314a1ab640581" translate="yes" xml:space="preserve">
          <source>Values in &lt;code&gt;i&lt;/code&gt; of less than 0 are treated as 0 (which yields an empty string).</source>
          <target state="translated">0未満の &lt;code&gt;i&lt;/code&gt; の値は0として扱われます（空の文字列が生成されます）。</target>
        </trans-unit>
        <trans-unit id="c01309d65a99b72623b37f6cd9a8f8ab7021db81" translate="yes" xml:space="preserve">
          <source>Values of the dictionary are strings or sequence of strings. The corresponding keys can be column indices (integers) or column names (strings). In addition, the special key &lt;code&gt;None&lt;/code&gt; can be used to define a default applicable to all columns.</source>
          <target state="translated">ディクショナリの値は、文字列または文字列のシーケンスです。対応するキーは、列インデックス（整数）または列名（文字列）にすることができます。さらに、特別なキー &lt;code&gt;None&lt;/code&gt; を使用して、すべての列に適用可能なデフォルトを定義できます。</target>
        </trans-unit>
        <trans-unit id="c0da0f066601a2a9367e697b89519e6b0c50e33e" translate="yes" xml:space="preserve">
          <source>Values to change the sign of.</source>
          <target state="translated">符号を変更する値。</target>
        </trans-unit>
        <trans-unit id="4158750ed1844d81234e02100fb4f6a0ce246137" translate="yes" xml:space="preserve">
          <source>Values to find the next representable value of.</source>
          <target state="translated">次の表現可能な値を見つけるための値。</target>
        </trans-unit>
        <trans-unit id="beb9a9be5bcba10dec2aa7359c7898f16a9d7ca8" translate="yes" xml:space="preserve">
          <source>Values to find the spacing of.</source>
          <target state="translated">の間隔を見つけるための値。</target>
        </trans-unit>
        <trans-unit id="3b61fff151ba4cdc5d10abd1dbdd04d94f432686" translate="yes" xml:space="preserve">
          <source>Values to insert into &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">値がに挿入します。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="19b54e21994fdcbd2ab01d7104b74c970245cfe1" translate="yes" xml:space="preserve">
          <source>Values to insert into &lt;code&gt;arr&lt;/code&gt;. If the type of &lt;code&gt;values&lt;/code&gt; is different from that of &lt;code&gt;arr&lt;/code&gt;, &lt;code&gt;values&lt;/code&gt; is converted to the type of &lt;code&gt;arr&lt;/code&gt;. &lt;code&gt;values&lt;/code&gt; should be shaped so that &lt;code&gt;arr[...,obj,...] = values&lt;/code&gt; is legal.</source>
          <target state="translated">&lt;code&gt;arr&lt;/code&gt; に挿入する値。タイプ場合 &lt;code&gt;values&lt;/code&gt; と異なる &lt;code&gt;arr&lt;/code&gt; 、 &lt;code&gt;values&lt;/code&gt; の型に変換され &lt;code&gt;arr&lt;/code&gt; 。 &lt;code&gt;values&lt;/code&gt; は、 &lt;code&gt;arr[...,obj,...] = values&lt;/code&gt; が正当であるように整形する必要があります。</target>
        </trans-unit>
        <trans-unit id="817bf23706b268004f4bf56ee98317c1ad7d150d" translate="yes" xml:space="preserve">
          <source>Values to place in &lt;code&gt;a&lt;/code&gt; at target indices. If &lt;code&gt;v&lt;/code&gt; is shorter than &lt;code&gt;ind&lt;/code&gt; it will be repeated as necessary.</source>
          <target state="translated">値がに配置し、目標指標で。 &lt;code&gt;v&lt;/code&gt; が &lt;code&gt;ind&lt;/code&gt; より短い場合、必要に応じて繰り返されます。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a9be9f0fa346eb48800661efe4c9cdccf0a4d68a" translate="yes" xml:space="preserve">
          <source>Values to place in self._data copy at target indices.</source>
          <target state="translated">self._dataのコピーにターゲットのインデックスに配置する値。</target>
        </trans-unit>
        <trans-unit id="81f73f98efd45554f2765f8a372cd020b7023051" translate="yes" xml:space="preserve">
          <source>Values to prepend or append to &amp;ldquo;a&amp;rdquo; along axis prior to performing the difference. Scalar values are expanded to arrays with length 1 in the direction of axis and the shape of the input array in along all other axes. Otherwise the dimension and shape must match &amp;ldquo;a&amp;rdquo; except along axis.</source>
          <target state="translated">差分を実行する前に、軸に沿って「a」に追加または付加する値。スカラー値は、軸方向の長さが1で、他のすべての軸に沿った入力配列の形状を持つ配列に拡張されます。それ以外の場合は、軸に沿った場合を除いて、寸法と形状が「a」と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="3e169e71a4b3659a2db1d8c19b6c033e97b1e36f" translate="yes" xml:space="preserve">
          <source>Values to prepend or append to &lt;code&gt;a&lt;/code&gt; along axis prior to performing the difference. Scalar values are expanded to arrays with length 1 in the direction of axis and the shape of the input array in along all other axes. Otherwise the dimension and shape must match &lt;code&gt;a&lt;/code&gt; except along axis.</source>
          <target state="translated">先頭に追加または付加する値の差を実行する前に軸に沿っ。スカラー値は、軸の方向に長さが1で、他のすべての軸に沿って入力配列の形状を持つ配列に展開されます。それ以外の場合、寸法と形状は軸に沿っ &lt;code&gt;a&lt;/code&gt; を除いて一致する必要があります。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="462c5daaa1bebf27712ab1f9e6dff7991b7d4f2b" translate="yes" xml:space="preserve">
          <source>Values to put into &lt;code&gt;a&lt;/code&gt; where &lt;code&gt;mask&lt;/code&gt; is True. If &lt;code&gt;values&lt;/code&gt; is smaller than &lt;code&gt;a&lt;/code&gt; it will be repeated.</source>
          <target state="translated">入れるべき値 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;mask&lt;/code&gt; 真です。 &lt;code&gt;values&lt;/code&gt; が &lt;code&gt;a&lt;/code&gt; より小さい場合は繰り返されます。</target>
        </trans-unit>
        <trans-unit id="25e7a819f368d39546137552cf420f108ade4ace" translate="yes" xml:space="preserve">
          <source>Values to put into &lt;code&gt;a&lt;/code&gt;. Only the first N elements are used, where N is the number of True values in &lt;code&gt;mask&lt;/code&gt;. If &lt;code&gt;vals&lt;/code&gt; is smaller than N, it will be repeated, and if elements of &lt;code&gt;a&lt;/code&gt; are to be masked, this sequence must be non-empty.</source>
          <target state="translated">入れて値 &lt;code&gt;a&lt;/code&gt; 。最初のN個の要素のみが使用されます。Nは &lt;code&gt;mask&lt;/code&gt; のTrue値の数です。場合 &lt;code&gt;vals&lt;/code&gt; Nよりも小さい場合、それが繰り返されることになる、との構成要素場合はマスクするかを、この配列は、非空である必要があります。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="60bd6b681e5d46e176fd602e7f740408a4b90a97" translate="yes" xml:space="preserve">
          <source>Vandermonde matrix for powers.</source>
          <target state="translated">力のためのヴァンデルモンデ行列。</target>
        </trans-unit>
        <trans-unit id="6401e380553d40526975bfbedfb18608ca5c00ad" translate="yes" xml:space="preserve">
          <source>Vandermonde matrix of Chebyshev series.</source>
          <target state="translated">チェビシェフ級数のヴァンダーモンド行列。</target>
        </trans-unit>
        <trans-unit id="ae6e82d94a52ea695163be06dc24993156d990a5" translate="yes" xml:space="preserve">
          <source>Vandermonde matrix of Hermite series.</source>
          <target state="translated">Hermiteシリーズのヴァンダーモンド行列。</target>
        </trans-unit>
        <trans-unit id="a2d6130252c264087c83a0456898053f5cce8c9b" translate="yes" xml:space="preserve">
          <source>Vandermonde matrix of Legendre series.</source>
          <target state="translated">ヴァンダーモンデの行列やレジェンドールシリーズ。</target>
        </trans-unit>
        <trans-unit id="5d2bf93649140d94c435a78c84579d541c1303f5" translate="yes" xml:space="preserve">
          <source>Vandermonde matrix of given degree.</source>
          <target state="translated">与えられた次数のヴァンダーモンデ行列。</target>
        </trans-unit>
        <trans-unit id="315c420145ba2a2de3ef508e657b666b667d7db9" translate="yes" xml:space="preserve">
          <source>Vandermonde matrix. If &lt;code&gt;increasing&lt;/code&gt; is False, the first column is &lt;code&gt;x^(N-1)&lt;/code&gt;, the second &lt;code&gt;x^(N-2)&lt;/code&gt; and so forth. If &lt;code&gt;increasing&lt;/code&gt; is True, the columns are &lt;code&gt;x^0, x^1, ..., x^(N-1)&lt;/code&gt;.</source>
          <target state="translated">ヴァンダーモンド行列。場合 &lt;code&gt;increasing&lt;/code&gt; Falseで、最初の列は、 &lt;code&gt;x^(N-1)&lt;/code&gt; 、第 &lt;code&gt;x^(N-2)&lt;/code&gt; 等が挙げられます。場合は &lt;code&gt;increasing&lt;/code&gt; Trueで、カラムがある &lt;code&gt;x^0, x^1, ..., x^(N-1)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2fb0e847303b2656c561914c6c1fadfb2178ba16" translate="yes" xml:space="preserve">
          <source>Variable names are displayed in typewriter font, obtained by using &lt;code&gt;\mathtt{var}&lt;/code&gt;:</source>
          <target state="translated">変数名は、 &lt;code&gt;\mathtt{var}&lt;/code&gt; を使用して取得したタイプライターフォントで表示されます。</target>
        </trans-unit>
        <trans-unit id="ef7476851367ab64af3bc4c81c52e5e1e6857c25" translate="yes" xml:space="preserve">
          <source>Variables in Numpy which control and describe alignment</source>
          <target state="translated">アラインメントを制御・記述するNumpyの変数</target>
        </trans-unit>
        <trans-unit id="2a1f6fba473be39ef3c80a51eed0db143c77f764" translate="yes" xml:space="preserve">
          <source>Variance while not ignoring NaNs</source>
          <target state="translated">NaNを無視した場合の分散</target>
        </trans-unit>
        <trans-unit id="8676fa65ac8cfd04cdda1d2741f1f3486c926b70" translate="yes" xml:space="preserve">
          <source>Various continuous integration (CI) services are triggered after each PR update to build the code, run unit tests, measure code coverage and check coding style of your branch. The CI tests must pass before your PR can be merged. If CI fails, you can find out why by clicking on the &amp;ldquo;failed&amp;rdquo; icon (red cross) and inspecting the build and test log. To avoid overuse and waste of this resource, &lt;a href=&quot;development_environment#recommended-development-setup&quot;&gt;test your work&lt;/a&gt; locally before committing.</source>
          <target state="translated">各PR更新後に、さまざまな継続的インテグレーション（CI）サービスがトリガーされ、コードの構築、単体テストの実行、コードカバレッジの測定、およびブランチのコーディングスタイルの確認が行われます。PRをマージする前に、CIテストに合格する必要があります。CIが失敗した場合は、「失敗」アイコン（赤い十字）をクリックし、ビルドとテストのログを調べることで理由を確認できます。このリソースの使いすぎや浪費を避けるために、コミットする前にローカルで&lt;a href=&quot;development_environment#recommended-development-setup&quot;&gt;作業をテストしてください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="47604fcededf37e9515dbd4dd1f0e8ae5e2d23c4" translate="yes" xml:space="preserve">
          <source>Various fields have standard formats for array data. The following lists the ones with known python libraries to read them and return numpy arrays (there may be others for which it is possible to read and convert to numpy arrays so check the last section as well)</source>
          <target state="translated">様々なフィールドは配列データの標準フォーマットを持っています。以下は、それらを読み込んでnumpy配列を返すための既知のPythonライブラリを持つもののリストです(他にもnumpy配列を読み込んで変換できるものがあるかもしれませんので、最後のセクションもチェックしてください)</target>
        </trans-unit>
        <trans-unit id="407b9055a29b3862ad6596884f933fb2e3b90801" translate="yes" xml:space="preserve">
          <source>Various windows</source>
          <target state="translated">様々な窓</target>
        </trans-unit>
        <trans-unit id="a77d3d622bb695acc100256fe700b0a21c995057" translate="yes" xml:space="preserve">
          <source>Vector Quantization J. Makhoul, S. Roucos, and H. Gish, &amp;ldquo;Vector Quantization in Speech Coding,&amp;rdquo; Proc. IEEE, vol. 73, pp. 1551-1587, Nov. 1985.</source>
          <target state="translated">ベクトル量子化J.Makhoul、S。Roucos、およびH. Gish、「音声コーディングにおけるベクトル量子化」、Proc。IEEE、vol。73、pp.1551-1587、1985年11月。</target>
        </trans-unit>
        <trans-unit id="f5d5df32cb3f2a3be9fd3df5321700c5dfe41670" translate="yes" xml:space="preserve">
          <source>Vector Stacking</source>
          <target state="translated">ベクトルスタッキング</target>
        </trans-unit>
        <trans-unit id="690a0d6330a132cb4527e3e44d7a2347c9a06b3a" translate="yes" xml:space="preserve">
          <source>Vector cross product(s).</source>
          <target state="translated">ベクトルクロス積(複数可)。</target>
        </trans-unit>
        <trans-unit id="28cb052426ac62f08e613cbe9ac7789542c3593f" translate="yes" xml:space="preserve">
          <source>Vector cross-product.</source>
          <target state="translated">ベクトル交差生成物。</target>
        </trans-unit>
        <trans-unit id="0fe94b620577959abe98d342c3396c44b95bc9ac" translate="yes" xml:space="preserve">
          <source>Vector inner and outer products, &lt;a href=&quot;numpy.inner#numpy.inner&quot;&gt;&lt;code&gt;numpy.inner&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;numpy.outer#numpy.outer&quot;&gt;&lt;code&gt;numpy.outer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ベクターの内積と外積&lt;a href=&quot;numpy.inner#numpy.inner&quot;&gt; &lt;code&gt;numpy.inner&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;numpy.outer#numpy.outer&quot;&gt; &lt;code&gt;numpy.outer&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fc155524d5d2ad1522cc08f2291c52dc38dcecf1" translate="yes" xml:space="preserve">
          <source>Vector inner products:</source>
          <target state="translated">ベクトルの内側の製品。</target>
        </trans-unit>
        <trans-unit id="7b8a7176d65340f9da0fa7937d046de8633e6685" translate="yes" xml:space="preserve">
          <source>Vector outer product:</source>
          <target state="translated">ベクトル外積。</target>
        </trans-unit>
        <trans-unit id="acae4c791d04e4455a560ff6e41306cbb57dcf51" translate="yes" xml:space="preserve">
          <source>Vector(s) with the singular values, within each vector sorted in descending order. The first &lt;code&gt;a.ndim - 2&lt;/code&gt; dimensions have the same size as those of the input &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">降順で並べ替えられた各ベクトル内の特異値を含むベクトル。最初の &lt;code&gt;a.ndim - 2&lt;/code&gt; 次元は、入力 &lt;code&gt;a&lt;/code&gt; と同じサイズです。</target>
        </trans-unit>
        <trans-unit id="2a5acfbe842fd0541792480526462188b04dde53" translate="yes" xml:space="preserve">
          <source>Vector, vector returns the scalar inner product, but neither argument is complex-conjugated:</source>
          <target state="translated">Vector,vectorはスカラーの内積を返しますが、どちらの引数も複素共役化されていません。</target>
        </trans-unit>
        <trans-unit id="d24d62baa6df1c0e53e6c0f85d62c2190886f5dd" translate="yes" xml:space="preserve">
          <source>Vectorization describes the absence of any explicit looping, indexing, etc., in the code - these things are taking place, of course, just &amp;ldquo;behind the scenes&amp;rdquo; in optimized, pre-compiled C code. Vectorized code has many advantages, among which are:</source>
          <target state="translated">ベクトル化は、コードに明示的なループやインデックス作成などがないことを示します。もちろん、これらは、最適化され、コンパイル済みのCコードの「舞台裏」で行われています。ベクトル化されたコードには多くの利点があり、その中には次のものがあります。</target>
        </trans-unit>
        <trans-unit id="c6ec9d2e3c00c48eca40b4ca66a3c4d474b90630" translate="yes" xml:space="preserve">
          <source>Vectorized function.</source>
          <target state="translated">ベクトル化された関数。</target>
        </trans-unit>
        <trans-unit id="72db9853411ecb8ab44d24a7ecaed3ef15eeb780" translate="yes" xml:space="preserve">
          <source>Verbosity value for benchmark outputs, in the range 1-10. Default is 1.</source>
          <target state="translated">ベンチマーク出力の冗長度の値を 1 ~ 10 の範囲で指定します。デフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="56a92946aff3755099c7d26b356bbca785b0c03f" translate="yes" xml:space="preserve">
          <source>Verbosity value for test outputs, in the range 1-10. Default is 1.</source>
          <target state="translated">テスト出力の冗長度の値、範囲は 1 ~ 10 です。デフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="7bfe5238ce1d36e9bfcb089f4f57728d117a113e" translate="yes" xml:space="preserve">
          <source>Verify the mean and the variance:</source>
          <target state="translated">平均と分散を検証します。</target>
        </trans-unit>
        <trans-unit id="01e4cae31c98991a3d53edad9d5a04ca08ed4f3b" translate="yes" xml:space="preserve">
          <source>Version numbering</source>
          <target state="translated">バージョン・ナンバリング</target>
        </trans-unit>
        <trans-unit id="51eea7cbb443c92981917f3f8bfdb384f15a6153" translate="yes" xml:space="preserve">
          <source>Version of this function that preserves the shape of ar1.</source>
          <target state="translated">ar1の形状を保持するこの関数のバージョン.</target>
        </trans-unit>
        <trans-unit id="224aeb6086ba7022d83156756ac873c6ff737642" translate="yes" xml:space="preserve">
          <source>Versus a regular NumPy array of type &lt;a href=&quot;https://docs.python.org/dev/library/stdtypes.html#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;unicode&lt;/code&gt;, this class adds the following functionality:</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/dev/library/stdtypes.html#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;または &lt;code&gt;unicode&lt;/code&gt; 型の通常のNumPy配列と比較して、このクラスは次の機能を追加します。</target>
        </trans-unit>
        <trans-unit id="a21f850c092874207e85425f1992b2d1d4a0daef" translate="yes" xml:space="preserve">
          <source>Versus a regular NumPy array of type &lt;code&gt;str&lt;/code&gt; or &lt;code&gt;unicode&lt;/code&gt;, this class adds the following functionality:</source>
          <target state="translated">&lt;code&gt;str&lt;/code&gt; または &lt;code&gt;unicode&lt;/code&gt; 型の通常のNumPy配列と比較して、このクラスは次の機能を追加します。</target>
        </trans-unit>
        <trans-unit id="8dff4805e231cae5fc82f2b66c5c75ea9b76e2a9" translate="yes" xml:space="preserve">
          <source>Very little support for C++ code and its different library-calling conventions. You will probably need a C wrapper around C++ code to use with ctypes (or just use Boost.Python instead).</source>
          <target state="translated">C++のコードとそのライブラリ呼び出しの規約はほとんどサポートされていません。ctypesを使用するためには、C++コードの周りにCのラッパーが必要になるでしょう (あるいは、代わりにBoost.Pythonを使用することもできます)。</target>
        </trans-unit>
        <trans-unit id="c127fa63d626c5390ae1bdab993f5e47e3ded50c" translate="yes" xml:space="preserve">
          <source>Very often, it is desirable to iterate over several arrays at the same time. The universal functions are an example of this kind of behavior. If all you want to do is iterate over arrays with the same shape, then simply creating several iterator objects is the standard procedure. For example, the following code iterates over two arrays assumed to be the same shape and size (actually obj1 just has to have at least as many total elements as does obj2):</source>
          <target state="translated">非常に多くの場合,同時に複数の配列を反復処理することが望ましい.ユニバーサル関数は、この種の動作の例です。同じ形状の配列を反復処理したいだけならば,単純に複数のイテレータオブジェクトを作成するのが標準的な手順です.たとえば、次のコードは、同じ形状とサイズの 2 つの配列を反復処理しています(実際には obj1 は obj2 と同数の総要素数を持つ必要があります)。</target>
        </trans-unit>
        <trans-unit id="ba00ebd75f3175e23b4f09615b45ef3560ac5818" translate="yes" xml:space="preserve">
          <source>View based and advanced indexing is mixed. In this case the view based indexing defines a collection of subarrays that are combined by the advanced indexing. For example, &lt;code&gt;arr[[1, 2, 3], :]&lt;/code&gt; is created by vertically stacking the subarrays &lt;code&gt;arr[1, :]&lt;/code&gt;, &lt;code&gt;arr[2,:]&lt;/code&gt;, and &lt;code&gt;arr[3, :]&lt;/code&gt;.</source>
          <target state="translated">ビューベースのインデックスと高度なインデックスが混在しています。この場合、ビューベースのインデックス付けは、高度なインデックス付けによって結合されるサブ配列のコレクションを定義します。たとえば、 &lt;code&gt;arr[[1, 2, 3], :]&lt;/code&gt; &lt;code&gt;arr[2,:]&lt;/code&gt; は、サブアレイ &lt;code&gt;arr[1, :]&lt;/code&gt; 、arr [2 ,:]、および &lt;code&gt;arr[3, :]&lt;/code&gt; 、：]を垂直に積み重ねることによって作成されます。</target>
        </trans-unit>
        <trans-unit id="a9c88862eb9a71fc0e8a80b619b8e3f7d2d2d42e" translate="yes" xml:space="preserve">
          <source>View casting</source>
          <target state="translated">キャストを見る</target>
        </trans-unit>
        <trans-unit id="56880c7be840a348e75d7f5abcf907eb8bf9c7d5" translate="yes" xml:space="preserve">
          <source>View casting - casting an existing ndarray as a given subclass</source>
          <target state="translated">ビューキャスト-既存の ndarray を指定したサブクラスとしてキャストする</target>
        </trans-unit>
        <trans-unit id="b2ca30abe686b95f053f55957fa5266ab07dca0a" translate="yes" xml:space="preserve">
          <source>View inputs as arrays with at least three dimensions.</source>
          <target state="translated">入力を少なくとも3次元の配列として表示します。</target>
        </trans-unit>
        <trans-unit id="45fb889525ea027b940786067638d779d675de17" translate="yes" xml:space="preserve">
          <source>View inputs as arrays with at least two dimensions.</source>
          <target state="translated">入力を少なくとも2次元の配列として表示します。</target>
        </trans-unit>
        <trans-unit id="6e4fbf98b4a2f11308bf6ec449635485ea8cdb89" translate="yes" xml:space="preserve">
          <source>View of &lt;code&gt;a&lt;/code&gt; with the number of dimensions increased by one.</source>
          <target state="translated">次元数が1増加した &lt;code&gt;a&lt;/code&gt; のビュー。</target>
        </trans-unit>
        <trans-unit id="1435a6e88e9cfdd34dddec8e0ea3d664de355e82" translate="yes" xml:space="preserve">
          <source>View of &lt;code&gt;a&lt;/code&gt; with the number of dimensions increased.</source>
          <target state="translated">次元数が増え &lt;code&gt;a&lt;/code&gt; ビュー。</target>
        </trans-unit>
        <trans-unit id="cbf2e6fd5608dfcde8e1d428501030442d53386c" translate="yes" xml:space="preserve">
          <source>View of &lt;code&gt;a&lt;/code&gt;, with axes suitably permuted.</source>
          <target state="translated">軸を適切に並べ替え &lt;code&gt;a&lt;/code&gt; ビュー。</target>
        </trans-unit>
        <trans-unit id="64d2e5a4061b7a0c16fd366760c98d172091bc5e" translate="yes" xml:space="preserve">
          <source>View or Shallow Copy</source>
          <target state="translated">表示またはシャローコピー</target>
        </trans-unit>
        <trans-unit id="690413363bd8aafde5497bc7e1d13a4d8e5f2372" translate="yes" xml:space="preserve">
          <source>View the array as a record array:</source>
          <target state="translated">配列をレコード配列として表示します。</target>
        </trans-unit>
        <trans-unit id="aea7dff1c7bb5f575c10f755c8f2b7c22ca00476" translate="yes" xml:space="preserve">
          <source>Viewing Structured Arrays Containing Objects</source>
          <target state="translated">オブジェクトを含む構造化配列の表示</target>
        </trans-unit>
        <trans-unit id="81d42abd80c44b454ac926e28ee7856a84a169a3" translate="yes" xml:space="preserve">
          <source>Viewing array data using a different type and dtype:</source>
          <target state="translated">配列データを別の型とdtypeで表示します。</target>
        </trans-unit>
        <trans-unit id="e4585378f90f92f4cace47440b8fa755fd8680a6" translate="yes" xml:space="preserve">
          <source>Views are an important NumPy concept! NumPy functions, as well as operations like indexing and slicing, will return views whenever possible. This saves memory and is faster (no copy of the data has to be made). However it&amp;rsquo;s important to be aware of this - modifying data in a view also modifies the original array!</source>
          <target state="translated">ビューは重要なNumPyの概念です！NumPy関数、およびインデックス作成やスライスなどの操作は、可能な限りビューを返します。これにより、メモリが節約され、高速になります（データのコピーを作成する必要はありません）。ただし、これに注意することが重要です。ビュー内のデータを変更すると、元の配列も変更されます。</target>
        </trans-unit>
        <trans-unit id="30c8756fc6d8ab2295389484bbe9c6879a472d3c" translate="yes" xml:space="preserve">
          <source>Views of arrays in Fortran order</source>
          <target state="translated">Fortranでの配列の表示順</target>
        </trans-unit>
        <trans-unit id="59879f373c87da4a2c95c0412230c3555cfc240e" translate="yes" xml:space="preserve">
          <source>Views returned from einsum are now writeable whenever the input array is writeable. For example, &lt;code&gt;np.einsum('ijk...-&amp;gt;kji...', a)&lt;/code&gt; will now have the same effect as &lt;a href=&quot;numpy.swapaxes#numpy.swapaxes&quot;&gt;&lt;code&gt;np.swapaxes(a, 0, 2)&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;np.einsum('ii-&amp;gt;i', a)&lt;/code&gt; will return a writeable view of the diagonal of a 2D array.</source>
          <target state="translated">einsumから返されたビューは、入力配列が書き込み可能であるときはいつでも書き込み可能になりました。たとえば、 &lt;code&gt;np.einsum('ijk...-&amp;gt;kji...', a)&lt;/code&gt; は&lt;a href=&quot;numpy.swapaxes#numpy.swapaxes&quot;&gt; &lt;code&gt;np.swapaxes(a, 0, 2)&lt;/code&gt; &lt;/a&gt;および &lt;code&gt;np.einsum('ii-&amp;gt;i', a)&lt;/code&gt; と同じ効果があります。、a）は、2D配列の対角線の書き込み可能なビューを返します。</target>
        </trans-unit>
        <trans-unit id="212733d972db48c77aaab9351402436eae4fd2ff" translate="yes" xml:space="preserve">
          <source>Views share data:</source>
          <target state="translated">ビューはデータを共有します。</target>
        </trans-unit>
        <trans-unit id="c9d8f3fc365bae8c1e0312cb68b7341a485aec6e" translate="yes" xml:space="preserve">
          <source>Views that change the dtype size (bytes per entry) should normally be avoided on arrays defined by slices, transposes, fortran-ordering, etc.:</source>
          <target state="translated">dtypeのサイズ(エントリあたりのバイト数)を変更するビューは,スライス,トランスポーズ,フォルトラン順序付けなどで定義された配列では,通常は避けた方がよいでしょう.</target>
        </trans-unit>
        <trans-unit id="56b0a8ac25b1950e1419116b1fa18ea25ea62bb3" translate="yes" xml:space="preserve">
          <source>Violent threats or language directed against another person.</source>
          <target state="translated">他人に対する暴力的な脅迫や言葉遣い。</target>
        </trans-unit>
        <trans-unit id="43e46231e2e4425940323040c2be47d46f02e331" translate="yes" xml:space="preserve">
          <source>Virtualenv</source>
          <target state="translated">Virtualenv</target>
        </trans-unit>
        <trans-unit id="2e7e7becfbd2f76f4c7a1cf2e451eb461ef24b08" translate="yes" xml:space="preserve">
          <source>Virtualenv is a very useful tool to keep several versions of packages around. It is also used in the Paver script to build the docs.</source>
          <target state="translated">Virtualenvは、複数のバージョンのパッケージを保持しておくのに非常に便利なツールです。また、Paverスクリプトでドキュメントを構築する際にも使用します。</target>
        </trans-unit>
        <trans-unit id="319d8490779b3eba0e5e3b87402a7431309ef352" translate="yes" xml:space="preserve">
          <source>Void dtype discovery in &lt;code&gt;np.array&lt;/code&gt;</source>
          <target state="translated">np.arrayでの &lt;code&gt;np.array&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e2415cb7f63df0c9de23362326ad3c37a9adfc96" translate="yes" xml:space="preserve">
          <source>W</source>
          <target state="translated">W</target>
        </trans-unit>
        <trans-unit id="3cd2f9e2b1f25c2f5e7b93f7ce911077d7d964a4" translate="yes" xml:space="preserve">
          <source>W. H. Press, S. A. Teukolsky, W. T. Vetterling and B. P. Flannery, &amp;ldquo;Numerical Recipes (3rd edition)&amp;rdquo;, Cambridge University Press, 2007, page 795.</source>
          <target state="translated">WH Press、SA Teukolsky、WT Vetterling、およびBP Flannery、「Numerical Recipes（3rd edition）」、Cambridge University Press、2007年、795ページ。</target>
        </trans-unit>
        <trans-unit id="e9c669c28770b602c0d3307e40af975f3d6ab286" translate="yes" xml:space="preserve">
          <source>W.H. Press, B.P. Flannery, S.A. Teukolsky, and W.T. Vetterling, &amp;ldquo;Numerical Recipes&amp;rdquo;, Cambridge University Press, 1986, page 425.</source>
          <target state="translated">WH Press、BP Flannery、SA Teukolsky、およびWT Vetterling、「Numerical Recipes」、Cambridge University Press、1986年、425ページ。</target>
        </trans-unit>
        <trans-unit id="dbd0b2fdf754a4d650097a931842e3ce01d68c23" translate="yes" xml:space="preserve">
          <source>W.H. Press, B.P. Flannery, S.A. Teukolsky, and W.T. Vetterling, &amp;ldquo;Numerical Recipes&amp;rdquo;, Cambridge University Press, 1986, page 429.</source>
          <target state="translated">WH Press、BP Flannery、SA Teukolsky、およびWT Vetterling、「Numerical Recipes」、Cambridge University Press、1986年、429ページ。</target>
        </trans-unit>
        <trans-unit id="4d8b44b86ac9762795ccf1eb37bf4871143a380a" translate="yes" xml:space="preserve">
          <source>WRITEABLE (W) the data area can be written to;</source>
          <target state="translated">WRITEABLE (W)データ領域に書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="a6dcab075be566e2b98d550a936f8cae5ce9422f" translate="yes" xml:space="preserve">
          <source>WRITEABLE / W</source>
          <target state="translated">ライタブル/W</target>
        </trans-unit>
        <trans-unit id="73fb58e7589a9ff67f327a9e1cfb0abcae369bb5" translate="yes" xml:space="preserve">
          <source>WRITEABLE can only be set &lt;code&gt;True&lt;/code&gt; if the array owns its own memory or the ultimate owner of the memory exposes a writeable buffer interface or is a string.</source>
          <target state="translated">配列が独自のメモリを所有している場合、またはメモリの最終的な所有者が書き込み可能なバッファインターフェイスを公開している場合、または文字列である場合にのみ、WRITEABLEを &lt;code&gt;True&lt;/code&gt; に設定できます。</target>
        </trans-unit>
        <trans-unit id="5ca2fe3e818dba5a5804a5bb3a831dd89c500d7a" translate="yes" xml:space="preserve">
          <source>WRITEBACKIFCOPY (X) this array is a copy of some other array (referenced by .base). When the C-API function PyArray_ResolveWritebackIfCopy is called, the base array will be updated with the contents of this array.</source>
          <target state="translated">WRITEBACKIFCOPY (X)この配列は他の配列(.baseで参照される)のコピーです。C-API 関数 PyArray_ResolveWritebackIfCopy が呼び出されると、ベース配列はこの配列の内容で更新されます。</target>
        </trans-unit>
        <trans-unit id="3b243b9b37eb143e3a1ec8091e9c80e424b7cb17" translate="yes" xml:space="preserve">
          <source>WRITEBACKIFCOPY / X</source>
          <target state="translated">WRITEBACKIFCOPY/X</target>
        </trans-unit>
        <trans-unit id="09fcb82609179c1f7885c137f520c527fdcb1905" translate="yes" xml:space="preserve">
          <source>WRITEBACKIFCOPY can only be set &lt;code&gt;False&lt;/code&gt;.</source>
          <target state="translated">WRITEBACKIFCOPYは &lt;code&gt;False&lt;/code&gt; にのみ設定できます。</target>
        </trans-unit>
        <trans-unit id="6fd7081253d772e7a32e41421d2cdf6a9cabced2" translate="yes" xml:space="preserve">
          <source>Waloddi Weibull, &amp;ldquo;A Statistical Distribution Function of Wide Applicability&amp;rdquo;, Journal Of Applied Mechanics ASME Paper 1951.</source>
          <target state="translated">Waloddi Weibull、「幅広い適用性の統計的分布関数」、Journal of Applied Mechanics ASME Paper 1951。</target>
        </trans-unit>
        <trans-unit id="db8ff1d3b42b8d1fe40e88e8148de81cccee175c" translate="yes" xml:space="preserve">
          <source>Waloddi Weibull, Royal Technical University, Stockholm, 1939 &amp;ldquo;A Statistical Theory Of The Strength Of Materials&amp;rdquo;, Ingeniorsvetenskapsakademiens Handlingar Nr 151, 1939, Generalstabens Litografiska Anstalts Forlag, Stockholm.</source>
          <target state="translated">Waloddi Weibull、ロイヤルテクニカルユニバーシティ、ストックホルム、1939「材料の強度の統計理論」、Ingeniorsvetenskapsakademiens Handlear Nr 151、1939、Generalstabens Litografiska Anstalts Forlag、ストックホルム。</target>
        </trans-unit>
        <trans-unit id="f1346bf7169c446f1eec32708e49a903284d1169" translate="yes" xml:space="preserve">
          <source>Warn when saving a dtype with metadata</source>
          <target state="translated">メタデータ付きのdtypeを保存する際の警告</target>
        </trans-unit>
        <trans-unit id="e9c45563358e813f157ba81b33143542165ba84e" translate="yes" xml:space="preserve">
          <source>Warning</source>
          <target state="translated">Warning</target>
        </trans-unit>
        <trans-unit id="4754f4fe525f9c37d19fda1322550a0b26e13158" translate="yes" xml:space="preserve">
          <source>Warning class to filter</source>
          <target state="translated">フィルタリングする警告クラス</target>
        </trans-unit>
        <trans-unit id="f88a191846138392ad4758d4ff77a36f017f6d00" translate="yes" xml:space="preserve">
          <source>Warning objects</source>
          <target state="translated">警告オブジェクト</target>
        </trans-unit>
        <trans-unit id="bb630d84baa9f5fb3c8c438ee6064e7457d1688d" translate="yes" xml:space="preserve">
          <source>Warning on casting complex to real</source>
          <target state="translated">リアルへの配役コンプレックスに注意</target>
        </trans-unit>
        <trans-unit id="37361059464af82221d16eb1a2018e9694f9cd57" translate="yes" xml:space="preserve">
          <source>Warning: This attribute exists specifically for &lt;code&gt;__array_interface__&lt;/code&gt;, and is not a datatype description compatible with &lt;code&gt;np.dtype&lt;/code&gt;.</source>
          <target state="translated">警告：この属性は、専用に存在 &lt;code&gt;__array_interface__&lt;/code&gt; 、と互換性データ型説明ない &lt;code&gt;np.dtype&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53dd2d8a36d40ea4bb66f08310fbbcb2e7533b5f" translate="yes" xml:space="preserve">
          <source>Warning: This attribute exists specifically for &lt;code&gt;__array_interface__&lt;/code&gt;, and passing it directly to &lt;code&gt;np.dtype&lt;/code&gt; will not accurately reconstruct some dtypes (e.g., scalar and subarray dtypes).</source>
          <target state="translated">この属性は、具体的のために存在する：警告 &lt;code&gt;__array_interface__&lt;/code&gt; 、とに直接渡し &lt;code&gt;np.dtype&lt;/code&gt; 正確にいくつかのdtypes（例えば、スカラーサブアレイdtypes）を再構築しません。</target>
        </trans-unit>
        <trans-unit id="67f63aaa6eb093a2b8631aeb7aa1f1f56dd3fc86" translate="yes" xml:space="preserve">
          <source>Warning: This functionality does &lt;strong&gt;not&lt;/strong&gt; consider axes separately, i.e. it does not apply interpolation/extrapolation. It fills the return array with the required number of elements, taken from &lt;code&gt;a&lt;/code&gt; as they are laid out in memory, disregarding strides and axes. (This is in case the new shape is smaller. For larger, see above.) This functionality is therefore not suitable to resize images, or data where each axis represents a separate and distinct entity.</source>
          <target state="translated">警告：この機能はない&lt;strong&gt;ではない&lt;/strong&gt;個別の軸を考え、すなわちそれは、補間/外挿は適用されません。ストライドと軸を無視して、メモリに配置されたときに &lt;code&gt;a&lt;/code&gt; から取得された必要な数の要素で戻り配列を埋めます。 （これは、新しい形状が小さい場合に当てはまります。大きい場合は、上記を参照してください。）したがって、この機能は、画像や各軸が個別のエンティティを表すデータのサイズ変更には適していません。</target>
        </trans-unit>
        <trans-unit id="1430f976c596795274458abcfbc4f280cbfcebac" translate="yes" xml:space="preserve">
          <source>Warnings</source>
          <target state="translated">Warnings</target>
        </trans-unit>
        <trans-unit id="60f5d88ea293a20258ae77bd080550b12d5b3d82" translate="yes" xml:space="preserve">
          <source>Warns</source>
          <target state="translated">Warns</target>
        </trans-unit>
        <trans-unit id="6fcbb55cbf3a317fd9e559a46404d4ffc0901e5d" translate="yes" xml:space="preserve">
          <source>Warns:</source>
          <target state="translated">Warns:</target>
        </trans-unit>
        <trans-unit id="2877e71e929aa29b0e79a512d385261189d70371" translate="yes" xml:space="preserve">
          <source>Wave heights tend to follow a Rayleigh distribution. If the mean wave height is 1 meter, what fraction of waves are likely to be larger than 3 meters?</source>
          <target state="translated">波高はレイリー分布に従う傾向がある。平均波高が1mだとすると、3mよりも大きい波の割合はどのくらいでしょうか?</target>
        </trans-unit>
        <trans-unit id="58cd26b5bf632fda361651c5bed4615a24ac5c34" translate="yes" xml:space="preserve">
          <source>We are thankful to the groups behind the following documents, from which we drew content and inspiration:</source>
          <target state="translated">私たちは、以下の文書の背後にあるグループに感謝しています。</target>
        </trans-unit>
        <trans-unit id="87d1583437d12a714a66434e88f0db3dd9eec3f0" translate="yes" xml:space="preserve">
          <source>We build 32- and 64-bit wheels on Windows. Windows 7, 8 and 10 are supported. We build NumPy using the &lt;a href=&quot;https://mingwpy.github.io&quot;&gt;mingw-w64 toolchain&lt;/a&gt; on Appveyor.</source>
          <target state="translated">Windows上で32ビットおよび64ビットのホイールを構築します。Windows 7、8、および10がサポートされています。&lt;a href=&quot;https://mingwpy.github.io&quot;&gt;Appveyorのmingw-w64ツールチェーン&lt;/a&gt;を使用してNumPyを構築します。</target>
        </trans-unit>
        <trans-unit id="52a53769f72b3e9d74a22d9793d68e7e1c952be3" translate="yes" xml:space="preserve">
          <source>We build all our wheels on cloud infrastructure - so this list of compilers is for information and debugging builds locally. See the &lt;code&gt;.travis.yml&lt;/code&gt; and &lt;code&gt;appveyor.yml&lt;/code&gt; scripts in the &lt;a href=&quot;https://github.com/MacPython/numpy-wheels&quot;&gt;numpy wheels&lt;/a&gt; repo for the definitive source of the build recipes. Packages that are available using pip are noted.</source>
          <target state="translated">私たちはすべてのホイールをクラウドインフラストラクチャ上に構築しています。したがって、このコンパイラのリストは、ビルドの情報とデバッグをローカルで行うためのものです。参照 &lt;code&gt;.travis.yml&lt;/code&gt; と &lt;code&gt;appveyor.yml&lt;/code&gt; でスクリプト&lt;a href=&quot;https://github.com/MacPython/numpy-wheels&quot;&gt;numpyの車輪が&lt;/a&gt;ビルドレシピの決定的なソースのレポ。pipを使用して利用できるパッケージが記載されています。</target>
        </trans-unit>
        <trans-unit id="5ffd71ee5e18a21e4fac71c59e3fce6abfaf692e" translate="yes" xml:space="preserve">
          <source>We build and ship &lt;a href=&quot;https://www.python.org/dev/peps/pep-0513&quot;&gt;manylinux1&lt;/a&gt; wheels for NumPy. Many Linux distributions include their own binary builds of NumPy.</source>
          <target state="translated">NumPy用に&lt;a href=&quot;https://www.python.org/dev/peps/pep-0513&quot;&gt;manylinux1&lt;/a&gt;ホイールを構築して出荷しています。多くのLinuxディストリビューションには、独自のNumPyのバイナリビルドが含まれています。</target>
        </trans-unit>
        <trans-unit id="c2a47a01a930577b3f6fd6bc57c66f9caa61248a" translate="yes" xml:space="preserve">
          <source>We build source releases in both .zip and .tar.gz formats.</source>
          <target state="translated">私たちは、.zip と .tar.gz の両方の形式でソースリリースを構築します。</target>
        </trans-unit>
        <trans-unit id="90fdab75def7d856cf227160207c1857877a95de" translate="yes" xml:space="preserve">
          <source>We can access the elements in the array using square brackets. When you&amp;rsquo;re accessing elements, remember that indexing in NumPy starts at 0. That means that if you want to access the first element in your array, you&amp;rsquo;ll be accessing element &amp;ldquo;0&amp;rdquo;.</source>
          <target state="translated">角括弧を使用して配列内の要素にアクセスできます。要素にアクセスするときは、NumPyのインデックス作成は0から始まることに注意してください。つまり、配列の最初の要素にアクセスする場合は、要素「0」にアクセスすることになります。</target>
        </trans-unit>
        <trans-unit id="27c3166519c3983dd1bdd287de2f7543430ee161" translate="yes" xml:space="preserve">
          <source>We can also access the valid entries by using the logical negation for this mask:</source>
          <target state="translated">また、このマスクの論理的否定を利用して、有効なエントリにアクセスすることもできます。</target>
        </trans-unit>
        <trans-unit id="72895573c71234a77f8f78e60c8d2a3fa9071512" translate="yes" xml:space="preserve">
          <source>We can also give indexes for more than one dimension. The arrays of indices for each dimension must have the same shape.</source>
          <target state="translated">複数の次元のインデックスを与えることもできます。各次元のインデックスの配列は同じ形状でなければなりません。</target>
        </trans-unit>
        <trans-unit id="d199611fe572f9a604421aeb87fed868192644af" translate="yes" xml:space="preserve">
          <source>We can begin with a chain dot example. In this case, it is optimal to contract the &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt; tensors first as represented by the first element of the path &lt;code&gt;(1, 2)&lt;/code&gt;. The resulting tensor is added to the end of the contraction and the remaining contraction &lt;code&gt;(0, 1)&lt;/code&gt; is then completed.</source>
          <target state="translated">チェーンドットの例から始めることができます。この場合、パス &lt;code&gt;(1, 2)&lt;/code&gt; の最初の要素で表されるように、最初に &lt;code&gt;b&lt;/code&gt; および &lt;code&gt;c&lt;/code&gt; テンソルを縮小するのが最適です。結果のテンソルが収縮の最後に追加され、残りの収縮 &lt;code&gt;(0, 1)&lt;/code&gt; が完了します。</target>
        </trans-unit>
        <trans-unit id="c24b2dc7e2cf1c2ee15a3b856c501da4eb664f2c" translate="yes" xml:space="preserve">
          <source>We can convert to a numpy array using &lt;a href=&quot;../reference/generated/numpy.array#numpy.array&quot;&gt;&lt;code&gt;numpy.array&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../reference/generated/numpy.asarray#numpy.asarray&quot;&gt;&lt;code&gt;numpy.asarray&lt;/code&gt;&lt;/a&gt;, which will call its &lt;code&gt;__array__&lt;/code&gt; method to obtain a standard &lt;code&gt;numpy.ndarray&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../reference/generated/numpy.array#numpy.array&quot;&gt; &lt;code&gt;numpy.array&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../reference/generated/numpy.asarray#numpy.asarray&quot;&gt; &lt;code&gt;numpy.asarray&lt;/code&gt; &lt;/a&gt;を使用してnumpy配列に変換できます。これにより、 &lt;code&gt;__array__&lt;/code&gt; メソッドが呼び出され、標準の &lt;code&gt;numpy.ndarray&lt;/code&gt; が取得されます。</target>
        </trans-unit>
        <trans-unit id="679a2f0f20fc2e3fa05b5f20a0ca536c32a5eeaa" translate="yes" xml:space="preserve">
          <source>We can get a finer control on the conversion of missing values with the &lt;code&gt;filling_values&lt;/code&gt; optional argument. Like &lt;code&gt;missing_values&lt;/code&gt;, this argument accepts different kind of values:</source>
          <target state="translated">オプションの &lt;code&gt;filling_values&lt;/code&gt; 引数を使用して、欠落値の変換をより細かく制御できます。 &lt;code&gt;missing_values&lt;/code&gt; と同様に、この引数はさまざまな種類の値を受け入れます。</target>
        </trans-unit>
        <trans-unit id="66a6a3c1aa8ab5615ae93578f83c6c2bc137c427" translate="yes" xml:space="preserve">
          <source>We can now compute the mean of the dataset, without taking the invalid data into account:</source>
          <target state="translated">無効なデータを考慮に入れずに、データセットの平均を計算できるようになりました。</target>
        </trans-unit>
        <trans-unit id="52c82ab011abc5da0365af1d671286d5b3b09bbe" translate="yes" xml:space="preserve">
          <source>We can overwrite this default with the &lt;code&gt;defaultfmt&lt;/code&gt; argument, that takes any format string:</source>
          <target state="translated">このデフォルトは、任意のフォーマット文字列をとる &lt;code&gt;defaultfmt&lt;/code&gt; 引数で上書きできます。</target>
        </trans-unit>
        <trans-unit id="55ec8b33a4acc5b04909546d200237b6de3e0139" translate="yes" xml:space="preserve">
          <source>We can replace the data with this information and plot a new graph, focusing on Mainland China:</source>
          <target state="translated">この情報をもとにデータを置き換え、中国本土に焦点を当てた新しいグラフを描くことができます。</target>
        </trans-unit>
        <trans-unit id="07dfd0de116a4118d2e8d7ab1e0ba4c4055ce110" translate="yes" xml:space="preserve">
          <source>We can replace the maximum values with:</source>
          <target state="translated">最大値に置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="e6a512625d0cb7e17ddcfbaaf190c6f0c94959ed" translate="yes" xml:space="preserve">
          <source>We can reset the function to the default:</source>
          <target state="translated">機能をデフォルトに戻すことができます。</target>
        </trans-unit>
        <trans-unit id="b52b8758d686451191a4e1193e567d392d717d53" translate="yes" xml:space="preserve">
          <source>We can rewrite the line equation as &lt;code&gt;y = Ap&lt;/code&gt;, where &lt;code&gt;A = [[x 1]]&lt;/code&gt; and &lt;code&gt;p = [[m], [c]]&lt;/code&gt;. Now use &lt;a href=&quot;#numpy.linalg.lstsq&quot;&gt;&lt;code&gt;lstsq&lt;/code&gt;&lt;/a&gt; to solve for &lt;code&gt;p&lt;/code&gt;:</source>
          <target state="translated">行方程式を &lt;code&gt;y = Ap&lt;/code&gt; として書き換えます。ここで、 &lt;code&gt;A = [[x 1]]&lt;/code&gt; および &lt;code&gt;p = [[m], [c]]&lt;/code&gt; です。ここで&lt;a href=&quot;#numpy.linalg.lstsq&quot;&gt; &lt;code&gt;lstsq&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;p&lt;/code&gt; を解きます：</target>
        </trans-unit>
        <trans-unit id="dd1121cb835ca07af6856a6e1f4f9f9a02284739" translate="yes" xml:space="preserve">
          <source>We can see that this is a different kind of array. As mentioned in the introduction, it has three attributes (&lt;code&gt;data&lt;/code&gt;, &lt;code&gt;mask&lt;/code&gt; and &lt;code&gt;fill_value&lt;/code&gt;). Keep in mind that the &lt;code&gt;mask&lt;/code&gt; attribute has a &lt;code&gt;True&lt;/code&gt; value for elements corresponding to &lt;strong&gt;invalid&lt;/strong&gt; data (represented by two dashes in the &lt;code&gt;data&lt;/code&gt; attribute).</source>
          <target state="translated">これは別の種類の配列であることがわかります。はじめに述べたように、3つの属性（ &lt;code&gt;data&lt;/code&gt; 、 &lt;code&gt;mask&lt;/code&gt; 、 &lt;code&gt;fill_value&lt;/code&gt; ）があります。ことを忘れないでください &lt;code&gt;mask&lt;/code&gt; 属性を持つ &lt;code&gt;True&lt;/code&gt; に対応する要素の値が&lt;strong&gt;無効&lt;/strong&gt;（2つのダッシュで表されるデータ &lt;code&gt;data&lt;/code&gt; 属性を）。</target>
        </trans-unit>
        <trans-unit id="9280da38538a3f969f230f09cea0b4dbc319a8ef" translate="yes" xml:space="preserve">
          <source>We can see the image using the &lt;a href=&quot;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.imshow.html#matplotlib.pyplot.imshow&quot;&gt;&lt;code&gt;matplotlib.pyplot.imshow&lt;/code&gt;&lt;/a&gt; function:</source>
          <target state="translated">&lt;a href=&quot;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.imshow.html#matplotlib.pyplot.imshow&quot;&gt; &lt;code&gt;matplotlib.pyplot.imshow&lt;/code&gt; &lt;/a&gt;関数を使用して画像を表示できます。</target>
        </trans-unit>
        <trans-unit id="bcf794d24d8964269b87153ebb1affba96ff631d" translate="yes" xml:space="preserve">
          <source>We can sort either by using sort directly, or argsort and this function</source>
          <target state="translated">ソートを直接使用するか、argsort とこの関数を使用してソートすることができます。</target>
        </trans-unit>
        <trans-unit id="1a14ecae9fbda2061a0c2690a51d04695403160b" translate="yes" xml:space="preserve">
          <source>We can think of a &lt;a href=&quot;../reference/maskedarray.baseclass#numpy.ma.MaskedArray&quot;&gt;&lt;code&gt;MaskedArray&lt;/code&gt;&lt;/a&gt; as a combination of:</source>
          <target state="translated">&lt;a href=&quot;../reference/maskedarray.baseclass#numpy.ma.MaskedArray&quot;&gt; &lt;code&gt;MaskedArray&lt;/code&gt; &lt;/a&gt;は、次の組み合わせと考えることができます。</target>
        </trans-unit>
        <trans-unit id="c8b935f50d33884f474e4109b428a56eb6fe6366" translate="yes" xml:space="preserve">
          <source>We can use a different method other than the default to factorize cov: &amp;gt;&amp;gt;&amp;gt; y = rng.multivariate_normal(mean, cov, (3, 3), method=&amp;rsquo;cholesky&amp;rsquo;) &amp;gt;&amp;gt;&amp;gt; y.shape (3, 3, 2)</source>
          <target state="translated">デフォルト以外の別の方法を使用して、covを因数分解できます。&amp;gt;&amp;gt;&amp;gt; y = rng.multivariate_normal（mean、cov、（3、3）、method = 'cholesky'）&amp;gt;&amp;gt;&amp;gt; y.shape（3、3、 2）</target>
        </trans-unit>
        <trans-unit id="23502bd41157dbb482cc4d93fe154b6f35759b68" translate="yes" xml:space="preserve">
          <source>We can verify this, approximating the derivative with &lt;code&gt;(f(x + h) - f(x))/h&lt;/code&gt;:</source>
          <target state="translated">これを検証して、 &lt;code&gt;(f(x + h) - f(x))/h&lt;/code&gt; 導関数を近似します。</target>
        </trans-unit>
        <trans-unit id="1edbc1babc558648a370766b66d6bf09ff4d2327" translate="yes" xml:space="preserve">
          <source>We chose our default threshold because it is in wide use. Other thresholds are possible. For example, elsewhere in the 2007 edition of &lt;em&gt;Numerical recipes&lt;/em&gt; there is an alternative threshold of &lt;code&gt;S.max() *
np.finfo(M.dtype).eps / 2. * np.sqrt(m + n + 1.)&lt;/code&gt;. The authors describe this threshold as being based on &amp;ldquo;expected roundoff error&amp;rdquo; (p 71).</source>
          <target state="translated">広く使用されているため、デフォルトのしきい値を選択しました。他のしきい値が可能です。たとえば、&lt;em&gt;数値レシピの&lt;/em&gt; 2007年版の他の場所には、 &lt;code&gt;S.max() * np.finfo(M.dtype).eps / 2. * np.sqrt(m + n + 1.)&lt;/code&gt; 代替しきい値があります。* np.sqrt（m + n + 1.）。著者は、このしきい値を「予想される丸め誤差」（p 71）に基づいていると説明しています。</target>
        </trans-unit>
        <trans-unit id="81b92d4d0e0bfcb2ba46a1a8b9dd4a22e1691631" translate="yes" xml:space="preserve">
          <source>We could also have used the &lt;a href=&quot;../reference/generated/numpy.allclose#numpy.allclose&quot;&gt;&lt;code&gt;numpy.allclose&lt;/code&gt;&lt;/a&gt; function to make sure the reconstructed product is, in fact, &lt;em&gt;close&lt;/em&gt; to our original matrix (the difference between the two arrays is small):</source>
          <target state="translated">&lt;a href=&quot;../reference/generated/numpy.allclose#numpy.allclose&quot;&gt; &lt;code&gt;numpy.allclose&lt;/code&gt; &lt;/a&gt;関数を使用して、再構築された製品が実際に元の行列に&lt;em&gt;近い&lt;/em&gt;ことを確認することもできます（2つの配列の違いはわずかです）。</target>
        </trans-unit>
        <trans-unit id="d8ba993fff071da05f22748cefa6f6b8ad24e53b" translate="yes" xml:space="preserve">
          <source>We could have implemented:</source>
          <target state="translated">実装できたのに</target>
        </trans-unit>
        <trans-unit id="37a18e023d482a1a5f3f0844c696551b9f7ca294" translate="yes" xml:space="preserve">
          <source>We currently support Python 3.6-3.8 on Windows, OSX, and Linux</source>
          <target state="translated">現在、Windows、OSX、LinuxでPython 3.6-3.8をサポートしています。</target>
        </trans-unit>
        <trans-unit id="07a1c0a83c857f695d91b773fe8da038b7dff7fd" translate="yes" xml:space="preserve">
          <source>We currently use &lt;a href=&quot;http://www.sphinx-doc.org/&quot;&gt;Sphinx&lt;/a&gt; for generating the API and reference documentation for NumPy. You will need Sphinx &amp;gt;= 2.2.0.</source>
          <target state="translated">現在、NumPyのAPIとリファレンスドキュメントを生成するために&lt;a href=&quot;http://www.sphinx-doc.org/&quot;&gt;Sphinx&lt;/a&gt;を使用しています。Sphinx&amp;gt; = 2.2.0が必要になります。</target>
        </trans-unit>
        <trans-unit id="3e8150976e1be876e23fe9902955320291d1f04b" translate="yes" xml:space="preserve">
          <source>We currently use &lt;a href=&quot;https://www.sphinx-doc.org/&quot;&gt;Sphinx&lt;/a&gt; for generating the API and reference documentation for NumPy. You will need Sphinx &amp;gt;= 2.2.0.</source>
          <target state="translated">現在、NumPyのAPIとリファレンスドキュメントを生成するために&lt;a href=&quot;https://www.sphinx-doc.org/&quot;&gt;Sphinx&lt;/a&gt;を使用しています。Sphinx&amp;gt; = 2.2.0が必要になります。</target>
        </trans-unit>
        <trans-unit id="59bec2d1c76c534a2fc4afd9318e87ce91e937b9" translate="yes" xml:space="preserve">
          <source>We default to using a 128-bit integer using entropy gathered from the OS. This is a good amount of entropy to initialize all of the generators that we have in numpy. We do not recommend using small seeds below 32 bits for general use. Using just a small set of seeds to instantiate larger state spaces means that there are some initial states that are impossible to reach. This creates some biases if everyone uses such values.</source>
          <target state="translated">デフォルトでは、OSから集めたエントロピーを使って128ビットの整数を使用しています。これは、numpyにあるすべてのジェネレータを初期化するのに十分なエントロピー量です。一般的な使用のために32ビット以下の小さなシードを使うことはお勧めしません。より大きな状態空間をインスタンス化するために小さなシードのセットを使うということは、到達できない初期状態が存在することを意味します。これは、すべての人がそのような値を使うと、いくつかのバイアスが発生します。</target>
        </trans-unit>
        <trans-unit id="5796ea3e43e927c951158cf75a113735a9be5c88" translate="yes" xml:space="preserve">
          <source>We distinguish both tutorials and how-tos from &lt;code&gt;Explanations&lt;/code&gt;, which are deep dives intended to give understanding rather than immediate assistance, and &lt;code&gt;References&lt;/code&gt;, which give complete, autoritative data on some concrete part of NumPy (like its API) but aren&amp;rsquo;t obligated to paint a broader picture.</source>
          <target state="translated">チュートリアルとハウツーの両方を、即時の支援ではなく理解を提供することを目的とした詳細な &lt;code&gt;Explanations&lt;/code&gt; 、NumPyの特定の部分（APIなど）に関する完全な自動データを提供するが義務付けられていない &lt;code&gt;References&lt;/code&gt; とは区別します。より広い絵を描く。</target>
        </trans-unit>
        <trans-unit id="dc787d0b25c896acc068b7c607665544c0350ae5" translate="yes" xml:space="preserve">
          <source>We do as follows:</source>
          <target state="translated">以下のようにしています。</target>
        </trans-unit>
        <trans-unit id="6c39690106b67e736bf72e53ea7082db75a8ca14" translate="yes" xml:space="preserve">
          <source>We expect the arccos of 1 to be 0, and of -1 to be pi:</source>
          <target state="translated">1のアルコは0、-1のアルコはπと予想します。</target>
        </trans-unit>
        <trans-unit id="44f2a9cfd92075d83d3f564752917c6115d7836b" translate="yes" xml:space="preserve">
          <source>We expect the arctan of 0 to be 0, and of 1 to be pi/4:</source>
          <target state="translated">0のアルクタンを0、1のアルクタンをπ/4と予想しています。</target>
        </trans-unit>
        <trans-unit id="b30e48f7bd5611b7e5063995e5e3d8d0377a6a59" translate="yes" xml:space="preserve">
          <source>We finally give an example of a full ufunc, with inner loops for half-floats, floats, doubles, and long doubles. As in the previous sections we first give the .c file and then the corresponding setup.py file.</source>
          <target state="translated">最後に、ハーフフロート、フロート、ダブルス、ロングダブルスの内部ループを持つ完全な ufunc の例を示します。前のセクションと同様に、最初に.cファイルとそれに対応するsetup.pyファイルを提供します。</target>
        </trans-unit>
        <trans-unit id="60136b35f0997a97a43dcb76040b0f18f3536c81" translate="yes" xml:space="preserve">
          <source>We have 10 degrees of freedom, so is the sample mean within 95% of the recommended value?</source>
          <target state="translated">10自由度があるので、標本平均は推奨値の95%以内に収まっていますか?</target>
        </trans-unit>
        <trans-unit id="84db14adfcdaf5f72b2db96fd86ac625f5af0ee6" translate="yes" xml:space="preserve">
          <source>We have authoritative answers.</source>
          <target state="translated">私たちは、権威ある答えを持っています。</target>
        </trans-unit>
        <trans-unit id="e5235dd026426cf863204463534241d25f8524b9" translate="yes" xml:space="preserve">
          <source>We intend to re-implement numpy functions as (generalized) Ufunc, in which case it will become possible for them to be overridden by the &lt;code&gt;__array_ufunc__&lt;/code&gt; method. A prime candidate is &lt;a href=&quot;generated/numpy.matmul#numpy.matmul&quot;&gt;&lt;code&gt;matmul&lt;/code&gt;&lt;/a&gt;, which currently is not a Ufunc, but could be relatively easily be rewritten as a (set of) generalized Ufuncs. The same may happen with functions such as &lt;a href=&quot;generated/numpy.median#numpy.median&quot;&gt;&lt;code&gt;median&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.amin#numpy.amin&quot;&gt;&lt;code&gt;amin&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;generated/numpy.argsort#numpy.argsort&quot;&gt;&lt;code&gt;argsort&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">numpy関数を（一般化された）Ufuncとして再実装する予定です。その場合、 &lt;code&gt;__array_ufunc__&lt;/code&gt; メソッドでオーバーライドできるようになります。主要な候補は&lt;a href=&quot;generated/numpy.matmul#numpy.matmul&quot;&gt; &lt;code&gt;matmul&lt;/code&gt; で&lt;/a&gt;、これは現在Ufuncではありませんが、一般化されたUfunc（のセット）として比較的簡単に書き直すことができます。同じことが、&lt;a href=&quot;generated/numpy.median#numpy.median&quot;&gt; &lt;code&gt;median&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.amin#numpy.amin&quot;&gt; &lt;code&gt;amin&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.argsort#numpy.argsort&quot;&gt; &lt;code&gt;argsort&lt;/code&gt; &lt;/a&gt;などの関数でも発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="3e23f0ad561893af23edd41efd72f4bd368c5b95" translate="yes" xml:space="preserve">
          <source>We intend to re-implement numpy functions as (generalized) Ufunc, in which case it will become possible for them to be overridden by the &lt;code&gt;__array_ufunc__&lt;/code&gt; method. A prime candidate is &lt;a href=&quot;generated/numpy.matmul#numpy.matmul&quot;&gt;&lt;code&gt;matmul&lt;/code&gt;&lt;/a&gt;, which currently is not a Ufunc, but could be relatively easily be rewritten as a (set of) generalized Ufuncs. The same may happen with functions such as &lt;a href=&quot;generated/numpy.median#numpy.median&quot;&gt;&lt;code&gt;median&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;min&lt;/code&gt;, and &lt;a href=&quot;generated/numpy.argsort#numpy.argsort&quot;&gt;&lt;code&gt;argsort&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">numpy関数を（一般化された）Ufuncとして再実装する予定です。その場合、それらは &lt;code&gt;__array_ufunc__&lt;/code&gt; メソッドでオーバーライドできるようになります。主要な候補は&lt;a href=&quot;generated/numpy.matmul#numpy.matmul&quot;&gt; &lt;code&gt;matmul&lt;/code&gt; です&lt;/a&gt;。これは現在Ufuncではありませんが、比較的簡単に一般化されたUfunc（のセット）として書き直すことができます。&lt;a href=&quot;generated/numpy.median#numpy.median&quot;&gt; &lt;code&gt;median&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;min&lt;/code&gt; 、&lt;a href=&quot;generated/numpy.argsort#numpy.argsort&quot;&gt; &lt;code&gt;argsort&lt;/code&gt; &lt;/a&gt;などの関数でも同じことが起こります。</target>
        </trans-unit>
        <trans-unit id="1293e5317149027712d90c363de09ae292d438a7" translate="yes" xml:space="preserve">
          <source>We know how to recognize missing data, but we still need to provide a value for these missing entries. By default, this value is determined from the expected dtype according to this table:</source>
          <target state="translated">欠落データを認識する方法は分かっていますが、これらの欠落エントリに対して値を提供する必要があります。デフォルトでは、この値はこの表に従って期待されるdtypeから決定されます。</target>
        </trans-unit>
        <trans-unit id="6f8e06849ef9bab23d7db3a10be02e06887dd75e" translate="yes" xml:space="preserve">
          <source>We know that it is painfully common for internet communication to start at or devolve into obvious and flagrant abuse. We also recognize that sometimes people may have a bad day, or be unaware of some of the guidelines in this Code of Conduct. Please keep this in mind when deciding on how to respond to a breach of this Code.</source>
          <target state="translated">私たちは、インターネット上でのコミュニケーションが、最初から始まったり、明らかな悪意のある悪用に発展したりすることが、痛いほどよくあることを知っています。また、時には、人によっては気分が悪くなったり、この行動規範のガイドラインのいくつかを知らなかったりすることもあることを認識しています。この行動規範に違反した場合にどのように対応するかを決める際には、この点を念頭に置いてください。</target>
        </trans-unit>
        <trans-unit id="c3d95188759c6e8c19362be20ce93f51fbaea853" translate="yes" xml:space="preserve">
          <source>We know that it is painfully common for internet communication to start at or devolve into obvious and flagrant abuse. We will deal quickly with clear and severe breaches like personal threats, violent, sexist or racist language.</source>
          <target state="translated">インターネット上でのコミュニケーションは、最初から始まったり、明らかな悪用に発展したりすることが痛いほどよくあることを私たちは知っています。私たちは、個人的な脅迫、暴力的、性差別的、人種差別的な言葉など、明確で深刻な違反行為に迅速に対処します。</target>
        </trans-unit>
        <trans-unit id="f7544e988af826e0fbccd6c4b63e19df859cd38a" translate="yes" xml:space="preserve">
          <source>We make something where they don&amp;rsquo;t match:</source>
          <target state="translated">一致しないものを作成します。</target>
        </trans-unit>
        <trans-unit id="781a6efc97caaf1a36d25f937ebe769fa9a9b591" translate="yes" xml:space="preserve">
          <source>We may also want to keep track of the occurrence of missing data by constructing a boolean mask, with &lt;code&gt;True&lt;/code&gt; entries where data was missing and &lt;code&gt;False&lt;/code&gt; otherwise. To do that, we just have to set the optional argument &lt;code&gt;usemask&lt;/code&gt; to &lt;code&gt;True&lt;/code&gt; (the default is &lt;code&gt;False&lt;/code&gt;). The output array will then be a &lt;a href=&quot;../reference/maskedarray.baseclass#numpy.ma.MaskedArray&quot;&gt;&lt;code&gt;MaskedArray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">また、ブールマスクを作成して、データが欠落している場合は &lt;code&gt;True&lt;/code&gt; エントリ、それ以外の場合は &lt;code&gt;False&lt;/code&gt; を使用して、欠落データの発生を追跡することもできます。これを行うには、オプションの引数 &lt;code&gt;usemask&lt;/code&gt; を &lt;code&gt;True&lt;/code&gt; に設定する必要があります（デフォルトは &lt;code&gt;False&lt;/code&gt; です）。その場合、出力配列は&lt;a href=&quot;../reference/maskedarray.baseclass#numpy.ma.MaskedArray&quot;&gt; &lt;code&gt;MaskedArray&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d343b0827c2326d2e2dfa15e06ce5fa3d4c2f432" translate="yes" xml:space="preserve">
          <source>We may sometimes need to define the column names from the data itself. In that case, we must use the &lt;code&gt;names&lt;/code&gt; keyword with a value of &lt;code&gt;True&lt;/code&gt;. The names will then be read from the first line (after the &lt;code&gt;skip_header&lt;/code&gt; ones), even if the line is commented out:</source>
          <target state="translated">データ自体から列名を定義する必要がある場合があります。その場合、 &lt;code&gt;True&lt;/code&gt; の値で &lt;code&gt;names&lt;/code&gt; キーワードを使用する必要があります。その行がコメントアウトされている場合でも、名前は最初の行（ &lt;code&gt;skip_header&lt;/code&gt; の行の後）から読み取られます。</target>
        </trans-unit>
        <trans-unit id="a4d639f7ac01ada7c421e46e5c0c6852fa788e6e" translate="yes" xml:space="preserve">
          <source>We might want to use an &lt;code&gt;ndarray&lt;/code&gt; to access these integers. In that case, we can create an array around this memory, and tell numpy that there are two integers, and that they are 16 bit and big-endian:</source>
          <target state="translated">これらの整数にアクセスするには、 &lt;code&gt;ndarray&lt;/code&gt; を使用することをお勧めします。その場合、このメモリの周りに配列を作成し、numpyに2つの整数があり、それらが16ビットでビッグエンディアンであることを伝えることができます。</target>
        </trans-unit>
        <trans-unit id="072334154bb34d89af6df6dd9ad4c673bc66d42c" translate="yes" xml:space="preserve">
          <source>We mostly follow the standard Python style conventions as described here:</source>
          <target state="translated">ここで説明されているように、ほとんどの場合、標準的な Python のスタイルの規約に従っています。</target>
        </trans-unit>
        <trans-unit id="b81decf25be5fe15c427b84c45168043bb0f3933" translate="yes" xml:space="preserve">
          <source>We need to keep in mind that &lt;code&gt;defaultfmt&lt;/code&gt; is used only if some names are expected but not defined.</source>
          <target state="translated">&lt;code&gt;defaultfmt&lt;/code&gt; は、一部の名前が予期されているが定義されていない場合にのみ使用されることに注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="380361f0524609518a908c9433a3d7c3dd0b0e84" translate="yes" xml:space="preserve">
          <source>We need to keep in mind that by default, &lt;code&gt;dtype=float&lt;/code&gt;. A float is therefore expected for the second column. However, the strings &lt;code&gt;' 2.3%'&lt;/code&gt; and &lt;code&gt;' 78.9%'&lt;/code&gt; cannot be converted to float and we end up having &lt;code&gt;np.nan&lt;/code&gt; instead. Let&amp;rsquo;s now use a converter:</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;dtype=float&lt;/code&gt; であることに注意する必要があります。したがって、2番目の列にはフロートが予想されます。ただし、文字列 &lt;code&gt;' 2.3%'&lt;/code&gt; および &lt;code&gt;' 78.9%'&lt;/code&gt; はfloatに変換できず、代わりに &lt;code&gt;np.nan&lt;/code&gt; になります。コンバーターを使用してみましょう：</target>
        </trans-unit>
        <trans-unit id="b3cf3455d01dd7db3c5c070359dd30cf5e39de43" translate="yes" xml:space="preserve">
          <source>We need to stress that this behavior may not be systematic, that masked data may be affected by the operation in some cases and therefore users should not rely on this data remaining unchanged.</source>
          <target state="translated">この動作は系統的ではない可能性があること、マスクされたデータは場合によっては操作の影響を受ける可能性があること、したがって、ユーザーはこのデータが変化せずに残っていることに頼るべきではないことを強調する必要があります。</target>
        </trans-unit>
        <trans-unit id="70c4b47019e4c41b3daf6bed7ca28bdcaf2fd573" translate="yes" xml:space="preserve">
          <source>We only give the C code as the setup.py file is exactly the same as the setup.py file in &lt;a href=&quot;#example-numpy-ufunc-for-one-dtype&quot;&gt;Example NumPy ufunc for one dtype&lt;/a&gt;, except that the line</source>
          <target state="translated">setup.pyファイルが正確でsetup.pyファイルと同じであると我々は唯一のCコードを与える&lt;a href=&quot;#example-numpy-ufunc-for-one-dtype&quot;&gt;1 DTYPEための例numpyのufunc&lt;/a&gt;ラインことを除いて、</target>
        </trans-unit>
        <trans-unit id="58ff07099c06b392c411860c04ae360c63b97582" translate="yes" xml:space="preserve">
          <source>We only show a few blocks for clarity:</source>
          <target state="translated">わかりやすくするために、いくつかのブロックだけを表示しています。</target>
        </trans-unit>
        <trans-unit id="3d2e197c5a535b7925bbc101233e0083e1245480" translate="yes" xml:space="preserve">
          <source>We pluralize &lt;em&gt;index&lt;/em&gt; as &lt;em&gt;indices&lt;/em&gt; rather than &lt;a href=&quot;https://developers.google.com/style/word-list#letter-i&quot;&gt;indexes&lt;/a&gt;, following the precedent of &lt;a href=&quot;../reference/generated/numpy.indices#numpy.indices&quot;&gt;&lt;code&gt;numpy.indices&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">私たちは、複数形&lt;em&gt;インデックスを&lt;/em&gt;として&lt;em&gt;指標&lt;/em&gt;ではなく、&lt;a href=&quot;https://developers.google.com/style/word-list#letter-i&quot;&gt;インデックス&lt;/a&gt;の先例以下、&lt;a href=&quot;../reference/generated/numpy.indices#numpy.indices&quot;&gt; &lt;code&gt;numpy.indices&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="304f3c954bda4d21c5240e032a79df191a1f957e" translate="yes" xml:space="preserve">
          <source>We prefer not to use the Google style</source>
          <target state="translated">私たちは、Googleスタイルを使用しないようにしています。</target>
        </trans-unit>
        <trans-unit id="673c3f49f8ee0b4069fb17ea81837a33f48d70f3" translate="yes" xml:space="preserve">
          <source>We recommend using &lt;a href=&quot;numpy.isin#numpy.isin&quot;&gt;&lt;code&gt;isin&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;#numpy.in1d&quot;&gt;&lt;code&gt;in1d&lt;/code&gt;&lt;/a&gt; for new code.</source>
          <target state="translated">新しいコードには、&lt;a href=&quot;#numpy.in1d&quot;&gt; &lt;code&gt;in1d&lt;/code&gt; &lt;/a&gt;ではなく&lt;a href=&quot;numpy.isin#numpy.isin&quot;&gt; &lt;code&gt;isin&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="cf93137d5dc17f96b6bf02cdfd69394699568873" translate="yes" xml:space="preserve">
          <source>We recommend using dtype objects instead.</source>
          <target state="translated">代わりにdtypeオブジェクトを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="7ca33c6b93a76db017c3cdc61675ace9bc2b416c" translate="yes" xml:space="preserve">
          <source>We recommend using the &lt;code&gt;.npy&lt;/code&gt; and &lt;code&gt;.npz&lt;/code&gt; extensions for files saved in this format. This is by no means a requirement; applications may wish to use these file formats but use an extension specific to the application. In the absence of an obvious alternative, however, we suggest using &lt;code&gt;.npy&lt;/code&gt; and &lt;code&gt;.npz&lt;/code&gt;.</source>
          <target state="translated">この形式で保存されたファイルには、拡張子 &lt;code&gt;.npy&lt;/code&gt; および &lt;code&gt;.npz&lt;/code&gt; を使用することをお勧めします。これは決して要件ではありません。アプリケーションはこれらのファイル形式を使用したい場合がありますが、アプリケーションに固有の拡張子を使用します。ただし、明確な代替手段がない場合は、 &lt;code&gt;.npy&lt;/code&gt; および &lt;code&gt;.npz&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="e258b740225a3be0218640f279a2c21d7ffb3dc3" translate="yes" xml:space="preserve">
          <source>We review pull requests as soon as we can, typically within a week. If you get no review comments within two weeks, feel free to ask for feedback by adding a comment on your PR (this will notify maintainers).</source>
          <target state="translated">プルリクエストはできる限り早く、通常は1週間以内にレビューします。2週間経ってもレビューコメントがない場合は、PRにコメントを追加してフィードバックを求めてください(これによりメンテナに通知されます)。</target>
        </trans-unit>
        <trans-unit id="2d2b661adfc63aa8859c127667d479a970f43ef4" translate="yes" xml:space="preserve">
          <source>We run a ufunc on an instance of our new array:</source>
          <target state="translated">新しい配列のインスタンスに対して ufunc を実行します。</target>
        </trans-unit>
        <trans-unit id="cba0887597362639bee54fad4d580fb5a05cde4d" translate="yes" xml:space="preserve">
          <source>We set the printing precision so the example can be auto-tested:</source>
          <target state="translated">印刷精度を設定することで、サンプルを自動テストできるようにしました。</target>
        </trans-unit>
        <trans-unit id="44aaad76397b012d2d13a57d62118fcba214a475" translate="yes" xml:space="preserve">
          <source>We strive to:</source>
          <target state="translated">努力しています。</target>
        </trans-unit>
        <trans-unit id="33c0514953dd33becf83ed3bc37cb8f06826d505" translate="yes" xml:space="preserve">
          <source>We then define a new test case class for each supported data type with a short definition such as:</source>
          <target state="translated">次に、サポートされているデータ型ごとに新しいテストケースクラスを定義します。</target>
        </trans-unit>
        <trans-unit id="0935f73910a1bfd402810a3c2528dcf47c85a9da" translate="yes" xml:space="preserve">
          <source>We understand that email is a difficult medium and can be isolating. Receiving criticism over email, without personal contact, can be particularly painful. This makes it especially important to keep an atmosphere of open-minded respect of the views of others. It also means that we must be transparent in our actions, and that we will do everything in our power to make sure that all our members are treated fairly and with sympathy.</source>
          <target state="translated">電子メールは難しい媒体であり、孤立してしまうことがあることを理解しています。個人的な接触なしに電子メールで批判を受けることは、特に苦痛を伴うことがあります。そのため、他者の意見を尊重し、心を開いた雰囲気を保つことが特に重要です。また、私たちは自分たちの行動を透明にしなければならず、すべてのメンバーが公平に、そして同情の念を持って扱われるように、私たちができる限りのことをするということです。</target>
        </trans-unit>
        <trans-unit id="ad180c1380373588b422b6f9367e1dfa995335a7" translate="yes" xml:space="preserve">
          <source>We use the algorithm published by Clenshaw &lt;a href=&quot;#rfd38a370b188-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; and referenced by Abramowitz and Stegun &lt;a href=&quot;#rfd38a370b188-2&quot; id=&quot;id2&quot;&gt;[2]&lt;/a&gt;, for which the function domain is partitioned into the two intervals [0,8] and (8,inf), and Chebyshev polynomial expansions are employed in each interval. Relative error on the domain [0,30] using IEEE arithmetic is documented &lt;a href=&quot;#rfd38a370b188-3&quot; id=&quot;id3&quot;&gt;[3]&lt;/a&gt; as having a peak of 5.8e-16 with an rms of 1.4e-16 (n = 30000).</source>
          <target state="translated">Clenshaw &lt;a href=&quot;#rfd38a370b188-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;によって公開され、AbramowitzとStegun &lt;a href=&quot;#rfd38a370b188-2&quot; id=&quot;id2&quot;&gt;[2]&lt;/a&gt;によって参照されるアルゴリズムを使用します。関数ドメインは、2つの区間[0,8]と（8、inf）に分割され、チェビシェフ多項式展開では、各間隔。IEEE演算を使用したドメイン[0,30]の相対誤差は、RMSが1.4e-16（n = 30000）でピークが5.8e-16であると文書化&lt;a href=&quot;#rfd38a370b188-3&quot; id=&quot;id3&quot;&gt;[3]さ&lt;/a&gt;れています。</target>
        </trans-unit>
        <trans-unit id="9d53c78c1f4b5630c6b07b51b68a31292300c983" translate="yes" xml:space="preserve">
          <source>We use the same Fortran 77 code as in previous example but now we&amp;rsquo;ll pretend that F2PY was not able to guess the signatures of call-back arguments correctly. First, we create an initial signature file &lt;code&gt;callback2.pyf&lt;/code&gt; using F2PY:</source>
          <target state="translated">前の例と同じFortran77コードを使用しますが、F2PYがコールバック引数の署名を正しく推測できなかったと仮定します。まず、F2PYを使用して初期署名ファイル &lt;code&gt;callback2.pyf&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="a0523fb6c3b4aea424494446d21b54e60300c1ae" translate="yes" xml:space="preserve">
          <source>We wait until this point to push the tag because it is public and should not be changed after it has been pushed.</source>
          <target state="translated">タグは公開されているので、プッシュした後に変更してはいけないので、ここまで待ってからプッシュします。</target>
        </trans-unit>
        <trans-unit id="97648b7bd3927ac1d2723b1e8ddc4d732f8e55fd" translate="yes" xml:space="preserve">
          <source>We welcome being &lt;a href=&quot;https://github.com/numpy/numpy/issues&quot;&gt;alerted&lt;/a&gt; to cases we should add to the NumPy style rules.</source>
          <target state="translated">NumPyスタイルのルールに追加する必要があるケースについて&lt;a href=&quot;https://github.com/numpy/numpy/issues&quot;&gt;警告&lt;/a&gt;を受けることを歓迎します。</target>
        </trans-unit>
        <trans-unit id="c9afbb264decb0b7e5bd769fa476b27d49621056" translate="yes" xml:space="preserve">
          <source>We will deal with the domain and window when we get to fitting, for the moment we ignore them and run through the basic algebraic and arithmetic operations.</source>
          <target state="translated">領域と窓については、フィッティングに入ってから扱いますが、当面はそれらを無視して、基本的な代数演算と算術演算を実行します。</target>
        </trans-unit>
        <trans-unit id="4c1bac40e83eb84eced242b32b6de4090c9d63d5" translate="yes" xml:space="preserve">
          <source>We will investigate and respond to all complaints. The NumPy Code of Conduct Committee and the NumPy Steering Committee (if involved) will protect the identity of the reporter, and treat the content of complaints as confidential (unless the reporter agrees otherwise).</source>
          <target state="translated">すべての苦情について調査し、対応します。NumPy行動規範委員会およびNumPy運営委員会(関与している場合)は、報告者の身元を保護し、苦情の内容を秘密として扱います(報告者の同意がない限り)。</target>
        </trans-unit>
        <trans-unit id="a83f39578a9a665e3a205bff08ec0d259c697975" translate="yes" xml:space="preserve">
          <source>We will use NumPy&amp;rsquo;s linear algebra module, &lt;a href=&quot;../reference/routines.linalg#module-numpy.linalg&quot;&gt;&lt;code&gt;numpy.linalg&lt;/code&gt;&lt;/a&gt;, to perform the operations in this tutorial. Most of the linear algebra functions in this module can also be found in &lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/linalg.html#module-scipy.linalg&quot;&gt;&lt;code&gt;scipy.linalg&lt;/code&gt;&lt;/a&gt;, and users are encouraged to use the &lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/index.html#module-scipy&quot;&gt;&lt;code&gt;scipy&lt;/code&gt;&lt;/a&gt; module for real-world applications. However, it is currently not possible to apply linear algebra operations to n-dimensional arrays using the &lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/linalg.html#module-scipy.linalg&quot;&gt;&lt;code&gt;scipy.linalg&lt;/code&gt;&lt;/a&gt; module. For more information on this, check the &lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/tutorial/linalg.html&quot;&gt;scipy.linalg Reference&lt;/a&gt;.</source>
          <target state="translated">このチュートリアルの操作を実行するには、NumPyの線形代数モジュール&lt;a href=&quot;../reference/routines.linalg#module-numpy.linalg&quot;&gt; &lt;code&gt;numpy.linalg&lt;/code&gt; &lt;/a&gt;を使用します。このモジュールのほとんどの線形代数関数は&lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/linalg.html#module-scipy.linalg&quot;&gt; &lt;code&gt;scipy.linalg&lt;/code&gt; &lt;/a&gt;にもあり、ユーザーは実際のアプリケーションに&lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/index.html#module-scipy&quot;&gt; &lt;code&gt;scipy&lt;/code&gt; &lt;/a&gt;モジュールを使用することをお勧めします。ただし、現在、&lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/linalg.html#module-scipy.linalg&quot;&gt; &lt;code&gt;scipy.linalg&lt;/code&gt; &lt;/a&gt;モジュールを使用して線形代数演算をn次元配列に適用することはできません。これについての詳細は、&lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/tutorial/linalg.html&quot;&gt;scipy.linalgリファレンスを&lt;/a&gt;確認してください。</target>
        </trans-unit>
        <trans-unit id="82a72786c4fe5d6bfb5f753a25b0cbc3ef629d6d" translate="yes" xml:space="preserve">
          <source>We wish to mark the fourth entry as invalid. The easiest is to create a masked array:</source>
          <target state="translated">4 番目のエントリを無効なものとしてマークしたいと思います。最も簡単なのは、マスクされた配列を作成することです。</target>
        </trans-unit>
        <trans-unit id="2678a6cb2f01328bc5e5792424e05e77b5265e7c" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll do a simple outer product, placing the dimensions of the first operand before the dimensions of the second operand. The &lt;code&gt;op_axes&lt;/code&gt; parameter needs one list of axes for each operand, and provides a mapping from the iterator&amp;rsquo;s axes to the axes of the operand.</source>
          <target state="translated">最初のオペランドの次元を2番目のオペランドの次元の前に配置して、単純な外積を行います。 &lt;code&gt;op_axes&lt;/code&gt; のパラメータは、各オペランドのための軸の1つのリストを必要とし、オペランドの軸にイテレータの軸からのマッピングを提供します。</target>
        </trans-unit>
        <trans-unit id="ced2186a63444cfbd458cebaed4de6214b500394" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ll show how this works by creating a function &lt;a href=&quot;generated/numpy.square#numpy.square&quot;&gt;&lt;code&gt;square&lt;/code&gt;&lt;/a&gt; which squares its input. Let&amp;rsquo;s start with a minimal function definition excluding &amp;lsquo;out&amp;rsquo; parameter support.</source>
          <target state="translated">入力を二乗する関数&lt;a href=&quot;generated/numpy.square#numpy.square&quot;&gt; &lt;code&gt;square&lt;/code&gt; &lt;/a&gt;を作成することにより、これがどのように機能するかを示します。「out」パラメーターのサポートを除いた最小限の関数定義から始めましょう。</target>
        </trans-unit>
        <trans-unit id="844ec2b5d0ad65b6ef4bf0acb9f400aab9e00804" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;re eager to hear about and fix doc defects. But to attack the biggest problems we end up having to defer or overlook some bug reports. Here are the best defects to go after.</source>
          <target state="translated">ドキュメントの欠陥について聞き、修正したいと思っています。しかし、最大の問題を攻撃するには、いくつかのバグレポートを延期または見落とさなければならないことになります。これが後を追うべき最良の欠陥です。</target>
        </trans-unit>
        <trans-unit id="0d014927573cadb3b0b374c9809c25adaa8d709f" translate="yes" xml:space="preserve">
          <source>We&amp;rsquo;ve seen that 13 is represented by &lt;code&gt;00001101&lt;/code&gt;. The invert or bit-wise NOT of 13 is then:</source>
          <target state="translated">13は &lt;code&gt;00001101&lt;/code&gt; で表されることがわかりました。13の反転またはビット単位のNOTは次のようになります。</target>
        </trans-unit>
        <trans-unit id="08e02d58d5e7e09402e352c84d20a516011f20f4" translate="yes" xml:space="preserve">
          <source>Website design and development</source>
          <target state="translated">ウェブサイトのデザインと開発</target>
        </trans-unit>
        <trans-unit id="9f5117721c82b02552e432ea3720cde40d7059ad" translate="yes" xml:space="preserve">
          <source>Weight function of the Hermite polynomials.</source>
          <target state="translated">エルミート多項式の重み関数。</target>
        </trans-unit>
        <trans-unit id="95800a204e1bbd4903f4870d8343853257206077" translate="yes" xml:space="preserve">
          <source>Weight function of the Hermite_e polynomials.</source>
          <target state="translated">Hermite_e多項式の重み関数。</target>
        </trans-unit>
        <trans-unit id="5f860b19432a865263496fdce430b1e33571bfe5" translate="yes" xml:space="preserve">
          <source>Weight function of the Laguerre polynomials.</source>
          <target state="translated">ラゲール多項式の重み関数。</target>
        </trans-unit>
        <trans-unit id="79be08f88c623301ce3bc873b7c9affda9625a90" translate="yes" xml:space="preserve">
          <source>Weight function of the Legendre polynomials.</source>
          <target state="translated">レジェンドレ多項式の重み関数。</target>
        </trans-unit>
        <trans-unit id="c74e4e7c5caf95682fb65872b5814741f06c7fac" translate="yes" xml:space="preserve">
          <source>Weighted average</source>
          <target state="translated">加重平均</target>
        </trans-unit>
        <trans-unit id="d8f6b85e664320ad22c47352d13059c9a94e57ff" translate="yes" xml:space="preserve">
          <source>Weighted average.</source>
          <target state="translated">加重平均。</target>
        </trans-unit>
        <trans-unit id="50616113e0953b16858a840423f52798108ba636" translate="yes" xml:space="preserve">
          <source>Weights to apply to the y-coordinates of the sample points. For gaussian uncertainties, use 1/sigma (not 1/sigma**2).</source>
          <target state="translated">サンプル点のy座標に適用される重み.ガウシアン不確かさの場合は,1/sigma(1/sigma**2ではなく)を使用する.</target>
        </trans-unit>
        <trans-unit id="5a7070233023bbad210855f921220f6a37969ec7" translate="yes" xml:space="preserve">
          <source>Weights, array of the same shape as &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">重み、 &lt;code&gt;x&lt;/code&gt; と同じ形状の配列。</target>
        </trans-unit>
        <trans-unit id="946476c654c11a5e92f8b55850bb98a1263ad96b" translate="yes" xml:space="preserve">
          <source>Weights. If not None the contribution of each point &lt;code&gt;(x[i],y[i])&lt;/code&gt; to the fit is weighted by &lt;code&gt;w[i]&lt;/code&gt;. Ideally the weights are chosen so that the errors of the products &lt;code&gt;w[i]*y[i]&lt;/code&gt; all have the same variance. The default value is None.</source>
          <target state="translated">重み。Noneでない場合、フィットへの各ポイント &lt;code&gt;(x[i],y[i])&lt;/code&gt; の寄与は &lt;code&gt;w[i]&lt;/code&gt; によって重み付けされます。理想的には、積 &lt;code&gt;w[i]*y[i]&lt;/code&gt; の誤差がすべて同じ分散になるように重みが選択されます。デフォルト値はNoneです。</target>
        </trans-unit>
        <trans-unit id="1c25ee55e973a0ac3876804d2f28cc0929f53254" translate="yes" xml:space="preserve">
          <source>Weights. If not None, the contribution of each point &lt;code&gt;(x[i],y[i])&lt;/code&gt; to the fit is weighted by &lt;code&gt;w[i]&lt;/code&gt;. Ideally the weights are chosen so that the errors of the products &lt;code&gt;w[i]*y[i]&lt;/code&gt; all have the same variance. The default value is None.</source>
          <target state="translated">重み。Noneでない場合、フィットに対する各ポイント &lt;code&gt;(x[i],y[i])&lt;/code&gt; の寄与は &lt;code&gt;w[i]&lt;/code&gt; によって重み付けされます。理想的には、積 &lt;code&gt;w[i]*y[i]&lt;/code&gt; の誤差がすべて同じ分散になるように重みが選択されます。デフォルト値はNoneです。</target>
        </trans-unit>
        <trans-unit id="890907bf4b6e9a3c2721945116f4521c292ba997" translate="yes" xml:space="preserve">
          <source>Weisstein, Eric W. &amp;ldquo;Binomial Distribution.&amp;rdquo; From MathWorld&amp;ndash;A Wolfram Web Resource. &lt;a href=&quot;http://mathworld.wolfram.com/BinomialDistribution.html&quot;&gt;http://mathworld.wolfram.com/BinomialDistribution.html&lt;/a&gt;</source>
          <target state="translated">Weisstein、Eric W.「Binomial Distribution」。MathWorldから&amp;ndash; Wolfram Webリソース。&lt;a href=&quot;http://mathworld.wolfram.com/BinomialDistribution.html&quot;&gt;http://mathworld.wolfram.com/BinomialDistribution.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="44532eacfd8a477fb8d811692e1a730faf373cda" translate="yes" xml:space="preserve">
          <source>Weisstein, Eric W. &amp;ldquo;Cauchy Distribution.&amp;rdquo; From MathWorld&amp;ndash;A Wolfram Web Resource. &lt;a href=&quot;http://mathworld.wolfram.com/CauchyDistribution.html&quot;&gt;http://mathworld.wolfram.com/CauchyDistribution.html&lt;/a&gt;</source>
          <target state="translated">Weisstein、Eric W.「コーシー分布」。MathWorldから&amp;ndash; Wolfram Webリソース。&lt;a href=&quot;http://mathworld.wolfram.com/CauchyDistribution.html&quot;&gt;http://mathworld.wolfram.com/CauchyDistribution.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ce6b4d0490f5c6c29f7bd660e93014a010601e88" translate="yes" xml:space="preserve">
          <source>Weisstein, Eric W. &amp;ldquo;Gamma Distribution.&amp;rdquo; From MathWorld&amp;ndash;A Wolfram Web Resource. &lt;a href=&quot;http://mathworld.wolfram.com/GammaDistribution.html&quot;&gt;http://mathworld.wolfram.com/GammaDistribution.html&lt;/a&gt;</source>
          <target state="translated">Weisstein、Eric W.「ガンマ分布」。MathWorldから&amp;ndash; Wolfram Webリソース。&lt;a href=&quot;http://mathworld.wolfram.com/GammaDistribution.html&quot;&gt;http://mathworld.wolfram.com/GammaDistribution.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="250b4512032938435df06c099254026086b0b46d" translate="yes" xml:space="preserve">
          <source>Weisstein, Eric W. &amp;ldquo;Hypergeometric Distribution.&amp;rdquo; From MathWorld&amp;ndash;A Wolfram Web Resource. &lt;a href=&quot;http://mathworld.wolfram.com/HypergeometricDistribution.html&quot;&gt;http://mathworld.wolfram.com/HypergeometricDistribution.html&lt;/a&gt;</source>
          <target state="translated">Weisstein、Eric W.「超幾何分布」MathWorldから&amp;ndash; Wolfram Webリソース。&lt;a href=&quot;http://mathworld.wolfram.com/HypergeometricDistribution.html&quot;&gt;http://mathworld.wolfram.com/HypergeometricDistribution.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="403ee22c6c9f5dfb6128b5015952af83dc7fe1f5" translate="yes" xml:space="preserve">
          <source>Weisstein, Eric W. &amp;ldquo;Laplace Distribution.&amp;rdquo; From MathWorld&amp;ndash;A Wolfram Web Resource. &lt;a href=&quot;http://mathworld.wolfram.com/LaplaceDistribution.html&quot;&gt;http://mathworld.wolfram.com/LaplaceDistribution.html&lt;/a&gt;</source>
          <target state="translated">Weisstein、Eric W.「Laplace Distribution」。MathWorldから&amp;ndash; Wolfram Webリソース。&lt;a href=&quot;http://mathworld.wolfram.com/LaplaceDistribution.html&quot;&gt;http://mathworld.wolfram.com/LaplaceDistribution.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c85ee5175b40c6661962e1c4dcdc7232b8e5568a" translate="yes" xml:space="preserve">
          <source>Weisstein, Eric W. &amp;ldquo;Logistic Distribution.&amp;rdquo; From MathWorld&amp;ndash;A Wolfram Web Resource. &lt;a href=&quot;http://mathworld.wolfram.com/LogisticDistribution.html&quot;&gt;http://mathworld.wolfram.com/LogisticDistribution.html&lt;/a&gt;</source>
          <target state="translated">Weisstein、Eric W.「ロジスティクス配布」MathWorldから&amp;ndash; Wolfram Webリソース。&lt;a href=&quot;http://mathworld.wolfram.com/LogisticDistribution.html&quot;&gt;http://mathworld.wolfram.com/LogisticDistribution.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d1938577c4f79d7fadb65a22f0b9b9cba0e6904e" translate="yes" xml:space="preserve">
          <source>Weisstein, Eric W. &amp;ldquo;Negative Binomial Distribution.&amp;rdquo; From MathWorld&amp;ndash;A Wolfram Web Resource. &lt;a href=&quot;http://mathworld.wolfram.com/NegativeBinomialDistribution.html&quot;&gt;http://mathworld.wolfram.com/NegativeBinomialDistribution.html&lt;/a&gt;</source>
          <target state="translated">Weisstein、Eric W.「負の二項分布」MathWorldから&amp;ndash; Wolfram Webリソース。&lt;a href=&quot;http://mathworld.wolfram.com/NegativeBinomialDistribution.html&quot;&gt;http://mathworld.wolfram.com/NegativeBinomialDistribution.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="ed9cdcffdd5a34db501b8269560f163da34bcfda" translate="yes" xml:space="preserve">
          <source>Weisstein, Eric W. &amp;ldquo;Noncentral F-Distribution.&amp;rdquo; From MathWorld&amp;ndash;A Wolfram Web Resource. &lt;a href=&quot;http://mathworld.wolfram.com/NoncentralF-Distribution.html&quot;&gt;http://mathworld.wolfram.com/NoncentralF-Distribution.html&lt;/a&gt;</source>
          <target state="translated">Weisstein、Eric W.「非中心F分布」。MathWorldから&amp;ndash; Wolfram Webリソース。&lt;a href=&quot;http://mathworld.wolfram.com/NoncentralF-Distribution.html&quot;&gt;http://mathworld.wolfram.com/NoncentralF-Distribution.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="6786c23a16b57cae22a2a2fe8c5eef583bfac0cc" translate="yes" xml:space="preserve">
          <source>Weisstein, Eric W. &amp;ldquo;Poisson Distribution.&amp;rdquo; From MathWorld&amp;ndash;A Wolfram Web Resource. &lt;a href=&quot;http://mathworld.wolfram.com/PoissonDistribution.html&quot;&gt;http://mathworld.wolfram.com/PoissonDistribution.html&lt;/a&gt;</source>
          <target state="translated">Weisstein、Eric W.「ポアソン分布」MathWorldから&amp;ndash; Wolfram Webリソース。&lt;a href=&quot;http://mathworld.wolfram.com/PoissonDistribution.html&quot;&gt;http://mathworld.wolfram.com/PoissonDistribution.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="87ff1415ce102e6420c0e0f61ef322d348a5f507" translate="yes" xml:space="preserve">
          <source>Weisstein, Eric W. &amp;ldquo;Sinc Function.&amp;rdquo; From MathWorld&amp;ndash;A Wolfram Web Resource. &lt;a href=&quot;http://mathworld.wolfram.com/SincFunction.html&quot;&gt;http://mathworld.wolfram.com/SincFunction.html&lt;/a&gt;</source>
          <target state="translated">Weisstein、Eric W.「シンク関数」MathWorldから&amp;ndash; Wolfram Webリソース。&lt;a href=&quot;http://mathworld.wolfram.com/SincFunction.html&quot;&gt;http://mathworld.wolfram.com/SincFunction.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="d56f530182243e33b481a1e9052be8e6b37f719d" translate="yes" xml:space="preserve">
          <source>Welcome to NumPy!</source>
          <target state="translated">NumPyへようこそ</target>
        </trans-unit>
        <trans-unit id="abaf546091bcd48cd855fade4a2162266fa33ab0" translate="yes" xml:space="preserve">
          <source>Welcome to the absolute beginner&amp;rsquo;s guide to NumPy! If you have comments or suggestions, please don&amp;rsquo;t hesitate to reach out!</source>
          <target state="translated">NumPyの完全な初心者向けガイドへようこそ！コメントや提案があれば、遠慮なく連絡してください！</target>
        </trans-unit>
        <trans-unit id="97cc607ac7fcfde11c85a5379ce211093f48fda9" translate="yes" xml:space="preserve">
          <source>Welcome! This is the documentation for NumPy 1.19.0, last updated Jun 29, 2020.</source>
          <target state="translated">いらっしゃいませ! これはNumPy 1.19.0のドキュメントで、最終更新は2020年6月29日です。</target>
        </trans-unit>
        <trans-unit id="e52f86b6168d7288c28967f3ee6d60f730fcffb9" translate="yes" xml:space="preserve">
          <source>Welcome! This is the documentation for NumPy 1.20.0 , last updated Jan 31, 2021.</source>
          <target state="translated">ようこそ! これは、NumPy 1.20.0のドキュメントで、最終更新日は2021年1月31日です。</target>
        </trans-unit>
        <trans-unit id="e4a9602b9f7c3767b63b80691e19a57b6adce08c" translate="yes" xml:space="preserve">
          <source>What are masked arrays?</source>
          <target state="translated">マスクド・アレイとは?</target>
        </trans-unit>
        <trans-unit id="3fef717821661f9806ec19067704e1d37a6e1a47" translate="yes" xml:space="preserve">
          <source>What are the least-squares-best &lt;code&gt;m&lt;/code&gt; and &lt;code&gt;y0&lt;/code&gt; in &lt;code&gt;y = y0 + mx&lt;/code&gt; for the following data: {(0,1), (1,0), (1,2), (2,1)}. (Graph the points and you&amp;rsquo;ll see that it should be y0 = 0, m = 1.) The answer is provided by solving the over-determined matrix equation &lt;code&gt;Ax = b&lt;/code&gt;, where:</source>
          <target state="translated">次のデータの &lt;code&gt;y = y0 + mx&lt;/code&gt; 最小二乗最適 &lt;code&gt;m&lt;/code&gt; および &lt;code&gt;y0&lt;/code&gt; は何ですか：{（0,1）、（1,0）、（1,2）、（2,1）}。（ポイントをグラフ化すると、y0 = 0、m = 1になるはずです。）解は、過剰決定された行列方程式 &lt;code&gt;Ax = b&lt;/code&gt; 解くことによって得られます。ここで、</target>
        </trans-unit>
        <trans-unit id="3e9b892da0c44e54a5a3d94ba212b74404ec1950" translate="yes" xml:space="preserve">
          <source>What can be converted to a data-type object is described below:</source>
          <target state="translated">データ型オブジェクトに変換できるものは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="7f1eadc1a60d1383bbd27a5874b7f7b346ec84b4" translate="yes" xml:space="preserve">
          <source>What encoding to use when reading Python 2 strings. Only useful when loading Python 2 generated pickled files in Python 3, which includes npy/npz files containing object arrays. Values other than &amp;lsquo;latin1&amp;rsquo;, &amp;lsquo;ASCII&amp;rsquo;, and &amp;lsquo;bytes&amp;rsquo; are not allowed, as they can corrupt numerical data. Default: &amp;lsquo;ASCII&amp;rsquo;</source>
          <target state="translated">Python 2文字列を読み取るときに使用するエンコーディング。オブジェクト配列を含むnpy / npzファイルを含む、Python 2で生成された漬物ファイルをPython 3にロードする場合にのみ役立ちます。「latin1」、「ASCII」、および「バイト」以外の値は、数値データを破壊する可能性があるため許可されません。デフォルト： 'ASCII'</target>
        </trans-unit>
        <trans-unit id="a414efd43aeae99e0f66cba2afec4195fe86ff0f" translate="yes" xml:space="preserve">
          <source>What happened.</source>
          <target state="translated">何があったの?</target>
        </trans-unit>
        <trans-unit id="cc1dbc2aba98097ae72989d44015108a57b61d35" translate="yes" xml:space="preserve">
          <source>What happens with unexpected inputs like empty arrays or nan/inf values?</source>
          <target state="translated">空の配列やnan/inf値のような予期せぬ入力があった場合はどうなりますか?</target>
        </trans-unit>
        <trans-unit id="b53d35ef01217a62dff0ba25d166a1b1caaa9dc7" translate="yes" xml:space="preserve">
          <source>What if the user specifies certain &lt;strong&gt;baseline features&lt;/strong&gt; during the build but at runtime the machine doesn&amp;rsquo;t support even these features? Will the compiled code be called via one of these definitions, or maybe the compiler itself auto-generated/vectorized certain piece of code based on the provided command line compiler flags?</source>
          <target state="translated">ユーザーがビルド中に特定の&lt;strong&gt;ベースライン機能を&lt;/strong&gt;指定したが、実行時にマシンがこれらの機能さえサポートしない場合はどうなりますか？コンパイルされたコードは、これらの定義の1つを介して呼び出されますか、それともコンパイラ自体が、提供されたコマンドラインコンパイラフラグに基づいて特定のコードを自動生成/ベクトル化しますか？</target>
        </trans-unit>
        <trans-unit id="d026aa92cb632a0008d65ec665e66cb82db19d44" translate="yes" xml:space="preserve">
          <source>What is NumPy?</source>
          <target state="translated">NumPyとは?</target>
        </trans-unit>
        <trans-unit id="1e1fa581e9e916507b4446a529a092d8e86437db" translate="yes" xml:space="preserve">
          <source>What is a masked array?</source>
          <target state="translated">マスクされた配列とは何ですか?</target>
        </trans-unit>
        <trans-unit id="9751e6648cb276739f841dae292a17853fcae611" translate="yes" xml:space="preserve">
          <source>What is an array?</source>
          <target state="translated">配列とは何ですか?</target>
        </trans-unit>
        <trans-unit id="437c59796bebb67cae1bb453196d12e5dabd418f" translate="yes" xml:space="preserve">
          <source>What is compared are values, not types. So an int (1) and an array of length one can evaluate as True:</source>
          <target state="translated">比較されるのは値であって型ではありません。つまり、int (1)と長さ 1 の配列は True と評価できます。</target>
        </trans-unit>
        <trans-unit id="0ad7f91a8e7927b564b105b1d3081b63dcc31aef" translate="yes" xml:space="preserve">
          <source>What is described below is a recommended workflow with Git.</source>
          <target state="translated">以下に説明するのは、Gitを使ったおすすめのワークフローです。</target>
        </trans-unit>
        <trans-unit id="b5bea1d13da31e58211ad4c35c1a02b82b3ae53f" translate="yes" xml:space="preserve">
          <source>What is released</source>
          <target state="translated">リリースされたもの</target>
        </trans-unit>
        <trans-unit id="ed5c56f4637ad63b06ae7f91c4fda9c76b610d6b" translate="yes" xml:space="preserve">
          <source>What is tested is whether the input has a non-zero imaginary part, not if the input type is complex.</source>
          <target state="translated">テストされるのは、入力がゼロではない虚部を持つかどうかであって、入力タイプが複素数であるかどうかではありません。</target>
        </trans-unit>
        <trans-unit id="010a5d0834f679e03164332d6d50425424fc97f8" translate="yes" xml:space="preserve">
          <source>What is the amortization schedule for a 1 year loan of $2500 at 8.24% interest per year compounded monthly?</source>
          <target state="translated">2500 ドルの 1 年間のローンの償却スケジュールは何ですか?</target>
        </trans-unit>
        <trans-unit id="59aacf2a72313a7cde0de3da40cb764e30627fa7" translate="yes" xml:space="preserve">
          <source>What is the future value after 10 years of saving $100 now, with an additional monthly savings of $100. Assume the interest rate is 5% (annually) compounded monthly?</source>
          <target state="translated">今100ドルを貯金して、毎月100ドルを追加で貯めた場合の10年後の将来価値はいくらになるでしょうか。金利は5%(年率)で毎月複利だとしますか?</target>
        </trans-unit>
        <trans-unit id="68f86a620521000717f405763a7c2c87aeacd919" translate="yes" xml:space="preserve">
          <source>What is the monthly payment needed to pay off a $200,000 loan in 15 years at an annual interest rate of 7.5%?</source>
          <target state="translated">年利7.5%で20万ドルのローンを15年で完済するのに必要な月々の支払い額は?</target>
        </trans-unit>
        <trans-unit id="bd55b3638089456ad2fcd33f8ddb002a9ff2afef" translate="yes" xml:space="preserve">
          <source>What is the present value (e.g., the initial investment) of an investment that needs to total $15692.93 after 10 years of saving $100 every month? Assume the interest rate is 5% (annually) compounded monthly.</source>
          <target state="translated">毎月100ドルを貯金して10年後に合計15692.93ドルになる必要がある投資の現在価値(初期投資など)はどれくらいでしょうか?金利を5%(年1回)毎月複利で計算したとします。</target>
        </trans-unit>
        <trans-unit id="80bbcabaec75450b003887ef27bbf523c85b5a9f" translate="yes" xml:space="preserve">
          <source>What is the right way to index multi-dimensional arrays? Before you jump to conclusions about the one and true way to index multi-dimensional arrays, it pays to understand why this is a confusing issue. This section will try to explain in detail how numpy indexing works and why we adopt the convention we do for images, and when it may be appropriate to adopt other conventions.</source>
          <target state="translated">多次元配列をインデックス化する正しい方法とは?多次元配列のインデックスを作成する方法について結論を急ぐ前に、なぜこれが混乱を招く問題なのかを理解しておく必要があります。この節では、numpy のインデックス付けがどのように動作するのか、また、なぜ画像に対してこのような規則を採用しているのか、また、他の規則を採用することが適切な場合にはどのような場合があるのかを詳細に説明します。</target>
        </trans-unit>
        <trans-unit id="c8f9b6ad9828683b0bae9bbc812741ce15ef2e1e" translate="yes" xml:space="preserve">
          <source>What makes this work so well is that &lt;code&gt;predictions&lt;/code&gt; and &lt;code&gt;labels&lt;/code&gt; can contain one or a thousand values. They only need to be the same size.</source>
          <target state="translated">これをうまく機能させるのは、 &lt;code&gt;predictions&lt;/code&gt; と &lt;code&gt;labels&lt;/code&gt; に1つまたは1000の値を含めることができることです。それらは同じサイズである必要があります。</target>
        </trans-unit>
        <trans-unit id="e27b294bbb4cb3c1e3ee88822cc65d21f2416881" translate="yes" xml:space="preserve">
          <source>What results is the construction of a new array where each value of the index array selects one row from the array being indexed and the resultant array has the resulting shape (number of index elements, size of row).</source>
          <target state="translated">その結果,インデックス配列の各値がインデックス化されている配列から1行を選択し,結果として得られる配列の形状(インデックス要素の数,行のサイズ)を持つ新しい配列を構築することができます.</target>
        </trans-unit>
        <trans-unit id="5cc81ce77bcae494adbf2656415c9e36736b6793" translate="yes" xml:space="preserve">
          <source>What we lack are docs with broader scope &amp;ndash; tutorials, how-tos, and explanations. Reporting defects is another way to contribute. We discuss both.</source>
          <target state="translated">私たちに欠けているのは、チュートリアル、ハウツー、説明など、より広い範囲のドキュメントです。欠陥の報告は、貢献するもう1つの方法です。両方について話し合います。</target>
        </trans-unit>
        <trans-unit id="0bd771107f7afe976fc592b463f0e0c3505ed432" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s New or Different</source>
          <target state="translated">新機能または相違点</target>
        </trans-unit>
        <trans-unit id="6137204c31653b349cf3c8ead844b7d64e89eb84" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s needed</source>
          <target state="translated">必要なもの</target>
        </trans-unit>
        <trans-unit id="2feeca88895960783f7c2e153b1e528ad57119f7" translate="yes" xml:space="preserve">
          <source>What&amp;rsquo;s the difference between a Python list and a NumPy array?</source>
          <target state="translated">PythonリストとNumPy配列の違いは何ですか？</target>
        </trans-unit>
        <trans-unit id="9f2949fbd884fd2e87977bc6442d7541c249e9bc" translate="yes" xml:space="preserve">
          <source>What’s New or Different</source>
          <target state="translated">何が新しいのか、それとも違うのか</target>
        </trans-unit>
        <trans-unit id="7c1df74199c25c42832661082d6ca6ac9e56b175" translate="yes" xml:space="preserve">
          <source>Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May). Open Document Format for Office Applications (OpenDocument)v1.2, Part 2: Recalculated Formula (OpenFormula) Format - Annotated Version, Pre-Draft 12. Organization for the Advancement of Structured Information Standards (OASIS). Billerica, MA, USA. [ODT Document]. Available: &lt;a href=&quot;http://www.oasis-open.org/committees/documents.php&quot;&gt;http://www.oasis-open.org/committees/documents.php&lt;/a&gt; ?wg_abbrev=office-formulaOpenDocument-formula-20090508.odt</source>
          <target state="translated">Wheeler、DA、E。Rathke、およびR. Weir（編）（2009年5月）。 Officeアプリケーション用のオープンドキュメント形式（OpenDocument）v1.2、パート2：再計算された式（OpenFormula）形式-注釈付きバージョン、草案前12。構造化情報標準（OASIS）の進歩のための組織。ビレリカ、マサチューセッツ、米国。 [ODTドキュメント]。利用可能：&lt;a href=&quot;http://www.oasis-open.org/committees/documents.php&quot;&gt;http&lt;/a&gt; : //www.oasis-open.org/committees/documents.php？wg_abbrev = office-formulaOpenDocument-formula-20090508.odt</target>
        </trans-unit>
        <trans-unit id="030c83d2119f52206dbf3733046b420a1749a0e1" translate="yes" xml:space="preserve">
          <source>Wheeler, D. A., E. Rathke, and R. Weir (Eds.) (2009, May). Open Document Format for Office Applications (OpenDocument)v1.2, Part 2: Recalculated Formula (OpenFormula) Format - Annotated Version, Pre-Draft 12. Organization for the Advancement of Structured Information Standards (OASIS). Billerica, MA, USA. [ODT Document]. Available: &lt;a href=&quot;http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formula&quot;&gt;http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formula&lt;/a&gt; OpenDocument-formula-20090508.odt</source>
          <target state="translated">Wheeler、DA、E。Rathke、およびR. Weir（編）（2009年5月）。Officeアプリケーション用のオープンドキュメント形式（OpenDocument）v1.2、パート2：再計算された式（OpenFormula）形式-注釈付きバージョン、草案前12。構造化情報標準（OASIS）の進歩のための組織。ビレリカ、マサチューセッツ、米国。[ODTドキュメント]。利用可能：&lt;a href=&quot;http://www.oasis-open.org/committees/documents.php?wg_abbrev=office-formula&quot;&gt;http&lt;/a&gt; : //www.oasis-open.org/committees/documents.php? wg_abbrev=office-formula OpenDocument-formula-20090508.odt</target>
        </trans-unit>
        <trans-unit id="45e561a630c53e04980638c8d4e86ae0087886be" translate="yes" xml:space="preserve">
          <source>Wheels</source>
          <target state="translated">Wheels</target>
        </trans-unit>
        <trans-unit id="28b30ef805c7fb044e119b47e7ac08078b5b70cf" translate="yes" xml:space="preserve">
          <source>When &amp;lsquo;decimals&amp;rsquo; is negative, it specifies the number of positions to the left of the decimal point. The real and imaginary parts of complex numbers are rounded separately. Nothing is done if the array is not of float type and &amp;lsquo;decimals&amp;rsquo; is greater than or equal to 0.</source>
          <target state="translated">'decimals'が負の場合は、小数点の左側の桁数を指定します。複素数の実数部と虚数部は別々に丸められます。配列がfloat型ではなく、 'decimals'が0以上の場合、何も行われません。</target>
        </trans-unit>
        <trans-unit id="f209cff1399437b00b7cd0ee8730d177efc65293" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#c.NPY_ITER_EXTERNAL_LOOP&quot;&gt;&lt;code&gt;NPY_ITER_EXTERNAL_LOOP&lt;/code&gt;&lt;/a&gt; is specified, the typical inner loop construct is as follows.</source>
          <target state="translated">場合&lt;a href=&quot;#c.NPY_ITER_EXTERNAL_LOOP&quot;&gt; &lt;code&gt;NPY_ITER_EXTERNAL_LOOP&lt;/code&gt; が&lt;/a&gt;指定され、以下のように、典型的なインナーループ構造です。</target>
        </trans-unit>
        <trans-unit id="e3bd2b595c2ff9c9cbf3b48defe560bc708bb864" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#numpy.ma.MaskedArray.tofile&quot;&gt;&lt;code&gt;tofile&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="translated">&lt;a href=&quot;#numpy.ma.MaskedArray.tofile&quot;&gt; &lt;code&gt;tofile&lt;/code&gt; &lt;/a&gt;が呼び出されたとき。</target>
        </trans-unit>
        <trans-unit id="62e74c933581584a63ff5ff51eb96f98ecf99dc0" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;#numpy.ma.masked_array.tofile&quot;&gt;&lt;code&gt;tofile&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="translated">&lt;a href=&quot;#numpy.ma.masked_array.tofile&quot;&gt; &lt;code&gt;tofile&lt;/code&gt; &lt;/a&gt;が呼び出されたとき。</target>
        </trans-unit>
        <trans-unit id="0d17005044d622bf07127624dd5d1775dbe22cd5" translate="yes" xml:space="preserve">
          <source>When &lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt; is not a valid dtype for a structured array.</source>
          <target state="translated">&lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt;が構造化配列の有効なdtypeではない場合。</target>
        </trans-unit>
        <trans-unit id="105e60976ea8fbfb90203db8ab4a0a320369170d" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;A = rfft(a)&lt;/code&gt; and fs is the sampling frequency, &lt;code&gt;A[0]&lt;/code&gt; contains the zero-frequency term 0*fs, which is real due to Hermitian symmetry.</source>
          <target state="translated">場合 &lt;code&gt;A = rfft(a)&lt;/code&gt; とfsはサンプリング周波数であり、 &lt;code&gt;A[0]&lt;/code&gt; エルミート対称性に起因実数であり、ゼロ周波数項0 * FSを含んでいます。</target>
        </trans-unit>
        <trans-unit id="fb065328be54e2c3569cb5f58bbc8287bcb1fb7d" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;PyArray_ResolveWritebackIfCopy&lt;/code&gt; is called, the array pointed to by base will be updated with the contents of this array.</source>
          <target state="translated">とき &lt;code&gt;PyArray_ResolveWritebackIfCopy&lt;/code&gt; が呼ばれ、ベースによって指される配列は、この配列の内容で更新されます。</target>
        </trans-unit>
        <trans-unit id="6087c2287fac970fe48c994c66e9668908c28aae" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;a = 1&lt;/code&gt;, the Weibull distribution reduces to the exponential distribution.</source>
          <target state="translated">場合 &lt;code&gt;a = 1&lt;/code&gt; 、ワイブル分布は指数分布に帰着します。</target>
        </trans-unit>
        <trans-unit id="3234eec63d682a68b39f821bda537d5249018389" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;a&lt;/code&gt; is a 2D array, it is factorized as &lt;code&gt;u @ np.diag(s) @ vh
= (u * s) @ vh&lt;/code&gt;, where &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;vh&lt;/code&gt; are 2D unitary arrays and &lt;code&gt;s&lt;/code&gt; is a 1D array of &lt;code&gt;a&lt;/code&gt;&amp;rsquo;s singular values. When &lt;code&gt;a&lt;/code&gt; is higher-dimensional, SVD is applied in stacked mode as explained below.</source>
          <target state="translated">場合2次元アレイである、それは次のように因数分解された &lt;code&gt;u @ np.diag(s) @ vh = (u * s) @ vh&lt;/code&gt; 、ここで &lt;code&gt;u&lt;/code&gt; および &lt;code&gt;vh&lt;/code&gt; 2D一体配列であり、 &lt;code&gt;s&lt;/code&gt; はの1Dアレイでの特異値。ときに、より高い次元で以下に説明するように、SVDを積層モードで適用されます。 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="40bcbe29998f385e3a1059191be0f61338a8c763" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;a&lt;/code&gt; is a structured array, this argument specifies which fields to compare first, second, and so on. This list does not need to include all of the fields.</source>
          <target state="translated">構造アレイであり、この引数は、第一比較するフィールドを指定し、第二、など。このリストには、すべてのフィールドを含める必要はありません。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c171b92b4bddf9c8ebd2e75ee317f0b5fe3e94eb" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;a&lt;/code&gt; is an array with fields defined, this argument specifies which fields to compare first, second, etc. A single field can be specified as a string, and not all fields need be specified, but unspecified fields will still be used, in the order in which they come up in the dtype, to break ties.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; がフィールドが定義された配列の場合、この引数は最初に比較するフィールド、2番目に比較するフィールドなどを指定します。単一のフィールドを文字列として指定でき、すべてのフィールドを指定する必要はありませんが、指定されていないフィールドは引き続き使用されます。関係を断つために、dtypeに現れる順序。</target>
        </trans-unit>
        <trans-unit id="78f75090c501ced3a2b9ede8c30345a037a7c202" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;a&lt;/code&gt; is an array with fields defined, this argument specifies which fields to compare first, second, etc. A single field can be specified as a string, and not all fields need to be specified, but unspecified fields will still be used, in the order in which they come up in the dtype, to break ties.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; がフィールドが定義された配列の場合、この引数は最初に比較するフィールド、2番目に比較するフィールドなどを指定します。単一のフィールドを文字列として指定でき、すべてのフィールドを指定する必要はありませんが、未指定のフィールドは引き続き使用されます。関係を断つために、dtypeに現れる順序。</target>
        </trans-unit>
        <trans-unit id="2cd3e98c67109375f859806b9beef061a4ef694a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;a&lt;/code&gt; is an array with fields defined, this argument specifies which fields to compare first, second, etc. A single field can be specified as a string. Not all fields need be specified, but unspecified fields will still be used, in the order in which they come up in the dtype, to break ties.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; がフィールドが定義された配列の場合、この引数は最初に比較するフィールド、2番目に比較するフィールドなどを指定します。単一のフィールドを文字列として指定できます。すべてのフィールドを指定する必要はありませんが、未指定のフィールドは、dtypeで出現する順序で引き続き使用され、結合を解除します。</target>
        </trans-unit>
        <trans-unit id="b2ce72a40e12e2d7dda3e8c60930788493a39d27" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;a&lt;/code&gt; is an array with fields defined, this argument specifies which fields to compare first, second, etc. Not all fields need be specified.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; がフィールドが定義された配列の場合、この引数は最初に比較するフィールド、2番目に比較するフィールドなどを指定します。すべてのフィールドを指定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="ffd5f3ded394e20ded56e4169ae0a349c97ccd8c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;arange&lt;/code&gt; is used with floating point arguments, it is generally not possible to predict the number of elements obtained, due to the finite floating point precision. For this reason, it is usually better to use the function &lt;code&gt;linspace&lt;/code&gt; that receives as an argument the number of elements that we want, instead of the step:</source>
          <target state="translated">&lt;code&gt;arange&lt;/code&gt; を浮動小数点引数とともに使用する場合、浮動小数点の精度が有限であるため、通常、取得される要素の数を予測することはできません。このため、通常は、次の手順ではなく、必要な数の要素を引数として受け取る関数 &lt;code&gt;linspace&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="d9212747ec3985b5dbc30be906a85b9cd4a58814" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;axes&lt;/code&gt; is integer_like, the sequence for evaluation will be: first the -Nth axis in &lt;code&gt;a&lt;/code&gt; and 0th axis in &lt;code&gt;b&lt;/code&gt;, and the -1th axis in &lt;code&gt;a&lt;/code&gt; and Nth axis in &lt;code&gt;b&lt;/code&gt; last.</source>
          <target state="translated">ときに &lt;code&gt;axes&lt;/code&gt; 最初に-Nth軸：integer_likeで、評価のための配列は、あろうとで第0軸 &lt;code&gt;b&lt;/code&gt; とで-1th軸と第Nのを軸 &lt;code&gt;b&lt;/code&gt; 最後。 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a0e5c01c245527cc066079729775f892bf5a93e0" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;axis&lt;/code&gt; is specified, &lt;code&gt;values&lt;/code&gt; must have the correct shape.</source>
          <target state="translated">&lt;code&gt;axis&lt;/code&gt; を指定する場合、 &lt;code&gt;values&lt;/code&gt; は正しい形状でなければなりません。</target>
        </trans-unit>
        <trans-unit id="91b3e386bc1245c3b6fdcb369364554e159e0d4a" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;callstatement&lt;/code&gt; statement is used then F2PY may not generate proper prototypes for Fortran/C functions (because &lt;code&gt;&amp;lt;C-expr&amp;gt;&lt;/code&gt; may contain any function calls and F2PY has no way to determine what should be the proper prototype). With this statement you can explicitly specify the arguments of the corresponding prototype:</source>
          <target state="translated">場合 &lt;code&gt;callstatement&lt;/code&gt; のステートメントは、その後使用されているF2PYは、Fortran / C関数の適切なプロトタイプを生成しないかもしれない（なぜなら &lt;code&gt;&amp;lt;C-expr&amp;gt;&lt;/code&gt; 任意の関数呼び出しを含み、F2PYが適切なプロトタイプであるべきかを決定する方法を持っていなくてもよいです）。このステートメントを使用すると、対応するプロトタイプの引数を明示的に指定できます。</target>
        </trans-unit>
        <trans-unit id="3a3f207a74aef7083c1eb02bef5c64216a30b6fc" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;condition&lt;/code&gt; or &lt;code&gt;a&lt;/code&gt; contain masked values.</source>
          <target state="translated">とき &lt;code&gt;condition&lt;/code&gt; やマスクされた値が含まれています。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f3581744e88f263225956bbed713e5c867c6bf74" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;copy=False&lt;/code&gt; and a copy is made for other reasons, the result is the same as if &lt;code&gt;copy=True&lt;/code&gt;, with some exceptions for &lt;code&gt;A&lt;/code&gt;, see the Notes section. The default order is &amp;lsquo;K&amp;rsquo;.</source>
          <target state="translated">ときに &lt;code&gt;copy=False&lt;/code&gt; とコピーが他の理由のために作られているかのように、結果は同じである &lt;code&gt;copy=True&lt;/code&gt; 、のためにいくつかの例外を除いて &lt;code&gt;A&lt;/code&gt; 、ノートのセクションを参照してください。デフォルトの順序は「K」です。</target>
        </trans-unit>
        <trans-unit id="2e1ae66e35c85b2fe34abaa8efd6e58beb3b3355" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;df&lt;/code&gt; &amp;lt;= 0 or when an inappropriate &lt;code&gt;size&lt;/code&gt; (e.g. &lt;code&gt;size=-1&lt;/code&gt;) is given.</source>
          <target state="translated">場合 &lt;code&gt;df&lt;/code&gt; &amp;lt;= 0の場合、または不適切な &lt;code&gt;size&lt;/code&gt; （例えば &lt;code&gt;size=-1&lt;/code&gt; ）が与えられます。</target>
        </trans-unit>
        <trans-unit id="6647686e555ae4abe6c033723e872acfb1bd3153" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;df&lt;/code&gt; independent random variables, each with standard normal distributions (mean 0, variance 1), are squared and summed, the resulting distribution is chi-square (see Notes). This distribution is often used in hypothesis testing.</source>
          <target state="translated">場合 &lt;code&gt;df&lt;/code&gt; を独立確率変数、標準正規分布（平均0、分散1）とそれぞれ、二乗と合計され、得られた分布は（注を参照）カイ二乗です。この分布は、仮説検定でよく使用されます。</target>
        </trans-unit>
        <trans-unit id="ef591edbbf8bac21872c8b29394eee7a7391694c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;dtype=None&lt;/code&gt;, the type of each column is determined iteratively from its data. We start by checking whether a string can be converted to a boolean (that is, if the string matches &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; in lower cases); then whether it can be converted to an integer, then to a float, then to a complex and eventually to a string. This behavior may be changed by modifying the default mapper of the &lt;code&gt;StringConverter&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;dtype=None&lt;/code&gt; の場合、各列のタイプはそのデータから繰り返し決定されます。文字列をブール値に変換できるかどうか（つまり、文字列が小文字で &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; に一致するかどうか）を確認することから始めます。次に、整数、浮動小数点数、複素数、最終的には文字列に変換できるかどうか。この動作は、 &lt;code&gt;StringConverter&lt;/code&gt; クラスのデフォルトのマッパーを変更することで変更できます。</target>
        </trans-unit>
        <trans-unit id="fd7138161ba09f963f4c9ef09529d5db9dce6e9c" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;equal_nan&lt;/code&gt; is True, complex values with nan components are considered equal if either the real &lt;em&gt;or&lt;/em&gt; the imaginary components are nan.</source>
          <target state="translated">とき &lt;code&gt;equal_nan&lt;/code&gt; がTrueの本当のいずれかであれば、ナンコンポーネントを持つ複雑な値が等しいと見なされます&lt;em&gt;か&lt;/em&gt;虚数成分がNaNです。</target>
        </trans-unit>
        <trans-unit id="ffb0cfba1c0d31cbfd6e3e6d57d32a4b67d07be0" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;high&lt;/code&gt; == &lt;code&gt;low&lt;/code&gt;, values of &lt;code&gt;low&lt;/code&gt; will be returned. If &lt;code&gt;high&lt;/code&gt; &amp;lt; &lt;code&gt;low&lt;/code&gt;, the results are officially undefined and may eventually raise an error, i.e. do not rely on this function to behave when passed arguments satisfying that inequality condition.</source>
          <target state="translated">&lt;code&gt;high&lt;/code&gt; ==の &lt;code&gt;low&lt;/code&gt; 、の値は &lt;code&gt;low&lt;/code&gt; 返されます。場合は &lt;code&gt;high&lt;/code&gt; &amp;lt; &lt;code&gt;low&lt;/code&gt; 、結果が公式に未定義され、最終的にエラーを発生させること、つまりは渡された引数は、その不等式条件を満たしたときに動作するために、この機能に依存していません。</target>
        </trans-unit>
        <trans-unit id="3c038afaac1cec1ca1939f072442e623790bdaa5" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;high&lt;/code&gt; == &lt;code&gt;low&lt;/code&gt;, values of &lt;code&gt;low&lt;/code&gt; will be returned. If &lt;code&gt;high&lt;/code&gt; &amp;lt; &lt;code&gt;low&lt;/code&gt;, the results are officially undefined and may eventually raise an error, i.e. do not rely on this function to behave when passed arguments satisfying that inequality condition. The &lt;code&gt;high&lt;/code&gt; limit may be included in the returned array of floats due to floating-point rounding in the equation &lt;code&gt;low + (high-low) * random_sample()&lt;/code&gt;. For example:</source>
          <target state="translated">&lt;code&gt;high&lt;/code&gt; ==の &lt;code&gt;low&lt;/code&gt; 、の値は &lt;code&gt;low&lt;/code&gt; 返されます。場合は &lt;code&gt;high&lt;/code&gt; &amp;lt; &lt;code&gt;low&lt;/code&gt; 、結果が公式に未定義され、最終的にエラーを発生させること、つまりは渡された引数は、その不等式条件を満たしたときに動作するために、この機能に依存していません。 &lt;code&gt;high&lt;/code&gt; 限界は、方程式に丸めによる浮動小数点にフロートの返された配列に含まれていてもよい &lt;code&gt;low + (high-low) * random_sample()&lt;/code&gt; 。例えば：</target>
        </trans-unit>
        <trans-unit id="f9aa8b45107567c376fa7741eff97cb12f0255ea" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;normed&lt;/code&gt; is True, then the returned histogram is the sample density, defined such that the sum over bins of the product &lt;code&gt;bin_value * bin_area&lt;/code&gt; is 1.</source>
          <target state="translated">とき &lt;code&gt;normed&lt;/code&gt; Trueの場合、返されたヒストグラムはサンプルの密度である、そのような製品のビンにわたる和と定義 &lt;code&gt;bin_value * bin_area&lt;/code&gt; 1です。</target>
        </trans-unit>
        <trans-unit id="d3c1a253c347320a48abee4b8144700cbe11dedb" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;op[i]&lt;/code&gt; is NULL, the requested data type &lt;code&gt;op_dtypes[i]&lt;/code&gt; may be NULL as well, in which case it is automatically generated from the dtypes of the arrays which are flagged as readable. The rules for generating the dtype are the same is for UFuncs. Of special note is handling of byte order in the selected dtype. If there is exactly one input, the input&amp;rsquo;s dtype is used as is. Otherwise, if more than one input dtypes are combined together, the output will be in native byte order.</source>
          <target state="translated">場合 &lt;code&gt;op[i]&lt;/code&gt; NULL、要求されたデータ型である &lt;code&gt;op_dtypes[i]&lt;/code&gt; それが自動的に読み取り可能としてフラグが設定されている配列のdtypesから生成された場合には、同様にNULLであってもよいです。dtypeの生成規則はUFuncの場合と同じです。特筆すべきは、選択したdtypeでのバイト順の処理です。入力が1つだけの場合、入力のdtypeがそのまま使用されます。それ以外の場合、複数の入力dtypeを組み合わせると、出力はネイティブのバイト順になります。</target>
        </trans-unit>
        <trans-unit id="8b2b29bdbe08a7c3e8ddf1683de5150728b2dbef" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;order&lt;/code&gt; is &amp;lsquo;A&amp;rsquo;, it will preserve the array&amp;rsquo;s &amp;lsquo;C&amp;rsquo; or &amp;lsquo;F&amp;rsquo; ordering:</source>
          <target state="translated">&lt;code&gt;order&lt;/code&gt; が「A」の場合、配列の「C」または「F」の順序が保持されます。</target>
        </trans-unit>
        <trans-unit id="6b8f346f1161f4e387f8b7fce9c3c4eab735e268" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;order&lt;/code&gt; is &amp;lsquo;K&amp;rsquo;, it will preserve orderings that are neither &amp;lsquo;C&amp;rsquo; nor &amp;lsquo;F&amp;rsquo;, but won&amp;rsquo;t reverse axes:</source>
          <target state="translated">とき &lt;code&gt;order&lt;/code&gt; 「K」で、それは「C」や「F」でもない順序付けを保存するが、逆の軸ではないでしょうします。</target>
        </trans-unit>
        <trans-unit id="08a648e9a0d7c320ff7a951bdd5b53abf89293b1" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;p&lt;/code&gt; cannot be converted to a rank-1 array.</source>
          <target state="translated">&lt;code&gt;p&lt;/code&gt; がランク1の配列に変換できない場合。</target>
        </trans-unit>
        <trans-unit id="e45ca1a69513367d482121e776e438a0bc2c1c76" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;path&lt;/code&gt; is an URL, &lt;a href=&quot;#numpy.DataSource.exists&quot;&gt;&lt;code&gt;exists&lt;/code&gt;&lt;/a&gt; will return True if it&amp;rsquo;s either stored locally in the &lt;a href=&quot;numpy.datasource#numpy.DataSource&quot;&gt;&lt;code&gt;DataSource&lt;/code&gt;&lt;/a&gt; directory, or is a valid remote URL. &lt;a href=&quot;numpy.datasource#numpy.DataSource&quot;&gt;&lt;code&gt;DataSource&lt;/code&gt;&lt;/a&gt; does not discriminate between the two, the file is accessible if it exists in either location.</source>
          <target state="translated">ときに &lt;code&gt;path&lt;/code&gt; URLで、&lt;a href=&quot;#numpy.DataSource.exists&quot;&gt; &lt;code&gt;exists&lt;/code&gt; &lt;/a&gt;、それはどちらかにローカルに保存されている場合にTrueを返します。&lt;a href=&quot;numpy.datasource#numpy.DataSource&quot;&gt; &lt;code&gt;DataSource&lt;/code&gt; &lt;/a&gt;ディレクトリ、または有効なリモートURLです。&lt;a href=&quot;numpy.datasource#numpy.DataSource&quot;&gt; &lt;code&gt;DataSource&lt;/code&gt; &lt;/a&gt;は2つを区別しません。ファイルがいずれかの場所に存在する場合、ファイルにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="25d6d2d2a499c808880c721a0e1b19db64d43932" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;seed&lt;/code&gt; is omitted or &lt;code&gt;None&lt;/code&gt;, a new &lt;code&gt;BitGenerator&lt;/code&gt; and &lt;a href=&quot;#numpy.random.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt; will be instantiated each time. This function does not manage a default global instance.</source>
          <target state="translated">とき &lt;code&gt;seed&lt;/code&gt; 省略していないか、され &lt;code&gt;None&lt;/code&gt; 、新しい &lt;code&gt;BitGenerator&lt;/code&gt; と&lt;a href=&quot;#numpy.random.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; &lt;/a&gt;、それぞれの時間をインスタンス化されます。この関数は、デフォルトのグローバルインスタンスを管理しません。</target>
        </trans-unit>
        <trans-unit id="11aa8349ecf313cc611177c175cba7ab95aa1209" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;start &amp;lt;= axis&lt;/code&gt;, the axis is rolled back until it lies in this position. When &lt;code&gt;start &amp;gt; axis&lt;/code&gt;, the axis is rolled until it lies before this position. The default, 0, results in a &amp;ldquo;complete&amp;rdquo; roll. The following table describes how negative values of &lt;code&gt;start&lt;/code&gt; are interpreted:</source>
          <target state="translated">とき &lt;code&gt;start &amp;lt;= axis&lt;/code&gt; 、それがこの位置にあるまで、軸がロールバックされます。とき &lt;code&gt;start &amp;gt; axis&lt;/code&gt; 、それがこの位置の前にあるまで、軸が圧延されます。デフォルトの0は、「完全な」ロールになります。次の表は、 &lt;code&gt;start&lt;/code&gt; の負の値がどのように解釈されるかを示しています。</target>
        </trans-unit>
        <trans-unit id="548ec80d9148e8694deef2af35ec844cd9f8fe80" translate="yes" xml:space="preserve">
          <source>When &lt;code&gt;writemasked&lt;/code&gt; flag is used, and this operand is buffered, this changes how data is copied from the buffer into the array. A masked copying routine is used, which only copies the elements in the buffer for which &lt;code&gt;writemasked&lt;/code&gt; returns true from the corresponding element in the ARRAYMASK operand.</source>
          <target state="translated">場合 &lt;code&gt;writemasked&lt;/code&gt; フラグが使用され、このオペランドは、データがアレイにバッファからコピーされるどのようにこの変更をバッファリングされます。マスクされたコピールーチンが使用されます。これは、ARRAYMASKオペランドの対応する要素から、 &lt;code&gt;writemasked&lt;/code&gt; がtrueを返すバッファの要素のみをコピーします。</target>
        </trans-unit>
        <trans-unit id="e06542a52ac6a1f85d560afb9efd573db44bd48f" translate="yes" xml:space="preserve">
          <source>When &lt;em&gt;order&lt;/em&gt; is &lt;a href=&quot;#c.NPY_ANYORDER&quot;&gt;&lt;code&gt;NPY_ANYORDER&lt;/code&gt;&lt;/a&gt;, the result order is &lt;a href=&quot;#c.NPY_FORTRANORDER&quot;&gt;&lt;code&gt;NPY_FORTRANORDER&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;prototype&lt;/em&gt; is a fortran array, &lt;a href=&quot;#c.NPY_CORDER&quot;&gt;&lt;code&gt;NPY_CORDER&lt;/code&gt;&lt;/a&gt; otherwise. When &lt;em&gt;order&lt;/em&gt; is &lt;a href=&quot;#c.NPY_KEEPORDER&quot;&gt;&lt;code&gt;NPY_KEEPORDER&lt;/code&gt;&lt;/a&gt;, the result order matches that of &lt;em&gt;prototype&lt;/em&gt;, even when the axes of &lt;em&gt;prototype&lt;/em&gt; aren&amp;rsquo;t in C or Fortran order.</source>
          <target state="translated">場合&lt;em&gt;順序が&lt;/em&gt;ある&lt;a href=&quot;#c.NPY_ANYORDER&quot;&gt; &lt;code&gt;NPY_ANYORDER&lt;/code&gt; &lt;/a&gt;、結果順序は&lt;a href=&quot;#c.NPY_FORTRANORDER&quot;&gt; &lt;code&gt;NPY_FORTRANORDER&lt;/code&gt; &lt;/a&gt;場合&lt;em&gt;プロトタイプは&lt;/em&gt; FORTRAN配列、ある&lt;a href=&quot;#c.NPY_CORDER&quot;&gt; &lt;code&gt;NPY_CORDER&lt;/code&gt; &lt;/a&gt;さもなければ。場合&lt;em&gt;順序が&lt;/em&gt;ある&lt;a href=&quot;#c.NPY_KEEPORDER&quot;&gt; &lt;code&gt;NPY_KEEPORDER&lt;/code&gt; &lt;/a&gt;、その結果の順序が一致&lt;em&gt;プロトタイプ&lt;/em&gt;の軸も、&lt;em&gt;プロトタイプは、&lt;/em&gt; CまたはFortranの順序ではありません。</target>
        </trans-unit>
        <trans-unit id="e7033d51e081041b1a2d922760ea9482eb361bec" translate="yes" xml:space="preserve">
          <source>When F2PY finds a line with F2PY directive, the directive is first replaced by 5 spaces and then the line is reread.</source>
          <target state="translated">F2PYがF2PYディレクティブを持つ行を見つけると、まずそのディレクティブを5つのスペースに置き換えてから、その行を読み直します。</target>
        </trans-unit>
        <trans-unit id="ad9397f3e6e3e4c72dcb47695405ed9d0b6444eb" translate="yes" xml:space="preserve">
          <source>When NumPy is built, information about system configuration is recorded, and is made available for extension modules using NumPy&amp;rsquo;s C API. These are mostly defined in &lt;code&gt;numpyconfig.h&lt;/code&gt; (included in &lt;code&gt;ndarrayobject.h&lt;/code&gt;). The public symbols are prefixed by &lt;code&gt;NPY_*&lt;/code&gt;. NumPy also offers some functions for querying information about the platform in use.</source>
          <target state="translated">NumPyがビルドされると、システム構成に関する情報が記録され、NumPyのC APIを使用して拡張モジュールで使用できるようになります。これらは主に &lt;code&gt;numpyconfig.h&lt;/code&gt; で定義されています（ndarrayobject.hに含まれてい &lt;code&gt;ndarrayobject.h&lt;/code&gt; ）。パブリックシンボルの前には &lt;code&gt;NPY_*&lt;/code&gt; が付きます。 NumPyは、使用中のプラットフォームに関する情報を照会するための関数もいくつか提供しています。</target>
        </trans-unit>
        <trans-unit id="f9eebd0d248f1a6803fb5b3cabe894035e7a712b" translate="yes" xml:space="preserve">
          <source>When True, trailing zeros are removed from the inputs. When False, the inputs are passed through intact.</source>
          <target state="translated">True の場合、末尾のゼロは入力から削除されます。Falseの場合、入力はそのまま通過します。</target>
        </trans-unit>
        <trans-unit id="97a14729b31bf94d828802c225db2f870571e19a" translate="yes" xml:space="preserve">
          <source>When a &lt;em&gt;casting&lt;/em&gt; error occurs during assignment (for example updating a numerical array using a sequence of strings), the array being assigned to may end up in an unpredictable partially updated state. However, if any other error (such as an out of bounds index) occurs, the array will remain unchanged.</source>
          <target state="translated">場合&lt;em&gt;キャスティング&lt;/em&gt;エラーが（文字列の配列を用いた数値アレイを更新するなど）割り当て中に発生する、に割り当てられるアレイは、予測できない、部分的に更新された状態で終わることができます。ただし、他のエラー（範囲外のインデックスなど）が発生した場合、配列は変更されません。</target>
        </trans-unit>
        <trans-unit id="e61114b95ee070856965d70e916fd6711963caa8" translate="yes" xml:space="preserve">
          <source>When a NumPy array, that is Fortran contiguous and has a dtype corresponding to presumed Fortran type, is used as an input array argument, then its C pointer is directly passed to Fortran.</source>
          <target state="translated">入力配列の引数にFortran連続で,推定Fortran型に対応するdtypeを持つNumPy配列が使用された場合,そのCポインタが直接Fortranに渡されます.</target>
        </trans-unit>
        <trans-unit id="0d0060f5095733a108d2028d216426111947fd92" translate="yes" xml:space="preserve">
          <source>When a broadcasting error occurs, the iterator raises an exception which includes the input shapes to help diagnose the problem.</source>
          <target state="translated">ブロードキャストエラーが発生した場合、イテレータは入力形状を含む例外を発生させ、問題を診断するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="811ec8a0586d1ac674df53f06017026b62d3d8b5" translate="yes" xml:space="preserve">
          <source>When a member of the Code of Conduct committee becomes aware of a clear and severe breach, they will do the following:</source>
          <target state="translated">行動規範委員会の委員は、明確かつ重大な違反を認識した場合には、次のことを行います。</target>
        </trans-unit>
        <trans-unit id="bb6f21e3a640b767ac7aa4f3739c198a4f93da24" translate="yes" xml:space="preserve">
          <source>When a memmap causes a file to be created or extended beyond its current size in the filesystem, the contents of the new part are unspecified. On systems with POSIX filesystem semantics, the extended part will be filled with zero bytes.</source>
          <target state="translated">memmapによってファイルが作成されたり、ファイルシステムの現在のサイズを超えて拡張されたりした場合、新しい部分の内容は不特定である。POSIXファイルシステムセマンティクスを持つシステムでは、拡張された部分はゼロバイトで埋められます。</target>
        </trans-unit>
        <trans-unit id="7aea5877fc6d970c99b779ec7ae2a444e7ff36a4" translate="yes" xml:space="preserve">
          <source>When a parameter can only assume one of a fixed set of values, those values can be listed in braces, with the default appearing first:</source>
          <target state="translated">パラメータが固定された値のいずれか一方しか想定できない場合は、それらの値を中括弧で囲み、デフォルト値を最初に表示することができます。</target>
        </trans-unit>
        <trans-unit id="9b87e186d194de6f9d4cd9e098a815eab1dbc5b7" translate="yes" xml:space="preserve">
          <source>When a recording filter is added, matching warnings are stored in the &lt;code&gt;log&lt;/code&gt; attribute as well as in the list returned by &lt;code&gt;record&lt;/code&gt;.</source>
          <target state="translated">記録フィルターが追加されると、一致する警告が &lt;code&gt;log&lt;/code&gt; 属性と、 &lt;code&gt;record&lt;/code&gt; によって返されるリストに格納されます。</target>
        </trans-unit>
        <trans-unit id="d3862b7e9fa0724ebb3b8d0fa3f7b6e962081ab4" translate="yes" xml:space="preserve">
          <source>When a report is sent to the committee they will immediately reply to the reporter to confirm receipt. This reply must be sent within 72 hours, and the group should strive to respond much quicker than that.</source>
          <target state="translated">委員会に報告書が送られてきたら、すぐに報告者に返信して受領を確認する。この返信は72時間以内に送られなければならず、グループはそれよりもはるかに早い対応に努めるべきである。</target>
        </trans-unit>
        <trans-unit id="ba1de10f5ac1f9d67feabe34568ca76340334549" translate="yes" xml:space="preserve">
          <source>When a ufunc is called, many things must be done. The information collected from these setup operations is stored in a loop-object. This loop object is a C-structure (that could become a Python object but is not initialized as such because it is only used internally). This loop object has the layout needed to be used with PyArray_Broadcast so that the broadcasting can be handled in the same way as it is handled in other sections of code.</source>
          <target state="translated">ufuncが呼ばれると、多くのことが行われなければなりません。これらの設定操作から収集された情報はループオブジェクトに格納されます。このループオブジェクトはC構造体である(Pythonオブジェクトになる可能性があるが、内部でのみ使用されるため初期化されていない)。このループオブジェクトは、PyArray_Broadcast で使用するために必要なレイアウトを持っており、他のコードのセクションと同じようにブロードキャストを扱うことができます。</target>
        </trans-unit>
        <trans-unit id="bed1032321553c178be0f4aa76322e048587c74c" translate="yes" xml:space="preserve">
          <source>When a view is desired in as many cases as possible, &lt;code&gt;arr.reshape(-1)&lt;/code&gt; may be preferable.</source>
          <target state="translated">できるだけ多くの場合にビューが必要な場合は、 &lt;code&gt;arr.reshape(-1)&lt;/code&gt; が適しています。</target>
        </trans-unit>
        <trans-unit id="3d973a2064387ee8231885f5fb66b3c4832468fa" translate="yes" xml:space="preserve">
          <source>When accessing a single entry of a masked array with no named fields, the output is either a scalar (if the corresponding entry of the mask is &lt;code&gt;False&lt;/code&gt;) or the special value &lt;a href=&quot;maskedarray.baseclass#numpy.ma.masked&quot;&gt;&lt;code&gt;masked&lt;/code&gt;&lt;/a&gt; (if the corresponding entry of the mask is &lt;code&gt;True&lt;/code&gt;):</source>
          <target state="translated">名前付きフィールドのないマスクされた配列の単一のエントリにアクセスする場合、出力はスカラー（マスクの対応するエントリが &lt;code&gt;False&lt;/code&gt; の場合）または&lt;a href=&quot;maskedarray.baseclass#numpy.ma.masked&quot;&gt; &lt;code&gt;masked&lt;/code&gt; &lt;/a&gt;た特別な値（マスクの対応するエントリが &lt;code&gt;True&lt;/code&gt; の場合）です。</target>
        </trans-unit>
        <trans-unit id="06a15d5053f26aa57bf4b46b8d10d7192f9bc439" translate="yes" xml:space="preserve">
          <source>When accessing a slice, the output is a masked array whose &lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray.data&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/a&gt; attribute is a view of the original data, and whose mask is either &lt;a href=&quot;maskedarray.baseclass#numpy.ma.nomask&quot;&gt;&lt;code&gt;nomask&lt;/code&gt;&lt;/a&gt; (if there was no invalid entries in the original array) or a view of the corresponding slice of the original mask. The view is required to ensure propagation of any modification of the mask to the original.</source>
          <target state="translated">スライスにアクセスするときの出力は、&lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray.data&quot;&gt; &lt;code&gt;data&lt;/code&gt; &lt;/a&gt;属性が元のデータのビューであり、マスクが&lt;a href=&quot;maskedarray.baseclass#numpy.ma.nomask&quot;&gt; &lt;code&gt;nomask&lt;/code&gt; &lt;/a&gt;（元の配列に無効なエントリがなかった場合）または元の対応するスライスのビューであるマスクされた配列です。マスク。ビューは、マスクの変更を元に確実に伝播するために必要です。</target>
        </trans-unit>
        <trans-unit id="4d92b7829e88a948fb9eb65ffcf73c11643904a9" translate="yes" xml:space="preserve">
          <source>When added within a context, filters are only added inside the context and will be forgotten when the context is exited.</source>
          <target state="translated">コンテキスト内に追加された場合、フィルタはコンテキスト内でのみ追加され、コンテキストが終了すると忘れられます。</target>
        </trans-unit>
        <trans-unit id="9541e02340938d50efa6e54249172d0ce37841bb" translate="yes" xml:space="preserve">
          <source>When adding the &amp;lsquo;out&amp;rsquo; parameter, we have to explicitly provide those flags, because if someone passes in an array as &amp;lsquo;out&amp;rsquo;, the iterator will default to &amp;lsquo;readonly&amp;rsquo;, and our inner loop would fail. The reason &amp;lsquo;readonly&amp;rsquo; is the default for input arrays is to prevent confusion about unintentionally triggering a reduction operation. If the default were &amp;lsquo;readwrite&amp;rsquo;, any broadcasting operation would also trigger a reduction, a topic which is covered later in this document.</source>
          <target state="translated">「out」パラメータを追加するときは、これらのフラグを明示的に指定する必要があります。誰かが「out」として配列を渡すと、イテレータはデフォルトで「readonly」になり、内部ループが失敗するためです。'readonly'が入力配列のデフォルトである理由は、意図しないリダクション操作のトリガーに関する混乱を防ぐためです。デフォルトが「readwrite」の場合、ブロードキャスト操作によって削減もトリガーされます。このトピックについては、このドキュメントで後述します。</target>
        </trans-unit>
        <trans-unit id="4db060a24fc0c2ce0739cc8fe613a0f3bd607af5" translate="yes" xml:space="preserve">
          <source>When advanced indices are next to each other transposing may be necessary. All necessary transposing is handled by &lt;code&gt;PyArray_MapIterSwapAxes&lt;/code&gt; and has to be handled by the caller unless &lt;code&gt;PyArray_MapIterNew&lt;/code&gt; is asked to allocate the result.</source>
          <target state="translated">高度なインデックスが互いに隣接している場合、転置が必要になる場合があります。必要な転置はすべて &lt;code&gt;PyArray_MapIterSwapAxes&lt;/code&gt; によって処理され、 &lt;code&gt;PyArray_MapIterNew&lt;/code&gt; が結果の割り当てを要求されない限り、呼び出し元によって処理される必要があります。</target>
        </trans-unit>
        <trans-unit id="d51d0efd85b1005294bf85e6a8973d000ac30965" translate="yes" xml:space="preserve">
          <source>When all weights along axis are zero. See &lt;a href=&quot;numpy.ma.average#numpy.ma.average&quot;&gt;&lt;code&gt;numpy.ma.average&lt;/code&gt;&lt;/a&gt; for a version robust to this type of error.</source>
          <target state="translated">軸に沿ったすべての重みがゼロの場合。このタイプのエラーに強いバージョンについては、&lt;a href=&quot;numpy.ma.average#numpy.ma.average&quot;&gt; &lt;code&gt;numpy.ma.average&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="b89455b8b1550525cbe82d65bea2d7c4ae5a2baa" translate="yes" xml:space="preserve">
          <source>When an array, each row is a coordinate in a D-dimensional space - such as &lt;code&gt;histogramdd(np.array([p1, p2, p3]))&lt;/code&gt;.</source>
          <target state="translated">配列の場合、各行はD次元空間の座標 &lt;code&gt;histogramdd(np.array([p1, p2, p3]))&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8f93d8039436724f69d84838e7be89d226d23fc" translate="yes" xml:space="preserve">
          <source>When an array, each row is a coordinate in a D-dimensional space - such as &lt;code&gt;histogramgramdd(np.array([p1, p2, p3]))&lt;/code&gt;.</source>
          <target state="translated">配列の場合、各行は、 &lt;code&gt;histogramgramdd(np.array([p1, p2, p3]))&lt;/code&gt; などのD次元空間の座標です。</target>
        </trans-unit>
        <trans-unit id="74f6a2bdb1716e78ebe330a0020c810a9f33a7a2" translate="yes" xml:space="preserve">
          <source>When an array_like, each element is the list of values for single coordinate - such as &lt;code&gt;histogramdd((X, Y, Z))&lt;/code&gt;.</source>
          <target state="translated">array_likeの場合、各要素は、 &lt;code&gt;histogramdd((X, Y, Z))&lt;/code&gt; などの単一座標の値のリストです。</target>
        </trans-unit>
        <trans-unit id="82d8732b0393645ea59279b9ddb8a309ed548c77" translate="yes" xml:space="preserve">
          <source>When an array_like, each element is the list of values for single coordinate - such as &lt;code&gt;histogramgramdd((X, Y, Z))&lt;/code&gt;.</source>
          <target state="translated">array_likeの場合、各要素は &lt;code&gt;histogramgramdd((X, Y, Z))&lt;/code&gt; などの単一座標の値のリストです。</target>
        </trans-unit>
        <trans-unit id="c37c33974afb82f0204264e74c8f9fe0fca4a425" translate="yes" xml:space="preserve">
          <source>When an axis is specified the subarrays indexed by the axis are sorted. This is done by making the specified axis the first dimension of the array (move the axis to the first dimension to keep the order of the other axes) and then flattening the subarrays in C order. The flattened subarrays are then viewed as a structured type with each element given a label, with the effect that we end up with a 1-D array of structured types that can be treated in the same way as any other 1-D array. The result is that the flattened subarrays are sorted in lexicographic order starting with the first element.</source>
          <target state="translated">軸が指定されると、その軸によってインデックス付けされたサブアレイがソートされます。これは、指定された軸を配列の1次元目にし(他の軸の順序を維持するために軸を1次元目に移動します)、Cの順序でサブアレイを平坦化することによって行われます。平坦化されたサブアレイは、各要素にラベルが与えられた構造化型として表示され、他の1次元配列と同じように扱うことができる構造化型の1次元配列となります。その結果、平坦化されたサブアレイは、最初の要素から始まる辞書順にソートされます。</target>
        </trans-unit>
        <trans-unit id="355be91097240a30b4454a31696bf68a0b258227" translate="yes" xml:space="preserve">
          <source>When an axis is specified the subarrays indexed by the axis are sorted. This is done by making the specified axis the first dimension of the array and then flattening the subarrays in C order. The flattened subarrays are then viewed as a structured type with each element given a label, with the effect that we end up with a 1-D array of structured types that can be treated in the same way as any other 1-D array. The result is that the flattened subarrays are sorted in lexicographic order starting with the first element.</source>
          <target state="translated">軸が指定されると、その軸によってインデックス付けされたサブ配列がソートされます。これは、指定された軸を配列の1次元目にして、Cの順序でサブアレイを平坦化することで行われます。扁平化されたサブアレイは、各要素にラベルが与えられた構造化型として表示され、他の1次元配列と同じように扱うことができる構造化型の1次元配列となります。その結果、平坦化されたサブアレイは、最初の要素から始まる辞書順にソートされます。</target>
        </trans-unit>
        <trans-unit id="6b69f1e4103645c38ed661fd82fe69ef3f4b8546" translate="yes" xml:space="preserve">
          <source>When an ellipsis (&lt;code&gt;...&lt;/code&gt;) is present but has no size (i.e. replaces zero &lt;code&gt;:&lt;/code&gt;) the result will still always be an array. A view if no advanced index is present, otherwise a copy.</source>
          <target state="translated">省略記号（とき &lt;code&gt;...&lt;/code&gt; は）存在しているが、何の大きさを持っていない（すなわちゼロを置き換える &lt;code&gt;:&lt;/code&gt; ）結果はまだ常に配列になります。詳細インデックスが存在しない場合はビュー、それ以外の場合はコピー。</target>
        </trans-unit>
        <trans-unit id="a6d6a3b6d360dde7b2d4e12e9485e974a0d7c19d" translate="yes" xml:space="preserve">
          <source>When an extension module is written, compiled, and installed to somewhere in the Python path (sys.path), the code can then be imported into Python as if it were a standard python file. It will contain objects and methods that have been defined and compiled in C code. The basic steps for doing this in Python are well-documented and you can find more information in the documentation for Python itself available online at &lt;a href=&quot;https://www.python.org&quot;&gt;www.python.org&lt;/a&gt; .</source>
          <target state="translated">拡張モジュールが記述され、コンパイルされ、Pythonパス（sys.path）のどこかにインストールされると、コードは標準のPythonファイルであるかのようにPythonにインポートできます。これには、Cコードで定義およびコンパイルされたオブジェクトとメソッドが含まれます。Pythonでこれを行うための基本的な手順は十分に文書化されており、詳細については、&lt;a href=&quot;https://www.python.org&quot;&gt;www.python.orgで&lt;/a&gt;オンラインで入手できるPython自体の文書を参照してください。</target>
        </trans-unit>
        <trans-unit id="3d4c4fe16d2ce5d90f03758ae48eb086b0f73e4f" translate="yes" xml:space="preserve">
          <source>When an input date falls on the weekend or a holiday, &lt;a href=&quot;generated/numpy.busday_offset#numpy.busday_offset&quot;&gt;&lt;code&gt;busday_offset&lt;/code&gt;&lt;/a&gt; first applies a rule to roll the date to a valid business day, then applies the offset. The default rule is &amp;lsquo;raise&amp;rsquo;, which simply raises an exception. The rules most typically used are &amp;lsquo;forward&amp;rsquo; and &amp;lsquo;backward&amp;rsquo;.</source>
          <target state="translated">入力日付が週末または休日になる場合、&lt;a href=&quot;generated/numpy.busday_offset#numpy.busday_offset&quot;&gt; &lt;code&gt;busday_offset&lt;/code&gt; は&lt;/a&gt;最初に日付を有効な営業日にロールするルールを適用し、次にオフセットを適用します。デフォルトのルールは「raise」で、これは単に例外を発生させます。最も一般的に使用されるルールは「フォワード」と「バックワード」です。</target>
        </trans-unit>
        <trans-unit id="64e5ff0649d57b71884c5f5309f3367e78576ca8" translate="yes" xml:space="preserve">
          <source>When applied to masked arrays, this function drops the mask information if the &lt;code&gt;to_begin&lt;/code&gt; and/or &lt;code&gt;to_end&lt;/code&gt; parameters are used.</source>
          <target state="translated">マスクされた配列に適用されると、この関数は &lt;code&gt;to_begin&lt;/code&gt; や &lt;code&gt;to_end&lt;/code&gt; パラメータが使用されている場合にマスク情報を削除します。</target>
        </trans-unit>
        <trans-unit id="15d1d9494e1bc6589dcc00277cd9b509332d208c" translate="yes" xml:space="preserve">
          <source>When applying the rule would make the code less readable, even for someone who is used to reading code that follows the rules.</source>
          <target state="translated">ルールを適用すると、ルールに従ったコードを読むことに慣れている人でも、コードが読みにくくなります。</target>
        </trans-unit>
        <trans-unit id="e3d9940340bbe50ab427886c71fa9ffd19149804" translate="yes" xml:space="preserve">
          <source>When assigning to fields which are subarrays, the assigned value will first be broadcast to the shape of the subarray.</source>
          <target state="translated">サブアレイであるフィールドに代入する場合、代入された値はまずサブアレイの形状にブロードキャストされます。</target>
        </trans-unit>
        <trans-unit id="f9f55c2f275cd5eebce400c5d632f8721b4b827a" translate="yes" xml:space="preserve">
          <source>When axis is not None, this function does the same thing as &amp;ldquo;fancy&amp;rdquo; indexing (indexing arrays using arrays); however, it can be easier to use if you need elements along a given axis. A call such as &lt;code&gt;np.take(arr, indices, axis=3)&lt;/code&gt; is equivalent to &lt;code&gt;arr[:,:,:,indices,...]&lt;/code&gt;.</source>
          <target state="translated">axisがNoneでない場合、この関数は「ファンシー」なインデックス付け（配列を使用した配列のインデックス付け）と同じことを行います。ただし、特定の軸に沿った要素が必要な場合は、より簡単に使用できます。 &lt;code&gt;np.take(arr, indices, axis=3)&lt;/code&gt; などの呼び出しは、 &lt;code&gt;arr[:,:,:,indices,...]&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="98c8d4285d8be1f6c2247d830229aff2863b6c70" translate="yes" xml:space="preserve">
          <source>When buffering is enabled, controls the size of the temporary buffers. Set to 0 for the default value.</source>
          <target state="translated">バッファリングが有効な場合、一時的なバッファのサイズを制御します。デフォルト値は 0 に設定されています。</target>
        </trans-unit>
        <trans-unit id="16e4f331a390aab5d5358796f242e2ca6c555d93" translate="yes" xml:space="preserve">
          <source>When buffering is enabled, this allows the size of the inner loop to grow when buffering isn&amp;rsquo;t necessary. This option is best used if you&amp;rsquo;re doing a straight pass through all the data, rather than anything with small cache-friendly arrays of temporary values for each inner loop.</source>
          <target state="translated">バッファリングが有効になっている場合、これにより、バッファリングが不要なときに内部ループのサイズが大きくなります。このオプションは、各内部ループの一時的な値のキャッシュに適した小さな配列ではなく、すべてのデータを直接渡す場合に最適です。</target>
        </trans-unit>
        <trans-unit id="b51f6738b373830fc8b3cc055c675ac17c018d38" translate="yes" xml:space="preserve">
          <source>When buffering is enabled, this also switches to a special buffering mode which reduces the loop length as necessary to not trample on values being reduced.</source>
          <target state="translated">バッファリングが有効になっている場合、これは特別なバッファリングモードにも切り替わり、ループの長さを必要に応じて減らしている値を踏みにじらないようにします。</target>
        </trans-unit>
        <trans-unit id="41819020a24f8ece45999c2f5c36e5cb1be0993f" translate="yes" xml:space="preserve">
          <source>When buffering is enabled, this delays allocation of the buffers until &lt;a href=&quot;#c.NpyIter_Reset&quot;&gt;&lt;code&gt;NpyIter_Reset&lt;/code&gt;&lt;/a&gt; or another reset function is called. This flag exists to avoid wasteful copying of buffer data when making multiple copies of a buffered iterator for multi-threaded iteration.</source>
          <target state="translated">バッファリングが有効な場合、これにより、&lt;a href=&quot;#c.NpyIter_Reset&quot;&gt; &lt;code&gt;NpyIter_Reset&lt;/code&gt; &lt;/a&gt;または別のリセット関数が呼び出されるまで、バッファの割り当てが遅延します。このフラグは、マルチスレッド反復のためにバッファー付きイテレーターの複数のコピーを作成するときに、バッファーデータの無駄なコピーを回避するために存在します。</target>
        </trans-unit>
        <trans-unit id="4659cc673583a700172b8a1a2788271c0236c929" translate="yes" xml:space="preserve">
          <source>When building Python packages containing Fortran sources, then one can choose different Fortran compilers by using &lt;code&gt;build_ext&lt;/code&gt; command option &lt;code&gt;--fcompiler=&amp;lt;Vendor&amp;gt;&lt;/code&gt;. Here &lt;code&gt;&amp;lt;Vendor&amp;gt;&lt;/code&gt; can be one of the following names:</source>
          <target state="translated">Fortranソースを含むPythonパッケージをビルドする場合、 &lt;code&gt;build_ext&lt;/code&gt; コマンドオプション &lt;code&gt;--fcompiler=&amp;lt;Vendor&amp;gt;&lt;/code&gt; を使用して、さまざまなFortranコンパイラーを選択できます。ここで、 &lt;code&gt;&amp;lt;Vendor&amp;gt;&lt;/code&gt; は次のいずれかの名前になります。</target>
        </trans-unit>
        <trans-unit id="f21f4d61950661d3a1581fb7fc069996b1dddfdd" translate="yes" xml:space="preserve">
          <source>When building an extension module, a combination of the following macros may be required for non-gcc Fortran compilers:</source>
          <target state="translated">拡張モジュールをビルドする際には、非gccのFortranコンパイラでは以下のマクロの組み合わせが必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="230c13e7258bcd1f717539097a4dd43ccf64c97d" translate="yes" xml:space="preserve">
          <source>When calculating the power of an experiment (power = probability of rejecting the null hypothesis when a specific alternative is true) the non-central F statistic becomes important. When the null hypothesis is true, the F statistic follows a central F distribution. When the null hypothesis is not true, then it follows a non-central F statistic.</source>
          <target state="translated">実験の検出力(検出力=特定の代替案が真であるときに帰無仮説を棄却する確率)を計算するとき、非中心F統計量が重要になる。帰無仮説が真の場合、F統計量は中心F分布に従う。帰無仮説が真でないときは、非中心F統計量に従う。</target>
        </trans-unit>
        <trans-unit id="5a88371e6c71e0713242640efaf4aa0aa5e85f64" translate="yes" xml:space="preserve">
          <source>When called from the explicit constructor, &lt;code&gt;obj&lt;/code&gt; is &lt;code&gt;None&lt;/code&gt;</source>
          <target state="translated">明示的なコンストラクターから呼び出された場合、 &lt;code&gt;obj&lt;/code&gt; は &lt;code&gt;None&lt;/code&gt; です</target>
        </trans-unit>
        <trans-unit id="4c4c9c09668cb4fc50a86156b0582de19cfc0aea" translate="yes" xml:space="preserve">
          <source>When called from view casting, &lt;code&gt;obj&lt;/code&gt; can be an instance of any subclass of ndarray, including our own.</source>
          <target state="translated">ビューキャスティングから呼び出された場合、 &lt;code&gt;obj&lt;/code&gt; は、独自のものを含め、ndarrayの任意のサブクラスのインスタンスにすることができます。</target>
        </trans-unit>
        <trans-unit id="bdfd9e1642e1e1ff8048cf3528d0f05bb78c463a" translate="yes" xml:space="preserve">
          <source>When called in new-from-template, &lt;code&gt;obj&lt;/code&gt; is another instance of our own subclass, that we might use to update the new &lt;code&gt;self&lt;/code&gt; instance.</source>
          <target state="translated">new-from-templateで呼び出されると、 &lt;code&gt;obj&lt;/code&gt; は独自のサブクラスの別のインスタンスであり、新しい &lt;code&gt;self&lt;/code&gt; インスタンスを更新するために使用できます。</target>
        </trans-unit>
        <trans-unit id="67a93e8e91305afaf6fc0532016e5191c667e052" translate="yes" xml:space="preserve">
          <source>When called on a zero-d array or scalar, &lt;code&gt;nonzero(a)&lt;/code&gt; is treated as &lt;code&gt;nonzero(atleast1d(a))&lt;/code&gt;.</source>
          <target state="translated">ゼロ次元配列またはスカラー、上で呼び出されたときに &lt;code&gt;nonzero(a)&lt;/code&gt; として扱われ &lt;code&gt;nonzero(atleast1d(a))&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="983eb3e7c851b006b5ca4f0291c430972bc7e1fb" translate="yes" xml:space="preserve">
          <source>When called on a zero-d array or scalar, &lt;code&gt;nonzero(a)&lt;/code&gt; is treated as &lt;code&gt;nonzero(atleast_1d(a))&lt;/code&gt;.</source>
          <target state="translated">ゼロ次元配列またはスカラー、上で呼び出されたときに &lt;code&gt;nonzero(a)&lt;/code&gt; として扱われ &lt;code&gt;nonzero(atleast_1d(a))&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="05271cb09f7d75c6bfb61cf24594f89c89131399" translate="yes" xml:space="preserve">
          <source>When called with only scalars, &lt;code&gt;np.block&lt;/code&gt; is equivalent to an ndarray call. So &lt;code&gt;np.block([[1, 2], [3, 4]])&lt;/code&gt; is equivalent to &lt;code&gt;np.array([[1, 2], [3, 4]])&lt;/code&gt;.</source>
          <target state="translated">スカラーのみで呼び出される場合、 &lt;code&gt;np.block&lt;/code&gt; はndarray呼び出しと同等です。そう &lt;code&gt;np.block([[1, 2], [3, 4]])&lt;/code&gt; に相当する &lt;code&gt;np.array([[1, 2], [3, 4]])&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="067efac39e6f277a074b649718c28575841dd307" translate="yes" xml:space="preserve">
          <source>When can they be useful?</source>
          <target state="translated">どんな時に役立つのか?</target>
        </trans-unit>
        <trans-unit id="eb3fc5492e5904c93f3605a33709fbb0c2bb0c5b" translate="yes" xml:space="preserve">
          <source>When casting from complex to float or int. To avoid this, one should use &lt;code&gt;a.real.astype(t)&lt;/code&gt;.</source>
          <target state="translated">複素数から浮動小数点または整数にキャストする場合。これを回避するには、 &lt;code&gt;a.real.astype(t)&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="d77d44055e40bb5dab3ddffb7c979aaad7a40365" translate="yes" xml:space="preserve">
          <source>When coding custom algorithms, and sometimes when wrapping existing C libraries, some familiarity with C is required. In particular, when using C memory management (&lt;code&gt;malloc&lt;/code&gt; and friends), it&amp;rsquo;s easy to introduce memory leaks. However, just compiling a Python module renamed to &lt;code&gt;.pyx&lt;/code&gt; can already speed it up, and adding a few type declarations can give dramatic speedups in some code.</source>
          <target state="translated">カスタムアルゴリズムをコーディングする場合、および既存のCライブラリをラップする場合は、Cにある程度精通している必要があります。特に、Cメモリ管理（ &lt;code&gt;malloc&lt;/code&gt; とその仲間）を使用する場合、メモリリークが発生しやすくなります。ただし、 &lt;code&gt;.pyx&lt;/code&gt; に名前が変更されたPythonモジュールをコンパイルするだけで、すでに高速化できます。また、いくつかの型宣言を追加すると、一部のコードで劇的な高速化が可能になります。</target>
        </trans-unit>
        <trans-unit id="7b0aeecc6c945df228976af6d76ace4f58298a37" translate="yes" xml:space="preserve">
          <source>When considering potential Members, the Council will look at candidates with a comprehensive view of their contributions. This will include but is not limited to code, code review, infrastructure work, mailing list and chat participation, community help/building, education and outreach, design work, etc. We are deliberately not setting arbitrary quantitative metrics (like &amp;ldquo;100 commits in this repo&amp;rdquo;) to avoid encouraging behavior that plays to the metrics rather than the project&amp;rsquo;s overall well-being. We want to encourage a diverse array of backgrounds, viewpoints and talents in our team, which is why we explicitly do not define code as the sole metric on which council membership will be evaluated.</source>
          <target state="translated">会員候補者を検討する際、理事会は候補者の貢献を包括的に検討します。これには、コード、コードレビュー、インフラストラクチャの作業、メーリングリストとチャットへの参加、コミュニティのヘルプ/構築、教育とアウトリーチ、設計作業などが含まれますが、これらに限定されません。このレポ」）は、プロジェクトの全体的な幸福ではなく、メトリックに影響を与える行動を奨励することを回避するためです。私たちは、チーム内のさまざまな背景、視点、才能を奨励したいと考えています。そのため、評議会のメンバーシップが評価される唯一の指標としてコードを明示的に定義していません。</target>
        </trans-unit>
        <trans-unit id="3afb0a37a10edd1baec0a1dc8d2095269323f16d" translate="yes" xml:space="preserve">
          <source>When creating a 0-d array from an array scalar use &lt;code&gt;f-&amp;gt;setitem&lt;/code&gt; instead of the standard copy from an array scalar. Must use if you don&amp;rsquo;t define an array scalar to go along with the data-type.</source>
          <target state="translated">配列スカラーから0-d配列を作成するときは、配列スカラーからの標準のコピーの代わりに &lt;code&gt;f-&amp;gt;setitem&lt;/code&gt; を使用してください。データ型に合わせて配列スカラーを定義しない場合に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="8887c1561ce70af56f037b9ba953356547c232a4" translate="yes" xml:space="preserve">
          <source>When creating a new masked array with a simple, non-structured datatype, the mask is initially set to the special value &lt;a href=&quot;maskedarray.baseclass#numpy.ma.nomask&quot;&gt;&lt;code&gt;nomask&lt;/code&gt;&lt;/a&gt;, that corresponds roughly to the boolean &lt;code&gt;False&lt;/code&gt;. Trying to set an element of &lt;a href=&quot;maskedarray.baseclass#numpy.ma.nomask&quot;&gt;&lt;code&gt;nomask&lt;/code&gt;&lt;/a&gt; will fail with a &lt;a href=&quot;https://docs.python.org/dev/library/exceptions.html#TypeError&quot;&gt;&lt;code&gt;TypeError&lt;/code&gt;&lt;/a&gt; exception, as a boolean does not support item assignment.</source>
          <target state="translated">単純な非構造化データ型で新しいマスクされた配列を作成する場合、マスクは最初、ブール値 &lt;code&gt;False&lt;/code&gt; にほぼ対応する特別な値&lt;a href=&quot;maskedarray.baseclass#numpy.ma.nomask&quot;&gt; &lt;code&gt;nomask&lt;/code&gt; に&lt;/a&gt;設定されます。ブール値はアイテムの割り当てをサポートしていないため、&lt;a href=&quot;maskedarray.baseclass#numpy.ma.nomask&quot;&gt; &lt;code&gt;nomask&lt;/code&gt; の&lt;/a&gt;要素を設定しようとすると&lt;a href=&quot;https://docs.python.org/dev/library/exceptions.html#TypeError&quot;&gt; &lt;code&gt;TypeError&lt;/code&gt; &lt;/a&gt;例外で失敗します。</target>
        </trans-unit>
        <trans-unit id="4e6d2af630e30f862a489ba6df45674126eb3cd4" translate="yes" xml:space="preserve">
          <source>When creating an array of datetimes from a string, it is still possible to automatically select the unit from the inputs, by using the datetime type with generic units.</source>
          <target state="translated">文字列からdatetimeの配列を作成する場合でも、一般的な単位を持つdatetime型を使用することで、入力から自動的に単位を選択することができます。</target>
        </trans-unit>
        <trans-unit id="ac49ba1355f1db42e6af84f03eb57484c54f1f5d" translate="yes" xml:space="preserve">
          <source>When cross-compiling with numpy distutils, it might be necessary to use modified npy-pkg-config files. Using the default/generated files will link with the host libraries (i.e. libnpymath.a). For cross-compilation you of-course need to link with target libraries, while using the host Python installation.</source>
          <target state="translated">numpy distutilsとのクロスコンパイルを行う場合、修正されたnpy-pkg-configファイルを使用する必要があるかもしれません。デフォルト/生成されたファイルを使用すると、ホストライブラリ(例:libnpymath.a)とリンクします。クロスコンパイルのためには、もちろん、ホストのPythonインストールを使用しながら、ターゲットライブラリとリンクする必要があります。</target>
        </trans-unit>
        <trans-unit id="8f67c8b0b4f5cc7d1d888ed98b880f842ee42d75" translate="yes" xml:space="preserve">
          <source>When either of the dimensions compared is one, the other is used. In other words, dimensions with size 1 are stretched or &amp;ldquo;copied&amp;rdquo; to match the other.</source>
          <target state="translated">比較されるディメンションのいずれかが一方の場合、もう一方が使用されます。つまり、サイズ1の寸法は、他の寸法と一致するように引き伸ばされるか、「コピー」されます。</target>
        </trans-unit>
        <trans-unit id="36a5c7d333e9c484967d9590699c121ae8287b5d" translate="yes" xml:space="preserve">
          <source>When either of the elements is masked, the result is masked as well, but the underlying boolean data are still set, with self and other considered equal if both are masked, and unequal otherwise.</source>
          <target state="translated">どちらかの要素がマスクされている場合、結果もマスクされますが、基礎となるブーリアンデータはまだ設定されており、selfとotherが両方マスクされている場合は等しく、そうでない場合は不等しくなります。</target>
        </trans-unit>
        <trans-unit id="2c15c829ea1146c460c63d87fff55a43784eaa99" translate="yes" xml:space="preserve">
          <source>When estimating the standard error of a proportion in a population by using a random sample, the normal distribution works well unless the product p*n &amp;lt;=5, where p = population proportion estimate, and n = number of samples, in which case the binomial distribution is used instead. For example, a sample of 15 people shows 4 who are left handed, and 11 who are right handed. Then p = 4/15 = 27%. 0.27*15 = 4, so the binomial distribution should be used in this case.</source>
          <target state="translated">ランダムサンプルを使用して母集団の比率の標準誤差を推定する場合、積p * n &amp;lt;= 5でない限り、正規分布はうまく機能します。代わりに二項分布が使用されます。たとえば、15人のサンプルは、左利きの4人と右利きの11人を示しています。次に、p = 4/15 = 27％です。0.27 * 15 = 4なので、この場合は二項分布を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="09930c9cc0372480cd647d7e9b5ec7bd58cefab8" translate="yes" xml:space="preserve">
          <source>When fewer indices are provided than the number of axes, the missing indices are considered complete slices&lt;code&gt;:&lt;/code&gt;</source>
          <target state="translated">提供されるインデックスが軸の数より少ない場合、欠落しているインデックスは完全なスライスと見なされます &lt;code&gt;:&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b79bfc37b770b9a9d472063cecf571e647616c67" translate="yes" xml:space="preserve">
          <source>When fid is a file object, array contents are directly written to the file, bypassing the file object&amp;rsquo;s &lt;code&gt;write&lt;/code&gt; method. As a result, tofile cannot be used with files objects supporting compression (e.g., GzipFile) or file-like objects that do not support &lt;code&gt;fileno()&lt;/code&gt; (e.g., BytesIO).</source>
          <target state="translated">fidがファイルオブジェクトの場合、配列の内容はファイルオブジェクトの &lt;code&gt;write&lt;/code&gt; メソッドをバイパスして、直接ファイルに書き込まれます。その結果、tofileは、圧縮をサポートするファイルオブジェクト（GzipFileなど）または &lt;code&gt;fileno()&lt;/code&gt; をサポートしないファイル類似オブジェクト（BytesIOなど）では使用できません。</target>
        </trans-unit>
        <trans-unit id="aefa8c4cd90708b249d563eead9370ff301bdaf2" translate="yes" xml:space="preserve">
          <source>When finished:</source>
          <target state="translated">終わったら</target>
        </trans-unit>
        <trans-unit id="b8650f4614cacd7afc4a45f34e856756be0c8acc" translate="yes" xml:space="preserve">
          <source>When forcing an iteration order, we observed that the external loop option may provide the elements in smaller chunks because the elements can&amp;rsquo;t be visited in the appropriate order with a constant stride. When writing C code, this is generally fine, however in pure Python code this can cause a significant reduction in performance.</source>
          <target state="translated">反復順序を強制すると、要素が一定のストライドで適切な順序でアクセスできないため、外部ループオプションが要素を小さなチャンクで提供する可能性があることがわかりました。Cコードを作成する場合、これは通常問題ありませんが、純粋なPythonコードでは、パフォーマンスが大幅に低下する可能性があります。</target>
        </trans-unit>
        <trans-unit id="70fcc2c9e602ae36838f0ffe9f9889f2373533f4" translate="yes" xml:space="preserve">
          <source>When giving examples, we will use the following conventions:</source>
          <target state="translated">例を挙げる際には、以下のような慣例を使用します。</target>
        </trans-unit>
        <trans-unit id="f35ea57e8d85acee84ee1ddb5c53faafa07f0d16" translate="yes" xml:space="preserve">
          <source>When it comes to the data science ecosystem, Python and NumPy are built with the user in mind. One of the best examples of this is the built-in access to documentation. Every object contains the reference to a string, which is known as the &lt;strong&gt;docstring&lt;/strong&gt;. In most cases, this docstring contains a quick and concise summary of the object and how to use it. Python has a built-in &lt;code&gt;help()&lt;/code&gt; function that can help you access this information. This means that nearly any time you need more information, you can use &lt;code&gt;help()&lt;/code&gt; to quickly find the information that you need.</source>
          <target state="translated">データサイエンスエコシステムに関して言えば、PythonとNumPyはユーザーを念頭に置いて構築されています。これの最も良い例の1つは、ドキュメントへの組み込みアクセスです。すべてのオブジェクトには、&lt;strong&gt;docstring&lt;/strong&gt;と呼ばれる文字列への参照が含まれています。ほとんどの場合、このdocstringには、オブジェクトの簡潔で簡潔な要約とその使用方法が含まれています。Pythonには、この情報へのアクセスに &lt;code&gt;help()&lt;/code&gt; 組み込みのhelp（）関数があります。つまり、より多くの情報が必要なときはいつでも、 &lt;code&gt;help()&lt;/code&gt; を使用して必要な情報をすばやく見つけることができます。</target>
        </trans-unit>
        <trans-unit id="b9b252a9e3ddb6a4daaa0819da4dce1d5c66c848" translate="yes" xml:space="preserve">
          <source>When matplotlib is imported in the example, the Example code will be wrapped in &lt;code&gt;matplotlib&amp;rsquo;s Sphinx `plot&lt;/code&gt; directive &amp;lt;&lt;a href=&quot;http://matplotlib.org/sampledoc/extensions.html&quot;&gt;http://matplotlib.org/sampledoc/extensions.html&lt;/a&gt;&amp;gt;`_. When matplotlib is not explicitly imported, &lt;code&gt; plot::&lt;/code&gt; can be used directly if &lt;a href=&quot;https://matplotlib.org/api/sphinxext_plot_directive_api.html#module-matplotlib.sphinxext.plot_directive&quot;&gt;&lt;code&gt;matplotlib.sphinxext.plot_directive&lt;/code&gt;&lt;/a&gt; is loaded as a Sphinx extension in &lt;code&gt;conf.py&lt;/code&gt;.</source>
          <target state="translated">matplotlibがサンプルにインポートされると、サンプルコードは &lt;code&gt;matplotlib&amp;rsquo;s Sphinx `plot&lt;/code&gt; ディレクティブ&amp;lt; &lt;a href=&quot;http://matplotlib.org/sampledoc/extensions.html&quot;&gt;http://matplotlib.org/sampledoc/extensions.html&lt;/a&gt; &amp;gt; `_にラップされます。 matplotlibのは、明示的にインポートされていない場合は、 &lt;code&gt; plot::&lt;/code&gt; 場合は、直接使用することができます&lt;a href=&quot;https://matplotlib.org/api/sphinxext_plot_directive_api.html#module-matplotlib.sphinxext.plot_directive&quot;&gt; &lt;code&gt;matplotlib.sphinxext.plot_directive&lt;/code&gt; が&lt;/a&gt;でSphinxの拡張機能としてロードされます &lt;code&gt;conf.py&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c71cf348548e71c4885bb0a433c67bf4fdec31b8" translate="yes" xml:space="preserve">
          <source>When merging contributions, a committer is responsible for ensuring that those meet the requirements outlined in the &lt;a href=&quot;index#guidelines&quot;&gt;Development process guidelines&lt;/a&gt; for NumPy. Also, check that new features and backwards compatibility breaks were discussed on the &lt;a href=&quot;https://mail.python.org/mailman/listinfo/numpy-discussion&quot;&gt;numpy-discussion mailing list&lt;/a&gt;.</source>
          <target state="translated">コントリビューションをマージする場合、コミッターは、コントリビューションがNumPyの&lt;a href=&quot;index#guidelines&quot;&gt;開発プロセスガイドラインに&lt;/a&gt;概説されている要件を満たしていることを確認する責任があります。また、&lt;a href=&quot;https://mail.python.org/mailman/listinfo/numpy-discussion&quot;&gt;numpy-discussionメーリングリスト&lt;/a&gt;で新機能と下位互換性の問題が議論されていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="d35b37d44b28508587e123d157336a91b6e8c01f" translate="yes" xml:space="preserve">
          <source>When multiple arrays are involved in an operation, you may want to use the same broadcasting rules that the math operations (&lt;em&gt;i.e.&lt;/em&gt; the ufuncs) use. This can be done easily using the &lt;a href=&quot;../reference/c-api/types-and-structures#c.PyArrayMultiIterObject&quot;&gt;&lt;code&gt;PyArrayMultiIterObject&lt;/code&gt;&lt;/a&gt;. This is the object returned from the Python command numpy.broadcast and it is almost as easy to use from C. The function &lt;a href=&quot;../reference/c-api/array#c.PyArray_MultiIterNew&quot;&gt;&lt;code&gt;PyArray_MultiIterNew&lt;/code&gt;&lt;/a&gt; ( &lt;code&gt;n&lt;/code&gt;, &lt;code&gt;...&lt;/code&gt; ) is used (with &lt;code&gt;n&lt;/code&gt; input objects in place of &lt;code&gt;...&lt;/code&gt; ). The input objects can be arrays or anything that can be converted into an array. A pointer to a PyArrayMultiIterObject is returned. Broadcasting has already been accomplished which adjusts the iterators so that all that needs to be done to advance to the next element in each array is for PyArray_ITER_NEXT to be called for each of the inputs. This incrementing is automatically performed by &lt;a href=&quot;../reference/c-api/array#c.PyArray_MultiIter_NEXT&quot;&gt;&lt;code&gt;PyArray_MultiIter_NEXT&lt;/code&gt;&lt;/a&gt; ( &lt;code&gt;obj&lt;/code&gt; ) macro (which can handle a multiterator &lt;code&gt;obj&lt;/code&gt; as either a &lt;code&gt;PyArrayMultiObject *&lt;/code&gt; or a &lt;a href=&quot;https://docs.python.org/dev/c-api/structures.html#c.PyObject&quot;&gt;&lt;code&gt;PyObject *&lt;/code&gt;&lt;/a&gt;). The data from input number &lt;code&gt;i&lt;/code&gt; is available using &lt;a href=&quot;../reference/c-api/array#c.PyArray_MultiIter_DATA&quot;&gt;&lt;code&gt;PyArray_MultiIter_DATA&lt;/code&gt;&lt;/a&gt; ( &lt;code&gt;obj&lt;/code&gt;, &lt;code&gt;i&lt;/code&gt; ) and the total (broadcasted) size as &lt;code&gt;PyArray_MultiIter_SIZE&lt;/code&gt; ( &lt;code&gt;obj&lt;/code&gt;). An example of using this feature follows.</source>
          <target state="translated">複数の配列が操作に関係している場合、数学操作（&lt;em&gt;つまり&lt;/em&gt;、ufuncs）が使用するのと同じブロードキャストルールを使用することができます。これは、&lt;a href=&quot;../reference/c-api/types-and-structures#c.PyArrayMultiIterObject&quot;&gt; &lt;code&gt;PyArrayMultiIterObject&lt;/code&gt; &lt;/a&gt;を使用して簡単に実行できます。これはPythonコマンドnumpy.broadcastから返されるオブジェクトであり、Cから使用するのとほぼ同じくらい簡単です。関数&lt;a href=&quot;../reference/c-api/array#c.PyArray_MultiIterNew&quot;&gt; &lt;code&gt;PyArray_MultiIterNew&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;n&lt;/code&gt; 、 &lt;code&gt;...&lt;/code&gt; ）が使用されます（ &lt;code&gt;...&lt;/code&gt; の代わりに &lt;code&gt;n&lt;/code&gt; 個の入力オブジェクトが使用されます）。入力オブジェクトは、配列または配列に変換できるものであれば何でもかまいません。 PyArrayMultiIterObjectへのポインタが返されます。各配列の次の要素に進むために必要なのは、入力ごとにPyArray_ITER_NEXTが呼び出されるようにするために、イテレータを調整するブロードキャストはすでに完了しています。このインクリメントは、&lt;a href=&quot;../reference/c-api/array#c.PyArray_MultiIter_NEXT&quot;&gt; &lt;code&gt;PyArray_MultiIter_NEXT&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;obj&lt;/code&gt; ）マクロ（マルチ &lt;code&gt;PyArrayMultiObject *&lt;/code&gt; &lt;code&gt;obj&lt;/code&gt; をPyArrayMultiObject *または&lt;a href=&quot;https://docs.python.org/dev/c-api/structures.html#c.PyObject&quot;&gt; &lt;code&gt;PyObject *&lt;/code&gt; &lt;/a&gt;として処理できます）によって自動的に実行されます。入力された番号からデータ &lt;code&gt;i&lt;/code&gt; を使用して利用可能である&lt;a href=&quot;../reference/c-api/array#c.PyArray_MultiIter_DATA&quot;&gt; &lt;code&gt;PyArray_MultiIter_DATA&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;obj&lt;/code&gt; 、 &lt;code&gt;i&lt;/code&gt; ）および合計（ブロードキャスト）サイズを &lt;code&gt;PyArray_MultiIter_SIZE&lt;/code&gt; （ &lt;code&gt;obj&lt;/code&gt; ）として。この機能の使用例を次に示します。</target>
        </trans-unit>
        <trans-unit id="36f72cd33b97d536492271e1edd9154022c923bc" translate="yes" xml:space="preserve">
          <source>When multiple examples are provided, they should be separated by blank lines. Comments explaining the examples should have blank lines both above and below them:</source>
          <target state="translated">複数の例が提供されている場合は、それらの例は空行で区切ってください。例を説明するコメントは、その上と下の両方に空行を入れてください。</target>
        </trans-unit>
        <trans-unit id="7c4c339ad493bfce465346e967265bb9c039f51a" translate="yes" xml:space="preserve">
          <source>When one of &lt;code&gt;actual&lt;/code&gt; and &lt;code&gt;desired&lt;/code&gt; is a scalar and the other is array_like, the function checks that each element of the array_like object is equal to the scalar.</source>
          <target state="translated">以下の場合 &lt;code&gt;actual&lt;/code&gt; と &lt;code&gt;desired&lt;/code&gt; スカラーであり、他のISはarray_likeオブジェクトの各要素はスカラーに等しいこと、機能チェックをarray_like。</target>
        </trans-unit>
        <trans-unit id="2eb53e9a562d149565801498a40e0d889c5c04ae" translate="yes" xml:space="preserve">
          <source>When one of &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; is a scalar and the other is array_like, the function checks that each element of the array_like object is equal to the scalar.</source>
          <target state="translated">とき &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; スカラーであり、array_likeオブジェクトの各要素はスカラーに等しいことを他のISは、機能チェックをarray_like。</target>
        </trans-unit>
        <trans-unit id="63eda21eb7811aeacc325fcf56f657d21ccc05f4" translate="yes" xml:space="preserve">
          <source>When one or more of the arrays to be concatenated is a MaskedArray, this function will return a MaskedArray object instead of an ndarray, but the input masks are &lt;em&gt;not&lt;/em&gt; preserved. In cases where a MaskedArray is expected as input, use the ma.concatenate function from the masked array module instead.</source>
          <target state="translated">連結される1つ以上の配列がMaskedArrayである場合、この関数はndarrayではなくMaskedArrayオブジェクトを返しますが、入力マスクは保持され&lt;em&gt;ません&lt;/em&gt;。MaskedArrayが入力として期待される場合は、代わりに、マスクされた配列モジュールのma.concatenate関数を使用してください。</target>
        </trans-unit>
        <trans-unit id="eccfc4e1a7be21e04b2017257495e340f746e64f" translate="yes" xml:space="preserve">
          <source>When only &lt;code&gt;condition&lt;/code&gt; is provided, this function is a shorthand for &lt;code&gt;np.asarray(condition).nonzero()&lt;/code&gt;. Using &lt;a href=&quot;numpy.nonzero#numpy.nonzero&quot;&gt;&lt;code&gt;nonzero&lt;/code&gt;&lt;/a&gt; directly should be preferred, as it behaves correctly for subclasses. The rest of this documentation covers only the case where all three arguments are provided.</source>
          <target state="translated">&lt;code&gt;condition&lt;/code&gt; のみが指定されている場合、この関数は &lt;code&gt;np.asarray(condition).nonzero()&lt;/code&gt; の省略形です。サブクラスに対して正しく動作するため、&lt;a href=&quot;numpy.nonzero#numpy.nonzero&quot;&gt; &lt;code&gt;nonzero&lt;/code&gt; &lt;/a&gt;直接使用することをお勧めします。このドキュメントの残りの部分では、3つの引数がすべて指定されている場合のみを扱います。</target>
        </trans-unit>
        <trans-unit id="b8419db09cea322048fba5bff5f136770a8b6713" translate="yes" xml:space="preserve">
          <source>When only &lt;code&gt;condition&lt;/code&gt; is provided, this function is identical to &lt;a href=&quot;numpy.ma.nonzero#numpy.ma.nonzero&quot;&gt;&lt;code&gt;nonzero&lt;/code&gt;&lt;/a&gt;. The rest of this documentation covers only the case where all three arguments are provided.</source>
          <target state="translated">&lt;code&gt;condition&lt;/code&gt; のみが指定されている場合、この関数は&lt;a href=&quot;numpy.ma.nonzero#numpy.ma.nonzero&quot;&gt; &lt;code&gt;nonzero&lt;/code&gt; &lt;/a&gt;と同じです。このドキュメントの残りの部分では、3つの引数がすべて指定されている場合のみを扱います。</target>
        </trans-unit>
        <trans-unit id="f0ab5d9437775df5178e579cfc66f050d2a606a1" translate="yes" xml:space="preserve">
          <source>When only &lt;code&gt;condition&lt;/code&gt; is provided, this function is identical to &lt;a href=&quot;numpy.nonzero#numpy.nonzero&quot;&gt;&lt;code&gt;nonzero&lt;/code&gt;&lt;/a&gt;. The rest of this documentation covers only the case where all three arguments are provided.</source>
          <target state="translated">&lt;code&gt;condition&lt;/code&gt; のみが指定されている場合、この関数は&lt;a href=&quot;numpy.nonzero#numpy.nonzero&quot;&gt; &lt;code&gt;nonzero&lt;/code&gt; &lt;/a&gt;と同じです。このドキュメントの残りの部分では、3つの引数すべてが提供されている場合のみを取り上げます。</target>
        </trans-unit>
        <trans-unit id="a83dea336fc44b86e10fe7d04631005f6869d53b" translate="yes" xml:space="preserve">
          <source>When opening the saved &lt;code&gt;.npz&lt;/code&gt; file with &lt;a href=&quot;numpy.load#numpy.load&quot;&gt;&lt;code&gt;load&lt;/code&gt;&lt;/a&gt; a &lt;code&gt;NpzFile&lt;/code&gt; object is returned. This is a dictionary-like object which can be queried for its list of arrays (with the &lt;code&gt;.files&lt;/code&gt; attribute), and for the arrays themselves.</source>
          <target state="translated">保存された &lt;code&gt;.npz&lt;/code&gt; ファイルを&lt;a href=&quot;numpy.load#numpy.load&quot;&gt; &lt;code&gt;load&lt;/code&gt; &lt;/a&gt;で &lt;code&gt;NpzFile&lt;/code&gt; と、NpzFileオブジェクトが返されます。これは辞書のようなオブジェクトであり、配列のリスト（ &lt;code&gt;.files&lt;/code&gt; 属性を使用）および配列自体を照会できます。</target>
        </trans-unit>
        <trans-unit id="db678ddd8c249ca5b7124cc39a503e60a8883bd8" translate="yes" xml:space="preserve">
          <source>When operating and manipulating arrays, their data is sometimes copied into a new array and sometimes not. This is often a source of confusion for beginners. There are three cases:</source>
          <target state="translated">配列を操作したり操作したりするときに、そのデータが新しい配列にコピーされることもあれば、コピーされないこともあります。これは、初心者にとってはしばしば混乱の元となります。3つのケースがあります。</target>
        </trans-unit>
        <trans-unit id="7826c9c3ec00652f97696ab5820b06d6f4736590" translate="yes" xml:space="preserve">
          <source>When operating on two arrays, NumPy compares their shapes element-wise. It starts with the trailing (i.e. rightmost) dimensions and works its way left. Two dimensions are compatible when</source>
          <target state="translated">2つの配列を操作するとき、NumPyはそれらの形状を要素ごとに比較します。後続の(つまり右端の)次元から始めて、左に向かって作業していきます。以下の場合、2つの次元は互換性があります。</target>
        </trans-unit>
        <trans-unit id="db500670e369fb09767346f1ee93c96337acfc4a" translate="yes" xml:space="preserve">
          <source>When operating on two arrays, NumPy compares their shapes element-wise. It starts with the trailing dimensions and works its way forward. Two dimensions are compatible when</source>
          <target state="translated">2つの配列を操作するとき,NumPyはその形状を要素ごとに比較します.これは,後続の次元から始まり,その先の次元へと進んでいきます.2つの次元は,次の場合に互換性があります.</target>
        </trans-unit>
        <trans-unit id="991db5cc5ea188509eab7bddbbcf6ec194a1d9e5" translate="yes" xml:space="preserve">
          <source>When operating with arrays of different types, the type of the resulting array corresponds to the more general or precise one (a behavior known as upcasting).</source>
          <target state="translated">異なる型の配列を操作する場合,結果として得られる配列の型は,より一般的なものや正確なものに対応します(アップキャスティングと呼ばれる動作).</target>
        </trans-unit>
        <trans-unit id="26e6b9fa52377f35e02d57b8c33d212f74b50ae3" translate="yes" xml:space="preserve">
          <source>When order is &amp;lsquo;A&amp;rsquo; and &lt;a href=&quot;https://docs.python.org/dev/library/functions.html#object&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt; is an array in neither &amp;lsquo;C&amp;rsquo; nor &amp;lsquo;F&amp;rsquo; order, and a copy is forced by a change in dtype, then the order of the result is not necessarily &amp;lsquo;C&amp;rsquo; as expected. This is likely a bug.</source>
          <target state="translated">順序が 'A'で&lt;a href=&quot;https://docs.python.org/dev/library/functions.html#object&quot;&gt; &lt;code&gt;object&lt;/code&gt; &lt;/a&gt;が 'C'でも 'F'でもない配列で、dtypeの変更によってコピーが強制される場合、結果の順序は必ずしも期待どおり 'C'ではありません。これはおそらくバグです。</target>
        </trans-unit>
        <trans-unit id="5be535caa0bb6516144fc1de604b8372d3c9991d" translate="yes" xml:space="preserve">
          <source>When payments are due (&amp;lsquo;begin&amp;rsquo; (1) or &amp;lsquo;end&amp;rsquo; (0))</source>
          <target state="translated">支払い期限（ 'begin'（1）または 'end'（0））</target>
        </trans-unit>
        <trans-unit id="9149bcf3649f5259f262c786b3a7a6478a7a8e0f" translate="yes" xml:space="preserve">
          <source>When payments are due (&amp;lsquo;begin&amp;rsquo; (1) or &amp;lsquo;end&amp;rsquo; (0)). Defaults to {&amp;lsquo;end&amp;rsquo;, 0}.</source>
          <target state="translated">支払い期限（「開始」（1）または「終了」（0））。デフォルトは{'end'、0}です。</target>
        </trans-unit>
        <trans-unit id="6642df63420a359718ac20ea567420cbe3b18377" translate="yes" xml:space="preserve">
          <source>When performance is important for manipulating many business dates with one particular choice of weekmask and holidays, there is an object &lt;a href=&quot;generated/numpy.busdaycalendar#numpy.busdaycalendar&quot;&gt;&lt;code&gt;busdaycalendar&lt;/code&gt;&lt;/a&gt; which stores the data necessary in an optimized form.</source>
          <target state="translated">週マスクと休日の特定の1つの選択で多くのビジネス日付を操作するためにパフォーマンスが重要な場合、最適化された形式で必要なデータを格納するオブジェクト&lt;a href=&quot;generated/numpy.busdaycalendar#numpy.busdaycalendar&quot;&gt; &lt;code&gt;busdaycalendar&lt;/code&gt; &lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="fd00b76d3636aeca15fb36d92b84ae47d7409ff3" translate="yes" xml:space="preserve">
          <source>When positive infinity and negative infinity are present:</source>
          <target state="translated">正の無限大と負の無限大がある場合</target>
        </trans-unit>
        <trans-unit id="bfd35400824f4bd78ecd5a9fec6a8610574752f0" translate="yes" xml:space="preserve">
          <source>When referring to an entirely different module:</source>
          <target state="translated">全く別のモジュールを参照する場合。</target>
        </trans-unit>
        <trans-unit id="b81236c338b918002d5b76ae218758bcc0c4f094" translate="yes" xml:space="preserve">
          <source>When referring to functions in the same sub-module, no prefix is needed, and the tree is searched upwards for a match.</source>
          <target state="translated">同じサブモジュール内の関数を参照する場合、接頭辞は不要で、ツリーは上向きに検索されます。</target>
        </trans-unit>
        <trans-unit id="6cda328920c935f49e7ba607f4bde2c82e352842" translate="yes" xml:space="preserve">
          <source>When reviewing pull requests, please use workflow tracking features on GitHub as appropriate:</source>
          <target state="translated">プルリクエストをレビューする際には、GitHubのワークフロー・トラッキング機能を適宜ご利用ください。</target>
        </trans-unit>
        <trans-unit id="de7c6f732a621082b328f0e10ba6ebce8f1a6e6b" translate="yes" xml:space="preserve">
          <source>When saving dictionaries, the dictionary keys become filenames inside the ZIP archive. Therefore, keys should be valid filenames. E.g., avoid keys that begin with &lt;code&gt;/&lt;/code&gt; or contain &lt;code&gt;.&lt;/code&gt;.</source>
          <target state="translated">辞書を保存するとき、辞書キーはZIPアーカイブ内のファイル名になります。したがって、キーは有効なファイル名である必要があります。たとえば、 &lt;code&gt;/&lt;/code&gt; で始まるキーや &lt;code&gt;.&lt;/code&gt; 含むキーは避けてください。。</target>
        </trans-unit>
        <trans-unit id="a563656ae79c2922818f2a82bafe22a75de09b5e" translate="yes" xml:space="preserve">
          <source>When set to &lt;code&gt;madvise&lt;/code&gt; NumPy will typically use hugepages for a performance boost. This behaviour can be modified by setting the environment variable:</source>
          <target state="translated">&lt;code&gt;madvise&lt;/code&gt; に設定すると、NumPyは通常、パフォーマンスを向上させるために巨大なページを使用します。この動作は、環境変数を設定することで変更できます。</target>
        </trans-unit>
        <trans-unit id="57212127eb9536990cda5db105b01bdf8367e735" translate="yes" xml:space="preserve">
          <source>When spaces are used as delimiters, or when no delimiter has been given as input, there should not be any missing data between two fields.</source>
          <target state="translated">スペースがデリミタとして使用されている場合、または入力としてデリミタが与えられていない場合、2つのフィールド間にデータの欠落があってはならない。</target>
        </trans-unit>
        <trans-unit id="4370d934ab543968b812927b0ca16a2cbda45f5d" translate="yes" xml:space="preserve">
          <source>When specifying a target using &lt;code&gt;-s&lt;/code&gt;, &lt;code&gt;-t&lt;/code&gt;, or &lt;code&gt;--python&lt;/code&gt;, additional arguments may be forwarded to the target embedded by &lt;code&gt;runtests.py&lt;/code&gt; by passing the extra arguments after a bare &lt;code&gt;--&lt;/code&gt;. For example, to run a test method with the &lt;code&gt;--pdb&lt;/code&gt; flag forwarded to the target, run the following:</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; 、 &lt;code&gt;-t&lt;/code&gt; 、または &lt;code&gt;--python&lt;/code&gt; を使用してターゲットを指定する場合、追加の引数は、裸の &lt;code&gt;--&lt;/code&gt; 後に追加の引数を渡すことにより、 &lt;code&gt;runtests.py&lt;/code&gt; によって埋め込まれたターゲットに転送される場合があります。たとえば、 &lt;code&gt;--pdb&lt;/code&gt; フラグをターゲットに転送してテストメソッドを実行するには、次のコマンドを実行します。</target>
        </trans-unit>
        <trans-unit id="de5db3a5e4bce528f298ed2c8c86e1143611c165" translate="yes" xml:space="preserve">
          <source>When storing a multi-byte value in memory as a sequence of bytes, the sequence addresses/sends/stores the least significant byte first (lowest address) and the most significant byte last (highest address). Common in x86 processors.</source>
          <target state="translated">マルチバイトの値をバイト列としてメモリに格納する場合、バイト列は、最下位のバイトの先頭(最下位アドレス)と最上位のバイトの最後(最上位アドレス)をアドレス/送信/格納します。x86プロセッサでは一般的。</target>
        </trans-unit>
        <trans-unit id="ea57d2031842d794e355da55aa4d649b5ca424d5" translate="yes" xml:space="preserve">
          <source>When storing a multi-byte value in memory as a sequence of bytes, the sequence addresses/sends/stores the most significant byte first (lowest address) and the least significant byte last (highest address). Common in micro-processors and used for transmission of data over network protocols.</source>
          <target state="translated">マルチバイト値をバイト列としてメモリに格納する場合、最も重要なバイトの先頭(最低アドレス)と、最も重要でないバイトの最後(最高アドレス)をアドレス/送信/格納します。マイクロプロセッサでは一般的で、ネットワークプロトコル上でのデータ伝送に使用されます。</target>
        </trans-unit>
        <trans-unit id="2c6d6090a315dc06167791d55632ca0e61a0eb7f" translate="yes" xml:space="preserve">
          <source>When studying hypothesis tests that assume normality, seeing how the tests perform on data from a Cauchy distribution is a good indicator of their sensitivity to a heavy-tailed distribution, since the Cauchy looks very much like a Gaussian distribution, but with heavier tails.</source>
          <target state="translated">正規性を仮定した仮説検定を研究するとき、コーキー分布からのデータで検定がどのように実行されるかを見ることは、コーキーがガウス分布に非常に似ているが、より重い尾を持つので、重い尾を持つ分布に対する感度の良い指標となります。</target>
        </trans-unit>
        <trans-unit id="4d6b9c752dcf618e14ab373ad09afb2c5aaf1513" translate="yes" xml:space="preserve">
          <source>When sub-classing &lt;code&gt;ndarray&lt;/code&gt; or creating duck-types that mimic the &lt;code&gt;ndarray&lt;/code&gt; interface, it is your responsibility to decide how aligned your APIs will be with those of numpy. For convenience, many numpy functions that have a corresponding &lt;code&gt;ndarray&lt;/code&gt; method (e.g., &lt;code&gt;sum&lt;/code&gt;, &lt;code&gt;mean&lt;/code&gt;, &lt;code&gt;take&lt;/code&gt;, &lt;code&gt;reshape&lt;/code&gt;) work by checking if the first argument to a function has a method of the same name. If it exists, the method is called instead of coercing the arguments to a numpy array.</source>
          <target state="translated">&lt;code&gt;ndarray&lt;/code&gt; をサブクラス化する場合、または &lt;code&gt;ndarray&lt;/code&gt; インターフェイスを模倣するduck-typeを作成する場合、APIをnumpyのAPIとどの程度整合させるかを決定するのはユーザーの責任です。便宜上、対応する必要があり、多くのnumpyの機能 &lt;code&gt;ndarray&lt;/code&gt; 方法（例えば、 &lt;code&gt;sum&lt;/code&gt; 、 &lt;code&gt;mean&lt;/code&gt; 、 &lt;code&gt;take&lt;/code&gt; 、 &lt;code&gt;reshape&lt;/code&gt; 関数の最初の引数が同じ名前のメソッドを持っているかどうかをチェックすることによって）仕事。存在する場合は、引数をnumpy配列に強制変換する代わりに、メソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="83471109ed39b7eca8654b0b5b56f710df2f0ed6" translate="yes" xml:space="preserve">
          <source>When success (0 return value) is returned, either out_arr is filled with a non-NULL PyArrayObject and the rest of the parameters are untouched, or out_arr is filled with NULL, and the rest of the parameters are filled.</source>
          <target state="translated">成功(戻り値0)が返されると、out_arrはNULLではないPyArrayObjectで埋められ、残りのパラメータはそのままになるか、out_arrはNULLで埋められ、残りのパラメータは埋められるかのどちらかになります。</target>
        </trans-unit>
        <trans-unit id="c5848cbfcc751d6fb624a1cce409c076b5cc5302" translate="yes" xml:space="preserve">
          <source>When the &amp;ldquo;external_loop&amp;rdquo; was not used during construction, but is desired, this modifies the iterator to behave as if the flag was specified.</source>
          <target state="translated">「external_loop」が構築中に使用されなかったが望ましい場合、これにより、フラグが指定されたかのように動作するようにイテレーターが変更されます。</target>
        </trans-unit>
        <trans-unit id="a1da80e9817b29febb418ac2727dd8feb1e9ca57" translate="yes" xml:space="preserve">
          <source>When the &amp;ldquo;multi_index&amp;rdquo; flag was specified, this removes it, allowing the internal iteration structure to be optimized further.</source>
          <target state="translated">「multi_index」フラグが指定された場合、これによりフラグが削除され、内部反復構造をさらに最適化できるようになります。</target>
        </trans-unit>
        <trans-unit id="ea45d329df78eba717c22414db760106850fd424" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;axis&lt;/code&gt; keyword is specified an array of appropriate size is returned.</source>
          <target state="translated">ときに &lt;code&gt;axis&lt;/code&gt; キーワードが指定された適切なサイズの配列が返されます。</target>
        </trans-unit>
        <trans-unit id="3fdd0f5189c6dc8a23dfca9586f442b975510baf" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;axis&lt;/code&gt; keyword is used an array is returned.</source>
          <target state="translated">ときに &lt;code&gt;axis&lt;/code&gt; キーワードが使用されている配列が返されます。</target>
        </trans-unit>
        <trans-unit id="53c50ce51f38684cf2835cdea8b4002b8bbf92a8" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;c_index&lt;/code&gt; or &lt;code&gt;f_index&lt;/code&gt; flag was used, this property provides access to the index. Raises a ValueError if accessed and &lt;code&gt;has_index&lt;/code&gt; is False.</source>
          <target state="translated">場合 &lt;code&gt;c_index&lt;/code&gt; 又は &lt;code&gt;f_index&lt;/code&gt; フラグを使用し、このプロパティは、インデックスへのアクセスを提供します。アクセスされ、 &lt;code&gt;has_index&lt;/code&gt; がFalseの場合、ValueErrorを発生させます。</target>
        </trans-unit>
        <trans-unit id="76706b5098ca6b382b941c090b506c3f0587d432" translate="yes" xml:space="preserve">
          <source>When the &lt;code&gt;multi_index&lt;/code&gt; flag was used, this property provides access to the index. Raises a ValueError if accessed accessed and &lt;code&gt;has_multi_index&lt;/code&gt; is False.</source>
          <target state="translated">とき &lt;code&gt;multi_index&lt;/code&gt; フラグが使用された、このプロパティは、インデックスへのアクセスを提供します。アクセスがアクセスされ、 &lt;code&gt;has_multi_index&lt;/code&gt; がFalseの場合、ValueErrorを発生させます。</target>
        </trans-unit>
        <trans-unit id="ac5d59cc3a2303eaecb29429bf707b0c3c3bedde" translate="yes" xml:space="preserve">
          <source>When the DFT is computed for purely real input, the output is Hermitian-symmetric, i.e. the negative frequency terms are just the complex conjugates of the corresponding positive-frequency terms, and the negative-frequency terms are therefore redundant. This function does not compute the negative frequency terms, and the length of the transformed axis of the output is therefore &lt;code&gt;n//2 + 1&lt;/code&gt;.</source>
          <target state="translated">DFTが純粋に実数の入力に対して計算される場合、出力はエルミート対称です。つまり、負の周波数項は対応する正の周波数項の複素共役にすぎないため、負の周波数項は冗長です。この関数は負の周波数項を計算しないため、出力の変換された軸の長さは &lt;code&gt;n//2 + 1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b75d1885e8ca13361f9bec6a445a1ba51b9a5271" translate="yes" xml:space="preserve">
          <source>When the committee (or a committee member) receives a report, they will first determine whether the report is about a clear and severe breach (as defined below). If so, immediate action needs to be taken in addition to the regular report handling process.</source>
          <target state="translated">委員会(または委員会委員)が報告書を受け取った場合、委員会はまず、その報告書が明確かつ重大な違反(以下に定義)に関す るものかどうかを判断する。もしそうであれば、通常の報告書処理プロセスに加えて、直ちに措置を講じる必要がある。</target>
        </trans-unit>
        <trans-unit id="d3d4a45bb9288ccb26e83539df4a7489dddcf142" translate="yes" xml:space="preserve">
          <source>When the data type of &lt;code&gt;a&lt;/code&gt; is longdouble or clongdouble, item() returns a scalar array object because there is no available Python scalar that would not lose information. Void arrays return a buffer object for item(), unless fields are defined, in which case a tuple is returned.</source>
          <target state="translated">データ・タイプとき利用可能なPythonのスカラーだろう失わない情報が存在しないため（）スカラー配列オブジェクトを返すlongdoubleまたはclongdouble、項目です。Void配列は、フィールドが定義されていない限り、item（）のバッファーオブジェクトを返します。その場合、タプルが返されます。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d7c5ae7d2e5fed7aeaee002bc1ee17b1c24ba0a" translate="yes" xml:space="preserve">
          <source>When the dimension of the vector(s) in &lt;code&gt;a&lt;/code&gt; and/or &lt;code&gt;b&lt;/code&gt; does not equal 2 or 3.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; および/または &lt;code&gt;b&lt;/code&gt; のベクトルの次元が2または3に等しくない場合。</target>
        </trans-unit>
        <trans-unit id="dd1fba0c6bb426cf1f952081182426781d82c79b" translate="yes" xml:space="preserve">
          <source>When the error handling for a floating-point error (one of &amp;ldquo;divide&amp;rdquo;, &amp;ldquo;over&amp;rdquo;, &amp;ldquo;under&amp;rdquo;, or &amp;ldquo;invalid&amp;rdquo;) is set to &amp;lsquo;call&amp;rsquo; or &amp;lsquo;log&amp;rsquo;, the function that is called or the log instance that is written to is returned by &lt;a href=&quot;#numpy.geterrcall&quot;&gt;&lt;code&gt;geterrcall&lt;/code&gt;&lt;/a&gt;. This function or log instance has been set with &lt;a href=&quot;numpy.seterrcall#numpy.seterrcall&quot;&gt;&lt;code&gt;seterrcall&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">浮動小数点エラーのエラー処理（「divide」、「over」、「under」、または「invalid」のいずれか）が「call」または「log」に設定されている場合、呼び出される関数またはログインスタンス書き込まれたものは&lt;a href=&quot;#numpy.geterrcall&quot;&gt; &lt;code&gt;geterrcall&lt;/code&gt; &lt;/a&gt;によって返されます。この関数またはログイン&lt;a href=&quot;numpy.seterrcall#numpy.seterrcall&quot;&gt; &lt;code&gt;seterrcall&lt;/code&gt; &lt;/a&gt;、seterrcallで設定されています。</target>
        </trans-unit>
        <trans-unit id="3a105e739e37e79639871fe00f74a7608f41e18f" translate="yes" xml:space="preserve">
          <source>When the flag &lt;a href=&quot;#c.NPY_ITER_EXTERNAL_LOOP&quot;&gt;&lt;code&gt;NPY_ITER_EXTERNAL_LOOP&lt;/code&gt;&lt;/a&gt; is used, the code needs to know the parameters for doing the inner loop. These functions provide that information.</source>
          <target state="translated">フラグ&lt;a href=&quot;#c.NPY_ITER_EXTERNAL_LOOP&quot;&gt; &lt;code&gt;NPY_ITER_EXTERNAL_LOOP&lt;/code&gt; &lt;/a&gt;を使用する場合、コードは内部ループを実行するためのパラメーターを知っている必要があります。これらの関数はその情報を提供します。</target>
        </trans-unit>
        <trans-unit id="a3b33dbd60831369f7fef62a2b038dc2ad278fa8" translate="yes" xml:space="preserve">
          <source>When the flags attribute is retrieved from Python, a special builtin object of this type is constructed. This special type makes it easier to work with the different flags by accessing them as attributes or by accessing them as if the object were a dictionary with the flag names as entries.</source>
          <target state="translated">flags属性がPythonから取得されると、この型の特別な組み込みオブジェクトが構築されます。この特別な型は、属性としてアクセスしたり、オブジェクトがフラグ名をエントリとして持つ辞書であるかのようにアクセスしたりすることで、さまざまなフラグの操作をより簡単にします。</target>
        </trans-unit>
        <trans-unit id="6997b127e257f2d9de0f0028a03e8903521c7172" translate="yes" xml:space="preserve">
          <source>When the index consists of as many integer arrays as the array being indexed has dimensions, the indexing is straight forward, but different from slicing.</source>
          <target state="translated">インデックスを作成する配列が次元を持つ整数配列の数だけインデックスが構成されている場合、インデックス作成は簡単ですが、スライスとは異なります。</target>
        </trans-unit>
        <trans-unit id="74a8e0eaba5b1fd886e8897754dffe2e69872867" translate="yes" xml:space="preserve">
          <source>When the indexed array &lt;code&gt;a&lt;/code&gt; is multidimensional, a single array of indices refers to the first dimension of &lt;code&gt;a&lt;/code&gt;. The following example shows this behavior by converting an image of labels into a color image using a palette.</source>
          <target state="translated">インデックス付き配列 &lt;code&gt;a&lt;/code&gt; が多次元の場合、インデックスの単一配列はaの最初の次元を参照 &lt;code&gt;a&lt;/code&gt; ます。次の例は、パレットを使用してラベルの画像をカラー画像に変換することにより、この動作を示しています。</target>
        </trans-unit>
        <trans-unit id="e3539c51a85d030896869c59fab4a3546a18e92e" translate="yes" xml:space="preserve">
          <source>When the input &lt;code&gt;a&lt;/code&gt; is a time-domain signal and &lt;code&gt;A = fft(a)&lt;/code&gt;, &lt;code&gt;np.abs(A)&lt;/code&gt; is its amplitude spectrum and &lt;code&gt;np.abs(A)**2&lt;/code&gt; is its power spectrum. The phase spectrum is obtained by &lt;code&gt;np.angle(A)&lt;/code&gt;.</source>
          <target state="translated">入力 &lt;code&gt;a&lt;/code&gt; が時間領域信号で &lt;code&gt;A = fft(a)&lt;/code&gt; 場合、 &lt;code&gt;np.abs(A)&lt;/code&gt; はその振幅スペクトルで、 &lt;code&gt;np.abs(A)**2&lt;/code&gt; はそのパワースペクトルです。位相スペクトルは &lt;code&gt;np.angle(A)&lt;/code&gt; によって取得されます。</target>
        </trans-unit>
        <trans-unit id="1367f160bbb5fedd65e0cbb76f7f60e11a8156e2" translate="yes" xml:space="preserve">
          <source>When the input and output arrays are aligned and of the correct type, but the striding is not uniform (non-contiguous and 2-D or larger), then a second looping structure is employed for the calculation. This approach converts all of the iterators for the input and output arguments to iterate over all but the largest dimension. The inner loop is then handled by the underlying 1-D computational loop. The outer loop is a standard iterator loop on the converted iterators. The hardware error flags are checked after each 1-D loop is completed.</source>
          <target state="translated">入力配列と出力配列が正しい型に整列されているが,ストライドが一様ではない場合(非連続で2次元以上),2番目のループ構造が計算に採用されます.このアプローチでは,入力と出力の引数に対するすべてのイテレータを変換して,最大次元を除くすべての次元を反復処理します.内側のループは、基礎となる1次元計算ループによって処理されます。外側のループは、変換されたイテレータ上の標準的なイテレータループです。ハードウェアエラーフラグは、各1次元ループが完了した後にチェックされます。</target>
        </trans-unit>
        <trans-unit id="34e3c1c18b6a533eb7d5554f7595a67b84951780" translate="yes" xml:space="preserve">
          <source>When the input is purely real, its transform is Hermitian, i.e., the component at frequency</source>
          <target state="translated">入力が純粋に実数である場合,その変換はエルミトス式であり,すなわち,周波数</target>
        </trans-unit>
        <trans-unit id="52b34b95d5e176ad47f62260446b195804a6cada" translate="yes" xml:space="preserve">
          <source>When the length of 1D &lt;code&gt;weights&lt;/code&gt; is not the same as the shape of &lt;code&gt;a&lt;/code&gt; along axis.</source>
          <target state="translated">場合1次元の長さ &lt;code&gt;weights&lt;/code&gt; の形状と同じではないに沿って軸。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="af1eaf8889fe184a62b6fd5a964889299281ae31" translate="yes" xml:space="preserve">
          <source>When the nested list is two levels deep, this allows block matrices to be constructed from their components.</source>
          <target state="translated">入れ子になったリストが2レベル深い場合、これにより、ブロック行列をその構成要素から構築することができます。</target>
        </trans-unit>
        <trans-unit id="e5f5bbbcfb6705ce5d9a02195d69308545da2c5f" translate="yes" xml:space="preserve">
          <source>When the optional keys &lt;em&gt;offsets&lt;/em&gt; and &lt;em&gt;titles&lt;/em&gt; are provided, their values must each be lists of the same length as the &lt;em&gt;names&lt;/em&gt; and &lt;em&gt;formats&lt;/em&gt; lists. The &lt;em&gt;offsets&lt;/em&gt; value is a list of byte offsets (limited to &lt;a href=&quot;https://docs.python.org/dev/library/ctypes.html#ctypes.c_int&quot;&gt;&lt;code&gt;ctypes.c_int&lt;/code&gt;&lt;/a&gt;) for each field, while the &lt;em&gt;titles&lt;/em&gt; value is a list of titles for each field (&lt;code&gt;None&lt;/code&gt; can be used if no title is desired for that field). The &lt;em&gt;titles&lt;/em&gt; can be any &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;unicode&lt;/code&gt; object and will add another entry to the fields dictionary keyed by the title and referencing the same field tuple which will contain the title as an additional tuple member.</source>
          <target state="translated">オプションのキー&lt;em&gt;オフセット&lt;/em&gt;と&lt;em&gt;タイトルを指定&lt;/em&gt;する場合、それらの値はそれぞれ、&lt;em&gt;名前&lt;/em&gt;と&lt;em&gt;フォーマットの&lt;/em&gt;リストと同じ長さのリストでなければなりません。&lt;em&gt;オフセット&lt;/em&gt;値はバイトオフセット（これらに限定されのリストである&lt;a href=&quot;https://docs.python.org/dev/library/ctypes.html#ctypes.c_int&quot;&gt; &lt;code&gt;ctypes.c_int&lt;/code&gt; &lt;/a&gt;ながら、各フィールドの）&lt;em&gt;タイトル&lt;/em&gt;値が各フィールドのタイトルのリスト（ある &lt;code&gt;None&lt;/code&gt; ないタイトルがそのフィールドのために所望されていない場合に使用できません）。&lt;em&gt;タイトルの&lt;/em&gt;いずれかであることができる &lt;code&gt;string&lt;/code&gt; または &lt;code&gt;unicode&lt;/code&gt; オブジェクトおよびフィールドに別のエントリを追加するには、タイトルをキーと追加のタプル部材としてタイトルを含むであろう同じフィールドタプルを参照する辞書。</target>
        </trans-unit>
        <trans-unit id="e15e18cad68d6d45da7080a3afbf8bf6942044ae" translate="yes" xml:space="preserve">
          <source>When the optional keys &lt;em&gt;offsets&lt;/em&gt; and &lt;em&gt;titles&lt;/em&gt; are provided, their values must each be lists of the same length as the &lt;em&gt;names&lt;/em&gt; and &lt;em&gt;formats&lt;/em&gt; lists. The &lt;em&gt;offsets&lt;/em&gt; value is a list of byte offsets (limited to &lt;a href=&quot;https://docs.python.org/dev/library/ctypes.html#ctypes.c_int&quot;&gt;&lt;code&gt;ctypes.c_int&lt;/code&gt;&lt;/a&gt;) for each field, while the &lt;em&gt;titles&lt;/em&gt; value is a list of titles for each field (&lt;code&gt;None&lt;/code&gt; can be used if no title is desired for that field). The &lt;em&gt;titles&lt;/em&gt; can be any object, but when a &lt;a href=&quot;https://docs.python.org/dev/library/stdtypes.html#str&quot;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/a&gt; object will add another entry to the fields dictionary keyed by the title and referencing the same field tuple which will contain the title as an additional tuple member.</source>
          <target state="translated">オプションのキー&lt;em&gt;オフセット&lt;/em&gt;と&lt;em&gt;タイトルを指定&lt;/em&gt;する場合、それらの値はそれぞれ、&lt;em&gt;名前&lt;/em&gt;と&lt;em&gt;フォーマットの&lt;/em&gt;リストと同じ長さのリストである必要があります。&lt;em&gt;オフセット&lt;/em&gt;値はバイトオフセット（これらに限定されのリストである&lt;a href=&quot;https://docs.python.org/dev/library/ctypes.html#ctypes.c_int&quot;&gt; &lt;code&gt;ctypes.c_int&lt;/code&gt; &lt;/a&gt;ながら、各フィールドの）&lt;em&gt;タイトル&lt;/em&gt;値が各フィールドのタイトルのリスト（ある &lt;code&gt;None&lt;/code&gt; ないタイトルがそのフィールドのために所望されていない場合に使用できません）。&lt;em&gt;タイトル&lt;/em&gt;任意のオブジェクトであってもよいが、場合&lt;a href=&quot;https://docs.python.org/dev/library/stdtypes.html#str&quot;&gt; &lt;code&gt;str&lt;/code&gt; &lt;/a&gt;オブジェクトのフィールドに別のエントリを追加するには、タイトルをキーと追加のタプル部材としてタイトルを含むであろう同じフィールドタプルを参照する辞書。</target>
        </trans-unit>
        <trans-unit id="fe8737aa96b92cabf0904a91af144d1939eed308" translate="yes" xml:space="preserve">
          <source>When the optional keys &lt;em&gt;offsets&lt;/em&gt; and &lt;em&gt;titles&lt;/em&gt; are provided, their values must each be lists of the same length as the &lt;em&gt;names&lt;/em&gt; and &lt;em&gt;formats&lt;/em&gt; lists. The &lt;em&gt;offsets&lt;/em&gt; value is a list of byte offsets (limited to &lt;a href=&quot;https://docs.python.org/dev/library/ctypes.html#ctypes.c_int&quot;&gt;&lt;code&gt;ctypes.c_int&lt;/code&gt;&lt;/a&gt;) for each field, while the &lt;em&gt;titles&lt;/em&gt; value is a list of titles for each field (None can be used if no title is desired for that field). The &lt;em&gt;titles&lt;/em&gt; can be any &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;unicode&lt;/code&gt; object and will add another entry to the fields dictionary keyed by the title and referencing the same field tuple which will contain the title as an additional tuple member.</source>
          <target state="translated">オプションのキー&lt;em&gt;オフセット&lt;/em&gt;と&lt;em&gt;タイトルを指定&lt;/em&gt;する場合、それらの値はそれぞれ、&lt;em&gt;名前&lt;/em&gt;と&lt;em&gt;フォーマットの&lt;/em&gt;リストと同じ長さのリストである必要があります。&lt;em&gt;オフセット&lt;/em&gt;値はバイトオフセット（これらに限定されのリストである&lt;a href=&quot;https://docs.python.org/dev/library/ctypes.html#ctypes.c_int&quot;&gt; &lt;code&gt;ctypes.c_int&lt;/code&gt; &lt;/a&gt;ながら、各フィールドの）&lt;em&gt;タイトル&lt;/em&gt;値が各フィールドのタイトルのリスト（タイトルがそのフィールドのために所望されていない場合はどれも使用できない）です。&lt;em&gt;タイトルの&lt;/em&gt;いずれかであることができる &lt;code&gt;string&lt;/code&gt; または &lt;code&gt;unicode&lt;/code&gt; オブジェクトおよびフィールドに別のエントリを追加するには、タイトルをキーと追加のタプル部材としてタイトルを含むであろう同じフィールドタプルを参照する辞書。</target>
        </trans-unit>
        <trans-unit id="0c89441828aa0daf46fb0989feeaa96e8f46c4c3" translate="yes" xml:space="preserve">
          <source>When the result of an advanced indexing operation has no elements but an individual index is out of bounds, whether or not an &lt;code&gt;IndexError&lt;/code&gt; is raised is undefined (e.g. &lt;code&gt;x[[], [123]]&lt;/code&gt; with &lt;code&gt;123&lt;/code&gt; being out of bounds).</source>
          <target state="translated">高度なインデックス作成操作の結果に要素がなく、個々のインデックスが範囲外である場合、 &lt;code&gt;IndexError&lt;/code&gt; が発生するかどうかは定義されていません（たとえば、 &lt;code&gt;x[[], [123]]&lt;/code&gt; 、 &lt;code&gt;123&lt;/code&gt; は範囲外）。</target>
        </trans-unit>
        <trans-unit id="1684797a859b01eb303a68402fabf36c34b7e573" translate="yes" xml:space="preserve">
          <source>When the total size of the array does not change &lt;a href=&quot;numpy.reshape#numpy.reshape&quot;&gt;&lt;code&gt;reshape&lt;/code&gt;&lt;/a&gt; should be used. In most other cases either indexing (to reduce the size) or padding (to increase the size) may be a more appropriate solution.</source>
          <target state="translated">配列の合計サイズが変わらない場合は、&lt;a href=&quot;numpy.reshape#numpy.reshape&quot;&gt; &lt;code&gt;reshape&lt;/code&gt; &lt;/a&gt;変更を使用する必要があります。他のほとんどの場合、インデックス作成（サイズを小さくするため）またはパディング（サイズを大きくするため）のいずれかがより適切な解決策になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="a8285d0cb4c35abac624d1adebd2fa89972bd5bd" translate="yes" xml:space="preserve">
          <source>When the variables are named (either by a flexible dtype or with &lt;code&gt;names&lt;/code&gt;), there must not be any header in the file (else a ValueError exception is raised).</source>
          <target state="translated">変数に名前を付ける場合（柔軟なdtypeまたは &lt;code&gt;names&lt;/code&gt; ）、ファイルにヘッダーがあってはなりません（そうでない場合、ValueError例外が発生します）。</target>
        </trans-unit>
        <trans-unit id="cb9d5c54f477f497096e6733fd299984beb835c4" translate="yes" xml:space="preserve">
          <source>When the variables are named (either by a flexible dtype or with &lt;code&gt;names&lt;/code&gt;, there must not be any header in the file (else a ValueError exception is raised).</source>
          <target state="translated">変数に名前が付けられている場合（柔軟なdtypeまたは &lt;code&gt;names&lt;/code&gt; のいずれかで）、ファイルにヘッダーがあってはなりません（そうでない場合、ValueError例外が発生します）。</target>
        </trans-unit>
        <trans-unit id="6e373c4bcfc128e5c3fce3b4068067e3ffa9e6bc" translate="yes" xml:space="preserve">
          <source>When the wheels have all been successfully built and staged, download them from the Anaconda staging directory using the &lt;code&gt;tools/download-wheels.py&lt;/code&gt; script:</source>
          <target state="translated">ホイールがすべて正常に構築およびステージングされたら、 &lt;code&gt;tools/download-wheels.py&lt;/code&gt; スクリプトを使用してAnacondaステージングディレクトリからホイールをダウンロードします。</target>
        </trans-unit>
        <trans-unit id="545b6ed903baa5a5144eaa7b81c5d5357b7f3721" translate="yes" xml:space="preserve">
          <source>When the wheels have all been successfully built, download them using the &lt;code&gt;wheel-uploader&lt;/code&gt; in the &lt;code&gt;terryfy&lt;/code&gt; repository. The terryfy repository may be cloned from &lt;a href=&quot;https://github.com/MacPython/terryfy&quot;&gt;https://github.com/MacPython/terryfy&lt;/a&gt; if you don&amp;rsquo;t already have it. The wheels can also be uploaded using the &lt;code&gt;wheel-uploader&lt;/code&gt;, but we prefer to download all the wheels to the &lt;code&gt;../numpy/release/installers&lt;/code&gt; directory and upload later using &lt;code&gt;twine&lt;/code&gt;:</source>
          <target state="translated">ホイールは、すべて正常にビルドされている場合は、使用してそれらをダウンロードし &lt;code&gt;wheel-uploader&lt;/code&gt; して &lt;code&gt;terryfy&lt;/code&gt; リポジトリ。terryfyリポジトリは、まだ持っていない場合は&lt;a href=&quot;https://github.com/MacPython/terryfy&quot;&gt;https://github.com/MacPython/terryfy&lt;/a&gt;から複製できます。ホイールは &lt;code&gt;wheel-uploader&lt;/code&gt; を使用してアップロードすることもできますが、すべてのホイールを &lt;code&gt;../numpy/release/installers&lt;/code&gt; ディレクトリにダウンロードし、後でより糸を使用してアップロードすることをお勧めし &lt;code&gt;twine&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1ce6824829e37ca585156c8e8abdeb7e7047b4a6" translate="yes" xml:space="preserve">
          <source>When there is at least one slice (&lt;code&gt;:&lt;/code&gt;), ellipsis (&lt;code&gt;...&lt;/code&gt;) or &lt;a href=&quot;constants#numpy.newaxis&quot;&gt;&lt;code&gt;newaxis&lt;/code&gt;&lt;/a&gt; in the index (or the array has more dimensions than there are advanced indexes), then the behaviour can be more complicated. It is like concatenating the indexing result for each advanced index element</source>
          <target state="translated">（そこに少なくとも一つのスライスである場合 &lt;code&gt;:&lt;/code&gt; ）、省略記号（ &lt;code&gt;...&lt;/code&gt; ）または&lt;a href=&quot;constants#numpy.newaxis&quot;&gt; &lt;code&gt;newaxis&lt;/code&gt; &lt;/a&gt;インデックスに（又はアレイは、高度なインデックスよりも多くの寸法を有する）、次いで、動作はより複雑にすることができます。これは、各高度なインデックス要素のインデックス結果を連結するようなものです</target>
        </trans-unit>
        <trans-unit id="7fc05435c156ef19015ca040276948a66576f250" translate="yes" xml:space="preserve">
          <source>When there is more than one axis to sum over - and they are not the last (first) axes of &lt;code&gt;a&lt;/code&gt; (&lt;code&gt;b&lt;/code&gt;) - the argument &lt;code&gt;axes&lt;/code&gt; should consist of two sequences of the same length, with the first axis to sum over given first in both sequences, the second axis second, and so forth.</source>
          <target state="translated">合計する複数の軸があり、それらが &lt;code&gt;a&lt;/code&gt; （ &lt;code&gt;b&lt;/code&gt; ）の最後の（最初の）軸ではない場合、引数の &lt;code&gt;axes&lt;/code&gt; は同じ長さの2つのシーケンスで構成され、最初に合計する最初の軸が最初に与えられます。両方のシーケンス、2番目の軸、2番目など。</target>
        </trans-unit>
        <trans-unit id="aca72761c1059e14a576d5243f55b005214eb5e7" translate="yes" xml:space="preserve">
          <source>When there is only one operand, no axes are summed, and no output parameter is provided, a view into the operand is returned instead of a new array. Thus, taking the diagonal as &lt;code&gt;np.einsum('ii-&amp;gt;i', a)&lt;/code&gt; produces a view (changed in version 1.10.0).</source>
          <target state="translated">オペランドが1つしかない場合、軸は合計されず、出力パラメーターも提供されない場合、新しい配列の代わりにオペランドのビューが返されます。したがって、対角線を &lt;code&gt;np.einsum('ii-&amp;gt;i', a)&lt;/code&gt; すると、ビューが生成されます（バージョン1.10.0で変更）。</target>
        </trans-unit>
        <trans-unit id="6c0c17ce5d478e05a8554320c78aec93528cb754" translate="yes" xml:space="preserve">
          <source>When true, allow writing to the returned view. The default is false, as this should be used with caution: the returned view contains the same memory location multiple times, so writing to one location will cause others to change.</source>
          <target state="translated">trueの場合、返されたビューへの書き込みを許可します。デフォルトはfalseですが、これは注意して使用する必要があります。返されたビューには同じメモリロケーションが複数含まれているため、あるロケーションに書き込むと他のロケーションが変更されてしまいます。</target>
        </trans-unit>
        <trans-unit id="d6560fa9a8a1164ba82db1ff6a46fb84089bde5d" translate="yes" xml:space="preserve">
          <source>When true, the resulting &lt;a href=&quot;numpy.char.chararray#numpy.char.chararray&quot;&gt;&lt;code&gt;chararray&lt;/code&gt;&lt;/a&gt; can contain Unicode characters, when false only 8-bit characters. If unicode is &lt;code&gt;None&lt;/code&gt; and &lt;code&gt;obj&lt;/code&gt; is one of the following:</source>
          <target state="translated">trueの場合、結果の&lt;a href=&quot;numpy.char.chararray#numpy.char.chararray&quot;&gt; &lt;code&gt;chararray&lt;/code&gt; に&lt;/a&gt;はUnicode文字を含めることができます。falseの場合、8ビット文字のみを含めることができます。unicodeが &lt;code&gt;None&lt;/code&gt; で、 &lt;code&gt;obj&lt;/code&gt; が次のいずれかである場合：</target>
        </trans-unit>
        <trans-unit id="65b8be94d25ee5071fb62b957f74c26a7a160de6" translate="yes" xml:space="preserve">
          <source>When true, the resulting &lt;a href=&quot;numpy.char.chararray#numpy.char.chararray&quot;&gt;&lt;code&gt;chararray&lt;/code&gt;&lt;/a&gt; can contain Unicode characters, when false only 8-bit characters. If unicode is None and &lt;code&gt;obj&lt;/code&gt; is one of the following:</source>
          <target state="translated">trueの場合、結果の&lt;a href=&quot;numpy.char.chararray#numpy.char.chararray&quot;&gt; &lt;code&gt;chararray&lt;/code&gt; に&lt;/a&gt;はUnicode文字を含めることができ、falseの場合は8ビット文字のみを含めることができます。unicodeがNoneで、 &lt;code&gt;obj&lt;/code&gt; が次のいずれかである場合：</target>
        </trans-unit>
        <trans-unit id="eef56b2a721b3cb91ab7c41be9f28e5cebabf16b" translate="yes" xml:space="preserve">
          <source>When true, the resulting &lt;a href=&quot;numpy.chararray#numpy.chararray&quot;&gt;&lt;code&gt;chararray&lt;/code&gt;&lt;/a&gt; can contain Unicode characters, when false only 8-bit characters. If unicode is None and &lt;code&gt;obj&lt;/code&gt; is one of the following:</source>
          <target state="translated">trueの場合、結果の&lt;a href=&quot;numpy.chararray#numpy.chararray&quot;&gt; &lt;code&gt;chararray&lt;/code&gt; に&lt;/a&gt;はUnicode文字を含めることができ、falseの場合は8ビット文字のみを含めることができます。unicodeがNoneで、 &lt;code&gt;obj&lt;/code&gt; が次のいずれかである場合：</target>
        </trans-unit>
        <trans-unit id="a283e044d3ebfd4430bd993011e5610365921585" translate="yes" xml:space="preserve">
          <source>When true, the resulting &lt;code&gt;chararray&lt;/code&gt; can contain Unicode characters, when false only 8-bit characters. If unicode is &lt;code&gt;None&lt;/code&gt; and &lt;code&gt;obj&lt;/code&gt; is one of the following:</source>
          <target state="translated">trueの場合、結果の &lt;code&gt;chararray&lt;/code&gt; にはUnicode文字を含めることができます。falseの場合、8ビット文字のみを含めることができます。unicodeが &lt;code&gt;None&lt;/code&gt; で、 &lt;code&gt;obj&lt;/code&gt; が次のいずれかである場合：</target>
        </trans-unit>
        <trans-unit id="f2245dda0193d47132d217a15baacd8d95efb40d" translate="yes" xml:space="preserve">
          <source>When true, the resulting &lt;code&gt;chararray&lt;/code&gt; can contain Unicode characters, when false only 8-bit characters. If unicode is None and &lt;code&gt;obj&lt;/code&gt; is one of the following:</source>
          <target state="translated">trueの場合、結果の &lt;code&gt;chararray&lt;/code&gt; にはUnicode文字を含めることができ、falseの場合は8ビット文字のみを含めることができます。unicodeがNoneで、 &lt;code&gt;obj&lt;/code&gt; が次のいずれかである場合：</target>
        </trans-unit>
        <trans-unit id="d546b1cbadc8d553f3a2c608a6a9f37844d1cc07" translate="yes" xml:space="preserve">
          <source>When two or more input parameters have exactly the same type, shape and description, they can be combined:</source>
          <target state="translated">2つ以上の入力パラメータが全く同じタイプ、形状、記述を持つ場合、それらを組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="ec3e52986ad6366d7a0f302f7264cd3302d4a4d7" translate="yes" xml:space="preserve">
          <source>When used as a command line tool, &lt;code&gt;f2py&lt;/code&gt; has three major modes, distinguished by the usage of &lt;code&gt;-c&lt;/code&gt; and &lt;code&gt;-h&lt;/code&gt; switches:</source>
          <target state="translated">コマンドラインツールとして使用する場合、 &lt;code&gt;f2py&lt;/code&gt; には3つの主要なモードがあり、 &lt;code&gt;-c&lt;/code&gt; および &lt;code&gt;-h&lt;/code&gt; スイッチの使用によって区別されます。</target>
        </trans-unit>
        <trans-unit id="78f0324161c5da45717d8c4c5bc86e44423bdd63" translate="yes" xml:space="preserve">
          <source>When used in arrays, this type strips trailing null bytes.</source>
          <target state="translated">配列で使用される場合、このタイプは末尾のNULLバイトを削除します。</target>
        </trans-unit>
        <trans-unit id="40f0d662c07cdabfedd3b1f6952fe6f31dfba509" translate="yes" xml:space="preserve">
          <source>When used in arrays, this type strips trailing null codepoints.</source>
          <target state="translated">配列で使用される場合、このタイプは末尾のNULLコードポイントを削除します。</target>
        </trans-unit>
        <trans-unit id="a2f6bc6ae79777087ef9f135d7de551097f22c0d" translate="yes" xml:space="preserve">
          <source>When used inside &lt;code&gt;&amp;lt;routine signature&amp;gt;&lt;/code&gt;, then given C code will be inserted to the corresponding wrapper function just after declaring variables but before any C statements. So, &lt;code&gt;usercode&lt;/code&gt; follow-up can contain both declarations and C statements.</source>
          <target state="translated">&lt;code&gt;&amp;lt;routine signature&amp;gt;&lt;/code&gt; 内で使用すると、指定されたCコードは、変数を宣言した直後で、Cステートメントの前に対応するラッパー関数に挿入されます。したがって、 &lt;code&gt;usercode&lt;/code&gt; フォローアップには、宣言とCステートメントの両方を含めることができます。</target>
        </trans-unit>
        <trans-unit id="596f3568b1167a9a713a0235333d3a0c34a92814" translate="yes" xml:space="preserve">
          <source>When used inside &lt;code&gt;python module&lt;/code&gt; block, then given C code will be inserted to generated C/API source just before wrapper function definitions. Here you can define arbitrary C functions to be used in initialization of optional arguments, for example. If &lt;code&gt;usercode&lt;/code&gt; is used twice inside &lt;code&gt;python
module&lt;/code&gt; block then the second multiline block is inserted after the definition of external routines.</source>
          <target state="translated">&lt;code&gt;python module&lt;/code&gt; ブロック内で使用すると、指定されたCコードが、ラッパー関数定義の直前に生成されたC / APIソースに挿入されます。ここでは、たとえば、オプションの引数の初期化に使用される任意のC関数を定義できます。 &lt;code&gt;usercode&lt;/code&gt; が &lt;code&gt;python module&lt;/code&gt; ブロック内で2回使用される場合、2番目の複数行ブロックが外部ルーチンの定義の後に挿入されます。</target>
        </trans-unit>
        <trans-unit id="80e1b4b5cbc8b59436318942fdcb6ca6f33e723e" translate="yes" xml:space="preserve">
          <source>When used inside the first &lt;code&gt;interface&lt;/code&gt; block, then given C code will be inserted at the end of the initialization function of the extension module. Here you can modify extension modules dictionary. For example, for defining additional variables etc.</source>
          <target state="translated">最初の &lt;code&gt;interface&lt;/code&gt; ブロック内で使用すると、指定されたCコードが拡張モジュールの初期化関数の最後に挿入されます。ここで、拡張モジュール辞書を変更できます。たとえば、追加の変数を定義するためなど。</target>
        </trans-unit>
        <trans-unit id="436bc3d73aa6565d86aefabb54c9292e559b97a5" translate="yes" xml:space="preserve">
          <source>When used interactively with an object, &lt;code&gt;np.info(obj)&lt;/code&gt; is equivalent to &lt;code&gt;help(obj)&lt;/code&gt; on the Python prompt or &lt;code&gt;obj?&lt;/code&gt; on the IPython prompt.</source>
          <target state="translated">オブジェクトとインタラクティブに使用される場合、 &lt;code&gt;np.info(obj)&lt;/code&gt; は、Pythonプロンプトまたは &lt;code&gt;obj?&lt;/code&gt; の &lt;code&gt;help(obj)&lt;/code&gt; と同等です。IPythonプロンプトで。</target>
        </trans-unit>
        <trans-unit id="59366ede5c94f784128a0963e5498e4128255217" translate="yes" xml:space="preserve">
          <source>When used with arrays as arguments, &lt;a href=&quot;../reference/generated/numpy.r_#numpy.r_&quot;&gt;&lt;code&gt;r_&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../reference/generated/numpy.c_#numpy.c_&quot;&gt;&lt;code&gt;c_&lt;/code&gt;&lt;/a&gt; are similar to &lt;a href=&quot;../reference/generated/numpy.vstack#numpy.vstack&quot;&gt;&lt;code&gt;vstack&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../reference/generated/numpy.hstack#numpy.hstack&quot;&gt;&lt;code&gt;hstack&lt;/code&gt;&lt;/a&gt; in their default behavior, but allow for an optional argument giving the number of the axis along which to concatenate.</source>
          <target state="translated">配列を引数として使用する場合、&lt;a href=&quot;../reference/generated/numpy.r_#numpy.r_&quot;&gt; &lt;code&gt;r_&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../reference/generated/numpy.c_#numpy.c_&quot;&gt; &lt;code&gt;c_&lt;/code&gt; &lt;/a&gt;はデフォルトの動作で&lt;a href=&quot;../reference/generated/numpy.vstack#numpy.vstack&quot;&gt; &lt;code&gt;vstack&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../reference/generated/numpy.hstack#numpy.hstack&quot;&gt; &lt;code&gt;hstack&lt;/code&gt; &lt;/a&gt;に似ていますが、連結する軸の番号を指定するオプションの引数を使用できます。</target>
        </trans-unit>
        <trans-unit id="29f0905c43c5dc57dbedbc6c77600c829150dde0" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;http://www.sphinx-doc.org/&quot;&gt;Sphinx&lt;/a&gt; in combination with the numpy conventions, you should use the &lt;code&gt;numpydoc&lt;/code&gt; extension so that your docstrings will be handled correctly. For example, Sphinx will extract the &lt;code&gt;Parameters&lt;/code&gt; section from your docstring and convert it into a field list. Using &lt;code&gt;numpydoc&lt;/code&gt; will also avoid the reStructuredText errors produced by plain Sphinx when it encounters numpy docstring conventions like section headers (e.g. &lt;code&gt;-------------&lt;/code&gt;) that sphinx does not expect to find in docstrings.</source>
          <target state="translated">使用するときは&lt;a href=&quot;http://www.sphinx-doc.org/&quot;&gt;スフィンクスを&lt;/a&gt;numpyの規則と組み合わせて、あなたが使用する必要があります &lt;code&gt;numpydoc&lt;/code&gt; のあなたのドキュメンテーション文字列が正しく処理されるように拡張します。たとえば、Sphinxはdocstringから &lt;code&gt;Parameters&lt;/code&gt; セクションを抽出し、それをフィールドリストに変換します。 &lt;code&gt;numpydoc&lt;/code&gt; を使用すると、sphinxがdocstringで見つけることを期待していないセクションヘッダー（例： &lt;code&gt;-------------&lt;/code&gt; ）のようなnumpy docstring規則に遭遇したときに、プレーンSphinxによって生成されるreStructuredTextエラーも回避されます。</target>
        </trans-unit>
        <trans-unit id="4ead31700ab371101b93de0e7731e3c33827c622" translate="yes" xml:space="preserve">
          <source>When using &lt;a href=&quot;https://www.sphinx-doc.org/&quot;&gt;Sphinx&lt;/a&gt; in combination with the numpy conventions, you should use the &lt;code&gt;numpydoc&lt;/code&gt; extension so that your docstrings will be handled correctly. For example, Sphinx will extract the &lt;code&gt;Parameters&lt;/code&gt; section from your docstring and convert it into a field list. Using &lt;code&gt;numpydoc&lt;/code&gt; will also avoid the reStructuredText errors produced by plain Sphinx when it encounters numpy docstring conventions like section headers (e.g. &lt;code&gt;-------------&lt;/code&gt;) that sphinx does not expect to find in docstrings.</source>
          <target state="translated">使用するときは&lt;a href=&quot;https://www.sphinx-doc.org/&quot;&gt;スフィンクスを&lt;/a&gt;numpyの規則と組み合わせて、あなたが使用する必要があります &lt;code&gt;numpydoc&lt;/code&gt; のあなたのドキュメンテーション文字列が正しく処理されるように拡張します。たとえば、Sphinxはdocstringから &lt;code&gt;Parameters&lt;/code&gt; セクションを抽出し、それをフィールドリストに変換します。 &lt;code&gt;numpydoc&lt;/code&gt; を使用すると、sphinxがdocstringで見つけることを期待していないセクションヘッダー（例： &lt;code&gt;-------------&lt;/code&gt; ）のようなnumpy docstring規則に遭遇したときに、プレーンSphinxによって生成されるreStructuredTextエラーも回避されます。</target>
        </trans-unit>
        <trans-unit id="12d8af6e4436a72ae5774609dfe31b0219205b6b" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;distutils&lt;/code&gt;, for example in &lt;code&gt;setup.py&lt;/code&gt;.</source>
          <target state="translated">たとえば &lt;code&gt;setup.py&lt;/code&gt; で &lt;code&gt;distutils&lt;/code&gt; を使用する場合。</target>
        </trans-unit>
        <trans-unit id="a8bcdc54785df618c23c01dc97dc1468fe9c49c4" translate="yes" xml:space="preserve">
          <source>When using &lt;code&gt;jumped&lt;/code&gt;, one does have to take care not to jump to a stream that was already used. In the above example, one could not later use &lt;code&gt;blocked_rng[0].jumped()&lt;/code&gt; as it would overlap with &lt;code&gt;blocked_rng[1]&lt;/code&gt;. Like with the independent streams, if the main process here wants to split off 10 more streams by jumping, then it needs to start with &lt;code&gt;range(10, 20)&lt;/code&gt;, otherwise it would recreate the same streams. On the other hand, if you carefully construct the streams, then you are guaranteed to have streams that do not overlap.</source>
          <target state="translated">&lt;code&gt;jumped&lt;/code&gt; を使用する場合、すでに使用されているストリームにジャンプしないように注意する必要があります。上記の例では、 &lt;code&gt;blocked_rng[1]&lt;/code&gt; と重複するため、 &lt;code&gt;blocked_rng[0].jumped()&lt;/code&gt; を後で使用することはできません。独立したストリームと同様に、ここでメインプロセスがジャンプによってさらに10個のストリームを分割する場合は、 &lt;code&gt;range(10, 20)&lt;/code&gt; から開始する必要があります。そうでない場合は、同じストリームを再作成します。一方、ストリームを注意深く作成すると、ストリームがオーバーラップしないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="724bc629cdbfec6a4e5af9a220d38930424c297d" translate="yes" xml:space="preserve">
          <source>When using a non-integer step, such as 0.1, the results will often not be consistent. It is better to use &lt;a href=&quot;numpy.linspace#numpy.linspace&quot;&gt;&lt;code&gt;numpy.linspace&lt;/code&gt;&lt;/a&gt; for these cases.</source>
          <target state="translated">0.1などの整数以外のステップを使用すると、結果に一貫性がなくなることがよくあります。このような場合は、&lt;a href=&quot;numpy.linspace#numpy.linspace&quot;&gt; &lt;code&gt;numpy.linspace&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="27718ed960a95a721b47ff1931021ed4073bbe48" translate="yes" xml:space="preserve">
          <source>When using a string for &lt;a href=&quot;https://docs.python.org/dev/library/functions.html#object&quot;&gt;&lt;code&gt;object&lt;/code&gt;&lt;/a&gt; it is possible to get multiple results.</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/dev/library/functions.html#object&quot;&gt; &lt;code&gt;object&lt;/code&gt; &lt;/a&gt;に文字列を使用すると、複数の結果が得られる可能性があります。</target>
        </trans-unit>
        <trans-unit id="4483d4c2e345ca8073aa1a9817270cc3cdb40e82" translate="yes" xml:space="preserve">
          <source>When using a subclass (especially one which manipulates its shape), the default &lt;code&gt;ndarray.__setitem__&lt;/code&gt; behaviour will call &lt;code&gt;__getitem__&lt;/code&gt; for &lt;em&gt;basic&lt;/em&gt; indexing but not for &lt;em&gt;advanced&lt;/em&gt; indexing. For such a subclass it may be preferable to call &lt;code&gt;ndarray.__setitem__&lt;/code&gt; with a &lt;em&gt;base class&lt;/em&gt; ndarray view on the data. This &lt;em&gt;must&lt;/em&gt; be done if the subclasses &lt;code&gt;__getitem__&lt;/code&gt; does not return views.</source>
          <target state="translated">サブクラス（特にその形状を操作するクラス）を使用する場合、デフォルトの &lt;code&gt;ndarray.__setitem__&lt;/code&gt; 動作は、&lt;em&gt;基本的な&lt;/em&gt;インデックス作成では &lt;code&gt;__getitem__&lt;/code&gt; を呼び出しますが、&lt;em&gt;高度&lt;/em&gt;&lt;em&gt;な&lt;/em&gt;インデックス作成では呼び出しません。そのようなサブクラスのために呼び出すことが好ましいかもしれない &lt;code&gt;ndarray.__setitem__&lt;/code&gt; と&lt;em&gt;ベースクラス&lt;/em&gt;データにndarray図。これ&lt;em&gt;は&lt;/em&gt;、サブクラス &lt;code&gt;__getitem__&lt;/code&gt; がビューを返さない場合に実行する&lt;em&gt;必要&lt;/em&gt;が&lt;em&gt;あり&lt;/em&gt;ます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="bc311b69f41b3e0c41508f3b081d2280ad7970ec" translate="yes" xml:space="preserve">
          <source>When using broadcasting with uint64 dtypes, the maximum value (2**64) cannot be represented as a standard integer type. The high array (or low if high is None) must have object dtype, e.g., array([2**64]).</source>
          <target state="translated">uint64のdtypeを持つブロードキャストを使用する場合、最大値(2**64)を標準の整数型として表現することはできません。high配列(highがNoneの場合はlow)は、array([2**64])などのオブジェクトdtypeを持たなければなりません。</target>
        </trans-unit>
        <trans-unit id="23e3eec66bc7d3437b52c086371fd6ea153ed9c6" translate="yes" xml:space="preserve">
          <source>When using pytest as a target (the default), you can &lt;a href=&quot;https://docs.pytest.org/en/latest/usage.html#specifying-tests-selecting-tests&quot;&gt;match test names using python operators&lt;/a&gt; by passing the &lt;code&gt;-k&lt;/code&gt; argument to pytest:</source>
          <target state="translated">pytestをターゲット（デフォルト）として使用する場合、&lt;a href=&quot;https://docs.pytest.org/en/latest/usage.html#specifying-tests-selecting-tests&quot;&gt;Python演算子を使用してテスト名を照合&lt;/a&gt;するには、 &lt;code&gt;-k&lt;/code&gt; 引数をpytestに渡します。</target>
        </trans-unit>
        <trans-unit id="c04978427f46ec116ad24550bbf1c67bfbb16f61" translate="yes" xml:space="preserve">
          <source>When using signed integer types the result is the two&amp;rsquo;s complement of the result for the unsigned type:</source>
          <target state="translated">符号付き整数型を使用する場合、結果は符号なし型の結果の2の補数になります。</target>
        </trans-unit>
        <trans-unit id="453da0e9bd45f20742c660821d0bef0203dd876c" translate="yes" xml:space="preserve">
          <source>When using the first form of dictionary-based specification, the titles may be supplied as an extra &lt;code&gt;'titles'&lt;/code&gt; key as described above. When using the second (discouraged) dictionary-based specification, the title can be supplied by providing a 3-element tuple &lt;code&gt;(datatype, offset, title)&lt;/code&gt; instead of the usual 2-element tuple:</source>
          <target state="translated">辞書ベースの仕様の最初の形式を使用する場合、タイトルは、上記のように追加の &lt;code&gt;'titles'&lt;/code&gt; キーとして提供される場合があります。2番目の（推奨されていない）辞書ベースの仕様を使用する場合 &lt;code&gt;(datatype, offset, title)&lt;/code&gt; は、通常の2要素タプルの代わりに3要素タプル（データ型、オフセット、タイトル）を提供することによって提供できます。</target>
        </trans-unit>
        <trans-unit id="fefd781e401a9acf4994aa658770a54631a31aac" translate="yes" xml:space="preserve">
          <source>When using the iterator in multi-threaded code or in code not holding the Python GIL, care must be taken to only call functions which are safe in that context. &lt;a href=&quot;#c.NpyIter_Copy&quot;&gt;&lt;code&gt;NpyIter_Copy&lt;/code&gt;&lt;/a&gt; cannot be safely called without the Python GIL, because it increments Python references. The &lt;code&gt;Reset*&lt;/code&gt; and some other functions may be safely called by passing in the &lt;code&gt;errmsg&lt;/code&gt; parameter as non-NULL, so that the functions will pass back errors through it instead of setting a Python exception.</source>
          <target state="translated">マルチスレッドコードまたはPython GILを保持しないコードでイテレーターを使用する場合、そのコンテキストで安全な関数のみを呼び出すように注意する必要があります。&lt;a href=&quot;#c.NpyIter_Copy&quot;&gt; &lt;code&gt;NpyIter_Copy&lt;/code&gt; &lt;/a&gt;はPython参照をインクリメントするため、Python GILなしでは安全に呼び出すことができません。 &lt;code&gt;Reset*&lt;/code&gt; および他のいくつかの機能を安全に通過させることによって呼び出すことができる &lt;code&gt;errmsg&lt;/code&gt; 機能は、Pythonの例外を設定するのではなく、それを介してエラーをバック通過するように、非NULLとしてパラメータ。</target>
        </trans-unit>
        <trans-unit id="88e2c9415b727957007e5109caacd82ffe84043d" translate="yes" xml:space="preserve">
          <source>When we call &lt;code&gt;C('hello')&lt;/code&gt;, the &lt;code&gt;__new__&lt;/code&gt; method gets its own class as first argument, and the passed argument, which is the string &lt;code&gt;'hello'&lt;/code&gt;. After python calls &lt;code&gt;__new__&lt;/code&gt;, it usually (see below) calls our &lt;code&gt;__init__&lt;/code&gt; method, with the output of &lt;code&gt;__new__&lt;/code&gt; as the first argument (now a class instance), and the passed arguments following.</source>
          <target state="translated">&lt;code&gt;C('hello')&lt;/code&gt; を呼び出すと、 &lt;code&gt;__new__&lt;/code&gt; メソッドは、最初の引数として独自のクラスを取得し、渡された引数（文字列 &lt;code&gt;'hello'&lt;/code&gt; ）を取得します。Pythonが呼び出した後 &lt;code&gt;__new__&lt;/code&gt; を、それは通常（下記参照）私たちを呼び出します &lt;code&gt;__init__&lt;/code&gt; の出力で、メソッドを &lt;code&gt;__new__&lt;/code&gt; 最初の引数（今クラスのインスタンス）として、そして渡される引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="80e0c3e3144afbdbfb1503b2b31fd233cbb9bcb1" translate="yes" xml:space="preserve">
          <source>When we index arrays with arrays of (integer) indices we are providing the list of indices to pick. With boolean indices the approach is different; we explicitly choose which items in the array we want and which ones we don&amp;rsquo;t.</source>
          <target state="translated">（整数）インデックスの配列で配列にインデックスを付ける場合、選択するインデックスのリストを提供します。ブールインデックスでは、アプローチが異なります。配列内の必要なアイテムと不要なアイテムを明示的に選択します。</target>
        </trans-unit>
        <trans-unit id="e0e93c50be29a8db34812f3b063181378aab17d0" translate="yes" xml:space="preserve">
          <source>When working along a given axis, a slice along that axis is returned in &lt;code&gt;output&lt;/code&gt; for each index where &lt;code&gt;condition&lt;/code&gt; evaluates to True. When working on a 1-D array, &lt;a href=&quot;#numpy.compress&quot;&gt;&lt;code&gt;compress&lt;/code&gt;&lt;/a&gt; is equivalent to &lt;a href=&quot;numpy.extract#numpy.extract&quot;&gt;&lt;code&gt;extract&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">特定の軸に沿って作業すると、その軸に沿ったスライスが、 &lt;code&gt;condition&lt;/code&gt; がTrueと評価される各インデックスの &lt;code&gt;output&lt;/code&gt; に返されます。1次元配列で作業する場合、&lt;a href=&quot;#numpy.compress&quot;&gt; &lt;code&gt;compress&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;numpy.extract#numpy.extract&quot;&gt; &lt;code&gt;extract&lt;/code&gt; &lt;/a&gt;と同等です。</target>
        </trans-unit>
        <trans-unit id="7d7c565731670a0f048fc0a67ffb9fb36e062b00" translate="yes" xml:space="preserve">
          <source>When working with more complex dtypes which are composed of other dtypes, such as the struct dtype, creating inner loops that manipulate the dtypes requires carrying along additional data. NumPy supports this idea through a struct &lt;a href=&quot;#c.NpyAuxData&quot;&gt;&lt;code&gt;NpyAuxData&lt;/code&gt;&lt;/a&gt;, mandating a few conventions so that it is possible to do this.</source>
          <target state="translated">struct dtypeなどの他のdtypeで構成されるより複雑なdtypeを操作する場合、dtypeを操作する内部ループを作成するには、追加のデータを運ぶ必要があります。 NumPyは&lt;a href=&quot;#c.NpyAuxData&quot;&gt; &lt;code&gt;NpyAuxData&lt;/code&gt; &lt;/a&gt;構造体を通じてこのアイデアをサポートし、これを可能にするためにいくつかの規則を義務付けています。</target>
        </trans-unit>
        <trans-unit id="dccc69e8b88626650c84c98fbaee8d5823372b3a" translate="yes" xml:space="preserve">
          <source>When working with very large arrays on modern Linux kernels, you can experience a significant speedup when &lt;a href=&quot;https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html&quot;&gt;transparent hugepage&lt;/a&gt; is used. The current system policy for transparent hugepages can be seen by:</source>
          <target state="translated">最新のLinuxカーネルで非常に大きな配列を操作する場合、&lt;a href=&quot;https://www.kernel.org/doc/html/latest/admin-guide/mm/transhuge.html&quot;&gt;透過&lt;/a&gt;的な巨大ページを使用すると、大幅なスピードアップを体験できます。透過的な巨大ページの現在のシステムポリシーは、次のように表示されます。</target>
        </trans-unit>
        <trans-unit id="37deec6852814cd475cf2ac8609e4771e7e23ff2" translate="yes" xml:space="preserve">
          <source>When you break a long expression at a binary operator, the operator goes at the end of the previous line, e.g.,</source>
          <target state="translated">二進演算子で長い式を破る場合、演算子は前の行の最後に行きます。</target>
        </trans-unit>
        <trans-unit id="e44c90082df7337355379f5ec7bbacbbcd47fdf0" translate="yes" xml:space="preserve">
          <source>When you edit dependence relations that were initially generated by F2PY, be careful not to break the dependence relations of other relevant variables. Another thing to watch out is cyclic dependencies. F2PY is able to detect cyclic dependencies when constructing wrappers and it complains if any are found.</source>
          <target state="translated">F2PYによって最初に生成された依存関係を編集するときは、他の関連する変数の依存関係を壊さないように注意してください。もう一つ気をつけなければならないのは、周期的な依存関係です。F2PYはラッパーを構築する際に周期的な依存関係を検出することができ、検出された場合には文句を言います。</target>
        </trans-unit>
        <trans-unit id="656c7a0b5e4bb86f29ff26d5f3ecacd14ae91bd4" translate="yes" xml:space="preserve">
          <source>When you feel your work is finished, you can create a pull request (PR). Github has a nice help page that outlines the process for &lt;a href=&quot;https://help.github.com/articles/using-pull-requests/#initiating-the-pull-request&quot;&gt;filing pull requests&lt;/a&gt;.</source>
          <target state="translated">作業が終了したと感じたら、プルリクエスト（PR）を作成できます。Githubには、&lt;a href=&quot;https://help.github.com/articles/using-pull-requests/#initiating-the-pull-request&quot;&gt;プルリクエスト&lt;/a&gt;を提出するプロセスの概要を説明する便利なヘルプページがあります。</target>
        </trans-unit>
        <trans-unit id="57465a3d673d3ee14218ee57f56504a3d7049d2f" translate="yes" xml:space="preserve">
          <source>When you have a set of &amp;ldquo;ready&amp;rdquo; changes in a feature branch ready for NumPy&amp;rsquo;s &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;maintenance&lt;/code&gt; branches, you can push them to &lt;code&gt;upstream&lt;/code&gt; as follows:</source>
          <target state="translated">NumPyの &lt;code&gt;master&lt;/code&gt; ブランチまたは &lt;code&gt;maintenance&lt;/code&gt; ブランチの準備ができている機能ブランチに一連の「準備完了」の変更がある場合、次のようにそれらを &lt;code&gt;upstream&lt;/code&gt; プッシュできます。</target>
        </trans-unit>
        <trans-unit id="a89cc2a2b8c2002bf1ad2532a745d3004a2fb796" translate="yes" xml:space="preserve">
          <source>When you have different flags for missing or invalid values, and wish to preserve these flags without replacing them in the original dataset, but exclude them from computations;</source>
          <target state="translated">欠損値や無効な値に対して異なるフラグがあり、元のデータセットでは置き換えずにこれらのフラグを保持したいが、計算からは除外したい場合。</target>
        </trans-unit>
        <trans-unit id="1aac8f9491bd528a6d7337e1a909f8444ac4779a" translate="yes" xml:space="preserve">
          <source>When you have to handle many arrays, each with their own mask. If the mask is part of the array, you avoid bugs and the code is possibly more compact;</source>
          <target state="translated">たくさんの配列をそれぞれのマスクで処理しなければならないとき。マスクが配列の一部であれば、バグを回避でき、コードもコンパクトになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="df9284875f70d664e11ddef3155365522e76bf5c" translate="yes" xml:space="preserve">
          <source>When you print an array, NumPy displays it in a similar way to nested lists, but with the following layout:</source>
          <target state="translated">配列を印刷すると、NumPyはネストされたリストと同様の方法で表示しますが、以下のようなレイアウトで表示します。</target>
        </trans-unit>
        <trans-unit id="ff118b2f38b6fa40b704c3319ca967dd7a981fb4" translate="yes" xml:space="preserve">
          <source>When you use &lt;code&gt;flatten&lt;/code&gt;, changes to your new array won&amp;rsquo;t change the parent array.</source>
          <target state="translated">&lt;code&gt;flatten&lt;/code&gt; を使用する場合、新しい配列を変更しても親配列は変更されません。</target>
        </trans-unit>
        <trans-unit id="aaa9ed3a1aa18ac3b534d99cdc2037422344dc84" translate="yes" xml:space="preserve">
          <source>When you use the &lt;code&gt;%apply&lt;/code&gt; directive, as is usually necessary to use &lt;code&gt;numpy.i&lt;/code&gt;, it will remain in effect until you tell &lt;a href=&quot;http://www.swig.org&quot;&gt;SWIG&lt;/a&gt; that it shouldn&amp;rsquo;t be. If the arguments to the functions or methods that you are wrapping have common names, such as &lt;code&gt;length&lt;/code&gt; or &lt;code&gt;vector&lt;/code&gt;, these typemaps may get applied in situations you do not expect or want. Therefore, it is always a good idea to add a &lt;code&gt;%clear&lt;/code&gt; directive after you are done with a specific typemap:</source>
          <target state="translated">&lt;code&gt;%apply&lt;/code&gt; ディレクティブを使用する場合、通常 &lt;code&gt;numpy.i&lt;/code&gt; を使用する必要があるので、&lt;a href=&quot;http://www.swig.org&quot;&gt;SWIG&lt;/a&gt;にそれを実行しないように指示するまで有効です。ラップしている関数またはメソッドへの引数に、 &lt;code&gt;length&lt;/code&gt; や &lt;code&gt;vector&lt;/code&gt; などの一般的な名前がある場合、これらのタイプマップは、予期しないまたは望まない状況で適用される可能性があります。したがって、特定のタイプマップを使用した後は、 &lt;code&gt;%clear&lt;/code&gt; ディレクティブを追加することを常にお勧めします。</target>
        </trans-unit>
        <trans-unit id="c9161d14b7fe0e0123346d805be6e656205c9a99" translate="yes" xml:space="preserve">
          <source>When you want to discard all changes and go back to the last commit in the repo, use one of:</source>
          <target state="translated">すべての変更を破棄して、レポの最後のコミットに戻りたい場合は、以下のいずれかを使用します。</target>
        </trans-unit>
        <trans-unit id="ab916b3f54cece1e88c682ef0d387765f5a2bcfb" translate="yes" xml:space="preserve">
          <source>When you want to preserve the values you masked for later processing, without copying the array;</source>
          <target state="translated">配列をコピーせずに、マスクした値を後の処理のために残しておきたい場合。</target>
        </trans-unit>
        <trans-unit id="6d2417174abf12a643d6fa2e2e75101924104702" translate="yes" xml:space="preserve">
          <source>When you want to reject a PR: if it&amp;rsquo;s very obvious, you can just close it and explain why. If it&amp;rsquo;s not, then it&amp;rsquo;s a good idea to first explain why you think the PR is not suitable for inclusion in NumPy and then let a second committer comment or close.</source>
          <target state="translated">PRを拒否したい場合：それが非常に明白な場合は、PRを閉じて、その理由を説明することができます。そうでない場合は、最初にPRがNumPyに含めるのに適していない理由を説明してから、2番目のコミッターにコメントまたは終了させることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="ccb838c9de18863cdb39cb5422eeea3c8d7e130e" translate="yes" xml:space="preserve">
          <source>Whenever &lt;a href=&quot;#c.NPY_VERSION&quot;&gt;&lt;code&gt;NPY_VERSION&lt;/code&gt;&lt;/a&gt; != &lt;code&gt;PyArray_GetNDArrayCVersion()&lt;/code&gt;, the extension has to be recompiled (ABI incompatibility).</source>
          <target state="translated">&lt;a href=&quot;#c.NPY_VERSION&quot;&gt; &lt;code&gt;NPY_VERSION&lt;/code&gt; &lt;/a&gt;！= &lt;code&gt;PyArray_GetNDArrayCVersion()&lt;/code&gt; の場合は常に、拡張機能を再コンパイルする必要があります（ABIの非互換性）。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
