<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="numpy">
    <body>
      <group id="numpy">
        <trans-unit id="86d8d5f0414d9a23442dad9a8767153d6dc63973" translate="yes" xml:space="preserve">
          <source>F2PY has basic support for Fortran 90 module allocatable arrays.</source>
          <target state="translated">F2PYはFortran 90モジュールの割り当て可能な配列を基本的にサポートしています。</target>
        </trans-unit>
        <trans-unit id="70ca3b53756dbec8defd4dadba9010e32a75e058" translate="yes" xml:space="preserve">
          <source>F2PY implements basic compatibility checks between related arguments in order to avoid any unexpected crashes.</source>
          <target state="translated">F2PY は、予期せぬクラッシュを避けるために、関連する引数間の基本的な互換性チェックを実装しています。</target>
        </trans-unit>
        <trans-unit id="d254f0a276a232e34acfb47e3326523f334f058d" translate="yes" xml:space="preserve">
          <source>F2PY may lower cases also in C expressions when scanning Fortran codes (see &lt;code&gt;--[no]-lower&lt;/code&gt; option).</source>
          <target state="translated">F2PYは、FortranコードをスキャンするときにC式でも小文字になる場合があります（ &lt;code&gt;--[no]-lower&lt;/code&gt; オプションを参照）。</target>
        </trans-unit>
        <trans-unit id="ec756cae82276f06410c3a4d2b35a06f369bcafa" translate="yes" xml:space="preserve">
          <source>F2PY provides &lt;code&gt;intent(inplace)&lt;/code&gt; attribute that would modify the attributes of an input array so that any changes made by Fortran routine will be effective also in input argument. For example, if one specifies &lt;code&gt;intent(inplace) a&lt;/code&gt; (see below, how), then the example above would read:</source>
          <target state="translated">F2PYは、入力配列の属性を変更する &lt;code&gt;intent(inplace)&lt;/code&gt; 属性を提供します。これにより、Fortranルーチンによって行われた変更は、入力引数でも有効になります。たとえば、 &lt;code&gt;intent(inplace) a&lt;/code&gt; 指定した場合（以下の方法を参照）、上記の例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="fca2006682a608b9e1b2b53bb3bb49e7143a70f2" translate="yes" xml:space="preserve">
          <source>F2PY reads a signature file and writes a Python C/API module containing Fortran/C/Python bindings.</source>
          <target state="translated">F2PYは署名ファイルを読み込んで、Fortran/C/Pythonバインディングを含むPython C/APIモジュールを書き込みます。</target>
        </trans-unit>
        <trans-unit id="33d34cb52e571436cd929620cb006187918c3090" translate="yes" xml:space="preserve">
          <source>F2PY supports calling Python functions from Fortran or C codes.</source>
          <target state="translated">F2PYはFortranやCコードからのPython関数の呼び出しをサポートしています。</target>
        </trans-unit>
        <trans-unit id="a50f97135d3a00f9c97ae354c1ab19960a6943cf" translate="yes" xml:space="preserve">
          <source>F2Py Guide</source>
          <target state="translated">F2Pyガイド</target>
        </trans-unit>
        <trans-unit id="780b1e049709bc720bf18c99d71f2cd4235c8e49" translate="yes" xml:space="preserve">
          <source>F2Py guide</source>
          <target state="translated">F2Pyガイド</target>
        </trans-unit>
        <trans-unit id="db0e0f2556443edbd8b7072d8289833837b00763" translate="yes" xml:space="preserve">
          <source>F2py allows you to automatically construct an extension module that interfaces to routines in Fortran 77/90/95 code. It has the ability to parse Fortran 77/90/95 code and automatically generate Python signatures for the subroutines it encounters, or you can guide how the subroutine interfaces with Python by constructing an interface-definition-file (or modifying the f2py-produced one).</source>
          <target state="translated">F2pyを使用すると、Fortran 77/90/95コード内のルーチンとインターフェースする拡張モジュールを自動的に構築することができます。F2pyはFortran 77/90/95のコードを解析し、遭遇したサブルーチンのためにPythonのシグネチャを自動的に生成する機能を持っています。また、インターフェース定義ファイルを構築することで、サブルーチンがPythonとどのようにインターフェースするかをガイドすることができます。</target>
        </trans-unit>
        <trans-unit id="bf8300dc1be4d8761c3816eeb71051b6b621dd6e" translate="yes" xml:space="preserve">
          <source>FFT</source>
          <target state="translated">FFT</target>
        </trans-unit>
        <trans-unit id="ca600c25350318c92a93eef893cdd109ac18c10d" translate="yes" xml:space="preserve">
          <source>FFT (Fast Fourier Transform) refers to a way the discrete Fourier Transform (DFT) can be calculated efficiently, by using symmetries in the calculated terms. The symmetry is highest when &lt;code&gt;n&lt;/code&gt; is a power of 2, and the transform is therefore most efficient for these sizes.</source>
          <target state="translated">FFT（高速フーリエ変換）は、計算された項の対称性を使用して、離散フーリエ変換（DFT）を効率的に計算できる方法を指します。対称性は、 &lt;code&gt;n&lt;/code&gt; が2の累乗のときに最も高くなるため、変換はこれらのサイズに対して最も効率的です。</target>
        </trans-unit>
        <trans-unit id="1e904f6af52956913c4ff703c15d71d4683c8dd0" translate="yes" xml:space="preserve">
          <source>F_CONTIGUOUS / F / FORTRAN</source>
          <target state="translated">F_CONTIGUOUS/F/FORTRAN</target>
        </trans-unit>
        <trans-unit id="10ba031202732234b30a39bc920cbaa6d821ef6b" translate="yes" xml:space="preserve">
          <source>F_CONTIGUOUS and not C_CONTIGUOUS.</source>
          <target state="translated">F_CONTIGUOUSであって、C_CONTIGUOUSではありません。</target>
        </trans-unit>
        <trans-unit id="542219cc1d690d05adfbb2e51a8b3ccb1985fddc" translate="yes" xml:space="preserve">
          <source>F_CONTIGUOUS or C_CONTIGUOUS (one-segment test).</source>
          <target state="translated">F_CONTIGUOUSまたはC_CONTIGUOUS(ワンセグテスト)。</target>
        </trans-unit>
        <trans-unit id="85c6c271be69ba94867c22f54f57654f454c41b4" translate="yes" xml:space="preserve">
          <source>Factor the matrix &lt;code&gt;a&lt;/code&gt; as &lt;em&gt;qr&lt;/em&gt;, where &lt;code&gt;q&lt;/code&gt; is orthonormal and &lt;code&gt;r&lt;/code&gt; is upper-triangular.</source>
          <target state="translated">行列 &lt;code&gt;a&lt;/code&gt; を&lt;em&gt;qr&lt;/em&gt;として因数分解します。ここで、 &lt;code&gt;q&lt;/code&gt; は正規直交で、 &lt;code&gt;r&lt;/code&gt; は上三角です。</target>
        </trans-unit>
        <trans-unit id="fb318cde14ee94b6e5d32ac7d527c0788644b0e1" translate="yes" xml:space="preserve">
          <source>Fail unless an exception of class exception_class and with message that matches expected_regexp is thrown by callable when invoked with arguments args and keyword arguments kwargs.</source>
          <target state="translated">引数argsとキーワード引数kwargsで呼び出された場合、exception_classクラスの例外でexpected_regexpにマッチするメッセージを持つ例外がcallableによってスローされない限り失敗します。</target>
        </trans-unit>
        <trans-unit id="021d84299e2248496708e7d1e546ad6c2c18b0ba" translate="yes" xml:space="preserve">
          <source>Fail unless an exception of class exception_class is thrown by callable when invoked with arguments args and keyword arguments kwargs.</source>
          <target state="translated">引数argsとキーワード引数kwargsで呼び出された場合、callableによってexception_classクラスの例外が投げられない限り失敗します。</target>
        </trans-unit>
        <trans-unit id="88591071684d50acd16039be01f0c08d81ea457a" translate="yes" xml:space="preserve">
          <source>Fail unless an exception of class exception_class is thrown by callable when invoked with arguments args and keyword arguments kwargs. If a different type of exception is thrown, it will not be caught, and the test case will be deemed to have suffered an error, exactly as for an unexpected exception.</source>
          <target state="translated">引数argsとキーワード引数kwargsで呼び出されたときに、callableによってexception_classクラスの例外がスローされない限り、失敗します。異なるタイプの例外がスローされた場合、それは捕捉されず、テストケースは予期せぬ例外の場合と同じようにエラーが発生したとみなされます。</target>
        </trans-unit>
        <trans-unit id="719788786f4bf9fa2ee26b39d5371d0a438935c3" translate="yes" xml:space="preserve">
          <source>Fail unless the given callable throws the specified warning.</source>
          <target state="translated">与えられた callable が指定された警告を投げない限り、失敗します。</target>
        </trans-unit>
        <trans-unit id="552c13b4b3257ae89f519cb962e935c59da9aa88" translate="yes" xml:space="preserve">
          <source>Fanaticism consists of redoubling your efforts when you have forgotten your aim. &amp;mdash; &lt;em&gt;George Santayana&lt;/em&gt;</source>
          <target state="translated">狂信はあなたがあなたの目的を忘れたときにあなたの努力を倍増することから成ります。&amp;mdash; &lt;em&gt;ジョージ・サンタヤナ&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="c67baf5f0ace8714e24d83b916518b08cd541740" translate="yes" xml:space="preserve">
          <source>Fast element-wise operations, called a &lt;a href=&quot;#term-ufunc&quot;&gt;ufunc&lt;/a&gt;, operate on arrays.</source>
          <target state="translated">&lt;a href=&quot;#term-ufunc&quot;&gt;ufunc&lt;/a&gt;と呼ばれる要素ごとの高速操作は、配列を操作します。</target>
        </trans-unit>
        <trans-unit id="a35d6e8cdee3fab38ad9c3056a80a39fdb1d90ea" translate="yes" xml:space="preserve">
          <source>Faster version of &lt;a href=&quot;#numpy.base_repr&quot;&gt;&lt;code&gt;base_repr&lt;/code&gt;&lt;/a&gt; for base 2.</source>
          <target state="translated">base 2 の&lt;a href=&quot;#numpy.base_repr&quot;&gt; &lt;code&gt;base_repr&lt;/code&gt; の&lt;/a&gt;高速バージョン。</target>
        </trans-unit>
        <trans-unit id="450b0ab74bf6b08b6fed235cfac5fd255dd761eb" translate="yes" xml:space="preserve">
          <source>Fasttake and fastputmask slots are deprecated and NULL&amp;rsquo;ed</source>
          <target state="translated">Fasttakeおよびfastputmaskスロットは非推奨になり、NULLになります</target>
        </trans-unit>
        <trans-unit id="ad565d9d01d0e0bf91fd6a8532f6d81613338901" translate="yes" xml:space="preserve">
          <source>Feature</source>
          <target state="translated">Feature</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="cba8e75130f021ad02ee54a4acd20b3b023d217d" translate="yes" xml:space="preserve">
          <source>Fernando Perez&amp;rsquo; git page - &lt;a href=&quot;http://www.fperez.org/py4science/git.html&quot;&gt;Fernando&amp;rsquo;s git page&lt;/a&gt; - many links and tips</source>
          <target state="translated">フェルナンドペレスのgitページ-&lt;a href=&quot;http://www.fperez.org/py4science/git.html&quot;&gt;フェルナンドのgitページ&lt;/a&gt;-多くのリンクとヒント</target>
        </trans-unit>
        <trans-unit id="5c6f34280b7f890c09c370b6ae106bab782a8ea7" translate="yes" xml:space="preserve">
          <source>Field Access</source>
          <target state="translated">フィールドアクセス</target>
        </trans-unit>
        <trans-unit id="783edc3ed85699bf943ebb957a288a27bf6fa548" translate="yes" xml:space="preserve">
          <source>Field Titles</source>
          <target state="translated">フィールドタイトル</target>
        </trans-unit>
        <trans-unit id="1f20e66b17a6eb7c2baf1ab68337d91eaf6f4f80" translate="yes" xml:space="preserve">
          <source>Figure</source>
          <target state="translated">Figure</target>
        </trans-unit>
        <trans-unit id="6810ab68c484c234e459c4fd42ee6ddebf48e9df" translate="yes" xml:space="preserve">
          <source>File bug reports or feature requests, and make contributions (e.g. code patches), by opening a &amp;ldquo;new issue&amp;rdquo; on GitHub:</source>
          <target state="translated">GitHubで「新しい問題」を開いて、バグレポートや機能リクエストを提出し、貢献（コードパッチなど）を行います。</target>
        </trans-unit>
        <trans-unit id="373ecfdf236324d2c0d2c0966daa4376bd84ecc7" translate="yes" xml:space="preserve">
          <source>File extensions</source>
          <target state="translated">ファイル拡張子</target>
        </trans-unit>
        <trans-unit id="d09479e812c08194a796ba5cf0534018f31d75df" translate="yes" xml:space="preserve">
          <source>File like object that the output is written to, default is &lt;code&gt;stdout&lt;/code&gt;. The object has to be opened in &amp;lsquo;w&amp;rsquo; or &amp;lsquo;a&amp;rsquo; mode.</source>
          <target state="translated">出力が書き込まれるオブジェクトのようなファイル。デフォルトは &lt;code&gt;stdout&lt;/code&gt; です。オブジェクトは「w」または「a」モードで開く必要があります。</target>
        </trans-unit>
        <trans-unit id="87eae4c8fed58e613f33763392061f9f060bfb3a" translate="yes" xml:space="preserve">
          <source>File mode.</source>
          <target state="translated">ファイルモード。</target>
        </trans-unit>
        <trans-unit id="fd757708817417e6d160c4d854e159b642dde015" translate="yes" xml:space="preserve">
          <source>File name or file object to read.</source>
          <target state="translated">読み取るファイル名またはファイルオブジェクト。</target>
        </trans-unit>
        <trans-unit id="a9cb7966c21c4ba3f863696ad8ce671f4f627493" translate="yes" xml:space="preserve">
          <source>File object.</source>
          <target state="translated">ファイルオブジェクト。</target>
        </trans-unit>
        <trans-unit id="4a94520c92dda87c31025fbdcee94cc740835e3c" translate="yes" xml:space="preserve">
          <source>File on disk is unchanged:</source>
          <target state="translated">ディスク上のファイルに変更はありません。</target>
        </trans-unit>
        <trans-unit id="0031f1b0b3ec78263f049edb5bf2d9bd62cb7daa" translate="yes" xml:space="preserve">
          <source>File or filename to which the data is saved. If file is a file-object, then the filename is unchanged. If file is a string or Path, a &lt;code&gt;.npy&lt;/code&gt; extension will be appended to the file name if it does not already have one.</source>
          <target state="translated">データの保存先のファイルまたはファイル名。fileがfile-objectの場合、ファイル名は変更されません。ファイルが文字列またはパスの場合、拡張子がない場合は &lt;code&gt;.npy&lt;/code&gt; 拡張子がファイル名に追加されます。</target>
        </trans-unit>
        <trans-unit id="1eb6e34596962a0a844dec399c9d41368523ad02" translate="yes" xml:space="preserve">
          <source>File or filename to which the data is saved. If file is a file-object, then the filename is unchanged. If file is a string or Path, a &lt;code&gt;.npy&lt;/code&gt; extension will be appended to the filename if it does not already have one.</source>
          <target state="translated">データが保存されるファイルまたはファイル名。fileがfile-objectの場合、ファイル名は変更されません。ファイルが文字列またはパスの場合、ファイル名に &lt;code&gt;.npy&lt;/code&gt; 拡張子が付いていなければ、拡張子が.npyに追加されます。</target>
        </trans-unit>
        <trans-unit id="e820f26629f1b163437a25da45907f2a0bdeef89" translate="yes" xml:space="preserve">
          <source>File, filename, list, or generator to read. If the filename extension is &lt;code&gt;gz&lt;/code&gt; or &lt;a href=&quot;https://docs.python.org/dev/library/bz2.html#module-bz2&quot;&gt;&lt;code&gt;bz2&lt;/code&gt;&lt;/a&gt;, the file is first decompressed. Note that generators must return byte strings in Python 3k. The strings in a list or produced by a generator are treated as lines.</source>
          <target state="translated">読み取るファイル、ファイル名、リスト、またはジェネレータ。ファイル名の拡張子が &lt;code&gt;gz&lt;/code&gt; または&lt;a href=&quot;https://docs.python.org/dev/library/bz2.html#module-bz2&quot;&gt; &lt;code&gt;bz2&lt;/code&gt; の&lt;/a&gt;場合、ファイルは最初に解凍されます。ジェネレーターはPython 3kでバイト文字列を返す必要があることに注意してください。リスト内の文字列またはジェネレータによって生成された文字列は、行として扱われます。</target>
        </trans-unit>
        <trans-unit id="fab43e32c1dfae0973539d24c1436cb574228947" translate="yes" xml:space="preserve">
          <source>File, filename, list, or generator to read. If the filename extension is &lt;code&gt;gz&lt;/code&gt; or &lt;a href=&quot;https://docs.python.org/dev/library/bz2.html#module-bz2&quot;&gt;&lt;code&gt;bz2&lt;/code&gt;&lt;/a&gt;, the file is first decompressed. Note that generators must return byte strings. The strings in a list or produced by a generator are treated as lines.</source>
          <target state="translated">読み取るファイル、ファイル名、リスト、またはジェネレーター。ファイル名拡張子が &lt;code&gt;gz&lt;/code&gt; または&lt;a href=&quot;https://docs.python.org/dev/library/bz2.html#module-bz2&quot;&gt; &lt;code&gt;bz2&lt;/code&gt; の&lt;/a&gt;場合、ファイルは最初に解凍されます。ジェネレータはバイト文字列を返す必要があることに注意してください。リスト内の文字列またはジェネレータによって生成された文字列は、行として扱われます。</target>
        </trans-unit>
        <trans-unit id="822b222e1d15e367e3952f91b983db03e9a7813a" translate="yes" xml:space="preserve">
          <source>File, filename, or generator to read. If the filename extension is &lt;code&gt;.gz&lt;/code&gt; or &lt;code&gt;.bz2&lt;/code&gt;, the file is first decompressed. Note that generators should return byte strings for Python 3k.</source>
          <target state="translated">読み取るファイル、ファイル名、またはジェネレータ。ファイル名の拡張子が &lt;code&gt;.gz&lt;/code&gt; または &lt;code&gt;.bz2&lt;/code&gt; の場合、ファイルは最初に解凍されます。ジェネレーターはPython 3kのバイト文字列を返す必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7c2d62ffff5fbd690a9400522b7a8e17b68bb40c" translate="yes" xml:space="preserve">
          <source>File, filename, or generator to read. If the filename extension is &lt;code&gt;.gz&lt;/code&gt; or &lt;code&gt;.bz2&lt;/code&gt;, the file is first decompressed. Note that generators should return byte strings.</source>
          <target state="translated">読み取るファイル、ファイル名、またはジェネレーター。ファイル名拡張子が &lt;code&gt;.gz&lt;/code&gt; または &lt;code&gt;.bz2&lt;/code&gt; の場合、ファイルは最初に解凍されます。ジェネレータはバイト文字列を返す必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c13aad6dcb77e8786c02dc6c8f0cc3a100a87f10" translate="yes" xml:space="preserve">
          <source>File-like object to write the output to. If omitted, use a pager.</source>
          <target state="translated">出力を書き込むファイルのようなオブジェクト。省略した場合はページャーを使用します。</target>
        </trans-unit>
        <trans-unit id="3b5057522ae1af734e89a0b5dfbff160729789a2" translate="yes" xml:space="preserve">
          <source>Filename extension if &lt;code&gt;source_fn&lt;/code&gt; is not provided. The extension tells which fortran standard is used. The default is &lt;code&gt;f&lt;/code&gt;, which implies F77 standard.</source>
          <target state="translated">&lt;code&gt;source_fn&lt;/code&gt; が指定されていない場合のファイル名拡張子。拡張機能は、どのFortran標準が使用されているかを示します。デフォルトは &lt;code&gt;f&lt;/code&gt; で、これはF77標準を意味します。</target>
        </trans-unit>
        <trans-unit id="529e452aa227b660fcf372199a15e8d7d5c2906a" translate="yes" xml:space="preserve">
          <source>Filename or file object to read.</source>
          <target state="translated">読み取るファイル名またはファイルオブジェクト。</target>
        </trans-unit>
        <trans-unit id="441bea0f99295363abddd57e69579a4d7e166597" translate="yes" xml:space="preserve">
          <source>Files output by &lt;a href=&quot;../reference/generated/numpy.save#numpy.save&quot;&gt;&lt;code&gt;numpy.save&lt;/code&gt;&lt;/a&gt; (that is, using the numpy format) can be read using &lt;a href=&quot;../reference/generated/numpy.load#numpy.load&quot;&gt;&lt;code&gt;numpy.load&lt;/code&gt;&lt;/a&gt; with the &lt;code&gt;mmap_mode&lt;/code&gt; keyword argument:</source>
          <target state="translated">ファイル出力&lt;a href=&quot;../reference/generated/numpy.save#numpy.save&quot;&gt; &lt;code&gt;numpy.save&lt;/code&gt; &lt;/a&gt;（numpyの形式を使用して、ある）を使用して読み取ることができ&lt;a href=&quot;../reference/generated/numpy.load#numpy.load&quot;&gt; &lt;code&gt;numpy.load&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;mmap_mode&lt;/code&gt; のキーワード引数を：</target>
        </trans-unit>
        <trans-unit id="cafc76c090d17de83480422080a28bd0d7fd39f0" translate="yes" xml:space="preserve">
          <source>Fill a newly created array with a single value obj at all locations in the structure with object data-types. No checking is performed but &lt;em&gt;arr&lt;/em&gt; must be of data-type &lt;a href=&quot;c-api.dtype#c.NPY_OBJECT&quot;&gt;&lt;code&gt;NPY_OBJECT&lt;/code&gt;&lt;/a&gt; and be single-segment and uninitialized (no previous objects in position). Use &lt;code&gt;PyArray_DECREF&lt;/code&gt; (&lt;em&gt;arr&lt;/em&gt;) if you need to decrement all the items in the object array prior to calling this function.</source>
          <target state="translated">新しく作成された配列に、構造体のすべての場所で単一の値objをオブジェクトデータ型で埋めます。チェックは行われませんが、&lt;em&gt;arr&lt;/em&gt;はデータ型&lt;a href=&quot;c-api.dtype#c.NPY_OBJECT&quot;&gt; &lt;code&gt;NPY_OBJECT&lt;/code&gt; &lt;/a&gt;で、単一セグメントで初期化されていない（前のオブジェクトが配置されていない）必要があります。この関数を呼び出す前にオブジェクト配列のすべての項目をデクリメントする必要がある場合は、 &lt;code&gt;PyArray_DECREF&lt;/code&gt; （&lt;em&gt;arr&lt;/em&gt;）を使用してください。</target>
        </trans-unit>
        <trans-unit id="612fab5ef5d07ab4ae826c3e92e57f0933c1a153" translate="yes" xml:space="preserve">
          <source>Fill a newly created array with a single value obj at all locations in the structure with object data-types. No checking is performed but &lt;em&gt;arr&lt;/em&gt; must be of data-type &lt;a href=&quot;dtype#c.NPY_OBJECT&quot;&gt;&lt;code&gt;NPY_OBJECT&lt;/code&gt;&lt;/a&gt; and be single-segment and uninitialized (no previous objects in position). Use &lt;a href=&quot;#c.PyArray_XDECREF&quot;&gt;&lt;code&gt;PyArray_XDECREF&lt;/code&gt;&lt;/a&gt; (&lt;em&gt;arr&lt;/em&gt;) if you need to decrement all the items in the object array prior to calling this function.</source>
          <target state="translated">構造内のすべての場所で、新しく作成された配列に単一の値objをオブジェクトデータ型で入力します。チェックは実行されませんが、&lt;em&gt;arr&lt;/em&gt;はデータ型&lt;a href=&quot;dtype#c.NPY_OBJECT&quot;&gt; &lt;code&gt;NPY_OBJECT&lt;/code&gt; で&lt;/a&gt;あり、単一セグメントで初期化されていない必要があります（前のオブジェクトが配置されていない）。この関数を呼び出す前にオブジェクト配列内のすべての項目をデクリメントする必要がある場合は、&lt;a href=&quot;#c.PyArray_XDECREF&quot;&gt; &lt;code&gt;PyArray_XDECREF&lt;/code&gt; &lt;/a&gt;（&lt;em&gt;arr&lt;/em&gt;）を使用します。</target>
        </trans-unit>
        <trans-unit id="bb9c4c9e7ee887e06f557b25790d19437a193098" translate="yes" xml:space="preserve">
          <source>Fill a newly created array with a single value obj at all locations in the structure with object data-types. No checking is performed but &lt;em&gt;arr&lt;/em&gt; must be of data-type &lt;a href=&quot;dtype#c.NPY_OBJECT&quot;&gt;&lt;code&gt;NPY_OBJECT&lt;/code&gt;&lt;/a&gt; and be single-segment and uninitialized (no previous objects in position). Use &lt;code&gt;PyArray_DECREF&lt;/code&gt; (&lt;em&gt;arr&lt;/em&gt;) if you need to decrement all the items in the object array prior to calling this function.</source>
          <target state="translated">構造内のすべての場所で、新しく作成された配列に単一の値objをオブジェクトデータ型で入力します。チェックは実行されませんが、&lt;em&gt;arr&lt;/em&gt;はデータ型&lt;a href=&quot;dtype#c.NPY_OBJECT&quot;&gt; &lt;code&gt;NPY_OBJECT&lt;/code&gt; で&lt;/a&gt;あり、単一セグメントで初期化されていない必要があります（前のオブジェクトが配置されていない）。この関数を呼び出す前にオブジェクト配列内のすべての項目をデクリメントする必要がある場合は、 &lt;code&gt;PyArray_DECREF&lt;/code&gt; （&lt;em&gt;arr&lt;/em&gt;）を使用します。</target>
        </trans-unit>
        <trans-unit id="2dddc689c840b0f704b5fbfeacd8ef3c5403555f" translate="yes" xml:space="preserve">
          <source>Fill in a new Python type-object structure with pointers to new functions that will over-ride the default behavior while leaving any function that should remain the same unfilled (or NULL). The tp_name element should be different.</source>
          <target state="translated">デフォルトの振る舞いを上書きする新しい関数へのポインタを持つ新しいPythonの型オブジェクト構造体を埋めます。tp_name要素は異なるものでなければなりません。</target>
        </trans-unit>
        <trans-unit id="522f873213d8106cc0a4bcd37cf77275093b44ed" translate="yes" xml:space="preserve">
          <source>Fill in the tp_base member of the new type-object structure with a pointer to the (main) parent type object. For multiple-inheritance, also fill in the tp_bases member with a tuple containing all of the parent objects in the order they should be used to define inheritance. Remember, all parent-types must have the same C-structure for multiple inheritance to work properly.</source>
          <target state="translated">新しい型オブジェクト構造体の tp_base メンバに、(メインの)親型オブジェクトへのポインタを記入します。複数継承の場合は、継承を定義するために使用されるべき順序で、すべての親オブジェクトを含むタプルを tp_bases メンバに記入します。マルチプル継承が正しく動作するためには、すべての親型が同じC構造を持っていなければならないことを覚えておいてください。</target>
        </trans-unit>
        <trans-unit id="b5a170286ef4b261aa8d713f55afdd2bfdd31a79" translate="yes" xml:space="preserve">
          <source>Fill out the release note &lt;code&gt;doc/release/1.14.5-notes.rst&lt;/code&gt; calling out significant changes.</source>
          <target state="translated">リリースノート &lt;code&gt;doc/release/1.14.5-notes.rst&lt;/code&gt; に記入して、重要な変更を呼び出します。</target>
        </trans-unit>
        <trans-unit id="7b1b896be57d746740e7bb01641621fc3fcf97bb" translate="yes" xml:space="preserve">
          <source>Fill out the release note &lt;code&gt;doc/release/1.19.0-notes.rst&lt;/code&gt; calling out significant changes.</source>
          <target state="translated">リリースノート &lt;code&gt;doc/release/1.19.0-notes.rst&lt;/code&gt; に記入して、重要な変更を呼び出します。</target>
        </trans-unit>
        <trans-unit id="260366fdf73d36b977576943b4aedf90420566c3" translate="yes" xml:space="preserve">
          <source>Fill the array pointed to by &lt;em&gt;obj&lt;/em&gt; &amp;mdash;which must be a (subclass of) ndarray&amp;mdash;with the contents of &lt;em&gt;val&lt;/em&gt; (evaluated as a byte). This macro calls memset, so obj must be contiguous.</source>
          <target state="translated">&lt;em&gt;objが&lt;/em&gt;指す配列（ndarray（のサブクラス）でなければなりません）に、&lt;em&gt;val&lt;/em&gt;の内容（バイトとして評価）を入力します。このマクロはmemsetを呼び出すため、objは連続している必要があります。</target>
        </trans-unit>
        <trans-unit id="1cc72d434ca66ec2855e95222b47cf34ee62d6a9" translate="yes" xml:space="preserve">
          <source>Fill the array with a scalar value.</source>
          <target state="translated">配列をスカラ値で埋めます。</target>
        </trans-unit>
        <trans-unit id="a5d5966e608173a9667b1c1fac892e66538c72e9" translate="yes" xml:space="preserve">
          <source>Fill the array, &lt;em&gt;arr&lt;/em&gt;, with the given scalar object, &lt;em&gt;obj&lt;/em&gt;. The object is first converted to the data type of &lt;em&gt;arr&lt;/em&gt;, and then copied into every location. A -1 is returned if an error occurs, otherwise 0 is returned.</source>
          <target state="translated">配列&lt;em&gt;arr&lt;/em&gt;に、指定されたスカラーオブジェクト&lt;em&gt;objを入力し&lt;/em&gt;ます。オブジェクトはまず&lt;em&gt;arr&lt;/em&gt;のデータ型に変換され、次にすべての場所にコピーされます。エラーが発生した場合は-1が返され、それ以外の場合は0が返されます。</target>
        </trans-unit>
        <trans-unit id="7bee882405d3a5e1e28b315ab4a7baab2498c486" translate="yes" xml:space="preserve">
          <source>Fill the main diagonal of the given array of any dimensionality.</source>
          <target state="translated">任意の次元の配列の主対角線を埋めます.</target>
        </trans-unit>
        <trans-unit id="b0054199bd21115b17143e2277b55874769f1942" translate="yes" xml:space="preserve">
          <source>Fill value.</source>
          <target state="translated">塗りつぶし値。</target>
        </trans-unit>
        <trans-unit id="b3edc087fa7c92433208963d028502658cb11c3c" translate="yes" xml:space="preserve">
          <source>Filling a masked array</source>
          <target state="translated">マスクされた配列を埋める</target>
        </trans-unit>
        <trans-unit id="b16b1c014bc041df050e0baec2b30b9a58147141" translate="yes" xml:space="preserve">
          <source>Filling in the missing data</source>
          <target state="translated">不足しているデータを埋める</target>
        </trans-unit>
        <trans-unit id="f534a9943c59ee88bfbaa91a174f38f23a434db7" translate="yes" xml:space="preserve">
          <source>Filling value used to pad missing data on the shorter arrays.</source>
          <target state="translated">短い配列の欠落したデータを埋めるために使用される充填値。</target>
        </trans-unit>
        <trans-unit id="4473d8b6f530a08d5d328b58cdecfd819be6ec67" translate="yes" xml:space="preserve">
          <source>Filling value. A consistency test is performed to make sure the value is compatible with the dtype of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">充填値。値が &lt;code&gt;a&lt;/code&gt; のdtypeと互換性があることを確認するために、整合性テストが実行されます。</target>
        </trans-unit>
        <trans-unit id="13227282778cd8d20999d32a512e651e3ee07193" translate="yes" xml:space="preserve">
          <source>Filling value. Default is None.</source>
          <target state="translated">充填値を指定します。デフォルトは None です。</target>
        </trans-unit>
        <trans-unit id="6c1d42d50fc7e4074f490614ad1bcf00ba471b76" translate="yes" xml:space="preserve">
          <source>Fills &lt;code&gt;nop&lt;/code&gt; flags. Sets &lt;code&gt;outreadflags[i]&lt;/code&gt; to 1 if &lt;code&gt;op[i]&lt;/code&gt; can be read from, and to 0 if not.</source>
          <target state="translated">塗りつぶしは、 &lt;code&gt;nop&lt;/code&gt; フラグを。 &lt;code&gt;op[i]&lt;/code&gt; を読み取ることができる場合は &lt;code&gt;outreadflags[i]&lt;/code&gt; を1に設定し、そうでない場合は0に設定します。</target>
        </trans-unit>
        <trans-unit id="749d04ce696c047f8e1f31d9e0905d115c8ee6f7" translate="yes" xml:space="preserve">
          <source>Fills &lt;code&gt;nop&lt;/code&gt; flags. Sets &lt;code&gt;outwriteflags[i]&lt;/code&gt; to 1 if &lt;code&gt;op[i]&lt;/code&gt; can be written to, and to 0 if not.</source>
          <target state="translated">塗りつぶしは、 &lt;code&gt;nop&lt;/code&gt; フラグを。 &lt;code&gt;op[i]&lt;/code&gt; に書き込むことができる場合は &lt;code&gt;outwriteflags[i]&lt;/code&gt; を1に設定し、できない場合は0に設定します。</target>
        </trans-unit>
        <trans-unit id="488079b1696f7e1612a42c6bc0389bc81283467e" translate="yes" xml:space="preserve">
          <source>Fills fields from output with fields from input, with support for nested structures.</source>
          <target state="translated">出力からのフィールドを入力からのフィールドで埋め、入れ子構造をサポートします。</target>
        </trans-unit>
        <trans-unit id="8d3ad1e9024ff38aba4d75bcdff8761b89757502" translate="yes" xml:space="preserve">
          <source>Filter deprecation warnings while running the test suite.</source>
          <target state="translated">テストスイートの実行中に非推奨の警告をフィルタリングします。</target>
        </trans-unit>
        <trans-unit id="53d64090d55b3e9e6c51d2a5eb3eec10a8e6734d" translate="yes" xml:space="preserve">
          <source>Filters added inside the context manager will be discarded again when leaving it. Upon entering all filters defined outside a context will be applied automatically.</source>
          <target state="translated">コンテキストマネージャ内で追加されたフィルタは、コンテキストマネージャを離れると再び破棄されます。コンテキストの外側で定義されたフィルタは、入力時に自動的に適用されます。</target>
        </trans-unit>
        <trans-unit id="1f7718a6ac69fd3c4dc296189cd48158349007af" translate="yes" xml:space="preserve">
          <source>Final output manipulation</source>
          <target state="translated">最終出力操作</target>
        </trans-unit>
        <trans-unit id="e9f53f9791e6b436e0f9b0c9184addd1c942785e" translate="yes" xml:space="preserve">
          <source>Final words</source>
          <target state="translated">最後の言葉</target>
        </trans-unit>
        <trans-unit id="00438430543507877599066cb88e3248f61081f4" translate="yes" xml:space="preserve">
          <source>Finally if we use the option &lt;code&gt;rowvar=False&lt;/code&gt;, the columns are now being treated as the variables and we will find the column-wise Pearson correlation coefficients between variables in &lt;code&gt;xarr&lt;/code&gt; and &lt;code&gt;yarr&lt;/code&gt;.</source>
          <target state="translated">最後に、オプション &lt;code&gt;rowvar=False&lt;/code&gt; を使用すると、列が変数として扱われ、 &lt;code&gt;xarr&lt;/code&gt; と &lt;code&gt;yarr&lt;/code&gt; の変数間の列ごとのピアソン相関係数が見つかります。</target>
        </trans-unit>
        <trans-unit id="f8cf825450130b603f61a294cd870952ff541ac0" translate="yes" xml:space="preserve">
          <source>Finally make a pull request using Github. Make sure it is against the maintenance branch and not master, Github will usually suggest you make the pull request against master.</source>
          <target state="translated">最後にGithubを使ってプルリクエストを行います。master ではなく maintenance ブランチに対するものであることを確認してください。Github は通常、master に対するプルリクエストを推奨します。</target>
        </trans-unit>
        <trans-unit id="ba468d0ce6c90f05fb67a4c2a63c164ebea004bd" translate="yes" xml:space="preserve">
          <source>Finally, &lt;code&gt;Configuration&lt;/code&gt; has &lt;code&gt;.todict()&lt;/code&gt; method that returns all the configuration data as a dictionary suitable for passing on to the &lt;code&gt;setup(..)&lt;/code&gt; function.</source>
          <target state="translated">最後に、 &lt;code&gt;Configuration&lt;/code&gt; には、すべての構成データを、 &lt;code&gt;setup(..)&lt;/code&gt; 関数に渡すのに適した辞書として返す &lt;code&gt;.todict()&lt;/code&gt; メソッドがあります。</target>
        </trans-unit>
        <trans-unit id="889c8c42cccc1d124561a48d8ca41abb6ac29d7b" translate="yes" xml:space="preserve">
          <source>Finally, a data type can describe items that are themselves arrays of items of another data type. These sub-arrays must, however, be of a fixed size.</source>
          <target state="translated">最後に、データ型は、それ自体が別のデータ型の項目の配列である項目を記述することができます。ただし、これらのサブ配列は固定サイズでなければなりません。</target>
        </trans-unit>
        <trans-unit id="aa9d6cc4ce78cfcc5632e894bf62475be204d2f2" translate="yes" xml:space="preserve">
          <source>Finally, build an extension module using &lt;code&gt;f2py -c -m foo calculate.f&lt;/code&gt;</source>
          <target state="translated">最後に、 &lt;code&gt;f2py -c -m foo calculate.f&lt;/code&gt; を使用して拡張モジュールを構築します。</target>
        </trans-unit>
        <trans-unit id="8c4822ed4109421c2e3621bdd61e51416dfd1386" translate="yes" xml:space="preserve">
          <source>Finally, build the extension module using &lt;code&gt;f2py -c callback2.pyf callback.f&lt;/code&gt;.</source>
          <target state="translated">最後に、 &lt;code&gt;f2py -c callback2.pyf callback.f&lt;/code&gt; を使用して拡張モジュールをビルドします。</target>
        </trans-unit>
        <trans-unit id="a4dd8d197deae557aaf37f23e5e903c7287b1045" translate="yes" xml:space="preserve">
          <source>Finally, if you are only interested in testing a subset of NumPy, for example, the &lt;code&gt;core&lt;/code&gt; module, use the following:</source>
          <target state="translated">最後に、 &lt;code&gt;core&lt;/code&gt; モジュールなど、NumPyのサブセットのテストのみに関心がある場合は、以下を使用します。</target>
        </trans-unit>
        <trans-unit id="591676022a4d7afed7631e7209e11f88a0c70ca2" translate="yes" xml:space="preserve">
          <source>Finally, if you are only interested in testing a subset of SciPy, for example, the &lt;code&gt;integrate&lt;/code&gt; module, use the following:</source>
          <target state="translated">最後に、 &lt;code&gt;integrate&lt;/code&gt; モジュールなど、SciPyのサブセットのテストのみに関心がある場合は、以下を使用します。</target>
        </trans-unit>
        <trans-unit id="7ffdd7c64bfdacea7dacfdba32a5f08b8fc22860" translate="yes" xml:space="preserve">
          <source>Finally, if you detect a typo or an error in the documentation, or would like to suggest a different approach, you can also open an issue or submit a pull request with your suggestion. Keep in mind that changes fixing grammatical/spelling errors are welcome but not necessarily the highest priority. &amp;ldquo;Grammatical correctness&amp;rdquo; often gets confused with &amp;ldquo;style&amp;rdquo; which can result in unfruitful discussions that don&amp;rsquo;t necessarily improve anything. Changes that modify wording or rearrange phrasing without changing the technical content are discouraged. If you think that a different wording improves clarity, you should open an issue as noted above, but again, changes along these lines very often tend to be highly subjective and not necessarily do much to improve the quality of the documentation.</source>
          <target state="translated">最後に、ドキュメントでタイプミスやエラーを検出した場合、または別のアプローチを提案したい場合は、問題を開いたり、提案とともにプルリクエストを送信したりすることもできます。文法/スペルミスを修正する変更は歓迎されますが、必ずしも最優先事項ではないことに注意してください。 「文法の正しさ」は「スタイル」と混同されることが多く、その結果、必ずしも何も改善されない不実な議論につながる可能性があります。技術的な内容を変更せずに文言を変更したり、フレージングを再配置したりすることはお勧めしません。別の言い回しで明快さが向上すると思われる場合は、上記のように問題を開く必要がありますが、繰り返しになりますが、これらの線に沿った変更は非常に主観的である傾向があり、必ずしもドキュメントの品質を向上させるとは限りません。</target>
        </trans-unit>
        <trans-unit id="3cd9ab198daaf3fb255075968e2a8d87bc37a3b9" translate="yes" xml:space="preserve">
          <source>Finally, it is emphasized that &lt;code&gt;v&lt;/code&gt; consists of the &lt;em&gt;right&lt;/em&gt; (as in right-hand side) eigenvectors of &lt;code&gt;a&lt;/code&gt;. A vector &lt;code&gt;y&lt;/code&gt; satisfying &lt;code&gt;dot(y.T, a) = z * y.T&lt;/code&gt; for some number &lt;code&gt;z&lt;/code&gt; is called a &lt;em&gt;left&lt;/em&gt; eigenvector of &lt;code&gt;a&lt;/code&gt;, and, in general, the left and right eigenvectors of a matrix are not necessarily the (perhaps conjugate) transposes of each other.</source>
          <target state="translated">最後に、 &lt;code&gt;v&lt;/code&gt; が &lt;code&gt;a&lt;/code&gt; の&lt;em&gt;右&lt;/em&gt;（固有値）の固有ベクトルで構成されることを強調します。ベクトル &lt;code&gt;y&lt;/code&gt; 満たす &lt;code&gt;dot(y.T, a) = z * y.T&lt;/code&gt; いくつかの数のために &lt;code&gt;z&lt;/code&gt; 呼び出され&lt;em&gt;、左&lt;/em&gt;の固有ベクトル、及び、一般的に、マトリックスの左と右の固有ベクトルは、必ずしもそれぞれの（おそらく共役）転置ありませんその他。&lt;em&gt;&lt;/em&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d65f378e68ed6a19a18dfdea402e5e3481327cbe" translate="yes" xml:space="preserve">
          <source>Finally, it is emphasized that &lt;code&gt;v&lt;/code&gt; consists of the &lt;em&gt;right&lt;/em&gt; (as in right-hand side) eigenvectors of &lt;code&gt;a&lt;/code&gt;. A vector &lt;code&gt;y&lt;/code&gt; satisfying &lt;code&gt;y.T @ a = z * y.T&lt;/code&gt; for some number &lt;code&gt;z&lt;/code&gt; is called a &lt;em&gt;left&lt;/em&gt; eigenvector of &lt;code&gt;a&lt;/code&gt;, and, in general, the left and right eigenvectors of a matrix are not necessarily the (perhaps conjugate) transposes of each other.</source>
          <target state="translated">最後に、ことが強調される &lt;code&gt;v&lt;/code&gt; で構成され&lt;em&gt;、右&lt;/em&gt;の固有ベクトル（右側のように）。ベクトル &lt;code&gt;y&lt;/code&gt; 満足 &lt;code&gt;y.T @ a = z * y.T&lt;/code&gt; いくつかの数のために &lt;code&gt;z&lt;/code&gt; が呼び出され&lt;em&gt;、左&lt;/em&gt;の固有ベクトル一般的に、マトリックスの左と右の固有ベクトルは、必ずしも互いの（おそらく共役）転置されない、などです。 &lt;code&gt;a&lt;/code&gt; &lt;em&gt;&lt;/em&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7cc16b6bd7f60859052f3d3e721d3a31f9f6a180" translate="yes" xml:space="preserve">
          <source>Finally, now you are confident this tag correctly defines the source code that you released you can push the tag and release commit up to github:</source>
          <target state="translated">最後に、このタグがリリースしたソースコードを正しく定義していることを確認したら、このタグをgithubにプッシュしてコミットをリリースすることができます。</target>
        </trans-unit>
        <trans-unit id="6153981fb1186c6a6c180fa5791ae775d104d070" translate="yes" xml:space="preserve">
          <source>Finally, remove the backup branch upon a successful rebase:</source>
          <target state="translated">最後に、リベースが成功したらバックアップブランチを削除します。</target>
        </trans-unit>
        <trans-unit id="98d9a64e4784c058720be52ad39c03d39a9fcbd1" translate="yes" xml:space="preserve">
          <source>Finally, specific entries can be masked and/or unmasked by assigning to the mask a sequence of booleans:</source>
          <target state="translated">最後に、マスクにブーリアンのシーケンスを割り当てることで、特定のエントリをマスクしたり、マスクを解除したりすることができます。</target>
        </trans-unit>
        <trans-unit id="4d63661f6815f6c84ea80e3487b297638030ca91" translate="yes" xml:space="preserve">
          <source>Finally, the committee will make a report to the NumPy Steering Council (as well as the NumPy core team in the event of an ongoing resolution, such as a ban).</source>
          <target state="translated">最後に、委員会はNumPy運営協議会に報告を行います(禁止などの継続中の決議があった場合はNumPyコアチームにも報告します)。</target>
        </trans-unit>
        <trans-unit id="d4ee797bc2c97cc8f17d94ef802f458cb35c39bc" translate="yes" xml:space="preserve">
          <source>Finally, the decision is made about how to execute the looping mechanism to ensure that all elements of the input arrays are combined to produce the output arrays of the correct type. The options for loop execution are one-loop (for contiguous, aligned, and correct data type), strided-loop (for non-contiguous but still aligned and correct data type), and a buffered loop (for mis-aligned or incorrect data type situations). Depending on which execution method is called for, the loop is then setup and computed.</source>
          <target state="translated">最後に,入力配列のすべての要素が正しい型の出力配列を生成するために結合されることを確実にするために,ループ機構をどのように実行するかについての決定が行われます.ループ実行のオプションは,1ループ(連続しており,整列しており,正しいデータ型の場合),strided-loop(連続していないが整列しており,正しいデータ型の場合),およびバッファ付きループ(整列していない,または正しくないデータ型の場合)です.どの実行方法が呼び出されたかに応じて、ループが設定され、計算されます。</target>
        </trans-unit>
        <trans-unit id="75d671d62eb366ddccfcb1e2724191d1a472b131" translate="yes" xml:space="preserve">
          <source>Finally, the two functions to be exported by the interface can be written simply as:</source>
          <target state="translated">最後に、インターフェースがエクスポートする2つの関数は、単純に次のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="f06dcc2f32047bb203bf95d18ff9fb7501e8c9e4" translate="yes" xml:space="preserve">
          <source>Finally, to obtain the full approximated image, we need to reassemble these matrices into the approximation. Now, note that</source>
          <target state="translated">最後に、完全な近似画像を得るために、これらの行列を近似画像に再構築する必要があります。さて、次のことに注意してください</target>
        </trans-unit>
        <trans-unit id="9c273592d00189e2853888104625c36c4333a6db" translate="yes" xml:space="preserve">
          <source>Finally, we can use the &lt;a href=&quot;../reference/generated/numpy.polyfit#numpy.polyfit&quot;&gt;&lt;code&gt;numpy.polyfit&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../reference/generated/numpy.polyval#numpy.polyval&quot;&gt;&lt;code&gt;numpy.polyval&lt;/code&gt;&lt;/a&gt; functions to create a cubic polynomial that fits the data as best as possible:</source>
          <target state="translated">最後に、我々は使用することができます&lt;a href=&quot;../reference/generated/numpy.polyfit#numpy.polyfit&quot;&gt; &lt;code&gt;numpy.polyfit&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../reference/generated/numpy.polyval#numpy.polyval&quot;&gt; &lt;code&gt;numpy.polyval&lt;/code&gt; &lt;/a&gt;可能な限り最善のように、データをフィットする三次多項式を作成する機能を：</target>
        </trans-unit>
        <trans-unit id="3616e9f1dcf861efd823c12b4478a31e6b82b402" translate="yes" xml:space="preserve">
          <source>Financial functions</source>
          <target state="translated">財務機能</target>
        </trans-unit>
        <trans-unit id="53f4aed5ee4b6d593eda026d381266350f216eeb" translate="yes" xml:space="preserve">
          <source>Financial functions removed</source>
          <target state="translated">財務機能の削除</target>
        </trans-unit>
        <trans-unit id="e6c50d99742741634b01369176b77e9bcc5af665" translate="yes" xml:space="preserve">
          <source>Financial interests, such as investments, employment or contracting work, outside of The Project that may influence their work on The Project.</source>
          <target state="translated">プロジェクト以外の投資、雇用、請負業務など、プロジェクトでの業務に影響を与える可能性のある財務上の利害関係。</target>
        </trans-unit>
        <trans-unit id="eddebdeca9f674c3a8bdff9147a750bce04b0b48" translate="yes" xml:space="preserve">
          <source>Find a candidate who can serve as a mediator.</source>
          <target state="translated">斡旋役を務めてくれる候補者を探しましょう。</target>
        </trans-unit>
        <trans-unit id="75334f040026f76d3eebb8839bcb303508014551" translate="yes" xml:space="preserve">
          <source>Find a domain suitable for a polynomial or Chebyshev series defined at the values supplied.</source>
          <target state="translated">与えられた値で定義された多項式またはチェビシェフ級数に適した領域を探します。</target>
        </trans-unit>
        <trans-unit id="ed86545ba6a43e29b3c6f7f80bac3bf11a762f81" translate="yes" xml:space="preserve">
          <source>Find city hall</source>
          <target state="translated">市役所を探す</target>
        </trans-unit>
        <trans-unit id="c2a6e9c15d888c380a37d1831fa7891adeb9bb51" translate="yes" xml:space="preserve">
          <source>Find contiguous unmasked data in a masked array along the given axis.</source>
          <target state="translated">指定された軸に沿ってマスクされた配列の中から連続するマスクされていないデータを見つけます。</target>
        </trans-unit>
        <trans-unit id="a4ea5a445ce3dee9c559f1f1b3b7f52dca61477d" translate="yes" xml:space="preserve">
          <source>Find elements in a sorted array.</source>
          <target state="translated">ソートされた配列の要素を検索します。</target>
        </trans-unit>
        <trans-unit id="48cd38efe59f33f3a5f798ed6a4cf4880d549aa4" translate="yes" xml:space="preserve">
          <source>Find elements in sorted array.</source>
          <target state="translated">ソートされた配列の要素を検索します。</target>
        </trans-unit>
        <trans-unit id="849cceaee0015c567cd2b639a437c51378f0d9cf" translate="yes" xml:space="preserve">
          <source>Find historic buildings</source>
          <target state="translated">歴史的建造物を探す</target>
        </trans-unit>
        <trans-unit id="f6a5d00a32b708a9fb964c2d1da18b0ebb9fba20" translate="yes" xml:space="preserve">
          <source>Find indices where elements of v should be inserted in a to maintain order.</source>
          <target state="translated">順番を維持するためにvの要素がaに挿入されるべきインデックスを見つけます。</target>
        </trans-unit>
        <trans-unit id="18d914d41d09d92c97e462c896bc6019f8705e89" translate="yes" xml:space="preserve">
          <source>Find indices where elements should be inserted to maintain order.</source>
          <target state="translated">順番を維持するために要素が挿入されるべきインデックスを見つけます。</target>
        </trans-unit>
        <trans-unit id="9f16fd78492b0e655d9646c090e0277fb4bab8b3" translate="yes" xml:space="preserve">
          <source>Find more information about &lt;a href=&quot;../reference/arrays.indexing#arrays-indexing&quot;&gt;newaxis here&lt;/a&gt; and &lt;code&gt;expand_dims&lt;/code&gt; at &lt;a href=&quot;../reference/generated/numpy.expand_dims#numpy.expand_dims&quot;&gt;&lt;code&gt;expand_dims&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../reference/arrays.indexing#arrays-indexing&quot;&gt;newaxisの&lt;/a&gt;詳細については、 &lt;code&gt;expand_dims&lt;/code&gt; で&lt;a href=&quot;../reference/generated/numpy.expand_dims#numpy.expand_dims&quot;&gt; &lt;code&gt;expand_dims&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="bffc9a9c895a2c22f043f2185910781b7e64c839" translate="yes" xml:space="preserve">
          <source>Find scenic lookouts</source>
          <target state="translated">風光明媚な展望台を探す</target>
        </trans-unit>
        <trans-unit id="4372485b0452a2bbbc2898c490d8eaeffc724caf" translate="yes" xml:space="preserve">
          <source>Find the coefficients of a polynomial with a given sequence of roots.</source>
          <target state="translated">与えられた根の列を持つ多項式の係数を求めよ。</target>
        </trans-unit>
        <trans-unit id="faa2e8dff7b7635f67ecf147d005df15f99ba737" translate="yes" xml:space="preserve">
          <source>Find the coefficients of a polynomial with the given sequence of roots.</source>
          <target state="translated">与えられた根の列を持つ多項式の係数を求めよ。</target>
        </trans-unit>
        <trans-unit id="026efa8f3fd4dbc6fed13cabe723d18d76b4e840" translate="yes" xml:space="preserve">
          <source>Find the court house</source>
          <target state="translated">コートハウスを探す</target>
        </trans-unit>
        <trans-unit id="4eb3d9e0549601789e7c859dc2344bd2a9cd19fd" translate="yes" xml:space="preserve">
          <source>Find the derivative of order &lt;code&gt;m&lt;/code&gt;.</source>
          <target state="translated">次数 &lt;code&gt;m&lt;/code&gt; の導関数を求めます。</target>
        </trans-unit>
        <trans-unit id="d4ef9328264dc057bcc77daf8eddd203dc0e44a3" translate="yes" xml:space="preserve">
          <source>Find the duplicates in a structured array along a given key</source>
          <target state="translated">指定されたキーに沿って構造化された配列の重複を見つける</target>
        </trans-unit>
        <trans-unit id="8b2e68d5137b01880925e686f099633be3e06dde" translate="yes" xml:space="preserve">
          <source>Find the indices into a sorted array &lt;code&gt;a&lt;/code&gt; such that, if the corresponding elements in &lt;code&gt;v&lt;/code&gt; were inserted before the indices, the order of &lt;code&gt;a&lt;/code&gt; would be preserved.</source>
          <target state="translated">ソートされた配列へのインデックス検索に対応する要素ならばそのようなことは &lt;code&gt;v&lt;/code&gt; は指数の前に挿入された、の順に保存されるであろうが。 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7a9d95dd2166bd57167eb2521a394d4c2313d8ed" translate="yes" xml:space="preserve">
          <source>Find the indices of array elements that are non-zero, grouped by element.</source>
          <target state="translated">要素ごとにグループ化された0以外の配列要素のインデックスを求めます。</target>
        </trans-unit>
        <trans-unit id="2515b150e246a2efffb14706325a36534baa7e52" translate="yes" xml:space="preserve">
          <source>Find the indices of the first and last unmasked values along an axis.</source>
          <target state="translated">軸に沿って、最初と最後のマスクされていない値のインデックスを見つけます。</target>
        </trans-unit>
        <trans-unit id="696f121ac590832370778adcb2254fdcf409cf46" translate="yes" xml:space="preserve">
          <source>Find the indices of the first and last unmasked values.</source>
          <target state="translated">マスクされていない最初と最後の値のインデックスを検索します。</target>
        </trans-unit>
        <trans-unit id="8c77cbf79b427711a4234d92c8cd55031f045a5a" translate="yes" xml:space="preserve">
          <source>Find the intersection of two arrays.</source>
          <target state="translated">2つの配列の交点を求めます.</target>
        </trans-unit>
        <trans-unit id="1d747b61a4dca9ab1a6c9357e1706a93f4e98f6e" translate="yes" xml:space="preserve">
          <source>Find the product of two polynomials.</source>
          <target state="translated">2つの多項式の積を求めよ。</target>
        </trans-unit>
        <trans-unit id="f141aa841d4a25a7614625f7b95555f03b44cb1f" translate="yes" xml:space="preserve">
          <source>Find the roots:</source>
          <target state="translated">根っこを探せ</target>
        </trans-unit>
        <trans-unit id="e641c4ed98de6b655c0148c1b174236bccd25db9" translate="yes" xml:space="preserve">
          <source>Find the set difference of two arrays.</source>
          <target state="translated">2つの配列の集合の差を求めます.</target>
        </trans-unit>
        <trans-unit id="1d47458289ee93eb8b76d9bd5fb051fb0ed38ef9" translate="yes" xml:space="preserve">
          <source>Find the set exclusive-or of two arrays.</source>
          <target state="translated">2つの配列の集合の排他的論理和を求めます。</target>
        </trans-unit>
        <trans-unit id="40c6faf7e08f7eff45fa7f2fb510420c1dd0653b" translate="yes" xml:space="preserve">
          <source>Find the sum of two polynomials.</source>
          <target state="translated">2つの多項式の和を求めよ。</target>
        </trans-unit>
        <trans-unit id="d221aaf14e3a3bbc1bc2f14e135dc72373d17a12" translate="yes" xml:space="preserve">
          <source>Find the town center</source>
          <target state="translated">タウンセンターを探す</target>
        </trans-unit>
        <trans-unit id="bc296de5854442d0290915421679a6d44da683c5" translate="yes" xml:space="preserve">
          <source>Find the union of two arrays.</source>
          <target state="translated">2つの配列の和を求めます.</target>
        </trans-unit>
        <trans-unit id="1c2a1d48695ed18506cd6bf1d2bc59c3cfb89875" translate="yes" xml:space="preserve">
          <source>Find the unique elements of an array.</source>
          <target state="translated">配列のユニークな要素を見つけます。</target>
        </trans-unit>
        <trans-unit id="3c5a640c918941c9e6a6ecbfe984c3f4bfbed0d7" translate="yes" xml:space="preserve">
          <source>Finding help</source>
          <target state="translated">ヘルプを探す</target>
        </trans-unit>
        <trans-unit id="5b7033e44afb091d2adc537dc898dc007a565a8f" translate="yes" xml:space="preserve">
          <source>Finding masked data</source>
          <target state="translated">マスクされたデータを探す</target>
        </trans-unit>
        <trans-unit id="3f98684f09d3dc8ddcf467b643533c39f6675211" translate="yes" xml:space="preserve">
          <source>Finds the data type of smallest size and kind to which &lt;em&gt;type1&lt;/em&gt; and &lt;em&gt;type2&lt;/em&gt; may be safely converted. This function is symmetric and associative. A string or unicode result will be the proper size for storing the max value of the input types converted to a string or unicode.</source>
          <target state="translated">&lt;em&gt;type1&lt;/em&gt;と&lt;em&gt;type2&lt;/em&gt;を安全に変換できる最小のサイズと種類のデータ型を見つけます。この関数は対称的で結合的です。文字列またはUnicodeの結果は、文字列またはUnicodeに変換された入力タイプの最大値を格納するための適切なサイズになります。</target>
        </trans-unit>
        <trans-unit id="ce819b28621d52328ceb9faf1bacb0b89098499a" translate="yes" xml:space="preserve">
          <source>Finds the polynomial resulting from the multiplication of the two input polynomials. Each input must be either a poly1d object or a 1D sequence of polynomial coefficients, from highest to lowest degree.</source>
          <target state="translated">2つの入力多項式の乗算の結果として得られる多項式を求めます.各入力は poly1d オブジェクトまたは多項式係数の1次元シーケンスのいずれかでなければなりません.</target>
        </trans-unit>
        <trans-unit id="1b46b96bf59323c910259f84d4d30f9baf994f09" translate="yes" xml:space="preserve">
          <source>Finish the Release Note</source>
          <target state="translated">リリースノートを完成させる</target>
        </trans-unit>
        <trans-unit id="7f34df28a801d8ac2bf79f8d990420b3ba51454a" translate="yes" xml:space="preserve">
          <source>First adjusts the date to fall on a valid day according to the &lt;code&gt;roll&lt;/code&gt; rule, then applies offsets to the given dates counted in valid days.</source>
          <target state="translated">最初に、 &lt;code&gt;roll&lt;/code&gt; ルールに従って日付が有効な日付になるように調整し、次に、有効な日数でカウントされた特定の日付にオフセットを適用します。</target>
        </trans-unit>
        <trans-unit id="3d783583ca6eea2b3fefbcfe238ea095a9cef1e3" translate="yes" xml:space="preserve">
          <source>First argument.</source>
          <target state="translated">第一引数。</target>
        </trans-unit>
        <trans-unit id="b0d88798d2f2c8c94dabdac74a6e61e0c6a796bf" translate="yes" xml:space="preserve">
          <source>First array</source>
          <target state="translated">最初の配列</target>
        </trans-unit>
        <trans-unit id="6ac9adbced8bb3d28582fadcfc79411667f91541" translate="yes" xml:space="preserve">
          <source>First array elements raised to powers from second array, element-wise.</source>
          <target state="translated">最初の配列要素は、要素ごとに2番目の配列から累乗されます。</target>
        </trans-unit>
        <trans-unit id="2e663054d84a3a5ee1c34a1c08db3c0840bbd3a5" translate="yes" xml:space="preserve">
          <source>First axis.</source>
          <target state="translated">第一軸。</target>
        </trans-unit>
        <trans-unit id="683b791e072100a372b3bb52b18b0195b72f135d" translate="yes" xml:space="preserve">
          <source>First data type.</source>
          <target state="translated">最初のデータ型。</target>
        </trans-unit>
        <trans-unit id="2f5593286aa09632868779a76ded4fea07d63a2f" translate="yes" xml:space="preserve">
          <source>First fork NumPy into your account, as from &lt;a href=&quot;gitwash/development_setup#forking&quot;&gt;Create a NumPy fork&lt;/a&gt;.</source>
          <target state="translated">最初に、&lt;a href=&quot;gitwash/development_setup#forking&quot;&gt;Create a NumPy forkのように、NumPyを&lt;/a&gt;アカウントにフォークします。</target>
        </trans-unit>
        <trans-unit id="380b7446c9b92904f875ef654f53dbe5211d262c" translate="yes" xml:space="preserve">
          <source>First fork NumPy into your account, as from &lt;a href=&quot;gitwash/development_setup#forking&quot;&gt;Making your own copy (fork) of NumPy&lt;/a&gt;.</source>
          <target state="translated">NumPyの&lt;a href=&quot;gitwash/development_setup#forking&quot;&gt;独自のコピー（フォーク）を作成する&lt;/a&gt;場合と同様に、最初にNumPyをアカウントにフォークします。</target>
        </trans-unit>
        <trans-unit id="c696689a14b681bedf220e6fcb537947492362e7" translate="yes" xml:space="preserve">
          <source>First input vector. Input is flattened if not already 1-dimensional.</source>
          <target state="translated">最初の入力ベクトル。入力は1次元でない場合は平坦化されます.</target>
        </trans-unit>
        <trans-unit id="4da5db5b8e385a1ee882571360fd0091e5988af4" translate="yes" xml:space="preserve">
          <source>First mode, &lt;code&gt;buffer&lt;/code&gt; is None:</source>
          <target state="translated">最初のモード、 &lt;code&gt;buffer&lt;/code&gt; はなし：</target>
        </trans-unit>
        <trans-unit id="79fb79c693534cb9180b2dc2b3dd92f6526ad678" translate="yes" xml:space="preserve">
          <source>First of all, if confused or uncertain, definitely look at the Examples - in its full generality, this function is less simple than it might seem from the following code description (below ndi = &lt;code&gt;numpy.lib.index_tricks&lt;/code&gt;):</source>
          <target state="translated">まず第一に、混乱または不確実な場合は、必ず例を確認してください。一般的に、この関数は、次のコードの説明（ndi = &lt;code&gt;numpy.lib.index_tricks&lt;/code&gt; の下）から見えるほど単純ではありません。</target>
        </trans-unit>
        <trans-unit id="9433246b482b8fe4fa411d4c3c0f41d069086c3e" translate="yes" xml:space="preserve">
          <source>First of all, we can plot the whole set of data we have and see what it looks like. In order to get a readable plot, we select only a few of the dates to show in our &lt;a href=&quot;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.xticks.html#matplotlib.pyplot.xticks&quot;&gt;&lt;code&gt;x-axis ticks&lt;/code&gt;&lt;/a&gt;. Note also that in our plot command, we use &lt;code&gt;nbcases.T&lt;/code&gt; (the transpose of the &lt;code&gt;nbcases&lt;/code&gt; array) since this means we will plot each row of the file as a separate line. We choose to plot a dashed line (using the &lt;code&gt;'--'&lt;/code&gt; line style). See the &lt;a href=&quot;https://matplotlib.org/&quot;&gt;matplotlib&lt;/a&gt; documentation for more info on this.</source>
          <target state="translated">まず、データのセット全体をプロットして、どのように見えるかを確認できます。読みやすいプロットを取得するために、&lt;a href=&quot;https://matplotlib.org/api/_as_gen/matplotlib.pyplot.xticks.html#matplotlib.pyplot.xticks&quot;&gt; &lt;code&gt;x-axis ticks&lt;/code&gt; &lt;/a&gt;に表示する日付をいくつか選択します。また、plotコマンドでは、 &lt;code&gt;nbcases.T&lt;/code&gt; （ &lt;code&gt;nbcases&lt;/code&gt; 配列の転置）を使用します。これは、ファイルの各行を個別の行としてプロットすることを意味するためです。破線をプロットすることを選択します（ &lt;code&gt;'--'&lt;/code&gt; 線スタイルを使用）。詳細については、&lt;a href=&quot;https://matplotlib.org/&quot;&gt;matplotlibの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="9507aadaef3c19b4ad781014173284bb4bf64a4d" translate="yes" xml:space="preserve">
          <source>First one-dimensional input array.</source>
          <target state="translated">最初の1次元入力配列。</target>
        </trans-unit>
        <trans-unit id="563237e589c4b3a10445b43e30dbcdf140e6cad9" translate="yes" xml:space="preserve">
          <source>First we need a polynomial class and a polynomial instance to play with. The classes can be imported directly from the polynomial package or from the module of the relevant type. Here we import from the package and use the conventional Polynomial class because of its familiarity:</source>
          <target state="translated">まず、多項式クラスと多項式インスタンスが必要です。クラスは、多項式パッケージから直接インポートすることも、関連する型のモジュールからインポートすることもできます。ここでは、パッケージからインポートし、親しみやすいので従来の多項式クラスを使用しています。</target>
        </trans-unit>
        <trans-unit id="b0f42fa2b5b73e0d242583740b22144cb029b3bc" translate="yes" xml:space="preserve">
          <source>First you follow the instructions for &lt;a href=&quot;#forking&quot;&gt;Making your own copy (fork) of NumPy&lt;/a&gt;.</source>
          <target state="translated">まず&lt;a href=&quot;#forking&quot;&gt;、NumPyの独自のコピー（フォーク）&lt;/a&gt;を作成するための手順に従います。</target>
        </trans-unit>
        <trans-unit id="a78e460dd4b928f74942152fb57a017ad1190035" translate="yes" xml:space="preserve">
          <source>First, change/check the following variables in &lt;code&gt;pavement.py&lt;/code&gt; depending on the release version:</source>
          <target state="translated">まず、リリースバージョンに応じて、 &lt;code&gt;pavement.py&lt;/code&gt; の次の変数を変更/確認します。</target>
        </trans-unit>
        <trans-unit id="5de2ca0c3525a19f6ce453df437f39312ae63f64" translate="yes" xml:space="preserve">
          <source>First, fetch new commits from the &lt;code&gt;upstream&lt;/code&gt; repository:</source>
          <target state="translated">まず、 &lt;code&gt;upstream&lt;/code&gt; リポジトリから新しいコミットをフェッチします。</target>
        </trans-unit>
        <trans-unit id="cb7560a3397ca22e9994a5b8700ca3649fe54f4e" translate="yes" xml:space="preserve">
          <source>First, let&amp;rsquo;s check for the shape of the data in our array. Since this image is two-dimensional (the pixels in the image form a rectangle), we might expect a two-dimensional array to represent it (a matrix). However, using the &lt;code&gt;shape&lt;/code&gt; property of this NumPy array gives us a different result:</source>
          <target state="translated">まず、配列内のデータの形状を確認しましょう。この画像は2次元であるため（画像内のピクセルは長方形を形成します）、2次元配列がそれを表すと予想される場合があります（行列）。ただし、このNumPy配列の &lt;code&gt;shape&lt;/code&gt; プロパティを使用すると、異なる結果が得られます。</target>
        </trans-unit>
        <trans-unit id="e842f4efdaf87bde11917dd06d4d96aa743693a2" translate="yes" xml:space="preserve">
          <source>First, merge or rebase on the target branch.</source>
          <target state="translated">まず、ターゲットブランチをマージまたはリベースします。</target>
        </trans-unit>
        <trans-unit id="3d50e07ef0974f6c61f9887836f0cd195c4b8ffe" translate="yes" xml:space="preserve">
          <source>First, we create a signature file from &lt;code&gt;fib1.f&lt;/code&gt; by running</source>
          <target state="translated">まず、我々はから署名ファイル作成 &lt;code&gt;fib1.f&lt;/code&gt; を実行することにより、</target>
        </trans-unit>
        <trans-unit id="0b5747b08f0749ca8d3f849c4ccb46feb2a535fd" translate="yes" xml:space="preserve">
          <source>First, we solve for</source>
          <target state="translated">まず、次のような問題を解決します。</target>
        </trans-unit>
        <trans-unit id="e249ead6928b839ca62de533f2a7083c8c2ba345" translate="yes" xml:space="preserve">
          <source>First, we&amp;rsquo;ll identify the indices of locations in mainland China:</source>
          <target state="translated">まず、中国本土の場所のインデックスを特定します。</target>
        </trans-unit>
        <trans-unit id="2db03d669f6d38f72ba0afd2d06c9fa6852bb990" translate="yes" xml:space="preserve">
          <source>First, you need to make the branch you will work on. This needs to be based on the older version of NumPy (not master):</source>
          <target state="translated">まず、作業するブランチを作る必要があります。これは古いバージョンの NumPy をベースにする必要があります (master ではありません)。</target>
        </trans-unit>
        <trans-unit id="2b876747d103212266850792bf08c2d985fdb7ec" translate="yes" xml:space="preserve">
          <source>Fisher, R.A,, A.S. Corbet, and C.B. Williams. 1943. The relation between the number of species and the number of individuals in a random sample of an animal population. Journal of Animal Ecology, 12:42-58.</source>
          <target state="translated">Fisher,R.A.,A.S.Corbet,and C.B.Williams.1943.動物集団の無作為標本における種の数と個体数の関係。動物生態学雑誌、12:42-58。</target>
        </trans-unit>
        <trans-unit id="1c009756385026adf817423fdf3347327b7bcadd" translate="yes" xml:space="preserve">
          <source>Fit a line, &lt;code&gt;y = mx + c&lt;/code&gt;, through some noisy data-points:</source>
          <target state="translated">いくつかのノイズの多いデータポイントを介して直線 &lt;code&gt;y = mx + c&lt;/code&gt; を近似します。</target>
        </trans-unit>
        <trans-unit id="04b6a58e5360946679575e2105b73e661e63702d" translate="yes" xml:space="preserve">
          <source>Fit a polynomial &lt;code&gt;p(x) = p[0] * x**deg + ... + p[deg]&lt;/code&gt; of degree &lt;code&gt;deg&lt;/code&gt; to points &lt;code&gt;(x, y)&lt;/code&gt;. Returns a vector of coefficients &lt;code&gt;p&lt;/code&gt; that minimises the squared error in the order &lt;code&gt;deg&lt;/code&gt;, &lt;code&gt;deg-1&lt;/code&gt;, &amp;hellip; &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">多項式 &lt;code&gt;p(x) = p[0] * x**deg + ... + p[deg]&lt;/code&gt; 度 &lt;code&gt;deg&lt;/code&gt; をポイント &lt;code&gt;(x, y)&lt;/code&gt; 近似します。二乗誤差を最小化する係数 &lt;code&gt;p&lt;/code&gt; のベクトルを &lt;code&gt;deg&lt;/code&gt; 、 &lt;code&gt;deg-1&lt;/code&gt; 、&amp;hellip; &lt;code&gt;0&lt;/code&gt; の順序で返します。</target>
        </trans-unit>
        <trans-unit id="c63bb8e80d7458f568a44355aa0204375070cb16" translate="yes" xml:space="preserve">
          <source>Fits using Chebyshev series are usually better conditioned than fits using power series, but much can depend on the distribution of the sample points and the smoothness of the data. If the quality of the fit is inadequate splines may be a good alternative.</source>
          <target state="translated">チェビシェフ級数を用いた適合は、通常、力価級数を用いた適合よりも条件付きがよいが、多くは標本点の分布やデータの平滑性に依存する。フィットの質が不十分な場合は,スプラインがよい代替手段になるかもしれません.</target>
        </trans-unit>
        <trans-unit id="aed614e2e664ebb51dcf5d13afb77c7acb23c65a" translate="yes" xml:space="preserve">
          <source>Fits using Hermite series are probably most useful when the data can be approximated by &lt;code&gt;sqrt(w(x)) * p(x)&lt;/code&gt;, where &lt;code&gt;w(x)&lt;/code&gt; is the Hermite weight. In that case the weight &lt;code&gt;sqrt(w(x[i]))&lt;/code&gt; should be used together with data values &lt;code&gt;y[i]/sqrt(w(x[i]))&lt;/code&gt;. The weight function is available as &lt;a href=&quot;numpy.polynomial.hermite.hermweight#numpy.polynomial.hermite.hermweight&quot;&gt;&lt;code&gt;hermweight&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エルミート級数を使用した近似は、データを &lt;code&gt;sqrt(w(x)) * p(x)&lt;/code&gt; で近似できる場合におそらく最も役立ちます。ここで、 &lt;code&gt;w(x)&lt;/code&gt; はエルミートの重みです。その場合、重み &lt;code&gt;sqrt(w(x[i]))&lt;/code&gt; をデータ値 &lt;code&gt;y[i]/sqrt(w(x[i]))&lt;/code&gt; と一緒に使用する必要があります。重み関数は&lt;a href=&quot;numpy.polynomial.hermite.hermweight#numpy.polynomial.hermite.hermweight&quot;&gt; &lt;code&gt;hermweight&lt;/code&gt; &lt;/a&gt;として使用できます。</target>
        </trans-unit>
        <trans-unit id="7ac350719f356e32b4a5aa08bc22f253d0d0c702" translate="yes" xml:space="preserve">
          <source>Fits using Hermite series are probably most useful when the data can be approximated by &lt;code&gt;sqrt(w(x)) * p(x)&lt;/code&gt;, where &lt;code&gt;w(x)&lt;/code&gt; is the Hermite weight. In that case the weight &lt;code&gt;sqrt(w(x[i])&lt;/code&gt; should be used together with data values &lt;code&gt;y[i]/sqrt(w(x[i])&lt;/code&gt;. The weight function is available as &lt;a href=&quot;numpy.polynomial.hermite.hermweight#numpy.polynomial.hermite.hermweight&quot;&gt;&lt;code&gt;hermweight&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Hermiteシリーズを使用した近似は、データが &lt;code&gt;sqrt(w(x)) * p(x)&lt;/code&gt; で近似できる場合におそらく最も役立ちます。ここで、 &lt;code&gt;w(x)&lt;/code&gt; はHermiteの重みです。その場合、重み &lt;code&gt;sqrt(w(x[i])&lt;/code&gt; をデータ値 &lt;code&gt;y[i]/sqrt(w(x[i])&lt;/code&gt; と一緒に使用する必要があります。重み関数は&lt;a href=&quot;numpy.polynomial.hermite.hermweight#numpy.polynomial.hermite.hermweight&quot;&gt; &lt;code&gt;hermweight&lt;/code&gt; &lt;/a&gt;として使用できます。</target>
        </trans-unit>
        <trans-unit id="2a56ae26ef02f4f89e7f11d94ca2c9c2304108b1" translate="yes" xml:space="preserve">
          <source>Fits using HermiteE series are probably most useful when the data can be approximated by &lt;code&gt;sqrt(w(x)) * p(x)&lt;/code&gt;, where &lt;code&gt;w(x)&lt;/code&gt; is the HermiteE weight. In that case the weight &lt;code&gt;sqrt(w(x[i]))&lt;/code&gt; should be used together with data values &lt;code&gt;y[i]/sqrt(w(x[i]))&lt;/code&gt;. The weight function is available as &lt;a href=&quot;numpy.polynomial.hermite_e.hermeweight#numpy.polynomial.hermite_e.hermeweight&quot;&gt;&lt;code&gt;hermeweight&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">HermiteEシリーズを使用した近似は、データを &lt;code&gt;sqrt(w(x)) * p(x)&lt;/code&gt; で近似できる場合におそらく最も役立ちます。ここで、 &lt;code&gt;w(x)&lt;/code&gt; はHermiteEの重みです。その場合、重み &lt;code&gt;sqrt(w(x[i]))&lt;/code&gt; をデータ値 &lt;code&gt;y[i]/sqrt(w(x[i]))&lt;/code&gt; と一緒に使用する必要があります。重み関数は&lt;a href=&quot;numpy.polynomial.hermite_e.hermeweight#numpy.polynomial.hermite_e.hermeweight&quot;&gt; &lt;code&gt;hermeweight&lt;/code&gt; &lt;/a&gt;として使用できます。</target>
        </trans-unit>
        <trans-unit id="676d43f6371871e1abab21b58a8b9ef9e5c444e9" translate="yes" xml:space="preserve">
          <source>Fits using HermiteE series are probably most useful when the data can be approximated by &lt;code&gt;sqrt(w(x)) * p(x)&lt;/code&gt;, where &lt;code&gt;w(x)&lt;/code&gt; is the HermiteE weight. In that case the weight &lt;code&gt;sqrt(w(x[i])&lt;/code&gt; should be used together with data values &lt;code&gt;y[i]/sqrt(w(x[i])&lt;/code&gt;. The weight function is available as &lt;a href=&quot;numpy.polynomial.hermite_e.hermeweight#numpy.polynomial.hermite_e.hermeweight&quot;&gt;&lt;code&gt;hermeweight&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">HermiteEシリーズを使用した近似は、データが &lt;code&gt;sqrt(w(x)) * p(x)&lt;/code&gt; で近似できる場合におそらく最も役立ちます。ここで、 &lt;code&gt;w(x)&lt;/code&gt; はHermiteEの重みです。その場合、重み &lt;code&gt;sqrt(w(x[i])&lt;/code&gt; をデータ値 &lt;code&gt;y[i]/sqrt(w(x[i])&lt;/code&gt; と一緒に使用する必要があります。重み関数は&lt;a href=&quot;numpy.polynomial.hermite_e.hermeweight#numpy.polynomial.hermite_e.hermeweight&quot;&gt; &lt;code&gt;hermeweight&lt;/code&gt; &lt;/a&gt;として使用できます。</target>
        </trans-unit>
        <trans-unit id="ce120ffeca412ba96243f730c358ebc5c1bfbf99" translate="yes" xml:space="preserve">
          <source>Fits using Laguerre series are probably most useful when the data can be approximated by &lt;code&gt;sqrt(w(x)) * p(x)&lt;/code&gt;, where &lt;code&gt;w(x)&lt;/code&gt; is the Laguerre weight. In that case the weight &lt;code&gt;sqrt(w(x[i]))&lt;/code&gt; should be used together with data values &lt;code&gt;y[i]/sqrt(w(x[i]))&lt;/code&gt;. The weight function is available as &lt;a href=&quot;numpy.polynomial.laguerre.lagweight#numpy.polynomial.laguerre.lagweight&quot;&gt;&lt;code&gt;lagweight&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ラゲール系列を使用した近似は、データを &lt;code&gt;sqrt(w(x)) * p(x)&lt;/code&gt; で近似できる場合におそらく最も役立ちます。ここで、 &lt;code&gt;w(x)&lt;/code&gt; はラゲールの重みです。その場合、重み &lt;code&gt;sqrt(w(x[i]))&lt;/code&gt; をデータ値 &lt;code&gt;y[i]/sqrt(w(x[i]))&lt;/code&gt; と一緒に使用する必要があります。重み関数は&lt;a href=&quot;numpy.polynomial.laguerre.lagweight#numpy.polynomial.laguerre.lagweight&quot;&gt; &lt;code&gt;lagweight&lt;/code&gt; &lt;/a&gt;として使用できます。</target>
        </trans-unit>
        <trans-unit id="a6ad2d45b7ba84d02856af83a31db48500b6c521" translate="yes" xml:space="preserve">
          <source>Fits using Laguerre series are probably most useful when the data can be approximated by &lt;code&gt;sqrt(w(x)) * p(x)&lt;/code&gt;, where &lt;code&gt;w(x)&lt;/code&gt; is the Laguerre weight. In that case the weight &lt;code&gt;sqrt(w(x[i])&lt;/code&gt; should be used together with data values &lt;code&gt;y[i]/sqrt(w(x[i])&lt;/code&gt;. The weight function is available as &lt;a href=&quot;numpy.polynomial.laguerre.lagweight#numpy.polynomial.laguerre.lagweight&quot;&gt;&lt;code&gt;lagweight&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ラゲール級数を使用した近似は、データが &lt;code&gt;sqrt(w(x)) * p(x)&lt;/code&gt; で近似できる場合におそらく最も役立ちます。ここで、 &lt;code&gt;w(x)&lt;/code&gt; はラゲールの重みです。その場合、重み &lt;code&gt;sqrt(w(x[i])&lt;/code&gt; をデータ値 &lt;code&gt;y[i]/sqrt(w(x[i])&lt;/code&gt; と一緒に使用する必要があります。重み関数は&lt;a href=&quot;numpy.polynomial.laguerre.lagweight#numpy.polynomial.laguerre.lagweight&quot;&gt; &lt;code&gt;lagweight&lt;/code&gt; &lt;/a&gt;として使用できます。</target>
        </trans-unit>
        <trans-unit id="a49cebd2c0a64b6ed696a25d8e9c66d10c8d54a0" translate="yes" xml:space="preserve">
          <source>Fits using Legendre series are usually better conditioned than fits using power series, but much can depend on the distribution of the sample points and the smoothness of the data. If the quality of the fit is inadequate splines may be a good alternative.</source>
          <target state="translated">レジェンドレ級数を用いた適合は、通常、パワー級数を用いた適合よりも条件の良いものですが、多くは標本点の分布やデータの平滑性に依存します。フィットの質が不十分な場合は,スプラインがよい代替手段になるかもしれません.</target>
        </trans-unit>
        <trans-unit id="5165daf49b08b1322899a60f534d050a344807b1" translate="yes" xml:space="preserve">
          <source>Fitting</source>
          <target state="translated">Fitting</target>
        </trans-unit>
        <trans-unit id="64c14ba9774170afd08838cb0f853f190269a6cb" translate="yes" xml:space="preserve">
          <source>Fitting Data</source>
          <target state="translated">フィッティングデータ</target>
        </trans-unit>
        <trans-unit id="5e51f96db68dc8fabd62d003884216322595fc6f" translate="yes" xml:space="preserve">
          <source>Fitting is the reason that the &lt;code&gt;domain&lt;/code&gt; and &lt;code&gt;window&lt;/code&gt; attributes are part of the convenience classes. To illustrate the problem, the values of the Chebyshev polynomials up to degree 5 are plotted below.</source>
          <target state="translated">フィッティングは、 &lt;code&gt;domain&lt;/code&gt; と &lt;code&gt;window&lt;/code&gt; 属性がコンビニエンスクラスの一部である理由です。問題を説明するために、5次までのチェビシェフ多項式の値を以下にプロットします。</target>
        </trans-unit>
        <trans-unit id="a882b40f9b004c60f42b6ed77cd0d0cb856640fe" translate="yes" xml:space="preserve">
          <source>Fix for PPC long double floating point information</source>
          <target state="translated">PPCの長い二重浮動小数点情報の修正</target>
        </trans-unit>
        <trans-unit id="919c4e1e9eb76e3cc1d2c2a8e361176acc1a9a4a" translate="yes" xml:space="preserve">
          <source>Fix regression in matmul (&lt;code&gt;@&lt;/code&gt; operator) for boolean types</source>
          <target state="translated">ブール型のmatmul（ &lt;code&gt;@&lt;/code&gt; 演算子）の回帰を修正</target>
        </trans-unit>
        <trans-unit id="0f0d59fd522286a2d4031174470931df04c244c1" translate="yes" xml:space="preserve">
          <source>Fix swig bug in &lt;code&gt;numpy.i&lt;/code&gt;</source>
          <target state="translated">numpy.iの小枝のバグを &lt;code&gt;numpy.i&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f95e31f1005ee116c93848080ddafc6a63474e8a" translate="yes" xml:space="preserve">
          <source>Fix to financial.npv</source>
          <target state="translated">financial.npvに固定</target>
        </trans-unit>
        <trans-unit id="fe4ad4288a37cfec787d6b9ab856b537a200ab81" translate="yes" xml:space="preserve">
          <source>Fixed &lt;code&gt;eigh&lt;/code&gt; and &lt;code&gt;cholesky&lt;/code&gt; methods in &lt;code&gt;numpy.random.multivariate_normal&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;cholesky&lt;/code&gt; &lt;code&gt;eigh&lt;/code&gt; メソッドとcholeskyメソッドを修正し &lt;code&gt;numpy.random.multivariate_normal&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4fa2ab2730080c4d8658ad57247e52d05152019e" translate="yes" xml:space="preserve">
          <source>Fixed stride displacement from the beginning of an axis? Default is 0. Needs to be &amp;gt;=0.</source>
          <target state="translated">軸の最初からのストライド変位を修正しましたか？デフォルトは0です。0以上にする必要があります。</target>
        </trans-unit>
        <trans-unit id="cb2453cbdd88f7c5dbf744844c92b0eb5d9399b7" translate="yes" xml:space="preserve">
          <source>Fixed the jumping implementation in &lt;code&gt;MT19937.jumped&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;MT19937.jumped&lt;/code&gt; のジャンプの実装を修正しました</target>
        </trans-unit>
        <trans-unit id="8028cdac733fedf53d18c62ba8dde19dd4874832" translate="yes" xml:space="preserve">
          <source>Fixes Merged</source>
          <target state="translated">フィックス マージド</target>
        </trans-unit>
        <trans-unit id="988fef1858095167d23aba7f3c43fc27915118e8" translate="yes" xml:space="preserve">
          <source>Fixing Warnings</source>
          <target state="translated">警告の修正</target>
        </trans-unit>
        <trans-unit id="35076585aaced59b92c591cb61ebdef18acdfe9a" translate="yes" xml:space="preserve">
          <source>Flag checking</source>
          <target state="translated">フラグチェック</target>
        </trans-unit>
        <trans-unit id="a59933a6089d6095752a4cce71d3ac903e7e62ac" translate="yes" xml:space="preserve">
          <source>Flag indicating the return a legacy tuple state when the BitGenerator is MT19937.</source>
          <target state="translated">BitGeneratorがMT19937の場合、レガシータプル状態を返すことを示すフラグ。</target>
        </trans-unit>
        <trans-unit id="ed451b4de2e9f4e89792baf70b0beefe2ddce512" translate="yes" xml:space="preserve">
          <source>Flag indicating to return a legacy tuple state when the BitGenerator is MT19937, instead of a dict.</source>
          <target state="translated">BitGeneratorがMT19937の場合、dictではなくレガシータプル状態を返すことを示すフラグ。</target>
        </trans-unit>
        <trans-unit id="9eae779d408b29132a4d17f05274c96311b19164" translate="yes" xml:space="preserve">
          <source>Flag indicating whether a tuple &lt;code&gt;(result, sum of weights)&lt;/code&gt; should be returned as output (True), or just the result (False). Default is False.</source>
          <target state="translated">タプル &lt;code&gt;(result, sum of weights)&lt;/code&gt; を出力（True）として返すか、結果（False）のみとして返すかを示すフラグ。デフォルトはFalseです。</target>
        </trans-unit>
        <trans-unit id="cba3c052d7e9a9fd1a29828876ef83802ed53ad9" translate="yes" xml:space="preserve">
          <source>Flag to determine whether to mark test as deprecated or not. If the condition is a callable, it is used at runtime to dynamically make the decision. Default is True.</source>
          <target state="translated">テストを非推奨とマークするかどうかを決定するフラグ。条件が呼び出し可能なものであれば、実行時に動的に判断するために使用されます。デフォルトはTrueです。</target>
        </trans-unit>
        <trans-unit id="fc63716a41208b1dbc0ebbf61137c2d0ff0fbfd4" translate="yes" xml:space="preserve">
          <source>Flag to determine whether to mark the decorated test as a known failure (if True) or not (if False).</source>
          <target state="translated">デコレーションされたテストを既知の失敗としてマークするか(Trueの場合)、しないか(Falseの場合)を決定するフラグ。</target>
        </trans-unit>
        <trans-unit id="3a36aef11ecfbbf2d82d57b5084b3ab96e773b04" translate="yes" xml:space="preserve">
          <source>Flag to determine whether to skip the decorated test.</source>
          <target state="translated">デコレーションテストをスキップするかどうかを決定するフラグ。</target>
        </trans-unit>
        <trans-unit id="75e57359674e825c88bcaaa1bf354a5ba42abc10" translate="yes" xml:space="preserve">
          <source>Flag-like constants</source>
          <target state="translated">旗のような定数</target>
        </trans-unit>
        <trans-unit id="684f757afc22b26a0ad180a11e58599da12d805b" translate="yes" xml:space="preserve">
          <source>Flags indicating how the memory pointed to by data is to be interpreted. Possible flags are &lt;a href=&quot;c-api.array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;c-api.array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;c-api.array#c.NPY_ARRAY_OWNDATA&quot;&gt;&lt;code&gt;NPY_ARRAY_OWNDATA&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;c-api.array#c.NPY_ARRAY_ALIGNED&quot;&gt;&lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEABLE&quot;&gt;&lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEBACKIFCOPY&quot;&gt;&lt;code&gt;NPY_ARRAY_WRITEBACKIFCOPY&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;c-api.array#c.NPY_ARRAY_UPDATEIFCOPY&quot;&gt;&lt;code&gt;NPY_ARRAY_UPDATEIFCOPY&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">データが指すメモリがどのように解釈されるかを示すフラグ。可能なフラグは、&lt;a href=&quot;c-api.array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;c-api.array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;c-api.array#c.NPY_ARRAY_OWNDATA&quot;&gt; &lt;code&gt;NPY_ARRAY_OWNDATA&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;c-api.array#c.NPY_ARRAY_ALIGNED&quot;&gt; &lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEABLE&quot;&gt; &lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEBACKIFCOPY&quot;&gt; &lt;code&gt;NPY_ARRAY_WRITEBACKIFCOPY&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;c-api.array#c.NPY_ARRAY_UPDATEIFCOPY&quot;&gt; &lt;code&gt;NPY_ARRAY_UPDATEIFCOPY&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="a25e18657a4cd94e4091eda9ea0dfb9fbc2878ec" translate="yes" xml:space="preserve">
          <source>Flags that may be passed in &lt;code&gt;flags&lt;/code&gt; are any combination of the global and per-operand flags documented in &lt;a href=&quot;#c.NpyIter_MultiNew&quot;&gt;&lt;code&gt;NpyIter_MultiNew&lt;/code&gt;&lt;/a&gt;, except for &lt;a href=&quot;#c.NPY_ITER_ALLOCATE&quot;&gt;&lt;code&gt;NPY_ITER_ALLOCATE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">渡されるフラグ &lt;code&gt;flags&lt;/code&gt; で文書化グローバルごとのオペランドのフラグの任意の組み合わせである&lt;a href=&quot;#c.NpyIter_MultiNew&quot;&gt; &lt;code&gt;NpyIter_MultiNew&lt;/code&gt; &lt;/a&gt;を除き、&lt;a href=&quot;#c.NPY_ITER_ALLOCATE&quot;&gt; &lt;code&gt;NPY_ITER_ALLOCATE&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="edc811e4e9d890d1a74c59122b943f93451db31b" translate="yes" xml:space="preserve">
          <source>Flags that may be passed in &lt;code&gt;flags&lt;/code&gt;, applying to the whole iterator, are:</source>
          <target state="translated">反復子全体に適用される、 &lt;code&gt;flags&lt;/code&gt; で渡されるフラグは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e576896ed3787e8ae91c02c3fee7275b55ae4f5d" translate="yes" xml:space="preserve">
          <source>Flags that may be passed in &lt;code&gt;op_flags[i]&lt;/code&gt;, where &lt;code&gt;0 &amp;lt;= i &amp;lt; nop&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;op_flags[i]&lt;/code&gt; で渡されるフラグ。ここで、 &lt;code&gt;0 &amp;lt;= i &amp;lt; nop&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0902dde9b75159ba7b0f6af69bd12aa3aed3ab46" translate="yes" xml:space="preserve">
          <source>Flags to control the behavior of the iterator.</source>
          <target state="translated">イテレータの動作を制御するフラグ。</target>
        </trans-unit>
        <trans-unit id="1bbaad527fcacc3d77ae0f546c2f20b2e4ef2d71" translate="yes" xml:space="preserve">
          <source>Flat Iterator indexing</source>
          <target state="translated">フラットイテレータインデックス化</target>
        </trans-unit>
        <trans-unit id="ca0541280577eeacfb45501ad1950007e690905f" translate="yes" xml:space="preserve">
          <source>Flat array iterator.</source>
          <target state="translated">平らな配列のイテレータ。</target>
        </trans-unit>
        <trans-unit id="3f8292fdeb383ecef90303832ffb1117799af185" translate="yes" xml:space="preserve">
          <source>Flat iteration</source>
          <target state="translated">フラットイテレーション</target>
        </trans-unit>
        <trans-unit id="666002e8705384831180e281fa74a843e3206b27" translate="yes" xml:space="preserve">
          <source>Flat iterator object to iterate over arrays.</source>
          <target state="translated">配列を反復処理するフラットイテレータオブジェクト。</target>
        </trans-unit>
        <trans-unit id="7d04e81220d975aa709532a3862f6c1a6f4a3f05" translate="yes" xml:space="preserve">
          <source>Flatten a structured data-type description.</source>
          <target state="translated">構造化されたデータ型の記述を平坦化します。</target>
        </trans-unit>
        <trans-unit id="ec4ad130c0f4e03f5e84c5e86d9264a95dc6c3f6" translate="yes" xml:space="preserve">
          <source>Flattened version of this function.</source>
          <target state="translated">この関数のフラット化バージョン。</target>
        </trans-unit>
        <trans-unit id="7b96969ab0c9b27da6b409485f5b0236b7c2a6ed" translate="yes" xml:space="preserve">
          <source>Flattening collapses a multimdimensional array to a single dimension; details of how this is done (for instance, whether &lt;code&gt;a[n+1]&lt;/code&gt; should be the next row or next column) are parameters.</source>
          <target state="translated">平坦化により、多次元配列が1次元に折りたたまれます。これがどのように行われるかの詳細（たとえば、 &lt;code&gt;a[n+1]&lt;/code&gt; を次の行にするか次の列にするか）はパラメーターです。</target>
        </trans-unit>
        <trans-unit id="21fe615f2b66ecf8096308ee67f646d6664a1077" translate="yes" xml:space="preserve">
          <source>Flip an array horizontally (axis=1).</source>
          <target state="translated">配列を水平方向に反転させます(軸=1)。</target>
        </trans-unit>
        <trans-unit id="7849c3ad46cd56097aefd350ce5a24872c1a9619" translate="yes" xml:space="preserve">
          <source>Flip an array horizontally.</source>
          <target state="translated">配列を水平に反転させます。</target>
        </trans-unit>
        <trans-unit id="a25cec9261711d7c64f4f0328d27630ff4251008" translate="yes" xml:space="preserve">
          <source>Flip an array vertically (axis=0).</source>
          <target state="translated">配列を縦方向に反転させます(軸は0)。</target>
        </trans-unit>
        <trans-unit id="58f1196dc69384b1c0ff7122abf54115c6fe24e6" translate="yes" xml:space="preserve">
          <source>Flip an array vertically.</source>
          <target state="translated">配列を垂直に反転させます。</target>
        </trans-unit>
        <trans-unit id="054ba7b0cd3f0b3aa1e4b17f975a52c4e03f8b87" translate="yes" xml:space="preserve">
          <source>Flip array in the left/right direction.</source>
          <target state="translated">配列を左右方向に反転させます。</target>
        </trans-unit>
        <trans-unit id="a71aa214a7a981c7e5292f4c8603043e9a55d042" translate="yes" xml:space="preserve">
          <source>Flip array in the up/down direction.</source>
          <target state="translated">配列を上下方向に反転させます。</target>
        </trans-unit>
        <trans-unit id="d6b601389a5cfb7f115ef7332083ae3431e4e4e3" translate="yes" xml:space="preserve">
          <source>Flip the entries in each column in the up/down direction. Rows are preserved, but appear in a different order than before.</source>
          <target state="translated">各列のエントリを上下方向に反転させます。行は保存されますが、以前とは異なる順序で表示されます。</target>
        </trans-unit>
        <trans-unit id="f14bb6de935d5a8cea7f1dc6e4323a38f4e11462" translate="yes" xml:space="preserve">
          <source>Flip the entries in each row in the left/right direction. Columns are preserved, but appear in a different order than before.</source>
          <target state="translated">各行のエントリを左右方向に反転させます。列は保存されますが、以前とは異なる順序で表示されます。</target>
        </trans-unit>
        <trans-unit id="a806413f7b898c72fd5e92970c2a0a0a31830c28" translate="yes" xml:space="preserve">
          <source>Float printing now uses &amp;ldquo;dragon4&amp;rdquo; algorithm for shortest decimal representation</source>
          <target state="translated">フロート印刷で、最短の小数表現に「dragon4」アルゴリズムが使用されるようになりました</target>
        </trans-unit>
        <trans-unit id="3a7d4f9efa22847d513f86cb336f4d917bb3ff00" translate="yes" xml:space="preserve">
          <source>Float type code to coerce input array &lt;code&gt;a&lt;/code&gt;. If &lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt; is one of the &amp;lsquo;int&amp;rsquo; dtypes, it is replaced with float64.</source>
          <target state="translated">入力配列 &lt;code&gt;a&lt;/code&gt; を強制するフロート型コード。&lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt;が「int」dtypeの1つである場合、それはfloat64に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="01625a6e71519a2c19afcda12e2e9da94df799dc" translate="yes" xml:space="preserve">
          <source>Floating functions</source>
          <target state="translated">浮動関数</target>
        </trans-unit>
        <trans-unit id="0c47a1b436ef0cc135c28b0dd8fa381311e23c7a" translate="yes" xml:space="preserve">
          <source>Floating point</source>
          <target state="translated">浮動小数点</target>
        </trans-unit>
        <trans-unit id="1229245ed91cf5c1f6662011b64e640e64679fd2" translate="yes" xml:space="preserve">
          <source>Floating point classification</source>
          <target state="translated">浮動小数点分類</target>
        </trans-unit>
        <trans-unit id="82951541de1b33acb443a62a7f1b908de9e19ba0" translate="yes" xml:space="preserve">
          <source>Floating point error handling</source>
          <target state="translated">浮動小数点エラー処理</target>
        </trans-unit>
        <trans-unit id="dbe05d916add7aed11140c3ac753c505841f4681" translate="yes" xml:space="preserve">
          <source>Floating point number &lt;code&gt;beta**minexp&lt;/code&gt; (the smallest [in magnitude] usable floating value).</source>
          <target state="translated">浮動小数点数 &lt;code&gt;beta**minexp&lt;/code&gt; （使用可能な最小の[大きさ]浮動小数点値）。</target>
        </trans-unit>
        <trans-unit id="1fd86bfd9f81a559ed8b4c9674c5d1f9e823b143" translate="yes" xml:space="preserve">
          <source>Floating point precision can be set:</source>
          <target state="translated">浮動小数点精度を設定できます。</target>
        </trans-unit>
        <trans-unit id="481d82b2ccb68e7d8e1fe5eda973bb77f53833f0" translate="yes" xml:space="preserve">
          <source>Floating point precision. Defaults to &lt;code&gt;numpy.get_printoptions()['precision']&lt;/code&gt;.</source>
          <target state="translated">浮動小数点の精度。デフォルトは &lt;code&gt;numpy.get_printoptions()['precision']&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6770ad9e8703a79e53fa3beb7d8e8f53215f921c" translate="yes" xml:space="preserve">
          <source>Floating point routines</source>
          <target state="translated">浮動小数点ルーチン</target>
        </trans-unit>
        <trans-unit id="a8d35036268d7e5fa8b38b4abd4d049aeafa51d6" translate="yes" xml:space="preserve">
          <source>Floating point scalars implement &lt;code&gt;as_integer_ratio&lt;/code&gt; to match the builtin float</source>
          <target state="translated">浮動小数点スカラーは、組み込みのfloatと一致するように &lt;code&gt;as_integer_ratio&lt;/code&gt; を実装します</target>
        </trans-unit>
        <trans-unit id="bbb20a81d8b5780d9de2483bc5cafd120d0cd965" translate="yes" xml:space="preserve">
          <source>Floating point values are not demoted to integers, and complex values are not demoted to floats.</source>
          <target state="translated">浮動小数点値は整数には移行せず、複素数値はfloatには移行しません。</target>
        </trans-unit>
        <trans-unit id="2a6aa48e3a6c80756547c7551fe79b07bb4f3a1c" translate="yes" xml:space="preserve">
          <source>Floating values between -1 and 1. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="translated">-1と1の間の浮動小数点値 &lt;code&gt;x&lt;/code&gt; がスカラーの場合、これはスカラーです。</target>
        </trans-unit>
        <trans-unit id="e6f0281f3f5728d7cb1a3465fbf569e0196bf3cd" translate="yes" xml:space="preserve">
          <source>Floating-point number &lt;code&gt;beta**machep&lt;/code&gt; (floating point precision)</source>
          <target state="translated">浮動小数点数 &lt;code&gt;beta**machep&lt;/code&gt; （浮動小数点精度）</target>
        </trans-unit>
        <trans-unit id="8c170a74ff7bf0743ef67475a7fd14e3feeea278" translate="yes" xml:space="preserve">
          <source>Floating-point number &lt;code&gt;beta**minexp&lt;/code&gt; (the smallest [in magnitude] positive floating point number with full precision).</source>
          <target state="translated">浮動小数点数 &lt;code&gt;beta**minexp&lt;/code&gt; （完全な精度で最小の[大きさの]正の浮動小数点数）。</target>
        </trans-unit>
        <trans-unit id="f8899b4f72c4b482d21d27616c70625d6596dd90" translate="yes" xml:space="preserve">
          <source>Floating-point number &lt;code&gt;beta**negep&lt;/code&gt;.</source>
          <target state="translated">浮動小数点数 &lt;code&gt;beta**negep&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2eae9dc4dc291f4562016bea57ea67a7a3b1f88f" translate="yes" xml:space="preserve">
          <source>Floating-point numbers:</source>
          <target state="translated">浮動小数点数。</target>
        </trans-unit>
        <trans-unit id="2a9bb411b345b451f4de56294a2e04b8bb44acd7" translate="yes" xml:space="preserve">
          <source>Floating-point types</source>
          <target state="translated">浮動小数点タイプ</target>
        </trans-unit>
        <trans-unit id="55734ad7ec5ec7776c0a844d3df4e815b482074b" translate="yes" xml:space="preserve">
          <source>Floats uniformly distributed over &lt;code&gt;[0, 1)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[0, 1)&lt;/code&gt; 上に均一に分散されたフロート。</target>
        </trans-unit>
        <trans-unit id="9c505c67e9b4dbb54495e1dc42c80f1a7a1c454f" translate="yes" xml:space="preserve">
          <source>Floor divide self by other in-place.</source>
          <target state="translated">床は、他の場所で自己を分割します。</target>
        </trans-unit>
        <trans-unit id="1ddc7d58e45f89f16199c2075dcd43275a50c059" translate="yes" xml:space="preserve">
          <source>Floor division, &amp;lsquo;//&amp;rsquo;, is the division operator for the polynomial classes, polynomials are treated like integers in this regard. For Python versions &amp;lt; 3.x the &amp;lsquo;/&amp;rsquo; operator maps to &amp;lsquo;//&amp;rsquo;, as it does for Python, for later versions the &amp;lsquo;/&amp;rsquo; will only work for division by scalars. At some point it will be deprecated:</source>
          <target state="translated">フロア除算 '//'は多項式クラスの除算演算子であり、多項式はこの点で整数のように扱われます。Pythonバージョン&amp;lt;3.xの場合、 '/'演算子は '//'にマップされます。Pythonの場合と同様に、それ以降のバージョンでは、 '/'はスカラーによる除算でのみ機能します。ある時点で廃止される予定です。</target>
        </trans-unit>
        <trans-unit id="79e1726f42029777852db20a843c6cc2473daaca" translate="yes" xml:space="preserve">
          <source>Flush the memmap instance to write the changes to the file. Currently there is no API to close the underlying &lt;code&gt;mmap&lt;/code&gt;. It is tricky to ensure the resource is actually closed, since it may be shared between different memmap instances.</source>
          <target state="translated">memmapインスタンスをフラッシュして、変更をファイルに書き込みます。現在、基になる &lt;code&gt;mmap&lt;/code&gt; を閉じるAPIはありません。リソースは異なるmemmapインスタンス間で共有される可能性があるため、リソースが実際に閉じられていることを確認するのは難しいです。</target>
        </trans-unit>
        <trans-unit id="da34386f35923e2e352d15ed19fcb86185028b70" translate="yes" xml:space="preserve">
          <source>Flushes memory changes to disk in order to read them back</source>
          <target state="translated">メモリの変更をディスクにフラッシュして、読み戻すことができる</target>
        </trans-unit>
        <trans-unit id="977e7ae24b1ce53baf0769e85a5d553c0c1ba1a9" translate="yes" xml:space="preserve">
          <source>Following each integration the result is &lt;em&gt;multiplied&lt;/em&gt; by &lt;code&gt;scl&lt;/code&gt; before the integration constant is added. (Default: 1)</source>
          <target state="translated">各積分に続いて、積分定数が追加される前に結果に &lt;code&gt;scl&lt;/code&gt; が&lt;em&gt;乗算&lt;/em&gt;されます。（デフォルト：1）</target>
        </trans-unit>
        <trans-unit id="0edda5efdca0ba777ab89777b73ae8abb0ac8170" translate="yes" xml:space="preserve">
          <source>Following the header comes the array data. If the dtype contains Python objects (i.e. &lt;code&gt;dtype.hasobject is True&lt;/code&gt;), then the data is a Python pickle of the array. Otherwise the data is the contiguous (either C- or Fortran-, depending on &lt;code&gt;fortran_order&lt;/code&gt;) bytes of the array. Consumers can figure out the number of bytes by multiplying the number of elements given by the shape (noting that &lt;code&gt;shape=()&lt;/code&gt; means there is 1 element) by &lt;code&gt;dtype.itemsize&lt;/code&gt;.</source>
          <target state="translated">ヘッダーの後に配列データが続きます。dtypeにPythonオブジェクトが含まれている場合（つまり、 &lt;code&gt;dtype.hasobject is True&lt;/code&gt; ）、データは配列のPythonピクルです。それ以外の場合、データは配列の連続した（fortran_orderに応じてCまたは &lt;code&gt;fortran_order&lt;/code&gt; ）バイトです。コンシューマは、シェイプによって与えられた要素の数（ &lt;code&gt;shape=()&lt;/code&gt; が1つの要素があることを意味することに注意）に &lt;code&gt;dtype.itemsize&lt;/code&gt; を掛けることによって、バイト数を計算できます。</target>
        </trans-unit>
        <trans-unit id="ec0c3b76630fd745381cc215a284820af75a683a" translate="yes" xml:space="preserve">
          <source>Footnotes</source>
          <target state="translated">Footnotes</target>
        </trans-unit>
        <trans-unit id="1e3737ce90be5e40d3542337b2a16d0ddfea15fe" translate="yes" xml:space="preserve">
          <source>For 18 of the 21 types this number is fixed by the data-type. For the flexible data-types, this number can be anything.</source>
          <target state="translated">21の型のうち18の型では、この数値はデータ型によって固定されています。柔軟性のあるデータ型では、この数値は何でも構いません。</target>
        </trans-unit>
        <trans-unit id="6fe31cdcb6c6646809088d5903655d52a55d450e" translate="yes" xml:space="preserve">
          <source>For 2-D arrays it is the matrix product:</source>
          <target state="translated">2次元配列の場合は,行列の積になります.</target>
        </trans-unit>
        <trans-unit id="3f962aedbf83ef9d65d44b9e69490919cc79f9a0" translate="yes" xml:space="preserve">
          <source>For 2-D mixed with 1-D, the result is the usual.</source>
          <target state="translated">1-Dに2-Dが混ざっている場合は、通常の結果になります。</target>
        </trans-unit>
        <trans-unit id="249d7389fa64403ab6c1fc03103e6db107907e49" translate="yes" xml:space="preserve">
          <source>For 8-bit strings, this method is locale-dependent.</source>
          <target state="translated">8 ビット文字列の場合、この方法はロケールに依存します。</target>
        </trans-unit>
        <trans-unit id="e9823fecc87a84ebddb341139f0bf48490868833" translate="yes" xml:space="preserve">
          <source>For &lt;a href=&quot;#how-to-io-pickle-file&quot;&gt;security and portability&lt;/a&gt;, set &lt;code&gt;allow_pickle=False&lt;/code&gt; unless the dtype contains Python objects, which requires pickling.</source>
          <target state="translated">&lt;a href=&quot;#how-to-io-pickle-file&quot;&gt;セキュリティと移植性の&lt;/a&gt;ために、dtypeにpickle化が必要なPythonオブジェクトが含まれていない限り、allow_pickle &lt;code&gt;allow_pickle=False&lt;/code&gt; 設定します。</target>
        </trans-unit>
        <trans-unit id="e34d3054bfe352b99ce08082d1411334b317ca53" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; one-dimensional, this is equivalent to:</source>
          <target state="translated">以下のために &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; の一次元、これは、と等価です。</target>
        </trans-unit>
        <trans-unit id="a6fa074fdf944e6525f90fb53e3868628cc3a171" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;a.view(some_dtype)&lt;/code&gt;, if &lt;code&gt;some_dtype&lt;/code&gt; has a different number of bytes per entry than the previous dtype (for example, converting a regular array to a structured array), then the behavior of the view cannot be predicted just from the superficial appearance of &lt;code&gt;a&lt;/code&gt; (shown by &lt;code&gt;print(a)&lt;/code&gt;). It also depends on exactly how &lt;code&gt;a&lt;/code&gt; is stored in memory. Therefore if &lt;code&gt;a&lt;/code&gt; is C-ordered versus fortran-ordered, versus defined as a slice or transpose, etc., the view may give different results.</source>
          <target state="translated">ため &lt;code&gt;a.view(some_dtype)&lt;/code&gt; 場合、 &lt;code&gt;some_dtype&lt;/code&gt; は、（例えば、構造アレイの規則的なアレイを変換）前DTYPEよりエントリあたりのバイトの異なった数を有し、そのビューの挙動は、表面外観をわずかに予測することはできません（で示される &lt;code&gt;print(a)&lt;/code&gt; ）。また &lt;code&gt;a&lt;/code&gt; がメモリにどのように格納されるかにも依存します。したがって、 &lt;code&gt;a&lt;/code&gt; がC順であるか、 fortran順であるか、またはスライスまたは転置として定義されているなどの場合、ビューは異なる結果をもたらす可能性があります。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="915d1e6dbac63dd7367ad9288b59958e7383b198" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;array&lt;/code&gt;, &lt;strong&gt;``*`` means element-wise multiplication&lt;/strong&gt;, while &lt;strong&gt;``@`` means matrix multiplication&lt;/strong&gt;; they have associated functions &lt;code&gt;multiply()&lt;/code&gt; and &lt;code&gt;dot()&lt;/code&gt;. (Before Python 3.5, &lt;code&gt;@&lt;/code&gt; did not exist and one had to use &lt;code&gt;dot()&lt;/code&gt; for matrix multiplication).</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; 、&lt;strong&gt;`` * ``手段要素毎の乗算&lt;/strong&gt;しばらく、&lt;strong&gt;`` @ ``手段行列の乗算&lt;/strong&gt;; それらには、 &lt;code&gt;multiply()&lt;/code&gt; および &lt;code&gt;dot()&lt;/code&gt; 関数が関連付けられています。（Python 3.5より前は、 &lt;code&gt;@&lt;/code&gt; は存在せず、行列の乗算に &lt;code&gt;dot()&lt;/code&gt; を使用する必要がありました）。</target>
        </trans-unit>
        <trans-unit id="e46f2d6f5fe5e7ec999c5f95aef2596fb69e222c" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;array&lt;/code&gt;, &lt;strong&gt;``*`` means element-wise multiplication&lt;/strong&gt;, while &lt;strong&gt;``@`` means matrix multiplication&lt;/strong&gt;; they have associated functions &lt;code&gt;multiply()&lt;/code&gt; and &lt;code&gt;dot()&lt;/code&gt;. (Before python 3.5, &lt;code&gt;@&lt;/code&gt; did not exist and one had to use &lt;code&gt;dot()&lt;/code&gt; for matrix multiplication).</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; 、&lt;strong&gt;`` * ``手段要素毎の乗算&lt;/strong&gt;しばらく、&lt;strong&gt;`` @ ``手段行列の乗算&lt;/strong&gt;; それらには、 &lt;code&gt;multiply()&lt;/code&gt; および &lt;code&gt;dot()&lt;/code&gt; 関数が関連付けられています。（Python 3.5より前は、 &lt;code&gt;@&lt;/code&gt; は存在せず、行列の乗算に &lt;code&gt;dot()&lt;/code&gt; を使用する必要がありました）。</target>
        </trans-unit>
        <trans-unit id="3105b82282a4b74064eec805ba7d2c290a53d304" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;array&lt;/code&gt;, the &lt;strong&gt;vector shapes 1xN, Nx1, and N are all different things&lt;/strong&gt;. Operations like &lt;code&gt;A[:,1]&lt;/code&gt; return a one-dimensional array of shape N, not a two-dimensional array of shape Nx1. Transpose on a one-dimensional &lt;code&gt;array&lt;/code&gt; does nothing.</source>
          <target state="translated">以下のため &lt;code&gt;array&lt;/code&gt; 、&lt;strong&gt;ベクトルはの1xN、Nx1の、およびNを形作る全て異なるものです&lt;/strong&gt;。 &lt;code&gt;A[:,1]&lt;/code&gt; ような演算は、形状Nx1の2次元配列ではなく、形状Nの1次元配列を返します。1次元 &lt;code&gt;array&lt;/code&gt; 転置は何もしません。</target>
        </trans-unit>
        <trans-unit id="272593adff1434bde1d4cd33b0346e0c6d20e042" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;e, E&lt;/code&gt; and &lt;code&gt;f&lt;/code&gt; specifiers, the number of digits to print after the decimal point.</source>
          <target state="translated">以下のために &lt;code&gt;e, E&lt;/code&gt; 及び &lt;code&gt;f&lt;/code&gt; 指定子、桁数は、小数点の後に印刷します。</target>
        </trans-unit>
        <trans-unit id="a8b87fa4bee96c31297a2faf4474562d50259437" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;g&lt;/code&gt; and &lt;code&gt;G&lt;/code&gt;, the maximum number of significant digits.</source>
          <target state="translated">以下のための &lt;code&gt;g&lt;/code&gt; と &lt;code&gt;G&lt;/code&gt; 、最大有効桁数。</target>
        </trans-unit>
        <trans-unit id="d98628f7394ff0daa3811e58311c01f9a29ca826" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;matrix&lt;/code&gt;, &lt;strong&gt;``*`` means matrix multiplication&lt;/strong&gt;, and for element-wise multiplication one has to use the &lt;code&gt;multiply()&lt;/code&gt; function.</source>
          <target state="translated">以下のために &lt;code&gt;matrix&lt;/code&gt; 、&lt;strong&gt;`` * ``手段行列の乗算&lt;/strong&gt;、および1つは使用しなければならない要素毎の乗算のための &lt;code&gt;multiply()&lt;/code&gt; 関数を。</target>
        </trans-unit>
        <trans-unit id="637ce924b991228068be8a9a9fc01722cca48f39" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;matrix&lt;/code&gt;, &lt;strong&gt;one-dimensional arrays are always upconverted to 1xN or Nx1 matrices&lt;/strong&gt; (row or column vectors). &lt;code&gt;A[:,1]&lt;/code&gt; returns a two-dimensional matrix of shape Nx1.</source>
          <target state="translated">以下のため &lt;code&gt;matrix&lt;/code&gt; 、&lt;strong&gt;1次元配列は、常に1xNまたはNx1のマトリックスにアップコンバートされた&lt;/strong&gt;（行または列ベクトル）。 &lt;code&gt;A[:,1]&lt;/code&gt; は、形状Nx1の2次元行列を返します。</target>
        </trans-unit>
        <trans-unit id="2f16f572df2de5dbe71ab6b482a26aade3788153" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;s&lt;/code&gt;, the maximum number of characters.</source>
          <target state="translated">以下のため &lt;code&gt;s&lt;/code&gt; 、文字の最大数。</target>
        </trans-unit>
        <trans-unit id="aa1840d454c362488b42bf5829f92b6d701a9c1e" translate="yes" xml:space="preserve">
          <source>For Arch</source>
          <target state="translated">アーチの場合</target>
        </trans-unit>
        <trans-unit id="1fe382b5886c1f7f86eb9563a948b171f688012e" translate="yes" xml:space="preserve">
          <source>For C code, see &lt;a href=&quot;https://numpy.org/neps/nep-0045-c_style_guide.html#nep45&quot;&gt;NEP 45&lt;/a&gt;.</source>
          <target state="translated">Cコードについては、&lt;a href=&quot;https://numpy.org/neps/nep-0045-c_style_guide.html#nep45&quot;&gt;NEP45を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="99d20f637f3a6e1d55b90d0390d938da13e44f35" translate="yes" xml:space="preserve">
          <source>For C code, see the &lt;a href=&quot;style_guide#style-guide&quot;&gt;numpy-c-style-guide&lt;/a&gt;</source>
          <target state="translated">Cコードについては、&lt;a href=&quot;style_guide#style-guide&quot;&gt;numpy-c-style-guideを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="96de2b474663e4b27c100d387c234e173e9360ba" translate="yes" xml:space="preserve">
          <source>For NumPy &amp;gt;= 1.10.0 a view of &lt;code&gt;a&lt;/code&gt; is always returned. For earlier NumPy versions a view of &lt;code&gt;a&lt;/code&gt; is returned only if the order of the axes is changed, otherwise the input array is returned.</source>
          <target state="translated">numpyののための&amp;gt; = 1.10.0ビューは常に返されます。以前numpyのバージョンのためのビューさもなければ入力配列が返され、軸の順序が変更された場合にのみ返されます。 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="187181bc029dad6f61070b7f6592eecd79b97aa5" translate="yes" xml:space="preserve">
          <source>For NumPy &amp;gt;= 1.10.0, if &lt;code&gt;a&lt;/code&gt; is an ndarray, then a view of &lt;code&gt;a&lt;/code&gt; is returned; otherwise a new array is created. For earlier NumPy versions a view of &lt;code&gt;a&lt;/code&gt; is returned only if the order of the axes is changed, otherwise the input array is returned.</source>
          <target state="translated">場合numpyのため&amp;gt; = 1.10.0、ndarrayであり、その後のビュー戻されます。それ以外の場合は、新しい配列が作成されます。以前numpyのバージョンのためのビューさもなければ入力配列が返され、軸の順序が変更された場合にのみ返されます。 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0a5eeed134b0ceb1a540af21c6c13d1f0f7c9d88" translate="yes" xml:space="preserve">
          <source>For PRs that add new features or are in some way complex, wait at least a day or two before merging it. That way, others get a chance to comment before the code goes in. Consider adding it to the release notes.</source>
          <target state="translated">新機能を追加したり、何らかの複雑な内容のPRについては、少なくとも1日か2日待ってからマージしてください。そうすれば、コードが入る前に他の人がコメントする機会が得られます。リリースノートへの追加も検討してください。</target>
        </trans-unit>
        <trans-unit id="54f70af9beed617bc137c199798e6f21c9093a8c" translate="yes" xml:space="preserve">
          <source>For Python, the preferred way of handling contiguous (or technically, &lt;em&gt;strided&lt;/em&gt;) blocks of homogeneous data is with NumPy, which provides full object-oriented access to multidimensial arrays of data. Therefore, the most logical Python interface for the &lt;code&gt;rms&lt;/code&gt; function would be (including doc string):</source>
          <target state="translated">Pythonの場合、同種のデータの連続した（技術的には&lt;em&gt;stridedの&lt;/em&gt;）ブロックを処理する推奨方法は、NumPyを使用することです。これにより、データの多次元配列への完全なオブジェクト指向のアクセスが提供されます。したがって、 &lt;code&gt;rms&lt;/code&gt; 関数の最も論理的なPythonインターフェイスは（doc文字列を含む）です。</target>
        </trans-unit>
        <trans-unit id="55f9e5f045d92376c7d38dda0f2622f9b6352be6" translate="yes" xml:space="preserve">
          <source>For a 1-D array this has no effect, as a transposed vector is simply the same vector. To convert a 1-D array into a 2D column vector, an additional dimension must be added. &lt;code&gt;np.atleast2d(a).T&lt;/code&gt; achieves this, as does &lt;code&gt;a[:, np.newaxis]&lt;/code&gt;. For a 2-D array, this is a standard matrix transpose. For an n-D array, if axes are given, their order indicates how the axes are permuted (see Examples). If axes are not provided and &lt;code&gt;a.shape = (i[0], i[1], ... i[n-2], i[n-1])&lt;/code&gt;, then &lt;code&gt;a.transpose().shape = (i[n-1], i[n-2], ... i[1], i[0])&lt;/code&gt;.</source>
          <target state="translated">1次元配列の場合、転置されたベクトルは単純に同じベクトルであるため、これは効果がありません。1次元配列を2次元列ベクトルに変換するには、次元を追加する必要があります。 &lt;code&gt;np.atleast2d(a).T&lt;/code&gt; は &lt;code&gt;a[:, np.newaxis]&lt;/code&gt; と同様にこれを実現します。2次元配列の場合、これは標準の行列転置です。nD配列の場合、軸が指定されている場合、それらの順序は軸がどのように置換されるかを示します（例を参照）。軸が指定されておらず、 &lt;code&gt;a.shape = (i[0], i[1], ... i[n-2], i[n-1])&lt;/code&gt; 場合、 &lt;code&gt;a.transpose().shape = (i[n-1], i[n-2], ... i[1], i[0])&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9c37103fe1630ecb51bfbc7a903129e1d60dd7ed" translate="yes" xml:space="preserve">
          <source>For a 1D array, &lt;code&gt;a.tolist()&lt;/code&gt; is almost the same as &lt;code&gt;list(a)&lt;/code&gt;, except that &lt;code&gt;tolist&lt;/code&gt; changes numpy scalars to Python scalars:</source>
          <target state="translated">1D配列の場合、 &lt;code&gt;a.tolist()&lt;/code&gt; は &lt;code&gt;list(a)&lt;/code&gt; とほぼ同じ &lt;code&gt;tolist&lt;/code&gt; が、tolistがnumpyスカラーをPythonスカラーに変更する点が異なります。</target>
        </trans-unit>
        <trans-unit id="d3f2a60e0b01b84231d8024aebcc5e084e0ba27d" translate="yes" xml:space="preserve">
          <source>For a 1D array, &lt;code&gt;a.tolist()&lt;/code&gt; is almost the same as &lt;code&gt;list(a)&lt;/code&gt;:</source>
          <target state="translated">1D配列の場合、 &lt;code&gt;a.tolist()&lt;/code&gt; は &lt;code&gt;list(a)&lt;/code&gt; とほぼ同じです。</target>
        </trans-unit>
        <trans-unit id="cf0f7c81098fcc87863f3be5d59395a987825914" translate="yes" xml:space="preserve">
          <source>For a complete discussion of creation methods for masked arrays please see section &lt;a href=&quot;#maskedarray-generic-constructing&quot;&gt;Constructing masked arrays&lt;/a&gt;.</source>
          <target state="translated">マスクされた配列の作成方法の完全な説明については、セクションを参照してください&lt;a href=&quot;#maskedarray-generic-constructing&quot;&gt;マスクされた配列を構築します&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0bdfc3356f177e5d7773cb796069c781e6c3ff20" translate="yes" xml:space="preserve">
          <source>For a description of the &lt;code&gt;.npy&lt;/code&gt; format, see &lt;a href=&quot;numpy.lib.format#module-numpy.lib.format&quot;&gt;&lt;code&gt;numpy.lib.format&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">説明については &lt;code&gt;.npy&lt;/code&gt; 形式、参照&lt;a href=&quot;numpy.lib.format#module-numpy.lib.format&quot;&gt; &lt;code&gt;numpy.lib.format&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="197692467968599b779c0574e1302cadc5d30a4f" translate="yes" xml:space="preserve">
          <source>For a full description of these options, see &lt;a href=&quot;numpy.set_printoptions#numpy.set_printoptions&quot;&gt;&lt;code&gt;set_printoptions&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらのオプションの詳細については、&lt;a href=&quot;numpy.set_printoptions#numpy.set_printoptions&quot;&gt; &lt;code&gt;set_printoptions&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b040ed436e354a6dfab8e28023d68c6eed7a06c2" translate="yes" xml:space="preserve">
          <source>For a function that returns a 1D array, the number of dimensions in &lt;code&gt;outarr&lt;/code&gt; is the same as &lt;code&gt;arr&lt;/code&gt;.</source>
          <target state="translated">1D配列を返す関数の場合、 &lt;code&gt;outarr&lt;/code&gt; の次元数は &lt;code&gt;arr&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="9409ae5300d15907687b38139959611e06963f16" translate="yes" xml:space="preserve">
          <source>For a function that returns a higher dimensional array, those dimensions are inserted in place of the &lt;code&gt;axis&lt;/code&gt; dimension.</source>
          <target state="translated">より高い次元の配列を返す関数の場合、それらの次元は &lt;code&gt;axis&lt;/code&gt; 次元の代わりに挿入されます。</target>
        </trans-unit>
        <trans-unit id="6bc58e9722ab208094239d52118be4b4466da131" translate="yes" xml:space="preserve">
          <source>For a log() that returns &lt;code&gt;NAN&lt;/code&gt; when real &lt;code&gt;x &amp;lt; 0&lt;/code&gt;, use &lt;a href=&quot;numpy.log#numpy.log&quot;&gt;&lt;code&gt;numpy.log&lt;/code&gt;&lt;/a&gt; (note, however, that otherwise &lt;a href=&quot;numpy.log#numpy.log&quot;&gt;&lt;code&gt;numpy.log&lt;/code&gt;&lt;/a&gt; and this &lt;a href=&quot;numpy.log#numpy.log&quot;&gt;&lt;code&gt;log&lt;/code&gt;&lt;/a&gt; are identical, i.e., both return &lt;code&gt;-inf&lt;/code&gt; for &lt;code&gt;x = 0&lt;/code&gt;, &lt;code&gt;inf&lt;/code&gt; for &lt;code&gt;x = inf&lt;/code&gt;, and, notably, the complex principle value if &lt;code&gt;x.imag != 0&lt;/code&gt;).</source>
          <target state="translated">戻ること）（ログの &lt;code&gt;NAN&lt;/code&gt; 実 &lt;code&gt;x &amp;lt; 0&lt;/code&gt; 、使用&lt;a href=&quot;numpy.log#numpy.log&quot;&gt; &lt;code&gt;numpy.log&lt;/code&gt; &lt;/a&gt;（さもなければこと但し、&lt;a href=&quot;numpy.log#numpy.log&quot;&gt; &lt;code&gt;numpy.log&lt;/code&gt; &lt;/a&gt;この&lt;a href=&quot;numpy.log#numpy.log&quot;&gt; &lt;code&gt;log&lt;/code&gt; &lt;/a&gt;同一である、すなわち、リターン両方 &lt;code&gt;-inf&lt;/code&gt; ため &lt;code&gt;x = 0&lt;/code&gt; 、 &lt;code&gt;inf&lt;/code&gt; 用 &lt;code&gt;x = inf&lt;/code&gt; 、特に、 &lt;code&gt;x.imag != 0&lt;/code&gt; 場合の複素主値）。</target>
        </trans-unit>
        <trans-unit id="7fb6c973e282321a695eebb55d28fd847e02e71f" translate="yes" xml:space="preserve">
          <source>For a log10() that returns &lt;code&gt;NAN&lt;/code&gt; when real &lt;code&gt;x &amp;lt; 0&lt;/code&gt;, use &lt;a href=&quot;numpy.log10#numpy.log10&quot;&gt;&lt;code&gt;numpy.log10&lt;/code&gt;&lt;/a&gt; (note, however, that otherwise &lt;a href=&quot;numpy.log10#numpy.log10&quot;&gt;&lt;code&gt;numpy.log10&lt;/code&gt;&lt;/a&gt; and this &lt;a href=&quot;numpy.log10#numpy.log10&quot;&gt;&lt;code&gt;log10&lt;/code&gt;&lt;/a&gt; are identical, i.e., both return &lt;code&gt;-inf&lt;/code&gt; for &lt;code&gt;x = 0&lt;/code&gt;, &lt;code&gt;inf&lt;/code&gt; for &lt;code&gt;x = inf&lt;/code&gt;, and, notably, the complex principle value if &lt;code&gt;x.imag != 0&lt;/code&gt;).</source>
          <target state="translated">戻ること）（log10のため &lt;code&gt;NAN&lt;/code&gt; とき実 &lt;code&gt;x &amp;lt; 0&lt;/code&gt; 、使用&lt;a href=&quot;numpy.log10#numpy.log10&quot;&gt; &lt;code&gt;numpy.log10&lt;/code&gt; &lt;/a&gt;（さもなければこと但し、&lt;a href=&quot;numpy.log10#numpy.log10&quot;&gt; &lt;code&gt;numpy.log10&lt;/code&gt; &lt;/a&gt;この&lt;a href=&quot;numpy.log10#numpy.log10&quot;&gt; &lt;code&gt;log10&lt;/code&gt; のは&lt;/a&gt;、すなわち、同一であり、リターン両方 &lt;code&gt;-inf&lt;/code&gt; ため &lt;code&gt;x = 0&lt;/code&gt; 、 &lt;code&gt;inf&lt;/code&gt; 用 &lt;code&gt;x = inf&lt;/code&gt; 、特に、 &lt;code&gt;x.imag != 0&lt;/code&gt; 場合の複素主値）。</target>
        </trans-unit>
        <trans-unit id="3d2c7a157db6f37c8448fa48835b35d5b5709f3a" translate="yes" xml:space="preserve">
          <source>For a log2() that returns &lt;code&gt;NAN&lt;/code&gt; when real &lt;code&gt;x &amp;lt; 0&lt;/code&gt;, use &lt;a href=&quot;numpy.log2#numpy.log2&quot;&gt;&lt;code&gt;numpy.log2&lt;/code&gt;&lt;/a&gt; (note, however, that otherwise &lt;a href=&quot;numpy.log2#numpy.log2&quot;&gt;&lt;code&gt;numpy.log2&lt;/code&gt;&lt;/a&gt; and this &lt;a href=&quot;numpy.log2#numpy.log2&quot;&gt;&lt;code&gt;log2&lt;/code&gt;&lt;/a&gt; are identical, i.e., both return &lt;code&gt;-inf&lt;/code&gt; for &lt;code&gt;x = 0&lt;/code&gt;, &lt;code&gt;inf&lt;/code&gt; for &lt;code&gt;x = inf&lt;/code&gt;, and, notably, the complex principle value if &lt;code&gt;x.imag != 0&lt;/code&gt;).</source>
          <target state="translated">戻ること）（LOG2ため &lt;code&gt;NAN&lt;/code&gt; 実 &lt;code&gt;x &amp;lt; 0&lt;/code&gt; 、使用&lt;a href=&quot;numpy.log2#numpy.log2&quot;&gt; &lt;code&gt;numpy.log2&lt;/code&gt; &lt;/a&gt;（さもなければこと但し、&lt;a href=&quot;numpy.log2#numpy.log2&quot;&gt; &lt;code&gt;numpy.log2&lt;/code&gt; &lt;/a&gt;この&lt;a href=&quot;numpy.log2#numpy.log2&quot;&gt; &lt;code&gt;log2&lt;/code&gt; &lt;/a&gt;同一であり、すなわち、リターン両方 &lt;code&gt;-inf&lt;/code&gt; ため &lt;code&gt;x = 0&lt;/code&gt; 、 &lt;code&gt;inf&lt;/code&gt; 用 &lt;code&gt;x = inf&lt;/code&gt; 、特に、 &lt;code&gt;x.imag != 0&lt;/code&gt; 場合の複素主値）。</target>
        </trans-unit>
        <trans-unit id="17b694669442e700bd635063d9a03b4ef4365eec" translate="yes" xml:space="preserve">
          <source>For a more detailed discussion, read on and follow the links at the bottom of this page.</source>
          <target state="translated">より詳細な議論については、このページの下部にあるリンクを参照してください。</target>
        </trans-unit>
        <trans-unit id="7adc015d596be980abdfb7f52ddd54b20d9ed4e4" translate="yes" xml:space="preserve">
          <source>For a multi-dimensional array, accumulate is applied along only one axis (axis zero by default; see Examples below) so repeated use is necessary if one wants to accumulate over multiple axes.</source>
          <target state="translated">多次元配列の場合、アキュムレートは1つの軸(デフォルトでは軸ゼロ;以下の例を参照)に沿ってのみ適用されるので、複数の軸に渡ってアキュムレートしたい場合は繰り返し使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4a70a58adc76a39cce5a267ab70438cf75b9572e" translate="yes" xml:space="preserve">
          <source>For a non-trivial signature, &lt;code&gt;dimensions&lt;/code&gt; will also contain the sizes of the core dimensions as well, starting at the second entry. Only one size is provided for each unique dimension name and the sizes are given according to the first occurrence of a dimension name in the signature.</source>
          <target state="translated">重要なシグネチャの場合、 &lt;code&gt;dimensions&lt;/code&gt; には2番目のエントリから始まるコアディメンションのサイズも含まれます。一意のディメンション名ごとに1つのサイズのみが提供され、サイズはシグネチャ内の最初のディメンション名の出現に従って与えられます。</target>
        </trans-unit>
        <trans-unit id="8218bd5d7a6649aa63226e5b622d4b8efad4dc34" translate="yes" xml:space="preserve">
          <source>For a one-dimensional array, accumulate produces results equivalent to:</source>
          <target state="translated">1次元配列の場合,アキュムレートはこれと同等の結果を生成します.</target>
        </trans-unit>
        <trans-unit id="0424b9224931152a35a50c93d8cc0ece880de71a" translate="yes" xml:space="preserve">
          <source>For a one-sided t-test, how far out in the distribution does the t statistic appear?</source>
          <target state="translated">片側t検定では,t 統計量は分布のどのくらい外側に現れるか?</target>
        </trans-unit>
        <trans-unit id="3911c3b2407712ae47f85ee3fb1ac557138ff00b" translate="yes" xml:space="preserve">
          <source>For a possible future loop selector with a different signature.</source>
          <target state="translated">異なるシグネチャを持つ可能性のある将来のループセレクタのために。</target>
        </trans-unit>
        <trans-unit id="c991a419f14da45f93fac679b2b79a552dc6a583" translate="yes" xml:space="preserve">
          <source>For a simple example, consider taking the sum of all elements in an array.</source>
          <target state="translated">簡単な例として、配列のすべての要素の合計を取ることを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="65b58d63b284139c1918d1c4f188a0cdc07b3bf2" translate="yes" xml:space="preserve">
          <source>For advanced assignments, there is in general no guarantee for the iteration order. This means that if an element is set more than once, it is not possible to predict the final result.</source>
          <target state="translated">高度な代入では、一般的に反復順序の保証はありません。つまり、ある要素が複数回設定された場合、最終的な結果を予測することができないということです。</target>
        </trans-unit>
        <trans-unit id="d08105fb315fdfa97977e494fc0f07ee6275d676" translate="yes" xml:space="preserve">
          <source>For all of these macros &lt;em&gt;arr&lt;/em&gt; must be an instance of a (subclass of) &lt;a href=&quot;c-api.types-and-structures#c.PyArray_Type&quot;&gt;&lt;code&gt;PyArray_Type&lt;/code&gt;&lt;/a&gt;, but no checking is done.</source>
          <target state="translated">これらすべてのマクロでは、&lt;em&gt;arr&lt;/em&gt;は&lt;a href=&quot;c-api.types-and-structures#c.PyArray_Type&quot;&gt; &lt;code&gt;PyArray_Type&lt;/code&gt; &lt;/a&gt;（のサブクラス）のインスタンスでなければなりませんが、チェックは行われません。</target>
        </trans-unit>
        <trans-unit id="e1f0a94de943c1efcc57e0ced39bb6353a416723" translate="yes" xml:space="preserve">
          <source>For all of these macros &lt;em&gt;arr&lt;/em&gt; must be an instance of a (subclass of) &lt;a href=&quot;types-and-structures#c.PyArray_Type&quot;&gt;&lt;code&gt;PyArray_Type&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらすべてのマクロについて、&lt;em&gt;arr&lt;/em&gt;は&lt;a href=&quot;types-and-structures#c.PyArray_Type&quot;&gt; &lt;code&gt;PyArray_Type&lt;/code&gt; &lt;/a&gt;（のサブクラス）のインスタンスである必要があります。</target>
        </trans-unit>
        <trans-unit id="24c98e7efdd0450f6d403ff7e88bf2f5b1a932b5" translate="yes" xml:space="preserve">
          <source>For all-NaN slices or slices with zero degrees of freedom, NaN is returned and a &lt;code&gt;RuntimeWarning&lt;/code&gt; is raised.</source>
          <target state="translated">すべてがNaNのスライスまたは自由度が0のスライスの場合、NaNが返され、 &lt;code&gt;RuntimeWarning&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="b523336c8d394d1599c127fd9600cfe28ac8e406" translate="yes" xml:space="preserve">
          <source>For all-NaN slices, NaN is returned and a &lt;code&gt;RuntimeWarning&lt;/code&gt; is raised.</source>
          <target state="translated">全NaNスライスの場合、NaNが返され、 &lt;code&gt;RuntimeWarning&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="cdcb9c3fa272c68c7dc5e676247f2291a44c1673" translate="yes" xml:space="preserve">
          <source>For an accompanying example, see &lt;a href=&quot;#example&quot;&gt;example.py&lt;/a&gt;.</source>
          <target state="translated">付随する例については、&lt;a href=&quot;#example&quot;&gt;example.pyを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8b1bbf030efb52ebb2db7a903c9ad2ca87ea6a57" translate="yes" xml:space="preserve">
          <source>For an arccos() that returns &lt;code&gt;NAN&lt;/code&gt; when real &lt;code&gt;x&lt;/code&gt; is not in the interval &lt;code&gt;[-1,1]&lt;/code&gt;, use &lt;a href=&quot;numpy.arccos#numpy.arccos&quot;&gt;&lt;code&gt;numpy.arccos&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">実数 &lt;code&gt;x&lt;/code&gt; が区間 &lt;code&gt;[-1,1]&lt;/code&gt; にないときに &lt;code&gt;NAN&lt;/code&gt; を返すarccos（）の場合は、&lt;a href=&quot;numpy.arccos#numpy.arccos&quot;&gt; &lt;code&gt;numpy.arccos&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="28dbf3891d965be0dd027e5198aef3d68b36d0eb" translate="yes" xml:space="preserve">
          <source>For an arcsin() that returns &lt;code&gt;NAN&lt;/code&gt; when real &lt;code&gt;x&lt;/code&gt; is not in the interval &lt;code&gt;[-1,1]&lt;/code&gt;, use &lt;a href=&quot;numpy.arcsin#numpy.arcsin&quot;&gt;&lt;code&gt;numpy.arcsin&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">実数 &lt;code&gt;x&lt;/code&gt; が区間 &lt;code&gt;[-1,1]&lt;/code&gt; にないときに &lt;code&gt;NAN&lt;/code&gt; を返すarcsin（）の場合は、&lt;a href=&quot;numpy.arcsin#numpy.arcsin&quot;&gt; &lt;code&gt;numpy.arcsin&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="715a39a94a66dfb176679504297f4cbe2940279b" translate="yes" xml:space="preserve">
          <source>For an arctanh() that returns &lt;code&gt;NAN&lt;/code&gt; when real &lt;code&gt;x&lt;/code&gt; is not in the interval &lt;code&gt;(-1,1)&lt;/code&gt;, use &lt;a href=&quot;numpy.arctanh#numpy.arctanh&quot;&gt;&lt;code&gt;numpy.arctanh&lt;/code&gt;&lt;/a&gt; (this latter, however, does return +/-inf for &lt;code&gt;x = +/-1&lt;/code&gt;).</source>
          <target state="translated">実数 &lt;code&gt;x&lt;/code&gt; が区間 &lt;code&gt;(-1,1)&lt;/code&gt; にないときに &lt;code&gt;NAN&lt;/code&gt; を返すarctanh（）の場合、numpy.arctanhを使用し&lt;a href=&quot;numpy.arctanh#numpy.arctanh&quot;&gt; &lt;code&gt;numpy.arctanh&lt;/code&gt; &lt;/a&gt;（ただし、後者は &lt;code&gt;x = +/-1&lt;/code&gt; に対して+/- infを返します）。</target>
        </trans-unit>
        <trans-unit id="f544bc19358af783f5828a5e5053cd2cf057f05c" translate="yes" xml:space="preserve">
          <source>For an array &lt;code&gt;a&lt;/code&gt; with &lt;code&gt;a.ndim &amp;gt;= 2&lt;/code&gt;, the diagonal is the list of locations with indices &lt;code&gt;a[i, ..., i]&lt;/code&gt; all identical. This function modifies the input array in-place, it does not return a value.</source>
          <target state="translated">アレイのための &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;a.ndim &amp;gt;= 2&lt;/code&gt; 、対角線はインデックスを有する場所のリストである &lt;code&gt;a[i, ..., i]&lt;/code&gt; 全て同一です。この関数は入力配列をインプレースで変更し、値を返しません。</target>
        </trans-unit>
        <trans-unit id="3aca4d8fb9611bde95449f6380639b52b005e231" translate="yes" xml:space="preserve">
          <source>For an array a with two axes, transpose(a) gives the matrix transpose.</source>
          <target state="translated">2 軸を持つ配列 a に対して,transpose(a)は行列の転置を与えます.</target>
        </trans-unit>
        <trans-unit id="836b756b5d814f029c077f0578ba6c0e58a3c672" translate="yes" xml:space="preserve">
          <source>For an array with rank greater than 1, some of the padding of later axes is calculated from padding of previous axes. This is easiest to think about with a rank 2 array where the corners of the padded array are calculated by using padded values from the first axis.</source>
          <target state="translated">ランクが1より大きい配列の場合、後の軸のパディングの一部は前の軸のパディングから計算されます。これは、最初の軸からのパディング値を使用して、パディングされた配列の角が計算されるランク2の配列で考えるのが最も簡単です。</target>
        </trans-unit>
        <trans-unit id="6e96c6b0d98bc68cbd820a41e54b4b8abe37a921" translate="yes" xml:space="preserve">
          <source>For an even number of input points, &lt;code&gt;A[n//2]&lt;/code&gt; represents the sum of the values at the positive and negative Nyquist frequencies, as the two are aliased together. See &lt;a href=&quot;../routines.fft#module-numpy.fft&quot;&gt;&lt;code&gt;numpy.fft&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">偶数の入力ポイントの場合、 &lt;code&gt;A[n//2]&lt;/code&gt; は、2つのエイリアスが一緒にエイリアスされるため、正と負のナイキスト周波数での値の合計を表します。詳細については、&lt;a href=&quot;../routines.fft#module-numpy.fft&quot;&gt; &lt;code&gt;numpy.fft&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="57743d92673c43f581b946774bebcebd154a8f73" translate="yes" xml:space="preserve">
          <source>For an example, see &lt;a href=&quot;numpy.lib.arrayterator#numpy.lib.Arrayterator&quot;&gt;&lt;code&gt;Arrayterator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">例については、&lt;a href=&quot;numpy.lib.arrayterator#numpy.lib.Arrayterator&quot;&gt; &lt;code&gt;Arrayterator&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8c782854d522cc47b6ef0aa24c79c91b4278be4a" translate="yes" xml:space="preserve">
          <source>For an optional array argument, all its dimensions must be bounded.</source>
          <target state="translated">オプションの配列引数の場合は、そのすべての次元が束縛されていなければなりません。</target>
        </trans-unit>
        <trans-unit id="6fe48c8702effa07c62fb464257e567d9ddc8002" translate="yes" xml:space="preserve">
          <source>For any index combination, including slicing and axis insertion, &lt;code&gt;a[indices]&lt;/code&gt; is the same as &lt;code&gt;a[np.index_exp[indices]]&lt;/code&gt; for any array &lt;code&gt;a&lt;/code&gt;. However, &lt;code&gt;np.index_exp[indices]&lt;/code&gt; can be used anywhere in Python code and returns a tuple of slice objects that can be used in the construction of complex index expressions.</source>
          <target state="translated">スライスと軸の挿入を含むインデックスの組み合わせの場合、 &lt;code&gt;a[indices]&lt;/code&gt; は任意の配列 &lt;code&gt;a&lt;/code&gt; の &lt;code&gt;a[np.index_exp[indices]]&lt;/code&gt; と同じです。ただし、 &lt;code&gt;np.index_exp[indices]&lt;/code&gt; はPythonコードの任意の場所で使用でき、複雑なインデックス式の構築に使用できるスライスオブジェクトのタプルを返します。</target>
        </trans-unit>
        <trans-unit id="befc2c9b3e9174a0e95946cae12589b779a18421" translate="yes" xml:space="preserve">
          <source>For array methods that take an &lt;code&gt;axis&lt;/code&gt; keyword, it defaults to None. If axis is None, then the array is treated as a 1-D array. Any other value for &lt;code&gt;axis&lt;/code&gt; represents the dimension along which the operation should proceed.</source>
          <target state="translated">&lt;code&gt;axis&lt;/code&gt; キーワードを使用する配列メソッドの場合、デフォルトはNoneです。axisがNoneの場合、配列は1次元配列として扱われます。 &lt;code&gt;axis&lt;/code&gt; その他の値は、操作を進める際の寸法を表します。</target>
        </trans-unit>
        <trans-unit id="ec5bdb26c08f7af1b31abb9fd2aadbeeef092f4f" translate="yes" xml:space="preserve">
          <source>For array methods that take an &lt;em&gt;axis&lt;/em&gt; keyword, it defaults to &lt;code&gt;None&lt;/code&gt;. If axis is &lt;em&gt;None&lt;/em&gt;, then the array is treated as a 1-D array. Any other value for &lt;em&gt;axis&lt;/em&gt; represents the dimension along which the operation should proceed.</source>
          <target state="translated">&lt;em&gt;axis&lt;/em&gt;キーワードを取る配列メソッドの場合、デフォルトは &lt;code&gt;None&lt;/code&gt; です。axisが&lt;em&gt;Noneの&lt;/em&gt;場合、配列は1次元配列として扱われます。&lt;em&gt;axisの&lt;/em&gt;他の値は、操作が進むべき次元を表します。</target>
        </trans-unit>
        <trans-unit id="d57067c37de796c57ab86aba446833670680acd2" translate="yes" xml:space="preserve">
          <source>For array methods that take an &lt;em&gt;axis&lt;/em&gt; keyword, it defaults to &lt;em&gt;None&lt;/em&gt;. If axis is &lt;em&gt;None&lt;/em&gt;, then the array is treated as a 1-D array. Any other value for &lt;em&gt;axis&lt;/em&gt; represents the dimension along which the operation should proceed.</source>
          <target state="translated">&lt;em&gt;axis&lt;/em&gt;キーワードを使用する配列メソッドの場合、デフォルトは&lt;em&gt;None&lt;/em&gt;です。axisが&lt;em&gt;Noneの&lt;/em&gt;場合、配列は1次元配列として扱われます。&lt;em&gt;軸の&lt;/em&gt;その他の値は、操作を進める際の寸法を表します。</target>
        </trans-unit>
        <trans-unit id="dcba10981a70013794c3901be17ecdedebc27a1a" translate="yes" xml:space="preserve">
          <source>For backward compatibility and as a standard &amp;ldquo;container &amp;ldquo;class, the UserArray from Numeric has been brought over to NumPy and named &lt;a href=&quot;generated/numpy.lib.user_array.container#numpy.lib.user_array.container&quot;&gt;&lt;code&gt;numpy.lib.user_array.container&lt;/code&gt;&lt;/a&gt; The container class is a Python class whose self.array attribute is an ndarray. Multiple inheritance is probably easier with numpy.lib.user_array.container than with the ndarray itself and so it is included by default. It is not documented here beyond mentioning its existence because you are encouraged to use the ndarray class directly if you can.</source>
          <target state="translated">下位互換性のため、および標準の「コンテナー」クラスとして、NumericのUserArrayがNumPyに&lt;a href=&quot;generated/numpy.lib.user_array.container#numpy.lib.user_array.container&quot;&gt; &lt;code&gt;numpy.lib.user_array.container&lt;/code&gt; &lt;/a&gt;され、numpy.lib.user_array.containerという名前が付けられました。コンテナークラスは、self.array属性がndarrayであるPythonクラスです。 numpy.lib.user_array.containerの方がndarray自体よりも多重継承の方が簡単なので、デフォルトで含まれています。可能な場合はndarrayクラスを直接使用することをお勧めするため、その存在について言及する以外に、ここでは説明しません。</target>
        </trans-unit>
        <trans-unit id="744029ca149005a975825793a2c75c6e9d0e08e3" translate="yes" xml:space="preserve">
          <source>For backward compatibility with Python 2 the &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; typestrings remain zero-terminated bytes and &lt;a href=&quot;arrays.scalars#numpy.string_&quot;&gt;&lt;code&gt;numpy.string_&lt;/code&gt;&lt;/a&gt; continues to alias &lt;a href=&quot;arrays.scalars#numpy.bytes_&quot;&gt;&lt;code&gt;numpy.bytes_&lt;/code&gt;&lt;/a&gt;. To use actual strings in Python 3 use &lt;code&gt;U&lt;/code&gt; or &lt;a href=&quot;arrays.scalars#numpy.str_&quot;&gt;&lt;code&gt;numpy.str_&lt;/code&gt;&lt;/a&gt;. For signed bytes that do not need zero-termination &lt;code&gt;b&lt;/code&gt; or &lt;code&gt;i1&lt;/code&gt; can be used.</source>
          <target state="translated">Python 2との下位互換性のために、 &lt;code&gt;S&lt;/code&gt; とタイプストリングはゼロで終了するバイトのままであり &lt;code&gt;a&lt;/code&gt; numpy.string_は引き続き&lt;a href=&quot;arrays.scalars#numpy.string_&quot;&gt; &lt;code&gt;numpy.string_&lt;/code&gt; &lt;/a&gt;をエイリアスし&lt;a href=&quot;arrays.scalars#numpy.bytes_&quot;&gt; &lt;code&gt;numpy.bytes_&lt;/code&gt; &lt;/a&gt;。Python 3で実際の文字列を使用するには、 &lt;code&gt;U&lt;/code&gt; または&lt;a href=&quot;arrays.scalars#numpy.str_&quot;&gt; &lt;code&gt;numpy.str_&lt;/code&gt; を&lt;/a&gt;使用します。ゼロ終端を必要としない符号付きバイトの場合、 &lt;code&gt;b&lt;/code&gt; または &lt;code&gt;i1&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="1756e23a025872fd532e8ba6c08bb9a4085acd5e" translate="yes" xml:space="preserve">
          <source>For backward compatibility with Python 2 the &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; typestrings remain zero-terminated bytes and &lt;code&gt;np.string_&lt;/code&gt; continues to map to &lt;code&gt;np.bytes_&lt;/code&gt;. To use actual strings in Python 3 use &lt;code&gt;U&lt;/code&gt; or &lt;code&gt;np.unicode_&lt;/code&gt;. For signed bytes that do not need zero-termination &lt;code&gt;b&lt;/code&gt; or &lt;code&gt;i1&lt;/code&gt; can be used.</source>
          <target state="translated">パイソン2との下位互換性のために &lt;code&gt;S&lt;/code&gt; とtypestringsはゼロ終端バイト残る &lt;code&gt;np.string_&lt;/code&gt; をにマッピングし続ける &lt;code&gt;np.bytes_&lt;/code&gt; 。Python 3で実際の文字列を使用するには、 &lt;code&gt;U&lt;/code&gt; または &lt;code&gt;np.unicode_&lt;/code&gt; を使用します。ゼロ終端を必要としない符号付きバイトには、 &lt;code&gt;b&lt;/code&gt; または &lt;code&gt;i1&lt;/code&gt; を使用できます。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0671395c42986a8a806aaa184ebf9d547a0731c6" translate="yes" xml:space="preserve">
          <source>For backward compatible legacy reasons, we cannot change this. See &lt;a href=&quot;index#random-quick-start&quot;&gt;Quick Start&lt;/a&gt;.</source>
          <target state="translated">下位互換性のあるレガシーの理由により、これを変更することはできません。&lt;a href=&quot;index#random-quick-start&quot;&gt;クイックスタートを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="2f4c86851229c177d560fbdf1b8fb4dd2c3ff306" translate="yes" xml:space="preserve">
          <source>For backward compatible legacy reasons, we cannot change this. See &lt;code&gt;random-quick-start&lt;/code&gt;.</source>
          <target state="translated">下位互換性のあるレガシーの理由により、これを変更することはできません。 &lt;code&gt;random-quick-start&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="c77dfb74768b5914a720e322bd9c4f4d3188beb4" translate="yes" xml:space="preserve">
          <source>For backwards compatibility, datetime64 still parses timezone offsets, which it handles by converting to UTC. However, the resulting datetime is timezone naive:</source>
          <target state="translated">後方互換性のために、datetime64 はまだタイムゾーンオフセットを解析していますが、これは UTC に変換して処理します。しかし、結果として得られる datetime はタイムゾーンがナイーブなものになります。</target>
        </trans-unit>
        <trans-unit id="1c64f15e60882d9539499a036901b91bc24bc19f" translate="yes" xml:space="preserve">
          <source>For backwards compatibility, the form (str, array of 624 uints, int) is also accepted although it is missing some information about the cached Gaussian value: &lt;code&gt;state = ('MT19937', keys, pos)&lt;/code&gt;.</source>
          <target state="translated">下位互換性のために、フォーム（str、624 uints、intの配列）も受け入れられますが、キャッシュされたガウス値に関する情報が欠落しています： &lt;code&gt;state = ('MT19937', keys, pos)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4eb2208bc27c7545536cb93635c9264ced09a6ad" translate="yes" xml:space="preserve">
          <source>For bandlimited interpolation of discrete-time signals, the ideal interpolation kernel is proportional to the sinc function.</source>
          <target state="translated">離散時間信号のバンドリミテッド補間では、理想的な補間カーネルはsinc関数に比例します。</target>
        </trans-unit>
        <trans-unit id="0640d05a7ef317b56adcd70bde409c84daf4b12d" translate="yes" xml:space="preserve">
          <source>For buffered loops, care must be taken to copy and cast data before the loop function is called because the underlying loop expects aligned data of the correct data-type (including byte-order). The buffered loop must handle this copying and casting prior to calling the loop function on chunks no greater than the user-specified bufsize.</source>
          <target state="translated">バッファ付きループの場合、ループ関数を呼び出す前にデータをコピーしてキャストする必要があります。バッファ付きループでは、ユーザーが指定したバフサイズ以下のチャンクに対してループ関数を呼び出す前に、このコピーとキャストを処理しなければなりません。</target>
        </trans-unit>
        <trans-unit id="cb4713bd95be47f513cc79d1a6764009b9a70f10" translate="yes" xml:space="preserve">
          <source>For building NumPy, you&amp;rsquo;ll need a recent version of Cython.</source>
          <target state="translated">NumPyをビルドするには、Cythonの最新バージョンが必要です。</target>
        </trans-unit>
        <trans-unit id="78ea569e34a0a0f36b8d0d5224e34f847b3cf085" translate="yes" xml:space="preserve">
          <source>For clarity it is useful to provide some examples of the type description and corresponding &lt;a href=&quot;#__array_interface__&quot;&gt;&lt;code&gt;__array_interface__&lt;/code&gt;&lt;/a&gt; &amp;lsquo;descr&amp;rsquo; entries. Thanks to Scott Gilbert for these examples:</source>
          <target state="translated">明確にするために、型の説明と対応する&lt;a href=&quot;#__array_interface__&quot;&gt; &lt;code&gt;__array_interface__&lt;/code&gt; &lt;/a&gt; 'descr'エントリのいくつかの例を提供すると便利です。これらの例を提供してくれたScott Gilbertに感謝します。</target>
        </trans-unit>
        <trans-unit id="59d48df0acbcb87d68438ff4bcf04c859beab44c" translate="yes" xml:space="preserve">
          <source>For clarity it is useful to provide some examples of the type description and corresponding &lt;a href=&quot;#object.__array_interface__&quot;&gt;&lt;code&gt;__array_interface__&lt;/code&gt;&lt;/a&gt; &amp;lsquo;descr&amp;rsquo; entries. Thanks to Scott Gilbert for these examples:</source>
          <target state="translated">わかりやすくするために、タイプの説明と対応する&lt;a href=&quot;#object.__array_interface__&quot;&gt; &lt;code&gt;__array_interface__&lt;/code&gt; &lt;/a&gt; 'descr'エントリの例をいくつか提供すると便利です。これらの例を提供してくれたScottGilbertに感謝します。</target>
        </trans-unit>
        <trans-unit id="cf57e9a465ef336bb9e191a7bcc71c622dd7e36c" translate="yes" xml:space="preserve">
          <source>For clearly intentional breaches, report those to the Code of Conduct committee (see below). For possibly unintentional breaches, you may reply to the person and point out this code of conduct (either in public or in private, whatever is most appropriate). If you would prefer not to do that, please feel free to report to the Code of Conduct Committee directly, or ask the Committee for advice, in confidence.</source>
          <target state="translated">明らかに意図的な違反については、行動規範委員会(下記参照)に報告してください。意図的でない違反の可能性がある場合は、相手に返信してこの行動規範を指摘してください(公の場でもプライベートでも、最も適切なものであれば何でも)。それをしたくない場合は、行動規範委員会に直接報告するか、内密に行動規範委員会に助言を求めてください。</target>
        </trans-unit>
        <trans-unit id="fa38704d039a01dbf3beb91b9abfe39ad94c5927" translate="yes" xml:space="preserve">
          <source>For code changes, at least one maintainer (i.e. someone with commit rights) should review and approve a pull request. If you are the first to review a PR and approve of the changes use the GitHub &lt;a href=&quot;https://help.github.com/articles/reviewing-changes-in-pull-requests/&quot;&gt;approve review&lt;/a&gt; tool to mark it as such. If a PR is straightforward, for example it&amp;rsquo;s a clearly correct bug fix, it can be merged straight away. If it&amp;rsquo;s more complex or changes public API, please leave it open for at least a couple of days so other maintainers get a chance to review.</source>
          <target state="translated">コードを変更する場合は、少なくとも1人のメンテナ（つまり、コミット権限を持つ人）がプルリクエストを確認して承認する必要があります。PRを最初にレビューして変更を承認する場合は、GitHub&lt;a href=&quot;https://help.github.com/articles/reviewing-changes-in-pull-requests/&quot;&gt;承認レビュー&lt;/a&gt;ツールを使用してPRをそのようにマークします。PRが単純な場合、たとえば、明らかに正しいバグ修正である場合は、すぐにマージできます。より複雑な場合やパブリックAPIが変更された場合は、他のメンテナが確認できるように、少なくとも2、3日は開いたままにしてください。</target>
        </trans-unit>
        <trans-unit id="f79e4e860ac02f7665b97a2330e074b2889f9891" translate="yes" xml:space="preserve">
          <source>For comparison and general edification of the reader we provide a simple implementation of a C extension of logit that uses no numpy.</source>
          <target state="translated">読者の比較と一般的な理解のために、numpyを使用しないlogitのC拡張の簡単な実装を提供します。</target>
        </trans-unit>
        <trans-unit id="90d52548b7d82f8c08562b9cefe270c672ec6067" translate="yes" xml:space="preserve">
          <source>For comparison with the other methods to be discussed. Here is another example of a function that filters a two-dimensional array of double precision floating-point numbers using a fixed averaging filter. The advantage of using Fortran to index into multi-dimensional arrays should be clear from this example.</source>
          <target state="translated">議論される他の方法との比較のために。倍精度浮動小数点数の2次元配列を固定平均化フィルタを用いてフィルタリングする関数の別の例を示します.Fortranを用いて多次元配列にインデックスを作成する利点は,この例から明らかであるはずです.</target>
        </trans-unit>
        <trans-unit id="aefcdcec95bb0a9f49c3ea43d81c147b480f4a1a" translate="yes" xml:space="preserve">
          <source>For complete documentation of the types of floating-point exceptions and treatment options, see &lt;a href=&quot;numpy.seterr#numpy.seterr&quot;&gt;&lt;code&gt;seterr&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">浮動小数点例外のタイプと処理オプションの完全なドキュメントについては、&lt;a href=&quot;numpy.seterr#numpy.seterr&quot;&gt; &lt;code&gt;seterr&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="f6638e7aa649639c70b61a262d3fcb528e530dcc" translate="yes" xml:space="preserve">
          <source>For completeness, we&amp;rsquo;ll also add the &amp;lsquo;external_loop&amp;rsquo; and &amp;lsquo;buffered&amp;rsquo; flags, as these are what you will typically want for performance reasons.</source>
          <target state="translated">完全を期すために、「external_loop」および「buffered」フラグも追加します。これらは通常、パフォーマンス上の理由で必要になるものだからです。</target>
        </trans-unit>
        <trans-unit id="823eefe35591ae1ef0928dcf4115410e8d28b81a" translate="yes" xml:space="preserve">
          <source>For complex arguments, &lt;code&gt;x = a + ib&lt;/code&gt;, we can write</source>
          <target state="translated">複雑な引数、 &lt;code&gt;x = a + ib&lt;/code&gt; 場合、次のように書くことができます</target>
        </trans-unit>
        <trans-unit id="00d19b01697a76f9042f9abe787cb066622b4409" translate="yes" xml:space="preserve">
          <source>For complex dtypes, the above is applied to each of the real and imaginary components of &lt;code&gt;x&lt;/code&gt; separately.</source>
          <target state="translated">複雑なdtypeの場合、上記は &lt;code&gt;x&lt;/code&gt; の実数部と虚数部のそれぞれに個別に適用されます。</target>
        </trans-unit>
        <trans-unit id="7aabc240767fa8c38770aded9994dbfb9309fc85" translate="yes" xml:space="preserve">
          <source>For complex inputs, the &lt;a href=&quot;#numpy.sign&quot;&gt;&lt;code&gt;sign&lt;/code&gt;&lt;/a&gt; function returns &lt;code&gt;sign(x.real) + 0j if x.real != 0 else sign(x.imag) + 0j&lt;/code&gt;.</source>
          <target state="translated">複素数入力の場合、&lt;a href=&quot;#numpy.sign&quot;&gt; &lt;code&gt;sign&lt;/code&gt; &lt;/a&gt;関数は &lt;code&gt;sign(x.real) + 0j if x.real != 0 else sign(x.imag) + 0j&lt;/code&gt; はsign（x.real）+ 0jを、それ以外の場合はsign（x.imag）+ 0jを返します。</target>
        </trans-unit>
        <trans-unit id="37a57514466afa09fc7538317ff0a405ada2d56e" translate="yes" xml:space="preserve">
          <source>For complex-valued input, &lt;a href=&quot;#numpy.arccos&quot;&gt;&lt;code&gt;arccos&lt;/code&gt;&lt;/a&gt; is a complex analytic function that has branch cuts &lt;code&gt;[-inf, -1]&lt;/code&gt; and &lt;code&gt;[1, inf]&lt;/code&gt; and is continuous from above on the former and from below on the latter.</source>
          <target state="translated">複素数値の入力の場合、&lt;a href=&quot;#numpy.arccos&quot;&gt; &lt;code&gt;arccos&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;[-inf, -1]&lt;/code&gt; と &lt;code&gt;[1, inf]&lt;/code&gt; ブランチカットを持つ複雑な分析関数であり、前者では上から、後者では下から連続です。</target>
        </trans-unit>
        <trans-unit id="ff44215d073bf2342406439d430f9b3eb5cc308c" translate="yes" xml:space="preserve">
          <source>For complex-valued input, &lt;a href=&quot;#numpy.arccosh&quot;&gt;&lt;code&gt;arccosh&lt;/code&gt;&lt;/a&gt; is a complex analytical function that has a branch cut &lt;code&gt;[-inf, 1]&lt;/code&gt; and is continuous from above on it.</source>
          <target state="translated">複素数値の入力の場合、&lt;a href=&quot;#numpy.arccosh&quot;&gt; &lt;code&gt;arccosh&lt;/code&gt; &lt;/a&gt;は、分岐カット &lt;code&gt;[-inf, 1]&lt;/code&gt; あり、上から連続している複雑な分析関数です。</target>
        </trans-unit>
        <trans-unit id="64f377fde8ecd4efebbb4d5831dcc8bc678877a9" translate="yes" xml:space="preserve">
          <source>For complex-valued input, &lt;a href=&quot;#numpy.arcsin&quot;&gt;&lt;code&gt;arcsin&lt;/code&gt;&lt;/a&gt; is a complex analytic function that has, by convention, the branch cuts [-inf, -1] and [1, inf] and is continuous from above on the former and from below on the latter.</source>
          <target state="translated">複素数値の入力の場合、&lt;a href=&quot;#numpy.arcsin&quot;&gt; &lt;code&gt;arcsin&lt;/code&gt; &lt;/a&gt;は、慣例により、分岐が[-inf、-1]および[1、inf]をカットする複雑な分析関数であり、前者では上から、後者では下から連続しています。</target>
        </trans-unit>
        <trans-unit id="57038706eece9d133e1f92cf4c0e30653094f94f" translate="yes" xml:space="preserve">
          <source>For complex-valued input, &lt;a href=&quot;#numpy.arctan&quot;&gt;&lt;code&gt;arctan&lt;/code&gt;&lt;/a&gt; is a complex analytic function that has [&lt;code&gt;1j, infj&lt;/code&gt;] and [&lt;code&gt;-1j, -infj&lt;/code&gt;] as branch cuts, and is continuous from the left on the former and from the right on the latter.</source>
          <target state="translated">複素数値の入力の場合、&lt;a href=&quot;#numpy.arctan&quot;&gt; &lt;code&gt;arctan&lt;/code&gt; &lt;/a&gt;は[ &lt;code&gt;1j, infj&lt;/code&gt; ]および[ &lt;code&gt;-1j, -infj&lt;/code&gt; ]をブランチカットとして持つ複雑な分析関数であり、前者では左から、後者では右から連続です。</target>
        </trans-unit>
        <trans-unit id="4c701e0e2c7136fbf8b3d11659944481b8208402" translate="yes" xml:space="preserve">
          <source>For complex-valued input, &lt;a href=&quot;#numpy.arctanh&quot;&gt;&lt;code&gt;arctanh&lt;/code&gt;&lt;/a&gt; is a complex analytical function that has branch cuts &lt;code&gt;[-1, -inf]&lt;/code&gt; and &lt;code&gt;[1, inf]&lt;/code&gt; and is continuous from above on the former and from below on the latter.</source>
          <target state="translated">複素数値の入力の場合、&lt;a href=&quot;#numpy.arctanh&quot;&gt; &lt;code&gt;arctanh&lt;/code&gt; &lt;/a&gt;は分岐カット &lt;code&gt;[-1, -inf]&lt;/code&gt; および &lt;code&gt;[1, inf]&lt;/code&gt; を持つ複雑な分析関数であり、前者では上から、後者では下から連続です。</target>
        </trans-unit>
        <trans-unit id="159e5638a9f1467d3dd2785cf39347fd2d548d9f" translate="yes" xml:space="preserve">
          <source>For complex-valued input, &lt;a href=&quot;#numpy.log&quot;&gt;&lt;code&gt;log&lt;/code&gt;&lt;/a&gt; is a complex analytical function that has a branch cut &lt;code&gt;[-inf, 0]&lt;/code&gt; and is continuous from above on it. &lt;a href=&quot;#numpy.log&quot;&gt;&lt;code&gt;log&lt;/code&gt;&lt;/a&gt; handles the floating-point negative zero as an infinitesimal negative number, conforming to the C99 standard.</source>
          <target state="translated">複素数値の入力の場合、&lt;a href=&quot;#numpy.log&quot;&gt; &lt;code&gt;log&lt;/code&gt; &lt;/a&gt;は、分岐カット &lt;code&gt;[-inf, 0]&lt;/code&gt; 持ち、上から連続する複雑な分析関数です。&lt;a href=&quot;#numpy.log&quot;&gt; &lt;code&gt;log&lt;/code&gt; &lt;/a&gt;は、C99標準に準拠して、浮動小数点の負のゼロを微小な負の数として扱います。</target>
        </trans-unit>
        <trans-unit id="5ba7031abf7f62c036d84ca3e657ff0bbe63c9b4" translate="yes" xml:space="preserve">
          <source>For complex-valued input, &lt;a href=&quot;#numpy.log10&quot;&gt;&lt;code&gt;log10&lt;/code&gt;&lt;/a&gt; is a complex analytical function that has a branch cut &lt;code&gt;[-inf, 0]&lt;/code&gt; and is continuous from above on it. &lt;a href=&quot;#numpy.log10&quot;&gt;&lt;code&gt;log10&lt;/code&gt;&lt;/a&gt; handles the floating-point negative zero as an infinitesimal negative number, conforming to the C99 standard.</source>
          <target state="translated">複素数値の入力のために、&lt;a href=&quot;#numpy.log10&quot;&gt; &lt;code&gt;log10&lt;/code&gt; のは、&lt;/a&gt;分枝切断有する複雑な分析機能である &lt;code&gt;[-inf, 0]&lt;/code&gt; とその上に上から連続しています。&lt;a href=&quot;#numpy.log10&quot;&gt; &lt;code&gt;log10&lt;/code&gt; &lt;/a&gt;は、C99標準に準拠して、浮動小数点の負のゼロを微小な負の数として扱います。</target>
        </trans-unit>
        <trans-unit id="1d03218ffbd2a27086f21639f1e5d2c57e1fdb96" translate="yes" xml:space="preserve">
          <source>For complex-valued input, &lt;a href=&quot;#numpy.log1p&quot;&gt;&lt;code&gt;log1p&lt;/code&gt;&lt;/a&gt; is a complex analytical function that has a branch cut &lt;code&gt;[-inf, -1]&lt;/code&gt; and is continuous from above on it. &lt;a href=&quot;#numpy.log1p&quot;&gt;&lt;code&gt;log1p&lt;/code&gt;&lt;/a&gt; handles the floating-point negative zero as an infinitesimal negative number, conforming to the C99 standard.</source>
          <target state="translated">複素数値の入力の場合、&lt;a href=&quot;#numpy.log1p&quot;&gt; &lt;code&gt;log1p&lt;/code&gt; &lt;/a&gt;はブランチカット &lt;code&gt;[-inf, -1]&lt;/code&gt; 持ち、上から連続している複雑な分析関数です。&lt;a href=&quot;#numpy.log1p&quot;&gt; &lt;code&gt;log1p&lt;/code&gt; &lt;/a&gt;は、C99標準に準拠して、浮動小数点の負のゼロを微小な負の数として扱います。</target>
        </trans-unit>
        <trans-unit id="714b21ba8fb7b3f93db097558f921f5a3cc7d7e7" translate="yes" xml:space="preserve">
          <source>For complex-valued input, &lt;a href=&quot;#numpy.log2&quot;&gt;&lt;code&gt;log2&lt;/code&gt;&lt;/a&gt; is a complex analytical function that has a branch cut &lt;code&gt;[-inf, 0]&lt;/code&gt; and is continuous from above on it. &lt;a href=&quot;#numpy.log2&quot;&gt;&lt;code&gt;log2&lt;/code&gt;&lt;/a&gt; handles the floating-point negative zero as an infinitesimal negative number, conforming to the C99 standard.</source>
          <target state="translated">複素数値の入力の場合、&lt;a href=&quot;#numpy.log2&quot;&gt; &lt;code&gt;log2&lt;/code&gt; &lt;/a&gt;は分岐カット &lt;code&gt;[-inf, 0]&lt;/code&gt; 持ち、上から連続する複素解析関数です。&lt;a href=&quot;#numpy.log2&quot;&gt; &lt;code&gt;log2&lt;/code&gt; &lt;/a&gt;は、C99標準に準拠して、浮動小数点の負のゼロを微小な負の数として扱います。</target>
        </trans-unit>
        <trans-unit id="a557bc2da4dcaaf761d30f4619e8e0d4a2f4e8f4" translate="yes" xml:space="preserve">
          <source>For complex-valued input, &lt;a href=&quot;numpy.arccos#numpy.arccos&quot;&gt;&lt;code&gt;arccos&lt;/code&gt;&lt;/a&gt; is a complex analytical function that has branch cuts &lt;code&gt;[1j, infj]&lt;/code&gt; and &lt;code&gt;[-1j, -infj]&lt;/code&gt; and is continuous from the right on the former and from the left on the latter.</source>
          <target state="translated">複素数値の入力の場合、&lt;a href=&quot;numpy.arccos#numpy.arccos&quot;&gt; &lt;code&gt;arccos&lt;/code&gt; &lt;/a&gt;は、分岐カット &lt;code&gt;[1j, infj]&lt;/code&gt; と &lt;code&gt;[-1j, -infj]&lt;/code&gt; を持つ複雑な分析関数であり、前者では右から、後者では左から連続です。</target>
        </trans-unit>
        <trans-unit id="3c5f909f0d078490d8b615f107e16ec3bc3a188b" translate="yes" xml:space="preserve">
          <source>For computing the ULP difference, this API does not differentiate between various representations of NAN (ULP difference between 0x7fc00000 and 0xffc00000 is zero).</source>
          <target state="translated">ULP差の計算において、本APIはNANの様々な表現を区別しない(0x7fc00000と0xffc00000の間のULP差はゼロ)。</target>
        </trans-unit>
        <trans-unit id="a35bd636b338ea1ca16af81a4f3e7ff1a1051ba2" translate="yes" xml:space="preserve">
          <source>For consistency we also pluralize &lt;em&gt;matrix&lt;/em&gt; as &lt;em&gt;matrices&lt;/em&gt;.</source>
          <target state="translated">一貫性のために、我々はまた、複数形&lt;em&gt;行列&lt;/em&gt;として&lt;em&gt;行列を&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="e81428e8e562739a6cb03d81d7a49ece97991e48" translate="yes" xml:space="preserve">
          <source>For consistency with histogram, an array of pre-computed bins is passed through unmodified:</source>
          <target state="translated">ヒストグラムとの整合性を保つために,事前に計算されたビンの配列が変更されていない状態で渡されます.</target>
        </trans-unit>
        <trans-unit id="67034429080fa2a52e171f0ea36b0dba67f26dbe" translate="yes" xml:space="preserve">
          <source>For convenience and backward compatibility, a single &lt;a href=&quot;legacy#numpy.random.RandomState&quot;&gt;&lt;code&gt;RandomState&lt;/code&gt;&lt;/a&gt; instance&amp;rsquo;s methods are imported into the numpy.random namespace, see &lt;a href=&quot;legacy#legacy&quot;&gt;Legacy Random Generation&lt;/a&gt; for the complete list.</source>
          <target state="translated">利便性と下位互換性のために、単一の&lt;a href=&quot;legacy#numpy.random.RandomState&quot;&gt; &lt;code&gt;RandomState&lt;/code&gt; &lt;/a&gt;インスタンスのメソッドがnumpy.random名前空間にインポートされます。完全なリストについては、&lt;a href=&quot;legacy#legacy&quot;&gt;レガシーランダム生成&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="eed4c585fafb6282979d170d7fc49312f2240470" translate="yes" xml:space="preserve">
          <source>For convenience and backward compatibility, a single &lt;a href=&quot;legacy#numpy.random.mtrand.RandomState&quot;&gt;&lt;code&gt;RandomState&lt;/code&gt;&lt;/a&gt; instance&amp;rsquo;s methods are imported into the numpy.random namespace, see &lt;a href=&quot;legacy#legacy&quot;&gt;Legacy Random Generation&lt;/a&gt; for the complete list.</source>
          <target state="translated">利便性と下位互換性のために、単一の&lt;a href=&quot;legacy#numpy.random.mtrand.RandomState&quot;&gt; &lt;code&gt;RandomState&lt;/code&gt; &lt;/a&gt;インスタンスのメソッドがnumpy.random名前空間にインポートされます。完全なリストについては、&lt;a href=&quot;legacy#legacy&quot;&gt;レガシーランダム生成&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c5ee4a5df11f7bfc54cc9624f04508c5055fa329" translate="yes" xml:space="preserve">
          <source>For convenience, dtype-like objects are allowed too:</source>
          <target state="translated">便宜上、dtype-likeオブジェクトも認められています。</target>
        </trans-unit>
        <trans-unit id="d4b499147b3255a0848424ec58891503672c9043" translate="yes" xml:space="preserve">
          <source>For convenience, viewing an ndarray as type &lt;a href=&quot;../reference/generated/numpy.recarray#numpy.recarray&quot;&gt;&lt;code&gt;numpy.recarray&lt;/code&gt;&lt;/a&gt; will automatically convert to &lt;a href=&quot;../reference/generated/numpy.record#numpy.record&quot;&gt;&lt;code&gt;numpy.record&lt;/code&gt;&lt;/a&gt; datatype, so the dtype can be left out of the view:</source>
          <target state="translated">便宜上、タイプとしてndarrayを見&lt;a href=&quot;../reference/generated/numpy.recarray#numpy.recarray&quot;&gt; &lt;code&gt;numpy.recarray&lt;/code&gt; は&lt;/a&gt;自動的に変換されます&lt;a href=&quot;../reference/generated/numpy.record#numpy.record&quot;&gt; &lt;code&gt;numpy.record&lt;/code&gt; &lt;/a&gt; DTYPEがビューから除外することができますので、データ型：</target>
        </trans-unit>
        <trans-unit id="5d0d8cd3e47bac7d4c34c5ffeca248e53bd90070" translate="yes" xml:space="preserve">
          <source>For convenience, viewing an ndarray as type &lt;code&gt;np.recarray&lt;/code&gt; will automatically convert to &lt;code&gt;np.record&lt;/code&gt; datatype, so the dtype can be left out of the view:</source>
          <target state="translated">便宜上、タイプとしてndarrayを見 &lt;code&gt;np.recarray&lt;/code&gt; は自動的に変換されます &lt;code&gt;np.record&lt;/code&gt; DTYPEがビューから除外することができますので、データ型：</target>
        </trans-unit>
        <trans-unit id="96d19661d614c330e3a9e7e16801d7b1d4abdea7" translate="yes" xml:space="preserve">
          <source>For data types that are always the same size (such as long), this holds the size of the data type. For flexible data types where different arrays can have a different elementsize, this should be 0.</source>
          <target state="translated">常に同じサイズのデータ型(longなど)の場合、これはデータ型のサイズを保持します。異なる配列が異なる要素サイズを持つことができる柔軟性のあるデータ型の場合、これは0でなければなりません。</target>
        </trans-unit>
        <trans-unit id="88871b72e212455bd0a3305f24c658a9086cd65b" translate="yes" xml:space="preserve">
          <source>For data types that describe sub-arrays:</source>
          <target state="translated">サブ配列を記述するデータ型の場合。</target>
        </trans-unit>
        <trans-unit id="665e908efd043172f3a61d4025a859ec2c83aba8" translate="yes" xml:space="preserve">
          <source>For definition of the DFT and conventions used.</source>
          <target state="translated">使用するDFTの定義や規約についてはこちらをご覧ください。</target>
        </trans-unit>
        <trans-unit id="ab3224da37c952c7ee78825693d56ab41a6cbfcf" translate="yes" xml:space="preserve">
          <source>For detailed info on testing, see &lt;a href=&quot;../dev/development_environment#testing-builds&quot;&gt;Testing builds&lt;/a&gt;</source>
          <target state="translated">テストの詳細については、&lt;a href=&quot;../dev/development_environment#testing-builds&quot;&gt;ビルドの&lt;/a&gt;テストを参照してください。</target>
        </trans-unit>
        <trans-unit id="ec4950c0b9d4572d83c373887e2dc02d9903faa1" translate="yes" xml:space="preserve">
          <source>For detailed info on testing, see &lt;a href=&quot;../dev/development_environment#testing-builds&quot;&gt;Testing builds&lt;/a&gt;.</source>
          <target state="translated">テストの詳細については、&lt;a href=&quot;../dev/development_environment#testing-builds&quot;&gt;ビルドの&lt;/a&gt;テストを参照してください。</target>
        </trans-unit>
        <trans-unit id="7a502ff1fedca44e300edcd6fc726294bd80e3a6" translate="yes" xml:space="preserve">
          <source>For details, see &lt;a href=&quot;reference/arrays.indexing#combining-advanced-and-basic-indexing&quot;&gt;Combining advanced and basic indexing&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;reference/arrays.indexing#combining-advanced-and-basic-indexing&quot;&gt;高度なインデックスと基本的なインデックスの組み合わせを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6701df0a65502fea701e9eaccf014eb1fd8330e1" translate="yes" xml:space="preserve">
          <source>For details, see &lt;a href=&quot;reference/generated/numpy.ndarray.strides&quot;&gt;numpy.ndarray.strides&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;reference/generated/numpy.ndarray.strides&quot;&gt;numpy.ndarray.stridesを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ee181d2e905ec980587d0f6f8baa5bee416075ef" translate="yes" xml:space="preserve">
          <source>For details, see &lt;a href=&quot;reference/maskedarray&quot;&gt;Masked arrays.&lt;/a&gt;</source>
          <target state="translated">詳細については、&lt;a href=&quot;reference/maskedarray&quot;&gt;マスクされた配列を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="fb5f8bb3afe673736236ecca5864cdc9f7fc37e1" translate="yes" xml:space="preserve">
          <source>For developers of NumPy: do not instantiate this at the module level. The initial calculation of these parameters is expensive and negatively impacts import times. These objects are cached, so calling &lt;code&gt;finfo()&lt;/code&gt; repeatedly inside your functions is not a problem.</source>
          <target state="translated">NumPyの開発者向け：モジュールレベルでこれをインスタンス化しないでください。これらのパラメータの最初の計算は費用がかかり、インポート時間に悪影響を及ぼします。これらのオブジェクトはキャッシュされるため、関数内で繰り返し &lt;code&gt;finfo()&lt;/code&gt; を呼び出しても問題はありません。</target>
        </trans-unit>
        <trans-unit id="83549bc3ff37e9fd5f340310941a033ae7a10e48" translate="yes" xml:space="preserve">
          <source>For development, you can set up an in-place build so that changes made to &lt;code&gt;.py&lt;/code&gt; files have effect without rebuild. First, run:</source>
          <target state="translated">開発の場合、 &lt;code&gt;.py&lt;/code&gt; ファイルに加えられた変更が再構築せずに有効になるように、インプレースビルドを設定できます。ファーストラン：</target>
        </trans-unit>
        <trans-unit id="c58f9c7b61fa3d8a2763dc4a797daee41cc03eb8" translate="yes" xml:space="preserve">
          <source>For each distinct core dimension, a set of &lt;code&gt;UFUNC_CORE_DIM*&lt;/code&gt; flags</source>
          <target state="translated">コアディメンションごとに、一連の &lt;code&gt;UFUNC_CORE_DIM*&lt;/code&gt; フラグ</target>
        </trans-unit>
        <trans-unit id="396b05c439db2438a9382de672b6fa8e95c31893" translate="yes" xml:space="preserve">
          <source>For each distinct core dimension, the possible &lt;a href=&quot;c-api.generalized-ufuncs#frozen&quot;&gt;frozen&lt;/a&gt; size if &lt;code&gt;UFUNC_CORE_DIM_SIZE_INFERRED&lt;/code&gt; is 0</source>
          <target state="translated">個別のコアディメンションごとに、 &lt;code&gt;UFUNC_CORE_DIM_SIZE_INFERRED&lt;/code&gt; が0の場合に考えられる&lt;a href=&quot;c-api.generalized-ufuncs#frozen&quot;&gt;フリーズ&lt;/a&gt;サイズ</target>
        </trans-unit>
        <trans-unit id="8b65708e0333bae4a0da4450d76b725e5999f9f5" translate="yes" xml:space="preserve">
          <source>For each distinct core dimension, the possible &lt;a href=&quot;generalized-ufuncs#frozen&quot;&gt;frozen&lt;/a&gt; size if &lt;a href=&quot;#c.UFUNC_CORE_DIM_SIZE_INFERRED&quot;&gt;&lt;code&gt;UFUNC_CORE_DIM_SIZE_INFERRED&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">個別のコアディメンションごとに、&lt;a href=&quot;#c.UFUNC_CORE_DIM_SIZE_INFERRED&quot;&gt; &lt;code&gt;UFUNC_CORE_DIM_SIZE_INFERRED&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;0&lt;/code&gt; の場合に可能な&lt;a href=&quot;generalized-ufuncs#frozen&quot;&gt;フリーズ&lt;/a&gt;サイズ</target>
        </trans-unit>
        <trans-unit id="69d98b78325a9c10a5d66de529392752b9338931" translate="yes" xml:space="preserve">
          <source>For each distinct core dimension, the possible &lt;a href=&quot;generalized-ufuncs#frozen&quot;&gt;frozen&lt;/a&gt; size if &lt;code&gt;UFUNC_CORE_DIM_SIZE_INFERRED&lt;/code&gt; is 0</source>
          <target state="translated">個別のコアディメンションごとに、 &lt;code&gt;UFUNC_CORE_DIM_SIZE_INFERRED&lt;/code&gt; が0の場合に可能な&lt;a href=&quot;generalized-ufuncs#frozen&quot;&gt;フリーズ&lt;/a&gt;サイズ</target>
        </trans-unit>
        <trans-unit id="eb98f2bacd6f2ddd2321b31d6e02518d57ef1a01" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;a&lt;/code&gt;, return a copy of the string where all characters occurring in the optional argument &lt;code&gt;deletechars&lt;/code&gt; are removed, and the remaining characters have been mapped through the given translation table.</source>
          <target state="translated">各要素のために、すべての文字は、オプションの引数で発生する文字列のコピーを返す &lt;code&gt;deletechars&lt;/code&gt; 除去し、残りの文字は、指定された変換テーブルを介してマッピングされています。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6fd82d55a1666ac371b70f835404bd2254f11112" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;a&lt;/code&gt;, return a copy of the string with all occurrences of substring &lt;code&gt;old&lt;/code&gt; replaced by &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="translated">内の各要素について、サブストリングのすべての出現で文字列のコピーを返し &lt;code&gt;old&lt;/code&gt; で置き換える &lt;code&gt;new&lt;/code&gt; 。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a0072392849c4a29d135980cb1732127fb7c8293" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;a&lt;/code&gt;, return a copy with the leading and trailing characters removed.</source>
          <target state="translated">内の各要素について、先頭と末尾の文字をコピーを返す削除。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ce017fa2090bd21769500e23616f51df45b2cf16" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;a&lt;/code&gt;, return a copy with the leading characters removed.</source>
          <target state="translated">内の各要素について、削除主人公でコピーを返します。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bcc8c5cf0a4ab8429da79ab635d524c5cd68a8b9" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;a&lt;/code&gt;, return a copy with the trailing characters removed.</source>
          <target state="translated">内の各要素について、削除末尾の文字をコピーを返します。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b48d2d67a82f24a073bc0fd48d1c7c812f1f1bea" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;a&lt;/code&gt;, return a list of the lines in the element, breaking at line boundaries.</source>
          <target state="translated">内の各要素について、ラインの境界で破り、要素内の行のリストを返します。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d96129628d06f13e5afb8f18fe53cee0a045c865" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;a&lt;/code&gt;, return a list of the words in the string, using &lt;code&gt;sep&lt;/code&gt; as the delimiter string.</source>
          <target state="translated">各要素のために、使用して、文字列内の単語のリストを返す &lt;code&gt;sep&lt;/code&gt; 区切り文字列として。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="53321b75d28930691a06237aff36907b43cca790" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;a&lt;/code&gt;, return the highest index in the string where substring &lt;code&gt;sub&lt;/code&gt; is found, such that &lt;code&gt;sub&lt;/code&gt; is contained within [&lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;].</source>
          <target state="translated">各要素のために、サブストリングの文字列で最も高いインデックスを返す &lt;code&gt;sub&lt;/code&gt; 発見され、その結果、 &lt;code&gt;sub&lt;/code&gt; 内に含まれる[ &lt;code&gt;start&lt;/code&gt; 、 &lt;code&gt;end&lt;/code&gt; ]。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e01fe9cacbc57867bf7b4b4ec2f69fefe5c4a037" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;a&lt;/code&gt;, split the element as the first occurrence of &lt;code&gt;sep&lt;/code&gt;, and return 3 strings containing the part before the separator, the separator itself, and the part after the separator. If the separator is not found, return 3 strings containing the string itself, followed by two empty strings.</source>
          <target state="translated">各要素のために、最初に出現として要素を分割 &lt;code&gt;sep&lt;/code&gt; 、およびセパレータ、セパレータ自体、およびセパレータの後の部分の前部分を含有する3つの文字列を返します。セパレータが見つからない場合は、文字列自体を含む3つの文字列を返し、その後に2つの空の文字列を返します。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7288d8c0ac4641f453c7b03f986690cbb92d91ab" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;a&lt;/code&gt;, split the element as the last occurrence of &lt;code&gt;sep&lt;/code&gt;, and return 3 strings containing the part before the separator, the separator itself, and the part after the separator. If the separator is not found, return 3 strings containing the string itself, followed by two empty strings.</source>
          <target state="translated">各要素のために、最後の発生等の素子を分割 &lt;code&gt;sep&lt;/code&gt; 、およびセパレータ、セパレータ自体、およびセパレータの後の部分の前部分を含有する3つの文字列を返します。セパレータが見つからない場合は、文字列自体を含む3つの文字列を返し、その後に2つの空の文字列を返します。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b2be6980f0e55faed04690c7996e6d49756d7224" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;self&lt;/code&gt;, return True if there are only decimal characters in the element.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; の各要素について、要素に小数点文字のみがある場合はTrueを返します。</target>
        </trans-unit>
        <trans-unit id="b59ff6bcceb7225ac9cadb07484ec0465abb9c2a" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;self&lt;/code&gt;, return True if there are only numeric characters in the element.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; の各要素について、要素に数字のみが含まれている場合はTrueを返します。</target>
        </trans-unit>
        <trans-unit id="9058afe727e5f02cb1c2a82daba2773477e47ab5" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;self&lt;/code&gt;, return a copy of the string where all characters occurring in the optional argument &lt;code&gt;deletechars&lt;/code&gt; are removed, and the remaining characters have been mapped through the given translation table.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; の各要素について、オプションの引数 &lt;code&gt;deletechars&lt;/code&gt; に出現するすべての文字が削除され、残りの文字が指定された変換テーブルを介してマップされた文字列のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="ef526a1c4bb908663ee9a7ed64b48415ce75d7c1" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;self&lt;/code&gt;, return a copy of the string with all occurrences of substring &lt;code&gt;old&lt;/code&gt; replaced by &lt;code&gt;new&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; 内の要素ごとに、すべてのサブストリング &lt;code&gt;old&lt;/code&gt; が &lt;code&gt;new&lt;/code&gt; に置き換えられた文字列のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="9e51c79c7e0159f28fc2312e8504acece61be2e0" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;self&lt;/code&gt;, return a copy of the string with uppercase characters converted to lowercase and vice versa.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; の各要素について、大文字を小文字に、またはその逆に変換した文字列のコピーを返します。</target>
        </trans-unit>
        <trans-unit id="563e89160eca98fee13c4e654d4638943cb7ede0" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;self&lt;/code&gt;, return a copy with the leading and trailing characters removed.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; の各要素について、先頭と末尾の文字を削除したコピーを返します。</target>
        </trans-unit>
        <trans-unit id="a46f8951acf83f33ee77a16371dbcf5fcea54c99" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;self&lt;/code&gt;, return a copy with the leading characters removed.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; の各要素について、先頭の文字を削除したコピーを返します。</target>
        </trans-unit>
        <trans-unit id="c528552cf6666391ba164c6c98e3136c037ac0d0" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;self&lt;/code&gt;, return a copy with the trailing characters removed.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; の各要素について、末尾の文字を削除したコピーを返します。</target>
        </trans-unit>
        <trans-unit id="f3c87a7be827172789e8630db0faa9be334e4260" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;self&lt;/code&gt;, return a list of the lines in the element, breaking at line boundaries.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; の各要素について、要素の行のリストを、行の境界で分割して返します。</target>
        </trans-unit>
        <trans-unit id="3ca0a78fe28a9ed4242353e9fcde6e632b8bffa9" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;self&lt;/code&gt;, return a list of the words in the string, using &lt;code&gt;sep&lt;/code&gt; as the delimiter string.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; の各要素について、区切り文字列として &lt;code&gt;sep&lt;/code&gt; を使用して、文字列内の単語のリストを返します。</target>
        </trans-unit>
        <trans-unit id="41b923cc154e9a0efebee6038be59b5d66a9e904" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;self&lt;/code&gt;, return a titlecased version of the string: words start with uppercase characters, all remaining cased characters are lowercase.</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; の各要素について、タイトルケースバージョンの文字列を返します。単語は大文字で始まり、残りのすべての文字は小文字です。</target>
        </trans-unit>
        <trans-unit id="a4fdbaa4039cefb583d1742ab7a44dc37da553da" translate="yes" xml:space="preserve">
          <source>For each element in &lt;code&gt;self&lt;/code&gt;, return the highest index in the string where substring &lt;code&gt;sub&lt;/code&gt; is found, such that &lt;code&gt;sub&lt;/code&gt; is contained within [&lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;].</source>
          <target state="translated">&lt;code&gt;self&lt;/code&gt; の各要素について、 &lt;code&gt;sub&lt;/code&gt; が[ &lt;code&gt;start&lt;/code&gt; 、 &lt;code&gt;end&lt;/code&gt; ]に含まれるように、substring &lt;code&gt;sub&lt;/code&gt; が見つかった文字列の最高のインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="66977f41b0aa64aabf235a79a75dcf6b6472f8b1" translate="yes" xml:space="preserve">
          <source>For each element, return True if there are only decimal characters in the element.</source>
          <target state="translated">各要素について、要素内に10進数文字しかない場合はTrueを返します。</target>
        </trans-unit>
        <trans-unit id="b1bf891f44f7ba1a69d9acfd1c67a586b04384f4" translate="yes" xml:space="preserve">
          <source>For each element, return True if there are only numeric characters in the element.</source>
          <target state="translated">各要素について、要素内に数字のみがある場合はTrueを返します。</target>
        </trans-unit>
        <trans-unit id="de1f34aa0e69ee353932bddbc1b5178f2575078b" translate="yes" xml:space="preserve">
          <source>For each element, return the lowest index in the string where substring &lt;code&gt;sub&lt;/code&gt; is found, such that &lt;code&gt;sub&lt;/code&gt; is contained in the range [&lt;code&gt;start&lt;/code&gt;, &lt;code&gt;end&lt;/code&gt;].</source>
          <target state="translated">各要素について、 &lt;code&gt;sub&lt;/code&gt; が範囲[ &lt;code&gt;start&lt;/code&gt; 、 &lt;code&gt;end&lt;/code&gt; ]に含まれるように、substring &lt;code&gt;sub&lt;/code&gt; が見つかった文字列の最小のインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="2d0516f761ea835ae249621609400fab8f420640" translate="yes" xml:space="preserve">
          <source>For each element, return the lowest index in the string where substring &lt;code&gt;sub&lt;/code&gt; is found.</source>
          <target state="translated">要素ごとに、部分文字列 &lt;code&gt;sub&lt;/code&gt; が見つかった文字列の最も低いインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="1a1da4bbdbc0f0985083d16493c494b0cdbca1db" translate="yes" xml:space="preserve">
          <source>For efficient memory alignment, &lt;code&gt;np.longdouble&lt;/code&gt; is usually stored padded with zero bits, either to 96 or 128 bits. Which is more efficient depends on hardware and development environment; typically on 32-bit systems they are padded to 96 bits, while on 64-bit systems they are typically padded to 128 bits. &lt;code&gt;np.longdouble&lt;/code&gt; is padded to the system default; &lt;code&gt;np.float96&lt;/code&gt; and &lt;code&gt;np.float128&lt;/code&gt; are provided for users who want specific padding. In spite of the names, &lt;code&gt;np.float96&lt;/code&gt; and &lt;code&gt;np.float128&lt;/code&gt; provide only as much precision as &lt;code&gt;np.longdouble&lt;/code&gt;, that is, 80 bits on most x86 machines and 64 bits in standard Windows builds.</source>
          <target state="translated">効率的なメモリアライメントのために、 &lt;code&gt;np.longdouble&lt;/code&gt; は通常、96ビットまたは128ビットのいずれかのゼロビットで埋められて格納されます。どちらがより効率的かは、ハードウェアと開発環境によって異なります。通常、32ビットシステムでは96ビットにパディングされますが、64ビットシステムでは通常128ビットにパディングされます。 &lt;code&gt;np.longdouble&lt;/code&gt; は、システムのデフォルトに埋め込まれます。 &lt;code&gt;np.float96&lt;/code&gt; および &lt;code&gt;np.float128&lt;/code&gt; は、特定のパディングが必要なユーザー向けに提供されています。名前にもかかわらず、 &lt;code&gt;np.float96&lt;/code&gt; と &lt;code&gt;np.float128&lt;/code&gt; は、np.longdoubleと同じくらいの精度、 &lt;code&gt;np.longdouble&lt;/code&gt; 、ほとんどのx86マシンでは80ビット、標準のWindowsビルドでは64ビットしか提供しません。</target>
        </trans-unit>
        <trans-unit id="42afabee0f54dc6a738be8285f1c8adb1a389c2c" translate="yes" xml:space="preserve">
          <source>For events with an expected separation</source>
          <target state="translated">予想される分離があるイベントの場合</target>
        </trans-unit>
        <trans-unit id="69f5ea3c2094e2e0d29f615dbd5f1be3db9e9635" translate="yes" xml:space="preserve">
          <source>For example &lt;a href=&quot;arrays.indexing#arrays-indexing&quot;&gt;slicing&lt;/a&gt; can produce views of the array:</source>
          <target state="translated">たとえば、&lt;a href=&quot;arrays.indexing#arrays-indexing&quot;&gt;スライス&lt;/a&gt;すると配列のビューが生成されます。</target>
        </trans-unit>
        <trans-unit id="6ba61c52342c8ca357f9b025f520786b1e36f952" translate="yes" xml:space="preserve">
          <source>For example suppose the source directory contains fun/foo.dat and fun/bar/car.dat:</source>
          <target state="translated">例えば、ソースディレクトリに fun/foo.dat と fun/bar/car.dat があるとします。</target>
        </trans-unit>
        <trans-unit id="1b62eba4a89119c28458eb16bfa619aca8aa8969" translate="yes" xml:space="preserve">
          <source>For example you might make a startup script that looks like this (Note: this is just an example, not a statement of &amp;ldquo;best practices&amp;rdquo;):</source>
          <target state="translated">たとえば、次のような起動スクリプトを作成できます（注：これは単なる例であり、「ベストプラクティス」の説明ではありません）。</target>
        </trans-unit>
        <trans-unit id="290de80d5fc36b01dd67ceeb09359da7bf8e0291" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;bit_generators/mt19937#numpy.random.MT19937&quot;&gt;&lt;code&gt;MT19937&lt;/code&gt;&lt;/a&gt; has a state consisting of 624 &lt;code&gt;uint32&lt;/code&gt; integers. A naive way to take a 32-bit integer seed would be to just set the last element of the state to the 32-bit seed and leave the rest 0s. This is a valid state for &lt;a href=&quot;bit_generators/mt19937#numpy.random.MT19937&quot;&gt;&lt;code&gt;MT19937&lt;/code&gt;&lt;/a&gt;, but not a good one. The Mersenne Twister algorithm &lt;a href=&quot;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html&quot;&gt;suffers if there are too many 0s&lt;/a&gt;. Similarly, two adjacent 32-bit integer seeds (i.e. &lt;code&gt;12345&lt;/code&gt; and &lt;code&gt;12346&lt;/code&gt;) would produce very similar streams.</source>
          <target state="translated">たとえば、&lt;a href=&quot;bit_generators/mt19937#numpy.random.MT19937&quot;&gt; &lt;code&gt;MT19937&lt;/code&gt; に&lt;/a&gt;は、624個の &lt;code&gt;uint32&lt;/code&gt; 整数で構成される状態があります。32ビット整数シードを取得する単純な方法は、状態の最後の要素を32ビットシードに設定し、残りを0のままにすることです。これは&lt;a href=&quot;bit_generators/mt19937#numpy.random.MT19937&quot;&gt; &lt;code&gt;MT19937&lt;/code&gt; の&lt;/a&gt;有効な状態ですが、適切な状態ではありません。&lt;a href=&quot;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html&quot;&gt;0が多すぎると、&lt;/a&gt;メルセンヌツイスターアルゴリズムが影響を受けます。同様に、2つの隣接する32ビット整数シード（つまり、 &lt;code&gt;12345&lt;/code&gt; と &lt;code&gt;12346&lt;/code&gt; ）は、非常に類似したストリームを生成します。</target>
        </trans-unit>
        <trans-unit id="c528a73750dc2b0ea8c9a4908a64744d7d47416a" translate="yes" xml:space="preserve">
          <source>For example, &lt;a href=&quot;bit_generators/mt19937#numpy.random.mt19937.MT19937&quot;&gt;&lt;code&gt;MT19937&lt;/code&gt;&lt;/a&gt; has a state consisting of 624 &lt;code&gt;uint32&lt;/code&gt; integers. A naive way to take a 32-bit integer seed would be to just set the last element of the state to the 32-bit seed and leave the rest 0s. This is a valid state for &lt;a href=&quot;bit_generators/mt19937#numpy.random.mt19937.MT19937&quot;&gt;&lt;code&gt;MT19937&lt;/code&gt;&lt;/a&gt;, but not a good one. The Mersenne Twister algorithm &lt;a href=&quot;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html&quot;&gt;suffers if there are too many 0s&lt;/a&gt;. Similarly, two adjacent 32-bit integer seeds (i.e. &lt;code&gt;12345&lt;/code&gt; and &lt;code&gt;12346&lt;/code&gt;) would produce very similar streams.</source>
          <target state="translated">たとえば、&lt;a href=&quot;bit_generators/mt19937#numpy.random.mt19937.MT19937&quot;&gt; &lt;code&gt;MT19937&lt;/code&gt; に&lt;/a&gt;は、624個の &lt;code&gt;uint32&lt;/code&gt; 整数で構成される状態があります。 32ビット整数シードを取得する素朴な方法は、状態の最後の要素を32ビットシードに設定し、残りを0のままにすることです。これは&lt;a href=&quot;bit_generators/mt19937#numpy.random.mt19937.MT19937&quot;&gt; &lt;code&gt;MT19937&lt;/code&gt; の&lt;/a&gt;有効な状態ですが、適切な状態ではありません。 Mersenne Twisterアルゴリズム&lt;a href=&quot;http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/MT2002/emt19937ar.html&quot;&gt;は、0が多すぎると影響を受け&lt;/a&gt;ます。同様に、2つの隣接する32ビット整数シード（つまり、 &lt;code&gt;12345&lt;/code&gt; および &lt;code&gt;12346&lt;/code&gt; ）は、非常に類似したストリームを生成します。</target>
        </trans-unit>
        <trans-unit id="c92ea12ee3f0aa3697d45f7df6d6af24fc7fd6b1" translate="yes" xml:space="preserve">
          <source>For example, F2PY generates from</source>
          <target state="translated">例えば、F2PYは</target>
        </trans-unit>
        <trans-unit id="30f8823abb19bf71600d2b51cdc69b652a8cdb6f" translate="yes" xml:space="preserve">
          <source>For example, I might be working on a computer with a little-endian CPU - such as an Intel Pentium, but I have loaded some data from a file written by a computer that is big-endian. Let&amp;rsquo;s say I have loaded 4 bytes from a file written by a Sun (big-endian) computer. I know that these 4 bytes represent two 16-bit integers. On a big-endian machine, a two-byte integer is stored with the Most Significant Byte (MSB) first, and then the Least Significant Byte (LSB). Thus the bytes are, in memory order:</source>
          <target state="translated">たとえば、Intel PentiumなどのリトルエンディアンCPUを搭載したコンピューターで作業している場合でも、ビッグエンディアンのコンピューターによって書き込まれたファイルからデータをロードしました。Sun（ビッグエンディアン）コンピューターによって書き込まれたファイルから4バイトをロードしたとしましょう。これらの4バイトは2つの16ビット整数を表すことを私は知っています。ビッグエンディアンマシンでは、2バイト整数が最初に最上位バイト（MSB）で格納され、次に最下位バイト（LSB）で格納されます。したがって、バイトはメモリ順に次のようになります。</target>
        </trans-unit>
        <trans-unit id="214075869a9c515ee07024b57bc4ea923a1819de" translate="yes" xml:space="preserve">
          <source>For example, a 2x2 array &lt;code&gt;A&lt;/code&gt; is Fortran-contiguous if its elements are stored in memory in the following order:</source>
          <target state="translated">たとえば、2x2配列 &lt;code&gt;A&lt;/code&gt; は、その要素が次の順序でメモリに格納されている場合、Fortranに隣接しています。</target>
        </trans-unit>
        <trans-unit id="e8f7cf41730b21d0b9a823684d400d6bc79bd0dc" translate="yes" xml:space="preserve">
          <source>For example, a function &lt;code&gt;myrange(n)&lt;/code&gt; generated from the following signature</source>
          <target state="translated">たとえば、次の署名から生成された関数 &lt;code&gt;myrange(n)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="32bc5e66732d4344162eb54fb50c625865f9eafb" translate="yes" xml:space="preserve">
          <source>For example, add.accumulate() is equivalent to np.cumsum().</source>
          <target state="translated">例えば、add.accumulate()はnp.cumsum()と同等です。</target>
        </trans-unit>
        <trans-unit id="9a8d227d278d37b6250f8f06b0e4ddba59ee6707" translate="yes" xml:space="preserve">
          <source>For example, add.reduce() is equivalent to sum().</source>
          <target state="translated">例えば、add.reduce()はsum()と同等です。</target>
        </trans-unit>
        <trans-unit id="10dea8dee68a389bd052fd52669dfbae04bf6a1e" translate="yes" xml:space="preserve">
          <source>For example, calculating 3*a, where a is an array of 32-bit floats, intuitively should result in a 32-bit float output. If the 3 is a 32-bit integer, the NumPy rules indicate it can&amp;rsquo;t convert losslessly into a 32-bit float, so a 64-bit float should be the result type. By examining the value of the constant, &amp;lsquo;3&amp;rsquo;, we see that it fits in an 8-bit integer, which can be cast losslessly into the 32-bit float.</source>
          <target state="translated">たとえば、3 * aを計算すると（aは32ビットの浮動小数点数の配列）、直感的には32ビットの浮動小数点数の出力になります。 3が32ビット整数の場合、NumPyルールはそれを無損失で32ビット浮動小数点に変換できないことを示しているため、64ビット浮動小数点が結果の型である必要があります。定数「3」の値を調べると、8ビット整数に収まることがわかります。これは、32ビット浮動小数点に無損失でキャストできます。</target>
        </trans-unit>
        <trans-unit id="e896d341feb39ad2e94789a2fa3a61f98c1ab6de" translate="yes" xml:space="preserve">
          <source>For example, consider a ufunc with signature &lt;code&gt;(i,j),(i)-&amp;gt;()&lt;/code&gt;. In this case, &lt;code&gt;args&lt;/code&gt; will contain three pointers to the data of the input/output arrays &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;. Furthermore, &lt;code&gt;dimensions&lt;/code&gt; will be &lt;code&gt;[N, I, J]&lt;/code&gt; to define the size of &lt;code&gt;N&lt;/code&gt; of the loop and the sizes &lt;code&gt;I&lt;/code&gt; and &lt;code&gt;J&lt;/code&gt; for the core dimensions &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt;. Finally, &lt;code&gt;steps&lt;/code&gt; will be &lt;code&gt;[a_N, b_N, c_N, a_i, a_j, b_i]&lt;/code&gt;, containing all necessary strides.</source>
          <target state="translated">たとえば、署名が &lt;code&gt;(i,j),(i)-&amp;gt;()&lt;/code&gt; ufuncを考えます。この場合、 &lt;code&gt;args&lt;/code&gt; には、入出力配列 &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;b&lt;/code&gt; 、 &lt;code&gt;c&lt;/code&gt; のデータへの3つのポインターが含まれます。さらに、 &lt;code&gt;dimensions&lt;/code&gt; は &lt;code&gt;[N, I, J]&lt;/code&gt; なり、ループの &lt;code&gt;N&lt;/code&gt; のサイズ &lt;code&gt;I&lt;/code&gt; コアの次元 &lt;code&gt;i&lt;/code&gt; および &lt;code&gt;j&lt;/code&gt; のサイズIおよび &lt;code&gt;J&lt;/code&gt; を定義します。最後に、 &lt;code&gt;steps&lt;/code&gt; は &lt;code&gt;[a_N, b_N, c_N, a_i, a_j, b_i]&lt;/code&gt; 、必要なストライドがすべて含まれます。</target>
        </trans-unit>
        <trans-unit id="dcfa362f844d8235742ab06beea7b0f26a111d9a" translate="yes" xml:space="preserve">
          <source>For example, consider the following Python code:</source>
          <target state="translated">例えば、以下のPythonのコードを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="fd012d2c6f8f118e1400f5580ac6116fd761a668" translate="yes" xml:space="preserve">
          <source>For example, for functions like &lt;a href=&quot;generated/numpy.lib.scimath.log#numpy.lib.scimath.log&quot;&gt;&lt;code&gt;log&lt;/code&gt;&lt;/a&gt; with branch cuts, the versions in this module provide the mathematically valid answers in the complex plane:</source>
          <target state="translated">たとえば、分岐カットのある&lt;a href=&quot;generated/numpy.lib.scimath.log#numpy.lib.scimath.log&quot;&gt; &lt;code&gt;log&lt;/code&gt; &lt;/a&gt;などの関数の場合、このモジュールのバージョンは、複素平面で数学的に有効な答えを提供します。</target>
        </trans-unit>
        <trans-unit id="65c761c5136870def0974489fd65a1f38ad92d78" translate="yes" xml:space="preserve">
          <source>For example, for functions like &lt;code&gt;log&lt;/code&gt; with branch cuts, the versions in this module provide the mathematically valid answers in the complex plane:</source>
          <target state="translated">たとえば、ブランチカット付きの &lt;code&gt;log&lt;/code&gt; ような関数の場合、このモジュールのバージョンは、複素平面で数学的に有効な答えを提供します。</target>
        </trans-unit>
        <trans-unit id="1ae012c1a0fdd5d83c39490663637fce0836fd8c" translate="yes" xml:space="preserve">
          <source>For example, here is a typical source generator function:</source>
          <target state="translated">例えば、ここに代表的なソース生成機能を示します。</target>
        </trans-unit>
        <trans-unit id="8b8fb16e550a85407367bfc6afd6fdca65ea7296" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;a&lt;/code&gt; is a 3 x &lt;code&gt;N&lt;/code&gt; array, an operation along axis 0 behaves as if its argument were an array containing slices of each row:</source>
          <target state="translated">たとえば、 &lt;code&gt;a&lt;/code&gt; が3 x &lt;code&gt;N&lt;/code&gt; 配列の場合、軸0に沿った操作は、その引数が各行のスライスを含む配列であるかのように動作します。</target>
        </trans-unit>
        <trans-unit id="5f16b11fb1616884a1f7f0284cf2a3ad3bd24f37" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;a&lt;/code&gt; is a 3x3 array:</source>
          <target state="translated">たとえば、 &lt;code&gt;a&lt;/code&gt; が3x3配列の場合：</target>
        </trans-unit>
        <trans-unit id="7e1eba6b832e945c1e4ddb165d50f426b3bfee26" translate="yes" xml:space="preserve">
          <source>For example, if an iterator was created with a single array as its input, and it was possible to rearrange all its axes and then collapse it into a single strided iteration, this would return a view that is a one-dimensional array.</source>
          <target state="translated">例えば、1つの配列を入力としてイテレータが作成され、そのイテレータの軸をすべて並べ替えて、1つのストライド反復に畳み込むことができた場合、これは1次元の配列であるビューを返すことになります。</target>
        </trans-unit>
        <trans-unit id="a7f0071af46179382458b34ec09b89b95e091389" translate="yes" xml:space="preserve">
          <source>For example, if we choose</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="2ff87dba0f6e77925be276fcef4c7c831b8ea504" translate="yes" xml:space="preserve">
          <source>For example, if we want to import only the first and the last columns, we can use &lt;code&gt;usecols=(0, -1)&lt;/code&gt;:</source>
          <target state="translated">たとえば、最初と最後の列のみをインポートする場合は、 &lt;code&gt;usecols=(0, -1)&lt;/code&gt; 使用できます。</target>
        </trans-unit>
        <trans-unit id="cd3d9bd14f229a7eb91aaf840c6ac1f84467537b" translate="yes" xml:space="preserve">
          <source>For example, if you create this array:</source>
          <target state="translated">例えば、このような配列を作成した場合。</target>
        </trans-unit>
        <trans-unit id="16f1b7e404a82b7d866b4be0ca94013f93955314" translate="yes" xml:space="preserve">
          <source>For example, if you create this function:</source>
          <target state="translated">例えば、このような関数を作成した場合。</target>
        </trans-unit>
        <trans-unit id="d4336a303ad0f6a2b1bcee09892c8545dcc3ff9f" translate="yes" xml:space="preserve">
          <source>For example, if you start with this array:</source>
          <target state="translated">例えば、このような配列から始めると</target>
        </trans-unit>
        <trans-unit id="302f8b44862add9c44dd094ba5ef88c857733962" translate="yes" xml:space="preserve">
          <source>For example, if you want your sub-class or duck-type to be compatible with numpy&amp;rsquo;s &lt;code&gt;sum&lt;/code&gt; function, the method signature for this object&amp;rsquo;s &lt;code&gt;sum&lt;/code&gt; method should be the following:</source>
          <target state="translated">たとえば、サブクラスまたはダックタイプをnumpyの &lt;code&gt;sum&lt;/code&gt; 関数と互換性があるようにする場合、このオブジェクトの &lt;code&gt;sum&lt;/code&gt; メソッドのメソッドシグネチャは次のようになります。</target>
        </trans-unit>
        <trans-unit id="77b454223ff8bed8a9b0c67509f246c5fba091e9" translate="yes" xml:space="preserve">
          <source>For example, on a (typical linux x64 gcc) system, the numpy &lt;code&gt;complex64&lt;/code&gt; datatype is implemented as &lt;code&gt;struct { float real, imag; }&lt;/code&gt;. This has &amp;ldquo;true&amp;rdquo; alignment of 4 and &amp;ldquo;uint&amp;rdquo; alignment of 8 (equal to the true alignment of &lt;code&gt;uint64&lt;/code&gt;).</source>
          <target state="translated">たとえば、（典型的なLinux x64 gcc）システムでは、numpy &lt;code&gt;complex64&lt;/code&gt; データ型は &lt;code&gt;struct { float real, imag; }&lt;/code&gt; として実装されます。}。これには、4の「true」アライメントと8の「uint」アライメントがあります（ &lt;code&gt;uint64&lt;/code&gt; の trueアライメントと同じ）。</target>
        </trans-unit>
        <trans-unit id="4ae14922ef64a97a2775a05d3077ba74da55d933" translate="yes" xml:space="preserve">
          <source>For example, the coordinates of a point in 3D space &lt;code&gt;[1,&amp;nbsp;2,&amp;nbsp;1]&lt;/code&gt; has one axis. That axis has 3 elements in it, so we say it has a length of 3. In the example pictured below, the array has 2 axes. The first axis has a length of 2, the second axis has a length of 3.</source>
          <target state="translated">たとえば、3D空間 &lt;code&gt;[1,&amp;nbsp;2,&amp;nbsp;1]&lt;/code&gt; 1、2、1 ]の点の座標には1つの軸があります。その軸には3つの要素があるため、長さは3と言います。下の図の例では、配列には2つの軸があります。最初の軸の長さは2で、2番目の軸の長さは3です。</target>
        </trans-unit>
        <trans-unit id="a172b13cb31313d38b209503a58e68588770858e" translate="yes" xml:space="preserve">
          <source>For example, this is the mean square error formula (a central formula used in supervised machine learning models that deal with regression):</source>
          <target state="translated">例えば、これは平均二乗誤差の式(回帰を扱う教師付き機械学習モデルで使われる中心的な式)です。</target>
        </trans-unit>
        <trans-unit id="0368fcdf7406da31a66eddfd11e72598360ada41" translate="yes" xml:space="preserve">
          <source>For example, using a 2-D boolean array of shape (2,3) with four True elements to select rows from a 3-D array of shape (2,3,5) results in a 2-D result of shape (4,5):</source>
          <target state="translated">例えば、4つのTrue要素を持つシェイプ(2,3)の2-Dブーリアン配列を使用して、シェイプ(2,3,5)の3-D配列から行を選択すると、シェイプ(4,5)の2-D結果が得られます。</target>
        </trans-unit>
        <trans-unit id="54b9b1c9d703092f2621c55a5b2cd1e1eddf85b5" translate="yes" xml:space="preserve">
          <source>For example, you can create an array from a regular Python list or tuple using the &lt;code&gt;array&lt;/code&gt; function. The type of the resulting array is deduced from the type of the elements in the sequences.</source>
          <target state="translated">たとえば、 &lt;code&gt;array&lt;/code&gt; 関数を使用して、通常のPythonリストまたはタプルから配列を作成できます。結果の配列のタイプは、シーケンス内の要素のタイプから推測されます。</target>
        </trans-unit>
        <trans-unit id="3fad2cb39c870a9de4b9e44ed99144a88481e6ec" translate="yes" xml:space="preserve">
          <source>For example, you can plot a 1D array like this:</source>
          <target state="translated">例えば、1次元配列をこのようにプロットすることができます。</target>
        </trans-unit>
        <trans-unit id="390c0f644804c3940d2b75b4dff6f12c284b252d" translate="yes" xml:space="preserve">
          <source>For example, you may have an array like this one:</source>
          <target state="translated">例えば、このような配列があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="d24b595e5b1e7c226dfee05c7297047fa32fe9c1" translate="yes" xml:space="preserve">
          <source>For example, you might well want to be able to shorten &lt;code&gt;git checkout&lt;/code&gt; to &lt;code&gt;git co&lt;/code&gt;. Or you may want to alias &lt;code&gt;git diff --color-words&lt;/code&gt; (which gives a nicely formatted output of the diff) to &lt;code&gt;git wdiff&lt;/code&gt;</source>
          <target state="translated">たとえば、 &lt;code&gt;git checkout&lt;/code&gt; を &lt;code&gt;git co&lt;/code&gt; に短縮できるようにしたい場合があります。それとも、エイリアスにしたいことがあり &lt;code&gt;git diff --color-words&lt;/code&gt; に（差分のきれいにフォーマットの出力が得られます） &lt;code&gt;git wdiff&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="8b82f8996b94b3076d2602f80a0b8a902b3a3586" translate="yes" xml:space="preserve">
          <source>For examples, see the various functions.</source>
          <target state="translated">例としては、各種機能を参照してください。</target>
        </trans-unit>
        <trans-unit id="13b2e9c534395e7c5f78b138c5b0b5d135b327e2" translate="yes" xml:space="preserve">
          <source>For finite values, isclose uses the following equation to test whether two floating point values are equivalent.</source>
          <target state="translated">有限値の場合、iscloseは以下の式を用いて、2つの浮動小数点値が等価かどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="e9eda33d9c06cab528c6194c742df4404b1ba711" translate="yes" xml:space="preserve">
          <source>For fixed format Fortran codes, &lt;code&gt;&amp;lt;comment char&amp;gt;&lt;/code&gt; must be at the first column of a file, of course. For free format Fortran codes, F2PY directives can appear anywhere in a file.</source>
          <target state="translated">もちろん、固定フォーマットのFortranコードの場合、 &lt;code&gt;&amp;lt;comment char&amp;gt;&lt;/code&gt; はファイルの最初の列になければなりません。フリーフォーマットのFortranコードの場合、F2PYディレクティブはファイル内のどこにでも表示できます。</target>
        </trans-unit>
        <trans-unit id="d62c0e35a11ece55b5adf0e9c849759b322d0ed9" translate="yes" xml:space="preserve">
          <source>For floating point arguments, the length of the result is &lt;code&gt;ceil((stop - start)/step)&lt;/code&gt;. Because of floating point overflow, this rule may result in the last element of &lt;code&gt;out&lt;/code&gt; being greater than &lt;code&gt;stop&lt;/code&gt;.</source>
          <target state="translated">浮動小数点引数の場合、結果の長さは &lt;code&gt;ceil((stop - start)/step)&lt;/code&gt; です。浮動小数点のオーバーフローのため、このルールでは、 &lt;code&gt;out&lt;/code&gt; の最後の要素が &lt;code&gt;stop&lt;/code&gt; よりも大きくなる場合があります。</target>
        </trans-unit>
        <trans-unit id="2e732260153a191a109ea04ea332dadcf16bcef7" translate="yes" xml:space="preserve">
          <source>For floating point arrays, inaccurate results may appear due to usual round-off and floating point comparison issues.</source>
          <target state="translated">浮動小数点配列の場合、通常の丸め込みや浮動小数点比較の問題により、不正確な結果となることがあります。</target>
        </trans-unit>
        <trans-unit id="e9208c67472507d398cb8a93a13859f9ce375088" translate="yes" xml:space="preserve">
          <source>For floating point numbers the numerical precision of sum (and &lt;code&gt;np.add.reduce&lt;/code&gt;) is in general limited by directly adding each number individually to the result causing rounding errors in every step. However, often numpy will use a numerically better approach (partial pairwise summation) leading to improved precision in many use-cases. This improved precision is always provided when no &lt;code&gt;axis&lt;/code&gt; is given. When &lt;code&gt;axis&lt;/code&gt; is given, it will depend on which axis is summed. Technically, to provide the best speed possible, the improved precision is only used when the summation is along the fast axis in memory. Note that the exact precision may vary depending on other parameters. In contrast to NumPy, Python&amp;rsquo;s &lt;code&gt;math.fsum&lt;/code&gt; function uses a slower but more precise approach to summation. Especially when summing a large number of lower precision floating point numbers, such as &lt;code&gt;float32&lt;/code&gt;, numerical errors can become significant. In such cases it can be advisable to use &lt;code&gt;dtype=&amp;rdquo;float64&amp;rdquo;&lt;/code&gt; to use a higher precision for the output.</source>
          <target state="translated">浮動小数点数の場合、合計（および &lt;code&gt;np.add.reduce&lt;/code&gt; ）の数値精度は一般に、各数値を結果に直接加算することによって制限され、すべてのステップで丸めエラーが発生します。ただし、多くの場合、numpyは数値的に優れたアプローチ（部分的なペアごとの合計）を使用して、多くのユースケースで精度を向上させます。この改善された精度は、 &lt;code&gt;axis&lt;/code&gt; が指定されていない場合に常に提供されます。 &lt;code&gt;axis&lt;/code&gt; が与えられたとき、それは合計される軸に依存します。技術的には、可能な限り最高の速度を提供するため、精度が向上するのは、合計がメモリ内の高速軸に沿っている場合のみです。正確な精度は他のパラメータによって異なる場合があることに注意してください。 NumPyとは対照的に、Pythonの &lt;code&gt;math.fsum&lt;/code&gt; 関数は、より低速ですがより正確な総和のアプローチを使用します。特に、 &lt;code&gt;float32&lt;/code&gt; など、精度の低い浮動小数点数を多数加算すると、数値エラーが大きくなる可能性があります。このような場合は、出力に高精度を使用するために &lt;code&gt;dtype=&amp;rdquo;float64&amp;rdquo;&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f41c623cdcb4a0e7f4eb2e6a140ca19a3b6cef7a" translate="yes" xml:space="preserve">
          <source>For floating-point input, the &lt;em&gt;std&lt;/em&gt; is computed using the same precision the input has. Depending on the input data, this can cause the results to be inaccurate, especially for float32 (see example below). Specifying a higher-accuracy accumulator using the &lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt; keyword can alleviate this issue.</source>
          <target state="translated">浮動小数点入力の場合、&lt;em&gt;std&lt;/em&gt;は入力と同じ精度を使用して計算されます。入力データによっては、特にfloat32の場合、結果が不正確になる可能性があります（以下の例を参照）。&lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt;キーワードを使用してより正確なアキュムレータを指定すると、この問題を軽減できます。</target>
        </trans-unit>
        <trans-unit id="ef01297e4ccbe941536586d94ab8ef1e22c230bf" translate="yes" xml:space="preserve">
          <source>For floating-point input, the variance is computed using the same precision the input has. Depending on the input data, this can cause the results to be inaccurate, especially for &lt;a href=&quot;../arrays.scalars#numpy.float32&quot;&gt;&lt;code&gt;float32&lt;/code&gt;&lt;/a&gt; (see example below). Specifying a higher-accuracy accumulator using the &lt;code&gt;dtype&lt;/code&gt; keyword can alleviate this issue.</source>
          <target state="translated">浮動小数点入力の場合、分散は入力と同じ精度を使用して計算されます。入力データによっては、特に&lt;a href=&quot;../arrays.scalars#numpy.float32&quot;&gt; &lt;code&gt;float32&lt;/code&gt; の&lt;/a&gt;場合、結果が不正確になる可能性があります（以下の例を参照）。 &lt;code&gt;dtype&lt;/code&gt; キーワードを使用して高精度のアキュムレータを指定すると、この問題を軽減できます。</target>
        </trans-unit>
        <trans-unit id="effdce45ed2fe7c4c7447e7c5d6ed579806ca2bd" translate="yes" xml:space="preserve">
          <source>For floating-point input, the variance is computed using the same precision the input has. Depending on the input data, this can cause the results to be inaccurate, especially for &lt;code&gt;float32&lt;/code&gt; (see example below). Specifying a higher-accuracy accumulator using the &lt;code&gt;dtype&lt;/code&gt; keyword can alleviate this issue.</source>
          <target state="translated">浮動小数点入力の場合、分散は入力と同じ精度を使用して計算されます。入力データによっては、特に &lt;code&gt;float32&lt;/code&gt; の場合、結果が不正確になる可能性があります（以下の例を参照）。 &lt;code&gt;dtype&lt;/code&gt; キーワードを使用してより正確なアキュムレータを指定すると、この問題を軽減できます。</target>
        </trans-unit>
        <trans-unit id="d9b2341f620f885d0f8ab294ce3abbf3b1a90c60" translate="yes" xml:space="preserve">
          <source>For full documentation, see &lt;a href=&quot;numpy.searchsorted#numpy.searchsorted&quot;&gt;&lt;code&gt;numpy.searchsorted&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">完全なドキュメントについては、&lt;a href=&quot;numpy.searchsorted#numpy.searchsorted&quot;&gt; &lt;code&gt;numpy.searchsorted&lt;/code&gt; を&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="8407df90b73fe86cd7253f98195431a6f813b267" translate="yes" xml:space="preserve">
          <source>For further details, consult the numpy reference documentation on array indexing.</source>
          <target state="translated">詳細については、配列のインデックスについての numpy リファレンスドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="77c711733607bfc1bae041078b86f27ea8766c29" translate="yes" xml:space="preserve">
          <source>For further information, see &lt;a href=&quot;numpy.memmap#numpy.memmap&quot;&gt;&lt;code&gt;memmap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;numpy.memmap#numpy.memmap&quot;&gt; &lt;code&gt;memmap&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e11475a277ae3113deb33326346ecfc8620fa4bf" translate="yes" xml:space="preserve">
          <source>For general resources for learning &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; see &lt;a href=&quot;git_resources#git-resources&quot;&gt;Additional Git Resources&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt;を学習するための一般的なリソースについては、&lt;a href=&quot;git_resources#git-resources&quot;&gt;追加のGitリソースを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8e32d40cffc64e1d0297c17e549d89391273d13d" translate="yes" xml:space="preserve">
          <source>For help in printing, the following strings are defined as the correct format specifier in printf and related commands.</source>
          <target state="translated">印刷に役立つように、printfや関連コマンドでは、以下の文字列が正しい書式指定子として定義されています。</target>
        </trans-unit>
        <trans-unit id="489d6f9ad36355f45e025471f49df88064ca87ee" translate="yes" xml:space="preserve">
          <source>For higher dimensional arrays summing a single axis can be done with ellipsis:</source>
          <target state="translated">高次元の配列の場合,1軸の和は楕円で行うことができます.</target>
        </trans-unit>
        <trans-unit id="6a424dcac51ca8b201228fd393c244dbeb8c5216" translate="yes" xml:space="preserve">
          <source>For i in &lt;code&gt;range(len(indices))&lt;/code&gt;, &lt;a href=&quot;#numpy.ufunc.reduceat&quot;&gt;&lt;code&gt;reduceat&lt;/code&gt;&lt;/a&gt; computes &lt;code&gt;ufunc.reduce(a[indices[i]:indices[i+1]])&lt;/code&gt;, which becomes the i-th generalized &amp;ldquo;row&amp;rdquo; parallel to &lt;code&gt;axis&lt;/code&gt; in the final result (i.e., in a 2-D array, for example, if &lt;code&gt;axis = 0&lt;/code&gt;, it becomes the i-th row, but if &lt;code&gt;axis = 1&lt;/code&gt;, it becomes the i-th column). There are three exceptions to this:</source>
          <target state="translated">&lt;code&gt;range(len(indices))&lt;/code&gt; の iに対して、&lt;a href=&quot;#numpy.ufunc.reduceat&quot;&gt; &lt;code&gt;reduceat&lt;/code&gt; は&lt;/a&gt; &lt;code&gt;ufunc.reduce(a[indices[i]:indices[i+1]])&lt;/code&gt; 計算し、最終結果の &lt;code&gt;axis&lt;/code&gt; に平行なi番目の一般化された「行」になります（つまり、2次元配列では、たとえば、 &lt;code&gt;axis = 0&lt;/code&gt; 場合はi番目の行になりますが、 &lt;code&gt;axis = 1&lt;/code&gt; 場合はi番目の列になります）。これには3つの例外があります。</target>
        </trans-unit>
        <trans-unit id="a335acbc4ceafdd98dc502fc47e116da880da129" translate="yes" xml:space="preserve">
          <source>For i in &lt;code&gt;range(len(indices))&lt;/code&gt;, &lt;a href=&quot;#numpy.ufunc.reduceat&quot;&gt;&lt;code&gt;reduceat&lt;/code&gt;&lt;/a&gt; computes &lt;code&gt;ufunc.reduce(array[indices[i]:indices[i+1]])&lt;/code&gt;, which becomes the i-th generalized &amp;ldquo;row&amp;rdquo; parallel to &lt;code&gt;axis&lt;/code&gt; in the final result (i.e., in a 2-D array, for example, if &lt;code&gt;axis = 0&lt;/code&gt;, it becomes the i-th row, but if &lt;code&gt;axis = 1&lt;/code&gt;, it becomes the i-th column). There are three exceptions to this:</source>
          <target state="translated">&lt;code&gt;range(len(indices))&lt;/code&gt; 内のiの場合、&lt;a href=&quot;#numpy.ufunc.reduceat&quot;&gt; &lt;code&gt;reduceat&lt;/code&gt; は&lt;/a&gt; &lt;code&gt;ufunc.reduce(array[indices[i]:indices[i+1]])&lt;/code&gt; 計算します。これは、最終結果の &lt;code&gt;axis&lt;/code&gt; に平行なi番目の一般化された「行」になります。 （つまり、2次元配列では、たとえば、 &lt;code&gt;axis = 0&lt;/code&gt; 場合はi番目の行になりますが、 &lt;code&gt;axis = 1&lt;/code&gt; 場合はi番目の列になります）。これには3つの例外があります。</target>
        </trans-unit>
        <trans-unit id="3e2d688963af310435591977ab9e45596586b894" translate="yes" xml:space="preserve">
          <source>For initializing an array &lt;code&gt;&amp;lt;array name&amp;gt;&lt;/code&gt;, F2PY generates a loop over all indices and dimensions that executes the following pseudo-statement:</source>
          <target state="translated">配列 &lt;code&gt;&amp;lt;array name&amp;gt;&lt;/code&gt; 初期化するために、F2PYは、次の疑似ステートメントを実行するすべてのインデックスと次元に対してループを生成します。</target>
        </trans-unit>
        <trans-unit id="05f651225304ab9158ee3f9e677f8c577d092edf" translate="yes" xml:space="preserve">
          <source>For input arrays that are smaller than the specified buffer size, copies are made of all non-contiguous, mis-aligned, or out-of- byteorder arrays to ensure that for small arrays, a single loop is used. Then, array iterators are created for all the input arrays and the resulting collection of iterators is broadcast to a single shape.</source>
          <target state="translated">指定されたバッファサイズよりも小さい入力配列に対しては,小さな配列に対しては 1 つのループが利用されることを保証するために,連続していない配列,位置ずれしている配列,バイトオーダー外の配列のコピーがすべて作成されます.その後,すべての入力配列に対して配列イテレータが作成され,その結果得られたイテレータのコレクションが単一の形状にブロードキャストされます.</target>
        </trans-unit>
        <trans-unit id="0c7b69e69466d27c81eb277802b5fd2ba93ef1f2" translate="yes" xml:space="preserve">
          <source>For instructions on building for source package, see &lt;a href=&quot;building&quot;&gt;Building from source&lt;/a&gt;. This information is useful mainly for advanced users.</source>
          <target state="translated">ソースパッケージのビルド方法については、参照&lt;a href=&quot;building&quot;&gt;ソースからのビルド&lt;/a&gt;。この情報は、主に上級ユーザーに役立ちます。</target>
        </trans-unit>
        <trans-unit id="37dbe6dc0691b61b379d0a2afb8134a45871395a" translate="yes" xml:space="preserve">
          <source>For integer arguments with absolute value larger than 1 the result is always zero because of the way Python handles integer division. For integer zero the result is an overflow.</source>
          <target state="translated">絶対値が1よりも大きい整数の引数の場合、Pythonは整数の除算を処理するため、結果は常にゼロになります。整数ゼロの場合、結果はオーバーフローとなります。</target>
        </trans-unit>
        <trans-unit id="117e2f99abde5ef34211f008976cf994cee261a9" translate="yes" xml:space="preserve">
          <source>For integer input the return values are floats.</source>
          <target state="translated">整数入力の場合、戻り値はfloatです。</target>
        </trans-unit>
        <trans-unit id="51f2302ae3afa42e90f16f1c35bbd2af61213570" translate="yes" xml:space="preserve">
          <source>For integer specifiers (eg. &lt;code&gt;d,i,o,x&lt;/code&gt;), the minimum number of digits.</source>
          <target state="translated">整数指定子（例： &lt;code&gt;d,i,o,x&lt;/code&gt; ）の場合、最小桁数。</target>
        </trans-unit>
        <trans-unit id="7401aba5507b33d4914d20070660b9faa95209c3" translate="yes" xml:space="preserve">
          <source>For integer types, exact equality is used, in the same way as &lt;a href=&quot;numpy.ma.masked_equal#numpy.ma.masked_equal&quot;&gt;&lt;code&gt;masked_equal&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">整数型の場合は、&lt;a href=&quot;numpy.ma.masked_equal#numpy.ma.masked_equal&quot;&gt; &lt;code&gt;masked_equal&lt;/code&gt; &lt;/a&gt;と同じように、完全等価が使用されます。</target>
        </trans-unit>
        <trans-unit id="1e54c6af26706ff283ff28256c72b54eb26fbc6b" translate="yes" xml:space="preserve">
          <source>For integers, the fill value will be different in general to the result of &lt;code&gt;masked_equal&lt;/code&gt;.</source>
          <target state="translated">整数の場合、塗りつぶしの値は、一般的に &lt;code&gt;masked_equal&lt;/code&gt; の結果とは異なります。</target>
        </trans-unit>
        <trans-unit id="7781ca86f57d2a847663467143f9629dfc0e85e1" translate="yes" xml:space="preserve">
          <source>For maintainers</source>
          <target state="translated">メンテナ向け</target>
        </trans-unit>
        <trans-unit id="975c748e73022344a91bd2ac6e7a0ad355e993bc" translate="yes" xml:space="preserve">
          <source>For many applications using a sliding window view can be convenient, but potentially very slow. Often specialized solutions exist, for example:</source>
          <target state="translated">多くのアプリケーションでは、スライド・ウィンドウ・ビューを使用すると便利ですが、非常に時間がかかる可能性があります。そのため、例えば以下のような専門的なソリューションが必要となります。</target>
        </trans-unit>
        <trans-unit id="7d049cee37488c14a6b5c65b1da77ab9e42f2daa" translate="yes" xml:space="preserve">
          <source>For matrices that are not square or that (for negative powers) cannot be inverted numerically.</source>
          <target state="translated">正方でない行列や(負のべき乗の場合は)数値的に反転できない行列の場合。</target>
        </trans-unit>
        <trans-unit id="582e5fdc5986730f5cfb2129f1c085cdd20f4ef0" translate="yes" xml:space="preserve">
          <source>For monotonically _increasing_ &lt;code&gt;bins&lt;/code&gt;, the following are equivalent:</source>
          <target state="translated">単調_increasing_について &lt;code&gt;bins&lt;/code&gt; 、以下は等価です。</target>
        </trans-unit>
        <trans-unit id="83fdf15871a7264e4f60e9ab78a977dea92e1a03" translate="yes" xml:space="preserve">
          <source>For more detailed documentation.</source>
          <target state="translated">より詳細なドキュメントについてはこちらをご覧ください。</target>
        </trans-unit>
        <trans-unit id="3e4c0a1cf85610ffab772dbfe49c64f181ea813e" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;numpy.linalg.lstsq#numpy.linalg.lstsq&quot;&gt;&lt;code&gt;linalg.lstsq&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;numpy.linalg.lstsq#numpy.linalg.lstsq&quot;&gt; &lt;code&gt;linalg.lstsq&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="be083226b3be888a488ff117c61816dc72280048" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;numpy.linalg.lstsq#numpy.linalg.lstsq&quot;&gt;&lt;code&gt;numpy.linalg.lstsq&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;numpy.linalg.lstsq#numpy.linalg.lstsq&quot;&gt; &lt;code&gt;numpy.linalg.lstsq&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="37ae37abcab4e25dbfe5d8b108d91993462a8cf5" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;numpy.random.mtrand.randomstate.set_state#numpy.random.mtrand.RandomState.set_state&quot;&gt;&lt;code&gt;set_state&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;numpy.random.mtrand.randomstate.set_state#numpy.random.mtrand.RandomState.set_state&quot;&gt; &lt;code&gt;set_state&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e9028a5b9ca3eb796d7014cf44685275c5239e16" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;numpy.random.randomstate.set_state#numpy.random.RandomState.set_state&quot;&gt;&lt;code&gt;set_state&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;numpy.random.randomstate.set_state#numpy.random.RandomState.set_state&quot;&gt; &lt;code&gt;set_state&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="51a8eedb7d395c27948e4922d0fabc18aafcf5ff" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;a href=&quot;numpy.random.set_state#numpy.random.set_state&quot;&gt;&lt;code&gt;set_state&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;numpy.random.set_state#numpy.random.set_state&quot;&gt; &lt;code&gt;set_state&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8f7f38b00189236c28757faab4aba491a5544afa" translate="yes" xml:space="preserve">
          <source>For more details, see &lt;code&gt;linalg.lstsq&lt;/code&gt;.</source>
          <target state="translated">詳細については、 &lt;code&gt;linalg.lstsq&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e8a8f4e50fa887cbbddc19a83dfdf91655b33341" translate="yes" xml:space="preserve">
          <source>For more extensive information, see &lt;a href=&quot;../reference/testing#testing-guidelines&quot;&gt;Testing Guidelines&lt;/a&gt;</source>
          <target state="translated">より詳細な情報については、&lt;a href=&quot;../reference/testing#testing-guidelines&quot;&gt;テストガイドラインを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="95cf6089ff82991425d6efdc0504169843591543" translate="yes" xml:space="preserve">
          <source>For more help on this function please see section 1.8 (Keyword Parameters for Extension Functions) of the Extending and Embedding tutorial in the Python documentation.</source>
          <target state="translated">この関数の詳細については、PythonドキュメントのExtending and Embeddingチュートリアルのセクション1.8 (Keyword Parameters for Extension Functions)を参照してください。</target>
        </trans-unit>
        <trans-unit id="61db67fed17b10d2110b06ec89aa13d261ade260" translate="yes" xml:space="preserve">
          <source>For more information on dictionaries, read the &lt;a href=&quot;https://docs.python.org/tutorial/&quot;&gt;Python tutorial&lt;/a&gt;.</source>
          <target state="translated">辞書の詳細については、&lt;a href=&quot;https://docs.python.org/tutorial/&quot;&gt;Pythonチュートリアルをお&lt;/a&gt;読みください。</target>
        </trans-unit>
        <trans-unit id="03f4a148b39366545cf97da19167eb00139c5efc" translate="yes" xml:space="preserve">
          <source>For more information on the qr factorization, see for example: &lt;a href=&quot;https://en.wikipedia.org/wiki/QR_factorization&quot;&gt;https://en.wikipedia.org/wiki/QR_factorization&lt;/a&gt;</source>
          <target state="translated">QR分解の詳細については、例を参照して&lt;a href=&quot;https://en.wikipedia.org/wiki/QR_factorization&quot;&gt;ください&lt;/a&gt;：https : //en.wikipedia.org/wiki/QR_factorization</target>
        </trans-unit>
        <trans-unit id="17921f717812e3320e8a7f42f4f17f79981316f9" translate="yes" xml:space="preserve">
          <source>For more information see:</source>
          <target state="translated">詳細はこちらをご覧ください。</target>
        </trans-unit>
        <trans-unit id="3985651be63157e0b3fd0f006d48347a4d4ad484" translate="yes" xml:space="preserve">
          <source>For more information, a way to suppress the warning, and an example of &lt;a href=&quot;#numpy.RankWarning&quot;&gt;&lt;code&gt;RankWarning&lt;/code&gt;&lt;/a&gt; being issued, see &lt;a href=&quot;numpy.polyfit#numpy.polyfit&quot;&gt;&lt;code&gt;polyfit&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">詳細、警告を抑制する方法、および発行される&lt;a href=&quot;#numpy.RankWarning&quot;&gt; &lt;code&gt;RankWarning&lt;/code&gt; の&lt;/a&gt;例については、&lt;a href=&quot;numpy.polyfit#numpy.polyfit&quot;&gt; &lt;code&gt;polyfit&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="8581f2666047bb23a92c8e690d1acad362013f23" translate="yes" xml:space="preserve">
          <source>For more information, read the section on lists in the &lt;a href=&quot;https://docs.python.org/tutorial/&quot;&gt;Python tutorial&lt;/a&gt;. For a mapping type (key-value), see &lt;em&gt;dictionary&lt;/em&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://docs.python.org/tutorial/&quot;&gt;Pythonチュートリアルの&lt;/a&gt;リストに関するセクションを参照してください。マッピングタイプ（キー値）については、&lt;em&gt;辞書を&lt;/em&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6c4cae020b6b04928ab8186f1d73c1c26eba4002" translate="yes" xml:space="preserve">
          <source>For more information, refer to the &lt;a href=&quot;../index#module-numpy&quot;&gt;&lt;code&gt;numpy&lt;/code&gt;&lt;/a&gt; module and examine the methods and attributes of an array.</source>
          <target state="translated">詳細については、&lt;a href=&quot;../index#module-numpy&quot;&gt; &lt;code&gt;numpy&lt;/code&gt; &lt;/a&gt;モジュールを参照して、配列のメソッドと属性を調べてください。</target>
        </trans-unit>
        <trans-unit id="d0fe83d89b7a0207c98cafeb4a0d87c2838e97b1" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://docs.python.org/3/extending/building.html&quot;&gt;Building C and C++ Extensions&lt;/a&gt; Python documentation for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://docs.python.org/3/extending/building.html&quot;&gt;BuildingCおよびC ++ ExtensionsPythonの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="fa1433baa3f08eec4628310de483f3180d604e64" translate="yes" xml:space="preserve">
          <source>For more information, see &lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-push.html&quot;&gt;git push&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://www.kernel.org/pub/software/scm/git/docs/git-push.html&quot;&gt;gitpushを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b974edc2834bd1e574341abd9ce885d0e7a2979b" translate="yes" xml:space="preserve">
          <source>For more information, see F2Py source code &lt;code&gt;numpy/f2py/capi_maps.py&lt;/code&gt;.</source>
          <target state="translated">詳細については、F2Pyソースコード &lt;code&gt;numpy/f2py/capi_maps.py&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="d8acef7e82b687b4dec2e9998b5824ee5ddcb0de" translate="yes" xml:space="preserve">
          <source>For more on tutorials, see the &lt;a href=&quot;https://github.com/numpy/numpy-tutorials/blob/master/tutorial_style.ipynb&quot;&gt;tutorial how-to&lt;/a&gt;.</source>
          <target state="translated">チュートリアルの詳細については、&lt;a href=&quot;https://github.com/numpy/numpy-tutorials/blob/master/tutorial_style.ipynb&quot;&gt;チュートリアルのハウツーを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e76406825a4b6cfa9648b9c913c853786d5a9103" translate="yes" xml:space="preserve">
          <source>For negative input elements, a complex value is returned (unlike &lt;a href=&quot;numpy.sqrt#numpy.sqrt&quot;&gt;&lt;code&gt;numpy.sqrt&lt;/code&gt;&lt;/a&gt; which returns NaN).</source>
          <target state="translated">負の入力要素の場合、複素数値が返されます（NaNを返す&lt;a href=&quot;numpy.sqrt#numpy.sqrt&quot;&gt; &lt;code&gt;numpy.sqrt&lt;/code&gt; &lt;/a&gt;とは異なります）。</target>
        </trans-unit>
        <trans-unit id="b32b573b8f00ce30b3419ec834d75448d214948d" translate="yes" xml:space="preserve">
          <source>For negative numbers, if width is not given, a minus sign is added to the front. If width is given, the two&amp;rsquo;s complement of the number is returned, with respect to that width.</source>
          <target state="translated">負の数の場合、幅を指定しないと、マイナス記号が前に追加されます。幅を指定すると、その幅に関して、数値の2の補数が返されます。</target>
        </trans-unit>
        <trans-unit id="5fc06ff1428a67551e7039c42cd5b569afbb759c" translate="yes" xml:space="preserve">
          <source>For non-Hermitian normal matrices the SciPy function &lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.schur.html#scipy.linalg.schur&quot;&gt;&lt;code&gt;scipy.linalg.schur&lt;/code&gt;&lt;/a&gt; is preferred because the matrix &lt;code&gt;v&lt;/code&gt; is guaranteed to be unitary, which is not the case when using &lt;a href=&quot;#numpy.linalg.eig&quot;&gt;&lt;code&gt;eig&lt;/code&gt;&lt;/a&gt;. The Schur factorization produces an upper triangular matrix rather than a diagonal matrix, but for normal matrices only the diagonal of the upper triangular matrix is needed, the rest is roundoff error.</source>
          <target state="translated">非エルミート正規行列の場合、行列 &lt;code&gt;v&lt;/code&gt; が単一であることが保証されているため、SciPy関数&lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.schur.html#scipy.linalg.schur&quot;&gt; &lt;code&gt;scipy.linalg.schur&lt;/code&gt; &lt;/a&gt;が推奨されます。これは、&lt;a href=&quot;#numpy.linalg.eig&quot;&gt; &lt;code&gt;eig&lt;/code&gt; &lt;/a&gt;を使用する場合には当てはまりません。Schur分解は、対角行列ではなく上三角行列を生成しますが、正規行列の場合、上三角行列の対角のみが必要であり、残りは丸め誤差です。</target>
        </trans-unit>
        <trans-unit id="e980d1d5cc881398767c8c741a7e8066463af6ac" translate="yes" xml:space="preserve">
          <source>For now, the only data formats accepted by NumPy are those also used by other Python scientific libraries like pandas, SciPy, or Matplotlib. We&amp;rsquo;re developing a package to accept more formats; contact us for details.</source>
          <target state="translated">現在のところ、NumPyで受け入れられるデータ形式は、pandas、SciPy、Matplotlibなどの他のPython科学ライブラリでも使用されているものだけです。より多くのフォーマットを受け入れるパッケージを開発しています。詳しくはお問い合わせください。</target>
        </trans-unit>
        <trans-unit id="1e6d9fefb02ae78e90327bf08c7741fd4d7aad3c" translate="yes" xml:space="preserve">
          <source>For one-dimensional arrays these notions coincide.</source>
          <target state="translated">一次元配列については,これらの概念は一致しています.</target>
        </trans-unit>
        <trans-unit id="6a2721282deb17b4500d92138a510cdb4754bcd3" translate="yes" xml:space="preserve">
          <source>For operations which are either not commutative or not associative, doing a reduction over multiple axes is not well-defined. The ufuncs do not currently raise an exception in this case, but will likely do so in the future.</source>
          <target state="translated">可換的ではない、あるいは連想的ではない演算では、複数の軸をまたいで還元を行うことは、十分に定義されていません。ufuncsは現在この場合に例外を発生させていませんが、将来的には例外を発生させることになるでしょう。</target>
        </trans-unit>
        <trans-unit id="cce08ac0d595dc1fc36977f113db0494cd013706" translate="yes" xml:space="preserve">
          <source>For other keyword-only arguments, see the &lt;a href=&quot;../ufuncs#ufuncs-kwargs&quot;&gt;ufunc docs&lt;/a&gt;.</source>
          <target state="translated">その他のキーワードのみの引数については、&lt;a href=&quot;../ufuncs#ufuncs-kwargs&quot;&gt;ufunc docsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="0c08ef249ec6e440d6a8f4e999cc7fb84e271c54" translate="yes" xml:space="preserve">
          <source>For our example, we&amp;rsquo;ll create a sum of squares function. To start, let&amp;rsquo;s implement this function in straightforward Python. We want to support an &amp;lsquo;axis&amp;rsquo; parameter similar to the numpy &lt;a href=&quot;generated/numpy.sum#numpy.sum&quot;&gt;&lt;code&gt;sum&lt;/code&gt;&lt;/a&gt; function, so we will need to construct a list for the &lt;code&gt;op_axes&lt;/code&gt; parameter. Here&amp;rsquo;s how this looks.</source>
          <target state="translated">この例では、二乗和関数を作成します。まず、この関数を単純なPythonで実装しましょう。numpy &lt;a href=&quot;generated/numpy.sum#numpy.sum&quot;&gt; &lt;code&gt;sum&lt;/code&gt; &lt;/a&gt;関数と同様の「axis」パラメーターをサポートしたいので、 &lt;code&gt;op_axes&lt;/code&gt; パラメーターのリストを作成する必要があります。これはどのように見えるかです。</target>
        </trans-unit>
        <trans-unit id="1bfec23fd3b5a8e4feecb9f5b43f562b252ee813" translate="yes" xml:space="preserve">
          <source>For paragraphs, indentation is significant and indicates indentation in the output. New paragraphs are marked with a blank line.</source>
          <target state="translated">段落の場合、インデントは重要で、出力のインデントを示します。新しい段落は空白行でマークされます。</target>
        </trans-unit>
        <trans-unit id="f8e34004cd49470f698985ea088603e79d6737af" translate="yes" xml:space="preserve">
          <source>For pickling.</source>
          <target state="translated">漬け込み用。</target>
        </trans-unit>
        <trans-unit id="45d056f2d6dc25af69ffd36f748681cb1b37bcb7" translate="yes" xml:space="preserve">
          <source>For positive integers &lt;code&gt;n&lt;/code&gt;, the power is computed by repeated matrix squarings and matrix multiplications. If &lt;code&gt;n == 0&lt;/code&gt;, the identity matrix of the same shape as M is returned. If &lt;code&gt;n &amp;lt; 0&lt;/code&gt;, the inverse is computed and then raised to the &lt;code&gt;abs(n)&lt;/code&gt;.</source>
          <target state="translated">正の整数 &lt;code&gt;n&lt;/code&gt; の場合、累乗は、行列の二乗と行列の乗算の繰り返しによって計算されます。 &lt;code&gt;n == 0&lt;/code&gt; 場合、Mと同じ形状の単位行列が返されます。場合 &lt;code&gt;n &amp;lt; 0&lt;/code&gt; 、逆数を計算した後に上昇させる &lt;code&gt;abs(n)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2868f608509a0fb880318bfa1ea537e24b697cca" translate="yes" xml:space="preserve">
          <source>For private use, NumPy also constructs a &lt;code&gt;config.h&lt;/code&gt; in the NumPy include directory, which is not exported by NumPy (that is a python extension which use the numpy C API will not see those symbols), to avoid namespace pollution.</source>
          <target state="translated">プライベート使用の場合、NumPyはまた、NumPyインクルードディレクトリに &lt;code&gt;config.h&lt;/code&gt; を構築します。これは、NumPyによってエクスポートされません（つまり、numpy C APIを使用するpython拡張機能はこれらのシンボルを認識しません）。これにより、名前空間の汚染を回避します。</target>
        </trans-unit>
        <trans-unit id="3cba0cef0ecc3bf15466cf0b613737ac43d7cf46" translate="yes" xml:space="preserve">
          <source>For random samples from</source>
          <target state="translated">からのランダムサンプルの場合</target>
        </trans-unit>
        <trans-unit id="b2439f993cba90b7273c04e2cb2a757ef0e179bf" translate="yes" xml:space="preserve">
          <source>For real, non-negative inputs this works just like &lt;a href=&quot;numpy.sqrt#numpy.sqrt&quot;&gt;&lt;code&gt;numpy.sqrt&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">実際の非負の入力の場合、これは&lt;a href=&quot;numpy.sqrt#numpy.sqrt&quot;&gt; &lt;code&gt;numpy.sqrt&lt;/code&gt; と&lt;/a&gt;同じように機能します。</target>
        </trans-unit>
        <trans-unit id="3b14ea0275a3817032fbdd7fbc1e7bdb06b2af67" translate="yes" xml:space="preserve">
          <source>For real-valued input data types, &lt;a href=&quot;#numpy.arccos&quot;&gt;&lt;code&gt;arccos&lt;/code&gt;&lt;/a&gt; always returns real output. For each value that cannot be expressed as a real number or infinity, it yields &lt;code&gt;nan&lt;/code&gt; and sets the &lt;code&gt;invalid&lt;/code&gt; floating point error flag.</source>
          <target state="translated">実数値の入力データ型の場合、&lt;a href=&quot;#numpy.arccos&quot;&gt; &lt;code&gt;arccos&lt;/code&gt; は&lt;/a&gt;常に実出力を返します。実数または無限大として表現できない値ごとに、 &lt;code&gt;nan&lt;/code&gt; が生成され、 &lt;code&gt;invalid&lt;/code&gt; 浮動小数点エラーフラグが設定されます。</target>
        </trans-unit>
        <trans-unit id="f985096374044eb3c8f423921e1ca43a25a0a64a" translate="yes" xml:space="preserve">
          <source>For real-valued input data types, &lt;a href=&quot;#numpy.arccosh&quot;&gt;&lt;code&gt;arccosh&lt;/code&gt;&lt;/a&gt; always returns real output. For each value that cannot be expressed as a real number or infinity, it yields &lt;code&gt;nan&lt;/code&gt; and sets the &lt;code&gt;invalid&lt;/code&gt; floating point error flag.</source>
          <target state="translated">実数値の入力データ型の場合、&lt;a href=&quot;#numpy.arccosh&quot;&gt; &lt;code&gt;arccosh&lt;/code&gt; は&lt;/a&gt;常に実出力を返します。実数または無限大として表現できない値ごとに、 &lt;code&gt;nan&lt;/code&gt; が生成され、 &lt;code&gt;invalid&lt;/code&gt; 浮動小数点エラーフラグが設定されます。</target>
        </trans-unit>
        <trans-unit id="1bd6dae91050b378f422d64d0fd3d06caee7dc76" translate="yes" xml:space="preserve">
          <source>For real-valued input data types, &lt;a href=&quot;#numpy.arcsinh&quot;&gt;&lt;code&gt;arcsinh&lt;/code&gt;&lt;/a&gt; always returns real output. For each value that cannot be expressed as a real number or infinity, it returns &lt;code&gt;nan&lt;/code&gt; and sets the &lt;code&gt;invalid&lt;/code&gt; floating point error flag.</source>
          <target state="translated">実数値の入力データ型の場合、&lt;a href=&quot;#numpy.arcsinh&quot;&gt; &lt;code&gt;arcsinh&lt;/code&gt; は&lt;/a&gt;常に実出力を返します。実数または無限大として表現できない値ごとに、 &lt;code&gt;nan&lt;/code&gt; を返し、 &lt;code&gt;invalid&lt;/code&gt; 浮動小数点エラーフラグを設定します。</target>
        </trans-unit>
        <trans-unit id="f1a3e2a79ac88302cd49ced01b5ae36cb593f786" translate="yes" xml:space="preserve">
          <source>For real-valued input data types, &lt;a href=&quot;#numpy.arctan&quot;&gt;&lt;code&gt;arctan&lt;/code&gt;&lt;/a&gt; always returns real output. For each value that cannot be expressed as a real number or infinity, it yields &lt;code&gt;nan&lt;/code&gt; and sets the &lt;code&gt;invalid&lt;/code&gt; floating point error flag.</source>
          <target state="translated">実数値の入力データ型の場合、&lt;a href=&quot;#numpy.arctan&quot;&gt; &lt;code&gt;arctan&lt;/code&gt; は&lt;/a&gt;常に実出力を返します。実数または無限大として表現できない値ごとに、 &lt;code&gt;nan&lt;/code&gt; が生成され、 &lt;code&gt;invalid&lt;/code&gt; 浮動小数点エラーフラグが設定されます。</target>
        </trans-unit>
        <trans-unit id="4e59a4a7e10620a1dcf06247438f5e136a0933eb" translate="yes" xml:space="preserve">
          <source>For real-valued input data types, &lt;a href=&quot;#numpy.arctanh&quot;&gt;&lt;code&gt;arctanh&lt;/code&gt;&lt;/a&gt; always returns real output. For each value that cannot be expressed as a real number or infinity, it yields &lt;code&gt;nan&lt;/code&gt; and sets the &lt;code&gt;invalid&lt;/code&gt; floating point error flag.</source>
          <target state="translated">実数値の入力データ型の場合、&lt;a href=&quot;#numpy.arctanh&quot;&gt; &lt;code&gt;arctanh&lt;/code&gt; は&lt;/a&gt;常に実出力を返します。実数または無限大として表現できない値ごとに、 &lt;code&gt;nan&lt;/code&gt; が生成され、 &lt;code&gt;invalid&lt;/code&gt; 浮動小数点エラーフラグが設定されます。</target>
        </trans-unit>
        <trans-unit id="00463e3d9bf72a8660310a707c972e6c6b2f2a87" translate="yes" xml:space="preserve">
          <source>For real-valued input data types, &lt;a href=&quot;#numpy.log&quot;&gt;&lt;code&gt;log&lt;/code&gt;&lt;/a&gt; always returns real output. For each value that cannot be expressed as a real number or infinity, it yields &lt;code&gt;nan&lt;/code&gt; and sets the &lt;code&gt;invalid&lt;/code&gt; floating point error flag.</source>
          <target state="translated">実数値の入力データ型の場合、&lt;a href=&quot;#numpy.log&quot;&gt; &lt;code&gt;log&lt;/code&gt; は&lt;/a&gt;常に実出力を返します。実数または無限大として表現できない値ごとに、 &lt;code&gt;nan&lt;/code&gt; が生成され、 &lt;code&gt;invalid&lt;/code&gt; 浮動小数点エラーフラグが設定されます。</target>
        </trans-unit>
        <trans-unit id="1dd401d005377ef79add082427bec36bd76d7d40" translate="yes" xml:space="preserve">
          <source>For real-valued input data types, &lt;a href=&quot;#numpy.log10&quot;&gt;&lt;code&gt;log10&lt;/code&gt;&lt;/a&gt; always returns real output. For each value that cannot be expressed as a real number or infinity, it yields &lt;code&gt;nan&lt;/code&gt; and sets the &lt;code&gt;invalid&lt;/code&gt; floating point error flag.</source>
          <target state="translated">実数値の入力データ型の場合、&lt;a href=&quot;#numpy.log10&quot;&gt; &lt;code&gt;log10&lt;/code&gt; は&lt;/a&gt;常に実出力を返します。実数または無限大として表現できない値ごとに、 &lt;code&gt;nan&lt;/code&gt; が生成され、 &lt;code&gt;invalid&lt;/code&gt; 浮動小数点エラーフラグが設定されます。</target>
        </trans-unit>
        <trans-unit id="18c562bcbaf668e2b82c801663121e7d15eaaa37" translate="yes" xml:space="preserve">
          <source>For real-valued input data types, &lt;a href=&quot;#numpy.log1p&quot;&gt;&lt;code&gt;log1p&lt;/code&gt;&lt;/a&gt; always returns real output. For each value that cannot be expressed as a real number or infinity, it yields &lt;code&gt;nan&lt;/code&gt; and sets the &lt;code&gt;invalid&lt;/code&gt; floating point error flag.</source>
          <target state="translated">実数値の入力データ型の場合、&lt;a href=&quot;#numpy.log1p&quot;&gt; &lt;code&gt;log1p&lt;/code&gt; は&lt;/a&gt;常に実出力を返します。実数または無限大として表現できない値ごとに、 &lt;code&gt;nan&lt;/code&gt; が生成され、 &lt;code&gt;invalid&lt;/code&gt; 浮動小数点エラーフラグが設定されます。</target>
        </trans-unit>
        <trans-unit id="cb65926ba3df7c570cfbf88879b3b9d563294100" translate="yes" xml:space="preserve">
          <source>For real-valued input data types, &lt;a href=&quot;#numpy.log2&quot;&gt;&lt;code&gt;log2&lt;/code&gt;&lt;/a&gt; always returns real output. For each value that cannot be expressed as a real number or infinity, it yields &lt;code&gt;nan&lt;/code&gt; and sets the &lt;code&gt;invalid&lt;/code&gt; floating point error flag.</source>
          <target state="translated">実数値の入力データ型の場合、&lt;a href=&quot;#numpy.log2&quot;&gt; &lt;code&gt;log2&lt;/code&gt; は&lt;/a&gt;常に実出力を返します。実数または無限大として表現できない値ごとに、 &lt;code&gt;nan&lt;/code&gt; が生成され、 &lt;code&gt;invalid&lt;/code&gt; 浮動小数点エラーフラグが設定されます。</target>
        </trans-unit>
        <trans-unit id="5a691d6f039d37de2f424c2292fd24a2e8849ab5" translate="yes" xml:space="preserve">
          <source>For real-valued input data types, &lt;em&gt;arcsin&lt;/em&gt; always returns real output. For each value that cannot be expressed as a real number or infinity, it yields &lt;code&gt;nan&lt;/code&gt; and sets the &lt;code&gt;invalid&lt;/code&gt; floating point error flag.</source>
          <target state="translated">実数値の入力データ型の場合、&lt;em&gt;arcsinは&lt;/em&gt;常に実出力を返します。実数または無限大として表現できない値ごとに、 &lt;code&gt;nan&lt;/code&gt; が生成され、 &lt;code&gt;invalid&lt;/code&gt; 浮動小数点エラーフラグが設定されます。</target>
        </trans-unit>
        <trans-unit id="ac8dda629e47802177efe000a2d093f5e016a0cb" translate="yes" xml:space="preserve">
          <source>For real-valued input, &lt;a href=&quot;#numpy.log1p&quot;&gt;&lt;code&gt;log1p&lt;/code&gt;&lt;/a&gt; is accurate also for &lt;code&gt;x&lt;/code&gt; so small that &lt;code&gt;1 + x == 1&lt;/code&gt; in floating-point accuracy.</source>
          <target state="translated">実数値の入力の場合、&lt;a href=&quot;#numpy.log1p&quot;&gt; &lt;code&gt;log1p&lt;/code&gt; &lt;/a&gt;は、浮動小数点の精度で &lt;code&gt;1 + x == 1&lt;/code&gt; となるほど小さい &lt;code&gt;x&lt;/code&gt; についても正確です。</target>
        </trans-unit>
        <trans-unit id="8718e777159adb99e6030aa86f73aaa6419d14ea" translate="yes" xml:space="preserve">
          <source>For repeatability and readability, the dictionary keys are sorted in alphabetic order. This is for convenience only. A writer SHOULD implement this if possible. A reader MUST NOT depend on this.</source>
          <target state="translated">再現性と可読性のために、辞書キーはアルファベット順に並べ替えています。これは便宜上のものである。ライターは可能であればこれを実装すべきである[SHOULD]。読者はこれに依存してはならない[MUST NOT]。</target>
        </trans-unit>
        <trans-unit id="6bd239911d468099089301c7ec88d5d1667469b6" translate="yes" xml:space="preserve">
          <source>For reshape, resize, and transpose, the single tuple argument may be replaced with &lt;code&gt;n&lt;/code&gt; integers which will be interpreted as an n-tuple.</source>
          <target state="translated">形状変更、サイズ変更、および転置の場合、単一のタプル引数は、nタプルとして解釈される &lt;code&gt;n&lt;/code&gt; 整数に置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="6fe957d6ccb5cf28dddb483265ed8d862961930a" translate="yes" xml:space="preserve">
          <source>For scalar &lt;code&gt;a&lt;/code&gt;, returns the data type with the smallest size and smallest scalar kind which can hold its value.</source>
          <target state="translated">スカラー &lt;code&gt;a&lt;/code&gt; の場合、その値を保持できる最小のサイズと最小のスカラーの種類を持つデータ型を返します。</target>
        </trans-unit>
        <trans-unit id="22863dbfbfce9a1b2c0c06d8e441eed6ee432e4b" translate="yes" xml:space="preserve">
          <source>For scalar &lt;code&gt;a&lt;/code&gt;, returns the data type with the smallest size and smallest scalar kind which can hold its value. For non-scalar array &lt;code&gt;a&lt;/code&gt;, returns the vector&amp;rsquo;s dtype unmodified.</source>
          <target state="translated">スカラー &lt;code&gt;a&lt;/code&gt; の場合、その値を保持できる最小のサイズと最小のスカラーの種類を持つデータ型を返します。非スカラー配列 &lt;code&gt;a&lt;/code&gt; の場合、ベクターのdtypeを変更せずに返します。</target>
        </trans-unit>
        <trans-unit id="5642e4133974cc82494c6e2e1a04d4f6b4435c53" translate="yes" xml:space="preserve">
          <source>For several methods, an optional &lt;em&gt;out&lt;/em&gt; argument can also be provided and the result will be placed into the output array given. The &lt;em&gt;out&lt;/em&gt; argument must be an &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; and have the same number of elements. It can have a different data type in which case casting will be performed.</source>
          <target state="translated">いくつかのメソッドでは、オプションの&lt;em&gt;out&lt;/em&gt;引数も指定でき、結果は指定された出力配列に配置されます。&lt;em&gt;うちの&lt;/em&gt;引数がなければなりません&lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; &lt;/a&gt;と同じ数の要素を持っています。キャストが実行される場合、異なるデータ型を持つことができます。</target>
        </trans-unit>
        <trans-unit id="b0753b0fcbeca94ce7630240e047138c854a65dd" translate="yes" xml:space="preserve">
          <source>For signed integer inputs, the two&amp;rsquo;s complement is returned. In a two&amp;rsquo;s-complement system negative numbers are represented by the two&amp;rsquo;s complement of the absolute value. This is the most common method of representing signed integers on computers &lt;a href=&quot;#rde927b304c4f-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;. A N-bit two&amp;rsquo;s-complement system can represent every integer in the range</source>
          <target state="translated">符号付き整数入力の場合、2の補数が返されます。2の補数システムでは、負の数は絶対値の2の補数で表されます。これは、コンピューターで符号付き整数を表す最も一般的な方法です&lt;a href=&quot;#rde927b304c4f-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;。Nビットの2の補数システムは、範囲内のすべての整数を表すことができます</target>
        </trans-unit>
        <trans-unit id="8a7f873acfba66a72d1ce69253d776c71ca10e17" translate="yes" xml:space="preserve">
          <source>For simplicity we give a ufunc for a single dtype, the &amp;lsquo;f8&amp;rsquo; double. As in the previous section, we first give the .c file and then the setup.py file used to create the module containing the ufunc.</source>
          <target state="translated">簡単にするために、単一のdtypeにufunc、「f8」doubleを指定します。前のセクションと同様に、最初に.cファイルを指定し、次にufuncを含むモジュールの作成に使用するsetup.pyファイルを指定します。</target>
        </trans-unit>
        <trans-unit id="1790f111eccdfcb9badd8e72bbfbae78adf5ee18" translate="yes" xml:space="preserve">
          <source>For standard library functions:</source>
          <target state="translated">標準的なライブラリ関数の場合。</target>
        </trans-unit>
        <trans-unit id="e58c1a1b97b83acb57ac2ac307ed0d7c16b3baf7" translate="yes" xml:space="preserve">
          <source>For structured arrays, all fields are combined, with masked values ignored. The result is masked if all fields were masked, with self and other considered equal only if both were fully masked.</source>
          <target state="translated">構造化された配列の場合、すべてのフィールドが結合され、マスクされた値は無視されます。すべてのフィールドがマスクされている場合、結果はマスクされ、selfとotherは両方が完全にマスクされている場合にのみ等しいとみなされます。</target>
        </trans-unit>
        <trans-unit id="60753f45a63d90af610aa65f98fdd4ce690bf30a" translate="yes" xml:space="preserve">
          <source>For structured datatypes with no fields this function now returns False.</source>
          <target state="translated">フィールドを持たない構造化データ型の場合、この関数は False を返すようになりました。</target>
        </trans-unit>
        <trans-unit id="54b403ec15e745ce9b0d408a4253b0a3db036c37" translate="yes" xml:space="preserve">
          <source>For structured types, a structured scalar is returned, with each field the default fill value for its type.</source>
          <target state="translated">構造化された型の場合は、構造化されたスカラが返され、各フィールドはその型のデフォルトの塗りつぶし値となります。</target>
        </trans-unit>
        <trans-unit id="7c0b7d9c35a991bbf7b4be3304607a91761fd2e6" translate="yes" xml:space="preserve">
          <source>For subarray types, the fill value is an array of the same size containing the default scalar fill value.</source>
          <target state="translated">部分配列型の場合、塗りつぶし値はデフォルトのスカラー塗りつぶし値を含む同じサイズの配列となります。</target>
        </trans-unit>
        <trans-unit id="fa1668cc4f1ad2127afa574513a965e4f8de0bd1" translate="yes" xml:space="preserve">
          <source>For tall matrices in NumPy version up to 1.6.2, the diagonal &amp;ldquo;wrapped&amp;rdquo; after N columns. You can have this behavior with this option. This affects only tall matrices.</source>
          <target state="translated">1.6.2までのNumPyバージョンの背の高い行列の場合、N列の後に対角線が「ラップ」されます。このオプションでこの動作をさせることができます。これは背の高い行列のみに影響します。</target>
        </trans-unit>
        <trans-unit id="15797574f39fa9a94e6a6ba0f1322211577809c1" translate="yes" xml:space="preserve">
          <source>For tests with a result that is random or platform-dependent, mark the output as such:</source>
          <target state="translated">ランダムな結果やプラットフォームに依存するテストの場合は、そのような出力をマークしてください。</target>
        </trans-unit>
        <trans-unit id="571561584fb9de04ee089fbe39a5ff6d6bc01c7a" translate="yes" xml:space="preserve">
          <source>For the explicit constructor call, our subclass will need to create a new ndarray instance of its own class. In practice this means that we, the authors of the code, will need to make a call to &lt;code&gt;ndarray.__new__(MySubClass,...)&lt;/code&gt;, a class-hierarchy prepared call to &lt;code&gt;super(MySubClass, cls).__new__(cls, ...)&lt;/code&gt;, or do view casting of an existing array (see below)</source>
          <target state="translated">明示的なコンストラクター呼び出しの場合、サブクラスは独自のクラスの新しいndarrayインスタンスを作成する必要があります。実際には、これは、コードの作成者である &lt;code&gt;ndarray.__new__(MySubClass,...)&lt;/code&gt; 呼び出す必要があることを意味します。これは、クラス階層で準備された &lt;code&gt;super(MySubClass, cls).__new__(cls, ...)&lt;/code&gt; 、または既存の配列のビューキャストを実行します（以下を参照）</target>
        </trans-unit>
        <trans-unit id="18e3d7bba1f8f57e3e3d0698a1673d2f7dbd0218" translate="yes" xml:space="preserve">
          <source>For the first run, we threw 3 times 1, 4 times 2, etc. For the second, we threw 2 times 1, 4 times 2, etc.</source>
          <target state="translated">1本目は3回1、4回2などを投げました。2本目は2回1、4回2などを投げました。</target>
        </trans-unit>
        <trans-unit id="72f9e5e8e38fa061436e99d12c2a915135e47ac9" translate="yes" xml:space="preserve">
          <source>For the following methods there are also corresponding functions in &lt;a href=&quot;index#module-numpy&quot;&gt;&lt;code&gt;numpy&lt;/code&gt;&lt;/a&gt;: &lt;a href=&quot;generated/numpy.all#numpy.all&quot;&gt;&lt;code&gt;all&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.any#numpy.any&quot;&gt;&lt;code&gt;any&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.argmax#numpy.argmax&quot;&gt;&lt;code&gt;argmax&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.argmin#numpy.argmin&quot;&gt;&lt;code&gt;argmin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.argpartition#numpy.argpartition&quot;&gt;&lt;code&gt;argpartition&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.argsort#numpy.argsort&quot;&gt;&lt;code&gt;argsort&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.choose#numpy.choose&quot;&gt;&lt;code&gt;choose&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.clip#numpy.clip&quot;&gt;&lt;code&gt;clip&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.compress#numpy.compress&quot;&gt;&lt;code&gt;compress&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.copy#numpy.copy&quot;&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.cumprod#numpy.cumprod&quot;&gt;&lt;code&gt;cumprod&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.cumsum#numpy.cumsum&quot;&gt;&lt;code&gt;cumsum&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.diagonal#numpy.diagonal&quot;&gt;&lt;code&gt;diagonal&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.imag#numpy.imag&quot;&gt;&lt;code&gt;imag&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.amax#numpy.amax&quot;&gt;&lt;code&gt;max&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.mean#numpy.mean&quot;&gt;&lt;code&gt;mean&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.amin#numpy.amin&quot;&gt;&lt;code&gt;min&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.nonzero#numpy.nonzero&quot;&gt;&lt;code&gt;nonzero&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.partition#numpy.partition&quot;&gt;&lt;code&gt;partition&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.prod#numpy.prod&quot;&gt;&lt;code&gt;prod&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.ptp#numpy.ptp&quot;&gt;&lt;code&gt;ptp&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.put#numpy.put&quot;&gt;&lt;code&gt;put&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.ravel#numpy.ravel&quot;&gt;&lt;code&gt;ravel&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.real#numpy.real&quot;&gt;&lt;code&gt;real&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.repeat#numpy.repeat&quot;&gt;&lt;code&gt;repeat&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.reshape#numpy.reshape&quot;&gt;&lt;code&gt;reshape&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.around#numpy.around&quot;&gt;&lt;code&gt;round&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.searchsorted#numpy.searchsorted&quot;&gt;&lt;code&gt;searchsorted&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.sort#numpy.sort&quot;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.squeeze#numpy.squeeze&quot;&gt;&lt;code&gt;squeeze&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.std#numpy.std&quot;&gt;&lt;code&gt;std&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.sum#numpy.sum&quot;&gt;&lt;code&gt;sum&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.swapaxes#numpy.swapaxes&quot;&gt;&lt;code&gt;swapaxes&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.take#numpy.take&quot;&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.trace#numpy.trace&quot;&gt;&lt;code&gt;trace&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.transpose#numpy.transpose&quot;&gt;&lt;code&gt;transpose&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;generated/numpy.var#numpy.var&quot;&gt;&lt;code&gt;var&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の方法についても、対応する関数がある&lt;a href=&quot;index#module-numpy&quot;&gt; &lt;code&gt;numpy&lt;/code&gt; の&lt;/a&gt;：&lt;a href=&quot;generated/numpy.all#numpy.all&quot;&gt; &lt;code&gt;all&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.any#numpy.any&quot;&gt; &lt;code&gt;any&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.argmax#numpy.argmax&quot;&gt; &lt;code&gt;argmax&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.argmin#numpy.argmin&quot;&gt; &lt;code&gt;argmin&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.argpartition#numpy.argpartition&quot;&gt; &lt;code&gt;argpartition&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.argsort#numpy.argsort&quot;&gt; &lt;code&gt;argsort&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.choose#numpy.choose&quot;&gt; &lt;code&gt;choose&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.clip#numpy.clip&quot;&gt; &lt;code&gt;clip&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.compress#numpy.compress&quot;&gt; &lt;code&gt;compress&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.copy#numpy.copy&quot;&gt; &lt;code&gt;copy&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.cumprod#numpy.cumprod&quot;&gt; &lt;code&gt;cumprod&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.cumsum#numpy.cumsum&quot;&gt; &lt;code&gt;cumsum&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.diagonal#numpy.diagonal&quot;&gt; &lt;code&gt;diagonal&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.imag#numpy.imag&quot;&gt; &lt;code&gt;imag&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.amax#numpy.amax&quot;&gt; &lt;code&gt;max&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.mean#numpy.mean&quot;&gt; &lt;code&gt;mean&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.amin#numpy.amin&quot;&gt; &lt;code&gt;min&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.nonzero#numpy.nonzero&quot;&gt; &lt;code&gt;nonzero&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.partition#numpy.partition&quot;&gt; &lt;code&gt;partition&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.prod#numpy.prod&quot;&gt; &lt;code&gt;prod&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.ptp#numpy.ptp&quot;&gt; &lt;code&gt;ptp&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.put#numpy.put&quot;&gt; &lt;code&gt;put&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.ravel#numpy.ravel&quot;&gt; &lt;code&gt;ravel&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.real#numpy.real&quot;&gt; &lt;code&gt;real&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.repeat#numpy.repeat&quot;&gt; &lt;code&gt;repeat&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.reshape#numpy.reshape&quot;&gt; &lt;code&gt;reshape&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.around#numpy.around&quot;&gt; &lt;code&gt;round&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.searchsorted#numpy.searchsorted&quot;&gt; &lt;code&gt;searchsorted&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.sort#numpy.sort&quot;&gt; &lt;code&gt;sort&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.squeeze#numpy.squeeze&quot;&gt; &lt;code&gt;squeeze&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.std#numpy.std&quot;&gt; &lt;code&gt;std&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.sum#numpy.sum&quot;&gt; &lt;code&gt;sum&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.swapaxes#numpy.swapaxes&quot;&gt; &lt;code&gt;swapaxes&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.take#numpy.take&quot;&gt; &lt;code&gt;take&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.trace#numpy.trace&quot;&gt; &lt;code&gt;trace&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.transpose#numpy.transpose&quot;&gt; &lt;code&gt;transpose&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;generated/numpy.var#numpy.var&quot;&gt; &lt;code&gt;var&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1f398fd04d9f322afdba477002ec5cde7b5d2d1b" translate="yes" xml:space="preserve">
          <source>For the general case, the iteration works by keeping track of a list of coordinate counters in the iterator object. At each iteration, the last coordinate counter is increased (starting from 0). If this counter is smaller than one less than the size of the array in that dimension (a pre-computed and stored value), then the counter is increased and the dataptr member is increased by the strides in that dimension and the macro ends. If the end of a dimension is reached, the counter for the last dimension is reset to zero and the dataptr is moved back to the beginning of that dimension by subtracting the strides value times one less than the number of elements in that dimension (this is also pre-computed and stored in the backstrides member of the iterator object). In this case, the macro does not end, but a local dimension counter is decremented so that the next-to-last dimension replaces the role that the last dimension played and the previously-described tests are executed again on the next-to-last dimension. In this way, the dataptr is adjusted appropriately for arbitrary striding.</source>
          <target state="translated">一般的な場合には、反復はイテレータオブジェクト内の座標カウンタのリストを追跡することによって動作します。反復のたびに、 最後の座標カウンタが増えていきます (0 から始まります)。このカウンタがその次元内の配列のサイズ(事前に計算されて格納されている値)より1より小さい場合、カウンタが増加し、その次元内のストライドによってdataptrメンバが増加し、マクロが終了します。あるディメンジョンの終了に達した場合、最後のディメンジョンのカウンタはゼロにリセットされ、そのディメンジョンの要素数より1少ないストライド値の倍の値を引くことで、dataptrはそのディメンジョンの先頭に戻ります(これも事前に計算され、イテレータ オブジェクトの backstrides メンバに格納されています)。この場合、マクロは終了しませんが、ローカル次元カウンタがデクリメントされ、次の次元が最後の次元が最後の次元が果たした役割を置き換えるようになり、前に説明したテストが次の次元で再度実行されます。このようにして、dataptr は任意のストライドに対して適切に調整される。</target>
        </trans-unit>
        <trans-unit id="a106ff191577f5e49df4ba4a5b92a5dff872216c" translate="yes" xml:space="preserve">
          <source>For the most part, the rules for dispatch with &lt;code&gt;__array_function__&lt;/code&gt; match those for &lt;code&gt;__array_ufunc__&lt;/code&gt;. In particular:</source>
          <target state="translated">ほとんどの場合、 &lt;code&gt;__array_function__&lt;/code&gt; を使用したディスパッチのルールは__array_ufunc__のルールと一致し &lt;code&gt;__array_ufunc__&lt;/code&gt; 。特に：</target>
        </trans-unit>
        <trans-unit id="4180b0d2e31dfed11719fe695b4c67afcfef466f" translate="yes" xml:space="preserve">
          <source>For the parameter types, be as precise as possible. Below are a few examples of parameters and their types.</source>
          <target state="translated">パラメータの種類については、できるだけ正確に記述してください。以下にパラメータとその型の例を示します。</target>
        </trans-unit>
        <trans-unit id="5aabe002787ac5ab3c2a4862f3aa6c788cd300e2" translate="yes" xml:space="preserve">
          <source>For the typenum macros, the argument is an integer representing an enumerated array data type. For the array type checking macros the argument must be a &lt;a href=&quot;https://docs.python.org/dev/c-api/structures.html#c.PyObject&quot;&gt;&lt;code&gt;PyObject *&lt;/code&gt;&lt;/a&gt; that can be directly interpreted as a &lt;a href=&quot;c-api.types-and-structures#c.PyArrayObject&quot;&gt;&lt;code&gt;PyArrayObject *&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">typenumマクロの場合、引数は列挙された配列データ型を表す整数です。配列型チェックマクロの場合、引数は&lt;a href=&quot;c-api.types-and-structures#c.PyArrayObject&quot;&gt; &lt;code&gt;PyArrayObject *&lt;/code&gt; &lt;/a&gt;として直接解釈できる&lt;a href=&quot;https://docs.python.org/dev/c-api/structures.html#c.PyObject&quot;&gt; &lt;code&gt;PyObject *&lt;/code&gt; で&lt;/a&gt;ある必要があります。</target>
        </trans-unit>
        <trans-unit id="62fce29176d606bc6dce1d1603810532e05edeb2" translate="yes" xml:space="preserve">
          <source>For the typenum macros, the argument is an integer representing an enumerated array data type. For the array type checking macros the argument must be a &lt;a href=&quot;https://docs.python.org/dev/c-api/structures.html#c.PyObject&quot;&gt;&lt;code&gt;PyObject *&lt;/code&gt;&lt;/a&gt; that can be directly interpreted as a &lt;a href=&quot;types-and-structures#c.PyArrayObject&quot;&gt;&lt;code&gt;PyArrayObject *&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">typenumマクロの場合、引数は列挙型配列データ型を表す整数です。配列型チェックマクロの場合、引数は&lt;a href=&quot;types-and-structures#c.PyArrayObject&quot;&gt; &lt;code&gt;PyArrayObject *&lt;/code&gt; &lt;/a&gt;として直接解釈できる&lt;a href=&quot;https://docs.python.org/dev/c-api/structures.html#c.PyObject&quot;&gt; &lt;code&gt;PyObject *&lt;/code&gt; で&lt;/a&gt;ある必要があります。</target>
        </trans-unit>
        <trans-unit id="5d3c40fa5c98be8aa15b70b390891bf28a170212" translate="yes" xml:space="preserve">
          <source>For these reasons it is advisable to avoid &lt;code&gt;as_strided&lt;/code&gt; when possible.</source>
          <target state="translated">これらの理由から、可能な場合は &lt;code&gt;as_strided&lt;/code&gt; を使用しないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="eb33fc8c29e1bd562bffb815c2697c66a036bae2" translate="yes" xml:space="preserve">
          <source>For these reasons, NumPy provides an API to work with npy_half values accessible by including &amp;lt;numpy/halffloat.h&amp;gt; and linking to &amp;lsquo;npymath&amp;rsquo;. For functions that are not provided directly, such as the arithmetic operations, the preferred method is to convert to float or double and back again, as in the following example.</source>
          <target state="translated">これらの理由により、NumPyは、&amp;lt;numpy / halffloat.h&amp;gt;をインクルードして「npymath」にリンクすることでアクセス可能なnpy_half値を処理するAPIを提供します。算術演算など、直接提供されない関数の場合、推奨される方法は、次の例のように、floatまたはdoubleに変換してから再び元に戻すことです。</target>
        </trans-unit>
        <trans-unit id="104d0cf2eb8de1110539af70bd2855adaa34b9c0" translate="yes" xml:space="preserve">
          <source>For this example we will only handle the method &lt;code&gt;__call__&lt;/code&gt;</source>
          <target state="translated">この例では、メソッド &lt;code&gt;__call__&lt;/code&gt; のみを処理します。</target>
        </trans-unit>
        <trans-unit id="684c1e70d951c1d84a7330eb5d5d620e2e0f3ef5" translate="yes" xml:space="preserve">
          <source>For this example we will only handle the method &lt;code&gt;__call__&lt;/code&gt;.</source>
          <target state="translated">この例では、メソッド &lt;code&gt;__call__&lt;/code&gt; のみを処理します。</target>
        </trans-unit>
        <trans-unit id="c5b0d8b34011752e4113aaa6a6fce2b3c78d19e5" translate="yes" xml:space="preserve">
          <source>For this function to work on sub-classes of ndarray, they must define &lt;a href=&quot;numpy.sum#numpy.sum&quot;&gt;&lt;code&gt;sum&lt;/code&gt;&lt;/a&gt; with the kwarg &lt;code&gt;keepdims&lt;/code&gt;</source>
          <target state="translated">この関数がndarrayのサブクラスで機能するためには、kwarg &lt;code&gt;keepdims&lt;/code&gt; &lt;a href=&quot;numpy.sum#numpy.sum&quot;&gt; &lt;code&gt;sum&lt;/code&gt; &lt;/a&gt;を定義する必要があります</target>
        </trans-unit>
        <trans-unit id="bffe6d0d22813c5a9e09a6444b12ab5f734f3a30" translate="yes" xml:space="preserve">
          <source>For this reason it is possible to use the output from the np.nonzero() function directly as an index since it always returns a tuple of index arrays.</source>
          <target state="translated">このため、np.nonzero()関数の出力をインデックスとして直接使用することができます。</target>
        </trans-unit>
        <trans-unit id="c7b38cff3c38a7296ea244a6f149ab3fa89299cb" translate="yes" xml:space="preserve">
          <source>For this reason, it is equivalent to (but faster than) the following use of &lt;a href=&quot;numpy.apply_along_axis#numpy.apply_along_axis&quot;&gt;&lt;code&gt;apply_along_axis&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">このため、次の&lt;a href=&quot;numpy.apply_along_axis#numpy.apply_along_axis&quot;&gt; &lt;code&gt;apply_along_axis&lt;/code&gt; の&lt;/a&gt;使用と同等です（ただし、それより高速です）。</target>
        </trans-unit>
        <trans-unit id="77bbee921f7bbec73ea6da64c3957049942fe48c" translate="yes" xml:space="preserve">
          <source>For this sample array</source>
          <target state="translated">このサンプル配列の場合</target>
        </trans-unit>
        <trans-unit id="445c5367719257e79fe070e306aba792eba52dd0" translate="yes" xml:space="preserve">
          <source>For tradeoffs among memmap, Zarr, and HDF5, see &lt;a href=&quot;https://pythonspeed.com/articles/mmap-vs-zarr-hdf5/&quot;&gt;pythonspeed.com&lt;/a&gt;.</source>
          <target state="translated">memmap、Zarr、およびHDF5間のトレードオフについては、&lt;a href=&quot;https://pythonspeed.com/articles/mmap-vs-zarr-hdf5/&quot;&gt;pythonspeed.comを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ef360ecaea0bceb4141bc860c62269adcea43126" translate="yes" xml:space="preserve">
          <source>For two dimensional arrays, the return will be two arrays ordered by axis. In this example the first array stands for the gradient in rows and the second one in columns direction:</source>
          <target state="translated">2次元配列の場合、戻り値は軸で順に並べられた2つの配列になります。この例では、最初の配列は行方向の勾配を表し、2番目の配列は列方向の勾配を表します。</target>
        </trans-unit>
        <trans-unit id="5688be18895d1ed44e4e4ac9ea5a009f3d8f644d" translate="yes" xml:space="preserve">
          <source>For ufuncs dynamically created from python functions, this member holds a reference to the underlying Python function.</source>
          <target state="translated">python 関数から動的に作成された ufuncs の場合、このメンバは基礎となる Python 関数への参照を保持します。</target>
        </trans-unit>
        <trans-unit id="f51d3a13e3a61d2cfd5f82478bfc77249b90c3e8" translate="yes" xml:space="preserve">
          <source>For ufuncs, it is hoped to eventually deprecate this method in favour of &lt;a href=&quot;#numpy.class.__array_ufunc__&quot;&gt;&lt;code&gt;__array_ufunc__&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ufuncsのためには、最終的に賛成してこの方法を廃止するために期待されている&lt;a href=&quot;#numpy.class.__array_ufunc__&quot;&gt; &lt;code&gt;__array_ufunc__&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1700b828b7fc4fece4693f8692514304a9ff235c" translate="yes" xml:space="preserve">
          <source>For uniformity in handling operands, NumPy treats a &lt;a href=&quot;reference/arrays.scalars&quot;&gt;scalar&lt;/a&gt; as an array of zero dimension.</source>
          <target state="translated">オペランドの処理を統一するために、NumPyは&lt;a href=&quot;reference/arrays.scalars&quot;&gt;スカラー&lt;/a&gt;をゼロ次元の配列として扱います。</target>
        </trans-unit>
        <trans-unit id="3fec4c12c09d2caf632487f32e741d15fde50a70" translate="yes" xml:space="preserve">
          <source>For unpickling.</source>
          <target state="translated">解凍用に。</target>
        </trans-unit>
        <trans-unit id="f5a617d92aada34c5b1b91d32c80426c8f059f29" translate="yes" xml:space="preserve">
          <source>For unsigned integer arrays, the results will also be unsigned. This should not be surprising, as the result is consistent with calculating the difference directly:</source>
          <target state="translated">符号なし整数配列の場合、結果も符号なしになります。これは、結果が差分を直接計算することと一致しているので、驚くべきことではありません。</target>
        </trans-unit>
        <trans-unit id="6e4eba9645d784baff280ba41b2a35d0eb68b9c9" translate="yes" xml:space="preserve">
          <source>For us, what consensus means is that we entrust &lt;em&gt;everyone&lt;/em&gt; with the right to veto any change if they feel it necessary. While this may sound like a recipe for obstruction and pain, this is not what happens. Instead, we find that most people take this responsibility seriously, and only invoke their veto when they judge that a serious problem is being ignored, and that their veto is necessary to protect the project. And in practice, it turns out that such vetoes are almost never formally invoked, because their mere possibility ensures that Contributors are motivated from the start to find some solution that everyone can live with &amp;ndash; thus accomplishing our goal of ensuring that all interested perspectives are taken into account.</source>
          <target state="translated">私たちにとってコンセンサスとは、必要に応じて変更を拒否する権利を&lt;em&gt;すべての人&lt;/em&gt;に委ねることです。これは閉塞と痛みのレシピのように聞こえるかもしれませんが、これは起こりません。代わりに、ほとんどの人がこの責任を真剣に受け止めており、深刻な問題が無視されていると判断し、プロジェクトを保護するために拒否権が必要であると判断した場合にのみ拒否権を行使します。そして実際には、そのような拒否権が正式に呼び出されることはほとんどありません。なぜなら、それらの単なる可能性により、貢献者は最初から誰もが一緒に暮らせる解決策を見つけるように動機付けられるためです。したがって、関心のあるすべての視点を確実に取り入れることができます。考慮に入れます。</target>
        </trans-unit>
        <trans-unit id="4b61801e49c04aeb574dfd6c0384db9e70e2d05c" translate="yes" xml:space="preserve">
          <source>For use if one has reason to manually (re-)set the internal state of the bit generator used by the RandomState instance. By default, RandomState uses the &amp;ldquo;Mersenne Twister&amp;rdquo;&lt;a href=&quot;#r0933ec43c7c9-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; pseudo-random number generating algorithm.</source>
          <target state="translated">RandomStateインスタンスによって使用されるビットジェネレーターの内部状態を手動で（再）設定する理由がある場合に使用します。デフォルトでは、RandomStateは「Mersenne Twister」&lt;a href=&quot;#r0933ec43c7c9-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;疑似乱数生成アルゴリズムを使用します。</target>
        </trans-unit>
        <trans-unit id="897febe53ee6bd5d25313858b98b8601f29d1bc3" translate="yes" xml:space="preserve">
          <source>For use if one has reason to manually (re-)set the internal state of the bit generator used by the RandomState instance. By default, RandomState uses the &amp;ldquo;Mersenne Twister&amp;rdquo;&lt;a href=&quot;#rd62dfb5ffa26-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; pseudo-random number generating algorithm.</source>
          <target state="translated">RandomStateインスタンスによって使用されるビットジェネレーターの内部状態を手動で（再）設定する理由がある場合に使用します。デフォルトでは、RandomStateは「MersenneTwister」&lt;a href=&quot;#rd62dfb5ffa26-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;疑似乱数生成アルゴリズムを使用します。</target>
        </trans-unit>
        <trans-unit id="ea29248ff311f62cfdcca5534fc099ca5bcc6b8e" translate="yes" xml:space="preserve">
          <source>For use if one has reason to manually (re-)set the internal state of the bit generator used by the RandomState instance. By default, RandomState uses the &amp;ldquo;Mersenne Twister&amp;rdquo;&lt;a href=&quot;#rf0f3f75f485b-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; pseudo-random number generating algorithm.</source>
          <target state="translated">RandomStateインスタンスによって使用されるビットジェネレーターの内部状態を手動で（再）設定する理由がある場合に使用します。デフォルトでは、RandomStateは「MersenneTwister」&lt;a href=&quot;#rf0f3f75f485b-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;疑似乱数生成アルゴリズムを使用します。</target>
        </trans-unit>
        <trans-unit id="23f7c1942ce335813533514ab6d97be522e99c17" translate="yes" xml:space="preserve">
          <source>For use with &lt;a href=&quot;#c.NPY_ITER_ALLOCATE&quot;&gt;&lt;code&gt;NPY_ITER_ALLOCATE&lt;/code&gt;&lt;/a&gt;, this flag disables allocating an array subtype for the output, forcing it to be a straight ndarray.</source>
          <target state="translated">&lt;a href=&quot;#c.NPY_ITER_ALLOCATE&quot;&gt; &lt;code&gt;NPY_ITER_ALLOCATE&lt;/code&gt; &lt;/a&gt;で使用する場合、このフラグは出力の配列サブタイプの割り当てを無効にし、それをストレートndarrayにします。</target>
        </trans-unit>
        <trans-unit id="4f63cfae8856e0c1b4c745d806a5044a1d2050ad" translate="yes" xml:space="preserve">
          <source>For use with &lt;a href=&quot;https://docs.python.org/dev/c-api/arg.html#c.PyArg_ParseTuple&quot;&gt;&lt;code&gt;PyArg_ParseTuple&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://docs.python.org/dev/c-api/arg.html#c.PyArg_ParseTuple&quot;&gt; &lt;code&gt;PyArg_ParseTuple&lt;/code&gt; で&lt;/a&gt;使用します</target>
        </trans-unit>
        <trans-unit id="703ab6c203bc4f7c082f6639ec9949c363231487" translate="yes" xml:space="preserve">
          <source>For use with &lt;code&gt;PyArg_ParseTuple&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;PyArg_ParseTuple&lt;/code&gt; で使用する場合</target>
        </trans-unit>
        <trans-unit id="8cb254f53813d4f5ed5d47fcd78786e6b4efd30e" translate="yes" xml:space="preserve">
          <source>For values exactly halfway between rounded decimal values, NumPy rounds to the nearest even value. Thus 1.5 and 2.5 round to 2.0, -0.5 and 0.5 round to 0.0, etc.</source>
          <target state="translated">四捨五入された小数点以下の値のちょうど中間の値については、NumPyは最も近い偶数値に丸めます。したがって、1.5と2.5は2.0に、-0.5と0.5は0.0に丸められます。</target>
        </trans-unit>
        <trans-unit id="30f0a5ecb33fee954cb51300dbd6244641e9062e" translate="yes" xml:space="preserve">
          <source>For values exactly halfway between rounded decimal values, NumPy rounds to the nearest even value. Thus 1.5 and 2.5 round to 2.0, -0.5 and 0.5 round to 0.0, etc. Results may also be surprising due to the inexact representation of decimal fractions in the IEEE floating point standard &lt;a href=&quot;#r907366b089c1-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; and errors introduced when scaling by powers of ten.</source>
          <target state="translated">丸められた10進値のちょうど中間の値の場合、NumPyは最も近い偶数の値に丸めます。したがって、1.5と2.5は2.0に丸められ、-0.5と0.5は0.0に丸められます。IEEE浮動小数点標準&lt;a href=&quot;#r907366b089c1-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;の小数部の不正確な表現と、10の累乗でスケーリングするときに導入されるエラーにより、結果も驚くかもしれません。</target>
        </trans-unit>
        <trans-unit id="a7513a1115d30c3b715a3ca9a5ba6b73db8ad275" translate="yes" xml:space="preserve">
          <source>For values of &lt;code&gt;ord &amp;lt; 1&lt;/code&gt;, the result is, strictly speaking, not a mathematical &amp;lsquo;norm&amp;rsquo;, but it may still be useful for various numerical purposes.</source>
          <target state="translated">&lt;code&gt;ord &amp;lt; 1&lt;/code&gt; 値の場合、結果は厳密に言えば、数学的な「ノルム」ではありませんが、それでもさまざまな数値目的に役立つ可能性があります。</target>
        </trans-unit>
        <trans-unit id="4b8df8eb2541671de725aa87916abd483ac03487" translate="yes" xml:space="preserve">
          <source>For values of &lt;code&gt;ord &amp;lt;= 0&lt;/code&gt;, the result is, strictly speaking, not a mathematical &amp;lsquo;norm&amp;rsquo;, but it may still be useful for various numerical purposes.</source>
          <target state="translated">&lt;code&gt;ord &amp;lt;= 0&lt;/code&gt; 値の場合、結果は厳密には数学的な「ノルム」ではありませんが、さまざまな数値の目的には役立ちます。</target>
        </trans-unit>
        <trans-unit id="d6c5fe59c42bb96e8794f338a14a9afba25af3e6" translate="yes" xml:space="preserve">
          <source>For vectors (1-D arrays) it computes the ordinary inner-product:</source>
          <target state="translated">ベクトル(1次元配列)に対しては,通常の内積を計算します.</target>
        </trans-unit>
        <trans-unit id="f31afbaa8abd3ce58c5bf83aec637268a269a63d" translate="yes" xml:space="preserve">
          <source>For vectors &lt;code&gt;x1&lt;/code&gt;, &lt;code&gt;x2&lt;/code&gt;,&amp;hellip;, &amp;lsquo;xn&amp;rsquo; with lengths &lt;code&gt;Ni=len(xi)&lt;/code&gt; , return &lt;code&gt;(N1, N2, N3,...Nn)&lt;/code&gt; shaped arrays if indexing=&amp;rsquo;ij&amp;rsquo; or &lt;code&gt;(N2, N1, N3,...Nn)&lt;/code&gt; shaped arrays if indexing=&amp;rsquo;xy&amp;rsquo; with the elements of &lt;code&gt;xi&lt;/code&gt; repeated to fill the matrix along the first dimension for &lt;code&gt;x1&lt;/code&gt;, the second for &lt;code&gt;x2&lt;/code&gt; and so on.</source>
          <target state="translated">長さが &lt;code&gt;Ni=len(xi)&lt;/code&gt; のベクトル &lt;code&gt;x1&lt;/code&gt; 、 &lt;code&gt;x2&lt;/code&gt; 、&amp;hellip;、 'xn'の場合、indexing = 'ij'または &lt;code&gt;(N2, N1, N3,...Nn)&lt;/code&gt; 場合 &lt;code&gt;(N1, N2, N3,...Nn)&lt;/code&gt; 形状の配列を返します。 ..Nn） &lt;code&gt;x1&lt;/code&gt; の最初の次元、 &lt;code&gt;x2&lt;/code&gt; の2番目の次元などに沿ってマトリックスを満たすために &lt;code&gt;xi&lt;/code&gt; の要素が繰り返されるindexing = 'xy'の場合の配列。</target>
        </trans-unit>
        <trans-unit id="51b960f61f40e8cc6aeabaf2a1735fbc2b9ac25d" translate="yes" xml:space="preserve">
          <source>For view casting and new-from-template, the equivalent of &lt;code&gt;ndarray.__new__(MySubClass,...&lt;/code&gt; is called, at the C level.</source>
          <target state="translated">ビューのキャストとnew-from-templateの場合、Cレベルで &lt;code&gt;ndarray.__new__(MySubClass,...&lt;/code&gt; と同等のものが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1f6242c0a79a41aa81490f6fd1ec86280110a2af" translate="yes" xml:space="preserve">
          <source>Force a cast to the output type even if it cannot be done safely. Without this flag, a data cast will occur only if it can be done safely, otherwise an error is raised.</source>
          <target state="translated">安全に行えない場合でも、出力型へのキャストを強制的に行います。このフラグがない場合、データのキャストは安全に行える場合にのみ行われ、そうでない場合はエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="d3ec8aad2bec1b3220d7b727c3bf434f0d55bc18" translate="yes" xml:space="preserve">
          <source>Force the mask to hard.</source>
          <target state="translated">マスクを強く押し付けます。</target>
        </trans-unit>
        <trans-unit id="cd0355317a1ab931fccb7ea5788f7a01c8683490" translate="yes" xml:space="preserve">
          <source>Force the mask to soft.</source>
          <target state="translated">マスクを強制的にソフトにします。</target>
        </trans-unit>
        <trans-unit id="46e07bf1dcba4f22fb0998d98afd707eecb583d3" translate="yes" xml:space="preserve">
          <source>Format Version 1.0</source>
          <target state="translated">フォーマットバージョン1.0</target>
        </trans-unit>
        <trans-unit id="9c5ba690bca66f9b43bf7dce492a8ecc14116342" translate="yes" xml:space="preserve">
          <source>Format Version 2.0</source>
          <target state="translated">フォーマットバージョン2.0</target>
        </trans-unit>
        <trans-unit id="6d476621018ad05f5efc66b66f9628e71614d77b" translate="yes" xml:space="preserve">
          <source>Format Version 3.0</source>
          <target state="translated">フォーマットバージョン3.0</target>
        </trans-unit>
        <trans-unit id="082aa72e2e80659bc0dafa9d8a6a53207113bd45" translate="yes" xml:space="preserve">
          <source>Format a floating-point scalar as a decimal string in positional notation.</source>
          <target state="translated">浮動小数点スカラを位置表記の10進文字列としてフォーマットします。</target>
        </trans-unit>
        <trans-unit id="63ec1825c81674406abf9c065439398606f8e9c4" translate="yes" xml:space="preserve">
          <source>Format a floating-point scalar as a decimal string in scientific notation.</source>
          <target state="translated">浮動小数点スカラを科学的表記法で10進数文字列としてフォーマットします。</target>
        </trans-unit>
        <trans-unit id="2ba865544cbf6ad122958e97b9cb7e6ee2fca0ce" translate="yes" xml:space="preserve">
          <source>Format string for text file output. Each entry in the array is formatted to text by first converting it to the closest Python type, and then using &amp;ldquo;format&amp;rdquo; % item.</source>
          <target state="translated">テキストファイル出力のフォーマット文字列。配列の各エントリは、最初に最も近いPythonタイプに変換し、次に「フォーマット」％アイテムを使用して、テキストにフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="fa2f2df30c13aa4a41041d5692c011a5dcf268be" translate="yes" xml:space="preserve">
          <source>Formats for &lt;strong&gt;exchanging data&lt;/strong&gt; with other tools include HDF5, Zarr, and NetCDF (see &lt;a href=&quot;#how-to-io-large-arrays&quot;&gt;Write or read large arrays&lt;/a&gt;).</source>
          <target state="translated">他のツール&lt;strong&gt;とデータ&lt;/strong&gt;を&lt;strong&gt;交換する&lt;/strong&gt;ための形式には、HDF5、Zarr、およびNetCDFが含まれます（&lt;a href=&quot;#how-to-io-large-arrays&quot;&gt;大きな配列の書き込みまたは読み取りを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a3b7bf2b2380c4418912a52f4b2af945c3ac0459" translate="yes" xml:space="preserve">
          <source>Formatting issues</source>
          <target state="translated">書式の問題</target>
        </trans-unit>
        <trans-unit id="0325ffe49050757f639a952be911aab3da5eaa12" translate="yes" xml:space="preserve">
          <source>Formula writing</source>
          <target state="translated">フォーミュラライティング</target>
        </trans-unit>
        <trans-unit id="e5a92b78c74fdad3772b95c0bef006808c6f5062" translate="yes" xml:space="preserve">
          <source>Fornberg B. (1988) Generation of Finite Difference Formulas on Arbitrarily Spaced Grids, Mathematics of Computation 51, no. 184 : 699-706. &lt;a href=&quot;http://www.ams.org/journals/mcom/1988-51-184/S0025-5718-1988-0935077-0/S0025-5718-1988-0935077-0.pdf&quot;&gt;PDF&lt;/a&gt;.</source>
          <target state="translated">Fornberg B.（1988）任意の間隔のグリッドでの有限差分式の生成、Mathematics of Computation 51、no。184：699-706。&lt;a href=&quot;http://www.ams.org/journals/mcom/1988-51-184/S0025-5718-1988-0935077-0/S0025-5718-1988-0935077-0.pdf&quot;&gt;PDF&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6874cc14b70854fb8cca90f27670bd2abb51cfb5" translate="yes" xml:space="preserve">
          <source>Fornberg B. (1988) Generation of Finite Difference Formulas on Arbitrarily Spaced Grids, Mathematics of Computation 51, no. 184 : 699-706. &lt;a href=&quot;https://www.ams.org/journals/mcom/1988-51-184/S0025-5718-1988-0935077-0/S0025-5718-1988-0935077-0.pdf&quot;&gt;PDF&lt;/a&gt;.</source>
          <target state="translated">Fornberg B.（1988）任意の間隔のグリッドでの有限差分式の生成、計算の数学51、no。184：699-706。&lt;a href=&quot;https://www.ams.org/journals/mcom/1988-51-184/S0025-5718-1988-0935077-0/S0025-5718-1988-0935077-0.pdf&quot;&gt;PDF&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d1cc558102f286f771795f2da7cbcbf5ba1b6328" translate="yes" xml:space="preserve">
          <source>Fortran 90 module data</source>
          <target state="translated">Fortran 90 モジュールデータ</target>
        </trans-unit>
        <trans-unit id="b62f0c388a951d6d6803e4d2dc48f368bb1a5685" translate="yes" xml:space="preserve">
          <source>Fortran assumed shape array and size function support in &lt;code&gt;numpy.f2py&lt;/code&gt;</source>
          <target state="translated">Fortranは、 &lt;code&gt;numpy.f2py&lt;/code&gt; で形状配列とサイズ関数のサポートを想定しています</target>
        </trans-unit>
        <trans-unit id="b756e1ed184faeae9981dd9378f750e8c6c0e04f" translate="yes" xml:space="preserve">
          <source>Fortran files</source>
          <target state="translated">フォートランファイル</target>
        </trans-unit>
        <trans-unit id="443b7dd908046f637f8adbdcefe50ee302b6f087" translate="yes" xml:space="preserve">
          <source>Fortran order if all the inputs are Fortran, C otherwise.</source>
          <target state="translated">すべての入力がFortranの場合はFortranの順番、そうでない場合はCです。</target>
        </trans-unit>
        <trans-unit id="0dbb13a4208640c43e953aa1ecfe0492f9b453d1" translate="yes" xml:space="preserve">
          <source>Fortran order.</source>
          <target state="translated">フォートランの注文。</target>
        </trans-unit>
        <trans-unit id="458144d44956123a91798b5242d7c298d549eb1b" translate="yes" xml:space="preserve">
          <source>Fortran source of module / subroutine to compile</source>
          <target state="translated">コンパイルするモジュール/サブルーチンのFortranソース</target>
        </trans-unit>
        <trans-unit id="e6b7af163ec1d9df45d457b3365dd7a8bb154117" translate="yes" xml:space="preserve">
          <source>Fortran to Python Interface Generator.</source>
          <target state="translated">FortranからPythonへのインターフェースジェネレータ。</target>
        </trans-unit>
        <trans-unit id="c97ded998a0ca595e9b4695a113a861855f88705" translate="yes" xml:space="preserve">
          <source>Fortran-contiguous arrays when data is stored column-wise, i.e. indexing of data as stored in memory starts from the lowest dimension;</source>
          <target state="translated">データが列単位で格納されている場合,すなわち,メモリに格納されているデータのインデックス付けは最下位の次元から開始されます.</target>
        </trans-unit>
        <trans-unit id="3c103a2ce4fa5c4bdfbfca73532b43fd7c1242b6" translate="yes" xml:space="preserve">
          <source>Fortran-order</source>
          <target state="translated">Fortran-order</target>
        </trans-unit>
        <trans-unit id="01f074f9b2b7da2704c7bf16c64348fbe5aff689" translate="yes" xml:space="preserve">
          <source>Fortran/C routine signatures</source>
          <target state="translated">フォートラン/Cルーチン署名</target>
        </trans-unit>
        <trans-unit id="fa529d42774f0768730f12bc0880f9965a988000" translate="yes" xml:space="preserve">
          <source>Forward bytes from a subprocess call to the console, without attempting to decode them.</source>
          <target state="translated">サブプロセスコールからのバイトを、デコードを試みずにコンソールに転送します。</target>
        </trans-unit>
        <trans-unit id="ececb946a3ffd8fb7cf57101d577f7acf1341e58" translate="yes" xml:space="preserve">
          <source>Forward port changes in the release branch to release notes and release scripts, if any, to master branch.</source>
          <target state="translated">リリースブランチのポートの変更をリリースノートとリリーススクリプトに転送します。</target>
        </trans-unit>
        <trans-unit id="2982346b57dba0536f8cd38d08e71e22e03b5068" translate="yes" xml:space="preserve">
          <source>Four values of the output are invalid: the first one comes from taking the square root of a negative number, the second from the division by zero, and the last two where the inputs were masked.</source>
          <target state="translated">出力の4つの値が無効です:最初の1つは負の数の平方根、2つ目はゼロによる除算、そして最後の2つは入力がマスクされています。</target>
        </trans-unit>
        <trans-unit id="f163a620e6be53409bc7d6c8a56980a06cc8552e" translate="yes" xml:space="preserve">
          <source>Fourier analysis is fundamentally a method for expressing a function as a sum of periodic components, and for recovering the function from those components. When both the function and its Fourier transform are replaced with discretized counterparts, it is called the discrete Fourier transform (DFT). The DFT has become a mainstay of numerical computing in part because of a very fast algorithm for computing it, called the Fast Fourier Transform (FFT), which was known to Gauss (1805) and was brought to light in its current form by Cooley and Tukey &lt;a href=&quot;#rfb1dc64dd6a5-ct&quot; id=&quot;id1&quot;&gt;[CT]&lt;/a&gt;. Press et al. &lt;a href=&quot;#rfb1dc64dd6a5-nr&quot; id=&quot;id2&quot;&gt;[NR]&lt;/a&gt; provide an accessible introduction to Fourier analysis and its applications.</source>
          <target state="translated">基本的にフーリエ解析は、関数を周期的な成分の合計として表現し、それらの成分から関数を復元する方法です。関数とそのフーリエ変換の両方が離散化された対応物に置き換えられる場合、それは離散フーリエ変換（DFT）と呼ばれます。ガウス（1805）に知られており、クーリーによって現在の形で明らかにされた高速フーリエ変換（FFT）と呼ばれる非常に高速なアルゴリズムのため、DFTは数値計算の主力になりましたチューキー&lt;a href=&quot;#rfb1dc64dd6a5-ct&quot; id=&quot;id1&quot;&gt;[CT]&lt;/a&gt;。プレス他 &lt;a href=&quot;#rfb1dc64dd6a5-nr&quot; id=&quot;id2&quot;&gt;[NR]&lt;/a&gt;フーリエ解析とそのアプリケーションへのアクセス可能な紹介を提供します。</target>
        </trans-unit>
        <trans-unit id="69fe683adb41f9ba1a3873187fd6c76482148e01" translate="yes" xml:space="preserve">
          <source>Fourier transform of &lt;code&gt;a&lt;/code&gt;</source>
          <target state="translated">のフーリエ変換 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="55427a60a4bc7584f941291fc8f1c78e3b48892c" translate="yes" xml:space="preserve">
          <source>Fourteen C macros and fifteen C functions that can be used to write specialized typemaps, extensions, or inlined functions that handle cases not covered by the provided typemaps. Note that the macros and functions are coded specifically to work with the NumPy C/API regardless of NumPy version number, both before and after the deprecation of some aspects of the API after version 1.6.</source>
          <target state="translated">14個のCマクロと15個のC関数は、特殊なタイプマップ、拡張機能、または提供されているタイプマップでカバーされていないケースを処理するインライン関数を書くために使用することができます。マクロと関数は、NumPyのバージョン番号に関係なく、NumPyのバージョン1.6以降のAPIのいくつかの側面が非推奨になる前と後の両方で、NumPy C/APIで動作するように特別にコード化されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a55119325a9e50ab95a500e00074b97b1b9e36d5" translate="yes" xml:space="preserve">
          <source>Fractional part of &lt;code&gt;x&lt;/code&gt;. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の小数部。 &lt;code&gt;x&lt;/code&gt; がスカラーの場合、これはスカラーです。</target>
        </trans-unit>
        <trans-unit id="3ef0af518168c89e00d0d671000eff79ef6d0866" translate="yes" xml:space="preserve">
          <source>Francis Hunt and Paul Johnson, On the Pareto Distribution of Sourceforge projects.</source>
          <target state="translated">Francis Hunt and Paul Johnson,On the Pareto Distribution of the Sourceforge projects.</target>
        </trans-unit>
        <trans-unit id="1702d7b8bdd07fbea0c5cab99e1759e69160609f" translate="yes" xml:space="preserve">
          <source>Frequency bins for given FFT parameters.</source>
          <target state="translated">与えられたFFTパラメータの周波数ビン</target>
        </trans-unit>
        <trans-unit id="8c7beab7a6d84d3a1004bcc75ccd72648a4866a0" translate="yes" xml:space="preserve">
          <source>Frobenius norm</source>
          <target state="translated">フロベニウスノルム</target>
        </trans-unit>
        <trans-unit id="6e155909e8a05199128c1964fad95f6222feb7b1" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;https://www.kaggle.com/atilamadai/covid19&quot;&gt;Kaggle&lt;/a&gt; it is possible to download a dataset with initial data about the COVID-19 outbreak in the beginning of 2020. We are going to look at a small subset of this data, contained in the file &lt;code&gt;who_covid_19_sit_rep_time_series.csv&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://www.kaggle.com/atilamadai/covid19&quot;&gt;Kaggle&lt;/a&gt;我々がファイルに含まれ、このデータの小さなサブセット、見しようとしている2020年の初めにCOVID-19流行に関する初期データとのデータセットをダウンロードすることが可能である &lt;code&gt;who_covid_19_sit_rep_time_series.csv&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b496ebf456418bea6f72b4dd532369d14b955f9b" translate="yes" xml:space="preserve">
          <source>From Dalgaard page 83 &lt;a href=&quot;#r755c9bae090e-1&quot; id=&quot;id3&quot;&gt;[1]&lt;/a&gt;, suppose the daily energy intake for 11 women in kilojoules (kJ) is:</source>
          <target state="translated">Dalgaardの83ページ&lt;a href=&quot;#r755c9bae090e-1&quot; id=&quot;id3&quot;&gt;[1]から&lt;/a&gt;、11人の女性の1日のエネルギー摂取量をキロジュール（kJ）で表すと仮定します。</target>
        </trans-unit>
        <trans-unit id="aeadfde385f544a91cc8eaeeffa0c5ba93e6dc7d" translate="yes" xml:space="preserve">
          <source>From Dalgaard page 83 &lt;a href=&quot;#r89f5270d198b-1&quot; id=&quot;id3&quot;&gt;[1]&lt;/a&gt;, suppose the daily energy intake for 11 women in kilojoules (kJ) is:</source>
          <target state="translated">Dalgaardの83ページ&lt;a href=&quot;#r89f5270d198b-1&quot; id=&quot;id3&quot;&gt;[1]から&lt;/a&gt;、11人の女性の1日のエネルギー摂取量をキロジュール（kJ）で表すと仮定します。</target>
        </trans-unit>
        <trans-unit id="ddb8d23120bc74b1cfb060aa5332c0996e661cf6" translate="yes" xml:space="preserve">
          <source>From Dalgaard page 83 &lt;a href=&quot;#r9f872b3c913b-1&quot; id=&quot;id3&quot;&gt;[1]&lt;/a&gt;, suppose the daily energy intake for 11 women in kilojoules (kJ) is:</source>
          <target state="translated">Dalgaardの83ページ&lt;a href=&quot;#r9f872b3c913b-1&quot; id=&quot;id3&quot;&gt;[1]から&lt;/a&gt;、11人の女性のキロジュール（kJ）での毎日のエネルギー摂取量が次のようであるとします。</target>
        </trans-unit>
        <trans-unit id="449b24b6007276ad9bb465db2968bb8f2f82cb23" translate="yes" xml:space="preserve">
          <source>From Dalgaard page 83 &lt;a href=&quot;#rb7c952f3992e-1&quot; id=&quot;id3&quot;&gt;[1]&lt;/a&gt;, suppose the daily energy intake for 11 women in kilojoules (kJ) is:</source>
          <target state="translated">Dalgaardの83ページ&lt;a href=&quot;#rb7c952f3992e-1&quot; id=&quot;id3&quot;&gt;[1]から&lt;/a&gt;、11人の女性のキロジュール（kJ）での毎日のエネルギー摂取量が次のようであるとします。</target>
        </trans-unit>
        <trans-unit id="e91799328361ed7f1f3c997458139cffb3209540" translate="yes" xml:space="preserve">
          <source>From a 4x3 array the corner elements should be selected using advanced indexing. Thus all elements for which the column is one of &lt;code&gt;[0, 2]&lt;/code&gt; and the row is one of &lt;code&gt;[0, 3]&lt;/code&gt; need to be selected. To use advanced indexing one needs to select all elements &lt;em&gt;explicitly&lt;/em&gt;. Using the method explained previously one could write:</source>
          <target state="translated">4x3配列から、高度なインデックスを使用してコーナー要素を選択する必要があります。したがって、列が &lt;code&gt;[0, 2]&lt;/code&gt; いずれかで、行が &lt;code&gt;[0, 3]&lt;/code&gt; ]のいずれかであるすべての要素を選択する必要があります。高度なインデックスを使用するには、すべての要素を&lt;em&gt;明示的&lt;/em&gt;に選択する必要があります。前に説明した方法を使用すると、次のように書くことができます。</target>
        </trans-unit>
        <trans-unit id="a91be0fd97aa12da8097d28986c00ba2a4f3a53c" translate="yes" xml:space="preserve">
          <source>From a Fortran routine signature F2PY generates a Python/C extension function that has the following signature:</source>
          <target state="translated">Fortran ルーチンのシグネチャから、F2PY は以下のシグネチャを持つ Python/C 拡張関数を生成します。</target>
        </trans-unit>
        <trans-unit id="f43663857b3b074086e6a5458d7eeb8cc710716c" translate="yes" xml:space="preserve">
          <source>From a date and time:</source>
          <target state="translated">ある日時から</target>
        </trans-unit>
        <trans-unit id="b27ac815b804369e0e908095a8f60fb839b9ffbc" translate="yes" xml:space="preserve">
          <source>From an array, select all rows which sum up to less or equal two:</source>
          <target state="translated">配列から、合計が2以下になるようなすべての行を選択します。</target>
        </trans-unit>
        <trans-unit id="0b1e37af40ab4883a1e4a8a3dc83bcc94bb649dc" translate="yes" xml:space="preserve">
          <source>From each row, a specific element should be selected. The row index is just &lt;code&gt;[0, 1, 2]&lt;/code&gt; and the column index specifies the element to choose for the corresponding row, here &lt;code&gt;[0, 1, 0]&lt;/code&gt;. Using both together the task can be solved using advanced indexing:</source>
          <target state="translated">各行から、特定の要素を選択する必要があります。行インデックスはちょうど &lt;code&gt;[0, 1, 2]&lt;/code&gt; で、列インデックスは対応する行に選択する要素を指定します。ここでは &lt;code&gt;[0, 1, 0]&lt;/code&gt; です。両方を一緒に使用すると、高度なインデックスを使用してタスクを解決できます。</target>
        </trans-unit>
        <trans-unit id="2bdc929241ee7611d7ce8654d5c0e7a97c5922e2" translate="yes" xml:space="preserve">
          <source>From existing data</source>
          <target state="translated">既存のデータから</target>
        </trans-unit>
        <trans-unit id="1978da17047230ecfb709900d093fe2bc00bb2a8" translate="yes" xml:space="preserve">
          <source>From now on &lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt; will know that &lt;code&gt;my-new-feature&lt;/code&gt; is related to the &lt;code&gt;my-new-feature&lt;/code&gt; branch in your own &lt;a href=&quot;https://github.com/numpy/numpy&quot;&gt;github&lt;/a&gt; repo. Subsequent push calls are then simplified to the following:</source>
          <target state="translated">今後、&lt;a href=&quot;https://git-scm.com/&quot;&gt;git&lt;/a&gt;は、 &lt;code&gt;my-new-feature&lt;/code&gt; が独自の&lt;a href=&quot;https://github.com/numpy/numpy&quot;&gt;github&lt;/a&gt;リポジトリの &lt;code&gt;my-new-feature&lt;/code&gt; ブランチに関連していることを認識します。その後のプッシュ呼び出しは、次のように簡略化されます。</target>
        </trans-unit>
        <trans-unit id="0d7dc9b3626b3cb541c458a7c7758c637090adb4" translate="yes" xml:space="preserve">
          <source>From other objects</source>
          <target state="translated">他のオブジェクトから</target>
        </trans-unit>
        <trans-unit id="5dce71950093c2ccd6198a0075dc3e5ee84cb7ec" translate="yes" xml:space="preserve">
          <source>From scratch</source>
          <target state="translated">ゼロから</target>
        </trans-unit>
        <trans-unit id="5cb06afc42e126aeee1dca21c5d08d384848538d" translate="yes" xml:space="preserve">
          <source>From the &lt;a href=&quot;../reference/maskedarray.generic#module-numpy.ma&quot;&gt;&lt;code&gt;Reference Guide&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;../reference/maskedarray.generic#module-numpy.ma&quot;&gt; &lt;code&gt;Reference Guide&lt;/code&gt; &lt;/a&gt;から：</target>
        </trans-unit>
        <trans-unit id="374969a1bf6cf09ab316c531b85ee98729ec817d" translate="yes" xml:space="preserve">
          <source>From the command line:</source>
          <target state="translated">コマンドラインから</target>
        </trans-unit>
        <trans-unit id="e8689c1f53f242e3e2ed351ba13d4443b972a335" translate="yes" xml:space="preserve">
          <source>From the output above, we can see that every value in &lt;code&gt;img[:,:,0]&lt;/code&gt; is an integer value between 0 and 255, representing the level of red in each corresponding image pixel (keep in mind that this might be different if you use your own image instead of &lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.face.html#scipy.misc.face&quot;&gt;&lt;code&gt;scipy.misc.face&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">上記の出力から、 &lt;code&gt;img[:,:,0]&lt;/code&gt; すべての値は、対応する各画像ピクセルの赤のレベルを表す0〜255の整数値であることがわかります（これは、次の場合は異なる可能性があることに注意してください。&lt;a href=&quot;https://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.face.html#scipy.misc.face&quot;&gt; &lt;code&gt;scipy.misc.face&lt;/code&gt; の&lt;/a&gt;代わりに独自の画像を使用してください）。</target>
        </trans-unit>
        <trans-unit id="487083148a4854e5ec264b4e7603e6d383b8513e" translate="yes" xml:space="preserve">
          <source>From time to time you may want to pull down the latest code. Do this with:</source>
          <target state="translated">時々、最新のコードを引き出したくなるかもしれません。これを行うには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="541d68d9d4a26a74b3b1aec38602641c99c42b4f" translate="yes" xml:space="preserve">
          <source>Full broadcasting support for &lt;code&gt;np.cross&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;np.cross&lt;/code&gt; の完全なブロードキャストサポート</target>
        </trans-unit>
        <trans-unit id="5f6cd09bf0f40761ab28ccaa4cab2a4c6c336752" translate="yes" xml:space="preserve">
          <source>Full indirect sort</source>
          <target state="translated">完全間接ソート</target>
        </trans-unit>
        <trans-unit id="b5dd204ac7b63984bfca215999235cdddc1cbe34" translate="yes" xml:space="preserve">
          <source>Full indirect sort.</source>
          <target state="translated">完全な間接ソート。</target>
        </trans-unit>
        <trans-unit id="c5e895c2415cf527427d487d13723da42a4ffc8d" translate="yes" xml:space="preserve">
          <source>Full path to the package to test.</source>
          <target state="translated">テストするパッケージのフルパス。</target>
        </trans-unit>
        <trans-unit id="7d106cfe968d6ee1cdc60bee01550735688b85f7" translate="yes" xml:space="preserve">
          <source>Full sort.</source>
          <target state="translated">フルソート。</target>
        </trans-unit>
        <trans-unit id="733bce60654becd4d4e1700d743ab7573d5f2742" translate="yes" xml:space="preserve">
          <source>Full sorting</source>
          <target state="translated">フルソート</target>
        </trans-unit>
        <trans-unit id="b375e36a5e2c847719599e1c9bc607f532495b26" translate="yes" xml:space="preserve">
          <source>Function &lt;code&gt;median&lt;/code&gt; used with &lt;code&gt;overwrite_input&lt;/code&gt; only partially sorts array</source>
          <target state="translated">&lt;code&gt;median&lt;/code&gt; 使用される関数中央値は、配列を部分的にのみソートし &lt;code&gt;overwrite_input&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b35686e8529228454146ad9f9eb6c40fa0abbf7c" translate="yes" xml:space="preserve">
          <source>Function and macro call style: &lt;code&gt;foo(a, b, c)&lt;/code&gt;, no space before the open paren, no spaces inside the parens, no spaces before commas, one space after each comma.</source>
          <target state="translated">関数とマクロの呼び出しスタイル： &lt;code&gt;foo(a, b, c)&lt;/code&gt; 、開いている親の前にスペースなし、親の内側にスペースなし、コンマの前にスペースなし、各コンマの後に1つのスペース。</target>
        </trans-unit>
        <trans-unit id="f14045db7fd843c69383648cf94f75fb3d176a15" translate="yes" xml:space="preserve">
          <source>Function call</source>
          <target state="translated">関数呼び出し</target>
        </trans-unit>
        <trans-unit id="5fafc2ca93d61a962accac1563a05d9b48e0a23a" translate="yes" xml:space="preserve">
          <source>Function decorator to apply certain suppressions to a whole function.</source>
          <target state="translated">関数全体に特定の抑制を適用するための関数デコレータ。</target>
        </trans-unit>
        <trans-unit id="1ace8a404ff1b1cae179e78198d969ee763553f5" translate="yes" xml:space="preserve">
          <source>Function definition style: function name in column 1, outermost curly braces in column 1, blank line after local variable declarations:</source>
          <target state="translated">関数定義スタイル:1列目に関数名、1列目に一番外側の中括弧、ローカル変数宣言の後は空白行。</target>
        </trans-unit>
        <trans-unit id="eaf873f24ebe960e5f8ab96d1bf1dafec8236126" translate="yes" xml:space="preserve">
          <source>Function documentation</source>
          <target state="translated">機能ドキュメント</target>
        </trans-unit>
        <trans-unit id="6611eada8817f5f656a38dbcf1f891cb71be30b3" translate="yes" xml:space="preserve">
          <source>Function operating on ndarrays.</source>
          <target state="translated">ndarraysで動作する関数です。</target>
        </trans-unit>
        <trans-unit id="7fb4f2de4dfb1639014358c3b7015d9c6a5f5d6b" translate="yes" xml:space="preserve">
          <source>Function pointer from &lt;a href=&quot;#c.NpyIter_GetIterNext&quot;&gt;&lt;code&gt;NpyIter_GetIterNext&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#c.NpyIter_GetIterNext&quot;&gt; &lt;code&gt;NpyIter_GetIterNext&lt;/code&gt; &lt;/a&gt;からの関数ポインター</target>
        </trans-unit>
        <trans-unit id="636b3b392dcabee45d972282bc714f124a2984ee" translate="yes" xml:space="preserve">
          <source>Function that converts a float array to float. Default is &lt;a href=&quot;https://docs.python.org/dev/library/functions.html#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;. Note that this does not seem to do anything useful in the current implementation.</source>
          <target state="translated">float配列をfloatに変換する関数。デフォルトは&lt;a href=&quot;https://docs.python.org/dev/library/functions.html#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt;です。これは現在の実装では何の役にも立たないようです。</target>
        </trans-unit>
        <trans-unit id="25f491198ced438a979dee0c06f7b99f4c27522c" translate="yes" xml:space="preserve">
          <source>Function that converts a float or float array to an integer or integer array. Default is &lt;a href=&quot;https://docs.python.org/dev/library/functions.html#int&quot;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">floatまたはfloat配列を整数または整数配列に変換する関数。デフォルトは&lt;a href=&quot;https://docs.python.org/dev/library/functions.html#int&quot;&gt; &lt;code&gt;int&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="c1c65cb38bc5533518bfad836c738613691b12bd" translate="yes" xml:space="preserve">
          <source>Function that converts a single float to a string. Default is &lt;code&gt;lambda v:'%24.16e' %v&lt;/code&gt;.</source>
          <target state="translated">単一のfloatを文字列に変換する関数。デフォルトは &lt;code&gt;lambda v:'%24.16e' %v&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="49e035248ad61f94c49b3411ced40a15d03e994b" translate="yes" xml:space="preserve">
          <source>Function that converts an integer or integer array to a float or float array. Default is &lt;a href=&quot;https://docs.python.org/dev/library/functions.html#float&quot;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">整数または整数配列をfloatまたはfloat配列に変換する関数。デフォルトは&lt;a href=&quot;https://docs.python.org/dev/library/functions.html#float&quot;&gt; &lt;code&gt;float&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="81aebc7824dc558f5740b2294a8d328bfb265c12" translate="yes" xml:space="preserve">
          <source>Function to apply on the &amp;ldquo;field&amp;rdquo; dimension. This function must support an &lt;code&gt;axis&lt;/code&gt; argument, like np.mean, np.sum, etc.</source>
          <target state="translated">「フィールド」ディメンションに適用する関数。この関数は、np.mean、np.sumなどの &lt;code&gt;axis&lt;/code&gt; 引数をサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="7cdbff65d2dcd6dbb1f176839d343d5cd6740b77" translate="yes" xml:space="preserve">
          <source>Function to be used to pretty print arrays. The function should expect a single array argument and return a string of the representation of the array. If None, the function is reset to the default NumPy function to print arrays.</source>
          <target state="translated">配列をきれいに表示するために使用する関数です。この関数は、単一の配列の引数を期待し、配列の表現の文字列を返す必要があります。Noneの場合,この関数は配列を表示するためのデフォルトのNumPy関数にリセットされます.</target>
        </trans-unit>
        <trans-unit id="2e5428e59d421faf071ea47a590fb561ece5a39d" translate="yes" xml:space="preserve">
          <source>Function to calculate only the edges of the bins used by the &lt;a href=&quot;generated/numpy.histogram#numpy.histogram&quot;&gt;&lt;code&gt;histogram&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;a href=&quot;generated/numpy.histogram#numpy.histogram&quot;&gt; &lt;code&gt;histogram&lt;/code&gt; &lt;/a&gt;関数で使用されるビンのエッジのみを計算する関数。</target>
        </trans-unit>
        <trans-unit id="ecfa9e590ef0d3ed65da85a7cdda1af66b824ea3" translate="yes" xml:space="preserve">
          <source>Function to calculate only the edges of the bins used by the &lt;a href=&quot;numpy.histogram#numpy.histogram&quot;&gt;&lt;code&gt;histogram&lt;/code&gt;&lt;/a&gt; function.</source>
          <target state="translated">&lt;a href=&quot;numpy.histogram#numpy.histogram&quot;&gt; &lt;code&gt;histogram&lt;/code&gt; &lt;/a&gt;関数で使用されるビンのエッジのみを計算する関数。</target>
        </trans-unit>
        <trans-unit id="3daae79264ded053c68caf5a77aad1db49558306" translate="yes" xml:space="preserve">
          <source>Function to call upon floating-point errors (&amp;lsquo;call&amp;rsquo;-mode) or object whose &amp;lsquo;write&amp;rsquo; method is used to log such message (&amp;lsquo;log&amp;rsquo;-mode).</source>
          <target state="translated">浮動小数点エラー（ 'call'モード）またはそのようなメッセージをログに記録するために 'write'メソッドが使用されるオブジェクト（ 'log'モード）で呼び出す関数。</target>
        </trans-unit>
        <trans-unit id="936e3c682ce34cc0f0f7b3b6776919fc933d5fe1" translate="yes" xml:space="preserve">
          <source>Function which returns a masked inner loop for the ufunc</source>
          <target state="translated">ufuncのマスクされた内部ループを返す関数</target>
        </trans-unit>
        <trans-unit id="deb4e042b9d6249db97e6680ab8276b237985bd9" translate="yes" xml:space="preserve">
          <source>Functional programming</source>
          <target state="translated">機能的なプログラミング</target>
        </trans-unit>
        <trans-unit id="2b961dea1dc0c60ddf9a2c8e9d090f6f7d082483" translate="yes" xml:space="preserve">
          <source>Functions</source>
          <target state="translated">Functions</target>
        </trans-unit>
        <trans-unit id="5a31942f8f4b1c24c2cf2f6e11f8f96977c918a6" translate="yes" xml:space="preserve">
          <source>Functions For Iteration</source>
          <target state="translated">反復のための関数</target>
        </trans-unit>
        <trans-unit id="c9d64db1884b2fd4f353a105874e4c3957322b65" translate="yes" xml:space="preserve">
          <source>Functions and Methods Overview</source>
          <target state="translated">機能とメソッドの概要</target>
        </trans-unit>
        <trans-unit id="cf6da2fb68f3db64f0a7a53228a8721f52f6134f" translate="yes" xml:space="preserve">
          <source>Functions available from numpy.ma.testutils have changed</source>
          <target state="translated">numpy.ma.testutils から利用できる関数が変更されました。</target>
        </trans-unit>
        <trans-unit id="b7916ccc48b7ce0f25ff69e01c25e39ce11de03b" translate="yes" xml:space="preserve">
          <source>Functions implementing internal features. Not all of these function pointers must be defined for a given type. The required members are &lt;code&gt;nonzero&lt;/code&gt;, &lt;code&gt;copyswap&lt;/code&gt;, &lt;code&gt;copyswapn&lt;/code&gt;, &lt;code&gt;setitem&lt;/code&gt;, &lt;code&gt;getitem&lt;/code&gt;, and &lt;code&gt;cast&lt;/code&gt;. These are assumed to be non- &lt;code&gt;NULL&lt;/code&gt; and &lt;code&gt;NULL&lt;/code&gt; entries will cause a program crash. The other functions may be &lt;code&gt;NULL&lt;/code&gt; which will just mean reduced functionality for that data-type. (Also, the nonzero function will be filled in with a default function if it is &lt;code&gt;NULL&lt;/code&gt; when you register a user-defined data-type).</source>
          <target state="translated">内部機能を実装する関数。これらの関数ポインタのすべてが特定の型に対して定義されている必要はありません。必要なメンバーは &lt;code&gt;nonzero&lt;/code&gt; 、 &lt;code&gt;copyswap&lt;/code&gt; 、 &lt;code&gt;copyswapn&lt;/code&gt; 、 &lt;code&gt;setitem&lt;/code&gt; 、 &lt;code&gt;getitem&lt;/code&gt; 、および &lt;code&gt;cast&lt;/code&gt; 。これらは非 &lt;code&gt;NULL&lt;/code&gt; であると想定され、 &lt;code&gt;NULL&lt;/code&gt; エントリはプログラムのクラッシュを引き起こします。他の関数は &lt;code&gt;NULL&lt;/code&gt; である可能性があります。これは、そのデータ型の機能の低下を意味します。 （また、ゼロ以外の関数は、ユーザー定義のデータ型を登録するときに &lt;code&gt;NULL&lt;/code&gt; の場合、デフォルトの関数で埋められます）。</target>
        </trans-unit>
        <trans-unit id="f48c175b4673c0bc456bc9f1ba654da2d9542a5c" translate="yes" xml:space="preserve">
          <source>Functions in &lt;code&gt;numpy.random&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;numpy.random&lt;/code&gt; の関数</target>
        </trans-unit>
        <trans-unit id="516c584b732d36ebda7d25fae38b326dc6d202ae" translate="yes" xml:space="preserve">
          <source>Functions in numpy.random</source>
          <target state="translated">numpy.random の関数</target>
        </trans-unit>
        <trans-unit id="c724fd9678ed45fd313d6c7db38a089943643ca5" translate="yes" xml:space="preserve">
          <source>Functions may be listed without descriptions, and this is preferable if the functionality is clear from the function name:</source>
          <target state="translated">関数は説明を省略してリストアップすることができますが、関数名から機能が明らかな場合はこれが望ましいです。</target>
        </trans-unit>
        <trans-unit id="786d8b1defa125829799bc249caf1adda1184b6a" translate="yes" xml:space="preserve">
          <source>Functions returning an index along an axis, like &lt;a href=&quot;numpy.argsort#numpy.argsort&quot;&gt;&lt;code&gt;argsort&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;numpy.argpartition#numpy.argpartition&quot;&gt;&lt;code&gt;argpartition&lt;/code&gt;&lt;/a&gt;, produce suitable indices for this function.</source>
          <target state="translated">&lt;a href=&quot;numpy.argsort#numpy.argsort&quot;&gt; &lt;code&gt;argsort&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;numpy.argpartition#numpy.argpartition&quot;&gt; &lt;code&gt;argpartition&lt;/code&gt; &lt;/a&gt;など、軸に沿ってインデックスを返す関数は、この関数に適したインデックスを生成します。</target>
        </trans-unit>
        <trans-unit id="7961218e053edec8b5fc62ef3005af10a3415803" translate="yes" xml:space="preserve">
          <source>Functions that are also in the numpy namespace and return matrices</source>
          <target state="translated">numpy名前空間にも含まれ、行列を返す関数</target>
        </trans-unit>
        <trans-unit id="95335a3a51e2f80868a95521fb5668b275263818" translate="yes" xml:space="preserve">
          <source>Functions that don&amp;rsquo;t accept keyword arguments should be written as:</source>
          <target state="translated">キーワード引数を受け入れない関数は、次のように記述する必要があります。</target>
        </trans-unit>
        <trans-unit id="7d214954501f7e7519692e45acb1bf64805c41e6" translate="yes" xml:space="preserve">
          <source>Functions that operate element by element on whole arrays.</source>
          <target state="translated">配列全体を要素ごとに操作する関数。</target>
        </trans-unit>
        <trans-unit id="f7888c5dcdff069b34a3486459892edd2f262c97" translate="yes" xml:space="preserve">
          <source>Functions with keyword arguments</source>
          <target state="translated">キーワード引数を持つ関数</target>
        </trans-unit>
        <trans-unit id="6020fb8e5272b3356bebe72ae19a144383754b4e" translate="yes" xml:space="preserve">
          <source>Functions without keyword arguments</source>
          <target state="translated">キーワード引数を持たない関数</target>
        </trans-unit>
        <trans-unit id="6dad1764839322eb03eab6b07936a589482f90c1" translate="yes" xml:space="preserve">
          <source>Fundraising</source>
          <target state="translated">Fundraising</target>
        </trans-unit>
        <trans-unit id="4647f887db448ba6bb11f7136147a60fabe16fc4" translate="yes" xml:space="preserve">
          <source>Further Numeric Style types Deprecated</source>
          <target state="translated">その他の数値スタイルタイプ Deprecated</target>
        </trans-unit>
        <trans-unit id="6da76886d65d87e4650f5c14ec791f8c2f676112" translate="yes" xml:space="preserve">
          <source>Further explanation of the &lt;code&gt;fmt&lt;/code&gt; parameter (&lt;code&gt;%[flag]width[.precision]specifier&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;fmt&lt;/code&gt; パラメーターの詳細説明（ &lt;code&gt;%[flag]width[.precision]specifier&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="3abcbfb793b7e40f09b0f5479b45936952f0ec59" translate="yes" xml:space="preserve">
          <source>Further improvements to &lt;code&gt;ctypes&lt;/code&gt; support in &lt;code&gt;np.ctypeslib&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;np.ctypeslib&lt;/code&gt; での &lt;code&gt;ctypes&lt;/code&gt; サポートのさらなる改善</target>
        </trans-unit>
        <trans-unit id="8b7e1185b0b79852815db7f42a86a47fec5e9990" translate="yes" xml:space="preserve">
          <source>Further improvements to &lt;code&gt;ctypes&lt;/code&gt; support in &lt;code&gt;numpy.ctypeslib&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;numpy.ctypeslib&lt;/code&gt; での &lt;code&gt;ctypes&lt;/code&gt; サポートのさらなる改善</target>
        </trans-unit>
        <trans-unit id="f8a0b7626837b22f011ce8c7c63d65ca89984821" translate="yes" xml:space="preserve">
          <source>Further members are considered private and version dependend. If the size of the struct is important for your code, special care must be taken. A possible use-case when this is relevant is subclassing in C. If your code relies on &lt;code&gt;sizeof(PyArrayObject)&lt;/code&gt; to be constant, you must add the following check at import time:</source>
          <target state="translated">それ以降のメンバーはプライベートと見なされ、バージョンによって異なります。構造体のサイズがコードにとって重要な場合は、特別な注意を払う必要があります。これが関連する場合に考えられるユースケースは、Cでのサブクラス化です。コードが &lt;code&gt;sizeof(PyArrayObject)&lt;/code&gt; に依存して定数である場合は、インポート時に次のチェックを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="0e44c8b638baa470dbb5f127964c092cc77ea465" translate="yes" xml:space="preserve">
          <source>Further reading</source>
          <target state="translated">続きを読む</target>
        </trans-unit>
        <trans-unit id="fad9659f7e2980db9b405ad20b3c5294ccc96416" translate="yes" xml:space="preserve">
          <source>Further, note how &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; are combined:</source>
          <target state="translated">さらに、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; がどのように組み合わされているかに注意してください。</target>
        </trans-unit>
        <trans-unit id="9af0aaaf4de03972531671e0eb9bb87000ba4e1d" translate="yes" xml:space="preserve">
          <source>Furthermore, arrays created with this function often contain self overlapping memory, so that two elements are identical. Vectorized write operations on such arrays will typically be unpredictable. They may even give different results for small, large, or transposed arrays. Since writing to these arrays has to be tested and done with great care, you may want to use &lt;code&gt;writeable=False&lt;/code&gt; to avoid accidental write operations.</source>
          <target state="translated">さらに、この関数で作成された配列は、多くの場合、自己オーバーラップメモリ​​を含むため、2つの要素は同一です。このような配列でのベクトル化された書き込み操作は、通常予測できません。それらは、小さい、大きい、または転置された配列に対して異なる結果を与える場合さえあります。これらの配列への &lt;code&gt;writeable=False&lt;/code&gt; テストして行う必要があるため、偶発的な書き込み操作を回避するために、writeable = Falseを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="12143faa25aabfe7fe468016abec86297c6fcf15" translate="yes" xml:space="preserve">
          <source>Furthermore, numpy now provides a new function &lt;a href=&quot;#numpy.lib.recfunctions.structured_to_unstructured&quot;&gt;&lt;code&gt;numpy.lib.recfunctions.structured_to_unstructured&lt;/code&gt;&lt;/a&gt; which is a safer and more efficient alternative for users who wish to convert structured arrays to unstructured arrays, as the view above is often indeded to do. This function allows safe conversion to an unstructured type taking into account padding, often avoids a copy, and also casts the datatypes as needed, unlike the view. Code such as:</source>
          <target state="translated">さらに、numpyは新しい関数&lt;a href=&quot;#numpy.lib.recfunctions.structured_to_unstructured&quot;&gt; &lt;code&gt;numpy.lib.recfunctions.structured_to_unstructured&lt;/code&gt; &lt;/a&gt;を提供します。これは、上記のビューでよく行われているように、構造化配列を非構造化配列に変換したいユーザーにとって、より安全で効率的な代替手段です。この関数は、パディングを考慮して非構造化タイプに安全に変換できるようにし、多くの場合、コピーを回避し、ビューとは異なり、必要に応じてデータ型をキャストします。次のようなコード：</target>
        </trans-unit>
        <trans-unit id="4f84a7ca85b2fada9bdf949e608abf006366bb0e" translate="yes" xml:space="preserve">
          <source>Furthermore, the callback function is of the same type as before, &lt;code&gt;void (*foo)(char **args, intp *dimensions, intp *steps, void *func)&lt;/code&gt;. When invoked, &lt;code&gt;args&lt;/code&gt; is a list of length &lt;code&gt;nargs&lt;/code&gt; containing the data of all input/output arguments. For a scalar elementary function, &lt;code&gt;steps&lt;/code&gt; is also of length &lt;code&gt;nargs&lt;/code&gt;, denoting the strides used for the arguments. &lt;code&gt;dimensions&lt;/code&gt; is a pointer to a single integer defining the size of the axis to be looped over.</source>
          <target state="translated">さらに、コールバック関数は以前と同じタイプ、 &lt;code&gt;void (*foo)(char **args, intp *dimensions, intp *steps, void *func)&lt;/code&gt; です。 &lt;code&gt;args&lt;/code&gt; は、呼び出されると、すべての入出力引数のデータを含む長さ &lt;code&gt;nargs&lt;/code&gt; のリストです。スカラー基本関数の場合、 &lt;code&gt;steps&lt;/code&gt; も長さ &lt;code&gt;nargs&lt;/code&gt; であり、引数に使用されるストライドを示します。 &lt;code&gt;dimensions&lt;/code&gt; は、ループされる軸のサイズを定義する単一の整数へのポインタです。</target>
        </trans-unit>
        <trans-unit id="c462e5cfdac7c4df78636f70346d506c3e424749" translate="yes" xml:space="preserve">
          <source>Furthermore, using the &lt;code&gt;ndim&lt;/code&gt; property of this array, we can see that</source>
          <target state="translated">さらに、この配列の &lt;code&gt;ndim&lt;/code&gt; プロパティを使用すると、次のことがわかります。</target>
        </trans-unit>
        <trans-unit id="22552b8bf29fce0c52d5fcd39548010b9e76338c" translate="yes" xml:space="preserve">
          <source>Future Changes</source>
          <target state="translated">今後の変更点</target>
        </trans-unit>
        <trans-unit id="acb0dc3b9f8b3f5bdca8fc1d87183e1bba912790" translate="yes" xml:space="preserve">
          <source>Future changes</source>
          <target state="translated">今後の変更点</target>
        </trans-unit>
        <trans-unit id="b7285e0cef5e4daf805eb913ea140d9a03dc8d07" translate="yes" xml:space="preserve">
          <source>Future value</source>
          <target state="translated">将来の価値</target>
        </trans-unit>
        <trans-unit id="0d44fa727f9b3f4d912a98a3e170b462f52557e6" translate="yes" xml:space="preserve">
          <source>Future value (default = 0)</source>
          <target state="translated">将来の値(デフォルト=0</target>
        </trans-unit>
        <trans-unit id="ba4092807d491bea64803fff0c7e477eac372847" translate="yes" xml:space="preserve">
          <source>Future values. If all input is scalar, returns a scalar float. If any input is array_like, returns future values for each input element. If multiple inputs are array_like, they all must have the same shape.</source>
          <target state="translated">将来の値。すべての入力がスカラの場合、スカラのfloatを返します。いずれかの入力が array_like の場合、各入力要素の未来の値を返します。複数の入力が array_like の場合、それらはすべて同じ形をしていなければなりません。</target>
        </trans-unit>
        <trans-unit id="722af3dc654f5b03462276f1ddc84a2ecf2baa12" translate="yes" xml:space="preserve">
          <source>Future very uncertain: it&amp;rsquo;s the only part of Scipy not ported to Python 3 and is effectively deprecated in favor of Cython.</source>
          <target state="translated">将来は非常に不確実です。Python3に移植されていないScipyの唯一の部分であり、Cythonを優先して事実上非推奨になっています。</target>
        </trans-unit>
        <trans-unit id="d739c24bbd3b77640efa7aa653675284eae750ca" translate="yes" xml:space="preserve">
          <source>FutureWarning to changed behavior</source>
          <target state="translated">変化した行動へのFutureWarning</target>
        </trans-unit>
        <trans-unit id="a6cee77152a751b028de81f7755bdc87bacc5925" translate="yes" xml:space="preserve">
          <source>FutureWarnings</source>
          <target state="translated">FutureWarnings</target>
        </trans-unit>
        <trans-unit id="a36a6718f54524d846894fb04b5b885b4e43e63b" translate="yes" xml:space="preserve">
          <source>G</source>
          <target state="translated">G</target>
        </trans-unit>
        <trans-unit id="2f44d78e0bf8d58385fdcde50f5d5e7baff3d944" translate="yes" xml:space="preserve">
          <source>G. H. Golub and C. F. Van Loan, &lt;em&gt;Matrix Computations&lt;/em&gt;, Baltimore, MD, Johns Hopkins University Press, 1985, pg. 15</source>
          <target state="translated">GH Golub and CF Van Loan、&lt;em&gt;Matrix Computations&lt;/em&gt;、Baltimore、MD、Johns Hopkins University Press、1985、pg。15</target>
        </trans-unit>
        <trans-unit id="cbd53064adb7ff38d27c336291f9eaba7270aacd" translate="yes" xml:space="preserve">
          <source>G. Strang, &amp;ldquo;Linear Algebra and Its Applications, 2nd Edition,&amp;rdquo; Academic Press, pg. 182, 1980.</source>
          <target state="translated">G. Strang、「線形代数とその応用、第2版」、Academic Press、pg。182、1980。</target>
        </trans-unit>
        <trans-unit id="0fee945837fcad5efdf449e24366c4e1f7b65d37" translate="yes" xml:space="preserve">
          <source>G. Strang, &lt;em&gt;Linear Algebra and Its Applications&lt;/em&gt;, 2nd Ed., Orlando, FL, Academic Press, Inc., 1980, Various pp.</source>
          <target state="translated">G. Strang、&lt;em&gt;線形代数とその応用&lt;/em&gt;、第2版、フロリダ州オーランド、Academic Press、Inc.、1980年、さまざまなページ。</target>
        </trans-unit>
        <trans-unit id="4d62050a6efa830b0646c86cf65d2a276c097206" translate="yes" xml:space="preserve">
          <source>G. Strang, &lt;em&gt;Linear Algebra and Its Applications&lt;/em&gt;, 2nd Ed., Orlando, FL, Academic Press, Inc., 1980, pg. 22.</source>
          <target state="translated">G. Strang、&lt;em&gt;線形代数とその応用&lt;/em&gt;、第2版、フロリダ州オーランド、Academic Press、Inc.、1980、pg。22。</target>
        </trans-unit>
        <trans-unit id="8a5685424a4a906ee371dfacdea6a5b47dc7b3ff" translate="yes" xml:space="preserve">
          <source>G. Strang, &lt;em&gt;Linear Algebra and Its Applications&lt;/em&gt;, 2nd Ed., Orlando, FL, Academic Press, Inc., 1980, pg. 222.</source>
          <target state="translated">G. Strang、&lt;em&gt;線形代数とその応用&lt;/em&gt;、第2版、フロリダ州オーランド、Academic Press、Inc.、1980、pg。222。</target>
        </trans-unit>
        <trans-unit id="db937a0ed23b9cf712fadda8ce2d53e90fb3fb34" translate="yes" xml:space="preserve">
          <source>G. Strang, &lt;em&gt;Linear Algebra and Its Applications&lt;/em&gt;, 2nd Ed., Orlando, FL, Academic Press, Inc., 1980, pp. 139-142.</source>
          <target state="translated">G. Strang、&lt;em&gt;線形代数とその応用&lt;/em&gt;、第2版、フロリダ州オーランド、Academic Press、Inc.、1980、pp。139-142。</target>
        </trans-unit>
        <trans-unit id="d923f5047de7db54bb0494345e02c3e60011f631" translate="yes" xml:space="preserve">
          <source>G. Strang, &lt;em&gt;Linear Algebra and Its Applications&lt;/em&gt;, Orlando, FL, Academic Press, Inc., 1980, pg. 285.</source>
          <target state="translated">G. Strang、&lt;em&gt;線形代数とその応用&lt;/em&gt;、フロリダ州オーランド、Academic Press、Inc.、1980、pg。285。</target>
        </trans-unit>
        <trans-unit id="2fe46435d8800606efbbb4738ea49577e004f01c" translate="yes" xml:space="preserve">
          <source>GUfuncs on empty arrays and NpyIter axis removal</source>
          <target state="translated">空の配列のGUfuncsとNpyIter軸の削除</target>
        </trans-unit>
        <trans-unit id="e8a5e73fba8665db50a8e3577ecf8eb28b80e421" translate="yes" xml:space="preserve">
          <source>Gammas</source>
          <target state="translated">Gammas</target>
        </trans-unit>
        <trans-unit id="d85fb4eb9b5275137b92e9c14d3dd2b6f13641af" translate="yes" xml:space="preserve">
          <source>Gather</source>
          <target state="translated">Gather</target>
        </trans-unit>
        <trans-unit id="027498996e260dbd9c33778f3168019dfde3d4cc" translate="yes" xml:space="preserve">
          <source>Gauss-Chebyshev quadrature.</source>
          <target state="translated">ガウス・チェビシェフの二乗。</target>
        </trans-unit>
        <trans-unit id="372d4c8be97b59c2965354454eaf80e844e74e50" translate="yes" xml:space="preserve">
          <source>Gauss-Hermite quadrature.</source>
          <target state="translated">ガウス・ヘルマイトの二乗。</target>
        </trans-unit>
        <trans-unit id="90aa100cf157ec594ce20f650ca9a1d9019f03be" translate="yes" xml:space="preserve">
          <source>Gauss-HermiteE quadrature.</source>
          <target state="translated">ガウス・ヘルミテEの二乗。</target>
        </trans-unit>
        <trans-unit id="9d10f081127b50e1f17e0a5c3971976017840cbe" translate="yes" xml:space="preserve">
          <source>Gauss-Laguerre quadrature.</source>
          <target state="translated">ガウス・ラグーレの求積法。</target>
        </trans-unit>
        <trans-unit id="88f1f37c698b12eaffdc9bbccbc77d8b6246ccd8" translate="yes" xml:space="preserve">
          <source>Gauss-Legendre quadrature.</source>
          <target state="translated">ガウス-レジェンドレの四乗法。</target>
        </trans-unit>
        <trans-unit id="9239ee2cda84eca4c3440e2a7b50148af67da3d4" translate="yes" xml:space="preserve">
          <source>General</source>
          <target state="translated">General</target>
        </trans-unit>
        <trans-unit id="0cffb2d4275e42dba57746961ea67052aaeef334" translate="yes" xml:space="preserve">
          <source>General Broadcasting Rules</source>
          <target state="translated">一般放送ルール</target>
        </trans-unit>
        <trans-unit id="a2ff3c8e4686a4c021328dd784ede1cb72d7755f" translate="yes" xml:space="preserve">
          <source>General Purpose Equivalents</source>
          <target state="translated">汎用的な同等品</target>
        </trans-unit>
        <trans-unit id="0d731fc16d10c539de3eb06ab7ca854e8f4dd60e" translate="yes" xml:space="preserve">
          <source>General check of Python Type</source>
          <target state="translated">Pythonの型の一般的なチェック</target>
        </trans-unit>
        <trans-unit id="e9497e2601f7c982d6f4ec6cdfd6bc52f316c4cf" translate="yes" xml:space="preserve">
          <source>General purpose equivalents</source>
          <target state="translated">一般的な目的のための等価物</target>
        </trans-unit>
        <trans-unit id="1b31f308f2ce85a33700b95c3da21fcb018ed716" translate="yes" xml:space="preserve">
          <source>General purpose exception class, derived from Python&amp;rsquo;s exception.Exception class, programmatically raised in linalg functions when a Linear Algebra-related condition would prevent further correct execution of the function.</source>
          <target state="translated">Pythonのexception.Exceptionクラスから派生した汎用の例外クラス。線形代数関連の条件が原因で関数がさらに正しく実行されない場合に、プログラムによってlinalg関数で発生します。</target>
        </trans-unit>
        <trans-unit id="6a5d5977ff7dabeb26104f13133251775857ac24" translate="yes" xml:space="preserve">
          <source>Generalised matrix product, using second last dimension of &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; の最後から2番目の次元を使用する一般化された行列積。</target>
        </trans-unit>
        <trans-unit id="172636dd07a5cf344fc718f14e5f8bac9163a8d1" translate="yes" xml:space="preserve">
          <source>Generalized &lt;code&gt;flip&lt;/code&gt;</source>
          <target state="translated">一般化された &lt;code&gt;flip&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4d7eab60b5c5966c3521dbaae99dc8efbf97f6cb" translate="yes" xml:space="preserve">
          <source>Generalized Ufuncs will now unlock the GIL</source>
          <target state="translated">一般化されたUfuncsはGILのロックを解除するようになりました。</target>
        </trans-unit>
        <trans-unit id="9332c2d546d63dda92dba61cafe3df82f0dd8b19" translate="yes" xml:space="preserve">
          <source>Generalized Universal Function API</source>
          <target state="translated">一般化ユニバーサル関数API</target>
        </trans-unit>
        <trans-unit id="e299d19ac7292c1bf7156bae2d6dd21bd9fba291" translate="yes" xml:space="preserve">
          <source>Generalized axis support for median and percentile</source>
          <target state="translated">中央値とパーセンタイルの一般化軸サポート</target>
        </trans-unit>
        <trans-unit id="04b50941190dd87fa655dc29ac5df20dd7d7c66f" translate="yes" xml:space="preserve">
          <source>Generalized function class.</source>
          <target state="translated">一般化された関数クラス。</target>
        </trans-unit>
        <trans-unit id="1a1bc0e8d9d246a721e301167a79c68d6cdef5b2" translate="yes" xml:space="preserve">
          <source>Generalized ufunc signatures now allow fixed-size dimensions</source>
          <target state="translated">一般化された ufunc のシグネチャで固定サイズの寸法を許容するようになりました。</target>
        </trans-unit>
        <trans-unit id="d2d28b03b171fb860aee83a82f532e58c4e9fba3" translate="yes" xml:space="preserve">
          <source>Generalized ufunc signatures now allow flexible dimensions</source>
          <target state="translated">一般化された ufunc のシグネチャが柔軟な次元を許容するようになりました。</target>
        </trans-unit>
        <trans-unit id="0046ab62e86cdc207bdc51ed66f39ae439778565" translate="yes" xml:space="preserve">
          <source>Generalized ufuncs</source>
          <target state="translated">一般化されたufuncs</target>
        </trans-unit>
        <trans-unit id="66a042cdeb42f3ae672017ab4c672646772ccf00" translate="yes" xml:space="preserve">
          <source>Generalized ufuncs are used internally in many linalg functions, and in the testing suite; the examples below are taken from these. For ufuncs that operate on scalars, the signature is &lt;code&gt;None&lt;/code&gt;, which is equivalent to &amp;lsquo;()&amp;rsquo; for every argument.</source>
          <target state="translated">一般化されたufuncは、多くのlinalg関数およびテストスイートで内部的に使用されます。以下の例はこれらから取得されます。スカラーで動作するufuncの場合、シグニチャーは &lt;code&gt;None&lt;/code&gt; です。これは、すべての引数の '（）'と同等です。</target>
        </trans-unit>
        <trans-unit id="b0078c3e5a20e2fad81f2acb827abe758030ac9d" translate="yes" xml:space="preserve">
          <source>Generalized ufuncs are used internally in many linalg functions, and in the testing suite; the examples below are taken from these. For ufuncs that operate on scalars, the signature is None, which is equivalent to &amp;lsquo;()&amp;rsquo; for every argument.</source>
          <target state="translated">一般化されたufuncは、多くのlinalg関数およびテストスイートで内部的に使用されます。以下の例はこれらから抜粋したものです。スカラーを操作するufuncの場合、シグニチャはNoneです。これは、すべての引数の「（）」に相当します。</target>
        </trans-unit>
        <trans-unit id="bf9c0fe98002f4322da923b10684f6d5d099ff33" translate="yes" xml:space="preserve">
          <source>Generalized ufuncs now accept &lt;code&gt;axes&lt;/code&gt;, &lt;code&gt;axis&lt;/code&gt; and &lt;code&gt;keepdims&lt;/code&gt; arguments</source>
          <target state="translated">一般化されたufuncsは、 &lt;code&gt;axes&lt;/code&gt; 、 &lt;code&gt;axis&lt;/code&gt; 、 &lt;code&gt;keepdims&lt;/code&gt; 引数を受け入れるようになりました</target>
        </trans-unit>
        <trans-unit id="d96ae300222cf76379f354819a4df06d3fbfa490" translate="yes" xml:space="preserve">
          <source>Generalized universal function signature, e.g., &lt;code&gt;(m,n),(n)-&amp;gt;(m)&lt;/code&gt; for vectorized matrix-vector multiplication. If provided, &lt;code&gt;pyfunc&lt;/code&gt; will be called with (and expected to return) arrays with shapes given by the size of corresponding core dimensions. By default, &lt;code&gt;pyfunc&lt;/code&gt; is assumed to take scalars as input and output.</source>
          <target state="translated">一般化された普遍的な関数のシグネチャ。たとえば、ベクトル化された行列-ベクトル乗算の &lt;code&gt;(m,n),(n)-&amp;gt;(m)&lt;/code&gt; 。提供された場合、 &lt;code&gt;pyfunc&lt;/code&gt; は、対応するコアの次元のサイズによって与えられた形状を持つ配列で呼び出されます（返されることが期待されます）。デフォルトでは、 &lt;code&gt;pyfunc&lt;/code&gt; はスカラーを入力および出力として受け取ると想定されています。</target>
        </trans-unit>
        <trans-unit id="4bdfd56723e2a4630d0aa40f0eab7e7e821379e3" translate="yes" xml:space="preserve">
          <source>Generally speaking, what is returned when index arrays are used is an array with the same shape as the index array, but with the type and values of the array being indexed. As an example, we can use a multidimensional index array instead:</source>
          <target state="translated">一般的に、インデックス配列を使用した場合に返されるのは、インデックス配列と同じ形をした配列ですが、インデックスされている配列の型と値を持つ配列です。例として、代わりに多次元インデックス配列を使用することができます。</target>
        </trans-unit>
        <trans-unit id="2257faa28ea2af0838b36329ac81b4299b5a11a1" translate="yes" xml:space="preserve">
          <source>Generally, the file needs to be generated during the build, since it needs some information known at build time only (e.g. prefix). This is mostly automatic if one uses the &lt;a href=&quot;#numpy.distutils.misc_util.Configuration&quot;&gt;&lt;code&gt;Configuration&lt;/code&gt;&lt;/a&gt; method &lt;code&gt;add_npy_pkg_config&lt;/code&gt;. Assuming we have a template file foo.ini.in as follows:</source>
          <target state="translated">通常、ファイルはビルド時にのみ既知の情報（プレフィックスなど）を必要とするため、ビルド中に生成する必要があります。&lt;a href=&quot;#numpy.distutils.misc_util.Configuration&quot;&gt; &lt;code&gt;Configuration&lt;/code&gt; &lt;/a&gt;メソッド &lt;code&gt;add_npy_pkg_config&lt;/code&gt; を使用する場合、これはほとんど自動です。次のようなテンプレートファイルfoo.ini.inがあると仮定します。</target>
        </trans-unit>
        <trans-unit id="57b3bfe4a96aaf1f0210aadbf43dc393e3a362c6" translate="yes" xml:space="preserve">
          <source>Generally, the file needs to be generated during the build, since it needs some information known at build time only (e.g. prefix). This is mostly automatic if one uses the &lt;code&gt;Configuration&lt;/code&gt; method &lt;code&gt;add_npy_pkg_config&lt;/code&gt;. Assuming we have a template file foo.ini.in as follows:</source>
          <target state="translated">通常、ファイルはビルド時にのみ既知のいくつかの情報（たとえば、プレフィックス）を必要とするため、ビルド中に生成する必要があります。これは、 &lt;code&gt;Configuration&lt;/code&gt; メソッド &lt;code&gt;add_npy_pkg_config&lt;/code&gt; を使用する場合、ほとんどが自動です。次のようなテンプレートファイルfoo.ini.inがあるとします。</target>
        </trans-unit>
        <trans-unit id="ba56532a4a3fb8146e876e1d3659dfdac724a189" translate="yes" xml:space="preserve">
          <source>Generate a 1 by 3 array with 3 different lower bounds</source>
          <target state="translated">3つの異なる下限値を持つ1×3の配列を生成します.</target>
        </trans-unit>
        <trans-unit id="3724c74e69c85b7924eab36b9e17078ea85e817c" translate="yes" xml:space="preserve">
          <source>Generate a 1 x 3 array with 3 different upper bounds</source>
          <target state="translated">3つの異なる上限値を持つ1 x 3の配列を生成する</target>
        </trans-unit>
        <trans-unit id="c78b4920f6305013e33283131f3991e4d5dda157" translate="yes" xml:space="preserve">
          <source>Generate a 2 by 4 array using broadcasting with dtype of uint8</source>
          <target state="translated">dtypeがuint8のブロードキャストを用いて2×4の配列を生成します.</target>
        </trans-unit>
        <trans-unit id="52ec8bca285ae5da030ea4680d276692f61c3804" translate="yes" xml:space="preserve">
          <source>Generate a 2 x 4 array of ints between 0 and 4, inclusive:</source>
          <target state="translated">0 から 4 までの間のイントの 2 x 4 配列を生成します。</target>
        </trans-unit>
        <trans-unit id="9e541c44f7aa5d7ed7acb09f3c0fe019e268af5e" translate="yes" xml:space="preserve">
          <source>Generate a Chebyshev series with given roots.</source>
          <target state="translated">与えられた根を持つチェビシェフ級数を生成します。</target>
        </trans-unit>
        <trans-unit id="0c791c1439e16e2fd0efb50c6644249b5b3eebb5" translate="yes" xml:space="preserve">
          <source>Generate a Hermite series with given roots.</source>
          <target state="translated">与えられた根を持つエルミート級数を生成します。</target>
        </trans-unit>
        <trans-unit id="8bd121a27d585c3734742539ee143a52ac9b73de" translate="yes" xml:space="preserve">
          <source>Generate a HermiteE series with given roots.</source>
          <target state="translated">与えられた根を持つHermiteE級数を生成します。</target>
        </trans-unit>
        <trans-unit id="a9d697582320e7c884bbfd6a03995e4b278f2c74" translate="yes" xml:space="preserve">
          <source>Generate a Laguerre series with given roots.</source>
          <target state="translated">与えられた根を持つラグエール級数を生成します。</target>
        </trans-unit>
        <trans-unit id="9fd152ea5ebdb08e6cd481a5737f68bdf9d18ad6" translate="yes" xml:space="preserve">
          <source>Generate a Legendre series with given roots.</source>
          <target state="translated">与えられた根を持つレジェンドレ級数を生成します。</target>
        </trans-unit>
        <trans-unit id="67cead80b0965ee4736c5f23fba251df4f3ebe37" translate="yes" xml:space="preserve">
          <source>Generate a Vandermonde matrix.</source>
          <target state="translated">バンダーモンド行列で生成します。</target>
        </trans-unit>
        <trans-unit id="f4b901c2336926f254f07d1ab7b60e0386e5b58c" translate="yes" xml:space="preserve">
          <source>Generate a monic polynomial with given roots.</source>
          <target state="translated">与えられた根を持つ単項多項式を生成します。</target>
        </trans-unit>
        <trans-unit id="2e173a5f3c2204af8ef7b9a77d34afee8c360a27" translate="yes" xml:space="preserve">
          <source>Generate a non-uniform random sample from np.arange(5) of size 3 without replacement:</source>
          <target state="translated">サイズ 3 の np.arange(5)から,置換を行わずに不均一なランダム標本を生成。</target>
        </trans-unit>
        <trans-unit id="3b032abdb8bc3ee596986f951aad13aeb29eff03" translate="yes" xml:space="preserve">
          <source>Generate a non-uniform random sample from np.arange(5) of size 3:</source>
          <target state="translated">サイズ 3 の np.arange(5)から非一様ランダム標本を生成。</target>
        </trans-unit>
        <trans-unit id="15beef8541c11b005861875826a071b16faf6c61" translate="yes" xml:space="preserve">
          <source>Generate a single integer</source>
          <target state="translated">単一の整数を生成する</target>
        </trans-unit>
        <trans-unit id="22ecb4243c3f96a98ea55b6a9b74781792dce996" translate="yes" xml:space="preserve">
          <source>Generate a uniform random sample from np.arange(5) of size 3 without replacement:</source>
          <target state="translated">サイズ 3 の np.arange(5)から,置換を行わずに一様なランダム標本を生成。</target>
        </trans-unit>
        <trans-unit id="7e7e8cdcfbc5d1d81d3a8108edeaf14a80335951" translate="yes" xml:space="preserve">
          <source>Generate a uniform random sample from np.arange(5) of size 3:</source>
          <target state="translated">サイズ 3 の np.arange(5)から一様なランダム標本を生成。</target>
        </trans-unit>
        <trans-unit id="382b425e693319395299c741c143ce2398939efe" translate="yes" xml:space="preserve">
          <source>Generate and install a npy-pkg config file from a template.</source>
          <target state="translated">テンプレートからnpy-pkgの設定ファイルを生成してインストールします。</target>
        </trans-unit>
        <trans-unit id="19a90f1dba170779ac0befe5afd3d6d9c884c6d1" translate="yes" xml:space="preserve">
          <source>Generate config.py file containing system_info information used during building the package.</source>
          <target state="translated">パッケージのビルド時に使用される system_info 情報を含む config.py ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="34c49c62f8886e09ca6e64b9c96074bf60926d62" translate="yes" xml:space="preserve">
          <source>Generate package __config__.py file containing system_info information used during building the package.</source>
          <target state="translated">パッケージのビルド時に使用した system_info 情報を含むパッケージ __config__.py ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="14952923eed9a754d36fbf7d9df88e59880c6dad" translate="yes" xml:space="preserve">
          <source>Generate package __svn_version__.py file from SVN revision number, it will be removed after python exits but will be available when sdist, etc commands are executed.</source>
          <target state="translated">SVN のリビジョン番号から __svn_version__.py パッケージを生成します。このファイルは python を終了すると削除されますが、sdist などのコマンドを実行したときに利用可能になります。</target>
        </trans-unit>
        <trans-unit id="60ff5f05cec532a7f8f7d819baeeb92b41c5296d" translate="yes" xml:space="preserve">
          <source>Generate random uint64 numbers in closed interval [off, off + rng].</source>
          <target state="translated">閉じた間隔[off,off+rng]でランダムなuint64数値を生成します。</target>
        </trans-unit>
        <trans-unit id="c8045f4bbe378a7866506cc0ecb5d877bf5eaf96" translate="yes" xml:space="preserve">
          <source>Generate the README files</source>
          <target state="translated">READMEファイルの生成</target>
        </trans-unit>
        <trans-unit id="7412730131bc368e3c0dcb289c20fbf2554245c4" translate="yes" xml:space="preserve">
          <source>Generate variates from a multivariate hypergeometric distribution.</source>
          <target state="translated">多変量双幾何分布から変量を生成します.</target>
        </trans-unit>
        <trans-unit id="3cd9212c9f1d53d55d853a3b264e1b6b858f35fd" translate="yes" xml:space="preserve">
          <source>Generates a random sample from a given 1-D array</source>
          <target state="translated">与えられた1次元配列からランダムなサンプルを生成します.</target>
        </trans-unit>
        <trans-unit id="d332ac6845c5273c1195174ec786fa2289b9b752" translate="yes" xml:space="preserve">
          <source>Generating author/pr lists</source>
          <target state="translated">著者/PRリストの生成</target>
        </trans-unit>
        <trans-unit id="150ce9aa76a74d0a43ead917a8c785193ed877b1" translate="yes" xml:space="preserve">
          <source>Generating index arrays</source>
          <target state="translated">インデックス配列の生成</target>
        </trans-unit>
        <trans-unit id="4bc72cf76a431fc1b67a969426c355ba5d2b3044" translate="yes" xml:space="preserve">
          <source>Generating random numbers</source>
          <target state="translated">乱数の生成</target>
        </trans-unit>
        <trans-unit id="1d20de03126b297e05c13a7d280f33e24c72c537" translate="yes" xml:space="preserve">
          <source>Generator</source>
          <target state="translated">Generator</target>
        </trans-unit>
        <trans-unit id="1a0d1bad0186174ecfcdc9782f2116277b7b05e0" translate="yes" xml:space="preserve">
          <source>Generator (class in numpy.random)</source>
          <target state="translated">ジェネレータ (numpy.random のクラス)</target>
        </trans-unit>
        <trans-unit id="2bb174c2f425e0d1a36b6da19833f5708052f5b2" translate="yes" xml:space="preserve">
          <source>Generator.beta()</source>
          <target state="translated">Generator.beta()</target>
        </trans-unit>
        <trans-unit id="5c54211367d38fc1c657f1a2b11682aa7073f8a0" translate="yes" xml:space="preserve">
          <source>Generator.binomial()</source>
          <target state="translated">Generator.binomial()</target>
        </trans-unit>
        <trans-unit id="d222082a3e85bc085f3813830709c1091b870201" translate="yes" xml:space="preserve">
          <source>Generator.bit_generator</source>
          <target state="translated">Generator.bit_generator</target>
        </trans-unit>
        <trans-unit id="ccf1aa45703830ef34744bdb91c5ee84eb339af2" translate="yes" xml:space="preserve">
          <source>Generator.bytes()</source>
          <target state="translated">Generator.bytes()</target>
        </trans-unit>
        <trans-unit id="a1e223f39e59656efb6dcd2b450fd1f3d11e0f5b" translate="yes" xml:space="preserve">
          <source>Generator.chisquare()</source>
          <target state="translated">Generator.chisquare()</target>
        </trans-unit>
        <trans-unit id="a2cf011c29fcb364a340b0b0739ed3940f0415ce" translate="yes" xml:space="preserve">
          <source>Generator.choice()</source>
          <target state="translated">Generator.choice()</target>
        </trans-unit>
        <trans-unit id="acb19d66e8b5e00bd8ab9eaa938d00f3718515fe" translate="yes" xml:space="preserve">
          <source>Generator.dirichlet()</source>
          <target state="translated">Generator.dirichlet()</target>
        </trans-unit>
        <trans-unit id="81c841ae15f138b1059c14b8ebc34f2ceb6506da" translate="yes" xml:space="preserve">
          <source>Generator.exponential()</source>
          <target state="translated">Generator.exponential()</target>
        </trans-unit>
        <trans-unit id="ceb6ee1b51ecd1875248d0ca388e0fb1daabb181" translate="yes" xml:space="preserve">
          <source>Generator.f()</source>
          <target state="translated">Generator.f()</target>
        </trans-unit>
        <trans-unit id="9a5544f1f1d846a0215be8277752788b52f5d5ae" translate="yes" xml:space="preserve">
          <source>Generator.gamma()</source>
          <target state="translated">Generator.gamma()</target>
        </trans-unit>
        <trans-unit id="cb698152656074b26c2b514594b6841ba98646e0" translate="yes" xml:space="preserve">
          <source>Generator.geometric()</source>
          <target state="translated">Generator.geometric()</target>
        </trans-unit>
        <trans-unit id="fbe271ee0cdf14a0b127e97b8a754332b21122bf" translate="yes" xml:space="preserve">
          <source>Generator.gumbel()</source>
          <target state="translated">Generator.gumbel()</target>
        </trans-unit>
        <trans-unit id="1bb4c4773f6c2e362f6bdc12b4738edbd30f23d2" translate="yes" xml:space="preserve">
          <source>Generator.hypergeometric()</source>
          <target state="translated">Generator.hypergeometric()</target>
        </trans-unit>
        <trans-unit id="c50dbdf77399f33f0754452bd827d7d9972e1f6e" translate="yes" xml:space="preserve">
          <source>Generator.integers()</source>
          <target state="translated">Generator.integers()</target>
        </trans-unit>
        <trans-unit id="2ac6ee43d1992ed473a404e92103ad981ee56dd8" translate="yes" xml:space="preserve">
          <source>Generator.laplace()</source>
          <target state="translated">Generator.laplace()</target>
        </trans-unit>
        <trans-unit id="9a01e0244542efabb99865e59014bd47d50fe182" translate="yes" xml:space="preserve">
          <source>Generator.logistic()</source>
          <target state="translated">Generator.logistic()</target>
        </trans-unit>
        <trans-unit id="c320801600fb9c31cc3d790a76584f303a266f0d" translate="yes" xml:space="preserve">
          <source>Generator.lognormal()</source>
          <target state="translated">Generator.lognormal()</target>
        </trans-unit>
        <trans-unit id="2133a52d0f531222ffd5b10595265bd407d65eae" translate="yes" xml:space="preserve">
          <source>Generator.logseries()</source>
          <target state="translated">Generator.logseries()</target>
        </trans-unit>
        <trans-unit id="3fb5b968b7c3c6e4334e366ce81b7d1c72dd0587" translate="yes" xml:space="preserve">
          <source>Generator.multinomial()</source>
          <target state="translated">Generator.multinomial()</target>
        </trans-unit>
        <trans-unit id="ee77530caf29c96157f8b247c28bc2729509bc1f" translate="yes" xml:space="preserve">
          <source>Generator.multivariate_normal()</source>
          <target state="translated">Generator.multivariate_normal()</target>
        </trans-unit>
        <trans-unit id="e4accfbbf5411ba4e6ed6190c6c4a4f347889476" translate="yes" xml:space="preserve">
          <source>Generator.negative_binomial()</source>
          <target state="translated">Generator.negative_binomial()</target>
        </trans-unit>
        <trans-unit id="f5c86d9e1ec54b1f6ceef69c6b35acbc51980bb9" translate="yes" xml:space="preserve">
          <source>Generator.noncentral_chisquare()</source>
          <target state="translated">Generator.noncentral_chisquare()</target>
        </trans-unit>
        <trans-unit id="4ffb9eb22957bfe4ccb8d5eb67072da9ed2c8fe8" translate="yes" xml:space="preserve">
          <source>Generator.noncentral_f()</source>
          <target state="translated">Generator.noncentral_f()</target>
        </trans-unit>
        <trans-unit id="155766b36ed963438beae39d25dc848285e67bec" translate="yes" xml:space="preserve">
          <source>Generator.normal()</source>
          <target state="translated">Generator.normal()</target>
        </trans-unit>
        <trans-unit id="b6ff7a92707e2ef9f9f69eb28c0f2a89afd2fb30" translate="yes" xml:space="preserve">
          <source>Generator.pareto()</source>
          <target state="translated">Generator.pareto()</target>
        </trans-unit>
        <trans-unit id="76efb5ddfe9997620fd07ade2a0e0cee44bb8c62" translate="yes" xml:space="preserve">
          <source>Generator.permutation()</source>
          <target state="translated">Generator.permutation()</target>
        </trans-unit>
        <trans-unit id="7a00012743deaf56311a785e2b3c42ad040930cb" translate="yes" xml:space="preserve">
          <source>Generator.poisson()</source>
          <target state="translated">Generator.poisson()</target>
        </trans-unit>
        <trans-unit id="9ebe8ebc29357762dc172bd7a50a6d2bbec0bbc0" translate="yes" xml:space="preserve">
          <source>Generator.power()</source>
          <target state="translated">Generator.power()</target>
        </trans-unit>
        <trans-unit id="760d539be436a9fd5786ef5406b94bdadd320519" translate="yes" xml:space="preserve">
          <source>Generator.random()</source>
          <target state="translated">Generator.random()</target>
        </trans-unit>
        <trans-unit id="4fe55f2eb5b58a57536abac4e6392ebd311bfe6e" translate="yes" xml:space="preserve">
          <source>Generator.rayleigh()</source>
          <target state="translated">Generator.rayleigh()</target>
        </trans-unit>
        <trans-unit id="3fff1d63fa4122d609dcfb229ec0499ef08a14a7" translate="yes" xml:space="preserve">
          <source>Generator.shuffle()</source>
          <target state="translated">Generator.shuffle()</target>
        </trans-unit>
        <trans-unit id="9b1634a618bfbc7c72035711945372ce07c3fe19" translate="yes" xml:space="preserve">
          <source>Generator.standard_cauchy()</source>
          <target state="translated">Generator.standard_cauchy()</target>
        </trans-unit>
        <trans-unit id="34db4ce80b61d7d21ff61b89aa2d2d63aa910f5c" translate="yes" xml:space="preserve">
          <source>Generator.standard_exponential()</source>
          <target state="translated">Generator.standard_exponential()</target>
        </trans-unit>
        <trans-unit id="34031ad3432250f012a4d89407bba35b84a16c3c" translate="yes" xml:space="preserve">
          <source>Generator.standard_gamma()</source>
          <target state="translated">Generator.standard_gamma()</target>
        </trans-unit>
        <trans-unit id="87dab3cf1af1d204bcf4e1ac664f4ea0ea2557c9" translate="yes" xml:space="preserve">
          <source>Generator.standard_normal()</source>
          <target state="translated">Generator.standard_normal()</target>
        </trans-unit>
        <trans-unit id="f906f6a0afddbf8cdbe07f5b8f0720c2656e3a0d" translate="yes" xml:space="preserve">
          <source>Generator.standard_t()</source>
          <target state="translated">Generator.standard_t()</target>
        </trans-unit>
        <trans-unit id="b0b2b3ce2c0360b1a89e482830d2d3c0cbab9581" translate="yes" xml:space="preserve">
          <source>Generator.triangular()</source>
          <target state="translated">Generator.triangular()</target>
        </trans-unit>
        <trans-unit id="ab3025f762e986dfbed9abf7722d638afcbcac65" translate="yes" xml:space="preserve">
          <source>Generator.uniform()</source>
          <target state="translated">Generator.uniform()</target>
        </trans-unit>
        <trans-unit id="41234839ae9e6c31f86b35be70f95dd2edfdb45f" translate="yes" xml:space="preserve">
          <source>Generator.vonmises()</source>
          <target state="translated">Generator.vonmises()</target>
        </trans-unit>
        <trans-unit id="524f7ff03bcd2538def6c2fcd08d18e053cd0a0d" translate="yes" xml:space="preserve">
          <source>Generator.wald()</source>
          <target state="translated">Generator.wald()</target>
        </trans-unit>
        <trans-unit id="e7d43ca17b95d21950576674e14eac05300d6600" translate="yes" xml:space="preserve">
          <source>Generator.weibull()</source>
          <target state="translated">Generator.weibull()</target>
        </trans-unit>
        <trans-unit id="425fdb323ea262485eeead85528e77951596ac23" translate="yes" xml:space="preserve">
          <source>Generator.zipf()</source>
          <target state="translated">Generator.zipf()</target>
        </trans-unit>
        <trans-unit id="b9790b2a609e0a0a9945eb7f9ff37cc7c5acb58d" translate="yes" xml:space="preserve">
          <source>Generators should be documented just as functions are documented. The only difference is that one should use the &lt;strong&gt;Yields&lt;/strong&gt; section instead of the &lt;strong&gt;Returns&lt;/strong&gt; section. Support for the &lt;strong&gt;Yields&lt;/strong&gt; section was added in &lt;a href=&quot;https://github.com/numpy/numpydoc&quot;&gt;numpydoc&lt;/a&gt; version 0.6.</source>
          <target state="translated">関数が文書化されているのと同じように、ジェネレーターも文書化する必要があります。唯一の違いは、&lt;strong&gt;Returns&lt;/strong&gt;セクションの代わりに&lt;strong&gt;Yields&lt;/strong&gt;セクションを使用する必要があることです。&lt;strong&gt;Yields&lt;/strong&gt;セクションのサポートは、&lt;a href=&quot;https://github.com/numpy/numpydoc&quot;&gt;numpydoc&lt;/a&gt;バージョン0.6で追加されました。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="df5e162e441d1aa68e920c4da50498c7a00cc1ca" translate="yes" xml:space="preserve">
          <source>Generators: Objects that transform sequences of random bits from a BitGenerator into sequences of numbers that follow a specific probability distribution (such as uniform, Normal or Binomial) within a specified interval.</source>
          <target state="translated">ジェネレータ。BitGeneratorからのランダムビットのシーケンスを、指定された間隔内で特定の確率分布(一様分布、正規分布、二項分布など)に従う数値のシーケンスに変換するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="fcca6d928c0647f440353ba62ca89c9a77b6389a" translate="yes" xml:space="preserve">
          <source>Generic Python-exception-derived object raised by linalg functions.</source>
          <target state="translated">linalg 関数によって生成される Python-exception 由来の汎用オブジェクト。</target>
        </trans-unit>
        <trans-unit id="37f5365cdbef14515226dcd384583192170cc525" translate="yes" xml:space="preserve">
          <source>Generic functions</source>
          <target state="translated">汎用関数</target>
        </trans-unit>
        <trans-unit id="36687e3d4c6e89be61413141c9001bd1269ea61f" translate="yes" xml:space="preserve">
          <source>Generic types</source>
          <target state="translated">汎用型</target>
        </trans-unit>
        <trans-unit id="4725fc543850e19ff2039cda197dd7e9e18cc3b7" translate="yes" xml:space="preserve">
          <source>Get a Python object of a builtin type from the ndarray, &lt;em&gt;arr&lt;/em&gt;, at the location pointed to by itemptr. Return &lt;code&gt;NULL&lt;/code&gt; on failure.</source>
          <target state="translated">itemptrが指す場所にあるndarray &lt;em&gt;arr&lt;/em&gt;から組み込み型のPythonオブジェクトを取得します。失敗した場合は &lt;code&gt;NULL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="89bba80c206cb8084a11e65d5dc5c897b6a8a686" translate="yes" xml:space="preserve">
          <source>Get a copy of the iterator as a 1-D array.</source>
          <target state="translated">イテレータのコピーを1次元配列として取得します。</target>
        </trans-unit>
        <trans-unit id="f7e3ab2dfabd54e64b9ac5580bc305e9c24165dc" translate="yes" xml:space="preserve">
          <source>Get a copy of the iterator in its current state.</source>
          <target state="translated">現在の状態のイテレータのコピーを取得します。</target>
        </trans-unit>
        <trans-unit id="87007e132eebf348c07afe83a50790715b0d7b52" translate="yes" xml:space="preserve">
          <source>Get a serializable descriptor from the dtype.</source>
          <target state="translated">dtypeからシリアル化可能なディスクリプターを取得します。</target>
        </trans-unit>
        <trans-unit id="6ebe75c1446477b5a3f24473d32f0a3cde8a8998" translate="yes" xml:space="preserve">
          <source>Get array data-descriptor.</source>
          <target state="translated">配列のデータディスクリプターを取得します。</target>
        </trans-unit>
        <trans-unit id="87b8e4a6c47eabed3fcd4c264f91d248484dbd8e" translate="yes" xml:space="preserve">
          <source>Get floating point status. A pointer to a local variable is passed in to prevent aggressive compiler optimizations from reodering this function call relative to the code setting the status, which could lead to incorrect results.</source>
          <target state="translated">浮動小数点のステータスを取得します。ローカル変数へのポインタが渡されると、コンパイラの最適化がこの関数呼び出しをステータスを設定するコードに対して相対的に変更することを防ぐために、誤った結果につながる可能性があります。</target>
        </trans-unit>
        <trans-unit id="c919c3aaf29bde2f7fadef95afc3436e547fc4bb" translate="yes" xml:space="preserve">
          <source>Get floating point status. A pointer to a local variable is passed in to prevent aggressive compiler optimizations from reordering this function call relative to the code setting the status, which could lead to incorrect results.</source>
          <target state="translated">浮動小数点のステータスを取得します。ローカル変数へのポインタが渡されると、コンパイラの最適化がこの関数呼び出しをステータスを設定するコードと相対的に並べ替えてしまい、誤った結果になることを防ぐために、ローカル変数へのポインタが渡されます。</target>
        </trans-unit>
        <trans-unit id="b27b9509ff4121a0e1b9f0986d9920de57d819f0" translate="yes" xml:space="preserve">
          <source>Get floating point status. Returns a bitmask with following possible flags:</source>
          <target state="translated">浮動小数点の状態を取得します。以下のフラグを持つビットマスクを返します。</target>
        </trans-unit>
        <trans-unit id="ddfceaf39034459b039832aa5e0f88a5294c648e" translate="yes" xml:space="preserve">
          <source>Get help information for a function, class, or module.</source>
          <target state="translated">関数、クラス、モジュールのヘルプ情報を取得します。</target>
        </trans-unit>
        <trans-unit id="ec25cf47cdd55b9b521bbdadbef69d3ea1d8e5a4" translate="yes" xml:space="preserve">
          <source>Get information about the step size of a date or time type.</source>
          <target state="translated">日付または時間タイプのステップサイズに関する情報を取得します。</target>
        </trans-unit>
        <trans-unit id="d0d9c57e1b16aa99fa5d9ab014f87b4ec73ded17" translate="yes" xml:space="preserve">
          <source>Get number of parallel build jobs set by the &amp;ndash;parallel command line argument of setup.py If the command did not receive a setting the environment variable NPY_NUM_BUILD_JOBS is checked. If that is unset, return the number of processors on the system, with a maximum of 8 (to prevent overloading the system if there a lot of CPUs).</source>
          <target state="translated">setup.pyの&amp;ndash;parallelコマンドライン引数によって設定された並列ビルドジョブの数を取得します。コマンドが設定を受け取らなかった場合、環境変数NPY_NUM_BUILD_JOBSがチェックされます。それが設定されていない場合は、システム上のプロセッサの数を最大8で返します（CPUが多い場合にシステムが過負荷になるのを防ぐため）。</target>
        </trans-unit>
        <trans-unit id="693a41351204b667429ed1f8f87172706e8b4a91" translate="yes" xml:space="preserve">
          <source>Get or set the PRNG state</source>
          <target state="translated">PRNG の状態を取得または設定します。</target>
        </trans-unit>
        <trans-unit id="09c0240016b842d9be6c9625e5a572e040565a6a" translate="yes" xml:space="preserve">
          <source>Get or set the mask of the array if it has no named fields.</source>
          <target state="translated">配列のマスクを取得または設定します。</target>
        </trans-unit>
        <trans-unit id="0a74bcddcc3142595e265c6f91c54ba0941f6e3f" translate="yes" xml:space="preserve">
          <source>Get or set the mask of the array if it has no named fields. For structured arrays, returns a ndarray of booleans where entries are &lt;code&gt;True&lt;/code&gt; if &lt;strong&gt;all&lt;/strong&gt; the fields are masked, &lt;code&gt;False&lt;/code&gt; otherwise:</source>
          <target state="translated">名前付きフィールドがない場合は、配列のマスクを取得または設定します。構造化配列の場合、ブール値のndarrayを返します。&lt;strong&gt;すべて&lt;/strong&gt;のフィールドがマスクされている場合はエントリが &lt;code&gt;True&lt;/code&gt; に&lt;strong&gt;なり&lt;/strong&gt;、そうでない場合は &lt;code&gt;False&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="c0ab6b2bea51cfebc1977ab8830dcd90e5d8f56d" translate="yes" xml:space="preserve">
          <source>Get resources information.</source>
          <target state="translated">リソース情報を入手する。</target>
        </trans-unit>
        <trans-unit id="7d41ad59188f890aeb1ed8209e30d553a33f1536" translate="yes" xml:space="preserve">
          <source>Get the Python values used for ufunc processing from the thread-local storage area unless the defaults have been set in which case the name lookup is bypassed. The name is placed as a string in the first element of &lt;em&gt;*errobj&lt;/em&gt;. The second element is the looked-up function to call on error callback. The value of the looked-up buffer-size to use is passed into &lt;em&gt;bufsize&lt;/em&gt;, and the value of the error mask is placed into &lt;em&gt;errmask&lt;/em&gt;.</source>
          <target state="translated">デフォルトが設定されていない限り、スレッドローカルストレージ領域からufunc処理に使用されるPython値を取得します。デフォルトが設定されている場合、名前の検索はバイパスされます。名前は&lt;em&gt;* errobjの&lt;/em&gt;最初の要素に文字列として配置されます。2番目の要素は、エラーコールバックで呼び出すルックアップ関数です。使用するルックアップされたバッファサイズの値が&lt;em&gt;bufsize&lt;/em&gt;に渡され、エラーマスクの値が&lt;em&gt;errmaskに&lt;/em&gt;配置され&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b42cef4d77cbf66bab7c534b082e6107163dee92" translate="yes" xml:space="preserve">
          <source>Get the current way of handling floating-point errors.</source>
          <target state="translated">浮動小数点エラーの現在の処理方法を取得します。</target>
        </trans-unit>
        <trans-unit id="a3515ff2e2849783558090ab689766335d448845" translate="yes" xml:space="preserve">
          <source>Get the dictionary of header metadata from a numpy.ndarray.</source>
          <target state="translated">numpy.ndarrayからヘッダメタデータの辞書を取得します。</target>
        </trans-unit>
        <trans-unit id="1ad2852f86c694e329d03e73d07b76a105a8cebc" translate="yes" xml:space="preserve">
          <source>Get the local copy of the code</source>
          <target state="translated">コードのローカルコピーを取得する</target>
        </trans-unit>
        <trans-unit id="2a1b740f8025f19530f67b712588ba731f33b4b5" translate="yes" xml:space="preserve">
          <source>Get the mailing list&amp;rsquo;s opinion</source>
          <target state="translated">メーリングリストの意見を聞く</target>
        </trans-unit>
        <trans-unit id="695f3e243afdf261b45538304791ad040f8d34f0" translate="yes" xml:space="preserve">
          <source>Get the number of dimensions of an array</source>
          <target state="translated">配列の次元数を取得します</target>
        </trans-unit>
        <trans-unit id="38abfcd88f93b84356fd5ce9430a9a3bce6aa97e" translate="yes" xml:space="preserve">
          <source>Get the shape of the array and a pointer to its actual data.</source>
          <target state="translated">配列の形状と実際のデータへのポインタを取得します。</target>
        </trans-unit>
        <trans-unit id="47b4332f0fd288d9a8660cb9b90eb2d70399cb30" translate="yes" xml:space="preserve">
          <source>Getitem/setitem/copyswap function: Similar to ufuncs, these functions generally have two code paths. If &lt;code&gt;ALIGNED&lt;/code&gt; is False they will use a code path that buffers the arguments so they are true-aligned.</source>
          <target state="translated">Getitem / setitem / copyswap関数：ufuncsと同様に、これらの関数には通常2つのコードパスがあります。 &lt;code&gt;ALIGNED&lt;/code&gt; がFalseの場合は、引数をバッファリングするコードパスを使用して、Trueに揃えられます。</target>
        </trans-unit>
        <trans-unit id="be9042cc4b8d1c2a38a88090c5bbf827e249e726" translate="yes" xml:space="preserve">
          <source>Gets an array of strides which are fixed, or will not change during the entire iteration. For strides that may change, the value NPY_MAX_INTP is placed in the stride.</source>
          <target state="translated">固定されているか、または繰り返しの間に変更されないストライドの配列を取得します。変更される可能性のあるストライドについては、値 NPY_MAX_INTP がストライドに格納されます。</target>
        </trans-unit>
        <trans-unit id="30fc1fed71b9648bc39ebe85c632c9c96d68765c" translate="yes" xml:space="preserve">
          <source>Gets the &lt;code&gt;iterindex&lt;/code&gt; of the iterator, which is an index matching the iteration order of the iterator.</source>
          <target state="translated">イテレータの反復順序に一致するインデックスであるイテレータの &lt;code&gt;iterindex&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="c9217aeddd13f7d6ea905e46252fcb27732c6211" translate="yes" xml:space="preserve">
          <source>Gets the &lt;code&gt;iterindex&lt;/code&gt; sub-range that is being iterated. If &lt;a href=&quot;#c.NPY_ITER_RANGED&quot;&gt;&lt;code&gt;NPY_ITER_RANGED&lt;/code&gt;&lt;/a&gt; was not specified, this always returns the range &lt;code&gt;[0, NpyIter_IterSize(iter))&lt;/code&gt;.</source>
          <target state="translated">反復されている &lt;code&gt;iterindex&lt;/code&gt; サブ範囲を取得します。&lt;a href=&quot;#c.NPY_ITER_RANGED&quot;&gt; &lt;code&gt;NPY_ITER_RANGED&lt;/code&gt; &lt;/a&gt;が指定されていない場合、これは常に範囲 &lt;code&gt;[0, NpyIter_IterSize(iter))&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="b29099a868ef51a061ab01f34d141a4b26e68b87" translate="yes" xml:space="preserve">
          <source>Gets the array of data pointers directly into the arrays (never into the buffers), corresponding to iteration index 0.</source>
          <target state="translated">データポインタの配列を,反復インデックス 0 に対応する配列に直接(バッファには決して入れません)取得します.</target>
        </trans-unit>
        <trans-unit id="ad1880ff271cb91c83bb908e9bec8d5e682e13f9" translate="yes" xml:space="preserve">
          <source>Gets the array of strides for the specified axis. Requires that the iterator be tracking a multi-index, and that buffering not be enabled.</source>
          <target state="translated">指定された軸の歩幅の配列を取得します。イテレータが複数のインデックスを追跡していることと、バッファリングが有効になっていないことが必要です。</target>
        </trans-unit>
        <trans-unit id="cbcc80db035da4f014fe2b35abfcfb7fdf954c8c" translate="yes" xml:space="preserve">
          <source>Gets the bit generator instance used by the generator</source>
          <target state="translated">ジェネレータが使用するビットジェネレータのインスタンスを取得します。</target>
        </trans-unit>
        <trans-unit id="d159fd31101fbca3940d95031521a0aa1cca2dba" translate="yes" xml:space="preserve">
          <source>Getting at ndarray memory and accessing elements of the ndarray</source>
          <target state="translated">ndarrayのメモリを取得し、ndarrayの要素にアクセスする</target>
        </trans-unit>
        <trans-unit id="1a46b1f79c63a304cb32357fb767b2f9f13f63b7" translate="yes" xml:space="preserve">
          <source>Getting extra Fortran 77 compiler options from source</source>
          <target state="translated">ソースからFortran 77コンパイラのオプションを追加で取得する</target>
        </trans-unit>
        <trans-unit id="40231bcdbc4a93a29a6d8b82096fcd17f9064444" translate="yes" xml:space="preserve">
          <source>Getting started with Git development</source>
          <target state="translated">Git 開発を始めるにあたって</target>
        </trans-unit>
        <trans-unit id="44a67759e2faf7084b39d19d3457bdd8b15ee0fc" translate="yes" xml:space="preserve">
          <source>Getting your PR reviewed</source>
          <target state="translated">PRの見直し</target>
        </trans-unit>
        <trans-unit id="16e47f4c54647389b910573011e6826ea1e0a912" translate="yes" xml:space="preserve">
          <source>Git Basics</source>
          <target state="translated">Git の基本</target>
        </trans-unit>
        <trans-unit id="dfff37d55b9830b2f87d05fbf99d4f09fbfa666c" translate="yes" xml:space="preserve">
          <source>Git configuration</source>
          <target state="translated">Git設定</target>
        </trans-unit>
        <trans-unit id="1c5717316487921ed9c21d808282281daa39b5a4" translate="yes" xml:space="preserve">
          <source>Git for development</source>
          <target state="translated">開発のためのGit</target>
        </trans-unit>
        <trans-unit id="62cbb73206931d6c5b9ae31c184bc49486ee1eb6" translate="yes" xml:space="preserve">
          <source>Git will then immediately bring up an editor for editing the commit message. After revising it, we get the output:</source>
          <target state="translated">すると、Gitはすぐにコミットメッセージを編集するためのエディタを表示します。それを修正した後、出力を取得します。</target>
        </trans-unit>
        <trans-unit id="b921f982571c01ce7cb6f536b3e77eda32e15376" translate="yes" xml:space="preserve">
          <source>GitHub Workflow</source>
          <target state="translated">GitHubのワークフロー</target>
        </trans-unit>
        <trans-unit id="1adcbfda881a779a35ee45bce592fd5b70ba61b5" translate="yes" xml:space="preserve">
          <source>Give a brief but explicit answer</source>
          <target state="translated">簡潔で明確な答えを出す</target>
        </trans-unit>
        <trans-unit id="fed2b47c2eb6fcb9566d8e5b338ef20c663258ac" translate="yes" xml:space="preserve">
          <source>Give a new shape to an array without changing its data.</source>
          <target state="translated">配列のデータを変更せずに新しい形状を与えます。</target>
        </trans-unit>
        <trans-unit id="a577ea656c2f3aa2b8af6ec81a5f57008704a3bb" translate="yes" xml:space="preserve">
          <source>Give a new shape to the array without changing its data.</source>
          <target state="translated">配列のデータを変更せずに新しい形状を与えます。</target>
        </trans-unit>
        <trans-unit id="41715e18a150ce4ffd8181520dab988c818a96bb" translate="yes" xml:space="preserve">
          <source>Give the name &lt;code&gt;upstream&lt;/code&gt; to the main NumPy repo:</source>
          <target state="translated">メインのNumPyリポジトリの &lt;code&gt;upstream&lt;/code&gt; に名前を付けます。</target>
        </trans-unit>
        <trans-unit id="5633a94c306e1317df951f106e430c35db17233f" translate="yes" xml:space="preserve">
          <source>Given a sequence of a polynomial&amp;rsquo;s zeros:</source>
          <target state="translated">多項式のゼロのシーケンスが与えられた場合：</target>
        </trans-unit>
        <trans-unit id="4cc543f62ec648afbd60f8c46e36515054ff8b40" translate="yes" xml:space="preserve">
          <source>Given a sequence of arrays (&lt;em&gt;sort_keys&lt;/em&gt;) of the same shape, return an array of indices (similar to &lt;a href=&quot;#c.PyArray_ArgSort&quot;&gt;&lt;code&gt;PyArray_ArgSort&lt;/code&gt;&lt;/a&gt; (&amp;hellip;)) that would sort the arrays lexicographically. A lexicographic sort specifies that when two keys are found to be equal, the order is based on comparison of subsequent keys. A merge sort (which leaves equal entries unmoved) is required to be defined for the types. The sort is accomplished by sorting the indices first using the first &lt;em&gt;sort_key&lt;/em&gt; and then using the second &lt;em&gt;sort_key&lt;/em&gt; and so forth. This is equivalent to the lexsort(&lt;em&gt;sort_keys&lt;/em&gt;, &lt;em&gt;axis&lt;/em&gt;) Python command. Because of the way the merge-sort works, be sure to understand the order the &lt;em&gt;sort_keys&lt;/em&gt; must be in (reversed from the order you would use when comparing two elements).</source>
          <target state="translated">同じ形状の一連の配列（&lt;em&gt;sort_keys&lt;/em&gt;）を指定すると、配列を辞書順にソートするインデックスの配列（&lt;a href=&quot;#c.PyArray_ArgSort&quot;&gt; &lt;code&gt;PyArray_ArgSort&lt;/code&gt; &lt;/a&gt;（&amp;hellip;）と同様）を返します。辞書式ソートは、2つのキーが等しいことが判明した場合、順序は後続のキーの比較に基づくことを指定します。タイプには、マージソート（等しいエントリを移動しないままにする）を定義する必要があります。並べ替えは、最初に最初の&lt;em&gt;sort_key&lt;/em&gt;を使用してインデックスを並べ替え、次に2番目の&lt;em&gt;sort_key&lt;/em&gt;を使用して並べ替えます。これはlexsort（&lt;em&gt;sort_keys&lt;/em&gt;、&lt;em&gt;axis&lt;/em&gt;）Pythonコマンドと同等です。 merge-sortの動作方法のため、&lt;em&gt;sort_keys&lt;/em&gt;の順序を必ず理解して&lt;em&gt;ください&lt;/em&gt; でなければなりません（2つの要素を比較するときに使用する順序とは逆です）。</target>
        </trans-unit>
        <trans-unit id="675ac4930884c9f7a3554ad9fd66c39834a06013" translate="yes" xml:space="preserve">
          <source>Given a set of conditions and corresponding functions, evaluate each function on the input data wherever its condition is true.</source>
          <target state="translated">一連の条件と対応する関数が与えられたら、その条件が真であれば入力データ上で各関数を評価してください。</target>
        </trans-unit>
        <trans-unit id="9104557d433ccbecbd40d5b471167b269afd4924" translate="yes" xml:space="preserve">
          <source>Given a shape of, for example, &lt;code&gt;(m,n,k)&lt;/code&gt;, &lt;code&gt;m*n*k&lt;/code&gt; samples are generated, and packed in an &lt;code&gt;m&lt;/code&gt;-by-&lt;code&gt;n&lt;/code&gt;-by-&lt;code&gt;k&lt;/code&gt; arrangement. Because each sample is &lt;code&gt;N&lt;/code&gt;-dimensional, the output shape is &lt;code&gt;(m,n,k,N)&lt;/code&gt;. If no shape is specified, a single (&lt;code&gt;N&lt;/code&gt;-D) sample is returned.</source>
          <target state="translated">形状を考えると、例えば、 &lt;code&gt;(m,n,k)&lt;/code&gt; 、 &lt;code&gt;m*n*k&lt;/code&gt; サンプルが生成され、且つに充填 &lt;code&gt;m&lt;/code&gt; 行列 &lt;code&gt;n&lt;/code&gt; 行列 &lt;code&gt;k&lt;/code&gt; 配置。各サンプルは &lt;code&gt;N&lt;/code&gt; 次元であるため、出力形状は &lt;code&gt;(m,n,k,N)&lt;/code&gt; です。形状が指定されていない場合、単一の（ &lt;code&gt;N&lt;/code&gt; -D）サンプルが返されます。</target>
        </trans-unit>
        <trans-unit id="cd43bd0b568c4a20eb55e09b56aec26e4bcf57e8" translate="yes" xml:space="preserve">
          <source>Given a square array object:</source>
          <target state="translated">正方形の配列オブジェクトが与えられます。</target>
        </trans-unit>
        <trans-unit id="c727e55b5284efd4b0f949a20f79f07a731a7def" translate="yes" xml:space="preserve">
          <source>Given a square matrix &lt;code&gt;a&lt;/code&gt;, return the matrix &lt;code&gt;ainv&lt;/code&gt; satisfying &lt;code&gt;dot(a, ainv) = dot(ainv, a) = eye(a.shape[0])&lt;/code&gt;.</source>
          <target state="translated">正方行列 &lt;code&gt;a&lt;/code&gt; を指定すると、 &lt;code&gt;dot(a, ainv) = dot(ainv, a) = eye(a.shape[0])&lt;/code&gt; を満たす行列 &lt;code&gt;ainv&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="fc3ba91f03af5d3e0b135a4d459d0b8c153beab2" translate="yes" xml:space="preserve">
          <source>Given a vector &lt;code&gt;V&lt;/code&gt; of length &lt;code&gt;N&lt;/code&gt;, the &lt;code&gt;q&lt;/code&gt;-th percentile of &lt;code&gt;V&lt;/code&gt; is the value &lt;code&gt;q/100&lt;/code&gt; of the way from the minimum to the maximum in a sorted copy of &lt;code&gt;V&lt;/code&gt;. The values and distances of the two nearest neighbors as well as the &lt;code&gt;interpolation&lt;/code&gt; parameter will determine the percentile if the normalized ranking does not match the location of &lt;code&gt;q&lt;/code&gt; exactly. This function is the same as the median if &lt;code&gt;q=50&lt;/code&gt;, the same as the minimum if &lt;code&gt;q=0&lt;/code&gt; and the same as the maximum if &lt;code&gt;q=100&lt;/code&gt;.</source>
          <target state="translated">ベクトル所与 &lt;code&gt;V&lt;/code&gt; 長さの &lt;code&gt;N&lt;/code&gt; 、 &lt;code&gt;q&lt;/code&gt; 番目のパーセンタイルの &lt;code&gt;V&lt;/code&gt; された値 &lt;code&gt;q/100&lt;/code&gt; のソートされたコピーの最大最小から道の &lt;code&gt;V&lt;/code&gt; 。正規化されたランキングが &lt;code&gt;q&lt;/code&gt; の位置と正確に一致しない場合、2つの最近傍の値と距離、および &lt;code&gt;interpolation&lt;/code&gt; パラメーターがパーセンタイルを決定します。この関数は、 &lt;code&gt;q=50&lt;/code&gt; の場合は中央値と同じであり、 &lt;code&gt;q=0&lt;/code&gt; の場合は最小値と同じであり、 &lt;code&gt;q=100&lt;/code&gt; の場合は最大値と同じです。</target>
        </trans-unit>
        <trans-unit id="1966cedf9ce61fd3a211e32f4abbb9573112f3e8" translate="yes" xml:space="preserve">
          <source>Given a vector &lt;code&gt;V&lt;/code&gt; of length &lt;code&gt;N&lt;/code&gt;, the median of &lt;code&gt;V&lt;/code&gt; is the middle value of a sorted copy of &lt;code&gt;V&lt;/code&gt;, &lt;code&gt;V_sorted&lt;/code&gt; - i e., &lt;code&gt;V_sorted[(N-1)/2]&lt;/code&gt;, when &lt;code&gt;N&lt;/code&gt; is odd, and the average of the two middle values of &lt;code&gt;V_sorted&lt;/code&gt; when &lt;code&gt;N&lt;/code&gt; is even.</source>
          <target state="translated">ベクトル所与 &lt;code&gt;V&lt;/code&gt; 長 &lt;code&gt;N&lt;/code&gt; を、中央値 &lt;code&gt;V&lt;/code&gt; は、のソートコピーの中央値である &lt;code&gt;V&lt;/code&gt; 、 &lt;code&gt;V_sorted&lt;/code&gt; すなわち、 - &lt;code&gt;V_sorted[(N-1)/2]&lt;/code&gt; 場合、 &lt;code&gt;N&lt;/code&gt; は奇数との平均であります &lt;code&gt;N&lt;/code&gt; が偶数の場合、 &lt;code&gt;V_sorted&lt;/code&gt; の 2つの中間値。</target>
        </trans-unit>
        <trans-unit id="a11a60c1be0b2a1a4251da19f3ebb410f0917d80" translate="yes" xml:space="preserve">
          <source>Given a vector &lt;code&gt;V&lt;/code&gt; of length &lt;code&gt;N&lt;/code&gt;, the median of &lt;code&gt;V&lt;/code&gt; is the middle value of a sorted copy of &lt;code&gt;V&lt;/code&gt;, &lt;code&gt;V_sorted&lt;/code&gt; - i.e., &lt;code&gt;V_sorted[(N-1)/2]&lt;/code&gt;, when &lt;code&gt;N&lt;/code&gt; is odd and the average of the two middle values of &lt;code&gt;V_sorted&lt;/code&gt; when &lt;code&gt;N&lt;/code&gt; is even.</source>
          <target state="translated">ベクトル所与 &lt;code&gt;V&lt;/code&gt; 長 &lt;code&gt;N&lt;/code&gt; を、中央値 &lt;code&gt;V&lt;/code&gt; は、のソートコピーの中央値である &lt;code&gt;V&lt;/code&gt; 、 &lt;code&gt;V_sorted&lt;/code&gt; すなわち、 - &lt;code&gt;V_sorted[(N-1)/2]&lt;/code&gt; 場合、 &lt;code&gt;N&lt;/code&gt; は奇数と2つの中間の値の平均であります &lt;code&gt;N&lt;/code&gt; が偶数の場合の &lt;code&gt;V_sorted&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="d76c2715df60bdab25092c54104462a6d39f23bb" translate="yes" xml:space="preserve">
          <source>Given a vector &lt;code&gt;V&lt;/code&gt; of length &lt;code&gt;N&lt;/code&gt;, the q-th percentile of &lt;code&gt;V&lt;/code&gt; is the value &lt;code&gt;q/100&lt;/code&gt; of the way from the minimum to the maximum in a sorted copy of &lt;code&gt;V&lt;/code&gt;. The values and distances of the two nearest neighbors as well as the &lt;code&gt;interpolation&lt;/code&gt; parameter will determine the percentile if the normalized ranking does not match the location of &lt;code&gt;q&lt;/code&gt; exactly. This function is the same as the median if &lt;code&gt;q=50&lt;/code&gt;, the same as the minimum if &lt;code&gt;q=0&lt;/code&gt; and the same as the maximum if &lt;code&gt;q=100&lt;/code&gt;.</source>
          <target state="translated">ベクトル所与 &lt;code&gt;V&lt;/code&gt; 長さ &lt;code&gt;N&lt;/code&gt; のQ番目のパーセンタイル &lt;code&gt;V&lt;/code&gt; が値である &lt;code&gt;q/100&lt;/code&gt; のソートされたコピーの最大最小から道の &lt;code&gt;V&lt;/code&gt; 。正規化されたランキングが &lt;code&gt;q&lt;/code&gt; の位置と正確に一致しない場合、2つの最近傍の値と距離、および &lt;code&gt;interpolation&lt;/code&gt; パラメーターがパーセンタイルを決定します。この関数は、 &lt;code&gt;q=50&lt;/code&gt; の場合は中央値と同じであり、 &lt;code&gt;q=0&lt;/code&gt; の場合は最小値と同じであり、 &lt;code&gt;q=100&lt;/code&gt; の場合は最大値と同じです。</target>
        </trans-unit>
        <trans-unit id="dfd59ffc41fbed91404c5101ddfa184c5392006b" translate="yes" xml:space="preserve">
          <source>Given a vector &lt;code&gt;V&lt;/code&gt; of length &lt;code&gt;N&lt;/code&gt;, the q-th quantile of &lt;code&gt;V&lt;/code&gt; is the value &lt;code&gt;q&lt;/code&gt; of the way from the minimum to the maximum in a sorted copy of &lt;code&gt;V&lt;/code&gt;. The values and distances of the two nearest neighbors as well as the &lt;code&gt;interpolation&lt;/code&gt; parameter will determine the quantile if the normalized ranking does not match the location of &lt;code&gt;q&lt;/code&gt; exactly. This function is the same as the median if &lt;code&gt;q=0.5&lt;/code&gt;, the same as the minimum if &lt;code&gt;q=0.0&lt;/code&gt; and the same as the maximum if &lt;code&gt;q=1.0&lt;/code&gt;.</source>
          <target state="translated">ベクトル所与 &lt;code&gt;V&lt;/code&gt; 長さの &lt;code&gt;N&lt;/code&gt; のq番目の分位数 &lt;code&gt;V&lt;/code&gt; が値である &lt;code&gt;q&lt;/code&gt; のソートコピーにおける最大最小から道の &lt;code&gt;V&lt;/code&gt; 。正規化されたランキングが &lt;code&gt;q&lt;/code&gt; の位置と正確に一致しない場合、2つの最近傍の値と距離、および &lt;code&gt;interpolation&lt;/code&gt; パラメーターが分位点を決定します。この関数は、 &lt;code&gt;q=0.5&lt;/code&gt; の場合は中央値と同じであり、 &lt;code&gt;q=0.0&lt;/code&gt; の場合は最小値と同じであり、 &lt;code&gt;q=1.0&lt;/code&gt; の場合は最大値と同じです。</target>
        </trans-unit>
        <trans-unit id="97afe1ab394be8a96329790e96c805504acf970b" translate="yes" xml:space="preserve">
          <source>Given a vector &lt;code&gt;V&lt;/code&gt; with &lt;code&gt;N&lt;/code&gt; non masked values, the median of &lt;code&gt;V&lt;/code&gt; is the middle value of a sorted copy of &lt;code&gt;V&lt;/code&gt; (&lt;code&gt;Vs&lt;/code&gt;) - i.e. &lt;code&gt;Vs[(N-1)/2]&lt;/code&gt;, when &lt;code&gt;N&lt;/code&gt; is odd, or &lt;code&gt;{Vs[N/2 - 1] + Vs[N/2]}/2&lt;/code&gt; when &lt;code&gt;N&lt;/code&gt; is even.</source>
          <target state="translated">マスクされていない &lt;code&gt;N&lt;/code&gt; 個の値を持つベクトル &lt;code&gt;V&lt;/code&gt; が与えられた場合、 &lt;code&gt;V&lt;/code&gt; の中央値は、 &lt;code&gt;V&lt;/code&gt; （ &lt;code&gt;Vs&lt;/code&gt; ）のソートされたコピーの中央値、つまり &lt;code&gt;Vs[(N-1)/2]&lt;/code&gt; で、 &lt;code&gt;N&lt;/code&gt; が奇数の場合、または &lt;code&gt;{Vs[N/2 - 1] + Vs[N/2]}/2&lt;/code&gt; &lt;code&gt;N&lt;/code&gt; 偶数です。</target>
        </trans-unit>
        <trans-unit id="2f958084a15b1cea997fb4f3882497b30e2d92da" translate="yes" xml:space="preserve">
          <source>Given a window length &lt;code&gt;n&lt;/code&gt; and a sample spacing &lt;code&gt;d&lt;/code&gt;:</source>
          <target state="translated">ウィンドウの長さが &lt;code&gt;n&lt;/code&gt; で、サンプルの間隔が &lt;code&gt;d&lt;/code&gt; の場合：</target>
        </trans-unit>
        <trans-unit id="3cf50be3014d334ce381b3182c6e22be99505ba7" translate="yes" xml:space="preserve">
          <source>Given an &amp;ldquo;index&amp;rdquo; array (&lt;code&gt;a&lt;/code&gt;) of integers and a sequence of &lt;code&gt;n&lt;/code&gt; arrays (&lt;code&gt;choices&lt;/code&gt;), &lt;code&gt;a&lt;/code&gt; and each choice array are first broadcast, as necessary, to arrays of a common shape; calling these &lt;em&gt;Ba&lt;/em&gt; and &lt;em&gt;Bchoices[i], i = 0,&amp;hellip;,n-1&lt;/em&gt; we have that, necessarily, &lt;code&gt;Ba.shape == Bchoices[i].shape&lt;/code&gt; for each &lt;code&gt;i&lt;/code&gt;. Then, a new array with shape &lt;code&gt;Ba.shape&lt;/code&gt; is created as follows:</source>
          <target state="translated">整数の「インデックス」配列（ &lt;code&gt;a&lt;/code&gt; ）と &lt;code&gt;n&lt;/code&gt; 個の配列（ &lt;code&gt;choices&lt;/code&gt; ）のシーケンスが与えられると、 &lt;code&gt;a&lt;/code&gt; と各choice配列は、必要に応じて、最初に共通の形状の配列にブロードキャストされます。これらの&lt;em&gt;Ba&lt;/em&gt;および&lt;em&gt;Bchoices [i]、i = 0、&amp;hellip;、n-1&lt;/em&gt;を &lt;code&gt;Ba.shape == Bchoices[i].shape&lt;/code&gt; と、必然的に、各 &lt;code&gt;i&lt;/code&gt; に対してBa.shape == Bchoices [i] .shapeになります。次に、形状が &lt;code&gt;Ba.shape&lt;/code&gt; の新しい配列が次のように作成されます。</target>
        </trans-unit>
        <trans-unit id="182d11d96136738a2da66eeca81246c173e18b8d" translate="yes" xml:space="preserve">
          <source>Given an array of integers and a set of n choice arrays, this method will create a new array that merges each of the choice arrays. Where a value in &lt;code&gt;a&lt;/code&gt; is i, the new array will have the value that choices[i] contains in the same place.</source>
          <target state="translated">整数の配列とn個の選択配列のセットを指定すると、このメソッドは、各選択配列をマージする新しい配列を作成します。値はどこiは、新しい配列が選択肢[i]は、同じ場所に含まれている値を持つことになります。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e37e450d620d60b14cee7269755ab57ba8f06da4" translate="yes" xml:space="preserve">
          <source>Given an interval, values outside the interval are clipped to the interval edges. For example, if an interval of &lt;code&gt;[0, 1]&lt;/code&gt; is specified, values smaller than 0 become 0, and values larger than 1 become 1.</source>
          <target state="translated">間隔を指定すると、間隔外の値は間隔の端にクリップされます。たとえば、 &lt;code&gt;[0, 1]&lt;/code&gt; 間隔が指定されている場合、0より小さい値は0になり、1より大きい値は1になります。</target>
        </trans-unit>
        <trans-unit id="38e44e10395d6cbc3f11e11b2660a79eed5fd62a" translate="yes" xml:space="preserve">
          <source>Given multiple sorting keys, which can be interpreted as columns in a spreadsheet, lexsort returns an array of integer indices that describes the sort order by multiple columns. The last key in the sequence is used for the primary sort order, the second-to-last key for the secondary sort order, and so on. The keys argument must be a sequence of objects that can be converted to arrays of the same shape. If a 2D array is provided for the keys argument, it&amp;rsquo;s rows are interpreted as the sorting keys and sorting is according to the last row, second last row etc.</source>
          <target state="translated">スプレッドシートの列として解釈できる複数の並べ替えキーが指定されている場合、lexsortは複数の列による並べ替え順序を説明する整数インデックスの配列を返します。シーケンスの最後のキーは一次ソート順に使用され、最後から2番目のキーは二次ソート順に使用されます。keys引数は、同じ形状の配列に変換できるオブジェクトのシーケンスでなければなりません。keys引数に2D配列が指定されている場合、その行は並べ替えキーとして解釈され、並べ替えは最後の行、2番目の最後の行などに従って行われます。</target>
        </trans-unit>
        <trans-unit id="bcbd60ed302ecb4de642c2dac63a654ff76626bc" translate="yes" xml:space="preserve">
          <source>Given multiple sorting keys, which can be interpreted as columns in a spreadsheet, lexsort returns an array of integer indices that describes the sort order by multiple columns. The last key in the sequence is used for the primary sort order, the second-to-last key for the secondary sort order, and so on. The keys argument must be a sequence of objects that can be converted to arrays of the same shape. If a 2D array is provided for the keys argument, its rows are interpreted as the sorting keys and sorting is according to the last row, second last row etc.</source>
          <target state="translated">スプレッドシートの列として解釈できる複数のソートキーが与えられると,lexxort は複数の列によるソート順を表す整数のインデックスの配列を返します.配列中の最後のキーが第1のソート順に,最後から2番目のキーが第2のソート順に,というように使われます。引数 keys には、同じ形状の配列に変換可能なオブジェクトのシーケンスを指定する必要があります。もしkeysに2次元配列が与えられた場合、その行はソートキーとして解釈され、最後の行、最後から2番目の行などにしたがってソートされます。</target>
        </trans-unit>
        <trans-unit id="67d67e5173e989786e884148ab1ee5c292352200" translate="yes" xml:space="preserve">
          <source>Given the &amp;ldquo;legs&amp;rdquo; of a right triangle, return its hypotenuse.</source>
          <target state="translated">直角三角形の「脚」を考えて、その斜辺を返します。</target>
        </trans-unit>
        <trans-unit id="65f0e0f7ab08e6e7d473538fe0c4ef0f86fa2404" translate="yes" xml:space="preserve">
          <source>Given the above, we intend to deprecate &lt;code&gt;matrix&lt;/code&gt; eventually.</source>
          <target state="translated">上記を考慮して、最終的には &lt;code&gt;matrix&lt;/code&gt; を非推奨にする予定です。</target>
        </trans-unit>
        <trans-unit id="fd7a5a167593ffa963306f804bdee09ec39e8fd9" translate="yes" xml:space="preserve">
          <source>Given the shape of an array, an &lt;a href=&quot;#numpy.ndindex&quot;&gt;&lt;code&gt;ndindex&lt;/code&gt;&lt;/a&gt; instance iterates over the N-dimensional index of the array. At each iteration a tuple of indices is returned, the last dimension is iterated over first.</source>
          <target state="translated">配列の形状を指定すると、&lt;a href=&quot;#numpy.ndindex&quot;&gt; &lt;code&gt;ndindex&lt;/code&gt; &lt;/a&gt;インスタンスは配列のN次元のインデックスを反復処理します。各反復で、インデックスのタプルが返され、最後の次元が最初に繰り返されます。</target>
        </trans-unit>
        <trans-unit id="6d84cece4ac6198159f79505d6fa6346cdc3c584" translate="yes" xml:space="preserve">
          <source>Given two &lt;em&gt;n&lt;/em&gt; -length arrays of integers, &lt;em&gt;l1&lt;/em&gt;, and &lt;em&gt;l2&lt;/em&gt;, return 1 if the lists are identical; otherwise, return 0.</source>
          <target state="translated">整数の2つの&lt;em&gt;n&lt;/em&gt;長の配列&lt;em&gt;l1&lt;/em&gt;と&lt;em&gt;l2が&lt;/em&gt;与えられ、リストが同一の場合は1を返します。それ以外の場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="b4d93ad7919330e367279622118fac9cd99eb66a" translate="yes" xml:space="preserve">
          <source>Given two array_like objects, check that the shape is equal and all elements of the first object are strictly smaller than those of the second object. An exception is raised at shape mismatch or incorrectly ordered values. Shape mismatch does not raise if an object has zero dimension. In contrast to the standard usage in numpy, NaNs are compared, no assertion is raised if both objects have NaNs in the same positions.</source>
          <target state="translated">2つのarray_likeオブジェクトが与えられた場合,形状が等しく,最初のオブジェクトのすべての要素が2番目のオブジェクトの要素よりも厳密に小さいことを確認します.形状の不一致や順序が正しくない値の場合は例外が発生します。形状の不一致は、オブジェクトの次元がゼロの場合には発生しません。numpyの標準的な使い方とは対照的に、NaNが比較され、両方のオブジェクトが同じ位置にNaNを持っている場合はアサーションは発生しません。</target>
        </trans-unit>
        <trans-unit id="33ed5b3e4d203313d72bfb61344b0ef20252735e" translate="yes" xml:space="preserve">
          <source>Given two array_like objects, check that the shape is equal and all elements of these objects are equal (but see the Notes for the special handling of a scalar). An exception is raised at shape mismatch or conflicting values. In contrast to the standard usage in numpy, NaNs are compared like numbers, no assertion is raised if both objects have NaNs in the same positions.</source>
          <target state="translated">2つのarray_likeオブジェクトが与えられた場合,形状が等しく,これらのオブジェクトのすべての要素が等しいことをチェックします(ただし,スカラの特殊な取り扱いについては注意事項を参照してください).形状の不一致や値が矛盾している場合は例外が発生します。numpy の標準的な使い方とは対照的に、NaN は数字と同じように比較され、両方のオブジェクトが同じ位置に NaN を持っている場合はアサーションは発生しません。</target>
        </trans-unit>
        <trans-unit id="90fdf131a8e234662a4baf7342d5cbfdd8815673" translate="yes" xml:space="preserve">
          <source>Given two array_like objects, check that the shape is equal and all elements of these objects are equal. An exception is raised at shape mismatch or conflicting values. In contrast to the standard usage in numpy, NaNs are compared like numbers, no assertion is raised if both objects have NaNs in the same positions.</source>
          <target state="translated">2つのarray_likeオブジェクトが与えられた場合,形状が等しく,これらのオブジェクトのすべての要素が等しいことをチェックします.形状の不一致や値が矛盾している場合は例外が発生します。numpyの標準的な使い方とは対照的に、NaNは数字のように比較され、両方のオブジェクトが同じ位置にNaNを持っている場合はアサーションは発生しません。</target>
        </trans-unit>
        <trans-unit id="03c045ae56fa8df86b5ce72f657667f3cc594e54" translate="yes" xml:space="preserve">
          <source>Given two numbers, check that they are approximately equal. Approximately equal is defined as the number of significant digits that agree.</source>
          <target state="translated">2つの数字が与えられたとき、それらがほぼ等しいことを確認してください。ほぼ等しいとは、一致する有効数字の数と定義されています。</target>
        </trans-unit>
        <trans-unit id="d9d002c83204235df23caf3ec14f4354842036c7" translate="yes" xml:space="preserve">
          <source>Given two objects (scalars, lists, tuples, dictionaries or numpy arrays), check that all elements of these objects are equal. An exception is raised at the first conflicting values.</source>
          <target state="translated">2つのオブジェクト(スカラ、リスト、タプル、辞書、numpy配列)が与えられた場合、これらのオブジェクトのすべての要素が等しいことをチェックします。最初に矛盾する値があった場合は例外が発生します.</target>
        </trans-unit>
        <trans-unit id="9d61f0f6669477d0eddf6043188e0f420dad8728" translate="yes" xml:space="preserve">
          <source>Given two polynomials &lt;code&gt;a1&lt;/code&gt; and &lt;code&gt;a2&lt;/code&gt;, returns &lt;code&gt;a1 - a2&lt;/code&gt;. &lt;code&gt;a1&lt;/code&gt; and &lt;code&gt;a2&lt;/code&gt; can be either array_like sequences of the polynomials&amp;rsquo; coefficients (including coefficients equal to zero), or &lt;a href=&quot;numpy.poly1d#numpy.poly1d&quot;&gt;&lt;code&gt;poly1d&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">2つの多項式 &lt;code&gt;a1&lt;/code&gt; と &lt;code&gt;a2&lt;/code&gt; を指定すると、 &lt;code&gt;a1 - a2&lt;/code&gt; 返します。 &lt;code&gt;a1&lt;/code&gt; と &lt;code&gt;a2&lt;/code&gt; は、多項式の係数のarray_likeシーケンス（ゼロに等しい係数を含む）、または&lt;a href=&quot;numpy.poly1d#numpy.poly1d&quot;&gt; &lt;code&gt;poly1d&lt;/code&gt; &lt;/a&gt;オブジェクトのいずれかです。</target>
        </trans-unit>
        <trans-unit id="8737cb46ba6778426f460962013153a76a798f04" translate="yes" xml:space="preserve">
          <source>Given two tensors, &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, and an array_like object containing two array_like objects, &lt;code&gt;(a_axes, b_axes)&lt;/code&gt;, sum the products of &lt;code&gt;a&lt;/code&gt;&amp;rsquo;s and &lt;code&gt;b&lt;/code&gt;&amp;rsquo;s elements (components) over the axes specified by &lt;code&gt;a_axes&lt;/code&gt; and &lt;code&gt;b_axes&lt;/code&gt;. The third argument can be a single non-negative integer_like scalar, &lt;code&gt;N&lt;/code&gt;; if it is such, then the last &lt;code&gt;N&lt;/code&gt; dimensions of &lt;code&gt;a&lt;/code&gt; and the first &lt;code&gt;N&lt;/code&gt; dimensions of &lt;code&gt;b&lt;/code&gt; are summed over.</source>
          <target state="translated">2つのテンソル、所与及び &lt;code&gt;b&lt;/code&gt; 、及びオブジェクトarray_like 2つ含むarray_likeオブジェクト &lt;code&gt;(a_axes, b_axes)&lt;/code&gt; 、製品の合計のと &lt;code&gt;b&lt;/code&gt; で指定された軸上の要素（成分） &lt;code&gt;a_axes&lt;/code&gt; と &lt;code&gt;b_axes&lt;/code&gt; 。3番目の引数は、単一の非負のinteger_likeスカラー &lt;code&gt;N&lt;/code&gt; にすることができます。そのような場合には、最後 &lt;code&gt;N&lt;/code&gt; の寸法と第一 &lt;code&gt;N&lt;/code&gt; の寸法 &lt;code&gt;b&lt;/code&gt; が上加算されます。 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1bcbaa6d418fa3c95df027de6ff9d3bb5387a091" translate="yes" xml:space="preserve">
          <source>Given two vectors, &lt;code&gt;a = [a0, a1, ..., aM]&lt;/code&gt; and &lt;code&gt;b = [b0, b1, ..., bN]&lt;/code&gt;, the outer product &lt;a href=&quot;#r14e6c54b746b-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; is:</source>
          <target state="translated">2つのベクトル &lt;code&gt;a = [a0, a1, ..., aM]&lt;/code&gt; と &lt;code&gt;b = [b0, b1, ..., bN]&lt;/code&gt; 与えられると、外積&lt;a href=&quot;#r14e6c54b746b-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;は次のようになります。</target>
        </trans-unit>
        <trans-unit id="3854728349ae7af32452ae7e4400a155448f9794" translate="yes" xml:space="preserve">
          <source>Given two vectors, &lt;code&gt;a = [a0, a1, ..., aM]&lt;/code&gt; and &lt;code&gt;b = [b0, b1, ..., bN]&lt;/code&gt;, the outer product &lt;a href=&quot;#r863504129d6e-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; is:</source>
          <target state="translated">2つのベクトル &lt;code&gt;a = [a0, a1, ..., aM]&lt;/code&gt; と &lt;code&gt;b = [b0, b1, ..., bN]&lt;/code&gt; 与えられると、外積&lt;a href=&quot;#r863504129d6e-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;は次のようになります。</target>
        </trans-unit>
        <trans-unit id="80ea28027215a4aa397564db3b7818bf4ec592b8" translate="yes" xml:space="preserve">
          <source>Given two vectors, &lt;code&gt;a = [a0, a1, ..., aM]&lt;/code&gt; and &lt;code&gt;b = [b0, b1, ..., bN]&lt;/code&gt;, the outer product &lt;a href=&quot;#rf0d57dd5badd-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; is:</source>
          <target state="translated">2つのベクトル &lt;code&gt;a = [a0, a1, ..., aM]&lt;/code&gt; と &lt;code&gt;b = [b0, b1, ..., bN]&lt;/code&gt; 与えられると、外積&lt;a href=&quot;#rf0d57dd5badd-1&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;は次のようになります。</target>
        </trans-unit>
        <trans-unit id="4975cd64a92e88880758085eef7772db2bdb4f4d" translate="yes" xml:space="preserve">
          <source>Given:</source>
          <target state="translated">Given:</target>
        </trans-unit>
        <trans-unit id="882e099811dae6ac151e6bf8446fa672be3c6225" translate="yes" xml:space="preserve">
          <source>Gives a list of the names to exclude, such as &lt;code&gt;return&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;, &lt;code&gt;print&lt;/code&gt;&amp;hellip; If one of the input name is part of this list, an underscore character (&lt;code&gt;'_'&lt;/code&gt;) will be appended to it.</source>
          <target state="translated">&lt;code&gt;return&lt;/code&gt; 、 &lt;code&gt;file&lt;/code&gt; 、 &lt;code&gt;print&lt;/code&gt; などの除外する名前のリストを提供します&amp;hellip;入力名の1つがこのリストの一部である場合、下線文字（ &lt;code&gt;'_'&lt;/code&gt; ）がそれに追加されます。</target>
        </trans-unit>
        <trans-unit id="8020f30b057521f3745170a52c99adab4537c734" translate="yes" xml:space="preserve">
          <source>Gives a new shape to an array without changing its data.</source>
          <target state="translated">データを変更せずに配列に新しい形状を与えます。</target>
        </trans-unit>
        <trans-unit id="1175f81a358d9e3f38210901aaa9e95baea2d5bc" translate="yes" xml:space="preserve">
          <source>Gives a string combining all the characters that must be deleted from the name. By default, invalid characters are &lt;code&gt;~!@#$%^&amp;amp;*()-=+~\|]}[{';:
/?.&amp;gt;,&amp;lt;&lt;/code&gt;.</source>
          <target state="translated">名前から削除する必要があるすべての文字を組み合わせた文字列を提供します。デフォルトでは、無効な文字は &lt;code&gt;~!@#$%^&amp;amp;*()-=+~\|]}[{';: /?.&amp;gt;,&amp;lt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5f6df81d1943f224253f7e8824d4f6d90b5a6fd6" translate="yes" xml:space="preserve">
          <source>Glantz, Stanton A. &amp;ldquo;Primer of Biostatistics.&amp;rdquo;, McGraw-Hill, Fifth Edition, 2002.</source>
          <target state="translated">グランツ、スタントンA.「プライマーの生物統計学」、マグローヒル、第5版、2002年。</target>
        </trans-unit>
        <trans-unit id="98ce8e321806dbb3b91df4ce336400b327d82b05" translate="yes" xml:space="preserve">
          <source>Global State</source>
          <target state="translated">グローバル国家</target>
        </trans-unit>
        <trans-unit id="7427cf697be16a4ec1d916910128a59d920125e7" translate="yes" xml:space="preserve">
          <source>Glossary</source>
          <target state="translated">Glossary</target>
        </trans-unit>
        <trans-unit id="b5455baaf8bb77490bac48f282fc705e080b078c" translate="yes" xml:space="preserve">
          <source>Go to &lt;a href=&quot;https://github.com/numpy/numpy&quot;&gt;https://github.com/numpy/numpy&lt;/a&gt; and click the &amp;ldquo;fork&amp;rdquo; button to create your own copy of the project.</source>
          <target state="translated">移動し&lt;a href=&quot;https://github.com/numpy/numpy&quot;&gt;https://github.com/numpy/numpy&lt;/a&gt;、プロジェクトのあなた自身のコピーを作成するために、「フォーク」ボタンをクリックしてください。</target>
        </trans-unit>
        <trans-unit id="e307ec71f941bf50bb0ca58211aaf38b07c21cec" translate="yes" xml:space="preserve">
          <source>Go to &lt;a href=&quot;https://github.com/numpy/numpy/releases&quot;&gt;https://github.com/numpy/numpy/releases&lt;/a&gt;, there should be a &lt;code&gt;v1.14.5
tag&lt;/code&gt;, click on it and hit the edit button for that tag. There are two ways to add files, using an editable text window and as binary uploads.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/numpy/numpy/releases&quot;&gt;https://github.com/numpy/numpy/releasesにアクセス&lt;/a&gt;します &lt;code&gt;v1.14.5 tag&lt;/code&gt; があるはずです。それをクリックして、そのタグの編集ボタンを押します。ファイルを追加するには、編集可能なテキストウィンドウを使用する方法と、バイナリアップロードとして使用する方法の2つがあります。</target>
        </trans-unit>
        <trans-unit id="ed8a62e7348cf073697e66839cff7484d1d38105" translate="yes" xml:space="preserve">
          <source>Go to &lt;a href=&quot;https://github.com/numpy/numpy/releases&quot;&gt;https://github.com/numpy/numpy/releases&lt;/a&gt;, there should be a &lt;code&gt;v1.19.0
tag&lt;/code&gt;, click on it and hit the edit button for that tag. There are two ways to add files, using an editable text window and as binary uploads. Cut and paste the &lt;code&gt;release/README.md&lt;/code&gt; file contents into the text window. You will probably need to make some edits to get it to look right. Then</source>
          <target state="translated">行く&lt;a href=&quot;https://github.com/numpy/numpy/releases&quot;&gt;https://github.com/numpy/numpy/releases&lt;/a&gt;があるはず、 &lt;code&gt;v1.19.0 tag&lt;/code&gt; 、それをクリックし、そのタグの編集ボタンを押してください。ファイルを追加するには、編集可能なテキストウィンドウを使用する方法と、バイナリアップロードとして使用する方法の2つがあります。 &lt;code&gt;release/README.md&lt;/code&gt; ファイルの内容を切り取ってテキストウィンドウに貼り付けます。正しく表示するには、おそらくいくつかの編集を行う必要があります。その後、</target>
        </trans-unit>
        <trans-unit id="5a55f17953adb4e53b1ccccc7c663a01a1165b91" translate="yes" xml:space="preserve">
          <source>Go to GitHub. The new branch will show up with a green Pull Request button. Make sure the title and message are clear, concise, and self- explanatory. Then click the button to submit it.</source>
          <target state="translated">GitHub に移動します。新しいブランチが緑色の Pull Request ボタンで表示されます。タイトルとメッセージが明確で簡潔、自己説明的であることを確認してください。そしてボタンをクリックして提出します。</target>
        </trans-unit>
        <trans-unit id="69980c4426505922b99957185231ede61f777564" translate="yes" xml:space="preserve">
          <source>Go to github and make a PR.</source>
          <target state="translated">githubに行ってPRする。</target>
        </trans-unit>
        <trans-unit id="bb0c75662080ceb97dedb20703369eded0631af1" translate="yes" xml:space="preserve">
          <source>Go to the &lt;a href=&quot;https://github.com/numpy/numpy&quot;&gt;NumPy GitHub home&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/numpy/numpy&quot;&gt;NumPyGitHubホームに&lt;/a&gt;移動します。</target>
        </trans-unit>
        <trans-unit id="a46869e8de50d59c9c1645cda5ce89ba58d2c65a" translate="yes" xml:space="preserve">
          <source>Go to the &lt;a href=&quot;https://www.numpy.org&quot;&gt;NumPy&lt;/a&gt; github home at &lt;a href=&quot;https://github.com/numpy/numpy&quot;&gt;NumPy github&lt;/a&gt;.</source>
          <target state="translated">行く&lt;a href=&quot;https://www.numpy.org&quot;&gt;numpyのの&lt;/a&gt;のgithubのホーム&lt;a href=&quot;https://github.com/numpy/numpy&quot;&gt;numpyのgithubの&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cb3f0c82f9a531318bc29fd46c7f891f5c55b9a1" translate="yes" xml:space="preserve">
          <source>Good for wrapping large (many functions) existing C libraries</source>
          <target state="translated">大規模な(多くの関数を含む)既存の C ライブラリをラップするのに適しています。</target>
        </trans-unit>
        <trans-unit id="7575b45e9c9e8a73a854ae2b8b5199197bc11d2e" translate="yes" xml:space="preserve">
          <source>Google has no guidance, or</source>
          <target state="translated">グーグルはガイダンスがない、というか</target>
        </trans-unit>
        <trans-unit id="69bb06bd200ddbdceda42084b415b9a92259f61a" translate="yes" xml:space="preserve">
          <source>Google offers two free &lt;a href=&quot;https://developers.google.com/tech-writing&quot;&gt;Technical Writing Courses&lt;/a&gt;</source>
          <target state="translated">Googleは2つの無料&lt;a href=&quot;https://developers.google.com/tech-writing&quot;&gt;テクニカルライティングコースを&lt;/a&gt;提供しています</target>
        </trans-unit>
        <trans-unit id="823619e079c311b099f1d0e427a584eafcd6ed06" translate="yes" xml:space="preserve">
          <source>Governance</source>
          <target state="translated">Governance</target>
        </trans-unit>
        <trans-unit id="99a7f06ad80d74e23ee701e64001d24ce844ca07" translate="yes" xml:space="preserve">
          <source>Gradient is calculated only along the given axis or axes The default (axis = None) is to calculate the gradient for all the axes of the input array. axis may be negative, in which case it counts from the last to the first axis.</source>
          <target state="translated">デフォルト(axis=None)は、入力配列のすべての軸に対して勾配を計算します。</target>
        </trans-unit>
        <trans-unit id="61aa58c2b09a3034acae73f52494d42574c0ca1c" translate="yes" xml:space="preserve">
          <source>Gradient is calculated using N-th order accurate differences at the boundaries. Default: 1.</source>
          <target state="translated">勾配は、 境界での N 次の正確な差分を用いて計算されます。デフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="f8982c84d1a3d63e1d8553471af2f5475b02499f" translate="yes" xml:space="preserve">
          <source>Grammatical issues inadequately addressed by the NumPy or Google rules are decided by the section on &amp;ldquo;Grammar and Usage&amp;rdquo; in the most recent edition of the &lt;a href=&quot;https://en.wikipedia.org/wiki/The_Chicago_Manual_of_Style&quot;&gt;Chicago Manual of Style&lt;/a&gt;.</source>
          <target state="translated">NumPyまたはGoogleのルールで不適切に対処されている文法上の問題は、&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Chicago_Manual_of_Style&quot;&gt;シカゴマニュアルオブスタイルの&lt;/a&gt;最新版の「文法と使用法」のセクションで決定されています。</target>
        </trans-unit>
        <trans-unit id="ea0fcf87d2287941521d49f814fee6c705ce244c" translate="yes" xml:space="preserve">
          <source>Graphical illustration of &lt;code&gt;endpoint&lt;/code&gt; parameter:</source>
          <target state="translated">&lt;code&gt;endpoint&lt;/code&gt; パラメータの図解：</target>
        </trans-unit>
        <trans-unit id="bb4d80637c2066c9e7bffa72841d8f27a47b292b" translate="yes" xml:space="preserve">
          <source>Graphical illustration:</source>
          <target state="translated">グラフィカルなイラスト。</target>
        </trans-unit>
        <trans-unit id="4a52fe6ab66ec52ee6bfd51d48518f7de2e194f9" translate="yes" xml:space="preserve">
          <source>Greater consistency in &lt;code&gt;assert_almost_equal&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;assert_almost_equal&lt;/code&gt; の一貫性が向上</target>
        </trans-unit>
        <trans-unit id="55d14a2a20cf23aef24c6cf5ba97cf49567e1739" translate="yes" xml:space="preserve">
          <source>Greedy &lt;a href=&quot;#numpy.einsum&quot;&gt;&lt;code&gt;einsum&lt;/code&gt;&lt;/a&gt; (faster optimal path approximation): ~160ms</source>
          <target state="translated">貪欲な&lt;a href=&quot;#numpy.einsum&quot;&gt; &lt;code&gt;einsum&lt;/code&gt; &lt;/a&gt;（より高速な最適パス近似）：〜160ms</target>
        </trans-unit>
        <trans-unit id="f6534be852374768c36e7beef74b1f4199fef68a" translate="yes" xml:space="preserve">
          <source>Grid-shaped arrays of evenly spaced numbers in N-dimensions.</source>
          <target state="translated">N次元の等間隔の数値の格子状の配列。</target>
        </trans-unit>
        <trans-unit id="d291656cb315e59b3437432c3e771768a130826d" translate="yes" xml:space="preserve">
          <source>Group 1</source>
          <target state="translated">グループ1</target>
        </trans-unit>
        <trans-unit id="374327355d21f90b289f6f435aa2da5d797f0ae6" translate="yes" xml:space="preserve">
          <source>Group 2</source>
          <target state="translated">グループ2</target>
        </trans-unit>
        <trans-unit id="843698a0f4f972fb83c7b6d5ba379d852811fab9" translate="yes" xml:space="preserve">
          <source>Groups and Policies</source>
          <target state="translated">グループとポリシー</target>
        </trans-unit>
        <trans-unit id="f5ac35811e25f377d3ea665e7f41177582e5b116" translate="yes" xml:space="preserve">
          <source>Guaranteeing safe aligned access for ufuncs/setitem/casting code</source>
          <target state="translated">ufuncs/setitem/キャスティングコードの安全な整列アクセスの保証</target>
        </trans-unit>
        <trans-unit id="f454c80c182290ac641c3ab02a9edcdbe149e617" translate="yes" xml:space="preserve">
          <source>Guide to writing Tutorials (TODO)</source>
          <target state="translated">チュートリアルの書き方ガイド(TODO</target>
        </trans-unit>
        <trans-unit id="7d49ac2fe6a93b218baff7cae5e0e60393e7661a" translate="yes" xml:space="preserve">
          <source>Guide to writing reference (API) documentation: the numpydoc docstring guide</source>
          <target state="translated">リファレンス(API)ドキュメントを書くためのガイド:numpydocのdocstringガイド</target>
        </trans-unit>
        <trans-unit id="141d1d74d8a6b3e7a7f1418ef539a53ce746ef34" translate="yes" xml:space="preserve">
          <source>Guidelines</source>
          <target state="translated">Guidelines</target>
        </trans-unit>
        <trans-unit id="fefaa04c360e4a9e3930a2840029cc9f56039f5f" translate="yes" xml:space="preserve">
          <source>Gumbel, E. J., &amp;ldquo;Statistics of Extremes,&amp;rdquo; New York: Columbia University Press, 1958.</source>
          <target state="translated">ガンベル、EJ、「極値の統計」、ニューヨーク：コロンビア大学出版局、1958年。</target>
        </trans-unit>
        <trans-unit id="7cf184f4c67ad58283ecb19349720b0cae756829" translate="yes" xml:space="preserve">
          <source>H</source>
          <target state="translated">H</target>
        </trans-unit>
        <trans-unit id="a23a715b33c5262fe3d1b937504a94f4b675a4b6" translate="yes" xml:space="preserve">
          <source>H() (numpy.matrix property)</source>
          <target state="translated">H()(numpy.matrixプロパティ)</target>
        </trans-unit>
        <trans-unit id="b40b37f0341f572e1998e910b25532a92af5b558" translate="yes" xml:space="preserve">
          <source>Hack away! See &lt;a href=&quot;#editing-workflow&quot;&gt;below&lt;/a&gt;</source>
          <target state="translated">ハックアウェイ！&lt;a href=&quot;#editing-workflow&quot;&gt;以下を&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="3ecd57d6fb3350fcd694b91496d526594622dbb6" translate="yes" xml:space="preserve">
          <source>Half precision float: sign bit, 5 bits exponent, 10 bits mantissa</source>
          <target state="translated">半精度フロート:符号ビット、5ビット指数、10ビット正数</target>
        </trans-unit>
        <trans-unit id="297ad7f2c6ead81564e94efe3061b8f926b4dea8" translate="yes" xml:space="preserve">
          <source>Half-precision floating-point number type.</source>
          <target state="translated">半精度浮動小数点数タイプ。</target>
        </trans-unit>
        <trans-unit id="c895f403bde1ed69e17f92c19862768cc5f5de8d" translate="yes" xml:space="preserve">
          <source>Half-precision functions</source>
          <target state="translated">半精度機能</target>
        </trans-unit>
        <trans-unit id="188b61888bd344a019188c5ddd9af8e491599b6a" translate="yes" xml:space="preserve">
          <source>Hand-generated wrappers</source>
          <target state="translated">手作りのラッパー</target>
        </trans-unit>
        <trans-unit id="636dbc8830ea645ecf6015e1f4a6dd1accda26f4" translate="yes" xml:space="preserve">
          <source>Handled by &lt;a href=&quot;#c.NpyIter_MultiNew&quot;&gt;&lt;code&gt;NpyIter_MultiNew&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;#c.NpyIter_MultiNew&quot;&gt; &lt;code&gt;NpyIter_MultiNew&lt;/code&gt; &lt;/a&gt;によって処理されます</target>
        </trans-unit>
        <trans-unit id="7178628eaa2183565412d3981a3508d31193d4b5" translate="yes" xml:space="preserve">
          <source>Handling complex numbers</source>
          <target state="translated">複雑な数値の取り扱い</target>
        </trans-unit>
        <trans-unit id="0294f5e8c997832af6154aa5a34d3bc487dacc89" translate="yes" xml:space="preserve">
          <source>Handling of higher-dimensional arrays (ndim &amp;gt; 2)</source>
          <target state="translated">高次元配列の処理（ndim&amp;gt; 2）</target>
        </trans-unit>
        <trans-unit id="29536b0ea00b813744dd07cc20d7e2d652df9775" translate="yes" xml:space="preserve">
          <source>Handling of vectors (one-dimensional arrays)</source>
          <target state="translated">ベクトル(一次元配列)の取り扱い</target>
        </trans-unit>
        <trans-unit id="e090b4f7922057771e37447008f952ba8b43192c" translate="yes" xml:space="preserve">
          <source>Handling the &lt;code&gt;axis&lt;/code&gt; parameter</source>
          <target state="translated">&lt;code&gt;axis&lt;/code&gt; パラメータの処理</target>
        </trans-unit>
        <trans-unit id="210d84fcc7fb5c4b75800916312424c57f881c7b" translate="yes" xml:space="preserve">
          <source>Handling the &lt;code&gt;fill_value&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fill_value&lt;/code&gt; の処理</target>
        </trans-unit>
        <trans-unit id="7e59976d95e4c0283fbcfa38c1a2f893c3bfd15d" translate="yes" xml:space="preserve">
          <source>Handling the mask</source>
          <target state="translated">マスクの取り扱い</target>
        </trans-unit>
        <trans-unit id="78dcc8157bbf5d134fc488651952052da7016437" translate="yes" xml:space="preserve">
          <source>Hard-coded dimensions, data-buffer-then-dimensions specification, and dimensions-then-data-buffer specification.</source>
          <target state="translated">ハードコードされたディメンション、データバッファ-then-dimensions指定、ディメンション-then-data-buffer指定。</target>
        </trans-unit>
        <trans-unit id="edfcf418a2bb124e6b8ce652d8bb7600c0be7269" translate="yes" xml:space="preserve">
          <source>Hardness of the mask</source>
          <target state="translated">マスクの硬さ</target>
        </trans-unit>
        <trans-unit id="a06e8ccba0be0394ad2df2eedd04a51d1a1039c5" translate="yes" xml:space="preserve">
          <source>Has no effect, do not use.</source>
          <target state="translated">効果はありませんので、使用しないでください。</target>
        </trans-unit>
        <trans-unit id="4669500ffada7a9acbed3d1bf7fceec5a930f074" translate="yes" xml:space="preserve">
          <source>Has the same shape as &lt;code&gt;element&lt;/code&gt;. The values &lt;code&gt;element[isin]&lt;/code&gt; are in &lt;code&gt;test_elements&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;element&lt;/code&gt; と同じ形状です。 &lt;code&gt;element[isin]&lt;/code&gt; の値は &lt;code&gt;test_elements&lt;/code&gt; にあります。</target>
        </trans-unit>
        <trans-unit id="2d794659e95706af6481a92a9285f876ae1c7d63" translate="yes" xml:space="preserve">
          <source>Have a look at the &lt;a href=&quot;https://github.com/numpy/numpy&quot;&gt;github&lt;/a&gt; install help pages available from &lt;a href=&quot;https://help.github.com&quot;&gt;github help&lt;/a&gt;</source>
          <target state="translated">見てい&lt;a href=&quot;https://github.com/numpy/numpy&quot;&gt;githubのを&lt;/a&gt;から入手ヘルプページインストール&lt;a href=&quot;https://help.github.com&quot;&gt;githubのヘルプを&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="2ab4d88ad951423d45baeab75192e5801e748751" translate="yes" xml:space="preserve">
          <source>Have a shared library.</source>
          <target state="translated">共有ライブラリを持つ。</target>
        </trans-unit>
        <trans-unit id="d944005e31393bd466d7655b38df2b420878ca75" translate="yes" xml:space="preserve">
          <source>Having a shared library</source>
          <target state="translated">共有ライブラリを持つこと</target>
        </trans-unit>
        <trans-unit id="f62bdff9b904bdda1a1ed9ed602657769f3345fd" translate="yes" xml:space="preserve">
          <source>Having compiled code also means that importing NumPy from the development sources needs some additional steps, which are explained below. For the rest of this chapter we assume that you have set up your git repo as described in &lt;a href=&quot;gitwash/index#using-git&quot;&gt;Git for development&lt;/a&gt;.</source>
          <target state="translated">コードをコンパイルしたということは、開発ソースからNumPyをインポートするには、以下で説明するいくつかの追加手順が必要であることも意味します。この章の残りの部分では、&lt;a href=&quot;gitwash/index#using-git&quot;&gt;Git fordevelopmentで&lt;/a&gt;説明されているようにgitリポジトリを設定していることを前提としています。</target>
        </trans-unit>
        <trans-unit id="ce7b6e9a18227e2359efe8c98f693affe997e690" translate="yes" xml:space="preserve">
          <source>Heckert, N. A. and Filliben, James J. &amp;ldquo;NIST Handbook 148: Dataplot Reference Manual, Volume 2: Let Subcommands and Library Functions&amp;rdquo;, National Institute of Standards and Technology Handbook Series, June 2003. &lt;a href=&quot;https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/powpdf.pdf&quot;&gt;https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/powpdf.pdf&lt;/a&gt;</source>
          <target state="translated">Heckert、NAおよびFilliben、James J.「NISTハンドブック148：データプロットリファレンスマニュアル、第2巻：Letサブコマンドとライブラリ関数」、国立標準技術研究所ハンドブックシリーズ、2003年6月&lt;a href=&quot;https://www.itl.nist.gov/div898/software/dataplot/refman2/auxillar/powpdf.pdf&quot;&gt;。https：//www.itl.nist。 gov / div898 / software / dataplot / refman2 / auxillar / powpdf.pdf&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="f25b2d1977ec1a7cc15a3fe3ee364cef6feeebb6" translate="yes" xml:space="preserve">
          <source>Help increase engagement in good discussion practice: try to identify where discussion may have broken down and provide actionable information, pointers and resources that can lead to positive change on these points.</source>
          <target state="translated">良いディスカッションの実践に参加するための手助けをする:ディスカッションが決裂している可能性のある場所を特定し、これらの点でポジティブな変化をもたらすことができる、実行可能な情報、ポイント、リソースを提供するようにします。</target>
        </trans-unit>
        <trans-unit id="334c16fc9ac63595f080f7bbcdf324a43ffd5267" translate="yes" xml:space="preserve">
          <source>Helper Functions</source>
          <target state="translated">ヘルパー機能</target>
        </trans-unit>
        <trans-unit id="3cffecba0fc696fb0b452757e50e8d2d6aa15660" translate="yes" xml:space="preserve">
          <source>Helper for pickle.</source>
          <target state="translated">ピクルスのヘルパー。</target>
        </trans-unit>
        <trans-unit id="8e0ce1fc0fa49364a15481aa8d6e74b5ad646a8c" translate="yes" xml:space="preserve">
          <source>Helper routines</source>
          <target state="translated">ヘルパールーチン</target>
        </trans-unit>
        <trans-unit id="591b0ee67a75bdd05c2441f5d821e72ac5abd9ff" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;&amp;lt;fortran files&amp;gt;&lt;/code&gt; may also contain signature files. Among other options (see below), the following options can be used in this mode:</source>
          <target state="translated">ここで、 &lt;code&gt;&amp;lt;fortran files&amp;gt;&lt;/code&gt; は署名ファイルも含まれている場合があります。他のオプション（以下を参照）の中で、このモードでは次のオプションを使用できます。</target>
        </trans-unit>
        <trans-unit id="4ad119f3969c50ae36c69dfd7a8f2258a296a9e4" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;x&lt;/code&gt; is a one-dimensional array of length two whose datatype is a structure with three fields: 1. A string of length 10 or less named &amp;lsquo;name&amp;rsquo;, 2. a 32-bit integer named &amp;lsquo;age&amp;rsquo;, and 3. a 32-bit float named &amp;lsquo;weight&amp;rsquo;.</source>
          <target state="translated">ここで、 &lt;code&gt;x&lt;/code&gt; は長さ2の1次元配列であり、そのデータ型は3つのフィールドを持つ構造体です。1。「name」という名前の長さ10以下の文字列、2。「age」という名前の32ビット整数、および3。 'weight'という名前の32ビットフロート。</target>
        </trans-unit>
        <trans-unit id="05d939cfc36f7e101c6969543d3aa4fc112af1c5" translate="yes" xml:space="preserve">
          <source>Here appropriately means at least two tabs. It isn&amp;rsquo;t necessary to line everything up with the opening parenthesis of the function call.</source>
          <target state="translated">ここで適切に意味するのは、少なくとも2つのタブです。関数呼び出しの開始括弧にすべてを揃える必要はありません。</target>
        </trans-unit>
        <trans-unit id="41762c3a1457e94bd62a7f7522c1df055434f548" translate="yes" xml:space="preserve">
          <source>Here are examples of shapes that do not broadcast:</source>
          <target state="translated">放送しない形状の例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="1f2d508ec85c3c97b5a1229502e255e40023669a" translate="yes" xml:space="preserve">
          <source>Here are several examples of custom weekmask values. These examples specify the &amp;ldquo;busday&amp;rdquo; default of Monday through Friday being valid days.</source>
          <target state="translated">カスタム週マスク値の例をいくつか示します。これらの例では、月曜日から金曜日までの「バスデー」のデフォルトを有効な日として指定しています。</target>
        </trans-unit>
        <trans-unit id="4cc8d83645ead10353d3c11cd3d81d28f5fe4bc7" translate="yes" xml:space="preserve">
          <source>Here are some examples of signatures:</source>
          <target state="translated">署名の例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="c7c80754b6ccbe7d6353c18ee79360b34170e3a5" translate="yes" xml:space="preserve">
          <source>Here are some more examples:</source>
          <target state="translated">他にもいくつかの例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="edcf4d32cc0d6364c8d8b907e9c3e1d6fd286f96" translate="yes" xml:space="preserve">
          <source>Here are the date units:</source>
          <target state="translated">日付の単位です。</target>
        </trans-unit>
        <trans-unit id="fcedd65241f400ab6b9cead2ae708d4ee0595afe" translate="yes" xml:space="preserve">
          <source>Here brackets &lt;code&gt;[]&lt;/code&gt; indicate an optional part, dots &lt;code&gt;...&lt;/code&gt; indicate one or more of a previous part. So, &lt;code&gt;[]...&lt;/code&gt; reads zero or more of a previous part.</source>
          <target state="translated">ここで、括弧 &lt;code&gt;[]&lt;/code&gt; はオプションのパーツを示し、ドット &lt;code&gt;...&lt;/code&gt; は前のパーツの1つ以上を示します。したがって、 &lt;code&gt;[]...&lt;/code&gt; は前の部分の0個以上を読み取ります。</target>
        </trans-unit>
        <trans-unit id="9a598f6524593a5ce80868abd4ad9058d26e6370" translate="yes" xml:space="preserve">
          <source>Here is a class that takes a standard ndarray that already exists, casts as our type, and adds an extra attribute.</source>
          <target state="translated">ここでは、既に存在する標準的なndarrayを受け取り、型としてキャストし、追加の属性を追加するクラスを紹介します。</target>
        </trans-unit>
        <trans-unit id="6e64dc50ed3c98bebd079533bedfe8d3d04f0a87" translate="yes" xml:space="preserve">
          <source>Here is a conversion table for which functions to use with the new iterator:</source>
          <target state="translated">新しいイテレータでどの関数を使用するかの変換表です。</target>
        </trans-unit>
        <trans-unit id="ae703a87217d209b99ae68f8790ce06f1f882b70" translate="yes" xml:space="preserve">
          <source>Here is a list of some useful NumPy functions and methods names ordered in categories. See &lt;a href=&quot;../reference/routines#routines&quot;&gt;Routines&lt;/a&gt; for the full list.</source>
          <target state="translated">これは、いくつかの便利なNumPy関数とメソッド名のリストです。完全なリストについては、&lt;a href=&quot;../reference/routines#routines&quot;&gt;ルーチン&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c2fbbb0f1468c183a40201806e4aca9dcb3c7060" translate="yes" xml:space="preserve">
          <source>Here is a simple copy function using the iterator. The &lt;code&gt;order&lt;/code&gt; parameter is used to control the memory layout of the allocated result, typically &lt;a href=&quot;array#c.NPY_KEEPORDER&quot;&gt;&lt;code&gt;NPY_KEEPORDER&lt;/code&gt;&lt;/a&gt; is desired.</source>
          <target state="translated">これは、イテレータを使用した簡単なコピー関数です。 &lt;code&gt;order&lt;/code&gt; パラメータは、典型的には、割り当てられた結果のメモリレイアウトを制御するために使用される&lt;a href=&quot;array#c.NPY_KEEPORDER&quot;&gt; &lt;code&gt;NPY_KEEPORDER&lt;/code&gt; が&lt;/a&gt;望まれています。</target>
        </trans-unit>
        <trans-unit id="4f499cb9c92d0a44a206fb77f5f29cb1c19da659" translate="yes" xml:space="preserve">
          <source>Here is a simple copy function using the iterator. The &lt;code&gt;order&lt;/code&gt; parameter is used to control the memory layout of the allocated result, typically &lt;a href=&quot;c-api.array#c.NPY_KEEPORDER&quot;&gt;&lt;code&gt;NPY_KEEPORDER&lt;/code&gt;&lt;/a&gt; is desired.</source>
          <target state="translated">以下はイテレータを使った簡単なコピー機能です。 &lt;code&gt;order&lt;/code&gt; パラメータは、典型的には、割り当てられた結果のメモリレイアウトを制御するために使用される&lt;a href=&quot;c-api.array#c.NPY_KEEPORDER&quot;&gt; &lt;code&gt;NPY_KEEPORDER&lt;/code&gt; が&lt;/a&gt;望まれています。</target>
        </trans-unit>
        <trans-unit id="955a08b4bff95343601789d2bf6e0369ccf3f1b3" translate="yes" xml:space="preserve">
          <source>Here is a useful idiom for getting contiguous copies instead of non-contiguous views.</source>
          <target state="translated">不連続ビューではなく連続コピーを取得するための便利なイディオムはこちらです。</target>
        </trans-unit>
        <trans-unit id="9908262441b7f09837e1f501a21d5cc69908d615" translate="yes" xml:space="preserve">
          <source>Here is an example function which operates like a &amp;ldquo;lambda&amp;rdquo; ufunc:</source>
          <target state="translated">「lambda」ufuncのように動作する関数の例を次に示します。</target>
        </trans-unit>
        <trans-unit id="1e3d31fc803b806643f783a13be59435e8ec2879" translate="yes" xml:space="preserve">
          <source>Here is an example outer product function:</source>
          <target state="translated">ここでは、外積関数の例を示します。</target>
        </trans-unit>
        <trans-unit id="3e01528c46f09f5f5d5be27407d90af619b21250" translate="yes" xml:space="preserve">
          <source>Here is how the variables above are used:</source>
          <target state="translated">上記の変数をどのように使うかを説明します。</target>
        </trans-unit>
        <trans-unit id="1637a3171b3e141604dedb2e68519a7e5432d5d7" translate="yes" xml:space="preserve">
          <source>Here is how they can be used with a sample array:</source>
          <target state="translated">ここでは、サンプル配列での使用方法を説明します。</target>
        </trans-unit>
        <trans-unit id="b9c4a8ea1157853e06ffc2f25fe3f9b079de55b6" translate="yes" xml:space="preserve">
          <source>Here is how we might write an &lt;code&gt;iter_add&lt;/code&gt; function, using the Python iterator protocol:</source>
          <target state="translated">Pythonイテレータプロトコルを使用して &lt;code&gt;iter_add&lt;/code&gt; 関数を作成する方法を次に示します。</target>
        </trans-unit>
        <trans-unit id="82ebceae19f8e179d652196db8007bed9b016e84" translate="yes" xml:space="preserve">
          <source>Here is part of a Cython module named &lt;code&gt;add.pyx&lt;/code&gt; which implements the complex addition functions we previously implemented using f2py:</source>
          <target state="translated">ここでは名前のCythonモジュールの一部である &lt;code&gt;add.pyx&lt;/code&gt; 我々は以前f2pyを使用して実装複雑な追加機能を実装しています。</target>
        </trans-unit>
        <trans-unit id="f27fb417254a59c4a73469e0d501f40b87bdc16a" translate="yes" xml:space="preserve">
          <source>Here is shown a modified version of the previous Fortran code, save it as &lt;code&gt;fib3.f&lt;/code&gt;:</source>
          <target state="translated">これは、以前のFortranコードの修正バージョンを示しています &lt;code&gt;fib3.f&lt;/code&gt; として保存してください。</target>
        </trans-unit>
        <trans-unit id="26ce084ba97f0fb601f4ee822ae6a8abc564ba7d" translate="yes" xml:space="preserve">
          <source>Here is the same function, but following the C-style pattern:</source>
          <target state="translated">ここに同じ関数がありますが、Cスタイルのパターンに従っています。</target>
        </trans-unit>
        <trans-unit id="d4daff3ad7f47434c82a5051360f6f8f9147bcdd" translate="yes" xml:space="preserve">
          <source>Here the 4th and 5th rows are selected from the indexed array and combined to make a 2-D array.</source>
          <target state="translated">ここでは、4行目と5行目をインデックス付き配列から選択し、組み合わせて2次元配列にしています。</target>
        </trans-unit>
        <trans-unit id="879104127602f2f170c22fa52acd13e1c1a2bd91" translate="yes" xml:space="preserve">
          <source>Here the &lt;code&gt;newaxis&lt;/code&gt; index operator inserts a new axis into &lt;code&gt;a&lt;/code&gt;, making it a two-dimensional &lt;code&gt;4x1&lt;/code&gt; array. Combining the &lt;code&gt;4x1&lt;/code&gt; array with &lt;code&gt;b&lt;/code&gt;, which has shape &lt;code&gt;(3,)&lt;/code&gt;, yields a &lt;code&gt;4x3&lt;/code&gt; array.</source>
          <target state="translated">ここで &lt;code&gt;newaxis&lt;/code&gt; 指数演算子は、新しいに軸を挿入し、それ二次元作り、 &lt;code&gt;4x1&lt;/code&gt; アレイ。 &lt;code&gt;4x1&lt;/code&gt; 配列を形状 &lt;code&gt;(3,)&lt;/code&gt; &lt;code&gt;b&lt;/code&gt; と組み合わせると、 &lt;code&gt;4x3&lt;/code&gt; 配列が生成されます。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="386e95414daee162c67ba2f23612c05957e9c9fa" translate="yes" xml:space="preserve">
          <source>Here the newaxis index operator inserts a new axis into &lt;code&gt;a&lt;/code&gt;, making it a two-dimensional 4x1 array. &lt;a href=&quot;#figure-4&quot;&gt;Figure 4&lt;/a&gt; illustrates the stretching of both arrays to produce the desired 4x3 output array.</source>
          <target state="translated">ここでnewaxis指数演算子は、に新しい軸を挿入すること、二次元の4x1アレイ作ります。&lt;a href=&quot;#figure-4&quot;&gt;図4&lt;/a&gt;は、目的の4x3出力アレイを生成するための両方のアレイのストレッチを示しています。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="948564e37f936b7d719e03a725d3b08432712a65" translate="yes" xml:space="preserve">
          <source>Here we give a list of short and useful tips.</source>
          <target state="translated">ここでは、短くて便利なコツを挙げてみました。</target>
        </trans-unit>
        <trans-unit id="e461e985122b46693ef966cb6f20d16d3ced03f1" translate="yes" xml:space="preserve">
          <source>Here we specify a seed so that we have reproducible results:</source>
          <target state="translated">ここでは、再現性のある結果を得るために、種を指定します。</target>
        </trans-unit>
        <trans-unit id="cb190a2b97f5232f09df36f69c4083c62f9d6c52" translate="yes" xml:space="preserve">
          <source>Here we use &lt;a href=&quot;generator#numpy.random.default_rng&quot;&gt;&lt;code&gt;default_rng&lt;/code&gt;&lt;/a&gt; to create an instance of &lt;a href=&quot;generator#numpy.random.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt; to generate 3 random integers between 0 (inclusive) and 10 (exclusive):</source>
          <target state="translated">ここでは、&lt;a href=&quot;generator#numpy.random.default_rng&quot;&gt; &lt;code&gt;default_rng&lt;/code&gt; &lt;/a&gt;を使用して&lt;a href=&quot;generator#numpy.random.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; の&lt;/a&gt;インスタンスを作成し、0（包括的）から10（排他的）までの3つのランダムな整数を生成します。</target>
        </trans-unit>
        <trans-unit id="a08cc7d7c18f3c3475f96b8b3d6b43f3958b42f1" translate="yes" xml:space="preserve">
          <source>Here we use &lt;a href=&quot;generator#numpy.random.default_rng&quot;&gt;&lt;code&gt;default_rng&lt;/code&gt;&lt;/a&gt; to create an instance of &lt;a href=&quot;generator#numpy.random.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt; to generate a random float:</source>
          <target state="translated">ここでは、&lt;a href=&quot;generator#numpy.random.default_rng&quot;&gt; &lt;code&gt;default_rng&lt;/code&gt; &lt;/a&gt;を使用して&lt;a href=&quot;generator#numpy.random.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; の&lt;/a&gt;インスタンスを作成し、ランダムなフロートを生成します。</target>
        </trans-unit>
        <trans-unit id="a3c11b66e685970faed2b0dab8dcc9874e6f710a" translate="yes" xml:space="preserve">
          <source>Here we use &lt;code&gt;default_rng&lt;/code&gt; to generate 3 random integers between 0 (inclusive) and 10 (exclusive):</source>
          <target state="translated">ここでは、 &lt;code&gt;default_rng&lt;/code&gt; を使用して、0（包括的）から10（排他的）までの3つのランダムな整数を生成します。</target>
        </trans-unit>
        <trans-unit id="8d3f8866347f301a5bb87019f0f0d018be7f046c" translate="yes" xml:space="preserve">
          <source>Here we use &lt;code&gt;default_rng&lt;/code&gt; to generate a random float:</source>
          <target state="translated">ここでは、 &lt;code&gt;default_rng&lt;/code&gt; を使用してランダムフロートを生成します。</target>
        </trans-unit>
        <trans-unit id="a43ab7c4c94ff9df3968be0c3da83726730e60b3" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the listing of sum_squares.pyx:</source>
          <target state="translated">sum_squares.pyxのリストは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="4f05498cc571c5e0811d261874316f4fcd69c560" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the short summary, complete TOC links are below:</source>
          <target state="translated">簡単な要約は次のとおりです。完全な目次リンクは以下のとおりです。</target>
        </trans-unit>
        <trans-unit id="30babd25e27e87a901a32627496afe119a238cc9" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;x&lt;/code&gt; is a dictionary mapping keys to values, in this case the integer 1 to the string &amp;ldquo;one&amp;rdquo;, and the string &amp;ldquo;two&amp;rdquo; to the list &lt;code&gt;[1, 2]&lt;/code&gt;. The values may be accessed using their corresponding keys:</source>
          <target state="translated">ここで、 &lt;code&gt;x&lt;/code&gt; はキーを値にマッピングする辞書です。この場合、整数1を文字列「one」に、文字列「two」をリスト &lt;code&gt;[1, 2]&lt;/code&gt; マッピングします。値には、対応するキーを使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="1bb0a1675e1ab72957846b002b2ccbd5daaee32d" translate="yes" xml:space="preserve">
          <source>Here, I&amp;rsquo;ve used the built-in enumerate iterator to return the iterator index as well as the value.</source>
          <target state="translated">ここでは、組み込みの列挙イテレータを使用して、イテレータインデックスと値を返しています。</target>
        </trans-unit>
        <trans-unit id="423ebc2c2e7601fe55f4484a7fb3dc69ce69a81b" translate="yes" xml:space="preserve">
          <source>Here, U is drawn from the uniform distribution over (0,1].</source>
          <target state="translated">ここで、Uは(0,1]上の一様分布から引き出されます。</target>
        </trans-unit>
        <trans-unit id="b81e3c833ac1c20cf33999c717a7683fc509fd53" translate="yes" xml:space="preserve">
          <source>Here, you grabbed a section of your array from index position 3 through index position 8.</source>
          <target state="translated">ここでは、インデックスの位置3からインデックスの位置8までの配列のセクションを取得しています。</target>
        </trans-unit>
        <trans-unit id="9958f2320c4c020dbe0ba918682ede328e6342d6" translate="yes" xml:space="preserve">
          <source>Hermite</source>
          <target state="translated">Hermite</target>
        </trans-unit>
        <trans-unit id="3e97b960fb6669c7ce3d868bc1ee39fbd840fc5f" translate="yes" xml:space="preserve">
          <source>Hermite (class in numpy.polynomial.hermite)</source>
          <target state="translated">ハーミット</target>
        </trans-unit>
        <trans-unit id="666fe7ebc09d7395dcf2297ae16799bfb275707b" translate="yes" xml:space="preserve">
          <source>Hermite Class</source>
          <target state="translated">ハーミットクラス</target>
        </trans-unit>
        <trans-unit id="78bcd4fcaaa0c27a38e217337ec719b8d794b08b" translate="yes" xml:space="preserve">
          <source>Hermite Module, &amp;ldquo;Physicists&amp;rsquo;&amp;rdquo; (&lt;code&gt;numpy.polynomial.hermite&lt;/code&gt;)</source>
          <target state="translated">Hermiteモジュール、「Physicists '」（ &lt;code&gt;numpy.polynomial.hermite&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="20e36a23caee8661ea5087eb6b2833159c8b55f9" translate="yes" xml:space="preserve">
          <source>Hermite Module, &amp;ldquo;Physicists&amp;rsquo;&amp;rdquo; (numpy.polynomial.hermite)</source>
          <target state="translated">Hermiteモジュール、「物理学者」（numpy.polynomial.hermite）</target>
        </trans-unit>
        <trans-unit id="4e51cfc7050a81e8b6b2247a7d2dcbdd5d5665a8" translate="yes" xml:space="preserve">
          <source>Hermite Module, “Physicists’” (numpy.polynomial.hermite)</source>
          <target state="translated">ハーミットモジュール、「物理学者」 (numpy.polynomial.hermite)</target>
        </trans-unit>
        <trans-unit id="7e732e7a329c7f9da3eef2d091dd68d62fa1ae1a" translate="yes" xml:space="preserve">
          <source>Hermite Series, &amp;ldquo;Physicists&amp;rdquo; (&lt;code&gt;numpy.polynomial.hermite&lt;/code&gt;)</source>
          <target state="translated">エルミートシリーズ、「物理学者」（ &lt;code&gt;numpy.polynomial.hermite&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="d4d4eab91a42ee672e761807e2ccfac51f95da47" translate="yes" xml:space="preserve">
          <source>Hermite Series, &amp;ldquo;Physicists&amp;rdquo; (numpy.polynomial.hermite)</source>
          <target state="translated">エルミートシリーズ、「物理学者」（numpy.polynomial.hermite）</target>
        </trans-unit>
        <trans-unit id="321f1ab84f3ad6f4602b6463648250d7c017db66" translate="yes" xml:space="preserve">
          <source>Hermite coefficients in order of increasing degree, i.e, &lt;code&gt;(1, 2, 3)&lt;/code&gt; gives &lt;code&gt;1*H_0(x) + 2*H_1(X) + 3*H_2(x)&lt;/code&gt;.</source>
          <target state="translated">次数の昇順でのエルミート係数、つまり &lt;code&gt;(1, 2, 3)&lt;/code&gt; は &lt;code&gt;1*H_0(x) + 2*H_1(X) + 3*H_2(x)&lt;/code&gt; 与えます。</target>
        </trans-unit>
        <trans-unit id="030c6d9cd5a3996624a5dedd47cce0a8b255a2e1" translate="yes" xml:space="preserve">
          <source>Hermite coefficients ordered from low to high. If &lt;code&gt;y&lt;/code&gt; was 2-D, the coefficients for the data in column k of &lt;code&gt;y&lt;/code&gt; are in column &lt;code&gt;k&lt;/code&gt;.</source>
          <target state="translated">エルミート係数は低いものから高いものへと並べられています。場合 &lt;code&gt;y&lt;/code&gt; が 2-Dであった、の列kにおけるデータの係数 &lt;code&gt;y&lt;/code&gt; は、列にある &lt;code&gt;k&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fdaeee3c1bfcab3d833e2cd601bbef119c7ca375" translate="yes" xml:space="preserve">
          <source>Hermite series</source>
          <target state="translated">ハーミットシリーズ</target>
        </trans-unit>
        <trans-unit id="5d7c6da49173b96e3654eaebdb82df4267a07cd8" translate="yes" xml:space="preserve">
          <source>Hermite series coefficients of the integral.</source>
          <target state="translated">積分のエルミート級数係数。</target>
        </trans-unit>
        <trans-unit id="f178c08ed0e44e86c3dcdcdd94165f4d2159704d" translate="yes" xml:space="preserve">
          <source>Hermite series of power.</source>
          <target state="translated">力のハーミットシリーズ。</target>
        </trans-unit>
        <trans-unit id="4b1ee605707018d73fef71e944f33b064cb30198" translate="yes" xml:space="preserve">
          <source>Hermite series of the derivative.</source>
          <target state="translated">派生のハーミット級数。</target>
        </trans-unit>
        <trans-unit id="f3b525d4a933addff05d89e23fb102c4771100af" translate="yes" xml:space="preserve">
          <source>Hermite series whose graph is a straight line.</source>
          <target state="translated">グラフが直線であるハーミット級数。</target>
        </trans-unit>
        <trans-unit id="f15ba129dfce798b05af2ecf87c4c56e141a51c6" translate="yes" xml:space="preserve">
          <source>Hermite weight function</source>
          <target state="translated">ハーミットウェイト機能</target>
        </trans-unit>
        <trans-unit id="e91ac76ec50377772a4d0a0fad317ac36bda67d9" translate="yes" xml:space="preserve">
          <source>Hermite.__call__()</source>
          <target state="translated">Hermite.__call__()</target>
        </trans-unit>
        <trans-unit id="e00caea2e8b760013383648bd7a0c8356ad2d21a" translate="yes" xml:space="preserve">
          <source>Hermite.basis()</source>
          <target state="translated">Hermite.basis()</target>
        </trans-unit>
        <trans-unit id="510f491be62b2a7e3419873aabcc929cba4aad0a" translate="yes" xml:space="preserve">
          <source>Hermite.cast()</source>
          <target state="translated">Hermite.cast()</target>
        </trans-unit>
        <trans-unit id="0bbb26adb9485391c59073a0150f1aeb28250175" translate="yes" xml:space="preserve">
          <source>Hermite.convert()</source>
          <target state="translated">Hermite.convert()</target>
        </trans-unit>
        <trans-unit id="46e59fa3efb39aa8de99b77595a66c5aca6f95af" translate="yes" xml:space="preserve">
          <source>Hermite.copy()</source>
          <target state="translated">Hermite.copy()</target>
        </trans-unit>
        <trans-unit id="150883af29979fdad32a1485afaa265ae485116d" translate="yes" xml:space="preserve">
          <source>Hermite.cutdeg()</source>
          <target state="translated">Hermite.cutdeg()</target>
        </trans-unit>
        <trans-unit id="6e3addaaf8a990d63bd9644e879a45bfaaa3d048" translate="yes" xml:space="preserve">
          <source>Hermite.degree()</source>
          <target state="translated">Hermite.degree()</target>
        </trans-unit>
        <trans-unit id="1898e27484be79666c2d0d0671ff99bb73c61fb0" translate="yes" xml:space="preserve">
          <source>Hermite.deriv()</source>
          <target state="translated">Hermite.deriv()</target>
        </trans-unit>
        <trans-unit id="74d98daf1082d857dc8043ef7d611943987bcbf6" translate="yes" xml:space="preserve">
          <source>Hermite.domain</source>
          <target state="translated">Hermite.domain</target>
        </trans-unit>
        <trans-unit id="69a9477b050cf5e84517bc3ba4b2540b289809dd" translate="yes" xml:space="preserve">
          <source>Hermite.fit()</source>
          <target state="translated">Hermite.fit()</target>
        </trans-unit>
        <trans-unit id="ee377bb8277d3cc87539518382039049d3434ab2" translate="yes" xml:space="preserve">
          <source>Hermite.fromroots()</source>
          <target state="translated">Hermite.fromroots()</target>
        </trans-unit>
        <trans-unit id="f3d364e431135afb3032332cc59ddec1d0087c65" translate="yes" xml:space="preserve">
          <source>Hermite.has_samecoef()</source>
          <target state="translated">Hermite.has_samecoef()</target>
        </trans-unit>
        <trans-unit id="4f5a15af827e1a34e56c335924bc117f06d9550b" translate="yes" xml:space="preserve">
          <source>Hermite.has_samedomain()</source>
          <target state="translated">Hermite.has_samedomain()</target>
        </trans-unit>
        <trans-unit id="5c6b35ea3f6249366ad14a64bf61b1e2f4ef3fa2" translate="yes" xml:space="preserve">
          <source>Hermite.has_sametype()</source>
          <target state="translated">Hermite.has_sametype()</target>
        </trans-unit>
        <trans-unit id="51595f8a76f511b51c25db7ca6799c30af573ff1" translate="yes" xml:space="preserve">
          <source>Hermite.has_samewindow()</source>
          <target state="translated">Hermite.has_samewindow()</target>
        </trans-unit>
        <trans-unit id="fae0683eb07169c7856c805873bd384998f4ce23" translate="yes" xml:space="preserve">
          <source>Hermite.identity()</source>
          <target state="translated">Hermite.identity()</target>
        </trans-unit>
        <trans-unit id="6d7f1a135c9fd7bdb20e45551f21a01a1b98749d" translate="yes" xml:space="preserve">
          <source>Hermite.integ()</source>
          <target state="translated">Hermite.integ()</target>
        </trans-unit>
        <trans-unit id="87c4ac5818fcc034b0a86594470677888839404b" translate="yes" xml:space="preserve">
          <source>Hermite.linspace()</source>
          <target state="translated">Hermite.linspace()</target>
        </trans-unit>
        <trans-unit id="e4e8e042f2bff68022c1506a796ae1f2b1a45e62" translate="yes" xml:space="preserve">
          <source>Hermite.mapparms()</source>
          <target state="translated">Hermite.mapparms()</target>
        </trans-unit>
        <trans-unit id="dd2d324dc15bd07b8d8eba7c1b9a303c6e61cbe9" translate="yes" xml:space="preserve">
          <source>Hermite.roots()</source>
          <target state="translated">Hermite.roots()</target>
        </trans-unit>
        <trans-unit id="357de88ac6a59383fa4db68dc02a30a97aa55b31" translate="yes" xml:space="preserve">
          <source>Hermite.trim()</source>
          <target state="translated">Hermite.trim()</target>
        </trans-unit>
        <trans-unit id="ded6de456aef1c9f3f0dbb030eecbec360a2a3d9" translate="yes" xml:space="preserve">
          <source>Hermite.truncate()</source>
          <target state="translated">Hermite.truncate()</target>
        </trans-unit>
        <trans-unit id="bfa82105a95ddf719538cbbbc2136f5bdc652b85" translate="yes" xml:space="preserve">
          <source>HermiteE</source>
          <target state="translated">HermiteE</target>
        </trans-unit>
        <trans-unit id="213b3add1699deb17fd0362b28ee9eaa1e08297e" translate="yes" xml:space="preserve">
          <source>HermiteE (class in numpy.polynomial.hermite_e)</source>
          <target state="translated">エルミテイー</target>
        </trans-unit>
        <trans-unit id="6628b3304670336395ae6732f06085678ac90c72" translate="yes" xml:space="preserve">
          <source>HermiteE Class</source>
          <target state="translated">ハーミテEクラス</target>
        </trans-unit>
        <trans-unit id="da640bfdcf0affcdb1cb3e699294b822aff50f4d" translate="yes" xml:space="preserve">
          <source>HermiteE Module, &amp;ldquo;Probabilists&amp;rsquo;&amp;rdquo; (&lt;code&gt;numpy.polynomial.hermite_e&lt;/code&gt;)</source>
          <target state="translated">HermiteEモジュール、「確率論者」（ &lt;code&gt;numpy.polynomial.hermite_e&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="93c34719e313928a50611a43ea25a148a84b264b" translate="yes" xml:space="preserve">
          <source>HermiteE Module, &amp;ldquo;Probabilists&amp;rsquo;&amp;rdquo; (numpy.polynomial.hermite_e)</source>
          <target state="translated">HermiteEモジュール、「確率論者」（numpy.polynomial.hermite_e）</target>
        </trans-unit>
        <trans-unit id="56f6680ec7b317dd6ae3f4dbb7e9720ab2e6af02" translate="yes" xml:space="preserve">
          <source>HermiteE Module, “Probabilists’” (numpy.polynomial.hermite_e)</source>
          <target state="translated">HermiteEモジュール、「確率論者」 (numpy.polynomial.hermite_e)</target>
        </trans-unit>
        <trans-unit id="a7da5893b105551d489e12a654065cc1aa5b0de0" translate="yes" xml:space="preserve">
          <source>HermiteE Series, &amp;ldquo;Probabilists&amp;rdquo; (&lt;code&gt;numpy.polynomial.hermite_e&lt;/code&gt;)</source>
          <target state="translated">HermiteEシリーズ、「確率論者」（ &lt;code&gt;numpy.polynomial.hermite_e&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="01652b3974c2bf789bf8511d4ddd036a45eab615" translate="yes" xml:space="preserve">
          <source>HermiteE Series, &amp;ldquo;Probabilists&amp;rdquo; (numpy.polynomial.hermite_e)</source>
          <target state="translated">HermiteEシリーズ、「確率論者」（numpy.polynomial.hermite_e）</target>
        </trans-unit>
        <trans-unit id="7090e745bd4427b0619b5249b32836cf9e710c91" translate="yes" xml:space="preserve">
          <source>HermiteE coefficients in order of increasing degree, i.e, &lt;code&gt;(1, 2, 3)&lt;/code&gt; gives &lt;code&gt;1*He_0(x) + 2*He_1(X) + 3*He_2(x)&lt;/code&gt;.</source>
          <target state="translated">次数の昇順でのHermiteE係数、つまり &lt;code&gt;(1, 2, 3)&lt;/code&gt; は &lt;code&gt;1*He_0(x) + 2*He_1(X) + 3*He_2(x)&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="8fdce93a022f8c8da6190fdc0f7e0fa2783e7c6d" translate="yes" xml:space="preserve">
          <source>HermiteE series</source>
          <target state="translated">ハーミテイーシリーズ</target>
        </trans-unit>
        <trans-unit id="f8a256fa19026169a866b5809900fc5fb915e807" translate="yes" xml:space="preserve">
          <source>HermiteE weight function.</source>
          <target state="translated">HermiteEのウェイト関数。</target>
        </trans-unit>
        <trans-unit id="f2a1b68f303ab3a67abc7b2e4c4c8451183b7095" translate="yes" xml:space="preserve">
          <source>HermiteE.__call__()</source>
          <target state="translated">HermiteE.__call__()</target>
        </trans-unit>
        <trans-unit id="45c27d16e911c80a7d363f3c39ba54997fd020cd" translate="yes" xml:space="preserve">
          <source>HermiteE.basis()</source>
          <target state="translated">HermiteE.basis()</target>
        </trans-unit>
        <trans-unit id="b45b6525bda44ccf736a4ef59137ed1b81c51100" translate="yes" xml:space="preserve">
          <source>HermiteE.cast()</source>
          <target state="translated">HermiteE.cast()</target>
        </trans-unit>
        <trans-unit id="4ddefc1ce033e171e5d4661134688bd82e8bc5af" translate="yes" xml:space="preserve">
          <source>HermiteE.convert()</source>
          <target state="translated">HermiteE.convert()</target>
        </trans-unit>
        <trans-unit id="002903a3a64a57beced04a1c5706dd609af411f5" translate="yes" xml:space="preserve">
          <source>HermiteE.copy()</source>
          <target state="translated">HermiteE.copy()</target>
        </trans-unit>
        <trans-unit id="b24cf643ce7571c11b38beb07f1dba60d0898965" translate="yes" xml:space="preserve">
          <source>HermiteE.cutdeg()</source>
          <target state="translated">HermiteE.cutdeg()</target>
        </trans-unit>
        <trans-unit id="564634c0d69d527c3b8fbcf352579c91cc6babc0" translate="yes" xml:space="preserve">
          <source>HermiteE.degree()</source>
          <target state="translated">HermiteE.degree()</target>
        </trans-unit>
        <trans-unit id="b0998c48dfd3e6da9f8d9a094fe9026de37d9068" translate="yes" xml:space="preserve">
          <source>HermiteE.deriv()</source>
          <target state="translated">HermiteE.deriv()</target>
        </trans-unit>
        <trans-unit id="e3b7e4ce40140bfad9d15417ff37a5918c3d9ee7" translate="yes" xml:space="preserve">
          <source>HermiteE.domain</source>
          <target state="translated">HermiteE.domain</target>
        </trans-unit>
        <trans-unit id="b9a9cf1e6530dd58c8fe754b4c5e909f051929ea" translate="yes" xml:space="preserve">
          <source>HermiteE.fit()</source>
          <target state="translated">HermiteE.fit()</target>
        </trans-unit>
        <trans-unit id="4a10eb67a6e8118b67d08f9c1672e5c1ef31f7e7" translate="yes" xml:space="preserve">
          <source>HermiteE.fromroots()</source>
          <target state="translated">HermiteE.fromroots()</target>
        </trans-unit>
        <trans-unit id="f215586092039a3f249d19a38ef5f2e5c8b9fe46" translate="yes" xml:space="preserve">
          <source>HermiteE.has_samecoef()</source>
          <target state="translated">HermiteE.has_samecoef()</target>
        </trans-unit>
        <trans-unit id="e303961ece2b00de2ea59d3add859f3b9afba3be" translate="yes" xml:space="preserve">
          <source>HermiteE.has_samedomain()</source>
          <target state="translated">HermiteE.has_samedomain()</target>
        </trans-unit>
        <trans-unit id="56c531828abb17c1fa8561b9e8274772104c7875" translate="yes" xml:space="preserve">
          <source>HermiteE.has_sametype()</source>
          <target state="translated">HermiteE.has_sametype()</target>
        </trans-unit>
        <trans-unit id="f597206a0348307571c5766a04f0329e0e5977a6" translate="yes" xml:space="preserve">
          <source>HermiteE.has_samewindow()</source>
          <target state="translated">HermiteE.has_samewindow()</target>
        </trans-unit>
        <trans-unit id="edecbdf0322d9c36d15b82f596749f9baa998818" translate="yes" xml:space="preserve">
          <source>HermiteE.identity()</source>
          <target state="translated">HermiteE.identity()</target>
        </trans-unit>
        <trans-unit id="50879495edc6ec638987e4aab2fb5c3ff2693ffc" translate="yes" xml:space="preserve">
          <source>HermiteE.integ()</source>
          <target state="translated">HermiteE.integ()</target>
        </trans-unit>
        <trans-unit id="7644c7d4879b67345881eccc21f74f5ac1d76221" translate="yes" xml:space="preserve">
          <source>HermiteE.linspace()</source>
          <target state="translated">HermiteE.linspace()</target>
        </trans-unit>
        <trans-unit id="71240e92395878a17c98ad6cabf8e728e1e375a7" translate="yes" xml:space="preserve">
          <source>HermiteE.mapparms()</source>
          <target state="translated">HermiteE.mapparms()</target>
        </trans-unit>
        <trans-unit id="918dc10943107e5fa1f93651ccb4cc1d4ca399a0" translate="yes" xml:space="preserve">
          <source>HermiteE.roots()</source>
          <target state="translated">HermiteE.roots()</target>
        </trans-unit>
        <trans-unit id="6c5620ec0bf2dc54449e61b049184a2294791751" translate="yes" xml:space="preserve">
          <source>HermiteE.trim()</source>
          <target state="translated">HermiteE.trim()</target>
        </trans-unit>
        <trans-unit id="8b9f703c9558cb71c68ad02c3049b60b8b59198b" translate="yes" xml:space="preserve">
          <source>HermiteE.truncate()</source>
          <target state="translated">HermiteE.truncate()</target>
        </trans-unit>
        <trans-unit id="a2691f3b6c74bc9be228ebe1bfd4aaa8b167edac" translate="yes" xml:space="preserve">
          <source>Hermite_e series coefficients of the integral.</source>
          <target state="translated">Hermite_e級数の積分の係数。</target>
        </trans-unit>
        <trans-unit id="cb6305ebb37efa97b74f55f04adb878c2cfd6823" translate="yes" xml:space="preserve">
          <source>Hermitian (symmetric if all elements are real), positive-definite input matrix.</source>
          <target state="translated">エルミシアン(すべての要素が実数の場合は対称),正定値入力行列.</target>
        </trans-unit>
        <trans-unit id="559550c9b0251579dbef6add2f3cc35db020af9a" translate="yes" xml:space="preserve">
          <source>Hermitian FFTs</source>
          <target state="translated">エルミティアFFT</target>
        </trans-unit>
        <trans-unit id="d6600c2342a8053253425f9846737e2bf29ea82c" translate="yes" xml:space="preserve">
          <source>Hermitian or real symmetric matrices whose eigenvalues and eigenvectors are to be computed.</source>
          <target state="translated">固有値と固有ベクトルが計算されるべきエルミシア行列または実数対称行列.</target>
        </trans-unit>
        <trans-unit id="2e330e11eac48710d52dc39e422ecae197585b4d" translate="yes" xml:space="preserve">
          <source>High-order polynomials may oscillate wildly:</source>
          <target state="translated">高次多項式は乱高下することがあります。</target>
        </trans-unit>
        <trans-unit id="4be99f1c1557117aa5c64902eb10d5b0886a0d69" translate="yes" xml:space="preserve">
          <source>Higher dimensions</source>
          <target state="translated">高次元</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
