<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="numpy">
    <body>
      <group id="numpy">
        <trans-unit id="40188341aa1ae4126e28065ab4ae4528efd4ab80" translate="yes" xml:space="preserve">
          <source>An array containing the size of the array in each dimension.</source>
          <target state="translated">各次元の配列のサイズを含む配列。</target>
        </trans-unit>
        <trans-unit id="c5525cd97ca2fd0380b69e5fa824c4cb8926190c" translate="yes" xml:space="preserve">
          <source>An array containing the x coordinates of the points to be histogrammed.</source>
          <target state="translated">ヒストグラム化される点の x 座標を含む配列.</target>
        </trans-unit>
        <trans-unit id="5e0350b6b12b116d1bc018ccc6e377cd22ea853f" translate="yes" xml:space="preserve">
          <source>An array containing the y coordinates of the points to be histogrammed.</source>
          <target state="translated">ヒストグラム化される点の y 座標を含む配列.</target>
        </trans-unit>
        <trans-unit id="23292ed5ea6c87129ac7edf129a6b29a5c739151" translate="yes" xml:space="preserve">
          <source>An array created this way is a &lt;code&gt;view&lt;/code&gt;, and NumPy often exploits the performance gain of using a view versus making a new array.</source>
          <target state="translated">この方法で作成された配列は &lt;code&gt;view&lt;/code&gt; であり、NumPyは多くの場合、新しい配列を作成するのではなく、ビューを使用することによるパフォーマンスの向上を利用します。</target>
        </trans-unit>
        <trans-unit id="1cd97d56d812219b3b28e1a0c52b1ff6cc695c36" translate="yes" xml:space="preserve">
          <source>An array describing the shape and dtype of the required MaskedArray.</source>
          <target state="translated">必要なMaskedArrayの形状とdtypeを記述した配列。</target>
        </trans-unit>
        <trans-unit id="04cda3e50b71bd943d98a23dec5faaaa9a7dbcdc" translate="yes" xml:space="preserve">
          <source>An array has a shape given by the number of elements along each axis:</source>
          <target state="translated">配列は、各軸に沿った要素数で与えられた形状をしています。</target>
        </trans-unit>
        <trans-unit id="d793f2dc9aa6a2d7752deea585ed5cd173d35117" translate="yes" xml:space="preserve">
          <source>An array is a central data structure of the NumPy library. An array is a grid of values and it contains information about the raw data, how to locate an element, and how to interpret an element. It has a grid of elements that can be indexed in &lt;a href=&quot;quickstart#quickstart-indexing-slicing-and-iterating&quot;&gt;various ways&lt;/a&gt;. The elements are all of the same type, referred to as the array &lt;code&gt;dtype&lt;/code&gt;.</source>
          <target state="translated">配列は、NumPyライブラリの中心的なデータ構造です。配列は値のグリッドであり、生データ、要素の検索方法、および要素の解釈方法に関する情報が含まれています。&lt;a href=&quot;quickstart#quickstart-indexing-slicing-and-iterating&quot;&gt;さまざまな方法&lt;/a&gt;でインデックスを作成できる要素のグリッドがあります。要素はすべて同じタイプであり、配列 &lt;code&gt;dtype&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="cf313c17a2dcae5eace0c3bac8edc28ea3d4e63f" translate="yes" xml:space="preserve">
          <source>An array is considered aligned if the memory offsets for all elements and the base offset itself is a multiple of &lt;code&gt;self.itemsize&lt;/code&gt;. Understanding &lt;code&gt;memory-alignment&lt;/code&gt; leads to better performance on most hardware.</source>
          <target state="translated">すべての要素のメモリオフセットとベースオフセット自体が &lt;code&gt;self.itemsize&lt;/code&gt; の倍数である場合、配列は整列していると見なされます。 &lt;code&gt;memory-alignment&lt;/code&gt; 理解すると、ほとんどのハードウェアでパフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="39caa1c045b8f25aa32aa854e91ee572acbabbf4" translate="yes" xml:space="preserve">
          <source>An array is contiguous if</source>
          <target state="translated">配列が連続しているのは</target>
        </trans-unit>
        <trans-unit id="0d7bb147f3c8147036b25457f328e2835c359f8d" translate="yes" xml:space="preserve">
          <source>An array is usually a fixed-size container of items of the same type and size. The number of dimensions and items in an array is defined by its shape. The shape of an array is a tuple of non-negative integers that specify the sizes of each dimension.</source>
          <target state="translated">配列は、通常、同じ型とサイズの項目の固定サイズの容器です。配列内の次元と項目の数は,その形状によって定義されます.配列の形状は、各次元のサイズを指定する非負の整数のタプルです。</target>
        </trans-unit>
        <trans-unit id="8d722ed07993e54ee58671613ec6bb989469ec46" translate="yes" xml:space="preserve">
          <source>An array iterator is a simple way to access the elements of an N-dimensional array quickly and efficiently. Section &lt;a href=&quot;#sec-array-iterator&quot;&gt;2&lt;/a&gt; provides more description and examples of this useful approach to looping over an array.</source>
          <target state="translated">配列反復子は、N次元配列の要素にすばやく効率的にアクセスする簡単な方法です。セクション&lt;a href=&quot;#sec-array-iterator&quot;&gt;2&lt;/a&gt;では、配列をループするこの便利なアプローチの詳細と例を示します。</target>
        </trans-unit>
        <trans-unit id="4332fb61829c6f89ffe9272f70c9a5a0a04142f9" translate="yes" xml:space="preserve">
          <source>An array nested in a &lt;a href=&quot;#term-structured-data-type&quot;&gt;structured data type&lt;/a&gt;, as &lt;code&gt;b&lt;/code&gt; is here:</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; がここにあるように、&lt;a href=&quot;#term-structured-data-type&quot;&gt;構造化データ型に&lt;/a&gt;ネストされた配列：</target>
        </trans-unit>
        <trans-unit id="8c8ecafe80193daba2a801115dc110f22a3a74c2" translate="yes" xml:space="preserve">
          <source>An array object represents a multidimensional, homogeneous array of fixed-size items.</source>
          <target state="translated">配列オブジェクトは、固定サイズのアイテムの多次元の均質な配列を表します。</target>
        </trans-unit>
        <trans-unit id="4cce5f6c6a06c1eb7b057cb09fd7ff7ffd616b00" translate="yes" xml:space="preserve">
          <source>An array object represents a multidimensional, homogeneous array of fixed-size items. An associated data-type object describes the format of each element in the array (its byte-order, how many bytes it occupies in memory, whether it is an integer, a floating point number, or something else, etc.)</source>
          <target state="translated">配列オブジェクトは、固定サイズの項目からなる多次元の均質な配列を表します。関連するデータ型オブジェクトは、配列内の各要素の形式(バイト順、メモリ内の占有バイト数、整数か浮動小数点数か何か他のものかなど)を記述します。</target>
        </trans-unit>
        <trans-unit id="8d1e82b5439e905b1ddafb253ce61f57276c43a9" translate="yes" xml:space="preserve">
          <source>An array object satisfying the specified requirements.</source>
          <target state="translated">指定された要件を満たす配列オブジェクト。</target>
        </trans-unit>
        <trans-unit id="b7bb351e2eb8c7a3b66881caf4f6450b8b6137b9" translate="yes" xml:space="preserve">
          <source>An array of</source>
          <target state="translated">の配列</target>
        </trans-unit>
        <trans-unit id="5e4c885c1848f9a375fc02dab6bce7ae4010158c" translate="yes" xml:space="preserve">
          <source>An array of dates to consider as invalid dates, no matter which weekday they fall upon. Holiday dates may be specified in any order, and NaT (not-a-time) dates are ignored. This list is saved in a normalized form that is suited for fast calculations of valid days.</source>
          <target state="translated">どの平日に該当するかに関わらず、無効な日付とみなすための日付の配列。休日の日付は任意の順序で指定でき、NaT (not-a-time)の日付は無視されます。このリストは、有効な日を素早く計算するのに適した正規化された形式で保存されます。</target>
        </trans-unit>
        <trans-unit id="43a99ea190c51364ce40fbff67e226039938f643" translate="yes" xml:space="preserve">
          <source>An array of dates to consider as invalid dates. They may be specified in any order, and NaT (not-a-time) dates are ignored. This list is saved in a normalized form that is suited for fast calculations of valid days.</source>
          <target state="translated">無効な日付とみなす日付の配列。これらは任意の順序で指定でき、NaT (not-a-time)の日付は無視されます。このリストは、有効な日を素早く計算するのに適した正規化された形式で保存されます。</target>
        </trans-unit>
        <trans-unit id="e52ec49035d815a8b775d98b8000ec27cfc67177" translate="yes" xml:space="preserve">
          <source>An array of floats to be rounded</source>
          <target state="translated">丸められるフロートの配列</target>
        </trans-unit>
        <trans-unit id="f3de1a372b66bb0f894c2b02cc87913d27ccf3e7" translate="yes" xml:space="preserve">
          <source>An array of function pointers &amp;mdash; one for each data type supported by the ufunc. This is the vector loop that is called to implement the underlying function &lt;em&gt;dims&lt;/em&gt; [0] times. The first argument, &lt;em&gt;args&lt;/em&gt;, is an array of &lt;em&gt;nargs&lt;/em&gt; pointers to behaved memory. Pointers to the data for the input arguments are first, followed by the pointers to the data for the output arguments. How many bytes must be skipped to get to the next element in the sequence is specified by the corresponding entry in the &lt;em&gt;steps&lt;/em&gt; array. The last argument allows the loop to receive extra information. This is commonly used so that a single, generic vector loop can be used for multiple functions. In this case, the actual scalar function to call is passed in as &lt;em&gt;extradata&lt;/em&gt;. The size of this function pointer array is ntypes.</source>
          <target state="translated">関数ポインタの配列&amp;mdash; ufuncがサポートする各データ型に1つ。これは、基になる関数を[0]回&lt;em&gt;dims&lt;/em&gt;実装するために呼び出されるベクトルループです。最初の引数&lt;em&gt;args&lt;/em&gt;は、動作するメモリへの&lt;em&gt;nargs&lt;/em&gt;ポインタの配列です。入力引数のデータへのポインターが最初で、その後に出力引数のデータへのポインターが続きます。シーケンスの次の要素に到達するためにスキップする必要があるバイト数は、&lt;em&gt;steps&lt;/em&gt;配列の対応するエントリによって指定され&lt;em&gt;ます&lt;/em&gt;。最後の引数により、ループは追加情報を受け取ることができます。これは一般的に使用されるため、単一の汎用ベクトルループを複数の関数に使用できます。この場合、呼び出す実際のスカラー関数は次のように渡されます。&lt;em&gt;extradata&lt;/em&gt;。この関数ポインタ配列のサイズはntypesです。</target>
        </trans-unit>
        <trans-unit id="e1457d1fa372ec75b9a3106caffe135f20a4e98d" translate="yes" xml:space="preserve">
          <source>An array of function pointers to a particular sorting algorithms. A particular sorting algorithm is obtained using a key (so far &lt;a href=&quot;array#c.NPY_QUICKSORT&quot;&gt;&lt;code&gt;NPY_QUICKSORT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array#c.NPY_HEAPSORT&quot;&gt;&lt;code&gt;NPY_HEAPSORT&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;array#c.NPY_MERGESORT&quot;&gt;&lt;code&gt;NPY_MERGESORT&lt;/code&gt;&lt;/a&gt; are defined). These sorts are done in-place assuming contiguous and aligned data.</source>
          <target state="translated">特定のソートアルゴリズムへの関数ポインターの配列。特定のソートアルゴリズムは、キーを使用して取得されます（これまでの&lt;a href=&quot;array#c.NPY_QUICKSORT&quot;&gt; &lt;code&gt;NPY_QUICKSORT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array#c.NPY_HEAPSORT&quot;&gt; &lt;code&gt;NPY_HEAPSORT&lt;/code&gt; &lt;/a&gt;、NPY_HEAPSORT、および&lt;a href=&quot;array#c.NPY_MERGESORT&quot;&gt; &lt;code&gt;NPY_MERGESORT&lt;/code&gt; &lt;/a&gt;が定義されています）。これらの並べ替えは、連続した整列されたデータを想定してインプレースで実行されます。</target>
        </trans-unit>
        <trans-unit id="89ccf0c919c71e47e2ddd7bf201588725f440dd1" translate="yes" xml:space="preserve">
          <source>An array of function pointers to a particular sorting algorithms. A particular sorting algorithm is obtained using a key (so far &lt;code&gt;NPY_QUICKSORT&lt;/code&gt;, &lt;code&gt;NPY_HEAPSORT&lt;/code&gt;, and &lt;code&gt;NPY_MERGESORT&lt;/code&gt; are defined). These sorts are done in-place assuming contiguous and aligned data.</source>
          <target state="translated">特定のソートアルゴリズムへの関数ポインターの配列。特定の並べ替えアルゴリズムは、キーを使用して取得されます（これまでの &lt;code&gt;NPY_QUICKSORT&lt;/code&gt; 、 &lt;code&gt;NPY_HEAPSORT&lt;/code&gt; 、NPY_HEAPSORT、および &lt;code&gt;NPY_MERGESORT&lt;/code&gt; が定義されています）。これらの並べ替えは、隣接して整列されたデータを想定してインプレースで行われます。</target>
        </trans-unit>
        <trans-unit id="e16de626c174b91da42175d30f3d8341b71b66d8" translate="yes" xml:space="preserve">
          <source>An array of function pointers to cast from the current type to all of the other builtin types. Each function casts a contiguous, aligned, and notswapped buffer pointed at by &lt;em&gt;from&lt;/em&gt; to a contiguous, aligned, and notswapped buffer pointed at by &lt;em&gt;to&lt;/em&gt; The number of items to cast is given by &lt;em&gt;n&lt;/em&gt;, and the arguments &lt;em&gt;fromarr&lt;/em&gt; and &lt;em&gt;toarr&lt;/em&gt; are interpreted as PyArrayObjects for flexible arrays to get itemsize information.</source>
          <target state="translated">現在の型から他のすべての組み込み型にキャストする関数ポインターの配列。各関数は、&lt;em&gt;from&lt;/em&gt;が指す連続した整列されたスワップされてい&lt;em&gt;ない&lt;/em&gt;バッファーを、&lt;em&gt;toが&lt;/em&gt;指している隣接した整列されたスワップされないバッファーにキャストします。キャストするアイテムの数は&lt;em&gt;n&lt;/em&gt;で与えられ、引数&lt;em&gt;fromarr&lt;/em&gt;および&lt;em&gt;toarr&lt;/em&gt;は、 itemsize情報を取得するための柔軟な配列。</target>
        </trans-unit>
        <trans-unit id="e200feb9e53ed4ebf2adb54be5ba987c1cf7059b" translate="yes" xml:space="preserve">
          <source>An array of function pointers to sorting algorithms for this data type. The same sorting algorithms as for sort are available. The indices producing the sort are returned in &lt;code&gt;result&lt;/code&gt; (which must be initialized with indices 0 to &lt;code&gt;length-1&lt;/code&gt; inclusive).</source>
          <target state="translated">このデータ型のソートアルゴリズムへの関数ポインターの配列。並べ替えと同じ並べ替えアルゴリズムを使用できます。ソートを生成するインデックスが &lt;code&gt;result&lt;/code&gt; 返されます（インデックス0から &lt;code&gt;length-1&lt;/code&gt; までのインデックスで初期化する必要があります）。</target>
        </trans-unit>
        <trans-unit id="4bf461a6da3a9c78b86edef9e37f8d374d2671a0" translate="yes" xml:space="preserve">
          <source>An array of indices into the flattened version of an array of dimensions &lt;code&gt;dims&lt;/code&gt;.</source>
          <target state="translated">次元の配列 &lt;code&gt;dims&lt;/code&gt; のフラットバージョンへのインデックスの配列。</target>
        </trans-unit>
        <trans-unit id="43a2b96955709f32822d46286842703f4390b599" translate="yes" xml:space="preserve">
          <source>An array of indices or a single index value.</source>
          <target state="translated">インデックスの配列、または単一のインデックス値。</target>
        </trans-unit>
        <trans-unit id="c327e0cbb835c3f65406d2930b711dc0438fe097" translate="yes" xml:space="preserve">
          <source>An array of integers or booleans whose elements should be packed to bits.</source>
          <target state="translated">要素がビットにパックされている必要がある整数またはブーリアンの配列。</target>
        </trans-unit>
        <trans-unit id="760cd2caf69b9cf29b19f984123cfb0704600d65" translate="yes" xml:space="preserve">
          <source>An array of integers providing for each dimension the number of bytes that must be skipped to get to the next element in that dimension.</source>
          <target state="translated">各ディメンジョンに対して、そのディメンジョンの次の要素に到達するためにスキップする必要のあるバイト数を指定する整数の配列。</target>
        </trans-unit>
        <trans-unit id="71e7cb63a5da7e356218da95d576d7ce741d5a1c" translate="yes" xml:space="preserve">
          <source>An array of integers providing for each dimension the number of bytes that must be skipped to get to the next element in that dimension. Associated with macro &lt;a href=&quot;array#c.PyArray_STRIDES&quot;&gt;&lt;code&gt;PyArray_STRIDES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">各次元に、その次元の次の要素に到達するためにスキップする必要のあるバイト数を提供する整数の配列。マクロ&lt;a href=&quot;array#c.PyArray_STRIDES&quot;&gt; &lt;code&gt;PyArray_STRIDES&lt;/code&gt; に関連付けられてい&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="44196e580ff225be1ef1476b121c70c9f63af8cb" translate="yes" xml:space="preserve">
          <source>An array of integers providing the shape in each dimension as long as nd</source>
          <target state="translated">nd の範囲内で各次元の形状を提供する整数の配列.</target>
        </trans-unit>
        <trans-unit id="62ed90156adc402e959f400c23d7929e6a74e615" translate="yes" xml:space="preserve">
          <source>An array of iterator objects that holds the iterators for the arrays to be broadcast together. On return, the iterators are adjusted for broadcasting.</source>
          <target state="translated">一緒にブロードキャストされる配列のイテレータを保持するイテレータオブジェクトの配列。戻り値として、イテレータはブロードキャストのために調整されます。</target>
        </trans-unit>
        <trans-unit id="e3e82fd2fdc82899ac97dd9d7069f0c853f214d0" translate="yes" xml:space="preserve">
          <source>An array of numeric data can also be passed.</source>
          <target state="translated">数値データの配列を渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="ece80d1b5df43cd5fed015f36204934c9ec31960" translate="yes" xml:space="preserve">
          <source>An array of pointers to the actual data for the input and output arrays. The input arguments are given first followed by the output arguments.</source>
          <target state="translated">入力配列と出力配列の実際のデータへのポインタの配列。入力引数が最初に与えられ、その後に出力引数が続きます。</target>
        </trans-unit>
        <trans-unit id="d47c875bafe38f3ae53b22be1ca5e1e026b9c87a" translate="yes" xml:space="preserve">
          <source>An array of start and end indexes if there are any masked data in the array. If there are no masked data in the array, &lt;code&gt;edges&lt;/code&gt; is a list of the first and last index.</source>
          <target state="translated">配列にマスクされたデータがある場合、開始インデックスと終了インデックスの配列。配列にマスクされたデータがない場合、 &lt;code&gt;edges&lt;/code&gt; は最初と最後のインデックスのリストです。</target>
        </trans-unit>
        <trans-unit id="c7dec96e92acd76ab0b9a5089a0591ab494441f3" translate="yes" xml:space="preserve">
          <source>An array of strings the same shape as &lt;code&gt;arr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;arr&lt;/code&gt; と同じ形状の文字列の配列。</target>
        </trans-unit>
        <trans-unit id="4864cc2ae1f8d0267df4cabfa6aa6a6b4bbde15b" translate="yes" xml:space="preserve">
          <source>An array of the same shape as &lt;code&gt;x&lt;/code&gt;, containing the cube cube-root of each element in &lt;code&gt;x&lt;/code&gt;. If &lt;code&gt;out&lt;/code&gt; was provided, &lt;code&gt;y&lt;/code&gt; is a reference to it. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="translated">同じ形状の配列 &lt;code&gt;x&lt;/code&gt; の各要素のキューブのキューブのルートを含む、 &lt;code&gt;x&lt;/code&gt; 。 &lt;code&gt;out&lt;/code&gt; が指定されている場合、 &lt;code&gt;y&lt;/code&gt; はそれへの参照です。 &lt;code&gt;x&lt;/code&gt; がスカラーの場合、これはスカラーです。</target>
        </trans-unit>
        <trans-unit id="2dca043d37393a6e2fc85fdd287fdcbcb4dfecc0" translate="yes" xml:space="preserve">
          <source>An array of the same shape as &lt;code&gt;x&lt;/code&gt;, containing the positive square-root of each element in &lt;code&gt;x&lt;/code&gt;. If any element in &lt;code&gt;x&lt;/code&gt; is complex, a complex array is returned (and the square-roots of negative reals are calculated). If all of the elements in &lt;code&gt;x&lt;/code&gt; are real, so is &lt;code&gt;y&lt;/code&gt;, with negative elements returning &lt;code&gt;nan&lt;/code&gt;. If &lt;code&gt;out&lt;/code&gt; was provided, &lt;code&gt;y&lt;/code&gt; is a reference to it. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="translated">同じ形状の配列 &lt;code&gt;x&lt;/code&gt; の各要素の正の平方根を含む、 &lt;code&gt;x&lt;/code&gt; 。 &lt;code&gt;x&lt;/code&gt; のいずれかの要素が複素数の場合、複素数配列が返されます（そして、負の実数の平方根が計算されます）。 &lt;code&gt;x&lt;/code&gt; のすべての要素が実数である場合、 &lt;code&gt;y&lt;/code&gt; も実数である場合、負の要素は &lt;code&gt;nan&lt;/code&gt; を返します。 &lt;code&gt;out&lt;/code&gt; が指定されている場合、 &lt;code&gt;y&lt;/code&gt; はそれへの参照です。 &lt;code&gt;x&lt;/code&gt; がスカラーの場合、これはスカラーです。</target>
        </trans-unit>
        <trans-unit id="b73f11faf81ffda921b160f49100211ca44e9e3b" translate="yes" xml:space="preserve">
          <source>An array of the same type as &lt;code&gt;a&lt;/code&gt;, containing the rounded values. Unless &lt;code&gt;out&lt;/code&gt; was specified, a new array is created. A reference to the result is returned.</source>
          <target state="translated">同じタイプの配列丸められた値を含みます、。 &lt;code&gt;out&lt;/code&gt; が指定されていない限り、新しいアレイが作成されます。結果への参照が返されます。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="979601eabdfd48b8ade710f0f03e8b5a86f0bf28" translate="yes" xml:space="preserve">
          <source>An array of values &lt;code&gt;w_i&lt;/code&gt; weighing each sample &lt;code&gt;(x_i, y_i)&lt;/code&gt;. Weights are normalized to 1 if &lt;code&gt;normed&lt;/code&gt; is True. If &lt;code&gt;normed&lt;/code&gt; is False, the values of the returned histogram are equal to the sum of the weights belonging to the samples falling into each bin.</source>
          <target state="translated">各サンプル &lt;code&gt;(x_i, y_i)&lt;/code&gt; 重み付けした値 &lt;code&gt;w_i&lt;/code&gt; の配列。 &lt;code&gt;normed&lt;/code&gt; がTrueの場合、重みは1に正規化されます。 &lt;code&gt;normed&lt;/code&gt; がFalseの場合、返されるヒストグラムの値は、各ビンに分類されるサンプルに属する重みの合計に等しくなります。</target>
        </trans-unit>
        <trans-unit id="e086307191e3a610d256fdc031206d0be076bb2f" translate="yes" xml:space="preserve">
          <source>An array of values &lt;code&gt;w_i&lt;/code&gt; weighing each sample &lt;code&gt;(x_i, y_i, z_i, &amp;hellip;)&lt;/code&gt;. Weights are normalized to 1 if normed is True. If normed is False, the values of the returned histogram are equal to the sum of the weights belonging to the samples falling into each bin.</source>
          <target state="translated">各サンプルの重み付け値 &lt;code&gt;w_i&lt;/code&gt; の配列 &lt;code&gt;(x_i, y_i, z_i, &amp;hellip;)&lt;/code&gt; 。normedがTrueの場合、重みは1に正規化されます。normedがFalseの場合、返されるヒストグラムの値は、各ビンに分類されるサンプルに属する重みの合計に等しくなります。</target>
        </trans-unit>
        <trans-unit id="c0ce1ac9c3e01f3e63767874318d5ec35c6c8162" translate="yes" xml:space="preserve">
          <source>An array of weights associated with the values in &lt;code&gt;a&lt;/code&gt;. Each value in &lt;code&gt;a&lt;/code&gt; contributes to the average according to its associated weight. The weights array can either be 1-D (in which case its length must be the size of &lt;code&gt;a&lt;/code&gt; along the given axis) or of the same shape as &lt;code&gt;a&lt;/code&gt;. If &lt;code&gt;weights=None&lt;/code&gt;, then all data in &lt;code&gt;a&lt;/code&gt; are assumed to have a weight equal to one.</source>
          <target state="translated">の値に関連付けられた重みのアレイ。 &lt;code&gt;a&lt;/code&gt; の各値は、関連する重みに従って平均に寄与します。重みアレイは、いずれかの1-D（その長さの大きさでなければならない場合であってもよい所定の軸に沿って）又は同様の形状。 &lt;code&gt;weights=None&lt;/code&gt; の場合、 &lt;code&gt;a&lt;/code&gt; のすべてのデータの重みは1であると想定されます。 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cc2b51a306ef6edd1f96be1bb988f9b49d26d1ac" translate="yes" xml:space="preserve">
          <source>An array of weights associated with the values in &lt;code&gt;a&lt;/code&gt;. Each value in &lt;code&gt;a&lt;/code&gt; contributes to the average according to its associated weight. The weights array can either be 1-D (in which case its length must be the size of &lt;code&gt;a&lt;/code&gt; along the given axis) or of the same shape as &lt;code&gt;a&lt;/code&gt;. If &lt;code&gt;weights=None&lt;/code&gt;, then all data in &lt;code&gt;a&lt;/code&gt; are assumed to have a weight equal to one. The 1-D calculation is:</source>
          <target state="translated">の値に関連付けられた重みのアレイ。の各値は &lt;code&gt;a&lt;/code&gt; 関連する重みに従って平均に寄与します。重みアレイは、いずれかの1-D（その長さの大きさでなければならない場合であってもよい所定の軸に沿って）又は同様の形状。 &lt;code&gt;weights=None&lt;/code&gt; の場合、 &lt;code&gt;a&lt;/code&gt; のすべてのデータの重みは1に等しいと見なされます。1次元計算は次のとおりです。 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="91d3b67fb93cc4bc7812921dd986159ce97b0f1e" translate="yes" xml:space="preserve">
          <source>An array of weights, of the same shape as &lt;code&gt;a&lt;/code&gt;. Each value in &lt;code&gt;a&lt;/code&gt; only contributes its associated weight towards the bin count (instead of 1). If &lt;code&gt;density&lt;/code&gt; is True, the weights are normalized, so that the integral of the density over the range remains 1.</source>
          <target state="translated">同じ形状の重みのアレイ。の各値は &lt;code&gt;a&lt;/code&gt; それに関連付けられた重みを（1ではなく）ビンカウントにのみ提供します。場合 &lt;code&gt;density&lt;/code&gt; 真であり、重みは範囲にわたる密度の積分が1残るように、正規化されます。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e08534b68e928582028171965f68debd33645b68" translate="yes" xml:space="preserve">
          <source>An array of weights, of the same shape as &lt;code&gt;a&lt;/code&gt;. Each value in &lt;code&gt;a&lt;/code&gt; only contributes its associated weight towards the bin count (instead of 1). This is currently not used by any of the bin estimators, but may be in the future.</source>
          <target state="translated">同じ形状の重みのアレイ。の各値は &lt;code&gt;a&lt;/code&gt; それに関連付けられた重みを（1ではなく）ビンカウントにのみ提供します。これは現在、どのビン推定器でも使用されていませんが、将来使用される可能性があります。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9f66c5b78a1ee6031ffac8fb1c853e09ee03b883" translate="yes" xml:space="preserve">
          <source>An array shaped as &lt;code&gt;a&lt;/code&gt; but with the specified axis removed. Returns a reference to &lt;code&gt;out&lt;/code&gt; if specified.</source>
          <target state="translated">の形をし &lt;code&gt;a&lt;/code&gt; 配列ですが、指定された軸が削除されています。指定されて &lt;code&gt;out&lt;/code&gt; 場合、outへの参照を返します。</target>
        </trans-unit>
        <trans-unit id="dd19a4a55dabbf2abd322a5d60254e3015e9603b" translate="yes" xml:space="preserve">
          <source>An array that does not own its data, but refers to another array&amp;rsquo;s data instead. For example, we may create a view that only shows every second element of another array:</source>
          <target state="translated">データを所有していないが、代わりに別の配列のデータを参照している配列。たとえば、別の配列の1つおきの要素のみを表示するビューを作成できます。</target>
        </trans-unit>
        <trans-unit id="28da6e5d441ca894170555ee158c5c43a7ecacb4" translate="yes" xml:space="preserve">
          <source>An array where all elements are equal to zero, except for the &lt;code&gt;k&lt;/code&gt;-th diagonal, whose values are equal to one.</source>
          <target state="translated">値が1に等しい &lt;code&gt;k&lt;/code&gt; 番目の対角線を除いて、すべての要素がゼロに等しい配列。</target>
        </trans-unit>
        <trans-unit id="9b75a9f2449bf7b8b39aa7a14602f9d2a9c799dd" translate="yes" xml:space="preserve">
          <source>An array whose dtype is &lt;code&gt;object&lt;/code&gt;; that is, it contains references to Python objects. Indexing the array dereferences the Python objects, so unlike other ndarrays, an object array has the ability to hold heterogeneous objects.</source>
          <target state="translated">dtypeが &lt;code&gt;object&lt;/code&gt; 配列; つまり、Pythonオブジェクトへの参照が含まれています。配列にインデックスを付けるとPythonオブジェクトが逆参照されるため、他のndarrayとは異なり、オブジェクト配列には異種オブジェクトを保持する機能があります。</target>
        </trans-unit>
        <trans-unit id="1ea1e5537016317a890a5d4a449f9cc2d733ed07" translate="yes" xml:space="preserve">
          <source>An array whose nonzero or True entries indicate the elements of &lt;code&gt;arr&lt;/code&gt; to extract.</source>
          <target state="translated">非ゼロまたはTrueのエントリが抽出する &lt;code&gt;arr&lt;/code&gt; の要素を示す配列。</target>
        </trans-unit>
        <trans-unit id="c9db9bfd04f4def5fd1afc2affd0945adf42512d" translate="yes" xml:space="preserve">
          <source>An array with (possibly) masked elements.</source>
          <target state="translated">マスクされた(可能性のある)要素を持つ配列.</target>
        </trans-unit>
        <trans-unit id="f661a37bc1f34ccd31f28fc314368c36fc3fd521" translate="yes" xml:space="preserve">
          <source>An array with a shape from broadcasting &lt;code&gt;begindates&lt;/code&gt; and &lt;code&gt;enddates&lt;/code&gt; together, containing the number of valid days between the begin and end dates.</source>
          <target state="translated">放送からの形状を持つ配列 &lt;code&gt;begindates&lt;/code&gt; と &lt;code&gt;enddates&lt;/code&gt; を開始日と終了日の間、有効な日数を含む、一緒に。</target>
        </trans-unit>
        <trans-unit id="da4b7ef06bb85fc991c331148db99f16620489ed" translate="yes" xml:space="preserve">
          <source>An array with a shape from broadcasting &lt;code&gt;dates&lt;/code&gt; and &lt;code&gt;offsets&lt;/code&gt; together, containing the dates with offsets applied.</source>
          <target state="translated">放送からの形状のアレイ &lt;code&gt;dates&lt;/code&gt; 及び &lt;code&gt;offsets&lt;/code&gt; 、互いにオフセットして日付を含むが適用しました。</target>
        </trans-unit>
        <trans-unit id="cb96764e2b9c06bb0ff9fb7ca3e50e3f3bfa36d0" translate="yes" xml:space="preserve">
          <source>An array with elements from &lt;code&gt;x&lt;/code&gt; where &lt;code&gt;condition&lt;/code&gt; is True, and elements from &lt;code&gt;y&lt;/code&gt; elsewhere.</source>
          <target state="translated">以下からの要素を持つ配列 &lt;code&gt;x&lt;/code&gt; &lt;code&gt;condition&lt;/code&gt; 真であるとから構成要素 &lt;code&gt;y&lt;/code&gt; 他所。</target>
        </trans-unit>
        <trans-unit id="1229c9f2e1287182eb9a66528204171c6010bc1b" translate="yes" xml:space="preserve">
          <source>An array with ones at and below the given diagonal and zeros elsewhere.</source>
          <target state="translated">与えられた対角線上と対角線下にあるものと、それ以外の場所にあるものを0とした配列.</target>
        </trans-unit>
        <trans-unit id="13f9e7222fb1b0027174f3c545f28e69a270792e" translate="yes" xml:space="preserve">
          <source>An array with the elements of &lt;code&gt;a&lt;/code&gt;, but where values &amp;lt; &lt;code&gt;a_min&lt;/code&gt; are replaced with &lt;code&gt;a_min&lt;/code&gt;, and those &amp;gt; &lt;code&gt;a_max&lt;/code&gt; with &lt;code&gt;a_max&lt;/code&gt;.</source>
          <target state="translated">要素を持つアレイが、値は&amp;lt;ここ &lt;code&gt;a_min&lt;/code&gt; に置き換えられ &lt;code&gt;a_min&lt;/code&gt; 、及びそれら&amp;gt; &lt;code&gt;a_max&lt;/code&gt; と &lt;code&gt;a_max&lt;/code&gt; 。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d0d81681b563f7cbf7ca14e4beb55c0e61ff30a7" translate="yes" xml:space="preserve">
          <source>An array with the same shape as &lt;code&gt;a&lt;/code&gt;, with the specified axis removed. If &lt;code&gt;a&lt;/code&gt; is a 0-d array, or if &lt;code&gt;axis&lt;/code&gt; is None, a scalar is returned. If an output array is specified, a reference to &lt;code&gt;out&lt;/code&gt; is returned.</source>
          <target state="translated">指定された軸が削除され &lt;code&gt;a&lt;/code&gt; 、と同じ形状の配列。場合0次元配列である場合、または &lt;code&gt;axis&lt;/code&gt; なしていない、スカラーが返されます。出力配列が指定されている場合、 &lt;code&gt;out&lt;/code&gt; への参照が返されます。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9baa9b65de91284b3761237390d81577243ec095" translate="yes" xml:space="preserve">
          <source>An array with the same shape as &lt;code&gt;a&lt;/code&gt;, with the specified axis removed. If &lt;code&gt;a&lt;/code&gt; is a 0-d array, or if axis is None, an ndarray scalar is returned. The same dtype as &lt;code&gt;a&lt;/code&gt; is returned.</source>
          <target state="translated">指定された軸が削除され &lt;code&gt;a&lt;/code&gt; 、と同じ形状の配列。場合0次元配列であり、又は軸がいずれもない場合、ndarrayスカラーが返されます。 &lt;code&gt;a&lt;/code&gt; と同じdtype が返されます。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e70abaa821cac7240773cdf6e7844c07f6b75f59" translate="yes" xml:space="preserve">
          <source>An array with the same shape as &lt;code&gt;dates&lt;/code&gt;, containing True for each valid day, and False for each invalid day.</source>
          <target state="translated">有効日ごとにTrue、無効日ごとにFalseを含む、 &lt;code&gt;dates&lt;/code&gt; と同じ形の配列。</target>
        </trans-unit>
        <trans-unit id="3dd1a7da3ce189a324136cbefbaa56e7594e5b61" translate="yes" xml:space="preserve">
          <source>An array with the same shape as the input array, with the specified axis removed. If the array is a 0-d array, or if &lt;code&gt;axis&lt;/code&gt; is None, a scalar is returned.</source>
          <target state="translated">指定された軸が削除された、入力配列と同じ形状の配列。配列が0次元配列の場合、または &lt;code&gt;axis&lt;/code&gt; がNoneの場合、スカラーが返されます。</target>
        </trans-unit>
        <trans-unit id="02c2325cc9f9529260815a39ebd69bc396f69b18" translate="yes" xml:space="preserve">
          <source>An array, any object exposing the array interface, an object whose __array__ method returns an array, or any (nested) sequence.</source>
          <target state="translated">配列、配列のインターフェイスを公開するオブジェクト、 __array__メソッドが配列を返すオブジェクト、または任意の (入れ子になった)シーケンス。</target>
        </trans-unit>
        <trans-unit id="567f786634fc5daa235d994c1657787eea4b779a" translate="yes" xml:space="preserve">
          <source>An array, or list of arrays, each with &lt;code&gt;a.ndim &amp;gt;= 1&lt;/code&gt;. Copies are made only if necessary.</source>
          <target state="translated">それぞれが &lt;code&gt;a.ndim &amp;gt;= 1&lt;/code&gt; の配列または配列のリスト。コピーは必要な場合にのみ作成されます。</target>
        </trans-unit>
        <trans-unit id="cba647ea9fdf896d7caaed5b946ba91dc1f4274e" translate="yes" xml:space="preserve">
          <source>An array, or list of arrays, each with &lt;code&gt;a.ndim &amp;gt;= 2&lt;/code&gt;. Copies are avoided where possible, and views with two or more dimensions are returned.</source>
          <target state="translated">それぞれ &lt;code&gt;a.ndim &amp;gt;= 2&lt;/code&gt; の配列または配列のリスト。コピーは可能な限り回避され、2つ以上のディメンションを持つビューが返されます。</target>
        </trans-unit>
        <trans-unit id="20047f5be3a0546654cf45798129be0ced7cf529" translate="yes" xml:space="preserve">
          <source>An array, or list of arrays, each with &lt;code&gt;a.ndim &amp;gt;= 3&lt;/code&gt;. Copies are avoided where possible, and views with three or more dimensions are returned. For example, a 1-D array of shape &lt;code&gt;(N,)&lt;/code&gt; becomes a view of shape &lt;code&gt;(1, N, 1)&lt;/code&gt;, and a 2-D array of shape &lt;code&gt;(M, N)&lt;/code&gt; becomes a view of shape &lt;code&gt;(M, N, 1)&lt;/code&gt;.</source>
          <target state="translated">それぞれが &lt;code&gt;a.ndim &amp;gt;= 3&lt;/code&gt; の配列または配列のリスト。可能な限りコピーは避けられ、3次元以上のビューが返されます。例えば、形状の1次元配列 &lt;code&gt;(N,)&lt;/code&gt; 形状の図となる &lt;code&gt;(1, N, 1)&lt;/code&gt; 、及び形状の2次元アレイ &lt;code&gt;(M, N)&lt;/code&gt; 形状の点となる &lt;code&gt;(M, N, 1)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f2d598faf58dcce518852d1c23ec2af6d3886d1a" translate="yes" xml:space="preserve">
          <source>An assertion is raised if the following condition is not met:</source>
          <target state="translated">以下の条件が満たされていない場合、アサーションが発生する。</target>
        </trans-unit>
        <trans-unit id="c3adef5312938abeed5e9919b7facafa03477317" translate="yes" xml:space="preserve">
          <source>An assignment example:</source>
          <target state="translated">課題の例。</target>
        </trans-unit>
        <trans-unit id="5b8cae1664bf34207082790eecd4cff8bc80d113" translate="yes" xml:space="preserve">
          <source>An authority is a person who can tell you more about something than you really care to know. &amp;mdash; &lt;em&gt;Unknown&lt;/em&gt;</source>
          <target state="translated">権威とは、あなたが本当に知りたいと思っている以上に何かについてあなたに話すことができる人です。&amp;mdash; &lt;em&gt;不明&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="d8abc81a5a743ea9f021fdfc70f53e317bae852f" translate="yes" xml:space="preserve">
          <source>An easier way of casting the data to a specific dtype and byte ordering can be achieved with the ndarray astype method:</source>
          <target state="translated">データを特定の dtype とバイト順にキャストする簡単な方法は ndarray astype メソッドで実現できます。</target>
        </trans-unit>
        <trans-unit id="a06ba8b5680e861b82812d380d7c8f04108d181f" translate="yes" xml:space="preserve">
          <source>An element of a structured datatype that behaves like an ndarray.</source>
          <target state="translated">ndarrayのように動作する構造化データ型の要素です。</target>
        </trans-unit>
        <trans-unit id="88aa14c58828551e162cc4a4661a6843968586b6" translate="yes" xml:space="preserve">
          <source>An empty (tuple) index is a full scalar index into a zero dimensional array. &lt;code&gt;x[()]&lt;/code&gt; returns a &lt;em&gt;scalar&lt;/em&gt; if &lt;code&gt;x&lt;/code&gt; is zero dimensional and a view otherwise. On the other hand &lt;code&gt;x[...]&lt;/code&gt; always returns a view.</source>
          <target state="translated">空の（タプル）インデックスは、ゼロ次元配列への完全なスカラーインデックスです。 &lt;code&gt;x[()]&lt;/code&gt; は、 &lt;code&gt;x&lt;/code&gt; がゼロ次元の場合は&lt;em&gt;スカラーを&lt;/em&gt;返し、それ以外の場合はビューを返します。一方、 &lt;code&gt;x[...]&lt;/code&gt; 常にビューを返します。</target>
        </trans-unit>
        <trans-unit id="9f8fe74c5bf94bc803b1bb945a029de2c98e9baa" translate="yes" xml:space="preserve">
          <source>An enumeration type indicating how permissive data conversions should be. This is used by the iterator added in NumPy 1.6, and is intended to be used more broadly in a future version.</source>
          <target state="translated">データ変換をどのように許容するかを示す列挙型。これはNumPy 1.6で追加されたイテレータで使用され、将来のバージョンではより広く使用されることを意図しています。</target>
        </trans-unit>
        <trans-unit id="f076fadc0ee0a286669da0779a627fc24ddf6053" translate="yes" xml:space="preserve">
          <source>An enumeration type indicating the element order that an array should be interpreted in. When a brand new array is created, generally only &lt;strong&gt;NPY_CORDER&lt;/strong&gt; and &lt;strong&gt;NPY_FORTRANORDER&lt;/strong&gt; are used, whereas when one or more inputs are provided, the order can be based on them.</source>
          <target state="translated">配列が解釈される要素の順序を示す列挙型。新しい配列が作成される場合、通常は&lt;strong&gt;NPY_CORDER&lt;/strong&gt;と&lt;strong&gt;NPY_FORTRANORDER&lt;/strong&gt;のみが使用されますが、1つ以上の入力が提供される場合、順序はそれらに基づくことができます。</target>
        </trans-unit>
        <trans-unit id="9ea26de5566952ec524cedbb60ee90bf6c1be0e2" translate="yes" xml:space="preserve">
          <source>An example</source>
          <target state="translated">一例</target>
        </trans-unit>
        <trans-unit id="6e2daf8ca86e15a2e24ed018141a980cd426e388" translate="yes" xml:space="preserve">
          <source>An example Python session would be identical to the previous example except that argument names would differ.</source>
          <target state="translated">Pythonのセッションの例は、引数名が異なる以外は前の例と同じです。</target>
        </trans-unit>
        <trans-unit id="edf41c0b27774c1df8aed12edb2351eadd7f38b3" translate="yes" xml:space="preserve">
          <source>An example castfunc is:</source>
          <target state="translated">castfuncの例は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="64e8f4d7015b6070bf3f50c3e64f0fbef756b878" translate="yes" xml:space="preserve">
          <source>An example from Glantz[1], pp 47-40:</source>
          <target state="translated">Glantz[1]、pp47-40からの例。</target>
        </trans-unit>
        <trans-unit id="1ad321a0ede9c3a9da071e8e5fe72a77cf61d678" translate="yes" xml:space="preserve">
          <source>An example of a non-associative case:</source>
          <target state="translated">非連想の場合の例。</target>
        </trans-unit>
        <trans-unit id="21524e2813ff9dc11cf1667f630888b770b6f890" translate="yes" xml:space="preserve">
          <source>An example of broadcasting in practice:</source>
          <target state="translated">放送の実践例。</target>
        </trans-unit>
        <trans-unit id="c9441160929c1f5a53f0eec18887501ddb4a68eb" translate="yes" xml:space="preserve">
          <source>An example of using the config header in light of the above:</source>
          <target state="translated">上記を踏まえた上でのconfigヘッダーの使用例です。</target>
        </trans-unit>
        <trans-unit id="dd2a4a70d420aa2d3935775486296bc45b66a315" translate="yes" xml:space="preserve">
          <source>An example of where this may be useful is for a color lookup table where we want to map the values of an image into RGB triples for display. The lookup table could have a shape (nlookup, 3). Indexing such an array with an image with shape (ny, nx) with dtype=np.uint8 (or any integer type so long as values are with the bounds of the lookup table) will result in an array of shape (ny, nx, 3) where a triple of RGB values is associated with each pixel location.</source>
          <target state="translated">これが便利な例としては、画像の値をRGBのトリプルにマッピングして表示するカラールックアップテーブルがあります。ルックアップテーブルは形状 (nlookup,3)を持つことができます。このような配列を、 shape (ny,nx)の画像を dtype=np.uint8 (または、値がルックアップテーブルの範囲内であれば任意の整数型)でインデックス化すると、 shape (ny,nx,3)の配列ができ、RGB 値のトリプルが各ピクセル位置に関連付けられます。</target>
        </trans-unit>
        <trans-unit id="92bcbe60f6b1cdb52a7d953fc81ff3369b0f2592" translate="yes" xml:space="preserve">
          <source>An example to show comments</source>
          <target state="translated">コメントを表示する例</target>
        </trans-unit>
        <trans-unit id="ab59fb864b641fc21102fa6867c9f294d4d4a6b9" translate="yes" xml:space="preserve">
          <source>An example using a &amp;ldquo;vector&amp;rdquo; of letters:</source>
          <target state="translated">文字の「ベクター」を使用した例：</target>
        </trans-unit>
        <trans-unit id="ae67380a5d930011edb475d7e700cc0a79c17af2" translate="yes" xml:space="preserve">
          <source>An example where &lt;code&gt;b&lt;/code&gt; is a scalar:</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; がスカラーである例：</target>
        </trans-unit>
        <trans-unit id="94faf0f11390e7c87a6db1e320054aa5b39eed5b" translate="yes" xml:space="preserve">
          <source>An example with fixed-width columns</source>
          <target state="translated">固定幅の列を使用した例</target>
        </trans-unit>
        <trans-unit id="ee3a8754bce53d43d3e15790bf69e69f40787cb1" translate="yes" xml:space="preserve">
          <source>An extended example taking advantage of the overloading of + and *:</source>
          <target state="translated">と*のオーバーロードを利用した拡張例。</target>
        </trans-unit>
        <trans-unit id="153bca2420915680d942ae459053fce685c8d220" translate="yes" xml:space="preserve">
          <source>An extensive list of tools for scientific work with Python can be found in the &lt;a href=&quot;https://scipy.org/topical-software.html&quot;&gt;topical software page&lt;/a&gt;.</source>
          <target state="translated">Pythonを使用した科学的作業のためのツールの広範なリストは、&lt;a href=&quot;https://scipy.org/topical-software.html&quot;&gt;トピックのソフトウェアページにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3f1f5040c3fab0c8014dea349166afc8130d9681" translate="yes" xml:space="preserve">
          <source>An extensive list of tools for scientific work with python can be found in the &lt;a href=&quot;https://scipy.org/topical-software.html&quot;&gt;topical software page&lt;/a&gt;.</source>
          <target state="translated">Pythonを使用した科学的作業のためのツールの広範なリストは、&lt;a href=&quot;https://scipy.org/topical-software.html&quot;&gt;トピックソフトウェアページにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="41352b04320eefbd12c3e75a33715bda727551fe" translate="yes" xml:space="preserve">
          <source>An important distinction for these methods is how they handle the &lt;code&gt;axis&lt;/code&gt; parameter. Both &lt;a href=&quot;generated/numpy.random.generator.shuffle#numpy.random.Generator.shuffle&quot;&gt;&lt;code&gt;Generator.shuffle&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;generated/numpy.random.generator.permutation#numpy.random.Generator.permutation&quot;&gt;&lt;code&gt;Generator.permutation&lt;/code&gt;&lt;/a&gt; treat the input as a one-dimensional sequence, and the &lt;code&gt;axis&lt;/code&gt; parameter determines which dimension of the input array to use as the sequence. In the case of a two-dimensional array, &lt;code&gt;axis=0&lt;/code&gt; will, in effect, rearrange the rows of the array, and &lt;code&gt;axis=1&lt;/code&gt; will rearrange the columns. For example</source>
          <target state="translated">これらのメソッドの重要な違いは、 &lt;code&gt;axis&lt;/code&gt; パラメータの処理方法です。&lt;a href=&quot;generated/numpy.random.generator.shuffle#numpy.random.Generator.shuffle&quot;&gt; &lt;code&gt;Generator.shuffle&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;generated/numpy.random.generator.permutation#numpy.random.Generator.permutation&quot;&gt; &lt;code&gt;Generator.permutation&lt;/code&gt; は&lt;/a&gt;どちらも、入力を1次元シーケンスとして扱い、 &lt;code&gt;axis&lt;/code&gt; パラメーターは入力配列のどの次元をシーケンスとして使用するかを決定します。2次元配列の場合、 &lt;code&gt;axis=0&lt;/code&gt; は事実上、配列の行を再配置し、 &lt;code&gt;axis=1&lt;/code&gt; は列を再配置します。例えば</target>
        </trans-unit>
        <trans-unit id="234994ab6fdb07f0421cdf6417fa8d08aaed3974" translate="yes" xml:space="preserve">
          <source>An important thing to be aware of for this iteration is that the order is chosen to match the memory layout of the array instead of using a standard C or Fortran ordering. This is done for access efficiency, reflecting the idea that by default one simply wants to visit each element without concern for a particular ordering. We can see this by iterating over the transpose of our previous array, compared to taking a copy of that transpose in C order.</source>
          <target state="translated">この繰り返しで注意すべき重要なことは,標準的なCやFortranの順序ではなく,配列のメモリレイアウトに合わせて順序を選択していることです.これはアクセス効率のために行われており,デフォルトでは,特定の順序を気にせずに各要素にアクセスしたいという考えを反映しています.これは,C の順序で転置のコピーを取るのと比較して,前の配列の転置を繰り返し処理することで見ることができます.</target>
        </trans-unit>
        <trans-unit id="ce8e2f3f33d5cad8aca5e828b4984abc49c8c85d" translate="yes" xml:space="preserve">
          <source>An improved version of Sturges&amp;rsquo; estimator that works better with non-normal datasets.</source>
          <target state="translated">非標準のデータセットでよりよく機能するSturgesの推定器の改良版。</target>
        </trans-unit>
        <trans-unit id="f04b75dbec8a648ba0471c30efe8cb82bf3011bd" translate="yes" xml:space="preserve">
          <source>An improved version of Sturges&amp;rsquo; formula that produces better estimates for non-normal datasets. This estimator attempts to account for the skew of the data.</source>
          <target state="translated">非標準のデータセットをより適切に推定するSturgesの式の改良版。この推定器は、データのスキューを考慮に入れようとします。</target>
        </trans-unit>
        <trans-unit id="6c0daf8923a8ff879a417d16aa3697c8609e06f7" translate="yes" xml:space="preserve">
          <source>An index which matches the order of iteration.</source>
          <target state="translated">反復の順序にマッチするインデックス。</target>
        </trans-unit>
        <trans-unit id="fd3ef13b14659602803a66f38a194c91b0d16c51" translate="yes" xml:space="preserve">
          <source>An input can be used in the calculation if its size in a particular dimension either matches the output size in that dimension, or has value exactly 1.</source>
          <target state="translated">入力は、特定のディメンジョンのサイズが、そのディメンジョンの出力サイズと一致するか、または値がちょうど 1 である場合に、計算で使用できます。</target>
        </trans-unit>
        <trans-unit id="24428e2d87c0033a748d11a9f2ce4caa1e91c810" translate="yes" xml:space="preserve">
          <source>An input object.</source>
          <target state="translated">入力オブジェクト。</target>
        </trans-unit>
        <trans-unit id="ccd98d417809c28451b9172282e9fd64d1c41e89" translate="yes" xml:space="preserve">
          <source>An instance of &lt;a href=&quot;#numpy.ma.MaskedArray&quot;&gt;&lt;code&gt;MaskedArray&lt;/code&gt;&lt;/a&gt; can be thought as the combination of several elements:</source>
          <target state="translated">&lt;a href=&quot;#numpy.ma.MaskedArray&quot;&gt; &lt;code&gt;MaskedArray&lt;/code&gt; &lt;/a&gt;のインスタンスは、いくつかの要素の組み合わせと考えることができます。</target>
        </trans-unit>
        <trans-unit id="cc6e3d42720c490f4a7b292acd6a9d04e387f93f" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;numpy.lib.index_tricks.nd_grid&lt;/code&gt; which returns an dense (or fleshed out) mesh-grid when indexed, so that each returned argument has the same shape. The dimensions and number of the output arrays are equal to the number of indexing dimensions. If the step length is not a complex number, then the stop is not inclusive.</source>
          <target state="translated">&lt;code&gt;numpy.lib.index_tricks.nd_grid&lt;/code&gt; のインスタンス。インデックスが付けられたときに密な（または肉付けされた）メッシュグリッドを返すため、返される各引数は同じ形状になります。出力配列の次元と数は、インデックスの次元数と同じです。ステップ長が複素数でない場合、ストップは包括的ではありません。</target>
        </trans-unit>
        <trans-unit id="634a502415ebc5263dc90361e50dd67e1f0e70b8" translate="yes" xml:space="preserve">
          <source>An instance of &lt;code&gt;numpy.lib.index_tricks.nd_grid&lt;/code&gt; which returns an open (i.e. not fleshed out) mesh-grid when indexed, so that only one dimension of each returned array is greater than 1. The dimension and number of the output arrays are equal to the number of indexing dimensions. If the step length is not a complex number, then the stop is not inclusive.</source>
          <target state="translated">&lt;code&gt;numpy.lib.index_tricks.nd_grid&lt;/code&gt; のインスタンス。インデックスが付けられたときに開いた（つまり、肉付けされていない）メッシュグリッドを返すため、返される各配列の1つの次元のみが1より大きい。出力配列の次元と数は等しいインデックス次元の数に。ステップ長が複素数でない場合、ストップは包括的ではありません。</target>
        </trans-unit>
        <trans-unit id="3ea316e4ad89d0b127e75fd6f9a3da36dffed3ba" translate="yes" xml:space="preserve">
          <source>An instance of class &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; consists of a contiguous one-dimensional segment of computer memory (owned by the array, or by some other object), combined with an indexing scheme that maps &lt;em&gt;N&lt;/em&gt; integers into the location of an item in the block. The ranges in which the indices can vary is specified by the &lt;a href=&quot;generated/numpy.ndarray.shape#numpy.ndarray.shape&quot;&gt;&lt;code&gt;shape&lt;/code&gt;&lt;/a&gt; of the array. How many bytes each item takes and how the bytes are interpreted is defined by the &lt;a href=&quot;arrays.dtypes#arrays-dtypes&quot;&gt;data-type object&lt;/a&gt; associated with the array.</source>
          <target state="translated">クラス&lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; &lt;/a&gt;のインスタンスは、&lt;em&gt;N&lt;/em&gt;整数をブロック内のアイテムの場所にマップするインデックススキーマと組み合わせた、コンピューターメモリーの連続した1次元セグメント（配列または他のオブジェクトが所有）で構成されます。インデックスが変化する範囲は、配列の&lt;a href=&quot;generated/numpy.ndarray.shape#numpy.ndarray.shape&quot;&gt; &lt;code&gt;shape&lt;/code&gt; &lt;/a&gt;によって指定されます。各アイテムのバイト数とバイトの解釈方法は、配列に関連付けられた&lt;a href=&quot;arrays.dtypes#arrays-dtypes&quot;&gt;データ型オブジェクト&lt;/a&gt;によって定義されます。</target>
        </trans-unit>
        <trans-unit id="6e1c5ac8d50b25041dc87f2c7519eb1a86058078" translate="yes" xml:space="preserve">
          <source>An integer array whose elements are indices into the flattened version of an array of dimensions &lt;code&gt;shape&lt;/code&gt;. Before version 1.6.0, this function accepted just one index value.</source>
          <target state="translated">要素が次元配列 &lt;code&gt;shape&lt;/code&gt; のフラットバージョンへのインデックスである整数配列。バージョン1.6.0より前は、この関数は1つのインデックス値しか受け入れませんでした。</target>
        </trans-unit>
        <trans-unit id="4276a3e1422ad086a54d759953deada7066bbc35" translate="yes" xml:space="preserve">
          <source>An integer as a dimension name freezes that dimension to the value.</source>
          <target state="translated">ディメンジョン名として整数を指定すると、そのディメンジョンはその値でフリーズします。</target>
        </trans-unit>
        <trans-unit id="1fa126ddddd0a6a8da1f0e66c4d42624e8184e08" translate="yes" xml:space="preserve">
          <source>An integer offset into the array data region. This can only be used when data is &lt;code&gt;None&lt;/code&gt; or returns a &lt;code&gt;buffer&lt;/code&gt; object.</source>
          <target state="translated">配列データ領域への整数オフセット。これは、データが &lt;code&gt;None&lt;/code&gt; であるか、 &lt;code&gt;buffer&lt;/code&gt; オブジェクトを返す場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="208ac298af4fe8503099d4537d939f78fa068387" translate="yes" xml:space="preserve">
          <source>An integer offset into the array data region. This can only be used when data is None or returns a &lt;code&gt;buffer&lt;/code&gt; object.</source>
          <target state="translated">配列データ領域への整数オフセット。これは、データがNoneの場合、または &lt;code&gt;buffer&lt;/code&gt; オブジェクトを返す場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="7827031c1e4779ee518d6bbc19386c165a21aa2f" translate="yes" xml:space="preserve">
          <source>An integer providing the number of dimensions for this array. When nd is 0, the array is sometimes called a rank-0 array. Such arrays have undefined dimensions and strides and cannot be accessed. &lt;a href=&quot;c-api.array#c.NPY_MAXDIMS&quot;&gt;&lt;code&gt;NPY_MAXDIMS&lt;/code&gt;&lt;/a&gt; is the largest number of dimensions for any array.</source>
          <target state="translated">この配列の次元数を提供する整数。ndが0の場合、配列はランク0配列と呼ばれることがあります。そのような配列は、未定義の次元とストライドを持ち、アクセスできません。&lt;a href=&quot;c-api.array#c.NPY_MAXDIMS&quot;&gt; &lt;code&gt;NPY_MAXDIMS&lt;/code&gt; &lt;/a&gt;は、配列の最大次元数です。</target>
        </trans-unit>
        <trans-unit id="98a7f29877575db550ac35bbad96c05eb4cb8962" translate="yes" xml:space="preserve">
          <source>An integer providing the number of dimensions for this array. When nd is 0, the array is sometimes called a rank-0 array. Such arrays have undefined dimensions and strides and cannot be accessed. Macro &lt;a href=&quot;array#c.PyArray_NDIM&quot;&gt;&lt;code&gt;PyArray_NDIM&lt;/code&gt;&lt;/a&gt; defined in &lt;code&gt;ndarraytypes.h&lt;/code&gt; points to this data member. &lt;a href=&quot;array#c.NPY_MAXDIMS&quot;&gt;&lt;code&gt;NPY_MAXDIMS&lt;/code&gt;&lt;/a&gt; is the largest number of dimensions for any array.</source>
          <target state="translated">この配列の次元数を提供する整数。ndが0の場合、その配列はランク0配列と呼ばれることがあります。このような配列には未定義の次元とストライドがあり、アクセスできません。マクロ&lt;a href=&quot;array#c.PyArray_NDIM&quot;&gt; &lt;code&gt;PyArray_NDIM&lt;/code&gt; は、&lt;/a&gt;で定義さ &lt;code&gt;ndarraytypes.h&lt;/code&gt; このデータメンバにポイント。&lt;a href=&quot;array#c.NPY_MAXDIMS&quot;&gt; &lt;code&gt;NPY_MAXDIMS&lt;/code&gt; &lt;/a&gt;は、任意の配列の最大次元数です。</target>
        </trans-unit>
        <trans-unit id="740a8c0291954a1fc0b575bf55fa7f345ee70e49" translate="yes" xml:space="preserve">
          <source>An integer showing the version of the interface (i.e. 3 for this version). Be careful not to use this to invalidate objects exposing future versions of the interface.</source>
          <target state="translated">インターフェイスのバージョンを示す整数値 (例:このバージョンでは 3)。将来のバージョンのインターフェイスを公開しているオブジェクトを無効にしないように注意してください。</target>
        </trans-unit>
        <trans-unit id="d87fed7bbbc954e477fb70394a40418f3fdbf745" translate="yes" xml:space="preserve">
          <source>An integer, &lt;em&gt;i&lt;/em&gt;, returns the same values as &lt;code&gt;i:i+1&lt;/code&gt;&lt;strong&gt;except&lt;/strong&gt; the dimensionality of the returned object is reduced by 1. In particular, a selection tuple with the &lt;em&gt;p&lt;/em&gt;-th element an integer (and all other entries &lt;code&gt;:&lt;/code&gt;) returns the corresponding sub-array with dimension &lt;em&gt;N - 1&lt;/em&gt;. If &lt;em&gt;N = 1&lt;/em&gt; then the returned object is an array scalar. These objects are explained in &lt;a href=&quot;arrays.scalars#arrays-scalars&quot;&gt;Scalars&lt;/a&gt;.</source>
          <target state="translated">整数、&lt;em&gt;iは&lt;/em&gt;、同じ値を返し &lt;code&gt;i:i+1&lt;/code&gt; &lt;strong&gt;以外&lt;/strong&gt;返されたオブジェクトの次元は、特に1だけ減少される、と選択タプル&lt;em&gt;P&lt;/em&gt;番目の要素、整数（および他のすべてのエントリ &lt;code&gt;:&lt;/code&gt; ）を返し次元&lt;em&gt;N-1の&lt;/em&gt;対応するサブ配列。場合&lt;em&gt;N = 1は、&lt;/em&gt;次に返されるオブジェクトは、配列スカラーです。これらのオブジェクトは、&lt;a href=&quot;arrays.scalars#arrays-scalars&quot;&gt;スカラーで&lt;/a&gt;説明されています。</target>
        </trans-unit>
        <trans-unit id="73fd3d8e22c91d0b01a5e0d96a1a194d3f402dd7" translate="yes" xml:space="preserve">
          <source>An introduction to the concepts discussed here</source>
          <target state="translated">ここで議論されている概念の紹介</target>
        </trans-unit>
        <trans-unit id="9337d47802d85cb5aefc4c6ec7749f6fe4d0f859" translate="yes" xml:space="preserve">
          <source>An introduction, with definitions and general explanations.</source>
          <target state="translated">定義や一般的な解説を交えた入門書。</target>
        </trans-unit>
        <trans-unit id="0e55a620091e71a89cb39a3c09fd5cc874040b26" translate="yes" xml:space="preserve">
          <source>An item extracted from an array, &lt;em&gt;e.g.&lt;/em&gt;, by indexing, is represented by a Python object whose type is one of the &lt;a href=&quot;arrays.scalars#arrays-scalars&quot;&gt;array scalar types&lt;/a&gt; built in NumPy. The array scalars allow easy manipulation of also more complicated arrangements of data.</source>
          <target state="translated">&lt;em&gt;たとえば&lt;/em&gt;、インデックスによって配列から抽出されたアイテムは、NumPyに組み込まれた&lt;a href=&quot;arrays.scalars#arrays-scalars&quot;&gt;配列スカラー型の&lt;/a&gt; 1つであるPythonオブジェクトで表されます。配列スカラーにより、データのより複雑な配置も簡単に操作できます。</target>
        </trans-unit>
        <trans-unit id="de99db091c92a4334b9f2bbfb02c196f89f1e72f" translate="yes" xml:space="preserve">
          <source>An iterable object providing data for the array.</source>
          <target state="translated">配列のデータを提供する反復可能なオブジェクト.</target>
        </trans-unit>
        <trans-unit id="c2c683940adaf3e17b5b2d4dbfdc8fb1f9285bc0" translate="yes" xml:space="preserve">
          <source>An masked array with &lt;a href=&quot;../maskedarray.baseclass#numpy.ma.masked&quot;&gt;&lt;code&gt;masked&lt;/code&gt;&lt;/a&gt; elements where the condition is masked, elements from &lt;code&gt;x&lt;/code&gt; where &lt;code&gt;condition&lt;/code&gt; is True, and elements from &lt;code&gt;y&lt;/code&gt; elsewhere.</source>
          <target state="translated">条件がマスクされるマスクされた要素、 &lt;code&gt;condition&lt;/code&gt; がTrueである &lt;code&gt;x&lt;/code&gt; からの要素、および他の場所からの &lt;code&gt;y&lt;/code&gt; からの要素を持つ&lt;a href=&quot;../maskedarray.baseclass#numpy.ma.masked&quot;&gt; &lt;code&gt;masked&lt;/code&gt; &lt;/a&gt;された配列。</target>
        </trans-unit>
        <trans-unit id="8ce742f07c8b93ebe9e87ec17c3c1ca6bc05421b" translate="yes" xml:space="preserve">
          <source>An ndarray can have a data segment that is not a simple contiguous chunk of well-behaved memory you can manipulate. It may not be aligned with word boundaries (very important on some platforms). It might have its data in a different byte-order than the machine recognizes. It might not be writeable. It might be in Fortan-contiguous order. The array flags are used to indicate what can be said about data associated with an array.</source>
          <target state="translated">ndarrayは、操作可能なメモリの単純な連続した塊ではないデータセグメントを持つことができる。ワードの境界線と一致していない場合があります(プラットフォームによっては非常に重要です)。マシンが認識するのとは異なるバイトオーダーでデータを持っているかもしれません。書き込みができないかもしれません。Fortan-contiguous order であるかもしれません。配列フラグは、配列に関連付けられたデータについて何が言えるかを示すために使用されます。</target>
        </trans-unit>
        <trans-unit id="bb779643bca7bbe52a88ddd4236e7e3d90ebda9e" translate="yes" xml:space="preserve">
          <source>An ndarray can have a data segment that is not a simple contiguous chunk of well-behaved memory you can manipulate. It may not be aligned with word boundaries (very important on some platforms). It might have its data in a different byte-order than the machine recognizes. It might not be writeable. It might be in Fortran-contiguous order. The array flags are used to indicate what can be said about data associated with an array.</source>
          <target state="translated">ndarrayは、操作可能なメモリの単純な連続した塊ではないデータセグメントを持つことができる。ワードの境界線と一致していない場合があります(プラットフォームによっては非常に重要です)。マシンが認識するのとは異なるバイトオーダーでデータを持っているかもしれません。書き込みができないかもしれません。Fortranと連続した順序になっているかもしれません。配列フラグは,配列に関連付けられたデータについて何が言えるかを示すために使用されます.</target>
        </trans-unit>
        <trans-unit id="84038cf3f95c6f7f876de572eb50dcdd65ebb4e5" translate="yes" xml:space="preserve">
          <source>An ndarray containing the absolute value of each element in &lt;code&gt;x&lt;/code&gt;. For complex input, &lt;code&gt;a + ib&lt;/code&gt;, the absolute value is</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の各要素の絶対値を含むndarray 。複素数入力 &lt;code&gt;a + ib&lt;/code&gt; 場合、絶対値は</target>
        </trans-unit>
        <trans-unit id="937ff1e9853b1d8bb7896ced9c9a3c640f4a20fd" translate="yes" xml:space="preserve">
          <source>An ndarray of appropriate shape and dtype, filled with False.</source>
          <target state="translated">適切な形状と dtype の ndarray で、False で埋められています。</target>
        </trans-unit>
        <trans-unit id="a5ee74273207da7ae537266764fb0a696c970cac" translate="yes" xml:space="preserve">
          <source>An nditer for each item in &lt;code&gt;axes&lt;/code&gt;, outermost first</source>
          <target state="translated">各項目のnditer &lt;code&gt;axes&lt;/code&gt; 最初の最も外側の、</target>
        </trans-unit>
        <trans-unit id="d7605eba941666733600a4275983300b4a00400c" translate="yes" xml:space="preserve">
          <source>An ndpointer instance is used to describe an ndarray in restypes and argtypes specifications. This approach is more flexible than using, for example, &lt;code&gt;POINTER(c_double)&lt;/code&gt;, since several restrictions can be specified, which are verified upon calling the ctypes function. These include data type, number of dimensions, shape and flags. If a given array does not satisfy the specified restrictions, a &lt;code&gt;TypeError&lt;/code&gt; is raised.</source>
          <target state="translated">ndpointerインスタンスは、restypesおよびargtypes仕様でndarrayを記述するために使用されます。このアプローチは、たとえば &lt;code&gt;POINTER(c_double)&lt;/code&gt; を使用するよりも柔軟性があります。これは、ctypes関数を呼び出すときに確認されるいくつかの制限を指定できるためです。これらには、データ型、次元数、形状、フラグが含まれます。指定された配列が指定された制限を満たさない場合、 &lt;code&gt;TypeError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="7417872fe9adc5a45fba54aa51c9ae05347385d3" translate="yes" xml:space="preserve">
          <source>An object representing &lt;a href=&quot;arrays.scalars#numpy.number&quot;&gt;&lt;code&gt;numpy.number&lt;/code&gt;&lt;/a&gt; precision during static type checking.</source>
          <target state="translated">静的型チェック中の&lt;a href=&quot;arrays.scalars#numpy.number&quot;&gt; &lt;code&gt;numpy.number&lt;/code&gt; の&lt;/a&gt;精度を表すオブジェクト。</target>
        </trans-unit>
        <trans-unit id="8249a78054c0cb82583f75cad623801b99c6e816" translate="yes" xml:space="preserve">
          <source>An object that can be passed as an argument to the &lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt;&lt;code&gt;numpy.dtype&lt;/code&gt;&lt;/a&gt; constructor to create the array&amp;rsquo;s dtype.</source>
          <target state="translated">&lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt; &lt;code&gt;numpy.dtype&lt;/code&gt; &lt;/a&gt;コンストラクターに引数として渡して、配列のdtypeを作成できるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="51b070f54d715dc3c886991b214975d29e065cb3" translate="yes" xml:space="preserve">
          <source>An object that can be queried for it&amp;rsquo;s numeric type.</source>
          <target state="translated">数値型を照会できるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="cb7089d647c1b86db71967874a04b75f15c4139e" translate="yes" xml:space="preserve">
          <source>An object that cannot be modified after execution is called immutable. Two common examples are strings and tuples.</source>
          <target state="translated">実行後に変更できないオブジェクトを不変と呼びます。一般的な例としては、文字列とタプルの2つがあります。</target>
        </trans-unit>
        <trans-unit id="757fdfd1c89cb8f173de4247aa51861595590920" translate="yes" xml:space="preserve">
          <source>An object that exposes the buffer interface.</source>
          <target state="translated">バッファインターフェースを公開するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="9aa10d88b8c5173358367cce862fb4a6d6fc0051" translate="yes" xml:space="preserve">
          <source>An object that specifies a custom set of valid days.</source>
          <target state="translated">有効な日のカスタムセットを指定するオブジェクト。</target>
        </trans-unit>
        <trans-unit id="9697eabfa36a0c57b03730a9e63e9c0dd7cc2d09" translate="yes" xml:space="preserve">
          <source>An object to simplify the interaction of the array with the ctypes module.</source>
          <target state="translated">ctypesモジュールと配列の相互作用を単純化するためのオブジェクト。</target>
        </trans-unit>
        <trans-unit id="77d04ad5d02d58a854d2c57fda919f98926805a2" translate="yes" xml:space="preserve">
          <source>An offset can be passed also to the masking function. This gets us the indices starting on the first diagonal right of the main one:</source>
          <target state="translated">オフセットはマスキング関数にも渡すことができます。これは、メインの対角線の最初の対角線の右から始まるインデックスを取得します。</target>
        </trans-unit>
        <trans-unit id="e7bb40a65a5fed271af7ea895f0c3a327894df3e" translate="yes" xml:space="preserve">
          <source>An open file object, or a string containing a filename.</source>
          <target state="translated">開いているファイルオブジェクト、またはファイル名を含む文字列。</target>
        </trans-unit>
        <trans-unit id="d961e30e446f529b34e65541eef1f1abf1c657fc" translate="yes" xml:space="preserve">
          <source>An operation &lt;code&gt;along axis n&lt;/code&gt; of array &lt;code&gt;a&lt;/code&gt; behaves as if its argument were an array of slices of &lt;code&gt;a&lt;/code&gt; where each slice has a successive index of axis &lt;code&gt;n&lt;/code&gt;.</source>
          <target state="translated">配列 &lt;code&gt;a&lt;/code&gt; の &lt;code&gt;along axis n&lt;/code&gt; に沿った操作は、その引数が &lt;code&gt;a&lt;/code&gt; のスライスの配列であるかのように動作し、各スライスには軸 &lt;code&gt;n&lt;/code&gt; の連続したインデックスがあります。</target>
        </trans-unit>
        <trans-unit id="fe21301c43ae5617db256d71e7099b9d072912c3" translate="yes" xml:space="preserve">
          <source>An operator that transforms a function. For example, a &lt;code&gt;log&lt;/code&gt; decorator may be defined to print debugging information upon function execution:</source>
          <target state="translated">関数を変換する演算子。たとえば、 &lt;code&gt;log&lt;/code&gt; デコレータを定義して、関数の実行時にデバッグ情報を出力できます。</target>
        </trans-unit>
        <trans-unit id="c61177b92fd6e93436d3f1589cdd0e84373a28c0" translate="yes" xml:space="preserve">
          <source>An optional argument which is passed through to &lt;code&gt;mask_func&lt;/code&gt;. Functions like &lt;a href=&quot;numpy.triu#numpy.triu&quot;&gt;&lt;code&gt;triu&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;numpy.tril#numpy.tril&quot;&gt;&lt;code&gt;tril&lt;/code&gt;&lt;/a&gt; take a second argument that is interpreted as an offset.</source>
          <target state="translated">&lt;code&gt;mask_func&lt;/code&gt; に渡されるオプションの引数。以下のような関数&lt;a href=&quot;numpy.triu#numpy.triu&quot;&gt; &lt;code&gt;triu&lt;/code&gt; は&lt;/a&gt;、&lt;a href=&quot;numpy.tril#numpy.tril&quot;&gt; &lt;code&gt;tril&lt;/code&gt; &lt;/a&gt;オフセットとして解釈される二番目の引数を取ります。</target>
        </trans-unit>
        <trans-unit id="6ed67195e81edd8b8281aeaf900064fe84cfec71" translate="yes" xml:space="preserve">
          <source>An optional section detailing which errors get raised and under what conditions:</source>
          <target state="translated">どのようなエラーが発生し、どのような条件で発生するかを詳細に説明するオプションのセクションです。</target>
        </trans-unit>
        <trans-unit id="1ae26e0d878e399f66a265f5cebede9ebffc3136" translate="yes" xml:space="preserve">
          <source>An optional section detailing which warnings get raised and under what conditions, formatted similarly to Raises.</source>
          <target state="translated">Raises と同様のフォーマットで、どの警告がどのような条件で発生するかを詳細に説明するオプションのセクション。</target>
        </trans-unit>
        <trans-unit id="391f6511a38216160a18b8a442ab41f825e0e811" translate="yes" xml:space="preserve">
          <source>An optional section for examples, using the &lt;a href=&quot;http://docs.python.org/library/doctest.html&quot;&gt;doctest&lt;/a&gt; format. This section is meant to illustrate usage, not to provide a testing framework &amp;ndash; for that, use the &lt;code&gt;tests/&lt;/code&gt; directory. While optional, this section is very strongly encouraged.</source>
          <target state="translated">&lt;a href=&quot;http://docs.python.org/library/doctest.html&quot;&gt;doctest&lt;/a&gt;形式を使用した例のオプションセクション。このセクションは、テストフレームワークを提供するのではなく、使用法を説明することを目的としています。そのためには、 &lt;code&gt;tests/&lt;/code&gt; ディレクトリを使用します。オプションですが、このセクションを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="366365808b8b78b0df47b3f2fa0f2ced248b85eb" translate="yes" xml:space="preserve">
          <source>An optional section that provides additional information about the code, possibly including a discussion of the algorithm. This section may include mathematical equations, written in &lt;a href=&quot;http://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt; format:</source>
          <target state="translated">おそらくアルゴリズムの説明を含む、コードに関する追加情報を提供するオプションのセクション。このセクションには、&lt;a href=&quot;http://www.latex-project.org/&quot;&gt;LaTeX&lt;/a&gt;形式で記述された数式が含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="9a2c98cd19c30e91e6748b44b5303643381a459b" translate="yes" xml:space="preserve">
          <source>An optional section used to describe infrequently used parameters. It should only be used if a function has a large number of keyword parameters, to prevent cluttering the &lt;strong&gt;Parameters&lt;/strong&gt; section.</source>
          <target state="translated">使用頻度の低いパラメータを説明するために使用されるオプションのセクション。&lt;strong&gt;パラメータ&lt;/strong&gt;セクションが乱雑にならないように、関数に多数のキーワードパラメータがある場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="9abef9ce470f7fb03808979a319d66414811663e" translate="yes" xml:space="preserve">
          <source>An optional section used to refer to related code. This section can be very useful, but should be used judiciously. The goal is to direct users to other functions they may not be aware of, or have easy means of discovering (by looking at the module docstring, for example). Routines whose docstrings further explain parameters used by this function are good candidates.</source>
          <target state="translated">関連するコードを参照するために使用されるオプションのセクション。このセクションは非常に便利ですが、慎重に使うべきです。目的は、ユーザが意識していないかもしれない、あるいは簡単に発見できるかもしれない他の関数にユーザを誘導することです(例えばモジュールのdocstringを見ることで)。この関数が使用するパラメータをさらに説明する docstring を持つルーチンが良い候補となります。</target>
        </trans-unit>
        <trans-unit id="163026d9f814b206fafab6b479ab36888cccfde6" translate="yes" xml:space="preserve">
          <source>An optional section with cautions to the user in free text/reST.</source>
          <target state="translated">フリーテキスト/reSTでユーザーへの注意点を記載したオプションコーナー。</target>
        </trans-unit>
        <trans-unit id="1965c219b7008fe9d099c530f609263a14ec3ab8" translate="yes" xml:space="preserve">
          <source>An optional shape tuple providing how many times this part of the structure should be repeated. No repeats are assumed if this is not given. Very complicated structures can be described using this generic interface. Notice, however, that each element of the array is still of the same data-type. Some examples of using this interface are given below.</source>
          <target state="translated">構造体のこの部分を何回繰り返すかを指定するオプションの形状タプル。これが与えられていない場合は,繰り返しは行われません.非常に複雑な構造体は,この一般的なインターフェースを用いて記述することができます.しかし,配列の各要素は同じデータ型であることに注意してください.このインターフェースの使用例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="53899654d34ff89eb71076f6e6bc7701229a1b68" translate="yes" xml:space="preserve">
          <source>An order as close to the order of the inputs as possible, even if the input is in neither C nor Fortran order.</source>
          <target state="translated">入力がCでもFortranでもない場合でも、可能な限り入力の順序に近い順序。</target>
        </trans-unit>
        <trans-unit id="62dbe9a66cb25d1e5f12073cb6b65d7c95221376" translate="yes" xml:space="preserve">
          <source>An ordered tuple of field names. It is NULL if no field is defined.</source>
          <target state="translated">フィールド名の順序付きタプル。フィールドが定義されていない場合はNULLです。</target>
        </trans-unit>
        <trans-unit id="b28a1d46b1f9296ef3b935989580ffec6bc90e2b" translate="yes" xml:space="preserve">
          <source>And even an array that contains a range of evenly spaced intervals. To do this, you will specify the &lt;strong&gt;first number&lt;/strong&gt;, &lt;strong&gt;last number&lt;/strong&gt;, and the &lt;strong&gt;step size&lt;/strong&gt;.</source>
          <target state="translated">そして、等間隔の間隔の範囲を含む配列でさえ。これを行うには、&lt;strong&gt;最初の数値&lt;/strong&gt;、&lt;strong&gt;最後の数値&lt;/strong&gt;、および&lt;strong&gt;ステップサイズ&lt;/strong&gt;を指定します。</target>
        </trans-unit>
        <trans-unit id="3fba956825020587f9a5a64e281c04047de223ea" translate="yes" xml:space="preserve">
          <source>And even use a Greek symbol like</source>
          <target state="translated">のようなギリシャ語の記号を使っても</target>
        </trans-unit>
        <trans-unit id="d209b0782b74a22172d98886be624cfb54a8889a" translate="yes" xml:space="preserve">
          <source>And finally, we build the extension module by running</source>
          <target state="translated">そして最後に、次のように実行して拡張モジュールを構築します。</target>
        </trans-unit>
        <trans-unit id="43728498911f9a35c7cfcd97027ee53c73e05582" translate="yes" xml:space="preserve">
          <source>And for assigning values:</source>
          <target state="translated">そして、価値観の割り当てのために。</target>
        </trans-unit>
        <trans-unit id="4fb83d7408641f0a8ebf4e9525e3b469b9150326" translate="yes" xml:space="preserve">
          <source>And here are the time units:</source>
          <target state="translated">そしてこちらが時間単位です。</target>
        </trans-unit>
        <trans-unit id="1b699ec82ab8d002ac2193762454ef347af6a2da" translate="yes" xml:space="preserve">
          <source>And in more detail:</source>
          <target state="translated">さらに詳しくは</target>
        </trans-unit>
        <trans-unit id="de07ee02fee2070e061118495013c58fef8e83bb" translate="yes" xml:space="preserve">
          <source>And make sure the &lt;code&gt;VERSION&lt;/code&gt; variable is set properly.</source>
          <target state="translated">また、 &lt;code&gt;VERSION&lt;/code&gt; 変数が正しく設定されていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="4ee8deafdefbce6d1b2807fd39f58eb30f617552" translate="yes" xml:space="preserve">
          <source>And read your CSV with:</source>
          <target state="translated">でCSVを読み込んで</target>
        </trans-unit>
        <trans-unit id="750b2a038f3915c181ab3d5361e664ccd43727d0" translate="yes" xml:space="preserve">
          <source>And then in the debugger:</source>
          <target state="translated">そしてデバッガで</target>
        </trans-unit>
        <trans-unit id="021c9202efccb926bf8e315a46e72fcbd7af5307" translate="yes" xml:space="preserve">
          <source>And to find the shape of your array, run:</source>
          <target state="translated">そして、配列の形状を見つけるには、実行します。</target>
        </trans-unit>
        <trans-unit id="d96cb503f931b03fd273a49b170890809399fc62" translate="yes" xml:space="preserve">
          <source>And use it to set the diagonal of an array of zeros to 1:</source>
          <target state="translated">また、ゼロの配列の対角線を1に設定するために使用します。</target>
        </trans-unit>
        <trans-unit id="240ae7e192fffb9c12f05d721f8aebdc4754f4de" translate="yes" xml:space="preserve">
          <source>Angle in radians.</source>
          <target state="translated">ラジアン単位の角度。</target>
        </trans-unit>
        <trans-unit id="0184757264cf635f3a2e2e908775a586af284275" translate="yes" xml:space="preserve">
          <source>Angle, in radians (</source>
          <target state="translated">角度、ラジアン単位 (</target>
        </trans-unit>
        <trans-unit id="531138e549dac342fe270e2699b3c5521bbf5ec8" translate="yes" xml:space="preserve">
          <source>Angles in degrees.</source>
          <target state="translated">度の角度。</target>
        </trans-unit>
        <trans-unit id="dfa37c7c185a546b145b8e12c452f16dbc48d7fc" translate="yes" xml:space="preserve">
          <source>Anirudh Subramanian</source>
          <target state="translated">アニルード・スブラマニアン</target>
        </trans-unit>
        <trans-unit id="1108804921f7fa74ee3f663d12f9acdb0f17609b" translate="yes" xml:space="preserve">
          <source>Announce the release on scipy.org</source>
          <target state="translated">リリースを scipy.org で発表します。</target>
        </trans-unit>
        <trans-unit id="9e0f71af0703a17a0fe77843a34b501f25db1f87" translate="yes" xml:space="preserve">
          <source>Announce to Linux Weekly News</source>
          <target state="translated">Linux ウィークリーニュースへのアナウンス</target>
        </trans-unit>
        <trans-unit id="542e50fbd0847e1465192e2a2bd9c3cc0e292cfc" translate="yes" xml:space="preserve">
          <source>Announce to mailing lists</source>
          <target state="translated">メーリングリストへのお知らせ</target>
        </trans-unit>
        <trans-unit id="ccc7a7a2cec9dbb01f44b9fb7e6acf4fd9b1506f" translate="yes" xml:space="preserve">
          <source>Announce to the lists</source>
          <target state="translated">リストへのアナウンス</target>
        </trans-unit>
        <trans-unit id="3b4dde3e14d997b719c29d0bbd6c5103efadda68" translate="yes" xml:space="preserve">
          <source>Another common separator is &lt;code&gt;&quot;\t&quot;&lt;/code&gt;, the tabulation character. However, we are not limited to a single character, any string will do. By default, &lt;a href=&quot;../reference/generated/numpy.genfromtxt#numpy.genfromtxt&quot;&gt;&lt;code&gt;genfromtxt&lt;/code&gt;&lt;/a&gt; assumes &lt;code&gt;delimiter=None&lt;/code&gt;, meaning that the line is split along white spaces (including tabs) and that consecutive white spaces are considered as a single white space.</source>
          <target state="translated">もう1つの一般的な区切り文字は、集計文字である &lt;code&gt;&quot;\t&quot;&lt;/code&gt; です。ただし、1文字に限定されるわけではなく、どの文字列でもかまいません。デフォルトでは、&lt;a href=&quot;../reference/generated/numpy.genfromtxt#numpy.genfromtxt&quot;&gt; &lt;code&gt;genfromtxt&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;delimiter=None&lt;/code&gt; を想定しています。これは、行が空白（タブを含む）に沿って分割され、連続する空白が単一の空白と見なされることを意味します。</target>
        </trans-unit>
        <trans-unit id="dfdf42a70a6f5e3b9eb4a7a9d5fd5b3a5e3c028d" translate="yes" xml:space="preserve">
          <source>Another common use of indexing with arrays is the search of the maximum value of time-dependent series:</source>
          <target state="translated">配列を用いたインデックス作成のもう一つの一般的な使用法は、時間依存系列の最大値の検索です。</target>
        </trans-unit>
        <trans-unit id="4043a7e9def49f8cd15e6e1c3c67b85fcd702c3b" translate="yes" xml:space="preserve">
          <source>Another difference with the standard ndarray of str data-type is that the chararray inherits the feature introduced by Numarray that white-space at the end of any element in the array will be ignored on item retrieval and comparison operations.</source>
          <target state="translated">strデータ型の標準的なndarrayとのもう一つの違いは、chararrayがNumarrayで導入された、配列内の要素の末尾の空白が項目の検索や比較操作で無視されるという特徴を継承していることです。</target>
        </trans-unit>
        <trans-unit id="5dcd2747e1a6d1d5aac68e7e1ee2b04c96abcc9c" translate="yes" xml:space="preserve">
          <source>Another example is the function &lt;code&gt;inner1d(a, b)&lt;/code&gt; with a signature of &lt;code&gt;(i),(i)-&amp;gt;()&lt;/code&gt;. This applies the inner product along the last axis of each input, but keeps the remaining indices intact. For example, where &lt;code&gt;a&lt;/code&gt; is of shape &lt;code&gt;(3, 5, N)&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; is of shape &lt;code&gt;(5, N)&lt;/code&gt;, this will return an output of shape &lt;code&gt;(3,5)&lt;/code&gt;. The underlying elementary function is called &lt;code&gt;3 * 5&lt;/code&gt; times. In the signature, we specify one core dimension &lt;code&gt;(i)&lt;/code&gt; for each input and zero core dimensions &lt;code&gt;()&lt;/code&gt; for the output, since it takes two 1-d arrays and returns a scalar. By using the same name &lt;code&gt;i&lt;/code&gt;, we specify that the two corresponding dimensions should be of the same size.</source>
          <target state="translated">別の例は、署名が &lt;code&gt;(i),(i)-&amp;gt;()&lt;/code&gt; の関数 &lt;code&gt;inner1d(a, b)&lt;/code&gt; ）です。これにより、各入力の最後の軸に沿って内積が適用されますが、残りのインデックスはそのまま保持されます。たとえば、 &lt;code&gt;a&lt;/code&gt; が形状 &lt;code&gt;(3, 5, N)&lt;/code&gt; 、 &lt;code&gt;b&lt;/code&gt; が形状 &lt;code&gt;(5, N)&lt;/code&gt; 場合、これは形状 &lt;code&gt;(3,5)&lt;/code&gt; の出力を返します。基本となる基本関数は &lt;code&gt;3 * 5&lt;/code&gt; 回呼び出されます。シグネチャでは、2つの1次元配列を取り、スカラーを返すため、各入力に対して1つのコア次元 &lt;code&gt;(i)&lt;/code&gt; と出力に対してゼロのコア次元 &lt;code&gt;()&lt;/code&gt; を指定します。同じ名前の使用することにより &lt;code&gt;i&lt;/code&gt; 、2つの対応する寸法が同じサイズであることを指定します。</target>
        </trans-unit>
        <trans-unit id="90bf0b9c455b04ca91edfdb12178ac251d5b7ad5" translate="yes" xml:space="preserve">
          <source>Another frequently asked question is &amp;ldquo;How do I debug C code inside NumPy?&amp;rdquo;. First, ensure that you have gdb installed on your system with the Python extensions (often the default on Linux). You can see which version of Python is running inside gdb to verify your setup:</source>
          <target state="translated">もう1つのよくある質問は、「NumPy内でCコードをデバッグするにはどうすればよいですか？」です。まず、Python拡張機能（多くの場合、Linuxのデフォルト）を使用してgdbがシステムにインストールされていることを確認します。セットアップを確認するために、gdb内で実行されているPythonのバージョンを確認できます。</target>
        </trans-unit>
        <trans-unit id="f0c72feff7651c1b9feda841c49b58c2d454b80e" translate="yes" xml:space="preserve">
          <source>Another important role played by deprecation markings in the C API is to move towards hiding internal details of the NumPy implementation. For those needing direct, easy, access to the data of ndarrays, this will not remove this ability. Rather, there are many potential performance optimizations which require changing the implementation details, and NumPy developers have been unable to try them because of the high value of preserving ABI compatibility. By deprecating this direct access, we will in the future be able to improve NumPy&amp;rsquo;s performance in ways we cannot presently.</source>
          <target state="translated">C APIの非推奨マークが果たすもう1つの重要な役割は、NumPy実装の内部の詳細を非表示にすることです。ndarrayのデータに直接、簡単にアクセスする必要がある場合、この機能は削除されません。むしろ、実装の詳細を変更する必要がある多くの潜在的なパフォーマンス最適化があり、NumPy開発者はABI互換性を維持する価値が高いため、それらを試すことができませんでした。この直接アクセスを廃止することにより、将来的にはNumPyのパフォーマンスを現在では実現できない方法で改善できるようになります。</target>
        </trans-unit>
        <trans-unit id="a86afb1ef0a04254ac219408ffb94437b02ea319" translate="yes" xml:space="preserve">
          <source>Another method is to use &lt;a href=&quot;generated/numpy.random.mt19937.jumped#numpy.random.MT19937.jumped&quot;&gt;&lt;code&gt;MT19937.jumped&lt;/code&gt;&lt;/a&gt; which advances the state as-if</source>
          <target state="translated">もう1つの方法は、&lt;a href=&quot;generated/numpy.random.mt19937.jumped#numpy.random.MT19937.jumped&quot;&gt; &lt;code&gt;MT19937.jumped&lt;/code&gt; &lt;/a&gt;を使用して、状態をあたかも進めることです。</target>
        </trans-unit>
        <trans-unit id="91143b613b806bdad96301f98bc353e17238828f" translate="yes" xml:space="preserve">
          <source>Another method is to use &lt;a href=&quot;generated/numpy.random.mt19937.mt19937.jumped#numpy.random.mt19937.MT19937.jumped&quot;&gt;&lt;code&gt;MT19937.jumped&lt;/code&gt;&lt;/a&gt; which advances the state as-if</source>
          <target state="translated">別の方法は、&lt;a href=&quot;generated/numpy.random.mt19937.mt19937.jumped#numpy.random.mt19937.MT19937.jumped&quot;&gt; &lt;code&gt;MT19937.jumped&lt;/code&gt; &lt;/a&gt;を使用することです。</target>
        </trans-unit>
        <trans-unit id="0fd6c16778a959995e7dc3e9960a7fccd4bf7af0" translate="yes" xml:space="preserve">
          <source>Another possibility is to use the &lt;a href=&quot;generated/numpy.ma.getmask#numpy.ma.getmask&quot;&gt;&lt;code&gt;getmask&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;generated/numpy.ma.getmaskarray#numpy.ma.getmaskarray&quot;&gt;&lt;code&gt;getmaskarray&lt;/code&gt;&lt;/a&gt; functions. &lt;code&gt;getmask(x)&lt;/code&gt; outputs the mask of &lt;code&gt;x&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is a masked array, and the special value &lt;a href=&quot;maskedarray.baseclass#numpy.ma.nomask&quot;&gt;&lt;code&gt;nomask&lt;/code&gt;&lt;/a&gt; otherwise. &lt;code&gt;getmaskarray(x)&lt;/code&gt; outputs the mask of &lt;code&gt;x&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is a masked array. If &lt;code&gt;x&lt;/code&gt; has no invalid entry or is not a masked array, the function outputs a boolean array of &lt;code&gt;False&lt;/code&gt; with as many elements as &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">別の可能性は使用することです&lt;a href=&quot;generated/numpy.ma.getmask#numpy.ma.getmask&quot;&gt; &lt;code&gt;getmask&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;generated/numpy.ma.getmaskarray#numpy.ma.getmaskarray&quot;&gt; &lt;code&gt;getmaskarray&lt;/code&gt; &lt;/a&gt;機能を。 &lt;code&gt;getmask(x)&lt;/code&gt; は、 &lt;code&gt;x&lt;/code&gt; がマスクされた配列の場合は &lt;code&gt;x&lt;/code&gt; のマスクを出力し、それ以外の場合は特別な値&lt;a href=&quot;maskedarray.baseclass#numpy.ma.nomask&quot;&gt; &lt;code&gt;nomask&lt;/code&gt; を出力し&lt;/a&gt;ます。 &lt;code&gt;getmaskarray(x)&lt;/code&gt; は、 &lt;code&gt;x&lt;/code&gt; がマスクされた配列の場合、 &lt;code&gt;x&lt;/code&gt; のマスクを出力します。場合 &lt;code&gt;x&lt;/code&gt; 無効なエントリを持っていないか、またはマスクされた配列でない、関数は、ブールアレイ出力 &lt;code&gt;False&lt;/code&gt; ような多くの要素として用いて &lt;code&gt;x&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f8f5707c41037b98d07b3655f44a00e7754af32b" translate="yes" xml:space="preserve">
          <source>Another simpler possibility is to use the &lt;code&gt;names&lt;/code&gt; keyword with a sequence of strings or a comma-separated string:</source>
          <target state="translated">もう1つの簡単な可能性は、 &lt;code&gt;names&lt;/code&gt; キーワードを一連の文字列またはコンマ区切りの文字列とともに使用することです。</target>
        </trans-unit>
        <trans-unit id="bb96c2d76983849aa396fb78c96e7b20143386c1" translate="yes" xml:space="preserve">
          <source>Another somewhat outdated MATLAB/NumPy cross-reference can be found at &lt;a href=&quot;http://mathesaurus.sf.net/&quot;&gt;http://mathesaurus.sf.net/&lt;/a&gt;</source>
          <target state="translated">もう1つのやや時代遅れのMATLAB / NumPy相互参照は、&lt;a href=&quot;http://mathesaurus.sf.net/&quot;&gt;http：//mathesaurus.sf.net/にあります。&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5b047c7f58df9c5865a2b74a6710b7b1e5f19d15" translate="yes" xml:space="preserve">
          <source>Another term for &lt;a href=&quot;#term-advanced-indexing&quot;&gt;advanced indexing&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#term-advanced-indexing&quot;&gt;高度なインデックス作成の&lt;/a&gt;別名。</target>
        </trans-unit>
        <trans-unit id="28a695f570d8eedee37a6873f1169fc8ffe3e272" translate="yes" xml:space="preserve">
          <source>Another term for an array dimension. Axes are numbered left to right; axis 0 is the first element in the shape tuple.</source>
          <target state="translated">配列の次元の別称。軸は左から右に番号付けされ、軸0はシェイプタプルの最初の要素です。</target>
        </trans-unit>
        <trans-unit id="05af7d96a4421569602af070d1f51ae85302570e" translate="yes" xml:space="preserve">
          <source>Another use of this flag is for setting up reduction operations. After the iterator is created, and a reduction output is allocated automatically by the iterator (be sure to use READWRITE access), its value may be initialized to the reduction unit. Use &lt;a href=&quot;#c.NpyIter_GetOperandArray&quot;&gt;&lt;code&gt;NpyIter_GetOperandArray&lt;/code&gt;&lt;/a&gt; to get the object. Then, call &lt;a href=&quot;#c.NpyIter_Reset&quot;&gt;&lt;code&gt;NpyIter_Reset&lt;/code&gt;&lt;/a&gt; to allocate and fill the buffers with their initial values.</source>
          <target state="translated">このフラグのもう1つの用途は、縮約操作の設定です。イテレータが作成され、イテレータによってリダクション出力が自動的に割り当てられた後（必ずREADWRITEアクセスを使用してください）、その値はリダクションユニットに初期化される場合があります。&lt;a href=&quot;#c.NpyIter_GetOperandArray&quot;&gt; &lt;code&gt;NpyIter_GetOperandArray&lt;/code&gt; &lt;/a&gt;を使用してオブジェクトを取得します。次に、&lt;a href=&quot;#c.NpyIter_Reset&quot;&gt; &lt;code&gt;NpyIter_Reset&lt;/code&gt; &lt;/a&gt;を呼び出して、バッファーを割り当て、初期値を入力します。</target>
        </trans-unit>
        <trans-unit id="1273c53271563cf36a39aab59fe3df9f43442e63" translate="yes" xml:space="preserve">
          <source>Another way to represent the determinant, more suitable for large matrices where underflow/overflow may occur.</source>
          <target state="translated">アンダーフロー/オーバーフローが発生する可能性のある大きな行列に適した行列式を表現する別の方法。</target>
        </trans-unit>
        <trans-unit id="4a9a549b7d1a971f20baf0bc7c2890ecc79e2921" translate="yes" xml:space="preserve">
          <source>Another way to retrieve the valid data is to use the &lt;a href=&quot;generated/numpy.ma.compressed#numpy.ma.compressed&quot;&gt;&lt;code&gt;compressed&lt;/code&gt;&lt;/a&gt; method, which returns a one-dimensional &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; (or one of its subclasses, depending on the value of the &lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray.baseclass&quot;&gt;&lt;code&gt;baseclass&lt;/code&gt;&lt;/a&gt; attribute):</source>
          <target state="translated">有効なデータを取得する別の方法は、1次元の&lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; &lt;/a&gt;（または、&lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray.baseclass&quot;&gt; &lt;code&gt;baseclass&lt;/code&gt; &lt;/a&gt;属性の値に応じてそのサブクラスの1 つ）を返す&lt;a href=&quot;generated/numpy.ma.compressed#numpy.ma.compressed&quot;&gt; &lt;code&gt;compressed&lt;/code&gt; &lt;/a&gt;メソッドを使用することです。</target>
        </trans-unit>
        <trans-unit id="4c793b7f96dc3a05a24bc874af2795d6270941c5" translate="yes" xml:space="preserve">
          <source>Anti-derivative of a polynomial.</source>
          <target state="translated">多項式の反派生。</target>
        </trans-unit>
        <trans-unit id="253f5b3f24b2fd1c0fc450339280f5eb6eb4f07c" translate="yes" xml:space="preserve">
          <source>Any &lt;a href=&quot;reference/arrays.scalars&quot;&gt;scalar&lt;/a&gt; or &lt;a href=&quot;https://docs.python.org/dev/glossary.html#term-sequence&quot;&gt;sequence&lt;/a&gt; that can be interpreted as an ndarray. In addition to ndarrays and scalars this category includes lists (possibly nested and with different element types) and tuples. Any argument accepted by &lt;a href=&quot;reference/generated/numpy.array&quot;&gt;numpy.array&lt;/a&gt; is array_like.</source>
          <target state="translated">任意の&lt;a href=&quot;reference/arrays.scalars&quot;&gt;スカラー&lt;/a&gt;または&lt;a href=&quot;https://docs.python.org/dev/glossary.html#term-sequence&quot;&gt;配列&lt;/a&gt;ndarrayとして解釈することができます。ndarrayとスカラーに加えて、このカテゴリにはリスト（ネストされている可能性があり、要素タイプが異なる）とタプルが含まれます。&lt;a href=&quot;reference/generated/numpy.array&quot;&gt;numpy.array&lt;/a&gt;が受け入れる引数はすべてarray_likeです。</target>
        </trans-unit>
        <trans-unit id="6711bfd3b820f62c39c4d88fd0c62299f5e94371" translate="yes" xml:space="preserve">
          <source>Any Python object.</source>
          <target state="translated">任意のPythonオブジェクト。</target>
        </trans-unit>
        <trans-unit id="a193823ba578f9f1e7b81264ee2c1d9779647da7" translate="yes" xml:space="preserve">
          <source>Any Python object:</source>
          <target state="translated">任意のPythonオブジェクト。</target>
        </trans-unit>
        <trans-unit id="58e444efe77e462bb342fdd66c1b5f6f6487f4f4" translate="yes" xml:space="preserve">
          <source>Any binary operation can be extended to an array operation in an outer product fashion like in &lt;a href=&quot;generated/numpy.outer#numpy.outer&quot;&gt;&lt;code&gt;outer&lt;/code&gt;&lt;/a&gt;, and the &lt;a href=&quot;generated/numpy.nditer#numpy.nditer&quot;&gt;&lt;code&gt;nditer&lt;/code&gt;&lt;/a&gt; object provides a way to accomplish this by explicitly mapping the axes of the operands. It is also possible to do this with &lt;a href=&quot;constants#numpy.newaxis&quot;&gt;&lt;code&gt;newaxis&lt;/code&gt;&lt;/a&gt; indexing, but we will show you how to directly use the nditer &lt;code&gt;op_axes&lt;/code&gt; parameter to accomplish this with no intermediate views.</source>
          <target state="translated">任意のバイナリ動作と同様外積様式でアレイ操作に拡張することができる&lt;a href=&quot;generated/numpy.outer#numpy.outer&quot;&gt; &lt;code&gt;outer&lt;/code&gt; &lt;/a&gt;、及び&lt;a href=&quot;generated/numpy.nditer#numpy.nditer&quot;&gt; &lt;code&gt;nditer&lt;/code&gt; の&lt;/a&gt;オブジェクトは、明示的オペランドの軸をマッピングすることによって、これを達成する方法を提供します。&lt;a href=&quot;constants#numpy.newaxis&quot;&gt; &lt;code&gt;newaxis&lt;/code&gt; &lt;/a&gt;インデックスを使用してこれを行うことも可能ですが、nditer &lt;code&gt;op_axes&lt;/code&gt; パラメータを直接使用して、中間ビューなしでこれを実行する方法を示します。</target>
        </trans-unit>
        <trans-unit id="df3387b9c652aaab79f08e9bac190d701d99f2f6" translate="yes" xml:space="preserve">
          <source>Any class or type can define this method which should take an ndarray argument and return an instance of the type. It can be seen as the opposite of the &lt;a href=&quot;../reference/arrays.classes#numpy.class.__array__&quot;&gt;&lt;code&gt;__array__&lt;/code&gt;&lt;/a&gt; method. This method is used by the ufuncs (and other NumPy functions) to allow other objects to pass through. For Python &amp;gt;2.4, it can also be used to write a decorator that converts a function that works only with ndarrays to one that works with any type with &lt;a href=&quot;../reference/arrays.classes#numpy.class.__array__&quot;&gt;&lt;code&gt;__array__&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../reference/arrays.classes#numpy.class.__array_wrap__&quot;&gt;&lt;code&gt;__array_wrap__&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">どのクラスまたは型でもこのメソッドを定義できます。このメソッドはndarray引数を取り、型のインスタンスを返す必要があります。これは、&lt;a href=&quot;../reference/arrays.classes#numpy.class.__array__&quot;&gt; &lt;code&gt;__array__&lt;/code&gt; &lt;/a&gt;メソッドの反対と見なすことができます。このメソッドは、ufuncs（および他のNumPy関数）によって使用され、他のオブジェクトが通過できるようにします。Python&amp;gt; 2.4の場合、ndarrayでのみ機能する関数を、&lt;a href=&quot;../reference/arrays.classes#numpy.class.__array__&quot;&gt; &lt;code&gt;__array__&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../reference/arrays.classes#numpy.class.__array_wrap__&quot;&gt; &lt;code&gt;__array_wrap__&lt;/code&gt; &lt;/a&gt;メソッドで任意の型で機能する関数に変換するデコレータを作成するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="10078c28a66a73c575c275e6dbad2ad1c3448ead" translate="yes" xml:space="preserve">
          <source>Any class, ndarray subclass or not, can define this method or set it to &lt;a href=&quot;https://docs.python.org/dev/library/constants.html#None&quot;&gt;&lt;code&gt;None&lt;/code&gt;&lt;/a&gt; in order to override the behavior of NumPy&amp;rsquo;s ufuncs. This works quite similarly to Python&amp;rsquo;s &lt;code&gt;__mul__&lt;/code&gt; and other binary operation routines.</source>
          <target state="translated">ndarrayサブクラスの有無にかかわらず、任意のクラスでこのメソッドを定義するか、NumPyのufuncの動作をオーバーライドするために&lt;a href=&quot;https://docs.python.org/dev/library/constants.html#None&quot;&gt; &lt;code&gt;None&lt;/code&gt; &lt;/a&gt;に設定できます。これは、Pythonの &lt;code&gt;__mul__&lt;/code&gt; および他のバイナリ演算ルーチンと非常によく似ています。</target>
        </trans-unit>
        <trans-unit id="615fb1d9086b422643eac8df92cc3c45b3d4452a" translate="yes" xml:space="preserve">
          <source>Any class, ndarray subclass or not, can define this method or set it to None in order to override the behavior of NumPy&amp;rsquo;s ufuncs. This works quite similarly to Python&amp;rsquo;s &lt;code&gt;__mul__&lt;/code&gt; and other binary operation routines.</source>
          <target state="translated">NumPyのufuncの動作をオーバーライドするために、ndarrayサブクラスであるかどうかに関係なく、どのクラスでもこのメソッドを定義するか、Noneに設定できます。これは、Pythonの &lt;code&gt;__mul__&lt;/code&gt; やその他の二項演算ルーチンとまったく同じように機能します。</target>
        </trans-unit>
        <trans-unit id="f4c392144526317c8f8ed6b5a13470ac5e7a3986" translate="yes" xml:space="preserve">
          <source>Any combination of N scalars/arrays with the meaning of 2. and 3.</source>
          <target state="translated">2.と3.の意味を持つN個のスカラー/配列の任意の組み合わせ。</target>
        </trans-unit>
        <trans-unit id="7e81367c0096f8373d0b6f4554ea3cc6aafb3c68" translate="yes" xml:space="preserve">
          <source>Any data flags (&lt;em&gt;e.g.&lt;/em&gt;&lt;a href=&quot;array#c.NPY_ARRAY_WRITEABLE&quot;&gt;&lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt;&lt;/a&gt; ) that should be used to interpret the memory.</source>
          <target state="translated">任意のデータのフラグ（&lt;em&gt;例えば&lt;/em&gt;&lt;a href=&quot;array#c.NPY_ARRAY_WRITEABLE&quot;&gt; &lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt; &lt;/a&gt;メモリを解釈するために使用する必要があります）。</target>
        </trans-unit>
        <trans-unit id="299b31e220e37372f3e91f15af6702628188b111" translate="yes" xml:space="preserve">
          <source>Any data flags (&lt;em&gt;e.g.&lt;/em&gt;&lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEABLE&quot;&gt;&lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt;&lt;/a&gt; ) that should be used to interpret the memory.</source>
          <target state="translated">任意のデータのフラグ（&lt;em&gt;例えば&lt;/em&gt;&lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEABLE&quot;&gt; &lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt; &lt;/a&gt;メモリを解釈するために使用する必要があります）。</target>
        </trans-unit>
        <trans-unit id="d26a90b0973e9f5339ce6764ce63dbf7b59a3e02" translate="yes" xml:space="preserve">
          <source>Any data saved to the file is appended to the end of the file.</source>
          <target state="translated">ファイルに保存されたデータは、ファイルの最後に追加されます。</target>
        </trans-unit>
        <trans-unit id="5d0107d5bdb46b9143c29ff9e836efde601fe340" translate="yes" xml:space="preserve">
          <source>Any dynamically allocated memory. Currently, this is used for dynamic ufuncs created from a python function to store room for the types, data, and name members.</source>
          <target state="translated">動的に割り当てられたメモリ。現在のところ、これは python の関数から作成された動的な ufuncs に使用され、型、データ、および名前のメンバのための部屋を格納します。</target>
        </trans-unit>
        <trans-unit id="f1796623bc2027a8a0877fb0e869c4d3c3990d76" translate="yes" xml:space="preserve">
          <source>Any further arguments given to &lt;a href=&quot;#numpy.piecewise&quot;&gt;&lt;code&gt;piecewise&lt;/code&gt;&lt;/a&gt; are passed to the functions upon execution, i.e., if called &lt;code&gt;piecewise(..., ..., 1, 'a')&lt;/code&gt;, then each function is called as &lt;code&gt;f(x, 1, 'a')&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;#numpy.piecewise&quot;&gt; &lt;code&gt;piecewise&lt;/code&gt; に&lt;/a&gt;指定されたその他の引数は、実行時に関数に渡されます。つまり、 &lt;code&gt;piecewise(..., ..., 1, 'a')&lt;/code&gt; が呼び出された場合、各関数は &lt;code&gt;f(x, 1, 'a')&lt;/code&gt; として呼び出されます。）。</target>
        </trans-unit>
        <trans-unit id="3fd7c425a186534062ca5afb654fb680173c25d5" translate="yes" xml:space="preserve">
          <source>Any keyword arguments the function requires.</source>
          <target state="translated">関数が必要とするキーワード引数。</target>
        </trans-unit>
        <trans-unit id="487737106c5cb105d4cc96a9c1768d045f864529" translate="yes" xml:space="preserve">
          <source>Any masked values in x is propagated in y, and vice-versa.</source>
          <target state="translated">x のマスクされた値は y に伝搬され、その逆も同様です。</target>
        </trans-unit>
        <trans-unit id="5b3e589175f1027a44f22dd657bf35194fb4efe1" translate="yes" xml:space="preserve">
          <source>Any object that can be interpreted as a numpy data type.</source>
          <target state="translated">numpyデータ型として解釈できる任意のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="5c7fd0d6a17d8a832706885c37ef7915bca46e30" translate="yes" xml:space="preserve">
          <source>Any of the &lt;a href=&quot;array#c.NPY_CASTING&quot;&gt;&lt;code&gt;NPY_CASTING&lt;/code&gt;&lt;/a&gt; enum values may be passed to &lt;code&gt;casting&lt;/code&gt;. The values include &lt;a href=&quot;array#c.NPY_NO_CASTING&quot;&gt;&lt;code&gt;NPY_NO_CASTING&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array#c.NPY_EQUIV_CASTING&quot;&gt;&lt;code&gt;NPY_EQUIV_CASTING&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array#c.NPY_SAFE_CASTING&quot;&gt;&lt;code&gt;NPY_SAFE_CASTING&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array#c.NPY_SAME_KIND_CASTING&quot;&gt;&lt;code&gt;NPY_SAME_KIND_CASTING&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;array#c.NPY_UNSAFE_CASTING&quot;&gt;&lt;code&gt;NPY_UNSAFE_CASTING&lt;/code&gt;&lt;/a&gt;. To allow the casts to occur, copying or buffering must also be enabled.</source>
          <target state="translated">&lt;a href=&quot;array#c.NPY_CASTING&quot;&gt; &lt;code&gt;NPY_CASTING&lt;/code&gt; &lt;/a&gt;列挙値のいずれかを &lt;code&gt;casting&lt;/code&gt; に渡すことができます。値には、&lt;a href=&quot;array#c.NPY_NO_CASTING&quot;&gt; &lt;code&gt;NPY_NO_CASTING&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array#c.NPY_EQUIV_CASTING&quot;&gt; &lt;code&gt;NPY_EQUIV_CASTING&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array#c.NPY_SAFE_CASTING&quot;&gt; &lt;code&gt;NPY_SAFE_CASTING&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array#c.NPY_SAME_KIND_CASTING&quot;&gt; &lt;code&gt;NPY_SAME_KIND_CASTING&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;array#c.NPY_UNSAFE_CASTING&quot;&gt; &lt;code&gt;NPY_UNSAFE_CASTING&lt;/code&gt; が含まれ&lt;/a&gt;ます。キャストを発生させるには、コピーまたはバッファリングも有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="a5faa1a4aa7fab555a1cad670ecbaad358f811e8" translate="yes" xml:space="preserve">
          <source>Any of the &lt;a href=&quot;array#c.NPY_ORDER&quot;&gt;&lt;code&gt;NPY_ORDER&lt;/code&gt;&lt;/a&gt; enum values may be passed to &lt;code&gt;order&lt;/code&gt;. For efficient iteration, &lt;a href=&quot;array#c.NPY_KEEPORDER&quot;&gt;&lt;code&gt;NPY_KEEPORDER&lt;/code&gt;&lt;/a&gt; is the best option, and the other orders enforce the particular iteration pattern.</source>
          <target state="translated">&lt;a href=&quot;array#c.NPY_ORDER&quot;&gt; &lt;code&gt;NPY_ORDER&lt;/code&gt; &lt;/a&gt;列挙値のいずれかを &lt;code&gt;order&lt;/code&gt; に渡すことができます。効率的な反復には、&lt;a href=&quot;array#c.NPY_KEEPORDER&quot;&gt; &lt;code&gt;NPY_KEEPORDER&lt;/code&gt; &lt;/a&gt;が最適なオプションであり、他の順序は特定の反復パターンを適用します。</target>
        </trans-unit>
        <trans-unit id="61c0049b3dfe5e641bc6afd3eb13a7ff82f212c5" translate="yes" xml:space="preserve">
          <source>Any of the &lt;a href=&quot;array#c.NPY_ORDER&quot;&gt;&lt;code&gt;NPY_ORDER&lt;/code&gt;&lt;/a&gt; enum values may be passed to &lt;code&gt;order&lt;/code&gt;. For efficient iteration, &lt;a href=&quot;array#c.NPY_KEEPORDER&quot;&gt;&lt;code&gt;NPY_KEEPORDER&lt;/code&gt;&lt;/a&gt; is the best option, and the other orders enforce the particular iteration pattern. When using &lt;a href=&quot;array#c.NPY_KEEPORDER&quot;&gt;&lt;code&gt;NPY_KEEPORDER&lt;/code&gt;&lt;/a&gt;, if you also want to ensure that the iteration is not reversed along an axis, you should pass the flag &lt;a href=&quot;#c.NPY_ITER_DONT_NEGATE_STRIDES&quot;&gt;&lt;code&gt;NPY_ITER_DONT_NEGATE_STRIDES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;array#c.NPY_ORDER&quot;&gt; &lt;code&gt;NPY_ORDER&lt;/code&gt; &lt;/a&gt;列挙値のいずれかを &lt;code&gt;order&lt;/code&gt; に渡すことができます。効率的な反復には、&lt;a href=&quot;array#c.NPY_KEEPORDER&quot;&gt; &lt;code&gt;NPY_KEEPORDER&lt;/code&gt; &lt;/a&gt;が最適なオプションであり、他の順序は特定の反復パターンを適用します。&lt;a href=&quot;array#c.NPY_KEEPORDER&quot;&gt; &lt;code&gt;NPY_KEEPORDER&lt;/code&gt; &lt;/a&gt;を使用するときに、反復が軸に沿って反転しないようにする場合は、フラグ&lt;a href=&quot;#c.NPY_ITER_DONT_NEGATE_STRIDES&quot;&gt; &lt;code&gt;NPY_ITER_DONT_NEGATE_STRIDES&lt;/code&gt; &lt;/a&gt;を渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="6945ac0af9b8b9ad29a3d13b28b137c3c2801d79" translate="yes" xml:space="preserve">
          <source>Any of the &lt;a href=&quot;c-api.array#c.NPY_CASTING&quot;&gt;&lt;code&gt;NPY_CASTING&lt;/code&gt;&lt;/a&gt; enum values may be passed to &lt;code&gt;casting&lt;/code&gt;. The values include &lt;a href=&quot;c-api.array#c.NPY_NO_CASTING&quot;&gt;&lt;code&gt;NPY_NO_CASTING&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;c-api.array#c.NPY_EQUIV_CASTING&quot;&gt;&lt;code&gt;NPY_EQUIV_CASTING&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;c-api.array#c.NPY_SAFE_CASTING&quot;&gt;&lt;code&gt;NPY_SAFE_CASTING&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;c-api.array#c.NPY_SAME_KIND_CASTING&quot;&gt;&lt;code&gt;NPY_SAME_KIND_CASTING&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;c-api.array#c.NPY_UNSAFE_CASTING&quot;&gt;&lt;code&gt;NPY_UNSAFE_CASTING&lt;/code&gt;&lt;/a&gt;. To allow the casts to occur, copying or buffering must also be enabled.</source>
          <target state="translated">どの&lt;a href=&quot;c-api.array#c.NPY_CASTING&quot;&gt; &lt;code&gt;NPY_CASTING&lt;/code&gt; &lt;/a&gt;列挙値も &lt;code&gt;casting&lt;/code&gt; に渡すことができます。値には、&lt;a href=&quot;c-api.array#c.NPY_NO_CASTING&quot;&gt; &lt;code&gt;NPY_NO_CASTING&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;c-api.array#c.NPY_EQUIV_CASTING&quot;&gt; &lt;code&gt;NPY_EQUIV_CASTING&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;c-api.array#c.NPY_SAFE_CASTING&quot;&gt; &lt;code&gt;NPY_SAFE_CASTING&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;c-api.array#c.NPY_SAME_KIND_CASTING&quot;&gt; &lt;code&gt;NPY_SAME_KIND_CASTING&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;c-api.array#c.NPY_UNSAFE_CASTING&quot;&gt; &lt;code&gt;NPY_UNSAFE_CASTING&lt;/code&gt; が含まれ&lt;/a&gt;ます。キャストを可能にするには、コピーまたはバッファリングも有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="99411ff6757ed2755306b2b1a16852e86b5af656" translate="yes" xml:space="preserve">
          <source>Any of the &lt;a href=&quot;c-api.array#c.NPY_ORDER&quot;&gt;&lt;code&gt;NPY_ORDER&lt;/code&gt;&lt;/a&gt; enum values may be passed to &lt;code&gt;order&lt;/code&gt;. For efficient iteration, &lt;a href=&quot;c-api.array#c.NPY_KEEPORDER&quot;&gt;&lt;code&gt;NPY_KEEPORDER&lt;/code&gt;&lt;/a&gt; is the best option, and the other orders enforce the particular iteration pattern.</source>
          <target state="translated">&lt;a href=&quot;c-api.array#c.NPY_ORDER&quot;&gt; &lt;code&gt;NPY_ORDER&lt;/code&gt; &lt;/a&gt;列挙値のいずれかを &lt;code&gt;order&lt;/code&gt; に渡すことができます。効率的な反復には、&lt;a href=&quot;c-api.array#c.NPY_KEEPORDER&quot;&gt; &lt;code&gt;NPY_KEEPORDER&lt;/code&gt; &lt;/a&gt;が最適なオプションであり、他の順序は特定の反復パターンを適用します。</target>
        </trans-unit>
        <trans-unit id="edb631f6c3d9ec9fd114b3a0b6be2d92e321c394" translate="yes" xml:space="preserve">
          <source>Any of the &lt;a href=&quot;c-api.array#c.NPY_ORDER&quot;&gt;&lt;code&gt;NPY_ORDER&lt;/code&gt;&lt;/a&gt; enum values may be passed to &lt;code&gt;order&lt;/code&gt;. For efficient iteration, &lt;a href=&quot;c-api.array#c.NPY_KEEPORDER&quot;&gt;&lt;code&gt;NPY_KEEPORDER&lt;/code&gt;&lt;/a&gt; is the best option, and the other orders enforce the particular iteration pattern. When using &lt;a href=&quot;c-api.array#c.NPY_KEEPORDER&quot;&gt;&lt;code&gt;NPY_KEEPORDER&lt;/code&gt;&lt;/a&gt;, if you also want to ensure that the iteration is not reversed along an axis, you should pass the flag &lt;a href=&quot;#c.NPY_ITER_DONT_NEGATE_STRIDES&quot;&gt;&lt;code&gt;NPY_ITER_DONT_NEGATE_STRIDES&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;c-api.array#c.NPY_ORDER&quot;&gt; &lt;code&gt;NPY_ORDER&lt;/code&gt; &lt;/a&gt;列挙値のいずれかを &lt;code&gt;order&lt;/code&gt; に渡すことができます。効率的な反復には、&lt;a href=&quot;c-api.array#c.NPY_KEEPORDER&quot;&gt; &lt;code&gt;NPY_KEEPORDER&lt;/code&gt; &lt;/a&gt;が最適なオプションであり、他の順序は特定の反復パターンを適用します。&lt;a href=&quot;c-api.array#c.NPY_KEEPORDER&quot;&gt; &lt;code&gt;NPY_KEEPORDER&lt;/code&gt; &lt;/a&gt;を使用しているときに、軸に沿って反復が反転しないようにしたい場合は、フラグ&lt;a href=&quot;#c.NPY_ITER_DONT_NEGATE_STRIDES&quot;&gt; &lt;code&gt;NPY_ITER_DONT_NEGATE_STRIDES&lt;/code&gt; &lt;/a&gt;を渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="b3abc478c3f222918197160be100f748fcb675c9" translate="yes" xml:space="preserve">
          <source>Any of the above can be repeated with an arbitrary array-like instead of just integers. For instance:</source>
          <target state="translated">上記のいずれかは、単なる整数ではなく、任意の配列のようなものを使って繰り返すことができます。例えば</target>
        </trans-unit>
        <trans-unit id="baa143a57607b2a750593f79fe56d85a053bca99" translate="yes" xml:space="preserve">
          <source>Any of the bits &lt;a href=&quot;array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt;&lt;/a&gt; (1), &lt;a href=&quot;array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt;&lt;/a&gt; (2), &lt;a href=&quot;array#c.NPY_ARRAY_ALIGNED&quot;&gt;&lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt;&lt;/a&gt; (0x100), &lt;a href=&quot;array#c.NPY_ARRAY_NOTSWAPPED&quot;&gt;&lt;code&gt;NPY_ARRAY_NOTSWAPPED&lt;/code&gt;&lt;/a&gt; (0x200), or &lt;a href=&quot;array#c.NPY_ARRAY_WRITEABLE&quot;&gt;&lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt;&lt;/a&gt; (0x400) to indicate something about the data. The &lt;a href=&quot;array#c.NPY_ARRAY_ALIGNED&quot;&gt;&lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt;&lt;/a&gt; flags can actually be determined from the other parameters. The flag &lt;a href=&quot;../arrays.interface#c.NPY_ARR_HAS_DESCR&quot;&gt;&lt;code&gt;NPY_ARR_HAS_DESCR&lt;/code&gt;&lt;/a&gt; (0x800) can also be set to indicate to objects consuming the version 3 array interface that the descr member of the structure is present (it will be ignored by objects consuming version 2 of the array interface).</source>
          <target state="translated">ビットのいずれか&lt;a href=&quot;array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt; &lt;/a&gt;（1）、&lt;a href=&quot;array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt; &lt;/a&gt;（2）、&lt;a href=&quot;array#c.NPY_ARRAY_ALIGNED&quot;&gt; &lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt; &lt;/a&gt;（0x100の）、&lt;a href=&quot;array#c.NPY_ARRAY_NOTSWAPPED&quot;&gt; &lt;code&gt;NPY_ARRAY_NOTSWAPPED&lt;/code&gt; &lt;/a&gt;（0x200から）、または&lt;a href=&quot;array#c.NPY_ARRAY_WRITEABLE&quot;&gt; &lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt; &lt;/a&gt;（0x400）データについて何かを指示します。&lt;a href=&quot;array#c.NPY_ARRAY_ALIGNED&quot;&gt; &lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt; &lt;/a&gt;、及び&lt;a href=&quot;array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt; &lt;/a&gt;フラグが実際に他のパラメータから決定することができます。フラグ&lt;a href=&quot;../arrays.interface#c.NPY_ARR_HAS_DESCR&quot;&gt; &lt;code&gt;NPY_ARR_HAS_DESCR&lt;/code&gt; &lt;/a&gt;（0x800）を設定して、バージョン3の配列インターフェイスを使用するオブジェクトに構造のdescrメンバーが存在することを示すこともできます（バージョン2の配列インターフェイスを使用するオブジェクトでは無視されます）。</target>
        </trans-unit>
        <trans-unit id="50f8138ac25a7b846ede67771ef46a3519a7468a" translate="yes" xml:space="preserve">
          <source>Any of the bits &lt;a href=&quot;array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt;&lt;/a&gt; (1), &lt;a href=&quot;array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt;&lt;/a&gt; (2), &lt;a href=&quot;array#c.NPY_ARRAY_ALIGNED&quot;&gt;&lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt;&lt;/a&gt; (0x100), &lt;a href=&quot;array#c.NPY_ARRAY_NOTSWAPPED&quot;&gt;&lt;code&gt;NPY_ARRAY_NOTSWAPPED&lt;/code&gt;&lt;/a&gt; (0x200), or &lt;a href=&quot;array#c.NPY_ARRAY_WRITEABLE&quot;&gt;&lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt;&lt;/a&gt; (0x400) to indicate something about the data. The &lt;a href=&quot;array#c.NPY_ARRAY_ALIGNED&quot;&gt;&lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt;&lt;/a&gt; flags can actually be determined from the other parameters. The flag &lt;code&gt;NPY_ARR_HAS_DESCR&lt;/code&gt; (0x800) can also be set to indicate to objects consuming the version 3 array interface that the descr member of the structure is present (it will be ignored by objects consuming version 2 of the array interface).</source>
          <target state="translated">ビットのいずれか&lt;a href=&quot;array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt; &lt;/a&gt;（1）、&lt;a href=&quot;array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt; &lt;/a&gt;（2）、&lt;a href=&quot;array#c.NPY_ARRAY_ALIGNED&quot;&gt; &lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt; &lt;/a&gt;（0x100の）、&lt;a href=&quot;array#c.NPY_ARRAY_NOTSWAPPED&quot;&gt; &lt;code&gt;NPY_ARRAY_NOTSWAPPED&lt;/code&gt; &lt;/a&gt;（0x200から）、または&lt;a href=&quot;array#c.NPY_ARRAY_WRITEABLE&quot;&gt; &lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt; &lt;/a&gt;（0x400）データについて何かを指示します。&lt;a href=&quot;array#c.NPY_ARRAY_ALIGNED&quot;&gt; &lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt; &lt;/a&gt;、及び&lt;a href=&quot;array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt; &lt;/a&gt;フラグが実際に他のパラメータから決定することができます。フラグ &lt;code&gt;NPY_ARR_HAS_DESCR&lt;/code&gt; （0x800）を設定して、バージョン3の配列インターフェイスを使用するオブジェクトに構造のdescrメンバーが存在することを示すこともできます（バージョン2の配列インターフェイスを使用するオブジェクトでは無視されます）。</target>
        </trans-unit>
        <trans-unit id="be291c901c4e86c13d0921234777782594d69ca9" translate="yes" xml:space="preserve">
          <source>Any of the bits &lt;a href=&quot;c-api.array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt;&lt;/a&gt; (1), &lt;a href=&quot;c-api.array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt;&lt;/a&gt; (2), &lt;a href=&quot;c-api.array#c.NPY_ARRAY_ALIGNED&quot;&gt;&lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt;&lt;/a&gt; (0x100), &lt;a href=&quot;c-api.array#c.NPY_ARRAY_NOTSWAPPED&quot;&gt;&lt;code&gt;NPY_ARRAY_NOTSWAPPED&lt;/code&gt;&lt;/a&gt; (0x200), or &lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEABLE&quot;&gt;&lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt;&lt;/a&gt; (0x400) to indicate something about the data. The &lt;a href=&quot;c-api.array#c.NPY_ARRAY_ALIGNED&quot;&gt;&lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;c-api.array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;c-api.array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt;&lt;/a&gt; flags can actually be determined from the other parameters. The flag &lt;code&gt;NPY_ARR_HAS_DESCR&lt;/code&gt; (0x800) can also be set to indicate to objects consuming the version 3 array interface that the descr member of the structure is present (it will be ignored by objects consuming version 2 of the array interface).</source>
          <target state="translated">ビットのいずれか&lt;a href=&quot;c-api.array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt; &lt;/a&gt;（1）、&lt;a href=&quot;c-api.array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt; &lt;/a&gt;（2）、&lt;a href=&quot;c-api.array#c.NPY_ARRAY_ALIGNED&quot;&gt; &lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt; &lt;/a&gt;（0x100の）、&lt;a href=&quot;c-api.array#c.NPY_ARRAY_NOTSWAPPED&quot;&gt; &lt;code&gt;NPY_ARRAY_NOTSWAPPED&lt;/code&gt; &lt;/a&gt;（0x200から）、または&lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEABLE&quot;&gt; &lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt; &lt;/a&gt;（0x400）データについて何かを指示します。&lt;a href=&quot;c-api.array#c.NPY_ARRAY_ALIGNED&quot;&gt; &lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;c-api.array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt; &lt;/a&gt;、及び&lt;a href=&quot;c-api.array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt; &lt;/a&gt;フラグが実際に他のパラメータから決定することができます。フラグ &lt;code&gt;NPY_ARR_HAS_DESCR&lt;/code&gt; （0x800）を設定して、バージョン3のアレイインターフェイスを使用するオブジェクトに、構造体のdescrメンバーが存在することを示すこともできます（アレイインターフェイスのバージョン2を使用するオブジェクトでは無視されます）。</target>
        </trans-unit>
        <trans-unit id="451522a82b98d1ecbb1f701acd57fae92d96248e" translate="yes" xml:space="preserve">
          <source>Any scalar or sequence that can be interpreted as an ndarray.</source>
          <target state="translated">ndarrayとして解釈可能な任意のスカラーまたはシーケンス。</target>
        </trans-unit>
        <trans-unit id="ade55446d2b73db16731c562424aceaad0914376" translate="yes" xml:space="preserve">
          <source>Any sequence that can be interpreted as an ndarray. This includes nested lists, tuples, scalars and existing arrays.</source>
          <target state="translated">ndarrayとして解釈できる任意のシーケンス。これには、入れ子になったリスト、タプル、スカラ、既存の配列が含まれます。</target>
        </trans-unit>
        <trans-unit id="f40cd9ea72e6075ff56d97f5c96e1adeaca3800f" translate="yes" xml:space="preserve">
          <source>Any specified CPU feature to &lt;code&gt;--cpu-dispatch&lt;/code&gt; will be skipped if it&amp;rsquo;s part of CPU baseline features</source>
          <target state="translated">&lt;code&gt;--cpu-dispatch&lt;/code&gt; に指定されたCPU機能は、CPUベースライン機能の一部である場合はスキップされます</target>
        </trans-unit>
        <trans-unit id="c0fc04558da8dd3c7bccbbace9c70f03ebdb6a80" translate="yes" xml:space="preserve">
          <source>Any string in &lt;code&gt;numpy.sctypeDict&lt;/code&gt;.keys():</source>
          <target state="translated">&lt;code&gt;numpy.sctypeDict&lt;/code&gt; .keys（）の任意の文字列：</target>
        </trans-unit>
        <trans-unit id="d713c0e047edfbd49f0b3846ac98a9a40d4a3161" translate="yes" xml:space="preserve">
          <source>Any third argument to &lt;a href=&quot;https://docs.python.org/dev/library/functions.html#pow&quot;&gt;&lt;code&gt;pow&lt;/code&gt;&lt;/a&gt; is silently ignored, as the underlying &lt;a href=&quot;generated/numpy.power#numpy.power&quot;&gt;&lt;code&gt;ufunc&lt;/code&gt;&lt;/a&gt; takes only two arguments.</source>
          <target state="translated">基になる&lt;a href=&quot;generated/numpy.power#numpy.power&quot;&gt; &lt;code&gt;ufunc&lt;/code&gt; &lt;/a&gt;は2つの引数しか取らないので、&lt;a href=&quot;https://docs.python.org/dev/library/functions.html#pow&quot;&gt; &lt;code&gt;pow&lt;/code&gt; &lt;/a&gt;への3番目の引数は黙って無視されます。</target>
        </trans-unit>
        <trans-unit id="946a38c0dae9772a5b694f0cc7db9666bf07194e" translate="yes" xml:space="preserve">
          <source>Any time you want to use a package or library in your code, you first need to make it accessible.</source>
          <target state="translated">パッケージやライブラリをコードの中で使いたいときはいつでも、まずアクセスできるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="53be63b1330ee25c1f855c85df25ca52d3b0d9ac" translate="yes" xml:space="preserve">
          <source>Any type object with a &lt;code&gt;dtype&lt;/code&gt; attribute: The attribute will be accessed and used directly. The attribute must return something that is convertible into a dtype object.</source>
          <target state="translated">&lt;code&gt;dtype&lt;/code&gt; 属性を持つ任意のタイプオブジェクト：属性は直接アクセスされ、使用されます。属性は、dtypeオブジェクトに変換可能なものを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="a26626a547f9526333d65f7f7ac98e634e8d404b" translate="yes" xml:space="preserve">
          <source>Append a new recording filter or apply it if the state is entered.</source>
          <target state="translated">新しい録画フィルタを追加するか、状態が入力されている場合に適用します。</target>
        </trans-unit>
        <trans-unit id="2911a13c39db194e9958de7d85a60b6ad7244721" translate="yes" xml:space="preserve">
          <source>Append directory &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt; to the list of directories searched for include files.</source>
          <target state="translated">インクルードファイルを検索するディレクトリのリストにディレクトリ &lt;code&gt;&amp;lt;dir&amp;gt;&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="01347379ae01a5a40d3d1ed49513be6a422e707d" translate="yes" xml:space="preserve">
          <source>Append elements at the end of an array.</source>
          <target state="translated">配列の最後に要素を追加します。</target>
        </trans-unit>
        <trans-unit id="6e89159e1cc33f0d869902b46493c6f6e94db543" translate="yes" xml:space="preserve">
          <source>Append values to the end of an array.</source>
          <target state="translated">配列の最後に値を追加します。</target>
        </trans-unit>
        <trans-unit id="481aab454c2962551cc9f57d11f57a67e0fca9e4" translate="yes" xml:space="preserve">
          <source>Appending to build flags</source>
          <target state="translated">ビルドフラグへの追加</target>
        </trans-unit>
        <trans-unit id="5d9cf77e8ba225a7ce0a29de1d2139c5781725d4" translate="yes" xml:space="preserve">
          <source>Appends a data function to the data_files list that will generate __svn_version__.py file to the current package directory.</source>
          <target state="translated">data_files リストにデータ関数を追加し、_svn_version__.py ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="33f5ee9b7c00e9ead408311c459141d052778da5" translate="yes" xml:space="preserve">
          <source>Applies an offset counted in valid days.</source>
          <target state="translated">有効日数でカウントしたオフセットを適用します。</target>
        </trans-unit>
        <trans-unit id="2bf57444d43c734213e1d3c851fdf1b3fb150bdf" translate="yes" xml:space="preserve">
          <source>Applies glob.glob(&amp;hellip;) to each path in the sequence (if needed) and pre-pends the local_path if needed. Because this is called on all source lists, this allows wildcard characters to be specified in lists of sources for extension modules and libraries and scripts and allows path-names be relative to the source directory.</source>
          <target state="translated">シーケンス内の各パスにglob.glob（&amp;hellip;）を適用し（必要な場合）、必要に応じてlocal_pathを付加します。これはすべてのソースリストで呼び出されるため、拡張モジュール、ライブラリ、およびスクリプトのソースのリストでワイルドカード文字を指定できるようになり、パス名をソースディレクトリに対して相対的にすることができます。</target>
        </trans-unit>
        <trans-unit id="78652f7b097973c5af68766b38955ba3ae45a013" translate="yes" xml:space="preserve">
          <source>Applies the Einstein summation convention to the array operands provided, returning a new array or placing the result in &lt;em&gt;out&lt;/em&gt;. The string in &lt;em&gt;subscripts&lt;/em&gt; is a comma separated list of index letters. The number of operands is in &lt;em&gt;nop&lt;/em&gt;, and &lt;em&gt;op_in&lt;/em&gt; is an array containing those operands. The data type of the output can be forced with &lt;em&gt;dtype&lt;/em&gt;, the output order can be forced with &lt;em&gt;order&lt;/em&gt; (&lt;a href=&quot;#c.NPY_KEEPORDER&quot;&gt;&lt;code&gt;NPY_KEEPORDER&lt;/code&gt;&lt;/a&gt; is recommended), and when &lt;em&gt;dtype&lt;/em&gt; is specified, &lt;em&gt;casting&lt;/em&gt; indicates how permissive the data conversion should be.</source>
          <target state="translated">提供された配列オペランドにEinstein総和規則を適用し、新しい配列を返すか、結果を&lt;em&gt;outに&lt;/em&gt;配置&lt;em&gt;し&lt;/em&gt;ます。&lt;em&gt;下付き&lt;/em&gt;文字の文字列は、インデックス文字のコンマ区切りのリストです。オペランドの数は&lt;em&gt;nop&lt;/em&gt;にあり、&lt;em&gt;op_in&lt;/em&gt;はそれらのオペランドを含む配列です。出力のデータ型がで強制することができ&lt;em&gt;DTYPE&lt;/em&gt;、出力順序を用いて強制的にすることができる&lt;em&gt;ため&lt;/em&gt;（&lt;a href=&quot;#c.NPY_KEEPORDER&quot;&gt; &lt;code&gt;NPY_KEEPORDER&lt;/code&gt; が&lt;/a&gt;推奨される）、及び場合&lt;em&gt;DTYPEが&lt;/em&gt;指定され、&lt;em&gt;鋳造は&lt;/em&gt;許容データ変換がどうあるべきかを示しています。</target>
        </trans-unit>
        <trans-unit id="21feca4b141579d51c961cd00a897cb1717e4a03" translate="yes" xml:space="preserve">
          <source>Apply &lt;code&gt;index_array&lt;/code&gt; from argpartition to an array as if by calling partition.</source>
          <target state="translated">パーティションを呼び出すかのように、 &lt;code&gt;index_array&lt;/code&gt; から配列にindex_arrayを適用します。</target>
        </trans-unit>
        <trans-unit id="4ca4fe7fefd7c25f71a50eeea097cc697cb368a1" translate="yes" xml:space="preserve">
          <source>Apply &lt;code&gt;index_array&lt;/code&gt; from argsort to an array as if by calling sort.</source>
          <target state="translated">sortを呼び出すかのように、 &lt;code&gt;index_array&lt;/code&gt; をargsortから配列に適用します。</target>
        </trans-unit>
        <trans-unit id="c436985ffd81a143fc825046932ac1ad32bff874" translate="yes" xml:space="preserve">
          <source>Apply &lt;code&gt;np.expand_dims(index_array, axis)&lt;/code&gt; from argmax to an array as if by calling max.</source>
          <target state="translated">適用 &lt;code&gt;np.expand_dims(index_array, axis)&lt;/code&gt; の最大を呼び出すことであるかのように配列にARGMAXから。</target>
        </trans-unit>
        <trans-unit id="7cc1b6ea691ac922af6be7bae41f63f959261f5d" translate="yes" xml:space="preserve">
          <source>Apply &lt;code&gt;np.expand_dims(index_array, axis)&lt;/code&gt; from argmin to an array as if by calling min.</source>
          <target state="translated">適用 &lt;code&gt;np.expand_dims(index_array, axis)&lt;/code&gt; 分を呼び出しているかのようにアレイにargminから。</target>
        </trans-unit>
        <trans-unit id="17c58f86e54424ee8c27debf26633ec82caf815e" translate="yes" xml:space="preserve">
          <source>Apply &lt;code&gt;op&lt;/code&gt; to the arguments &lt;code&gt;*x&lt;/code&gt; elementwise, broadcasting the arguments.</source>
          <target state="translated">引数 &lt;code&gt;*x&lt;/code&gt; に要素ごとに &lt;code&gt;op&lt;/code&gt; を適用し、引数をブロードキャストします。</target>
        </trans-unit>
        <trans-unit id="a15deb464b32712e5faad1a95646f2d13bba4428" translate="yes" xml:space="preserve">
          <source>Apply a decorator to all methods in a class matching a regular expression.</source>
          <target state="translated">正規表現にマッチするクラスのすべてのメソッドにデコレータを適用します。</target>
        </trans-unit>
        <trans-unit id="9aba00bb90c6eaaa703b9d293078221144653ecd" translate="yes" xml:space="preserve">
          <source>Apply a function repeatedly over multiple axes.</source>
          <target state="translated">複数の軸に繰り返し関数を適用します。</target>
        </trans-unit>
        <trans-unit id="930471cd723d35b6c2b966e96ceecc291d0fdf6a" translate="yes" xml:space="preserve">
          <source>Apply a function to 1-D slices along the given axis.</source>
          <target state="translated">与えられた軸に沿って1次元スライスに関数を適用します。</target>
        </trans-unit>
        <trans-unit id="60e579e665f3197d6488027d302750921e380286" translate="yes" xml:space="preserve">
          <source>Apply a function to 1-D slices of an array along the given axis.</source>
          <target state="translated">指定された軸に沿った配列の1次元スライスに関数を適用します.</target>
        </trans-unit>
        <trans-unit id="8a69d5c1511c3d8cf1aef04b61ce82902f9e77f8" translate="yes" xml:space="preserve">
          <source>Apply function &amp;lsquo;func&amp;rsquo; as a reduction across fields of a structured array.</source>
          <target state="translated">構造化配列のフィールド全体の縮小として関数 'func'を適用します。</target>
        </trans-unit>
        <trans-unit id="92f37352400ea0595778e975d3829366956d6422" translate="yes" xml:space="preserve">
          <source>Apply glob to paths and prepend local_path if needed.</source>
          <target state="translated">パスに glob を適用し、必要に応じて local_path を前置します。</target>
        </trans-unit>
        <trans-unit id="6d57e8ee432c77c347bd91e42e1ec296a790a962" translate="yes" xml:space="preserve">
          <source>Apply linear map to input points.</source>
          <target state="translated">入力点にリニアマップを適用します。</target>
        </trans-unit>
        <trans-unit id="b451c47d03d2342612630d90e5961330763668d9" translate="yes" xml:space="preserve">
          <source>Apply the same function to a scalar value.</source>
          <target state="translated">スカラー値に同じ関数を適用します。</target>
        </trans-unit>
        <trans-unit id="c19a38c87eebd888f6ee1a1c74150ed1ef57dd31" translate="yes" xml:space="preserve">
          <source>Apply the ufunc &lt;code&gt;op&lt;/code&gt; to all pairs (a, b) with a in &lt;code&gt;A&lt;/code&gt; and b in &lt;code&gt;B&lt;/code&gt;.</source>
          <target state="translated">aが &lt;code&gt;A&lt;/code&gt; でbが &lt;code&gt;B&lt;/code&gt; であるすべてのペア（a、b）にufunc &lt;code&gt;op&lt;/code&gt; を適用します。</target>
        </trans-unit>
        <trans-unit id="b480bceb3391de1a231371b22b8f98d14965a74b" translate="yes" xml:space="preserve">
          <source>Applying to all colors</source>
          <target state="translated">すべての色に適用</target>
        </trans-unit>
        <trans-unit id="f11fedb225efa784388e87f9d68e4b132e27f024" translate="yes" xml:space="preserve">
          <source>Approximation</source>
          <target state="translated">Approximation</target>
        </trans-unit>
        <trans-unit id="0a7e07004db73b8ccd197df301f0c0c88108495f" translate="yes" xml:space="preserve">
          <source>Arbitrary data (extra arguments, function names, &lt;em&gt;etc.&lt;/em&gt; ) that can be stored with the ufunc and will be passed in when it is called.</source>
          <target state="translated">ufuncで保存でき、呼び出されたときに渡される任意のデータ（追加の引数、関数名&lt;em&gt;など&lt;/em&gt;）。</target>
        </trans-unit>
        <trans-unit id="d6c0ec3c601093336049eacec64ee0a29b472718" translate="yes" xml:space="preserve">
          <source>Arbitrary subclasses of numpy.ndarray are not completely preserved. Subclasses will be accepted for writing, but only the array data will be written out. A regular numpy.ndarray object will be created upon reading the file.</source>
          <target state="translated">numpy.ndarrayの任意のサブクラスは完全には保存されません。サブクラスの書き込みは受け付けますが、配列データだけが書き出されます。ファイルを読み込むと、通常の numpy.ndarray オブジェクトが作成されます。</target>
        </trans-unit>
        <trans-unit id="55d5f33d484d4926bb72a9fc085161f70575b63d" translate="yes" xml:space="preserve">
          <source>Arch option for windows binary</source>
          <target state="translated">バイナリの窓のためのアーチオプション</target>
        </trans-unit>
        <trans-unit id="d91c75193c3842b9d909ec7b8dd4d035b07a9f55" translate="yes" xml:space="preserve">
          <source>Are all arguments of a type that we know how to handle?</source>
          <target state="translated">すべての引数は、私たちがどのように扱うか知っている型のものですか?</target>
        </trans-unit>
        <trans-unit id="9bdf5e0978150bd50fab817fc37629d830ac57f1" translate="yes" xml:space="preserve">
          <source>Are axis or shape arguments tested to be &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;tuples&lt;/code&gt;?</source>
          <target state="translated">軸または形状の引数は、 &lt;code&gt;int&lt;/code&gt; または &lt;code&gt;tuples&lt;/code&gt; ことがテストされていますか？</target>
        </trans-unit>
        <trans-unit id="14bf0c3e3104c86791f4ce367eca2a5cc6cd438f" translate="yes" xml:space="preserve">
          <source>Are the array elements of type unicode (True) or string (False). Default is False.</source>
          <target state="translated">配列の要素の型は unicode (True)または文字列 (False)です。デフォルトはFalseです。</target>
        </trans-unit>
        <trans-unit id="b5b7142c8499ab6cb5dbe41cc158e30ea956ddca" translate="yes" xml:space="preserve">
          <source>Are unusual &lt;code&gt;dtypes&lt;/code&gt; tested if a function supports those?</source>
          <target state="translated">関数がそれらをサポートする場合、異常な &lt;code&gt;dtypes&lt;/code&gt; テストされますか？</target>
        </trans-unit>
        <trans-unit id="54fec1cc4e99f8522843b011fb68aafe3fb92c1c" translate="yes" xml:space="preserve">
          <source>Aren&amp;rsquo;t how-tos and tutorials the same thing?</source>
          <target state="translated">ハウツーとチュートリアルは同じものではありませんか？</target>
        </trans-unit>
        <trans-unit id="c651546e6d3a9b3b4ba1458219c7c80e713538c6" translate="yes" xml:space="preserve">
          <source>Argmin and argmax out argument</source>
          <target state="translated">アルグミンとアルグマックスのアウト引数</target>
        </trans-unit>
        <trans-unit id="04b5fdf11f1c668ee1bccda74e473d486cb80034" translate="yes" xml:space="preserve">
          <source>Argout Arrays</source>
          <target state="translated">アルグアウト配列</target>
        </trans-unit>
        <trans-unit id="1f693ea5d95326ee12ba9edafca87f6f5ac163dc" translate="yes" xml:space="preserve">
          <source>Argout View Arrays</source>
          <target state="translated">Argout ビュー配列</target>
        </trans-unit>
        <trans-unit id="9362235cd642830a37eb4b0e960e60e4a8a7f208" translate="yes" xml:space="preserve">
          <source>Argout arrays are arrays that appear in the input arguments in C, but are in fact output arrays. This pattern occurs often when there is more than one output variable and the single return argument is therefore not sufficient. In Python, the conventional way to return multiple arguments is to pack them into a sequence (tuple, list, etc.) and return the sequence. This is what the argout typemaps do. If a wrapped function that uses these argout typemaps has more than one return argument, they are packed into a tuple or list, depending on the version of Python. The Python user does not pass these arrays in, they simply get returned. For the case where a dimension is specified, the python user must provide that dimension as an argument. The argout signatures are</source>
          <target state="translated">Argout配列は、C言語の入力引数に現れる配列ですが、実際には出力配列です。このパターンは、複数の出力変数があり、したがって単一の戻り引数では十分ではない場合によく発生します。Pythonでは、複数の引数を返すための従来の方法は、複数の引数をシーケンス(タプルやリストなど)に詰め込んで返すことです。これがargout型マップが行っていることです。これらのargout型マップを使用するラップド関数が複数の戻り引数を持っている場合、Pythonのバージョンに応じてタプルやリストにパックされます。Pythonユーザはこれらの配列を渡すことはなく、単に返されます。次元が指定されている場合、pythonユーザはその次元を引数として提供しなければなりません。argoutのシグネチャは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="f0d811a8c8b43b06e028e619f05e9d14eafcdca7" translate="yes" xml:space="preserve">
          <source>Argoutview arrays are for when your C code provides you with a view of its internal data and does not require any memory to be allocated by the user. This can be dangerous. There is almost no way to guarantee that the internal data from the C code will remain in existence for the entire lifetime of the NumPy array that encapsulates it. If the user destroys the object that provides the view of the data before destroying the NumPy array, then using that array may result in bad memory references or segmentation faults. Nevertheless, there are situations, working with large data sets, where you simply have no other choice.</source>
          <target state="translated">Argoutview配列は、C言語のコードが内部データのビューを提供し、ユーザによるメモリ割り当てを必要としない場合のためのものです。これは危険な場合があります。Cコードの内部データが、それをカプセル化しているNumPy配列の全寿命の間存在し続けることを保証する方法はほとんどありません。ユーザーがNumPy配列を破棄する前にデータのビューを提供するオブジェクトを破棄した場合、その配列を使用すると、不良メモリ参照やセグメンテーションエラーが発生する可能性があります。それでも、大規模なデータセットを扱う場合には、他に選択肢がない場合があります。</target>
        </trans-unit>
        <trans-unit id="69013bc8794a33ce0d96e2362b8fd29875b1d20a" translate="yes" xml:space="preserve">
          <source>Argument can be either</source>
          <target state="translated">引数は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="80e8304a176934810abc17d2d26c3888e65cbaa7" translate="yes" xml:space="preserve">
          <source>Argument of complex values.</source>
          <target state="translated">複雑な価値観の引数。</target>
        </trans-unit>
        <trans-unit id="103cd4d5d40741b2189f1a4cd45b1145dc7d5cc2" translate="yes" xml:space="preserve">
          <source>Argument of the Bessel function.</source>
          <target state="translated">Bessel関数の引数。</target>
        </trans-unit>
        <trans-unit id="da03da7501b0f4c3d0e71a81aacac0740f6ea6ce" translate="yes" xml:space="preserve">
          <source>Argument(s) can be either</source>
          <target state="translated">引数は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="3a267e3ae3a20fe67defefd5d3c99d6c87f6bed7" translate="yes" xml:space="preserve">
          <source>Argument(s) can be either:</source>
          <target state="translated">引数は以下のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="cbb9fa252e60809efa55a7ad83aea5438ef56753" translate="yes" xml:space="preserve">
          <source>Arguments</source>
          <target state="translated">Arguments</target>
        </trans-unit>
        <trans-unit id="5649abe78903b9f6461061e275735b25a7054ccd" translate="yes" xml:space="preserve">
          <source>Arguments for &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;func&lt;/code&gt; の引数。</target>
        </trans-unit>
        <trans-unit id="1fece9ebb467e36ae935eb7f9713ac9a4f47e841" translate="yes" xml:space="preserve">
          <source>Arguments passed to &lt;code&gt;func&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;func&lt;/code&gt; に渡される引数。</target>
        </trans-unit>
        <trans-unit id="ed091b4d91808383da4576963f0c43e1c919be23" translate="yes" xml:space="preserve">
          <source>Arguments to be passed to the nose test runner. &lt;code&gt;argv[0]&lt;/code&gt; is ignored. All command line arguments accepted by &lt;code&gt;nosetests&lt;/code&gt; will work. If it is the default value None, sys.argv is used.</source>
          <target state="translated">ノーズテストランナーに渡される引数。 &lt;code&gt;argv[0]&lt;/code&gt; は無視されます。 &lt;code&gt;nosetests&lt;/code&gt; で受け入れられるすべてのコマンドライン引数が機能します。デフォルト値Noneの場合、sys.argvが使用されます。</target>
        </trans-unit>
        <trans-unit id="a47a631225ff0c3415173266008602c859777e94" translate="yes" xml:space="preserve">
          <source>Arguments to pass on to the ufunc. Typically &lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;out&lt;/code&gt;.</source>
          <target state="translated">ufuncに渡す引数。通常は、&lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt;または &lt;code&gt;out&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a0478ca5f4c068ca3ac12f9474f6a15865ce9053" translate="yes" xml:space="preserve">
          <source>Arguments:</source>
          <target state="translated">Arguments:</target>
        </trans-unit>
        <trans-unit id="45f053dc732762c8c17889da40821807b746247b" translate="yes" xml:space="preserve">
          <source>Arithmetic</source>
          <target state="translated">Arithmetic</target>
        </trans-unit>
        <trans-unit id="424915704fdafa9f1991a2f818f149305624ecb5" translate="yes" xml:space="preserve">
          <source>Arithmetic and comparison operations</source>
          <target state="translated">算術と比較演算</target>
        </trans-unit>
        <trans-unit id="27c9afdfd25af93dd20b5c590862915ebec2aa5c" translate="yes" xml:space="preserve">
          <source>Arithmetic and comparison operations are supported by masked arrays. As much as possible, invalid entries of a masked array are not processed, meaning that the corresponding &lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray.data&quot;&gt;&lt;code&gt;data&lt;/code&gt;&lt;/a&gt; entries &lt;em&gt;should&lt;/em&gt; be the same before and after the operation.</source>
          <target state="translated">算術演算と比較演算は、マスクされた配列でサポートされています。可能な限り、マスクされた配列の無効なエントリは処理されません。つまり、対応する&lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray.data&quot;&gt; &lt;code&gt;data&lt;/code&gt; &lt;/a&gt;エントリ&lt;em&gt;は&lt;/em&gt;、操作の前後で同じである&lt;em&gt;必要&lt;/em&gt;があります。</target>
        </trans-unit>
        <trans-unit id="c0e6f1226f47528d48f2f359b548a2a985744686" translate="yes" xml:space="preserve">
          <source>Arithmetic and comparison operations are supported by masked arrays. As much as possible, invalid entries of a masked array are not processed, meaning that the corresponding &lt;code&gt;data&lt;/code&gt; entries &lt;em&gt;should&lt;/em&gt; be the same before and after the operation.</source>
          <target state="translated">算術演算と比較演算は、マスクされた配列でサポートされています。可能な限り、マスクされた配列の無効なエントリは処理されません。つまり、対応する &lt;code&gt;data&lt;/code&gt; エントリ&lt;em&gt;は&lt;/em&gt;、操作の前後で同じである&lt;em&gt;必要&lt;/em&gt;があります。</target>
        </trans-unit>
        <trans-unit id="574e424bf0f02d1b18e3ad5386f39a38953e230d" translate="yes" xml:space="preserve">
          <source>Arithmetic and comparison operations on &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarrays&lt;/code&gt;&lt;/a&gt; are defined as element-wise operations, and generally yield &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; objects as results.</source>
          <target state="translated">&lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarrays&lt;/code&gt; &lt;/a&gt;算術演算と比較演算は要素ごとの演算として定義され、一般に結果として&lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; &lt;/a&gt;オブジェクトを生成します。</target>
        </trans-unit>
        <trans-unit id="6179dfdf1f721c4f139e7add385d54ea9025725c" translate="yes" xml:space="preserve">
          <source>Arithmetic is modular when using integer types, and no error is raised on overflow.</source>
          <target state="translated">整数型を使用する場合、算術はモジュール化されており、オーバーフロー時にエラーが発生することはありません。</target>
        </trans-unit>
        <trans-unit id="72188498e399312affe529bd4d440a03ee9c95e4" translate="yes" xml:space="preserve">
          <source>Arithmetic is modular when using integer types, and no error is raised on overflow. That means that, on a 32-bit platform:</source>
          <target state="translated">整数型を使用する場合、算術はモジュール化されており、オーバーフローでエラーが発生することはありません。つまり、32ビットプラットフォームでは</target>
        </trans-unit>
        <trans-unit id="339f6492877ce24a534c3f1e9110c317be457d3a" translate="yes" xml:space="preserve">
          <source>Arithmetic mean taken while not ignoring NaNs</source>
          <target state="translated">NaNを無視した算術平均値</target>
        </trans-unit>
        <trans-unit id="1fc0feb17ac2848b9f01591a445a367739c560da" translate="yes" xml:space="preserve">
          <source>Arithmetic operations</source>
          <target state="translated">算術演算</target>
        </trans-unit>
        <trans-unit id="7ee1fda772751523c2669ec2f48ddc06e8ec6d54" translate="yes" xml:space="preserve">
          <source>Arithmetic operators on arrays apply &lt;em&gt;elementwise&lt;/em&gt;. A new array is created and filled with the result.</source>
          <target state="translated">配列の算術演算子は&lt;em&gt;要素ごとに&lt;/em&gt;適用されます。新しい配列が作成され、結果が入力されます。</target>
        </trans-unit>
        <trans-unit id="16ba88bd7d8f2b893c09bcff737706246adcbc3b" translate="yes" xml:space="preserve">
          <source>Arithmetic, in-place:</source>
          <target state="translated">算数、その場で。</target>
        </trans-unit>
        <trans-unit id="ac2131c4955b2cce396141546558f75712964834" translate="yes" xml:space="preserve">
          <source>Arithmetic, matrix multiplication, and comparison operations</source>
          <target state="translated">算数、行列の掛け算、比較演算</target>
        </trans-unit>
        <trans-unit id="d534ca6745f09f171b20632796505d5bd60949d7" translate="yes" xml:space="preserve">
          <source>Arithmetic:</source>
          <target state="translated">Arithmetic:</target>
        </trans-unit>
        <trans-unit id="0771a753fa9fe721bf5720d2f9bacca79fff9e8e" translate="yes" xml:space="preserve">
          <source>Arithmetics</source>
          <target state="translated">Arithmetics</target>
        </trans-unit>
        <trans-unit id="dfc7a32fa9a79ec3a22472c368d871d5e78afd31" translate="yes" xml:space="preserve">
          <source>Array (possibly multi-dimensional) of values for which to to calculate &lt;code&gt;sinc(x)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sinc(x)&lt;/code&gt; を計算する値の配列（おそらく多次元）。</target>
        </trans-unit>
        <trans-unit id="0523df413b1fea0ba7975ab7c9175833f364830f" translate="yes" xml:space="preserve">
          <source>Array &lt;strong&gt;attributes&lt;/strong&gt; reflect information intrinsic to the array itself. If you need to get, or even set, properties of an array without creating a new array, you can often access an array through its attributes.</source>
          <target state="translated">配列&lt;strong&gt;属性&lt;/strong&gt;は、配列自体に固有の情報を反映します。新しい配列を作成せずに配列のプロパティを取得または設定する必要がある場合は、多くの場合、その属性を介して配列にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="6951f36c01ac0e1bf34c5ee5904784fafce57b89" translate="yes" xml:space="preserve">
          <source>Array API</source>
          <target state="translated">配列API</target>
        </trans-unit>
        <trans-unit id="5555a6fcea0c1d138c4fd9c9348c13792e83ec8b" translate="yes" xml:space="preserve">
          <source>Array Attributes</source>
          <target state="translated">配列属性</target>
        </trans-unit>
        <trans-unit id="3458034e7e106c04c09c4ec57632af02a473c676" translate="yes" xml:space="preserve">
          <source>Array Broadcasting in Numpy</source>
          <target state="translated">Numpyでの配列放送</target>
        </trans-unit>
        <trans-unit id="0c1a37c234fe9514069c7363784bf98af15b8355" translate="yes" xml:space="preserve">
          <source>Array Creation</source>
          <target state="translated">配列の作成</target>
        </trans-unit>
        <trans-unit id="daa02d3f49bf321fb5979b03ac56b6cd9657dfad" translate="yes" xml:space="preserve">
          <source>Array Functions</source>
          <target state="translated">配列関数</target>
        </trans-unit>
        <trans-unit id="12d693ff9b1c0d4047e2b7848ca27e4c2aad6719" translate="yes" xml:space="preserve">
          <source>Array Iterator</source>
          <target state="translated">配列イテレータ</target>
        </trans-unit>
        <trans-unit id="043a8c676a7d5d7051367cd8181a4b07707df511" translate="yes" xml:space="preserve">
          <source>Array Iterator API</source>
          <target state="translated">配列イテレータ API</target>
        </trans-unit>
        <trans-unit id="23211b01eb261a332c7929b935052183b79935ba" translate="yes" xml:space="preserve">
          <source>Array Iterators</source>
          <target state="translated">配列イテレータ</target>
        </trans-unit>
        <trans-unit id="17e44520a1762d19a9e642fb414c494c724cbf21" translate="yes" xml:space="preserve">
          <source>Array Scalars</source>
          <target state="translated">アレイスカラー</target>
        </trans-unit>
        <trans-unit id="d8dbcc76e586f64f22d24c3030096b5747dde0a4" translate="yes" xml:space="preserve">
          <source>Array arguments</source>
          <target state="translated">配列の引数</target>
        </trans-unit>
        <trans-unit id="2ec85771e631fd3b121a1ff64071bd20ad9c65bf" translate="yes" xml:space="preserve">
          <source>Array attributes</source>
          <target state="translated">配列属性</target>
        </trans-unit>
        <trans-unit id="447450427b5d5b0e87b960a4d40e39c7fb5454bf" translate="yes" xml:space="preserve">
          <source>Array attributes reflect information that is intrinsic to the array itself. Generally, accessing an array through its attributes allows you to get and sometimes set intrinsic properties of the array without creating a new array. The exposed attributes are the core parts of an array and only some of them can be reset meaningfully without creating a new array. Information on each attribute is given below.</source>
          <target state="translated">配列の属性は、配列自体に固有の情報を反映しています。一般的に、その属性から配列にアクセスすることで、新しい配列を作成しなくても配列の本質的なプロパティを取得したり設定したりすることができます。公開されている属性は配列の中心的な部分であり、新しい配列を作成しなくても意味のあるリセットができるのはそのうちのいくつかだけです。各属性に関する情報を以下に示します。</target>
        </trans-unit>
        <trans-unit id="43e339bdd3d217a5df3e10b8dade9046731deb5f" translate="yes" xml:space="preserve">
          <source>Array axis summations, &lt;a href=&quot;numpy.sum#numpy.sum&quot;&gt;&lt;code&gt;numpy.sum&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">配列軸の合計、&lt;a href=&quot;numpy.sum#numpy.sum&quot;&gt; &lt;code&gt;numpy.sum&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c2c33d8dc2ce945222653dfcc314e267ebd95901" translate="yes" xml:space="preserve">
          <source>Array coercion changes when Strings and other types are mixed</source>
          <target state="translated">文字列と他の型が混在すると、配列の強制力が変わる</target>
        </trans-unit>
        <trans-unit id="c3499b80a79c532bb5bd65ecb4071851e51014ae" translate="yes" xml:space="preserve">
          <source>Array coercion restructure</source>
          <target state="translated">アレイの強要と再構築</target>
        </trans-unit>
        <trans-unit id="57c60efa53930ae07f9d8ba23de0e194c69cf7fe" translate="yes" xml:space="preserve">
          <source>Array comparison assertions include maximum differences</source>
          <target state="translated">配列比較アサーションには、最大差分が含まれています。</target>
        </trans-unit>
        <trans-unit id="347b135c7cac14f05d7b1660f5d4b4c54f55d66d" translate="yes" xml:space="preserve">
          <source>Array comparisons involving strings or structured dtypes</source>
          <target state="translated">文字列や構造化されたd型を含む配列比較</target>
        </trans-unit>
        <trans-unit id="d7a5d8de55dabc36dc25c0b90e8906cffcb6a61a" translate="yes" xml:space="preserve">
          <source>Array containing data to be averaged. If &lt;code&gt;a&lt;/code&gt; is not an array, a conversion is attempted.</source>
          <target state="translated">平均化するデータを含む配列。 &lt;code&gt;a&lt;/code&gt; が配列でない場合、変換が試行されます。</target>
        </trans-unit>
        <trans-unit id="54d016905c8d5e8ccde24c37f9843bcd318cb81c" translate="yes" xml:space="preserve">
          <source>Array containing elements to clip.</source>
          <target state="translated">クリップする要素を含む配列。</target>
        </trans-unit>
        <trans-unit id="3961c6f8eadfe688bca31469d6a9f6d86adf81c6" translate="yes" xml:space="preserve">
          <source>Array containing number of representable floating point numbers between items in &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; の項目間の表現可能な浮動小数点数を含む配列。</target>
        </trans-unit>
        <trans-unit id="3692161b3a773c7a966c7715be4b4e9968f11340" translate="yes" xml:space="preserve">
          <source>Array containing numbers whose maximum is desired. If &lt;code&gt;a&lt;/code&gt; is not an array, a conversion is attempted.</source>
          <target state="translated">最大値が必要な数値を含む配列。 &lt;code&gt;a&lt;/code&gt; が配列でない場合、変換が試行されます。</target>
        </trans-unit>
        <trans-unit id="e6449394cdaf60dea5ac71fdd09a0ed9e9fcf7ee" translate="yes" xml:space="preserve">
          <source>Array containing numbers whose mean is desired. If &lt;code&gt;a&lt;/code&gt; is not an array, a conversion is attempted.</source>
          <target state="translated">平均が必要な数値を含む配列。 &lt;code&gt;a&lt;/code&gt; が配列でない場合、変換が試行されます。</target>
        </trans-unit>
        <trans-unit id="535ad2f426544f7de05e5d9017d86d66f0dc26b1" translate="yes" xml:space="preserve">
          <source>Array containing numbers whose minimum is desired. If &lt;code&gt;a&lt;/code&gt; is not an array, a conversion is attempted.</source>
          <target state="translated">最小値が必要な数値を含む配列。 &lt;code&gt;a&lt;/code&gt; が配列でない場合、変換が試行されます。</target>
        </trans-unit>
        <trans-unit id="64bc244f5b24dc5faeb077670f074a7e20727322" translate="yes" xml:space="preserve">
          <source>Array containing numbers whose product is desired. If &lt;code&gt;a&lt;/code&gt; is not an array, a conversion is attempted.</source>
          <target state="translated">積が必要な数値を含む配列。 &lt;code&gt;a&lt;/code&gt; が配列でない場合、変換が試行されます。</target>
        </trans-unit>
        <trans-unit id="ee6ece6461a907cbfdfd61282756037912ce23f3" translate="yes" xml:space="preserve">
          <source>Array containing numbers whose sum is desired. If &lt;code&gt;a&lt;/code&gt; is not an array, a conversion is attempted.</source>
          <target state="translated">合計が必要な数値を含む配列。 &lt;code&gt;a&lt;/code&gt; が配列でない場合、変換が試行されます。</target>
        </trans-unit>
        <trans-unit id="2effaddf77c674bd9a13dc031c59b1eb4d28fa23" translate="yes" xml:space="preserve">
          <source>Array containing numbers whose variance is desired. If &lt;code&gt;a&lt;/code&gt; is not an array, a conversion is attempted.</source>
          <target state="translated">分散が必要な数値を含む配列。 &lt;code&gt;a&lt;/code&gt; が配列でない場合、変換が試行されます。</target>
        </trans-unit>
        <trans-unit id="f011f52156b6489c00057dbaf1f239251b746676" translate="yes" xml:space="preserve">
          <source>Array containing the roots of the series.</source>
          <target state="translated">系列のルートを含む配列。</target>
        </trans-unit>
        <trans-unit id="d1fb2d0b90ad27fe772216fd0efb4378564945a2" translate="yes" xml:space="preserve">
          <source>Array contents</source>
          <target state="translated">配列の内容</target>
        </trans-unit>
        <trans-unit id="2ea33ca743035321174ecf9d435d32b0b6324742" translate="yes" xml:space="preserve">
          <source>Array conversion</source>
          <target state="translated">配列変換</target>
        </trans-unit>
        <trans-unit id="fc6b3a513ef2597bc0f03a1e823241af5164729d" translate="yes" xml:space="preserve">
          <source>Array convolution. Same output as polymul, but has parameter for overlap mode.</source>
          <target state="translated">配列畳み込み。polymulと同じ出力ですが、オーバーラップモードのパラメータがあります。</target>
        </trans-unit>
        <trans-unit id="57c72a1a53b95fbe1af3976c75af0287d5c9a140" translate="yes" xml:space="preserve">
          <source>Array creation</source>
          <target state="translated">配列の作成</target>
        </trans-unit>
        <trans-unit id="b5a18bd4e3702b73f0e8bbba0d5f2e2fddff6728" translate="yes" xml:space="preserve">
          <source>Array creation routines</source>
          <target state="translated">配列作成ルーチン</target>
        </trans-unit>
        <trans-unit id="a51f0e8ac2e03ac06587c6b47fb57edec0450c93" translate="yes" xml:space="preserve">
          <source>Array data to be saved.</source>
          <target state="translated">保存する配列データ。</target>
        </trans-unit>
        <trans-unit id="4e68baef4a7d203aefd9d4a59b835fc6af2a5db3" translate="yes" xml:space="preserve">
          <source>Array data-type.</source>
          <target state="translated">配列データ型。</target>
        </trans-unit>
        <trans-unit id="52dbdba544f09b15fca774eb24a9caf2434bcfe6" translate="yes" xml:space="preserve">
          <source>Array desired.</source>
          <target state="translated">希望する配列。</target>
        </trans-unit>
        <trans-unit id="785376e3605a2b132b04a5af283162b0f7133160" translate="yes" xml:space="preserve">
          <source>Array flags</source>
          <target state="translated">配列フラグ</target>
        </trans-unit>
        <trans-unit id="746aa39a47d26f55bf62b76f045191bc2131b857" translate="yes" xml:space="preserve">
          <source>Array flags provide information about how the memory area used for the array is to be interpreted. There are 7 Boolean flags in use, only four of which can be changed by the user: WRITEBACKIFCOPY, UPDATEIFCOPY, WRITEABLE, and ALIGNED.</source>
          <target state="translated">配列フラグは、配列に使用されるメモリ領域がどのように解釈されるかについての情報を提供します。使用中の7つのブール値フラグがありますが、そのうちユーザが変更できるのは4つだけです。WRITEBACKIFCOPY、UPDATEIFCOPY、WRITEABLE、ALIGNEDです。</target>
        </trans-unit>
        <trans-unit id="5f6e91f1df0558c7246187a2b89a1e305be167b2" translate="yes" xml:space="preserve">
          <source>Array flags; may be one or more of:</source>
          <target state="translated">配列フラグ。</target>
        </trans-unit>
        <trans-unit id="09f0fcdcc100e898aaa63b04e30eafb660bbc3ed" translate="yes" xml:space="preserve">
          <source>Array from which the diagonals are taken.</source>
          <target state="translated">対角線を取得する配列。</target>
        </trans-unit>
        <trans-unit id="3966916957967be244949812c17944d586ffd56d" translate="yes" xml:space="preserve">
          <source>Array from which to extract a part.</source>
          <target state="translated">パーツを抽出するための配列。</target>
        </trans-unit>
        <trans-unit id="e35c942121269158d9bce83e940f79fd38671bbd" translate="yes" xml:space="preserve">
          <source>Array indexing refers to any use of the square brackets ([]) to index array values. There are many options to indexing, which give numpy indexing great power, but with power comes some complexity and the potential for confusion. This section is just an overview of the various options and issues related to indexing. Aside from single element indexing, the details on most of these options are to be found in related sections.</source>
          <target state="translated">配列のインデキシングとは、配列の値をインデキシングするために角括弧([])を使用することを指します。インデックス作成には多くのオプションがあり、numpy のインデックス作成には大きな力がありますが、力があればあるほど複雑になり、混乱を招く可能性があります。この節では、インデキシングに関連する様々なオプションと問題点の概要を説明します。単一要素のインデキシングは別として、これらのオプションの詳細は関連するセクションにあります。</target>
        </trans-unit>
        <trans-unit id="4a877fe238b2290421c4de0ccb250aa8e3797a13" translate="yes" xml:space="preserve">
          <source>Array interface</source>
          <target state="translated">配列インターフェース</target>
        </trans-unit>
        <trans-unit id="533db24c36bf6bd74ce0240469f4033043848386" translate="yes" xml:space="preserve">
          <source>Array interpretation of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">の配列の解釈。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1230519a64fd2e0f26f95201257e208e07092a99" translate="yes" xml:space="preserve">
          <source>Array interpretation of &lt;code&gt;a&lt;/code&gt;. If &lt;code&gt;a&lt;/code&gt; is an ndarray or a subclass of ndarray, it is returned as-is and no copy is performed.</source>
          <target state="translated">の配列の解釈。場合ndarrayまたはndarrayのサブクラスである、そのまま返され、コピーは実行されません。 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a004555e4ca47c97c392427144fe0dcc6f68634" translate="yes" xml:space="preserve">
          <source>Array interpretation of &lt;code&gt;a&lt;/code&gt;. No copy is performed if the input is already an ndarray with matching dtype and order. If &lt;code&gt;a&lt;/code&gt; is a subclass of ndarray, a base class ndarray is returned.</source>
          <target state="translated">の配列の解釈。入力がすでに一致するdtypeと順序を持つndarrayである場合、コピーは実行されません。 &lt;code&gt;a&lt;/code&gt; がndarrayのサブクラスの場合、基本クラスndarrayが返されます。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9a82a73ea4a83ace24f5a89b08b00620d66cb5bf" translate="yes" xml:space="preserve">
          <source>Array interpretation of &lt;code&gt;a&lt;/code&gt;. No copy is performed if the input is already an ndarray. If &lt;code&gt;a&lt;/code&gt; is a subclass of ndarray, a base class ndarray is returned.</source>
          <target state="translated">の配列の解釈。入力がすでにndarrayである場合、コピーは実行されません。 &lt;code&gt;a&lt;/code&gt; がndarrayのサブクラスの場合、基本クラスndarrayが返されます。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1af36487281180923aa6bea35e0e5228dcc2e12d" translate="yes" xml:space="preserve">
          <source>Array into which the output is placed. Its type is preserved and it must be of the right shape to hold the output.</source>
          <target state="translated">出力を配置する配列。その型は保持され、出力を保持するためには正しい形状でなければなりません。</target>
        </trans-unit>
        <trans-unit id="02f71c6bb3adeae64ae8bccd5d811288aeb1d5e1" translate="yes" xml:space="preserve">
          <source>Array into which the result can be placed. Its type is preserved and it must be of the right shape to hold the output.</source>
          <target state="translated">結果を配置できる配列。その型は保持され、出力を保持するためには適切な形状でなければなりません。</target>
        </trans-unit>
        <trans-unit id="1a57f1ce3b565cb3497401b660e08581c3aafec2" translate="yes" xml:space="preserve">
          <source>Array like index object or slice object for indexing into first operand. If first operand has multiple dimensions, indices can be a tuple of array like index objects or slice objects.</source>
          <target state="translated">最初のオペランドにインデックスを作成するためのインデックスオブジェクトやスライスオブジェクトのような配列です。最初のオペランドが多次元である場合、インデックスはインデックスオブジェクトやスライスオブジェクトのような配列のタプルになります。</target>
        </trans-unit>
        <trans-unit id="d40d802fdd7ba3f82f5c9dc44f415145a1e22c74" translate="yes" xml:space="preserve">
          <source>Array manipulation routines</source>
          <target state="translated">配列操作ルーチン</target>
        </trans-unit>
        <trans-unit id="069ff2b332e403300b9cde701bf5368c5831882c" translate="yes" xml:space="preserve">
          <source>Array method alternative API</source>
          <target state="translated">配列メソッド代替API</target>
        </trans-unit>
        <trans-unit id="5a716333b00a93ed3236b0b9385a0a127035480c" translate="yes" xml:space="preserve">
          <source>Array methods</source>
          <target state="translated">配列メソッド</target>
        </trans-unit>
        <trans-unit id="4e4004372e15259457b2d1e38548f61c9bc5e00d" translate="yes" xml:space="preserve">
          <source>Array mixins</source>
          <target state="translated">配列ミックスイン</target>
        </trans-unit>
        <trans-unit id="f161aeb75d90d23a000f60fbe55cf3eae07ee334" translate="yes" xml:space="preserve">
          <source>Array objects</source>
          <target state="translated">配列オブジェクト</target>
        </trans-unit>
        <trans-unit id="cf093406a8132eb8bfd9cf1020e69e3fe6518645" translate="yes" xml:space="preserve">
          <source>Array obtained.</source>
          <target state="translated">得られた配列。</target>
        </trans-unit>
        <trans-unit id="6b0a1f1e944aed373e67de14ba6a79b095a23306" translate="yes" xml:space="preserve">
          <source>Array of &lt;code&gt;fill_value&lt;/code&gt; with the given shape, dtype, and order.</source>
          <target state="translated">指定された形状、dtype、および順序を持つ &lt;code&gt;fill_value&lt;/code&gt; の配列。</target>
        </trans-unit>
        <trans-unit id="141b0992112c657405943baa4a593bdfd3d362b8" translate="yes" xml:space="preserve">
          <source>Array of &lt;code&gt;fill_value&lt;/code&gt; with the same shape and type as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">アレイ &lt;code&gt;fill_value&lt;/code&gt; と同じ形状およびタイプ。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d4591434d561c417ccddebc05c5c4eae4564de2b" translate="yes" xml:space="preserve">
          <source>Array of Chebyshev series coefficients. If c is multidimensional the different axis correspond to different variables with the degree in each axis given by the corresponding index.</source>
          <target state="translated">チェビシェフ級数係数の配列.c が多次元の場合,異なる軸は,対応するインデックスによって与えられる各軸の次数を持つ異なる変数に対応します.</target>
        </trans-unit>
        <trans-unit id="4f8604db9d0154dd7eb0dded915686a2e44b5243" translate="yes" xml:space="preserve">
          <source>Array of Hermite series coefficients. If &lt;code&gt;c&lt;/code&gt; is multidimensional the different axis correspond to different variables with the degree in each axis given by the corresponding index.</source>
          <target state="translated">Hermiteシリーズ係数の配列。 &lt;code&gt;c&lt;/code&gt; が多次元の場合、異なる軸は異なる変数に対応し、各軸の次数は対応するインデックスによって与えられます。</target>
        </trans-unit>
        <trans-unit id="817eb4e4585a916e35d1ff46432ac14702692600" translate="yes" xml:space="preserve">
          <source>Array of Hermite series coefficients. If c is multidimensional the different axis correspond to different variables with the degree in each axis given by the corresponding index.</source>
          <target state="translated">ハーミット級数の係数の配列.cが多次元の場合,異なる軸は,対応するインデックスによって与えられる各軸の次数を持つ異なる変数に対応します.</target>
        </trans-unit>
        <trans-unit id="6bb7459da4388ebdd50a78addd0898c1f80aabbe" translate="yes" xml:space="preserve">
          <source>Array of Hermite_e series coefficients. If &lt;code&gt;c&lt;/code&gt; is multidimensional the different axis correspond to different variables with the degree in each axis given by the corresponding index.</source>
          <target state="translated">Hermite_eシリーズ係数の配列。 &lt;code&gt;c&lt;/code&gt; が多次元の場合、異なる軸は異なる変数に対応し、各軸の次数は対応するインデックスによって与えられます。</target>
        </trans-unit>
        <trans-unit id="63e65a5158a929fafcbc4f8f156592488b9429ea" translate="yes" xml:space="preserve">
          <source>Array of Hermite_e series coefficients. If c is multidimensional the different axis correspond to different variables with the degree in each axis given by the corresponding index.</source>
          <target state="translated">Hermite_e級数の係数の配列。cが多次元の場合、異なる軸は、対応するインデックスによって与えられる各軸の次数を持つ異なる変数に対応します。</target>
        </trans-unit>
        <trans-unit id="1ea8d2a10d04a6eb03ee934ed9f9008e87ff51dc" translate="yes" xml:space="preserve">
          <source>Array of Laguerre series coefficients. If &lt;code&gt;c&lt;/code&gt; is multidimensional the different axis correspond to different variables with the degree in each axis given by the corresponding index.</source>
          <target state="translated">ラゲール級数配列の配列。 &lt;code&gt;c&lt;/code&gt; が多次元の場合、異なる軸は異なる変数に対応し、各軸の次数は対応するインデックスによって与えられます。</target>
        </trans-unit>
        <trans-unit id="35c007605e6d77452f8dad5eb06d7938bab0902f" translate="yes" xml:space="preserve">
          <source>Array of Legendre series coefficients. If c is multidimensional the different axis correspond to different variables with the degree in each axis given by the corresponding index.</source>
          <target state="translated">レジェンドレ級数係数の配列.c が多次元の場合,異なる軸は,対応するインデックスによって与えられる各軸の次数を持つ異なる変数に対応します.</target>
        </trans-unit>
        <trans-unit id="4261b4b77833f5ffb9b4ec031af96d60404d62e0" translate="yes" xml:space="preserve">
          <source>Array of angles in radians, in the range &lt;code&gt;[-pi, pi]&lt;/code&gt;. This is a scalar if both &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; are scalars.</source>
          <target state="translated">&lt;code&gt;[-pi, pi]&lt;/code&gt; 範囲のラジアン単位の角度の配列。 &lt;code&gt;x1&lt;/code&gt; と &lt;code&gt;x2&lt;/code&gt; の両方がスカラーの場合、これはスカラーです。</target>
        </trans-unit>
        <trans-unit id="d00b51bfc114fceca7b5e804468ddaae71dd1f04" translate="yes" xml:space="preserve">
          <source>Array of bins. It has to be 1-dimensional and monotonic.</source>
          <target state="translated">ビンの配列。1次元で単調でなければならない。</target>
        </trans-unit>
        <trans-unit id="2431f4c023950cb461e657c537178d58e27e27dd" translate="yes" xml:space="preserve">
          <source>Array of booleans</source>
          <target state="translated">ブーリアンの配列</target>
        </trans-unit>
        <trans-unit id="536a897428fe0f47a3d34f49d6446e12ae81a0e0" translate="yes" xml:space="preserve">
          <source>Array of booleans identical in shape to &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">と形状が同じブール値のアレイ。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a77bc6459d956649f3ae15d32c4f2c19eb8edf06" translate="yes" xml:space="preserve">
          <source>Array of booleans of same shape as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">同じ形状のブール値のアレイ。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a658696b6a89082b912ff090b4b6b37dee9b715c" translate="yes" xml:space="preserve">
          <source>Array of coefficients ordered so that the coefficient of the term of multi-degree i,j is contained in &lt;code&gt;c[i,j]&lt;/code&gt;. If &lt;code&gt;c&lt;/code&gt; has dimension greater than 2 the remaining indices enumerate multiple sets of coefficients.</source>
          <target state="translated">多次数i、jの項の係数が &lt;code&gt;c[i,j]&lt;/code&gt; 含まれるように順序付けられた係数の配列。場合 &lt;code&gt;c&lt;/code&gt; は 2よりも大きい寸法を有し、残りのインデックスは、係数の複数のセットを列挙する。</target>
        </trans-unit>
        <trans-unit id="56c372955c6e7c782716979251e8af46e2f83f0a" translate="yes" xml:space="preserve">
          <source>Array of coefficients ordered so that the coefficient of the term of multi-degree i,j is contained in &lt;code&gt;c[i,j]&lt;/code&gt;. If &lt;code&gt;c&lt;/code&gt; has dimension greater than two the remaining indices enumerate multiple sets of coefficients.</source>
          <target state="translated">多次数i、jの項の係数が &lt;code&gt;c[i,j]&lt;/code&gt; 含まれるように順序付けられた係数の配列。場合 &lt;code&gt;c&lt;/code&gt; は 2よりも大きい寸法を有し、残りのインデックスは、係数の複数のセットを列挙する。</target>
        </trans-unit>
        <trans-unit id="fa76e8a2aedbceba248a9fc307fb834762ffa569" translate="yes" xml:space="preserve">
          <source>Array of coefficients ordered so that the coefficient of the term of multi-degree i,j,k is contained in &lt;code&gt;c[i,j,k]&lt;/code&gt;. If &lt;code&gt;c&lt;/code&gt; has dimension greater than 3 the remaining indices enumerate multiple sets of coefficients.</source>
          <target state="translated">多次数i、j、kの項の係数が &lt;code&gt;c[i,j,k]&lt;/code&gt; 含まれるように順序付けられた係数の配列。場合 &lt;code&gt;c&lt;/code&gt; は 3よりも大きい寸法を有し、残りのインデックスは、係数の複数のセットを列挙する。</target>
        </trans-unit>
        <trans-unit id="2ca7ab8cb88305034f9c8ff4c4bec7fdbf7384a0" translate="yes" xml:space="preserve">
          <source>Array of coefficients ordered so that the coefficients for terms of degree i,j are contained in &lt;code&gt;c[i,j]&lt;/code&gt;. If &lt;code&gt;c&lt;/code&gt; has dimension greater than two the remaining indices enumerate multiple sets of coefficients.</source>
          <target state="translated">次数i、jの項の係数が &lt;code&gt;c[i,j]&lt;/code&gt; 含まれるように順序付けられた係数の配列。場合 &lt;code&gt;c&lt;/code&gt; は 2よりも大きい寸法を有し、残りのインデックスは、係数の複数のセットを列挙する。</target>
        </trans-unit>
        <trans-unit id="013054b355ed269971a257a22db8c61fecab58bc" translate="yes" xml:space="preserve">
          <source>Array of coefficients ordered so that the coefficients for terms of degree n are contained in c[n]. If &lt;code&gt;c&lt;/code&gt; is multidimensional the remaining indices enumerate multiple polynomials. In the two dimensional case the coefficients may be thought of as stored in the columns of &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">次数nの項の係数がc [n]に含まれるように順序付けられた係数の配列。 &lt;code&gt;c&lt;/code&gt; が多次元の場合、残りのインデックスは複数の多項式を列挙します。2次元の場合、係数は &lt;code&gt;c&lt;/code&gt; の列に格納されていると考えることができます。</target>
        </trans-unit>
        <trans-unit id="00bc78cb48de3651884eadaf718d38e560006d25" translate="yes" xml:space="preserve">
          <source>Array of evenly spaced values.</source>
          <target state="translated">等間隔の値の配列。</target>
        </trans-unit>
        <trans-unit id="2d1560c385ed8ca347f0a453a1d3ede23238d315" translate="yes" xml:space="preserve">
          <source>Array of indices into the array. It has the same shape as &lt;code&gt;a.shape&lt;/code&gt; with the dimension along &lt;code&gt;axis&lt;/code&gt; removed.</source>
          <target state="translated">配列へのインデックスの配列。 &lt;code&gt;axis&lt;/code&gt; 沿った寸法が削除された &lt;code&gt;a.shape&lt;/code&gt; と同じ形状です。</target>
        </trans-unit>
        <trans-unit id="a8ca40e5ac25fd9b6c7a437f8b20abf87b6dd448" translate="yes" xml:space="preserve">
          <source>Array of indices that partition &lt;code&gt;a&lt;/code&gt; along the specified axis. If &lt;code&gt;a&lt;/code&gt; is one-dimensional, &lt;code&gt;a[index_array]&lt;/code&gt; yields a partitioned &lt;code&gt;a&lt;/code&gt;. More generally, &lt;code&gt;np.take_along_axis(a, index_array, axis=a)&lt;/code&gt; always yields the partitioned &lt;code&gt;a&lt;/code&gt;, irrespective of dimensionality.</source>
          <target state="translated">指定された軸に沿ってを分割 &lt;code&gt;a&lt;/code&gt; インデックスの配列。場合は一次元である、 &lt;code&gt;a[index_array]&lt;/code&gt; 分割得。より一般的には、 &lt;code&gt;np.take_along_axis(a, index_array, axis=a)&lt;/code&gt; は、次元に関係なく、常にパーティション化され &lt;code&gt;a&lt;/code&gt; 生成します。 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b6035bba7c71c43b0b9bba16cae62cbd47fc547" translate="yes" xml:space="preserve">
          <source>Array of indices that sort &lt;code&gt;a&lt;/code&gt; along the specified &lt;code&gt;axis&lt;/code&gt;. If &lt;code&gt;a&lt;/code&gt; is one-dimensional, &lt;code&gt;a[index_array]&lt;/code&gt; yields a sorted &lt;code&gt;a&lt;/code&gt;. More generally, &lt;code&gt;np.take_along_axis(a, index_array, axis=axis)&lt;/code&gt; always yields the sorted &lt;code&gt;a&lt;/code&gt;, irrespective of dimensionality.</source>
          <target state="translated">指定された &lt;code&gt;axis&lt;/code&gt; 沿ってをソート &lt;code&gt;a&lt;/code&gt; インデックスの配列。場合は一次元である、 &lt;code&gt;a[index_array]&lt;/code&gt; ソート生み出します。より一般的には、 &lt;code&gt;np.take_along_axis(a, index_array, axis=axis)&lt;/code&gt; は、次元に関係なく、常にソートされ &lt;code&gt;a&lt;/code&gt; 生成します。 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a0dc6273aecd116e71b925f830b8b852ca18868e" translate="yes" xml:space="preserve">
          <source>Array of indices that sort &lt;code&gt;a&lt;/code&gt; along the specified axis. In other words, &lt;code&gt;a[index_array]&lt;/code&gt; yields a sorted &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">指定された軸に沿ってをソート &lt;code&gt;a&lt;/code&gt; インデックスの配列。言い換えると、 &lt;code&gt;a[index_array]&lt;/code&gt; はソートされ &lt;code&gt;a&lt;/code&gt; 生成します。</target>
        </trans-unit>
        <trans-unit id="87cf8b4326e4bf74829f6ee998b605e627a3e05c" translate="yes" xml:space="preserve">
          <source>Array of indices that sort the keys along the specified axis.</source>
          <target state="translated">指定された軸に沿ってキーをソートするインデックスの配列。</target>
        </trans-unit>
        <trans-unit id="9ba877503fdc9b234f8b5bd4ff989ab5b66a993a" translate="yes" xml:space="preserve">
          <source>Array of insertion points with the same shape as &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;v&lt;/code&gt; と同じ形状の挿入ポイントの配列。</target>
        </trans-unit>
        <trans-unit id="eda2f2ab5893d6c8f805112f168403bde8914bdc" translate="yes" xml:space="preserve">
          <source>Array of length &lt;code&gt;n//2 + 1&lt;/code&gt; containing the sample frequencies.</source>
          <target state="translated">サンプル周波数を含む長さ &lt;code&gt;n//2 + 1&lt;/code&gt; 配列。</target>
        </trans-unit>
        <trans-unit id="16403e1679edece0422b414ba8df64826286ea95" translate="yes" xml:space="preserve">
          <source>Array of length &lt;code&gt;n&lt;/code&gt; containing the sample frequencies.</source>
          <target state="translated">サンプル周波数を含む長さ &lt;code&gt;n&lt;/code&gt; の配列。</target>
        </trans-unit>
        <trans-unit id="3e56b710dd7f0b21c34a3b08ffd09a687bf4487b" translate="yes" xml:space="preserve">
          <source>Array of list objects</source>
          <target state="translated">リストオブジェクトの配列</target>
        </trans-unit>
        <trans-unit id="8a37d72f2b1b4102a1be6ef75c473c25a6af0723" translate="yes" xml:space="preserve">
          <source>Array of multipliers.</source>
          <target state="translated">乗算器の配列。</target>
        </trans-unit>
        <trans-unit id="206e9ffd7bd541d0301a39acc4ace879a4a8c4c0" translate="yes" xml:space="preserve">
          <source>Array of numbers to be decomposed.</source>
          <target state="translated">分解される数の配列。</target>
        </trans-unit>
        <trans-unit id="b8d93545bf76db1e421350de1ab5b27bda265c94" translate="yes" xml:space="preserve">
          <source>Array of ones with the given shape, dtype, and order.</source>
          <target state="translated">指定された形状、dtype、順序を持つものの配列。</target>
        </trans-unit>
        <trans-unit id="2a7562df8fd2349ba86c3e8c830bce9f44d2768c" translate="yes" xml:space="preserve">
          <source>Array of ones with the same shape and type as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">と同じ形状とタイプを &lt;code&gt;a&lt;/code&gt; ものの配列。</target>
        </trans-unit>
        <trans-unit id="c57697e4962f7c2af124e859e719b69080933cff" translate="yes" xml:space="preserve">
          <source>Array of ones.</source>
          <target state="translated">1の配列。</target>
        </trans-unit>
        <trans-unit id="baa4adf58634fb06ef6ad2372bc5421740221f26" translate="yes" xml:space="preserve">
          <source>Array of points of the same shape as &lt;code&gt;x&lt;/code&gt;, after application of the linear map between the two domains.</source>
          <target state="translated">2つのドメイン間に線形マップを適用した後の、 &lt;code&gt;x&lt;/code&gt; と同じ形状の点の配列。</target>
        </trans-unit>
        <trans-unit id="e10ad4b8d9ac04992efd38f05d15c560adaf42ef" translate="yes" xml:space="preserve">
          <source>Array of points. The dtype is converted to float64 or complex128 depending on whether any of the elements are complex. If &lt;code&gt;x&lt;/code&gt; is scalar it is converted to a 1-D array.</source>
          <target state="translated">ポイントの配列。dtypeは、要素が複雑かどうかに応じて、float64またはcomplex128に変換されます。 &lt;code&gt;x&lt;/code&gt; がスカラーの場合、1次元配列に変換されます。</target>
        </trans-unit>
        <trans-unit id="2608e7cd905fe0c68e32ec9f1d08d5e186ac4133" translate="yes" xml:space="preserve">
          <source>Array of polynomial coefficients. If c is multidimensional the different axis correspond to different variables with the degree in each axis given by the corresponding index.</source>
          <target state="translated">多項式係数の配列.cが多次元の場合,異なる軸は,対応するインデックスによって与えられる各軸の次数を持つ異なる変数に対応します.</target>
        </trans-unit>
        <trans-unit id="df9f1c9c3e6efbfb4f90ed818292071092d8d4f0" translate="yes" xml:space="preserve">
          <source>Array of random floats of shape &lt;code&gt;size&lt;/code&gt; (unless &lt;code&gt;size=None&lt;/code&gt;, in which case a single float is returned).</source>
          <target state="translated">形状 &lt;code&gt;size&lt;/code&gt; のランダムなフロートの配列（ &lt;code&gt;size=None&lt;/code&gt; の場合を除く。この場合、単一のフロートが返されます）。</target>
        </trans-unit>
        <trans-unit id="8c27164f605bc6a37751898bf3ccca7ad65d8b8c" translate="yes" xml:space="preserve">
          <source>Array of roots. If &lt;code&gt;r&lt;/code&gt; is multidimensional the first index is the root index, while the remaining indices enumerate multiple polynomials. For instance, in the two dimensional case the roots of each polynomial may be thought of as stored in the columns of &lt;code&gt;r&lt;/code&gt;.</source>
          <target state="translated">ルートの配列。 &lt;code&gt;r&lt;/code&gt; が多次元の場合、最初のインデックスはルートインデックスで、残りのインデックスは複数の多項式を列挙します。たとえば、2次元の場合、各多項式の根は &lt;code&gt;r&lt;/code&gt; の列に格納されていると考えることができます。</target>
        </trans-unit>
        <trans-unit id="f5e105f8faad33b4f50f2c4896fe5c70b476d2c2" translate="yes" xml:space="preserve">
          <source>Array of the roots of the polynomial. If all the roots are real, then &lt;code&gt;out&lt;/code&gt; is also real, otherwise it is complex.</source>
          <target state="translated">多項式の根の配列。すべてのルーツが実在する場合、 &lt;code&gt;out&lt;/code&gt; も実在します。それ以外の場合は複雑です。</target>
        </trans-unit>
        <trans-unit id="4d0d9a7ae0205565ce5ab6637ea0bc6fd758edf0" translate="yes" xml:space="preserve">
          <source>Array of the roots of the series. If all the roots are real, then &lt;code&gt;out&lt;/code&gt; is also real, otherwise it is complex.</source>
          <target state="translated">シリーズのルートの配列。すべてのルーツが実在する場合、 &lt;code&gt;out&lt;/code&gt; も実在します。それ以外の場合は複雑です。</target>
        </trans-unit>
        <trans-unit id="d523e60421af0d15597be465d458af223885d81e" translate="yes" xml:space="preserve">
          <source>Array of the same shape as &lt;code&gt;x&lt;/code&gt;. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と同じ形状の配列。 &lt;code&gt;x&lt;/code&gt; がスカラーの場合、これはスカラーです。</target>
        </trans-unit>
        <trans-unit id="8fb65c76565be83184293a727b86b612f6baa966" translate="yes" xml:space="preserve">
          <source>Array of the same type and shape as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">同じタイプ及び形状のアレイ。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cde597bca9a6bd0298c0f76843af628711adacdc" translate="yes" xml:space="preserve">
          <source>Array of two or more dimensions.</source>
          <target state="translated">2つ以上の次元の配列。</target>
        </trans-unit>
        <trans-unit id="9c36b99254e0fa9d0972f22709ef88f81c5217da" translate="yes" xml:space="preserve">
          <source>Array of twos exponents. If &lt;code&gt;x1.shape != x2.shape&lt;/code&gt;, they must be broadcastable to a common shape (which becomes the shape of the output).</source>
          <target state="translated">2の指数の配列。 &lt;code&gt;x1.shape != x2.shape&lt;/code&gt; 場合、それらは共通の形状にブロードキャスト可能でなければなりません（これが出力の形状になります）。</target>
        </trans-unit>
        <trans-unit id="ef176723af239a8b84441eb4e1012c9997a74190" translate="yes" xml:space="preserve">
          <source>Array of type uint8 whose elements represent bits corresponding to the logical (0 or nonzero) value of the input elements. The shape of &lt;code&gt;packed&lt;/code&gt; has the same number of dimensions as the input (unless &lt;code&gt;axis&lt;/code&gt; is None, in which case the output is 1-D).</source>
          <target state="translated">入力要素の論理値（0またはゼロ以外）に対応するビットを要素が表すuint8型の配列。 &lt;code&gt;packed&lt;/code&gt; の形状は、入力と同じ次元数を持ちます（ &lt;code&gt;axis&lt;/code&gt; がNoneでない場合、その場合、出力は1-Dです）。</target>
        </trans-unit>
        <trans-unit id="d136dd4eb12fa67aaa6854e035f05c7d1d6e0269" translate="yes" xml:space="preserve">
          <source>Array of uninitialized (arbitrary) data of the given shape, dtype, and order. Object arrays will be initialized to None.</source>
          <target state="translated">指定された形状、dtype、順序の初期化されていない(任意の)データの配列。オブジェクトの配列は、Noneに初期化されます。</target>
        </trans-unit>
        <trans-unit id="84a6a10448bc129791439e6ef9301081b2eae3db" translate="yes" xml:space="preserve">
          <source>Array of uninitialized (arbitrary) data with the same shape and type as &lt;code&gt;prototype&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;prototype&lt;/code&gt; と同じ形状およびタイプの初期化されていない（任意の）データの配列。</target>
        </trans-unit>
        <trans-unit id="1b00e6648235fca7be6befd806901affb44faa6e" translate="yes" xml:space="preserve">
          <source>Array of variates drawn from the multivariate hypergeometric distribution.</source>
          <target state="translated">多変量ハイパージオメトリック分布から引き出された変量の配列.</target>
        </trans-unit>
        <trans-unit id="e791423834bca116a632635c62e713e7f9a7037b" translate="yes" xml:space="preserve">
          <source>Array of zeros with the given shape, dtype, and order.</source>
          <target state="translated">指定された形状、dtype、および次数のゼロの配列。</target>
        </trans-unit>
        <trans-unit id="5118cee064bbe572e4b1416e1f0671b0db1bf70d" translate="yes" xml:space="preserve">
          <source>Array of zeros with the same shape and type as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">同じ形状およびタイプとゼロのアレイ。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="16e772e7005bc124d579516af58c7fbb273b27a8" translate="yes" xml:space="preserve">
          <source>Array or &lt;a href=&quot;numpy.poly1d#numpy.poly1d&quot;&gt;&lt;code&gt;poly1d&lt;/code&gt;&lt;/a&gt; object of the difference polynomial&amp;rsquo;s coefficients.</source>
          <target state="translated">差分多項式の係数の配列または&lt;a href=&quot;numpy.poly1d#numpy.poly1d&quot;&gt; &lt;code&gt;poly1d&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="dbb2927a7be8102e0b46249ee761be13ecebeed6" translate="yes" xml:space="preserve">
          <source>Array or sequence of arrays storing the fields to add to the base.</source>
          <target state="translated">ベースに追加するフィールドを格納する配列または配列のシーケンス。</target>
        </trans-unit>
        <trans-unit id="95f2bfa93bf415207add71f7123707aa76abefda" translate="yes" xml:space="preserve">
          <source>Array output</source>
          <target state="translated">アレイ出力</target>
        </trans-unit>
        <trans-unit id="de7dfcc33834d14fc2a907169048d0358bdabe51" translate="yes" xml:space="preserve">
          <source>Array output, specified fill-in value</source>
          <target state="translated">配列出力、指定されたフィルイン値</target>
        </trans-unit>
        <trans-unit id="367e141a4fff1b31230cbf6695c1abe0275a3a68" translate="yes" xml:space="preserve">
          <source>Array priority.</source>
          <target state="translated">配列の優先度。</target>
        </trans-unit>
        <trans-unit id="8afc8a14b9ea339f994a4b92b64eeee0fec93781" translate="yes" xml:space="preserve">
          <source>Array property returning the array transposed.</source>
          <target state="translated">転置された配列を返す配列プロパティ。</target>
        </trans-unit>
        <trans-unit id="e80625fd7e8e2e9a68261ea8336b974ac71427ae" translate="yes" xml:space="preserve">
          <source>Array protocol: Python side</source>
          <target state="translated">配列プロトコル。Python側</target>
        </trans-unit>
        <trans-unit id="4090e62e110e0132c9a83e32a1060b0b2b11ae1b" translate="yes" xml:space="preserve">
          <source>Array protocol: struct</source>
          <target state="translated">配列プロトコル:構造体</target>
        </trans-unit>
        <trans-unit id="8bf3a8f5e4206285d07a06e43310e4a207d5bd53" translate="yes" xml:space="preserve">
          <source>Array representing the Chebyshev series of their sum.</source>
          <target state="translated">チェビシェフ級数の和を表す配列です。</target>
        </trans-unit>
        <trans-unit id="eb3f194c486d46ce1508a5889e8d0e228c628dfe" translate="yes" xml:space="preserve">
          <source>Array representing the Hermite series of their sum.</source>
          <target state="translated">その和のエルミート級数を表す配列。</target>
        </trans-unit>
        <trans-unit id="18e93cb56abb59b15e14ea61f7ed36817dbde4e6" translate="yes" xml:space="preserve">
          <source>Array representing the Laguerre series of their sum.</source>
          <target state="translated">それらの和のラゲール級数を表す配列.</target>
        </trans-unit>
        <trans-unit id="ec5ec69f7e2ff45ce04c960bdf2303ea70114cd3" translate="yes" xml:space="preserve">
          <source>Array representing the Legendre series of their sum.</source>
          <target state="translated">その和のレジェンドレ級数を表す配列。</target>
        </trans-unit>
        <trans-unit id="edc338d6dbe8df5cb4ad885aef823a83fa3236d0" translate="yes" xml:space="preserve">
          <source>Array representing the result of the multiplication.</source>
          <target state="translated">乗算の結果を表す配列。</target>
        </trans-unit>
        <trans-unit id="016974069d41d6a6d61d2549905026f66c136979" translate="yes" xml:space="preserve">
          <source>Array scalar checks the value, array does not</source>
          <target state="translated">配列のスカラは値をチェックしますが、配列はチェックしません。</target>
        </trans-unit>
        <trans-unit id="cc176eaf5a192bedc6a645855de021bd9ca0e1d1" translate="yes" xml:space="preserve">
          <source>Array scalar type</source>
          <target state="translated">配列スカラ型</target>
        </trans-unit>
        <trans-unit id="2ef4e544d40cf2979c0c92b90830370b3508c12a" translate="yes" xml:space="preserve">
          <source>Array scalars can be indexed like 0-dimensional arrays: if &lt;em&gt;x&lt;/em&gt; is an array scalar,</source>
          <target state="translated">配列スカラーは、0次元配列のようにインデックスを付けることができます&lt;em&gt;。x&lt;/em&gt;が配列スカラーの場合、</target>
        </trans-unit>
        <trans-unit id="e33eacc8d6c4dbb6e2b8986e0cc11de2dc224ecc" translate="yes" xml:space="preserve">
          <source>Array scalars have exactly the same methods as arrays. The default behavior of these methods is to internally convert the scalar to an equivalent 0-dimensional array and to call the corresponding array method. In addition, math operations on array scalars are defined so that the same hardware flags are set and used to interpret the results as for &lt;a href=&quot;ufuncs#ufuncs&quot;&gt;ufunc&lt;/a&gt;, so that the error state used for ufuncs also carries over to the math on array scalars.</source>
          <target state="translated">配列スカラーは配列とまったく同じメソッドを持っています。これらのメソッドのデフォルトの動作は、内部的にスカラーを同等の0次元配列に変換し、対応する配列メソッドを呼び出すことです。さらに、配列スカラーに対する数学演算は、&lt;a href=&quot;ufuncs#ufuncs&quot;&gt;ufunc&lt;/a&gt;と同じハードウェアフラグが設定され、結果を解釈するために定義されているため、ufuncsに使用されるエラー状態は、配列スカラーの数学にも引き継がれます。</target>
        </trans-unit>
        <trans-unit id="037bfe1a4a99bed13c2116a48ffe9e15e096321a" translate="yes" xml:space="preserve">
          <source>Array scalars have the same attributes and methods as &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarrays&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt; This allows one to treat items of an array partly on the same footing as arrays, smoothing out rough edges that result when mixing scalar and array operations.</source>
          <target state="translated">配列スカラーには、&lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarrays&lt;/code&gt; &lt;/a&gt;と同じ属性とメソッドがあります。&lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;1&lt;/a&gt;これにより、配列のアイテムを部分的に配列と同じ足場で処理し、スカラー演算と配列演算を混合したときに生じる粗いエッジを平滑化できます。</target>
        </trans-unit>
        <trans-unit id="9e3e59079f5e7b1524c0f3bc70e22cf06a0ad4de" translate="yes" xml:space="preserve">
          <source>Array scalars have the same attributes and methods as &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarrays&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt; This allows one to treat items of an array partly on the same footing as arrays, smoothing out rough edges that result when mixing scalar and array operations.</source>
          <target state="translated">配列スカラーは&lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarrays&lt;/code&gt; &lt;/a&gt;と同じ属性とメソッドを持っています。&lt;a href=&quot;#id2&quot; id=&quot;id1&quot;&gt;[1]&lt;/a&gt;これにより、配列のアイテムを部分的に配列と同じフーチングで処理し、スカラーと配列の操作を混合したときに生じる粗いエッジを滑らかにすることができます。</target>
        </trans-unit>
        <trans-unit id="646d54d2caceda76929950b800cb978c81f4566e" translate="yes" xml:space="preserve">
          <source>Array scalars live in a hierarchy (see the Figure below) of data types. They can be detected using the hierarchy: For example, &lt;code&gt;isinstance(val, np.generic)&lt;/code&gt; will return &lt;a href=&quot;https://docs.python.org/dev/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;val&lt;/em&gt; is an array scalar object. Alternatively, what kind of array scalar is present can be determined using other members of the data type hierarchy. Thus, for example &lt;code&gt;isinstance(val, np.complexfloating)&lt;/code&gt; will return &lt;a href=&quot;https://docs.python.org/dev/library/constants.html#True&quot;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/a&gt; if &lt;em&gt;val&lt;/em&gt; is a complex valued type, while &lt;code&gt;isinstance(val, np.flexible)&lt;/code&gt; will return true if &lt;em&gt;val&lt;/em&gt; is one of the flexible itemsize array types (&lt;a href=&quot;#numpy.str_&quot;&gt;&lt;code&gt;str_&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#numpy.bytes_&quot;&gt;&lt;code&gt;bytes_&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#numpy.void&quot;&gt;&lt;code&gt;void&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">配列スカラーは、データ型の階層（下の図を参照）に存在します。これらは、階層を使用して検出できます。たとえば、&lt;em&gt;val&lt;/em&gt;が配列スカラーオブジェクトの場合、 &lt;code&gt;isinstance(val, np.generic)&lt;/code&gt; は&lt;a href=&quot;https://docs.python.org/dev/library/constants.html#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; &lt;/a&gt;を返します。または、データ型階層の他のメンバーを使用して、どのような種類の配列スカラーが存在するかを判別できます。従って、例えば、 &lt;code&gt;isinstance(val, np.complexfloating)&lt;/code&gt; 返され&lt;a href=&quot;https://docs.python.org/dev/library/constants.html#True&quot;&gt; &lt;code&gt;True&lt;/code&gt; &lt;/a&gt;場合&lt;em&gt;valが&lt;/em&gt;複素数型である、 &lt;code&gt;isinstance(val, np.flexible)&lt;/code&gt; あれば真を返します&lt;em&gt;valが&lt;/em&gt;柔軟itemsizeアレイタイプの一つである（&lt;a href=&quot;#numpy.str_&quot;&gt; &lt;code&gt;str_&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#numpy.bytes_&quot;&gt; &lt;code&gt;bytes_&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#numpy.void&quot;&gt; &lt;code&gt;void&lt;/code&gt; &lt;/a&gt;）。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="9ed6ac908bf9aa1daed6dabda3ab37ae3cfe93cc" translate="yes" xml:space="preserve">
          <source>Array scalars live in a hierarchy (see the Figure below) of data types. They can be detected using the hierarchy: For example, &lt;code&gt;isinstance(val, np.generic)&lt;/code&gt; will return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;val&lt;/em&gt; is an array scalar object. Alternatively, what kind of array scalar is present can be determined using other members of the data type hierarchy. Thus, for example &lt;code&gt;isinstance(val, np.complexfloating)&lt;/code&gt; will return &lt;code&gt;True&lt;/code&gt; if &lt;em&gt;val&lt;/em&gt; is a complex valued type, while &lt;code&gt;isinstance(val, np.flexible)&lt;/code&gt; will return true if &lt;em&gt;val&lt;/em&gt; is one of the flexible itemsize array types (&lt;code&gt;string&lt;/code&gt;, &lt;code&gt;unicode&lt;/code&gt;, &lt;code&gt;void&lt;/code&gt;).</source>
          <target state="translated">配列スカラーは、データ型の階層（下図を参照）にあります。これらは、階層を使用して検出できます。たとえば、&lt;em&gt;val&lt;/em&gt;が配列スカラーオブジェクトの場合、 &lt;code&gt;isinstance(val, np.generic)&lt;/code&gt; は &lt;code&gt;True&lt;/code&gt; を返します。あるいは、存在する配列スカラーの種類は、データ型階層の他のメンバーを使用して決定できます。したがって、たとえば、 &lt;code&gt;isinstance(val, np.complexfloating)&lt;/code&gt; は、&lt;em&gt;val&lt;/em&gt;が複素数値型の場合は &lt;code&gt;True&lt;/code&gt; を返し、 &lt;code&gt;isinstance(val, np.flexible)&lt;/code&gt; は、&lt;em&gt;val&lt;/em&gt;がフレキシブルアイテムサイズ配列型（ &lt;code&gt;string&lt;/code&gt; 、 &lt;code&gt;unicode&lt;/code&gt; 、 &lt;code&gt;void&lt;/code&gt; ）。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="656531cc575d33e2858cc0fa46ccccf4a68a1757" translate="yes" xml:space="preserve">
          <source>Array shape.</source>
          <target state="translated">配列の形状。</target>
        </trans-unit>
        <trans-unit id="ef64ccc224961e26021d9bca9dc014037c55120d" translate="yes" xml:space="preserve">
          <source>Array structure and data access</source>
          <target state="translated">配列構造とデータアクセス</target>
        </trans-unit>
        <trans-unit id="342f29da2bf216f5bdf0ad7248aaa9e71a355727" translate="yes" xml:space="preserve">
          <source>Array that selects which entries to return. If len(condition) is less than the size of &lt;code&gt;a&lt;/code&gt; along the given axis, then output is truncated to the length of the condition array.</source>
          <target state="translated">返すエントリを選択する配列。len（condition）が指定された軸に沿った &lt;code&gt;a&lt;/code&gt; のサイズより小さい場合、出力は条件配列の長さに切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="592206156ca99ae21d8e7426eb607780c1bba521" translate="yes" xml:space="preserve">
          <source>Array that suppressed values indicated by a mask:</source>
          <target state="translated">マスクで示された値を抑制した配列。</target>
        </trans-unit>
        <trans-unit id="87d2918cacf26a2502b4f9340bca07e66e5e74fe" translate="yes" xml:space="preserve">
          <source>Array to be divided into sub-arrays.</source>
          <target state="translated">サブ配列に分割する配列。</target>
        </trans-unit>
        <trans-unit id="e4b60ba832fd5d14a8b64e94627ba0a71256396f" translate="yes" xml:space="preserve">
          <source>Array to be reshaped.</source>
          <target state="translated">リシェイプされる配列。</target>
        </trans-unit>
        <trans-unit id="873958f5c5efd8efa35f71b483ecb2b2925a1b71" translate="yes" xml:space="preserve">
          <source>Array to be resized.</source>
          <target state="translated">リサイズされる配列。</target>
        </trans-unit>
        <trans-unit id="a56492e54afe7d74e97671bd4eee3157258038ae" translate="yes" xml:space="preserve">
          <source>Array to be shuffled.</source>
          <target state="translated">シャッフルされるアレイ</target>
        </trans-unit>
        <trans-unit id="b52f152b24d91c43ef9fb5209bce09865fb8369b" translate="yes" xml:space="preserve">
          <source>Array to be sorted.</source>
          <target state="translated">ソートされる配列。</target>
        </trans-unit>
        <trans-unit id="6b0f55aa6f40b643ba50d2b1a53516ef1346869f" translate="yes" xml:space="preserve">
          <source>Array to check for masked values.</source>
          <target state="translated">マスクされた値をチェックするための配列。</target>
        </trans-unit>
        <trans-unit id="20f86a6d67f17e927d1d04df5d4b886d82463103" translate="yes" xml:space="preserve">
          <source>Array to create a new.</source>
          <target state="translated">新しいものを作成するための配列です。</target>
        </trans-unit>
        <trans-unit id="38e408cec29face92846919cb92911927e113755" translate="yes" xml:space="preserve">
          <source>Array to create the sliding window view from.</source>
          <target state="translated">スライディングウィンドウビューを作成するための配列です。</target>
        </trans-unit>
        <trans-unit id="a70bc91712a140c808e5cb79192527e68b6c9390" translate="yes" xml:space="preserve">
          <source>Array to mask</source>
          <target state="translated">マスクする配列</target>
        </trans-unit>
        <trans-unit id="d43e409e24f30f0a6d90180b76c2efb4ab130452" translate="yes" xml:space="preserve">
          <source>Array to mask.</source>
          <target state="translated">マスクする配列。</target>
        </trans-unit>
        <trans-unit id="83c52b56e1210abcac3501b49e1d67729c904dfd" translate="yes" xml:space="preserve">
          <source>Array to put data into.</source>
          <target state="translated">データを入れる配列。</target>
        </trans-unit>
        <trans-unit id="fd5b40620a3c780ffc94d7f339fd1c7607c14c60" translate="yes" xml:space="preserve">
          <source>Array to sort.</source>
          <target state="translated">ソートする配列。</target>
        </trans-unit>
        <trans-unit id="63fbdd1db19d27a9a5c7eab3d132c8bb3f503729" translate="yes" xml:space="preserve">
          <source>Array to test.</source>
          <target state="translated">テストする配列。</target>
        </trans-unit>
        <trans-unit id="55a565dc87ad0f5b9c2ac3f528dacc1158c373a0" translate="yes" xml:space="preserve">
          <source>Array type testing</source>
          <target state="translated">配列型のテスト</target>
        </trans-unit>
        <trans-unit id="585f95a404e839b1977230612e779c3487e0200e" translate="yes" xml:space="preserve">
          <source>Array types and conversions between types</source>
          <target state="translated">配列の型と型間の変換</target>
        </trans-unit>
        <trans-unit id="023792f2b2e17a7b6e86f7c45b577b4c007acb28" translate="yes" xml:space="preserve">
          <source>Array types can also be referred to by character codes, mostly to retain backward compatibility with older packages such as Numeric. Some documentation may still refer to these, for example:</source>
          <target state="translated">配列型は文字コードで参照することもできますが、これは主に Numeric のような古いパッケージとの下位互換性を維持するためです。ドキュメントの中には、例えば、今でもこれらを参照しているものがあります。</target>
        </trans-unit>
        <trans-unit id="03d6303545819c17e2ef1222e68fb70dc26c55f8" translate="yes" xml:space="preserve">
          <source>Array whose &lt;a href=&quot;#term-dtype&quot;&gt;dtype&lt;/a&gt; is a &lt;a href=&quot;#term-structured-data-type&quot;&gt;structured data type&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#term-dtype&quot;&gt;dtype&lt;/a&gt;が&lt;a href=&quot;#term-structured-data-type&quot;&gt;構造化データ型で&lt;/a&gt;ある配列。</target>
        </trans-unit>
        <trans-unit id="e4bb8dd78a4c9a8f67c530c9ad1b7a619c52bea4" translate="yes" xml:space="preserve">
          <source>Array whose diagonal is to be filled, it gets modified in-place.</source>
          <target state="translated">対角線が塗りつぶされる配列は、その場で修正されます。</target>
        </trans-unit>
        <trans-unit id="82c627b6cd9b7d074082f31470ca27bba3557192" translate="yes" xml:space="preserve">
          <source>Array with its lower triangle filled with ones and zero elsewhere; in other words &lt;code&gt;T[i,j] == 1&lt;/code&gt; for &lt;code&gt;i &amp;lt;= j + k&lt;/code&gt;, 0 otherwise.</source>
          <target state="translated">下の三角形が1で埋められ、他の場所で0で埋められた配列。つまり、 &lt;code&gt;T[i,j] == 1&lt;/code&gt; for &lt;code&gt;i &amp;lt;= j + k&lt;/code&gt; 、それ以外の場合は0。</target>
        </trans-unit>
        <trans-unit id="b85c2934c5f2a59bc2e12dac7625860a488c925e" translate="yes" xml:space="preserve">
          <source>Array with its lower triangle filled with ones and zero elsewhere; in other words &lt;code&gt;T[i,j] == 1&lt;/code&gt; for &lt;code&gt;j &amp;lt;= i + k&lt;/code&gt;, 0 otherwise.</source>
          <target state="translated">下の三角形が1で埋められ、他の場所では0で埋められた配列。言い換えると、 &lt;code&gt;j &amp;lt;= i + k&lt;/code&gt; 場合は &lt;code&gt;T[i,j] == 1&lt;/code&gt; 、それ以外の場合は0です。</target>
        </trans-unit>
        <trans-unit id="41b54b4163faf0b1aa96452981f42d33d50824ef" translate="yes" xml:space="preserve">
          <source>Array with moved axes. This array is a view of the input array.</source>
          <target state="translated">軸を移動した配列です。この配列は入力配列のビューです。</target>
        </trans-unit>
        <trans-unit id="84addce66651c27032bab9126d05042eeca1af0e" translate="yes" xml:space="preserve">
          <source>Array with specified requirements and type if given.</source>
          <target state="translated">指定された要件と型を持つ配列。</target>
        </trans-unit>
        <trans-unit id="45f77fd17de7e78ac597a13bf5b178d24ee5d7aa" translate="yes" xml:space="preserve">
          <source>Array-checking restype/argtypes.</source>
          <target state="translated">restype/argtypesの配列チェックを行います。</target>
        </trans-unit>
        <trans-unit id="54d7e23aa660ea078adfa79ac4b2e54c5ef44772" translate="yes" xml:space="preserve">
          <source>Array-protocol type strings (see &lt;a href=&quot;arrays.interface#arrays-interface&quot;&gt;The Array Interface&lt;/a&gt;)</source>
          <target state="translated">配列プロトコルタイプの文字列（&lt;a href=&quot;arrays.interface#arrays-interface&quot;&gt;配列インターフェイスを&lt;/a&gt;参照）</target>
        </trans-unit>
        <trans-unit id="7bf6ce513964e0342411a0531bf1b89c426a52c9" translate="yes" xml:space="preserve">
          <source>Array-scalar types</source>
          <target state="translated">配列スカラ型</target>
        </trans-unit>
        <trans-unit id="8160528d25c4bf32940e604af5858cd6853079e6" translate="yes" xml:space="preserve">
          <source>ArrayLike</source>
          <target state="translated">ArrayLike</target>
        </trans-unit>
        <trans-unit id="91f0d52225d31ae76fcb11c767a8c5c08a4c298a" translate="yes" xml:space="preserve">
          <source>ArrayLike objects which do not define &lt;code&gt;__len__&lt;/code&gt; and &lt;code&gt;__getitem__&lt;/code&gt;</source>
          <target state="translated">定義されていないオブジェクトArrayLike &lt;code&gt;__len__&lt;/code&gt; と &lt;code&gt;__getitem__&lt;/code&gt; を</target>
        </trans-unit>
        <trans-unit id="a50913b40e0e8d9dc26876d10bb49f2fa38c66fb" translate="yes" xml:space="preserve">
          <source>Array_like means all those objects &amp;ndash; lists, nested lists, etc. &amp;ndash; that can be converted to an array. We can also refer to variables like &lt;code&gt;var1&lt;/code&gt;.</source>
          <target state="translated">Array_likeは、配列に変換できるすべてのオブジェクト（リスト、ネストされたリストなど）を意味します。 &lt;code&gt;var1&lt;/code&gt; のような変数を参照することもできます。</target>
        </trans-unit>
        <trans-unit id="31b1e39950526e77b6041b42fc1b62056a817d46" translate="yes" xml:space="preserve">
          <source>Arrays &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; must have the same shape.</source>
          <target state="translated">配列 &lt;code&gt;x1&lt;/code&gt; と &lt;code&gt;x2&lt;/code&gt; は同じ形状でなければなりません。</target>
        </trans-unit>
        <trans-unit id="f2499f813f17514e2097a1073a6cd307b768602d" translate="yes" xml:space="preserve">
          <source>Arrays based off readonly buffers cannot be set &lt;code&gt;writeable&lt;/code&gt;</source>
          <target state="translated">読み取り専用バッファに基づく配列は &lt;code&gt;writeable&lt;/code&gt; に設定できません</target>
        </trans-unit>
        <trans-unit id="f1c67ac3218c1c87b31cea1d27a13f34756f157a" translate="yes" xml:space="preserve">
          <source>Arrays can be both C-style and Fortran-style contiguous simultaneously. This is clear for 1-dimensional arrays, but can also be true for higher dimensional arrays.</source>
          <target state="translated">配列はCスタイルとFortranスタイルの両方を同時に連続させることができます。これは1次元の配列では明らかですが,より高次元の配列でも同じことが言えます.</target>
        </trans-unit>
        <trans-unit id="9cba266ac8d90f704b5607af4e06eea419c285f7" translate="yes" xml:space="preserve">
          <source>Arrays can be indexed using an extended Python slicing syntax, &lt;code&gt;array[selection]&lt;/code&gt;. Similar syntax is also used for accessing fields in a &lt;a href=&quot;../glossary#term-structured-data-type&quot;&gt;structured data type&lt;/a&gt;.</source>
          <target state="translated">配列は、拡張Pythonスライシング構文 &lt;code&gt;array[selection]&lt;/code&gt; を使用してインデックスを付けることができます。同様の構文は、&lt;a href=&quot;../glossary#term-structured-data-type&quot;&gt;構造化データ型の&lt;/a&gt;フィールドにアクセスするためにも使用されます。</target>
        </trans-unit>
        <trans-unit id="aac913dee168d782f611f9dc70790bf862c5b21d" translate="yes" xml:space="preserve">
          <source>Arrays can be indexed using an extended Python slicing syntax, &lt;code&gt;array[selection]&lt;/code&gt;. Similar syntax is also used for accessing fields in a &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/glossary.html#term-structured-data-type&quot;&gt;structured data type&lt;/a&gt;.</source>
          <target state="translated">配列は、拡張されたPythonスライス構文 &lt;code&gt;array[selection]&lt;/code&gt; を使用してインデックスを付けることができます。同様の構文は、&lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/glossary.html#term-structured-data-type&quot;&gt;構造化データタイプの&lt;/a&gt;フィールドへのアクセスにも使用されます。</target>
        </trans-unit>
        <trans-unit id="7125fa97866bba33cfadfef25acde94b75f55b74" translate="yes" xml:space="preserve">
          <source>Arrays cannot be using subarray dtypes</source>
          <target state="translated">配列にはサブアレイdtypesを使用できない</target>
        </trans-unit>
        <trans-unit id="d674e5d59a78e41b46aaf270748b55f0fb8f59d0" translate="yes" xml:space="preserve">
          <source>Arrays do not need to have the same &lt;em&gt;number&lt;/em&gt; of dimensions. For example, if you have a &lt;code&gt;256x256x3&lt;/code&gt; array of RGB values, and you want to scale each color in the image by a different value, you can multiply the image by a one-dimensional array with 3 values. Lining up the sizes of the trailing axes of these arrays according to the broadcast rules, shows that they are compatible:</source>
          <target state="translated">配列は同じ&lt;em&gt;数&lt;/em&gt;の次元である必要はありません。たとえば、RGB値の &lt;code&gt;256x256x3&lt;/code&gt; 配列があり、画像の各色を異なる値でスケーリングする場合は、画像に3つの値を持つ1次元配列を掛けることができます。ブロードキャストルールに従ってこれらの配列の末尾の軸のサイズを並べると、互換性があることがわかります。</target>
        </trans-unit>
        <trans-unit id="5cf5c66690e5daa90427ed3c7163aa6397d5aeea" translate="yes" xml:space="preserve">
          <source>Arrays may be repeated along dimensions of length 1.</source>
          <target state="translated">配列は、長さ1の次元に沿って繰り返されることがあります。</target>
        </trans-unit>
        <trans-unit id="00ec5e3a73cb29954290e60a6bc0ab13e3437ef3" translate="yes" xml:space="preserve">
          <source>Arrays may have a data-types containing fields, analogous to columns in a spread sheet. An example is &lt;code&gt;[(x, int), (y, float)]&lt;/code&gt;, where each entry in the array is a pair of &lt;code&gt;(int, float)&lt;/code&gt;. Normally, these attributes are accessed using dictionary lookups such as &lt;code&gt;arr['x']&lt;/code&gt; and &lt;code&gt;arr['y']&lt;/code&gt;. Record arrays allow the fields to be accessed as members of the array, using &lt;code&gt;arr.x&lt;/code&gt; and &lt;code&gt;arr.y&lt;/code&gt;.</source>
          <target state="translated">配列は、スプレッドシートの列に類似したフィールドを含むデータ型を持つことができます。例は &lt;code&gt;[(x, int), (y, float)]&lt;/code&gt; で、配列の各エントリは &lt;code&gt;(int, float)&lt;/code&gt; ペアです。通常、これらの属性には、 &lt;code&gt;arr['x']&lt;/code&gt; や &lt;code&gt;arr['y']&lt;/code&gt; などの辞書検索を使用してアクセスします。レコード配列では、 &lt;code&gt;arr.x&lt;/code&gt; と &lt;code&gt;arr.y&lt;/code&gt; を使用して、配列のメンバーとしてフィールドにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="b36ecf0a7f7bd039ed5c1c0704a51fefda73d80e" translate="yes" xml:space="preserve">
          <source>Arrays may have more than one dimension, each which can be sliced individually:</source>
          <target state="translated">配列は複数の次元を持つことができ、それぞれを個別にスライスすることができます。</target>
        </trans-unit>
        <trans-unit id="ef7c0cea98d6d20ecb3d174c3213bef74e8bc018" translate="yes" xml:space="preserve">
          <source>Arrays of byte-strings are not swapped</source>
          <target state="translated">バイト列の配列はスワップされない</target>
        </trans-unit>
        <trans-unit id="d404bf1fb512f78d1d6fefbd98ddbbf1ae665dd2" translate="yes" xml:space="preserve">
          <source>Arrays of evenly spaced numbers in N-dimensions.</source>
          <target state="translated">N次元の等間隔の数値の配列。</target>
        </trans-unit>
        <trans-unit id="b8de1bbbfd3c637354288fac451e8a7c60ba28fc" translate="yes" xml:space="preserve">
          <source>Arrays of point coordinates, all of the same shape. The dtypes will be converted to either float64 or complex128 depending on whether any of the elements are complex. Scalars are converted to 1-D arrays.</source>
          <target state="translated">点座標の配列で、すべて同じ形をしています。dtypesは、要素のいずれかが複素数であるかどうかに応じて、float64またはcomplex128のいずれかに変換されます。スカラーは1次元配列に変換されます。</target>
        </trans-unit>
        <trans-unit id="52434d147f7a6b19ab25a12561971251796b7c3c" translate="yes" xml:space="preserve">
          <source>Arrays of strings are not swapped</source>
          <target state="translated">文字列の配列はスワップされない</target>
        </trans-unit>
        <trans-unit id="fc13f22057f28c646ca1b198ca565af87af49f1b" translate="yes" xml:space="preserve">
          <source>Arrays of values. If &lt;code&gt;x1.shape != x2.shape&lt;/code&gt;, they must be broadcastable to a common shape (which becomes the shape of the output).</source>
          <target state="translated">値の配列。 &lt;code&gt;x1.shape != x2.shape&lt;/code&gt; 場合、それらは共通の形状にブロードキャスト可能でなければなりません（これが出力の形状になります）。</target>
        </trans-unit>
        <trans-unit id="e6f0032138e45d68f74e2c44f2f735c8b5313272" translate="yes" xml:space="preserve">
          <source>Arrays should be constructed using &lt;a href=&quot;numpy.array#numpy.array&quot;&gt;&lt;code&gt;array&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;numpy.zeros#numpy.zeros&quot;&gt;&lt;code&gt;zeros&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;numpy.empty#numpy.empty&quot;&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/a&gt; (refer to the See Also section below). The parameters given here refer to a low-level method (&lt;code&gt;ndarray(&amp;hellip;)&lt;/code&gt;) for instantiating an array.</source>
          <target state="translated">配列は、&lt;a href=&quot;numpy.array#numpy.array&quot;&gt; &lt;code&gt;array&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;numpy.zeros#numpy.zeros&quot;&gt; &lt;code&gt;zeros&lt;/code&gt; 、&lt;/a&gt;または&lt;a href=&quot;numpy.empty#numpy.empty&quot;&gt; &lt;code&gt;empty&lt;/code&gt; &lt;/a&gt;を使用して構築する必要があります（以下の「関連項目」セクションを参照）。ここで指定するパラメーターは、配列をインスタンス化するための低レベルのメソッド（ &lt;code&gt;ndarray(&amp;hellip;)&lt;/code&gt; ）を参照します。</target>
        </trans-unit>
        <trans-unit id="28d3efbe465ae0abcb5a0dfba10ae7944a7f48a2" translate="yes" xml:space="preserve">
          <source>Arrays support the iterator protocol and can be iterated over like Python lists. See the &lt;a href=&quot;../user/quickstart#quickstart-indexing-slicing-and-iterating&quot;&gt;Indexing, Slicing and Iterating&lt;/a&gt; section in the Quickstart guide for basic usage and examples. The remainder of this document presents the &lt;a href=&quot;generated/numpy.nditer#numpy.nditer&quot;&gt;&lt;code&gt;nditer&lt;/code&gt;&lt;/a&gt; object and covers more advanced usage.</source>
          <target state="translated">配列はイテレータプロトコルをサポートしており、Pythonリストのように反復できます。基本的な使用法と例については、クイックスタートガイドの「&lt;a href=&quot;../user/quickstart#quickstart-indexing-slicing-and-iterating&quot;&gt;インデックス作成、スライス、反復」&lt;/a&gt;セクションを参照してください。このドキュメントの残りの部分では、&lt;a href=&quot;generated/numpy.nditer#numpy.nditer&quot;&gt; &lt;code&gt;nditer&lt;/code&gt; &lt;/a&gt;オブジェクトを示し、より高度な使用法について説明します。</target>
        </trans-unit>
        <trans-unit id="bcfb0f71df3562232665c06d9cf63f39acceecc4" translate="yes" xml:space="preserve">
          <source>Arrays to be compared.</source>
          <target state="translated">比較対象の配列。</target>
        </trans-unit>
        <trans-unit id="c2fde1777833050ff202f7b922dc5d2847610f32" translate="yes" xml:space="preserve">
          <source>Arrays to save to the file. Arrays will be saved in the file with the keyword names.</source>
          <target state="translated">ファイルに保存する配列。配列はキーワード名でファイルに保存されます。</target>
        </trans-unit>
        <trans-unit id="4ba46cb118e6a4c1684691ff4c3a66ca5c9411f7" translate="yes" xml:space="preserve">
          <source>Arrays to save to the file. Since it is not possible for Python to know the names of the arrays outside &lt;a href=&quot;#numpy.savez&quot;&gt;&lt;code&gt;savez&lt;/code&gt;&lt;/a&gt;, the arrays will be saved with names &amp;ldquo;arr_0&amp;rdquo;, &amp;ldquo;arr_1&amp;rdquo;, and so on. These arguments can be any expression.</source>
          <target state="translated">ファイルに保存する配列。Pythonは&lt;a href=&quot;#numpy.savez&quot;&gt; &lt;code&gt;savez&lt;/code&gt; の&lt;/a&gt;外で配列の名前を知ることができないため、配列は「arr_0」、「arr_1」などの名前で保存されます。これらの引数は任意の式にすることができます。</target>
        </trans-unit>
        <trans-unit id="f51d18ef0f932163df8ae83aea003301ffa197e5" translate="yes" xml:space="preserve">
          <source>Arrays to save to the file. Since it is not possible for Python to know the names of the arrays outside &lt;a href=&quot;numpy.savez#numpy.savez&quot;&gt;&lt;code&gt;savez&lt;/code&gt;&lt;/a&gt;, the arrays will be saved with names &amp;ldquo;arr_0&amp;rdquo;, &amp;ldquo;arr_1&amp;rdquo;, and so on. These arguments can be any expression.</source>
          <target state="translated">ファイルに保存する配列。Pythonは&lt;a href=&quot;numpy.savez#numpy.savez&quot;&gt; &lt;code&gt;savez&lt;/code&gt; の&lt;/a&gt;外で配列の名前を知ることができないため、配列は「arr_0」、「arr_1」などの名前で保存されます。これらの引数は任意の式にすることができます。</target>
        </trans-unit>
        <trans-unit id="44d87a6dc57d91b7292b09dc95f59e76af66bd2d" translate="yes" xml:space="preserve">
          <source>Arrays to stack. All of them must have the same first dimension.</source>
          <target state="translated">スタックする配列。すべて同じ第一次元を持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="b99248188fbd19d8c22a40832b75d837dc4de460" translate="yes" xml:space="preserve">
          <source>Arrays with complex dtypes don&amp;rsquo;t return True.</source>
          <target state="translated">複雑なdtypeを持つ配列はTrueを返しません。</target>
        </trans-unit>
        <trans-unit id="a2bd40fc5b54aa90919de15beac751e23ad15489" translate="yes" xml:space="preserve">
          <source>Arrayterator (class in numpy.lib)</source>
          <target state="translated">Arrayterator (numpy.lib のクラス)</target>
        </trans-unit>
        <trans-unit id="816e3f055425505d10d82fdb50f19dc782762aaa" translate="yes" xml:space="preserve">
          <source>Arrayterator.flat</source>
          <target state="translated">Arrayterator.flat</target>
        </trans-unit>
        <trans-unit id="e63ac43cdcb5a4238c7b9262748f81e7cf3457ea" translate="yes" xml:space="preserve">
          <source>Arrayterator.shape</source>
          <target state="translated">Arrayterator.shape</target>
        </trans-unit>
        <trans-unit id="62735fb443777d7de2d1c29ccbb762ccfb2be570" translate="yes" xml:space="preserve">
          <source>As &lt;a href=&quot;#numpy.ma.MaskedArray&quot;&gt;&lt;code&gt;MaskedArray&lt;/code&gt;&lt;/a&gt; is a subclass of &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt;, a masked array also inherits all the attributes and properties of a &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; instance.</source>
          <target state="translated">&lt;a href=&quot;#numpy.ma.MaskedArray&quot;&gt; &lt;code&gt;MaskedArray&lt;/code&gt; で&lt;/a&gt;のサブクラスである&lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; &lt;/a&gt;、マスクされた配列はまた、すべての属性とプロパティを継承&lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; &lt;/a&gt;インスタンス。</target>
        </trans-unit>
        <trans-unit id="bdc5d12d9a06d1a300c059aee30b6e3298b8cd56" translate="yes" xml:space="preserve">
          <source>As Numeric has matured and developed into NumPy, people have been able to write more code directly in NumPy. Often this code is fast-enough for production use, but there are still times that there is a need to access compiled code. Either to get that last bit of efficiency out of the algorithm or to make it easier to access widely-available codes written in C/C++ or Fortran.</source>
          <target state="translated">Numericが成熟し、NumPyに発展するにつれ、人々はより多くのコードをNumPyで直接書くことができるようになりました。多くの場合、このコードはプロダクションで使用するには十分な速さですが、コンパイルされたコードにアクセスする必要がある場合もあります。アルゴリズムから最後の一歩を効率化するため、あるいはC/C++やFortranで書かれた広く利用可能なコードへのアクセスを容易にするためです。</target>
        </trans-unit>
        <trans-unit id="266410aaeb848f2f7510db1bcf8e20c2778f75df" translate="yes" xml:space="preserve">
          <source>As a &lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray&quot;&gt;&lt;code&gt;MaskedArray&lt;/code&gt;&lt;/a&gt; is a subclass of &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;numpy.ndarray&lt;/code&gt;&lt;/a&gt;, it inherits its mechanisms for indexing and slicing.</source>
          <target state="translated">&lt;a href=&quot;maskedarray.baseclass#numpy.ma.MaskedArray&quot;&gt; &lt;code&gt;MaskedArray&lt;/code&gt; で&lt;/a&gt;のサブクラスで&lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;numpy.ndarray&lt;/code&gt; &lt;/a&gt;、それはインデックスとスライスのためにその機構を継承します。</target>
        </trans-unit>
        <trans-unit id="572a6b072b5d5bfb6b919bf3e8415158c50e5fd9" translate="yes" xml:space="preserve">
          <source>As a convenience for &lt;code&gt;__array_function__&lt;/code&gt; implementors, &lt;code&gt;types&lt;/code&gt; provides all argument types with an &lt;code&gt;'__array_function__'&lt;/code&gt; attribute. This allows implementors to quickly identify cases where they should defer to &lt;code&gt;__array_function__&lt;/code&gt; implementations on other arguments. Implementations should not rely on the iteration order of &lt;code&gt;types&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;__array_function__&lt;/code&gt; インプリメンターの便宜上、 &lt;code&gt;types&lt;/code&gt; はすべての引数の型に &lt;code&gt;'__array_function__'&lt;/code&gt; 属性を提供します。これにより、実装者は他の引数の &lt;code&gt;__array_function__&lt;/code&gt; 実装を遅延させる必要があるケースをすばやく特定できます。実装では、 &lt;code&gt;types&lt;/code&gt; の反復順序に依存しないでください。</target>
        </trans-unit>
        <trans-unit id="943758d1e20ad4276263519968fa94f16b718bb2" translate="yes" xml:space="preserve">
          <source>As a corollary to this change, we no longer prohibit casting between datetimes with date units and datetimes with timeunits. With timezone naive datetimes, the rule for casting from dates to times is no longer ambiguous.</source>
          <target state="translated">この変更に付随して、日付単位のdatetimesと時間単位のdatetimesの間のキャストを禁止しなくなりました。timezoneのナイーブなdatetimesでは、日付から時刻へのキャストのルールが曖昧ではなくなりました。</target>
        </trans-unit>
        <trans-unit id="013d98a5ec5b7f58afd0279b5cb85ae341df8643" translate="yes" xml:space="preserve">
          <source>As a final note: if the &lt;code&gt;super&lt;/code&gt; route is suited to a given class, an advantage of using it is that it helps in constructing class hierarchies. E.g., suppose that our other class &lt;code&gt;B&lt;/code&gt; also used the &lt;code&gt;super&lt;/code&gt; in its &lt;code&gt;__array_ufunc__&lt;/code&gt; implementation, and we created a class &lt;code&gt;C&lt;/code&gt; that depended on both, i.e., &lt;code&gt;class C(A, B)&lt;/code&gt; (with, for simplicity, not another &lt;code&gt;__array_ufunc__&lt;/code&gt; override). Then any ufunc on an instance of &lt;code&gt;C&lt;/code&gt; would pass on to &lt;code&gt;A.__array_ufunc__&lt;/code&gt;, the &lt;code&gt;super&lt;/code&gt; call in &lt;code&gt;A&lt;/code&gt; would go to &lt;code&gt;B.__array_ufunc__&lt;/code&gt;, and the &lt;code&gt;super&lt;/code&gt; call in &lt;code&gt;B&lt;/code&gt; would go to &lt;code&gt;ndarray.__array_ufunc__&lt;/code&gt;, thus allowing &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; to collaborate.</source>
          <target state="translated">最後に、 &lt;code&gt;super&lt;/code&gt; ルートが特定のクラスに適している場合、それを使用する利点は、クラス階層の構築に役立つことです。たとえば、他のクラス &lt;code&gt;B&lt;/code&gt; も &lt;code&gt;__array_ufunc__&lt;/code&gt; 実装で &lt;code&gt;super&lt;/code&gt; を使用し、両方に依存するクラス &lt;code&gt;C&lt;/code&gt; 、つまり &lt;code&gt;class C(A, B)&lt;/code&gt; を作成したとします（簡単にするために、別の &lt;code&gt;__array_ufunc__&lt;/code&gt; オーバーライドは使用しません）。その後のインスタンスのufunc &lt;code&gt;C&lt;/code&gt; がに渡すでしょう &lt;code&gt;A.__array_ufunc__&lt;/code&gt; 、 &lt;code&gt;super&lt;/code&gt; でのコール &lt;code&gt;A&lt;/code&gt; はに行くと &lt;code&gt;B.__array_ufunc__&lt;/code&gt; 、および &lt;code&gt;super&lt;/code&gt; &lt;code&gt;B&lt;/code&gt; を呼び出すと、 &lt;code&gt;ndarray.__array_ufunc__&lt;/code&gt; 、 &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; が共同作業できるようになります。</target>
        </trans-unit>
        <trans-unit id="839c21dc6f9c35797b35f17417f1d765334d2a61" translate="yes" xml:space="preserve">
          <source>As a rough estimate, a sliding window approach with an input size of &lt;code&gt;N&lt;/code&gt; and a window size of &lt;code&gt;W&lt;/code&gt; will scale as &lt;code&gt;O(N*W)&lt;/code&gt; where frequently a special algorithm can achieve &lt;code&gt;O(N)&lt;/code&gt;. That means that the sliding window variant for a window size of 100 can be a 100 times slower than a more specialized version.</source>
          <target state="translated">大まかな見積もりとして、入力サイズが &lt;code&gt;N&lt;/code&gt; でウィンドウサイズが &lt;code&gt;W&lt;/code&gt; のスライディングウィンドウアプローチは、 &lt;code&gt;O(N*W)&lt;/code&gt; としてスケーリングされます。ここで、特別なアルゴリズムが &lt;code&gt;O(N)&lt;/code&gt; を達成できることがよくあります。つまり、ウィンドウサイズが100のスライディングウィンドウバリアントは、より特殊なバージョンよりも100倍遅くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="20a42179492180fa8aaa4dc644b08e20ca1aef18" translate="yes" xml:space="preserve">
          <source>As an alternative to &lt;code&gt;pytest.mark.&amp;lt;label&amp;gt;&lt;/code&gt;, there are a number of labels you can use.</source>
          <target state="translated">&lt;code&gt;pytest.mark.&amp;lt;label&amp;gt;&lt;/code&gt; 代わりに、使用できるラベルがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="3dab1c17c36782c312875481e08692d9b809435e" translate="yes" xml:space="preserve">
          <source>As an example, for &lt;code&gt;numpy.mean&lt;/code&gt; we would have:</source>
          <target state="translated">例として、 &lt;code&gt;numpy.mean&lt;/code&gt; の場合、次のようになります。</target>
        </trans-unit>
        <trans-unit id="fecff8f943e371686abc1110d1711ebbbb86c5fa" translate="yes" xml:space="preserve">
          <source>As an example, see the 1.14.3 REL commit: &lt;a href=&quot;https://github.com/numpy/numpy/commit/73299826729be58cec179b52c656adfcaefada93&quot;&gt;https://github.com/numpy/numpy/commit/73299826729be58cec179b52c656adfcaefada93&lt;/a&gt;.</source>
          <target state="translated">例として、1.14.3 RELコミットを参照して&lt;a href=&quot;https://github.com/numpy/numpy/commit/73299826729be58cec179b52c656adfcaefada93&quot;&gt;ください&lt;/a&gt;：https：//github.com/numpy/numpy/commit/73299826729be58cec179b52c656adfcaefada93。</target>
        </trans-unit>
        <trans-unit id="f7ec8e32822a5e0a0d90b5363a2541452778cbc3" translate="yes" xml:space="preserve">
          <source>As an example, we print out the result of broadcasting a one and a two dimensional array together.</source>
          <target state="translated">例として、1次元配列と2次元配列を一緒に放送した結果をプリントアウトします。</target>
        </trans-unit>
        <trans-unit id="8f262d8c602a1c1784a0611d8d573ccc9d004b7a" translate="yes" xml:space="preserve">
          <source>As an illustration, let&amp;rsquo;s consider the following dataset:</source>
          <target state="translated">例として、次のデータセットを考えてみましょう：</target>
        </trans-unit>
        <trans-unit id="3c1410845edf2c868fb5a0fe8e6419a05b6e17f2" translate="yes" xml:space="preserve">
          <source>As an optional convenience numpy provides an ndarray subclass, &lt;a href=&quot;../reference/generated/numpy.recarray#numpy.recarray&quot;&gt;&lt;code&gt;numpy.recarray&lt;/code&gt;&lt;/a&gt; that allows access to fields of structured arrays by attribute instead of only by index. Record arrays use a special datatype, &lt;a href=&quot;../reference/generated/numpy.record#numpy.record&quot;&gt;&lt;code&gt;numpy.record&lt;/code&gt;&lt;/a&gt;, that allows field access by attribute on the structured scalars obtained from the array. The &lt;code&gt;numpy.rec&lt;/code&gt; module provides functions for creating recarrays from various objects. Additional helper functions for creating and manipulating structured arrays can be found in &lt;a href=&quot;#module-numpy.lib.recfunctions&quot;&gt;&lt;code&gt;numpy.lib.recfunctions&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">オプションとして、numpyはndarrayサブクラス&lt;a href=&quot;../reference/generated/numpy.recarray#numpy.recarray&quot;&gt; &lt;code&gt;numpy.recarray&lt;/code&gt; &lt;/a&gt;を提供します。これにより、インデックスだけでなく属性によって構造化配列のフィールドにアクセスできます。レコード配列は、特別なデータ型&lt;a href=&quot;../reference/generated/numpy.record#numpy.record&quot;&gt; &lt;code&gt;numpy.record&lt;/code&gt; &lt;/a&gt;を使用します。これにより、配列から取得した構造化スカラーの属性によるフィールドアクセスが可能になります。 &lt;code&gt;numpy.rec&lt;/code&gt; モジュールは、様々なオブジェクトからrecarraysを作成するための機能を提供します。構造化配列を作成および操作するための追加のヘルパー関数は、&lt;a href=&quot;#module-numpy.lib.recfunctions&quot;&gt; &lt;code&gt;numpy.lib.recfunctions&lt;/code&gt; にあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="06bd4fa6779fdd07b3d52175c70a52bf6deacdac" translate="yes" xml:space="preserve">
          <source>As an optional convenience numpy provides an ndarray subclass, &lt;a href=&quot;../reference/generated/numpy.recarray#numpy.recarray&quot;&gt;&lt;code&gt;numpy.recarray&lt;/code&gt;&lt;/a&gt;, and associated helper functions in the &lt;code&gt;numpy.rec&lt;/code&gt; submodule, that allows access to fields of structured arrays by attribute instead of only by index. Record arrays also use a special datatype, &lt;a href=&quot;../reference/generated/numpy.record#numpy.record&quot;&gt;&lt;code&gt;numpy.record&lt;/code&gt;&lt;/a&gt;, that allows field access by attribute on the structured scalars obtained from the array.</source>
          <target state="translated">オプションとして、numpyは、ndarrayサブクラス、&lt;a href=&quot;../reference/generated/numpy.recarray#numpy.recarray&quot;&gt; &lt;code&gt;numpy.recarray&lt;/code&gt; &lt;/a&gt;、および &lt;code&gt;numpy.rec&lt;/code&gt; サブモジュール内の関連するヘルパー関数を提供します。これにより、インデックスだけでなく属性ごとに構造化配列のフィールドにアクセスできます。レコード配列は、特別なデータ型&lt;a href=&quot;../reference/generated/numpy.record#numpy.record&quot;&gt; &lt;code&gt;numpy.record&lt;/code&gt; &lt;/a&gt;も使用します。これにより、配列から取得した構造化スカラーの属性によるフィールドアクセスが可能になります。</target>
        </trans-unit>
        <trans-unit id="ff6fd804dd39db5798ff08b4b25e0937a2c068e3" translate="yes" xml:space="preserve">
          <source>As an trivial example, consider this implementation of an &lt;code&gt;ArrayLike&lt;/code&gt; class that simply wraps a NumPy array and ensures that the result of any arithmetic operation is also an &lt;code&gt;ArrayLike&lt;/code&gt; object:</source>
          <target state="translated">簡単な例として、単純にNumPy配列をラップし、算術演算の結果も &lt;code&gt;ArrayLike&lt;/code&gt; オブジェクトになることを保証する &lt;code&gt;ArrayLike&lt;/code&gt; クラスのこの実装を検討してください。</target>
        </trans-unit>
        <trans-unit id="cede8d515f0ee49ac10c9ddedbb9f437527bae9a" translate="yes" xml:space="preserve">
          <source>As can be seen, the &amp;ldquo;good&amp;rdquo; parts have shrunk to insignificance. In using Chebyshev polynomials for fitting we want to use the region where &lt;code&gt;x&lt;/code&gt; is between -1 and 1 and that is what the &lt;code&gt;window&lt;/code&gt; specifies. However, it is unlikely that the data to be fit has all its data points in that interval, so we use &lt;code&gt;domain&lt;/code&gt; to specify the interval where the data points lie. When the fit is done, the domain is first mapped to the window by a linear transformation and the usual least squares fit is done using the mapped data points. The window and domain of the fit are part of the returned series and are automatically used when computing values, derivatives, and such. If they aren&amp;rsquo;t specified in the call the fitting routine will use the default window and the smallest domain that holds all the data points. This is illustrated below for a fit to a noisy sine curve.</source>
          <target state="translated">見て分かるように、「良い」部品は重要ではないほど縮小しています。チェビシェフ多項式をフィッティングに使用する場合、 &lt;code&gt;x&lt;/code&gt; が-1から1までの領域を使用し、 &lt;code&gt;window&lt;/code&gt; 指定します。ただし、当てはめるデータのすべてのデータポイントがその間隔内にあるとは考えにくいため、 &lt;code&gt;domain&lt;/code&gt; を使用します。データポイントの間隔を指定します。近似が完了すると、ドメインはまず線形変換によってウィンドウにマッピングされ、通常の最小二乗近似はマッピングされたデータポイントを使用して行われます。当てはめのウィンドウとドメインは返される系列の一部であり、値、導関数などを計算するときに自動的に使用されます。それらが呼び出しで指定されていない場合、フィッティングルーチンはデフォルトのウィンドウとすべてのデータポイントを保持する最小のドメインを使用します。これは、ノイズのある正弦曲線への当てはめのために以下に示されています。</target>
        </trans-unit>
        <trans-unit id="e0bc58a150fd519b1ef1b28d23e1c4528291bcac" translate="yes" xml:space="preserve">
          <source>As expected, this is a 768x1024 matrix:</source>
          <target state="translated">さすがに768×1024の行列です。</target>
        </trans-unit>
        <trans-unit id="c53fc1e45dbe406be17b6e30a5cfb9d43c0f2859" translate="yes" xml:space="preserve">
          <source>As explained previously, C-style contiguous arrays and Fortran-style contiguous arrays have particular striding patterns. Two array flags (&lt;a href=&quot;../reference/c-api/array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../reference/c-api/array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt;&lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt;&lt;/a&gt;) indicate whether or not the striding pattern of a particular array matches the C-style contiguous or Fortran-style contiguous or neither. Whether or not the striding pattern matches a standard C or Fortran one can be tested Using &lt;a href=&quot;../reference/c-api/array#c.PyArray_IS_C_CONTIGUOUS&quot;&gt;&lt;code&gt;PyArray_IS_C_CONTIGUOUS&lt;/code&gt;&lt;/a&gt; (obj) and &lt;a href=&quot;../reference/c-api/array#c.PyArray_ISFORTRAN&quot;&gt;&lt;code&gt;PyArray_ISFORTRAN&lt;/code&gt;&lt;/a&gt; (obj) respectively. Most third-party libraries expect contiguous arrays. But, often it is not difficult to support general-purpose striding. I encourage you to use the striding information in your own code whenever possible, and reserve single-segment requirements for wrapping third-party code. Using the striding information provided with the ndarray rather than requiring a contiguous striding reduces copying that otherwise must be made.</source>
          <target state="translated">前に説明したように、Cスタイルの連続配列とFortranスタイルの連続配列には特定のストライドパターンがあります。 2つの配列フラグ（&lt;a href=&quot;../reference/c-api/array#c.NPY_ARRAY_C_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_C_CONTIGUOUS&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../reference/c-api/array#c.NPY_ARRAY_F_CONTIGUOUS&quot;&gt; &lt;code&gt;NPY_ARRAY_F_CONTIGUOUS&lt;/code&gt; &lt;/a&gt;）は、特定の配列のストライドパターンがCスタイルの連続またはFortranスタイルの連続と一致するかどうかを示します。ストライドパターンが標準のCまたはFortranに一致するかどうかは、&lt;a href=&quot;../reference/c-api/array#c.PyArray_IS_C_CONTIGUOUS&quot;&gt; &lt;code&gt;PyArray_IS_C_CONTIGUOUS&lt;/code&gt; &lt;/a&gt;（obj）および&lt;a href=&quot;../reference/c-api/array#c.PyArray_ISFORTRAN&quot;&gt; &lt;code&gt;PyArray_ISFORTRAN&lt;/code&gt; &lt;/a&gt;を使用してテストできます。（obj）それぞれ。ほとんどのサードパーティライブラリは、連続した配列を想定しています。しかし、多くの場合、汎用ストライドをサポートすることは難しくありません。可能な限り、独自のコードでストライド情報を使用し、サードパーティのコードをラップするための単一セグメントの要件を予約することをお勧めします。連続したストライドを必要とするのではなく、ndarrayで提供されるストライド情報を使用すると、コピーを減らすことができます。</target>
        </trans-unit>
        <trans-unit id="fdede3e80508e2816102dcd54a9d5c797c31ec48" translate="yes" xml:space="preserve">
          <source>As for &lt;a href=&quot;numpy.ndarray.tobytes#numpy.ndarray.tobytes&quot;&gt;&lt;code&gt;ndarray.tobytes&lt;/code&gt;&lt;/a&gt;, information about the shape, dtype, etc., but also about &lt;a href=&quot;../maskedarray.baseclass#numpy.ma.MaskedArray.fill_value&quot;&gt;&lt;code&gt;fill_value&lt;/code&gt;&lt;/a&gt;, will be lost.</source>
          <target state="translated">&lt;a href=&quot;numpy.ndarray.tobytes#numpy.ndarray.tobytes&quot;&gt; &lt;code&gt;ndarray.tobytes&lt;/code&gt; &lt;/a&gt;、形状、DTYPEなどについて、ほかの情報&lt;a href=&quot;../maskedarray.baseclass#numpy.ma.MaskedArray.fill_value&quot;&gt; &lt;code&gt;fill_value&lt;/code&gt; &lt;/a&gt;、失われます。</target>
        </trans-unit>
        <trans-unit id="6eb7f695a43a210c4ab19e5bc957617a28b1a107" translate="yes" xml:space="preserve">
          <source>As for &lt;code&gt;ndarray.tobytes&lt;/code&gt;, information about the shape, dtype, etc., but also about &lt;a href=&quot;../maskedarray.baseclass#numpy.ma.MaskedArray.fill_value&quot;&gt;&lt;code&gt;fill_value&lt;/code&gt;&lt;/a&gt;, will be lost.</source>
          <target state="translated">&lt;code&gt;ndarray.tobytes&lt;/code&gt; 、形状、DTYPEなどについて、ほかの情報&lt;a href=&quot;../maskedarray.baseclass#numpy.ma.MaskedArray.fill_value&quot;&gt; &lt;code&gt;fill_value&lt;/code&gt; &lt;/a&gt;、失われます。</target>
        </trans-unit>
        <trans-unit id="442dd71dc758bc00985af7b82e3b46e788353af0" translate="yes" xml:space="preserve">
          <source>As for &lt;code&gt;ndarray.tobytes&lt;/code&gt;, information about the shape, dtype, etc., but also about &lt;a href=&quot;numpy.ma.masked_array.fill_value#numpy.ma.masked_array.fill_value&quot;&gt;&lt;code&gt;fill_value&lt;/code&gt;&lt;/a&gt;, will be lost.</source>
          <target state="translated">&lt;code&gt;ndarray.tobytes&lt;/code&gt; 、形状、DTYPEなどについて、ほかの情報&lt;a href=&quot;numpy.ma.masked_array.fill_value#numpy.ma.masked_array.fill_value&quot;&gt; &lt;code&gt;fill_value&lt;/code&gt; &lt;/a&gt;、失われます。</target>
        </trans-unit>
        <trans-unit id="b59d207ef2133a3867224936518ca5838dca25c9" translate="yes" xml:space="preserve">
          <source>As it turns out, numpy is smart enough when dealing with ufuncs to determine which index is the most rapidly varying one in memory and uses that for the innermost loop. Thus for ufuncs there is no large intrinsic advantage to either approach in most cases. On the other hand, use of .flat with an FORTRAN ordered array will lead to non-optimal memory access as adjacent elements in the flattened array (iterator, actually) are not contiguous in memory.</source>
          <target state="translated">結局のところ、numpyはufuncsを扱うときには、メモリ内のどのインデックスが最も急速に変化するインデックスであるかを判断し、それを最内ループに使用します。したがって、ufuncsの場合は、ほとんどの場合、どちらのアプローチにも大きな本質的な利点はありません。一方で、FORTRAN の順序付き配列で .flat を使用すると、平坦化された配列 (実際にはイテレータ)の隣接する要素がメモリ上で連続していないため、最適ではないメモリアクセスが発生します。</target>
        </trans-unit>
        <trans-unit id="bae171d630e66c8dccf252742ea919c5676002d9" translate="yes" xml:space="preserve">
          <source>As mentioned in the Notes section, &lt;a href=&quot;#numpy.testing.assert_array_equal&quot;&gt;&lt;code&gt;assert_array_equal&lt;/code&gt;&lt;/a&gt; has special handling for scalars. Here the test checks that each value in &lt;code&gt;x&lt;/code&gt; is 3:</source>
          <target state="translated">注のセクションで&lt;a href=&quot;#numpy.testing.assert_array_equal&quot;&gt; &lt;code&gt;assert_array_equal&lt;/code&gt; &lt;/a&gt;したように、assert_array_equalにはスカラーに対する特別な処理があります。ここで、テストは &lt;code&gt;x&lt;/code&gt; の各値が3であることを確認します。</target>
        </trans-unit>
        <trans-unit id="13dc2b7c8c10ac2fc73aefee2fde7f627c9b6aa2" translate="yes" xml:space="preserve">
          <source>As mentioned previously, the flat attribute of ndarray objects returns an iterator that will cycle over the entire array in C-style contiguous order.</source>
          <target state="translated">前述したように、ndarray オブジェクトの flat 属性は、配列全体を C スタイルの連続した順序で循環させるイテレータを返します。</target>
        </trans-unit>
        <trans-unit id="1eeb436878ddf7f47ab4d8c1fb337ec14f285994" translate="yes" xml:space="preserve">
          <source>As mentioned, one can select a subset of an array to assign to using a single index, slices, and index and mask arrays. The value being assigned to the indexed array must be shape consistent (the same shape or broadcastable to the shape the index produces). For example, it is permitted to assign a constant to a slice:</source>
          <target state="translated">前述のように、1つのインデックス、スライス、インデックスとマスクの配列を使用して、代入する配列のサブセットを選択することができます。インデックス付き配列に代入される値は、形状が一致していなければなりません(インデックスが生成する形状と同じ形状、またはブロードキャスト可能な形状)。例えば、スライスに定数を代入することは許されています。</target>
        </trans-unit>
        <trans-unit id="6bb256df55b0c84359db8c790668112e195bd64a" translate="yes" xml:space="preserve">
          <source>As noted above the inverse Gaussian distribution first arise from attempts to model Brownian motion. It is also a competitor to the Weibull for use in reliability modeling and modeling stock returns and interest rate processes.</source>
          <target state="translated">上で述べたように、逆ガウス分布は、ブラウン運動をモデル化する試みから最初に生まれました。また、信頼性モデリングや株式リターンや金利プロセスのモデリングで使用するために、ワイブルと競合するものでもあります。</target>
        </trans-unit>
        <trans-unit id="ec730138fa95973e97f6613bc68aa1a1f0c5aafb" translate="yes" xml:space="preserve">
          <source>As of 1.6, this function simply calls &lt;a href=&quot;#c.PyArray_CopyInto&quot;&gt;&lt;code&gt;PyArray_CopyInto&lt;/code&gt;&lt;/a&gt;, which handles the casting.</source>
          <target state="translated">1.6以降、この関数はキャストを処理する&lt;a href=&quot;#c.PyArray_CopyInto&quot;&gt; &lt;code&gt;PyArray_CopyInto&lt;/code&gt; を&lt;/a&gt;呼び出すだけです。</target>
        </trans-unit>
        <trans-unit id="3f3530b3b21291b3dd3b74336008cc7a706ed945" translate="yes" xml:space="preserve">
          <source>As of NumPy 1.10, the returned array will have the same type as the input array. (for example, a masked array will be returned for a masked array input)</source>
          <target state="translated">NumPy 1.10では,返される配列は入力配列と同じ型になります(例えば,マスクされた配列の入力に対してはマスクされた配列が返されます).(例えば,マスクされた配列の入力に対しては,マスクされた配列が返されます)</target>
        </trans-unit>
        <trans-unit id="12042a22f9b6865da757e69e8d2ce21273a85e0c" translate="yes" xml:space="preserve">
          <source>As of NumPy 1.4.0 &lt;a href=&quot;#numpy.argsort&quot;&gt;&lt;code&gt;argsort&lt;/code&gt;&lt;/a&gt; works with real/complex arrays containing nan values. The enhanced sort order is documented in &lt;a href=&quot;numpy.sort#numpy.sort&quot;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">NumPy 1.4.0 &lt;a href=&quot;#numpy.argsort&quot;&gt; &lt;code&gt;argsort&lt;/code&gt; &lt;/a&gt; nan値を含む実数/複素数配列で動作します。強化されたソート順は、&lt;a href=&quot;numpy.sort#numpy.sort&quot;&gt; &lt;code&gt;sort&lt;/code&gt; に&lt;/a&gt;文書化されています。</target>
        </trans-unit>
        <trans-unit id="bba53cf9adf4ac58af71ddd4d6acfa9ee160b6ec" translate="yes" xml:space="preserve">
          <source>As of NumPy 1.4.0 &lt;a href=&quot;#numpy.searchsorted&quot;&gt;&lt;code&gt;searchsorted&lt;/code&gt;&lt;/a&gt; works with real/complex arrays containing &lt;a href=&quot;../constants#numpy.nan&quot;&gt;&lt;code&gt;nan&lt;/code&gt;&lt;/a&gt; values. The enhanced sort order is documented in &lt;a href=&quot;numpy.sort#numpy.sort&quot;&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">NumPy 1.4.0 &lt;a href=&quot;#numpy.searchsorted&quot;&gt; &lt;code&gt;searchsorted&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;../constants#numpy.nan&quot;&gt; &lt;code&gt;nan&lt;/code&gt; &lt;/a&gt;値を含む実数/複素数配列で動作します。強化されたソート順は、&lt;a href=&quot;numpy.sort#numpy.sort&quot;&gt; &lt;code&gt;sort&lt;/code&gt; に&lt;/a&gt;文書化されています。</target>
        </trans-unit>
        <trans-unit id="17597aa038b28f9f5c8df2774b1f9eab6ad3af4c" translate="yes" xml:space="preserve">
          <source>As of NumPy 1.6.0, these array iterators are superceded by the new array iterator, &lt;a href=&quot;c-api.iterator#c.NpyIter&quot;&gt;&lt;code&gt;NpyIter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">NumPy 1.6.0以降、これらの配列反復子は新しい配列反復子&lt;a href=&quot;c-api.iterator#c.NpyIter&quot;&gt; &lt;code&gt;NpyIter&lt;/code&gt; に置き換えられました&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8364d1abaebc5d8b1444ea31949f7accfaa13ead" translate="yes" xml:space="preserve">
          <source>As of NumPy 1.6.0, these array iterators are superseded by the new array iterator, &lt;a href=&quot;iterator#c.NpyIter&quot;&gt;&lt;code&gt;NpyIter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">NumPy 1.6.0以降、これらの配列イテレーターは、新しい配列イテレーターである&lt;a href=&quot;iterator#c.NpyIter&quot;&gt; &lt;code&gt;NpyIter&lt;/code&gt; に&lt;/a&gt;置き換えられています。</target>
        </trans-unit>
        <trans-unit id="7f60464691ec1296f5eb92b23ac7c66b95bdc223" translate="yes" xml:space="preserve">
          <source>As previously discussed, you can also set the argtypes attribute of the function in order to have ctypes check the types of the input arguments when the function is called. Use the &lt;a href=&quot;#ndpointer&quot;&gt;&lt;code&gt;ndpointer&lt;/code&gt;&lt;/a&gt; factory function to generate a ready-made class for data-type, shape, and flags checking on your new function. The &lt;a href=&quot;#ndpointer&quot;&gt;&lt;code&gt;ndpointer&lt;/code&gt;&lt;/a&gt; function has the signature</source>
          <target state="translated">前に説明したように、関数が呼び出されたときにctypesに入力引数のタイプをチェックさせるために、関数のargtypes属性を設定することもできます。&lt;a href=&quot;#ndpointer&quot;&gt; &lt;code&gt;ndpointer&lt;/code&gt; &lt;/a&gt;ファクトリ関数を使用して、新しい関数でデータ型、形状、およびフラグをチェックするための既製のクラスを生成します。&lt;a href=&quot;#ndpointer&quot;&gt; &lt;code&gt;ndpointer&lt;/code&gt; の&lt;/a&gt;機能は、署名を有します</target>
        </trans-unit>
        <trans-unit id="7e6c9caa222f474d8200d79ae5b20b408a1c8172" translate="yes" xml:space="preserve">
          <source>As shown in &lt;a href=&quot;#figure-2&quot;&gt;Figure 2&lt;/a&gt;, &lt;code&gt;b&lt;/code&gt; is added to each row of &lt;code&gt;a&lt;/code&gt;. When &lt;code&gt;b&lt;/code&gt; is longer than the rows of &lt;code&gt;a&lt;/code&gt;, as in &lt;a href=&quot;#figure-3&quot;&gt;Figure 3&lt;/a&gt;, an exception is raised because of the incompatible shapes.</source>
          <target state="translated">示すように&lt;a href=&quot;#figure-2&quot;&gt;、図2&lt;/a&gt;、 &lt;code&gt;b&lt;/code&gt; 各列に追加されます。場合 &lt;code&gt;b&lt;/code&gt; 列よりも長くなるように、&lt;a href=&quot;#figure-3&quot;&gt;図3&lt;/a&gt;は、例外があるため、互換性のない形状の隆起されます。 &lt;code&gt;a&lt;/code&gt; &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0eb75b8579bfe992aa268341a4c85c6d503920b9" translate="yes" xml:space="preserve">
          <source>As the scale approaches infinity, the distribution becomes more like a Gaussian. Some references claim that the Wald is an inverse Gaussian with mean equal to 1, but this is by no means universal.</source>
          <target state="translated">スケールが無限大に近づくにつれて、分布はよりガウス分布のようになります。いくつかの文献では、Waldは平均が1に等しい逆ガウス分布であると主張していますが、これは決して普遍的なものではありません。</target>
        </trans-unit>
        <trans-unit id="2f0e40b24d4f520710fd1ed228a57a1690ea8227" translate="yes" xml:space="preserve">
          <source>As well as the scalar array special case signaling that an integer array was interpreted as an integer index, which is important because an integer array index forces a copy but is ignored if a scalar is returned (full integer index). The prepared index is guaranteed to be valid with the exception of out of bound values and broadcasting errors for advanced indexing. This includes that an ellipsis is added for incomplete indices for example when a two dimensional array is indexed with a single integer.</source>
          <target state="translated">これは、整数配列のインデックスはコピーを強制しますが、スカラ(完全な整数インデックス)が返された場合は無視されるため、重要です。用意されたインデックスは、境界外の値や高度なインデックス作成のためのブロードキャストエラーを除いて有効であることが保証されます。これには,例えば2次元配列が単一の整数でインデックス付けされている場合など,不完全なインデックスに対して楕円が追加されることも含まれます.</target>
        </trans-unit>
        <trans-unit id="925814af80369e67056380832c2cbc226e28baa6" translate="yes" xml:space="preserve">
          <source>As with other container objects in Python, the contents of an &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; can be accessed and modified by &lt;a href=&quot;arrays.indexing#arrays-indexing&quot;&gt;indexing or slicing&lt;/a&gt; the array (using, for example, &lt;em&gt;N&lt;/em&gt; integers), and via the methods and attributes of the &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Pythonの他のコンテナーオブジェクトと同様に、&lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; &lt;/a&gt;のコンテンツは、配列の&lt;a href=&quot;arrays.indexing#arrays-indexing&quot;&gt;インデックス付けまたはスライス&lt;/a&gt;（たとえば、&lt;em&gt;N&lt;/em&gt;整数を使用）によって、および&lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; の&lt;/a&gt;メソッドと属性を介してアクセスおよび変更できます。</target>
        </trans-unit>
        <trans-unit id="52fd93066bad29b67273e079568eccef85b00fa0" translate="yes" xml:space="preserve">
          <source>As you can imagine from the introduction, there are two ways you can affect the relationship between the byte ordering of the array and the underlying memory it is looking at:</source>
          <target state="translated">序章から想像できるように、配列のバイト順とそれが参照しているメモリとの関係に影響を与えるには2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="d2891acf8ae5fe1d5007874779732cde26b391a3" translate="yes" xml:space="preserve">
          <source>As you can see, the object can be initialized in the &lt;code&gt;__new__&lt;/code&gt; method or the &lt;code&gt;__init__&lt;/code&gt; method, or both, and in fact ndarray does not have an &lt;code&gt;__init__&lt;/code&gt; method, because all the initialization is done in the &lt;code&gt;__new__&lt;/code&gt; method.</source>
          <target state="translated">ご覧のとおり、オブジェクトは &lt;code&gt;__new__&lt;/code&gt; メソッドまたは &lt;code&gt;__init__&lt;/code&gt; メソッド、あるいはその両方で初期化できます。実際、すべての初期化は &lt;code&gt;__new__&lt;/code&gt; メソッドで行われるため、ndarrayには &lt;code&gt;__init__&lt;/code&gt; メソッドがありません。</target>
        </trans-unit>
        <trans-unit id="3b4f7dc7b3c4a70ce9ff533c44a9b7a4a1713152" translate="yes" xml:space="preserve">
          <source>Asking for your changes to be merged with the main repo</source>
          <target state="translated">あなたの変更をメインのレポにマージするようにお願いしています。</target>
        </trans-unit>
        <trans-unit id="b3cf9d2ab1eb546a2eba1efeb64eb1e97091b955" translate="yes" xml:space="preserve">
          <source>Assemble an nd-array from nested lists of blocks.</source>
          <target state="translated">ブロックのネストされたリストから nd-array をアセンブルします。</target>
        </trans-unit>
        <trans-unit id="74cbd6c218f89d00f752e7ba4b2b17d97a1a1ff7" translate="yes" xml:space="preserve">
          <source>Assemble arrays from blocks.</source>
          <target state="translated">ブロックから配列を組み立てる。</target>
        </trans-unit>
        <trans-unit id="de78d0a7b76ee6bba1ecaedfc383918b06ba62a9" translate="yes" xml:space="preserve">
          <source>Assert fails with numerical imprecision with floats:</source>
          <target state="translated">浮動小数点数の数値不正確さでアサートが失敗します。</target>
        </trans-unit>
        <trans-unit id="79536b913447cc8edd9ecd5192bb8530d9a9202a" translate="yes" xml:space="preserve">
          <source>Assert fails with numerical inprecision with floats:</source>
          <target state="translated">アサートは、浮動小数点数の数値精度が低い場合に失敗します。</target>
        </trans-unit>
        <trans-unit id="e3292c12a856a02722a46d87471ff4e6faefa104" translate="yes" xml:space="preserve">
          <source>AssertionError</source>
          <target state="translated">AssertionError</target>
        </trans-unit>
        <trans-unit id="561c16749736b8dbda1124817a2b4447de5e4505" translate="yes" xml:space="preserve">
          <source>Asserts</source>
          <target state="translated">Asserts</target>
        </trans-unit>
        <trans-unit id="289e36002d46d5808069779b9fe9f985a8b15407" translate="yes" xml:space="preserve">
          <source>Assigning data to a Structured Array</source>
          <target state="translated">構造化配列へのデータの割り当て</target>
        </trans-unit>
        <trans-unit id="8a799af040a420920800093adb9e84b1752618c3" translate="yes" xml:space="preserve">
          <source>Assigning to slices/views of &lt;code&gt;MaskedArray&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;MaskedArray&lt;/code&gt; のスライス/ビューへの割り当て</target>
        </trans-unit>
        <trans-unit id="a63aa663ce3fd806853c6e1d56f0f1c1896855bd" translate="yes" xml:space="preserve">
          <source>Assigning values to indexed arrays</source>
          <target state="translated">インデックス付き配列への値の代入</target>
        </trans-unit>
        <trans-unit id="4d5174a57fec035b53144526667e457e11d00dd3" translate="yes" xml:space="preserve">
          <source>Assignment between two structured arrays occurs as if the source elements had been converted to tuples and then assigned to the destination elements. That is, the first field of the source array is assigned to the first field of the destination array, and the second field likewise, and so on, regardless of field names. Structured arrays with a different number of fields cannot be assigned to each other. Bytes of the destination structure which are not included in any of the fields are unaffected.</source>
          <target state="translated">2 つの構造化配列間の代入は,ソース要素がタプルに変換された後,デスティネーション要素に代入されたかのように行われます.つまり、フィールド名に関係なく、ソース配列の最初のフィールドがデスティネーション配列の最初のフィールドに代入され、2 番目のフィールドも同様に代入されます。フィールド数の異なる構造化配列は,互いに代入することができません.宛先構造体のどのフィールドにも含まれないバイトは影響を受けません。</target>
        </trans-unit>
        <trans-unit id="acccf5c6ee3457ada97687fe5c7f1318e0893486" translate="yes" xml:space="preserve">
          <source>Assignment from Python Native Types (Tuples)</source>
          <target state="translated">Pythonネイティブ型(タプル)からの割り当て</target>
        </trans-unit>
        <trans-unit id="9cc21533901f2115eb4a3c32d19650f93349565e" translate="yes" xml:space="preserve">
          <source>Assignment from Scalars</source>
          <target state="translated">スカラーズからの割り当て</target>
        </trans-unit>
        <trans-unit id="4c57993301d1b6548c0e4939d7c7c8d9a2d56b2c" translate="yes" xml:space="preserve">
          <source>Assignment from other Structured Arrays</source>
          <target state="translated">他の構造化配列からの代入</target>
        </trans-unit>
        <trans-unit id="fc5e2a82565507aaae14030e1c010088c6562688" translate="yes" xml:space="preserve">
          <source>Assignment involving subarrays</source>
          <target state="translated">サブアレイを含む割り当て</target>
        </trans-unit>
        <trans-unit id="dc3ede0861439daaed8c3de08958646d9211be1a" translate="yes" xml:space="preserve">
          <source>Assignment of ndarray object&amp;rsquo;s &lt;code&gt;data&lt;/code&gt; attribute</source>
          <target state="translated">ndarrayオブジェクトの &lt;code&gt;data&lt;/code&gt; 属性の割り当て</target>
        </trans-unit>
        <trans-unit id="2edeef440cbb6c2ba230df4bbf3e9bef68f36e23" translate="yes" xml:space="preserve">
          <source>Assignment to an array with a multi-field index modifies the original array:</source>
          <target state="translated">複数フィールドのインデックスを持つ配列に代入すると,元の配列が変更されます.</target>
        </trans-unit>
        <trans-unit id="af53b1c5013c72eb7aa598ce977b69cfb859c315" translate="yes" xml:space="preserve">
          <source>Assignment to the view modifies the original array. The view&amp;rsquo;s fields will be in the order they were indexed. Note that unlike for single-field indexing, the dtype of the view has the same itemsize as the original array, and has fields at the same offsets as in the original array, and unindexed fields are merely missing.</source>
          <target state="translated">ビューに割り当てると、元の配列が変更されます。ビューのフィールドは、インデックスが作成された順序になります。単一フィールドのインデックス付けとは異なり、ビューのdtypeは元の配列と同じitemsizeを持ち、元の配列と同じオフセットにフィールドがあり、インデックス付けされていないフィールドが欠落しているだけであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ed91fb02ba267588e9268d85784e62da51f799fd" translate="yes" xml:space="preserve">
          <source>Assignment vs referencing</source>
          <target state="translated">課題と参照</target>
        </trans-unit>
        <trans-unit id="d8a1879dbe4b9ce9021e415e931186b4b4a19157" translate="yes" xml:space="preserve">
          <source>Assigns values from one structured array to another by field name.</source>
          <target state="translated">ある構造化された配列からフィールド名で別の配列に値を代入します。</target>
        </trans-unit>
        <trans-unit id="ae9a24254ec6cd55a31a48c28461f44e73e53f66" translate="yes" xml:space="preserve">
          <source>Assume &lt;code&gt;mask_func&lt;/code&gt; is a function that, for a square array a of size &lt;code&gt;(n, n)&lt;/code&gt; with a possible offset argument &lt;code&gt;k&lt;/code&gt;, when called as &lt;code&gt;mask_func(a, k)&lt;/code&gt; returns a new array with zeros in certain locations (functions like &lt;a href=&quot;numpy.triu#numpy.triu&quot;&gt;&lt;code&gt;triu&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;numpy.tril#numpy.tril&quot;&gt;&lt;code&gt;tril&lt;/code&gt;&lt;/a&gt; do precisely this). Then this function returns the indices where the non-zero values would be located.</source>
          <target state="translated">仮定 &lt;code&gt;mask_func&lt;/code&gt; するサイズの正方形アレイAについて、その関数である &lt;code&gt;(n, n)&lt;/code&gt; の可能なオフセット引数と &lt;code&gt;k&lt;/code&gt; と呼ばれる、 &lt;code&gt;mask_func(a, k)&lt;/code&gt; 特定の位置にゼロを使用して新しい配列を返す（のような機能&lt;a href=&quot;numpy.triu#numpy.triu&quot;&gt; &lt;code&gt;triu&lt;/code&gt; &lt;/a&gt;又は&lt;a href=&quot;numpy.tril#numpy.tril&quot;&gt; &lt;code&gt;tril&lt;/code&gt; &lt;/a&gt;正確にこれを行います）。次に、この関数はゼロ以外の値が配置されるインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="87a473db70c6a624c40e23afb12c39561d92a618" translate="yes" xml:space="preserve">
          <source>Assume &lt;em&gt;n&lt;/em&gt; is the number of elements in the dimension being sliced. Then, if &lt;em&gt;i&lt;/em&gt; is not given it defaults to 0 for &lt;em&gt;k &amp;gt; 0&lt;/em&gt; and &lt;em&gt;n - 1&lt;/em&gt; for &lt;em&gt;k &amp;lt; 0&lt;/em&gt; . If &lt;em&gt;j&lt;/em&gt; is not given it defaults to &lt;em&gt;n&lt;/em&gt; for &lt;em&gt;k &amp;gt; 0&lt;/em&gt; and &lt;em&gt;-n-1&lt;/em&gt; for &lt;em&gt;k &amp;lt; 0&lt;/em&gt; . If &lt;em&gt;k&lt;/em&gt; is not given it defaults to 1. Note that &lt;code&gt;::&lt;/code&gt; is the same as &lt;code&gt;:&lt;/code&gt; and means select all indices along this axis.</source>
          <target state="translated">&lt;em&gt;n&lt;/em&gt;は、スライスされる次元の要素数であると仮定します。次に、&lt;em&gt;i&lt;/em&gt;が指定されないと、&lt;em&gt;k&amp;gt; 0の&lt;/em&gt;場合はデフォルトで&lt;em&gt;0に&lt;/em&gt;なり、&lt;em&gt;k &amp;lt;0の&lt;/em&gt;&lt;em&gt;場合はn-1&lt;/em&gt;になり&lt;em&gt;ます&lt;/em&gt;。場合&lt;em&gt;jは&lt;/em&gt;にそれをデフォルト値を与えられていない&lt;em&gt;N&lt;/em&gt;ために&lt;em&gt;K&amp;gt; 0&lt;/em&gt;と&lt;em&gt;-n-1&lt;/em&gt;のための&lt;em&gt;K &amp;lt;0 &lt;/em&gt;。&lt;em&gt;k&lt;/em&gt;が指定されていない場合、デフォルトは1です。 &lt;code&gt;::&lt;/code&gt; は &lt;code&gt;:&lt;/code&gt; と同じであり、この軸に沿ってすべてのインデックスを選択することを意味します。</target>
        </trans-unit>
        <trans-unit id="b9dccb798e5c5e1b5508e3a8630765c07522b225" translate="yes" xml:space="preserve">
          <source>Assume that the observations are in the columns of the observation array &lt;code&gt;m&lt;/code&gt; and let &lt;code&gt;f = fweights&lt;/code&gt; and &lt;code&gt;a = aweights&lt;/code&gt; for brevity. The steps to compute the weighted covariance are as follows:</source>
          <target state="translated">観測は、観測アレイの列内にあると仮定し &lt;code&gt;m&lt;/code&gt; およびlet &lt;code&gt;f = fweights&lt;/code&gt; 及び &lt;code&gt;a = aweights&lt;/code&gt; 簡潔にするため。加重共分散を計算する手順は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="97728787c4c0fd66ac4cc28f08c4ba4e206f76e5" translate="yes" xml:space="preserve">
          <source>Assume we have three matrices</source>
          <target state="translated">3つの行列があるとします。</target>
        </trans-unit>
        <trans-unit id="68035e390827bfef5b6a722908902bf830e33068" translate="yes" xml:space="preserve">
          <source>Assuming that</source>
          <target state="translated">と仮定すると</target>
        </trans-unit>
        <trans-unit id="361dbf446d2fcbde7f8e5127964dd121d2c08adc" translate="yes" xml:space="preserve">
          <source>Assuming that &lt;code&gt;a&lt;/code&gt; is sorted:</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; がソートされていると仮定します。</target>
        </trans-unit>
        <trans-unit id="a66d954bab07db2d2ebde3811f3d1797fded0efb" translate="yes" xml:space="preserve">
          <source>Assuming the foo.ini.in file has the following content:</source>
          <target state="translated">foo.ini.inファイルの内容が以下のようになっているとします。</target>
        </trans-unit>
        <trans-unit id="3d748459a93c925f679363da9105b14fbf94ff7f" translate="yes" xml:space="preserve">
          <source>Assuming you have followed the instructions in these pages, git will create a default link to your &lt;a href=&quot;https://github.com/numpy/numpy&quot;&gt;github&lt;/a&gt; repo called &lt;code&gt;origin&lt;/code&gt;. In git &amp;gt;= 1.7 you can ensure that the link to origin is permanently set by using the &lt;code&gt;--set-upstream&lt;/code&gt; option:</source>
          <target state="translated">これらのページの指示に従っていると仮定すると、gitは &lt;code&gt;origin&lt;/code&gt; と呼ばれる&lt;a href=&quot;https://github.com/numpy/numpy&quot;&gt;github&lt;/a&gt;リポジトリへのデフォルトのリンクを作成します。git&amp;gt; = 1.7では、 &lt;code&gt;--set-upstream&lt;/code&gt; オプションを使用して、オリジンへのリンクが永続的に設定されていることを確認できます。</target>
        </trans-unit>
        <trans-unit id="deb0f65a2eba6ba7c9892f097c02bd25a54d7da6" translate="yes" xml:space="preserve">
          <source>Assuming you have your &lt;a href=&quot;development_environment#development-environment&quot;&gt;development environment&lt;/a&gt; set up, you can now build the code and test it.</source>
          <target state="translated">&lt;a href=&quot;development_environment#development-environment&quot;&gt;開発環境が&lt;/a&gt;セットアップされていると仮定すると、コードをビルドしてテストできます。</target>
        </trans-unit>
        <trans-unit id="0c95f65947e1bc255843aa11283635e0c0b35d4e" translate="yes" xml:space="preserve">
          <source>At &lt;em&gt;compile&lt;/em&gt; time, a distutils command is used to define the minimum and maximum features to support, based on user choice and compiler support. The appropriate macros are overlayed with the platform / architecture intrinsics, and the three loops are compiled.</source>
          <target state="translated">で&lt;em&gt;、コンパイル&lt;/em&gt;時間、distutilsのコマンドは、ユーザーの選択とコンパイラのサポートに基づいて、サポートへの最小と最大の機能を定義するために使用されます。適切なマクロがプラットフォーム/アーキテクチャの組み込み関数でオーバーレイされ、3つのループがコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="3efe13899297822b3fa2661ba300f5fe4b4634e5" translate="yes" xml:space="preserve">
          <source>At &lt;em&gt;runtime import&lt;/em&gt;, the CPU is probed for the set of supported intrinsic features. A mechanism is used to grab the pointer to the most appropriate function, and this will be the one called for the function.</source>
          <target state="translated">で&lt;em&gt;ランタイム輸入&lt;/em&gt;、CPUには対応して固有の特徴のセットのためにプローブされます。メカニズムは、最も適切な関数へのポインターを取得するために使用され、これが関数に対して呼び出されるものになります。</target>
        </trans-unit>
        <trans-unit id="0527fe789f4627f3a63d0bb5ba48121982fec81a" translate="yes" xml:space="preserve">
          <source>At each iteration of the loop, the &lt;em&gt;nin&lt;/em&gt; input objects are extracted from their object arrays and placed into an argument tuple, the Python &lt;em&gt;callable&lt;/em&gt; is called with the input arguments, and the nout outputs are placed into their object arrays.</source>
          <target state="translated">ループの各反復で、&lt;em&gt;ニン&lt;/em&gt;入力オブジェクトは、そのオブジェクトの配列から抽出され、引数のタプルに入れ、Pythonの&lt;em&gt;呼び出し可能は&lt;/em&gt;入力引数と呼ばれ、NOUT出力は、それらのオブジェクトの配列に配置されています。</target>
        </trans-unit>
        <trans-unit id="ca83daf60668ea69e76df727d7b2b16f815d0807" translate="yes" xml:space="preserve">
          <source>At the beginning of every &lt;a href=&quot;ufuncs#ufuncs-output-type&quot;&gt;ufunc&lt;/a&gt;, this method is called on the input object with the highest array priority, or the output object if one was specified. The output array is passed in and whatever is returned is passed to the ufunc. Subclasses inherit a default implementation of this method which simply returns the output array unmodified. Subclasses may opt to use this method to transform the output array into an instance of the subclass and update metadata before returning the array to the ufunc for computation.</source>
          <target state="translated">すべての&lt;a href=&quot;ufuncs#ufuncs-output-type&quot;&gt;ufunc&lt;/a&gt;の最初に、このメソッドは、配列の優先順位が最も高い入力オブジェクト、または指定されている場合は出力オブジェクトで呼び出されます。出力配列が渡され、返されるものはすべてufuncに渡されます。サブクラスは、このメソッドのデフォルトの実装を継承します。これは、変更されていない出力配列を返すだけです。サブクラスは、このメソッドを使用して出力配列をサブクラスのインスタンスに変換し、計算のために配列をufuncに返す前にメタデータを更新することを選択できます。</target>
        </trans-unit>
        <trans-unit id="12bc262a1577057e701d7713e64c78fa019c087b" translate="yes" xml:space="preserve">
          <source>At the core of every ufunc is a collection of type-specific functions that defines the basic functionality for each of the supported types. These functions must evaluate the underlying function</source>
          <target state="translated">すべての ufunc の中核には、サポートされている各型の基本的な機能を定義する型固有の関数のコレクションがあります。これらの関数は、基礎となる関数</target>
        </trans-unit>
        <trans-unit id="99499535512b6c181a0f3b43a50d805096cef5c2" translate="yes" xml:space="preserve">
          <source>At the core of every ufunc is a one-dimensional strided loop that implements the actual function for a specific type combination. When a ufunc is created, it is given a static list of inner loops and a corresponding list of type signatures over which the ufunc operates. The ufunc machinery uses this list to determine which inner loop to use for a particular case. You can inspect the &lt;a href=&quot;generated/numpy.ufunc.types#numpy.ufunc.types&quot;&gt;&lt;code&gt;.types&lt;/code&gt;&lt;/a&gt; attribute for a particular ufunc to see which type combinations have a defined inner loop and which output type they produce (&lt;a href=&quot;arrays.scalars#arrays-scalars-character-codes&quot;&gt;character codes&lt;/a&gt; are used in said output for brevity).</source>
          <target state="translated">すべてのufuncの中核は、特定の型の組み合わせの実際の関数を実装する1次元ストライドループです。 ufuncが作成されると、内部ループの静的リストと、ufuncが動作する型シグネチャの対応するリストが与えられます。 ufunc機構はこのリストを使用して、特定のケースで使用する内部ループを決定します。特定のufuncの&lt;a href=&quot;generated/numpy.ufunc.types#numpy.ufunc.types&quot;&gt; &lt;code&gt;.types&lt;/code&gt; &lt;/a&gt;属性を調べて、定義された内部ループを持つタイプの組み合わせと、それらが生成する出力タイプを確認できます（簡潔にするために、上記の出力では&lt;a href=&quot;arrays.scalars#arrays-scalars-character-codes&quot;&gt;文字コード&lt;/a&gt;を使用しています）。</target>
        </trans-unit>
        <trans-unit id="a696ebe70ac5ecb64adf92ab51868a20788e2014" translate="yes" xml:space="preserve">
          <source>At the core of the NumPy package, is the &lt;code&gt;ndarray&lt;/code&gt; object. This encapsulates &lt;em&gt;n&lt;/em&gt;-dimensional arrays of homogeneous data types, with many operations being performed in compiled code for performance. There are several important differences between NumPy arrays and the standard Python sequences:</source>
          <target state="translated">NumPyパッケージの中核には、 &lt;code&gt;ndarray&lt;/code&gt; オブジェクトがあります。これにより、同種のデータ型の&lt;em&gt;n&lt;/em&gt;次元配列がカプセル化され、パフォーマンスのためにコンパイルされたコードで多くの操作が実行されます。NumPy配列と標準のPythonシーケンスの間には、いくつかの重要な違いがあります。</target>
        </trans-unit>
        <trans-unit id="d886c7715daa7e13f2899ef3973389ec60967548" translate="yes" xml:space="preserve">
          <source>At the end of every &lt;a href=&quot;ufuncs#ufuncs-output-type&quot;&gt;ufunc&lt;/a&gt;, this method is called on the input object with the highest array priority, or the output object if one was specified. The ufunc-computed array is passed in and whatever is returned is passed to the user. Subclasses inherit a default implementation of this method, which transforms the array into a new instance of the object&amp;rsquo;s class. Subclasses may opt to use this method to transform the output array into an instance of the subclass and update metadata before returning the array to the user.</source>
          <target state="translated">すべての&lt;a href=&quot;ufuncs#ufuncs-output-type&quot;&gt;ufunc&lt;/a&gt;の最後に、このメソッドは、配列の優先順位が最も高い入力オブジェクト、または指定されている場合は出力オブジェクトで呼び出されます。ufuncで計算された配列が渡され、返されたものはすべてユーザーに渡されます。サブクラスは、このメソッドのデフォルト実装を継承します。これにより、配列がオブジェクトのクラスの新しいインスタンスに変換されます。サブクラスはこのメソッドを使用して、出力配列をサブクラスのインスタンスに変換し、メタデータを更新してから配列をユーザーに返すことができます。</target>
        </trans-unit>
        <trans-unit id="b5c2669a04a5d46f02634839c3dfc6c41bdd3f88" translate="yes" xml:space="preserve">
          <source>At the upper right of the page, click &lt;code&gt;Fork&lt;/code&gt;:</source>
          <target state="translated">ページの右上にある[ &lt;code&gt;Fork&lt;/code&gt; ]をクリックします。</target>
        </trans-unit>
        <trans-unit id="54f27a6635e66c8275db039314e451b39ca65192" translate="yes" xml:space="preserve">
          <source>At this point &lt;code&gt;arr + 3&lt;/code&gt; does not work.</source>
          <target state="translated">この時点で、 &lt;code&gt;arr + 3&lt;/code&gt; は機能しません。</target>
        </trans-unit>
        <trans-unit id="f7cf21779cc632f37ca6f9f1b905fd816410c5c5" translate="yes" xml:space="preserve">
          <source>Attribute statements:</source>
          <target state="translated">属性文。</target>
        </trans-unit>
        <trans-unit id="e30390c6b25519953f15954ce4132cba67fdd587" translate="yes" xml:space="preserve">
          <source>AttributeError</source>
          <target state="translated">AttributeError</target>
        </trans-unit>
        <trans-unit id="a6652617f2c799eb11ee727b16c5646c48af6905" translate="yes" xml:space="preserve">
          <source>Attributes</source>
          <target state="translated">Attributes</target>
        </trans-unit>
        <trans-unit id="cfe76174da05e50b979cc6188b003f45d1df8482" translate="yes" xml:space="preserve">
          <source>Attributes and properties of masked arrays</source>
          <target state="translated">マスクされた配列の属性とプロパティ</target>
        </trans-unit>
        <trans-unit id="75d3cd51a61f739cdedf79817eefc8974a835455" translate="yes" xml:space="preserve">
          <source>Attributes providing additional information:</source>
          <target state="translated">追加情報を提供する属性。</target>
        </trans-unit>
        <trans-unit id="1003414a3eb685608efbc345c0f83084c22559bd" translate="yes" xml:space="preserve">
          <source>Attributes that are properties and have their own docstrings can be simply listed by name:</source>
          <target state="translated">プロパティであり、それ自身のdocstringを持っている属性は、単に名前だけでリストアップすることができます。</target>
        </trans-unit>
        <trans-unit id="b8087185e5ee37cef4c337de5697d35d75d909fd" translate="yes" xml:space="preserve">
          <source>Attributes:</source>
          <target state="translated">Attributes:</target>
        </trans-unit>
        <trans-unit id="6854c23ffe094a9dcc2c7d18b7054597700c09d7" translate="yes" xml:space="preserve">
          <source>Author: Pearu Peterson &amp;lt;&lt;a href=&quot;mailto:pearu%40cens.ioc.ee&quot;&gt;pearu@cens.ioc.ee&lt;/a&gt;&amp;gt; Created: 11 January 2003</source>
          <target state="translated">著者：Pearu Peterson &amp;lt; &lt;a href=&quot;mailto:pearu%40cens.ioc.ee&quot;&gt;pearu@cens.ioc.ee&lt;/a&gt; &amp;gt;作成日：2003年1月11日</target>
        </trans-unit>
        <trans-unit id="d2a52548bd0852b99153ddd79a1f550f70674c7d" translate="yes" xml:space="preserve">
          <source>Authors</source>
          <target state="translated">Authors</target>
        </trans-unit>
        <trans-unit id="9a8e09e3b7e8024727baccc0a1e74a9673de3c0e" translate="yes" xml:space="preserve">
          <source>Automated Bin Selection Methods example, using 2 peak random data with 2000 points:</source>
          <target state="translated">2000点の2ピークランダムデータを用いた自動ビン選択方法の例。</target>
        </trans-unit>
        <trans-unit id="bfb122c45c152fbdf176456bb1bd4e6bc24c337e" translate="yes" xml:space="preserve">
          <source>Automatic Byte Offsets and Alignment</source>
          <target state="translated">自動バイトオフセットとアラインメント</target>
        </trans-unit>
        <trans-unit id="522d7710743316a9bb70282225a360f203660682" translate="yes" xml:space="preserve">
          <source>Automatic detection of forward incompatibilities</source>
          <target state="translated">順方向の非互換性を自動検出</target>
        </trans-unit>
        <trans-unit id="687034389bdc7cc4294c91418210f69e71c2ea75" translate="yes" xml:space="preserve">
          <source>Automatic extension module generation</source>
          <target state="translated">拡張モジュールの自動生成</target>
        </trans-unit>
        <trans-unit id="b2ebac8c965ff2e52dca0ea08eceaccc8803b780" translate="yes" xml:space="preserve">
          <source>Automatically generated reference documentation</source>
          <target state="translated">自動的に生成されるリファレンスドキュメント</target>
        </trans-unit>
        <trans-unit id="65efb82d6e37e5b9994108df57fecde86e561550" translate="yes" xml:space="preserve">
          <source>Auxiliary Data With Object Semantics</source>
          <target state="translated">オブジェクトセマンティクスによる補助データ</target>
        </trans-unit>
        <trans-unit id="b5d54069c98dcc2bb7ef53455746da49544d4c61" translate="yes" xml:space="preserve">
          <source>Available Typemaps</source>
          <target state="translated">利用可能なタイプマップ</target>
        </trans-unit>
        <trans-unit id="0eba0fa1e7377ce939b86cc49e664126d93a94fb" translate="yes" xml:space="preserve">
          <source>Available labels are:</source>
          <target state="translated">利用可能なラベルは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="b9ef456325fee29b959d2b71abeec2f41a07fee2" translate="yes" xml:space="preserve">
          <source>Available ufuncs</source>
          <target state="translated">利用可能なufuncs</target>
        </trans-unit>
        <trans-unit id="15f86c051ecf0b64e5f8cdc8c689552f42595942" translate="yes" xml:space="preserve">
          <source>Average</source>
          <target state="translated">Average</target>
        </trans-unit>
        <trans-unit id="00230b1d5c35405f7ca65ccbf60097d1ff75f793" translate="yes" xml:space="preserve">
          <source>Averages and variances</source>
          <target state="translated">平均と分散</target>
        </trans-unit>
        <trans-unit id="c283b762c8c40e64645901b30f41d8175d39891d" translate="yes" xml:space="preserve">
          <source>Avoid when possible; &lt;a href=&quot;https://docs.python.org/dev/library/pickle.html&quot;&gt;pickles&lt;/a&gt; are not secure against erroneous or maliciously constructed data.</source>
          <target state="translated">可能な場合は避けてください。&lt;a href=&quot;https://docs.python.org/dev/library/pickle.html&quot;&gt;ピクルス&lt;/a&gt;は、誤ったデータや悪意を持って作成されたデータに対して安全ではありません。</target>
        </trans-unit>
        <trans-unit id="e7a6dacf63a1600c6901329b8727cfba6197e8fd" translate="yes" xml:space="preserve">
          <source>Axes are defined for arrays with more than one dimension. A 2-dimensional array has two corresponding axes: the first running vertically downwards across rows (axis 0), and the second running horizontally across columns (axis 1).</source>
          <target state="translated">軸は,2次元以上の配列に対して定義されます.2次元配列には,2つの対応する軸があります:1つ目は行を垂直に下向きに横切る軸(軸0),2つ目は列を水平に横切る軸(軸1)です.</target>
        </trans-unit>
        <trans-unit id="260a17f609be1b620f1eb6b59b7945c255c81429" translate="yes" xml:space="preserve">
          <source>Axes in &lt;code&gt;a&lt;/code&gt; to reorder to the right, before inversion. If None (default), no reordering is done.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; の軸は、反転する前に、右に並べ替えます。None（デフォルト）の場合、並べ替えは行われません。</target>
        </trans-unit>
        <trans-unit id="db233fcb37135c7f09c5ffb89b7ba1fec760ef66" translate="yes" xml:space="preserve">
          <source>Axes over which &lt;code&gt;func&lt;/code&gt; is applied; the elements must be integers.</source>
          <target state="translated">&lt;code&gt;func&lt;/code&gt; が適用される軸。要素は整数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="3c7544c1215157a53157a59a39707d4b0bcf94df" translate="yes" xml:space="preserve">
          <source>Axes over which to calculate. Defaults to None, which shifts all axes.</source>
          <target state="translated">計算する軸。デフォルトは None で、すべての軸をシフトします。</target>
        </trans-unit>
        <trans-unit id="01251d80564e6fc5615a7911ad0e73434e304c26" translate="yes" xml:space="preserve">
          <source>Axes over which to compute the FFT.</source>
          <target state="translated">FFTを計算する軸。</target>
        </trans-unit>
        <trans-unit id="eae74832fcf1fa3443d947416920310bd08270f6" translate="yes" xml:space="preserve">
          <source>Axes over which to compute the FFT. If not given, the last &lt;code&gt;len(s)&lt;/code&gt; axes are used, or all axes if &lt;code&gt;s&lt;/code&gt; is also not specified.</source>
          <target state="translated">FFTを計算する軸。与えられていない場合は、最後の &lt;code&gt;len(s)&lt;/code&gt; 場合の軸が使用され、またはすべての軸されている &lt;code&gt;s&lt;/code&gt; も指定されていません。</target>
        </trans-unit>
        <trans-unit id="087a54cd73e6a93e216a09c22b970ec84185e189" translate="yes" xml:space="preserve">
          <source>Axes over which to compute the FFT. If not given, the last &lt;code&gt;len(s)&lt;/code&gt; axes are used, or all axes if &lt;code&gt;s&lt;/code&gt; is also not specified. Repeated indices in &lt;code&gt;axes&lt;/code&gt; means that the transform over that axis is performed multiple times.</source>
          <target state="translated">FFTを計算する軸。与えられていない場合は、最後の &lt;code&gt;len(s)&lt;/code&gt; 場合の軸が使用され、またはすべての軸されている &lt;code&gt;s&lt;/code&gt; も指定されていません。 &lt;code&gt;axes&lt;/code&gt; インデックスが繰り返されるということは、その軸での変換が複数回実行されることを意味します。</target>
        </trans-unit>
        <trans-unit id="c012449cfef6487dddab190f30ddad2f2e0316c1" translate="yes" xml:space="preserve">
          <source>Axes over which to compute the FFT. If not given, the last two axes are used. A repeated index in &lt;code&gt;axes&lt;/code&gt; means the transform over that axis is performed multiple times. A one-element sequence means that a one-dimensional FFT is performed.</source>
          <target state="translated">FFTを計算する軸。指定しない場合、最後の2つの軸が使用されます。 &lt;code&gt;axes&lt;/code&gt; 繰り返されるインデックスは、その軸に対する変換が複数回実行されることを意味します。1要素シーケンスとは、1次元のFFTが実行されることを意味します。</target>
        </trans-unit>
        <trans-unit id="c1bbe9559f43f27cc8c677ee579702aea02533b0" translate="yes" xml:space="preserve">
          <source>Axes over which to compute the IFFT. If not given, the last &lt;code&gt;len(s)&lt;/code&gt; axes are used, or all axes if &lt;code&gt;s&lt;/code&gt; is also not specified. Repeated indices in &lt;code&gt;axes&lt;/code&gt; means that the inverse transform over that axis is performed multiple times.</source>
          <target state="translated">IFFTを計算する軸。与えられていない場合は、最後の &lt;code&gt;len(s)&lt;/code&gt; 場合の軸が使用され、またはすべての軸されている &lt;code&gt;s&lt;/code&gt; も指定されていません。 &lt;code&gt;axes&lt;/code&gt; インデックスが繰り返されるということは、その軸に対する逆変換が複数回実行されることを意味します。</target>
        </trans-unit>
        <trans-unit id="b354616c4fe4a354f85531d5428c20c0b32f3c2f" translate="yes" xml:space="preserve">
          <source>Axes over which to compute the inverse FFT. If not given, the last &lt;code&gt;len(s)&lt;/code&gt; axes are used, or all axes if &lt;code&gt;s&lt;/code&gt; is also not specified. Repeated indices in &lt;code&gt;axes&lt;/code&gt; means that the inverse transform over that axis is performed multiple times.</source>
          <target state="translated">逆FFTを計算する軸。与えられていない場合は、最後の &lt;code&gt;len(s)&lt;/code&gt; 場合の軸が使用され、またはすべての軸されている &lt;code&gt;s&lt;/code&gt; も指定されていません。 &lt;code&gt;axes&lt;/code&gt; インデックスが繰り返されるということは、その軸に対する逆変換が複数回実行されることを意味します。</target>
        </trans-unit>
        <trans-unit id="8a99b64a4a7a7c7ead7b23b02c696f0da53ae319" translate="yes" xml:space="preserve">
          <source>Axes over which to shift. Default is None, which shifts all axes.</source>
          <target state="translated">シフトする軸。デフォルトは None で、すべての軸をシフトします。</target>
        </trans-unit>
        <trans-unit id="0a52967d9e9b8df8a4f8c170f8ca693ae8a86fe3" translate="yes" xml:space="preserve">
          <source>Axes to be used as the first and second axis of the 2-D sub-arrays from which the diagonals should be taken. Defaults are the first two axes of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">対角線を取得する2次元サブ配列の1番目と2番目の軸として使用する軸。デフォルトの最初の2つの軸です。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f303f8b434501d0a0e88a06f71ae6bf60e07440a" translate="yes" xml:space="preserve">
          <source>Axis along which &lt;code&gt;arr&lt;/code&gt; is sliced.</source>
          <target state="translated">&lt;code&gt;arr&lt;/code&gt; がスライスされる軸。</target>
        </trans-unit>
        <trans-unit id="eb47b635b568e5dba0343ed2ed07af3eb1c5f691" translate="yes" xml:space="preserve">
          <source>Axis along which logical OR is performed</source>
          <target state="translated">論理和が実行される軸</target>
        </trans-unit>
        <trans-unit id="09cfc91cd9019ea0548a0bc697b5fe1ac4febf1f" translate="yes" xml:space="preserve">
          <source>Axis along which the cumulative product is computed. By default the input is flattened.</source>
          <target state="translated">累積積が計算される軸。デフォルトでは、入力は平坦化されます。</target>
        </trans-unit>
        <trans-unit id="57187cefb1f2a69dac281d57460affb45a365e61" translate="yes" xml:space="preserve">
          <source>Axis along which the cumulative sum is computed. The default (None) is to compute the cumsum over the flattened array.</source>
          <target state="translated">累積和が計算される軸。デフォルト(None)は、平坦化された配列の累積和を計算します。</target>
        </trans-unit>
        <trans-unit id="f37486b57129451282a7b678277fa8169fe0110e" translate="yes" xml:space="preserve">
          <source>Axis along which the elements are counted. By default, give the total number of elements.</source>
          <target state="translated">要素をカウントする軸。デフォルトでは、要素の総数を指定します。</target>
        </trans-unit>
        <trans-unit id="b08197a0ff41e61316a0f60a6919ee14fb5fe98b" translate="yes" xml:space="preserve">
          <source>Axis along which the medians are computed. The default (None) is to compute the median along a flattened version of the array.</source>
          <target state="translated">中央値を計算する軸。デフォルト(None)は、配列の平坦化されたバージョンに沿って中央値を計算します。</target>
        </trans-unit>
        <trans-unit id="bc92a5f411fa4b8657deb697c80aca8e1f76fb85" translate="yes" xml:space="preserve">
          <source>Axis along which the operation must be performed.</source>
          <target state="translated">操作を実行しなければならない軸。</target>
        </trans-unit>
        <trans-unit id="f2cd71dae3fa50b163de963d5f5e4581028e17b5" translate="yes" xml:space="preserve">
          <source>Axis along which to average &lt;code&gt;a&lt;/code&gt;. If &lt;code&gt;None&lt;/code&gt;, averaging is done over the flattened array.</source>
          <target state="translated">を平均 &lt;code&gt;a&lt;/code&gt; 軸。 &lt;code&gt;None&lt;/code&gt; の場合、平均化はフラット化された配列に対して行われます。</target>
        </trans-unit>
        <trans-unit id="17667e8c77ab258d88774c70f62a92c1b9869875" translate="yes" xml:space="preserve">
          <source>Axis along which to average &lt;code&gt;a&lt;/code&gt;. If None, averaging is done over the flattened array.</source>
          <target state="translated">平均化 &lt;code&gt;a&lt;/code&gt; 軸。Noneの場合、平均化はフラット化された配列に対して実行されます。</target>
        </trans-unit>
        <trans-unit id="6740a47c78c530ff5565f890ca7a6510d66b94b6" translate="yes" xml:space="preserve">
          <source>Axis along which to count. If None (default), a flattened version of the array is used.</source>
          <target state="translated">カウントする軸。None(デフォルト)の場合は、平坦化された配列が使用されます。</target>
        </trans-unit>
        <trans-unit id="87e6cb227cab73030094d0bab3690d5e44d50da1" translate="yes" xml:space="preserve">
          <source>Axis along which to find the peaks. By default, flatten the array. &lt;code&gt;axis&lt;/code&gt; may be negative, in which case it counts from the last to the first axis.</source>
          <target state="translated">ピークを見つけるための軸。デフォルトでは、アレイをフラット化します。 &lt;code&gt;axis&lt;/code&gt; は負の場合もあり、その場合、最後の軸から最初の軸までカウントされます。</target>
        </trans-unit>
        <trans-unit id="d012a76459484bfd8767b22b0537d0b22d4d11bb" translate="yes" xml:space="preserve">
          <source>Axis along which to find the peaks. If None (default) the flattened array is used.</source>
          <target state="translated">ピークを見つける軸。None(デフォルト)の場合、平坦化された配列が使用されます。</target>
        </trans-unit>
        <trans-unit id="c855b308fb59a9f63969a5e9a73073df7701d3a8" translate="yes" xml:space="preserve">
          <source>Axis along which to insert &lt;code&gt;values&lt;/code&gt;. If &lt;code&gt;axis&lt;/code&gt; is None then &lt;code&gt;arr&lt;/code&gt; is flattened first.</source>
          <target state="translated">&lt;code&gt;values&lt;/code&gt; を挿入する軸。 &lt;code&gt;axis&lt;/code&gt; がNoneの場合、 &lt;code&gt;arr&lt;/code&gt; が最初に平坦化されます。</target>
        </trans-unit>
        <trans-unit id="caa670fb62ad34335b9428afd9953d664aefbfc6" translate="yes" xml:space="preserve">
          <source>Axis along which to operate. By default flattened input is used.</source>
          <target state="translated">操作する軸。デフォルトではフラット入力が使用されます。</target>
        </trans-unit>
        <trans-unit id="1612a72f0d3b6ca5a9a80a269a8a766d4f4346ff" translate="yes" xml:space="preserve">
          <source>Axis along which to operate. By default, &lt;code&gt;axis&lt;/code&gt; is None and the flattened input is used.</source>
          <target state="translated">動作する軸。デフォルトでは、 &lt;code&gt;axis&lt;/code&gt; はなしであり、平坦化された入力が使用されます。</target>
        </trans-unit>
        <trans-unit id="dfc23123538404f83aba951929e9f61fafacf779" translate="yes" xml:space="preserve">
          <source>Axis along which to perform the operation. Default is None.</source>
          <target state="translated">操作を実行する軸。デフォルトは None です。</target>
        </trans-unit>
        <trans-unit id="f599b7c76d66ef3380a35805a50ac6efed5828ce" translate="yes" xml:space="preserve">
          <source>Axis along which to perform the operation. If None (default), applies to a flattened version of the array, and this is the same as &lt;a href=&quot;numpy.ma.flatnotmasked_contiguous#numpy.ma.flatnotmasked_contiguous&quot;&gt;&lt;code&gt;flatnotmasked_contiguous&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">操作を実行する軸。None（デフォルト）の場合、フラット化されたバージョンの配列に適用され、これは&lt;a href=&quot;numpy.ma.flatnotmasked_contiguous#numpy.ma.flatnotmasked_contiguous&quot;&gt; &lt;code&gt;flatnotmasked_contiguous&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="04c94dfe1278eba9030646d853545708152162d2" translate="yes" xml:space="preserve">
          <source>Axis along which to perform the operation. If None (default), applies to a flattened version of the array.</source>
          <target state="translated">操作を実行する軸。None (デフォルト)の場合、平坦化された配列に適用されます。</target>
        </trans-unit>
        <trans-unit id="504f2a8eb88761fe60f8368b4521f8ae3d7cee4e" translate="yes" xml:space="preserve">
          <source>Axis along which to perform the operation. If None, applies to a flattened version of the array.</source>
          <target state="translated">操作を実行する軸。Noneの場合、配列の平坦化バージョンに適用されます。</target>
        </trans-unit>
        <trans-unit id="152709e5051b3ce45dda1f386ffce54b5252f137" translate="yes" xml:space="preserve">
          <source>Axis along which to sort. Default is -1, which means sort along the last axis.</source>
          <target state="translated">ソートする軸。デフォルトは -1 で、最後の軸に沿ってソートすることを意味します。</target>
        </trans-unit>
        <trans-unit id="2188a35fbb2aa8c603498f4b78d1698cebdd5a7d" translate="yes" xml:space="preserve">
          <source>Axis along which to sort. If None, the array is flattened before sorting. The default is -1, which sorts along the last axis.</source>
          <target state="translated">ソートする軸。None の場合、配列はソートする前に平坦化されます。デフォルトは -1 で、最後の軸に沿ってソートします。</target>
        </trans-unit>
        <trans-unit id="740a6ece80316cdabae954a87f619b8a229d3521" translate="yes" xml:space="preserve">
          <source>Axis along which to sort. If None, the default, the flattened array is used.</source>
          <target state="translated">ソートする軸。Noneの場合、デフォルトでは平坦化された配列が使用されます。</target>
        </trans-unit>
        <trans-unit id="d4ba2932956beb23c342eb9374fa565cb3b55723" translate="yes" xml:space="preserve">
          <source>Axis along which to sort. The default is -1 (the last axis). If None, the flattened array is used.</source>
          <target state="translated">ソートする軸。デフォルトは -1 (最後の軸)です。None の場合は、平坦化された配列が使用されます。</target>
        </trans-unit>
        <trans-unit id="bf13afc2432793901330c8c7a32dd664b93fb6da" translate="yes" xml:space="preserve">
          <source>Axis along which to take slices. If None (default), work on the flattened array.</source>
          <target state="translated">スライスを取る軸。None(デフォルト)の場合、平坦化された配列で作業を行います。</target>
        </trans-unit>
        <trans-unit id="862dd8c4bcf2d6630f10d14b83366d28de07835e" translate="yes" xml:space="preserve">
          <source>Axis along which unwrap will operate, default is the last axis.</source>
          <target state="translated">アンラップが動作する軸に沿って、デフォルトは最後の軸です。</target>
        </trans-unit>
        <trans-unit id="2642370e7acd3a38fa3e5ae2e4852e710ae2493f" translate="yes" xml:space="preserve">
          <source>Axis of &lt;code&gt;a&lt;/code&gt; that defines the vector(s). By default, the last axis.</source>
          <target state="translated">軸ベクトル（複数可）を定義します。デフォルトでは、最後の軸。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ac79a24e9b27340a01d757c607f815c179d09b07" translate="yes" xml:space="preserve">
          <source>Axis of &lt;code&gt;b&lt;/code&gt; that defines the vector(s). By default, the last axis.</source>
          <target state="translated">ベクトルを定義する &lt;code&gt;b&lt;/code&gt; の軸。デフォルトでは、最後の軸。</target>
        </trans-unit>
        <trans-unit id="f367b3271f5fcf8c75672a1e31a99c742130492f" translate="yes" xml:space="preserve">
          <source>Axis of &lt;code&gt;c&lt;/code&gt; containing the cross product vector(s). Ignored if both input vectors have dimension 2, as the return is scalar. By default, the last axis.</source>
          <target state="translated">外積ベクトルを含む &lt;code&gt;c&lt;/code&gt; の軸。戻り値がスカラーであるため、両方の入力ベクトルの次元が2の場合は無視されます。デフォルトでは、最後の軸。</target>
        </trans-unit>
        <trans-unit id="73455e870dee7c0562b8878e31766028fce2291e" translate="yes" xml:space="preserve">
          <source>Axis or axes along which a logical AND reduction is performed. The default (&lt;code&gt;axis&lt;/code&gt; = &lt;code&gt;None&lt;/code&gt;) is to perform a logical AND over all the dimensions of the input array. &lt;code&gt;axis&lt;/code&gt; may be negative, in which case it counts from the last to the first axis.</source>
          <target state="translated">論理AND削減が実行される軸。デフォルト（ &lt;code&gt;axis&lt;/code&gt; = &lt;code&gt;None&lt;/code&gt; ）では、入力配列のすべての次元に対して論理ANDを実行します。 &lt;code&gt;axis&lt;/code&gt; は負の場合もあり、その場合、最後の軸から最初の軸までカウントされます。</target>
        </trans-unit>
        <trans-unit id="10ee68577b50399a741722b3f075be540558e59c" translate="yes" xml:space="preserve">
          <source>Axis or axes along which a logical AND reduction is performed. The default (&lt;code&gt;axis=None&lt;/code&gt;) is to perform a logical AND over all the dimensions of the input array. &lt;code&gt;axis&lt;/code&gt; may be negative, in which case it counts from the last to the first axis.</source>
          <target state="translated">論理AND削減が実行される1つまたは複数の軸。デフォルト（ &lt;code&gt;axis=None&lt;/code&gt; ）は、入力配列のすべての次元に対して論理ANDを実行することです。 &lt;code&gt;axis&lt;/code&gt; は負の場合があり、その場合、最後の軸から最初の軸までカウントされます。</target>
        </trans-unit>
        <trans-unit id="f611b0275c8907be5ddfd942eef1d1cb490e3bfa" translate="yes" xml:space="preserve">
          <source>Axis or axes along which a logical OR reduction is performed. The default (&lt;code&gt;axis&lt;/code&gt; = &lt;code&gt;None&lt;/code&gt;) is to perform a logical OR over all the dimensions of the input array. &lt;code&gt;axis&lt;/code&gt; may be negative, in which case it counts from the last to the first axis.</source>
          <target state="translated">論理OR削減が実行される軸。デフォルト（ &lt;code&gt;axis&lt;/code&gt; = &lt;code&gt;None&lt;/code&gt; ）では、入力配列のすべての次元に対して論理ORを実行します。 &lt;code&gt;axis&lt;/code&gt; は負の場合もあり、その場合、最後の軸から最初の軸までカウントされます。</target>
        </trans-unit>
        <trans-unit id="4b3cd50c25bcf6114d5dbf62c339109576c970bf" translate="yes" xml:space="preserve">
          <source>Axis or axes along which a logical OR reduction is performed. The default (&lt;code&gt;axis=None&lt;/code&gt;) is to perform a logical OR over all the dimensions of the input array. &lt;code&gt;axis&lt;/code&gt; may be negative, in which case it counts from the last to the first axis.</source>
          <target state="translated">論理OR削減が実行される1つまたは複数の軸。デフォルト（ &lt;code&gt;axis=None&lt;/code&gt; ）は、入力配列のすべての次元に対して論理ORを実行することです。 &lt;code&gt;axis&lt;/code&gt; は負の場合があり、その場合、最後の軸から最初の軸までカウントされます。</target>
        </trans-unit>
        <trans-unit id="9fd47f9900eba5a8ae95abac9ad38d16026ca50d" translate="yes" xml:space="preserve">
          <source>Axis or axes along which a product is performed. The default, axis=None, will calculate the product of all the elements in the input array. If axis is negative it counts from the last to the first axis.</source>
          <target state="translated">積が実行される軸または軸。デフォルトの axis=None は、入力配列内のすべての要素の積を計算します。axisが負の場合は、最後の軸から最初の軸までカウントされます。</target>
        </trans-unit>
        <trans-unit id="be576580b5bc0f979cac29a5b9d9045456b366f7" translate="yes" xml:space="preserve">
          <source>Axis or axes along which a reduction is performed. The default (&lt;code&gt;axis&lt;/code&gt; = 0) is perform a reduction over the first dimension of the input array. &lt;code&gt;axis&lt;/code&gt; may be negative, in which case it counts from the last to the first axis.</source>
          <target state="translated">削減が実行される軸。デフォルト（ &lt;code&gt;axis&lt;/code&gt; = 0）は、入力配列の最初の次元に対して縮小を実行します。 &lt;code&gt;axis&lt;/code&gt; は負の場合もあり、その場合、最後の軸から最初の軸までカウントされます。</target>
        </trans-unit>
        <trans-unit id="a9d8568517293b16cabcf73bd06fbc68a72003cd" translate="yes" xml:space="preserve">
          <source>Axis or axes along which a sum is performed. The default, axis=None, will sum all of the elements of the input array. If axis is negative it counts from the last to the first axis.</source>
          <target state="translated">和が実行される軸または軸。デフォルトの axis=None は、入力配列のすべての要素を合計します。axis が負の場合は、最後の軸から最初の軸までカウントされます。</target>
        </trans-unit>
        <trans-unit id="7cc8bc628160032ea1ebe6f16101b997f0306e3e" translate="yes" xml:space="preserve">
          <source>Axis or axes along which elements are shifted. By default, the array is flattened before shifting, after which the original shape is restored.</source>
          <target state="translated">要素をシフトさせる軸または軸。デフォルトでは、配列はシフトする前に平坦化され、その後元の形状に復元されます。</target>
        </trans-unit>
        <trans-unit id="0e425003e67ef9bdd8af0004538626cffe9c1582" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the count is performed. The default (&lt;code&gt;axis&lt;/code&gt; = &lt;code&gt;None&lt;/code&gt;) performs the count over all the dimensions of the input array. &lt;code&gt;axis&lt;/code&gt; may be negative, in which case it counts from the last to the first axis.</source>
          <target state="translated">カウントが実行される軸。デフォルト（ &lt;code&gt;axis&lt;/code&gt; = &lt;code&gt;None&lt;/code&gt; ）は、入力配列のすべての次元でカウントを実行します。 &lt;code&gt;axis&lt;/code&gt; は負の場合もあり、その場合、最後の軸から最初の軸までカウントされます。</target>
        </trans-unit>
        <trans-unit id="dbd8b445b81cd5436ce710f441b84e722e566a56" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the count is performed. The default, None, performs the count over all the dimensions of the input array. &lt;code&gt;axis&lt;/code&gt; may be negative, in which case it counts from the last to the first axis.</source>
          <target state="translated">カウントが実行される1つまたは複数の軸。デフォルトのNoneは、入力配列のすべての次元でカウントを実行します。 &lt;code&gt;axis&lt;/code&gt; は負の場合があり、その場合、最後の軸から最初の軸までカウントされます。</target>
        </trans-unit>
        <trans-unit id="337ec9c050b4ae190316c405d645be292f57618f" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the maximum is computed. The default is to compute the maximum of the flattened array.</source>
          <target state="translated">最大値が計算される軸または軸。デフォルトでは,平坦化された配列の最大値を計算します.</target>
        </trans-unit>
        <trans-unit id="5bcbcdbcc90358e775edd4243e64cbf53abf5bcb" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the means are computed. The default is to compute the mean of the flattened array.</source>
          <target state="translated">平均が計算される軸または軸。デフォルトでは、平坦化された配列の平均を計算します。</target>
        </trans-unit>
        <trans-unit id="81e7f835d919d359ddd019861026589dd953700f" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the medians are computed. The default is to compute the median along a flattened version of the array. A sequence of axes is supported since version 1.9.0.</source>
          <target state="translated">中央値を計算する軸または軸。デフォルトは、配列の平坦化されたバージョンに沿ってメディアンを計算します。バージョン1.9.0以降、軸のシーケンスがサポートされています。</target>
        </trans-unit>
        <trans-unit id="86845400b54274fa2252847f24187b5fc174bc52" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the minimum is computed. The default is to compute the minimum of the flattened array.</source>
          <target state="translated">最小値が計算される軸または軸。デフォルトでは、平坦化された配列の最小値を計算します。</target>
        </trans-unit>
        <trans-unit id="afcadb3cc3e2b57bd1839f95d5290aac2075b609" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the percentiles are computed. The default is to compute the percentile(s) along a flattened version of the array.</source>
          <target state="translated">パーセンタイルが計算される軸または軸。デフォルトでは、平坦化された配列に沿ってパーセンタイルを計算します。</target>
        </trans-unit>
        <trans-unit id="1383f75934b288777f915d7bd0d8e7d4bc49532a" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the product is computed. The default is to compute the product of the flattened array.</source>
          <target state="translated">積が計算される軸または軸。デフォルトでは、平坦化された配列の積を計算します。</target>
        </trans-unit>
        <trans-unit id="dc86583a236f0e917d6fd47accfd6b2805fa40e8" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the quantiles are computed. The default is to compute the quantile(s) along a flattened version of the array.</source>
          <target state="translated">分位値が計算される軸または軸。デフォルトでは、配列の平坦化されたバージョンに沿って分位値を計算します。</target>
        </trans-unit>
        <trans-unit id="c32c668e0dd59a8b292f11f9182ecb083fc9a19d" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the sliding window is applied. By default, the sliding window is applied to all axes and &lt;code&gt;window_shape[i]&lt;/code&gt; will refer to axis &lt;code&gt;i&lt;/code&gt; of &lt;code&gt;x&lt;/code&gt;. If &lt;code&gt;axis&lt;/code&gt; is given as a &lt;code&gt;tuple of int&lt;/code&gt;, &lt;code&gt;window_shape[i]&lt;/code&gt; will refer to the axis &lt;code&gt;axis[i]&lt;/code&gt; of &lt;code&gt;x&lt;/code&gt;. Single integers &lt;code&gt;i&lt;/code&gt; are treated as if they were the tuple &lt;code&gt;(i,)&lt;/code&gt;.</source>
          <target state="translated">スライディングウィンドウが適用される1つまたは複数の軸。デフォルトでは、スライディングウィンドウはすべての軸に適用され、 &lt;code&gt;window_shape[i]&lt;/code&gt; は &lt;code&gt;x&lt;/code&gt; の軸 &lt;code&gt;i&lt;/code&gt; を参照します。 &lt;code&gt;axis&lt;/code&gt; が &lt;code&gt;tuple of int&lt;/code&gt; として指定されている場合、 &lt;code&gt;window_shape[i]&lt;/code&gt; &lt;code&gt;axis[i]&lt;/code&gt; は &lt;code&gt;x&lt;/code&gt; の軸axis [i]を参照します。単一の整数 &lt;code&gt;i&lt;/code&gt; は、タプル &lt;code&gt;(i,)&lt;/code&gt; かのように扱われます。</target>
        </trans-unit>
        <trans-unit id="ff0198667d8f16fd97a42b385598004387813742" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the standard deviation is computed. The default is to compute the standard deviation of the flattened array.</source>
          <target state="translated">標準偏差が計算される軸または軸。デフォルトでは、平坦化された配列の標準偏差を計算します。</target>
        </trans-unit>
        <trans-unit id="561888a8d151a5f97b2ece2d51ce899a36bbfbdf" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the sum is computed. The default is to compute the sum of the flattened array.</source>
          <target state="translated">合計が計算される軸または軸。デフォルトでは、平坦化された配列の合計を計算します。</target>
        </trans-unit>
        <trans-unit id="949a7d6d27806e44a3241bd974384af685d26396" translate="yes" xml:space="preserve">
          <source>Axis or axes along which the variance is computed. The default is to compute the variance of the flattened array.</source>
          <target state="translated">分散が計算される軸または軸。デフォルトでは、平坦化された配列の分散を計算します。</target>
        </trans-unit>
        <trans-unit id="daa1ea5e7ee9d15405e9d59d22ce1b86e2982a0b" translate="yes" xml:space="preserve">
          <source>Axis or axes along which to average &lt;code&gt;a&lt;/code&gt;. The default, axis=None, will average over all of the elements of the input array. If axis is negative it counts from the last to the first axis.</source>
          <target state="translated">を平均化 &lt;code&gt;a&lt;/code&gt; 1つまたは複数の軸。デフォルトのaxis = Noneは、入力配列のすべての要素の平均です。軸が負の場合、最後の軸から最初の軸までカウントされます。</target>
        </trans-unit>
        <trans-unit id="64370fd7391d23015a65d6e00207ab3ff57c0028" translate="yes" xml:space="preserve">
          <source>Axis or axes along which to flip over. The default, axis=None, will flip over all of the axes of the input array. If axis is negative it counts from the last to the first axis.</source>
          <target state="translated">反転させる軸または軸を指定します。デフォルトの axis=None は、入力配列のすべての軸を反転します。axis が負の場合、最後の軸から最初の軸までカウントされます。</target>
        </trans-unit>
        <trans-unit id="f2bf5799ae5ef9d1cdddea7d865553db9614fd21" translate="yes" xml:space="preserve">
          <source>Axis or axes along which to operate. By default, flattened input is used.</source>
          <target state="translated">操作する軸または軸。デフォルトでは、平坦化された入力が使用されます。</target>
        </trans-unit>
        <trans-unit id="f257ca43f52b8d212133752a1e0cef3f157fcc12" translate="yes" xml:space="preserve">
          <source>Axis or tuple of axes along which to count non-zeros. Default is None, meaning that non-zeros will be counted along a flattened version of &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">非ゼロをカウントする軸または軸のタプル。デフォルトでは非ゼロの平坦化されたバージョンに沿ってカウントされることを意味し、Noneです。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1dfdd6be5ea8d2b943040ace17a9b289e52760e7" translate="yes" xml:space="preserve">
          <source>Axis over which the anomalies are taken. The default is to use the mean of the flattened array as reference.</source>
          <target state="translated">異常値を取る軸。デフォルトでは、平坦化された配列の平均を参照として使用します。</target>
        </trans-unit>
        <trans-unit id="5a28ddd98da60a547b5ae35ef6abe54e89e91508" translate="yes" xml:space="preserve">
          <source>Axis over which the derivative is taken. (Default: 0).</source>
          <target state="translated">微分が取られる軸。(デフォルト:0)。</target>
        </trans-unit>
        <trans-unit id="ca8db3e3878b22dd385e21680a7f2404ba4af59f" translate="yes" xml:space="preserve">
          <source>Axis over which the integral is taken. (Default: 0).</source>
          <target state="translated">積分が取られる軸。(デフォルト:0)。</target>
        </trans-unit>
        <trans-unit id="7238aa3702fcf05542c14de94bdcecf60c8463af" translate="yes" xml:space="preserve">
          <source>Axis over which to compute the FFT. If not given, the last axis is used.</source>
          <target state="translated">FFTを計算する軸。指定されていない場合は、最後の軸が使用されます。</target>
        </trans-unit>
        <trans-unit id="78aed7a81e841b649e307d86af83f2a27f772253" translate="yes" xml:space="preserve">
          <source>Axis over which to compute the inverse DFT. If not given, the last axis is used.</source>
          <target state="translated">逆DFTを計算する軸。指定されていない場合は、最後の軸が使用されます。</target>
        </trans-unit>
        <trans-unit id="1994028401ccc8c25a36ddcd64e63635d1053d3a" translate="yes" xml:space="preserve">
          <source>Axis over which to compute the inverse FFT. If not given, the last axis is used.</source>
          <target state="translated">逆FFTを計算する軸。指定されていない場合は、最後の軸が使用されます。</target>
        </trans-unit>
        <trans-unit id="7fc8d289aafc37f1ce906424ecc35f2c72d9a34f" translate="yes" xml:space="preserve">
          <source>Axis to be indirectly sorted. By default, sort over the last axis.</source>
          <target state="translated">間接的にソートする軸。デフォルトでは、最後の軸の上にソートされます。</target>
        </trans-unit>
        <trans-unit id="3e1ca61bed45345ef5098f13d05c389833be3df8" translate="yes" xml:space="preserve">
          <source>Axis to be used as the first axis of the 2-D sub-arrays from which the diagonals should be taken. Defaults to first axis (0).</source>
          <target state="translated">対角線を取るべき2次元サブアレイの最初の軸として使用される軸。デフォルトは最初の軸(0)。</target>
        </trans-unit>
        <trans-unit id="45f7ee7208a9fb7d4e4732ffbd5f973fe0a479d3" translate="yes" xml:space="preserve">
          <source>Axis to be used as the second axis of the 2-D sub-arrays from which the diagonals should be taken. Defaults to second axis (1).</source>
          <target state="translated">対角線を取るべき2次元サブアレイの2番目の軸として使用される軸。デフォルトは2番目の軸(1)です。</target>
        </trans-unit>
        <trans-unit id="ae4f281df5a5d0ff3cad6371f76d5c29b6d953ec" translate="yes" xml:space="preserve">
          <source>B</source>
          <target state="translated">B</target>
        </trans-unit>
        <trans-unit id="c7781e5925cc1162bf57ca801ea173a8789aefd5" translate="yes" xml:space="preserve">
          <source>BEHAVED and C_CONTIGUOUS.</source>
          <target state="translated">BEHAVEDとC_CONTIGUOUS。</target>
        </trans-unit>
        <trans-unit id="eca3180a6c33b0a38f6f76fa644f63211aa1f14e" translate="yes" xml:space="preserve">
          <source>BEHAVED and F_CONTIGUOUS and not C_CONTIGUOUS.</source>
          <target state="translated">BEHAVEDとF_CONTIGUOUSで、C_CONTIGUOUSではありません。</target>
        </trans-unit>
        <trans-unit id="c7243d04c977df0309eee7b50ccaddc2665154ee" translate="yes" xml:space="preserve">
          <source>BLAS</source>
          <target state="translated">BLAS</target>
        </trans-unit>
        <trans-unit id="bcd158bb5feaae9038808e3b55d2a031b8ba7709" translate="yes" xml:space="preserve">
          <source>BLAS (NetLIB)</source>
          <target state="translated">BLAS (NetLIB)</target>
        </trans-unit>
        <trans-unit id="dcf8c920edb3ad9eb9b92f8b67ba19eaaa1b8c86" translate="yes" xml:space="preserve">
          <source>BLIS</source>
          <target state="translated">BLIS</target>
        </trans-unit>
        <trans-unit id="cf867b1a06ac32f25a3a53b5cac69625adf84e3c" translate="yes" xml:space="preserve">
          <source>BLIS support in &lt;code&gt;numpy.distutils&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;numpy.distutils&lt;/code&gt; でのBLISサポート</target>
        </trans-unit>
        <trans-unit id="214e501b88ef4fd6dfd2e0ceb3d07f872f3aa657" translate="yes" xml:space="preserve">
          <source>BSD / Solaris</source>
          <target state="translated">BSD/Solaris</target>
        </trans-unit>
        <trans-unit id="64dd60fe1a049fe6db3eb1369dec2e42bf428e21" translate="yes" xml:space="preserve">
          <source>Background</source>
          <target state="translated">Background</target>
        </trans-unit>
        <trans-unit id="bd452a7ea759269a521e984eabecb645ce4b2ea6" translate="yes" xml:space="preserve">
          <source>Background information</source>
          <target state="translated">背景情報</target>
        </trans-unit>
        <trans-unit id="090a12d667902964e48f38714b38e1c7c7410ac2" translate="yes" xml:space="preserve">
          <source>Backport Pull Requests</source>
          <target state="translated">バックポートのプルリクエスト</target>
        </trans-unit>
        <trans-unit id="304c9bb8acb18cf698a66eac9714c36a88110784" translate="yes" xml:space="preserve">
          <source>Backporting</source>
          <target state="translated">Backporting</target>
        </trans-unit>
        <trans-unit id="850de91aa7213a4adf4d94aeab2caaf4d100f909" translate="yes" xml:space="preserve">
          <source>Backporting is the process of copying new feature/fixes committed in &lt;a href=&quot;https://github.com/numpy/numpy&quot;&gt;numpy/master&lt;/a&gt; back to stable release branches. To do this you make a branch off the branch you are backporting to, cherry pick the commits you want from &lt;code&gt;numpy/master&lt;/code&gt;, and then submit a pull request for the branch containing the backport.</source>
          <target state="translated">バック&lt;a href=&quot;https://github.com/numpy/numpy&quot;&gt;ポート&lt;/a&gt;は、numpy / masterでコミットされた新しい機能/修正を安定したリリースブランチにコピーして戻すプロセスです。これを行うには、バックポート先のブランチからブランチを作成し、 &lt;code&gt;numpy/master&lt;/code&gt; から必要なコミットをチェリーピックしてから、バックポートを含むブランチのプルリクエストを送信します。</target>
        </trans-unit>
        <trans-unit id="7e9bfe183c1510e40aa465bc59796172c1a8f60e" translate="yes" xml:space="preserve">
          <source>Bad or missing data can be cleanly ignored by putting it in a masked array, which has an internal boolean array indicating invalid entries. Operations with masked arrays ignore these entries.</source>
          <target state="translated">悪いデータや欠落したデータは、マスキングされた配列に入れることできれいに無視することができます。マスキングされた配列は、無効なエントリを示すブーリアン配列を内部に持っています。マスキングされた配列での操作は、これらのエントリを無視します。</target>
        </trans-unit>
        <trans-unit id="172132c5b69b62eb861ca29a9ea486edc3f7219f" translate="yes" xml:space="preserve">
          <source>Bare metal, wrap your own C-code manually.</source>
          <target state="translated">ベアメタル、自分のCコードを手動で包む。</target>
        </trans-unit>
        <trans-unit id="53740dccbfb785b89a2a2e2837295960b3f62362" translate="yes" xml:space="preserve">
          <source>Base Class for generic BitGenerators, which provide a stream of random bits based on different algorithms.</source>
          <target state="translated">さまざまなアルゴリズムに基づいたランダムビットのストリームを提供する汎用ビット生成器の基底クラス。</target>
        </trans-unit>
        <trans-unit id="2f03f2251cbc22f3d11027c3e6199900a02163b7" translate="yes" xml:space="preserve">
          <source>Base Class for generic BitGenerators, which provide a stream of random bits based on different algorithms. Must be overridden.</source>
          <target state="translated">様々なアルゴリズムに基づいたランダムビットのストリームを提供する汎用ビット生成器の基底クラス。オーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="18c896688f02b72b07f8b6644f275710e91f33b7" translate="yes" xml:space="preserve">
          <source>Base class</source>
          <target state="translated">基底クラス</target>
        </trans-unit>
        <trans-unit id="c559e4e184dd4d014a0b5060ba07110daeea6a9f" translate="yes" xml:space="preserve">
          <source>Base class for all polynomial types.</source>
          <target state="translated">すべての多項式型の基底クラス.</target>
        </trans-unit>
        <trans-unit id="6149d0f0d497f5c19a312e242e3099f49c4e1828" translate="yes" xml:space="preserve">
          <source>Base class for errors in this module.</source>
          <target state="translated">このモジュールのエラーの基底クラス。</target>
        </trans-unit>
        <trans-unit id="6c3e6ca54a7a88ced88fed404dda8485677d4e2e" translate="yes" xml:space="preserve">
          <source>Base class for numpy scalar types.</source>
          <target state="translated">numpyスカラ型の基底クラス.</target>
        </trans-unit>
        <trans-unit id="860a1492914588f337f184bd4823757e7c5382ef" translate="yes" xml:space="preserve">
          <source>Base object if memory is from some other object.</source>
          <target state="translated">メモリが他のオブジェクトからのものである場合は、ベースとなるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="e272affdfa292522d2f5ac68c3e4ab276db10b62" translate="yes" xml:space="preserve">
          <source>Base of natural logarithm (</source>
          <target state="translated">自然対数の基底(</target>
        </trans-unit>
        <trans-unit id="65a08d51a2e698f7325209df48e279e52d580030" translate="yes" xml:space="preserve">
          <source>Base-2 logarithm of &lt;code&gt;2**x1 + 2**x2&lt;/code&gt;. This is a scalar if both &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; are scalars.</source>
          <target state="translated">&lt;code&gt;2**x1 + 2**x2&lt;/code&gt; 2を底とする対数。 &lt;code&gt;x1&lt;/code&gt; と &lt;code&gt;x2&lt;/code&gt; の両方がスカラーの場合、これはスカラーです。</target>
        </trans-unit>
        <trans-unit id="dc8e13711f25f1ed77c835a90063cf7df6b684db" translate="yes" xml:space="preserve">
          <source>Base-2 logarithm of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の 2を底とする対数。</target>
        </trans-unit>
        <trans-unit id="99798b5608dba0e80521a63a27ddafba29b89b07" translate="yes" xml:space="preserve">
          <source>Base-2 logarithm of &lt;code&gt;x&lt;/code&gt;. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の 2を底とする対数。 &lt;code&gt;x&lt;/code&gt; がスカラーの場合、これはスカラーです。</target>
        </trans-unit>
        <trans-unit id="38987414db4d1bf81908059ba9b136da28c33714" translate="yes" xml:space="preserve">
          <source>Base-n representations</source>
          <target state="translated">ベースnの表現</target>
        </trans-unit>
        <trans-unit id="0bff1548231bd093df6d8bc4bf7a28a9733d2f0e" translate="yes" xml:space="preserve">
          <source>Based on the above characterization, &amp;ldquo;high-priority&amp;rdquo; changes (i.e. fixing technical inaccuracies, broken links, etc.) can be proposed via pull requests directly as they are straightforward to review. Other changes should be raised as issues first so that the discussion can happen before you make major modifications, which in principle saves you from wasting your time on undesired changes.</source>
          <target state="translated">上記の特性に基づいて、「優先度の高い」変更（つまり、技術的な不正確さの修正、リンクの切断など）は、簡単に確認できるため、プルリクエストを介して直接提案できます。大きな変更を加える前に話し合いができるように、他の変更を最初に問題として提起する必要があります。これにより、原則として、不要な変更に時間を無駄にすることがなくなります。</target>
        </trans-unit>
        <trans-unit id="da94602e9563f3ceebc2fc5b569a77851b4c7e35" translate="yes" xml:space="preserve">
          <source>Basic &lt;a href=&quot;#numpy.einsum&quot;&gt;&lt;code&gt;einsum&lt;/code&gt;&lt;/a&gt;: ~1520ms (benchmarked on 3.1GHz Intel i5.)</source>
          <target state="translated">基本的な&lt;a href=&quot;#numpy.einsum&quot;&gt; &lt;code&gt;einsum&lt;/code&gt; &lt;/a&gt;：〜1520ms（3.1GHz Intel i5でベンチマーク）</target>
        </trans-unit>
        <trans-unit id="e6e180bdb3abc214441692c8749fa0f6558a1809" translate="yes" xml:space="preserve">
          <source>Basic Array Flags</source>
          <target state="translated">基本的な配列フラグ</target>
        </trans-unit>
        <trans-unit id="e4e049299abaf782878f7f84544dfdb97d319e23" translate="yes" xml:space="preserve">
          <source>Basic Datetimes</source>
          <target state="translated">基本的な日付</target>
        </trans-unit>
        <trans-unit id="6081b68b227981c90bce83d2c2beb9f59d79503d" translate="yes" xml:space="preserve">
          <source>Basic Git setup</source>
          <target state="translated">基本的なGitの設定</target>
        </trans-unit>
        <trans-unit id="7a031fb4b54459f27072c9ee40c4b13ebd94a781" translate="yes" xml:space="preserve">
          <source>Basic Installation</source>
          <target state="translated">基本的なインストール</target>
        </trans-unit>
        <trans-unit id="e5074656d77a5a1b87923975067a88a41f1ac1c1" translate="yes" xml:space="preserve">
          <source>Basic Iteration</source>
          <target state="translated">基本的な反復処理</target>
        </trans-unit>
        <trans-unit id="57a6dc8bc52fe0e5017a1d4e4df961ab713b5b3a" translate="yes" xml:space="preserve">
          <source>Basic Linear Algebra</source>
          <target state="translated">基礎線形代数</target>
        </trans-unit>
        <trans-unit id="c7231dfbf12224ef4a3543250815ccb954fcb938" translate="yes" xml:space="preserve">
          <source>Basic Linear Algebra Subprograms</source>
          <target state="translated">基本的な線形代数サブプログラム</target>
        </trans-unit>
        <trans-unit id="9a85f6e8c6ded273cdb7e38718d85979a45dd77e" translate="yes" xml:space="preserve">
          <source>Basic Operations</source>
          <target state="translated">基本操作</target>
        </trans-unit>
        <trans-unit id="7169d2b21ccd399c4bc0e79bbfdd0bd5c61ee835" translate="yes" xml:space="preserve">
          <source>Basic Slicing and Indexing</source>
          <target state="translated">基本的なスライシングとインデックス作成</target>
        </trans-unit>
        <trans-unit id="60094894bbbb579bd2f4b96162f9928ec2ce169d" translate="yes" xml:space="preserve">
          <source>Basic Statistics</source>
          <target state="translated">基礎統計学</target>
        </trans-unit>
        <trans-unit id="b9b6d01ce3d08fc15e9971b8d7ad62d621a90733" translate="yes" xml:space="preserve">
          <source>Basic array operations</source>
          <target state="translated">基本的な配列操作</target>
        </trans-unit>
        <trans-unit id="bf23a24f7e23fb617c002847d87b0e8162ee99d1" translate="yes" xml:space="preserve">
          <source>Basic customization:</source>
          <target state="translated">基本的なカスタマイズ。</target>
        </trans-unit>
        <trans-unit id="4c8d5fdc5db9950cf7bea592d196bad4f803b3fb" translate="yes" xml:space="preserve">
          <source>Basic examples</source>
          <target state="translated">基本的な例</target>
        </trans-unit>
        <trans-unit id="beb8cd5e0f8e7a06f8d36dc83c4364f7f79078fa" translate="yes" xml:space="preserve">
          <source>Basic operations</source>
          <target state="translated">基本操作</target>
        </trans-unit>
        <trans-unit id="d6e8bb93c76a2ef8f7afd4a4fc3b007cbfd7ef2c" translate="yes" xml:space="preserve">
          <source>Basic operations are simple with NumPy. If you want to find the sum of the elements in an array, you&amp;rsquo;d use &lt;code&gt;sum()&lt;/code&gt;. This works for 1D arrays, 2D arrays, and arrays in higher dimensions.</source>
          <target state="translated">基本的な操作はNumPyで簡単です。配列内の要素の合計を検索する場合は、 &lt;code&gt;sum()&lt;/code&gt; を使用します。これは、1D配列、2D配列、および高次元の配列で機能します。</target>
        </trans-unit>
        <trans-unit id="2f8920f677fe61e2e2076f058e28c7701ee809c1" translate="yes" xml:space="preserve">
          <source>Basic slicing extends Python&amp;rsquo;s basic concept of slicing to N dimensions. Basic slicing occurs when &lt;em&gt;obj&lt;/em&gt; is a &lt;a href=&quot;https://docs.python.org/dev/library/functions.html#slice&quot;&gt;&lt;code&gt;slice&lt;/code&gt;&lt;/a&gt; object (constructed by &lt;code&gt;start:stop:step&lt;/code&gt; notation inside of brackets), an integer, or a tuple of slice objects and integers. &lt;a href=&quot;https://docs.python.org/dev/library/constants.html#Ellipsis&quot;&gt;&lt;code&gt;Ellipsis&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;constants#numpy.newaxis&quot;&gt;&lt;code&gt;newaxis&lt;/code&gt;&lt;/a&gt; objects can be interspersed with these as well.</source>
          <target state="translated">基本的なスライスは、Pythonのスライスの基本的な概念をN次元に拡張します。基本的なスライスは、&lt;em&gt;obj&lt;/em&gt;が&lt;a href=&quot;https://docs.python.org/dev/library/functions.html#slice&quot;&gt; &lt;code&gt;slice&lt;/code&gt; &lt;/a&gt;オブジェクト（角かっこ内の &lt;code&gt;start:stop:step&lt;/code&gt; 表記で構成されている）、整数、またはスライスオブジェクトと整数のタプルである場合に発生します。&lt;a href=&quot;https://docs.python.org/dev/library/constants.html#Ellipsis&quot;&gt; &lt;code&gt;Ellipsis&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;constants#numpy.newaxis&quot;&gt; &lt;code&gt;newaxis&lt;/code&gt; &lt;/a&gt;オブジェクトは、これらが点在することができます。</target>
        </trans-unit>
        <trans-unit id="b900db10ad3fb5583b98ef507ab36ddd8153f435" translate="yes" xml:space="preserve">
          <source>Basic slicing extends Python&amp;rsquo;s basic concept of slicing to N dimensions. Basic slicing occurs when &lt;em&gt;obj&lt;/em&gt; is a &lt;a href=&quot;https://docs.python.org/dev/library/functions.html#slice&quot;&gt;&lt;code&gt;slice&lt;/code&gt;&lt;/a&gt; object (constructed by &lt;code&gt;start:stop:step&lt;/code&gt; notation inside of brackets), an integer, or a tuple of slice objects and integers. &lt;code&gt;Ellipsis&lt;/code&gt; and &lt;a href=&quot;constants#numpy.newaxis&quot;&gt;&lt;code&gt;newaxis&lt;/code&gt;&lt;/a&gt; objects can be interspersed with these as well.</source>
          <target state="translated">基本的なスライスは、Pythonのスライスの基本的な概念をN次元に拡張します。基本的なスライスは、&lt;em&gt;obj&lt;/em&gt;が&lt;a href=&quot;https://docs.python.org/dev/library/functions.html#slice&quot;&gt; &lt;code&gt;slice&lt;/code&gt; &lt;/a&gt;オブジェクト（括弧内の &lt;code&gt;start:stop:step&lt;/code&gt; 表記で構成）、整数、またはスライスオブジェクトと整数のタプルである場合に発生します。 &lt;code&gt;Ellipsis&lt;/code&gt; と&lt;a href=&quot;constants#numpy.newaxis&quot;&gt; &lt;code&gt;newaxis&lt;/code&gt; &lt;/a&gt;オブジェクトは、これらが点在することができます。</target>
        </trans-unit>
        <trans-unit id="b34ccf1a566015b10946e74591046f4136452341" translate="yes" xml:space="preserve">
          <source>Basic slicing with more than one non-&lt;code&gt;:&lt;/code&gt; entry in the slicing tuple, acts like repeated application of slicing using a single non-&lt;code&gt;:&lt;/code&gt; entry, where the non-&lt;code&gt;:&lt;/code&gt; entries are successively taken (with all other non-&lt;code&gt;:&lt;/code&gt; entries replaced by &lt;code&gt;:&lt;/code&gt;). Thus, &lt;code&gt;x[ind1,...,ind2,:]&lt;/code&gt; acts like &lt;code&gt;x[ind1][...,ind2,:]&lt;/code&gt; under basic slicing.</source>
          <target state="translated">非つ以上の基本的なスライシング &lt;code&gt;:&lt;/code&gt; スライスの組内のエントリは、単一の非を使用して、スライスの反復適用のように動作 &lt;code&gt;:&lt;/code&gt; エントリ、ここで、非 &lt;code&gt;:&lt;/code&gt; エントリは、連続（すべての他の非で撮影された &lt;code&gt;:&lt;/code&gt; エントリはにより置換しました &lt;code&gt;:&lt;/code&gt; ） 。したがって、 &lt;code&gt;x[ind1,...,ind2,:]&lt;/code&gt; &lt;code&gt;x[ind1][...,ind2,:]&lt;/code&gt; 、基本的なスライスではx [ind1] [...、ind2 ,:]のように機能します。</target>
        </trans-unit>
        <trans-unit id="de17dd65e3190938ee92ddb98549d2245920a8ee" translate="yes" xml:space="preserve">
          <source>Basic usage is to call &lt;a href=&quot;../reference/c-api/array#c.PyArray_IterNew&quot;&gt;&lt;code&gt;PyArray_IterNew&lt;/code&gt;&lt;/a&gt; ( &lt;code&gt;array&lt;/code&gt; ) where array is an ndarray object (or one of its sub-classes). The returned object is an array-iterator object (the same object returned by the .flat attribute of the ndarray). This object is usually cast to PyArrayIterObject* so that its members can be accessed. The only members that are needed are &lt;code&gt;iter-&amp;gt;size&lt;/code&gt; which contains the total size of the array, &lt;code&gt;iter-&amp;gt;index&lt;/code&gt;, which contains the current 1-d index into the array, and &lt;code&gt;iter-&amp;gt;dataptr&lt;/code&gt; which is a pointer to the data for the current element of the array. Sometimes it is also useful to access &lt;code&gt;iter-&amp;gt;ao&lt;/code&gt; which is a pointer to the underlying ndarray object.</source>
          <target state="translated">基本的な使用法は、&lt;a href=&quot;../reference/c-api/array#c.PyArray_IterNew&quot;&gt; &lt;code&gt;PyArray_IterNew&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;array&lt;/code&gt; ）を呼び出すことです。ここで、arrayはndarrayオブジェクト（またはそのサブクラスの1つ）です。返されるオブジェクトは、配列イテレータオブジェクトです（ndarrayの.flat属性によって返されるのと同じオブジェクト）。このオブジェクトは通常、そのメンバーにアクセスできるようにPyArrayIterObject *にキャストされます。必要なメンバーは、配列の合計 &lt;code&gt;iter-&amp;gt;size&lt;/code&gt; を含むiter-&amp;gt; size、配列への現在の1-dインデックスを含む &lt;code&gt;iter-&amp;gt;index&lt;/code&gt; 、およびデータへのポインタである &lt;code&gt;iter-&amp;gt;dataptr&lt;/code&gt; だけです。配列の現在の要素。基礎となるndarrayオブジェクトへのポインタであるiter- &lt;code&gt;iter-&amp;gt;ao&lt;/code&gt; にアクセスすると便利な場合もあります。</target>
        </trans-unit>
        <trans-unit id="af837eca09697118dc16afab4a2dc5bfeccd2a15" translate="yes" xml:space="preserve">
          <source>Basic usage. Note how y is the &amp;ldquo;flattened&amp;rdquo; version of [a[:, 0, :], a[:, 1, 0], a[:, 2, :]] since we specified the first iter&amp;rsquo;s axes as [1]</source>
          <target state="translated">基本的な使い方。最初のイターの軸を[1]として指定したため、yは[a [:, 0、：]、a [:, 1、0]、a [:, 2、：]]の「フラット化」バージョンであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="189ceeabec801d69e58e27b3296832fd339cfd5c" translate="yes" xml:space="preserve">
          <source>Basic workflow</source>
          <target state="translated">基本的なワークフロー</target>
        </trans-unit>
        <trans-unit id="5fcebeefad3cdbbf8733aa928160dec7dc90c1a1" translate="yes" xml:space="preserve">
          <source>Basics</source>
          <target state="translated">Basics</target>
        </trans-unit>
        <trans-unit id="4ce3c1a6b26e31f8d07ec92f4cb05d49b3eec33d" translate="yes" xml:space="preserve">
          <source>Be aware that when NumPy prints N-dimensional arrays, the last axis is looped over the fastest while the first axis is the slowest. For instance:</source>
          <target state="translated">NumPyがN次元配列を印刷するとき,最後の軸は最も速く,最初の軸は最も遅くループされることに注意してください.例えば</target>
        </trans-unit>
        <trans-unit id="11716f1e3c0926fa9c04fbb3c924f0811bf4b112" translate="yes" xml:space="preserve">
          <source>Be careful about round-off error!</source>
          <target state="translated">丸刈りエラーに注意!?</target>
        </trans-unit>
        <trans-unit id="3008b1888d55827508c13f2c0985bc725a03a91e" translate="yes" xml:space="preserve">
          <source>Be careful in the words that we choose. We are careful and respectful in our communication and we take responsibility for our own speech. Be kind to others. Do not insult or put down other participants. We will not accept harassment or other exclusionary behaviour, such as:</source>
          <target state="translated">選ぶ言葉には気をつけましょう。コミュニケーションを慎重に行い、自分の言葉に責任を持つ。他の参加者に親切にしましょう。他の参加者を侮辱したり、見下したりしないこと。ハラスメントなどの排除的な行為は認めません。</target>
        </trans-unit>
        <trans-unit id="a95dfdc69ac7b8c496606d6afad271cdcc3a6cdb" translate="yes" xml:space="preserve">
          <source>Be collaborative. Our work will be used by other people, and in turn we will depend on the work of others. When we make something for the benefit of the project, we are willing to explain to others how it works, so that they can build on the work to make it even better. Any decision we make will affect users and colleagues, and we take those consequences seriously when making decisions.</source>
          <target state="translated">協力的であること。私たちの作品は他の人に利用され、ひいては他の人の作品に依存することになります。プロジェクトの利益のために何かを作るとき、私たちはそれがどのように機能するのかを喜んで説明します。私たちが行うあらゆる決定は、ユーザーや同僚に影響を与えることになるので、私たちは決定を行う際にはそれらの結果を真剣に受け止めます。</target>
        </trans-unit>
        <trans-unit id="ff801bed133a99446534aede438fa2583bcd9e5a" translate="yes" xml:space="preserve">
          <source>Be empathetic, welcoming, friendly, and patient. We work together to resolve conflict, and assume good intentions. We may all experience some frustration from time to time, but we do not allow frustration to turn into a personal attack. A community where people feel uncomfortable or threatened is not a productive one.</source>
          <target state="translated">共感性を持ち、歓迎し、親しみやすく、忍耐強くあること。衝突を解決するために協力し、善意を前提とします。私たちは、誰もが時折フラストレーションを感じることがあるかもしれませんが、フラストレーションが個人的な攻撃に変わることを許しません。人々が不快に感じたり、脅かされたりするようなコミュニティは、生産的なものではありません。</target>
        </trans-unit>
        <trans-unit id="3eaab4694464d982dfc3e0a1afc07f0c4449c8cc" translate="yes" xml:space="preserve">
          <source>Be inquisitive. Nobody knows everything! Asking questions early avoids many problems later, so we encourage questions, although we may direct them to the appropriate forum. We will try hard to be responsive and helpful.</source>
          <target state="translated">探究心を持って 誰もすべてを知っているわけではありません。早めに質問をすることで、後で多くの問題を避けることができますので、適切なフォーラムに質問を誘導することもありますが、質問を奨励します。私たちは、対応し、役立つように努力します。</target>
        </trans-unit>
        <trans-unit id="6a20b0ffbe846eba275eb3ea56da6251c7cd9752" translate="yes" xml:space="preserve">
          <source>Be mindful of the needs of new members: provide them with explicit support and consideration, with the aim of increasing participation from underrepresented groups in particular.</source>
          <target state="translated">新会員のニーズに留意してください。新会員には明確な支援と配慮を提供し、特に無名のグループからの参加を増やすことを目的としています。</target>
        </trans-unit>
        <trans-unit id="1f37a97353eabf9fd15a91dbc5d9f5eb04cea0bf" translate="yes" xml:space="preserve">
          <source>Be mindful that large arrays created with &lt;code&gt;np.empty&lt;/code&gt; or &lt;code&gt;np.zeros&lt;/code&gt; might not be allocated in physical memory until the memory is accessed. If this is desired behaviour, make sure to comment it in your setup function. If you are benchmarking an algorithm, it is unlikely that a user will be executing said algorithm on a newly created empty/zero array. One can force pagefaults to occur in the setup phase either by calling &lt;code&gt;np.ones&lt;/code&gt; or &lt;code&gt;arr.fill(value)&lt;/code&gt; after creating the array,</source>
          <target state="translated">&lt;code&gt;np.empty&lt;/code&gt; または &lt;code&gt;np.zeros&lt;/code&gt; で作成された大きな配列は、メモリにアクセスするまで物理メモリに割り当てられない可能性があることに注意してください。これが望ましい動作である場合は、セットアップ関数で必ずコメントしてください。アルゴリズムのベンチマークを行っている場合、ユーザーが新しく作成された空/ゼロ配列でそのアルゴリズムを実行する可能性はほとんどありません。配列の作成後に &lt;code&gt;np.ones&lt;/code&gt; または &lt;code&gt;arr.fill(value)&lt;/code&gt; を呼び出すことにより、セットアップフェーズでページフォールトを強制的に発生させることができます。</target>
        </trans-unit>
        <trans-unit id="3730bbeeef610bbf04c76abf5ec330327e101406" translate="yes" xml:space="preserve">
          <source>Be open. We invite anyone to participate in our community. We prefer to use public methods of communication for project-related messages, unless discussing something sensitive. This applies to messages for help or project-related support, too; not only is a public support request much more likely to result in an answer to a question, it also ensures that any inadvertent mistakes in answering are more easily detected and corrected.</source>
          <target state="translated">オープンにしましょう。私たちは、誰でも私たちのコミュニティに参加するように招待しています。プロジェクト関連のメッセージについては、デリケートなことを話している場合を除き、公開された方法でコミュニケーションをとることを好みます。これはヘルプやプロジェクト関連のサポートを求めるメッセージにも当てはまります。</target>
        </trans-unit>
        <trans-unit id="ac10e1f58e2260e13e0683472d08e8f00358973a" translate="yes" xml:space="preserve">
          <source>Be sure to understand what steps you should take to manage the memory when using these conversion functions. These functions can require freeing memory, and/or altering the reference counts of specific objects based on your use.</source>
          <target state="translated">これらの変換関数を使用する際には、メモリを管理するためにどのような手順を踏むべきかを必ず理解しておいてください。これらの関数は、メモリを解放したり、用途に応じて特定のオブジェクトの参照カウントを変更したりする必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="6e72bb7e156cb39574b057b9674c2412ed422481" translate="yes" xml:space="preserve">
          <source>Be warned that even if &lt;code&gt;np.longdouble&lt;/code&gt; offers more precision than python &lt;code&gt;float&lt;/code&gt;, it is easy to lose that extra precision, since python often forces values to pass through &lt;code&gt;float&lt;/code&gt;. For example, the &lt;code&gt;%&lt;/code&gt; formatting operator requires its arguments to be converted to standard python types, and it is therefore impossible to preserve extended precision even if many decimal places are requested. It can be useful to test your code with the value &lt;code&gt;1 + np.finfo(np.longdouble).eps&lt;/code&gt;.</source>
          <target state="translated">場合でも、という警告が &lt;code&gt;np.longdouble&lt;/code&gt; のpythonより提供より精度 &lt;code&gt;float&lt;/code&gt; 、pythonのため、多くの場合、力の値が通過するように、その余分な精度を失うことは容易である &lt;code&gt;float&lt;/code&gt; 。たとえば、 &lt;code&gt;%&lt;/code&gt; フォーマット演算子では、引数を標準のPythonタイプに変換する必要があるため、小数点以下の桁数が多く要求されても、拡張精度を維持することはできません。値 &lt;code&gt;1 + np.finfo(np.longdouble).eps&lt;/code&gt; 使用してコードをテストすると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="782223c5915f4980a539ed4710dad922b52bef1d" translate="yes" xml:space="preserve">
          <source>Because &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarray&lt;/code&gt;&lt;/a&gt; is a built-in type (written in C), the &lt;code&gt;__r{op}__&lt;/code&gt; special methods are not directly defined.</source>
          <target state="translated">なぜなら&lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarray&lt;/code&gt; が&lt;/a&gt;内蔵（Cで書かれた）タイプであり、 &lt;code&gt;__r{op}__&lt;/code&gt; 特別な方法は、直接定義されていません。</target>
        </trans-unit>
        <trans-unit id="d79cf7f45add11b370a63146a7703acf9ea33ca1" translate="yes" xml:space="preserve">
          <source>Because &lt;code&gt;__array_finalize__&lt;/code&gt; is the only method that always sees new instances being created, it is the sensible place to fill in instance defaults for new object attributes, among other tasks.</source>
          <target state="translated">ので &lt;code&gt;__array_finalize__&lt;/code&gt; は常に作成される新しいインスタンスを見ている唯一の方法であり、それは他のタスクの中で、新たなオブジェクト属性、のインスタンスのデフォルト値で埋めるための賢明な場所です。</target>
        </trans-unit>
        <trans-unit id="cc46c55e2dfa187c2ac071bbb4bae1702d622519" translate="yes" xml:space="preserve">
          <source>Because Python strings are immutable, an &lt;code&gt;intent(inout)&lt;/code&gt; argument expects an array version of a string in order to have &lt;em&gt;in situ&lt;/em&gt; changes be effective.</source>
          <target state="translated">Python文字列は不変であるため、 &lt;code&gt;intent(inout)&lt;/code&gt; 引数は、&lt;em&gt;その場での&lt;/em&gt;変更を有効にするために、文字列の配列バージョンを想定しています。</target>
        </trans-unit>
        <trans-unit id="b4ea4687fdb37cf012f30310b86e8fc32c6c91ad" translate="yes" xml:space="preserve">
          <source>Because access to additional information is so useful, IPython uses the &lt;code&gt;?&lt;/code&gt; character as a shorthand for accessing this documentation along with other relevant information. IPython is a command shell for interactive computing in multiple languages. &lt;a href=&quot;https://ipython.org/&quot;&gt;You can find more information about IPython here&lt;/a&gt;.</source>
          <target state="translated">追加情報へのアクセスは非常に便利であるため、IPythonは &lt;code&gt;?&lt;/code&gt; を使用します。他の関連情報とともにこのドキュメントにアクセスするための省略形としての文字。IPythonは、複数の言語でのインタラクティブコンピューティングのためのコマンドシェルです。&lt;a href=&quot;https://ipython.org/&quot;&gt;IPythonの詳細については、こちらをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="67d90e5f1ae663c377ee558cca369308548469d2" translate="yes" xml:space="preserve">
          <source>Because exact overlap detection has exponential runtime in the number of dimensions, the decision is made based on heuristics, which has false positives (needless copies in unusual cases) but has no false negatives.</source>
          <target state="translated">厳密なオーバーラップ検出は次元数で指数関数的なランタイムを持つため、ヒューリスティックに基づいて決定され、偽陽性(異常なケースでは不要なコピー)はあるが、偽陰性はない。</target>
        </trans-unit>
        <trans-unit id="b6f4af8bef1f35015b148a058f523cde0f4ccc9d" translate="yes" xml:space="preserve">
          <source>Because of how &lt;a href=&quot;numpy.array#numpy.array&quot;&gt;&lt;code&gt;array&lt;/code&gt;&lt;/a&gt; handles sets, the following does not work as expected:</source>
          <target state="translated">&lt;a href=&quot;numpy.array#numpy.array&quot;&gt; &lt;code&gt;array&lt;/code&gt; &lt;/a&gt;がセットを処理する方法のため、以下は期待どおりに機能しません。</target>
        </trans-unit>
        <trans-unit id="4a390a00169642b8c370c2fa0fa4fb8d3ba973c7" translate="yes" xml:space="preserve">
          <source>Because of the difficulty in distributing an extension module made using ctypes, f2py and Cython are still the easiest ways to extend Python for package creation. However, ctypes is in some cases a useful alternative. This should bring more features to ctypes that should eliminate the difficulty in extending Python and distributing the extension using ctypes.</source>
          <target state="translated">ctypesを使って作った拡張モジュールを配布するのは難しいので、パッケージ作成のためにPythonを拡張するには、f2pyやCythonがまだ一番簡単な方法です。しかし、ctypesは場合によっては有用な代替手段となります。これにより、pythonを拡張してctypesを使って拡張モジュールを配布することの難しさを解消するような機能がctypesにも追加されるはずです。</target>
        </trans-unit>
        <trans-unit id="74a5855103a7e35a06feda100f69f0d3c37a35c5" translate="yes" xml:space="preserve">
          <source>Because python extensions are not used in the same way as usual libraries on most platforms, some errors cannot be automatically detected at build time or even runtime. For example, if you build an extension using a function available only for numpy &amp;gt;= 1.3.0, and you import the extension later with numpy 1.2, you will not get an import error (but almost certainly a segmentation fault when calling the function). That&amp;rsquo;s why several functions are provided to check for numpy versions. The macros &lt;a href=&quot;#c.NPY_VERSION&quot;&gt;&lt;code&gt;NPY_VERSION&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#c.NPY_FEATURE_VERSION&quot;&gt;&lt;code&gt;NPY_FEATURE_VERSION&lt;/code&gt;&lt;/a&gt; corresponds to the numpy version used to build the extension, whereas the versions returned by the functions &lt;a href=&quot;#c.PyArray_GetNDArrayCVersion&quot;&gt;&lt;code&gt;PyArray_GetNDArrayCVersion&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#c.PyArray_GetNDArrayCFeatureVersion&quot;&gt;&lt;code&gt;PyArray_GetNDArrayCFeatureVersion&lt;/code&gt;&lt;/a&gt; corresponds to the runtime numpy&amp;rsquo;s version.</source>
          <target state="translated">Python拡張機能は、ほとんどのプラットフォームで通常のライブラリと同じように使用されないため、一部のエラーはビルド時または実行時に自動的に検出できません。たとえば、numpy&amp;gt; = 1.3.0でのみ使用可能な関数を使用して拡張機能を構築し、後でnumpy 1.2を使用して拡張機能をインポートした場合、インポートエラーは発生しません（ただし、関数を呼び出すときにセグメンテーション違反が発生することはほぼ間違いありません）。 。そのため、numpyバージョンをチェックするためのいくつかの関数が提供されています。マクロ&lt;a href=&quot;#c.NPY_VERSION&quot;&gt; &lt;code&gt;NPY_VERSION&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#c.NPY_FEATURE_VERSION&quot;&gt; &lt;code&gt;NPY_FEATURE_VERSION&lt;/code&gt; &lt;/a&gt;は、拡張機能の構築に使用されるnumpyバージョンに対応しますが、関数&lt;a href=&quot;#c.PyArray_GetNDArrayCVersion&quot;&gt; &lt;code&gt;PyArray_GetNDArrayCVersion&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#c.PyArray_GetNDArrayCFeatureVersion&quot;&gt; &lt;code&gt;PyArray_GetNDArrayCFeatureVersion&lt;/code&gt; &lt;/a&gt;によって返されるバージョンは ランタイムnumpyのバージョンに対応します。</target>
        </trans-unit>
        <trans-unit id="c5a38fa639091b6298538af300d0ae57dcac2792" translate="yes" xml:space="preserve">
          <source>Because python extensions are not used in the same way as usual libraries on most platforms, some errors cannot be automatically detected at build time or even runtime. For example, if you build an extension using a function available only for numpy &amp;gt;= 1.3.0, and you import the extension later with numpy 1.2, you will not get an import error (but almost certainly a segmentation fault when calling the function). That&amp;rsquo;s why several functions are provided to check for numpy versions. The macros &lt;a href=&quot;#c.NPY_VERSION&quot;&gt;&lt;code&gt;NPY_VERSION&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;NPY_FEATURE_VERSION&lt;/code&gt; corresponds to the numpy version used to build the extension, whereas the versions returned by the functions PyArray_GetNDArrayCVersion and PyArray_GetNDArrayCFeatureVersion corresponds to the runtime numpy&amp;rsquo;s version.</source>
          <target state="translated">ほとんどのプラットフォームでは、Python拡張機能が通常のライブラリと同じように使用されていないため、一部のエラーはビルド時または実行時にも自動的に検出できません。たとえば、numpy&amp;gt; = 1.3.0でのみ使用可能な関数を使用して拡張機能をビルドし、numpy 1.2で拡張機能を後でインポートした場合、インポートエラーは発生しません（ただし、関数を呼び出すときにセグメンテーション違反が発生することはほぼ確実です）。 。そのため、numpyバージョンをチェックするためにいくつかの関数が提供されています。マクロ&lt;a href=&quot;#c.NPY_VERSION&quot;&gt; &lt;code&gt;NPY_VERSION&lt;/code&gt; &lt;/a&gt;および &lt;code&gt;NPY_FEATURE_VERSION&lt;/code&gt; は、拡張機能のビルドに使用されるnumpyバージョンに対応しますが、関数PyArray_GetNDArrayCVersionおよびPyArray_GetNDArrayCFeatureVersionによって返されるバージョンは、ランタイムnumpyのバージョンに対応します。</target>
        </trans-unit>
        <trans-unit id="00d51d08a981e99f75ad16b5ac99f6d7fcbcfe04" translate="yes" xml:space="preserve">
          <source>Because the ctypes approach exposes a raw interface to the compiled code it is not always tolerant of user mistakes. Robust use of the ctypes module typically involves an additional layer of Python code in order to check the data types and array bounds of objects passed to the underlying subroutine. This additional layer of checking (not to mention the conversion from ctypes objects to C-data-types that ctypes itself performs), will make the interface slower than a hand-written extension-module interface. However, this overhead should be negligible if the C-routine being called is doing any significant amount of work. If you are a great Python programmer with weak C skills, ctypes is an easy way to write a useful interface to a (shared) library of compiled code.</source>
          <target state="translated">ctypesのアプローチはコンパイルされたコードに生のインターフェイスを公開しているため、ユーザのミスを常に許容するわけではありません。ctypesモジュールのロバストな使用は、通常、基礎となるサブルーチンに渡されるオブジェクトのデータ型と配列の境界をチェックするために、Pythonコードの追加レイヤーを必要とします。この追加のチェック層(ctypesオブジェクトからC-data-typesへの変換をctypes自身が行うことは言うまでもありません)は、手書きのextension-moduleインターフェースよりも遅くなります。しかし、呼び出されるC-routineがかなりの量の仕事をしている場合、このオーバーヘッドは無視できるほどのものでなければなりません。もしあなたがC言語のスキルが弱い偉大なPythonプログラマーであれば、ctypesはコンパイルされたコードの(共有された)ライブラリへの便利なインターフェースを簡単に書くことができます。</target>
        </trans-unit>
        <trans-unit id="29dd075a4977fb05332410d8621bf30c67da289c" translate="yes" xml:space="preserve">
          <source>Because the discrete Fourier transform separates its input into components that contribute at discrete frequencies, it has a great number of applications in digital signal processing, e.g., for filtering, and in this context the discretized input to the transform is customarily referred to as a &lt;em&gt;signal&lt;/em&gt;, which exists in the &lt;em&gt;time domain&lt;/em&gt;. The output is called a &lt;em&gt;spectrum&lt;/em&gt; or &lt;em&gt;transform&lt;/em&gt; and exists in the &lt;em&gt;frequency domain&lt;/em&gt;.</source>
          <target state="translated">離散フーリエ変換は、その入力を離散周波数で寄与するコンポーネントに分離するため、デジタル信号処理、たとえばフィルタリングに多くの用途があり、このコンテキストでは、変換への離散化入力は慣習的に&lt;em&gt;信号&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;、これは&lt;em&gt;時間領域に&lt;/em&gt;存在し&lt;em&gt;ます&lt;/em&gt;。出力は&lt;em&gt;スペクトル&lt;/em&gt;または&lt;em&gt;変換&lt;/em&gt;と呼ばれ、&lt;em&gt;周波数領域に&lt;/em&gt;存在し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="9e9097d0b4adb9f9ce14f47bf1a8961a11b5917f" translate="yes" xml:space="preserve">
          <source>Because the output is limited to the range of the C int64 type, a ValueError is raised when &lt;code&gt;lam&lt;/code&gt; is within 10 sigma of the maximum representable value.</source>
          <target state="translated">出力はCのint64型の範囲に制限されているため、 &lt;code&gt;lam&lt;/code&gt; が表現可能な最大値の10シグマ以内にある場合、ValueErrorが発生します。</target>
        </trans-unit>
        <trans-unit id="fac8d49cb6d5e3c4d76e0475c48ac86177c281c5" translate="yes" xml:space="preserve">
          <source>Because the special treatment of tuples, they are not automatically converted to an array as a list would be. As an example:</source>
          <target state="translated">タプルの特殊な扱いのため、リストのように自動的に配列に変換されるわけではありません。例として</target>
        </trans-unit>
        <trans-unit id="b9411fa9bcced44864e82d01d766c1a2786cafda" translate="yes" xml:space="preserve">
          <source>Because you shouldn&amp;rsquo;t have done that.</source>
          <target state="translated">あなたはそれをするべきではなかったからです。</target>
        </trans-unit>
        <trans-unit id="e66686e9fe82b8c4d1e36e68b32d366de35a5f9f" translate="yes" xml:space="preserve">
          <source>Before beginning, ensure that &lt;em&gt;airspeed velocity&lt;/em&gt; is installed. By default, &lt;code&gt;asv&lt;/code&gt; ships with support for anaconda and virtualenv:</source>
          <target state="translated">開始する前に、&lt;em&gt;対気速度&lt;/em&gt;がインストールされていることを確認してください。デフォルトでは、 &lt;code&gt;asv&lt;/code&gt; アナコンダとvirtualenvのをサポートして発送します</target>
        </trans-unit>
        <trans-unit id="a4352ccd0a83ad23754cd59af6872e1e5131c575" translate="yes" xml:space="preserve">
          <source>Before reading this tutorial you should know a bit of Python. If you would like to refresh your memory, take a look at the &lt;a href=&quot;https://docs.python.org/tutorial/&quot;&gt;Python tutorial&lt;/a&gt;.</source>
          <target state="translated">このチュートリアルを読む前に、Pythonについて少し知っておく必要があります。メモリを更新したい場合は、&lt;a href=&quot;https://docs.python.org/tutorial/&quot;&gt;Pythonチュートリアルをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ab8362b68d70c7caa9ac18442122ac15a5a21eab" translate="yes" xml:space="preserve">
          <source>Before reading this tutorial, you should know a bit of Python. If you would like to refresh your memory, take a look at the &lt;a href=&quot;https://docs.python.org/dev/tutorial/index.html&quot;&gt;Python tutorial&lt;/a&gt;.</source>
          <target state="translated">このチュートリアルを読む前に、Pythonについて少し知っておく必要があります。メモリを更新したい場合は、&lt;a href=&quot;https://docs.python.org/dev/tutorial/index.html&quot;&gt;Pythonチュートリアルをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6701eda483d7c3d519624fb81a0315cb15ec0008" translate="yes" xml:space="preserve">
          <source>Before reading this, it may help to familiarize yourself with the basics of C extensions for Python by reading/skimming the tutorials in Section 1 of &lt;a href=&quot;https://docs.python.org/extending/index.html&quot;&gt;Extending and Embedding the Python Interpreter&lt;/a&gt; and in &lt;a href=&quot;c-info.how-to-extend&quot;&gt;How to extend NumPy&lt;/a&gt;</source>
          <target state="translated">これを読む前に、それは1節でチュートリアルをスキミング/読み取ることによって、Python用のC拡張の基礎を理解するのを助けることができる&lt;a href=&quot;https://docs.python.org/extending/index.html&quot;&gt;Pythonインタプリタの拡張と埋め込み&lt;/a&gt;とで&lt;a href=&quot;c-info.how-to-extend&quot;&gt;numpyのを拡張する方法&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="32836ad1d5d4d4bb58df8da3afbc677909c61049" translate="yes" xml:space="preserve">
          <source>Before the release branch is made, it should be checked that all deprecated code that should be removed is actually removed, and all new deprecations say in the docstring or deprecation warning at what version the code will be removed.</source>
          <target state="translated">リリースブランチを作成する前に、削除されるべき非推奨コードがすべて実際に削除されているかどうかを確認し、新しい非推奨コードはすべて、どのバージョンのコードが削除されるかを docstring や deprecation warning に記述しておくべきです。</target>
        </trans-unit>
        <trans-unit id="6843f140ae464de1cf1062218ac15fdc241e46ba" translate="yes" xml:space="preserve">
          <source>Before you can register a 1-d loop for a ufunc, the ufunc must be previously created. Then you call &lt;a href=&quot;../reference/c-api/ufunc#c.PyUFunc_RegisterLoopForType&quot;&gt;&lt;code&gt;PyUFunc_RegisterLoopForType&lt;/code&gt;&lt;/a&gt; (&amp;hellip;) with the information needed for the loop. The return value of this function is &lt;code&gt;0&lt;/code&gt; if the process was successful and &lt;code&gt;-1&lt;/code&gt; with an error condition set if it was not successful.</source>
          <target state="translated">ufuncの1-dループを登録する前に、ufuncを事前に作成しておく必要があります。次に、ループに必要な情報を使用して&lt;a href=&quot;../reference/c-api/ufunc#c.PyUFunc_RegisterLoopForType&quot;&gt; &lt;code&gt;PyUFunc_RegisterLoopForType&lt;/code&gt; &lt;/a&gt;（&amp;hellip;）を呼び出します。この関数の戻り値は、プロセスが成功した場合は &lt;code&gt;0&lt;/code&gt; であり、成功しなかった場合はエラー条件が設定された &lt;code&gt;-1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="be89e8229b2d83a60fa787b8ef67a25d3d7f1699" translate="yes" xml:space="preserve">
          <source>Begin if possible with the large issues, so the author knows they&amp;rsquo;ve been understood. Resist the temptation to immediately go line by line, or to open with small pervasive issues.</source>
          <target state="translated">可能であれば大きな問題から始めてください。そうすれば、作者はそれらが理解されたことを知ることができます。すぐに1行ずつ移動したり、小さな問題が蔓延している状態で開いたりする誘惑に抵抗してください。</target>
        </trans-unit>
        <trans-unit id="29cee176b513b19c85d7dfdf113b326997fd0f33" translate="yes" xml:space="preserve">
          <source>Behavior when the covariance matrix is not positive semidefinite.</source>
          <target state="translated">共分散行列が正半定値でない場合の挙動</target>
        </trans-unit>
        <trans-unit id="16b46349029a1f8fc5f5c2e429e2632fc7c9ed5c" translate="yes" xml:space="preserve">
          <source>Behaviors and Errors</source>
          <target state="translated">ビヘイビアとエラー</target>
        </trans-unit>
        <trans-unit id="20b4ea80568cb9ce63d7c954c6894e4b50f0041f" translate="yes" xml:space="preserve">
          <source>Below I&amp;rsquo;ll describe three typical approaches of using F2PY. The following example Fortran 77 code will be used for illustration, save it as fib1.f:</source>
          <target state="translated">以下では、F2PYを使用する3つの典型的なアプローチについて説明します。次の例のFortran77コードを説明に使用し、fib1.fとして保存します。</target>
        </trans-unit>
        <trans-unit id="252e06d389a00c02f7e08aa374784958db4dd768" translate="yes" xml:space="preserve">
          <source>Below are the public attributes of this object which were documented in &amp;ldquo;Guide to NumPy&amp;rdquo; (we have omitted undocumented public attributes, as well as documented private attributes):</source>
          <target state="translated">「Guide to NumPy」でドキュメント化されたこのオブジェクトのパブリック属性を以下に示します（ドキュメント化されていないパブリック属性およびドキュメント化されたプライベート属性は省略しました）。</target>
        </trans-unit>
        <trans-unit id="4b6fe750132d00281d0a5b32dae239702c2e48c2" translate="yes" xml:space="preserve">
          <source>Below is a typical usage example: &lt;a href=&quot;#numpy.typing.NBitBase&quot;&gt;&lt;code&gt;NBitBase&lt;/code&gt;&lt;/a&gt; is herein used for annotating a function that takes a float and integer of arbitrary precision as arguments and returns a new float of whichever precision is largest (&lt;em&gt;e.g.&lt;/em&gt;&lt;code&gt;np.float16 + np.int64 -&amp;gt; np.float64&lt;/code&gt;).</source>
          <target state="translated">以下は典型的な使用例です&lt;a href=&quot;#numpy.typing.NBitBase&quot;&gt; &lt;code&gt;NBitBase&lt;/code&gt; &lt;/a&gt;は、引数として任意精度の浮動小数点数と整数を取り、精度が最大の新しい浮動小数点数を返す関数に注釈を付けるために使用されます（&lt;em&gt;例：&lt;/em&gt; &lt;code&gt;np.float16 + np.int64 -&amp;gt; np.float64&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="94890db1b347a181e379f1b5ca0fad5bcd6b3fc7" translate="yes" xml:space="preserve">
          <source>Below is an example of a minimal &lt;code&gt;setup.py&lt;/code&gt; file for a pure SciPy package:</source>
          <target state="translated">以下は、純粋なSciPyパッケージの最小限の &lt;code&gt;setup.py&lt;/code&gt; ファイルの例です。</target>
        </trans-unit>
        <trans-unit id="525759fddd68e1f874367bb6bfc9a8ba5f573531" translate="yes" xml:space="preserve">
          <source>Below, are several code examples and graphical representations that help make the broadcast rule visually obvious. &lt;a href=&quot;#example-3&quot;&gt;Example 3&lt;/a&gt; adds a one-dimensional array to a two-dimensional array:</source>
          <target state="translated">以下は、ブロードキャストルールを視覚的に明確にするのに役立ついくつかのコード例とグラフィック表現です。&lt;a href=&quot;#example-3&quot;&gt;例3&lt;/a&gt;は、1次元配列を2次元配列に追加します。</target>
        </trans-unit>
        <trans-unit id="6f3b2ca2746598a5c0c336c60d7f1e5542f3b64a" translate="yes" xml:space="preserve">
          <source>Benchmarking</source>
          <target state="translated">Benchmarking</target>
        </trans-unit>
        <trans-unit id="817dcc8fca981b9f81e80ededa53ee4f0c2fe004" translate="yes" xml:space="preserve">
          <source>Benchmarking NumPy with Airspeed Velocity.</source>
          <target state="translated">NumPyを対気速度速度でベンチマークする。</target>
        </trans-unit>
        <trans-unit id="a532923696aa5c8f039ac98c01ebbdc352eb0162" translate="yes" xml:space="preserve">
          <source>Benchmarks are like tests, but have names starting with &amp;ldquo;bench&amp;rdquo; instead of &amp;ldquo;test&amp;rdquo;, and can be found under the &amp;ldquo;benchmarks&amp;rdquo; sub-directory of the module.</source>
          <target state="translated">ベンチマークはテストに似ていますが、名前は「test」ではなく「bench」で始まり、モジュールの「benchmarks」サブディレクトリにあります。</target>
        </trans-unit>
        <trans-unit id="9e0aad69f001fa26b773185a06a8bef93c3f6567" translate="yes" xml:space="preserve">
          <source>Bernoulli trials are experiments with one of two outcomes: success or failure (an example of such an experiment is flipping a coin). The geometric distribution models the number of trials that must be run in order to achieve success. It is therefore supported on the positive integers, &lt;code&gt;k = 1, 2, ...&lt;/code&gt;.</source>
          <target state="translated">ベルヌーイ試験は、成功または失敗の2つの結果のうちの1つを伴う実験です（そのような実験の例は、コインを弾くことです）。幾何分布は、成功を達成するために実行する必要がある試行の数をモデル化します。したがって、正の整数 &lt;code&gt;k = 1, 2, ...&lt;/code&gt; サポートされます。</target>
        </trans-unit>
        <trans-unit id="9fb2a7b505b1b75b34095ee2ffe16a241dd5bdfa" translate="yes" xml:space="preserve">
          <source>Besides &lt;code&gt;sys.stdout&lt;/code&gt;, a file-like object can also be used as it has both required methods:</source>
          <target state="translated">ほか &lt;code&gt;sys.stdout&lt;/code&gt; のそれは両方の必要なメソッドを有するように、ファイルのようなオブジェクトを使用することもできます。</target>
        </trans-unit>
        <trans-unit id="4e5ba1e315701c442ad54ed60833fcd6227c3ccc" translate="yes" xml:space="preserve">
          <source>Besides creating an array from a sequence of elements, you can easily create an array filled with &lt;code&gt;0&lt;/code&gt;&amp;rsquo;s:</source>
          <target state="translated">要素のシーケンスから配列を作成する以外に、 &lt;code&gt;0&lt;/code&gt; で満たされた配列を簡単に作成できます。</target>
        </trans-unit>
        <trans-unit id="feb46c86681950d0f6eb887f4a6fb11b462f9f2e" translate="yes" xml:space="preserve">
          <source>Besides its obvious scientific uses, &lt;em&gt;NumPy&lt;/em&gt; can also be used as an efficient multi-dimensional container of generic data. Arbitrary data types can be defined. This allows &lt;em&gt;NumPy&lt;/em&gt; to seamlessly and speedily integrate with a wide variety of databases.</source>
          <target state="translated">明らかな科学的用途に加えて、&lt;em&gt;NumPy&lt;/em&gt;は一般的なデータの効率的な多次元コンテナとしても使用できます。任意のデータ型を定義できます。これにより、&lt;em&gt;NumPyは&lt;/em&gt;さまざまなデータベースとシームレスかつ迅速に統合できます。</target>
        </trans-unit>
        <trans-unit id="ab274f607cf51efd384bd87e6b3a93295c182bec" translate="yes" xml:space="preserve">
          <source>Besides the structural information contained in the strides and dimensions members of the &lt;a href=&quot;c-api.types-and-structures#c.PyArrayObject&quot;&gt;&lt;code&gt;PyArrayObject&lt;/code&gt;&lt;/a&gt;, the flags contain important information about how the data may be accessed. In particular, the &lt;a href=&quot;c-api.array#c.NPY_ARRAY_ALIGNED&quot;&gt;&lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt;&lt;/a&gt; flag is set when the memory is on a suitable boundary according to the data-type array. Even if you have a contiguous chunk of memory, you cannot just assume it is safe to dereference a data- type-specific pointer to an element. Only if the &lt;a href=&quot;c-api.array#c.NPY_ARRAY_ALIGNED&quot;&gt;&lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt;&lt;/a&gt; flag is set is this a safe operation (on some platforms it will work but on others, like Solaris, it will cause a bus error). The &lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEABLE&quot;&gt;&lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt;&lt;/a&gt; should also be ensured if you plan on writing to the memory area of the array. It is also possible to obtain a pointer to an unwritable memory area. Sometimes, writing to the memory area when the &lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEABLE&quot;&gt;&lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt;&lt;/a&gt; flag is not set will just be rude. Other times it can cause program crashes ( &lt;em&gt;e.g.&lt;/em&gt; a data-area that is a read-only memory-mapped file).</source>
          <target state="translated">&lt;a href=&quot;c-api.types-and-structures#c.PyArrayObject&quot;&gt; &lt;code&gt;PyArrayObject&lt;/code&gt; の&lt;/a&gt;ストライドとディメンションのメンバーに含まれる構造情報に加えて、フラグにはデータへのアクセス方法に関する重要な情報が含まれています。特に、&lt;a href=&quot;c-api.array#c.NPY_ARRAY_ALIGNED&quot;&gt; &lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt; &lt;/a&gt;フラグは、メモリがデータ型配列に従って適切な境界にあるときに設定されます。連続したメモリのチャンクがある場合でも、要素へのデータ型固有のポインターを逆参照することが安全であると単純に想定することはできません。&lt;a href=&quot;c-api.array#c.NPY_ARRAY_ALIGNED&quot;&gt; &lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt; &lt;/a&gt;フラグが設定されている場合のみ、これは安全な操作です（一部のプラットフォームでは機能しますが、Solarisなどの他のプラットフォームでは、バスエラーが発生します）。&lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEABLE&quot;&gt; &lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt; &lt;/a&gt;また、アレイのメモリ領域に書き込む予定がある場合も確認する必要があります。書き込み不可能なメモリ領域へのポインタを取得することもできます。&lt;a href=&quot;c-api.array#c.NPY_ARRAY_WRITEABLE&quot;&gt; &lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt; &lt;/a&gt;フラグが設定されていないときにメモリ領域に書き込むと、失礼になることがあります。また、プログラムがクラッシュする場合もあります（&lt;em&gt;たとえば&lt;/em&gt;、読み取り専用のメモリマップファイルであるデータ領域）。</target>
        </trans-unit>
        <trans-unit id="7552a827553f203cc1e2b5ca99b7201f49328d40" translate="yes" xml:space="preserve">
          <source>Besides the structural information contained in the strides and dimensions members of the &lt;a href=&quot;c-api/types-and-structures#c.PyArrayObject&quot;&gt;&lt;code&gt;PyArrayObject&lt;/code&gt;&lt;/a&gt;, the flags contain important information about how the data may be accessed. In particular, the &lt;a href=&quot;c-api/array#c.NPY_ARRAY_ALIGNED&quot;&gt;&lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt;&lt;/a&gt; flag is set when the memory is on a suitable boundary according to the data-type array. Even if you have a contiguous chunk of memory, you cannot just assume it is safe to dereference a data- type-specific pointer to an element. Only if the &lt;a href=&quot;c-api/array#c.NPY_ARRAY_ALIGNED&quot;&gt;&lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt;&lt;/a&gt; flag is set is this a safe operation (on some platforms it will work but on others, like Solaris, it will cause a bus error). The &lt;a href=&quot;c-api/array#c.NPY_ARRAY_WRITEABLE&quot;&gt;&lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt;&lt;/a&gt; should also be ensured if you plan on writing to the memory area of the array. It is also possible to obtain a pointer to an unwritable memory area. Sometimes, writing to the memory area when the &lt;a href=&quot;c-api/array#c.NPY_ARRAY_WRITEABLE&quot;&gt;&lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt;&lt;/a&gt; flag is not set will just be rude. Other times it can cause program crashes ( &lt;em&gt;e.g.&lt;/em&gt; a data-area that is a read-only memory-mapped file).</source>
          <target state="translated">&lt;a href=&quot;c-api/types-and-structures#c.PyArrayObject&quot;&gt; &lt;code&gt;PyArrayObject&lt;/code&gt; の&lt;/a&gt;ストライドおよびディメンションメンバーに含まれる構造情報に加えて、フラグには、データへのアクセス方法に関する重要な情報が含まれています。特に、&lt;a href=&quot;c-api/array#c.NPY_ARRAY_ALIGNED&quot;&gt; &lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt; &lt;/a&gt;フラグは、メモリがデータ型配列に従って適切な境界上にある場合に設定されます。連続したメモリチャンクがある場合でも、データ型固有のポインタを要素に逆参照しても安全であるとは限りません。&lt;a href=&quot;c-api/array#c.NPY_ARRAY_ALIGNED&quot;&gt; &lt;code&gt;NPY_ARRAY_ALIGNED&lt;/code&gt; &lt;/a&gt;フラグが設定されている場合にのみ、これは安全な操作です（一部のプラットフォームでは機能しますが、Solarisなどの他のプラットフォームではバスエラーが発生します）。&lt;a href=&quot;c-api/array#c.NPY_ARRAY_WRITEABLE&quot;&gt; &lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt; &lt;/a&gt;配列のメモリ領域への書き込みを計画している場合も確認する必要があります。書き込み不可能なメモリ領域へのポインタを取得することも可能です。&lt;a href=&quot;c-api/array#c.NPY_ARRAY_WRITEABLE&quot;&gt; &lt;code&gt;NPY_ARRAY_WRITEABLE&lt;/code&gt; &lt;/a&gt;フラグが設定されていないときにメモリ領域に書き込むのは、単に失礼な場合があります。また、プログラムがクラッシュする場合もあります（&lt;em&gt;たとえば&lt;/em&gt;、読み取り専用のメモリマップファイルであるデータ領域）。</target>
        </trans-unit>
        <trans-unit id="e1ba37be85f86a4053d7f866745343aa6628b3b0" translate="yes" xml:space="preserve">
          <source>Besides using &lt;code&gt;runtests.py&lt;/code&gt;, there are various ways to run the tests. Inside the interpreter, tests can be run like this:</source>
          <target state="translated">&lt;code&gt;runtests.py&lt;/code&gt; を使用する以外に、テストを実行するさまざまな方法があります。インタープリター内では、次のようにテストを実行できます。</target>
        </trans-unit>
        <trans-unit id="2bf0953ee914f2edfe24d253c99b5774c0b042b9" translate="yes" xml:space="preserve">
          <source>Best choice for unitary and other non-Hermitian normal matrices.</source>
          <target state="translated">ユニタリー行列やその他の非ヘルミティア正規行列に最適。</target>
        </trans-unit>
        <trans-unit id="22e034c69c8701c0ed22fdd3834451a1ee6eff5e" translate="yes" xml:space="preserve">
          <source>Best practice for achieving reproducible bit streams is to use the default &lt;code&gt;None&lt;/code&gt; for the initial entropy, and then use &lt;a href=&quot;numpy.random.seedsequence.entropy#numpy.random.SeedSequence.entropy&quot;&gt;&lt;code&gt;SeedSequence.entropy&lt;/code&gt;&lt;/a&gt; to log/pickle the &lt;a href=&quot;../../entropy#module-numpy.random.entropy&quot;&gt;&lt;code&gt;entropy&lt;/code&gt;&lt;/a&gt; for reproducibility:</source>
          <target state="translated">再現可能なビットストリームを実現するためのベストプラクティスは、初期エントロピーにデフォルトの &lt;code&gt;None&lt;/code&gt; を使用してから、&lt;a href=&quot;numpy.random.seedsequence.entropy#numpy.random.SeedSequence.entropy&quot;&gt; &lt;code&gt;SeedSequence.entropy&lt;/code&gt; &lt;/a&gt;を使用して、再現性のために&lt;a href=&quot;../../entropy#module-numpy.random.entropy&quot;&gt; &lt;code&gt;entropy&lt;/code&gt; &lt;/a&gt;をログ/ ピックします。</target>
        </trans-unit>
        <trans-unit id="7670ec2417d2f252a955be33c6c1b4f20bd90718" translate="yes" xml:space="preserve">
          <source>Best practice for achieving reproducible bit streams is to use the default &lt;code&gt;None&lt;/code&gt; for the initial entropy, and then use &lt;a href=&quot;numpy.random.seedsequence.entropy#numpy.random.SeedSequence.entropy&quot;&gt;&lt;code&gt;SeedSequence.entropy&lt;/code&gt;&lt;/a&gt; to log/pickle the &lt;a href=&quot;numpy.random.seedsequence.entropy#numpy.random.SeedSequence.entropy&quot;&gt;&lt;code&gt;entropy&lt;/code&gt;&lt;/a&gt; for reproducibility:</source>
          <target state="translated">再現可能なビットストリームを実現するためのベストプラクティスは、初期エントロピーにデフォルトの &lt;code&gt;None&lt;/code&gt; を使用してから、&lt;a href=&quot;numpy.random.seedsequence.entropy#numpy.random.SeedSequence.entropy&quot;&gt; &lt;code&gt;SeedSequence.entropy&lt;/code&gt; &lt;/a&gt;を使用して再現性のために&lt;a href=&quot;numpy.random.seedsequence.entropy#numpy.random.SeedSequence.entropy&quot;&gt; &lt;code&gt;entropy&lt;/code&gt; &lt;/a&gt;をログに記録/選択することです。</target>
        </trans-unit>
        <trans-unit id="ff113b93867eb5d4708dd06e48a11f6662278fd5" translate="yes" xml:space="preserve">
          <source>Beta, positive (&amp;gt;0).</source>
          <target state="translated">ベータ、ポジティブ（&amp;gt; 0）。</target>
        </trans-unit>
        <trans-unit id="df6d93c232f8ef730e08cac2f842b70dab985fb0" translate="yes" xml:space="preserve">
          <source>Beta: &amp;lsquo;1.8.0b1&amp;rsquo;, &amp;lsquo;1.8.0b2&amp;rsquo;, etc.</source>
          <target state="translated">ベータ：「1.8.0b1」、「1.8.0b2」など</target>
        </trans-unit>
        <trans-unit id="e5c69acc70fda034169d23116e19f5548d61c870" translate="yes" xml:space="preserve">
          <source>Better &lt;code&gt;repr&lt;/code&gt; of object arrays</source>
          <target state="translated">オブジェクト配列のより良い &lt;code&gt;repr&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="71ff91962e9990f86b3c3c6f7d7e56caab72ace4" translate="yes" xml:space="preserve">
          <source>Better behaviour of ufunc identities during reductions</source>
          <target state="translated">還元時のufuncアイデンティティのより良い振る舞い</target>
        </trans-unit>
        <trans-unit id="2e8b6f98e6b21c5c6afa9104a0769b9205288f70" translate="yes" xml:space="preserve">
          <source>Better default repr for &lt;code&gt;ndarray&lt;/code&gt; subclasses</source>
          <target state="translated">&lt;code&gt;ndarray&lt;/code&gt; サブクラスのデフォルトreprの改善</target>
        </trans-unit>
        <trans-unit id="9c34cb1b69a33b2d347cbab7a352fe546099b5b5" translate="yes" xml:space="preserve">
          <source>Better numerical stability for sum in some cases</source>
          <target state="translated">場合によっては、和の数値安定性が向上</target>
        </trans-unit>
        <trans-unit id="c1c0df1717608a8779754648098f8f6a8b834b75" translate="yes" xml:space="preserve">
          <source>Better support for &lt;code&gt;const&lt;/code&gt; dimensions in API functions</source>
          <target state="translated">API関数での &lt;code&gt;const&lt;/code&gt; ディメンションのサポートの向上</target>
        </trans-unit>
        <trans-unit id="9bf8b70bc38b460cf450f48cba644f58d2901785" translate="yes" xml:space="preserve">
          <source>Better support for empty structured and string types</source>
          <target state="translated">空の構造化型と文字列型のサポートが向上</target>
        </trans-unit>
        <trans-unit id="741240e1ef7d29df48749ede4195530d21b5583c" translate="yes" xml:space="preserve">
          <source>Beyond changes to a functions docstring and possible description in the general documentation, if your change introduces any user-facing modifications they may need to be mentioned in the release notes. To add your change to the release notes, you need to create a short file with a summary and place it in &lt;code&gt;doc/release/upcoming_changes&lt;/code&gt;. The file &lt;code&gt;doc/release/upcoming_changes/README.rst&lt;/code&gt; details the format and filename conventions.</source>
          <target state="translated">関数のdocstringの変更と一般的なドキュメントでの可能な説明に加えて、変更によってユーザー向けの変更が導入された場合は、リリースノートに記載する必要があります。リリースノートに変更を追加するには、概要を含む短いファイルを作成し、それを &lt;code&gt;doc/release/upcoming_changes&lt;/code&gt; に配置する必要があります。ファイル &lt;code&gt;doc/release/upcoming_changes/README.rst&lt;/code&gt; には、フォーマットとファイル名の規則が詳しく説明されています。</target>
        </trans-unit>
        <trans-unit id="1d7c1c795d86187e8f7208b51b9e4bbd86fa144c" translate="yes" xml:space="preserve">
          <source>Beyond the Basics</source>
          <target state="translated">基本を超えて</target>
        </trans-unit>
        <trans-unit id="26ffbba2ad335a399beb79e57cd9f0fee4d0bfe1" translate="yes" xml:space="preserve">
          <source>Beyond the Provided Typemaps</source>
          <target state="translated">提供されるタイプマップを超えて</target>
        </trans-unit>
        <trans-unit id="66639f7d455dd71faa9147f5d69e5ce885d8bebd" translate="yes" xml:space="preserve">
          <source>Binary</source>
          <target state="translated">Binary</target>
        </trans-unit>
        <trans-unit id="2381a720988421ed44a915283532f745ec598844" translate="yes" xml:space="preserve">
          <source>Binary Format Description</source>
          <target state="translated">バイナリ形式の説明</target>
        </trans-unit>
        <trans-unit id="b26f6c63a335a90adeeab8f4d5013e4f2efe2bec" translate="yes" xml:space="preserve">
          <source>Binary operations</source>
          <target state="translated">バイナリ演算</target>
        </trans-unit>
        <trans-unit id="e2606828726dd092395e99ae84af2fb16d4bba99" translate="yes" xml:space="preserve">
          <source>Binary operations with non-arrays as second argument</source>
          <target state="translated">第2引数に非配列を使用したバイナリ演算</target>
        </trans-unit>
        <trans-unit id="1cc036b4a48151bfca642ff2ead78a54a934983c" translate="yes" xml:space="preserve">
          <source>Binary representation of &lt;code&gt;num&lt;/code&gt; or two&amp;rsquo;s complement of &lt;code&gt;num&lt;/code&gt;.</source>
          <target state="translated">バイナリ表現 &lt;code&gt;num&lt;/code&gt; かの2の補数 &lt;code&gt;num&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9cc1259e21c7e613999e790394c5c675e22538ae" translate="yes" xml:space="preserve">
          <source>Binary search is used to find the required insertion points.</source>
          <target state="translated">バイナリサーチは、必要な挿入点を見つけるために使用されます。</target>
        </trans-unit>
        <trans-unit id="d16d7bbb9c6ef7dc7a209b9f7f44b9f5da556503" translate="yes" xml:space="preserve">
          <source>Binary serialization</source>
          <target state="translated">バイナリ直列化</target>
        </trans-unit>
        <trans-unit id="c2fcfedbbaa7680e63fd8ec6b6d6fea722eb952d" translate="yes" xml:space="preserve">
          <source>Binomials</source>
          <target state="translated">Binomials</target>
        </trans-unit>
        <trans-unit id="d12186b0252e4232a8110ba893b738140b658fd0" translate="yes" xml:space="preserve">
          <source>Bit Generators</source>
          <target state="translated">ビットジェネレーター</target>
        </trans-unit>
        <trans-unit id="d9ea127fdd4796c75fc01357c967509bff02d70a" translate="yes" xml:space="preserve">
          <source>Bit field (following integer gives the number of bits in the bit field).</source>
          <target state="translated">ビットフィールド(以下の整数はビットフィールドのビット数を示す)。</target>
        </trans-unit>
        <trans-unit id="4239f8b7894d76bb52c94538f111a8da8d4fb0a0" translate="yes" xml:space="preserve">
          <source>Bit packing</source>
          <target state="translated">ビットパッキン</target>
        </trans-unit>
        <trans-unit id="b80dbb4a253c53f5aa98843beeecc669ef1da4eb" translate="yes" xml:space="preserve">
          <source>Bit-flags describing how this data type is to be interpreted.</source>
          <target state="translated">このデータ型がどのように解釈されるかを記述するビットフラグ。</target>
        </trans-unit>
        <trans-unit id="59a321c44dd261b336bb24b8f3a93b2ffcf9ad14" translate="yes" xml:space="preserve">
          <source>Bit-masks are in &lt;code&gt;numpy.core.multiarray&lt;/code&gt; as the constants &lt;code&gt;ITEM_HASOBJECT&lt;/code&gt;, &lt;code&gt;LIST_PICKLE&lt;/code&gt;, &lt;code&gt;ITEM_IS_POINTER&lt;/code&gt;, &lt;code&gt;NEEDS_INIT&lt;/code&gt;, &lt;code&gt;NEEDS_PYAPI&lt;/code&gt;, &lt;code&gt;USE_GETITEM&lt;/code&gt;, &lt;code&gt;USE_SETITEM&lt;/code&gt;. A full explanation of these flags is in C-API documentation; they are largely useful for user-defined data-types.</source>
          <target state="translated">ビットマスクはしている &lt;code&gt;numpy.core.multiarray&lt;/code&gt; 定数として &lt;code&gt;ITEM_HASOBJECT&lt;/code&gt; 、 &lt;code&gt;LIST_PICKLE&lt;/code&gt; 、 &lt;code&gt;ITEM_IS_POINTER&lt;/code&gt; 、 &lt;code&gt;NEEDS_INIT&lt;/code&gt; 、 &lt;code&gt;NEEDS_PYAPI&lt;/code&gt; 、 &lt;code&gt;USE_GETITEM&lt;/code&gt; 、 &lt;code&gt;USE_SETITEM&lt;/code&gt; 。これらのフラグの完全な説明は、C-APIドキュメントにあります。これらは、ユーザー定義のデータ型に大きく役立ちます。</target>
        </trans-unit>
        <trans-unit id="c6c2f273c5d1a8dcbceea602bbb87c029bbc0d32" translate="yes" xml:space="preserve">
          <source>Bit-twiddling functions</source>
          <target state="translated">ビットツイドル機能</target>
        </trans-unit>
        <trans-unit id="460d665e77f8686560c843f72478486336f12a1b" translate="yes" xml:space="preserve">
          <source>Bit-width names</source>
          <target state="translated">ビット幅名</target>
        </trans-unit>
        <trans-unit id="7176dd338904b0fc1d2cdf1063572e4e5cbd193a" translate="yes" xml:space="preserve">
          <source>Bit-width references to enumerated typenums</source>
          <target state="translated">列挙された型名へのビット幅参照</target>
        </trans-unit>
        <trans-unit id="143911730a6c4fbdf6bd766470cddffa24dd0b5c" translate="yes" xml:space="preserve">
          <source>BitGenerator</source>
          <target state="translated">BitGenerator</target>
        </trans-unit>
        <trans-unit id="e1d49785c1daa86c89ab6e63f74767502d9e2cd5" translate="yes" xml:space="preserve">
          <source>BitGenerator (class in numpy.random)</source>
          <target state="translated">BitGenerator (numpy.random のクラス)</target>
        </trans-unit>
        <trans-unit id="cc03ca2870189a580c7299116633756162b41a61" translate="yes" xml:space="preserve">
          <source>BitGenerator for Chris Doty-Humphrey&amp;rsquo;s Small Fast Chaotic PRNG.</source>
          <target state="translated">Chris Doty-HumphreyのSmall Fast Chaotic PRNGのBitGenerator。</target>
        </trans-unit>
        <trans-unit id="218df33e7359786597fc4c2a6c1726e5e91ef2e6" translate="yes" xml:space="preserve">
          <source>BitGenerator for the PCG-64 pseudo-random number generator.</source>
          <target state="translated">PCG-64擬似乱数発生器のBitGeneratorです。</target>
        </trans-unit>
        <trans-unit id="9b6bde107d0c3c8164f2b3ab1e4164dad1766298" translate="yes" xml:space="preserve">
          <source>BitGenerator to use as the core generator.</source>
          <target state="translated">コアジェネレーターとして使用するBitGenerator。</target>
        </trans-unit>
        <trans-unit id="dbbe08f6d74daba648b1cd173a6a41449071b1bf" translate="yes" xml:space="preserve">
          <source>BitGenerator.random_raw()</source>
          <target state="translated">BitGenerator.random_raw()</target>
        </trans-unit>
        <trans-unit id="ade67fe752c31c985cb01482e4ad03f16cfe18bb" translate="yes" xml:space="preserve">
          <source>BitGenerators: Objects that generate random numbers. These are typically unsigned integer words filled with sequences of either 32 or 64 random bits.</source>
          <target state="translated">BitGenerators (ビットジェネレータ)の略。乱数を生成するオブジェクト。これらは通常、32 または 64 のランダムビットのシーケンスで満たされた符号なし整数ワードです。</target>
        </trans-unit>
        <trans-unit id="a36a25a1cccb68c7c87fcd879bbb216973e2de75" translate="yes" xml:space="preserve">
          <source>Bits</source>
          <target state="translated">Bits</target>
        </trans-unit>
        <trans-unit id="02f4859e8970806328996752f2ca5818252436db" translate="yes" xml:space="preserve">
          <source>Bits are shifted to the left by appending &lt;code&gt;x2&lt;/code&gt; 0s at the right of &lt;code&gt;x1&lt;/code&gt;. Since the internal representation of numbers is in binary format, this operation is equivalent to multiplying &lt;code&gt;x1&lt;/code&gt; by &lt;code&gt;2**x2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x1&lt;/code&gt; の右側に &lt;code&gt;x2&lt;/code&gt; 0を追加して、ビットを左にシフトします。数値の内部表現はバイナリ形式であるため、この演算は &lt;code&gt;x1&lt;/code&gt; に &lt;code&gt;2**x2&lt;/code&gt; を乗算することと同じです。</target>
        </trans-unit>
        <trans-unit id="9d9f79b7b35bc256a0d1b6d4ab01f312eace24eb" translate="yes" xml:space="preserve">
          <source>Bits are shifted to the right &lt;code&gt;x2&lt;/code&gt;. Because the internal representation of numbers is in binary format, this operation is equivalent to dividing &lt;code&gt;x1&lt;/code&gt; by &lt;code&gt;2**x2&lt;/code&gt;.</source>
          <target state="translated">ビットは右 &lt;code&gt;x2&lt;/code&gt; にシフトされます。数値の内部表現はバイナリ形式であるため、この演算は &lt;code&gt;x1&lt;/code&gt; を &lt;code&gt;2**x2&lt;/code&gt; 除算することと同じです。</target>
        </trans-unit>
        <trans-unit id="eb86c6c99db380b9a785bd4e060a6f5dc41e87fd" translate="yes" xml:space="preserve">
          <source>Bits set for the object data-type: ( &lt;a href=&quot;#c.NPY_LIST_PICKLE&quot;&gt;&lt;code&gt;NPY_LIST_PICKLE&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;#c.NPY_USE_GETITEM&quot;&gt;&lt;code&gt;NPY_USE_GETITEM&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;#c.NPY_ITEM_IS_POINTER&quot;&gt;&lt;code&gt;NPY_ITEM_IS_POINTER&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;#c.NPY_ITEM_REFCOUNT&quot;&gt;&lt;code&gt;NPY_ITEM_REFCOUNT&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;#c.NPY_NEEDS_INIT&quot;&gt;&lt;code&gt;NPY_NEEDS_INIT&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;#c.NPY_NEEDS_PYAPI&quot;&gt;&lt;code&gt;NPY_NEEDS_PYAPI&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">オブジェクトのデータ型に設定されるビット：（&lt;a href=&quot;#c.NPY_LIST_PICKLE&quot;&gt; &lt;code&gt;NPY_LIST_PICKLE&lt;/code&gt; &lt;/a&gt; | &lt;a href=&quot;#c.NPY_USE_GETITEM&quot;&gt; &lt;code&gt;NPY_USE_GETITEM&lt;/code&gt; &lt;/a&gt; | &lt;a href=&quot;#c.NPY_ITEM_IS_POINTER&quot;&gt; &lt;code&gt;NPY_ITEM_IS_POINTER&lt;/code&gt; &lt;/a&gt; | &lt;a href=&quot;#c.NPY_ITEM_REFCOUNT&quot;&gt; &lt;code&gt;NPY_ITEM_REFCOUNT&lt;/code&gt; &lt;/a&gt; | &lt;a href=&quot;#c.NPY_NEEDS_INIT&quot;&gt; &lt;code&gt;NPY_NEEDS_INIT&lt;/code&gt; &lt;/a&gt; | &lt;a href=&quot;#c.NPY_NEEDS_PYAPI&quot;&gt; &lt;code&gt;NPY_NEEDS_PYAPI&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="117a063b0a577c59c490f864292bca239247279f" translate="yes" xml:space="preserve">
          <source>Bits set for the object data-type: ( &lt;a href=&quot;#c.NPY_LIST_PICKLE&quot;&gt;&lt;code&gt;NPY_LIST_PICKLE&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;#c.NPY_USE_GETITEM&quot;&gt;&lt;code&gt;NPY_USE_GETITEM&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;#c.NPY_ITEM_IS_POINTER&quot;&gt;&lt;code&gt;NPY_ITEM_IS_POINTER&lt;/code&gt;&lt;/a&gt; | &lt;code&gt;NPY_REFCOUNT&lt;/code&gt; | &lt;a href=&quot;#c.NPY_NEEDS_INIT&quot;&gt;&lt;code&gt;NPY_NEEDS_INIT&lt;/code&gt;&lt;/a&gt; | &lt;a href=&quot;#c.NPY_NEEDS_PYAPI&quot;&gt;&lt;code&gt;NPY_NEEDS_PYAPI&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">オブジェクトデータタイプに設定されたビット：（&lt;a href=&quot;#c.NPY_LIST_PICKLE&quot;&gt; &lt;code&gt;NPY_LIST_PICKLE&lt;/code&gt; &lt;/a&gt; | &lt;a href=&quot;#c.NPY_USE_GETITEM&quot;&gt; &lt;code&gt;NPY_USE_GETITEM&lt;/code&gt; &lt;/a&gt; | &lt;a href=&quot;#c.NPY_ITEM_IS_POINTER&quot;&gt; &lt;code&gt;NPY_ITEM_IS_POINTER&lt;/code&gt; &lt;/a&gt; | &lt;code&gt;NPY_REFCOUNT&lt;/code&gt; | &lt;a href=&quot;#c.NPY_NEEDS_INIT&quot;&gt; &lt;code&gt;NPY_NEEDS_INIT&lt;/code&gt; &lt;/a&gt; | &lt;a href=&quot;#c.NPY_NEEDS_PYAPI&quot;&gt; &lt;code&gt;NPY_NEEDS_PYAPI&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="13031923c83ade827195c6241750d4615a698b51" translate="yes" xml:space="preserve">
          <source>Blackman, R.B. and Tukey, J.W., (1958) The measurement of power spectra, Dover Publications, New York.</source>
          <target state="translated">Blackman,R.B.and Tukey,J.W.(1958)The measurement of power spectra,Dover Publications,New York.</target>
        </trans-unit>
        <trans-unit id="348cdf7ff3c8eec7d1cd1aa8880558948fba2435" translate="yes" xml:space="preserve">
          <source>Blocks can be of any dimension, but will not be broadcasted using the normal rules. Instead, leading axes of size 1 are inserted, to make &lt;code&gt;block.ndim&lt;/code&gt; the same for all blocks. This is primarily useful for working with scalars, and means that code like &lt;code&gt;np.block([v, 1])&lt;/code&gt; is valid, where &lt;code&gt;v.ndim == 1&lt;/code&gt;.</source>
          <target state="translated">ブロックは任意の次元にすることができますが、通常のルールを使用してブロードキャストされません。代わりに、サイズ1の先行軸が挿入され、すべてのブロックで &lt;code&gt;block.ndim&lt;/code&gt; が同じになります。これは主にスカラーの操作に役立ち、 &lt;code&gt;v.ndim == 1&lt;/code&gt; であるnp.block &lt;code&gt;np.block([v, 1])&lt;/code&gt; ようなコードが有効であることを意味します。</target>
        </trans-unit>
        <trans-unit id="8994034796d9ec39a7933eb34371fad5f6ce9920" translate="yes" xml:space="preserve">
          <source>Blocks in the innermost lists are concatenated (see &lt;a href=&quot;numpy.concatenate#numpy.concatenate&quot;&gt;&lt;code&gt;concatenate&lt;/code&gt;&lt;/a&gt;) along the last dimension (-1), then these are concatenated along the second-last dimension (-2), and so on until the outermost list is reached.</source>
          <target state="translated">最も内側のリストでブロックが（参照連結さ&lt;a href=&quot;numpy.concatenate#numpy.concatenate&quot;&gt; &lt;code&gt;concatenate&lt;/code&gt; &lt;/a&gt;最後の次元に沿って）（-1）、これらは最後から2番目の次元に沿って連結されている（-2）など最外リストに到達するまでに。</target>
        </trans-unit>
        <trans-unit id="b76ff4906f33c2dd97ddd929b9662ba8cac6174c" translate="yes" xml:space="preserve">
          <source>Boolean</source>
          <target state="translated">Boolean</target>
        </trans-unit>
        <trans-unit id="317be1616a174c84304de299b4ead5ef76ce4a76" translate="yes" xml:space="preserve">
          <source>Boolean (True or False) stored as a byte</source>
          <target state="translated">バイトとして格納されたブール値(TrueまたはFalse</target>
        </trans-unit>
        <trans-unit id="71383121b53c1c9facdaaabc47b0de18549c5c80" translate="yes" xml:space="preserve">
          <source>Boolean (integer type where all values are only True or False)</source>
          <target state="translated">ブール型(すべての値がTrueかFalseのみの整数型</target>
        </trans-unit>
        <trans-unit id="c7a0fd639a6581c56ba10f492adee6f212cd45b8" translate="yes" xml:space="preserve">
          <source>Boolean 1-d array selecting which entries to return. If len(condition) is less than the size of a along the axis, then output is truncated to length of condition array.</source>
          <target state="translated">どのエントリを返すかを選択する 1-d 配列のブール値。len(condition)が軸に沿った a のサイズよりも小さい場合、出力は条件配列の長さに切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="87962449a461c8ec49f5151d2bbb30e7a462a28e" translate="yes" xml:space="preserve">
          <source>Boolean array indexing</source>
          <target state="translated">ブール配列インデックス</target>
        </trans-unit>
        <trans-unit id="60d82fac26a05eb411b70101c41bd3047454cb5f" translate="yes" xml:space="preserve">
          <source>Boolean array indices with mismatching shapes now properly give &lt;code&gt;IndexError&lt;/code&gt;</source>
          <target state="translated">形状が一致しないブール配列インデックスは、 &lt;code&gt;IndexError&lt;/code&gt; を適切に与えるようになりました</target>
        </trans-unit>
        <trans-unit id="c1aefe73a2b6727a0e572007771ddec686a6bb1f" translate="yes" xml:space="preserve">
          <source>Boolean array of same shape as &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; と同じ形状のブール配列。</target>
        </trans-unit>
        <trans-unit id="233d1fbe1852dc657d35dfe3cd279e3947a9a911" translate="yes" xml:space="preserve">
          <source>Boolean arrays used as indices are treated in a different manner entirely than index arrays. Boolean arrays must be of the same shape as the initial dimensions of the array being indexed. In the most straightforward case, the boolean array has the same shape:</source>
          <target state="translated">インデックスとして使用されるブール値配列は、インデックス配列とは全く異なる方法で扱われます。ブール型配列は、インデックス化される配列の初期寸法と同じ形状でなければなりません。最もわかりやすいケースでは、ブーリアン配列は同じ形状をしています。</target>
        </trans-unit>
        <trans-unit id="98073379b648edd4cbe725ce47f959a6d23058d4" translate="yes" xml:space="preserve">
          <source>Boolean indexing changes</source>
          <target state="translated">ブールインデキシングの変更</target>
        </trans-unit>
        <trans-unit id="639386fbce5315b91a1c655018a3b9643e9bcfef" translate="yes" xml:space="preserve">
          <source>Boolean indicating whether the byte order of this dtype is native to the platform.</source>
          <target state="translated">このdtypeのバイト順がプラットフォームにネイティブであるかどうかを示すブール値。</target>
        </trans-unit>
        <trans-unit id="0c76417c3c3c65ffeed61396388e3db4b8c19de6" translate="yes" xml:space="preserve">
          <source>Boolean indicating whether the dtype is a struct which maintains field alignment.</source>
          <target state="translated">dtypeがフィールドアライメントを維持する構造体であるかどうかを示すブール値。</target>
        </trans-unit>
        <trans-unit id="dad1680b2705f6d7f6eeec97cbb513a4e1699f09" translate="yes" xml:space="preserve">
          <source>Boolean indicating whether the dtype is a struct which maintains field alignment. This flag is sticky, so when combining multiple structs together, it is preserved and produces new dtypes which are also aligned.</source>
          <target state="translated">dtypeがフィールド整列を維持する構造体であるかどうかを示すブール値。このフラグはスティッキーであるため、複数の構造体を結合する際には、このフラグが保持され、アラインメントされた新しいdtypesも生成されます。</target>
        </trans-unit>
        <trans-unit id="36f2224ace3c78a988e50bdc966ac649a4d3fc0b" translate="yes" xml:space="preserve">
          <source>Boolean indicating whether this dtype contains any reference-counted objects in any fields or sub-dtypes.</source>
          <target state="translated">このdtypeが、任意のフィールドまたはサブタイプに参照カウントされたオブジェクトを含むかどうかを示すブール値。</target>
        </trans-unit>
        <trans-unit id="398d7e2271209225ea68a985a7b2fa72caeee3a6" translate="yes" xml:space="preserve">
          <source>Boolean mask array. It has to be the same shape as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">ブールマスク配列。と同じ形状で &lt;code&gt;a&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="59815579c0e1a982c330b63fe4d4075e4fd81815" translate="yes" xml:space="preserve">
          <source>Boolean mask array. Must have the same size as &lt;code&gt;a&lt;/code&gt;.</source>
          <target state="translated">ブールマスク配列。同じサイズ持っている必要があります。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="30d9ef559552bdd87313d89c8796d8136275e739" translate="yes" xml:space="preserve">
          <source>Boolean operations</source>
          <target state="translated">ブール演算</target>
        </trans-unit>
        <trans-unit id="0d747f327c87280779ba3eb08a42ad6dc25e090e" translate="yes" xml:space="preserve">
          <source>Boolean or &amp;ldquo;mask&amp;rdquo; index arrays</source>
          <target state="translated">ブールまたは「マスク」インデックス配列</target>
        </trans-unit>
        <trans-unit id="dd5ec2e25bdf5818c59dcd317ab96e5a1ea9111e" translate="yes" xml:space="preserve">
          <source>Boolean result of check whether &lt;code&gt;rep&lt;/code&gt; is a scalar dtype.</source>
          <target state="translated">&lt;code&gt;rep&lt;/code&gt; がスカラーdtypeであるかどうかのチェックのブール結果。</target>
        </trans-unit>
        <trans-unit id="e4ae3e1eb416ce7ddaa17364adbe02e871496027" translate="yes" xml:space="preserve">
          <source>Boolean result of the logical AND operation applied to the elements of &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt;; the shape is determined by broadcasting. This is a scalar if both &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; are scalars.</source>
          <target state="translated">&lt;code&gt;x1&lt;/code&gt; および &lt;code&gt;x2&lt;/code&gt; の要素に適用された論理AND演算のブール結果。形は放送で決まります。 &lt;code&gt;x1&lt;/code&gt; と &lt;code&gt;x2&lt;/code&gt; の両方がスカラーの場合、これはスカラーです。</target>
        </trans-unit>
        <trans-unit id="80129c87ec19d7266b12fa62c898f1de8e697318" translate="yes" xml:space="preserve">
          <source>Boolean result of the logical OR operation applied to the elements of &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt;; the shape is determined by broadcasting. This is a scalar if both &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; are scalars.</source>
          <target state="translated">&lt;code&gt;x1&lt;/code&gt; および &lt;code&gt;x2&lt;/code&gt; の要素に適用される論理OR演算のブール結果。形状は放送で決まります。 &lt;code&gt;x1&lt;/code&gt; と &lt;code&gt;x2&lt;/code&gt; の両方がスカラーの場合、これはスカラーです。</target>
        </trans-unit>
        <trans-unit id="efce76e1529f243bc75f6c85e1cb168b94a21ce6" translate="yes" xml:space="preserve">
          <source>Boolean result of the logical XOR operation applied to the elements of &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt;; the shape is determined by broadcasting. This is a scalar if both &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt; are scalars.</source>
          <target state="translated">&lt;code&gt;x1&lt;/code&gt; と &lt;code&gt;x2&lt;/code&gt; の要素に適用された論理XOR演算のブール結果。形状は放送で決まります。 &lt;code&gt;x1&lt;/code&gt; と &lt;code&gt;x2&lt;/code&gt; の両方がスカラーの場合、これはスカラーです。</target>
        </trans-unit>
        <trans-unit id="e598e8b30eff8ac988c047694ee54841654f4531" translate="yes" xml:space="preserve">
          <source>Boolean result with the same shape as &lt;code&gt;x&lt;/code&gt; of the NOT operation on elements of &lt;code&gt;x&lt;/code&gt;. This is a scalar if &lt;code&gt;x&lt;/code&gt; is a scalar.</source>
          <target state="translated">同じ形状のブール結果 &lt;code&gt;x&lt;/code&gt; の要素に対するNOT演算の &lt;code&gt;x&lt;/code&gt; 。 &lt;code&gt;x&lt;/code&gt; がスカラーの場合、これはスカラーです。</target>
        </trans-unit>
        <trans-unit id="b93268f3c2db16861f90ecc22ed53005b764061c" translate="yes" xml:space="preserve">
          <source>Boolean type (True or False), stored as a byte.</source>
          <target state="translated">Boolean型(TrueまたはFalse)で、バイトとして格納される。</target>
        </trans-unit>
        <trans-unit id="4cfb7a503c91815ccbf2f35210fcd3eadc71e7eb" translate="yes" xml:space="preserve">
          <source>Booleans are accepted as well:</source>
          <target state="translated">ブーリアンも受け付けています。</target>
        </trans-unit>
        <trans-unit id="fff8683eb97daf0f7f34cfbaabaadf811d8b8133" translate="yes" xml:space="preserve">
          <source>Booleans:</source>
          <target state="translated">Booleans:</target>
        </trans-unit>
        <trans-unit id="37cb1b945ecb9b619ea4147615565076f43e7b81" translate="yes" xml:space="preserve">
          <source>Boost Python</source>
          <target state="translated">ブーストパイソン</target>
        </trans-unit>
        <trans-unit id="80eb86696c9c70e3e908a024dfe4075dae3951c7" translate="yes" xml:space="preserve">
          <source>Boost is a repository of C++ libraries and Boost.Python is one of those libraries which provides a concise interface for binding C++ classes and functions to Python. The amazing part of the Boost.Python approach is that it works entirely in pure C++ without introducing a new syntax. Many users of C++ report that Boost.Python makes it possible to combine the best of both worlds in a seamless fashion. I have not used Boost.Python because I am not a big user of C++ and using Boost to wrap simple C-subroutines is usually over-kill. It&amp;rsquo;s primary purpose is to make C++ classes available in Python. So, if you have a set of C++ classes that need to be integrated cleanly into Python, consider learning about and using Boost.Python.</source>
          <target state="translated">BoostはC ++ライブラリのリポジトリであり、Boost.Pythonは、C ++クラスと関数をPythonにバインドするための簡潔なインターフェイスを提供するライブラリの1つです。 Boost.Pythonアプローチの驚くべき部分は、新しい構文を導入することなく、完全に純粋なC ++で機能することです。 C ++の多くのユーザーは、Boost.Pythonによって両方の長所をシームレスに組み合わせることができると報告しています。私はC ++の大口ユーザーではなく、Boostを使用して単純なCサブルーチンをラップするのは通常やり過ぎなので、Boost.Pythonを使用していません。主な目的は、C ++クラスをPythonで使用できるようにすることです。したがって、Pythonにクリーンに統合する必要があるC ++クラスのセットがある場合は、Boost.Pythonについて学習して使用することを検討してください。</target>
        </trans-unit>
        <trans-unit id="3d9f5c6c1605197a54538b1a42018d968a659108" translate="yes" xml:space="preserve">
          <source>Boost.Python</source>
          <target state="translated">Boost.Python</target>
        </trans-unit>
        <trans-unit id="35f319efb34e1e345510a06307dd059dbed15ac2" translate="yes" xml:space="preserve">
          <source>Boost.python</source>
          <target state="translated">Boost.python</target>
        </trans-unit>
        <trans-unit id="6a6c7de0b010d58cd0f9cb5716158db428b24bc0" translate="yes" xml:space="preserve">
          <source>Both &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;v&lt;/code&gt; must be 0-d or 1-d (ndim = 0 or 1), but &lt;code&gt;u.ndim&lt;/code&gt; need not equal &lt;code&gt;v.ndim&lt;/code&gt;. In other words, all four possible combinations - &lt;code&gt;u.ndim = v.ndim = 0&lt;/code&gt;, &lt;code&gt;u.ndim = v.ndim = 1&lt;/code&gt;, &lt;code&gt;u.ndim = 1, v.ndim = 0&lt;/code&gt;, and &lt;code&gt;u.ndim = 0, v.ndim = 1&lt;/code&gt; - work.</source>
          <target state="translated">両方の &lt;code&gt;u&lt;/code&gt; 及び &lt;code&gt;v&lt;/code&gt; 0-Dまたは1-D（ndim = 0又は1）が、でなければならない &lt;code&gt;u.ndim&lt;/code&gt; 必要等しくない &lt;code&gt;v.ndim&lt;/code&gt; 。つまり、4つの可能な組み合わせすべて、 &lt;code&gt;u.ndim = v.ndim = 0&lt;/code&gt; 、 &lt;code&gt;u.ndim = v.ndim = 1&lt;/code&gt; 、 &lt;code&gt;u.ndim = 1, v.ndim = 0&lt;/code&gt; 、 &lt;code&gt;u.ndim = 0, v.ndim = 1&lt;/code&gt; 仕事。</target>
        </trans-unit>
        <trans-unit id="88f65d9e2d112f1a7a284a45eccfdccc621dc60d" translate="yes" xml:space="preserve">
          <source>Both C-ordering (&amp;ldquo;last dimension fastest&amp;rdquo;) or Fortran-ordering (&amp;ldquo;first dimension fastest&amp;rdquo;) support for 2D, 3D and 4D arrays.</source>
          <target state="translated">C順序付け（「最後の次元が最も速い」）またはFortran順序付け（「最初の次元が最も速い」）は、2D、3D、4D配列をサポートしています。</target>
        </trans-unit>
        <trans-unit id="3720a76c9cc3b6258ee484172d090cd5b19b7e16" translate="yes" xml:space="preserve">
          <source>Both CTypes and CFFI allow the more complicated distributions to be used directly in Numba after compiling the file distributions.c into a &lt;code&gt;DLL&lt;/code&gt; or &lt;code&gt;so&lt;/code&gt;. An example showing the use of a more complicated distribution is in the &lt;code&gt;examples&lt;/code&gt; section below.</source>
          <target state="translated">CTypesとCFFIはどちらも、ファイルdistributions.cを &lt;code&gt;DLL&lt;/code&gt; などにコンパイルした後、より複雑なディストリビューションをNumbaで直接使用できる &lt;code&gt;so&lt;/code&gt; ます。より複雑なディストリビューションの使用を示す &lt;code&gt;examples&lt;/code&gt; は、以下の例のセクションにあります。</target>
        </trans-unit>
        <trans-unit id="6876b038e6598420047feff6385d214f7a9456e4" translate="yes" xml:space="preserve">
          <source>Both CTypes and CFFI allow the more complicated distributions to be used directly in Numba after compiling the file distributions.c into a DLL or so. An example showing the use of a more complicated distribution is in the examples folder.</source>
          <target state="translated">CTypes と CFFI の両方を使用すると、distribution.c ファイルを DLL などにコンパイルした後に、より複雑なディストリビューションを Numba で直接使用することができます。より複雑なディストリビューションの使用例は、examplesフォルダにあります。</target>
        </trans-unit>
        <trans-unit id="9b2e6b498660f219d33da75fb672071ec22d0de1" translate="yes" xml:space="preserve">
          <source>Both arguments must be convertible to data-type objects with the same total size.</source>
          <target state="translated">両方の引数は、同じ合計サイズのデータ型オブジェクトに変換可能でなければなりません。</target>
        </trans-unit>
        <trans-unit id="25024cfe43b48611add0d26f273e9fb8f30c82d0" translate="yes" xml:space="preserve">
          <source>Both for indexing:</source>
          <target state="translated">どちらもインデックス用。</target>
        </trans-unit>
        <trans-unit id="9c58adbe49cf294225a6b4d010fdfff04815b05a" translate="yes" xml:space="preserve">
          <source>Both of these routines multiply an &lt;em&gt;n&lt;/em&gt; -length array, &lt;em&gt;seq&lt;/em&gt;, of integers and return the result. No overflow checking is performed.</source>
          <target state="translated">これらのルーチンは両方とも、整数の&lt;em&gt;n&lt;/em&gt;長の配列&lt;em&gt;seqを&lt;/em&gt;乗算し、結果を返します。オーバーフローチェックは実行されません。</target>
        </trans-unit>
        <trans-unit id="e7d4dd33376799dad2f66b13833f7382c04f91d5" translate="yes" xml:space="preserve">
          <source>Both the &lt;code&gt;names&lt;/code&gt; and &lt;code&gt;fields&lt;/code&gt; attributes will equal &lt;code&gt;None&lt;/code&gt; for unstructured arrays. The recommended way to test if a dtype is structured is with &lt;code&gt;if dt.names is not None&lt;/code&gt; rather than &lt;code&gt;if dt.names&lt;/code&gt;, to account for dtypes with 0 fields.</source>
          <target state="translated">非構造化配列の場合、 &lt;code&gt;names&lt;/code&gt; 属性と &lt;code&gt;fields&lt;/code&gt; 属性の両方が &lt;code&gt;None&lt;/code&gt; に等しくなります。dtypeが構造化されているかどうかをテストするための推奨される方法は、フィールドが0のdtypeを説明するために、 &lt;code&gt;if dt.names&lt;/code&gt; ではなく &lt;code&gt;if dt.names is not None&lt;/code&gt; でない場合です。</target>
        </trans-unit>
        <trans-unit id="a5df7074d510c649a42e62d1e6b7c4d94875f1b9" translate="yes" xml:space="preserve">
          <source>Both the C and Fortran orders are &lt;a href=&quot;../glossary#term-contiguous&quot;&gt;contiguous&lt;/a&gt;, &lt;em&gt;i.e.,&lt;/em&gt; single-segment, memory layouts, in which every part of the memory block can be accessed by some combination of the indices.</source>
          <target state="translated">CとFortranの両方の順序は&lt;a href=&quot;../glossary#term-contiguous&quot;&gt;連続しています&lt;/a&gt;。&lt;em&gt;つまり、&lt;/em&gt;単一セグメントのメモリレイアウトであり、インデックスの組み合わせによってメモリブロックのすべての部分にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="6a9d7b7663daf24925c25758270cb4610491dfdf" translate="yes" xml:space="preserve">
          <source>Both the C and Fortran orders are &lt;a href=&quot;https://docs.python.org/dev/glossary.html#term-contiguous&quot;&gt;contiguous&lt;/a&gt;, &lt;em&gt;i.e.,&lt;/em&gt; single-segment, memory layouts, in which every part of the memory block can be accessed by some combination of the indices.</source>
          <target state="translated">CとFortranの両方の順序は&lt;a href=&quot;https://docs.python.org/dev/glossary.html#term-contiguous&quot;&gt;連続しています&lt;/a&gt;。&lt;em&gt;つまり、&lt;/em&gt;単一セグメントのメモリレイアウトで、インデックスのいくつかの組み合わせでメモリブロックのすべての部分にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="d093ba37f9ce9c9f30f8fca73c109507dfcb0225" translate="yes" xml:space="preserve">
          <source>Both the Frobenius and nuclear norm orders are only defined for matrices and raise a ValueError when &lt;code&gt;x.ndim != 2&lt;/code&gt;.</source>
          <target state="translated">フロベニウスと核ノルムの両方の次数は行列に対してのみ定義され、 &lt;code&gt;x.ndim != 2&lt;/code&gt; 場合にValueErrorを発生させます。</target>
        </trans-unit>
        <trans-unit id="ffea5bc12b4c544392f03bcbcae76a932ec7e9d3" translate="yes" xml:space="preserve">
          <source>Both vectors with dimension 2.</source>
          <target state="translated">両方とも次元2のベクトルです。</target>
        </trans-unit>
        <trans-unit id="ee63b82109d9ff030ecbe37ab04ceac7db2412e8" translate="yes" xml:space="preserve">
          <source>Breaking long lines: if you can, break after commas in the outermost argument list. Always indent continuation lines appropriately, e.g.,</source>
          <target state="translated">長い行の改行:できれば、一番外側の引数リストのカンマの後で改行してください。継続行は常に適切にインデントしてください。</target>
        </trans-unit>
        <trans-unit id="bd6b304289af9581af2ffeee2445279337f31f30" translate="yes" xml:space="preserve">
          <source>Brighton Webs Ltd., &amp;ldquo;Rayleigh Distribution,&amp;rdquo; &lt;a href=&quot;https://web.archive.org/web/20090514091424/http://brighton-webs.co.uk:80/distributions/rayleigh.asp&quot;&gt;https://web.archive.org/web/20090514091424/http://brighton-webs.co.uk:80/distributions/rayleigh.asp&lt;/a&gt;</source>
          <target state="translated">Brighton Webs Ltd。、「Rayleigh Distribution」、&lt;a href=&quot;https://web.archive.org/web/20090514091424/http://brighton-webs.co.uk:80/distributions/rayleigh.asp&quot;&gt;https：//web.archive.org/web/20090514091424/http：//brighton-webs.co.uk：&lt;/a&gt; 80 / distributions / rayleigh.asp</target>
        </trans-unit>
        <trans-unit id="f95280aadb50a5d76ebefb36fbe813c4a9ec99eb" translate="yes" xml:space="preserve">
          <source>Brighton Webs Ltd., Wald Distribution, &lt;a href=&quot;https://web.archive.org/web/20090423014010/http://www.brighton-webs.co.uk:80/distributions/wald.asp&quot;&gt;https://web.archive.org/web/20090423014010/http://www.brighton-webs.co.uk:80/distributions/wald.asp&lt;/a&gt;</source>
          <target state="translated">Brighton Webs Ltd.、Wald Distribution、&lt;a href=&quot;https://web.archive.org/web/20090423014010/http://www.brighton-webs.co.uk:80/distributions/wald.asp&quot;&gt;https：//web.archive.org/web/20090423014010/http：//www.brighton-webs.co.uk：&lt;/a&gt; 80 / distributions / wald.asp</target>
        </trans-unit>
        <trans-unit id="8d469ff5df319fd73b1f4431adc89a3cb7f9bc26" translate="yes" xml:space="preserve">
          <source>Broadcast an array to a new shape</source>
          <target state="translated">配列を新しい形状にブロードキャストする</target>
        </trans-unit>
        <trans-unit id="73facd5bb35116bed91fa4d11828ee34122a7818" translate="yes" xml:space="preserve">
          <source>Broadcast an array to a new shape.</source>
          <target state="translated">配列を新しい形状にブロードキャストします。</target>
        </trans-unit>
        <trans-unit id="335cb5d296e07dc61fd4677d50111abd1712ceae" translate="yes" xml:space="preserve">
          <source>Broadcast any number of arrays against each other.</source>
          <target state="translated">任意の数の配列を互いにブロードキャストします。</target>
        </trans-unit>
        <trans-unit id="98d4c99349e07c3606d8247f67b6a69bf991b037" translate="yes" xml:space="preserve">
          <source>Broadcast the input parameters against one another, and return an object that encapsulates the result. Amongst others, it has &lt;code&gt;shape&lt;/code&gt; and &lt;code&gt;nd&lt;/code&gt; properties, and may be used as an iterator.</source>
          <target state="translated">入力パラメータを相互にブロードキャストし、結果をカプセル化するオブジェクトを返します。とりわけ、それは &lt;code&gt;shape&lt;/code&gt; と &lt;code&gt;nd&lt;/code&gt; プロパティを持ち、反復子として使用できます。</target>
        </trans-unit>
        <trans-unit id="a82937f02ff3220ad370539cf8e7b1333cdbe7e9" translate="yes" xml:space="preserve">
          <source>Broadcast the input shapes into a single shape.</source>
          <target state="translated">入力された形状を1つの形状にブロードキャストします。</target>
        </trans-unit>
        <trans-unit id="6bb1c7bbc547d77034be314540af70ac8dab269b" translate="yes" xml:space="preserve">
          <source>Broadcasted shape.</source>
          <target state="translated">放送された形。</target>
        </trans-unit>
        <trans-unit id="ba459229366746c447e3cdf752eb917433152cfe" translate="yes" xml:space="preserve">
          <source>Broadcasting</source>
          <target state="translated">Broadcasting</target>
        </trans-unit>
        <trans-unit id="2d4bd5e0675f1aedc285134fe7e6bea24d68a36e" translate="yes" xml:space="preserve">
          <source>Broadcasting (multi-iterators)</source>
          <target state="translated">放送(マルチイテレータ</target>
        </trans-unit>
        <trans-unit id="5e308728b0383411510cb3c77af8cc43a178e5fc" translate="yes" xml:space="preserve">
          <source>Broadcasting Array Iteration</source>
          <target state="translated">放送配列反復</target>
        </trans-unit>
        <trans-unit id="ffca602e6975476928a035e0bd899a364b765bab" translate="yes" xml:space="preserve">
          <source>Broadcasting allows universal functions to deal in a meaningful way with inputs that do not have exactly the same shape.</source>
          <target state="translated">放送では、全く同じ形をしていない入力に対して、普遍的な機能で有意義に対処することができます。</target>
        </trans-unit>
        <trans-unit id="3f1a8f806c9ec4c20408d10522361491e36b1938" translate="yes" xml:space="preserve">
          <source>Broadcasting and scalar multiplication:</source>
          <target state="translated">放送とスカラー乗算。</target>
        </trans-unit>
        <trans-unit id="9c4c6b372f00f9bbc9735f2491e20986adab213c" translate="yes" xml:space="preserve">
          <source>Broadcasting comes up quite often in real world problems. A typical example occurs in the vector quantization (VQ) algorithm used in information theory, classification, and other related areas. The basic operation in VQ [#f0] finds the closest point in a set of points, called codes in VQ jargon, to a given point, called the observation. In the very simple, two-dimensional case shown in &lt;a href=&quot;#figure-5&quot;&gt;Figure 5&lt;/a&gt;, the values in observation describe the weight and height of an athlete to be classified. The codes represent different classes of athletes. &lt;a href=&quot;#f1&quot; id=&quot;id2&quot;&gt;2&lt;/a&gt; Finding the closest point requires calculating the distance between observation and each of the codes. The shortest distance provides the best match. In this example, &lt;code&gt;codes[0]&lt;/code&gt; is the closest class indicating that the athlete is likely a basketball player.</source>
          <target state="translated">放送は、現実の問題で頻繁に発生します。典型的な例は、情報理論、分類、およびその他の関連分野で使用されるベクトル量子化（VQ）アルゴリズムで発生します。 VQ [＃f0]の基本的な操作では、VQ用語でコードと呼ばれる一連のポイントから、観測と呼ばれる特定のポイントに最も近いポイントを見つけます。&lt;a href=&quot;#figure-5&quot;&gt;図5&lt;/a&gt;に示す非常に単純な2次元の場合、観察値は、分類されるアスリートの体重と身長を表します。コードは、さまざまなクラスのアスリートを表しています。&lt;a href=&quot;#f1&quot; id=&quot;id2&quot;&gt;2&lt;/a&gt;最も近い点を見つけるには、観測と各コードの間の距離を計算する必要があります。最短距離が最適です。この例では、 &lt;code&gt;codes[0]&lt;/code&gt; は、アスリートがバスケットボール選手である可能性が高いことを示す最も近いクラスです。</target>
        </trans-unit>
        <trans-unit id="3086582d38372be76fcd6867986780678b3bdbd6" translate="yes" xml:space="preserve">
          <source>Broadcasting is conventional for stacks of arrays</source>
          <target state="translated">アレイのスタックでは、従来から放送が行われています。</target>
        </trans-unit>
        <trans-unit id="60a524b775e11155b5c4df4747f272a28d6e6176" translate="yes" xml:space="preserve">
          <source>Broadcasting is the term used to describe the implicit element-by-element behavior of operations; generally speaking, in NumPy all operations, not just arithmetic operations, but logical, bit-wise, functional, etc., behave in this implicit element-by-element fashion, i.e., they broadcast. Moreover, in the example above, &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; could be multidimensional arrays of the same shape, or a scalar and an array, or even two arrays of with different shapes, provided that the smaller array is &amp;ldquo;expandable&amp;rdquo; to the shape of the larger in such a way that the resulting broadcast is unambiguous. For detailed &amp;ldquo;rules&amp;rdquo; of broadcasting see &lt;a href=&quot;basics.broadcasting#module-numpy.doc.broadcasting&quot;&gt;&lt;code&gt;numpy.doc.broadcasting&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ブロードキャストは、操作の暗黙的な要素ごとの動作を説明するために使用される用語です。一般的に言えば、NumPyでは、算術演算だけでなく、論理演算、ビット演算、関数演算などのすべての演算が、この暗黙的な要素ごとの方法で動作します。つまり、ブロードキャストします。さらに、上記の例で &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;b&lt;/code&gt; とbは同じ形状の多次元配列、スカラーと配列、または異なる形状の2つの配列である可能性があります。ただし、小さい方の配列が大きい方の形状に「拡張可能」である必要があります。結果として得られるブロードキャストが明確になるような方法で。ブロードキャストの詳細な「ルール」については、&lt;a href=&quot;basics.broadcasting#module-numpy.doc.broadcasting&quot;&gt; &lt;code&gt;numpy.doc.broadcasting&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="4f8bfce10b38e0298dd7b485ac126daa93a79456" translate="yes" xml:space="preserve">
          <source>Broadcasting is the term used to describe the implicit element-by-element behavior of operations; generally speaking, in NumPy all operations, not just arithmetic operations, but logical, bit-wise, functional, etc., behave in this implicit element-by-element fashion, i.e., they broadcast. Moreover, in the example above, &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; could be multidimensional arrays of the same shape, or a scalar and an array, or even two arrays of with different shapes, provided that the smaller array is &amp;ldquo;expandable&amp;rdquo; to the shape of the larger in such a way that the resulting broadcast is unambiguous. For detailed &amp;ldquo;rules&amp;rdquo; of broadcasting see &lt;code&gt;basics.broadcasting&lt;/code&gt;.</source>
          <target state="translated">ブロードキャストは、操作の暗黙的な要素ごとの動作を説明するために使用される用語です。一般的に言えば、NumPyでは、算術演算だけでなく、論理演算、ビット演算、関数演算などのすべての演算が、この暗黙的な要素ごとの方法で動作します。つまり、ブロードキャストします。さらに、上記の例で &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;b&lt;/code&gt; とbは同じ形状の多次元配列、スカラーと配列、または異なる形状の2つの配列である可能性があります。ただし、小さい方の配列が大きい方の形状に「拡張可能」であることが条件です。結果として得られるブロードキャストが明確になるような方法で。放送の詳細な「ルール」については、 &lt;code&gt;basics.broadcasting&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="c8a22fa6f76158c02a615ce1e41377e5e327d96b" translate="yes" xml:space="preserve">
          <source>Broadcasting is used throughout NumPy to decide how to handle disparately shaped arrays; for example, all arithmetic operations (&lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, &amp;hellip;) between &lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt;&lt;code&gt;ndarrays&lt;/code&gt;&lt;/a&gt; broadcast the arrays before operation.</source>
          <target state="translated">ブロードキャストはNumPy全体で使用され、異なる形状の配列の処理方法を決定します。たとえば、&lt;a href=&quot;generated/numpy.ndarray#numpy.ndarray&quot;&gt; &lt;code&gt;ndarrays&lt;/code&gt; &lt;/a&gt;間のすべての算術演算（ &lt;code&gt;+&lt;/code&gt; 、 &lt;code&gt;-&lt;/code&gt; 、 &lt;code&gt;*&lt;/code&gt; 、&amp;hellip;）は、演算の前に配列をブロードキャストします。</target>
        </trans-unit>
        <trans-unit id="c2ccb1ef65055f853bfad815cb4304fa00148706" translate="yes" xml:space="preserve">
          <source>Broadcasting over multiple arrays</source>
          <target state="translated">複数のアレイでの放送</target>
        </trans-unit>
        <trans-unit id="8643e22fd07e0fa1b2c6f3538e1689c01bced1a3" translate="yes" xml:space="preserve">
          <source>Broadcasting provides a convenient way of taking the outer product (or any other outer operation) of two arrays. The following example shows an outer addition operation of two 1-d arrays that produces the same result as &lt;a href=&quot;#example-3&quot;&gt;Example 3&lt;/a&gt;</source>
          <target state="translated">ブロードキャストは、2つの配列の外積（またはその他の外積）を取得する便利な方法を提供します。次の例は、&lt;a href=&quot;#example-3&quot;&gt;例3&lt;/a&gt;と同じ結果を生成する2つの1次元配列の外部加算操作を示しています。</target>
        </trans-unit>
        <trans-unit id="f086db6f9cde283cd15667e2a34db081fa8323d1" translate="yes" xml:space="preserve">
          <source>Broadcasting provides a convenient way of taking the outer product (or any other outer operation) of two arrays. The following example shows an outer addition operation of two 1-d arrays:</source>
          <target state="translated">放送は、2つの配列の外積(または他の任意の外積演算)を取る便利な方法を提供します。次の例は、2つの1次元配列の外部加算演算を示しています。</target>
        </trans-unit>
        <trans-unit id="916a860416eab96b40dda7fe2424a559b1d3ae5f" translate="yes" xml:space="preserve">
          <source>Broadcasting rules</source>
          <target state="translated">放送ルール</target>
        </trans-unit>
        <trans-unit id="d8a2b5b45365993f46ca0dedffba4cb7be1f878c" translate="yes" xml:space="preserve">
          <source>Broadcasting rules apply, see the &lt;a href=&quot;../routines.linalg#module-numpy.linalg&quot;&gt;&lt;code&gt;numpy.linalg&lt;/code&gt;&lt;/a&gt; documentation for details.</source>
          <target state="translated">ブロードキャストルールが適用されます。詳しくは、&lt;a href=&quot;../routines.linalg#module-numpy.linalg&quot;&gt; &lt;code&gt;numpy.linalg&lt;/code&gt; の&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="d885a1b2d5577844b42f9c37b9817de5d134c079" translate="yes" xml:space="preserve">
          <source>Broadcasting was always implemented in Numeric using 0-valued strides for the extended dimensions. It is done in exactly the same way in NumPy. The big difference is that now the array of strides is kept track of in a &lt;a href=&quot;c-api.types-and-structures#c.PyArrayIterObject&quot;&gt;&lt;code&gt;PyArrayIterObject&lt;/code&gt;&lt;/a&gt;, the iterators involved in a broadcast result are kept track of in a &lt;a href=&quot;c-api.types-and-structures#c.PyArrayMultiIterObject&quot;&gt;&lt;code&gt;PyArrayMultiIterObject&lt;/code&gt;&lt;/a&gt;, and the &lt;code&gt;PyArray_BroadCast&lt;/code&gt; call implements the broad-casting rules.</source>
          <target state="translated">放送は常に拡張ディメンションに0値のストライドを使用して数値で実装されました。NumPyでもまったく同じ方法で行われます。大きな違いは、中の今一歩の配列が保たれているトラックということです&lt;a href=&quot;c-api.types-and-structures#c.PyArrayIterObject&quot;&gt; &lt;code&gt;PyArrayIterObject&lt;/code&gt; は&lt;/a&gt;、放送結果に関与イテレータは、中のトラックを保持している&lt;a href=&quot;c-api.types-and-structures#c.PyArrayMultiIterObject&quot;&gt; &lt;code&gt;PyArrayMultiIterObject&lt;/code&gt; &lt;/a&gt;、および &lt;code&gt;PyArray_BroadCast&lt;/code&gt; のコールを実装幅広いキャストルール。</target>
        </trans-unit>
        <trans-unit id="34f655aae3670aa20a7e4bb7846e02a31bb3ce80" translate="yes" xml:space="preserve">
          <source>Broadcasting was always implemented in Numeric using 0-valued strides for the extended dimensions. It is done in exactly the same way in NumPy. The big difference is that now the array of strides is kept track of in a &lt;a href=&quot;c-api/types-and-structures#c.PyArrayIterObject&quot;&gt;&lt;code&gt;PyArrayIterObject&lt;/code&gt;&lt;/a&gt;, the iterators involved in a broadcast result are kept track of in a &lt;a href=&quot;c-api/types-and-structures#c.PyArrayMultiIterObject&quot;&gt;&lt;code&gt;PyArrayMultiIterObject&lt;/code&gt;&lt;/a&gt;, and the &lt;a href=&quot;c-api/array#c.PyArray_Broadcast&quot;&gt;&lt;code&gt;PyArray_Broadcast&lt;/code&gt;&lt;/a&gt; call implements the broad-casting rules.</source>
          <target state="translated">ブロードキャストは常に、拡張ディメンションに0値のストライドを使用して数値で実装されていました。これは、NumPyでもまったく同じ方法で行われます。大きな違いは、中の今一歩の配列が保たれているトラックということです&lt;a href=&quot;c-api/types-and-structures#c.PyArrayIterObject&quot;&gt; &lt;code&gt;PyArrayIterObject&lt;/code&gt; は&lt;/a&gt;、放送結果に関与イテレータは、中のトラックを保持している&lt;a href=&quot;c-api/types-and-structures#c.PyArrayMultiIterObject&quot;&gt; &lt;code&gt;PyArrayMultiIterObject&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;c-api/array#c.PyArray_Broadcast&quot;&gt; &lt;code&gt;PyArray_Broadcast&lt;/code&gt; の&lt;/a&gt;コールを実装幅広いキャストルール。</target>
        </trans-unit>
        <trans-unit id="2a0a6879b6872d1f7b106e1d3c8e15aa2bd9c9f9" translate="yes" xml:space="preserve">
          <source>Broadcasting was always implemented in Numeric using 0-valued strides for the extended dimensions. It is done in exactly the same way in NumPy. The big difference is that now the array of strides is kept track of in a &lt;a href=&quot;c-api/types-and-structures#c.PyArrayIterObject&quot;&gt;&lt;code&gt;PyArrayIterObject&lt;/code&gt;&lt;/a&gt;, the iterators involved in a broadcast result are kept track of in a &lt;a href=&quot;c-api/types-and-structures#c.PyArrayMultiIterObject&quot;&gt;&lt;code&gt;PyArrayMultiIterObject&lt;/code&gt;&lt;/a&gt;, and the &lt;code&gt;PyArray_BroadCast&lt;/code&gt; call implements the broad-casting rules.</source>
          <target state="translated">ブロードキャストは常に、拡張ディメンションに0値のストライドを使用して数値で実装されていました。これは、NumPyでもまったく同じ方法で行われます。大きな違いは、中の今一歩の配列が保たれているトラックということです&lt;a href=&quot;c-api/types-and-structures#c.PyArrayIterObject&quot;&gt; &lt;code&gt;PyArrayIterObject&lt;/code&gt; は&lt;/a&gt;、放送結果に関与イテレータは、中のトラックを保持している&lt;a href=&quot;c-api/types-and-structures#c.PyArrayMultiIterObject&quot;&gt; &lt;code&gt;PyArrayMultiIterObject&lt;/code&gt; &lt;/a&gt;、および &lt;code&gt;PyArray_BroadCast&lt;/code&gt; のコールを実装幅広いキャストルール。</target>
        </trans-unit>
        <trans-unit id="6cc8d02b192349a4f1b4b7f860e5e3a1c421ecb8" translate="yes" xml:space="preserve">
          <source>Broadcasting, element-wise and scalar multiplication, &lt;a href=&quot;numpy.multiply#numpy.multiply&quot;&gt;&lt;code&gt;numpy.multiply&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ブロードキャスト、要素ごとのスカラー乗算、&lt;a href=&quot;numpy.multiply#numpy.multiply&quot;&gt; &lt;code&gt;numpy.multiply&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="90812c9e094ac5522eea3d57aa754d6964a1cdf2" translate="yes" xml:space="preserve">
          <source>Buffer (&lt;code&gt;buf&lt;/code&gt;) is interpreted according to these strides (strides define how many bytes each array element, row, column, etc. occupy in memory).</source>
          <target state="translated">バッファ（ &lt;code&gt;buf&lt;/code&gt; ）は、これらのストライドに従って解釈されます（ストライドは、各配列要素、行、列などがメモリで占有するバイト数を定義します）。</target>
        </trans-unit>
        <trans-unit id="3a3c6f456f2df72c3dcf8bdef2f2f225bc537cc1" translate="yes" xml:space="preserve">
          <source>Buffer of binary data</source>
          <target state="translated">バイナリデータのバッファ</target>
        </trans-unit>
        <trans-unit id="27cb2ff0185bcfdbaec6ac70d0f611c9c03b02a8" translate="yes" xml:space="preserve">
          <source>Buffered Loop</source>
          <target state="translated">バッファードループ</target>
        </trans-unit>
        <trans-unit id="3aa9875f6199e297bab60e3e7102191f0ce73af1" translate="yes" xml:space="preserve">
          <source>Buffered iterator for big arrays.</source>
          <target state="translated">大きな配列のためのバッファ付きイテレータ.</target>
        </trans-unit>
        <trans-unit id="6d37057306b02ade5a2d41571a0c0e632337fc5c" translate="yes" xml:space="preserve">
          <source>Buffering mode mitigates the memory usage issue and is more cache-friendly than making temporary copies. Except for special cases, where the whole array is needed at once outside the iterator, buffering is recommended over temporary copying. Within NumPy, buffering is used by the ufuncs and other functions to support flexible inputs with minimal memory overhead.</source>
          <target state="translated">バッファリングモードはメモリ使用量の問題を軽減し、一時的なコピーよりもキャッシュに優しいです。イテレータの外側で配列全体を一度に必要とするような特別な場合を除き,一時的なコピーよりもバッファリングが推奨されます.NumPyの中では,バッファリングはufuncsや他の関数によって使用され,最小限のメモリオーバーヘッドで柔軟な入力をサポートします.</target>
        </trans-unit>
        <trans-unit id="aff21481cc1c0abc2cbd1fe3d4ce255d0403752e" translate="yes" xml:space="preserve">
          <source>Buffering the Array Elements</source>
          <target state="translated">配列要素のバッファリング</target>
        </trans-unit>
        <trans-unit id="e0ea19fac7306381f9369bebfc56bf181ad2f644" translate="yes" xml:space="preserve">
          <source>Bugs Fixed</source>
          <target state="translated">修正されたバグ</target>
        </trans-unit>
        <trans-unit id="ac95995878b77d2a8ce4a1c4b232969f85fc5862" translate="yes" xml:space="preserve">
          <source>Build System Changes</source>
          <target state="translated">ビルドシステムの変更</target>
        </trans-unit>
        <trans-unit id="041e1aac6c7d1e7294bc5d8fa3967aabcde7a325" translate="yes" xml:space="preserve">
          <source>Build a matrix object from a string, nested sequence, or array.</source>
          <target state="translated">文字列,入れ子になったシーケンス,配列から行列オブジェクトを作成します.</target>
        </trans-unit>
        <trans-unit id="62d0591005ae8571425b97ff29068016515cd29b" translate="yes" xml:space="preserve">
          <source>Build and archive documentation</source>
          <target state="translated">ドキュメントの構築とアーカイブ</target>
        </trans-unit>
        <trans-unit id="7fcd3a3a0bc7c1a4ce328d262f632a0650b70528" translate="yes" xml:space="preserve">
          <source>Build extension module from a Fortran 77 source string with f2py.</source>
          <target state="translated">f2pyでFortran77のソース文字列から拡張モジュールをビルドします。</target>
        </trans-unit>
        <trans-unit id="1d349060ba731253879161224c46e4521b75c084" translate="yes" xml:space="preserve">
          <source>Build options can be discovered by running any of:</source>
          <target state="translated">ビルドオプションは、いずれかを実行することで発見することができます。</target>
        </trans-unit>
        <trans-unit id="368f9cf215b81c7db781f6218da65973b2216ee7" translate="yes" xml:space="preserve">
          <source>Build options for compilation</source>
          <target state="translated">コンパイル時のビルドオプション</target>
        </trans-unit>
        <trans-unit id="7b1b626e82829b0dfeb4bfac3a16b7d5bcd6a8fc" translate="yes" xml:space="preserve">
          <source>Build source releases</source>
          <target state="translated">ビルドソースリリース</target>
        </trans-unit>
        <trans-unit id="6e79e48e57f84dbe7fa157bde2a3fead704bb75d" translate="yes" xml:space="preserve">
          <source>Build system</source>
          <target state="translated">ビルドシステム</target>
        </trans-unit>
        <trans-unit id="ea4c8827fa3eb397f1363449f23094e9e120bb77" translate="yes" xml:space="preserve">
          <source>Build the changelog and notes for upload with:</source>
          <target state="translated">でアップロードするための変更履歴とノートを作成します。</target>
        </trans-unit>
        <trans-unit id="133bc31192cbeea22da4122bb90ba0a93a894d67" translate="yes" xml:space="preserve">
          <source>Build wheels</source>
          <target state="translated">ビルドホイール</target>
        </trans-unit>
        <trans-unit id="d0fa723cff6db05fe0f943d3ba65530fea4a58d8" translate="yes" xml:space="preserve">
          <source>Building Installable C libraries</source>
          <target state="translated">インストール可能な C ライブラリの構築</target>
        </trans-unit>
        <trans-unit id="fc68ddc861d1de39d367519f523580fe22e0de8b" translate="yes" xml:space="preserve">
          <source>Building NumPy requires the following software installed:</source>
          <target state="translated">NumPyの構築には、以下のソフトウェアのインストールが必要です。</target>
        </trans-unit>
        <trans-unit id="f7247d0ef96399c8a6f6f94bdfcbbd262feaf108" translate="yes" xml:space="preserve">
          <source>Building NumPy with a Python built with debug support (on Linux distributions typically packaged as &lt;code&gt;python-dbg&lt;/code&gt;) is highly recommended.</source>
          <target state="translated">デバッグサポート付きでビルドされたPythonを使用してNumPyをビルドすることを強くお勧めします（Linuxディストリビューションでは通常 &lt;code&gt;python-dbg&lt;/code&gt; としてパッケージ化されています）。</target>
        </trans-unit>
        <trans-unit id="e3ab4efd8b4a10d38ed8959a1cb29fc9881db378" translate="yes" xml:space="preserve">
          <source>Building against OpenBLAS</source>
          <target state="translated">OpenBLASに対抗したビルド</target>
        </trans-unit>
        <trans-unit id="f1cd4f14fd9faeca78fccf35fd005e67e4d55852" translate="yes" xml:space="preserve">
          <source>Building and Extending the Documentation</source>
          <target state="translated">ドキュメントの構築と拡張</target>
        </trans-unit>
        <trans-unit id="e724a6fd06203378a19b755ba05b8cd55da0f623" translate="yes" xml:space="preserve">
          <source>Building and extending the documentation</source>
          <target state="translated">ドキュメントの構築と拡張</target>
        </trans-unit>
        <trans-unit id="ea6e2e9b251f8b11fe3d952437e66c0d7503db76" translate="yes" xml:space="preserve">
          <source>Building docs</source>
          <target state="translated">ドキュメントの構築</target>
        </trans-unit>
        <trans-unit id="8cd56ee99256f6026c82a35e18d75551094d8936" translate="yes" xml:space="preserve">
          <source>Building from source</source>
          <target state="translated">ソースからの構築</target>
        </trans-unit>
        <trans-unit id="797c000e127fd646fe95625f81ea1c57543896ff" translate="yes" xml:space="preserve">
          <source>Building in-place</source>
          <target state="translated">インプレイスの構築</target>
        </trans-unit>
        <trans-unit id="e1f8c7d7fa78c6eb31ad5ca785a393676894e731" translate="yes" xml:space="preserve">
          <source>Building matrices</source>
          <target state="translated">行列の構築</target>
        </trans-unit>
        <trans-unit id="d1d8b51984115777766e2f069b697c4bb754479c" translate="yes" xml:space="preserve">
          <source>Building source archives and wheels</source>
          <target state="translated">ソースアーカイブとホイールの構築</target>
        </trans-unit>
        <trans-unit id="1cc054390cfe90161261914ab7d65d3cfee4150a" translate="yes" xml:space="preserve">
          <source>Building the NumPy API and reference docs</source>
          <target state="translated">NumPy APIとリファレンスドキュメントの構築</target>
        </trans-unit>
        <trans-unit id="2b0584a2ddbe43766e4479e6f854126bbc0cb8a1" translate="yes" xml:space="preserve">
          <source>Building the documents requires a number of latex &lt;code&gt;.sty&lt;/code&gt; files. Install them all to avoid aggravation.</source>
          <target state="translated">ドキュメントを作成するには、多数のラテックス &lt;code&gt;.sty&lt;/code&gt; ファイルが必要です。悪化を避けるためにそれらをすべて取り付けてください。</target>
        </trans-unit>
        <trans-unit id="2afe730004d87377bea3908e9c6c7255bf4ce79e" translate="yes" xml:space="preserve">
          <source>Building the extension module can be now carried out in one command:</source>
          <target state="translated">拡張モジュールのビルドが1つのコマンドで行えるようになりました。</target>
        </trans-unit>
        <trans-unit id="fe2db8e7c7c6c32ba1fc4b4a6634f60ac081da44" translate="yes" xml:space="preserve">
          <source>Builds a set of strides which are the same as the strides of an output array created using the &lt;a href=&quot;#c.NPY_ITER_ALLOCATE&quot;&gt;&lt;code&gt;NPY_ITER_ALLOCATE&lt;/code&gt;&lt;/a&gt; flag, where NULL was passed for op_axes. This is for data packed contiguously, but not necessarily in C or Fortran order. This should be used together with &lt;a href=&quot;#c.NpyIter_GetShape&quot;&gt;&lt;code&gt;NpyIter_GetShape&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#c.NpyIter_GetNDim&quot;&gt;&lt;code&gt;NpyIter_GetNDim&lt;/code&gt;&lt;/a&gt; with the flag &lt;a href=&quot;#c.NPY_ITER_MULTI_INDEX&quot;&gt;&lt;code&gt;NPY_ITER_MULTI_INDEX&lt;/code&gt;&lt;/a&gt; passed into the constructor.</source>
          <target state="translated">&lt;a href=&quot;#c.NPY_ITER_ALLOCATE&quot;&gt; &lt;code&gt;NPY_ITER_ALLOCATE&lt;/code&gt; &lt;/a&gt;にNULLが渡された、NPY_ITER_ALLOCATEフラグを使用して作成された出力配列のストライドと同じストライドのセットを作成します。これは、連続してパックされたデータ用ですが、必ずしもCまたはFortranの順序でパックされているわけではありません。これは、フラグ&lt;a href=&quot;#c.NPY_ITER_MULTI_INDEX&quot;&gt; &lt;code&gt;NPY_ITER_MULTI_INDEX&lt;/code&gt; をコンストラクターに&lt;/a&gt;渡して、&lt;a href=&quot;#c.NpyIter_GetShape&quot;&gt; &lt;code&gt;NpyIter_GetShape&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#c.NpyIter_GetNDim&quot;&gt; &lt;code&gt;NpyIter_GetNDim&lt;/code&gt; &lt;/a&gt;と一緒に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="8b40e55c8fd12c110479c1a8e453add933b9c6e8" translate="yes" xml:space="preserve">
          <source>Built-in Python types</source>
          <target state="translated">Python の組み込み型</target>
        </trans-unit>
        <trans-unit id="b858e075ef402953578da270159a51f6ad1575b6" translate="yes" xml:space="preserve">
          <source>Built-in scalar types</source>
          <target state="translated">組み込みのスカラ型</target>
        </trans-unit>
        <trans-unit id="4a2892e18069d1f5869c7225c38ebadc7aa96d21" translate="yes" xml:space="preserve">
          <source>Bundled version of LAPACK is now 3.2.2</source>
          <target state="translated">LAPACKのバンドル版が3.2.2になりました。</target>
        </trans-unit>
        <trans-unit id="f0300972b4a8f0b0074aec4f6903cf3e57d597c8" translate="yes" xml:space="preserve">
          <source>Business Day Functionality</source>
          <target state="translated">営業日機能</target>
        </trans-unit>
        <trans-unit id="3cbeeffaaa46e0b3d6b0ea56538a20f899791f42" translate="yes" xml:space="preserve">
          <source>Business Day Functions</source>
          <target state="translated">営業日の機能</target>
        </trans-unit>
        <trans-unit id="a4da80602eb90228591a52fa43450b5af3478d27" translate="yes" xml:space="preserve">
          <source>But different types can be used for substitution. In fact, this is how conversion of Polynomial classes among themselves is done for type, domain, and window casting:</source>
          <target state="translated">しかし、異なる型は置換のために使用することができます。実際には、多項式クラス同士の変換は、このようにして型、ドメイン、ウィンドウキャストのために行われます。</target>
        </trans-unit>
        <trans-unit id="bd8c2ef60d42745d2cdc473c152c1f9687c4dcc2" translate="yes" xml:space="preserve">
          <source>But if &lt;code&gt;rowsum&lt;/code&gt; would have two dimensions as well:</source>
          <target state="translated">ただし、 &lt;code&gt;rowsum&lt;/code&gt; にも2つの次元がある場合：</target>
        </trans-unit>
        <trans-unit id="a50860d81b9d10875263242c5534750b4457432a" translate="yes" xml:space="preserve">
          <source>But if the arrays have different dtype metadata, the metadata may be dropped:</source>
          <target state="translated">しかし、配列が異なるdtypeのメタデータを持っている場合は、メタデータが削除されることがあります。</target>
        </trans-unit>
        <trans-unit id="2cce3613bf130a21ef8719b403ca292f0f091a49" translate="yes" xml:space="preserve">
          <source>But in certain useful cases, NumPy can duplicate data along &amp;ldquo;missing&amp;rdquo; axes or &amp;ldquo;too-short&amp;rdquo; dimensions so shapes will match. The duplication costs no memory or time. For details, see &lt;a href=&quot;user/basics.broadcasting&quot;&gt;Broadcasting.&lt;/a&gt;</source>
          <target state="translated">ただし、特定の便利なケースでは、NumPyは「欠落した」軸または「短すぎる」寸法に沿ってデータを複製し、形状が一致するようにすることができます。複製にはメモリや時間はかかりません。詳細については、&lt;a href=&quot;user/basics.broadcasting&quot;&gt;ブロードキャストを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b4df18df25d280603f202e60c13a7a8f66254798" translate="yes" xml:space="preserve">
          <source>But is also allowed to produce, for some &lt;code&gt;a, b, c, d&lt;/code&gt;:</source>
          <target state="translated">ただし、一部の &lt;code&gt;a, b, c, d&lt;/code&gt; についても生成できます。</target>
        </trans-unit>
        <trans-unit id="95f2ff26f5da95b9bea4d70486f2a022cde496b8" translate="yes" xml:space="preserve">
          <source>But it automatically handles negative inputs:</source>
          <target state="translated">しかし、負の入力は自動的に処理されます。</target>
        </trans-unit>
        <trans-unit id="6646b6ecbc06bc26898d3bc8dfd20372b9b785ad" translate="yes" xml:space="preserve">
          <source>But that&amp;rsquo;s not the only way to look at it. Suppose one has large two-dimensional arrays (images or matrices) stored in data files. Suppose the data are stored by rows rather than by columns. If we are to preserve our index convention (whether matrix or image) that means that depending on the language we use, we may be forced to reorder the data if it is read into memory to preserve our indexing convention. For example if we read row-ordered data into memory without reordering, it will match the matrix indexing convention for C, but not for Fortran. Conversely, it will match the image indexing convention for Fortran, but not for C. For C, if one is using data stored in row order, and one wants to preserve the image index convention, the data must be reordered when reading into memory.</source>
          <target state="translated">しかし、それはそれを見る唯一の方法ではありません。大きな2次元配列（画像または行列）がデータファイルに格納されているとします。データが列ではなく行で格納されているとします。インデックスの規則（行列または画像）を保持する場合、使用する言語によっては、データをメモリに読み込んでインデックスの規則を保持すると、データの順序を変更しなければならない場合があります。たとえば、行順データを並べ替えずにメモリに読み込んだ場合、Cの行列のインデックス付け規則と一致しますが、Fortranとは一致しません。逆に、それはFortranのイメージインデックス規則と一致しますが、Cとは一致しません。Cの場合、行順に格納されたデータを使用していて、イメージインデックス規則を保持したい場合は、メモリに読み込むときにデータを並べ替える必要があります。</target>
        </trans-unit>
        <trans-unit id="6e0bd4df436692919faeb191ed09cf810cb22035" translate="yes" xml:space="preserve">
          <source>But there are cross-platform considerations, such as library file extensions, plus the fact Windows will just load the first library it finds with that name. NumPy supplies the load_library function as a convenience.</source>
          <target state="translated">しかし、ライブラリファイルの拡張子や、Windowsはその名前で最初に見つかったライブラリを読み込むだけという事実など、クロスプラットフォームでの配慮があります。NumPy は便利なように load_library 関数を提供しています。</target>
        </trans-unit>
        <trans-unit id="ec781290ccbee49bdd7da500afd06d4ca2f948bf" translate="yes" xml:space="preserve">
          <source>But this omits some subtleties. Here is a fully general summary:</source>
          <target state="translated">しかし、これはいくつかの微妙な点を省略しています。ここでは、完全に大まかな概要を説明します。</target>
        </trans-unit>
        <trans-unit id="9d33835f4b0ffd7a417785ade1f5f4a66909b7f6" translate="yes" xml:space="preserve">
          <source>But we can also specify the axis over which to multiply:</source>
          <target state="translated">しかし、乗算する軸を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="9f79d5f66a9deb8e0798847bf7ab428de8db1e5a" translate="yes" xml:space="preserve">
          <source>But when you use &lt;code&gt;ravel&lt;/code&gt;, the changes you make to the new array will affect the parent array.</source>
          <target state="translated">ただし、 &lt;code&gt;ravel&lt;/code&gt; を使用する場合、新しい配列に加えた変更は親配列に影響します。</target>
        </trans-unit>
        <trans-unit id="7460c60c1fec76b65a3c31a575c95674fb86e283" translate="yes" xml:space="preserve">
          <source>But, we could do anything we wanted:</source>
          <target state="translated">でも、やりたいことは何でもできました。</target>
        </trans-unit>
        <trans-unit id="e13f0fd9c0e50a5064cf51cb50663812feb86a8e" translate="yes" xml:space="preserve">
          <source>Buzas, Martin A.; Culver, Stephen J., Understanding regional species diversity through the log series distribution of occurrences: BIODIVERSITY RESEARCH Diversity &amp;amp; Distributions, Volume 5, Number 5, September 1999 , pp. 187-195(9).</source>
          <target state="translated">ブザス、マーティンA .; カルバー、スティーブンJ.、発生の対数系列分布による地域種の多様性の理解：生物多様性研究多様性と分布、第5巻、第5号、1999年9月、187-195頁（9）。</target>
        </trans-unit>
        <trans-unit id="66360bf7fbf8657df2c1591ab899dd54476a182c" translate="yes" xml:space="preserve">
          <source>By choosing an offset of 8 bytes we can select the complex part of the array for our view:</source>
          <target state="translated">8 バイトのオフセットを選択することで、配列の複雑な部分を選択して表示することができます。</target>
        </trans-unit>
        <trans-unit id="c96bbfd74d3086f0a931f577a61fdefbdd812bbe" translate="yes" xml:space="preserve">
          <source>By constructing a new ndarray of your desired shape and type using &lt;a href=&quot;../reference/c-api/array#c.PyArray_NewFromDescr&quot;&gt;&lt;code&gt;PyArray_NewFromDescr&lt;/code&gt;&lt;/a&gt; or a simpler macro or function based on it.</source>
          <target state="translated">&lt;a href=&quot;../reference/c-api/array#c.PyArray_NewFromDescr&quot;&gt; &lt;code&gt;PyArray_NewFromDescr&lt;/code&gt; &lt;/a&gt;またはそれに基づくより単純なマクロまたは関数を使用して、目的の形状とタイプの新しいndarrayを作成します。</target>
        </trans-unit>
        <trans-unit id="6503cfb311994e99b18c321cb4370162b665063d" translate="yes" xml:space="preserve">
          <source>By convention, the negative sign represents cash flow out (i.e. money not available today). Thus, saving $100 a month at 5% annual interest leads to $15,692.93 available to spend in 10 years.</source>
          <target state="translated">慣例では、負の符号はキャッシュ・フロー・アウト(つまり今日使えないお金)を表しています。したがって、5%の年利で月100ドルを節約すると、10年後に使用可能な15,692.93ドルになります。</target>
        </trans-unit>
        <trans-unit id="7f5fbe94c54051531f7d898251f9826df16e5720" translate="yes" xml:space="preserve">
          <source>By convention, the negative sign represents cash flow out (i.e., money not available today). Thus, to end up with $15,692.93 in 10 years saving $100 a month at 5% annual interest, one&amp;rsquo;s initial deposit should also be $100.</source>
          <target state="translated">慣例により、負の符号はキャッシュフロー（つまり、現在利用できないお金）を表します。したがって、10年間で$ 15,692.93になり、年利5％で月額$ 100を節約するには、初回預金も$ 100にする必要があります。</target>
        </trans-unit>
        <trans-unit id="e8f9209679e0d480aec7fb981fefcc0f2b86d6ab" translate="yes" xml:space="preserve">
          <source>By converting it from some Python object using &lt;a href=&quot;../reference/c-api/array#c.PyArray_FromAny&quot;&gt;&lt;code&gt;PyArray_FromAny&lt;/code&gt;&lt;/a&gt; or a macro built on it.</source>
          <target state="translated">&lt;a href=&quot;../reference/c-api/array#c.PyArray_FromAny&quot;&gt; &lt;code&gt;PyArray_FromAny&lt;/code&gt; &lt;/a&gt;またはその上に構築されたマクロを使用してPythonオブジェクトから変換する。</target>
        </trans-unit>
        <trans-unit id="2387467eae05dde35d2654a3dbfc0d30bc85b00f" translate="yes" xml:space="preserve">
          <source>By default (&lt;code&gt;align=False&lt;/code&gt;), numpy will pack the fields together such that each field starts at the byte offset the previous field ended, and the fields are contiguous in memory.</source>
          <target state="translated">デフォルト（ &lt;code&gt;align=False&lt;/code&gt; ）では、numpyはフィールドをまとめてパックし、各フィールドは前のフィールドが終了したバイトオフセットで開始し、フィールドはメモリ内で連続します。</target>
        </trans-unit>
        <trans-unit id="52bf606add02bda44e68afd9558117218dd1b2cb" translate="yes" xml:space="preserve">
          <source>By default &lt;a href=&quot;#numpy.testing.rundocs&quot;&gt;&lt;code&gt;rundocs&lt;/code&gt;&lt;/a&gt; raises an AssertionError on failure.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;#numpy.testing.rundocs&quot;&gt; &lt;code&gt;rundocs&lt;/code&gt; &lt;/a&gt;は失敗時にAssertionErrorを発生させます。</target>
        </trans-unit>
        <trans-unit id="57786a266025c7ab2defbf0e660b34ff7cd9c745" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;../arrays.scalars#numpy.float16&quot;&gt;&lt;code&gt;float16&lt;/code&gt;&lt;/a&gt; results are computed using &lt;a href=&quot;../arrays.scalars#numpy.float32&quot;&gt;&lt;code&gt;float32&lt;/code&gt;&lt;/a&gt; intermediates for extra precision.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;../arrays.scalars#numpy.float16&quot;&gt; &lt;code&gt;float16&lt;/code&gt; の&lt;/a&gt;結果は、精度を&lt;a href=&quot;../arrays.scalars#numpy.float32&quot;&gt; &lt;code&gt;float32&lt;/code&gt; &lt;/a&gt;ためにfloat32中間体を使用して計算されます。</target>
        </trans-unit>
        <trans-unit id="bd3d90ca79bba610cc2cceb26a3b68c32b444a0a" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;generated/numpy.random.generator.permuted#numpy.random.Generator.permuted&quot;&gt;&lt;code&gt;Generator.permuted&lt;/code&gt;&lt;/a&gt; returns a copy. To operate in-place with &lt;a href=&quot;generated/numpy.random.generator.permuted#numpy.random.Generator.permuted&quot;&gt;&lt;code&gt;Generator.permuted&lt;/code&gt;&lt;/a&gt;, pass the same array as the first argument &lt;em&gt;and&lt;/em&gt; as the value of the &lt;code&gt;out&lt;/code&gt; parameter. For example,</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;generated/numpy.random.generator.permuted#numpy.random.Generator.permuted&quot;&gt; &lt;code&gt;Generator.permuted&lt;/code&gt; &lt;/a&gt;はコピーを返します。&lt;a href=&quot;generated/numpy.random.generator.permuted#numpy.random.Generator.permuted&quot;&gt; &lt;code&gt;Generator.permuted&lt;/code&gt; &lt;/a&gt;を使用してインプレースで操作するには、最初の引数&lt;em&gt;および&lt;/em&gt; &lt;code&gt;out&lt;/code&gt; パラメーターの値&lt;em&gt;と&lt;/em&gt;同じ配列を渡します。例えば、</target>
        </trans-unit>
        <trans-unit id="0791e549c9e1c0c68c18f4046427ddfd65fee6cf" translate="yes" xml:space="preserve">
          <source>By default, &lt;a href=&quot;generator#numpy.random.Generator&quot;&gt;&lt;code&gt;Generator&lt;/code&gt;&lt;/a&gt; uses bits provided by &lt;a href=&quot;bit_generators/pcg64#numpy.random.pcg64.PCG64&quot;&gt;&lt;code&gt;PCG64&lt;/code&gt;&lt;/a&gt; which has better statistical properties than the legacy mt19937 random number generator in &lt;a href=&quot;legacy#numpy.random.mtrand.RandomState&quot;&gt;&lt;code&gt;RandomState&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;generator#numpy.random.Generator&quot;&gt; &lt;code&gt;Generator&lt;/code&gt; &lt;/a&gt;によって提供されるビット使用&lt;a href=&quot;bit_generators/pcg64#numpy.random.pcg64.PCG64&quot;&gt; &lt;code&gt;PCG64&lt;/code&gt; &lt;/a&gt;におけるレガシーMT19937乱数発生器よりも良好な統計的性質を有する&lt;a href=&quot;legacy#numpy.random.mtrand.RandomState&quot;&gt; &lt;code&gt;RandomState&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2eb2435c3e98faf455297cd059d456431f056aed" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;float16&lt;/code&gt; results are computed using &lt;code&gt;float32&lt;/code&gt; intermediates for extra precision.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;float16&lt;/code&gt; の結果は、精度を &lt;code&gt;float32&lt;/code&gt; ためにfloat32中間体を使用して計算されます。</target>
        </trans-unit>
        <trans-unit id="f255d5e8f1a7ce5480c00642bd965d8cbd147605" translate="yes" xml:space="preserve">
          <source>By default, &lt;code&gt;skip_header=0&lt;/code&gt; and &lt;code&gt;skip_footer=0&lt;/code&gt;, meaning that no lines are skipped.</source>
          <target state="translated">デフォルトでは、 &lt;code&gt;skip_header=0&lt;/code&gt; および &lt;code&gt;skip_footer=0&lt;/code&gt; です。これは、行がスキップされないことを意味します。</target>
        </trans-unit>
        <trans-unit id="509cc82d7b395ceb5fa528a542a3fa0619544044" translate="yes" xml:space="preserve">
          <source>By default, a new array is created of the given shape and data-type. If &lt;code&gt;buf&lt;/code&gt; is specified and is an object exposing the buffer interface, the array will use the memory from the existing buffer. In this case, the &lt;code&gt;offset&lt;/code&gt; and &lt;a href=&quot;numpy.recarray.strides#numpy.recarray.strides&quot;&gt;&lt;code&gt;strides&lt;/code&gt;&lt;/a&gt; keywords are available.</source>
          <target state="translated">デフォルトでは、指定された形状とデータ型の新しい配列が作成されます。場合 &lt;code&gt;buf&lt;/code&gt; 指定され、バッファインタフェースを露出するオブジェクトである、アレイは、既存のバッファからメモリを使用します。この場合、 &lt;code&gt;offset&lt;/code&gt; キーワードと&lt;a href=&quot;numpy.recarray.strides#numpy.recarray.strides&quot;&gt; &lt;code&gt;strides&lt;/code&gt; &lt;/a&gt;キーワードを使用できます。</target>
        </trans-unit>
        <trans-unit id="823f8fa3f73a578c65a2065fa5f02e69dcee70ef" translate="yes" xml:space="preserve">
          <source>By default, all user-defined data-types are not presumed to be safely castable to any builtin data-types. In addition builtin data-types are not presumed to be safely castable to user-defined data-types. This situation limits the ability of user-defined data-types to participate in the coercion system used by ufuncs and other times when automatic coercion takes place in NumPy. This can be changed by registering data-types as safely castable from a particular data-type object. The function &lt;a href=&quot;../reference/c-api/array#c.PyArray_RegisterCanCast&quot;&gt;&lt;code&gt;PyArray_RegisterCanCast&lt;/code&gt;&lt;/a&gt; (from_descr, totype_number, scalarkind) should be used to specify that the data-type object from_descr can be cast to the data-type with type number totype_number. If you are not trying to alter scalar coercion rules, then use &lt;a href=&quot;../reference/c-api/array#c.NPY_NOSCALAR&quot;&gt;&lt;code&gt;NPY_NOSCALAR&lt;/code&gt;&lt;/a&gt; for the scalarkind argument.</source>
          <target state="translated">デフォルトでは、すべてのユーザー定義データ型が組み込みデータ型に安全にキャストできるとは限りません。さらに、組み込みデータ型は、ユーザー定義のデータ型に安全にキャストできるとは想定されていません。この状況は、ufuncsやNumPyで自動強制が行われるその他の時間に使用される強制システムに参加するユーザー定義のデータ型の機能を制限します。これは、特定のデータ型オブジェクトから安全にキャストできるものとしてデータ型を登録することで変更できます。関数&lt;a href=&quot;../reference/c-api/array#c.PyArray_RegisterCanCast&quot;&gt; &lt;code&gt;PyArray_RegisterCanCast&lt;/code&gt; &lt;/a&gt;（from_descr、totype_number、scalarkind）を使用して、データ型オブジェクトfrom_descrを型番号totype_numberのデータ型にキャストできることを指定する必要があります。スカラー強制ルールを変更しようとしない場合は、scalarkind引数に&lt;a href=&quot;../reference/c-api/array#c.NPY_NOSCALAR&quot;&gt; &lt;code&gt;NPY_NOSCALAR&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="c3c9f5af6f6f20b9748f044265ea41cc53afdaad" translate="yes" xml:space="preserve">
          <source>By default, any empty string is marked as missing. We can also consider more complex strings, such as &lt;code&gt;&quot;N/A&quot;&lt;/code&gt; or &lt;code&gt;&quot;???&quot;&lt;/code&gt; to represent missing or invalid data. The &lt;code&gt;missing_values&lt;/code&gt; argument accepts three kind of values:</source>
          <target state="translated">デフォルトでは、空の文字列はすべて欠落としてマークされます。 &lt;code&gt;&quot;N/A&quot;&lt;/code&gt; や &lt;code&gt;&quot;???&quot;&lt;/code&gt; などのより複雑な文字列も検討できます。欠落または無効なデータを表すため。 &lt;code&gt;missing_values&lt;/code&gt; の引数は、値の3種類を受け付けます。</target>
        </trans-unit>
        <trans-unit id="5c0614e39713a118bc2e830f1f54b096ac814bb1" translate="yes" xml:space="preserve">
          <source>By default, astype always returns a newly allocated array. If this is set to false, and the &lt;a href=&quot;numpy.char.chararray.dtype#numpy.char.chararray.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;order&lt;/code&gt;, and &lt;code&gt;subok&lt;/code&gt; requirements are satisfied, the input array is returned instead of a copy.</source>
          <target state="translated">デフォルトでは、astypeは常に新しく割り当てられた配列を返します。これがfalseに設定されており、&lt;a href=&quot;numpy.char.chararray.dtype#numpy.char.chararray.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;order&lt;/code&gt; 、および &lt;code&gt;subok&lt;/code&gt; の要件が満たされている場合、コピーの代わりに入力配列が返されます。</target>
        </trans-unit>
        <trans-unit id="65020739d65de234914c6eca7148d91943920302" translate="yes" xml:space="preserve">
          <source>By default, astype always returns a newly allocated array. If this is set to false, and the &lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;order&lt;/code&gt;, and &lt;code&gt;subok&lt;/code&gt; requirements are satisfied, the input array is returned instead of a copy.</source>
          <target state="translated">デフォルトでは、astypeは常に新しく割り当てられた配列を返します。これがfalseに設定されており、&lt;a href=&quot;numpy.dtype#numpy.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;order&lt;/code&gt; 、および &lt;code&gt;subok&lt;/code&gt; の要件が満たされている場合、コピーの代わりに入力配列が返されます。</target>
        </trans-unit>
        <trans-unit id="67bd53a8510577a68e06f12cd6753f65341b7ba7" translate="yes" xml:space="preserve">
          <source>By default, astype always returns a newly allocated array. If this is set to false, and the &lt;a href=&quot;numpy.ma.masked_array.dtype#numpy.ma.masked_array.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;order&lt;/code&gt;, and &lt;code&gt;subok&lt;/code&gt; requirements are satisfied, the input array is returned instead of a copy.</source>
          <target state="translated">デフォルトでは、astypeは常に新しく割り当てられた配列を返します。これがfalseに設定されていて、&lt;a href=&quot;numpy.ma.masked_array.dtype#numpy.ma.masked_array.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;order&lt;/code&gt; 、および &lt;code&gt;subok&lt;/code&gt; の要件が満たされている場合、コピーではなく入力配列が返されます。</target>
        </trans-unit>
        <trans-unit id="33a91516197cac2d79884383700e7cb303d84acc" translate="yes" xml:space="preserve">
          <source>By default, astype always returns a newly allocated array. If this is set to false, and the &lt;a href=&quot;numpy.ma.maskedarray.dtype#numpy.ma.MaskedArray.dtype&quot;&gt;&lt;code&gt;dtype&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;order&lt;/code&gt;, and &lt;code&gt;subok&lt;/code&gt; requirements are satisfied, the input array is returned instead of a copy.</source>
          <target state="translated">デフォルトでは、astypeは常に新しく割り当てられた配列を返します。これがfalseに設定されており、&lt;a href=&quot;numpy.ma.maskedarray.dtype#numpy.ma.MaskedArray.dtype&quot;&gt; &lt;code&gt;dtype&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;order&lt;/code&gt; 、および &lt;code&gt;subok&lt;/code&gt; の要件が満たされている場合、コピーの代わりに入力配列が返されます。</target>
        </trans-unit>
        <trans-unit id="18abc4afb5a03b89f3bcee3c191658826915b7e7" translate="yes" xml:space="preserve">
          <source>By default, calculate the product of all elements:</source>
          <target state="translated">デフォルトでは、すべての要素の積を計算します。</target>
        </trans-unit>
        <trans-unit id="29592fecd779ff823d8494d78a32e4c6bef17a8b" translate="yes" xml:space="preserve">
          <source>By default, masked values are recognized as such. If &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; have the same shape, a common mask is allocated: if &lt;code&gt;x[i,j]&lt;/code&gt; is masked, then &lt;code&gt;y[i,j]&lt;/code&gt; will also be masked. Setting &lt;code&gt;allow_masked&lt;/code&gt; to False will raise an exception if values are missing in either of the input arrays.</source>
          <target state="translated">デフォルトでは、マスクされた値はそのように認識されます。場合 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; 、同じ形状を有し、共通のマスクが割り当てられている次の場合 &lt;code&gt;x[i,j]&lt;/code&gt; マスクされ、次に &lt;code&gt;y[i,j]&lt;/code&gt; また、マスクされます。 &lt;code&gt;allow_masked&lt;/code&gt; をFalseに設定すると、いずれかの入力配列で値が欠落している場合に例外が発生します。</target>
        </trans-unit>
        <trans-unit id="72d47f0b8465ed8e3b2a5736c0d1dfec28a91237" translate="yes" xml:space="preserve">
          <source>By default, mode is &amp;lsquo;full&amp;rsquo;. This returns the convolution at each point of overlap, with an output shape of (N+M-1,). At the end-points of the convolution, the signals do not overlap completely, and boundary effects may be seen.</source>
          <target state="translated">デフォルトでは、モードは「フル」です。これは、オーバーラップの各ポイントでの畳み込みを（N + M-1）の出力形状で返します。たたみ込みの終点では、信号が完全にオーバーラップせず、境界効果が見られる場合があります。</target>
        </trans-unit>
        <trans-unit id="781e5458e78b28bbdf619e8539b2f911598af3c5" translate="yes" xml:space="preserve">
          <source>By default, returned multidimensional arrays are Fortran-contiguous. If &lt;code&gt;intent(c)&lt;/code&gt; is used, then returned multidimensional arrays are C-contiguous.</source>
          <target state="translated">デフォルトでは、返される多次元配列はFortranに隣接しています。場合 &lt;code&gt;intent(c)&lt;/code&gt; 使用され、返される多次元配列はC-連続しています。</target>
        </trans-unit>
        <trans-unit id="6971450c7aa549483b5389a69fedb16eaf066171" translate="yes" xml:space="preserve">
          <source>By default, reverse the dimensions, otherwise permute the axes according to the values given.</source>
          <target state="translated">デフォルトでは、寸法を反転させ、そうでなければ与えられた値に従って軸をパーミュートします。</target>
        </trans-unit>
        <trans-unit id="f55a7b395485c3988f5bccbb6f9eaebb26dfc947" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;generated/numpy.nditer#numpy.nditer&quot;&gt;&lt;code&gt;nditer&lt;/code&gt;&lt;/a&gt; treats the input operand as a read-only object. To be able to modify the array elements, you must specify either read-write or write-only mode using the &lt;code&gt;&amp;lsquo;readwrite&amp;rsquo;&lt;/code&gt; or &lt;code&gt;&amp;lsquo;writeonly&amp;rsquo;&lt;/code&gt; per-operand flags.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;generated/numpy.nditer#numpy.nditer&quot;&gt; &lt;code&gt;nditer&lt;/code&gt; &lt;/a&gt;は入力オペランドを読み取り専用オブジェクトとして扱います。配列要素を変更できるようにするには、オペランドごとに &lt;code&gt;&amp;lsquo;readwrite&amp;rsquo;&lt;/code&gt; または &lt;code&gt;&amp;lsquo;writeonly&amp;rsquo;&lt;/code&gt; フラグを使用して、読み取り/書き込みモードまたは書き込み専用モードを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="174daf14dced474235661dc4a8a7f2c4b87b4b7c" translate="yes" xml:space="preserve">
          <source>By default, the &lt;a href=&quot;generated/numpy.nditer#numpy.nditer&quot;&gt;&lt;code&gt;nditer&lt;/code&gt;&lt;/a&gt; uses the flags &amp;lsquo;allocate&amp;rsquo; and &amp;lsquo;writeonly&amp;rsquo; for operands that are passed in as None. This means we were able to provide just the two operands to the iterator, and it handled the rest.</source>
          <target state="translated">デフォルトでは、&lt;a href=&quot;generated/numpy.nditer#numpy.nditer&quot;&gt; &lt;code&gt;nditer&lt;/code&gt; &lt;/a&gt;はNoneとして渡されるオペランドにフラグ 'allocate'および 'writeonly'を使用します。これは、2つのオペランドのみをイテレータに提供でき、残りを処理したことを意味します。</target>
        </trans-unit>
        <trans-unit id="17e308c1f2a6481942287f2519e364f482dd5128" translate="yes" xml:space="preserve">
          <source>By default, the data-type is inferred from the input data.</source>
          <target state="translated">デフォルトでは、データタイプは入力データから推測されます。</target>
        </trans-unit>
        <trans-unit id="d105f45ad87599a046dab97b11d0171a9dd2c47e" translate="yes" xml:space="preserve">
          <source>By default, the index is into the flattened array, otherwise along the specified axis.</source>
          <target state="translated">デフォルトでは、インデックスは平坦化された配列の中にあり、そうでなければ指定された軸に沿っています。</target>
        </trans-unit>
        <trans-unit id="e68b2ebbdaa7d8bde52807398926b542381f9c7b" translate="yes" xml:space="preserve">
          <source>By default, the iterator produces pointers into the arrays provided, which may be aligned or unaligned, and with any byte order. If copying or buffering is not enabled and the operand data doesn&amp;rsquo;t satisfy the constraints, an error will be raised.</source>
          <target state="translated">デフォルトでは、イテレータは提供された配列へのポインタを生成します。これは、任意のバイト順で、整列または非整列の場合があります。コピーまたはバッファリングが有効になっておらず、オペランドデータが制約を満たさない場合、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="ab25c157edc4354c1f57c1df2646a0b82ab1dad1" translate="yes" xml:space="preserve">
          <source>By default, these operations apply to the array as though it were a list of numbers, regardless of its shape. However, by specifying the &lt;code&gt;axis&lt;/code&gt; parameter you can apply an operation along the specified axis of an array:</source>
          <target state="translated">デフォルトでは、これらの操作は、形状に関係なく、数値のリストであるかのように配列に適用されます。ただし、 &lt;code&gt;axis&lt;/code&gt; パラメータを指定することにより、配列の指定された軸に沿って操作を適用できます。</target>
        </trans-unit>
        <trans-unit id="8619d136820b4ea98c355d5e9bb29020512d7ef1" translate="yes" xml:space="preserve">
          <source>By default, when a line is decomposed into a series of strings, the individual entries are not stripped of leading nor trailing white spaces. This behavior can be overwritten by setting the optional argument &lt;code&gt;autostrip&lt;/code&gt; to a value of &lt;code&gt;True&lt;/code&gt;:</source>
          <target state="translated">デフォルトでは、行が一連の文字列に分解されるときに、個々のエントリの先頭または末尾の空白が削除されません。この動作は、オプションの引数 &lt;code&gt;autostrip&lt;/code&gt; を &lt;code&gt;True&lt;/code&gt; の値に設定することで上書きできます。</target>
        </trans-unit>
        <trans-unit id="a90e6d5076b3318d5438106f6aec8b51a30f2edc" translate="yes" xml:space="preserve">
          <source>By eliminating the inner loop in the description above, and using &lt;a href=&quot;numpy.s_#numpy.s_&quot;&gt;&lt;code&gt;s_&lt;/code&gt;&lt;/a&gt; to build simple slice objects, &lt;a href=&quot;#numpy.take&quot;&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt; can be expressed in terms of applying fancy indexing to each 1-d slice:</source>
          <target state="translated">上記の説明で内部ループを排除し、&lt;a href=&quot;numpy.s_#numpy.s_&quot;&gt; &lt;code&gt;s_&lt;/code&gt; &lt;/a&gt;を使用して単純なスライスオブジェクトを作成&lt;a href=&quot;#numpy.take&quot;&gt; &lt;code&gt;take&lt;/code&gt; &lt;/a&gt;ことにより、takeは、各1次元スライスにファンシーインデックスを適用することで表現できます。</target>
        </trans-unit>
        <trans-unit id="f5e127dadff417279256627201011a26eddd8177" translate="yes" xml:space="preserve">
          <source>By enabling buffering mode, the chunks provided by the iterator to the inner loop can be made larger, significantly reducing the overhead of the Python interpreter. In the example forcing Fortran iteration order, the inner loop gets to see all the elements in one go when buffering is enabled.</source>
          <target state="translated">バッファリングモードを有効にすることで、イテレータから内部ループに提供されるチャンクをより大きくすることができ、Pythonインタプリタのオーバーヘッドを大幅に削減することができます。Fortran の反復順序を強制する例では、バッファリングを有効にすると、内部ループは一度にすべての要素を見ることができます。</target>
        </trans-unit>
        <trans-unit id="842fa81b602f5ee9d6e48f92f8610cb23e1b4b1b" translate="yes" xml:space="preserve">
          <source>By examining the coefficients, we see that the line should have a gradient of roughly 1 and cut the y-axis at, more or less, -1.</source>
          <target state="translated">係数を調べると、線の勾配はおよそ1で、y軸は多かれ少なかれ-1で切れていることがわかります。</target>
        </trans-unit>
        <trans-unit id="4b0026b5caaf6e12c9b18e1ac7ccb5e7684a2b52" translate="yes" xml:space="preserve">
          <source>By far the most complex case is advanced indexing, which may or may not be combined with typical view based indexing. Here integer indices are interpreted as view based. Before trying to understand this, you may want to make yourself familiar with its subtleties. The advanced indexing code has three different branches and one special case:</source>
          <target state="translated">圧倒的に最も複雑なのは高度なインデックス作成で、これは典型的なビューベースのインデックス作成と組み合わせても、組み合わせなくても構いません。ここでは整数インデックスはビューベースと解釈されます。これを理解しようとする前に、その微妙な点を理解しておくとよいでしょう。高度なインデキシングのコードには、3つの異なるブランチと1つの特殊なケースがあります。</target>
        </trans-unit>
        <trans-unit id="e675b296a66e810552905002296a09520d23ea5d" translate="yes" xml:space="preserve">
          <source>By organizing how-tos this way, you not only display the options for people who need to narrow their question, you also have provided answers for users who start with narrower questions (&amp;ldquo;I want to see historic buildings,&amp;rdquo; &amp;ldquo;Which way to city hall?&amp;rdquo;).</source>
          <target state="translated">このようにハウツーを整理することで、質問を絞り込む必要があるユーザー向けのオプションを表示するだけでなく、狭い質問から始めるユーザーにも回答を提供します（「歴史的建造物を見たい」、「都市への行き方」ホール？&quot;）。</target>
        </trans-unit>
        <trans-unit id="46784614463c18819405731702cb3c998ad15a83" translate="yes" xml:space="preserve">
          <source>By placing intent directives and checking code, the interface can be cleaned up quite a bit until the Python module method is both easier to use and more robust.</source>
          <target state="translated">インテントディレクティブを配置したり、コードをチェックしたりすることで、Pythonモジュールメソッドが使いやすく、かつ堅牢になるまで、インターフェースをかなりきれいにすることができます。</target>
        </trans-unit>
        <trans-unit id="eb83a5c83addee3a887cb831a30aba85bb504443" translate="yes" xml:space="preserve">
          <source>By substituting</source>
          <target state="translated">を代入することで</target>
        </trans-unit>
        <trans-unit id="a10b2dfc802325db14226bfb0f644772b0ee8dc9" translate="yes" xml:space="preserve">
          <source>By testing them against the compiler, and seeing what the compiler can support according to the requested optimizations.</source>
          <target state="translated">コンパイラに対してテストを行い、要求された最適化に応じてコンパイラがサポートできるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="5cf0a6a61d5c04a9d920300ad8c8de64a060c650" translate="yes" xml:space="preserve">
          <source>By the above description, the casting rules are essentially implemented by the question of when a data type can be cast &amp;ldquo;safely&amp;rdquo; to another data type. The answer to this question can be determined in Python with a function call: &lt;a href=&quot;generated/numpy.can_cast#numpy.can_cast&quot;&gt;&lt;code&gt;can_cast(fromtype, totype)&lt;/code&gt;&lt;/a&gt;. The Figure below shows the results of this call for the 24 internally supported types on the author&amp;rsquo;s 64-bit system. You can generate this table for your system with the code given in the Figure.</source>
          <target state="translated">上記の説明により、キャストルールは、データ型を別のデータ型に「安全に」キャストできるタイミングの問題によって本質的に実装されます。この質問に対する答えは、Pythonで関数呼び出し&lt;a href=&quot;generated/numpy.can_cast#numpy.can_cast&quot;&gt; &lt;code&gt;can_cast(fromtype, totype)&lt;/code&gt; &lt;/a&gt;使用して決定できます。下の図は、作成者の64ビットシステムで内部的にサポートされている24の型に対するこの呼び出しの結果を示しています。図に示すコードを使用して、システムにこのテーブルを生成できます。</target>
        </trans-unit>
        <trans-unit id="0cffcf4de4e9b85ff13913ac390d2131986b166e" translate="yes" xml:space="preserve">
          <source>Byte (-128 to 127)</source>
          <target state="translated">バイト(-128~127</target>
        </trans-unit>
        <trans-unit id="c3b1bb21176956a777afbce91b2dc46b27bfdbd1" translate="yes" xml:space="preserve">
          <source>Byte order of the data (&lt;a href=&quot;../glossary#term-little-endian&quot;&gt;little-endian&lt;/a&gt; or &lt;a href=&quot;../glossary#term-big-endian&quot;&gt;big-endian&lt;/a&gt;)</source>
          <target state="translated">データのバイト順序（&lt;a href=&quot;../glossary#term-little-endian&quot;&gt;リトルエンディアン&lt;/a&gt;または&lt;a href=&quot;../glossary#term-big-endian&quot;&gt;ビッグエンディアン&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="c3ee543ea3c911ca70be24ca50be4966bfc9d11e" translate="yes" xml:space="preserve">
          <source>Byte order of the data (&lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/glossary.html#term-little-endian&quot;&gt;little-endian&lt;/a&gt; or &lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/glossary.html#term-big-endian&quot;&gt;big-endian&lt;/a&gt;)</source>
          <target state="translated">データのバイト順（&lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/glossary.html#term-little-endian&quot;&gt;リトルエンディアン&lt;/a&gt;または&lt;a href=&quot;https://docs.scipy.org/doc/numpy-1.17.0/glossary.html#term-big-endian&quot;&gt;ビッグエンディアン&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="33aea8e37e75e01b5515b25f2b9a264a2526b968" translate="yes" xml:space="preserve">
          <source>Byte order to force; a value from the byte order specifications above. The default value (&amp;lsquo;S&amp;rsquo;) results in swapping the current byte order.</source>
          <target state="translated">強制するバイトオーダー。上記のバイトオーダー仕様の値。デフォルト値（「S」）では、現在のバイト順序が入れ替わります。</target>
        </trans-unit>
        <trans-unit id="4fa7dfbdbb33fd63c061542164ead10c6ea66cdb" translate="yes" xml:space="preserve">
          <source>Byte order to force; a value from the byte order specifications above. The default value (&amp;lsquo;S&amp;rsquo;) results in swapping the current byte order. The code does a case-insensitive check on the first letter of &lt;code&gt;new_order&lt;/code&gt; for the alternatives above. For example, any of &amp;lsquo;B&amp;rsquo; or &amp;lsquo;b&amp;rsquo; or &amp;lsquo;biggish&amp;rsquo; are valid to specify big-endian.</source>
          <target state="translated">強制するバイト順。上記のバイトオーダー仕様からの値。デフォルト値（ 'S'）の場合、現在のバイト順が入れ替わります。コードは、上記の代替案の &lt;code&gt;new_order&lt;/code&gt; の最初の文字で大文字と小文字を区別しないチェックを行います。たとえば、ビッグエンディアンを指定するには、「B」、「b」、「biggish」のいずれも有効です。</target>
        </trans-unit>
        <trans-unit id="d891a9572e92fd87112849b433aa9d82773e6323" translate="yes" xml:space="preserve">
          <source>Byte order to force; a value from the byte order specifications below. &lt;code&gt;new_order&lt;/code&gt; codes can be any of:</source>
          <target state="translated">強制するバイト順。以下のバイトオーダー仕様からの値。 &lt;code&gt;new_order&lt;/code&gt; コードは次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="925da9e3660113afb959c492e32c0df4c8fba9ab" translate="yes" xml:space="preserve">
          <source>Byte order to force; a value from the byte order specifications below. The default value (&amp;lsquo;S&amp;rsquo;) results in swapping the current byte order. &lt;code&gt;new_order&lt;/code&gt; codes can be any of:</source>
          <target state="translated">強制するバイト順。以下のバイトオーダー仕様からの値。デフォルト値（ 'S'）の場合、現在のバイト順が入れ替わります。 &lt;code&gt;new_order&lt;/code&gt; コードは次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="208a9d70c2ceb4cad845268b3793f06f24736861" translate="yes" xml:space="preserve">
          <source>Byte-order for all fields.</source>
          <target state="translated">すべてのフィールドのバイト順。</target>
        </trans-unit>
        <trans-unit id="3d30b75f6bbab6dd2f33ea184465104adfe034dc" translate="yes" xml:space="preserve">
          <source>Byte-swapping</source>
          <target state="translated">Byte-swapping</target>
        </trans-unit>
        <trans-unit id="32096c2e0eff33d844ee6d675407ace18289357d" translate="yes" xml:space="preserve">
          <source>C</source>
          <target state="translated">C</target>
        </trans-unit>
        <trans-unit id="c380132bd13732c2a4492b58e8089f6c672f3148" translate="yes" xml:space="preserve">
          <source>C API</source>
          <target state="translated">シーエーピーアイ</target>
        </trans-unit>
        <trans-unit id="90c2059501661b20579455b452bcdf7917e96a74" translate="yes" xml:space="preserve">
          <source>C API Deprecations</source>
          <target state="translated">C API の非推奨事項</target>
        </trans-unit>
        <trans-unit id="5eefd673571a664f98901cbfc9269cc56d66bdd2" translate="yes" xml:space="preserve">
          <source>C API changes</source>
          <target state="translated">C APIの変更</target>
        </trans-unit>
        <trans-unit id="991eaf0718be5436cf82b4e88422dbaeb580655b" translate="yes" xml:space="preserve">
          <source>C API for random</source>
          <target state="translated">ランダムのためのC言語API</target>
        </trans-unit>
        <trans-unit id="a09f5c39498227c23bac03c4d85a857f0c660b68" translate="yes" xml:space="preserve">
          <source>C dialect</source>
          <target state="translated">ハ方言</target>
        </trans-unit>
        <trans-unit id="baf0b9cf537d3452f0bedecd7885e6a6f5c95212" translate="yes" xml:space="preserve">
          <source>C expressions</source>
          <target state="translated">C式</target>
        </trans-unit>
        <trans-unit id="5053549bf41c7c644de43b7357e8b95981f3b14c" translate="yes" xml:space="preserve">
          <source>C expressions are used in the following parts of signature files:</source>
          <target state="translated">署名ファイルの以下の部分では、C言語の表現を使用しています。</target>
        </trans-unit>
        <trans-unit id="62988a5cc34cb2d480ad455963d13a5b50fea224" translate="yes" xml:space="preserve">
          <source>C order</source>
          <target state="translated">シーオーダー</target>
        </trans-unit>
        <trans-unit id="4d3779622c7ddb81083220abbfe17022ee213c7f" translate="yes" xml:space="preserve">
          <source>C order.</source>
          <target state="translated">C命令です。</target>
        </trans-unit>
        <trans-unit id="502ca6c945d9f8aee115c49e01f9edd12a50b0c8" translate="yes" xml:space="preserve">
          <source>C type</source>
          <target state="translated">C型</target>
        </trans-unit>
        <trans-unit id="1ef859ea3c4b4e94c8561ce88af6e45cd8c349e4" translate="yes" xml:space="preserve">
          <source>C++ support</source>
          <target state="translated">シープラスサポート</target>
        </trans-unit>
        <trans-unit id="e04e63e5d64190b9021eeae0aa43f4dd8f802b80" translate="yes" xml:space="preserve">
          <source>C-API</source>
          <target state="translated">C-API</target>
        </trans-unit>
        <trans-unit id="b42fb0a4e21a6c7c2ad779467660c5d634cd1f27" translate="yes" xml:space="preserve">
          <source>C-API Array Additions</source>
          <target state="translated">C-API 配列の追加</target>
        </trans-unit>
        <trans-unit id="20e7136fe60c57d32b3ba713a50d60dd983c3865" translate="yes" xml:space="preserve">
          <source>C-API Developer Improvements</source>
          <target state="translated">C-API 開発者の改善</target>
        </trans-unit>
        <trans-unit id="847c15716f4f18fd587862ab143e5d2f9581c235" translate="yes" xml:space="preserve">
          <source>C-API Ufunc Additions</source>
          <target state="translated">C-API Ufuncの追加</target>
        </trans-unit>
        <trans-unit id="c77824df8f5b9b7ad0f95af7e88364d494112e7e" translate="yes" xml:space="preserve">
          <source>C-API for implementing Elementary Functions</source>
          <target state="translated">初級関数を実装するためのC-API</target>
        </trans-unit>
        <trans-unit id="6bc42241dfe0e66ad03fd900ab60e09366468123" translate="yes" xml:space="preserve">
          <source>C-Level string to datetime casts changed</source>
          <target state="translated">Cレベルの文字列が変更された日付時刻をキャストします。</target>
        </trans-unit>
        <trans-unit id="39aa49db7f4958819165d85870c4e3056a314158" translate="yes" xml:space="preserve">
          <source>C-Types Foreign Function Interface (&lt;code&gt;numpy.ctypeslib&lt;/code&gt;)</source>
          <target state="translated">Cタイプの外部関数インターフェース（ &lt;code&gt;numpy.ctypeslib&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="1ee13877e6105fd56e4080481ca6046e3bea7c13" translate="yes" xml:space="preserve">
          <source>C-Types Foreign Function Interface (numpy.ctypeslib)</source>
          <target state="translated">C型外部関数インタフェース (numpy.ctypeslib)</target>
        </trans-unit>
        <trans-unit id="72c1b618d901fa2527c184612af8e5f097445876" translate="yes" xml:space="preserve">
          <source>C-contiguous or simply contiguous arrays when data is stored row-wise, i.e. indexing of data as stored in memory starts from the highest dimension.</source>
          <target state="translated">データが行単位で格納されている場合のC-連続または単純に連続した配列,つまりメモリに格納されているデータのインデックス付けは最高次元から始まります.</target>
        </trans-unit>
        <trans-unit id="bdb65d7a9aa6da6471ba4a02f9d435dd19d2ae5a" translate="yes" xml:space="preserve">
          <source>C-order</source>
          <target state="translated">C-order</target>
        </trans-unit>
        <trans-unit id="8bbf8c25cb421fee0bffcb1218c14c15435923a5" translate="yes" xml:space="preserve">
          <source>C-ordered arrays evaluate as False even if they are also FORTRAN-ordered.</source>
          <target state="translated">C順の配列は、FORTRAN順の配列であってもFalseとして評価されます。</target>
        </trans-unit>
        <trans-unit id="18f7fb2659bfefae5fe403809093ff794847eddb" translate="yes" xml:space="preserve">
          <source>C-series coefficients of the integral.</source>
          <target state="translated">積分のC系列係数。</target>
        </trans-unit>
        <trans-unit id="aa3b96b2dd6cb469f06816ec7d846596063a8314" translate="yes" xml:space="preserve">
          <source>C-side of the array interface</source>
          <target state="translated">アレイインターフェースのC側</target>
        </trans-unit>
        <trans-unit id="6e0b67185c9289cda6113607f367a9d9edf7fee3" translate="yes" xml:space="preserve">
          <source>C-struct access</source>
          <target state="translated">C-構造体アクセス</target>
        </trans-unit>
        <trans-unit id="bd0b363c8100c3e0002d75837308df33fee89719" translate="yes" xml:space="preserve">
          <source>C-type names</source>
          <target state="translated">C型名</target>
        </trans-unit>
        <trans-unit id="af48e472b36161e129dd7edb2b2bd61998b64144" translate="yes" xml:space="preserve">
          <source>C. W. Clenshaw, &amp;ldquo;Chebyshev series for mathematical functions&amp;rdquo;, in &lt;em&gt;National Physical Laboratory Mathematical Tables&lt;/em&gt;, vol. 5, London: Her Majesty&amp;rsquo;s Stationery Office, 1962.</source>
          <target state="translated">CW Clenshaw、「&lt;em&gt;National Physical Laboratory Mathematical Tables&lt;/em&gt;、vol。」の「数学関数用のチェビシェフシリーズ」。5、ロンドン：彼女の陛下の文房具のオフィス、1962。</target>
        </trans-unit>
        <trans-unit id="43beb2dca45ea5b86cf6e2c78e1df08bb1062e1a" translate="yes" xml:space="preserve">
          <source>C99-like complex functions have been added. Those can be used if you wish to implement portable C extensions. Since we still support platforms without C99 complex type, you need to restrict to C90-compatible syntax, e.g.:</source>
          <target state="translated">C99のような複雑な関数が追加されました。移植性の高いC言語の拡張機能を実装したい場合に利用できます。私たちはまだ C99 の複素型を持たないプラットフォームをサポートしていますので、C90 と互換性のある構文に制限する必要があります。</target>
        </trans-unit>
        <trans-unit id="cf46ba2402ead2c46d226454dffcd7ce5ff43524" translate="yes" xml:space="preserve">
          <source>CFFI</source>
          <target state="translated">CFFI</target>
        </trans-unit>
        <trans-unit id="51aa24adb10c8f416d462fb3a5357dabf3e3fd38" translate="yes" xml:space="preserve">
          <source>CFFI + Numba</source>
          <target state="translated">CFFI+ヌンバ</target>
        </trans-unit>
        <trans-unit id="b9f44f432adf98c7d09c95f8b09f92c94663702d" translate="yes" xml:space="preserve">
          <source>CFFI can be used to directly access the functions in &lt;code&gt;include/numpy/random/distributions.h&lt;/code&gt;. Some &amp;ldquo;massaging&amp;rdquo; of the header file is required:</source>
          <target state="translated">CFFIを使用して、 &lt;code&gt;include/numpy/random/distributions.h&lt;/code&gt; /distributions.hの関数に直接アクセスできます。ヘッダーファイルの「マッサージ」が必要です。</target>
        </trans-unit>
        <trans-unit id="ebba6dc140f09bcbb9638f5bf4b3df884108c2f7" translate="yes" xml:space="preserve">
          <source>CFFI interface</source>
          <target state="translated">シーエフエフアイインタフェース</target>
        </trans-unit>
        <trans-unit id="a36da1e151b2b0823e662d5b8eaaa38259edebce" translate="yes" xml:space="preserve">
          <source>CI extended with additional services</source>
          <target state="translated">追加サービスで拡張されたCI</target>
        </trans-unit>
        <trans-unit id="6821c968895aca188636e67b589fcc004a8bbd12" translate="yes" xml:space="preserve">
          <source>CPU arch detection</source>
          <target state="translated">CPUアーチ検出</target>
        </trans-unit>
        <trans-unit id="1ade62840c85639fb7384a1d18b950f273e9fb48" translate="yes" xml:space="preserve">
          <source>CPU architecture of the platform; only one of the above is defined.</source>
          <target state="translated">プラットフォームのCPUアーキテクチャ;上記のうちの1つのみが定義されています。</target>
        </trans-unit>
        <trans-unit id="70b1c54ffd0a791d6e36e2ee0d98c9acf4b031e8" translate="yes" xml:space="preserve">
          <source>CPU features and other options are case-insensitive.</source>
          <target state="translated">CPUの機能やその他のオプションは、大文字と小文字を区別しません。</target>
        </trans-unit>
        <trans-unit id="19b3426c923b3e7b1cdee4b651f488f72bf3c78b" translate="yes" xml:space="preserve">
          <source>CXX</source>
          <target state="translated">CXX</target>
        </trans-unit>
        <trans-unit id="c9cddb0fc26555bd7e44c82c30b8dd03f9efdf7e" translate="yes" xml:space="preserve">
          <source>C_CONTIGUOUS / C / CONTIGUOUS</source>
          <target state="translated">C_CONTIGUOUS/C/CONTIGUOUS</target>
        </trans-unit>
        <trans-unit id="0ce3a73aca867f2538f5c735d732291c3a6e377f" translate="yes" xml:space="preserve">
          <source>Caches in &lt;code&gt;np.fft&lt;/code&gt; are now bounded in total size and item count</source>
          <target state="translated">&lt;code&gt;np.fft&lt;/code&gt; のキャッシュは、合計サイズとアイテム数で制限されるようになりました</target>
        </trans-unit>
        <trans-unit id="f3d5846dd99b124383ff0d457d07594b45e6712e" translate="yes" xml:space="preserve">
          <source>Calculate &lt;code&gt;2**p&lt;/code&gt; for all &lt;code&gt;p&lt;/code&gt; in the input array.</source>
          <target state="translated">計算 &lt;code&gt;2**p&lt;/code&gt; のすべてのため &lt;code&gt;p&lt;/code&gt; 入力配列では。</target>
        </trans-unit>
        <trans-unit id="250bbdf8f96508ded0e2419aede1c85ce8e60f69" translate="yes" xml:space="preserve">
          <source>Calculate &lt;code&gt;2**x&lt;/code&gt; for all elements in the array.</source>
          <target state="translated">配列内のすべての要素について &lt;code&gt;2**x&lt;/code&gt; を計算します。</target>
        </trans-unit>
        <trans-unit id="80c054468bb32b1733a38bd9e500e3c7e2410c60" translate="yes" xml:space="preserve">
          <source>Calculate &lt;code&gt;exp(x) - 1&lt;/code&gt; for all elements in the array.</source>
          <target state="translated">配列内のすべての要素について &lt;code&gt;exp(x) - 1&lt;/code&gt; を計算します。</target>
        </trans-unit>
        <trans-unit id="897a0bcc51e675340eb8de452d794c61bbe86ad4" translate="yes" xml:space="preserve">
          <source>Calculate the absolute value element-wise.</source>
          <target state="translated">絶対値を要素ごとに計算します。</target>
        </trans-unit>
        <trans-unit id="52d855325ad8b8ba2e5f03ed06faa393dd2b3c5d" translate="yes" xml:space="preserve">
          <source>Calculate the exponential of all elements in the input array.</source>
          <target state="translated">入力配列の全要素の指数を計算します.</target>
        </trans-unit>
        <trans-unit id="a3dc7bdd6edd5fbaf2d2ff0fab2c5a4b13186ce0" translate="yes" xml:space="preserve">
          <source>Calculate the generalized inverse of a matrix using its singular-value decomposition (SVD) and including all &lt;em&gt;large&lt;/em&gt; singular values.</source>
          <target state="translated">特異値分解（SVD）を使用し、すべての&lt;em&gt;大きな&lt;/em&gt;特異値を含めて、行列の一般化された逆行列を計算します。</target>
        </trans-unit>
        <trans-unit id="4b25208e5ebec1248ee411c25859b5c2fd7bb09b" translate="yes" xml:space="preserve">
          <source>Calculate the n-th discrete difference along given axis.</source>
          <target state="translated">与えられた軸に沿ったn番目の離散差を計算します。</target>
        </trans-unit>
        <trans-unit id="42cb44e98b4304fa793f5c2a54298181fdecfa02" translate="yes" xml:space="preserve">
          <source>Calculate the n-th discrete difference along the given axis.</source>
          <target state="translated">与えられた軸に沿ったn番目の離散差を計算します。</target>
        </trans-unit>
        <trans-unit id="1c03f8fb0f5af1d1f5a42484860a4bc9ada64002" translate="yes" xml:space="preserve">
          <source>Calculate the standard deviation of the non-NaN values.</source>
          <target state="translated">非NaN値の標準偏差を計算します。</target>
        </trans-unit>
        <trans-unit id="f8c757cfbde7655c0c48030d0cc0f2a47e05c8b1" translate="yes" xml:space="preserve">
          <source>Calculate the standard deviation of these values.</source>
          <target state="translated">これらの値の標準偏差を計算します。</target>
        </trans-unit>
        <trans-unit id="7c1b58f3d94fc67cd514e1570aa6b12719e32b56" translate="yes" xml:space="preserve">
          <source>Calculate the t statistic, setting the ddof parameter to the unbiased value so the divisor in the standard deviation will be degrees of freedom, N-1.</source>
          <target state="translated">ddofパラメータを偏りのない値に設定してt統計量を計算し、標準偏差の除数が自由度N-1になるようにします。</target>
        </trans-unit>
        <trans-unit id="a8acd54a675004438176e793d314e80390eec770" translate="yes" xml:space="preserve">
          <source>Calculates &lt;code&gt;1/x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;1/x&lt;/code&gt; を計算します。</target>
        </trans-unit>
        <trans-unit id="e5f90663e28e9982e7de271dda336040dea8f7aa" translate="yes" xml:space="preserve">
          <source>Calculates &lt;code&gt;element in test_elements&lt;/code&gt;, broadcasting over &lt;code&gt;element&lt;/code&gt; only.</source>
          <target state="translated">&lt;code&gt;element in test_elements&lt;/code&gt; 計算し、 &lt;code&gt;element&lt;/code&gt; のみを介してブロードキャストします。</target>
        </trans-unit>
        <trans-unit id="c2efd3cd9b667cce814af0fcbaac60b64cdcdb35" translate="yes" xml:space="preserve">
          <source>Calculates &lt;code&gt;element in test_elements&lt;/code&gt;, broadcasting over &lt;code&gt;element&lt;/code&gt; only. Returns a boolean array of the same shape as &lt;code&gt;element&lt;/code&gt; that is True where an element of &lt;code&gt;element&lt;/code&gt; is in &lt;code&gt;test_elements&lt;/code&gt; and False otherwise.</source>
          <target state="translated">&lt;code&gt;element in test_elements&lt;/code&gt; 計算し、 &lt;code&gt;element&lt;/code&gt; のみを介してブロードキャストします。戻り値と同じ形状のブール配列 &lt;code&gt;element&lt;/code&gt; の要素ここで真である &lt;code&gt;element&lt;/code&gt; である &lt;code&gt;test_elements&lt;/code&gt; さもなければとFalseを。</target>
        </trans-unit>
        <trans-unit id="74b05ed646884364ea61a52a0d97dd5553fc5db3" translate="yes" xml:space="preserve">
          <source>Calculates &lt;code&gt;log(1 + x)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;log(1 + x)&lt;/code&gt; 計算します。</target>
        </trans-unit>
        <trans-unit id="793634569b16ddadf09c84f21826d340c4bb186b" translate="yes" xml:space="preserve">
          <source>Calculates &lt;code&gt;log(exp(x1) + exp(x2))&lt;/code&gt;. This function is useful in statistics where the calculated probabilities of events may be so small as to exceed the range of normal floating point numbers. In such cases the logarithm of the calculated probability is stored. This function allows adding probabilities stored in such a fashion.</source>
          <target state="translated">&lt;code&gt;log(exp(x1) + exp(x2))&lt;/code&gt; 計算します。この関数は、イベントの計算された確率が通常の浮動小数点数の範囲を超えるほど小さい可能性がある統計で役立ちます。このような場合、計算された確率の対数が保存されます。この機能により、このような方法で格納された確率を追加できます。</target>
        </trans-unit>
        <trans-unit id="55306f441c10b288ef594152ca5bc10ba426774f" translate="yes" xml:space="preserve">
          <source>Calculates &lt;code&gt;log2(2**x1 + 2**x2)&lt;/code&gt;. This function is useful in machine learning when the calculated probabilities of events may be so small as to exceed the range of normal floating point numbers. In such cases the base-2 logarithm of the calculated probability can be used instead. This function allows adding probabilities stored in such a fashion.</source>
          <target state="translated">&lt;code&gt;log2(2**x1 + 2**x2)&lt;/code&gt; 計算します。この関数は、計算されたイベントの確率が非常に小さく、通常の浮動小数点数の範囲を超える可能性がある場合に、機械学習で役立ちます。そのような場合、代わりに、計算された確率の2を底とする対数を使用できます。この機能により、このような方法で格納された確率を追加できます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
