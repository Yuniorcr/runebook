<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="phoenix">
    <body>
      <group id="phoenix">
        <trans-unit id="3f1d6571352636299c2a638ffac8ee18e017790a" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;phoenix.controller&quot;&gt;&lt;code&gt;Phoenix.Controller&lt;/code&gt;&lt;/a&gt; module provides the &lt;code&gt;put_layout/2&lt;/code&gt; function for us to switch layouts. This takes &lt;code&gt;conn&lt;/code&gt; as its first argument and a string for the basename of the layout we want to render. It also accepts &lt;code&gt;false&lt;/code&gt; to disable the layout altogether.</source>
          <target state="translated">&lt;a href=&quot;phoenix.controller&quot;&gt; &lt;code&gt;Phoenix.Controller&lt;/code&gt; の&lt;/a&gt;モジュールが提供 &lt;code&gt;put_layout/2&lt;/code&gt; スイッチレイアウトに私たちのために機能を。これは、最初の引数として &lt;code&gt;conn&lt;/code&gt; を取り、レンダリングするレイアウトのベース名の文字列を取ります。また、 &lt;code&gt;false&lt;/code&gt; を受け入れて、レイアウトを完全に無効にします。</target>
        </trans-unit>
        <trans-unit id="207e43d957b25557eabcceb34d7699aa7a77e89f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;phoenix.liveview#c:handle_params/3&quot;&gt;&lt;code&gt;handle_params/3&lt;/code&gt;&lt;/a&gt; callback is invoked after &lt;a href=&quot;phoenix.liveview#c:mount/3&quot;&gt;&lt;code&gt;mount/3&lt;/code&gt;&lt;/a&gt; and before the initial render. It is also invoked every time &lt;a href=&quot;phoenix.liveview.helpers#live_patch/2&quot;&gt;&lt;code&gt;live_patch/2&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;phoenix.liveview#push_patch/2&quot;&gt;&lt;code&gt;push_patch/2&lt;/code&gt;&lt;/a&gt; are used. It receives the request parameters as first argument, the url as second, and the socket as third.</source>
          <target state="translated">&lt;a href=&quot;phoenix.liveview#c:handle_params/3&quot;&gt; &lt;code&gt;handle_params/3&lt;/code&gt; &lt;/a&gt;コールバックが後に呼び出される&lt;a href=&quot;phoenix.liveview#c:mount/3&quot;&gt; &lt;code&gt;mount/3&lt;/code&gt; &lt;/a&gt;し、初期の前にレンダリングします。また、&lt;a href=&quot;phoenix.liveview.helpers#live_patch/2&quot;&gt; &lt;code&gt;live_patch/2&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;phoenix.liveview#push_patch/2&quot;&gt; &lt;code&gt;push_patch/2&lt;/code&gt; &lt;/a&gt;が使用されるたびに呼び出されます。リクエストパラメータを最初の引数として、URLを2番目として、ソケットを3番目として受け取ります。</target>
        </trans-unit>
        <trans-unit id="a3ab5765089e37fe00cdc982a6c6127904496f5f" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;phoenix.pubsub#content&quot;&gt;&lt;code&gt;Phoenix.PubSub&lt;/code&gt;&lt;/a&gt; API allows any of its functions to handle a response from the adapter matching &lt;code&gt;{:perform, {m, f, a}}&lt;/code&gt;. The PubSub client will recursively invoke all MFA responses until a result is returned. This is useful for offloading work to clients without blocking your PubSub adapter. See &lt;a href=&quot;phoenix.pubsub.pg2&quot;&gt;&lt;code&gt;Phoenix.PubSub.PG2&lt;/code&gt;&lt;/a&gt; implementation for examples.</source>
          <target state="translated">&lt;a href=&quot;phoenix.pubsub#content&quot;&gt; &lt;code&gt;Phoenix.PubSub&lt;/code&gt; の&lt;/a&gt; APIは、その機能のいずれかがアダプタマッチングからの応答を処理することを可能にする &lt;code&gt;{:perform, {m, f, a}}&lt;/code&gt; 。PubSubクライアントは、結果が返されるまで、すべてのMFA応答を再帰的に呼び出します。これは、PubSubアダプターをブロックせずに作業をクライアントにオフロードするのに役立ちます。例については、&lt;a href=&quot;phoenix.pubsub.pg2&quot;&gt; &lt;code&gt;Phoenix.PubSub.PG2&lt;/code&gt; &lt;/a&gt;実装を参照してください。</target>
        </trans-unit>
        <trans-unit id="1b0c9e11a76593a12fc7ec6f78afc56ab4d36aaf" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;phoenix.pubsub#content&quot;&gt;&lt;code&gt;Phoenix.PubSub&lt;/code&gt;&lt;/a&gt; API allows any of its functions to handle a response from the adapter matching &lt;code&gt;{:perform, {m, f, a}}&lt;/code&gt;. The PubSub client will recursively invoke all MFA responses until a result is returned. This is useful for offloading work to clients without blocking your PubSub adapter. See &lt;code&gt;Phoenix.PubSub.PG2&lt;/code&gt; implementation for examples.</source>
          <target state="translated">&lt;a href=&quot;phoenix.pubsub#content&quot;&gt; &lt;code&gt;Phoenix.PubSub&lt;/code&gt; の&lt;/a&gt; APIは、その機能のいずれかがアダプタマッチングからの応答を処理することを可能にする &lt;code&gt;{:perform, {m, f, a}}&lt;/code&gt; 。PubSubクライアントは、結果が返されるまで、すべてのMFA応答を再帰的に呼び出します。これは、PubSubアダプターをブロックせずに作業をクライアントにオフロードするのに役立ちます。例については、 &lt;code&gt;Phoenix.PubSub.PG2&lt;/code&gt; 実装を参照してください。</target>
        </trans-unit>
        <trans-unit id="5f059f03c50e25491e9ade11affa506a5c85827c" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;phoenix.router#forward/4&quot;&gt;&lt;code&gt;Phoenix.Router.forward/4&lt;/code&gt;&lt;/a&gt; macro can be used to send all requests that start with a particular path to a particular plug. Let's say we have a part of our system that is responsible (it could even be a separate application or library) for running jobs in the background, it could have its own web interface for checking the status of the jobs. We can forward to this admin interface using:</source>
          <target state="translated">&lt;a href=&quot;phoenix.router#forward/4&quot;&gt; &lt;code&gt;Phoenix.Router.forward/4&lt;/code&gt; &lt;/a&gt;マクロは、特定のプラグへの特定のパスで始まるすべての要求を送信するために使用することができます。システムの一部がバックグラウンドでジョブを実行する責任があるとしましょう（別のアプリケーションやライブラリの場合もあります）。ジョブのステータスを確認するための独自のWebインターフェイスを持つことができます。以下を使用して、この管理インターフェースに転送できます。</target>
        </trans-unit>
        <trans-unit id="cf89a86a0eb3ec72901bbad36238d748fb754a69" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;phoenix.router#resources/4&quot;&gt;&lt;code&gt;Phoenix.Router.resources/4&lt;/code&gt;&lt;/a&gt; macro describes additional options for customizing resource routes.</source>
          <target state="translated">&lt;a href=&quot;phoenix.router#resources/4&quot;&gt; &lt;code&gt;Phoenix.Router.resources/4&lt;/code&gt; &lt;/a&gt;マクロは、リソースのルートをカスタマイズするための追加オプションについて説明します。</target>
        </trans-unit>
        <trans-unit id="f32ca35c51fcd8b2c79b98aed4633cc99e6aea64" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;plug.builder&quot;&gt;&lt;code&gt;Plug.Builder&lt;/code&gt;&lt;/a&gt; module provides conveniences for building plug pipelines.</source>
          <target state="translated">&lt;a href=&quot;plug.builder&quot;&gt; &lt;code&gt;Plug.Builder&lt;/code&gt; の&lt;/a&gt;モジュールはプラグパイプラインを構築するための便利さを提供します。</target>
        </trans-unit>
        <trans-unit id="d6e79dbadb31903b9f92905b4723d4810b1bea76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&quot;phx_error&quot;&lt;/code&gt; event is sent by the transport when a channel exits, and represents the channel terminating against its will. The &lt;a href=&quot;#on_exit_message/3&quot;&gt;&lt;code&gt;on_exit_message/3&lt;/code&gt;&lt;/a&gt; function aids in constructing the &lt;code&gt;&quot;phx_error&quot;&lt;/code&gt; message.</source>
          <target state="translated">&lt;code&gt;&quot;phx_error&quot;&lt;/code&gt; イベントが時にチャネル出口輸送によって送信され、その意思に反し終了チャネルを表しています。&lt;a href=&quot;#on_exit_message/3&quot;&gt; &lt;code&gt;on_exit_message/3&lt;/code&gt; &lt;/a&gt;機能が構築するのを助ける &lt;code&gt;&quot;phx_error&quot;&lt;/code&gt; のメッセージを。</target>
        </trans-unit>
        <trans-unit id="6e450e02e99e9729245c2971a0f234ed37f3b636" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;%Phoenix.Socket.Message{}&lt;/code&gt; is the leave message for the transport to relay to the client.</source>
          <target state="translated">&lt;code&gt;%Phoenix.Socket.Message{}&lt;/code&gt; 、クライアントに中継する搬送用離脱メッセージです。</target>
        </trans-unit>
        <trans-unit id="bd539ef4a22e6b8ce30fc264d95352ee8a15cefe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*_nulls_first&lt;/code&gt; and &lt;code&gt;*_nulls_last&lt;/code&gt; variants are not supported by all databases. While all databases default to ascending order, the choice of &quot;nulls first&quot; or &quot;nulls last&quot; is specific to each database implementation.</source>
          <target state="translated">&lt;code&gt;*_nulls_first&lt;/code&gt; と &lt;code&gt;*_nulls_last&lt;/code&gt; の変異体は、すべてのデータベースでサポートされていません。すべてのデータベースはデフォルトで昇順になっていますが、「nullが最初」または「nullが最後」の選択は各データベースの実装に固有です。</target>
        </trans-unit>
        <trans-unit id="6d85a8224c78cbfc81cbb854cdafc632fe561a38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;*_nulls_first&lt;/code&gt; and &lt;code&gt;*_nulls_last&lt;/code&gt; variants are not supported by all databases. While all databases default to ascending order, the choice of &amp;ldquo;nulls first&amp;rdquo; or &amp;ldquo;nulls last&amp;rdquo; is specific to each database implementation.</source>
          <target state="translated">&lt;code&gt;*_nulls_first&lt;/code&gt; と &lt;code&gt;*_nulls_last&lt;/code&gt; の変異体は、すべてのデータベースでサポートされていません。すべてのデータベースはデフォルトで昇順ですが、「最初にnull」または「最後にnull」の選択は、各データベースの実装に固有です。</target>
        </trans-unit>
        <trans-unit id="5adb9f7effcd9a92a5c3394cf706464a50f8e854" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--no-halt&lt;/code&gt; flag is automatically added.</source>
          <target state="translated">&lt;code&gt;--no-halt&lt;/code&gt; フラグが自動的に追加されます。</target>
        </trans-unit>
        <trans-unit id="23ed4ea9af36661b5bef1c1c6ac364a14dd0fd25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--step&lt;/code&gt; option will behave the same way.</source>
          <target state="translated">&lt;code&gt;--step&lt;/code&gt; オプションは、同じように動作します。</target>
        </trans-unit>
        <trans-unit id="4d285d5d2d694c280d2af59d2b72a39d127833e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;--to&lt;/code&gt; option will run all migrations up to and including given version.</source>
          <target state="translated">&lt;code&gt;--to&lt;/code&gt; オプションはあきらめバージョンを含むにし、すべてのマイグレーションを実行します。</target>
        </trans-unit>
        <trans-unit id="6ea39d3cb35a084383c1603b0beb3c4727483b5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.eex&lt;/code&gt; extension maps to a template engine which tells Phoenix how to compile the code in the file into Elixir source code. After it is compiled, the template can be rendered as:</source>
          <target state="translated">&lt;code&gt;.eex&lt;/code&gt; 拡張子はエリクサーのソースコードに、ファイル内のコードをコンパイルする方法フェニックスを伝えるテンプレートエンジンにマッピングされます。コンパイル後、テンプレートは次のようにレンダリングできます。</target>
        </trans-unit>
        <trans-unit id="2663c4b667ff4ea7906e8eff89a8ab26b4176847" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.leex&lt;/code&gt; (Live EEx) template engine that tracks changes.</source>
          <target state="translated">&lt;code&gt;.leex&lt;/code&gt; （ライブはEEx）テンプレートエンジントラックが変化しています。</target>
        </trans-unit>
        <trans-unit id="8d2cbe3b530a3545de3248339706a75f4da234de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:aspect&lt;/code&gt; key of the struct specifies what field is still unfetched.</source>
          <target state="translated">構造体の &lt;code&gt;:aspect&lt;/code&gt; キーは、まだフェッチされていないフィールドを指定します。</target>
        </trans-unit>
        <trans-unit id="ef67b3c2738d0f830da956da57f8a9d7ab9878ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:authenticate&lt;/code&gt; plug will be invoked before the action. If the plug calls &lt;a href=&quot;../plug/1.5.1/plug.conn#halt/1&quot;&gt;&lt;code&gt;Plug.Conn.halt/1&lt;/code&gt;&lt;/a&gt; (which is by default imported into controllers), it will halt the pipeline and won&amp;rsquo;t inoke the action.</source>
          <target state="translated">&lt;code&gt;:authenticate&lt;/code&gt; プラグインは、アクションの前に呼び出されます。プラグが&lt;a href=&quot;../plug/1.5.1/plug.conn#halt/1&quot;&gt; &lt;code&gt;Plug.Conn.halt/1&lt;/code&gt; &lt;/a&gt;（デフォルトではコントローラーにインポートされます）を呼び出す場合、プラグインはパイプラインを停止し、アクションを呼び出しません。</target>
        </trans-unit>
        <trans-unit id="2a2077bbe0dc1df2c551ae2d5305040e0b043053" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:authenticate&lt;/code&gt; plug will be invoked before the action. If the plug calls &lt;a href=&quot;../plug/plug.conn#halt/1&quot;&gt;&lt;code&gt;Plug.Conn.halt/1&lt;/code&gt;&lt;/a&gt; (which is by default imported into controllers), it will halt the pipeline and won't invoke the action.</source>
          <target state="translated">&lt;code&gt;:authenticate&lt;/code&gt; プラグインは、アクションの前に呼び出されます。プラグが&lt;a href=&quot;../plug/plug.conn#halt/1&quot;&gt; &lt;code&gt;Plug.Conn.halt/1&lt;/code&gt; &lt;/a&gt;（デフォルトではコントローラーにインポートされます）を呼び出すと、パイプラインが停止し、アクションは呼び出されません。</target>
        </trans-unit>
        <trans-unit id="18fe4cf95d7fab8a497960c08951af855a55d8a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:browser&lt;/code&gt; and &lt;code&gt;:api&lt;/code&gt; Pipelines</source>
          <target state="translated">&lt;code&gt;:browser&lt;/code&gt; と &lt;code&gt;:api&lt;/code&gt; パイプライン</target>
        </trans-unit>
        <trans-unit id="c70cf91a624862bdabdacfdc0d7521b33d8e86b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:browser&lt;/code&gt; pipeline has five plugs: &lt;code&gt;plug :accepts, [&quot;html&quot;]&lt;/code&gt; which defines the request format or formats which will be accepted, &lt;code&gt;:fetch_session&lt;/code&gt;, which, naturally, fetches the session data and makes it available in the connection, &lt;code&gt;:fetch_flash&lt;/code&gt; which retrieves any flash messages which may have been set, as well as &lt;code&gt;:protect_from_forgery&lt;/code&gt; and &lt;code&gt;:put_secure_browser_headers&lt;/code&gt;, which protects form posts from cross site forgery.</source>
          <target state="translated">&lt;code&gt;:browser&lt;/code&gt; ：パイプラインは、5つのプラグ有する &lt;code&gt;plug :accepts, [&quot;html&quot;]&lt;/code&gt; 、受け付けされる要求フォーマット又は形式を定義する &lt;code&gt;:fetch_session&lt;/code&gt; 、自然に、セッションデータを取得し、関連してそれを利用できるように、 &lt;code&gt;:fetch_flash&lt;/code&gt; を設定されている可能性のあるフラッシュメッセージを取得し、 &lt;code&gt;:protect_from_forgery&lt;/code&gt; と &lt;code&gt;:put_secure_browser_headers&lt;/code&gt; を取得して、クロスサイト偽造からフォーム投稿を保護します。</target>
        </trans-unit>
        <trans-unit id="731f4c8f6efafb89aa6c584007065c777c291143" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:cd&lt;/code&gt; option can be used on a watcher to override the folder from which the watcher will run. By default this will be the project&amp;rsquo;s root: &lt;code&gt;File.cwd!()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;:cd&lt;/code&gt; オプションは、ウォッチャーが実行されるからフォルダを上書きするためにウォッチャーに使用することができます。デフォルトでは、これはプロジェクトのルートになります： &lt;code&gt;File.cwd!()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0ae21bdba03584c806666010e52a2cb28db8be56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:cd&lt;/code&gt; option can be used on a watcher to override the folder from which the watcher will run. By default this will be the project's root: &lt;code&gt;File.cwd!()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;:cd&lt;/code&gt; オプションは、ウォッチャーが実行されるからフォルダを上書きするためにウォッチャーに使用することができます。デフォルトでは、これはプロジェクトのルートになります： &lt;code&gt;File.cwd!()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f7bc6b309b1a0d5dcb1c973131cf2999c439c9de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:cipher_suite&lt;/code&gt; option provides &lt;code&gt;:strong&lt;/code&gt; and &lt;code&gt;:compatible&lt;/code&gt; options for setting up better cipher and version defaults according to the OWASP recommendations. See the &amp;ldquo;Cipher Suites&amp;rdquo; section below</source>
          <target state="translated">&lt;code&gt;:cipher_suite&lt;/code&gt; オプションが提供 &lt;code&gt;:strong&lt;/code&gt; と &lt;code&gt;:compatible&lt;/code&gt; OWASPの推奨に従って、より良い暗号とバージョンのデフォルトを設定するためのオプションを。以下の「暗号スイート」セクションを参照してください</target>
        </trans-unit>
        <trans-unit id="1e4e2c269f3978f76ff199356c975a07324ab155" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:compatible&lt;/code&gt; profile additionally enables AES-CBC ciphers, as well as TLS versions 1.1 and 1.0. Use this configuration to allow connections from older clients, such as older PC or mobile operating systems. Note that RSA key exchange is not enabled by this configuration, due to known weaknesses, so to support clients that do not support ECDHE or DHE it is necessary specify the ciphers explicitly (see &lt;a href=&quot;#manual-configuration&quot;&gt;below&lt;/a&gt;).</source>
          <target state="translated">&lt;code&gt;:compatible&lt;/code&gt; プロファイルは、さらに、AES-CBC暗号、ならびにTLSバージョン1.1および1.0を可能にします。この構成を使用して、古いPCやモバイルオペレーティングシステムなどの古いクライアントからの接続を許可します。既知の弱点のため、この構成ではRSAキー交換が有効にならないことに注意してください。したがって、ECDHEまたはDHEをサポートしないクライアントをサポートするには、暗号を明示的に指定する必要があります（&lt;a href=&quot;#manual-configuration&quot;&gt;以下を参照&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="918f4e83de0e618dc7aa4875d78f6492629319c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:content_type&lt;/code&gt; and &lt;code&gt;:filename&lt;/code&gt; fields in the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Plug.Upload&lt;/code&gt;&lt;/a&gt; struct are client-controlled. These values should be validated, via file content inspection or similar, before being trusted.</source>
          <target state="translated">&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Plug.Upload&lt;/code&gt; &lt;/a&gt;構造体の &lt;code&gt;:content_type&lt;/code&gt; フィールドと &lt;code&gt;:filename&lt;/code&gt; フィールドは、クライアントによって制御されます。これらの値は、信頼される前に、ファイルの内容の検査などによって検証する必要があります。</target>
        </trans-unit>
        <trans-unit id="3fb2b2f7e9b4811efb97cc3c2e5e5c07ea928f93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:context&lt;/code&gt; field represents additional state some databases require for proper updates of data. It is not used by the built-in adapters of &lt;code&gt;Ecto.Adapters.Postgres&lt;/code&gt; and &lt;code&gt;Ecto.Adapters.MySQL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:context&lt;/code&gt; フィールドには、いくつかのデータベースは、データの適切な更新のための追加の状態を表します。 &lt;code&gt;Ecto.Adapters.Postgres&lt;/code&gt; および &lt;code&gt;Ecto.Adapters.MySQL&lt;/code&gt; の組み込みアダプターでは使用されません。</target>
        </trans-unit>
        <trans-unit id="ea6213d9c5c2d60d6a2f351db0efbb41962d6d16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:context&lt;/code&gt; field represents additional state some databases require for proper updates of data. It is not used by the built-in adapters of &lt;code&gt;Ecto.Adapters.Postres&lt;/code&gt; and &lt;code&gt;Ecto.Adapters.MySQL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:context&lt;/code&gt; フィールドには、いくつかのデータベースは、データの適切な更新のための追加の状態を表します。 &lt;code&gt;Ecto.Adapters.Postres&lt;/code&gt; および &lt;code&gt;Ecto.Adapters.MySQL&lt;/code&gt; の組み込みアダプターでは使用されません。</target>
        </trans-unit>
        <trans-unit id="16a1d1418e35d766234890bac5372c3fa8aab917" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:delete&lt;/code&gt; option in particular must be used carefully as it would allow users to delete any associated data by simply not sending any data for a given field. If you need deletion, it is often preferred to manually mark the changeset for deletion if a &lt;code&gt;delete&lt;/code&gt; field is set in the params, as in the example below:</source>
          <target state="translated">&lt;code&gt;:delete&lt;/code&gt; それは、ユーザーが単に与えられたフィールドに任意のデータを送信しないことにより、関連するすべてのデータを削除できるようになると、特にオプションは慎重に使用する必要があります。以下の例のように、パラメータに &lt;code&gt;delete&lt;/code&gt; フィールドが設定されている場合、削除が必要な場合は、変更セットに削除のマークを手動で付けることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5acd2290f1eeb3bc214ec527b315e41481bcb38d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:delete&lt;/code&gt; option in particular must be used carefully as it would allow users to delete any associated data. If you need deletion, it is often preferred to add a separate boolean virtual field to the changeset function that will allow you to manually mark it for deletion, as in the example below:</source>
          <target state="translated">&lt;code&gt;:delete&lt;/code&gt; それは、ユーザーが任意の関連するデータを削除できるようになると、特にオプションは慎重に使用する必要があります。削除が必要な場合は、以下の例のように、個別のブール型仮想フィールドをチェンジセット関数に追加して、手動で削除対象としてマークできるようにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c252a1b7d9e6defcdc7e6e2741931b5df0cd03a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:duration&lt;/code&gt; measurements are presented in the &lt;code&gt;:native&lt;/code&gt; time unit. You can read more about it in the docs for &lt;a href=&quot;https://hexdocs.pm/elixir/System.html#convert_time_unit/3&quot;&gt;&lt;code&gt;System.convert_time_unit/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;:duration&lt;/code&gt; 測定がで提示される &lt;code&gt;:native&lt;/code&gt; 時間単位。詳細については、&lt;a href=&quot;https://hexdocs.pm/elixir/System.html#convert_time_unit/3&quot;&gt; &lt;code&gt;System.convert_time_unit/3&lt;/code&gt; の&lt;/a&gt;ドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="f0cb6c08b188d0d4ef6ec2d55ff0640a7a5a562f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:dynamic&lt;/code&gt; field contains a function that takes a boolean argument (see &quot;Tracking changes&quot; below), and returns a list of dynamic content. Each element in the list is either one of:</source>
          <target state="translated">&lt;code&gt;:dynamic&lt;/code&gt; フィールドは（以下「追跡変更」を参照）boolean型の引数を取る関数が含まれており、動的なコンテンツのリストを返します。リストの各要素は、次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="d742e4a33ea1296a531ccca07c5ea7b18db14083" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:host&lt;/code&gt; option requires a string or &lt;code&gt;{:system, &quot;ENV_VAR&quot;}&lt;/code&gt;. Similar to &lt;code&gt;:port&lt;/code&gt;, when given a tuple like &lt;code&gt;{:system, &quot;HOST&quot;}&lt;/code&gt;, the host will be referenced from &lt;code&gt;System.get_env(&quot;HOST&quot;)&lt;/code&gt; at runtime.</source>
          <target state="translated">&lt;code&gt;:host&lt;/code&gt; オプションは、文字列または必要 &lt;code&gt;{:system, &quot;ENV_VAR&quot;}&lt;/code&gt; 。 &lt;code&gt;:port&lt;/code&gt; と同様に、 &lt;code&gt;{:system, &quot;HOST&quot;}&lt;/code&gt; ようなタプルを指定すると、実行時に &lt;code&gt;System.get_env(&quot;HOST&quot;)&lt;/code&gt; からホストが参照されます。</target>
        </trans-unit>
        <trans-unit id="dd99d05cad94c87bb280dd5d83fd4ec31d3e120f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:id&lt;/code&gt; type is used when the primary key is an integer while the &lt;code&gt;:binary_id&lt;/code&gt; is used for primary keys in particular binary formats, which may be &lt;a href=&quot;ecto.uuid&quot;&gt;&lt;code&gt;Ecto.UUID&lt;/code&gt;&lt;/a&gt; for databases like PostgreSQL and MySQL, or some specific ObjectID or RecordID often imposed by NoSQL databases.</source>
          <target state="translated">&lt;code&gt;:id&lt;/code&gt; しながら、主キーが整数である場合種類が使用され &lt;code&gt;:binary_id&lt;/code&gt; することができる特定のバイナリ形式で主キーに使用され&lt;a href=&quot;ecto.uuid&quot;&gt; &lt;code&gt;Ecto.UUID&lt;/code&gt; &lt;/a&gt; PostgreSQLとMySQLのようなデータベースの、またはいくつかの特定のオブジェクトIDまたはレコードIDは、多くの場合のNoSQLによって課さデータベース。</target>
        </trans-unit>
        <trans-unit id="03335948c65fcf829d6e89720eb38d3cb4ea9a0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:layout&lt;/code&gt; option on &lt;code&gt;use&lt;/code&gt; does not apply to LiveViews rendered within other LiveViews. If you want to render child live views or opt-in to a layout, use &lt;code&gt;:layout&lt;/code&gt; as an option in mount:</source>
          <target state="translated">&lt;code&gt;:layout&lt;/code&gt; 上のオプション &lt;code&gt;use&lt;/code&gt; 、他のLiveViews内にレンダリングLiveViewsには適用されません。子のライブビューをレンダリングしたり、レイアウトにオプトインしたりする場合は、mount：のオプションとして &lt;code&gt;:layout&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="8d0a17946500299e7ee12b6af3689a1c4c43f8f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:logo&lt;/code&gt; is preferred to be a base64-encoded data URI so not to make any external requests, though external URLs (eg, &lt;code&gt;https://...&lt;/code&gt;) are supported.</source>
          <target state="translated">&lt;code&gt;:logo&lt;/code&gt; 、URIはので、任意の外部要求を行うことはないbase64でエンコードされたデータであることが好ましい外部URLけれども（例えば、 &lt;code&gt;https://...&lt;/code&gt; ）サポートされています。</target>
        </trans-unit>
        <trans-unit id="c3992bb8a6efd8a4bd3e7e1767377cc30d96b760" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:measurements&lt;/code&gt; map will include the following, all given in the &lt;code&gt;:native&lt;/code&gt; time unit:</source>
          <target state="translated">&lt;code&gt;:measurements&lt;/code&gt; 全てで与えられた、以下のものが挙げられるであろうマップ &lt;code&gt;:native&lt;/code&gt; 時間単位：</target>
        </trans-unit>
        <trans-unit id="25110dc298c23b6bcca6b66d8becb6c3ab0252e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:name&lt;/code&gt; is required as part of &lt;code&gt;options&lt;/code&gt;. The remaining options are described below.</source>
          <target state="translated">&lt;code&gt;:name&lt;/code&gt; の一部として必要とされる &lt;code&gt;options&lt;/code&gt; 。残りのオプションについては、以下で説明します。</target>
        </trans-unit>
        <trans-unit id="4a144d9bf2ce178155262a9bed21600765bd913d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:name&lt;/code&gt; parameter will also be available in the function body as &lt;code&gt;conn.params[&quot;name&quot;]&lt;/code&gt; and &lt;code&gt;conn.path_params[&quot;name&quot;]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:name&lt;/code&gt; パラメータはまた、関数本体で利用できるようになります &lt;code&gt;conn.params[&quot;name&quot;]&lt;/code&gt; と &lt;code&gt;conn.path_params[&quot;name&quot;]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6c6a9f8fae8b3f03bb8da33b0dd63ade9e7c2388" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:namespace&lt;/code&gt; and &lt;code&gt;:path&lt;/code&gt; options are used to calculate template lookup paths. For example, if you are in &lt;code&gt;MyApp.UserView&lt;/code&gt; and the namespace is &lt;code&gt;MyApp&lt;/code&gt;, templates are expected at &lt;code&gt;Path.join(root, &quot;user&quot;)&lt;/code&gt;. On the other hand, if the view is &lt;code&gt;MyApp.Admin.UserView&lt;/code&gt;, the path will be &lt;code&gt;Path.join(root, &quot;admin/user&quot;)&lt;/code&gt; and so on. For explicit root path locations, the &lt;code&gt;:path&lt;/code&gt; option can be provided instead. The &lt;code&gt;:root&lt;/code&gt; and &lt;code&gt;:path&lt;/code&gt; are joined to form the final lookup path. A blank string may be provided to use the &lt;code&gt;:root&lt;/code&gt; path directly as the template lookup path.</source>
          <target state="translated">&lt;code&gt;:namespace&lt;/code&gt; と &lt;code&gt;:path&lt;/code&gt; オプションは、計算テンプレートの検索パスに使用されています。たとえば、 &lt;code&gt;MyApp.UserView&lt;/code&gt; を使用していて、名前空間が &lt;code&gt;MyApp&lt;/code&gt; の場合、テンプレートは &lt;code&gt;Path.join(root, &quot;user&quot;)&lt;/code&gt; ます。一方、ビューが &lt;code&gt;MyApp.Admin.UserView&lt;/code&gt; の場合、パスは &lt;code&gt;Path.join(root, &quot;admin/user&quot;)&lt;/code&gt; などになります。明示的なルートパスの場所については、代わりに &lt;code&gt;:path&lt;/code&gt; オプションを指定できます。 &lt;code&gt;:root&lt;/code&gt; と &lt;code&gt;:path&lt;/code&gt; 最終的なルックアップ・パスを形成するように接合されています。 &lt;code&gt;:root&lt;/code&gt; パスをテンプレートルックアップパスとして直接使用するために、空白の文字列を指定できます。</target>
        </trans-unit>
        <trans-unit id="65a1f032809b2a80ee05ed26deb3f2fce84671c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:namespace&lt;/code&gt; and &lt;code&gt;:path&lt;/code&gt; options are used to calculate template lookup paths. For example, if you are in &lt;code&gt;MyApp.UserView&lt;/code&gt; and the namespace is &lt;code&gt;MyApp&lt;/code&gt;, templates are expected at &lt;code&gt;Path.join(root, &quot;user&quot;)&lt;/code&gt;. On the other hand, if the view is &lt;code&gt;MyApp.Admin.UserView&lt;/code&gt;, the path will be &lt;code&gt;Path.join(root, &quot;admin/user&quot;)&lt;/code&gt; and so on. For explicit root path locations, the &lt;code&gt;:path&lt;/code&gt; option can instead be provided. The &lt;code&gt;:root&lt;/code&gt; and &lt;code&gt;:path&lt;/code&gt; are joined to form the final lookup path. A blank string may be provided to use the &lt;code&gt;:root&lt;/code&gt; path directly as the template lookup path.</source>
          <target state="translated">&lt;code&gt;:namespace&lt;/code&gt; と &lt;code&gt;:path&lt;/code&gt; オプションは、計算テンプレートの検索パスに使用されています。たとえば、 &lt;code&gt;MyApp.UserView&lt;/code&gt; にいて、名前空間が &lt;code&gt;MyApp&lt;/code&gt; の場合、テンプレートは &lt;code&gt;Path.join(root, &quot;user&quot;)&lt;/code&gt; が期待されています。一方、ビューが &lt;code&gt;MyApp.Admin.UserView&lt;/code&gt; の場合、パスは &lt;code&gt;Path.join(root, &quot;admin/user&quot;)&lt;/code&gt; ようになります。明示的なルートパスの場所については、代わりに &lt;code&gt;:path&lt;/code&gt; オプションを指定できます。 &lt;code&gt;:root&lt;/code&gt; と &lt;code&gt;:path&lt;/code&gt; 最終的なルックアップ・パスを形成するように接合されています。 &lt;code&gt;:root&lt;/code&gt; パスをテンプレート参照パスとして直接使用するために、空白の文字列を指定できます。</target>
        </trans-unit>
        <trans-unit id="895c2ddd40cf8e3567de42e9bf12420974e19653" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:on_replace&lt;/code&gt; option</source>
          <target state="translated">&lt;code&gt;:on_replace&lt;/code&gt; オプション</target>
        </trans-unit>
        <trans-unit id="36d82b1b3e9c0c28b3952588185c19ae211245b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:port&lt;/code&gt; option requires either an integer or string. The &lt;code&gt;:host&lt;/code&gt; option requires a string. The &lt;code&gt;:scheme&lt;/code&gt; option accepts &lt;code&gt;&quot;http&quot;&lt;/code&gt; and &lt;code&gt;&quot;https&quot;&lt;/code&gt; values. Default value is inferred from top level &lt;code&gt;:http&lt;/code&gt; or &lt;code&gt;:https&lt;/code&gt; option. It is useful when hosting Phoenix behind a load balancer or reverse proxy and terminating SSL there. The &lt;code&gt;:path&lt;/code&gt; option can be used to override root path. Useful when hosting Phoenix behind a reverse proxy with URL rewrite rules</source>
          <target state="translated">&lt;code&gt;:port&lt;/code&gt; オプションは、整数または文字列のいずれかが必要です。 &lt;code&gt;:host&lt;/code&gt; オプションは、文字列が必要です。 &lt;code&gt;:scheme&lt;/code&gt; オプションが受け入れ &lt;code&gt;&quot;http&quot;&lt;/code&gt; と &lt;code&gt;&quot;https&quot;&lt;/code&gt; の値を。デフォルト値は、トップレベルの &lt;code&gt;:http&lt;/code&gt; または &lt;code&gt;:https&lt;/code&gt; オプションから推測されます。ロードバランサーまたはリバースプロキシの背後でPhoenixをホストし、そこでSSLを終了する場合に便利です。 &lt;code&gt;:path&lt;/code&gt; オプションは、ルート・パスをオーバーライドするために使用することができます。 URL書き換えルールを使用してリバースプロキシの背後でPhoenixをホストする場合に便利です</target>
        </trans-unit>
        <trans-unit id="6168b39090f584c85cff0cc128125156fba6b515" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:port&lt;/code&gt; option requires either an integer, string, or &lt;code&gt;{:system, &quot;ENV_VAR&quot;}&lt;/code&gt;. When given a tuple like &lt;code&gt;{:system, &quot;PORT&quot;}&lt;/code&gt;, the port will be referenced from &lt;code&gt;System.get_env(&quot;PORT&quot;)&lt;/code&gt; at runtime as a workaround for releases where environment specific information is loaded only at compile-time.</source>
          <target state="translated">&lt;code&gt;:port&lt;/code&gt; オプションは、整数、文字列、またはいずれかが必要 &lt;code&gt;{:system, &quot;ENV_VAR&quot;}&lt;/code&gt; 。 &lt;code&gt;{:system, &quot;PORT&quot;}&lt;/code&gt; ようなタプルを指定すると、ポートは実行時に &lt;code&gt;System.get_env(&quot;PORT&quot;)&lt;/code&gt; から参照され、コンパイル時にのみ環境固有の情報がロードされるリリースの回避策として使用されます。</target>
        </trans-unit>
        <trans-unit id="92d07421660bd7c638d8258897864e4a9cf3e6ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:prefix&lt;/code&gt; option given to &lt;code&gt;from&lt;/code&gt;/&lt;code&gt;join&lt;/code&gt; has the highest precedence</source>
          <target state="translated">&lt;code&gt;:prefix&lt;/code&gt; に与えられた選択肢 &lt;code&gt;from&lt;/code&gt; / &lt;code&gt;join&lt;/code&gt; 最高の優先順位を持っています</target>
        </trans-unit>
        <trans-unit id="54e1957e79c6b007c7f23224e0a1670cbbc75677" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:pubsub_server&lt;/code&gt; must point to an existing pubsub server running in your application, which is included by default as &lt;code&gt;MyApp.PubSub&lt;/code&gt; for new applications.</source>
          <target state="translated">&lt;code&gt;:pubsub_server&lt;/code&gt; は、デフォルトで含まれているアプリケーションで実行されている既存のpubsubサーバを指している必要があり &lt;code&gt;MyApp.PubSub&lt;/code&gt; 新しいアプリケーションのために。</target>
        </trans-unit>
        <trans-unit id="5cda43ef4ff3376cfc2c7af75979f3ba0d7ed620" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:reloadable_apps&lt;/code&gt; defaults to &lt;code&gt;nil&lt;/code&gt;. In such case default behaviour is to reload current project if it consists of single app, or all applications within umbrella project. You can set &lt;code&gt;:reloadable_apps&lt;/code&gt; to subset of default applications to reload only some of them, empty list - to effectively disable code reloader, or include external applications from library dependencies.</source>
          <target state="translated">&lt;code&gt;:reloadable_apps&lt;/code&gt; にデフォルト値を &lt;code&gt;nil&lt;/code&gt; に。このような場合、デフォルトの動作では、現在のプロジェクトが単一のアプリ、またはアンブレラプロジェクト内のすべてのアプリケーションで構成されている場合はリロードします。あなたは、設定することができ &lt;code&gt;:reloadable_apps&lt;/code&gt; のみそれらのいくつか、空のリストをリロードするために、デフォルトのアプリケーションのサブセットに-効果的にディセーブルコードのリロード機能に、またはライブラリの依存関係からの外部アプリケーションが含まれます。</target>
        </trans-unit>
        <trans-unit id="baa4db1aa422d9779d3b8729775b268f6c7f02de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:remote_ip&lt;/code&gt; field in the &lt;a href=&quot;plug.conn&quot;&gt;&lt;code&gt;Plug.Conn&lt;/code&gt;&lt;/a&gt; struct by default contains the network peer IP address. Terminating TLS in a separate process or network element typically masks the actual client IP address from the Elixir application. If proxying is done at the HTTP layer, the original client IP address is often inserted into an HTTP header, e.g. 'X-Forwarded-For'. There are Plug packages available to extract the client IP from such a header and update the &lt;code&gt;:remote_ip&lt;/code&gt; field.</source>
          <target state="translated">&lt;a href=&quot;plug.conn&quot;&gt; &lt;code&gt;Plug.Conn&lt;/code&gt; &lt;/a&gt;構造体の &lt;code&gt;:remote_ip&lt;/code&gt; フィールドには、デフォルトでネットワークピアIPアドレスが含まれています。別のプロセスまたはネットワーク要素でTLSを終了すると、通常、Elixirアプリケーションから実際のクライアントIPアドレスがマスクされます。プロキシがHTTPレイヤーで行われる場合、元のクライアントIPアドレスがHTTPヘッダーに挿入されることがよくあります（例： 'X-Forwarded-For'）。このようなヘッダーからクライアントIPを抽出し、 &lt;code&gt;:remote_ip&lt;/code&gt; フィールドを更新するために使用できるプラグパッケージがあります。</target>
        </trans-unit>
        <trans-unit id="ed05e3737398b3c2beccb1cfaf10e740d96858b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:root&lt;/code&gt; option is required while the &lt;code&gt;:namespace&lt;/code&gt; defaults to the first nesting in the module name. For instance, both &lt;code&gt;MyApp.UserView&lt;/code&gt; and &lt;code&gt;MyApp.Admin.UserView&lt;/code&gt; have namespace &lt;code&gt;MyApp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;:namespace&lt;/code&gt; はデフォルトでモジュール名の最初のネストに設定されますが、 &lt;code&gt;:root&lt;/code&gt; オプションは必須です。たとえば、 &lt;code&gt;MyApp.UserView&lt;/code&gt; と &lt;code&gt;MyApp.Admin.UserView&lt;/code&gt; の両方に名前空間 &lt;code&gt;MyApp&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="1a3296e1c3da0ddff618bfd191c05b175ff0cb1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:schema&lt;/code&gt; field refers the module name for the schema this metadata belongs to.</source>
          <target state="translated">&lt;code&gt;:schema&lt;/code&gt; フィールドは、このメタデータが属するスキーマのモジュール名を指します。</target>
        </trans-unit>
        <trans-unit id="e2763632c3bc8d8b6f69e916c553e100096271d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:selected&lt;/code&gt; option will mark the given IDs as selected unless the form is being resubmitted. When resubmitted, it uses the form params as values.</source>
          <target state="translated">&lt;code&gt;:selected&lt;/code&gt; フォームが再送信されている場合を除き、選択したオプションが与えられたIDをマークします。再送信されると、paramsという形式が値として使用されます。</target>
        </trans-unit>
        <trans-unit id="0cea6902bf81cf806e2e2ff5a1334ab75f6b0054" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:source&lt;/code&gt; tracks the (table or collection) where the struct is or should be persisted to.</source>
          <target state="translated">&lt;code&gt;:source&lt;/code&gt; 構造体であるかに永続化されなければならない（表またはコレクション）を追跡します。</target>
        </trans-unit>
        <trans-unit id="c67eef75ef4d15947c1d4d035bc00669b3f024ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:static&lt;/code&gt; field is a list of literal strings. This allows the Elixir compiler to optimize this list and avoid allocating its strings on every render.</source>
          <target state="translated">&lt;code&gt;:static&lt;/code&gt; フィールドは、リテラル文字列のリストです。これにより、Elixirコンパイラはこのリストを最適化し、すべてのレンダリングで文字列を割り当てることを回避できます。</target>
        </trans-unit>
        <trans-unit id="77ec232b6cfcdbc23d88179e41f0fb0e88f686fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:strong&lt;/code&gt; profile enables AES-GCM ciphers with ECDHE or DHE key exchange, and TLS version 1.2 only. It is intended for typical installations with support for browsers and other modern clients.</source>
          <target state="translated">&lt;code&gt;:strong&lt;/code&gt; プロファイルはECDHEまたはDHE鍵交換とAES-GCM暗号、およびTLSバージョンのみ1.2を可能にします。これは、ブラウザやその他の最新のクライアントをサポートする一般的なインストールを対象としています。</target>
        </trans-unit>
        <trans-unit id="81e4f3969fca2a0c0bce3d4dfbb896188d5e6e36" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:where&lt;/code&gt; option expects a keyword list where the key is an atom representing the field and the value is either:</source>
          <target state="translated">&lt;code&gt;:where&lt;/code&gt; オプションは、キーフィールドと値を表す原子であるキーワードリストを期待するには、いずれかです：</target>
        </trans-unit>
        <trans-unit id="3d6613c6ae5cafc810769cb60c6e62f072ba58bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;:where&lt;/code&gt; option may receive a dynamic query, a keyword list or a MFA (a tuple with a module, function and args to invoke). The MFA is especially useful to avoid duplication in those definitions:</source>
          <target state="translated">&lt;code&gt;:where&lt;/code&gt; オプションは、ダイナミッククエリ、キーワードリストまたはMFA（呼び出すためのモジュール、機能、引数付きタプル）を受信することができます。MFAは、これらの定義の重複を避けるのに特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="cdf5ea7cc064d3fd02c24e10f92c4d06b0296467" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@endpoint&lt;/code&gt; module attribute contains the endpoint under testing, most commonly your application endpoint itself. If you are using the MyApp.ConnCase generated by Phoenix, it is automatically set for you.</source>
          <target state="translated">&lt;code&gt;@endpoint&lt;/code&gt; モジュールの属性は、最も一般的に、アプリケーションが自身をエンドポイント、テストの下のエンドポイントが含まれています。Phoenixによって生成されたMyApp.ConnCaseを使用している場合は、自動的に設定されます。</target>
        </trans-unit>
        <trans-unit id="fbb7111fae5bbf19a11fce2dbdf8ba880cacae4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@primary_key&lt;/code&gt; attribute will tell ecto which type to use for the id.</source>
          <target state="translated">&lt;code&gt;@primary_key&lt;/code&gt; のIDに使用するタイプの属性は、エクトを教えてくれます。</target>
        </trans-unit>
        <trans-unit id="010ab761c017e85e79712afcc13c2e028e60df3a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;@shortdoc&lt;/code&gt; module attribute holds a string which will describe our task when users invoke &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Help.html&quot;&gt;&lt;code&gt;mix help&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;@shortdoc&lt;/code&gt; のモジュール属性は、ユーザーが起動するときに私たちのタスクを説明する文字列を保持&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Help.html&quot;&gt; &lt;code&gt;mix help&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8e515ce695757264b1c2dae6b68e6bbfbc7f198c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;POST&lt;/code&gt; method can be overridden only by these HTTP methods:</source>
          <target state="translated">&lt;code&gt;POST&lt;/code&gt; の方法は、これらのHTTPメソッドで上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="ef584d71c526b4b7d03dc94f80f6e8f1d6008b5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PageController&lt;/code&gt; gives us the &lt;code&gt;index&lt;/code&gt; action to display the Phoenix welcome page associated with the default route Phoenix defines in the router.</source>
          <target state="translated">&lt;code&gt;PageController&lt;/code&gt; では、私たちに与え &lt;code&gt;index&lt;/code&gt; フェニックスは、ルータに定義されたデフォルトルートに関連付けられているフェニックスのウェルカムページを表示するアクションを。</target>
        </trans-unit>
        <trans-unit id="65f0d0f4bd596df0232f105e5e46a46047747cd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SignUp&lt;/code&gt; schema can be cast and validated with the help of the &lt;a href=&quot;ecto.changeset&quot;&gt;&lt;code&gt;Ecto.Changeset&lt;/code&gt;&lt;/a&gt; module, and afterwards, you can copy its data to the &lt;code&gt;Profile&lt;/code&gt; and &lt;code&gt;Account&lt;/code&gt; structs that will be persisted to the database with the help of &lt;a href=&quot;ecto.repo&quot;&gt;&lt;code&gt;Ecto.Repo&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;SignUp&lt;/code&gt; スキーマはの助けを借りて、キャストと検証することができ&lt;a href=&quot;ecto.changeset&quot;&gt; &lt;code&gt;Ecto.Changeset&lt;/code&gt; の&lt;/a&gt;モジュール、およびその後、あなたはにそのデータをコピーすることができ &lt;code&gt;Profile&lt;/code&gt; と &lt;code&gt;Account&lt;/code&gt; の助けを借りて、データベースに永続化される構造体&lt;a href=&quot;ecto.repo&quot;&gt; &lt;code&gt;Ecto.Repo&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0027e32d65973e3996206f15f8d2bc1ec48ab7bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Tracker&lt;/code&gt; API is used as a facade for a pool of &lt;a href=&quot;phoenix.tracker.shard&quot;&gt;&lt;code&gt;Phoenix.Tracker.Shard&lt;/code&gt;&lt;/a&gt;s. The responsibility of which calls go to which &lt;code&gt;Shard&lt;/code&gt; is determined based on the topic, on which a given function is called.</source>
          <target state="translated">&lt;code&gt;Tracker&lt;/code&gt; APIは、プールのためのファサードとして使用されている&lt;a href=&quot;phoenix.tracker.shard&quot;&gt; &lt;code&gt;Phoenix.Tracker.Shard&lt;/code&gt; &lt;/a&gt;秒。どの呼び出しがどの &lt;code&gt;Shard&lt;/code&gt; 移動するかは、特定の関数が呼び出されるトピックに基づいて決定されます。</target>
        </trans-unit>
        <trans-unit id="e5479c3d20fe1168228ba562f220f909f384e32e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UserRegistration&lt;/code&gt; setup is likely simpler to implement than the dynamic author system we built &amp;ndash; we decided to take the harder path exactly because those are decisions developers take on their applications every day.</source>
          <target state="translated">&lt;code&gt;UserRegistration&lt;/code&gt; のセットアップは、我々が構築された動的な著者のシステムよりも実装がそう単純である-私たちは、これらのは、開発者が毎日自分のアプリケーションを取る意思決定しているので、正確に難しいパスを取ることにしました。</target>
        </trans-unit>
        <trans-unit id="65dac19423140ef75ddacc313c1b338418cdd245" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[:telemetry]&lt;/code&gt; library allows you to emit events at various stages of an application's lifecycle. You can then respond to these events by, among other things, aggregating them as metrics and sending the metrics data to a reporting destination.</source>
          <target state="translated">&lt;code&gt;[:telemetry]&lt;/code&gt; ライブラリを使用すると、アプリケーションのライフサイクルの様々な段階でイベントを発行することができます。次に、これらのイベントに応答するには、特に、それらをメトリックとして集約し、メトリックデータをレポートの宛先に送信します。</target>
        </trans-unit>
        <trans-unit id="a0004743ff2da907b7bfb6253848e44f110fc051" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_url&lt;/code&gt; functions will get the host, port, proxy port, and SSL information needed to construct the full URL from the configuration parameters set for each environment. We'll talk about configuration in more detail in its own guide. For now, you can take a look at &lt;code&gt;config/dev.exs&lt;/code&gt; file in your own project to see those values.</source>
          <target state="translated">&lt;code&gt;_url&lt;/code&gt; 機能は、ホスト、ポート、プロキシポート、およびそれぞれの環境に設定された設定パラメータから、完全なURLを構築するために必要なSSL情報を取得します。構成については、独自のガイドで詳しく説明します。今のところ、自分のプロジェクトの &lt;code&gt;config/dev.exs&lt;/code&gt; ファイルを見て、これらの値を確認できます。</target>
        </trans-unit>
        <trans-unit id="9380732d83d99aa3ef7e1ee94986487b7d7501fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;adapter_meta&lt;/code&gt; field is a map containing some of the fields found in the &lt;a href=&quot;ecto.query&quot;&gt;&lt;code&gt;Ecto.Query&lt;/code&gt;&lt;/a&gt; struct.</source>
          <target state="translated">&lt;code&gt;adapter_meta&lt;/code&gt; フィールドがで見つかったいくつかのフィールド含むマップです&lt;a href=&quot;ecto.query&quot;&gt; &lt;code&gt;Ecto.Query&lt;/code&gt; の&lt;/a&gt;構造体を。</target>
        </trans-unit>
        <trans-unit id="1f72cda2deb8565937044253265942493bf6aa90" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;belongs_to&lt;/code&gt; association on &lt;code&gt;MyApp.Comment&lt;/code&gt; will also define a &lt;code&gt;:post_id&lt;/code&gt; field with &lt;code&gt;:binary_id&lt;/code&gt; type that references the &lt;code&gt;:id&lt;/code&gt; field of the &lt;code&gt;MyApp.Post&lt;/code&gt; schema.</source>
          <target state="translated">&lt;code&gt;belongs_to&lt;/code&gt; のの上の関連 &lt;code&gt;MyApp.Comment&lt;/code&gt; はまた、定義する &lt;code&gt;:post_id&lt;/code&gt; のフィールドを &lt;code&gt;:binary_id&lt;/code&gt; 参照するタイプ &lt;code&gt;:id&lt;/code&gt; のフィールド &lt;code&gt;MyApp.Post&lt;/code&gt; スキーマ。</target>
        </trans-unit>
        <trans-unit id="87e3861a73f975bf0651f08b600e6e3ad95f45d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cacertfile&lt;/code&gt; option is not needed when using a self-signed certificate, or when the file pointed to by &lt;code&gt;certfile&lt;/code&gt; contains both the server certificate and all necessary CA chain certificates:</source>
          <target state="translated">&lt;code&gt;cacertfile&lt;/code&gt; の自己署名証明書を使用した場合のオプションは必要ありません、またはファイルがで指されるとき &lt;code&gt;certfile&lt;/code&gt; にサーバ証明書と、必要なすべてのCAチェーンの証明書の両方が含まれています。</target>
        </trans-unit>
        <trans-unit id="778cb135fc988ae8195d411110c29d421206d37f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;call/2&lt;/code&gt; function that &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Plug.Builder&lt;/code&gt;&lt;/a&gt; provides is used internally to execute all the plugs listed using the &lt;code&gt;plug&lt;/code&gt; macro, so overriding the &lt;code&gt;call/2&lt;/code&gt; function generally implies using &lt;code&gt;super&lt;/code&gt; in order to still call the plug chain:</source>
          <target state="translated">&lt;code&gt;call/2&lt;/code&gt; こと機能&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Plug.Builder&lt;/code&gt; を&lt;/a&gt;提供する全てのプラグを使用してリストを実行するために内部的に使用される &lt;code&gt;plug&lt;/code&gt; オーバーライドので、マクロを &lt;code&gt;call/2&lt;/code&gt; 機能は、一般的に使用意味 &lt;code&gt;super&lt;/code&gt; 依然としてプラグチェーンを呼び出すために：</target>
        </trans-unit>
        <trans-unit id="6752d9d305fe4dabd6e9f7e8abc5275de174456b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;call/2&lt;/code&gt; function that &lt;a href=&quot;plug.builder#content&quot;&gt;&lt;code&gt;Plug.Builder&lt;/code&gt;&lt;/a&gt; provides is used internally to execute all the plugs listed using the &lt;code&gt;plug&lt;/code&gt; macro, so overriding the &lt;code&gt;call/2&lt;/code&gt; function generally implies using &lt;code&gt;super&lt;/code&gt; in order to still call the plug chain:</source>
          <target state="translated">&lt;code&gt;call/2&lt;/code&gt; こと機能&lt;a href=&quot;plug.builder#content&quot;&gt; &lt;code&gt;Plug.Builder&lt;/code&gt; を&lt;/a&gt;提供する全てのプラグを使用してリストを実行するために内部的に使用される &lt;code&gt;plug&lt;/code&gt; オーバーライドので、マクロを &lt;code&gt;call/2&lt;/code&gt; 機能は、一般的に使用意味 &lt;code&gt;super&lt;/code&gt; 依然としてプラグチェーンを呼び出すために：</target>
        </trans-unit>
        <trans-unit id="59369e81ae4c82531a9066b2b16f4703c7464cfc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;changeset/2&lt;/code&gt; function first invokes &lt;a href=&quot;ecto.changeset#cast/4&quot;&gt;&lt;code&gt;Ecto.Changeset.cast/4&lt;/code&gt;&lt;/a&gt; with the struct, the parameters and a list of allowed fields; this returns a changeset. The parameters is a map with binary keys and values that will be cast based on the type defined on the schema.</source>
          <target state="translated">&lt;code&gt;changeset/2&lt;/code&gt; 機能最初呼び出す&lt;a href=&quot;ecto.changeset#cast/4&quot;&gt; &lt;code&gt;Ecto.Changeset.cast/4&lt;/code&gt; &lt;/a&gt;構造体、パラメータおよび許可フィールドのリストを有します。これはチェンジセットを返します。パラメータは、スキーマで定義されたタイプに基づいてキャストされるバイナリキーと値のマップです。</target>
        </trans-unit>
        <trans-unit id="fcd29f0f3ca38c03e6a05f563bf7684e923be86d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;channel&lt;/code&gt; macro accepts topic patterns in two flavors. A splat (the &lt;code&gt;*&lt;/code&gt; character) argument can be provided as the last character to indicate a &lt;code&gt;&quot;topic:subtopic&quot;&lt;/code&gt; match. If a plain string is provided, only that topic will match the channel handler. Most use-cases will use the &lt;code&gt;&quot;topic:*&quot;&lt;/code&gt; pattern to allow more versatile topic scoping.</source>
          <target state="translated">&lt;code&gt;channel&lt;/code&gt; マクロは、2種類のトピックのパターンを受け入れます。 &lt;code&gt;&quot;topic:subtopic&quot;&lt;/code&gt; 一致を示す最後の文字として、スプラット（ &lt;code&gt;*&lt;/code&gt; 文字）引数を指定できます。プレーンな文字列が指定されている場合、そのトピックのみがチャネルハンドラーに一致します。ほとんどのユースケースでは、 &lt;code&gt;&quot;topic:*&quot;&lt;/code&gt; パターンを使用して、より用途の広いトピックスコープを可能にします。</target>
        </trans-unit>
        <trans-unit id="2294206fb3a150cd9c224614317f9aee05e6f3e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;channel&lt;/code&gt; macro accepts topic patterns in two flavors. A splat argument can be provided as the last character to indicate a &amp;ldquo;topic:subtopic&amp;rdquo; match. If a plain string is provided, only that topic will match the channel handler. Most use-cases will use the &amp;ldquo;topic:*&amp;rdquo; pattern to allow more versatile topic scoping.</source>
          <target state="translated">&lt;code&gt;channel&lt;/code&gt; マクロは、2種類のトピックのパターンを受け入れます。「トピック：サブトピック」の一致を示す最後の文字としてスプラット引数を指定できます。プレーンな文字列が指定されている場合、そのトピックのみがチャネルハンドラと一致します。ほとんどのユースケースでは、「topic：*」パターンを使用して、より用途の広いトピックスコーピングを可能にします。</target>
        </trans-unit>
        <trans-unit id="6fd75bfb56e80fb59c39a66cbca5dfc544043958" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;do/end&lt;/code&gt; will be available as an anonymous function in an assign named &lt;code&gt;@inner_content&lt;/code&gt;. The anonymous function must be invoked passing a new set of assigns that will be merged into the user assigns. For example, the grid component above could be implemented as:</source>
          <target state="translated">&lt;code&gt;do/end&lt;/code&gt; 名前の割り当てで無名関数として利用できるようになります &lt;code&gt;@inner_content&lt;/code&gt; 。匿名関数は、ユーザーの割り当てにマージされる新しい割り当てのセットを渡して呼び出す必要があります。たとえば、上記のグリッドコンポーネントは次のように実装できます。</target>
        </trans-unit>
        <trans-unit id="0566567c74373795b6261b3892abb0503ed0e625" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dynamic&lt;/code&gt; macro can be interpolated at the root of a &lt;code&gt;where&lt;/code&gt;, &lt;code&gt;having&lt;/code&gt; or a &lt;code&gt;join&lt;/code&gt;'s &lt;code&gt;on&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dynamic&lt;/code&gt; マクロのルートに補間することができる、 &lt;code&gt;having&lt;/code&gt; 、または &lt;code&gt;join&lt;/code&gt; の &lt;code&gt;on&lt;/code&gt; 。 &lt;code&gt;where&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="077b06b43fe5cab3947b5c73d7e014aabfed4b80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ecto.rollback&lt;/code&gt; task will reverse the last migration we have run, undoing the schema changes. &lt;code&gt;ecto.migrate&lt;/code&gt; and &lt;code&gt;ecto.rollback&lt;/code&gt; are mirror images of each other.</source>
          <target state="translated">&lt;code&gt;ecto.rollback&lt;/code&gt; のタスクはスキーマの変更を元に戻す、我々が実行した最後の移行が逆になります。 &lt;code&gt;ecto.migrate&lt;/code&gt; と &lt;code&gt;ecto.rollback&lt;/code&gt; は、互いのミラーイメージです。</target>
        </trans-unit>
        <trans-unit id="b47faccb75d970d09e733fcef42fb4e981d00af8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;element&lt;/code&gt; is created with &lt;a href=&quot;#element/3&quot;&gt;&lt;code&gt;element/3&lt;/code&gt;&lt;/a&gt; and must point to a single element on the page with a &lt;code&gt;phx-blur&lt;/code&gt; attribute in it. The event name given set on &lt;code&gt;phx-blur&lt;/code&gt; is then sent to the appropriate LiveView (or component if &lt;code&gt;phx-target&lt;/code&gt; is set accordingly). All &lt;code&gt;phx-value-*&lt;/code&gt; entries in the element are sent as values. Extra values can be given with the &lt;code&gt;value&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;element&lt;/code&gt; 使用して作成された&lt;a href=&quot;#element/3&quot;&gt; &lt;code&gt;element/3&lt;/code&gt; &lt;/a&gt;とページ上の単一の要素へと必須ポイント &lt;code&gt;phx-blur&lt;/code&gt; それで属性。 &lt;code&gt;phx-blur&lt;/code&gt; に設定されたイベント名は、適切なLiveView（または &lt;code&gt;phx-target&lt;/code&gt; が適切に設定されている場合はコンポーネント）に送信されます。要素内のすべての &lt;code&gt;phx-value-*&lt;/code&gt; エントリは値として送信されます。 &lt;code&gt;value&lt;/code&gt; 引数を使用して、追加の値を指定できます。</target>
        </trans-unit>
        <trans-unit id="5019576176da0a0182ad14b8fd3ae5734cc494eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;element&lt;/code&gt; is created with &lt;a href=&quot;#element/3&quot;&gt;&lt;code&gt;element/3&lt;/code&gt;&lt;/a&gt; and must point to a single element on the page with a &lt;code&gt;phx-change&lt;/code&gt; attribute in it. The event name given set on &lt;code&gt;phx-change&lt;/code&gt; is then sent to the appropriate LiveView (or component if &lt;code&gt;phx-target&lt;/code&gt; is set accordingly). All &lt;code&gt;phx-value-*&lt;/code&gt; entries in the element are sent as values.</source>
          <target state="translated">&lt;code&gt;element&lt;/code&gt; 使用して作成された&lt;a href=&quot;#element/3&quot;&gt; &lt;code&gt;element/3&lt;/code&gt; &lt;/a&gt;とページ上の単一の要素へと必須ポイント &lt;code&gt;phx-change&lt;/code&gt; それで属性。 &lt;code&gt;phx-change&lt;/code&gt; で設定されたイベント名は、適切なLiveView（または &lt;code&gt;phx-target&lt;/code&gt; が適切に設定されている場合はコンポーネント）に送信されます。要素内のすべての &lt;code&gt;phx-value-*&lt;/code&gt; エントリは値として送信されます。</target>
        </trans-unit>
        <trans-unit id="d153088b0ac1c3ab072462dcfc030a49a5bb2603" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;element&lt;/code&gt; is created with &lt;a href=&quot;#element/3&quot;&gt;&lt;code&gt;element/3&lt;/code&gt;&lt;/a&gt; and must point to a single element on the page with a &lt;code&gt;phx-click&lt;/code&gt; attribute in it. The event name given set on &lt;code&gt;phx-click&lt;/code&gt; is then sent to the appropriate LiveView (or component if &lt;code&gt;phx-target&lt;/code&gt; is set accordingly). All &lt;code&gt;phx-value-*&lt;/code&gt; entries in the element are sent as values. Extra values can be given with the &lt;code&gt;value&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;element&lt;/code&gt; 使用して作成された&lt;a href=&quot;#element/3&quot;&gt; &lt;code&gt;element/3&lt;/code&gt; &lt;/a&gt;とページ上の単一の要素へと必須ポイント &lt;code&gt;phx-click&lt;/code&gt; その中に属性。 &lt;code&gt;phx-click&lt;/code&gt; で設定されたイベント名は、適切なLiveView（または &lt;code&gt;phx-target&lt;/code&gt; が適切に設定されている場合はコンポーネント）に送信されます。要素内のすべての &lt;code&gt;phx-value-*&lt;/code&gt; エントリは値として送信されます。 &lt;code&gt;value&lt;/code&gt; 引数を使用して、追加の値を指定できます。</target>
        </trans-unit>
        <trans-unit id="7cc050be15922cc83544181133c115aeaf56c9ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;element&lt;/code&gt; is created with &lt;a href=&quot;#element/3&quot;&gt;&lt;code&gt;element/3&lt;/code&gt;&lt;/a&gt; and must point to a single element on the page with a &lt;code&gt;phx-focus&lt;/code&gt; attribute in it. The event name given set on &lt;code&gt;phx-focus&lt;/code&gt; is then sent to the appropriate LiveView (or component if &lt;code&gt;phx-target&lt;/code&gt; is set accordingly). All &lt;code&gt;phx-value-*&lt;/code&gt; entries in the element are sent as values. Extra values can be given with the &lt;code&gt;value&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;element&lt;/code&gt; 使用して作成された&lt;a href=&quot;#element/3&quot;&gt; &lt;code&gt;element/3&lt;/code&gt; &lt;/a&gt;とページ上の単一の要素へと必須ポイント &lt;code&gt;phx-focus&lt;/code&gt; それで属性。 &lt;code&gt;phx-focus&lt;/code&gt; に設定されたイベント名は、適切なLiveView（または &lt;code&gt;phx-target&lt;/code&gt; が適切に設定されている場合はコンポーネント）に送信されます。要素内のすべての &lt;code&gt;phx-value-*&lt;/code&gt; エントリは値として送信されます。 &lt;code&gt;value&lt;/code&gt; 引数を使用して、追加の値を指定できます。</target>
        </trans-unit>
        <trans-unit id="3a8552f5bca94ee3cd7fe7fd6d2f0771c726944d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;element&lt;/code&gt; is created with &lt;a href=&quot;#element/3&quot;&gt;&lt;code&gt;element/3&lt;/code&gt;&lt;/a&gt; and must point to a single element on the page with a &lt;code&gt;phx-keydown&lt;/code&gt; or &lt;code&gt;phx-window-keydown&lt;/code&gt; attribute in it. The event name given set on &lt;code&gt;phx-keydown&lt;/code&gt; is then sent to the appropriate LiveView (or component if &lt;code&gt;phx-target&lt;/code&gt; is set accordingly). All &lt;code&gt;phx-value-*&lt;/code&gt; entries in the element are sent as values. Extra values can be given with the &lt;code&gt;value&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;element&lt;/code&gt; 使用して作成された&lt;a href=&quot;#element/3&quot;&gt; &lt;code&gt;element/3&lt;/code&gt; &lt;/a&gt;としてページ上の単一の要素を指している必要があります &lt;code&gt;phx-keydown&lt;/code&gt; または &lt;code&gt;phx-window-keydown&lt;/code&gt; その内の属性。次に、 &lt;code&gt;phx-keydown&lt;/code&gt; で設定されたイベント名が、適切なLiveView（または &lt;code&gt;phx-target&lt;/code&gt; が適切に設定されている場合はコンポーネント）に送信されます。要素内のすべての &lt;code&gt;phx-value-*&lt;/code&gt; エントリは値として送信されます。 &lt;code&gt;value&lt;/code&gt; 引数を使用して、追加の値を指定できます。</target>
        </trans-unit>
        <trans-unit id="346fe7c5d882669468106690d1f552e7e73c91d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;element&lt;/code&gt; is created with &lt;a href=&quot;#element/3&quot;&gt;&lt;code&gt;element/3&lt;/code&gt;&lt;/a&gt; and must point to a single element on the page with a &lt;code&gt;phx-keyup&lt;/code&gt; or &lt;code&gt;phx-window-keyup&lt;/code&gt; attribute in it. The event name given set on &lt;code&gt;phx-keyup&lt;/code&gt; is then sent to the appropriate LiveView (or component if &lt;code&gt;phx-target&lt;/code&gt; is set accordingly). All &lt;code&gt;phx-value-*&lt;/code&gt; entries in the element are sent as values. Extra values can be given with the &lt;code&gt;value&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;element&lt;/code&gt; 使用して作成された&lt;a href=&quot;#element/3&quot;&gt; &lt;code&gt;element/3&lt;/code&gt; &lt;/a&gt;としてページ上の単一の要素を指している必要があります &lt;code&gt;phx-keyup&lt;/code&gt; や &lt;code&gt;phx-window-keyup&lt;/code&gt; その内の属性。 &lt;code&gt;phx-keyup&lt;/code&gt; で設定されたイベント名は、適切なLiveView（または &lt;code&gt;phx-target&lt;/code&gt; が適切に設定されている場合はコンポーネント）に送信されます。要素内のすべての &lt;code&gt;phx-value-*&lt;/code&gt; エントリは値として送信されます。 &lt;code&gt;value&lt;/code&gt; 引数を使用して、追加の値を指定できます。</target>
        </trans-unit>
        <trans-unit id="8a298b368b8d58666332ac5fd98b74d5ced7a849" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;element&lt;/code&gt; is created with &lt;a href=&quot;#element/3&quot;&gt;&lt;code&gt;element/3&lt;/code&gt;&lt;/a&gt; and must point to a single element on the page with a &lt;code&gt;phx-submit&lt;/code&gt; attribute in it. The event name given set on &lt;code&gt;phx-submit&lt;/code&gt; is then sent to the appropriate LiveView (or component if &lt;code&gt;phx-target&lt;/code&gt; is set accordingly). All &lt;code&gt;phx-value-*&lt;/code&gt; entries in the element are sent as values. Extra values, including hidden input fields, can be given with the &lt;code&gt;value&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;element&lt;/code&gt; 使用して作成された&lt;a href=&quot;#element/3&quot;&gt; &lt;code&gt;element/3&lt;/code&gt; &lt;/a&gt;とページ上の単一の要素へと必須ポイント &lt;code&gt;phx-submit&lt;/code&gt; ことで属性。次に、 &lt;code&gt;phx-submit&lt;/code&gt; で設定されたイベント名が、適切なLiveView（または &lt;code&gt;phx-target&lt;/code&gt; が適切に設定されている場合はコンポーネント）に送信されます。要素内のすべての &lt;code&gt;phx-value-*&lt;/code&gt; エントリは値として送信されます。非表示の入力フィールドを含む追加の値は、 &lt;code&gt;value&lt;/code&gt; 引数で指定できます。</target>
        </trans-unit>
        <trans-unit id="cfbf0996b2b7c1661988ea246da6fcdfd58f43b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encode!/1&lt;/code&gt; function must return a tuple in the format &lt;code&gt;{:socket_push, :text | :binary, String.t | binary}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;encode!/1&lt;/code&gt; 関数はフォーマットのタプルを返す必要があり &lt;code&gt;{:socket_push, :text | :binary, String.t | binary}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="055209e601ab76424461a3d24cfbe4383896ba1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fetch/2&lt;/code&gt; function above fetches all users from the database who have registered presences for the given topic. The presences information is then extended with a &lt;code&gt;:user&lt;/code&gt; key of the user's information, while maintaining the required &lt;code&gt;:metas&lt;/code&gt; field from the original presence data.</source>
          <target state="translated">上記の &lt;code&gt;fetch/2&lt;/code&gt; 関数は、指定されたトピックのプレゼンスを登録したすべてのユーザーをデータベースからフェッチします。次に、プレゼンス情報は、元のプレゼンスデータから必要な &lt;code&gt;:metas&lt;/code&gt; フィールドを維持しながら、ユーザー情報の &lt;code&gt;:user&lt;/code&gt; キーで拡張されます。</target>
        </trans-unit>
        <trans-unit id="6a64f3256798e6a70350cf3a635b234e379dcbdc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;form&lt;/code&gt; should either be a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Phoenix.HTML.Form&lt;/code&gt;&lt;/a&gt; emitted by &lt;code&gt;form_for&lt;/code&gt; or an atom.</source>
          <target state="translated">&lt;code&gt;form&lt;/code&gt; どちらかであるべきである&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Phoenix.HTML.Form&lt;/code&gt; &lt;/a&gt;によって放出される &lt;code&gt;form_for&lt;/code&gt; 又は原子です。</target>
        </trans-unit>
        <trans-unit id="503560113ad63b1bbf6a1ce7a1a79895b311563a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;form&lt;/code&gt; should either be a &lt;a href=&quot;phoenix.html.form#content&quot;&gt;&lt;code&gt;Phoenix.HTML.Form&lt;/code&gt;&lt;/a&gt; emitted by &lt;code&gt;form_for&lt;/code&gt; or an atom.</source>
          <target state="translated">&lt;code&gt;form&lt;/code&gt; どちらかであるべきである&lt;a href=&quot;phoenix.html.form#content&quot;&gt; &lt;code&gt;Phoenix.HTML.Form&lt;/code&gt; &lt;/a&gt;によって放出される &lt;code&gt;form_for&lt;/code&gt; 又は原子です。</target>
        </trans-unit>
        <trans-unit id="bd226e25354c107d2906f0cbea19295e4d882cd8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;json/2&lt;/code&gt; function is obviously useful for writing APIs, and the other two may come in handy, but most of the times we use Phoenix views to build our responses. For this, Phoenix provides the &lt;code&gt;render/3&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;json/2&lt;/code&gt; 機能はAPIを記述するための、明らかに有用であり、他の2つは便利になるかもしれないが、時間のほとんどは、私たちは私たちの応答を構築するためにフェニックスのビューを使用します。このために、Phoenixは &lt;code&gt;render/3&lt;/code&gt; 関数を提供します。</target>
        </trans-unit>
        <trans-unit id="a3d0728771ec4d2ea3c901f60ad19db7fa2a8d0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lib/hello/application.ex&lt;/code&gt; file defines an Elixir application named &lt;code&gt;Hello.Application&lt;/code&gt;. That's because at the end of the day Phoenix applications are simply Elixir applications. The &lt;code&gt;Hello.Application&lt;/code&gt; module defines which services are part of our application:</source>
          <target state="translated">&lt;code&gt;lib/hello/application.ex&lt;/code&gt; ファイルは、名前のエリクサーアプリケーション定義 &lt;code&gt;Hello.Application&lt;/code&gt; を。これは、結局のところ、Phoenixアプリケーションが単にElixirアプリケーションであるためです。 &lt;code&gt;Hello.Application&lt;/code&gt; のサービスは、当社のアプリケーションの一部であるモジュールの定義：</target>
        </trans-unit>
        <trans-unit id="4b44c23c2835aabf2b8a0d71d119e8487fdff8fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lib/hello&lt;/code&gt; directory hosts all of your business domain. Since our project does not have any business logic yet, the directory is mostly empty. You will only find two files:</source>
          <target state="translated">&lt;code&gt;lib/hello&lt;/code&gt; すべてのあなたのビジネスドメインのディレクトリホスト。私たちのプロジェクトにはまだビジネスロジックがないため、ディレクトリはほとんど空です。次の2つのファイルしかありません。</target>
        </trans-unit>
        <trans-unit id="c968f45c63fd13191f1cd53260d0ffe8f31d44b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lib/hello_web&lt;/code&gt; directory holds the web-related parts of our application. It looks like this when expanded:</source>
          <target state="translated">&lt;code&gt;lib/hello_web&lt;/code&gt; ディレクトリには、私たちのアプリケーションのWeb関連部品を保持しています。展開すると次のようになります。</target>
        </trans-unit>
        <trans-unit id="c2252012c87ac27460a9e7188fe0a3ff365ab835" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lv:&lt;/code&gt; event prefix supports LiveView specific features that are handled by LiveView without calling the user's &lt;code&gt;handle_event/3&lt;/code&gt; callbacks. Today, the following events are supported:</source>
          <target state="translated">&lt;code&gt;lv:&lt;/code&gt; ユーザーの呼び出すことなく、ライブビューによって処理されるイベントの接頭辞がサポートするライブビューの特定の機能 &lt;code&gt;handle_event/3&lt;/code&gt; コールバックを。現在、次のイベントがサポートされています。</target>
        </trans-unit>
        <trans-unit id="3dd5c68b341c68e39c0234d83212f3aebd4c77c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onkeydown&lt;/code&gt;, and &lt;code&gt;onkeyup&lt;/code&gt; events are supported via the &lt;code&gt;phx-keydown&lt;/code&gt;, and &lt;code&gt;phx-keyup&lt;/code&gt; bindings. Each binding supports a &lt;code&gt;phx-key&lt;/code&gt; attribute, which triggers the event for the specific key press. If no &lt;code&gt;phx-key&lt;/code&gt; is provided, the event is triggered for any key press. When pushed, the value sent to the server will contain the &lt;code&gt;&quot;key&quot;&lt;/code&gt; that was pressed, plus any user-defined metadata. For example, pressing the Escape key looks like this:</source>
          <target state="translated">&lt;code&gt;onkeydown&lt;/code&gt; をは、と &lt;code&gt;onkeyup&lt;/code&gt; のイベントを介してサポートされている &lt;code&gt;phx-keydown&lt;/code&gt; 、および &lt;code&gt;phx-keyup&lt;/code&gt; バインディング。各バインディングは、特定のキーが押されたときにイベントをトリガーする &lt;code&gt;phx-key&lt;/code&gt; 属性をサポートします。 &lt;code&gt;phx-key&lt;/code&gt; が指定されていない場合、イベントはキーが押されるたびにトリガーされます。プッシュされると、サーバーに送信される値には、押された &lt;code&gt;&quot;key&quot;&lt;/code&gt; とユーザー定義のメタデータが含まれます。たとえば、Escキーを押すと次のようになります。</target>
        </trans-unit>
        <trans-unit id="0f4280e53fd7de2d333eac4e3efda660422aeb8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; contains an &lt;code&gt;opcode&lt;/code&gt; key, this will be either &lt;code&gt;:ping&lt;/code&gt; or &lt;code&gt;:pong&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 含まれている &lt;code&gt;opcode&lt;/code&gt; キーを、これはどちらかになり &lt;code&gt;:ping&lt;/code&gt; または &lt;code&gt;:pong&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="70b7c6ea8c001315dd26a0ae19bec5c510733707" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;opts&lt;/code&gt; that are received in the &lt;code&gt;init/1&lt;/code&gt; callback of the Module Plug can be passed as a 3rd argument. For example, maybe the background job lets you set the name of your application to be displayed on the page. This could be passed with:</source>
          <target state="translated">&lt;code&gt;opts&lt;/code&gt; に受信されている &lt;code&gt;init/1&lt;/code&gt; モジュールのプラグインのコールバックは、3番目の引数として渡すことができます。たとえば、バックグラウンドジョブを使用すると、ページに表示するアプリケーションの名前を設定できます。これは次のように渡すことができます：</target>
        </trans-unit>
        <trans-unit id="a30635ea371ab0a08e396d17ab555117f5134b4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;params&lt;/code&gt; is the list of query parameters. For example, for a query such as &lt;code&gt;from Post, where: [id: ^123]&lt;/code&gt;, &lt;code&gt;params&lt;/code&gt; will be &lt;code&gt;[123]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; がクエリパラメータのリストです。たとえば、 &lt;code&gt;from Post, where: [id: ^123]&lt;/code&gt; などのクエリの場合：[id：^ 123]、 &lt;code&gt;params&lt;/code&gt; は &lt;code&gt;[123]&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="cc799acb99c7c5e0571705aabef686e2a9bc106f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;params_or_body&lt;/code&gt; field must be one of:</source>
          <target state="translated">&lt;code&gt;params_or_body&lt;/code&gt; フィールドは、のいずれかでなければなりません。</target>
        </trans-unit>
        <trans-unit id="ba32a6b84a77473cde79076160c7d25a5500e027" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; can be either a string or the &lt;code&gt;path_info&lt;/code&gt; segments.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 文字列またはのいずれかであり得る &lt;code&gt;path_info&lt;/code&gt; セグメント。</target>
        </trans-unit>
        <trans-unit id="6557be94c3b172806d0d806c90f7d5a409872519" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; is commonly the request path with optional query string but it may also be a complete URI. When a URI is given, the host and schema will be used as part of the request too.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; 一般的に、オプションのクエリ文字列と要求パスですが、それはまた、完全なURIかもしれません。URIが指定されると、ホストとスキーマもリクエストの一部として使用されます。</target>
        </trans-unit>
        <trans-unit id="2d55c3d00bf1f0ceaa729d7da79f6e3d8341ed27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;phx-capture-click&lt;/code&gt; event is just like &lt;code&gt;phx-click&lt;/code&gt;, but instead of the click event being dispatched to the closest &lt;code&gt;phx-click&lt;/code&gt; element as it bubbles up through the DOM, the event is dispatched as it propagates from the top of the DOM tree down to the target element. This is useful when wanting to bind click events without receiving bubbled events from child UI elements. Since capturing happens before bubbling, this can also be important for preparing or preventing behaviour that will be applied during the bubbling phase.</source>
          <target state="translated">&lt;code&gt;phx-capture-click&lt;/code&gt; イベントは同じようです &lt;code&gt;phx-click&lt;/code&gt; 、代わりにビーイングは、最も近いに派遣クリックイベントの &lt;code&gt;phx-click&lt;/code&gt; それはDOMを通じてバブルアップとして、それはDOMの上から伝播するように、イベントが送出され、要素ターゲット要素までツリーダウンします。これは、子UI要素からバブルイベントを受信せずにクリックイベントをバインドする場合に役立ちます。キャプチャはバブリングの前に行われるため、これはバブリングフェーズ中に適用される動作を準備または防止するためにも重要です。</target>
        </trans-unit>
        <trans-unit id="701ba5efe9283602358bbbeacee6d8120c0fe72a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;phx-click&lt;/code&gt; binding is used to send click events to the server. When any client event, such as a &lt;code&gt;phx-click&lt;/code&gt; click is pushed, the value sent to the server will be chosen with the following priority:</source>
          <target state="translated">&lt;code&gt;phx-click&lt;/code&gt; 結合は、サーバーへのクリックイベントを送信するために使用されます。 &lt;code&gt;phx-click&lt;/code&gt; クリックなどのクライアントイベントがプッシュされると、サーバーに送信される値が次の優先順位で選択されます。</target>
        </trans-unit>
        <trans-unit id="aecbede8f9d2cd80586f2666e7832e30ea05d175" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;phx-submit&lt;/code&gt; event is used for form submissions where major side effects typically happen, such as rendering new containers, calling an external service, or redirecting to a new page.</source>
          <target state="translated">&lt;code&gt;phx-submit&lt;/code&gt; イベントは、このような、新しいコンテナをレンダリングする外部サービスを呼び出し、または新規ページへのリダイレクトなどの主要な副作用は、一般的に起こるフォームの送信に使用されます。</target>
        </trans-unit>
        <trans-unit id="5f3fdb35b1ba87d8758c4c7f6b8c9c83d6077ee9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;phx-trigger-action&lt;/code&gt; attribute can be added to a form to trigger a standard form submit on DOM patch to the URL specified in the form's standard &lt;code&gt;action&lt;/code&gt; attribute. This is useful to perform pre-final validation of a LiveView form submit before posting to a controller route for operations that require Plug session mutation. For example, in your LiveView template you can annotate the &lt;code&gt;phx-trigger-action&lt;/code&gt; with a boolean assign:</source>
          <target state="translated">&lt;code&gt;phx-trigger-action&lt;/code&gt; 属性は、標準フォームがフォームの標準で指定されたURLにDOMパッチを提出トリガーするフォームに追加することができます &lt;code&gt;action&lt;/code&gt; 属性。これは、プラグセッションの変更が必要な操作のためにコントローラールートに投稿する前に、LiveViewフォーム送信の最終前検証を実行するのに役立ちます。たとえば、LiveViewテンプレートでは、 &lt;code&gt;phx-trigger-action&lt;/code&gt; にブール値の割り当てで注釈を付けることができます。</target>
        </trans-unit>
        <trans-unit id="7722c1018aa1c3f5818dfe70fb8f2d0e854f196c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;query_cache&lt;/code&gt; and its state is documented in &lt;a href=&quot;#t:query_cache/0&quot;&gt;&lt;code&gt;query_cache/0&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;query_cache&lt;/code&gt; 、その状態がに記載されて&lt;a href=&quot;#t:query_cache/0&quot;&gt; &lt;code&gt;query_cache/0&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cfd929735613a63a87936d342dcfc378113b7e06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;query_meta&lt;/code&gt; field is a map containing some of the fields found in the &lt;a href=&quot;ecto.query&quot;&gt;&lt;code&gt;Ecto.Query&lt;/code&gt;&lt;/a&gt; struct, after they have been normalized. For example, the values &lt;code&gt;selected&lt;/code&gt; by the query, which then have to be returned, can be found in &lt;code&gt;query_meta&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;query_meta&lt;/code&gt; のフィールドがで見つかったいくつかのフィールド含むマップです&lt;a href=&quot;ecto.query&quot;&gt; &lt;code&gt;Ecto.Query&lt;/code&gt; の&lt;/a&gt;彼らは正規化された後、構造体を。たとえば、クエリで &lt;code&gt;selected&lt;/code&gt; れた値は、クエリで返される必要がありますが、 &lt;code&gt;query_meta&lt;/code&gt; にあります。</target>
        </trans-unit>
        <trans-unit id="5c3070b126b1c8e20df8236ea7fbdbd8a762f348" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;render_many/3&lt;/code&gt; function takes the data we want to respond with (&lt;code&gt;pages&lt;/code&gt;), a view, and a string to pattern match on the &lt;code&gt;render/2&lt;/code&gt; function defined on view. It will map over each item in &lt;code&gt;pages&lt;/code&gt;, and call &lt;code&gt;PageView.render(&quot;page.json&quot;, %{page: page})&lt;/code&gt;. &lt;code&gt;render_one/3&lt;/code&gt; follows, the same signature, ultimately using the &lt;code&gt;render/2&lt;/code&gt; matching &lt;code&gt;page.json&lt;/code&gt; to specify what each &lt;code&gt;page&lt;/code&gt; looks like.</source>
          <target state="translated">&lt;code&gt;render_many/3&lt;/code&gt; の機能は、我々は（と応答するデータ取り &lt;code&gt;pages&lt;/code&gt; ）、ビュー、および上のパターンマッチに文字列 &lt;code&gt;render/2&lt;/code&gt; ビューに定義された関数を。 &lt;code&gt;pages&lt;/code&gt; 内の各アイテムにマップされ、 &lt;code&gt;PageView.render(&quot;page.json&quot;, %{page: page})&lt;/code&gt; を呼び出します。 &lt;code&gt;render_one/3&lt;/code&gt; が続き、同じ署名が続き、最終的には &lt;code&gt;render/2&lt;/code&gt; の一致する &lt;code&gt;page.json&lt;/code&gt; を使用して各 &lt;code&gt;page&lt;/code&gt; がどのように見えるかを指定します。</target>
        </trans-unit>
        <trans-unit id="e4f45984330c354b062f13b6711532673248bd5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reply&lt;/code&gt; is a tuple contain an &lt;code&gt;opcode&lt;/code&gt; atom and a message that can be any term. The built-in websocket transport supports both &lt;code&gt;:text&lt;/code&gt; and &lt;code&gt;:binary&lt;/code&gt; opcode and the message must be always iodata. Long polling only supports text opcode.</source>
          <target state="translated">&lt;code&gt;reply&lt;/code&gt; タプルが含まれている &lt;code&gt;opcode&lt;/code&gt; 原子と任意の用語であることができるメッセージを。組み込みのWebSocketトランスポートは &lt;code&gt;:text&lt;/code&gt; と &lt;code&gt;:binary&lt;/code&gt; オペコードの両方をサポートし、メッセージは常にiodataである必要があります。ロングポーリングはテキストオペコードのみをサポートします。</target>
        </trans-unit>
        <trans-unit id="e9961db9b5232c882c065bf97a578f4c214483a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;run/1&lt;/code&gt; function is the critical heart of any Mix task. It's the function that does all the work when users invoke our task. In ours, all we do is send a greeting from our app, but we can implement our &lt;code&gt;run/1&lt;/code&gt; function to do whatever we need it to. Note that &lt;code&gt;Mix.shell().info/1&lt;/code&gt; is the preferred way to print text back out to the user.</source>
          <target state="translated">&lt;code&gt;run/1&lt;/code&gt; 関数は、任意のミックス作業の重要な中心地です。これは、ユーザーがタスクを呼び出したときにすべての作業を行う関数です。私たちの場合、アプリから挨拶を送信するだけですが、 &lt;code&gt;run/1&lt;/code&gt; 関数を実装して、必要なことをすべて実行できます。 &lt;code&gt;Mix.shell().info/1&lt;/code&gt; は、テキストをユーザーに印刷して戻すための推奨される方法であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="2b70572d736ea97cd893ae8c7a89f40d35ac5c3a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use Mix.Task&lt;/code&gt; line brings in functionality from Mix that makes this module behave as a mix task.</source>
          <target state="translated">&lt;code&gt;use Mix.Task&lt;/code&gt; ラインは、ミックスタスクとして、このモジュール振る舞いを作るミックスから機能をもたらします。</target>
        </trans-unit>
        <trans-unit id="a21cb29773a5a21a0cd8e43940897e0aec855c3a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;views&lt;/code&gt; attribute on the pages will not be updated directly by the user, so let's remove it from the generated form. Open &lt;code&gt;lib/hello_web/templates/cms/page/form.html.eex&lt;/code&gt; and remove this part:</source>
          <target state="translated">ページの &lt;code&gt;views&lt;/code&gt; 属性はユーザーによって直接更新されないため、生成されたフォームから削除しましょう。オープン &lt;code&gt;lib/hello_web/templates/cms/page/form.html.eex&lt;/code&gt; この部分を削除します。</target>
        </trans-unit>
        <trans-unit id="7162959016edba78d69180b52bd5f5a794f9abb9" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Compatible&lt;/strong&gt; cipher suite supports tlsv1, tlsv1.1 and tlsv1.2. Ciphers were based on the OWASP Group B and includes support for RSA or ECDSA certificates. The intention of this configuration is to provide as secure as possible defaults that still maintain support for older browsers and Android versions 4.3 and earlier</source>
          <target state="translated">&lt;strong&gt;互換性のある&lt;/strong&gt;暗号スイートはTLSv1の、tlsv1.1とtlsv1.2をサポートしています。暗号はOWASPグループBに基づいており、RSAまたはECDSA証明書のサポートが含まれています。この構成の目的は、古いブラウザーとAndroidバージョン4.3以前のサポートを引き続き維持する、可能な限り安全なデフォルトを提供することです。</target>
        </trans-unit>
        <trans-unit id="99eef0b8032d9eb66bdd6211a81ce1aa7ab072a6" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Strong&lt;/strong&gt; cipher suite only supports tlsv1.2. Ciphers were based on the OWASP Group A+ and includes support for RSA or ECDSA certificates. The intention of this configuration is to provide as secure as possible defaults knowing that it will not be fully compatible with older browsers and operating systems.</source>
          <target state="translated">&lt;strong&gt;強力な&lt;/strong&gt;暗号スイートはtlsv1.2をサポートしています。暗号はOWASPグループA +に基づいており、RSAまたはECDSA証明書のサポートが含まれています。この構成の目的は、古いブラウザやオペレーティングシステムとの完全な互換性がないことを知って、できるだけ安全なデフォルトを提供することです。</target>
        </trans-unit>
        <trans-unit id="1229266af5aeb7323a3edd251846a9e31826c75c" translate="yes" xml:space="preserve">
          <source>The API expected by a module plug is defined as a behaviour by the &lt;a href=&quot;plug#content&quot;&gt;&lt;code&gt;Plug&lt;/code&gt;&lt;/a&gt; module (this module).</source>
          <target state="translated">モジュールプラグによって期待されるAPIは、&lt;a href=&quot;plug#content&quot;&gt; &lt;code&gt;Plug&lt;/code&gt; &lt;/a&gt;モジュール（このモジュール）による動作として定義されます。</target>
        </trans-unit>
        <trans-unit id="397359192255c3cbb30eaefb0a5026e948b7ee90" translate="yes" xml:space="preserve">
          <source>The Complete Elixir and Phoenix Bootcamp Master Functional Programming Techniques with Elixir and Phoenix while Learning to Build Compelling Web Applications (by Stephen Grider - 2017)</source>
          <target state="translated">完全版 Elixir and Phoenix Bootcamp 説得力のあるWebアプリケーションの構築を学びながら、ElixirとPhoenixで機能的なプログラミング技術をマスターする (by Stephen Grider-2017)</target>
        </trans-unit>
        <trans-unit id="6ca090ddc59b8746edad3d668cd414cb0c01b50e" translate="yes" xml:space="preserve">
          <source>The Controller for LiveView rendering.</source>
          <target state="translated">LiveView レンダリング用のコントローラです。</target>
        </trans-unit>
        <trans-unit id="42a37edfcc20d368aed11372ea5e77be1563e669" translate="yes" xml:space="preserve">
          <source>The Cowboy adapter for Phoenix.</source>
          <target state="translated">フェニックス用のカウボーイアダプター。</target>
        </trans-unit>
        <trans-unit id="5a9ef2f700440dbe5deb29ded8f4c846809f867a" translate="yes" xml:space="preserve">
          <source>The Cowboy2 adapter for Phoenix.</source>
          <target state="translated">フェニックス用のカウボーイ2アダプター。</target>
        </trans-unit>
        <trans-unit id="b46e58ab01f0b48b2315edfcf8b2bd6c7e2b3937" translate="yes" xml:space="preserve">
          <source>The Ecto implementation of these operators provide only a thin layer above the adapters. So if your adapter allows you to use them in a certain way (like adding a date and an interval in PostgreSQL), it should work just fine in Ecto queries.</source>
          <target state="translated">これらの演算子のEcto実装は、アダプタの上に薄い層を提供するだけです。ですから、もしあなたのアダプタが特定の方法でこれらの演算子を使用することを許可しているのであれば(PostgreSQLで日付と間隔を追加するような)、Ectoのクエリでは問題なく動作するはずです。</target>
        </trans-unit>
        <trans-unit id="5fc206f389e6b83e4a0d3d847f1852857f161e08" translate="yes" xml:space="preserve">
          <source>The Ecto type</source>
          <target state="translated">エクトタイプの</target>
        </trans-unit>
        <trans-unit id="dfd71c1d2df0567450285bf90b77cd7746d88f5d" translate="yes" xml:space="preserve">
          <source>The Ecto type.</source>
          <target state="translated">エクトタイプです。</target>
        </trans-unit>
        <trans-unit id="8af11c43a109763d817fe84ffba10efa53664805" translate="yes" xml:space="preserve">
          <source>The Ecto.Changeset struct</source>
          <target state="translated">Ecto.Changeset 構造体</target>
        </trans-unit>
        <trans-unit id="22799cdc97ac8d9ad98ed9959054ca073ced3180" translate="yes" xml:space="preserve">
          <source>The Elixir and Phoenix communities are friendly and welcoming. All questions and comments are valuable, so please come join the discussion!</source>
          <target state="translated">ElixirとPhoenixのコミュニティはフレンドリーで歓迎されています。質問やコメントはすべて貴重なものですので、ぜひディスカッションに参加してください。</target>
        </trans-unit>
        <trans-unit id="2df24cb6684bccd3bc7f1741ada3cd48d84d2739" translate="yes" xml:space="preserve">
          <source>The Elixir compiler would infer that the router depends directly on &lt;code&gt;MyApp.PageController&lt;/code&gt;, which is not true. By using scopes, Phoenix can properly hint to the Elixir compiler the controller is not an actual dependency of the router. This provides more efficient compilation times.</source>
          <target state="translated">Elixirコンパイラーは、ルーターが &lt;code&gt;MyApp.PageController&lt;/code&gt; に直接依存していると推測しますが、これは正しくありません。スコープを使用することにより、PhoenixはElixirコンパイラーに適切にヒントを与えることができ、コントローラーはルーターの実際の依存関係ではありません。これにより、コンパイル時間がより効率的になります。</target>
        </trans-unit>
        <trans-unit id="91a790f106411de498ef0d34631c0e826c9311e7" translate="yes" xml:space="preserve">
          <source>The Elixir compiler would infer that the router depends directly on &lt;code&gt;MyAppWeb.PageController&lt;/code&gt;, which is not true. By using scopes, Phoenix can properly hint to the Elixir compiler the controller is not an actual dependency of the router. This provides more efficient compilation times.</source>
          <target state="translated">Elixirコンパイラは、ルーターが &lt;code&gt;MyAppWeb.PageController&lt;/code&gt; に直接依存していると推測しますが、これは正しくありません。フェニックスはスコープを使用することで、コントローラーがルーターの実際の依存関係ではないことをElixirコンパイラーに適切に示唆できます。これにより、コンパイル時間がより効率的になります。</target>
        </trans-unit>
        <trans-unit id="91f2df3ac4e5339357f53ff3d7998fcb1bc9dcf6" translate="yes" xml:space="preserve">
          <source>The Erlang/OTP runtime, with OpenSSL bindings; run &lt;code&gt;:crypto.info_lib()&lt;/code&gt; in an IEx session to verify</source>
          <target state="translated">OpenSSLバインディングを使用したErlang / OTPランタイム。 &lt;code&gt;:crypto.info_lib()&lt;/code&gt; セッションで：crypto.info_lib（）を実行して確認します</target>
        </trans-unit>
        <trans-unit id="a64bf2211a83bfb2580975f065ce021d849dded2" translate="yes" xml:space="preserve">
          <source>The ErrorView</source>
          <target state="translated">エラービュー</target>
        </trans-unit>
        <trans-unit id="7dcdec73ad8cfefe7c01cd059a8be75e6642807e" translate="yes" xml:space="preserve">
          <source>The JavaScript client is always the source of truth for current input values. For any given input with focus, LiveView will never overwrite the input's current value, even if it deviates from the server's rendered updates. This works well for updates where major side effects are not expected, such as form validation errors, or additive UX around the user's input values as they fill out a form.</source>
          <target state="translated">JavaScriptクライアントは常に現在の入力値の真実のソースです。フォーカスのある任意の入力に対して、LiveViewは入力の現在の値を上書きすることはありません。これは、フォームの検証エラーや、ユーザーがフォームに入力する際の入力値の周りに付加的なUXがあるような、大きな副作用が予想されない更新に適しています。</target>
        </trans-unit>
        <trans-unit id="831c44469432e217932a773e59cba3396570b870" translate="yes" xml:space="preserve">
          <source>The LiveView entry-point.</source>
          <target state="translated">LiveViewのエントリーポイント。</target>
        </trans-unit>
        <trans-unit id="84226f67c848aa70d2bc109fe1a02c277fbf9624" translate="yes" xml:space="preserve">
          <source>The LiveView programming model is declarative: instead of saying &quot;once event X happens, change Y on the page&quot;, events in LiveView are regular messages which may cause changes to its state. Once the state changes, LiveView will re-render the relevant parts of its HTML template and push it to the browser, which updates itself in the most efficient manner. This means developers write LiveView templates as any other server-rendered HTML and LiveView does the hard work of tracking changes and sending the relevant diffs to the browser.</source>
          <target state="translated">LiveViewのプログラミングモデルは宣言的です。&quot;イベントXが発生したら、ページのYを変更する &quot;と言うのではなく、LiveViewのイベントは定期的なメッセージであり、状態を変化させる可能性があります。一旦状態が変化すると、LiveViewはHTMLテンプレートの関連部分を再レンダリングしてブラウザにプッシュし、最も効率的な方法で更新します。これは、開発者が他のサーバーレンダリングされたHTMLと同じようにLiveViewテンプレートを書き、LiveViewが変更を追跡してブラウザに関連する差分を送信するというハードワークを行うことを意味します。</target>
        </trans-unit>
        <trans-unit id="1cabc4988a5643640cd777c24c4e10db6bb7accd" translate="yes" xml:space="preserve">
          <source>The LiveView socket for Phoenix Endpoints.</source>
          <target state="translated">Phoenix Endpoints用のLiveViewソケット。</target>
        </trans-unit>
        <trans-unit id="e596187a19062dc70866323907923d83b3869a8b" translate="yes" xml:space="preserve">
          <source>The LiveView then receives this event using &lt;code&gt;handle_info&lt;/code&gt;:</source>
          <target state="translated">次に、LiveViewはhandle_infoを使用してこのイベントを受信し &lt;code&gt;handle_info&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5341cef174c7e030180c57e14cc0a67dcaa4ae50" translate="yes" xml:space="preserve">
          <source>The MFA is invoked with the request &lt;code&gt;%URI{}&lt;/code&gt; as the first argument, followed by arguments in the MFA list.</source>
          <target state="translated">MFAは、最初の引数としてリクエスト &lt;code&gt;%URI{}&lt;/code&gt; して呼び出され、その後にMFAリストの引数が続きます。</target>
        </trans-unit>
        <trans-unit id="270a37f0365dba4dfda17bef61d0b68ede5a7a86" translate="yes" xml:space="preserve">
          <source>The PKCS#12 format is a container format containing one or more certificates and/or encrypted keys. Such files typically have a &lt;code&gt;.p12&lt;/code&gt; extension.</source>
          <target state="translated">PKCS＃12形式は、1つ以上の証明書や暗号化されたキーを含むコンテナ形式です。このようなファイルの拡張子は通常 &lt;code&gt;.p12&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3f1e3a1bf73da067cc61947c8f82ff5aabd55c0a" translate="yes" xml:space="preserve">
          <source>The Phoenix engine that handles the &lt;code&gt;.eex&lt;/code&gt; extension.</source>
          <target state="translated">&lt;code&gt;.eex&lt;/code&gt; 拡張子を処理するフェニックスエンジン。</target>
        </trans-unit>
        <trans-unit id="97f5600c69f57f57eb8f0eebfbf4c79da16ad178" translate="yes" xml:space="preserve">
          <source>The Phoenix engine that handles the &lt;code&gt;.exs&lt;/code&gt; extension.</source>
          <target state="translated">&lt;code&gt;.exs&lt;/code&gt; 拡張子を処理するフェニックスエンジン。</target>
        </trans-unit>
        <trans-unit id="7c893ff0c14a28253d63b6b6ebed042b7d8d1529" translate="yes" xml:space="preserve">
          <source>The Plug connection.</source>
          <target state="translated">プラグの接続です。</target>
        </trans-unit>
        <trans-unit id="922dcb442d54e2eb649f3edaeaaef6847fb03b26" translate="yes" xml:space="preserve">
          <source>The Plug pipeline</source>
          <target state="translated">プラグパイプライン</target>
        </trans-unit>
        <trans-unit id="6a8a63036ac108e3e027fabac2b118fd6784c36b" translate="yes" xml:space="preserve">
          <source>The Schema</source>
          <target state="translated">スキーマ</target>
        </trans-unit>
        <trans-unit id="c4c6b8de891ce76973a55d8788f25b02282a6500" translate="yes" xml:space="preserve">
          <source>The Strict-Transport-Security header can be disabled altogether by setting &lt;code&gt;hsts: false&lt;/code&gt; in the &lt;a href=&quot;plug.ssl&quot;&gt;&lt;code&gt;Plug.SSL&lt;/code&gt;&lt;/a&gt; options.</source>
          <target state="translated">&lt;a href=&quot;plug.ssl&quot;&gt; &lt;code&gt;Plug.SSL&lt;/code&gt; &lt;/a&gt;オプションで &lt;code&gt;hsts: false&lt;/code&gt; を設定することにより、Strict-Transport-Securityヘッダーを完全に無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="e7c9c578a9e075a767d2efcef454f02f30cab843" translate="yes" xml:space="preserve">
          <source>The Telemetry supervisor</source>
          <target state="translated">テレメトリー担当者</target>
        </trans-unit>
        <trans-unit id="75bea59495492e66c838d460fdfd553076619980" translate="yes" xml:space="preserve">
          <source>The Telemetry.Metrics package provides a common interface for defining metrics. It exposes a set of &lt;a href=&quot;https://hexdocs.pm/telemetry_metrics/Telemetry.Metrics.html#module-metrics&quot;&gt;five metric type functions&lt;/a&gt; that are responsible for structuring a given Telemetry event as a particular measurement.</source>
          <target state="translated">Telemetry.Metricsパッケージは、メトリックを定義するための共通インターフェイスを提供します。特定のテレメトリイベントを特定の測定値として構造化する役割を担う&lt;a href=&quot;https://hexdocs.pm/telemetry_metrics/Telemetry.Metrics.html#module-metrics&quot;&gt;5つのメトリックタイプ関数の&lt;/a&gt;セットを公開します。</target>
        </trans-unit>
        <trans-unit id="44b0c7e1640a8c7aaaeec212113c4828dc9f200b" translate="yes" xml:space="preserve">
          <source>The URL generated in the named URL helpers is based on the configuration for &lt;code&gt;:url&lt;/code&gt;, &lt;code&gt;:http&lt;/code&gt; and &lt;code&gt;:https&lt;/code&gt;. However, if for some reason you need to manually control the URL generation, the url helpers also allow you to pass in a &lt;a href=&quot;https://hexdocs.pm/elixir/URI.html&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt; struct:</source>
          <target state="translated">名前付きURLヘルパーで生成されるURLは、 &lt;code&gt;:url&lt;/code&gt; 、 &lt;code&gt;:http&lt;/code&gt; および &lt;code&gt;:https&lt;/code&gt; の構成に基づいています。ただし、何らかの理由でURL生成を手動で制御する必要がある場合は、URLヘルパーを使用して&lt;a href=&quot;https://hexdocs.pm/elixir/URI.html&quot;&gt; &lt;code&gt;URI&lt;/code&gt; &lt;/a&gt;構造体を渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="01f10584ffce5babefcdc2a0a4a9fa67e62fc824" translate="yes" xml:space="preserve">
          <source>The above approach is the preferred one when passing blocks to &lt;code&gt;do/end&lt;/code&gt;. However, if you are outside of a .leex template and you want to invoke a component passing a &lt;code&gt;do/end&lt;/code&gt; block, you will have to explicitly handle the assigns by giving it a &lt;code&gt;-&amp;gt;&lt;/code&gt; clause:</source>
          <target state="translated">上記のアプローチは、 &lt;code&gt;do/end&lt;/code&gt; にブロックを渡すときに推奨されるアプローチです。ただし、.leexテンプレートの外部にいて、 &lt;code&gt;do/end&lt;/code&gt; ブロックを渡すコンポーネントを呼び出す場合は、 &lt;code&gt;-&amp;gt;&lt;/code&gt; 句を指定して割り当てを明示的に処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="439164b882483574280fd7b6ddd89690e34cb2f9" translate="yes" xml:space="preserve">
          <source>The above example matches all the posts which are tied for being the most visited.</source>
          <target state="translated">上記の例では、最も訪問者数の多い投稿と同数の投稿がすべて一致しています。</target>
        </trans-unit>
        <trans-unit id="90e2cd8ec0b373e2a840d10a660fde9ed74b82f4" translate="yes" xml:space="preserve">
          <source>The above is specially useful to dynamically join on existing queries, for example, to dynamically choose a source, or by choosing between public posts or posts that have been recently published:</source>
          <target state="translated">上記は、既存のクエリに動的に結合する場合、例えばソースを動的に選択したり、公開されている投稿や最近公開された投稿の中から選択して結合するなど、特に便利です。</target>
        </trans-unit>
        <trans-unit id="ba48186478fa2045834150142a3421eea75c78b0" translate="yes" xml:space="preserve">
          <source>The above life-cycle callbacks have in-scope access to the following attributes:</source>
          <target state="translated">上記のライフサイクルコールバックは、以下の属性へのインスコープアクセスを持っています。</target>
        </trans-unit>
        <trans-unit id="04796d750e2caa373bfdeb6b87607dcbc4363014" translate="yes" xml:space="preserve">
          <source>The action may be any atom.</source>
          <target state="translated">アクションは、任意の原子であってもよい。</target>
        </trans-unit>
        <trans-unit id="88e8e7c6d83aa7057d13eecb45b68bd52baf600f" translate="yes" xml:space="preserve">
          <source>The action may be one of &lt;code&gt;:insert&lt;/code&gt;, &lt;code&gt;:update&lt;/code&gt;, &lt;code&gt;:delete&lt;/code&gt;, &lt;code&gt;:replace&lt;/code&gt;.</source>
          <target state="translated">アクションは、 &lt;code&gt;:insert&lt;/code&gt; 、 &lt;code&gt;:update&lt;/code&gt; 、 &lt;code&gt;:delete&lt;/code&gt; 、 &lt;code&gt;:replace&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="99e3ae0551db581b86eb9b59e1bc23af5b2492a7" translate="yes" xml:space="preserve">
          <source>The actual routes we get all look right, except for the path helper &lt;code&gt;review_path&lt;/code&gt; at the beginning of each line. We are getting the same helper for both the user facing review routes and the admin ones, which is not correct.</source>
          <target state="translated">&lt;code&gt;review_path&lt;/code&gt; の先頭にあるパスヘルパーreview_pathを除いて、実際のルートはすべて正しく見えます。レビュールートに直面しているユーザーと管理者ルートの両方で同じヘルパーを取得していますが、これは正しくありません。</target>
        </trans-unit>
        <trans-unit id="9fa523a4ad5df57fc1402bd4a02afcabbc3fd16b" translate="yes" xml:space="preserve">
          <source>The admin review paths could be prefixed with &lt;code&gt;/admin&lt;/code&gt;.</source>
          <target state="translated">管理者レビューパスの前に &lt;code&gt;/admin&lt;/code&gt; を付けることができます。</target>
        </trans-unit>
        <trans-unit id="568c1593cd6ebf7435ec1fe16f10bd8ce0b59776" translate="yes" xml:space="preserve">
          <source>The advantage of configuring the schema via those attributes is that they can be set with a macro to configure application wide defaults.</source>
          <target state="translated">これらの属性を使用してスキーマを設定する利点は、マクロを使用してアプリケーション全体のデフォルトを設定できることです。</target>
        </trans-unit>
        <trans-unit id="12424a03c3ce8ae50505e2f4d39be7ede0456bb6" translate="yes" xml:space="preserve">
          <source>The aggregation will fail if any &lt;code&gt;group_by&lt;/code&gt; field is set.</source>
          <target state="translated">&lt;code&gt;group_by&lt;/code&gt; フィールドが設定されている場合、集計は失敗します。</target>
        </trans-unit>
        <trans-unit id="fd3788421c7ea60194ff0b67a68304eebb16c4a2" translate="yes" xml:space="preserve">
          <source>The allowed values are:</source>
          <target state="translated">許可されている値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="ea72cf622646db7be3f6fbd8024e8493b451ac92" translate="yes" xml:space="preserve">
          <source>The answer is we've decided to expose &lt;code&gt;%Ecto.Changeset{}&lt;/code&gt; as a public &lt;em&gt;data-structure&lt;/em&gt; in our application. We saw before how changesets allow us to track field changes, perform validations, and generate error messages. Its use here is decoupled from the private Repo access and Ecto changeset API internals. We're exposing a data structure that the caller understands which contains the rich information like field errors. Conveniently for us, the &lt;code&gt;phoenix_ecto&lt;/code&gt; project implements the necessary &lt;a href=&quot;phoenix.param&quot;&gt;&lt;code&gt;Phoenix.Param&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../phoenix_html/phoenix.html.formdata&quot;&gt;&lt;code&gt;Phoenix.HTML.FormData&lt;/code&gt;&lt;/a&gt; protocols which know how to handle &lt;code&gt;%Ecto.Changeset{}&lt;/code&gt;'s for things like form generation and error messages. You can also think about it as being as if you had defined your own &lt;code&gt;%Accounts.Changes{}&lt;/code&gt; struct for the same purpose and implemented the Phoenix protocols for the web-layer integration.</source>
          <target state="translated">答えは、 &lt;code&gt;%Ecto.Changeset{}&lt;/code&gt; をアプリケーションのパブリック&lt;em&gt;データ構造&lt;/em&gt;として公開することにしたことです。チェンジセットを使用して、フィールドの変更を追跡し、検証を実行し、エラーメッセージを生成する方法を前に説明しました。ここでの使用は、プライベートリポジトリアクセスおよびEctoチェンジセットAPI内部から切り離されています。フィールドエラーなどの豊富な情報を含む、呼び出し元が理解できるデータ構造を公開しています。私たちにとって便利なことに、 &lt;code&gt;phoenix_ecto&lt;/code&gt; プロジェクトは、 &lt;code&gt;%Ecto.Changeset{}&lt;/code&gt; 処理方法を知っている必要な&lt;a href=&quot;phoenix.param&quot;&gt; &lt;code&gt;Phoenix.Param&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../phoenix_html/phoenix.html.formdata&quot;&gt; &lt;code&gt;Phoenix.HTML.FormData&lt;/code&gt; &lt;/a&gt;プロトコルを実装します。フォームの生成やエラーメッセージなどに使用します。同じ目的で独自の &lt;code&gt;%Accounts.Changes{}&lt;/code&gt; 構造体を定義し、Webレイヤー統合用のPhoenixプロトコルを実装したかのように考えることもできます。</target>
        </trans-unit>
        <trans-unit id="84bd30260d2ce05fc55d7e66349743b933c0b4f2" translate="yes" xml:space="preserve">
          <source>The argument given to &lt;code&gt;:select_merge&lt;/code&gt; must always be a map. The value being merged on must be a struct or a map. If it is a struct, the fields merged later on must be part of the struct, otherwise an error is raised.</source>
          <target state="translated">&lt;code&gt;:select_merge&lt;/code&gt; に与える引数は常にマップでなければなりません。マージされる値は、構造体またはマップでなければなりません。構造体の場合、後でマージされるフィールドは構造体の一部である必要があります。そうでない場合、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="21c3223c139377b3829c552e343068576edd50ef" translate="yes" xml:space="preserve">
          <source>The argument, which defaults to &lt;code&gt;Presence&lt;/code&gt;, defines the module name of the Presence tracker.</source>
          <target state="translated">デフォルトが &lt;code&gt;Presence&lt;/code&gt; である引数は、Presenceトラッカーのモジュール名を定義します。</target>
        </trans-unit>
        <trans-unit id="629bfd4051da2fa1a32d9993713c3423b906b41a" translate="yes" xml:space="preserve">
          <source>The arguments are:</source>
          <target state="translated">引数は</target>
        </trans-unit>
        <trans-unit id="4fde4255a8dc0fcc4b0ec76dc711d0f44d251bab" translate="yes" xml:space="preserve">
          <source>The assign tracking feature also implies that you MUST avoid performing direct operations in the template. For example, if you perform a database query in your template:</source>
          <target state="translated">また、アサイン・トラッキング機能は、テンプレート内で直接操作を行わないようにしなければならないことを意味しています。例えば、テンプレート内でデータベースクエリを実行した場合。</target>
        </trans-unit>
        <trans-unit id="2a43c3065c3f85e925ab838ea91589ca677d687c" translate="yes" xml:space="preserve">
          <source>The associated data may be given in different formats:</source>
          <target state="translated">関連するデータは、異なる形式で与えられてもよい。</target>
        </trans-unit>
        <trans-unit id="8af98cf8faab35d0cae464cb5a1cd4f56217e0ba" translate="yes" xml:space="preserve">
          <source>The association happens through a join schema or source, containing foreign keys to the associated schemas. For example, the association below:</source>
          <target state="translated">アソシエーションは、関連するスキーマへの外部キーを含む結合スキーマまたはソースを介して行われます。例えば、以下のようなアソシエーションです。</target>
        </trans-unit>
        <trans-unit id="888fd6b9696e2737394550f497e91b80c4256ba5" translate="yes" xml:space="preserve">
          <source>The association struct for &lt;code&gt;has_one&lt;/code&gt; and &lt;code&gt;has_many&lt;/code&gt; associations.</source>
          <target state="translated">&lt;code&gt;has_one&lt;/code&gt; および &lt;code&gt;has_many&lt;/code&gt; アソシエーションのアソシエーション構造体。</target>
        </trans-unit>
        <trans-unit id="c3f2a2472baf2138a4d294eca1e823e09180b2a8" translate="yes" xml:space="preserve">
          <source>The association struct for &lt;code&gt;has_one&lt;/code&gt; and &lt;code&gt;has_many&lt;/code&gt; through associations.</source>
          <target state="translated">関連付けによる &lt;code&gt;has_one&lt;/code&gt; および &lt;code&gt;has_many&lt;/code&gt; の関連付け構造体。</target>
        </trans-unit>
        <trans-unit id="581a7057c4a1b009249b52b9b19b5e74771aaf2a" translate="yes" xml:space="preserve">
          <source>The association struct for &lt;code&gt;many_to_many&lt;/code&gt; associations.</source>
          <target state="translated">&lt;code&gt;many_to_many&lt;/code&gt; アソシエーションのためのアソシエーション構造体。</target>
        </trans-unit>
        <trans-unit id="66e6c87098b4230d834f2d5a056760f88cae1720" translate="yes" xml:space="preserve">
          <source>The association struct for a &lt;code&gt;belongs_to&lt;/code&gt; association.</source>
          <target state="translated">&lt;code&gt;belongs_to&lt;/code&gt; アソシエーションのアソシエーション構造体。</target>
        </trans-unit>
        <trans-unit id="5205f046f1668f8df50e1a7dbf5d13e856ecfbab" translate="yes" xml:space="preserve">
          <source>The atoms that can be used in place of the status code in many functions are inflected from the reason phrase of the status code. With the above configuration, the following will all work:</source>
          <target state="translated">多くの関数でステータスコードの代わりに使用できるアトムは、ステータスコードの reason フレーズから屈折しています。上記の構成であれば、以下のようにすべて動作します。</target>
        </trans-unit>
        <trans-unit id="480698b107c5364224299e11120625edd4811333" translate="yes" xml:space="preserve">
          <source>The behaviour above is by design to keep the changes between &lt;code&gt;where&lt;/code&gt; and &lt;code&gt;or_where&lt;/code&gt; minimal. Plus, if you have a keyword list and you would like each pair to be combined using &lt;code&gt;or&lt;/code&gt;, it can be easily done with &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#reduce/3&quot;&gt;&lt;code&gt;Enum.reduce/3&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">上記の動作は、 &lt;code&gt;where&lt;/code&gt; と &lt;code&gt;or_where&lt;/code&gt; の間の変更を最小限に抑えるための仕様です。さらに、キーワードリストがあり、 &lt;code&gt;or&lt;/code&gt; を使用して各ペアを組み合わせる場合は、&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#reduce/3&quot;&gt; &lt;code&gt;Enum.reduce/3&lt;/code&gt; &lt;/a&gt;を使用して簡単に実行できます。</target>
        </trans-unit>
        <trans-unit id="3bc279bd4a05a0f1e2ea5d2a5959b414a345411f" translate="yes" xml:space="preserve">
          <source>The benefit of having explicit changesets is that we can easily provide different changesets for different use cases. For example, one could easily provide specific changesets for registering and updating users:</source>
          <target state="translated">明示的なチェンジセットを持つことの利点は、異なるユースケースに対して異なるチェンジセットを簡単に提供できることです。例えば、ユーザーの登録や更新のための特定のチェンジセットを簡単に提供することができます。</target>
        </trans-unit>
        <trans-unit id="a33976fda84cd70626bac12299c44a1b4814775d" translate="yes" xml:space="preserve">
          <source>The binary is assumed to be encoded in &quot;x-www-form-urlencoded&quot; format. The format is decoded and then validated for proper UTF-8 encoding.</source>
          <target state="translated">バイナリは「x-www-form-urlencoded」形式でエンコードされているものとします。このフォーマットはデコードされた後、適切な UTF-8 エンコーディングであるかどうか検証されます。</target>
        </trans-unit>
        <trans-unit id="0833558fe12b0d9b2e81768ddbb74f8c8021373c" translate="yes" xml:space="preserve">
          <source>The browser can send a variety of events to a LiveView via &lt;code&gt;phx-&lt;/code&gt; bindings, which are sent to the &lt;code&gt;handle_event/3&lt;/code&gt; callback. To test events sent by the browser and assert on the rendered side effect of the event, use the &lt;code&gt;render_*&lt;/code&gt; functions:</source>
          <target state="translated">ブラウザは、phx &lt;code&gt;phx-&lt;/code&gt; bindingsを介してさまざまなイベントをLiveViewに送信できます。これらは、 &lt;code&gt;handle_event/3&lt;/code&gt; コールバックに送信されます。ブラウザによって送信されたイベントをテストし、イベントのレンダリングされた副作用をアサートするには、 &lt;code&gt;render_*&lt;/code&gt; 関数を使用します。</target>
        </trans-unit>
        <trans-unit id="47dd120170d17aa1d0f259374abed03b66d4f7d7" translate="yes" xml:space="preserve">
          <source>The cache can be in 3 states, documented below.</source>
          <target state="translated">キャッシュには3つの状態があり、以下に説明します。</target>
        </trans-unit>
        <trans-unit id="8af03881748bd2064e8f807b0d417c42f2bf8b4b" translate="yes" xml:space="preserve">
          <source>The callback invoked in case the adapter needs to inject code</source>
          <target state="translated">アダプタがコードを注入する必要がある場合に呼び出されるコールバックです。</target>
        </trans-unit>
        <trans-unit id="67ef6fb0196e40fee0ed0f4b18726aa52ce6c746" translate="yes" xml:space="preserve">
          <source>The callback invoked in case the adapter needs to inject code.</source>
          <target state="translated">アダプタがコードを注入する必要がある場合に呼び出されるコールバック。</target>
        </trans-unit>
        <trans-unit id="5bbfddd88f74a0c053e76f91efe40fb552ccd1a5" translate="yes" xml:space="preserve">
          <source>The callback will be invoked for all queries, including queries made from associations and preloads. It is not invoked for each individual join inside a query.</source>
          <target state="translated">コールバックは、アソシエーションやプリロードから作成されたクエリを含む、すべてのクエリに対して呼び出されます。クエリ内の個々の結合に対しては呼び出されません。</target>
        </trans-unit>
        <trans-unit id="465bc3533bd128c95cfecfc17237e61c1f085130" translate="yes" xml:space="preserve">
          <source>The catch-all verb, &lt;code&gt;:*&lt;/code&gt;, may also be used to match all HTTP methods.</source>
          <target state="translated">キャッチオール動詞 &lt;code&gt;:*&lt;/code&gt; は、すべてのHTTPメソッドに一致させるためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="a92f849f6522a2c3db6efb9017fed09736bbac71" translate="yes" xml:space="preserve">
          <source>The certificate and CA chain can also be specified using DER binaries, using the &lt;code&gt;:cert&lt;/code&gt; and &lt;code&gt;:cacerts&lt;/code&gt; options, but this is best avoided. The use of PEM files has been tested much more thoroughly with the Erlang/OTP &lt;code&gt;:ssl&lt;/code&gt; application, and there have been a number of issues with DER binary certificates in the past.</source>
          <target state="translated">証明書とCAチェーンは、DERバイナリを使用して &lt;code&gt;:cert&lt;/code&gt; オプションと &lt;code&gt;:cacerts&lt;/code&gt; オプションを使用して指定することもできますが、これは避けるのが最善です。PEMファイルの使用はErlang / OTP &lt;code&gt;:ssl&lt;/code&gt; アプリケーションではるかに徹底的にテストされており、過去にDERバイナリ証明書に関して多くの問題がありました。</target>
        </trans-unit>
        <trans-unit id="abd434dfdfacea66c9516a4ae4981484c3f005f5" translate="yes" xml:space="preserve">
          <source>The certificate files, like keyfile, certfile, cacertfile, dhfile can be given as a relative path. For such, the &lt;code&gt;:otp_app&lt;/code&gt; option must also be given and certificates will be looked from the priv directory of the given application</source>
          <target state="translated">keyfile、certfile、cacertfile、dhfileなどの証明書ファイルは、相対パスで指定できます。そのため、 &lt;code&gt;:otp_app&lt;/code&gt; オプションも指定する必要があり、証明書は指定されたアプリケーションのprivディレクトリから検索されます</target>
        </trans-unit>
        <trans-unit id="5c4d811c59379111f1c1ff93c837d9da4b33e1af" translate="yes" xml:space="preserve">
          <source>The change is to define the &lt;code&gt;live_view&lt;/code&gt; and &lt;code&gt;live_component&lt;/code&gt; functions in your &lt;code&gt;my_app_web.ex&lt;/code&gt; file, while refactoring the &lt;code&gt;view&lt;/code&gt; function. At the end, they will look like this:</source>
          <target state="translated">変更が定義することである &lt;code&gt;live_view&lt;/code&gt; と &lt;code&gt;live_component&lt;/code&gt; あなたの関数を &lt;code&gt;my_app_web.ex&lt;/code&gt; リファクタリングながら、ファイル &lt;code&gt;view&lt;/code&gt; 機能を。最後に、それらは次のようになります。</target>
        </trans-unit>
        <trans-unit id="7f895ed3a5a29fab28a57c67512d9e78fea0303d" translate="yes" xml:space="preserve">
          <source>The change tracking also works when rendering other templates as long as they are also &lt;code&gt;.leex&lt;/code&gt; templates:</source>
          <target state="translated">変更の追跡は、他のテンプレートが &lt;code&gt;.leex&lt;/code&gt; テンプレートである限り、それらをレンダリングするときにも機能します。</target>
        </trans-unit>
        <trans-unit id="a8048a4c70c26c609930c982d23c8e90c3c74914" translate="yes" xml:space="preserve">
          <source>The changeset must have been previously &lt;code&gt;cast&lt;/code&gt; using &lt;a href=&quot;#cast/4&quot;&gt;&lt;code&gt;cast/4&lt;/code&gt;&lt;/a&gt; before this function is invoked.</source>
          <target state="translated">変更セットは、この関数を呼び出す前に、&lt;a href=&quot;#cast/4&quot;&gt; &lt;code&gt;cast/4&lt;/code&gt; &lt;/a&gt;を使用して事前に &lt;code&gt;cast&lt;/code&gt; しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="160a4bd88e21d5ca169655a091e64a1bf7eb4d1d" translate="yes" xml:space="preserve">
          <source>The channel that owns the socket will not receive the published message. The event&amp;rsquo;s message must be a serializable map.</source>
          <target state="translated">ソケットを所有するチャネルは、公開されたメッセージを受信しません。イベントのメッセージは、シリアル化可能なマップである必要があります。</target>
        </trans-unit>
        <trans-unit id="14225c93c28bf8ec888fac6e844921cc19f40df5" translate="yes" xml:space="preserve">
          <source>The channel that owns the socket will not receive the published message. The event's message must be a serializable map.</source>
          <target state="translated">ソケットを所有するチャンネルは、公開されたメッセージを受信しません。イベントのメッセージはシリアライズ可能なマップでなければなりません。</target>
        </trans-unit>
        <trans-unit id="a87a04668a71cfebe522dc33304dfa1bb9aafa32" translate="yes" xml:space="preserve">
          <source>The check constraint works by relying on the database to check if the check constraint has been violated or not and, if so, Ecto converts it into a changeset error.</source>
          <target state="translated">チェック制約は、チェック制約が違反しているかどうかをチェックするためにデータベースに依存して動作し、違反している場合、Ectoはそれをチェンジセットエラーに変換します。</target>
        </trans-unit>
        <trans-unit id="189a91a56422abe5ad6f16e83079ee9147df5171" translate="yes" xml:space="preserve">
          <source>The ciphers chosen and related configuration are based on &lt;a href=&quot;https://www.owasp.org/index.php/TLS_Cipher_String_Cheat_Sheet&quot;&gt;OWASP recommendations&lt;/a&gt;, with some modifications as described in the &lt;a href=&quot;plug.ssl#configure/1&quot;&gt;&lt;code&gt;Plug.SSL.configure/1&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">選択された暗号と関連する構成は、&lt;a href=&quot;https://www.owasp.org/index.php/TLS_Cipher_String_Cheat_Sheet&quot;&gt;OWASPの推奨事項&lt;/a&gt;に基づいていますが、&lt;a href=&quot;plug.ssl#configure/1&quot;&gt; &lt;code&gt;Plug.SSL.configure/1&lt;/code&gt; の&lt;/a&gt;ドキュメントに記載されているようにいくつかの変更が加えられています。</target>
        </trans-unit>
        <trans-unit id="cb2140aa521991d539b4e2e897df286c32583783" translate="yes" xml:space="preserve">
          <source>The code above builds a query that returns all organizations that belongs to the current user and then validates that the given &quot;org_id&quot; belongs to the user. If there is no such &quot;org_id&quot; or if the user has no access to it, an &lt;code&gt;Ecto.NotFoundError&lt;/code&gt; exception is raised.</source>
          <target state="translated">上記のコードは、現在のユーザーに属するすべての組織を返すクエリを作成し、指定された「org_id」がユーザーに属していることを検証します。そのような「org_id」がない場合、またはユーザーがそれにアクセスできない場合、 &lt;code&gt;Ecto.NotFoundError&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="e55ac05c44eebe5ced7773b3f09d70f633a77d33" translate="yes" xml:space="preserve">
          <source>The column name is arbitrary and doesn&amp;rsquo;t need to be &lt;code&gt;:lock_version&lt;/code&gt;. Now add a field to the schema too:</source>
          <target state="translated">列名は任意であり、 &lt;code&gt;:lock_version&lt;/code&gt; である必要はありません。次に、スキーマにもフィールドを追加します。</target>
        </trans-unit>
        <trans-unit id="22ce43d9dab9ba680dd79938365e5a367bde9ba9" translate="yes" xml:space="preserve">
          <source>The column name is arbitrary and doesn't need to be &lt;code&gt;:lock_version&lt;/code&gt;. Now add a field to the schema too:</source>
          <target state="translated">列名は任意であり、 &lt;code&gt;:lock_version&lt;/code&gt; である必要はありません。次に、スキーマにもフィールドを追加します。</target>
        </trans-unit>
        <trans-unit id="75c1a428d5c10266245cfaf3fb20fc81b6b19a29" translate="yes" xml:space="preserve">
          <source>The command above means incoming socket connections can be made via a WebSocket connection. Events are routed by topic to channels:</source>
          <target state="translated">上記のコマンドは、WebSocket 接続を介して着信ソケット接続を行うことができることを意味します。イベントはトピックごとにチャンネルにルーティングされます。</target>
        </trans-unit>
        <trans-unit id="c5d46c8827dfa162c3fc24d840406076f113e566" translate="yes" xml:space="preserve">
          <source>The command above means incoming socket connections can be made via the WebSocket transport. Events are routed by topic to channels:</source>
          <target state="translated">上記のコマンドは、WebSocket トランスポートを介して着信ソケット接続を行うことができることを意味します。イベントはトピックごとにチャンネルにルーティングされます。</target>
        </trans-unit>
        <trans-unit id="a6bed204f25946a181bf872deafb93e1b8f811e4" translate="yes" xml:space="preserve">
          <source>The command above will effectively change the value of &lt;code&gt;conn.scheme&lt;/code&gt; by the one sent in &lt;code&gt;x-forwarded-proto&lt;/code&gt;.</source>
          <target state="translated">上記のコマンドは、 &lt;code&gt;x-forwarded-proto&lt;/code&gt; で送信された値によって &lt;code&gt;conn.scheme&lt;/code&gt; の値を効果的に変更します。</target>
        </trans-unit>
        <trans-unit id="06d3e38d14906c69fe67c98e93d6ea14a4bb8bfd" translate="yes" xml:space="preserve">
          <source>The component ends up enclosed by the form markup, where LiveView cannot track it. In such cases, you may receive an error such as:</source>
          <target state="translated">コンポーネントがフォームのマークアップで囲まれてしまい、LiveViewが追跡できない。このような場合、以下のようなエラーが出ることがあります。</target>
        </trans-unit>
        <trans-unit id="e4afae376b75b4be5f358115a2f298594ed796ab" translate="yes" xml:space="preserve">
          <source>The component that is updated must be stateful (the &lt;code&gt;:id&lt;/code&gt; in the assigns must match the &lt;code&gt;:id&lt;/code&gt; associated with the component) and the component must be mounted within the current LiveView.</source>
          <target state="translated">更新されたコンポーネントは、ステートフルでなければならない（ &lt;code&gt;:id&lt;/code&gt; 割り当てでは、一致しなければならない &lt;code&gt;:id&lt;/code&gt; コンポーネントに関連する）、コンポーネントは、現在のライブビュー内に取り付けなければなりません。</target>
        </trans-unit>
        <trans-unit id="7ac44c98f163a9b266d4abe83ee653c46374e382" translate="yes" xml:space="preserve">
          <source>The configuration above takes care of starting the pubsub backend and exposing its functions via the endpoint module. If no adapter but a name is given, nothing will be started, but the pubsub system will work by sending events and subscribing to the given name.</source>
          <target state="translated">上記の設定は、エンドポイントモジュールを介して pubsub バックエンドを起動し、その機能を公開することを担当します。アダプタではなく名前が与えられた場合は何も開始されませんが、 pubsub システムはイベントを送信したり、与えられた名前を購読したりすることで動作します。</target>
        </trans-unit>
        <trans-unit id="8b296a52b4ef4041ccbced6b08d102098ca424ae" translate="yes" xml:space="preserve">
          <source>The configuration above will start a Redis pubsub and register it with name &lt;code&gt;:my_pubsub&lt;/code&gt;.</source>
          <target state="translated">上記の設定はRedis &lt;code&gt;:my_pubsub&lt;/code&gt; を起動し、それを：my_pubsubという名前で登録します。</target>
        </trans-unit>
        <trans-unit id="0c3243504e5d91d9054ed22ddbd7d15078c0b7c3" translate="yes" xml:space="preserve">
          <source>The configuration below can be given to both &lt;code&gt;:websocket&lt;/code&gt; and &lt;code&gt;:longpoll&lt;/code&gt; keys:</source>
          <target state="translated">以下の構成は、 &lt;code&gt;:websocket&lt;/code&gt; キーと &lt;code&gt;:longpoll&lt;/code&gt; キーの両方に指定できます。</target>
        </trans-unit>
        <trans-unit id="468fbe7bf04f16c5040863a52f0d55b418c094c8" translate="yes" xml:space="preserve">
          <source>The connection state is used to track the connection lifecycle. It starts as &lt;code&gt;:unset&lt;/code&gt; but is changed to &lt;code&gt;:set&lt;/code&gt; (via &lt;a href=&quot;#resp/3&quot;&gt;&lt;code&gt;resp/3&lt;/code&gt;&lt;/a&gt;) or &lt;code&gt;:set_chunked&lt;/code&gt; (used only for &lt;code&gt;before_send&lt;/code&gt; callbacks by &lt;a href=&quot;#send_chunked/2&quot;&gt;&lt;code&gt;send_chunked/2&lt;/code&gt;&lt;/a&gt;) or &lt;code&gt;:file&lt;/code&gt; (when invoked via &lt;a href=&quot;#send_file/3&quot;&gt;&lt;code&gt;send_file/3&lt;/code&gt;&lt;/a&gt;). Its final result is &lt;code&gt;:sent&lt;/code&gt;, &lt;code&gt;:file&lt;/code&gt; or &lt;code&gt;:chunked&lt;/code&gt; depending on the response model.</source>
          <target state="translated">接続状態は、接続のライフサイクルを追跡するために使用されます。それはのように開始 &lt;code&gt;:unset&lt;/code&gt; だけに変更される &lt;code&gt;:set&lt;/code&gt; （VIA &lt;a href=&quot;#resp/3&quot;&gt; &lt;code&gt;resp/3&lt;/code&gt; &lt;/a&gt;）または &lt;code&gt;:set_chunked&lt;/code&gt; （のみに使用 &lt;code&gt;before_send&lt;/code&gt; することによってコールバック&lt;a href=&quot;#send_chunked/2&quot;&gt; &lt;code&gt;send_chunked/2&lt;/code&gt; &lt;/a&gt;）または &lt;code&gt;:file&lt;/code&gt; （経由で呼び出されたとき&lt;a href=&quot;#send_file/3&quot;&gt; &lt;code&gt;send_file/3&lt;/code&gt; &lt;/a&gt;）。その最終結果は、応答モデルに応じて &lt;code&gt;:sent&lt;/code&gt; 、 &lt;code&gt;:file&lt;/code&gt; または &lt;code&gt;:chunked&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="48566362cafe346914c5a6f03d80d57d5efcb820" translate="yes" xml:space="preserve">
          <source>The connection will be configured with the given &lt;code&gt;method&lt;/code&gt;, &lt;code&gt;path_or_action&lt;/code&gt; and &lt;code&gt;params_or_body&lt;/code&gt;.</source>
          <target state="translated">接続は、指定された &lt;code&gt;method&lt;/code&gt; 、 &lt;code&gt;path_or_action&lt;/code&gt; 、および &lt;code&gt;params_or_body&lt;/code&gt; で構成されます。</target>
        </trans-unit>
        <trans-unit id="5d448c7ac90d83c40db5bfb1c89d1edee4438350" translate="yes" xml:space="preserve">
          <source>The connection&amp;rsquo;s endpoint will be used for URL generation. See &lt;a href=&quot;#current_path/1&quot;&gt;&lt;code&gt;current_path/1&lt;/code&gt;&lt;/a&gt; for details on how the request path is generated.</source>
          <target state="translated">接続のエンドポイントはURL生成に使用されます。参照してください&lt;a href=&quot;#current_path/1&quot;&gt; &lt;code&gt;current_path/1&lt;/code&gt; &lt;/a&gt;要求パスの生成方法の詳細については。</target>
        </trans-unit>
        <trans-unit id="d40469a6ab597b422ee4f68bd557b30e3be2a9ae" translate="yes" xml:space="preserve">
          <source>The container can be customized in different ways:</source>
          <target state="translated">コンテナは、さまざまな方法でカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="c7d4bab9d56a81796bac83a3ef42018e650c34ee" translate="yes" xml:space="preserve">
          <source>The context app</source>
          <target state="translated">コンテキストアプリ</target>
        </trans-unit>
        <trans-unit id="0facde72bd2ec18fe66926da4d93236d6aff0bce" translate="yes" xml:space="preserve">
          <source>The context is an Elixir module that serves as an API boundary for the given resource. A context often holds many related resources. Therefore, if the context already exists, it will be augmented with functions for the given resource.</source>
          <target state="translated">コンテキストは、与えられたリソースのAPI境界として機能するElixirモジュールです。コンテキストは多くの関連リソースを保持しています。そのため、コンテキストが既に存在する場合は、与えられたリソースの関数で拡張されます。</target>
        </trans-unit>
        <trans-unit id="f31946d1aec3ffc473697b735314efcde461c192" translate="yes" xml:space="preserve">
          <source>The context is an Elixir module that serves as an API boundary for the given resource. A context often holds many related resources. Therefore, if the context already exists, it will be augmented with functions for the given resource. Note a resource may also be split over distinct contexts (such as Accounts.User and Payments.User).</source>
          <target state="translated">コンテキストは、与えられたリソースのAPI境界として機能するElixirモジュールです。コンテキストは多くの関連リソースを保持しています。そのため、コンテキストがすでに存在する場合は、与えられたリソースの関数で拡張されます。リソースを別のコンテキストに分割することもできることに注意しましょう (Accounts.User や Payments.User など)。</target>
        </trans-unit>
        <trans-unit id="6ef96e1551a038d10e050b366a6393c8066aa195" translate="yes" xml:space="preserve">
          <source>The cookie value is not automatically escaped. Therefore, if you want to store values with comma, quotes, and so on, you need to explicitly escape them or use a function such as &lt;code&gt;Base.encode64(value, padding: false)&lt;/code&gt; when writing and &lt;code&gt;Base.decode64(encoded, padding: false)&lt;/code&gt; when reading the cookie. Padding needs to be disabled since &lt;code&gt;=&lt;/code&gt; is not a valid character in cookie values.</source>
          <target state="translated">cookie値は自動的にエスケープされません。したがって、値をコンマや引用符などで格納する場合は、明示的にエスケープするか、書き込み時に &lt;code&gt;Base.encode64(value, padding: false)&lt;/code&gt; や &lt;code&gt;Base.decode64(encoded, padding: false)&lt;/code&gt; などの関数を使用する必要があります。 false） Cookieを読み取るとき。 &lt;code&gt;=&lt;/code&gt; はCookie値の有効な文字ではないため、パディングを無効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="0b75f4c0b3e543c026233950dd58d233dabc0916" translate="yes" xml:space="preserve">
          <source>The cookie value is not automatically escaped. Therefore, if you want to store values with comma, quotes, etc, you need to explicitly escape them or use a function such as &lt;code&gt;Base.encode64(value, padding: false)&lt;/code&gt; when writing and &lt;code&gt;Base.decode64(encoded, padding: false)&lt;/code&gt; when reading the cookie. Padding needs to be disabled since &lt;code&gt;=&lt;/code&gt; is not a valid character in cookie values.</source>
          <target state="translated">cookie値は自動的にエスケープされません。したがって、コンマ、引用符などで値を格納する場合は、それらを明示的にエスケープするか、書き込み時に &lt;code&gt;Base.encode64(value, padding: false)&lt;/code&gt; や &lt;code&gt;Base.decode64(encoded, padding: false)&lt;/code&gt; などの関数を使用する必要があります。クッキーを読むとき。 &lt;code&gt;=&lt;/code&gt; はCookie値の有効な文字ではないため、パディングを無効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="bc170b7df02149d4f1b41d395782c4bf6a42233e" translate="yes" xml:space="preserve">
          <source>The cookie value that will be sent in cookie headers. This value should be base64 encoded to avoid security issues</source>
          <target state="translated">クッキーヘッダで送信されるクッキーの値。この値はセキュリティの問題を避けるためにbase64エンコードされていなければなりません。</target>
        </trans-unit>
        <trans-unit id="4ed8e930bd798b7f59e1b3906dae0c5ae18ae5f5" translate="yes" xml:space="preserve">
          <source>The cookie value that will be sent in cookie headers. This value should be base64 encoded to avoid security issues.</source>
          <target state="translated">クッキーヘッダで送信されるクッキーの値。この値はセキュリティの問題を避けるためにbase64エンコードされている必要があります。</target>
        </trans-unit>
        <trans-unit id="6e2028fc8c0e6e2d2a17c2988205cfc1a48f5c7d" translate="yes" xml:space="preserve">
          <source>The core of this action is &lt;code&gt;render(conn, &quot;index.html&quot;)&lt;/code&gt;. It tells Phoenix to render &quot;index.html&quot;. The modules responsible for rendering are views. By default, Phoenix views are named after the controller, so Phoenix is expecting a &lt;code&gt;HelloWeb.HelloView&lt;/code&gt; to exist and handle &quot;index.html&quot; for us.</source>
          <target state="translated">このアクションの中核は &lt;code&gt;render(conn, &quot;index.html&quot;)&lt;/code&gt; です。フェニックスに「index.html」をレンダリングするように指示します。レンダリングを担当するモジュールはビューです。デフォルトでは、Phoenixビューはコントローラーにちなんで名付けられているため、Phoenixは &lt;code&gt;HelloWeb.HelloView&lt;/code&gt; が存在し、「index.html」を処理することを期待しています。</target>
        </trans-unit>
        <trans-unit id="0fdf691245b570b56fac13fe863e01499ed9c09b" translate="yes" xml:space="preserve">
          <source>The current LiveView will be shut down and a new one will be mounted in its place, without reloading the whole page. This can also be used to remount the same LiveView, in case you want to start fresh. If you want to navigate to the same LiveView without remounting it, use &lt;a href=&quot;#live_patch/2&quot;&gt;&lt;code&gt;live_patch/2&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">ページ全体をリロードせずに、現在のLiveViewがシャットダウンされ、新しいLiveViewがその場所にマウントされます。これは、最初からやり直したい場合に、同じLiveViewを再マウントするためにも使用できます。再マウントせずに同じLiveViewに移動する場合は、代わりに&lt;a href=&quot;#live_patch/2&quot;&gt; &lt;code&gt;live_patch/2&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="fe0cdcbf70ae3305c8dd93ccd61f868d5e436588" translate="yes" xml:space="preserve">
          <source>The current LiveView will be shutdown and a new one will be mounted in its place, without reloading the whole page. This can also be used to remount the same LiveView, in case you want to start fresh. If you want to navigate to the same LiveView without remounting it, use &lt;a href=&quot;#push_patch/2&quot;&gt;&lt;code&gt;push_patch/2&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">現在のLiveViewはシャットダウンされ、ページ全体をリロードすることなく、新しいLiveViewがその場所にマウントされます。これは、最初からやり直したい場合に、同じLiveViewを再マウントするためにも使用できます。再マウントせずに同じLiveViewに移動する場合は、代わりに&lt;a href=&quot;#push_patch/2&quot;&gt; &lt;code&gt;push_patch/2&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="b9b1fd62f16ed364400554fa3c072cfdd758b718" translate="yes" xml:space="preserve">
          <source>The current action will always be available inside the LiveView as the &lt;code&gt;@live_action&lt;/code&gt; assign, that can be used to render a LiveComponent:</source>
          <target state="translated">現在のアクションは、 &lt;code&gt;@live_action&lt;/code&gt; 割り当てとしてLiveView内で常に利用可能であり、LiveComponentのレンダリングに使用できます。</target>
        </trans-unit>
        <trans-unit id="a8e46ad87d3469e7e9f3187e46155cee02aaf64d" translate="yes" xml:space="preserve">
          <source>The current schema belongs to zero or one records of the other schema. The other schema often has a &lt;code&gt;has_one&lt;/code&gt; or a &lt;code&gt;has_many&lt;/code&gt; field with the reverse association.</source>
          <target state="translated">現在のスキーマは、他のスキーマのゼロまたは1つのレコードに属しています。他のスキーマには、逆の関連付けを持つ &lt;code&gt;has_one&lt;/code&gt; または &lt;code&gt;has_many&lt;/code&gt; フィールドがよくあります。</target>
        </trans-unit>
        <trans-unit id="37f668c1bd4c3e820e33a15f5f380f812917f51d" translate="yes" xml:space="preserve">
          <source>The current schema has zero or more records of the other schema embedded inside of it. Embeds have all the things regular schemas have.</source>
          <target state="translated">現在のスキーマの内部には、他のスキーマのレコードが 0 個以上埋め込まれています。埋め込みは、通常のスキーマが持っているすべてのものを持っています。</target>
        </trans-unit>
        <trans-unit id="bb6532e1cfbc40c65e0d70c093c2d84b8c13c97c" translate="yes" xml:space="preserve">
          <source>The current schema has zero or more records of the other schema. The other schema often has a &lt;code&gt;belongs_to&lt;/code&gt; field with the reverse association.</source>
          <target state="translated">現在のスキーマには、他のスキーマの0個以上のレコードがあります。他のスキーマには、多くの場合、逆の関連付けを持つ &lt;code&gt;belongs_to&lt;/code&gt; フィールドがあります。</target>
        </trans-unit>
        <trans-unit id="a2400e9bff3b3fcf167090fc4f9675aa1dafa03a" translate="yes" xml:space="preserve">
          <source>The current schema has zero or one records of the other schema embedded inside of it. It uses a field similar to the &lt;code&gt;:map&lt;/code&gt; type for storage, but allows embeds to have all the things regular schema can.</source>
          <target state="translated">現在のスキーマには、他のスキーマのレコードが0個または1個埋め込まれています。ストレージには &lt;code&gt;:map&lt;/code&gt; タイプと同様のフィールドを使用しますが、埋め込みで通常のスキーマで可能なすべてのことを許可できます。</target>
        </trans-unit>
        <trans-unit id="543e48ecf9a036c8c3265d90420f7f54855d1f07" translate="yes" xml:space="preserve">
          <source>The current schema has zero or one records of the other schema. The other schema often has a &lt;code&gt;belongs_to&lt;/code&gt; field with the reverse association.</source>
          <target state="translated">現在のスキーマには、他のスキーマのゼロまたは1つのレコードがあります。他のスキーマには、多くの場合、逆の関連付けを持つ &lt;code&gt;belongs_to&lt;/code&gt; フィールドがあります。</target>
        </trans-unit>
        <trans-unit id="a89c1ce17f89437f89ff113dd237432b1779e13f" translate="yes" xml:space="preserve">
          <source>The current time in UTC is retrieved from Elixir and not from the database.</source>
          <target state="translated">現在のUTC時間はElixirから取得したものであり、データベースから取得したものではありません。</target>
        </trans-unit>
        <trans-unit id="b052c5d0d8705bd378272066bfc771be8f95160c" translate="yes" xml:space="preserve">
          <source>The data is stored in ETS in the following format:</source>
          <target state="translated">でETSに格納されています。</target>
        </trans-unit>
        <trans-unit id="1acda630ba32f073701a386f5cfe162756e7c372" translate="yes" xml:space="preserve">
          <source>The data stored in the token is signed to prevent tampering but not encrypted. This means it is safe to store identification information (such as user IDs) but should not be used to store confidential information (such as credit card numbers).</source>
          <target state="translated">トークンに格納されたデータは、改ざんを防ぐために署名されていますが、暗号化されていません。つまり、識別情報(ユーザーIDなど)の保存は安全ですが、機密情報(クレジットカード番号など)の保存には使用すべきではありません。</target>
        </trans-unit>
        <trans-unit id="f7d8e9c428788f4e316259dfd396beb63eed3450" translate="yes" xml:space="preserve">
          <source>The data world is your oyster, but we won't be covering these options in these guides.</source>
          <target state="translated">データの世界はあなたのものですが、このガイドではこれらのオプションは取り上げません。</target>
        </trans-unit>
        <trans-unit id="c9e3f4c1170977052f6619c9eadd4414d82a1869" translate="yes" xml:space="preserve">
          <source>The database for HelloPhoenix.repo has been created. We're also ready to run any migrations, or do anything else with Ecto that we might choose.</source>
          <target state="translated">HelloPhoenix.repoのデータベースが作成されました。移行を実行したり、Ectoを使って他のことをする準備もできています。</target>
        </trans-unit>
        <trans-unit id="25b03cf10e6fc6af894d1777f43a9e4564e801a7" translate="yes" xml:space="preserve">
          <source>The datetime types</source>
          <target state="translated">日付の種類</target>
        </trans-unit>
        <trans-unit id="57585ba4de2b044b0be68355ad35a6afa2297af3" translate="yes" xml:space="preserve">
          <source>The debug state uses the browser's built-in &lt;code&gt;sessionStorage&lt;/code&gt;, so it will remain in effect for as long as your browser session lasts.</source>
          <target state="translated">デバッグ状態はブラウザの組み込みの &lt;code&gt;sessionStorage&lt;/code&gt; を使用するため、ブラウザセッションが続く限り有効です。</target>
        </trans-unit>
        <trans-unit id="d91240847c4c0b4e5c86209a80fab1b682a0b72d" translate="yes" xml:space="preserve">
          <source>The default Endpoint plugs do quite a lot of work. Here they are in order:</source>
          <target state="translated">デフォルトのエンドポイントプラグはかなり多くの作業を行います。ここでは順を追って説明します。</target>
        </trans-unit>
        <trans-unit id="01d063536b5fd16a46117b63d1178dfcad16b720" translate="yes" xml:space="preserve">
          <source>The default HTML encoder that ships with Phoenix.</source>
          <target state="translated">Phoenixに同梱されているデフォルトのHTMLエンコーダ。</target>
        </trans-unit>
        <trans-unit id="b6a5014904611a0144837aa761a0d9c7ac17de4a" translate="yes" xml:space="preserve">
          <source>The default format is used when none is set in the connection</source>
          <target state="translated">接続に何も設定されていない場合は、デフォルトのフォーマットが使用されます。</target>
        </trans-unit>
        <trans-unit id="eb15ee34b6e76bea7879309e5d7b64c6bf0dee90" translate="yes" xml:space="preserve">
          <source>The default format is used when none is set in the connection.</source>
          <target state="translated">接続に何も設定されていない場合は、デフォルトのフォーマットが使用されます。</target>
        </trans-unit>
        <trans-unit id="565d3288130af0242285fb747529bfd66f40c7d5" translate="yes" xml:space="preserve">
          <source>The default implementation simply passes &lt;code&gt;presences&lt;/code&gt; through unchanged.</source>
          <target state="translated">デフォルトの実装では、 &lt;code&gt;presences&lt;/code&gt; を変更せずに渡すだけです。</target>
        </trans-unit>
        <trans-unit id="6676a691528a06988caceda0bdea8ffb85ace6e8" translate="yes" xml:space="preserve">
          <source>The default option can be given to populate the fields if none is given:</source>
          <target state="translated">何も指定されていない場合は、デフォルトのオプションを指定してフィールドを入力することができます。</target>
        </trans-unit>
        <trans-unit id="2c66e666e4d64f7851485bf4d02d2f008e867eb1" translate="yes" xml:space="preserve">
          <source>The default router is inflected from the application name unless a configuration named &lt;code&gt;:namespace&lt;/code&gt; is set inside your application configuration. For example, the configuration:</source>
          <target state="translated">アプリケーション構成内で &lt;code&gt;:namespace&lt;/code&gt; という名前の構成が設定されていない限り、デフォルトルーターはアプリケーション名から影響を受けます。たとえば、設定：</target>
        </trans-unit>
        <trans-unit id="bef1bc8ef401a761e7d8eba7f4227945005b964c" translate="yes" xml:space="preserve">
          <source>The definition of basic custom types and all of its callbacks is available in this module. You can learn more about parameterized types in &lt;a href=&quot;ecto.parameterizedtype&quot;&gt;&lt;code&gt;Ecto.ParameterizedType&lt;/code&gt;&lt;/a&gt;. If in doubt, prefer to use basic custom types and rely on parameterized types if you need the extra functionality.</source>
          <target state="translated">このモジュールでは、基本的なカスタムタイプとそのすべてのコールバックの定義を利用できます。パラメータ化された型について詳しくは、&lt;a href=&quot;ecto.parameterizedtype&quot;&gt; &lt;code&gt;Ecto.ParameterizedType&lt;/code&gt; をご覧ください&lt;/a&gt;。疑わしい場合は、基本的なカスタムタイプを使用し、追加の機能が必要な場合はパラメーター化されたタイプに依存することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c9bea1b5faf766b56d93add1c5f07efe92cf9dfa" translate="yes" xml:space="preserve">
          <source>The difference between them is that most validations can be executed without a need to interact with the database and, therefore, are always executed before attempting to insert or update the entry in the database. Some validations may happen against the database but they are inherently unsafe. Those validations start with a &lt;code&gt;unsafe_&lt;/code&gt; prefix, such as &lt;a href=&quot;#unsafe_validate_unique/3&quot;&gt;&lt;code&gt;unsafe_validate_unique/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">それらの違いは、ほとんどの検証はデータベースと対話する必要なしに実行できるため、常にデータベースのエントリを挿入または更新する前に実行されることです。一部の検証はデータベースに対して行われる可能性がありますが、本質的に安全ではありません。これらの検証は、&lt;a href=&quot;#unsafe_validate_unique/3&quot;&gt; &lt;code&gt;unsafe_validate_unique/3&lt;/code&gt; &lt;/a&gt;などの &lt;code&gt;unsafe_&lt;/code&gt; プレフィックスで始まります。</target>
        </trans-unit>
        <trans-unit id="b905a6abee1408a861b937e78adce0825322527a" translate="yes" xml:space="preserve">
          <source>The dispatcher must be available on all nodes running the PubSub system. The &lt;code&gt;dispatch/3&lt;/code&gt; function of the given module will be invoked with the subscriptions entries, the broadcaster identifier (either a pid or &lt;code&gt;:none&lt;/code&gt;), and the message to broadcast.</source>
          <target state="translated">ディスパッチャは、PubSubシステムを実行しているすべてのノードで使用可能である必要があります。指定されたモジュールの &lt;code&gt;dispatch/3&lt;/code&gt; 関数は、サブスクリプションエントリ、ブロードキャスター識別子（pidまたは &lt;code&gt;:none&lt;/code&gt; のいずれか）、およびブロードキャストするメッセージを使用して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="90a466df0e05cd07db8216347664891ea2d6f388" translate="yes" xml:space="preserve">
          <source>The distinction whether to insert or update will be made on the &lt;a href=&quot;ecto.schema.metadata&quot;&gt;&lt;code&gt;Ecto.Schema.Metadata&lt;/code&gt;&lt;/a&gt; field &lt;code&gt;:state&lt;/code&gt;. The &lt;code&gt;:state&lt;/code&gt; is automatically set by Ecto when loading or building a schema.</source>
          <target state="translated">挿入するか更新するかの区別は、&lt;a href=&quot;ecto.schema.metadata&quot;&gt; &lt;code&gt;Ecto.Schema.Metadata&lt;/code&gt; &lt;/a&gt;フィールド &lt;code&gt;:state&lt;/code&gt; で行われます。 &lt;code&gt;:state&lt;/code&gt; ロードまたはスキーマを構築するときに自動的にエクトによって設定されます。</target>
        </trans-unit>
        <trans-unit id="98110b4f952a325165904e437acdb05dceca3afb" translate="yes" xml:space="preserve">
          <source>The download is achieved by setting &quot;content-disposition&quot; to attachment. The &quot;content-type&quot; will also be set based on the extension of the given filename but can be customized via the &lt;code&gt;:content_type&lt;/code&gt; and &lt;code&gt;:charset&lt;/code&gt; options.</source>
          <target state="translated">ダウンロードは、「content-disposition」を添付ファイルに設定することで実行されます。「content-type」も指定されたファイル名の拡張子に基づいて設定されますが、 &lt;code&gt;:content_type&lt;/code&gt; および &lt;code&gt;:charset&lt;/code&gt; オプションを使用してカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="2bea122452a37ef030f627235ed1844a3ddfe593" translate="yes" xml:space="preserve">
          <source>The download is achieved by setting &amp;ldquo;content-disposition&amp;rdquo; to attachment. The &amp;ldquo;content-type&amp;rdquo; will also be set based on the extension of the given filename but can be customized via the &lt;code&gt;:content_type&lt;/code&gt; and &lt;code&gt;:charset&lt;/code&gt; options.</source>
          <target state="translated">ダウンロードは、「content-disposition」を添付ファイルに設定することで実現されます。「コンテンツタイプ」も、指定されたファイル名の拡張子に基づいて設定されますが、 &lt;code&gt;:content_type&lt;/code&gt; および &lt;code&gt;:charset&lt;/code&gt; オプションを使用してカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="305f411cb067461e7008b3366143db8315830828" translate="yes" xml:space="preserve">
          <source>The embedded may or may not have a primary key. Ecto use the primary keys to detect if an embed is being updated or not. If a primary is not present and you still want the list of embeds to be updated, &lt;code&gt;:on_replace&lt;/code&gt; must be set to &lt;code&gt;:delete&lt;/code&gt;, forcing all current embeds to be deleted and replaced by new ones whenever a new list of embeds is set.</source>
          <target state="translated">埋め込みには、主キーがある場合とない場合があります。外部キーは、主キーを使用して、埋め込みが更新されているかどうかを検出します。プライマリが存在せず、埋め込みのリストを更新したい場合は、 &lt;code&gt;:on_replace&lt;/code&gt; を &lt;code&gt;:delete&lt;/code&gt; に設定して、現在の埋め込みをすべて削除し、新しい埋め込みのリストが設定されるたびに新しい埋め込みに強制的に置き換える必要があります。</target>
        </trans-unit>
        <trans-unit id="9851fea47b9bbc161a06c36308d9e5222d41ca5d" translate="yes" xml:space="preserve">
          <source>The embedded may or may not have a primary key. Ecto use the primary keys to detect if an embed is being updated or not. If a primary is not present, &lt;code&gt;:on_replace&lt;/code&gt; should be set to either &lt;code&gt;:update&lt;/code&gt; or &lt;code&gt;:delete&lt;/code&gt; if there is a desire to either update or delete the current embed when a new one is set.</source>
          <target state="translated">埋め込みには、主キーがある場合とない場合があります。外部キーは、主キーを使用して、埋め込みが更新されているかどうかを検出します。プライマリが存在しない場合、新しい埋め込みが設定されたときに現在の埋め込みを更新または削除 &lt;code&gt;:delete&lt;/code&gt; 必要がある場合は、 &lt;code&gt;:on_replace&lt;/code&gt; を &lt;code&gt;:update&lt;/code&gt; または：deleteに設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="1949ed7b2d6dffd9e7c7748d7bd6bc3abd5dcf0c" translate="yes" xml:space="preserve">
          <source>The embedded may or may not have a primary key. Ecto uses the primary keys to detect if an embed is being updated or not. If a primary is not present and you still want the list of embeds to be updated, &lt;code&gt;:on_replace&lt;/code&gt; must be set to &lt;code&gt;:delete&lt;/code&gt;, forcing all current embeds to be deleted and replaced by new ones whenever a new list of embeds is set.</source>
          <target state="translated">埋め込みには主キーがある場合とない場合があります。Ectoは主キーを使用して、埋め込みが更新されているかどうかを検出します。プライマリが存在せず、埋め込みのリストを更新する必要がある場合は、 &lt;code&gt;:on_replace&lt;/code&gt; を &lt;code&gt;:delete&lt;/code&gt; に設定する必要があります。これにより、新しい埋め込みリストが設定されるたびに、現在のすべての埋め込みが削除され、新しい埋め込みに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="af9a17476a78a7a92bdf8fb962890959f1ad1049" translate="yes" xml:space="preserve">
          <source>The embedded may or may not have a primary key. Ecto uses the primary keys to detect if an embed is being updated or not. If a primary key is not present, &lt;code&gt;:on_replace&lt;/code&gt; should be set to either &lt;code&gt;:update&lt;/code&gt; or &lt;code&gt;:delete&lt;/code&gt; if there is a desire to either update or delete the current embed when a new one is set.</source>
          <target state="translated">埋め込みには主キーがある場合とない場合があります。Ectoは主キーを使用して、埋め込みが更新されているかどうかを検出します。主キーが存在しない場合、新しい埋め込みが設定されたときに現在の埋め込みを更新または削除 &lt;code&gt;:delete&lt;/code&gt; 必要がある場合は、 &lt;code&gt;:on_replace&lt;/code&gt; を &lt;code&gt;:update&lt;/code&gt; または：deleteのいずれかに設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="240ba5b0f9226d65d40a221b0aaca6577ac67121" translate="yes" xml:space="preserve">
          <source>The encoding of server data and the decoding of client data is done according to a serializer, defined in &lt;a href=&quot;phoenix.socket.serializer&quot;&gt;&lt;code&gt;Phoenix.Socket.Serializer&lt;/code&gt;&lt;/a&gt;. By default, JSON encoding is used to broker messages to and from clients with &lt;code&gt;Phoenix.Socket.V2.JSONSerializer&lt;/code&gt;.</source>
          <target state="translated">サーバーデータのエンコードとクライアントデータのデコードは、&lt;a href=&quot;phoenix.socket.serializer&quot;&gt; &lt;code&gt;Phoenix.Socket.Serializer&lt;/code&gt; &lt;/a&gt;で定義されているシリアライザーに従って行われます。デフォルトでは、JSONエンコーディングは、 &lt;code&gt;Phoenix.Socket.V2.JSONSerializer&lt;/code&gt; を使用してクライアントとの間でメッセージを仲介するために使用されます。</target>
        </trans-unit>
        <trans-unit id="ffc586997cb9ff4e598fbaf2d150c17e623488e6" translate="yes" xml:space="preserve">
          <source>The endpoint being tested is accessed via the &lt;code&gt;@endpoint&lt;/code&gt; module attribute.</source>
          <target state="translated">テストされるエンドポイントには、 &lt;code&gt;@endpoint&lt;/code&gt; モジュール属性を介してアクセスします。</target>
        </trans-unit>
        <trans-unit id="1085ea34a986c448fabcc15a67e4b94b2cb117ef" translate="yes" xml:space="preserve">
          <source>The endpoint is the boundary where all requests to your web application start. It is also the interface your application provides to the underlying web servers.</source>
          <target state="translated">エンドポイントは、Web アプリケーションへのすべてのリクエストが始まる境界線です。また、アプリケーションが基盤となるウェブサーバーに提供するインターフェースでもあります。</target>
        </trans-unit>
        <trans-unit id="74811601480966246292b2b910ca967ac18caf00" translate="yes" xml:space="preserve">
          <source>The endpoint, router, and controllers in Phoenix accept plugs.</source>
          <target state="translated">フェニックスのエンドポイント、ルーター、コントローラーはプラグを受け入れます。</target>
        </trans-unit>
        <trans-unit id="a71e0101c0d6d0c31084c2c74654c8ab5ada1e0f" translate="yes" xml:space="preserve">
          <source>The entry point for defining forms in Phoenix is with the &lt;a href=&quot;#form_for/4&quot;&gt;&lt;code&gt;form_for/4&lt;/code&gt;&lt;/a&gt; function. For this example, we will use &lt;code&gt;Ecto.Changeset&lt;/code&gt;, which integrates nicely with Phoenix forms via the &lt;code&gt;phoenix_ecto&lt;/code&gt; package.</source>
          <target state="translated">フェニックスでフォームを定義するためのエントリポイントは、&lt;a href=&quot;#form_for/4&quot;&gt; &lt;code&gt;form_for/4&lt;/code&gt; &lt;/a&gt;関数です。この例では、 &lt;code&gt;phoenix_ecto&lt;/code&gt; パッケージを介してPhoenixフォームとうまく統合する &lt;code&gt;Ecto.Changeset&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="04c6d1a307f90ddcd28dacda1e19147d95f5924b" translate="yes" xml:space="preserve">
          <source>The event callback is called &lt;em&gt;before&lt;/em&gt; the event happens (in this case, before the view is rendered) with the atom &lt;code&gt;:start&lt;/code&gt; as the first argument; see the &amp;ldquo;Before clause&amp;rdquo; section below.</source>
          <target state="translated">イベントコールバックは、最初の引数としてアトム &lt;code&gt;:start&lt;/code&gt; を使用して、イベントが発生&lt;em&gt;する前&lt;/em&gt;（この場合はビューがレンダリングされる&lt;em&gt;前&lt;/em&gt;）に呼び出されます。下記の「Before句」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="757e085e21ddd74789de7bdb0bbe8f07bed88c4b" translate="yes" xml:space="preserve">
          <source>The event callback sequence is:</source>
          <target state="translated">イベントコールバックのシーケンスは</target>
        </trans-unit>
        <trans-unit id="8146ea0120720d389e5e641e32fe81e0949316e4" translate="yes" xml:space="preserve">
          <source>The event occurs (in this case, the view is rendered).</source>
          <target state="translated">イベントが発生します(この場合、ビューがレンダリングされます)。</target>
        </trans-unit>
        <trans-unit id="ae116b624d5b59052eb64f10c8d76ec7dd431042" translate="yes" xml:space="preserve">
          <source>The event&amp;rsquo;s message must be a serializable map.</source>
          <target state="translated">イベントのメッセージは、シリアル化可能なマップである必要があります。</target>
        </trans-unit>
        <trans-unit id="59c29c61995ac6adc27d72e58769a2befdbcb1f2" translate="yes" xml:space="preserve">
          <source>The event's message must be a serializable map.</source>
          <target state="translated">イベントのメッセージは、シリアライズ可能なマップである必要があります。</target>
        </trans-unit>
        <trans-unit id="c6f8e9a757d63677055c9099b13a0e178eebb865" translate="yes" xml:space="preserve">
          <source>The example above does not use &lt;code&gt;in&lt;/code&gt; because &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;offset&lt;/code&gt; do not require a reference to the data source. However, extending the query with a where expression would require the use of &lt;code&gt;in&lt;/code&gt;:</source>
          <target state="translated">上記の例 &lt;code&gt;in&lt;/code&gt; 、 &lt;code&gt;limit&lt;/code&gt; と &lt;code&gt;offset&lt;/code&gt; はデータソースへの参照を必要としないため、では使用しません。ただし、where式でクエリを拡張するには &lt;code&gt;in&lt;/code&gt; 使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="2a68a419c4788a627e1c523a21aa9c289200ba77" translate="yes" xml:space="preserve">
          <source>The example above renders a template &quot;show.html&quot; from the &lt;code&gt;MyAppWeb.UserView&lt;/code&gt; and sets the response content type to &quot;text/html&quot;.</source>
          <target state="translated">上記の例では、 &lt;code&gt;MyAppWeb.UserView&lt;/code&gt; からテンプレート「show.html」をレンダリングし、応答コンテンツタイプを「text / html」に設定しています。</target>
        </trans-unit>
        <trans-unit id="323718568a794b79b80b9c7f90d47fc0dddb0e78" translate="yes" xml:space="preserve">
          <source>The example above renders a template &amp;ldquo;show.html&amp;rdquo; from the &lt;code&gt;MyApp.UserView&lt;/code&gt; and sets the response content type to &amp;ldquo;text/html&amp;rdquo;.</source>
          <target state="translated">上記の例では、 &lt;code&gt;MyApp.UserView&lt;/code&gt; からテンプレート「show.html」をレンダリングし、応答のコンテンツタイプを「text / html」に設定しています。</target>
        </trans-unit>
        <trans-unit id="263bcd680d02d0dedd523e55597569bfc7eb4085" translate="yes" xml:space="preserve">
          <source>The example above will fetch all posts from the database and then do a separate query returning all comments associated with the given posts. The comments are then processed and associated to each returned &lt;code&gt;post&lt;/code&gt; under the &lt;code&gt;comments&lt;/code&gt; field.</source>
          <target state="translated">上記の例では、データベースからすべての投稿をフェッチしてから、別のクエリを実行して、指定された投稿に関連付けられているすべてのコメントを返します。次にコメントが処理され、 &lt;code&gt;comments&lt;/code&gt; フィールドの下で返された各 &lt;code&gt;post&lt;/code&gt; 関連付けられます。</target>
        </trans-unit>
        <trans-unit id="b71e88e7ed588cf8386d56a8b902c449be09cbf4" translate="yes" xml:space="preserve">
          <source>The example above will issue two queries, one for loading posts and then another for loading the comments associated with the posts. Comments will be ordered by &lt;code&gt;published_at&lt;/code&gt;.</source>
          <target state="translated">上記の例では、2つのクエリを発行します。1つは投稿の読み込み用、もう1つは投稿に関連付けられたコメントの読み込み用です。コメントは、 &lt;code&gt;published_at&lt;/code&gt; によって順序付けられます。</target>
        </trans-unit>
        <trans-unit id="924e9a6b17eb83d28266379ce64871ee77dfc336" translate="yes" xml:space="preserve">
          <source>The example above will work if the input query has 1 or 10 bindings. As long as the number of bindings is less than the number of from + joins, Ecto will match only what you have specified. The first binding always matches the source given in &lt;code&gt;from&lt;/code&gt;.</source>
          <target state="translated">上記の例は、入力クエリに1または10のバインディングがある場合に機能します。バインディングの数がfrom +結合の数よりも少ない限り、Ectoは指定したものだけに一致します。最初のバインディングは常に &lt;code&gt;from&lt;/code&gt; で指定されたソースと一致します。</target>
        </trans-unit>
        <trans-unit id="597f52cde33ea3d40cd216eeff98f0f27574f4d6" translate="yes" xml:space="preserve">
          <source>The exclusion constraint works by relying on the database to check if the exclusion constraint has been violated or not and, if so, Ecto converts it into a changeset error.</source>
          <target state="translated">除外制約は、データベースに依存して除外制約が違反しているかどうかをチェックし、違反している場合、Ectoはそれをチェンジセットエラーに変換することで動作します。</target>
        </trans-unit>
        <trans-unit id="77dfbd136a0c7b400c0e6cf8e244d45dcfb4c0ae" translate="yes" xml:space="preserve">
          <source>The field name will be used as is to read and write to the database by all of the built-in adapters unless overridden with the &lt;code&gt;:source&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;:source&lt;/code&gt; オプションでオーバーライドされない限り、フィールド名は、すべての組み込みアダプターによるデータベースの読み取りおよび書き込みにそのまま使用されます。</target>
        </trans-unit>
        <trans-unit id="28d67d8abd4a4854029b14119fba01291b055159" translate="yes" xml:space="preserve">
          <source>The fields are:</source>
          <target state="translated">フィールドは</target>
        </trans-unit>
        <trans-unit id="23e99979ef97808c907b0384c23bb476163e1c89" translate="yes" xml:space="preserve">
          <source>The fields generated by this macro will automatically be set to the current time when inserting and updating values in a repository.</source>
          <target state="translated">このマクロで生成されたフィールドは、リポジトリに値を挿入したり更新したりする際に、自動的に現在の時刻に設定されます。</target>
        </trans-unit>
        <trans-unit id="b3a7c7070bdd1da6f37c5437d705a4f71db3064c" translate="yes" xml:space="preserve">
          <source>The first argument can also be a &lt;code&gt;types&lt;/code&gt; map:</source>
          <target state="translated">最初の引数は &lt;code&gt;types&lt;/code&gt; マップにすることもできます：</target>
        </trans-unit>
        <trans-unit id="49bed0abeb1db58200a4ef0db4c5da86c91aa45c" translate="yes" xml:space="preserve">
          <source>The first argument can be a a schema module, or a map (of types) and determines the return value: a struct or a map, respectively.</source>
          <target state="translated">最初の引数はスキーマモジュールかマップ(型の)で、戻り値はそれぞれ構造体かマップかを決定します。</target>
        </trans-unit>
        <trans-unit id="ec0251c98fcdc3180f663f2d434e28c1ff287694" translate="yes" xml:space="preserve">
          <source>The first argument can be a an embedded schema module, or a map (of types) and determines the return value: a struct or a map, respectively.</source>
          <target state="translated">最初の引数は、組み込みスキーマモジュール、またはマップ(型の)を指定し、戻り値を決定します。</target>
        </trans-unit>
        <trans-unit id="500f8521003b9bf543828ad835d40f5eeb6af0a7" translate="yes" xml:space="preserve">
          <source>The first argument is a &lt;code&gt;datetime&lt;/code&gt;, the second one is the count for the interval, which may be either positive or negative and the interval value:</source>
          <target state="translated">最初の引数は &lt;code&gt;datetime&lt;/code&gt; 、2番目の引数は間隔のカウントです。これは正または負のいずれかであり、間隔の値です。</target>
        </trans-unit>
        <trans-unit id="c0e54dc181af943e0b3cceca923e134cbcf1e0c6" translate="yes" xml:space="preserve">
          <source>The first argument is the context module followed by the schema module and its plural name (used as the schema table name).</source>
          <target state="translated">最初の引数はコンテキストモジュールで、その後にスキーマモジュールとその複数形の名前(スキーマテーブル名として使用されます)が続きます。</target>
        </trans-unit>
        <trans-unit id="4865c8fae49bc4316a74325ea7181643af770fb4" translate="yes" xml:space="preserve">
          <source>The first argument is the context the callback is being invoked. If it is called because the Repo supervisor is starting, it will be &lt;code&gt;:supervisor&lt;/code&gt;. It will be &lt;code&gt;:runtime&lt;/code&gt; if it is called for reading configuration without actually starting a process.</source>
          <target state="translated">最初の引数は、コールバックが呼び出されているコンテキストです。Repoスーパーバイザーが開始されているために呼び出された場合は、 &lt;code&gt;:supervisor&lt;/code&gt; になります。実際にプロセスを開始せずに構成を読み取るために呼び出された場合は、 &lt;code&gt;:runtime&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="abeed1d3f6ef43117d9c456048712438c831279a" translate="yes" xml:space="preserve">
          <source>The first argument is the module name followed by its plural name (used for resources and schema).</source>
          <target state="translated">最初の引数はモジュール名の後に複数の名前が続きます(リソースやスキーマに使用されます)。</target>
        </trans-unit>
        <trans-unit id="964c9cb93e956fb751ffeb1617eb35e4e1dd5ef8" translate="yes" xml:space="preserve">
          <source>The first argument is the module name followed by its plural name (used for the schema).</source>
          <target state="translated">最初の引数はモジュール名の後に複数の名前が続きます(スキーマに使用されます)。</target>
        </trans-unit>
        <trans-unit id="35f70a15e0108aa4e4b74899ee54723e2a713861" translate="yes" xml:space="preserve">
          <source>The first argument is the path where the static files are located. The &lt;code&gt;-o&lt;/code&gt; option indicates the path that will be used to save the digested and compressed files.</source>
          <target state="translated">最初の引数は、静的ファイルが配置されているパスです。 &lt;code&gt;-o&lt;/code&gt; オプションは、消化し、圧縮されたファイルを保存するために使用される経路を示しています。</target>
        </trans-unit>
        <trans-unit id="2fe4f44a0f785ff10de251522a37c07e0b5ab7bb" translate="yes" xml:space="preserve">
          <source>The first argument is the schema module followed by its plural name (used as the table name).</source>
          <target state="translated">最初の引数はスキーマモジュールの後に複数の名前が続きます(テーブル名として使用されます)。</target>
        </trans-unit>
        <trans-unit id="e4b02077d7ac802cfee0627d193ca5cd0a9be149" translate="yes" xml:space="preserve">
          <source>The first argument is the schema module followed by the schema attributes</source>
          <target state="translated">最初の引数はスキーマモジュールで、その後にスキーマ属性が続きます。</target>
        </trans-unit>
        <trans-unit id="d11a276567643357f029e74ffc86b05f8be866b2" translate="yes" xml:space="preserve">
          <source>The first argument is the schema module followed by the schema attributes.</source>
          <target state="translated">最初の引数はスキーマモジュールで、その後にスキーマ属性が続きます。</target>
        </trans-unit>
        <trans-unit id="85394c0d9cf1f3bd97ab6925f698c432e75e0ba3" translate="yes" xml:space="preserve">
          <source>The first argument should either be a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Phoenix.HTML.Form&lt;/code&gt;&lt;/a&gt; emitted by &lt;code&gt;form_for&lt;/code&gt; or an atom.</source>
          <target state="translated">最初の引数のいずれかでなければならない&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Phoenix.HTML.Form&lt;/code&gt; &lt;/a&gt;によって放出される &lt;code&gt;form_for&lt;/code&gt; 又は原子です。</target>
        </trans-unit>
        <trans-unit id="4d5565085e0846e63bdeb7de3b6914b3e5d53f51" translate="yes" xml:space="preserve">
          <source>The first argument to both &lt;a href=&quot;#sign/4&quot;&gt;&lt;code&gt;sign/4&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#verify/4&quot;&gt;&lt;code&gt;verify/4&lt;/code&gt;&lt;/a&gt; can be one of:</source>
          <target state="translated">&lt;a href=&quot;#sign/4&quot;&gt; &lt;code&gt;sign/4&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#verify/4&quot;&gt; &lt;code&gt;verify/4&lt;/code&gt; の&lt;/a&gt;両方に対する最初の引数は、次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="d49a3d210dbcdc92bf9475253ce66aa64aa7725b" translate="yes" xml:space="preserve">
          <source>The first field name, &lt;code&gt;:email&lt;/code&gt; in this case, will be used as the error key to the changeset errors keyword list. For example, the above &lt;a href=&quot;#unique_constraint/3&quot;&gt;&lt;code&gt;unique_constraint/3&lt;/code&gt;&lt;/a&gt; would generate something like:</source>
          <target state="translated">最初のフィールド名（この場合は &lt;code&gt;:email&lt;/code&gt; )は、チェンジセットエラーキーワードリストのエラーキーとして使用されます。たとえば、上記の&lt;a href=&quot;#unique_constraint/3&quot;&gt; &lt;code&gt;unique_constraint/3&lt;/code&gt; &lt;/a&gt;は、次のようなものを生成します。</target>
        </trans-unit>
        <trans-unit id="14c98ababa7076deb4b23e215e725e5dcc321dec" translate="yes" xml:space="preserve">
          <source>The first line below the module definition invokes the &lt;code&gt;__using__/1&lt;/code&gt; macro of the &lt;code&gt;HelloWeb&lt;/code&gt; module, which imports some useful modules.</source>
          <target state="translated">モジュール定義の下の最初の行は、 &lt;code&gt;HelloWeb&lt;/code&gt; モジュールの &lt;code&gt;__using__/1&lt;/code&gt; マクロを呼び出し、いくつかの便利なモジュールをインポートします。</target>
        </trans-unit>
        <trans-unit id="79d9874d0b09b5d634a9bffe5a01fb056e0e669b" translate="yes" xml:space="preserve">
          <source>The first line of this module, &lt;code&gt;use HelloWeb, :router&lt;/code&gt;, simply makes Phoenix router functions available in our particular router.</source>
          <target state="translated">このモジュールの最初の行である &lt;code&gt;use HelloWeb, :router&lt;/code&gt; と、Phoenixルーターの機能を特定のルーターで使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="5b536e4964b55b3a608e3b733d3258cc0956029a" translate="yes" xml:space="preserve">
          <source>The first parameter is always &lt;code&gt;conn&lt;/code&gt;, a struct which holds information about the request such as the host, path elements, port, query string, and much more. &lt;code&gt;conn&lt;/code&gt;, comes to Phoenix via Elixir's Plug middleware framework. More detailed info about &lt;code&gt;conn&lt;/code&gt; can be found in &lt;a href=&quot;../plug/plug.conn&quot;&gt;plug's documentation&lt;/a&gt;.</source>
          <target state="translated">最初のパラメーターは常に &lt;code&gt;conn&lt;/code&gt; です。これは、ホスト、パス要素、ポート、クエリ文字列など、リクエストに関する情報を保持する構造体です。 &lt;code&gt;conn&lt;/code&gt; は、ElixirのPlugミドルウェアフレームワークを介してPhoenixにアクセスします。 &lt;code&gt;conn&lt;/code&gt; の詳細については、&lt;a href=&quot;../plug/plug.conn&quot;&gt;プラグのドキュメントを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2cb52f0181ac504af2d274804ae227768df1b3b4" translate="yes" xml:space="preserve">
          <source>The first plug will run only when action is show or edit. The second plug will always run, except for the index action.</source>
          <target state="translated">最初のプラグは、アクションが表示または編集されたときにのみ実行されます。2番目のプラグはインデックスアクションを除いて常に実行されます。</target>
        </trans-unit>
        <trans-unit id="a7a085c723aa2725f1a835b9fa686c2f8a3dbb9f" translate="yes" xml:space="preserve">
          <source>The first question is, where does that error string come from? The answer is right in the &lt;code&gt;ErrorView&lt;/code&gt;.</source>
          <target state="translated">最初の質問は、そのエラー文字列はどこから来るのかということです。答えは &lt;code&gt;ErrorView&lt;/code&gt; にあります。</target>
        </trans-unit>
        <trans-unit id="87cb90ded997365e136d73bbbbeaa6912dce9a57" translate="yes" xml:space="preserve">
          <source>The first step is to start the adapter of choice in your supervision tree:</source>
          <target state="translated">まずは、監督の木で選択したアダプターを起動します。</target>
        </trans-unit>
        <trans-unit id="ce8e7b83d95aab3d7102e7f0e03f87b4868c2329" translate="yes" xml:space="preserve">
          <source>The first thing we need to do is create a &lt;code&gt;mix/tasks&lt;/code&gt; directory inside of &lt;code&gt;lib&lt;/code&gt;. This is where any of our application specific mix tasks will go.</source>
          <target state="translated">最初に行う必要があるのは、 &lt;code&gt;lib&lt;/code&gt; 内に &lt;code&gt;mix/tasks&lt;/code&gt; ディレクトリを作成することです。これは、アプリケーション固有のミックスタスクのいずれかが行われる場所です。</target>
        </trans-unit>
        <trans-unit id="e521b29a1418c4c03c1262013a47617e674a9abe" translate="yes" xml:space="preserve">
          <source>The first thing we need to do is name our module. All tasks must be defined in &lt;code&gt;Mix.Tasks&lt;/code&gt; namespace. We'd like to invoke this as &lt;code&gt;mix hello.greeting&lt;/code&gt;, so we complete the module name with &lt;code&gt;Hello.Greeting&lt;/code&gt;.</source>
          <target state="translated">最初に行う必要があるのは、モジュールに名前を付けることです。すべてのタスクは、 &lt;code&gt;Mix.Tasks&lt;/code&gt; 名前空間で定義する必要があります。これを &lt;code&gt;mix hello.greeting&lt;/code&gt; として呼び出したいので、モジュール名を &lt;code&gt;Hello.Greeting&lt;/code&gt; で完成させます。</target>
        </trans-unit>
        <trans-unit id="29f463e217a7cb3a4cb33031b1d1ba5fe4bbd808" translate="yes" xml:space="preserve">
          <source>The first thing we need to do to create that page is define a route for it. Let's open up &lt;code&gt;lib/hello_web/router.ex&lt;/code&gt; in a text editor. For a brand new application, it looks like this:</source>
          <target state="translated">そのページを作成するために最初に行う必要があるのは、そのページのルートを定義することです。テキストエディタで &lt;code&gt;lib/hello_web/router.ex&lt;/code&gt; 開いてみましょう。まったく新しいアプリケーションの場合、次のようになります。</target>
        </trans-unit>
        <trans-unit id="f8101d8208169439cea8beb089d2fd5b7d5aeff5" translate="yes" xml:space="preserve">
          <source>The flash functionality is handy when mixed with redirects. Perhaps you want to redirect to a page with some extra information. If we re-use the redirect action from the previous section, we can do:</source>
          <target state="translated">フラッシュ機能は、リダイレクトと組み合わせると便利です。おそらく、追加情報のあるページにリダイレクトしたいと思います。先ほどのリダイレクトアクションを再利用すれば、できるようになります。</target>
        </trans-unit>
        <trans-unit id="23dbc44cf8fcb8401ecac56fad2056f3e27fd632" translate="yes" xml:space="preserve">
          <source>The following approach is &lt;strong&gt;wrong&lt;/strong&gt;:</source>
          <target state="translated">次のアプローチは&lt;strong&gt;間違ってい&lt;/strong&gt;ます：</target>
        </trans-unit>
        <trans-unit id="27f0532927f5dfde2ed38eb7adc999b8682a2ebd" translate="yes" xml:space="preserve">
          <source>The following assigns are reserved, and cannot be set directly:</source>
          <target state="translated">以下の割り当ては予約されており、直接設定することはできません。</target>
        </trans-unit>
        <trans-unit id="96a9598d7d5639506795473ffa8dad0e7b28cb27" translate="yes" xml:space="preserve">
          <source>The following configuration applies only to &lt;code&gt;:longpoll&lt;/code&gt;:</source>
          <target state="translated">次の構成は、 &lt;code&gt;:longpoll&lt;/code&gt; ：にのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="2c9626abcad38b5d2ad7be4a47ee7034e64d5860" translate="yes" xml:space="preserve">
          <source>The following configuration applies only to &lt;code&gt;:websocket&lt;/code&gt;.</source>
          <target state="translated">次の構成は &lt;code&gt;:websocket&lt;/code&gt; にのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="13779d40c7bd0138f604faeb9ae943fd9630bdfd" translate="yes" xml:space="preserve">
          <source>The following events are emitted by all Ecto repositories:</source>
          <target state="translated">以下のイベントは、すべての Ecto リポジトリから発行されます。</target>
        </trans-unit>
        <trans-unit id="697b7462029e6e23c15a3021022337813a16f040" translate="yes" xml:space="preserve">
          <source>The following fields are private and must not be accessed directly.</source>
          <target state="translated">以下のフィールドは非公開であり、直接アクセスすることはできません。</target>
        </trans-unit>
        <trans-unit id="baaf66ee23187b5f5ad09e6055f8ea194c2622bf" translate="yes" xml:space="preserve">
          <source>The following function lifts &lt;code&gt;metadata.socket.view&lt;/code&gt; and &lt;code&gt;metadata.socket.connected?&lt;/code&gt; to be top-level keys on &lt;code&gt;metadata&lt;/code&gt;, as we did in the previous example.</source>
          <target state="translated">次の関数は &lt;code&gt;metadata.socket.view&lt;/code&gt; と &lt;code&gt;metadata.socket.connected?&lt;/code&gt; 持ち上げますか？前の例で行ったように、 &lt;code&gt;metadata&lt;/code&gt; トップレベルキーになります。</target>
        </trans-unit>
        <trans-unit id="b34d9298df0cbb61838280284087d26545c45a26" translate="yes" xml:space="preserve">
          <source>The following intervals are supported: year, month, week, day, hour, minute, second, millisecond and microsecond.</source>
          <target state="translated">年、月、週、日、時、分、秒、ミリ秒、マイクロ秒の間隔をサポートしています。</target>
        </trans-unit>
        <trans-unit id="1ff93af922ef6535f32352b2b639755a01dafeb3" translate="yes" xml:space="preserve">
          <source>The following keys are allowed when specifying a window.</source>
          <target state="translated">ウィンドウを指定する際には、以下のキーを使用することができます。</target>
        </trans-unit>
        <trans-unit id="59c9c3a965c72c26e14a2014331e87cf4bda5729" translate="yes" xml:space="preserve">
          <source>The following keys are available:</source>
          <target state="translated">以下のキーを使用できます。</target>
        </trans-unit>
        <trans-unit id="fdd2468c439eb11013c816be656d524ad7f23e6f" translate="yes" xml:space="preserve">
          <source>The following params have special meaning in LiveView:</source>
          <target state="translated">以下のパラメータはLiveViewでは特別な意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="aebca73a523dda1e7ab387256d00be6cee49a026" translate="yes" xml:space="preserve">
          <source>The following public fields represent the LiveView:</source>
          <target state="translated">以下のパブリックフィールドがLiveViewを表しています。</target>
        </trans-unit>
        <trans-unit id="a77ca9c2bc454b722bf0d3007090b822823c3ad6" translate="yes" xml:space="preserve">
          <source>The following public fields represent the element:</source>
          <target state="translated">以下のパブリックフィールドが要素を表します。</target>
        </trans-unit>
        <trans-unit id="71d94986edc28d20eb6e61b59ed0d6b150611abc" translate="yes" xml:space="preserve">
          <source>The following returns must be handled by transports:</source>
          <target state="translated">以下のリターンは、トランスポートで処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="cc0e8fdffd8fa1f0de767e3b482f423a5a285a50" translate="yes" xml:space="preserve">
          <source>The following specialized behavior is performed for forms and keydown bindings:</source>
          <target state="translated">フォームやキーダウンバインディングでは、以下のような特殊な動作が行われます。</target>
        </trans-unit>
        <trans-unit id="7450f3bbf7bebc0ac2b8dc21e3fc9b6d5613f466" translate="yes" xml:space="preserve">
          <source>The following status codes can be given as atoms with their respective value shown next:</source>
          <target state="translated">次のステータスコードは、それぞれの値が次に示されている原子として与えることができます。</target>
        </trans-unit>
        <trans-unit id="c734167c81ee7d5e27dd0815c6c9a86a53980591" translate="yes" xml:space="preserve">
          <source>The following types are supported:</source>
          <target state="translated">以下のタイプに対応しています。</target>
        </trans-unit>
        <trans-unit id="2047e7bdd4c73fd0eee9eccb4cbf4a0fb4bc1b07" translate="yes" xml:space="preserve">
          <source>The following validations may be included in the result. The list is not necessarily exhaustive. For example, custom validations written by the developer will also appear in our return value.</source>
          <target state="translated">結果には以下の検証結果が含まれる場合があります。このリストは必ずしもすべてを網羅しているわけではありません。たとえば、開発者が書いたカスタムバリデーションも返り値に含まれます。</target>
        </trans-unit>
        <trans-unit id="cba133f413c5a544cc032d45c75d5ce55c737264" translate="yes" xml:space="preserve">
          <source>The following values are supported as date:</source>
          <target state="translated">日付としては以下の値がサポートされています。</target>
        </trans-unit>
        <trans-unit id="5bfa84ecf1155190787c1f7e94a11fe721e17de4" translate="yes" xml:space="preserve">
          <source>The following values are supported as time:</source>
          <target state="translated">時間としては以下の値をサポートしています。</target>
        </trans-unit>
        <trans-unit id="a481ccb6962d389f9f787ae8a2a1fafb0d321119" translate="yes" xml:space="preserve">
          <source>The following window-level bindings are supported:</source>
          <target state="translated">以下のウィンドウレベルのバインディングがサポートされています。</target>
        </trans-unit>
        <trans-unit id="9ce20518f56534bcc1118c0bf986d78eef528c90" translate="yes" xml:space="preserve">
          <source>The following:</source>
          <target state="translated">次のようになっています。</target>
        </trans-unit>
        <trans-unit id="4117df297cda8bdfcd48daa253e21cdf1ba31860" translate="yes" xml:space="preserve">
          <source>The foreign key constraint works by relying on the database to check if the associated data exists or not. This is useful to guarantee that a child will only be created if the parent exists in the database too.</source>
          <target state="translated">外部キー制約は、データベースに依存して、関連するデータが存在するかどうかをチェックすることで動作します。これは、親がデータベースに存在する場合にのみ子が作成されることを保証するのに便利です。</target>
        </trans-unit>
        <trans-unit id="9abddf5cdee83822dd2471a1c84adfa00e2761db" translate="yes" xml:space="preserve">
          <source>The form data will be validated directly against the form markup and make sure the data you are changing/submitting actually exists, failing otherwise.</source>
          <target state="translated">フォームデータはフォームのマークアップに対して直接検証され、変更/送信するデータが実際に存在することを確認します。</target>
        </trans-unit>
        <trans-unit id="e8fa4eb4ae0982343eb1b5d21fa657d106b56303" translate="yes" xml:space="preserve">
          <source>The form generates a CSRF token by default. Your application should check this token on the server to avoid attackers from making requests on your server in behalf of other users. Phoenix by default checks this token.</source>
          <target state="translated">フォームはデフォルトで CSRF トークンを生成します。攻撃者が他のユーザの代わりにサーバにリクエストを行うことを避けるために、アプリケーションはサーバ上でこのトークンをチェックしなければなりません。Phoenix はデフォルトでこのトークンをチェックします。</target>
        </trans-unit>
        <trans-unit id="a1ba555c0e57f112db7c92095d012a43d52db5ee" translate="yes" xml:space="preserve">
          <source>The form receives the &lt;code&gt;&quot;phx-submit-loading&quot;&lt;/code&gt; class</source>
          <target state="translated">フォームは &lt;code&gt;&quot;phx-submit-loading&quot;&lt;/code&gt; クラスを受け取ります</target>
        </trans-unit>
        <trans-unit id="f83c045b60690e0951f0d613211981e82b773a3a" translate="yes" xml:space="preserve">
          <source>The form should either be a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Phoenix.HTML.Form&lt;/code&gt;&lt;/a&gt; emitted by &lt;code&gt;form_for&lt;/code&gt; or an atom.</source>
          <target state="translated">フォームのいずれかでなければならない&lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Phoenix.HTML.Form&lt;/code&gt; &lt;/a&gt;によって放出される &lt;code&gt;form_for&lt;/code&gt; 又は原子です。</target>
        </trans-unit>
        <trans-unit id="8d01992897ad728050b4b855767bf08df37caba2" translate="yes" xml:space="preserve">
          <source>The form should either be a &lt;a href=&quot;phoenix.html.form#content&quot;&gt;&lt;code&gt;Phoenix.HTML.Form&lt;/code&gt;&lt;/a&gt; emitted by &lt;code&gt;form_for&lt;/code&gt; or an atom.</source>
          <target state="translated">フォームのいずれかでなければならない&lt;a href=&quot;phoenix.html.form#content&quot;&gt; &lt;code&gt;Phoenix.HTML.Form&lt;/code&gt; &lt;/a&gt;によって放出される &lt;code&gt;form_for&lt;/code&gt; 又は原子です。</target>
        </trans-unit>
        <trans-unit id="7a6fd6898aaadbc26c2bf3b5a891b41542112f89" translate="yes" xml:space="preserve">
          <source>The form's inputs are set to &lt;code&gt;readonly&lt;/code&gt;</source>
          <target state="translated">フォームの入力は &lt;code&gt;readonly&lt;/code&gt; 設定されています</target>
        </trans-unit>
        <trans-unit id="f1af6d5bfd7bd7fb64c73cbb0bcf39cb8cf169f9" translate="yes" xml:space="preserve">
          <source>The format has to be expressed as a regular expression.</source>
          <target state="translated">フォーマットは正規表現で表現する必要があります。</target>
        </trans-unit>
        <trans-unit id="489cb5dcb56120d97d2c8e93ec7af5be88c2a077" translate="yes" xml:space="preserve">
          <source>The forwarded plug will be initialized at compile time.</source>
          <target state="translated">転送されたプラグはコンパイル時に初期化されます。</target>
        </trans-unit>
        <trans-unit id="77d021b8d46e32208156e088e01303ca1c12d18a" translate="yes" xml:space="preserve">
          <source>The full list of &lt;code&gt;:telemetry&lt;/code&gt; events emitted from Phoenix, along with their measurements and metadata, is available in the &quot;Instrumentation&quot; section of the &lt;a href=&quot;phoenix.logger&quot;&gt;&lt;code&gt;Phoenix.Logger&lt;/code&gt;&lt;/a&gt; module documentation.</source>
          <target state="translated">完全なリスト &lt;code&gt;:telemetry&lt;/code&gt; フェニックスから放出されたイベントは、その測定結果とメタデータと一緒に、の「計測」のセクションで提供されています&lt;a href=&quot;phoenix.logger&quot;&gt; &lt;code&gt;Phoenix.Logger&lt;/code&gt; の&lt;/a&gt;モジュールのドキュメント。</target>
        </trans-unit>
        <trans-unit id="6f475ae2afee4e174380adc1703f946251ee406f" translate="yes" xml:space="preserve">
          <source>The function &lt;a href=&quot;#dispatch/3&quot;&gt;&lt;code&gt;dispatch/3&lt;/code&gt;&lt;/a&gt; can be used to handle these messages.</source>
          <target state="translated">関数&lt;a href=&quot;#dispatch/3&quot;&gt; &lt;code&gt;dispatch/3&lt;/code&gt; &lt;/a&gt;は、これらのメッセージを処理するために使用できます。</target>
        </trans-unit>
        <trans-unit id="b2ef8c5833d6215f90102ad8553d89a6b62ac7bf" translate="yes" xml:space="preserve">
          <source>The function above fetches all users from the database who have registered presences for the given topic. The fetched information is then extended with a &lt;code&gt;:user&lt;/code&gt; key of the user&amp;rsquo;s information, while maintaining the required &lt;code&gt;:metas&lt;/code&gt; field from the original presence data.</source>
          <target state="translated">上記の関数は、特定のトピックのプレゼンスを登録しているすべてのユーザーをデータベースからフェッチします。取得された情報は、ユーザーの情報の &lt;code&gt;:user&lt;/code&gt; キーで拡張されますが、元のプレゼンスデータの必要な &lt;code&gt;:metas&lt;/code&gt; フィールドは維持されます。</target>
        </trans-unit>
        <trans-unit id="3bb5d899f787348b0861709cf9aa7599e25a199f" translate="yes" xml:space="preserve">
          <source>The function accepts a status either as an integer HTTP status or atom, such as &lt;code&gt;404&lt;/code&gt; or &lt;code&gt;:not_found&lt;/code&gt;. If an error is raised, a 3-tuple of the wrapped response is returned matching the status, headers, and body of the response:</source>
          <target state="translated">この関数は、ステータスを整数のHTTPステータスまたはアトム（ &lt;code&gt;404&lt;/code&gt; や &lt;code&gt;:not_found&lt;/code&gt; など）として受け入れます。エラーが発生した場合、ラップされた応答の3タプルが、応答のステータス、ヘッダー、本文と一致して返されます。</target>
        </trans-unit>
        <trans-unit id="7a00d6812bf7a0419f2a6f9124c6b63f43006264" translate="yes" xml:space="preserve">
          <source>The function accepts a status either as an integer HTTP status or atom, such as &lt;code&gt;404&lt;/code&gt; or &lt;code&gt;:not_found&lt;/code&gt;. The list of allowed atoms is available in &lt;a href=&quot;../plug/plug.conn.status&quot;&gt;&lt;code&gt;Plug.Conn.Status&lt;/code&gt;&lt;/a&gt;. If an error is raised, a 3-tuple of the wrapped response is returned matching the status, headers, and body of the response:</source>
          <target state="translated">この関数は、 &lt;code&gt;404&lt;/code&gt; や &lt;code&gt;:not_found&lt;/code&gt; などの整数HTTPステータスまたはアトムとしてステータスを受け入れます。許可されるアトムのリストは、&lt;a href=&quot;../plug/plug.conn.status&quot;&gt; &lt;code&gt;Plug.Conn.Status&lt;/code&gt; にあり&lt;/a&gt;ます。エラーが発生した場合、応答のステータス、ヘッダー、および本文に一致する、ラップされた応答の3タプルが返されます。</target>
        </trans-unit>
        <trans-unit id="34f7c94fd7748f67cd09813bdd7706a2edb3046e" translate="yes" xml:space="preserve">
          <source>The function given to &lt;code&gt;run&lt;/code&gt; must return &lt;code&gt;{:ok, value}&lt;/code&gt; or &lt;code&gt;{:error, value}&lt;/code&gt; as its result. Returning an error will abort any further operations and make the whole multi fail.</source>
          <target state="translated">&lt;code&gt;run&lt;/code&gt; に指定された関数は、結果として &lt;code&gt;{:ok, value}&lt;/code&gt; または &lt;code&gt;{:error, value}&lt;/code&gt; を返す必要があります。エラーを返すと、それ以降の操作は中止され、マルチ全体が失敗します。</target>
        </trans-unit>
        <trans-unit id="2a481723c76058903ea9cbe576e12efab982d90c" translate="yes" xml:space="preserve">
          <source>The function must return a map of data matching the outlined Presence data structure, including the &lt;code&gt;:metas&lt;/code&gt; key, but can extend the map of information to include any additional information. For example:</source>
          <target state="translated">この関数は、 &lt;code&gt;:metas&lt;/code&gt; キーを含む、アウトライン化されたPresenceデータ構造に一致するデータのマップを返す必要がありますが、情報のマップを拡張して追加情報を含めることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="fa901f9a75974fd4d90e6889c130fadce04c365a" translate="yes" xml:space="preserve">
          <source>The function returns a tuple with the first element being a quoted reference to the connection and the second element being the compiled quoted pipeline.</source>
          <target state="translated">この関数は、最初の要素が接続への引用符付きの参照であり、2番目の要素がコンパイルされた引用符付きのパイプラインであるタプルを返します。</target>
        </trans-unit>
        <trans-unit id="153b2df483884d8b989e308df19cc7b9893a9689" translate="yes" xml:space="preserve">
          <source>The function should return either &lt;code&gt;{:ok, value}&lt;/code&gt; or &lt;code&gt;{:error, value}&lt;/code&gt;, and receives the repo as the first argument, and the changes so far as the second argument.</source>
          <target state="translated">この関数は &lt;code&gt;{:ok, value}&lt;/code&gt; または &lt;code&gt;{:error, value}&lt;/code&gt; いずれかを返し、最初の引数としてリポジトリを受け取り、2番目の引数までの変更を受け取ります。</target>
        </trans-unit>
        <trans-unit id="a67c783032e2a201537e306cf6f097d5365e66b6" translate="yes" xml:space="preserve">
          <source>The functionality provided by this module helps in performing &quot;origin&quot; header checks and ensuring only SSL connections are allowed.</source>
          <target state="translated">このモジュールが提供する機能は、&quot;オリジン &quot;ヘッダチェックを実行し、SSL接続のみが許可されるようにするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="d040f9e18e02bf1e9b7b5a6b1124e1c1c9357436" translate="yes" xml:space="preserve">
          <source>The functionality provided by this module helps in performing &amp;ldquo;origin&amp;rdquo; header checks and ensuring only SSL connections are allowed.</source>
          <target state="translated">このモジュールが提供する機能は、「origin」ヘッダーチェックを実行し、SSL接続のみが許可されるようにするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="f3caf5d490d3889e61dbe8db689ddbc1dc882729" translate="yes" xml:space="preserve">
          <source>The functions in this module can also be used for controller testing. While endpoint testing is preferred over controller testing as a controller often depends on the pipelines invoked in the router and before, unit testing controllers may be helpful in some situations.</source>
          <target state="translated">このモジュールの関数は、コントローラのテストにも使用できます。コントローラはルータ内で呼び出されるパイプラインに依存することが多いため、コントローラテストよりもエンドポイントテストの方が好まれますが、状況によってはユニットテスト用のコントローラが役に立つこともあります。</target>
        </trans-unit>
        <trans-unit id="5e080e3a5969a0dfe51e38a130fc2af62050c352" translate="yes" xml:space="preserve">
          <source>The functions in this module can also be used for controller testing. While endpoint testing is preferred over controller testing, especially since the controller in Phoenix plays an integration role between your domain and your views, unit testing controllers may be helpful in some situations.</source>
          <target state="translated">このモジュールの関数は、コントローラのテストにも使用できます。エンドポイントテストはコントローラテストよりも優先されますが、特にPhoenixのコントローラはドメインとビューの間で統合の役割を果たすので、ユニットテストのコントローラは状況によっては役に立つかもしれません。</target>
        </trans-unit>
        <trans-unit id="d3dd86f90d5374c8aba9a2543470a122fcff086c" translate="yes" xml:space="preserve">
          <source>The functions in this module can be used in three distinct scenarios:</source>
          <target state="translated">このモジュールの関数は、3つの異なるシナリオで使用することができます。</target>
        </trans-unit>
        <trans-unit id="ca241d49313e0782ffcc88432a8a2d858c13e8e9" translate="yes" xml:space="preserve">
          <source>The generated datetime_select can be customized at will by providing a builder option. Here is an example from EEx:</source>
          <target state="translated">生成された datetime_select は、ビルダーオプションを指定することで自由にカスタマイズすることができます。以下は EEx の例です。</target>
        </trans-unit>
        <trans-unit id="a05e320bee1a84e2ffca470cb7c31539b99e85c1" translate="yes" xml:space="preserve">
          <source>The generated files will contain:</source>
          <target state="translated">生成されたファイルには、以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="958104172477f9b5a43c314b73c9b38aabb7fb31" translate="yes" xml:space="preserve">
          <source>The generated migration can be skipped with &lt;code&gt;--no-migration&lt;/code&gt;.</source>
          <target state="translated">生成された移行は &lt;code&gt;--no-migration&lt;/code&gt; でスキップできます。</target>
        </trans-unit>
        <trans-unit id="2360bfab30a1d9a0770994aab3da68e5eb2150e6" translate="yes" xml:space="preserve">
          <source>The generated model will contain:</source>
          <target state="translated">生成されたモデルには、次のようなものが含まれます。</target>
        </trans-unit>
        <trans-unit id="c2fafd8b72db2fda76555b5c3231ac455bc8d91f" translate="yes" xml:space="preserve">
          <source>The generated request id will be in the format &quot;uq8hs30oafhj5vve8ji5pmp7mtopc08f&quot;.</source>
          <target state="translated">生成されるリクエストIDは「uq8hs30oafhj5vve8ji5pmp7mtopc08f」という形式になる。</target>
        </trans-unit>
        <trans-unit id="9e5668b35e826d6b7f7128c9281d2999702c5951" translate="yes" xml:space="preserve">
          <source>The generated request id will be in the format &amp;ldquo;uq8hs30oafhj5vve8ji5pmp7mtopc08f&amp;rdquo;.</source>
          <target state="translated">生成されたリクエストIDは「uq8hs30oafhj5vve8ji5pmp7mtopc08f」の形式になります。</target>
        </trans-unit>
        <trans-unit id="3f6f61987271b75470a17cf53dff2fe262f3c6a6" translate="yes" xml:space="preserve">
          <source>The generated resource will contain:</source>
          <target state="translated">生成されたリソースが含まれます。</target>
        </trans-unit>
        <trans-unit id="07a1ec291d930976c73c9d45dd66aa61e5c367bd" translate="yes" xml:space="preserve">
          <source>The generated route above will match on the path &lt;code&gt;&quot;/api/v1/pages/:id&quot;&lt;/code&gt; and will dispatch to &lt;code&gt;:show&lt;/code&gt; action in &lt;code&gt;API.V1.PageController&lt;/code&gt;. A named helper &lt;code&gt;api_v1_page_path&lt;/code&gt; will also be generated.</source>
          <target state="translated">生成されたルートは、上記のパスに一致します &lt;code&gt;&quot;/api/v1/pages/:id&quot;&lt;/code&gt; とに派遣する &lt;code&gt;:show&lt;/code&gt; でアクション &lt;code&gt;API.V1.PageController&lt;/code&gt; 。名前付きヘルパー &lt;code&gt;api_v1_page_path&lt;/code&gt; も生成されます。</target>
        </trans-unit>
        <trans-unit id="8eb6914d64c4e5b2458e4e1b429f8d5623fada37" translate="yes" xml:space="preserve">
          <source>The generated schema above will contain:</source>
          <target state="translated">上記の生成されたスキーマには、次のようなものが含まれます。</target>
        </trans-unit>
        <trans-unit id="b0fe9476efd56f82a1ea6f2439a7dfb5f439d397" translate="yes" xml:space="preserve">
          <source>The generator also supports &lt;code&gt;belongs_to&lt;/code&gt; associations via references:</source>
          <target state="translated">ジェネレーターは、参照を介して &lt;code&gt;belongs_to&lt;/code&gt; 関連付けもサポートします。</target>
        </trans-unit>
        <trans-unit id="a584765639065a0e41059878bfc54d658311e358" translate="yes" xml:space="preserve">
          <source>The generator also supports references, which we will properly associate the given column to the primary key column of the referenced table:</source>
          <target state="translated">ジェネレータは参照もサポートしており、指定された列を参照テーブルの主キー列に適切に関連付けます。</target>
        </trans-unit>
        <trans-unit id="8ae78460b27964100f540d3c51518f56de1ae5d6" translate="yes" xml:space="preserve">
          <source>The given &lt;code&gt;data&lt;/code&gt; may be either a changeset, a schema struct or a &lt;code&gt;{data, types}&lt;/code&gt; tuple. The second argument is a map of &lt;code&gt;params&lt;/code&gt; that are cast according to the type information from &lt;code&gt;data&lt;/code&gt;. &lt;code&gt;params&lt;/code&gt; is a map with string keys or a map with atom keys containing potentially invalid data.</source>
          <target state="translated">指定された &lt;code&gt;data&lt;/code&gt; は、チェンジセット、スキーマ構造体、または &lt;code&gt;{data, types}&lt;/code&gt; タプルのいずれかです。2番目の引数は、 &lt;code&gt;data&lt;/code&gt; からの型情報に従ってキャストされる &lt;code&gt;params&lt;/code&gt; のマップです。 &lt;code&gt;params&lt;/code&gt; は、文字列キーを含むマップ、または潜在的に無効なデータを含むアトムキーを含むマップです。</target>
        </trans-unit>
        <trans-unit id="ed7aeeaafe6c3bad4cfce08f957a5bf97bc013c4" translate="yes" xml:space="preserve">
          <source>The given &lt;code&gt;function&lt;/code&gt; is invoked with the change value only if there is a change for the given &lt;code&gt;key&lt;/code&gt;. Note that the value of the change can still be &lt;code&gt;nil&lt;/code&gt; (unless the field was marked as required on &lt;a href=&quot;#validate_required/3&quot;&gt;&lt;code&gt;validate_required/3&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">指定された &lt;code&gt;key&lt;/code&gt; 変更がある場合にのみ、指定された &lt;code&gt;function&lt;/code&gt; が変更値で呼び出されます。（&lt;a href=&quot;#validate_required/3&quot;&gt; &lt;code&gt;validate_required/3&lt;/code&gt; で&lt;/a&gt;フィールドが必須としてマークされていない限り）変更の値は &lt;code&gt;nil&lt;/code&gt; のままであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="12ae3f1712df00636f70321070eb45b1efc012c4" translate="yes" xml:space="preserve">
          <source>The given attributes are expected to be structured data. If you want to build an association with external data, such as a request parameters, you can use &lt;a href=&quot;ecto.changeset#cast/3&quot;&gt;&lt;code&gt;Ecto.Changeset.cast/3&lt;/code&gt;&lt;/a&gt; after &lt;a href=&quot;#build_assoc/3&quot;&gt;&lt;code&gt;build_assoc/3&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">指定された属性は、構造化データであることが期待されます。リクエストパラメータなどの外部データとの関連付けを構築する場合は、&lt;a href=&quot;ecto.changeset#cast/3&quot;&gt; &lt;code&gt;Ecto.Changeset.cast/3&lt;/code&gt; &lt;/a&gt;後に&lt;a href=&quot;#build_assoc/3&quot;&gt; &lt;code&gt;build_assoc/3&lt;/code&gt; &lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="c33d234c4ff95f48de07c57959d603389ff704eb" translate="yes" xml:space="preserve">
          <source>The given channel is joined in a separate process which is linked to the test process.</source>
          <target state="translated">与えられたチャネルは、テストプロセスにリンクされた別のプロセスで結合されます。</target>
        </trans-unit>
        <trans-unit id="d4c5415cdd429b8d05fbc81af9046db394117d84" translate="yes" xml:space="preserve">
          <source>The given definition:</source>
          <target state="translated">与えられた定義。</target>
        </trans-unit>
        <trans-unit id="7187a5e81ba59fd9a2b763b67226ecb68e6f3832" translate="yes" xml:space="preserve">
          <source>The given function is guaranteed to run inside the same transaction as the changeset operation for databases that do support transactions.</source>
          <target state="translated">与えられた関数は、トランザクションをサポートしているデータベースのチェンジセット操作と同じトランザクション内で実行されることが保証されています。</target>
        </trans-unit>
        <trans-unit id="2c8584e031d70f2ab97e4e82d41f8a6fb76ac929" translate="yes" xml:space="preserve">
          <source>The goal of this guide is to talk about Phoenix's request life-cycle. This guide will take a practical approach where we will learn by doing: we will add two new pages to our Phoenix project and comment on how the pieces fit together along the way.</source>
          <target state="translated">このガイドの目的は、Phoenix のリクエストのライフサイクルについて話すことです。このガイドでは、Phoenixプロジェクトに2つの新しいページを追加し、その過程でどのようにして作品が組み合わされていくのかをコメントするという、実践的なアプローチで学びます。</target>
        </trans-unit>
        <trans-unit id="3c29577b9a3f39ac89098a852612cb04bd74935b" translate="yes" xml:space="preserve">
          <source>The guides that you are currently looking at provide an overview of all parts that make Phoenix. Here is a rundown of what they provide:</source>
          <target state="translated">現在ご覧になっているガイドでは、フェニックスを作る全てのパーツの概要をご紹介しています。ここでは、彼らが提供するものの概要をご紹介します。</target>
        </trans-unit>
        <trans-unit id="4310f0789aac7f01d7f849f6e0aa96ec026f81a0" translate="yes" xml:space="preserve">
          <source>The helper function &lt;a href=&quot;#values/2&quot;&gt;&lt;code&gt;values/2&lt;/code&gt;&lt;/a&gt; returns the values for a given schema and field, which can be used in places like form drop-downs. For example, given the following schema:</source>
          <target state="translated">ヘルパー関数&lt;a href=&quot;#values/2&quot;&gt; &lt;code&gt;values/2&lt;/code&gt; &lt;/a&gt;は、フォームのドロップダウンなどの場所で使用できる、指定されたスキーマとフィールドの値を返します。たとえば、次のスキーマがあるとします。</target>
        </trans-unit>
        <trans-unit id="cef55b811dca93ddd51b8b1f7019f7e4229080fe" translate="yes" xml:space="preserve">
          <source>The hook can push events to the LiveView by using the &lt;code&gt;pushEvent&lt;/code&gt; function and receive a reply from the server via a &lt;code&gt;{:reply, map, socket}&lt;/code&gt; return value. The reply payload will be passed to the optional &lt;code&gt;pushEvent&lt;/code&gt; response callback.</source>
          <target state="translated">フックは、 &lt;code&gt;pushEvent&lt;/code&gt; 関数を使用してイベントをLiveViewにプッシュし、 &lt;code&gt;{:reply, map, socket}&lt;/code&gt; 戻り値を介してサーバーから応答を受信できます。応答ペイロードは、オプションの &lt;code&gt;pushEvent&lt;/code&gt; 応答コールバックに渡されます。</target>
        </trans-unit>
        <trans-unit id="a573a08337f6f0cf025ec9ae17d9092603c49c35" translate="yes" xml:space="preserve">
          <source>The implementation of this callback should invoke &lt;code&gt;fun&lt;/code&gt; with the value under &lt;code&gt;key&lt;/code&gt; in the passed structure &lt;code&gt;data&lt;/code&gt;, or with &lt;code&gt;nil&lt;/code&gt; if &lt;code&gt;key&lt;/code&gt; is not present in it. This function must return either &lt;code&gt;{get_value, update_value}&lt;/code&gt; or &lt;code&gt;:pop&lt;/code&gt;.</source>
          <target state="translated">このコールバックの実装は、呼び出す必要が &lt;code&gt;fun&lt;/code&gt; の下での値と &lt;code&gt;key&lt;/code&gt; 渡される構造の中 &lt;code&gt;data&lt;/code&gt; 、またはで &lt;code&gt;nil&lt;/code&gt; の場合 &lt;code&gt;key&lt;/code&gt; その中に存在していません。この関数は、 &lt;code&gt;{get_value, update_value}&lt;/code&gt; または &lt;code&gt;:pop&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="8d3c9aaa3512be3173ee88a5acfdcc5972b212b6" translate="yes" xml:space="preserve">
          <source>The instructions below will serve if you are installing the latest stable version from Hex. To start using LiveView, add one of the following dependencies to your &lt;code&gt;mix.exs&lt;/code&gt; and run &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Deps.Get.html&quot;&gt;&lt;code&gt;mix deps.get&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以下の手順は、Hexから最新の安定バージョンをインストールする場合に役立ちます。ライブビューの使用を開始するには、あなたに次の依存関係の1つを追加し &lt;code&gt;mix.exs&lt;/code&gt; し、実行&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Deps.Get.html&quot;&gt; &lt;code&gt;mix deps.get&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e46bc2ee246632c28439adb8036c4ec274b15b36" translate="yes" xml:space="preserve">
          <source>The internal infrastructure LiveView uses to keep track of stateful components is very lightweight. However, be aware that in order to provide change tracking and to send diffs over the wire, all of the components assigns are kept in memory - exactly as it is done in LiveViews themselves.</source>
          <target state="translated">LiveViewがステートフルコンポーネントを追跡するために使用する内部インフラストラクチャは非常に軽量です。しかし、変更の追跡を提供したり、差分を無線で送信したりするために、すべてのコンポーネントの割り当てはメモリに保持されることに注意してください-まさにLiveViews自身で行われているのと同じです。</target>
        </trans-unit>
        <trans-unit id="897fcb552f1ed96e5b37d174da2e32ad713e210e" translate="yes" xml:space="preserve">
          <source>The internal reference to the session in the store</source>
          <target state="translated">ストア内のセッションへの内部参照</target>
        </trans-unit>
        <trans-unit id="2b0fb080dc23dfd38867594f47439c384bd3fe00" translate="yes" xml:space="preserve">
          <source>The internal reference to the session in the store.</source>
          <target state="translated">ストア内のセッションへの内部参照。</target>
        </trans-unit>
        <trans-unit id="75c017e0096c8191807383c0ba159f9238866e0c" translate="yes" xml:space="preserve">
          <source>The issue is that we have no guarantees the channel has done processing our message after calling &lt;a href=&quot;#push/3&quot;&gt;&lt;code&gt;push/3&lt;/code&gt;&lt;/a&gt;. The best solution is to assert the channel sent us a reply before doing any other assertion. First change the channel to send replies:</source>
          <target state="translated">問題は、チャネルが&lt;a href=&quot;#push/3&quot;&gt; &lt;code&gt;push/3&lt;/code&gt; を&lt;/a&gt;呼び出した後にメッセージの処理を完了したことを保証できないことです。最善の解決策は、他のアサーションを行う前に、チャネルが返信を送信したことをアサートすることです。まず、チャネルを変更して返信を送信します。</target>
        </trans-unit>
        <trans-unit id="bf259ab2dd0402461d9104f43dc12dcf9a9184fd" translate="yes" xml:space="preserve">
          <source>The key can be a string or an atom, where atoms are automatically converted to strings.</source>
          <target state="translated">キーには文字列か原子を指定することができ、原子は自動的に文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="f429352c0b3be43a54afc592d7a8110f87f053dd" translate="yes" xml:space="preserve">
          <source>The key can be a string or an atom, where atoms are automatically converted to strings. Can only be invoked on unsent &lt;code&gt;conn&lt;/code&gt;s. Will raise otherwise.</source>
          <target state="translated">キーは文字列またはアトムであり、アトムは自動的に文字列に変換されます。未送信の &lt;code&gt;conn&lt;/code&gt; でのみ呼び出すことができます。そうでなければレイズします。</target>
        </trans-unit>
        <trans-unit id="b090269894ef022087b95988c4c1c9ea6c329869" translate="yes" xml:space="preserve">
          <source>The key is the media type, the value is a list of formats the media type can be identified with. For example, by using &quot;json-api&quot;, you will be able to use templates with extension &quot;index.json-api&quot; or to force a particular format in a given URL by sending &quot;?_format=json-api&quot;.</source>
          <target state="translated">キーはメディアタイプ、値はメディアタイプが識別できるフォーマットのリストです。例えば、&quot;json-api &quot;を使用することで、拡張子が &quot;index.json-api &quot;のテンプレートを使用したり、&quot;?_format=json-api &quot;を送信することで、指定されたURLで特定のフォーマットを強制的に使用することができるようになります。</target>
        </trans-unit>
        <trans-unit id="4edcd6a27ee607492b3ce414639ce14b3b1badad" translate="yes" xml:space="preserve">
          <source>The key is the media type, the value is a list of formats the media type can be identified with. For example, by using &amp;ldquo;json-api&amp;rdquo;, you will be able to use templates with extension &amp;ldquo;index.json-api&amp;rdquo; or to force a particular format in a given URL by sending &amp;ldquo;?_format=json-api&amp;rdquo;.</source>
          <target state="translated">キーはメディアタイプ、値はメディアタイプを識別できるフォーマットのリストです。たとえば、「json-api」を使用すると、「index.json-api」の拡張子を持つテンプレートを使用したり、「？_ format = json-api」を送信して特定のURLで特定のフォーマットを強制したりできます。</target>
        </trans-unit>
        <trans-unit id="dc9dd9b6fe649ecbe85232c591304bd2bcb8a124" translate="yes" xml:space="preserve">
          <source>The keys in the list are the names of fields, and the values are a validation associated with the field. A field may occur multiple times in the list.</source>
          <target state="translated">リストのキーはフィールドの名前で、値はフィールドに関連する検証です。1つのフィールドがリスト内で複数回出現することがあります。</target>
        </trans-unit>
        <trans-unit id="44118a922e99586055ff7e96b077e2626d08844b" translate="yes" xml:space="preserve">
          <source>The keys of the map will usually point to a resource ID. The value will contain a map with a &lt;code&gt;:metas&lt;/code&gt; key containing a list of metadata for each resource. Additionally, every metadata entry will contain a &lt;code&gt;:phx_ref&lt;/code&gt; key which can be used to uniquely identify metadata for a given key. In the event that the metadata was previously updated, a &lt;code&gt;:phx_ref_prev&lt;/code&gt; key will be present containing the previous &lt;code&gt;:phx_ref&lt;/code&gt; value.</source>
          <target state="translated">マップのキーは通常、リソースIDを指します。値には、各リソースのメタデータのリストを含む &lt;code&gt;:metas&lt;/code&gt; キーを持つマップが含まれます。さらに、すべてのメタデータエントリには、特定のキーのメタデータを一意に識別するために使用できる &lt;code&gt;:phx_ref&lt;/code&gt; キーが含まれます。メタデータが以前に更新された場合、以前の &lt;code&gt;:phx_ref&lt;/code&gt; 値を含む &lt;code&gt;:phx_ref_prev&lt;/code&gt; キーが存在します。</target>
        </trans-unit>
        <trans-unit id="cd07e57985bded643428c1ca83408a9f2015bf8e" translate="yes" xml:space="preserve">
          <source>The keyword options passed from the Schema's field macro into &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">スキーマのフィールドマクロから&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; に&lt;/a&gt;渡されるキーワードオプション</target>
        </trans-unit>
        <trans-unit id="3f06d5aeae7960e61046c9013e3025c273538aad" translate="yes" xml:space="preserve">
          <source>The keyword-based and pipe-based examples are equivalent. The downside of using macros is that the binding must be specified for every operation. However, since keyword-based and pipe-based examples are equivalent, the bindingless syntax also works for macros:</source>
          <target state="translated">キーワードベースの例とパイプベースの例は同等です。マクロを使用する場合の欠点は、操作のたびにバインディングを指定しなければならないことです。しかし、キーワードベースの例とパイプベースの例は同等なので、バインディングレス構文はマクロでも機能します。</target>
        </trans-unit>
        <trans-unit id="df5c4e04515501f7830b4c4bb804a178cc83618c" translate="yes" xml:space="preserve">
          <source>The last change is to open up &lt;code&gt;lib/hello_phoenix/repo.ex&lt;/code&gt; and make sure to set the &lt;code&gt;:adapter&lt;/code&gt; to &lt;code&gt;Ecto.Adapters.MyXQL&lt;/code&gt;.</source>
          <target state="translated">最後の変更は、 &lt;code&gt;lib/hello_phoenix/repo.ex&lt;/code&gt; を開き、 &lt;code&gt;:adapter&lt;/code&gt; を &lt;code&gt;Ecto.Adapters.MyXQL&lt;/code&gt; に設定することです。</target>
        </trans-unit>
        <trans-unit id="1d08d545f1b896c36da46b4bc90528258f9af83a" translate="yes" xml:space="preserve">
          <source>The last input with focus is restored (unless another input has received focus)</source>
          <target state="translated">フォーカスのある最後の入力が復元されます(他の入力がフォーカスを受けていない限り)。</target>
        </trans-unit>
        <trans-unit id="1f0f79f452d7d90593329a433992b7a7e7313371" translate="yes" xml:space="preserve">
          <source>The latter could also be bound to any &lt;code&gt;click&lt;/code&gt; event, but this way you can be sure your custom code is only executed when the code of &lt;code&gt;phoenix_html.js&lt;/code&gt; is run.</source>
          <target state="translated">後者は任意の &lt;code&gt;click&lt;/code&gt; イベントにバインドすることもできますが、これにより、 &lt;code&gt;phoenix_html.js&lt;/code&gt; のコードが実行されたときにのみカスタムコードが実行されるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="94ea7e500eb238ec30986cee0999cc9f163d089b" translate="yes" xml:space="preserve">
          <source>The layout given to &lt;code&gt;put_root_layout&lt;/code&gt; must use &lt;code&gt;&amp;lt;%= @inner_content %&amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;%= render(@view_module, @view_template, assigns) %&amp;gt;&lt;/code&gt;. It is typically very barebones, with mostly &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tags. For example:</source>
          <target state="translated">&lt;code&gt;put_root_layout&lt;/code&gt; に指定されたレイアウトでは、 &lt;code&gt;&amp;lt;%= render(@view_module, @view_template, assigns) %&amp;gt;&lt;/code&gt; ではなく &lt;code&gt;&amp;lt;%= @inner_content %&amp;gt;&lt;/code&gt; 使用する必要があります。これは通常、非常に必要最低限​​のものであり、ほとんどが &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; タグと&amp;lt;body&amp;gt;タグです。例えば：</target>
        </trans-unit>
        <trans-unit id="6744e96e72ecda721afea0237536fd66db392297" translate="yes" xml:space="preserve">
          <source>The layout must be a tuple, specifying the layout view and the layout name, or false. In case a previous layout is set, &lt;code&gt;put_layout&lt;/code&gt; also accepts the layout name to be given as a string or as an atom. If a string, it must contain the format. Passing an atom means the layout format will be found at rendering time, similar to the template in &lt;a href=&quot;#render/3&quot;&gt;&lt;code&gt;render/3&lt;/code&gt;&lt;/a&gt;. It can also be set to &lt;code&gt;false&lt;/code&gt;. In this case, no layout would be used.</source>
          <target state="translated">レイアウトは、レイアウトビューとレイアウト名を指定するタプルであるか、falseである必要があります。以前のレイアウトが設定されている場合、 &lt;code&gt;put_layout&lt;/code&gt; は、文字列またはアトムとして指定されるレイアウト名も受け入れます。文字列の場合は、フォーマットを含める必要があります。アトムを渡すことは、&lt;a href=&quot;#render/3&quot;&gt; &lt;code&gt;render/3&lt;/code&gt; の&lt;/a&gt;テンプレートと同様に、レイアウト形式がレンダリング時に見つかることを意味します。 &lt;code&gt;false&lt;/code&gt; に設定することもできます。この場合、レイアウトは使用されません。</target>
        </trans-unit>
        <trans-unit id="e7d67a564b0265425038298d81b7c53608deaa1e" translate="yes" xml:space="preserve">
          <source>The lib/hello directory</source>
          <target state="translated">lib/hello ディレクトリ</target>
        </trans-unit>
        <trans-unit id="c5d2fa78d75d59a854f8844b73dfc72a968b6f84" translate="yes" xml:space="preserve">
          <source>The lib/hello_web directory</source>
          <target state="translated">lib/hello_web ディレクトリ</target>
        </trans-unit>
        <trans-unit id="92154a1db347f64239f68f87cebd039161ceecac" translate="yes" xml:space="preserve">
          <source>The life-cycle of a LiveView as outlined in the &lt;a href=&quot;phoenix.liveview&quot;&gt;&lt;code&gt;Phoenix.LiveView&lt;/code&gt;&lt;/a&gt; docs details how a view starts as a stateless HTML render in a disconnected socket state. Once the browser receives the HTML, it connects to the server and a new LiveView process is started, remounted in a connected socket state, and the view continues statefully. The LiveView test functions support testing both disconnected and connected mounts separately, for example:</source>
          <target state="translated">&lt;a href=&quot;phoenix.liveview&quot;&gt; &lt;code&gt;Phoenix.LiveView&lt;/code&gt; の&lt;/a&gt;ドキュメントで概説されているLiveViewのライフサイクルでは、切断されたソケット状態でステートレスHTMLレンダリングとしてビューが開始される方法について詳しく説明しています。ブラウザがHTMLを受信すると、サーバーに接続し、新しいLiveViewプロセスが開始され、接続されたソケット状態で再マウントされ、ビューはステートフルに続行されます。LiveViewテスト機能は、切断されたマウントと接続されたマウントの両方を別々にテストすることをサポートします。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="477d068a247e238de404418e92a5a9b81e34e717" translate="yes" xml:space="preserve">
          <source>The list of dynamics is always a list of iodatas or components, as we don't perform change tracking inside the comprehensions themselves. Similarly, comprehensions do not have fingerprints because they are only optimized at the root, so conditional evaluation, as the one seen in rendering, is not possible. The only possible outcome for a dynamic field that returns a comprehension is &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">強弱のリストは常にiodataまたはコンポーネントのリストです。これは、内包表記自体の内部で変更の追跡を実行しないためです。同様に、理解にはフィンガープリントがありません。これは、ルートでのみ最適化されているため、レンダリングで見られるような条件付き評価は不可能です。理解を返す動的フィールドで考えられる唯一の結果は &lt;code&gt;nil&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="30777b456b3f6e3c3a181cabf70cf5ee328a6f81" translate="yes" xml:space="preserve">
          <source>The list of hostnames, if none are specified, defaults to:</source>
          <target state="translated">ホスト名のリストは、何も指定されていない場合はデフォルトで指定されます。</target>
        </trans-unit>
        <trans-unit id="9089ed404a90b7ca8405732095979a8fb2093289" translate="yes" xml:space="preserve">
          <source>The list of supported values and their behaviour is described in &lt;a href=&quot;#put_assoc/4&quot;&gt;&lt;code&gt;put_assoc/4&lt;/code&gt;&lt;/a&gt;. If the given value is not any of values listed there, it will raise.</source>
          <target state="translated">サポートされている値とその動作のリストは、&lt;a href=&quot;#put_assoc/4&quot;&gt; &lt;code&gt;put_assoc/4&lt;/code&gt; で&lt;/a&gt;説明されています。与えられた値がそこにリストされている値のいずれでもない場合、それが発生します。</target>
        </trans-unit>
        <trans-unit id="1bf6687a8673fe4a0d29060ff11510670a6cb046" translate="yes" xml:space="preserve">
          <source>The location of the web files (LiveView's, views, templates, etc) in an umbrella application will vary based on the &lt;code&gt;:context_app&lt;/code&gt; config located in your applications &lt;code&gt;:generators&lt;/code&gt; configuration. When set, the Phoenix generators will generate web files directly in your lib and test folders since the application is assumed to be isolated to web specific functionality. If &lt;code&gt;:context_app&lt;/code&gt; is not set, the generators will place web related lib and test files in a &lt;code&gt;web/&lt;/code&gt; directory since the application is assumed to be handling both web and domain specific functionality. Example configuration:</source>
          <target state="translated">アンブレラアプリケーション内のWebファイル（LiveView、ビュー、テンプレートなど）の場所は、アプリケーションの &lt;code&gt;:generators&lt;/code&gt; 構成にある &lt;code&gt;:context_app&lt;/code&gt; 構成によって異なります。設定すると、アプリケーションはWeb固有の機能に分離されていると想定されるため、Phoenixジェネレーターはlibフォルダーとtestフォルダーに直接Webファイルを生成します。 &lt;code&gt;:context_app&lt;/code&gt; が設定されていない場合、アプリケーションはWeb固有の機能とドメイン固有の機能の両方を処理していると想定されるため、ジェネレーターはWeb関連のlibファイルとテストファイルを &lt;code&gt;web/&lt;/code&gt; ディレクトリに配置します。構成例：</target>
        </trans-unit>
        <trans-unit id="ba10fe778e8a0ac2bdeed5623f9f0c72f2e97b50" translate="yes" xml:space="preserve">
          <source>The location of the web files (controllers, views, templates, etc) in an umbrella application will vary based on the &lt;code&gt;:context_app&lt;/code&gt; config located in your applications &lt;code&gt;:generators&lt;/code&gt; configuration. When set, the Phoenix generators will generate web files directly in your lib and test folders since the application is assumed to be isolated to web specific functionality. If &lt;code&gt;:context_app&lt;/code&gt; is not set, the generators will place web related lib and test files in a &lt;code&gt;web/&lt;/code&gt; directory since the application is assumed to be handling both web and domain specific functionality. Example configuration:</source>
          <target state="translated">アンブレラアプリケーション内のWebファイル（コントローラー、ビュー、テンプレートなど）の場所は、アプリケーションの &lt;code&gt;:generators&lt;/code&gt; 構成にある &lt;code&gt;:context_app&lt;/code&gt; 構成によって異なります。設定すると、アプリケーションはWeb固有の機能に分離されていると想定されるため、Phoenixジェネレーターはlibおよびtestフォルダーに直接Webファイルを生成します。 &lt;code&gt;:context_app&lt;/code&gt; が設定されていない場合、アプリケーションはWebとドメイン固有の機能の両方を処理すると見なされるため、ジェネレーターはweb関連のlibファイルとテストファイルを &lt;code&gt;web/&lt;/code&gt; ディレクトリに配置します。設定例：</target>
        </trans-unit>
        <trans-unit id="9838c2015d6a31f43230056050bd48b08264c2d5" translate="yes" xml:space="preserve">
          <source>The log line for each request contains the specific route for that request. This is due to specifying the &lt;code&gt;:tags&lt;/code&gt; option for the summary metric, which takes care of our first requirement; we can use &lt;code&gt;:tags&lt;/code&gt; to group metrics by route. Note that reporters will necessarily handle tags differently depending on the underlying service in use.</source>
          <target state="translated">各リクエストのログ行には、そのリクエストの特定のルートが含まれています。これは、最初の要件を処理するサマリーメトリックに &lt;code&gt;:tags&lt;/code&gt; オプションを指定するためです。 &lt;code&gt;:tags&lt;/code&gt; を使用して、ルートごとにメトリックをグループ化できます。レポーターは、使用中の基盤となるサービスに応じて、必然的にタグの処理が異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5054ea19f1c0872ef56ffb5ac8d9cbaa2ee98017" translate="yes" xml:space="preserve">
          <source>The logger call won&amp;rsquo;t be removed at compile time as custom level is given.</source>
          <target state="translated">カスタムレベルが指定されているため、ロガー呼び出しはコンパイル時に削除されません。</target>
        </trans-unit>
        <trans-unit id="282bfec61ed3e63c6a621589fc9ff184bc2a5dc3" translate="yes" xml:space="preserve">
          <source>The long poll is configurable in your socket:</source>
          <target state="translated">長いポールはソケットで設定可能です。</target>
        </trans-unit>
        <trans-unit id="df55f8f757b374fd6d2aa5a71db086c2cfcd7c1d" translate="yes" xml:space="preserve">
          <source>The main responsibility of a view is to render a template.</source>
          <target state="translated">ビューの主な役割はテンプレートをレンダリングすることです。</target>
        </trans-unit>
        <trans-unit id="c3ad4277ebaf63c095045d7d65ae5d290329b067" translate="yes" xml:space="preserve">
          <source>The map type</source>
          <target state="translated">地図の種類</target>
        </trans-unit>
        <trans-unit id="fd10459a12af6703afd7079ef61598c3879b0473" translate="yes" xml:space="preserve">
          <source>The map type allows developers to store an Elixir map directly in the database:</source>
          <target state="translated">このマップタイプを使用すると、開発者は Elixir マップをデータベースに直接保存することができます。</target>
        </trans-unit>
        <trans-unit id="080be8664031b1a1bb94955949d3616301947b14" translate="yes" xml:space="preserve">
          <source>The mechanism for passing the token to the client is typically through a cookie, a JSON response body, or HTTP header. For now, assume the client has received a token it can use to validate requests for protected resources.</source>
          <target state="translated">トークンをクライアントに渡す仕組みは、通常、クッキー、JSON レスポンスボディ、HTTP ヘッダーを介して行われます。ここでは、クライアントが保護されたリソースへのリクエストを検証するために使用できるトークンを受け取ったと仮定します。</target>
        </trans-unit>
        <trans-unit id="eb58fc9777d3607a5fbb10fc1f79ea8d98ec0269" translate="yes" xml:space="preserve">
          <source>The message format requires the following keys:</source>
          <target state="translated">メッセージのフォーマットには、以下のキーが必要です。</target>
        </trans-unit>
        <trans-unit id="52f5b43827ed9d61c35f578531a7d764f7e53199" translate="yes" xml:space="preserve">
          <source>The message is a term. It must return one of:</source>
          <target state="translated">メッセージは用語です。のいずれかを返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="b0b210dad451da94f2501a9d8d7e918aa3958400" translate="yes" xml:space="preserve">
          <source>The message is represented as &lt;code&gt;{payload, options}&lt;/code&gt;. It must return one of:</source>
          <target state="translated">メッセージは &lt;code&gt;{payload, options}&lt;/code&gt; として表されます。次のいずれかを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="8368bb195a36e75b24e3aa2abd88acdf1b5b819f" translate="yes" xml:space="preserve">
          <source>The metadata returned by the adapter &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">アダプター&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;によって返されるメタデータ</target>
        </trans-unit>
        <trans-unit id="7b2acf0c1be2b4d18996e01c7970b3c30cc534ab" translate="yes" xml:space="preserve">
          <source>The metadata returned by the adapter &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">アダプター&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;によって返されるメタデータ。</target>
        </trans-unit>
        <trans-unit id="70bfd62abd8739763f40ffef575496a5c549d630" translate="yes" xml:space="preserve">
          <source>The minimum value for &lt;code&gt;length&lt;/code&gt; is 32.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; の最小値は32です。</target>
        </trans-unit>
        <trans-unit id="9634db4fa76e01e90a42b4c5e5f87e4ad4910fd5" translate="yes" xml:space="preserve">
          <source>The name of each operation does not have to be an atom. This can be particularly useful when you wish to update a collection of changesets at once, and track their errors individually:</source>
          <target state="translated">各操作の名前はアトムである必要はありません。これは、チェンジセットのコレクションを一度に更新して、そのエラーを個別に追跡したい場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="0a3d293ea6bec7e5c5b00485c524e67b073803fb" translate="yes" xml:space="preserve">
          <source>The name used in assigns is determined from the view. For example the &lt;code&gt;PageView&lt;/code&gt; will use &lt;code&gt;%{page: page}&lt;/code&gt; and the &lt;code&gt;AuthorView&lt;/code&gt; will use &lt;code&gt;%{author: author}&lt;/code&gt;. This can be overridden with the &lt;code&gt;as&lt;/code&gt; option. Let's assume that the author view uses &lt;code&gt;%{writer: writer}&lt;/code&gt; instead of &lt;code&gt;%{author: author}&lt;/code&gt;:</source>
          <target state="translated">割り当てで使用される名前は、ビューから決定されます。たとえば、 &lt;code&gt;PageView&lt;/code&gt; は &lt;code&gt;%{page: page}&lt;/code&gt; を使用し、 &lt;code&gt;AuthorView&lt;/code&gt; は &lt;code&gt;%{author: author}&lt;/code&gt; ます。これは、 &lt;code&gt;as&lt;/code&gt; オプションでオーバーライドできます。著者ビューが &lt;code&gt;%{author: author}&lt;/code&gt; 代わりに％{ &lt;code&gt;%{writer: writer}&lt;/code&gt; 使用すると仮定しましょう：</target>
        </trans-unit>
        <trans-unit id="8eacf623a28c1145f1b59317f4cbac89d904671a" translate="yes" xml:space="preserve">
          <source>The named helper can also be customized with the &lt;code&gt;:as&lt;/code&gt; option. Given the route:</source>
          <target state="translated">名前付きヘルパーは、 &lt;code&gt;:as&lt;/code&gt; オプションでカスタマイズすることもできます。与えられたルート：</target>
        </trans-unit>
        <trans-unit id="ee9f556bb40887ceb71d128fe3a1686d36cd09f5" translate="yes" xml:space="preserve">
          <source>The only argument is the module name of the Presence tracker, which defaults to Presence.</source>
          <target state="translated">引数は Presence トラッカーのモジュール名のみで、デフォルトは Presence です。</target>
        </trans-unit>
        <trans-unit id="dd6daf265bd0ac4e906fd4bdd897c5919c6282da" translate="yes" xml:space="preserve">
          <source>The only downside is that it will show up as a fragment when inspecting the Elixir query. Other than that, it should be equivalent to a built-in Ecto query function.</source>
          <target state="translated">唯一の欠点は、Elixirのクエリを検査するときにフラグメントとして表示されることです。それ以外は、組み込みのEctoクエリ関数と同等であるべきです。</target>
        </trans-unit>
        <trans-unit id="4f0266dcf90fe67afe6ef36bb73cebc07fd00eac" translate="yes" xml:space="preserve">
          <source>The options are passed to both &lt;code&gt;:http&lt;/code&gt; and &lt;code&gt;:https&lt;/code&gt; keys in the endpoint configuration. However, once you pass your custom dispatch options, you will need to manually wire all Phoenix endpoints, including the socket transports.</source>
          <target state="translated">オプションは、エンドポイント構成の &lt;code&gt;:http&lt;/code&gt; キーと &lt;code&gt;:https&lt;/code&gt; キーの両方に渡されます。ただし、カスタムディスパッチオプションを渡したら、ソケットトランスポートを含むすべてのフェニックスエンドポイントを手動で配線する必要があります。</target>
        </trans-unit>
        <trans-unit id="81006dc93621cf7c03e17d32fa7ba38ff44285bc" translate="yes" xml:space="preserve">
          <source>The options are passed to both &lt;code&gt;:http&lt;/code&gt; and &lt;code&gt;:https&lt;/code&gt; keys in the endpoint configuration. However, once you pass your custom dispatch options, you will need to manually wire the Phoenix endpoint by adding the following rule:</source>
          <target state="translated">オプションは、エンドポイント構成の &lt;code&gt;:http&lt;/code&gt; キーと &lt;code&gt;:https&lt;/code&gt; キーの両方に渡されます。ただし、カスタムディスパッチオプションを渡したら、次のルールを追加して、Phoenixエンドポイントを手動で配線する必要があります。</target>
        </trans-unit>
        <trans-unit id="f34a63fc2945e1d41d9507823f6312b0d54d5e85" translate="yes" xml:space="preserve">
          <source>The options are the same options given to &lt;code&gt;form_for/4&lt;/code&gt;. It can be used by implementations to configure their behaviour and it must be stored in the underlying struct, with any custom field removed.</source>
          <target state="translated">オプションは &lt;code&gt;form_for/4&lt;/code&gt; に指定されたものと同じです。これは、実装で動作を構成するために使用でき、カスタムフィールドを削除して、基になる構造体に格納する必要があります。</target>
        </trans-unit>
        <trans-unit id="e94a4b1ffacdefb101fda0c3d483575fb46108fe" translate="yes" xml:space="preserve">
          <source>The options are the same options given to &lt;code&gt;inputs_for/4&lt;/code&gt;. It can be used by implementations to configure their behaviour and it must be stored in the underlying struct, with any custom field removed.</source>
          <target state="translated">オプションは、 &lt;code&gt;inputs_for/4&lt;/code&gt; 指定されたものと同じです。これは、実装で動作を構成するために使用でき、カスタムフィールドを削除して、基になる構造体に格納する必要があります。</target>
        </trans-unit>
        <trans-unit id="cbbc72dee649cfd3da9099e3aaa4dd8de76df598" translate="yes" xml:space="preserve">
          <source>The options returned from this function will be given to &lt;a href=&quot;#get/3&quot;&gt;&lt;code&gt;get/3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#put/4&quot;&gt;&lt;code&gt;put/4&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#delete/3&quot;&gt;&lt;code&gt;delete/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数から返されるオプションは、&lt;a href=&quot;#get/3&quot;&gt; &lt;code&gt;get/3&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#put/4&quot;&gt; &lt;code&gt;put/4&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#delete/3&quot;&gt; &lt;code&gt;delete/3&lt;/code&gt; に&lt;/a&gt;与えられます。</target>
        </trans-unit>
        <trans-unit id="d384613558e77407526f0c5fbfadcc4a059844a9" translate="yes" xml:space="preserve">
          <source>The options returned from this function will be given to &lt;code&gt;get/3&lt;/code&gt;, &lt;code&gt;put/4&lt;/code&gt; and &lt;code&gt;delete/3&lt;/code&gt;.</source>
          <target state="translated">この関数から返されるオプションは、 &lt;code&gt;get/3&lt;/code&gt; 、 &lt;code&gt;put/4&lt;/code&gt; 、および &lt;code&gt;delete/3&lt;/code&gt; に与えられます。</target>
        </trans-unit>
        <trans-unit id="f06bf866fed12855453f8d5f135a5f4e72431100" translate="yes" xml:space="preserve">
          <source>The other fields are merged with the following criteria:</source>
          <target state="translated">その他のフィールドは、以下の基準でマージされます。</target>
        </trans-unit>
        <trans-unit id="3462b00b6bda12e1014b4b6dc443fa44ae87853c" translate="yes" xml:space="preserve">
          <source>The other validators simply take a value:</source>
          <target state="translated">他のバリデータは単に値を受け取ります。</target>
        </trans-unit>
        <trans-unit id="161c387bc2cd3fea40fa9d1d48103ca6f80cdb4b" translate="yes" xml:space="preserve">
          <source>The output folder will contain:</source>
          <target state="translated">出力フォルダに格納されます。</target>
        </trans-unit>
        <trans-unit id="9dc286e9190cffa49c47ed0399b1d38337f37d16" translate="yes" xml:space="preserve">
          <source>The package does not perform any aggregation of the measurements itself. Instead, it provides a reporter with the Telemetry event-as-measurement definition and the reporter uses that definition to perform aggregations and report them.</source>
          <target state="translated">このパッケージは、測定値自体の集計を行いません。その代わりに、レポーターに Telemetry event-as-measurements の定義を提供し、レポーターはその定義を使用して集計を実行し、それらをレポートします。</target>
        </trans-unit>
        <trans-unit id="bd020c2783347fc6755fe582b2d5c9e69b5635df" translate="yes" xml:space="preserve">
          <source>The page we are going to build will simply say &quot;Hello World, from Phoenix!&quot; when we point our browser to &lt;a href=&quot;http://localhost:4000/hello&quot;&gt;http://localhost:4000/hello&lt;/a&gt;.</source>
          <target state="translated">これから作成するページには、「Hello World、fromPhoenix！」とだけ表示されます。ブラウザで&lt;a href=&quot;http://localhost:4000/hello&quot;&gt;http：// localhost：4000 / helloを指定すると&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7b7216cd22ee3c8f81da71805d223b6947bf81bf" translate="yes" xml:space="preserve">
          <source>The parameters for the ParameterizedType</source>
          <target state="translated">ParameterizedType のパラメータ</target>
        </trans-unit>
        <trans-unit id="f4662009e29483d0cc5077d2eabc424cdf07a6d6" translate="yes" xml:space="preserve">
          <source>The parameters for the given association will be retrieved from &lt;code&gt;changeset.params&lt;/code&gt;. Those parameters are expected to be a map with attributes, similar to the ones passed to &lt;a href=&quot;#cast/4&quot;&gt;&lt;code&gt;cast/4&lt;/code&gt;&lt;/a&gt;. Once parameters are retrieved, &lt;a href=&quot;#cast_assoc/3&quot;&gt;&lt;code&gt;cast_assoc/3&lt;/code&gt;&lt;/a&gt; will match those parameters with the associations already in the changeset record.</source>
          <target state="translated">指定された関連付けのパラメータは、 &lt;code&gt;changeset.params&lt;/code&gt; から取得されます。これらのパラメーターは、&lt;a href=&quot;#cast/4&quot;&gt; &lt;code&gt;cast/4&lt;/code&gt; に&lt;/a&gt;渡されるものと同様の属性を持つマップであることが期待されています。パラメータが取得されると、&lt;a href=&quot;#cast_assoc/3&quot;&gt; &lt;code&gt;cast_assoc/3&lt;/code&gt; &lt;/a&gt;はそれらのパラメータを、変更セットレコードに既にある関連付けと照合します。</target>
        </trans-unit>
        <trans-unit id="f162dc3980f9534481973a5e2f3a8df458b6c531" translate="yes" xml:space="preserve">
          <source>The parameters for the given embed will be retrieved from &lt;code&gt;changeset.params&lt;/code&gt;. Those parameters are expected to be a map with attributes, similar to the ones passed to &lt;a href=&quot;#cast/4&quot;&gt;&lt;code&gt;cast/4&lt;/code&gt;&lt;/a&gt;. Once parameters are retrieved, &lt;a href=&quot;#cast_embed/3&quot;&gt;&lt;code&gt;cast_embed/3&lt;/code&gt;&lt;/a&gt; will match those parameters with the embeds already in the changeset record. See &lt;a href=&quot;#cast_assoc/3&quot;&gt;&lt;code&gt;cast_assoc/3&lt;/code&gt;&lt;/a&gt; for an example of working with casts and associations which would also apply for embeds.</source>
          <target state="translated">指定された埋め込みのパラメータは、 &lt;code&gt;changeset.params&lt;/code&gt; から取得されます。これらのパラメーターは、&lt;a href=&quot;#cast/4&quot;&gt; &lt;code&gt;cast/4&lt;/code&gt; に&lt;/a&gt;渡されるものと同様の属性を持つマップであることが期待されています。パラメーターが取得されると、&lt;a href=&quot;#cast_embed/3&quot;&gt; &lt;code&gt;cast_embed/3&lt;/code&gt; &lt;/a&gt;はそれらのパラメーターを、チェンジセットレコードに既にある埋め込みと照合します。埋め込みにも適用されるキャストと関連付けの使用例については、&lt;a href=&quot;#cast_assoc/3&quot;&gt; &lt;code&gt;cast_assoc/3&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6ccf766b41fe567d6380527225e5d0d0c1950285" translate="yes" xml:space="preserve">
          <source>The path helpers now return what we want them to as well. Run &lt;code&gt;iex -S mix&lt;/code&gt; and give it a try yourself.</source>
          <target state="translated">パスヘルパーは、必要なものも返すようになりました。 &lt;code&gt;iex -S mix&lt;/code&gt; を実行して、自分で試してみてください。</target>
        </trans-unit>
        <trans-unit id="e6d9d95ae05eb4ab7374f78f148d8ced664f6b15" translate="yes" xml:space="preserve">
          <source>The path will be retrieved from the currently requested path via &lt;a href=&quot;#current_path/1&quot;&gt;&lt;code&gt;current_path/1&lt;/code&gt;&lt;/a&gt;. The scheme, host and others will be received from the URL configuration in your Phoenix endpoint. The reason we don't use the host and scheme information in the request is because most applications are behind proxies and the host and scheme may not actually reflect the host and scheme accessed by the client. If you want to access the url precisely as requested by the client, see &lt;a href=&quot;../plug/plug.conn#request_url/1&quot;&gt;&lt;code&gt;Plug.Conn.request_url/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">パスは、&lt;a href=&quot;#current_path/1&quot;&gt; &lt;code&gt;current_path/1&lt;/code&gt; を&lt;/a&gt;介して現在要求されているパスから取得されます。スキーム、ホストなどは、PhoenixエンドポイントのURL構成から受信されます。リクエストでホストとスキームの情報を使用しない理由は、ほとんどのアプリケーションがプロキシの背後にあり、ホストとスキームが実際にはクライアントがアクセスするホストとスキームを反映していない可能性があるためです。クライアントの要求どおりに正確にURLにアクセスする場合は、&lt;a href=&quot;../plug/plug.conn#request_url/1&quot;&gt; &lt;code&gt;Plug.Conn.request_url/1&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a51d7ff1518f2fc26effb50af9e146b994aed2db" translate="yes" xml:space="preserve">
          <source>The paths to the user facing reviews would look like a standard resource.</source>
          <target state="translated">ユーザーが直面するレビューへのパスは、標準的なリソースのように見えるでしょう。</target>
        </trans-unit>
        <trans-unit id="8461b08dd0b39472d6e7cab05d0df7c89d7a56a5" translate="yes" xml:space="preserve">
          <source>The plug specification.</source>
          <target state="translated">プラグの仕様です。</target>
        </trans-unit>
        <trans-unit id="43d162b21236b659adf8d5bf3af141f3266eea3d" translate="yes" xml:space="preserve">
          <source>The preferred form is to use &lt;code&gt;:from&lt;/code&gt; with an atom or tuple, since it will make your application independent from the starting directory. For example, if you pass:</source>
          <target state="translated">&lt;code&gt;:from&lt;/code&gt; をアトムまたはタプルで使用することをお勧めします。これにより、アプリケーションが開始ディレクトリから独立します。たとえば、次のように渡すと、</target>
        </trans-unit>
        <trans-unit id="50998ebe5bad0757359a407f8ec8b122a3958b71" translate="yes" xml:space="preserve">
          <source>The prefixes set in the query will be preserved when loading data.</source>
          <target state="translated">クエリで設定された接頭辞は、データをロードする際に保存されます。</target>
        </trans-unit>
        <trans-unit id="867bac9d8d8d9b0a2e78aebeddd2b3b36f5a8853" translate="yes" xml:space="preserve">
          <source>The prerequisites for running an HTTPS server with Plug include:</source>
          <target state="translated">PlugでHTTPSサーバを動かすための前提条件としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="1526ebdce848190098bcbfdfb625b2e2ecb877e8" translate="yes" xml:space="preserve">
          <source>The presence information is returned as a map with presences grouped by key, cast as a string, and accumulated metadata, with the following form:</source>
          <target state="translated">プレゼンス情報は、プレゼンスをキーでグループ化し、文字列としてキャストし、メタデータを蓄積したマップとして、以下のような形式で返されます。</target>
        </trans-unit>
        <trans-unit id="8e1834c7ca0296001b89ac9864e746de523a9361" translate="yes" xml:space="preserve">
          <source>The primary key will be automatically included in &lt;code&gt;returning&lt;/code&gt; if the field has type &lt;code&gt;:id&lt;/code&gt; or &lt;code&gt;:binary_id&lt;/code&gt; and no value was set by the developer or none was autogenerated by the adapter.</source>
          <target state="translated">フィールドのタイプが &lt;code&gt;:id&lt;/code&gt; または &lt;code&gt;:binary_id&lt;/code&gt; であり、開発者が値を設定しなかった場合、またはアダプターによって値が自動生成されなかった場合、主キーは自動的に &lt;code&gt;returning&lt;/code&gt; れます。</target>
        </trans-unit>
        <trans-unit id="f2afcc11c269b0c54b1b7ac0efcd7b569f223f2f" translate="yes" xml:space="preserve">
          <source>The primitive types are:</source>
          <target state="translated">原始的な型は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="5475cd442271dc875207326bb4064eeb96befb25" translate="yes" xml:space="preserve">
          <source>The problem with this approach is that it breaks references in the database. You can&amp;rsquo;t use foreign keys and it is very inefficient, both in terms of query time and storage.</source>
          <target state="translated">このアプローチの問題は、データベース内の参照が壊れることです。外部キーは使用できず、クエリ時間とストレージの両方の面で非常に非効率的です。</target>
        </trans-unit>
        <trans-unit id="7a3a4c7f6a78c9326c8ef25ce0f6c69a3f78f0d2" translate="yes" xml:space="preserve">
          <source>The problem with this approach is that it breaks references in the database. You can't use foreign keys and it is very inefficient, both in terms of query time and storage.</source>
          <target state="translated">このアプローチの問題点は、データベース内の参照が壊れてしまうことです。外部キーを使用することはできませんし、クエリ時間とストレージの両方の面で非常に非効率的です。</target>
        </trans-unit>
        <trans-unit id="8d89d344e6a03d17bab84b370769a6045fb37ec3" translate="yes" xml:space="preserve">
          <source>The public fields are:</source>
          <target state="translated">公開されているフィールドは</target>
        </trans-unit>
        <trans-unit id="df908dd7366c676a05daf0e41f416b8dbf39971e" translate="yes" xml:space="preserve">
          <source>The query above will select all posts with category &quot;fresh and new&quot;, order by the most recently published, and return Post structs with only the id, title and body fields set. It is equivalent to:</source>
          <target state="translated">上記のクエリは、カテゴリが &quot;fresh and new &quot;のすべての投稿を選択し、最近公開されたものから順に、id、title、bodyフィールドのみが設定された投稿構造体を返します。と等価です。</target>
        </trans-unit>
        <trans-unit id="eff2eebe90fad772cf88b9e84a74f0fcaf7b64c1" translate="yes" xml:space="preserve">
          <source>The query above will select all posts with category &amp;ldquo;fresh and new&amp;rdquo;, order by the most recently published, and return Post structs with only the id, title and body fields set. It is equivalent to:</source>
          <target state="translated">上記のクエリは、カテゴリが「新鮮で新しい」であるすべての投稿を選択し、最近発行された順に並べ替え、ID、タイトル、本文フィールドのみが設定されたPost構造体を返します。これは次と同等です。</target>
        </trans-unit>
        <trans-unit id="95ca27e8b5eba197d23e18f17cf9ec5d46b73887" translate="yes" xml:space="preserve">
          <source>The query can be also rewritten as:</source>
          <target state="translated">クエリは次のように書き換えることもできます。</target>
        </trans-unit>
        <trans-unit id="e0868e0ab6d1da07933f0f38d5ca3b2c0b98ed62" translate="yes" xml:space="preserve">
          <source>The query given to preload may also preload its own associations.</source>
          <target state="translated">preloadに与えられたクエリは、それ自身のアソシエーションをプリロードすることもできます。</target>
        </trans-unit>
        <trans-unit id="5f6733486c5b72fc457e7eabc6d95cf5b2c0075a" translate="yes" xml:space="preserve">
          <source>The query ordering will be automatically reversed, with ASC columns becoming DESC columns (and vice-versa) and limit is set to 1. If there is no ordering, the query will be automatically ordered decreasingly by primary key.</source>
          <target state="translated">クエリの順序は自動的に逆になり、ASCカラムがDESCカラムになり(その逆もあります)、制限値は1に設定されます。 順序がない場合、クエリは自動的に主キーの数が減るように順序付けられます。</target>
        </trans-unit>
        <trans-unit id="0bac158f3c93347932c98c42dee10fb98d800771" translate="yes" xml:space="preserve">
          <source>The query prefix may be set either for the whole query or on each individual &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;join&lt;/code&gt; expression. If a &lt;code&gt;prefix&lt;/code&gt; is not given to a &lt;code&gt;from&lt;/code&gt; or a &lt;code&gt;join&lt;/code&gt;, the prefix of the schema given to the &lt;code&gt;from&lt;/code&gt; or &lt;code&gt;join&lt;/code&gt; is used. The query prefix is used only if none of the above are declared.</source>
          <target state="translated">クエリプレフィックスは、クエリ全体に対して設定することも、 &lt;code&gt;from&lt;/code&gt; および &lt;code&gt;join&lt;/code&gt; 式の各個人に対して設定することもできます。 &lt;code&gt;prefix&lt;/code&gt; が &lt;code&gt;from&lt;/code&gt; または &lt;code&gt;join&lt;/code&gt; に指定されていない場合、 &lt;code&gt;from&lt;/code&gt; または &lt;code&gt;join&lt;/code&gt; に指定されたスキーマの接頭辞が使用されます。クエリ接頭辞は、上記のどれも宣言されていない場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="bbd403c978b262ae86cb591bfb4e43647aaa3204" translate="yes" xml:space="preserve">
          <source>The query will be automatically ordered by the primary key unless &lt;code&gt;order_by&lt;/code&gt; is given or &lt;code&gt;order_by&lt;/code&gt; is set in the query. Limit is always set to 1.</source>
          <target state="translated">クエリに &lt;code&gt;order_by&lt;/code&gt; が指定されているか、 &lt;code&gt;order_by&lt;/code&gt; が設定されていない限り、クエリは主キーによって自動的に並べ替えられます。制限は常に1に設定されます。</target>
        </trans-unit>
        <trans-unit id="7f356a4a7c8aa772e039cd5fb20e41a523131c1b" translate="yes" xml:space="preserve">
          <source>The race conditions would make this an unreliable way to update the existing table since multiple callers may be updating out of date view values. There's a better way.</source>
          <target state="translated">レース条件によって、複数の呼び出し元が日付の切れたビュー値を更新している可能性があるため、既存のテーブルを更新するには信頼性の低い方法になってしまいます。もっと良い方法があります。</target>
        </trans-unit>
        <trans-unit id="bae279db8cc5013382df2f8f7a465a8ec13291a8" translate="yes" xml:space="preserve">
          <source>The reason we can use &lt;code&gt;Routes.page_path&lt;/code&gt; instead of the full &lt;code&gt;HelloWeb.Router.Helpers.page_path&lt;/code&gt; name is because &lt;code&gt;HelloWeb.Router.Helpers&lt;/code&gt; is aliased as &lt;code&gt;Routes&lt;/code&gt; by default in the &lt;code&gt;view/0&lt;/code&gt; block defined inside &lt;code&gt;lib/hello_web.ex&lt;/code&gt;. This definition is made available to our templates through &lt;code&gt;use HelloWeb, :view&lt;/code&gt;.</source>
          <target state="translated">完全な &lt;code&gt;HelloWeb.Router.Helpers.page_path&lt;/code&gt; 名の代わりに &lt;code&gt;Routes.page_path&lt;/code&gt; を使用できる理由は、 &lt;code&gt;HelloWeb.Router.Helpers&lt;/code&gt; が &lt;code&gt;lib/hello_web.ex&lt;/code&gt; 内で定義された &lt;code&gt;view/0&lt;/code&gt; ブロックでデフォルトで &lt;code&gt;Routes&lt;/code&gt; としてエイリアスされているためです。この定義は &lt;code&gt;use HelloWeb, :view&lt;/code&gt; を使用してテンプレートで使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="6cfdedb0bfaec211bb278c06c452d42b9de504d0" translate="yes" xml:space="preserve">
          <source>The reason why the example above is wrong is because &lt;a href=&quot;#put_assoc/4&quot;&gt;&lt;code&gt;put_assoc/4&lt;/code&gt;&lt;/a&gt; always works with the &lt;strong&gt;full data&lt;/strong&gt;. So the example above will effectively &lt;strong&gt;erase all previous comments&lt;/strong&gt; and only keep the comment you are currently adding. Instead, you could try:</source>
          <target state="translated">上記の例が間違っている理由は、&lt;a href=&quot;#put_assoc/4&quot;&gt; &lt;code&gt;put_assoc/4&lt;/code&gt; が&lt;/a&gt;常に&lt;strong&gt;完全なデータで&lt;/strong&gt;機能するためです。したがって、上記の例では&lt;strong&gt;、以前のすべてのコメント&lt;/strong&gt;が効果的に&lt;strong&gt;消去され、&lt;/strong&gt;現在追加しているコメントのみが保持されます。代わりに、あなたは試すことができます：</target>
        </trans-unit>
        <trans-unit id="87305add73fb47f8d721c5faef9fcb8523b1a68e" translate="yes" xml:space="preserve">
          <source>The remaining functions in this module, such as validations, constraints, association handling, are about manipulating changesets. Let&amp;rsquo;s discuss some of this extra functionality.</source>
          <target state="translated">検証、制約、関連付けの処理など、このモジュールの残りの機能は、チェンジセットの操作に関するものです。この追加機能のいくつかについて説明しましょう。</target>
        </trans-unit>
        <trans-unit id="2a63cf0d6104e4fb432f90b5c23167e7813b2aa2" translate="yes" xml:space="preserve">
          <source>The remaining functions in this module, such as validations, constraints, association handling, are about manipulating changesets. Let's discuss some of this extra functionality.</source>
          <target state="translated">このモジュールの残りの機能、例えばバリデーション、制約、アソシエーション処理などは、チェンジセットの操作に関するものです。この追加機能のいくつかを説明しましょう。</target>
        </trans-unit>
        <trans-unit id="8a0133540c725182eeb9cebba83044fb36adb332" translate="yes" xml:space="preserve">
          <source>The repositories to create are the ones specified under the &lt;code&gt;:ecto_repos&lt;/code&gt; option in the current app configuration. However, if the &lt;code&gt;-r&lt;/code&gt; option is given, it replaces the &lt;code&gt;:ecto_repos&lt;/code&gt; config.</source>
          <target state="translated">作成するリポジトリは、現在のアプリ構成の &lt;code&gt;:ecto_repos&lt;/code&gt; オプションで指定されたものです。ただし、 &lt;code&gt;-r&lt;/code&gt; オプションを指定すると、 &lt;code&gt;:ecto_repos&lt;/code&gt; 構成が置き換えられます。</target>
        </trans-unit>
        <trans-unit id="40dd881afbf4316e3498baa3ef462026d3e04aaa" translate="yes" xml:space="preserve">
          <source>The repositories to drop are the ones specified under the &lt;code&gt;:ecto_repos&lt;/code&gt; option in the current app configuration. However, if the &lt;code&gt;-r&lt;/code&gt; option is given, it replaces the &lt;code&gt;:ecto_repos&lt;/code&gt; config.</source>
          <target state="translated">削除するリポジトリは、現在のアプリ構成の &lt;code&gt;:ecto_repos&lt;/code&gt; オプションで指定されているものです。ただし、 &lt;code&gt;-r&lt;/code&gt; オプションを指定すると、 &lt;code&gt;:ecto_repos&lt;/code&gt; 構成が置き換えられます。</target>
        </trans-unit>
        <trans-unit id="01f05ddc7ae85e61bdf357b4f9fe87ebe2fb186e" translate="yes" xml:space="preserve">
          <source>The repository will be placed in the &lt;code&gt;lib&lt;/code&gt; directory.</source>
          <target state="translated">リポジトリは &lt;code&gt;lib&lt;/code&gt; ディレクトリに配置されます。</target>
        </trans-unit>
        <trans-unit id="fed09d1158b42d77503d7a48e9346028a907f505" translate="yes" xml:space="preserve">
          <source>The request &lt;code&gt;method&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt; are required arguments. &lt;code&gt;method&lt;/code&gt; may be any value that implements &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#to_string/1&quot;&gt;&lt;code&gt;to_string/1&lt;/code&gt;&lt;/a&gt; and it will properly converted and normalized (e.g., &lt;code&gt;:get&lt;/code&gt; or &lt;code&gt;&quot;post&quot;&lt;/code&gt;).</source>
          <target state="translated">リクエスト &lt;code&gt;method&lt;/code&gt; と &lt;code&gt;path&lt;/code&gt; は必須の引数です。 &lt;code&gt;method&lt;/code&gt; は、&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#to_string/1&quot;&gt; &lt;code&gt;to_string/1&lt;/code&gt; &lt;/a&gt;を実装する任意の値で、適切に変換および正規化されます（例 &lt;code&gt;:get&lt;/code&gt; または &lt;code&gt;&quot;post&quot;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e6553aee7958eb204e762483dc8ab5a0161d11fe" translate="yes" xml:space="preserve">
          <source>The request id is added to the Logger metadata as &lt;code&gt;:request_id&lt;/code&gt; and the response as the &quot;x-request-id&quot; HTTP header. To see the request id in your log output, configure your logger backends to include the &lt;code&gt;:request_id&lt;/code&gt; metadata:</source>
          <target state="translated">リクエストIDは &lt;code&gt;:request_id&lt;/code&gt; としてロガーメタデータに追加され、レスポンスは「x-request-id」HTTPヘッダーとして追加されます。ログ出力にリクエストIDを表示するには、 &lt;code&gt;:request_id&lt;/code&gt; メタデータを含めるようにロガーバックエンドを構成します。</target>
        </trans-unit>
        <trans-unit id="2c5f074e9b5c412ad29dd19562310620770be9f5" translate="yes" xml:space="preserve">
          <source>The request id is added to the Logger metadata as &lt;code&gt;:request_id&lt;/code&gt; and the response as the &amp;ldquo;x-request-id&amp;rdquo; HTTP header. To see the request id in your log output, configure your logger backends to include the &lt;code&gt;:request_id&lt;/code&gt; metadata:</source>
          <target state="translated">要求IDはLoggerメタデータに &lt;code&gt;:request_id&lt;/code&gt; として追加され、応答は「x-request-id」HTTPヘッダーとして追加されます。ログ出力でリクエストIDを確認するには、ロガーバックエンドを設定して、 &lt;code&gt;:request_id&lt;/code&gt; メタデータを含めます。</target>
        </trans-unit>
        <trans-unit id="bb1a8693dbf7be806d104c7fe770e40145397d5f" translate="yes" xml:space="preserve">
          <source>The request information in these fields is not populated until it is fetched using the associated &lt;code&gt;fetch_&lt;/code&gt; function. For example, the &lt;code&gt;cookies&lt;/code&gt; field uses &lt;a href=&quot;#fetch_cookies/2&quot;&gt;&lt;code&gt;fetch_cookies/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらのフィールドのリクエスト情報は、関連する &lt;code&gt;fetch_&lt;/code&gt; 関数を使用してフェッチされるまで入力されません。たとえば、 &lt;code&gt;cookies&lt;/code&gt; フィールドは&lt;a href=&quot;#fetch_cookies/2&quot;&gt; &lt;code&gt;fetch_cookies/2&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="42d5b6701eebdfc545f5a296c3ed4d4a66bb5d50" translate="yes" xml:space="preserve">
          <source>The request will not be processed due to a client error.</source>
          <target state="translated">クライアントのエラーにより、リクエストは処理されません。</target>
        </trans-unit>
        <trans-unit id="4ca366dc222472a65071107117c79a6d7bda94b4" translate="yes" xml:space="preserve">
          <source>The resource fields are given using &lt;code&gt;name:type&lt;/code&gt; syntax where type are the types supported by Ecto. Omitting the type makes it default to &lt;code&gt;:string&lt;/code&gt;:</source>
          <target state="translated">リソースフィールドは &lt;code&gt;name:type&lt;/code&gt; 構文を使用して指定されます。typeはEctoでサポートされるタイプです。タイプを省略すると、デフォルトで &lt;code&gt;:string&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="1097b0ddcaad963de9fecf51f90f2b6fa20570d6" translate="yes" xml:space="preserve">
          <source>The response will be sent with the status code defined within the connection, via &lt;a href=&quot;../plug/plug.conn#put_status/2&quot;&gt;&lt;code&gt;Plug.Conn.put_status/2&lt;/code&gt;&lt;/a&gt;. If no status code is set, a 302 response is sent.</source>
          <target state="translated">応答は、&lt;a href=&quot;../plug/plug.conn#put_status/2&quot;&gt; &lt;code&gt;Plug.Conn.put_status/2&lt;/code&gt; を&lt;/a&gt;介して、接続内で定義されたステータスコードとともに送信されます。ステータスコードが設定されていない場合、302応答が送信されます。</target>
        </trans-unit>
        <trans-unit id="cde9dc4c4422fde222d1887d84b0d0b8e0065c5e" translate="yes" xml:space="preserve">
          <source>The result returned by &lt;code&gt;init/1&lt;/code&gt; is passed as second argument to &lt;code&gt;call/2&lt;/code&gt;. Note that &lt;code&gt;init/1&lt;/code&gt; may be called during compilation and as such it must not return pids, ports or values that are not specific to the runtime.</source>
          <target state="translated">&lt;code&gt;init/1&lt;/code&gt; によって返された結果は、2番目の引数として &lt;code&gt;call/2&lt;/code&gt; に渡されます。そのノート &lt;code&gt;init/1&lt;/code&gt; コンパイル時に呼び出すことができる、そのようなものとして、それは実行時に特定されないPIDを、ポートまたは値を返してはなりません。</target>
        </trans-unit>
        <trans-unit id="c468a501cc213c281f4ebc6e80d77300fb92019e" translate="yes" xml:space="preserve">
          <source>The return value of each &amp;ldquo;before&amp;rdquo; event callback will be stored and passed to the corresponding &amp;ldquo;after&amp;rdquo; callback.</source>
          <target state="translated">各「before」イベントコールバックの戻り値は保存され、対応する「after」コールバックに渡されます。</target>
        </trans-unit>
        <trans-unit id="bdebdedcaeb020e5415f8353d03e0b77bd7af755" translate="yes" xml:space="preserve">
          <source>The returned result is given to &lt;code&gt;execute/6&lt;/code&gt;.</source>
          <target state="translated">返された結果は &lt;code&gt;execute/6&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="aa37f4a12198ad1c63cc6b2c6592271817c66fee" translate="yes" xml:space="preserve">
          <source>The right side may either be a list, a literal list or even a column in the database with array type:</source>
          <target state="translated">右辺はリスト、リテラルリスト、あるいは配列型のデータベースのカラムのいずれかになります。</target>
        </trans-unit>
        <trans-unit id="43a954d2682fa1c3ad1f60f5e9a5ca9d5b1fd15f" translate="yes" xml:space="preserve">
          <source>The route above tells us that any HTTP GET request for the root of the application will be handled by the &lt;code&gt;index&lt;/code&gt; action of the &lt;code&gt;HelloWeb.PageController&lt;/code&gt;.</source>
          <target state="translated">上記のルートは、アプリケーションのルートに対するHTTP GETリクエストは、 &lt;code&gt;HelloWeb.PageController&lt;/code&gt; の &lt;code&gt;index&lt;/code&gt; アクションによって処理されることを示しています。</target>
        </trans-unit>
        <trans-unit id="152177e9ac83ea80f027842928a7dd7f74f8ab54" translate="yes" xml:space="preserve">
          <source>The route above will dispatch to &lt;code&gt;MyApp.PageController&lt;/code&gt;. This syntax is not only convenient for developers, since we don&amp;rsquo;t have to repeat the &lt;code&gt;MyApp.&lt;/code&gt; prefix on all routes, but it also allows Phoenix to put less pressure in the Elixir compiler. If instead we had written:</source>
          <target state="translated">上記のルートは &lt;code&gt;MyApp.PageController&lt;/code&gt; にディスパッチされます。 &lt;code&gt;MyApp.&lt;/code&gt; を繰り返す必要がないため、この構文は開発者にとって便利なだけではありません。すべてのルートに接頭辞を付けますが、これにより、PhoenixがElixirコンパイラーにかかる圧力を軽減できます。代わりに私たちが書いた場合：</target>
        </trans-unit>
        <trans-unit id="65e16ececbb9266a02583f54b94cf09861ee56a7" translate="yes" xml:space="preserve">
          <source>The route above will dispatch to &lt;code&gt;MyAppWeb.PageController&lt;/code&gt;. This syntax is not only convenient for developers, since we don't have to repeat the &lt;code&gt;MyAppWeb.&lt;/code&gt; prefix on all routes, but it also allows Phoenix to put less pressure on the Elixir compiler. If instead we had written:</source>
          <target state="translated">上記のルートは &lt;code&gt;MyAppWeb.PageController&lt;/code&gt; にディスパッチされます。 &lt;code&gt;MyAppWeb.&lt;/code&gt; を繰り返す必要がないため、この構文は開発者にとって便利なだけではありません。すべてのルートにプレフィックスを付けますが、PhoenixがElixirコンパイラにかける圧力を軽減することもできます。代わりに私たちが書いた場合：</target>
        </trans-unit>
        <trans-unit id="49ffcfff6909dca94a4eae307d1f02ebefe5118b" translate="yes" xml:space="preserve">
          <source>The route can dispatch either to a function body or a Plug module.</source>
          <target state="translated">ルートは、ファンクションボディまたはプラグモジュールのいずれかにディスパッチすることができます。</target>
        </trans-unit>
        <trans-unit id="a585daba1ebd3d0d2a8f8b5826e4a49abe384c1d" translate="yes" xml:space="preserve">
          <source>The route for our &quot;Welcome to Phoenix!&quot; page from the previous Up And Running Guide looks like this.</source>
          <target state="translated">前回のアップアンドランニングガイドの「フェニックスへようこそ!」のページのルートはこんな感じです。</target>
        </trans-unit>
        <trans-unit id="2939bacf3d39ca96536e1c8b322db4114aa2c1fe" translate="yes" xml:space="preserve">
          <source>The route:</source>
          <target state="translated">ルートです。</target>
        </trans-unit>
        <trans-unit id="b92d4396a601bd78f5174bee334d0b156a731866" translate="yes" xml:space="preserve">
          <source>The router emits the following telemetry events:</source>
          <target state="translated">ルータは以下のテレメトリイベントを発します。</target>
        </trans-unit>
        <trans-unit id="1d645c8dddca0a4767932b2d077924d41ae564a8" translate="yes" xml:space="preserve">
          <source>The router file that Phoenix generates, &lt;code&gt;lib/hello_web/router.ex&lt;/code&gt;, will look something like this one:</source>
          <target state="translated">Phoenixが生成するルーターファイル &lt;code&gt;lib/hello_web/router.ex&lt;/code&gt; は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="924f6def1ecc58fdee836524dd685a1ca8eb41c0" translate="yes" xml:space="preserve">
          <source>The router invokes a pipeline on a route defined within a scope. Routes outside of a scope have no pipelines. Although the use of nested scopes is discouraged (see above), if we call &lt;code&gt;pipe_through&lt;/code&gt; within a nested scope, the router will invoke all &lt;code&gt;pipe_through&lt;/code&gt;'s from parent scopes, followed by the nested one.</source>
          <target state="translated">ルータは、スコープ内で定義されたルートでパイプラインを呼び出します。スコープ外のルートにはパイプラインがありません。ネストされたスコープの使用は推奨されていませんが（上記を参照）、ネストされたスコープ内で &lt;code&gt;pipe_through&lt;/code&gt; を呼び出すと、ルーターは親スコープからすべての &lt;code&gt;pipe_through&lt;/code&gt; を呼び出し、続いてネストされたスコープを呼び出します。</target>
        </trans-unit>
        <trans-unit id="5e68c3ae1fbcab887151d89b16d2cba345f34fa8" translate="yes" xml:space="preserve">
          <source>The router is itself a plug, which means it can be invoked as:</source>
          <target state="translated">ルーターはそれ自体がプラグであり、つまり、プラグとして呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="7cf405b6509f92f8990929f4ff6aee358761fa42" translate="yes" xml:space="preserve">
          <source>The router maps unique HTTP verb/path pairs to controller/action pairs which will handle them. Controllers in Phoenix are simply Elixir modules. Actions are functions that are defined within these controllers.</source>
          <target state="translated">ルータは、固有のHTTP動詞/パスのペアを、それらを処理するコントローラ/アクションのペアにマッピングします。Phoenix のコントローラは単純に Elixir モジュールです。アクションは、これらのコントローラ内で定義された関数です。</target>
        </trans-unit>
        <trans-unit id="a54219a575937cd1ecc7766ae2a1627937d5863d" translate="yes" xml:space="preserve">
          <source>The router provides a set of macros for generating routes that dispatch to specific controllers and actions. Those macros are named after HTTP verbs. For example:</source>
          <target state="translated">ルータは、特定のコントローラやアクションにディスパッチするルートを生成するためのマクロのセットを提供します。これらのマクロは HTTP 動詞にちなんで名付けられています。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="e873990af1b506d9425de23745c1354e6b8b3c7a" translate="yes" xml:space="preserve">
          <source>The router supports other macros besides those for HTTP verbs like &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, and &lt;code&gt;put&lt;/code&gt;. The most important among them is &lt;code&gt;resources&lt;/code&gt;. Let's add a resource to our &lt;code&gt;lib/hello_web/router.ex&lt;/code&gt; file like this:</source>
          <target state="translated">ルーターは、 &lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;post&lt;/code&gt; 、 &lt;code&gt;put&lt;/code&gt; などのHTTP動詞のマクロ以外に他のマクロをサポートします。それらの中で最も重要なのは &lt;code&gt;resources&lt;/code&gt; です。次のように、 &lt;code&gt;lib/hello_web/router.ex&lt;/code&gt; ファイルにリソースを追加しましょう。</target>
        </trans-unit>
        <trans-unit id="49855ec648da9ffc07970ba4da5777bc9db4c4b3" translate="yes" xml:space="preserve">
          <source>The same event callback is called again, this time with the atom &lt;code&gt;:stop&lt;/code&gt; as the first argument; see the &amp;ldquo;After clause&amp;rdquo; section below.</source>
          <target state="translated">同じイベントコールバックが再度呼び出されますが、今回は最初の引数としてアトム &lt;code&gt;:stop&lt;/code&gt; を使用しています。以下の「After句」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="65de666ef1e1e220f9c0d9372a51d104406e67a1" translate="yes" xml:space="preserve">
          <source>The schema also allows us to interact with a repository:</source>
          <target state="translated">スキーマは、リポジトリとの対話も可能にしてくれます。</target>
        </trans-unit>
        <trans-unit id="dc68d1c060a62f551303cd6da271796006c2c527" translate="yes" xml:space="preserve">
          <source>The schema can be of any value. The path represents the database name while options are simply merged in.</source>
          <target state="translated">スキーマは任意の値を指定できます。パスはデータベース名を表し、オプションは単純にマージされます。</target>
        </trans-unit>
        <trans-unit id="f4534f8ae409e6a396fbbf9dca42834fd3a4a272" translate="yes" xml:space="preserve">
          <source>The schema is responsible for mapping the database fields into an Elixir struct.</source>
          <target state="translated">スキーマは、データベースのフィールドをElixir構造体にマッピングします。</target>
        </trans-unit>
        <trans-unit id="f2c63087f504426ce8dc15eb5b941125dcbaa4ed" translate="yes" xml:space="preserve">
          <source>The schema is responsible for mapping the database fields into an Elixir struct. It is followed by an optional list of attributes, with their respective names and types. See &lt;a href=&quot;mix.tasks.phx.gen.schema&quot;&gt;&lt;code&gt;mix phx.gen.schema&lt;/code&gt;&lt;/a&gt; for more information on attributes.</source>
          <target state="translated">スキーマは、データベースフィールドをElixir構造体にマッピングする役割を果たします。その後に、それぞれの名前とタイプを含む、オプションの属性リストが続きます。属性の詳細については、&lt;a href=&quot;mix.tasks.phx.gen.schema&quot;&gt; &lt;code&gt;mix phx.gen.schema&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e857c9bd7068c28cafcac14000408ae312ea8b02" translate="yes" xml:space="preserve">
          <source>The schema module can be defined inline in the parent schema in simple cases:</source>
          <target state="translated">単純なケースでは、親スキーマのインラインでスキーマモジュールを定義することができます。</target>
        </trans-unit>
        <trans-unit id="35b62780b2378828f2f7ab21b8fde93c07ed6f06" translate="yes" xml:space="preserve">
          <source>The second and third argument that each event callback takes depends on the callback being an &amp;ldquo;after&amp;rdquo; or a &amp;ldquo;before&amp;rdquo; callback i.e. it depends on the value of the first argument, &lt;code&gt;:start&lt;/code&gt; or &lt;code&gt;:stop&lt;/code&gt;. For this reason, most of the time you will want to define (at least) two separate clauses for each event callback, one for the &amp;ldquo;before&amp;rdquo; and one for the &amp;ldquo;after&amp;rdquo; callbacks.</source>
          <target state="translated">各イベントコールバックが取る2番目と3番目の引数は、コールバックが「後」または「前」のコールバックであるかどうかに依存します。つまり、最初の引数 &lt;code&gt;:start&lt;/code&gt; または &lt;code&gt;:stop&lt;/code&gt; の値に依存します。このため、ほとんどの場合、各イベントコールバックに対して（少なくとも）2つの句を定義する必要があります。1つは「前」コールバック用で、もう1つは「後」コールバック用です。</target>
        </trans-unit>
        <trans-unit id="8e57d6963dd7d705a901c4d4e7c1eb9745bf3c6f" translate="yes" xml:space="preserve">
          <source>The second argument &lt;code&gt;data&lt;/code&gt; specifies fields and values that are to be loaded. It can be a map, a keyword list, or a &lt;code&gt;{fields, values}&lt;/code&gt; tuple. Fields can be atoms or strings.</source>
          <target state="translated">2番目の引数 &lt;code&gt;data&lt;/code&gt; は、ロードされるフィールドと値を指定します。これは、マップ、キーワードリスト、または &lt;code&gt;{fields, values}&lt;/code&gt; タプルにすることができます。フィールドは、アトムまたは文字列です。</target>
        </trans-unit>
        <trans-unit id="8bdda78bcfbc0f79c0c506943ef025fc56fbcad4" translate="yes" xml:space="preserve">
          <source>The second argument is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Salt_(cryptography)&quot;&gt;cryptographic salt&lt;/a&gt; which must be the same in both calls to &lt;a href=&quot;#sign/4&quot;&gt;&lt;code&gt;sign/4&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#verify/4&quot;&gt;&lt;code&gt;verify/4&lt;/code&gt;&lt;/a&gt;. For instance, it may be called &quot;user auth&quot; and treated as namespace when generating a token that will be used to authenticate users on channels or on your APIs.</source>
          <target state="translated">2番目の引数は&lt;a href=&quot;https://en.wikipedia.org/wiki/Salt_(cryptography)&quot;&gt;暗号ソルト&lt;/a&gt;であり、&lt;a href=&quot;#sign/4&quot;&gt; &lt;code&gt;sign/4&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#verify/4&quot;&gt; &lt;code&gt;verify/4&lt;/code&gt; の&lt;/a&gt;両方の呼び出しで同じである必要があります。たとえば、「ユーザー認証」と呼ばれ、チャネルまたはAPIでユーザーを認証するために使用されるトークンを生成するときに名前空間として扱われる場合があります。</target>
        </trans-unit>
        <trans-unit id="8bbd999bbec42a3e7fb283772187deec6149dcdd" translate="yes" xml:space="preserve">
          <source>The second argument is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Salt_(cryptography)&quot;&gt;cryptographic salt&lt;/a&gt; which must be the same in both calls to &lt;a href=&quot;#sign/4&quot;&gt;&lt;code&gt;sign/4&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#verify/4&quot;&gt;&lt;code&gt;verify/4&lt;/code&gt;&lt;/a&gt;. For instance, it may be called &amp;ldquo;user auth&amp;rdquo; when generating a token that will be used to authenticate users on channels or on your APIs.</source>
          <target state="translated">2番目の引数は&lt;a href=&quot;https://en.wikipedia.org/wiki/Salt_(cryptography)&quot;&gt;暗号化ソルト&lt;/a&gt;であり、&lt;a href=&quot;#sign/4&quot;&gt; &lt;code&gt;sign/4&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#verify/4&quot;&gt; &lt;code&gt;verify/4&lt;/code&gt; の&lt;/a&gt;両方の呼び出しで同じでなければなりません。たとえば、チャネルまたはAPIでユーザーを認証するために使用されるトークンを生成する場合、「ユーザー認証」と呼ばれることがあります。</target>
        </trans-unit>
        <trans-unit id="0127918dc247714fd5e025d35570e68dd2593e39" translate="yes" xml:space="preserve">
          <source>The second argument is the repository configuration as stored in the application environment. It must return &lt;code&gt;{:ok, keyword}&lt;/code&gt; with the updated list of configuration or &lt;code&gt;:ignore&lt;/code&gt; (only in the &lt;code&gt;:supervisor&lt;/code&gt; case).</source>
          <target state="translated">2番目の引数は、アプリケーション環境に保管されたリポジトリー構成です。更新された構成リストまたは &lt;code&gt;:ignore&lt;/code&gt; を使用して &lt;code&gt;{:ok, keyword}&lt;/code&gt; を返す必要があります（ &lt;code&gt;:supervisor&lt;/code&gt; の場合のみ）。</target>
        </trans-unit>
        <trans-unit id="8ca2c1c0ef1b8f7a6c12e80c16925947b70511e2" translate="yes" xml:space="preserve">
          <source>The second argument must be &lt;code&gt;{:binary, contents}&lt;/code&gt;, where &lt;code&gt;contents&lt;/code&gt; will be sent as download, or&lt;code&gt;{:file, path}&lt;/code&gt;, where &lt;code&gt;path&lt;/code&gt; is the filesystem location of the file to be sent. Be careful to not interpolate the path from external parameters, as it could allow traversal of the filesystem.</source>
          <target state="translated">2番目の引数がなければならない &lt;code&gt;{:binary, contents}&lt;/code&gt; 、 &lt;code&gt;contents&lt;/code&gt; ダウンロード、又は送信される &lt;code&gt;{:file, path}&lt;/code&gt; 、 &lt;code&gt;path&lt;/code&gt; 送信するファイルのファイルシステムの場所です。ファイルシステムのトラバーサルを可能にする可能性があるため、外部パラメーターからパスを補間しないように注意してください。</target>
        </trans-unit>
        <trans-unit id="4644893fe8ba1bf1c5d0e81a9d6a3f7226fe628b" translate="yes" xml:space="preserve">
          <source>The second parameter is &lt;code&gt;params&lt;/code&gt;. Not surprisingly, this is a map which holds any parameters passed along in the HTTP request. It is a good practice to pattern match against params in the function signature to provide data in a simple package we can pass on to rendering. We saw this in the &lt;a href=&quot;request_lifecycle&quot;&gt;Request life-cycle guide&lt;/a&gt; when we added a messenger parameter to our &lt;code&gt;show&lt;/code&gt; route in &lt;code&gt;lib/hello_web/controllers/hello_controller.ex&lt;/code&gt;.</source>
          <target state="translated">2番目のパラメーターは &lt;code&gt;params&lt;/code&gt; です。当然のことながら、これはHTTPリクエストで渡されたパラメータを保持するマップです。レンダリングに渡すことができる単純なパッケージでデータを提供するために、関数シグニチャのパラメータに対してパターンマッチングを行うことをお勧めします。私たちは、これを見た&lt;a href=&quot;request_lifecycle&quot;&gt;リクエストライフサイクルガイド&lt;/a&gt;私達は私達のにメッセンジャーのパラメータを追加したときに &lt;code&gt;show&lt;/code&gt; ルート &lt;code&gt;lib/hello_web/controllers/hello_controller.ex&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7f2d03f9984f042abc33381531414bedeec9588a" translate="yes" xml:space="preserve">
          <source>The serializer &lt;code&gt;decode!&lt;/code&gt; function must return a &lt;a href=&quot;phoenix.socket.message&quot;&gt;&lt;code&gt;Phoenix.Socket.Message&lt;/code&gt;&lt;/a&gt; which is forwarded to channels except:</source>
          <target state="translated">シリアライザ &lt;code&gt;decode!&lt;/code&gt; 関数は、&lt;a href=&quot;phoenix.socket.message&quot;&gt; &lt;code&gt;Phoenix.Socket.Message&lt;/code&gt; &lt;/a&gt;を除くチャネルに転送されるPhoenix.Socket.Messageを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="d1d3f623b2642c248a3d2a66503afa329aff8fe9" translate="yes" xml:space="preserve">
          <source>The server may send messages or replies back. For messages, the ref uniquely identifies the message. For replies, the ref matches the original message. Both data-types also include a join_ref that uniquely identifies the currently joined channel.</source>
          <target state="translated">サーバはメッセージを送信したり、返信を返したりすることができます。メッセージの場合、ref はメッセージを一意に識別します。返信の場合、ref は元のメッセージにマッチします。どちらのデータ型にも、現在参加しているチャネルを一意に識別する join_ref が含まれています。</target>
        </trans-unit>
        <trans-unit id="25af858d19e12fa8099a294c660a40b18c7cf762" translate="yes" xml:space="preserve">
          <source>The server's &lt;code&gt;handle_event/3&lt;/code&gt; would receive a payload:</source>
          <target state="translated">サーバーの &lt;code&gt;handle_event/3&lt;/code&gt; は、ペイロードを受け取ります。</target>
        </trans-unit>
        <trans-unit id="efdb100e8fb22edffbda4a2f9c62ff5b45f532b5" translate="yes" xml:space="preserve">
          <source>The session contents, the final data to be stored after it has been built with &lt;a href=&quot;plug.conn#put_session/3&quot;&gt;&lt;code&gt;Plug.Conn.put_session/3&lt;/code&gt;&lt;/a&gt; and the other session manipulating functions</source>
          <target state="translated">セッションの内容、&lt;a href=&quot;plug.conn#put_session/3&quot;&gt; &lt;code&gt;Plug.Conn.put_session/3&lt;/code&gt; で&lt;/a&gt;構築された後に保存される最終データ、およびその他のセッション操作関数</target>
        </trans-unit>
        <trans-unit id="8b95a016960327d8adfb4b2a4fa7945022268acb" translate="yes" xml:space="preserve">
          <source>The session contents, the final data to be stored after it has been built with &lt;a href=&quot;plug.conn#put_session/3&quot;&gt;&lt;code&gt;Plug.Conn.put_session/3&lt;/code&gt;&lt;/a&gt; and the other session manipulating functions.</source>
          <target state="translated">セッションの内容、&lt;a href=&quot;plug.conn#put_session/3&quot;&gt; &lt;code&gt;Plug.Conn.put_session/3&lt;/code&gt; &lt;/a&gt;およびその他のセッション操作関数で構築された後に保存される最終データ。</target>
        </trans-unit>
        <trans-unit id="a534b349ad0dd4485a26018b51cb99468bc99b42" translate="yes" xml:space="preserve">
          <source>The session id may be nil in case the cookie does not identify any value in the store. The session contents must be a map.</source>
          <target state="translated">クッキーがストア内のいかなる値も識別しない場合、セッションIDはnilであってもよい。セッションの内容はマップでなければなりません。</target>
        </trans-unit>
        <trans-unit id="45b3c50494949266d4502d1426e160d856709a04" translate="yes" xml:space="preserve">
          <source>The session is accessed via functions on &lt;a href=&quot;plug.conn&quot;&gt;&lt;code&gt;Plug.Conn&lt;/code&gt;&lt;/a&gt;. Cookies and session have to be fetched with &lt;a href=&quot;plug.conn#fetch_session/1&quot;&gt;&lt;code&gt;Plug.Conn.fetch_session/1&lt;/code&gt;&lt;/a&gt; before the session can be accessed.</source>
          <target state="translated">セッションは&lt;a href=&quot;plug.conn&quot;&gt; &lt;code&gt;Plug.Conn&lt;/code&gt; の&lt;/a&gt;関数を介してアクセスされます。Cookieとセッションは、セッションにアクセスする前に&lt;a href=&quot;plug.conn#fetch_session/1&quot;&gt; &lt;code&gt;Plug.Conn.fetch_session/1&lt;/code&gt; で&lt;/a&gt;フェッチする必要があります。</target>
        </trans-unit>
        <trans-unit id="ea6faaf4abb4d9eac550e7cdd062da8586b666dd" translate="yes" xml:space="preserve">
          <source>The session is also lazy. Once configured, a cookie header with the session will only be sent to the client if something is written to the session in the first place.</source>
          <target state="translated">セッションも怠け者です。一度設定されると、セッションを含むクッキーヘッダは、最初にセッションに何かが書き込まれた場合にのみクライアントに送信されます。</target>
        </trans-unit>
        <trans-unit id="9ba204c596e34571bf913673b8b59a88885aaca5" translate="yes" xml:space="preserve">
          <source>The signing and encryption keys are derived from the connection's &lt;code&gt;secret_key_base&lt;/code&gt; using a salt that is built by appending &quot;_cookie&quot; to the cookie name. Care should be taken not to derive other keys using this value as the salt. Similarly do not use the same cookie name to store different values with distinct purposes.</source>
          <target state="translated">署名キーと暗号化キーは、Cookie名に「_cookie」を追加して作成されたソルトを使用して、接続の &lt;code&gt;secret_key_base&lt;/code&gt; から取得されます。この値をソルトとして使用して他のキーを導出しないように注意する必要があります。同様に、異なる目的で異なる値を保存するために同じCookie名を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="e43c5d3c5ff242e45bb3d214b290a81d5f13d3bc" translate="yes" xml:space="preserve">
          <source>The simplest component only needs to define a &lt;code&gt;render&lt;/code&gt; function:</source>
          <target state="translated">最も単純なコンポーネントは、 &lt;code&gt;render&lt;/code&gt; 関数を定義するだけで済みます。</target>
        </trans-unit>
        <trans-unit id="76ed9ada6a0b3a3bc428852c33a8785e0c5e5e57" translate="yes" xml:space="preserve">
          <source>The socket assigns are available directly inside the template as LiveEEx &lt;code&gt;assigns&lt;/code&gt;, such as &lt;code&gt;@foo&lt;/code&gt; and &lt;code&gt;@bar&lt;/code&gt;. Any assign access should be done using the assigns in the template where proper change tracking takes place.</source>
          <target state="translated">ソケットの割り当ては、 &lt;code&gt;@foo&lt;/code&gt; や &lt;code&gt;@bar&lt;/code&gt; などのLiveEExの &lt;code&gt;assigns&lt;/code&gt; としてテンプレート内で直接利用できます。割り当てアクセスは、適切な変更追跡が行われるテンプレートの割り当てを使用して実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="b42889c924bd9345b669263e4a09c0e69b581550" translate="yes" xml:space="preserve">
          <source>The socket endpoint is read from the &lt;code&gt;@endpoint&lt;/code&gt; variable.</source>
          <target state="translated">ソケットのエンドポイントは、 &lt;code&gt;@endpoint&lt;/code&gt; 変数から読み取られます。</target>
        </trans-unit>
        <trans-unit id="e8353003894eb4918615880dd892b3fb26308d6c" translate="yes" xml:space="preserve">
          <source>The socket is then used to subscribe and join channels. Use this function when you want to create a blank socket to pass to functions like &lt;code&gt;UserSocket.connect/2&lt;/code&gt;.</source>
          <target state="translated">ソケットは、チャネルのサブスクライブと参加に使用されます。この関数は、 &lt;code&gt;UserSocket.connect/2&lt;/code&gt; などの関数に渡す空のソケットを作成する場合に使用します。</target>
        </trans-unit>
        <trans-unit id="741b1725667e8d637e90c04ad708be61a6c67966" translate="yes" xml:space="preserve">
          <source>The socket is then used to subscribe and join channels. Use this function when you want to create a blank socket to pass to functions like &lt;code&gt;UserSocket.connect/3&lt;/code&gt;.</source>
          <target state="translated">次に、ソケットはチャネルのサブスクライブと参加に使用されます。 &lt;code&gt;UserSocket.connect/3&lt;/code&gt; などの関数に渡す空白のソケットを作成する場合は、この関数を使用します。</target>
        </trans-unit>
        <trans-unit id="73c75fa9c265b104aea9db5e1b8d2884d15b3c1c" translate="yes" xml:space="preserve">
          <source>The source for these guides is &lt;a href=&quot;https://github.com/phoenixframework/phoenix/tree/master/guides&quot;&gt;on GitHub&lt;/a&gt;. To help improve the guides, please report an &lt;a href=&quot;https://github.com/phoenixframework/phoenix/issues&quot;&gt;issue&lt;/a&gt; or open a &lt;a href=&quot;https://github.com/phoenixframework/phoenix/pulls&quot;&gt;pull request&lt;/a&gt;.</source>
          <target state="translated">これらのガイドのソースは&lt;a href=&quot;https://github.com/phoenixframework/phoenix/tree/master/guides&quot;&gt;GitHubにあります&lt;/a&gt;。ガイドの改善に役立てるために、&lt;a href=&quot;https://github.com/phoenixframework/phoenix/issues&quot;&gt;問題&lt;/a&gt;を報告するか、&lt;a href=&quot;https://github.com/phoenixframework/phoenix/pulls&quot;&gt;プルリクエストを&lt;/a&gt;開いてください。</target>
        </trans-unit>
        <trans-unit id="df8020d63833291b1200da532130369857dd6057" translate="yes" xml:space="preserve">
          <source>The state of the schema is stored in the &lt;code&gt;:state&lt;/code&gt; field and allows following values:</source>
          <target state="translated">スキーマの状態は &lt;code&gt;:state&lt;/code&gt; フィールドに格納され、次の値を許可します。</target>
        </trans-unit>
        <trans-unit id="aa78ee5880f730e34341dec231106792a1c1612d" translate="yes" xml:space="preserve">
          <source>The status can be an integer, an atom, or &lt;code&gt;nil&lt;/code&gt;. See &lt;a href=&quot;plug.conn.status&quot;&gt;&lt;code&gt;Plug.Conn.Status&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">ステータスは、整数、アトム、または &lt;code&gt;nil&lt;/code&gt; です。詳細については、&lt;a href=&quot;plug.conn.status&quot;&gt; &lt;code&gt;Plug.Conn.Status&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="549a0fdbf17866c901bbe69f809cf1df06203fc0" translate="yes" xml:space="preserve">
          <source>The status code can be &lt;code&gt;nil&lt;/code&gt;, an integer or an atom. The list of allowed atoms is available in &lt;a href=&quot;plug.conn.status&quot;&gt;&lt;code&gt;Plug.Conn.Status&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ステータスコードは &lt;code&gt;nil&lt;/code&gt; 、整数、またはアトムです。許可されるアトムのリストは、&lt;a href=&quot;plug.conn.status&quot;&gt; &lt;code&gt;Plug.Conn.Status&lt;/code&gt; &lt;/a&gt;で利用できます。</target>
        </trans-unit>
        <trans-unit id="3baf68608bb7edc0144295a9de68bd827a0c3d1c" translate="yes" xml:space="preserve">
          <source>The status code can be &lt;code&gt;nil&lt;/code&gt;, an integer, or an atom. The list of allowed atoms is available in &lt;a href=&quot;plug.conn.status&quot;&gt;&lt;code&gt;Plug.Conn.Status&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ステータスコードは &lt;code&gt;nil&lt;/code&gt; 、整数、またはアトムです。許可されるアトムのリストは、&lt;a href=&quot;plug.conn.status&quot;&gt; &lt;code&gt;Plug.Conn.Status&lt;/code&gt; &lt;/a&gt;で利用できます。</target>
        </trans-unit>
        <trans-unit id="5b85cd2f546627e7f8e771b8e4dacbd15919de6f" translate="yes" xml:space="preserve">
          <source>The status code we provide must be a valid number.</source>
          <target state="translated">提供するステータスコードは有効な番号でなければなりません。</target>
        </trans-unit>
        <trans-unit id="58d3fec1c36423b15af55e60202f9084e0860082" translate="yes" xml:space="preserve">
          <source>The struct for testing LiveViews.</source>
          <target state="translated">LiveViewsをテストするための構造体。</target>
        </trans-unit>
        <trans-unit id="b011117162e069e69fd96c3b54a5ab2de98fb369" translate="yes" xml:space="preserve">
          <source>The struct representing an internal unique reference to the component instance, available as the &lt;code&gt;@myself&lt;/code&gt; assign in stateful components.</source>
          <target state="translated">ステートフルコンポーネントで &lt;code&gt;@myself&lt;/code&gt; 割り当てとして使用できる、コンポーネントインスタンスへの内部一意参照を表す構造体。</target>
        </trans-unit>
        <trans-unit id="1ffbb97758f6664c833c9c9e920b7aabfee8a286" translate="yes" xml:space="preserve">
          <source>The struct returned by .leex templates.</source>
          <target state="translated">.leex templates が返す構造体。</target>
        </trans-unit>
        <trans-unit id="db12a53ec7a2451062d21b0ec8554b50bad078d6" translate="yes" xml:space="preserve">
          <source>The struct returned by &lt;a href=&quot;phoenix.liveviewtest#element/3&quot;&gt;&lt;code&gt;Phoenix.LiveViewTest.element/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;phoenix.liveviewtest#element/3&quot;&gt; &lt;code&gt;Phoenix.LiveViewTest.element/3&lt;/code&gt; &lt;/a&gt;によって返される構造体。</target>
        </trans-unit>
        <trans-unit id="336f100817cc09f943763c011543a225c024d68e" translate="yes" xml:space="preserve">
          <source>The struct returned by components in .leex templates.</source>
          <target state="translated">.leex テンプレート内のコンポーネントから返される構造体。</target>
        </trans-unit>
        <trans-unit id="d96032e1804462a375e61aa3becfddf682507fdb" translate="yes" xml:space="preserve">
          <source>The struct returned by for-comprehensions in .leex templates.</source>
          <target state="translated">.leexテンプレートのfor-comprehensionsが返す構造体。</target>
        </trans-unit>
        <trans-unit id="c2e71fa009e7b2e244d8ad3544b3e79a8a9bae1d" translate="yes" xml:space="preserve">
          <source>The submitted form is reactivated and loses the &lt;code&gt;&quot;phx-submit-loading&quot;&lt;/code&gt; class</source>
          <target state="translated">送信されたフォームは再度 &lt;code&gt;&quot;phx-submit-loading&quot;&lt;/code&gt; 化され、「phx-submit-loading」クラスが失われます。</target>
        </trans-unit>
        <trans-unit id="44eb57fe50cca343fe8e2ef06f2524d5aeefcf45" translate="yes" xml:space="preserve">
          <source>The supplied &lt;code&gt;user&lt;/code&gt; and &lt;code&gt;pass&lt;/code&gt; may be empty strings;</source>
          <target state="translated">指定された &lt;code&gt;user&lt;/code&gt; と &lt;code&gt;pass&lt;/code&gt; は空の文字列である可能性があります。</target>
        </trans-unit>
        <trans-unit id="9b7700abeab24f899ce4198c80479749838f3339" translate="yes" xml:space="preserve">
          <source>The supported keys are:</source>
          <target state="translated">対応しているキーは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="db2280a174b18020a2620736642518bf66a11dab" translate="yes" xml:space="preserve">
          <source>The supported options are:</source>
          <target state="translated">サポートされているオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="9183fa9d80288d69edd242efa2830a2745f8ab1f" translate="yes" xml:space="preserve">
          <source>The supported values are:</source>
          <target state="translated">サポートされている値は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="01f20fe2845d2b1bdb9951b6a8d84f277b6b5d78" translate="yes" xml:space="preserve">
          <source>The syntax above is equivalent to:</source>
          <target state="translated">上記の構文は、次のようなものと同等です。</target>
        </trans-unit>
        <trans-unit id="8a40be796b70fed45f015e64809fd60c04642951" translate="yes" xml:space="preserve">
          <source>The temporary directory where files are streamed to can be customized by setting the &lt;code&gt;PLUG_TMPDIR&lt;/code&gt; environment variable on the host system. If &lt;code&gt;PLUG_TMPDIR&lt;/code&gt; isn&amp;rsquo;t set, Plug will look at some environment variables which usually hold the value of the system&amp;rsquo;s temporary directory (like &lt;code&gt;TMPDIR&lt;/code&gt; or &lt;code&gt;TMP&lt;/code&gt;). If no value is found in any of those variables, &lt;code&gt;/tmp&lt;/code&gt; is used as a default.</source>
          <target state="translated">ホストシステムで &lt;code&gt;PLUG_TMPDIR&lt;/code&gt; 環境変数を設定することにより、ファイルのストリーミング先の一時ディレクトリをカスタマイズできます。 &lt;code&gt;PLUG_TMPDIR&lt;/code&gt; が設定されていない場合、プラグは通常システムの一時ディレクトリ（ &lt;code&gt;TMPDIR&lt;/code&gt; や &lt;code&gt;TMP&lt;/code&gt; など）の値を保持するいくつかの環境変数を調べます。これらの変数のいずれにも値が見つからない場合、 &lt;code&gt;/tmp&lt;/code&gt; がデフォルトとして使用されます。</target>
        </trans-unit>
        <trans-unit id="abfd2e746ee341013e4cdbafc97dfddc04d08e71" translate="yes" xml:space="preserve">
          <source>The temporary directory where files are streamed to can be customized by setting the &lt;code&gt;PLUG_TMPDIR&lt;/code&gt; environment variable on the host system. If &lt;code&gt;PLUG_TMPDIR&lt;/code&gt; isn't set, Plug will look at some environment variables which usually hold the value of the system's temporary directory (like &lt;code&gt;TMPDIR&lt;/code&gt; or &lt;code&gt;TMP&lt;/code&gt;). If no value is found in any of those variables, &lt;code&gt;/tmp&lt;/code&gt; is used as a default.</source>
          <target state="translated">ファイルのストリーミング先の一時ディレクトリは、ホストシステムで &lt;code&gt;PLUG_TMPDIR&lt;/code&gt; 環境変数を設定することでカスタマイズできます。 &lt;code&gt;PLUG_TMPDIR&lt;/code&gt; が設定されていない場合、Plugは、通常はシステムの一時ディレクトリの値を保持するいくつかの環境変数（ &lt;code&gt;TMPDIR&lt;/code&gt; や &lt;code&gt;TMP&lt;/code&gt; など）を調べます。これらの変数のいずれにも値が見つからない場合は、デフォルトとして &lt;code&gt;/tmp&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="6008af9872175b7be58ce5d3be6044dce8156ae7" translate="yes" xml:space="preserve">
          <source>The test process will not receive the published message. This triggers the &lt;code&gt;handle_out/3&lt;/code&gt; callback in the channel.</source>
          <target state="translated">テストプロセスは、公開されたメッセージを受信しません。これにより、 &lt;code&gt;handle_out/3&lt;/code&gt; コールバックがトリガーされます。</target>
        </trans-unit>
        <trans-unit id="96e4f76aa06de2592f470fd3dea7b0c4ef31375c" translate="yes" xml:space="preserve">
          <source>The third and final option is to use &lt;a href=&quot;#many_to_many/3&quot;&gt;&lt;code&gt;many_to_many/3&lt;/code&gt;&lt;/a&gt; to define the relationships between the resources. In this case, the comments table won&amp;rsquo;t have the foreign key, instead there is a intermediary table responsible for associating the entries:</source>
          <target state="translated">3番目の最後のオプションは、&lt;a href=&quot;#many_to_many/3&quot;&gt; &lt;code&gt;many_to_many/3&lt;/code&gt; &lt;/a&gt;を使用してリソース間の関係を定義することです。この場合、コメントテーブルには外部キーがありません。代わりに、エントリを関連付ける中間テーブルがあります。</target>
        </trans-unit>
        <trans-unit id="8de91f694a160eac98f8736952f2a3f88136e353" translate="yes" xml:space="preserve">
          <source>The third and final option is to use &lt;a href=&quot;#many_to_many/3&quot;&gt;&lt;code&gt;many_to_many/3&lt;/code&gt;&lt;/a&gt; to define the relationships between the resources. In this case, the comments table won't have the foreign key, instead there is an intermediary table responsible for associating the entries:</source>
          <target state="translated">3番目の最後のオプションは、&lt;a href=&quot;#many_to_many/3&quot;&gt; &lt;code&gt;many_to_many/3&lt;/code&gt; &lt;/a&gt;を使用してリソース間の関係を定義することです。この場合、コメントテーブルには外部キーがありません。代わりに、エントリの関連付けを担当する中間テーブルがあります。</target>
        </trans-unit>
        <trans-unit id="aa9b72d684ded4fbc52b2db0fd313e2feea35d4f" translate="yes" xml:space="preserve">
          <source>The third argument &lt;code&gt;format&lt;/code&gt; is the format the data has been dumped as. For example, databases may dump embedded to &lt;code&gt;:json&lt;/code&gt;, this function allows such dumped data to be put back into the schemas.</source>
          <target state="translated">3番目の引数の &lt;code&gt;format&lt;/code&gt; は、データがダンプされた形式です。たとえば、データベースは &lt;code&gt;:json&lt;/code&gt; に埋め込まれてダンプされる場合があります。この関数を使用すると、そのようなダンプされたデータをスキーマに戻すことができます。</target>
        </trans-unit>
        <trans-unit id="22dfe15ea505dc65004d52b00565b0529f3c5106" translate="yes" xml:space="preserve">
          <source>The third argument can be any term (string, int, list, etc.) that you wish to codify into the token. Upon valid verification, this same term will be extracted from the token.</source>
          <target state="translated">3 番目の引数には、トークンにコード化したい任意の項(文字列、int、リストなど)を指定できます。有効な検証が行われると、この同じ項がトークンから抽出されます。</target>
        </trans-unit>
        <trans-unit id="a1c2052b68df8425edb8d31ef1ad3c1921b372fa" translate="yes" xml:space="preserve">
          <source>The timeout is in milliseconds and defaults to 100ms.</source>
          <target state="translated">タイムアウトはミリ秒単位で、デフォルトは100msです。</target>
        </trans-unit>
        <trans-unit id="ecb554852eb06b5cfc5cc2ec1aa86dbe934028bb" translate="yes" xml:space="preserve">
          <source>The timeout is in milliseconds and defaults to 100ms. Keep in mind this macro will block the test by the timeout value, so use it only when necessary as overuse will certainly slow down your test suite.</source>
          <target state="translated">タイムアウトはミリ秒単位で、デフォルトは100msです。このマクロはタイムアウト値によってテストをブロックするので、使いすぎるとテストスイートが遅くなるので、必要な場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="1304926df4500481102d8f6f3aa1797e91270270" translate="yes" xml:space="preserve">
          <source>The timeout is in milliseconds and defaults to the &lt;code&gt;:assert_receive_timeout&lt;/code&gt; set on the &lt;code&gt;:ex_unit&lt;/code&gt; application (which defaults to 100ms).</source>
          <target state="translated">タイムアウトはミリ秒で、デフォルトである &lt;code&gt;:assert_receive_timeout&lt;/code&gt; にセット &lt;code&gt;:ex_unit&lt;/code&gt; アプリケーション（100ミリ秒デフォルト）。</target>
        </trans-unit>
        <trans-unit id="b6a222ff7aa627d2ff58408f68862da0a0c1ac3d" translate="yes" xml:space="preserve">
          <source>The timeout is in milliseconds and defaults to the &lt;code&gt;:refute_receive_timeout&lt;/code&gt; set on the &lt;code&gt;:ex_unit&lt;/code&gt; application (which defaults to 100ms). Keep in mind this macro will block the test by the timeout value, so use it only when necessary as overuse will certainly slow down your test suite.</source>
          <target state="translated">タイムアウトはミリ秒、デフォルトである &lt;code&gt;:refute_receive_timeout&lt;/code&gt; オンセット &lt;code&gt;:ex_unit&lt;/code&gt; アプリケーション（100ミリ秒デフォルト）。このマクロはタイムアウト値によってテストをブロックすることに注意してください。使いすぎるとテストスイートの速度が確実に低下するため、必要な場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="0b4fff6f531f38d34226e8259653e269c039cae2" translate="yes" xml:space="preserve">
          <source>The timestamp is updated whenever there is a read or write to the table and it may be used to detect if a session is still active.</source>
          <target state="translated">タイムスタンプはテーブルへの読み書きがあったときに更新され、セッションがまだアクティブであるかどうかを検出するために使用されることがあります。</target>
        </trans-unit>
        <trans-unit id="81762c19246e6846b2e980ea04896a37c7853877" translate="yes" xml:space="preserve">
          <source>The token may be sent by the request either via the params with key &quot;_csrf_token&quot; or a header with name &quot;x-csrf-token&quot;.</source>
          <target state="translated">トークンは、&quot;_csrf_token &quot;というキーを持つパラメータか、&quot;x-csrf-token &quot;という名前のヘッダを介してリクエストによって送信されます。</target>
        </trans-unit>
        <trans-unit id="a5072feb3a5cec39cc2fc00a21cad324ac72eccb" translate="yes" xml:space="preserve">
          <source>The token may be sent by the request either via the params with key &amp;ldquo;_csrf_token&amp;rdquo; or a header with name &amp;ldquo;x-csrf-token&amp;rdquo;.</source>
          <target state="translated">トークンは、「_ csrf_token」というキーを持つparamsまたは「x-csrf-token」という名前のヘッダーを介して、リクエストによって送信できます。</target>
        </trans-unit>
        <trans-unit id="2c49c933ccb1807a833e99f7dd1b49c2eb650bfa" translate="yes" xml:space="preserve">
          <source>The tracked statics on the client will match the ones on the server the huge majority of times. However, if there is a new deployment, those values may differ. You can use this function to detect those cases and show a banner to the user, asking them to reload the page. To do so, first set the assign on mount:</source>
          <target state="translated">クライアント上で追跡された統計情報は、大抵の場合、サーバー上の統計情報と一致します。しかし、新しいデプロイメントがある場合、これらの値は異なる可能性があります。この機能を使用すると、そのようなケースを検知してバナーを表示し、ページをリロードするようにユーザーに促すことができます。そのためには、まず、マウント時の割り当てを設定します。</target>
        </trans-unit>
        <trans-unit id="fec7f0c751853b58fb208600c6fd51e96a829e62" translate="yes" xml:space="preserve">
          <source>The tracking of changes is done via assigns. Imagine this template:</source>
          <target state="translated">変更の追跡は割り当てを介して行われます。このテンプレートを想像してみてください。</target>
        </trans-unit>
        <trans-unit id="92ce00aada35b93b3fdf93d5a2e7544465e5a9ee" translate="yes" xml:space="preserve">
          <source>The transaction will return the value given as &lt;code&gt;{:error, value}&lt;/code&gt;.</source>
          <target state="translated">トランザクションは、 &lt;code&gt;{:error, value}&lt;/code&gt; として指定された値を返します。</target>
        </trans-unit>
        <trans-unit id="144f4cd1edb440f47f1246559392f7aed2405665" translate="yes" xml:space="preserve">
          <source>The transport behaviour</source>
          <target state="translated">輸送行動</target>
        </trans-unit>
        <trans-unit id="ffde96e4790584145c12afb10941ddbcfe63b5c3" translate="yes" xml:space="preserve">
          <source>The transport passes a map of metadata and the socket returns &lt;code&gt;{:ok, state}&lt;/code&gt; or &lt;code&gt;:error&lt;/code&gt;. The state must be stored by the transport and returned in all future operations.</source>
          <target state="translated">トランスポートはメタデータのマップを渡し、ソケットは &lt;code&gt;{:ok, state}&lt;/code&gt; または &lt;code&gt;:error&lt;/code&gt; を返します。状態はトランスポートによって保存され、今後のすべての操作で返される必要があります。</target>
        </trans-unit>
        <trans-unit id="0618061b416a03f218c617e087e2e53df218e5c9" translate="yes" xml:space="preserve">
          <source>The transport requires one function:</source>
          <target state="translated">輸送には1つの機能が必要です。</target>
        </trans-unit>
        <trans-unit id="2c0b95368d8ebf1cd3519374ade97eb4d383c66c" translate="yes" xml:space="preserve">
          <source>The triggers the &lt;code&gt;handle_in/3&lt;/code&gt; callback in the channel.</source>
          <target state="translated">トリガーは、チャネルの &lt;code&gt;handle_in/3&lt;/code&gt; コールバックをトリガーします。</target>
        </trans-unit>
        <trans-unit id="42337bbf47f302b6017a80123d119d2018afc1ba" translate="yes" xml:space="preserve">
          <source>The underlying data in the JSON column is returned without any additional decoding. This means &quot;null&quot; JSON values are not the same as SQL's &quot;null&quot;. For example, the &lt;code&gt;Repo.all&lt;/code&gt; operation below returns an empty list because &lt;code&gt;p.meta[&quot;author&quot;]&lt;/code&gt; returns JSON's null and therefore &lt;code&gt;is_nil&lt;/code&gt; does not succeed:</source>
          <target state="translated">JSON列の基になるデータは、追加のデコードなしで返されます。これは、「null」のJSON値がSQLの「null」と同じではないことを意味します。たとえば、以下の &lt;code&gt;Repo.all&lt;/code&gt; 操作は、 &lt;code&gt;p.meta[&quot;author&quot;]&lt;/code&gt; がJSONのnullを返すため、 &lt;code&gt;is_nil&lt;/code&gt; が成功しないため、空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="18e53abaed4d2983226c3cac5079451da818bff2" translate="yes" xml:space="preserve">
          <source>The underlying user is passed to the view and template as &lt;code&gt;:user&lt;/code&gt;, which is inferred from the view name. The name of the key in assigns can be customized with the &lt;code&gt;:as&lt;/code&gt; option:</source>
          <target state="translated">基になるユーザーは、ビュー名から推測される &lt;code&gt;:user&lt;/code&gt; としてビューとテンプレートに渡されます。assignsのキーの名前は、 &lt;code&gt;:as&lt;/code&gt; オプションでカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="1dfd3b303d5fe2aedc67a0b4bc8aa60d95f14665" translate="yes" xml:space="preserve">
          <source>The underlying user is passed to the view and template as &lt;code&gt;:user&lt;/code&gt;, which is inflected from the view name. The name of the key in assigns can be customized with the &lt;code&gt;:as&lt;/code&gt; option:</source>
          <target state="translated">基礎となるユーザーは、ビュー名から反映される &lt;code&gt;:user&lt;/code&gt; としてビューとテンプレートに渡されます。assignsのキーの名前は、 &lt;code&gt;:as&lt;/code&gt; オプションでカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="ece19487ec4f9c9b42291fc4215172a12c3b8537" translate="yes" xml:space="preserve">
          <source>The unique constraint works by relying on the database to check if the unique constraint has been violated or not and, if so, Ecto converts it into a changeset error.</source>
          <target state="translated">ユニーク制約は、データベースに依存してユニーク制約が違反しているかどうかをチェックし、違反している場合、Ectoはそれをチェンジセットエラーに変換することで動作します。</target>
        </trans-unit>
        <trans-unit id="8f24025f778f23bb692d5c7e74205b6b4b984c73" translate="yes" xml:space="preserve">
          <source>The update expression in Ecto supports the following operators:</source>
          <target state="translated">Ectoの更新式は以下の演算子をサポートしています。</target>
        </trans-unit>
        <trans-unit id="9e941c51bb22eea00a76220d6ae9f744a7be5afe" translate="yes" xml:space="preserve">
          <source>The update function receives the current key's value and returns the updated value. Raises if the key does not exist.</source>
          <target state="translated">update 関数は、現在のキーの値を受け取り、更新された値を返します。キーが存在しない場合に発生します。</target>
        </trans-unit>
        <trans-unit id="5b6d6cdb41018b373e7cfa4867802d99511b1902" translate="yes" xml:space="preserve">
          <source>The valid keys are:</source>
          <target state="translated">有効なキーは</target>
        </trans-unit>
        <trans-unit id="d9ef4c02aad1666d20571d41d03ccfe5bdef87c8" translate="yes" xml:space="preserve">
          <source>The validate callback simply updates the changeset based on all form input values, then assigns the new changeset to the socket. If the changeset changes, such as generating new errors, &lt;a href=&quot;phoenix.liveview#c:render/1&quot;&gt;&lt;code&gt;render/1&lt;/code&gt;&lt;/a&gt; is invoked and the form is re-rendered.</source>
          <target state="translated">検証コールバックは、すべてのフォーム入力値に基づいて変更セットを更新し、新しい変更セットをソケットに割り当てるだけです。新しいエラーの生成など、チェンジセットが変更されると、&lt;a href=&quot;phoenix.liveview#c:render/1&quot;&gt; &lt;code&gt;render/1&lt;/code&gt; &lt;/a&gt;が呼び出され、フォームが再レンダリングされます。</target>
        </trans-unit>
        <trans-unit id="cb6cddd8de1840c96ca7fda0519b7a48fb8e1141" translate="yes" xml:space="preserve">
          <source>The values above are not meant to be exact. For example, setting the length to 8_000_000 may end up reading some hundred bytes more from the socket until we halt.</source>
          <target state="translated">上記の値は正確ではありません。例えば、長さを8_000_000に設定すると、停止するまでソケットからさらに数百バイト読み込んでしまう可能性があります。</target>
        </trans-unit>
        <trans-unit id="f62c587734431028a6aa80f1e9be78246f2a1d3f" translate="yes" xml:space="preserve">
          <source>The values above are not meant to be exact. For example, setting the length to &lt;code&gt;8_000_000&lt;/code&gt; may end up reading some hundred bytes more from the socket until we halt.</source>
          <target state="translated">上記の値は正確なものではありません。たとえば、長さを &lt;code&gt;8_000_000&lt;/code&gt; に設定すると、停止するまでソケットからさらに数百バイトが読み取られる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8ecaa2ac2dc3f10d3435db3d9b4bfce660d8e6fb" translate="yes" xml:space="preserve">
          <source>The view layer also contains conveniences for rendering templates, including support for layouts and encoders per format.</source>
          <target state="translated">ビューレイヤーには、レイアウトやフォーマットごとのエンコーダーのサポートなど、テンプレートをレンダリングするための便利な機能も含まれています。</target>
        </trans-unit>
        <trans-unit id="60741f2b56ae9c96f4fb20a37607c7c8a04c0e31" translate="yes" xml:space="preserve">
          <source>The view's job is not only to render HTML templates. Views are about data presentation. Given a bag of data, the view's purpose is to present that in a meaningful way given some format, be it HTML, JSON, CSV, or others. Many web apps today return JSON to remote clients, and Phoenix Views are &lt;em&gt;great&lt;/em&gt; for JSON rendering.</source>
          <target state="translated">ビューの仕事は、HTMLテンプレートをレンダリングすることだけではありません。ビューはデータの表示に関するものです。データのバッグが与えられた場合、ビューの目的は、HTML、JSON、CSVなどの形式で意味のある方法でデータを表示することです。今日の多くのWebアプリはJSONをリモートクライアントに返します。PhoenixViewsはJSONレンダリングに&lt;em&gt;最適&lt;/em&gt;です。</target>
        </trans-unit>
        <trans-unit id="91fa591ef2cba3e61fb437760238714eb628080e" translate="yes" xml:space="preserve">
          <source>The websocket is configurable in your socket:</source>
          <target state="translated">Websocketは、お使いのソケットで設定可能です。</target>
        </trans-unit>
        <trans-unit id="2b5a7e72a4fe9a475fcfc4b4359c0838c82db1da" translate="yes" xml:space="preserve">
          <source>Then Phoenix will never re-render the section above, even if the number of users in the database changes. Instead, you need to store the users as assigns in your LiveView before it renders the template:</source>
          <target state="translated">そうすると、データベース内のユーザー数が変わっても、Phoenixは上記のセクションを再レンダリングすることはありません。その代わりに、テンプレートをレンダリングする前に、ユーザーを割り当てとしてLiveViewに保存しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="19af577dc0e0cc3e9e4137f355fc1af37d4a35b0" translate="yes" xml:space="preserve">
          <source>Then a hook callback object could be defined and passed to the socket:</source>
          <target state="translated">そして、フックコールバックオブジェクトを定義してソケットに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="e364d2682313f21c0b364d5a1f63f57084ff3d81" translate="yes" xml:space="preserve">
          <source>Then access &lt;code&gt;@page_title&lt;/code&gt; in the root layout:</source>
          <target state="translated">次に、ルートレイアウトの &lt;code&gt;@page_title&lt;/code&gt; にアクセスします。</target>
        </trans-unit>
        <trans-unit id="7196b255ac3408de7a3c568b57c1148a6a5e5f86" translate="yes" xml:space="preserve">
          <source>Then add the &lt;a href=&quot;phoenix.liveview.router#fetch_live_flash/2&quot;&gt;&lt;code&gt;Phoenix.LiveView.Router.fetch_live_flash/2&lt;/code&gt;&lt;/a&gt; plug to your browser pipeline, in place of &lt;code&gt;:fetch_flash&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;:fetch_flash&lt;/code&gt; ：の代わりに、&lt;a href=&quot;phoenix.liveview.router#fetch_live_flash/2&quot;&gt; &lt;code&gt;Phoenix.LiveView.Router.fetch_live_flash/2&lt;/code&gt; &lt;/a&gt;プラグをブラウザパイプラインに追加します。</target>
        </trans-unit>
        <trans-unit id="75c95726962fecc66929136723a6281fa6affd6c" translate="yes" xml:space="preserve">
          <source>Then add to your main application's supervision tree (usually in &lt;code&gt;lib/my_app/application.ex&lt;/code&gt;):</source>
          <target state="translated">次に、メインアプリケーションの監視ツリーに追加します（通常は &lt;code&gt;lib/my_app/application.ex&lt;/code&gt; にあります）。</target>
        </trans-unit>
        <trans-unit id="dab777042c47d40f4805c33c94a1bf2e15d3974d" translate="yes" xml:space="preserve">
          <source>Then expect them in the test:</source>
          <target state="translated">そして、テストでそれらを期待してください。</target>
        </trans-unit>
        <trans-unit id="f64fa9df7a55832de8379999e187333ea71240ba" translate="yes" xml:space="preserve">
          <source>Then in your &lt;code&gt;assets/css/app.css&lt;/code&gt; file, import its style:</source>
          <target state="translated">次に、 &lt;code&gt;assets/css/app.css&lt;/code&gt; ファイルで、そのスタイルをインポートします。</target>
        </trans-unit>
        <trans-unit id="b070171e3affccf770658d51e9a5a2feeee14f4d" translate="yes" xml:space="preserve">
          <source>Then in your LiveView &lt;code&gt;mount/3&lt;/code&gt;, you can restore the locale:</source>
          <target state="translated">次に、LiveView &lt;code&gt;mount/3&lt;/code&gt; で、ロケールを復元できます。</target>
        </trans-unit>
        <trans-unit id="f0c5001f8e7c44fc4729c6dbfba0bf39f72beb09" translate="yes" xml:space="preserve">
          <source>Then in your LiveView, you can toggle the assign to trigger the form with the current fields on next render:</source>
          <target state="translated">次に、LiveViewで、次のレンダリング時に現在のフィールドでフォームを起動するように代入をトグルすることができます。</target>
        </trans-unit>
        <trans-unit id="c527e6d510bb99f313314e80e90cb75cc1f4074f" translate="yes" xml:space="preserve">
          <source>Then install the new NPM dependency:</source>
          <target state="translated">そして、新しいNPMの依存関係をインストールします。</target>
        </trans-unit>
        <trans-unit id="b44a39ccd5266edb2d9caad076b683f36a1762b6" translate="yes" xml:space="preserve">
          <source>Then it falls back to the &lt;code&gt;@schema_prefix&lt;/code&gt; attribute declared in the schema given to &lt;code&gt;from&lt;/code&gt;/&lt;code&gt;join&lt;/code&gt;</source>
          <target state="translated">次に、 &lt;code&gt;from&lt;/code&gt; / &lt;code&gt;join&lt;/code&gt; に指定されたスキーマで宣言された &lt;code&gt;@schema_prefix&lt;/code&gt; 属性にフォールバックします</target>
        </trans-unit>
        <trans-unit id="5fe6880ddcb09c2b177e0c20e50dae10169afeef" translate="yes" xml:space="preserve">
          <source>Then it falls back to the query prefix</source>
          <target state="translated">そして、クエリのプレフィックス</target>
        </trans-unit>
        <trans-unit id="a1ac12656c2b3f79bd0a2050e3acbce5cba1ab83" translate="yes" xml:space="preserve">
          <source>Then make sure to call it in every LiveView's &lt;a href=&quot;phoenix.liveview#c:mount/3&quot;&gt;&lt;code&gt;mount/3&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次に、すべてのLiveViewの&lt;a href=&quot;phoenix.liveview#c:mount/3&quot;&gt; &lt;code&gt;mount/3&lt;/code&gt; &lt;/a&gt;で必ず呼び出してください。</target>
        </trans-unit>
        <trans-unit id="1f55476a7acca9fcf01ed95bca9c169e12918f35" translate="yes" xml:space="preserve">
          <source>Then on the server, all LiveView bindings are handled with the &lt;code&gt;handle_event&lt;/code&gt; callback, for example:</source>
          <target state="translated">次に、サーバー上で、すべてのLiveViewバインディングが &lt;code&gt;handle_event&lt;/code&gt; コールバックで処理されます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="0d9c975aa67ad159cfffc8aca53b0fcbfcf6e25a" translate="yes" xml:space="preserve">
          <source>Then the &lt;a href=&quot;phoenix.liveview#c:mount/3&quot;&gt;&lt;code&gt;mount/3&lt;/code&gt;&lt;/a&gt; callback of your LiveView should execute those same verifications:</source>
          <target state="translated">次に、LiveViewの&lt;a href=&quot;phoenix.liveview#c:mount/3&quot;&gt; &lt;code&gt;mount/3&lt;/code&gt; &lt;/a&gt;コールバックで同じ検証を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="f0b91bece7078d6127399b4fede7285d49a284f5" translate="yes" xml:space="preserve">
          <source>Then the module for the &lt;code&gt;@view_module&lt;/code&gt; view can decide to provide scripts with either a precompiled template, or by implementing the function directly, ie:</source>
          <target state="translated">次に、 &lt;code&gt;@view_module&lt;/code&gt; ビューのモジュールは、スクリプトにプリコンパイル済みテンプレートを提供するか、関数を直接実装するかを決定できます。</target>
        </trans-unit>
        <trans-unit id="f14d34a4f2c3d48f59e2e1b8b4a19a69ac94c3f8" translate="yes" xml:space="preserve">
          <source>Then the module under &lt;code&gt;view_module(@conn)&lt;/code&gt; can decide to provide scripts with either a precompiled template, or by implementing the function directly, ie:</source>
          <target state="translated">次に、 &lt;code&gt;view_module(@conn)&lt;/code&gt; の下のモジュールは、プリコンパイルされたテンプレートを使用してスクリプトを提供するか、関数を直接実装するかを決定できます。</target>
        </trans-unit>
        <trans-unit id="bd69831783581e277c0c694fce3ca0c8208fd7dc" translate="yes" xml:space="preserve">
          <source>Then the reporter will attach a listener for the &lt;code&gt;&quot;phoenix.endpoint.stop.duration&quot;&lt;/code&gt; event and will respond to this event by calculating a summary metric with the given event metadata and reporting on that metric to the appropriate source.</source>
          <target state="translated">次に、レポーターは &lt;code&gt;&quot;phoenix.endpoint.stop.duration&quot;&lt;/code&gt; イベントのリスナーをアタッチし、指定されたイベントメタデータを使用して要約メトリックを計算し、そのメトリックについて適切なソースにレポートすることで、このイベントに応答します。</target>
        </trans-unit>
        <trans-unit id="5a0b9d44aabce7da630f72c56a074c5f7a3f3085" translate="yes" xml:space="preserve">
          <source>Then we can reference our new controller as the &lt;code&gt;action_fallback&lt;/code&gt; and simply remove the &lt;code&gt;else&lt;/code&gt; block from our &lt;code&gt;with&lt;/code&gt;:</source>
          <target state="translated">そして、私たちは私たちのように新しいコントローラを参照することができ &lt;code&gt;action_fallback&lt;/code&gt; と単純に削除し &lt;code&gt;else&lt;/code&gt; 私たちからのブロックを &lt;code&gt;with&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="2b9c5f3948060b97e1164d834dab0e2986a1f273" translate="yes" xml:space="preserve">
          <source>Then we'll change the &lt;code&gt;index&lt;/code&gt; action to do nothing but redirect to our new route.</source>
          <target state="translated">次に、 &lt;code&gt;index&lt;/code&gt; アクションを変更して、新しいルートにリダイレクトするだけにします。</target>
        </trans-unit>
        <trans-unit id="c0dafaeb0118a06673409561de14306159c50ceb" translate="yes" xml:space="preserve">
          <source>Then you are able to use your own datetime_select throughout your whole application.</source>
          <target state="translated">そうすれば、アプリケーション全体で独自のdatetime_selectを使用することができます。</target>
        </trans-unit>
        <trans-unit id="ceb5c8aab927695627e6a415525151e60cdf227b" translate="yes" xml:space="preserve">
          <source>Then you can directly create a socket and &lt;a href=&quot;#subscribe_and_join/4&quot;&gt;&lt;code&gt;subscribe_and_join/4&lt;/code&gt;&lt;/a&gt; topics and channels:</source>
          <target state="translated">次に、ソケットと&lt;a href=&quot;#subscribe_and_join/4&quot;&gt; &lt;code&gt;subscribe_and_join/4&lt;/code&gt; &lt;/a&gt;トピックとチャネルを直接作成できます。</target>
        </trans-unit>
        <trans-unit id="584bf72a0acf37e4eddce0ef40e653d37e3153b8" translate="yes" xml:space="preserve">
          <source>Then, in the &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#start/2&quot;&gt;&lt;code&gt;Application.start/2&lt;/code&gt;&lt;/a&gt; callback, attach the handler to this event using a unique handler id:</source>
          <target state="translated">次に、&lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#start/2&quot;&gt; &lt;code&gt;Application.start/2&lt;/code&gt; &lt;/a&gt;コールバックで、一意のハンドラーIDを使用してハンドラーをこのイベントにアタッチします。</target>
        </trans-unit>
        <trans-unit id="1745b5a982e4f76414fc6a64641255e30bd82f09" translate="yes" xml:space="preserve">
          <source>Then, pass the basename of the new layout into &lt;code&gt;put_layout/2&lt;/code&gt; in our &lt;code&gt;index&lt;/code&gt; action in &lt;code&gt;lib/hello_web/controllers/page_controller.ex&lt;/code&gt;.</source>
          <target state="translated">次に、 &lt;code&gt;lib/hello_web/controllers/page_controller.ex&lt;/code&gt; &lt;code&gt;index&lt;/code&gt; アクションで新しいレイアウトのベース名を &lt;code&gt;put_layout/2&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="4655c959b82e207027f846c0e96c80c6352c98fa" translate="yes" xml:space="preserve">
          <source>There are a couple of interesting things to notice about what we just did. We didn't need to stop and re-start the server while we made these changes. Yes, Phoenix has hot code reloading! Also, even though our &lt;code&gt;index.html.eex&lt;/code&gt; file consisted of only a single &lt;code&gt;div&lt;/code&gt; tag, the page we get is a full HTML document. Our index template is rendered into the application layout - &lt;code&gt;lib/hello_web/templates/layout/app.html.eex&lt;/code&gt;. If you open it, you'll see a line that looks like this:</source>
          <target state="translated">私たちが今やったことについて気付くべき興味深いことがいくつかあります。これらの変更を行っている間、サーバーを停止して再起動する必要はありませんでした。はい、Phoenixにはホットコードのリロードがあります！また、 &lt;code&gt;index.html.eex&lt;/code&gt; ファイルは単一の &lt;code&gt;div&lt;/code&gt; タグのみで構成されていましたが、取得するページは完全なHTMLドキュメントです。インデックステンプレートは、アプリケーションレイアウト（ &lt;code&gt;lib/hello_web/templates/layout/app.html.eex&lt;/code&gt; ）にレンダリングされます。それを開くと、次のような行が表示されます。</target>
        </trans-unit>
        <trans-unit id="7cfb6706dad4ed0adea156a71a400336e56fc4b3" translate="yes" xml:space="preserve">
          <source>There are a few things that can go wrong with &lt;code&gt;ecto.create&lt;/code&gt;. If our Postgres database doesn't have a &quot;postgres&quot; role (user), we'll get an error like this one.</source>
          <target state="translated">&lt;code&gt;ecto.create&lt;/code&gt; でうまくいかないことがいくつかあります。Postgresデータベースに「postgres」ロール（ユーザー）がない場合、次のようなエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="a0dcdee5113beb075e0f94cbe43ea0dc06f75667" translate="yes" xml:space="preserve">
          <source>There are a number of places to connect with community members at all experience levels.</source>
          <target state="translated">あらゆる経験レベルでコミュニティメンバーとつながる場所がたくさんあります。</target>
        </trans-unit>
        <trans-unit id="1c1b86b915cfde7a7368137f0a2e48d4add28c22" translate="yes" xml:space="preserve">
          <source>There are also optional packages depending on your configuration:</source>
          <target state="translated">また、構成によってはオプションパッケージもあります。</target>
        </trans-unit>
        <trans-unit id="48e7b53c5d965f68485b3ddac277b810c18b5b6b" translate="yes" xml:space="preserve">
          <source>There are also use cases which are a bad fit for LiveView:</source>
          <target state="translated">また、LiveViewと相性の悪いユースケースもあります。</target>
        </trans-unit>
        <trans-unit id="1b7d6ee807af67ee19de04b8ba6fe4bb0e14f07b" translate="yes" xml:space="preserve">
          <source>There are currently a number of built-in Phoenix-specific and Ecto-specific mix tasks available to us within a newly-generated application. We can also create our own application specific tasks.</source>
          <target state="translated">現在、新しく生成されたアプリケーション内で利用可能な Phoenix-specific と Ecto-specific のミックスタスクがいくつか組み込まれています。また、独自のアプリケーション固有のタスクを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="f4de1bab3bcb78d7de2f1a97fb1645a22d989827" translate="yes" xml:space="preserve">
          <source>There are just a few more things we need to do to make this work. We need to tell our router that it should accept the &lt;code&gt;text&lt;/code&gt; format. We do that by adding &lt;code&gt;text&lt;/code&gt; to the list of accepted formats in the &lt;code&gt;:browser&lt;/code&gt; pipeline. Let's open up &lt;code&gt;lib/hello_web/router.ex&lt;/code&gt; and change the &lt;code&gt;plug :accepts&lt;/code&gt; to include &lt;code&gt;text&lt;/code&gt; as well as &lt;code&gt;html&lt;/code&gt; like this.</source>
          <target state="translated">これを機能させるために必要なことがあと少しあります。 &lt;code&gt;text&lt;/code&gt; 形式を受け入れる必要があることをルーターに通知する必要があります。これを行うには、 &lt;code&gt;:browser&lt;/code&gt; パイプラインで受け入れられる形式のリストに &lt;code&gt;text&lt;/code&gt; を追加します。 &lt;code&gt;lib/hello_web/router.ex&lt;/code&gt; を開いて、 &lt;code&gt;plug :accepts&lt;/code&gt; を変更し、このような &lt;code&gt;text&lt;/code&gt; と &lt;code&gt;html&lt;/code&gt; を含めましょう。</target>
        </trans-unit>
        <trans-unit id="6f91d0d9ce57177167c4420ce8468f849e7c8d5c" translate="yes" xml:space="preserve">
          <source>There are many more validations and transformations we can perform in a changeset. Please see the &lt;a href=&quot;../ecto/ecto.changeset&quot;&gt;Ecto Changeset documentation&lt;/a&gt; for more information.</source>
          <target state="translated">チェンジセットで実行できる検証と変換は他にもたくさんあります。詳細については、&lt;a href=&quot;../ecto/ecto.changeset&quot;&gt;EctoChangesetのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="e051d2e913fcf9b1ffdbc95cb07006f322d1bf3e" translate="yes" xml:space="preserve">
          <source>There are many use cases where LiveView is an excellent fit right now:</source>
          <target state="translated">今、LiveViewが非常に適しているユースケースはたくさんあります。</target>
        </trans-unit>
        <trans-unit id="d6aa20209cea63d81eee09d733072aab9dc644cb" translate="yes" xml:space="preserve">
          <source>There are numerous reporters available, for services like StatsD, Prometheus, and more. You can find them by searching for &quot;telemetry_metrics&quot; on &lt;a href=&quot;https://hex.pm/packages?search=telemetry_metrics&quot;&gt;hex.pm&lt;/a&gt;.</source>
          <target state="translated">StatsD、Prometheusなどのサービスに利用できる多数のレポーターがあります。&lt;a href=&quot;https://hex.pm/packages?search=telemetry_metrics&quot;&gt;hex.pmで&lt;/a&gt;「telemetry_metrics」を検索すると、それらを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="ec9fd294c0e0edd78bdfd8fba29d9ae777edf871" translate="yes" xml:space="preserve">
          <source>There are other HTTP verbs. For example, submitting a form typically uses the POST verb.</source>
          <target state="translated">他にもHTTP動詞があります。例えば、フォームを送信する際には通常POST動詞を使用します。</target>
        </trans-unit>
        <trans-unit id="86d080ada9c12b95f9c19b53c77166860854b8a2" translate="yes" xml:space="preserve">
          <source>There are times when we need to communicate with users during the course of an action. Maybe there was an error updating a schema. Maybe we just want to welcome them back to the application. For this, we have flash messages.</source>
          <target state="translated">アクションの途中でユーザーとコミュニケーションを取る必要がある場合があります。スキーマを更新する際にエラーが発生したかもしれません。アプリケーションに戻ってきたユーザーを歓迎したいのかもしれません。このために、フラッシュメッセージがあります。</target>
        </trans-unit>
        <trans-unit id="eaa6f049cdcc785decf9d1331374c9b1898ba4cc" translate="yes" xml:space="preserve">
          <source>There are two common pitfalls to keep in mind when using the &lt;code&gt;~L&lt;/code&gt; sigil or &lt;code&gt;.leex&lt;/code&gt; templates.</source>
          <target state="translated">使用する際に留意すべき2つの一般的な落とし穴があります &lt;code&gt;~L&lt;/code&gt; 印章や &lt;code&gt;.leex&lt;/code&gt; テンプレートが。</target>
        </trans-unit>
        <trans-unit id="6807336b45c24ae9dbef79351d2099a68159d0ed" translate="yes" xml:space="preserve">
          <source>There are two kind of plugs: function plugs and module plugs.</source>
          <target state="translated">プラグには、機能プラグとモジュールプラグの2種類があります。</target>
        </trans-unit>
        <trans-unit id="bea848af2e953be99cd126902e2324fb347af163" translate="yes" xml:space="preserve">
          <source>There are two main mechanisms for testing components. To test stateless components or just a regular rendering of a component, one can use &lt;a href=&quot;#render_component/2&quot;&gt;&lt;code&gt;render_component/2&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">コンポーネントをテストするための2つの主要なメカニズムがあります。ステートレスコンポーネントまたはコンポーネントの通常のレンダリングをテストするには、&lt;a href=&quot;#render_component/2&quot;&gt; &lt;code&gt;render_component/2&lt;/code&gt; を&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="7e1dd6c129ab09fcb3871f141a18dd6dd0425035" translate="yes" xml:space="preserve">
          <source>There are two types of telemetry events. The ones emitted by Ecto and the ones that are adapter specific.</source>
          <target state="translated">テレメトリーイベントには2つのタイプがあります。Ectoが発するものと アダプタ固有のものです</target>
        </trans-unit>
        <trans-unit id="0c3abfdacb3ac569bf8db5e65409f9dce9bb486d" translate="yes" xml:space="preserve">
          <source>There are two ways to define primary keys in Ecto: using the &lt;code&gt;@primary_key&lt;/code&gt; module attribute and using &lt;code&gt;primary_key: true&lt;/code&gt; as option for &lt;a href=&quot;#field/3&quot;&gt;&lt;code&gt;field/3&lt;/code&gt;&lt;/a&gt; in your schema definition. They are not mutually exclusive and can be used together.</source>
          <target state="translated">There are two ways to define primary keys in Ecto: using the &lt;code&gt;@primary_key&lt;/code&gt; module attribute and using &lt;code&gt;primary_key: true&lt;/code&gt; as option for &lt;a href=&quot;#field/3&quot;&gt; &lt;code&gt;field/3&lt;/code&gt; &lt;/a&gt; in your schema definition. They are not mutually exclusive and can be used together.</target>
        </trans-unit>
        <trans-unit id="f9e7530f090b66e3b01b4d280637820412cb520f" translate="yes" xml:space="preserve">
          <source>There can only be one select expression in a query, if the select expression is omitted, the query will by default select the full schema. If select is given more than once, an error is raised. Use &lt;a href=&quot;#exclude/2&quot;&gt;&lt;code&gt;exclude/2&lt;/code&gt;&lt;/a&gt; if you would like to remove a previous select for overriding or see &lt;a href=&quot;#select_merge/3&quot;&gt;&lt;code&gt;select_merge/3&lt;/code&gt;&lt;/a&gt; for a limited version of &lt;code&gt;select&lt;/code&gt; that is composable and can be called multiple times.</source>
          <target state="translated">クエリに含めることができる選択式は1つだけです。選択式を省略すると、クエリはデフォルトで完全なスキーマを選択します。selectが複数回指定された場合、エラーが発生します。オーバーライドのために以前の選択を削除する場合は&lt;a href=&quot;#exclude/2&quot;&gt; &lt;code&gt;exclude/2&lt;/code&gt; を&lt;/a&gt;使用するか、構成可能で複数回呼び出すことができる &lt;code&gt;select&lt;/code&gt; 限定バージョンについては&lt;a href=&quot;#select_merge/3&quot;&gt; &lt;code&gt;select_merge/3&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1c88e179b2c1fdccf0ace5889abb511cec846bf3" translate="yes" xml:space="preserve">
          <source>There is a fourth &lt;code&gt;router_opts&lt;/code&gt; argument that can be passed. These options are outlined in the &lt;a href=&quot;phoenix.router#scope/2&quot;&gt;&lt;code&gt;Phoenix.Router.scope/2&lt;/code&gt;&lt;/a&gt; documentation.</source>
          <target state="translated">渡すことができる4番目の &lt;code&gt;router_opts&lt;/code&gt; 引数があります。これらのオプションは、&lt;a href=&quot;phoenix.router#scope/2&quot;&gt; &lt;code&gt;Phoenix.Router.scope/2&lt;/code&gt; の&lt;/a&gt;ドキュメントで概説されています。</target>
        </trans-unit>
        <trans-unit id="60774986335f094648654b82d018e24c6920015b" translate="yes" xml:space="preserve">
          <source>There is an example of working with changesets in the introductory documentation in the &lt;a href=&quot;ecto&quot;&gt;&lt;code&gt;Ecto&lt;/code&gt;&lt;/a&gt; module. The functions &lt;a href=&quot;#cast/4&quot;&gt;&lt;code&gt;cast/4&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#change/2&quot;&gt;&lt;code&gt;change/2&lt;/code&gt;&lt;/a&gt; are the usual entry points for creating changesets. The first one is used to cast and validate external parameters, such as parameters sent through a form, API, command line, etc. The second one is used to change data directly from your application.</source>
          <target state="translated">&lt;a href=&quot;ecto&quot;&gt; &lt;code&gt;Ecto&lt;/code&gt; &lt;/a&gt;モジュールの紹介ドキュメントに、チェンジセットの操作の例があります。関数&lt;a href=&quot;#cast/4&quot;&gt; &lt;code&gt;cast/4&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#change/2&quot;&gt; &lt;code&gt;change/2&lt;/code&gt; &lt;/a&gt;は、チェンジセットを作成するための通常のエントリポイントです。1つ目は、フォーム、API、コマンドラインなどを介して送信されるパラメーターなどの外部パラメーターをキャストおよび検証するために使用されます。2つ目は、アプリケーションから直接データを変更するために使用されます。</target>
        </trans-unit>
        <trans-unit id="6c51bdfb925eab670614cd9390b950e516f949e0" translate="yes" xml:space="preserve">
          <source>There is quite a bit more that Ecto can do and we've only barely scratched the surface. With a solid Ecto foundation in place, we're now ready to continue building our app and integrate the web facing application with our backend persistence. Along the way, we'll expand our Ecto knowledge and learn how to properly isolate our web interface from the underlying details of our system. Please take a look at the &lt;a href=&quot;../ecto/index&quot;&gt;Ecto documentation&lt;/a&gt; for the rest of the story.</source>
          <target state="translated">Ectoができることはかなりたくさんあり、表面をかろうじて引っかいただけです。強固なEcto基盤が整ったので、アプリの構築を継続し、ウェブ向けアプリケーションをバックエンドの永続性と統合する準備が整いました。その過程で、Ectoの知識を拡大し、システムの基本的な詳細からWebインターフェイスを適切に分離する方法を学びます。ストーリーの残りの部分については、&lt;a href=&quot;../ecto/index&quot;&gt;Ectoのドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="00efdd6792388b25c72cb1b0a5d138f97391c9b0" translate="yes" xml:space="preserve">
          <source>There's a bit of a code here, so let's break it down. First, we rewrote the &lt;code&gt;create_page&lt;/code&gt; function to require a &lt;code&gt;CMS.Author&lt;/code&gt; struct, which represents the author publishing the post. We then take our changeset and pass it to &lt;code&gt;Ecto.Changeset.put_change/2&lt;/code&gt; to place the &lt;code&gt;author_id&lt;/code&gt; association in the changeset. Next, we use &lt;code&gt;Repo.insert&lt;/code&gt; to insert the new page into the database, containing our associated &lt;code&gt;author_id&lt;/code&gt;.</source>
          <target state="translated">ここに少しコードがあるので、それを分解してみましょう。まず、 &lt;code&gt;create_page&lt;/code&gt; 関数を書き直して、投稿を公開する作成者を表す &lt;code&gt;CMS.Author&lt;/code&gt; 構造体を要求します。次に、チェンジセットを &lt;code&gt;Ecto.Changeset.put_change/2&lt;/code&gt; してEcto.Changeset.put_change / 2に &lt;code&gt;author_id&lt;/code&gt; 、author_idアソシエーションをチェンジセットに配置します。次に、 &lt;code&gt;Repo.insert&lt;/code&gt; を使用して、関連付けられた &lt;code&gt;author_id&lt;/code&gt; を含む新しいページをデータベースに挿入します。</target>
        </trans-unit>
        <trans-unit id="bd27e2a8e827fa726136e1148022cbcd8bbab3bf" translate="yes" xml:space="preserve">
          <source>There's more documentation than code here, but a couple of things are important to highlight. First, we can see again that our Ecto Repo is used under the hood for database access. You probably also noticed the call to &lt;code&gt;User.changeset/2&lt;/code&gt;. We talked about changesets before, and now we see them in action in our context.</source>
          <target state="translated">ここにはコードよりも多くのドキュメントがありますが、強調することが重要なことがいくつかあります。まず、EctoRepoがデータベースアクセスの内部で使用されていることがわかります。 &lt;code&gt;User.changeset/2&lt;/code&gt; の呼び出しにも気づいたかもしれません。以前にチェンジセットについて話しましたが、今では私たちのコンテキストでそれらが実際に動作しているのがわかります。</target>
        </trans-unit>
        <trans-unit id="100960a1d19b2df147cb0c67cb03d0ef859b8a72" translate="yes" xml:space="preserve">
          <source>Therefore it is your responsibility to keep only the assigns necessary in each component. For example, avoid passing all of LiveView components when rendering a component:</source>
          <target state="translated">そのため、各コンポーネントに必要な代入だけを保持するのはあなたの責任です。例えば、コンポーネントをレンダリングする際に、LiveViewのコンポーネントをすべて渡すことは避けてください。</target>
        </trans-unit>
        <trans-unit id="bbbe69bd2d1d3f33a0989c0c7daf1e4f17426993" translate="yes" xml:space="preserve">
          <source>Therefore, if you get a warning that the host does not match, it is either because someone is attempting to steal CSRF tokens or because you have a misconfigured host configuration.</source>
          <target state="translated">したがって、ホストが一致しないという警告が出た場合は、誰かが CSRF トークンを盗もうとしているか、ホストの設定が間違っているかのどちらかです。</target>
        </trans-unit>
        <trans-unit id="3748dac854496bc8faac9591f1822a153d556a4a" translate="yes" xml:space="preserve">
          <source>Therefore, when working with and manipulating external data, it is recommended to use &lt;a href=&quot;ecto.changeset&quot;&gt;&lt;code&gt;Ecto.Changeset&lt;/code&gt;&lt;/a&gt;&amp;rsquo;s that are able to filter and properly cast external data:</source>
          <target state="translated">したがって、外部データを操作する場合は、外部データをフィルタリングして適切にキャストできる&lt;a href=&quot;ecto.changeset&quot;&gt; &lt;code&gt;Ecto.Changeset&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="7e8893d85340fc3862c12874dc8c0caa638bca11" translate="yes" xml:space="preserve">
          <source>Therefore, when working with and manipulating external data, it is recommended to use &lt;a href=&quot;ecto.changeset&quot;&gt;&lt;code&gt;Ecto.Changeset&lt;/code&gt;&lt;/a&gt;'s that are able to filter and properly cast external data:</source>
          <target state="translated">Therefore, when working with and manipulating external data, it is recommended to use &lt;a href=&quot;ecto.changeset&quot;&gt; &lt;code&gt;Ecto.Changeset&lt;/code&gt; &lt;/a&gt;'s that are able to filter and properly cast external data:</target>
        </trans-unit>
        <trans-unit id="d4b6dd62855c1cdb8d6d7226945af7408045cf45" translate="yes" xml:space="preserve">
          <source>These attributes are:</source>
          <target state="translated">これらの属性は</target>
        </trans-unit>
        <trans-unit id="dab402ac1558a423d6bfdf184cdcba60e59a9b1c" translate="yes" xml:space="preserve">
          <source>These fields are reserved for libraries/framework usage.</source>
          <target state="translated">これらのフィールドはライブラリ/フレームワークの使用のために予約されています。</target>
        </trans-unit>
        <trans-unit id="31125242793acf4be0a0cc8a21b6685bbae8a6a2" translate="yes" xml:space="preserve">
          <source>These fields contain request information:</source>
          <target state="translated">これらのフィールドにはリクエスト情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="9c58c3f5a32cf2cabf47af4ce6c2874bf3d0f839" translate="yes" xml:space="preserve">
          <source>These fields contain response information:</source>
          <target state="translated">これらのフィールドには、応答情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="4bf47d1305fab6c065239130eb679be1db4d2859" translate="yes" xml:space="preserve">
          <source>These guides focus on LiveView bindings and client-side integration:</source>
          <target state="translated">これらのガイドでは、LiveViewバインディングとクライアントサイドの統合に焦点を当てています。</target>
        </trans-unit>
        <trans-unit id="e13968d858a6aa2228deefd19ee03e436119ab45" translate="yes" xml:space="preserve">
          <source>These guides focus on server-side functionality:</source>
          <target state="translated">これらのガイドでは、サーバー側の機能に焦点を当てています。</target>
        </trans-unit>
        <trans-unit id="ef711a090a295d12005974a4d06b792bb140e9c3" translate="yes" xml:space="preserve">
          <source>These options are assigned to &lt;code&gt;:private&lt;/code&gt; in the call&amp;rsquo;s &lt;a href=&quot;plug.conn&quot;&gt;&lt;code&gt;Plug.Conn&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これらのオプションは、呼び出しの&lt;a href=&quot;plug.conn&quot;&gt; &lt;code&gt;Plug.Conn&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;:private&lt;/code&gt; に割り当てられます。</target>
        </trans-unit>
        <trans-unit id="24e9ee2f9ab53061b515ecbc4fb47faf1d9a6a50" translate="yes" xml:space="preserve">
          <source>Thinking about design</source>
          <target state="translated">デザインを考える</target>
        </trans-unit>
        <trans-unit id="59fd20a59fd71306464f90cbc93687125b053059" translate="yes" xml:space="preserve">
          <source>This &lt;code&gt;:through&lt;/code&gt; association will return all authors for all comments that belongs to that post:</source>
          <target state="translated">この &lt;code&gt;:through&lt;/code&gt; 関連付けは、その投稿に属するすべてのコメントのすべての作成者を返します。</target>
        </trans-unit>
        <trans-unit id="4199b4f5db3f20ec0146877224956a5aadb69e6f" translate="yes" xml:space="preserve">
          <source>This ability to introspect HTTP requests is really powerful -- and this is but one of &lt;em&gt;many&lt;/em&gt; telemetry events emitted by the Phoenix framework! We'll discuss more of these events, as well as specific patterns for extracting valuable data from Phoenix/Plug events in the &lt;a href=&quot;#phoenix-metrics&quot;&gt;Phoenix Metrics&lt;/a&gt; section later in this guide.</source>
          <target state="translated">HTTPリクエストをイントロスペクトするこの機能は非常に強力です。これは、Phoenixフレームワークによって発行される&lt;em&gt;多くの&lt;/em&gt;テレメトリイベントの1つにすぎません。このガイドの後半の「&lt;a href=&quot;#phoenix-metrics&quot;&gt;フェニックスメトリック」&lt;/a&gt;セクションで、これらのイベントの詳細と、フェニックス/プラグイベントから貴重なデータを抽出するための特定のパターンについて説明します。</target>
        </trans-unit>
        <trans-unit id="007291854548be2f362800441309464462d301ce" translate="yes" xml:space="preserve">
          <source>This adapter uses the following endpoint configuration:</source>
          <target state="translated">このアダプタは、以下のエンドポイント構成を使用します。</target>
        </trans-unit>
        <trans-unit id="a0c1e7b1a6546a0da231a6c048940c7137b1d0c8" translate="yes" xml:space="preserve">
          <source>This allows &lt;code&gt;.leex&lt;/code&gt; templates to drastically optimize the data sent by comprehensions, as the static parts are emitted only once, regardless of the number of items.</source>
          <target state="translated">これにより、 &lt;code&gt;.leex&lt;/code&gt; テンプレートは、アイテムの数に関係なく、静的パーツが1回だけ放出されるため、内包表記によって送信されるデータを大幅に最適化できます。</target>
        </trans-unit>
        <trans-unit id="314e0a3a76540d899cae17754d71892826cfdce8" translate="yes" xml:space="preserve">
          <source>This allows developers to properly translate values coming from the Ecto into adapter ones. For example, if the database does not support booleans but instead returns 0 and 1 for them, you could add:</source>
          <target state="translated">これにより、開発者はEctoからの値を適切にアダプタの値に変換することができます。例えば、データベースがブーリアンをサポートしておらず、代わりに0と1を返す場合は、次のように追加することができます。</target>
        </trans-unit>
        <trans-unit id="c34b4dd019d2b68a7383ace93f2215401ec4cad3" translate="yes" xml:space="preserve">
          <source>This allows developers to properly translate values coming from the adapters into Ecto ones. For example, if the database does not support booleans but instead returns 0 and 1 for them, you could add:</source>
          <target state="translated">これにより、開発者はアダプタからの値を適切に Ecto の値に変換することができます。例えば、データベースがブーリアンをサポートしておらず、代わりに 0 と 1 を返す場合は、次のように追加することができます。</target>
        </trans-unit>
        <trans-unit id="fb97fed7c5bb051af51293923cd1d414d840c2fd" translate="yes" xml:space="preserve">
          <source>This approach is useful when both username and password are specified upfront and available at runtime. However, you may also want to compute a different password for each different user. In those cases, we can use the low-level API.</source>
          <target state="translated">このアプローチは、ユーザ名とパスワードの両方が前もって指定されていて、実行時に利用可能な場合に便利です。しかし、異なるユーザーごとに異なるパスワードを計算したい場合もあるでしょう。そのような場合は、低レベルAPIを使用します。</target>
        </trans-unit>
        <trans-unit id="9069e4b8ffaf3bc20294b7bd6a863e30171a4d03" translate="yes" xml:space="preserve">
          <source>This approach lets us not worry about keeping track of the position of the bindings when composing the query.</source>
          <target state="translated">このアプローチにより、クエリを作成する際にバインディングの位置を気にせずに済むようになりました。</target>
        </trans-unit>
        <trans-unit id="78e0d97646f179af897c91029155ab3de9f02b8b" translate="yes" xml:space="preserve">
          <source>This approach lets us not worry about keeping track of the position of the bindings when composing the query. The &lt;code&gt;:as&lt;/code&gt; option can be given both on joins and on &lt;code&gt;from&lt;/code&gt;:</source>
          <target state="translated">This approach lets us not worry about keeping track of the position of the bindings when composing the query. The &lt;code&gt;:as&lt;/code&gt; option can be given both on joins and on &lt;code&gt;from&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="2f59bfe0a957636ece0be8bfd839e81d84f8f0ae" translate="yes" xml:space="preserve">
          <source>This behaviour provides presence features such as fetching presences for a given topic, as well as handling diffs of join and leave events as they occur in real-time. Using this module defines a supervisor and a module that implements the &lt;a href=&quot;../phoenix_pubsub/phoenix.tracker&quot;&gt;&lt;code&gt;Phoenix.Tracker&lt;/code&gt;&lt;/a&gt; behaviour that uses &lt;a href=&quot;../phoenix_pubsub/phoenix.pubsub&quot;&gt;&lt;code&gt;Phoenix.PubSub&lt;/code&gt;&lt;/a&gt; to broadcast presence updates.</source>
          <target state="translated">This behaviour provides presence features such as fetching presences for a given topic, as well as handling diffs of join and leave events as they occur in real-time. Using this module defines a supervisor and a module that implements the &lt;a href=&quot;../phoenix_pubsub/phoenix.tracker&quot;&gt; &lt;code&gt;Phoenix.Tracker&lt;/code&gt; &lt;/a&gt; behaviour that uses &lt;a href=&quot;../phoenix_pubsub/phoenix.pubsub&quot;&gt; &lt;code&gt;Phoenix.PubSub&lt;/code&gt; &lt;/a&gt; to broadcast presence updates.</target>
        </trans-unit>
        <trans-unit id="6967adaf22d337178372537c6118e0d2b8a63bd3" translate="yes" xml:space="preserve">
          <source>This behaviour provides presence features such as fetching presences for a given topic, as well as handling diffs of join and leave events as they occur in real-time. Using this module defines a supervisor and allows the calling module to implement the &lt;a href=&quot;../phoenix_pubsub/1.0.2/phoenix.tracker&quot;&gt;&lt;code&gt;Phoenix.Tracker&lt;/code&gt;&lt;/a&gt; behaviour which starts a tracker process to handle presence information.</source>
          <target state="translated">この動作は、特定のトピックのプレゼンスのフェッチなどのプレゼンス機能を提供し、リアルタイムで発生するjoinイベントとleaveイベントの差分を処理します。このモジュールを使用すると、監視&lt;a href=&quot;../phoenix_pubsub/1.0.2/phoenix.tracker&quot;&gt; &lt;code&gt;Phoenix.Tracker&lt;/code&gt; &lt;/a&gt;が定義され、呼び出しモジュールが、プレゼンス情報を処理するトラッカープロセスを開始するPhoenix.Tracker動作を実装できるようになります。</target>
        </trans-unit>
        <trans-unit id="e21363635aabca14d08079e73432c541e1ab7506" translate="yes" xml:space="preserve">
          <source>This block is only executed in development. It enables live reloading (if you change a CSS file, they are updated in-browser without refreshing the page), code reloading (so we can see changes to our application without restarting the server), and check repo status (which makes sure our database is up to date, raising readable and actionable error otherwise).</source>
          <target state="translated">このブロックは開発時にのみ実行されます。これは、ライブリロード (CSS ファイルを変更した場合、ページを更新せずにブラウザ内で更新されます)、コードリロード (サーバを再起動せずにアプリケーションの変更を確認できるようにします)、レポステータスのチェック (データベースが最新であることを確認し、そうでない場合は読み取り可能で実行可能なエラーを発生させます)を可能にします。</target>
        </trans-unit>
        <trans-unit id="e7556041936c271690740591770bfe1ea6222272" translate="yes" xml:space="preserve">
          <source>This callback can be used to further modify the query and options before it is transformed and sent to the database.</source>
          <target state="translated">このコールバックを使用して、クエリやオプションをさらに修正してから変換してデータベースに送信することができます。</target>
        </trans-unit>
        <trans-unit id="9b5289f3895306f4a2bb2ce650d1609e9b79d9c7" translate="yes" xml:space="preserve">
          <source>This callback is called on external input and can return any type, as long as the &lt;code&gt;dump/1&lt;/code&gt; function is able to convert the returned value into an Ecto native type. There are two situations where this callback is called:</source>
          <target state="translated">このコールバックは外部入力で呼び出され、 &lt;code&gt;dump/1&lt;/code&gt; 関数が戻り値をEctoネイティブ型に変換できる限り、任意の型を返すことができます。このコールバックが呼び出される状況は2つあります。</target>
        </trans-unit>
        <trans-unit id="f6d40809f5928ded0783d1c5bde4c2ca0dacdca6" translate="yes" xml:space="preserve">
          <source>This callback is called when loading data from the database and receive an Ecto native type. It can return any type, as long as the &lt;code&gt;dump/1&lt;/code&gt; function is able to convert the returned value back into an Ecto native type.</source>
          <target state="translated">このコールバックは、データベースからデータをロードし、Ectoネイティブタイプを受け取るときに呼び出されます。 &lt;code&gt;dump/1&lt;/code&gt; 関数が戻り値をEctoネイティブ型に戻すことができる限り、任意の型を返すことができます。</target>
        </trans-unit>
        <trans-unit id="5dba0f0e5df500a1e88b72d27d9b478ed2ccb47c" translate="yes" xml:space="preserve">
          <source>This callback is called when loading data from the database and receives an Ecto native type. It can return any type, as long as the &lt;code&gt;dump/1&lt;/code&gt; function is able to convert the returned value back into an Ecto native type.</source>
          <target state="translated">This callback is called when loading data from the database and receives an Ecto native type. It can return any type, as long as the &lt;code&gt;dump/1&lt;/code&gt; function is able to convert the returned value back into an Ecto native type.</target>
        </trans-unit>
        <trans-unit id="8391fe8b307eb118c66a1224a190e367cf1e34a5" translate="yes" xml:space="preserve">
          <source>This callback is called with any term that was stored in the struct and it needs to validate them and convert it to an Ecto native type.</source>
          <target state="translated">このコールバックは、構造体に格納されている任意の項で呼び出され、それらを検証してEctoネイティブ型に変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="6bf00040ea79807475cd31c46b891cb8ded6c579" translate="yes" xml:space="preserve">
          <source>This callback is invoked as the entry point for all repository operations. For example, if you are executing a query with preloads, this callback will be invoked once at the beginning, but the options returned here will be passed to all following operations.</source>
          <target state="translated">このコールバックは、すべてのリポジトリ操作のエントリーポイントとして呼び出されます。例えば、プリロードを含むクエリを実行している場合、このコールバックは最初に一度だけ呼び出されますが、ここで返されたオプションはそれ以降のすべての操作に渡されます。</target>
        </trans-unit>
        <trans-unit id="79748d4f4c53c8b678eba754fd8a33ed0dc52111" translate="yes" xml:space="preserve">
          <source>This callback is invoked for all query APIs, including the &lt;code&gt;stream&lt;/code&gt; function, but it is not invoked for &lt;code&gt;insert_all&lt;/code&gt; nor any of the schema functions.</source>
          <target state="translated">This callback is invoked for all query APIs, including the &lt;code&gt;stream&lt;/code&gt; function, but it is not invoked for &lt;code&gt;insert_all&lt;/code&gt; nor any of the schema functions.</target>
        </trans-unit>
        <trans-unit id="b997bebb99d88139d7659f0af87669f8dfb97d13" translate="yes" xml:space="preserve">
          <source>This can be used during tests:</source>
          <target state="translated">テスト中に使用することができます。</target>
        </trans-unit>
        <trans-unit id="d3dd66370a2871bfe63d6fef51a35166fbee8602" translate="yes" xml:space="preserve">
          <source>This can be used to load CSRF state into another process. See &lt;a href=&quot;#dump_state/0&quot;&gt;&lt;code&gt;dump_state/0&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;dump_state_from_session/2&lt;/code&gt; for dumping it.</source>
          <target state="translated">This can be used to load CSRF state into another process. See &lt;a href=&quot;#dump_state/0&quot;&gt; &lt;code&gt;dump_state/0&lt;/code&gt; &lt;/a&gt; and &lt;code&gt;dump_state_from_session/2&lt;/code&gt; for dumping it.</target>
        </trans-unit>
        <trans-unit id="9942f198e47ea544c82a2f3149eb4db211bc77f7" translate="yes" xml:space="preserve">
          <source>This can be used to provide default values per operation that have higher precedence than the values given on configuration or when starting the repository. It can also be used to set query specific options, such as &lt;code&gt;:prefix&lt;/code&gt;.</source>
          <target state="translated">This can be used to provide default values per operation that have higher precedence than the values given on configuration or when starting the repository. It can also be used to set query specific options, such as &lt;code&gt;:prefix&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7451f29af9970208fd48c0f77d572d71c9c6abab" translate="yes" xml:space="preserve">
          <source>This can be useful to implement nested layouts. For example, imagine you have an application layout like this:</source>
          <target state="translated">これは、入れ子になったレイアウトを実装するのに便利です。例えば、次のようなアプリケーションのレイアウトがあるとします。</target>
        </trans-unit>
        <trans-unit id="04c8c29b8e1afac3fcab4f5358a3e87060ee714f" translate="yes" xml:space="preserve">
          <source>This component is never meant to be output directly into the template. It should always be handled by the diffing algorithm.</source>
          <target state="translated">このコンポーネントは、決してテンプレートに直接出力されるものではありません。常にdiffingアルゴリズムによって処理されるべきです。</target>
        </trans-unit>
        <trans-unit id="36cde890ab9fc7b08ed69780233aa5e8d306807f" translate="yes" xml:space="preserve">
          <source>This converts the given embedded schema to a map to be serialized with the given format. For example:</source>
          <target state="translated">これは、与えられた埋め込みスキーマを、与えられたフォーマットでシリアライズされるマップに変換します。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="fffb99485473cd5f2890d8e671445895fea64111" translate="yes" xml:space="preserve">
          <source>This cookie store is based on &lt;a href=&quot;https://hexdocs.pm/plug_crypto/1.0.0/Plug.Crypto.MessageVerifier.html&quot;&gt;&lt;code&gt;Plug.Crypto.MessageVerifier&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/plug_crypto/1.0.0/Plug.Crypto.MessageEncryptor.html&quot;&gt;&lt;code&gt;Plug.Crypto.MessageEncryptor&lt;/code&gt;&lt;/a&gt; which encrypts and signs each cookie to ensure they can&amp;rsquo;t be read nor tampered with.</source>
          <target state="translated">このCookieストアは、&lt;a href=&quot;https://hexdocs.pm/plug_crypto/1.0.0/Plug.Crypto.MessageVerifier.html&quot;&gt; &lt;code&gt;Plug.Crypto.MessageVerifier&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://hexdocs.pm/plug_crypto/1.0.0/Plug.Crypto.MessageEncryptor.html&quot;&gt; &lt;code&gt;Plug.Crypto.MessageEncryptor&lt;/code&gt; に&lt;/a&gt;基づいており、各Cookieを暗号化して署名し、読み取りや改ざんを防止します。</target>
        </trans-unit>
        <trans-unit id="53b55df014db1d36aa928a0d1ab68e9498d7f04f" translate="yes" xml:space="preserve">
          <source>This cookie store is based on &lt;a href=&quot;https://hexdocs.pm/plug_crypto/Plug.Crypto.MessageVerifier.html&quot;&gt;&lt;code&gt;Plug.Crypto.MessageVerifier&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/plug_crypto/Plug.Crypto.MessageEncryptor.html&quot;&gt;&lt;code&gt;Plug.Crypto.MessageEncryptor&lt;/code&gt;&lt;/a&gt; which encrypts and signs each cookie to ensure they can't be read nor tampered with.</source>
          <target state="translated">This cookie store is based on &lt;a href=&quot;https://hexdocs.pm/plug_crypto/Plug.Crypto.MessageVerifier.html&quot;&gt; &lt;code&gt;Plug.Crypto.MessageVerifier&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;https://hexdocs.pm/plug_crypto/Plug.Crypto.MessageEncryptor.html&quot;&gt; &lt;code&gt;Plug.Crypto.MessageEncryptor&lt;/code&gt; &lt;/a&gt; which encrypts and signs each cookie to ensure they can't be read nor tampered with.</target>
        </trans-unit>
        <trans-unit id="88f415484d2416f0c9164e685095abeddba09475" translate="yes" xml:space="preserve">
          <source>This does not expect the repository and therefore does not leverage the cache.</source>
          <target state="translated">これはリポジトリを期待していないので、キャッシュを活用していません。</target>
        </trans-unit>
        <trans-unit id="ee92ad563023f60c952d3ce1d1e4f1a71f755d06" translate="yes" xml:space="preserve">
          <source>This doesn't correspond to any action in our controller, which is fine. We'll exercise it in an &lt;code&gt;iex&lt;/code&gt; session. At the root of our project, we can run &lt;code&gt;iex -S mix&lt;/code&gt;, and then explicitly render our template.</source>
          <target state="translated">これは、コントローラーのどのアクションにも対応していません。これは問題ありません。 &lt;code&gt;iex&lt;/code&gt; セッションで演習します。プロジェクトのルートで、 &lt;code&gt;iex -S mix&lt;/code&gt; を実行してから、テンプレートを明示的にレンダリングできます。</target>
        </trans-unit>
        <trans-unit id="8358ce5c448165474c59ccb6634f95fedb0d2fb6" translate="yes" xml:space="preserve">
          <source>This emulates behaviour performed by browsers where cookies returned in the response are available in following requests.</source>
          <target state="translated">これは、レスポンスで返されたクッキーが次のリクエストで利用可能なブラウザで実行される動作をエミュレートします。</target>
        </trans-unit>
        <trans-unit id="fa7d6e6dcda78ceca060025cce3f5837a513f835" translate="yes" xml:space="preserve">
          <source>This event should be invoked on every query sent to the adapter, including queries that are related to the transaction management.</source>
          <target state="translated">このイベントは、アダプタに送信されたすべてのクエリ (トランザクション管理に関連するクエリを含む)で起動されなければなりません。</target>
        </trans-unit>
        <trans-unit id="c0c41eb119619d93df37edc66780e62d9f72d4b1" translate="yes" xml:space="preserve">
          <source>This exception is commonly raised by &lt;a href=&quot;phoenix.controller#accepts/2&quot;&gt;&lt;code&gt;Phoenix.Controller.accepts/2&lt;/code&gt;&lt;/a&gt; which negotiates the media types the server is able to serve with the contents the client is able to render.</source>
          <target state="translated">この例外は通常、&lt;a href=&quot;phoenix.controller#accepts/2&quot;&gt; &lt;code&gt;Phoenix.Controller.accepts/2&lt;/code&gt; &lt;/a&gt;によって発生します。Phoenix.Controller.accepts/ 2は、サーバーが提供できるメディアタイプとクライアントがレンダリングできるコンテンツをネゴシエートします。</target>
        </trans-unit>
        <trans-unit id="e27c88fc5d1a3d0121b169f096d2ac516c60e1ae" translate="yes" xml:space="preserve">
          <source>This exception is raised by &lt;a href=&quot;phoenix.controller#scrub_params/2&quot;&gt;&lt;code&gt;Phoenix.Controller.scrub_params/2&lt;/code&gt;&lt;/a&gt; which:</source>
          <target state="translated">この例外は、&lt;a href=&quot;phoenix.controller#scrub_params/2&quot;&gt; &lt;code&gt;Phoenix.Controller.scrub_params/2&lt;/code&gt; &lt;/a&gt;によって発生します。</target>
        </trans-unit>
        <trans-unit id="0fa6cbcebc05c777d1c7368f7969366f4e084a6c" translate="yes" xml:space="preserve">
          <source>This feature is very useful when queries need to be built based on some user input, like web search forms, CLIs and so on.</source>
          <target state="translated">この機能は、ウェブ検索フォームやCLIなどのように、何らかのユーザー入力に基づいてクエリを構築する必要がある場合に非常に便利です。</target>
        </trans-unit>
        <trans-unit id="736fb0a01b93ff59374b8773d572c0d61a1c4bf4" translate="yes" xml:space="preserve">
          <source>This first group contains validations that take a keyword list of validators, where the validators are shown immediately following the validation type. This list may also include a &lt;code&gt;message:&lt;/code&gt; key.</source>
          <target state="translated">この最初のグループには、バリデーターのキーワードリストを使用するバリデーションが含まれています。バリデーターはバリデーションタイプの直後に表示されます。このリストには、 &lt;code&gt;message:&lt;/code&gt; key も含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="08a01cc9d2b834ac5065ca0c4859bc17a52873c2" translate="yes" xml:space="preserve">
          <source>This format is used when rendering a template as an atom. For example, &lt;code&gt;render(conn, :foo)&lt;/code&gt; will render &lt;code&gt;&quot;foo.FORMAT&quot;&lt;/code&gt; where the format is the one set here. The default format is typically set from the negotiation done in &lt;a href=&quot;#accepts/2&quot;&gt;&lt;code&gt;accepts/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">This format is used when rendering a template as an atom. For example, &lt;code&gt;render(conn, :foo)&lt;/code&gt; will render &lt;code&gt;&quot;foo.FORMAT&quot;&lt;/code&gt; where the format is the one set here. The default format is typically set from the negotiation done in &lt;a href=&quot;#accepts/2&quot;&gt; &lt;code&gt;accepts/2&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a654e5931463e5b13804f19ebe7438789fab9cac" translate="yes" xml:space="preserve">
          <source>This function accepts all options defined &lt;a href=&quot;http://erlang.org/doc/man/ssl.html&quot;&gt;in Erlang/OTP &lt;code&gt;:ssl&lt;/code&gt; documentation&lt;/a&gt;.</source>
          <target state="translated">This function accepts all options defined &lt;a href=&quot;http://erlang.org/doc/man/ssl.html&quot;&gt;in Erlang/OTP &lt;code&gt;:ssl&lt;/code&gt; documentation&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1b203fe59546a0ae658a9d0fdb623d409065b4b9" translate="yes" xml:space="preserve">
          <source>This function accepts and validates all options defined in &lt;a href=&quot;http://www.erlang.org/doc/man/ssl.html&quot;&gt;the &lt;code&gt;ssl&lt;/code&gt; erlang module&lt;/a&gt;. With the following additions:</source>
          <target state="translated">この関数は&lt;a href=&quot;http://www.erlang.org/doc/man/ssl.html&quot;&gt;、 &lt;code&gt;ssl&lt;/code&gt; erlangモジュールで&lt;/a&gt;定義されたすべてのオプションを受け入れて検証します。以下を追加します。</target>
        </trans-unit>
        <trans-unit id="ff98681cd9fee831827f27fd0a9d833563a2d938" translate="yes" xml:space="preserve">
          <source>This function allows you to automatically sign and encrypt cookies. When signing or encryption is enabled, then any Elixir value can be stored in the cookie (except anonymous functions for security reasons). Once a value is signed or encrypted, you must also call &lt;a href=&quot;#fetch_cookies/2&quot;&gt;&lt;code&gt;fetch_cookies/2&lt;/code&gt;&lt;/a&gt; with the name of the cookies that are either signed or encrypted.</source>
          <target state="translated">This function allows you to automatically sign and encrypt cookies. When signing or encryption is enabled, then any Elixir value can be stored in the cookie (except anonymous functions for security reasons). Once a value is signed or encrypted, you must also call &lt;a href=&quot;#fetch_cookies/2&quot;&gt; &lt;code&gt;fetch_cookies/2&lt;/code&gt; &lt;/a&gt; with the name of the cookies that are either signed or encrypted.</target>
        </trans-unit>
        <trans-unit id="8560ae300306496e1e57a607297b4be5809ada0e" translate="yes" xml:space="preserve">
          <source>This function behaves the same as &lt;a href=&quot;#dump/2&quot;&gt;&lt;code&gt;dump/2&lt;/code&gt;&lt;/a&gt;, except for composite types the given &lt;code&gt;dumper&lt;/code&gt; function is used.</source>
          <target state="translated">この関数は、指定された &lt;code&gt;dumper&lt;/code&gt; 関数が使用される複合型を除いて、&lt;a href=&quot;#dump/2&quot;&gt; &lt;code&gt;dump/2&lt;/code&gt; &lt;/a&gt;と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="6a586051ba535bcfaa3ec3caebe587edd887bffe" translate="yes" xml:space="preserve">
          <source>This function behaves the same as &lt;a href=&quot;#load/2&quot;&gt;&lt;code&gt;load/2&lt;/code&gt;&lt;/a&gt;, except for composite types the given &lt;code&gt;loader&lt;/code&gt; function is used.</source>
          <target state="translated">この関数は、指定された &lt;code&gt;loader&lt;/code&gt; 関数が使用される複合型を除いて、&lt;a href=&quot;#load/2&quot;&gt; &lt;code&gt;load/2&lt;/code&gt; &lt;/a&gt;と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="e50d6767dc020a64e6d3d29750a6078f1a51289d" translate="yes" xml:space="preserve">
          <source>This function can also be used to dynamically load through associations by giving it a list. For example, to get all authors for all comments for the given posts, do:</source>
          <target state="translated">この関数は、リストを与えることで、関連付けを動的にロードするためにも使用することができます。例えば、与えられた投稿のすべてのコメントの著者を取得するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="b31679aebb0e8c28069688039b1fa1e4998948f2" translate="yes" xml:space="preserve">
          <source>This function copies the cookie information in &lt;code&gt;old_conn&lt;/code&gt; into &lt;code&gt;new_conn&lt;/code&gt;, emulating multiple requests done by clients where cookies are always passed forward, and returns the new version of &lt;code&gt;new_conn&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;old_conn&lt;/code&gt; のcookie情報を &lt;code&gt;new_conn&lt;/code&gt; にコピーし、cookie が常に転送されるクライアントによって行われた複数の要求をエミュレートし、新しいバージョンの &lt;code&gt;new_conn&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1fe1674ac966f1e7e84fdd91a095f600ff50b42e" translate="yes" xml:space="preserve">
          <source>This function depends on gathering the messages sent by the test adapter when assets are pushed. Calling this function will clear the pushed message from the inbox for the process. To assert on multiple pushes, the result of the function should be stored in a variable.</source>
          <target state="translated">この関数は、アセットがプッシュされたときにテストアダプタから送信されるメッセージを収集することに依存します。この関数をコールすると、プロセスの受信箱からプッシュされたメッセージがクリアされます。複数のプッシュに対してアサートするには、関数の結果を変数に格納する必要があります。</target>
        </trans-unit>
        <trans-unit id="1660cbe1db7037c9964f911ded4eb4f26591a176" translate="yes" xml:space="preserve">
          <source>This function depends on gathering the messages sent by the test adapter when informational messages, such as an early hint, are sent. Calling this function will clear the informational request messages from the inbox for the process. To assert on multiple informs, the result of the function should be stored in a variable.</source>
          <target state="translated">この関数は、初期ヒントなどの情報提供メッセージが送信されたときにテストアダプタが送信するメッセージを収集することに依存します。この関数を呼び出すと、プロセスの受信箱から情報要求メッセージがクリアされます。複数の情報をアサートするには、関数の結果を変数に格納しなければなりません。</target>
        </trans-unit>
        <trans-unit id="a9a8dbd1e103ae7949082890ccdcca71a8261b80" translate="yes" xml:space="preserve">
          <source>This function does not fetch parameters from the body. To fetch parameters from the body, use the &lt;a href=&quot;plug.parsers&quot;&gt;&lt;code&gt;Plug.Parsers&lt;/code&gt;&lt;/a&gt; plug.</source>
          <target state="translated">この関数は、本体からパラメーターをフェッチしません。本体からパラメーターをフェッチするには、&lt;a href=&quot;plug.parsers&quot;&gt; &lt;code&gt;Plug.Parsers&lt;/code&gt; &lt;/a&gt;プラグを使用します。</target>
        </trans-unit>
        <trans-unit id="20ea2b75919a9c3dd8b26d94997fe49393523498" translate="yes" xml:space="preserve">
          <source>This function does the following:</source>
          <target state="translated">この関数は以下のようなことを行います。</target>
        </trans-unit>
        <trans-unit id="c8689955a82c196a1de5806c3547594bd18663df" translate="yes" xml:space="preserve">
          <source>This function exists as an extension point for libraries to add new types of associations to Ecto. For the existing APIs, see &lt;a href=&quot;#belongs_to/3&quot;&gt;&lt;code&gt;belongs_to/3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#has_many/3&quot;&gt;&lt;code&gt;has_many/3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#has_one/3&quot;&gt;&lt;code&gt;has_one/3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#many_to_many/3&quot;&gt;&lt;code&gt;many_to_many/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、新しいタイプの関連付けをEctoに追加するためのライブラリの拡張ポイントとして存在します。既存のAPIについては、&lt;a href=&quot;#belongs_to/3&quot;&gt; &lt;code&gt;belongs_to/3&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#has_many/3&quot;&gt; &lt;code&gt;has_many/3&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#has_one/3&quot;&gt; &lt;code&gt;has_one/3&lt;/code&gt; &lt;/a&gt;、many_to_many / 3を&lt;a href=&quot;#many_to_many/3&quot;&gt; &lt;code&gt;many_to_many/3&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5b2304f76a58fd59e742ef62114c970eef992a68" translate="yes" xml:space="preserve">
          <source>This function exists to provide quick feedback to users of your application. It should not be relied on for any data guarantee as it has race conditions and is inherently unsafe. For example, if this check happens twice in the same time interval (because the user submitted a form twice), both checks may pass and you may end-up with duplicate entries in the database. Therefore, a &lt;a href=&quot;#unique_constraint/3&quot;&gt;&lt;code&gt;unique_constraint/3&lt;/code&gt;&lt;/a&gt; should also be used to ensure your data won&amp;rsquo;t get corrupted.</source>
          <target state="translated">この関数は、アプリケーションのユーザーに迅速なフィードバックを提供するために存在します。競合状態があり、本質的に安全ではないため、データの保証に依存すべきではありません。たとえば、このチェックが同じ時間間隔で2回発生すると（ユーザーがフォームを2回送信したため）、両方のチェックに合格し、データベース内のエントリが重複する可能性があります。したがって、データが破損しないようにするために、&lt;a href=&quot;#unique_constraint/3&quot;&gt; &lt;code&gt;unique_constraint/3&lt;/code&gt; &lt;/a&gt;も使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="dc2d67a85e75f44fb49399d03fb1c45ee6231022" translate="yes" xml:space="preserve">
          <source>This function exists to provide quick feedback to users of your application. It should not be relied on for any data guarantee as it has race conditions and is inherently unsafe. For example, if this check happens twice in the same time interval (because the user submitted a form twice), both checks may pass and you may end-up with duplicate entries in the database. Therefore, a &lt;a href=&quot;#unique_constraint/3&quot;&gt;&lt;code&gt;unique_constraint/3&lt;/code&gt;&lt;/a&gt; should also be used to ensure your data won't get corrupted.</source>
          <target state="translated">This function exists to provide quick feedback to users of your application. It should not be relied on for any data guarantee as it has race conditions and is inherently unsafe. For example, if this check happens twice in the same time interval (because the user submitted a form twice), both checks may pass and you may end-up with duplicate entries in the database. Therefore, a &lt;a href=&quot;#unique_constraint/3&quot;&gt; &lt;code&gt;unique_constraint/3&lt;/code&gt; &lt;/a&gt; should also be used to ensure your data won't get corrupted.</target>
        </trans-unit>
        <trans-unit id="73fef9a49538642527fff343bf96706313c19d33" translate="yes" xml:space="preserve">
          <source>This function expects the current schema, the association cardinality, the association name, the association module (that implements &lt;code&gt;Ecto.Association&lt;/code&gt; callbacks) and a keyword list of options.</source>
          <target state="translated">この関数は、現在のスキーマ、関連付けの基数、関連付けの名前、関連付けモジュール（ &lt;code&gt;Ecto.Association&lt;/code&gt; コールバックを実装する）、およびオプションのキーワードリストを想定しています。</target>
        </trans-unit>
        <trans-unit id="9dea39cef34defdfd207a8eb99802b8d948cd9f6" translate="yes" xml:space="preserve">
          <source>This function generates the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag without its closing part. Check &lt;a href=&quot;#form_tag/3&quot;&gt;&lt;code&gt;form_tag/3&lt;/code&gt;&lt;/a&gt; for generating an enclosing tag.</source>
          <target state="translated">この関数は、終了部分なしで &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; タグを生成します。囲みタグを生成するために&lt;a href=&quot;#form_tag/3&quot;&gt; &lt;code&gt;form_tag/3&lt;/code&gt; &lt;/a&gt;を確認してください。</target>
        </trans-unit>
        <trans-unit id="53f40e7f6118a94a757813a716439f649282ffc1" translate="yes" xml:space="preserve">
          <source>This function is a shortcut for:</source>
          <target state="translated">この機能はショートカットです。</target>
        </trans-unit>
        <trans-unit id="6306e2e81e647cdb91b3f8a11699265b79a2778b" translate="yes" xml:space="preserve">
          <source>This function is able to handle both chunked and identity transfer-encoding by default.</source>
          <target state="translated">この関数は、デフォルトではチャンク化とID転送エンコードの両方を扱うことができます。</target>
        </trans-unit>
        <trans-unit id="d4b953f4ee21fe94d4050f234c2003683ae8f4ad" translate="yes" xml:space="preserve">
          <source>This function is called at compile time, and should raise if invalid values are specified. It is idiomatic that the parameters returned from this are a map. &lt;code&gt;field&lt;/code&gt; and &lt;code&gt;schema&lt;/code&gt; will be injected into the options automatically.</source>
          <target state="translated">この関数はコンパイル時に呼び出され、無効な値が指定された場合に発生するはずです。これから返されるパラメータがマップであることは慣用的です。 &lt;code&gt;field&lt;/code&gt; と &lt;code&gt;schema&lt;/code&gt; はオプションに自動的に挿入されます。</target>
        </trans-unit>
        <trans-unit id="fe83ec596d61f20f781d548aba70cef9549cb117" translate="yes" xml:space="preserve">
          <source>This function is called when an application is started using &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#start/2&quot;&gt;&lt;code&gt;Application.start/2&lt;/code&gt;&lt;/a&gt; (and functions on top of that, such as &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#ensure_started/2&quot;&gt;&lt;code&gt;Application.ensure_started/2&lt;/code&gt;&lt;/a&gt;). This function should start the top-level process of the application (which should be the top supervisor of the application&amp;rsquo;s supervision tree if the application follows the OTP design principles around supervision).</source>
          <target state="translated">アプリケーションを使用して開始されたときに、この関数が呼び出され&lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#start/2&quot;&gt; &lt;code&gt;Application.start/2&lt;/code&gt; &lt;/a&gt;（例えば、その上及び機能を&lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#ensure_started/2&quot;&gt; &lt;code&gt;Application.ensure_started/2&lt;/code&gt; &lt;/a&gt;）。この関数は、アプリケーションの最上位プロセスを開始する必要があります（アプリケーションが監視に関するOTP設計原則に従っている場合は、アプリケーションの監視ツリーの最上位のスーパーバイザーでなければなりません）。</target>
        </trans-unit>
        <trans-unit id="f40bd7c1cf4ae95315c3ffd80bd8b3a7c29506eb" translate="yes" xml:space="preserve">
          <source>This function is called when an application is started using &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#start/2&quot;&gt;&lt;code&gt;Application.start/2&lt;/code&gt;&lt;/a&gt; (and functions on top of that, such as &lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#ensure_started/2&quot;&gt;&lt;code&gt;Application.ensure_started/2&lt;/code&gt;&lt;/a&gt;). This function should start the top-level process of the application (which should be the top supervisor of the application's supervision tree if the application follows the OTP design principles around supervision).</source>
          <target state="translated">この関数は、&lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#start/2&quot;&gt; &lt;code&gt;Application.start/2&lt;/code&gt; &lt;/a&gt;（およびその上にある&lt;a href=&quot;https://hexdocs.pm/elixir/Application.html#ensure_started/2&quot;&gt; &lt;code&gt;Application.ensure_started/2&lt;/code&gt; &lt;/a&gt;などの関数）を使用してアプリケーションを起動したときに呼び出されます。この関数は、アプリケーションのトップレベルプロセスを開始する必要があります（アプリケーションが監視に関するOTP設計原則に従っている場合は、アプリケーションの監視ツリーのトップスーパーバイザーである必要があります）。</target>
        </trans-unit>
        <trans-unit id="866cdfbc4d38507dc477d2b6e7b5a6b73c6d3bd8" translate="yes" xml:space="preserve">
          <source>This function is deprecated. Use reraise/1 or reraise/4 instead.</source>
          <target state="translated">この関数は非推奨です。代わりに reraise/1 または reraise/4 を使用してください。</target>
        </trans-unit>
        <trans-unit id="889e6268cee5d42d732aa072ffb292fc6aa1faee" translate="yes" xml:space="preserve">
          <source>This function is especially useful when parsing raw query results:</source>
          <target state="translated">この関数は、生のクエリ結果を解析する際に特に便利です。</target>
        </trans-unit>
        <trans-unit id="1060a96b14370e1a1be3ad60f1c900dfde2028ca" translate="yes" xml:space="preserve">
          <source>This function is meant to mimic what the user can actually do, so you cannot set hidden input values. However, hidden values can be given when calling &lt;a href=&quot;#render_submit/2&quot;&gt;&lt;code&gt;render_submit/2&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#render_change/2&quot;&gt;&lt;code&gt;render_change/2&lt;/code&gt;&lt;/a&gt;, see their docs for examples.</source>
          <target state="translated">この関数は、ユーザーが実際に実行できることを模倣することを目的としているため、非表示の入力値を設定することはできません。ただし、&lt;a href=&quot;#render_submit/2&quot;&gt; &lt;code&gt;render_submit/2&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#render_change/2&quot;&gt; &lt;code&gt;render_change/2&lt;/code&gt; を&lt;/a&gt;呼び出すときに非表示の値を指定できます。例については、それらのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f2fbdc7b6be0d3c0040fc63965553cbf76fdb977" translate="yes" xml:space="preserve">
          <source>This function is often called internally by adapters, such as Cowboy, to validate and set reasonable defaults for SSL handling. Therefore Plug users are not expected to invoke it directly, rather you pass the relevant SSL options to your adapter which then invokes this.</source>
          <target state="translated">この関数は、SSL 処理の妥当なデフォルト値を検証したり設定したりするために、 Cowboy のようなアダプタから内部的に呼び出されることがよくあります。そのため、プラグインのユーザはこの関数を直接呼び出すことは期待していません。</target>
        </trans-unit>
        <trans-unit id="ce00aa1228b7b92a142997d61b397de721dd3451" translate="yes" xml:space="preserve">
          <source>This function is particularly useful when associations and embeds are cast in the changeset as it will traverse all associations and embeds and place all errors in a series of nested maps.</source>
          <target state="translated">この関数は、すべてのアソシエーションとエンベッドを追跡し、すべてのエラーを入れ子になった一連のマップに配置するので、チェンジセットにアソシエーションとエンベッドがキャストされている場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="9ea2792030796068ebee3771205dce320fb98fd5" translate="yes" xml:space="preserve">
          <source>This function is primarily used by &lt;a href=&quot;ecto.query#select_merge/3&quot;&gt;&lt;code&gt;Ecto.Query.select_merge/3&lt;/code&gt;&lt;/a&gt; to merge different select clauses.</source>
          <target state="translated">この関数は主に、&lt;a href=&quot;ecto.query#select_merge/3&quot;&gt; &lt;code&gt;Ecto.Query.select_merge/3&lt;/code&gt; &lt;/a&gt;がさまざまな選択句をマージするために使用します。</target>
        </trans-unit>
        <trans-unit id="95e4d0ba9a962e855d63d60b4fd26e982ea84569" translate="yes" xml:space="preserve">
          <source>This function is used for authorization purposes and it may be invoked outside of the process that effectively runs the socket.</source>
          <target state="translated">この関数は認証のために使用され、ソケットを実質的に実行しているプロセスの外部から呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="b1f60f736835987ffe4d869279d98e0a0470fd3a" translate="yes" xml:space="preserve">
          <source>This function is used to work with associations as a whole. For example, if a Post has many Comments, it allows you to add, remove or change all comments at once. If your goal is to simply add a new comment to a post, then it is preferred to do so manually, as we will describe later in the &quot;Example: Adding a comment to a post&quot; section.</source>
          <target state="translated">この機能は、関連付けを全体として扱うために使用します。例えば、投稿に多くのコメントがある場合、一度にすべてのコメントを追加、削除、変更することができます。単に投稿に新しいコメントを追加することを目的としているのであれば、後述の「例.例:記事にコメントを追加する」のセクションで後述します。</target>
        </trans-unit>
        <trans-unit id="22adf8e4771dc77ddcc4249d7919749c29698a38" translate="yes" xml:space="preserve">
          <source>This function is used to work with associations as a whole. For example, if a Post has many Comments, it allows you to add, remove or change all comments at once. If your goal is to simply add a new comment to a post, then it is preferred to do so manually, as we will describe later in the &amp;ldquo;Example: Adding a comment to a post&amp;rdquo; section.</source>
          <target state="translated">この関数は、関連付け全体を処理するために使用されます。たとえば、投稿に多数のコメントがある場合、一度にすべてのコメントを追加、削除、または変更できます。投稿に新しいコメントを追加するだけの場合は、後で「例：投稿にコメントを追加する」セクションで説明するように、手動で追加することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="08eda1f3849525ce418b408dadef19a29c0b6f84" translate="yes" xml:space="preserve">
          <source>This function is used to work with embeds as a whole. For embeds with cardinality one, &lt;code&gt;nil&lt;/code&gt; can be used to remove the existing entry. For embeds with many entries, an empty list may be given instead.</source>
          <target state="translated">この関数は、埋め込み全体を処理するために使用されます。カーディナリティが1の埋め込みの場合、 &lt;code&gt;nil&lt;/code&gt; を使用して既存のエントリを削除できます。多くのエントリを含む埋め込みの場合は、代わりに空のリストを指定できます。</target>
        </trans-unit>
        <trans-unit id="3dd54b454514d325837202458e298d9589a1ceed" translate="yes" xml:space="preserve">
          <source>This function is useful for removing empty strings sent via HTML forms. If you are providing an API, there is likely no need to invoke &lt;a href=&quot;#scrub_params/2&quot;&gt;&lt;code&gt;scrub_params/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、HTMLフォーム経由で送信された空の文字列を削除するのに役立ちます。APIを提供している場合、&lt;a href=&quot;#scrub_params/2&quot;&gt; &lt;code&gt;scrub_params/2&lt;/code&gt; &lt;/a&gt;を呼び出す必要はおそらくありません。</target>
        </trans-unit>
        <trans-unit id="64ae2d3a9800574311ce709ebfa7b91aac472431" translate="yes" xml:space="preserve">
          <source>This function is useful for sending boolean values to the server.</source>
          <target state="translated">この関数は、サーバにブール値を送信するのに便利です。</target>
        </trans-unit>
        <trans-unit id="2e8d3ec5712ad07392b313c25f730d33813e39fc" translate="yes" xml:space="preserve">
          <source>This function is useful for:</source>
          <target state="translated">この機能を利用すると便利です。</target>
        </trans-unit>
        <trans-unit id="0f8df1aeec38d6ef055f78ffe52b7fd809b11de3" translate="yes" xml:space="preserve">
          <source>This function is useful in JavaScript responses when there is a need to escape HTML rendered from other templates, like in the following:</source>
          <target state="translated">この関数は、以下のように他のテンプレートからレンダリングされたHTMLをエスケープする必要がある場合に、JavaScriptのレスポンスで便利です。</target>
        </trans-unit>
        <trans-unit id="8bd46d36363c15990125532c0d54d1cd70be4c83" translate="yes" xml:space="preserve">
          <source>This function is useful to detect if the client is running on an outdated version of the marked static files. It works by comparing the static paths sent by the client with the one on the server.</source>
          <target state="translated">この関数は、クライアントがマークされた静的ファイルの古いバージョンで動作しているかどうかを検出するのに便利です。この関数は、クライアントから送信された静的パスとサーバ上のパスを比較することで動作します。</target>
        </trans-unit>
        <trans-unit id="5f05751e977e06b61bae3058808ef7801122a3bf" translate="yes" xml:space="preserve">
          <source>This function is useful when the code being invoked crashes and there is a need to verify a particular response was sent even with the crash. It returns a tuple with &lt;code&gt;{status, headers, body}&lt;/code&gt;.</source>
          <target state="translated">この関数は、呼び出されるコードがクラッシュし、クラッシュしても特定の応答が送信されたことを確認する必要がある場合に役立ちます。 &lt;code&gt;{status, headers, body}&lt;/code&gt; 含むタプルを返します。</target>
        </trans-unit>
        <trans-unit id="feb7b5f249171806db774de8814da72fc6867cc9" translate="yes" xml:space="preserve">
          <source>This function is useful when the multi to be merged requires information from the original multi. Hence the second argument is an anonymous function that receives the multi changes so far. The anonymous function must return another multi.</source>
          <target state="translated">この関数は、マージするマルチが元のマルチからの情報を必要とする場合に便利です。したがって、第2引数は、これまでのマルチの変更を受け取る匿名関数です。匿名関数は別のマルチを返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="ea36ab9cf50bba27fd6813a84418b75a89007160" translate="yes" xml:space="preserve">
          <source>This function is useful when you may want to serve different content-types (such as JSON and HTML) from the same routes. However, if you always have distinct routes, you can also disable content negotiation and simply hardcode your format of choice in your route pipelines:</source>
          <target state="translated">この機能は、同じルートから異なるコンテンツタイプ (JSON や HTML など)を提供したい場合に便利です。しかし、常に異なるルートを持っている場合は、コンテントネゴシエーションを無効にして、ルートパイプラインで選択したフォーマットをハードコードすることもできます。</target>
        </trans-unit>
        <trans-unit id="51ef3241f414eaf2fb4a40b3c68e3fe5a7aa4417" translate="yes" xml:space="preserve">
          <source>This function merges two changesets provided they have been applied to the same data (their &lt;code&gt;:data&lt;/code&gt; field is equal); if the data differs, an &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; exception is raised. If one of the changesets has a &lt;code&gt;:repo&lt;/code&gt; field which is not &lt;code&gt;nil&lt;/code&gt;, then the value of that field is used as the &lt;code&gt;:repo&lt;/code&gt; field of the resulting changeset; if both changesets have a non-&lt;code&gt;nil&lt;/code&gt; and different &lt;code&gt;:repo&lt;/code&gt; field, an &lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt;&lt;code&gt;ArgumentError&lt;/code&gt;&lt;/a&gt; exception is raised.</source>
          <target state="translated">この関数は、同じデータに適用されている（それらの &lt;code&gt;:data&lt;/code&gt; フィールドが等しい）2つのチェンジセットをマージします。データが異なる場合、&lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;例外が発生します。チェンジセットの1つに &lt;code&gt;nil&lt;/code&gt; でない &lt;code&gt;:repo&lt;/code&gt; フィールドがある場合、そのフィールドの値は、結果のチェンジセットの &lt;code&gt;:repo&lt;/code&gt; フィールドとして使用されます。両方のチェンジセットに非 &lt;code&gt;nil&lt;/code&gt; で異なる &lt;code&gt;:repo&lt;/code&gt; フィールドがある場合、&lt;a href=&quot;https://hexdocs.pm/elixir/ArgumentError.html&quot;&gt; &lt;code&gt;ArgumentError&lt;/code&gt; &lt;/a&gt;例外が発生します。</target>
        </trans-unit>
        <trans-unit id="dbc0dbbbaa75e1f372b0e07a9f6b951709ad2563" translate="yes" xml:space="preserve">
          <source>This function must be called after the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Plug.CSRFProtection&lt;/code&gt;&lt;/a&gt; plug is invoked. If a token was not yet computed, it will be.</source>
          <target state="translated">This function must be called after the &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Plug.CSRFProtection&lt;/code&gt; &lt;/a&gt; plug is invoked. If a token was not yet computed, it will be.</target>
        </trans-unit>
        <trans-unit id="47d374217596346a6c9bf2274712172feb075b08" translate="yes" xml:space="preserve">
          <source>This function only looks at the &lt;code&gt;:changes&lt;/code&gt; field of the given &lt;code&gt;changeset&lt;/code&gt; and returns &lt;code&gt;{:ok, value}&lt;/code&gt; if the change is present or &lt;code&gt;:error&lt;/code&gt; if it&amp;rsquo;s not.</source>
          <target state="translated">この関数は、指定された &lt;code&gt;changeset&lt;/code&gt; の &lt;code&gt;:changes&lt;/code&gt; フィールドのみを調べ、変更が存在する場合は &lt;code&gt;{:ok, value}&lt;/code&gt; を返し、存在しない場合は &lt;code&gt;:error&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="5e1143e93cf32871e96d09b6d702308f61d09b3a" translate="yes" xml:space="preserve">
          <source>This function only looks at the &lt;code&gt;:changes&lt;/code&gt; field of the given &lt;code&gt;changeset&lt;/code&gt; and returns &lt;code&gt;{:ok, value}&lt;/code&gt; if the change is present or &lt;code&gt;:error&lt;/code&gt; if it's not.</source>
          <target state="translated">This function only looks at the &lt;code&gt;:changes&lt;/code&gt; field of the given &lt;code&gt;changeset&lt;/code&gt; and returns &lt;code&gt;{:ok, value}&lt;/code&gt; if the change is present or &lt;code&gt;:error&lt;/code&gt; if it's not.</target>
        </trans-unit>
        <trans-unit id="7b8bed5158880c80ee8a08504ebf97b167b84dc1" translate="yes" xml:space="preserve">
          <source>This function overrides the default URL generation pulled from the &lt;code&gt;%Plug.Conn{}&lt;/code&gt;'s endpoint configuration.</source>
          <target state="translated">This function overrides the default URL generation pulled from the &lt;code&gt;%Plug.Conn{}&lt;/code&gt; 's endpoint configuration.</target>
        </trans-unit>
        <trans-unit id="58cb08d9d2f1cf23b4f2a78d41b863c40f49073a" translate="yes" xml:space="preserve">
          <source>This function raises &lt;a href=&quot;phoenix.notacceptableerror&quot;&gt;&lt;code&gt;Phoenix.NotAcceptableError&lt;/code&gt;&lt;/a&gt;, which is rendered with status 406, whenever the server cannot serve a response in any of the formats expected by the client.</source>
          <target state="translated">この関数は、サーバーがクライアントが予期する形式のいずれかで応答を提供できない場合は常に、ステータス406でレンダリングされる&lt;a href=&quot;phoenix.notacceptableerror&quot;&gt; &lt;code&gt;Phoenix.NotAcceptableError&lt;/code&gt; &lt;/a&gt;を発生させます。</target>
        </trans-unit>
        <trans-unit id="1c663a7b4ad2604d2adc9bea7e89c5bd791f16f9" translate="yes" xml:space="preserve">
          <source>This function reads a chunk of the request body up to a given &lt;code&gt;:length&lt;/code&gt;. If there is more data to be read, then &lt;code&gt;{:more, partial_body, conn}&lt;/code&gt; is returned. Otherwise &lt;code&gt;{:ok, body, conn}&lt;/code&gt; is returned. In case of an error reading the socket, &lt;code&gt;{:error, reason}&lt;/code&gt; is returned as per &lt;a href=&quot;http://www.erlang.org/doc/man/gen_tcp.html#recv-2&quot;&gt;&lt;code&gt;:gen_tcp.recv/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、指定された &lt;code&gt;:length&lt;/code&gt; までのリクエスト本文のチャンクを読み取ります。読み取るデータが &lt;code&gt;{:more, partial_body, conn}&lt;/code&gt; 場合は、{：more、partial_body、conn}が返されます。それ以外の場合は &lt;code&gt;{:ok, body, conn}&lt;/code&gt; が返されます。ソケットの読み取り中にエラーが発生した場合、 &lt;code&gt;{:error, reason}&lt;/code&gt; が&lt;a href=&quot;http://www.erlang.org/doc/man/gen_tcp.html#recv-2&quot;&gt; &lt;code&gt;:gen_tcp.recv/2&lt;/code&gt; &lt;/a&gt;として返されます。</target>
        </trans-unit>
        <trans-unit id="68ac965b424fbcfc28adb7e70510b4a5060b1986" translate="yes" xml:space="preserve">
          <source>This function reads a chunk of the request body up to a given length (specified by the &lt;code&gt;:length&lt;/code&gt; option). If there is more data to be read, then &lt;code&gt;{:more, partial_body, conn}&lt;/code&gt; is returned. Otherwise &lt;code&gt;{:ok, body, conn}&lt;/code&gt; is returned. In case of an error reading the socket, &lt;code&gt;{:error, reason}&lt;/code&gt; is returned as per &lt;a href=&quot;http://www.erlang.org/doc/man/gen_tcp.html#recv-2&quot;&gt;&lt;code&gt;:gen_tcp.recv/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この関数は、指定された長さ（ &lt;code&gt;:length&lt;/code&gt; オプションで指定）までの要求本文のチャンクを読み取ります。読み取るデータが &lt;code&gt;{:more, partial_body, conn}&lt;/code&gt; 場合は、{：more、partial_body、conn}が返されます。それ以外の場合は &lt;code&gt;{:ok, body, conn}&lt;/code&gt; が返されます。ソケットの読み取り中にエラーが発生した場合、 &lt;code&gt;{:error, reason}&lt;/code&gt; が&lt;a href=&quot;http://www.erlang.org/doc/man/gen_tcp.html#recv-2&quot;&gt; &lt;code&gt;:gen_tcp.recv/2&lt;/code&gt; &lt;/a&gt;として返されます。</target>
        </trans-unit>
        <trans-unit id="d0c8691b7f9dfce0fa8e902a83efb3fb90903475" translate="yes" xml:space="preserve">
          <source>This function removes every key from the session, clearing the session.</source>
          <target state="translated">この機能は、セッションからすべてのキーを削除し、セッションをクリアします。</target>
        </trans-unit>
        <trans-unit id="23ea244127c3693a61fb279dd8a8823e78d495c2" translate="yes" xml:space="preserve">
          <source>This function requires the associated data to have been preloaded, except when the parent changeset has been newly build and not yet persisted. Missing data will invoke the &lt;code&gt;:on_replace&lt;/code&gt; behaviour defined on the association.</source>
          <target state="translated">この関数を使用するには、親のチェンジセットが新しくビルドされてまだ永続化されていない場合を除き、関連するデータがプリロードされている必要があります。データが欠落していると、関連付けに定義されている &lt;code&gt;:on_replace&lt;/code&gt; 動作が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="508ff7af2c7302ba5ea60f62775c6f5a3c9b9900" translate="yes" xml:space="preserve">
          <source>This function requires the associated data to have been preloaded, except when the parent changeset has been newly built and not yet persisted. Missing data will invoke the &lt;code&gt;:on_replace&lt;/code&gt; behaviour defined on the association.</source>
          <target state="translated">This function requires the associated data to have been preloaded, except when the parent changeset has been newly built and not yet persisted. Missing data will invoke the &lt;code&gt;:on_replace&lt;/code&gt; behaviour defined on the association.</target>
        </trans-unit>
        <trans-unit id="84382455309fc0aaf784468937d5e8642608c1e5" translate="yes" xml:space="preserve">
          <source>This function should be used when working with the entire association at once (and not a single element of a many-style association) and receiving data external to the application.</source>
          <target state="translated">この関数は、アソシエーション全体を一度に処理する場合(多形式アソシエーションの単一要素ではなく)と、アプリケーションの外部データを受信する場合に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3736933a577a29ee24ad93a05c7c32aef1bea88b" translate="yes" xml:space="preserve">
          <source>This function should be used when working with the entire association at once (and not a single element of a many-style association) and using data external to the application.</source>
          <target state="translated">この関数は、アソシエーション全体を一度に処理する場合(多スタイルアソシエーションの単一要素ではなく)、アプリケーションの外部データを使用する場合に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="481b5ba0284c556ea198200d20cec067478414db" translate="yes" xml:space="preserve">
          <source>This function should either return &lt;code&gt;{:ok, pid}&lt;/code&gt; or &lt;code&gt;{:ok, pid, state}&lt;/code&gt; if startup is successful. &lt;code&gt;pid&lt;/code&gt; should be the PID of the top supervisor. &lt;code&gt;state&lt;/code&gt; can be an arbitrary term, and if omitted will default to &lt;code&gt;[]&lt;/code&gt;; if the application is later stopped, &lt;code&gt;state&lt;/code&gt; is passed to the &lt;code&gt;stop/1&lt;/code&gt; callback (see the documentation for the &lt;code&gt;c:stop/1&lt;/code&gt; callback for more information).</source>
          <target state="translated">起動が成功した場合 &lt;code&gt;{:ok, pid, state}&lt;/code&gt; この関数は &lt;code&gt;{:ok, pid}&lt;/code&gt; または{：ok、pid、state}を返す必要があります。 &lt;code&gt;pid&lt;/code&gt; は、トップのスーパーバイザのPIDである必要があります。 &lt;code&gt;state&lt;/code&gt; は任意の用語にすることができ、省略した場合はデフォルトで &lt;code&gt;[]&lt;/code&gt; になります。アプリケーションが後で停止した場合、 &lt;code&gt;state&lt;/code&gt; は &lt;code&gt;stop/1&lt;/code&gt; コールバックに渡されます（詳細については、 &lt;code&gt;c:stop/1&lt;/code&gt; コールバックのドキュメントを参照してください）。</target>
        </trans-unit>
        <trans-unit id="bf1fdd59778e871792165fd9cd597befae6dbe8a" translate="yes" xml:space="preserve">
          <source>This function should return &lt;code&gt;{:ok, value}&lt;/code&gt; where &lt;code&gt;value&lt;/code&gt; is the value under &lt;code&gt;key&lt;/code&gt; if the key exists in the term, or &lt;code&gt;:error&lt;/code&gt; if the key does not exist in the term.</source>
          <target state="translated">この関数は返すべき &lt;code&gt;{:ok, value}&lt;/code&gt; &lt;code&gt;value&lt;/code&gt; 下の値である &lt;code&gt;key&lt;/code&gt; のキー用語に存在する、または場合 &lt;code&gt;:error&lt;/code&gt; キー用語に存在しない場合。</target>
        </trans-unit>
        <trans-unit id="5ba272759196f5f4398bb53efebf29cecd454930" translate="yes" xml:space="preserve">
          <source>This function should return:</source>
          <target state="translated">この関数は返すべきです。</target>
        </trans-unit>
        <trans-unit id="734b0856ba9ef7d3fe8e856bcb519a57b1180774" translate="yes" xml:space="preserve">
          <source>This function, as well as &lt;a href=&quot;#get/3&quot;&gt;&lt;code&gt;get/3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#post/3&quot;&gt;&lt;code&gt;post/3&lt;/code&gt;&lt;/a&gt; and friends, accepts the request body or parameters as last argument:</source>
          <target state="translated">この関数は、&lt;a href=&quot;#get/3&quot;&gt; &lt;code&gt;get/3&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#post/3&quot;&gt; &lt;code&gt;post/3&lt;/code&gt; &lt;/a&gt;、およびその他のフレンドと同様に、リクエストの本文またはパラメーターを最後の引数として受け入れます。</target>
        </trans-unit>
        <trans-unit id="206f33c29b6ec02bb699170e45e3a167ce8f68a1" translate="yes" xml:space="preserve">
          <source>This functionality exists mostly for integration with &lt;code&gt;Phoenix.LiveView&lt;/code&gt; that replaces the anonymous function for explicit closing of the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag:</source>
          <target state="translated">This functionality exists mostly for integration with &lt;code&gt;Phoenix.LiveView&lt;/code&gt; that replaces the anonymous function for explicit closing of the &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; tag:</target>
        </trans-unit>
        <trans-unit id="5e501818f2a9b8d26ee849f92368c85b2aa84ace" translate="yes" xml:space="preserve">
          <source>This functionality exists mostly for integration with &lt;code&gt;Phoenix.LiveView&lt;/code&gt; that replaces the anonymous function for returning the generated forms instead.</source>
          <target state="translated">This functionality exists mostly for integration with &lt;code&gt;Phoenix.LiveView&lt;/code&gt; that replaces the anonymous function for returning the generated forms instead.</target>
        </trans-unit>
        <trans-unit id="60a9005f28b867008de687c6b297116271dbe0ee" translate="yes" xml:space="preserve">
          <source>This generator uses default options provided in the &lt;code&gt;:generators&lt;/code&gt; configuration of the &lt;code&gt;:phoenix&lt;/code&gt; application. These are the defaults:</source>
          <target state="translated">このジェネレーターは、 &lt;code&gt;:phoenix&lt;/code&gt; アプリケーションの &lt;code&gt;:generators&lt;/code&gt; 設定で提供されるデフォルトのオプションを使用します。これらはデフォルトです：</target>
        </trans-unit>
        <trans-unit id="a8c79d64b76e704cc3305c267e9609ec954e0a9b" translate="yes" xml:space="preserve">
          <source>This generator uses default options provided in the &lt;code&gt;:generators&lt;/code&gt; configuration of your application. These are the defaults:</source>
          <target state="translated">このジェネレーターは、アプリケーションの &lt;code&gt;:generators&lt;/code&gt; 構成で提供されるデフォルトのオプションを使用します。これらはデフォルトです：</target>
        </trans-unit>
        <trans-unit id="ea9fd1bcd7395e4e765f0c8c83f634242ed59708" translate="yes" xml:space="preserve">
          <source>This generator will automatically open the config/config.exs after generation if you have &lt;code&gt;ECTO_EDITOR&lt;/code&gt; set in your environment variable.</source>
          <target state="translated">環境変数に &lt;code&gt;ECTO_EDITOR&lt;/code&gt; が設定されている場合、このジェネレーターは生成後にconfig / config.exsを自動的に開きます。</target>
        </trans-unit>
        <trans-unit id="799bbac2299c4700ae113704fdd4823ec89feb26" translate="yes" xml:space="preserve">
          <source>This guide assumes that we have generated our new application with Ecto integration and that we will be using PostgreSQL. The introductory guides cover how to get your first application up and running. For instructions on switching to MySQL, please see the &lt;a href=&quot;#using-mysql&quot;&gt;Using MySQL&lt;/a&gt; section.</source>
          <target state="translated">このガイドは、Ecto統合を使用して新しいアプリケーションを生成し、PostgreSQLを使用することを前提としています。入門ガイドでは、最初のアプリケーションを起動して実行する方法について説明します。MySQLに切り替える手順については、「&lt;a href=&quot;#using-mysql&quot;&gt;MySQL&lt;/a&gt;の使用」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="9beabe4b707e9a75951987e66a396037df415c99" translate="yes" xml:space="preserve">
          <source>This guide describes how to use these parameters to set up an HTTPS server with Plug, and documents some best-practices and potential pitfalls.</source>
          <target state="translated">このガイドでは、これらのパラメータを使用して Plug で HTTPS サーバをセットアップする方法と、ベストプラクティスと潜在的な落とし穴について説明します。</target>
        </trans-unit>
        <trans-unit id="351d79dff782082a2ce188e37bb0ce9252eef229" translate="yes" xml:space="preserve">
          <source>This inner representation allows us to render and compose templates easily. For example, if you want to render JSON data, we could do so by adding a &quot;show.json&quot; entry to &lt;code&gt;render/2&lt;/code&gt; in our view:</source>
          <target state="translated">This inner representation allows us to render and compose templates easily. For example, if you want to render JSON data, we could do so by adding a &quot;show.json&quot; entry to &lt;code&gt;render/2&lt;/code&gt; in our view:</target>
        </trans-unit>
        <trans-unit id="0ef1c03d35aad86fcc35b135848f7173bd9a0fa9" translate="yes" xml:space="preserve">
          <source>This inner representation allows us to render and compose templates easily. For example, if you want to render JSON data, we could do so by adding a &amp;ldquo;show.json&amp;rdquo; entry to &lt;code&gt;render/2&lt;/code&gt; in our view:</source>
          <target state="translated">この内部表現により、テンプレートを簡単にレンダリングおよび作成できます。たとえば、JSONデータをレンダリングする場合は、ビューの &lt;code&gt;render/2&lt;/code&gt; に「show.json」エントリを追加することで実現できます。</target>
        </trans-unit>
        <trans-unit id="70ed772bfcabd3597901563673c3cda720c91986" translate="yes" xml:space="preserve">
          <source>This is also what calling &lt;a href=&quot;../phoenix_html/phoenix.html.safe#to_iodata/1&quot;&gt;&lt;code&gt;Phoenix.HTML.Safe.to_iodata/1&lt;/code&gt;&lt;/a&gt; with a &lt;a href=&quot;phoenix.liveview.rendered&quot;&gt;&lt;code&gt;Phoenix.LiveView.Rendered&lt;/code&gt;&lt;/a&gt; structure returns.</source>
          <target state="translated">これは、&lt;a href=&quot;phoenix.liveview.rendered&quot;&gt; &lt;code&gt;Phoenix.LiveView.Rendered&lt;/code&gt; &lt;/a&gt;構造を使用してPhoenix.HTML.Safe.to_iodata &lt;a href=&quot;../phoenix_html/phoenix.html.safe#to_iodata/1&quot;&gt; &lt;code&gt;Phoenix.HTML.Safe.to_iodata/1&lt;/code&gt; &lt;/a&gt;を呼び出すと返されるものでもあります。</target>
        </trans-unit>
        <trans-unit id="9df51736f8af300b7e83be2bba6d0538a65eaf19" translate="yes" xml:space="preserve">
          <source>This is an implementation of EEx.Engine that guarantees templates are HTML Safe.</source>
          <target state="translated">テンプレートが HTML セーフであることを保証する EEx.Engine の実装です。</target>
        </trans-unit>
        <trans-unit id="22dfd0ec4ef3534510402dea1f9a067863780a64" translate="yes" xml:space="preserve">
          <source>This is available only inside subqueries.</source>
          <target state="translated">これはサブクエリ内でのみ利用可能です。</target>
        </trans-unit>
        <trans-unit id="5329254754bcb5b1518f7c46c55cd4246cdc7b2b" translate="yes" xml:space="preserve">
          <source>This is best used in conjunction with &lt;code&gt;parent_as&lt;/code&gt; to correlate the subquery with the parent query to test some condition on related rows in a different table. In the above example the query returns posts which have at least one comment that has more than 5 replies.</source>
          <target state="translated">This is best used in conjunction with &lt;code&gt;parent_as&lt;/code&gt; to correlate the subquery with the parent query to test some condition on related rows in a different table. In the above example the query returns posts which have at least one comment that has more than 5 replies.</target>
        </trans-unit>
        <trans-unit id="dd363ee9be583e8940f3872abf411010d65f4b10" translate="yes" xml:space="preserve">
          <source>This is callback is invoked when a custom type is given to &lt;code&gt;field&lt;/code&gt; with the &lt;code&gt;:autogenerate&lt;/code&gt; flag.</source>
          <target state="translated">This is callback is invoked when a custom type is given to &lt;code&gt;field&lt;/code&gt; with the &lt;code&gt;:autogenerate&lt;/code&gt; flag.</target>
        </trans-unit>
        <trans-unit id="1eb11a6027445daec6c09612ab24edc4bb15dc55" translate="yes" xml:space="preserve">
          <source>This is callback is invoked when a parameterized type is given to &lt;code&gt;field&lt;/code&gt; with the &lt;code&gt;:autogenerate&lt;/code&gt; flag.</source>
          <target state="translated">これは、 &lt;code&gt;:autogenerate&lt;/code&gt; フラグを使用してパラメーター化された型が &lt;code&gt;field&lt;/code&gt; 指定されたときに呼び出されるコールバックです。</target>
        </trans-unit>
        <trans-unit id="7a6276fd1995acb9d422ef5b0fccedcd0f49f563" translate="yes" xml:space="preserve">
          <source>This is configured in your application environment like:</source>
          <target state="translated">のようにアプリケーション環境で設定されています。</target>
        </trans-unit>
        <trans-unit id="543130ccea506a07596bda5da2eb43221176545d" translate="yes" xml:space="preserve">
          <source>This is done as a security measure to avoid attacks that attempt to traverse entries with nil columns. To check that value is &lt;code&gt;nil&lt;/code&gt;, use &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#is_nil/1&quot;&gt;&lt;code&gt;is_nil/1&lt;/code&gt;&lt;/a&gt; instead:</source>
          <target state="translated">これは、nil列を持つエントリを走査しようとする攻撃を回避するためのセキュリティ対策として行われます。値が &lt;code&gt;nil&lt;/code&gt; であることを確認するには、代わりに&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#is_nil/1&quot;&gt; &lt;code&gt;is_nil/1&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="4067008cb24e88317e907e2f01cf3fea3ce7a290" translate="yes" xml:space="preserve">
          <source>This is done by regularly fetching the record from the database, then checking whether another user has made changes to the record &lt;em&gt;only when updating the record&lt;/em&gt;. This behaviour is ideal in situations where the chances of concurrent updates to the same record are low; if they&amp;rsquo;re not, pessimistic locking or other concurrency patterns may be more suited.</source>
          <target state="translated">これは、データベースから定期的にレコードをフェッチし、レコードを&lt;em&gt;更新するときにのみ&lt;/em&gt;、別のユーザーがレコードに変更を加えたかどうかを確認することで行われます。この動作は、同じレコードに対する同時更新の可能性が低い状況で理想的です。そうでない場合は、悲観的ロックまたは他の同時実行パターンの方が適している可能性があります。</target>
        </trans-unit>
        <trans-unit id="823d31394ade33b7711fd9d9b5d40e1240503c08" translate="yes" xml:space="preserve">
          <source>This is done by regularly fetching the record from the database, then checking whether another user has made changes to the record &lt;em&gt;only when updating the record&lt;/em&gt;. This behaviour is ideal in situations where the chances of concurrent updates to the same record are low; if they're not, pessimistic locking or other concurrency patterns may be more suited.</source>
          <target state="translated">This is done by regularly fetching the record from the database, then checking whether another user has made changes to the record &lt;em&gt;only when updating the record&lt;/em&gt;. This behaviour is ideal in situations where the chances of concurrent updates to the same record are low; if they're not, pessimistic locking or other concurrency patterns may be more suited.</target>
        </trans-unit>
        <trans-unit id="6e8026b3623dfa096a82605e21a4cd8c802a6f2c" translate="yes" xml:space="preserve">
          <source>This is equivalent to setting the status and the body and then calling &lt;a href=&quot;#send_resp/1&quot;&gt;&lt;code&gt;send_resp/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これは、ステータスと本文を設定してから&lt;a href=&quot;#send_resp/1&quot;&gt; &lt;code&gt;send_resp/1&lt;/code&gt; を&lt;/a&gt;呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="d9ba82c91234fa5021cfb3b5cb56f8799ec54310" translate="yes" xml:space="preserve">
          <source>This is especially useful when working with subqueries, where you may need to refer to a parent binding with &lt;code&gt;parent_as&lt;/code&gt;, which is not known when writing the subquery:</source>
          <target state="translated">This is especially useful when working with subqueries, where you may need to refer to a parent binding with &lt;code&gt;parent_as&lt;/code&gt; , which is not known when writing the subquery:</target>
        </trans-unit>
        <trans-unit id="30cd495df7102722d59e1ffd84611b6001636dff" translate="yes" xml:space="preserve">
          <source>This is great, exactly what we want. Note how every route, path helper and controller is properly namespaced.</source>
          <target state="translated">これは素晴らしいです。すべてのルート、パスヘルパー、コントローラが適切な名前空間になっていることに注目してください。</target>
        </trans-unit>
        <trans-unit id="66c9554f976f86ea7cfddef7a13a078b61322160" translate="yes" xml:space="preserve">
          <source>This is helpful when you are not testing joining the channel and just need the socket.</source>
          <target state="translated">これは、チャンネルへの接続テストを行わず、ソケットだけが必要な場合に便利です。</target>
        </trans-unit>
        <trans-unit id="e67b3c4ca838f0b073d784d2fa79097d1fe7dad2" translate="yes" xml:space="preserve">
          <source>This is invoked only once per socket regardless of the number of transports and should be responsible for setting up any process structure used exclusively by the socket regardless of transports.</source>
          <target state="translated">これは、トランスポートの数に関係なくソケットごとに一度だけ呼び出され、トランスポートに関係なくソケットでのみ使用されるプロセス構造体を設定する責任があります。</target>
        </trans-unit>
        <trans-unit id="23ca0e35e10c4c620e6434a93de5f315f4cc8c3f" translate="yes" xml:space="preserve">
          <source>This is just what we saw before when we ran &lt;a href=&quot;mix.tasks.phx.gen.schema&quot;&gt;&lt;code&gt;mix phx.gen.schema&lt;/code&gt;&lt;/a&gt;, except here we see a &lt;code&gt;@doc false&lt;/code&gt; above our &lt;code&gt;changeset/2&lt;/code&gt; function. This tells us that while this function is publicly callable, it's not part of the public context API. Callers that build changesets do so via the context API. For example, &lt;code&gt;Accounts.create_user/1&lt;/code&gt; calls into our &lt;code&gt;User.changeset/2&lt;/code&gt; to build the changeset from user input. Callers, such as our controller actions, do not access &lt;code&gt;User.changeset/2&lt;/code&gt; directly. All interaction with our user changesets is done through the public &lt;code&gt;Accounts&lt;/code&gt; context.</source>
          <target state="translated">これは、&lt;a href=&quot;mix.tasks.phx.gen.schema&quot;&gt; &lt;code&gt;mix phx.gen.schema&lt;/code&gt; &lt;/a&gt;を実行したときに以前に見たものですが、 &lt;code&gt;changeset/2&lt;/code&gt; 関数の上に &lt;code&gt;@doc false&lt;/code&gt; 表示されている点が異なります。これは、この関数はパブリックに呼び出すことができますが、パブリックコンテキストAPIの一部ではないことを示しています。チェンジセットを構築する呼び出し元は、コンテキストAPIを介して構築します。たとえば、 &lt;code&gt;Accounts.create_user/1&lt;/code&gt; は &lt;code&gt;User.changeset/2&lt;/code&gt; を呼び出して、ユーザー入力から変更セットを構築します。コントローラアクションなどの呼び出し元は、 &lt;code&gt;User.changeset/2&lt;/code&gt; に直接アクセスしません。ユーザーチェンジセットとのすべてのやり取りは、パブリック &lt;code&gt;Accounts&lt;/code&gt; コンテキストを介して行われます。</target>
        </trans-unit>
        <trans-unit id="b7a657048e2c2cbfd50712010e238e2e21a97516" translate="yes" xml:space="preserve">
          <source>This is known to have a plethora of problems including accessibility, large numbers are converted to exponential notation and scrolling can accidentally increase or decrease the number.</source>
          <target state="translated">これは、アクセスしやすい、大きな数字が指数表記に変換される、スクロールすると誤って数字が増減するなど、多くの問題があることが知られています。</target>
        </trans-unit>
        <trans-unit id="575f8d14a96e0e9c2305203019fa9f1c1e03c389" translate="yes" xml:space="preserve">
          <source>This is not intended to be an exhaustive list, as this topic is actually a bit beyond the scope of the current document. The issue is a generic one, not specific to Erlang/Elixir, and further explanations can be found online.</source>
          <target state="translated">これは完全なリストではないので、このトピックは現在のドキュメントの範囲を少し超えています。この問題は一般的なもので、Erlang/Elixirに特有のものではありません。</target>
        </trans-unit>
        <trans-unit id="2d0916f452cd067b42f99269461a6e8a22fcd085" translate="yes" xml:space="preserve">
          <source>This is particularly useful when used with &lt;a href=&quot;plug.builder#builder_opts/0&quot;&gt;&lt;code&gt;Plug.Builder.builder_opts/0&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;builder_opts/0&lt;/code&gt; allows us to pass options received when initializing &lt;code&gt;AppRouter&lt;/code&gt; to a specific plug, such as dispatch itself. So if instead of:</source>
          <target state="translated">This is particularly useful when used with &lt;a href=&quot;plug.builder#builder_opts/0&quot;&gt; &lt;code&gt;Plug.Builder.builder_opts/0&lt;/code&gt; &lt;/a&gt;. &lt;code&gt;builder_opts/0&lt;/code&gt; allows us to pass options received when initializing &lt;code&gt;AppRouter&lt;/code&gt; to a specific plug, such as dispatch itself. So if instead of:</target>
        </trans-unit>
        <trans-unit id="0146f85b516e587e6b92b0b400db4374bf1c0f28" translate="yes" xml:space="preserve">
          <source>This is significant because we can use the &lt;code&gt;page_path&lt;/code&gt; function in a template to link to the root of our application. We can then use this helper in our templates:</source>
          <target state="translated">テンプレートで &lt;code&gt;page_path&lt;/code&gt; 関数を使用してアプリケーションのルートにリンクできるため、これは重要です。次に、このヘルパーをテンプレートで使用できます。</target>
        </trans-unit>
        <trans-unit id="13e4b6dd8b33a2972a835278b18e46ff4920ac2a" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;a href=&quot;#foreign_key_constraint/3&quot;&gt;&lt;code&gt;foreign_key_constraint/3&lt;/code&gt;&lt;/a&gt; except that the field is inferred from the association definition. This is useful to guarantee that a child will only be created if the parent exists in the database too. Therefore, it only applies to &lt;code&gt;belongs_to&lt;/code&gt; associations.</source>
          <target state="translated">これは、フィールドが関連定義から推測されることを除いて、&lt;a href=&quot;#foreign_key_constraint/3&quot;&gt; &lt;code&gt;foreign_key_constraint/3&lt;/code&gt; &lt;/a&gt;と同様です。これは、親がデータベースにも存在する場合にのみ子が作成されることを保証するのに役立ちます。したがって、これは &lt;code&gt;belongs_to&lt;/code&gt; アソシエーションにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="02210ecf6e704066e98f3f150578efab0c87344d" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;a href=&quot;#foreign_key_constraint/3&quot;&gt;&lt;code&gt;foreign_key_constraint/3&lt;/code&gt;&lt;/a&gt; except that the field is inferred from the association definition. This is useful to guarantee that parent can only be deleted (or have its primary key changed) if no child exists in the database. Therefore, it only applies to &lt;code&gt;has_*&lt;/code&gt; associations.</source>
          <target state="translated">これは、フィールドが関連定義から推測されることを除いて、&lt;a href=&quot;#foreign_key_constraint/3&quot;&gt; &lt;code&gt;foreign_key_constraint/3&lt;/code&gt; &lt;/a&gt;と同様です。これは、データベースに子が存在しない場合にのみ親を削除できる（または主キーを変更できる）ことを保証するのに役立ちます。したがって、これは &lt;code&gt;has_*&lt;/code&gt; 関連付けにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="246766b43ac065cf7a6813d58181faa7501710d2" translate="yes" xml:space="preserve">
          <source>This is similar to &lt;a href=&quot;ecto.query#preload/3&quot;&gt;&lt;code&gt;Ecto.Query.preload/3&lt;/code&gt;&lt;/a&gt; except it allows you to preload structs after they have been fetched from the database.</source>
          <target state="translated">これは、データベースからフェッチされた後に構造体をプリロードできることを除いて、&lt;a href=&quot;ecto.query#preload/3&quot;&gt; &lt;code&gt;Ecto.Query.preload/3&lt;/code&gt; に&lt;/a&gt;似ています。</target>
        </trans-unit>
        <trans-unit id="e4eed9ef50790eac0932b578ea9d27bff84cfd58" translate="yes" xml:space="preserve">
          <source>This is the documentation for the Phoenix project.</source>
          <target state="translated">これはPhoenixプロジェクトのドキュメントです。</target>
        </trans-unit>
        <trans-unit id="3ada68d07e24e1da189679d5236f1b2085cd8c85" translate="yes" xml:space="preserve">
          <source>This is the same mechanism provided by &lt;a href=&quot;../phoenix/phoenix.channel&quot;&gt;&lt;code&gt;Phoenix.Channel&lt;/code&gt;&lt;/a&gt;s. Therefore, if your application uses both channels and LiveViews, you can use the same technique to disconnect any stateful connection.</source>
          <target state="translated">これは、&lt;a href=&quot;../phoenix/phoenix.channel&quot;&gt; &lt;code&gt;Phoenix.Channel&lt;/code&gt; &lt;/a&gt;によって提供されるのと同じメカニズムです。したがって、アプリケーションがチャネルとLiveViewの両方を使用している場合は、同じ手法を使用してステートフル接続を切断できます。</target>
        </trans-unit>
        <trans-unit id="646640f311b4826df55090d4281da13e20dd6b66" translate="yes" xml:space="preserve">
          <source>This is the standard matrix of HTTP verbs, paths, and controller actions. For a while, this was known as RESTful routes, but most consider this a misnomer nowadays. Let's look at them individually, in a slightly different order.</source>
          <target state="translated">これは、HTTP の動詞、パス、コントローラのアクションの標準的な行列です。しばらくの間、これは RESTful routes として知られていましたが、現在ではほとんどの人がこれを誤記と考えています。少し順番を変えて、個別に見ていきましょう。</target>
        </trans-unit>
        <trans-unit id="d84197d638f69361b43dbeeee6fa00ab6538ceb9" translate="yes" xml:space="preserve">
          <source>This is the task we use to get our application running. It takes no arguments at all. If we pass any in, they will be silently ignored.</source>
          <target state="translated">これはアプリケーションを起動するために使用するタスクです。これは引数を一切取りません。何か引数を渡しても、それは静かに無視されます。</target>
        </trans-unit>
        <trans-unit id="1287cce3e334f0bd268a0fbb70950d2bd00055a6" translate="yes" xml:space="preserve">
          <source>This is the value passed back from &lt;a href=&quot;#c:init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; and subsequently passed as the last argument to all callbacks. Idiomatically it is a map.</source>
          <target state="translated">これは、&lt;a href=&quot;#c:init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;から返され、その後すべてのコールバックに最後の引数として渡される値です。慣習的にそれは地図です。</target>
        </trans-unit>
        <trans-unit id="1871b378b5a1fb4c4012fd59a4ce5d038f416585" translate="yes" xml:space="preserve">
          <source>This is useful for things like validation hints on form fields, e.g. an empty changeset for a new form. That changeset isn&amp;rsquo;t valid, but we don&amp;rsquo;t want to show errors until an actual user action has been performed.</source>
          <target state="translated">これは、フォームフィールドの検証ヒントなど、新しいフォームの空のチェンジセットなどに役立ちます。そのチェンジセットは有効ではありませんが、実際のユーザーアクションが実行されるまでエラーを表示したくありません。</target>
        </trans-unit>
        <trans-unit id="8eac94b23ec614fdc27f65b1253b4162ffa8a109" translate="yes" xml:space="preserve">
          <source>This is useful for things like validation hints on form fields, e.g. an empty changeset for a new form. That changeset isn't valid, but we don't want to show errors until an actual user action has been performed.</source>
          <target state="translated">これはフォームフィールドのバリデーションヒントのようなもの、例えば新しいフォームの空のチェンジセットのようなものに便利です。チェンジセットは有効ではありませんが、実際のユーザーアクションが実行されるまでエラーを表示したくはありません。</target>
        </trans-unit>
        <trans-unit id="b547124ded5a56cf030283e1096472422e728527" translate="yes" xml:space="preserve">
          <source>This is useful when a specific connection is required for testing a plug or a particular function.</source>
          <target state="translated">プラグや特定の機能をテストするために特定の接続が必要な場合に便利です。</target>
        </trans-unit>
        <trans-unit id="967c2f65e325112d9e81267fb5e803aaad342521" translate="yes" xml:space="preserve">
          <source>This is useful when building the select by hand. It expects all options and one or more select values.</source>
          <target state="translated">これはselectを手で作るときに便利です。これは、すべてのオプションと1つ以上のセレクト値を想定しています。</target>
        </trans-unit>
        <trans-unit id="cc164165494ed01035c2fea10f32c91cf135eaeb" translate="yes" xml:space="preserve">
          <source>This is useful when the whole dataset was already loaded or must be explicitly fetched from elsewhere. The IDs received by the preloading function and the result returned depends on the association type:</source>
          <target state="translated">これは、データセット全体が既にロードされている場合や、他の場所から明示的に取得しなければならない場合に便利です。プリロード関数が受け取ったIDと返される結果は、アソシエーション・タイプに依存します。</target>
        </trans-unit>
        <trans-unit id="c1ee8628cd73b8b7149d50d393fe7c8fa56a351b" translate="yes" xml:space="preserve">
          <source>This is useful when you are creating forms that are not backed by any kind of data from the data layer, like a search form.</source>
          <target state="translated">これは、検索フォームのように、データレイヤーからのデータに裏打ちされていないフォームを作成する場合に便利です。</target>
        </trans-unit>
        <trans-unit id="0765c6b4474540e333d6f27c42f79680532d7ff2" translate="yes" xml:space="preserve">
          <source>This is useful when you are creating forms that are not backed by any kind of data layer. Let's assume that we're submitting a form to the &lt;code&gt;:new&lt;/code&gt; action in the &lt;code&gt;FooController&lt;/code&gt;:</source>
          <target state="translated">This is useful when you are creating forms that are not backed by any kind of data layer. Let's assume that we're submitting a form to the &lt;code&gt;:new&lt;/code&gt; action in the &lt;code&gt;FooController&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="557303ac218e1708373d1b4d8a6f4a9c23b313d1" translate="yes" xml:space="preserve">
          <source>This is useful, for example, to recompile modules that depend on external systems, such as directories, databases, etc. Note if you simply depend on external files, &lt;code&gt;@external_resource&lt;/code&gt; annotation should be used.</source>
          <target state="translated">This is useful, for example, to recompile modules that depend on external systems, such as directories, databases, etc. Note if you simply depend on external files, &lt;code&gt;@external_resource&lt;/code&gt; annotation should be used.</target>
        </trans-unit>
        <trans-unit id="cf23281d7b92a37b60472183249bb866a988f802" translate="yes" xml:space="preserve">
          <source>This issue can also happen with other helpers, such as &lt;code&gt;content_tag&lt;/code&gt;:</source>
          <target state="translated">この問題は、 &lt;code&gt;content_tag&lt;/code&gt; などの他のヘルパーでも発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="f798383afb7474b032be11f12e76fdd26cfd9f6b" translate="yes" xml:space="preserve">
          <source>This layout is used by many parts of your application. However, there is a subsection of your application that wants to also add a sidebar. Let's call it &quot;blog.html&quot;. You can build on top of the existing layout in two steps. First, define the blog layout:</source>
          <target state="translated">このレイアウトはアプリケーションの多くの部分で使用されます。しかし、サイドバーを追加したいアプリケーションのサブセクションがあります。これを &quot;blog.html &quot;と呼びましょう。2つのステップで既存のレイアウトの上に構築することができます。まず、ブログのレイアウトを定義します。</target>
        </trans-unit>
        <trans-unit id="eede1c11892e1de751e301f0909a682510d53c2b" translate="yes" xml:space="preserve">
          <source>This looks good, but there is a problem here. Remember that we wanted both user facing reviews routes &lt;code&gt;/reviews&lt;/code&gt; as well as the admin ones &lt;code&gt;/admin/reviews&lt;/code&gt;. If we now include the user facing reviews in our router under the root scope like this:</source>
          <target state="translated">これは良さそうですが、ここに問題があります。ユーザー向けのレビュールート &lt;code&gt;/reviews&lt;/code&gt; と管理者向けの &lt;code&gt;/admin/reviews&lt;/code&gt; の両方が必要だったことを忘れないでください。次のように、ルートスコープの下のルーターにユーザー向けのレビューを含めると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="44a1ef9e37129dec0a33744ad55541c8ec1d1309" translate="yes" xml:space="preserve">
          <source>This macro accepts a set of options:</source>
          <target state="translated">このマクロは、オプションのセットを受け付けます。</target>
        </trans-unit>
        <trans-unit id="30cad0a3d348831413868904461ce3cb02695bb7" translate="yes" xml:space="preserve">
          <source>This macro also supports passing a nested block of route definitions. This is helpful for nesting children resources within their parents to generate nested routes.</source>
          <target state="translated">このマクロは、ルート定義のネストされたブロックを渡すこともサポートしています。これは、親の中に子リソースを入れ子にしてネストされたルートを生成するのに便利です。</target>
        </trans-unit>
        <trans-unit id="5272cc1708a897442f49d3861c8376d2c1684484" translate="yes" xml:space="preserve">
          <source>This macro doesn&amp;rsquo;t add any guards when adding the new plug to the pipeline; for more information about adding plugs with guards see &lt;code&gt;compile/1&lt;/code&gt;.</source>
          <target state="translated">このマクロは、新しいプラグインをパイプラインに追加するときにガードを追加しません。ガード付きのプラグの追加の詳細については、 &lt;code&gt;compile/1&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="84875e3a7e5339034bbbeafae9696406ba8d0be0" translate="yes" xml:space="preserve">
          <source>This macro doesn't add any guards when adding the new plug to the pipeline; for more information about adding plugs with guards see &lt;a href=&quot;#compile/3&quot;&gt;&lt;code&gt;compile/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">This macro doesn't add any guards when adding the new plug to the pipeline; for more information about adding plugs with guards see &lt;a href=&quot;#compile/3&quot;&gt; &lt;code&gt;compile/3&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="fa7e3fdecd39a60479ea64ca6e42ffb064952aa0" translate="yes" xml:space="preserve">
          <source>This macro is similar to &lt;a href=&quot;#select/3&quot;&gt;&lt;code&gt;select/3&lt;/code&gt;&lt;/a&gt; except it may be specified multiple times as long as every entry is a map. This is useful for merging and composing selects. For example:</source>
          <target state="translated">このマクロは、すべてのエントリがマップである限り複数回指定できることを除いて、&lt;a href=&quot;#select/3&quot;&gt; &lt;code&gt;select/3&lt;/code&gt; に&lt;/a&gt;似ています。これは、selectのマージと作成に役立ちます。例えば：</target>
        </trans-unit>
        <trans-unit id="de8d8b58528e44c756543b77e46f1f172b9e7e02" translate="yes" xml:space="preserve">
          <source>This may accomplish what we want, but now we need to wire up the schema relationships in the &lt;code&gt;Accounts&lt;/code&gt; context to the &lt;code&gt;CMS&lt;/code&gt; author. Worse, we have now taken our isolated &lt;code&gt;Accounts&lt;/code&gt; context and required it to know about a content management system, which in turn knows about &lt;code&gt;Accounts&lt;/code&gt; too. With time, cyclic dependencies would blurry the lines between contexts, which is not what we want for isolated responsibilities in our application. There's a better way to handle these requirements.</source>
          <target state="translated">これで目的を達成できる可能性がありますが、ここで、 &lt;code&gt;Accounts&lt;/code&gt; コンテキストのスキーマ関係を &lt;code&gt;CMS&lt;/code&gt; 作成者に接続する必要があります。さらに悪いことに、分離された &lt;code&gt;Accounts&lt;/code&gt; コンテキストを取得し、コンテンツ管理システムについて知る必要があります。コンテンツ管理システムは、 &lt;code&gt;Accounts&lt;/code&gt; についても知っています。時間の経過とともに、循環依存関係はコンテキスト間の境界線を曖昧にします。これは、アプリケーションの孤立した責任に必要なものではありません。これらの要件を処理するためのより良い方法があります。</target>
        </trans-unit>
        <trans-unit id="80844b87a747d5e664d2490ade69aea11936ad23" translate="yes" xml:space="preserve">
          <source>This may also happen on redirects. If you have a POST request to &lt;code&gt;foo.example.com&lt;/code&gt; that redirects to &lt;code&gt;bar.example.com&lt;/code&gt; with status 307, the token will contain a different host than the one in the request.</source>
          <target state="translated">これはリダイレクトでも発生する可能性があります。 &lt;code&gt;foo.example.com&lt;/code&gt; へのPOSTリクエストがあり、ステータス307で &lt;code&gt;bar.example.com&lt;/code&gt; にリダイレクトする場合、トークンにはリクエスト内のホストとは異なるホストが含まれます。</target>
        </trans-unit>
        <trans-unit id="45fff2b06c5bcdcfb6cfb7a314ec69dd932215c6" translate="yes" xml:space="preserve">
          <source>This means any HTML code inside the given string won't be escaped.</source>
          <target state="translated">これは、与えられた文字列の中にあるHTMLコードがエスケープされないことを意味します。</target>
        </trans-unit>
        <trans-unit id="4a4f142c5563004d2613132e5bfe4d91c45a1a1d" translate="yes" xml:space="preserve">
          <source>This means guards can be given to &lt;code&gt;match&lt;/code&gt;:</source>
          <target state="translated">これは、ガードを &lt;code&gt;match&lt;/code&gt; せることができることを意味します。</target>
        </trans-unit>
        <trans-unit id="4e9c6ac4e3bf3b13fcd41f8b0bf87448b7d2126a" translate="yes" xml:space="preserve">
          <source>This means that after each request, &lt;a href=&quot;../plug/plug&quot;&gt;&lt;code&gt;Plug&lt;/code&gt;&lt;/a&gt;, via &lt;code&gt;:telemetry&lt;/code&gt;, will emit a &quot;stop&quot; event, with a measurement of how long it took to get the response:</source>
          <target state="translated">これは、各リクエストの後に、&lt;a href=&quot;../plug/plug&quot;&gt; &lt;code&gt;Plug&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;:telemetry&lt;/code&gt; を介して「停止」イベントを発行し、レスポンスを取得するのにかかった時間を測定することを意味します。</target>
        </trans-unit>
        <trans-unit id="50ba0c978af1e21d1324664f02c106ebf9733164" translate="yes" xml:space="preserve">
          <source>This means that all routes starting with &lt;code&gt;/jobs&lt;/code&gt; will be sent to the &lt;code&gt;HelloWeb.BackgroundJob.Plug&lt;/code&gt; module. Inside the plug, you can match on subroutes, such as &lt;code&gt;/pending&lt;/code&gt; and &lt;code&gt;/active&lt;/code&gt; that shows the status of certain jobs.</source>
          <target state="translated">これは、 &lt;code&gt;/jobs&lt;/code&gt; で始まるすべてのルートが &lt;code&gt;HelloWeb.BackgroundJob.Plug&lt;/code&gt; モジュールに送信されることを意味します。プラグ内では、特定のジョブのステータスを表示する &lt;code&gt;/pending&lt;/code&gt; や &lt;code&gt;/active&lt;/code&gt; などのサブルートを照合できます。</target>
        </trans-unit>
        <trans-unit id="46fcd9b428f43bc3ceced700d0d499071542798d" translate="yes" xml:space="preserve">
          <source>This means that when working with changesets that are not meant to be persisted to the database, such as schemaless changesets, you may need to explicitly set the action to one specific value. Frameworks such as Phoenix use the action value to define how HTML forms should act.</source>
          <target state="translated">これは、スキーマレスのチェンジセットのようにデータベースに永続化されないチェンジセットを扱う場合、アクションを明示的に特定の値に設定する必要があるかもしれないことを意味します。Phoenix のようなフレームワークは、HTML フォームがどのように動作するかを定義するためにアクション値を使用します。</target>
        </trans-unit>
        <trans-unit id="202e52fe595d963585538547933f6a4e3cafd0a0" translate="yes" xml:space="preserve">
          <source>This means that whenever the &lt;code&gt;Ecto.Repo.Supervisor&lt;/code&gt; starts, it will emit an event, via &lt;code&gt;:telemetry&lt;/code&gt;, with a measurement of the time at start-up.</source>
          <target state="translated">これは、 &lt;code&gt;Ecto.Repo.Supervisor&lt;/code&gt; が起動するたびに、起動時の時間の測定値とともに、 &lt;code&gt;:telemetry&lt;/code&gt; telemetryを介してイベントを発行することを意味します。</target>
        </trans-unit>
        <trans-unit id="07a058b3195ea17c39bf63ddac4c41f7f9ee1528" translate="yes" xml:space="preserve">
          <source>This means the plugs in the &lt;code&gt;authenticate_user&lt;/code&gt; and &lt;code&gt;ensure_admin&lt;/code&gt; pipelines will be called before the &lt;code&gt;BackgroundJob.Plug&lt;/code&gt; allowing them to send an appropriate response and halt the request accordingly.</source>
          <target state="translated">この手段でプラグ &lt;code&gt;authenticate_user&lt;/code&gt; と &lt;code&gt;ensure_admin&lt;/code&gt; パイプラインは前に呼び出されます &lt;code&gt;BackgroundJob.Plug&lt;/code&gt; 彼らは適切な応答を送信し、それに応じて要求を停止することができます。</target>
        </trans-unit>
        <trans-unit id="ee54c80446b3760c6fb0a7486f59b47f284f3002" translate="yes" xml:space="preserve">
          <source>This mimics the behaviour existing in clients.</source>
          <target state="translated">これは、クライアントに存在する行動を模倣しています。</target>
        </trans-unit>
        <trans-unit id="c496c6a2b0bd7dfb1281705f319360c782f54b15" translate="yes" xml:space="preserve">
          <source>This module also provides functions to enable a secure environment on transports that, at some point, have access to a &lt;a href=&quot;../plug/1.5.1/plug.conn&quot;&gt;&lt;code&gt;Plug.Conn&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このモジュールは、ある時点で&lt;a href=&quot;../plug/1.5.1/plug.conn&quot;&gt; &lt;code&gt;Plug.Conn&lt;/code&gt; に&lt;/a&gt;アクセスできるトランスポートで安全な環境を有効にする機能も提供します。</target>
        </trans-unit>
        <trans-unit id="0f3ec12e95282c603be600f76b1efa0ba48fef74" translate="yes" xml:space="preserve">
          <source>This module also provides functions to enable a secure environment on transports that, at some point, have access to a &lt;a href=&quot;../plug/plug.conn&quot;&gt;&lt;code&gt;Plug.Conn&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">This module also provides functions to enable a secure environment on transports that, at some point, have access to a &lt;a href=&quot;../plug/plug.conn&quot;&gt; &lt;code&gt;Plug.Conn&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6ebb63837f361cbf03a3796451f4fe31cebbd7a9" translate="yes" xml:space="preserve">
          <source>This module also provides functions to simulate leaving and closing a channel. Once you leave or close a channel, because the channel is linked to the test process on join, it will crash the test process:</source>
          <target state="translated">このモジュールは、チャンネルの離脱や終了をシミュレートする機能も提供します。一度チャネルを残したり閉じたりすると、チャネルは結合時にテストプロセスにリンクされているため、テストプロセスをクラッシュさせてしまいます。</target>
        </trans-unit>
        <trans-unit id="85f9b5e0210ecd7fadc5d5b219e6eb2289448aaa" translate="yes" xml:space="preserve">
          <source>This module also specifies a behaviour that all the parsers to be used with Plug should adopt.</source>
          <target state="translated">このモジュールは、Plugで使用されるすべてのパーサが採用すべき動作も指定します。</target>
        </trans-unit>
        <trans-unit id="d9c3143248084cc9c9ababd5b063a0b53a122a9b" translate="yes" xml:space="preserve">
          <source>This module can be &lt;code&gt;use&lt;/code&gt;-d into a module in order to build a plug pipeline:</source>
          <target state="translated">このモジュールは、プラグインパイプラインを構築するために、モジュールに-dを &lt;code&gt;use&lt;/code&gt; できます。</target>
        </trans-unit>
        <trans-unit id="b51e359d7e48f146d0d1e937d9d0255d91dad914" translate="yes" xml:space="preserve">
          <source>This module can be used in your test cases, like this:</source>
          <target state="translated">このモジュールは、このようにテストケースで使用することができます。</target>
        </trans-unit>
        <trans-unit id="29fc81812b5b90ffe59423aab0c8bc729d76484f" translate="yes" xml:space="preserve">
          <source>This module defines a &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Plug.Conn&lt;/code&gt;&lt;/a&gt; struct and the main functions for working with Plug connections.</source>
          <target state="translated">This module defines a &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Plug.Conn&lt;/code&gt; &lt;/a&gt; struct and the main functions for working with Plug connections.</target>
        </trans-unit>
        <trans-unit id="070196252438bbce61c0f717094acdcf2e81b7f0" translate="yes" xml:space="preserve">
          <source>This module defines a &lt;a href=&quot;plug.conn#content&quot;&gt;&lt;code&gt;Plug.Conn&lt;/code&gt;&lt;/a&gt; struct and the main functions for working with Plug connections.</source>
          <target state="translated">このモジュールは、&lt;a href=&quot;plug.conn#content&quot;&gt; &lt;code&gt;Plug.Conn&lt;/code&gt; &lt;/a&gt;構造体とプラグ接続を操作するための主な関数を定義します。</target>
        </trans-unit>
        <trans-unit id="3a8c2c7d59b4c13115d6ac023bd8ac70e7f55fc3" translate="yes" xml:space="preserve">
          <source>This module describes what is required to build a Phoenix transport. The transport sits between the socket and channels, forwarding client messages to channels and vice-versa.</source>
          <target state="translated">このモジュールでは、Phoenixトランスポートを構築するために必要なものを説明します。トランスポートはソケットとチャンネルの間に位置し、クライアントメッセージをチャンネルに転送します。</target>
        </trans-unit>
        <trans-unit id="1bf3d32030d6f8a66f143a02bbf8343a335a4b15" translate="yes" xml:space="preserve">
          <source>This module documents each of those macros, providing examples in both the keywords query and pipe expression formats.</source>
          <target state="translated">このモジュールでは、キーワードクエリとパイプ式の両方のフォーマットの例を提供して、これらのマクロのそれぞれを文書化します。</target>
        </trans-unit>
        <trans-unit id="a4abc0ee1ab071690365f6c903e68103b59a8146" translate="yes" xml:space="preserve">
          <source>This module is commonly used within a &lt;a href=&quot;plug.builder&quot;&gt;&lt;code&gt;Plug.Builder&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;plug.router&quot;&gt;&lt;code&gt;Plug.Router&lt;/code&gt;&lt;/a&gt; and it wraps the &lt;code&gt;call/2&lt;/code&gt; function.</source>
          <target state="translated">このモジュールは、一般内で使用され&lt;a href=&quot;plug.builder&quot;&gt; &lt;code&gt;Plug.Builder&lt;/code&gt; &lt;/a&gt;又は&lt;a href=&quot;plug.router&quot;&gt; &lt;code&gt;Plug.Router&lt;/code&gt; &lt;/a&gt;それはラップ &lt;code&gt;call/2&lt;/code&gt; 機能。</target>
        </trans-unit>
        <trans-unit id="bf931afdfdb9158aece8ce5e671b27951b8f8dc7" translate="yes" xml:space="preserve">
          <source>This module is deprecated. To use Cowboy 1 With Plug please include &lt;code&gt;plug_cowboy&lt;/code&gt; version 1.0 or above in your &lt;code&gt;mix.exs&lt;/code&gt; file. It is recommended that you use the &lt;code&gt;Plug.Cowboy&lt;/code&gt; module directly instead of Plug.Adapters.Cowboy.</source>
          <target state="translated">このモジュールは非推奨です。カウボーイ1とプラグを使用するには、 &lt;code&gt;plug_cowboy&lt;/code&gt; バージョン1.0以上を &lt;code&gt;mix.exs&lt;/code&gt; ファイルに含めてください。 &lt;code&gt;Plug.Cowboy&lt;/code&gt; ではなく、Plug.Cowboyモジュールを直接使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4a03284231b4c9beab2d0b3147c2e873d6724e04" translate="yes" xml:space="preserve">
          <source>This module is deprecated. To use Cowboy 2 With Plug please include &lt;code&gt;plug_cowboy&lt;/code&gt; version 2.0 or above in your &lt;code&gt;mix.exs&lt;/code&gt; file. It is recommended that you use the &lt;code&gt;Plug.Cowboy&lt;/code&gt; module directly instead of Plug.Adapters.Cowboy2</source>
          <target state="translated">このモジュールは非推奨です。カウボーイ2プラグインを使用するには、 &lt;code&gt;plug_cowboy&lt;/code&gt; バージョン2.0以降を &lt;code&gt;mix.exs&lt;/code&gt; ファイルに含めてください。 &lt;code&gt;Plug.Cowboy&lt;/code&gt; 代わりにPlug.Cowboyモジュールを直接使用することをお勧めします</target>
        </trans-unit>
        <trans-unit id="b1128cd9517be1b80b829d37c77e14445123041b" translate="yes" xml:space="preserve">
          <source>This module is used by Phoenix pubsub adapters to handle their local node subscriptions and it is usually not accessed directly. See &lt;a href=&quot;phoenix.pubsub.pg2&quot;&gt;&lt;code&gt;Phoenix.PubSub.PG2&lt;/code&gt;&lt;/a&gt; for an example integration.</source>
          <target state="translated">このモジュールは、Phoenix pubsubアダプターがローカルノードのサブスクリプションを処理するために使用し、通常は直接アクセスされません。統合の例については、&lt;a href=&quot;phoenix.pubsub.pg2&quot;&gt; &lt;code&gt;Phoenix.PubSub.PG2&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="18749daab402c4f9221f76b108eba5a09277b12b" translate="yes" xml:space="preserve">
          <source>This module is used to define the application&amp;rsquo;s main view, which serves as the base for all other views and templates.</source>
          <target state="translated">このモジュールは、他のすべてのビューおよびテンプレートのベースとして機能するアプリケーションのメインビューを定義するために使用されます。</target>
        </trans-unit>
        <trans-unit id="6bfcb71b5835a83213d4dfa6ee58017a4845f8d7" translate="yes" xml:space="preserve">
          <source>This module is used to define the application's main view, which serves as the base for all other views and templates.</source>
          <target state="translated">このモジュールは、アプリケーションのメインビューを定義するために使用され、他のすべてのビューやテンプレートのベースとして機能します。</target>
        </trans-unit>
        <trans-unit id="0cd0bbb57a64e46e86f20c8dc2b8b74868181cea" translate="yes" xml:space="preserve">
          <source>This module provides conveniences for reading all files from a particular directory and embedding them into a single module. Imagine you have a directory with templates:</source>
          <target state="translated">このモジュールは、特定のディレクトリからすべてのファイルを読み込み、単一のモジュールに埋め込むための便利な機能を提供します。テンプレートのあるディレクトリを想像してみてください。</target>
        </trans-unit>
        <trans-unit id="4237a22f395fffa8c90b7f272130e1f9c638e3db" translate="yes" xml:space="preserve">
          <source>This module specifies a behaviour that all sockets must implement. &lt;a href=&quot;phoenix.socket&quot;&gt;&lt;code&gt;Phoenix.Socket&lt;/code&gt;&lt;/a&gt; is just one possible implementation of a socket that multiplexes events over multiple channels. Developers can implement their own sockets as long as they implement the behaviour outlined here.</source>
          <target state="translated">This module specifies a behaviour that all sockets must implement. &lt;a href=&quot;phoenix.socket&quot;&gt; &lt;code&gt;Phoenix.Socket&lt;/code&gt; &lt;/a&gt; is just one possible implementation of a socket that multiplexes events over multiple channels. Developers can implement their own sockets as long as they implement the behaviour outlined here.</target>
        </trans-unit>
        <trans-unit id="6c536ba16d8fed4f4c995fae380610c356225909" translate="yes" xml:space="preserve">
          <source>This module will be the public API for all account functionality in our system. For example, in addition to user account management, we may also handle user login credentials, account preferences, and password reset generation. If we look at the &lt;code&gt;list_users/0&lt;/code&gt; function, we can see the private details of user fetching. And it's super simple. We have a call to &lt;code&gt;Repo.all(User)&lt;/code&gt;. We saw how Ecto repo queries worked in &lt;a href=&quot;ecto&quot;&gt;the Ecto guide&lt;/a&gt;, so this call should look familiar. Our &lt;code&gt;list_users&lt;/code&gt; function is a generalized function specifying the &lt;em&gt;intent&lt;/em&gt; of our code &amp;ndash; namely to list users. The details of that intent where we use our Repo to fetch the users from our PostgreSQL database is hidden from our callers. This is a common theme we'll see re-iterated as we use the Phoenix generators. Phoenix will push us to think about where we have different responsibilities in our application, and then to wrap up those different areas behind well-named modules and functions that make the intent of our code clear, while encapsulating the details.</source>
          <target state="translated">このモジュールは、システム内のすべてのアカウント機能のパブリックAPIになります。たとえば、ユーザーアカウントの管理に加えて、ユーザーのログイン資格情報、アカウント設定、パスワードリセットの生成も処理する場合があります。私たちが見れば &lt;code&gt;list_users/0&lt;/code&gt; 機能は、ユーザーのフェッチのプライベートの詳細を見ることができます。そして、それはとても簡単です。 &lt;code&gt;Repo.all(User)&lt;/code&gt; への呼び出しがあります。&lt;a href=&quot;ecto&quot;&gt;EctoレポクエリがEctoガイド&lt;/a&gt;でどのように機能するかを見たので、この呼び出しは見覚えがあるはずです。私たちの &lt;code&gt;list_users&lt;/code&gt; の機能は、指定一般の関数である&lt;em&gt;意図を&lt;/em&gt;私たちのコードの-すなわち、ユーザーを一覧表示します。リポジトリを使用してPostgreSQLデータベースからユーザーをフェッチするインテントの詳細は、呼び出し元からは隠されています。これは、Phoenixジェネレーターを使用するときに繰り返される共通のテーマです。フェニックスは、アプリケーションのどこにさまざまな責任があるのか​​を考え、詳細をカプセル化しながら、コードの意図を明確にする名前の付いたモジュールと関数の背後にあるさまざまな領域をまとめるように促します。</target>
        </trans-unit>
        <trans-unit id="e1f8c7a704d8b281a05ab2c2ee94c670ce893f15" translate="yes" xml:space="preserve">
          <source>This must be executed from the process that will effectively operate the socket.</source>
          <target state="translated">ソケットを効果的に動作させるプロセスから実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="a54461d29fcec4b636adb86f49d11ebedc8a4319" translate="yes" xml:space="preserve">
          <source>This operation uses the query cache if one is available.</source>
          <target state="translated">この操作は、クエリキャッシュがあればそれを使用します。</target>
        </trans-unit>
        <trans-unit id="2e6392283fe53096fd6723c6a52bb14c1fbe0eee" translate="yes" xml:space="preserve">
          <source>This operation will return the underlying data with changes regardless if the changeset is valid or not.</source>
          <target state="translated">この操作は、チェンジセットが有効かどうかに関わらず、変更を含む基礎データを返します。</target>
        </trans-unit>
        <trans-unit id="049c09158996c650e55b8f1ec4561fa180509070" translate="yes" xml:space="preserve">
          <source>This option assumes the project was generated with the &lt;code&gt;--binary-id&lt;/code&gt; option, that sets up models to use &lt;code&gt;binary_id&lt;/code&gt; by default. If that&amp;rsquo;s not the case you can still set all your models to use &lt;code&gt;binary_id&lt;/code&gt; by default, by adding the following to your &lt;code&gt;model&lt;/code&gt; function in &lt;code&gt;web/web.ex&lt;/code&gt; or before the &lt;code&gt;schema&lt;/code&gt; declaration:</source>
          <target state="translated">このオプションは、プロジェクトがデフォルトで &lt;code&gt;binary_id&lt;/code&gt; を使用するようにモデルを設定する &lt;code&gt;--binary-id&lt;/code&gt; オプションで生成されたと想定しています。そうでない場合でも、 &lt;code&gt;web/web.ex&lt;/code&gt; の &lt;code&gt;model&lt;/code&gt; 関数または &lt;code&gt;schema&lt;/code&gt; 宣言の前に以下を追加することで、デフォルトで &lt;code&gt;binary_id&lt;/code&gt; を使用するようにすべてのモデルを設定できます。</target>
        </trans-unit>
        <trans-unit id="e0391ffae92290b282aabdcb9895807452f2bfe1" translate="yes" xml:space="preserve">
          <source>This option is passed as the &lt;code&gt;:init_mode&lt;/code&gt; to &lt;a href=&quot;plug/plug.builder#compile/3&quot;&gt;&lt;code&gt;Plug.Builder.compile/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">This option is passed as the &lt;code&gt;:init_mode&lt;/code&gt; to &lt;a href=&quot;plug/plug.builder#compile/3&quot;&gt; &lt;code&gt;Plug.Builder.compile/3&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="60fcee5e8373c0151773e4d41d75fd04ea48fab0" translate="yes" xml:space="preserve">
          <source>This plug also fetches query params in the connection through &lt;a href=&quot;plug.conn#fetch_query_params/2&quot;&gt;&lt;code&gt;Plug.Conn.fetch_query_params/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このプラグインは、&lt;a href=&quot;plug.conn#fetch_query_params/2&quot;&gt; &lt;code&gt;Plug.Conn.fetch_query_params/2&lt;/code&gt; &lt;/a&gt;を介した接続でクエリパラメータもフェッチします。</target>
        </trans-unit>
        <trans-unit id="40a4f301d5fad92658d3d0724f2518201be2787a" translate="yes" xml:space="preserve">
          <source>This plug can be mounted in a &lt;a href=&quot;plug.builder&quot;&gt;&lt;code&gt;Plug.Builder&lt;/code&gt;&lt;/a&gt; pipeline as follows:</source>
          <target state="translated">このプラグは、次のように&lt;a href=&quot;plug.builder&quot;&gt; &lt;code&gt;Plug.Builder&lt;/code&gt; &lt;/a&gt;パイプラインにマウントできます。</target>
        </trans-unit>
        <trans-unit id="f6cd45326cadd9e10a4b5dcc83af5b2968ec6084" translate="yes" xml:space="preserve">
          <source>This plug doesn&amp;rsquo;t accept any options.</source>
          <target state="translated">このプラグはオプションを受け入れません。</target>
        </trans-unit>
        <trans-unit id="50cd1542f80ce2c27c4180007ab1670d825bb257" translate="yes" xml:space="preserve">
          <source>This plug doesn't accept any options.</source>
          <target state="translated">このプラグはオプションを受け付けません。</target>
        </trans-unit>
        <trans-unit id="540542716621eaa96ff36e27e48730d06833088f" translate="yes" xml:space="preserve">
          <source>This plug expects the body parameters to be already parsed and fetched. Those can be fetched with &lt;a href=&quot;plug.parsers&quot;&gt;&lt;code&gt;Plug.Parsers&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このプラグは、本体のパラメーターが既に解析およびフェッチされていることを想定しています。これらは&lt;a href=&quot;plug.parsers&quot;&gt; &lt;code&gt;Plug.Parsers&lt;/code&gt; &lt;/a&gt;でフェッチできます。</target>
        </trans-unit>
        <trans-unit id="01da79a8a81b2988c34c2c491464c98d17827644" translate="yes" xml:space="preserve">
          <source>This plug only parses the body if the request method is one of the following:</source>
          <target state="translated">このプラグインは、リクエストメソッドが以下のいずれかである場合にのみボディを解析します。</target>
        </trans-unit>
        <trans-unit id="dbc4a6cf27af703236d09b35d3f5b453a3411f43" translate="yes" xml:space="preserve">
          <source>This plug overrides the request&amp;rsquo;s &lt;code&gt;POST&lt;/code&gt; method with the method defined in the &lt;code&gt;_method&lt;/code&gt; request parameter.</source>
          <target state="translated">このプラグインは、 &lt;code&gt;_method&lt;/code&gt; リクエストパラメータで定義されたメソッドでリクエストの &lt;code&gt;POST&lt;/code&gt; メソッドをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="f9183cda5f0f143ddaa1b79b7dc207c527edb3d2" translate="yes" xml:space="preserve">
          <source>This plug overrides the request's &lt;code&gt;POST&lt;/code&gt; method with the method defined in the &lt;code&gt;_method&lt;/code&gt; request parameter.</source>
          <target state="translated">This plug overrides the request's &lt;code&gt;POST&lt;/code&gt; method with the method defined in the &lt;code&gt;_method&lt;/code&gt; request parameter.</target>
        </trans-unit>
        <trans-unit id="9cbb2239965b1d685814f5586def8ff4895965d5" translate="yes" xml:space="preserve">
          <source>This plug will raise &lt;a href=&quot;plug.parsers.unsupportedmediatypeerror&quot;&gt;&lt;code&gt;Plug.Parsers.UnsupportedMediaTypeError&lt;/code&gt;&lt;/a&gt; by default if the request cannot be parsed by any of the given types and the MIME type has not been explicitly accepted with the &lt;code&gt;:pass&lt;/code&gt; option.</source>
          <target state="translated">指定されたタイプのいずれかでリクエストを解析できず、MIMEタイプが &lt;code&gt;:pass&lt;/code&gt; オプションで明示的に受け入れられていない場合、このプラグインはデフォルトで&lt;a href=&quot;plug.parsers.unsupportedmediatypeerror&quot;&gt; &lt;code&gt;Plug.Parsers.UnsupportedMediaTypeError&lt;/code&gt; を発生&lt;/a&gt;させます。</target>
        </trans-unit>
        <trans-unit id="662ed6e00ff1f8efa3e545b88277587544f54665" translate="yes" xml:space="preserve">
          <source>This plug will raise &lt;a href=&quot;plug.parsers.unsupportedmediatypeerror&quot;&gt;&lt;code&gt;Plug.Parsers.UnsupportedMediaTypeError&lt;/code&gt;&lt;/a&gt; by default if the request cannot be parsed by any of the given types and the MIME type has not been explicity accepted with the &lt;code&gt;:pass&lt;/code&gt; option.</source>
          <target state="translated">指定されたタイプのいずれかでリクエストを解析できず、MIMEタイプが &lt;code&gt;:pass&lt;/code&gt; オプションで明示的に受け入れられていない場合、このプラグインはデフォルトで&lt;a href=&quot;plug.parsers.unsupportedmediatypeerror&quot;&gt; &lt;code&gt;Plug.Parsers.UnsupportedMediaTypeError&lt;/code&gt; を発生&lt;/a&gt;させます。</target>
        </trans-unit>
        <trans-unit id="20bad4ce825285978d82d9c5c3e6eb11442c40e0" translate="yes" xml:space="preserve">
          <source>This plug won&amp;rsquo;t generate tokens automatically. Instead, tokens will be generated only when required by calling &lt;a href=&quot;#get_csrf_token/0&quot;&gt;&lt;code&gt;get_csrf_token/0&lt;/code&gt;&lt;/a&gt;. In case you are generating the token for certain specific URL, you should use &lt;a href=&quot;#get_csrf_token_for/1&quot;&gt;&lt;code&gt;get_csrf_token_for/1&lt;/code&gt;&lt;/a&gt; as that will avoid tokens from being leaked to other applications.</source>
          <target state="translated">このプラグはトークンを自動的に生成しません。代わりに、&lt;a href=&quot;#get_csrf_token/0&quot;&gt; &lt;code&gt;get_csrf_token/0&lt;/code&gt; を&lt;/a&gt;呼び出して必要な場合にのみトークンが生成されます。特定の特定のURLのトークンを生成する場合は、&lt;a href=&quot;#get_csrf_token_for/1&quot;&gt; &lt;code&gt;get_csrf_token_for/1&lt;/code&gt; &lt;/a&gt;を使用する必要があります。これにより、トークンが他のアプリケーションに漏洩するのを防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="ebbff7ffc8f75e2adf94800f3c930587cc10fe90" translate="yes" xml:space="preserve">
          <source>This plug won't generate tokens automatically. Instead, tokens will be generated only when required by calling &lt;a href=&quot;#get_csrf_token/0&quot;&gt;&lt;code&gt;get_csrf_token/0&lt;/code&gt;&lt;/a&gt;. In case you are generating the token for certain specific URL, you should use &lt;a href=&quot;#get_csrf_token_for/1&quot;&gt;&lt;code&gt;get_csrf_token_for/1&lt;/code&gt;&lt;/a&gt; as that will avoid tokens from being leaked to other applications.</source>
          <target state="translated">This plug won't generate tokens automatically. Instead, tokens will be generated only when required by calling &lt;a href=&quot;#get_csrf_token/0&quot;&gt; &lt;code&gt;get_csrf_token/0&lt;/code&gt; &lt;/a&gt;. In case you are generating the token for certain specific URL, you should use &lt;a href=&quot;#get_csrf_token_for/1&quot;&gt; &lt;code&gt;get_csrf_token_for/1&lt;/code&gt; &lt;/a&gt; as that will avoid tokens from being leaked to other applications.</target>
        </trans-unit>
        <trans-unit id="e5c4c29b3d1afbe8ceed819dcb85452fb4b99844" translate="yes" xml:space="preserve">
          <source>This presents a problem, however: only privileged processes can bind to TCP port numbers under 1024, and it is bad idea to run the application as 'root'.</source>
          <target state="translated">しかし、これには問題があります:1024 以下の TCP ポート番号にバインドできるのは特権プロセスのみで、アプリケーションを 'root' として実行するのはよくありません。</target>
        </trans-unit>
        <trans-unit id="9d38ed574d39239d3ce1ee54fa402c6b77436c31" translate="yes" xml:space="preserve">
          <source>This process is two-fold:</source>
          <target state="translated">このプロセスは2つあります。</target>
        </trans-unit>
        <trans-unit id="a867af678f59d04d7a0076e28e130a1a90e313f4" translate="yes" xml:space="preserve">
          <source>This protocol is used by URL helpers and other parts of the Phoenix stack. For example, when you write:</source>
          <target state="translated">このプロトコルは、URLヘルパーやPhoenixスタックの他の部分で使用されています。例えば、以下のように書くと</target>
        </trans-unit>
        <trans-unit id="b21ceddd638e1843ee72cb36616db0e5a04aafff" translate="yes" xml:space="preserve">
          <source>This storage is meant to be used by libraries and frameworks to avoid writing to the user storage (the &lt;code&gt;:assigns&lt;/code&gt; field). It is recommended for libraries/frameworks to prefix the keys with the library name.</source>
          <target state="translated">このストレージは、ユーザーストレージ（ &lt;code&gt;:assigns&lt;/code&gt; フィールド）への書き込みを回避するために、ライブラリとフレームワークによって使用されることを意図しています。ライブラリ/フレームワークでは、キーの前にライブラリ名を付けることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="bcee46e9d2a4acc15bb7cd9f93742faef542611d" translate="yes" xml:space="preserve">
          <source>This store does not create the ETS table; it expects that an existing named table with public properties is passed as an argument.</source>
          <target state="translated">このストアはETSテーブルを作成しません。</target>
        </trans-unit>
        <trans-unit id="625b9c2d872b70c5c1c2329e2373298bcd36763e" translate="yes" xml:space="preserve">
          <source>This store, however, can be used as an example for creating custom storages, based on Redis, Memcached, or a database itself.</source>
          <target state="translated">しかし、このストアは、Redis、Memcached、またはデータベース自体をベースにしたカスタムストアを作成するための例として使用することができます。</target>
        </trans-unit>
        <trans-unit id="caef9692752dfc364ac9616409959d533077b374" translate="yes" xml:space="preserve">
          <source>This task accepts the same command-line arguments as &lt;code&gt;run&lt;/code&gt;. For additional information, refer to the documentation for &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Run.html&quot;&gt;&lt;code&gt;Mix.Tasks.Run&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このタスクは、 &lt;code&gt;run&lt;/code&gt; と同じコマンドライン引数を受け入れます。追加情報については、&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Run.html&quot;&gt; &lt;code&gt;Mix.Tasks.Run&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="4685cbdc9dfbc82df635ef6b5492cf1beef5ab7b" translate="yes" xml:space="preserve">
          <source>This task does two things, it creates a digest for our static assets and then compresses them.</source>
          <target state="translated">このタスクは2つのことを行います。静的アセットのダイジェストを作成し、圧縮します。</target>
        </trans-unit>
        <trans-unit id="c3709bb1a06688cab88fd712fbb47b0071d18988" translate="yes" xml:space="preserve">
          <source>This task has a single purpose, to show us all the routes defined for a given router. We saw it used extensively in the &lt;a href=&quot;routing&quot;&gt;Routing Guide&lt;/a&gt;.</source>
          <target state="translated">このタスクには、特定のルーターに定義されているすべてのルートを表示するという1つの目的があります。&lt;a href=&quot;routing&quot;&gt;ルーティングガイドで&lt;/a&gt;広く使用されていることを確認しました。</target>
        </trans-unit>
        <trans-unit id="7ffde0bcebb123a904c4c4eeafe54e75892f6516" translate="yes" xml:space="preserve">
          <source>This task is intended to create a bare Ecto project without web integration, which serves as a core application of your domain for web applications and your greater umbrella platform to integrate with.</source>
          <target state="translated">このタスクは、ウェブ統合なしのベアEctoプロジェクトを作成することを目的としており、ウェブアプリケーションと統合するためにあなたのドメインのコアアプリケーションとあなたのより大きな傘のプラットフォームとして機能します。</target>
        </trans-unit>
        <trans-unit id="b654c66530201e2da733b3ab537a9860c5fdd5a9" translate="yes" xml:space="preserve">
          <source>This task is intended to create a bare Phoenix project without database integration, which interfaces with your greater umbrella application(s).</source>
          <target state="translated">このタスクは、より大きなアンブレラアプリケーションとのインターフェイスを持つ、データベース統合なしのベアPhoenixプロジェクトを作成することを目的としています。</target>
        </trans-unit>
        <trans-unit id="616b0415ae742d1d7d15218ab99e676b4a35f1b7" translate="yes" xml:space="preserve">
          <source>This task will create the database specified in our repo. By default it will look for the repo named after our application (the one generated with our app unless we opted out of ecto), but we can pass in another repo if we want.</source>
          <target state="translated">このタスクはレポで指定されたデータベースを作成します。デフォルトでは、アプリケーションにちなんだ名前のレポ(ectoをオプトアウトしていない限り、アプリケーションで生成されたもの)を探しますが、必要に応じて別のレポを渡すこともできます。</target>
        </trans-unit>
        <trans-unit id="8cc7b8c4356e5eb337a5225b8d22d082a6a6a76d" translate="yes" xml:space="preserve">
          <source>This task will drop the database specified in our repo. By default it will look for the repo named after our application (the one generated with our app unless we opted out of ecto). It will not prompt us to check if we're sure we want to drop the db, so do exercise caution.</source>
          <target state="translated">このタスクはレポで指定したデータベースを削除します。デフォルトでは、私たちのアプリケーションにちなんだレポを探します(ectoをオプトアウトしない限り、私たちのアプリケーションで生成されたもの)。dbを削除するかどうかを確認するためのプロンプトは表示されませんので、注意してください。</target>
        </trans-unit>
        <trans-unit id="409b40ea015d00380841d68310ab0678da039272" translate="yes" xml:space="preserve">
          <source>This task will generate a Presence tracker. The module name can be passed as an argument, &lt;code&gt;Presence&lt;/code&gt; is used if no module name is passed.</source>
          <target state="translated">このタスクは、プレゼンストラッカーを生成します。モジュール名は引数として渡すことができます。モジュール名が渡されない場合は &lt;code&gt;Presence&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="c6d1b8cbdd20775d05499dc18c230d380cd892e5" translate="yes" xml:space="preserve">
          <source>This task will generate a basic Phoenix channel as well a test case for it. It takes the module name for the channel as argument:</source>
          <target state="translated">このタスクは、基本的なPhoenixチャンネルとテストケースを生成します。このタスクはチャンネルのモジュール名を引数にとります。</target>
        </trans-unit>
        <trans-unit id="890ecd7a0ef9885062476b818cf0b34cea8d84a4" translate="yes" xml:space="preserve">
          <source>This time around, we used &lt;a href=&quot;mix.tasks.phx.gen.context&quot;&gt;&lt;code&gt;mix phx.gen.context&lt;/code&gt;&lt;/a&gt;, which is just like &lt;a href=&quot;mix.tasks.phx.gen.html&quot;&gt;&lt;code&gt;mix phx.gen.html&lt;/code&gt;&lt;/a&gt;, except it doesn't generate the web files for us. Since we already have controllers and templates for managing users, we can integrate the new credential features into our existing web form.</source>
          <target state="translated">今回は、&lt;a href=&quot;mix.tasks.phx.gen.context&quot;&gt; &lt;code&gt;mix phx.gen.context&lt;/code&gt; &lt;/a&gt;を使用しました。これは、mix phx.gen.htmlと同じですが、Webファイルが生成されない点が&lt;a href=&quot;mix.tasks.phx.gen.html&quot;&gt; &lt;code&gt;mix phx.gen.html&lt;/code&gt; &lt;/a&gt;ます。ユーザーを管理するためのコントローラーとテンプレートが既にあるので、新しい資格情報機能を既存のWebフォームに統合できます。</target>
        </trans-unit>
        <trans-unit id="db029b73bc27a4de904b6e1ad6e35f7d5b2ddda5" translate="yes" xml:space="preserve">
          <source>This time we passed the &lt;code&gt;--web&lt;/code&gt; option to the generator. This tells Phoenix what namespace to use for the web modules, such as controllers and views. This is useful when you have conflicting resources in the system, such as our existing &lt;code&gt;PageController&lt;/code&gt;, as well as a way to naturally namespace paths and functionality of different features, like a CMS system. Phoenix instructed us to add a new &lt;code&gt;scope&lt;/code&gt; to the router for a &lt;code&gt;&quot;/cms&quot;&lt;/code&gt; path prefix. Let's copy paste the following into our &lt;code&gt;lib/hello_web/router.ex&lt;/code&gt;, but we'll make one modification to the &lt;code&gt;pipe_through&lt;/code&gt; macro:</source>
          <target state="translated">今回は、 &lt;code&gt;--web&lt;/code&gt; オプションをジェネレーターに渡しました。これにより、コントローラーやビューなど、Webモジュールに使用する名前空間がPhoenixに通知されます。これは、既存の &lt;code&gt;PageController&lt;/code&gt; など、システム内に競合するリソースがある場合や、CMSシステムなどのさまざまな機能のパスや機能に自然に名前空間を付ける方法がある場合に役立ちます。フェニックスは、 &lt;code&gt;&quot;/cms&quot;&lt;/code&gt; パスプレフィックスの新しい &lt;code&gt;scope&lt;/code&gt; をルーターに追加するように指示しました。以下をコピーして &lt;code&gt;lib/hello_web/router.ex&lt;/code&gt; に貼り付けましょう。ただし、 &lt;code&gt;pipe_through&lt;/code&gt; マクロに1つの変更を加えます。</target>
        </trans-unit>
        <trans-unit id="d5878eb3c414b2f8b0bc85b921219b0b8c00c144" translate="yes" xml:space="preserve">
          <source>This validation is used to check for one specific parameter being true and as such does not require the field to effectively exist in the schema or the data being validated.</source>
          <target state="translated">この検証は特定のパラメータが真であるかどうかをチェックするために使用され、スキーマや検証対象のデータにフィールドが効果的に存在する必要はありません。</target>
        </trans-unit>
        <trans-unit id="d696deb31d0b50d9d5193d12918eed93ff0a69c5" translate="yes" xml:space="preserve">
          <source>This will allow you to cast and update only the association for the given country. The important point for partial changes is that any addresses, which were not preloaded won&amp;rsquo;t be changed.</source>
          <target state="translated">これにより、特定の国の協会のみをキャストおよび更新できます。部分的な変更の重要な点は、プリロードされていないアドレスは変更されないことです。</target>
        </trans-unit>
        <trans-unit id="a25d158d0047cb15049aa3798895382c7cd6f354" translate="yes" xml:space="preserve">
          <source>This will allow you to cast and update only the association for the given country. The important point for partial changes is that any addresses, which were not preloaded won't be changed.</source>
          <target state="translated">これにより、指定した国のアソシエーションだけをキャストして更新することができます。部分的な変更のための重要なポイントは、プリロードされていないアドレスは変更されないということです。</target>
        </trans-unit>
        <trans-unit id="96c8ad2e97ff0533cdfdce33b58a986331978807" translate="yes" xml:space="preserve">
          <source>This will force the token to be deleted once the response is sent.</source>
          <target state="translated">これにより、応答が送信された時点でトークンが強制的に削除されます。</target>
        </trans-unit>
        <trans-unit id="c6845572f50f3240fbaa36674696b8cf400c3eda" translate="yes" xml:space="preserve">
          <source>This will result in a migration with an &lt;code&gt;:integer&lt;/code&gt; column of &lt;code&gt;:user_id&lt;/code&gt; and create an index.</source>
          <target state="translated">これにより、 &lt;code&gt;:user_id&lt;/code&gt; の &lt;code&gt;:integer&lt;/code&gt; 列を使用した移行が行われ、インデックスが作成されます。</target>
        </trans-unit>
        <trans-unit id="cde93bead76f590b8ac92f4411245903df6471af" translate="yes" xml:space="preserve">
          <source>This will result in a migration with an &lt;code&gt;:integer&lt;/code&gt; column of &lt;code&gt;:user_id&lt;/code&gt; and create an index. It will also generate the appropriate &lt;code&gt;belongs_to&lt;/code&gt; entry in the schema.</source>
          <target state="translated">これにより、 &lt;code&gt;:user_id&lt;/code&gt; の &lt;code&gt;:integer&lt;/code&gt; 列を使用した移行が行われ、インデックスが作成されます。また、スキーマに適切な &lt;code&gt;belongs_to&lt;/code&gt; エントリを生成します。</target>
        </trans-unit>
        <trans-unit id="7e29ee867b8709dab14972a2f1549cbc060ff5db" translate="yes" xml:space="preserve">
          <source>This will set up all the correct dependencies and configuration for us automatically. Once we install those dependencies with &lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Deps.Get.html&quot;&gt;&lt;code&gt;mix deps.get&lt;/code&gt;&lt;/a&gt;, we'll be ready to begin working with Ecto in our application.</source>
          <target state="translated">これにより、すべての正しい依存関係と構成が自動的に設定されます。これらの依存関係を&lt;a href=&quot;https://hexdocs.pm/mix/Mix.Tasks.Deps.Get.html&quot;&gt; &lt;code&gt;mix deps.get&lt;/code&gt; &lt;/a&gt;でインストールすると、アプリケーションでEctoを使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="0c4b144557001b546396a316d80e5ba0955281ab" translate="yes" xml:space="preserve">
          <source>This works because both &quot;index.json&quot; and &quot;show.json&quot; builds themselves on top of an internal &quot;page.json&quot; clause.</source>
          <target state="translated">これは、&quot;index.json &quot;と &quot;show.json &quot;の両方が、内部の &quot;page.json &quot;節の上に自分自身を構築しているからです。</target>
        </trans-unit>
        <trans-unit id="c5fe4ec7110a029f93aee2c49d16dd655e8fb777" translate="yes" xml:space="preserve">
          <source>Those are a lot of words bunched up together. Let's take a look at some examples to untangle their meaning.</source>
          <target state="translated">沢山の言葉が束ねられていますね。いくつかの例を見て、意味を紐解いてみましょう。</target>
        </trans-unit>
        <trans-unit id="36a1b1b32231c3e4ff53add950295c72883cbbfb" translate="yes" xml:space="preserve">
          <source>Those functions are imported from two modules:</source>
          <target state="translated">これらの関数は2つのモジュールからインポートされています。</target>
        </trans-unit>
        <trans-unit id="6208b0413cd71b1dcc6adedd2bd128dd9d87591a" translate="yes" xml:space="preserve">
          <source>Those guards work like regular Elixir guards and the only variables accessible in the guard are &lt;code&gt;conn&lt;/code&gt;, the &lt;code&gt;action&lt;/code&gt; as an atom and the &lt;code&gt;controller&lt;/code&gt; as an alias.</source>
          <target state="translated">これらのガードは通常のElixirガードのように機能し、ガードでアクセスできる変数は &lt;code&gt;conn&lt;/code&gt; 、アトムとしての &lt;code&gt;action&lt;/code&gt; 、エイリアスとしての &lt;code&gt;controller&lt;/code&gt; のみです。</target>
        </trans-unit>
        <trans-unit id="f149875499b6816d281bb93f8f7b7be48949a3a5" translate="yes" xml:space="preserve">
          <source>Those values can now be accessed on the connected mount as &lt;a href=&quot;#get_connect_info/1&quot;&gt;&lt;code&gt;get_connect_info/1&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">これらの値は、接続されたマウントで&lt;a href=&quot;#get_connect_info/1&quot;&gt; &lt;code&gt;get_connect_info/1&lt;/code&gt; &lt;/a&gt;としてアクセスできるようになりました。</target>
        </trans-unit>
        <trans-unit id="c33c34b9d82c886b7a72a0d75a72202741c4d268" translate="yes" xml:space="preserve">
          <source>Through &lt;em&gt;telemetry&lt;/em&gt;, Phoenix is able to collect metrics and send monitoring events of your application. The &lt;code&gt;lib/hello_web/telemetry.ex&lt;/code&gt; file defines the supervisor responsible for managing the telemetry processes. You can find more information on this topic in the &lt;a href=&quot;telemetry&quot;&gt;Telemetry guide&lt;/a&gt;.</source>
          <target state="translated">フェニックスは、&lt;em&gt;テレメトリ&lt;/em&gt;を通じて、メトリックを収集し、アプリケーションの監視イベントを送信できます。 &lt;code&gt;lib/hello_web/telemetry.ex&lt;/code&gt; ファイルはテレメトリプロセスの管理を担当スーパーバイザーを定義します。このトピックの詳細については、&lt;a href=&quot;telemetry&quot;&gt;テレメトリガイドを参照してください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a630c7d1a3b50b97144115174bddba022d807367" translate="yes" xml:space="preserve">
          <source>Time unit</source>
          <target state="translated">時間単位</target>
        </trans-unit>
        <trans-unit id="39d358d22755c113807898f4d747028acc84c714" translate="yes" xml:space="preserve">
          <source>Timeout while waiting for the request.</source>
          <target state="translated">リクエストを待つ間のタイムアウト。</target>
        </trans-unit>
        <trans-unit id="e399371341816e13494a8f090bb6bc62bee13531" translate="yes" xml:space="preserve">
          <source>To aid debugging on the client when troubleshooting issues, the &lt;code&gt;enableDebug()&lt;/code&gt; and &lt;code&gt;disableDebug()&lt;/code&gt; functions are exposed on the &lt;code&gt;LiveSocket&lt;/code&gt; JavaScript instance. Calling &lt;code&gt;enableDebug()&lt;/code&gt; turns on debug logging which includes LiveView life-cycle and payload events as they come and go from client to server. In practice, you can expose your instance on &lt;code&gt;window&lt;/code&gt; for quick access in the browser's web console, for example:</source>
          <target state="translated">問題のトラブルシューティングを行う場合は、クライアント上でデバッグを支援するために、 &lt;code&gt;enableDebug()&lt;/code&gt; と &lt;code&gt;disableDebug()&lt;/code&gt; 関数は、上に露出している &lt;code&gt;LiveSocket&lt;/code&gt; JavaScriptのインスタンス。 &lt;code&gt;enableDebug()&lt;/code&gt; を呼び出すと、LiveViewのライフサイクルイベントとペイロードイベントがクライアントからサーバーに出入りするときに含まれるデバッグログがオンになります。実際には、インスタンスを &lt;code&gt;window&lt;/code&gt; 公開して、ブラウザのWebコンソールにすばやくアクセスできます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="4909edd3c35b1902875bfd0c83e9c081850f71db" translate="yes" xml:space="preserve">
          <source>To allow the user to download contents that are in memory as a binary or string:</source>
          <target state="translated">メモリ内にあるコンテンツをバイナリまたは文字列としてダウンロードできるようにすること。</target>
        </trans-unit>
        <trans-unit id="e6a6975b062fa8a73779dc6d912719d7498131ee" translate="yes" xml:space="preserve">
          <source>To assert that your channel closes or errors asynchronously, you can monitor the channel process with the tools provided by Elixir, and wait for the &lt;code&gt;:DOWN&lt;/code&gt; message. Imagine an implementation of the &lt;code&gt;handle_info/2&lt;/code&gt; function that closes the channel when it receives &lt;code&gt;:some_message&lt;/code&gt;:</source>
          <target state="translated">チャネルが非同期に閉じるかエラーになることを表明するには、Elixirが提供するツールを使用してチャネルプロセスを監視し、 &lt;code&gt;:DOWN&lt;/code&gt; メッセージを待つことができます。 &lt;code&gt;:some_message&lt;/code&gt; を受け取ったときにチャネルを閉じる &lt;code&gt;handle_info/2&lt;/code&gt; 関数の実装を想像してください。</target>
        </trans-unit>
        <trans-unit id="53a832ff355a8bff56d545715860a666b9283a42" translate="yes" xml:space="preserve">
          <source>To authorize a socket in &lt;code&gt;join/3&lt;/code&gt;, return &lt;code&gt;{:ok, socket}&lt;/code&gt;. To refuse authorization in &lt;code&gt;join/3&lt;/code&gt;, return &lt;code&gt;{:error, reply}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;join/3&lt;/code&gt; でソケットを承認するには、 &lt;code&gt;{:ok, socket}&lt;/code&gt; 返します。 &lt;code&gt;join/3&lt;/code&gt; で認証を拒否するには、 &lt;code&gt;{:error, reply}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de3aa50e1fa13ab8540858290ff3bab5cc1ae7a1" translate="yes" xml:space="preserve">
          <source>To authorize a socket, return &lt;code&gt;{:ok, socket}&lt;/code&gt; or &lt;code&gt;{:ok, reply, socket}&lt;/code&gt;. To refuse authorization, return &lt;code&gt;{:error, reason}&lt;/code&gt;.</source>
          <target state="translated">To authorize a socket, return &lt;code&gt;{:ok, socket}&lt;/code&gt; or &lt;code&gt;{:ok, reply, socket}&lt;/code&gt; . To refuse authorization, return &lt;code&gt;{:error, reason}&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="68caf8123fc9000c1892d49a830e2a777c1a2f79" translate="yes" xml:space="preserve">
          <source>To avoid race conditions, all code reloads are funneled through a sequential call operation.</source>
          <target state="translated">競合状態を回避するために、すべてのコードのリロードはシーケンシャルコール操作を介してファンネルされます。</target>
        </trans-unit>
        <trans-unit id="8adf099970e8f40f42c4a78cc8072bacf109f61f" translate="yes" xml:space="preserve">
          <source>To avoid the repetition of always specifying the types, you may define an &lt;a href=&quot;ecto.schema&quot;&gt;&lt;code&gt;Ecto.Schema&lt;/code&gt;&lt;/a&gt;. In such cases, Ecto will analyze your queries and automatically cast the interpolated &quot;age&quot; when compared to the &lt;code&gt;u.age&lt;/code&gt; field, as long as the age field is defined with type &lt;code&gt;:integer&lt;/code&gt; in your schema:</source>
          <target state="translated">To avoid the repetition of always specifying the types, you may define an &lt;a href=&quot;ecto.schema&quot;&gt; &lt;code&gt;Ecto.Schema&lt;/code&gt; &lt;/a&gt;. In such cases, Ecto will analyze your queries and automatically cast the interpolated &quot;age&quot; when compared to the &lt;code&gt;u.age&lt;/code&gt; field, as long as the age field is defined with type &lt;code&gt;:integer&lt;/code&gt; in your schema:</target>
        </trans-unit>
        <trans-unit id="4da79393192b9d811f048b628589434c69cfc70f" translate="yes" xml:space="preserve">
          <source>To avoid the repetition of always specifying the types, you may define an &lt;a href=&quot;ecto.schema&quot;&gt;&lt;code&gt;Ecto.Schema&lt;/code&gt;&lt;/a&gt;. In such cases, Ecto will analyze your queries and automatically cast the interpolated &amp;ldquo;age&amp;rdquo; when compared to the &lt;code&gt;u.age&lt;/code&gt; field, as long as the age field is defined with type &lt;code&gt;:integer&lt;/code&gt; in your schema:</source>
          <target state="translated">常にタイプを指定する繰り返しを避けるために、&lt;a href=&quot;ecto.schema&quot;&gt; &lt;code&gt;Ecto.Schema&lt;/code&gt; を&lt;/a&gt;定義できます。そのような場合、Ectoはクエリを分析し、 &lt;code&gt;u.age&lt;/code&gt; フィールドと比較すると、スキーマで年齢フィールドがtype &lt;code&gt;:integer&lt;/code&gt; で定義されている限り、補間された「年齢」を自動的にキャストします。</target>
        </trans-unit>
        <trans-unit id="8207ca543301d2f877c271b7b261d6d50b3481d1" translate="yes" xml:space="preserve">
          <source>To capture additional user-defined metadata, the &lt;code&gt;metadata&lt;/code&gt; option for keydown events may be provided to the &lt;code&gt;LiveSocket&lt;/code&gt; constructor. For example:</source>
          <target state="translated">追加のユーザー定義メタデータをキャプチャするために、キーダウンイベントの &lt;code&gt;metadata&lt;/code&gt; オプションが &lt;code&gt;LiveSocket&lt;/code&gt; コンストラクターに提供される場合があります。例えば：</target>
        </trans-unit>
        <trans-unit id="671a861e30e1350c320f440b81de252cf52633f6" translate="yes" xml:space="preserve">
          <source>To check if a given value is not nil use:</source>
          <target state="translated">与えられた値がnilでないかどうかをチェックするには、これを使用します。</target>
        </trans-unit>
        <trans-unit id="01fee11f0023eae7979272d215e7845252d7aad1" translate="yes" xml:space="preserve">
          <source>To check that we are on Elixir 1.6 and Erlang 20 or later, run:</source>
          <target state="translated">Elixir 1.6とErlang 20以降であることを確認するには、実行してください。</target>
        </trans-unit>
        <trans-unit id="79d31d5fab3f480e2385850ab0894e631ce9ef5d" translate="yes" xml:space="preserve">
          <source>To complete the web changes, let's display the author when showing a page. First, open up &lt;code&gt;lib/hello_web/views/cms/page_view.ex&lt;/code&gt; and add a helper function to handle formatting the author's name:</source>
          <target state="translated">Webの変更を完了するために、ページを表示するときに作成者を表示しましょう。まず、 &lt;code&gt;lib/hello_web/views/cms/page_view.ex&lt;/code&gt; を開き、作成者の名前のフォーマットを処理するヘルパー関数を追加します。</target>
        </trans-unit>
        <trans-unit id="c397997817b65b5ed32d80d0da887e047de03d3c" translate="yes" xml:space="preserve">
          <source>To convert a single DER-encoded certificate to PEM format: &lt;code&gt;openssl x509 -in server.crt -inform der -out cert.pem&lt;/code&gt;</source>
          <target state="translated">単一のDERエンコードされた証明書をPEM形式に変換するには： &lt;code&gt;openssl x509 -in server.crt -inform der -out cert.pem&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="21c91ab4294a0c1228f999e655eeea2400a408db" translate="yes" xml:space="preserve">
          <source>To convert an RSA private key from DER to PEM format: &lt;code&gt;openssl rsa -in privkey.der -inform der -out privkey.pem&lt;/code&gt;. If the private key is a Elliptic Curve key, for use with an ECDSA certificate, replace &lt;code&gt;rsa&lt;/code&gt; with &lt;code&gt;ec&lt;/code&gt;. You may want to add the &lt;code&gt;-aes128&lt;/code&gt; argument to produce an encrypted, password protected PEM file.</source>
          <target state="translated">RSA秘密鍵をDERからPEM形式に変換するには： &lt;code&gt;openssl rsa -in privkey.der -inform der -out privkey.pem&lt;/code&gt; 。秘密鍵が楕円曲線鍵である場合、ECDSA証明書で使用するには、 &lt;code&gt;rsa&lt;/code&gt; を &lt;code&gt;ec&lt;/code&gt; に置き換えます。 &lt;code&gt;-aes128&lt;/code&gt; 引数を追加して、パスワードで保護された暗号化されたPEMファイルを作成することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5971dfca497a6c6184fac2256a6394332e77294b" translate="yes" xml:space="preserve">
          <source>To create a parameterized type, create a module as shown below:</source>
          <target state="translated">パラメータ化された型を作成するには、以下のようにモジュールを作成します。</target>
        </trans-unit>
        <trans-unit id="32b59c202fb3d6f550fc3db4a98cf2a4a434dded" translate="yes" xml:space="preserve">
          <source>To customize the JSON library, including the following in your &lt;code&gt;config/config.exs&lt;/code&gt;:</source>
          <target state="translated">To customize the JSON library, including the following in your &lt;code&gt;config/config.exs&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="bf7347e6fe2acbe195851637b64939807583f935" translate="yes" xml:space="preserve">
          <source>To deny connection, return &lt;code&gt;:error&lt;/code&gt;.</source>
          <target state="translated">接続を拒否するには、 &lt;code&gt;:error&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2be30a876faae18a5e22e23e0ff825ea8e07d2e2" translate="yes" xml:space="preserve">
          <source>To detect when the page itself has received focus or blur, &lt;code&gt;phx-window-focus&lt;/code&gt; and &lt;code&gt;phx-window-blur&lt;/code&gt; may be specified. These window level events may also be necessary if the element in consideration (most often a &lt;code&gt;div&lt;/code&gt; with no tabindex) cannot receive focus. Like other bindings, &lt;code&gt;phx-value-*&lt;/code&gt; can be provided on the bound element, and those values will be sent as part of the payload. For example:</source>
          <target state="translated">ページ自体がフォーカスまたはブラーを受け取ったことを検出するために、 &lt;code&gt;phx-window-focus&lt;/code&gt; および &lt;code&gt;phx-window-blur&lt;/code&gt; を指定できます。これらのウィンドウレベルのイベントは、検討中の要素（ほとんどの場合、tabindexのない &lt;code&gt;div&lt;/code&gt; ）がフォーカスを受け取ることができない場合にも必要になることがあります。他のバインディングと同様に、 &lt;code&gt;phx-value-*&lt;/code&gt; をバインドされた要素に指定でき、それらの値はペイロードの一部として送信されます。例えば：</target>
        </trans-unit>
        <trans-unit id="698f42b33364629b9c00b1979a5fc7ddebd7d515" translate="yes" xml:space="preserve">
          <source>To determine which key has been pressed you should use &lt;code&gt;key&lt;/code&gt; value. The available options can be found on &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values&quot;&gt;MDN&lt;/a&gt; or via the &lt;a href=&quot;https://w3c.github.io/uievents/tools/key-event-viewer.html&quot;&gt;Key Event Viewer&lt;/a&gt;.</source>
          <target state="translated">どのキーが押されたかを判別するには、 &lt;code&gt;key&lt;/code&gt; 値を使用する必要があります。使用可能なオプションは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values&quot;&gt;MDN&lt;/a&gt;または&lt;a href=&quot;https://w3c.github.io/uievents/tools/key-event-viewer.html&quot;&gt;キーイベントビューアを&lt;/a&gt;介して見つけることができます。</target>
        </trans-unit>
        <trans-unit id="9ee4e1597fac73b7cdbd9aafc8a4cfde3cac889d" translate="yes" xml:space="preserve">
          <source>To discuss new features in the framework, email the &lt;a href=&quot;https://groups.google.com/group/phoenix-core&quot;&gt;phoenix-core mailing list&lt;/a&gt;.</source>
          <target state="translated">フレームワークの新機能について話し合うには、&lt;a href=&quot;https://groups.google.com/group/phoenix-core&quot;&gt;phoenix-coreメーリングリストに&lt;/a&gt;電子メールを送信してください。</target>
        </trans-unit>
        <trans-unit id="50ac5d4ffcf89463b90bde0bceaf630200030aa1" translate="yes" xml:space="preserve">
          <source>To do so, the first step is to mark which assigns are temporary and what values they should be reset to on mount:</source>
          <target state="translated">そのためには、最初のステップとして、どの割り当てが一時的なもので、マウント時にどの値にリセットすべきかをマークします。</target>
        </trans-unit>
        <trans-unit id="75f92de1c10aadb6a962f6da37154da77404e61e" translate="yes" xml:space="preserve">
          <source>To do that, we'll use the special EEx tags for executing Elixir expressions - &lt;code&gt;&amp;lt;%= %&amp;gt;&lt;/code&gt;. Notice that the initial tag has an equals sign like this: &lt;code&gt;&amp;lt;%=&lt;/code&gt; . That means that any Elixir code that goes between those tags will be executed, and the resulting value will replace the tag. If the equals sign were missing, the code would still be executed, but the value would not appear on the page.</source>
          <target state="translated">そのために、Elixir式を実行するための特別なEExタグを使用します- &lt;code&gt;&amp;lt;%= %&amp;gt;&lt;/code&gt; 。最初のタグには次のような等号があることに注意してください： &lt;code&gt;&amp;lt;%=&lt;/code&gt; 。つまり、これらのタグの間にあるElixirコードが実行され、結果の値がタグに置き換わります。等号がない場合でも、コードは実行されますが、値はページに表示されません。</target>
        </trans-unit>
        <trans-unit id="7207faf406837a635de5a70263b6dfda70627f88" translate="yes" xml:space="preserve">
          <source>To do this we modify the &lt;code&gt;index&lt;/code&gt; action as follows:</source>
          <target state="translated">これを行うには、 &lt;code&gt;index&lt;/code&gt; アクションを次のように変更します。</target>
        </trans-unit>
        <trans-unit id="9c26c7d45e6051c71e7fe3c380da3a4f17f88bda" translate="yes" xml:space="preserve">
          <source>To dump the state from the current process and load into another one:</source>
          <target state="translated">現在のプロセスから状態をダンプして、別のプロセスにロードする。</target>
        </trans-unit>
        <trans-unit id="1756faaf0ba51188a497e41da02799505ffedbc4" translate="yes" xml:space="preserve">
          <source>To emulate this behaviour, this module provides the idea of recycling. The &lt;a href=&quot;#recycle/1&quot;&gt;&lt;code&gt;recycle/1&lt;/code&gt;&lt;/a&gt; function receives a connection and returns a new connection, similar to the one returned by &lt;a href=&quot;#build_conn/0&quot;&gt;&lt;code&gt;build_conn/0&lt;/code&gt;&lt;/a&gt; with all the response cookies from the previous connection defined as request headers. This is useful when testing multiple routes that require cookies or session to work.</source>
          <target state="translated">To emulate this behaviour, this module provides the idea of recycling. The &lt;a href=&quot;#recycle/1&quot;&gt; &lt;code&gt;recycle/1&lt;/code&gt; &lt;/a&gt; function receives a connection and returns a new connection, similar to the one returned by &lt;a href=&quot;#build_conn/0&quot;&gt; &lt;code&gt;build_conn/0&lt;/code&gt; &lt;/a&gt; with all the response cookies from the previous connection defined as request headers. This is useful when testing multiple routes that require cookies or session to work.</target>
        </trans-unit>
        <trans-unit id="384f423fceb68dce0e44059e7dc17f0229bd095a" translate="yes" xml:space="preserve">
          <source>To emulate this behaviour, this module provides the idea of recycling. The &lt;a href=&quot;#recycle/1&quot;&gt;&lt;code&gt;recycle/1&lt;/code&gt;&lt;/a&gt; function receives a connection and returns a new connection, similar to the one returned by &lt;a href=&quot;#conn/0&quot;&gt;&lt;code&gt;conn/0&lt;/code&gt;&lt;/a&gt; with all the response cookies from the previous connection defined as request headers. This is useful when testing multiple routes that require cookies or session to work.</source>
          <target state="translated">この動作をエミュレートするために、このモジュールはリサイクルのアイデアを提供します。&lt;a href=&quot;#recycle/1&quot;&gt; &lt;code&gt;recycle/1&lt;/code&gt; &lt;/a&gt;関数は、によって返されたものと同様の接続と戻り、新しい接続、受信&lt;a href=&quot;#conn/0&quot;&gt; &lt;code&gt;conn/0&lt;/code&gt; &lt;/a&gt;要求ヘッダーとして定義される前の接続からのすべての応答のクッキーとし。これは、Cookieまたはセッションが機能する必要がある複数のルートをテストするときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="091d07c554f0a419f1e21a5c0aae91e5f028e992" translate="yes" xml:space="preserve">
          <source>To encrypt an existing PEM-encoded RSA key use the OpenSSL CLI: &lt;code&gt;openssl rsa -in privkey.pem -out privkey_aes.pem -aes128&lt;/code&gt;. Use &lt;code&gt;ec&lt;/code&gt; instead of &lt;code&gt;rsa&lt;/code&gt; when using an ECDSA certificate. Don't forget to securely erase the unencrypted copy afterwards! Best practice would be to encrypt the file immediately during initial key generation: please refer to the instructions provided by the CA.</source>
          <target state="translated">既存のPEMエンコードされたRSAキーを暗号化するには、OpenSSL CLIを使用します： &lt;code&gt;openssl rsa -in privkey.pem -out privkey_aes.pem -aes128&lt;/code&gt; 。ECDSA証明書を使用する場合は、 &lt;code&gt;rsa&lt;/code&gt; の代わりに &lt;code&gt;ec&lt;/code&gt; を使用してください。後で暗号化されていないコピーを安全に消去することを忘れないでください！ベストプラクティスは、最初のキー生成中にファイルをすぐに暗号化することです。CAが提供する手順を参照してください。</target>
        </trans-unit>
        <trans-unit id="ce8e7a44c764d649b22d4767dfb19181500bc611" translate="yes" xml:space="preserve">
          <source>To encrypt, you would do:</source>
          <target state="translated">暗号化するには</target>
        </trans-unit>
        <trans-unit id="df2c16aad4e09f5b6f276b143ea796814d9ed388" translate="yes" xml:space="preserve">
          <source>To extract a private key from a PKCS#12 file to a PEM file: &lt;code&gt;openssl pkcs12 -in server.p12 -nocerts -nodes -out privkey.pem&lt;/code&gt;. You may want to replace the &lt;code&gt;-nodes&lt;/code&gt; argument with &lt;code&gt;-aes128&lt;/code&gt; to produce an encrypted, password protected PEM file.</source>
          <target state="translated">PKCS＃12ファイルからPEMファイルに秘密鍵を抽出するには： &lt;code&gt;openssl pkcs12 -in server.p12 -nocerts -nodes -out privkey.pem&lt;/code&gt; 。 &lt;code&gt;-nodes&lt;/code&gt; 引数を &lt;code&gt;-aes128&lt;/code&gt; に置き換えて、パスワードで保護された暗号化されたPEMファイルを作成することもできます。</target>
        </trans-unit>
        <trans-unit id="2808505a7c943eb2ca42f02d966df7c8298102af" translate="yes" xml:space="preserve">
          <source>To extract all certificates from a PKCS#12 file to a PEM file: &lt;code&gt;openssl pkcs12 -in server.p12 -nokeys -out fullchain.pem&lt;/code&gt;. The resulting file contains all certificates from the input file, typically the server certificate and any CA certificates that make up the CA chain. You can split the file into seperate &lt;code&gt;cert.pem&lt;/code&gt; and &lt;code&gt;chain.pem&lt;/code&gt; files using a text editor, or you can just pass &lt;code&gt;certfile: fullchain.pem&lt;/code&gt; to the HTTPS adapter.</source>
          <target state="translated">PKCS＃12ファイルからPEMファイルにすべての証明書を抽出するには： &lt;code&gt;openssl pkcs12 -in server.p12 -nokeys -out fullchain.pem&lt;/code&gt; 。結果のファイルには、入力ファイルのすべての証明書（通常はサーバー証明書とCAチェーンを構成するCA証明書）が含まれます。あなたは別々にファイルを分割することができます &lt;code&gt;cert.pem&lt;/code&gt; をして &lt;code&gt;chain.pem&lt;/code&gt; テキストエディタを使用して、ファイル、またはあなただけ渡すことができ &lt;code&gt;certfile: fullchain.pem&lt;/code&gt; HTTPSアダプタへ。</target>
        </trans-unit>
        <trans-unit id="34840b98dd241bba5b79a7b5023d3157b2b9193b" translate="yes" xml:space="preserve">
          <source>To fix this, we can change the password in the environment specific configuration file. For the development environment the password used can be found at the bottom of the &lt;code&gt;config/dev.exs&lt;/code&gt; file.</source>
          <target state="translated">これを修正するために、環境固有の構成ファイルでパスワードを変更できます。開発環境の場合、使用されるパスワードは &lt;code&gt;config/dev.exs&lt;/code&gt; ファイルの下部にあります。</target>
        </trans-unit>
        <trans-unit id="4e7d714947644732e2d22535431e05bc99b95dad" translate="yes" xml:space="preserve">
          <source>To fix this, we need to change the permissions on our &quot;postgres&quot; user in the &lt;code&gt;psql&lt;/code&gt; console to allow database creation.</source>
          <target state="translated">これを修正するには、 &lt;code&gt;psql&lt;/code&gt; コンソールで「postgres」ユーザーの権限を変更してデータベースを作成できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="b5820c90b7b57a2442e1e4a6a440c255446634ff" translate="yes" xml:space="preserve">
          <source>To fix this, we need to change the permissions on our &quot;postgres&quot; user to allow login.</source>
          <target state="translated">これを修正するには、&quot;postgres &quot;ユーザのパーミッションを変更してログインを許可する必要があります。</target>
        </trans-unit>
        <trans-unit id="12f12d3a42e639e525547c376c3befad88231e53" translate="yes" xml:space="preserve">
          <source>To forgo automatic form recovery, set &lt;code&gt;phx-auto-recover=&quot;ignore&quot;&lt;/code&gt;.</source>
          <target state="translated">自動フォームリカバリを使用しない場合は、 &lt;code&gt;phx-auto-recover=&quot;ignore&quot;&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="9add98f21666a54716c50850567b90f96e0b16a8" translate="yes" xml:space="preserve">
          <source>To generate a path to an image hosted in your application &quot;priv/static&quot;, with the &lt;code&gt;@conn&lt;/code&gt; endpoint, use &lt;code&gt;static_path/2&lt;/code&gt; to get a URL with cache control parameters:</source>
          <target state="translated">To generate a path to an image hosted in your application &quot;priv/static&quot;, with the &lt;code&gt;@conn&lt;/code&gt; endpoint, use &lt;code&gt;static_path/2&lt;/code&gt; to get a URL with cache control parameters:</target>
        </trans-unit>
        <trans-unit id="b31df5e294e6f54107ca6b36caf70de5a703ae9d" translate="yes" xml:space="preserve">
          <source>To generate a path to an image hosted in your application &amp;ldquo;priv/static&amp;rdquo;, use &lt;code&gt;static_path/1&lt;/code&gt; to get a URL with cache control parameters:</source>
          <target state="translated">アプリケーション「priv / static」でホストされている画像へのパスを生成するには、 &lt;code&gt;static_path/1&lt;/code&gt; を使用して、キャッシュ制御パラメーターを含むURLを取得します。</target>
        </trans-unit>
        <trans-unit id="166e05bfe8272abd2c663bb42e431b56b9c76ee6" translate="yes" xml:space="preserve">
          <source>To generate a path to an image hosted in your application &amp;ldquo;priv/static&amp;rdquo;, with the &lt;code&gt;@conn&lt;/code&gt; endpoint, use &lt;code&gt;static_path/2&lt;/code&gt; to get a URL with cache control parameters:</source>
          <target state="translated">&lt;code&gt;@conn&lt;/code&gt; エンドポイントを使用して、アプリケーション「priv / static」でホストされている画像へのパスを生成するには、 &lt;code&gt;static_path/2&lt;/code&gt; を使用して、キャッシュ制御パラメーターを持つURLを取得します。</target>
        </trans-unit>
        <trans-unit id="da5cf0c3b662f85cf689692d186e495d82685f37" translate="yes" xml:space="preserve">
          <source>To get started, define the module attribute &lt;code&gt;@endpoint&lt;/code&gt; in your test case pointing to your application endpoint.</source>
          <target state="translated">開始するには、アプリケーションエンドポイントを指すテストケースでモジュール属性 &lt;code&gt;@endpoint&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="0f00e2408e6e8f684d6ca6cbd6ebed088bfa8147" translate="yes" xml:space="preserve">
          <source>To get started, see our &lt;a href=&quot;phoenix/overview&quot;&gt;overview guides&lt;/a&gt;.</source>
          <target state="translated">To get started, see our &lt;a href=&quot;phoenix/overview&quot;&gt;overview guides&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="7ba9a108051080537e0193e44354907bb5392a7d" translate="yes" xml:space="preserve">
          <source>To give it a try, let's add this plug to our router:</source>
          <target state="translated">試しに、このプラグをルーターに追加してみましょう。</target>
        </trans-unit>
        <trans-unit id="f52a3e3b8dd3d57e8b74bdd60fe023df58eda4ed" translate="yes" xml:space="preserve">
          <source>To handle custom client-side JavaScript when an element is added, updated, or removed by the server, a hook object may be provided with the following life-cycle callbacks:</source>
          <target state="translated">サーバーによって要素が追加、更新、削除されたときにカスタムのクライアントサイドJavaScriptを処理するために、フックオブジェクトは以下のライフサイクルコールバックを提供することができます。</target>
        </trans-unit>
        <trans-unit id="30c9f6eff2338b6f7de44ce146c839d9e841d092" translate="yes" xml:space="preserve">
          <source>To handle form changes and submissions, use the &lt;code&gt;phx-change&lt;/code&gt; and &lt;code&gt;phx-submit&lt;/code&gt; events. In general, it is preferred to handle input changes at the form level, where all form fields are passed to the LiveView's callback given any single input change. For example, to handle real-time form validation and saving, your template would use both &lt;code&gt;phx_change&lt;/code&gt; and &lt;code&gt;phx_submit&lt;/code&gt; bindings:</source>
          <target state="translated">フォームの変更と &lt;code&gt;phx-submit&lt;/code&gt; を処理するには、 &lt;code&gt;phx-change&lt;/code&gt; イベントとphx-submitイベントを使用します。一般に、入力の変更はフォームレベルで処理することをお勧めします。この場合、単一の入力変更があれば、すべてのフォームフィールドがLiveViewのコールバックに渡されます。例えば、リアルタイムのフォーム検証と保存を処理するために、あなたのテンプレートが両方使用し &lt;code&gt;phx_change&lt;/code&gt; と &lt;code&gt;phx_submit&lt;/code&gt; バインディングを：</target>
        </trans-unit>
        <trans-unit id="267d7ad17f4eb697f730fe2dade15352df2b644f" translate="yes" xml:space="preserve">
          <source>To handle latent events, any HTML tag can be annotated with &lt;code&gt;phx-disable-with&lt;/code&gt;, which swaps the element's &lt;code&gt;innerText&lt;/code&gt; with the provided value during event submission. For example, the following code would change the &quot;Save&quot; button to &quot;Saving...&quot;, and restore it to &quot;Save&quot; on acknowledgment:</source>
          <target state="translated">潜在的なイベントを処理するために、任意のHTMLタグに &lt;code&gt;phx-disable-with&lt;/code&gt; で注釈を付けることができます。これにより、イベントの送信中に要素の &lt;code&gt;innerText&lt;/code&gt; が指定された値と交換されます。たとえば、次のコードは、[保存]ボタンを[保存中...]に変更し、確認応答時に[保存]に復元します。</target>
        </trans-unit>
        <trans-unit id="2c017a576254a552f3b45b37a156813727bf60fc" translate="yes" xml:space="preserve">
          <source>To have coalesce/2 available, just import the module that defines it.</source>
          <target state="translated">coalesce/2を利用できるようにするには、それを定義しているモジュールをインポートするだけです。</target>
        </trans-unit>
        <trans-unit id="e75ef0e9c4fd7b13190431887d04db3dc76e0ef4" translate="yes" xml:space="preserve">
          <source>To hide a fields value from the inspect protocol of &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Ecto.Changeset&lt;/code&gt;&lt;/a&gt;, mark the field as &lt;code&gt;redact: true&lt;/code&gt; in the schema, and it will display with the value &lt;code&gt;**redacted**&lt;/code&gt;.</source>
          <target state="translated">To hide a fields value from the inspect protocol of &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Ecto.Changeset&lt;/code&gt; &lt;/a&gt;, mark the field as &lt;code&gt;redact: true&lt;/code&gt; in the schema, and it will display with the value &lt;code&gt;**redacted**&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="855cc0ad003d98da4f4ca9c2d54547a476da02d3" translate="yes" xml:space="preserve">
          <source>To keep things simple, we added both our sign-in and sign-out forms in this template. For our sign-in form, we pass the &lt;code&gt;@conn&lt;/code&gt; directly to &lt;code&gt;form_for&lt;/code&gt;, pointing our form action at &lt;code&gt;session_path(@conn, :create)&lt;/code&gt;. We also pass the &lt;code&gt;as: :user&lt;/code&gt; option which tells Phoenix to wrap the form parameters inside a &lt;code&gt;&quot;user&quot;&lt;/code&gt; key. Next, we used the &lt;code&gt;text_input&lt;/code&gt; and &lt;code&gt;password_input&lt;/code&gt; functions to send up an &lt;code&gt;&quot;email&quot;&lt;/code&gt; and &lt;code&gt;&quot;password&quot;&lt;/code&gt; parameter.</source>
          <target state="translated">簡単にするために、このテンプレートにサインインフォームとサインアウトフォームの両方を追加しました。私たちのサインインフォームのために、私たちは合格 &lt;code&gt;@conn&lt;/code&gt; を直接 &lt;code&gt;form_for&lt;/code&gt; で私達のフォームアクションを指し、 &lt;code&gt;session_path(@conn, :create)&lt;/code&gt; 。また、フォームパラメータを &lt;code&gt;&quot;user&quot;&lt;/code&gt; キー内にラップするようにPhoenixに指示する &lt;code&gt;as: :user&lt;/code&gt; オプションも渡します。次に、 &lt;code&gt;text_input&lt;/code&gt; 関数と &lt;code&gt;password_input&lt;/code&gt; 関数を使用して、 &lt;code&gt;&quot;email&quot;&lt;/code&gt; &lt;code&gt;&quot;password&quot;&lt;/code&gt; パラメーターと「password」パラメーターを送信しました。</target>
        </trans-unit>
        <trans-unit id="41ef78913465515a398d685d02fba061196e4bdf" translate="yes" xml:space="preserve">
          <source>To learn more about &lt;a href=&quot;mix.tasks.phx.new&quot;&gt;&lt;code&gt;mix phx.new&lt;/code&gt;&lt;/a&gt; you can read the &lt;a href=&quot;mix_tasks#phoenix-specific-mix-tasks&quot;&gt;Mix Tasks Guide&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;mix.tasks.phx.new&quot;&gt; &lt;code&gt;mix phx.new&lt;/code&gt; の&lt;/a&gt;詳細については、&lt;a href=&quot;mix_tasks#phoenix-specific-mix-tasks&quot;&gt;Mix &lt;/a&gt;TasksGuideを参照してください。</target>
        </trans-unit>
        <trans-unit id="41d3efd7490499ce0623a7738176753951ffa31a" translate="yes" xml:space="preserve">
          <source>To learn more about Plugs, see the documentation for &lt;a href=&quot;https://hexdocs.pm/plug&quot;&gt;the Plug project&lt;/a&gt;, which provides many built-in plugs and functionalities.</source>
          <target state="translated">プラグの詳細については、多くの組み込みプラグと機能を提供する&lt;a href=&quot;https://hexdocs.pm/plug&quot;&gt;プラグプロジェクトの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="07ecc754901c9b7b1612b2347516e5e86c89fd01" translate="yes" xml:space="preserve">
          <source>To load data from non-database sources, use &lt;a href=&quot;ecto#embedded_load/3&quot;&gt;&lt;code&gt;Ecto.embedded_load/3&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">To load data from non-database sources, use &lt;a href=&quot;ecto#embedded_load/3&quot;&gt; &lt;code&gt;Ecto.embedded_load/3&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="b9c5bfde6fe357ce410561f8996b3ca30aa626e4" translate="yes" xml:space="preserve">
          <source>To log the status of requests being sent:</source>
          <target state="translated">送信されたリクエストのステータスをログに記録します。</target>
        </trans-unit>
        <trans-unit id="ee680d8d89287bdbf31b386e8103c640bb092faa" translate="yes" xml:space="preserve">
          <source>To log the status of response being sent:</source>
          <target state="translated">応答が送信されている状態をログに記録します。</target>
        </trans-unit>
        <trans-unit id="b84dbd8c1d5f506769b351fa5d09d5ae2afb79fe" translate="yes" xml:space="preserve">
          <source>To make that happen, let's create a new &lt;code&gt;lib/hello_web/controllers/hello_controller.ex&lt;/code&gt; file, and make it look like the following:</source>
          <target state="translated">これを実現するには、新しい &lt;code&gt;lib/hello_web/controllers/hello_controller.ex&lt;/code&gt; ファイルを作成し、次のようにします。</target>
        </trans-unit>
        <trans-unit id="4ba9cdf779e09df433f92db1ffd43f9ee1c2b0dd" translate="yes" xml:space="preserve">
          <source>To make the value label easier to read, we can update our private function to generate more user friendly names. We'll run the value of the &lt;code&gt;:view&lt;/code&gt; through &lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#inspect/1&quot;&gt;&lt;code&gt;inspect/1&lt;/code&gt;&lt;/a&gt; to remove the &lt;code&gt;Elixir.&lt;/code&gt; prefix and call another private function to convert the &lt;code&gt;connected?&lt;/code&gt; boolean into human readable text.</source>
          <target state="translated">値ラベルを読みやすくするために、プライベート関数を更新して、よりユーザーフレンドリーな名前を生成できます。 &lt;code&gt;:view&lt;/code&gt; から&lt;a href=&quot;https://hexdocs.pm/elixir/Kernel.html#inspect/1&quot;&gt; &lt;code&gt;inspect/1&lt;/code&gt; &lt;/a&gt;の値を実行して、 &lt;code&gt;Elixir.&lt;/code&gt; を削除します。プレフィックスを付けて別のプライベート関数を呼び出し、 &lt;code&gt;connected?&lt;/code&gt; ブール値を人間が読めるテキストに変換します。</target>
        </trans-unit>
        <trans-unit id="67920df22e1378273bb126fe074d93ace6df9e19" translate="yes" xml:space="preserve">
          <source>To make this all work, we converted the nested blocks of code and used &lt;code&gt;halt(conn)&lt;/code&gt; whenever we reached a failure path. The &lt;code&gt;halt(conn)&lt;/code&gt; functionality is essential here: it tells Plug that the next plug should not be invoked.</source>
          <target state="translated">これをすべて機能させるために、ネストされたコードブロックを変換し、障害パスに到達するたびに &lt;code&gt;halt(conn)&lt;/code&gt; を使用しました。ここでは、 &lt;code&gt;halt(conn)&lt;/code&gt; 機能が不可欠です。これは、次のプラグを呼び出さないようにプラグに指示します。</target>
        </trans-unit>
        <trans-unit id="8b981e8d2840a199b1a09b482f3875a4d2e4d12a" translate="yes" xml:space="preserve">
          <source>To prevent downgrade attacks, in which an attacker intercepts a plain HTTP request to the server before the redirect to HTTPS takes place, &lt;a href=&quot;plug.ssl&quot;&gt;&lt;code&gt;Plug.SSL&lt;/code&gt;&lt;/a&gt; by default sets the '&lt;a href=&quot;https://www.owasp.org/index.php/HTTP_Strict_Transport_Security_Cheat_Sheet&quot;&gt;Strict-Transport-Security&lt;/a&gt;' (HSTS) header. This informs the browser that the current site must only ever be accessed over HTTPS, even if the user typed or clicked a plain HTTP URL. This only works if the site is reachable on port 443 (see &lt;a href=&quot;#listening-on-port-443&quot;&gt;Listening on Port 443&lt;/a&gt;, below).</source>
          <target state="translated">HTTPSへのリダイレクトが行われる前に攻撃者がサーバーへのプレーンなHTTPリクエストを傍受するダウングレード攻撃を防ぐために、&lt;a href=&quot;plug.ssl&quot;&gt; &lt;code&gt;Plug.SSL&lt;/code&gt; &lt;/a&gt;はデフォルトで「&lt;a href=&quot;https://www.owasp.org/index.php/HTTP_Strict_Transport_Security_Cheat_Sheet&quot;&gt;Strict-Transport-Security&lt;/a&gt;」（HSTS）ヘッダーを設定します。これにより、ユーザーがプレーンなHTTP URLを入力またはクリックした場合でも、現在のサイトにはHTTPS経由でのみアクセスする必要があることがブラウザに通知されます。これは、サイトがポート443で到達可能である場合にのみ機能します（以下の&lt;a href=&quot;#listening-on-port-443&quot;&gt;ポート443&lt;/a&gt;でのリスニングを参照）。</target>
        </trans-unit>
        <trans-unit id="4cc58fd422ebb28e73e66dcbc49fcc7dea92cf94" translate="yes" xml:space="preserve">
          <source>To print the Phoenix installer version, pass &lt;code&gt;-v&lt;/code&gt; or &lt;code&gt;--version&lt;/code&gt;, for example:</source>
          <target state="translated">Phoenixインストーラーのバージョンを印刷するには、次のように &lt;code&gt;-v&lt;/code&gt; または &lt;code&gt;--version&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="26c8218895c269e2f70bd1d662ea87120136ac06" translate="yes" xml:space="preserve">
          <source>To protect the private key on disk it is best stored in encrypted PEM format, protected by a password. When configuring a Plug server with an encrypted private key, specify the password using the &lt;code&gt;:password&lt;/code&gt; option:</source>
          <target state="translated">ディスク上の秘密鍵を保護するには、暗号化されたPEM形式で保存し、パスワードで保護するのが最適です。暗号化された秘密鍵を使用してプラグサーバーを構成する場合は、 &lt;code&gt;:password&lt;/code&gt; オプションを使用してパスワードを指定します。</target>
        </trans-unit>
        <trans-unit id="08f005693574383d47c51cc61b7ad7263f57b279" translate="yes" xml:space="preserve">
          <source>To push out-of-band events to the client, for example to render charting points, one could do:</source>
          <target state="translated">帯域外イベントをクライアントにプッシュするには、例えばチャートポイントをレンダリングするなどの方法があります。</target>
        </trans-unit>
        <trans-unit id="fccb94c57dedc205e8813c5305e1507bc38c480d" translate="yes" xml:space="preserve">
          <source>To render the template within the layout, simply call &lt;a href=&quot;#render/3&quot;&gt;&lt;code&gt;render/3&lt;/code&gt;&lt;/a&gt; using the &lt;code&gt;@view_module&lt;/code&gt; and &lt;code&gt;@view_template&lt;/code&gt; assign:</source>
          <target state="translated">レイアウト内でテンプレートをレンダリングするには、 &lt;code&gt;@view_module&lt;/code&gt; と &lt;code&gt;@view_template&lt;/code&gt; assign を使用して&lt;a href=&quot;#render/3&quot;&gt; &lt;code&gt;render/3&lt;/code&gt; &lt;/a&gt;を呼び出すだけです。</target>
        </trans-unit>
        <trans-unit id="aa8723d880ffe7172650143b48a2d4553d915169" translate="yes" xml:space="preserve">
          <source>To run &lt;code&gt;phx.server&lt;/code&gt; without checking dependencies, you can run:</source>
          <target state="translated">To run &lt;code&gt;phx.server&lt;/code&gt; without checking dependencies, you can run:</target>
        </trans-unit>
        <trans-unit id="e1965798572eff34dbe863a6ecca7a38fdba4475" translate="yes" xml:space="preserve">
          <source>To see an example of how Phoenix LiveDashboard uses these events to create metrics, visit &lt;a href=&quot;https://hexdocs.pm/phoenix_live_dashboard/metrics.html&quot;&gt;https://hexdocs.pm/phoenix_live_dashboard/metrics.html&lt;/a&gt;.</source>
          <target state="translated">To see an example of how Phoenix LiveDashboard uses these events to create metrics, visit &lt;a href=&quot;https://hexdocs.pm/phoenix_live_dashboard/metrics.html&quot;&gt;https://hexdocs.pm/phoenix_live_dashboard/metrics.html&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="780f2579e6ee8b79fb5eebbb6a2bad044f0a1da4" translate="yes" xml:space="preserve">
          <source>To see the assign in action, go to the layout in &quot;lib/hello_web/templates/layout/app.html.eex&quot; and add the following close to the main container:</source>
          <target state="translated">代入の動作を見るには、&quot;lib/hello_web/templates/layout/app.html.eex &quot;内のレイアウトに移動し、メインコンテナの近くに以下を追加します。</target>
        </trans-unit>
        <trans-unit id="ac659bbda0b5959d98ced3480e408112f77540e4" translate="yes" xml:space="preserve">
          <source>To see this in action, let's write a module plug that puts the &lt;code&gt;:locale&lt;/code&gt; key and value into the connection assign for downstream use in other plugs, controller actions, and our views. Put the contents above to a file named &quot;lib/hello_web/plugs/locale.ex&quot;:</source>
          <target state="translated">これが実際に動作することを確認するために、他のプラグ、コントローラーアクション、およびビューでダウンストリームで使用するために、 &lt;code&gt;:locale&lt;/code&gt; キーと値を接続割り当てに配置するモジュールプラグを作成しましょう。上記の内容を「lib / hello_web / plugins /locale.ex」という名前のファイルに入れます。</target>
        </trans-unit>
        <trans-unit id="52a700000692ac76dd990fc6ece3a9849d62392d" translate="yes" xml:space="preserve">
          <source>To send a file that is stored inside your application priv directory:</source>
          <target state="translated">アプリケーションの priv ディレクトリ内に保存されているファイルを送信します。</target>
        </trans-unit>
        <trans-unit id="35a9af194f11f81b8d5034792059c6fe96098baa" translate="yes" xml:space="preserve">
          <source>To sign, you would do:</source>
          <target state="translated">サインをするには、あなたがしなければならない。</target>
        </trans-unit>
        <trans-unit id="44fd47beed516022715facac2a1ae8d92a4df5b5" translate="yes" xml:space="preserve">
          <source>To simplify configuration of TLS defaults Plug provides two preconfifured options: &lt;code&gt;cipher_suite: :strong&lt;/code&gt; and &lt;code&gt;cipher_suite: :compatible&lt;/code&gt;. The Ciphers chosen and related configuration come from the OWASP recommendations found here: https://www.owasp.org/index.php/TLS_Cipher_String_Cheat_Sheet</source>
          <target state="translated">TLSのデフォルトの設定を簡略化するために、プラグは2つの事前設定済みオプション、 &lt;code&gt;cipher_suite: :compatible&lt;/code&gt; &lt;code&gt;cipher_suite: :strong&lt;/code&gt; とcipher_suite：：compatibleを提供します。選択された暗号と関連する設定は、https：//www.owasp.org/index.php/TLS_Cipher_String_Cheat_SheetにあるOWASPの推奨事項に基づいています。</target>
        </trans-unit>
        <trans-unit id="0648eaf88db893b2046b349febdc511815782796" translate="yes" xml:space="preserve">
          <source>To simplify configuration of TLS defaults Plug provides two preconfigured options: &lt;code&gt;cipher_suite: :strong&lt;/code&gt; and &lt;code&gt;cipher_suite: :compatible&lt;/code&gt;.</source>
          <target state="translated">TLSデフォルトの構成を簡素化するために、Plugは2つの事前構成済みオプションを提供します： &lt;code&gt;cipher_suite: :strong&lt;/code&gt; と &lt;code&gt;cipher_suite: :compatible&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9f0f28f03a276631d1d8cb8b076f6c25bc731344" translate="yes" xml:space="preserve">
          <source>To simplify configuration of TLS defaults, this function provides two preconfigured options: &lt;code&gt;cipher_suite: :strong&lt;/code&gt; and &lt;code&gt;cipher_suite: :compatible&lt;/code&gt;. The Ciphers chosen and related configuration come from the &lt;a href=&quot;https://www.owasp.org/index.php/TLS_Cipher_String_Cheat_Sheet&quot;&gt;OWASP Cipher String Cheat Sheet&lt;/a&gt;</source>
          <target state="translated">To simplify configuration of TLS defaults, this function provides two preconfigured options: &lt;code&gt;cipher_suite: :strong&lt;/code&gt; and &lt;code&gt;cipher_suite: :compatible&lt;/code&gt; . The Ciphers chosen and related configuration come from the &lt;a href=&quot;https://www.owasp.org/index.php/TLS_Cipher_String_Cheat_Sheet&quot;&gt;OWASP Cipher String Cheat Sheet&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="05cfddf3dfec406094311ddae72d16bd5088244a" translate="yes" xml:space="preserve">
          <source>To solve this, all &lt;a href=&quot;phoenix.liveview.rendered&quot;&gt;&lt;code&gt;Phoenix.LiveView.Rendered&lt;/code&gt;&lt;/a&gt; structs also contain a fingerprint field that uniquely identifies it. If the fingerprints are equal, you have the same template, and therefore it is possible to only transmit its changes.</source>
          <target state="translated">これを解決するために、すべての&lt;a href=&quot;phoenix.liveview.rendered&quot;&gt; &lt;code&gt;Phoenix.LiveView.Rendered&lt;/code&gt; &lt;/a&gt;構造体には、それを一意に識別するフィンガープリントフィールドも含まれています。フィンガープリントが等しい場合、同じテンプレートを使用しているため、変更を送信することしかできません。</target>
        </trans-unit>
        <trans-unit id="58fcf5b5fb3d94c82b9314b323af893477190f87" translate="yes" xml:space="preserve">
          <source>To specify private options on &lt;code&gt;match&lt;/code&gt; that can be used by plugs before &lt;code&gt;dispatch&lt;/code&gt; pass an option with key &lt;code&gt;:private&lt;/code&gt; containing a map. Example:</source>
          <target state="translated">&lt;code&gt;dispatch&lt;/code&gt; 前のプラグで使用できる &lt;code&gt;match&lt;/code&gt; プライベートオプションを指定するには、マップを含むキー &lt;code&gt;:private&lt;/code&gt; でオプションを渡します。例：</target>
        </trans-unit>
        <trans-unit id="b3f3f98dc901f9abeb9304c536e620a40b09a54d" translate="yes" xml:space="preserve">
          <source>To specify the endpoint that will provide instrumentation, the first argument can be:</source>
          <target state="translated">インストルメンテーションを提供するエンドポイントを指定するには、第1引数を指定します。</target>
        </trans-unit>
        <trans-unit id="b1d40c54757f1d4613e7479119437d84155bd019" translate="yes" xml:space="preserve">
          <source>To start a tracker, first add the tracker to your supervision tree:</source>
          <target state="translated">トラッカーを開始するには、まず監督ツリーにトラッカーを追加します。</target>
        </trans-unit>
        <trans-unit id="865274f6fae09ebe9585b2086ee27cd4cbdb840c" translate="yes" xml:space="preserve">
          <source>To start, let's think of a function name that describes what we want to accomplish. To authenticate a user by email address, we'll need a way to lookup that user and verify their entered credentials are valid. We can do this by exposing a single function on our &lt;code&gt;Accounts&lt;/code&gt; context.</source>
          <target state="translated">まず、達成したいことを説明する関数名について考えてみましょう。メールアドレスでユーザーを認証するには、そのユーザーを検索し、入力した資格情報が有効であることを確認する方法が必要です。これを行うには、 &lt;code&gt;Accounts&lt;/code&gt; コンテキストで単一の関数を公開します。</target>
        </trans-unit>
        <trans-unit id="fe9098d8b92793a95404f15371666be5a41249f2" translate="yes" xml:space="preserve">
          <source>To stop it, we hit &lt;code&gt;ctrl-c&lt;/code&gt; twice.</source>
          <target state="translated">それを止めるには、 &lt;code&gt;ctrl-c&lt;/code&gt; を2回押します。</target>
        </trans-unit>
        <trans-unit id="d581dcb8a5c7aee4d296819c687a1a0e294823ae" translate="yes" xml:space="preserve">
          <source>To stream data use &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#reduce_while/3&quot;&gt;&lt;code&gt;Enum.reduce_while/3&lt;/code&gt;&lt;/a&gt; instead of &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#into/2&quot;&gt;&lt;code&gt;Enum.into/2&lt;/code&gt;&lt;/a&gt;. &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#reduce_while/3&quot;&gt;&lt;code&gt;Enum.reduce_while/3&lt;/code&gt;&lt;/a&gt; allows aborting the execution if &lt;a href=&quot;#chunk/2&quot;&gt;&lt;code&gt;chunk/2&lt;/code&gt;&lt;/a&gt; fails to deliver the chunk of data.</source>
          <target state="translated">データをストリーミングするには、&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#into/2&quot;&gt; &lt;code&gt;Enum.into/2&lt;/code&gt; の&lt;/a&gt;代わりにEnum.reduce_while / &lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#reduce_while/3&quot;&gt; &lt;code&gt;Enum.reduce_while/3&lt;/code&gt; &lt;/a&gt;使用します。&lt;a href=&quot;https://hexdocs.pm/elixir/Enum.html#reduce_while/3&quot;&gt; &lt;code&gt;Enum.reduce_while/3&lt;/code&gt; &lt;/a&gt;では、&lt;a href=&quot;#chunk/2&quot;&gt; &lt;code&gt;chunk/2&lt;/code&gt; &lt;/a&gt;がデータのチャンクの配信に失敗した場合に実行を中止できます。</target>
        </trans-unit>
        <trans-unit id="9fa929e9e71e2e4dc6c3efe3b0fa423875bca234" translate="yes" xml:space="preserve">
          <source>To submit a form along with some with hidden input values:</source>
          <target state="translated">隠された入力値を持ついくつかのフォームを送信するために。</target>
        </trans-unit>
        <trans-unit id="968cfb95ef76146b6409c3b657948cdd5f1f4f75" translate="yes" xml:space="preserve">
          <source>To sum it up:</source>
          <target state="translated">要約すると</target>
        </trans-unit>
        <trans-unit id="102bc3a62eadfb6175b1787787fb41a6baa07e87" translate="yes" xml:space="preserve">
          <source>To sum up:</source>
          <target state="translated">要約すると</target>
        </trans-unit>
        <trans-unit id="a410cd8f3e812852d23e13de76f2d28e929bd21f" translate="yes" xml:space="preserve">
          <source>To switch adapters, we need to remove the Postgrex dependency and add a new one for Mariaex instead.</source>
          <target state="translated">アダプタを切り替えるには、Postgrexの依存関係を削除し、代わりにMariaex用の新しいものを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="4a2ee59d6482fe8d57fcc8a0083e0c4366e7446c" translate="yes" xml:space="preserve">
          <source>To template that goes inside the layout will be placed in the &lt;code&gt;@inner_content&lt;/code&gt; assign:</source>
          <target state="translated">To template that goes inside the layout will be placed in the &lt;code&gt;@inner_content&lt;/code&gt; assign:</target>
        </trans-unit>
        <trans-unit id="80e061ad3871e4c5c14888dba30a6440671c5a6d" translate="yes" xml:space="preserve">
          <source>To test:</source>
          <target state="translated">テストするために。</target>
        </trans-unit>
        <trans-unit id="26b1ef54f7afb80af1f92d1a44fccf208e6f5b11" translate="yes" xml:space="preserve">
          <source>To use a precompiled template, create a &lt;code&gt;scripts.html.eex&lt;/code&gt; file in the &lt;code&gt;templates&lt;/code&gt; directory for the corresponding view you want it to render for. For example, for the &lt;code&gt;UserView&lt;/code&gt;, create the &lt;code&gt;scripts.html.eex&lt;/code&gt; file at &lt;code&gt;web/templates/user/&lt;/code&gt;.</source>
          <target state="translated">プリコンパイルされたテンプレートを使用するには、 &lt;code&gt;templates&lt;/code&gt; ディレクトリで、レンダリングする対応するビューの &lt;code&gt;scripts.html.eex&lt;/code&gt; ファイルを作成します。たとえば、 &lt;code&gt;UserView&lt;/code&gt; の場合は、scripts.html.eexファイルを &lt;code&gt;web/templates/user/&lt;/code&gt; に作成し &lt;code&gt;scripts.html.eex&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f114bef104473c93c624dc15c134a2506e1bf712" translate="yes" xml:space="preserve">
          <source>To use a precompiled template, create a &lt;code&gt;scripts.html.eex&lt;/code&gt; file in the &lt;code&gt;templates&lt;/code&gt; directory for the corresponding view you want it to render for. For example, for the &lt;code&gt;UserView&lt;/code&gt;, create the &lt;code&gt;scripts.html.eex&lt;/code&gt; file at &lt;code&gt;your_app_web/templates/user/&lt;/code&gt;.</source>
          <target state="translated">To use a precompiled template, create a &lt;code&gt;scripts.html.eex&lt;/code&gt; file in the &lt;code&gt;templates&lt;/code&gt; directory for the corresponding view you want it to render for. For example, for the &lt;code&gt;UserView&lt;/code&gt; , create the &lt;code&gt;scripts.html.eex&lt;/code&gt; file at &lt;code&gt;your_app_web/templates/user/&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f17a125a5e6e8a005867e5e43c2e03a3bc9ba5a1" translate="yes" xml:space="preserve">
          <source>To use inform for early hints send one or more informs with a status of 103.</source>
          <target state="translated">早期のヒントにinformを使用するには、ステータスが103の1つ以上のinformを送信します。</target>
        </trans-unit>
        <trans-unit id="4c9225f6845b572057c82d533463516a01a74a81" translate="yes" xml:space="preserve">
          <source>To use it as the type for the id in our schema, we can use the &lt;code&gt;@primary_key&lt;/code&gt; module attribute:</source>
          <target state="translated">To use it as the type for the id in our schema, we can use the &lt;code&gt;@primary_key&lt;/code&gt; module attribute:</target>
        </trans-unit>
        <trans-unit id="c71555f84c848ebd550b0b2837d6569d68c6e857" translate="yes" xml:space="preserve">
          <source>To use it as your PubSub adapter, simply add it to your Endpoint&amp;rsquo;s config:</source>
          <target state="translated">これをPubSubアダプターとして使用するには、エンドポイントの構成に追加するだけです。</target>
        </trans-unit>
        <trans-unit id="187cfa2127b5960446298f89ad2cfe623ccc0476" translate="yes" xml:space="preserve">
          <source>To use it, just plug it into the desired module.</source>
          <target state="translated">使用するには、目的のモジュールに差し込むだけです。</target>
        </trans-unit>
        <trans-unit id="2e14f0d8d5504cedce23ae26e51fc49f968cc49d" translate="yes" xml:space="preserve">
          <source>To use it, just plug it into the desired module:</source>
          <target state="translated">使用するには、目的のモジュールに差し込むだけです。</target>
        </trans-unit>
        <trans-unit id="595e3caee2e048e5b6af233064a5c06aa1ae0dd2" translate="yes" xml:space="preserve">
          <source>To use the live layout, update your LiveView to pass the &lt;code&gt;:layout&lt;/code&gt; option to &lt;code&gt;use Phoenix.LiveView&lt;/code&gt;:</source>
          <target state="translated">ライブレイアウトを使用するには、LiveViewを更新して &lt;code&gt;:layout&lt;/code&gt; オプションを渡し、 &lt;code&gt;use Phoenix.LiveView&lt;/code&gt; ：を使用します。</target>
        </trans-unit>
        <trans-unit id="a467a95e3bae25f66e655cb0e95ae8997b92d46e" translate="yes" xml:space="preserve">
          <source>To use this adapter outside of Phoenix, you must start an instance of this module as part of your supervision tree:</source>
          <target state="translated">このアダプタを Phoenix 以外で使用するには、このモジュールのインスタンスを監視ツリーの一部として起動する必要があります。</target>
        </trans-unit>
        <trans-unit id="c8cc58c102127e1478be2cb62bee842868d8e23c" translate="yes" xml:space="preserve">
          <source>To use this functionality, the first step is to annotate which static files you want to be tracked by LiveView, with the &lt;code&gt;phx-track-static&lt;/code&gt;. For example:</source>
          <target state="translated">この機能を使用するには、最初のステップとして、LiveViewで追跡する静的ファイルに &lt;code&gt;phx-track-static&lt;/code&gt; を使用して注釈を付けます。例えば：</target>
        </trans-unit>
        <trans-unit id="117496c10ce2870a7a485406c87644c6a1d5cede" translate="yes" xml:space="preserve">
          <source>To use this plug, just plug it into the desired module:</source>
          <target state="translated">このプラグを使用するには、目的のモジュールにプラグを差し込むだけです。</target>
        </trans-unit>
        <trans-unit id="5ed35357476c8058b977ba69de2188d350955b6b" translate="yes" xml:space="preserve">
          <source>To use this type in a schema field, specify the type and parameters like this:</source>
          <target state="translated">このタイプをスキーマフィールドで使用するには、このようにタイプとパラメータを指定します。</target>
        </trans-unit>
        <trans-unit id="0be2552a6f37a24285cf8c9a4bbf18c028914ee4" translate="yes" xml:space="preserve">
          <source>To wrap a label around an input, see &lt;a href=&quot;#label/1&quot;&gt;&lt;code&gt;label/1&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">入力の周りにラベルをラップするには、&lt;a href=&quot;#label/1&quot;&gt; &lt;code&gt;label/1&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d3ba8aacdac746a9e58d91fb33fc6cb9465a0339" translate="yes" xml:space="preserve">
          <source>Token generation</source>
          <target state="translated">トークン生成</target>
        </trans-unit>
        <trans-unit id="f80aa637b7d7bc4574011a6f03ec544bfb7d8aa0" translate="yes" xml:space="preserve">
          <source>Tokens provide a way to generate and verify bearer tokens for use in Channels or API authentication.</source>
          <target state="translated">トークンは、チャネルやAPI認証で使用するベアラートークンを生成して検証する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="20a6a1c796f4bedac7e31cb355e60cefd679db64" translate="yes" xml:space="preserve">
          <source>Topic Patterns</source>
          <target state="translated">トピックパターン</target>
        </trans-unit>
        <trans-unit id="7ab575de50dde2e85ca0c17176dc52fba2687bb2" translate="yes" xml:space="preserve">
          <source>Topics &amp;amp; Callbacks</source>
          <target state="translated">トピックとコールバック</target>
        </trans-unit>
        <trans-unit id="c05de3133bb80093a252ef28feff7623186b061e" translate="yes" xml:space="preserve">
          <source>Track a channel's process as a presence.</source>
          <target state="translated">チャンネルのプロセスをプレゼンスとして追跡します。</target>
        </trans-unit>
        <trans-unit id="261a0221d2b8ed7abd71a3e4620a5971130fd19b" translate="yes" xml:space="preserve">
          <source>Track an arbitrary process as a presence.</source>
          <target state="translated">任意のプロセスを存在として追跡する。</target>
        </trans-unit>
        <trans-unit id="01ecb082b24a5ab812ebd962ccc4da0fcdfbcfae" translate="yes" xml:space="preserve">
          <source>Tracked presences are grouped by &lt;code&gt;key&lt;/code&gt;, cast as a string. For example, to group each user's channels together, use user IDs as keys. Each presence can be associated with a map of metadata to store small, emphemeral state, such as a user's online status. To store detailed information, see &lt;a href=&quot;#c:fetch/2&quot;&gt;&lt;code&gt;fetch/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Tracked presences are grouped by &lt;code&gt;key&lt;/code&gt; , cast as a string. For example, to group each user's channels together, use user IDs as keys. Each presence can be associated with a map of metadata to store small, emphemeral state, such as a user's online status. To store detailed information, see &lt;a href=&quot;#c:fetch/2&quot;&gt; &lt;code&gt;fetch/2&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="a1815ae87e1ed66b14331696c387c97e3da9eb63" translate="yes" xml:space="preserve">
          <source>Tracker servers use a heartbeat protocol and CRDT to replicate presence information across a cluster in an eventually consistent, conflict-free manner. Under this design, there is no single source of truth or global process. Instead, each node runs one or more &lt;a href=&quot;phoenix.tracker#content&quot;&gt;&lt;code&gt;Phoenix.Tracker&lt;/code&gt;&lt;/a&gt; servers and node-local changes are replicated across the cluster and handled locally as a diff of changes.</source>
          <target state="translated">トラッカーサーバーは、ハートビートプロトコルとCRDTを使用して、最終的に一貫した競合のない方法で、クラスター全体でプレゼンス情報を複製します。この設計では、真実またはグローバルプロセスの単一のソースはありません。代わりに、各ノードは1つ以上の&lt;a href=&quot;phoenix.tracker#content&quot;&gt; &lt;code&gt;Phoenix.Tracker&lt;/code&gt; &lt;/a&gt;サーバーを実行し、ノードローカルの変更はクラスター全体に複製され、変更の差分としてローカルで処理されます。</target>
        </trans-unit>
        <trans-unit id="e426db3c83832b5b1a9b212c38c2b26124ea17c3" translate="yes" xml:space="preserve">
          <source>Tracker shards use a heartbeat protocol and CRDT to replicate presence information across a cluster in an eventually consistent, conflict-free manner. Under this design, there is no single source of truth or global process. Each node runs a pool of &lt;a href=&quot;phoenix.tracker.shard&quot;&gt;&lt;code&gt;Phoenix.Tracker.Shard&lt;/code&gt;&lt;/a&gt;s and node-local changes are replicated across the cluster and handled locally as a diff of changes.</source>
          <target state="translated">トラッカーシャードは、ハートビートプロトコルとCRDTを使用して、最終的に一貫した競合のない方法で、クラスター全体でプレゼンス情報を複製します。この設計では、真実またはグローバルプロセスの単一のソースはありません。各ノードは&lt;a href=&quot;phoenix.tracker.shard&quot;&gt; &lt;code&gt;Phoenix.Tracker.Shard&lt;/code&gt; &lt;/a&gt;のプールを実行し、ノードローカルの変更はクラスター全体に複製され、変更の差分としてローカルに処理されます。</target>
        </trans-unit>
        <trans-unit id="f1a6bb7d4cf7d24a007e92d554e3f03f18d78e05" translate="yes" xml:space="preserve">
          <source>Trackers must implement &lt;code&gt;start_link/1&lt;/code&gt;, &lt;a href=&quot;#init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;handle_diff/2&lt;/code&gt;. The &lt;a href=&quot;#init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; callback allows the tracker to manage its own state when running within the &lt;a href=&quot;#content&quot;&gt;&lt;code&gt;Phoenix.Tracker&lt;/code&gt;&lt;/a&gt; server. The &lt;code&gt;handle_diff&lt;/code&gt; callback is invoked with a diff of presence join and leave events, grouped by topic. As replicas heartbeat and replicate data, the local tracker state is merged with the remote data, and the diff is sent to the callback. The handler can use this information to notify subscribers of events, as done above.</source>
          <target state="translated">Trackers must implement &lt;code&gt;start_link/1&lt;/code&gt; , &lt;a href=&quot;#init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;, and &lt;code&gt;handle_diff/2&lt;/code&gt; . The &lt;a href=&quot;#init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt; callback allows the tracker to manage its own state when running within the &lt;a href=&quot;#content&quot;&gt; &lt;code&gt;Phoenix.Tracker&lt;/code&gt; &lt;/a&gt; server. The &lt;code&gt;handle_diff&lt;/code&gt; callback is invoked with a diff of presence join and leave events, grouped by topic. As replicas heartbeat and replicate data, the local tracker state is merged with the remote data, and the diff is sent to the callback. The handler can use this information to notify subscribers of events, as done above.</target>
        </trans-unit>
        <trans-unit id="386e43727163f9c18a619e32e79443e6e4a3c763" translate="yes" xml:space="preserve">
          <source>Trackers must implement &lt;code&gt;start_link/1&lt;/code&gt;, &lt;a href=&quot;#init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;handle_diff/2&lt;/code&gt;. The &lt;a href=&quot;#init/1&quot;&gt;&lt;code&gt;init/1&lt;/code&gt;&lt;/a&gt; callback allows the tracker to manage its own state when running within the &lt;a href=&quot;phoenix.tracker#content&quot;&gt;&lt;code&gt;Phoenix.Tracker&lt;/code&gt;&lt;/a&gt; server. The &lt;code&gt;handle_diff&lt;/code&gt; callback is invoked with a diff of presence join and leave events, grouped by topic. As replicas heartbeat and replicate data, the local tracker state is merged with the remote data, and the diff is sent to the callback. The handler can use this information to notify subscribers of events, as done above.</source>
          <target state="translated">トラッカーは &lt;code&gt;start_link/1&lt;/code&gt; 、&lt;a href=&quot;#init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;、および &lt;code&gt;handle_diff/2&lt;/code&gt; を実装する必要があります。&lt;a href=&quot;#init/1&quot;&gt; &lt;code&gt;init/1&lt;/code&gt; &lt;/a&gt;コールバックは、内で動作しているときトラッカーは、自身の状態を管理することができます&lt;a href=&quot;phoenix.tracker#content&quot;&gt; &lt;code&gt;Phoenix.Tracker&lt;/code&gt; の&lt;/a&gt;サーバー。 &lt;code&gt;handle_diff&lt;/code&gt; コールバックは、トピックごとにグループ化されたプレゼンス参加および脱退イベントの差分で呼び出されます。ハートビートを複製してデータを複製すると、ローカルトラッカーの状態がリモートデータとマージされ、diffがコールバックに送信されます。上記のように、ハンドラーはこの情報を使用してイベントをサブスクライバーに通知できます。</target>
        </trans-unit>
        <trans-unit id="3a1ce6393d7c243fe58a4abc442faa4d6b63e426" translate="yes" xml:space="preserve">
          <source>Trackers must implement &lt;code&gt;start_link/1&lt;/code&gt;, &lt;code&gt;init/1&lt;/code&gt;, and &lt;code&gt;handle_diff/2&lt;/code&gt;. The &lt;code&gt;init/1&lt;/code&gt; callback allows the tracker to manage its own state when running within the &lt;a href=&quot;phoenix.tracker#content&quot;&gt;&lt;code&gt;Phoenix.Tracker&lt;/code&gt;&lt;/a&gt; server. The &lt;code&gt;handle_diff&lt;/code&gt; callback is invoked with a diff of presence join and leave events, grouped by topic. As replicas heartbeat and replicate data, the local tracker state is merged with the remote data, and the diff is sent to the callback. The handler can use this information to notify subscribers of events, as done above.</source>
          <target state="translated">トラッカーは &lt;code&gt;start_link/1&lt;/code&gt; 、 &lt;code&gt;init/1&lt;/code&gt; 、および &lt;code&gt;handle_diff/2&lt;/code&gt; を実装する必要があります。 &lt;code&gt;init/1&lt;/code&gt; コールバックは、内で動作しているときトラッカーは、自身の状態を管理することができます&lt;a href=&quot;phoenix.tracker#content&quot;&gt; &lt;code&gt;Phoenix.Tracker&lt;/code&gt; の&lt;/a&gt;サーバー。 &lt;code&gt;handle_diff&lt;/code&gt; コールバックは、トピックごとにグループ化されたプレゼンス参加および脱退イベントの差分で呼び出されます。ハートビートを複製してデータを複製すると、ローカルトラッカーの状態がリモートデータとマージされ、diffがコールバックに送信されます。上記のように、ハンドラーはこの情報を使用してイベントをサブスクライバーに通知できます。</target>
        </trans-unit>
        <trans-unit id="ec88a8caf33e733f9f82eb74118f40a505db5749" translate="yes" xml:space="preserve">
          <source>Tracking changes</source>
          <target state="translated">変化の追跡</target>
        </trans-unit>
        <trans-unit id="bfd71a4b69dd23e4fec03cebbf6443963a3bb4f1" translate="yes" xml:space="preserve">
          <source>Tracks a presence</source>
          <target state="translated">存在感を追跡</target>
        </trans-unit>
        <trans-unit id="f77d00c25a6c8aa2f028ccd4ee433e0eac247ebb" translate="yes" xml:space="preserve">
          <source>Tracks a presence.</source>
          <target state="translated">存在感を追跡する。</target>
        </trans-unit>
        <trans-unit id="4d967b73b508c2dfcc359e0a2212dfc6cf38b5f5" translate="yes" xml:space="preserve">
          <source>Tracks the source prefix in the data storage.</source>
          <target state="translated">データストレージ内のソースの接頭辞を追跡します。</target>
        </trans-unit>
        <trans-unit id="04dbde923a480822fb49f6a9f57a11e1e45c2f34" translate="yes" xml:space="preserve">
          <source>Translates a &lt;a href=&quot;phoenix.socket.broadcast&quot;&gt;&lt;code&gt;Phoenix.Socket.Broadcast&lt;/code&gt;&lt;/a&gt; struct to fastlane format</source>
          <target state="translated">変換し&lt;a href=&quot;phoenix.socket.broadcast&quot;&gt; &lt;code&gt;Phoenix.Socket.Broadcast&lt;/code&gt; の&lt;/a&gt; fastlane形式に構造体を</target>
        </trans-unit>
        <trans-unit id="fa2fb74c7c1ff29a1c97955f10736fc44d4c709e" translate="yes" xml:space="preserve">
          <source>Translates to the underlying SQL ILIKE query. This operation is only available on PostgreSQL.</source>
          <target state="translated">基礎となるSQL ILIKEクエリに変換します。この操作はPostgreSQLでのみ利用可能です。</target>
        </trans-unit>
        <trans-unit id="5e04600e3ea7e7907ea952ea71a5864369b3424b" translate="yes" xml:space="preserve">
          <source>Translates to the underlying SQL LIKE query, therefore its behaviour is dependent on the database. In particular, PostgreSQL will do a case-sensitive operation, while the majority of other databases will be case-insensitive. For performing a case-insensitive &lt;code&gt;like&lt;/code&gt; in PostgreSQL, see &lt;a href=&quot;#ilike/2&quot;&gt;&lt;code&gt;ilike/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">基になるSQL LIKEクエリに変換するため、その動作はデータベースに依存します。特に、PostgreSQLは大文字と小文字を区別する操作を行いますが、他のデータベースの大部分は大文字と小文字を区別しません。PostgreSQLの &lt;code&gt;like&lt;/code&gt; に大文字と小文字を区別せずに実行するには、&lt;a href=&quot;#ilike/2&quot;&gt; &lt;code&gt;ilike/2&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="892c52a641684add2f2c13d64228138e346b88e9" translate="yes" xml:space="preserve">
          <source>Transports can optionally implement &lt;a href=&quot;#c:handle_control/2&quot;&gt;&lt;code&gt;handle_control/2&lt;/code&gt;&lt;/a&gt; for handling control frames such as &lt;code&gt;:ping&lt;/code&gt; and &lt;code&gt;:pong&lt;/code&gt;.</source>
          <target state="translated">Transports can optionally implement &lt;a href=&quot;#c:handle_control/2&quot;&gt; &lt;code&gt;handle_control/2&lt;/code&gt; &lt;/a&gt; for handling control frames such as &lt;code&gt;:ping&lt;/code&gt; and &lt;code&gt;:pong&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="50ec8431700d39c092c58101a53cd1456d35e7d7" translate="yes" xml:space="preserve">
          <source>Traverses changeset errors and applies the given function to error messages</source>
          <target state="translated">チェンジセットのエラーをトラバースし、与えられた関数をエラーメッセージに適用します。</target>
        </trans-unit>
        <trans-unit id="8cbe92e33468200a0827118c7f3d01b4a4843741" translate="yes" xml:space="preserve">
          <source>Traverses changeset errors and applies the given function to error messages.</source>
          <target state="translated">チェンジセットのエラーをトラバースし、与えられた関数をエラーメッセージに適用します。</target>
        </trans-unit>
        <trans-unit id="0f6e81017aaf95b363450b6d7b0752a8fb3d2fef" translate="yes" xml:space="preserve">
          <source>Tuple &lt;code&gt;{module, function, args}&lt;/code&gt; can be passed to be invoked each time the plug is checking whether to redirect host. Provided function needs to receive at least one argument (&lt;code&gt;host&lt;/code&gt;).</source>
          <target state="translated">Tuple &lt;code&gt;{module, function, args}&lt;/code&gt; can be passed to be invoked each time the plug is checking whether to redirect host. Provided function needs to receive at least one argument ( &lt;code&gt;host&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="98a6dbefab197c1c589aaa284bb9c90aca73a018" translate="yes" xml:space="preserve">
          <source>Two or more consecutive newlines &lt;code&gt;\n\n&lt;/code&gt; or &lt;code&gt;\r\n\r\n&lt;/code&gt; are considered as a paragraph and text between them is wrapped in &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tags. One newline &lt;code&gt;\n&lt;/code&gt; or &lt;code&gt;\r\n&lt;/code&gt; is considered as a linebreak and a &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; tag is inserted.</source>
          <target state="translated">2つ以上の連続する改行 &lt;code&gt;\n\n&lt;/code&gt; または &lt;code&gt;\r\n\r\n&lt;/code&gt; は段落と見なされ、それらの間のテキストは &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; タグで囲まれます。1つの改行 &lt;code&gt;\n&lt;/code&gt; または &lt;code&gt;\r\n&lt;/code&gt; は改行と見なされ、 &lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt; タグが挿入されます。</target>
        </trans-unit>
        <trans-unit id="154308bd4c8a066d5d9c6258416a1b30f7bd6212" translate="yes" xml:space="preserve">
          <source>Type and subtype are case insensitive while the sensitiveness of params depends on their keys and therefore are not handled by this parser.</source>
          <target state="translated">型とサブ型は大文字小文字を区別しませんが、paramsはキーに依存するため、このパーサでは処理されません。</target>
        </trans-unit>
        <trans-unit id="93b9e289e2842469d001eccf7ad5d79f3c302dc9" translate="yes" xml:space="preserve">
          <source>Types</source>
          <target state="translated">Types</target>
        </trans-unit>
        <trans-unit id="2b93aaf665984dcdc2d122fc68d22290dc98430f" translate="yes" xml:space="preserve">
          <source>Types and casting</source>
          <target state="translated">種類とキャスティング</target>
        </trans-unit>
        <trans-unit id="fccbdec63f1e673c35ac4ad2b3198a6d03985d97" translate="yes" xml:space="preserve">
          <source>URL can include query parameters to override shared and adapter-specific options &lt;code&gt;ssl&lt;/code&gt;, &lt;code&gt;timeout&lt;/code&gt;, &lt;code&gt;pool_timeout&lt;/code&gt;, &lt;code&gt;pool_size&lt;/code&gt;:</source>
          <target state="translated">URLは、共有を無効にするためにクエリパラメータを含めると、アダプター固有のオプションのことができ &lt;code&gt;ssl&lt;/code&gt; 、 &lt;code&gt;timeout&lt;/code&gt; 、 &lt;code&gt;pool_timeout&lt;/code&gt; 、 &lt;code&gt;pool_size&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="2062e8d014f9cc3812946feab252c6f50a8a1a8d" translate="yes" xml:space="preserve">
          <source>URL can include query parameters to override shared and adapter-specific options, like &lt;code&gt;ssl&lt;/code&gt;, &lt;code&gt;timeout&lt;/code&gt; and &lt;code&gt;pool_size&lt;/code&gt;. The following example shows how to pass these configuration values:</source>
          <target state="translated">URL can include query parameters to override shared and adapter-specific options, like &lt;code&gt;ssl&lt;/code&gt; , &lt;code&gt;timeout&lt;/code&gt; and &lt;code&gt;pool_size&lt;/code&gt; . The following example shows how to pass these configuration values:</target>
        </trans-unit>
        <trans-unit id="01f03837323aab32409bb99c50d6c475179c49df" translate="yes" xml:space="preserve">
          <source>URLs</source>
          <target state="translated">URLs</target>
        </trans-unit>
        <trans-unit id="c936fe014fbf52d248e23e83c4f7c389f5578501" translate="yes" xml:space="preserve">
          <source>UTF-8 encoded &lt;code&gt;string&lt;/code&gt;</source>
          <target state="translated">UTF-8エンコードされた &lt;code&gt;string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0541e2d015eef80c9c2da6778b6e2c6a68cb7f30" translate="yes" xml:space="preserve">
          <source>Umbrella projects do not have a default router and therefore always expect a router to be given.</source>
          <target state="translated">アンブレラプロジェクトはデフォルトのルータを持っていないため、常にルータが与えられることを期待しています。</target>
        </trans-unit>
        <trans-unit id="8768d73251c0569d327c1e364eafb4d5ea1eb2da" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;not&lt;/code&gt; operation</source>
          <target state="translated">単項で &lt;code&gt;not&lt;/code&gt; 操作</target>
        </trans-unit>
        <trans-unit id="ae6d1341c40bcf85b2e3992e163df198136c8fe0" translate="yes" xml:space="preserve">
          <source>Unary &lt;code&gt;not&lt;/code&gt; operation.</source>
          <target state="translated">単項演算で &lt;code&gt;not&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8528d9a060404341b909c95a03193ce5217db1fb" translate="yes" xml:space="preserve">
          <source>Uncomment or add the following to this list of children in your Telemetry supervision tree (usually in &lt;code&gt;lib/my_app_web/telemetry.ex&lt;/code&gt;):</source>
          <target state="translated">テレメトリ監視ツリー（通常は &lt;code&gt;lib/my_app_web/telemetry.ex&lt;/code&gt; ）の子のこのリストにコメントを外すか、以下を追加します。</target>
        </trans-unit>
        <trans-unit id="e20734e624a02ccb4b9b198469134b0f85370de0" translate="yes" xml:space="preserve">
          <source>Under other circumstances, you may be testing a view or another layer that requires a connection for processing. For such cases, a connection can be created using the &lt;a href=&quot;#build_conn/3&quot;&gt;&lt;code&gt;build_conn/3&lt;/code&gt;&lt;/a&gt; helper:</source>
          <target state="translated">Under other circumstances, you may be testing a view or another layer that requires a connection for processing. For such cases, a connection can be created using the &lt;a href=&quot;#build_conn/3&quot;&gt; &lt;code&gt;build_conn/3&lt;/code&gt; &lt;/a&gt; helper:</target>
        </trans-unit>
        <trans-unit id="8b5c67037bf5470da236e2bdde573521f2424de5" translate="yes" xml:space="preserve">
          <source>Under other circumstances, you may be testing a view or another layer that requires a connection for processing. For such cases, a connection can be created using the &lt;a href=&quot;#conn/3&quot;&gt;&lt;code&gt;conn/3&lt;/code&gt;&lt;/a&gt; helper:</source>
          <target state="translated">他の状況では、処理のために接続を必要とするビューまたは別のレイヤーをテストしている可能性があります。このような場合、&lt;a href=&quot;#conn/3&quot;&gt; &lt;code&gt;conn/3&lt;/code&gt; &lt;/a&gt;ヘルパーを使用して接続を作成できます。</target>
        </trans-unit>
        <trans-unit id="f1ff53ee2862d2d446a35b1e8111b19a37147a3a" translate="yes" xml:space="preserve">
          <source>Understanding template compilation</source>
          <target state="translated">テンプレートのまとめ方を理解する</target>
        </trans-unit>
        <trans-unit id="d3c65bf16f98fec621f47e764e587b2f2e1621e5" translate="yes" xml:space="preserve">
          <source>Unexpected scenarios</source>
          <target state="translated">予想外のシナリオ</target>
        </trans-unit>
        <trans-unit id="03a6558018657fa99e805a8a68718f47b7b414d0" translate="yes" xml:space="preserve">
          <source>Unfortunately, different databases provide different guarantees when it comes to case-sensitiveness. For example, in MySQL, comparisons are case-insensitive by default. In Postgres, users can define case insensitive column by using the &lt;code&gt;:citext&lt;/code&gt; type/extension. In your migration:</source>
          <target state="translated">残念ながら、大文字と小文字の区別に関しては、データベースが異なると保証も異なります。たとえば、MySQLでは、比較はデフォルトで大文字と小文字を区別しません。Postgresでは、ユーザーは &lt;code&gt;:citext&lt;/code&gt; タイプ/拡張子を使用して、大文字と小文字を区別しない列を定義できます。移行中：</target>
        </trans-unit>
        <trans-unit id="ebda784e9b2848ef9558c97ee4b8fa423fa74c91" translate="yes" xml:space="preserve">
          <source>Union expression returns only unique rows as if each query returned distinct results. This may cause performance penalty. If you need just to combine multiple result sets without removing duplicate rows consider using &lt;a href=&quot;#union_all/2&quot;&gt;&lt;code&gt;union_all/2&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ユニオン式は、各クエリが異なる結果を返したかのように、一意の行のみを返します。これにより、パフォーマンスが低下する可能性があります。重複する行を削除せずに複数の結果セットを組み合わせる必要がある場合は、&lt;a href=&quot;#union_all/2&quot;&gt; &lt;code&gt;union_all/2&lt;/code&gt; の&lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="1b3223e5b025350dc7c873af657f6279cba89acf" translate="yes" xml:space="preserve">
          <source>Unique columns can be automatically generated by using:</source>
          <target state="translated">を使用することで、ユニークなカラムを自動的に生成することができます。</target>
        </trans-unit>
        <trans-unit id="31a9c9a9da9b4997ddb48f0c0710b0ce5b2a182a" translate="yes" xml:space="preserve">
          <source>Unless held-down keys are required, a better approach is generally to use &lt;code&gt;phx-keyup&lt;/code&gt; bindings which only trigger on key up, thereby being self-limiting. However, &lt;code&gt;phx-keydown&lt;/code&gt; is useful for games and other use cases where a constant press on a key is desired. In such cases, throttle should always be used.</source>
          <target state="translated">押し下げられたキーが必要でない限り、より良いアプローチは、一般に、キーアップ時にのみトリガーされる &lt;code&gt;phx-keyup&lt;/code&gt; バインディングを使用することです。これにより、自己制限されます。ただし、 &lt;code&gt;phx-keydown&lt;/code&gt; は、キーを常に押す必要があるゲームやその他のユースケースで役立ちます。このような場合は、常にスロットルを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="364ff4689b83184f9cf200c53fb47d7dfe4a19d2" translate="yes" xml:space="preserve">
          <source>Unless you have dozens of columns, this is simpler for the developer, more DB friendly and more efficient in all aspects.</source>
          <target state="translated">何十ものカラムを持っていない限り、この方が開発者にとってはシンプルで、よりDBフレンドリーで、あらゆる面で効率的です。</target>
        </trans-unit>
        <trans-unit id="6dbbc01e9238f5b47a1c02fc53c7e8b555358fa3" translate="yes" xml:space="preserve">
          <source>Unsubscribes the caller from the PubSub adapter&amp;rsquo;s topic</source>
          <target state="translated">PubSubアダプターのトピックから呼び出し元をサブスクライブ解除します</target>
        </trans-unit>
        <trans-unit id="482cecc4861f7c77f0cec819a536c79e2d690881" translate="yes" xml:space="preserve">
          <source>Unsubscribes the caller from the PubSub adapter&amp;rsquo;s topic.</source>
          <target state="translated">呼び出し元をPubSubアダプターのトピックからサブスクライブ解除します。</target>
        </trans-unit>
        <trans-unit id="c4431f0ea76c1f1e2f3d65fe926de8de3246221b" translate="yes" xml:space="preserve">
          <source>Unsubscribes the caller from the PubSub adapter's topic.</source>
          <target state="translated">PubSub アダプタのトピックから呼び出し元を退会させます。</target>
        </trans-unit>
        <trans-unit id="181cb46e23fe9bb176c35f8d9f9e02d873ba1397" translate="yes" xml:space="preserve">
          <source>Unsubscribes the caller from the given topic</source>
          <target state="translated">指定したトピックからの発信者の退会を解除します。</target>
        </trans-unit>
        <trans-unit id="dfb3c1161312f219c23d938f551cae6ab3a67d2a" translate="yes" xml:space="preserve">
          <source>Unsubscribes the caller from the given topic.</source>
          <target state="translated">発信者を指定したトピックからの退会を解除します。</target>
        </trans-unit>
        <trans-unit id="8e4d4756b56c5c2a38de9c36247d3bf735dff1a1" translate="yes" xml:space="preserve">
          <source>Unsubscribes the pid from the topic</source>
          <target state="translated">pid をトピックから退会させる</target>
        </trans-unit>
        <trans-unit id="937f4447c61b885d2272aeadbcc25a892061149c" translate="yes" xml:space="preserve">
          <source>Unsubscribes the pid from the topic.</source>
          <target state="translated">pid をトピックから退会させます。</target>
        </trans-unit>
        <trans-unit id="f7f95de69369cee5491d0b2318e7e16ee32f3693" translate="yes" xml:space="preserve">
          <source>Untracks a presence</source>
          <target state="translated">存在感を放つ</target>
        </trans-unit>
        <trans-unit id="00a3c6eca2c9c5467d7eda3ff19f2b3a3f0b9f13" translate="yes" xml:space="preserve">
          <source>Untracks a presence.</source>
          <target state="translated">存在感を放つ。</target>
        </trans-unit>
        <trans-unit id="f662645adc1966f7f57b2b2a62ac566f868b5e24" translate="yes" xml:space="preserve">
          <source>Up and Running</source>
          <target state="translated">アップ&amp;ランニング</target>
        </trans-unit>
        <trans-unit id="fb41bed7c754707f32bbce1dc683efccb4519d20" translate="yes" xml:space="preserve">
          <source>Update a channel presence's metadata.</source>
          <target state="translated">チャンネルプレゼンスのメタデータを更新します。</target>
        </trans-unit>
        <trans-unit id="d1e9810594beffedf05646229838b1d174fadeb7" translate="yes" xml:space="preserve">
          <source>Update a process presence's metadata.</source>
          <target state="translated">プロセス・プレゼンスのメタデータを更新します。</target>
        </trans-unit>
        <trans-unit id="c76d18079a076ee34ffc62b5b9bd0909da356dce" translate="yes" xml:space="preserve">
          <source>Updates</source>
          <target state="translated">Updates</target>
        </trans-unit>
        <trans-unit id="efde7464a7ffd43310a0d38ea8d45264ea41ceae" translate="yes" xml:space="preserve">
          <source>Updates a change</source>
          <target state="translated">変更を更新する</target>
        </trans-unit>
        <trans-unit id="4960f1d23ffd2b7d1ab51393bbb07ff03fb4eeb5" translate="yes" xml:space="preserve">
          <source>Updates a change.</source>
          <target state="translated">変更を更新します。</target>
        </trans-unit>
        <trans-unit id="9e3e9b085b2135f1f85213c1f86af920a1755f04" translate="yes" xml:space="preserve">
          <source>Updates a changeset using its primary key</source>
          <target state="translated">プライマリキーを使用してチェンジセットを更新します。</target>
        </trans-unit>
        <trans-unit id="c93c04e332aa599946d58eaecaa78d3cdd5a2eb1" translate="yes" xml:space="preserve">
          <source>Updates a changeset using its primary key.</source>
          <target state="translated">主キーを使用してチェンジセットを更新します。</target>
        </trans-unit>
        <trans-unit id="3385b9dce3c90d599cae02d4653dbca93a29bcc4" translate="yes" xml:space="preserve">
          <source>Updates a presence&amp;rsquo;s metadata</source>
          <target state="translated">プレゼンスのメタデータを更新します</target>
        </trans-unit>
        <trans-unit id="0acdc22a28ee11a8afdd3431b0315855715fa2bc" translate="yes" xml:space="preserve">
          <source>Updates a presence&amp;rsquo;s metadata.</source>
          <target state="translated">プレゼンスのメタデータを更新します。</target>
        </trans-unit>
        <trans-unit id="132594d301d9e633427f4d91489bd56edf757c2c" translate="yes" xml:space="preserve">
          <source>Updates a presence's metadata.</source>
          <target state="translated">プレゼンスのメタデータを更新します。</target>
        </trans-unit>
        <trans-unit id="c01320a0cc1e6fafc6bb2e70c6fddc03bae55710" translate="yes" xml:space="preserve">
          <source>Updates a request header if present, otherwise it sets it to an initial value</source>
          <target state="translated">存在する場合はリクエストヘッダを更新し、そうでない場合は初期値に設定します。</target>
        </trans-unit>
        <trans-unit id="045227cef9e475014998b6e238302ad6bc1ea08b" translate="yes" xml:space="preserve">
          <source>Updates a request header if present, otherwise it sets it to an initial value.</source>
          <target state="translated">リクエストヘッダが存在する場合はそれを更新し、そうでない場合は初期値に設定します。</target>
        </trans-unit>
        <trans-unit id="0458896d317ccb81c30dba901118e2743e4a5416" translate="yes" xml:space="preserve">
          <source>Updates a response header if present, otherwise it sets it to an initial value</source>
          <target state="translated">レスポンスヘッダが存在する場合は更新し、そうでない場合は初期値に設定します。</target>
        </trans-unit>
        <trans-unit id="aca7d4e48cb32323eeef9d6da6338f24bc32a47f" translate="yes" xml:space="preserve">
          <source>Updates a response header if present, otherwise it sets it to an initial value.</source>
          <target state="translated">レスポンスヘッダが存在する場合は更新し、存在しない場合は初期値に設定します。</target>
        </trans-unit>
        <trans-unit id="607386542c3c782f031294b17742c0818b532a58" translate="yes" xml:space="preserve">
          <source>Updates a single struct with the given filters</source>
          <target state="translated">与えられたフィルタで単一の構造体を更新します</target>
        </trans-unit>
        <trans-unit id="b883e138c47eee8bc7395bc0ee931698e3b1bac8" translate="yes" xml:space="preserve">
          <source>Updates a single struct with the given filters.</source>
          <target state="translated">与えられたフィルタで単一の構造体を更新します。</target>
        </trans-unit>
        <trans-unit id="c6a6a639373c46aeccd5f9b2b8b38de4b2dae7bd" translate="yes" xml:space="preserve">
          <source>Updates all entries matching the given query with the given values</source>
          <target state="translated">指定されたクエリにマッチするすべてのエントリを、指定された値で更新します。</target>
        </trans-unit>
        <trans-unit id="330ebb6cefd9ef9f1f8a72396cfd06403a7c55e1" translate="yes" xml:space="preserve">
          <source>Updates all entries matching the given query with the given values.</source>
          <target state="translated">与えられたクエリにマッチするすべてのエントリを、与えられた値で更新します。</target>
        </trans-unit>
        <trans-unit id="1c2e283ce7915c1bbb24433633c806a5a301b678" translate="yes" xml:space="preserve">
          <source>Updates an existing key in the socket assigns.</source>
          <target state="translated">ソケットアサインの既存のキーを更新します。</target>
        </trans-unit>
        <trans-unit id="7762e945e6baaa0818bffbab49c2f32dcef1ea19" translate="yes" xml:space="preserve">
          <source>Updates are patched to the DOM as usual</source>
          <target state="translated">アップデートは通常通り DOM にパッチが当てられています。</target>
        </trans-unit>
        <trans-unit id="9274df775f7c52402be32f42089e570c5a110dfe" translate="yes" xml:space="preserve">
          <source>Updates are used to update the filtered entries. In order for updates to be applied, &lt;a href=&quot;ecto.repo#c:update_all/3&quot;&gt;&lt;code&gt;Ecto.Repo.update_all/3&lt;/code&gt;&lt;/a&gt; must be invoked.</source>
          <target state="translated">更新は、フィルターされたエントリーを更新するために使用されます。更新を適用するには、&lt;a href=&quot;ecto.repo#c:update_all/3&quot;&gt; &lt;code&gt;Ecto.Repo.update_all/3&lt;/code&gt; を&lt;/a&gt;呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="30d7abe8ce119c87145e38b618e0cb0eb1692bb6" translate="yes" xml:space="preserve">
          <source>Updates the Phoenix project generator locally.</source>
          <target state="translated">ローカルでPhoenixプロジェクト・ジェネレーターを更新します。</target>
        </trans-unit>
        <trans-unit id="b34140753c1f89b23cafca5f1dc7b6027ceb0a21" translate="yes" xml:space="preserve">
          <source>Updating of embeds must be done using a changeset for each changed embed.</source>
          <target state="translated">埋め込みの更新は、変更された埋め込みごとにチェンジセットを使用して行わなければなりません。</target>
        </trans-unit>
        <trans-unit id="825dd96949706e54c171f42804e730ef000fc8f8" translate="yes" xml:space="preserve">
          <source>Updating the HTML document title</source>
          <target state="translated">HTML ドキュメントのタイトルを更新する</target>
        </trans-unit>
        <trans-unit id="fde3a12f19329145c5a153296de9637412067eac" translate="yes" xml:space="preserve">
          <source>Uploaded files are stored in a temporary directory and removed from that directory after the process that requested the file dies.</source>
          <target state="translated">アップロードされたファイルは一時ディレクトリに保存され、ファイルを要求したプロセスが終了した後、そのディレクトリから削除されます。</target>
        </trans-unit>
        <trans-unit id="37fa1abd2298ec59d4f7430940833863a90e31b7" translate="yes" xml:space="preserve">
          <source>Upserts</source>
          <target state="translated">Upserts</target>
        </trans-unit>
        <trans-unit id="46c68148d8a37fd928ca23894beb97c2d0282df9" translate="yes" xml:space="preserve">
          <source>Upserts map to &quot;ON CONFLICT&quot; on databases like Postgres and &quot;ON DUPLICATE KEY&quot; on databases such as MySQL.</source>
          <target state="translated">アップサートは、Postgresのようなデータベースでは &quot;ON CONFLICT &quot;に、MySQLのようなデータベースでは &quot;ON DUPLICATE KEY &quot;にマップされます。</target>
        </trans-unit>
        <trans-unit id="f343f4451a0d5b77ecb46c9d17300b873c9ec642" translate="yes" xml:space="preserve">
          <source>Upserts map to &amp;ldquo;ON CONFLICT&amp;rdquo; on databases like Postgres and &amp;ldquo;ON DUPLICATE KEY&amp;rdquo; on databases such as MySQL.</source>
          <target state="translated">アップサートは、Postgresなどのデータベースでは「ON CONFLICT」に、MySQLなどのデータベースでは「ON DUPLICATE KEY」にマッピングされます。</target>
        </trans-unit>
        <trans-unit id="0bb18642b70b9f8a9c12ccf39487328f306b8e19" translate="yes" xml:space="preserve">
          <source>Usage</source>
          <target state="translated">Usage</target>
        </trans-unit>
        <trans-unit id="fec43ce445f974147bd0eb223a50147e7fb7202d" translate="yes" xml:space="preserve">
          <source>Usage example:</source>
          <target state="translated">使用例。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
