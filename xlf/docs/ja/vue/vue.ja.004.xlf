<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="vue">
    <body>
      <group id="vue">
        <trans-unit id="23ca9a44a1ade4d87027ae10b8309bece2e74a54" translate="yes" xml:space="preserve">
          <source>Prop Types</source>
          <target state="translated">プロップの種類</target>
        </trans-unit>
        <trans-unit id="0d718a828e84189a6c1ea77a0099a78e06d7d7c9" translate="yes" xml:space="preserve">
          <source>Prop Validation</source>
          <target state="translated">プロップの検証</target>
        </trans-unit>
        <trans-unit id="3ad34219a208945c8ea06d8eb918df83f7e61456" translate="yes" xml:space="preserve">
          <source>Prop definitions</source>
          <target state="translated">プロップの定義</target>
        </trans-unit>
        <trans-unit id="e2f4b4fdf875186ea4cf16dbb812dbea30216d87" translate="yes" xml:space="preserve">
          <source>Prop definitions &lt;sup&gt;essential&lt;/sup&gt;</source>
          <target state="translated">小道具の定義が&lt;sup&gt;不可欠&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="895e352dc19c97709d5567c55fe72b1a6d482c35" translate="yes" xml:space="preserve">
          <source>Prop name casing</source>
          <target state="translated">プロップ名のケーシング</target>
        </trans-unit>
        <trans-unit id="b90f11ae0da8cbfe0b2f736a16886c055d6bffd1" translate="yes" xml:space="preserve">
          <source>Prop name casing &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">プロップ名の大文字小文字を&lt;sup&gt;強く推奨&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="82be74efa4de665a8e8ec81e11e5ea121f0b4d70" translate="yes" xml:space="preserve">
          <source>Properly configuring all the discussed aspects of a production-ready server-rendered app can be a daunting task. Luckily, there is an excellent community project that aims to make all of this easier: &lt;a href=&quot;https://nuxtjs.org/&quot;&gt;Nuxt.js (opens new window)&lt;/a&gt;. Nuxt.js is a higher-level framework built on top of the Vue ecosystem which provides an extremely streamlined development experience for writing universal Vue applications. Better yet, you can even use it as a static site generator (with pages authored as single-file Vue components)! We highly recommend giving it a try.</source>
          <target state="translated">本番環境に対応したサーバーレンダリングアプリの説明されているすべての側面を適切に構成することは、困難な作業になる可能性があります。幸いなことに、これらすべてを簡単にすることを目的とした優れたコミュニティプロジェクト&lt;a href=&quot;https://nuxtjs.org/&quot;&gt;があります&lt;/a&gt;：Nuxt.js（新しいウィンドウを開きます）。Nuxt.jsは、Vueエコシステムの上に構築された高レベルのフレームワークであり、ユニバーサルVueアプリケーションを作成するための非常に合理化された開発エクスペリエンスを提供します。さらに良いことに、静的サイトジェネレーターとして使用することもできます（単一ファイルのVueコンポーネントとして作成されたページを使用）。ぜひお試しください。</target>
        </trans-unit>
        <trans-unit id="66e61e4c98d3b3a635091c842dada04fef1b9143" translate="yes" xml:space="preserve">
          <source>Properly configuring all the discussed aspects of a production-ready server-rendered app can be a daunting task. Luckily, there is an excellent community project that aims to make all of this easier: &lt;a href=&quot;https://nuxtjs.org/&quot;&gt;Nuxt.js&lt;/a&gt;. Nuxt.js is a higher-level framework built on top of the Vue ecosystem which provides an extremely streamlined development experience for writing universal Vue applications. Better yet, you can even use it as a static site generator (with pages authored as single-file Vue components)! We highly recommend giving it a try.</source>
          <target state="translated">本番環境に対応したサーバーレンダリングアプリのすべての議論された側面を適切に構成することは、困難な作業になる可能性があります。幸いなことに、これらすべてを簡単にすることを目的とした優れたコミュニティプロジェクト&lt;a href=&quot;https://nuxtjs.org/&quot;&gt;Nuxt.jsがあり&lt;/a&gt;ます。Nuxt.jsは、Vueエコシステムの上に構築された高レベルのフレームワークであり、ユニバーサルVueアプリケーションを作成するための非常に合理化された開発エクスペリエンスを提供します。さらに、静的サイトジェネレーターとして使用することもできます（単一ファイルのVueコンポーネントとして作成されたページを使用）。ぜひお試しください。</target>
        </trans-unit>
        <trans-unit id="c52664eafd27797858aafa4ef697afc052f2630a" translate="yes" xml:space="preserve">
          <source>Properly declare the &lt;code&gt;click&lt;/code&gt; event. This is useful if you actually do add some logic to that event handler in &lt;code&gt;&amp;lt;my-button&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;click&lt;/code&gt; イベントを適切に宣言します。これは、 &lt;code&gt;&amp;lt;my-button&amp;gt;&lt;/code&gt; のイベントハンドラーに実際にロジックを追加する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="fc7c765b5dbb95f7134159f12c7f78946b944760" translate="yes" xml:space="preserve">
          <source>Properly trigger lifecycle hooks of a component</source>
          <target state="translated">コンポーネントのライフサイクルフックを適切にトリガーする</target>
        </trans-unit>
        <trans-unit id="4a44822711c8e6d75a4d3fab2496758800219aa1" translate="yes" xml:space="preserve">
          <source>Properties such as &lt;code&gt;perspective&lt;/code&gt;, &lt;code&gt;backface-visibility&lt;/code&gt;, and &lt;code&gt;transform: translateZ(x)&lt;/code&gt; will allow the browser to know you need hardware acceleration.</source>
          <target state="translated">&lt;code&gt;perspective&lt;/code&gt; 、 &lt;code&gt;backface-visibility&lt;/code&gt; 、 &lt;code&gt;transform: translateZ(x)&lt;/code&gt; などのプロパティ：translateZ（x）により、ブラウザーはハードウェアアクセラレーションが必要であることを認識できます。</target>
        </trans-unit>
        <trans-unit id="e9f3056a7ba256cf707e7dce02bf806a8e3e1baf" translate="yes" xml:space="preserve">
          <source>Properties that start with &lt;code&gt;_&lt;/code&gt; or &lt;code&gt;$&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; be proxied on the Vue instance because they may conflict with Vue&amp;rsquo;s internal properties and API methods. You will have to access them as &lt;code&gt;vm.$data._property&lt;/code&gt;.</source>
          <target state="translated">始まるプロパティ &lt;code&gt;_&lt;/code&gt; または &lt;code&gt;$&lt;/code&gt; はなり&lt;strong&gt;ません&lt;/strong&gt;、彼らはVueの内部プロパティとAPIのメソッドと競合する可能性があるため、Vueのインスタンスにプロキシされます。 &lt;code&gt;vm.$data._property&lt;/code&gt; としてそれらにアクセスする必要があります。</target>
        </trans-unit>
        <trans-unit id="c6e8b3b6254e2521a11f38b602547d6e9a9380ef" translate="yes" xml:space="preserve">
          <source>Properties that start with &lt;code&gt;_&lt;/code&gt; or &lt;code&gt;$&lt;/code&gt; will &lt;strong&gt;not&lt;/strong&gt; be proxied on the component instance because they may conflict with Vue's internal properties and API methods. You will have to access them as &lt;code&gt;vm.$data._property&lt;/code&gt;.</source>
          <target state="translated">始まるプロパティ &lt;code&gt;_&lt;/code&gt; または &lt;code&gt;$&lt;/code&gt; はなり&lt;strong&gt;ません&lt;/strong&gt;、彼らはVueの内部プロパティとAPIのメソッドと競合する可能性があるため、コンポーネントのインスタンスにプロキシされます。 &lt;code&gt;vm.$data._property&lt;/code&gt; としてそれらにアクセスする必要があります。</target>
        </trans-unit>
        <trans-unit id="e5561bc237fb41709bb2e8b651d704c1664ae03e" translate="yes" xml:space="preserve">
          <source>Props</source>
          <target state="translated">Props</target>
        </trans-unit>
        <trans-unit id="6508a6990e288051c3e6b9a1eeb6a04702cf1534" translate="yes" xml:space="preserve">
          <source>Props &lt;code&gt;default&lt;/code&gt; factory function no longer has access to &lt;code&gt;this&lt;/code&gt; context</source>
          <target state="translated">小道具の &lt;code&gt;default&lt;/code&gt; ファクトリ関数は、 &lt;code&gt;this&lt;/code&gt; コンテキストにアクセスできなくなりました</target>
        </trans-unit>
        <trans-unit id="478c6d22a97baabea14191c1e30af01de0590a32" translate="yes" xml:space="preserve">
          <source>Props Default Function &lt;code&gt;this&lt;/code&gt; Access</source>
          <target state="translated">小道具のデフォルト機能 &lt;code&gt;this&lt;/code&gt; アクセス</target>
        </trans-unit>
        <trans-unit id="b180f9b6b88669128fadb97a91987ec2cc6021f7" translate="yes" xml:space="preserve">
          <source>Props are custom attributes you can register on a component. To pass a title to our blog post component, we can include it in the list of props this component accepts, using the &lt;code&gt;props&lt;/code&gt; option:</source>
          <target state="translated">小道具は、コンポーネントに登録できるカスタム属性です。ブログ投稿コンポーネントにタイトルを渡すには、 &lt;code&gt;props&lt;/code&gt; オプションを使用して、このコンポーネントが受け入れる小道具のリストにタイトルを含めることができます。</target>
        </trans-unit>
        <trans-unit id="824b655ece5f935a9f95c151296cb1d2ff2e73ec" translate="yes" xml:space="preserve">
          <source>Props are custom attributes you can register on a component. When a value is passed to a prop attribute, it becomes a property on that component instance. To pass a title to our blog post component, we can include it in the list of props this component accepts, using a &lt;code&gt;props&lt;/code&gt; option:</source>
          <target state="translated">小道具は、コンポーネントに登録できるカスタム属性です。値がprop属性に渡されると、そのコンポーネントインスタンスのプロパティになります。タイトルをブログ投稿コンポーネントに渡すには、 &lt;code&gt;props&lt;/code&gt; オプションを使用して、このコンポーネントが受け入れる小道具のリストにタイトルを含めます。</target>
        </trans-unit>
        <trans-unit id="02635ba77eef9661786c01a78d90b7501db1be4e" translate="yes" xml:space="preserve">
          <source>Props are now always one-way down. To produce side effects in the parent scope, a component needs to explicitly emit an event instead of relying on implicit binding. For more information, see:</source>
          <target state="translated">プロップは常に一方通行になりました。親スコープで副作用を生成するには、コンポーネントは暗黙のバインディングに頼るのではなく、明示的にイベントを放出する必要があります。詳細については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="5ef3fef3591faff86d0a182fab0eda375ddb585e" translate="yes" xml:space="preserve">
          <source>Props default value factory functions no longer have access to &lt;code&gt;this&lt;/code&gt;.</source>
          <target state="translated">小道具のデフォルト値のファクトリ関数は、 &lt;code&gt;this&lt;/code&gt; アクセスできなくなりました。</target>
        </trans-unit>
        <trans-unit id="f6122d047108de3e0837cf3e23276a8775fc2406" translate="yes" xml:space="preserve">
          <source>Props on a Root Instance &lt;sup&gt;replaced&lt;/sup&gt;</source>
          <target state="translated">ルートインスタンスの小道具が&lt;sup&gt;置き換えられました&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="b63145bed8f14aebee6afa6cafb70780de96e649" translate="yes" xml:space="preserve">
          <source>Provide / Inject</source>
          <target state="translated">提供・注入</target>
        </trans-unit>
        <trans-unit id="f908dc5bfdb182a1120e04c6bbe22936396bbf2a" translate="yes" xml:space="preserve">
          <source>Provide / inject</source>
          <target state="translated">提供する/注入する</target>
        </trans-unit>
        <trans-unit id="b0327f1b9226a10a024191a4fd7230f8acec9765" translate="yes" xml:space="preserve">
          <source>Provide a less than 10 minute overview of the problems the project solves and why it exists.</source>
          <target state="translated">プロジェクトが解決する問題とその理由について、10分以内に概要を説明してください。</target>
        </trans-unit>
        <trans-unit id="2de6fa5a1d366e72d0573c37d52e10f902d9460a" translate="yes" xml:space="preserve">
          <source>Provide a less than 30 minute overview of the problems the project solves and how, including when and why to use the project and some simple code examples. At the end, link to both to Installation page and the beginning of the Essentials Guide.</source>
          <target state="translated">プロジェクトが解決する問題とその解決方法について、いつ、なぜプロジェクトを使用するのか、簡単なコード例を含めて、30分以内に概要を説明します。最後に、インストールページとEssentials Guideの冒頭の両方にリンクしてください。</target>
        </trans-unit>
        <trans-unit id="877adb56a197e1259015de3210d87c2e790b7975" translate="yes" xml:space="preserve">
          <source>Provide an alternative render output when the default &lt;code&gt;render&lt;/code&gt; function encounters an error. The error will be passed to &lt;code&gt;renderError&lt;/code&gt; as the second argument. This is particularly useful when used together with hot-reload.</source>
          <target state="translated">デフォルトの &lt;code&gt;render&lt;/code&gt; 関数でエラーが発生したときに、代替のレンダー出力を提供します。エラーは、2番目の引数として &lt;code&gt;renderError&lt;/code&gt; に渡されます。これは、ホットリロードと一緒に使用すると特に便利です。</target>
        </trans-unit>
        <trans-unit id="6992f8211f2fa9a21f565eeef4fe558491289052" translate="yes" xml:space="preserve">
          <source>Provide labels to describe the purpose of all form control; linking &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;id&lt;/code&gt;:</source>
          <target state="translated">すべてのフォーム制御の目的を説明するラベルを提供します。リンク &lt;code&gt;for&lt;/code&gt; および &lt;code&gt;id&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="02efa133aeef7a133aefd2f252af936a5cccad26" translate="yes" xml:space="preserve">
          <source>Provide the Vue instance an existing DOM element to mount on. It can be a CSS selector string or an actual HTMLElement.</source>
          <target state="translated">Vue インスタンスに、マウントするための既存の DOM 要素を提供します。CSS セレクタ文字列か、実際の HTMLElement を指定します。</target>
        </trans-unit>
        <trans-unit id="b02743d84e632fc634540d6899ffff73f4729b17" translate="yes" xml:space="preserve">
          <source>Providing values via the application is especially useful when writing plugins, as plugins typically wouldn't be able to provide values using components. It is an alternative to using &lt;a href=&quot;application-config#globalproperties&quot;&gt;globalProperties&lt;/a&gt;.</source>
          <target state="translated">プラグインは通常、コンポーネントを使用して値を提供できないため、アプリケーションを介して値を提供することは、プラグインを作成するときに特に役立ちます。これは、&lt;a href=&quot;application-config#globalproperties&quot;&gt;globalProperties&lt;/a&gt;を使用する代わりになります。</target>
        </trans-unit>
        <trans-unit id="b372c2e3a6fe7f086dba4752c5409ca5a655c0b4" translate="yes" xml:space="preserve">
          <source>Proxied Objects</source>
          <target state="translated">プロキシ付きオブジェクト</target>
        </trans-unit>
        <trans-unit id="7242c5f3def5245656aa4c9d4b105b7544b7290b" translate="yes" xml:space="preserve">
          <source>Proxy vs. original identity</source>
          <target state="translated">プロキシ vs.オリジナルのアイデンティティ</target>
        </trans-unit>
        <trans-unit id="8b962c5248e49ad5e80a98e9a17775f4f17e4645" translate="yes" xml:space="preserve">
          <source>Puppeteer</source>
          <target state="translated">Puppeteer</target>
        </trans-unit>
        <trans-unit id="deee5c477be9f881f24f0b87c812ed0c9a7ac549" translate="yes" xml:space="preserve">
          <source>Puppeteer is a Node library that provides a high-level API to control the browser and can pair with other test runners (e.g., Jest) to test your application.</source>
          <target state="translated">Puppeteer はブラウザを制御するための高レベルの API を提供する Node ライブラリで、アプリケーションをテストするために他のテストランナー (例:Jest)とペアリングすることができます。</target>
        </trans-unit>
        <trans-unit id="d12b0157326703f82d1c29065e90e1b3f21a4c0a" translate="yes" xml:space="preserve">
          <source>Puppeteer's Official Website (opens new window)</source>
          <target state="translated">人形師公式サイト(新しいウィンドウが開きます</target>
        </trans-unit>
        <trans-unit id="dcf49ab626c30fff5ed5ee4dbe07721b4605c56b" translate="yes" xml:space="preserve">
          <source>Quasar Framework SSR + PWA</source>
          <target state="translated">クエーサーフレームワークSSR+PWA</target>
        </trans-unit>
        <trans-unit id="d07133c8504b6a0e98371a1b9afe2ca2855a7270" translate="yes" xml:space="preserve">
          <source>Quickstart</source>
          <target state="translated">Quickstart</target>
        </trans-unit>
        <trans-unit id="282e30765bd347047d1a351ac3b6f1cf18becd81" translate="yes" xml:space="preserve">
          <source>Quoted attribute values</source>
          <target state="translated">引用された属性値</target>
        </trans-unit>
        <trans-unit id="683b9e103293a057ef4362aa5bc974a4f8bd8131" translate="yes" xml:space="preserve">
          <source>Quoted attribute values &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">引用された属性値を&lt;sup&gt;強くお勧めします&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="ed1e44a4093ca562205b72061c34f1507e70c015" translate="yes" xml:space="preserve">
          <source>RFC-0001</source>
          <target state="translated">RFC-0001</target>
        </trans-unit>
        <trans-unit id="02acfd4a596872e1f648c0fcb6b46c75913e05f6" translate="yes" xml:space="preserve">
          <source>RFCs (opens new window)</source>
          <target state="translated">RFC (新しいウィンドウが開きます)</target>
        </trans-unit>
        <trans-unit id="b11bf19e3f65b4a1ada383e41f26dab5c503940e" translate="yes" xml:space="preserve">
          <source>Radio</source>
          <target state="translated">Radio</target>
        </trans-unit>
        <trans-unit id="ebae26a0329293fc3cc08c6ef62218e1d25d11b4" translate="yes" xml:space="preserve">
          <source>Rather than managing this at the template level, one method for accomplishing this is to create a computed property that filters out a list for the visible elements.</source>
          <target state="translated">これをテンプレート・レベルで管理するのではなく、可視要素のリストをフィルタリングする計算済みプロパティを作成するのも一つの方法です。</target>
        </trans-unit>
        <trans-unit id="34ec2932146b9500b976f8c31af61191fd3c2eec" translate="yes" xml:space="preserve">
          <source>Rather than registering a component by name and then looking it up we can use it directly instead:</source>
          <target state="translated">コンポーネントを名前で登録してから調べるのではなく、直接使うことができます。</target>
        </trans-unit>
        <trans-unit id="76550ff95e4521edf8dc9e8329b78993dc047414" translate="yes" xml:space="preserve">
          <source>Raw HTML</source>
          <target state="translated">生のHTML</target>
        </trans-unit>
        <trans-unit id="47bd2393437d5a401cde293271a377d5f6e51f54" translate="yes" xml:space="preserve">
          <source>Raw props received by the component are passed to the default function as argument;</source>
          <target state="translated">コンポーネントが受け取った生のプロップスは、引数としてデフォルトの関数に渡されます。</target>
        </trans-unit>
        <trans-unit id="d73a647db12e3ccc42638c4c3cb137d447b6a643" translate="yes" xml:space="preserve">
          <source>Reaching this far in the documentation, you should already be familiar with both &lt;a href=&quot;../index&quot;&gt;the basics of Vue&lt;/a&gt; and &lt;a href=&quot;component-basics&quot;&gt;creating components&lt;/a&gt;.</source>
          <target state="translated">ドキュメントのこれまでのところ、&lt;a href=&quot;../index&quot;&gt;Vueの基本&lt;/a&gt;と&lt;a href=&quot;component-basics&quot;&gt;コンポーネントの作成の&lt;/a&gt;両方にすでに精通しているはずです。</target>
        </trans-unit>
        <trans-unit id="4d1f996aa17807ebebdb5143b01f86f170d5bea6" translate="yes" xml:space="preserve">
          <source>React</source>
          <target state="translated">React</target>
        </trans-unit>
        <trans-unit id="b183e9aafa930f129da2c452cc641903b8199bea" translate="yes" xml:space="preserve">
          <source>React Native enables you to write native-rendered apps for iOS and Android using the same React component model. This is great in that as a developer, you can apply your knowledge of a framework across multiple platforms. On this front, Vue has an official collaboration with &lt;a href=&quot;https://weex.apache.org/&quot;&gt;Weex&lt;/a&gt;, a cross-platform UI framework created by Alibaba Group and being incubated by the Apache Software Foundation (ASF). Weex allows you to use the same Vue component syntax to author components that can not only be rendered in the browser, but also natively on iOS and Android!</source>
          <target state="translated">React Nativeを使用すると、同じReactコンポーネントモデルを使用して、iOSとAndroid向けのネイティブレンダリングアプリを作成できます。これは、開発者がフレームワークの知識を複数のプラットフォームに適用できるという点で優れています。この面で、Vueは、Alibaba Groupによって作成され、Apache Software Foundation（ASF）によってインキュベートされているクロスプラットフォームUIフレームワークである&lt;a href=&quot;https://weex.apache.org/&quot;&gt;Weex&lt;/a&gt;との公式のコラボレーションを持っています。 Weexでは、同じVueコンポーネント構文を使用して、ブラウザーでレンダリングできるだけでなく、iOSおよびAndroidでもネイティブにレンダリングできるコンポーネントを作成できます。</target>
        </trans-unit>
        <trans-unit id="ee4366331847de86650378c9e4041dac06218df0" translate="yes" xml:space="preserve">
          <source>React and Vue share many similarities. They both:</source>
          <target state="translated">React と Vue には多くの共通点があります。両方ともです。</target>
        </trans-unit>
        <trans-unit id="bb65ef679dc307f628a20a0b729cd808d18c5ac0" translate="yes" xml:space="preserve">
          <source>React is renowned for its steep learning curve. Before you can really get started, you need to know about JSX and probably ES2015+, since many examples use React&amp;rsquo;s class syntax. You also have to learn about build systems, because although you could technically use Babel Standalone to live-compile your code in the browser, it&amp;rsquo;s absolutely not suitable for production.</source>
          <target state="translated">Reactは学習曲線が急であることで有名です。多くの例ではReactのクラス構文を使用しているため、実際に始める前に、JSXおよびおそらくES2015 +について知っておく必要があります。ビルドシステムについても学ぶ必要があります。技術的にはBabel Standaloneを使用してコードをブラウザーでライブコンパイルすることはできますが、本番環境にはまったく適していません。</target>
        </trans-unit>
        <trans-unit id="bb1b40c27f9e4939cf3ff484fca2a9371f8d3b42" translate="yes" xml:space="preserve">
          <source>React-like libraries usually try to share as much of their API and ecosystem with React as is feasible. For that reason, the vast majority of comparisons above will also apply to them. The main difference will typically be a reduced ecosystem, often significantly, compared to React. Since these libraries cannot be 100% compatible with everything in the React ecosystem, some tooling and companion libraries may not be usable. Or, even if they appear to work, they could break at any time unless your specific React-like library is officially supported on par with React.</source>
          <target state="translated">Reactライクなライブラリは通常、APIとエコシステムを可能な限りReactで共有しようとします。そのため、上記の比較の大部分はそれらにも適用されます。主な違いは、通常、Reactと比較してエコシステムが大幅に縮小されていることです。これらのライブラリはReactエコシステム内のすべてのものと100%互換性があるわけではないので、一部のツールやコンパニオンライブラリは使えない可能性があります。あるいは、動作しているように見えても、特定のReactライクなライブラリがReactと同等に公式にサポートされていない限り、いつでも壊れてしまう可能性があります。</target>
        </trans-unit>
        <trans-unit id="7f6efca662af5024b37ec029036bd44b873fd284" translate="yes" xml:space="preserve">
          <source>Reacting to Changes with &lt;code&gt;watch&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;watch&lt;/code&gt; 変化に反応する</target>
        </trans-unit>
        <trans-unit id="88c3934c7588fa0cf20290b76db9e62f02488728" translate="yes" xml:space="preserve">
          <source>Reactive Variables with &lt;code&gt;ref&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ref&lt;/code&gt; 反応変数</target>
        </trans-unit>
        <trans-unit id="96578d9c2e6eaee240051ff91e83f741cc87e93b" translate="yes" xml:space="preserve">
          <source>Reactivity</source>
          <target state="translated">Reactivity</target>
        </trans-unit>
        <trans-unit id="0255dc2eebe1f45060f7ea3bd844c29de6ec11e9" translate="yes" xml:space="preserve">
          <source>Reactivity API</source>
          <target state="translated">リアクティビティ API</target>
        </trans-unit>
        <trans-unit id="8868b3cb448a49c86420f63d7d34c218cbe3a7a5" translate="yes" xml:space="preserve">
          <source>Reactivity Fundamentals</source>
          <target state="translated">反応性の基礎</target>
        </trans-unit>
        <trans-unit id="38be1878e88addc141471e2ac5be059c49256537" translate="yes" xml:space="preserve">
          <source>Reactivity in Depth</source>
          <target state="translated">深みのある反応性</target>
        </trans-unit>
        <trans-unit id="6d1fd182318e548e15b14eaf006cea3dc7bd9bc2" translate="yes" xml:space="preserve">
          <source>Read documentation on skip link to main content (opens new window)</source>
          <target state="translated">メインコンテンツへのリンクをスキップしてドキュメントを読む (新しいウィンドウが開きます)</target>
        </trans-unit>
        <trans-unit id="04f2a0af273d85671e8e6fb5fdb49a94d89d853c" translate="yes" xml:space="preserve">
          <source>Read more about custom &lt;code&gt;v-model&lt;/code&gt; modifiers in the &lt;a href=&quot;../component-custom-events#handling-v-model-modifiers&quot;&gt;Custom Events&lt;/a&gt; section.</source>
          <target state="translated">&lt;a href=&quot;../component-custom-events#handling-v-model-modifiers&quot;&gt;カスタムイベント&lt;/a&gt;セクションでカスタム &lt;code&gt;v-model&lt;/code&gt; 修飾子の詳細をお読みください。</target>
        </trans-unit>
        <trans-unit id="8c9e72dbd1af8f88c6e3d5c21ca2354cbfb25b0a" translate="yes" xml:space="preserve">
          <source>Read more about headings (opens new window)</source>
          <target state="translated">見出しについてもっと読む(新しいウィンドウが開きます</target>
        </trans-unit>
        <trans-unit id="fdac038511ef524dc9d94117822d967758f5dc12" translate="yes" xml:space="preserve">
          <source>Read more about landmarks (opens new window)</source>
          <target state="translated">ランドマークについてもっと読む(新しいウィンドウが開きます</target>
        </trans-unit>
        <trans-unit id="446d7c237336d575135ddcd7063341761426b025" translate="yes" xml:space="preserve">
          <source>Ready for More?</source>
          <target state="translated">準備はできていますか?</target>
        </trans-unit>
        <trans-unit id="d1d8e9482299003b859657b4d0f506d8911f1155" translate="yes" xml:space="preserve">
          <source>Ready start but aren&amp;rsquo;t sure where?</source>
          <target state="translated">準備はできていますが、どこにあるのかわかりませんか？</target>
        </trans-unit>
        <trans-unit id="40fe62216df511ee5c87bc8e026789c819f7b21e" translate="yes" xml:space="preserve">
          <source>Really though, any transition attribute can be dynamically bound. And it&amp;rsquo;s not only attributes. Since event hooks are methods, they have access to any data in the context. That means depending on the state of your component, your JavaScript transitions can behave differently.</source>
          <target state="translated">実際には、任意の遷移属性を動的にバインドできます。そして、それは属性だけではありません。イベントフックはメソッドであるため、コンテキスト内のすべてのデータにアクセスできます。つまり、コンポーネントの状態に応じて、JavaScriptトランジションの動作が異なります。</target>
        </trans-unit>
        <trans-unit id="97bf4cd212ab527666d890c97c24bef2808a0a86" translate="yes" xml:space="preserve">
          <source>Really though, any transition attribute can be dynamically bound. And it's not only attributes. Since event hooks are methods, they have access to any data in the context. That means depending on the state of your component, your JavaScript transitions can behave differently.</source>
          <target state="translated">しかし、本当に、どのような遷移属性でも動的にバインドすることができます。そして、それは属性だけではありません。イベントフックはメソッドなので、コンテキスト内のあらゆるデータにアクセスすることができます。つまり、コンポーネントの状態に応じて、JavaScript のトランジションは異なる動作をする可能性があるということです。</target>
        </trans-unit>
        <trans-unit id="cdb5994a5662a9b7831e2e56b44ea27b6edb5bab" translate="yes" xml:space="preserve">
          <source>Recent versions of Angular, with &lt;a href=&quot;https://en.wikipedia.org/wiki/Ahead-of-time_compilation&quot;&gt;AOT compilation&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Tree_shaking&quot;&gt;tree-shaking&lt;/a&gt;, have been able to get its size down considerably. However, a full-featured Vue 2 project with Vuex + Vue Router included (~30KB gzipped) is still significantly lighter than an out-of-the-box, AOT-compiled application generated by &lt;code&gt;angular-cli&lt;/code&gt; (~65KB gzipped).</source>
          <target state="translated">Angularの最近のバージョンでは、&lt;a href=&quot;https://en.wikipedia.org/wiki/Ahead-of-time_compilation&quot;&gt;AOTコンパイル&lt;/a&gt;と&lt;a href=&quot;https://en.wikipedia.org/wiki/Tree_shaking&quot;&gt;ツリーシェー&lt;/a&gt;キングを使用して、サイズを大幅に削減できました。ただし、Vuex + Vueルーターを含むフル機能のVue 2プロジェクト（〜30KB gzip圧縮）は、angle &lt;code&gt;angular-cli&lt;/code&gt; （〜65KB gzip圧縮）で生成された、そのままの状態でAOTコンパイルされたアプリケーションよりもはるかに軽量です。</target>
        </trans-unit>
        <trans-unit id="4faa65b556f68207d69cb14bcae4acb71980a036" translate="yes" xml:space="preserve">
          <source>Recommendations</source>
          <target state="translated">Recommendations</target>
        </trans-unit>
        <trans-unit id="3f99a56b4630f2ac18091fad78531d1626d4dac4" translate="yes" xml:space="preserve">
          <source>Recommended Configuration</source>
          <target state="translated">推奨設定</target>
        </trans-unit>
        <trans-unit id="f9d18b779732cc0ea4b60f929feea8a7c40df5fc" translate="yes" xml:space="preserve">
          <source>Recreating dynamic components is normally useful behavior, but in this case, we&amp;rsquo;d really like those tab component instances to be cached once they&amp;rsquo;re created for the first time. To solve this problem, we can wrap our dynamic component with a &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">動的コンポーネントの再作成は通常は便利な動作ですが、この場合、これらのタブコンポーネントのインスタンスが初めて作成されたときにキャッシュされるようにしたいと思います。この問題を解決するには、動的コンポーネントを &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; 要素でラップします。</target>
        </trans-unit>
        <trans-unit id="2ee8180617af736edef09b52eaf0d7ce5b820112" translate="yes" xml:space="preserve">
          <source>Recreating dynamic components is normally useful behavior, but in this case, we'd really like those tab component instances to be cached once they're created for the first time. To solve this problem, we can wrap our dynamic component with a &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">動的コンポーネントの再作成は通常は便利な動作ですが、この場合、これらのタブコンポーネントインスタンスを初めて作成したときにキャッシュする必要があります。この問題を解決するために、動的コンポーネントを &lt;code&gt;&amp;lt;keep-alive&amp;gt;&lt;/code&gt; 要素でラップできます。</target>
        </trans-unit>
        <trans-unit id="25c0556aa6352203342eea1a65c58a623378dbcc" translate="yes" xml:space="preserve">
          <source>Recursive Components</source>
          <target state="translated">再帰的なコンポーネント</target>
        </trans-unit>
        <trans-unit id="b6f1fbd6cd87b63faf44c1d4ce1e7549855c4182" translate="yes" xml:space="preserve">
          <source>Ref Unwrapping</source>
          <target state="translated">Ref アンラップ</target>
        </trans-unit>
        <trans-unit id="44aa874c75e630b4da6c22739e2f1970b1754b9f" translate="yes" xml:space="preserve">
          <source>Ref unwrapping only happens when nested inside a reactive &lt;code&gt;Object&lt;/code&gt;. There is no unwrapping performed when the ref is accessed from an &lt;code&gt;Array&lt;/code&gt; or a native collection type like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt;&lt;code&gt;Map&lt;/code&gt; (opens new window)&lt;/a&gt;:</source>
          <target state="translated">参照のアンラップは、リアクティブ &lt;code&gt;Object&lt;/code&gt; 内にネストされている場合にのみ発生します。 &lt;code&gt;Array&lt;/code&gt; または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; （新しいウィンドウを開く）の&lt;/a&gt;ようなネイティブコレクションタイプから参照にアクセスする場合、アンラップは実行されません。</target>
        </trans-unit>
        <trans-unit id="46819d95829c2f8ee915e7d271f512463387fc11" translate="yes" xml:space="preserve">
          <source>Refactoring becomes more difficult, because find-and-replace often isn&amp;rsquo;t sufficient to update relative references to a moved component.</source>
          <target state="translated">移動したコンポーネントへの相対参照を更新するには、検索と置換では十分でないことが多いため、リファクタリングはより困難になります。</target>
        </trans-unit>
        <trans-unit id="a3a624d225f5eebe49dec1882d5a5928be291481" translate="yes" xml:space="preserve">
          <source>Refactoring becomes more difficult, because find-and-replace often isn't sufficient to update relative references to a moved component.</source>
          <target state="translated">リファクタリングが難しくなるのは、移動したコンポーネントへの相対参照を更新するには、検索と置換だけでは不十分な場合が多いからです。</target>
        </trans-unit>
        <trans-unit id="f4234eefb475a2340f218d9e7a7e6c874a82a6fa" translate="yes" xml:space="preserve">
          <source>Refer to the respective build tool documentations to see how it&amp;rsquo;s done:</source>
          <target state="translated">ビルドツールのドキュメントを参照して、その方法を確認してください。</target>
        </trans-unit>
        <trans-unit id="72586e891a8415c75d87e02355c4ee4e38787be4" translate="yes" xml:space="preserve">
          <source>Refer to the respective build tool documentations to see how it's done:</source>
          <target state="translated">その方法については、各ビルドツールのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="701486a68f3896a8a5368aead277807a6847151f" translate="yes" xml:space="preserve">
          <source>Refs</source>
          <target state="translated">Refs</target>
        </trans-unit>
        <trans-unit id="590fa42d6db832cdb16cf663ef8aeae0d6fc0d96" translate="yes" xml:space="preserve">
          <source>Refs infer the type from the initial value:</source>
          <target state="translated">Refは初期値から型を推測します。</target>
        </trans-unit>
        <trans-unit id="0c058170d5b06f199a4bd107ce1c6f47426001c1" translate="yes" xml:space="preserve">
          <source>Refs used as templates refs behave just like any other refs: they are reactive and can be passed into (or returned from) composition functions.</source>
          <target state="translated">テンプレートとして使用される参照は、他の参照と同じように動作します:反応性があり、合成関数に渡されたり、合成関数から返されたりすることができます。</target>
        </trans-unit>
        <trans-unit id="8d8b1f50199fd6cb6ab6141f41a87fd8dae1f00d" translate="yes" xml:space="preserve">
          <source>Register or retrieve a global component. Registration also automatically sets the component&amp;rsquo;s &lt;code&gt;name&lt;/code&gt; with the given &lt;code&gt;id&lt;/code&gt;.</source>
          <target state="translated">グローバルコンポーネントを登録または取得します。登録では、指定された &lt;code&gt;id&lt;/code&gt; でコンポーネントの &lt;code&gt;name&lt;/code&gt; も自動的に設定されます。</target>
        </trans-unit>
        <trans-unit id="ae08a16a9767a6ee26d4fd258299ff9ca85b8c5b" translate="yes" xml:space="preserve">
          <source>Register or retrieve a global component. Registration also automatically sets the component's &lt;code&gt;name&lt;/code&gt; with the given &lt;code&gt;name&lt;/code&gt; parameter.</source>
          <target state="translated">グローバルコンポーネントを登録または取得します。登録により、指定された &lt;code&gt;name&lt;/code&gt; パラメーターを使用してコンポーネントの &lt;code&gt;name&lt;/code&gt; も自動的に設定されます。</target>
        </trans-unit>
        <trans-unit id="0168019975e7b996b73bc3be3562ac476872545c" translate="yes" xml:space="preserve">
          <source>Register or retrieve a global directive.</source>
          <target state="translated">グローバル指令を登録または取得します。</target>
        </trans-unit>
        <trans-unit id="13bd6c258247a18188a7e24270fbc9f007d7c82d" translate="yes" xml:space="preserve">
          <source>Register or retrieve a global filter.</source>
          <target state="translated">グローバルフィルタを登録または取得します。</target>
        </trans-unit>
        <trans-unit id="b522391a912c29a9f3956281e9c33d96ad9d9ff6" translate="yes" xml:space="preserve">
          <source>Registered Component</source>
          <target state="translated">登録コンポーネント</target>
        </trans-unit>
        <trans-unit id="76de89743a325c94ab024ae33f08812f80d685bb" translate="yes" xml:space="preserve">
          <source>Relation to Custom Elements</source>
          <target state="translated">カスタム要素との関係</target>
        </trans-unit>
        <trans-unit id="0ea4af908fe06688dd3fc02035189b08293c5074" translate="yes" xml:space="preserve">
          <source>Release Notes</source>
          <target state="translated">リリースノート</target>
        </trans-unit>
        <trans-unit id="a565881a24b5131daa7950a76217674953041385" translate="yes" xml:space="preserve">
          <source>Relevant RFC (opens new window)</source>
          <target state="translated">関連RFC(新しいウィンドウが開きます</target>
        </trans-unit>
        <trans-unit id="d92abdf653f23351eb7a0ab4d23290ee1313902d" translate="yes" xml:space="preserve">
          <source>Remember that &lt;strong&gt;global registration must take place before the root Vue instance is created (with &lt;code&gt;new Vue&lt;/code&gt;)&lt;/strong&gt;. &lt;a href=&quot;https://github.com/chrisvfritz/vue-enterprise-boilerplate/blob/master/src/components/_globals.js&quot;&gt;Here&amp;rsquo;s an example&lt;/a&gt; of this pattern in a real project context.</source>
          <target state="translated">&lt;strong&gt;ルートVueインスタンスが（ &lt;code&gt;new Vue&lt;/code&gt; ）作成される前に、グローバル登録を行う必要があることに&lt;/strong&gt;注意してください。実際のプロジェクトコンテキストでのこのパターンの&lt;a href=&quot;https://github.com/chrisvfritz/vue-enterprise-boilerplate/blob/master/src/components/_globals.js&quot;&gt;例を次に示し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="cd81ea4c2f9620cb5e6384a73668d947f28ede04" translate="yes" xml:space="preserve">
          <source>Remember this list from a few paragraphs ago? Now we have some answers to how Vue handles these changes:</source>
          <target state="translated">数段落前のこのリストを覚えていますか?さて、Vue がこれらの変更をどのように処理するかについて、いくつかの答えがあります。</target>
        </trans-unit>
        <trans-unit id="f430af4b132dcb0c8fc1a34ff17410de989f95d6" translate="yes" xml:space="preserve">
          <source>Remove all usages of &lt;code&gt;$listeners&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;$listeners&lt;/code&gt; 使用法をすべて削除します。</target>
        </trans-unit>
        <trans-unit id="73942b04c7d6e9cc0cafd922223a9eab5438c235" translate="yes" xml:space="preserve">
          <source>Remove custom event listener(s).</source>
          <target state="translated">カスタムイベントリスナーを削除します。</target>
        </trans-unit>
        <trans-unit id="2e13ea874c4557e9a8719b905fba053f64ebe429" translate="yes" xml:space="preserve">
          <source>Remove the re-emitting of the event, since the parent can now listen for the native event easily, without adding &lt;code&gt;.native&lt;/code&gt;. Suitable when you really only re-emit the event anyway.</source>
          <target state="translated">親が &lt;code&gt;.native&lt;/code&gt; を追加せずにネイティブイベントを簡単にリッスンできるようになったため、イベントの再送信を削除します。とにかくイベントを再送信するだけの場合に適しています。</target>
        </trans-unit>
        <trans-unit id="cab54fe624f00c44dfb29ea434660cb21fa96c33" translate="yes" xml:space="preserve">
          <source>Removed APIs</source>
          <target state="translated">削除されたAPI</target>
        </trans-unit>
        <trans-unit id="25c548f4a7b9b6ef1cfbffbca926739476b1c4e2" translate="yes" xml:space="preserve">
          <source>Removed due to hooks simplification. If you really must suppress transition errors, you can use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch&quot;&gt;&lt;code&gt;try&lt;/code&gt;&amp;hellip;&lt;code&gt;catch&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">フックの簡素化のために削除されました。移行エラーを本当に抑制する必要がある場合は、代わりに&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch&quot;&gt; &lt;code&gt;try&lt;/code&gt; &amp;hellip; &lt;code&gt;catch&lt;/code&gt; を&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="e7f3ed71f5d7421b91e0c25cc42984adb65b4fdd" translate="yes" xml:space="preserve">
          <source>Renamed to &lt;code&gt;base&lt;/code&gt; for consistency with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;the HTML &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; element&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;HTMLの&lt;/a&gt; &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; 要素との一貫性を保つため、 &lt;code&gt;base&lt;/code&gt; に名前が変更されました。</target>
        </trans-unit>
        <trans-unit id="a8df655d1a0ac39c181aa88283e5d1c026113194" translate="yes" xml:space="preserve">
          <source>Render Function</source>
          <target state="translated">レンダー関数</target>
        </trans-unit>
        <trans-unit id="74c236956538812497d07532ffea369ba11a6567" translate="yes" xml:space="preserve">
          <source>Render Function API</source>
          <target state="translated">レンダー関数API</target>
        </trans-unit>
        <trans-unit id="b49e816b12aac18b3afdb19d7bd4fb9da7452c10" translate="yes" xml:space="preserve">
          <source>Render Function Argument</source>
          <target state="translated">レンダー関数引数</target>
        </trans-unit>
        <trans-unit id="ace19ca906649466d2c7dd3fe462bc3acd5f3a5a" translate="yes" xml:space="preserve">
          <source>Render Function Signature Change</source>
          <target state="translated">レンダー関数のシグネチャ変更</target>
        </trans-unit>
        <trans-unit id="5215655670fe9017f515c66cb3c3e4b0b10ec4d9" translate="yes" xml:space="preserve">
          <source>Render Functions</source>
          <target state="translated">レンダリング機能</target>
        </trans-unit>
        <trans-unit id="3aa893c2a6ebe75166762d5109366b728fa5dc54" translate="yes" xml:space="preserve">
          <source>Render Functions &amp;amp; JSX</source>
          <target state="translated">レンダリング関数とJSX</target>
        </trans-unit>
        <trans-unit id="f54e5429aec68f05a2b3b43a85ee9662c29159d7" translate="yes" xml:space="preserve">
          <source>Render Functions - Slots</source>
          <target state="translated">レンダリング機能-スロット</target>
        </trans-unit>
        <trans-unit id="addbe4e257768d49a2a92ed6eda801285bbfd8e2" translate="yes" xml:space="preserve">
          <source>Render Scope</source>
          <target state="translated">レンダリング範囲</target>
        </trans-unit>
        <trans-unit id="9329d00b9b7be0b20e4bded9ef83426d44382a7b" translate="yes" xml:space="preserve">
          <source>Render function API changed</source>
          <target state="translated">レンダー関数のAPIを変更しました</target>
        </trans-unit>
        <trans-unit id="aeac0239d7806a13c73e4eacbb8e89032112b08f" translate="yes" xml:space="preserve">
          <source>Render functions with JSX have a few advantages:</source>
          <target state="translated">JSXを使ったレンダー関数にはいくつかのメリットがあります。</target>
        </trans-unit>
        <trans-unit id="c0f479c7d13498bbd2aa42eae8f88242964120b5" translate="yes" xml:space="preserve">
          <source>Render the element and component &lt;strong&gt;once&lt;/strong&gt; only. On subsequent re-renders, the element/component and all its children will be treated as static content and skipped. This can be used to optimize update performance.</source>
          <target state="translated">要素とコンポーネントを&lt;strong&gt;一度&lt;/strong&gt;だけレンダリングします。後続の再レンダリングでは、要素/コンポーネントとそのすべての子は静的コンテンツとして扱われ、スキップされます。これは、更新パフォーマンスを最適化するために使用できます。</target>
        </trans-unit>
        <trans-unit id="1c510f643528b3292df74bbcf70195487418102f" translate="yes" xml:space="preserve">
          <source>Render the element or template block multiple times based on the source data. The directive&amp;rsquo;s value must use the special syntax &lt;code&gt;alias in expression&lt;/code&gt; to provide an alias for the current element being iterated on:</source>
          <target state="translated">ソースデータに基づいて要素またはテンプレートブロックを複数回レンダリングします。ディレクティブの値は &lt;code&gt;alias in expression&lt;/code&gt; 特別な構文エイリアスを使用して、反復される現在の要素のエイリアスを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="bd1a649d465f8e1a62e796c52535aae0d48a8876" translate="yes" xml:space="preserve">
          <source>Render the element or template block multiple times based on the source data. The directive's value must use the special syntax &lt;code&gt;alias in expression&lt;/code&gt; to provide an alias for the current element being iterated on:</source>
          <target state="translated">ソースデータに基づいて、要素またはテンプレートブロックを複数回レンダリングします。ディレクティブの値は &lt;code&gt;alias in expression&lt;/code&gt; 特別な構文エイリアスを使用して、反復される現在の要素のエイリアスを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="e740de4597c7445ebb94518bd33a4bcfca642e2a" translate="yes" xml:space="preserve">
          <source>Rendering Mechanisms and Optimizations</source>
          <target state="translated">レンダリングのメカニズムと最適化</target>
        </trans-unit>
        <trans-unit id="9647e21c53c63f65c167aa12298837e080c17cb0" translate="yes" xml:space="preserve">
          <source>Rendering plain HTML elements is very fast in Vue, but sometimes you might have a component that contains &lt;strong&gt;a lot&lt;/strong&gt; of static content. In these cases, you can ensure that it&amp;rsquo;s only evaluated once and then cached by adding the &lt;code&gt;v-once&lt;/code&gt; directive to the root element, like this:</source>
          <target state="translated">VueではプレーンHTML要素のレンダリングは非常に高速ですが&lt;strong&gt;、多く&lt;/strong&gt;の静的コンテンツを含むコンポーネントがある場合があります。このような場合は、次のように &lt;code&gt;v-once&lt;/code&gt; ディレクティブをルート要素に追加することで、一度だけ評価されてからキャッシュされることを確認できます。</target>
        </trans-unit>
        <trans-unit id="0a857c99cf4b0ae7acc195147b4b766abe24c957" translate="yes" xml:space="preserve">
          <source>Rendering plain HTML elements is very fast in Vue, but sometimes you might have a component that contains &lt;strong&gt;a lot&lt;/strong&gt; of static content. In these cases, you can ensure that it's only evaluated once and then cached by adding the &lt;code&gt;v-once&lt;/code&gt; directive to the root element, like this:</source>
          <target state="translated">プレーンなHTML要素のレンダリングはVueで非常に高速ですが&lt;strong&gt;、多く&lt;/strong&gt;の静的コンテンツを含むコンポーネントがある場合があります。このような場合、次のようにルート要素に &lt;code&gt;v-once&lt;/code&gt; ディレクティブを追加することで、一度だけ評価されてからキャッシュされるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="2d13414c61e1307782300fa26f96b2fe0a987373" translate="yes" xml:space="preserve">
          <source>Replace &lt;code&gt;config.ignoredElements&lt;/code&gt; with either &lt;code&gt;vue-loader&lt;/code&gt;'s &lt;code&gt;compilerOptions&lt;/code&gt; (with the build step) or &lt;code&gt;app.config.isCustomElement&lt;/code&gt; (with on-the-fly template compilation)</source>
          <target state="translated">&lt;code&gt;config.ignoredElements&lt;/code&gt; を &lt;code&gt;vue-loader&lt;/code&gt; の &lt;code&gt;compilerOptions&lt;/code&gt; （ビルドステップを使用）または &lt;code&gt;app.config.isCustomElement&lt;/code&gt; （オンザフライテンプレートコンパイルを使用）に置き換えます</target>
        </trans-unit>
        <trans-unit id="80141b0813cd433b013d865aac12e9525f55fc79" translate="yes" xml:space="preserve">
          <source>Replace all &lt;code&gt;this.$scopedSlots&lt;/code&gt; occurrences with &lt;code&gt;this.$slots&lt;/code&gt; in 3.x.</source>
          <target state="translated">すべて交換してください &lt;code&gt;this.$scopedSlots&lt;/code&gt; 出現をして &lt;code&gt;this.$slots&lt;/code&gt; 3.xで</target>
        </trans-unit>
        <trans-unit id="35ea8a0ec694cc57a9a233de984b2992f0beefc8" translate="yes" xml:space="preserve">
          <source>Replace all occurrences of &lt;code&gt;this.$slots.mySlot&lt;/code&gt; with &lt;code&gt;this.$slots.mySlot()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;this.$slots.mySlot&lt;/code&gt; すべての出現箇所を &lt;code&gt;this.$slots.mySlot()&lt;/code&gt; 置き換えます</target>
        </trans-unit>
        <trans-unit id="1b7b28f839424e787b9612d095bc2c496584af3b" translate="yes" xml:space="preserve">
          <source>Replace instances of &lt;code&gt;.v-enter&lt;/code&gt; to &lt;code&gt;.v-enter-from&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.v-enter&lt;/code&gt; のインスタンスを &lt;code&gt;.v-enter-from&lt;/code&gt; に置き換えます</target>
        </trans-unit>
        <trans-unit id="bf6931130e2c697e1198659bd51fa4df0b1dc5bf" translate="yes" xml:space="preserve">
          <source>Replace instances of &lt;code&gt;.v-leave&lt;/code&gt; to &lt;code&gt;.v-leave-from&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;.v-leave&lt;/code&gt; のインスタンスを &lt;code&gt;.v-leave-from&lt;/code&gt; に置き換えます</target>
        </trans-unit>
        <trans-unit id="009126448723157c7cb1cf897352b418cf9b13c3" translate="yes" xml:space="preserve">
          <source>Replace instances of related prop names, as above.</source>
          <target state="translated">上記のように、関連するプロップ名のインスタンスを置き換えます。</target>
        </trans-unit>
        <trans-unit id="9a09ee1cf84326d5d5b1fbbb8dcaca046fb652f2" translate="yes" xml:space="preserve">
          <source>Replacing &lt;code&gt;vm.$data&lt;/code&gt;&lt;sup&gt;removed&lt;/sup&gt;</source>
          <target state="translated">&lt;sup&gt;削除された&lt;/sup&gt; &lt;code&gt;vm.$data&lt;/code&gt; 置き換え&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="6336d2b4c545bfdb0a2c2e6130a2fe522bc117ed" translate="yes" xml:space="preserve">
          <source>Replacing Template Features with Plain JavaScript</source>
          <target state="translated">テンプレートの機能をプレーンな JavaScript に置き換える</target>
        </trans-unit>
        <trans-unit id="3694e119ff9868c46a5da68ac50107adb0cd0254" translate="yes" xml:space="preserve">
          <source>Replacing an Array</source>
          <target state="translated">配列の置き換え</target>
        </trans-unit>
        <trans-unit id="448ceec811e5cd1612b41b145f75a74425a6d60a" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;capitalize&lt;/code&gt; Filter</source>
          <target state="translated">交換 &lt;code&gt;capitalize&lt;/code&gt; フィルター</target>
        </trans-unit>
        <trans-unit id="8ebc9242fd66a164fb0466c94c267b085022f523" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;currency&lt;/code&gt; Filter</source>
          <target state="translated">&lt;code&gt;currency&lt;/code&gt; フィルターの交換</target>
        </trans-unit>
        <trans-unit id="6e8e54f171683ed43699d784bb3a20daa786f68a" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;debounce&lt;/code&gt; Filter</source>
          <target state="translated">&lt;code&gt;debounce&lt;/code&gt; フィルターの交換</target>
        </trans-unit>
        <trans-unit id="bc05ccbf460e1bee1b220a363cd9b366122fc62c" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;filterBy&lt;/code&gt; Filter</source>
          <target state="translated">&lt;code&gt;filterBy&lt;/code&gt; フィルターの交換</target>
        </trans-unit>
        <trans-unit id="5aadbac5cc6d5572fbf9f02300727b922b52477f" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;json&lt;/code&gt; Filter</source>
          <target state="translated">&lt;code&gt;json&lt;/code&gt; フィルターの交換</target>
        </trans-unit>
        <trans-unit id="5af22200afbbae6350485e71f8a0930a62620a3b" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;limitBy&lt;/code&gt; Filter</source>
          <target state="translated">&lt;code&gt;limitBy&lt;/code&gt; フィルターの置き換え</target>
        </trans-unit>
        <trans-unit id="63239b2dfa73a07907b85e48d0e4e3d07aa51efd" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;lowercase&lt;/code&gt; Filter</source>
          <target state="translated">&lt;code&gt;lowercase&lt;/code&gt; フィルターの交換</target>
        </trans-unit>
        <trans-unit id="307535ec9952915e10873762b9b0a59ea99d17d1" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;orderBy&lt;/code&gt; Filter</source>
          <target state="translated">&lt;code&gt;orderBy&lt;/code&gt; フィルターの置き換え</target>
        </trans-unit>
        <trans-unit id="5a0b57fe75978a4fde52508fa6b11e6a9fcbade8" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;pluralize&lt;/code&gt; Filter</source>
          <target state="translated">&lt;code&gt;pluralize&lt;/code&gt; フィルターの交換</target>
        </trans-unit>
        <trans-unit id="5895ba028c303252e37b6295f10778b7ca351267" translate="yes" xml:space="preserve">
          <source>Replacing the &lt;code&gt;uppercase&lt;/code&gt; Filter</source>
          <target state="translated">&lt;code&gt;uppercase&lt;/code&gt; フィルターの交換</target>
        </trans-unit>
        <trans-unit id="c183ebe6cda4d505c2e49d3160c8367d36be5b90" translate="yes" xml:space="preserve">
          <source>Replacing/Merging with Existing Attributes</source>
          <target state="translated">既存の属性との置き換え/マージ</target>
        </trans-unit>
        <trans-unit id="e6ca57202c6e8dc869b883168359dd09117a9904" translate="yes" xml:space="preserve">
          <source>Repo</source>
          <target state="translated">Repo</target>
        </trans-unit>
        <trans-unit id="87df60de337fb58864343e396696d74611e0d403" translate="yes" xml:space="preserve">
          <source>Resources</source>
          <target state="translated">Resources</target>
        </trans-unit>
        <trans-unit id="bd4afc0073cac79bf136f8e1d922b83f76e969ad" translate="yes" xml:space="preserve">
          <source>Result:</source>
          <target state="translated">Result:</target>
        </trans-unit>
        <trans-unit id="ae84d73d0597806bc7d0adbdc690a6542782495e" translate="yes" xml:space="preserve">
          <source>Returning both the list and the function so they are accessible by other component options</source>
          <target state="translated">リストと関数の両方を返し、他のコンポーネントオプションからアクセスできるようにします。</target>
        </trans-unit>
        <trans-unit id="f4a8e54ae12ccca05bb893a32d4a3f7046d7b142" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;Component&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; when not found.</source>
          <target state="translated">戻り値 &lt;code&gt;Component&lt;/code&gt; または &lt;code&gt;undefined&lt;/code&gt; が見つからないとき。</target>
        </trans-unit>
        <trans-unit id="47a7db15788311291fa8f5bf09eb2c27ce7d30eb" translate="yes" xml:space="preserve">
          <source>Returns a &lt;code&gt;Directive&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; when not found.</source>
          <target state="translated">見つから &lt;code&gt;undefined&lt;/code&gt; 場合は、 &lt;code&gt;Directive&lt;/code&gt; または未定義を返します。</target>
        </trans-unit>
        <trans-unit id="fad51a002d72fc20ecfb02f7a23ee64136443339" translate="yes" xml:space="preserve">
          <source>Returns a reactive copy of the object.</source>
          <target state="translated">オブジェクトの反応コピーを返します。</target>
        </trans-unit>
        <trans-unit id="f961cb226fc5286bf0338f8127c9739d4d786e8f" translate="yes" xml:space="preserve">
          <source>Returns a returns &quot;virtual node&quot;, usually abbreviated to &lt;strong&gt;VNode&lt;/strong&gt;: a plain object which contains information describing to Vue what kind of node it should render on the page, including descriptions of any child nodes. It is intended for manually written &lt;a href=&quot;../guide/render-function&quot;&gt;render functions&lt;/a&gt;:</source>
          <target state="translated">戻り値の「仮想ノード」を返します。通常は&lt;strong&gt;VNodeと&lt;/strong&gt;略されます。子ノードの説明など、ページにレンダリングするノードの種類をVueに説明する情報を含むプレーンオブジェクトです。手動で記述された&lt;a href=&quot;../guide/render-function&quot;&gt;レンダリング関数を&lt;/a&gt;対象としています。</target>
        </trans-unit>
        <trans-unit id="89257adefb18c26832ef5553199ebda0a4701ee4" translate="yes" xml:space="preserve">
          <source>Returns an application instance which provides an application context. The entire component tree mounted by the application instance share the same context.</source>
          <target state="translated">アプリケーションコンテキストを提供するアプリケーションインスタンスを返します。アプリケーションインスタンスがマウントしたコンポーネントツリー全体が同じコンテキストを共有します。</target>
        </trans-unit>
        <trans-unit id="958894eaff54dca93f7c230586bf4e7aa2a2c600" translate="yes" xml:space="preserve">
          <source>Returns the inner value if the argument is a &lt;a href=&quot;#ref&quot;&gt;&lt;code&gt;ref&lt;/code&gt;&lt;/a&gt;, otherwise return the argument itself. This is a sugar function for &lt;code&gt;val = isRef(val) ? val.value : val&lt;/code&gt;.</source>
          <target state="translated">引数が&lt;a href=&quot;#ref&quot;&gt; &lt;code&gt;ref&lt;/code&gt; の&lt;/a&gt;場合は内部値を返し、それ以外の場合は引数自体を返します。これは &lt;code&gt;val = isRef(val) ? val.value : val&lt;/code&gt; 糖関数ですか？val.value：val。</target>
        </trans-unit>
        <trans-unit id="f990a1d837cdf3d578932fb103b30bb1d0c1e735" translate="yes" xml:space="preserve">
          <source>Returns the raw, original object of a &lt;a href=&quot;#reactive&quot;&gt;&lt;code&gt;reactive&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#readonly&quot;&gt;&lt;code&gt;readonly&lt;/code&gt;&lt;/a&gt; proxy. This is an escape hatch that can be used to temporarily read without incurring proxy access/tracking overhead or write without triggering changes. It is &lt;strong&gt;not&lt;/strong&gt; recommended to hold a persistent reference to the original object. Use with caution.</source>
          <target state="translated">&lt;a href=&quot;#reactive&quot;&gt; &lt;code&gt;reactive&lt;/code&gt; &lt;/a&gt;プロキシまたは&lt;a href=&quot;#readonly&quot;&gt; &lt;code&gt;readonly&lt;/code&gt; &lt;/a&gt;プロキシの生の元のオブジェクトを返します。これは、プロキシアクセス/トラッキングオーバーヘッドを発生させずに一時的に読み取り、または変更をトリガーせずに書き込みを行うために使用できるエスケープハッチです。元のオブジェクトへの永続的な参照を保持することはお勧めし&lt;strong&gt;ません&lt;/strong&gt;。注意して使用してください。</target>
        </trans-unit>
        <trans-unit id="06f300f539033a0a174d6567af6ef83f67f363d6" translate="yes" xml:space="preserve">
          <source>Returns the resolved &lt;code&gt;Component&lt;/code&gt; or a newly created &lt;code&gt;VNode&lt;/code&gt; with the component name as the node tag. Will raise a warning if the &lt;code&gt;Component&lt;/code&gt; was not found.</source>
          <target state="translated">解決された &lt;code&gt;Component&lt;/code&gt; またはコンポーネント名を &lt;code&gt;VNode&lt;/code&gt; として使用して新しく作成されたVNodeを返します。 &lt;code&gt;Component&lt;/code&gt; が見つからなかった場合、警告が表示されます。</target>
        </trans-unit>
        <trans-unit id="4d8a054873446a82f9d9b672554fd977c4dc9233" translate="yes" xml:space="preserve">
          <source>Reusability is limited: we cannot pass any parameters to the mixin to change its logic which reduces their flexibility in terms of abstracting logic</source>
          <target state="translated">再利用性には限界があります。 ミキシングのロジックを変更するためにパラメータを渡すことができないため、ロジックの抽象化という点で柔軟性が低下します。</target>
        </trans-unit>
        <trans-unit id="1f5b54bbca313ab53947ed8a4f97b16e01f729d9" translate="yes" xml:space="preserve">
          <source>Reusable Transitions</source>
          <target state="translated">再利用可能なトランジション</target>
        </trans-unit>
        <trans-unit id="a48bbafb258bfc790b66aec7d45e0a6a8fa1cd83" translate="yes" xml:space="preserve">
          <source>Reusing Components</source>
          <target state="translated">コンポーネントの再利用</target>
        </trans-unit>
        <trans-unit id="5596832d1f65947dd48007d834ec88a15c31ed4a" translate="yes" xml:space="preserve">
          <source>Rewrite references to the shared data to point to a new shared object</source>
          <target state="translated">新しい共有オブジェクトを指すように共有データへの参照を書き換えます。</target>
        </trans-unit>
        <trans-unit id="b836c4c63ed0b1bed339e82e9c78c2b817e6736c" translate="yes" xml:space="preserve">
          <source>Riot</source>
          <target state="translated">Riot</target>
        </trans-unit>
        <trans-unit id="6e85617241bed85b4dcd2ae064b3025078b134e9" translate="yes" xml:space="preserve">
          <source>Riot 3.0 provides a similar component-based development model (which is called a &amp;ldquo;tag&amp;rdquo; in Riot), with a minimal and beautifully designed API. Riot and Vue probably share a lot in design philosophies. However, despite being a bit heavier than Riot, Vue does offer some significant advantages:</source>
          <target state="translated">Riot 3.0は、最小限の美しく設計されたAPIを備えた、同様のコンポーネントベースの開発モデル（Riotでは「タグ」と呼ばれる）を提供します。RiotとVueはおそらく設計哲学で多くのことを共有しています。ただし、Riotより少し重いにもかかわらず、Vueにはいくつかの重要な利点があります。</target>
        </trans-unit>
        <trans-unit id="49a199623e9b76b5c5dc35c517989d2f685d6fd1" translate="yes" xml:space="preserve">
          <source>Robust (opens new window)</source>
          <target state="translated">堅牢(新しいウィンドウが開きます</target>
        </trans-unit>
        <trans-unit id="cee656e4e4fb4012f85e12695536c23a5e0e62c3" translate="yes" xml:space="preserve">
          <source>Rollup</source>
          <target state="translated">Rollup</target>
        </trans-unit>
        <trans-unit id="8e4ecad6a05d926091d335638bbc9859c1de1f8b" translate="yes" xml:space="preserve">
          <source>Rollup + rollup-plugin-vue</source>
          <target state="translated">ロールアップ+ロールアッププラグインビュー</target>
        </trans-unit>
        <trans-unit id="f6bad8b29e9b70cef765c2b65b7d3b5376681a63" translate="yes" xml:space="preserve">
          <source>Rollup + rollup-plugin-vue (opens new window)</source>
          <target state="translated">ロールアップ+rollup-plugin-vue (新しいウィンドウが開きます)</target>
        </trans-unit>
        <trans-unit id="42ec7ccbef29d0422b242b5178f06191bc8484d0" translate="yes" xml:space="preserve">
          <source>Route Definitions</source>
          <target state="translated">ルート定義</target>
        </trans-unit>
        <trans-unit id="6e3b967c60ba49b0f518c43998cb2dc91dd2134c" translate="yes" xml:space="preserve">
          <source>Route Hooks</source>
          <target state="translated">ルートフック</target>
        </trans-unit>
        <trans-unit id="2b73a7098cbf7da1b1613b48acc5eb7c6f35331c" translate="yes" xml:space="preserve">
          <source>Route Matching</source>
          <target state="translated">ルートマッチング</target>
        </trans-unit>
        <trans-unit id="18febd25894978ca61139fd68c461cb521819d89" translate="yes" xml:space="preserve">
          <source>Route Options: Misc</source>
          <target state="translated">ルートオプション。その他</target>
        </trans-unit>
        <trans-unit id="f0865cca790a39153b3f106f9c19244b4f157bd4" translate="yes" xml:space="preserve">
          <source>Route matching now uses &lt;a href=&quot;https://github.com/pillarjs/path-to-regexp&quot;&gt;path-to-regexp&lt;/a&gt; under the hood, making it much more flexible than previously.</source>
          <target state="translated">ルートマッチングは、&lt;a href=&quot;https://github.com/pillarjs/path-to-regexp&quot;&gt;内部&lt;/a&gt;で正規表現へのパスを使用するようになり、以前よりもはるかに柔軟になりました。</target>
        </trans-unit>
        <trans-unit id="32027b0a6491682801317490f82d9b553e764f1b" translate="yes" xml:space="preserve">
          <source>Router Initialization</source>
          <target state="translated">ルータ初期化</target>
        </trans-unit>
        <trans-unit id="1b4778ead27c045154fa8a8032dcbf9b6b10e64f" translate="yes" xml:space="preserve">
          <source>Router Options: Modes</source>
          <target state="translated">ルーターのオプション。モード</target>
        </trans-unit>
        <trans-unit id="9add2b84e8289fb0ea9dcb2637e5d5907ca4d748" translate="yes" xml:space="preserve">
          <source>Routes are now defined as an array on a &lt;a href=&quot;https://router.vuejs.org/en/essentials/getting-started.html#javascript&quot;&gt;&lt;code&gt;routes&lt;/code&gt; option&lt;/a&gt; at router instantiation. So these routes for example:</source>
          <target state="translated">ルートは、ルータのインスタンス化時に&lt;a href=&quot;https://router.vuejs.org/en/essentials/getting-started.html#javascript&quot;&gt; &lt;code&gt;routes&lt;/code&gt; オプションの&lt;/a&gt;配列として定義されるようになりました。たとえば、これらのルート：</target>
        </trans-unit>
        <trans-unit id="7d15dd1bec2e055c5b177c9f869305ae6c54c9bb" translate="yes" xml:space="preserve">
          <source>Routing</source>
          <target state="translated">Routing</target>
        </trans-unit>
        <trans-unit id="d670f1115ef0c3c29b2d47e241e7dd62eafb1e11" translate="yes" xml:space="preserve">
          <source>Rule Categories</source>
          <target state="translated">ルールカテゴリ</target>
        </trans-unit>
        <trans-unit id="91ba54d8bd5025bb2cb3e7a4cd0c0785af90a756" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find &lt;code&gt;keep-alive&lt;/code&gt; attributes.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;keep-alive&lt;/code&gt; 属性を見つけます。</target>
        </trans-unit>
        <trans-unit id="6d2ac67778b450ed0b9659002961f8409d707930" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find CSS selectors targeting named slots (e.g. &lt;code&gt;[slot=&quot;my-slot-name&quot;]&lt;/code&gt;).</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、名前付きスロットをターゲットとするCSSセレクターを見つけます（例： &lt;code&gt;[slot=&quot;my-slot-name&quot;]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="fb8ef12ba88bdd9ea8d64f474b58bd5f002af15c" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find HTML interpolations.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、HTML補間を見つけます。</target>
        </trans-unit>
        <trans-unit id="e29967481758c6af408495a286989e2f4b3a4403" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find all examples of this hook.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、このフックのすべての例を見つけます。</target>
        </trans-unit>
        <trans-unit id="131ad91eddecfe4bcd3aa1d2c3dae1e7c9a6d28b" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;$dispatch&lt;/code&gt; and &lt;code&gt;$broadcast&lt;/code&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;$dispatch&lt;/code&gt; と &lt;code&gt;$broadcast&lt;/code&gt; 例を見つけます。</target>
        </trans-unit>
        <trans-unit id="b5547bdef16b43ebf6aa5572275c3effebf29215" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;.$remove&lt;/code&gt; on an array. If you miss any, you should see &lt;strong&gt;console errors&lt;/strong&gt; from the missing method.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、配列の。 &lt;code&gt;.$remove&lt;/code&gt; 例を見つけます。いずれかを見逃した場合、欠落しているメソッドの&lt;strong&gt;コンソールエラー&lt;/strong&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="4d1a3ee9aa64afee960f48bf970646ff2ca1516a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;.$set&lt;/code&gt; on an array. If you miss any, you should see &lt;strong&gt;console errors&lt;/strong&gt; from the missing method.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、配列の。 &lt;code&gt;.$set&lt;/code&gt; 例を見つけます。いずれかを見逃した場合、欠落しているメソッドの&lt;strong&gt;コンソールエラー&lt;/strong&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="f7cf2f519c21c26383d689b999383e7f48c8daeb" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.config.async&lt;/code&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;Vue.config.async&lt;/code&gt; の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="adba4cc2d78c532c252af8489b44bb0c82a60071" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.config.debug&lt;/code&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;Vue.config.debug&lt;/code&gt; の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="842114654af7636636f5d0ca2790f492b054f6ff" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.config.delimiters&lt;/code&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;Vue.config.delimiters&lt;/code&gt; の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="56d3c94b1fca7d1fecbd0be685fc6a65bfb4e3ff" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.config.unsafeDelimiters&lt;/code&gt;. After this, the helper will also find instances of HTML interpolation so that you can replace them with `v-html`.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;Vue.config.unsafeDelimiters&lt;/code&gt; の例を見つけます。この後、ヘルパーはHTML補間のインスタンスも見つけて、 `v-html`に置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="7abfe983d07d10f68fd1a923086c66cfb28e6a0a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.elementDirective&lt;/code&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;Vue.elementDirective&lt;/code&gt; の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="0cbd833dba88270b867f404265f89cd61957dd9e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.partial&lt;/code&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;Vue.partial&lt;/code&gt; の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="2be876bb1c3f71e3306a218289a786bebe66e6ac" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.set&lt;/code&gt; or &lt;code&gt;Vue.delete&lt;/code&gt; on a Vue instance. If you miss any, they'll trigger &lt;strong&gt;console warnings&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、Vueインスタンスの &lt;code&gt;Vue.set&lt;/code&gt; または &lt;code&gt;Vue.delete&lt;/code&gt; の例を見つけます。いずれかを見逃した場合、&lt;strong&gt;コンソールの警告が表示されます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b9c98c79eef3d7a23f61df5ef62ac7e471ae74fb" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;Vue.transition&lt;/code&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;Vue.transition&lt;/code&gt; の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="3cd48bf0c847ee511a1c8d066fdfbdc6f4f6ffc4" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;replace: false&lt;/code&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;replace: false&lt;/code&gt; 例を見つけます：false。</target>
        </trans-unit>
        <trans-unit id="bc77c164d9ea83ca27d60242ad248d1e7b987f0e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.alias&lt;/code&gt; being called.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、呼び出される &lt;code&gt;router.alias&lt;/code&gt; の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="7cf69302085bdd68f35cf86d99ec675583acea23" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.go&lt;/code&gt; being used where &lt;code&gt;router.push&lt;/code&gt; should be used instead.</source>
          <target state="translated">実行&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパーを&lt;/a&gt;例見つけるためにあなたのコードベースに &lt;code&gt;router.go&lt;/code&gt; 場合に使用されている &lt;code&gt;router.push&lt;/code&gt; を代わりに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e39b23f840933b639f0659fde34e12f635127e7f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.map&lt;/code&gt; being called.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、呼び出される &lt;code&gt;router.map&lt;/code&gt; の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="b828dfd9e2d7bcae2364000145b56e764e6ebe03" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.on&lt;/code&gt; being called.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、呼び出される &lt;code&gt;router.on&lt;/code&gt; の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="f9a6975194aa0ce1b5cad1c6626af7c35453fcd0" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.redirect&lt;/code&gt; being called.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;router.redirect&lt;/code&gt; れているrouter.redirectの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="cc5f2a33706f0e2d3f4cdbd090a5e649c5b6ae0f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;router.start&lt;/code&gt; being called.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、呼び出される &lt;code&gt;router.start&lt;/code&gt; の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="f5f2fbe802e2c06eba8dee0a46275f8ee4460bc0" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;store.on&lt;/code&gt;, &lt;code&gt;store.off&lt;/code&gt;, and &lt;code&gt;store.emit&lt;/code&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;store.on&lt;/code&gt; 、 &lt;code&gt;store.off&lt;/code&gt; 、および &lt;code&gt;store.emit&lt;/code&gt; の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="00ad6c9fe856a5b4567b7a4dab60a0fe45a37f40" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;store.watch&lt;/code&gt; with a string as the first argument.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、最初の引数として文字列を &lt;code&gt;store.watch&lt;/code&gt; 例を見つけます。</target>
        </trans-unit>
        <trans-unit id="4f47a47355d74434a753364a679e2f4c9a402ae5" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;track-by&lt;/code&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;track-by&lt;/code&gt; の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="da0f85cb5aa67bdac2ea466f36918db2fcd36b05" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;v-el&lt;/code&gt; and &lt;code&gt;v-ref&lt;/code&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;v-el&lt;/code&gt; および &lt;code&gt;v-ref&lt;/code&gt; の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="7aa5783c6df3a82bb69131d32c3850e7f84cfda7" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$after&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;vm.$after&lt;/code&gt; 例を見つけます。いずれかを見逃した場合は、&lt;strong&gt;コンソールエラー&lt;/strong&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="09e7d78d817c1fd2a45c3cf9b9c21a2069c4fd37" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$appendTo&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;vm.$appendTo&lt;/code&gt; 例を見つけます。いずれかを見逃した場合は、&lt;strong&gt;コンソールエラー&lt;/strong&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="d7350cc4e203e91682eee37d60894b3e1314af48" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$before&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;vm.$before&lt;/code&gt; 例を見つけます。いずれかを見逃した場合は、&lt;strong&gt;コンソールエラー&lt;/strong&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="c0c4f878eaed231fe0dbb2225df03cd65dc84e13" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$eval&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;vm.$eval&lt;/code&gt; 例を見つけます。いずれかを見逃した場合は、&lt;strong&gt;コンソールエラー&lt;/strong&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="3f8e856f05355ed8982ce86f4336ff6eacabf3e2" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$get&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;vm.$get&lt;/code&gt; 例を見つけます。いずれかを見逃した場合は、&lt;strong&gt;コンソールエラー&lt;/strong&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="bd0dd654ce3404b139a97c6070c1ea80255ce0fd" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$interpolate&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;vm.$interpolate&lt;/code&gt; 例を見つけます。いずれかを見逃した場合は、&lt;strong&gt;コンソールエラー&lt;/strong&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="81bbbda8f1ba1322792aa46e4294439738bc392f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$log&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;vm.$log&lt;/code&gt; 例を見つけます。いずれかを見逃した場合は、&lt;strong&gt;コンソールエラー&lt;/strong&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="381f44de62059e317b1f31d7ce9b3541555d602b" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of &lt;code&gt;vm.$remove&lt;/code&gt;. If you miss any, you'll see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;vm.$remove&lt;/code&gt; 例を見つけます。いずれかを見逃した場合は、&lt;strong&gt;コンソールエラー&lt;/strong&gt;が表示されます。</target>
        </trans-unit>
        <trans-unit id="b874a37ca4886af9d3b7780e6010cf89d9c7f988" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of arbitrary route properties not scoped under meta.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、メタにスコープされていない任意のルートプロパティの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="1fa158cea69bdd4c40bd2a48988a099538d4dc5e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of defined directives. The helper will flag all of them, as it's likely in most cases that you'll want to refactor to a component.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、定義されたディレクティブの例を見つけます。ほとんどの場合、コンポーネントにリファクタリングする必要があるため、ヘルパーはそれらすべてにフラグを立てます。</target>
        </trans-unit>
        <trans-unit id="979e6458f784d896c90752c57e560652f6c8525d" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of filters being used inside directives. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、ディレクティブ内で使用されているフィルターの例を見つけます。いずれかを見逃した場合は、&lt;strong&gt;コンソールエラー&lt;/strong&gt;も表示されます。</target>
        </trans-unit>
        <trans-unit id="801a0e4488b5e174aaaa485bb9fbdd0fb7f5b389" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of filters used in directives like &lt;code&gt;v-model&lt;/code&gt;. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;v-model&lt;/code&gt; などのディレクティブで使用されるフィルターの例を見つけます。いずれかを見逃した場合は、&lt;strong&gt;コンソールエラー&lt;/strong&gt;も表示されます。</target>
        </trans-unit>
        <trans-unit id="83b833ef69efe1e17f7ef29c061f04dea5876bad" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of interpolation used within attributes.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、属性内で使用される補間の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="9bb76b174b8438ba3c0f4ba54b4026ce44dd98ca" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of overwriting &lt;code&gt;vm.$data&lt;/code&gt;. If you miss any, &lt;strong&gt;console warnings&lt;/strong&gt; will be emitted.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;vm.$data&lt;/code&gt; を上書きする例を見つけます。いずれかを見逃した場合、&lt;strong&gt;コンソール警告&lt;/strong&gt;が発せられます。</target>
        </trans-unit>
        <trans-unit id="8dbff7c8c83dec265171807e5ec5ea40ea988ad1" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of style bindings with &lt;code&gt;!important&lt;/code&gt; in objects.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、オブジェクトに &lt;code&gt;!important&lt;/code&gt; を含むスタイルバインディングの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="93ebbb2019ca1300c683d3ae1afb72a96650f915" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;$loadingRouteData&lt;/code&gt; meta property.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;$loadingRouteData&lt;/code&gt; メタプロパティの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="52407d926e2b5716bf90f4cb35758896e87892ed" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;.once&lt;/code&gt; and &lt;code&gt;.sync&lt;/code&gt; modifiers.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;.once&lt;/code&gt; および &lt;code&gt;.sync&lt;/code&gt; 修飾子の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="2c8ce2853d843c2c72201a428aaae4467ceec09d" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;abstract: true&lt;/code&gt; option.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;abstract: true&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="2258f58c39858d2874ac267df312bf5774d76c18" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;activate&lt;/code&gt; hook.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;activate&lt;/code&gt; フックの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="0d2dd196d33a6838401706a980c174ba91eb1c6e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;cache: false&lt;/code&gt; option.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;cache: false&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="635b9a1176068b8a0020a01c4f47cb421d064226" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;canActivate&lt;/code&gt; hook.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;canActivate&lt;/code&gt; フックの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="1ef7f740384cd3cfdf159ef6085f2faaac1ec88f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;canDeactivate&lt;/code&gt; hook.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;canDeactivate&lt;/code&gt; フックの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="416c87ed212eefdaa2ddbf02f6a0ba2e74d86959" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;canReuse: false&lt;/code&gt; option.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;canReuse: false&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="ce44d3b81054ffa59cb49fd62f006c1d791e2ab0" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;coerce&lt;/code&gt; option.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;coerce&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="61fdd38d446cfe928998b1181aa744e45596c1c5" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;data&lt;/code&gt; hook.</source>
          <target state="translated">コードフックで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;data&lt;/code&gt; フックの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="eeb9b18e06a447d16bfa196a854b2eb06f05360a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;deactivate&lt;/code&gt; hook.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;deactivate&lt;/code&gt; フックの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="f483517518991a282467c00ae1cad300e136b269" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;debounce&lt;/code&gt; attribute.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;debounce&lt;/code&gt; 属性の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="b65067f3a77b357e086f22629678c364185b2ab2" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;hashbang: false&lt;/code&gt; option.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;hashbang: false&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="8a2e5b8abfbc6295fa11dd1caccde1ae7c3d69af" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;history: true&lt;/code&gt; option.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;history: true&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="452c89b5559555a477ca0eb92f956476ce00d5cd" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;middlewares&lt;/code&gt; option on a store.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、ストアの &lt;code&gt;middlewares&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="6faa58ba44b5eb605740b8397f8693bbaaa6f840" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;root&lt;/code&gt; option.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;root&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="ab45ded99a30a006bddeceb3fd6aa38bb6c3d9c6" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;saveScrollPosition: true&lt;/code&gt; option.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;saveScrollPosition: true&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="6ec2df901f80374c6ff66f398825204e5f18d423" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;subRoutes&lt;/code&gt; option.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;subRoutes&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="7178b2cc5e9e2a36383d9e60b9eea90fb3bcb121" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;suppressTransitionError: true&lt;/code&gt; option.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;suppressTransitionError: true&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="4e988285e061dd6f2c40c32cddfbc676c1aab12a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;transition&lt;/code&gt; attribute.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;transition&lt;/code&gt; 属性の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="c5f2b82da8cac7dc4262de8c7c93d4a46587dbca" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;transition&lt;/code&gt; attribute. During your update, you can transition (pun very much intended) to the new staggering strategy as well.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;transition&lt;/code&gt; 属性の例を見つけます。更新中に、新しい驚異的な戦略に移行することもできます（非常に意図的ですが）。</target>
        </trans-unit>
        <trans-unit id="34922f45eeac604f53b4193f84913c2beb89b350" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;transitionOnLoad: true&lt;/code&gt; option.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;transitionOnLoad: true&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="c9c97a1b14162dd07775888af56118c3a3370301" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;twoWay&lt;/code&gt; option.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;twoWay&lt;/code&gt; オプションの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="cb3445799897bdc7ce3106b11c9b2c1f1d554568" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;v-else&lt;/code&gt; with &lt;code&gt;v-show&lt;/code&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;v-else&lt;/code&gt; と &lt;code&gt;v-show&lt;/code&gt; の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="bccc02e6c6793423ef659db42169cb5afa5716d0" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;v-link-active&lt;/code&gt; directive.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;v-link-active&lt;/code&gt; ディレクティブの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="ea921119a7e1635ac4e5a00b3d8a84491101f3fb" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the &lt;code&gt;v-link&lt;/code&gt; directive.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、 &lt;code&gt;v-link&lt;/code&gt; ディレクティブの例を見つけます。</target>
        </trans-unit>
        <trans-unit id="a825bdc145076ec6a6e4b0c215f030aa3ba79b85" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the `.literal` modifier on a directive.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、ディレクティブの `.literal`修飾子の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="733bb79e129d2dca49869269db0a3698c6f65fa8" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete argument order. Note that if you name your index arguments something unusual like &lt;code&gt;position&lt;/code&gt; or &lt;code&gt;num&lt;/code&gt;, the helper will not flag them.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、廃止された引数の順序の例を見つけます。インデックス引数に &lt;code&gt;position&lt;/code&gt; や &lt;code&gt;num&lt;/code&gt; などの珍しい名前を付けた場合、ヘルパーはフラグを立てないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="da725380e126a62727af458ad28bac7c6524d798" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete argument order. Note that if you name your key arguments something like &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;property&lt;/code&gt;, the helper will not flag them.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、廃止された引数の順序の例を見つけます。キー引数に &lt;code&gt;name&lt;/code&gt; や &lt;code&gt;property&lt;/code&gt; などの名前を付けた場合、ヘルパーはそれらにフラグを立てないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="f1e1035d99ed76f7515df578e692ff719107895a" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete route syntax.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、廃止されたルート構文の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="142bb71333ac86e488c9aacc373010de66e961e1" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete text filters. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、廃止されたテキストフィルターの例を見つけます。いずれかを見逃した場合は、&lt;strong&gt;コンソールエラー&lt;/strong&gt;も表示されます。</target>
        </trans-unit>
        <trans-unit id="397d5ab0302428112127147010f4482ef9051b5e" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the obsolete usage.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、廃止された使用例を見つけます。</target>
        </trans-unit>
        <trans-unit id="c1aa36c4bb555ce2607bb2d08c4631182d133d50" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the old filter syntax. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt;.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、古いフィルター構文の例を見つけます。いずれかを見逃した場合は、&lt;strong&gt;コンソールエラー&lt;/strong&gt;も表示されます。</target>
        </trans-unit>
        <trans-unit id="20564b7f4450c4fa59c4a3ba6fa87121c27fe89f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the the old &lt;code&gt;keyCode&lt;/code&gt; configuration syntax.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、古い &lt;code&gt;keyCode&lt;/code&gt; 構成構文の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="cc0976e79e68e3874825b8d9309f7bc3cf13503f" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of the these param attributes.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、これらのparam属性の例を見つけます。</target>
        </trans-unit>
        <trans-unit id="4a53e2c9b9e1ccea5753bf6c5b26aa93f8d31041" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find examples of these removed variables. If you miss any, you should also see &lt;strong&gt;console errors&lt;/strong&gt; such as: &lt;code&gt;Uncaught ReferenceError: $index is not defined&lt;/code&gt;</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、これらの削除された変数の例を見つけます。いずれかを見逃した場合は、次のような&lt;strong&gt;コンソールエラー&lt;/strong&gt;も表示されます &lt;code&gt;Uncaught ReferenceError: $index is not defined&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b0ae781de5086e5c0e4123dc4514d344522a5237" translate="yes" xml:space="preserve">
          <source>Run the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on your codebase to find one-time bindings.</source>
          <target state="translated">コードベースで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行して、1回限りのバインディングを見つけます。</target>
        </trans-unit>
        <trans-unit id="2c800955474c5ae66271d1f51e3a706afff6e929" translate="yes" xml:space="preserve">
          <source>Run your bundling command with the actual &lt;code&gt;NODE_ENV&lt;/code&gt; environment variable set to &lt;code&gt;&quot;production&quot;&lt;/code&gt;. This tells &lt;code&gt;vueify&lt;/code&gt; to avoid including hot-reload and development related code.</source>
          <target state="translated">実際の &lt;code&gt;NODE_ENV&lt;/code&gt; 環境変数を &lt;code&gt;&quot;production&quot;&lt;/code&gt; に設定してバンドルコマンドを実行します。これは、ホットリロードや開発関連のコードを含めないように &lt;code&gt;vueify&lt;/code&gt; に指示します。</target>
        </trans-unit>
        <trans-unit id="65124f23df07644ee66ed5e04606bd6c7b54318b" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about duplicate slots &lt;code&gt;v-model&lt;/code&gt;.</source>
          <target state="translated">アップグレード後にエンドツーエンドのテストスイートまたはアプリを実行し、スロット &lt;code&gt;v-model&lt;/code&gt; の重複&lt;strong&gt;に関するコンソールの警告&lt;/strong&gt;を探します。</target>
        </trans-unit>
        <trans-unit id="0276baa533bc89d334fafab4aee362813fb56fba" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about inline value attributes with &lt;code&gt;v-model&lt;/code&gt;.</source>
          <target state="translated">アップグレード後にエンドツーエンドのテストスイートまたはアプリを実行し、 &lt;code&gt;v-model&lt;/code&gt; を使用してインライン値属性に関する&lt;strong&gt;コンソール警告&lt;/strong&gt;を探します。</target>
        </trans-unit>
        <trans-unit id="b9168febc3cd9fb510564d5d619d53cfceebc829" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about multiple root elements in a template.</source>
          <target state="translated">アップグレード後にエンドツーエンドのテストスイートまたはアプリを実行し、テンプレート内の複数のルート要素に関する&lt;strong&gt;コンソールの警告&lt;/strong&gt;を探します。</target>
        </trans-unit>
        <trans-unit id="6cd905d20455b18138224bc59c413711a6de22a2" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about prop mutations.</source>
          <target state="translated">アップグレード後にエンドツーエンドのテストスイートまたはアプリを実行し、propの変更&lt;strong&gt;に関するコンソールの警告&lt;/strong&gt;を探します。</target>
        </trans-unit>
        <trans-unit id="7da416f4436591687e3ea5cf9d579fb6711b7dbd" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite or app after upgrading and look for &lt;strong&gt;console warnings&lt;/strong&gt; about the &lt;code&gt;el&lt;/code&gt; option with &lt;code&gt;Vue.extend&lt;/code&gt;.</source>
          <target state="translated">アップグレード後にエンドツーエンドのテストスイートまたはアプリを実行し、 &lt;code&gt;Vue.extend&lt;/code&gt; で &lt;code&gt;el&lt;/code&gt; オプションに関する&lt;strong&gt;コンソール警告&lt;/strong&gt;を探します。</target>
        </trans-unit>
        <trans-unit id="de5aa3b1e8bcd9a2e9b6648cc6da29ebd7c682fa" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite, if you have one. The &lt;strong&gt;failed tests&lt;/strong&gt; should alert to you to any parts of your app that may be affected by this change.</source>
          <target state="translated">エンドツーエンドのテストスイートがある場合は実行します。&lt;strong&gt;失敗したテストでは&lt;/strong&gt;、この変更によって影響を受ける可能性があり、あなたのアプリのいずれかの部分にあなたに警告しなければなりません。</target>
        </trans-unit>
        <trans-unit id="25b0475e8303e55dc27cdda9bbd8ef8c1c492011" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite, if you have one. The &lt;strong&gt;failed tests&lt;/strong&gt; should alert to you to the fact that a watcher was relying on the old behavior.</source>
          <target state="translated">エンドツーエンドのテストスイートがある場合は実行します。&lt;strong&gt;失敗したテストは、&lt;/strong&gt;ウォッチャーが古い動作に依存しているという事実に、あなたに警告しなければなりません。</target>
        </trans-unit>
        <trans-unit id="3925b4e9140324a46bda954fa3ba6a11551d44d8" translate="yes" xml:space="preserve">
          <source>Run your end-to-end test suite, if you have one. The &lt;strong&gt;failed tests&lt;/strong&gt; should alert to you to the fact that props passed to root instances are no longer working.</source>
          <target state="translated">エンドツーエンドのテストスイートがある場合は実行します。&lt;strong&gt;失敗したテストでは&lt;/strong&gt;、ルートインスタンスに渡された小道具は、もはや機能していないという事実のためにあなたに警告しなければなりません。</target>
        </trans-unit>
        <trans-unit id="c7a107bdb49919e8c77ec76a87618731104be368" translate="yes" xml:space="preserve">
          <source>Run your test suite, if you have one. The &lt;strong&gt;failed tests&lt;/strong&gt; should alert to you to any parts of your app that may be affected by this change.</source>
          <target state="translated">テストスイートがある場合は実行します。&lt;strong&gt;失敗したテストでは&lt;/strong&gt;、この変更によって影響を受ける可能性があり、あなたのアプリのいずれかの部分にあなたに警告しなければなりません。</target>
        </trans-unit>
        <trans-unit id="71dbd4c5b94dea2014b421003d9fecaee74046df" translate="yes" xml:space="preserve">
          <source>Runs a function immediately while reactively tracking its dependencies and re-runs it whenever the dependencies are changed.</source>
          <target state="translated">依存関係を反応的に追跡しながら即座に関数を実行し、依存関係が変更されるたびに再実行します。</target>
        </trans-unit>
        <trans-unit id="13285023695c206297d4666f3184c48b775d9ec3" translate="yes" xml:space="preserve">
          <source>Runtime + Compiler vs. Runtime-only</source>
          <target state="translated">ランタイム+コンパイラ vs ランタイムのみ</target>
        </trans-unit>
        <trans-unit id="ce3caf82d6dc4282305777c04d22cb7e32e8739f" translate="yes" xml:space="preserve">
          <source>Runtime Performance</source>
          <target state="translated">ランタイムパフォーマンス</target>
        </trans-unit>
        <trans-unit id="a8885226fbbc6c259bb25a13cec39523402f5449" translate="yes" xml:space="preserve">
          <source>SFC &lt;code&gt;&amp;lt;style scoped&amp;gt;&lt;/code&gt; can now include global rules or rules that target only slotted content (opens new window)</source>
          <target state="translated">SFC &lt;code&gt;&amp;lt;style scoped&amp;gt;&lt;/code&gt; に、グローバルルールまたはスロット付きコンテンツのみを対象とするルールを含めることができるようになりました（新しいウィンドウが開きます）</target>
        </trans-unit>
        <trans-unit id="0ab3eee80056a96ec147159fe704ef0b8dcd1e74" translate="yes" xml:space="preserve">
          <source>Same as &lt;a href=&quot;#slot-scope&quot;&gt;&lt;code&gt;slot-scope&lt;/code&gt;&lt;/a&gt; except that &lt;code&gt;scope&lt;/code&gt; can only be used on &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; elements.</source>
          <target state="translated">&lt;code&gt;scope&lt;/code&gt; が &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; 要素でのみ使用できることを除いて、&lt;a href=&quot;#slot-scope&quot;&gt; &lt;code&gt;slot-scope&lt;/code&gt; と&lt;/a&gt;同じです。</target>
        </trans-unit>
        <trans-unit id="9486d0a483dfe9905cce23330af6d67155a098e5" translate="yes" xml:space="preserve">
          <source>Same rule applies to the event listeners:</source>
          <target state="translated">イベントリスナーにも同じルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="c41f297530a1a4027d4fe5146dc89421c3603b93" translate="yes" xml:space="preserve">
          <source>Sarah Drasner demonstrates this in the demo below, using a combination of timed and interactivity-driven state changes:</source>
          <target state="translated">Sarah Drasner氏は、時間とインタラクティビティ主導の状態変化の組み合わせを使用して、これを下のデモで実演しています。</target>
        </trans-unit>
        <trans-unit id="6744b582ee6941cb3d4f3589a70ab055f52ce106" translate="yes" xml:space="preserve">
          <source>Scaffold via &lt;a href=&quot;https://cli.vuejs.org/&quot;&gt;vue-cli (opens new window)&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://cli.vuejs.org/&quot;&gt;vue-cli&lt;/a&gt;経由の足場（新しいウィンドウを開きます）：</target>
        </trans-unit>
        <trans-unit id="bcb30ff0706f7afb22f9016af8875144481f1797" translate="yes" xml:space="preserve">
          <source>Scaffold via &lt;a href=&quot;https://github.com/vitejs/vite&quot;&gt;Vite (opens new window)&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://github.com/vitejs/vite&quot;&gt;Vite&lt;/a&gt;経由の足場（新しいウィンドウを開きます）：</target>
        </trans-unit>
        <trans-unit id="a29f0256272e79ca91a1c4e608f09a6264397d12" translate="yes" xml:space="preserve">
          <source>Scale</source>
          <target state="translated">Scale</target>
        </trans-unit>
        <trans-unit id="88011a37856972ada6fede54fa2220927bfb5ac0" translate="yes" xml:space="preserve">
          <source>Scaling Down</source>
          <target state="translated">スケールダウン</target>
        </trans-unit>
        <trans-unit id="2d20a53538fb773c0616dc1ef8c4f21c2ceb637d" translate="yes" xml:space="preserve">
          <source>Scaling Up</source>
          <target state="translated">スケールアップ</target>
        </trans-unit>
        <trans-unit id="bf9e81be315e7832d34416457ae7f289aca054dc" translate="yes" xml:space="preserve">
          <source>Scenario Background</source>
          <target state="translated">シナリオの背景</target>
        </trans-unit>
        <trans-unit id="bf1e630e7268556a0635e37341aa31c69f284094" translate="yes" xml:space="preserve">
          <source>Scoped Slots</source>
          <target state="translated">スコープされたスロット</target>
        </trans-unit>
        <trans-unit id="c891d436871bb971da8c2ff8081958bff3ddb19a" translate="yes" xml:space="preserve">
          <source>Scoped Slots with the &lt;code&gt;slot-scope&lt;/code&gt; Attribute</source>
          <target state="translated">&lt;code&gt;slot-scope&lt;/code&gt; 属性を持つスコープスロット</target>
        </trans-unit>
        <trans-unit id="6aa971b69d2fe9a8fec7d58fa039f9aafe0f8da1" translate="yes" xml:space="preserve">
          <source>Scoped slot functions are now guaranteed to return an array of VNodes, unless the return value is invalid, in which case the function will return &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">スコープ付きスロット関数は、戻り値が無効でない限り、VNodeの配列を返すことが保証されて &lt;code&gt;undefined&lt;/code&gt; ます。その場合、関数はundefinedを返します。</target>
        </trans-unit>
        <trans-unit id="3dae2d606c4ba8fd82d37fdbaee4697f3fd4d181" translate="yes" xml:space="preserve">
          <source>Screen Readers</source>
          <target state="translated">スクリーンリーダー</target>
        </trans-unit>
        <trans-unit id="dfa277d957af13fbcf610edac48d6ff9d1d53991" translate="yes" xml:space="preserve">
          <source>Search your codebase for the regex &lt;code&gt;/\w+ in \d+/&lt;/code&gt;. Wherever it appears in a &lt;code&gt;v-for&lt;/code&gt;, check to see if you may be affected.</source>
          <target state="translated">コードベース &lt;code&gt;/\w+ in \d+/&lt;/code&gt; の正規表現/ \ w +を検索します。 &lt;code&gt;v-for&lt;/code&gt; のどこに表示されていても、影響を受けるかどうかを確認してください。</target>
        </trans-unit>
        <trans-unit id="68acc245855d52df2e1bcc59c8f1a0b8e40964eb" translate="yes" xml:space="preserve">
          <source>Searching for repositories using a &lt;code&gt;searchQuery&lt;/code&gt; string</source>
          <target state="translated">&lt;code&gt;searchQuery&lt;/code&gt; 文字列を使用したリポジトリの検索</target>
        </trans-unit>
        <trans-unit id="8c538bd7ea9559c59e12f452d723cec0e8d49975" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;../render-function&quot;&gt;Render Function Guide&lt;/a&gt; for more detailed documentation!</source>
          <target state="translated">詳細なドキュメントについては、&lt;a href=&quot;../render-function&quot;&gt;レンダリング機能ガイド&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="6b2d0248c5dcfa5a79dd94afb4e294298450c401" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://codepen.io/team/Vue/pen/oNXaoKy&quot;&gt;this sandbox (opens new window)&lt;/a&gt; to experiment with the full code, or &lt;a href=&quot;https://codepen.io/team/Vue/pen/oNXapXM&quot;&gt;this version (opens new window)&lt;/a&gt; for an example binding to a component's options object, instead of its registered name.</source>
          <target state="translated">&lt;a href=&quot;https://codepen.io/team/Vue/pen/oNXaoKy&quot;&gt;このサンドボックス（新しいウィンドウを開く）&lt;/a&gt;を参照して完全なコードを試すか、&lt;a href=&quot;https://codepen.io/team/Vue/pen/oNXapXM&quot;&gt;このバージョン（新しいウィンドウを開く）&lt;/a&gt;を参照して、登録名の代わりにコンポーネントのオプションオブジェクトにバインドする例を確認してください。</target>
        </trans-unit>
        <trans-unit id="0d4f1b3e1926d0de28455af2f7b050061aa08a61" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/1Leb7up8/&quot;&gt;this fiddle&lt;/a&gt; for the full code. Note, however, that if you find yourself having to do a lot of setup and cleanup within a single component, the best solution will usually be to create more modular components. In this case, we&amp;rsquo;d recommend creating a reusable &lt;code&gt;&amp;lt;input-datepicker&amp;gt;&lt;/code&gt; component.</source>
          <target state="translated">完全なコードについては、&lt;a href=&quot;https://jsfiddle.net/chrisvfritz/1Leb7up8/&quot;&gt;このフィドル&lt;/a&gt;を参照してください。ただし、1つのコンポーネント内で多くの設定とクリーンアップを行う必要がある場合は、通常、より多くのモジュール式コンポーネントを作成するのが最善の解決策です。この場合、再利用可能な &lt;code&gt;&amp;lt;input-datepicker&amp;gt;&lt;/code&gt; コンポーネントを作成することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="04b10db48b879dd4894715118934c8f16e790244" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/65gLu2b6/&quot;&gt;this fiddle&lt;/a&gt; for the complete code behind the above demo.</source>
          <target state="translated">上記のデモの背後にある完全なコードについては、&lt;a href=&quot;https://jsfiddle.net/chrisvfritz/65gLu2b6/&quot;&gt;このフィドル&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="030b52b1aecbbfd160c5986ee59275d22c9f7672" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/o3nycadu/&quot;&gt;this fiddle&lt;/a&gt; to experiment with the full code, or &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/b2qj69o1/&quot;&gt;this version&lt;/a&gt; for an example binding to a component&amp;rsquo;s options object, instead of its registered name.</source>
          <target state="translated">完全なコードを試してみるには、&lt;a href=&quot;https://jsfiddle.net/chrisvfritz/o3nycadu/&quot;&gt;このフィドル&lt;/a&gt;を参照してください。コンポーネントのオプションオブジェクトへのバインディングの例では、登録されている名前ではなく、&lt;a href=&quot;https://jsfiddle.net/chrisvfritz/b2qj69o1/&quot;&gt;このバージョン&lt;/a&gt;を試してください。</target>
        </trans-unit>
        <trans-unit id="04b37b3a250db02d4b461de0e57827c11b943abe" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;TypeScript compiler options docs (opens new window)&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;TypeScriptコンパイラオプションのドキュメント（新しいウィンドウを開きます）&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="bc6fd808ffb90ac93f1cb9d312e01c08b9a59bf3" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;TypeScript compiler options docs&lt;/a&gt; for more details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://www.typescriptlang.org/docs/handbook/compiler-options.html&quot;&gt;TypeScriptコンパイラオプションのドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="2d8243a2c0e464492c9d563c4f92c56ae3421bcc" translate="yes" xml:space="preserve">
          <source>See also</source>
          <target state="translated">も参照してください。</target>
        </trans-unit>
        <trans-unit id="737f5413856be6cc52d6ede4259c257a64189c06" translate="yes" xml:space="preserve">
          <source>See also: &lt;a href=&quot;reactivity-computed-watchers#effect-flush-timing&quot;&gt;Computed and Watchers&lt;/a&gt;</source>
          <target state="translated">参照：&lt;a href=&quot;reactivity-computed-watchers#effect-flush-timing&quot;&gt;コンピューテッドおよびウォッチャー&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="8f4b188488a5cff189e4cfc9d54ff0931435281a" translate="yes" xml:space="preserve">
          <source>See example &lt;a href=&quot;https://github.com/vuejs/vuex/blob/1.0/docs/en/plugins.md&quot;&gt;the plugins docs&lt;/a&gt; for more info.</source>
          <target state="translated">詳細について&lt;a href=&quot;https://github.com/vuejs/vuex/blob/1.0/docs/en/plugins.md&quot;&gt;は、プラグインのドキュメントの&lt;/a&gt;例を参照してください。</target>
        </trans-unit>
        <trans-unit id="71510889015524eac5f3536f717b3d650abc22d8" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/GRoMqYy&quot;&gt;Form Instructions&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/mlama007/pen/GRoMqYy&quot;&gt;フォームの指示を&lt;/a&gt;（マリアによって&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@ mlama007&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="38c6c4077b07116940196b65ee10eb6481b48b2e" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/JjGrKyY&quot;&gt;Form ARIA describedby&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/mlama007/pen/JjGrKyY&quot;&gt;フォームARIAのdescribedbyのを&lt;/a&gt;（マリアによって&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@ mlama007&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1ab121f1ab888bd6dd1556e0412cd022d04a246d" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/NWxXeqY&quot;&gt;Functional Images&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペン参照&lt;a href=&quot;https://codepen.io/mlama007/pen/NWxXeqY&quot;&gt;機能画像を&lt;/a&gt;（マリアによって&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@ mlama007&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="74082aad4e1b79b4314945b2900e6c0514460336" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/PoZEXoj&quot;&gt;Form Buttons&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/mlama007/pen/PoZEXoj&quot;&gt;フォームのボタンを&lt;/a&gt;（マリアによって&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@ mlama007&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="65beb5a06b509fe12ccff844d1ccee6f7f256d20" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/PoZJzeQ&quot;&gt;Form Placeholder&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/mlama007/pen/PoZJzeQ&quot;&gt;フォームプレースホルダを&lt;/a&gt;（マリアによって&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@ mlama007&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bbb45580197c86bfff0a068e3d94024bb542415a" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/VwepxJa&quot;&gt;Skip to Main&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;CodePenの&lt;/a&gt;Maria（@ mlama007）に&lt;a href=&quot;https://codepen.io&quot;&gt;よる&lt;/a&gt;Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/VwepxJa&quot;&gt;Skip &lt;/a&gt;toMainを参照してください。</target>
        </trans-unit>
        <trans-unit id="177e21235dcab2987f1621e5cfb8461e674d9354" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/YzwpPYZ&quot;&gt;Simple Form&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/mlama007/pen/YzwpPYZ&quot;&gt;簡単なフォームを&lt;/a&gt;（マリアによって&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@ mlama007&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4ea069e0764773ff5c0f3cdac5b433d489e3ef38" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/ZEQXOLP&quot;&gt;Form ARIA labelledby&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/mlama007/pen/ZEQXOLP&quot;&gt;フォームARIAのlabelledbyのを&lt;/a&gt;（マリアによって&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@ mlama007&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="262ac48ac240514164287ba6e66598dea15b5210" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/jOWGqgz&quot;&gt;Form ARIA label&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;CodePenの&lt;/a&gt;Maria（@ mlama007）に&lt;a href=&quot;https://codepen.io&quot;&gt;よるPen &lt;/a&gt;FormARIA&lt;a href=&quot;https://codepen.io/mlama007/pen/jOWGqgz&quot;&gt;ラベルを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="1c6a08b06c8f131152330badb8fe89544a25f229" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/qBbpQwB&quot;&gt;Form Search&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/mlama007/pen/qBbpQwB&quot;&gt;フォーム検索を&lt;/a&gt;（マリアによって&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@ mlama007&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5f05b59cae921893c750d23e8e4776d80aa4dc26" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/mlama007/pen/wvMrGqz&quot;&gt;Form Label&lt;/a&gt; by Maria (&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@mlama007&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/mlama007/pen/wvMrGqz&quot;&gt;フォームラベルを&lt;/a&gt;（マリアによって&lt;a href=&quot;https://codepen.io/mlama007&quot;&gt;@ mlama007&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7410cc167cc599bed638dcca19b6bdc07115f6ff" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/sdras/pen/GRJZddR&quot;&gt;Second Reactivity with Proxies in Vue 3 Explainer&lt;/a&gt; by Sarah Drasner (&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/sdras/pen/GRJZddR&quot;&gt;Vueの3、説明者におけるプロキシと第二の反応性&lt;/a&gt;サラDrasnerによって（&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdrasを&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dfc6e85aa5a5401fe93fb9ccc2c8c8d97926de1b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/sdras/pen/RwwQapa&quot;&gt;How does the Virtual DOM work?&lt;/a&gt; by Sarah Drasner (&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/sdras/pen/RwwQapa&quot;&gt;仮想DOMはどのように機能しますか？&lt;/a&gt;CodePenのSarahDrasner（&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;）に&lt;a href=&quot;https://codepen.io&quot;&gt;よる&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="11f3c60bc9945fca27e5e226930b2bddd0120ec6" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/sdras/pen/YZBGNp&quot;&gt;Vue-controlled Wall-E&lt;/a&gt; by Sarah Drasner (&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">CodePenのSarahDrasner（&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;）に&lt;a href=&quot;https://codepen.io&quot;&gt;よるPenVue&lt;/a&gt;&lt;a href=&quot;https://codepen.io/sdras/pen/YZBGNp&quot;&gt;制御のWall-Eを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b7cdc723bd45704f63d3132765b8411da257e1bf" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/sdras/pen/YZBGNp/&quot;&gt;Vue-controlled Wall-E&lt;/a&gt; by Sarah Drasner (&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">CodePenでSarah Drasner（&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;）に&lt;a href=&quot;https://codepen.io&quot;&gt;よる&lt;/a&gt; Pen &lt;a href=&quot;https://codepen.io/sdras/pen/YZBGNp/&quot;&gt;Vue制御のWall-Eを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c6a8b36e9b7c0da5114771bb486f9a7a7042b0bb" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/sdras/pen/zYYzjBg&quot;&gt;Proxies and Vue's Reactivity Explained Visually&lt;/a&gt; by Sarah Drasner (&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/sdras/pen/zYYzjBg&quot;&gt;プロキシとのVueの反応性は、視覚の説明&lt;/a&gt;サラDrasner（で&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1cc166302e24ec3725dd68083514281943f1b4ff" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/sdras/pen/zxJWBJ&quot;&gt;Bouncing Ball Demo&lt;/a&gt; by Sarah Drasner (&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/sdras/pen/zxJWBJ&quot;&gt;弾むボールのデモを&lt;/a&gt;サラDrasner（で&lt;a href=&quot;https://codepen.io/sdras&quot;&gt;@sdras&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5d186cd1022be8718e9ceda1f954d3973247f611" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/049211673d3c185fde6b6eceb8baebec&quot;&gt;Transition-group example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/049211673d3c185fde6b6eceb8baebec&quot;&gt;トランジション・グループの例を&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d1523df0fe8ebf93022b7f2a5f6d18cfa497851b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/0dfa7869450ef43d6f7bd99022bc53e2&quot;&gt;Different Enter and Leave Transitions&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/teamVue/pen/0dfa7869450ef43d6f7bd99022bc53e2&quot;&gt;別のトランジションを出入り&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e752c1d184dfe92054f0f06db9e81939624e6c28" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/22903bc3b53eb5b7817378ecb985ce96&quot;&gt;Transitioning State 1&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照&lt;a href=&quot;https://codepen.io/teamVue/pen/22903bc3b53eb5b7817378ecb985ce96&quot;&gt;の状態遷移1を&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4a7528d954fd4369e15b8fb0b0872949a4941c65" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/3466d06fb252a53c5bc0a0edb0f1588a&quot;&gt;Simple Transition Component&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/teamVue/pen/3466d06fb252a53c5bc0a0edb0f1588a&quot;&gt;簡単な移行コンポーネント&lt;/a&gt;のVueによって（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePenを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ae07441f77f0670c9fc58c81f531b5d57861ff18" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/373b4429eb5769ae2e6d097fd954fd08&quot;&gt;Transition-group example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/373b4429eb5769ae2e6d097fd954fd08&quot;&gt;トランジション・グループの例を&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e040d30af8393ee1633f73d93d30350748fde86d" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/68ce1b8c41d0a6e71ff58df80fd85ae5&quot;&gt;JavaScript Hooks Transition&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/teamVue/pen/68ce1b8c41d0a6e71ff58df80fd85ae5&quot;&gt;JavaScriptのフック移行&lt;/a&gt;ヴューによって（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vueを&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e2bd9cd1463119b9c43dcd1ba74aa3cb1f130acf" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/76e344bf057bd58b5936bba260b787a8&quot;&gt;Transition Modes Flip Cards&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/76e344bf057bd58b5936bba260b787a8&quot;&gt;トランジションモードフリップカードを&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1f107983a293ed9006d9ef2812af86756ca7c64b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/8627c50c5514752acd73d19f5e33a781&quot;&gt;CSS Animation Transition Example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/8627c50c5514752acd73d19f5e33a781&quot;&gt;CSSアニメーションの遷移例を&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a260753e85fa8466282693387b87f7cc76104425" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/996a9665131e7902327d350ca8a655ac&quot;&gt;Transition Ease Example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/996a9665131e7902327d350ca8a655ac&quot;&gt;トランジションは例イーズ&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6f11331478125598a661c13bac28e7c854b496e8" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/GRJGqXp&quot;&gt;Watch basic example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;CodePenの&lt;/a&gt;Vue（@Vue）に&lt;a href=&quot;https://codepen.io&quot;&gt;よる&lt;/a&gt;PenWatchの&lt;a href=&quot;https://codepen.io/teamVue/pen/GRJGqXp&quot;&gt;基本的な例を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="812653b1e4bc4946c1782ddf82f2d05c7e033000" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/GRoPPrM&quot;&gt;Multiple v-models&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;CodePenの&lt;/a&gt;Vue（@Vue）に&lt;a href=&quot;https://codepen.io&quot;&gt;よる&lt;/a&gt;Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/GRoPPrM&quot;&gt;Multiplev-modelsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="9f145a95ae613c69dd55a754b38bcfa605c12d2b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/JjGezQY&quot;&gt;Interpolation with style bindings&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/teamVue/pen/JjGezQY&quot;&gt;スタイルバインディングで補間を&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f0c541290f7e397b76469cdb365d83edf60293da" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/JjdxaJW&quot;&gt;Custom directives: basic example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/JjdxaJW&quot;&gt;基本的な例：カスタムディレクティブ&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;）に&lt;a href=&quot;https://codepen.io&quot;&gt;CodePenを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="83e9a90a9be54455c3883de0cd921fd94beaccda" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/KKpGydL&quot;&gt;Handling forms: select&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/KKpGydL&quot;&gt;フォームの処理：選択&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6a2254bb58d69f1e552b54292f05a53c4721df34" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/KKpGyrp&quot;&gt;Component basics: emitting events&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペン&lt;a href=&quot;https://codepen.io/teamVue/pen/KKpGyrp&quot;&gt;コンポーネントの基本：&lt;/a&gt;&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;CodePenの&lt;/a&gt;Vue（@Vue）によるイベントの発行を参照して&lt;a href=&quot;https://codepen.io&quot;&gt;ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a282329decf75725d04fbec7c3ad2cbe3612d84c" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/KKpRVvJ&quot;&gt;Attribute dynamic binding&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペン参照&lt;a href=&quot;https://codepen.io/teamVue/pen/KKpRVvJ&quot;&gt;バインディング属性の動的&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePenを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e2b6f24ac50f9136ee96a3d776af94f047b327e7" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/MWwPEMM&quot;&gt;Handling forms: radiobutton&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/MWwPEMM&quot;&gt;ラジオボタン：フォームの取り扱い&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6955c24692a25cd5fc2b19407d34dbb402befbb1" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/NWqLjNY&quot;&gt;v-for with a range&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/teamVue/pen/NWqLjNY&quot;&gt;V-のための範囲で&lt;/a&gt;のVue（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePenを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e023be1303468883f162c0e48e66e7703e8f36a7" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/NWqLjqy&quot;&gt;v-for with Object&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/teamVue/pen/NWqLjqy&quot;&gt;V-のためのオブジェクトと&lt;/a&gt;のVue（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8a9b92c12228b760abf63536d9cd189e30dd1b50" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/NWqzrjr&quot;&gt;Computed basic example&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/NWqzrjr&quot;&gt;コンピュー基本的な例&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePenを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="39e43b77007c2dacebd79974e3b87520b56fa278" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/PoqyJVE&quot;&gt;Handling forms: checkbox&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/PoqyJVE&quot;&gt;チェックボックス：フォームの取り扱い&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="291df14db0a3ff8f4300732d15f9ac8892bdd706" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/PoqyOaX&quot;&gt;Component basics: passing props&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペン&lt;a href=&quot;https://codepen.io/teamVue/pen/PoqyOaX&quot;&gt;コンポーネントの基本を&lt;/a&gt;参照してください：&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;CodePenの&lt;/a&gt;Vue（@Vue）による小道具の&lt;a href=&quot;https://codepen.io&quot;&gt;受け渡し&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="75fdf0a890d4ff84c05ca2af572a0d0bd7d47a1e" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/Rwrqzpr&quot;&gt;Transition Modes Button Problem&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/Rwrqzpr&quot;&gt;トランジションモードボタン問題&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePenを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="98e56da97c87950c5a1a181af74825c8135cfd29" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/VwLGbwa&quot;&gt;v-for with Array&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/teamVue/pen/VwLGbwa&quot;&gt;V-のためのアレイと&lt;/a&gt;のVue（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1661150e6ac3142be9536c236a90d8cad370998b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/VwLJQvP&quot;&gt;Dynamic components: with keep-alive&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペン&lt;a href=&quot;https://codepen.io/teamVue/pen/VwLJQvP&quot;&gt;ダイナミックコンポーネント：&lt;/a&gt;&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;CodePenの&lt;/a&gt;Vue（@Vue）に&lt;a href=&quot;https://codepen.io&quot;&gt;よる&lt;/a&gt;keep-aliveを参照してください。</target>
        </trans-unit>
        <trans-unit id="d340825b1b570c6935caf72e6173f6e13bcf8cfb" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/VwLxeEz&quot;&gt;Intro-Components-1&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;CodePenの&lt;/a&gt;Vue（@Vue）に&lt;a href=&quot;https://codepen.io&quot;&gt;よる&lt;/a&gt;PenIntro &lt;a href=&quot;https://codepen.io/teamVue/pen/VwLxeEz&quot;&gt;-Components-1を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="563d1d295f2c11776f1cdbc3104622b0a286b9b6" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/WNvgjda&quot;&gt;Event handling: with an inline handler&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/WNvgjda&quot;&gt;イベント処理を：インラインハンドラで&lt;/a&gt;のVue（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8d681176d3b70b359069ee53c58bbc0e7655b4ea" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/WNwVxZw&quot;&gt;Transitioning between components&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/WNwVxZw&quot;&gt;コンポーネント間の移行を&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="307c1ff749163fd8436a681b3e889e633b2b391c" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/YzXgGmv&quot;&gt;Custom directives: dynamic arguments&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/YzXgGmv&quot;&gt;ダイナミックな引数：カスタムディレクティブ&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePenを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="513a5a90b54b51c5692e0aee3c48fe5b9c6de0b2" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/ZEQmdvq&quot;&gt;Transition Modes Button Problem- solved&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/teamVue/pen/ZEQmdvq&quot;&gt;Problem-が解決トランジションモードボタン&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePenを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b196620d00f5896efb2ca3ce1c8dfdbb3c4f1900" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/a8e00648d4df6baa1b19fb6c31c8d17e&quot;&gt;Updating SVG&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/teamVue/pen/a8e00648d4df6baa1b19fb6c31c8d17e&quot;&gt;SVGの更新&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c208a68e3d1f255db4e35f404e189a60f904a13b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/abORVEJ&quot;&gt;Component basics&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/abORVEJ&quot;&gt;コンポーネントの基本を&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f5595d6d7e69787fd5630e93b1afe06c4419d07c" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/abORVZm&quot;&gt;Handling forms: select with dynamic options&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/teamVue/pen/abORVZm&quot;&gt;フォームの取り扱い：動的なオプションを選択&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="dd4470c15b33fcfc7767aa97dd2d89af0a169238" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/abOaWdo&quot;&gt;v-for with Object key and index&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/teamVue/pen/abOaWdo&quot;&gt;V-のオブジェクトキーとインデックスと&lt;/a&gt;のVue（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePenを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a731992b15fef7493037d3445b45d7226d4bff98" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/abOaWpz&quot;&gt;v-for with components&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">参照してください。ペン&lt;a href=&quot;https://codepen.io/teamVue/pen/abOaWpz&quot;&gt;V-のためのコンポーネントと&lt;/a&gt;のVue（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f8813b72fad30d04fc1b31cc73693fcc17f8beee" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/abdQgLr&quot;&gt;Transition Modes Button Problem- positioning&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/abdQgLr&quot;&gt;トランジションモードボタンProblem-位置決め&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePenを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e61105b75163799bdc20d7f7945cea1346ffd23e" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/bGdmoyj&quot;&gt;Handling forms: multiple checkboxes&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/bGdmoyj&quot;&gt;複数のチェックボックス：フォームの取り扱い&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="54c389b70c42f1062891ea6eb7228ca43e484564" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/c2fc5107bd3025ceadea049b3ee44ec0&quot;&gt;Staggered Lists&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/teamVue/pen/c2fc5107bd3025ceadea049b3ee44ec0&quot;&gt;千鳥リストを&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="13828cb9610cdab460c9a0a3a7e453b178d6f673" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/dyoeGjW&quot;&gt;Event handling&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/dyoeGjW&quot;&gt;イベント処理&lt;/a&gt;のVue（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f2c3ad7c5e42df49af96a7e47bd99e414683bd39" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/e1cea580e91d6952eb0ae17bfb7c379d&quot;&gt;Transition List&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/e1cea580e91d6952eb0ae17bfb7c379d&quot;&gt;トランジション一覧を&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="147d0375cd405af2f5388e0c93f7659ef234e30b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/e9ef8ac7e32e0d0337e03d20949b4d17&quot;&gt;State Transition Components&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/e9ef8ac7e32e0d0337e03d20949b4d17&quot;&gt;状態遷移コンポーネントを&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="31cdae996d79388b6aff11270d995e9a90415a5d" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/eYNPEqj&quot;&gt;Handling forms: basic v-model&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/eYNPEqj&quot;&gt;基本的なV-モデル：フォームの取り扱い&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vueを&lt;/a&gt;）上&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="88c732a959e13b52b9ac4a75b867fe321701dd75" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/ff45b91caf7a98c8c9077ad8ab539260&quot;&gt;Create animation with a class&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンは、参照&lt;a href=&quot;https://codepen.io/teamVue/pen/ff45b91caf7a98c8c9077ad8ab539260&quot;&gt;クラスでアニメーションを作成します&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="acc98e3fedf70758f085bc91a52cedce214d4727" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/gOPNvjR&quot;&gt;Vue 3 Teleport&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/gOPNvjR&quot;&gt;Vueの3テレポートを&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ab510a161a94bbad39a6766795b3241daa9d5035" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/gOpBXPz&quot;&gt;Handling forms: select bound to array&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/gOpBXPz&quot;&gt;取扱いフォームを：配列に結合された選択&lt;/a&gt;のVue（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d61ebc8def97215bc4e309d7f07ed2d158d12275" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/jOPeaob&quot;&gt;Component basics: slots&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;CodePen&lt;/a&gt;のペン&lt;a href=&quot;https://codepen.io/teamVue/pen/jOPeaob&quot;&gt;コンポーネントの基本：&lt;/a&gt; Vueによるスロット（@Vue）を参照して&lt;a href=&quot;https://codepen.io&quot;&gt;ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e28edf61e14e998b4396f5bd5f49dbfe4cce5f07" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/jOPjZOe&quot;&gt;Dynamic components: without keep-alive&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/jOPjZOe&quot;&gt;動的コンポーネントを：キープアライブなし&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;）に&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="df1d37723d6b844dc3dac6c81884f0170d687c3f" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/jOPvmaX&quot;&gt;Event handling: with a method&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/jOPvmaX&quot;&gt;イベント処理を：メソッドで&lt;/a&gt;のVue（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6ce0a24d580f1e1b3c0d8ed82e5f3653e8edb9f8" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/mdJLVXq&quot;&gt;List rendering&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/mdJLVXq&quot;&gt;リストがレンダリング&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d7aec8f97907244f1737ccc1d6adbcdb70f7bdd1" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/oNXaoKy&quot;&gt;Component basics: dynamic components&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/oNXaoKy&quot;&gt;動的コンポーネント：コンポーネントの基本&lt;/a&gt;ヴューによって（&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vueを&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1973c424486fb8621604fd12c8238f057bf3c33e" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/oNXdbpB&quot;&gt;Conditional rendering&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/oNXdbpB&quot;&gt;条件付きでレンダリング&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0ea234d1f2b7b35b6bb51409cc2f37f3321ac07d" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/poJOPjx&quot;&gt;v-for with Object and key&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/teamVue/pen/poJOPjx&quot;&gt;V-のためのオブジェクトおよびキーで&lt;/a&gt;のVue（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePenを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="685e32ad68c213b265949ed3859900e53acf3e03" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/poJVgZm&quot;&gt;Two-way binding&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/poJVgZm&quot;&gt;双方向バインディング&lt;/a&gt;のVue（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c29b3965f3277fc30dbe11e5f3c78d00fedd15f1" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/rNOaZpj&quot;&gt;Custom directives: dynamic arguments + dynamic binding&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/teamVue/pen/rNOaZpj&quot;&gt;カスタムディレクティブを：動的バインディングの引数+ダイナミック&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="81008da2a748e2b724bf234ed2da740fdaf4215b" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/rNVqYvM&quot;&gt;Component basics: reusing components&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください。&lt;a href=&quot;https://codepen.io/teamVue/pen/rNVqYvM&quot;&gt;コンポーネントの基本：コンポーネントを再利用する&lt;/a&gt;のVue（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="86b3c084df61e58700858fca20a352840ea4c4ab" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/wvaEdBP&quot;&gt;v-for with Array and index&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/teamVue/pen/wvaEdBP&quot;&gt;V-のための配列とインデックスを持つ&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePenを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bfbc217a5395010a5c11fe2109b0a9d9f207c699" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/xxGadPZ&quot;&gt;Event handling: basic&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;CodePen&lt;/a&gt;のペン&lt;a href=&quot;https://codepen.io/teamVue/pen/xxGadPZ&quot;&gt;イベント処理：基本的な&lt;/a&gt;Vue（@Vue）を参照して&lt;a href=&quot;https://codepen.io&quot;&gt;ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d520109caefc0a15b146d81457800d2ba4892068" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/xxGyXaG&quot;&gt;Handling forms: textarea&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;CodePen&lt;/a&gt;のペン&lt;a href=&quot;https://codepen.io/teamVue/pen/xxGyXaG&quot;&gt;処理フォーム：&lt;/a&gt; Vueに&lt;a href=&quot;https://codepen.io&quot;&gt;よるtextarea&lt;/a&gt;（@Vue）を参照してください。</target>
        </trans-unit>
        <trans-unit id="f7e8d26c9dcbd0652f405c01c06cd0d07dab2e26" translate="yes" xml:space="preserve">
          <source>See the Pen &lt;a href=&quot;https://codepen.io/teamVue/pen/yLNEJJM&quot;&gt;Rendering v-html&lt;/a&gt; by Vue (&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.</source>
          <target state="translated">ペンを参照してください&lt;a href=&quot;https://codepen.io/teamVue/pen/yLNEJJM&quot;&gt;レンダリングV-HTML&lt;/a&gt;ヴュー（で&lt;a href=&quot;https://codepen.io/Vue&quot;&gt;@Vue&lt;/a&gt;上）&lt;a href=&quot;https://codepen.io&quot;&gt;CodePenを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8598222918d3c6e513d63060cf55e2971ded729a" translate="yes" xml:space="preserve">
          <source>Select</source>
          <target state="translated">Select</target>
        </trans-unit>
        <trans-unit id="d84be9de2f9e35e379e0e4f6e0bb2340cf1b2d0b" translate="yes" xml:space="preserve">
          <source>Select Options</source>
          <target state="translated">オプションを選択</target>
        </trans-unit>
        <trans-unit id="33e3b8ff7914aff97145e0add0103e5154bdde21" translate="yes" xml:space="preserve">
          <source>Self-closing components</source>
          <target state="translated">自己閉鎖の部品</target>
        </trans-unit>
        <trans-unit id="8aa1710830cfa45dfe404022342d5aade64a9767" translate="yes" xml:space="preserve">
          <source>Self-closing components &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">自動閉鎖コンポーネントを&lt;sup&gt;強くお勧めします&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="fe03c3515833357d89e7094df960e757cae3bc1d" translate="yes" xml:space="preserve">
          <source>Semantics</source>
          <target state="translated">Semantics</target>
        </trans-unit>
        <trans-unit id="01fe9a20a8fdeb0f312fdcea1363c6a939cf772b" translate="yes" xml:space="preserve">
          <source>Server-Side Rendering</source>
          <target state="translated">サーバーサイドレンダリング</target>
        </trans-unit>
        <trans-unit id="d986e7075907e08286bd92c14ff694e5215b1ede" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;false&lt;/code&gt; to prevent the production tip on Vue startup.</source>
          <target state="translated">これを &lt;code&gt;false&lt;/code&gt; に設定すると、Vueの起動時に本番のヒントが表示されなくなります。</target>
        </trans-unit>
        <trans-unit id="e81a9046abdbc87c3ced75127dd3291c76c28691" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;true&lt;/code&gt; to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark&quot;&gt;performance.mark (opens new window)&lt;/a&gt; API.</source>
          <target state="translated">これを &lt;code&gt;true&lt;/code&gt; に設定すると、ブラウザーのdevtoolパフォーマンス/タイムラインパネルでコンポーネントの初期化、コンパイル、レンダリング、およびパッチのパフォーマンストレースが有効になります。開発モードおよび&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark&quot;&gt;performance.mark（新しいウィンドウを開く）&lt;/a&gt; APIをサポートするブラウザーでのみ機能します。</target>
        </trans-unit>
        <trans-unit id="0322b76a288cd27bf5d650f3c073fe32426bc786" translate="yes" xml:space="preserve">
          <source>Set this to &lt;code&gt;true&lt;/code&gt; to enable component init, compile, render and patch performance tracing in the browser devtool performance/timeline panel. Only works in development mode and in browsers that support the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark&quot;&gt;performance.mark&lt;/a&gt; API.</source>
          <target state="translated">これを &lt;code&gt;true&lt;/code&gt; に設定すると、ブラウザーのdevtoolパフォーマンス/タイムラインパネルでコンポーネントの初期化、コンパイル、レンダリング、パッチのパフォーマンストレースが有効になります。開発モードで、および&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark&quot;&gt;performance.mark&lt;/a&gt; API をサポートするブラウザーでのみ機能します。</target>
        </trans-unit>
        <trans-unit id="d9dc93485e941bf6df4cf07ea75a67473b1fe1d9" translate="yes" xml:space="preserve">
          <source>Sets a value that can be injected into all components within the application. Components should use &lt;code&gt;inject&lt;/code&gt; to receive the provided values.</source>
          <target state="translated">アプリケーション内のすべてのコンポーネントに注入できる値を設定します。コンポーネントは、提供された値を受け取るために &lt;code&gt;inject&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e98421ef2cef7c53ec071c0cc18e5534c6e06824" translate="yes" xml:space="preserve">
          <source>Sets the delimiters used for text interpolation within the template.</source>
          <target state="translated">テンプレート内のテキスト補間に使用するデリミタを設定します。</target>
        </trans-unit>
        <trans-unit id="cdd7bb2816b7a8f88bce0e47be39943bc369516b" translate="yes" xml:space="preserve">
          <source>Setup</source>
          <target state="translated">Setup</target>
        </trans-unit>
        <trans-unit id="97f2f59947f62c014c5d7c2a4de9191db27303ae" translate="yes" xml:space="preserve">
          <source>Share (and Build) Your Experience</source>
          <target state="translated">あなたの経験を共有する(構築する)には</target>
        </trans-unit>
        <trans-unit id="e3073223103db18e5df2f841e3d175c874b744cb" translate="yes" xml:space="preserve">
          <source>Share Configurations Among Apps</source>
          <target state="translated">アプリ間で設定を共有する</target>
        </trans-unit>
        <trans-unit id="cfbd8f27db2ca369a38d5de5d2cc30c4b2563623" translate="yes" xml:space="preserve">
          <source>Shared Behavior with &lt;code&gt;watchEffect&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;watchEffect&lt;/code&gt; との共有動作</target>
        </trans-unit>
        <trans-unit id="78ac938787ec8cb8d68c0f35d5c1f36144b88b3a" translate="yes" xml:space="preserve">
          <source>Shares the same runtime compilation, dependency inlining and hard-coded prod/dev behavior with the global build.</source>
          <target state="translated">グローバルビルドと同じランタイムコンパイル、依存性インライン化、ハードコードされたprod/devの動作を共有しています。</target>
        </trans-unit>
        <trans-unit id="89dd25c3e7bb9f776951ef9ad74e60a7d6dd05bb" translate="yes" xml:space="preserve">
          <source>Shorthands</source>
          <target state="translated">Shorthands</target>
        </trans-unit>
        <trans-unit id="1ae7276e79db945fd551dc9db134399c32bb6984" translate="yes" xml:space="preserve">
          <source>Should either be updated to use an inline expression:</source>
          <target state="translated">インライン式を使用するように更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="2d9ab84ebf3f88c612650ea68112310ebd01fe56" translate="yes" xml:space="preserve">
          <source>Side Effect Invalidation</source>
          <target state="translated">副作用無効</target>
        </trans-unit>
        <trans-unit id="b0a3536bb7788ee14bd41892adba577744a1012d" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;$root&lt;/code&gt;, the &lt;code&gt;$parent&lt;/code&gt; property can be used to access the parent instance from a child. This can be tempting to reach for as a lazy alternative to passing data with a prop.</source>
          <target state="translated">&lt;code&gt;$root&lt;/code&gt; と同様に、 &lt;code&gt;$parent&lt;/code&gt; プロパティを使用して、子から親インスタンスにアクセスできます。これは、小道具を使用してデータを渡すことの遅延代替手段として到達するのが魅力的な場合があります。</target>
        </trans-unit>
        <trans-unit id="95ca1c1b0debe3ad51491e220a96675c9c705faf" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;ref&lt;/code&gt; and &lt;code&gt;watch&lt;/code&gt;, computed properties can also be created outside of a Vue component with the &lt;code&gt;computed&lt;/code&gt; function imported from Vue. Let&amp;rsquo;s get back to our counter example:</source>
          <target state="translated">&lt;code&gt;ref&lt;/code&gt; や &lt;code&gt;watch&lt;/code&gt; と同様に、計算されたプロパティは、Vueからインポートされた &lt;code&gt;computed&lt;/code&gt; 関数を使用してVueコンポーネントの外部に作成することもできます。反例に戻りましょう：</target>
        </trans-unit>
        <trans-unit id="dadac4906f4bc6e4a81d9058bdcbf1bbcb397f71" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;v-else&lt;/code&gt;, a &lt;code&gt;v-else-if&lt;/code&gt; element must immediately follow a &lt;code&gt;v-if&lt;/code&gt; or a &lt;code&gt;v-else-if&lt;/code&gt; element.</source>
          <target state="translated">&lt;code&gt;v-else&lt;/code&gt; と同様に、 &lt;code&gt;v-else-if&lt;/code&gt; 要素は &lt;code&gt;v-if&lt;/code&gt; または &lt;code&gt;v-else-if&lt;/code&gt; 要素の直後に続く必要があります。</target>
        </trans-unit>
        <trans-unit id="af9b7b6d2657eb7de92b424e723e1ce34e27dd45" translate="yes" xml:space="preserve">
          <source>Similar to &lt;code&gt;v-on&lt;/code&gt; and &lt;code&gt;v-bind&lt;/code&gt;, &lt;code&gt;v-slot&lt;/code&gt; also has a shorthand, replacing everything before the argument (&lt;code&gt;v-slot:&lt;/code&gt;) with the special symbol &lt;code&gt;#&lt;/code&gt;. For example, &lt;code&gt;v-slot:header&lt;/code&gt; can be rewritten as &lt;code&gt;#header&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;v-on&lt;/code&gt; および &lt;code&gt;v-bind&lt;/code&gt; と同様に、 &lt;code&gt;v-slot&lt;/code&gt; にも省略形があり、引数（ &lt;code&gt;v-slot:&lt;/code&gt; ：）の前のすべてを特殊記号 &lt;code&gt;#&lt;/code&gt; に置き換えます。たとえば、 &lt;code&gt;v-slot:header&lt;/code&gt; は &lt;code&gt;#header&lt;/code&gt; に書き換えることができます。</target>
        </trans-unit>
        <trans-unit id="110921f9f16f79ec9020d42a774f85de76c9358e" translate="yes" xml:space="preserve">
          <source>Similar to prop defaults, you need to use a factory function for non primitive values:</source>
          <target state="translated">propのデフォルトと同様に、プリミティブではない値に対してファクトリー関数を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="51a30c42e13e62448e2b08eba72508a02146467b" translate="yes" xml:space="preserve">
          <source>Similar to prop defaults, you need to use a factory function for non-primitive values:</source>
          <target state="translated">propのデフォルトと同様に、プリミティブではない値に対してファクトリー関数を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="68d88f3a27a981b0bc360cba21e587b9da4f4b86" translate="yes" xml:space="preserve">
          <source>Similar to prop type validation, an emitted event can be validated if it is defined with the Object syntax instead of the array syntax.</source>
          <target state="translated">プロップ型の検証と同様に、配列構文ではなくオブジェクト構文で定義されている場合、放出されたイベントを検証することができます。</target>
        </trans-unit>
        <trans-unit id="fd10ed1a03d7983440069e31d0996e6814b92875" translate="yes" xml:space="preserve">
          <source>Similar to props, the events that the component emits can now be defined with the &lt;code&gt;emits&lt;/code&gt; option:</source>
          <target state="translated">小道具と同様に、コンポーネントが放出するイベントは、 &lt;code&gt;emits&lt;/code&gt; オプションで定義できるようになりました。</target>
        </trans-unit>
        <trans-unit id="3115d0b13d887f54dba012634384e7c25cfdf659" translate="yes" xml:space="preserve">
          <source>Similar to template &lt;code&gt;v-if&lt;/code&gt;, you can also use a &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag with &lt;code&gt;v-for&lt;/code&gt; to render a block of multiple elements. For example:</source>
          <target state="translated">テンプレートと同様に &lt;code&gt;v-if&lt;/code&gt; 、あなたも使用することができます &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; とタグを &lt;code&gt;v-for&lt;/code&gt; 複数の要素のブロックをレンダリングします。例えば：</target>
        </trans-unit>
        <trans-unit id="6d2a01a3e994e3545ec387f3a221d8a8ec074723" translate="yes" xml:space="preserve">
          <source>Similar to using the &lt;code&gt;provide&lt;/code&gt; option in a 2.x root instance, a Vue 3 app instance can also provide dependencies that can be injected by any component inside the app:</source>
          <target state="translated">2.xルートインスタンスで &lt;code&gt;provide&lt;/code&gt; オプションを使用するのと同様に、Vue 3アプリインスタンスは、アプリ内の任意のコンポーネントによって注入できる依存関係を提供することもできます。</target>
        </trans-unit>
        <trans-unit id="1fb5cbad8a164078c5eb5948eac4711466be0daa" translate="yes" xml:space="preserve">
          <source>Similarly, if the value passed to &lt;code&gt;is&lt;/code&gt; is a component options object then there's no need to resolve anything, it can be passed directly as the first argument of &lt;code&gt;h&lt;/code&gt;.</source>
          <target state="translated">渡された値があれば同様に、 &lt;code&gt;is&lt;/code&gt; コンポーネントのオプションは、その後解決は何もする必要はありませんオブジェクトです、それは最初の引数として直接渡すことができる &lt;code&gt;h&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9d6a6b84031ab7ac575faa5ec72d230121975c66" translate="yes" xml:space="preserve">
          <source>Similarly, this is how a global directive is declared:</source>
          <target state="translated">同様に、グローバルディレクティブはこのように宣言されています。</target>
        </trans-unit>
        <trans-unit id="cc1df6ad12b7801df462ec59203348775829bbf4" translate="yes" xml:space="preserve">
          <source>Similarly, when using &lt;code&gt;&amp;lt;template v-for&amp;gt;&lt;/code&gt; with a child that uses &lt;code&gt;v-if&lt;/code&gt;, the &lt;code&gt;key&lt;/code&gt; should be moved up to the &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag.</source>
          <target state="translated">同様に、 &lt;code&gt;v-if&lt;/code&gt; を使用する子で &lt;code&gt;&amp;lt;template v-for&amp;gt;&lt;/code&gt; を使用する場合は、 &lt;code&gt;key&lt;/code&gt; を &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; タグに移動する必要があります。</target>
        </trans-unit>
        <trans-unit id="9032b6dd131e5bdf77e7f1e8c9ad6ef9e98b4db4" translate="yes" xml:space="preserve">
          <source>Similarly, you can use dynamic arguments to bind a handler to a dynamic event name:</source>
          <target state="translated">同様に、動的な引数を使用して、ハンドラを動的なイベント名にバインドすることができます。</target>
        </trans-unit>
        <trans-unit id="e756f11c70f78a0ba1866d4795579c59fa6d1833" translate="yes" xml:space="preserve">
          <source>Simple Assertions</source>
          <target state="translated">単純なアサーション</target>
        </trans-unit>
        <trans-unit id="bbba1d068bf49ca0e64f1e344f51043367c2266d" translate="yes" xml:space="preserve">
          <source>Simple Routing From Scratch</source>
          <target state="translated">スクラッチからのシンプルなルーティング</target>
        </trans-unit>
        <trans-unit id="5356eef37f9b286d685d6fb57d645ff611f0a298" translate="yes" xml:space="preserve">
          <source>Simple Routing from Scratch</source>
          <target state="translated">スクラッチからのシンプルなルーティング</target>
        </trans-unit>
        <trans-unit id="4e794aae53f27e868a697d7573dd5ec04e937e2a" translate="yes" xml:space="preserve">
          <source>Simple State Management from Scratch</source>
          <target state="translated">スクラッチからのシンプルな状態管理</target>
        </trans-unit>
        <trans-unit id="7a423acd4331de7d207764fc94ba09543c17ef88" translate="yes" xml:space="preserve">
          <source>Simple computed properties</source>
          <target state="translated">単純計算されたプロパティ</target>
        </trans-unit>
        <trans-unit id="28fbbfbd1e3c5e7641094f470de044776bb5ad02" translate="yes" xml:space="preserve">
          <source>Simple computed properties &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">単純に計算されたプロパティを&lt;sup&gt;強く推奨&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="37761f78a8d655b3953b071e198e22dcd5a02587" translate="yes" xml:space="preserve">
          <source>Simple expressions in templates</source>
          <target state="translated">テンプレート内のシンプルな表現</target>
        </trans-unit>
        <trans-unit id="fcf7b67ac329ddfb22fdf3fbec785727bf9bf466" translate="yes" xml:space="preserve">
          <source>Simple expressions in templates &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">テンプレートでの単純な表現を&lt;sup&gt;強くお勧めします&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="211d49f995dbe282f57faa15874e031ac53eeff7" translate="yes" xml:space="preserve">
          <source>Simpler, well-named computed properties are:</source>
          <target state="translated">よりシンプルで名前のついた計算されたプロパティは、以下の通りです。</target>
        </trans-unit>
        <trans-unit id="63a2bccabf19824dace120aef2460e5986003d8a" translate="yes" xml:space="preserve">
          <source>Simplifying computed properties forces you to give each value a descriptive name, even if it&amp;rsquo;s not reused. This makes it much easier for other developers (and future you) to focus in on the code they care about and figure out what&amp;rsquo;s going on.</source>
          <target state="translated">計算されたプロパティを簡略化すると、再利用されない場合でも、各値にわかりやすい名前を付ける必要があります。これにより、他の開発者（および将来の開発者）が関心のあるコードに集中して、何が起こっているのかを理解することがはるかに容易になります。</target>
        </trans-unit>
        <trans-unit id="f04aaef124e7b2b9e4d40f6a6b719132efaeba8f" translate="yes" xml:space="preserve">
          <source>Simplifying computed properties forces you to give each value a descriptive name, even if it's not reused. This makes it much easier for other developers (and future you) to focus in on the code they care about and figure out what's going on.</source>
          <target state="translated">計算されたプロパティをシンプルにすることで、再利用されない場合でも、各値に説明的な名前を付けることができます。これにより、他の開発者 (および将来のあなた)が気になるコードに集中して、何が起こっているのかを把握するのがはるかに簡単になります。</target>
        </trans-unit>
        <trans-unit id="5fd1e98b263d4df6091312537a5b1fb83da16e24" translate="yes" xml:space="preserve">
          <source>Simply download and include with a script tag. &lt;code&gt;Vue&lt;/code&gt; will be registered as a global variable.</source>
          <target state="translated">単にダウンロードして、スクリプトタグを含めます。 &lt;code&gt;Vue&lt;/code&gt; はグローバル変数として登録されます。</target>
        </trans-unit>
        <trans-unit id="d5938f34f8624b63802c3118f180d5e293766247" translate="yes" xml:space="preserve">
          <source>Simultaneous entering and leaving transitions aren&amp;rsquo;t always desirable though, so Vue offers some alternative &lt;strong&gt;transition modes&lt;/strong&gt;:</source>
          <target state="translated">ただし、遷移の開始と終了が同時に望ましいとは限らないため、Vueにはいくつかの代替&lt;strong&gt;遷移モードがあります&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="680f9238b2a8b78e32cdbc0c2d7b967eeba0e51d" translate="yes" xml:space="preserve">
          <source>Since &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode&quot;&gt;&lt;code&gt;KeyboardEvent.keyCode&lt;/code&gt; has been deprecated (opens new window)&lt;/a&gt;, it no longer makes sense for Vue 3 to continue supporting this as well. As a result, it is now recommended to use the kebab-case name for any key you want to use as a modifier.</source>
          <target state="translated">以来&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode&quot;&gt; &lt;code&gt;KeyboardEvent.keyCode&lt;/code&gt; は（新しいウィンドウが開きます）推奨されていません&lt;/a&gt;、それはもはやうまくとしてこれを支援を継続するためにVueの3のために意味がありません。そのため、修飾子として使用するキーには、kebab-case名を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6a69d78f54bcf8ac6e1f4a3963e04cee33a026d0" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;$nextTick()&lt;/code&gt; returns a promise, you can achieve the same as the above using the new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;ES2016 async/await&lt;/a&gt; syntax:</source>
          <target state="translated">以来 &lt;code&gt;$nextTick()&lt;/code&gt; 約束を返すには、新しい使用して上記と同じで達成することができます&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;ES2016非同期/のawait&lt;/a&gt;構文：</target>
        </trans-unit>
        <trans-unit id="a1ac81c9a7f5d4faff057385cc40d040ef51718a" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;$nextTick()&lt;/code&gt; returns a promise, you can achieve the same as the above using the new &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;ES2017 async/await (opens new window)&lt;/a&gt; syntax:</source>
          <target state="translated">以来 &lt;code&gt;$nextTick()&lt;/code&gt; 約束を返すには、新しい使用して上記と同じで達成することができます&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;ES2017非同期/のawait（新しいウィンドウが開きます）&lt;/a&gt;構文を：</target>
        </trans-unit>
        <trans-unit id="10a777de149e5a77b75501c009eb466a9bc93514" translate="yes" xml:space="preserve">
          <source>Since &lt;code&gt;v-ref&lt;/code&gt; is no longer a directive, but a special attribute, it can also be dynamically defined. This is especially useful in combination with &lt;code&gt;v-for&lt;/code&gt;. For example:</source>
          <target state="translated">以来 &lt;code&gt;v-ref&lt;/code&gt; もはやディレクティブが、特別な属性であり、それはまた、動的に定義することはできません。これは、 &lt;code&gt;v-for&lt;/code&gt; と組み合わせると特に便利です。例えば：</target>
        </trans-unit>
        <trans-unit id="9de3c1e0a71e1edcdc7ffbc2b45060ebfe43b095" translate="yes" xml:space="preserve">
          <source>Since Vue &lt;a href=&quot;reactivity#Async-Update-Queue&quot;&gt;performs DOM updates asynchronously&lt;/a&gt;, assertions on DOM updates resulting from state change will have to be made in a &lt;code&gt;Vue.nextTick&lt;/code&gt; callback:</source>
          <target state="translated">Vue &lt;a href=&quot;reactivity#Async-Update-Queue&quot;&gt;は非同期&lt;/a&gt;にDOM更新を実行するため、状態の変化に起因するDOM更新のアサーションは &lt;code&gt;Vue.nextTick&lt;/code&gt; コールバックで作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="a6f5eaf2601394efec9f1b3f5eff696573b84807" translate="yes" xml:space="preserve">
          <source>Since Vue doesn&amp;rsquo;t allow dynamically adding root-level reactive properties, you have to initialize Vue instances by declaring all root-level reactive data properties upfront, even with an empty value:</source>
          <target state="translated">Vueではルートレベルのリアクティブプロパティを動的に追加することができないため、空の値でも、すべてのルートレベルのリアクティブデータプロパティを事前に宣言してVueインスタンスを初期化する必要があります。</target>
        </trans-unit>
        <trans-unit id="cfc45f2d4df51ef3c4e6ec8a40b0cd708737fd53" translate="yes" xml:space="preserve">
          <source>Since Vue doesn't allow dynamically adding root-level reactive properties, you have to initialize component instances by declaring all root-level reactive data properties upfront, even with an empty value:</source>
          <target state="translated">Vue ではルートレベルのリアクティブ プロパティを動的に追加することができないため、空の値であっても、すべてのルートレベルのリアクティブ データ プロパティを前もって宣言して、コンポーネント インスタンスを初期化する必要があります。</target>
        </trans-unit>
        <trans-unit id="17a485dec90726f134aafab30671454807556666" translate="yes" xml:space="preserve">
          <source>Since component names should always be multi-word, this convention prevents you from having to choose an arbitrary prefix for simple component wrappers (e.g. &lt;code&gt;MyButton&lt;/code&gt;, &lt;code&gt;VueButton&lt;/code&gt;).</source>
          <target state="translated">コンポーネント名は常にマルチワードである必要があるため、この規則により、単純なコンポーネントラッパー（ &lt;code&gt;MyButton&lt;/code&gt; 、 &lt;code&gt;VueButton&lt;/code&gt; など）に任意のプレフィックスを選択する必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="ba2168060abb1674449c97121137c7602377ef42" translate="yes" xml:space="preserve">
          <source>Since components are reusable Vue instances, they accept the same options as &lt;code&gt;new Vue&lt;/code&gt;, such as &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;computed&lt;/code&gt;, &lt;code&gt;watch&lt;/code&gt;, &lt;code&gt;methods&lt;/code&gt;, and lifecycle hooks. The only exceptions are a few root-specific options like &lt;code&gt;el&lt;/code&gt;.</source>
          <target state="translated">コンポーネントは再利用可能なVueインスタンスであるため、 &lt;code&gt;data&lt;/code&gt; 、 &lt;code&gt;computed&lt;/code&gt; 、 &lt;code&gt;watch&lt;/code&gt; 、 &lt;code&gt;methods&lt;/code&gt; 、ライフサイクルフックなど、 &lt;code&gt;new Vue&lt;/code&gt; と同じオプションを受け入れます。唯一の例外は、 &lt;code&gt;el&lt;/code&gt; のようないくつかのルート固有のオプションです。</target>
        </trans-unit>
        <trans-unit id="78c28ad0018e9ae927ccd6393b355ae5a0e871fc" translate="yes" xml:space="preserve">
          <source>Since components are reusable instances, they accept the same options as a root instance, such as &lt;code&gt;data&lt;/code&gt;, &lt;code&gt;computed&lt;/code&gt;, &lt;code&gt;watch&lt;/code&gt;, &lt;code&gt;methods&lt;/code&gt;, and lifecycle hooks.</source>
          <target state="translated">コンポーネントは再利用可能なインスタンスであるため、 &lt;code&gt;data&lt;/code&gt; 、 &lt;code&gt;computed&lt;/code&gt; 、 &lt;code&gt;watch&lt;/code&gt; 、 &lt;code&gt;methods&lt;/code&gt; 、ライフサイクルフックなど、ルートインスタンスと同じオプションを受け入れます。</target>
        </trans-unit>
        <trans-unit id="2b68173db2c99b86c3a75462f226a7b75ff0f1d5" translate="yes" xml:space="preserve">
          <source>Since editors typically organize files alphabetically, all the important relationships between components are now evident at a glance.</source>
          <target state="translated">エディターは通常、アルファベット順にファイルを整理しているため、構成要素間の重要な関係はすべて一目でわかるようになっています。</target>
        </trans-unit>
        <trans-unit id="ef79f75d79e817472bd0ed5aad52845e59dbf2e4" translate="yes" xml:space="preserve">
          <source>Since functional components are just functions, they&amp;rsquo;re much cheaper to render.</source>
          <target state="translated">機能コンポーネントは単なる関数であるため、レンダリングする方がはるかに安価です。</target>
        </trans-unit>
        <trans-unit id="5ca066badcd55a6324af0033eddd42706cb8d9c3" translate="yes" xml:space="preserve">
          <source>Since it&amp;rsquo;s a generic mechanism for Vue to identify nodes, the &lt;code&gt;key&lt;/code&gt; also has other uses that are not specifically tied to &lt;code&gt;v-for&lt;/code&gt;, as we will see later in the guide.</source>
          <target state="translated">これは、Vueがノードを識別するための一般的なメカニズムであるため、ガイドで後で説明するように、 &lt;code&gt;key&lt;/code&gt; は特に &lt;code&gt;v-for&lt;/code&gt; に関連付けられていない他の用途もあります。</target>
        </trans-unit>
        <trans-unit id="edd9c569ae9e194ecf746323957f3ab3ba7b3456" translate="yes" xml:space="preserve">
          <source>Since it's a generic mechanism for Vue to identify nodes, the &lt;code&gt;key&lt;/code&gt; also has other uses that are not specifically tied to &lt;code&gt;v-for&lt;/code&gt;, as we will see later in the guide.</source>
          <target state="translated">これはVueがノードを識別するための一般的なメカニズムであるため、この &lt;code&gt;key&lt;/code&gt; には、ガイドの後半で説明するように、 &lt;code&gt;v-for&lt;/code&gt; に特に関連付けられていない他の用途もあります。</target>
        </trans-unit>
        <trans-unit id="57443f82252c819ca077975175ff21178e6dad24" translate="yes" xml:space="preserve">
          <source>Since the majority of unit testing frameworks are open-source, having a community that is active can be critical to some teams that will be maintaining their tests for a long period of time and needs to ensure that a project will be actively maintained. In addition, having an active community has the benefit of providing more support whenever you run into issues.</source>
          <target state="translated">ユニットテストフレームワークの大部分はオープンソースなので、アクティブなコミュニティを持つことは、長期間にわたってテストを維持し、プロジェクトが積極的に維持されることを保証する必要があるチームにとって重要です。さらに、アクティブなコミュニティを持つことは、問題に遭遇したときにはいつでもより多くのサポートを提供できるという利点があります。</target>
        </trans-unit>
        <trans-unit id="c460325ca52e3630249720f5552ae7b020e4765a" translate="yes" xml:space="preserve">
          <source>Since the runtime-only builds are roughly 30% lighter-weight than their full-build counterparts, you should use it whenever you can. If you still wish to use the full build instead, you need to configure an alias in your bundler:</source>
          <target state="translated">実行時のみのビルドは、フルビルドに比べて約30%軽量なので、可能な限り使用してください。それでもフルビルドを使いたい場合は、バンドル内でエイリアスを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="e62e1d6e39e14f551529b609a48c6fb619bb1df6" translate="yes" xml:space="preserve">
          <source>Since these are &lt;a href=&quot;https://cdn.jsdelivr.net/npm/vue/types/&quot;&gt;published on NPM&lt;/a&gt;, and the latest TypeScript knows how to resolve type declarations in NPM packages, this means when installed via NPM, you don&amp;rsquo;t need any additional tooling to use TypeScript with Vue.</source>
          <target state="translated">これらは&lt;a href=&quot;https://cdn.jsdelivr.net/npm/vue/types/&quot;&gt;NPM&lt;/a&gt;で公開されており、最新のTypeScriptはNPMパッケージの型宣言を解決する方法を知っているため、NPM経由でインストールされた場合、TypeScriptをVueで使用するために追加のツールは必要ありません。</target>
        </trans-unit>
        <trans-unit id="4ea3d2ff946bc5b79835d964012d367a993b9ca6" translate="yes" xml:space="preserve">
          <source>Since these components are so frequently used, you may want to simply make them global instead of importing them everywhere. A prefix makes this possible with Webpack:</source>
          <target state="translated">これらのコンポーネントは非常に頻繁に使われるので、どこでもインポートするのではなく、単にグローバルにしたいと思うかもしれません。Webpackではプレフィックスをつけることでそれが可能になります。</target>
        </trans-unit>
        <trans-unit id="81ea6c41142d2d55928c63e7eb3e2a9e0e6d4d96" translate="yes" xml:space="preserve">
          <source>Since unit testing advice is often framework-agnostic, here are some basic guidelines to keep in mind when evaluating which unit testing tool is best for your application.</source>
          <target state="translated">ユニットテストのアドバイスはフレームワークに依存しないことが多いので、アプリケーションに最適なユニットテストツールを評価する際に心に留めておくべき基本的なガイドラインをいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="796906cd98540356e295c43d625d24ed68862aac" translate="yes" xml:space="preserve">
          <source>Since we&amp;rsquo;re no longer using filter options that require a value to be returned, our currency work could actually be done asynchronously. That means if we had a lot of apps that had to work with currencies, we could easily refactor this logic into a shared microservice.</source>
          <target state="translated">値を返す必要のあるフィルターオプションを使用していないため、通貨の作業は実際には非同期で実行できます。つまり、通貨で動作する必要のあるアプリがたくさんある場合、このロジックを共有マイクロサービスに簡単にリファクタリングできます。</target>
        </trans-unit>
        <trans-unit id="a31aa77b805847e93b5d67d3ae054b43de8ddfb3" translate="yes" xml:space="preserve">
          <source>Since you don&amp;rsquo;t have to manually attach event listeners in JS, your ViewModel code can be pure logic and DOM-free. This makes it easier to test.</source>
          <target state="translated">JSで手動でイベントリスナーをアタッチする必要がないため、ViewModelコードは純粋なロジックでDOMを使用しなくてもかまいません。これにより、テストが容易になります。</target>
        </trans-unit>
        <trans-unit id="59debd2931aa770a2b0975329d41213dcd9c5d88" translate="yes" xml:space="preserve">
          <source>Since you don&amp;rsquo;t need to know about JSX, ES2015, or build systems to get started with Vue, it also typically takes developers less than a day reading &lt;a href=&quot;../index&quot;&gt;the guide&lt;/a&gt; to learn enough to build non-trivial applications.</source>
          <target state="translated">Vueを使い始めるのにJSX、ES2015、またはビルドシステムについて知る必要がないため、通常、開発者&lt;a href=&quot;../index&quot;&gt;はガイド&lt;/a&gt;を読んで1日もかからず、重要なアプリケーションをビルドするのに十分なことを学ぶことができます。</target>
        </trans-unit>
        <trans-unit id="357d852f90e2d7ce113320f498f17ebe31dd5a8d" translate="yes" xml:space="preserve">
          <source>Since you don't have to manually attach event listeners in JS, your ViewModel code can be pure logic and DOM-free. This makes it easier to test.</source>
          <target state="translated">JS でイベントリスナーを手動でアタッチする必要がないため、ViewModel のコードは純粋なロジックで DOM フリーにすることができます。これによりテストが容易になります。</target>
        </trans-unit>
        <trans-unit id="4a6e205b866dd29d282ce270191d3645216b482d" translate="yes" xml:space="preserve">
          <source>Single File Components</source>
          <target state="translated">シングルファイルコンポーネント</target>
        </trans-unit>
        <trans-unit id="601044cdeb8a98e639651071cf1f9dc53d97b702" translate="yes" xml:space="preserve">
          <source>Single File Components (SFCs)</source>
          <target state="translated">シングルファイルコンポーネント(SFC)</target>
        </trans-unit>
        <trans-unit id="0962a83153ac828504101602afbecfaf538e344c" translate="yes" xml:space="preserve">
          <source>Single Line</source>
          <target state="translated">単線</target>
        </trans-unit>
        <trans-unit id="5e7f1d7d63552994a465b38c32202f3620abe335" translate="yes" xml:space="preserve">
          <source>Single checkbox, boolean value:</source>
          <target state="translated">単一のチェックボックス、ブール値。</target>
        </trans-unit>
        <trans-unit id="040f06c8b02b9ecd8ce3bcc463d52f44ab71de30" translate="yes" xml:space="preserve">
          <source>Single select:</source>
          <target state="translated">シングルセレクト。</target>
        </trans-unit>
        <trans-unit id="95ef58f9b3d77202b180ce829f19b7953db91e4d" translate="yes" xml:space="preserve">
          <source>Single-file (&lt;code&gt;.vue&lt;/code&gt;) components</source>
          <target state="translated">単一ファイル（ &lt;code&gt;.vue&lt;/code&gt; ）コンポーネント</target>
        </trans-unit>
        <trans-unit id="a0fcc7019dc5bbeb59c13b0247440b91dff10e8e" translate="yes" xml:space="preserve">
          <source>Single-file component filename casing</source>
          <target state="translated">単一ファイルのコンポーネントファイル名のケーシング</target>
        </trans-unit>
        <trans-unit id="093c716d53dd968ee64e9ba688e8285861d21500" translate="yes" xml:space="preserve">
          <source>Single-file component filename casing &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">単一ファイルのコンポーネントのファイル名の大文字小文字の区別を&lt;sup&gt;強くお勧めします&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="aad2c1946beed7073bd3f80b10b836af1bd801c0" translate="yes" xml:space="preserve">
          <source>Single-file component top-level element order</source>
          <target state="translated">シングルファイルコンポーネントのトップレベル要素の順序</target>
        </trans-unit>
        <trans-unit id="369e619c0ac6b0e41c0c5e5672725a1dad22811c" translate="yes" xml:space="preserve">
          <source>Single-file component top-level element order &lt;sup&gt;recommended&lt;/sup&gt;</source>
          <target state="translated">単一ファイルコンポーネントの最上位要素の順序を&lt;sup&gt;推奨&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="e5ab16f7ba44150cac61508afe92cbd1d1dd294b" translate="yes" xml:space="preserve">
          <source>Single-instance component names</source>
          <target state="translated">シングルインスタンスのコンポーネント名</target>
        </trans-unit>
        <trans-unit id="801a9b431b0affdfa69d3dd93084d1b29dae9cb0" translate="yes" xml:space="preserve">
          <source>Single-instance component names &lt;sup&gt;strongly recommended&lt;/sup&gt;</source>
          <target state="translated">単一インスタンスのコンポーネント名を&lt;sup&gt;強くお勧めします&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="b7152342a267362add3c0d7f69f720f7a9c76c9e" translate="yes" xml:space="preserve">
          <source>Size</source>
          <target state="translated">Size</target>
        </trans-unit>
        <trans-unit id="896ccfe8515d070b5a15610d907daecc5196a888" translate="yes" xml:space="preserve">
          <source>Skip compilation for this element and all its children. You can use this for displaying raw mustache tags. Skipping large numbers of nodes with no directives on them can also speed up compilation.</source>
          <target state="translated">この要素とそのすべての子要素のコンパイルをスキップします。これは生の口ひげタグを表示するために使用できます。大量のノードをスキップして、その上にディレクティブを持たないようにすることで、コンパイルを高速化することもできます。</target>
        </trans-unit>
        <trans-unit id="385d78391f1fa467a858f22990ead95a27284b36" translate="yes" xml:space="preserve">
          <source>Skip link</source>
          <target state="translated">リンクをスキップする</target>
        </trans-unit>
        <trans-unit id="8ef83d38df405d6719db39be3cccd4d9524f7c92" translate="yes" xml:space="preserve">
          <source>Skipping proxy conversion can provide performance improvements when rendering large lists with immutable data sources.</source>
          <target state="translated">プロキシ変換をスキップすることで、不変のデータソースを持つ大きなリストをレンダリングする際のパフォーマンスを向上させることができます。</target>
        </trans-unit>
        <trans-unit id="083d20797ac518ecfd2d5802f11e56f053d9b2a3" translate="yes" xml:space="preserve">
          <source>Slot Content</source>
          <target state="translated">スロットの内容</target>
        </trans-unit>
        <trans-unit id="0c1a16e17517d5db584e59f03e5701a1df0aec29" translate="yes" xml:space="preserve">
          <source>Slots</source>
          <target state="translated">Slots</target>
        </trans-unit>
        <trans-unit id="f25804abff59f82911237e106d151dfd3114ae2c" translate="yes" xml:space="preserve">
          <source>Slots Unification</source>
          <target state="translated">スロットの統一</target>
        </trans-unit>
        <trans-unit id="0c05d5215c9958f423cfa89492ade3561c496be1" translate="yes" xml:space="preserve">
          <source>Small, focused computed properties make fewer assumptions about how information will be used, so require less refactoring as requirements change.</source>
          <target state="translated">小規模で焦点を絞った計算されたプロパティは、情報がどのように使用されるかについての仮定が少ないため、要件の変更に伴うリファクタリングが少なくて済みます。</target>
        </trans-unit>
        <trans-unit id="270782c16d7dfcd9bacc30c93f3205da13a192a6" translate="yes" xml:space="preserve">
          <source>So even if we only render elements for a small fraction of users, we have to iterate over the entire list every time we re-render, whether or not the set of active users has changed.</source>
          <target state="translated">そのため、たとえごく一部のユーザーの要素だけをレンダリングしたとしても、アクティブなユーザーのセットが変わったかどうかに関わらず、再レンダリングするたびにリスト全体を反復処理しなければなりません。</target>
        </trans-unit>
        <trans-unit id="9efa5f0263f4584699ee25a6ef7cd96b38af2cbd" translate="yes" xml:space="preserve">
          <source>So far we&amp;rsquo;ve only been binding to simple property keys in our templates. But Vue.js actually supports the full power of JavaScript expressions inside all data bindings:</source>
          <target state="translated">これまでは、テンプレート内の単純なプロパティキーにのみバインドしてきました。しかし、Vue.jsは実際にはすべてのデータバインディング内のJavaScript式の全機能をサポートしています。</target>
        </trans-unit>
        <trans-unit id="8b007e1b2fa7231d0825d38c1ab4e7b6a352ae60" translate="yes" xml:space="preserve">
          <source>So far we've only been binding to simple property keys in our templates. But Vue.js actually supports the full power of JavaScript expressions inside all data bindings:</source>
          <target state="translated">これまでは、テンプレート内の単純なプロパティキーへのバインディングのみを行ってきました。しかし、Vue.jsは実際には、すべてのデータバインディングの内部でJavaScriptの式をフルにサポートしています。</target>
        </trans-unit>
        <trans-unit id="fc43cc8fe805d607917adfb57b267a4c1e366e21" translate="yes" xml:space="preserve">
          <source>So far, we&amp;rsquo;ve managed transitions for:</source>
          <target state="translated">これまでのところ、トランジションを管理してきました。</target>
        </trans-unit>
        <trans-unit id="9990ce27d68bc258ecfe618b1e117aba2e010d2d" translate="yes" xml:space="preserve">
          <source>So far, we&amp;rsquo;ve only created components using &lt;code&gt;Vue.component&lt;/code&gt;:</source>
          <target state="translated">これまで、 &lt;code&gt;Vue.component&lt;/code&gt; を使用してコンポーネントを作成してきました：</target>
        </trans-unit>
        <trans-unit id="67796fb098e807812b451996ffa7c37901a92525" translate="yes" xml:space="preserve">
          <source>So far, we&amp;rsquo;ve only seen props listed as an array of strings:</source>
          <target state="translated">これまでのところ、文字列の配列としてリストされている小道具を見てきました。</target>
        </trans-unit>
        <trans-unit id="ad0ac718587a84d865b7fb0857b8b94c7a79d9ce" translate="yes" xml:space="preserve">
          <source>So far, we've managed transitions for:</source>
          <target state="translated">これまでのところ、トランジションを管理しています。</target>
        </trans-unit>
        <trans-unit id="c67057cf9dda632e7c53641b3af1b64f4b054c2e" translate="yes" xml:space="preserve">
          <source>So far, we've only created components using &lt;code&gt;app.component&lt;/code&gt;:</source>
          <target state="translated">これまでのところ、 &lt;code&gt;app.component&lt;/code&gt; を使用してコンポーネントを作成しただけです。</target>
        </trans-unit>
        <trans-unit id="f8c23af3b4bfe61992006f4f5db2569cf719ea2e" translate="yes" xml:space="preserve">
          <source>So far, we've only seen props listed as an array of strings:</source>
          <target state="translated">今のところ、小道具は文字列の配列でしか見たことがありません。</target>
        </trans-unit>
        <trans-unit id="bcb7e6dc22797e50c31c81c6ca57f0d64cd4b40a" translate="yes" xml:space="preserve">
          <source>So far, you&amp;rsquo;ve seen props passed a static value, like in:</source>
          <target state="translated">これまでのところ、次のようにプロップが静的な値を渡すのを見てきました。</target>
        </trans-unit>
        <trans-unit id="bf5ea7f867584dc6f766ba242591c6f576f49d80" translate="yes" xml:space="preserve">
          <source>So far, you&amp;rsquo;ve seen uses of &lt;code&gt;$emit&lt;/code&gt;, listened to with &lt;code&gt;v-on&lt;/code&gt;, but Vue instances also offer other methods in its events interface. We can:</source>
          <target state="translated">これまでのところ、 &lt;code&gt;v-on&lt;/code&gt; でリッスンされた &lt;code&gt;$emit&lt;/code&gt; 使用を見てきましたが、Vueインスタンスはそのイベントインターフェースで他のメソッドも提供しています。私たちはできる：</target>
        </trans-unit>
        <trans-unit id="41c7973382a4579cbfc80048a0bc33b60b91461b" translate="yes" xml:space="preserve">
          <source>So far, you've seen props passed a static value, like in:</source>
          <target state="translated">これまでは、propsに静的な値が渡されているのを見てきました。</target>
        </trans-unit>
        <trans-unit id="e2ebedb9491240daeacbc489ddaed31b23f7f005" translate="yes" xml:space="preserve">
          <source>So how would we do this in JavaScript?</source>
          <target state="translated">では、JavaScriptではどうすればいいのでしょうか?</target>
        </trans-unit>
        <trans-unit id="8d84a44b86d81a516326f9813e2b3977e997a457" translate="yes" xml:space="preserve">
          <source>So this might be a good time to refactor the &lt;code&gt;&amp;lt;blog-post&amp;gt;&lt;/code&gt; component to accept a single &lt;code&gt;post&lt;/code&gt; prop instead:</source>
          <target state="translated">したがって、これは &lt;code&gt;&amp;lt;blog-post&amp;gt;&lt;/code&gt; コンポーネントをリファクタリングして、代わりに単一の &lt;code&gt;post&lt;/code&gt; 小道具を受け入れる良い機会かもしれません：</target>
        </trans-unit>
        <trans-unit id="d6aa2762b60d0919d3cc5d125c99532a28d73b78" translate="yes" xml:space="preserve">
          <source>So what about for when we have a whole list of items we want to render simultaneously, for example with &lt;code&gt;v-for&lt;/code&gt;? In this case, we&amp;rsquo;ll use the &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; component. Before we dive into an example though, there are a few things that are important to know about this component:</source>
          <target state="translated">それで、たとえば &lt;code&gt;v-for&lt;/code&gt; を使用して、同時にレンダリングしたいアイテムのリスト全体がある場合はどうでしょうか？この場合、 &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; コンポーネントを使用します。例に入る前に、このコンポーネントについて知っておくべき重要なことがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="f2e88928ec91eca02eb578a8b5e6e04b106c6623" translate="yes" xml:space="preserve">
          <source>So what about for when we have a whole list of items we want to render simultaneously, for example with &lt;code&gt;v-for&lt;/code&gt;? In this case, we'll use the &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; component. Before we dive into an example though, there are a few things that are important to know about this component:</source>
          <target state="translated">では、たとえば &lt;code&gt;v-for&lt;/code&gt; を使用して、同時にレンダリングするアイテムのリスト全体がある場合はどうでしょうか。この場合、 &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; コンポーネントを使用します。ただし、例に入る前に、このコンポーネントについて知っておくべき重要なことがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="cb218e5682ecb96e10798fb908e4473d6901128c" translate="yes" xml:space="preserve">
          <source>So, &lt;code&gt;v-model&lt;/code&gt; in this case would be a shorthand to</source>
          <target state="translated">したがって、この場合の &lt;code&gt;v-model&lt;/code&gt; は</target>
        </trans-unit>
        <trans-unit id="9ad052271e0186ed108ab51a2c5684a90c5a025a" translate="yes" xml:space="preserve">
          <source>Software</source>
          <target state="translated">Software</target>
        </trans-unit>
        <trans-unit id="147f6354f521a67959c12f2f8261d77ce2bb9c39" translate="yes" xml:space="preserve">
          <source>Some HTML elements, such as &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; have restrictions on what elements can appear inside them, and some elements such as &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;, and &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; can only appear inside certain other elements.</source>
          <target state="translated">&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; などの一部のHTML要素は、それらの内部に表示できる要素に制限があり、 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; などの一部の要素は他の特定の要素内に表示されます。</target>
        </trans-unit>
        <trans-unit id="9c0790e8dcd7f3a0c69aa32f511de55c1f1ea0e6" translate="yes" xml:space="preserve">
          <source>Some advantages of this convention:</source>
          <target state="translated">この大会の利点をいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="2108424fbba417074fadf0d75a3e1edc693ebce6" translate="yes" xml:space="preserve">
          <source>Some argue that you&amp;rsquo;d need to learn an extra DSL (Domain-Specific Language) to be able to write templates - we believe this difference is superficial at best. First, JSX doesn&amp;rsquo;t mean the user doesn&amp;rsquo;t need to learn anything - it&amp;rsquo;s additional syntax on top of plain JavaScript, so it can be easy for someone familiar with JavaScript to learn, but saying it&amp;rsquo;s essentially free is misleading. Similarly, a template is just additional syntax on top of plain HTML and thus has very low learning cost for those who are already familiar with HTML. With the DSL we are also able to help the user get more done with less code (e.g. &lt;code&gt;v-on&lt;/code&gt; modifiers). The same task can involve a lot more code when using plain JSX or render functions.</source>
          <target state="translated">テンプレートを作成できるようにするには、追加のDSL（ドメイン固有言語）を学ぶ必要があると主張する人もいます。まず、JSXはユーザーが何も学ぶ必要がないという意味ではありません。これはプレーンなJavaScriptに加えて追加の構文であるため、JavaScriptに慣れている人は簡単に学ぶことができますが、本質的に無料であると言うのは誤解を招きます。同様に、テンプレートはプレーンHTMLに加えた追加の構文にすぎないため、HTMLに既に慣れている人にとっては学習コストが非常に低くなります。 DSLを使用すると、少ないコード（ &lt;code&gt;v-on&lt;/code&gt; 修飾子など）でユーザーがより多くのことを達成できるようにすることもできます。プレーンなJSXまたはレンダー関数を使用する場合、同じタスクにさらに多くのコードが含まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="562b1dcca42b0018a2fd2b5ce42a0d7a33ddd0a9" translate="yes" xml:space="preserve">
          <source>Some directives can take an &quot;argument&quot;, denoted by a colon after the directive name. For example, the &lt;code&gt;v-bind&lt;/code&gt; directive is used to reactively update an HTML attribute:</source>
          <target state="translated">一部のディレクティブは、ディレクティブ名の後にコロンで示される「引数」を取ることができます。たとえば、 &lt;code&gt;v-bind&lt;/code&gt; ディレクティブは、HTML属性を事後的に更新するために使用されます。</target>
        </trans-unit>
        <trans-unit id="a9ef7770ac385e4eae53d066a2f3c10a8b6c4ab6" translate="yes" xml:space="preserve">
          <source>Some directives can take an &amp;ldquo;argument&amp;rdquo;, denoted by a colon after the directive name. For example, the &lt;code&gt;v-bind&lt;/code&gt; directive is used to reactively update an HTML attribute:</source>
          <target state="translated">一部のディレクティブは、「引数」をとることができ、ディレクティブ名の後にコロンで示されます。たとえば、 &lt;code&gt;v-bind&lt;/code&gt; ディレクティブは、HTML属性を事後的に更新するために使用されます。</target>
        </trans-unit>
        <trans-unit id="09428a807ec781f76bc254d725a9a4e0a2df7f8b" translate="yes" xml:space="preserve">
          <source>Some environments, such as Google Chrome Apps, enforce Content Security Policy (CSP), which prohibits the use of &lt;code&gt;new Function()&lt;/code&gt; for evaluating expressions. The full build depends on this feature to compile templates, so is unusable in these environments.</source>
          <target state="translated">Google Chromeアプリなどの一部の環境では、コンテンツのセキュリティポリシー（CSP）が適用され、式の評価に &lt;code&gt;new Function()&lt;/code&gt; を使用することが禁止されています。完全なビルドは、テンプレートをコンパイルするためにこの機能に依存しているため、これらの環境では使用できません。</target>
        </trans-unit>
        <trans-unit id="5a2e23d7e711dac515b3913d004594ddb71e0888" translate="yes" xml:space="preserve">
          <source>Some features of Vue exist to accommodate rare edge cases or smoother migrations from a legacy code base. When overused however, they can make your code more difficult to maintain or even become a source of bugs. These rules shine a light on potentially risky features, describing when and why they should be avoided.</source>
          <target state="translated">Vue の機能の中には、まれなエッジケースや、レガシー コード ベースからの移行をスムーズに行うために存在するものがあります。しかし、これらの機能が過剰に使用されると、コードの保守が難しくなったり、バグの原因になったりする可能性があります。これらのルールでは、危険性のある機能に光を当て、いつ、なぜそれらを避けるべきかを説明しています。</target>
        </trans-unit>
        <trans-unit id="d10fd1239637017ec222f508352aa84bee00680a" translate="yes" xml:space="preserve">
          <source>Some of Vue&amp;rsquo;s syntax will look very similar to AngularJS (e.g. &lt;code&gt;v-if&lt;/code&gt; vs &lt;code&gt;ng-if&lt;/code&gt;). This is because there were a lot of things that AngularJS got right and these were an inspiration for Vue very early in its development. There are also many pains that come with AngularJS however, where Vue has attempted to offer a significant improvement.</source>
          <target state="translated">Vueの構文の一部は、AngularJSに非常に似ています（例： &lt;code&gt;v-if&lt;/code&gt; と &lt;code&gt;ng-if&lt;/code&gt; ）。これは、AngularJSが正しく機能したことがたくさんあり、それらがVueの開発の非常に早い段階でのインスピレーションであったためです。AngularJSには多くの問題がありますが、Vueは大幅な改善を試みています。</target>
        </trans-unit>
        <trans-unit id="ba632b521cfadde631ed92ffd03194fe0b0a9806" translate="yes" xml:space="preserve">
          <source>Some of the current hooks have different behavior and there are also a couple new hooks.</source>
          <target state="translated">現在のフックの中には動作が異なるものもありますし、新しいフックもいくつかあります。</target>
        </trans-unit>
        <trans-unit id="823d42c9ef6472009b44bd254d2588f2ed0ae4c8" translate="yes" xml:space="preserve">
          <source>Some of the most notable differences include:</source>
          <target state="translated">特筆すべき違いとしては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="8ffb8d69071dcc932023e9c643874de3b228fccc" translate="yes" xml:space="preserve">
          <source>Some of the new features to keep an eye on in Vue 3 include:</source>
          <target state="translated">Vue 3で注目すべき新機能には、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="85976567c84aab5c4b5906f9117b4275cd11d741" translate="yes" xml:space="preserve">
          <source>Some of the sections below may also be slightly outdated due to recent updates in React 16+, and we are planning to work with the React community to revamp this section in the near future.</source>
          <target state="translated">以下のセクションのいくつかは、React 16+での最近のアップデートのために若干古くなっている可能性があり、近い将来、Reactコミュニティと協力してこのセクションを改訂する予定です。</target>
        </trans-unit>
        <trans-unit id="e66b9d4602dcda92a8811e8379102ad854fa4037" translate="yes" xml:space="preserve">
          <source>Some plugins provided by Vue.js official plugins such as &lt;code&gt;vue-router&lt;/code&gt; automatically calls &lt;code&gt;Vue.use()&lt;/code&gt; if &lt;code&gt;Vue&lt;/code&gt; is available as a global variable. However in a module environment such as CommonJS, you always need to call &lt;code&gt;Vue.use()&lt;/code&gt; explicitly:</source>
          <target state="translated">&lt;code&gt;Vue&lt;/code&gt; がグローバル変数として利用可能な場合、 &lt;code&gt;vue-router&lt;/code&gt; などのVue.js公式プラグインによって提供される一部のプラグインは自動的に &lt;code&gt;Vue.use()&lt;/code&gt; を呼び出します。ただし、CommonJSなどのモジュール環境では、常に明示的に &lt;code&gt;Vue.use()&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="d1da63849693561e71f9ebd75ce39efc2177e7c4" translate="yes" xml:space="preserve">
          <source>Some transition classes got a rename</source>
          <target state="translated">いくつかの移行クラスは名前を変更しました</target>
        </trans-unit>
        <trans-unit id="3d83d58916c1a60066e9604dcc1bcaf5d2ac577d" translate="yes" xml:space="preserve">
          <source>Some transition effects can be applied by interpolating values, for instance by binding a style to an element while an interaction occurs. Take this example for instance:</source>
          <target state="translated">遷移効果の中には、値を補間することで適用できるものもあり、例えば、インタラクションが発生している間にスタイルを要素にバインドすることで適用できます。例えば、この例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="a6f0483aedfa8041d28d52d5cfd531234f7cb2b4" translate="yes" xml:space="preserve">
          <source>Some unit testing frameworks, like Jest, include assertion libraries. Others, like Mocha, require you to install assertion libraries separately (usually Chai).</source>
          <target state="translated">Jest のようなユニットテストフレームワークには、アサーション・ライブラリが含まれています。Mocha のように、アサーションライブラリを別途インストールする必要があるものもあります (通常は Chai)。</target>
        </trans-unit>
        <trans-unit id="9fe62eac7aa92f9e248fd4f6cf8a8c9817319b5d" translate="yes" xml:space="preserve">
          <source>Some users have enjoyed using two-way filters with &lt;code&gt;v-model&lt;/code&gt; to create interesting inputs with very little code. While &lt;em&gt;seemingly&lt;/em&gt; simple however, two-way filters can also hide a great deal of complexity - and even encourage poor UX by delaying state updates. Instead, components wrapping an input are recommended as a more explicit and feature-rich way of creating custom inputs.</source>
          <target state="translated">一部のユーザーは、 &lt;code&gt;v-model&lt;/code&gt; で双方向フィルターを使用して、非常に少ないコードで興味深い入力を作成することを楽しんでいます。一方で&lt;em&gt;、一見&lt;/em&gt;シンプルただし、双方向フィルタも複雑の多くを非表示にすることができます-とさえ状態の更新を遅延させることにより、貧しいUXを奨励します。代わりに、カスタム入力を作成するより明示的で機能が豊富な方法として、入力をラップするコンポーネントをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4cae9a004355ccf1a6df3d6da4904f4188c23336" translate="yes" xml:space="preserve">
          <source>Some values simply should not be made reactive, for example a complex 3rd party class instance, or a Vue component object.</source>
          <target state="translated">複雑なサードパーティのクラス インスタンスや Vue コンポーネント オブジェクトなど、リアクティブにしてはいけない値もあります。</target>
        </trans-unit>
        <trans-unit id="acfcec6e69b88ce4dae936b41aa1209796b17c8b" translate="yes" xml:space="preserve">
          <source>Sometimes the watched effect function will perform asynchronous side effects that need to be cleaned up when it is invalidated (i.e. state changed before the effects can be completed). The effect function receives an &lt;code&gt;onInvalidate&lt;/code&gt; function that can be used to register an invalidation callback. This invalidation callback is called when:</source>
          <target state="translated">監視対象のエフェクト関数は、無効になったときにクリーンアップする必要がある非同期の副作用を実行する場合があります（つまり、エフェクトを完了する前に状態が変更されます）。エフェクト関数は、無効化コールバックを登録するために使用できる &lt;code&gt;onInvalidate&lt;/code&gt; 関数を受け取ります。この無効化コールバックは、次の場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="49fcae08f3cb4892f8fa57884382317df412d82c" translate="yes" xml:space="preserve">
          <source>Sometimes this isn't an option, though, or we're dealing with more complex movement where in and out states need to be coordinated, so Vue offers an extremely useful utility called &lt;strong&gt;transition modes&lt;/strong&gt;:</source>
          <target state="translated">ただし、これがオプションではない場合や、イン状態とアウト状態を調整する必要があるより複雑な動きを扱っている場合、Vueは&lt;strong&gt;遷移モード&lt;/strong&gt;と呼ばれる非常に便利なユーティリティを提供し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="a20659b05e332a0ae32621debfebacc5d1ababa5" translate="yes" xml:space="preserve">
          <source>Sometimes this works great, like when transitioning items are absolutely positioned on top of each other:</source>
          <target state="translated">遷移するアイテムが絶対的にお互いの上に配置されている場合など、これがうまく機能することもあります。</target>
        </trans-unit>
        <trans-unit id="f26fd8bf6b50010b5da928fa27ec1a70c263cd9c" translate="yes" xml:space="preserve">
          <source>Sometimes we also need to access the original DOM event in an inline statement handler. You can pass it into a method using the special &lt;code&gt;$event&lt;/code&gt; variable:</source>
          <target state="translated">インラインステートメントハンドラーで元のDOMイベントにアクセスする必要がある場合もあります。特別な &lt;code&gt;$event&lt;/code&gt; 変数を使用して、それをメソッドに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="d6217375b6f90ff03f789d0daba4c248ea0fdddd" translate="yes" xml:space="preserve">
          <source>Sometimes we may need to specify complex types for a ref's inner value. We can do that by simply passing a generic argument when calling ref to override the default inference:</source>
          <target state="translated">refの内部値に複雑な型を指定しなければならないこともあるでしょう。ref を呼び出す際に一般的な引数を渡すだけで、デフォルトの推論をオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="f69621c7e82cd228755bd8d2542d2eb0f0d7182e" translate="yes" xml:space="preserve">
          <source>Sometimes we may need to specify complex types for a ref's inner value. We can do that succinctly by passing a generics argument when calling &lt;code&gt;ref&lt;/code&gt; to override the default inference:</source>
          <target state="translated">場合によっては、refの内部値に複合型を指定する必要があります。 &lt;code&gt;ref&lt;/code&gt; を呼び出してデフォルトの推論をオーバーライドするときにジェネリック引数を渡すことで、これを簡潔に行うことができます。</target>
        </trans-unit>
        <trans-unit id="243d33178667f24a9efd45c6f5a214dcd9d65b22" translate="yes" xml:space="preserve">
          <source>Sometimes we need state that depends on other state - in Vue this is handled with component &lt;a href=&quot;computed#computed-properties&quot;&gt;computed properties&lt;/a&gt;. To directly create a computed value, we can use the &lt;code&gt;computed&lt;/code&gt; method: it takes a getter function and returns an immutable reactive &lt;a href=&quot;reactivity-fundamentals#creating-standalone-reactive-values-as-refs&quot;&gt;ref&lt;/a&gt; object for the returned value from the getter.</source>
          <target state="translated">他の状態に依存する状態が必要になる場合があります。Vueでは、これはコンポーネントで&lt;a href=&quot;computed#computed-properties&quot;&gt;計算されたプロパティで&lt;/a&gt;処理されます。計算値を直接作成するには、 &lt;code&gt;computed&lt;/code&gt; メソッドを使用できます。これはgetter関数を受け取り、getterからの戻り値に対して不変のリアクティブ&lt;a href=&quot;reactivity-fundamentals#creating-standalone-reactive-values-as-refs&quot;&gt;ref&lt;/a&gt;オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="a58007ff3d542a5e64e8ab0473747490736edba5" translate="yes" xml:space="preserve">
          <source>Sometimes we want to display a filtered or sorted version of an array without actually mutating or resetting the original data. In this case, you can create a computed property that returns the filtered or sorted array.</source>
          <target state="translated">元のデータを実際に変異させたりリセットしたりすることなく、フィルタリングされた配列やソートされた配列を表示したい場合があります。このような場合には、フィルタリングされた配列やソートされた配列を返すcomputedプロパティを作成することができます。</target>
        </trans-unit>
        <trans-unit id="f25a04e7657c04aa0e31d2f5b48fdb386a99c532" translate="yes" xml:space="preserve">
          <source>Sometimes we want to track changes of the reactive object (&lt;code&gt;ref&lt;/code&gt; or &lt;code&gt;reactive&lt;/code&gt;) but we also want prevent changing it from a certain place of the application. For example, when we have a &lt;a href=&quot;component-provide-inject&quot;&gt;provided&lt;/a&gt; reactive object, we want to prevent mutating it where it's injected. To do so, we can create a readonly proxy to the original object:</source>
          <target state="translated">リアクティブオブジェクト（ &lt;code&gt;ref&lt;/code&gt; または &lt;code&gt;reactive&lt;/code&gt; ）の変更を追跡したい場合もありますが、アプリケーションの特定の場所からの変更を防ぎたい場合もあります。たとえば、&lt;a href=&quot;component-provide-inject&quot;&gt;提供された&lt;/a&gt;リアクティブオブジェクトがある場合、それが注入された場所でオブジェクトが変更されないようにする必要があります。これを行うには、元のオブジェクトへの読み取り専用プロキシを作成します。</target>
        </trans-unit>
        <trans-unit id="bb4776e0f84b8cab0978edcc2a16ccf37eb32d43" translate="yes" xml:space="preserve">
          <source>Sometimes you may want to assign a number of new properties to an existing object, for example using &lt;code&gt;Object.assign()&lt;/code&gt; or &lt;code&gt;_.extend()&lt;/code&gt;. In such cases, you should create a fresh object with properties from both objects. So instead of:</source>
          <target state="translated">たとえば、 &lt;code&gt;Object.assign()&lt;/code&gt; または &lt;code&gt;_.extend()&lt;/code&gt; を使用して、既存のオブジェクトにいくつかの新しいプロパティを割り当てたい場合があります。このような場合は、両方のオブジェクトのプロパティを使用して新しいオブジェクトを作成する必要があります。だから代わりに：</target>
        </trans-unit>
        <trans-unit id="4216179a7f142347ead5e8b4c8a44ddd1938267a" translate="yes" xml:space="preserve">
          <source>Sometimes you may want to assign a number of properties to an existing object, for example using &lt;code&gt;Object.assign()&lt;/code&gt; or &lt;code&gt;_.extend()&lt;/code&gt;. However, new properties added to the object will not trigger changes. In such cases, create a fresh object with properties from both the original object and the mixin object:</source>
          <target state="translated">たとえば、 &lt;code&gt;Object.assign()&lt;/code&gt; または &lt;code&gt;_.extend()&lt;/code&gt; を使用して、既存のオブジェクトにいくつかのプロパティを割り当てたい場合があります。ただし、オブジェクトに追加された新しいプロパティは変更をトリガーしません。このような場合は、元のオブジェクトとミックスインオブジェクトの両方のプロパティを使用して、新しいオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="4a3e5c479936fa0c0c3ae63c92af5bdeccbe0976" translate="yes" xml:space="preserve">
          <source>Sometimes, it&amp;rsquo;s useful for slot content to have access to data only available in the child component. For example, imagine a &lt;code&gt;&amp;lt;current-user&amp;gt;&lt;/code&gt; component with the following template:</source>
          <target state="translated">スロットコンテンツが子コンポーネントでのみ利用可能なデータにアクセスできると便利な場合があります。たとえば、次のテンプレートを持つ &lt;code&gt;&amp;lt;current-user&amp;gt;&lt;/code&gt; コンポーネントを想像してください。</target>
        </trans-unit>
        <trans-unit id="d2dd5e9a7fd5d98bf25e0a4d4fb18f9f4c3db2f1" translate="yes" xml:space="preserve">
          <source>Sometimes, it&amp;rsquo;s useful to dynamically switch between components, like in a tabbed interface:</source>
          <target state="translated">タブインターフェイスのように、コンポーネントを動的に切り替えると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="f98399635dcaa9fb92ae8c33f20e2898527837a6" translate="yes" xml:space="preserve">
          <source>Sometimes, it's useful for slot content to have access to data only available in the child component. It's a common case when a component is used to render an array of items, and we want to be able to customize the way each item is rendered.</source>
          <target state="translated">スロットコンテンツでは、子コンポーネントでしか利用できないデータにアクセスできることが便利な場合があります。これは、あるコンポーネントがアイテムの配列をレンダリングするために使用され、各アイテムのレンダリング方法をカスタマイズできるようにしたい場合によくあるケースです。</target>
        </trans-unit>
        <trans-unit id="8c22129f03ba057d1a81b6eb4f7dbc5cd8f53769" translate="yes" xml:space="preserve">
          <source>Sometimes, it's useful to dynamically switch between components, like in a tabbed interface:</source>
          <target state="translated">タブ付きインターフェイスのように、コンポーネントを動的に切り替えるのに便利なことがあります。</target>
        </trans-unit>
        <trans-unit id="878866be830f3d4c0492c7b15ce7d3313f921fc8" translate="yes" xml:space="preserve">
          <source>Soup &lt;em&gt;of the&lt;/em&gt; day</source>
          <target state="translated">スープ&lt;em&gt;の&lt;/em&gt;日</target>
        </trans-unit>
        <trans-unit id="d180f8bdb033e9ee4c654b9ecb9c6a807595b405" translate="yes" xml:space="preserve">
          <source>Source: &lt;a href=&quot;https://www.inkonhand.com/2015/10/the-serial-oxford-comma-when-and-why-to-use-it/&quot;&gt;The Serial (Oxford) Comma: When and Why To Use It (opens new window)&lt;/a&gt;</source>
          <target state="translated">出典：&lt;a href=&quot;https://www.inkonhand.com/2015/10/the-serial-oxford-comma-when-and-why-to-use-it/&quot;&gt;シリアル（オックスフォード）コンマ：いつ、なぜ使用するか（新しいウィンドウが開きます）&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e3b9938ede233236eb1cd82e999d8e494cee5f74" translate="yes" xml:space="preserve">
          <source>Special &lt;code&gt;is&lt;/code&gt; prop usage is restricted to the reserved &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; tag only</source>
          <target state="translated">特別なの &lt;code&gt;is&lt;/code&gt; 小道具の使用が予約済みの &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; タグのみに制限されていることです</target>
        </trans-unit>
        <trans-unit id="9898b37c34a88e00f23e82b5e3dc9a1701903a0c" translate="yes" xml:space="preserve">
          <source>Special Attributes</source>
          <target state="translated">特殊属性</target>
        </trans-unit>
        <trans-unit id="c1844df643c3c6b29d9ebd395e5456144c913b68" translate="yes" xml:space="preserve">
          <source>Special Attributes - ref</source>
          <target state="translated">特殊属性-参照</target>
        </trans-unit>
        <trans-unit id="7f375124a7e84608fdea56b183bf085ef84dd0dd" translate="yes" xml:space="preserve">
          <source>Specifies a default value for the prop. If the prop is not passed, this value will be used instead. Object or array defaults must be returned from a factory function.</source>
          <target state="translated">プロップのデフォルト値を指定します。プロップが渡されなかった場合は、この値が代わりに使用されます。オブジェクトまたは配列のデフォルト値は、ファクトリー関数から返されなければなりません。</target>
        </trans-unit>
        <trans-unit id="5cf7af7c10f0573850ae6d92c49417cd3597e370" translate="yes" xml:space="preserve">
          <source>Specifies a method to recognize custom elements defined outside of Vue (e.g., using the Web Components APIs). If component matches this condition, it won't need local or global registration and Vue won't throw a warning about an &lt;code&gt;Unknown custom element&lt;/code&gt;.</source>
          <target state="translated">Vueの外部で定義されたカスタム要素を認識するメソッドを指定します（たとえば、Web Components APIを使用）。コンポーネントがこの条件に一致する場合、ローカルまたはグローバル登録は必要なく、Vueは &lt;code&gt;Unknown custom element&lt;/code&gt; に関する警告をスローしません。</target>
        </trans-unit>
        <trans-unit id="3d419b352796d39146919ef5966306201da0baac" translate="yes" xml:space="preserve">
          <source>Specify the parent instance for the instance to be created. Establishes a parent-child relationship between the two. The parent will be accessible as &lt;code&gt;this.$parent&lt;/code&gt; for the child, and the child will be pushed into the parent&amp;rsquo;s &lt;code&gt;$children&lt;/code&gt; array.</source>
          <target state="translated">作成するインスタンスの親インスタンスを指定します。2つの間に親子関係を確立します。親は子の &lt;code&gt;this.$parent&lt;/code&gt; としてアクセスでき、子は親の &lt;code&gt;$children&lt;/code&gt; 配列にプッシュされます。</target>
        </trans-unit>
        <trans-unit id="e4de7be6dcaca74a1df3b6f74eed72c7caf49130" translate="yes" xml:space="preserve">
          <source>Staggering List Transitions</source>
          <target state="translated">スタガリングリストの遷移</target>
        </trans-unit>
        <trans-unit id="b27a0b62f6b0f0e5d6bdbda21b8a0fe747c08c58" translate="yes" xml:space="preserve">
          <source>Standalone &lt;code&gt;computed&lt;/code&gt; properties</source>
          <target state="translated">スタンドアロンの &lt;code&gt;computed&lt;/code&gt; プロパティ</target>
        </trans-unit>
        <trans-unit id="b3883f88eaf74aa505b11f01894c4909220af6a1" translate="yes" xml:space="preserve">
          <source>Standards</source>
          <target state="translated">Standards</target>
        </trans-unit>
        <trans-unit id="5ba91e4b27bd154b6feecd545db4023c8e7c12d0" translate="yes" xml:space="preserve">
          <source>Start by running the &lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;migration helper&lt;/a&gt; on a current project. We&amp;rsquo;ve carefully minified and compressed a senior Vue dev into a simple command line interface. Whenever they recognize an obsolete feature, they&amp;rsquo;ll let you know, offer suggestions, and provide links to more info.</source>
          <target state="translated">現在のプロジェクトで&lt;a href=&quot;https://github.com/vuejs/vue-migration-helper&quot;&gt;移行ヘルパー&lt;/a&gt;を実行することから始めます。上級Vue開発者を注意深く縮小し、シンプルなコマンドラインインターフェイスに圧縮しました。廃止された機能を認識すると、通知、提案、詳細情報へのリンクが提供されます。</target>
        </trans-unit>
        <trans-unit id="28a4d07d95fe98bb4c6125accbb70808be25a998" translate="yes" xml:space="preserve">
          <source>Start learning Vue 3 at &lt;a href=&quot;https://www.vuemastery.com/courses-path/vue3&quot;&gt;Vue Mastery (opens new window)&lt;/a&gt;.</source>
          <target state="translated">VueMasteryで&lt;a href=&quot;https://www.vuemastery.com/courses-path/vue3&quot;&gt;Vue3の&lt;/a&gt;学習を開始します（新しいウィンドウが開きます）。</target>
        </trans-unit>
        <trans-unit id="5fcf8af955dfbcfec984375c6e8f6a528e65233d" translate="yes" xml:space="preserve">
          <source>Starting in 2.3.0+ you can provide an array of multiple (prefixed) values to a style property, for example:</source>
          <target state="translated">2.3.0.0+からは、例えばスタイルプロパティに複数の(接頭辞のついた)値の配列を与えることができます。</target>
        </trans-unit>
        <trans-unit id="9ba53e05f135de31a97be4f79621e7c2bfae116b" translate="yes" xml:space="preserve">
          <source>Starting in 2.4.0+, &lt;code&gt;v-on&lt;/code&gt; also supports binding to an object of event/listener pairs without an argument. Note when using the object syntax, it does not support any modifiers.</source>
          <target state="translated">2.4.0以降では、 &lt;code&gt;v-on&lt;/code&gt; は引数なしのイベント/リスナーペアのオブジェクトへのバインドもサポートします。オブジェクト構文を使用する場合、修飾子はサポートされません。</target>
        </trans-unit>
        <trans-unit id="9b9230ebf8a27183774b5eb88b79650092ee23d2" translate="yes" xml:space="preserve">
          <source>Starting in version 2.6.0, it is also possible to use a JavaScript expression in a directive argument by wrapping it with square brackets:</source>
          <target state="translated">バージョン 2.6.0 からは、JavaScript の式を角括弧で囲むことで、ディレクティブの引数に使用することも可能になりました。</target>
        </trans-unit>
        <trans-unit id="bfa146787ba4b5ec0af7e28c9b9db98dcdf2cd1c" translate="yes" xml:space="preserve">
          <source>State Management</source>
          <target state="translated">国家管理</target>
        </trans-unit>
        <trans-unit id="d5d64221ddf91f88df67cce91813f4262eb7edaf" translate="yes" xml:space="preserve">
          <source>State Transitions</source>
          <target state="translated">状態遷移</target>
        </trans-unit>
        <trans-unit id="a872ca8fe22c7e62b5337472cd220dc9385362c8" translate="yes" xml:space="preserve">
          <source>Stop listening for an event with &lt;code&gt;$off(eventName, eventHandler)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;$off(eventName, eventHandler)&lt;/code&gt; イベントのリッスンを停止します</target>
        </trans-unit>
        <trans-unit id="f208c0bbf3772e76982a8bda3a5274d77fdd02bf" translate="yes" xml:space="preserve">
          <source>Stopping the Watcher</source>
          <target state="translated">ウォッチャーを止める</target>
        </trans-unit>
        <trans-unit id="a59e5fba28ea5c4503821b338479233b19afe716" translate="yes" xml:space="preserve">
          <source>Store&amp;rsquo;s Event Emitter &lt;sup&gt;removed&lt;/sup&gt;</source>
          <target state="translated">ストアのイベントエミッターが&lt;sup&gt;削除されました&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="d773159a1a0982856fe46c12315a0727637b7f5c" translate="yes" xml:space="preserve">
          <source>Stories of Web Users (opens new window)</source>
          <target state="translated">Webユーザーの体験談(新しいウィンドウが開きます</target>
        </trans-unit>
        <trans-unit id="3df63b7acb0522da685dad5fe84b81fdd7b25264" translate="yes" xml:space="preserve">
          <source>String</source>
          <target state="translated">String</target>
        </trans-unit>
        <trans-unit id="91315c1968e95b4caef2bb0299209f84b45e1fa3" translate="yes" xml:space="preserve">
          <source>String templates (e.g. &lt;code&gt;template: '...'&lt;/code&gt;)</source>
          <target state="translated">文字列テンプレート（例： &lt;code&gt;template: '...'&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="84e89cde6c5037b89a187a9f976fce4b0a1427b8" translate="yes" xml:space="preserve">
          <source>Strings are just the beginning though! Slots can also contain any template code, including HTML:</source>
          <target state="translated">文字列はまだ序の口に過ぎません。スロットにはHTMLを含む任意のテンプレートコードを含めることができます。</target>
        </trans-unit>
        <trans-unit id="e470c308e845a09614e0edbb14273cef3760f9e6" translate="yes" xml:space="preserve">
          <source>Structure Your Content</source>
          <target state="translated">コンテンツの構造</target>
        </trans-unit>
        <trans-unit id="99a0efc6cfd85d8ff2732a6718140f822cb90472" translate="yes" xml:space="preserve">
          <source>Style</source>
          <target state="translated">Style</target>
        </trans-unit>
        <trans-unit id="74b4f2ed89813f9a73f7270d61c097ff9c059dd6" translate="yes" xml:space="preserve">
          <source>Style Guide</source>
          <target state="translated">スタイルガイド</target>
        </trans-unit>
        <trans-unit id="93b9066aa73ddae63c26874719afa6da8fe21b7f" translate="yes" xml:space="preserve">
          <source>Style Guide: Priority A: Essential</source>
          <target state="translated">スタイルガイド。優先度A:エッセンシャル</target>
        </trans-unit>
        <trans-unit id="43212530e7b38b61ce475ee08dd6944866d5239c" translate="yes" xml:space="preserve">
          <source>Style Guide: Priority B: Strongly Recommended</source>
          <target state="translated">スタイルガイド。優先度B:強く推奨</target>
        </trans-unit>
        <trans-unit id="dc97fc3044903277305bdcda1967fb4d1dab822e" translate="yes" xml:space="preserve">
          <source>Style Guide: Priority C: Recommended</source>
          <target state="translated">スタイルガイド。優先度C:推奨</target>
        </trans-unit>
        <trans-unit id="b9a479a71d55ce0478bf03634c2c6dce93bce7d7" translate="yes" xml:space="preserve">
          <source>Style Guide: Priority D: Use with Caution</source>
          <target state="translated">スタイルガイド。優先順位D.注意して使用する</target>
        </trans-unit>
        <trans-unit id="d999535d9e96f490d6db66310b5ab700b8118ee7" translate="yes" xml:space="preserve">
          <source>Style Guide: Rule Categories</source>
          <target state="translated">スタイルガイド.ルールのカテゴリー</target>
        </trans-unit>
        <trans-unit id="6d65d71b782f14936232d84229a5f61207efaa2f" translate="yes" xml:space="preserve">
          <source>Such fragmentation is what makes it difficult to understand and maintain a complex component. The separation of options obscures the underlying logical concerns. In addition, when working on a single logical concern, we have to constantly &quot;jump&quot; around option blocks for the relevant code.</source>
          <target state="translated">このような断片化は、複雑なコンポーネントを理解し、維持することを困難にします。オプションの分離は、根本的な論理的関心事を不明瞭にします。さらに、単一の論理的な問題に取り組んでいるときは、関連するコードのオプションブロックを常に「ジャンプ」しなければなりません。</target>
        </trans-unit>
        <trans-unit id="2f4d1ebbf70788826d3c9dfbc9cbeb9c0d4050de" translate="yes" xml:space="preserve">
          <source>Support for the &lt;a href=&quot;https://vuejs.org/v2/guide/components-edge-cases.html#Inline-Templates&quot;&gt;inline-template feature (opens new window)&lt;/a&gt; has been removed.</source>
          <target state="translated">&lt;a href=&quot;https://vuejs.org/v2/guide/components-edge-cases.html#Inline-Templates&quot;&gt;インラインテンプレート機能（新しいウィンドウを開く）の&lt;/a&gt;サポートは削除されました。</target>
        </trans-unit>
        <trans-unit id="25215fbc4c4e4e977ec770b409dd327c9660e279" translate="yes" xml:space="preserve">
          <source>Supporting Libraries</source>
          <target state="translated">図書館のサポート</target>
        </trans-unit>
        <trans-unit id="192495a00e88072aa34a9c8967ae9a28351881dd" translate="yes" xml:space="preserve">
          <source>Supports the main content, yet is separated and meaningful on its own content</source>
          <target state="translated">メインコンテンツをサポートしながらも、それ自身のコンテンツで分離され、意味のあるものになっています。</target>
        </trans-unit>
        <trans-unit id="fbbf610d0cedad761fd69b3fc9625e259e3102c5" translate="yes" xml:space="preserve">
          <source>Suppress all Vue logs and warnings.</source>
          <target state="translated">すべての Vue ログと警告を抑制します。</target>
        </trans-unit>
        <trans-unit id="3f84ef531f9db996694ad09a8fdddbca1440577e" translate="yes" xml:space="preserve">
          <source>Symbol</source>
          <target state="translated">Symbol</target>
        </trans-unit>
        <trans-unit id="ed4b8354b13fc6485ba3014a73af2e474df2ab5c" translate="yes" xml:space="preserve">
          <source>System Modifier Keys</source>
          <target state="translated">システム修飾キー</target>
        </trans-unit>
        <trans-unit id="50c8c29654572574cb09f443f4f7130974b6f7f0" translate="yes" xml:space="preserve">
          <source>TODO: example</source>
          <target state="translated">TODO:例</target>
        </trans-unit>
        <trans-unit id="319233f83072aefd32186de40076b6ff48598e8f" translate="yes" xml:space="preserve">
          <source>TODO: refactor to Vue 3</source>
          <target state="translated">TODO:Vue 3へのリファクタリング</target>
        </trans-unit>
        <trans-unit id="18d12d493f249dcb697f9fc3bec6d6ad8c163bbd" translate="yes" xml:space="preserve">
          <source>Take a bounce, for instance. In CSS we have to declare each keyframe, up and down. In JavaScript, we can express all of that movement within the ease, by declaring &lt;code&gt;bounce&lt;/code&gt; in the &lt;a href=&quot;https://greensock.com/&quot;&gt;GreenSock API (GSAP) (opens new window)&lt;/a&gt; (other JS libraries have other types of easing defaults).</source>
          <target state="translated">たとえば、バウンスします。CSSでは、各キーフレームを上下に宣言する必要があります。JavaScriptでは、&lt;a href=&quot;https://greensock.com/&quot;&gt;GreenSock API（GSAP）で&lt;/a&gt; &lt;code&gt;bounce&lt;/code&gt; を宣言する（新しいウィンドウを開く）ことで、その動きのすべてを簡単に表現できます（他のJSライブラリには他のタイプのイージングデフォルトがあります）。</target>
        </trans-unit>
        <trans-unit id="166b63f2d5ff9fdb1de967a0347fe8dc5241cd62" translate="yes" xml:space="preserve">
          <source>Takes a getter function and returns an immutable reactive &lt;a href=&quot;refs-api#ref&quot;&gt;ref&lt;/a&gt; object for the returned value from the getter.</source>
          <target state="translated">ゲッター関数を受け取り、ゲッターからの戻り値に対して不変のリアクティブ&lt;a href=&quot;refs-api#ref&quot;&gt;ref&lt;/a&gt;オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="c6f989572cedd84a74a07b5bf7b1664e4c8a72ec" translate="yes" xml:space="preserve">
          <source>Takes an inner value and returns a reactive and mutable ref object. The ref object has a single property &lt;code&gt;.value&lt;/code&gt; that points to the inner value.</source>
          <target state="translated">内部値を取り、リアクティブで可変のrefオブジェクトを返します。refオブジェクトには、内部値を指す単一のプロパティ &lt;code&gt;.value&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="33bb3dabb27aab83b18622439b2c5a20620a0ccf" translate="yes" xml:space="preserve">
          <source>Takes an object (reactive or plain) or a &lt;a href=&quot;refs-api#ref&quot;&gt;ref&lt;/a&gt; and returns a readonly proxy to the original. A readonly proxy is deep: any nested property accessed will be readonly as well.</source>
          <target state="translated">オブジェクト（リアクティブまたはプレーン）または&lt;a href=&quot;refs-api#ref&quot;&gt;ref&lt;/a&gt;を取得し、読み取り専用プロキシを元に戻します。読み取り専用プロキシは深いです。アクセスされるネストされたプロパティも読み取り専用になります。</target>
        </trans-unit>
        <trans-unit id="af6c5bccdb604b94eb8ab89652fd34fcc3eb3695" translate="yes" xml:space="preserve">
          <source>Takes multiple objects containing VNode props and merges them into a single object. A newly created object is returned, the objects passed as arguments are not modified.</source>
          <target state="translated">VNodeのプロップを含む複数のオブジェクトを取得し、それらを1つのオブジェクトにマージします。新しく作成されたオブジェクトが返され、引数として渡されたオブジェクトは変更されません。</target>
        </trans-unit>
        <trans-unit id="f9f57d40683ecffc4ca86380b17ed3c5176ebc50" translate="yes" xml:space="preserve">
          <source>Teleport</source>
          <target state="translated">Teleport</target>
        </trans-unit>
        <trans-unit id="ad764b00530e26ef237ac1f92eb62e0edb148231" translate="yes" xml:space="preserve">
          <source>Teleport provides a clean way to allow us to control under which parent in our DOM we want a piece of HTML to be rendered, without having to resort to global state or splitting this into two components.</source>
          <target state="translated">Teleport は、グローバルステートに頼らなくても、2 つのコンポーネントに分割しなくても、HTML の一部を DOM のどの親の下でレンダリングするかを制御できるようにするクリーンな方法を提供してくれます。</target>
        </trans-unit>
        <trans-unit id="d3c9825399d84e5c262586eb382db07595391d25" translate="yes" xml:space="preserve">
          <source>Template Compilation</source>
          <target state="translated">テンプレート編集</target>
        </trans-unit>
        <trans-unit id="2ae67e97b00487f3f90864f310b8d29b934c3c52" translate="yes" xml:space="preserve">
          <source>Template Directives</source>
          <target state="translated">テンプレートディレクティブ</target>
        </trans-unit>
        <trans-unit id="bba475c6198c22827306439a2203a42585619f02" translate="yes" xml:space="preserve">
          <source>Template Refs</source>
          <target state="translated">テンプレート参照</target>
        </trans-unit>
        <trans-unit id="efb3147068725b40c3436e7283942bba6c112bbf" translate="yes" xml:space="preserve">
          <source>Template Syntax</source>
          <target state="translated">テンプレート構文</target>
        </trans-unit>
        <trans-unit id="87f791533debd15ff2182bca9d38f5b619056fb8" translate="yes" xml:space="preserve">
          <source>Template expressions are sandboxed and only have access to a &lt;a href=&quot;https://github.com/vuejs/vue-next/blob/master/packages/shared/src/globalsWhitelist.ts#L3&quot;&gt;whitelist of globals (opens new window)&lt;/a&gt; such as &lt;code&gt;Math&lt;/code&gt; and &lt;code&gt;Date&lt;/code&gt;. You should not attempt to access user defined globals in template expressions.</source>
          <target state="translated">テンプレート式はサンドボックス化されており、 &lt;code&gt;Math&lt;/code&gt; や &lt;code&gt;Date&lt;/code&gt; など&lt;a href=&quot;https://github.com/vuejs/vue-next/blob/master/packages/shared/src/globalsWhitelist.ts#L3&quot;&gt;のグローバルのホワイトリスト（新しいウィンドウを開く）に&lt;/a&gt;のみアクセスできます。テンプレート式でユーザー定義のグローバルにアクセスしようとしないでください。</target>
        </trans-unit>
        <trans-unit id="a60e21f3a907038b2e4d24850447a7990f71ed0d" translate="yes" xml:space="preserve">
          <source>Template expressions are sandboxed and only have access to a &lt;a href=&quot;https://github.com/vuejs/vue/blob/v2.6.10/src/core/instance/proxy.js#L9&quot;&gt;whitelist of globals&lt;/a&gt; such as &lt;code&gt;Math&lt;/code&gt; and &lt;code&gt;Date&lt;/code&gt;. You should not attempt to access user defined globals in template expressions.</source>
          <target state="translated">テンプレート式はサンドボックス化されており、 &lt;code&gt;Math&lt;/code&gt; や &lt;code&gt;Date&lt;/code&gt; など&lt;a href=&quot;https://github.com/vuejs/vue/blob/v2.6.10/src/core/instance/proxy.js#L9&quot;&gt;のグローバルのホワイトリストに&lt;/a&gt;のみアクセスできます。テンプレート式でユーザー定義のグローバルにアクセスしないでください。</target>
        </trans-unit>
        <trans-unit id="f92fd54659b0bd943b37f93caaa1c5a2a10a3c44" translate="yes" xml:space="preserve">
          <source>Template refs</source>
          <target state="translated">テンプレート参照</target>
        </trans-unit>
        <trans-unit id="f25b700ed9f092123a43acb205a6869342cf9dd6" translate="yes" xml:space="preserve">
          <source>Templates</source>
          <target state="translated">Templates</target>
        </trans-unit>
        <trans-unit id="a55a275aa676930d9258569485d5b38eb1196630" translate="yes" xml:space="preserve">
          <source>Terms</source>
          <target state="translated">Terms</target>
        </trans-unit>
        <trans-unit id="10f908ceba5f009dd71054f4ef6b3aaa66ff44bc" translate="yes" xml:space="preserve">
          <source>TestCafe</source>
          <target state="translated">TestCafe</target>
        </trans-unit>
        <trans-unit id="6c55cd42db1a383a6c4c9ac73304eb05e0b98335" translate="yes" xml:space="preserve">
          <source>TestCafe is a Node.js based end-to-end framework that aims to provide easy setup so that developers can focus on creating tests that are easy to write and reliable.</source>
          <target state="translated">TestCafe は Node.js ベースのエンドツーエンドフレームワークで、開発者が書きやすく信頼性の高いテストの作成に集中できるように、簡単なセットアップを提供することを目的としています。</target>
        </trans-unit>
        <trans-unit id="b6278322851712ada779876114d43299a445fc78" translate="yes" xml:space="preserve">
          <source>TestCafe's Official Website (opens new window)</source>
          <target state="translated">テストカフェ公式サイト(新しいウィンドウが開きます</target>
        </trans-unit>
        <trans-unit id="0820b32b206b7352858e8903a838ed14319acdfd" translate="yes" xml:space="preserve">
          <source>Testing</source>
          <target state="translated">Testing</target>
        </trans-unit>
        <trans-unit id="c3328c39b0e29f78e9ff45db674248b1d245887d" translate="yes" xml:space="preserve">
          <source>Text</source>
          <target state="translated">Text</target>
        </trans-unit>
        <trans-unit id="03aaa3887a5a2deee792941da96ae7dda7d74089" translate="yes" xml:space="preserve">
          <source>Thanks to Vue&amp;rsquo;s Reactivity system, it always knows when to update (if you use it correctly). There are edge cases, however, when you might want to force an update, despite the fact that no reactive data has changed. Then there are other cases when you might want to prevent unnecessary updates.</source>
          <target state="translated">VueのReactivityシステムのおかげで、更新するタイミングが常にわかります（正しく使用する場合）。ただし、反応データが変更されていないにもかかわらず、強制的に更新したい場合があります。次に、不要な更新を防止したい場合があります。</target>
        </trans-unit>
        <trans-unit id="9d322d111908580c61e86985299bb692d828ff9a" translate="yes" xml:space="preserve">
          <source>Thanks to Vue's Reactivity system, it always knows when to update (if you use it correctly). There are edge cases, however, when you might want to force an update, despite the fact that no reactive data has changed. Then there are other cases when you might want to prevent unnecessary updates.</source>
          <target state="translated">Vue のリアクティブ システムのおかげで、更新のタイミングを常に把握しています(正しく使用していれば)。しかし、リアクティブなデータが変更されていないにもかかわらず、強制的に更新したい場合があります。また、不必要な更新を防止したい場合もあります。</target>
        </trans-unit>
        <trans-unit id="1cb8402824e1dedc0c9ad70f0e1846cefbab8933" translate="yes" xml:space="preserve">
          <source>Thanks to the &lt;code&gt;@enlarge-text=&quot;postFontSize += 0.1&quot;&lt;/code&gt; listener, the parent will receive the event and update the value of &lt;code&gt;postFontSize&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;@enlarge-text=&quot;postFontSize += 0.1&quot;&lt;/code&gt; リスナーのおかげで、親はイベントを受け取り、 &lt;code&gt;postFontSize&lt;/code&gt; の値を更新します。</target>
        </trans-unit>
        <trans-unit id="b5627556ef42d923efe566603e16cd6d339c54b6" translate="yes" xml:space="preserve">
          <source>Thanks to the &lt;code&gt;v-on:enlarge-text=&quot;postFontSize += 0.1&quot;&lt;/code&gt; listener, the parent will receive the event and update &lt;code&gt;postFontSize&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;v-on:enlarge-text=&quot;postFontSize += 0.1&quot;&lt;/code&gt; リスナーのおかげで、親はイベントを受け取り、 &lt;code&gt;postFontSize&lt;/code&gt; 値を更新します。</target>
        </trans-unit>
        <trans-unit id="36e5dbb5155a7f2f18ff2f7f92eeacd1bc83b650" translate="yes" xml:space="preserve">
          <source>That means the value of &lt;code&gt;v-slot&lt;/code&gt; can actually accept any valid JavaScript expression that can appear in the argument position of a function definition. So in supported environments (&lt;a href=&quot;single-file-components&quot;&gt;single-file components&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Browser_compatibility&quot;&gt;modern browsers&lt;/a&gt;), you can also use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring&quot;&gt;ES2015 destructuring&lt;/a&gt; to pull out specific slot props, like so:</source>
          <target state="translated">つまり、 &lt;code&gt;v-slot&lt;/code&gt; の値は、関数定義の引数の位置に現れる可能性のある有効なJavaScript式を実際に受け入れることができます。したがって、サポートされている環境（&lt;a href=&quot;single-file-components&quot;&gt;単一ファイルコンポーネント&lt;/a&gt;または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Browser_compatibility&quot;&gt;最新のブラウザー&lt;/a&gt;）では、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring&quot;&gt;ES2015の構造解除を&lt;/a&gt;使用して、次のように特定のスロットプロップを取得することもできます。</target>
        </trans-unit>
        <trans-unit id="27c8aa4b0bdc5143989d71993befdc85152219b3" translate="yes" xml:space="preserve">
          <source>That means the value of &lt;code&gt;v-slot&lt;/code&gt; can actually accept any valid JavaScript expression that can appear in the argument position of a function definition. So you can also use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring&quot;&gt;ES2015 destructuring (opens new window)&lt;/a&gt; to pull out specific slot props, like so:</source>
          <target state="translated">つまり、 &lt;code&gt;v-slot&lt;/code&gt; の値は、関数定義の引数の位置に表示される可能性のある有効なJavaScript式を実際に受け入れることができます。したがって、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring&quot;&gt;ES2015の非構造化（新しいウィンドウを開く）&lt;/a&gt;を使用して、次のように特定のスロット小道具を引き出すこともできます。</target>
        </trans-unit>
        <trans-unit id="bcb7688f15ef595e1970dc731883ce107eed33d5" translate="yes" xml:space="preserve">
          <source>That means this element:</source>
          <target state="translated">つまり、この要素。</target>
        </trans-unit>
        <trans-unit id="e26ac9d99d2de3a31a44d33d135f52e40dec965b" translate="yes" xml:space="preserve">
          <source>That said, it would probably make a better comparison between Vue core and Ember&amp;rsquo;s &lt;a href=&quot;https://guides.emberjs.com/v2.10.0/templates/handlebars-basics/&quot;&gt;templating&lt;/a&gt; and &lt;a href=&quot;https://guides.emberjs.com/v2.10.0/object-model/&quot;&gt;object model&lt;/a&gt; layers:</source>
          <target state="translated">そうは言っても、おそらくVueコアとEmberの&lt;a href=&quot;https://guides.emberjs.com/v2.10.0/templates/handlebars-basics/&quot;&gt;テンプレート&lt;/a&gt;層および&lt;a href=&quot;https://guides.emberjs.com/v2.10.0/object-model/&quot;&gt;オブジェクトモデル&lt;/a&gt;レイヤーをより適切に比較できるでしょう。</target>
        </trans-unit>
        <trans-unit id="ebe9db2fac785a6fb1584b0f003bd0d058f9da0a" translate="yes" xml:space="preserve">
          <source>That slot has access to the same instance properties (i.e. the same &quot;scope&quot;) as the rest of the template.</source>
          <target state="translated">そのスロットは、テンプレートの残りの部分と同じインスタンスプロパティ(すなわち同じ &quot;スコープ &quot;にアクセスできます)にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="fd91ee6e59ac928406a857815fec4a8fd6adac41" translate="yes" xml:space="preserve">
          <source>That slot has access to the same instance properties (i.e. the same &amp;ldquo;scope&amp;rdquo;) as the rest of the template. The slot does &lt;strong&gt;not&lt;/strong&gt; have access to &lt;code&gt;&amp;lt;navigation-link&amp;gt;&lt;/code&gt;&amp;lsquo;s scope. For example, trying to access &lt;code&gt;url&lt;/code&gt; would not work:</source>
          <target state="translated">そのスロットは、テンプレートの他の部分と同じインスタンスプロパティ（つまり、同じ「スコープ」）にアクセスできます。スロットは &lt;code&gt;&amp;lt;navigation-link&amp;gt;&lt;/code&gt; のスコープにアクセスできませ&lt;strong&gt;ん&lt;/strong&gt;。たとえば、 &lt;code&gt;url&lt;/code&gt; にアクセスしようとしても機能しません。</target>
        </trans-unit>
        <trans-unit id="459dd83f2362d8a07c853704c9fdaa721e9d7d51" translate="yes" xml:space="preserve">
          <source>That template doesn&amp;rsquo;t feel great. It&amp;rsquo;s not only verbose, but we&amp;rsquo;re duplicating &lt;code&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/code&gt; for every heading level and will have to do the same when we add the anchor element.</source>
          <target state="translated">そのテンプレートは気分が良くありません。これは冗長であるだけでなく、すべての見出しレベルで &lt;code&gt;&amp;lt;slot&amp;gt;&amp;lt;/slot&amp;gt;&lt;/code&gt; を複製しているため、アンカー要素を追加するときにも同じようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="40ca5f9431c8b1d278ec924f34122ffafff7e4e3" translate="yes" xml:space="preserve">
          <source>That was rather quick and requires some knowledge of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot;&gt;Proxies (opens new window)&lt;/a&gt; to understand! So let&amp;rsquo;s dive in a bit. There&amp;rsquo;s a lot of literature on Proxies, but what you really need to know is that a &lt;strong&gt;Proxy is an object that encases another object or function and allows you to intercept it.&lt;/strong&gt;</source>
          <target state="translated">それはかなり迅速であり、理解するには&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot;&gt;プロキシの&lt;/a&gt;知識が必要です（新しいウィンドウが開きます）。それでは、少し詳しく見ていきましょう。プロキシに関する文献はたくさんありますが、本当に知っておく必要があるのは、&lt;strong&gt;プロキシは別のオブジェクトまたは関数を包含し、それを傍受できるオブジェクトであるということです。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f0e76918c986bcb84adf08fee89b468d3a1fda00" translate="yes" xml:space="preserve">
          <source>That won&amp;rsquo;t work, however, because only the &lt;code&gt;&amp;lt;current-user&amp;gt;&lt;/code&gt; component has access to the &lt;code&gt;user&lt;/code&gt; and the content we&amp;rsquo;re providing is rendered in the parent.</source>
          <target state="translated">理由だけでそれは、しかし仕事、しません &lt;code&gt;&amp;lt;current-user&amp;gt;&lt;/code&gt; コンポーネントがアクセス持つ &lt;code&gt;user&lt;/code&gt; 、私たちが提供しているコンテンツが親にレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="42b1a4945329f894f6cd581118c84d29929b3eb9" translate="yes" xml:space="preserve">
          <source>That won't work, however, because only the &lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt; component has access to the &lt;code&gt;item&lt;/code&gt; and we are providing the slot content from its parent.</source>
          <target state="translated">ただし、 &lt;code&gt;&amp;lt;todo-list&amp;gt;&lt;/code&gt; コンポーネントのみが &lt;code&gt;item&lt;/code&gt; アクセスでき、その親からスロットコンテンツを提供しているため、これは機能しません。</target>
        </trans-unit>
        <trans-unit id="f7e6eaf815a0b389b506fd9203ee98688ac385cc" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about DOM template parsing caveats for now &amp;ndash; and actually, the end of Vue&amp;rsquo;s &lt;em&gt;Essentials&lt;/em&gt;. Congratulations! There&amp;rsquo;s still more to learn, but first, we recommend taking a break to play with Vue yourself and build something fun.</source>
          <target state="translated">今のところ、DOMテンプレートの解析に関する警告について知っておく必要があるのはこれだけです。実際、Vueの&lt;em&gt;Essentialsの&lt;/em&gt;終わりです。おめでとう！学ぶべきことはまだまだありますが、最初に、Vueを自分で遊んで楽しいものを作るために休憩を取ることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="e65f913a2b8930db25e11b615901938e35677612" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about custom component events for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-custom-events&quot;&gt;Custom Events&lt;/a&gt;.</source>
          <target state="translated">今のところ、カスタムコンポーネントイベントについて知っておくべきことはこれだけですが、このページを読み終えて内容に慣れたら、後で戻って&lt;a href=&quot;components-custom-events&quot;&gt;カスタムイベントの&lt;/a&gt;完全なガイドを読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="814dc84544fcf8f9ba3af47bc369c70717b8fdfa" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about dynamic components for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-dynamic-async&quot;&gt;Dynamic &amp;amp; Async Components&lt;/a&gt;.</source>
          <target state="translated">今のところ、動的コンポーネントについて知っておくべきことはこれだけですが、このページを読み終えて内容に慣れたら、後で戻って&lt;a href=&quot;components-dynamic-async&quot;&gt;動的および非同期コンポーネント&lt;/a&gt;に関する完全なガイドを読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="1370785d9557daacd2793450c22d6061fa0adbc6" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about props for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-props&quot;&gt;Props&lt;/a&gt;.</source>
          <target state="translated">今のところ、小道具について知っておくべきことはこれだけですが、このページを読み終えて内容に慣れたら、後で戻って&lt;a href=&quot;components-props&quot;&gt;小道具の&lt;/a&gt;完全なガイドを読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="1e701db7e6d05f9288626f8d97a85fc554f9593e" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about registration for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-registration&quot;&gt;Component Registration&lt;/a&gt;.</source>
          <target state="translated">今のところ登録について知っておく必要があるのはこれだけですが、このページを読み終えて内容に満足したら、後で戻って&lt;a href=&quot;components-registration&quot;&gt;コンポーネント登録&lt;/a&gt;に関する完全なガイドを読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="8e7ac0de9bc7b2393fad83ed8e57aa35094e7cc2" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s all you need to know about slots for now, but once you&amp;rsquo;ve finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;components-slots&quot;&gt;Slots&lt;/a&gt;.</source>
          <target state="translated">今のところ、スロットについて知っておくべきことはこれだけですが、このページを読み終えて内容に慣れたら、後で戻って&lt;a href=&quot;components-slots&quot;&gt;スロット&lt;/a&gt;に関する完全なガイドを読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6f39b1bdd26be7312e776a774c103e8b83e7cb1a" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why for any complex logic, you should use a &lt;strong&gt;computed property&lt;/strong&gt;.</source>
          <target state="translated">そのため、複雑なロジックでは、&lt;strong&gt;計算されたプロパティ&lt;/strong&gt;を使用する必要があり&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="3b16487797e90834fa5c92964e14dabbe10606c8" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why instead, we recommend emitting events in the pattern of &lt;code&gt;update:myPropName&lt;/code&gt;. For example, in a hypothetical component with a &lt;code&gt;title&lt;/code&gt; prop, we could communicate the intent of assigning a new value with:</source>
          <target state="translated">そのため、代わりに &lt;code&gt;update:myPropName&lt;/code&gt; のパターンでイベントを発行することをお勧めします。たとえば、 &lt;code&gt;title&lt;/code&gt; プロップを持つ架空のコンポーネントでは、新しい値を割り当てる意図を次のように伝えることができます。</target>
        </trans-unit>
        <trans-unit id="996c0c7a918cb9833eb237973fce54baee6b3199" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why there&amp;rsquo;s a &lt;a href=&quot;https://github.com/vuejs/jsx&quot;&gt;Babel plugin&lt;/a&gt; to use JSX with Vue, getting us back to a syntax that&amp;rsquo;s closer to templates:</source>
          <target state="translated">これが、VSXでJSXを使用する&lt;a href=&quot;https://github.com/vuejs/jsx&quot;&gt;Babelプラグイン&lt;/a&gt;があり、テンプレートにより近い構文に戻る理由です。</target>
        </trans-unit>
        <trans-unit id="ad7c55b719b44c49b49edeaa4e2789ec22bd2ca2" translate="yes" xml:space="preserve">
          <source>That&amp;rsquo;s why we offer a full system for rapid Vue.js development. &lt;a href=&quot;https://github.com/vuejs/vue-cli&quot;&gt;Vue CLI&lt;/a&gt; aims to be the standard tooling baseline for the Vue ecosystem. It ensures the various build tools work smoothly together with sensible defaults so you can focus on writing your app instead of spending hours wrangling with configurations. At the same time, it still offers the flexibility to tweak the configuration of each tool to specific needs.</source>
          <target state="translated">そのため、迅速なVue.js開発のための完全なシステムを提供しています。&lt;a href=&quot;https://github.com/vuejs/vue-cli&quot;&gt;Vue CLI&lt;/a&gt;は、Vueエコシステムの標準的なツールベースラインになることを目指しています。これにより、さまざまなビルドツールが適切なデフォルトとスムーズに連携し、構成に時間を費やす代わりにアプリの作成に集中できます。同時に、特定のニーズに合わせて各ツールの構成を調整する柔軟性も提供します。</target>
        </trans-unit>
        <trans-unit id="bba91aec83e99447744160b88bf3ba0ab32b499e" translate="yes" xml:space="preserve">
          <source>That's all you need to know about DOM template parsing caveats for now - and actually, the end of Vue's &lt;em&gt;Essentials&lt;/em&gt;. Congratulations! There's still more to learn, but first, we recommend taking a break to play with Vue yourself and build something fun.</source>
          <target state="translated">今のところ、DOMテンプレートの解析に関する警告について知っておく必要があるのはこれだけです。実際には、Vueの&lt;em&gt;Essentials&lt;/em&gt;はこれで終わりです。おめでとう！学ぶことはまだまだありますが、最初に、休憩してVueで遊んで、何か楽しいものを作ることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="d5b93f49048dd9b725a716b45c67fedfd58d6b11" translate="yes" xml:space="preserve">
          <source>That's all you need to know about custom component events for now, but once you've finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;component-custom-events&quot;&gt;Custom Events&lt;/a&gt;.</source>
          <target state="translated">今のところ、カスタムコンポーネントイベントについて知っておく必要があるのはこれだけですが、このページを読み終えて内容に慣れたら、後で戻って&lt;a href=&quot;component-custom-events&quot;&gt;カスタムイベントの&lt;/a&gt;完全ガイドを読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="e0accce133742657fa043ef7d74e9679b32ef231" translate="yes" xml:space="preserve">
          <source>That's all you need to know about dynamic components for now, but once you've finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;component-dynamic-async&quot;&gt;Dynamic &amp;amp; Async Components&lt;/a&gt;.</source>
          <target state="translated">今のところ、動的コンポーネントについて知っておく必要があるのはこれだけですが、このページを読み終えて内容に慣れたら、後で戻って&lt;a href=&quot;component-dynamic-async&quot;&gt;動的コンポーネントと非同期コンポーネントの&lt;/a&gt;完全なガイドを読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="94a1c23c246a38952fa29f092346ab4e24f7ead2" translate="yes" xml:space="preserve">
          <source>That's all you need to know about props for now, but once you've finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;component-props&quot;&gt;Props&lt;/a&gt;.</source>
          <target state="translated">今のところ小道具について知っておく必要があるのはこれだけですが、このページを読み終えて内容に慣れたら、後で戻って&lt;a href=&quot;component-props&quot;&gt;小道具の&lt;/a&gt;完全なガイドを読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="7a64868a5bbef5500d81de810e0706920f9d3be1" translate="yes" xml:space="preserve">
          <source>That's all you need to know about registration for now, but once you've finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;component-registration&quot;&gt;Component Registration&lt;/a&gt;.</source>
          <target state="translated">今のところ登録について知っておく必要があるのはこれだけですが、このページを読み終えて内容に慣れたら、後で戻って&lt;a href=&quot;component-registration&quot;&gt;コンポーネント登録の&lt;/a&gt;完全なガイドを読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c7d253078876f24169567da70107c04eb1ce5f8f" translate="yes" xml:space="preserve">
          <source>That's all you need to know about slots for now, but once you've finished reading this page and feel comfortable with its content, we recommend coming back later to read the full guide on &lt;a href=&quot;component-slots&quot;&gt;Slots&lt;/a&gt;.</source>
          <target state="translated">今のところスロットについて知っておく必要があるのはこれだけですが、このページを読み終えて内容に満足したら、後で戻って&lt;a href=&quot;component-slots&quot;&gt;スロットの&lt;/a&gt;完全なガイドを読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="9cf2ae773074cc55199394b6b9682fe8b4e4cd25" translate="yes" xml:space="preserve">
          <source>That's why for complex logic that includes reactive data, you should use a &lt;strong&gt;computed property&lt;/strong&gt;.</source>
          <target state="translated">そのため、リアクティブデータを含む複雑なロジックの場合は、&lt;strong&gt;計算されたプロパティ&lt;/strong&gt;を使用する必要があり&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="65dd67615a2c35df2f233f7e1f18e52094ea1893" translate="yes" xml:space="preserve">
          <source>That's why there's a &lt;a href=&quot;https://github.com/vuejs/jsx-next&quot;&gt;Babel plugin (opens new window)&lt;/a&gt; to use JSX with Vue, getting us back to a syntax that's closer to templates:</source>
          <target state="translated">そのため、VueでJSXを使用&lt;a href=&quot;https://github.com/vuejs/jsx-next&quot;&gt;する&lt;/a&gt;ためのBabelプラグイン（新しいウィンドウが開きます）があり、テンプレートに近い構文に戻ります。</target>
        </trans-unit>
        <trans-unit id="380f6acd2ffeb81256b1988e0d724bdacc81b791" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;../composition-api-provide-inject&quot;&gt;inject&lt;/a&gt; API can be used inside default functions.</source>
          <target state="translated">&lt;a href=&quot;../composition-api-provide-inject&quot;&gt;注入の&lt;/a&gt;APIは、デフォルトの関数の内部で使用することができます。</target>
        </trans-unit>
        <trans-unit id="e8054cccceec827f8cba34b7a1b6bd02a65cd67d" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;guide/installation&quot;&gt;Installation&lt;/a&gt; page provides more options of installing Vue. Note: We &lt;strong&gt;do not&lt;/strong&gt; recommend that beginners start with &lt;code&gt;vue-cli&lt;/code&gt;, especially if you are not yet familiar with Node.js-based build tools.</source>
          <target state="translated">[ &lt;a href=&quot;guide/installation&quot;&gt;インストール]&lt;/a&gt;ページには、Vueをインストールするためのその他のオプションがあります。注：特にNode.jsベースのビルドツールにまだ慣れていない場合は、初心者が &lt;code&gt;vue-cli&lt;/code&gt; から始める&lt;strong&gt;ことは&lt;/strong&gt;お勧めしません。</target>
        </trans-unit>
        <trans-unit id="a5ab4cb7708169e37819b6bac8b1dd32c12097a8" translate="yes" xml:space="preserve">
          <source>The &lt;a href=&quot;https://www.npmjs.com/package/pluralize&quot;&gt;pluralize&lt;/a&gt; package on NPM serves this purpose nicely, but if you only want to pluralize a specific word or want to have special output for cases like &lt;code&gt;0&lt;/code&gt;, then you can also easily define your own pluralize functions. For example:</source>
          <target state="translated">NPM の&lt;a href=&quot;https://www.npmjs.com/package/pluralize&quot;&gt;複数形&lt;/a&gt;パッケージはこの目的をうまく果たしますが、特定の単語のみを複数形にしたい場合、または &lt;code&gt;0&lt;/code&gt; のような場合の特別な出力が必要な場合は、独自の複数形関数を簡単に定義することもできます。例えば：</target>
        </trans-unit>
        <trans-unit id="d9164352c56312292582372111c07ba7f53f47ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$children&lt;/code&gt; instance property has been removed from Vue 3.0 and is no longer supported.</source>
          <target state="translated">&lt;code&gt;$children&lt;/code&gt; インスタンス・プロパティは、Vueの3.0から削除され、サポートされなくなりました。</target>
        </trans-unit>
        <trans-unit id="96eefbbce0803602164da064c9e1efcc96fb085c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$listeners&lt;/code&gt; object has been removed in Vue 3. Event listeners are now part of &lt;code&gt;$attrs&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;$listeners&lt;/code&gt; オブジェクトは、Vueの3イベントリスナーで削除されました今の一部である &lt;code&gt;$attrs&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="05878157178d05a4e01a1c89173d306a9458b9ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;$route&lt;/code&gt; property is now reactive, so you can use a watcher to react to route changes, like this:</source>
          <target state="translated">&lt;code&gt;$route&lt;/code&gt; プロパティが反応性があるので、あなたは、このようなルート変更、に反応するウォッチャーを使用することができます。</target>
        </trans-unit>
        <trans-unit id="26e5d2730ae73e0e0de2df953cf2ee3a5fad3d02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; will be the actual link (and will get the correct href), but the active class will be applied to the outer &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 実際のリンクになり（正しいHREFを取得します）が、アクティブクラスは、外側に適用されます &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a1c768384d9ec752c708894881ada4881202a8fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; will not be visible until the compilation is done.</source>
          <target state="translated">&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; のコンパイルが完了するまで表示されません。</target>
        </trans-unit>
        <trans-unit id="6726c886cd7d1313872ea34b72b56e9373d396cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;google-map&amp;gt;&lt;/code&gt; component might define a &lt;code&gt;map&lt;/code&gt; property that all subcomponents need access to. In this case &lt;code&gt;&amp;lt;google-map-markers&amp;gt;&lt;/code&gt; might want to access that map with something like &lt;code&gt;this.$parent.getMap&lt;/code&gt;, in order to add a set of markers to it. You can see this pattern &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/ttzutdxh/&quot;&gt;in action here&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;google-map&amp;gt;&lt;/code&gt; コンポーネントが定義する可能性がある &lt;code&gt;map&lt;/code&gt; すべてのサブコンポーネントがアクセスする必要があるという性質を。この場合、 &lt;code&gt;&amp;lt;google-map-markers&amp;gt;&lt;/code&gt; は、マーカーのセットを追加するために、 &lt;code&gt;this.$parent.getMap&lt;/code&gt; ようなものでそのマップにアクセスする必要があります。このパターン&lt;a href=&quot;https://jsfiddle.net/chrisvfritz/ttzutdxh/&quot;&gt;を実際に&lt;/a&gt;見ることができます。</target>
        </trans-unit>
        <trans-unit id="a2c8e1e0505ab8b6ddf5d40dd395dc7902e3cf56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; component's related prop names are also changed:</source>
          <target state="translated">&lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; コンポーネントの関連小道具名も変更されます。</target>
        </trans-unit>
        <trans-unit id="780604d1e5198fdcc94939f3a317c58b142346c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; component has another trick up its sleeve. It can not only animate entering and leaving, but also changes in position. The only new concept you need to know to use this feature is the addition of &lt;strong&gt;the &lt;code&gt;v-move&lt;/code&gt; class&lt;/strong&gt;, which is added when items are changing positions. Like the other classes, its prefix will match the value of a provided &lt;code&gt;name&lt;/code&gt; attribute and you can also manually specify a class with the &lt;code&gt;move-class&lt;/code&gt; attribute.</source>
          <target state="translated">&lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; 成分は、そのスリーブアップ他のトリックを持っています。出入りのアニメーションだけでなく、位置の変化もアニメーション化できます。この機能を使用するために知っておく必要がある唯一の新しい概念が追加され&lt;strong&gt; &lt;code&gt;v-move&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;クラス&lt;/strong&gt;のアイテムが位置を変更する際に追加され、。他のクラスと同様に、そのプレフィックスは提供された &lt;code&gt;name&lt;/code&gt; 属性の値と一致し、手動でクラスを指定することもできます&lt;strong&gt;&lt;/strong&gt; &lt;code&gt;move-class&lt;/code&gt; 属性でます。</target>
        </trans-unit>
        <trans-unit id="606648505385790cf915adeb72e619634753fda2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.camel&lt;/code&gt; modifier allows camelizing a &lt;code&gt;v-bind&lt;/code&gt; attribute name when using in-DOM templates, e.g. the SVG &lt;code&gt;viewBox&lt;/code&gt; attribute:</source>
          <target state="translated">&lt;code&gt;.camel&lt;/code&gt; の修飾子は、ラクダができ &lt;code&gt;v-bind&lt;/code&gt; 例えばSVG、中-DOMのテンプレートを使用するときに属性名を &lt;code&gt;viewBox&lt;/code&gt; 属性：</target>
        </trans-unit>
        <trans-unit id="b9f947cb89a1b3d04c28ecc1fa1b5146bc308109" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.exact&lt;/code&gt; modifier allows control of the exact combination of system modifiers needed to trigger an event.</source>
          <target state="translated">&lt;code&gt;.exact&lt;/code&gt; 修飾子は、イベントをトリガするために必要なシステムの改質剤の正確な組み合わせを制御することができます。</target>
        </trans-unit>
        <trans-unit id="71dc161e02d764cb61bccce7f7216e558eea41ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.literal&lt;/code&gt; modifier has been removed, as the same can be easily achieved by providing a string literal as the value.</source>
          <target state="translated">&lt;code&gt;.literal&lt;/code&gt; 同じことが容易値として文字列リテラルを提供することによって達成することができるように改質剤は、除去されています。</target>
        </trans-unit>
        <trans-unit id="308a478daa47f802fcf7064044194b241f15c334" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.native&lt;/code&gt; modifier for &lt;code&gt;v-on&lt;/code&gt; has been removed.</source>
          <target state="translated">&lt;code&gt;v-on&lt;/code&gt; の &lt;code&gt;.native&lt;/code&gt; 修飾子は削除されました。</target>
        </trans-unit>
        <trans-unit id="3becf1ee2ca90a6fc101f76e8887a18559adb41a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.native&lt;/code&gt; modifier for &lt;code&gt;v-on&lt;/code&gt; has been removed. At the same time, the &lt;a href=&quot;emits-option&quot;&gt;new &lt;code&gt;emits&lt;/code&gt; option&lt;/a&gt; allows the child to define which events it does indeed emit.</source>
          <target state="translated">&lt;code&gt;v-on&lt;/code&gt; の &lt;code&gt;.native&lt;/code&gt; 修飾子は削除されました。同時に、&lt;a href=&quot;emits-option&quot;&gt;新しい&lt;/a&gt; &lt;code&gt;emits&lt;/code&gt; オプションを使用すると、子は実際に発行するイベントを定義できます。</target>
        </trans-unit>
        <trans-unit id="447f18c9c1ff6544a5bf8da7ab660de9c45d00c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.passive&lt;/code&gt; modifier is especially useful for improving performance on mobile devices.</source>
          <target state="translated">&lt;code&gt;.passive&lt;/code&gt; 修飾子は、モバイルデバイス上でのパフォーマンスを改善するために特に有用です。</target>
        </trans-unit>
        <trans-unit id="21fd043aec56c5be7446f861bc772ebd8e753810" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.sync&lt;/code&gt; modifier can also be used with &lt;code&gt;v-bind&lt;/code&gt; when using an object to set multiple props at once:</source>
          <target state="translated">&lt;code&gt;.sync&lt;/code&gt; 改質剤はまた、一緒に使用することができる &lt;code&gt;v-bind&lt;/code&gt; 一度に複数の小道具を設定するオブジェクトを使用する場合：</target>
        </trans-unit>
        <trans-unit id="e59003918037a8c1f8920574ddef9a77cb026920" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beforeDestroy&lt;/code&gt; lifecycle option has been renamed to &lt;code&gt;beforeUnmount&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;beforeDestroy&lt;/code&gt; のライフサイクルオプションがに変更されました &lt;code&gt;beforeUnmount&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b3817e7666ae6c3a405c0d45307315403fffca57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;context&lt;/code&gt; object is a normal JavaScript object, i.e., it is not reactive, this means you can safely use ES6 destructuring on &lt;code&gt;context&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;context&lt;/code&gt; オブジェクトは、すなわち、それは、あなたが安全にES6の非構造を使用することができ、この手段で反応しない、通常のJavaScriptオブジェクトである &lt;code&gt;context&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1e7e4a79aa1bc3f195e7a97ea550fd689981561f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; option for a component is a function. Vue calls this function as part of creating a new component instance. It should return an object, which Vue will then wrap in its reactivity system and store on the component instance as &lt;code&gt;$data&lt;/code&gt;. For convenience, any top-level properties of that object are also exposed directly via the component instance:</source>
          <target state="translated">コンポーネントの &lt;code&gt;data&lt;/code&gt; オプションは関数です。Vueは、新しいコンポーネントインスタンスの作成の一部としてこの関数を呼び出します。オブジェクトを返す必要があります。Vueはそのオブジェクトを反応性システムにラップし、コンポーネントインスタンスに &lt;code&gt;$data&lt;/code&gt; として保存します。便宜上、そのオブジェクトのトップレベルのプロパティもコンポーネントインスタンスを介して直接公開されます。</target>
        </trans-unit>
        <trans-unit id="db8c8dfe01e42917e2ff4e19582c833d9aa41cd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; option from mixins is now merged shallowly</source>
          <target state="translated">ミックスインの &lt;code&gt;data&lt;/code&gt; オプションが浅くマージされるようになりました</target>
        </trans-unit>
        <trans-unit id="9e095d28c13325b0a2ff9afba855f773d35b3336" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; option should always be declared as a function</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; オプションは常に関数として宣言しなければなりません</target>
        </trans-unit>
        <trans-unit id="af4723e87f8fb0a7081e311e56df5dd95f823b7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;defineAsyncComponent&lt;/code&gt; method can also return an object of the following format:</source>
          <target state="translated">&lt;code&gt;defineAsyncComponent&lt;/code&gt; の方法はまた、次の形式のオブジェクトを返すことができます。</target>
        </trans-unit>
        <trans-unit id="d697a25010441d0b264cc1f141099db64aff1db9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;destroyed&lt;/code&gt; lifecycle option has been renamed to &lt;code&gt;unmounted&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;destroyed&lt;/code&gt; ライフサイクルオプションがに変更されました &lt;code&gt;unmounted&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d4df5e8123b51efba1d697cb7ba9ffc8b699b38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;disabled&lt;/code&gt; attribute will be included if &lt;code&gt;isButtonDisabled&lt;/code&gt; has a truthy value. It will also be included if the value is an empty string, maintaining consistency with &lt;code&gt;&amp;lt;button disabled=&quot;&quot;&amp;gt;&lt;/code&gt;. For other falsy values the attribute will be omitted.</source>
          <target state="translated">&lt;code&gt;disabled&lt;/code&gt; 場合は属性が含まれます &lt;code&gt;isButtonDisabled&lt;/code&gt; がtruthy値を持っています。値が空の文字列の場合も含まれ、 &lt;code&gt;&amp;lt;button disabled=&quot;&quot;&amp;gt;&lt;/code&gt; との整合性が維持されます。その他の偽の値の場合、属性は省略されます。</target>
        </trans-unit>
        <trans-unit id="c3321d11e9ef44eba8d358a3614e37323b934b17" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;events&lt;/code&gt; option has been removed. Event handlers should now be registered in the &lt;code&gt;created&lt;/code&gt; hook instead. Check out the &lt;a href=&quot;#dispatch-and-broadcast-replaced&quot;&gt;&lt;code&gt;$dispatch&lt;/code&gt; and &lt;code&gt;$broadcast&lt;/code&gt; migration guide&lt;/a&gt; for a detailed example.</source>
          <target state="translated">&lt;code&gt;events&lt;/code&gt; オプションが削除されました。代わりに、イベントハンドラーを &lt;code&gt;created&lt;/code&gt; フックに登録する必要があります。詳細な例については、&lt;a href=&quot;#dispatch-and-broadcast-replaced&quot;&gt; &lt;code&gt;$dispatch&lt;/code&gt; および &lt;code&gt;$broadcast&lt;/code&gt; 移行ガイド&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="969a6bb824b842ffc1d346a7247789e1a861039f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; option allows for greater control over the timing of the callback. It can be set to &lt;code&gt;'pre'&lt;/code&gt;, &lt;code&gt;'post'&lt;/code&gt; or &lt;code&gt;'sync'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;flush&lt;/code&gt; オプションは、コールバックのタイミングをより細かく制御することができます。 &lt;code&gt;'pre'&lt;/code&gt; 、 &lt;code&gt;'post'&lt;/code&gt; または &lt;code&gt;'sync'&lt;/code&gt; に設定できます。</target>
        </trans-unit>
        <trans-unit id="e86635a9e983287d162b8578aa3c62a8c5b94caa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; option also accepts &lt;code&gt;'sync'&lt;/code&gt;, which forces the effect to always trigger synchronously. This is however inefficient and should be rarely needed.</source>
          <target state="translated">&lt;code&gt;flush&lt;/code&gt; オプションも受け入れ &lt;code&gt;'sync'&lt;/code&gt; は常に同期トリガする効果を強制し、。ただし、これは非効率的であり、必要になることはめったにありません。</target>
        </trans-unit>
        <trans-unit id="de0062f9c0b75b81c6ff6fcf7a3ca6dc7650b1ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;h()&lt;/code&gt; function is a utility to create VNodes. It could perhaps more accurately be named &lt;code&gt;createVNode()&lt;/code&gt;, but it's called &lt;code&gt;h()&lt;/code&gt; due to frequent use and for brevity. It accepts three arguments:</source>
          <target state="translated">&lt;code&gt;h()&lt;/code&gt; 関数は、vノードを作成するためのユーティリティです。おそらくより正確には &lt;code&gt;createVNode()&lt;/code&gt; という名前にすることもできますが、頻繁に使用するため、また簡潔にするために &lt;code&gt;h()&lt;/code&gt; と呼びます。次の3つの引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="2b7c4b5febaa054c2d70f2972911d81840dc234e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;in-out&lt;/code&gt; mode isn&amp;rsquo;t used as often, but can sometimes be useful for a slightly different transition effect. Let&amp;rsquo;s try combining it with the slide-fade transition we worked on earlier:</source>
          <target state="translated">&lt;code&gt;in-out&lt;/code&gt; モードは、しばしばとして使用されていないが、時にはわずかに異なる遷移効果のために有用であり得ます。以前に取り組んだスライドフェードトランジションと組み合わせてみましょう：</target>
        </trans-unit>
        <trans-unit id="7bb2562df8be00932287fedd76a233d44e708651" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; props allow components to be conditionally cached. Both props can be a comma-delimited string, a RegExp or an Array:</source>
          <target state="translated">&lt;code&gt;include&lt;/code&gt; と &lt;code&gt;exclude&lt;/code&gt; 小道具コンポーネントが条件付きでキャッシュすることを可能にします。両方の小道具は、コンマで区切られた文字列、RegExpまたは配列にすることができます。</target>
        </trans-unit>
        <trans-unit id="ad43de9f1a6b8ce8e7970eab3f6c424fa974ff41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; props allow components to be conditionally cached. Both props can be a comma-delimited string, a RegExp or an array:</source>
          <target state="translated">&lt;code&gt;include&lt;/code&gt; と &lt;code&gt;exclude&lt;/code&gt; 小道具コンポーネントが条件付きでキャッシュすることを可能にします。両方の小道具は、コンマ区切りの文字列、正規表現、または配列にすることができます。</target>
        </trans-unit>
        <trans-unit id="3005dd7e3a2ab19b9c3f238f5cffc41fda2a00f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inject&lt;/code&gt; function takes two parameters:</source>
          <target state="translated">&lt;code&gt;inject&lt;/code&gt; 機能は、2つのパラメータを取ります。</target>
        </trans-unit>
        <trans-unit id="4cd088c8b9dd70d20f540d863e4827655ef4afc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inject&lt;/code&gt; option should be either:</source>
          <target state="translated">&lt;code&gt;inject&lt;/code&gt; オプションは、いずれかでなければなりません。</target>
        </trans-unit>
        <trans-unit id="582a8cbd2aa999f85f97f4835ddb07fec729cd60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; special attribute is primarily used as a hint for Vue&amp;rsquo;s virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; の特別な属性は、主に古いリストに対してノードの新しいリストを差分の時はvノードを識別するためのVueの仮想DOMアルゴリズムのためのヒントとして使用されます。キーがない場合、Vueは要素の動きを最小限に抑えるアルゴリズムを使用し、同じタイプの要素を可能な限りインプレースでパッチ/再利用しようとします。キーを使用すると、キーの順序変更に基づいて要素が並べ替えられ、存在しないキーを持つ要素は常に削除/破棄されます。</target>
        </trans-unit>
        <trans-unit id="d96a4b8a73cec33e818285f7909aa04171e0d11e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; special attribute is primarily used as a hint for Vue's virtual DOM algorithm to identify VNodes when diffing the new list of nodes against the old list. Without keys, Vue uses an algorithm that minimizes element movement and tries to patch/reuse elements of the same type in-place as much as possible. With keys, it will reorder elements based on the order change of keys, and elements with keys that are no longer present will always be removed/destroyed.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; の特別な属性は、主に古いリストに対してノードの新しいリストを差分の時はvノードを識別するためのVueの仮想DOMアルゴリズムのためのヒントとして使用されます。キーがない場合、Vueは要素の移動を最小限に抑えるアルゴリズムを使用し、同じタイプの要素に可能な限りパッチを適用/再利用しようとします。キーを使用すると、キーの順序変更に基づいて要素が並べ替えられ、キーが存在しなくなった要素は常に削除/破棄されます。</target>
        </trans-unit>
        <trans-unit id="30bb23e5f1c97d21a94fbab93c3793896e2b9fe4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key&lt;/code&gt; special attribute is used as a hint for Vue's virtual DOM algorithm to keep track of a node's identity. That way, Vue knows when it can reuse and patch existing nodes and when it needs to reorder or recreate them. For more information, see the following sections:</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; 特別な属性は、ノードのアイデンティティを追跡するために、Vueのの仮想DOMアルゴリズムのためのヒントとして使用されます。このようにして、Vueは、既存のノードをいつ再利用してパッチを適用できるか、いつノードを並べ替えまたは再作成する必要があるかを認識します。詳細については、次のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="dc118214d9d96bdcdab86a3dcf6dbc36ea6680a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lazy&lt;/code&gt; and &lt;code&gt;number&lt;/code&gt; param attributes are now modifiers, to make it more clear what That means instead of:</source>
          <target state="translated">&lt;code&gt;lazy&lt;/code&gt; と &lt;code&gt;number&lt;/code&gt; のparam属性は、どのような意味はなく、それをより明確にするために、今修飾されています。</target>
        </trans-unit>
        <trans-unit id="8fd9123a4c3c6ce18d253d0bcbec98386329eae0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mixins&lt;/code&gt; option accepts an array of mixin objects. These mixin objects can contain instance options like normal instance objects, and they will be merged against the eventual options using the certain option merging logic. For example, if your mixin contains a &lt;code&gt;created&lt;/code&gt; hook and the component itself also has one, both functions will be called.</source>
          <target state="translated">&lt;code&gt;mixins&lt;/code&gt; オプションは、ミックスインオブジェクトの配列を受け入れます。これらのミックスインオブジェクトには、通常のインスタンスオブジェクトと同様にインスタンスオプションを含めることができ、特定のオプションマージロジックを使用して、最終的なオプションに対してマージされます。たとえば、ミックスインに &lt;code&gt;created&lt;/code&gt; フックが含まれていて、コンポーネント自体にもフックがある場合、両方の関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="cb26d534e1e0fd7dab034b343fe732f25ec4cdc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mixins&lt;/code&gt; option accepts an array of mixin objects. These mixin objects can contain instance options like normal instance objects, and they will be merged against the eventual options using the same option merging logic in &lt;code&gt;Vue.extend()&lt;/code&gt;. e.g. If your mixin contains a created hook and the component itself also has one, both functions will be called.</source>
          <target state="translated">&lt;code&gt;mixins&lt;/code&gt; オプションは、ミックスインオブジェクトの配列を受け入れます。これらのミックスインオブジェクトには、通常のインスタンスオブジェクトのようなインスタンスオプションを含めることができ、それらは &lt;code&gt;Vue.extend()&lt;/code&gt; の同じオプションマージロジックを使用して、最終的なオプションに対してマージされます。たとえば、ミックスインに作成されたフックが含まれ、コンポーネント自体にもフックがある場合、両方の関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c5119adb901a78417da1a1946bb932ea415212f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;onTrack&lt;/code&gt; and &lt;code&gt;onTrigger&lt;/code&gt; options can be used to debug a watcher's behavior.</source>
          <target state="translated">&lt;code&gt;onTrack&lt;/code&gt; と &lt;code&gt;onTrigger&lt;/code&gt; オプションは、ウォッチャーの動作をデバッグするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="92db55e5b0a5d20b12b2f4b8d1e519e5a5e38d14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;props&lt;/code&gt; object is immutable for userland code during development (will emit warning if user code attempts to mutate it).</source>
          <target state="translated">&lt;code&gt;props&lt;/code&gt; オブジェクトは、（ユーザコードの試みがそれを変異させる場合に警告を発するであろう）開発中にユーザランドのコードに対する不変です。</target>
        </trans-unit>
        <trans-unit id="f2d8144660c52543f7c021fe26462396f341e59d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provide&lt;/code&gt; and &lt;code&gt;inject&lt;/code&gt; bindings are NOT reactive. This is intentional. However, if you pass down an observed object, properties on that object do remain reactive.</source>
          <target state="translated">&lt;code&gt;provide&lt;/code&gt; 及び &lt;code&gt;inject&lt;/code&gt; バインディングは反応性ではありません。これは意図的なものです。ただし、監視対象のオブジェクトを渡すと、そのオブジェクトのプロパティはリアクティブのままになります。</target>
        </trans-unit>
        <trans-unit id="493ed3d2d814af09fd7e0d55df0493248fda560b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provide&lt;/code&gt; function allows you to define the property through two parameters:</source>
          <target state="translated">&lt;code&gt;provide&lt;/code&gt; 機能は次の2つのパラメータによってプロパティを定義することができます：</target>
        </trans-unit>
        <trans-unit id="a26f8d5002e995f88abd483d65f2b8981c550aeb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provide&lt;/code&gt; option should be an object or a function that returns an object. This object contains the properties that are available for injection into its descendants. You can use ES2015 Symbols as keys in this object, but only in environments that natively support &lt;code&gt;Symbol&lt;/code&gt; and &lt;code&gt;Reflect.ownKeys&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;provide&lt;/code&gt; オプションは、オブジェクトまたはオブジェクトを返す関数でなければなりません。このオブジェクトには、その子孫への注入に使用できるプロパティが含まれています。ES2015のシンボルをこのオブジェクトのキーとして使用できますが、 &lt;code&gt;Symbol&lt;/code&gt; および &lt;code&gt;Reflect.ownKeys&lt;/code&gt; をネイティブでサポートする環境でのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="1df98a28e225ea8d4b071027515cc8bf9c095a9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;provide&lt;/code&gt; options allows us to specify the data/methods we want to &lt;strong&gt;provide&lt;/strong&gt; to descendent components. In this case, that&amp;rsquo;s the &lt;code&gt;getMap&lt;/code&gt; method inside &lt;code&gt;&amp;lt;google-map&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;provide&lt;/code&gt; 私たちがしたいデータ/メソッドを指定することを可能にするオプションを&lt;strong&gt;提供&lt;/strong&gt;子孫コンポーネントにを。この場合、それは &lt;code&gt;&amp;lt;google-map&amp;gt;&lt;/code&gt; 内の &lt;code&gt;getMap&lt;/code&gt; メソッドです。</target>
        </trans-unit>
        <trans-unit id="9b831cea1a5d28870b1a98f2a9ac139f7f024f1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;render()&lt;/code&gt; function implementation is much simpler, but also requires greater familiarity with component instance properties. In this case, you have to know that when you pass children without a &lt;code&gt;v-slot&lt;/code&gt; directive into a component, like the &lt;code&gt;Hello world!&lt;/code&gt; inside of &lt;code&gt;anchored-heading&lt;/code&gt;, those children are stored on the component instance at &lt;code&gt;$slots.default()&lt;/code&gt;. If you haven't already, &lt;strong&gt;it's recommended to read through the &lt;a href=&quot;../api/instance-properties&quot;&gt;instance properties API&lt;/a&gt; before diving into render functions.&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;render()&lt;/code&gt; 関数の実装は非常に単純であるが、コンポーネントインスタンスの特性を有するより大きな知識が必要です。この場合、 &lt;code&gt;v-slot&lt;/code&gt; ディレクティブのない子を &lt;code&gt;Hello world!&lt;/code&gt; のようなコンポーネントに渡すときは、それを知っておく必要があります。 &lt;code&gt;anchored-heading&lt;/code&gt; された見出しの内部では、これらの子はコンポーネントインスタンスの &lt;code&gt;$slots.default()&lt;/code&gt; 格納されます。まだ&lt;strong&gt;読んで&lt;/strong&gt;いない場合は、&lt;strong&gt;レンダリング関数に飛び込む前に&lt;/strong&gt;&lt;strong&gt;、&lt;a href=&quot;../api/instance-properties&quot;&gt;インスタンスプロパティAPI&lt;/a&gt;を一読することをお勧めします。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="56704ba2887ba7cae9ee0e7cfb9c5aa5b409598e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;render&lt;/code&gt; function has priority over the render function compiled from &lt;code&gt;template&lt;/code&gt; option or in-DOM HTML template of the mounting element</source>
          <target state="translated">&lt;code&gt;render&lt;/code&gt; 機能からコンパイルレンダリング機能が優先され &lt;code&gt;template&lt;/code&gt; オプションまたはで-DOM HTMLテンプレート素子搭載します</target>
        </trans-unit>
        <trans-unit id="e89e752e4e0ad59fc71d8c42dbb8b140ac0a0a39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;render&lt;/code&gt; function has priority over the render function compiled from &lt;code&gt;template&lt;/code&gt; option or in-DOM HTML template of the mounting element which is specified by the &lt;code&gt;el&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;render&lt;/code&gt; 機能からコンパイルレンダリング機能が優先持つ &lt;code&gt;template&lt;/code&gt; オプションまたはで-DOM HTMLテンプレートで指定された取付要素の &lt;code&gt;el&lt;/code&gt; オプションを選択します。</target>
        </trans-unit>
        <trans-unit id="713161e2405098a6ac60b0b6e678285fa2d7ca9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setup&lt;/code&gt; function is a new component option. It serves as the entry point for using the Composition API inside components.</source>
          <target state="translated">&lt;code&gt;setup&lt;/code&gt; 機能は、新しいコンポーネントのオプションです。これは、コンポーネント内でCompositionAPIを使用するためのエントリポイントとして機能します。</target>
        </trans-unit>
        <trans-unit id="d6cbe7828d9cb072afe7eb2ed82f5a1462e9a440" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setup&lt;/code&gt; option should be a function that accepts &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt; which we will talk about &lt;a href=&quot;composition-api-setup#arguments&quot;&gt;later&lt;/a&gt;. Additionally, everything that we return from &lt;code&gt;setup&lt;/code&gt; will be exposed to the rest of our component (computed properties, methods, lifecycle hooks and so on) as well as to the component's template.</source>
          <target state="translated">&lt;code&gt;setup&lt;/code&gt; オプションを受け付ける関数であるべき &lt;code&gt;props&lt;/code&gt; や &lt;code&gt;context&lt;/code&gt; 、我々はについてお話します&lt;a href=&quot;composition-api-setup#arguments&quot;&gt;後でを&lt;/a&gt;。さらに、 &lt;code&gt;setup&lt;/code&gt; から返されるすべてのものは、コンポーネントの残りの部分（計算されたプロパティ、メソッド、ライフサイクルフックなど）とコンポーネントのテンプレートに公開されます。</target>
        </trans-unit>
        <trans-unit id="2f312c98cab71695e7dd222c575b78b0d13a0c64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;slot-scope&lt;/code&gt; attribute can also be used directly on a non-&lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; element (including components):</source>
          <target state="translated">&lt;code&gt;slot-scope&lt;/code&gt; 属性はまた、非上で直接使用することができる &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; （成分を含む）の要素：</target>
        </trans-unit>
        <trans-unit id="955152ea21b24fdf404e6e6a60a1465f0de55be9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;true-value&lt;/code&gt; and &lt;code&gt;false-value&lt;/code&gt; attributes don&amp;rsquo;t affect the input&amp;rsquo;s &lt;code&gt;value&lt;/code&gt; attribute, because browsers don&amp;rsquo;t include unchecked boxes in form submissions. To guarantee that one of two values is submitted in a form (e.g. &amp;ldquo;yes&amp;rdquo; or &amp;ldquo;no&amp;rdquo;), use radio inputs instead.</source>
          <target state="translated">&lt;code&gt;true-value&lt;/code&gt; と &lt;code&gt;false-value&lt;/code&gt; 属性は、入力の影響はありません &lt;code&gt;value&lt;/code&gt; ブラウザでは、フォームの送信に未チェックボックスが含まれていないため、属性を。2つの値のいずれかがフォームで送信されることを保証するには（「yes」または「no」など）、代わりに無線入力を使用します。</target>
        </trans-unit>
        <trans-unit id="bee3c0fd44ab8c7bc1c7328abb665ef946611b7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;true-value&lt;/code&gt; and &lt;code&gt;false-value&lt;/code&gt; attributes don't affect the input's &lt;code&gt;value&lt;/code&gt; attribute, because browsers don't include unchecked boxes in form submissions. To guarantee that one of two values is submitted in a form (e.g. &quot;yes&quot; or &quot;no&quot;), use radio inputs instead.</source>
          <target state="translated">&lt;code&gt;true-value&lt;/code&gt; と &lt;code&gt;false-value&lt;/code&gt; 属性は、入力の影響はありません &lt;code&gt;value&lt;/code&gt; ブラウザでは、フォームの送信に未チェックボックスが含まれていないため、属性を。2つの値のいずれかがフォームで送信されることを保証するには（「はい」または「いいえ」など）、代わりに無線入力を使用します。</target>
        </trans-unit>
        <trans-unit id="e182f837614c4a38080aad510dbbf2060bfc370d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; can be one of the following native constructors:</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 次のネイティブのコンストラクタのいずれかになります。</target>
        </trans-unit>
        <trans-unit id="2c964cd0d22c4c2fe49024d77d0397abcff4aee5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;use()&lt;/code&gt; method takes two parameters. The first one is the plugin to be installed, in this case &lt;code&gt;i18nPlugin&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;use()&lt;/code&gt; メソッドは、2つのパラメータを取ります。最初のものはインストールされるプラグイン、この場合は &lt;code&gt;i18nPlugin&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d359aad27c2b39097fdc37e76390adbf2cb90073" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-&lt;/code&gt; prefix serves as a visual cue for identifying Vue-specific attributes in your templates. This is useful when you are using Vue.js to apply dynamic behavior to some existing markup, but can feel verbose for some frequently used directives. At the same time, the need for the &lt;code&gt;v-&lt;/code&gt; prefix becomes less important when you are building a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot;&gt;SPA (opens new window)&lt;/a&gt;, where Vue manages every template. Therefore, Vue provides special shorthands for two of the most often used directives, &lt;code&gt;v-bind&lt;/code&gt; and &lt;code&gt;v-on&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;v-&lt;/code&gt; プレフィックスは、あなたのテンプレートでVueの固有の属性を識別するための視覚的な手がかりとしての役割を果たす。これは、Vue.jsを使用して既存のマークアップに動的な動作を適用する場合に役立ちますが、頻繁に使用されるディレクティブについては冗長に感じる場合があります。同時に、Vueがすべてのテンプレートを管理する&lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot;&gt;SPA（新しいウィンドウを開く）を&lt;/a&gt;構築する場合、 &lt;code&gt;v-&lt;/code&gt; プレフィックスの必要性はそれほど重要ではなくなります。したがって、Vueは、最も頻繁に使用される2つのディレクティブ、 &lt;code&gt;v-bind&lt;/code&gt; と &lt;code&gt;v-on&lt;/code&gt; の特別な省略形を提供します。</target>
        </trans-unit>
        <trans-unit id="e190ce9f5befbb3426f06af3ed96f5a8aa0969e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-&lt;/code&gt; prefix serves as a visual cue for identifying Vue-specific attributes in your templates. This is useful when you are using Vue.js to apply dynamic behavior to some existing markup, but can feel verbose for some frequently used directives. At the same time, the need for the &lt;code&gt;v-&lt;/code&gt; prefix becomes less important when you are building a &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot;&gt;SPA&lt;/a&gt;, where Vue manages every template. Therefore, Vue provides special shorthands for two of the most often used directives, &lt;code&gt;v-bind&lt;/code&gt; and &lt;code&gt;v-on&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;v-&lt;/code&gt; プレフィックスは、あなたのテンプレートでVueの固有の属性を識別するための視覚的な手がかりとしての役割を果たす。これは、Vue.jsを使用して動的な動作を既存のマークアップに適用する場合に便利ですが、頻繁に使用されるいくつかのディレクティブでは冗長に感じる場合があります。同時に、Vueがすべてのテンプレートを管理する&lt;a href=&quot;https://en.wikipedia.org/wiki/Single-page_application&quot;&gt;SPA&lt;/a&gt;を構築する場合、 &lt;code&gt;v-&lt;/code&gt; プレフィックスの必要性はそれほど重要ではなくなります。したがって、Vueは、 &lt;code&gt;v-bind&lt;/code&gt; と &lt;code&gt;v-on&lt;/code&gt; の最もよく使用される2つのディレクティブの特別な省略表現を提供します。</target>
        </trans-unit>
        <trans-unit id="5280826865eec6dcf1bda516f7687a90f24c0bfd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-else-if&lt;/code&gt;, as the name suggests, serves as an &quot;else if block&quot; for &lt;code&gt;v-if&lt;/code&gt;. It can also be chained multiple times:</source>
          <target state="translated">&lt;code&gt;v-else-if&lt;/code&gt; その名の通り、について「他にあればブロック」として機能し、 &lt;code&gt;v-if&lt;/code&gt; 。複数回チェーンすることもできます。</target>
        </trans-unit>
        <trans-unit id="cd8461a9f091788550d2bcfcb0e99f3643c233d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-else-if&lt;/code&gt;, as the name suggests, serves as an &amp;ldquo;else if block&amp;rdquo; for &lt;code&gt;v-if&lt;/code&gt;. It can also be chained multiple times:</source>
          <target state="translated">&lt;code&gt;v-else-if&lt;/code&gt; その名の通り、について「他にあればブロック」として機能し、 &lt;code&gt;v-if&lt;/code&gt; 。複数回チェーンすることもできます。</target>
        </trans-unit>
        <trans-unit id="c3247515a046afbb16ba57185188c9f06ec7d510" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-enter&lt;/code&gt; transition class has been renamed to &lt;code&gt;v-enter-from&lt;/code&gt; and the &lt;code&gt;v-leave&lt;/code&gt; transition class has been renamed to &lt;code&gt;v-leave-from&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;v-enter&lt;/code&gt; 遷移クラスが名前に変更された &lt;code&gt;v-enter-from&lt;/code&gt; と &lt;code&gt;v-leave&lt;/code&gt; 遷移クラスが名前に変更された &lt;code&gt;v-leave-from&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="158f0361bd6bc0f9d34d2682ff9be45ba6461b16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-is&lt;/code&gt; value is treated as a JavaScript expression, so we need to wrap the component name in quotes:</source>
          <target state="translated">&lt;code&gt;v-is&lt;/code&gt; 値我々は引用符でコンポーネント名をラップする必要があるので、JavaScript式として扱われます。</target>
        </trans-unit>
        <trans-unit id="0f6244029a3dc18b6cba09b3e6e0a940180e13b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-link-active&lt;/code&gt; directive has also been replaced by the &lt;code&gt;tag&lt;/code&gt; attribute on &lt;a href=&quot;https://router.vuejs.org/en/api/router-link.html&quot;&gt;the &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; component&lt;/a&gt;. So for example, you&amp;rsquo;ll update this:</source>
          <target state="translated">&lt;code&gt;v-link-active&lt;/code&gt; ディレクティブも置き換えられている &lt;code&gt;tag&lt;/code&gt; の属性&lt;a href=&quot;https://router.vuejs.org/en/api/router-link.html&quot;&gt; &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; &lt;/a&gt;コンポーネント。したがって、たとえば、これを更新します。</target>
        </trans-unit>
        <trans-unit id="83d24c44d5fff24f0114d4c306087248f718b001" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-link&lt;/code&gt; directive has been replaced with a new &lt;a href=&quot;https://router.vuejs.org/en/api/router-link.html&quot;&gt;&lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; component&lt;/a&gt;, as this sort of job is now solely the responsibility of components in Vue 2. That means whenever wherever you have a link like this:</source>
          <target state="translated">&lt;code&gt;v-link&lt;/code&gt; ディレクティブは、新規に置き換えられました&lt;a href=&quot;https://router.vuejs.org/en/api/router-link.html&quot;&gt; &lt;code&gt;&amp;lt;router-link&amp;gt;&lt;/code&gt; コンポーネント&lt;/a&gt;の仕事のこの種のは、今のVue 2のコンポーネントのもっぱら責任であるとして、それあなたがこのようなリンクを持っているところはどこでもいつでも手段：</target>
        </trans-unit>
        <trans-unit id="5b9f65f7c297c1bc0549d5a815580fb6bb62244e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-model&lt;/code&gt; directive is expanded to &lt;code&gt;modelValue&lt;/code&gt; and &lt;code&gt;onUpdate:modelValue&lt;/code&gt; props during template compilation&amp;mdash;we will have to provide these props ourselves:</source>
          <target state="translated">&lt;code&gt;v-model&lt;/code&gt; ディレクティブがに展開され &lt;code&gt;modelValue&lt;/code&gt; と &lt;code&gt;onUpdate:modelValue&lt;/code&gt; テンプレート中に小道具のコンパイル、我々はこれらの小道具に自分自身を提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="913c16238f6be321d10c7aa5ede9be4e8848de68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;v-slot&lt;/code&gt; directive was introduced in Vue 2.6.0, offering an improved, alternative API to the still-supported &lt;code&gt;slot&lt;/code&gt; and &lt;code&gt;slot-scope&lt;/code&gt; attributes. The full rationale for introducing &lt;code&gt;v-slot&lt;/code&gt; is described in this &lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md&quot;&gt;RFC&lt;/a&gt;. The &lt;code&gt;slot&lt;/code&gt; and &lt;code&gt;slot-scope&lt;/code&gt; attributes will continue to be supported in all future 2.x releases, but are officially deprecated and will eventually be removed in Vue 3.</source>
          <target state="translated">&lt;code&gt;v-slot&lt;/code&gt; ディレクティブはまだサポートに改善し、代わりのAPIを提供し、Vueの2.6.0で導入された &lt;code&gt;slot&lt;/code&gt; と &lt;code&gt;slot-scope&lt;/code&gt; の属性。 &lt;code&gt;v-slot&lt;/code&gt; を導入する根拠は、この&lt;a href=&quot;https://github.com/vuejs/rfcs/blob/master/active-rfcs/0001-new-slot-syntax.md&quot;&gt;RFCに&lt;/a&gt;記載されています。 &lt;code&gt;slot&lt;/code&gt; と &lt;code&gt;slot-scope&lt;/code&gt; の属性は、将来のすべての2.xのリリースではサポートされていきますが、正式に廃止され、最終的にはVueの3で削除されます。</target>
        </trans-unit>
        <trans-unit id="a7b4baa34859ac880f5fe98648e4fa5507310c03" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;watch&lt;/code&gt; API is the exact equivalent of the Options API &lt;a href=&quot;instance-methods#watch&quot;&gt;this.$watch&lt;/a&gt; (and the corresponding &lt;a href=&quot;options-data#watch&quot;&gt;watch&lt;/a&gt; option). &lt;code&gt;watch&lt;/code&gt; requires watching a specific data source and applies side effects in a separate callback function. It also is lazy by default - i.e. the callback is only called when the watched source has changed.</source>
          <target state="translated">&lt;code&gt;watch&lt;/code&gt; APIはオプションAPIの完全に同等である&lt;a href=&quot;instance-methods#watch&quot;&gt;この。$腕時計&lt;/a&gt;（および対応する&lt;a href=&quot;options-data#watch&quot;&gt;時計の&lt;/a&gt;オプション）。 &lt;code&gt;watch&lt;/code&gt; は、特定のデータソースを監視する必要があり、別のコールバック関数で副作用を適用します。また、デフォルトではレイジーです。つまり、コールバックは、監視対象のソースが変更された場合にのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4aabcbf5326e8e02f2028280d2c6d91ef3352aaa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;watch&lt;/code&gt; API is the exact equivalent of the component &lt;a href=&quot;computed#watchers&quot;&gt;watch&lt;/a&gt; property. &lt;code&gt;watch&lt;/code&gt; requires watching a specific data source and applies side effects in a separate callback function. It also is lazy by default - i.e. the callback is only called when the watched source has changed.</source>
          <target state="translated">&lt;code&gt;watch&lt;/code&gt; APIは、コンポーネントの完全に同等である&lt;a href=&quot;computed#watchers&quot;&gt;時計の&lt;/a&gt;プロパティ。 &lt;code&gt;watch&lt;/code&gt; は、特定のデータソースを監視する必要があり、別のコールバック関数で副作用を適用します。また、デフォルトではレイジーです。つまり、コールバックは、監視対象のソースが変更された場合にのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f371f3394ccbbd9c9c7339bc5a079bc98cf103c4" translate="yes" xml:space="preserve">
          <source>The CLI assumes prior knowledge of Node.js and the associated build tools. If you are new to Vue or front-end build tools, we strongly suggest going through &lt;a href=&quot;../index&quot;&gt;the guide&lt;/a&gt; without any build tools before using the CLI.</source>
          <target state="translated">CLIは、Node.jsおよび関連するビルドツールの事前知識があることを前提としています。Vueまたはフロントエンドのビルドツールを初めて使用する場合は、CLIを使用する前に、ビルドツールなしで&lt;a href=&quot;../index&quot;&gt;ガイド&lt;/a&gt;を読むことを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="4b84a76a83ec8a5f1e120e500c3f7751834f2762" translate="yes" xml:space="preserve">
          <source>The CLI takes care of most of the tooling configurations for you, but also allows fine-grained customization through its own &lt;a href=&quot;https://cli.vuejs.org/config/&quot;&gt;config options (opens new window)&lt;/a&gt;.</source>
          <target state="translated">CLIは、ほとんどのツール構成を処理しますが、独自の構成&lt;a href=&quot;https://cli.vuejs.org/config/&quot;&gt;オプション（新しいウィンドウを開く）を使用し&lt;/a&gt;て、きめ細かいカスタマイズを行うこともできます。</target>
        </trans-unit>
        <trans-unit id="431e39681a2982cceb38425ec480f7e168f10ba0" translate="yes" xml:space="preserve">
          <source>The CLI takes care of most of the tooling configurations for you, but also allows fine-grained customization through its own &lt;a href=&quot;https://cli.vuejs.org/config/&quot;&gt;config options&lt;/a&gt;.</source>
          <target state="translated">CLIはほとんどのツール構成を処理しますが、独自の構成&lt;a href=&quot;https://cli.vuejs.org/config/&quot;&gt;オプションを使用し&lt;/a&gt;て細かくカスタマイズすることもできます。</target>
        </trans-unit>
        <trans-unit id="37e9961ffd2140433ee6300b4c25596bb92249ae" translate="yes" xml:space="preserve">
          <source>The Complete SSR Guide</source>
          <target state="translated">コンプリートSSRガイド</target>
        </trans-unit>
        <trans-unit id="5754a67d9095f9e3938db68d894af927d9bbda9b" translate="yes" xml:space="preserve">
          <source>The Custom Elements specification provides a way to use custom elements as &lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-customized-builtin-example&quot;&gt;Customized Built-in Element (opens new window)&lt;/a&gt; by adding the &lt;code&gt;is&lt;/code&gt; attribute to a built-in element:</source>
          <target state="translated">カスタム要素仕様は、&lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#custom-elements-customized-builtin-example&quot;&gt;組み込み&lt;/a&gt;要素に &lt;code&gt;is&lt;/code&gt; 属性を追加することにより、カスタム要素をカスタマイズされた組み込み要素として使用する（新しいウィンドウを開く）方法を提供します。</target>
        </trans-unit>
        <trans-unit id="9c61149305fdf5c301ac25f2f0ca7dd3dbec3dc0" translate="yes" xml:space="preserve">
          <source>The DOM tree</source>
          <target state="translated">DOM ツリー</target>
        </trans-unit>
        <trans-unit id="eb35b5bf284498fbba8e557432a08e707e7edef3" translate="yes" xml:space="preserve">
          <source>The Data Object In-Depth</source>
          <target state="translated">データオブジェクトの詳細</target>
        </trans-unit>
        <trans-unit id="0a11a522901404813faf9ef70a5ad308a904d8c3" translate="yes" xml:space="preserve">
          <source>The Options API contains the following sections:</source>
          <target state="translated">Options APIには、以下のセクションがあります。</target>
        </trans-unit>
        <trans-unit id="299c795ecd2c7dbddd73afeca578463288759420" translate="yes" xml:space="preserve">
          <source>The Reactivity API contains the following sections:</source>
          <target state="translated">Reactivity APIには以下のセクションがあります。</target>
        </trans-unit>
        <trans-unit id="46f148bcf44658dc4c8a0ed4916ae565d5489751" translate="yes" xml:space="preserve">
          <source>The Root Component</source>
          <target state="translated">ルートコンポーネント</target>
        </trans-unit>
        <trans-unit id="3c531607ce360cbb5aec13ac8c3438a41dc5f330" translate="yes" xml:space="preserve">
          <source>The Virtual DOM</source>
          <target state="translated">仮想 DOM</target>
        </trans-unit>
        <trans-unit id="25dc21ddfb968d5d9195ddaa8265924cdb93b08c" translate="yes" xml:space="preserve">
          <source>The Virtual DOM is a lightweight JavaScript object, created by a render function. It takes three arguments: the element, an object with data, props, attrs and more, and an array. The array is where we pass in the children, which have all these arguments too, and then they can have children and so on, until we build a full tree of elements.</source>
          <target state="translated">Virtual DOMは、レンダー関数によって作成される軽量なJavaScriptオブジェクトです。要素、データ、props、attrsなどを含むオブジェクト、そして配列の3つの引数をとります。配列は、これらすべての引数を持つ子を渡す場所であり、要素の完全なツリーを構築するまで子を持つことができます。</target>
        </trans-unit>
        <trans-unit id="35fcd2cc00d685d99cf98eb6826ed2737e548826" translate="yes" xml:space="preserve">
          <source>The Virtual DOM tree</source>
          <target state="translated">仮想 DOM ツリー</target>
        </trans-unit>
        <trans-unit id="babecbcffc795b2e20d9189e575e0bb731f8cd62" translate="yes" xml:space="preserve">
          <source>The Vue Instance</source>
          <target state="translated">Vue インスタンス</target>
        </trans-unit>
        <trans-unit id="efbb68ebebd965649cff93f54f21ecfcb0cd480c" translate="yes" xml:space="preserve">
          <source>The Vue.js API contains the following categories:</source>
          <target state="translated">Vue.js APIには以下のカテゴリがあります。</target>
        </trans-unit>
        <trans-unit id="807a64f8392fba5b085711631ef386b7b4a4cc48" translate="yes" xml:space="preserve">
          <source>The Web Components Spec has been finalized but is not natively implemented in every browser. Safari 10.1+, Chrome 54+ and Firefox 63+ natively support web components. In comparison, Vue components work consistently in all supported browsers (IE11 with compatibility build and above). When needed, Vue components can also be wrapped inside a native custom element.</source>
          <target state="translated">Web Components Specは最終的なものになっていますが、すべてのブラウザにネイティブに実装されているわけではありません。Safari 10.1+、Chrome 54+、Firefox 63+は Web コンポーネントをネイティブにサポートしています。比較すると、Vue コンポーネントは、サポートされているすべてのブラウザ(互換性のあるビルドの IE11 以上)で一貫して動作します。必要に応じて、Vue コンポーネントをネイティブのカスタム要素の中に含めることもできます。</target>
        </trans-unit>
        <trans-unit id="be83ced5c720e31f43242c0f5e365ad3f2da0751" translate="yes" xml:space="preserve">
          <source>The Web Components Spec has been finalized, but is not natively implemented in every browser. Safari 10.1+, Chrome 54+ and Firefox 63+ natively support web components. In comparison, Vue components don&amp;rsquo;t require any polyfills and work consistently in all supported browsers (IE9 and above). When needed, Vue components can also be wrapped inside a native custom element.</source>
          <target state="translated">Web Components Specは完成しましたが、すべてのブラウザーにネイティブに実装されているわけではありません。Safari 10.1以降、Chrome 54以降、Firefox 63以降では、Webコンポーネントがネイティブでサポートされています。比較すると、Vueコンポーネントはポリフィルを必要とせず、サポートされているすべてのブラウザー（IE9以降）で一貫して機能します。必要に応じて、Vueコンポーネントをネイティブのカスタム要素内にラップすることもできます。</target>
        </trans-unit>
        <trans-unit id="ea207ce61201306d104d66e553ee1c06de8b2548" translate="yes" xml:space="preserve">
          <source>The World Health Organization estimates that 15% of the world's population has some form of disability, 2-4% of them severely so. That is an estimated 1 billion people worldwide; making people with disabilities the largest minority group in the world.</source>
          <target state="translated">世界保健機関(WHO)は、世界人口の15%が何らかの障害を持っており、そのうち2~4%が重度の障害を持っていると推定しています。これは全世界で推定10億人の人々であり、障害者は世界最大のマイノリティグループとなっています。</target>
        </trans-unit>
        <trans-unit id="152adfffa7428439272d77c4a76ca033af83c983" translate="yes" xml:space="preserve">
          <source>The World Wide Web Consortium (W3C) Web Accessibility Initiative (WAI) develops web accessibility standards for the different components:</source>
          <target state="translated">World Wide Web Consortium (W3C)Web Accessibility Initiative (WAI)は、さまざまなコンポーネントのためのウェブアクセシビリティ基準を開発しています。</target>
        </trans-unit>
        <trans-unit id="0a28d4802ae8f29af4f28a606d7b55fd498ccb1b" translate="yes" xml:space="preserve">
          <source>The above code is imperative and repetitive. Compare it with a computed property version:</source>
          <target state="translated">上記のコードは命令的で反復的です。計算されたプロパティのバージョンと比較してみてください。</target>
        </trans-unit>
        <trans-unit id="bb879e483c23bffcd30b4eb818c6b264dd8b31d3" translate="yes" xml:space="preserve">
          <source>The above declarations allow the following code to be compiled:</source>
          <target state="translated">上記の宣言により、以下のコードをコンパイルすることができます。</target>
        </trans-unit>
        <trans-unit id="f57aa3ad596a32aa0ee96ea34ada406c21b66366" translate="yes" xml:space="preserve">
          <source>The above example and some future ones use JavaScript&amp;rsquo;s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;template literal&lt;/a&gt; to make multi-line templates more readable. These are not supported by Internet Explorer (IE), so if you must support IE and are not transpiling (e.g. with Babel or TypeScript), use &lt;a href=&quot;https://css-tricks.com/snippets/javascript/multiline-string-variables-in-javascript/&quot;&gt;newline escapes&lt;/a&gt; instead.</source>
          <target state="translated">上記の例と将来のいくつかの例では、JavaScriptの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot;&gt;テンプレートリテラル&lt;/a&gt;を使用して、複数行のテンプレートを読みやすくしています。これらはInternet Explorer（IE）ではサポートされていないため、IEをサポートする必要があり、トランスパイルしない場合（たとえば、BabelまたはTypeScriptを使用）、代わりに&lt;a href=&quot;https://css-tricks.com/snippets/javascript/multiline-string-variables-in-javascript/&quot;&gt;改行エスケープ&lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="99a5b0f10fab94bdbe6947c371a61fc4c4300760" translate="yes" xml:space="preserve">
          <source>The above is made possible by Vue&amp;rsquo;s &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; element with the &lt;code&gt;is&lt;/code&gt; special attribute:</source>
          <target state="translated">上記は、Vueの &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; 要素が &lt;code&gt;is&lt;/code&gt; 特殊属性を使用することで可能になります。</target>
        </trans-unit>
        <trans-unit id="a2dc1588c8d651c45f52061e78e4205b7250b679" translate="yes" xml:space="preserve">
          <source>The above is made possible by Vue's &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; element with the special &lt;code&gt;is&lt;/code&gt; attribute:</source>
          <target state="translated">上記は、特別な &lt;code&gt;is&lt;/code&gt; 属性を持つVueの &lt;code&gt;&amp;lt;component&amp;gt;&lt;/code&gt; 要素によって可能になります。</target>
        </trans-unit>
        <trans-unit id="02263c9d7e8e9048b079d134eb04a15832e9ae6a" translate="yes" xml:space="preserve">
          <source>The above only applies to the &lt;a href=&quot;../installation#explanation-of-different-builds&quot;&gt;ES Modules builds&lt;/a&gt; for use with tree-shaking capable bundlers - the UMD build still includes all features and exposes everything on the Vue global variable (and the compiler will produce appropriate output to use APIs off the global instead of importing).</source>
          <target state="translated">上記は、ツリーシェイク対応のバンドラーで使用する&lt;a href=&quot;../installation#explanation-of-different-builds&quot;&gt;ESモジュールビルドに&lt;/a&gt;のみ適用されます-UMDビルドにはすべての機能が含まれ、Vueグローバル変数のすべてが公開されます（コンパイラーは、インポートする代わりにグローバルからAPIを使用するための適切な出力を生成します）。</target>
        </trans-unit>
        <trans-unit id="b7374ad3f755708e5dc13a8b4b98839ff8d234e1" translate="yes" xml:space="preserve">
          <source>The above only renders the todos that are not complete.</source>
          <target state="translated">上記は未完成のトドのみをレンダリングしています。</target>
        </trans-unit>
        <trans-unit id="1dac4ea7863f897132825dc2826b7a36c594604c" translate="yes" xml:space="preserve">
          <source>The above syntax means the presence of the &lt;code&gt;active&lt;/code&gt; class will be determined by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;truthiness (opens new window)&lt;/a&gt; of the data property &lt;code&gt;isActive&lt;/code&gt;.</source>
          <target state="translated">上記の構文は、 &lt;code&gt;active&lt;/code&gt; クラスの存在がデータプロパティ &lt;code&gt;isActive&lt;/code&gt; の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;真実性（新しいウィンドウを開く）&lt;/a&gt;によって決定されることを意味します。</target>
        </trans-unit>
        <trans-unit id="4af7e3e4b79fac718e6fd64e5702254c69dcf11f" translate="yes" xml:space="preserve">
          <source>The above syntax means the presence of the &lt;code&gt;active&lt;/code&gt; class will be determined by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;truthiness&lt;/a&gt; of the data property &lt;code&gt;isActive&lt;/code&gt;.</source>
          <target state="translated">上記の構文は、 &lt;code&gt;active&lt;/code&gt; クラスの存在がデータプロパティ &lt;code&gt;isActive&lt;/code&gt; の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Truthy&quot;&gt;真実性&lt;/a&gt;によって決定されることを意味します。</target>
        </trans-unit>
        <trans-unit id="aeec69d6935039bffd444e21fbd1ed7763a7edf9" translate="yes" xml:space="preserve">
          <source>The above will be equivalent to:</source>
          <target state="translated">上記に相当するものになります。</target>
        </trans-unit>
        <trans-unit id="987de1902175f7ea29deadc7d807f82364182cb0" translate="yes" xml:space="preserve">
          <source>The absence of an enumerated attribute and &lt;code&gt;attr=&quot;false&quot;&lt;/code&gt; may produce different IDL attribute values (which will reflect the actual state), described as follows:</source>
          <target state="translated">列挙された属性がなく、 &lt;code&gt;attr=&quot;false&quot;&lt;/code&gt; の場合、次のように、異なるIDL属性値（実際の状態を反映する）が生成される可能性があります。</target>
        </trans-unit>
        <trans-unit id="bc22dad858f565e9beeefc992c5465134124606c" translate="yes" xml:space="preserve">
          <source>The anchored heading component we created earlier is relatively simple. It doesn&amp;rsquo;t manage any state, watch any state passed to it, and it has no lifecycle methods. Really, it&amp;rsquo;s only a function with some props.</source>
          <target state="translated">以前に作成したアンカー付き見出しコンポーネントは比較的単純です。状態を管理せず、渡された状態を監視します。ライフサイクルメソッドはありません。本当に、それはいくつかの小道具を備えた機能です。</target>
        </trans-unit>
        <trans-unit id="472fab3bd1351c6b291c7954f4cf59720749fbf5" translate="yes" xml:space="preserve">
          <source>The application instance</source>
          <target state="translated">アプリケーションのインスタンス</target>
        </trans-unit>
        <trans-unit id="9bf7df2e6b2d3b7f0b9b74d317befb0ed3be82e6" translate="yes" xml:space="preserve">
          <source>The application instance if a &lt;code&gt;definition&lt;/code&gt; argument was passed</source>
          <target state="translated">&lt;code&gt;definition&lt;/code&gt; 引数が渡された場合のアプリケーションインスタンス</target>
        </trans-unit>
        <trans-unit id="c96fc90d040288884b45ba8147b46429f8a9c329" translate="yes" xml:space="preserve">
          <source>The application instance is used to register 'globals' that can then be used by components within that application. We'll discuss that in detail later in the guide but as a quick example:</source>
          <target state="translated">アプリケーション・インスタンスは、そのアプリケーション内のコンポーネントが使用できる 'グローバル' を登録するために使用されます。これについての詳細は後ほどガイドで説明しますが、簡単な例として説明します。</target>
        </trans-unit>
        <trans-unit id="87b9709d9cefabc9cccc6ad0b23e243c50a3cb35" translate="yes" xml:space="preserve">
          <source>The array syntax allows more predictable route matching, since iterating over an object is not guaranteed to use the same property order across browsers.</source>
          <target state="translated">配列構文は、オブジェクトの反復処理がブラウザ間で同じプロパティの順序を使用することが保証されていないため、より予測可能なルートマッチングを可能にします。</target>
        </trans-unit>
        <trans-unit id="cfb0bf25982abd52ff947724ea87766f7139df24" translate="yes" xml:space="preserve">
          <source>The array syntax for &lt;code&gt;:style&lt;/code&gt; allows you to apply multiple style objects to the same element:</source>
          <target state="translated">&lt;code&gt;:style&lt;/code&gt; の配列構文を使用すると、複数のスタイルオブジェクトを同じ要素に適用できます。</target>
        </trans-unit>
        <trans-unit id="da3ddd2386065d734a4382298ee4c3e11da253a3" translate="yes" xml:space="preserve">
          <source>The array syntax for &lt;code&gt;v-bind:style&lt;/code&gt; allows you to apply multiple style objects to the same element:</source>
          <target state="translated">&lt;code&gt;v-bind:style&lt;/code&gt; の配列構文を使用すると、複数のスタイルオブジェクトを同じ要素に適用できます。</target>
        </trans-unit>
        <trans-unit id="aafcbc34aabe7826d09e6d24c380675938d5320a" translate="yes" xml:space="preserve">
          <source>The async component can opt-out of &lt;code&gt;Suspense&lt;/code&gt; control and let the component always control its own loading state by specifying &lt;code&gt;suspensible: false&lt;/code&gt; in its options.</source>
          <target state="translated">非同期コンポーネントは、 &lt;code&gt;Suspense&lt;/code&gt; 制御をオプトアウトし、オプションで &lt;code&gt;suspensible: false&lt;/code&gt; を指定することにより、コンポーネントが常に自身のロード状態を制御できるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="e823b9beb8c48498f2cf709b4d0756d4d1fc6465" translate="yes" xml:space="preserve">
          <source>The async component factory can also return an object of the following format:</source>
          <target state="translated">async コンポーネント ファクトリは、以下の形式のオブジェクトを返すこともできます。</target>
        </trans-unit>
        <trans-unit id="ba11fc067d05679fdd5921eda5ec20ebd31b1c5d" translate="yes" xml:space="preserve">
          <source>The autocompletion in editors make the cost of writing longer names very low, while the clarity they provide is invaluable. Uncommon abbreviations, in particular, should always be avoided.</source>
          <target state="translated">エディタの自動補完機能は、長い名前を書くコストを非常に低くしてくれますが、その一方で、エディタが提供する明確さは非常に貴重なものです。特に、一般的ではない略語は常に避けるべきです。</target>
        </trans-unit>
        <trans-unit id="3bfbfdbf163c3a58f491c28ada597f5a0c3ab31f" translate="yes" xml:space="preserve">
          <source>The best way to get started is to check out &lt;a href=&quot;https://github.com/vuejs/docs-next/issues/478&quot;&gt;this pinned issue (opens new window)&lt;/a&gt; that contains active discussions on the various initiatives happening in the community.</source>
          <target state="translated">始めるための最良の方法は、コミュニティで起こっているさまざまなイニシアチブに関する活発な議論を含む&lt;a href=&quot;https://github.com/vuejs/docs-next/issues/478&quot;&gt;この固定された問題&lt;/a&gt;をチェックすることです（新しいウィンドウを開きます）。</target>
        </trans-unit>
        <trans-unit id="8c22ef1ce4c22f9fdb3192ace8ea666bf31d6a91" translate="yes" xml:space="preserve">
          <source>The bound object doesn&amp;rsquo;t have to be inline:</source>
          <target state="translated">バインドされたオブジェクトはインラインである必要はありません：</target>
        </trans-unit>
        <trans-unit id="05175c1d75a733807acbefe7969758c568ba82e5" translate="yes" xml:space="preserve">
          <source>The bound object doesn't have to be inline:</source>
          <target state="translated">バインドオブジェクトはインラインである必要はありません。</target>
        </trans-unit>
        <trans-unit id="2554e0f7ba3e75f305804cf7d1375f5d936e7484" translate="yes" xml:space="preserve">
          <source>The breaking change is that if you manually provide &lt;code&gt;key&lt;/code&gt;s, each branch must use a unique &lt;code&gt;key&lt;/code&gt;. In most cases, you can remove these &lt;code&gt;key&lt;/code&gt;s.</source>
          <target state="translated">重大な変更は、手動で &lt;code&gt;key&lt;/code&gt; を指定する場合、各ブランチは一意の &lt;code&gt;key&lt;/code&gt; 使用する必要があることです。ほとんどの場合、これらの &lt;code&gt;key&lt;/code&gt; を削除できます。</target>
        </trans-unit>
        <trans-unit id="c0ea81fb69fe73fe63375e04ce841fa425ec9b8c" translate="yes" xml:space="preserve">
          <source>The child, instead of providing no template, should now render the default slot*:</source>
          <target state="translated">テンプレートを提供しない代わりに、子はデフォルトのスロット*をレンダリングするようになりました。</target>
        </trans-unit>
        <trans-unit id="4eda5449279a274efb072e447ae5fcdbc28da7df" translate="yes" xml:space="preserve">
          <source>The common scenario for disabling an attribute inheritance is when attributes need to be applied to other elements besides the root node.</source>
          <target state="translated">属性継承を無効にする一般的なシナリオは、ルートノード以外の他の要素に属性を適用する必要がある場合です。</target>
        </trans-unit>
        <trans-unit id="947fd6ed1c1923f9d1c906662bc458c7fd2b298d" translate="yes" xml:space="preserve">
          <source>The component definition if a &lt;code&gt;definition&lt;/code&gt; argument was not passed</source>
          <target state="translated">&lt;code&gt;definition&lt;/code&gt; 引数が渡されなかった場合のコンポーネント定義</target>
        </trans-unit>
        <trans-unit id="86969f46fef0ec13b85498c1fa6ab2d4f2c18c31" translate="yes" xml:space="preserve">
          <source>The component instance context is also set during the synchronous execution of lifecycle hooks. As a result, watchers and computed properties created synchronously inside of lifecycle hooks are also automatically tore down when the component unmounts.</source>
          <target state="translated">コンポーネントのインスタンスコンテキストは、ライフサイクルフックの同期実行中にも設定されます。その結果、ライフサイクルフックの内部で同期的に作成されたウォッチャーや計算されたプロパティも、コンポーネントがアンマウントされると自動的に破棄されます。</target>
        </trans-unit>
        <trans-unit id="b10321bc695ddfd296d4bec711587b802bbb5b6a" translate="yes" xml:space="preserve">
          <source>The component must generate a heading based on the &lt;code&gt;level&lt;/code&gt; prop, and we quickly arrive at this:</source>
          <target state="translated">コンポーネントは &lt;code&gt;level&lt;/code&gt; プロップに基づいて見出しを生成する必要があり、すぐにこれに到達します。</target>
        </trans-unit>
        <trans-unit id="c473e09bb4188e420d79ebd60ee46d8c65246cf3" translate="yes" xml:space="preserve">
          <source>The component system is another important concept in Vue, because it&amp;rsquo;s an abstraction that allows us to build large-scale applications composed of small, self-contained, and often reusable components. If we think about it, almost any type of application interface can be abstracted into a tree of components:</source>
          <target state="translated">コンポーネントシステムは、Vueのもう1つの重要な概念です。これは、小さな自己完結型の、多くの場合再利用可能なコンポーネントで構成される大規模なアプリケーションを構築できるようにする抽象概念だからです。考えてみると、ほとんどすべてのタイプのアプリケーションインターフェイスをコンポーネントツリーに抽象化できます。</target>
        </trans-unit>
        <trans-unit id="5ad941a099cd5fcebfd577e3e9fe5f50fad70402" translate="yes" xml:space="preserve">
          <source>The component system is another important concept in Vue, because it's an abstraction that allows us to build large-scale applications composed of small, self-contained, and often reusable components. If we think about it, almost any type of application interface can be abstracted into a tree of components:</source>
          <target state="translated">コンポーネント システムは Vue のもう 1 つの重要な概念です。考えてみれば、ほぼすべてのタイプのアプリケーションインターフェイスは、コンポーネントのツリーに抽象化することができます。</target>
        </trans-unit>
        <trans-unit id="3883d179f6d3f9bbe1b90b29bb01dd780ef82b29" translate="yes" xml:space="preserve">
          <source>The component will have a &lt;code&gt;button&lt;/code&gt; element to trigger the opening of the modal, and a &lt;code&gt;div&lt;/code&gt; element with a class of &lt;code&gt;.modal&lt;/code&gt;, which will contain the modal's content and a button to self-close.</source>
          <target state="translated">コンポーネントには、モーダルの開始をトリガーする &lt;code&gt;button&lt;/code&gt; 要素と、モーダルのコンテンツと自動閉じるボタンを含む &lt;code&gt;.modal&lt;/code&gt; のクラスを持つ &lt;code&gt;div&lt;/code&gt; 要素があります。</target>
        </trans-unit>
        <trans-unit id="e2a227479dfaa2ebe9e09278b1482fab712cafda" translate="yes" xml:space="preserve">
          <source>The component&amp;rsquo;s DOM will have been updated when this hook is called, so you can perform DOM-dependent operations here. However, in most cases you should avoid changing state inside the hook. To react to state changes, it&amp;rsquo;s usually better to use a &lt;a href=&quot;#computed&quot;&gt;computed property&lt;/a&gt; or &lt;a href=&quot;#watch&quot;&gt;watcher&lt;/a&gt; instead.</source>
          <target state="translated">このフックが呼び出されると、コンポーネントのDOMが更新されるため、ここでDOM依存の操作を実行できます。ただし、ほとんどの場合、フック内の状態を変更しないでください。状態の変化に対応するには、通常、代わりに&lt;a href=&quot;#computed&quot;&gt;計算されたプロパティ&lt;/a&gt;または&lt;a href=&quot;#watch&quot;&gt;ウォッチャー&lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="33a9c37f2f9908b2ff6754fe4ced3a3b882e927a" translate="yes" xml:space="preserve">
          <source>The component&amp;rsquo;s name is the first argument of &lt;code&gt;Vue.component&lt;/code&gt;.</source>
          <target state="translated">コンポーネントの名前は &lt;code&gt;Vue.component&lt;/code&gt; の最初の引数です。</target>
        </trans-unit>
        <trans-unit id="49a8030218616a010e0c989828a6fcfe732412f0" translate="yes" xml:space="preserve">
          <source>The component's DOM will have been updated when this hook is called, so you can perform DOM-dependent operations here. However, in most cases you should avoid changing state inside the hook. To react to state changes, it's usually better to use a &lt;a href=&quot;options-data#computed&quot;&gt;computed property&lt;/a&gt; or &lt;a href=&quot;options-data#watch&quot;&gt;watcher&lt;/a&gt; instead.</source>
          <target state="translated">このフックが呼び出されると、コンポーネントのDOMが更新されるため、ここでDOMに依存する操作を実行できます。ただし、ほとんどの場合、フック内の状態を変更することは避けてください。状態の変化に対応するには、通常、代わりに&lt;a href=&quot;options-data#computed&quot;&gt;計算されたプロパティ&lt;/a&gt;または&lt;a href=&quot;options-data#watch&quot;&gt;ウォッチャー&lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5ce09da928dc006cfa43406bce9e4016687fe784" translate="yes" xml:space="preserve">
          <source>The component's name is the first argument of &lt;code&gt;app.component&lt;/code&gt;. In the example above, the component's name is &quot;my-component-name&quot;.</source>
          <target state="translated">コンポーネントの名前は、 &lt;code&gt;app.component&lt;/code&gt; の最初の引数です。上記の例では、コンポーネントの名前は「my-component-name」です。</target>
        </trans-unit>
        <trans-unit id="6c50d6a412a378e537c001610ef774aa9ae31afc" translate="yes" xml:space="preserve">
          <source>The contents of the &lt;code&gt;span&lt;/code&gt; will be replaced with the value of the &lt;code&gt;rawHtml&lt;/code&gt; property, interpreted as plain HTML - data bindings are ignored. Note that you cannot use &lt;code&gt;v-html&lt;/code&gt; to compose template partials, because Vue is not a string-based templating engine. Instead, components are preferred as the fundamental unit for UI reuse and composition.</source>
          <target state="translated">&lt;code&gt;span&lt;/code&gt; のコンテンツは &lt;code&gt;rawHtml&lt;/code&gt; プロパティの値に置き換えられ、プレーンHTMLとして解釈されます-データバインディングは無視されます。Vueは文字列ベースのテンプレートエンジンではないため、テンプレートパーシャルを作成するために &lt;code&gt;v-html&lt;/code&gt; を使用できないことに注意してください。代わりに、UIの再利用と構成の基本単位としてコンポーネントが推奨されます。</target>
        </trans-unit>
        <trans-unit id="5c6fcc6772a0d1f034e465e8f1a0a82358c09227" translate="yes" xml:space="preserve">
          <source>The count will be logged synchronously on initial run.</source>
          <target state="translated">カウントは、最初の実行時に同期して記録されます。</target>
        </trans-unit>
        <trans-unit id="4b0a2416648a4140799cf8abb2cfaf5827329179" translate="yes" xml:space="preserve">
          <source>The createRenderer function accepts two generic arguments: &lt;code&gt;HostNode&lt;/code&gt; and &lt;code&gt;HostElement&lt;/code&gt;, corresponding to Node and Element types in the host environment.</source>
          <target state="translated">createRenderer関数は、ホスト環境のノードタイプと要素タイプに対応する &lt;code&gt;HostNode&lt;/code&gt; と &lt;code&gt;HostElement&lt;/code&gt; の2つのジェネリック引数を受け入れます。</target>
        </trans-unit>
        <trans-unit id="0aabf5563ee74ceaaa562a702ba84f4906e6efaf" translate="yes" xml:space="preserve">
          <source>The custom component &lt;code&gt;&amp;lt;blog-post-row&amp;gt;&lt;/code&gt; will be hoisted out as invalid content, causing errors in the eventual rendered output. Fortunately, the &lt;code&gt;is&lt;/code&gt; special attribute offers a workaround:</source>
          <target state="translated">カスタムコンポーネント &lt;code&gt;&amp;lt;blog-post-row&amp;gt;&lt;/code&gt; は無効なコンテンツとして引き上げられ、最終的にレンダリングされる出力でエラーが発生します。さいわい、 &lt;code&gt;is&lt;/code&gt; 特殊属性は回避策を提供します。</target>
        </trans-unit>
        <trans-unit id="11daf3c25f0cf63cc93ea2c53a8186b5d87e44d6" translate="yes" xml:space="preserve">
          <source>The custom component &lt;code&gt;&amp;lt;blog-post-row&amp;gt;&lt;/code&gt; will be hoisted out as invalid content, causing errors in the eventual rendered output. We can use the special &lt;code&gt;v-is&lt;/code&gt; directive as a workaround:</source>
          <target state="translated">カスタムコンポーネント &lt;code&gt;&amp;lt;blog-post-row&amp;gt;&lt;/code&gt; は無効なコンテンツとして引き上げられ、最終的にレンダリングされる出力でエラーが発生します。回避策として、特別な &lt;code&gt;v-is&lt;/code&gt; ディレクティブを使用できます。</target>
        </trans-unit>
        <trans-unit id="773dcdb0e4554ae71591d98763ca297e3e508d9e" translate="yes" xml:space="preserve">
          <source>The data object for the Vue instance. Vue will recursively convert its properties into getter/setters to make it &amp;ldquo;reactive&amp;rdquo;. &lt;strong&gt;The object must be plain&lt;/strong&gt;: native objects such as browser API objects and prototype properties are ignored. A rule of thumb is that data should just be data - it is not recommended to observe objects with their own stateful behavior.</source>
          <target state="translated">Vueインスタンスのデータオブジェクト。Vueは、そのプロパティを再帰的にゲッター/セッターに変換して「反応」させます。&lt;strong&gt;オブジェクトはプレーンである必要があります&lt;/strong&gt;。ブラウザAPIオブジェクトやプロトタイププロパティなどのネイティブオブジェクトは無視されます。経験則では、データは単なるデータである必要があります。独自のステートフル動作でオブジェクトを観察することはお勧めしません。</target>
        </trans-unit>
        <trans-unit id="f249c1e096e4760333b8a1a164e494b46a537f23" translate="yes" xml:space="preserve">
          <source>The data object that the Vue instance is observing. The Vue instance proxies access to the properties on its data object.</source>
          <target state="translated">Vue インスタンスが観測しているデータ オブジェクト。Vue インスタンスは、そのデータ オブジェクトのプロパティへのアクセスをプロキシします。</target>
        </trans-unit>
        <trans-unit id="c0311ef9e36a4cba0d120900ee89b483f3f6f275" translate="yes" xml:space="preserve">
          <source>The data object that the component instance is observing. The component instance proxies access to the properties on its data object.</source>
          <target state="translated">コンポーネント・インスタンスが観測しているデータ・オブジェクト。コンポーネント インスタンスは、そのデータ オブジェクトのプロパティへのアクセスをプロキシします。</target>
        </trans-unit>
        <trans-unit id="536204b9289a091fc1bfb216ea4a0b6805215f8d" translate="yes" xml:space="preserve">
          <source>The default behavior of &lt;code&gt;v-for&lt;/code&gt; will try to patch the elements in-place without moving them. To force it to reorder elements, you need to provide an ordering hint with the &lt;code&gt;key&lt;/code&gt; special attribute:</source>
          <target state="translated">&lt;code&gt;v-for&lt;/code&gt; のデフォルトの動作では、要素を移動せずにインプレースでパッチを適用しようとします。要素の順序を変更することを強制するには、あなたが注文ヒントを提供する必要がある &lt;code&gt;key&lt;/code&gt; 特別な属性：</target>
        </trans-unit>
        <trans-unit id="4b1148c386014a26cbf146b0929f7af1e1e7af0e" translate="yes" xml:space="preserve">
          <source>The default behavior of &lt;code&gt;v-for&lt;/code&gt; will try to patch the elements in-place without moving them. To force it to reorder elements, you should provide an ordering hint with the &lt;code&gt;key&lt;/code&gt; special attribute:</source>
          <target state="translated">&lt;code&gt;v-for&lt;/code&gt; のデフォルトの動作では、要素を移動せずにインプレースでパッチを適用しようとします。要素を強制的に並べ替えるには、 &lt;code&gt;key&lt;/code&gt; 特別な属性を使用して順序付けのヒントを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="b0d6d6ed400b5a953b0d97b27d49df6ee5eeb0d1" translate="yes" xml:space="preserve">
          <source>The default value is &lt;code&gt;'pre'&lt;/code&gt;, which specifies that the callback should be invoked before rendering. This allows the callback to update other values before the template runs.</source>
          <target state="translated">デフォルト値は &lt;code&gt;'pre'&lt;/code&gt; で、レンダリング前にコールバックを呼び出す必要があることを指定します。これにより、テンプレートが実行される前に、コールバックが他の値を更新できるようになります。</target>
        </trans-unit>
        <trans-unit id="d129c09e272230c72d4816c9cf37d602f78c6b98" translate="yes" xml:space="preserve">
          <source>The detailed usage for &lt;code&gt;v-for&lt;/code&gt; is explained in the guide section linked below.</source>
          <target state="translated">&lt;code&gt;v-for&lt;/code&gt; の詳細な使用法は、以下にリンクされているガイドセクションで説明されています。</target>
        </trans-unit>
        <trans-unit id="343f0a574d7c11cb2eeec3975287b6ad82f491f8" translate="yes" xml:space="preserve">
          <source>The dev/prod files are pre-built, but the appropriate file is automatically required based on &lt;code&gt;process.env.NODE_ENV&lt;/code&gt;.</source>
          <target state="translated">dev / prodファイルは事前にビルドされていますが、 &lt;code&gt;process.env.NODE_ENV&lt;/code&gt; に基づいて適切なファイルが自動的に必要になります。</target>
        </trans-unit>
        <trans-unit id="fcb2400b62e62455e5be23679bc16dcd684f0e97" translate="yes" xml:space="preserve">
          <source>The difference is that an element with &lt;code&gt;v-show&lt;/code&gt; will always be rendered and remain in the DOM; &lt;code&gt;v-show&lt;/code&gt; only toggles the &lt;code&gt;display&lt;/code&gt; CSS property of the element.</source>
          <target state="translated">違いは、 &lt;code&gt;v-show&lt;/code&gt; を含む要素が常にレンダリングされ、DOMに残ることです。 &lt;code&gt;v-show&lt;/code&gt; は、要素のCSSプロパティの &lt;code&gt;display&lt;/code&gt; のみを切り替えます。</target>
        </trans-unit>
        <trans-unit id="9beac5c57d068b893c427afee540acec4a448457" translate="yes" xml:space="preserve">
          <source>The direct child components of the current instance. &lt;strong&gt;Note there&amp;rsquo;s no order guarantee for &lt;code&gt;$children&lt;/code&gt;, and it is not reactive.&lt;/strong&gt; If you find yourself trying to use &lt;code&gt;$children&lt;/code&gt; for data binding, consider using an Array and &lt;code&gt;v-for&lt;/code&gt; to generate child components, and use the Array as the source of truth.</source>
          <target state="translated">現在のインスタンスの直接の子コンポーネント。&lt;strong&gt; &lt;code&gt;$children&lt;/code&gt; &lt;/strong&gt;&lt;strong&gt;注文保証はなく、反応しないことに注意してください。&lt;/strong&gt;データバインディングに &lt;code&gt;$children&lt;/code&gt; を使用しようとしている場合は、配列と &lt;code&gt;v-for&lt;/code&gt; を使用して子コンポーネントを生成し、配列を真実のソースとして使用することを検討してください。</target>
        </trans-unit>
        <trans-unit id="8966ad2384af724eb5afaebd84955178e2bef331" translate="yes" xml:space="preserve">
          <source>The directive &lt;code&gt;v-if&lt;/code&gt; is used to conditionally render a block. The block will only be rendered if the directive&amp;rsquo;s expression returns a truthy value.</source>
          <target state="translated">ディレクティブ &lt;code&gt;v-if&lt;/code&gt; は、条件付きでブロックをレンダリングするために使用されます。ブロックは、ディレクティブの式が真の値を返す場合にのみレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="b8232d0e5e0905d45b1ad05a56cfc3f9bba50116" translate="yes" xml:space="preserve">
          <source>The directive &lt;code&gt;v-if&lt;/code&gt; is used to conditionally render a block. The block will only be rendered if the directive's expression returns a truthy value.</source>
          <target state="translated">ディレクティブ &lt;code&gt;v-if&lt;/code&gt; は、条件付きでブロックをレンダリングするために使用されます。ブロックは、ディレクティブの式が真の値を返す場合にのみレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="defd17d65c75e19b004eb45d504b28dc381f0693" translate="yes" xml:space="preserve">
          <source>The directive definition if a &lt;code&gt;definition&lt;/code&gt; argument was not passed</source>
          <target state="translated">&lt;code&gt;definition&lt;/code&gt; 引数が渡されなかった場合のディレクティブ定義</target>
        </trans-unit>
        <trans-unit id="4141be39fd2adee28a4d62aa1a5f31477b8a9bc9" translate="yes" xml:space="preserve">
          <source>The double mustaches interprets the data as plain text, not HTML. In order to output real HTML, you will need to use the &lt;a href=&quot;../api/directives#v-html&quot;&gt;&lt;code&gt;v-html&lt;/code&gt; directive&lt;/a&gt;:</source>
          <target state="translated">二重の口ひげは、データをHTMLではなくプレーンテキストとして解釈します。実際のHTMLを出力するには、&lt;a href=&quot;../api/directives#v-html&quot;&gt; &lt;code&gt;v-html&lt;/code&gt; ディレクティブ&lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a9e1b62f46f6347c3255105bf2f7f7bb4beb980e" translate="yes" xml:space="preserve">
          <source>The double mustaches interprets the data as plain text, not HTML. In order to output real HTML, you will need to use the &lt;code&gt;v-html&lt;/code&gt; directive:</source>
          <target state="translated">二重口ひげは、データをHTMLではなくプレーンテキストとして解釈します。実際のHTMLを出力するには、 &lt;code&gt;v-html&lt;/code&gt; ディレクティブを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="305ed691c1804ae460a172a9d094e4f8d80ad4b2" translate="yes" xml:space="preserve">
          <source>The easiest way to pre-compile templates is using &lt;a href=&quot;../single-file-component&quot;&gt;Single-File Components&lt;/a&gt; - the associated build setups automatically performs pre-compilation for you, so the built code contains the already compiled render functions instead of raw template strings.</source>
          <target state="translated">テンプレートをプリコンパイルする最も簡単な方法は、&lt;a href=&quot;../single-file-component&quot;&gt;単一ファイルコンポーネント&lt;/a&gt;を使用することです。関連するビルドセットアップが自動的にプリコンパイルを実行するため、ビルドされたコードには、生のテンプレート文字列ではなく、コンパイル済みのレンダリング関数が含まれます。</target>
        </trans-unit>
        <trans-unit id="cdf9489100840a3b7f6fc331943b5d3351ce62f0" translate="yes" xml:space="preserve">
          <source>The easiest way to pre-compile templates is using &lt;a href=&quot;single-file-components&quot;&gt;Single-File Components&lt;/a&gt; - the associated build setups automatically performs pre-compilation for you, so the built code contains the already compiled render functions instead of raw template strings.</source>
          <target state="translated">テンプレートをプリコンパイルする最も簡単な方法は、&lt;a href=&quot;single-file-components&quot;&gt;単一ファイルコンポーネント&lt;/a&gt;を使用することです。関連するビルドセットアップでは、プリコンパイルが自動的に実行されるため、ビルドされたコードには、生のテンプレート文字列ではなく、コンパイル済みのレンダリング関数が含まれます。</target>
        </trans-unit>
        <trans-unit id="db435bc25ee0c4942f29c67b5bbf4fa0aa7247d0" translate="yes" xml:space="preserve">
          <source>The easiest way to try out Vue.js is using the &lt;a href=&quot;https://codepen.io/team/Vue/pen/KKpRVpx&quot;&gt;Hello World example (opens new window)&lt;/a&gt;. Feel free to open it in another tab and follow along as we go through some basic examples.</source>
          <target state="translated">Vue.jsを試す最も簡単な方法は、&lt;a href=&quot;https://codepen.io/team/Vue/pen/KKpRVpx&quot;&gt;Hello Worldの例（新しいウィンドウを開く）を使用すること&lt;/a&gt;です。別のタブで自由に開いて、いくつかの基本的な例を見ていきましょう。</target>
        </trans-unit>
        <trans-unit id="75f9865708d8a06fa846e682702658bdabd9c8e0" translate="yes" xml:space="preserve">
          <source>The easiest way to try out Vue.js is using the &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/50wL7mdz/&quot;&gt;JSFiddle Hello World example&lt;/a&gt;. Feel free to open it in another tab and follow along as we go through some basic examples. Or, you can &lt;a href=&quot;https://gist.githubusercontent.com/chrisvfritz/7f8d7d63000b48493c336e48b3db3e52/raw/ed60c4e5d5c6fec48b0921edaed0cb60be30e87c/index.html&quot;&gt;create an &lt;code&gt;index.html&lt;/code&gt; file&lt;/a&gt; and include Vue with:</source>
          <target state="translated">Vue.jsを試す最も簡単な方法は、&lt;a href=&quot;https://jsfiddle.net/chrisvfritz/50wL7mdz/&quot;&gt;JSFiddle Hello Worldの例&lt;/a&gt;を使用することです。別のタブで開いて、基本的な例をいくつか見ていきましょう。または、&lt;a href=&quot;https://gist.githubusercontent.com/chrisvfritz/7f8d7d63000b48493c336e48b3db3e52/raw/ed60c4e5d5c6fec48b0921edaed0cb60be30e87c/index.html&quot;&gt; &lt;code&gt;index.html&lt;/code&gt; &lt;/a&gt;ファイルを作成して、 Vueを次のように含めることができます。</target>
        </trans-unit>
        <trans-unit id="847757f66edc351ea14e3e7f70aa130ed1b67ad7" translate="yes" xml:space="preserve">
          <source>The el option can no longer be used in &lt;code&gt;Vue.extend&lt;/code&gt;. It&amp;rsquo;s only valid as an instance creation option.</source>
          <target state="translated">elオプションは &lt;code&gt;Vue.extend&lt;/code&gt; では使用できなくなりました。インスタンス作成オプションとしてのみ有効です。</target>
        </trans-unit>
        <trans-unit id="f780a51fca89ef85f1e54b75143303e24c122ac1" translate="yes" xml:space="preserve">
          <source>The element in the host environment.</source>
          <target state="translated">ホスト環境の要素。</target>
        </trans-unit>
        <trans-unit id="0add764dbfcd6dbf253011663e8660a07e0d583a" translate="yes" xml:space="preserve">
          <source>The element the directive is bound to. This can be used to directly manipulate the DOM.</source>
          <target state="translated">ディレクティブがバインドされる要素。これを使って DOM を直接操作することができます。</target>
        </trans-unit>
        <trans-unit id="e484d752f6e7f6943881c7bf91dd2adc3796ddcf" translate="yes" xml:space="preserve">
          <source>The equivalent in Vue 3 is &lt;a href=&quot;../../api/application-config#globalproperties&quot;&gt;&lt;code&gt;config.globalProperties&lt;/code&gt;&lt;/a&gt;. These properties will be copied across as part of instantiating a component within the application:</source>
          <target state="translated">&lt;a href=&quot;../../api/application-config#globalproperties&quot;&gt; &lt;code&gt;config.globalProperties&lt;/code&gt; &lt;/a&gt;同等のものはconfig.globalPropertiesです。これらのプロパティは、アプリケーション内のコンポーネントのインスタンス化の一部としてコピーされます。</target>
        </trans-unit>
        <trans-unit id="baf7aed57333af6e96ef49b1f2b3ce42c4ae2a22" translate="yes" xml:space="preserve">
          <source>The essential use case for reactive state in Vue is that we can use it during render. Thanks to dependency tracking, the view automatically updates when reactive state changes.</source>
          <target state="translated">Vue でのリアクティブ ステートの本質的な使用例は、レンダリング中に使用できることです。依存関係のトラッキングのおかげで、リアクティブな状態が変化するとビューが自動的に更新されます。</target>
        </trans-unit>
        <trans-unit id="b92fce4867ed9fd2a331cd38fbea7af99a51fcec" translate="yes" xml:space="preserve">
          <source>The example above still works in Vue 3.x. However, we no longer recommend using the &lt;code&gt;key&lt;/code&gt; attribute on &lt;code&gt;v-if&lt;/code&gt;/&lt;code&gt;v-else&lt;/code&gt;/&lt;code&gt;v-else-if&lt;/code&gt; branches, since unique &lt;code&gt;key&lt;/code&gt;s are now automatically generated on conditional branches if you don't provide them.</source>
          <target state="translated">上記の例は、Vue3.xでも機能します。ただし、 &lt;code&gt;v-if&lt;/code&gt; / &lt;code&gt;v-else&lt;/code&gt; / &lt;code&gt;v-else-if&lt;/code&gt; ブランチで &lt;code&gt;key&lt;/code&gt; 属性を使用することはお勧めしません。これは、指定しない場合、条件付きブランチで一意の &lt;code&gt;key&lt;/code&gt; が自動的に生成されるようになったためです。</target>
        </trans-unit>
        <trans-unit id="14ff2ebab179926c1bba713b3418f8fa507384ca" translate="yes" xml:space="preserve">
          <source>The filter&amp;rsquo;s function always receives the expression&amp;rsquo;s value (the result of the former chain) as its first argument. In the above example, the &lt;code&gt;capitalize&lt;/code&gt; filter function will receive the value of &lt;code&gt;message&lt;/code&gt; as its argument.</source>
          <target state="translated">フィルターの関数は常に最初の引数として式の値（前のチェーンの結果）を受け取ります。上記の例では、 &lt;code&gt;capitalize&lt;/code&gt; フィルター関数は &lt;code&gt;message&lt;/code&gt; の値を引数として受け取ります。</target>
        </trans-unit>
        <trans-unit id="25978631002a6e912099e352f219ba34c4dc10cb" translate="yes" xml:space="preserve">
          <source>The filtered list will &lt;em&gt;only&lt;/em&gt; be re-evaluated if there are relevant changes to the &lt;code&gt;users&lt;/code&gt; array, making filtering much more efficient.</source>
          <target state="translated">フィルタリングされたリストは、 &lt;code&gt;users&lt;/code&gt; 配列に関連する変更がある場合に&lt;em&gt;のみ&lt;/em&gt;再評価され、フィルタリングがより効率的になります。</target>
        </trans-unit>
        <trans-unit id="41e792bc8bb14d8a14bb5303a29567bf0302a932" translate="yes" xml:space="preserve">
          <source>The final API is as follows:</source>
          <target state="translated">最終的なAPIは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="84c6a470325454b1c8c66e1bcbcc2766951cda88" translate="yes" xml:space="preserve">
          <source>The first argument in the &lt;code&gt;setup&lt;/code&gt; function is the &lt;code&gt;props&lt;/code&gt; argument. Just as you would expect in a standard component, &lt;code&gt;props&lt;/code&gt; inside of a &lt;code&gt;setup&lt;/code&gt; function are reactive and will be updated when new props are passed in.</source>
          <target state="translated">&lt;code&gt;setup&lt;/code&gt; 関数の最初の引数は &lt;code&gt;props&lt;/code&gt; 引数です。標準コンポーネントで期待するのと同じように、 &lt;code&gt;setup&lt;/code&gt; 関数内の &lt;code&gt;props&lt;/code&gt; は反応的であり、新しい小道具が渡されると更新されます。</target>
        </trans-unit>
        <trans-unit id="d746cf67e1faa3691049af5d98cb35049b8b5138" translate="yes" xml:space="preserve">
          <source>The following consists a list of breaking changes from 2.x:</source>
          <target state="translated">以下は2.xからの変更点の一覧です。</target>
        </trans-unit>
        <trans-unit id="59301ec50d1aa02b21c717dc2146c442c1b3271c" translate="yes" xml:space="preserve">
          <source>The following section provides guidelines on things to keep in mind when evaluating which component testing framework is best for your application.</source>
          <target state="translated">次のセクションでは、アプリケーションに最適なコンポーネントテストフレームワークを評価する際に留意すべきことのガイドラインを示しています。</target>
        </trans-unit>
        <trans-unit id="eabf2a91efba3bd9bf968cab18833080e3840507" translate="yes" xml:space="preserve">
          <source>The following table contains how the lifecycle hooks are invoked inside of &lt;a href=&quot;composition-api-setup&quot;&gt;setup()&lt;/a&gt;:</source>
          <target state="translated">次の表には、&lt;a href=&quot;composition-api-setup&quot;&gt;setup（）&lt;/a&gt;内でライフサイクルフックが呼び出される方法が含まれています。</target>
        </trans-unit>
        <trans-unit id="3ad52d3ab04df58ce927fd2d0e3e4349119015d3" translate="yes" xml:space="preserve">
          <source>The following table describes how Vue coerce &quot;enumerated attributes&quot; differently with normal non-boolean attributes:</source>
          <target state="translated">次の表では、Vue が「列挙属性」を通常の非ブーリアン属性とは異なる方法で強制する方法を説明しています。</target>
        </trans-unit>
        <trans-unit id="af1bd86b12f9a72f44081cf9de88b1b52575b50e" translate="yes" xml:space="preserve">
          <source>The following table describes the new behavior:</source>
          <target state="translated">新しい動作については、以下の表を参照してください。</target>
        </trans-unit>
        <trans-unit id="b5951356bec324133fa39def8def2ef7e47b05c1" translate="yes" xml:space="preserve">
          <source>The following template:</source>
          <target state="translated">以下のようなテンプレートです。</target>
        </trans-unit>
        <trans-unit id="79a7f9945e1b3073c06c30c93a587923e0ca489c" translate="yes" xml:space="preserve">
          <source>The function receives a root component options object as a first parameter:</source>
          <target state="translated">この関数は、最初のパラメータとしてルートコンポーネントのオプションオブジェクトを受け取ります。</target>
        </trans-unit>
        <trans-unit id="79ce796c0d386173f99fda9a62ce35edc2ca478b" translate="yes" xml:space="preserve">
          <source>The function receives the resolved props as its first argument:</source>
          <target state="translated">この関数は、解決されたpropsを第一引数として受け取ります。</target>
        </trans-unit>
        <trans-unit id="e4a607f6bd4411962ffcf434e012c621cb12c3dc" translate="yes" xml:space="preserve">
          <source>The function that returns a data object for the component instance. In &lt;code&gt;data&lt;/code&gt;, we don't recommend to observe objects with their own stateful behavior like browser API objects and prototype properties. A good idea would be to have here just a plain object that represents component data.</source>
          <target state="translated">コンポーネントインスタンスのデータオブジェクトを返す関数。では &lt;code&gt;data&lt;/code&gt; 、我々はブラウザのAPIオブジェクトとプロトタイププロパティのように、自分のステートフルな動作を持つオブジェクトを観察することはお勧めしません。ここでは、コンポーネントデータを表すプレーンオブジェクトだけを用意することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="81d2bc9fc8e8cc807113eae603850488210c6f3b" translate="yes" xml:space="preserve">
          <source>The function to update the list of repositories</source>
          <target state="translated">リポジトリ一覧を更新する機能</target>
        </trans-unit>
        <trans-unit id="6e4a514c82bb3b7baff7919684302ede3370a422" translate="yes" xml:space="preserve">
          <source>The getter/setters are invisible to the user, but under the hood they enable Vue to perform dependency-tracking and change-notification when properties are accessed or modified. One caveat is that browser consoles format getter/setters differently when converted data objects are logged, so you may want to install &lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot;&gt;vue-devtools&lt;/a&gt; for a more inspection-friendly interface.</source>
          <target state="translated">ゲッター/セッターはユーザーには見えませんが、内部的には、プロパティがアクセスまたは変更されたときに、Vueが依存関係の追跡と変更通知を実行できるようにします。1つの注意点は、変換されたデータオブジェクトがログに記録されると、ブラウザーコンソールがゲッター/セッターを異なる形式でフォーマットするため、より検査しやすいインターフェイスのために&lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot;&gt;vue-devtools&lt;/a&gt;をインストールする必要がある場合があることです。</target>
        </trans-unit>
        <trans-unit id="79b128aa63f16ec5285b2d9f0426b750ca304c24" translate="yes" xml:space="preserve">
          <source>The hook functions for directives have been renamed to better align with the component lifecycle.</source>
          <target state="translated">ディレクティブのフック関数の名前が変更され、 コンポーネントのライフサイクルに合わせたものになりました。</target>
        </trans-unit>
        <trans-unit id="8cd9d811837e0eecf0a4df368877b6262fe04425" translate="yes" xml:space="preserve">
          <source>The implicitly assigned &lt;code&gt;$index&lt;/code&gt; and &lt;code&gt;$key&lt;/code&gt; variables have been removed in favor of explicitly defining them in &lt;code&gt;v-for&lt;/code&gt;. This makes the code easier to read for developers less experienced with Vue and also results in much clearer behavior when dealing with nested loops.</source>
          <target state="translated">暗黙的に割り当てられた &lt;code&gt;$index&lt;/code&gt; および &lt;code&gt;$key&lt;/code&gt; 変数は、 &lt;code&gt;v-for&lt;/code&gt; で明示的に定義するために削除されました。これにより、Vueの経験が少ない開発者にとってコードが読みやすくなり、ネストされたループを処理するときの動作がより明確になります。</target>
        </trans-unit>
        <trans-unit id="fdcdfedc033d4da59a3a9ccb8b1076c825abc317" translate="yes" xml:space="preserve">
          <source>The install method will be called with the application as its first argument. Any &lt;code&gt;options&lt;/code&gt; passed to &lt;code&gt;use&lt;/code&gt; will be passed on in subsequent arguments.</source>
          <target state="translated">installメソッドは、アプリケーションを最初の引数として呼び出されます。 &lt;code&gt;use&lt;/code&gt; するために渡された &lt;code&gt;options&lt;/code&gt; はすべて、後続の引数で渡されます。</target>
        </trans-unit>
        <trans-unit id="cd591127230d8deaf3a79ff7072473dcdfb326ef" translate="yes" xml:space="preserve">
          <source>The instantiation options used for the current Vue instance. This is useful when you want to include custom properties in the options:</source>
          <target state="translated">現在の Vue インスタンスで使用されているインスタンス化オプション。これは、カスタム プロパティをオプションに含めたい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="42e266e4c0aeeb2f463f05d9ac2084a7679486b8" translate="yes" xml:space="preserve">
          <source>The instantiation options used for the current component instance. This is useful when you want to include custom properties in the options:</source>
          <target state="translated">現在のコンポーネントのインスタンスに使用されているインスタンス化オプション。これは、オプションにカスタムプロパティを含めたい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="ec67800539f4f653afaebcd18a910db339460bf1" translate="yes" xml:space="preserve">
          <source>The list of repositories</source>
          <target state="translated">リポジトリの一覧</target>
        </trans-unit>
        <trans-unit id="6507e95ac3123f38dc39170ae522dfbce1786b53" translate="yes" xml:space="preserve">
          <source>The logic for many event handlers will be more complex though, so keeping your JavaScript in the value of the &lt;code&gt;v-on&lt;/code&gt; attribute isn&amp;rsquo;t feasible. That&amp;rsquo;s why &lt;code&gt;v-on&lt;/code&gt; can also accept the name of a method you&amp;rsquo;d like to call.</source>
          <target state="translated">ただし、多くのイベントハンドラーのロジックはより複雑になるため、JavaScriptを &lt;code&gt;v-on&lt;/code&gt; 属性の値に維持することは現実的ではありません。そのため、 &lt;code&gt;v-on&lt;/code&gt; は、呼び出すメソッドの名前も受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="8643e2e36516469110b28c58127db5ac02acc2d7" translate="yes" xml:space="preserve">
          <source>The logic for many event handlers will be more complex though, so keeping your JavaScript in the value of the &lt;code&gt;v-on&lt;/code&gt; attribute isn't feasible. That's why &lt;code&gt;v-on&lt;/code&gt; can also accept the name of a method you'd like to call.</source>
          <target state="translated">ただし、多くのイベントハンドラーのロジックはより複雑になるため、JavaScriptを &lt;code&gt;v-on&lt;/code&gt; 属性の値に保持することは現実的ではありません。そのため、 &lt;code&gt;v-on&lt;/code&gt; は呼び出したいメソッドの名前も受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="dba79afcd572cfc128e601a2971f43c1e6a797dc" translate="yes" xml:space="preserve">
          <source>The main differences are that:</source>
          <target state="translated">主な違いは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="a5ec5b554ea02ea1ab8ee1dcd4e2e612d6cff494" translate="yes" xml:space="preserve">
          <source>The main or central content of the document.</source>
          <target state="translated">文書の主な内容または中心的な内容。</target>
        </trans-unit>
        <trans-unit id="a7dfd0134284048bc632e36141f4ea3e7333c213" translate="yes" xml:space="preserve">
          <source>The match is first checked on the component&amp;rsquo;s own &lt;code&gt;name&lt;/code&gt; option, then its local registration name (the key in the parent&amp;rsquo;s &lt;code&gt;components&lt;/code&gt; option) if the &lt;code&gt;name&lt;/code&gt; option is not available. Anonymous components cannot be matched against.</source>
          <target state="translated">最初にコンポーネント自体の &lt;code&gt;name&lt;/code&gt; オプションで一致がチェックされ、次に &lt;code&gt;name&lt;/code&gt; オプションが使用できない場合はそのローカル登録名（親の &lt;code&gt;components&lt;/code&gt; オプションのキー）がチェックされます。匿名コンポーネントは照合できません。</target>
        </trans-unit>
        <trans-unit id="ef8038b96392b1b874278c0005b7bde8cb05251c" translate="yes" xml:space="preserve">
          <source>The match is first checked on the component's own &lt;code&gt;name&lt;/code&gt; option, then its local registration name (the key in the parent's &lt;code&gt;components&lt;/code&gt; option) if the &lt;code&gt;name&lt;/code&gt; option is not available. Anonymous components cannot be matched against.</source>
          <target state="translated">一致は、最初にコンポーネント自体の &lt;code&gt;name&lt;/code&gt; オプションでチェックされ、次に &lt;code&gt;name&lt;/code&gt; オプションが使用できない場合はそのローカル登録名（親の &lt;code&gt;components&lt;/code&gt; オプションのキー）でチェックされます。匿名のコンポーネントは照合できません。</target>
        </trans-unit>
        <trans-unit id="a6157926048113f46fe23ee578e48fe424291d8e" translate="yes" xml:space="preserve">
          <source>The maximum number of component instances to cache. Once this number is reached, the cached component instance that was least recently accessed will be destroyed before creating a new instance.</source>
          <target state="translated">キャッシュするコンポーネント インスタンスの最大数。この数に達すると、最も最近アクセスされなかったキャッシュされたコンポーネント インスタンスは、新しいインスタンスを作成する前に破棄されます。</target>
        </trans-unit>
        <trans-unit id="faa3cf52e773ababaa5a5e4102b0ed3a8de12ab7" translate="yes" xml:space="preserve">
          <source>The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. Let's try to check what do we have in these parameters when we use a mixin:</source>
          <target state="translated">マージ戦略は、親インスタンスと子インスタンスで定義されたオプションの値をそれぞれ第一引数と第二引数として受け取ります。ミキシングを使うときに、これらのパラメータに何が入っているのかを確認してみましょう。</target>
        </trans-unit>
        <trans-unit id="8bf10a52fb597971ee2811a4b6daca68eb87e10e" translate="yes" xml:space="preserve">
          <source>The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context Vue instance is passed as the third argument.</source>
          <target state="translated">マージ戦略は、親インスタンスと子インスタンスで定義されたオプションの値をそれぞれ第 1 引数と第 2 引数として受け取ります。コンテキスト Vue インスタンスは、第 3 引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="e3b38721a9b8218aec56607e019ddcce672f2049" translate="yes" xml:space="preserve">
          <source>The merge strategy receives the value of that option defined on the parent and child instances as the first and second arguments, respectively. The context application instance is passed as the third argument.</source>
          <target state="translated">マージ戦略は、親インスタンスと子インスタンスで定義されたオプションの値をそれぞれ第一引数と第二引数として受け取ります。コンテキストアプリケーションのインスタンスが第三引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="7f5a003cef802af9e91a6f9747fac2e515359d41" translate="yes" xml:space="preserve">
          <source>The method returns the instance itself so you can chain other instance methods after it.</source>
          <target state="translated">このメソッドはインスタンス自体を返すので、インスタンスの後に他のインスタンスメソッドを連鎖させることができます。</target>
        </trans-unit>
        <trans-unit id="951de592d924e3c9c03829021deb9a40c05ac8d4" translate="yes" xml:space="preserve">
          <source>The most basic form of data binding is text interpolation using the &quot;Mustache&quot; syntax (double curly braces):</source>
          <target state="translated">データバインディングの最も基本的な形式は、「口ひげ」構文(二重中括弧)を使用したテキスト補間です。</target>
        </trans-unit>
        <trans-unit id="46eb4e33843509639b8c44662beadd21ed8310ed" translate="yes" xml:space="preserve">
          <source>The most basic form of data binding is text interpolation using the &amp;ldquo;Mustache&amp;rdquo; syntax (double curly braces):</source>
          <target state="translated">データバインディングの最も基本的な形式は、「Mustache」構文（二重中括弧）を使用したテキスト補間です。</target>
        </trans-unit>
        <trans-unit id="bd564c73b6d49eec1b2c8919fa49f3bc33098a11" translate="yes" xml:space="preserve">
          <source>The most common use case is combined with &lt;code&gt;v-for&lt;/code&gt;:</source>
          <target state="translated">最も一般的な使用例は &lt;code&gt;v-for&lt;/code&gt; と組み合わされています：</target>
        </trans-unit>
        <trans-unit id="8bb67bc91573d8c042cf8f313e62326372c08cd1" translate="yes" xml:space="preserve">
          <source>The most straightforward workaround in such cases is using &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; with an alternative type:</source>
          <target state="translated">このような場合の最も簡単な回避策は、別のタイプで &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="e584a8b872f017ba0e0f780450cffc4632e3bfc4" translate="yes" xml:space="preserve">
          <source>The mustache tag will be replaced with the value of the &lt;code&gt;msg&lt;/code&gt; property from the corresponding component instance. It will also be updated whenever the &lt;code&gt;msg&lt;/code&gt; property changes.</source>
          <target state="translated">口ひげタグは、対応するコンポーネントインスタンスの &lt;code&gt;msg&lt;/code&gt; プロパティの値に置き換えられます。また、 &lt;code&gt;msg&lt;/code&gt; プロパティが変更されるたびに更新されます。</target>
        </trans-unit>
        <trans-unit id="c379b64d918d58c59f406c013a50f15fd94aaa4c" translate="yes" xml:space="preserve">
          <source>The mustache tag will be replaced with the value of the &lt;code&gt;msg&lt;/code&gt; property on the corresponding data object. It will also be updated whenever the data object&amp;rsquo;s &lt;code&gt;msg&lt;/code&gt; property changes.</source>
          <target state="translated">moustacheタグは、対応するデータオブジェクトの &lt;code&gt;msg&lt;/code&gt; プロパティの値に置き換えられます。また、データオブジェクトの &lt;code&gt;msg&lt;/code&gt; プロパティが変更されるたびに更新されます。</target>
        </trans-unit>
        <trans-unit id="1472ee4db13ff37789b1c91f3cd08acd5d176b23" translate="yes" xml:space="preserve">
          <source>The name of a loaded component.</source>
          <target state="translated">ロードされたコンポーネントの名前。</target>
        </trans-unit>
        <trans-unit id="821d318da5fdda7594f134b76cce4228f91650d3" translate="yes" xml:space="preserve">
          <source>The name of a loaded directive.</source>
          <target state="translated">ロードされたディレクティブの名前。</target>
        </trans-unit>
        <trans-unit id="b2545c8b359c02ab69b644b81b09e6fb841966ff" translate="yes" xml:space="preserve">
          <source>The name of the property to inject</source>
          <target state="translated">インジェクションするプロパティの名前</target>
        </trans-unit>
        <trans-unit id="fc9786bb0111ad00d45d0fad40e21ed46d935988" translate="yes" xml:space="preserve">
          <source>The name you give a component may depend on where you intend to use it. When using a component directly in the DOM (as opposed to in a string template or &lt;a href=&quot;single-file-component&quot;&gt;single-file component&lt;/a&gt;), we strongly recommend following the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name&quot;&gt;W3C rules (opens new window)&lt;/a&gt; for custom tag names:</source>
          <target state="translated">コンポーネントに付ける名前は、使用する場所によって異なる場合があります。（文字列テンプレートや&lt;a href=&quot;single-file-component&quot;&gt;単一ファイルコンポーネントではなく&lt;/a&gt;）DOMで直接コンポーネントを使用する場合は、カスタムタグ名の&lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name&quot;&gt;W3Cルール（新しいウィンドウを開く）&lt;/a&gt;に従うことを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="37afbe4bcd06f0f0be230e6d8e06d5f57d026a3e" translate="yes" xml:space="preserve">
          <source>The name you give a component may depend on where you intend to use it. When using a component directly in the DOM (as opposed to in a string template or &lt;a href=&quot;single-file-components&quot;&gt;single-file component&lt;/a&gt;), we strongly recommend following the &lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name&quot;&gt;W3C rules&lt;/a&gt; for custom tag names (all-lowercase, must contain a hyphen). This helps you avoid conflicts with current and future HTML elements.</source>
          <target state="translated">コンポーネントに付ける名前は、使用する場所によって異なる場合があります。（文字列テンプレートや&lt;a href=&quot;single-file-components&quot;&gt;単一ファイルコンポーネントではなく&lt;/a&gt;）DOMで直接コンポーネントを使用する場合は、カスタムタグ名の&lt;a href=&quot;https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name&quot;&gt;W3Cルールに&lt;/a&gt;従うことを強くお勧めします（すべて小文字、ハイフンを含める必要があります）。これにより、現在および将来のHTML要素との競合を回避できます。</target>
        </trans-unit>
        <trans-unit id="26e11e8c8a45e6a0874ed1477c0e4c8be3700515" translate="yes" xml:space="preserve">
          <source>The new &lt;code&gt;setup&lt;/code&gt; component option is executed &lt;strong&gt;before&lt;/strong&gt; the component is created, once the &lt;code&gt;props&lt;/code&gt; are resolved, and serves as the entry point for composition API's.</source>
          <target state="translated">新しい &lt;code&gt;setup&lt;/code&gt; コンポーネントオプションは、コンポーネントが作成される&lt;strong&gt;前&lt;/strong&gt;、 &lt;code&gt;props&lt;/code&gt; が解決さ&lt;strong&gt;れる&lt;/strong&gt;と実行され、コンポジションAPIのエントリポイントとして機能します。</target>
        </trans-unit>
        <trans-unit id="49544b57b4faf031cbd490df14c62342f8913c7c" translate="yes" xml:space="preserve">
          <source>The new, more concise way to configure &lt;code&gt;keyCodes&lt;/code&gt; is through &lt;code&gt;Vue.config.keyCodes&lt;/code&gt;. For example:</source>
          <target state="translated">&lt;code&gt;keyCodes&lt;/code&gt; を構成するための新しいより簡潔な方法は、 &lt;code&gt;Vue.config.keyCodes&lt;/code&gt; を使用することです。例えば：</target>
        </trans-unit>
        <trans-unit id="1ba4a8191026a27a782703cf2cb8992c45a25eab" translate="yes" xml:space="preserve">
          <source>The next 2 examples work with Vue 2.2.1+. Below that version, injected values were resolved after the &lt;code&gt;props&lt;/code&gt; and the &lt;code&gt;data&lt;/code&gt; initialization.</source>
          <target state="translated">次の2つの例は、Vue 2.2.1以降で機能します。そのバージョンより下では、挿入された値は &lt;code&gt;props&lt;/code&gt; と &lt;code&gt;data&lt;/code&gt; 初期化後に解決されました。</target>
        </trans-unit>
        <trans-unit id="c4e0ddfdd8217a03837dee9d518c520c1cff551b" translate="yes" xml:space="preserve">
          <source>The next thing you&amp;rsquo;ll have to become familiar with is how to use template features in the &lt;code&gt;createElement&lt;/code&gt; function. Here are the arguments that &lt;code&gt;createElement&lt;/code&gt; accepts:</source>
          <target state="translated">次に慣れる必要があるのは、 &lt;code&gt;createElement&lt;/code&gt; 関数でテンプレート機能を使用する方法です。 &lt;code&gt;createElement&lt;/code&gt; が受け入れる引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="6425b351a4f55c8cad54b89f6371bbb64f26f4e7" translate="yes" xml:space="preserve">
          <source>The node in the host environment.</source>
          <target state="translated">ホスト環境のノード。</target>
        </trans-unit>
        <trans-unit id="f500afab8931eec7a0290164eb6151c650ae181c" translate="yes" xml:space="preserve">
          <source>The object syntax for &lt;code&gt;:style&lt;/code&gt; is pretty straightforward - it looks almost like CSS, except it's a JavaScript object. You can use either camelCase or kebab-case (use quotes with kebab-case) for the CSS property names:</source>
          <target state="translated">&lt;code&gt;:style&lt;/code&gt; のオブジェクト構文は非常に単純です。JavaScriptオブジェクトであることを除けば、CSSとほとんど同じように見えます。CSSプロパティ名には、camelCaseまたはkebab-case（kebab-caseで引用符を使用）のいずれかを使用できます。</target>
        </trans-unit>
        <trans-unit id="a93809e131de1acb92c27480b98ade7c8b177368" translate="yes" xml:space="preserve">
          <source>The object syntax for &lt;code&gt;v-bind:style&lt;/code&gt; is pretty straightforward - it looks almost like CSS, except it&amp;rsquo;s a JavaScript object. You can use either camelCase or kebab-case (use quotes with kebab-case) for the CSS property names:</source>
          <target state="translated">&lt;code&gt;v-bind:style&lt;/code&gt; のオブジェクト構文は非常に単純です。JavaScriptオブジェクトであることを除いて、CSSとほとんど同じように見えます。CSSプロパティ名には、キャメルケースまたはケバブケース（ケバブケースでは引用符を使用）を使用できます。</target>
        </trans-unit>
        <trans-unit id="f804d7c199bb60087ee99a4d2ed2841ff111fad8" translate="yes" xml:space="preserve">
          <source>The official guide assumes intermediate level knowledge of HTML, CSS, and JavaScript. If you are totally new to frontend development, it might not be the best idea to jump right into a framework as your first step - grasp the basics then come back! Prior experience with other frameworks helps, but is not required.</source>
          <target state="translated">公式ガイドでは、HTML、CSS、JavaScriptの中級レベルの知識を前提としています。フロントエンド開発が全く初めての場合、最初のステップとしてフレームワークに飛びつくのは最良のアイデアとは言えないかもしれません-基本を把握してから戻ってきてください! 他のフレームワークを使った経験があると助かりますが、必須ではありません。</target>
        </trans-unit>
        <trans-unit id="cdcd3cc5d3cb2f01160d1290fc4a6159e0dddd79" translate="yes" xml:space="preserve">
          <source>The only exception to this being the use of &lt;code&gt;Object.freeze()&lt;/code&gt;, which prevents existing properties from being changed, which also means the reactivity system can&amp;rsquo;t &lt;em&gt;track&lt;/em&gt; changes.</source>
          <target state="translated">これの唯一の例外は、既存のプロパティが変更されないようにする &lt;code&gt;Object.freeze()&lt;/code&gt; の使用です。これは、反応システムが変更を&lt;em&gt;追跡&lt;/em&gt;できないことも意味します。</target>
        </trans-unit>
        <trans-unit id="ae045002c5628426d914998c80d5822201c309f7" translate="yes" xml:space="preserve">
          <source>The option also accepts an object, which allows the developer to define validators for the arguments that are passed with the emitted event, similar to validators in &lt;code&gt;props&lt;/code&gt; definitions.</source>
          <target state="translated">このオプションはオブジェクトも受け入れます。これにより、開発者は、 &lt;code&gt;props&lt;/code&gt; 定義のバリデーターと同様に、発行されたイベントで渡される引数のバリデーターを定義できます。</target>
        </trans-unit>
        <trans-unit id="8eb7f5feed0a750d304ea8614d2edca774bd3f41" translate="yes" xml:space="preserve">
          <source>The optional &lt;code&gt;scoped&lt;/code&gt; attribute automatically scopes this CSS to your component by adding a unique attribute (such as &lt;code&gt;data-v-21e5b78&lt;/code&gt;) to elements and compiling &lt;code&gt;.list-container:hover&lt;/code&gt; to something like &lt;code&gt;.list-container[data-v-21e5b78]:hover&lt;/code&gt;.</source>
          <target state="translated">オプションの &lt;code&gt;scoped&lt;/code&gt; 属性は、要素に一意の属性（ &lt;code&gt;data-v-21e5b78&lt;/code&gt; など）を追加し、 &lt;code&gt;.list-container:hover&lt;/code&gt; &lt;code&gt;.list-container[data-v-21e5b78]:hover&lt;/code&gt; ようなものにコンパイルすることで、このCSSをコンポーネントに自動的にスコープします。ホバー。</target>
        </trans-unit>
        <trans-unit id="fb3f64ee7f789f42cb14ffd6fe23ed6a802c14a2" translate="yes" xml:space="preserve">
          <source>The options passed to &lt;code&gt;createApp&lt;/code&gt; are used to configure the &lt;strong&gt;root component&lt;/strong&gt;. That component is used as the starting point for rendering when we &lt;strong&gt;mount&lt;/strong&gt; the application.</source>
          <target state="translated">&lt;code&gt;createApp&lt;/code&gt; に渡されたオプションは、&lt;strong&gt;ルートコンポーネント&lt;/strong&gt;を構成するために使用されます。そのコンポーネントは、アプリケーションを&lt;strong&gt;マウント&lt;/strong&gt;するときにレンダリングの開始点として使用されます。</target>
        </trans-unit>
        <trans-unit id="69b0aecb5016308ed5c734f2a458dceae41e382c" translate="yes" xml:space="preserve">
          <source>The original and the wrapped version will behave the same in most cases, but be aware that they will fail operations that rely on strong identity comparisons, such as &lt;code&gt;.filter()&lt;/code&gt; or &lt;code&gt;.map()&lt;/code&gt;. This caveat is unlikely to come up when using the options API, because all reactive state is accessed from &lt;code&gt;this&lt;/code&gt; and guaranteed to already be proxies.</source>
          <target state="translated">元のバージョンとラップされたバージョンはほとんどの場合同じように動作しますが、 &lt;code&gt;.filter()&lt;/code&gt; や &lt;code&gt;.map()&lt;/code&gt; などの強力なID比較に依存する操作は失敗することに注意してください。すべての反応状態からアクセスされるため、この警告は、オプションのAPIを使用する際に出てくることはほとんどありません &lt;code&gt;this&lt;/code&gt; 、すでにプロキシであることが保証します。</target>
        </trans-unit>
        <trans-unit id="8f86e91201591c3c1631acf2b2475e6e451afce5" translate="yes" xml:space="preserve">
          <source>The parent instance, if the current instance has one.</source>
          <target state="translated">現在のインスタンスに親インスタンスがある場合は、その親インスタンス。</target>
        </trans-unit>
        <trans-unit id="dae7b87a95058072fd781e647a0652b7e75f9fe6" translate="yes" xml:space="preserve">
          <source>The previous virtual node, only available in the &lt;code&gt;beforeUpdate&lt;/code&gt; and &lt;code&gt;updated&lt;/code&gt; hooks.</source>
          <target state="translated">以前の仮想ノード &lt;code&gt;beforeUpdate&lt;/code&gt; および &lt;code&gt;updated&lt;/code&gt; フックでのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="a213359cc7f926ecae5256c14d1f382a33b06e44" translate="yes" xml:space="preserve">
          <source>The problem is event flows that depend on a component&amp;rsquo;s tree structure can be hard to reason about and are very brittle when the tree becomes large. They don&amp;rsquo;t scale well and only set you up for pain later. &lt;code&gt;$dispatch&lt;/code&gt; and &lt;code&gt;$broadcast&lt;/code&gt; also do not solve communication between sibling components.</source>
          <target state="translated">問題は、コンポーネントのツリー構造に依存するイベントフローは、ツリーが大きくなると、推論するのが難しく、非常に脆弱になることです。それらはうまく拡張できず、後で痛みを感じるだけです。 &lt;code&gt;$dispatch&lt;/code&gt; および &lt;code&gt;$broadcast&lt;/code&gt; も、兄弟コンポーネント間の通信を解決しません。</target>
        </trans-unit>
        <trans-unit id="c8ce914b16d3eb833d4a96dea962dc602115583b" translate="yes" xml:space="preserve">
          <source>The problem is that large numbers of &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=a%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;element-attribute selectors (opens new window)&lt;/a&gt; (e.g. &lt;code&gt;button[data-v-f3f3eg9]&lt;/code&gt;) will be considerably slower than &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=.class%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;class-attribute selectors (opens new window)&lt;/a&gt; (e.g. &lt;code&gt;.btn-close[data-v-f3f3eg9]&lt;/code&gt;), so class selectors should be preferred whenever possible.</source>
          <target state="translated">問題は、多数の&lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=a%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;要素属性セレクター（新しいウィンドウを開く）&lt;/a&gt;（例： &lt;code&gt;button[data-v-f3f3eg9]&lt;/code&gt; ）が&lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=.class%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;クラス属性セレクター（新しいウィンドウを開く）&lt;/a&gt;（例： &lt;code&gt;.btn-close[data-v-f3f3eg9]&lt;/code&gt; ）よりもかなり遅くなることです。v-f3f3eg9]）、したがって、可能な限りクラスセレクターを優先する必要があります。</target>
        </trans-unit>
        <trans-unit id="98399a72800d5002678971cac53da1533e26a6d2" translate="yes" xml:space="preserve">
          <source>The problem is that large numbers of &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=a%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;element-attribute selectors&lt;/a&gt; (e.g. &lt;code&gt;button[data-v-f3f3eg9]&lt;/code&gt;) will be considerably slower than &lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=.class%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;class-attribute selectors&lt;/a&gt; (e.g. &lt;code&gt;.btn-close[data-v-f3f3eg9]&lt;/code&gt;), so class selectors should be preferred whenever possible.</source>
          <target state="translated">問題は、多数の&lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=a%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;要素属性セレクター&lt;/a&gt;（例： &lt;code&gt;button[data-v-f3f3eg9]&lt;/code&gt; ）が&lt;a href=&quot;http://stevesouders.com/efws/css-selectors/csscreate.php?n=1000&amp;amp;sel=.class%5Bhref%5D&amp;amp;body=background%3A+%23CFD&amp;amp;ne=1000&quot;&gt;クラス属性セレクター&lt;/a&gt;（例： &lt;code&gt;.btn-close[data-v-f3f3eg9]&lt;/code&gt; ）よりもかなり遅くなるため、クラスセレクターが可能な限り優先する。</target>
        </trans-unit>
        <trans-unit id="3bc4b51815e1ca75817d438f9a75b79de4143526" translate="yes" xml:space="preserve">
          <source>The problem is, there are also many &lt;em&gt;simple&lt;/em&gt; cases where these patterns may offer convenience. Beware: do not be seduced into trading simplicity (being able to understand the flow of your state) for short-term convenience (writing less code).</source>
          <target state="translated">問題は、これらのパターンが便利&lt;em&gt;な&lt;/em&gt;多くの&lt;em&gt;単純な&lt;/em&gt;ケースがあることです。注意：短期的な便宜（コードの記述を減らす）のために、取引の単純さ（状態のフローを理解できる）に誘惑されないでください。</target>
        </trans-unit>
        <trans-unit id="690eaa8b769a27585770a32b044820cae46112dd" translate="yes" xml:space="preserve">
          <source>The problem is, there are cases where it&amp;rsquo;s important not to delete elements that will remain in the DOM. For example, you may want to use &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; to animate list sorting, or maintain focus if the rendered element is an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. In these cases, adding a unique key for each item (e.g. &lt;code&gt;:key=&quot;todo.id&quot;&lt;/code&gt;) will tell Vue how to behave more predictably.</source>
          <target state="translated">問題は、DOMに残る要素を削除しないことが重要な場合があることです。たとえば、 &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; を使用してリストの並べ替えをアニメーション化したり、レンダリングされた要素が &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; の場合はフォーカスを維持したりできます。このような場合、各アイテムに一意のキー（例 &lt;code&gt;:key=&quot;todo.id&quot;&lt;/code&gt; ）を追加すると、Vueに予測可能な動作を指示します。</target>
        </trans-unit>
        <trans-unit id="db624a1c9ff9b7e70ad4f4eab6eb1b72253a56ab" translate="yes" xml:space="preserve">
          <source>The problem is, there are cases where it's important not to delete elements that will remain in the DOM. For example, you may want to use &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; to animate list sorting, or maintain focus if the rendered element is an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. In these cases, adding a unique key for each item (e.g. &lt;code&gt;:key=&quot;todo.id&quot;&lt;/code&gt;) will tell Vue how to behave more predictably.</source>
          <target state="translated">問題は、DOMに残る要素を削除しないことが重要な場合があることです。たとえば、 &lt;code&gt;&amp;lt;transition-group&amp;gt;&lt;/code&gt; を使用してリストの並べ替えをアニメーション化したり、レンダリングされた要素が &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; の場合はフォーカスを維持したりできます。このような場合、アイテムごとに一意のキー（例 &lt;code&gt;:key=&quot;todo.id&quot;&lt;/code&gt; ）を追加すると、Vueがより予測どおりに動作する方法がわかります。</target>
        </trans-unit>
        <trans-unit id="35549fb2854bdbc4b65652d62df1f1ddfa7a99ea" translate="yes" xml:space="preserve">
          <source>The problem is, this button doesn&amp;rsquo;t do anything:</source>
          <target state="translated">問題は、このボタンは何もしないことです。</target>
        </trans-unit>
        <trans-unit id="8ce7abf75941a4e635ad58dd72808e1a171b6754" translate="yes" xml:space="preserve">
          <source>The problem is, this button doesn't do anything:</source>
          <target state="translated">問題は、このボタンが何もしないことです。</target>
        </trans-unit>
        <trans-unit id="850c18dc4babcffd6886619e5ea2e9c6e0772c92" translate="yes" xml:space="preserve">
          <source>The property's name (&lt;code&gt;&amp;lt;String&amp;gt;&lt;/code&gt; type)</source>
          <target state="translated">プロパティの名前（ &lt;code&gt;&amp;lt;String&amp;gt;&lt;/code&gt; タイプ）</target>
        </trans-unit>
        <trans-unit id="177272c16a443d5fa6984ac9795159e69769b60e" translate="yes" xml:space="preserve">
          <source>The property's value</source>
          <target state="translated">物件の価値</target>
        </trans-unit>
        <trans-unit id="361cd98689630fb5a124f5e83b5f388af1b8a1f3" translate="yes" xml:space="preserve">
          <source>The provided element merely serves as a mounting point. Unlike in Vue 1.x, the mounted element will be replaced with Vue-generated DOM in all cases. It is therefore not recommended to mount the root instance to &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">提供された要素は、単にマウントポイントとして機能します。Vue 1.xとは異なり、マウントされた要素はすべての場合にVueで生成されたDOMに置き換えられます。したがって、ルートインスタンスを &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; または &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; にマウントすることはお勧めしません。</target>
        </trans-unit>
        <trans-unit id="6f253579781bfc25b1fe1113a88b452b8274fbf7" translate="yes" xml:space="preserve">
          <source>The proxied object is invisible to the user, but under the hood they enable Vue to perform dependency-tracking and change-notification when properties are accessed or modified. As of Vue 3, our reactivity is now available in a &lt;a href=&quot;https://github.com/vuejs/vue-next/tree/master/packages/reactivity&quot;&gt;separate package (opens new window)&lt;/a&gt;. One caveat is that browser consoles format differently when converted data objects are logged, so you may want to install &lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot;&gt;vue-devtools (opens new window)&lt;/a&gt; for a more inspection-friendly interface.</source>
          <target state="translated">プロキシされたオブジェクトはユーザーには見えませんが、内部的には、プロパティがアクセスまたは変更されたときにVueが依存関係の追跡と変更通知を実行できるようにします。Vue 3の時点で、反応性は&lt;a href=&quot;https://github.com/vuejs/vue-next/tree/master/packages/reactivity&quot;&gt;別のパッケージで&lt;/a&gt;利用できるようになりました（新しいウィンドウが開きます）。注意点の1つは、変換されたデータオブジェクトがログに記録されると、ブラウザコンソールの形式が異なるため、より検査しやすいインターフェイスとして&lt;a href=&quot;https://github.com/vuejs/vue-devtools&quot;&gt;vue-devtools（新しいウィンドウを開く）&lt;/a&gt;をインストールすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c0ecee76489f72e420143f4e57a248f07f475e8c" translate="yes" xml:space="preserve">
          <source>The reactive conversion is &quot;deep&quot;&amp;mdash;it affects all nested properties. In the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot;&gt;ES2015 Proxy (opens new window)&lt;/a&gt; based implementation, the returned proxy is &lt;strong&gt;not&lt;/strong&gt; equal to the original object. It is recommended to work exclusively with the reactive proxy and avoid relying on the original object.</source>
          <target state="translated">リアクティブ変換は「ディープ」であり、ネストされたすべてのプロパティに影響します。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy&quot;&gt;ES2015プロキシ（新しいウィンドウを開く）&lt;/a&gt;ベースの実装は、返されるプロキシは&lt;strong&gt;ない&lt;/strong&gt;元のオブジェクトに等しいです。リアクティブプロキシのみを使用して作業し、元のオブジェクトに依存しないようにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="34592f5fd4a2054ce0011f9d4e26a9c654b6f7b5" translate="yes" xml:space="preserve">
          <source>The reason for not automatically injecting &lt;code&gt;item&lt;/code&gt; into the component is because that makes the component tightly coupled to how &lt;code&gt;v-for&lt;/code&gt; works. Being explicit about where its data comes from makes the component reusable in other situations.</source>
          <target state="translated">&lt;code&gt;item&lt;/code&gt; をコンポーネントに自動的に挿入しない理由は、コンポーネントが &lt;code&gt;v-for&lt;/code&gt; の動作に密接に結び付けられるためです。データの出所を明確にすることで、コンポーネントを他の状況で再利用できるようにします。</target>
        </trans-unit>
        <trans-unit id="c532c908704eacdd705ddb6c7847a0bd40253f67" translate="yes" xml:space="preserve">
          <source>The reason is this is the equivalent JavaScript that the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; would compile to:</source>
          <target state="translated">これは、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; が次のようにコンパイルする同等のJavaScriptであるためです。</target>
        </trans-unit>
        <trans-unit id="78702fdec5c6b73fa78a98283262c3e3a610ea89" translate="yes" xml:space="preserve">
          <source>The reference will be HTMLElement when used with functional components because they&amp;rsquo;re stateless and instanceless.</source>
          <target state="translated">参照は、ステートレスでインスタンスレスであるため、機能コンポーネントで使用するとHTMLElementになります。</target>
        </trans-unit>
        <trans-unit id="c0c42bbffd6116ac9f9aa2c29f718360da13a0c7" translate="yes" xml:space="preserve">
          <source>The rendered HTML will be:</source>
          <target state="translated">レンダリングされたHTMLになります。</target>
        </trans-unit>
        <trans-unit id="a426ede2112c009fbf616db449e0c6e3bc884e8e" translate="yes" xml:space="preserve">
          <source>The result is that many components may include long lists of base components:</source>
          <target state="translated">その結果、多くのコンポーネントは、ベースとなるコンポーネントの長いリストを含む場合がある。</target>
        </trans-unit>
        <trans-unit id="08f27fe84425493ea316d81bfb5cc71fa39abce0" translate="yes" xml:space="preserve">
          <source>The resulting API could be used like this, mirroring the example from earlier:</source>
          <target state="translated">結果として得られるAPIは、先ほどの例をミラーリングして、このように使用することができます。</target>
        </trans-unit>
        <trans-unit id="0894c1243efd2b6757cc56c901b4af230a9aac04" translate="yes" xml:space="preserve">
          <source>The returned object can be used directly inside &lt;a href=&quot;../guide/render-function&quot;&gt;render functions&lt;/a&gt; and &lt;a href=&quot;../guide/computed&quot;&gt;computed properties&lt;/a&gt;, and will trigger appropriate updates when mutated. It can also be used as a minimal, cross-component state store for simple scenarios:</source>
          <target state="translated">返されたオブジェクトは、&lt;a href=&quot;../guide/render-function&quot;&gt;レンダリング関数&lt;/a&gt;と&lt;a href=&quot;../guide/computed&quot;&gt;計算されたプロパティ&lt;/a&gt;内で直接使用でき、変更されたときに適切な更新をトリガーします。また、シンプルなシナリオの最小のクロスコンポーネント状態ストアとしても使用できます。</target>
        </trans-unit>
        <trans-unit id="f5f2182d5b9e1141097f081f69203ed474e7f51a" translate="yes" xml:space="preserve">
          <source>The root DOM element that the Vue instance is managing.</source>
          <target state="translated">Vue インスタンスが管理しているルート DOM 要素。</target>
        </trans-unit>
        <trans-unit id="9972076054dc4dddfd1bd61b952d90cd738d9b36" translate="yes" xml:space="preserve">
          <source>The root DOM element that the component instance is managing.</source>
          <target state="translated">コンポーネントインスタンスが管理しているルート DOM 要素。</target>
        </trans-unit>
        <trans-unit id="1fb1fe84422a22a87a20ac9a9db7f5aca1ce36fc" translate="yes" xml:space="preserve">
          <source>The root Vue instance of the current component tree. If the current instance has no parents this value will be itself.</source>
          <target state="translated">現在のコンポーネント ツリーのルート Vue インスタンス。現在のインスタンスに親がない場合、この値はそれ自身になります。</target>
        </trans-unit>
        <trans-unit id="760ef4817c957d79f640143c58e8bd458b226fd2" translate="yes" xml:space="preserve">
          <source>The root component instance</source>
          <target state="translated">ルートコンポーネントのインスタンス</target>
        </trans-unit>
        <trans-unit id="8e1dc161060e2475f3fef40b15a419d3fb6e6453" translate="yes" xml:space="preserve">
          <source>The root component instance of the current component tree. If the current instance has no parents this value will be itself.</source>
          <target state="translated">現在のコンポーネントツリーのルートコンポーネントのインスタンス。現在のインスタンスが親を持たない場合、この値はそれ自身になります。</target>
        </trans-unit>
        <trans-unit id="7b232ff8c5c18691a5df8efcbaf774a1cbaab836" translate="yes" xml:space="preserve">
          <source>The same is true for class bindings:</source>
          <target state="translated">クラスバインディングについても同様です。</target>
        </trans-unit>
        <trans-unit id="27b44782a2426ad3efd960795173b0b3bc81c6b4" translate="yes" xml:space="preserve">
          <source>The second argument passed to the &lt;code&gt;setup&lt;/code&gt; function is the &lt;code&gt;context&lt;/code&gt;. The &lt;code&gt;context&lt;/code&gt; is a normal JavaScript object that exposes three component properties:</source>
          <target state="translated">&lt;code&gt;setup&lt;/code&gt; 関数に渡される2番目の引数は &lt;code&gt;context&lt;/code&gt; です。 &lt;code&gt;context&lt;/code&gt; 三の成分プロパティを公開し、通常のJavaScriptオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="3076a28f2234e073b3c5d5fd25022826c2744c96" translate="yes" xml:space="preserve">
          <source>The second argument provides a context object which exposes a selective list of properties that were previously exposed on &lt;code&gt;this&lt;/code&gt;:</source>
          <target state="translated">2番目の引数は、 &lt;code&gt;this&lt;/code&gt; 以前に公開されたプロパティの選択リストを公開するコンテキストオブジェクトを提供します。</target>
        </trans-unit>
        <trans-unit id="ca08b1dc1ff6d4a5c712818ba1c4ace33a4babcc" translate="yes" xml:space="preserve">
          <source>The second parameter is optional, and depends on each particular plugin. In the case of the demo &lt;code&gt;i18nPlugin&lt;/code&gt;, it is an object with the translated strings.</source>
          <target state="translated">2番目のパラメーターはオプションであり、特定のプラグインごとに異なります。デモ &lt;code&gt;i18nPlugin&lt;/code&gt; の場合、それは翻訳された文字列を持つオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="dd2c503caba50c997d7446df74ac0da742e9b8eb" translate="yes" xml:space="preserve">
          <source>The size of your app (small to medium-sized apps will probably be less than a day)</source>
          <target state="translated">アプリのサイズ(小~中規模のアプリはおそらく1日に満たないでしょう</target>
        </trans-unit>
        <trans-unit id="d4e4dd52e59dc61ca3774e3d82684a08d4d2de67" translate="yes" xml:space="preserve">
          <source>The slot does &lt;strong&gt;not&lt;/strong&gt; have access to &lt;code&gt;&amp;lt;todo-button&amp;gt;&lt;/code&gt;'s scope. For example, trying to access &lt;code&gt;action&lt;/code&gt; would not work:</source>
          <target state="translated">スロットは &lt;code&gt;&amp;lt;todo-button&amp;gt;&lt;/code&gt; のスコープにアクセスできませ&lt;strong&gt;ん&lt;/strong&gt;。たとえば、 &lt;code&gt;action&lt;/code&gt; にアクセスしようとしても機能しません。</target>
        </trans-unit>
        <trans-unit id="46f5b2f5a1e6dfc8f2c7678697e3ab5bcf629f27" translate="yes" xml:space="preserve">
          <source>The slots are passed as functions, allowing the child component to control the creation of each slot's contents. Any reactive data should be accessed within the slot function to ensure that it's registered as a dependency of the child component and not the parent. Conversely, calls to &lt;code&gt;resolveComponent&lt;/code&gt; should be made outside the slot function, otherwise they'll resolve relative to the wrong component:</source>
          <target state="translated">スロットは関数として渡され、子コンポーネントが各スロットのコンテンツの作成を制御できるようにします。スロット関数内でリアクティブデータにアクセスして、親ではなく子コンポーネントの依存関係として登録されていることを確認する必要があります。逆に、 &lt;code&gt;resolveComponent&lt;/code&gt; の呼び出しは、スロット関数の外部で行う必要があります。そうしないと、間違ったコンポーネントに関連して解決されます。</target>
        </trans-unit>
        <trans-unit id="71c2733bfb43f78b87500262cd44c42870815508" translate="yes" xml:space="preserve">
          <source>The special case to note here is the &lt;code&gt;data&lt;/code&gt; option - it must be a function when used with &lt;code&gt;Vue.extend()&lt;/code&gt;.</source>
          <target state="translated">ここで注意すべき特別なケースは &lt;code&gt;data&lt;/code&gt; オプションです &lt;code&gt;Vue.extend()&lt;/code&gt; と一緒に使用する場合は関数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="572f57cb3c88ad0c0b5d74b281c1e800b18bf5b8" translate="yes" xml:space="preserve">
          <source>The store instance no longer exposes the event emitter interface (&lt;code&gt;on&lt;/code&gt;, &lt;code&gt;off&lt;/code&gt;, &lt;code&gt;emit&lt;/code&gt;). If you were previously using the store as a global event bus, &lt;a href=&quot;migration#dispatch-and-broadcast-removed&quot;&gt;see this section&lt;/a&gt; for migration instructions.</source>
          <target state="translated">ストアインスタンスは、イベントエミッターインターフェース（ &lt;code&gt;on&lt;/code&gt; 、 &lt;code&gt;off&lt;/code&gt; 、 &lt;code&gt;emit&lt;/code&gt; ）を公開しなくなりました。以前にストアをグローバルイベントバスとして使用していた場合は、&lt;a href=&quot;migration#dispatch-and-broadcast-removed&quot;&gt;このセクション&lt;/a&gt;で移行手順を確認してください。</target>
        </trans-unit>
        <trans-unit id="77d67a6f8225d0df00a5fc5a901f8f424ef25e4a" translate="yes" xml:space="preserve">
          <source>The syntax has changed slightly, so &lt;code&gt;/category/*tags&lt;/code&gt; for example, should be updated to &lt;code&gt;/category/:tags+&lt;/code&gt;.</source>
          <target state="translated">構文が少し変更されたため、たとえば &lt;code&gt;/category/*tags&lt;/code&gt; を &lt;code&gt;/category/:tags+&lt;/code&gt; 更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="908884184f3cb4e8612386879bc128af52d0df9c" translate="yes" xml:space="preserve">
          <source>The target object cannot be a Vue instance, or the root data object of a Vue instance.</source>
          <target state="translated">ターゲット オブジェクトは、Vue インスタンスまたは Vue インスタンスのルート データ オブジェクトにはできません。</target>
        </trans-unit>
        <trans-unit id="3b52d24461e93aad361aa8a10329f3c23cc49031" translate="yes" xml:space="preserve">
          <source>The tooling support (e.g. linting, type checking, editor autocompletion) for JSX is in some ways more advanced than what&amp;rsquo;s currently available for Vue templates.</source>
          <target state="translated">JSXのツールサポート（linting、型チェック、エディターのオートコンプリートなど）は、Vueテンプレートで現在利用可能なものよりも、いくつかの点で高度です。</target>
        </trans-unit>
        <trans-unit id="da2a622928cb7fb2119351d71d4d29385b2f0b02" translate="yes" xml:space="preserve">
          <source>The tree of DOM nodes for the HTML above looks like this:</source>
          <target state="translated">上の HTML の DOM ノードのツリーは次のようになります。</target>
        </trans-unit>
        <trans-unit id="1e0938b17616f7c664547dd22e0644ffdf02a08b" translate="yes" xml:space="preserve">
          <source>The use of &lt;code&gt;keyCode&lt;/code&gt; events &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode&quot;&gt;is deprecated&lt;/a&gt; and may not be supported in new browsers.</source>
          <target state="translated">&lt;code&gt;keyCode&lt;/code&gt; イベントの使用&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode&quot;&gt;は推奨され&lt;/a&gt;ておらず、新しいブラウザーではサポートされない可能性があります。</target>
        </trans-unit>
        <trans-unit id="9c4b465678423d8a352546c8b85648d07f98dcd7" translate="yes" xml:space="preserve">
          <source>The use of Proxy does introduce a new caveat to be aware with: the proxied object is not equal to the original object in terms of identity comparison (&lt;code&gt;===&lt;/code&gt;). For example:</source>
          <target state="translated">プロキシを使用すると、注意すべき新しい警告が発生します。プロキシされたオブジェクトは、IDの比較に関して元のオブジェクトと等しくありません（ &lt;code&gt;===&lt;/code&gt; ）。例えば：</target>
        </trans-unit>
        <trans-unit id="b75354818587ed3801dcd8ec1fa3ae5ccf5adc7b" translate="yes" xml:space="preserve">
          <source>The value &lt;code&gt;'post'&lt;/code&gt; can be used to defer the callback until after rendering. This should be used if the callback needs access to the updated DOM or child components via &lt;code&gt;$refs&lt;/code&gt;.</source>
          <target state="translated">値 &lt;code&gt;'post'&lt;/code&gt; を使用して、レンダリングが完了するまでコールバックを延期できます。これは、コールバックが &lt;code&gt;$refs&lt;/code&gt; を介して更新されたDOMまたは子コンポーネントにアクセスする必要がある場合に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="c973f4080ca50bd81b6cff2d0a6ded9905288da4" translate="yes" xml:space="preserve">
          <source>The value of &lt;code&gt;slot-scope&lt;/code&gt; can accept any valid JavaScript expression that can appear in the argument position of a function definition. This means in supported environments (&lt;a href=&quot;single-file-components&quot;&gt;single-file components&lt;/a&gt; or &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Browser_compatibility&quot;&gt;modern browsers&lt;/a&gt;) you can also use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring&quot;&gt;ES2015 destructuring&lt;/a&gt; in the expression, like so:</source>
          <target state="translated">&lt;code&gt;slot-scope&lt;/code&gt; の値は、関数定義の引数の位置に表示できる有効なJavaScript式を受け入れることができます。つまり、サポートされている環境（&lt;a href=&quot;single-file-components&quot;&gt;単一ファイルコンポーネント&lt;/a&gt;または&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Browser_compatibility&quot;&gt;最新のブラウザー&lt;/a&gt;）では、次のように式で&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Object_destructuring&quot;&gt;ES2015の構造&lt;/a&gt;化解除を使用することもできます。</target>
        </trans-unit>
        <trans-unit id="44c95331b851049a94d5aa5d023b6e2ddaca60d8" translate="yes" xml:space="preserve">
          <source>The workaround is to either use expressions without spaces or quotes, or replace the complex expression with a computed property.</source>
          <target state="translated">回避策は、スペースや引用符を使わずに式を使用するか、複素数式を計算されたプロパティに置き換えることです。</target>
        </trans-unit>
        <trans-unit id="d02680275f323eda2de9d2d7078001372e594964" translate="yes" xml:space="preserve">
          <source>Their names often include the name of an element they wrap (e.g. &lt;code&gt;BaseButton&lt;/code&gt;, &lt;code&gt;BaseTable&lt;/code&gt;), unless no element exists for their specific purpose (e.g. &lt;code&gt;BaseIcon&lt;/code&gt;). If you build similar components for a more specific context, they will almost always consume these components (e.g. &lt;code&gt;BaseButton&lt;/code&gt; may be used in &lt;code&gt;ButtonSubmit&lt;/code&gt;).</source>
          <target state="translated">それらの名前には、特定の目的（ &lt;code&gt;BaseIcon&lt;/code&gt; など）の要素が存在しない場合を除いて、ラップする要素の名前（ &lt;code&gt;BaseButton&lt;/code&gt; 、 &lt;code&gt;BaseTable&lt;/code&gt; など）が含まれることがよくあります。より具体的なコンテキストで同様のコンポーネントを構築する場合、それらはほとんど常にこれらのコンポーネントを消費します（たとえば、 &lt;code&gt;BaseButton&lt;/code&gt; が &lt;code&gt;ButtonSubmit&lt;/code&gt; で使用される場合があります）。</target>
        </trans-unit>
        <trans-unit id="cac8885ec5589429c1668b6076e0b655b65a0072" translate="yes" xml:space="preserve">
          <source>Then a &lt;code&gt;tree-folder-contents&lt;/code&gt; component with this template:</source>
          <target state="translated">次に、このテンプレートを使用した &lt;code&gt;tree-folder-contents&lt;/code&gt; コンポーネント：</target>
        </trans-unit>
        <trans-unit id="12ff53d6c9683fe8bc4c3c3ebe06eaf2daa8b2b3" translate="yes" xml:space="preserve">
          <source>Then add some classes when using it:</source>
          <target state="translated">そして、それを使用するときにいくつかのクラスを追加します。</target>
        </trans-unit>
        <trans-unit id="bdb3d0b6c8743a01fad092b8628997433e226d02" translate="yes" xml:space="preserve">
          <source>Then changes to &lt;code&gt;b&lt;/code&gt; will not trigger any view updates. If you know you&amp;rsquo;ll need a property later, but it starts out empty or non-existent, you&amp;rsquo;ll need to set some initial value. For example:</source>
          <target state="translated">次に、 &lt;code&gt;b&lt;/code&gt; を変更しても、ビューの更新はトリガーされません。後でプロパティが必要になることがわかっていても、最初は空または存在しない場合は、初期値を設定する必要があります。例えば：</target>
        </trans-unit>
        <trans-unit id="d716ba19ef13983399aba7a4f9b4f99bdb1a5cc3" translate="yes" xml:space="preserve">
          <source>Then define the components you&amp;rsquo;d like to use in a &lt;code&gt;components&lt;/code&gt; option:</source>
          <target state="translated">次に、 &lt;code&gt;components&lt;/code&gt; オプションで使用するコンポーネントを定義します。</target>
        </trans-unit>
        <trans-unit id="f007f5e8e39cc6bea44deac887f75b66321c705c" translate="yes" xml:space="preserve">
          <source>Then define the components you'd like to use in a &lt;code&gt;components&lt;/code&gt; option:</source>
          <target state="translated">次に、 &lt;code&gt;components&lt;/code&gt; オプションで使用するコンポーネントを定義します。</target>
        </trans-unit>
        <trans-unit id="89b993f413d7a3516733e84da6538330a9b561e6" translate="yes" xml:space="preserve">
          <source>Then import the component options along with Vue, and you can make many common assertions (here we are using Jasmine/Jest style &lt;code&gt;expect&lt;/code&gt; assertions just as an example):</source>
          <target state="translated">そして、Vueのと一緒にコンポーネントのオプションをインポートし、そしてあなたは（ここでは、我々はジャスミン/冗談スタイルを使用している多くの一般的なアサーションを行うことができます &lt;code&gt;expect&lt;/code&gt; 単なる一例として、アサーション）：</target>
        </trans-unit>
        <trans-unit id="742a07eca2247a701f3fe69d736358f9945a7047" translate="yes" xml:space="preserve">
          <source>Then in a template, you can use the new &lt;code&gt;v-focus&lt;/code&gt; attribute on any element, like this:</source>
          <target state="translated">次に、テンプレートで、次のように任意の要素で新しい &lt;code&gt;v-focus&lt;/code&gt; 属性を使用できます。</target>
        </trans-unit>
        <trans-unit id="d651621f023beec6364c642e7684b35f30f1b1df" translate="yes" xml:space="preserve">
          <source>Then in any descendants, we can use the &lt;code&gt;inject&lt;/code&gt; option to receive specific properties we&amp;rsquo;d like to add to that instance:</source>
          <target state="translated">その後、すべての子孫で、 &lt;code&gt;inject&lt;/code&gt; オプションを使用して、そのインスタンスに追加する特定のプロパティを受け取ることができます。</target>
        </trans-unit>
        <trans-unit id="07a1a769eabe4ce95fd548704bfe1a9036dff3fe" translate="yes" xml:space="preserve">
          <source>Then in our components, we can use &lt;code&gt;$emit&lt;/code&gt;, &lt;code&gt;$on&lt;/code&gt;, &lt;code&gt;$off&lt;/code&gt; to emit events, listen for events, and clean up event listeners, respectively:</source>
          <target state="translated">次に、コンポーネントで &lt;code&gt;$emit&lt;/code&gt; 、 &lt;code&gt;$on&lt;/code&gt; 、 &lt;code&gt;$off&lt;/code&gt; を使用して、それぞれイベントを発行し、イベントをリッスンし、イベントリスナーをクリーンアップします。</target>
        </trans-unit>
        <trans-unit id="21a483bbcca1197cc5639fdfa56fc5a657078e60" translate="yes" xml:space="preserve">
          <source>Then in the Vue projects, run</source>
          <target state="translated">次に、Vue プロジェクトで次のように実行します。</target>
        </trans-unit>
        <trans-unit id="e5a24c495cff3ba785929f2d1f1232971575aecc" translate="yes" xml:space="preserve">
          <source>Then in the template for &lt;code&gt;&amp;lt;navigation-link&amp;gt;&lt;/code&gt;, you might have:</source>
          <target state="translated">次に、 &lt;code&gt;&amp;lt;navigation-link&amp;gt;&lt;/code&gt; のテンプレートでは、次のようになります。</target>
        </trans-unit>
        <trans-unit id="28d893d2fe7cf8b2aa4343023bf7d3d899faf556" translate="yes" xml:space="preserve">
          <source>Then in the template for &lt;code&gt;&amp;lt;todo-button&amp;gt;&lt;/code&gt;, you might have:</source>
          <target state="translated">次に、 &lt;code&gt;&amp;lt;todo-button&amp;gt;&lt;/code&gt; のテンプレートに、次のように表示されます。</target>
        </trans-unit>
        <trans-unit id="06c17e2b180b30e57b025d1baba4010bf150e5ff" translate="yes" xml:space="preserve">
          <source>Then inside &lt;code&gt;&amp;lt;google-map-markers&amp;gt;&lt;/code&gt; you might find yourself reaching for a hack like this:</source>
          <target state="translated">次に、 &lt;code&gt;&amp;lt;google-map-markers&amp;gt;&lt;/code&gt; 内で、次のようなハッキングに手を伸ばす可能性があります。</target>
        </trans-unit>
        <trans-unit id="6cb73bd95447c7f774f020d38dc4e977b5d7f966" translate="yes" xml:space="preserve">
          <source>Then switching the &lt;code&gt;loginType&lt;/code&gt; in the code above will not erase what the user has already entered. Since both templates use the same elements, the &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; is not replaced - just its &lt;code&gt;placeholder&lt;/code&gt;.</source>
          <target state="translated">次に、上記のコードで &lt;code&gt;loginType&lt;/code&gt; を切り替えても、ユーザーがすでに入力した内容は消去されません。両方のテンプレートで同じ要素を使用しているため、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; は置き換えられません。 &lt;code&gt;placeholder&lt;/code&gt; のみが置き換えられます。</target>
        </trans-unit>
        <trans-unit id="6afded1525a7e22ff2f90a6400204ea03039f331" translate="yes" xml:space="preserve">
          <source>Then the child component can emit an event on itself by calling the built-in &lt;a href=&quot;../api/index#vm-emit&quot;&gt;&lt;strong&gt;&lt;code&gt;$emit&lt;/code&gt;&lt;/strong&gt; method&lt;/a&gt;, passing the name of the event:</source>
          <target state="translated">次に、組み込み&lt;a href=&quot;../api/index#vm-emit&quot;&gt;&lt;strong&gt; &lt;code&gt;$emit&lt;/code&gt; &lt;/strong&gt;メソッドを&lt;/a&gt;呼び出してイベントの名前を渡すことにより、子コンポーネントはそれ自体でイベントを発行できます。</target>
        </trans-unit>
        <trans-unit id="6f7cebb09ffb1468ffa3d18cca25389851f424a1" translate="yes" xml:space="preserve">
          <source>Then the child component can emit an event on itself by calling the built-in &lt;a href=&quot;../api/instance-methods#emit&quot;&gt;&lt;strong&gt;&lt;code&gt;$emit&lt;/code&gt;&lt;/strong&gt; method&lt;/a&gt;, passing the name of the event:</source>
          <target state="translated">次に、子コンポーネントは、組み込みの&lt;a href=&quot;../api/instance-methods#emit&quot;&gt;&lt;strong&gt; &lt;code&gt;$emit&lt;/code&gt; &lt;/strong&gt;メソッドを&lt;/a&gt;呼び出して、イベントの名前を渡すことにより、それ自体でイベントを発行できます。</target>
        </trans-unit>
        <trans-unit id="fa6a05a02bb2743e63986fe5978b02e07581ae91" translate="yes" xml:space="preserve">
          <source>Then the parent can listen to that event and update a local data property, if it wants to. For example:</source>
          <target state="translated">そして、親はそのイベントをリッスンして、必要に応じてローカルデータプロパティを更新することができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="9efd5288754c42150231112638e5e4f3ca6e8940" translate="yes" xml:space="preserve">
          <source>Then the parent could listen to that event and update a local data property, if it wants to. For example:</source>
          <target state="translated">そうすると、親はそのイベントをリッスンしてローカルデータのプロパティを更新することができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="6a4b4fbfbeb2382afaa428f3aa7171b1ee657214" translate="yes" xml:space="preserve">
          <source>Then the provided content will be rendered instead:</source>
          <target state="translated">そうすると、提供されたコンテンツが代わりにレンダリングされます。</target>
        </trans-unit>
        <trans-unit id="894b33adf4423b8e17178e298c582eff7b692b2f" translate="yes" xml:space="preserve">
          <source>Then the value will be passed as the first parameter of that method:</source>
          <target state="translated">そして、その値はそのメソッドの最初のパラメータとして渡されます。</target>
        </trans-unit>
        <trans-unit id="e40f0a46552f37df14dd5aec3ff5064babdeaea5" translate="yes" xml:space="preserve">
          <source>Then want to render a component for each one:</source>
          <target state="translated">そして、それぞれのコンポーネントをレンダリングしたいと思います。</target>
        </trans-unit>
        <trans-unit id="e77b5195b094315391d1471e49e775352de3ff46" translate="yes" xml:space="preserve">
          <source>Then when later accessing this property on a route, you will still go through meta. For example:</source>
          <target state="translated">その後、後でルート上でこのプロパティにアクセスする場合でも、メタを経由することになります。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="db6fb96dd889a51b383d80ca6045c8aa43c69291" translate="yes" xml:space="preserve">
          <source>Then when we listen to the event in the parent, we can access the emitted event&amp;rsquo;s value with &lt;code&gt;$event&lt;/code&gt;:</source>
          <target state="translated">次に、親でイベントをリッスンすると、 &lt;code&gt;$event&lt;/code&gt; 使用して、発行されたイベントの値にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="1b964bdbe48ac1c49dabc676491d5f4552927e7d" translate="yes" xml:space="preserve">
          <source>Then when we listen to the event in the parent, we can access the emitted event's value with &lt;code&gt;$event&lt;/code&gt;:</source>
          <target state="translated">次に、親でイベントをリッスンすると、 &lt;code&gt;$event&lt;/code&gt; 使用して発行されたイベントの値にアクセスできます。</target>
        </trans-unit>
        <trans-unit id="944f38d9e324604cc12e36973eba61971ac566d4" translate="yes" xml:space="preserve">
          <source>Then you can fix all templates using this &lt;code&gt;$filters&lt;/code&gt; object like this:</source>
          <target state="translated">次に、次のようにこの &lt;code&gt;$filters&lt;/code&gt; オブジェクトを使用してすべてのテンプレートを修正できます。</target>
        </trans-unit>
        <trans-unit id="eb930daa712d8e2eb8fe97e59c6f27531e9b1c3e" translate="yes" xml:space="preserve">
          <source>Then you can start writing Vue code and even ship the minified version to production without feeling guilty or having to worry about performance problems.</source>
          <target state="translated">そうすれば、Vue のコードを書き始めて、罪悪感を感じたり、パフォーマンスの問題を気にしたりすることなく、ミニ化されたバージョンを本番環境に出荷することができます。</target>
        </trans-unit>
        <trans-unit id="ebf3c9e7f553f2151cca31494ec2e2f25d6a17ab" translate="yes" xml:space="preserve">
          <source>Then you sort them alphabetically. When updating the DOM, Vue will optimize rendering to perform the cheapest DOM mutations possible. That might mean deleting the first todo element, then adding it again at the end of the list.</source>
          <target state="translated">そして、アルファベット順に並べ替えます。DOM を更新する際、Vue は可能な限り最も安価な DOM の突然変異を実行するようにレンダリングを最適化します。これは、最初の todo 要素を削除し、リストの最後に再度追加することを意味するかもしれません。</target>
        </trans-unit>
        <trans-unit id="60891cf748e8a5cfa058d96629753adac1a276a6" translate="yes" xml:space="preserve">
          <source>Then you would now update it to:</source>
          <target state="translated">ならば、あなたはそれを更新することになります。</target>
        </trans-unit>
        <trans-unit id="29dfab044dfc1294ff91b939dd91ab9260db5d9f" translate="yes" xml:space="preserve">
          <source>Then you&amp;rsquo;ll need to import each component you&amp;rsquo;d like to use, before you locally register it. For example, in a hypothetical &lt;code&gt;ComponentB.js&lt;/code&gt; or &lt;code&gt;ComponentB.vue&lt;/code&gt; file:</source>
          <target state="translated">次に、ローカルで登録する前に、使用する各コンポーネントをインポートする必要があります。たとえば、架空の &lt;code&gt;ComponentB.js&lt;/code&gt; または &lt;code&gt;ComponentB.vue&lt;/code&gt; ファイルの場合：</target>
        </trans-unit>
        <trans-unit id="bbbca49c29405f3089d76789fe1e0ea9835caf98" translate="yes" xml:space="preserve">
          <source>Then you'll need to import each component you'd like to use, before you locally register it. For example, in a hypothetical &lt;code&gt;ComponentB.js&lt;/code&gt; or &lt;code&gt;ComponentB.vue&lt;/code&gt; file:</source>
          <target state="translated">次に、ローカルで登録する前に、使用する各コンポーネントをインポートする必要があります。たとえば、架空の &lt;code&gt;ComponentB.js&lt;/code&gt; または &lt;code&gt;ComponentB.vue&lt;/code&gt; ファイルでは次のようになります。</target>
        </trans-unit>
        <trans-unit id="4a02df39977359aa3a054dc03aa4a5ab9829f85e" translate="yes" xml:space="preserve">
          <source>There also seem to be philosophical differences in the API design which if you&amp;rsquo;re curious, can be demonstrated by how each handles the creation of a &lt;a href=&quot;https://gist.github.com/chrisvfritz/9e5f2d6826af00fcbace7be8f6dccb89&quot;&gt;simple todo list&lt;/a&gt;. It&amp;rsquo;s definitely somewhat subjective, but many consider Vue&amp;rsquo;s API to be less complex and better structured.</source>
          <target state="translated">APIの設計には哲学的な違いもあるようですが、好奇心が強い場合は、それぞれが&lt;a href=&quot;https://gist.github.com/chrisvfritz/9e5f2d6826af00fcbace7be8f6dccb89&quot;&gt;単純なtodoリストの&lt;/a&gt;作成をどのように処理するかで実証できます。それは間違いなくやや主観的ですが、多くの人はVueのAPIはそれほど複雑ではなく、よりよく構造化されていると考えています。</target>
        </trans-unit>
        <trans-unit id="00ee1410ff14873dae0595e837c501a60becd79c" translate="yes" xml:space="preserve">
          <source>There are a few advantages:</source>
          <target state="translated">メリットはいくつかあります。</target>
        </trans-unit>
        <trans-unit id="87ca995da3464bf63362398bc880975ded2ee3cc" translate="yes" xml:space="preserve">
          <source>There are a huge range of disabilities, which can be divided roughly into four categories:</source>
          <target state="translated">障害の種類は膨大なものがあり、大きく分けて4つに分類されます。</target>
        </trans-unit>
        <trans-unit id="18eecd77b539219d855322c591de00710dfa9efa" translate="yes" xml:space="preserve">
          <source>There are a number of reasons for placing &lt;code&gt;props&lt;/code&gt; as a separate first argument instead of including it in the context:</source>
          <target state="translated">&lt;code&gt;props&lt;/code&gt; をコンテキストに含めるのではなく、個別の最初の引数として配置する理由はいくつかあります。</target>
        </trans-unit>
        <trans-unit id="a278039d12ee8bace65331079237ab972774e0f6" translate="yes" xml:space="preserve">
          <source>There are also a few array-related caveats, which were discussed earlier in the &lt;a href=&quot;list#Caveats&quot;&gt;list rendering section&lt;/a&gt;.</source>
          <target state="translated">また、&lt;a href=&quot;list#Caveats&quot;&gt;リストのレンダリングのセクションで&lt;/a&gt;前述した、アレイに関連するいくつかの警告もあります。</target>
        </trans-unit>
        <trans-unit id="8355a914d86b23056657ff75f59f4f4811dbbe1e" translate="yes" xml:space="preserve">
          <source>There are also other hooks which will be called at different stages of the instance&amp;rsquo;s lifecycle, such as &lt;a href=&quot;../api/index#mounted&quot;&gt;&lt;code&gt;mounted&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/index#updated&quot;&gt;&lt;code&gt;updated&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../api/index#destroyed&quot;&gt;&lt;code&gt;destroyed&lt;/code&gt;&lt;/a&gt;. All lifecycle hooks are called with their &lt;code&gt;this&lt;/code&gt; context pointing to the Vue instance invoking it.</source>
          <target state="translated">また、他にも、インスタンスのライフサイクルのさまざまな段階で呼び出されるフック（&lt;a href=&quot;../api/index#mounted&quot;&gt; &lt;code&gt;mounted&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../api/index#updated&quot;&gt; &lt;code&gt;updated&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../api/index#destroyed&quot;&gt; &lt;code&gt;destroyed&lt;/code&gt; &lt;/a&gt;ます。すべてのライフサイクルフックは、それを呼び出すVueインスタンスをポイントする &lt;code&gt;this&lt;/code&gt; コンテキストで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="2e596486dc08d17a554e02af4b2f5f3241a6640d" translate="yes" xml:space="preserve">
          <source>There are also other hooks which will be called at different stages of the instance's lifecycle, such as &lt;a href=&quot;../api/options-lifecycle-hooks#mounted&quot;&gt;mounted&lt;/a&gt;, &lt;a href=&quot;../api/options-lifecycle-hooks#updated&quot;&gt;updated&lt;/a&gt;, and &lt;a href=&quot;../api/options-lifecycle-hooks#unmounted&quot;&gt;unmounted&lt;/a&gt;. All lifecycle hooks are called with their &lt;code&gt;this&lt;/code&gt; context pointing to the current active instance invoking it.</source>
          <target state="translated">&lt;a href=&quot;../api/options-lifecycle-hooks#mounted&quot;&gt;マウント済み&lt;/a&gt;、&lt;a href=&quot;../api/options-lifecycle-hooks#updated&quot;&gt;更新済み&lt;/a&gt;、&lt;a href=&quot;../api/options-lifecycle-hooks#unmounted&quot;&gt;マウント解除&lt;/a&gt;など、インスタンスのライフサイクルのさまざまな段階で呼び出される他のフックもあります。すべてのライフサイクルフックは、 &lt;code&gt;this&lt;/code&gt; コンテキストがそれを呼び出す現在のアクティブなインスタンスを指すように呼び出されます。</target>
        </trans-unit>
        <trans-unit id="595e87e7a707cb9f54dea4bd06abe43f491c5b96" translate="yes" xml:space="preserve">
          <source>There are cases however, particularly shared component libraries, when this &lt;em&gt;might&lt;/em&gt; be appropriate. For example, in abstract components that interact with JavaScript APIs instead of rendering HTML, like these hypothetical Google Maps components:</source>
          <target state="translated">例では、これは特に共有コンポーネントライブラリ、しかしあり&lt;em&gt;かもしれません&lt;/em&gt;が適切では。たとえば、以下の架空のGoogleマップコンポーネントのように、HTMLをレンダリングする代わりにJavaScript APIと対話する抽象コンポーネントでは、</target>
        </trans-unit>
        <trans-unit id="3876196be292a6f75aaef350c2cf3fa6064ad6ee" translate="yes" xml:space="preserve">
          <source>There are cases when it&amp;rsquo;s useful to specify fallback (i.e. default) content for a slot, to be rendered only when no content is provided. For example, in a &lt;code&gt;&amp;lt;submit-button&amp;gt;&lt;/code&gt; component:</source>
          <target state="translated">コンテンツが提供されない場合にのみレンダリングされるように、スロットのフォールバック（つまり、デフォルト）コンテンツを指定すると便利な場合があります。たとえば、 &lt;code&gt;&amp;lt;submit-button&amp;gt;&lt;/code&gt; コンポーネントの場合：</target>
        </trans-unit>
        <trans-unit id="023ed11339a46f2308db7110e18a32765ded128c" translate="yes" xml:space="preserve">
          <source>There are cases when it's useful to specify fallback (i.e. default) content for a slot, to be rendered only when no content is provided. For example, in a &lt;code&gt;&amp;lt;submit-button&amp;gt;&lt;/code&gt; component:</source>
          <target state="translated">スロットのフォールバック（つまりデフォルト）コンテンツを指定して、コンテンツが提供されていない場合にのみレンダリングすることが役立つ場合があります。たとえば、 &lt;code&gt;&amp;lt;submit-button&amp;gt;&lt;/code&gt; コンポーネントでは次のようになります。</target>
        </trans-unit>
        <trans-unit id="b097d3f1a1272b7a886d701f8e65981ad1d92968" translate="yes" xml:space="preserve">
          <source>There are quite a few other directives, each with its own special functionality. For example, the &lt;code&gt;v-for&lt;/code&gt; directive can be used for displaying a list of items using the data from an Array:</source>
          <target state="translated">他にもかなりの数のディレクティブがあり、それぞれに独自の機能があります。たとえば、 &lt;code&gt;v-for&lt;/code&gt; ディレクティブは、配列のデータを使用してアイテムのリストを表示するために使用できます。</target>
        </trans-unit>
        <trans-unit id="9ffde334a578c795b91b7f31309b04b95aaef274" translate="yes" xml:space="preserve">
          <source>There are quite a few other directives, each with its own special functionality. For example, the &lt;code&gt;v-for&lt;/code&gt; directive can be used to display a list of items using the data from an array:</source>
          <target state="translated">他にもかなりの数のディレクティブがあり、それぞれに独自の特別な機能があります。たとえば、 &lt;code&gt;v-for&lt;/code&gt; ディレクティブを使用して、配列のデータを使用してアイテムのリストを表示できます。</target>
        </trans-unit>
        <trans-unit id="301d312bbcc93ad24cc77d82516195cad4b40d9a" translate="yes" xml:space="preserve">
          <source>There are six classes applied for enter/leave transitions.</source>
          <target state="translated">入室・退室のトランジションには6つのクラスが適用されています。</target>
        </trans-unit>
        <trans-unit id="68ec2c8ded7b22cd2bc4c88259f22e650546ce9b" translate="yes" xml:space="preserve">
          <source>There are technical reasons behind this restriction - it eliminates a class of edge cases in the dependency tracking system, and also makes Vue instances play nicer with type checking systems. But there is also an important consideration in terms of code maintainability: the &lt;code&gt;data&lt;/code&gt; object is like the schema for your component&amp;rsquo;s state. Declaring all reactive properties upfront makes the component code easier to understand when revisited later or read by another developer.</source>
          <target state="translated">この制限の背後には技術的な理由があります。これにより、依存関係追跡システムのエッジケースのクラスが排除され、Vueインスタンスが型チェックシステムとよりうまく機能するようになります。ただし、コードの保守性に関して重要な考慮事項もあります。 &lt;code&gt;data&lt;/code&gt; オブジェクトは、コンポーネントの状態のスキーマのようなものです。すべてのリアクティブプロパティを事前に宣言すると、後で再訪したり、別の開発者が読んだりするときに、コンポーネントコードを理解しやすくなります。</target>
        </trans-unit>
        <trans-unit id="cd23ee5c3baea83a9cbbf815348ec184dd9b7581" translate="yes" xml:space="preserve">
          <source>There are technical reasons behind this restriction - it eliminates a class of edge cases in the dependency tracking system, and also makes component instances play nicer with type checking systems. But there is also an important consideration in terms of code maintainability: the &lt;code&gt;data&lt;/code&gt; object is like the schema for your component's state. Declaring all reactive properties upfront makes the component code easier to understand when revisited later or read by another developer.</source>
          <target state="translated">この制限の背後には技術的な理由があります。これにより、依存関係追跡システムのエッジケースのクラスが排除され、コンポーネントインスタンスが型チェックシステムでより適切に機能するようになります。ただし、コードの保守性に関しても重要な考慮事項があります。 &lt;code&gt;data&lt;/code&gt; オブジェクトは、コンポーネントの状態のスキーマのようなものです。すべてのリアクティブプロパティを事前に宣言すると、後で再検討したり、別の開発者が読んだりするときに、コンポーネントコードを理解しやすくなります。</target>
        </trans-unit>
        <trans-unit id="1fe3e32d655e16db1bfb24d4c220af3cbcc38d7c" translate="yes" xml:space="preserve">
          <source>There are three primary ways of adding Vue.js to a project:</source>
          <target state="translated">Vue.jsをプロジェクトに追加する方法は主に3つあります。</target>
        </trans-unit>
        <trans-unit id="db30e092cad90bed9c249d97be67dad62ff063c2" translate="yes" xml:space="preserve">
          <source>There are times when it&amp;rsquo;s useful to have multiple slots. For example, in a &lt;code&gt;&amp;lt;base-layout&amp;gt;&lt;/code&gt; component with the following template:</source>
          <target state="translated">複数のスロットがあると便利な場合があります。たとえば、次のテンプレートを持つ &lt;code&gt;&amp;lt;base-layout&amp;gt;&lt;/code&gt; コンポーネントでは：</target>
        </trans-unit>
        <trans-unit id="e1813b2bf6f7cecd057263ad277b6fac59e1ce1e" translate="yes" xml:space="preserve">
          <source>There are times when it's useful to have multiple slots. For example, in a &lt;code&gt;&amp;lt;base-layout&amp;gt;&lt;/code&gt; component with the following template:</source>
          <target state="translated">複数のスロットがあると便利な場合があります。たとえば、次のテンプレートを使用する &lt;code&gt;&amp;lt;base-layout&amp;gt;&lt;/code&gt; コンポーネントの場合：</target>
        </trans-unit>
        <trans-unit id="d66a662b2b692933bc8923306e3e5688421626cb" translate="yes" xml:space="preserve">
          <source>There are two common cases where this can be tempting:</source>
          <target state="translated">誘惑に負けてしまうのには、よくある2つのケースがあります。</target>
        </trans-unit>
        <trans-unit id="4be534cacf73464a26b8c69ecc68abf4cebc095f" translate="yes" xml:space="preserve">
          <source>There are usually two cases where it&amp;rsquo;s tempting to mutate a prop:</source>
          <target state="translated">通常、プロップを変更したくなる2つのケースがあります。</target>
        </trans-unit>
        <trans-unit id="a8132b188e4877e8a452f3faa4d8374aab1ffa3f" translate="yes" xml:space="preserve">
          <source>There are usually two cases where it's tempting to mutate a prop:</source>
          <target state="translated">プロップを変異させたくなるのは大抵2つのケースがあります。</target>
        </trans-unit>
        <trans-unit id="1d31dfadc2282cbff8486ff7a98cbf1a40dcb49c" translate="yes" xml:space="preserve">
          <source>There are various other component options that add user-defined properties to the component instance, such as &lt;code&gt;methods&lt;/code&gt;, &lt;code&gt;props&lt;/code&gt;, &lt;code&gt;computed&lt;/code&gt;, &lt;code&gt;inject&lt;/code&gt; and &lt;code&gt;setup&lt;/code&gt;. We'll discuss each of these in depth later in the guide. All of the properties of the component instance, no matter how they are defined, will be accessible in the component's template.</source>
          <target state="translated">&lt;code&gt;methods&lt;/code&gt; 、 &lt;code&gt;props&lt;/code&gt; 、 &lt;code&gt;computed&lt;/code&gt; 、 &lt;code&gt;inject&lt;/code&gt; 、 &lt;code&gt;setup&lt;/code&gt; など、ユーザー定義のプロパティをコンポーネントインスタンスに追加する他のさまざまなコンポーネントオプションがあります。これらのそれぞれについては、ガイドの後半で詳しく説明します。コンポーネントインスタンスのすべてのプロパティは、それらがどのように定義されているかに関係なく、コンポーネントのテンプレートでアクセスできます。</target>
        </trans-unit>
        <trans-unit id="9a46df346eecefc8c5696a405d0623a7868c6f68" translate="yes" xml:space="preserve">
          <source>There can still be one unnamed slot, which is the &lt;strong&gt;default slot&lt;/strong&gt; that serves as a catch-all for any unmatched content. In both examples above, the rendered HTML would be:</source>
          <target state="translated">名前のないスロットが1つ存在する&lt;strong&gt;場合&lt;/strong&gt;があり&lt;strong&gt;ます。&lt;/strong&gt;これは、一致しないコンテンツのキャッチオールとして機能する&lt;strong&gt;デフォルトのスロットです&lt;/strong&gt;。上記の両方の例で、レンダリングされるHTMLは次のようになります。</target>
        </trans-unit>
        <trans-unit id="3134ce0335f7ad34a1ca3736890a4ab8dd322f95" translate="yes" xml:space="preserve">
          <source>There is a certain temptation to abuse these styles, as one can simply add a change inside a callout. However, this breaks up the flow of reading for the user, and thus, should only be used in special circumstances. Wherever possible, we should attempt to create a narrative and flow within the page to respect the readers cognitive load.</source>
          <target state="translated">吹き出しの中に単に変更を加えることができるので、これらのスタイルを乱用したいという誘惑があります。しかし、これはユーザーの読書の流れを断ち切ってしまうので、特別な状況でのみ使用すべきです。可能な限り、読者の認知的負荷を尊重するために、ページ内に物語と流れを作ることを試みるべきです。</target>
        </trans-unit>
        <trans-unit id="892e9605b3eb99a1e8758152c0f0d14bd50018ba" translate="yes" xml:space="preserve">
          <source>There is also the &lt;code&gt;vm.$nextTick()&lt;/code&gt; instance method, which is especially handy inside components, because it doesn&amp;rsquo;t need global &lt;code&gt;Vue&lt;/code&gt; and its callback&amp;rsquo;s &lt;code&gt;this&lt;/code&gt; context will be automatically bound to the current Vue instance:</source>
          <target state="translated">&lt;code&gt;vm.$nextTick()&lt;/code&gt; インスタンスメソッドもあります。これは、グローバル &lt;code&gt;Vue&lt;/code&gt; を必要とせず、そのコールバックの &lt;code&gt;this&lt;/code&gt; コンテキストが現在のVueインスタンスに自動的にバインドされるため、コンポーネント内で特に便利です。</target>
        </trans-unit>
        <trans-unit id="931f9d7dad513e241c3b7564504c589081e367fc" translate="yes" xml:space="preserve">
          <source>There is also the &lt;code&gt;vm.$nextTick()&lt;/code&gt; instance method, which is especially handy inside components, because it doesn't need global &lt;code&gt;Vue&lt;/code&gt; and its callback's &lt;code&gt;this&lt;/code&gt; context will be automatically bound to the current component instance:</source>
          <target state="translated">&lt;code&gt;vm.$nextTick()&lt;/code&gt; インスタンスメソッドもあります。これは、グローバル &lt;code&gt;Vue&lt;/code&gt; を必要とせず、そのコールバックの &lt;code&gt;this&lt;/code&gt; コンテキストが現在のコンポーネントインスタンスに自動的にバインドされるため、コンポーネント内で特に便利です。</target>
        </trans-unit>
        <trans-unit id="e795677faa92646e68896f4fa2d153d1c6b3dad9" translate="yes" xml:space="preserve">
          <source>There is no direct &lt;code&gt;v-model&lt;/code&gt; counterpart in render functions - you will have to implement the logic yourself:</source>
          <target state="translated">レンダリング関数に直接対応する &lt;code&gt;v-model&lt;/code&gt; はありません。自分でロジックを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="a3dc3c28e5738e838da6dece3bd69b468532f5bd" translate="yes" xml:space="preserve">
          <source>There is no longer a special API to initialize an app with Vue Router. That means instead of:</source>
          <target state="translated">Vue Router でアプリを初期化するための特別な API はありません。つまり、代わりに</target>
        </trans-unit>
        <trans-unit id="748ac69009ecb3989841a051f46a547dafda1aa5" translate="yes" xml:space="preserve">
          <source>There is no strictly defined scope for a plugin, but common scenarios where plugins are useful include:</source>
          <target state="translated">プラグインには厳密に定義されたスコープはありませんが、プラグインが有用な一般的なシナリオとしては以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="e786ab8525d61c08d5edd49d36eaafa66121f1c6" translate="yes" xml:space="preserve">
          <source>There may be times when you want to listen directly to a native event on the root element of a component. In these cases, you can use the &lt;code&gt;.native&lt;/code&gt; modifier for &lt;code&gt;v-on&lt;/code&gt;:</source>
          <target state="translated">コンポーネントのルート要素のネイティブイベントを直接リッスンしたい場合があります。これらの場合、 &lt;code&gt;v-on&lt;/code&gt; に &lt;code&gt;.native&lt;/code&gt; 修飾子を使用できます。</target>
        </trans-unit>
        <trans-unit id="e13a2b6d1fa69f970582ef7c30a8696baaa1caf0" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s a lot you can do to help Vue grow in your community:</source>
          <target state="translated">Vueがコミュニティで成長するためにできることはたくさんあります。</target>
        </trans-unit>
        <trans-unit id="c70dcc11c00ce0163cd6cf08b8dae423423a248d" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s no longer a use case for this in the new Vue Router.</source>
          <target state="translated">新しいVueルーターでは、この使用例はありません。</target>
        </trans-unit>
        <trans-unit id="163f368f2bf083cc1079a14cd05b50989be0cc02" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s one problem with this example. When you add or remove an item, the ones around it instantly snap into their new place instead of smoothly transitioning. We&amp;rsquo;ll fix that later.</source>
          <target state="translated">この例には1つの問題があります。アイテムを追加または削除すると、その周りのアイテムはスムーズに移行するのではなく、即座に新しい場所にスナップします。後で修正します。</target>
        </trans-unit>
        <trans-unit id="5d85fbe7675b4e4ec3b50bf7054fe53d2209ebb4" translate="yes" xml:space="preserve">
          <source>There&amp;rsquo;s still one problem though. Try clicking the button below:</source>
          <target state="translated">ただし、まだ問題が1つあります。下のボタンをクリックしてみてください。</target>
        </trans-unit>
        <trans-unit id="41dad96a14fa109e6a88e60050e0bfc7bfc382d1" translate="yes" xml:space="preserve">
          <source>There's one problem with this example. When you add or remove an item, the ones around it instantly snap into their new place instead of smoothly transitioning. We'll fix that later.</source>
          <target state="translated">この例には一つ問題があります。アイテムを追加したり削除したりすると、そのアイテムの周りにあるものがスムーズに移行するのではなく、瞬時に新しい場所にスナップしてしまうのです。これは後ほど修正します。</target>
        </trans-unit>
        <trans-unit id="893d7a218b3089037a8f9da21759565483e409b9" translate="yes" xml:space="preserve">
          <source>There's still one problem though. Try clicking the button below:</source>
          <target state="translated">しかし、まだ一つ問題があります。下のボタンをクリックしてみてください。</target>
        </trans-unit>
        <trans-unit id="6bd02d746956ee7fbd6d2715d983298e056e2e25" translate="yes" xml:space="preserve">
          <source>Therefore, watchers that use template refs should be defined with the &lt;code&gt;flush: 'post'&lt;/code&gt; option. This will run the effect &lt;em&gt;after&lt;/em&gt; the DOM has been updated and ensure that the template ref stays in sync with the DOM and references the correct element.</source>
          <target state="translated">したがって、テンプレート参照を使用するウォッチャーは、 &lt;code&gt;flush: 'post'&lt;/code&gt; オプションを使用して定義する必要があります。これにより、DOMが更新された&lt;em&gt;後&lt;/em&gt;にエフェクトが実行され、テンプレート参照がDOMと同期し続け、正しい要素を参照するようになります。</target>
        </trans-unit>
        <trans-unit id="49f5f05336b856e05032658da8805f15d162f681" translate="yes" xml:space="preserve">
          <source>These FLIP animations are also not limited to a single axis. Items in a multidimensional grid can be &lt;a href=&quot;https://codesandbox.io/s/github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-list-move-transitions&quot;&gt;transitioned too (opens new window)&lt;/a&gt;:</source>
          <target state="translated">これらのFLIPアニメーションも、単一の軸に限定されません。多次元グリッド内のアイテムも&lt;a href=&quot;https://codesandbox.io/s/github/vuejs/vuejs.org/tree/master/src/v2/examples/vue-20-list-move-transitions&quot;&gt;遷移できます（新しいウィンドウが開きます）&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="e6396f41a177bd681652c0e5df217826f32aabe7" translate="yes" xml:space="preserve">
          <source>These FLIP animations are also not limited to a single axis. Items in a multidimensional grid can be &lt;a href=&quot;https://jsfiddle.net/chrisvfritz/sLrhk1bc/&quot;&gt;transitioned too&lt;/a&gt;:</source>
          <target state="translated">これらのFLIPアニメーションも1つの軸に限定されません。多次元グリッドのアイテムも&lt;a href=&quot;https://jsfiddle.net/chrisvfritz/sLrhk1bc/&quot;&gt;移行できます&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="101fa3129d0c59027806566e19bcb27a91fd6013" translate="yes" xml:space="preserve">
          <source>These applications always include many in-DOM templates, where &lt;a href=&quot;#Component-name-casing-in-templates-strongly-recommended&quot;&gt;kebab-case &lt;strong&gt;must&lt;/strong&gt; be used&lt;/a&gt;.</source>
          <target state="translated">これらのアプリケーションには常に多くのDOM内テンプレートが含まれており、&lt;a href=&quot;#Component-name-casing-in-templates-strongly-recommended&quot;&gt;ケバブケースを使用する&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b14a434a616541b430915a0d7db4bb6111861e1b" translate="yes" xml:space="preserve">
          <source>These applications always include many in-DOM templates, where &lt;a href=&quot;#component-name-casing-in-templates-strongly-recommended&quot;&gt;kebab-case &lt;strong&gt;must&lt;/strong&gt; be used&lt;/a&gt;.</source>
          <target state="translated">これらのアプリケーションには常に多くのDOM内テンプレートが含まれており、&lt;a href=&quot;#component-name-casing-in-templates-strongly-recommended&quot;&gt;kebab-caseを使用する&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="d8ad97f9c711d5ae8d024466fe1928f5f113e88a" translate="yes" xml:space="preserve">
          <source>These are the minimal amount of rollup plugins that we need to use to compile the code in an &lt;code&gt;esm&lt;/code&gt; module. We may want to also add &lt;a href=&quot;https://github.com/rollup/plugins/tree/master/packages/babel&quot;&gt;rollup-plugin-babel (opens new window)&lt;/a&gt; to transpile their code and &lt;a href=&quot;https://github.com/rollup/plugins/tree/master/packages/node-resolve&quot;&gt;node-resolve (opens new window)&lt;/a&gt; if we use dependencies that we want to bundle with our library.</source>
          <target state="translated">これらは、 &lt;code&gt;esm&lt;/code&gt; モジュールでコードをコンパイルするために使用する必要のある最小限のロールアッププラグインです。ライブラリにバンドルする依存関係を使用する場合は、rollup &lt;a href=&quot;https://github.com/rollup/plugins/tree/master/packages/babel&quot;&gt;-plugin-babel（新しいウィンドウを開く）&lt;/a&gt;を追加してコードをトランスパイルし、&lt;a href=&quot;https://github.com/rollup/plugins/tree/master/packages/node-resolve&quot;&gt;node-resolve（新しいウィンドウを開く&lt;/a&gt;）を追加することもできます。</target>
        </trans-unit>
        <trans-unit id="79c4f8a294a999f0a432548c8b4a47252ba3a153" translate="yes" xml:space="preserve">
          <source>These can be useful for demos with large templates or in extremely small applications, but should otherwise be avoided, because they separate templates from the rest of the component definition.</source>
          <target state="translated">これらは、大きなテンプレートを持つデモや非常に小さなアプリケーションでは便利ですが、それ以外の場合は避けた方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="21e7d481abd4d9f9e4579d54e3c726471440c50e" translate="yes" xml:space="preserve">
          <source>These components are &lt;strong&gt;globally registered&lt;/strong&gt; for the application. That means they can be used in the template of any component instance within this application:</source>
          <target state="translated">これらのコンポーネントは、アプリケーションに&lt;strong&gt;グローバルに登録さ&lt;/strong&gt;れています。つまり、このアプリケーション内の任意のコンポーネントインスタンスのテンプレートで使用できます。</target>
        </trans-unit>
        <trans-unit id="4eda46855e3962039e549f3d03f1e9beb23fa48b" translate="yes" xml:space="preserve">
          <source>These components are &lt;strong&gt;globally registered&lt;/strong&gt;. That means they can be used in the template of any root Vue instance (&lt;code&gt;new Vue&lt;/code&gt;) created after registration. For example:</source>
          <target state="translated">これらのコンポーネントは&lt;strong&gt;グローバルに登録されてい&lt;/strong&gt;ます。つまり、登録後に作成されたルートVueインスタンス（ &lt;code&gt;new Vue&lt;/code&gt; ）のテンプレートで使用できます。例えば：</target>
        </trans-unit>
        <trans-unit id="c11fba5bbbf86f45897e779c4584d6721b0b2522" translate="yes" xml:space="preserve">
          <source>These components lay the foundation for consistent styling and behavior in your application. They may &lt;strong&gt;only&lt;/strong&gt; contain:</source>
          <target state="translated">これらのコンポーネントは、アプリケーションで一貫したスタイルと動作の基礎を築きます。次のもの&lt;strong&gt;のみを&lt;/strong&gt;含めることが&lt;strong&gt;でき&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="bda8424d75fa59c6af3e0cab0e9c50fd71c0b1db" translate="yes" xml:space="preserve">
          <source>These expressions will be evaluated as JavaScript in the data scope of the current active instance. One restriction is that each binding can only contain &lt;strong&gt;one single expression&lt;/strong&gt;, so the following will &lt;strong&gt;NOT&lt;/strong&gt; work:</source>
          <target state="translated">これらの式は、現在アクティブなインスタンスのデータスコープでJavaScriptとして評価されます。1つの制限は、各バインディングに含めることができる&lt;strong&gt;単一の式&lt;/strong&gt;は&lt;strong&gt;1つ&lt;/strong&gt;だけであるため、以下は機能し&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="c208483eb8caab5ce32ce55aa9ca8d4751b6d7ab" translate="yes" xml:space="preserve">
          <source>These expressions will be evaluated as JavaScript in the data scope of the owner Vue instance. One restriction is that each binding can only contain &lt;strong&gt;one single expression&lt;/strong&gt;, so the following will &lt;strong&gt;NOT&lt;/strong&gt; work:</source>
          <target state="translated">これらの式は、所有者のVueインスタンスのデータスコープでJavaScriptとして評価されます。1つの制限は、各バインディングには&lt;strong&gt;1つの式&lt;/strong&gt;しか含めることができないため、以下は機能し&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="80b817b97cd01c5d4dff8f7d4784ab918c1bcadf" translate="yes" xml:space="preserve">
          <source>These functions accept a callback that will be executed when the hook is called by the component.</source>
          <target state="translated">これらの関数は、コンポーネントからフックが呼び出されたときに実行されるコールバックを受け入れます。</target>
        </trans-unit>
        <trans-unit id="1f5e0b8172eba0a64b60b21bf3416955cad7a254" translate="yes" xml:space="preserve">
          <source>These functions accept a callback that will be executed when the hook is called by the component:</source>
          <target state="translated">これらの関数は、コンポーネントからフックが呼び出されたときに実行されるコールバックを受け入れます。</target>
        </trans-unit>
        <trans-unit id="2f84f68662fd1421835a7e799cd84c8a791f699d" translate="yes" xml:space="preserve">
          <source>These global APIs in Vue 2.x are affected by this change:</source>
          <target state="translated">Vue 2.x のこれらのグローバル API は、この変更の影響を受けます。</target>
        </trans-unit>
        <trans-unit id="894c317239a0c7a65a9e88455fd9ec3ef7ebc237" translate="yes" xml:space="preserve">
          <source>These hooks can be used in combination with CSS transitions/animations or on their own.</source>
          <target state="translated">これらのフックは、CSSのトランジション/アニメーションと組み合わせて使用することもできますし、単独で使用することもできます。</target>
        </trans-unit>
        <trans-unit id="0eae938a54ab8538f13def15003e468ed14f51af" translate="yes" xml:space="preserve">
          <source>These images will act as a submit type button on forms</source>
          <target state="translated">これらの画像は、フォームの送信タイプのボタンとして機能します。</target>
        </trans-unit>
        <trans-unit id="d1f27cab3e6badeb36908a8616873204e7c70a66" translate="yes" xml:space="preserve">
          <source>These instance properties are only added when the instance is first created, so you need to ensure they are all present in the object returned by the &lt;code&gt;data&lt;/code&gt; function. Where necessary, use &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt; or some other placeholder value for properties where the desired value isn't yet available.</source>
          <target state="translated">これらのインスタンスプロパティは、インスタンスが最初に作成されたときにのみ追加されるため、 &lt;code&gt;data&lt;/code&gt; 関数によって返されるオブジェクトにすべて存在することを確認する必要があります。必要に応じて、目的の値がまだ利用できないプロパティには、 &lt;code&gt;null&lt;/code&gt; 、 &lt;code&gt;undefined&lt;/code&gt; 、またはその他のプレースホルダー値を使用します。</target>
        </trans-unit>
        <trans-unit id="1b1b4bc59922cec9c3af1f6e29088ab2ed2b3185" translate="yes" xml:space="preserve">
          <source>These lifecycle hook registration functions can only be used synchronously during &lt;a href=&quot;#setup&quot;&gt;&lt;code&gt;setup()&lt;/code&gt;&lt;/a&gt;, since they rely on internal global state to locate the current active instance (the component instance whose &lt;code&gt;setup()&lt;/code&gt; is being called right now). Calling them without a current active instance will result in an error.</source>
          <target state="translated">これらのライフサイクルフック登録関数は、内部グローバル状態に依存して現在アクティブなインスタンス（ &lt;code&gt;setup()&lt;/code&gt; が現在呼び出されているコンポーネントインスタンス）を見つけるため、&lt;a href=&quot;#setup&quot;&gt; &lt;code&gt;setup()&lt;/code&gt; &lt;/a&gt;中にのみ同期的に使用できます。現在アクティブなインスタンスなしでそれらを呼び出すと、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="18eb93efc44d56c2080356f2acd2adc1588f6912" translate="yes" xml:space="preserve">
          <source>These limitations become apparent when designing a search indicator, like this one for example:</source>
          <target state="translated">このような制限は、例えばこのような検索指標を設計する際に明らかになります。</target>
        </trans-unit>
        <trans-unit id="2672ba8246e63f719c7d2d1d3c131a8d8ffe1408" translate="yes" xml:space="preserve">
          <source>These methods can also be supported in compatibility builds.</source>
          <target state="translated">これらのメソッドは互換性のあるビルドでもサポートされています。</target>
        </trans-unit>
        <trans-unit id="44f058292bf91d7fdc0c19b30d4f231d10c8ffce" translate="yes" xml:space="preserve">
          <source>These modifiers restrict the handler to events triggered by a specific mouse button.</source>
          <target state="translated">これらの修飾子は、特定のマウスボタンによってトリガーされるイベントにハンドラを制限します。</target>
        </trans-unit>
        <trans-unit id="d2b0e629392045530844771affeff7b43f8ec099" translate="yes" xml:space="preserve">
          <source>These rules have been found to improve readability and/or developer experience in most projects. Your code will still run if you violate them, but violations should be rare and well-justified.</source>
          <target state="translated">これらのルールは、ほとんどのプロジェクトで可読性や開発者の経験を向上させることがわかっています。これらのルールに違反してもコードは実行されますが、違反はまれで正当な理由があるものでなければなりません。</target>
        </trans-unit>
        <trans-unit id="91af92ef53fdf34200de7e0b28db35745ed2a1ae" translate="yes" xml:space="preserve">
          <source>These rules help prevent errors, so learn and abide by them at all costs. Exceptions may exist, but should be very rare and only be made by those with expert knowledge of both JavaScript and Vue.</source>
          <target state="translated">これらのルールはエラーを防ぐのに役立ちます。例外は存在するかもしれませんが、非常に稀であり、JavaScript と Vue の両方の専門的な知識を持つ者のみが行うべきです。</target>
        </trans-unit>
        <trans-unit id="e30564da6ab88875780c5728faa3632ae18dc83a" translate="yes" xml:space="preserve">
          <source>These specific languages are only examples. You could as easily use Bubl&amp;eacute;, TypeScript, SCSS, PostCSS - or whatever other preprocessors that help you be productive. If using Webpack with &lt;code&gt;vue-loader&lt;/code&gt;, it also has first-class support for CSS Modules.</source>
          <target state="translated">これらの特定の言語は単なる例です。Bubl&amp;eacute;、TypeScript、SCSS、PostCSS、または生産性向上に役立つその他のプリプロセッサを簡単に使用できます。vpack &lt;code&gt;vue-loader&lt;/code&gt; でWebpackを使用する場合、CSSモジュールのファーストクラスサポートも提供します。</target>
        </trans-unit>
        <trans-unit id="6f7e3a3689db0252bb84c19cba8c531d2629463a" translate="yes" xml:space="preserve">
          <source>These specific languages are only examples. You could as easily use TypeScript, SCSS, PostCSS, or whatever other preprocessors that help you be productive. If using Webpack with &lt;code&gt;vue-loader&lt;/code&gt;, it also has first-class support for CSS Modules.</source>
          <target state="translated">これらの特定の言語は単なる例です。TypeScript、SCSS、PostCSS、または生産性を高めるその他のプリプロセッサを簡単に使用できます。 &lt;code&gt;vue-loader&lt;/code&gt; でWebpackを使用している場合は、CSSモジュールのファーストクラスのサポートもあります。</target>
        </trans-unit>
        <trans-unit id="fdd9827028ef750f7255fe5fc506af18a8fb1368" translate="yes" xml:space="preserve">
          <source>These will override the conventional class names. This is especially useful when you want to combine Vue&amp;rsquo;s transition system with an existing CSS animation library, such as &lt;a href=&quot;https://daneden.github.io/animate.css/&quot;&gt;Animate.css&lt;/a&gt;.</source>
          <target state="translated">これらは、従来のクラス名をオーバーライドします。これは、Vueの移行システムを&lt;a href=&quot;https://daneden.github.io/animate.css/&quot;&gt;Animate.css&lt;/a&gt;などの既存のCSSアニメーションライブラリと組み合わせる場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="e33ec9ba4c8a26fd6b28ce4fd52b224db3c80e35" translate="yes" xml:space="preserve">
          <source>These will override the conventional class names. This is especially useful when you want to combine Vue's transition system with an existing CSS animation library, such as &lt;a href=&quot;https://daneden.github.io/animate.css/&quot;&gt;Animate.css (opens new window)&lt;/a&gt;.</source>
          <target state="translated">これらは、従来のクラス名をオーバーライドします。これは、Vueの遷移システムを&lt;a href=&quot;https://daneden.github.io/animate.css/&quot;&gt;Animate.css（新しいウィンドウを開く）&lt;/a&gt;などの既存のCSSアニメーションライブラリと組み合わせる場合に特に便利です。</target>
        </trans-unit>
        <trans-unit id="92cd96ee6ad9b9e610a589e4749092778d3625dd" translate="yes" xml:space="preserve">
          <source>They are considered advanced because the raw opt-out is only at the root level, so if you set a nested, non-marked raw object into a reactive object and then access it again, you get the proxied version back. This can lead to &lt;strong&gt;identity hazards&lt;/strong&gt; - i.e. performing an operation that relies on object identity but using both the raw and the proxied version of the same object:</source>
          <target state="translated">生のオプトアウトはルートレベルでのみ行われるため、高度であると見なされます。したがって、ネストされたマークのない生オブジェクトをリアクティブオブジェクトに設定してから再度アクセスすると、プロキシされたバージョンが返されます。これにより、&lt;strong&gt;IDの危険が生じる&lt;/strong&gt;可能&lt;strong&gt;性があります。&lt;/strong&gt;つまり、オブジェクトIDに依存するが、同じオブジェクトの未加工バージョンとプロキシバージョンの両方を使用する操作を実行します。</target>
        </trans-unit>
        <trans-unit id="71a51bba5139b36f3f5fa86eb58e22582ee00315" translate="yes" xml:space="preserve">
          <source>They can also be passed individually or wrapped as appropriate:</source>
          <target state="translated">また、個別に渡したり、適宜ラッピングしたりすることもできます。</target>
        </trans-unit>
        <trans-unit id="a8d1026e768f545462812038bf11ac5597aa461a" translate="yes" xml:space="preserve">
          <source>They document the API of the component, so that it&amp;rsquo;s easy to see how the component is meant to be used.</source>
          <target state="translated">コンポーネントのAPIが文書化されているため、コンポーネントの使用方法が簡単にわかります。</target>
        </trans-unit>
        <trans-unit id="b6cf20af74870ca902c785f1b709b46f1fb4bbe6" translate="yes" xml:space="preserve">
          <source>They document the API of the component, so that it's easy to see how the component is meant to be used.</source>
          <target state="translated">彼らはコンポーネントのAPIを文書化しているので、コンポーネントがどのように使用されることを意図しているかを簡単に確認することができます。</target>
        </trans-unit>
        <trans-unit id="ee9fb3a66c9bf09491269055d05e63e8daff7baf" translate="yes" xml:space="preserve">
          <source>They have slightly different target users however.</source>
          <target state="translated">しかし、彼らはわずかに異なるターゲットユーザーを持っています。</target>
        </trans-unit>
        <trans-unit id="dddb496772a8230c124e4f06a214f032833805d2" translate="yes" xml:space="preserve">
          <source>They may look a bit different from normal HTML, but &lt;code&gt;:&lt;/code&gt; and &lt;code&gt;@&lt;/code&gt; are valid characters for attribute names and all Vue-supported browsers can parse it correctly. In addition, they do not appear in the final rendered markup. The shorthand syntax is totally optional, but you will likely appreciate it when you learn more about its usage later.</source>
          <target state="translated">それらは通常のHTMLと少し異なるように見えるかもしれませんが、 &lt;code&gt;:&lt;/code&gt; と &lt;code&gt;@&lt;/code&gt; は属性名に有効な文字であり、Vueがサポートするすべてのブラウザーはそれを正しく解析できます。さらに、それらは最終的にレンダリングされるマークアップには表示されません。省略構文は完全にオプションですが、後でその使用法についてさらに学ぶときに、おそらくそれを理解するでしょう。</target>
        </trans-unit>
        <trans-unit id="281fe192d49481d23a37a591764ebdfbfa624db4" translate="yes" xml:space="preserve">
          <source>They will receive two arguments: &lt;code&gt;props&lt;/code&gt; and &lt;code&gt;context&lt;/code&gt;. The &lt;code&gt;context&lt;/code&gt; argument is an object that contains a component's &lt;code&gt;attrs&lt;/code&gt;, &lt;code&gt;slots&lt;/code&gt;, and &lt;code&gt;emit&lt;/code&gt; properties.</source>
          <target state="translated">それらは2つの引数を受け取ります： &lt;code&gt;props&lt;/code&gt; と &lt;code&gt;context&lt;/code&gt; 。 &lt;code&gt;context&lt;/code&gt; 引数は、コンポーネントの含むオブジェクトである &lt;code&gt;attrs&lt;/code&gt; 、 &lt;code&gt;slots&lt;/code&gt; 、および &lt;code&gt;emit&lt;/code&gt; 特性を。</target>
        </trans-unit>
        <trans-unit id="6a9f42e561d875ba212a21ce976d18f88707fb7e" translate="yes" xml:space="preserve">
          <source>They&amp;rsquo;re also very useful as wrapper components. For example, when you need to:</source>
          <target state="translated">また、ラッパーコンポーネントとしても非常に便利です。たとえば、次のことが必要な場合：</target>
        </trans-unit>
        <trans-unit id="58f728f5f509eee0bedefd10f55cb2582da092af" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;http://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name&quot;&gt;prevents conflicts (opens new window)&lt;/a&gt; with existing and future HTML elements, since all HTML elements are a single word.</source>
          <target state="translated">これ&lt;a href=&quot;http://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name&quot;&gt;により&lt;/a&gt;、すべてのHTML要素が1つの単語であるため、既存および将来のHTML要素との競合（新しいウィンドウが開く）が防止されます。</target>
        </trans-unit>
        <trans-unit id="36292b3c039d104e965d98c8c9a093ed70eee710" translate="yes" xml:space="preserve">
          <source>This &lt;a href=&quot;http://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name&quot;&gt;prevents conflicts&lt;/a&gt; with existing and future HTML elements, since all HTML elements are a single word.</source>
          <target state="translated">これ&lt;a href=&quot;http://w3c.github.io/webcomponents/spec/custom/#valid-custom-element-name&quot;&gt;により&lt;/a&gt;、すべてのHTML要素が1つの単語になるため、既存および将来のHTML要素との競合が回避されます。</target>
        </trans-unit>
        <trans-unit id="1ece11c20b0e27793001fdeec7df491259c0b914" translate="yes" xml:space="preserve">
          <source>This allows us add behavior that a filter alone couldn&amp;rsquo;t encapsulate, such as selecting the content of an input on focus. Now the next step will be to extract the business logic from the filter. Below, we pull everything out into an external &lt;a href=&quot;https://gist.github.com/chrisvfritz/5f0a639590d6e648933416f90ba7ae4e&quot;&gt;&lt;code&gt;currencyValidator&lt;/code&gt; object&lt;/a&gt;:</source>
          <target state="translated">これにより、フォーカスだけで入力のコンテンツを選択するなど、フィルターだけではカプセル化できない動作を追加できます。次のステップは、フィルターからビジネスロジックを抽出することです。以下では、すべてを外部の&lt;a href=&quot;https://gist.github.com/chrisvfritz/5f0a639590d6e648933416f90ba7ae4e&quot;&gt; &lt;code&gt;currencyValidator&lt;/code&gt; オブジェクトに&lt;/a&gt;取り出します。</target>
        </trans-unit>
        <trans-unit id="90803ce7ef09d688b5c581945fa8c418cf8b3ba3" translate="yes" xml:space="preserve">
          <source>This allows us to more safely keep developing that component, without fear that we might change/remove something that a child component is relying on. The interface between these components remains clearly defined, just as with props.</source>
          <target state="translated">これにより、子コンポーネントが依存している何かを変更したり削除したりすることを恐れずに、そのコンポーネントをより安全に開発し続けることができます。これらのコンポーネント間のインターフェースは、小道具と同様に明確に定義されています。</target>
        </trans-unit>
        <trans-unit id="74e149b933b7f933e9d6e2560dceac8830da4733" translate="yes" xml:space="preserve">
          <source>This allows you to compose components like this:</source>
          <target state="translated">これにより、このようにコンポーネントを構成することができます。</target>
        </trans-unit>
        <trans-unit id="6c6fdcbf1874b359140e4f3504f0ef8feaedac9f" translate="yes" xml:space="preserve">
          <source>This also allows &lt;code&gt;itemRefs&lt;/code&gt; to be made reactive and watched, if needed.</source>
          <target state="translated">これにより、必要に応じて、 &lt;code&gt;itemRefs&lt;/code&gt; をリアクティブにして監視することもできます。</target>
        </trans-unit>
        <trans-unit id="07ab67c65f204cb035ac63172b27bd9763045849" translate="yes" xml:space="preserve">
          <source>This also means that injections from a parent component work as expected, and that the child component will be nested below the parent component in the Vue Devtools, instead of being placed where the actual content moved to.</source>
          <target state="translated">これは、親コンポーネントからの注入が期待通りに動作し、子コンポーネントは、実際のコンテンツが移動した場所に配置されるのではなく、Vue Devtools の親コンポーネントの下にネストされることを意味します。</target>
        </trans-unit>
        <trans-unit id="2b017e21cf180432f227f352528adf7beedafa7a" translate="yes" xml:space="preserve">
          <source>This also means the following computed property will never update, because &lt;code&gt;Date.now()&lt;/code&gt; is not a reactive dependency:</source>
          <target state="translated">これはまた、 &lt;code&gt;Date.now()&lt;/code&gt; はリアクティブな依存関係ではないため、次の計算されたプロパティが更新されないことを意味します。</target>
        </trans-unit>
        <trans-unit id="a4a6283a307a4532f0a11fbeb7e2bc85aba3cc5e" translate="yes" xml:space="preserve">
          <source>This also serves as a replacement to &lt;code&gt;.sync&lt;/code&gt; modifier and allows us to have multiple &lt;code&gt;v-model&lt;/code&gt;s on the custom component.</source>
          <target state="translated">これは、 &lt;code&gt;.sync&lt;/code&gt; 修飾子の代わりとしても機能し、カスタムコンポーネントに複数の &lt;code&gt;v-model&lt;/code&gt; を含めることができます。</target>
        </trans-unit>
        <trans-unit id="d966b066638dcbfbeb5f7c1fa054b2b9f4ac88e1" translate="yes" xml:space="preserve">
          <source>This attribute does not support dynamic binding.</source>
          <target state="translated">この属性は動的バインディングをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="164bc1e51c6702dce494f030a1bafd94645ed70c" translate="yes" xml:space="preserve">
          <source>This became confusing, as &lt;em&gt;enter&lt;/em&gt; and &lt;em&gt;leave&lt;/em&gt; were broad and not using the same naming convention as their class hook counterparts.</source>
          <target state="translated">&lt;em&gt;enter&lt;/em&gt;と&lt;em&gt;Leave&lt;/em&gt;が広く、対応するクラスフックと同じ命名規則を使用していない&lt;em&gt;ため&lt;/em&gt;、これは混乱を招きました。</target>
        </trans-unit>
        <trans-unit id="85db9f37abb47bdae5f9736eb1fa18d771e503d8" translate="yes" xml:space="preserve">
          <source>This brings us full circle back to &lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;vuex&lt;/a&gt;, so if you&amp;rsquo;ve read this far it&amp;rsquo;s probably time to try it out!</source>
          <target state="translated">これで&lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;vuexに&lt;/a&gt;完全に戻ることができるので、ここまで読んだことがあれば、試してみる時間です。</target>
        </trans-unit>
        <trans-unit id="179dbb08dcd1151aabd85db6b52d3899eda0943a" translate="yes" xml:space="preserve">
          <source>This brings us full circle back to &lt;a href=&quot;https://next.vuex.vuejs.org/&quot;&gt;Vuex (opens new window)&lt;/a&gt;, so if you've read this far it's probably time to try it out!</source>
          <target state="translated">これにより、完全な円が&lt;a href=&quot;https://next.vuex.vuejs.org/&quot;&gt;Vuexに&lt;/a&gt;戻ります（新しいウィンドウが開きます）。したがって、ここまで読んだ場合は、おそらく試してみる時間です。</target>
        </trans-unit>
        <trans-unit id="56dd0e485cf645c0e638522c49dece838e9d034a" translate="yes" xml:space="preserve">
          <source>This can be achieved using Vue's custom &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">これは、Vueのカスタム &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 要素を使用して実現できます。</target>
        </trans-unit>
        <trans-unit id="e208871e834d455a504dbc7b4789f62b8d51dbdf" translate="yes" xml:space="preserve">
          <source>This can be convenient for demos or very small apps with a handful of components. However, the pattern does not scale well to medium or large-scale applications, so we strongly recommend using &lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;Vuex&lt;/a&gt; to manage state in most cases.</source>
          <target state="translated">これは、デモや少数のコンポーネントを備えた非常に小さなアプリに便利です。ただし、パターンは中規模または大規模なアプリケーションに&lt;a href=&quot;https://github.com/vuejs/vuex&quot;&gt;適切にスケーリングさ&lt;/a&gt;れないため、ほとんどの場合、Vuexを使用して状態を管理することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="f3ae7f80927899cd62140ba3ac91c1a272907e8a" translate="yes" xml:space="preserve">
          <source>This can be especially useful in combination with the &lt;code&gt;$attrs&lt;/code&gt; instance property, which contains the attribute names and values passed to a component, such as:</source>
          <target state="translated">これは、次のようなコンポーネントに渡される属性名と値を含む &lt;code&gt;$attrs&lt;/code&gt; インスタンスプロパティと組み合わせると特に便利です。</target>
        </trans-unit>
        <trans-unit id="b07d706ca1c93b0222f37979c7558e8ac0bf7393" translate="yes" xml:space="preserve">
          <source>This can be fixed by moving &lt;code&gt;v-for&lt;/code&gt; to a wrapping &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; tag:</source>
          <target state="translated">これは、 &lt;code&gt;v-for&lt;/code&gt; をラッピング &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; タグに移動することで修正できます。</target>
        </trans-unit>
        <trans-unit id="dc35e91b7f0ddcd858a9ed54df8c331d12068bc2" translate="yes" xml:space="preserve">
          <source>This can be shortened even further. Just as non-specified content is assumed to be for the default slot, &lt;code&gt;v-slot&lt;/code&gt; without an argument is assumed to refer to the default slot:</source>
          <target state="translated">これはさらに短縮できます。指定されていないコンテンツがデフォルトスロット用であると想定されるのと同様に、引数のない &lt;code&gt;v-slot&lt;/code&gt; はデフォルトスロットを参照すると想定されます。</target>
        </trans-unit>
        <trans-unit id="e890dd0b9a03e7b18eb3ea7a9ab2b112967c585d" translate="yes" xml:space="preserve">
          <source>This can be useful sometimes, but it&amp;rsquo;s not a good idea when you&amp;rsquo;re trying to listen on a very specific element, like an &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;. For example, the &lt;code&gt;&amp;lt;base-input&amp;gt;&lt;/code&gt; component above might refactor so that the root element is actually a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; element:</source>
          <target state="translated">これは便利な場合もありますが、 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; などの非常に特定の要素をリッスンしようとする場合はお勧めできません。たとえば、上記の &lt;code&gt;&amp;lt;base-input&amp;gt;&lt;/code&gt; コンポーネントは、ルート要素が実際には &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 要素になるようにリファクタリングする場合があります。</target>
        </trans-unit>
        <trans-unit id="ef2288cfa9c5bb1049786a028d410bf6a81d1c49" translate="yes" xml:space="preserve">
          <source>This can be useful when you&amp;rsquo;ve defined CSS transitions/animations using Vue&amp;rsquo;s transition class conventions and want to switch between them.</source>
          <target state="translated">これは、Vueのトランジションクラスの規則を使用してCSSトランジション/アニメーションを定義し、それらを切り替えたい場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="70c019ddc029d5a8d4f133c3f5144d392c3ee9d2" translate="yes" xml:space="preserve">
          <source>This can be useful when you've defined CSS transitions/animations using Vue's transition class conventions and want to switch between them.</source>
          <target state="translated">これは、Vue のトランジション クラスの規約を使用して CSS トランジション/アニメーションを定義し、それらを切り替えたい場合に便利です。</target>
        </trans-unit>
        <trans-unit id="fc031caf419daa5de2c3ce28e6fb5557646cf13b" translate="yes" xml:space="preserve">
          <source>This can make the template much cleaner, especially when the slot provides many props. It also opens other possibilities, such as renaming props, e.g. &lt;code&gt;item&lt;/code&gt; to &lt;code&gt;todo&lt;/code&gt;:</source>
          <target state="translated">これにより、特にスロットに多くの小道具が用意されている場合に、テンプレートをよりきれいにすることができます。また、このような名前の変更小道具、例えばなどの他の可能性、開いた &lt;code&gt;item&lt;/code&gt; への &lt;code&gt;todo&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="22ed18f22c3147e4d4b605b99a8c886bf36867ed" translate="yes" xml:space="preserve">
          <source>This can make the template much cleaner, especially when the slot provides many props. It also opens other possibilities, such as renaming props, e.g. &lt;code&gt;user&lt;/code&gt; to &lt;code&gt;person&lt;/code&gt;:</source>
          <target state="translated">これにより、特にスロットが多くの小道具を提供する場合、テンプレートをよりきれいにすることができます。それはまた、例えば、小道具の名前を変更するなど、他の可能性、開いた &lt;code&gt;user&lt;/code&gt; する &lt;code&gt;person&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="6e3bbca32d3b2efbcc3d42d5169b319a15930cbb" translate="yes" xml:space="preserve">
          <source>This can replace Vue 2.x &lt;code&gt;Vue.prototype&lt;/code&gt; extending:</source>
          <target state="translated">これは、Vue &lt;code&gt;Vue.prototype&lt;/code&gt; 拡張を置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="91d37bc2f925538550750ba2e9fce0b6e7858848" translate="yes" xml:space="preserve">
          <source>This can work very well for small to medium-sized projects, where JavaScript is only used to enhance certain views. In more complex projects however, or when your frontend is entirely driven by JavaScript, these disadvantages become apparent:</source>
          <target state="translated">これは、JavaScript が特定のビューを強化するためだけに使用される小規模から中規模のプロジェクトでは非常にうまく機能します。しかし、より複雑なプロジェクトや、フロントエンドがすべて JavaScript で駆動されている場合は、これらの欠点が明らかになります。</target>
        </trans-unit>
        <trans-unit id="64ce0755339c54b2f7c3cf1e473ecb364b9471ff" translate="yes" xml:space="preserve">
          <source>This change unifies normal and scoped slots in 3.x.</source>
          <target state="translated">この変更により、3.xのノーマルスロットとスコープ付きスロットが統一されました。</target>
        </trans-unit>
        <trans-unit id="649bd7763f809cf2a22e97c4ffc5bb92d06dc2c8" translate="yes" xml:space="preserve">
          <source>This change will not affect &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; users.</source>
          <target state="translated">この変更は、 &lt;code&gt;&amp;lt;template&amp;gt;&lt;/code&gt; ユーザーには影響しません。</target>
        </trans-unit>
        <trans-unit id="552c6085e6177cea581b90083d77773efb3e8be2" translate="yes" xml:space="preserve">
          <source>This class is mostly useful for specifying the transition timing and easing curve, as you&amp;rsquo;ll see below:</source>
          <target state="translated">このクラスは、以下に示すように、遷移のタイミングとイージング曲線を指定するのに最も役立ちます。</target>
        </trans-unit>
        <trans-unit id="4dca719226599c28b606b8514447a1add2ee8926" translate="yes" xml:space="preserve">
          <source>This class is mostly useful for specifying the transition timing and easing curve, as you'll see below:</source>
          <target state="translated">このクラスは、後述するようにトランジションのタイミングやイージングカーブを指定するのに便利なことがほとんどです。</target>
        </trans-unit>
        <trans-unit id="2d0393bc65d6af864ec2bb745213f48992c8218a" translate="yes" xml:space="preserve">
          <source>This component has several responsibilities:</source>
          <target state="translated">このコンポーネントにはいくつかの責任があります。</target>
        </trans-unit>
        <trans-unit id="aece2a4bb40123dcf8dc29a3f56c00b36cd67448" translate="yes" xml:space="preserve">
          <source>This config option is only respected when using the runtime compiler. If you are using the runtime-only build, &lt;code&gt;isCustomElement&lt;/code&gt; must be passed to &lt;code&gt;@vue/compiler-dom&lt;/code&gt; in the build setup instead - for example, via the &lt;a href=&quot;https://vue-loader.vuejs.org/options.html#compileroptions&quot;&gt;&lt;code&gt;compilerOptions&lt;/code&gt; option in vue-loader (opens new window)&lt;/a&gt;.</source>
          <target state="translated">この構成オプションは、ランタイムコンパイラを使用する場合にのみ尊重されます。ランタイムのみのビルドを使用している場合は、代わりにビルドセットアップで &lt;code&gt;isCustomElement&lt;/code&gt; を &lt;code&gt;@vue/compiler-dom&lt;/code&gt; に渡す必要があります-たとえば、&lt;a href=&quot;https://vue-loader.vuejs.org/options.html#compileroptions&quot;&gt;vue-loaderの&lt;/a&gt; &lt;code&gt;compilerOptions&lt;/code&gt; オプションを介して（新しいウィンドウを開きます）。</target>
        </trans-unit>
        <trans-unit id="73218ffb3cfb7afab06eea57271f24ec7aa48d7a" translate="yes" xml:space="preserve">
          <source>This config option was introduced with the intention to support native custom elements, so the renaming better conveys what it does. The new option also expects a function which provides more flexibility than the old string / RegExp approach:</source>
          <target state="translated">この設定オプションはネイティブのカスタム要素をサポートする意図で導入されました。新しいオプションは、古い文字列/RegExp のアプローチよりも柔軟性を提供する関数も期待しています。</target>
        </trans-unit>
        <trans-unit id="9178232fdf5ceab5e71cd384ec980a517e8bd826" translate="yes" xml:space="preserve">
          <source>This could be fixed by iterating over a computed property instead, like this:</source>
          <target state="translated">これは、次のように計算されたプロパティを繰り返し処理することで修正できます。</target>
        </trans-unit>
        <trans-unit id="a64fb541d6cf03a309471b66f62b3cc4e9df105f" translate="yes" xml:space="preserve">
          <source>This could be rewritten with JavaScript&amp;rsquo;s &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt; in a render function:</source>
          <target state="translated">これには、JavaScriptので書き換えることができ &lt;code&gt;if&lt;/code&gt; / &lt;code&gt;else&lt;/code&gt; と &lt;code&gt;map&lt;/code&gt; レンダリング機能で：</target>
        </trans-unit>
        <trans-unit id="8724d06123a948287362546d838692c2aa5506c2" translate="yes" xml:space="preserve">
          <source>This could be rewritten with JavaScript's &lt;code&gt;if&lt;/code&gt;/&lt;code&gt;else&lt;/code&gt; and &lt;code&gt;map()&lt;/code&gt; in a render function:</source>
          <target state="translated">これは、レンダリング関数でJavaScriptの &lt;code&gt;if&lt;/code&gt; / &lt;code&gt;else&lt;/code&gt; と &lt;code&gt;map()&lt;/code&gt; を使用して書き直すことができます。</target>
        </trans-unit>
        <trans-unit id="dc281e6afa265cb93fadcfb1141b35d1dc6b8178" translate="yes" xml:space="preserve">
          <source>This default mode is efficient, but &lt;strong&gt;only suitable when your list render output does not rely on child component state or temporary DOM state (e.g. form input values)&lt;/strong&gt;.</source>
          <target state="translated">このデフォルトモードは効率的ですが&lt;strong&gt;、リストレンダー出力が子コンポーネントの状態または一時的なDOM状態（フォーム入力値など）に依存しない場合にのみ適しています&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="83c6bcc5ab3c17077a142a2b9547158e591eb788" translate="yes" xml:space="preserve">
          <source>This directive triggers transitions when its condition changes.</source>
          <target state="translated">このディレクティブは、状態が変化したときにトランジションをトリガします。</target>
        </trans-unit>
        <trans-unit id="bcf9f3835622e83dc060967041ab679cca48d307" translate="yes" xml:space="preserve">
          <source>This directive will remain on the element until the associated Vue instance finishes compilation. Combined with CSS rules such as &lt;code&gt;[v-cloak] { display: none }&lt;/code&gt;, this directive can be used to hide un-compiled mustache bindings until the Vue instance is ready.</source>
          <target state="translated">このディレクティブは、関連付けられたVueインスタンスがコンパイルを完了するまで要素に残ります。 &lt;code&gt;[v-cloak] { display: none }&lt;/code&gt; などのCSSルールと組み合わせると、このディレクティブを使用して、Vueインスタンスの準備が整うまで、コンパイルされていない口ひげバインディングを非表示にすることができます。</target>
        </trans-unit>
        <trans-unit id="b59796a2504047463e100abad78dff5eab523d76" translate="yes" xml:space="preserve">
          <source>This directive will remain on the element until the associated component instance finishes compilation. Combined with CSS rules such as &lt;code&gt;[v-cloak] { display: none }&lt;/code&gt;, this directive can be used to hide un-compiled mustache bindings until the component instance is ready.</source>
          <target state="translated">このディレクティブは、関連するコンポーネントインスタンスがコンパイルを完了するまで要素に残ります。 &lt;code&gt;[v-cloak] { display: none }&lt;/code&gt; などのCSSルールと組み合わせると、このディレクティブを使用して、コンポーネントインスタンスの準備ができるまで、コンパイルされていない口ひげのバインディングを非表示にできます。</target>
        </trans-unit>
        <trans-unit id="3e343af564058d721599d1f9e8b019d300435ac7" translate="yes" xml:space="preserve">
          <source>This does not mean the component is only used in a single page, but it will only be used once &lt;em&gt;per page&lt;/em&gt;. These components never accept any props, since they are specific to your app, not their context within your app. If you find the need to add props, it&amp;rsquo;s a good indication that this is actually a reusable component that is only used once per page &lt;em&gt;for now&lt;/em&gt;.</source>
          <target state="translated">これは、コンポーネントが単一のページでのみ使用されるという意味ではありませんが、ページ&lt;em&gt;ごとに1&lt;/em&gt;回だけ使用され&lt;em&gt;ます&lt;/em&gt;。これらのコンポーネントは、アプリ内のコンテキストではなく、アプリに固有であるため、小道具を受け入れません。小道具を追加する必要がある場合は、これが実際には&lt;em&gt;現在、&lt;/em&gt;ページごとに1回だけ使用される再利用可能なコンポーネントであることを示しています。</target>
        </trans-unit>
        <trans-unit id="afef3dbc4c5bebfc4611fe4a8f42fd4e1a888122" translate="yes" xml:space="preserve">
          <source>This does not mean the component is only used in a single page, but it will only be used once &lt;em&gt;per page&lt;/em&gt;. These components never accept any props, since they are specific to your app, not their context within your app. If you find the need to add props, it's a good indication that this is actually a reusable component that is only used once per page &lt;em&gt;for now&lt;/em&gt;.</source>
          <target state="translated">これは、コンポーネントが1ページでのみ使用されることを意味するのではなく、ページ&lt;em&gt;ごとに1&lt;/em&gt;回だけ使用され&lt;em&gt;ます&lt;/em&gt;。これらのコンポーネントは、アプリ内のコンテキストではなく、アプリに固有であるため、小道具を受け入れることはありません。小道具を追加する必要がある場合は、これが実際には再利用可能なコンポーネントであり&lt;em&gt;、現時点で&lt;/em&gt;はページごとに1回だけ使用されていることを示しています。</target>
        </trans-unit>
        <trans-unit id="59e804cfdea5616facc606f041bd1ea03ee103fc" translate="yes" xml:space="preserve">
          <source>This doesn't require any build setup, works in all browsers, is not subject to any in-DOM HTML parsing caveats (e.g. you can use camelCase prop names), and provides proper syntax highlighting in most IDEs. In traditional server-side frameworks, these templates can be split out into server template partials (included into the main HTML template) for better maintainability.</source>
          <target state="translated">これは、ビルドの設定を必要とせず、すべてのブラウザで動作し、in-DOM HTML 解析の注意点(キャメルケースのプロップ名を使用できるなど)の影響を受けず、ほとんどの IDE で適切な構文のハイライトを提供します。従来のサーバーサイドのフレームワークでは、これらのテンプレートは、メンテナンス性を向上させるために、サーバーテンプレートのパーシャル(メインの HTML テンプレートに含まれる)に分割することができます。</target>
        </trans-unit>
        <trans-unit id="3fce486eed9d8f23629bf0a56e96e4d92ed9c422" translate="yes" xml:space="preserve">
          <source>This essentially means the &lt;code&gt;Transition&lt;/code&gt; component only gets imported when the application actually makes use of it. In other words, if the application doesn&amp;rsquo;t have any &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; component, the code supporting this feature will not be present in the final bundle.</source>
          <target state="translated">これは基本的に、 &lt;code&gt;Transition&lt;/code&gt; コンポーネントは、アプリケーションが実際にそれを使用する場合にのみインポートされることを意味します。つまり、アプリケーションに &lt;code&gt;&amp;lt;transition&amp;gt;&lt;/code&gt; コンポーネントがない場合、この機能をサポートするコードは最終バンドルに含まれません。</target>
        </trans-unit>
        <trans-unit id="045411f2b2e7825926721bc11467177b95eff687" translate="yes" xml:space="preserve">
          <source>This even applies to all subcomponents, meaning all three of these components will also be available &lt;em&gt;inside each other&lt;/em&gt;.</source>
          <target state="translated">これは、すべてのサブコンポーネントにも当てはまります。つまり、これらの3つのコンポーネントはすべて&lt;em&gt;相互&lt;/em&gt;に使用できます。</target>
        </trans-unit>
        <trans-unit id="82b2832a220d04d77924bc1b878abfa24eacde86" translate="yes" xml:space="preserve">
          <source>This example demonstrates that we can bind data to not only text and attributes, but also the &lt;strong&gt;structure&lt;/strong&gt; of the DOM. Moreover, Vue also provides a powerful transition effect system that can automatically apply &lt;a href=&quot;guide/transitions&quot;&gt;transition effects&lt;/a&gt; when elements are inserted/updated/removed by Vue.</source>
          <target state="translated">この例は、テキストと属性だけでなく、DOMの&lt;strong&gt;構造&lt;/strong&gt;にもデータをバインドできることを示しています。さらに、Vueは、要素がVueによって挿入/更新/削除されたときに&lt;a href=&quot;guide/transitions&quot;&gt;トランジションエフェクトを&lt;/a&gt;自動的に適用できる強力なトランジションエフェクトシステムも提供します。</target>
        </trans-unit>
        <trans-unit id="3d8a463b1eeae83ef20ecb7a8b09fb17e84fd6a5" translate="yes" xml:space="preserve">
          <source>This example demonstrates that we can bind data to not only text and attributes, but also the &lt;strong&gt;structure&lt;/strong&gt; of the DOM. Moreover, Vue also provides a powerful transition effect system that can automatically apply &lt;a href=&quot;guide/transitions-enterleave&quot;&gt;transition effects&lt;/a&gt; when elements are inserted/updated/removed by Vue.</source>
          <target state="translated">この例は、データをテキストと属性だけでなく、DOMの&lt;strong&gt;構造&lt;/strong&gt;にもバインドできることを示しています。さらに、Vueは、要素がVueによって挿入/更新/削除されたときに、&lt;a href=&quot;guide/transitions-enterleave&quot;&gt;遷移効果を&lt;/a&gt;自動的に適用できる強力な遷移効果システムも提供します。</target>
        </trans-unit>
        <trans-unit id="6bd36e959ee70eedf0f7070f7e82b61d04b69506" translate="yes" xml:space="preserve">
          <source>This feature will no longer be supported.</source>
          <target state="translated">この機能はサポートされなくなります。</target>
        </trans-unit>
        <trans-unit id="8f756a442b07c0ee7ffd2de4e5fb79100b7f5952" translate="yes" xml:space="preserve">
          <source>This function will receive a &lt;code&gt;key&lt;/code&gt; string, which we will use to look up the translated string in the user-provided options.</source>
          <target state="translated">この関数は &lt;code&gt;key&lt;/code&gt; 文字列を受け取ります。これを使用して、ユーザーが指定したオプションで翻訳された文字列を検索します。</target>
        </trans-unit>
        <trans-unit id="28f4e1203d764412549f6b1974ffcd1631f009dd" translate="yes" xml:space="preserve">
          <source>This gives you more complete control over the reactive properties you&amp;rsquo;d like to watch.</source>
          <target state="translated">これにより、監視したい反応特性をより完全に制御できます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
