<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="openjdk">
    <body>
      <group id="openjdk">
        <trans-unit id="7b714ebd6de634fdba1f86515ab4bd0e35c46a23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DragSourceDragEvent&lt;/code&gt; is delivered from the &lt;code&gt;DragSourceContextPeer&lt;/code&gt;, via the &lt;code&gt;DragSourceContext&lt;/code&gt;, to the &lt;code&gt;DragSourceListener&lt;/code&gt; registered with that &lt;code&gt;DragSourceContext&lt;/code&gt; and with its associated &lt;code&gt;DragSource&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DragSourceDragEvent&lt;/code&gt; から送達される &lt;code&gt;DragSourceContextPeer&lt;/code&gt; 、経由 &lt;code&gt;DragSourceContext&lt;/code&gt; に &lt;code&gt;DragSourceListener&lt;/code&gt; それに登録され &lt;code&gt;DragSourceContext&lt;/code&gt; およびそれに関連して &lt;code&gt;DragSource&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d31b1878f6e04bbd66b12f6d210c8503298cea5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DragSourceDragEvent&lt;/code&gt; reports the</source>
          <target state="translated">&lt;code&gt;DragSourceDragEvent&lt;/code&gt; 報告します</target>
        </trans-unit>
        <trans-unit id="ac52ab45dff423a52b65a99453d257e77b17e615" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DragSourceDropEvent&lt;/code&gt; is delivered from the &lt;code&gt;DragSourceContextPeer&lt;/code&gt;, via the &lt;code&gt;DragSourceContext&lt;/code&gt;, to the &lt;code&gt;dragDropEnd&lt;/code&gt; method of &lt;code&gt;DragSourceListener&lt;/code&gt;s registered with that &lt;code&gt;DragSourceContext&lt;/code&gt; and with its associated &lt;code&gt;DragSource&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DragSourceDropEvent&lt;/code&gt; から送達される &lt;code&gt;DragSourceContextPeer&lt;/code&gt; を介して、 &lt;code&gt;DragSourceContext&lt;/code&gt; に、 &lt;code&gt;dragDropEnd&lt;/code&gt; 方法 &lt;code&gt;DragSourceListener&lt;/code&gt; それに登録S &lt;code&gt;DragSourceContext&lt;/code&gt; およびそれに関連して &lt;code&gt;DragSource&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7e677218ceda78bbf903d55fdd8613920724c58b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DragSourceDropEvent&lt;/code&gt; is delivered from the &lt;code&gt;DragSourceContextPeer&lt;/code&gt;, via the &lt;code&gt;DragSourceContext&lt;/code&gt;, to the &lt;code&gt;dragDropEnd&lt;/code&gt; method of &lt;code&gt;DragSourceListener&lt;/code&gt;s registered with that &lt;code&gt;DragSourceContext&lt;/code&gt; and with its associated &lt;code&gt;DragSource&lt;/code&gt;. It contains sufficient information for the originator of the operation to provide appropriate feedback to the end user when the operation completes.</source>
          <target state="translated">&lt;code&gt;DragSourceDropEvent&lt;/code&gt; から送達される &lt;code&gt;DragSourceContextPeer&lt;/code&gt; を介して、 &lt;code&gt;DragSourceContext&lt;/code&gt; に、 &lt;code&gt;dragDropEnd&lt;/code&gt; 方法 &lt;code&gt;DragSourceListener&lt;/code&gt; それに登録S &lt;code&gt;DragSourceContext&lt;/code&gt; およびそれに関連して &lt;code&gt;DragSource&lt;/code&gt; 。これには、操作の開始者が操作の完了時にエンドユーザーに適切なフィードバックを提供するための十分な情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="e9e3418fc8cdd49330b7f79abdc8904fb8722d38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DragSourceListener&lt;/code&gt; defines the event interface for originators of Drag and Drop operations to track the state of the user's gesture, and to provide appropriate &quot;drag over&quot; feedback to the user throughout the Drag and Drop operation.</source>
          <target state="translated">&lt;code&gt;DragSourceListener&lt;/code&gt; ユーザのジェスチャーの状態を追跡するために、ドラッグアンドドロップ操作を通して、ユーザにフィードバック適切な「オーバードラッグ」を提供するために、ドラッグ＆ドロップ操作に関するオリジネータのイベントインタフェースを定義します。</target>
        </trans-unit>
        <trans-unit id="2f2d9115dd61845a24deb87877d315f3a9e4f165" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTarget&lt;/code&gt; is associated with a &lt;code&gt;Component&lt;/code&gt; when that &lt;code&gt;Component&lt;/code&gt; wishes to accept drops during Drag and Drop operations.</source>
          <target state="translated">&lt;code&gt;DropTarget&lt;/code&gt; には関連付けられている &lt;code&gt;Component&lt;/code&gt; その場合 &lt;code&gt;Component&lt;/code&gt; ドラッグアンドドロップ操作中に液滴を受け入れることを望みます。</target>
        </trans-unit>
        <trans-unit id="fc9ceb54981fdaa5275f1c3158775b7713926c80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTargetContext&lt;/code&gt; associated with this &lt;code&gt;DropTargetEvent&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;DropTargetContext&lt;/code&gt; 関連付けられた &lt;code&gt;DropTargetEvent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3ffbaf633173a302e98991243b9280a1d21067be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTargetDragEvent&lt;/code&gt; is delivered to a &lt;code&gt;DropTargetListener&lt;/code&gt; via its dragEnter() and dragOver() methods.</source>
          <target state="translated">&lt;code&gt;DropTargetDragEvent&lt;/code&gt; に配信され &lt;code&gt;DropTargetListener&lt;/code&gt; そののdragEnter（）とのdragOver（）メソッドを介し。</target>
        </trans-unit>
        <trans-unit id="7ca6b065fdcfefbc58d586632c9621c6336c3140" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTargetDragEvent&lt;/code&gt; reports the</source>
          <target state="translated">&lt;code&gt;DropTargetDragEvent&lt;/code&gt; 報告します</target>
        </trans-unit>
        <trans-unit id="8cd604ebcf28e38aaec8a020404fd0ed59cb3f44" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTargetDropEvent&lt;/code&gt; is delivered via the &lt;code&gt;DropTargetListener&lt;/code&gt; drop() method.</source>
          <target state="translated">&lt;code&gt;DropTargetDropEvent&lt;/code&gt; のを経由して配信され &lt;code&gt;DropTargetListener&lt;/code&gt; 降下（）メソッド。</target>
        </trans-unit>
        <trans-unit id="a7b814023f405a37ab935e9af73364cf929626ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTargetDropEvent&lt;/code&gt; reports the</source>
          <target state="translated">&lt;code&gt;DropTargetDropEvent&lt;/code&gt; のは報告します</target>
        </trans-unit>
        <trans-unit id="777f975ce845ccbaea28145926d0360d15d674cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTargetEvent&lt;/code&gt; is the base class for both the &lt;code&gt;DropTargetDragEvent&lt;/code&gt; and the &lt;code&gt;DropTargetDropEvent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DropTargetEvent&lt;/code&gt; には、両方の基本クラスです &lt;code&gt;DropTargetDragEvent&lt;/code&gt; と &lt;code&gt;DropTargetDropEvent&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="5c3d2978f393b9a45819d66b22c6fef1c3b101b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTargetEvent&lt;/code&gt; is the base class for both the &lt;code&gt;DropTargetDragEvent&lt;/code&gt; and the &lt;code&gt;DropTargetDropEvent&lt;/code&gt;. It encapsulates the current state of the Drag and Drop operations, in particular the current &lt;code&gt;DropTargetContext&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DropTargetEvent&lt;/code&gt; には、両方の基本クラスです &lt;code&gt;DropTargetDragEvent&lt;/code&gt; と &lt;code&gt;DropTargetDropEvent&lt;/code&gt; の。ドラッグアンドドロップ操作の現在の状態、特に現在の &lt;code&gt;DropTargetContext&lt;/code&gt; をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="d6f8032621bbb9de280649cd020af9e49c6c9b9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTargetListener&lt;/code&gt; interface is the callback interface used by the &lt;code&gt;DropTarget&lt;/code&gt; class to provide notification of DnD operations that involve the subject &lt;code&gt;DropTarget&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DropTargetListener&lt;/code&gt; インタフェースは、で使用されるコールバックインタフェースである &lt;code&gt;DropTarget&lt;/code&gt; は被写体含むDnD操作の通知を提供するクラス &lt;code&gt;DropTarget&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1ad4dc5e388ca41872cef2cc6ae867a25a15ca6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DropTargetListener&lt;/code&gt; interface is the callback interface used by the &lt;code&gt;DropTarget&lt;/code&gt; class to provide notification of DnD operations that involve the subject &lt;code&gt;DropTarget&lt;/code&gt;. Methods of this interface may be implemented to provide &quot;drag under&quot; visual feedback to the user throughout the Drag and Drop operation.</source>
          <target state="translated">&lt;code&gt;DropTargetListener&lt;/code&gt; インタフェースは、で使用されるコールバックインタフェースである &lt;code&gt;DropTarget&lt;/code&gt; は被写体含むDnD操作の通知を提供するクラス &lt;code&gt;DropTarget&lt;/code&gt; 。このインターフェースのメソッドは、ドラッグアンドドロップ操作全体を通してユーザーに「下にドラッグ」する視覚的フィードバックを提供するために実装することができます。</target>
        </trans-unit>
        <trans-unit id="b3b11f7c76e4ccfcb4d3d6f6066f5eb2401835a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DynamicLinker&lt;/code&gt; objects created by &lt;code&gt;DynamicLinkerFactory&lt;/code&gt; by default contain an internal instance of &lt;code&gt;BeansLinker&lt;/code&gt;, which is a language-specific linker that implements the usual Java semantics for all of the above operations and can link any Java object that no other language-specific linker has managed to link. This way, all language runtimes have built-in interoperability with ordinary Java objects. See &lt;a href=&quot;jdk/dynalink/beans/beanslinker&quot;&gt;&lt;code&gt;BeansLinker&lt;/code&gt;&lt;/a&gt; for details on how it links the various operations.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd923e66451c09da1d3d4e1f6626a2df5c8337ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ENGINE_SCOPE&lt;/code&gt;&lt;code&gt;Bindings&lt;/code&gt; of the &lt;code&gt;ScriptContext&lt;/code&gt; contains the bindings of scripting variables to application objects to be used during this script execution.</source>
          <target state="translated">&lt;code&gt;ENGINE_SCOPE&lt;/code&gt; &lt;code&gt;Bindings&lt;/code&gt; の &lt;code&gt;ScriptContext&lt;/code&gt; アプリケーションオブジェクトへのスクリプト変数のバインディングは、このスクリプトの実行中に使用することが含まれています。</target>
        </trans-unit>
        <trans-unit id="7ac2a2597218d88488760abbe3572d583515c44b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ERA&lt;/code&gt; field returns a range for the one valid Hijrah era.</source>
          <target state="translated">&lt;code&gt;ERA&lt;/code&gt; のフィールドは1つの、有効なHijrah時代の範囲を返します。</target>
        </trans-unit>
        <trans-unit id="1a7ce34ce162da4ee98566ed04babff39297325b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Element&lt;/code&gt; interface represents an element in an HTML or XML document.</source>
          <target state="translated">&lt;code&gt;Element&lt;/code&gt; インタフェースは、HTMLやXML文書内の要素を表しています。</target>
        </trans-unit>
        <trans-unit id="56f8e7cbe7fedd44e71cad4abca86307c32d940a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Element&lt;/code&gt; interface represents an element in an HTML or XML document. Elements may have attributes associated with them; since the &lt;code&gt;Element&lt;/code&gt; interface inherits from &lt;code&gt;Node&lt;/code&gt;, the generic &lt;code&gt;Node&lt;/code&gt; interface attribute &lt;code&gt;attributes&lt;/code&gt; may be used to retrieve the set of all attributes for an element. There are methods on the &lt;code&gt;Element&lt;/code&gt; interface to retrieve either an &lt;code&gt;Attr&lt;/code&gt; object by name or an attribute value by name. In XML, where an attribute value may contain entity references, an &lt;code&gt;Attr&lt;/code&gt; object should be retrieved to examine the possibly fairly complex sub-tree representing the attribute value. On the other hand, in HTML, where all attributes have simple string values, methods to directly access an attribute value can safely be used as a convenience.</source>
          <target state="translated">&lt;code&gt;Element&lt;/code&gt; インタフェースは、HTMLやXML文書内の要素を表しています。要素には属性が関連付けられている場合があります。 &lt;code&gt;Element&lt;/code&gt; インターフェースは &lt;code&gt;Node&lt;/code&gt; を継承するため、汎用の &lt;code&gt;Node&lt;/code&gt; インターフェース属性 &lt;code&gt;attributes&lt;/code&gt; を使用して、要素のすべての属性のセットを取得できます。 &lt;code&gt;Element&lt;/code&gt; インターフェースには、名前で &lt;code&gt;Attr&lt;/code&gt; オブジェクトまたは名前で属性値を取得するメソッドがあります。属性値は、実体参照を含むことがXMLでは、 &lt;code&gt;Attr&lt;/code&gt; のオブジェクトを取得して、属性値を表すかなり複雑なサブツリーを調べる必要があります。一方、すべての属性が単純な文字列値を持つHTMLでは、属性値に直接アクセスするメソッドを便利に使用できます。</target>
        </trans-unit>
        <trans-unit id="062646a7a70bae8b386d004ed0c24a7f5febaa0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Element&lt;/code&gt; node this attribute is attached to or &lt;code&gt;null&lt;/code&gt; if this attribute is not in use.</source>
          <target state="translated">&lt;code&gt;Element&lt;/code&gt; ノードは、この属性は、または添付された &lt;code&gt;null&lt;/code&gt; この属性が使用されていない場合。</target>
        </trans-unit>
        <trans-unit id="84d456059a3ae70710ff77987c83f5d3565185be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Element&lt;/code&gt; on which the namespace was in scope when it was requested.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ae505cc529eebac866deb17686d9f4d77dd8e63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Element&lt;/code&gt; on which the namespace was in scope when it was requested. This does not change on a returned namespace node even if the document changes such that the namespace goes out of scope on that element and this node is no longer found there by XPath.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="43f6c56600834b8ccf7f7093afce844b3f3f5fe9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ElementIterator&lt;/code&gt; does no locking of the &lt;code&gt;Element&lt;/code&gt; tree. This means that it does not track any changes. It is the responsibility of the user of this class, to ensure that no changes happen during element iteration.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa0fc8a45db77f0c824cdd5135e6bc6d602e48de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ElementTraversal&lt;/code&gt; interface is a set of read-only attributes which allow an author to easily navigate between elements in a document.</source>
          <target state="translated">&lt;code&gt;ElementTraversal&lt;/code&gt; のインタフェースは、ドキュメント内の要素の間に簡単にナビゲートする著者を可能読み取り専用属性のセットです。</target>
        </trans-unit>
        <trans-unit id="f29a430f06dd21d9a13b377efef42edf2992728c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Ellipse2D&lt;/code&gt; class describes an ellipse that is defined by a framing rectangle.</source>
          <target state="translated">&lt;code&gt;Ellipse2D&lt;/code&gt; クラスは、表示枠矩形によって定義される楕円を記述しています。</target>
        </trans-unit>
        <trans-unit id="0000711917ddc5bd5d5eb440dd34fe945066b5e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Encoding&lt;/code&gt; class is static, so that all &lt;code&gt;AudioFormat&lt;/code&gt; objects that have the same encoding will refer to the same object (rather than different instances of the same class). This allows matches to be made by checking that two format's encodings are equal.</source>
          <target state="translated">&lt;code&gt;Encoding&lt;/code&gt; クラスは、すべてのように、静的である &lt;code&gt;AudioFormat&lt;/code&gt; 同じ符号を持つオブジェクトは、（むしろ、同じクラスの異なるインスタンスよりも）同じオブジェクトを参照します。これにより、2つの形式のエンコーディングが等しいことを確認することで一致を確認できます。</target>
        </trans-unit>
        <trans-unit id="1a1ea0fb7e3f89b73df59f57bc0a3bb25057d04e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Encoding&lt;/code&gt; class names the specific type of data representation used for an audio stream.</source>
          <target state="translated">&lt;code&gt;Encoding&lt;/code&gt; クラスは、オーディオストリームに使用されるデータ表現の特定のタイプ。</target>
        </trans-unit>
        <trans-unit id="579a96ad9bfb2cbe0dbb67099e0bc3e08f52c25e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Encoding&lt;/code&gt; class names the specific type of data representation used for an audio stream. The encoding includes aspects of the sound format other than the number of channels, sample rate, sample size, frame rate, frame size, and byte order.</source>
          <target state="translated">&lt;code&gt;Encoding&lt;/code&gt; クラスは、オーディオストリームに使用されるデータ表現の特定のタイプ。エンコーディングには、チャネル数、サンプルレート、サンプルサイズ、フレームレート、フレームサイズ、およびバイトオーダー以外のサウンド形式の側面が含まれます。</target>
        </trans-unit>
        <trans-unit id="70221ca9234977d1998bbe35ce71cb299b70251c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Event&lt;/code&gt; interface is used to provide contextual information about an event to the handler processing the event.</source>
          <target state="translated">&lt;code&gt;Event&lt;/code&gt; インタフェースは、イベントを処理するハンドラにイベントに関するコンテキスト情報を提供するために使用されます。</target>
        </trans-unit>
        <trans-unit id="ee720903ce1589882e864971326a615e0265b5cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Event&lt;/code&gt; interface is used to provide contextual information about an event to the handler processing the event. An object which implements the &lt;code&gt;Event&lt;/code&gt; interface is generally passed as the first parameter to an event handler. More specific context information is passed to event handlers by deriving additional interfaces from &lt;code&gt;Event&lt;/code&gt; which contain information directly relating to the type of event they accompany. These derived interfaces are also implemented by the object passed to the event listener.</source>
          <target state="translated">&lt;code&gt;Event&lt;/code&gt; インタフェースは、イベントを処理するハンドラにイベントに関するコンテキスト情報を提供するために使用されます。 &lt;code&gt;Event&lt;/code&gt; インターフェイスを実装するオブジェクトは、通常、最初のパラメーターとしてイベントハンドラーに渡されます。付随するイベントのタイプに直接関連する情報を含む追加のインターフェースを &lt;code&gt;Event&lt;/code&gt; から派生させることにより、より具体的なコンテキスト情報がイベントハンドラーに渡されます。これらの派生インターフェイスは、イベントリスナーに渡されるオブジェクトによっても実装されます。</target>
        </trans-unit>
        <trans-unit id="c57bc9aa7ce02ee33576a9afbd97413544332913" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventContext&lt;/code&gt; instance on which you invoke the registration methods is the &lt;em&gt;event source&lt;/em&gt; of the events that are (potentially) generated. The source is &lt;em&gt;not necessarily&lt;/em&gt; the object named by the target. Only when the target is the empty name is the object named by the target the source. In other words, the target, along with the scope parameter, are used to identify the object(s) that the listener is interested in, but the event source is the &lt;code&gt;EventContext&lt;/code&gt; instance with which the listener has registered.</source>
          <target state="translated">&lt;code&gt;EventContext&lt;/code&gt; ご登録メソッドを起動したインスタンスがある&lt;em&gt;イベントソース&lt;/em&gt;（潜在的に）生成されたイベントの。ソースは&lt;em&gt;、必ずしも&lt;/em&gt;ターゲットによって指定されたオブジェクトであるとは&lt;em&gt;限りません&lt;/em&gt;。ターゲットが空の名前である場合のみ、オブジェクトはターゲットによってソース名が付けられます。つまり、スコープパラメータとともにターゲットを使用して、リスナーが関心を持っているオブジェクトを識別しますが、イベントソースは、リスナーが登録した &lt;code&gt;EventContext&lt;/code&gt; インスタンスです。</target>
        </trans-unit>
        <trans-unit id="0401b3ef0ddcd75a11b4100c749b173a19fed9a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventHandler&lt;/code&gt; class is intended to be used by interactive tools, such as application builders, that allow developers to make connections between beans. Typically connections are made from a user interface bean (the event &lt;em&gt;source&lt;/em&gt;) to an application logic bean (the &lt;em&gt;target&lt;/em&gt;). The most effective connections of this kind isolate the application logic from the user interface. For example, the &lt;code&gt;EventHandler&lt;/code&gt; for a connection from a &lt;code&gt;JCheckBox&lt;/code&gt; to a method that accepts a boolean value can deal with extracting the state of the check box and passing it directly to the method so that the method is isolated from the user interface layer.</source>
          <target state="translated">&lt;code&gt;EventHandler&lt;/code&gt; クラスは、開発者がBean間の接続を行うことができ、アプリケーション・ビルダーなどのインタラクティブなツール、で使用されることを意図しています。通常、接続はユーザーインターフェイスBean（イベント&lt;em&gt;ソース&lt;/em&gt;）からアプリケーションロジックBean（&lt;em&gt;ターゲット&lt;/em&gt;）に行われます。この種の最も効果的な接続は、アプリケーションロジックをユーザーインターフェイスから分離します。たとえば、 &lt;code&gt;JCheckBox&lt;/code&gt; からブール値を受け入れるメソッドへの接続の &lt;code&gt;EventHandler&lt;/code&gt; は、チェックボックスの状態を抽出し、それをメソッドに直接渡すことで、メソッドがユーザーインターフェイス層から分離されるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="0a0c2cb5421950ae7ac855868e35820ff6dd57b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventHandler&lt;/code&gt; class provides support for dynamically generating event listeners whose methods execute a simple statement involving an incoming event object and a target object.</source>
          <target state="translated">&lt;code&gt;EventHandler&lt;/code&gt; クラスは、動的にメソッドを持つ受信イベントオブジェクトとターゲットオブジェクトを含んだ単純な文を実行するイベントリスナーを生成するためのサポートを提供します。</target>
        </trans-unit>
        <trans-unit id="5746368fd39e97ecb130eef1d44079c51b10dd57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventListener&lt;/code&gt; interface is the primary method for handling events.</source>
          <target state="translated">&lt;code&gt;EventListener&lt;/code&gt; インタフェースは、イベントを処理するための主要な方法です。</target>
        </trans-unit>
        <trans-unit id="d5b8044a35f1030045e0fcb4786dab202a677cc3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventListener&lt;/code&gt; interface is the primary method for handling events. Users implement the &lt;code&gt;EventListener&lt;/code&gt; interface and register their listener on an &lt;code&gt;EventTarget&lt;/code&gt; using the &lt;code&gt;AddEventListener&lt;/code&gt; method. The users should also remove their &lt;code&gt;EventListener&lt;/code&gt; from its &lt;code&gt;EventTarget&lt;/code&gt; after they have completed using the listener.</source>
          <target state="translated">&lt;code&gt;EventListener&lt;/code&gt; インタフェースは、イベントを処理するための主要な方法です。ユーザーは &lt;code&gt;EventListener&lt;/code&gt; インターフェースを実装し、 &lt;code&gt;AddEventListener&lt;/code&gt; メソッドを &lt;code&gt;EventTarget&lt;/code&gt; してリスナーをEventTargetに登録します。また、ユーザーは、リスナーの使用が完了した後、 &lt;code&gt;EventTarget&lt;/code&gt; から &lt;code&gt;EventListener&lt;/code&gt; を削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="3ef13e78574db68f3020a464f6de3488bb77bb37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventQueueMonitor&lt;/code&gt; class provides key core functionality for Assistive Technologies (and other system-level technologies that need some of the same things that Assistive Technology needs).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="eba9a866ee0aa85057bfaa47d775f6b70445832f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventTarget&lt;/code&gt; interface is implemented by all &lt;code&gt;Nodes&lt;/code&gt; in an implementation which supports the DOM Event Model.</source>
          <target state="translated">&lt;code&gt;EventTarget&lt;/code&gt; のインタフェースはすべてによって実装され &lt;code&gt;Nodes&lt;/code&gt; DOMイベントモデルをサポートする実装に。</target>
        </trans-unit>
        <trans-unit id="2b0f81e17db7dd6a51dcbe255542568c5bc70c5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;EventTarget&lt;/code&gt; interface is implemented by all &lt;code&gt;Nodes&lt;/code&gt; in an implementation which supports the DOM Event Model. Therefore, this interface can be obtained by using binding-specific casting methods on an instance of the &lt;code&gt;Node&lt;/code&gt; interface. The interface allows registration and removal of &lt;code&gt;EventListeners&lt;/code&gt; on an &lt;code&gt;EventTarget&lt;/code&gt; and dispatch of events to that &lt;code&gt;EventTarget&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;EventTarget&lt;/code&gt; のインタフェースはすべてによって実装され &lt;code&gt;Nodes&lt;/code&gt; DOMイベントモデルをサポートする実装に。したがって、このインターフェイスは、 &lt;code&gt;Node&lt;/code&gt; インターフェイスのインスタンスでバインディング固有のキャストメソッドを使用して取得できます。このインターフェースにより、 &lt;code&gt;EventTarget&lt;/code&gt; での &lt;code&gt;EventListeners&lt;/code&gt; 登録と削除、およびその &lt;code&gt;EventTarget&lt;/code&gt; へのイベントのディスパッチが可能になります。</target>
        </trans-unit>
        <trans-unit id="18ab01a7844cde2885367a84cc967515963ae74d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Executable&lt;/code&gt; declaring this parameter.</source>
          <target state="translated">&lt;code&gt;Executable&lt;/code&gt; このパラメータを宣言します。</target>
        </trans-unit>
        <trans-unit id="7e179cf148b7b9faaffa085aae387466fa8e5482" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ExecutionControl&lt;/code&gt; spec is the &lt;code&gt;ExecutionControlProvider&lt;/code&gt; name optionally followed by a parameter specification. The syntax of the spec is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="748442734a6da04d6ba765d11eb14f744d0ff842" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Executor&lt;/code&gt; implementations provided in this package implement &lt;a href=&quot;executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt;, which is a more extensive interface. The &lt;a href=&quot;threadpoolexecutor&quot;&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/a&gt; class provides an extensible thread pool implementation. The &lt;a href=&quot;executors&quot;&gt;&lt;code&gt;Executors&lt;/code&gt;&lt;/a&gt; class provides convenient factory methods for these Executors.</source>
          <target state="translated">&lt;code&gt;Executor&lt;/code&gt; このパッケージに設けられた実装は、実装&lt;a href=&quot;executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; の&lt;/a&gt;より広範なインターフェースです。&lt;a href=&quot;threadpoolexecutor&quot;&gt; &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; の&lt;/a&gt;クラスは、拡張可能なスレッドプールの実装を提供します。&lt;a href=&quot;executors&quot;&gt; &lt;code&gt;Executors&lt;/code&gt; &lt;/a&gt;クラスは、これらのエグゼキューターのための便利なファクトリメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="fe186b84d49128ed73233864d2f5883a88dc0260" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FORM&lt;/code&gt; element encompasses behavior similar to a collection and an element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0a5c0b1147aa12b75064b100c3d28e5fd19d2f41" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FORM&lt;/code&gt; element encompasses behavior similar to a collection and an element. It provides direct access to the contained input elements as well as the attributes of the form element. See the FORM element definition in HTML 4.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cd7831d464cae2caf35d14c49bf37dcbd50928ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileDialog&lt;/code&gt; class displays a dialog window from which the user can select a file.</source>
          <target state="translated">&lt;code&gt;FileDialog&lt;/code&gt; クラスは、ユーザーがファイルを選択できるダイアログウィンドウを表示します。</target>
        </trans-unit>
        <trans-unit id="104e889b683697e2a1535a79c04ec73d00af897b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; can either write to a specified file, or it can write to a rotating set of files.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; のは、指定したファイルのいずれかの書き込みは、またはそれは、ファイルの回転セットに書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="c629d1686ef85f09a631d3c6d79e16eb2130db7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to no limit, and the file count is set to one.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; をに基づいて構成されている &lt;code&gt;LogManager&lt;/code&gt; 所定のパターンの引数は、ファイル名のパターンとして使用することを除いてプロパティ（またはそのデフォルト値）、ファイルの制限は、制限なしに設定され、ファイル数が1に設定されています。</target>
        </trans-unit>
        <trans-unit id="1630482434078ed5febe3695c2cacb2c6ab11a76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to no limit, the file count is set to one, and the append mode is set to the given &lt;code&gt;append&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; は、に基づいて構成されている &lt;code&gt;LogManager&lt;/code&gt; ファイル制限を無制限に設定され、ファイル数が1に設定され、追加モードが設定され、所定のパターンの引数がファイル名のパターンとして使用することを除いてプロパティ（またはそのデフォルト値）与えられた &lt;code&gt;append&lt;/code&gt; 引数に。</target>
        </trans-unit>
        <trans-unit id="87b15897d52aed2848665ab23e99dca1351949cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to the limit argument, and the file count is set to the given count argument, and the append mode is set to the given &lt;code&gt;append&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; は、に基づいて構成されている &lt;code&gt;LogManager&lt;/code&gt; 所定のパターン引数がファイル名のパターンとして使用されること、ファイルの制限を制限引数に設定され、ファイル・カウントが所定のカウント引数に設定されている以外のプロパティ（またはそのデフォルト値）、及び追加モードは、指定された &lt;code&gt;append&lt;/code&gt; 引数に設定されます。</target>
        </trans-unit>
        <trans-unit id="a5f603ee32e4c43503a06a42f3d23eed55051d61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given pattern argument is used as the filename pattern, the file limit is set to the limit argument, and the file count is set to the given count argument.</source>
          <target state="translated">&lt;code&gt;FileHandler&lt;/code&gt; をに基づいて構成されている &lt;code&gt;LogManager&lt;/code&gt; 所定のパターンの引数は、ファイル名のパターンとして使用することを除いてプロパティ（またはそのデフォルト値）、ファイルの制限は制限引数に設定され、ファイルカウントが所定のカウント引数に設定されています。</target>
        </trans-unit>
        <trans-unit id="902ce54b56a8a7418be70ecf196fdc6d2abb61f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileReader&lt;/code&gt; is meant for reading streams of characters. For reading streams of raw bytes, consider using a &lt;code&gt;FileInputStream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FileReader&lt;/code&gt; のは、文字のストリームを読み込むためのものです。生のバイトのストリームを読み取るには、 &lt;code&gt;FileInputStream&lt;/code&gt; の使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="5f9400ea004a66e78915fea0425d090fb09491e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FileWriter&lt;/code&gt; is meant for writing streams of characters. For writing streams of raw bytes, consider using a &lt;code&gt;FileOutputStream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FileWriter&lt;/code&gt; は、文字のストリームを書き込むためのものです。rawバイトのストリームを書き込む場合は、 &lt;code&gt;FileOutputStream&lt;/code&gt; の使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="531c96d389a16e6b4a111db536916683b490ba7b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FilteredRowSet&lt;/code&gt; object will use this method internally while inserting new rows to a &lt;code&gt;FilteredRowSet&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;FilteredRowSet&lt;/code&gt; に新しい行を挿入しながら、オブジェクトは内部この方法を使用する &lt;code&gt;FilteredRowSet&lt;/code&gt; インスタンス。</target>
        </trans-unit>
        <trans-unit id="6e9a4cae0012293bcacf3dcfa3a10773c155f830" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FilteredRowSet&lt;/code&gt; range criterion can be modified by applying a new &lt;code&gt;Predicate&lt;/code&gt; object to the &lt;code&gt;FilteredRowSet&lt;/code&gt; instance at any time. This is possible if no additional references to the &lt;code&gt;FilteredRowSet&lt;/code&gt; object are detected. A new filter has an immediate effect on criterion enforcement within the &lt;code&gt;FilteredRowSet&lt;/code&gt; object, and all subsequent views and updates will be subject to similar enforcement.</source>
          <target state="translated">&lt;code&gt;FilteredRowSet&lt;/code&gt; 範囲基準は、新しい適用することにより修飾することができる &lt;code&gt;Predicate&lt;/code&gt; にオブジェクト &lt;code&gt;FilteredRowSet&lt;/code&gt; いつでもインスタンス。これは、 &lt;code&gt;FilteredRowSet&lt;/code&gt; オブジェクトへの追加の参照が検出されない場合に可能です。新しいフィルターは、 &lt;code&gt;FilteredRowSet&lt;/code&gt; オブジェクト内の基準の適用に即座に影響し、後続のすべてのビューと更新は同様の適用の対象になります。</target>
        </trans-unit>
        <trans-unit id="b9c1b7599d17536940e43f4891c13c30e31a414b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FlatteningPathIterator&lt;/code&gt; class returns a flattened view of another &lt;a href=&quot;pathiterator&quot;&gt;&lt;code&gt;PathIterator&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;FlatteningPathIterator&lt;/code&gt; のクラスは別の平坦化されたビューを返し&lt;a href=&quot;pathiterator&quot;&gt; &lt;code&gt;PathIterator&lt;/code&gt; &lt;/a&gt;オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="d6995963af20174a405541621459a4cf42b76b4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FlatteningPathIterator&lt;/code&gt; class returns a flattened view of another &lt;a href=&quot;pathiterator&quot;&gt;&lt;code&gt;PathIterator&lt;/code&gt;&lt;/a&gt; object. Other &lt;a href=&quot;../shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; classes can use this class to provide flattening behavior for their paths without having to perform the interpolation calculations themselves.</source>
          <target state="translated">&lt;code&gt;FlatteningPathIterator&lt;/code&gt; のクラスは別の平坦化されたビューを返し&lt;a href=&quot;pathiterator&quot;&gt; &lt;code&gt;PathIterator&lt;/code&gt; &lt;/a&gt;オブジェクトを。他の&lt;a href=&quot;../shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt;クラスは、このクラスを使用して、補間計算を自分で実行することなく、パスの平坦化動作を提供できます。</target>
        </trans-unit>
        <trans-unit id="bbd40c49bd8d9a7324ed683644da8ab0fb15dde3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float&lt;/code&gt; class defines a geometric path with coordinates stored in single precision floating point.</source>
          <target state="translated">&lt;code&gt;Float&lt;/code&gt; クラスは、単精度浮動小数点に格納された座標の幾何学的経路を画定します。</target>
        </trans-unit>
        <trans-unit id="72f4f159165d82d4c830d239bd204365474b1049" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float&lt;/code&gt; class defines a point specified in float precision.</source>
          <target state="translated">&lt;code&gt;Float&lt;/code&gt; クラスは、float精度で指定された点を定義しています。</target>
        </trans-unit>
        <trans-unit id="9b4e57310345618e93b471ecd434a01eac973c59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float&lt;/code&gt; class defines a rectangle specified in float coordinates.</source>
          <target state="translated">&lt;code&gt;Float&lt;/code&gt; クラスは、float座標で指定された矩形を定義します。</target>
        </trans-unit>
        <trans-unit id="9cf27054de1ce5624ddd4ab38383b55cc5d816b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float&lt;/code&gt; class defines a rectangle with rounded corners all specified in &lt;code&gt;float&lt;/code&gt; coordinates.</source>
          <target state="translated">&lt;code&gt;Float&lt;/code&gt; クラスは、すべてで指定された丸みを付けた角を持つ矩形を定義する &lt;code&gt;float&lt;/code&gt; 座標。</target>
        </trans-unit>
        <trans-unit id="35ae68551d0b26d10451461d73f146f494eb06cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float&lt;/code&gt; class defines an ellipse specified in &lt;code&gt;float&lt;/code&gt; precision.</source>
          <target state="translated">&lt;code&gt;Float&lt;/code&gt; クラスは、で指定された楕円定義 &lt;code&gt;float&lt;/code&gt; 精度。</target>
        </trans-unit>
        <trans-unit id="d9aef651c660cc7e3ebf06c721651629cdc87d53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;float&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Float&lt;/code&gt; クラスは、プリミティブ型の値ラップ &lt;code&gt;float&lt;/code&gt; オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="faf56435fef80020d3a74b994d56ec27fef71d7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Float&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;float&lt;/code&gt; in an object. An object of type &lt;code&gt;Float&lt;/code&gt; contains a single field whose type is &lt;code&gt;float&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Float&lt;/code&gt; クラスは、プリミティブ型の値ラップ &lt;code&gt;float&lt;/code&gt; オブジェクトです。タイプ &lt;code&gt;Float&lt;/code&gt; のオブジェクトには、タイプが &lt;code&gt;float&lt;/code&gt; の単一フィールドが含まれています。</target>
        </trans-unit>
        <trans-unit id="ff1bf80c3497af61acd8a7e490e0a49fe5769bad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FloatControl&lt;/code&gt; abstract class provides methods to set and get the control's current floating-point value. Other methods obtain the possible range of values and the control's resolution (the smallest increment between returned values). Some float controls allow ramping to a new value over a specified period of time. &lt;code&gt;FloatControl&lt;/code&gt; also includes methods that return string labels for the minimum, maximum, and midpoint positions of the control.</source>
          <target state="translated">&lt;code&gt;FloatControl&lt;/code&gt; abstractクラスは、コントロールの現在の浮動小数点値を設定および取得するためのメソッドを提供します。他のメソッドは、可能な値の範囲とコントロールの解像度（戻り値間の最小の増分）を取得します。一部のフロートコントロールでは、指定した期間にわたって新しい値に傾斜できます。 &lt;code&gt;FloatControl&lt;/code&gt; には、コントロールの最小、最大、および中間点の位置の文字列ラベルを返すメソッドも含まれています。</target>
        </trans-unit>
        <trans-unit id="1cd58efa168d666747712c3d3c73a1908978fecc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FloatControl&lt;/code&gt; class has methods to impose a maximum and minimum allowable value for gain. However, because an audio signal might already be at a high amplitude, the maximum setting does not guarantee that the signal will be undistorted when the gain is applied to it (unless the maximum is zero or negative). To avoid numeric overflow from excessively large gain settings, a gain control can implement clipping, meaning that the signal's amplitude will be limited to the maximum value representable by its audio format, instead of wrapping around.</source>
          <target state="translated">&lt;code&gt;FloatControl&lt;/code&gt; のクラスは、利得の最大値と最小許容値を課す方法を有しています。ただし、オーディオ信号はすでに高い振幅になっている可能性があるため、最大設定では、ゲインが適用されたときに信号が歪んでいないことは保証されません（最大値がゼロまたは負でない限り）。ゲイン設定が過度に大きくなることによる数値のオーバーフローを回避するために、ゲインコントロールはクリッピングを実装できます。つまり、信号の振幅は、折り返すのではなく、オーディオ形式で表現できる最大値に制限されます。</target>
        </trans-unit>
        <trans-unit id="6676912d1268dcad28777c51d6a9607e35cb86ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Font&lt;/code&gt; class defines constants for the logical font names &lt;a href=&quot;../font#DIALOG&quot;&gt;&lt;code&gt;DIALOG&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../font#DIALOG_INPUT&quot;&gt;&lt;code&gt;DIALOG_INPUT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../font#SANS_SERIF&quot;&gt;&lt;code&gt;SANS_SERIF&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../font#SERIF&quot;&gt;&lt;code&gt;SERIF&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../font#MONOSPACED&quot;&gt;&lt;code&gt;MONOSPACED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Font&lt;/code&gt; クラスは、論理フォント名の定数を定義し&lt;a href=&quot;../font#DIALOG&quot;&gt; &lt;code&gt;DIALOG&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../font#DIALOG_INPUT&quot;&gt; &lt;code&gt;DIALOG_INPUT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../font#SANS_SERIF&quot;&gt; &lt;code&gt;SANS_SERIF&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../font#SERIF&quot;&gt; &lt;code&gt;SERIF&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../font#MONOSPACED&quot;&gt; &lt;code&gt;MONOSPACED&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="fb6290e56262770962d96129f1fce82b4b1128c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Font&lt;/code&gt; class represents an instance of a font face from a collection of font faces that are present in the system resources of the host system. As examples, Arial Bold and Courier Bold Italic are font faces. There can be several &lt;code&gt;Font&lt;/code&gt; objects associated with a font face, each differing in size, style, transform and font features.</source>
          <target state="translated">&lt;code&gt;Font&lt;/code&gt; クラスは、ホストシステムのシステムリソースに存在するフォントの顔のコレクションからフォントフェースのインスタンスを表しています。例として、ArialBoldとCourierBoldItalicはフォントフェースです。フォントフェースに関連付けられた複数の &lt;code&gt;Font&lt;/code&gt; オブジェクトがあり、それぞれサイズ、スタイル、変換、およびフォント機能が異なります。</target>
        </trans-unit>
        <trans-unit id="9cd38989c33d64ddfb0afce3f4c2fbf8d931ab29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Font&lt;/code&gt; class represents fonts, which are used to render text in a visible way.</source>
          <target state="translated">&lt;code&gt;Font&lt;/code&gt; クラスは、テキストを目に見える形に描画するために使用されるフォントを表します。</target>
        </trans-unit>
        <trans-unit id="d83ec2e9b9ceac56c5e640c82b8dd8628717bd67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Font&lt;/code&gt; class represents fonts, which are used to render text in a visible way. A font provides the information needed to map sequences of &lt;em&gt;characters&lt;/em&gt; to sequences of &lt;em&gt;glyphs&lt;/em&gt; and to render sequences of glyphs on &lt;code&gt;Graphics&lt;/code&gt; and &lt;code&gt;Component&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;Font&lt;/code&gt; クラスは、テキストを目に見える形に描画するために使用されるフォントを表します。フォントは、&lt;em&gt;文字の&lt;/em&gt;シーケンスを&lt;em&gt;グリフの&lt;/em&gt;シーケンスにマップし、 &lt;code&gt;Graphics&lt;/code&gt; および &lt;code&gt;Component&lt;/code&gt; オブジェクトにグリフのシーケンスをレンダリングするために必要な情報を提供します。</target>
        </trans-unit>
        <trans-unit id="c97092d779c669af47caf3ba85d4f1d8d8967679" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Font&lt;/code&gt; of the &lt;code&gt;Component&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Font&lt;/code&gt; の &lt;code&gt;Component&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="887095c238f859e81a69ba6f7ea7c6cf2748d66d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FontMetrics&lt;/code&gt; class defines a font metrics object, which encapsulates information about the rendering of a particular font on a particular screen.</source>
          <target state="translated">&lt;code&gt;FontMetrics&lt;/code&gt; クラスは、特定の画面上の特定のフォントの描画に関する情報をカプセル化するフォントメトリックオブジェクトを定義します。</target>
        </trans-unit>
        <trans-unit id="44a0a28784457c11b3b91e1981ce7b99133fce43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FontRenderContext&lt;/code&gt; class is a container for the information needed to correctly measure text.</source>
          <target state="translated">&lt;code&gt;FontRenderContext&lt;/code&gt; クラスは、テキストを正確に測定するために必要な情報のコンテナです。</target>
        </trans-unit>
        <trans-unit id="c15f2020faddaf638ec2b9664b545f192fb3ea3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;FontRenderContext&lt;/code&gt; class is a container for the information needed to correctly measure text. The measurement of text can vary because of rules that map outlines to pixels, and rendering hints provided by an application.</source>
          <target state="translated">&lt;code&gt;FontRenderContext&lt;/code&gt; クラスは、テキストを正確に測定するために必要な情報のコンテナです。テキストの測定は、アウトラインをピクセルにマップするルール、およびアプリケーションによって提供されるレンダリングヒントのために異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="85f7d029dde3a2e7afbc7ce6cee578e8429c56f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Formattable&lt;/code&gt; interface must be implemented by any class that needs to perform custom formatting using the &lt;code&gt;'s'&lt;/code&gt; conversion specifier of &lt;a href=&quot;formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Formattable&lt;/code&gt; インターフェースは、ニーズがカスタム使用して書式設定を実行することを任意のクラスで実装しなければならない &lt;code&gt;'s'&lt;/code&gt; の変換指定子&lt;a href=&quot;formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e69e235b1c0bec2bb6332f7a9e5ede6debcaf8ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Formattable&lt;/code&gt; interface must be implemented by any class that needs to perform custom formatting using the &lt;code&gt;'s'&lt;/code&gt; conversion specifier of &lt;a href=&quot;formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt;. This interface allows basic control for formatting arbitrary objects. For example, the following class prints out different representations of a stock's name depending on the flags and length constraints:</source>
          <target state="translated">&lt;code&gt;Formattable&lt;/code&gt; インターフェースは、ニーズがカスタム使用して書式設定を実行することを任意のクラスで実装しなければならない &lt;code&gt;'s'&lt;/code&gt; の変換指定子&lt;a href=&quot;formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt;。このインターフェースにより、任意のオブジェクトをフォーマットするための基本的な制御が可能になります。たとえば、次のクラスは、フラグと長さの制約に応じて、株の名前のさまざまな表現を出力します。</target>
        </trans-unit>
        <trans-unit id="fdc2f6ed9da54144faf7ffc672bbd4b1c6864d1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Formattable&lt;/code&gt; interface must be implemented by any class that needs to perform custom formatting using the &lt;code&gt;'s'&lt;/code&gt; conversion specifier of &lt;a href=&quot;formatter&quot;&gt;&lt;code&gt;Formatter&lt;/code&gt;&lt;/a&gt;. This interface allows basic control for formatting arbitrary objects. For example, the following class prints out different representations of a stock's name depending on the flags and length constraints: &lt;code&gt;import java.nio.CharBuffer;
   import java.util.Formatter;
   import java.util.Formattable;
   import java.util.Locale;
   import static java.util.FormattableFlags.*;

  ...

   public class StockName implements Formattable {
       private String symbol, companyName, frenchCompanyName;
       public StockName(String symbol, String companyName,
                        String frenchCompanyName) {
           ...
       }

       ...

       public void formatTo(Formatter fmt, int f, int width, int precision) {
           StringBuilder sb = new StringBuilder();

           // decide form of name
           String name = companyName;
           if (fmt.locale().equals(Locale.FRANCE))
               name = frenchCompanyName;
           boolean alternate = (f &amp;amp; ALTERNATE) == ALTERNATE;
           boolean usesymbol = alternate || (precision != -1 &amp;amp;&amp;amp; precision &amp;lt; 10);
           String out = (usesymbol ? symbol : name);

           // apply precision
           if (precision == -1 || out.length() &amp;lt; precision) {
               // write it all
               sb.append(out);
           } else {
               sb.append(out.substring(0, precision - 1)).append('*');
           }

           // apply width and justification
           int len = sb.length();
           if (len &amp;lt; width)
               for (int i = 0; i &amp;lt; width - len; i++)
                   if ((f &amp;amp; LEFT_JUSTIFY) == LEFT_JUSTIFY)
                       sb.append(' ');
                   else
                       sb.insert(0, ' ');

           fmt.format(sb.toString());
       }

       public String toString() {
           return String.format(&quot;%s - %s&quot;, symbol, companyName);
       }
   }
 &lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Formattable&lt;/code&gt; インターフェースは、ニーズがカスタム使用して書式設定を実行することを任意のクラスで実装しなければならない &lt;code&gt;'s'&lt;/code&gt; の変換指定子&lt;a href=&quot;formatter&quot;&gt; &lt;code&gt;Formatter&lt;/code&gt; &lt;/a&gt;。このインターフェースにより、任意のオブジェクトをフォーマットするための基本的な制御が可能になります。たとえば、次のクラスは、フラグと長さの制約に応じて、株の名前のさまざまな表現を出力します。 &lt;code&gt;import java.nio.CharBuffer; import java.util.Formatter; import java.util.Formattable; import java.util.Locale; import static java.util.FormattableFlags.*; ... public class StockName implements Formattable { private String symbol, companyName, frenchCompanyName; public StockName(String symbol, String companyName, String frenchCompanyName) { ... } ... public void formatTo(Formatter fmt, int f, int width, int precision) { StringBuilder sb = new StringBuilder(); // decide form of name String name = companyName; if (fmt.locale().equals(Locale.FRANCE)) name = frenchCompanyName; boolean alternate = (f &amp;amp; ALTERNATE) == ALTERNATE; boolean usesymbol = alternate || (precision != -1 &amp;amp;&amp;amp; precision &amp;lt; 10); String out = (usesymbol ? symbol : name); // apply precision if (precision == -1 || out.length() &amp;lt; precision) { // write it all sb.append(out); } else { sb.append(out.substring(0, precision - 1)).append('*'); } // apply width and justification int len = sb.length(); if (len &amp;lt; width) for (int i = 0; i &amp;lt; width - len; i++) if ((f &amp;amp; LEFT_JUSTIFY) == LEFT_JUSTIFY) sb.append(' '); else sb.insert(0, ' '); fmt.format(sb.toString()); } public String toString() { return String.format(&quot;%s - %s&quot;, symbol, companyName); } } &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ded1b8b780654793fea0795f740f95473dfc0b75" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Formatter&lt;/code&gt;'s &quot;tail&quot; string is written to the stream before it is closed. In addition, if the &lt;code&gt;Formatter&lt;/code&gt;'s &quot;head&quot; string has not yet been written to the stream, it will be written before the &quot;tail&quot; string.</source>
          <target state="translated">&lt;code&gt;Formatter&lt;/code&gt; が閉じられる前の「しっぽ&quot;という文字列がストリームに書き込まれます。さらに、 &lt;code&gt;Formatter&lt;/code&gt; の「先頭」文字列がまだストリームに書き込まれていない場合は、「末尾」文字列の前に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="75cc2d6f81ad7d65874276a5e2ad49a582a87e84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Future&lt;/code&gt; interface defines the &lt;a href=&quot;../../util/concurrent/future#cancel(boolean)&quot;&gt;&lt;code&gt;cancel&lt;/code&gt;&lt;/a&gt; method to cancel execution. This causes all threads waiting on the result of the I/O operation to throw &lt;a href=&quot;../../util/concurrent/cancellationexception&quot;&gt;&lt;code&gt;CancellationException&lt;/code&gt;&lt;/a&gt;. Whether the underlying I/O operation can be cancelled is highly implementation specific and therefore not specified. Where cancellation leaves the channel, or the entity to which it is connected, in an inconsistent state, then the channel is put into an implementation specific &lt;em&gt;error state&lt;/em&gt; that prevents further attempts to initiate I/O operations that are</source>
          <target state="translated">&lt;code&gt;Future&lt;/code&gt; インターフェースを定義&lt;a href=&quot;../../util/concurrent/future#cancel(boolean)&quot;&gt; &lt;code&gt;cancel&lt;/code&gt; &lt;/a&gt;実行をキャンセルする方法を。これにより、I / O操作の結果を待機しているすべてのスレッドが&lt;a href=&quot;../../util/concurrent/cancellationexception&quot;&gt; &lt;code&gt;CancellationException&lt;/code&gt; &lt;/a&gt;をスローします。基になるI / O操作をキャンセルできるかどうかは、実装固有であるため、指定されていません。キャンセルによってチャネルまたは接続先のエンティティが不整合な状態になると、チャネルは実装固有の&lt;em&gt;エラー状態になり&lt;/em&gt;、次のようなI / O操作を開始しようとするのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="5f0017742b86bb525c52b44a372868ba47f8c805" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Future&lt;/code&gt; interface defines the &lt;a href=&quot;../../util/concurrent/future#cancel-boolean-&quot;&gt;&lt;code&gt;cancel&lt;/code&gt;&lt;/a&gt; method to cancel execution. This causes all threads waiting on the result of the I/O operation to throw &lt;a href=&quot;../../util/concurrent/cancellationexception&quot;&gt;&lt;code&gt;CancellationException&lt;/code&gt;&lt;/a&gt;. Whether the underlying I/O operation can be cancelled is highly implementation specific and therefore not specified. Where cancellation leaves the channel, or the entity to which it is connected, in an inconsistent state, then the channel is put into an implementation specific &lt;em&gt;error state&lt;/em&gt; that prevents further attempts to initiate I/O operations that are</source>
          <target state="translated">&lt;code&gt;Future&lt;/code&gt; インターフェースを定義&lt;a href=&quot;../../util/concurrent/future#cancel-boolean-&quot;&gt; &lt;code&gt;cancel&lt;/code&gt; &lt;/a&gt;実行をキャンセルする方法を。これにより、I / O操作の結果を待機しているすべてのスレッドが&lt;a href=&quot;../../util/concurrent/cancellationexception&quot;&gt; &lt;code&gt;CancellationException&lt;/code&gt; &lt;/a&gt;をスローします。基になるI / O操作をキャンセルできるかどうかは、実装によって大きく異なるため、指定されていません。キャンセルによってチャネルまたはチャネルが接続されているエンティティが不整合な状態になると、チャネルは実装固有の&lt;em&gt;エラー状態になり&lt;/em&gt;、I / O操作を開始しようとするさらなる試みを防止します。</target>
        </trans-unit>
        <trans-unit id="3602374c96f5a5c257635205a93086c90dc41df6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GSSManager&lt;/code&gt; class has two methods that enable these modes of usage: &lt;a href=&quot;#addProviderAtFront(java.security.Provider,org.ietf.jgss.Oid)&quot;&gt;&lt;code&gt;addProviderAtFront&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#addProviderAtEnd(java.security.Provider,org.ietf.jgss.Oid)&quot;&gt;&lt;code&gt;addProviderAtEnd&lt;/code&gt;&lt;/a&gt;. These methods have the effect of creating an ordered list of</source>
          <target state="translated">&lt;code&gt;GSSManager&lt;/code&gt; ：クラスは、使用のこれらのモードを可能にする2つの方法がある&lt;a href=&quot;#addProviderAtFront(java.security.Provider,org.ietf.jgss.Oid)&quot;&gt; &lt;code&gt;addProviderAtFront&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#addProviderAtEnd(java.security.Provider,org.ietf.jgss.Oid)&quot;&gt; &lt;code&gt;addProviderAtEnd&lt;/code&gt; を&lt;/a&gt;。これらのメソッドには、次の順序付きリストを作成する効果があります。</target>
        </trans-unit>
        <trans-unit id="914da397f8c97202021f7ec88c5d7ecdc38f6e6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GUIInitializedListener&lt;/code&gt; interface is used by the &lt;a href=&quot;eventqueuemonitor&quot;&gt;&lt;code&gt;EventQueueMonitor&lt;/code&gt;&lt;/a&gt; class to notify an interested party when the GUI subsystem has been initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db191355d553162f7fbdc2d9663eec947a2f20d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GUIInitializedListener&lt;/code&gt; interface is used by the &lt;a href=&quot;eventqueuemonitor&quot;&gt;&lt;code&gt;EventQueueMonitor&lt;/code&gt;&lt;/a&gt; class to notify an interested party when the GUI subsystem has been initialized. This is necessary because assistive technologies can be loaded before the GUI subsystem is initialized. As a result, assistive technologies should check the &lt;a href=&quot;eventqueuemonitor#isGUIInitialized()&quot;&gt;&lt;code&gt;isGUIInitialized&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;EventQueueMonitor&lt;/code&gt; before creating any GUI components. If the return value is true, assistive technologies can create GUI components following the same thread restrictions as any other application. If the return value is false, the assistive technology should register a &lt;code&gt;GUIInitializedListener&lt;/code&gt; with the &lt;code&gt;EventQueueMonitor&lt;/code&gt; to be notified when the GUI subsystem is initialized.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="70df597792a5d0c1f742f4bbc73443851469858e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GeneralPath&lt;/code&gt; class represents a geometric path constructed from straight lines, and quadratic and cubic (B&amp;eacute;zier) curves.</source>
          <target state="translated">&lt;code&gt;GeneralPath&lt;/code&gt; ののクラスは、直線、及び2次および3次（ベジェ）曲線から構成され、幾何学的経路を表します。</target>
        </trans-unit>
        <trans-unit id="cb3e442cafe4b2435222cea3fefab94ec8d73d74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GeneralPath&lt;/code&gt; class represents a geometric path constructed from straight lines, and quadratic and cubic (B&amp;eacute;zier) curves. It can contain multiple subpaths.</source>
          <target state="translated">&lt;code&gt;GeneralPath&lt;/code&gt; ののクラスは、直線、及び2次および3次（ベジェ）曲線から構成され、幾何学的経路を表します。複数のサブパスを含めることができます。</target>
        </trans-unit>
        <trans-unit id="0794b1416bd199f56af33739272b109badf5de09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GeneralSecurityException&lt;/code&gt; class is a generic security exception class that provides type safety for all the security-related exception classes that extend from it.</source>
          <target state="translated">&lt;code&gt;GeneralSecurityException&lt;/code&gt; クラスは、それを拡張するすべてのセキュリティ関連例外クラスに対して型の安全性を提供し、一般的なセキュリティ例外クラスです。</target>
        </trans-unit>
        <trans-unit id="8c32683bb604a52bbbd12a72cd3f38b11977a353" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GetTimeRequest&lt;/code&gt; and &lt;code&gt;GetTimeResponse&lt;/code&gt; classes might be defined as follows:</source>
          <target state="translated">&lt;code&gt;GetTimeRequest&lt;/code&gt; と &lt;code&gt;GetTimeResponse&lt;/code&gt; 次のようにクラスが定義されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="13c0923d03901bd10b867c4df6e64615af99014f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GlyphJustificationInfo&lt;/code&gt; class represents information about the justification properties of a glyph.</source>
          <target state="translated">&lt;code&gt;GlyphJustificationInfo&lt;/code&gt; クラスは、グリフの位置揃えのプロパティに関する情報を表します。</target>
        </trans-unit>
        <trans-unit id="b927a0c2359e692e02f1706ffd35129affd6a872" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GlyphJustificationInfo&lt;/code&gt; class represents information about the justification properties of a glyph. A glyph is the visual representation of one or more characters. Many different glyphs can be used to represent a single character or combination of characters. The four justification properties represented by &lt;code&gt;GlyphJustificationInfo&lt;/code&gt; are weight, priority, absorb and limit.</source>
          <target state="translated">&lt;code&gt;GlyphJustificationInfo&lt;/code&gt; クラスは、グリフの位置揃えのプロパティに関する情報を表します。グリフは、1つ以上の文字を視覚的に表現したものです。多くの異なるグリフを使用して、単一の文字または文字の組み合わせを表すことができます。 &lt;code&gt;GlyphJustificationInfo&lt;/code&gt; によって表される4つの正当化プロパティは、重み、優先度、吸収、および制限です。</target>
        </trans-unit>
        <trans-unit id="45abb7154dbefa102ab517801d557cf9f3c56346" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GlyphMetrics&lt;/code&gt; class represents information for a single glyph.</source>
          <target state="translated">&lt;code&gt;GlyphMetrics&lt;/code&gt; クラスは、単一のグリフの情報を表します。</target>
        </trans-unit>
        <trans-unit id="4c21b3f44b58fec8cc03a6ae86f7fe0931c38e31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GlyphMetrics&lt;/code&gt; class represents information for a single glyph. A glyph is the visual representation of one or more characters. Many different glyphs can be used to represent a single character or combination of characters. &lt;code&gt;GlyphMetrics&lt;/code&gt; instances are produced by &lt;a href=&quot;../font&quot;&gt;&lt;code&gt;Font&lt;/code&gt;&lt;/a&gt; and are applicable to a specific glyph in a particular &lt;code&gt;Font&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;GlyphMetrics&lt;/code&gt; クラスは、単一のグリフの情報を表します。グリフは、1つ以上の文字を視覚的に表現したものです。多くの異なるグリフを使用して、単一の文字または文字の組み合わせを表すことができます。 &lt;code&gt;GlyphMetrics&lt;/code&gt; インスタンスは&lt;a href=&quot;../font&quot;&gt; &lt;code&gt;Font&lt;/code&gt; &lt;/a&gt;によって生成され、特定の &lt;code&gt;Font&lt;/code&gt; の特定のグリフに適用できます。</target>
        </trans-unit>
        <trans-unit id="0d535761fb3907adf7a158ff9798deca3a7c2168" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GlyphVector&lt;/code&gt; does not attempt any interpretation of the sequence of glyphs it contains. Relationships between adjacent glyphs in sequence are solely used to determine the placement of the glyphs in the visual coordinate space.</source>
          <target state="translated">&lt;code&gt;GlyphVector&lt;/code&gt; のは、それが含まれているグリフのシーケンスのいずれかの解釈を試みません。連続する隣接するグリフ間の関係は、視覚座標空間でのグリフの配置を決定するためにのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="22c3fa3fa913d25f815a28b8e119f96a0555cab4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GradientPaint&lt;/code&gt; class provides a way to fill a &lt;a href=&quot;shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; with a linear color gradient pattern.</source>
          <target state="translated">&lt;code&gt;GradientPaint&lt;/code&gt; クラスは、充填する方法を提供&lt;a href=&quot;shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; を&lt;/a&gt;線形色のグラデーションパターンです。</target>
        </trans-unit>
        <trans-unit id="9b77696e16f3807289412d33d3f22fcce890f133" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GradientPaint&lt;/code&gt; class provides a way to fill a &lt;a href=&quot;shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; with a linear color gradient pattern. If &lt;a href=&quot;point&quot;&gt;&lt;code&gt;Point&lt;/code&gt;&lt;/a&gt; P1 with &lt;a href=&quot;color&quot;&gt;&lt;code&gt;Color&lt;/code&gt;&lt;/a&gt; C1 and &lt;code&gt;Point&lt;/code&gt; P2 with &lt;code&gt;Color&lt;/code&gt; C2 are specified in user space, the &lt;code&gt;Color&lt;/code&gt; on the P1, P2 connecting line is proportionally changed from C1 to C2. Any point P not on the extended P1, P2 connecting line has the color of the point P' that is the perpendicular projection of P on the extended P1, P2 connecting line. Points on the extended line outside of the P1, P2 segment can be colored in one of two ways.</source>
          <target state="translated">&lt;code&gt;GradientPaint&lt;/code&gt; クラスは、充填する方法を提供&lt;a href=&quot;shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; を&lt;/a&gt;線形色のグラデーションパターンです。場合&lt;a href=&quot;point&quot;&gt; &lt;code&gt;Point&lt;/code&gt; &lt;/a&gt;とP1&lt;a href=&quot;color&quot;&gt; &lt;code&gt;Color&lt;/code&gt; &lt;/a&gt;C1と &lt;code&gt;Point&lt;/code&gt; とP2 &lt;code&gt;Color&lt;/code&gt; C2がユーザ空間で指定され、 &lt;code&gt;Color&lt;/code&gt; P1に、P2の接続線を比例C2にC1から変更されます。延長されたＰ１、Ｐ２接続線上にない任意の点Ｐは、延長されたＰ１、Ｐ２接続線上のＰの垂直投影である点Ｐ 'の色を有する。 P1、P2セグメントの外側の延長線上の点は、2つの方法のいずれかで色付けできます。</target>
        </trans-unit>
        <trans-unit id="32819e2ce29b3957db4a98ae15341d7630917a53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GraphicAttribute&lt;/code&gt; class represents a graphic embedded in text. Clients subclass this class to implement their own char replacement graphics. Clients wishing to embed shapes and images in text need not subclass this class. Instead, clients can use the &lt;a href=&quot;shapegraphicattribute&quot;&gt;&lt;code&gt;ShapeGraphicAttribute&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;imagegraphicattribute&quot;&gt;&lt;code&gt;ImageGraphicAttribute&lt;/code&gt;&lt;/a&gt; classes.</source>
          <target state="translated">&lt;code&gt;GraphicAttribute&lt;/code&gt; のクラスは、テキストに埋め込まれたグラフィックを表します。クライアントはこのクラスをサブクラス化して、独自の文字置換グラフィックを実装します。図形や画像をテキストに埋め込むことを希望するクライアントは、このクラスをサブクラス化する必要はありません。代わりに、クライアントは&lt;a href=&quot;shapegraphicattribute&quot;&gt; &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt; &lt;/a&gt;クラスと&lt;a href=&quot;imagegraphicattribute&quot;&gt; &lt;code&gt;ImageGraphicAttribute&lt;/code&gt; &lt;/a&gt;クラスを使用できます。</target>
        </trans-unit>
        <trans-unit id="b392fe6147351913070567a0c9f057359947726a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Graphics&lt;/code&gt; class defines only the &lt;code&gt;setColor&lt;/code&gt; method to control the color to be painted. Since the Java 2D API extends the &lt;code&gt;Color&lt;/code&gt; object to implement the new &lt;code&gt;Paint&lt;/code&gt; interface, the existing &lt;code&gt;setColor&lt;/code&gt; method is now a convenience method for setting the current &lt;code&gt;Paint&lt;/code&gt; attribute to a &lt;code&gt;Color&lt;/code&gt; object. &lt;code&gt;setColor(c)&lt;/code&gt; is equivalent to &lt;code&gt;setPaint(c)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Graphics&lt;/code&gt; のみクラス定義 &lt;code&gt;setColor&lt;/code&gt; をの色を制御する方法が塗装されます。Java 2D APIは &lt;code&gt;Color&lt;/code&gt; オブジェクトを拡張して新しい &lt;code&gt;Paint&lt;/code&gt; インターフェースを実装するため、既存の &lt;code&gt;setColor&lt;/code&gt; メソッドは、現在の &lt;code&gt;Paint&lt;/code&gt; 属性を &lt;code&gt;Color&lt;/code&gt; オブジェクトに設定するための便利なメソッドになりました。 &lt;code&gt;setColor(c)&lt;/code&gt; は &lt;code&gt;setPaint(c)&lt;/code&gt; （c）と同等です。</target>
        </trans-unit>
        <trans-unit id="e8427a2fc2ebce29422ab41b78d54daf8a407ffe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Graphics&lt;/code&gt; class defines two methods for controlling how colors are applied to the destination.</source>
          <target state="translated">&lt;code&gt;Graphics&lt;/code&gt; クラスは、色が先に適用される方法を制御するための2つのメソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="13125e55dc6ed960bfbfd2294776b370d2c21f49" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Graphics&lt;/code&gt; class is the abstract base class for all graphics contexts that allow an application to draw onto components that are realized on various devices, as well as onto off-screen images.</source>
          <target state="translated">&lt;code&gt;Graphics&lt;/code&gt; クラスは、様々なデバイス上で実現されているコンポーネント上に、同様にオフスクリーンイメージ上に描画するアプリケーションを可能にするすべてのグラフィックコンテキストの抽象基底クラスです。</target>
        </trans-unit>
        <trans-unit id="a5e9745b4915a7b3ff47fc4c84d91228cd6e76fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Graphics&lt;/code&gt; object given is not initialized in any way. A view should set any settings needed.</source>
          <target state="translated">指定された &lt;code&gt;Graphics&lt;/code&gt; オブジェクトは初期化されていません。ビューは、必要な設定を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="0a2ff97389f96fefc6b5f822679a56149d361216" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GraphicsConfigTemplate&lt;/code&gt; class is used to obtain a valid &lt;a href=&quot;graphicsconfiguration&quot;&gt;&lt;code&gt;GraphicsConfiguration&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;GraphicsConfigTemplate&lt;/code&gt; クラスは、有効な取得するために使用され&lt;a href=&quot;graphicsconfiguration&quot;&gt; &lt;code&gt;GraphicsConfiguration&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ffb98ba7d72f93086adb8e667b98e30406027f45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GraphicsConfigTemplate&lt;/code&gt; class is used to obtain a valid &lt;a href=&quot;graphicsconfiguration&quot;&gt;&lt;code&gt;GraphicsConfiguration&lt;/code&gt;&lt;/a&gt;. A user instantiates one of these objects and then sets all non-default attributes as desired. The &lt;a href=&quot;graphicsdevice#getBestConfiguration(java.awt.GraphicsConfigTemplate)&quot;&gt;&lt;code&gt;GraphicsDevice.getBestConfiguration(java.awt.GraphicsConfigTemplate)&lt;/code&gt;&lt;/a&gt; method found in the &lt;a href=&quot;graphicsdevice&quot;&gt;&lt;code&gt;GraphicsDevice&lt;/code&gt;&lt;/a&gt; class is then called with this &lt;code&gt;GraphicsConfigTemplate&lt;/code&gt;. A valid &lt;code&gt;GraphicsConfiguration&lt;/code&gt; is returned that meets or exceeds what was requested in the &lt;code&gt;GraphicsConfigTemplate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;GraphicsConfigTemplate&lt;/code&gt; クラスは、有効な取得するために使用され&lt;a href=&quot;graphicsconfiguration&quot;&gt; &lt;code&gt;GraphicsConfiguration&lt;/code&gt; &lt;/a&gt;。ユーザーはこれらのオブジェクトの1つをインスタンス化し、必要に応じてすべてのデフォルト以外の属性を設定します。次に、&lt;a href=&quot;graphicsdevice&quot;&gt; &lt;code&gt;GraphicsDevice&lt;/code&gt; &lt;/a&gt;クラスにある&lt;a href=&quot;graphicsdevice#getBestConfiguration(java.awt.GraphicsConfigTemplate)&quot;&gt; &lt;code&gt;GraphicsDevice.getBestConfiguration(java.awt.GraphicsConfigTemplate)&lt;/code&gt; &lt;/a&gt;メソッドが、この &lt;code&gt;GraphicsConfigTemplate&lt;/code&gt; で呼び出されます。有効な &lt;code&gt;GraphicsConfiguration&lt;/code&gt; には満たしているかで要求されたものを超えていることが返される &lt;code&gt;GraphicsConfigTemplate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="726b47b205fe0a661cf0370ba8da7a5b488fd925" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GraphicsConfiguration&lt;/code&gt; class describes the characteristics of a graphics destination such as a printer or monitor.</source>
          <target state="translated">&lt;code&gt;GraphicsConfiguration&lt;/code&gt; クラスは、プリンタやモニタなどのグラフィックスデスティネーションの特性を記載しています。</target>
        </trans-unit>
        <trans-unit id="a92ac41ae0dd8c36409cae0e9587878c5fb14003" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GraphicsConfiguration&lt;/code&gt; class describes the characteristics of a graphics destination such as a printer or monitor. There can be many &lt;code&gt;GraphicsConfiguration&lt;/code&gt; objects associated with a single graphics device, representing different drawing modes or capabilities. The corresponding native structure will vary from platform to platform. For example, on X11 windowing systems, each visual is a different &lt;code&gt;GraphicsConfiguration&lt;/code&gt;. On Microsoft Windows, &lt;code&gt;GraphicsConfiguration&lt;/code&gt;s represent PixelFormats available in the current resolution and color depth.</source>
          <target state="translated">&lt;code&gt;GraphicsConfiguration&lt;/code&gt; クラスは、プリンタやモニタなどのグラフィックスデスティネーションの特性を記載しています。さまざまな描画モードまたは機能を表す、単一のグラフィックスデバイスに関連付けられた多数の &lt;code&gt;GraphicsConfiguration&lt;/code&gt; オブジェクトが存在する可能性があります。対応するネイティブ構造は、プラットフォームごとに異なります。たとえば、X11ウィンドウシステムでは、各ビジュアルは異なる &lt;code&gt;GraphicsConfiguration&lt;/code&gt; です。Microsoft Windowsでは、 &lt;code&gt;GraphicsConfiguration&lt;/code&gt; は、現在の解像度と色深度で使用可能なPixelFormatを表します。</target>
        </trans-unit>
        <trans-unit id="969d3be706bf8119db76442a54255ffe0dea0b26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GraphicsDevice&lt;/code&gt; class describes the graphics devices that might be available in a particular graphics environment.</source>
          <target state="translated">&lt;code&gt;GraphicsDevice&lt;/code&gt; クラスは、特定のグラフィックス環境で利用可能なグラフィックスデバイスを記述します。</target>
        </trans-unit>
        <trans-unit id="462d91ac3e0876dc7fa769bfba720acd5fae4a62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GraphicsDevice&lt;/code&gt; class describes the graphics devices that might be available in a particular graphics environment. These include screen and printer devices. Note that there can be many screens and many printers in an instance of &lt;a href=&quot;graphicsenvironment&quot;&gt;&lt;code&gt;GraphicsEnvironment&lt;/code&gt;&lt;/a&gt;. Each graphics device has one or more &lt;a href=&quot;graphicsconfiguration&quot;&gt;&lt;code&gt;GraphicsConfiguration&lt;/code&gt;&lt;/a&gt; objects associated with it. These objects specify the different configurations in which the &lt;code&gt;GraphicsDevice&lt;/code&gt; can be used.</source>
          <target state="translated">&lt;code&gt;GraphicsDevice&lt;/code&gt; クラスは、特定のグラフィックス環境で利用可能なグラフィックスデバイスを記述します。これらには、画面およびプリンターデバイスが含まれます。&lt;a href=&quot;graphicsenvironment&quot;&gt; &lt;code&gt;GraphicsEnvironment&lt;/code&gt; の&lt;/a&gt;インスタンスには、多数の画面と多数のプリンターが存在する可能性があることに注意してください。各グラフィックデバイスには、1つ以上の&lt;a href=&quot;graphicsconfiguration&quot;&gt; &lt;code&gt;GraphicsConfiguration&lt;/code&gt; &lt;/a&gt;オブジェクトが関連付けられています。これらのオブジェクトは、 &lt;code&gt;GraphicsDevice&lt;/code&gt; を使用できるさまざまな構成を指定します。</target>
        </trans-unit>
        <trans-unit id="35341cf36a040d8d479bdd8ded3520b65faf36e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GraphicsEnvironment&lt;/code&gt; class describes the collection of &lt;a href=&quot;graphicsdevice&quot;&gt;&lt;code&gt;GraphicsDevice&lt;/code&gt;&lt;/a&gt; objects and &lt;a href=&quot;font&quot;&gt;&lt;code&gt;Font&lt;/code&gt;&lt;/a&gt; objects available to a Java(tm) application on a particular platform.</source>
          <target state="translated">&lt;code&gt;GraphicsEnvironment&lt;/code&gt; にするクラスは、コレクションの説明&lt;a href=&quot;graphicsdevice&quot;&gt; &lt;code&gt;GraphicsDevice&lt;/code&gt; &lt;/a&gt;オブジェクトをと&lt;a href=&quot;font&quot;&gt; &lt;code&gt;Font&lt;/code&gt; &lt;/a&gt;、特定のプラットフォームのJava TMアプリケーションで使用可能なオブジェクト。</target>
        </trans-unit>
        <trans-unit id="7e5b963b9e15640f3032a326aa2be9cd04e50597" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GraphicsEnvironment&lt;/code&gt; class describes the collection of &lt;a href=&quot;graphicsdevice&quot;&gt;&lt;code&gt;GraphicsDevice&lt;/code&gt;&lt;/a&gt; objects and &lt;a href=&quot;font&quot;&gt;&lt;code&gt;Font&lt;/code&gt;&lt;/a&gt; objects available to a Java(tm) application on a particular platform. The resources in this &lt;code&gt;GraphicsEnvironment&lt;/code&gt; might be local or on a remote machine. &lt;code&gt;GraphicsDevice&lt;/code&gt; objects can be screens, printers or image buffers and are the destination of &lt;a href=&quot;graphics2d&quot;&gt;&lt;code&gt;Graphics2D&lt;/code&gt;&lt;/a&gt; drawing methods. Each &lt;code&gt;GraphicsDevice&lt;/code&gt; has a number of &lt;a href=&quot;graphicsconfiguration&quot;&gt;&lt;code&gt;GraphicsConfiguration&lt;/code&gt;&lt;/a&gt; objects associated with it. These objects specify the different configurations in which the &lt;code&gt;GraphicsDevice&lt;/code&gt; can be used.</source>
          <target state="translated">&lt;code&gt;GraphicsEnvironment&lt;/code&gt; にするクラスは、コレクションの説明&lt;a href=&quot;graphicsdevice&quot;&gt; &lt;code&gt;GraphicsDevice&lt;/code&gt; &lt;/a&gt;オブジェクトをと&lt;a href=&quot;font&quot;&gt; &lt;code&gt;Font&lt;/code&gt; &lt;/a&gt;、特定のプラットフォームのJava TMアプリケーションで使用可能なオブジェクト。この &lt;code&gt;GraphicsEnvironment&lt;/code&gt; のリソースは、ローカルまたはリモートマシン上にある可能性があります。 &lt;code&gt;GraphicsDevice&lt;/code&gt; オブジェクトは、画面、プリンター、または画像バッファーであり、&lt;a href=&quot;graphics2d&quot;&gt; &lt;code&gt;Graphics2D&lt;/code&gt; &lt;/a&gt;描画メソッドの宛先です。各 &lt;code&gt;GraphicsDevice&lt;/code&gt; には、いくつかの&lt;a href=&quot;graphicsconfiguration&quot;&gt; &lt;code&gt;GraphicsConfiguration&lt;/code&gt; &lt;/a&gt;オブジェクトが関連付けられています。これらのオブジェクトは、 &lt;code&gt;GraphicsDevice&lt;/code&gt; を使用できるさまざまな構成を指定します。</target>
        </trans-unit>
        <trans-unit id="fc511c77ada4c92e4f5e1047075dc3015a45c13a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GridBagConstraints&lt;/code&gt; class specifies constraints for components that are laid out using the &lt;code&gt;GridBagLayout&lt;/code&gt; class.</source>
          <target state="translated">&lt;code&gt;GridBagConstraints&lt;/code&gt; 使って配置されるコンポーネントのクラス指定の制約 &lt;code&gt;GridBagLayout&lt;/code&gt; クラスを。</target>
        </trans-unit>
        <trans-unit id="054925047c5a9fd9ce6f93fbb0458416fc8717e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GridBagLayout&lt;/code&gt; class is a flexible layout manager that aligns components vertically, horizontally or along their baseline without requiring that the components be of the same size.</source>
          <target state="translated">&lt;code&gt;GridBagLayout&lt;/code&gt; クラスは、整列コンポーネント垂直、水平またはコンポーネントが同じサイズであることを必要とせず、それらのベースラインに沿った柔軟なレイアウトマネージャです。</target>
        </trans-unit>
        <trans-unit id="574091ea4562c915fcd1fabbdb94abf8adc280e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GridBagLayout&lt;/code&gt; class is a flexible layout manager that aligns components vertically, horizontally or along their baseline without requiring that the components be of the same size. Each &lt;code&gt;GridBagLayout&lt;/code&gt; object maintains a dynamic, rectangular grid of cells, with each component occupying one or more cells, called its &lt;em&gt;display area&lt;/em&gt;.</source>
          <target state="translated">&lt;code&gt;GridBagLayout&lt;/code&gt; クラスは、整列コンポーネント垂直、水平またはコンポーネントが同じサイズであることを必要とせず、それらのベースラインに沿った柔軟なレイアウトマネージャです。各 &lt;code&gt;GridBagLayout&lt;/code&gt; オブジェクトは、動的な長方形のセルグリッドを維持し、各コンポーネントは、&lt;em&gt;表示領域&lt;/em&gt;と呼ばれる1つ以上のセルを占有し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="76062deb045ca36f22a85ceffeb0ad784b53d31e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GridBagLayout&lt;/code&gt; class requires a &lt;code&gt;GridBagConstraints&lt;/code&gt; object. Failure to pass the correct type of constraints object results in an &lt;code&gt;IllegalArgumentException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;GridBagLayout&lt;/code&gt; クラスが必要と &lt;code&gt;GridBagConstraints&lt;/code&gt; オブジェクトを。正しいタイプの制約オブジェクトを渡さないと、 &lt;code&gt;IllegalArgumentException&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="ac8ff2c00fb25b77e2b48357ae3e4d63bde879f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GridBagLayoutInfo&lt;/code&gt; is an utility class for &lt;code&gt;GridBagLayout&lt;/code&gt; layout manager.</source>
          <target state="translated">&lt;code&gt;GridBagLayoutInfo&lt;/code&gt; はのためのユーティリティクラスです &lt;code&gt;GridBagLayout&lt;/code&gt; レイアウトマネージャ。</target>
        </trans-unit>
        <trans-unit id="92b008e93189549a646aef66f3bffaf374962247" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GridBagLayoutInfo&lt;/code&gt; is an utility class for &lt;code&gt;GridBagLayout&lt;/code&gt; layout manager. It stores align, size and baseline parameters for every component within a container.</source>
          <target state="translated">&lt;code&gt;GridBagLayoutInfo&lt;/code&gt; はのためのユーティリティクラスです &lt;code&gt;GridBagLayout&lt;/code&gt; レイアウトマネージャ。コンテナ内のすべてのコンポーネントの整列、サイズ、およびベースラインパラメータを格納します。</target>
        </trans-unit>
        <trans-unit id="67565b28b276bd69513394c4ddbf42066c068bfc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GridLayout&lt;/code&gt; class is a layout manager that lays out a container's components in a rectangular grid.</source>
          <target state="translated">&lt;code&gt;GridLayout&lt;/code&gt; クラスは、矩形グリッドにコンテナのコンポーネントをレイアウトするレイアウトマネージャです。</target>
        </trans-unit>
        <trans-unit id="885be3d5e327ec2ad7dc7c689228f7bf0680ebe1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;GridLayout&lt;/code&gt; class is a layout manager that lays out a container's components in a rectangular grid. The container is divided into equal-sized rectangles, and one component is placed in each rectangle. For example, the following is an applet that lays out six buttons into three rows and two columns:</source>
          <target state="translated">&lt;code&gt;GridLayout&lt;/code&gt; クラスは、矩形グリッドにコンテナのコンポーネントをレイアウトするレイアウトマネージャです。コンテナは同じサイズの長方形に分割され、各長方形に1つのコンポーネントが配置されます。たとえば、次は6つのボタンを3行2列に配置するアプレットです。</target>
        </trans-unit>
        <trans-unit id="118049c104bd48460d735d53d07755dc77eab0fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HTMLDOMImplementation&lt;/code&gt; interface extends the &lt;code&gt;DOMImplementation&lt;/code&gt; interface with a method for creating an HTML document instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7b3db553a343fd330b52da577c5515316776d097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Handler&lt;/code&gt; is responsible for formatting the message, when and if necessary. The formatting should include localization.</source>
          <target state="translated">&lt;code&gt;Handler&lt;/code&gt; 、とき、必要に応じてメッセージをフォーマットする責任があります。フォーマットにはローカライズを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="158b4670dc7ccf98630ac3b1539118f01f71661d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HandlerResult&lt;/code&gt; is used to determine the behavior of the channel after it handles a notification from the SCTP stack. Essentially its value determines if the channel should try to receive another notification or a message before returning.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1ea2fc9f3d54d23f364907703d3ac96f91fdf0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ICC_ColorSpace&lt;/code&gt; class is an implementation of the abstract &lt;code&gt;ColorSpace&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f6918facd7e31b8252dd63334a785b3e9813caae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ICC_ColorSpace&lt;/code&gt; class is an implementation of the abstract &lt;code&gt;ColorSpace&lt;/code&gt; class. This representation of device independent and device dependent color spaces is based on the International Color Consortium Specification ICC.1:2001-12, File Format for Color Profiles (see &lt;a href=&quot;http://www.color.org&quot;&gt;http://www.color.org&lt;/a&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8da61bc9d927b3db75e7a43eb8fa3a67bb6d1f62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ICC_Profile getInstance&lt;/code&gt; method will return an &lt;code&gt;ICC_ProfileRGB&lt;/code&gt; object when these conditions are met. Three-component, matrix-based input profiles and RGB display profiles are examples of this type of profile.</source>
          <target state="translated">&lt;code&gt;ICC_Profile getInstance&lt;/code&gt; メソッドは戻ります &lt;code&gt;ICC_ProfileRGB&lt;/code&gt; のこれらの条件が満たされたときにオブジェクトを。このタイプのプロファイルの例としては、3コンポーネントのマトリックスベースの入力プロファイルとRGBディスプレイプロファイルがあります。</target>
        </trans-unit>
        <trans-unit id="32aa0f88f296ce21dcaf9e0d00afc36365bb4fea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ICC_ProfileGray&lt;/code&gt; class is a subclass of the &lt;code&gt;ICC_Profile&lt;/code&gt; class that represents profiles which meet the following criteria: the color space type of the profile is &lt;code&gt;TYPE_GRAY&lt;/code&gt; and the profile includes the &lt;code&gt;grayTRCTag&lt;/code&gt; and &lt;code&gt;mediaWhitePointTag&lt;/code&gt; tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d1e4df1bd579a9f06afd737e2751ebfb596d5dd5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ICC_ProfileGray&lt;/code&gt; class is a subclass of the &lt;code&gt;ICC_Profile&lt;/code&gt; class that represents profiles which meet the following criteria: the color space type of the profile is &lt;code&gt;TYPE_GRAY&lt;/code&gt; and the profile includes the &lt;code&gt;grayTRCTag&lt;/code&gt; and &lt;code&gt;mediaWhitePointTag&lt;/code&gt; tags. The &lt;code&gt;getInstance&lt;/code&gt; methods in the &lt;code&gt;ICC_Profile&lt;/code&gt; class will return an &lt;code&gt;ICC_ProfileGray&lt;/code&gt; object when the above conditions are met. Examples of this kind of profile are monochrome input profiles, monochrome display profiles, and monochrome output profiles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="652d1cea1331e9078eb6a6bc1b0373da89c1b48f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ICC_ProfileRGB&lt;/code&gt; class is a subclass of the &lt;code&gt;ICC_Profile&lt;/code&gt; class that represents profiles which meet the following criteria: the profile's color space type is RGB, and the profile includes the &lt;code&gt;redColorantTag&lt;/code&gt;, &lt;code&gt;greenColorantTag&lt;/code&gt;, &lt;code&gt;blueColorantTag&lt;/code&gt;, &lt;code&gt;redTRCTag&lt;/code&gt;, &lt;code&gt;greenTRCTag&lt;/code&gt;, &lt;code&gt;blueTRCTag&lt;/code&gt;, &lt;code&gt;mediaWhitePointTag&lt;/code&gt; tags.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5358f2d1cdc57c22f5e748b6306eb87ff6c460c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ICC_ProfileRGB&lt;/code&gt; class is a subclass of the &lt;code&gt;ICC_Profile&lt;/code&gt; class that represents profiles which meet the following criteria: the profile's color space type is RGB, and the profile includes the &lt;code&gt;redColorantTag&lt;/code&gt;, &lt;code&gt;greenColorantTag&lt;/code&gt;, &lt;code&gt;blueColorantTag&lt;/code&gt;, &lt;code&gt;redTRCTag&lt;/code&gt;, &lt;code&gt;greenTRCTag&lt;/code&gt;, &lt;code&gt;blueTRCTag&lt;/code&gt;, &lt;code&gt;mediaWhitePointTag&lt;/code&gt; tags. The &lt;code&gt;getInstance&lt;/code&gt; methods in the &lt;code&gt;ICC_Profile&lt;/code&gt; class will return an &lt;code&gt;ICC_ProfileRGB&lt;/code&gt; object when the above conditions are met. Three-component, matrix-based input profiles and RGB display profiles are examples of this type of profile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="91085e13e25b56334d0136ad6a6a3aeb2acef937" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOByteBuffer&lt;/code&gt; class provides an alternative way to perform reads of sequences of bytes that reduces the amount of internal data copying.</source>
          <target state="translated">&lt;code&gt;IIOByteBuffer&lt;/code&gt; のクラスが実行する別の方法は、内部データのコピーの量を減少させるバイトのシーケンスの読み出し提供します。</target>
        </trans-unit>
        <trans-unit id="5555691f6c07d9fa4101cfba1135746750fd08c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOMetadataController&lt;/code&gt; that will be used to provide settings for this &lt;code&gt;IIOMetadata&lt;/code&gt; object when the &lt;code&gt;activateController&lt;/code&gt; method is called.</source>
          <target state="translated">&lt;code&gt;IIOMetadataController&lt;/code&gt; このための設定を提供するために使用される &lt;code&gt;IIOMetadata&lt;/code&gt; たときにオブジェクト &lt;code&gt;activateController&lt;/code&gt; のメソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a9e351d66bd62ad441f8bd1a17f3defde63a80bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOMetadataController&lt;/code&gt; that will be used to provide settings for this &lt;code&gt;IIOMetadata&lt;/code&gt; object when the &lt;code&gt;activateController&lt;/code&gt; method is called. This value overrides any default controller, even when &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;IIOMetadataController&lt;/code&gt; このための設定を提供するために使用される &lt;code&gt;IIOMetadata&lt;/code&gt; たときにオブジェクト &lt;code&gt;activateController&lt;/code&gt; のメソッドが呼び出されます。この値は、 &lt;code&gt;null&lt;/code&gt; の場合でも、デフォルトのコントローラーをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="b86312023dda6b799b3a5f85701920c8a9e53282" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOParamController&lt;/code&gt; that will be used to provide settings for this &lt;code&gt;IIOParam&lt;/code&gt; object when the &lt;code&gt;activateController&lt;/code&gt; method is called.</source>
          <target state="translated">&lt;code&gt;IIOParamController&lt;/code&gt; ですこのための設定を提供するために使用されます &lt;code&gt;IIOParam&lt;/code&gt; たときにオブジェクト &lt;code&gt;activateController&lt;/code&gt; のメソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f17066ba75d42abb02e2b439c5a64a255a531a78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOParamController&lt;/code&gt; that will be used to provide settings for this &lt;code&gt;IIOParam&lt;/code&gt; object when the &lt;code&gt;activateController&lt;/code&gt; method is called. This value overrides any default controller, even when null.</source>
          <target state="translated">&lt;code&gt;IIOParamController&lt;/code&gt; ですこのための設定を提供するために使用されます &lt;code&gt;IIOParam&lt;/code&gt; たときにオブジェクト &lt;code&gt;activateController&lt;/code&gt; のメソッドが呼び出されます。この値は、nullの場合でも、デフォルトのコントローラーをオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="1373fac41a2c0fd6a7088e2e48cb2f69a0a7c602" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOReadProgressListener&lt;/code&gt; interface allows for notification of the percentage of an image that has been read successfully.</source>
          <target state="translated">&lt;code&gt;IIOReadProgressListener&lt;/code&gt; のインターフェースが正常に読み取られた画像の比率の通知を可能にします。</target>
        </trans-unit>
        <trans-unit id="8efd925d40fc2c06f26f62362d2f5ad61bf84a89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOReadUpdateListener&lt;/code&gt; interface allows for notification of the portions of an image that have been read. This is useful, for example, for implementing dynamic display of an image as it is loaded.</source>
          <target state="translated">&lt;code&gt;IIOReadUpdateListener&lt;/code&gt; のインターフェースは、読み取られた画像の部分の通知を可能にします。これは、たとえば、ロードされたイメージの動的表示を実装する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="d9b45fe43fb5e8f36d95b122d8bc0cf608973ea3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOReadWarningListener&lt;/code&gt; interface allows for notification of non-fatal errors during reading.</source>
          <target state="translated">&lt;code&gt;IIOReadWarningListener&lt;/code&gt; のインタフェースは、読み込み中に非致命的なエラーを通知することができます。</target>
        </trans-unit>
        <trans-unit id="b149ec0010741dabc593484f5a58f1f5bb765802" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IIOWriteWarningListener&lt;/code&gt; and &lt;code&gt;IIOWriteProgressListener&lt;/code&gt; interfaces perform analogous functions for writers.</source>
          <target state="translated">&lt;code&gt;IIOWriteWarningListener&lt;/code&gt; および &lt;code&gt;IIOWriteProgressListener&lt;/code&gt; インタフェースは、ライターのための類似の機能を実行します。</target>
        </trans-unit>
        <trans-unit id="5ebe107cde1d3bd9a79d28a4e17587461ce4d493" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;INSTANT_SECONDS&lt;/code&gt; field will return a date-time with the specified instant. The offset and nano-of-second are unchanged. If the new instant value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;INSTANT_SECONDS&lt;/code&gt; のフィールドには、指定された瞬間に日付と時刻を返します。オフセットとナノ秒は変更されていません。新しいインスタント値が有効範囲外の場合、 &lt;code&gt;DateTimeException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="2471418c65939f74253b34d90116b39570d73512" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;INSTANT_SECONDS&lt;/code&gt; field will return a date-time with the specified instant. The zone and nano-of-second are unchanged. The result will have an offset derived from the new instant and original zone. If the new instant value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;INSTANT_SECONDS&lt;/code&gt; のフィールドには、指定された瞬間に日付と時刻を返します。ゾーンとナノ秒は変更されていません。結果には、新しいインスタントゾーンと元のゾーンから派生したオフセットがあります。新しいインスタント値が有効範囲外の場合、 &lt;code&gt;DateTimeException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="392613a8e6cca470b48fddf1528f1a7a4bb816c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Icon&lt;/code&gt; is wrapped in a &lt;code&gt;JLabel&lt;/code&gt; and displayed in the dialog.</source>
          <target state="translated">&lt;code&gt;Icon&lt;/code&gt; に包まれている &lt;code&gt;JLabel&lt;/code&gt; とダイアログに表示しました。</target>
        </trans-unit>
        <trans-unit id="a965621559c252e432937665b61d466e33f20641" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IllegalPathStateException&lt;/code&gt; represents an exception that is thrown if an operation is performed on a path that is in an illegal state with respect to the particular operation being performed, such as appending a path segment to a &lt;a href=&quot;generalpath&quot;&gt;&lt;code&gt;GeneralPath&lt;/code&gt;&lt;/a&gt; without an initial moveto.</source>
          <target state="translated">&lt;code&gt;IllegalPathStateException&lt;/code&gt; 動作は、このようなパスセグメントを追加ように、実行される特定の操作に対する不正な状態にあるパス上で行われた場合にスローされる例外を表し&lt;a href=&quot;generalpath&quot;&gt; &lt;code&gt;GeneralPath&lt;/code&gt; の&lt;/a&gt;初期のmoveToなしに。</target>
        </trans-unit>
        <trans-unit id="9c18c56f19c3dcaf88dfb987620dbfd93d3a3c2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Image&lt;/code&gt; object determines what colors to render, sampled according to the source to destination coordinate mapping specified by the current &lt;code&gt;Transform&lt;/code&gt; and the optional image transform.</source>
          <target state="translated">&lt;code&gt;Image&lt;/code&gt; オブジェクトは、先電流によって指定されたマッピング座標のソースによれば、サンプリング、色をレンダリングするかを決定する &lt;code&gt;Transform&lt;/code&gt; 及び任意の画像変換します。</target>
        </trans-unit>
        <trans-unit id="d0d2fd4edf3f38ee33c3e1c03e54afb17d287f78" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageGraphicAttribute&lt;/code&gt; class is an implementation of &lt;a href=&quot;graphicattribute&quot;&gt;&lt;code&gt;GraphicAttribute&lt;/code&gt;&lt;/a&gt; which draws images in a &lt;a href=&quot;textlayout&quot;&gt;&lt;code&gt;TextLayout&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;ImageGraphicAttribute&lt;/code&gt; のクラスはの実装です&lt;a href=&quot;graphicattribute&quot;&gt; &lt;code&gt;GraphicAttribute&lt;/code&gt; &lt;/a&gt;内の画像を描画する&lt;a href=&quot;textlayout&quot;&gt; &lt;code&gt;TextLayout&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="26f92023e5949c66d2da17553ce04c03b886aec5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageInputStream&lt;/code&gt; interface unifies streaming and file-based operations. An abstract base class, &lt;code&gt;ImageInputStreamImpl&lt;/code&gt; is provided to simplify writing a new &lt;code&gt;ImageInputStream&lt;/code&gt; class. Concrete implementation classes (&lt;code&gt;FileImageInputStream&lt;/code&gt;, &lt;code&gt;FileCacheImageInputStream&lt;/code&gt;, and &lt;code&gt;MemoryCacheImageInputStream&lt;/code&gt;) are provided that allow input to come from a &lt;code&gt;File&lt;/code&gt; or &lt;code&gt;InputStream&lt;/code&gt; with or without the use of a temporary cache file.</source>
          <target state="translated">&lt;code&gt;ImageInputStream&lt;/code&gt; のストリーミング一元管理とファイルベースの操作インタフェース。抽象基本クラスである &lt;code&gt;ImageInputStreamImpl&lt;/code&gt; は、新しい &lt;code&gt;ImageInputStream&lt;/code&gt; クラスの記述を簡単にするために提供されています。一時的なキャッシュファイルの使用の有無にかかわらず、 &lt;code&gt;File&lt;/code&gt; または &lt;code&gt;InputStream&lt;/code&gt; からの入力を可能にする具体的な実装クラス（ &lt;code&gt;FileImageInputStream&lt;/code&gt; 、 &lt;code&gt;FileCacheImageInputStream&lt;/code&gt; 、および &lt;code&gt;MemoryCacheImageInputStream&lt;/code&gt; ）が提供されます。</target>
        </trans-unit>
        <trans-unit id="5e27b2d4d15fde0cbc962afad6131561435419d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageInputStream&lt;/code&gt; or other &lt;code&gt;Object&lt;/code&gt; by &lt;code&gt;setInput&lt;/code&gt; and retrieved by &lt;code&gt;getInput&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ImageInputStream&lt;/code&gt; 内または他の &lt;code&gt;Object&lt;/code&gt; によって &lt;code&gt;setInput&lt;/code&gt; によって取り出さ &lt;code&gt;getInput&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="23787e7b0f5233202db60183744cb5ba7ec81a77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageInputStream&lt;/code&gt; or other &lt;code&gt;Object&lt;/code&gt; by &lt;code&gt;setInput&lt;/code&gt; and retrieved by &lt;code&gt;getInput&lt;/code&gt;. By default it is initialized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ImageInputStream&lt;/code&gt; 内または他の &lt;code&gt;Object&lt;/code&gt; によって &lt;code&gt;setInput&lt;/code&gt; によって取り出さ &lt;code&gt;getInput&lt;/code&gt; 。デフォルトでは &lt;code&gt;null&lt;/code&gt; に初期化されます。</target>
        </trans-unit>
        <trans-unit id="e870028a4bcce49d6ab74abb2d0fee3053be5245" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageOutputStream&lt;/code&gt; interface performs an analogous function for output. An abstract base class, &lt;code&gt;ImageOutputStreamImpl&lt;/code&gt; is provided, along with concrete implementation classes (&lt;code&gt;FileImageOutputStream&lt;/code&gt;, &lt;code&gt;FileCacheImageOutputStream&lt;/code&gt;, and &lt;code&gt;MemoryCacheImageOutputStream&lt;/code&gt;) are provided that allow output to go to a &lt;code&gt;File&lt;/code&gt; or &lt;code&gt;OutputStream&lt;/code&gt; with or without the use of a temporary cache file.</source>
          <target state="translated">&lt;code&gt;ImageOutputStream&lt;/code&gt; インタフェースは、出力のために類似の機能を実行します。抽象基本クラスである &lt;code&gt;ImageOutputStreamImpl&lt;/code&gt; が提供され、具体的な実装クラス（ &lt;code&gt;FileImageOutputStream&lt;/code&gt; 、 &lt;code&gt;FileCacheImageOutputStream&lt;/code&gt; 、および &lt;code&gt;MemoryCacheImageOutputStream&lt;/code&gt; ）が提供されます。これにより、一時キャッシュファイルの使用の有無にかかわらず、出力を &lt;code&gt;File&lt;/code&gt; または &lt;code&gt;OutputStream&lt;/code&gt; に送ることができます。</target>
        </trans-unit>
        <trans-unit id="0ddae3bbe537c1a0be71cf41804a28a5a81e4fb3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageOutputStream&lt;/code&gt; or other &lt;code&gt;Object&lt;/code&gt; set by &lt;code&gt;setOutput&lt;/code&gt; and retrieved by &lt;code&gt;getOutput&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ImageOutputStream&lt;/code&gt; のまたは他の &lt;code&gt;Object&lt;/code&gt; 集合によって &lt;code&gt;setOutput&lt;/code&gt; によって取得 &lt;code&gt;getOutput&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c654707cc8b01173251db888e4e9f1cadc54a60a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageOutputStream&lt;/code&gt; or other &lt;code&gt;Object&lt;/code&gt; set by &lt;code&gt;setOutput&lt;/code&gt; and retrieved by &lt;code&gt;getOutput&lt;/code&gt;. By default it is initialized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ImageOutputStream&lt;/code&gt; のまたは他の &lt;code&gt;Object&lt;/code&gt; 集合によって &lt;code&gt;setOutput&lt;/code&gt; によって取得 &lt;code&gt;getOutput&lt;/code&gt; 。デフォルトでは &lt;code&gt;null&lt;/code&gt; に初期化されます。</target>
        </trans-unit>
        <trans-unit id="f70260567f0d2cbe6fe2d89e83724aa1bfc9a4e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageReaderSpi&lt;/code&gt; that instantiated this object, or &lt;code&gt;null&lt;/code&gt; if its identity is not known or none exists.</source>
          <target state="translated">&lt;code&gt;ImageReaderSpi&lt;/code&gt; このオブジェクト、またはインスタンス化 &lt;code&gt;null&lt;/code&gt; その身元が不明であるか存在しないされている場合。</target>
        </trans-unit>
        <trans-unit id="23d39dd66eefdd5b7e22c2d48611d45e7fe19e03" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageReaderSpi&lt;/code&gt; that instantiated this object, or &lt;code&gt;null&lt;/code&gt; if its identity is not known or none exists. By default it is initialized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ImageReaderSpi&lt;/code&gt; このオブジェクト、またはインスタンス化 &lt;code&gt;null&lt;/code&gt; その身元が不明であるか存在しないされている場合。デフォルトでは &lt;code&gt;null&lt;/code&gt; に初期化されます。</target>
        </trans-unit>
        <trans-unit id="4704057a1cfa23bc9c1120bc0abf4de7efb1c23e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageWriterSpi&lt;/code&gt; that instantiated this object, or &lt;code&gt;null&lt;/code&gt; if its identity is not known or none exists.</source>
          <target state="translated">&lt;code&gt;ImageWriterSpi&lt;/code&gt; このオブジェクト、またはインスタンス化 &lt;code&gt;null&lt;/code&gt; その身元が不明であるか存在しないされている場合。</target>
        </trans-unit>
        <trans-unit id="1558624413839f825eafd92b1012f6d775cab0ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImageWriterSpi&lt;/code&gt; that instantiated this object, or &lt;code&gt;null&lt;/code&gt; if its identity is not known or none exists. By default it is initialized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ImageWriterSpi&lt;/code&gt; このオブジェクト、またはインスタンス化 &lt;code&gt;null&lt;/code&gt; その身元が不明であるか存在しないされている場合。デフォルトでは &lt;code&gt;null&lt;/code&gt; に初期化されます。</target>
        </trans-unit>
        <trans-unit id="d333f5cf1777f22147d636bd072217b0f829b493" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ImagingOpException&lt;/code&gt; is thrown if one of the &lt;a href=&quot;bufferedimageop&quot;&gt;&lt;code&gt;BufferedImageOp&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;rasterop&quot;&gt;&lt;code&gt;RasterOp&lt;/code&gt;&lt;/a&gt; filter methods cannot process the image.</source>
          <target state="translated">&lt;code&gt;ImagingOpException&lt;/code&gt; は、の1つがスローされる&lt;a href=&quot;bufferedimageop&quot;&gt; &lt;code&gt;BufferedImageOp&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;rasterop&quot;&gt; &lt;code&gt;RasterOp&lt;/code&gt; &lt;/a&gt;フィルタメソッドがイメージを処理できません。</target>
        </trans-unit>
        <trans-unit id="4d20fc48554b076450f5bcbb366190a701c2f94a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IndexColorModel&lt;/code&gt; class is a &lt;code&gt;ColorModel&lt;/code&gt; class that works with pixel values consisting of a single sample that is an index into a fixed colormap in the default sRGB color space.</source>
          <target state="translated">&lt;code&gt;IndexColorModel&lt;/code&gt; ののクラスは、 &lt;code&gt;ColorModel&lt;/code&gt; クラスそのデフォルトsRGB色空間内の固定カラーマップへのインデックスである、単一のサンプルからなるピクセル値を扱います。</target>
        </trans-unit>
        <trans-unit id="c39e7b4238b4a83b33e75a19112d55d420ed74fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;IndexColorModel&lt;/code&gt; class is a &lt;code&gt;ColorModel&lt;/code&gt; class that works with pixel values consisting of a single sample that is an index into a fixed colormap in the default sRGB color space. The colormap specifies red, green, blue, and optional alpha components corresponding to each index. All components are represented in the colormap as 8-bit unsigned integral values. Some constructors allow the caller to specify &quot;holes&quot; in the colormap by indicating which colormap entries are valid and which represent unusable colors via the bits set in a &lt;code&gt;BigInteger&lt;/code&gt; object. This color model is similar to an X11 PseudoColor visual.</source>
          <target state="translated">&lt;code&gt;IndexColorModel&lt;/code&gt; ののクラスは、 &lt;code&gt;ColorModel&lt;/code&gt; クラスそのデフォルトsRGB色空間内の固定カラーマップへのインデックスである、単一のサンプルからなるピクセル値を扱います。カラーマップは、各インデックスに対応する赤、緑、青、およびオプションのアルファコンポーネントを指定します。すべてのコンポーネントは、カラーマップで8ビットの符号なし整数値として表されます。一部のコンストラクターでは、 &lt;code&gt;BigInteger&lt;/code&gt; オブジェクトに設定されたビットを介して、有効なカラーマップエントリと使用できない色を表すカラーマップエントリを示すことにより、呼び出し元がカラーマップの「穴」を指定できます。このカラーモデルは、X11PseudoColorビジュアルに似ています。</target>
        </trans-unit>
        <trans-unit id="e251dbab4e4c6456b16648f06dec35662b5945d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;InputStream&lt;/code&gt; object that will be returned by the method &lt;code&gt;getAsciiStream&lt;/code&gt;, which is specified in the &lt;code&gt;ResultSet&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; メソッドによって返されるオブジェクト &lt;code&gt;getAsciiStream&lt;/code&gt; で指定され &lt;code&gt;ResultSet&lt;/code&gt; インタフェース。</target>
        </trans-unit>
        <trans-unit id="a1bc6fa075667b1fa7aa96914f9db9e346cff621" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;InputStream&lt;/code&gt; object that will be returned by the method &lt;code&gt;getBinaryStream&lt;/code&gt;, which is specified in the &lt;code&gt;ResultSet&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; メソッドによって返されるオブジェクト &lt;code&gt;getBinaryStream&lt;/code&gt; をで指定され &lt;code&gt;ResultSet&lt;/code&gt; インタフェース。</target>
        </trans-unit>
        <trans-unit id="caeca15b76441775ba23041b93cdbba02f7befa7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;InputStream&lt;/code&gt; object that will be returned by the method &lt;code&gt;getUnicodeStream&lt;/code&gt;, which is specified in the &lt;code&gt;ResultSet&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; メソッドによって返されるオブジェクト &lt;code&gt;getUnicodeStream&lt;/code&gt; で指定され &lt;code&gt;ResultSet&lt;/code&gt; インタフェース。</target>
        </trans-unit>
        <trans-unit id="c187ac2b0346d6275a729d49e9e4b70887e64296" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Integer&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;int&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Integer&lt;/code&gt; クラスは、プリミティブ型の値をラップします &lt;code&gt;int&lt;/code&gt; 型のオブジェクトでは。</target>
        </trans-unit>
        <trans-unit id="62ec9068383653f569a3d3699ea099197809c35d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Integer&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;int&lt;/code&gt; in an object. An object of type &lt;code&gt;Integer&lt;/code&gt; contains a single field whose type is &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Integer&lt;/code&gt; クラスは、プリミティブ型の値をラップします &lt;code&gt;int&lt;/code&gt; 型のオブジェクトでは。 &lt;code&gt;Integer&lt;/code&gt; 型のオブジェクトには、型が &lt;code&gt;int&lt;/code&gt; の単一フィールドが含まれます。</target>
        </trans-unit>
        <trans-unit id="e3cc2ea1e526b831184aee5221e0c845f7fee4f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JApplet&lt;/code&gt; class is slightly incompatible with &lt;code&gt;java.applet.Applet&lt;/code&gt;. &lt;code&gt;JApplet&lt;/code&gt; contains a &lt;code&gt;JRootPane&lt;/code&gt; as its only child. The &lt;code&gt;contentPane&lt;/code&gt; should be the parent of any children of the &lt;code&gt;JApplet&lt;/code&gt;. As a convenience, the &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;setLayout&lt;/code&gt; methods of this class are overridden, so that they delegate calls to the corresponding methods of the &lt;code&gt;ContentPane&lt;/code&gt;. For example, you can add a child component to an applet as follows:</source>
          <target state="translated">&lt;code&gt;JApplet&lt;/code&gt; のクラスでは、と少し互換性がありません &lt;code&gt;java.applet.Applet&lt;/code&gt; 。 &lt;code&gt;JApplet&lt;/code&gt; には、唯一の子として &lt;code&gt;JRootPane&lt;/code&gt; が含まれています。 &lt;code&gt;contentPane&lt;/code&gt; の子の親である必要があり &lt;code&gt;JApplet&lt;/code&gt; の。便宜上、このクラスの &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;remove&lt;/code&gt; 、および &lt;code&gt;setLayout&lt;/code&gt; メソッドはオーバーライドされるため、 &lt;code&gt;ContentPane&lt;/code&gt; の対応するメソッドへの呼び出しを委任します。たとえば、次のように子コンポーネントをアプレットに追加できます。</target>
        </trans-unit>
        <trans-unit id="c87e4f76b89a70ad69cce55f17acc2797e0c21d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JComponent&lt;/code&gt; class provides:</source>
          <target state="translated">&lt;code&gt;JComponent&lt;/code&gt; クラスが用意されています。</target>
        </trans-unit>
        <trans-unit id="9664c24520dfd0acb583ed66d3f527d0092afdf0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JDBCType&lt;/code&gt; constant</source>
          <target state="translated">&lt;code&gt;JDBCType&lt;/code&gt; の定数</target>
        </trans-unit>
        <trans-unit id="388596c6d2e1a4932d64b2200c1465e4d8741ed5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JDIPermission&lt;/code&gt; class represents access rights to the &lt;code&gt;VirtualMachineManager&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cefae284586aab944db856f3d455db32f414e442" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JDIPermission&lt;/code&gt; class represents access rights to the &lt;code&gt;VirtualMachineManager&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f2d717e6db87a9219209780dac2a1cd16fb18b02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JDIPermission&lt;/code&gt; class represents access rights to the &lt;code&gt;VirtualMachineManager&lt;/code&gt;. This is the permission which the SecurityManager will check when code that is running with a SecurityManager requests access to the VirtualMachineManager, as defined in the Java Debug Interface (JDI) for the Java platform.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a831a7ab2166f42212b45436e662aa3eac54b072" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JDialog&lt;/code&gt; component contains a &lt;code&gt;JRootPane&lt;/code&gt; as its only child. The &lt;code&gt;contentPane&lt;/code&gt; should be the parent of any children of the &lt;code&gt;JDialog&lt;/code&gt;. As a convenience, the &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;setLayout&lt;/code&gt; methods of this class are overridden, so that they delegate calls to the corresponding methods of the &lt;code&gt;ContentPane&lt;/code&gt;. For example, you can add a child component to a dialog as follows:</source>
          <target state="translated">&lt;code&gt;JDialog&lt;/code&gt; ののコンポーネントが含まれている &lt;code&gt;JRootPane&lt;/code&gt; 唯一の子として。 &lt;code&gt;contentPane&lt;/code&gt; のすべての子の親にする必要があります &lt;code&gt;JDialog&lt;/code&gt; 。便宜上、このクラスの &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;remove&lt;/code&gt; 、および &lt;code&gt;setLayout&lt;/code&gt; メソッドはオーバーライドされるため、 &lt;code&gt;ContentPane&lt;/code&gt; の対応するメソッドへの呼び出しを委任します。たとえば、次のようにダイアログに子コンポーネントを追加できます。</target>
        </trans-unit>
        <trans-unit id="4c6f8bb9754f43f02a3b0b1938083fdf7b145a73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JFrame&lt;/code&gt; class is slightly incompatible with &lt;code&gt;Frame&lt;/code&gt;. Like all other JFC/Swing top-level containers, a &lt;code&gt;JFrame&lt;/code&gt; contains a &lt;code&gt;JRootPane&lt;/code&gt; as its only child. The &lt;b&gt;content pane&lt;/b&gt; provided by the root pane should, as a rule, contain all the non-menu components displayed by the &lt;code&gt;JFrame&lt;/code&gt;. This is different from the AWT &lt;code&gt;Frame&lt;/code&gt; case. As a convenience, the &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;setLayout&lt;/code&gt; methods of this class are overridden, so that they delegate calls to the corresponding methods of the &lt;code&gt;ContentPane&lt;/code&gt;. For example, you can add a child component to a frame as follows:</source>
          <target state="translated">&lt;code&gt;JFrame&lt;/code&gt; ののクラスは、と少し互換性がありません &lt;code&gt;Frame&lt;/code&gt; 。他のすべてのJFC / Swingトップレベルコンテナと同様に、 &lt;code&gt;JFrame&lt;/code&gt; には唯一の子として &lt;code&gt;JRootPane&lt;/code&gt; が含まれています。&lt;b&gt;コンテンツペイン&lt;/b&gt;ルート区画が提供するには、原則として、すべての非メニューコンポーネントはで表示含まれている必要があり &lt;code&gt;JFrame&lt;/code&gt; の。これは、AWT &lt;code&gt;Frame&lt;/code&gt; 場合とは異なります。便宜上、このクラスの &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;remove&lt;/code&gt; 、および &lt;code&gt;setLayout&lt;/code&gt; メソッドはオーバーライドされるため、 &lt;code&gt;ContentPane&lt;/code&gt; の対応するメソッドへの呼び出しを委任します。たとえば、次のように子コンポーネントをフレームに追加できます。</target>
        </trans-unit>
        <trans-unit id="0d81a30c0184c34b3c691afdfe0e670e454d6d68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JInternalFrame&lt;/code&gt; content pane is where you add child components. As a convenience, the &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;setLayout&lt;/code&gt; methods of this class are overridden, so that they delegate calls to the corresponding methods of the &lt;code&gt;ContentPane&lt;/code&gt;. For example, you can add a child component to an internal frame as follows:</source>
          <target state="translated">&lt;code&gt;JInternalFrame&lt;/code&gt; のあなたは子コンポーネントを追加する場所、コンテンツペインがあります。便宜上、このクラスの &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;remove&lt;/code&gt; 、および &lt;code&gt;setLayout&lt;/code&gt; メソッドはオーバーライドされるため、 &lt;code&gt;ContentPane&lt;/code&gt; の対応するメソッドへの呼び出しを委任します。たとえば、次のように子コンポーネントを内部フレームに追加できます。</target>
        </trans-unit>
        <trans-unit id="c23196121f172d1a13c98018c082ac9f69ce7b6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JLayer&lt;/code&gt; overrides the default implementation of this method (in &lt;code&gt;JComponent&lt;/code&gt;) to return &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JLayer&lt;/code&gt; は（このメソッドのデフォルト実装よりも優先されます &lt;code&gt;JComponent&lt;/code&gt; のを返すように） &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e9fdfd0369de3e98d177d6c9f03bc43faf0e048f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JLayer&lt;/code&gt; overrides the default implementation of this method (in &lt;code&gt;JComponent&lt;/code&gt;) to return &lt;code&gt;false&lt;/code&gt;. This ensures that the drawing machinery will call the &lt;code&gt;JLayer&lt;/code&gt;'s &lt;code&gt;paint&lt;/code&gt; implementation rather than messaging the &lt;code&gt;JLayer&lt;/code&gt;'s children directly.</source>
          <target state="translated">&lt;code&gt;JLayer&lt;/code&gt; は（このメソッドのデフォルト実装よりも優先されます &lt;code&gt;JComponent&lt;/code&gt; のを返すように） &lt;code&gt;false&lt;/code&gt; 。これにより、描画機構は、 &lt;code&gt;JLayer&lt;/code&gt; の子に直接メッセージを送信するのではなく、 &lt;code&gt;JLayer&lt;/code&gt; の &lt;code&gt;paint&lt;/code&gt; 実装を呼び出すようになります。</target>
        </trans-unit>
        <trans-unit id="9b25ba63894710fd4b97499052886e621a382f62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JLayeredPane&lt;/code&gt; methods &lt;code&gt;moveToFront(Component)&lt;/code&gt;, &lt;code&gt;moveToBack(Component)&lt;/code&gt; and &lt;code&gt;setPosition&lt;/code&gt; can be used to reposition a component within its layer. The &lt;code&gt;setLayer&lt;/code&gt; method can also be used to change the component's current layer.</source>
          <target state="translated">&lt;code&gt;JLayeredPane&lt;/code&gt; の方法 &lt;code&gt;moveToFront(Component)&lt;/code&gt; 、 &lt;code&gt;moveToBack(Component)&lt;/code&gt; と &lt;code&gt;setPosition&lt;/code&gt; は、その層内にコンポーネントを再配置するために使用することができます。 &lt;code&gt;setLayer&lt;/code&gt; の方法はまた、コンポーネントの現在のレイヤを変更するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="3fa5f36d971e7676ba7ab51f2c1dff644147234e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JList&lt;/code&gt; pluggable look and feel delegate.</source>
          <target state="translated">&lt;code&gt;JList&lt;/code&gt; のプラグイン可能なルックアンドフィールのデリゲート。</target>
        </trans-unit>
        <trans-unit id="4049b86463133a049acc0748eb8f415baf880f7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JMenuItem&lt;/code&gt; subclasses only use &lt;code&gt;SMALL_ICON&lt;/code&gt;. All other buttons will use &lt;code&gt;LARGE_ICON_KEY&lt;/code&gt;; if the value is &lt;code&gt;null&lt;/code&gt; they use &lt;code&gt;SMALL_ICON&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JMenuItem&lt;/code&gt; のサブクラスにのみ使用 &lt;code&gt;SMALL_ICON&lt;/code&gt; を。他のすべてのボタンは &lt;code&gt;LARGE_ICON_KEY&lt;/code&gt; を使用します; 値が &lt;code&gt;null&lt;/code&gt; の場合、 &lt;code&gt;SMALL_ICON&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="bad30b8acbde953843755f85584b7f2c2c30a621" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JRootPane&lt;/code&gt; instance that manages the &lt;code&gt;contentPane&lt;/code&gt; and optional &lt;code&gt;menuBar&lt;/code&gt; for this frame, as well as the &lt;code&gt;glassPane&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JRootPane&lt;/code&gt; の管理インスタンス &lt;code&gt;contentPane&lt;/code&gt; およびオプションの &lt;code&gt;menuBar&lt;/code&gt; このフレームについて、同様 &lt;code&gt;glassPane&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9e586e2a981f3a761025c512ea04c3022aef07c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JRootPane&lt;/code&gt; instance that manages the content pane and optional menu bar for this internal frame, as well as the glass pane.</source>
          <target state="translated">&lt;code&gt;JRootPane&lt;/code&gt; のこの内部フレームのコンテンツ区画およびオプションのメニューバーを管理し、インスタンスだけでなく、窓ガラス。</target>
        </trans-unit>
        <trans-unit id="0d07b328936474f5cbbebe738dfdc36bb3225929" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JTable&lt;/code&gt; can be set up to display any data model which implements the &lt;code&gt;TableModel&lt;/code&gt; interface with a couple of lines of code:</source>
          <target state="translated">&lt;code&gt;JTable&lt;/code&gt; は実装する任意のデータ・モデルを表示するように設定することができる &lt;code&gt;TableModel&lt;/code&gt; コードの行のカップルとのインタフェースを：</target>
        </trans-unit>
        <trans-unit id="a3d4d072368811da647b5501228f64bdae7b15e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JTable&lt;/code&gt; has many facilities that make it possible to customize its rendering and editing but provides defaults for these features so that simple tables can be set up easily. For example, to set up a table with 10 rows and 10 columns of numbers:</source>
          <target state="translated">&lt;code&gt;JTable&lt;/code&gt; はそのレンダリングと編集をカスタマイズすることを可能にする多くの施設を持っているが、これらのデフォルトを提供する単純なテーブルが簡単に設定することができますので、ことを特徴としています。たとえば、10行10列の数値を持つテーブルを設定するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="d75024b5e7e8d1ed02fdad9eaac5c7a8ad84f616" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JTable&lt;/code&gt; is used to display and edit regular two-dimensional tables of cells.</source>
          <target state="translated">&lt;code&gt;JTable&lt;/code&gt; は、セルの通常の2次元テーブルを表示および編集するために使用されます。</target>
        </trans-unit>
        <trans-unit id="95c8ac8d733cd5732fb777b006412d36181496a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JTable&lt;/code&gt; is used to display and edit regular two-dimensional tables of cells. See &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/table.html&quot;&gt;How to Use Tables&lt;/a&gt; in &lt;em&gt;The Java Tutorial&lt;/em&gt; for task-oriented documentation and examples of using &lt;code&gt;JTable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JTable&lt;/code&gt; は、セルの通常の2次元テーブルを表示および編集するために使用されます。タスク指向のドキュメントと &lt;code&gt;JTable&lt;/code&gt; の使用例については&lt;em&gt;、Javaチュートリアルの&lt;/em&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/table.html&quot;&gt;テーブルの使用方法を&lt;/a&gt;参照してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1c56b0c42ec4f2e67652a49d5e1a2872f069470a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JTable&lt;/code&gt; is used to display and edit regular two-dimensional tables of cells. See &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/uiswing/components/table.html&quot;&gt;How to Use Tables&lt;/a&gt; in &lt;em&gt;The Java Tutorial&lt;/em&gt; for task-oriented documentation and examples of using &lt;code&gt;JTable&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="52d2ad87ac37fdf47838a9cdfaacb2e8a02c95c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JTable&lt;/code&gt; uses integers exclusively to refer to both the rows and the columns of the model that it displays. The &lt;code&gt;JTable&lt;/code&gt; simply takes a tabular range of cells and uses &lt;code&gt;getValueAt(int, int)&lt;/code&gt; to retrieve the values from the model during painting. It is important to remember that the column and row indexes returned by various &lt;code&gt;JTable&lt;/code&gt; methods are in terms of the &lt;code&gt;JTable&lt;/code&gt; (the view) and are not necessarily the same indexes used by the model.</source>
          <target state="translated">&lt;code&gt;JTable&lt;/code&gt; はそれが表示されていることを行とモデルの列の両方を参照するために専用の整数を使用しています。 &lt;code&gt;JTable&lt;/code&gt; は単に細胞の平板範囲をとり、使用 &lt;code&gt;getValueAt(int, int)&lt;/code&gt; 塗装中にモデルから値を取得します。さまざまな &lt;code&gt;JTable&lt;/code&gt; メソッドによって返される列インデックスと行インデックスは &lt;code&gt;JTable&lt;/code&gt; （ビュー）に関するものであり、モデルで使用されるインデックスと必ずしも同じではないことを覚えておくことが重要です。</target>
        </trans-unit>
        <trans-unit id="ff3cf78ab641e58b2c5ec4479c84cee89110d041" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JTableHeader&lt;/code&gt; that is delegating the painting to this UI.</source>
          <target state="translated">&lt;code&gt;JTableHeader&lt;/code&gt; でこのUIにペイントを委譲しています。</target>
        </trans-unit>
        <trans-unit id="eaa7c23e7e2bbbc13aa330255c3995984f627edd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JViewport&lt;/code&gt; overrides the default implementation of this method (in &lt;code&gt;JComponent&lt;/code&gt;) to return false.</source>
          <target state="translated">&lt;code&gt;JViewport&lt;/code&gt; のは（このメソッドのデフォルト実装よりも優先されます &lt;code&gt;JComponent&lt;/code&gt; のを偽を返すように）。</target>
        </trans-unit>
        <trans-unit id="ec409845719307e978c8e91fb5b03ac6a0c35b35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JViewport&lt;/code&gt; overrides the default implementation of this method (in &lt;code&gt;JComponent&lt;/code&gt;) to return false. This ensures that the drawing machinery will call the &lt;code&gt;Viewport&lt;/code&gt;'s &lt;code&gt;paint&lt;/code&gt; implementation rather than messaging the &lt;code&gt;JViewport&lt;/code&gt;'s children directly.</source>
          <target state="translated">&lt;code&gt;JViewport&lt;/code&gt; のは（このメソッドのデフォルト実装よりも優先されます &lt;code&gt;JComponent&lt;/code&gt; のを偽を返すように）。これにより、描画機構は、 &lt;code&gt;JViewport&lt;/code&gt; の子に直接メッセージを送信するのではなく、 &lt;code&gt;Viewport&lt;/code&gt; の &lt;code&gt;paint&lt;/code&gt; 実装を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="364d8fc3bc9081a3dc1c6702ea2ad91b7e71cea4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JViewport&lt;/code&gt; provides a window, or &quot;viewport&quot; onto a data source -- for example, a text file. That data source is the &quot;scrollable client&quot; (aka data model) displayed by the &lt;code&gt;JViewport&lt;/code&gt; view. A &lt;code&gt;JScrollPane&lt;/code&gt; basically consists of &lt;code&gt;JScrollBar&lt;/code&gt;s, a &lt;code&gt;JViewport&lt;/code&gt;, and the wiring between them, as shown in the diagram at right.</source>
          <target state="translated">&lt;code&gt;JViewport&lt;/code&gt; のは、データ・ソース上にウィンドウ、または「ビューポート」を提供-たとえば、テキストファイルを。そのデータソースは、 &lt;code&gt;JViewport&lt;/code&gt; ビューによって表示される「スクロール可能なクライアント」（別名データモデル）です。A &lt;code&gt;JScrollPane&lt;/code&gt; のは基本的にから構成 &lt;code&gt;JScrollBar&lt;/code&gt; S、 &lt;code&gt;JViewport&lt;/code&gt; の右図に示すように、それらの間の配線。</target>
        </trans-unit>
        <trans-unit id="911161a28dc237dab5002e98139e60480a1f84cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JWindow&lt;/code&gt; component contains a &lt;code&gt;JRootPane&lt;/code&gt; as its only child. The &lt;code&gt;contentPane&lt;/code&gt; should be the parent of any children of the &lt;code&gt;JWindow&lt;/code&gt;. As a convenience, the &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;setLayout&lt;/code&gt; methods of this class are overridden, so that they delegate calls to the corresponding methods of the &lt;code&gt;ContentPane&lt;/code&gt;. For example, you can add a child component to a window as follows:</source>
          <target state="translated">&lt;code&gt;JWindow&lt;/code&gt; ののコンポーネントが含まれている &lt;code&gt;JRootPane&lt;/code&gt; 唯一の子として。 &lt;code&gt;contentPane&lt;/code&gt; の子の親であるべき &lt;code&gt;JWindow&lt;/code&gt; 。便宜上、このクラスの &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;remove&lt;/code&gt; 、および &lt;code&gt;setLayout&lt;/code&gt; メソッドはオーバーライドされるため、 &lt;code&gt;ContentPane&lt;/code&gt; の対応するメソッドへの呼び出しを委任します。たとえば、次のように子コンポーネントをウィンドウに追加できます。</target>
        </trans-unit>
        <trans-unit id="10e129e33f3b53fc80b1e431c4205e048b0ed9d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarFile&lt;/code&gt; class is used to read the contents of a jar file from any file that can be opened with &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JarFile&lt;/code&gt; クラスはで開くことができる任意のファイルからjarファイルの内容を読み取るために使用される &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7d1581e89607230d16b5c39df532a61304a21e47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarFile&lt;/code&gt; class is used to read the contents of a jar file from any file that can be opened with &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt;. It extends the class &lt;code&gt;java.util.zip.ZipFile&lt;/code&gt; with support for reading an optional &lt;code&gt;Manifest&lt;/code&gt; entry, and support for processing multi-release jar files. The &lt;code&gt;Manifest&lt;/code&gt; can be used to specify meta-information about the jar file and its entries.</source>
          <target state="translated">&lt;code&gt;JarFile&lt;/code&gt; クラスはで開くことができる任意のファイルからjarファイルの内容を読み取るために使用される &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt; 。これは、クラス &lt;code&gt;java.util.zip.ZipFile&lt;/code&gt; を拡張して、オプションの &lt;code&gt;Manifest&lt;/code&gt; エントリの読み取りをサポートし、マルチリリースjarファイルの処理をサポートします。 &lt;code&gt;Manifest&lt;/code&gt; 、JARファイルとそのエントリのメタ情報を指定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="7fc173f631c97a9b4dcc50fc6b42b14623acad99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarFile&lt;/code&gt; class is used to read the contents of a jar file from any file that can be opened with &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt;. It extends the class &lt;code&gt;java.util.zip.ZipFile&lt;/code&gt; with support for reading an optional &lt;code&gt;Manifest&lt;/code&gt; entry. The &lt;code&gt;Manifest&lt;/code&gt; can be used to specify meta-information about the jar file and its entries.</source>
          <target state="translated">&lt;code&gt;JarFile&lt;/code&gt; クラスはで開くことができる任意のファイルからjarファイルの内容を読み取るために使用される &lt;code&gt;java.io.RandomAccessFile&lt;/code&gt; 。クラス &lt;code&gt;java.util.zip.ZipFile&lt;/code&gt; を拡張して、オプションの &lt;code&gt;Manifest&lt;/code&gt; エントリの読み取りをサポートします。 &lt;code&gt;Manifest&lt;/code&gt; 、JARファイルとそのエントリのメタ情報を指定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="9792439c8b85ffb254058fa07ee9e18ecd9179ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarInputStream&lt;/code&gt; class is used to read the contents of a JAR file from any input stream.</source>
          <target state="translated">&lt;code&gt;JarInputStream&lt;/code&gt; のクラスは、任意の入力ストリームからJARファイルの内容を読み取るために使用されます。</target>
        </trans-unit>
        <trans-unit id="69fcbab6dd2a8326db4e277f74e623e45080d92f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarInputStream&lt;/code&gt; class is used to read the contents of a JAR file from any input stream. It extends the class &lt;code&gt;java.util.zip.ZipInputStream&lt;/code&gt; with support for reading an optional &lt;code&gt;Manifest&lt;/code&gt; entry. The &lt;code&gt;Manifest&lt;/code&gt; can be used to store meta-information about the JAR file and its entries.</source>
          <target state="translated">&lt;code&gt;JarInputStream&lt;/code&gt; のクラスは、任意の入力ストリームからJARファイルの内容を読み取るために使用されます。クラス &lt;code&gt;java.util.zip.ZipInputStream&lt;/code&gt; を拡張して、オプションの &lt;code&gt;Manifest&lt;/code&gt; エントリの読み取りをサポートします。 &lt;code&gt;Manifest&lt;/code&gt; JARファイルとそのエントリのメタ情報を格納するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="b21ac43a5a90b457145ee7b48bcabedf9e126557" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarOutputStream&lt;/code&gt; class is used to write the contents of a JAR file to any output stream.</source>
          <target state="translated">&lt;code&gt;JarOutputStream&lt;/code&gt; のクラスは、任意の出力ストリームにJARファイルの内容を書き込むために使用されます。</target>
        </trans-unit>
        <trans-unit id="8e11ba91a7108003e4972a4752848ed577893864" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JarOutputStream&lt;/code&gt; class is used to write the contents of a JAR file to any output stream. It extends the class &lt;code&gt;java.util.zip.ZipOutputStream&lt;/code&gt; with support for writing an optional &lt;code&gt;Manifest&lt;/code&gt; entry. The &lt;code&gt;Manifest&lt;/code&gt; can be used to specify meta-information about the JAR file and its entries.</source>
          <target state="translated">&lt;code&gt;JarOutputStream&lt;/code&gt; のクラスは、任意の出力ストリームにJARファイルの内容を書き込むために使用されます。クラス &lt;code&gt;java.util.zip.ZipOutputStream&lt;/code&gt; を拡張して、オプションの &lt;code&gt;Manifest&lt;/code&gt; エントリの書き込みをサポートします。 &lt;code&gt;Manifest&lt;/code&gt; JARファイルとそのエントリのメタ情報を指定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="3aedd1952b22868e880c731ee5f88710d33b43b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JdbcRowSet&lt;/code&gt; describes a &lt;code&gt;RowSet&lt;/code&gt; object that &lt;b&gt;must&lt;/b&gt; always be connected to the originating data source. Implementations of the &lt;code&gt;JdbcRowSet&lt;/code&gt; should ensure that this connection is provided solely by a JDBC driver. Furthermore, &lt;code&gt;RowSet&lt;/code&gt; objects that are implementations of the &lt;code&gt;JdbcRowSet&lt;/code&gt; interface and are therefore operating in a connected environment do not use the &lt;code&gt;SyncFactory&lt;/code&gt; to obtain a &lt;code&gt;RowSetReader&lt;/code&gt; object or a &lt;code&gt;RowSetWriter&lt;/code&gt; object. They can safely rely on the JDBC driver to supply their needs by virtue of the presence of an underlying updatable and scrollable &lt;code&gt;ResultSet&lt;/code&gt; implementation.</source>
          <target state="translated">&lt;code&gt;JdbcRowSet&lt;/code&gt; は、説明 &lt;code&gt;RowSet&lt;/code&gt; オブジェクト&lt;b&gt;必要があり&lt;/b&gt;、常に元のデータソースに接続することを。 &lt;code&gt;JdbcRowSet&lt;/code&gt; の実装では、この接続がJDBCドライバーによってのみ提供されるようにする必要があります。また、 &lt;code&gt;RowSet&lt;/code&gt; の実装であるオブジェクト &lt;code&gt;JdbcRowSet&lt;/code&gt; のインターフェースとは、したがって、使用しない接続された環境で動作している &lt;code&gt;SyncFactory&lt;/code&gt; がを得るため &lt;code&gt;RowSetReader&lt;/code&gt; のオブジェクトや &lt;code&gt;RowSetWriter&lt;/code&gt; のオブジェクト。基盤となる更新可能でスクロール可能な &lt;code&gt;ResultSet&lt;/code&gt; 実装が存在するため、JDBCドライバーに安全に依存してニーズを提供できます。</target>
        </trans-unit>
        <trans-unit id="93d19fc52241eaae58b0fd1278f2e42630f9be60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JobImpressions&lt;/code&gt; attribute describes the size of the job. This attribute is not intended to be a counter; it is intended to be useful routing and scheduling information if known. The printer may try to compute the &lt;code&gt;JobImpressions&lt;/code&gt; attribute's value if it is not supplied in the Print Request. Even if the client does supply a value for the &lt;code&gt;JobImpressions&lt;/code&gt; attribute in the Print Request, the printer may choose to change the value if the printer is able to compute a value which is more accurate than the client supplied value. The printer may be able to determine the correct value for the &lt;code&gt;JobImpressions&lt;/code&gt; attribute either right at job submission time or at any later point in time.</source>
          <target state="translated">&lt;code&gt;JobImpressions&lt;/code&gt; の属性は、ジョブのサイズを記述しています。この属性は、カウンターを意図したものではありません。わかっている場合は、有用なルーティングおよびスケジューリング情報となることを目的としています。印刷要求で指定されていない場合、プリンターは &lt;code&gt;JobImpressions&lt;/code&gt; 属性の値を計算しようとする場合があります。クライアントが印刷要求で &lt;code&gt;JobImpressions&lt;/code&gt; 属性の値を指定した場合でも、プリンターがクライアントが指定した値よりも正確な値を計算できる場合、プリンターは値を変更することを選択できます。プリンターは、ジョブの &lt;code&gt;JobImpressions&lt;/code&gt; 時またはそれ以降の任意の時点で、JobImpressions属性の正しい値を判別できる場合があります。</target>
        </trans-unit>
        <trans-unit id="e4bddb97de4263dfb682eb09a9a222bc995bd9ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JobImpressionsCompleted&lt;/code&gt; attribute describes the progress of the job. This attribute is intended to be a counter. That is, the &lt;code&gt;JobImpressionsCompleted&lt;/code&gt; value for a job that has not started processing must be 0. When the job's &lt;a href=&quot;jobstate&quot;&gt;&lt;code&gt;JobState&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;PROCESSING&lt;/code&gt; or &lt;code&gt;PROCESSING_STOPPED&lt;/code&gt;, the &lt;code&gt;JobImpressionsCompleted&lt;/code&gt; value is intended to increase as the job is processed; it indicates the amount of the job that has been processed at the time the Print Job's attribute set is queried or at the time a print job event is reported. When the job enters the &lt;code&gt;COMPLETED&lt;/code&gt;, &lt;code&gt;CANCELED&lt;/code&gt;, or &lt;code&gt;ABORTED&lt;/code&gt; states, the &lt;code&gt;JobImpressionsCompleted&lt;/code&gt; value is the final value for the job.</source>
          <target state="translated">&lt;code&gt;JobImpressionsCompleted&lt;/code&gt; の属性は、ジョブの進行状況を説明しています。この属性は、カウンターになることを目的としています。つまり、処理を開始していないジョブの &lt;code&gt;JobImpressionsCompleted&lt;/code&gt; 値は0である必要があります。ジョブの&lt;a href=&quot;jobstate&quot;&gt; &lt;code&gt;JobState&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;PROCESSING&lt;/code&gt; または &lt;code&gt;PROCESSING_STOPPED&lt;/code&gt; の場合、 &lt;code&gt;JobImpressionsCompleted&lt;/code&gt; 値はジョブが処理されるにつれて増加することを目的としています。これは、印刷ジョブの属性セットが照会されたとき、または印刷ジョブイベントが報告されたときに処理されたジョブの量を示します。ジョブが入ると &lt;code&gt;COMPLETED&lt;/code&gt; 、 &lt;code&gt;CANCELED&lt;/code&gt; 、または &lt;code&gt;ABORTED&lt;/code&gt; 状態を、 &lt;code&gt;JobImpressionsCompleted&lt;/code&gt; 値は、ジョブの最終値です。</target>
        </trans-unit>
        <trans-unit id="9d42b11af45864561098fb5e73382d34ce4fcf25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JobKOctets&lt;/code&gt; attribute describes the size of the job. This attribute is not intended to be a counter; it is intended to be useful routing and scheduling information if known. The printer may try to compute the &lt;code&gt;JobKOctets&lt;/code&gt; attribute's value if it is not supplied in the Print Request. Even if the client does supply a value for the &lt;code&gt;JobKOctets&lt;/code&gt; attribute in the Print Request, the printer may choose to change the value if the printer is able to compute a value which is more accurate than the client supplied value. The printer may be able to determine the correct value for the &lt;code&gt;JobKOctets&lt;/code&gt; attribute either right at job submission time or at any later point in time.</source>
          <target state="translated">&lt;code&gt;JobKOctets&lt;/code&gt; の属性は、ジョブのサイズを記述しています。この属性は、カウンターを意図したものではありません。わかっている場合は、有用なルーティングおよびスケジューリング情報となることを目的としています。印刷要求で指定されていない場合、プリンターは &lt;code&gt;JobKOctets&lt;/code&gt; 属性の値を計算しようとする場合があります。クライアントが印刷要求で &lt;code&gt;JobKOctets&lt;/code&gt; 属性の値を提供した場合でも、プリンターがクライアントが提供した値よりも正確な値を計算できる場合、プリンターは値を変更することを選択できます。プリンターは、ジョブの送信時またはそれ以降の任意の時点で、 &lt;code&gt;JobKOctets&lt;/code&gt; 属性の正しい値を判別できる場合があります。</target>
        </trans-unit>
        <trans-unit id="f7855cd53d43de6e01d828f80467a04fb5f73419" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JobKOctets&lt;/code&gt; value must also not include the multiplicative factor due to a copies instruction embedded in the document data. If the document data actually includes replications of the document data, this value will include such replication. In other words, this value is always the size of the source document data, rather than a measure of the hardcopy output to be produced.</source>
          <target state="translated">&lt;code&gt;JobKOctets&lt;/code&gt; の値はまた、文書データに埋め込まれたコピー命令に乗法因子を含んではなりません。ドキュメントデータに実際にドキュメントデータの複製が含まれている場合、この値にはそのような複製が含まれます。つまり、この値は、生成されるハードコピー出力の測定値ではなく、常にソースドキュメントデータのサイズです。</target>
        </trans-unit>
        <trans-unit id="2f05f1d9f8bcaade508d2f1e15f4c164149584d9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JobKOctets&lt;/code&gt; value must not include the multiplicative factors contributed by the number of copies specified by the &lt;a href=&quot;copies&quot;&gt;&lt;code&gt;Copies&lt;/code&gt;&lt;/a&gt; attribute, independent of whether the device can process multiple copies without making multiple passes over the job or document data and independent of whether the output is collated or not. Thus the value is independent of the implementation and indicates the size of the document(s) measured in K octets independent of the number of copies.</source>
          <target state="translated">&lt;code&gt;JobKOctets&lt;/code&gt; の値によって指定された部数が寄与する乗法因子含んではならない&lt;a href=&quot;copies&quot;&gt; &lt;code&gt;Copies&lt;/code&gt; &lt;/a&gt;出力が照合されているかどうか、デバイスがジョブまたはドキュメントデータに対して複数のパスを作ることなく、複数のコピーを処理することができるかどうかとは無関係の独立した属性を、 。したがって、値は実装に依存せず、コピー数に関係なくKオクテットで測定されたドキュメントのサイズを示します。</target>
        </trans-unit>
        <trans-unit id="0fc8388eff666e0318b26f69b533a081e5ec0d2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JobKOctetsProcessed&lt;/code&gt; attribute describes the progress of the job. This attribute is intended to be a counter. That is, the JobKOctetsProcessed value for a job that has not started processing must be 0. When the job's &lt;a href=&quot;jobstate&quot;&gt;&lt;code&gt;JobState&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;PROCESSING&lt;/code&gt; or &lt;code&gt;PROCESSING_STOPPED&lt;/code&gt;, the &lt;code&gt;JobKOctetsProcessed&lt;/code&gt; value is intended to increase as the job is processed; it indicates the amount of the job that has been processed at the time the Print Job's attribute set is queried or at the time a print job event is reported. When the job enters the &lt;code&gt;COMPLETED&lt;/code&gt;, &lt;code&gt;CANCELED&lt;/code&gt;, or &lt;code&gt;ABORTED&lt;/code&gt; states, the &lt;code&gt;JobKOctetsProcessed&lt;/code&gt; value is the final value for the job.</source>
          <target state="translated">&lt;code&gt;JobKOctetsProcessed&lt;/code&gt; 属性は、ジョブの進行状況を説明しています。この属性は、カウンターになることを目的としています。つまり、処理を開始していないジョブのJobKOctetsProcessed値は0である必要があります。ジョブの&lt;a href=&quot;jobstate&quot;&gt; &lt;code&gt;JobState&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;PROCESSING&lt;/code&gt; または &lt;code&gt;PROCESSING_STOPPED&lt;/code&gt; の場合、 &lt;code&gt;JobKOctetsProcessed&lt;/code&gt; 値は、ジョブが処理されるにつれて増加することを目的としています。これは、印刷ジョブの属性セットが照会されたとき、または印刷ジョブイベントが報告されたときに処理されたジョブの量を示します。ジョブが入るとき &lt;code&gt;COMPLETED&lt;/code&gt; 、 &lt;code&gt;CANCELED&lt;/code&gt; 、または &lt;code&gt;ABORTED&lt;/code&gt; 状態は、 &lt;code&gt;JobKOctetsProcessed&lt;/code&gt; valueは、ジョブの最終値です。</target>
        </trans-unit>
        <trans-unit id="ab80f243ababcbf1f4897af7dc0b241257af280a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JobMediaSheets&lt;/code&gt; attribute describes the size of the job. This attribute is not intended to be a counter; it is intended to be useful routing and scheduling information if known. The printer may try to compute the &lt;code&gt;JobMediaSheets&lt;/code&gt; attribute's value if it is not supplied in the Print Request. Even if the client does supply a value for the &lt;code&gt;JobMediaSheets&lt;/code&gt; attribute in the Print Request, the printer may choose to change the value if the printer is able to compute a value which is more accurate than the client supplied value. The printer may be able to determine the correct value for the &lt;code&gt;JobMediaSheets&lt;/code&gt; attribute either right at job submission time or at any later point in time.</source>
          <target state="translated">&lt;code&gt;JobMediaSheets&lt;/code&gt; の属性は、ジョブのサイズを記述しています。この属性は、カウンターを意図したものではありません。わかっている場合は、有用なルーティングおよびスケジューリング情報となることを目的としています。印刷要求で指定されていない場合、プリンターは &lt;code&gt;JobMediaSheets&lt;/code&gt; 属性の値を計算しようとする場合があります。クライアントが印刷要求で &lt;code&gt;JobMediaSheets&lt;/code&gt; 属性の値を提供した場合でも、プリンターがクライアントが提供した値よりも正確な値を計算できる場合、プリンターは値を変更することを選択できます。プリンタは、ジョブの &lt;code&gt;JobMediaSheets&lt;/code&gt; 時またはそれ以降の任意の時点で、JobMediaSheets属性の正しい値を判別できる場合があります。</target>
        </trans-unit>
        <trans-unit id="a54724fe6880322ea331b2b691cec67ddf2633f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JobMediaSheetsCompleted&lt;/code&gt; attribute describes the progress of the job. This attribute is intended to be a counter. That is, the &lt;code&gt;JobMediaSheetsCompleted&lt;/code&gt; value for a job that has not started processing must be 0. When the job's &lt;a href=&quot;jobstate&quot;&gt;&lt;code&gt;JobState&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;PROCESSING&lt;/code&gt; or &lt;code&gt;PROCESSING_STOPPED&lt;/code&gt;, the &lt;code&gt;JobMediaSheetsCompleted&lt;/code&gt; value is intended to increase as the job is processed; it indicates the amount of the job that has been processed at the time the Print Job's attribute set is queried or at the time a print job event is reported. When the job enters the &lt;code&gt;COMPLETED&lt;/code&gt;, &lt;code&gt;CANCELED&lt;/code&gt;, or &lt;code&gt;ABORTED&lt;/code&gt; states, the &lt;code&gt;JobMediaSheetsCompleted&lt;/code&gt; value is the final value for the job.</source>
          <target state="translated">&lt;code&gt;JobMediaSheetsCompleted&lt;/code&gt; の属性は、ジョブの進行状況を説明しています。この属性は、カウンターになることを目的としています。つまり、処理を開始していないジョブの &lt;code&gt;JobMediaSheetsCompleted&lt;/code&gt; 値は0である必要があります。ジョブの&lt;a href=&quot;jobstate&quot;&gt; &lt;code&gt;JobState&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;PROCESSING&lt;/code&gt; または &lt;code&gt;PROCESSING_STOPPED&lt;/code&gt; の場合、 &lt;code&gt;JobMediaSheetsCompleted&lt;/code&gt; 値はジョブが処理されるにつれて増加することを目的としています。これは、印刷ジョブの属性セットが照会されたとき、または印刷ジョブイベントが報告されたときに処理されたジョブの量を示します。ジョブが入ると &lt;code&gt;COMPLETED&lt;/code&gt; 、 &lt;code&gt;CANCELED&lt;/code&gt; 、または &lt;code&gt;ABORTED&lt;/code&gt; 状態を、 &lt;code&gt;JobMediaSheetsCompleted&lt;/code&gt; 値は、ジョブの最終値です。</target>
        </trans-unit>
        <trans-unit id="c444c9917a86296778e0e6b08a2e582e7061c85a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JoinRowSet&lt;/code&gt; interface makes it possible to get data from one or more &lt;code&gt;RowSet&lt;/code&gt; objects consolidated into one table without having to incur the expense of creating a connection to a database. It is therefore ideally suited for use by disconnected &lt;code&gt;RowSet&lt;/code&gt; objects. Nevertheless, any &lt;code&gt;RowSet&lt;/code&gt; object &lt;b&gt;may&lt;/b&gt; implement this interface regardless of whether it is connected or disconnected. Note that a &lt;code&gt;JdbcRowSet&lt;/code&gt; object, being always connected to its data source, can become part of an SQL &lt;code&gt;JOIN&lt;/code&gt; directly without having to become part of a &lt;code&gt;JoinRowSet&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;JoinRowSet&lt;/code&gt; インタフェースは、一つ以上からデータを取得することが可能となる &lt;code&gt;RowSet&lt;/code&gt; はデータベースへの接続を作成するための費用を負担することなく、1台に統合オブジェクト。したがって、切断された &lt;code&gt;RowSet&lt;/code&gt; オブジェクトでの使用に最適です。それにもかかわらず、任意 &lt;code&gt;RowSet&lt;/code&gt; オブジェクトが&lt;b&gt;できる&lt;/b&gt;かかわらず、それが接続または切断されているか否かのこのインタフェースを実装します。そのノート &lt;code&gt;JdbcRowSet&lt;/code&gt; に、常にそのデータ・ソースに接続されているオブジェクトは、SQLの一部になることが &lt;code&gt;JOIN&lt;/code&gt; の一部になることなく、直接 &lt;code&gt;JoinRowSet&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="f89488be2cadf79b9f6dad30abbc989807edfe33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JoinRowSet&lt;/code&gt; interface provides a mechanism for combining related data from different &lt;code&gt;RowSet&lt;/code&gt; objects into one &lt;code&gt;JoinRowSet&lt;/code&gt; object, which represents an SQL &lt;code&gt;JOIN&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JoinRowSet&lt;/code&gt; インタフェースが異なるから関連データを結合するための機構を提供 &lt;code&gt;RowSet&lt;/code&gt; 一つにオブジェクト &lt;code&gt;JoinRowSet&lt;/code&gt; SQL表すオブジェクト、 &lt;code&gt;JOIN&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="c1857f2dbacd9a2f415961fff2f3fc95dd362417" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JoinRowSet&lt;/code&gt; interface provides a mechanism for combining related data from different &lt;code&gt;RowSet&lt;/code&gt; objects into one &lt;code&gt;JoinRowSet&lt;/code&gt; object, which represents an SQL &lt;code&gt;JOIN&lt;/code&gt;. In other words, a &lt;code&gt;JoinRowSet&lt;/code&gt; object acts as a container for the data from &lt;code&gt;RowSet&lt;/code&gt; objects that form an SQL &lt;code&gt;JOIN&lt;/code&gt; relationship.</source>
          <target state="translated">&lt;code&gt;JoinRowSet&lt;/code&gt; インタフェースが異なるから関連データを結合するための機構を提供 &lt;code&gt;RowSet&lt;/code&gt; 一つにオブジェクト &lt;code&gt;JoinRowSet&lt;/code&gt; SQL表すオブジェクト、 &lt;code&gt;JOIN&lt;/code&gt; を。換言すれば、 &lt;code&gt;JoinRowSet&lt;/code&gt; からのデータのコンテナとしてオブジェクトが作用する &lt;code&gt;RowSet&lt;/code&gt; そのフォームSQLオブジェクト &lt;code&gt;JOIN&lt;/code&gt; 関係。</target>
        </trans-unit>
        <trans-unit id="7578c4dd8747a98c2f27b38c1875d232348cb143" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JoinRowSet&lt;/code&gt; interface supplies several methods for adding &lt;code&gt;RowSet&lt;/code&gt; objects and for getting information about the &lt;code&gt;JoinRowSet&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;JoinRowSet&lt;/code&gt; インタフェースは、追加するためのいくつかの方法を提供 &lt;code&gt;RowSet&lt;/code&gt; オブジェクトをして情報を取得するため &lt;code&gt;JoinRowSet&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="dc7199ca969d2a56a6e584a155cf8330e9b15154" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JoinRowSet&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;JoinRowSet&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="7a61ffc158a0daba9a2c2610781cd68fa97c1b0e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Joinable&lt;/code&gt; interface provides both connected and disconnected &lt;code&gt;RowSet&lt;/code&gt; objects with the capability to be added to a &lt;code&gt;JoinRowSet&lt;/code&gt; object in an SQL &lt;code&gt;JOIN&lt;/code&gt; operation. A &lt;code&gt;RowSet&lt;/code&gt; object that has implemented the &lt;code&gt;Joinable&lt;/code&gt; interface can set a match column, retrieve a match column, or unset a match column. A &lt;code&gt;JoinRowSet&lt;/code&gt; object can then use the &lt;code&gt;RowSet&lt;/code&gt; object's match column as a basis for adding the &lt;code&gt;RowSet&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Joinable&lt;/code&gt; インターフェースは、両方の接続及び切断を提供 &lt;code&gt;RowSet&lt;/code&gt; に追加する能力を有するオブジェクト &lt;code&gt;JoinRowSet&lt;/code&gt; SQLにおけるオブジェクト &lt;code&gt;JOIN&lt;/code&gt; 操作を。 A &lt;code&gt;RowSet&lt;/code&gt; 実装しているオブジェクト &lt;code&gt;Joinable&lt;/code&gt; 一致列を設定することができるインタフェースは、一致列を取得、または一致列の設定を解除します。 &lt;code&gt;JoinRowSet&lt;/code&gt; オブジェクトは、使用することができ &lt;code&gt;RowSet&lt;/code&gt; 追加するための基礎として、オブジェクトの一致列を &lt;code&gt;RowSet&lt;/code&gt; オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="898a003c1a219e2ced5b5d58761137f53a86daf7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Joinable&lt;/code&gt; interface provides the methods for getting and setting a match column, which is the basis for forming the SQL &lt;code&gt;JOIN&lt;/code&gt; formed by adding &lt;code&gt;RowSet&lt;/code&gt; objects to a &lt;code&gt;JoinRowSet&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Joinable&lt;/code&gt; インターフェースは、SQLを形成するための基礎である一致列、取得および設定するための方法を提供 &lt;code&gt;JOIN&lt;/code&gt; 添加することによって形成された &lt;code&gt;RowSet&lt;/code&gt; にオブジェクト &lt;code&gt;JoinRowSet&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="6c98ed7a0aa6729127f3b5355f11517cb27023e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Joinable&lt;/code&gt; interface provides the methods for setting, retrieving, and unsetting a match column, the basis for establishing an SQL &lt;code&gt;JOIN&lt;/code&gt; relationship. The match column may alternatively be set by supplying it to the appropriate version of the &lt;code&gt;JointRowSet&lt;/code&gt; method &lt;code&gt;addRowSet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Joinable&lt;/code&gt; インタフェースが一致列を、設定、取得、および設定解除するための方法を提供し、SQLを確立するための基礎は、 &lt;code&gt;JOIN&lt;/code&gt; 関係。あるいは、一致列は、 &lt;code&gt;JointRowSet&lt;/code&gt; メソッド &lt;code&gt;addRowSet&lt;/code&gt; の適切なバージョンに提供することによって設定できます。</target>
        </trans-unit>
        <trans-unit id="f1f4f673ec67c141b6306875c6fc5a1a9ed847e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Kernel&lt;/code&gt; class defines a matrix that describes how a specified pixel and its surrounding pixels affect the value computed for the pixel's position in the output image of a filtering operation.</source>
          <target state="translated">&lt;code&gt;Kernel&lt;/code&gt; クラスは、指定された画素とその周辺画素がフィルタリング操作の出力画像の画素の位置に対して計算された値にどのように影響するかを記述するマトリックスを定義します。</target>
        </trans-unit>
        <trans-unit id="aed135fe5a2836a7febd759a0b7dd3615e9857fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Kernel&lt;/code&gt; class defines a matrix that describes how a specified pixel and its surrounding pixels affect the value computed for the pixel's position in the output image of a filtering operation. The X origin and Y origin indicate the kernel matrix element that corresponds to the pixel position for which an output value is being computed.</source>
          <target state="translated">&lt;code&gt;Kernel&lt;/code&gt; クラスは、指定された画素とその周辺画素がフィルタリング操作の出力画像の画素の位置に対して計算された値にどのように影響するかを記述するマトリックスを定義します。X原点とY原点は、出力値が計算されるピクセル位置に対応するカーネル行列要素を示します。</target>
        </trans-unit>
        <trans-unit id="dbb5aa603ed056efc13af2d1e9ede1198ceeff82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;KeyListener&lt;/code&gt; listens to events.</source>
          <target state="translated">&lt;code&gt;KeyListener&lt;/code&gt; は、イベントをリッスンします。</target>
        </trans-unit>
        <trans-unit id="f7ba9fc1db8d36724267f1d6e78cc837f060c123" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LINK&lt;/code&gt; element specifies a link to an external resource, and defines this document's relationship to that resource (or vice versa).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21c303360ad460c3c97476f02a94fa6daca4191b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LINK&lt;/code&gt; element specifies a link to an external resource, and defines this document's relationship to that resource (or vice versa). See the LINK element definition in HTML 4.0 (see also the &lt;code&gt;LinkStyle&lt;/code&gt; interface in the module).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1ba6ae2f73582921151c31506b596f41216de90c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LONG&lt;/code&gt; number format style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d6b5e428374ca40e15cacba872157456e91fd39f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LSParser&lt;/code&gt; finishes to load the document. See also the definition of the &lt;code&gt;LSLoadEvent&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;LSParser&lt;/code&gt; が文書をロードするために終了します。 &lt;code&gt;LSLoadEvent&lt;/code&gt; インターフェースの定義も参照してください。</target>
        </trans-unit>
        <trans-unit id="24fb60957485d297ee80a09e8ce85ca8ca0ba39b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LSParser&lt;/code&gt; signals progress as data is parsed. This specification does not attempt to define exactly when progress events should be dispatched. That is intentionally left as implementation-dependent. Here is one example of how an application might dispatch progress events: Once the parser starts receiving data, a progress event is dispatched to indicate that the parsing starts. From there on, a progress event is dispatched for every 4096 bytes of data that is received and processed. This is only one example, though, and implementations can choose to dispatch progress events at any time while parsing, or not dispatch them at all. See also the definition of the &lt;code&gt;LSProgressEvent&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;LSParser&lt;/code&gt; データが解析される信号が進行します。この仕様は、進行状況イベントをディスパッチするタイミングを正確に定義しようとはしていません。これは意図的に実装に依存するものとして残されています。アプリケーションが進行状況イベントをディスパッチする方法の一例を次に示します。パーサーがデータの受信を開始すると、進行状況イベントがディスパッチされ、解析が開始されたことを示します。それ以降、進行状況イベントは、受信および処理される4096バイトのデータごとにディスパッチされます。ただし、これは1つの例にすぎず、実装は、解析中にいつでも進行状況イベントをディスパッチするか、まったくディスパッチしないかを選択できます。 &lt;code&gt;LSProgressEvent&lt;/code&gt; インターフェースの定義も参照してください。</target>
        </trans-unit>
        <trans-unit id="b5684589f50bcba0622244d4195787b54fb19754" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LSParser&lt;/code&gt; will call this method before opening any external resource, including the external DTD subset, external entities referenced within the DTD, and external entities referenced within the document element (however, the top-level document entity is not passed to this method). The application may then request that the &lt;code&gt;LSParser&lt;/code&gt; resolve the external resource itself, that it use an alternative URI, or that it use an entirely different input source.</source>
          <target state="translated">&lt;code&gt;LSParser&lt;/code&gt; が外部DTDサブセット、DTD内で参照される外部エンティティ、および文書要素（ただし、トップレベルの文書実体は、このメソッドに渡されていない）内で参照される外部エンティティを含む、任意の外部リソースを開く前に、このメソッドを呼び出します。次に、アプリケーションは、 &lt;code&gt;LSParser&lt;/code&gt; が外部リソース自体を解決すること、代替URIを使用すること、またはまったく異なる入力ソースを使用することを要求する場合があります。</target>
        </trans-unit>
        <trans-unit id="fdd3b33932c3d78818e6cfefc7e1379df1e81cc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LSParser&lt;/code&gt; will then allow the application to intercept any external entities, including the external DTD subset and external parameter entities, before including them. The top-level document entity is never passed to the &lt;code&gt;resolveResource&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;LSParser&lt;/code&gt; が、アプリケーションがそれらを含めて前に、外部DTDサブセットや外部パラメータ実体を含む任意の外部エンティティを、傍受することができます。トップレベルのドキュメントエンティティが &lt;code&gt;resolveResource&lt;/code&gt; メソッドに渡されることはありません。</target>
        </trans-unit>
        <trans-unit id="85452716c344379ce6f46987e158daa17b45c892" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LSParser&lt;/code&gt; will use the &lt;code&gt;LSInput&lt;/code&gt; object to determine how to read data. The &lt;code&gt;LSParser&lt;/code&gt; will look at the different inputs specified in the &lt;code&gt;LSInput&lt;/code&gt; in the following order to know which one to read from, the first one that is not null and not an empty string will be used:</source>
          <target state="translated">&lt;code&gt;LSParser&lt;/code&gt; が使用する &lt;code&gt;LSInput&lt;/code&gt; のデータを読み込む方法を決定するためにオブジェクトを。 &lt;code&gt;LSParser&lt;/code&gt; がで指定された異なる入力を見ていきます &lt;code&gt;LSInput&lt;/code&gt; nullでなく、空でない文字列が使用される最初の1、から読み取るするかを知るために、次の順序で：</target>
        </trans-unit>
        <trans-unit id="8385bbcd998f782ed6e1f77152400b1721a89972" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LSSerializer&lt;/code&gt; will use the &lt;code&gt;LSOutput&lt;/code&gt; object to determine where to serialize the output to. The &lt;code&gt;LSSerializer&lt;/code&gt; will look at the different outputs specified in the &lt;code&gt;LSOutput&lt;/code&gt; in the following order to know which one to output to, the first one that is not null and not an empty string will be used:</source>
          <target state="translated">&lt;code&gt;LSSerializer&lt;/code&gt; 使用する &lt;code&gt;LSOutput&lt;/code&gt; の場所への出力をシリアル化するかを決定するためにオブジェクトを。 &lt;code&gt;LSSerializer&lt;/code&gt; で指定された異なる出力を見ていきます &lt;code&gt;LSOutput&lt;/code&gt; に出力し、ヌルや空の文字列が使用されるわけではありませんではありません最初のものにどちらを知るために、次の順序で：</target>
        </trans-unit>
        <trans-unit id="9290bae2dd98060748530a990a5b9934c224d813" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LayerUI&lt;/code&gt; differs from the UI delegates of the other components, because it is LookAndFeel independent and is not updated by default when the system LookAndFeel is changed.</source>
          <target state="translated">&lt;code&gt;LayerUI&lt;/code&gt; の他のコンポーネントのUI委譲から異なり、それはのLookAndFeelの独立しており、システムのLook＆Feelが変更された場合、デフォルトでは更新されないため。</target>
        </trans-unit>
        <trans-unit id="30a19dcac608ceb517d3a3561447251ee1e2014f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Line&lt;/code&gt; interface represents a mono or multi-channel audio feed.</source>
          <target state="translated">&lt;code&gt;Line&lt;/code&gt; インターフェースは、モノまたはマルチチャネルオーディオフィードを表します。</target>
        </trans-unit>
        <trans-unit id="c0a9c7f256b3eaca5dedae690146aa91b18206a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Line&lt;/code&gt; interface represents a mono or multi-channel audio feed. A line is an element of the digital audio &quot;pipeline,&quot; such as a mixer, an input or output port, or a data path into or out of a mixer.</source>
          <target state="translated">&lt;code&gt;Line&lt;/code&gt; インターフェースは、モノまたはマルチチャネルオーディオフィードを表します。ラインは、デジタルオーディオの「パイプライン」の要素であり、ミキサー、入力ポートまたは出力ポート、ミキサーへのデータパス、またはミキサーからのデータパスなどがあります。</target>
        </trans-unit>
        <trans-unit id="12ff24d6407a52b7dc2753e301cab6bdaa7ab15a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LineBreakMeasurer&lt;/code&gt; class allows styled text to be broken into lines (or segments) that fit within a particular visual advance.</source>
          <target state="translated">&lt;code&gt;LineBreakMeasurer&lt;/code&gt; のクラスは、特定の視覚的な事前内のその適合書式付きテキストが行（またはセグメント）に分割されることを可能にします。</target>
        </trans-unit>
        <trans-unit id="70b0f123d2e6f96d4d1b70fcd70bc4ae2d723f77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LineBreakMeasurer&lt;/code&gt; class allows styled text to be broken into lines (or segments) that fit within a particular visual advance. This is useful for clients who wish to display a paragraph of text that fits within a specific width, called the &lt;b&gt;wrapping width&lt;/b&gt;.</source>
          <target state="translated">&lt;code&gt;LineBreakMeasurer&lt;/code&gt; のクラスは、特定の視覚的な事前内のその適合書式付きテキストが行（またはセグメント）に分割されることを可能にします。これは、&lt;b&gt;折り返し幅&lt;/b&gt;と呼ばれる特定の幅に収まるテキストの段落を表示したいクライアントに役立ちます。</target>
        </trans-unit>
        <trans-unit id="5d3a35d12e8c0c113e33da5350a5b5580d8cb3c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LineEvent&lt;/code&gt; class encapsulates information that a line sends its listeners whenever the line opens, closes, starts, or stops.</source>
          <target state="translated">&lt;code&gt;LineEvent&lt;/code&gt; のクラスは、ラインが、閉じる、開始、または停止を開くたびにラインがリスナーに送信する情報をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="1757f3f9d53b925c75021680d8beaafc5e2dbd56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LineEvent&lt;/code&gt; class encapsulates information that a line sends its listeners whenever the line opens, closes, starts, or stops. Each of these four state changes is represented by a corresponding type of event. A listener receives the event as a parameter to its &lt;a href=&quot;linelistener#update(javax.sound.sampled.LineEvent)&quot;&gt;&lt;code&gt;update&lt;/code&gt;&lt;/a&gt; method. By querying the event, the listener can learn the type of event, the line responsible for the event, and how much data the line had processed when the event occurred.</source>
          <target state="translated">&lt;code&gt;LineEvent&lt;/code&gt; のクラスは、ラインが、閉じる、開始、または停止を開くたびにラインがリスナーに送信する情報をカプセル化します。これらの4つの状態変化のそれぞれは、対応するタイプのイベントによって表されます。リスナーは、&lt;a href=&quot;linelistener#update(javax.sound.sampled.LineEvent)&quot;&gt; &lt;code&gt;update&lt;/code&gt; &lt;/a&gt;メソッドのパラメーターとしてイベントを受け取ります。イベントを照会することにより、リスナーは、イベントのタイプ、イベントの原因となる行、およびイベントが発生したときに行が処理したデータの量を知ることができます。</target>
        </trans-unit>
        <trans-unit id="537f7328063a159d8e4878b6fccbf45636c737b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LineEvent&lt;/code&gt; class encapsulates information that a line sends its listeners whenever the line opens, closes, starts, or stops. Each of these four state changes is represented by a corresponding type of event. A listener receives the event as a parameter to its &lt;a href=&quot;linelistener#update-javax.sound.sampled.LineEvent-&quot;&gt;&lt;code&gt;update&lt;/code&gt;&lt;/a&gt; method. By querying the event, the listener can learn the type of event, the line responsible for the event, and how much data the line had processed when the event occurred.</source>
          <target state="translated">&lt;code&gt;LineEvent&lt;/code&gt; のクラスは、ラインが、閉じる、開始、または停止を開くたびにラインがリスナーに送信する情報をカプセル化します。これらの4つの状態変化のそれぞれは、対応するタイプのイベントによって表されます。リスナーは、&lt;a href=&quot;linelistener#update-javax.sound.sampled.LineEvent-&quot;&gt; &lt;code&gt;update&lt;/code&gt; &lt;/a&gt;メソッドのパラメーターとしてイベントを受け取ります。イベントを照会することにより、リスナーはイベントのタイプ、イベントを担当する行、およびイベントが発生したときに行が処理したデータ量を知ることができます。</target>
        </trans-unit>
        <trans-unit id="a317f9411bdfedbd114bb89ebf0f60e340b551a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LineMetrics&lt;/code&gt; class allows access to the metrics needed to layout characters along a line and to layout of a set of lines.</source>
          <target state="translated">&lt;code&gt;LineMetrics&lt;/code&gt; クラスは、ラインに沿ってラインのセットのレイアウトにレイアウト文字に必要なメトリックにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="c8c1ff382b3ddfcfd21eb439e247cc38410f25c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LineMetrics&lt;/code&gt; class allows access to the metrics needed to layout characters along a line and to layout of a set of lines. A &lt;code&gt;LineMetrics&lt;/code&gt; object encapsulates the measurement information associated with a run of text.</source>
          <target state="translated">&lt;code&gt;LineMetrics&lt;/code&gt; クラスは、ラインに沿ってラインのセットのレイアウトにレイアウト文字に必要なメトリックにアクセスすることができます。 &lt;code&gt;LineMetrics&lt;/code&gt; オブジェクトは、テキストの実行に関連した測定情報をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="ec210c5e83962b1ca145d61862892dacceb18265" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LinearGradientPaint&lt;/code&gt; class provides a way to fill a &lt;a href=&quot;shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; with a linear color gradient pattern.</source>
          <target state="translated">&lt;code&gt;LinearGradientPaint&lt;/code&gt; のクラスは、充填する方法を提供&lt;a href=&quot;shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; を&lt;/a&gt;線形色のグラデーションパターンです。</target>
        </trans-unit>
        <trans-unit id="33c4bb6b8473c6e7b6f098a98815d32e62391d30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LinearGradientPaint&lt;/code&gt; class provides a way to fill a &lt;a href=&quot;shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; with a linear color gradient pattern. The user may specify two or more gradient colors, and this paint will provide an interpolation between each color. The user also specifies start and end points which define where in user space the color gradient should begin and end.</source>
          <target state="translated">&lt;code&gt;LinearGradientPaint&lt;/code&gt; のクラスは、充填する方法を提供&lt;a href=&quot;shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; を&lt;/a&gt;線形色のグラデーションパターンです。ユーザーは2つ以上のグラデーションカラーを指定でき、このペイントは各カラー間の補間を提供します。ユーザーは、ユーザー空間のどこで色のグラデーションを開始および終了するかを定義する開始点と終了点も指定します。</target>
        </trans-unit>
        <trans-unit id="590ddeb3999b2dcd7c427e16493246a3a0921d7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LinkStyle&lt;/code&gt; interface provides a mechanism by which a style sheet can be retrieved from the node responsible for linking it into a document.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ae5dece67b75f3313ffc73047158c0bfd013b9ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LinkStyle&lt;/code&gt; interface provides a mechanism by which a style sheet can be retrieved from the node responsible for linking it into a document. An instance of the &lt;code&gt;LinkStyle&lt;/code&gt; interface can be obtained using binding-specific casting methods on an instance of a linking node (&lt;code&gt;HTMLLinkElement&lt;/code&gt;, &lt;code&gt;HTMLStyleElement&lt;/code&gt; or &lt;code&gt;ProcessingInstruction&lt;/code&gt; in DOM Level 2).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c21b1c3905ebd125a9dff4a98c4563b298e71acf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; component presents the user with a scrolling list of text items.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; コンポーネントプレゼントテキスト項目のスクロールリストをユーザー。</target>
        </trans-unit>
        <trans-unit id="1cd681191d602e2ed6ce9e4db14238ca5d03680a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; component presents the user with a scrolling list of text items. The list can be set up so that the user can choose either one item or multiple items.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; コンポーネントプレゼントテキスト項目のスクロールリストをユーザー。リストは、ユーザーが1つのアイテムまたは複数のアイテムのいずれかを選択できるように設定できます。</target>
        </trans-unit>
        <trans-unit id="19683692a3cac37612a80dd55d3fd092b1967a4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface places additional stipulations, beyond those specified in the &lt;code&gt;Collection&lt;/code&gt; interface, on the contracts of the &lt;code&gt;iterator&lt;/code&gt;, &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt;, and &lt;code&gt;hashCode&lt;/code&gt; methods. Declarations for other inherited methods are also included here for convenience.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; インターフェースで指定されたもの以外の追加規定、場所 &lt;code&gt;Collection&lt;/code&gt; の契約上のインタフェース、 &lt;code&gt;iterator&lt;/code&gt; 、 &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;remove&lt;/code&gt; 、 &lt;code&gt;equals&lt;/code&gt; 、と &lt;code&gt;hashCode&lt;/code&gt; 方法。他の継承されたメソッドの宣言もここに含まれています。</target>
        </trans-unit>
        <trans-unit id="a0ba9a5b693daac5c19b3fccbb0faf8853cdabbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface provides a special iterator, called a &lt;code&gt;ListIterator&lt;/code&gt;, that allows element insertion and replacement, and bidirectional access in addition to the normal operations that the &lt;code&gt;Iterator&lt;/code&gt; interface provides. A method is provided to obtain a list iterator that starts at a specified position in the list.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; インターフェースと呼ばれる特殊な反復子、提供 &lt;code&gt;ListIterator&lt;/code&gt; ことは通常の動作に加えて、素子の挿入及び置換、および双方向アクセスを可能にする、 &lt;code&gt;Iterator&lt;/code&gt; インターフェースを提供します。リスト内の指定された位置で開始するリスト反復子を取得するためのメソッドが提供されています。</target>
        </trans-unit>
        <trans-unit id="2b090913d205b579f0fbce24a3f90785bc1ba625" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface provides four methods for positional (indexed) access to list elements. Lists (like Java arrays) are zero based. Note that these operations may execute in time proportional to the index value for some implementations (the &lt;code&gt;LinkedList&lt;/code&gt; class, for example). Thus, iterating over the elements in a list is typically preferable to indexing through it if the caller does not know the implementation.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; インターフェースは、リスト要素の位置（インデックス付け）にアクセスするための4つの方法を提供します。リスト（Java配列のような）はゼロベースです。これらの操作は、一部の実装（ &lt;code&gt;LinkedList&lt;/code&gt; クラスなど）のインデックス値に比例して時間内に実行される場合があることに注意してください。したがって、呼び出し元が実装を知らない場合は、リストの要素を反復処理する方が、インデックスを作成するよりも通常は望ましい方法です。</target>
        </trans-unit>
        <trans-unit id="70355f014486445e2f19c1b1f444e1ecb381cd12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface provides two methods to efficiently insert and remove multiple elements at an arbitrary point in the list.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; インタフェースを効率的に、リスト内の任意の点で複数の要素を挿入および除去するための2つの方法を提供します。</target>
        </trans-unit>
        <trans-unit id="fe82cde6eede4b779cf568cf70079098275cd445" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;List&lt;/code&gt; interface provides two methods to search for a specified object. From a performance standpoint, these methods should be used with caution. In many implementations they will perform costly linear searches.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; インタフェースは、指定されたオブジェクトを検索するための2つのメソッドを提供します。パフォーマンスの観点から、これらの方法は注意して使用する必要があります。多くの実装では、コストのかかる線形検索を実行します。</target>
        </trans-unit>
        <trans-unit id="d5f5959f322b845c985e2f025760b04b9f414ef2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ListDataListener&lt;/code&gt; that's added to the &lt;code&gt;JLists&lt;/code&gt; model at &lt;code&gt;installUI time&lt;/code&gt;, and whenever the JList.model property changes.</source>
          <target state="translated">&lt;code&gt;ListDataListener&lt;/code&gt; に追加されます &lt;code&gt;JLists&lt;/code&gt; でモデル &lt;code&gt;installUI time&lt;/code&gt; 、およびJList.modelプロパティが変更。</target>
        </trans-unit>
        <trans-unit id="bf00cf318d8d3e87e034ff374fa7601d594536b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ListSelectionModel&lt;/code&gt; of the table, used to keep track of row selections.</source>
          <target state="translated">テーブルの &lt;code&gt;ListSelectionModel&lt;/code&gt; 。行の選択を追跡するために使用されます。</target>
        </trans-unit>
        <trans-unit id="80c3e343f9a3334aa90fca73bdf887fa22a1c873" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class also supports an extension mechanism that can be used to identify a calendar system. The mechanism is a form of key-value pairs, where the calendar system has the key &quot;ca&quot;. For example, the locale &quot;en-JP-u-ca-japanese&quot; represents the English language as used in Japan with the Japanese calendar system.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; クラスは、カレンダーシステムを識別するために使用することができる拡張メカニズムをサポートします。このメカニズムは、キーと値のペアの形式であり、カレンダーシステムにはキー「ca」があります。たとえば、ロケール「en-JP-u-ca-japanese」は、日本のカレンダーシステムで日本で使用されている英語を表します。</target>
        </trans-unit>
        <trans-unit id="df60f90896c3c9a6114af933224b8f6b6310599a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class also supports language codes up to 8 characters in length. Therefore, the list returned by this method does not contain ALL valid codes that can be used to create Locales.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; クラスでは、長さが8つの文字に言語コードをサポートします。したがって、このメソッドによって返されるリストには、ロケールの作成に使用できるすべての有効なコードが含まれていません。</target>
        </trans-unit>
        <trans-unit id="ff489719e325fe97b92428c9169b9fa65846b849" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class implements IETF BCP 47 which is composed of &lt;a href=&quot;http://tools.ietf.org/html/rfc4647&quot;&gt;RFC 4647 &quot;Matching of Language Tags&quot;&lt;/a&gt; and &lt;a href=&quot;http://tools.ietf.org/html/rfc5646&quot;&gt;RFC 5646 &quot;Tags for Identifying Languages&quot;&lt;/a&gt; with support for the LDML (UTS#35, &quot;Unicode Locale Data Markup Language&quot;) BCP 47-compatible extensions for locale data exchange.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; で構成されているクラスが実装IETF BCP 47 &lt;a href=&quot;http://tools.ietf.org/html/rfc4647&quot;&gt;、RFC 4647「言語タグのマッチング」&lt;/a&gt;と&lt;a href=&quot;http://tools.ietf.org/html/rfc5646&quot;&gt;「言語を識別するためのタグ」RFC 5646&lt;/a&gt;（UTS＃35、「Unicodeのロケール・データ・マークアップ言語」）BCP 47互換LDMLのサポートとロケールデータ交換の拡張機能。</target>
        </trans-unit>
        <trans-unit id="86ef8f8b1c2cc5e0c4e3c8be8198fdebfc6064b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class implements IETF BCP 47 which is composed of &lt;a href=&quot;https://tools.ietf.org/html/rfc4647&quot;&gt;RFC 4647 &quot;Matching of Language Tags&quot;&lt;/a&gt; and &lt;a href=&quot;https://tools.ietf.org/html/rfc5646&quot;&gt;RFC 5646 &quot;Tags for Identifying Languages&quot;&lt;/a&gt; with support for the LDML (UTS#35, &quot;Unicode Locale Data Markup Language&quot;) BCP 47-compatible extensions for locale data exchange.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b49e579633330874272c018a016eeeecd34916da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class provides a number of convenient constants that you can use to create &lt;code&gt;Locale&lt;/code&gt; objects for commonly used locales. For example, the following creates a &lt;code&gt;Locale&lt;/code&gt; object for the United States:</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; クラスは、作成するために使用できる便利な定数の数を提供 &lt;code&gt;Locale&lt;/code&gt; 一般的に使用されるロケールのためのオブジェクトを。たとえば、次の &lt;code&gt;Locale&lt;/code&gt; は米国のLocaleオブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="fa1e07d1d615f3001a87ae91c2a0604617a8b571" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Locale&lt;/code&gt; class provides three constructors:</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; クラスは3つのコンストラクタが用意されています。</target>
        </trans-unit>
        <trans-unit id="154dd3c2315f6100804c904415eeede9ad2a13fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Logger&lt;/code&gt; that has been specified for use by &lt;code&gt;SyncProvider&lt;/code&gt; implementations</source>
          <target state="translated">&lt;code&gt;Logger&lt;/code&gt; で使用するために指定されている &lt;code&gt;SyncProvider&lt;/code&gt; 実装</target>
        </trans-unit>
        <trans-unit id="29f650595b9f348aa19ea69fc4ffab1e764aac3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoggerFinder&lt;/code&gt; service is responsible for creating, managing, and configuring loggers to the underlying framework it uses.</source>
          <target state="translated">&lt;code&gt;LoggerFinder&lt;/code&gt; のサービスは、作成、管理、およびそれが使用する基本的な枠組みにロガーを設定するための責任があります。</target>
        </trans-unit>
        <trans-unit id="d949a93c9d9a78edeb4d078a66d8ba0c9af79890" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoggerFinder&lt;/code&gt; service is responsible for creating, managing, and configuring loggers to the underlying framework it uses. A logger finder is a concrete implementation of this class that has a zero-argument constructor and implements the abstract methods defined by this class. The loggers returned from a logger finder are capable of routing log messages to the logging backend this provider supports. A given invocation of the Java Runtime maintains a single system-wide LoggerFinder instance that is loaded as follows:</source>
          <target state="translated">&lt;code&gt;LoggerFinder&lt;/code&gt; のサービスは、作成、管理、およびそれが使用する基本的な枠組みにロガーを設定するための責任があります。ロガーファインダーは、このクラスの具体的な実装であり、引数がゼロのコンストラクターを持ち、このクラスで定義された抽象メソッドを実装します。ロガーファインダーから返されたロガーは、このプロバイダーがサポートするロギングバックエンドにログメッセージをルーティングすることができます。Javaランタイムの特定の呼び出しは、次のようにロードされる単一のシステム全体のLoggerFinderインスタンスを維持します。</target>
        </trans-unit>
        <trans-unit id="753e94e16d15c98e2261f7d3bdcddbdc2d027d5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoginContext&lt;/code&gt; class describes the basic methods used to authenticate Subjects and provides a way to develop an application independent of the underlying authentication technology.</source>
          <target state="translated">&lt;code&gt;LoginContext&lt;/code&gt; クラスは、認証対象者に使用される基本的なメソッドを記述し、基本となる認証テクノロジに依存しないアプリケーション開発の方法を提供します。</target>
        </trans-unit>
        <trans-unit id="98c21b51d0ddf913deb3a4a49b2303d25a261498" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoginContext&lt;/code&gt; class describes the basic methods used to authenticate Subjects and provides a way to develop an application independent of the underlying authentication technology. A &lt;code&gt;Configuration&lt;/code&gt; specifies the authentication technology, or &lt;code&gt;LoginModule&lt;/code&gt;, to be used with a particular application. Different LoginModules can be plugged in under an application without requiring any modifications to the application itself.</source>
          <target state="translated">&lt;code&gt;LoginContext&lt;/code&gt; クラスは、認証対象者に使用される基本的なメソッドを記述し、基本となる認証テクノロジに依存しないアプリケーション開発の方法を提供します。A &lt;code&gt;Configuration&lt;/code&gt; 認証技術、または指定 &lt;code&gt;LoginModule&lt;/code&gt; 特定のアプリケーションで使用されるが、。アプリケーション自体に変更を加えることなく、アプリケーションの下にさまざまなLoginModuleをプラグインできます。</target>
        </trans-unit>
        <trans-unit id="24bd53fa001fd556da21468c145af7d9ff2e52d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoginContext&lt;/code&gt; is responsible for reading the &lt;code&gt;Configuration&lt;/code&gt; and instantiating the appropriate LoginModules. Each &lt;code&gt;LoginModule&lt;/code&gt; is initialized with a &lt;code&gt;Subject&lt;/code&gt;, a &lt;code&gt;CallbackHandler&lt;/code&gt;, shared &lt;code&gt;LoginModule&lt;/code&gt; state, and LoginModule-specific options. The &lt;code&gt;Subject&lt;/code&gt; represents the &lt;code&gt;Subject&lt;/code&gt; currently being authenticated and is updated with relevant Credentials if authentication succeeds. LoginModules use the &lt;code&gt;CallbackHandler&lt;/code&gt; to communicate with users. The &lt;code&gt;CallbackHandler&lt;/code&gt; may be used to prompt for usernames and passwords, for example. Note that the &lt;code&gt;CallbackHandler&lt;/code&gt; may be null. LoginModules which absolutely require a &lt;code&gt;CallbackHandler&lt;/code&gt; to authenticate the &lt;code&gt;Subject&lt;/code&gt; may throw a &lt;code&gt;LoginException&lt;/code&gt;. LoginModules optionally use the shared state to share information or data among themselves.</source>
          <target state="translated">&lt;code&gt;LoginContext&lt;/code&gt; は読書を担当して &lt;code&gt;Configuration&lt;/code&gt; して、適切なのLoginModuleをインスタンス化します。各 &lt;code&gt;LoginModule&lt;/code&gt; は、 &lt;code&gt;Subject&lt;/code&gt; 、 &lt;code&gt;CallbackHandler&lt;/code&gt; 、共有 &lt;code&gt;LoginModule&lt;/code&gt; 状態、およびLoginModule固有のオプションで初期化されます。 &lt;code&gt;Subject&lt;/code&gt; を表す &lt;code&gt;Subject&lt;/code&gt; 現在認証されていると認証が成功した場合、関連する資格情報で更新されます。 LoginModuleは &lt;code&gt;CallbackHandler&lt;/code&gt; を使用してユーザーと通信します。 &lt;code&gt;CallbackHandler&lt;/code&gt; が、たとえば、ユーザ名とパスワードの入力を求めるプロンプトに使用することができます。なお &lt;code&gt;CallbackHandler&lt;/code&gt; nullの可能性があります。 &lt;code&gt;Subject&lt;/code&gt; を認証するために &lt;code&gt;CallbackHandler&lt;/code&gt; が絶対に必要なLoginModule は、 &lt;code&gt;LoginException&lt;/code&gt; をスローする場合があります。LoginModuleはオプションで共有状態を使用して、情報またはデータをそれらの間で共有します。</target>
        </trans-unit>
        <trans-unit id="b21ebcd0d4d483586ab3807b4d68805315158ccb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Long&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;
 long&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; クラスは、プリミティブ型の値をラップ &lt;code&gt; long&lt;/code&gt; オブジェクトに。</target>
        </trans-unit>
        <trans-unit id="d90c04bbbf4599ac5901e7f0958b186b8247c1b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Long&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;
 long&lt;/code&gt; in an object. An object of type &lt;code&gt;Long&lt;/code&gt; contains a single field whose type is &lt;code&gt;long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; クラスは、プリミティブ型の値をラップ &lt;code&gt; long&lt;/code&gt; オブジェクトに。 &lt;code&gt;Long&lt;/code&gt; 型のオブジェクトには、 &lt;code&gt;long&lt;/code&gt; 型の単一のフィールドが含まれています。</target>
        </trans-unit>
        <trans-unit id="7801867034780a1c5fff70e8cc7e32057101d13e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Long&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;long&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; クラスは、プリミティブ型の値をラップ &lt;code&gt;long&lt;/code&gt; オブジェクトに。</target>
        </trans-unit>
        <trans-unit id="e7f5fb0211de99c25185ee45c0d498d693daf127" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Long&lt;/code&gt; class wraps a value of the primitive type &lt;code&gt;long&lt;/code&gt; in an object. An object of type &lt;code&gt;Long&lt;/code&gt; contains a single field whose type is &lt;code&gt;long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Long&lt;/code&gt; クラスは、プリミティブ型の値をラップ &lt;code&gt;long&lt;/code&gt; オブジェクトに。 &lt;code&gt;Long&lt;/code&gt; 型のオブジェクトには、 &lt;code&gt;long&lt;/code&gt; 型の単一のフィールドが含まれます。</target>
        </trans-unit>
        <trans-unit id="b73aaaf679d63a88eb466b691fdb58c718db13f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MBeanNotificationInfo&lt;/code&gt; class is used to describe the characteristics of the different notification instances emitted by an MBean, for a given Java class of notification.</source>
          <target state="translated">&lt;code&gt;MBeanNotificationInfo&lt;/code&gt; のクラスは、通知の指定されたJavaクラス、MBeanによって放射された異なる通知インスタンスの特性を記述するために使用されます。</target>
        </trans-unit>
        <trans-unit id="8c0d93d2a05b2c51593dc81a25c6a33e58b7c2f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MBeanNotificationInfo&lt;/code&gt; class is used to describe the characteristics of the different notification instances emitted by an MBean, for a given Java class of notification. If an MBean emits notifications that can be instances of different Java classes, then the metadata for that MBean should provide an &lt;code&gt;MBeanNotificationInfo&lt;/code&gt; object for each of these notification Java classes.</source>
          <target state="translated">&lt;code&gt;MBeanNotificationInfo&lt;/code&gt; のクラスは、通知の指定されたJavaクラス、MBeanによって放射された異なる通知インスタンスの特性を記述するために使用されます。MBeanが異なるJavaクラスのインスタンスになる可能性のある通知を &lt;code&gt;MBeanNotificationInfo&lt;/code&gt; 場合、そのMBeanのメタデータは、これらの通知JavaクラスごとにMBeanNotificationInfoオブジェクトを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="de572685114708d2dbbbf2708ab7dd9cc02d6fb3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MBeanServer&lt;/code&gt; to which this connector server is attached.</source>
          <target state="translated">&lt;code&gt;MBeanServer&lt;/code&gt; このコネクタサーバーが接続されています。</target>
        </trans-unit>
        <trans-unit id="d306b6b1cd1b367a72d76620a44c2997e616fcf2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MBeanServer&lt;/code&gt; to which this connector server is attached. This is the last value passed to &lt;a href=&quot;#setMBeanServer(javax.management.MBeanServer)&quot;&gt;&lt;code&gt;setMBeanServer(javax.management.MBeanServer)&lt;/code&gt;&lt;/a&gt; on this object, or null if that method has never been called.</source>
          <target state="translated">&lt;code&gt;MBeanServer&lt;/code&gt; このコネクタサーバーが接続されています。これは、このオブジェクトの&lt;a href=&quot;#setMBeanServer(javax.management.MBeanServer)&quot;&gt; &lt;code&gt;setMBeanServer(javax.management.MBeanServer)&lt;/code&gt; &lt;/a&gt;に渡される最後の値であり、そのメソッドが呼び出されたことがない場合はnullです。</target>
        </trans-unit>
        <trans-unit id="ba64fec83d48a2cbf38343d1715ffb0852ef3636" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MBeanServer&lt;/code&gt; to which this connector server is attached. This is the last value passed to &lt;a href=&quot;rmiserverimpl#setMBeanServer-javax.management.MBeanServer-&quot;&gt;&lt;code&gt;setMBeanServer(javax.management.MBeanServer)&lt;/code&gt;&lt;/a&gt; on this object, or null if that method has never been called.</source>
          <target state="translated">&lt;code&gt;MBeanServer&lt;/code&gt; このコネクタサーバーが接続されています。これは、このオブジェクトの&lt;a href=&quot;rmiserverimpl#setMBeanServer-javax.management.MBeanServer-&quot;&gt; &lt;code&gt;setMBeanServer(javax.management.MBeanServer)&lt;/code&gt; &lt;/a&gt;に渡される最後の値です。そのメソッドが呼び出されたことがない場合はnullです。</target>
        </trans-unit>
        <trans-unit id="0a8a2b2991ac645b67698f44548fc7e282981c3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MLET&lt;/code&gt; tag has the following syntax:</source>
          <target state="translated">&lt;code&gt;MLET&lt;/code&gt; のタグの構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="596a31ac86272faf93e710d63fa1745d1a5e9ca2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MODULE&lt;/code&gt; lookup mode serves to authenticate that the lookup object was created by code in the caller module (or derived from a lookup object originally created by the caller). A lookup object with the &lt;code&gt;MODULE&lt;/code&gt; lookup mode can be shared with trusted parties without giving away &lt;code&gt;PRIVATE&lt;/code&gt; and &lt;code&gt;PACKAGE&lt;/code&gt; access to the caller.</source>
          <target state="translated">&lt;code&gt;MODULE&lt;/code&gt; ルックアップモードは、参照オブジェクトが呼び出し側モジュールのコードによって作成された（または元々の発信者によって作成されたルックアップオブジェクトから派生）したことを認証するのに役立ちます。 &lt;code&gt;MODULE&lt;/code&gt; ルックアップモードのルックアップオブジェクトは、呼び出し元に &lt;code&gt;PRIVATE&lt;/code&gt; および &lt;code&gt;PACKAGE&lt;/code&gt; アクセスを与えることなく、信頼できるパーティと共有できます。</target>
        </trans-unit>
        <trans-unit id="41d6128d4ea5a41adf8b5c56d1c50b772d8bb991" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ManagementFactory&lt;/code&gt; class is a factory class for getting managed beans for the Java platform.</source>
          <target state="translated">&lt;code&gt;ManagementFactory&lt;/code&gt; にクラスは、Javaプラットフォームの管理対象Beanを取得するためのファクトリクラスです。</target>
        </trans-unit>
        <trans-unit id="d71986942be1c54b6a6ae12607dd5829e664ceed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ManagementFactory&lt;/code&gt; class is a factory class for getting managed beans for the Java platform. This class consists of static methods each of which returns one or more</source>
          <target state="translated">&lt;code&gt;ManagementFactory&lt;/code&gt; にクラスは、Javaプラットフォームの管理対象Beanを取得するためのファクトリクラスです。このクラスは、それぞれが1つ以上を返す静的メソッドで構成されています</target>
        </trans-unit>
        <trans-unit id="da35ea78eb0bbad93818f873018df137e9342c23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map.Entry&lt;/code&gt; elements traversed by the &lt;code&gt;iterator&lt;/code&gt; or &lt;code&gt;spliterator&lt;/code&gt; do &lt;em&gt;not&lt;/em&gt; support the &lt;code&gt;setValue&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;Map.Entry&lt;/code&gt; の要素はによって横断 &lt;code&gt;iterator&lt;/code&gt; または &lt;code&gt;spliterator&lt;/code&gt; ん&lt;em&gt;ではない&lt;/em&gt;サポート &lt;code&gt;setValue&lt;/code&gt; の操作を。</target>
        </trans-unit>
        <trans-unit id="227699f0dce7484c6d17e1d7babad6ee5858c1d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; interface provides three</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; インターフェイスは、3を提供します</target>
        </trans-unit>
        <trans-unit id="bc88794f3bfb66bef560415a38768466fee45791" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; object</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; オブジェクト</target>
        </trans-unit>
        <trans-unit id="d3587321566f5e4b877578d4a8ea85fc41c24c79" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; parameter passed to the &lt;code&gt;JMXConnectorProvider&lt;/code&gt; is a new read-only &lt;code&gt;Map&lt;/code&gt; that contains all the entries that were in the &lt;code&gt;environment&lt;/code&gt; parameter to &lt;a href=&quot;#newJMXConnector(javax.management.remote.JMXServiceURL,java.util.Map)&quot;&gt;&lt;code&gt;JMXConnectorFactory.newJMXConnector&lt;/code&gt;&lt;/a&gt;, if there was one. Additionally, if the &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; key is not present in the &lt;code&gt;environment&lt;/code&gt; parameter, it is added to the new read-only &lt;code&gt;Map&lt;/code&gt;. The associated value is the calling thread's context class loader.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; に渡されたパラメータ &lt;code&gt;JMXConnectorProvider&lt;/code&gt; は新しい読み取り専用である &lt;code&gt;Map&lt;/code&gt; にあったすべてのエントリが含まれ &lt;code&gt;environment&lt;/code&gt; へのパラメータ&lt;a href=&quot;#newJMXConnector(javax.management.remote.JMXServiceURL,java.util.Map)&quot;&gt; &lt;code&gt;JMXConnectorFactory.newJMXConnector&lt;/code&gt; &lt;/a&gt; 1があった場合に、。さらに、 &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; キーが &lt;code&gt;environment&lt;/code&gt; パラメーターに存在しない場合、新しい読み取り専用 &lt;code&gt;Map&lt;/code&gt; 追加されます。関連する値は、呼び出し元のスレッドのコンテキストクラスローダーです。</target>
        </trans-unit>
        <trans-unit id="9428a88bd8c1667c06a6e1c738d06e6c61771810" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; parameter passed to the &lt;code&gt;JMXConnectorProvider&lt;/code&gt; is a new read-only &lt;code&gt;Map&lt;/code&gt; that contains all the entries that were in the &lt;code&gt;environment&lt;/code&gt; parameter to &lt;a href=&quot;jmxconnectorfactory#newJMXConnector-javax.management.remote.JMXServiceURL-java.util.Map-&quot;&gt;&lt;code&gt;JMXConnectorFactory.newJMXConnector&lt;/code&gt;&lt;/a&gt;, if there was one. Additionally, if the &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; key is not present in the &lt;code&gt;environment&lt;/code&gt; parameter, it is added to the new read-only &lt;code&gt;Map&lt;/code&gt;. The associated value is the calling thread's context class loader.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; に渡されたパラメータ &lt;code&gt;JMXConnectorProvider&lt;/code&gt; は新しい読み取り専用である &lt;code&gt;Map&lt;/code&gt; にあったすべてのエントリが含まれ &lt;code&gt;environment&lt;/code&gt; へのパラメータ&lt;a href=&quot;jmxconnectorfactory#newJMXConnector-javax.management.remote.JMXServiceURL-java.util.Map-&quot;&gt; &lt;code&gt;JMXConnectorFactory.newJMXConnector&lt;/code&gt; &lt;/a&gt; 1があった場合に、。さらに、 &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; キーが &lt;code&gt;environment&lt;/code&gt; パラメーターに存在しない場合、そのキーは新しい読み取り専用 &lt;code&gt;Map&lt;/code&gt; に追加されます。関連する値は、呼び出しスレッドのコンテキストクラスローダーです。</target>
        </trans-unit>
        <trans-unit id="f3432ba54f4dce75c626f795ba794c66e77d0df3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; parameter passed to the &lt;code&gt;JMXConnectorServerProvider&lt;/code&gt; is a new read-only &lt;code&gt;Map&lt;/code&gt; that contains all the entries that were in the &lt;code&gt;environment&lt;/code&gt; parameter to &lt;a href=&quot;#newJMXConnectorServer(javax.management.remote.JMXServiceURL,java.util.Map,javax.management.MBeanServer)&quot;&gt;&lt;code&gt;JMXConnectorServerFactory.newJMXConnectorServer&lt;/code&gt;&lt;/a&gt;, if there was one. Additionally, if the &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; key is not present in the &lt;code&gt;environment&lt;/code&gt; parameter, it is added to the new read-only &lt;code&gt;Map&lt;/code&gt;. The associated value is the calling thread's context class loader.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; に渡されたパラメータ &lt;code&gt;JMXConnectorServerProvider&lt;/code&gt; は新しい読み取り専用である &lt;code&gt;Map&lt;/code&gt; にあったすべてのエントリが含まれ &lt;code&gt;environment&lt;/code&gt; へのパラメータ&lt;a href=&quot;#newJMXConnectorServer(javax.management.remote.JMXServiceURL,java.util.Map,javax.management.MBeanServer)&quot;&gt; &lt;code&gt;JMXConnectorServerFactory.newJMXConnectorServer&lt;/code&gt; &lt;/a&gt; 1があった場合に、。さらに、 &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; キーが &lt;code&gt;environment&lt;/code&gt; パラメーターに存在しない場合、新しい読み取り専用 &lt;code&gt;Map&lt;/code&gt; 追加されます。関連する値は、呼び出し元のスレッドのコンテキストクラスローダーです。</target>
        </trans-unit>
        <trans-unit id="fccf20df23e6200637aa7b23e7388c8a9a88bb06" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt; parameter passed to the &lt;code&gt;JMXConnectorServerProvider&lt;/code&gt; is a new read-only &lt;code&gt;Map&lt;/code&gt; that contains all the entries that were in the &lt;code&gt;environment&lt;/code&gt; parameter to &lt;a href=&quot;jmxconnectorserverfactory#newJMXConnectorServer-javax.management.remote.JMXServiceURL-java.util.Map-javax.management.MBeanServer-&quot;&gt;&lt;code&gt;JMXConnectorServerFactory.newJMXConnectorServer&lt;/code&gt;&lt;/a&gt;, if there was one. Additionally, if the &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; key is not present in the &lt;code&gt;environment&lt;/code&gt; parameter, it is added to the new read-only &lt;code&gt;Map&lt;/code&gt;. The associated value is the calling thread's context class loader.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; に渡されたパラメータ &lt;code&gt;JMXConnectorServerProvider&lt;/code&gt; は新しい読み取り専用である &lt;code&gt;Map&lt;/code&gt; にあったすべてのエントリが含まれ &lt;code&gt;environment&lt;/code&gt; へのパラメータ&lt;a href=&quot;jmxconnectorserverfactory#newJMXConnectorServer-javax.management.remote.JMXServiceURL-java.util.Map-javax.management.MBeanServer-&quot;&gt; &lt;code&gt;JMXConnectorServerFactory.newJMXConnectorServer&lt;/code&gt; &lt;/a&gt; 1があった場合に、。さらに、 &lt;code&gt;jmx.remote.protocol.provider.class.loader&lt;/code&gt; キーが &lt;code&gt;environment&lt;/code&gt; パラメーターに存在しない場合、そのキーは新しい読み取り専用 &lt;code&gt;Map&lt;/code&gt; に追加されます。関連する値は、呼び出しスレッドのコンテキストクラスローダーです。</target>
        </trans-unit>
        <trans-unit id="6c1109a26629152d8e80c4167284a5176959aab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Map&lt;/code&gt;-based constructor and &lt;code&gt;deriveFont&lt;/code&gt; APIs ignore the FONT attribute, and it is not retained by the Font; the static &lt;a href=&quot;#getFont(java.util.Map)&quot;&gt;&lt;code&gt;getFont(java.util.Map&amp;lt;? extends java.text.AttributedCharacterIterator.Attribute, ?&amp;gt;)&lt;/code&gt;&lt;/a&gt; method should be used if the FONT attribute might be present. See &lt;a href=&quot;font/textattribute#FONT&quot;&gt;&lt;code&gt;TextAttribute.FONT&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;Map&lt;/code&gt; 、コンストラクタをベースと &lt;code&gt;deriveFont&lt;/code&gt; APIはFONT属性を無視し、それはフォントによって保持されていません。FONT属性が存在する可能性がある場合は、静的&lt;a href=&quot;#getFont(java.util.Map)&quot;&gt; &lt;code&gt;getFont(java.util.Map&amp;lt;? extends java.text.AttributedCharacterIterator.Attribute, ?&amp;gt;)&lt;/code&gt; &lt;/a&gt;メソッドを使用する必要があります。詳細については、&lt;a href=&quot;font/textattribute#FONT&quot;&gt; &lt;code&gt;TextAttribute.FONT&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f8bbff55817a986779ffb6c9c66f822fff7985bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MediaList&lt;/code&gt; interface provides the abstraction of an ordered collection of media, without defining or constraining how this collection is implemented.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aad9781c06332bf9bcb0974dab7541fa53110ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MediaList&lt;/code&gt; interface provides the abstraction of an ordered collection of media, without defining or constraining how this collection is implemented. An empty list is the same as a list that contains the medium &lt;code&gt;&quot;all&quot;&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5865a336095d84a9779ddde69b513d49e053e443" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MediaSize&lt;/code&gt; is in turn used to locate the &lt;code&gt;MediaSizeName&lt;/code&gt; object. This method may return &lt;code&gt;null&lt;/code&gt; if the closest matching &lt;code&gt;MediaSize&lt;/code&gt; has no corresponding &lt;code&gt;Media&lt;/code&gt; instance.</source>
          <target state="translated">&lt;code&gt;MediaSize&lt;/code&gt; には、順番に配置するために使用されている &lt;code&gt;MediaSizeName&lt;/code&gt; のオブジェクトを。最も一致する &lt;code&gt;MediaSize&lt;/code&gt; に対応する &lt;code&gt;Media&lt;/code&gt; インスタンスがない場合、このメソッドは &lt;code&gt;null&lt;/code&gt; を返す可能性があります。</target>
        </trans-unit>
        <trans-unit id="7a070dabcac26392a8318450e8b1d538eeddd0be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MediaTracker&lt;/code&gt; class is a utility class to track the status of a number of media objects.</source>
          <target state="translated">&lt;code&gt;MediaTracker&lt;/code&gt; ののクラスには、いくつかのメディアオブジェクトの状態を監視するユーティリティクラスです。</target>
        </trans-unit>
        <trans-unit id="17601962e75c98c387ad4765276e1cdfa2694759" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MediaTracker&lt;/code&gt; class is a utility class to track the status of a number of media objects. Media objects could include audio clips as well as images, though currently only images are supported.</source>
          <target state="translated">&lt;code&gt;MediaTracker&lt;/code&gt; ののクラスには、いくつかのメディアオブジェクトの状態を監視するユーティリティクラスです。現在サポートされているのは画像のみですが、メディアオブジェクトには画像だけでなくオーディオクリップも含めることができます。</target>
        </trans-unit>
        <trans-unit id="8b01e42df4caf57c30334c7ef0ef0673760d8b60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MemoryHandler&lt;/code&gt; is configured based on &lt;code&gt;LogManager&lt;/code&gt; properties (or their default values) except that the given &lt;code&gt;pushLevel&lt;/code&gt; argument and buffer size argument are used.</source>
          <target state="translated">&lt;code&gt;MemoryHandler&lt;/code&gt; のは、に基づいて構成されている &lt;code&gt;LogManager&lt;/code&gt; 所与ことを除いてプロパティ（またはそのデフォルト値） &lt;code&gt;pushLevel&lt;/code&gt; 引数とサイズ引数をバッファに使用されます。</target>
        </trans-unit>
        <trans-unit id="5651aaa22c68d9ecf5c414f98e30a0e7dbf81cb6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MemoryMXBean&lt;/code&gt; object returned by &lt;a href=&quot;managementfactory#getMemoryMXBean()&quot;&gt;&lt;code&gt;ManagementFactory.getMemoryMXBean()&lt;/code&gt;&lt;/a&gt; implements the &lt;a href=&quot;../../../javax/management/notificationemitter&quot;&gt;&lt;code&gt;NotificationEmitter&lt;/code&gt;&lt;/a&gt; interface that allows a listener to be registered within the &lt;code&gt;MemoryMXBean&lt;/code&gt; as a notification listener. Below is an example code that registers a &lt;code&gt;MyListener&lt;/code&gt; to handle notification emitted by the &lt;code&gt;MemoryMXBean&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MemoryMXBean&lt;/code&gt; ではによって返されるオブジェクト&lt;a href=&quot;managementfactory#getMemoryMXBean()&quot;&gt; &lt;code&gt;ManagementFactory.getMemoryMXBean()&lt;/code&gt; は&lt;/a&gt;実装&lt;a href=&quot;../../../javax/management/notificationemitter&quot;&gt; &lt;code&gt;NotificationEmitter&lt;/code&gt; &lt;/a&gt;リスナーが内に登録されることを可能にするインターフェース &lt;code&gt;MemoryMXBean&lt;/code&gt; では通知リスナとしての。以下は、 &lt;code&gt;MemoryMXBean&lt;/code&gt; によって &lt;code&gt;MyListener&lt;/code&gt; された通知を処理するためにMyListenerを登録するサンプルコードです。</target>
        </trans-unit>
        <trans-unit id="8e6c1d6da906bc1b50ed3822bfcdb7ac20a1aee1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MemoryMXBean&lt;/code&gt; object returned by &lt;a href=&quot;managementfactory#getMemoryMXBean--&quot;&gt;&lt;code&gt;ManagementFactory.getMemoryMXBean()&lt;/code&gt;&lt;/a&gt; implements the &lt;a href=&quot;../../../javax/management/notificationemitter&quot;&gt;&lt;code&gt;NotificationEmitter&lt;/code&gt;&lt;/a&gt; interface that allows a listener to be registered within the &lt;code&gt;MemoryMXBean&lt;/code&gt; as a notification listener. Below is an example code that registers a &lt;code&gt;MyListener&lt;/code&gt; to handle notification emitted by the &lt;code&gt;MemoryMXBean&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MemoryMXBean&lt;/code&gt; ではによって返されるオブジェクト&lt;a href=&quot;managementfactory#getMemoryMXBean--&quot;&gt; &lt;code&gt;ManagementFactory.getMemoryMXBean()&lt;/code&gt; は&lt;/a&gt;実装&lt;a href=&quot;../../../javax/management/notificationemitter&quot;&gt; &lt;code&gt;NotificationEmitter&lt;/code&gt; &lt;/a&gt;リスナーが内に登録されることを可能にするインターフェース &lt;code&gt;MemoryMXBean&lt;/code&gt; では通知リスナとしての。以下登録コード例である &lt;code&gt;MyListener&lt;/code&gt; によって放出された通知処理する &lt;code&gt;MemoryMXBean&lt;/code&gt; ではは。</target>
        </trans-unit>
        <trans-unit id="33bb8679046b19786cafc3f83df011fe2fd08c26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MenuBar&lt;/code&gt; class encapsulates the platform's concept of a menu bar bound to a frame.</source>
          <target state="translated">&lt;code&gt;MenuBar&lt;/code&gt; クラスは、フレームに結合されるメニューバーの概念をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="14b089e0c21d4e5f4b76d1c03ed79e79cce03f7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MenuBar&lt;/code&gt; class encapsulates the platform's concept of a menu bar bound to a frame. In order to associate the menu bar with a &lt;code&gt;Frame&lt;/code&gt; object, call the frame's &lt;code&gt;setMenuBar&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;MenuBar&lt;/code&gt; クラスは、フレームに結合されるメニューバーの概念をカプセル化します。メニューバーを &lt;code&gt;Frame&lt;/code&gt; オブジェクトに関連付けるには、フレームの &lt;code&gt;setMenuBar&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="dc83b8a910473a027cff1f2424c20667476e8789" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MenuShortcut&lt;/code&gt; class represents a keyboard accelerator for a MenuItem.</source>
          <target state="translated">&lt;code&gt;MenuShortcut&lt;/code&gt; クラスはMenuItemのキーボードアクセラレータを表します。</target>
        </trans-unit>
        <trans-unit id="53c61256ecec8100f7f9a41d04960f58fac56df7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MessageInfo&lt;/code&gt; class provides additional ancillary information about messages.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0e62f9bd1ae525e07714ef0b4ef19ee8691114c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MessageInfo&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; if this channel is in non-blocking mode and no messages are immediately available or the notification handler returns &lt;a href=&quot;handlerresult#RETURN&quot;&gt;&lt;code&gt;RETURN&lt;/code&gt;&lt;/a&gt; after handling a notification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="600646097950dd1f186fdf48626c3f0e7f2ff708" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MessageInfo&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt; if this channel is in non-blocking mode and no messages are immediately available or the notification handler returns &lt;code&gt;RETURN&lt;/code&gt; after handling a notification</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="82571554e721d419914c56f461c9899435b69ef0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MetaEventListener&lt;/code&gt; interface should be implemented by classes whose instances need to be notified when a &lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt; has processed a &lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;MetaEventListener&lt;/code&gt; のインタフェースは、そのインスタンスの場合に通知する必要があるクラスによって実装される必要があり&lt;a href=&quot;sequencer&quot;&gt; &lt;code&gt;Sequencer&lt;/code&gt; が&lt;/a&gt;処理した&lt;a href=&quot;metamessage&quot;&gt; &lt;code&gt;MetaMessage&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b78a4c32d697abee0a6159e1d2a87909e03931ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MetaEventListener&lt;/code&gt; interface should be implemented by classes whose instances need to be notified when a &lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt; has processed a &lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;. To register a &lt;code&gt;MetaEventListener&lt;/code&gt; object to receive such notifications, pass it as the argument to the &lt;a href=&quot;sequencer#addMetaEventListener(javax.sound.midi.MetaEventListener)&quot;&gt;&lt;code&gt;addMetaEventListener&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;Sequencer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MetaEventListener&lt;/code&gt; のインタフェースは、そのインスタンスの場合に通知する必要があるクラスによって実装される必要があり&lt;a href=&quot;sequencer&quot;&gt; &lt;code&gt;Sequencer&lt;/code&gt; が&lt;/a&gt;処理した&lt;a href=&quot;metamessage&quot;&gt; &lt;code&gt;MetaMessage&lt;/code&gt; を&lt;/a&gt;。このような通知を受信するように &lt;code&gt;MetaEventListener&lt;/code&gt; オブジェクトを登録するには、 &lt;code&gt;Sequencer&lt;/code&gt; の&lt;a href=&quot;sequencer#addMetaEventListener(javax.sound.midi.MetaEventListener)&quot;&gt; &lt;code&gt;addMetaEventListener&lt;/code&gt; &lt;/a&gt;メソッドに引数として渡します。</target>
        </trans-unit>
        <trans-unit id="5864b743917b0ab45bb87ab5b12728c29a56a04c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MetaEventListener&lt;/code&gt; interface should be implemented by classes whose instances need to be notified when a &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; has processed a &lt;code&gt;&lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MetaEventListener&lt;/code&gt; のインタフェースは、そのインスタンスの場合に通知する必要があるクラスによって実装される必要があり &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; が処理した &lt;code&gt;&lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="91e79b4c499b3f35a4dda98bb1b312a4085719a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MetaEventListener&lt;/code&gt; interface should be implemented by classes whose instances need to be notified when a &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; has processed a &lt;code&gt;&lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;. To register a &lt;code&gt;MetaEventListener&lt;/code&gt; object to receive such notifications, pass it as the argument to the &lt;code&gt;&lt;a href=&quot;sequencer#addMetaEventListener-javax.sound.midi.MetaEventListener-&quot;&gt;&lt;code&gt;addMetaEventListener&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; method of &lt;code&gt;Sequencer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MetaEventListener&lt;/code&gt; のインタフェースは、そのインスタンスの場合に通知する必要があるクラスによって実装される必要があり &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; が処理した &lt;code&gt;&lt;a href=&quot;metamessage&quot;&gt;&lt;code&gt;MetaMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; を。そのような通知を受け取るために &lt;code&gt;MetaEventListener&lt;/code&gt; オブジェクトを登録するには、それを引数として &lt;code&gt;Sequencer&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;sequencer#addMetaEventListener-javax.sound.midi.MetaEventListener-&quot;&gt;&lt;code&gt;addMetaEventListener&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; メソッドに渡します。</target>
        </trans-unit>
        <trans-unit id="d01c40b457907a7d5e20ffd74ad4b85ee2009577" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MidiSystem&lt;/code&gt; class provides access to the installed MIDI system resources, including devices such as synthesizers, sequencers, and MIDI input and output ports.</source>
          <target state="translated">&lt;code&gt;MidiSystem&lt;/code&gt; クラスは、シンセサイザ、シーケンサ、MIDI入出力ポートなどのデバイスを含むインストールMIDIシステムリソースへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="a80d68435a1b6165c900a036816b9bec6091ed82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MidiSystem&lt;/code&gt; class provides access to the installed MIDI system resources, including devices such as synthesizers, sequencers, and MIDI input and output ports. A typical simple MIDI application might begin by invoking one or more &lt;code&gt;MidiSystem&lt;/code&gt; methods to learn what devices are installed and to obtain the ones needed in that application.</source>
          <target state="translated">&lt;code&gt;MidiSystem&lt;/code&gt; クラスは、シンセサイザ、シーケンサ、MIDI入出力ポートなどのデバイスを含むインストールMIDIシステムリソースへのアクセスを提供します。典型的なシンプルなMIDIアプリケーションは、1つまたは複数の &lt;code&gt;MidiSystem&lt;/code&gt; メソッドを呼び出して、インストールされているデバイスを学習し、そのアプリケーションに必要なデバイスを取得することから始まります。</target>
        </trans-unit>
        <trans-unit id="b52eb410a08736554d78710757e24ecd5480df64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mixer.Info&lt;/code&gt; class represents information about an audio mixer, including the product's name, version, and vendor, along with a textual description.</source>
          <target state="translated">&lt;code&gt;Mixer.Info&lt;/code&gt; クラスは、テキスト説明とともに、製品の名前、バージョン、ベンダーなど、オーディオミキサーに関する情報を表します。</target>
        </trans-unit>
        <trans-unit id="2413f98f580324031afa36fa47e305da2ad575eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mixer.Info&lt;/code&gt; class represents information about an audio mixer, including the product's name, version, and vendor, along with a textual description. This information may be retrieved through the &lt;a href=&quot;mixer#getMixerInfo()&quot;&gt;&lt;code&gt;getMixerInfo&lt;/code&gt;&lt;/a&gt; method of the &lt;code&gt;Mixer&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;Mixer.Info&lt;/code&gt; クラスは、テキスト説明とともに、製品の名前、バージョン、ベンダーなど、オーディオミキサーに関する情報を表します。この情報は、 &lt;code&gt;Mixer&lt;/code&gt; インターフェイスの&lt;a href=&quot;mixer#getMixerInfo()&quot;&gt; &lt;code&gt;getMixerInfo&lt;/code&gt; &lt;/a&gt;メソッドを介して取得できます。</target>
        </trans-unit>
        <trans-unit id="e56a0592321beb830ad7682fabbd101887d52b64" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mixer.Info&lt;/code&gt; class represents information about an audio mixer, including the product's name, version, and vendor, along with a textual description. This information may be retrieved through the &lt;a href=&quot;mixer#getMixerInfo--&quot;&gt;&lt;code&gt;getMixerInfo&lt;/code&gt;&lt;/a&gt; method of the &lt;code&gt;Mixer&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;Mixer.Info&lt;/code&gt; クラスは、テキスト説明とともに、製品の名前、バージョン、ベンダーなど、オーディオミキサーに関する情報を表します。この情報は、 &lt;code&gt;Mixer&lt;/code&gt; インターフェースの&lt;a href=&quot;mixer#getMixerInfo--&quot;&gt; &lt;code&gt;getMixerInfo&lt;/code&gt; &lt;/a&gt;メソッドを通じて取得できます。</target>
        </trans-unit>
        <trans-unit id="cb9a70e7236c1e2ff693bd4d1a815405e4adcc77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MouseEvent&lt;/code&gt; interface provides specific contextual information associated with Mouse events.</source>
          <target state="translated">&lt;code&gt;MouseEvent&lt;/code&gt; インタフェースは、マウスイベントに関連する特定のコンテキスト情報を提供します。</target>
        </trans-unit>
        <trans-unit id="29d1d5cbe4705a95fc4625d67c369d249af68cf2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MouseListener&lt;/code&gt; listens to events.</source>
          <target state="translated">&lt;code&gt;MouseListener&lt;/code&gt; はイベントをリッスンします。</target>
        </trans-unit>
        <trans-unit id="58edd9693b150e70063bc2843ee9db0174fe97ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MouseMotionListener&lt;/code&gt; listens to events.</source>
          <target state="translated">&lt;code&gt;MouseMotionListener&lt;/code&gt; はイベントをリッスンします。</target>
        </trans-unit>
        <trans-unit id="150ea102c83ed4ff8e936243516b257e232ff94f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MouseWheelEvent&lt;/code&gt; class includes methods for getting the number of &quot;clicks&quot; by which the mouse wheel is rotated. The &lt;a href=&quot;#getWheelRotation()&quot;&gt;&lt;code&gt;getWheelRotation()&lt;/code&gt;&lt;/a&gt; method returns the integer number of &quot;clicks&quot; corresponding to the number of notches by which the wheel was rotated. In addition to this method, the &lt;code&gt;MouseWheelEvent&lt;/code&gt; class provides the &lt;a href=&quot;#getPreciseWheelRotation()&quot;&gt;&lt;code&gt;getPreciseWheelRotation()&lt;/code&gt;&lt;/a&gt; method which returns a double number of &quot;clicks&quot; in case a partial rotation occurred. The &lt;a href=&quot;#getPreciseWheelRotation()&quot;&gt;&lt;code&gt;getPreciseWheelRotation()&lt;/code&gt;&lt;/a&gt; method is useful if a mouse supports a high-resolution wheel, such as a freely rotating wheel with no notches. Applications can benefit by using this method to process mouse wheel events more precisely, and thus, making visual perception smoother.</source>
          <target state="translated">&lt;code&gt;MouseWheelEvent&lt;/code&gt; がのクラスは、マウスホイールを回転させることによって「クリック」の数を取得するための方法を含みます。&lt;a href=&quot;#getWheelRotation()&quot;&gt; &lt;code&gt;getWheelRotation()&lt;/code&gt; &lt;/a&gt;メソッドは、車輪が回転したことにより、ノッチの数に対応する「クリック」の整数を返します。この方法に加えて、 &lt;code&gt;MouseWheelEvent&lt;/code&gt; がのクラスが提供&lt;a href=&quot;#getPreciseWheelRotation()&quot;&gt; &lt;code&gt;getPreciseWheelRotation()&lt;/code&gt; &lt;/a&gt;部分的な回転が発生した場合には「クリック」の二重の数を返す方法。&lt;a href=&quot;#getPreciseWheelRotation()&quot;&gt; &lt;code&gt;getPreciseWheelRotation()&lt;/code&gt; &lt;/a&gt;マウスはないノッチとそのような自由に回転するホイールのような高解像度のホイールを、サポートしている場合、この方法は有用です。アプリケーションは、この方法を使用してマウスホイールのイベントをより正確に処理し、視覚をよりスムーズにすることでメリットを得ることができます。</target>
        </trans-unit>
        <trans-unit id="7bdd496fed36950bc598bbd6ea56d02421a0688e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt; class represents one-banded images and can pack multiple one-sample pixels into one data element.</source>
          <target state="translated">&lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt; ののクラスは、単一バンド化されたイメージを表しており、1つのデータ要素に複数の1サンプルのピクセルをパックすることができます。</target>
        </trans-unit>
        <trans-unit id="11bb803e4faf382111d8da7958e2a0219f9b2f28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt; class represents one-banded images and can pack multiple one-sample pixels into one data element. Pixels are not allowed to span data elements. The data type can be DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, or DataBuffer.TYPE_INT. Each pixel must be a power of 2 number of bits and a power of 2 number of pixels must fit exactly in one data element. Pixel bit stride is equal to the number of bits per pixel. Scanline stride is in data elements and the last several data elements might be padded with unused pixels. Data bit offset is the offset in bits from the beginning of the &lt;a href=&quot;databuffer&quot;&gt;&lt;code&gt;DataBuffer&lt;/code&gt;&lt;/a&gt; to the first pixel and must be a multiple of pixel bit stride.</source>
          <target state="translated">&lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt; ののクラスは、単一バンド化されたイメージを表しており、1つのデータ要素に複数の1サンプルのピクセルをパックすることができます。ピクセルはデータ要素にまたがることはできません。データ型は、DataBuffer.TYPE_BYTE、DataBuffer.TYPE_USHORT、またはDataBuffer.TYPE_INTです。各ピクセルは2ビットの累乗である必要があり、2のピクセルの累乗は1つのデータ要素に正確に収まる必要があります。ピクセルビットストライドは、ピクセルあたりのビット数と同じです。スキャンラインストライドはデータ要素にあり、最後のいくつかのデータ要素は未使用のピクセルで埋められる可能性があります。データビットオフセットは、&lt;a href=&quot;databuffer&quot;&gt; &lt;code&gt;DataBuffer&lt;/code&gt; &lt;/a&gt;の先頭から最初のピクセルまでのビット単位のオフセットであり、ピクセルビットストライドの倍数である必要があります。</target>
        </trans-unit>
        <trans-unit id="48b5e8ca00e67ac4765345cf8cb60a38e463c497" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MultiResolutionImage&lt;/code&gt; interface should be implemented by any subclass of &lt;code&gt;java.awt.Image&lt;/code&gt; whose instances are intended to provide image resolution variants according to the given image width and height. For convenience, toolkit images obtained from &lt;code&gt;Toolkit.getImage(String name)&lt;/code&gt; and &lt;code&gt;Toolkit.getImage(URL url)&lt;/code&gt; will implement this interface on platforms that support naming conventions for resolution variants of stored image media and the &lt;code&gt;AbstractMultiResolutionImage&lt;/code&gt; and &lt;code&gt;BaseMultiResolutionImage&lt;/code&gt; classes are provided to facilitate easy construction of custom multi-resolution images from a list of related images.</source>
          <target state="translated">&lt;code&gt;MultiResolutionImage&lt;/code&gt; のインターフェースは、任意のサブクラスによって実装されるべきで &lt;code&gt;java.awt.Image&lt;/code&gt; インスタンス画像の解像度が所定の画像の幅と高さに応じて変異体を提供することを意図しています。便宜上、 &lt;code&gt;Toolkit.getImage(String name)&lt;/code&gt; および &lt;code&gt;Toolkit.getImage(URL url)&lt;/code&gt; から取得したツールキットイメージは、保存されたイメージメディアの解像度バリアントの命名規則をサポートするプラットフォームにこのインターフェイスを実装し、 &lt;code&gt;AbstractMultiResolutionImage&lt;/code&gt; クラスと &lt;code&gt;BaseMultiResolutionImage&lt;/code&gt; クラスが提供されています。関連画像のリストからのカスタムマルチ解像度画像の構築。</target>
        </trans-unit>
        <trans-unit id="91f095d99b6510976c34e8d18d1a314c4fbc5507" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MultipleDocumentHandlingType&lt;/code&gt; instance to use for specifying that the job should be divided into separate, collated copies.</source>
          <target state="translated">&lt;code&gt;MultipleDocumentHandlingType&lt;/code&gt; のインスタンスは、ジョブが別々の照合コピーに分割しなければならないことを指定するために使用します。</target>
        </trans-unit>
        <trans-unit id="3fb976389c7192bf00db15408f20e07ee4b0f8f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MultipleDocumentHandlingType&lt;/code&gt; instance to use for specifying that the job should be divided into separate, uncollated copies.</source>
          <target state="translated">&lt;code&gt;MultipleDocumentHandlingType&lt;/code&gt; のインスタンスは、ジョブが別、非照合コピーに分割しなければならないことを指定するために使用します。</target>
        </trans-unit>
        <trans-unit id="9b6e1370eae5cba21c51b71f67e35eac7aa4cee4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MultipleMaster&lt;/code&gt; interface represents Type 1 Multiple Master fonts.</source>
          <target state="translated">&lt;code&gt;MultipleMaster&lt;/code&gt; のインタフェースは、Type 1 Multiple Masterフォントを表します。</target>
        </trans-unit>
        <trans-unit id="6d994d997ce673ebe643101f39b0acec5af2dd85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MultipleMaster&lt;/code&gt; interface represents Type 1 Multiple Master fonts. A particular &lt;a href=&quot;../font&quot;&gt;&lt;code&gt;Font&lt;/code&gt;&lt;/a&gt; object can implement this interface.</source>
          <target state="translated">&lt;code&gt;MultipleMaster&lt;/code&gt; のインタフェースは、Type 1 Multiple Masterフォントを表します。特定の&lt;a href=&quot;../font&quot;&gt; &lt;code&gt;Font&lt;/code&gt; &lt;/a&gt;オブジェクトは、このインターフェイスを実装できます。</target>
        </trans-unit>
        <trans-unit id="de5f6eded86ee9d71d197fd648730d9fa992e076" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MutationEvent&lt;/code&gt; interface provides specific contextual information associated with Mutation events.</source>
          <target state="translated">&lt;code&gt;MutationEvent&lt;/code&gt; インタフェースは、変異イベントに関連する特定のコンテキスト情報を提供します。</target>
        </trans-unit>
        <trans-unit id="0480993326bc778542fae22556b604694f999249" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NClob&lt;/code&gt; interface extends the &lt;code&gt;Clob&lt;/code&gt; interface which provides methods for getting the length of an SQL &lt;code&gt;NCLOB&lt;/code&gt; value, for materializing a &lt;code&gt;NCLOB&lt;/code&gt; value on the client, and for searching for a substring or &lt;code&gt;NCLOB&lt;/code&gt; object within a &lt;code&gt;NCLOB&lt;/code&gt; value. A &lt;code&gt;NClob&lt;/code&gt; object, just like a &lt;code&gt;Clob&lt;/code&gt; object, is valid for the duration of the transaction in which it was created. Methods in the interfaces &lt;a href=&quot;resultset&quot;&gt;&lt;code&gt;ResultSet&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;callablestatement&quot;&gt;&lt;code&gt;CallableStatement&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;preparedstatement&quot;&gt;&lt;code&gt;PreparedStatement&lt;/code&gt;&lt;/a&gt;, such as &lt;code&gt;getNClob&lt;/code&gt; and &lt;code&gt;setNClob&lt;/code&gt; allow a programmer to access an SQL &lt;code&gt;NCLOB&lt;/code&gt; value. In addition, this interface has methods for updating a &lt;code&gt;NCLOB&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;NClob&lt;/code&gt; インタフェースを拡張し &lt;code&gt;Clob&lt;/code&gt; SQLの長さ取得するための方法を提供インターフェース &lt;code&gt;NCLOB&lt;/code&gt; の実体のために、値を &lt;code&gt;NCLOB&lt;/code&gt; のクライアントに、及びサブストリングまたは検索するための値を &lt;code&gt;NCLOB&lt;/code&gt; の内のオブジェクト &lt;code&gt;NCLOB&lt;/code&gt; の値。 A &lt;code&gt;NClob&lt;/code&gt; オブジェクトは、同じように &lt;code&gt;Clob&lt;/code&gt; オブジェクト、それが作成されたトランザクションの期間中に有効です。インターフェース内のメソッド&lt;a href=&quot;resultset&quot;&gt; &lt;code&gt;ResultSet&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;callablestatement&quot;&gt; &lt;code&gt;CallableStatement&lt;/code&gt; の&lt;/a&gt;、および&lt;a href=&quot;preparedstatement&quot;&gt; &lt;code&gt;PreparedStatement&lt;/code&gt; の&lt;/a&gt;ような、 &lt;code&gt;getNClob&lt;/code&gt; と &lt;code&gt;setNClob&lt;/code&gt; は、 SQLアクセスするプログラマを許可 &lt;code&gt;NCLOB&lt;/code&gt; 値。さらに、このインターフェイスには、 &lt;code&gt;NCLOB&lt;/code&gt; 値を更新するためのメソッドがあります。</target>
        </trans-unit>
        <trans-unit id="788c03b8eac033377287b7f6bcedc89c000e71cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Name&lt;/code&gt; describes a hierarchical name composed of attributes, such as country name, and corresponding values, such as US. The type of the &lt;code&gt;AttributeValue&lt;/code&gt; component is determined by the &lt;code&gt;AttributeType&lt;/code&gt;; in general it will be a &lt;code&gt;directoryString&lt;/code&gt;. A &lt;code&gt;directoryString&lt;/code&gt; is usually one of &lt;code&gt;PrintableString&lt;/code&gt;, &lt;code&gt;TeletexString&lt;/code&gt; or &lt;code&gt;UniversalString&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 、米国のような国の名前などの属性、および対応する値で構成階層名を記述します。タイプ &lt;code&gt;AttributeValue&lt;/code&gt; のの成分は、によって決定される &lt;code&gt;AttributeType&lt;/code&gt; で。通常、これは &lt;code&gt;directoryString&lt;/code&gt; になります。A &lt;code&gt;directoryString&lt;/code&gt; は、通常の一つで &lt;code&gt;PrintableString&lt;/code&gt; 、 &lt;code&gt;TeletexString&lt;/code&gt; または &lt;code&gt;UniversalString&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e5c1c5d6176d58d28e9f865eee359984e02049b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Name&lt;/code&gt; interface represents a generic name -- an ordered sequence of components.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; コンポーネントの順序付けられたシーケンス-インターフェイスは、一般的な名前を表します。</target>
        </trans-unit>
        <trans-unit id="99d457ffbc6e55d6f5c1d1e7729fba20a1b311b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Name&lt;/code&gt; interface represents a generic name -- an ordered sequence of components. It can be a composite name (names that span multiple namespaces), or a compound name (names that are used within individual hierarchical naming systems).</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; コンポーネントの順序付けられたシーケンス-インターフェイスは、一般的な名前を表します。複合名（複数の名前空間にまたがる名前）または複合名（個々の階層ネーミングシステム内で使用される名前）にすることができます。</target>
        </trans-unit>
        <trans-unit id="305015d8407a5fa406fab5e1b3d6d830add7a693" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NameList&lt;/code&gt; interface provides the abstraction of an ordered collection of parallel pairs of name and namespace values (which could be null values), without defining or constraining how this collection is implemented.</source>
          <target state="translated">&lt;code&gt;NameList&lt;/code&gt; インターフェースは、このコレクションを実装する方法を定義または制限することなく、（NULL値であってもよい）の名前と名前空間値の並列対の順序付けられたコレクションの抽象化を提供します。</target>
        </trans-unit>
        <trans-unit id="7454486b923bccb0760d5b56990b0bc5f47c72ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NameList&lt;/code&gt; interface provides the abstraction of an ordered collection of parallel pairs of name and namespace values (which could be null values), without defining or constraining how this collection is implemented. The items in the &lt;code&gt;NameList&lt;/code&gt; are accessible via an integral index, starting from 0.</source>
          <target state="translated">&lt;code&gt;NameList&lt;/code&gt; インターフェースは、このコレクションを実装する方法を定義または制限することなく、（NULL値であってもよい）の名前と名前空間値の並列対の順序付けられたコレクションの抽象化を提供します。 &lt;code&gt;NameList&lt;/code&gt; の項目には、0から始まる整数インデックスを介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="cbfe1e053acf3330335dc5b7d73c7cc97d1d6123" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Naming&lt;/code&gt; class provides methods for storing and obtaining references to remote objects in a remote object registry.</source>
          <target state="translated">&lt;code&gt;Naming&lt;/code&gt; クラスは、リモートオブジェクトレジストリ内のリモートオブジェクトへの参照を格納および取得するための方法を提供します。</target>
        </trans-unit>
        <trans-unit id="789eb0afc298960a48962d09cc4750cf72e0303a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Naming&lt;/code&gt; class provides methods for storing and obtaining references to remote objects in a remote object registry. Each method of the &lt;code&gt;Naming&lt;/code&gt; class takes as one of its arguments a name that is a &lt;code&gt;java.lang.String&lt;/code&gt; in URL format (without the scheme component) of the form:</source>
          <target state="translated">&lt;code&gt;Naming&lt;/code&gt; クラスは、リモートオブジェクトレジストリ内のリモートオブジェクトへの参照を格納および取得するための方法を提供します。 &lt;code&gt;Naming&lt;/code&gt; クラスの各メソッドは、引数の1つとして、次の形式のURL形式（スキームコンポーネントなし）の &lt;code&gt;java.lang.String&lt;/code&gt; である名前を取ります。</target>
        </trans-unit>
        <trans-unit id="7b6edeb494d6ac7e0b5caa00f1aa813d7ae827c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NamingEvent&lt;/code&gt;'s state consists of</source>
          <target state="translated">&lt;code&gt;NamingEvent&lt;/code&gt; にの状態はで構成されてい</target>
        </trans-unit>
        <trans-unit id="c86cac2e51c5a47693977a50e2b8c6b5729d2050" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NetworkInterface&lt;/code&gt; this interface is attached to.</source>
          <target state="translated">&lt;code&gt;NetworkInterface&lt;/code&gt; このインタフェースは、に取り付けられています。</target>
        </trans-unit>
        <trans-unit id="6ebb9005b08a0a47ae882894b81ab2da875ad354" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Node&lt;/code&gt; at the corresponding position upon success. A value of &lt;code&gt;null&lt;/code&gt; is returned if the index is out of range.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ec1a7f6d32baca20da17c927709e8d24c0aa30ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Node&lt;/code&gt; interface is the primary datatype for the entire Document Object Model.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; インタフェースはDocument Object Model全体の主要なデータ型です。</target>
        </trans-unit>
        <trans-unit id="897563f996b4fd9e2640f2f9bbc27d935dea63b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Node&lt;/code&gt; interface is the primary datatype for the entire Document Object Model. It represents a single node in the document tree. While all objects implementing the &lt;code&gt;Node&lt;/code&gt; interface expose methods for dealing with children, not all objects implementing the &lt;code&gt;Node&lt;/code&gt; interface may have children. For example, &lt;code&gt;Text&lt;/code&gt; nodes may not have children, and adding children to such nodes results in a &lt;code&gt;DOMException&lt;/code&gt; being raised.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; インタフェースはDocument Object Model全体の主要なデータ型です。これは、ドキュメントツリー内の単一のノードを表します。 &lt;code&gt;Node&lt;/code&gt; インターフェースを実装するすべてのオブジェクトは子を処理するためのメソッドを公開しますが、 &lt;code&gt;Node&lt;/code&gt; インターフェースを実装するすべてのオブジェクトが子を持つとは限りません。たとえば、 &lt;code&gt;Text&lt;/code&gt; ノードに子がない場合、そのようなノードに子を追加すると、 &lt;code&gt;DOMException&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="c4f24312524d645707d6367d6e45b401e6f4d5c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Node&lt;/code&gt; that led to the parsing error, or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; 解析エラー、またはにつながった &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aef3bb11e429e313e89542fc0866ccc9dfce042f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Node&lt;/code&gt; with a &lt;code&gt;name&lt;/code&gt; or &lt;code&gt;id&lt;/code&gt; attribute whose value corresponds to the specified string. Upon failure (e.g., no node with this name exists), returns &lt;code&gt;null&lt;/code&gt; .</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d514acdf85277f67f4eec8dd90a565c433b8653d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NodeFilter&lt;/code&gt; used to screen nodes.</source>
          <target state="translated">ノードの &lt;code&gt;NodeFilter&lt;/code&gt; 使用されるNodeFilter。</target>
        </trans-unit>
        <trans-unit id="83084c208299fa879aacdf9ab332c5751f1d57bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NodeList&lt;/code&gt; interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented.</source>
          <target state="translated">&lt;code&gt;NodeList&lt;/code&gt; インタフェースは、このコレクションの実装方法を定義または制限することなく、順序付けられたノードのコレクションの抽象化を提供します。</target>
        </trans-unit>
        <trans-unit id="98e77cd2d040a57b84c12a03ebf2efec6b739714" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NodeList&lt;/code&gt; interface provides the abstraction of an ordered collection of nodes, without defining or constraining how this collection is implemented. &lt;code&gt;NodeList&lt;/code&gt; objects in the DOM are live.</source>
          <target state="translated">&lt;code&gt;NodeList&lt;/code&gt; インタフェースは、このコレクションの実装方法を定義または制限することなく、順序付けられたノードのコレクションの抽象化を提供します。DOM内の &lt;code&gt;NodeList&lt;/code&gt; オブジェクトはライブです。</target>
        </trans-unit>
        <trans-unit id="6e8cd1aac5ffc5b5216ef057ef34b1b290375af7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NoninvertibleTransformException&lt;/code&gt; class represents an exception that is thrown if an operation is performed requiring the inverse of an &lt;a href=&quot;affinetransform&quot;&gt;&lt;code&gt;AffineTransform&lt;/code&gt;&lt;/a&gt; object but the &lt;code&gt;AffineTransform&lt;/code&gt; is in a non-invertible state.</source>
          <target state="translated">&lt;code&gt;NoninvertibleTransformException&lt;/code&gt; のクラスは、動作は逆の要求が行われる場合にスローされた例外を表し&lt;a href=&quot;affinetransform&quot;&gt; &lt;code&gt;AffineTransform&lt;/code&gt; &lt;/a&gt;オブジェクトがなく &lt;code&gt;AffineTransform&lt;/code&gt; 非可逆状態にあるが。</target>
        </trans-unit>
        <trans-unit id="2b3873d2cdde65ea86bffbc4fce3ee8af89880c4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NotificationListeners&lt;/code&gt; are identified by the IDs which were returned by the &lt;a href=&quot;#addNotificationListeners(javax.management.ObjectName%5B%5D,java.rmi.MarshalledObject%5B%5D,javax.security.auth.Subject%5B%5D)&quot;&gt;&lt;code&gt;addNotificationListeners(ObjectName[], MarshalledObject[],
 Subject[])&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;NotificationListeners&lt;/code&gt; は、によって返されたIDによって識別される&lt;a href=&quot;#addNotificationListeners(javax.management.ObjectName%5B%5D,java.rmi.MarshalledObject%5B%5D,javax.security.auth.Subject%5B%5D)&quot;&gt; &lt;code&gt;addNotificationListeners(ObjectName[], MarshalledObject[], Subject[])&lt;/code&gt; &lt;/a&gt;の方法。</target>
        </trans-unit>
        <trans-unit id="1400dea5eb2e0f1d272329a6fddf1dde956ad2ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NotificationListeners&lt;/code&gt; are identified by the IDs which were returned by the &lt;a href=&quot;rmiconnection#addNotificationListeners-javax.management.ObjectName:A-java.rmi.MarshalledObject:A-javax.security.auth.Subject:A-&quot;&gt;&lt;code&gt;RMIConnection.addNotificationListeners(ObjectName[], MarshalledObject[],
 Subject[])&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;NotificationListeners&lt;/code&gt; は、によって返されたIDによって識別される&lt;a href=&quot;rmiconnection#addNotificationListeners-javax.management.ObjectName:A-java.rmi.MarshalledObject:A-javax.security.auth.Subject:A-&quot;&gt; &lt;code&gt;RMIConnection.addNotificationListeners(ObjectName[], MarshalledObject[], Subject[])&lt;/code&gt; &lt;/a&gt;の方法。</target>
        </trans-unit>
        <trans-unit id="e9f0f1aa295652b71a3e12c32b29eaa12cfad79e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NotificationListeners&lt;/code&gt; are identified by the IDs which were returned by the &lt;a href=&quot;rmiconnection#addNotificationListeners-javax.management.ObjectName:A-java.rmi.MarshalledObject:A-javax.security.auth.Subject:A-&quot;&gt;&lt;code&gt;addNotificationListeners(ObjectName[], MarshalledObject[],
 Subject[])&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;NotificationListeners&lt;/code&gt; は、によって返されたIDによって識別される&lt;a href=&quot;rmiconnection#addNotificationListeners-javax.management.ObjectName:A-java.rmi.MarshalledObject:A-javax.security.auth.Subject:A-&quot;&gt; &lt;code&gt;addNotificationListeners(ObjectName[], MarshalledObject[], Subject[])&lt;/code&gt; &lt;/a&gt;の方法。</target>
        </trans-unit>
        <trans-unit id="ccce0d9a8a12b3a7a535b35383d383994618eac6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Number&lt;/code&gt; return type attempts to coalesce the text of a node to a &lt;code&gt;double&lt;/code&gt; data type.</source>
          <target state="translated">&lt;code&gt;Number&lt;/code&gt; にノードのテキストを合体するための戻り型試行 &lt;code&gt;double&lt;/code&gt; データ型。</target>
        </trans-unit>
        <trans-unit id="bc96d682dd5c52413c4fbf9e0e9e89a288bc4573" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NumericShaper&lt;/code&gt; class is used to convert Latin-1 (European) digits to other Unicode decimal digits.</source>
          <target state="translated">&lt;code&gt;NumericShaper&lt;/code&gt; のクラスは、他のUnicode桁にLatin-1（ヨーロッパ言語）の数字を変換するために使用されます。</target>
        </trans-unit>
        <trans-unit id="b8d28052c532e291b766359b9a53299f626fbbd7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NumericShaper&lt;/code&gt; class is used to convert Latin-1 (European) digits to other Unicode decimal digits. Users of this class will primarily be people who wish to present data using national digit shapes, but find it more convenient to represent the data internally using Latin-1 (European) digits. This does not interpret the deprecated numeric shape selector character (U+206E).</source>
          <target state="translated">&lt;code&gt;NumericShaper&lt;/code&gt; のクラスは、他のUnicode桁にLatin-1（ヨーロッパ言語）の数字を変換するために使用されます。このクラスのユーザーは、主に国の数字の形を使用してデータを表示したいが、ラテン1（ヨーロッパ）の数字を使用してデータを内部的に表す方が便利であると考える人々です。これは、非推奨の数値形状セレクター文字（U + 206E）を解釈しません。</target>
        </trans-unit>
        <trans-unit id="2c9376e7cc0383d27533cd38986f773a0a05e444" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OFFSET_SECONDS&lt;/code&gt; field will return a date-time with the specified offset. The local date-time is unaltered. If the new offset value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;OFFSET_SECONDS&lt;/code&gt; のフィールドには、指定されたオフセットで日付と時刻を返します。ローカルの日時は変更されません。新しいオフセット値が有効範囲外の場合、 &lt;code&gt;DateTimeException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="1918dcc7fcc29b6bc425b2c6f7a8a0dcc372038d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OFFSET_SECONDS&lt;/code&gt; field will return a time with the specified offset. The local time is unaltered. If the new offset value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;OFFSET_SECONDS&lt;/code&gt; のフィールドには、指定されたオフセットとの時間を返します。現地時間は変更されません。新しいオフセット値が有効範囲外の場合、 &lt;code&gt;DateTimeException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="5b99274c982da4f70821c4ca9b3b72ad4b9daf7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OFFSET_SECONDS&lt;/code&gt; field will typically be ignored. The offset of a &lt;code&gt;ZonedDateTime&lt;/code&gt; is controlled primarily by the time-zone. As such, changing the offset does not generally make sense, because there is only one valid offset for the local date-time and zone. If the zoned date-time is in a daylight savings overlap, then the offset is used to switch between the two valid offsets. In all other cases, the offset is ignored. If the new offset value is outside the valid range then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;OFFSET_SECONDS&lt;/code&gt; のフィールドは、一般的に無視されます。 &lt;code&gt;ZonedDateTime&lt;/code&gt; のオフセットは、主にタイムゾーンによって制御されます。そのため、ローカルの日時とゾーンには有効なオフセットが1つしかないため、オフセットを変更しても通常は意味がありません。ゾーン化された日時が夏時間の重複にある場合、オフセットは2つの有効なオフセットを切り替えるために使用されます。他のすべての場合、オフセットは無視されます。新しいオフセット値が有効範囲外の場合、 &lt;code&gt;DateTimeException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="dcf77ee080e78ac2d4bb93c007b8230ccb51fe01" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object&lt;/code&gt; associated with a node that accepts enumerated values must be equal to one of the values returned by this method, as defined by the &lt;code&gt;==&lt;/code&gt; operator (as opposed to the &lt;code&gt;Object.equals&lt;/code&gt; method).</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; によって定義される列挙値を受け付けるノードに関連するが、このメソッドによって返される値のいずれかに等しくなければならない &lt;code&gt;==&lt;/code&gt; （とは対照的に、オペレータ &lt;code&gt;Object.equals&lt;/code&gt; 方法）。</target>
        </trans-unit>
        <trans-unit id="fea5e3bfa1c2ff38c60f4081955464c2179176f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object&lt;/code&gt; is converted to a string using its &lt;code&gt;toString&lt;/code&gt; method and the result is used to label a &lt;code&gt;JButton&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 、その文字列に変換される &lt;code&gt;toString&lt;/code&gt; 方法および結果は、標識するために使用される &lt;code&gt;JButton&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed616c574e37d462ce3dc1a59d27e3a04084fb6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object&lt;/code&gt; that encapsulates the result of evaluating the expression.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 式を評価した結果をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="423a928bc882303e9119de621878e89bd3ee2d1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Object&lt;/code&gt; that is the result of evaluating the expression and converting the result to &lt;code&gt;returnType&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 式を評価し、結果を変換した結果である &lt;code&gt;returnType&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0324a1f9879d4eda586224698a2a40120a519c02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectInstance&lt;/code&gt; associated with the MBean specified by &lt;var&gt;name&lt;/var&gt;. The contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;name&lt;/code&gt; and the contained class name is &lt;code&gt;&lt;a href=&quot;#getMBeanInfo(javax.management.ObjectName)&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ObjectInstance&lt;/code&gt; MBeanに関連付けられたがで指定された &lt;var&gt;name&lt;/var&gt; 。含まれている &lt;code&gt;ObjectName&lt;/code&gt; は &lt;code&gt;name&lt;/code&gt; であり、含まれているクラス名は &lt;code&gt;&lt;a href=&quot;#getMBeanInfo(javax.management.ObjectName)&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b603e08da03f55ce9f9208ff360071d61f560e92" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectInstance&lt;/code&gt; associated with the MBean specified by &lt;var&gt;name&lt;/var&gt;. The contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;name&lt;/code&gt; and the contained class name is &lt;code&gt;&lt;a href=&quot;#getMBeanInfo(javax.management.ObjectName,javax.security.auth.Subject)&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ObjectInstance&lt;/code&gt; MBeanに関連付けられたがで指定された &lt;var&gt;name&lt;/var&gt; 。含まれている &lt;code&gt;ObjectName&lt;/code&gt; は &lt;code&gt;name&lt;/code&gt; であり、含まれているクラス名は &lt;code&gt;&lt;a href=&quot;#getMBeanInfo(javax.management.ObjectName,javax.security.auth.Subject)&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a1119954570aff30608ab91b67db57a1edb87ff0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectInstance&lt;/code&gt; associated with the MBean specified by &lt;var&gt;name&lt;/var&gt;. The contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;name&lt;/code&gt; and the contained class name is &lt;code&gt;&lt;a href=&quot;mbeanserverconnection#getMBeanInfo-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ObjectInstance&lt;/code&gt; MBeanに関連付けられたがで指定された &lt;var&gt;name&lt;/var&gt; 。含まれる &lt;code&gt;ObjectName&lt;/code&gt; は &lt;code&gt;name&lt;/code&gt; で、含まれるクラス名は &lt;code&gt;&lt;a href=&quot;mbeanserverconnection#getMBeanInfo-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b503bdd5bfbf40758607910f1e62bc31dd68e802" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectInstance&lt;/code&gt; associated with the MBean specified by &lt;var&gt;name&lt;/var&gt;. The contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;name&lt;/code&gt; and the contained class name is &lt;code&gt;&lt;a href=&quot;rmiconnection#getMBeanInfo-javax.management.ObjectName-javax.security.auth.Subject-&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ObjectInstance&lt;/code&gt; MBeanに関連付けられたがで指定された &lt;var&gt;name&lt;/var&gt; 。含まれる &lt;code&gt;ObjectName&lt;/code&gt; は &lt;code&gt;name&lt;/code&gt; で、含まれるクラス名は &lt;code&gt;&lt;a href=&quot;rmiconnection#getMBeanInfo-javax.management.ObjectName-javax.security.auth.Subject-&quot;&gt;&lt;code&gt;getMBeanInfo(name)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c4bb59ef2d57c5a36b82e56b3ef8695a22a0311d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for a garbage collector within an MBeanServer is:</source>
          <target state="translated">MBeanServer内のガベージコレクタのMXBeanを一意に識別するための &lt;code&gt;ObjectName&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0b9021e57442d401347cae33e09b53197bbb0b25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for a memory manager within an MBeanServer is:</source>
          <target state="translated">MBeanServer内のメモリマネージャのMXBeanを一意に識別するための &lt;code&gt;ObjectName&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="bb1a05072aa2847772982c43cf0d890c7cae913a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for a memory pool within an &lt;code&gt;MBeanServer&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;MBeanServer&lt;/code&gt; 内のメモリプールのMXBeanを一意に識別するための &lt;code&gt;ObjectName&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="db98f30b0477805218b1ae4bdb074256518e5803" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the class loading system within an &lt;code&gt;MBeanServer&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;ObjectName&lt;/code&gt; の一意内のクラスローディングシステムのためのMXBeanを識別するため &lt;code&gt;MBeanServer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="55e8342fd743f84bda60cd36babb3e068a2e6ec7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the compilation system within an MBeanServer is:</source>
          <target state="translated">MBeanServer内のコンパイルシステムのMXBeanを一意に識別するための &lt;code&gt;ObjectName&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="70515004bb956a637a0eaf59af0413164c30fb86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the memory system within an MBeanServer is:</source>
          <target state="translated">MBeanServer内のメモリシステムのMXBeanを一意に識別するための &lt;code&gt;ObjectName&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c1f16184d09f51af30331c1389e9013ddc4a17df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the operating system within an MBeanServer is:</source>
          <target state="translated">MBeanServer内のオペレーティングシステムのMXBeanを一意に識別するための &lt;code&gt;ObjectName&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="07da8e2d7411da3d53f255c201b631c0ac856d81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the runtime system within an MBeanServer is:</source>
          <target state="translated">MBeanServer内のランタイムシステムのMXBeanを一意に識別するための &lt;code&gt;ObjectName&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e9552b5b6f9a739364bfe6b9bdedc853e8972846" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the MXBean for the thread system within an MBeanServer is:</source>
          <target state="translated">MBeanServer内のスレッドシステムのMXBeanを一意に識別するための &lt;code&gt;ObjectName&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8f8738e8ba429b9a8435d40f2c720f73710f949e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ObjectName&lt;/code&gt; for uniquely identifying the diagnostic MXBean within an MBeanServer is:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9dcfa6a1fe8b9264f0661c006080ec7572ae4b83" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OpenMBeanInfoSupport&lt;/code&gt; class describes the management information of an</source>
          <target state="translated">&lt;code&gt;OpenMBeanInfoSupport&lt;/code&gt; のクラスはの管理情報を記述します</target>
        </trans-unit>
        <trans-unit id="b203a779783192d8423055b7a1a9da6d91af0f3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OpenType&lt;/code&gt; class is the parent abstract class of all classes which describe the actual</source>
          <target state="translated">&lt;code&gt;OpenType&lt;/code&gt; クラスは、実際のを記述するすべてのクラスの親抽象クラスであります</target>
        </trans-unit>
        <trans-unit id="586067081baeca1b7bed47bc53574acbdf981084" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OpenType&lt;/code&gt; interface represents OpenType and TrueType fonts.</source>
          <target state="translated">&lt;code&gt;OpenType&lt;/code&gt; インタフェースはOpenTypeフォントとTrueTypeフォントを表します。</target>
        </trans-unit>
        <trans-unit id="69a6dcd99d9214cc61611d6ad8120d0f1f893a75" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OpenType&lt;/code&gt; interface represents OpenType and TrueType fonts. This interface makes it possible to obtain</source>
          <target state="translated">&lt;code&gt;OpenType&lt;/code&gt; インタフェースはOpenTypeフォントとTrueTypeフォントを表します。このインターフェースにより、</target>
        </trans-unit>
        <trans-unit id="d1ddfa406472424e8cf5be6dc9b98f250e9362d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OperatingSystemMXBean&lt;/code&gt; object returned by &lt;a href=&quot;../../../../java.management/java/lang/management/managementfactory#getOperatingSystemMXBean()&quot;&gt;&lt;code&gt;ManagementFactory.getOperatingSystemMXBean()&lt;/code&gt;&lt;/a&gt; is an instance of the implementation class of this interface or &lt;a href=&quot;unixoperatingsystemmxbean&quot;&gt;&lt;code&gt;UnixOperatingSystemMXBean&lt;/code&gt;&lt;/a&gt; interface depending on its underlying operating system.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0d757ff4a6ac675a5b4871ec062085d8cdb8da98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PKIXReason&lt;/code&gt; enumerates the potential PKIX-specific reasons that an X.509 certification path may be invalid according to the PKIX (RFC 3280) standard.</source>
          <target state="translated">&lt;code&gt;PKIXReason&lt;/code&gt; は、 X.509証明書パスは、PKIX（RFC 3280）標準に従って無効であることを潜在的PKIX固有の理由を列挙する。</target>
        </trans-unit>
        <trans-unit id="42733b5171c383bf12f9d4a04e020e12857e5e60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PKIXReason&lt;/code&gt; enumerates the potential PKIX-specific reasons that an X.509 certification path may be invalid according to the PKIX (RFC 3280) standard. These reasons are in addition to those of the &lt;code&gt;CertPathValidatorException.BasicReason&lt;/code&gt; enumeration.</source>
          <target state="translated">&lt;code&gt;PKIXReason&lt;/code&gt; は、 X.509証明書パスは、PKIX（RFC 3280）標準に従って無効であることを潜在的PKIX固有の理由を列挙する。これらの理由は、 &lt;code&gt;CertPathValidatorException.BasicReason&lt;/code&gt; 列挙の理由に追加されます。</target>
        </trans-unit>
        <trans-unit id="f124acf83d481115e57686fb8856022de3bb5ad5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PKIXReason&lt;/code&gt; enumerates the potential PKIX-specific reasons that an X.509 certification path may be invalid according to the PKIX (RFC 5280) standard.</source>
          <target state="translated">&lt;code&gt;PKIXReason&lt;/code&gt; は、 X.509証明書パスは、PKIX（RFC 5280）標準に従って無効であることを潜在的PKIX固有の理由を列挙する。</target>
        </trans-unit>
        <trans-unit id="b371276a9e0ecfdae4ef1d34db216930ee628001" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PKIXReason&lt;/code&gt; enumerates the potential PKIX-specific reasons that an X.509 certification path may be invalid according to the PKIX (RFC 5280) standard. These reasons are in addition to those of the &lt;code&gt;CertPathValidatorException.BasicReason&lt;/code&gt; enumeration.</source>
          <target state="translated">&lt;code&gt;PKIXReason&lt;/code&gt; は、 X.509証明書パスは、PKIX（RFC 5280）標準に従って無効であることを潜在的PKIX固有の理由を列挙する。これらの理由は、 &lt;code&gt;CertPathValidatorException.BasicReason&lt;/code&gt; 列挙の理由に追加されます。</target>
        </trans-unit>
        <trans-unit id="b88e3cb7dd76f092b2f7b4a5b2cc4c9436fd4cea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Package&lt;/code&gt; corresponding to the given name, or &lt;code&gt;null&lt;/code&gt; if not found</source>
          <target state="translated">&lt;code&gt;Package&lt;/code&gt; 指定された名前、またはに対応する &lt;code&gt;null&lt;/code&gt; で見つからなかった場合</target>
        </trans-unit>
        <trans-unit id="8cea7f9c2881d4122c6fe3725e32d9d4186f7d6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Package&lt;/code&gt; of the given name defined by the caller's class loader or its ancestors, or &lt;code&gt;null&lt;/code&gt; if not found.</source>
          <target state="translated">呼び出し元のクラスローダーまたはその祖先によって定義された指定された名前の &lt;code&gt;Package&lt;/code&gt; 。見つからない場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5fd1cc3ac16334cb12b0c4423d000ccc75f52c4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Package&lt;/code&gt; of the given name that has been defined by this class loader or its ancestors, or &lt;code&gt;null&lt;/code&gt; if not found.</source>
          <target state="translated">このクラスローダーまたはその祖先によって定義された、指定された名前の &lt;code&gt;Package&lt;/code&gt; 。見つからない場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd5390441ce6ec14e6a3933f1af826ecd94b5b2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Package&lt;/code&gt; of the given name that has been defined by this class loader, or &lt;code&gt;null&lt;/code&gt; if not found</source>
          <target state="translated">このクラスローダーによって定義された指定された名前の &lt;code&gt;Package&lt;/code&gt; 、または見つからない場合は &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ab4f5e9594dd010a91bd8b2874b0a810ea17e89a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PackedColorModel&lt;/code&gt; class is an abstract &lt;a href=&quot;colormodel&quot;&gt;&lt;code&gt;ColorModel&lt;/code&gt;&lt;/a&gt; class that works with pixel values which represent color and alpha information as separate samples and which pack all samples for a single pixel into a single int, short, or byte quantity.</source>
          <target state="translated">&lt;code&gt;PackedColorModel&lt;/code&gt; のクラスが抽象である&lt;a href=&quot;colormodel&quot;&gt; &lt;code&gt;ColorModel&lt;/code&gt; &lt;/a&gt;色と別のサンプルのようなアルファ情報を表す画素値を持つ作品が短い、単一のintに単一のピクセルのすべてのサンプルをパックすることクラス、またはバイト数。</target>
        </trans-unit>
        <trans-unit id="4bb1a00bbfc9f1dea7433acd9bcaca03b5f9b242" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PackedColorModel&lt;/code&gt; class is an abstract &lt;a href=&quot;colormodel&quot;&gt;&lt;code&gt;ColorModel&lt;/code&gt;&lt;/a&gt; class that works with pixel values which represent color and alpha information as separate samples and which pack all samples for a single pixel into a single int, short, or byte quantity. This class can be used with an arbitrary &lt;a href=&quot;../color/colorspace&quot;&gt;&lt;code&gt;ColorSpace&lt;/code&gt;&lt;/a&gt;. The number of color samples in the pixel values must be the same as the number of color components in the &lt;code&gt;ColorSpace&lt;/code&gt;. There can be a single alpha sample. The array length is always 1 for those methods that use a primitive array pixel representation of type &lt;code&gt;transferType&lt;/code&gt;. The transfer types supported are DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, and DataBuffer.TYPE_INT. Color and alpha samples are stored in the single element of the array in bits indicated by bit masks. Each bit mask must be contiguous and masks must not overlap. The same masks apply to the single int pixel representation used by other methods. The correspondence of masks and color/alpha samples is as follows:</source>
          <target state="translated">&lt;code&gt;PackedColorModel&lt;/code&gt; のクラスが抽象である&lt;a href=&quot;colormodel&quot;&gt; &lt;code&gt;ColorModel&lt;/code&gt; &lt;/a&gt;色と別のサンプルのようなアルファ情報を表す画素値を持つ作品が短い、単一のintに単一のピクセルのすべてのサンプルをパックすることクラス、またはバイト数。このクラスは、任意の&lt;a href=&quot;../color/colorspace&quot;&gt; &lt;code&gt;ColorSpace&lt;/code&gt; で&lt;/a&gt;使用できます。ピクセル値のカラーサンプルの数は、 &lt;code&gt;ColorSpace&lt;/code&gt; のカラーコンポーネントの数と同じである必要があります。単一のアルファサンプルが存在する可能性があります。 &lt;code&gt;transferType&lt;/code&gt; 型のプリミティブ配列ピクセル表現を使用するメソッドの配列長は常に1です。。サポートされている転送タイプは、DataBuffer.TYPE_BYTE、DataBuffer.TYPE_USHORT、およびDataBuffer.TYPE_INTです。カラーサンプルとアルファサンプルは、ビットマスクで示されるビット単位で配列の単一要素に格納されます。各ビットマスクは連続している必要があり、マスクはオーバーラップしてはなりません。同じマスクが、他の方法で使用される単一のintピクセル表現に適用されます。マスクとカラー/アルファサンプルの対応は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f4da8a295ef7ca55a2a21f98350ad99faeb3408c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PageFormat&lt;/code&gt; class describes the size and orientation of a page to be printed.</source>
          <target state="translated">&lt;code&gt;PageFormat&lt;/code&gt; クラスは、印刷されるページのサイズと向きを説明しています。</target>
        </trans-unit>
        <trans-unit id="3fc0c1151979adab271a2d4c8566c09fd4940b98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Pageable&lt;/code&gt; implementation represents a set of pages to be printed.</source>
          <target state="translated">&lt;code&gt;Pageable&lt;/code&gt; 実装では、印刷するページのセットを表します。</target>
        </trans-unit>
        <trans-unit id="798364ebe516c1f54256e5ef56a58c4cd49a63b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Pageable&lt;/code&gt; implementation represents a set of pages to be printed. The &lt;code&gt;Pageable&lt;/code&gt; object returns the total number of pages in the set as well as the &lt;a href=&quot;pageformat&quot;&gt;&lt;code&gt;PageFormat&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;printable&quot;&gt;&lt;code&gt;Printable&lt;/code&gt;&lt;/a&gt; for a specified page.</source>
          <target state="translated">&lt;code&gt;Pageable&lt;/code&gt; 実装では、印刷するページのセットを表します。 &lt;code&gt;Pageable&lt;/code&gt; オブジェクトは、セット内のページ数の合計だけでなく、返し&lt;a href=&quot;pageformat&quot;&gt; &lt;code&gt;PageFormat&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;printable&quot;&gt; &lt;code&gt;Printable&lt;/code&gt; &lt;/a&gt;指定されたページのために。</target>
        </trans-unit>
        <trans-unit id="51cf376b48f9b133d54960ed20a5a73b0da03e28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PaintContext&lt;/code&gt; interface defines the encapsulated and optimized environment to generate color patterns in device space for fill or stroke operations on a &lt;a href=&quot;graphics2d&quot;&gt;&lt;code&gt;Graphics2D&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;PaintContext&lt;/code&gt; に塗りまたはストローク操作のためのデバイス空間でカラーパターンを生成するためのインタフェースを定義カプセル化され、最適化された環境&lt;a href=&quot;graphics2d&quot;&gt; &lt;code&gt;Graphics2D&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6ff20bc3121fcd0d6a6a114604f6c04390ebf621" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PaintContext&lt;/code&gt; interface defines the encapsulated and optimized environment to generate color patterns in device space for fill or stroke operations on a &lt;a href=&quot;graphics2d&quot;&gt;&lt;code&gt;Graphics2D&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;PaintContext&lt;/code&gt; provides the necessary colors for &lt;code&gt;Graphics2D&lt;/code&gt; operations in the form of a &lt;a href=&quot;image/raster&quot;&gt;&lt;code&gt;Raster&lt;/code&gt;&lt;/a&gt; associated with a &lt;a href=&quot;image/colormodel&quot;&gt;&lt;code&gt;ColorModel&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;PaintContext&lt;/code&gt; maintains state for a particular paint operation. In a multi-threaded environment, several contexts can exist simultaneously for a single &lt;a href=&quot;paint&quot;&gt;&lt;code&gt;Paint&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">&lt;code&gt;PaintContext&lt;/code&gt; に塗りまたはストローク操作のためのデバイス空間でカラーパターンを生成するためのインタフェースを定義カプセル化され、最適化された環境&lt;a href=&quot;graphics2d&quot;&gt; &lt;code&gt;Graphics2D&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;PaintContext&lt;/code&gt; するために必要な色を提供する &lt;code&gt;Graphics2D&lt;/code&gt; の形態の動作を&lt;a href=&quot;image/raster&quot;&gt; &lt;code&gt;Raster&lt;/code&gt; &lt;/a&gt;に関連付けられた&lt;a href=&quot;image/colormodel&quot;&gt; &lt;code&gt;ColorModel&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;PaintContext&lt;/code&gt; 特定のペイント操作の状態を維持しています。マルチスレッド環境では、単一の&lt;a href=&quot;paint&quot;&gt; &lt;code&gt;Paint&lt;/code&gt; &lt;/a&gt;オブジェクトに対して複数のコンテキストが同時に存在する可能性があります。</target>
        </trans-unit>
        <trans-unit id="6da600e11920a8b9946bd8cf3002f1b4c14a63cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Paper&lt;/code&gt; class describes the physical characteristics of a piece of paper.</source>
          <target state="translated">&lt;code&gt;Paper&lt;/code&gt; クラスは、用紙の物理的な特性について説明します。</target>
        </trans-unit>
        <trans-unit id="8e9f00d5d237f36cec15e4bb73bc5ff0ff6caccd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Path2D&lt;/code&gt; class provides a simple, yet flexible shape which represents an arbitrary geometric path.</source>
          <target state="translated">&lt;code&gt;Path2D&lt;/code&gt; のクラスは、単純な、任意の幾何学的経路を表し、まだ柔軟な形状を提供します。</target>
        </trans-unit>
        <trans-unit id="7bb4be9fd3e9cc76024c763ef9710898d308c15f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Path2D&lt;/code&gt; class provides a simple, yet flexible shape which represents an arbitrary geometric path. It can fully represent any path which can be iterated by the &lt;a href=&quot;pathiterator&quot;&gt;&lt;code&gt;PathIterator&lt;/code&gt;&lt;/a&gt; interface including all of its segment types and winding rules and it implements all of the basic hit testing methods of the &lt;a href=&quot;../shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">&lt;code&gt;Path2D&lt;/code&gt; のクラスは、単純な、任意の幾何学的経路を表し、まだ柔軟な形状を提供します。これは、すべてのセグメントタイプとワインディングルールを含む&lt;a href=&quot;pathiterator&quot;&gt; &lt;code&gt;PathIterator&lt;/code&gt; &lt;/a&gt;インターフェイスで反復できるすべてのパスを完全に表すことができ、&lt;a href=&quot;../shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt;インターフェイスのすべての基本的なヒットテストメソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="918982e89f589b2e61abc622e3fc1c886b57d8c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Path&lt;/code&gt; is obtained by invoking the &lt;a href=&quot;filesystem#getPath(java.lang.String,java.lang.String...)&quot;&gt;&lt;code&gt;getPath&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;filesystems#getDefault()&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;filesystem&quot;&gt;&lt;code&gt;FileSystem&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; 呼び出すことによって得られる&lt;a href=&quot;filesystem#getPath(java.lang.String,java.lang.String...)&quot;&gt; &lt;code&gt;getPath&lt;/code&gt; &lt;/a&gt;のメソッド&lt;a href=&quot;filesystems#getDefault()&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;filesystem&quot;&gt; &lt;code&gt;FileSystem&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="90672781ed476b480c2d01bbaf4b2e5adafc4b2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Path&lt;/code&gt; is obtained by invoking the &lt;a href=&quot;filesystem#getPath-java.lang.String-java.lang.String...-&quot;&gt;&lt;code&gt;getPath&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;filesystems#getDefault--&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;&lt;a href=&quot;filesystem&quot;&gt;&lt;code&gt;FileSystem&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; 呼び出すことによって得られる&lt;a href=&quot;filesystem#getPath-java.lang.String-java.lang.String...-&quot;&gt; &lt;code&gt;getPath&lt;/code&gt; &lt;/a&gt;のメソッド&lt;a href=&quot;filesystems#getDefault--&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;filesystem&quot;&gt; &lt;code&gt;FileSystem&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c6a2d68919a75d0efae8c0507ff2d08e73f33e85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PathIterator&lt;/code&gt; interface provides the mechanism for objects that implement the &lt;a href=&quot;../shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; interface to return the geometry of their boundary by allowing a caller to retrieve the path of that boundary a segment at a time.</source>
          <target state="translated">&lt;code&gt;PathIterator&lt;/code&gt; インタフェースは、実装するオブジェクトのための機構を提供する&lt;a href=&quot;../shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt;発信者が一度にその境界Aセグメントのパスを取得することを可能にすることによって、その境界のジオメトリを返すインタフェースを。</target>
        </trans-unit>
        <trans-unit id="c4cb1555c85d26e99433230af73509a9363c4989" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PathIterator&lt;/code&gt; interface provides the mechanism for objects that implement the &lt;a href=&quot;../shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; interface to return the geometry of their boundary by allowing a caller to retrieve the path of that boundary a segment at a time. This interface allows these objects to retrieve the path of their boundary a segment at a time by using 1st through 3rd order B&amp;eacute;zier curves, which are lines and quadratic or cubic B&amp;eacute;zier splines.</source>
          <target state="translated">&lt;code&gt;PathIterator&lt;/code&gt; インタフェースは、実装するオブジェクトのための機構を提供する&lt;a href=&quot;../shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt;発信者が一度にその境界Aセグメントのパスを取得することを可能にすることによって、その境界のジオメトリを返すインタフェースを。このインターフェイスを使用すると、これらのオブジェクトは、線分および2次または3次ベジエスプラインである1次から3次のベジエ曲線を使用して、一度に1セグメントずつ境界のパスを取得できます。</target>
        </trans-unit>
        <trans-unit id="5c79b8bbdbc6232b5734fc46d1a5e28d6bbf32c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Pattern&lt;/code&gt; engine performs traditional NFA-based matching with ordered alternation as occurs in Perl 5.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; はPerl 5で発生するように、エンジンは、規則交替伝統的なNFAベースのマッチングを行います。</target>
        </trans-unit>
        <trans-unit id="92995c19fa227cf2ab96897ff5eedb351ff466d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Permission&lt;/code&gt; class for link creation operations.</source>
          <target state="translated">リンク作成操作の &lt;code&gt;Permission&lt;/code&gt; クラス。</target>
        </trans-unit>
        <trans-unit id="41e0cea64632e3ca5603c6f64f2ba33a33ea2503" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; object is also registered with the platform &lt;a href=&quot;managementfactory#getPlatformMBeanServer()&quot;&gt;MBeanServer&lt;/a&gt;. The &lt;a href=&quot;../../../javax/management/objectname&quot;&gt;&lt;code&gt;ObjectName&lt;/code&gt;&lt;/a&gt; for uniquely identifying the &lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; オブジェクトは、プラットフォームに登録されている&lt;a href=&quot;managementfactory#getPlatformMBeanServer()&quot;&gt;のMBeanServer&lt;/a&gt;。MBeanServer内で &lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; を一意に識別するための&lt;a href=&quot;../../../javax/management/objectname&quot;&gt; &lt;code&gt;ObjectName&lt;/code&gt; &lt;/a&gt;は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b15cfab53ee2a0eadd7dc3e89c6e3054abf67006" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; object is also registered with the platform &lt;a href=&quot;managementfactory#getPlatformMBeanServer--&quot;&gt;MBeanServer&lt;/a&gt;. The &lt;a href=&quot;../../../javax/management/objectname&quot;&gt;&lt;code&gt;ObjectName&lt;/code&gt;&lt;/a&gt; for uniquely identifying the &lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; within an MBeanServer is:</source>
          <target state="translated">&lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; オブジェクトは、プラットフォームに登録されている&lt;a href=&quot;managementfactory#getPlatformMBeanServer--&quot;&gt;のMBeanServer&lt;/a&gt;。MBeanServer内で &lt;code&gt;PlatformLoggingMXBean&lt;/code&gt; を一意に識別するための&lt;a href=&quot;../../../javax/management/objectname&quot;&gt; &lt;code&gt;ObjectName&lt;/code&gt; &lt;/a&gt;は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0255ebf80bbcc8c5a2f44e9f14adb8567abeb8d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Point2D&lt;/code&gt; class defines a point representing a location in &lt;code&gt;(x,y)&lt;/code&gt; coordinate space.</source>
          <target state="translated">&lt;code&gt;Point2D&lt;/code&gt; クラスは、内の位置を表す点定義 &lt;code&gt;(x,y)&lt;/code&gt; 座標空間。</target>
        </trans-unit>
        <trans-unit id="51fd15fd08c40e64c9f0a62e14caca8103322dfd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Point2D&lt;/code&gt; in the destination image that corresponds to the specified point in the source image.</source>
          <target state="translated">ソース画像の指定されたポイントに対応する宛先画像の &lt;code&gt;Point2D&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e9db41020f8cfc583464f3b688783deb80a1748a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Point2D&lt;/code&gt; in the destination that corresponds to the specified point in the source.</source>
          <target state="translated">ソース内の指定されたポイントに対応する宛先の &lt;code&gt;Point2D&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="176ebc50958434620dc6e1fc7aedbf4aa4c19395" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Policy&lt;/code&gt; object consults the local policy and returns and appropriate &lt;code&gt;Permissions&lt;/code&gt; object with the Permissions granted to the Principals associated with the provided</source>
          <target state="translated">&lt;code&gt;Policy&lt;/code&gt; オブジェクトは、ローカルポリシーを参照し、リターンし、適切な &lt;code&gt;Permissions&lt;/code&gt; 設けに関連付けられたPrincipalに付与された権限を持つオブジェクト</target>
        </trans-unit>
        <trans-unit id="bc0f88823ab6ae735668139d74c93498b75f7a38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Polygon&lt;/code&gt; class encapsulates a description of a closed, two-dimensional region within a coordinate space.</source>
          <target state="translated">&lt;code&gt;Polygon&lt;/code&gt; クラスは、座標空間内の閉じた2次元領域の記述をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="d773293caf0f8c7512617d0ff6853b4e434dbc33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Polygon&lt;/code&gt; class encapsulates a description of a closed, two-dimensional region within a coordinate space. This region is bounded by an arbitrary number of line segments, each of which is one side of the polygon. Internally, a polygon comprises of a list of &lt;code&gt;(x,y)&lt;/code&gt; coordinate pairs, where each pair defines a</source>
          <target state="translated">&lt;code&gt;Polygon&lt;/code&gt; クラスは、座標空間内の閉じた2次元領域の記述をカプセル化します。この領域は、それぞれがポリゴンの片側にある任意の数の線分で囲まれています。内部的には、ポリゴンは &lt;code&gt;(x,y)&lt;/code&gt; 座標ペアのリストで構成され、各ペアは</target>
        </trans-unit>
        <trans-unit id="8f660c48a5927de5d279d0b4033c4ae98a5108f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Port.Info&lt;/code&gt; class extends &lt;code&gt;&lt;a href=&quot;line.info&quot;&gt;&lt;code&gt;Line.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; with additional information specific to ports, including the port's name and whether it is a source or a target for its mixer.</source>
          <target state="translated">&lt;code&gt;Port.Info&lt;/code&gt; のクラスを拡張し &lt;code&gt;&lt;a href=&quot;line.info&quot;&gt;&lt;code&gt;Line.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; のポート名を含むポートに付加情報特定と、それはソースまたはそのミキサーの標的であるかどうか。</target>
        </trans-unit>
        <trans-unit id="e65eb7e482423171ada7c491ef4eeceb1029407b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Port.Info&lt;/code&gt; class extends &lt;code&gt;&lt;a href=&quot;line.info&quot;&gt;&lt;code&gt;Line.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; with additional information specific to ports, including the port's name and whether it is a source or a target for its mixer. By definition, a port acts as either a source or a target to its mixer, but not both. (Audio input ports are sources; audio output ports are targets.)</source>
          <target state="translated">&lt;code&gt;Port.Info&lt;/code&gt; のクラスを拡張し &lt;code&gt;&lt;a href=&quot;line.info&quot;&gt;&lt;code&gt;Line.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; のポート名を含むポートに付加情報特定と、それはソースまたはそのミキサーの標的であるかどうか。定義により、ポートはミキサーのソースまたはターゲットのいずれかとして機能しますが、両方としては機能しません。（オーディオ入力ポートはソース、オーディオ出力ポートはターゲットです。）</target>
        </trans-unit>
        <trans-unit id="5514700d1e658c5e68c6a9044f1218f55b233edd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Port.Info&lt;/code&gt; class extends &lt;code&gt;Line.Info&lt;/code&gt; with additional information specific to ports, including the port's name and whether it is a source or a target for its mixer.</source>
          <target state="translated">&lt;code&gt;Port.Info&lt;/code&gt; のクラスを拡張し &lt;code&gt;Line.Info&lt;/code&gt; のポート名を含むポートに付加情報特定と、それはソースまたはそのミキサーの標的であるかどうか。</target>
        </trans-unit>
        <trans-unit id="2b7466b90e627fdcb19a669e4837c462e6d9a2de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Port.Info&lt;/code&gt; class extends &lt;code&gt;Line.Info&lt;/code&gt; with additional information specific to ports, including the port's name and whether it is a source or a target for its mixer. By definition, a port acts as either a source or a target to its mixer, but not both. (Audio input ports are sources; audio output ports are targets.)</source>
          <target state="translated">&lt;code&gt;Port.Info&lt;/code&gt; のクラスを拡張し &lt;code&gt;Line.Info&lt;/code&gt; のポート名を含むポートに付加情報特定と、それはソースまたはそのミキサーの標的であるかどうか。定義上、ポートはミキサーのソースまたはターゲットとして機能しますが、両方としては機能しません。 （オーディオ入力ポートはソース、オーディオ出力ポートはターゲットです。）</target>
        </trans-unit>
        <trans-unit id="5ae842ea749d43311b4ec5700e9104dcbbe1e761" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Predicate&lt;/code&gt; interface is a standard interface that applications can implement to define the filter they wish to apply to a a &lt;code&gt;FilteredRowSet&lt;/code&gt; object. A &lt;code&gt;FilteredRowSet&lt;/code&gt; object consumes implementations of this interface and enforces the constraints defined in the implementation of the method &lt;code&gt;evaluate&lt;/code&gt;. A &lt;code&gt;FilteredRowSet&lt;/code&gt; object enforces the filter constraints in a bi-directional manner: It outputs only rows that are within the constraints of the filter; and conversely, it inserts, modifies, or updates only rows that are within the constraints of the filter.</source>
          <target state="translated">&lt;code&gt;Predicate&lt;/code&gt; インタフェースは、アプリケーションが、彼らがAAに適用するフィルタを定義するために実装できるという標準インタフェースである &lt;code&gt;FilteredRowSet&lt;/code&gt; オブジェクトを。A &lt;code&gt;FilteredRowSet&lt;/code&gt; オブジェクトは、このインタフェースの実装を消費し、メソッドの実装で定義された制約を適用し &lt;code&gt;evaluate&lt;/code&gt; 。 &lt;code&gt;FilteredRowSet&lt;/code&gt; オブジェクトは、双方向様式でフィルタ制約を強制する：これは、フィルタの制約の範囲内である行のみを出力します。逆に、フィルターの制約内にある行のみを挿入、変更、または更新します。</target>
        </trans-unit>
        <trans-unit id="4c187a2ae24f6fe10978b472c34cc326cf74b873" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PreferencesFactory&lt;/code&gt; implementation is located as follows:</source>
          <target state="translated">&lt;code&gt;PreferencesFactory&lt;/code&gt; 次のように実装があります。</target>
        </trans-unit>
        <trans-unit id="b8bf7442319d0465fd61692705002688a0ac045b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PreparedStatement&lt;/code&gt; that is being closed or is invalid</source>
          <target state="translated">&lt;code&gt;PreparedStatement&lt;/code&gt; のクローズまたは無効ですされています</target>
        </trans-unit>
        <trans-unit id="8ae1e13889514879c41f4b82a2786cc0c9953e18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Printable&lt;/code&gt; can be requested in one of two printing modes. In both modes, it spreads table rows naturally in sequence across multiple pages, fitting as many rows as possible per page. &lt;code&gt;PrintMode.NORMAL&lt;/code&gt; specifies that the table be printed at its current size. In this mode, there may be a need to spread columns across pages in a similar manner to that of the rows. When the need arises, columns are distributed in an order consistent with the table's &lt;code&gt;ComponentOrientation&lt;/code&gt;. &lt;code&gt;PrintMode.FIT_WIDTH&lt;/code&gt; specifies that the output be scaled smaller, if necessary, to fit the table's entire width (and thereby all columns) on each page. Width and height are scaled equally, maintaining the aspect ratio of the output.</source>
          <target state="translated">&lt;code&gt;Printable&lt;/code&gt; 2つの印刷モードのいずれかで要求することができます。どちらのモードでも、テーブルの行を複数のページに順番に自然に分散し、ページごとにできるだけ多くの行をフィッティングします。 &lt;code&gt;PrintMode.NORMAL&lt;/code&gt; は、テーブルが現在のサイズで印刷されることを指定します。このモードでは、行と同様の方法で列をページ全体に分散させる必要がある場合があります。必要に応じて、列はテーブルの &lt;code&gt;ComponentOrientation&lt;/code&gt; と一致する順序で分散されます。 &lt;code&gt;PrintMode.FIT_WIDTH&lt;/code&gt; は、必要に応じて、各ページのテーブルの幅全体（したがってすべての列）に合うように出力を小さくスケーリングすることを指定します。幅と高さは、出力のアスペクト比を維持しながら均等にスケーリングされます。</target>
        </trans-unit>
        <trans-unit id="d90b7c1279ee9905eabe7667575548c1be503720" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Printable&lt;/code&gt; constrains what it draws to the printable area of each page that it prints. Under certain circumstances, it may find it impossible to fit all of a page's content into that area. In these cases the output may be clipped, but the implementation makes an effort to do something reasonable. Here are a few situations where this is known to occur, and how they may be handled by this particular implementation:</source>
          <target state="translated">&lt;code&gt;Printable&lt;/code&gt; 制約それが印刷される各ページの印刷可能領域に描画するもの。特定の状況下では、ページのすべてのコンテンツをその領域に収めることができない場合があります。このような場合、出力はクリップされる可能性がありますが、実装は合理的なことを行うように努力します。これが発生することがわかっているいくつかの状況と、この特定の実装によってそれらがどのように処理されるかを次に示します。</target>
        </trans-unit>
        <trans-unit id="0e87b2cf55076570d0eef346208270663ceba3b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Printable&lt;/code&gt; heads the portion of table on each page with the appropriate section from the table's &lt;code&gt;JTableHeader&lt;/code&gt;, if it has one.</source>
          <target state="translated">&lt;code&gt;Printable&lt;/code&gt; ヘッドテーブルのからの適切なセクションで、各ページ上の表の一部 &lt;code&gt;JTableHeader&lt;/code&gt; で、それはしている場合1。</target>
        </trans-unit>
        <trans-unit id="62eaa3a13cc3c735099760a21c4a9cf9313e1105" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Printable&lt;/code&gt; interface is implemented by the &lt;code&gt;print&lt;/code&gt; methods of the current page painter, which is called by the printing system to render a page.</source>
          <target state="translated">&lt;code&gt;Printable&lt;/code&gt; インタフェースが実装されていることにより、 &lt;code&gt;print&lt;/code&gt; ページを描画する印刷システムによって呼び出される、現在のページペインタの方法。</target>
        </trans-unit>
        <trans-unit id="e0f2e75e809287fcbcd5cb33c34ad66a05a8d318" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Printable&lt;/code&gt; interface is implemented by the &lt;code&gt;print&lt;/code&gt; methods of the current page painter, which is called by the printing system to render a page. When building a &lt;a href=&quot;pageable&quot;&gt;&lt;code&gt;Pageable&lt;/code&gt;&lt;/a&gt;, pairs of &lt;a href=&quot;pageformat&quot;&gt;&lt;code&gt;PageFormat&lt;/code&gt;&lt;/a&gt; instances and instances that implement this interface are used to describe each page. The instance implementing &lt;code&gt;Printable&lt;/code&gt; is called to print the page's graphics.</source>
          <target state="translated">&lt;code&gt;Printable&lt;/code&gt; インタフェースが実装されていることにより、 &lt;code&gt;print&lt;/code&gt; ページを描画する印刷システムによって呼び出される、現在のページペインタの方法。&lt;a href=&quot;pageable&quot;&gt; &lt;code&gt;Pageable&lt;/code&gt; を&lt;/a&gt;構築する場合、&lt;a href=&quot;pageformat&quot;&gt; &lt;code&gt;PageFormat&lt;/code&gt; &lt;/a&gt;インスタンスとこのインターフェイスを実装するインスタンスのペアを使用して、各ページを記述します。 &lt;code&gt;Printable&lt;/code&gt; を実装するインスタンスは、ページのグラフィックを印刷するために呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ac0d71a3c6e84bf3a7b4ac2010bf6cb3d7c2f903" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PrinterAbortException&lt;/code&gt; class is a subclass of &lt;a href=&quot;printerexception&quot;&gt;&lt;code&gt;PrinterException&lt;/code&gt;&lt;/a&gt; and is used to indicate that a user or application has terminated the print job while it was in the process of printing.</source>
          <target state="translated">&lt;code&gt;PrinterAbortException&lt;/code&gt; のクラスはサブクラスで&lt;a href=&quot;printerexception&quot;&gt; &lt;code&gt;PrinterException&lt;/code&gt; の&lt;/a&gt;と、印刷中であったユーザまたはアプリケーションが印刷ジョブを終了したことを示すために使用されます。</target>
        </trans-unit>
        <trans-unit id="8291fb13987bd51c6c24249e8d111d094c6d983f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PrinterException&lt;/code&gt; class and its subclasses are used to indicate that an exceptional condition has occurred in the print system.</source>
          <target state="translated">&lt;code&gt;PrinterException&lt;/code&gt; のクラスとそのサブクラスは、印刷システムで例外状況が発生したことを示すために使用されています。</target>
        </trans-unit>
        <trans-unit id="d0286b3bdfead09b3ddabeab90a87f6c2dbe0b87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PrinterGraphics&lt;/code&gt; interface is implemented by &lt;a href=&quot;../graphics&quot;&gt;&lt;code&gt;Graphics&lt;/code&gt;&lt;/a&gt; objects that are passed to &lt;a href=&quot;printable&quot;&gt;&lt;code&gt;Printable&lt;/code&gt;&lt;/a&gt; objects to render a page.</source>
          <target state="translated">&lt;code&gt;PrinterGraphics&lt;/code&gt; ものインターフェイスはによって実装されている&lt;a href=&quot;../graphics&quot;&gt; &lt;code&gt;Graphics&lt;/code&gt; &lt;/a&gt;に渡されたオブジェクト&lt;a href=&quot;printable&quot;&gt; &lt;code&gt;Printable&lt;/code&gt; &lt;/a&gt;ページをレンダリングするオブジェクト。</target>
        </trans-unit>
        <trans-unit id="7c7b23e4c9e1c4b2853d8d828e50835dc408b873" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PrinterGraphics&lt;/code&gt; interface is implemented by &lt;a href=&quot;../graphics&quot;&gt;&lt;code&gt;Graphics&lt;/code&gt;&lt;/a&gt; objects that are passed to &lt;a href=&quot;printable&quot;&gt;&lt;code&gt;Printable&lt;/code&gt;&lt;/a&gt; objects to render a page. It allows an application to find the &lt;a href=&quot;printerjob&quot;&gt;&lt;code&gt;PrinterJob&lt;/code&gt;&lt;/a&gt; object that is controlling the printing.</source>
          <target state="translated">&lt;code&gt;PrinterGraphics&lt;/code&gt; ものインターフェイスはによって実装されている&lt;a href=&quot;../graphics&quot;&gt; &lt;code&gt;Graphics&lt;/code&gt; &lt;/a&gt;に渡されたオブジェクト&lt;a href=&quot;printable&quot;&gt; &lt;code&gt;Printable&lt;/code&gt; &lt;/a&gt;ページをレンダリングするオブジェクト。これにより、アプリケーションは、印刷を制御している&lt;a href=&quot;printerjob&quot;&gt; &lt;code&gt;PrinterJob&lt;/code&gt; &lt;/a&gt;オブジェクトを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="8c6e62b7cd391131d02c652075e5ac3c0a89e401" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PrinterIOException&lt;/code&gt; class is a subclass of &lt;a href=&quot;printerexception&quot;&gt;&lt;code&gt;PrinterException&lt;/code&gt;&lt;/a&gt; and is used to indicate that an IO error of some sort has occurred while printing.</source>
          <target state="translated">&lt;code&gt;PrinterIOException&lt;/code&gt; のクラスはのサブクラスで&lt;a href=&quot;printerexception&quot;&gt; &lt;code&gt;PrinterException&lt;/code&gt; の&lt;/a&gt;と印刷中になんらかのIOエラーが発生したことを示すために使用されます。</target>
        </trans-unit>
        <trans-unit id="82eaac5fa28704ebde927e11ea586b3e320c6f37" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PrinterJob&lt;/code&gt; class is the principal class that controls printing.</source>
          <target state="translated">&lt;code&gt;PrinterJob&lt;/code&gt; をするクラスは、コントロールは、印刷することを主要なクラスです。</target>
        </trans-unit>
        <trans-unit id="4b4fd4b60af924b1ba0d3eed68d2cf8f47f320d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PrinterJob&lt;/code&gt; class is the principal class that controls printing. An application calls methods in this class to set up a job, optionally to invoke a print dialog with the user, and then to print the pages of the job.</source>
          <target state="translated">&lt;code&gt;PrinterJob&lt;/code&gt; をするクラスは、コントロールは、印刷することを主要なクラスです。アプリケーションは、このクラスのメソッドを呼び出してジョブを設定し、オプションでユーザーとの印刷ダイアログを呼び出してから、ジョブのページを印刷します。</target>
        </trans-unit>
        <trans-unit id="933ffd1a10f5aa2494d07bcb8dab5fb76775151d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ProcessHandle&lt;/code&gt; static factory methods return instances that are &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/doc-files/ValueBased.html&quot;&gt;value-based&lt;/a&gt;, immutable and thread-safe. Use of identity-sensitive operations (including reference equality (&lt;code&gt;==&lt;/code&gt;), identity hash code, or synchronization) on these instances of &lt;code&gt;ProcessHandle&lt;/code&gt; may have unpredictable results and should be avoided. Use &lt;a href=&quot;#equals(java.lang.Object)&quot;&gt;&lt;code&gt;equals&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#compareTo(java.lang.ProcessHandle)&quot;&gt;&lt;code&gt;compareTo&lt;/code&gt;&lt;/a&gt; methods to compare ProcessHandles.</source>
          <target state="translated">&lt;code&gt;ProcessHandle&lt;/code&gt; 静的ファクトリメソッドであるインスタンスを返す&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/doc-files/ValueBased.html&quot;&gt;値をベースに&lt;/a&gt;、不変で、スレッドセーフ。 &lt;code&gt;ProcessHandle&lt;/code&gt; のこれらのインスタンスでIDに依存する操作（参照の同等性（ &lt;code&gt;==&lt;/code&gt; ）、IDハッシュコード、または同期を含む）を使用すると、予測できない結果が生じる可能性があるため、回避する必要があります。使用して、&lt;a href=&quot;#equals(java.lang.Object)&quot;&gt; &lt;code&gt;equals&lt;/code&gt; &lt;/a&gt;か&lt;a href=&quot;#compareTo(java.lang.ProcessHandle)&quot;&gt; &lt;code&gt;compareTo&lt;/code&gt; &lt;/a&gt; ProcessHandlesを比較するための方法を。</target>
        </trans-unit>
        <trans-unit id="f34d0e406b35812c5e47d2d1968756eab5ecfb45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ProcessHandle&lt;/code&gt; static factory methods return instances that are &lt;a href=&quot;https://docs.oracle.com/en/java/javase/15/docs/api/java.base/java/lang/doc-files/ValueBased.html&quot;&gt;value-based&lt;/a&gt;, immutable and thread-safe. Use of identity-sensitive operations (including reference equality (&lt;code&gt;==&lt;/code&gt;), identity hash code, or synchronization) on these instances of &lt;code&gt;ProcessHandle&lt;/code&gt; may have unpredictable results and should be avoided. Use &lt;a href=&quot;#equals(java.lang.Object)&quot;&gt;&lt;code&gt;equals&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#compareTo(java.lang.ProcessHandle)&quot;&gt;&lt;code&gt;compareTo&lt;/code&gt;&lt;/a&gt; methods to compare ProcessHandles.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03f0e1b162793dcda086b30e64d17c70076f236a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ProcessingInstruction&lt;/code&gt; interface represents a &quot;processing instruction&quot;, used in XML as a way to keep processor-specific information in the text of the document.</source>
          <target state="translated">&lt;code&gt;ProcessingInstruction&lt;/code&gt; インタフェースは、ドキュメントのテキストでプロセッサ固有の情報を保持する方法としてXMLで使用される「処理命令」を表しています。</target>
        </trans-unit>
        <trans-unit id="b1486c259ae3502fc3a329a70fbfe8ae9f08b495" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Properties&lt;/code&gt; argument can be used to pass arbitrary string tag/value pairs as connection arguments. Normally at least &quot;user&quot; and &quot;password&quot; properties should be included in the &lt;code&gt;Properties&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Properties&lt;/code&gt; 引数は、接続引数として任意の文字列タグ/値のペアを渡すために使用することができます。通常、少なくとも「user」プロパティと「password」プロパティを &lt;code&gt;Properties&lt;/code&gt; オブジェクトに含める必要があります。</target>
        </trans-unit>
        <trans-unit id="75282c40a85213c64330ab76483127cc3ec01312" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Properties&lt;/code&gt; class does not inherit the concept of a load factor from its superclass, &lt;code&gt;Hashtable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Properties&lt;/code&gt; クラスは、そのスーパークラスから負荷率のコンセプトを継承しません &lt;code&gt;Hashtable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d166a34742a6c6490e21ca168d2e6d673987afa3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Properties&lt;/code&gt; class represents a persistent set of properties.</source>
          <target state="translated">&lt;code&gt;Properties&lt;/code&gt; クラスは、不変のプロパティセットを表します。</target>
        </trans-unit>
        <trans-unit id="d09951cf74285f372797f262ca2d5541dfdf337c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Properties&lt;/code&gt; class represents a persistent set of properties. The &lt;code&gt;Properties&lt;/code&gt; can be saved to a stream or loaded from a stream. Each key and its corresponding value in the property list is a string.</source>
          <target state="translated">&lt;code&gt;Properties&lt;/code&gt; クラスは、不変のプロパティセットを表します。 &lt;code&gt;Properties&lt;/code&gt; 、ストリームに保存したり、ストリームからロードすることができます。プロパティリストの各キーとそれに対応する値は文字列です。</target>
        </trans-unit>
        <trans-unit id="3b6c7ec85cd35e87cee3f3b62f08fa502097b985" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PropertyChangeListener&lt;/code&gt; must be from this context.</source>
          <target state="translated">&lt;code&gt;PropertyChangeListener&lt;/code&gt; は、この文脈からでなければなりません。</target>
        </trans-unit>
        <trans-unit id="41efb79d3a1eca9cb5d81533032efc9675bf375a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PropertyChangeSupport&lt;/code&gt; associated with this &lt;code&gt;BeanContextChildSupport&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PropertyChangeSupport&lt;/code&gt; これに関連した &lt;code&gt;BeanContextChildSupport&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eace280cd8fbc57f7f7b6a31cb7bd7742834ba47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;QuadCurve2D&lt;/code&gt; class defines a quadratic parametric curve segment in &lt;code&gt;(x,y)&lt;/code&gt; coordinate space.</source>
          <target state="translated">&lt;code&gt;QuadCurve2D&lt;/code&gt; のクラスは、で二次パラメトリック曲線セグメントを定義する &lt;code&gt;(x,y)&lt;/code&gt; 空間座標。</target>
        </trans-unit>
        <trans-unit id="61720eb2d433a3c828940b196eeb9541a74e0646" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Queue&lt;/code&gt; interface does not define the</source>
          <target state="translated">&lt;code&gt;Queue&lt;/code&gt; インターフェイスは定義されていません。</target>
        </trans-unit>
        <trans-unit id="9d8e0ebf2afd9596c7284145e4756478b2f14fdf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RGBColor&lt;/code&gt; interface is used to represent any RGB color value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab87a46c6287473d39629ee90b5886a43245d004" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RGBColor&lt;/code&gt; interface is used to represent any RGB color value. This interface reflects the values in the underlying style property. Hence, modifications made to the &lt;code&gt;CSSPrimitiveValue&lt;/code&gt; objects modify the style property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3c802a31a324ed954aac93983d5b047944141b7c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RIXMLProvider&lt;/code&gt; implementation uses the lowest level of synchronization and just writes &lt;code&gt;RowSet&lt;/code&gt; changes to the data source.</source>
          <target state="translated">&lt;code&gt;RIXMLProvider&lt;/code&gt; の実装では、同期の最低レベルを使用し、ちょうど書き込み &lt;code&gt;RowSet&lt;/code&gt; はデータソースに変更します。</target>
        </trans-unit>
        <trans-unit id="ac0fe76fb8dd0ed97837541e8c347d6bc8203ec2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RadialGradientPaint&lt;/code&gt; class provides a way to fill a shape with a circular radial color gradient pattern.</source>
          <target state="translated">&lt;code&gt;RadialGradientPaint&lt;/code&gt; のクラスには、円形状の放射色のグラデーションパターンで形状を充填する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="402bca490996bdd2abb2791c2ec477a47b69c5ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RadialGradientPaint&lt;/code&gt; class provides a way to fill a shape with a circular radial color gradient pattern. The user may specify 2 or more gradient colors, and this paint will provide an interpolation between each color.</source>
          <target state="translated">&lt;code&gt;RadialGradientPaint&lt;/code&gt; のクラスには、円形状の放射色のグラデーションパターンで形状を充填する方法を提供します。ユーザーは2つ以上のグラデーションカラーを指定でき、このペイントは各カラー間の補間を提供します。</target>
        </trans-unit>
        <trans-unit id="72a0a7aaeb78342dc06a7bdd5ddfc266a67e6825" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Range&lt;/code&gt; enum replaces the traditional bit mask-based values (e.g., &lt;a href=&quot;numericshaper#ARABIC&quot;&gt;&lt;code&gt;NumericShaper.ARABIC&lt;/code&gt;&lt;/a&gt;), and supports more Unicode ranges than the bit mask-based ones. For example, the following code using the bit mask:</source>
          <target state="translated">&lt;code&gt;Range&lt;/code&gt; 列挙型は、従来のビットマスクベースの値（例えば、置き換え&lt;a href=&quot;numericshaper#ARABIC&quot;&gt; &lt;code&gt;NumericShaper.ARABIC&lt;/code&gt; &lt;/a&gt; Unicodeは、ビットマスクベースのものより範囲より）、およびサポートを。たとえば、ビットマスクを使用する次のコード：</target>
        </trans-unit>
        <trans-unit id="0dd9840df06924282664fc3e67ddabe9defd6274" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Raster&lt;/code&gt; being referenced.</source>
          <target state="translated">&lt;code&gt;Raster&lt;/code&gt; 参照されて。</target>
        </trans-unit>
        <trans-unit id="1c6f82f0ae4c7c7b30125a9daf0c3db74dcf1b61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RasterFormatException&lt;/code&gt; is thrown if there is invalid layout information in the &lt;a href=&quot;raster&quot;&gt;&lt;code&gt;Raster&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;RasterFormatException&lt;/code&gt; はに無効なレイアウト情報がある場合にスローされ&lt;a href=&quot;raster&quot;&gt; &lt;code&gt;Raster&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a7d5ef2a80665b70e00f3dbb636dc72cbc088a21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reader&lt;/code&gt; methods that read from the file throw &lt;code&gt;
 IOException&lt;/code&gt; if a malformed or unmappable byte sequence is read.</source>
          <target state="translated">&lt;code&gt;Reader&lt;/code&gt; ファイルから読み込む方法がスロー &lt;code&gt; IOException&lt;/code&gt; が不正な形式またはマッピングできないバイトシーケンスが読まれている場合。</target>
        </trans-unit>
        <trans-unit id="79a2cd06471b623d73bdbbd167ab48aee2097b40" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reader&lt;/code&gt; methods that read from the file throw &lt;code&gt;IOException&lt;/code&gt; if a malformed or unmappable byte sequence is read.</source>
          <target state="translated">&lt;code&gt;Reader&lt;/code&gt; ファイルから読み込む方法がスロー &lt;code&gt;IOException&lt;/code&gt; が不正な形式またはマッピングできないバイトシーケンスが読まれている場合。</target>
        </trans-unit>
        <trans-unit id="180637fe735f25114352ee626b0787d96e82163f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reader&lt;/code&gt; object that will be returned by the method &lt;code&gt;getCharacterStream&lt;/code&gt;, which is specified in the &lt;code&gt;ResultSet&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;Reader&lt;/code&gt; メソッドによって返されるオブジェクト &lt;code&gt;getCharacterStream&lt;/code&gt; で指定され &lt;code&gt;ResultSet&lt;/code&gt; インタフェース。</target>
        </trans-unit>
        <trans-unit id="99baa6f6ac31a6957c69fb473938422fc78f374d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reader&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Reader&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed94dab085ac4d412b73c8fd6b794e9b312fa6f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Rect&lt;/code&gt; interface is used to represent any rect value.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="995ce92c960435de8837694f0f78bec5fafefa46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Rect&lt;/code&gt; interface is used to represent any rect value. This interface reflects the values in the underlying style property. Hence, modifications made to the &lt;code&gt;CSSPrimitiveValue&lt;/code&gt; objects modify the style property.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="63e032b900d34c7d460141383d0bab5c3879e7f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Rectangle2D&lt;/code&gt; class describes a rectangle defined by a location &lt;code&gt;(x,y)&lt;/code&gt; and dimension &lt;code&gt;(w x h)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Rectangle2D&lt;/code&gt; クラスは、位置によって定義される矩形説明 &lt;code&gt;(x,y)&lt;/code&gt; 及び寸法 &lt;code&gt;(w x h)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="48e440d18cbeb470c2e070567bac333946a54aba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Rectangle2D&lt;/code&gt; representing the destination image's bounding box.</source>
          <target state="translated">&lt;code&gt;Rectangle2D&lt;/code&gt; は、デスティネーションイメージのバウンディングボックスを表します。</target>
        </trans-unit>
        <trans-unit id="62ccf8df2768408a1c1674844bb46ef5f53b7825" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Rectangle2D&lt;/code&gt; representing the destination's bounding box.</source>
          <target state="translated">&lt;code&gt;Rectangle2D&lt;/code&gt; は、先のバウンディングボックスを表します。</target>
        </trans-unit>
        <trans-unit id="b09d8d74cfacaa1243813daf514eb38609152c3c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Registry&lt;/code&gt; instance is exported as if the static &lt;a href=&quot;../server/unicastremoteobject#exportObject(java.rmi.Remote,int)&quot;&gt;&lt;code&gt;UnicastRemoteObject.exportObject&lt;/code&gt;&lt;/a&gt; method is invoked, passing the &lt;code&gt;Registry&lt;/code&gt; instance and the specified &lt;code&gt;port&lt;/code&gt; as arguments, except that the &lt;code&gt;Registry&lt;/code&gt; instance is exported with a well-known object identifier, an &lt;a href=&quot;../server/objid&quot;&gt;&lt;code&gt;ObjID&lt;/code&gt;&lt;/a&gt; instance constructed with the value &lt;a href=&quot;../server/objid#REGISTRY_ID&quot;&gt;&lt;code&gt;ObjID.REGISTRY_ID&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Registry&lt;/code&gt; インスタンスは、静的な場合としてエクスポートさ&lt;a href=&quot;../server/unicastremoteobject#exportObject(java.rmi.Remote,int)&quot;&gt; &lt;code&gt;UnicastRemoteObject.exportObject&lt;/code&gt; の&lt;/a&gt;方法パッシング、呼び出された &lt;code&gt;Registry&lt;/code&gt; インスタンスと指定された &lt;code&gt;port&lt;/code&gt; ことを除いて、引数としての &lt;code&gt;Registry&lt;/code&gt; インスタンスはよく知られているオブジェクト識別子と、エクスポートされた&lt;a href=&quot;../server/objid&quot;&gt; &lt;code&gt;ObjID&lt;/code&gt; &lt;/a&gt;値で構成インスタンス&lt;a href=&quot;../server/objid#REGISTRY_ID&quot;&gt; &lt;code&gt;ObjID.REGISTRY_ID&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7544022a4002643648e99cb248dc3e1edf70eac7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Registry&lt;/code&gt; instance is exported as if the static &lt;a href=&quot;../server/unicastremoteobject#exportObject(java.rmi.Remote,int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)&quot;&gt;&lt;code&gt;UnicastRemoteObject.exportObject&lt;/code&gt;&lt;/a&gt; method is invoked, passing the &lt;code&gt;Registry&lt;/code&gt; instance, the specified &lt;code&gt;port&lt;/code&gt;, the specified &lt;code&gt;RMIClientSocketFactory&lt;/code&gt;, and the specified &lt;code&gt;RMIServerSocketFactory&lt;/code&gt; as arguments, except that the &lt;code&gt;Registry&lt;/code&gt; instance is exported with a well-known object identifier, an &lt;a href=&quot;../server/objid&quot;&gt;&lt;code&gt;ObjID&lt;/code&gt;&lt;/a&gt; instance constructed with the value &lt;a href=&quot;../server/objid#REGISTRY_ID&quot;&gt;&lt;code&gt;ObjID.REGISTRY_ID&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Registry&lt;/code&gt; インスタンスは、静的な場合としてエクスポートさ&lt;a href=&quot;../server/unicastremoteobject#exportObject(java.rmi.Remote,int,java.rmi.server.RMIClientSocketFactory,java.rmi.server.RMIServerSocketFactory)&quot;&gt; &lt;code&gt;UnicastRemoteObject.exportObject&lt;/code&gt; を&lt;/a&gt;通過し、メソッドが呼び出され &lt;code&gt;Registry&lt;/code&gt; インスタンスを、指定された &lt;code&gt;port&lt;/code&gt; 、指定された &lt;code&gt;RMIClientSocketFactory&lt;/code&gt; の、および指定された &lt;code&gt;RMIServerSocketFactory&lt;/code&gt; のことを除いて、引数として、 &lt;code&gt;Registry&lt;/code&gt; インスタンスはよく知られているオブジェクト識別子とエクスポートされ、値&lt;a href=&quot;../server/objid#REGISTRY_ID&quot;&gt; &lt;code&gt;ObjID.REGISTRY_ID&lt;/code&gt; で&lt;/a&gt;構築された&lt;a href=&quot;../server/objid&quot;&gt; &lt;code&gt;ObjID&lt;/code&gt; &lt;/a&gt;インスタンス。</target>
        </trans-unit>
        <trans-unit id="a77e9ae2b2107d577c6cecf3ac83834ef29056d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Remote&lt;/code&gt; interface serves to identify interfaces whose methods may be invoked from a non-local virtual machine.</source>
          <target state="translated">&lt;code&gt;Remote&lt;/code&gt; インタフェースは、メソッドをローカルではない仮想マシンから呼び出すことができるインタフェースを識別するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="79dd4ebe7717e3ca739dd65783e3b0cd2d2ad2b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Remote&lt;/code&gt; interface serves to identify interfaces whose methods may be invoked from a non-local virtual machine. Any object that is a remote object must directly or indirectly implement this interface. Only those methods specified in a &quot;remote interface&quot;, an interface that extends &lt;code&gt;java.rmi.Remote&lt;/code&gt; are available remotely.</source>
          <target state="translated">&lt;code&gt;Remote&lt;/code&gt; インタフェースは、メソッドをローカルではない仮想マシンから呼び出すことができるインタフェースを識別するのに役立ちます。リモートオブジェクトであるオブジェクトは、直接または間接的にこのインターフェイスを実装する必要があります。リモートで使用できるのは、 &lt;code&gt;java.rmi.Remote&lt;/code&gt; を拡張するインターフェースである「リモートインターフェース」で指定されたメソッドのみです。</target>
        </trans-unit>
        <trans-unit id="9e1abc4fd1fdb1df6457b5ff98ccc8aecec8c9b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RemoteObject&lt;/code&gt; class implements the &lt;code&gt;java.lang.Object&lt;/code&gt; behavior for remote objects.</source>
          <target state="translated">&lt;code&gt;RemoteObject&lt;/code&gt; のクラスが実装 &lt;code&gt;java.lang.Object&lt;/code&gt; リモートオブジェクトの振る舞いを。</target>
        </trans-unit>
        <trans-unit id="a0d6869267dfac5f76fcc33b3143f3ae5d0a24f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RemoteObject&lt;/code&gt; class implements the &lt;code&gt;java.lang.Object&lt;/code&gt; behavior for remote objects. &lt;code&gt;RemoteObject&lt;/code&gt; provides the remote semantics of Object by implementing methods for hashCode, equals, and toString.</source>
          <target state="translated">&lt;code&gt;RemoteObject&lt;/code&gt; のクラスが実装 &lt;code&gt;java.lang.Object&lt;/code&gt; リモートオブジェクトの振る舞いを。 &lt;code&gt;RemoteObject&lt;/code&gt; は、hashCode、equals、およびtoStringのメソッドを実装することにより、Objectのリモートセマンティクスを提供します。</target>
        </trans-unit>
        <trans-unit id="b05077cbaa2115faf813b944cba45ca60c9c6de1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RemoteServer&lt;/code&gt; class is the common superclass to server implementations and provides the framework to support a wide range of remote reference semantics.</source>
          <target state="translated">&lt;code&gt;RemoteServer&lt;/code&gt; クラスは、サーバの実装に対する共通のスーパークラスであり、広範囲のリモート参照セマンティクスをサポートするフレームワークを提供します。</target>
        </trans-unit>
        <trans-unit id="792164c73f012a6eeb208eb8bd1c997b5b34f4ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RemoteServer&lt;/code&gt; class is the common superclass to server implementations and provides the framework to support a wide range of remote reference semantics. Specifically, the functions needed to create and export remote objects (i.e. to make them remotely available) are provided abstractly by &lt;code&gt;RemoteServer&lt;/code&gt; and concretely by its subclass(es).</source>
          <target state="translated">&lt;code&gt;RemoteServer&lt;/code&gt; クラスは、サーバの実装に対する共通のスーパークラスであり、広範囲のリモート参照セマンティクスをサポートするフレームワークを提供します。具体的には、リモートオブジェクトを作成およびエクスポートする（つまり、リモートで使用できるようにする）ために必要な関数は、 &lt;code&gt;RemoteServer&lt;/code&gt; によって抽象的に提供され、具体的にはそのサブクラスによって提供されます。</target>
        </trans-unit>
        <trans-unit id="fa93b21177eae717f290dacea22a21f97b8f1d72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RemoteStub&lt;/code&gt; class is the common superclass of statically generated client stubs and provides the framework to support a wide range of remote reference semantics. Stub objects are surrogates that support exactly the same set of remote interfaces defined by the actual implementation of the remote object.</source>
          <target state="translated">The &lt;code&gt;RemoteStub&lt;/code&gt; class is the common superclass of statically generated client stubs and provides the framework to support a wide range of remote reference semantics. Stub objects are surrogates that support exactly the same set of remote interfaces defined by the actual implementation of the remote object.</target>
        </trans-unit>
        <trans-unit id="9fb5c4efba8253cf833773d52f6ee715196af2f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RenderedImage&lt;/code&gt; being referenced.</source>
          <target state="translated">&lt;code&gt;RenderedImage&lt;/code&gt; のは、参照されています。</target>
        </trans-unit>
        <trans-unit id="ff6444550237d5fb85d8a7c51d5efc98d5ae9185" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RenderingHints&lt;/code&gt; class defines and manages collections of keys and associated values which allow an application to provide input into the choice of algorithms used by other classes which perform rendering and image manipulation services.</source>
          <target state="translated">The &lt;code&gt;RenderingHints&lt;/code&gt; class defines and manages collections of keys and associated values which allow an application to provide input into the choice of algorithms used by other classes which perform rendering and image manipulation services.</target>
        </trans-unit>
        <trans-unit id="9887a53bebe132f40788e0d2065e4ecd783e3235" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RenderingHints&lt;/code&gt; class defines and manages collections of keys and associated values which allow an application to provide input into the choice of algorithms used by other classes which perform rendering and image manipulation services. The &lt;a href=&quot;graphics2d&quot;&gt;&lt;code&gt;Graphics2D&lt;/code&gt;&lt;/a&gt; class, and classes that implement &lt;a href=&quot;image/bufferedimageop&quot;&gt;&lt;code&gt;BufferedImageOp&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;image/rasterop&quot;&gt;&lt;code&gt;RasterOp&lt;/code&gt;&lt;/a&gt; all provide methods to get and possibly to set individual or groups of &lt;code&gt;RenderingHints&lt;/code&gt; keys and their associated values. When those implementations perform any rendering or image manipulation operations they should examine the values of any &lt;code&gt;RenderingHints&lt;/code&gt; that were requested by the caller and tailor the algorithms used accordingly and to the best of their ability.</source>
          <target state="translated">The &lt;code&gt;RenderingHints&lt;/code&gt; class defines and manages collections of keys and associated values which allow an application to provide input into the choice of algorithms used by other classes which perform rendering and image manipulation services. The &lt;a href=&quot;graphics2d&quot;&gt; &lt;code&gt;Graphics2D&lt;/code&gt; &lt;/a&gt; class, and classes that implement &lt;a href=&quot;image/bufferedimageop&quot;&gt; &lt;code&gt;BufferedImageOp&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;image/rasterop&quot;&gt; &lt;code&gt;RasterOp&lt;/code&gt; &lt;/a&gt; all provide methods to get and possibly to set individual or groups of &lt;code&gt;RenderingHints&lt;/code&gt; keys and their associated values. When those implementations perform any rendering or image manipulation operations they should examine the values of any &lt;code&gt;RenderingHints&lt;/code&gt; that were requested by the caller and tailor the algorithms used accordingly and to the best of their ability.</target>
        </trans-unit>
        <trans-unit id="698f6ce8695409c9c1d016b240fc277d2daf556f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RenderingHints&lt;/code&gt; object associated with this op.</source>
          <target state="translated">The &lt;code&gt;RenderingHints&lt;/code&gt; object associated with this op.</target>
        </trans-unit>
        <trans-unit id="77e24654175305f0a647c70b9c35f59becd0d1e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RenderingHints&lt;/code&gt; object associated with this operation. Returns null if no hints have been set.</source>
          <target state="translated">The &lt;code&gt;RenderingHints&lt;/code&gt; object associated with this operation. Returns null if no hints have been set.</target>
        </trans-unit>
        <trans-unit id="dcb353570992b66e098ee6f81b7550b5c291b768" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RenderingHints&lt;/code&gt; object for this &lt;code&gt;BufferedImageOp&lt;/code&gt;. Returns null if no hints have been set.</source>
          <target state="translated">The &lt;code&gt;RenderingHints&lt;/code&gt; object for this &lt;code&gt;BufferedImageOp&lt;/code&gt; . Returns null if no hints have been set.</target>
        </trans-unit>
        <trans-unit id="fb9d41c3fa3c99032ae09838bf89f6521b0c7d6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ResultSet&lt;/code&gt; interface provides</source>
          <target state="translated">The &lt;code&gt;ResultSet&lt;/code&gt; interface provides</target>
        </trans-unit>
        <trans-unit id="09f27659fdc1b9513eeb6b0754213ec48f2fa7c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ResultSet&lt;/code&gt; is sorted by the NAME column</source>
          <target state="translated">The &lt;code&gt;ResultSet&lt;/code&gt; is sorted by the NAME column</target>
        </trans-unit>
        <trans-unit id="887b6c862a54810bed3530170ef96026c940d025" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ResultSet&lt;/code&gt; object that is returned has the following columns:</source>
          <target state="translated">The &lt;code&gt;ResultSet&lt;/code&gt; object that is returned has the following columns:</target>
        </trans-unit>
        <trans-unit id="b9fc508b09fb91444f8aa155b416b9d56dbb1265" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ReverbType&lt;/code&gt; class provides methods for accessing various reverberation settings to be applied to an audio signal.</source>
          <target state="translated">&lt;code&gt;ReverbType&lt;/code&gt; のクラスは、オーディオ信号に適用される様々なリバーブ設定にアクセスするための方法を提供します。</target>
        </trans-unit>
        <trans-unit id="2cd9cf5f4a30505ba459be4135f61441e2ae2fa6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RoundRectangle2D&lt;/code&gt; class defines a rectangle with rounded corners defined by a location &lt;code&gt;(x,y)&lt;/code&gt;, a dimension &lt;code&gt;(w x h)&lt;/code&gt;, and the width and height of an arc with which to round the corners.</source>
          <target state="translated">The &lt;code&gt;RoundRectangle2D&lt;/code&gt; class defines a rectangle with rounded corners defined by a location &lt;code&gt;(x,y)&lt;/code&gt; , a dimension &lt;code&gt;(w x h)&lt;/code&gt; , and the width and height of an arc with which to round the corners.</target>
        </trans-unit>
        <trans-unit id="afe97ee9c3219412d61628980fe8432b9daaba4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RoundingMode&lt;/code&gt; used for this DecimalFormat.</source>
          <target state="translated">&lt;code&gt;RoundingMode&lt;/code&gt; はこののDecimalFormatに使用しました。</target>
        </trans-unit>
        <trans-unit id="ffe20390fecad2daec079563f89bb0ffa523a1bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RoundingMode&lt;/code&gt; used for this NumberFormat.</source>
          <target state="translated">&lt;code&gt;RoundingMode&lt;/code&gt; はこのNumberFormatをするために使用しました。</target>
        </trans-unit>
        <trans-unit id="2bf318326f683bc3130a7e47f41a597fb78b5f4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowSet&lt;/code&gt; interface is unique in that it is intended to be implemented using the rest of the JDBC API. In other words, a &lt;code&gt;RowSet&lt;/code&gt; implementation is a layer of software that executes &quot;on top&quot; of a JDBC driver. Implementations of the &lt;code&gt;RowSet&lt;/code&gt; interface can be provided by anyone, including JDBC driver vendors who want to provide a &lt;code&gt;RowSet&lt;/code&gt; implementation as part of their JDBC products.</source>
          <target state="translated">The &lt;code&gt;RowSet&lt;/code&gt; interface is unique in that it is intended to be implemented using the rest of the JDBC API. In other words, a &lt;code&gt;RowSet&lt;/code&gt; implementation is a layer of software that executes &quot;on top&quot; of a JDBC driver. Implementations of the &lt;code&gt;RowSet&lt;/code&gt; interface can be provided by anyone, including JDBC driver vendors who want to provide a &lt;code&gt;RowSet&lt;/code&gt; implementation as part of their JDBC products.</target>
        </trans-unit>
        <trans-unit id="6a660d92b53da40c64110ae03c4012f99aaf197b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowSet&lt;/code&gt; interface may be implemented in any number of ways, and anyone may write an implementation. Developers are encouraged to use their imaginations in coming up with new ways to use rowsets.</source>
          <target state="translated">The &lt;code&gt;RowSet&lt;/code&gt; interface may be implemented in any number of ways, and anyone may write an implementation. Developers are encouraged to use their imaginations in coming up with new ways to use rowsets.</target>
        </trans-unit>
        <trans-unit id="6e183ab9ec4067e3978fb0f51f24da4f320d25d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowSet&lt;/code&gt; interface provides a set of JavaBeans properties that allow a &lt;code&gt;RowSet&lt;/code&gt; instance to be configured to connect to a JDBC data source and read some data from the data source. A group of setter methods (&lt;code&gt;setInt&lt;/code&gt;, &lt;code&gt;setBytes&lt;/code&gt;, &lt;code&gt;setString&lt;/code&gt;, and so on) provide a way to pass input parameters to a rowset's command property. This command is the SQL query the rowset uses when it gets its data from a relational database, which is generally the case.</source>
          <target state="translated">The &lt;code&gt;RowSet&lt;/code&gt; interface provides a set of JavaBeans properties that allow a &lt;code&gt;RowSet&lt;/code&gt; instance to be configured to connect to a JDBC data source and read some data from the data source. A group of setter methods ( &lt;code&gt;setInt&lt;/code&gt; , &lt;code&gt;setBytes&lt;/code&gt; , &lt;code&gt;setString&lt;/code&gt; , and so on) provide a way to pass input parameters to a rowset's command property. This command is the SQL query the rowset uses when it gets its data from a relational database, which is generally the case.</target>
        </trans-unit>
        <trans-unit id="7f4204c54cc12e00930766d695bcc0a0d93d8f28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowSet&lt;/code&gt; interface supports JavaBeans events, allowing other components in an application to be notified when an event occurs on a rowset, such as a change in its value.</source>
          <target state="translated">The &lt;code&gt;RowSet&lt;/code&gt; interface supports JavaBeans events, allowing other components in an application to be notified when an event occurs on a rowset, such as a change in its value.</target>
        </trans-unit>
        <trans-unit id="ff10a7bec4f9799f3f4222f05b3fb7ecfbe4c533" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowSet&lt;/code&gt; interface works with various other classes and interfaces behind the scenes. These can be grouped into three categories.</source>
          <target state="translated">The &lt;code&gt;RowSet&lt;/code&gt; interface works with various other classes and interfaces behind the scenes. These can be grouped into three categories.</target>
        </trans-unit>
        <trans-unit id="ed7467c598f02f617b848f30e8afc44cd8eee80c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowSetMetaData&lt;/code&gt; interface differs from the &lt;code&gt;ResultSetMetaData&lt;/code&gt; interface in two ways.</source>
          <target state="translated">The &lt;code&gt;RowSetMetaData&lt;/code&gt; interface differs from the &lt;code&gt;ResultSetMetaData&lt;/code&gt; interface in two ways.</target>
        </trans-unit>
        <trans-unit id="842bdaad38403a9056358dfffb5fed12b8ad0ac1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowSetMetaData&lt;/code&gt; interface provides methods for setting the information about columns, but an application would not normally use these methods. When an application calls the &lt;code&gt;RowSet&lt;/code&gt; method &lt;code&gt;execute&lt;/code&gt;, the &lt;code&gt;RowSet&lt;/code&gt; object will contain a new set of rows, and its &lt;code&gt;RowSetMetaData&lt;/code&gt; object will have been internally updated to contain information about the new columns.</source>
          <target state="translated">The &lt;code&gt;RowSetMetaData&lt;/code&gt; interface provides methods for setting the information about columns, but an application would not normally use these methods. When an application calls the &lt;code&gt;RowSet&lt;/code&gt; method &lt;code&gt;execute&lt;/code&gt; , the &lt;code&gt;RowSet&lt;/code&gt; object will contain a new set of rows, and its &lt;code&gt;RowSetMetaData&lt;/code&gt; object will have been internally updated to contain information about the new columns.</target>
        </trans-unit>
        <trans-unit id="6a2e4c6f5a9389501138281dd4f3af7406e50bb2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowSetWarning&lt;/code&gt; class provides warnings that can be set on &lt;code&gt;RowSet&lt;/code&gt; implementations. Similar to &lt;a href=&quot;../../../../java.sql/java/sql/sqlwarning&quot;&gt;SQLWarning&lt;/a&gt; objects, &lt;code&gt;RowSetWarning&lt;/code&gt; objects are silently chained to the object whose method caused the warning to be thrown. All &lt;code&gt;RowSet&lt;/code&gt; implementations &lt;b&gt;should&lt;/b&gt; ensure that this chaining occurs if a warning is generated and also ensure that the warnings are available via the &lt;code&gt;getRowSetWarnings&lt;/code&gt; method defined in either the &lt;code&gt;JdbcRowSet&lt;/code&gt; interface or the &lt;code&gt;CachedRowSet&lt;/code&gt; interface. After a warning has been retrieved with one of the &lt;code&gt;getRowSetWarnings&lt;/code&gt; methods, the &lt;code&gt;RowSetWarning&lt;/code&gt; method &lt;code&gt;getNextWarning&lt;/code&gt; can be called on it to retrieve any warnings that might be chained on it. If a warning is returned, &lt;code&gt;getNextWarning&lt;/code&gt; can be called on it, and so on until there are no more warnings.</source>
          <target state="translated">The &lt;code&gt;RowSetWarning&lt;/code&gt; class provides warnings that can be set on &lt;code&gt;RowSet&lt;/code&gt; implementations. Similar to &lt;a href=&quot;../../../../java.sql/java/sql/sqlwarning&quot;&gt;SQLWarning&lt;/a&gt; objects, &lt;code&gt;RowSetWarning&lt;/code&gt; objects are silently chained to the object whose method caused the warning to be thrown. All &lt;code&gt;RowSet&lt;/code&gt; implementations &lt;b&gt;should&lt;/b&gt; ensure that this chaining occurs if a warning is generated and also ensure that the warnings are available via the &lt;code&gt;getRowSetWarnings&lt;/code&gt; method defined in either the &lt;code&gt;JdbcRowSet&lt;/code&gt; interface or the &lt;code&gt;CachedRowSet&lt;/code&gt; interface. After a warning has been retrieved with one of the &lt;code&gt;getRowSetWarnings&lt;/code&gt; methods, the &lt;code&gt;RowSetWarning&lt;/code&gt; method &lt;code&gt;getNextWarning&lt;/code&gt; can be called on it to retrieve any warnings that might be chained on it. If a warning is returned, &lt;code&gt;getNextWarning&lt;/code&gt; can be called on it, and so on until there are no more warnings.</target>
        </trans-unit>
        <trans-unit id="3ce1c50b3393b4ee8852b94258a4243c5413126c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowsetMetaDataImpl&lt;/code&gt; class is a utility class that provides an implementation of the &lt;a href=&quot;../../../../java.sql/javax/sql/rowsetmetadata&quot;&gt;RowSetMetaData&lt;/a&gt; interface, supplying standard setter method implementations for metadata for both connected and disconnected &lt;code&gt;RowSet&lt;/code&gt; objects. All implementations are free to use this standard implementation but are not required to do so.</source>
          <target state="translated">The &lt;code&gt;RowsetMetaDataImpl&lt;/code&gt; class is a utility class that provides an implementation of the &lt;a href=&quot;../../../../java.sql/javax/sql/rowsetmetadata&quot;&gt;RowSetMetaData&lt;/a&gt; interface, supplying standard setter method implementations for metadata for both connected and disconnected &lt;code&gt;RowSet&lt;/code&gt; objects. All implementations are free to use this standard implementation but are not required to do so.</target>
        </trans-unit>
        <trans-unit id="9a6c5472e51dff7ede55a06c630f405c31babb27" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleBasedCollator&lt;/code&gt; class is a concrete subclass of &lt;code&gt;Collator&lt;/code&gt; that provides a simple, data-driven, table collator.</source>
          <target state="translated">&lt;code&gt;RuleBasedCollator&lt;/code&gt; クラスは、具体的なサブクラスである &lt;code&gt;Collator&lt;/code&gt; 単純なデータ駆動型、テーブル照合を提供します。</target>
        </trans-unit>
        <trans-unit id="2ed8190679df509541420fb54e8aaab97382d51f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RuleBasedCollator&lt;/code&gt; class is a concrete subclass of &lt;code&gt;Collator&lt;/code&gt; that provides a simple, data-driven, table collator. With this class you can create a customized table-based &lt;code&gt;Collator&lt;/code&gt;. &lt;code&gt;RuleBasedCollator&lt;/code&gt; maps characters to sort keys.</source>
          <target state="translated">&lt;code&gt;RuleBasedCollator&lt;/code&gt; クラスは、具体的なサブクラスである &lt;code&gt;Collator&lt;/code&gt; 単純なデータ駆動型、テーブル照合を提供します。このクラスを使用すると、カスタマイズされたテーブルベースの &lt;code&gt;Collator&lt;/code&gt; 作成できます。 &lt;code&gt;RuleBasedCollator&lt;/code&gt; は、文字をソートキーにマップします。</target>
        </trans-unit>
        <trans-unit id="5098c81b7457412bf4917d02e9a1dfef85b5fe26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Runnable&lt;/code&gt; interface should be implemented by any class whose instances are intended to be executed by a thread.</source>
          <target state="translated">&lt;code&gt;Runnable&lt;/code&gt; インターフェースは、そのインスタンスのスレッドによって実行されることが意図されている任意のクラスによって実装されるべきです。</target>
        </trans-unit>
        <trans-unit id="d8f15f8d81c303338ba2b966d98884e4108ae0f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Runnable&lt;/code&gt; interface should be implemented by any class whose instances are intended to be executed by a thread. The class must define a method of no arguments called &lt;code&gt;run&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Runnable&lt;/code&gt; インターフェースは、そのインスタンスのスレッドによって実行されることが意図されている任意のクラスによって実装されるべきです。クラスは、 &lt;code&gt;run&lt;/code&gt; と呼ばれる引数のないメソッドを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="5ed109534b0233e529cda2e37e8cc9f0e3ad7221" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SCTPChannel&lt;/code&gt; returned by this method, if any, will be in blocking mode regardless of the blocking mode of this channel.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3f808001c5fe1d02e1eabc6c93ae2430220e931" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SHORT&lt;/code&gt; number format style.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d9f88a23d98de0fb1ab893f3f7409818a9bbc61d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SMART&lt;/code&gt; behaviour handles the common &quot;end of day&quot; 24:00 value. Processing in &lt;code&gt;LENIENT&lt;/code&gt; mode also produces the same result:</source>
          <target state="translated">&lt;code&gt;SMART&lt;/code&gt; の挙動は24:00値の一般的な「一日の終わり」を処理します。 &lt;code&gt;LENIENT&lt;/code&gt; モードでの処理でも同じ結果が得られます。</target>
        </trans-unit>
        <trans-unit id="41ead63f7c6236fad7e6307adb65902f694060ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SQLException&lt;/code&gt; the driver is about to throw</source>
          <target state="translated">The &lt;code&gt;SQLException&lt;/code&gt; the driver is about to throw</target>
        </trans-unit>
        <trans-unit id="1740ef1e8ee2276f649ff5e25da7294fc66b2bc6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SQLInputImpl&lt;/code&gt; class provides a set of reader methods analogous to the &lt;code&gt;ResultSet&lt;/code&gt; getter methods. These methods make it possible to read the values in an &lt;code&gt;SQLInputImpl&lt;/code&gt; object.</source>
          <target state="translated">The &lt;code&gt;SQLInputImpl&lt;/code&gt; class provides a set of reader methods analogous to the &lt;code&gt;ResultSet&lt;/code&gt; getter methods. These methods make it possible to read the values in an &lt;code&gt;SQLInputImpl&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="7e31e968e4e78d48b334cc0a2fd729e775d78ea9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SQLInputImpl&lt;/code&gt; class provides a set of reader methods analogous to the &lt;code&gt;ResultSet&lt;/code&gt; getter methods. These methods make it possible to read the values in an &lt;code&gt;SQLInputImpl&lt;/code&gt; object. The method &lt;code&gt;wasNull&lt;/code&gt; is used to determine whether the last value read was SQL NULL.</source>
          <target state="translated">The &lt;code&gt;SQLInputImpl&lt;/code&gt; class provides a set of reader methods analogous to the &lt;code&gt;ResultSet&lt;/code&gt; getter methods. These methods make it possible to read the values in an &lt;code&gt;SQLInputImpl&lt;/code&gt; object. The method &lt;code&gt;wasNull&lt;/code&gt; is used to determine whether the last value read was SQL NULL.</target>
        </trans-unit>
        <trans-unit id="64049cd592e8eb0ec78aec4cd353b6f5aabba963" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; completed the operation, and is available to process similar calls.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; のは、操作を完了し、同様の呼び出しを処理することが可能です。</target>
        </trans-unit>
        <trans-unit id="077b184f78f7e5525918d7fe92403baaa5f9a42d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; has just finished handshaking.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; のは、ちょうどハンドシェイクを完了しました。</target>
        </trans-unit>
        <trans-unit id="df118613b41d79c011b7a0bc6c7f48652d896d51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; is not currently handshaking.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; のは、現在のハンドシェイクされていません。</target>
        </trans-unit>
        <trans-unit id="1926ac57988ad07ff17731c0dbc1dd707e5b1e02" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; must send data to the remote side before handshaking can continue, so &lt;code&gt;SSLEngine.wrap()&lt;/code&gt; should be called.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; のは続けることができハンドシェークの前に、のでリモート側にデータを送信しなければなりません &lt;code&gt;SSLEngine.wrap()&lt;/code&gt; 呼び出さなければなりません。</target>
        </trans-unit>
        <trans-unit id="02fa5e3b89e2cea3ead9db69cbe845f18df35ab2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; needs the results of one (or more) delegated tasks before handshaking can continue.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; のは、ハンドシェークを続行する前に、1つ（またはそれ以上）の委任タスクの結果を必要とします。</target>
        </trans-unit>
        <trans-unit id="082a3cd7613f1264f8b5206e5fbed35f61a0dff0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; needs to receive data from the remote side before handshaking can continue.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; のは、ハンドシェークを続行する前に、リモート側からのデータを受信する必要があります。</target>
        </trans-unit>
        <trans-unit id="a7d5c985500f42653f476fc251500be91c49e1bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; needs to unwrap before handshaking can continue.</source>
          <target state="translated">The &lt;code&gt;SSLEngine&lt;/code&gt; needs to unwrap before handshaking can continue.</target>
        </trans-unit>
        <trans-unit id="d352a14052137339f442e35be68221c08d8d1336" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; produces/consumes complete SSL/TLS packets only, and does not store application data internally between calls to &lt;code&gt;wrap()/unwrap()&lt;/code&gt;. Thus input and output &lt;code&gt;ByteBuffer&lt;/code&gt;s must be sized appropriately to hold the maximum record that can be produced. Calls to &lt;a href=&quot;sslsession#getPacketBufferSize--&quot;&gt;&lt;code&gt;SSLSession.getPacketBufferSize()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;sslsession#getApplicationBufferSize--&quot;&gt;&lt;code&gt;SSLSession.getApplicationBufferSize()&lt;/code&gt;&lt;/a&gt; should be used to determine the appropriate buffer sizes. The size of the outbound application data buffer generally does not matter. If buffer conditions do not allow for the proper consumption/production of data, the application must determine (via &lt;a href=&quot;sslengineresult&quot;&gt;&lt;code&gt;SSLEngineResult&lt;/code&gt;&lt;/a&gt;) and correct the problem, and then try the call again.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; のは /生産する唯一の完全なSSL / TLSパケットを消費し、呼び出しの間に、内部アプリケーションデータが格納されていない &lt;code&gt;wrap()/unwrap()&lt;/code&gt; 。したがって、入力および出力の &lt;code&gt;ByteBuffer&lt;/code&gt; は、生成可能な最大レコードを保持できるように適切なサイズにする必要があります。&lt;a href=&quot;sslsession#getPacketBufferSize--&quot;&gt; &lt;code&gt;SSLSession.getPacketBufferSize()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;sslsession#getApplicationBufferSize--&quot;&gt; &lt;code&gt;SSLSession.getApplicationBufferSize()&lt;/code&gt; の&lt;/a&gt;呼び出しを使用して、適切なバッファーサイズを決定する必要があります。アウトバウンドアプリケーションデータバッファのサイズは、通常、重要ではありません。バッファー条件がデータの適切な消費/生成を許可しない場合、アプリケーションは（&lt;a href=&quot;sslengineresult&quot;&gt; &lt;code&gt;SSLEngineResult&lt;/code&gt; &lt;/a&gt;を介して）判別し、問題を修正してから、呼び出しを再試行する必要があります。</target>
        </trans-unit>
        <trans-unit id="d281a4755dd5b701c487bc1d549aca11bc928e84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; produces/consumes complete SSL/TLS/DTLS packets only, and does not store application data internally between calls to &lt;code&gt;wrap()/unwrap()&lt;/code&gt;. Thus input and output &lt;code&gt;ByteBuffer&lt;/code&gt;s must be sized appropriately to hold the maximum record that can be produced. Calls to &lt;a href=&quot;sslsession#getPacketBufferSize()&quot;&gt;&lt;code&gt;SSLSession.getPacketBufferSize()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;sslsession#getApplicationBufferSize()&quot;&gt;&lt;code&gt;SSLSession.getApplicationBufferSize()&lt;/code&gt;&lt;/a&gt; should be used to determine the appropriate buffer sizes. The size of the outbound application data buffer generally does not matter. If buffer conditions do not allow for the proper consumption/production of data, the application must determine (via &lt;a href=&quot;sslengineresult&quot;&gt;&lt;code&gt;SSLEngineResult&lt;/code&gt;&lt;/a&gt;) and correct the problem, and then try the call again.</source>
          <target state="translated">The &lt;code&gt;SSLEngine&lt;/code&gt; produces/consumes complete SSL/TLS/DTLS packets only, and does not store application data internally between calls to &lt;code&gt;wrap()/unwrap()&lt;/code&gt; . Thus input and output &lt;code&gt;ByteBuffer&lt;/code&gt; s must be sized appropriately to hold the maximum record that can be produced. Calls to &lt;a href=&quot;sslsession#getPacketBufferSize()&quot;&gt; &lt;code&gt;SSLSession.getPacketBufferSize()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;sslsession#getApplicationBufferSize()&quot;&gt; &lt;code&gt;SSLSession.getApplicationBufferSize()&lt;/code&gt; &lt;/a&gt; should be used to determine the appropriate buffer sizes. The size of the outbound application data buffer generally does not matter. If buffer conditions do not allow for the proper consumption/production of data, the application must determine (via &lt;a href=&quot;sslengineresult&quot;&gt; &lt;code&gt;SSLEngineResult&lt;/code&gt; &lt;/a&gt;) and correct the problem, and then try the call again.</target>
        </trans-unit>
        <trans-unit id="b752ac795479df72fea9b170d743467ba0f0cfba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; was not able to process the operation because there are not enough bytes available in the destination buffer to hold the result.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; のは、結果を保持するための宛先バッファに十分なバイトがないため、操作を処理できませんでした。</target>
        </trans-unit>
        <trans-unit id="eaeaedd8a0decde5ead8adb6e73dcb183ff095c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLEngine&lt;/code&gt; was not able to unwrap the incoming data because there were not enough source bytes available to make a complete packet.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; のは十分に元が完全なパケットを作るために利用可能なバイトがなかったので、着信データのラップを解除することができませんでした。</target>
        </trans-unit>
        <trans-unit id="cbaeb5659c8aac8f7fee34b65d2504a15d654f38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SSLSocket&lt;/code&gt; class provides much of the same security functionality, but all of the inbound and outbound data is automatically transported using the underlying &lt;a href=&quot;../../../java/net/socket&quot;&gt;&lt;code&gt;Socket&lt;/code&gt;&lt;/a&gt;, which by design uses a blocking model. While this is appropriate for many applications, this model does not provide the scalability required by large servers.</source>
          <target state="translated">&lt;code&gt;SSLSocket&lt;/code&gt; クラスはほとんど同じセキュリティ機能を提供しますが、インバウンドとアウトバウンドのすべてのデータが自動的に基礎となる使用して搬送され、&lt;a href=&quot;../../../java/net/socket&quot;&gt; &lt;code&gt;Socket&lt;/code&gt; &lt;/a&gt;の設計により、ブロッキングモデルを使用しています、。これは多くのアプリケーションに適していますが、このモデルは大規模サーバーに必要なスケーラビリティを提供しません。</target>
        </trans-unit>
        <trans-unit id="0096287b7ac27b301cefed5627b43cb896febf8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SchemaFactory&lt;/code&gt; builtin system-default implementation is only required to support the &lt;a href=&quot;http://www.w3.org/TR/xmlschema-1&quot;&gt;W3C XML Schema 1.0&lt;/a&gt;, but may support additional &lt;a href=&quot;#schemaLanguage&quot;&gt;schema languages&lt;/a&gt;.</source>
          <target state="translated">The &lt;code&gt;SchemaFactory&lt;/code&gt; builtin system-default implementation is only required to support the &lt;a href=&quot;http://www.w3.org/TR/xmlschema-1&quot;&gt;W3C XML Schema 1.0&lt;/a&gt;, but may support additional &lt;a href=&quot;#schemaLanguage&quot;&gt;schema languages&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="7e2fbe337a7cccde43edff1b51bee0ae5e969a9c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SchemaFactory&lt;/code&gt; builtin system-default implementation is only required to support the &lt;a href=&quot;https://www.w3.org/TR/xmlschema-1&quot;&gt;W3C XML Schema 1.0&lt;/a&gt;, but may support additional &lt;a href=&quot;#schemaLanguage&quot;&gt;schema languages&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="67002f2853371825d4f380e6151673d61fd862c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngine&lt;/code&gt; implementation version.</source>
          <target state="translated">&lt;code&gt;ScriptEngine&lt;/code&gt; のの実装のバージョン。</target>
        </trans-unit>
        <trans-unit id="f25a0860dae0919f1e2c083b37f6094e4c1e6bad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngine&lt;/code&gt; that created this &lt;code&gt;CompiledScript&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ScriptEngine&lt;/code&gt; のこの作成 &lt;code&gt;CompiledScript&lt;/code&gt; を</target>
        </trans-unit>
        <trans-unit id="5e21343e7ca5145a39ccb5bfd47f5b581373d98e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineFactory&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ScriptEngineFactory&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b665ef5d411bf64411a13e786d5fc2ae59afce43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; implements a discovery and instantiation mechanism for &lt;code&gt;ScriptEngine&lt;/code&gt; classes and also maintains a collection of key/value pairs storing state shared by all engines created by the Manager.</source>
          <target state="translated">&lt;code&gt;ScriptEngineManager&lt;/code&gt; はのための発見とインスタンス化のメカニズムを実装 &lt;code&gt;ScriptEngine&lt;/code&gt; 授業をしても、マネージャが作成したすべてのエンジンで共有状態を保存するキー/値ペアのコレクションを維持します。</target>
        </trans-unit>
        <trans-unit id="bb930e4838810a193fdb5c27c289e1b3c97321a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; implements a discovery and instantiation mechanism for &lt;code&gt;ScriptEngine&lt;/code&gt; classes and also maintains a collection of key/value pairs storing state shared by all engines created by the Manager. This class uses the service provider mechanism described in the &lt;a href=&quot;../../../java.base/java/util/serviceloader&quot;&gt;&lt;code&gt;ServiceLoader&lt;/code&gt;&lt;/a&gt; class to enumerate all the implementations of &lt;code&gt;ScriptEngineFactory&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;ScriptEngineManager&lt;/code&gt; implements a discovery and instantiation mechanism for &lt;code&gt;ScriptEngine&lt;/code&gt; classes and also maintains a collection of key/value pairs storing state shared by all engines created by the Manager. This class uses the service provider mechanism described in the &lt;a href=&quot;../../../java.base/java/util/serviceloader&quot;&gt; &lt;code&gt;ServiceLoader&lt;/code&gt; &lt;/a&gt; class to enumerate all the implementations of &lt;code&gt;ScriptEngineFactory&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e8ac26f4b46b05f20c281cbfe3a63c1a0d4d63f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; implements a discovery and instantiation mechanism for &lt;code&gt;ScriptEngine&lt;/code&gt; classes and also maintains a collection of key/value pairs storing state shared by all engines created by the Manager. This class uses the service provider mechanism to enumerate all the implementations of &lt;code&gt;ScriptEngineFactory&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ScriptEngineManager&lt;/code&gt; はのための発見とインスタンス化のメカニズムを実装 &lt;code&gt;ScriptEngine&lt;/code&gt; 授業をしても、マネージャが作成したすべてのエンジンで共有状態を保存するキー/値ペアのコレクションを維持します。このクラスは、サービスプロバイダーメカニズムを使用して、 &lt;code&gt;ScriptEngineFactory&lt;/code&gt; のすべての実装を列挙します。</target>
        </trans-unit>
        <trans-unit id="c8f5248bd1e6ed1326e622b205ee4a45bbc651cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; provides a method to return a list of all these factories as well as utility methods which look up factories on the basis of language name, file extension and mime type.</source>
          <target state="translated">&lt;code&gt;ScriptEngineManager&lt;/code&gt; は、言語名、ファイル拡張子とMIMEタイプに基づいて、工場を見て、これらすべての工場だけでなく、ユーティリティメソッドのリストを返すメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="901dec5a90ef8a0878213de32ad7798df415e097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; uses the service provider mechanism described in the</source>
          <target state="translated">&lt;code&gt;ScriptEngineManager&lt;/code&gt; はで説明したサービスプロバイダのメカニズムを使用しています</target>
        </trans-unit>
        <trans-unit id="c74549e06bd34285399a1ea925354aef44983aef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ScriptEngineManager&lt;/code&gt; uses the service-provider loader mechanism described in the &lt;a href=&quot;../../../java.base/java/util/serviceloader&quot;&gt;&lt;code&gt;ServiceLoader&lt;/code&gt;&lt;/a&gt; class to obtain instances of &lt;code&gt;ScriptEngineFactory&lt;/code&gt; instances. See &lt;a href=&quot;scriptenginemanager#%3Cinit%3E()&quot;&gt;&lt;code&gt;ScriptEngineManager()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;scriptenginemanager#%3Cinit%3E(java.lang.ClassLoader)&quot;&gt;&lt;code&gt;ScriptEngineManager(java.lang.ClassLoader)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The &lt;code&gt;ScriptEngineManager&lt;/code&gt; uses the service-provider loader mechanism described in the &lt;a href=&quot;../../../java.base/java/util/serviceloader&quot;&gt; &lt;code&gt;ServiceLoader&lt;/code&gt; &lt;/a&gt; class to obtain instances of &lt;code&gt;ScriptEngineFactory&lt;/code&gt; instances. See &lt;a href=&quot;scriptenginemanager#%3Cinit%3E()&quot;&gt; &lt;code&gt;ScriptEngineManager()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;scriptenginemanager#%3Cinit%3E(java.lang.ClassLoader)&quot;&gt; &lt;code&gt;ScriptEngineManager(java.lang.ClassLoader)&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="932ad5c0b4a4f7d61a4d48e2e85b2a5aec990bf2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Scrollbar&lt;/code&gt; class embodies a scroll bar, a familiar user-interface object.</source>
          <target state="translated">The &lt;code&gt;Scrollbar&lt;/code&gt; class embodies a scroll bar, a familiar user-interface object.</target>
        </trans-unit>
        <trans-unit id="5630c5e07781b19f55a9c82b7919e0cb4c1d7533" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Scrollbar&lt;/code&gt; class embodies a scroll bar, a familiar user-interface object. A scroll bar provides a convenient means for allowing a user to select from a range of values. The following three vertical scroll bars could be used as slider controls to pick the red, green, and blue components of a color:</source>
          <target state="translated">The &lt;code&gt;Scrollbar&lt;/code&gt; class embodies a scroll bar, a familiar user-interface object. A scroll bar provides a convenient means for allowing a user to select from a range of values. The following three vertical scroll bars could be used as slider controls to pick the red, green, and blue components of a color:</target>
        </trans-unit>
        <trans-unit id="43cb6349a89fc413e1dd0550d70890cc77d3e5a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SctpChannel&lt;/code&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dcf2e0bf99eab15ad6a0fa15e39d7a6c2e33fef8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SearchResult&lt;/code&gt; may also contain attributes of the matching object if the &lt;code&gt;cons&lt;/code&gt; argument specifies that attributes be returned.</source>
          <target state="translated">&lt;code&gt;SearchResult&lt;/code&gt; は、場合も、一致するオブジェクトの属性を含むことが &lt;code&gt;cons&lt;/code&gt; 属性が返されることに引数を指定します。</target>
        </trans-unit>
        <trans-unit id="eabc9dbc1a3de0e0e126d5d1a67a58df32a7962f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SecurityManager&lt;/code&gt; class contains many methods with names that begin with the word &lt;code&gt;check&lt;/code&gt;. These methods are called by various methods in the Java libraries before those methods perform certain potentially sensitive operations. The invocation of such a &lt;code&gt;check&lt;/code&gt; method typically looks like this:</source>
          <target state="translated">&lt;code&gt;SecurityManager&lt;/code&gt; クラスには、ワードで始まる名前を持つ多くのメソッドが含ま &lt;code&gt;check&lt;/code&gt; 。これらのメソッドは、これらのメソッドが特定の潜在的に機密性の高い操作を実行する前に、Javaライブラリのさまざまなメソッドによって呼び出されます。このような &lt;code&gt;check&lt;/code&gt; メソッドの呼び出しは通常、次のようになります。</target>
        </trans-unit>
        <trans-unit id="cdf333c83d829b3401cd3328628d6c609f64f31a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Sequencer&lt;/code&gt; interface includes methods for the following basic MIDI sequencer operations:</source>
          <target state="translated">&lt;code&gt;Sequencer&lt;/code&gt; インタフェースは、次の基本的なMIDIシーケンサーの操作のためのメソッドが含まれています。</target>
        </trans-unit>
        <trans-unit id="ca4629da4215ec3fb3d7c910ce572fca6f512771" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialArray&lt;/code&gt; class provides a constructor for creating a &lt;code&gt;SerialArray&lt;/code&gt; instance from an &lt;code&gt;Array&lt;/code&gt; object, methods for getting the base type and the SQL name for the base type, and methods for copying all or part of a &lt;code&gt;SerialArray&lt;/code&gt; object.</source>
          <target state="translated">The &lt;code&gt;SerialArray&lt;/code&gt; class provides a constructor for creating a &lt;code&gt;SerialArray&lt;/code&gt; instance from an &lt;code&gt;Array&lt;/code&gt; object, methods for getting the base type and the SQL name for the base type, and methods for copying all or part of a &lt;code&gt;SerialArray&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="3613b9a6953562b14aa7159f20c01879def263ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialArray&lt;/code&gt; class provides a constructor for creating a &lt;code&gt;SerialArray&lt;/code&gt; instance from an Array object, methods for getting the base type and the SQL name for the base type, and methods for copying all or part of a &lt;code&gt;SerialArray&lt;/code&gt; object.</source>
          <target state="translated">The &lt;code&gt;SerialArray&lt;/code&gt; class provides a constructor for creating a &lt;code&gt;SerialArray&lt;/code&gt; instance from an Array object, methods for getting the base type and the SQL name for the base type, and methods for copying all or part of a &lt;code&gt;SerialArray&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="b2b0eceea94ee3adc7c8249de1bfdf76c94557a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialBlob&lt;/code&gt; class provides a constructor for creating an instance from a &lt;code&gt;Blob&lt;/code&gt; object. Note that the &lt;code&gt;Blob&lt;/code&gt; object should have brought the SQL &lt;code&gt;BLOB&lt;/code&gt; value's data over to the client before a &lt;code&gt;SerialBlob&lt;/code&gt; object is constructed from it. The data of an SQL &lt;code&gt;BLOB&lt;/code&gt; value can be materialized on the client as an array of bytes (using the method &lt;code&gt;Blob.getBytes&lt;/code&gt;) or as a stream of uninterpreted bytes (using the method &lt;code&gt;Blob.getBinaryStream&lt;/code&gt;).</source>
          <target state="translated">The &lt;code&gt;SerialBlob&lt;/code&gt; class provides a constructor for creating an instance from a &lt;code&gt;Blob&lt;/code&gt; object. Note that the &lt;code&gt;Blob&lt;/code&gt; object should have brought the SQL &lt;code&gt;BLOB&lt;/code&gt; value's data over to the client before a &lt;code&gt;SerialBlob&lt;/code&gt; object is constructed from it. The data of an SQL &lt;code&gt;BLOB&lt;/code&gt; value can be materialized on the client as an array of bytes (using the method &lt;code&gt;Blob.getBytes&lt;/code&gt; ) or as a stream of uninterpreted bytes (using the method &lt;code&gt;Blob.getBinaryStream&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="daca7fc0c00803e3d344fe9e44d60a1abc8d188f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialBlob&lt;/code&gt; class provides a constructor for creating an instance from a Blob object. Note that the Blob object should have brought the SQL BLOB value's data over to the client before a &lt;code&gt;SerialBlob&lt;/code&gt; object is constructed from it. The data of an SQL BLOB value can be materialized on the client as an array of bytes (using the method &lt;code&gt;Blob.getBytes&lt;/code&gt;) or as a stream of uninterpreted bytes (using the method &lt;code&gt;Blob.getBinaryStream&lt;/code&gt;).</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a36b2be101ab96842813d3879e3c76a7ca051531" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialBlob&lt;/code&gt;class provides a constructor for creating an instance from a Blob object. Note that the Blob object should have brought the SQL BLOB value's data over to the client before a &lt;code&gt;SerialBlob&lt;/code&gt;object is constructed from it. The data of an SQL BLOB value can be materialized on the client as an array of bytes (using the method &lt;code&gt;Blob.getBytes&lt;/code&gt;) or as a stream of uninterpreted bytes (using the method &lt;code&gt;Blob.getBinaryStream&lt;/code&gt;).</source>
          <target state="translated">The &lt;code&gt;SerialBlob&lt;/code&gt; class provides a constructor for creating an instance from a Blob object. Note that the Blob object should have brought the SQL BLOB value's data over to the client before a &lt;code&gt;SerialBlob&lt;/code&gt; object is constructed from it. The data of an SQL BLOB value can be materialized on the client as an array of bytes (using the method &lt;code&gt;Blob.getBytes&lt;/code&gt; ) or as a stream of uninterpreted bytes (using the method &lt;code&gt;Blob.getBinaryStream&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="0878b5252f99568199e6ce8e7039ce8b4b616d65" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialClob&lt;/code&gt; class provides a constructor for creating an instance from a &lt;code&gt;Clob&lt;/code&gt; object. Note that the &lt;code&gt;Clob&lt;/code&gt; object should have brought the SQL &lt;code&gt;CLOB&lt;/code&gt; value's data over to the client before a &lt;code&gt;SerialClob&lt;/code&gt; object is constructed from it. The data of an SQL &lt;code&gt;CLOB&lt;/code&gt; value can be materialized on the client as a stream of Unicode characters.</source>
          <target state="translated">The &lt;code&gt;SerialClob&lt;/code&gt; class provides a constructor for creating an instance from a &lt;code&gt;Clob&lt;/code&gt; object. Note that the &lt;code&gt;Clob&lt;/code&gt; object should have brought the SQL &lt;code&gt;CLOB&lt;/code&gt; value's data over to the client before a &lt;code&gt;SerialClob&lt;/code&gt; object is constructed from it. The data of an SQL &lt;code&gt;CLOB&lt;/code&gt; value can be materialized on the client as a stream of Unicode characters.</target>
        </trans-unit>
        <trans-unit id="7407cdc2547618da6d7ac9d8e6b269f7ffc8487e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialClob&lt;/code&gt; class provides a constructor for creating an instance from a &lt;code&gt;Clob&lt;/code&gt; object. Note that the &lt;code&gt;Clob&lt;/code&gt; object should have brought the SQL CLOB value's data over to the client before a &lt;code&gt;SerialClob&lt;/code&gt; object is constructed from it. The data of an SQL CLOB value can be materialized on the client as a stream of Unicode characters.</source>
          <target state="translated">The &lt;code&gt;SerialClob&lt;/code&gt; class provides a constructor for creating an instance from a &lt;code&gt;Clob&lt;/code&gt; object. Note that the &lt;code&gt;Clob&lt;/code&gt; object should have brought the SQL CLOB value's data over to the client before a &lt;code&gt;SerialClob&lt;/code&gt; object is constructed from it. The data of an SQL CLOB value can be materialized on the client as a stream of Unicode characters.</target>
        </trans-unit>
        <trans-unit id="531569263cbf3f2d83fdebfe2dd7a42eb6537822" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialRef&lt;/code&gt; class provides a constructor for creating a &lt;code&gt;SerialRef&lt;/code&gt; instance from a &lt;code&gt;Ref&lt;/code&gt; object and provides methods for getting and setting the &lt;code&gt;Ref&lt;/code&gt; object.</source>
          <target state="translated">The &lt;code&gt;SerialRef&lt;/code&gt; class provides a constructor for creating a &lt;code&gt;SerialRef&lt;/code&gt; instance from a &lt;code&gt;Ref&lt;/code&gt; object and provides methods for getting and setting the &lt;code&gt;Ref&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="8a6014458943ef8b69cde5c3b67bcb9d35b9d8a8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialRef&lt;/code&gt; class provides a constructor for creating a &lt;code&gt;SerialRef&lt;/code&gt; instance from a &lt;code&gt;Ref&lt;/code&gt; type and provides methods for getting and setting the &lt;code&gt;Ref&lt;/code&gt; object type.</source>
          <target state="translated">The &lt;code&gt;SerialRef&lt;/code&gt; class provides a constructor for creating a &lt;code&gt;SerialRef&lt;/code&gt; instance from a &lt;code&gt;Ref&lt;/code&gt; type and provides methods for getting and setting the &lt;code&gt;Ref&lt;/code&gt; object type.</target>
        </trans-unit>
        <trans-unit id="331ac575055962225f9ade9cd92c609c9e5e6ec3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SerialStruct&lt;/code&gt; class provides a constructor for creating an instance from a &lt;code&gt;Struct&lt;/code&gt; object, a method for retrieving the SQL type name of the SQL structured type in the database, and methods for retrieving its attribute values.</source>
          <target state="translated">The &lt;code&gt;SerialStruct&lt;/code&gt; class provides a constructor for creating an instance from a &lt;code&gt;Struct&lt;/code&gt; object, a method for retrieving the SQL type name of the SQL structured type in the database, and methods for retrieving its attribute values.</target>
        </trans-unit>
        <trans-unit id="e442aff7da1c49f449251d581aa63dde83a5af38" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ServerSocket&lt;/code&gt; class defines convenience methods to set and get several socket options. This class also defines the &lt;a href=&quot;#setOption(java.net.SocketOption,T)&quot;&gt;&lt;code&gt;setOption&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#getOption(java.net.SocketOption)&quot;&gt;&lt;code&gt;getOption&lt;/code&gt;&lt;/a&gt; methods to set and query socket options. A &lt;code&gt;ServerSocket&lt;/code&gt; supports the following options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d6a25bea447e545dee0ec116fce9cf07f17df31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Set&lt;/code&gt; interface places additional stipulations, beyond those inherited from the &lt;code&gt;Collection&lt;/code&gt; interface, on the contracts of all constructors and on the contracts of the &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt; and &lt;code&gt;hashCode&lt;/code&gt; methods. Declarations for other inherited methods are also included here for convenience. (The specifications accompanying these declarations have been tailored to the &lt;code&gt;Set&lt;/code&gt; interface, but they do not contain any additional stipulations.)</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; インタフェースから継承されたものを超えて、追加の規定を置く &lt;code&gt;Collection&lt;/code&gt; すべてのコンストラクタの契約にとの契約上、インタフェース &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;equals&lt;/code&gt; と &lt;code&gt;hashCode&lt;/code&gt; 方法。他の継承されたメソッドの宣言もここに含まれています。（これらの宣言に付随する仕様は &lt;code&gt;Set&lt;/code&gt; インターフェースに合わせて調整されていますが、追加の規定は含まれていません。）</target>
        </trans-unit>
        <trans-unit id="ca2825253af57c9c2e6a3d7675526c2242a40a0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Set&lt;/code&gt; of Principals associated with this &lt;code&gt;Subject&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Subject&lt;/code&gt; 関連付けられているプリンシパルの &lt;code&gt;Set&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="875fbbb93524788cbec9d10a7f9b1d4a78fcb3af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SetOfIntegerSyntax&lt;/code&gt; object's value is actually stored in &quot;</source>
          <target state="translated">The &lt;code&gt;SetOfIntegerSyntax&lt;/code&gt; object's value is actually stored in &quot;</target>
        </trans-unit>
        <trans-unit id="9603523cfc3ca1974d98e9c77fcd84e7643b7407" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Shape.contains()&lt;/code&gt; method allows a &lt;code&gt;Shape&lt;/code&gt; implementation to conservatively return &lt;code&gt;false&lt;/code&gt; when:</source>
          <target state="translated">The &lt;code&gt;Shape.contains()&lt;/code&gt; method allows a &lt;code&gt;Shape&lt;/code&gt; implementation to conservatively return &lt;code&gt;false&lt;/code&gt; when:</target>
        </trans-unit>
        <trans-unit id="a8defc0421e314237795f3e16a9ee691e29653b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Shape.intersects()&lt;/code&gt; method allows a &lt;code&gt;Shape&lt;/code&gt; implementation to conservatively return &lt;code&gt;true&lt;/code&gt; when:</source>
          <target state="translated">The &lt;code&gt;Shape.intersects()&lt;/code&gt; method allows a &lt;code&gt;Shape&lt;/code&gt; implementation to conservatively return &lt;code&gt;true&lt;/code&gt; when:</target>
        </trans-unit>
        <trans-unit id="f3459b813a9488c53040b4772588afcffbba02ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Shape&lt;/code&gt; interface provides definitions for objects that represent some form of geometric shape.</source>
          <target state="translated">The &lt;code&gt;Shape&lt;/code&gt; interface provides definitions for objects that represent some form of geometric shape.</target>
        </trans-unit>
        <trans-unit id="5a0a83f1111db09d21b3f0665dcf9e3f26c253a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Shape&lt;/code&gt; interface provides definitions for objects that represent some form of geometric shape. The &lt;code&gt;Shape&lt;/code&gt; is described by a &lt;a href=&quot;geom/pathiterator&quot;&gt;&lt;code&gt;PathIterator&lt;/code&gt;&lt;/a&gt; object, which can express the outline of the &lt;code&gt;Shape&lt;/code&gt; as well as a rule for determining how the outline divides the 2D plane into interior and exterior points. Each &lt;code&gt;Shape&lt;/code&gt; object provides callbacks to get the bounding box of the geometry, determine whether points or rectangles lie partly or entirely within the interior of the &lt;code&gt;Shape&lt;/code&gt;, and retrieve a &lt;code&gt;PathIterator&lt;/code&gt; object that describes the trajectory path of the &lt;code&gt;Shape&lt;/code&gt; outline.</source>
          <target state="translated">The &lt;code&gt;Shape&lt;/code&gt; interface provides definitions for objects that represent some form of geometric shape. The &lt;code&gt;Shape&lt;/code&gt; is described by a &lt;a href=&quot;geom/pathiterator&quot;&gt; &lt;code&gt;PathIterator&lt;/code&gt; &lt;/a&gt; object, which can express the outline of the &lt;code&gt;Shape&lt;/code&gt; as well as a rule for determining how the outline divides the 2D plane into interior and exterior points. Each &lt;code&gt;Shape&lt;/code&gt; object provides callbacks to get the bounding box of the geometry, determine whether points or rectangles lie partly or entirely within the interior of the &lt;code&gt;Shape&lt;/code&gt; , and retrieve a &lt;code&gt;PathIterator&lt;/code&gt; object that describes the trajectory path of the &lt;code&gt;Shape&lt;/code&gt; outline.</target>
        </trans-unit>
        <trans-unit id="91cb94f76bb487d7d5e8cf2114b6bb48e6030390" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Shape&lt;/code&gt; is transformed from user space to device space using the current &lt;code&gt;Transform&lt;/code&gt; in the &lt;code&gt;Graphics2D&lt;/code&gt; context.</source>
          <target state="translated">The &lt;code&gt;Shape&lt;/code&gt; is transformed from user space to device space using the current &lt;code&gt;Transform&lt;/code&gt; in the &lt;code&gt;Graphics2D&lt;/code&gt; context.</target>
        </trans-unit>
        <trans-unit id="d9ff50c0bd145a3782f8a408ac09f816b6f9f1af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt; class is an implementation of &lt;a href=&quot;graphicattribute&quot;&gt;&lt;code&gt;GraphicAttribute&lt;/code&gt;&lt;/a&gt; that draws shapes in a &lt;a href=&quot;textlayout&quot;&gt;&lt;code&gt;TextLayout&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The &lt;code&gt;ShapeGraphicAttribute&lt;/code&gt; class is an implementation of &lt;a href=&quot;graphicattribute&quot;&gt; &lt;code&gt;GraphicAttribute&lt;/code&gt; &lt;/a&gt; that draws shapes in a &lt;a href=&quot;textlayout&quot;&gt; &lt;code&gt;TextLayout&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="373802f5789bc9daaea49a79a19d0057b2e71fa7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SheetCollate&lt;/code&gt; attribute interacts with the &lt;a href=&quot;multipledocumenthandling&quot;&gt;&lt;code&gt;MultipleDocumentHandling&lt;/code&gt;&lt;/a&gt; attribute. The &lt;a href=&quot;multipledocumenthandling&quot;&gt;&lt;code&gt;MultipleDocumentHandling&lt;/code&gt;&lt;/a&gt; attribute describes the collation of entire documents, and the &lt;code&gt;SheetCollate&lt;/code&gt; attribute describes the semantics of collating individual pages within a document.</source>
          <target state="translated">The &lt;code&gt;SheetCollate&lt;/code&gt; attribute interacts with the &lt;a href=&quot;multipledocumenthandling&quot;&gt; &lt;code&gt;MultipleDocumentHandling&lt;/code&gt; &lt;/a&gt; attribute. The &lt;a href=&quot;multipledocumenthandling&quot;&gt; &lt;code&gt;MultipleDocumentHandling&lt;/code&gt; &lt;/a&gt; attribute describes the collation of entire documents, and the &lt;code&gt;SheetCollate&lt;/code&gt; attribute describes the semantics of collating individual pages within a document.</target>
        </trans-unit>
        <trans-unit id="82b5163b0072dd0db2fd3d68224c70635d6db4aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Short&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;
 short&lt;/code&gt; in an object.</source>
          <target state="translated">The &lt;code&gt;Short&lt;/code&gt; class wraps a value of primitive type &lt;code&gt; short&lt;/code&gt; in an object.</target>
        </trans-unit>
        <trans-unit id="4d62b26c182893a6a548e476a18690b63d473252" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Short&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;
 short&lt;/code&gt; in an object. An object of type &lt;code&gt;Short&lt;/code&gt; contains a single field whose type is &lt;code&gt;short&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;Short&lt;/code&gt; class wraps a value of primitive type &lt;code&gt; short&lt;/code&gt; in an object. An object of type &lt;code&gt;Short&lt;/code&gt; contains a single field whose type is &lt;code&gt;short&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61061520eba3a069412253fc6b718281a7764587" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Short&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;short&lt;/code&gt; in an object.</source>
          <target state="translated">&lt;code&gt;Short&lt;/code&gt; クラスは、プリミティブ型の値をラップ &lt;code&gt;short&lt;/code&gt; オブジェクト内を。</target>
        </trans-unit>
        <trans-unit id="5bd6d5314769fa94b169cf6fd6d3a5c0f5803d61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Short&lt;/code&gt; class wraps a value of primitive type &lt;code&gt;short&lt;/code&gt; in an object. An object of type &lt;code&gt;Short&lt;/code&gt; contains a single field whose type is &lt;code&gt;short&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Short&lt;/code&gt; クラスは、プリミティブ型の値をラップ &lt;code&gt;short&lt;/code&gt; オブジェクト内を。 &lt;code&gt;Short&lt;/code&gt; 型のオブジェクトには、 &lt;code&gt;short&lt;/code&gt; 型の単一のフィールドが含まれます。</target>
        </trans-unit>
        <trans-unit id="e78848e4ddc01a11ae115fca5cd98b1816f40ede" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SidesType&lt;/code&gt; instance to use for specifying that consecutive job pages should be printed upon front and back sides of consecutive media sheets, such that the orientation of each pair of pages on the medium would be correct for the reader as if for binding on the long edge.</source>
          <target state="translated">The &lt;code&gt;SidesType&lt;/code&gt; instance to use for specifying that consecutive job pages should be printed upon front and back sides of consecutive media sheets, such that the orientation of each pair of pages on the medium would be correct for the reader as if for binding on the long edge.</target>
        </trans-unit>
        <trans-unit id="55cb688b8746b92ba5f7fe95abd002ba3e7f27dd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SidesType&lt;/code&gt; instance to use for specifying that consecutive job pages should be printed upon front and back sides of consecutive media sheets, such that the orientation of each pair of pages on the medium would be correct for the reader as if for binding on the short edge.</source>
          <target state="translated">The &lt;code&gt;SidesType&lt;/code&gt; instance to use for specifying that consecutive job pages should be printed upon front and back sides of consecutive media sheets, such that the orientation of each pair of pages on the medium would be correct for the reader as if for binding on the short edge.</target>
        </trans-unit>
        <trans-unit id="6c8b634d32bf6d2741e1de3fa5ce509b4fe3413b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SidesType&lt;/code&gt; instance to use for specifying that consecutive job pages should be printed upon the same side of consecutive media sheets.</source>
          <target state="translated">The &lt;code&gt;SidesType&lt;/code&gt; instance to use for specifying that consecutive job pages should be printed upon the same side of consecutive media sheets.</target>
        </trans-unit>
        <trans-unit id="cf5e4c26203f886b6a7a4f1b81f96c02a0a29697" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SignedResultsControl&lt;/code&gt; class might be defined as follows:</source>
          <target state="translated">&lt;code&gt;SignedResultsControl&lt;/code&gt; の次のようにクラスが定義されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="3a917286530fabb04fa41fccacd2711f46f2bddd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleScriptContext&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;SimpleScriptContext&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ca03fd6be029ed8ca889a60a8a508d0a4a1babe2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; class is the</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; のクラスがあります</target>
        </trans-unit>
        <trans-unit id="f454eae06e8c8450f0d9941d0498c44514cf1e53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Boolean&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.Boolean&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="639c3ab3a04fd48b0812edf7c08168f9b2abfe76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Byte&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.Byte&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6779cad3872976416b8715cdc2cae03f34516e84" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Character&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.Character&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="ccc12a9229fa28b212383ee48e5d6d48b5829469" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Double&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.Double&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="3b4dbe56be7eeb7407783a82c785c69757959537" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Float&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.Float&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="950ad58636d59dcea09852f3de50a8b54e4ec126" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Integer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.Integer&lt;/code&gt; で。</target>
        </trans-unit>
        <trans-unit id="38105e6f78986a670b722ab3d041a7ff3901722e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Long&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.Long&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a28cf8d0823e5eefc4a4e7fc0bee61dc5592a17e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Short&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.Short&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="820c357e21a5bd82921b5bccd1f7a3db183c43be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.String&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.String&lt;/code&gt; で。</target>
        </trans-unit>
        <trans-unit id="36b771fc8f2baca3d65ff467300137e5fa46b87f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.lang.Void&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.lang.Void&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6dbd2a7b98eeeeb0df1e9367af1772ffa7a82ff9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.math.BigDecimal&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.math.BigDecimal&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="98c8cbacf6c530dcd5198d36051672cced797c4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.math.BigInteger&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.math.BigInteger&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53ea91ec792b961906f05193441b86fc1c764ce1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;java.util.Date&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;java.util.Date&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b9f782c191b744e88038240ceea9bf9b47ef00d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SimpleType&lt;/code&gt; instance describing values whose Java class name is &lt;code&gt;javax.management.ObjectName&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; の Javaクラス名の値を記述するインスタンスがある &lt;code&gt;javax.management.ObjectName&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5089a0cfc6b78ca8c8064c53b5b247055a7d6437" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Skeleton&lt;/code&gt; interface is used solely by the RMI implementation.</source>
          <target state="translated">The &lt;code&gt;Skeleton&lt;/code&gt; interface is used solely by the RMI implementation.</target>
        </trans-unit>
        <trans-unit id="28d1ffacaa18f666268b6e526fc948c33dc19f19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Socket&lt;/code&gt; class defines convenience methods to set and get several socket options. This class also defines the &lt;a href=&quot;#setOption(java.net.SocketOption,T)&quot;&gt;&lt;code&gt;setOption&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#getOption(java.net.SocketOption)&quot;&gt;&lt;code&gt;getOption&lt;/code&gt;&lt;/a&gt; methods to set and query socket options. A &lt;code&gt;Socket&lt;/code&gt; support the following options:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2f21653116680d7405660374ff050723b7344530" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SocketAddress&lt;/code&gt; that the socket is bound to, or the &lt;code&gt;SocketAddress&lt;/code&gt; representing the loopback address if denied by the security manager, or &lt;code&gt;null&lt;/code&gt; if the channel's socket is not bound</source>
          <target state="translated">&lt;code&gt;SocketAddress&lt;/code&gt; ソケットがバインドされている、または &lt;code&gt;SocketAddress&lt;/code&gt; セキュリティマネージャ、またはによって拒否された場合は、ループバックアドレスを表す &lt;code&gt;null&lt;/code&gt; チャネルのソケットがバインドされていない場合</target>
        </trans-unit>
        <trans-unit id="ffa196c777d84951c5a2d919e8b5f1e36bdc950e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceDataLine&lt;/code&gt; interface provides a method for writing audio data to the data line's buffer. Applications that play or mix audio should write data to the source data line quickly enough to keep the buffer from underflowing (emptying), which could cause discontinuities in the audio that are perceived as clicks. Applications can use the &lt;a href=&quot;dataline#available()&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt; method defined in the &lt;code&gt;DataLine&lt;/code&gt; interface to determine the amount of data currently queued in the data line's buffer. The amount of data which can be written to the buffer without blocking is the difference between the buffer size and the amount of queued data. If the delivery of audio output stops due to underflow, a &lt;a href=&quot;lineevent.type#STOP&quot;&gt;&lt;code&gt;STOP&lt;/code&gt;&lt;/a&gt; event is generated. A &lt;a href=&quot;lineevent.type#START&quot;&gt;&lt;code&gt;START&lt;/code&gt;&lt;/a&gt; event is generated when the audio output resumes.</source>
          <target state="translated">The &lt;code&gt;SourceDataLine&lt;/code&gt; interface provides a method for writing audio data to the data line's buffer. Applications that play or mix audio should write data to the source data line quickly enough to keep the buffer from underflowing (emptying), which could cause discontinuities in the audio that are perceived as clicks. Applications can use the &lt;a href=&quot;dataline#available()&quot;&gt; &lt;code&gt;available&lt;/code&gt; &lt;/a&gt; method defined in the &lt;code&gt;DataLine&lt;/code&gt; interface to determine the amount of data currently queued in the data line's buffer. The amount of data which can be written to the buffer without blocking is the difference between the buffer size and the amount of queued data. If the delivery of audio output stops due to underflow, a &lt;a href=&quot;lineevent.type#STOP&quot;&gt; &lt;code&gt;STOP&lt;/code&gt; &lt;/a&gt; event is generated. A &lt;a href=&quot;lineevent.type#START&quot;&gt; &lt;code&gt;START&lt;/code&gt; &lt;/a&gt; event is generated when the audio output resumes.</target>
        </trans-unit>
        <trans-unit id="18e018252e244e834ac16d7592161dec68491d6c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SourceDataLine&lt;/code&gt; interface provides a method for writing audio data to the data line's buffer. Applications that play or mix audio should write data to the source data line quickly enough to keep the buffer from underflowing (emptying), which could cause discontinuities in the audio that are perceived as clicks. Applications can use the &lt;code&gt;&lt;a href=&quot;dataline#available--&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; method defined in the &lt;code&gt;DataLine&lt;/code&gt; interface to determine the amount of data currently queued in the data line's buffer. The amount of data which can be written to the buffer without blocking is the difference between the buffer size and the amount of queued data. If the delivery of audio output stops due to underflow, a &lt;code&gt;&lt;a href=&quot;lineevent.type#STOP&quot;&gt;&lt;code&gt;STOP&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; event is generated. A &lt;code&gt;&lt;a href=&quot;lineevent.type#START&quot;&gt;&lt;code&gt;START&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; event is generated when the audio output resumes.</source>
          <target state="translated">&lt;code&gt;SourceDataLine&lt;/code&gt; インターフェースは、データラインのバッファにオーディオデータを書き込むための方法を提供します。オーディオを再生またはミキシングするアプリケーションは、バッファーがアンダーフロー（空になる）しないように十分な速さでソースデータラインにデータを書き込む必要があります。アプリケーションは、 &lt;code&gt;DataLine&lt;/code&gt; インターフェースで定義された &lt;code&gt;&lt;a href=&quot;dataline#available--&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; メソッドを使用して、データラインのバッファーに現在キューイングされているデータの量を判断できます。ブロックせずにバッファに書き込むことができるデータの量は、バッファサイズとキューに入れられたデータの量の差です。アンダーフローが原因でオーディオ出力の配信が停止した場合、 &lt;code&gt;&lt;a href=&quot;lineevent.type#STOP&quot;&gt;&lt;code&gt;STOP&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; イベントが生成されます。 A &lt;code&gt;&lt;a href=&quot;lineevent.type#START&quot;&gt;&lt;code&gt;START&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; イベントは、オーディオ出力が再開したときに生成されます。</target>
        </trans-unit>
        <trans-unit id="bf9d261cb6bf1230f6b0ef1139ddd997740f585e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SplashScreen&lt;/code&gt; class provides the API for controlling the splash screen. This class may be used to close the splash screen, change the splash screen image, get the splash screen native window position/size, and paint in the splash screen. It cannot be used to create the splash screen. You should use the options provided by the Java implementation for that.</source>
          <target state="translated">The &lt;code&gt;SplashScreen&lt;/code&gt; class provides the API for controlling the splash screen. This class may be used to close the splash screen, change the splash screen image, get the splash screen native window position/size, and paint in the splash screen. It cannot be used to create the splash screen. You should use the options provided by the Java implementation for that.</target>
        </trans-unit>
        <trans-unit id="7d6c5c0e9a62febf84bbb9141ee81024ed231a73" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; additionally reports &lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; はさらに報告&lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a5cd94ecb80a03490b99bcd80e701c14fac87925" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; additionally reports &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt; and implements &lt;code&gt;trySplit&lt;/code&gt; to permit limited parallelism..</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; はさらに報告&lt;a href=&quot;spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; &lt;/a&gt;と道具が &lt;code&gt;trySplit&lt;/code&gt; 限られた並列処理を可能にするために、..</target>
        </trans-unit>
        <trans-unit id="af784776c0cdc3b45691af7e034f88ace154b36b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; implements &lt;code&gt;trySplit&lt;/code&gt; to permit limited parallelism.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は実装 &lt;code&gt;trySplit&lt;/code&gt; を制限された並列処理を可能とします。</target>
        </trans-unit>
        <trans-unit id="bc4bc484d5f7374b739600d18f54719d380be19e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#CONCURRENT&quot;&gt;&lt;code&gt;Spliterator.CONCURRENT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#SORTED&quot;&gt;&lt;code&gt;Spliterator.SORTED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;, with an encounter order that is ascending order. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;../spliterator#CONCURRENT&quot;&gt; &lt;code&gt;Spliterator.CONCURRENT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../spliterator#SORTED&quot;&gt; &lt;code&gt;Spliterator.SORTED&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; を&lt;/a&gt;昇順された出会いのために、。オーバーライドする実装は、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="f2950b171471656d176973c0cdbe156c00f2950c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#CONCURRENT&quot;&gt;&lt;code&gt;Spliterator.CONCURRENT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;../spliterator#CONCURRENT&quot;&gt; &lt;code&gt;Spliterator.CONCURRENT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f29dd54a6792c7ed4529600d96348a75bdd9555a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;../spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; を&lt;/a&gt;。実装では、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="d956efee01ea55ce995f06c420101ace333173f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#IMMUTABLE&quot;&gt;&lt;code&gt;Spliterator.IMMUTABLE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;../spliterator#IMMUTABLE&quot;&gt; &lt;code&gt;Spliterator.IMMUTABLE&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e199c4eef228c77de88efe1878bd4a7a2d489af1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#IMMUTABLE&quot;&gt;&lt;code&gt;Spliterator.IMMUTABLE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;../spliterator#IMMUTABLE&quot;&gt; &lt;code&gt;Spliterator.IMMUTABLE&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="cbd59fa14ea73f85c3995572f64444c99c11f1eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;../spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;../spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c1e52439eecc198c689029f966c5a01b29d70971" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SORTED&quot;&gt;&lt;code&gt;Spliterator.SORTED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;spliterator#SORTED&quot;&gt; &lt;code&gt;Spliterator.SORTED&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; を&lt;/a&gt;。実装では、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="a468b87aa57a000d104e16ad1ebfc71127bed7dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; を&lt;/a&gt;。実装では、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="6ebf9e7f0b30959249ec16fdfe821371d93a4d56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; を&lt;/a&gt;。オーバーライドする実装は、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="5eb4148ceff758d730c061aadb07b3dfc29badab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; を&lt;/a&gt;。実装では、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="6117d3f9be68af61e863fb3ac62f3f48f2b55bd5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; を&lt;/a&gt;。オーバーライドする実装は、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="365bad875f0605d7a3f88de21373c4b2c02e8b6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SORTED&quot;&gt;&lt;code&gt;Spliterator.SORTED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;spliterator#SORTED&quot;&gt; &lt;code&gt;Spliterator.SORTED&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; を&lt;/a&gt;。オーバーライドする実装は、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="c76f2bcfdf2668373b751457d6ab6afa52733599" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#DISTINCT&quot;&gt;&lt;code&gt;Spliterator.DISTINCT&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;ORDERED&lt;/code&gt;. Implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;spliterator#DISTINCT&quot;&gt; &lt;code&gt;Spliterator.DISTINCT&lt;/code&gt; &lt;/a&gt;、および &lt;code&gt;ORDERED&lt;/code&gt; を。実装では、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="56ca63602e1e9a18ab8f45fd2c61e5f3e26c4da5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; を&lt;/a&gt;。オーバーライドする実装は、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="b7a7b7355ffd0c2f2072bfc12a5dfa9d5724f300" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;spliterator#NONNULL&quot;&gt;&lt;code&gt;Spliterator.NONNULL&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;spliterator#NONNULL&quot;&gt; &lt;code&gt;Spliterator.NONNULL&lt;/code&gt; を&lt;/a&gt;。オーバーライドする実装は、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="69d1d467a5fec847db2c8830bffb8575def22c59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spliterator&lt;/code&gt; reports &lt;a href=&quot;spliterator#SIZED&quot;&gt;&lt;code&gt;Spliterator.SIZED&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;spliterator#ORDERED&quot;&gt;&lt;code&gt;Spliterator.ORDERED&lt;/code&gt;&lt;/a&gt;. Overriding implementations should document the reporting of additional characteristic values.</source>
          <target state="translated">&lt;code&gt;Spliterator&lt;/code&gt; は報告&lt;a href=&quot;spliterator#SIZED&quot;&gt; &lt;code&gt;Spliterator.SIZED&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;spliterator#ORDERED&quot;&gt; &lt;code&gt;Spliterator.ORDERED&lt;/code&gt; を&lt;/a&gt;。オーバーライドする実装は、追加の特性値の報告を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="6b2d2eb7eec8f743e4849d1097ca59c6f055d626" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Spring&lt;/code&gt; object representing each constraint has a minimum, preferred, maximum, and current value. The current value of the spring is somewhere between the minimum and maximum values, according to the formula given in the &lt;a href=&quot;spring#sum(javax.swing.Spring,javax.swing.Spring)&quot;&gt;&lt;code&gt;Spring.sum(javax.swing.Spring, javax.swing.Spring)&lt;/code&gt;&lt;/a&gt; method description. When the minimum, preferred, and maximum values are the same, the current value is always equal to them; this inflexible spring is called a &lt;em&gt;strut&lt;/em&gt;. You can create struts using the factory method &lt;a href=&quot;spring#constant(int)&quot;&gt;&lt;code&gt;Spring.constant(int)&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;Spring&lt;/code&gt; class also provides factory methods for creating other kinds of springs, including springs that depend on other springs.</source>
          <target state="translated">The &lt;code&gt;Spring&lt;/code&gt; object representing each constraint has a minimum, preferred, maximum, and current value. The current value of the spring is somewhere between the minimum and maximum values, according to the formula given in the &lt;a href=&quot;spring#sum(javax.swing.Spring,javax.swing.Spring)&quot;&gt; &lt;code&gt;Spring.sum(javax.swing.Spring, javax.swing.Spring)&lt;/code&gt; &lt;/a&gt; method description. When the minimum, preferred, and maximum values are the same, the current value is always equal to them; this inflexible spring is called a &lt;em&gt;strut&lt;/em&gt;. You can create struts using the factory method &lt;a href=&quot;spring#constant(int)&quot;&gt; &lt;code&gt;Spring.constant(int)&lt;/code&gt; &lt;/a&gt;. The &lt;code&gt;Spring&lt;/code&gt; class also provides factory methods for creating other kinds of springs, including springs that depend on other springs.</target>
        </trans-unit>
        <trans-unit id="a22bed6089a698314bd570d8dfea84ff3886d8de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Stack&lt;/code&gt; class represents a last-in-first-out (LIFO) stack of objects.</source>
          <target state="translated">&lt;code&gt;Stack&lt;/code&gt; クラスは、オブジェクトの後入れ先出し（LIFO）スタックを表しています。</target>
        </trans-unit>
        <trans-unit id="725a4ea6b7a05d02133053cfe135e8b021c0e333" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Stack&lt;/code&gt; class represents a last-in-first-out (LIFO) stack of objects. It extends class &lt;code&gt;Vector&lt;/code&gt; with five operations that allow a vector to be treated as a stack. The usual &lt;code&gt;push&lt;/code&gt; and &lt;code&gt;pop&lt;/code&gt; operations are provided, as well as a method to &lt;code&gt;peek&lt;/code&gt; at the top item on the stack, a method to test for whether the stack is &lt;code&gt;empty&lt;/code&gt;, and a method to &lt;code&gt;search&lt;/code&gt; the stack for an item and discover how far it is from the top.</source>
          <target state="translated">&lt;code&gt;Stack&lt;/code&gt; クラスは、オブジェクトの後入れ先出し（LIFO）スタックを表しています。これは、 &lt;code&gt;Vector&lt;/code&gt; をスタックとして扱うことができる5つの操作でVectorクラスを拡張します。通常の &lt;code&gt;push&lt;/code&gt; 操作と &lt;code&gt;pop&lt;/code&gt; 操作に加えて、スタックの一番上の項目を &lt;code&gt;peek&lt;/code&gt; 方法、スタックが &lt;code&gt;empty&lt;/code&gt; どうかをテストする方法、スタックを &lt;code&gt;search&lt;/code&gt; して項目の距離を調べる方法が提供されます上からです。</target>
        </trans-unit>
        <trans-unit id="fb03e73b86b7150e44b2730be4c2f42a308c7705" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StackFrame&lt;/code&gt; stream will be closed when this method returns. When a closed &lt;code&gt;Stream&amp;lt;StackFrame&amp;gt;&lt;/code&gt; object is reused, &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.</source>
          <target state="translated">The &lt;code&gt;StackFrame&lt;/code&gt; stream will be closed when this method returns. When a closed &lt;code&gt;Stream&amp;lt;StackFrame&amp;gt;&lt;/code&gt; object is reused, &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.</target>
        </trans-unit>
        <trans-unit id="69d125feb060298f65a1bd48fbc45ef5e7d91c39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Statement.setQueryTimeout()&lt;/code&gt; timeout value is independent of the timeout value specified in &lt;code&gt;setNetworkTimeout&lt;/code&gt;. If the query timeout expires before the network timeout then the statement execution will be canceled. If the network is still active the result will be that both the statement and connection are still usable. However if the network timeout expires before the query timeout or if the statement timeout fails due to network problems, the connection will be marked as closed, any resources held by the connection will be released and both the connection and statement will be unusable.</source>
          <target state="translated">The &lt;code&gt;Statement.setQueryTimeout()&lt;/code&gt; timeout value is independent of the timeout value specified in &lt;code&gt;setNetworkTimeout&lt;/code&gt; . If the query timeout expires before the network timeout then the statement execution will be canceled. If the network is still active the result will be that both the statement and connection are still usable. However if the network timeout expires before the query timeout or if the statement timeout fails due to network problems, the connection will be marked as closed, any resources held by the connection will be released and both the connection and statement will be unusable.</target>
        </trans-unit>
        <trans-unit id="f90f5bcdca074f31338e37b40ab96797b81c1b8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Status&lt;/code&gt; changes as the state changes. For example, creation of another snippet with &lt;a href=&quot;jshell#eval(java.lang.String)&quot;&gt;&lt;code&gt;eval&lt;/code&gt;&lt;/a&gt; may resolve dependencies of this Snippet (or invalidate those dependencies), or &lt;a href=&quot;#OVERWRITTEN&quot;&gt;overwrite&lt;/a&gt; this Snippet changing its &lt;code&gt;Status&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1390697c89353b590988a85571b01944397a5934" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Stream&lt;/code&gt; describing the content of the directory</source>
          <target state="translated">&lt;code&gt;Stream&lt;/code&gt; ディレクトリの内容を記述する</target>
        </trans-unit>
        <trans-unit id="c78c42072e63ca70c7ecefe4c83c75776bdbcfbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StreamHandler&lt;/code&gt; first checks if there is an &lt;code&gt;OutputStream&lt;/code&gt; and if the given &lt;code&gt;LogRecord&lt;/code&gt; has at least the required log level. If not it silently returns. If so, it calls any associated &lt;code&gt;Filter&lt;/code&gt; to check if the record should be published. If so, it calls its &lt;code&gt;Formatter&lt;/code&gt; to format the record and then writes the result to the current output stream.</source>
          <target state="translated">&lt;code&gt;StreamHandler&lt;/code&gt; は最初にチェックがある場合 &lt;code&gt;OutputStream&lt;/code&gt; と与えられた場合 &lt;code&gt;LogRecord&lt;/code&gt; が少なくとも必要なログレベルを有します。そうでない場合は、静かに戻ります。その場合は、関連付けられている &lt;code&gt;Filter&lt;/code&gt; を呼び出して、レコードを公開する必要があるかどうかを確認します。その場合、 &lt;code&gt;Formatter&lt;/code&gt; を呼び出してレコードをフォーマットし、結果を現在の出力ストリームに書き込みます。</target>
        </trans-unit>
        <trans-unit id="e6a8fe0d59891f6c0cc5fc356448e863867d876b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StreamTokenizer&lt;/code&gt; class takes an input stream and parses it into &quot;tokens&quot;, allowing the tokens to be read one at a time.</source>
          <target state="translated">&lt;code&gt;StreamTokenizer&lt;/code&gt; のクラスは、入力ストリームを取り、「トークン」にそれを解析し、トークンは一度に読み込み一つであることができます。</target>
        </trans-unit>
        <trans-unit id="90790abff6838151ec89277ddea3efa96bd3fd1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StreamTokenizer&lt;/code&gt; class takes an input stream and parses it into &quot;tokens&quot;, allowing the tokens to be read one at a time. The parsing process is controlled by a table and a number of flags that can be set to various states. The stream tokenizer can recognize identifiers, numbers, quoted strings, and various comment styles.</source>
          <target state="translated">&lt;code&gt;StreamTokenizer&lt;/code&gt; のクラスは、入力ストリームを取り、「トークン」にそれを解析し、トークンは一度に読み込み一つであることができます。解析プロセスは、テーブルと、さまざまな状態に設定できるいくつかのフラグによって制御されます。ストリームトークナイザーは、識別子、数字、引用符付き文字列、およびさまざまなコメントスタイルを認識できます。</target>
        </trans-unit>
        <trans-unit id="cace10574531d43fd7350c7bbe816d7c0693ff93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; class provides methods for dealing with Unicode code points (i.e., characters), in addition to those for dealing with Unicode code units (i.e., &lt;code&gt;char&lt;/code&gt; values).</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; クラスは、Unicodeコード単位（すなわち、に対処するためのものに加えて、Unicodeコードポイント（すなわち、文字）を扱うための方法を提供 &lt;code&gt;char&lt;/code&gt; 値）。</target>
        </trans-unit>
        <trans-unit id="0d78a761f2944c5a20f9f6d6f41f724d053b8054" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; class represents character strings.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; クラスは文字列を表します。</target>
        </trans-unit>
        <trans-unit id="cfaf0978cdd4182db5fdb416c1be5b9a10ec7e9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; class represents character strings. All string literals in Java programs, such as &lt;code&gt;&quot;abc&quot;&lt;/code&gt;, are implemented as instances of this class.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; クラスは文字列を表します。 &lt;code&gt;&quot;abc&quot;&lt;/code&gt; などのJavaプログラムのすべての文字列リテラルは、このクラスのインスタンスとして実装されます。</target>
        </trans-unit>
        <trans-unit id="bf9e88bafccff9dfb01a4ed99ca09de99632708e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; constructor, on the other hand, is perfectly predictable: writing &lt;code&gt;new BigDecimal(&quot;0.1&quot;)&lt;/code&gt; creates a &lt;code&gt;BigDecimal&lt;/code&gt; which is</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; コンストラクタは、他の一方で、完全に予測可能である：書き込み &lt;code&gt;new BigDecimal(&quot;0.1&quot;)&lt;/code&gt; 作成する &lt;code&gt;BigDecimal&lt;/code&gt; しています</target>
        </trans-unit>
        <trans-unit id="eba1c9ced718a6fccfc3b47f5eccf166337b2690" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; constructor, on the other hand, is perfectly predictable: writing &lt;code&gt;new BigDecimal(&quot;0.1&quot;)&lt;/code&gt; creates a &lt;code&gt;BigDecimal&lt;/code&gt; which is &lt;em&gt;exactly&lt;/em&gt; equal to 0.1, as one would expect. Therefore, it is generally recommended that the &lt;a href=&quot;#%3Cinit%3E(java.lang.String)&quot;&gt;String constructor&lt;/a&gt; be used in preference to this one.</source>
          <target state="translated">The &lt;code&gt;String&lt;/code&gt; constructor, on the other hand, is perfectly predictable: writing &lt;code&gt;new BigDecimal(&quot;0.1&quot;)&lt;/code&gt; creates a &lt;code&gt;BigDecimal&lt;/code&gt; which is &lt;em&gt;exactly&lt;/em&gt; equal to 0.1, as one would expect. Therefore, it is generally recommended that the &lt;a href=&quot;#%3Cinit%3E(java.lang.String)&quot;&gt;String constructor&lt;/a&gt; be used in preference to this one.</target>
        </trans-unit>
        <trans-unit id="3e9a1f48716d930234c4028b885dfc7d2e82b1bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; must specify a single paragraph of text, because an entire paragraph is required for the bidirectional algorithm.</source>
          <target state="translated">The &lt;code&gt;String&lt;/code&gt; must specify a single paragraph of text, because an entire paragraph is required for the bidirectional algorithm.</target>
        </trans-unit>
        <trans-unit id="c55bf2e26b50af06c11b42ae679e92277246f4b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; return type is a convenience for retrieving the character data from a text node, attribute node, comment node, or processing-instruction node. When used on an element node, the value of the child text nodes is returned.</source>
          <target state="translated">The &lt;code&gt;String&lt;/code&gt; return type is a convenience for retrieving the character data from a text node, attribute node, comment node, or processing-instruction node. When used on an element node, the value of the child text nodes is returned.</target>
        </trans-unit>
        <trans-unit id="956bd9122850fa6f6d4d702653c39ab65927afc3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;String&lt;/code&gt; that is the result of evaluating the expression and converting the result to a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;String&lt;/code&gt; that is the result of evaluating the expression and converting the result to a &lt;code&gt;String&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="823b29249d90cf89580a63e8a119c51fe8f500bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Stroke&lt;/code&gt; interface allows a &lt;a href=&quot;graphics2d&quot;&gt;&lt;code&gt;Graphics2D&lt;/code&gt;&lt;/a&gt; object to obtain a &lt;a href=&quot;shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; that is the decorated outline, or stylistic representation of the outline, of the specified &lt;code&gt;Shape&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;Stroke&lt;/code&gt; interface allows a &lt;a href=&quot;graphics2d&quot;&gt; &lt;code&gt;Graphics2D&lt;/code&gt; &lt;/a&gt; object to obtain a &lt;a href=&quot;shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt; that is the decorated outline, or stylistic representation of the outline, of the specified &lt;code&gt;Shape&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="83bcf3d2b0817137e4811b4de84a7b0136064065" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Stroke&lt;/code&gt; interface allows a &lt;a href=&quot;graphics2d&quot;&gt;&lt;code&gt;Graphics2D&lt;/code&gt;&lt;/a&gt; object to obtain a &lt;a href=&quot;shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; that is the decorated outline, or stylistic representation of the outline, of the specified &lt;code&gt;Shape&lt;/code&gt;. Stroking a &lt;code&gt;Shape&lt;/code&gt; is like tracing its outline with a marking pen of the appropriate size and shape. The area where the pen would place ink is the area enclosed by the outline &lt;code&gt;Shape&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;Stroke&lt;/code&gt; interface allows a &lt;a href=&quot;graphics2d&quot;&gt; &lt;code&gt;Graphics2D&lt;/code&gt; &lt;/a&gt; object to obtain a &lt;a href=&quot;shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt; that is the decorated outline, or stylistic representation of the outline, of the specified &lt;code&gt;Shape&lt;/code&gt; . Stroking a &lt;code&gt;Shape&lt;/code&gt; is like tracing its outline with a marking pen of the appropriate size and shape. The area where the pen would place ink is the area enclosed by the outline &lt;code&gt;Shape&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b4cc02f2e0965ef6213178d0907daba1e038b4ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StyleSheet&lt;/code&gt; interface is the abstract base interface for any type of style sheet.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0c250e7a17904fac5445cb3af01717a1efd8fe52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StyleSheet&lt;/code&gt; interface is the abstract base interface for any type of style sheet. It represents a single style sheet associated with a structured document. In HTML, the StyleSheet interface represents either an external style sheet, included via the HTML LINK element, or an inline STYLE element. In XML, this interface represents an external style sheet, included via a style sheet processing instruction.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b77d4eca45f653c379f408edadc1d1786bb45214" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StyleSheetList&lt;/code&gt; interface provides the abstraction of an ordered collection of style sheets.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3321e8f0312f5858bda4ed64210f57798ee8885f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SyncFactory&lt;/code&gt; checks this file and registers the &lt;code&gt;SyncProvider&lt;/code&gt; implementations that it contains. A developer or vendor can add other implementations to this file. For example, here is a possible addition:</source>
          <target state="translated">The &lt;code&gt;SyncFactory&lt;/code&gt; checks this file and registers the &lt;code&gt;SyncProvider&lt;/code&gt; implementations that it contains. A developer or vendor can add other implementations to this file. For example, here is a possible addition:</target>
        </trans-unit>
        <trans-unit id="1945e6ff1ad237ada972e0b52b7f53a60d373ca4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SyncFactory&lt;/code&gt; class provides accessor methods to assist applications in determining which synchronization providers are currently registered with the &lt;code&gt;SyncFactory&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;SyncFactory&lt;/code&gt; class provides accessor methods to assist applications in determining which synchronization providers are currently registered with the &lt;code&gt;SyncFactory&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="51bf79b59a85a53ec81dac29f70bcc5fab44290e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SyncFactory&lt;/code&gt; class provides an internal registry of available synchronization provider implementations (&lt;code&gt;SyncProvider&lt;/code&gt; objects). This registry may be queried to determine which synchronization providers are available. The following line of code gets an enumeration of the providers currently registered.</source>
          <target state="translated">The &lt;code&gt;SyncFactory&lt;/code&gt; class provides an internal registry of available synchronization provider implementations ( &lt;code&gt;SyncProvider&lt;/code&gt; objects). This registry may be queried to determine which synchronization providers are available. The following line of code gets an enumeration of the providers currently registered.</target>
        </trans-unit>
        <trans-unit id="cf8f6210713c173acff250f3a77234c48dec109c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SyncFactory&lt;/code&gt; generates a requested &lt;code&gt;SyncProvider&lt;/code&gt; object if the provider has been correctly registered. The following policies are adhered to when either a disconnected &lt;code&gt;RowSet&lt;/code&gt; object is instantiated with a specified &lt;code&gt;SyncProvider&lt;/code&gt; implementation or is reconfigured at runtime with an alternative &lt;code&gt;SyncProvider&lt;/code&gt; object.</source>
          <target state="translated">The &lt;code&gt;SyncFactory&lt;/code&gt; generates a requested &lt;code&gt;SyncProvider&lt;/code&gt; object if the provider has been correctly registered. The following policies are adhered to when either a disconnected &lt;code&gt;RowSet&lt;/code&gt; object is instantiated with a specified &lt;code&gt;SyncProvider&lt;/code&gt; implementation or is reconfigured at runtime with an alternative &lt;code&gt;SyncProvider&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="219eedc9af737d15c74f22846580254e66b4f7f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SyncProvider&lt;/code&gt; class provides three sets of constants that are used as return values or parameters for &lt;code&gt;SyncProvider&lt;/code&gt; methods. &lt;code&gt;SyncProvider&lt;/code&gt; objects may be implemented to perform synchronization between a &lt;code&gt;RowSet&lt;/code&gt; object and its underlying data source with varying degrees of care. The first group of constants indicate how synchronization is handled. For example, &lt;code&gt;GRADE_NONE&lt;/code&gt; indicates that a &lt;code&gt;SyncProvider&lt;/code&gt; object will not take any care to see what data is valid and will simply write the &lt;code&gt;RowSet&lt;/code&gt; data to the data source. &lt;code&gt;GRADE_MODIFIED_AT_COMMIT&lt;/code&gt; indicates that the provider will check only modified data for validity. Other grades check all data for validity or set locks when data is modified or loaded.</source>
          <target state="translated">The &lt;code&gt;SyncProvider&lt;/code&gt; class provides three sets of constants that are used as return values or parameters for &lt;code&gt;SyncProvider&lt;/code&gt; methods. &lt;code&gt;SyncProvider&lt;/code&gt; objects may be implemented to perform synchronization between a &lt;code&gt;RowSet&lt;/code&gt; object and its underlying data source with varying degrees of care. The first group of constants indicate how synchronization is handled. For example, &lt;code&gt;GRADE_NONE&lt;/code&gt; indicates that a &lt;code&gt;SyncProvider&lt;/code&gt; object will not take any care to see what data is valid and will simply write the &lt;code&gt;RowSet&lt;/code&gt; data to the data source. &lt;code&gt;GRADE_MODIFIED_AT_COMMIT&lt;/code&gt; indicates that the provider will check only modified data for validity. Other grades check all data for validity or set locks when data is modified or loaded.</target>
        </trans-unit>
        <trans-unit id="c5a4913f6da797e9bb309247a92d563053d59bb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SyncProvider&lt;/code&gt; interface defines four constants describing states that may occur. Three constants describe the type of operation (update, delete, or insert) that a &lt;code&gt;RowSet&lt;/code&gt; object was attempting to perform when a conflict was discovered, and the fourth indicates that there is no conflict. These constants are the possible return values when a &lt;code&gt;SyncResolver&lt;/code&gt; object calls the method &lt;code&gt;getStatus&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;SyncProvider&lt;/code&gt; interface defines four constants describing states that may occur. Three constants describe the type of operation (update, delete, or insert) that a &lt;code&gt;RowSet&lt;/code&gt; object was attempting to perform when a conflict was discovered, and the fourth indicates that there is no conflict. These constants are the possible return values when a &lt;code&gt;SyncResolver&lt;/code&gt; object calls the method &lt;code&gt;getStatus&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="eda1e4a93fcf2aa13352f9f34dfd369c2d588252" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SyncResolver&lt;/code&gt; interface also provides methods for doing the following:</source>
          <target state="translated">The &lt;code&gt;SyncResolver&lt;/code&gt; interface also provides methods for doing the following:</target>
        </trans-unit>
        <trans-unit id="b7a04ac54f8fd8b47f995cd926d12c087226c4ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SyncResolver&lt;/code&gt; object may be used to examine and resolve each conflict in a row and then go to the next row with a conflict to repeat the procedure.</source>
          <target state="translated">The &lt;code&gt;SyncResolver&lt;/code&gt; object may be used to examine and resolve each conflict in a row and then go to the next row with a conflict to repeat the procedure.</target>
        </trans-unit>
        <trans-unit id="ce0b1740d93a2f7b9c8861c54d628a73ff28cb12" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Synthesizer&lt;/code&gt; interface includes methods for loading and unloading instruments from soundbanks. An instrument is a specification for synthesizing a certain type of sound, whether that sound emulates a traditional instrument or is some kind of sound effect or other imaginary sound. A soundbank is a collection of instruments, organized by bank and program number (via the instrument's &lt;code&gt;Patch&lt;/code&gt; object). Different &lt;code&gt;Synthesizer&lt;/code&gt; classes might implement different sound-synthesis techniques, meaning that some instruments and not others might be compatible with a given synthesizer. Also, synthesizers may have a limited amount of memory for instruments, meaning that not every soundbank and instrument can be used by every synthesizer, even if the synthesis technique is compatible. To see whether the instruments from a certain soundbank can be played by a given synthesizer, invoke the &lt;a href=&quot;#isSoundbankSupported(javax.sound.midi.Soundbank)&quot;&gt;&lt;code&gt;isSoundbankSupported&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;Synthesizer&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;Synthesizer&lt;/code&gt; interface includes methods for loading and unloading instruments from soundbanks. An instrument is a specification for synthesizing a certain type of sound, whether that sound emulates a traditional instrument or is some kind of sound effect or other imaginary sound. A soundbank is a collection of instruments, organized by bank and program number (via the instrument's &lt;code&gt;Patch&lt;/code&gt; object). Different &lt;code&gt;Synthesizer&lt;/code&gt; classes might implement different sound-synthesis techniques, meaning that some instruments and not others might be compatible with a given synthesizer. Also, synthesizers may have a limited amount of memory for instruments, meaning that not every soundbank and instrument can be used by every synthesizer, even if the synthesis technique is compatible. To see whether the instruments from a certain soundbank can be played by a given synthesizer, invoke the &lt;a href=&quot;#isSoundbankSupported(javax.sound.midi.Soundbank)&quot;&gt; &lt;code&gt;isSoundbankSupported&lt;/code&gt; &lt;/a&gt; method of &lt;code&gt;Synthesizer&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="79d62a9c1d3d1d0435af40a0f1b27c3991ef6251" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Synthesizer&lt;/code&gt; interface includes methods for loading and unloading instruments from soundbanks. An instrument is a specification for synthesizing a certain type of sound, whether that sound emulates a traditional instrument or is some kind of sound effect or other imaginary sound. A soundbank is a collection of instruments, organized by bank and program number (via the instrument's &lt;code&gt;Patch&lt;/code&gt; object). Different &lt;code&gt;Synthesizer&lt;/code&gt; classes might implement different sound-synthesis techniques, meaning that some instruments and not others might be compatible with a given synthesizer. Also, synthesizers may have a limited amount of memory for instruments, meaning that not every soundbank and instrument can be used by every synthesizer, even if the synthesis technique is compatible. To see whether the instruments from a certain soundbank can be played by a given synthesizer, invoke the &lt;a href=&quot;synthesizer#isSoundbankSupported-javax.sound.midi.Soundbank-&quot;&gt;&lt;code&gt;isSoundbankSupported&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;Synthesizer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Synthesizer&lt;/code&gt; インタフェースはサウンドバンクからロードおよびアンロードの機器のための方法を含みます。楽器は、特定の種類の音を合成するための仕様です。その音は、従来の楽器をエミュレートしたり、ある種の効果音やその他の想像上の音であったりします。サウンドバンクは、（楽器の &lt;code&gt;Patch&lt;/code&gt; オブジェクトを介して）バンクとプログラム番号で編成された楽器のコレクションです。別の &lt;code&gt;Synthesizer&lt;/code&gt; クラスは異なるサウンド合成技術を実装する場合があります。つまり、特定のシンセサイザーと互換性のある楽器とそうでない楽器があります。また、シンセサイザのインス​​トゥルメント用のメモリ容量は限られている可能性があります。つまり、合成手法に互換性がある場合でも、すべてのサウンドバンクとインストゥルメントがすべてのシンセサイザで使用できるわけではありません。特定のサウンドバンクから楽器が与えられたシンセサイザーで演奏することが可能かどうかを確認するには、起動&lt;a href=&quot;synthesizer#isSoundbankSupported-javax.sound.midi.Soundbank-&quot;&gt; &lt;code&gt;isSoundbankSupported&lt;/code&gt; の&lt;/a&gt;方法 &lt;code&gt;Synthesizer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cfaf0a0f81bd0eca9825b951309b3216299181ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;System&lt;/code&gt; class contains several useful class fields and methods.</source>
          <target state="translated">&lt;code&gt;System&lt;/code&gt; クラスには有用なクラスフィールドおよびメソッドが含まれています。</target>
        </trans-unit>
        <trans-unit id="2e929acaa33491c9123dc823b9825fd21aa7ba63" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;System&lt;/code&gt; class contains several useful class fields and methods. It cannot be instantiated.</source>
          <target state="translated">&lt;code&gt;System&lt;/code&gt; クラスには有用なクラスフィールドおよびメソッドが含まれています。インスタンス化することはできません。</target>
        </trans-unit>
        <trans-unit id="d62073397ee12d67177fbddcc6b841987af0c0f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;System&lt;/code&gt; class contains several useful class fields and methods. It cannot be instantiated. Among the facilities provided by the &lt;code&gt;System&lt;/code&gt; class are standard input, standard output, and error output streams; access to externally defined properties and environment variables; a means of loading files and libraries; and a utility method for quickly copying a portion of an array.</source>
          <target state="translated">The &lt;code&gt;System&lt;/code&gt; class contains several useful class fields and methods. It cannot be instantiated. Among the facilities provided by the &lt;code&gt;System&lt;/code&gt; class are standard input, standard output, and error output streams; access to externally defined properties and environment variables; a means of loading files and libraries; and a utility method for quickly copying a portion of an array.</target>
        </trans-unit>
        <trans-unit id="71d124decf97343aaf190d7edff308e7f38aff09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SystemTray&lt;/code&gt; class represents the system tray for a desktop.</source>
          <target state="translated">The &lt;code&gt;SystemTray&lt;/code&gt; class represents the system tray for a desktop.</target>
        </trans-unit>
        <trans-unit id="86e2face305fc605953bea15297d20a4c46b82a5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SystemTray&lt;/code&gt; class represents the system tray for a desktop. On Microsoft Windows it is referred to as the &quot;Taskbar Status Area&quot;, on Gnome it is referred to as the &quot;Notification Area&quot;, on KDE it is referred to as the &quot;System Tray&quot;. The system tray is shared by all applications running on the desktop.</source>
          <target state="translated">The &lt;code&gt;SystemTray&lt;/code&gt; class represents the system tray for a desktop. On Microsoft Windows it is referred to as the &quot;Taskbar Status Area&quot;, on Gnome it is referred to as the &quot;Notification Area&quot;, on KDE it is referred to as the &quot;System Tray&quot;. The system tray is shared by all applications running on the desktop.</target>
        </trans-unit>
        <trans-unit id="29f19d736a226155ec6c7bf812e7c0d11e8db7d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SystemTray&lt;/code&gt; may contain one or more &lt;a href=&quot;trayicon&quot;&gt;&lt;code&gt;TrayIcons&lt;/code&gt;&lt;/a&gt;, which are added to the tray using the &lt;a href=&quot;#add(java.awt.TrayIcon)&quot;&gt;&lt;code&gt;add(java.awt.TrayIcon)&lt;/code&gt;&lt;/a&gt; method, and removed when no longer needed, using the &lt;a href=&quot;#remove(java.awt.TrayIcon)&quot;&gt;&lt;code&gt;remove(java.awt.TrayIcon)&lt;/code&gt;&lt;/a&gt;. &lt;code&gt;TrayIcon&lt;/code&gt; consists of an image, a popup menu and a set of associated listeners. Please see the &lt;a href=&quot;trayicon&quot;&gt;&lt;code&gt;TrayIcon&lt;/code&gt;&lt;/a&gt; class for details.</source>
          <target state="translated">The &lt;code&gt;SystemTray&lt;/code&gt; may contain one or more &lt;a href=&quot;trayicon&quot;&gt; &lt;code&gt;TrayIcons&lt;/code&gt; &lt;/a&gt;, which are added to the tray using the &lt;a href=&quot;#add(java.awt.TrayIcon)&quot;&gt; &lt;code&gt;add(java.awt.TrayIcon)&lt;/code&gt; &lt;/a&gt; method, and removed when no longer needed, using the &lt;a href=&quot;#remove(java.awt.TrayIcon)&quot;&gt; &lt;code&gt;remove(java.awt.TrayIcon)&lt;/code&gt; &lt;/a&gt;. &lt;code&gt;TrayIcon&lt;/code&gt; consists of an image, a popup menu and a set of associated listeners. Please see the &lt;a href=&quot;trayicon&quot;&gt; &lt;code&gt;TrayIcon&lt;/code&gt; &lt;/a&gt; class for details.</target>
        </trans-unit>
        <trans-unit id="c47132f451284747470a059592392ae52dd9e141" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SystemTray&lt;/code&gt;'s array of &lt;code&gt;TrayIcon&lt;/code&gt; objects. The array is accessed via the &lt;a href=&quot;#getTrayIcons()&quot;&gt;&lt;code&gt;getTrayIcons()&lt;/code&gt;&lt;/a&gt; method. This property is changed when a tray icon is added to (or removed from) the system tray. For example, this property is changed when the system tray becomes unavailable on the desktop and the tray icons are automatically removed.</source>
          <target state="translated">The &lt;code&gt;SystemTray&lt;/code&gt; 's array of &lt;code&gt;TrayIcon&lt;/code&gt; objects. The array is accessed via the &lt;a href=&quot;#getTrayIcons()&quot;&gt; &lt;code&gt;getTrayIcons()&lt;/code&gt; &lt;/a&gt; method. This property is changed when a tray icon is added to (or removed from) the system tray. For example, this property is changed when the system tray becomes unavailable on the desktop and the tray icons are automatically removed.</target>
        </trans-unit>
        <trans-unit id="041eb452e80c2e1697db1fd8e4bf9a31fea37efe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;THEAD&lt;/code&gt; , &lt;code&gt;TFOOT&lt;/code&gt; , and &lt;code&gt;TBODY&lt;/code&gt; elements.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a06dce3576df2efc44a53e99f5b0156477fc0f70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TIFFTagSet&lt;/code&gt;s associated with this &lt;code&gt;TIFFDirectory&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;TIFFTagSet&lt;/code&gt; s associated with this &lt;code&gt;TIFFDirectory&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="90342a4ec5ebd367ca721e299022f4ba7c4abcba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TYPE_USE&lt;/code&gt; constant includes type declarations and type parameter declarations as a convenience for designers of type checkers which give semantics to annotation types. For example, if the annotation type &lt;code&gt;NonNull&lt;/code&gt; is meta-annotated with &lt;code&gt;@Target(ElementType.TYPE_USE)&lt;/code&gt;, then &lt;code&gt;@NonNull&lt;/code&gt;&lt;code&gt;class C {...}&lt;/code&gt; could be treated by a type checker as indicating that all variables of class &lt;code&gt;C&lt;/code&gt; are non-null, while still allowing variables of other classes to be non-null or not non-null based on whether &lt;code&gt;@NonNull&lt;/code&gt; appears at the variable's declaration.</source>
          <target state="translated">&lt;code&gt;TYPE_USE&lt;/code&gt; の定数は、注釈タイプに意味を与えるタイプチェッカーの設計者にとって利便性の型宣言と型パラメータ宣言を含みます。たとえば、注釈タイプ &lt;code&gt;NonNull&lt;/code&gt; が &lt;code&gt;@Target(ElementType.TYPE_USE)&lt;/code&gt; でメタ注釈されている場合、 &lt;code&gt;@NonNull&lt;/code&gt; &lt;code&gt;class C {...}&lt;/code&gt; はタイプチェッカーによってクラス &lt;code&gt;C&lt;/code&gt; のすべての変数が非nullであることを示すものとして扱うことができます &lt;code&gt;@NonNull&lt;/code&gt; 、変数の宣言に@NonNullが現れるかどうかに基づいて、他のクラスの変数をnull以外またはnull以外にすることができます。</target>
        </trans-unit>
        <trans-unit id="a36f21255ac35c88f64ea122f094b24db294584b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TabbedPane&lt;/code&gt; uses a &lt;code&gt;SingleSelectionModel&lt;/code&gt; to represent the set of tab indices and the currently selected index. If the tab count is greater than 0, then there will always be a selected index, which by default will be initialized to the first tab. If the tab count is 0, then the selected index will be -1.</source>
          <target state="translated">The &lt;code&gt;TabbedPane&lt;/code&gt; uses a &lt;code&gt;SingleSelectionModel&lt;/code&gt; to represent the set of tab indices and the currently selected index. If the tab count is greater than 0, then there will always be a selected index, which by default will be initialized to the first tab. If the tab count is 0, then the selected index will be -1.</target>
        </trans-unit>
        <trans-unit id="aae188cb6fcd8f04afd29ffc5f91ebb63a2bec4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TableCellRenderer&lt;/code&gt; is also responsible for rendering the the cell representing the table's current DnD drop location if it has one. If this renderer cares about rendering the DnD drop location, it should query the table directly to see if the given row and column represent the drop location:</source>
          <target state="translated">The &lt;code&gt;TableCellRenderer&lt;/code&gt; is also responsible for rendering the the cell representing the table's current DnD drop location if it has one. If this renderer cares about rendering the DnD drop location, it should query the table directly to see if the given row and column represent the drop location:</target>
        </trans-unit>
        <trans-unit id="62730552d1826f5457ce3b3a464a101205ca119b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TableColumn&lt;/code&gt; stores the link between the columns in the &lt;code&gt;JTable&lt;/code&gt; and the columns in the &lt;code&gt;TableModel&lt;/code&gt;. The &lt;code&gt;modelIndex&lt;/code&gt; is the column in the &lt;code&gt;TableModel&lt;/code&gt;, which will be queried for the data values for the cells in this column. As the column moves around in the view this &lt;code&gt;modelIndex&lt;/code&gt; does not change.</source>
          <target state="translated">The &lt;code&gt;TableColumn&lt;/code&gt; stores the link between the columns in the &lt;code&gt;JTable&lt;/code&gt; and the columns in the &lt;code&gt;TableModel&lt;/code&gt; . The &lt;code&gt;modelIndex&lt;/code&gt; is the column in the &lt;code&gt;TableModel&lt;/code&gt; , which will be queried for the data values for the cells in this column. As the column moves around in the view this &lt;code&gt;modelIndex&lt;/code&gt; does not change.</target>
        </trans-unit>
        <trans-unit id="513725efac09f3d3ebe41cdd1442b2526eb72e07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TableColumnModel&lt;/code&gt; of the table header.</source>
          <target state="translated">The &lt;code&gt;TableColumnModel&lt;/code&gt; of the table header.</target>
        </trans-unit>
        <trans-unit id="46b630f6f4ada6636db255ceeb6cbab86ddcc1d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TableColumnModel&lt;/code&gt; of the table.</source>
          <target state="translated">The &lt;code&gt;TableColumnModel&lt;/code&gt; of the table.</target>
        </trans-unit>
        <trans-unit id="40e8319f916c9c16cc953beb17d6b51b25096178" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TableHeader&lt;/code&gt; working with the table.</source>
          <target state="translated">The &lt;code&gt;TableHeader&lt;/code&gt; working with the table.</target>
        </trans-unit>
        <trans-unit id="1e1e1d2b9291e006ed2866178f2d5c50aeb49de2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TableModel&lt;/code&gt; interface specifies the methods the &lt;code&gt;JTable&lt;/code&gt; will use to interrogate a tabular data model.</source>
          <target state="translated">The &lt;code&gt;TableModel&lt;/code&gt; interface specifies the methods the &lt;code&gt;JTable&lt;/code&gt; will use to interrogate a tabular data model.</target>
        </trans-unit>
        <trans-unit id="9b297dff16c915aa557f64cbedacf58ef1c27aa6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TableModel&lt;/code&gt; of the table.</source>
          <target state="translated">The &lt;code&gt;TableModel&lt;/code&gt; of the table.</target>
        </trans-unit>
        <trans-unit id="3ef83572b32113beb492c13117cd5dc2ac290774" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TabularData&lt;/code&gt; interface specifies the behavior of a specific type of complex</source>
          <target state="translated">&lt;code&gt;TabularData&lt;/code&gt; インターフェースは、複合体の特定の種類の動作を指定します</target>
        </trans-unit>
        <trans-unit id="7724aaad4c815a2f3d25835048c64655b5a959e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TabularDataSupport&lt;/code&gt; class is the</source>
          <target state="translated">&lt;code&gt;TabularDataSupport&lt;/code&gt; のクラスがあります</target>
        </trans-unit>
        <trans-unit id="d1a581b7f12d575f8065049692b39a4f8b425736" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TabularType&lt;/code&gt; class is the</source>
          <target state="translated">&lt;code&gt;TabularType&lt;/code&gt; でのクラスがあります</target>
        </trans-unit>
        <trans-unit id="085fc399b3650257a22561fd8dbc65d069110b4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TargetDataLine&lt;/code&gt; interface provides a method for reading the captured data from the target data line's buffer. Applications that record audio should read data from the target data line quickly enough to keep the buffer from overflowing, which could cause discontinuities in the captured data that are perceived as clicks. Applications can use the &lt;a href=&quot;dataline#available()&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt; method defined in the &lt;code&gt;DataLine&lt;/code&gt; interface to determine the amount of data currently queued in the data line's buffer. If the buffer does overflow, the oldest queued data is discarded and replaced by new data.</source>
          <target state="translated">The &lt;code&gt;TargetDataLine&lt;/code&gt; interface provides a method for reading the captured data from the target data line's buffer. Applications that record audio should read data from the target data line quickly enough to keep the buffer from overflowing, which could cause discontinuities in the captured data that are perceived as clicks. Applications can use the &lt;a href=&quot;dataline#available()&quot;&gt; &lt;code&gt;available&lt;/code&gt; &lt;/a&gt; method defined in the &lt;code&gt;DataLine&lt;/code&gt; interface to determine the amount of data currently queued in the data line's buffer. If the buffer does overflow, the oldest queued data is discarded and replaced by new data.</target>
        </trans-unit>
        <trans-unit id="2b88d977d84dfecfb709ca75951d725a6ab95a15" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TargetDataLine&lt;/code&gt; interface provides a method for reading the captured data from the target data line's buffer.Applications that record audio should read data from the target data line quickly enough to keep the buffer from overflowing, which could cause discontinuities in the captured data that are perceived as clicks. Applications can use the &lt;code&gt;&lt;a href=&quot;dataline#available--&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; method defined in the &lt;code&gt;DataLine&lt;/code&gt; interface to determine the amount of data currently queued in the data line's buffer. If the buffer does overflow, the oldest queued data is discarded and replaced by new data.</source>
          <target state="translated">&lt;code&gt;TargetDataLine&lt;/code&gt; インタフェースは、レコードの音声が認識されている取得したデータに不連続になる可能性があり、オーバーフローバッファを維持するために十分に迅速にターゲットデータラインからデータを読み込む必要があることをターゲットデータラインのbuffer.Applicationsから取得したデータを読み取るための方法を提供し、クリックとして。アプリケーションは、 &lt;code&gt;DataLine&lt;/code&gt; インターフェースで定義された &lt;code&gt;&lt;a href=&quot;dataline#available--&quot;&gt;&lt;code&gt;available&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; メソッドを使用して、データラインのバッファーに現在キューイングされているデータの量を判断できます。バッファがオーバーフローすると、最も古いキューに入れられたデータが破棄され、新しいデータに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="cd75a99a64bbe9c6e132833f8fb00cfec0994bdb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Taskbar&lt;/code&gt; class allows a Java application to interact with the system task area (taskbar, Dock, etc.).</source>
          <target state="translated">The &lt;code&gt;Taskbar&lt;/code&gt; class allows a Java application to interact with the system task area (taskbar, Dock, etc.).</target>
        </trans-unit>
        <trans-unit id="019ba7c0388427e562540509ea17c83832b3dcd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;OffsetDateTime&lt;/code&gt; using &lt;a href=&quot;#from(java.time.temporal.TemporalAccessor)&quot;&gt;&lt;code&gt;from(TemporalAccessor)&lt;/code&gt;&lt;/a&gt;. If the offset differs between the two date-times, the specified end date-time is normalized to have the same offset as this date-time.</source>
          <target state="translated">The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;OffsetDateTime&lt;/code&gt; using &lt;a href=&quot;#from(java.time.temporal.TemporalAccessor)&quot;&gt; &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; &lt;/a&gt;. If the offset differs between the two date-times, the specified end date-time is normalized to have the same offset as this date-time.</target>
        </trans-unit>
        <trans-unit id="3e0b1acfd21178efdd1911606a8891da6c388408" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;OffsetDateTime&lt;/code&gt; using &lt;a href=&quot;offsetdatetime#from-java.time.temporal.TemporalAccessor-&quot;&gt;&lt;code&gt;from(TemporalAccessor)&lt;/code&gt;&lt;/a&gt;. If the offset differs between the two date-times, the specified end date-time is normalized to have the same offset as this date-time.</source>
          <target state="translated">&lt;code&gt;Temporal&lt;/code&gt; に変換され、このメソッドに渡さ &lt;code&gt;OffsetDateTime&lt;/code&gt; 使用&lt;a href=&quot;offsetdatetime#from-java.time.temporal.TemporalAccessor-&quot;&gt; &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; &lt;/a&gt;。2つの日時間でオフセットが異なる場合、指定された終了日時は、この日時と同じオフセットを持つように正規化されます。</target>
        </trans-unit>
        <trans-unit id="d95776a3e565ebe5ce70d5bf195dcf050020297d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;OffsetTime&lt;/code&gt; using &lt;a href=&quot;#from(java.time.temporal.TemporalAccessor)&quot;&gt;&lt;code&gt;from(TemporalAccessor)&lt;/code&gt;&lt;/a&gt;. If the offset differs between the two times, then the specified end time is normalized to have the same offset as this time.</source>
          <target state="translated">The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;OffsetTime&lt;/code&gt; using &lt;a href=&quot;#from(java.time.temporal.TemporalAccessor)&quot;&gt; &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; &lt;/a&gt;. If the offset differs between the two times, then the specified end time is normalized to have the same offset as this time.</target>
        </trans-unit>
        <trans-unit id="3e06b07abdd9c26452543a4ee27b98a4f883116f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;OffsetTime&lt;/code&gt; using &lt;a href=&quot;offsettime#from-java.time.temporal.TemporalAccessor-&quot;&gt;&lt;code&gt;from(TemporalAccessor)&lt;/code&gt;&lt;/a&gt;. If the offset differs between the two times, then the specified end time is normalized to have the same offset as this time.</source>
          <target state="translated">&lt;code&gt;Temporal&lt;/code&gt; に変換され、このメソッドに渡さ &lt;code&gt;OffsetTime&lt;/code&gt; 使用&lt;a href=&quot;offsettime#from-java.time.temporal.TemporalAccessor-&quot;&gt; &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; &lt;/a&gt;。2つの時間のオフセットが異なる場合、指定された終了時間は、この時間と同じオフセットを持つように正規化されます。</target>
        </trans-unit>
        <trans-unit id="16922692473cfbe52ef7b4a7d7019abc044672f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;ZonedDateTime&lt;/code&gt; using &lt;a href=&quot;#from(java.time.temporal.TemporalAccessor)&quot;&gt;&lt;code&gt;from(TemporalAccessor)&lt;/code&gt;&lt;/a&gt;. If the time-zone differs between the two zoned date-times, the specified end date-time is normalized to have the same zone as this date-time.</source>
          <target state="translated">The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;ZonedDateTime&lt;/code&gt; using &lt;a href=&quot;#from(java.time.temporal.TemporalAccessor)&quot;&gt; &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; &lt;/a&gt;. If the time-zone differs between the two zoned date-times, the specified end date-time is normalized to have the same zone as this date-time.</target>
        </trans-unit>
        <trans-unit id="137e87a41dd6513a254139c8feaaab1e66487d95" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Temporal&lt;/code&gt; passed to this method is converted to a &lt;code&gt;ZonedDateTime&lt;/code&gt; using &lt;a href=&quot;zoneddatetime#from-java.time.temporal.TemporalAccessor-&quot;&gt;&lt;code&gt;from(TemporalAccessor)&lt;/code&gt;&lt;/a&gt;. If the time-zone differs between the two zoned date-times, the specified end date-time is normalized to have the same zone as this date-time.</source>
          <target state="translated">&lt;code&gt;Temporal&lt;/code&gt; に変換され、このメソッドに渡さ &lt;code&gt;ZonedDateTime&lt;/code&gt; 使用&lt;a href=&quot;zoneddatetime#from-java.time.temporal.TemporalAccessor-&quot;&gt; &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; &lt;/a&gt;。2つのゾーン化された日時の間でタイムゾーンが異なる場合、指定された終了日時は、この日時と同じゾーンを持つように正規化されます。</target>
        </trans-unit>
        <trans-unit id="e5e2abe85585b946fe3143ade66a1eb51b565159" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TemporalAdjuster&lt;/code&gt; is based on the low level &lt;code&gt;Temporal&lt;/code&gt; interface. This method allows an adjustment from &lt;code&gt;LocalDate&lt;/code&gt; to &lt;code&gt;LocalDate&lt;/code&gt; to be wrapped to match the temporal-based interface. This is provided for convenience to make user-written adjusters simpler.</source>
          <target state="translated">&lt;code&gt;TemporalAdjuster&lt;/code&gt; はローレベルに基づいて &lt;code&gt;Temporal&lt;/code&gt; インタフェース。この方法は、より調整可能 &lt;code&gt;LocalDate&lt;/code&gt; に &lt;code&gt;LocalDate&lt;/code&gt; 時間ベースのインタフェースに適合するようにラップされます。これは、ユーザー作成のアジャスターをより簡単にするために提供されています。</target>
        </trans-unit>
        <trans-unit id="3abce6220a2a3d5ab9fef6cd6b43c0fc41bc4b97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TerminalFactory&lt;/code&gt; is initialized with the specified parameters Object. The type of parameters needed may vary between different types of &lt;code&gt;TerminalFactory&lt;/code&gt;s.</source>
          <target state="translated">The &lt;code&gt;TerminalFactory&lt;/code&gt; is initialized with the specified parameters Object. The type of parameters needed may vary between different types of &lt;code&gt;TerminalFactory&lt;/code&gt; s.</target>
        </trans-unit>
        <trans-unit id="19c02d28928b0971c51632836506fdb261eb44fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Text&lt;/code&gt; interface inherits from &lt;code&gt;CharacterData&lt;/code&gt; and represents the textual content (termed &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#syntax&quot;&gt;character data&lt;/a&gt; in XML) of an &lt;code&gt;Element&lt;/code&gt; or &lt;code&gt;Attr&lt;/code&gt;.</source>
          <target state="translated">The &lt;code&gt;Text&lt;/code&gt; interface inherits from &lt;code&gt;CharacterData&lt;/code&gt; and represents the textual content (termed &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#syntax&quot;&gt;character data&lt;/a&gt; in XML) of an &lt;code&gt;Element&lt;/code&gt; or &lt;code&gt;Attr&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="703823749842fef8a2c75cc8cb3164c39a004c62" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Text&lt;/code&gt; interface inherits from &lt;code&gt;CharacterData&lt;/code&gt; and represents the textual content (termed &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#syntax&quot;&gt;character data&lt;/a&gt; in XML) of an &lt;code&gt;Element&lt;/code&gt; or &lt;code&gt;Attr&lt;/code&gt;. If there is no markup inside an element's content, the text is contained in a single object implementing the &lt;code&gt;Text&lt;/code&gt; interface that is the only child of the element. If there is markup, it is parsed into the information items (elements, comments, etc.) and &lt;code&gt;Text&lt;/code&gt; nodes that form the list of children of the element.</source>
          <target state="translated">The &lt;code&gt;Text&lt;/code&gt; interface inherits from &lt;code&gt;CharacterData&lt;/code&gt; and represents the textual content (termed &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#syntax&quot;&gt;character data&lt;/a&gt; in XML) of an &lt;code&gt;Element&lt;/code&gt; or &lt;code&gt;Attr&lt;/code&gt; . If there is no markup inside an element's content, the text is contained in a single object implementing the &lt;code&gt;Text&lt;/code&gt; interface that is the only child of the element. If there is markup, it is parsed into the information items (elements, comments, etc.) and &lt;code&gt;Text&lt;/code&gt; nodes that form the list of children of the element.</target>
        </trans-unit>
        <trans-unit id="df9b2d38101dfed625badfabcb4a7f7bc503120d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Text&lt;/code&gt; interface inherits from &lt;code&gt;CharacterData&lt;/code&gt; and represents the textual content (termed &lt;a href=&quot;https://www.w3.org/TR/2004/REC-xml-20040204#syntax&quot;&gt;character data&lt;/a&gt; in XML) of an &lt;code&gt;Element&lt;/code&gt; or &lt;code&gt;Attr&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5d0ca963e2fbcac0f1a779baefce79707291a6fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Text&lt;/code&gt; interface inherits from &lt;code&gt;CharacterData&lt;/code&gt; and represents the textual content (termed &lt;a href=&quot;https://www.w3.org/TR/2004/REC-xml-20040204#syntax&quot;&gt;character data&lt;/a&gt; in XML) of an &lt;code&gt;Element&lt;/code&gt; or &lt;code&gt;Attr&lt;/code&gt;. If there is no markup inside an element's content, the text is contained in a single object implementing the &lt;code&gt;Text&lt;/code&gt; interface that is the only child of the element. If there is markup, it is parsed into the information items (elements, comments, etc.) and &lt;code&gt;Text&lt;/code&gt; nodes that form the list of children of the element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b427ffefca649d6c2fde1f2d87275cd3cac181c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Text&lt;/code&gt; node created with the specified content.</source>
          <target state="translated">The &lt;code&gt;Text&lt;/code&gt; node created with the specified content.</target>
        </trans-unit>
        <trans-unit id="cca479076c75edc689dd6ce78a057c1b17b31465" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextArea&lt;/code&gt; class defines four integer constants that are used to specify which scroll bars are available. &lt;code&gt;TextArea&lt;/code&gt; has one constructor that gives the application discretion over scroll bars.</source>
          <target state="translated">The &lt;code&gt;TextArea&lt;/code&gt; class defines four integer constants that are used to specify which scroll bars are available. &lt;code&gt;TextArea&lt;/code&gt; has one constructor that gives the application discretion over scroll bars.</target>
        </trans-unit>
        <trans-unit id="5d48388689d22e97176bfbb9fb1fc79899bb9234" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextArea&lt;/code&gt; class defines several constants that can be supplied as values for the &lt;code&gt;scrollbars&lt;/code&gt; argument:</source>
          <target state="translated">The &lt;code&gt;TextArea&lt;/code&gt; class defines several constants that can be supplied as values for the &lt;code&gt;scrollbars&lt;/code&gt; argument:</target>
        </trans-unit>
        <trans-unit id="5336257f4025d0fea63716accbddc0218345d2f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextAttribute&lt;/code&gt; class defines attribute keys and attribute values used for text rendering.</source>
          <target state="translated">The &lt;code&gt;TextAttribute&lt;/code&gt; class defines attribute keys and attribute values used for text rendering.</target>
        </trans-unit>
        <trans-unit id="642b3c193ea2d3a105f24ceebe0c67d4450a709c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextComponent&lt;/code&gt; class is the superclass of any component that allows the editing of some text.</source>
          <target state="translated">The &lt;code&gt;TextComponent&lt;/code&gt; class is the superclass of any component that allows the editing of some text.</target>
        </trans-unit>
        <trans-unit id="6e295e7fa9a8c0af844a002343da2aa129dfba05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextField&lt;/code&gt; class's &lt;code&gt;processEvent&lt;/code&gt; method examines the action event and passes it along to &lt;code&gt;processActionEvent&lt;/code&gt;. The latter method redirects the event to any &lt;code&gt;ActionListener&lt;/code&gt; objects that have registered to receive action events generated by this text field.</source>
          <target state="translated">The &lt;code&gt;TextField&lt;/code&gt; class's &lt;code&gt;processEvent&lt;/code&gt; method examines the action event and passes it along to &lt;code&gt;processActionEvent&lt;/code&gt; . The latter method redirects the event to any &lt;code&gt;ActionListener&lt;/code&gt; objects that have registered to receive action events generated by this text field.</target>
        </trans-unit>
        <trans-unit id="22b360ff64d31b8f19b1d96768ca46578b5f564f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextHitInfo&lt;/code&gt; class represents a character position in a text model, and a &lt;b&gt;bias&lt;/b&gt;, or &quot;side,&quot; of the character.</source>
          <target state="translated">&lt;code&gt;TextHitInfo&lt;/code&gt; クラスは、テキストモデル内の文字の位置、及び表し&lt;b&gt;バイアス&lt;/b&gt;文字の、または「サイド」。</target>
        </trans-unit>
        <trans-unit id="b2a90ad498f0fc0ba3728afdf8f9ce9b1048e36c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextHitInfo&lt;/code&gt; class represents a character position in a text model, and a &lt;b&gt;bias&lt;/b&gt;, or &quot;side,&quot; of the character. Biases are either &lt;em&gt;leading&lt;/em&gt; (the left edge, for a left-to-right character) or &lt;em&gt;trailing&lt;/em&gt; (the right edge, for a left-to-right character). Instances of &lt;code&gt;TextHitInfo&lt;/code&gt; are used to specify caret and insertion positions within text.</source>
          <target state="translated">&lt;code&gt;TextHitInfo&lt;/code&gt; クラスは、テキストモデル内の文字の位置、及び表し&lt;b&gt;バイアス&lt;/b&gt;文字の、または「サイド」。バイアスは、&lt;em&gt;先頭&lt;/em&gt;（左から右の文字の場合は左端）または&lt;em&gt;末尾&lt;/em&gt;（左から右の文字の場合は右端）のいずれかです。 &lt;code&gt;TextHitInfo&lt;/code&gt; のインスタンスは、テキスト内のキャレットと挿入位置を指定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="c4b39e8c9816ef7ceb28fda873be1e28ff6d68cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextLayout&lt;/code&gt; instances returned by &lt;code&gt;LineBreakMeasurer&lt;/code&gt; treat tabs like 0-width spaces. Clients who wish to obtain tab-delimited segments for positioning should use the overload of &lt;code&gt;nextLayout&lt;/code&gt; which takes a limiting offset in the text. The limiting offset should be the first character after the tab. The &lt;code&gt;TextLayout&lt;/code&gt; objects returned from this method end at the limit provided (or before, if the text between the current position and the limit won't fit entirely within the wrapping width).</source>
          <target state="translated">&lt;code&gt;TextLayout&lt;/code&gt; によって返されるインスタンス &lt;code&gt;LineBreakMeasurer&lt;/code&gt; 幅0のスペースのような御馳走タブ。配置のためにタブ区切りのセグメントを取得したいクライアントは、テキスト内の制限オフセットを取る &lt;code&gt;nextLayout&lt;/code&gt; のオーバーロードを使用する必要があります。制限オフセットは、タブの後の最初の文字である必要があります。 &lt;code&gt;TextLayout&lt;/code&gt; のは、（現在の位置とリミットとの間のテキストがラッピング幅内に完全に収まらない場合は、前又は）提供限界でこの方法端から返されるオブジェクト。</target>
        </trans-unit>
        <trans-unit id="e54ec1da816a0aac8f63c3f5100992dba76c1e48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextMeasurer&lt;/code&gt; class provides the primitive operations needed for line break: measuring up to a given advance, determining the advance of a range of characters, and generating a &lt;code&gt;TextLayout&lt;/code&gt; for a range of characters.</source>
          <target state="translated">&lt;code&gt;TextMeasurer&lt;/code&gt; クラスは、改行に必要な基本操作を提供します。つまり、特定の前進までの測定、文字範囲の前進の決定、および文字範囲の &lt;code&gt;TextLayout&lt;/code&gt; の生成です。</target>
        </trans-unit>
        <trans-unit id="688cd5ad4fe72f4fb2a262796fd8215056bc8fb8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TextMeasurer&lt;/code&gt; class provides the primitive operations needed for line break: measuring up to a given advance, determining the advance of a range of characters, and generating a &lt;code&gt;TextLayout&lt;/code&gt; for a range of characters. It also provides methods for incremental editing of paragraphs.</source>
          <target state="translated">&lt;code&gt;TextMeasurer&lt;/code&gt; クラスは、改行に必要な基本操作を提供します。つまり、特定の前進までの測定、文字範囲の前進の決定、および文字範囲の &lt;code&gt;TextLayout&lt;/code&gt; の生成です。また、段落を段階的に編集するためのメソッドも提供します。</target>
        </trans-unit>
        <trans-unit id="4e71e087399343a98483b9a617ee45738e959a19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TexturePaint&lt;/code&gt; class provides a way to fill a &lt;a href=&quot;shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; with a texture that is specified as a &lt;a href=&quot;image/bufferedimage&quot;&gt;&lt;code&gt;BufferedImage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;TexturePaint&lt;/code&gt; のクラスには、埋めるための方法を提供&lt;a href=&quot;shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt;として指定されるテクスチャーで&lt;a href=&quot;image/bufferedimage&quot;&gt; &lt;code&gt;BufferedImage&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="b5dac04db526a9210cdabe62413aabab1e25b23f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TexturePaint&lt;/code&gt; class provides a way to fill a &lt;a href=&quot;shape&quot;&gt;&lt;code&gt;Shape&lt;/code&gt;&lt;/a&gt; with a texture that is specified as a &lt;a href=&quot;image/bufferedimage&quot;&gt;&lt;code&gt;BufferedImage&lt;/code&gt;&lt;/a&gt;. The size of the &lt;code&gt;BufferedImage&lt;/code&gt; object should be small because the &lt;code&gt;BufferedImage&lt;/code&gt; data is copied by the &lt;code&gt;TexturePaint&lt;/code&gt; object. At construction time, the texture is anchored to the upper left corner of a &lt;a href=&quot;geom/rectangle2d&quot;&gt;&lt;code&gt;Rectangle2D&lt;/code&gt;&lt;/a&gt; that is specified in user space. Texture is computed for locations in the device space by conceptually replicating the specified &lt;code&gt;Rectangle2D&lt;/code&gt; infinitely in all directions in user space and mapping the &lt;code&gt;BufferedImage&lt;/code&gt; to each replicated &lt;code&gt;Rectangle2D&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TexturePaint&lt;/code&gt; のクラスには、埋めるための方法を提供&lt;a href=&quot;shape&quot;&gt; &lt;code&gt;Shape&lt;/code&gt; &lt;/a&gt;として指定されるテクスチャーで&lt;a href=&quot;image/bufferedimage&quot;&gt; &lt;code&gt;BufferedImage&lt;/code&gt; を&lt;/a&gt;。 &lt;code&gt;BufferedImage&lt;/code&gt; データは &lt;code&gt;TexturePaint&lt;/code&gt; オブジェクトによってコピーされるため、 &lt;code&gt;BufferedImage&lt;/code&gt; オブジェクトのサイズは小さくする必要があります。構築時に、テクスチャはユーザースペースで指定された&lt;a href=&quot;geom/rectangle2d&quot;&gt; &lt;code&gt;Rectangle2D&lt;/code&gt; の&lt;/a&gt;左上隅に固定されます。テクスチャは、指定された &lt;code&gt;Rectangle2D&lt;/code&gt; をユーザー空間のすべての方向に概念的に無限に複製し、 &lt;code&gt;BufferedImage&lt;/code&gt; を複製された各 &lt;code&gt;Rectangle2D&lt;/code&gt; にマッピングすることにより、デバイス空間内の場所に対して計算されます。</target>
        </trans-unit>
        <trans-unit id="d01873bbcd9b0d6ed0700e4517af9e870acfb37f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ThreadMXBean&lt;/code&gt; interface provides the &lt;a href=&quot;#findMonitorDeadlockedThreads()&quot;&gt;&lt;code&gt;findMonitorDeadlockedThreads()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#findDeadlockedThreads()&quot;&gt;&lt;code&gt;findDeadlockedThreads()&lt;/code&gt;&lt;/a&gt; methods to find deadlocks in the running application.</source>
          <target state="translated">&lt;code&gt;ThreadMXBean&lt;/code&gt; インタフェースが提供&lt;a href=&quot;#findMonitorDeadlockedThreads()&quot;&gt; &lt;code&gt;findMonitorDeadlockedThreads()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#findDeadlockedThreads()&quot;&gt; &lt;code&gt;findDeadlockedThreads()&lt;/code&gt; を&lt;/a&gt;実行しているアプリケーションでデッドロックを見つけるための方法。</target>
        </trans-unit>
        <trans-unit id="179bee4e4045d3f40705d1a933596e56a91b3268" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ThreadMXBean&lt;/code&gt; interface provides the &lt;a href=&quot;threadmxbean#findMonitorDeadlockedThreads--&quot;&gt;&lt;code&gt;findMonitorDeadlockedThreads()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;threadmxbean#findDeadlockedThreads--&quot;&gt;&lt;code&gt;findDeadlockedThreads()&lt;/code&gt;&lt;/a&gt; methods to find deadlocks in the running application.</source>
          <target state="translated">&lt;code&gt;ThreadMXBean&lt;/code&gt; インタフェースが提供&lt;a href=&quot;threadmxbean#findMonitorDeadlockedThreads--&quot;&gt; &lt;code&gt;findMonitorDeadlockedThreads()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;threadmxbean#findDeadlockedThreads--&quot;&gt; &lt;code&gt;findDeadlockedThreads()&lt;/code&gt; を&lt;/a&gt;実行しているアプリケーションでデッドロックを見つけるための方法。</target>
        </trans-unit>
        <trans-unit id="39917ae27e9e1229d50311719d5d54222afebd7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Throwable&lt;/code&gt; class is the superclass of all errors and exceptions in the Java language.</source>
          <target state="translated">&lt;code&gt;Throwable&lt;/code&gt; クラスは、Java言語のすべてのエラーと例外のスーパークラスです。</target>
        </trans-unit>
        <trans-unit id="9684e90dd9742fd93651a9cb50a8638d48f73ecd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Throwable&lt;/code&gt; class is the superclass of all errors and exceptions in the Java language. Only objects that are instances of this class (or one of its subclasses) are thrown by the Java Virtual Machine or can be thrown by the Java &lt;code&gt;throw&lt;/code&gt; statement. Similarly, only this class or one of its subclasses can be the argument type in a &lt;code&gt;catch&lt;/code&gt; clause. For the purposes of compile-time checking of exceptions, &lt;code&gt;
 Throwable&lt;/code&gt; and any subclass of &lt;code&gt;Throwable&lt;/code&gt; that is not also a subclass of either &lt;a href=&quot;runtimeexception&quot;&gt;&lt;code&gt;RuntimeException&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; are regarded as checked exceptions.</source>
          <target state="translated">&lt;code&gt;Throwable&lt;/code&gt; クラスは、Java言語のすべてのエラーと例外のスーパークラスです。このクラス（またはそのサブクラスの1つ）のインスタンスであるオブジェクトのみがJava仮想マシンによってスローされるか、Javaの &lt;code&gt;throw&lt;/code&gt; ステートメントによってスローされます。同様に、このクラスまたはそのサブクラスの1つのみが、 &lt;code&gt;catch&lt;/code&gt; 句の引数タイプになります。例外のコンパイル時チェックの目的で、 &lt;code&gt; Throwable&lt;/code&gt; および&lt;a href=&quot;runtimeexception&quot;&gt; &lt;code&gt;RuntimeException&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; の&lt;/a&gt;サブクラスでもない &lt;code&gt;Throwable&lt;/code&gt; のサブクラスは、チェックされた例外と見なされます。</target>
        </trans-unit>
        <trans-unit id="08f3668a9e709259220f6210bae5df043abe1c67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Throwable&lt;/code&gt; class is the superclass of all errors and exceptions in the Java language. Only objects that are instances of this class (or one of its subclasses) are thrown by the Java Virtual Machine or can be thrown by the Java &lt;code&gt;throw&lt;/code&gt; statement. Similarly, only this class or one of its subclasses can be the argument type in a &lt;code&gt;catch&lt;/code&gt; clause. For the purposes of compile-time checking of exceptions, &lt;code&gt;Throwable&lt;/code&gt; and any subclass of &lt;code&gt;Throwable&lt;/code&gt; that is not also a subclass of either &lt;a href=&quot;runtimeexception&quot;&gt;&lt;code&gt;RuntimeException&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;error&quot;&gt;&lt;code&gt;Error&lt;/code&gt;&lt;/a&gt; are regarded as checked exceptions.</source>
          <target state="translated">&lt;code&gt;Throwable&lt;/code&gt; クラスは、Java言語のすべてのエラーと例外のスーパークラスです。このクラス（またはそのサブクラスの1つ）のインスタンスであるオブジェクトのみが、Java仮想マシンによってスローされるか、Javaの &lt;code&gt;throw&lt;/code&gt; ステートメントによってスローできます。同様に、このクラスまたはそのサブクラスの1つだけが、 &lt;code&gt;catch&lt;/code&gt; 節の引数型になることができます。例外のコンパイル時チェックのために、 &lt;code&gt;Throwable&lt;/code&gt; および &lt;code&gt;Throwable&lt;/code&gt; のサブクラスであり、&lt;a href=&quot;runtimeexception&quot;&gt; &lt;code&gt;RuntimeException&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;error&quot;&gt; &lt;code&gt;Error&lt;/code&gt; の&lt;/a&gt;サブクラスでもないものは、チェック済み例外と見なされます。</target>
        </trans-unit>
        <trans-unit id="caaa27ee7d5ebe96563c4a7078bb2aeef3acb7d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TimeZone&lt;/code&gt; set by this method is overwritten by a &lt;a href=&quot;#setCalendar(java.util.Calendar)&quot;&gt;&lt;code&gt;setCalendar&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">&lt;code&gt;TimeZone&lt;/code&gt; この方法によるセットが上書きされ&lt;a href=&quot;#setCalendar(java.util.Calendar)&quot;&gt; &lt;code&gt;setCalendar&lt;/code&gt; の&lt;/a&gt;コール。</target>
        </trans-unit>
        <trans-unit id="4424bacaff9f769c17cab48ed5095a39891ea9af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TimeZone&lt;/code&gt; set by this method is overwritten by a &lt;a href=&quot;dateformat#setCalendar-java.util.Calendar-&quot;&gt;&lt;code&gt;setCalendar&lt;/code&gt;&lt;/a&gt; call.</source>
          <target state="translated">&lt;code&gt;TimeZone&lt;/code&gt; この方法でセットが上書きされ&lt;a href=&quot;dateformat#setCalendar-java.util.Calendar-&quot;&gt; &lt;code&gt;setCalendar&lt;/code&gt; の&lt;/a&gt;コール。</target>
        </trans-unit>
        <trans-unit id="ab6ef098a0e2b11a35d0346ab8d1c75fce3fa93c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TimeZone&lt;/code&gt; set by this method may be overwritten as a result of a call to the parse method.</source>
          <target state="translated">&lt;code&gt;TimeZone&lt;/code&gt; この方法によるセットが解析メソッドの呼び出しの結果として上書きしてもよいです。</target>
        </trans-unit>
        <trans-unit id="1b2b585ce3ba8eb3aebe12ba50db23bd93b1cd99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TopLevelWindowListener&lt;/code&gt; interface is used by the &lt;a href=&quot;eventqueuemonitor&quot;&gt;&lt;code&gt;EventQueueMonitor&lt;/code&gt;&lt;/a&gt; class to notify an interested party when a top level window is created or destroyed in the Java Virtual Machine.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f43a5c5d121ea26e7d3d11198748eb2ea44fc04e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TopLevelWindowListener&lt;/code&gt; interface is used by the &lt;a href=&quot;eventqueuemonitor&quot;&gt;&lt;code&gt;EventQueueMonitor&lt;/code&gt;&lt;/a&gt; class to notify an interested party when a top level window is created or destroyed in the Java Virtual Machine. Classes wishing to express an interest in top level window events should implement this interface and register themselves with the &lt;code&gt;EventQueueMonitor&lt;/code&gt; by calling the &lt;a href=&quot;eventqueuemonitor#addTopLevelWindowListener(com.sun.java.accessibility.util.TopLevelWindowListener)&quot;&gt;&lt;code&gt;EventQueueMonitor.addTopLevelWindowListener&lt;/code&gt;&lt;/a&gt; class method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="64856a2ea07154d8aca40a14f0b2a8f2b6235c3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Track&lt;/code&gt; class provides methods to edit the track by adding or removing &lt;code&gt;MidiEvent&lt;/code&gt; objects from it. These operations keep the event list in the correct time order. Methods are also included to obtain the track's size, in terms of either the number of events it contains or its duration in ticks.</source>
          <target state="translated">&lt;code&gt;Track&lt;/code&gt; クラスが追加または削除して編集にトラックをメソッドを提供 &lt;code&gt;MidiEvent&lt;/code&gt; それからオブジェクトを。これらの操作により、イベントリストが正しい時間順に保持されます。トラックのサイズを取得するためのメソッドも含まれています。トラックに含まれるイベントの数またはティック単位での期間のいずれかです。</target>
        </trans-unit>
        <trans-unit id="88c4d505c20b758c1cf067046de7a5f61b22c838" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TrailerFieldBC&lt;/code&gt; constant as defined in PKCS#1</source>
          <target state="translated">&lt;code&gt;TrailerFieldBC&lt;/code&gt; のPKCS＃1で定義されている定数</target>
        </trans-unit>
        <trans-unit id="337a73862454b4e4ce4630d25f83783780da6507" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TransformAttribute&lt;/code&gt; class defines the constant &lt;a href=&quot;transformattribute#IDENTITY&quot;&gt;&lt;code&gt;IDENTITY&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;TransformAttribute&lt;/code&gt; のクラスには、一定の定義&lt;a href=&quot;transformattribute#IDENTITY&quot;&gt; &lt;code&gt;IDENTITY&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="242dd480e8d4e2f04c2a0aca2e1d2c2a437f9ab1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TransformAttribute&lt;/code&gt; class provides an immutable wrapper for a transform so that it is safe to use as an attribute.</source>
          <target state="translated">&lt;code&gt;TransformAttribute&lt;/code&gt; のクラスは、属性として使用しても安全であるように変換の不変ラッパーを提供します。</target>
        </trans-unit>
        <trans-unit id="9a63fe4036fc39c3775af4983ad2d733adec1ad6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Transient&lt;/code&gt; annotation may be be used in any of the methods that are involved in a &lt;a href=&quot;featuredescriptor&quot;&gt;&lt;code&gt;FeatureDescriptor&lt;/code&gt;&lt;/a&gt; subclass to identify the transient feature in the annotated class and its subclasses. Normally, the method that starts with &quot;get&quot; is the best place to put the annotation and it is this declaration that takes precedence in the case of multiple annotations being defined for the same feature.</source>
          <target state="translated">&lt;code&gt;Transient&lt;/code&gt; アノテーションはに関与している方法のいずれかにおいて使用されてもよい&lt;a href=&quot;featuredescriptor&quot;&gt; &lt;code&gt;FeatureDescriptor&lt;/code&gt; の&lt;/a&gt;注釈付きのクラスおよびそのサブクラスの過渡機能を識別するために、サブクラス。通常、「get」で始まるメソッドがアノテーションを配置するのに最適な場所であり、同じ宣言が複数のアノテーションが同じ機能に対して定義されている場合に優先されます。</target>
        </trans-unit>
        <trans-unit id="9e364de330948156d7b30fb226ad141e51151b6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Transient&lt;/code&gt; annotation may be used in any of the methods that are involved in a &lt;a href=&quot;featuredescriptor&quot;&gt;&lt;code&gt;FeatureDescriptor&lt;/code&gt;&lt;/a&gt; subclass to identify the transient feature in the annotated class and its subclasses. Normally, the method that starts with &quot;get&quot; is the best place to put the annotation and it is this declaration that takes precedence in the case of multiple annotations being defined for the same feature.</source>
          <target state="translated">&lt;code&gt;Transient&lt;/code&gt; アノテーションはに関与している方法のいずれかで使用することができる&lt;a href=&quot;featuredescriptor&quot;&gt; &lt;code&gt;FeatureDescriptor&lt;/code&gt; の&lt;/a&gt;注釈付きのクラスおよびそのサブクラスの過渡機能を識別するために、サブクラス。通常、「get」で始まるメソッドはアノテーションを配置するのに最適な場所であり、同じ機能に対して複数のアノテーションが定義されている場合に優先されるのはこの宣言です。</target>
        </trans-unit>
        <trans-unit id="b848d9d5ef1337d4e50a78e0c88451fd5136dafe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Translator&lt;/code&gt; class provides a translation to interface &lt;a href=&quot;../../../../../../java.desktop/javax/accessibility/accessible&quot;&gt;&lt;code&gt;Accessible&lt;/code&gt;&lt;/a&gt; for objects that do not implement interface &lt;code&gt;Accessible&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a6373ddbc83a467395284392d51d836baa47b3de" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Translator&lt;/code&gt; class provides a translation to interface &lt;a href=&quot;../../../../../../java.desktop/javax/accessibility/accessible&quot;&gt;&lt;code&gt;Accessible&lt;/code&gt;&lt;/a&gt; for objects that do not implement interface &lt;code&gt;Accessible&lt;/code&gt;. Assistive technologies can use the &lt;a href=&quot;#getAccessible(java.lang.Object)&quot;&gt;&lt;code&gt;getAccessible&lt;/code&gt;&lt;/a&gt; class method of &lt;code&gt;Translator&lt;/code&gt; to obtain an object that implements interface &lt;code&gt;Accessible&lt;/code&gt;. If the object passed in already implements interface &lt;code&gt;Accessible&lt;/code&gt;, &lt;code&gt;getAccessible&lt;/code&gt; merely returns the object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2b4f4a819eabca9398ff09bcfb81fad4870d846" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Transparency&lt;/code&gt; interface defines the common transparency modes for implementing classes.</source>
          <target state="translated">&lt;code&gt;Transparency&lt;/code&gt; インタフェースは、クラスを実装するための共通の透明度モードを定義します。</target>
        </trans-unit>
        <trans-unit id="670b265b3329f65feda03a613696faba69159109" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TreeCellRenderer&lt;/code&gt; is also responsible for rendering the the cell representing the tree's current DnD drop location if it has one. If this renderer cares about rendering the DnD drop location, it should query the tree directly to see if the given row represents the drop location:</source>
          <target state="translated">&lt;code&gt;TreeCellRenderer&lt;/code&gt; はまた、それが1つを持っている場合、ツリーの現在のドラッグ＆ドロップドロップ位置を表すセルをレンダリングする責任があります。このレンダラーがDnDドロップ位置のレンダリングに関心がある場合は、ツリーに直接クエリを実行して、指定された行がドロップ位置を表しているかどうかを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="f50af3967242881f5d0eaaa88b167baaa991e4f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TreeMap&lt;/code&gt; type of collection guarantees that the map will be in ascending key order, sorted according to the natural order for the key's class. Each key references a &lt;code&gt;Vector&lt;/code&gt; object that corresponds to one row of a &lt;code&gt;RowSet&lt;/code&gt; object. Therefore, the size of each &lt;code&gt;Vector&lt;/code&gt; object must be exactly equal to the number of columns in the &lt;code&gt;RowSet&lt;/code&gt; object. The key used by the &lt;code&gt;TreeMap&lt;/code&gt; collection is determined by the implementation, which may choose to leverage a set key that is available within the internal &lt;code&gt;RowSet&lt;/code&gt; tabular structure by virtue of a key already set either on the &lt;code&gt;RowSet&lt;/code&gt; object itself or on the underlying SQL data.</source>
          <target state="translated">&lt;code&gt;TreeMap&lt;/code&gt; ののコレクション保証の種類は、マップがキーの昇順になることを、キーのクラスの自然順序に従ってソートされました。各キーは、 &lt;code&gt;RowSet&lt;/code&gt; オブジェクトの1行に対応する &lt;code&gt;Vector&lt;/code&gt; オブジェクトを参照します。したがって、各 &lt;code&gt;Vector&lt;/code&gt; オブジェクトのサイズは、 &lt;code&gt;RowSet&lt;/code&gt; オブジェクトの列数と正確に等しくなければなりません。 &lt;code&gt;TreeMap&lt;/code&gt; コレクションで使用されるキーは、実装によって決定されます。実装は、 &lt;code&gt;RowSet&lt;/code&gt; オブジェクト自体または基になるSQLデータのいずれかに既に設定されているキーによって、内部 &lt;code&gt;RowSet&lt;/code&gt; 表形式構造内で使用可能なセットキーを利用することを選択できます。</target>
        </trans-unit>
        <trans-unit id="9bcd29228e53625367d091097491a39f7a4ef896" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TypeInfo&lt;/code&gt; interface represents a type referenced from &lt;code&gt;Element&lt;/code&gt; or &lt;code&gt;Attr&lt;/code&gt; nodes, specified in the schemas associated with the document.</source>
          <target state="translated">&lt;code&gt;TypeInfo&lt;/code&gt; インタフェースから参照される型を表し &lt;code&gt;Element&lt;/code&gt; 又は &lt;code&gt;Attr&lt;/code&gt; のドキュメントに関連付けられたスキーマで指定されたノードを、。</target>
        </trans-unit>
        <trans-unit id="7f72026f83b83008f230de60a8ad4d2f4f72a6f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TypeInfo&lt;/code&gt; interface represents a type referenced from &lt;code&gt;Element&lt;/code&gt; or &lt;code&gt;Attr&lt;/code&gt; nodes, specified in the schemas associated with the document. The type is a pair of a namespace URI and name properties, and depends on the document's schema.</source>
          <target state="translated">&lt;code&gt;TypeInfo&lt;/code&gt; インタフェースから参照される型を表し &lt;code&gt;Element&lt;/code&gt; 又は &lt;code&gt;Attr&lt;/code&gt; のドキュメントに関連付けられたスキーマで指定されたノードを、。タイプは名前空間URIと名前プロパティのペアであり、ドキュメントのスキーマによって異なります。</target>
        </trans-unit>
        <trans-unit id="62f28efbdf19e84d13677fbf535fa72f87f95a0b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UIEvent&lt;/code&gt; interface provides specific contextual information associated with User Interface events.</source>
          <target state="translated">&lt;code&gt;UIEvent&lt;/code&gt; インタフェースは、ユーザインタフェースイベントに関連する特定のコンテキスト情報を提供します。</target>
        </trans-unit>
        <trans-unit id="56b910f29830f7a046163f6e535cb7ed1fc9dd25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;URI&lt;/code&gt; passed as an argument specifies the intended use for the cookies. In particular the scheme should reflect whether the cookies will be sent over http, https or used in another context like javascript. The host part should reflect either the destination of the cookies or their origin in the case of javascript.</source>
          <target state="translated">&lt;code&gt;URI&lt;/code&gt; は、引数は、クッキーの使用目的を指定して渡されました。特に、このスキームは、Cookieがhttp、httpsのいずれで送信されるか、またはJavaScriptなどの別のコンテキストで使用されるかを反映する必要があります。ホスト部分は、Cookieの宛先またはJavaScriptの場合はそれらの出所を反映する必要があります。</target>
        </trans-unit>
        <trans-unit id="4ba34cdf99e04c2d36d3c24cfdbaca9cd7b39e21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;URLStreamHandlerFactory&lt;/code&gt; instance is used to construct a stream protocol handler from a protocol name.</source>
          <target state="translated">&lt;code&gt;URLStreamHandlerFactory&lt;/code&gt; のインスタンスは、プロトコル名からストリームプロトコルハンドラを構築するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1d60c3045667966fd5b30a25092dd1ae85ace600" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UTF-16&lt;/code&gt; charsets are specified by &lt;a href=&quot;http://www.ietf.org/rfc/rfc2781.txt&quot;&gt;&lt;i&gt;RFC 2781&lt;/i&gt;&lt;/a&gt;; the transformation formats upon which they are based are specified in Amendment 1 of ISO 10646-1 and are also described in the &lt;a href=&quot;http://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;Unicode Standard&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UTF-16&lt;/code&gt; 文字セットがで指定された&lt;a href=&quot;http://www.ietf.org/rfc/rfc2781.txt&quot;&gt;&lt;i&gt;RFC 2781&lt;/i&gt;&lt;/a&gt;。それらの基礎となる変換フォーマットは、ISO 10646-1の修正1で指定されており、&lt;a href=&quot;http://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;Unicode規格&lt;/i&gt;&lt;/a&gt;でも説明されてい&lt;i&gt;ます&lt;/i&gt;。</target>
        </trans-unit>
        <trans-unit id="1212ff587f8530505864d4db8b63d2ce30fe0bc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UTF-16&lt;/code&gt; charsets are specified by &lt;a href=&quot;https://www.ietf.org/rfc/rfc2781.txt&quot;&gt;&lt;i&gt;RFC 2781&lt;/i&gt;&lt;/a&gt;; the transformation formats upon which they are based are specified in Amendment 1 of ISO 10646-1 and are also described in the &lt;a href=&quot;https://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;Unicode Standard&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e562ee77a3c77e7c3517890b43d086ebf2121c0d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UTF-16&lt;/code&gt; charsets use sixteen-bit quantities and are therefore sensitive to byte order. In these encodings the byte order of a stream may be indicated by an initial</source>
          <target state="translated">&lt;code&gt;UTF-16&lt;/code&gt; 文字セットは、16ビット量を使用し、バイト順することが敏感です。これらのエンコーディングでは、ストリームのバイト順は最初の</target>
        </trans-unit>
        <trans-unit id="cf273b4ec9d4f261c426075182f01ae5218ee7da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UTF-8&lt;/code&gt; charset is specified by &lt;a href=&quot;http://www.ietf.org/rfc/rfc2279.txt&quot;&gt;&lt;i&gt;RFC 2279&lt;/i&gt;&lt;/a&gt;; the transformation format upon which it is based is specified in Amendment 2 of ISO 10646-1 and is also described in the &lt;a href=&quot;http://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;Unicode Standard&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UTF-8&lt;/code&gt; 文字セットがで指定された&lt;a href=&quot;http://www.ietf.org/rfc/rfc2279.txt&quot;&gt;&lt;i&gt;RFC 2279&lt;/i&gt;&lt;/a&gt; ; それが基づく変換形式は、ISO 10646-1の修正2で指定されており、&lt;a href=&quot;http://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;Unicode規格&lt;/i&gt;&lt;/a&gt;でも説明されてい&lt;i&gt;ます&lt;/i&gt;。</target>
        </trans-unit>
        <trans-unit id="b637061293d6e15703a8ce9105d000feac5d5537" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UTF-8&lt;/code&gt; charset is specified by &lt;a href=&quot;https://www.ietf.org/rfc/rfc2279.txt&quot;&gt;&lt;i&gt;RFC 2279&lt;/i&gt;&lt;/a&gt;; the transformation format upon which it is based is specified in Amendment 2 of ISO 10646-1 and is also described in the &lt;a href=&quot;https://www.unicode.org/unicode/standard/standard.html&quot;&gt;&lt;i&gt;Unicode Standard&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="40e82979aa5d5e239e732f4633c110c90f289973" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UndefinedProperty&lt;/code&gt; object should be returned whenever a property which was not defined for a particular image is fetched.</source>
          <target state="translated">&lt;code&gt;UndefinedProperty&lt;/code&gt; の特定の画像用に定義されていないプロパティがフェッチされるたびにオブジェクトが返されるべきです。</target>
        </trans-unit>
        <trans-unit id="4d98c83e8fcbc979fcd257731475f0094c62618b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UndoManager&lt;/code&gt; makes use of &lt;code&gt;isSignificant&lt;/code&gt; to determine how many edits should be undone or redone. The &lt;code&gt;UndoManager&lt;/code&gt; will undo or redo all insignificant edits (&lt;code&gt;isSignificant&lt;/code&gt; returns false) between the current edit and the last or next significant edit. &lt;code&gt;addEdit&lt;/code&gt; and &lt;code&gt;replaceEdit&lt;/code&gt; can be used to treat multiple edits as a single edit, returning false from &lt;code&gt;isSignificant&lt;/code&gt; allows for treating can be used to have many smaller edits undone or redone at once. Similar functionality can also be done using the &lt;code&gt;addEdit&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;UndoManager&lt;/code&gt; は、isSignificantを使用して、元に戻すまたはやり直す必要のある編集の &lt;code&gt;isSignificant&lt;/code&gt; を決定します。 &lt;code&gt;UndoManager&lt;/code&gt; は、元に戻す、またはすべての些細な編集（やり直します &lt;code&gt;isSignificant&lt;/code&gt; が現在の編集と最後または次の重大な編集の間をfalseを返します）。 &lt;code&gt;addEdit&lt;/code&gt; と &lt;code&gt;replaceEdit&lt;/code&gt; を使用すると、複数の編集を1つの編集として扱うことができ、 &lt;code&gt;isSignificant&lt;/code&gt; からfalseを返すと、多くの小さな編集を一度に元に戻したり、やり直したりすることができます。 &lt;code&gt;addEdit&lt;/code&gt; メソッドを使用して同様の機能を実行することもできます。</target>
        </trans-unit>
        <trans-unit id="f3746255404c7a2b3ecfdce90d4c067951094108" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance identified by &lt;code&gt;blockName&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UnicodeBlock&lt;/code&gt; ので識別されるインスタンス &lt;code&gt;blockName&lt;/code&gt; を</target>
        </trans-unit>
        <trans-unit id="0d896f7ed14163beb92e5724cc9e8050c6b43c4b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UnicodeBlock&lt;/code&gt; instance representing the Unicode block of which this character is a member, or &lt;code&gt;null&lt;/code&gt; if the character is not a member of any Unicode block</source>
          <target state="translated">&lt;code&gt;UnicodeBlock&lt;/code&gt; のユニコードこの文字がメンバーであるブロック、または表すインスタンス &lt;code&gt;null&lt;/code&gt; 文字は、任意のUnicodeブロックのメンバーでない場合</target>
        </trans-unit>
        <trans-unit id="3da0426647b35089008f837fbe22d127f746d93b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UnicodeScript&lt;/code&gt; constant identified by &lt;code&gt;scriptName&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UnicodeScript&lt;/code&gt; ので識別される、一定 &lt;code&gt;scriptName&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="361aa86ab23e083f317e898d7085e206739f58ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UnicodeScript&lt;/code&gt; constant representing the Unicode script of which this character is assigned to.</source>
          <target state="translated">&lt;code&gt;UnicodeScript&lt;/code&gt; のこの文字が割り当てられているのはUnicodeスクリプトを表す定数。</target>
        </trans-unit>
        <trans-unit id="dff70a6a25ac748bc050f9064cb9cc771e6ae57b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Url&lt;/code&gt; property will be &lt;code&gt;null&lt;/code&gt; if the underlying data source is a non-SQL data source, such as a spreadsheet or an XML data source.</source>
          <target state="translated">&lt;code&gt;Url&lt;/code&gt; プロパティはなり &lt;code&gt;null&lt;/code&gt; 基礎となるデータソースは、スプレッドシートやXMLデータソースとして、非SQLデータソースである場合。</target>
        </trans-unit>
        <trans-unit id="6b22e15bc413740c6b41cef56f96b20ebfc3c2ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;UserPrincipalLookupService&lt;/code&gt; for this file system</source>
          <target state="translated">このファイルシステムの &lt;code&gt;UserPrincipalLookupService&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9c0c0ad3a9196627434d4da0577e73a19e9ed982" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ValueExp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ValueExp&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="95f12ecc4c931b6cd52c7c8712c089eb1f901958" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vector&lt;/code&gt; class implements a growable array of objects.</source>
          <target state="translated">&lt;code&gt;Vector&lt;/code&gt; クラスは、オブジェクトの可変長配列を実装します。</target>
        </trans-unit>
        <trans-unit id="4aeeb9de325145d9de793fc5e171c818d3209bca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vector&lt;/code&gt; class implements a growable array of objects. Like an array, it contains components that can be accessed using an integer index. However, the size of a &lt;code&gt;Vector&lt;/code&gt; can grow or shrink as needed to accommodate adding and removing items after the &lt;code&gt;Vector&lt;/code&gt; has been created.</source>
          <target state="translated">&lt;code&gt;Vector&lt;/code&gt; クラスは、オブジェクトの可変長配列を実装します。配列のように、整数のインデックスを使用してアクセスできるコンポーネントが含まれています。しかし、の大きさ &lt;code&gt;Vector&lt;/code&gt; 後のアイテムの追加と削除に対応するために、必要に応じて拡大または縮小することができます &lt;code&gt;Vector&lt;/code&gt; 作成されています。</target>
        </trans-unit>
        <trans-unit id="4a2a2d34e6edf9a736c688c4e496fc8f413e787d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vector&lt;/code&gt; of &lt;code&gt;Vectors&lt;/code&gt; of &lt;code&gt;Object&lt;/code&gt; values.</source>
          <target state="translated">&lt;code&gt;Vector&lt;/code&gt; の &lt;code&gt;Vectors&lt;/code&gt; の &lt;code&gt;Object&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="c51ed8f23325be7432bcd95a2fad8327dd3a6c7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vector&lt;/code&gt; of column identifiers.</source>
          <target state="translated">列識別子の &lt;code&gt;Vector&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef38f50778470be314c350ac1236d4ae66252c2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;VetoableChangeSupport&lt;/code&gt; associated with this &lt;code&gt;BeanContextChildSupport&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;VetoableChangeSupport&lt;/code&gt; これに関連した &lt;code&gt;BeanContextChildSupport&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="20a05157c7add57e69ed4b84eda43d3b9471dac5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Void&lt;/code&gt; class is an uninstantiable placeholder class to hold a reference to the &lt;code&gt;Class&lt;/code&gt; object representing the Java keyword void.</source>
          <target state="translated">&lt;code&gt;Void&lt;/code&gt; クラスへの参照を保持するuninstantiableプレースホルダー・クラスである &lt;code&gt;Class&lt;/code&gt; のJavaキーワードボイドを表すオブジェクト。</target>
        </trans-unit>
        <trans-unit id="b7201fbe9821d111b8e7310e2e9e5f50d2f9f0fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebRowSetImpl&lt;/code&gt; provides the standard reference implementation, which may be extended if required.</source>
          <target state="translated">&lt;code&gt;WebRowSetImpl&lt;/code&gt; は、必要に応じて延長することができる標準のリファレンス実装を提供します。</target>
        </trans-unit>
        <trans-unit id="9727e0ed3037aaa46ce224bd1fe010383f3480c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Window&lt;/code&gt; and its subcomponents can be made displayable again by rebuilding the native resources with a subsequent call to &lt;code&gt;pack&lt;/code&gt; or &lt;code&gt;show&lt;/code&gt;. The states of the recreated &lt;code&gt;Window&lt;/code&gt; and its subcomponents will be identical to the states of these objects at the point where the &lt;code&gt;Window&lt;/code&gt; was disposed (not accounting for additional modifications between those actions).</source>
          <target state="translated">&lt;code&gt;Window&lt;/code&gt; とそのサブコンポーネントは、後続の呼び出しでネイティブリソースを再構築することによって再び表示可能にすることができます &lt;code&gt;pack&lt;/code&gt; や &lt;code&gt;show&lt;/code&gt; 。再作成された &lt;code&gt;Window&lt;/code&gt; とそのサブコンポーネントの状態は、 &lt;code&gt;Window&lt;/code&gt; が破棄された時点でのこれらのオブジェクトの状態と同じになります（これらのアクション間の追加の変更は考慮されません）。</target>
        </trans-unit>
        <trans-unit id="9e95df5176a50ee550434605ecd3ba4571d76304" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Window&lt;/code&gt; class and the &lt;code&gt;Applet&lt;/code&gt; class are the validate roots in AWT. Swing introduces more validate roots.</source>
          <target state="translated">&lt;code&gt;Window&lt;/code&gt; クラスと &lt;code&gt;Applet&lt;/code&gt; クラスは、AWTでの検証の根です。Swingは、より多くの検証ルートを導入します。</target>
        </trans-unit>
        <trans-unit id="dcf547c8c4952ee62719999861c70718ea329248" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Window&lt;/code&gt; meets the requirements outlined in the &lt;a href=&quot;#isFocusableWindow()&quot;&gt;&lt;code&gt;isFocusableWindow()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;Window&lt;/code&gt; に概説要件を満たし&lt;a href=&quot;#isFocusableWindow()&quot;&gt; &lt;code&gt;isFocusableWindow()&lt;/code&gt; &lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="704045f5a2599d8a137d2e74c9f85efdab2b97d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Window&lt;/code&gt;'s &lt;code&gt;autoRequestFocus&lt;/code&gt; property is of the &lt;code&gt;true&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;Window&lt;/code&gt; の &lt;code&gt;autoRequestFocus&lt;/code&gt; のプロパティがである &lt;code&gt;true&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="26d20b795a509ccf345f4880f86bffc5ff46ea07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Writer&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Writer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="77fb3bff5f49c42c2161c3e19062b5010a06389f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Writer&lt;/code&gt; methods to write text throw &lt;code&gt;IOException&lt;/code&gt; if the text cannot be encoded using the specified charset.</source>
          <target state="translated">&lt;code&gt;Writer&lt;/code&gt; 書き込みテキストへのメソッドスロー &lt;code&gt;IOException&lt;/code&gt; がテキストが指定された文字セットを使用してエンコードすることができない場合。</target>
        </trans-unit>
        <trans-unit id="5df6357d2d9dd77291511c1a5a3bbe7008f4a76d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Writer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Writer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d0b59a3f7afdfb200daf7c7684da04108a0ed23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XAConnection&lt;/code&gt; interface is derived from the &lt;code&gt;PooledConnection&lt;/code&gt; interface, so what applies to a pooled connection also applies to a connection that is part of a distributed transaction. A transaction manager in the middle tier handles everything transparently. The only change in application code is that an application cannot do anything that would interfere with the transaction manager's handling of the transaction. Specifically, an application cannot call the methods &lt;code&gt;Connection.commit&lt;/code&gt; or &lt;code&gt;Connection.rollback&lt;/code&gt;, and it cannot set the connection to be in auto-commit mode (that is, it cannot call &lt;code&gt;Connection.setAutoCommit(true)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;XAConnection&lt;/code&gt; インターフェースが由来する &lt;code&gt;PooledConnection&lt;/code&gt; プールされた接続に適用されるものも分散トランザクションの一部である接続に適用されるように、インターフェース。中間層のトランザクションマネージャーは、すべてを透過的に処理します。アプリケーションコードの唯一の変更点は、アプリケーションがトランザクションマネージャのトランザクションの処理を妨げるようなことは何もできないことです。具体的には、アプリケーションはメソッド &lt;code&gt;Connection.commit&lt;/code&gt; または &lt;code&gt;Connection.rollback&lt;/code&gt; を呼び出すことができず、接続を自動コミットモードに設定することもできません（つまり、 &lt;code&gt;Connection.setAutoCommit(true)&lt;/code&gt; を呼び出すことはできません）。</target>
        </trans-unit>
        <trans-unit id="2fdc5e90dac380c583a94ac10964401cbc1bff2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLDecoder&lt;/code&gt; class is used to read XML documents created using the &lt;code&gt;XMLEncoder&lt;/code&gt; and is used just like the &lt;code&gt;ObjectInputStream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;XMLDecoder&lt;/code&gt; ののクラスを使用して作成したXML文書を読み取るために使用され &lt;code&gt;XMLEncoder&lt;/code&gt; をし、同じように使用され &lt;code&gt;ObjectInputStream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4c73680d790e9f555b97eb4fbffb24cd26c3ccca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLDecoder&lt;/code&gt; class is used to read XML documents created using the &lt;code&gt;XMLEncoder&lt;/code&gt; and is used just like the &lt;code&gt;ObjectInputStream&lt;/code&gt;. For example, one can use the following fragment to read the first object defined in an XML document written by the &lt;code&gt;XMLEncoder&lt;/code&gt; class:</source>
          <target state="translated">&lt;code&gt;XMLDecoder&lt;/code&gt; ののクラスを使用して作成したXML文書を読み取るために使用され &lt;code&gt;XMLEncoder&lt;/code&gt; をし、同じように使用され &lt;code&gt;ObjectInputStream&lt;/code&gt; 。たとえば、次のフラグメントを使用して、 &lt;code&gt;XMLEncoder&lt;/code&gt; クラスによって記述されたXMLドキュメントで定義された最初のオブジェクトを読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="b40fba744abf8f8cdfdbf7823211e024611a2005" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLEncoder&lt;/code&gt; class is a complementary alternative to the &lt;code&gt;ObjectOutputStream&lt;/code&gt; and can used to generate a textual representation of a &lt;em&gt;JavaBean&lt;/em&gt; in the same way that the &lt;code&gt;ObjectOutputStream&lt;/code&gt; can be used to create binary representation of &lt;code&gt;Serializable&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;XMLEncoder&lt;/code&gt; クラスは、に相補的代替物である &lt;code&gt;ObjectOutputStream&lt;/code&gt; のテキスト表現を生成するために使用することができる&lt;em&gt;JavaBeanの&lt;/em&gt;と同じ方法で &lt;code&gt;ObjectOutputStream&lt;/code&gt; のがのバイナリ表現を作成するために使用できる &lt;code&gt;Serializable&lt;/code&gt; オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="bc93ab4e94e8fd32e113d65a55be49ef42b7d783" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLEncoder&lt;/code&gt; class is a complementary alternative to the &lt;code&gt;ObjectOutputStream&lt;/code&gt; and can used to generate a textual representation of a &lt;em&gt;JavaBean&lt;/em&gt; in the same way that the &lt;code&gt;ObjectOutputStream&lt;/code&gt; can be used to create binary representation of &lt;code&gt;Serializable&lt;/code&gt; objects. For example, the following fragment can be used to create a textual representation the supplied &lt;em&gt;JavaBean&lt;/em&gt; and all its properties:</source>
          <target state="translated">&lt;code&gt;XMLEncoder&lt;/code&gt; クラスは、に相補的代替物である &lt;code&gt;ObjectOutputStream&lt;/code&gt; のテキスト表現を生成するために使用することができる&lt;em&gt;JavaBeanの&lt;/em&gt;と同じ方法で &lt;code&gt;ObjectOutputStream&lt;/code&gt; のがのバイナリ表現を作成するために使用できる &lt;code&gt;Serializable&lt;/code&gt; オブジェクトを。たとえば、次のフラグメントを使用して、提供された&lt;em&gt;JavaBean&lt;/em&gt;とそのすべてのプロパティのテキスト表現を作成できます。</target>
        </trans-unit>
        <trans-unit id="baee72131905882a77a0b4ca9b76ace184c77c99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLEncoder&lt;/code&gt; class provides a default denotation for &lt;em&gt;JavaBean&lt;/em&gt;s in which they are represented as XML documents complying with version 1.0 of the XML specification and the UTF-8 character encoding of the Unicode/ISO 10646 character set. The XML documents produced by the &lt;code&gt;XMLEncoder&lt;/code&gt; class are:</source>
          <target state="translated">&lt;code&gt;XMLEncoder&lt;/code&gt; クラスは、デフォルトの表記を提供&lt;em&gt;するJavaBean&lt;/em&gt;の彼らはXML仕様とUnicode / ISO 10646文字セットのUTF-8文字エンコーディングのバージョン1.0に準拠するXML文書として表現されているが。 &lt;code&gt;XMLEncoder&lt;/code&gt; クラスによって生成されるXMLドキュメントは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="773745b0980b73ae3cf7133fbf0740a9e51a6976" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLStreamReader&lt;/code&gt; or &lt;code&gt;XMLEventReader&lt;/code&gt; used to construct this &lt;code&gt;StAXSource&lt;/code&gt; is queried to determine the system identifier of the XML source.</source>
          <target state="translated">&lt;code&gt;XMLStreamReader&lt;/code&gt; 内または &lt;code&gt;XMLEventReader&lt;/code&gt; のこの構築するために使用される &lt;code&gt;StAXSource&lt;/code&gt; がはXMLソースのシステム識別子を決定するために照会されます。</target>
        </trans-unit>
        <trans-unit id="5e8ba5718ccb5dddefc8fcb9ef5b222f271f2b83" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathEvaluationResult&lt;/code&gt; interface represents the result of the evaluation of an XPath expression within the context of a particular node.</source>
          <target state="translated">&lt;code&gt;XPathEvaluationResult&lt;/code&gt; のインターフェースは、特定のノードのコンテキスト内のXPath式の評価の結果を表します。</target>
        </trans-unit>
        <trans-unit id="7979524a823b2b3c2152adeae36a863101800820" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathEvaluationResult&lt;/code&gt; interface represents the result of the evaluation of an XPath expression within the context of a particular node. The evaluation of an XPath expression can result in various result types as defined in XML Path Language (XPath) Version 1.0.</source>
          <target state="translated">&lt;code&gt;XPathEvaluationResult&lt;/code&gt; のインターフェースは、特定のノードのコンテキスト内のXPath式の評価の結果を表します。XPath式の評価により、XMLパス言語（XPath）バージョン1.0で定義されているさまざまな結果タイプが生成される可能性があります。</target>
        </trans-unit>
        <trans-unit id="fd7e2381f00dc37c671ca1b95d78f182b4a9d8c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathExpression&lt;/code&gt; interface represents a parsed and resolved XPath expression.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="864adcf3b012bbba70056106a86d52bf42863eff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathFactory&lt;/code&gt; builtin system-default implementation is only required to support the &lt;a href=&quot;#DEFAULT_OBJECT_MODEL_URI&quot;&gt;&lt;code&gt;default object model&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;../../../org/w3c/dom/package-summary&quot;&gt;W3C DOM&lt;/a&gt;, but may support additional object models.</source>
          <target state="translated">&lt;code&gt;XPathFactory&lt;/code&gt; 組み込みシステム・デフォルトの実装では、唯一のサポートに必要な&lt;a href=&quot;#DEFAULT_OBJECT_MODEL_URI&quot;&gt; &lt;code&gt;default object model&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../../org/w3c/dom/package-summary&quot;&gt;W3C DOMの&lt;/a&gt;が、追加のオブジェクトモデルをサポートすることができます。</target>
        </trans-unit>
        <trans-unit id="f9ce9690ea5d8f3d35027cfba07990e65b3fa285" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathNSResolver&lt;/code&gt; interface permit &lt;code&gt;prefix&lt;/code&gt; strings in the expression to be properly bound to &lt;code&gt;namespaceURI&lt;/code&gt; strings.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="464770db069d98604c0813c2d629cb661ff7a426" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathNSResolver&lt;/code&gt; interface permit &lt;code&gt;prefix&lt;/code&gt; strings in the expression to be properly bound to &lt;code&gt;namespaceURI&lt;/code&gt; strings. &lt;code&gt;XPathEvaluator&lt;/code&gt; can construct an implementation of &lt;code&gt;XPathNSResolver&lt;/code&gt; from a node, or the interface may be implemented by any application.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="30c24a58ce8f83955520baaac9ee2788a5837651" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathNamespace&lt;/code&gt; interface is returned by &lt;code&gt;XPathResult&lt;/code&gt; interfaces to represent the XPath namespace node type that DOM lacks.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="668ded359ece8d2b5275905cdbb1f7919b101575" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathNamespace&lt;/code&gt; interface is returned by &lt;code&gt;XPathResult&lt;/code&gt; interfaces to represent the XPath namespace node type that DOM lacks. There is no public constructor for this node type. Attempts to place it into a hierarchy or a NamedNodeMap result in a &lt;code&gt;DOMException&lt;/code&gt; with the code &lt;code&gt;HIERARCHY_REQUEST_ERR&lt;/code&gt; . This node is read only, so methods or setting of attributes that would mutate the node result in a DOMException with the code &lt;code&gt;NO_MODIFICATION_ALLOWED_ERR&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d653050c0bbc219e35952bc3cf4f5c4e2ea3d3d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathResult&lt;/code&gt; interface represents the result of the evaluation of an XPath 1.0 expression within the context of a particular node.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bed61e9ab59fdaac051379b01910e15ccf293b83" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathResult&lt;/code&gt; interface represents the result of the evaluation of an XPath 1.0 expression within the context of a particular node. Since evaluation of an XPath expression can result in various result types, this object makes it possible to discover and manipulate the type and value of the result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1579758fa332f4ff09bb6a3a0a884344e634c7db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathVariableResolver&lt;/code&gt; and the XPath evaluator must adhere to a contract that cannot be directly enforced by the API. Although variables may be mutable, that is, an application may wish to evaluate the same XPath expression more than once with different variable values, in the course of evaluating any single XPath expression, a variable's value &lt;strong&gt;&lt;em&gt;must&lt;/em&gt;&lt;/strong&gt; not change.</source>
          <target state="translated">&lt;code&gt;XPathVariableResolver&lt;/code&gt; およびXPath評価者は、直接APIによって強制することはできない契約に準拠する必要があります。変数は変更可能である場合があります。つまり、アプリケーションは、異なる変数値を使用して同じXPath式を複数回評価する場合が&lt;strong&gt;&lt;em&gt;あり&lt;/em&gt;&lt;/strong&gt;ますが、単一のXPath式を評価する過程で、変数の値を変更して&lt;strong&gt;&lt;em&gt;はなりませ&lt;/em&gt;&lt;/strong&gt;ん。</target>
        </trans-unit>
        <trans-unit id="dc6626b4ce56edf5eec0e4e7f1f6d83d431a9d81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[ ]&lt;/code&gt; characters are a</source>
          <target state="translated">&lt;code&gt;[ ]&lt;/code&gt; の文字があります</target>
        </trans-unit>
        <trans-unit id="a2448ee443a37bfe2270b1cc58275c79e860c644" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;aCommand&lt;/code&gt; will be set in the delivered event if specified.</source>
          <target state="translated">&lt;code&gt;aCommand&lt;/code&gt; はは、指定された場合に配信イベントに設定されます。</target>
        </trans-unit>
        <trans-unit id="7c55d0ff61eb4e937c515821a0807c8069fecf30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;aCondition&lt;/code&gt; can be one of:</source>
          <target state="translated">&lt;code&gt;aCondition&lt;/code&gt; は、のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="b980e0f175dba221828f4b57f7dd907c4fe4a7d5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;accessible&lt;/code&gt; flag when &lt;code&gt;true&lt;/code&gt; suppresses Java language access control checks to only enable &lt;a href=&quot;#get(java.lang.Object)&quot;&gt;&lt;em&gt;read&lt;/em&gt;&lt;/a&gt; access to these non-modifiable final fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5fbe9edcb70b42859b844ed294f412b8dd98d7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;accessible&lt;/code&gt; flag when &lt;code&gt;true&lt;/code&gt; suppresses Java language access control checks to only enable &lt;a href=&quot;field#get(java.lang.Object)&quot;&gt;&lt;em&gt;read&lt;/em&gt;&lt;/a&gt; access to these non-modifiable final fields.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cbec44aca0eff7c0fd9d646cfb96819a5b4c572f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;accumulator&lt;/code&gt; function must be an &lt;a href=&quot;package-summary#Associativity&quot;&gt;associative&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;accumulator&lt;/code&gt; 機能がなければなりません&lt;a href=&quot;package-summary#Associativity&quot;&gt;連想&lt;/a&gt;機能。</target>
        </trans-unit>
        <trans-unit id="4185fd67e39e58987d681ed4e049cb9068cef055" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;action&lt;/code&gt; argument is of the same format as the &lt;code&gt;eventPropertyName&lt;/code&gt; argument where the last property name identifies either a method name or writable property.</source>
          <target state="translated">&lt;code&gt;action&lt;/code&gt; 引数と同じフォーマットである &lt;code&gt;eventPropertyName&lt;/code&gt; の最後のプロパティ名を識別するメソッド名または書き込み可能なプロパティのいずれかの引数。</target>
        </trans-unit>
        <trans-unit id="31404f4484a67d5901851525c58dad6c4c563d5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;agentmain&lt;/code&gt; method has one of two possible signatures. The JVM first attempts to invoke the following method on the agent class:</source>
          <target state="translated">&lt;code&gt;agentmain&lt;/code&gt; の方法は、2つの可能なシグネチャのうちの1つを有します。JVMは最初に、エージェントクラスで次のメソッドを呼び出そうとします。</target>
        </trans-unit>
        <trans-unit id="cc78d234a40aa6ddd38f2300973ad58dbc9f2403" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;agentmain&lt;/code&gt; method should do any necessary initialization required to start the agent and return. If the agent cannot be started, for example the agent class cannot be loaded, the agent class does not define a conformant &lt;code&gt;agentmain&lt;/code&gt; method, or the &lt;code&gt;agentmain&lt;/code&gt; method throws an uncaught exception or error, the JVM will abort.</source>
          <target state="translated">&lt;code&gt;agentmain&lt;/code&gt; の方法は、エージェントとリターンを開始するために必要なすべての必要な初期化を行う必要があります。エージェントを起動できない場合、たとえば、エージェントクラスをロードできない場合、エージェントクラスが準拠する &lt;code&gt;agentmain&lt;/code&gt; メソッドを定義していない場合、または &lt;code&gt;agentmain&lt;/code&gt; メソッドがキャッチされない例外またはエラーをスローした場合、JVMは異常終了します。</target>
        </trans-unit>
        <trans-unit id="e39ec8f12fac3e1235b57830cba8b781dedf715e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;agentmain&lt;/code&gt; method should do any necessary initialization required to start the agent. When startup is complete the method should return. If the agent cannot be started (for example, because the agent class cannot be loaded, or because the agent class does not have a conformant &lt;code&gt;agentmain&lt;/code&gt; method), the JVM will not abort. If the &lt;code&gt;agentmain&lt;/code&gt; method throws an uncaught exception it will be ignored (but may be logged by the JVM for troubleshooting purposes).</source>
          <target state="translated">&lt;code&gt;agentmain&lt;/code&gt; の方法は、エージェントを起動するために必要なすべての必要な初期化を行う必要があります。起動が完了すると、メソッドは戻るはずです。エージェントを開始できない場合（たとえば、エージェントクラスをロードできない場合、またはエージェントクラスに準拠した &lt;code&gt;agentmain&lt;/code&gt; メソッドがない場合）、JVMは中止されません。 &lt;code&gt;agentmain&lt;/code&gt; メソッドがキャッチされない例外をスローした場合、それは無視されます（ただし、トラブルシューティングの目的でJVMによってログに記録される場合があります）。</target>
        </trans-unit>
        <trans-unit id="4200792e507990527888853e33e39555b27217a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attribute&lt;/code&gt; parameter identifies the attribute to be read and takes the form:</source>
          <target state="translated">&lt;code&gt;attribute&lt;/code&gt; パラメータは、属性が読み取られるように識別し、形式をとります。</target>
        </trans-unit>
        <trans-unit id="e13622be0932a01b09ea0231195ad9dee2d891a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attribute&lt;/code&gt; parameter identifies the attribute to be set and takes the form:</source>
          <target state="translated">&lt;code&gt;attribute&lt;/code&gt; パラメータを識別属性が設定され、フォームをとることにします。</target>
        </trans-unit>
        <trans-unit id="9300dec972e233c14dfee6f24a1437eb62d16c5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attributes&lt;/code&gt; parameter identifies the attributes to be read and takes the form:</source>
          <target state="translated">&lt;code&gt;attributes&lt;/code&gt; 属性が読み込まれるパラメータが識別されているとの形式をとります。</target>
        </trans-unit>
        <trans-unit id="e891f2a34d3ff9a18061c78c854c7a39d310fd9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attributes&lt;/code&gt;&lt;code&gt;NamedNodeMaps&lt;/code&gt; are equal. This is: they are both &lt;code&gt;null&lt;/code&gt;, or they have the same length and for each node that exists in one map there is a node that exists in the other map and is equal, although not necessarily at the same index.</source>
          <target state="translated">&lt;code&gt;NamedNodeMaps&lt;/code&gt; の &lt;code&gt;attributes&lt;/code&gt; は同じです。つまり、両方とも &lt;code&gt;null&lt;/code&gt; であるか、同じ長さであり、一方のマップに存在するノードごとに、もう一方のマップに存在し、等しいノードがありますが、必ずしも同じインデックスにあるとは限りません。</target>
        </trans-unit>
        <trans-unit id="71ec10680a515404dcea83dc93b34a00ae544957" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is an optional array of file &lt;a href=&quot;../file/attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; ファイルのオプション配列であるパラメータ&lt;a href=&quot;../file/attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;ファイルを作成する際にアトミックに設定します。</target>
        </trans-unit>
        <trans-unit id="aa73d718a6e84fdffc4666766b8c6f4155f86290" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the link. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; パラメータはオプションで&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;attributes&lt;/code&gt; &lt;/a&gt;のリンクを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name()&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="f5d11588e62ee6ecee510a144a13ae053b7ded0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the link. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; パラメータはオプションで&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;attributes&lt;/code&gt; &lt;/a&gt;のリンクを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="6a9611129a94268b694e7f0a6870f3b072a950a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when a new file is created.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;新しいファイルが作成されたときにアトミックに設定します。</target>
        </trans-unit>
        <trans-unit id="9a59843ac8ffdbb8b27a7af904c73b09addfd665" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the directory. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;、ディレクトリを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name()&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="1530cb7be2e1a90d2e32e41b80f5181fbd3c409a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the directory. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;、ディレクトリを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="a2eafb0f18e2c0f90cfaa47597137720724d74ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;のファイルを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name()&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="09484803eed7eb220bb9cee3c89264c72f6e5064" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored. When no file attributes are specified, then the resulting file may have more restrictive access permissions to files created by the &lt;a href=&quot;../../io/file#createTempFile(java.lang.String,java.lang.String,java.io.File)&quot;&gt;&lt;code&gt;File.createTempFile(String,String,File)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;のファイルを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name()&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。ファイル属性が指定されていない場合、結果のファイルには、&lt;a href=&quot;../../io/file#createTempFile(java.lang.String,java.lang.String,java.io.File)&quot;&gt; &lt;code&gt;File.createTempFile(String,String,File)&lt;/code&gt; &lt;/a&gt;メソッドによって作成されたファイルへのより制限的なアクセス許可が含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="ad9b07c9e2205e3502079d33de386fcf7c13ff4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;のファイルを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="3d4f30d19e092c8b774921588c985e988e8af3fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored. When no file attributes are specified, then the resulting file may have more restrictive access permissions to files created by the &lt;a href=&quot;../../io/file#createTempFile-java.lang.String-java.lang.String-java.io.File-&quot;&gt;&lt;code&gt;File.createTempFile(String,String,File)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;のファイルを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。ファイル属性が指定されていない場合、結果のファイルには、&lt;a href=&quot;../../io/file#createTempFile-java.lang.String-java.lang.String-java.io.File-&quot;&gt; &lt;code&gt;File.createTempFile(String,String,File)&lt;/code&gt; &lt;/a&gt;メソッドによって作成されたファイルへのより限定的なアクセス許可が与えられる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b269fdea6c6d809695550b9428ade177ba1ea0ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the nonexistent directories. Each file attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;存在しないディレクトリを作成する際にアトミックに設定します。各ファイル属性は、その&lt;a href=&quot;attribute/fileattribute#name()&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="eac58af08c25e30b8096bbec06d65d5969d2351b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the nonexistent directories. Each file attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;存在しないディレクトリを作成する際にアトミックに設定します。各ファイル属性はその&lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="9310f8ddf2f2e1abe2704763c0d8698944c86a52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;available&lt;/code&gt; method for class &lt;code&gt;InputStream&lt;/code&gt; always returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">クラス &lt;code&gt;InputStream&lt;/code&gt; の &lt;code&gt;available&lt;/code&gt; メソッドは常に &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="07e935be2d00da600d82b1459bdd0645c167a8af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;available&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; always returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; の &lt;code&gt;available&lt;/code&gt; メソッドは常に &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2a223f99a73adb8d4155acdcdbe953d90137df1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;available&lt;/code&gt; method of the underlying stream returns zero, indicating that further input requests would block.</source>
          <target state="translated">基になるストリームの &lt;code&gt;available&lt;/code&gt; メソッドはゼロを返し、それ以上の入力要求がブロックされることを示します。</target>
        </trans-unit>
        <trans-unit id="3e1885899fe620f932f25aade18693cc40c3bf9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backlog&lt;/code&gt; argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogether. The value provided should be greater than &lt;code&gt;0&lt;/code&gt;. If it is less than or equal to &lt;code&gt;0&lt;/code&gt;, then an implementation specific default will be used.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c19d6f589a03480c7507cbcf9ea41e93f9410bd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backlog&lt;/code&gt; argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than &lt;code&gt;0&lt;/code&gt;. If it is less than or equal to &lt;code&gt;0&lt;/code&gt;, then an implementation specific default will be used.</source>
          <target state="translated">&lt;code&gt;backlog&lt;/code&gt; 引数は、ソケット上の保留中の接続の要求の最大数です。その正確なセマンティクスは実装固有です。特に、実装では最大長を課したり、パラメータをすべて無視したりする場合があります。指定する値は &lt;code&gt;0&lt;/code&gt; より大きい必要があります。 &lt;code&gt;0&lt;/code&gt; 以下の場合、実装固有のデフォルトが使用されます。</target>
        </trans-unit>
        <trans-unit id="29ad9363012d93283f3d04ff689ea4b529ac1006" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backlog&lt;/code&gt; argument must be a positive value greater than 0. If the value passed if equal or less than 0, then the default value will be assumed.</source>
          <target state="translated">&lt;code&gt;backlog&lt;/code&gt; 値以下で0を、デフォルト値が仮定される場合に渡した場合引数が0より正の値も大きくなければなりません。</target>
        </trans-unit>
        <trans-unit id="b04fd34021527ffa6eec03ad117996148e622e5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backlog&lt;/code&gt; parameter is the maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. If the &lt;code&gt;backlog&lt;/code&gt; parameter has the value &lt;code&gt;0&lt;/code&gt;, or a negative value, then an implementation specific default is used.</source>
          <target state="translated">&lt;code&gt;backlog&lt;/code&gt; パラメータは、ソケット上の保留中の接続の最大数です。その正確なセマンティクスは実装固有です。特に、実装では最大長を課したり、パラメータをすべて無視したりする場合があります。場合 &lt;code&gt;backlog&lt;/code&gt; パラメータが値を有する &lt;code&gt;0&lt;/code&gt; 、または負の値を、次に、実装固有のデフォルトが使用されます。</target>
        </trans-unit>
        <trans-unit id="9758dfb7f206fee802af2ff421e244af4ed6b224" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beginIndex&lt;/code&gt; and &lt;code&gt;endIndex&lt;/code&gt; parameters specify the subsequence of name elements. The name that is &lt;em&gt;closest&lt;/em&gt; to the root in the directory hierarchy has index &lt;code&gt;0&lt;/code&gt;. The name that is &lt;em&gt;farthest&lt;/em&gt; from the root has index &lt;a href=&quot;#getNameCount()&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;-1&lt;/code&gt;. The returned &lt;code&gt;Path&lt;/code&gt; object has the name elements that begin at &lt;code&gt;beginIndex&lt;/code&gt; and extend to the element at index &lt;code&gt;
 endIndex-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beginIndex&lt;/code&gt; パラメータと &lt;code&gt;endIndex&lt;/code&gt; のパラメータは、name要素のサブシーケンスを指定します。ディレクトリ階層のルートに&lt;em&gt;最も近い&lt;/em&gt;名前のインデックスは &lt;code&gt;0&lt;/code&gt; です。ルートから&lt;em&gt;最も遠い&lt;/em&gt;名前のインデックス&lt;a href=&quot;#getNameCount()&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; &lt;code&gt;-1&lt;/code&gt; です。返される &lt;code&gt;Path&lt;/code&gt; オブジェクトには、 &lt;code&gt;beginIndex&lt;/code&gt; で始まり、インデックス &lt;code&gt; endIndex-1&lt;/code&gt; の要素まで拡張されるname要素があります。</target>
        </trans-unit>
        <trans-unit id="038e82ed2e83821157222aec4b1425ddc2acdb2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beginIndex&lt;/code&gt; and &lt;code&gt;endIndex&lt;/code&gt; parameters specify the subsequence of name elements. The name that is &lt;em&gt;closest&lt;/em&gt; to the root in the directory hierarchy has index &lt;code&gt;0&lt;/code&gt;. The name that is &lt;em&gt;farthest&lt;/em&gt; from the root has index &lt;a href=&quot;path#getNameCount--&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;-1&lt;/code&gt;. The returned &lt;code&gt;Path&lt;/code&gt; object has the name elements that begin at &lt;code&gt;beginIndex&lt;/code&gt; and extend to the element at index &lt;code&gt;endIndex-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beginIndex&lt;/code&gt; パラメータと &lt;code&gt;endIndex&lt;/code&gt; のパラメータは、name要素のサブシーケンスを指定します。ディレクトリ階層のルートに&lt;em&gt;最も近い&lt;/em&gt;名前のインデックスは &lt;code&gt;0&lt;/code&gt; です。ルートから&lt;em&gt;最も遠い&lt;/em&gt;名前のインデックス&lt;a href=&quot;path#getNameCount--&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; &lt;code&gt;-1&lt;/code&gt; です。返される &lt;code&gt;Path&lt;/code&gt; オブジェクトには、 &lt;code&gt;beginIndex&lt;/code&gt; で始まり、インデックス &lt;code&gt;endIndex-1&lt;/code&gt; の要素まで続く名前要素があります。</target>
        </trans-unit>
        <trans-unit id="23cf20e6e7ba36d73ecb53fccee07162da8d920d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;body&lt;/code&gt; handle must not be &lt;code&gt;null&lt;/code&gt;; its type must be of the form &lt;code&gt;(V A...)V&lt;/code&gt;, where &lt;code&gt;V&lt;/code&gt; is non-&lt;code&gt;void&lt;/code&gt;, or else &lt;code&gt;(A...)void&lt;/code&gt;. (In the &lt;code&gt;void&lt;/code&gt; case, we assign the type &lt;code&gt;void&lt;/code&gt; to the name &lt;code&gt;V&lt;/code&gt;, and we will write &lt;code&gt;(V A...)V&lt;/code&gt; with the understanding that a &lt;code&gt;void&lt;/code&gt; type &lt;code&gt;V&lt;/code&gt; is quietly dropped from the parameter list, leaving &lt;code&gt;(A...)V&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;body&lt;/code&gt; ハンドルがあってはならない &lt;code&gt;null&lt;/code&gt; 。そのタイプは、 &lt;code&gt;(V A...)V&lt;/code&gt; の形式である必要があります。ここで、 &lt;code&gt;V&lt;/code&gt; は非 &lt;code&gt;void&lt;/code&gt; 、または &lt;code&gt;(A...)void&lt;/code&gt; です。 （では &lt;code&gt;void&lt;/code&gt; の場合は、我々はタイプ割り当てる &lt;code&gt;void&lt;/code&gt; 名前に &lt;code&gt;V&lt;/code&gt; 、そして我々は書きます &lt;code&gt;(V A...)V&lt;/code&gt; という理解で &lt;code&gt;void&lt;/code&gt; 型 &lt;code&gt;V&lt;/code&gt; は静かに残して、パラメータリストから削除される &lt;code&gt;(A...)V&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="87c334e233d7c15dbce8f02769f49f0543984685" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;body&lt;/code&gt; handle must not be &lt;code&gt;null&lt;/code&gt;; its type must be of the form &lt;code&gt;(V I A...)V&lt;/code&gt;, where &lt;code&gt;V&lt;/code&gt; is non-&lt;code&gt;void&lt;/code&gt;, or else &lt;code&gt;(I A...)void&lt;/code&gt;. (In the &lt;code&gt;void&lt;/code&gt; case, we assign the type &lt;code&gt;void&lt;/code&gt; to the name &lt;code&gt;V&lt;/code&gt;, and we will write &lt;code&gt;(V I A...)V&lt;/code&gt; with the understanding that a &lt;code&gt;void&lt;/code&gt; type &lt;code&gt;V&lt;/code&gt; is quietly dropped from the parameter list, leaving &lt;code&gt;(I A...)V&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;body&lt;/code&gt; ハンドルがあってはならない &lt;code&gt;null&lt;/code&gt; 。そのタイプは、 &lt;code&gt;(V I A...)V&lt;/code&gt; の形式である必要があります。ここで、 &lt;code&gt;V&lt;/code&gt; は非 &lt;code&gt;void&lt;/code&gt; 、または &lt;code&gt;(I A...)void&lt;/code&gt; です。 （では &lt;code&gt;void&lt;/code&gt; の場合は、我々はタイプ割り当てる &lt;code&gt;void&lt;/code&gt; 名前に &lt;code&gt;V&lt;/code&gt; 、そして我々は書きます &lt;code&gt;(V I A...)V&lt;/code&gt; することを理解した上で &lt;code&gt;void&lt;/code&gt; 型 &lt;code&gt;V&lt;/code&gt; は静かに残して、パラメータリストから削除される &lt;code&gt;(I A...)V&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="1e3ecb1f1c113d7459558edaafd1c22e159c798c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;body&lt;/code&gt; handle must not be &lt;code&gt;null&lt;/code&gt;; its type must be of the form &lt;code&gt;(V T A...)V&lt;/code&gt;, where &lt;code&gt;V&lt;/code&gt; is non-&lt;code&gt;void&lt;/code&gt;, or else &lt;code&gt;(T A...)void&lt;/code&gt;. (In the &lt;code&gt;void&lt;/code&gt; case, we assign the type &lt;code&gt;void&lt;/code&gt; to the name &lt;code&gt;V&lt;/code&gt;, and we will write &lt;code&gt;(V T A...)V&lt;/code&gt; with the understanding that a &lt;code&gt;void&lt;/code&gt; type &lt;code&gt;V&lt;/code&gt; is quietly dropped from the parameter list, leaving &lt;code&gt;(T A...)V&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;body&lt;/code&gt; ハンドルがあってはならない &lt;code&gt;null&lt;/code&gt; 。そのタイプは、 &lt;code&gt;(V T A...)V&lt;/code&gt; の形式である必要があります。ここで、 &lt;code&gt;V&lt;/code&gt; は非 &lt;code&gt;void&lt;/code&gt; 、または &lt;code&gt;(T A...)void&lt;/code&gt; です。（では &lt;code&gt;void&lt;/code&gt; の場合は、我々はタイプ割り当てる &lt;code&gt;void&lt;/code&gt; 名前に &lt;code&gt;V&lt;/code&gt; 、そして我々は書きます &lt;code&gt;(V T A...)V&lt;/code&gt; という理解では &lt;code&gt;void&lt;/code&gt; 型 &lt;code&gt;V&lt;/code&gt; は静かに残して、パラメータリストから削除される &lt;code&gt;(T A...)V&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="2607bcf7e52a949a9098498708e7ed0874e36f9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bytes&lt;/code&gt; parameter is the class bytes of a valid class file (as defined by the &lt;em&gt;The Java Virtual Machine Specification&lt;/em&gt;) with a class name in the same package as the lookup class.</source>
          <target state="translated">&lt;code&gt;bytes&lt;/code&gt; パラメータは、（で定義されたクラスは、有効なクラスファイルのバイトである&lt;em&gt;ザ・Java仮想マシン仕様&lt;/em&gt;のルックアップクラスと同じパッケージ内のクラス名を使用して）。</target>
        </trans-unit>
        <trans-unit id="ce830a6dc99fa048ff691c489beb4b6f9e5a2ab8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;caller&lt;/code&gt; parameter must be a &lt;code&gt;WebRowSet&lt;/code&gt; object whose &lt;code&gt;XmlWriter&lt;/code&gt; field contains a reference to this &lt;code&gt;XmlWriter&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;caller&lt;/code&gt; パラメータがなければなりません &lt;code&gt;WebRowSet&lt;/code&gt; そのオブジェクト &lt;code&gt;XmlWriter&lt;/code&gt; フィールドこの参照が含まれ &lt;code&gt;XmlWriter&lt;/code&gt; オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="549d3c0cc45d126bfe6b339f4e7d396df73338b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cause&lt;/code&gt; is not initialized.</source>
          <target state="translated">&lt;code&gt;cause&lt;/code&gt; 初期化されていません。</target>
        </trans-unit>
        <trans-unit id="a0fdf3dc80a013dc8c4afe2a38389db91bc45e47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cert.provider.x509v1&lt;/code&gt; property is set to a default implementation for X.509 such as:</source>
          <target state="translated">&lt;code&gt;cert.provider.x509v1&lt;/code&gt; プロパティは、X.509などのデフォルトの実装に設定されています：</target>
        </trans-unit>
        <trans-unit id="51472b90fccbf1d42ba6001caf6f52c8f72d01a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;changeFlags&lt;/code&gt; parameter of any &lt;code&gt;HierarchyEvent&lt;/code&gt; instance takes one of the following values:</source>
          <target state="translated">&lt;code&gt;HierarchyEvent&lt;/code&gt; インスタンスの &lt;code&gt;changeFlags&lt;/code&gt; パラメーターは、次のいずれかの値を取ります。</target>
        </trans-unit>
        <trans-unit id="7e2379eb6107205000a967e604f084a77bb6b353" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;changeListener&lt;/code&gt; is the listener we add to the model.</source>
          <target state="translated">&lt;code&gt;changeListener&lt;/code&gt; です、モデルに追加するリスナーです。</target>
        </trans-unit>
        <trans-unit id="312b7fe1366e0a3c03057bcb7caeef6dc182a366" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;char&lt;/code&gt; data type (and therefore the value that a &lt;code&gt;Character&lt;/code&gt; object encapsulates) are based on the original Unicode specification, which defined characters as fixed-width 16-bit entities. The Unicode Standard has since been changed to allow for characters whose representation requires more than 16 bits. The range of legal &lt;em&gt;code point&lt;/em&gt;s is now U+0000 to U+10FFFF, known as &lt;em&gt;Unicode scalar value&lt;/em&gt;. (Refer to the &lt;a href=&quot;http://www.unicode.org/reports/tr27/#notation&quot;&gt;&lt;i&gt; definition&lt;/i&gt;&lt;/a&gt; of the U+</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; データタイプ（したがって値その &lt;code&gt;Character&lt;/code&gt; オブジェクト封入）は固定幅16ビットエンティティとしての文字を定義して、元のUnicode仕様に基づいています。Unicode規格は、16ビットを超える表現を必要とする文字を許可するように変更されました。正当な&lt;em&gt;コードポイント&lt;/em&gt;の範囲は、&lt;em&gt;Unicodeスカラー値&lt;/em&gt;として知られるU + 0000からU + 10FFFFになりました。（U +の&lt;a href=&quot;http://www.unicode.org/reports/tr27/#notation&quot;&gt;&lt;i&gt;定義&lt;/i&gt;&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="ff4d9d45c7f6a6e3cf9fa2efa7e3c3623f753d29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;char&lt;/code&gt; data type (and therefore the value that a &lt;code&gt;Character&lt;/code&gt; object encapsulates) are based on the original Unicode specification, which defined characters as fixed-width 16-bit entities. The Unicode Standard has since been changed to allow for characters whose representation requires more than 16 bits. The range of legal &lt;em&gt;code point&lt;/em&gt;s is now U+0000 to U+10FFFF, known as &lt;em&gt;Unicode scalar value&lt;/em&gt;. (Refer to the &lt;a href=&quot;https://www.unicode.org/reports/tr27/#notation&quot;&gt;&lt;i&gt; definition&lt;/i&gt;&lt;/a&gt; of the U+</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="159881b528b95151218ddcf06070876dc2535a5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;checkAccess&lt;/code&gt; method of the parent thread group is called with no arguments; this may result in a security exception.</source>
          <target state="translated">親スレッドグループの &lt;code&gt;checkAccess&lt;/code&gt; メソッドは、引数なしで呼び出されます。これにより、セキュリティ例外が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="98813f94bb2ecfd8b901aa13def3a342737037f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;checkImage&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt; calls its peer's &lt;code&gt;checkImage&lt;/code&gt; method to calculate the flags. If this component does not yet have a peer, the component's toolkit's &lt;code&gt;checkImage&lt;/code&gt; method is called instead.</source>
          <target state="translated">&lt;code&gt;checkImage&lt;/code&gt; の方法 &lt;code&gt;Component&lt;/code&gt; そのピアの呼び出しを &lt;code&gt;checkImage&lt;/code&gt; のフラグを計算する方法を。このコンポーネントにまだピアがない場合は、代わりにコンポーネントのツールキットの &lt;code&gt;checkImage&lt;/code&gt; メソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5e8a72d273e2359cf1503e1f34724cc9c2dc1f67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;checkPermission&lt;/code&gt; method that takes a context object in addition to a permission makes access decisions based on that context, rather than on that of the current execution thread. Code within a different context can thus call that method, passing the permission and the previously-saved context object. A sample call, using the SecurityManager &lt;code&gt;sm&lt;/code&gt; obtained as in the previous example, is the following:</source>
          <target state="translated">&lt;code&gt;checkPermission&lt;/code&gt; 許可に加えて、コンテキストオブジェクトを取るメソッドではなく、現在の実行スレッドのそれに比べて、そのコンテキストに基づいてアクセスを決定します。したがって、別のコンテキスト内のコードはそのメソッドを呼び出して、アクセス許可と以前に保存されたコンテキストオブジェクトを渡すことができます。前の例のように取得したSecurityManager &lt;code&gt;sm&lt;/code&gt; を使用したサンプルコールは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="fc365efffcfa5fe96ee6d3621be5f1681a395b54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;childNodes&lt;/code&gt;&lt;code&gt;NodeLists&lt;/code&gt; are equal. This is: they are both &lt;code&gt;null&lt;/code&gt;, or they have the same length and contain equal nodes at the same index. Note that normalization can affect equality; to avoid this, nodes should be normalized before being compared.</source>
          <target state="translated">&lt;code&gt;childNodes&lt;/code&gt; &lt;code&gt;NodeLists&lt;/code&gt; は同じです。これは、両方とも &lt;code&gt;null&lt;/code&gt; であるか、同じ長さで同じインデックスに等しいノードが含まれていることです。正規化は平等に影響を与える可能性があることに注意してください。これを回避するには、ノードを比較する前に正規化する必要があります。</target>
        </trans-unit>
        <trans-unit id="3a5d909660d723c346a03d0f41bd75687e11de0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cleanup&lt;/code&gt; handle will be passed one or two additional leading arguments. The first is the exception thrown during the execution of the &lt;code&gt;target&lt;/code&gt; handle, or &lt;code&gt;null&lt;/code&gt; if no exception was thrown. The second is the result of the execution of the &lt;code&gt;target&lt;/code&gt; handle, or, if it throws an exception, a &lt;code&gt;null&lt;/code&gt;, zero, or &lt;code&gt;false&lt;/code&gt; value of the required type is supplied as a placeholder. The second argument is not present if the &lt;code&gt;target&lt;/code&gt; handle has a &lt;code&gt;void&lt;/code&gt; return type. (Note that, except for argument type conversions, combinators represent &lt;code&gt;void&lt;/code&gt; values in parameter lists by omitting the corresponding paradoxical arguments, not by inserting &lt;code&gt;null&lt;/code&gt; or zero values.)</source>
          <target state="translated">&lt;code&gt;cleanup&lt;/code&gt; ハンドルは、1つのまたは2つの追加の主要な引数が渡されます。 1つ目は、 &lt;code&gt;target&lt;/code&gt; ハンドルの実行中にスローされる例外、または例外がスローされなかった場合は &lt;code&gt;null&lt;/code&gt; です。 2つ目は、 &lt;code&gt;target&lt;/code&gt; ハンドルの実行結果です。例外がスローされた場合は、必要なタイプの &lt;code&gt;null&lt;/code&gt; 、0、または &lt;code&gt;false&lt;/code&gt; の値がプレースホルダーとして提供されます。 &lt;code&gt;target&lt;/code&gt; ハンドルの戻り値の型が &lt;code&gt;void&lt;/code&gt; の場合、2番目の引数は存在しません。 （引数型変換を除いて、コンビネータは &lt;code&gt;void&lt;/code&gt; を表すことに注意してください &lt;code&gt;null&lt;/code&gt; またはゼロの値を挿入するのではなく、対応する逆説的な引数を省略して、パラメータリストの値を指定します。）</target>
        </trans-unit>
        <trans-unit id="8a37143162f383e40541a3c536a0bad8cdbdac3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clear&lt;/code&gt; method sets calendar field(s) undefined. &lt;code&gt;GregorianCalendar&lt;/code&gt; uses the following default value for each calendar field if its value is undefined.</source>
          <target state="translated">&lt;code&gt;clear&lt;/code&gt; メソッドセットカレンダフィールド（複数可）に定義されていません。 &lt;code&gt;GregorianCalendar&lt;/code&gt; は、値が定義されていない場合、各カレンダーフィールドに次のデフォルト値を使用します。</target>
        </trans-unit>
        <trans-unit id="23c5d3ad8f50c87806bd51026f62bd3f83bef13e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clientProperty&lt;/code&gt; dictionary is not intended to support large scale extensions to JComponent nor should be it considered an alternative to subclassing when designing a new component.</source>
          <target state="translated">&lt;code&gt;clientProperty&lt;/code&gt; の辞書は、JComponentのに大規模な拡張機能をサポートすることを意図していないにもそれが新しいコンポーネントを設計するときのサブクラス化の代替を検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="eca26951481b1fa79d4de62013b67d4d4f363ce7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clockSequence&lt;/code&gt; value is only meaningful in a time-based UUID, which has version type 1. If this UUID is not a time-based UUID then this method throws UnsupportedOperationException.</source>
          <target state="translated">&lt;code&gt;clockSequence&lt;/code&gt; の値は、このUUIDが時間ベースのUUIDでない場合、このメソッドはUnsupportedOperationExceptionをスローバージョンタイプ1を有する時間ベースのUUIDにのみ意味があります。</target>
        </trans-unit>
        <trans-unit id="17c69f5047e8b8edc7675c7afa6d967e75c7e9a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;CipherInputStream&lt;/code&gt; calls the &lt;code&gt;close&lt;/code&gt; method of its underlying input stream.</source>
          <target state="translated">&lt;code&gt;close&lt;/code&gt; の方法 &lt;code&gt;CipherInputStream&lt;/code&gt; 呼び出し、 &lt;code&gt;close&lt;/code&gt; その基礎となる入力ストリームの方法を。</target>
        </trans-unit>
        <trans-unit id="8d16e59d74dedefbb9dca52dccbe54c8fd4fa9e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt; calls its &lt;code&gt;flush&lt;/code&gt; method, and then calls the &lt;code&gt;close&lt;/code&gt; method of its underlying output stream.</source>
          <target state="translated">&lt;code&gt;FilterOutputStream&lt;/code&gt; の &lt;code&gt;close&lt;/code&gt; メソッドは、 &lt;code&gt;flush&lt;/code&gt; メソッドを呼び出してから、基になる出力ストリームの &lt;code&gt;close&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="7e09c5caa8f665f3b57f5f5f897465a41503642c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; の &lt;code&gt;close&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="b8a4c592a0ecb263805a474537d609748a764ffc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;OutputStream&lt;/code&gt; の &lt;code&gt;close&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="d2531be3b89a10105b22c29564d26639ca4a592a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;color&lt;/code&gt; corresponds to a hex &lt;code&gt;String&lt;/code&gt; as understood by &lt;code&gt;Color.decode&lt;/code&gt;. For example, one of the &lt;code&gt;name-color&lt;/code&gt; pairs is &lt;code&gt;
 &quot;desktop&quot;-&quot;#005C5C&quot;&lt;/code&gt;. This corresponds to the &lt;code&gt;
 SystemColor&lt;/code&gt; field &lt;code&gt;desktop&lt;/code&gt;, with a color value of &lt;code&gt;new Color(0x005C5C)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;color&lt;/code&gt; 六角に対応する &lt;code&gt;String&lt;/code&gt; によって理解されるよう &lt;code&gt;Color.decode&lt;/code&gt; の。たとえば、 &lt;code&gt;name-color&lt;/code&gt; ペアの1つは、 &lt;code&gt; &quot;desktop&quot;-&quot;#005C5C&quot;&lt;/code&gt; です。これは、 &lt;code&gt; SystemColor&lt;/code&gt; フィールド &lt;code&gt;desktop&lt;/code&gt; 対応し、色の値は &lt;code&gt;new Color(0x005C5C)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="afcf8a2a1d1719caacb80cda4d490e70edec9e26" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;com.sun.jndi.dns.timeout.initial&lt;/code&gt; property, if set, specifies the number of milliseconds to use as the initial timeout period (i.e., before any doubling). If this property has not been set, the default initial timeout is 1000 milliseconds.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="745458c6629b6652e699dc150f6db6c585c3e422" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;com.sun.jndi.dns.timeout.retries&lt;/code&gt; property, if set, specifies the number of times to retry each server using the exponential backoff algorithm described previously. If this property has not been set, the default number of retries is 4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="272a141fe34e23fe1ed9cd1611d645995f50e5bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;combine&lt;/code&gt; method investigates the two input arrays of ProtectionDomains and returns a single array containing the updated ProtectionDomains. In the simplest case, the &lt;code&gt;combine&lt;/code&gt; method merges the two stacks into one. In more complex cases, the &lt;code&gt;combine&lt;/code&gt; method returns a modified stack of ProtectionDomains. The modification may have added new ProtectionDomains, removed certain ProtectionDomains, or simply updated existing ProtectionDomains. Re-ordering and other optimizations to the ProtectionDomains are also permitted. Typically the &lt;code&gt;combine&lt;/code&gt; method bases its updates on the information encapsulated in the &lt;code&gt;DomainCombiner&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;combine&lt;/code&gt; 方法がたProtectionDomainsの2つの入力配列を調査し、更新されたProtectionDomainsを含む単一の配列を返します。最も単純なケースでは、 &lt;code&gt;combine&lt;/code&gt; メソッドは2つのスタックを1つにマージします。より複雑なケースでは、 &lt;code&gt;combine&lt;/code&gt; メソッドはProtectionDomainsの変更されたスタックを返します。変更により、新しいProtectionDomainが追加された、特定のProtectionDomainが削除された、または単に既存のProtectionDomainが更新された可能性があります。 ProtectionDomainsの並べ替えやその他の最適化も許可されます。通常、 &lt;code&gt;combine&lt;/code&gt; メソッドは、 &lt;code&gt;DomainCombiner&lt;/code&gt; にカプセル化された情報に基づいて更新を行います。</target>
        </trans-unit>
        <trans-unit id="44c35d21bf67cf9c4f42525ec0fe6621b0e16aaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;command&lt;/code&gt; property may not be needed if the &lt;code&gt;RowSet&lt;/code&gt; object gets its data from a source that does not support commands, such as a spreadsheet or other tabular file. Thus, this property is optional and may be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;command&lt;/code&gt; 場合はプロパティが必要とされないこと &lt;code&gt;RowSet&lt;/code&gt; オブジェクトは、スプレッドシートや他の表形式のファイルなどのコマンドを、サポートしていないソースからデータを取得します。したがって、このプロパティはオプションであり、 &lt;code&gt;null&lt;/code&gt; の場合があります。</target>
        </trans-unit>
        <trans-unit id="928da17633454632f0bf287b021e570d64611c36" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;completed&lt;/code&gt; argument to the &lt;a href=&quot;#end(boolean)&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt; method tells whether or not the I/O operation actually completed, that is, whether it had any effect that would be visible to the invoker. In the case of an operation that reads bytes, for example, this argument should be &lt;code&gt;true&lt;/code&gt; if, and only if, some bytes were actually transferred into the invoker's target buffer.</source>
          <target state="translated">&lt;a href=&quot;#end(boolean)&quot;&gt; &lt;code&gt;end&lt;/code&gt; &lt;/a&gt;メソッドの &lt;code&gt;completed&lt;/code&gt; 引数は、I / O操作が実際に完了したかどうか、つまり、呼び出し元に表示される効果があったかどうかを示します。たとえば、バイトを読み取る操作の場合、一部のバイトが実際に呼び出し元のターゲットバッファーに転送された場合にのみ、この引数は &lt;code&gt;true&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="7a90cfbc00ca33b6d145e6807e96aa2002b85303" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;completed&lt;/code&gt; argument to the &lt;a href=&quot;abstractinterruptiblechannel#end-boolean-&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt; method tells whether or not the I/O operation actually completed, that is, whether it had any effect that would be visible to the invoker. In the case of an operation that reads bytes, for example, this argument should be &lt;code&gt;true&lt;/code&gt; if, and only if, some bytes were actually transferred into the invoker's target buffer.</source>
          <target state="translated">&lt;a href=&quot;abstractinterruptiblechannel#end-boolean-&quot;&gt; &lt;code&gt;end&lt;/code&gt; &lt;/a&gt;メソッドへの &lt;code&gt;completed&lt;/code&gt; 引数は、I / O操作が実際に完了したかどうか、つまり、呼び出し側から見える影響があったかどうかを示します。たとえば、バイトを読み取る操作の場合、一部のバイトが呼び出し元のターゲットバッファーに実際に転送された場合にのみ、この引数は &lt;code&gt;true&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="a5d94cf564353166be1db9cb4e8271b8ded55663" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;components&lt;/code&gt; array.</source>
          <target state="translated">&lt;code&gt;components&lt;/code&gt; アレイ。</target>
        </trans-unit>
        <trans-unit id="15e9d479711030667ddbf21dea87568e74553c2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;contains&lt;/code&gt; and &lt;code&gt;intersects&lt;/code&gt; methods consider the interior of a &lt;code&gt;Shape&lt;/code&gt; to be the area it encloses as if it were filled. This means that these methods consider unclosed shapes to be implicitly closed for the purpose of determining if a shape contains or intersects a rectangle or if a shape contains a point.</source>
          <target state="translated">&lt;code&gt;contains&lt;/code&gt; と &lt;code&gt;intersects&lt;/code&gt; 方法は、内部検討する &lt;code&gt;Shape&lt;/code&gt; 、それが満たされたかのように囲む領域であると。つまり、これらのメソッドは、形状に長方形が含まれるか交差するか、または形状に点が含まれるかどうかを判断する目的で、閉じられていない形状が暗黙的に閉じられていると見なします。</target>
        </trans-unit>
        <trans-unit id="3114ba8be141b590dba202ffb1a396b416bb2f2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;contentPane&lt;/code&gt; fills the entire viewable area, minus the &lt;code&gt;menuBar&lt;/code&gt;, if present.</source>
          <target state="translated">&lt;code&gt;contentPane&lt;/code&gt; は、表示可能領域全体を埋める、マイナス &lt;code&gt;menuBar&lt;/code&gt; 、存在する場合。</target>
        </trans-unit>
        <trans-unit id="f41c89acf8d6260cc4c3edf1c8a3be1a487a118d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;countMatches&lt;/code&gt; operation can be invoked as follows:</source>
          <target state="translated">&lt;code&gt;countMatches&lt;/code&gt; を次のように操作を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="72616ce87a153d98c6a948602b30731bd218fc29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;createMBeanServer&lt;/code&gt; permission implies the &lt;code&gt;newMBeanServer&lt;/code&gt; permission.</source>
          <target state="translated">&lt;code&gt;createMBeanServer&lt;/code&gt; の許可が意味 &lt;code&gt;newMBeanServer&lt;/code&gt; の許可を。</target>
        </trans-unit>
        <trans-unit id="367254891eef16003973d17f79d44e07bdd79f5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;d.width&lt;/code&gt; and &lt;code&gt;d.height&lt;/code&gt; values are automatically enlarged if either is less than the minimum size as specified by previous call to &lt;code&gt;setMinimumSize&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;d.width&lt;/code&gt; と &lt;code&gt;d.height&lt;/code&gt; の前回の呼び出しで指定された以下の最小寸法よりもいずれかの場合に値が自動的に拡大され &lt;code&gt;setMinimumSize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bdee408adddec1cc773279770c4eb9ef77c9c337" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; is always a legal UTF-16 sequence.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 常に、法的なUTF-16シーケンスです。</target>
        </trans-unit>
        <trans-unit id="f4549daee89cce421917747661b9b9dbdbc5d4cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deregister&lt;/code&gt; method is intended only to be used by JDBC Drivers and not by applications. JDBC drivers are recommended to not implement &lt;code&gt;DriverAction&lt;/code&gt; in a public class. If there are active connections to the database at the time that the &lt;code&gt;deregister&lt;/code&gt; method is called, it is implementation specific as to whether the connections are closed or allowed to continue. Once this method is called, it is implementation specific as to whether the driver may limit the ability to create new connections to the database, invoke other &lt;code&gt;Driver&lt;/code&gt; methods or throw a &lt;code&gt;SQLException&lt;/code&gt;. Consult your JDBC driver's documentation for additional information on its behavior.</source>
          <target state="translated">&lt;code&gt;deregister&lt;/code&gt; 方法は、唯一のJDBCドライバではなくアプリケーションによって使用されることを意図しています。 JDBCドライバーは、パブリッククラスに &lt;code&gt;DriverAction&lt;/code&gt; を実装しないことをお勧めします。 &lt;code&gt;deregister&lt;/code&gt; メソッドが呼び出されたときにデータベースへのアクティブな接続がある場合、接続が閉じられているか、続行が許可されているかは実装固有です。このメソッドが呼び出されると、ドライバーがデータベースへの新しい接続を作成する機能を制限するか、他の &lt;code&gt;Driver&lt;/code&gt; メソッドを呼び出すか、 &lt;code&gt;SQLException&lt;/code&gt; をスローするかどうかに関して実装固有です。動作の詳細については、JDBCドライバーのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="5b8e66ca8dcc60e252a66649960d4c45b1465623" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;descriptor&lt;/code&gt; can contain entries that will define the values returned by certain methods of this class, as explained in the &lt;a href=&quot;package-summary#constraints&quot;&gt; package description&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;descriptor&lt;/code&gt; で説明したように、このクラスの特定のメソッドによって返される値を定義するエントリを含むことができ&lt;a href=&quot;package-summary#constraints&quot;&gt;、パッケージの説明を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e74408bd8afc062ff7d9cfe3aab2c13ea6f53b21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dest&lt;/code&gt; argument refers to an object that is not an array.</source>
          <target state="translated">&lt;code&gt;dest&lt;/code&gt; 引数が配列でないオブジェクトを指します。</target>
        </trans-unit>
        <trans-unit id="8294f1f3beefad7591b5cc3ea0551866cab7aae2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;destPos&lt;/code&gt; argument is negative.</source>
          <target state="translated">&lt;code&gt;destPos&lt;/code&gt; の引数が負です。</target>
        </trans-unit>
        <trans-unit id="71160060862e661265f3fd734b0330aa232357eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;detail&lt;/code&gt; attribute inherited from &lt;code&gt;UIEvent&lt;/code&gt; indicates the number of times a mouse button has been pressed and released over the same screen location during a user action. The attribute value is 1 when the user begins this action and increments by 1 for each full sequence of pressing and releasing. If the user moves the mouse between the mousedown and mouseup the value will be set to 0, indicating that no click is occurring.</source>
          <target state="translated">&lt;code&gt;detail&lt;/code&gt; から継承された属性 &lt;code&gt;UIEvent&lt;/code&gt; マウスボタンが押されたユーザアクションの間に同じ画面位置にわたって放出された回数を示しています。ユーザーがこのアクションを開始すると、属性値は1になり、押して放すシーケンス全体ごとに1ずつ増加します。ユーザーがマウスをマウスダウンとマウスアップの間で動かすと、値は0に設定され、クリックが発生していないことを示します。</target>
        </trans-unit>
        <trans-unit id="2a960f617370308fb92badef083ce1edd73bfd82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;digest&lt;/code&gt; method can be called once for a given number of updates. After &lt;code&gt;digest&lt;/code&gt; has been called, the MessageDigest object is reset to its initialized state.</source>
          <target state="translated">&lt;code&gt;digest&lt;/code&gt; 方法は、アップデートの与えられた数のために一度呼び出すことができます。後 &lt;code&gt;digest&lt;/code&gt; 呼ばれてきた、MessageDigestオブジェクトは初期化状態にリセットされます。</target>
        </trans-unit>
        <trans-unit id="e1dde7d27adbf8e6cef3b9bbcdbc4cbcc2ad96bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;double&lt;/code&gt; format can represent all consecutive integers in the range -2&lt;sup&gt;53&lt;/sup&gt; to 2&lt;sup&gt;53&lt;/sup&gt;. If the pipeline has more than 2&lt;sup&gt;53&lt;/sup&gt; values, the divisor in the average computation will saturate at 2&lt;sup&gt;53&lt;/sup&gt;, leading to additional numerical errors.</source>
          <target state="translated">&lt;code&gt;double&lt;/code&gt; フォーマットは範囲内のすべての連続した整数を表すことができ、-2 &lt;sup&gt;53&lt;/sup&gt; 2 &lt;sup&gt;53&lt;/sup&gt;。パイプラインに2 &lt;sup&gt;53を&lt;/sup&gt;超える値がある場合、平均計算の除数は2 &lt;sup&gt;53&lt;/sup&gt;で飽和し、追加の数値エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="cad4be16e75ad0f3392aac98141ceaed42bece6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;double&lt;/code&gt; value that is closer than any other to</source>
          <target state="translated">&lt;code&gt;double&lt;/code&gt; 他により近い値</target>
        </trans-unit>
        <trans-unit id="1e3ae85b07a531401bb2890e79fc22f20146cf1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;draw3DRect&lt;/code&gt; and &lt;code&gt;fill3DRect&lt;/code&gt; methods were implemented in terms of the &lt;code&gt;drawLine&lt;/code&gt; and &lt;code&gt;fillRect&lt;/code&gt; methods in the &lt;code&gt;Graphics&lt;/code&gt; class which would predicate their behavior upon the current &lt;code&gt;Stroke&lt;/code&gt; and &lt;code&gt;Paint&lt;/code&gt; objects in a &lt;code&gt;Graphics2D&lt;/code&gt; context. This class overrides those implementations with versions that use the current &lt;code&gt;Color&lt;/code&gt; exclusively, overriding the current &lt;code&gt;Paint&lt;/code&gt; and which uses &lt;code&gt;fillRect&lt;/code&gt; to describe the exact same behavior as the preexisting methods regardless of the setting of the current &lt;code&gt;Stroke&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;draw3DRect&lt;/code&gt; と &lt;code&gt;fill3DRect&lt;/code&gt; 方法は換算で実施された &lt;code&gt;drawLine&lt;/code&gt; と &lt;code&gt;fillRect&lt;/code&gt; のメソッド &lt;code&gt;Graphics&lt;/code&gt; 電流にその動作を述語なるクラス &lt;code&gt;Stroke&lt;/code&gt; 及び &lt;code&gt;Paint&lt;/code&gt; 内のオブジェクトを &lt;code&gt;Graphics2D&lt;/code&gt; コンテキスト。このクラスは、現在の &lt;code&gt;Color&lt;/code&gt; を排他的に使用し、現在の &lt;code&gt;Paint&lt;/code&gt; をオーバーライドし、 &lt;code&gt;fillRect&lt;/code&gt; を使用して、現在の &lt;code&gt;Stroke&lt;/code&gt; の設定に関係なく、既存のメソッドとまったく同じ動作を記述するバージョンでこれらの実装をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="6f02492238ec3eeb18bc396353d14b09af775519" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dstOffset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;charsequence#length()&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;dstOffset&lt;/code&gt; コピーの引数がより大きいか等しくなければならない &lt;code&gt;0&lt;/code&gt; 、未満又は等しい&lt;a href=&quot;charsequence#length()&quot;&gt;長さ&lt;/a&gt;この配列の。</target>
        </trans-unit>
        <trans-unit id="99457e6b4813c6110cd28c3bdc215ba87cac93e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dstOffset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;stringbuffer#length--&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;dstOffset&lt;/code&gt; コピーの引数がより大きいか等しくなければならない &lt;code&gt;0&lt;/code&gt; 、未満又は等しい&lt;a href=&quot;stringbuffer#length--&quot;&gt;長さ&lt;/a&gt;この配列の。</target>
        </trans-unit>
        <trans-unit id="cf3f3c8673cb205a88acf65cbe9d481cc7bd21e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dstOffset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;stringbuilder#length--&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;dstOffset&lt;/code&gt; コピーの引数がより大きいか等しくなければならない &lt;code&gt;0&lt;/code&gt; 、未満又は等しい&lt;a href=&quot;stringbuilder#length--&quot;&gt;長さ&lt;/a&gt;この配列の。</target>
        </trans-unit>
        <trans-unit id="57b48e0bd69c0d96f6dab5758abac0f4d57b113a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoded&lt;/code&gt; argument is illegal if it:</source>
          <target state="translated">次の場合、 &lt;code&gt;encoded&lt;/code&gt; 引数は不正です。</target>
        </trans-unit>
        <trans-unit id="7f825d64728b91255aebca414eb9e4365aeec903" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;endOfInput&lt;/code&gt; parameter advises this method as to whether the invoker can provide further input beyond that contained in the given input buffer. If there is a possibility of providing additional input then the invoker should pass &lt;code&gt;false&lt;/code&gt; for this parameter; if there is no possibility of providing further input then the invoker should pass &lt;code&gt;true&lt;/code&gt;. It is not erroneous, and in fact it is quite common, to pass &lt;code&gt;false&lt;/code&gt; in one invocation and later discover that no further input was actually available. It is critical, however, that the final invocation of this method in a sequence of invocations always pass &lt;code&gt;true&lt;/code&gt; so that any remaining undecoded input will be treated as being malformed.</source>
          <target state="translated">&lt;code&gt;endOfInput&lt;/code&gt; のパラメータは、呼び出しが指定された入力バッファに含まれるそれを超えて、さらに入力を提供することができるかどうかに関して、この方法をアドバイス。追加の入力を提供する可能性がある場合、呼び出し元はこのパラメーターに &lt;code&gt;false&lt;/code&gt; を渡す必要があります。さらに入力を提供する可能性がない場合、呼び出し側は &lt;code&gt;true&lt;/code&gt; を渡す必要があります。1回の呼び出しで &lt;code&gt;false&lt;/code&gt; を渡して、後で実際に使用できる入力がないことを検出することは、誤りではなく、実際には非常に一般的です。ただし、呼び出しのシーケンスでのこのメソッドの最後の呼び出しは常に &lt;code&gt;true&lt;/code&gt; を渡すため、残りのデコードされていない入力はすべて不正な形式として処理されます。</target>
        </trans-unit>
        <trans-unit id="fabf47fc50497b896963aa9019b8b35e3fbde409" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;endOfInput&lt;/code&gt; parameter advises this method as to whether the invoker can provide further input beyond that contained in the given input buffer. If there is a possibility of providing additional input then the invoker should pass &lt;code&gt;false&lt;/code&gt; for this parameter; if there is no possibility of providing further input then the invoker should pass &lt;code&gt;true&lt;/code&gt;. It is not erroneous, and in fact it is quite common, to pass &lt;code&gt;false&lt;/code&gt; in one invocation and later discover that no further input was actually available. It is critical, however, that the final invocation of this method in a sequence of invocations always pass &lt;code&gt;true&lt;/code&gt; so that any remaining unencoded input will be treated as being malformed.</source>
          <target state="translated">&lt;code&gt;endOfInput&lt;/code&gt; のパラメータは、呼び出しが指定された入力バッファに含まれるそれを超えて、さらに入力を提供することができるかどうかに関して、この方法をアドバイス。追加の入力を提供する可能性がある場合、呼び出し元はこのパラメーターに &lt;code&gt;false&lt;/code&gt; を渡す必要があります。さらに入力を提供する可能性がない場合、呼び出し側は &lt;code&gt;true&lt;/code&gt; を渡す必要があります。1回の呼び出しで &lt;code&gt;false&lt;/code&gt; を渡して、後で実際に使用できる入力がないことを検出することは、誤りではなく、実際には非常に一般的です。ただし、呼び出しのシーケンスにおけるこのメソッドの最後の呼び出しは常に &lt;code&gt;true&lt;/code&gt; を渡し、残りのエンコードされていない入力が不正な形式として処理されることが重要です。</target>
        </trans-unit>
        <trans-unit id="ec11602184cb13ced71453ae56dda30935562022" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;entities&lt;/code&gt;&lt;code&gt;NamedNodeMaps&lt;/code&gt; are equal.</source>
          <target state="translated">&lt;code&gt;entities&lt;/code&gt; &lt;code&gt;NamedNodeMaps&lt;/code&gt; は同じです。</target>
        </trans-unit>
        <trans-unit id="ec561af054842027cb5a40ad05b4b5c7e68a8699" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;entry&lt;/code&gt; argument is valid only for the duration of the invocation. Using &lt;code&gt;entry&lt;/code&gt; after the call returns results in undefined behavior.</source>
          <target state="translated">&lt;code&gt;entry&lt;/code&gt; 引数は呼び出しの間有効です。呼び出しが戻った後に &lt;code&gt;entry&lt;/code&gt; を使用すると、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="759ffc9229118351f3a52e836520820e1dc112e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equals()&lt;/code&gt; method for an enumeration class just does a test for identical objects (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">列挙型クラスの &lt;code&gt;equals()&lt;/code&gt; メソッドは、同一のオブジェクト（ &lt;code&gt;==&lt;/code&gt; ）のテストのみを行います。</target>
        </trans-unit>
        <trans-unit id="b29ad1a11acf214b8866d6a3f630b101a0ca3675" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equals&lt;/code&gt; method for class &lt;code&gt;Object&lt;/code&gt; implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, this method returns &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; refer to the same object (&lt;code&gt;x == y&lt;/code&gt; has the value &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="translated">クラス &lt;code&gt;Object&lt;/code&gt; の &lt;code&gt;equals&lt;/code&gt; メソッドは、オブジェクトに対して最も識別可能な同値関係を実装します。つまり、null以外の参照値 &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; の場合、このメソッドは、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; が同じオブジェクトを参照する場合（ &lt;code&gt;x == y&lt;/code&gt; の値が &lt;code&gt;true&lt;/code&gt; ）の場合にのみ &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="387966673ba7ec974b34376b9ba2a99dc7f3ff88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equals&lt;/code&gt; method implements an equivalence relation on non-null object references:</source>
          <target state="translated">&lt;code&gt;equals&lt;/code&gt; メソッドを実装にnull以外のオブジェクト参照上の同値関係を：</target>
        </trans-unit>
        <trans-unit id="5611c44255183f5d91cb4e6ea30bca9c8f5bc511" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;estimateDepth&lt;/code&gt; specifies the estimate number of stack frames this &lt;code&gt;StackWalker&lt;/code&gt; will traverse that the &lt;code&gt;StackWalker&lt;/code&gt; could use as a hint for the buffer size.</source>
          <target state="translated">&lt;code&gt;estimateDepth&lt;/code&gt; はこのスタックフレームの推定数を指定 &lt;code&gt;StackWalker&lt;/code&gt; がいることを横断する &lt;code&gt;StackWalker&lt;/code&gt; は、バッファサイズのヒントとして使用することができます。</target>
        </trans-unit>
        <trans-unit id="542970e582dd284bb20814dd3b131537943f85a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eventPropertyName&lt;/code&gt; string is used to extract a value from the incoming event object that is passed to the target method. The common case is the target method takes no arguments, in which case a value of null should be used for the &lt;code&gt;eventPropertyName&lt;/code&gt;. Alternatively if you want the incoming event object passed directly to the target method use the empty string. The format of the &lt;code&gt;eventPropertyName&lt;/code&gt; string is a sequence of methods or properties where each method or property is applied to the value returned by the preceding method starting from the incoming event object. The syntax is: &lt;code&gt;propertyName{.propertyName}*&lt;/code&gt; where &lt;code&gt;propertyName&lt;/code&gt; matches a method or property. For example, to extract the &lt;code&gt;point&lt;/code&gt; property from a &lt;code&gt;MouseEvent&lt;/code&gt;, you could use either &lt;code&gt;&quot;point&quot;&lt;/code&gt; or &lt;code&gt;&quot;getPoint&quot;&lt;/code&gt; as the &lt;code&gt;eventPropertyName&lt;/code&gt;. To extract the &quot;text&quot; property from a &lt;code&gt;MouseEvent&lt;/code&gt; with a &lt;code&gt;JLabel&lt;/code&gt; source use any of the following as &lt;code&gt;eventPropertyName&lt;/code&gt;: &lt;code&gt;&quot;source.text&quot;&lt;/code&gt;, &lt;code&gt;&quot;getSource.text&quot; &quot;getSource.getText&quot;&lt;/code&gt; or &lt;code&gt;&quot;source.getText&quot;&lt;/code&gt;. If a method can not be found, or an exception is generated as part of invoking a method a &lt;code&gt;RuntimeException&lt;/code&gt; will be thrown at dispatch time. For example, if the incoming event object is null, and &lt;code&gt;eventPropertyName&lt;/code&gt; is non-null and not empty, a &lt;code&gt;RuntimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;eventPropertyName&lt;/code&gt; の文字列は、ターゲットメソッドに渡される受信イベントオブジェクトから値を抽出するために使用されます。一般的なケースは、ターゲットメソッドが引数をとらない場合です。この場合、 &lt;code&gt;eventPropertyName&lt;/code&gt; にはnullの値を使用する必要があります。または、着信イベントオブジェクトをターゲットメソッドに直接渡す場合は、空の文字列を使用します。 &lt;code&gt;eventPropertyName&lt;/code&gt; 文字列の形式は、一連のメソッドまたはプロパティであり、各メソッドまたはプロパティは、着信イベントオブジェクトから開始して前のメソッドによって返される値に適用されます。構文は次のとおりです &lt;code&gt;propertyName{.propertyName}*&lt;/code&gt; ここで、 &lt;code&gt;propertyName&lt;/code&gt; はメソッドまたはプロパティと一致します。たとえば、 &lt;code&gt;point&lt;/code&gt; を抽出するには &lt;code&gt;MouseEvent&lt;/code&gt; のプロパティの場合、 &lt;code&gt;eventPropertyName&lt;/code&gt; として &lt;code&gt;&quot;point&quot;&lt;/code&gt; または &lt;code&gt;&quot;getPoint&quot;&lt;/code&gt; getPoint 」のいずれかを使用できます。 「テキスト」プロパティを抽出し &lt;code&gt;MouseEvent&lt;/code&gt; と &lt;code&gt;JLabel&lt;/code&gt; ののいずれかとして、以下のソース使用 &lt;code&gt;eventPropertyName&lt;/code&gt; ： &lt;code&gt;&quot;source.text&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;getSource.text&quot; &quot;getSource.getText&quot;&lt;/code&gt; 又は &lt;code&gt;&quot;source.getText&quot;&lt;/code&gt; 。メソッドが見つからない場合、またはメソッドの呼び出しの一部として例外が生成された場合、ディスパッチ時に &lt;code&gt;RuntimeException&lt;/code&gt; がスローされます。たとえば、着信イベントオブジェクトがnullの場合、 &lt;code&gt;eventPropertyName&lt;/code&gt; はnullではなく、空ではありません。 &lt;code&gt;RuntimeException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="979f15807ff26fd3232fc39f57a589f6474444ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eventPropertyName&lt;/code&gt; string is used to extract a value from the incoming event object that is passed to the target method. The common case is the target method takes no arguments, in which case a value of null should be used for the &lt;code&gt;eventPropertyName&lt;/code&gt;. Alternatively if you want the incoming event object passed directly to the target method use the empty string. The format of the &lt;code&gt;eventPropertyName&lt;/code&gt; string is a sequence of methods or properties where each method or property is applied to the value returned by the preceding method starting from the incoming event object. The syntax is: &lt;code&gt;propertyName{.propertyName}*&lt;/code&gt; where &lt;code&gt;propertyName&lt;/code&gt; matches a method or property. For example, to extract the &lt;code&gt;point&lt;/code&gt; property from a &lt;code&gt;MouseEvent&lt;/code&gt;, you could use either &lt;code&gt;&quot;point&quot;&lt;/code&gt; or &lt;code&gt;&quot;getPoint&quot;&lt;/code&gt; as the &lt;code&gt;eventPropertyName&lt;/code&gt;. To extract the &quot;text&quot; property from a &lt;code&gt;MouseEvent&lt;/code&gt; with a &lt;code&gt;JLabel&lt;/code&gt; source use any of the following as &lt;code&gt;eventPropertyName&lt;/code&gt;: &lt;code&gt;&quot;source.text&quot;&lt;/code&gt;, &lt;code&gt;&quot;getSource.text&quot;&lt;/code&gt;&lt;code&gt;&quot;getSource.getText&quot;&lt;/code&gt; or &lt;code&gt;&quot;source.getText&quot;&lt;/code&gt;. If a method can not be found, or an exception is generated as part of invoking a method a &lt;code&gt;RuntimeException&lt;/code&gt; will be thrown at dispatch time. For example, if the incoming event object is null, and &lt;code&gt;eventPropertyName&lt;/code&gt; is non-null and not empty, a &lt;code&gt;RuntimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;eventPropertyName&lt;/code&gt; の文字列は、ターゲットメソッドに渡される受信イベントオブジェクトから値を抽出するために使用されます。一般的なケースは、ターゲットメソッドが引数を取らない場合です。その場合、 &lt;code&gt;eventPropertyName&lt;/code&gt; にnullの値を使用する必要があります。または、着信イベントオブジェクトをターゲットメソッドに直接渡す場合は、空の文字列を使用します。 &lt;code&gt;eventPropertyName&lt;/code&gt; 文字列の形式は、一連のメソッドまたはプロパティであり、各メソッドまたはプロパティは、着信イベントオブジェクトから始まる、前のメソッドによって返された値に適用されます。構文は次のとおりです &lt;code&gt;propertyName{.propertyName}*&lt;/code&gt; ここで、 &lt;code&gt;propertyName&lt;/code&gt; はメソッドまたはプロパティと一致します。たとえば、 &lt;code&gt;point&lt;/code&gt; を抽出するには &lt;code&gt;MouseEvent&lt;/code&gt; のプロパティでは、 &lt;code&gt;&quot;point&quot;&lt;/code&gt; または &lt;code&gt;&quot;getPoint&quot;&lt;/code&gt; &lt;code&gt;eventPropertyName&lt;/code&gt; 」のいずれかをeventPropertyNameとして使用できます。 「テキスト」プロパティを抽出し &lt;code&gt;MouseEvent&lt;/code&gt; と &lt;code&gt;JLabel&lt;/code&gt; ののいずれかとして、以下のソース使用 &lt;code&gt;eventPropertyName&lt;/code&gt; ： &lt;code&gt;&quot;source.text&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;getSource.text&quot;&lt;/code&gt; &lt;code&gt;&quot;getSource.getText&quot;&lt;/code&gt; 又は &lt;code&gt;&quot;source.getText&quot;&lt;/code&gt; 。メソッドが見つからない場合、またはメソッドの呼び出しの一部として例外が生成された場合は、ディスパッチ時に &lt;code&gt;RuntimeException&lt;/code&gt; がスローされます。たとえば、着信イベントオブジェクトがnullで、 &lt;code&gt;eventPropertyName&lt;/code&gt; nullではなく空ではない場合、 &lt;code&gt;RuntimeException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="11b7dfa61c07755540a7b91b193348ac328193f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method executes an SQL statement and indicates the form of the first result. You must then use the methods &lt;code&gt;getResultSet&lt;/code&gt; or &lt;code&gt;getUpdateCount&lt;/code&gt; to retrieve the result, and &lt;code&gt;getMoreResults&lt;/code&gt; to move to any subsequent result(s).</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; 方法は、SQL文を実行し、最初の結果の形式を示しています。その後、メソッドを使用する必要があり &lt;code&gt;getResultSet&lt;/code&gt; メソッドまたは &lt;code&gt;getUpdateCount&lt;/code&gt; はした結果を取得するために、および &lt;code&gt;getMoreResults&lt;/code&gt; により引き続き任意の結果（複数可）に移動します。</target>
        </trans-unit>
        <trans-unit id="05464faee96a489e25104ce5867b437da02b7e6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method finds a method whose name is the same as the &lt;code&gt;methodName&lt;/code&gt; property, and invokes the method on the target.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; メソッドは、その名と同じ方法見つけ &lt;code&gt;methodName&lt;/code&gt; ののプロパティを、ターゲット上のメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="881d0e5738f41f203ab7920ce95659722dd4768f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method finds a method whose name is the same as the &lt;code&gt;methodName&lt;/code&gt; property, and invokes the method on the target. When the target's class defines many methods with the given name the implementation should choose the most specific method using the algorithm specified in the Java Language Specification (15.11). The dynamic class of the target and arguments are used in place of the compile-time type information and, like the &lt;a href=&quot;../../../java.base/java/lang/reflect/method&quot;&gt;&lt;code&gt;Method&lt;/code&gt;&lt;/a&gt; class itself, conversion between primitive values and their associated wrapper classes is handled internally.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; メソッドは、その名と同じ方法見つけ &lt;code&gt;methodName&lt;/code&gt; ののプロパティを、ターゲット上のメソッドを呼び出します。ターゲットのクラスが指定された名前で多くのメソッドを定義する場合、実装はJava言語仕様（15.11）で指定されたアルゴリズムを使用して最も具体的なメソッドを選択する必要があります。ターゲットと引数の動的クラスは、コンパイル時の型情報の代わりに使用され、&lt;a href=&quot;../../../java.base/java/lang/reflect/method&quot;&gt; &lt;code&gt;Method&lt;/code&gt; &lt;/a&gt;クラス自体と同様に、プリミティブ値とそれに関連するラッパークラス間の変換は内部で処理されます。</target>
        </trans-unit>
        <trans-unit id="7b4b06ad05dfb91d784c6607e33529a4e06af587" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method finds a method whose name is the same as the &lt;code&gt;methodName&lt;/code&gt; property, and invokes the method on the target. When the target's class defines many methods with the given name the implementation should choose the most specific method using the algorithm specified in the Java Language Specification (15.11). The dynamic class of the target and arguments are used in place of the compile-time type information and, like the &lt;a href=&quot;../lang/reflect/method&quot;&gt;&lt;code&gt;Method&lt;/code&gt;&lt;/a&gt; class itself, conversion between primitive values and their associated wrapper classes is handled internally.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; メソッドは、その名と同じ方法見つけ &lt;code&gt;methodName&lt;/code&gt; ののプロパティを、ターゲット上のメソッドを呼び出します。ターゲットのクラスが特定の名前を持つ多くのメソッドを定義する場合、実装は、Java言語仕様（15.11）で指定されたアルゴリズムを使用して、最も具体的なメソッドを選択する必要があります。ターゲットの動的クラスと引数は、コンパイル時の型情報の代わりに使用され、&lt;a href=&quot;../lang/reflect/method&quot;&gt; &lt;code&gt;Method&lt;/code&gt; &lt;/a&gt;クラス自体と同様に、プリミティブ値とそれに関連するラッパークラス間の変換は内部で処理されます。</target>
        </trans-unit>
        <trans-unit id="8ad6c0c213db0ee82bf11ddff27fdf95642bb749" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method may use the following properties to create a connection for reading data: url, data source name, user name, password, transaction isolation, and type map. The &lt;code&gt;execute&lt;/code&gt; method may use the following properties to create a statement to execute a command: command, read only, maximum field size, maximum rows, escape processing, and query timeout.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; URL、データソース名、ユーザー名、パスワード、トランザクション遮断、および型マップ：メソッドは、データを読み込むための接続を作成するには、次のプロパティを使用することができます。 &lt;code&gt;execute&lt;/code&gt; 方法は、コマンドを実行するためのステートメントを作成するために、次のプロパティを使用することができます：コマンド、読み取り専用、最大フィールドサイズ、最大行、エスケープ処理、およびクエリのタイムアウトを。</target>
        </trans-unit>
        <trans-unit id="d2e86b01e43a8878ea8710bd314038dcf77ab8f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method returns a &lt;code&gt;boolean&lt;/code&gt; to indicate the form of the first result. You must call either the method &lt;code&gt;getResultSet&lt;/code&gt; or &lt;code&gt;getUpdateCount&lt;/code&gt; to retrieve the result; you must call &lt;code&gt;getMoreResults&lt;/code&gt; to move to any subsequent result(s).</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; 方法は、戻り &lt;code&gt;boolean&lt;/code&gt; 最初の結果の形式を示すために。結果を取得するには、メソッド &lt;code&gt;getResultSet&lt;/code&gt; または &lt;code&gt;getUpdateCount&lt;/code&gt; のいずれかを呼び出す必要があります。後続の結果に移動するには、 &lt;code&gt;getMoreResults&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="721571d52ff7950b67b214b688c61b64a75961c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;executor&lt;/code&gt; parameter is an &lt;code&gt;ExecutorService&lt;/code&gt; that creates new threads as needed to execute tasks that are submitted to handle I/O events and dispatch completion results for operations initiated on asynchronous channels in the group. It may reuse previously constructed threads when they are available.</source>
          <target state="translated">&lt;code&gt;executor&lt;/code&gt; パラメータがある &lt;code&gt;ExecutorService&lt;/code&gt; のグループでの非同期チャネル上で開始操作のためのI / Oイベント・発送完了の結果を処理するために提出されたタスクを実行するために必要に応じて新しいスレッドを作成します。以前に構築されたスレッドが利用可能な場合、それらを再利用できます。</target>
        </trans-unit>
        <trans-unit id="ec1467cb33e94fd2c0bb533c599fa01ae6a0656e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;executor&lt;/code&gt; parameter is an &lt;code&gt;ExecutorService&lt;/code&gt; that executes tasks submitted to dispatch completion results for operations initiated on asynchronous channels in the group.</source>
          <target state="translated">&lt;code&gt;executor&lt;/code&gt; パラメータがある &lt;code&gt;ExecutorService&lt;/code&gt; の実行タスクがグループ内の非同期チャネル上で開始操作に発送完了の結果を提出しました。</target>
        </trans-unit>
        <trans-unit id="340e8f3277e0a9554138eaf4e4d1386486ab2daf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;executor&lt;/code&gt; parameter is the &lt;a href=&quot;../../util/concurrent/executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; to which tasks are submitted to handle I/O events and dispatch completion results for operations initiated on resulting channel. The nature of these tasks is highly implementation specific and so care should be taken when configuring the &lt;code&gt;Executor&lt;/code&gt;. Minimally it should support an unbounded work queue and should not run tasks on the caller thread of the &lt;a href=&quot;../../util/concurrent/executor#execute(java.lang.Runnable)&quot;&gt;&lt;code&gt;execute&lt;/code&gt;&lt;/a&gt; method. Shutting down the executor service while the channel is open results in unspecified behavior.</source>
          <target state="translated">&lt;code&gt;executor&lt;/code&gt; パラメータがある&lt;a href=&quot;../../util/concurrent/executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; の&lt;/a&gt;タスクは、チャネルを結果に開始した操作のI / Oイベント・発送完了の結果を処理するために提出されました。これらのタスクの性質は実装固有であるため、 &lt;code&gt;Executor&lt;/code&gt; を構成する際には注意が必要です。最低限、無制限のワークキューをサポートする必要があり、&lt;a href=&quot;../../util/concurrent/executor#execute(java.lang.Runnable)&quot;&gt; &lt;code&gt;execute&lt;/code&gt; &lt;/a&gt;メソッドの呼び出し元スレッドでタスクを実行しないでください。チャネルが開いているときにエグゼキュータサービスをシャットダウンすると、動作が不特定になります。</target>
        </trans-unit>
        <trans-unit id="f3b206390268e595a7543c9f72d6571233bef9fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;executor&lt;/code&gt; parameter is the &lt;a href=&quot;../../util/concurrent/executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; to which tasks are submitted to handle I/O events and dispatch completion results for operations initiated on resulting channel. The nature of these tasks is highly implementation specific and so care should be taken when configuring the &lt;code&gt;Executor&lt;/code&gt;. Minimally it should support an unbounded work queue and should not run tasks on the caller thread of the &lt;a href=&quot;../../util/concurrent/executor#execute-java.lang.Runnable-&quot;&gt;&lt;code&gt;execute&lt;/code&gt;&lt;/a&gt; method. Shutting down the executor service while the channel is open results in unspecified behavior.</source>
          <target state="translated">&lt;code&gt;executor&lt;/code&gt; パラメータがある&lt;a href=&quot;../../util/concurrent/executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; の&lt;/a&gt;タスクは、チャネルを結果に開始した操作のI / Oイベント・発送完了の結果を処理するために提出されました。これらのタスクの性質は実装固有であり、 &lt;code&gt;Executor&lt;/code&gt; を構成する際には注意が必要です。最低限、無制限の作業キューをサポートし、&lt;a href=&quot;../../util/concurrent/executor#execute-java.lang.Runnable-&quot;&gt; &lt;code&gt;execute&lt;/code&gt; &lt;/a&gt;メソッドの呼び出し側スレッドでタスクを実行しないでください。チャネルが開いている間にexecutorサービスをシャットダウンすると、不特定の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="9a348a5e6c50ba5a16fcb50db730eca7f5277712" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exit&lt;/code&gt; method of class &lt;code&gt;Runtime&lt;/code&gt; has been called and the security manager has permitted the exit operation to take place.</source>
          <target state="translated">クラス &lt;code&gt;Runtime&lt;/code&gt; の &lt;code&gt;exit&lt;/code&gt; メソッドが呼び出され、セキュリティマネージャがexit操作の実行を許可しました。</target>
        </trans-unit>
        <trans-unit id="54da7fdc8d08868a250106136d8727592f95e4ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extraExports&lt;/code&gt; parameter is the map of additional packages to export. The &lt;code&gt;extraOpens&lt;/code&gt; parameter is the map of additional packages to open. In both cases, the map key is the fully-qualified name of the package as defined in section 6.5.3 of</source>
          <target state="translated">&lt;code&gt;extraExports&lt;/code&gt; のパラメータは、エクスポートする追加パッケージのマップです。 &lt;code&gt;extraOpens&lt;/code&gt; のパラメータがオープンする追加パッケージのマップです。どちらの場合も、マップキーは、のセクション6.5.3で定義されているパッケージの完全修飾名です。</target>
        </trans-unit>
        <trans-unit id="7fa94cd8aa6c313051f5bdb81ee487e8d422730c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extraProvides&lt;/code&gt; parameter is the additional service providers for the module to provide. The map key is the service type. The map value is the non-empty list of implementation types, each of which is a member of the module and an implementation of the service.</source>
          <target state="translated">&lt;code&gt;extraProvides&lt;/code&gt; のパラメータは、提供するために、モジュールの追加のサービスプロバイダーです。マップキーはサービスタイプです。マップ値は、実装タイプの空でないリストであり、各実装タイプはモジュールのメンバーであり、サービスの実装です。</target>
        </trans-unit>
        <trans-unit id="676f7c17aac8c78e797db6e7abb083ffd0ff7492" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;failure&lt;/code&gt; callback is invoked when the RMI runtime is unable to create a &lt;code&gt;ServerSocket&lt;/code&gt; via the &lt;code&gt;RMISocketFactory&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;failure&lt;/code&gt; RMIランタイムが作成できなかった場合にコールバックが呼び出され &lt;code&gt;ServerSocket&lt;/code&gt; 経由して &lt;code&gt;RMISocketFactory&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="969956ed69e8a6235531b9a7241b70965fe5c99b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;failure&lt;/code&gt; callback is invoked when the RMI runtime is unable to create a &lt;code&gt;ServerSocket&lt;/code&gt; via the &lt;code&gt;RMISocketFactory&lt;/code&gt;. An &lt;code&gt;RMIFailureHandler&lt;/code&gt; is registered via a call to &lt;code&gt;RMISocketFacotry.setFailureHandler&lt;/code&gt;. If no failure handler is installed, the default behavior is to attempt to re-create the ServerSocket.</source>
          <target state="translated">&lt;code&gt;failure&lt;/code&gt; RMIランタイムが作成できなかった場合にコールバックが呼び出され &lt;code&gt;ServerSocket&lt;/code&gt; 経由して &lt;code&gt;RMISocketFactory&lt;/code&gt; 。アン &lt;code&gt;RMIFailureHandler&lt;/code&gt; ははへの呼び出しによって登録されて &lt;code&gt;RMISocketFacotry.setFailureHandler&lt;/code&gt; 。障害ハンドラーがインストールされていない場合、デフォルトの動作はServerSocketの再作成を試みることです。</target>
        </trans-unit>
        <trans-unit id="59e0247c987779ab17259f2d9c40552dc79dbfdb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;failure&lt;/code&gt; callback is invoked when the RMI runtime is unable to create a &lt;code&gt;ServerSocket&lt;/code&gt; via the &lt;code&gt;RMISocketFactory&lt;/code&gt;. An &lt;code&gt;RMIFailureHandler&lt;/code&gt; is registered via a call to &lt;code&gt;RMISocketFactory.setFailureHandler&lt;/code&gt;. If no failure handler is installed, the default behavior is to attempt to re-create the ServerSocket.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1a61775a7139e096b9fd0be3d2ad7ac6f1c956f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;family&lt;/code&gt; parameter is used to specify the &lt;a href=&quot;../../net/protocolfamily&quot;&gt;&lt;code&gt;ProtocolFamily&lt;/code&gt;&lt;/a&gt;. If the datagram channel is to be used for IP multicasting then this should correspond to the address type of the multicast groups that this channel will join.</source>
          <target state="translated">&lt;code&gt;family&lt;/code&gt; パラメータが指定するために使用され&lt;a href=&quot;../../net/protocolfamily&quot;&gt; &lt;code&gt;ProtocolFamily&lt;/code&gt; を&lt;/a&gt;。データグラムチャネルがIPマルチキャストに使用される場合、これはこのチャネルが参加するマルチキャストグループのアドレスタイプに対応している必要があります。</target>
        </trans-unit>
        <trans-unit id="f08c1804c0526409a1ecb2988cff36a97dc47de4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;handback&lt;/code&gt; parameters may be null if and only if they are null in a listener to be removed.</source>
          <target state="translated">&lt;code&gt;filter&lt;/code&gt; と &lt;code&gt;handback&lt;/code&gt; のパラメータは、それらが除去されるリスナーにヌルである場合に限り、NULLとすることができます。</target>
        </trans-unit>
        <trans-unit id="e2e6442675b7f51f69f821df5212aa778b1fe932" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filtering()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, such as downstream of a &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. For example, given a stream of &lt;code&gt;Employee&lt;/code&gt;, to accumulate the employees in each department that have a salary above a certain threshold:</source>
          <target state="translated">&lt;code&gt;filtering()&lt;/code&gt; このようなの下流として、マルチレベルの低減に使用される場合、コレクターは最も有用である &lt;code&gt;groupingBy&lt;/code&gt; 又は &lt;code&gt;partitioningBy&lt;/code&gt; 。たとえば、 &lt;code&gt;Employee&lt;/code&gt; ストリームが与えられた場合、特定のしきい値を超える給与を持つ各部門の従業員を累積するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="e696db23567885b82ff4f03850097e84169fd88a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated and will be removed.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は廃止され、削除されます。</target>
        </trans-unit>
        <trans-unit id="097d5634e76c7fdc3a50dea30921ddef17371844" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated and will be removed. It is implemented as a no-op. Subclasses that override &lt;code&gt;finalize&lt;/code&gt; in order to perform cleanup should be modified to use alternative cleanup mechanisms and remove the overriding &lt;code&gt;finalize&lt;/code&gt; method. The recommended cleanup for compressor is to explicitly call &lt;code&gt;end&lt;/code&gt; method when it is no longer in use. If the &lt;code&gt;end&lt;/code&gt; is not invoked explicitly the resource of the compressor will be released when the instance becomes unreachable,</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は廃止され、削除されます。これは、no-opとして実装されます。クリーンアップを実行するために &lt;code&gt;finalize&lt;/code&gt; をオーバーライドするサブクラスは、代替のクリーンアップメカニズムを使用し、オーバーライドする &lt;code&gt;finalize&lt;/code&gt; メソッドを削除するように変更する必要があります。コンプレッサーの推奨されるクリーンアップは、使用されなくなったときに &lt;code&gt;end&lt;/code&gt; メソッドを明示的に呼び出すことです。場合は &lt;code&gt;end&lt;/code&gt; 明示的に呼び出されていないインスタンスが到達不能になった場合の圧縮機のリソースが解放され、</target>
        </trans-unit>
        <trans-unit id="47b79383bcae3e922204d5ea86fccfb170bfe2e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated and will be removed. It is implemented as a no-op. Subclasses that override &lt;code&gt;finalize&lt;/code&gt; in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding &lt;code&gt;finalize&lt;/code&gt; method. The recommended cleanup for ZipFile object is to explicitly invoke &lt;code&gt;close&lt;/code&gt; method when it is no longer in use, or use try-with-resources. If the &lt;code&gt;close&lt;/code&gt; is not invoked explicitly the resources held by this object will be released when the instance becomes unreachable.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は廃止され、削除されます。これは、no-opとして実装されます。クリーンアップを実行するために &lt;code&gt;finalize&lt;/code&gt; をオーバーライドするサブクラスは、代替のクリーンアップメカニズムを使用し、オーバーライドする &lt;code&gt;finalize&lt;/code&gt; メソッドを削除するように変更する必要があります。 ZipFileオブジェクトの推奨されるクリーンアップは、使用されなくなったときに &lt;code&gt;close&lt;/code&gt; メソッドを明示的に呼び出すか、try-with-resourcesを使用することです。場合は &lt;code&gt;close&lt;/code&gt; 明示的に呼び出されていないインスタンスが到達不能になった場合、このオブジェクトが保持しているリソースが解放されます。</target>
        </trans-unit>
        <trans-unit id="7f87f25a450e774218ae842f94ecc4f8e21a6230" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated and will be removed. It is implemented as a no-op. Subclasses that override &lt;code&gt;finalize&lt;/code&gt; in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding &lt;code&gt;finalize&lt;/code&gt; method. The recommended cleanup for compressor is to explicitly call &lt;code&gt;end&lt;/code&gt; method when it is no longer in use. If the &lt;code&gt;end&lt;/code&gt; is not invoked explicitly the resource of the compressor will be released when the instance becomes unreachable.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は廃止され、削除されます。これは、no-opとして実装されます。クリーンアップを実行するために &lt;code&gt;finalize&lt;/code&gt; をオーバーライドするサブクラスは、代替のクリーンアップメカニズムを使用し、オーバーライドする &lt;code&gt;finalize&lt;/code&gt; メソッドを削除するように変更する必要があります。コンプレッサーの推奨されるクリーンアップは、使用されなくなったときに &lt;code&gt;end&lt;/code&gt; メソッドを明示的に呼び出すことです。場合は &lt;code&gt;end&lt;/code&gt; 明示的に呼び出されていないインスタンスが到達不能になった場合の圧縮機のリソースが解放されます。</target>
        </trans-unit>
        <trans-unit id="a5781f1fe78b11db626c54005d97fda3c5e9dc2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated and will be removed. Subclasses that override &lt;code&gt;finalize&lt;/code&gt; in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding &lt;code&gt;finalize&lt;/code&gt; method. When overriding the &lt;code&gt;finalize&lt;/code&gt; method, its implementation must explicitly ensure that &lt;code&gt;super.finalize()&lt;/code&gt; is invoked as described in &lt;a href=&quot;../lang/object#finalize()&quot;&gt;&lt;code&gt;Object.finalize()&lt;/code&gt;&lt;/a&gt;. See the specification for &lt;a href=&quot;../lang/object#finalize()&quot;&gt;&lt;code&gt;Object.finalize()&lt;/code&gt;&lt;/a&gt; for further information about migration options.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は廃止され、削除されます。クリーンアップを実行するために &lt;code&gt;finalize&lt;/code&gt; をオーバーライドするサブクラスは、代替のクリーンアップメカニズムを使用し、オーバーライドする &lt;code&gt;finalize&lt;/code&gt; メソッドを削除するように変更する必要があります。 &lt;code&gt;finalize&lt;/code&gt; メソッドをオーバーライドする場合、その実装では、&lt;a href=&quot;../lang/object#finalize()&quot;&gt; &lt;code&gt;Object.finalize()&lt;/code&gt; で&lt;/a&gt;説明されているように、 &lt;code&gt;super.finalize()&lt;/code&gt; が呼び出されることを明示的に確認する必要があります。移行オプションの詳細については、&lt;a href=&quot;../lang/object#finalize()&quot;&gt; &lt;code&gt;Object.finalize()&lt;/code&gt; の&lt;/a&gt;仕様を参照してください。</target>
        </trans-unit>
        <trans-unit id="a42af659e94273af1e3e71c3f847d665f87c7926" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は廃止されました。</target>
        </trans-unit>
        <trans-unit id="301938edcbcee8912bd33f8f0d3d67fd77b6a355" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated. Subclasses that override &lt;code&gt;finalize&lt;/code&gt; in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding &lt;code&gt;finalize&lt;/code&gt; method. When overriding the &lt;code&gt;finalize&lt;/code&gt; method, its implementation must explicitly ensure that &lt;code&gt;super.finalize()&lt;/code&gt; is invoked as described in &lt;a href=&quot;../../../../java.base/java/lang/object#finalize()&quot;&gt;&lt;code&gt;Object.finalize()&lt;/code&gt;&lt;/a&gt;. See the specification for &lt;a href=&quot;../../../../java.base/java/lang/object#finalize()&quot;&gt;&lt;code&gt;Object.finalize()&lt;/code&gt;&lt;/a&gt; for further information about migration options.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は廃止されました。クリーンアップを実行するために &lt;code&gt;finalize&lt;/code&gt; をオーバーライドするサブクラスは、代替のクリーンアップメカニズムを使用し、オーバーライドする &lt;code&gt;finalize&lt;/code&gt; メソッドを削除するように変更する必要があります。 &lt;code&gt;finalize&lt;/code&gt; メソッドをオーバーライドする場合、その実装では、&lt;a href=&quot;../../../../java.base/java/lang/object#finalize()&quot;&gt; &lt;code&gt;Object.finalize()&lt;/code&gt; で&lt;/a&gt;説明されているように &lt;code&gt;super.finalize()&lt;/code&gt; が呼び出されることを明示的に確認する必要があります。移行オプションの詳細については、&lt;a href=&quot;../../../../java.base/java/lang/object#finalize()&quot;&gt; &lt;code&gt;Object.finalize()&lt;/code&gt; の&lt;/a&gt;仕様を参照してください。</target>
        </trans-unit>
        <trans-unit id="3cf6ab10b27945f3cea37844915cc05f3c74248d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated. Subclasses that override &lt;code&gt;finalize&lt;/code&gt; in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding &lt;code&gt;finalize&lt;/code&gt; method. When overriding the &lt;code&gt;finalize&lt;/code&gt; method, its implementation must explicitly ensure that &lt;code&gt;super.finalize()&lt;/code&gt; is invoked as described in &lt;a href=&quot;../../../java.base/java/lang/object#finalize()&quot;&gt;&lt;code&gt;Object.finalize()&lt;/code&gt;&lt;/a&gt;. See the specification for &lt;a href=&quot;../../../java.base/java/lang/object#finalize()&quot;&gt;&lt;code&gt;Object.finalize()&lt;/code&gt;&lt;/a&gt; for further information about migration options.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は廃止されました。クリーンアップを実行するために &lt;code&gt;finalize&lt;/code&gt; をオーバーライドするサブクラスは、代替のクリーンアップメカニズムを使用し、オーバーライドする &lt;code&gt;finalize&lt;/code&gt; メソッドを削除するように変更する必要があります。 &lt;code&gt;finalize&lt;/code&gt; メソッドをオーバーライドする場合、その実装では、&lt;a href=&quot;../../../java.base/java/lang/object#finalize()&quot;&gt; &lt;code&gt;Object.finalize()&lt;/code&gt; で&lt;/a&gt;説明されているように &lt;code&gt;super.finalize()&lt;/code&gt; が呼び出されることを明示的に確認する必要があります。移行オプションの詳細については、&lt;a href=&quot;../../../java.base/java/lang/object#finalize()&quot;&gt; &lt;code&gt;Object.finalize()&lt;/code&gt; の&lt;/a&gt;仕様を参照してください。</target>
        </trans-unit>
        <trans-unit id="acfa3270c433f7fbeb166904731784b7ab01474e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method is never invoked more than once by a Java virtual machine for any given object.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は、任意のオブジェクトについてJava仮想マシンが複数回呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="36550a7fe4b3770df4940e5d45c14dff3f4cb361" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method of class &lt;code&gt;Object&lt;/code&gt; performs no special action; it simply returns normally. Subclasses of &lt;code&gt;Object&lt;/code&gt; may override this definition.</source>
          <target state="translated">クラス &lt;code&gt;Object&lt;/code&gt; の &lt;code&gt;finalize&lt;/code&gt; メソッドは特別なアクションを実行しません。単に正常に戻ります。 &lt;code&gt;Object&lt;/code&gt; のサブクラスはこの定義をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="290eeab6379b679af729a0f7d139a6b6afebf8ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findSystemClass&lt;/code&gt; method in class &lt;code&gt;ClassLoader&lt;/code&gt; .</source>
          <target state="translated">クラス &lt;code&gt;ClassLoader&lt;/code&gt; の &lt;code&gt;findSystemClass&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="b78d49371e443cbd3adbfb51ffc64676bde68d8a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flatMap()&lt;/code&gt; operation has the effect of applying a one-to-many transformation to the elements of the stream, and then flattening the resulting elements into a new stream.</source>
          <target state="translated">&lt;code&gt;flatMap()&lt;/code&gt; 操作は、ストリームの要素に一対多の変換を適用し、新しいストリームに得られる要素を平坦化する効果を有します。</target>
        </trans-unit>
        <trans-unit id="296d9a4aaa513be61985bb6776a603e7a0774231" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flatMapping()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, such as downstream of a &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. For example, given a stream of &lt;code&gt;Order&lt;/code&gt;, to accumulate the set of line items for each customer:</source>
          <target state="translated">&lt;code&gt;flatMapping()&lt;/code&gt; このようなの下流として、マルチレベルの低減に使用される場合、コレクターは最も有用である &lt;code&gt;groupingBy&lt;/code&gt; 又は &lt;code&gt;partitioningBy&lt;/code&gt; 。たとえば、 &lt;code&gt;Order&lt;/code&gt; ストリームが与えられた場合、各顧客のラインアイテムのセットを蓄積するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="ee0bb92de803847414b86012236c4f48f3910542" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush()&lt;/code&gt; method does nothing.</source>
          <target state="translated">&lt;code&gt;flush()&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="9794be29838cb64627abe081d7728e6987d9e44a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; method of &lt;code&gt;DataOutputStream&lt;/code&gt; calls the &lt;code&gt;flush&lt;/code&gt; method of its underlying output stream.</source>
          <target state="translated">&lt;code&gt;flush&lt;/code&gt; の方法 &lt;code&gt;DataOutputStream&lt;/code&gt; のは、呼び出す &lt;code&gt;flush&lt;/code&gt; その基本となる出力ストリームの方法を。</target>
        </trans-unit>
        <trans-unit id="195ffa6218dd9b603f2e4ca8f61c877be833e3ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt; calls the &lt;code&gt;flush&lt;/code&gt; method of its underlying output stream.</source>
          <target state="translated">&lt;code&gt;flush&lt;/code&gt; の方法 &lt;code&gt;FilterOutputStream&lt;/code&gt; は、呼び出す &lt;code&gt;flush&lt;/code&gt; その基本となる出力ストリームの方法を。</target>
        </trans-unit>
        <trans-unit id="68aa9823b85500f33061dc1eb4258756e15e005f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;OutputStream&lt;/code&gt; の &lt;code&gt;flush&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="708bb18e269a3b497919640ccb7a50b14533bedd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forName&lt;/code&gt; method in class &lt;code&gt;Class&lt;/code&gt;.</source>
          <target state="translated">クラス &lt;code&gt;Class&lt;/code&gt; の &lt;code&gt;forName&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="1e830c12e2148cec99c8883588bf6d4b50000667" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forward&lt;/code&gt; flag specifies the order that certificates will be passed to the &lt;a href=&quot;#check(java.security.cert.Certificate)&quot;&gt;&lt;code&gt;check&lt;/code&gt;&lt;/a&gt; method (forward or reverse).</source>
          <target state="translated">&lt;code&gt;forward&lt;/code&gt; フラグは証明書が渡されることを指定するため&lt;a href=&quot;#check(java.security.cert.Certificate)&quot;&gt; &lt;code&gt;check&lt;/code&gt; &lt;/a&gt;方法（順方向または逆方向）を。</target>
        </trans-unit>
        <trans-unit id="4c26146099bd6b8ccdb37b5c47095892a4be4161" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forward&lt;/code&gt; flag specifies the order that certificates will be passed to the &lt;a href=&quot;#check(java.security.cert.Certificate,java.util.Collection)&quot;&gt;&lt;code&gt;check&lt;/code&gt;&lt;/a&gt; method (forward or reverse). A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;&lt;b&gt;must&lt;/b&gt; support reverse checking and &lt;b&gt;may&lt;/b&gt; support forward checking.</source>
          <target state="translated">&lt;code&gt;forward&lt;/code&gt; フラグは証明書が渡されることを指定するため&lt;a href=&quot;#check(java.security.cert.Certificate,java.util.Collection)&quot;&gt; &lt;code&gt;check&lt;/code&gt; &lt;/a&gt;方法（順方向または逆方向）を。 A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; &lt;b&gt;しなければならない&lt;/b&gt;逆チェックをサポートして&lt;b&gt;も&lt;/b&gt;順方向のチェックをサポートしています。</target>
        </trans-unit>
        <trans-unit id="8de3dc96d234b55e125cd365d4c69d5d74e9de59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forward&lt;/code&gt; flag specifies the order that certificates will be passed to the &lt;a href=&quot;certpathchecker#check-java.security.cert.Certificate-&quot;&gt;&lt;code&gt;check&lt;/code&gt;&lt;/a&gt; method (forward or reverse).</source>
          <target state="translated">&lt;code&gt;forward&lt;/code&gt; フラグは証明書が渡されることを指定するため&lt;a href=&quot;certpathchecker#check-java.security.cert.Certificate-&quot;&gt; &lt;code&gt;check&lt;/code&gt; &lt;/a&gt;方法（順方向または逆方向）を。</target>
        </trans-unit>
        <trans-unit id="7f3a1ac72ca4c5a5aab4a7ea8026300ca9e9a65d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forward&lt;/code&gt; flag specifies the order that certificates will be passed to the &lt;a href=&quot;pkixcertpathchecker#check-java.security.cert.Certificate-java.util.Collection-&quot;&gt;&lt;code&gt;check&lt;/code&gt;&lt;/a&gt; method (forward or reverse). A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;&lt;b&gt;must&lt;/b&gt; support reverse checking and &lt;b&gt;may&lt;/b&gt; support forward checking.</source>
          <target state="translated">&lt;code&gt;forward&lt;/code&gt; フラグは証明書が渡されることを指定するため&lt;a href=&quot;pkixcertpathchecker#check-java.security.cert.Certificate-java.util.Collection-&quot;&gt; &lt;code&gt;check&lt;/code&gt; &lt;/a&gt;方法（順方向または逆方向）を。A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; &lt;b&gt;しなければならない&lt;/b&gt;逆チェックをサポートして&lt;b&gt;も&lt;/b&gt;順方向のチェックをサポートしています。</target>
        </trans-unit>
        <trans-unit id="c29abf69126019dfa340a81cfcd7917ddb6a1954" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fractionalDigits&lt;/code&gt; parameter allows the output of the fractional second to be controlled. Specifying zero will cause no fractional digits to be output. From 1 to 9 will output an increasing number of digits, using zero right-padding if necessary. The special value -1 is used to output as many digits as necessary to avoid any trailing zeroes.</source>
          <target state="translated">&lt;code&gt;fractionalDigits&lt;/code&gt; のパラメータは、小数第二の出力を制御することを可能にします。ゼロを指定すると、小数桁は出力されません。1から9は、必要に応じてゼロ右パディングを使用して、桁数を増やして出力します。特殊な値-1は、後続のゼロを回避するために必要な数の桁を出力するために使用されます。</target>
        </trans-unit>
        <trans-unit id="7b74f2d1a70560572c42c19ad803e17b40cd8b5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get/putClientProperty&lt;/code&gt; methods provide access to a small per-instance hashtable. Callers can use get/putClientProperty to annotate components that were created by another module. For example, a layout manager might store per child constraints this way. For example:</source>
          <target state="translated">&lt;code&gt;get/putClientProperty&lt;/code&gt; メソッドは、インスタンスごとの小さなハッシュテーブルへのアクセスを提供します。呼び出し元は、get / putClientPropertyを使用して、別のモジュールによって作成されたコンポーネントに注釈を付けることができます。たとえば、レイアウトマネージャーは、この方法で子ごとの制約を格納できます。例えば：</target>
        </trans-unit>
        <trans-unit id="cb20f3bf6b3942d976c6a027783a762e2ac8bebb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get/putProperty&lt;/code&gt; methods provide access to a small per-instance map. This is &lt;b&gt;not&lt;/b&gt; to be confused with &lt;a href=&quot;../../../../../java.base/java/util/properties&quot;&gt;&lt;code&gt;Properties&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="854b032e913f227ca9315dfb23f41c9eee3500bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getAWTEventListeners&lt;/code&gt; method of &lt;code&gt;Toolkit&lt;/code&gt; can return a mixture of &lt;code&gt;AWTEventListener&lt;/code&gt; and &lt;code&gt;AWTEventListenerProxy&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;getAWTEventListeners&lt;/code&gt; の方法 &lt;code&gt;Toolkit&lt;/code&gt; の混合物で返すことができる &lt;code&gt;AWTEventListener&lt;/code&gt; と &lt;code&gt;AWTEventListenerProxy&lt;/code&gt; オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="23ff0ed130fbcc2ffd5daaf1ed441144839e0f30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getBundle&lt;/code&gt; factory methods with no &lt;code&gt;Control&lt;/code&gt; parameter locate and load resource bundles from &lt;a href=&quot;spi/resourcebundleprovider&quot;&gt;service providers&lt;/a&gt;. It may continue the search as if calling &lt;a href=&quot;../lang/module#getResourceAsStream(java.lang.String)&quot;&gt;&lt;code&gt;Module.getResourceAsStream(String)&lt;/code&gt;&lt;/a&gt; to find the named resource from a given module and calling &lt;a href=&quot;../lang/classloader#getResourceAsStream(java.lang.String)&quot;&gt;&lt;code&gt;ClassLoader.getResourceAsStream(String)&lt;/code&gt;&lt;/a&gt;; refer to the specification of the &lt;code&gt;getBundle&lt;/code&gt; method for details. Only non-encapsulated resource bundles of &quot;&lt;code&gt;java.class&lt;/code&gt;&quot; or &quot;&lt;code&gt;java.properties&lt;/code&gt;&quot; format are searched.</source>
          <target state="translated">&lt;code&gt;getBundle&lt;/code&gt; のなしでファクトリメソッド &lt;code&gt;Control&lt;/code&gt; パラメータからリソースバンドルを探し、ロード&lt;a href=&quot;spi/resourcebundleprovider&quot;&gt;サービスプロバイダー&lt;/a&gt;。&lt;a href=&quot;../lang/module#getResourceAsStream(java.lang.String)&quot;&gt; &lt;code&gt;Module.getResourceAsStream(String)&lt;/code&gt; &lt;/a&gt;を呼び出して特定のモジュールから名前付きリソースを検索し、&lt;a href=&quot;../lang/classloader#getResourceAsStream(java.lang.String)&quot;&gt; &lt;code&gt;ClassLoader.getResourceAsStream(String)&lt;/code&gt; &lt;/a&gt;を呼び出すかのように、検索を続行できます。詳細については、 &lt;code&gt;getBundle&lt;/code&gt; メソッドの仕様を参照してください。 「 &lt;code&gt;java.class&lt;/code&gt; 」または「 &lt;code&gt;java.properties&lt;/code&gt; 」形式のカプセル化されていないリソースバンドルのみが検索されます。</target>
        </trans-unit>
        <trans-unit id="dd64d876b826e032eea9ddf5b6c247d57ce3fd4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; and &lt;code&gt;
 getMinimalDaysInFirstWeek()&lt;/code&gt; values are initialized using locale-dependent resources when constructing a &lt;code&gt;
 GregorianCalendar&lt;/code&gt;. &lt;a id=&quot;iso8601_compatible_setting&quot;&gt;The week determination is compatible&lt;/a&gt; with the ISO 8601 standard when &lt;code&gt;
 getFirstDayOfWeek()&lt;/code&gt; is &lt;code&gt;MONDAY&lt;/code&gt; and &lt;code&gt;
 getMinimalDaysInFirstWeek()&lt;/code&gt; is 4, which values are used in locales where the standard is preferred. These values can explicitly be set by calling &lt;a href=&quot;calendar#setFirstDayOfWeek(int)&quot;&gt;&lt;code&gt;setFirstDayOfWeek()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;calendar#setMinimalDaysInFirstWeek(int)&quot;&gt;&lt;code&gt;setMinimalDaysInFirstWeek()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; および &lt;code&gt; getMinimalDaysInFirstWeek()&lt;/code&gt; の値を構築する際に、ロケール依存のリソースを使用して初期化され &lt;code&gt; GregorianCalendar&lt;/code&gt; 。 &lt;code&gt; getFirstDayOfWeek()&lt;/code&gt; が &lt;code&gt;MONDAY&lt;/code&gt; で &lt;code&gt; getMinimalDaysInFirstWeek()&lt;/code&gt; が4の場合、&lt;a id=&quot;iso8601_compatible_setting&quot;&gt;週の決定は&lt;/a&gt;ISO 8601標準と互換性があります。これらの値は、標準が優先されるロケールで使用されます。これらの値は、&lt;a href=&quot;calendar#setFirstDayOfWeek(int)&quot;&gt; &lt;code&gt;setFirstDayOfWeek()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;calendar#setMinimalDaysInFirstWeek(int)&quot;&gt; &lt;code&gt;setMinimalDaysInFirstWeek()&lt;/code&gt; を&lt;/a&gt;呼び出すことで明示的に設定できます。</target>
        </trans-unit>
        <trans-unit id="0f3e1d9782b5c32d63d7b0cc83ee2c191412bb87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; and &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; values are initialized using locale-dependent resources when constructing a &lt;code&gt;GregorianCalendar&lt;/code&gt;. &lt;a name=&quot;iso8601_compatible_setting&quot;&gt;The week determination is compatible&lt;/a&gt; with the ISO 8601 standard when &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; is &lt;code&gt;MONDAY&lt;/code&gt; and &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; is 4, which values are used in locales where the standard is preferred. These values can explicitly be set by calling &lt;a href=&quot;calendar#setFirstDayOfWeek-int-&quot;&gt;&lt;code&gt;setFirstDayOfWeek()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;calendar#setMinimalDaysInFirstWeek-int-&quot;&gt;&lt;code&gt;setMinimalDaysInFirstWeek()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; および &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; の値を構築する際に、ロケール依存のリソースを使用して初期化され &lt;code&gt;GregorianCalendar&lt;/code&gt; 。 &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; が &lt;code&gt;MONDAY&lt;/code&gt; で &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; が4の場合、&lt;a name=&quot;iso8601_compatible_setting&quot;&gt;週の決定は&lt;/a&gt; ISO 8601標準と互換性があり、標準が優先されるロケールで使用されます。これらの値は、&lt;a href=&quot;calendar#setFirstDayOfWeek-int-&quot;&gt; &lt;code&gt;setFirstDayOfWeek()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;calendar#setMinimalDaysInFirstWeek-int-&quot;&gt; &lt;code&gt;setMinimalDaysInFirstWeek()&lt;/code&gt; を&lt;/a&gt;呼び出すことによって明示的に設定できます。</target>
        </trans-unit>
        <trans-unit id="56523d844e395cab10ecde9ba8b570825460b5cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getInstance&lt;/code&gt; factory method of the &lt;code&gt;Cipher&lt;/code&gt; engine class follows these rules in order to instantiate a provider's implementation of &lt;code&gt;CipherSpi&lt;/code&gt; for a transformation of the form &quot;</source>
          <target state="translated">&lt;code&gt;Cipher&lt;/code&gt; エンジンクラスの &lt;code&gt;getInstance&lt;/code&gt; ファクトリメソッドは、フォームの変換のためにプロバイダーの &lt;code&gt;CipherSpi&lt;/code&gt; の実装をインスタンス化するために、これらのルールに従います</target>
        </trans-unit>
        <trans-unit id="f09e308477567f7fb18f8db544516ee32916e1fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getNotifTypes&lt;/code&gt; method returns an array of strings containing the notification types that the MBean may emit. The notification type is a dot-notation string which describes what the emitted notification is about, not the Java class of the notification. A single generic notification class can be used to send notifications of several types. All of these types are returned in the string array result of the &lt;code&gt;getNotifTypes&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;getNotifTypes&lt;/code&gt; の方法は、MBeanを発することができることの通知タイプを含む文字列の配列を返します。通知タイプは、通知のJavaクラスではなく、発行された通知の内容を説明するドット表記文字列です。単一の汎用通知クラスを使用して、いくつかのタイプの通知を送信できます。これらのタイプはすべて、 &lt;code&gt;getNotifTypes&lt;/code&gt; メソッドの文字列配列の結果で返されます。</target>
        </trans-unit>
        <trans-unit id="058e0ca7376a98eb437efbc0aef64d1a8a108d0b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getObjectInstance()&lt;/code&gt; method of an object factory may be invoked multiple times, possibly using different parameters. The implementation is thread-safe.</source>
          <target state="translated">オブジェクトファクトリの &lt;code&gt;getObjectInstance()&lt;/code&gt; メソッドは、異なるパラメーターを使用して、複数回呼び出すことができます。実装はスレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="6a8501111fcfea5e31cfee8d6894af584ff150ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getOptionType&lt;/code&gt; method returns this value if this &lt;code&gt;ConfirmationCallback&lt;/code&gt; was instantiated with &lt;code&gt;options&lt;/code&gt; instead of an &lt;code&gt;optionType&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getOptionType&lt;/code&gt; のこの場合、メソッドはこの値を返し &lt;code&gt;ConfirmationCallback&lt;/code&gt; をを用いてインスタンス化された &lt;code&gt;options&lt;/code&gt; の代わりに &lt;code&gt;optionType&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2ef280ce3c722336b80c7679d86c41831204a952" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getOverrideStyle&lt;/code&gt; method provides a mechanism through which a DOM author could effect immediate change to the style of an element without modifying the explicitly linked style sheets of a document or the inline style of elements in the style sheets. This style sheet comes after the author style sheet in the cascade algorithm and is called override style sheet. The override style sheet takes precedence over author style sheets. An &quot;!important&quot; declaration still takes precedence over a normal declaration. Override, author, and user style sheets all may contain &quot;!important&quot; declarations. User &quot;!important&quot; rules take precedence over both override and author &quot;!important&quot; rules, and override &quot;!important&quot; rules take precedence over author &quot;!important&quot; rules.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8a70b914e02ddbca33ccc8428f3eed3b38dd996" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getPropertyInfo&lt;/code&gt; method is intended to allow a generic GUI tool to discover what properties it should prompt a human for in order to get enough information to connect to a database. Note that depending on the values the human has supplied so far, additional values may become necessary, so it may be necessary to iterate though several calls to the &lt;code&gt;getPropertyInfo&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;getPropertyInfo&lt;/code&gt; の方法は、一般的なGUIツールは、それがデータベースに接続するのに十分な情報を得るためにのために人間を求めるべき性質を発見できるようにするためのものです。人間がこれまでに提供した値によっては、追加の値が必要になる場合があるため、 &lt;code&gt;getPropertyInfo&lt;/code&gt; メソッドを何度か呼び出しても繰り返す必要がある場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6ebc4bc14d6647d69c5c4a4fb63fb8fd2ffdfd9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getResources&lt;/code&gt; method of the context &lt;code&gt;ClassLoader&lt;/code&gt; is used locate JAR files containing files named &lt;code&gt;META-INF/services/javax.imageio.spi.&lt;/code&gt;</source>
          <target state="translated">コンテキスト &lt;code&gt;ClassLoader&lt;/code&gt; の &lt;code&gt;getResources&lt;/code&gt; メソッドを使用して、 &lt;code&gt;META-INF/services/javax.imageio.spi.&lt;/code&gt; という名前のファイルを含むJARファイルを見つけます。</target>
        </trans-unit>
        <trans-unit id="b2b6b51bd170eb65242dd9c81805d8ac434ccc43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getStateToBind()&lt;/code&gt; method of a state factory may be invoked multiple times, possibly using different parameters. The implementation is thread-safe.</source>
          <target state="translated">状態ファクトリの &lt;code&gt;getStateToBind()&lt;/code&gt; メソッドは、おそらく異なるパラメーターを使用して、複数回呼び出すことができます。実装はスレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="4133bc1ef355b2f7d534eacc6206c1d3c4756a8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;glassPane&lt;/code&gt; and &lt;code&gt;contentPane&lt;/code&gt; have the same bounds, which means &lt;code&gt;JRootPane&lt;/code&gt; does not tiles its children and this should return false.</source>
          <target state="translated">&lt;code&gt;glassPane&lt;/code&gt; と &lt;code&gt;contentPane&lt;/code&gt; をを意味し、同じ境界を持っている &lt;code&gt;JRootPane&lt;/code&gt; その子をタイリングせず、これがfalseを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="ee344936fcd60a44c7aadfe704fe188c2bf05a14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;glassPane&lt;/code&gt; and &lt;code&gt;contentPane&lt;/code&gt; have the same bounds, which means &lt;code&gt;JRootPane&lt;/code&gt; does not tiles its children and this should return false. On the other hand, the &lt;code&gt;glassPane&lt;/code&gt; is normally not visible, and so this can return true if the &lt;code&gt;glassPane&lt;/code&gt; isn't visible. Therefore, the return value here depends upon the visibility of the &lt;code&gt;glassPane&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;glassPane&lt;/code&gt; と &lt;code&gt;contentPane&lt;/code&gt; をを意味し、同じ境界を持っている &lt;code&gt;JRootPane&lt;/code&gt; その子をタイリングせず、これがfalseを返す必要があります。一方、 &lt;code&gt;glassPane&lt;/code&gt; は通常は表示されないため、 &lt;code&gt;glassPane&lt;/code&gt; が表示されていない場合はtrueを返すことができます。したがって、ここでの戻り値は、 &lt;code&gt;glassPane&lt;/code&gt; の可視性に依存します。</target>
        </trans-unit>
        <trans-unit id="c64b9cd519193ff182ca1d2c0d0b61365f9b46ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;glassPane&lt;/code&gt; fills the entire viewable area of the &lt;code&gt;JRootPane&lt;/code&gt; (bounds - insets).</source>
          <target state="translated">&lt;code&gt;glassPane&lt;/code&gt; は、全体の表示可能領域塗りつぶし &lt;code&gt;JRootPane&lt;/code&gt; （ -インセット境界を）。</target>
        </trans-unit>
        <trans-unit id="303f1b7ffcb897ac198d0b32c1e4690dd69e7d53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;glassPane&lt;/code&gt; sits on top of all other components in the &lt;code&gt;JRootPane&lt;/code&gt;. That provides a convenient place to draw above all other components, and makes it possible to intercept mouse events, which is useful both for dragging and for drawing. Developers can use &lt;code&gt;setVisible&lt;/code&gt; on the &lt;code&gt;glassPane&lt;/code&gt; to control when the &lt;code&gt;glassPane&lt;/code&gt; displays over the other children. By default the &lt;code&gt;glassPane&lt;/code&gt; is not visible.</source>
          <target state="translated">&lt;code&gt;glassPane&lt;/code&gt; は内の他のすべてのコンポーネントの上に座っている &lt;code&gt;JRootPane&lt;/code&gt; 。これは、他のすべてのコンポーネントの上に描画するのに便利な場所を提供し、マウスイベントをインターセプトすることを可能にします。これは、ドラッグと描画の両方に役立ちます。開発者は、使用することができる &lt;code&gt;setVisible&lt;/code&gt; 上 &lt;code&gt;glassPane&lt;/code&gt; 制御する際 &lt;code&gt;glassPane&lt;/code&gt; 他の子供たちの上に表示されます。デフォルトでは、 &lt;code&gt;glassPane&lt;/code&gt; は表示されません。</target>
        </trans-unit>
        <trans-unit id="f433eca03b2eb0f32d07fb7e2e68b92fac6f3c89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handle&lt;/code&gt; method implementation checks the instance(s) of the &lt;code&gt;Callback&lt;/code&gt; object(s) passed in to retrieve or display the requested information. The following example is provided to help demonstrate what an &lt;code&gt;handle&lt;/code&gt; method implementation might look like. This example code is for guidance only. Many details, including proper error handling, are left out for simplicity.</source>
          <target state="translated">&lt;code&gt;handle&lt;/code&gt; のメソッドの実装をチェックインスタンス（複数可） &lt;code&gt;Callback&lt;/code&gt; に渡されたオブジェクト（複数可）を取得または要求された情報を表示します。次の例は、 &lt;code&gt;handle&lt;/code&gt; メソッドの実装がどのようになるかを示すのに役立ちます。このコード例はガイダンスのみを目的としています。適切なエラー処理を含む多くの詳細は、簡略化のために省略されています。</target>
        </trans-unit>
        <trans-unit id="78806b6c0d8e3a500425fd33fe6be57433f2f45a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hashCode&lt;/code&gt; method of the returned set returns the sum of the</source>
          <target state="translated">返されたセットの &lt;code&gt;hashCode&lt;/code&gt; メソッドは、</target>
        </trans-unit>
        <trans-unit id="2f587f428ba9d70c513a6f20faefa7737e3169e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hashCode&lt;/code&gt; method uses the underlying &lt;code&gt;java.util.Date&lt;/code&gt; implementation and therefore does not include nanos in its computation.</source>
          <target state="translated">&lt;code&gt;hashCode&lt;/code&gt; 方法は、基礎となる使用 &lt;code&gt;java.util.Date&lt;/code&gt; の実装を、したがって、その計算にnanos値を含んでいません。</target>
        </trans-unit>
        <trans-unit id="fd1ec688b3211b62ec6deea7903a4e5a33c5b1e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hostname&lt;/code&gt; argument is illegal if it:</source>
          <target state="translated">次の場合、 &lt;code&gt;hostname&lt;/code&gt; 引数は無効です。</target>
        </trans-unit>
        <trans-unit id="0e43ec7f450994678afac7d3d20f221033df02a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hostnameVerifier&lt;/code&gt; for this object.</source>
          <target state="translated">このオブジェクトの &lt;code&gt;hostnameVerifier&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a0862b9286e778fa946553866f62a5a21c32639" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;iconOnly&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;iconOnly&lt;/code&gt; の値。</target>
        </trans-unit>
        <trans-unit id="daad7e8488e5cfcb51dabab10521abe9fa406690" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;iconifyFrame()&lt;/code&gt; code calls this to determine the proper bounds for the desktopIcon.</source>
          <target state="translated">&lt;code&gt;iconifyFrame()&lt;/code&gt; のコードは、desktopIconの適切な境界を指定し、これを呼び出します。</target>
        </trans-unit>
        <trans-unit id="51e65210412db39a03c74c582c66b807b1845931" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;icons&lt;/code&gt; list can contain &lt;code&gt;MultiResolutionImage&lt;/code&gt; images also. Suitable image depending on screen resolution is extracted from base &lt;code&gt;MultiResolutionImage&lt;/code&gt; image and added to the icons list while base resolution image is removed from list. The &lt;code&gt;icons&lt;/code&gt; list is scanned for the images of most appropriate dimensions from the beginning. If the list contains several images of the same size, the first will be used.</source>
          <target state="translated">&lt;code&gt;icons&lt;/code&gt; リストが含まれている可能 &lt;code&gt;MultiResolutionImage&lt;/code&gt; のも画像を。画面解像度に応じた適切な画像がベース &lt;code&gt;MultiResolutionImage&lt;/code&gt; 画像から抽出され、アイコンリストに追加され、ベース解像度画像がリストから削除されます。 &lt;code&gt;icons&lt;/code&gt; リストは、最初から最も適切な寸法の画像がスキャンされます。リストに同じサイズの画像が複数含まれている場合は、最初の画像が使用されます。</target>
        </trans-unit>
        <trans-unit id="3a3a03a08373e3a4eb0d5649cfecb26445106e34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;identity&lt;/code&gt; value must be an identity for the accumulator function. This means that for all &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;accumulator.apply(identity, t)&lt;/code&gt; is equal to &lt;code&gt;t&lt;/code&gt;. The &lt;code&gt;accumulator&lt;/code&gt; function must be an &lt;a href=&quot;package-summary#Associativity&quot;&gt;associative&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;identity&lt;/code&gt; 値は、アキュムレータ機能のIDでなければなりません。これは、すべての &lt;code&gt;t&lt;/code&gt; について、 &lt;code&gt;accumulator.apply(identity, t)&lt;/code&gt; が &lt;code&gt;t&lt;/code&gt; に等しいことを意味します。 &lt;code&gt;accumulator&lt;/code&gt; 機能がなければなりません&lt;a href=&quot;package-summary#Associativity&quot;&gt;連想&lt;/a&gt;機能。</target>
        </trans-unit>
        <trans-unit id="15d70cdc09c9191c55557a009f3a78afb163bfc0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;identity&lt;/code&gt; value must be an identity for the accumulator function. This means that for all &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;accumulator.apply(identity, x)&lt;/code&gt; is equal to &lt;code&gt;x&lt;/code&gt;. The &lt;code&gt;accumulator&lt;/code&gt; function must be an &lt;a href=&quot;package-summary#Associativity&quot;&gt;associative&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;identity&lt;/code&gt; 値は、アキュムレータ機能のIDでなければなりません。これは、すべての &lt;code&gt;x&lt;/code&gt; について、 &lt;code&gt;accumulator.apply(identity, x)&lt;/code&gt; が &lt;code&gt;x&lt;/code&gt; に等しいことを意味します。 &lt;code&gt;accumulator&lt;/code&gt; 機能がなければなりません&lt;a href=&quot;package-summary#Associativity&quot;&gt;連想&lt;/a&gt;機能。</target>
        </trans-unit>
        <trans-unit id="c7c434e8ee038c0b3fcfe01a6456babfb2b633e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;identity&lt;/code&gt; value must be an identity for the combiner function. This means that for all &lt;code&gt;u&lt;/code&gt;, &lt;code&gt;combiner(identity, u)&lt;/code&gt; is equal to &lt;code&gt;u&lt;/code&gt;. Additionally, the &lt;code&gt;combiner&lt;/code&gt; function must be compatible with the &lt;code&gt;accumulator&lt;/code&gt; function; for all &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;, the following must hold:</source>
          <target state="translated">&lt;code&gt;identity&lt;/code&gt; 値は、コンバイナ機能のIDでなければなりません。これは、すべての &lt;code&gt;u&lt;/code&gt; について、 &lt;code&gt;combiner(identity, u)&lt;/code&gt; が &lt;code&gt;u&lt;/code&gt; に等しいことを意味します。さらに、 &lt;code&gt;combiner&lt;/code&gt; 機能は &lt;code&gt;accumulator&lt;/code&gt; 機能と互換性がなければなりません。すべての &lt;code&gt;u&lt;/code&gt; および &lt;code&gt;t&lt;/code&gt; について、次の条件が満たされている必要があります。</target>
        </trans-unit>
        <trans-unit id="cb7b6822fbfe6353745706addd58f9b58b682324" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ifAddress&lt;/code&gt; argument can be used on a multi-homed host for a &lt;code&gt;ServerSocket&lt;/code&gt; that will only accept connect requests to one of its addresses. If &lt;code&gt;ifAddress&lt;/code&gt; is null, it will accept connections on all local addresses. The socket is configured with the socket options (such as accept timeout) given to this factory.</source>
          <target state="translated">&lt;code&gt;ifAddress&lt;/code&gt; の引数は、マルチホームホスト上で使用することができます &lt;code&gt;ServerSocket&lt;/code&gt; をのみ、そのアドレスの1つに接続要求を受け入れます。 &lt;code&gt;ifAddress&lt;/code&gt; がnullの場合、すべてのローカルアドレスの接続を受け入れます。ソケットは、このファクトリに指定されたソケットオプション（受け入れタイムアウトなど）で構成されます。</target>
        </trans-unit>
        <trans-unit id="9d4aa0ca4766a00288d0853e4d6293a48f65d87d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignoreMetadata&lt;/code&gt; parameter, if set to &lt;code&gt;true&lt;/code&gt;, allows the reader to disregard any metadata encountered during the read. Subsequent calls to the &lt;code&gt;getStreamMetadata&lt;/code&gt; and &lt;code&gt;getImageMetadata&lt;/code&gt; methods may return &lt;code&gt;null&lt;/code&gt;, and an &lt;code&gt;IIOImage&lt;/code&gt; returned from &lt;code&gt;readAll&lt;/code&gt; may return &lt;code&gt;null&lt;/code&gt; from their &lt;code&gt;getMetadata&lt;/code&gt; method. Setting this parameter may allow the reader to work more efficiently. The reader may choose to disregard this setting and return metadata normally.</source>
          <target state="translated">&lt;code&gt;ignoreMetadata&lt;/code&gt; のパラメータは、に設定されている場合 &lt;code&gt;true&lt;/code&gt; 、リーダーが読み取り中に発生したメタデータを無視することができます。 &lt;code&gt;getStreamMetadata&lt;/code&gt; メソッドと &lt;code&gt;getImageMetadata&lt;/code&gt; メソッドへの後続の呼び出しは &lt;code&gt;null&lt;/code&gt; を返し、 &lt;code&gt;readAll&lt;/code&gt; から返された &lt;code&gt;IIOImage&lt;/code&gt; は &lt;code&gt;getMetadata&lt;/code&gt; メソッドから &lt;code&gt;null&lt;/code&gt; を返す場合があります。このパラメーターを設定すると、リーダーがより効率的に動作できるようになります。読者はこの設定を無視して、通常どおりメタデータを返すことを選択できます。</target>
        </trans-unit>
        <trans-unit id="74a61b8b43c5d10d1b00563be9b1b6cef6be194e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;imageUpdate&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt; incrementally draws an image on the component as more of the bits of the image are available.</source>
          <target state="translated">&lt;code&gt;Component&lt;/code&gt; の &lt;code&gt;imageUpdate&lt;/code&gt; メソッドは、イメージのより多くのビットが使用可能になると、コンポーネント上にイメージを段階的に描画します。</target>
        </trans-unit>
        <trans-unit id="fd6a40388fc0550eb7dfd1739f418989dfe9f308" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;implies&lt;/code&gt; method is used by the AccessController to determine whether or not a requested permission is implied by another permission that is known to be valid in the current execution context.</source>
          <target state="translated">&lt;code&gt;implies&lt;/code&gt; 方法が要求された許可は、現在の実行コンテキストで有効であることが知られている別の許可によって暗示されているか否かを判断するためにAccessControllerによって使用されます。</target>
        </trans-unit>
        <trans-unit id="99323cb09ca7a1b5b3ed49e52564ae4467d979f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inactiveObject&lt;/code&gt; call informs the &lt;code&gt;ActivationMonitor&lt;/code&gt; that the remote object reference it holds for the object with the activation identifier, &lt;code&gt;id&lt;/code&gt;, is no longer valid. The monitor considers the reference associated with &lt;code&gt;id&lt;/code&gt; as a stale reference. Since the reference is considered stale, a subsequent &lt;code&gt;activate&lt;/code&gt; call for the same activation identifier results in re-activating the remote object.</source>
          <target state="translated">&lt;code&gt;inactiveObject&lt;/code&gt; のコール知らせる &lt;code&gt;ActivationMonitor&lt;/code&gt; にリモートオブジェクト参照が起動識別子を持つオブジェクトに当てはまることは、 &lt;code&gt;id&lt;/code&gt; 、もはや有効ではありません。モニターは、 &lt;code&gt;id&lt;/code&gt; に関連付けられた参照を古い参照と見なします。参照は古くなっていると見なさ &lt;code&gt;activate&lt;/code&gt; ため、同じアクティブ化識別子に対する後続のアクティブ化呼び出しにより、リモートオブジェクトが再アクティブ化されます。</target>
        </trans-unit>
        <trans-unit id="dc20171b44b44f5f3758ac37b7d5a7ded6f19e83" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index&lt;/code&gt; is defined to be out of bounds if any of the following inequalities is true:</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; 、以下の不等式のいずれかに該当する場合範囲外になるように定義されています。</target>
        </trans-unit>
        <trans-unit id="5f5eaf7ade6f853439e4b56543435a4f43f085fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index&lt;/code&gt; parameter is the index of the name element to return. The element that is &lt;em&gt;closest&lt;/em&gt; to the root in the directory hierarchy has index &lt;code&gt;0&lt;/code&gt;. The element that is &lt;em&gt;farthest&lt;/em&gt; from the root has index &lt;a href=&quot;#getNameCount()&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; パラメータは、リターンにname要素のインデックスです。ディレクトリ階層のルートに&lt;em&gt;最も近い&lt;/em&gt;要素のインデックスは &lt;code&gt;0&lt;/code&gt; です。ルートから&lt;em&gt;最も遠い&lt;/em&gt;要素のインデックス&lt;a href=&quot;#getNameCount()&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; &lt;code&gt;-1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="64642e3202227bf1eb96b4d1dcff39ebc286b611" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index&lt;/code&gt; parameter is the index of the name element to return. The element that is &lt;em&gt;closest&lt;/em&gt; to the root in the directory hierarchy has index &lt;code&gt;0&lt;/code&gt;. The element that is &lt;em&gt;farthest&lt;/em&gt; from the root has index &lt;a href=&quot;path#getNameCount--&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; パラメータは、リターンにname要素のインデックスです。ディレクトリ階層のルートに&lt;em&gt;最も近い&lt;/em&gt;要素のインデックスは &lt;code&gt;0&lt;/code&gt; です。ルートから&lt;em&gt;最も遠い&lt;/em&gt;要素のインデックス&lt;a href=&quot;path#getNameCount--&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; &lt;code&gt;-1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8ba30d2da47964c5ec7ffd415d13cac0e4683bed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;infoflags&lt;/code&gt; argument should be the bitwise inclusive &lt;b&gt;OR&lt;/b&gt; of the following flags: &lt;code&gt;WIDTH&lt;/code&gt;, &lt;code&gt;HEIGHT&lt;/code&gt;, &lt;code&gt;PROPERTIES&lt;/code&gt;, &lt;code&gt;SOMEBITS&lt;/code&gt;, &lt;code&gt;FRAMEBITS&lt;/code&gt;, &lt;code&gt;ALLBITS&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;ABORT&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;infoflags&lt;/code&gt; の引数は、ビット単位の包含的であるべき&lt;b&gt;OR&lt;/b&gt;：以下のフラグの &lt;code&gt;WIDTH&lt;/code&gt; 、 &lt;code&gt;HEIGHT&lt;/code&gt; 、 &lt;code&gt;PROPERTIES&lt;/code&gt; 、 &lt;code&gt;SOMEBITS&lt;/code&gt; 、 &lt;code&gt;FRAMEBITS&lt;/code&gt; 、 &lt;code&gt;ALLBITS&lt;/code&gt; 、 &lt;code&gt;ERROR&lt;/code&gt; 、 &lt;code&gt;ABORT&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd34925c76b9aa7f124b7924e51f96a4065ec4cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init&lt;/code&gt; handle describes the initial value of an additional optional loop-local variable. In each iteration, this loop-local variable, if present, will be passed to the &lt;code&gt;body&lt;/code&gt; and updated with the value returned from its invocation. The result of loop execution will be the final value of the additional loop-local variable (if present).</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; ハンドルは、追加オプションのループローカル変数の初期値を記述する。各反復で、このループローカル変数が存在する場合は、 &lt;code&gt;body&lt;/code&gt; 渡され、呼び出しから返された値で更新されます。ループ実行の結果は、追加のループローカル変数（存在する場合）の最終値になります。</target>
        </trans-unit>
        <trans-unit id="ff497b3e440002ae66c4cff8239b566deecf6970" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init&lt;/code&gt;, and &lt;code&gt;marshalParams&lt;/code&gt; methods of &lt;code&gt;TransformService&lt;/code&gt; MUST support &lt;code&gt;DOMStructure&lt;/code&gt; and &lt;code&gt;DOMCryptoContext&lt;/code&gt; types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4d191b328a1c5a3fb19ebaef345b041450f0653" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initEvent&lt;/code&gt; method is used to initialize the value of an &lt;code&gt;Event&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;initEvent&lt;/code&gt; 方法は、以下の値を初期化するために使用される &lt;code&gt;Event&lt;/code&gt; を介して作成 &lt;code&gt;DocumentEvent&lt;/code&gt; インターフェイスを。</target>
        </trans-unit>
        <trans-unit id="e980ab2973cbdf463d4df8c8ce1591af9572002f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initEvent&lt;/code&gt; method is used to initialize the value of an &lt;code&gt;Event&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface. This method may only be called before the &lt;code&gt;Event&lt;/code&gt; has been dispatched via the &lt;code&gt;dispatchEvent&lt;/code&gt; method, though it may be called multiple times during that phase if necessary. If called multiple times the final invocation takes precedence. If called from a subclass of &lt;code&gt;Event&lt;/code&gt; interface only the values specified in the &lt;code&gt;initEvent&lt;/code&gt; method are modified, all other attributes are left unchanged.</source>
          <target state="translated">&lt;code&gt;initEvent&lt;/code&gt; 方法は、以下の値を初期化するために使用される &lt;code&gt;Event&lt;/code&gt; を介して作成 &lt;code&gt;DocumentEvent&lt;/code&gt; インターフェイスを。このメソッドは、 &lt;code&gt;dispatchEvent&lt;/code&gt; メソッドを介して &lt;code&gt;Event&lt;/code&gt; がディスパッチされる前にのみ呼び出すことができますが、必要に応じて、そのフェーズ中に複数回呼び出すことができます。複数回呼び出された場合、最後の呼び出しが優先されます。 &lt;code&gt;Event&lt;/code&gt; インターフェイスのサブクラスから呼び出された場合、 &lt;code&gt;initEvent&lt;/code&gt; メソッドで指定された値のみが変更され、他のすべての属性は変更されません。</target>
        </trans-unit>
        <trans-unit id="2e79e9c0595f3db6eb879c2cd4bff42c0c8821e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initMouseEvent&lt;/code&gt; method is used to initialize the value of a &lt;code&gt;MouseEvent&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;initMouseEvent&lt;/code&gt; 方法は、以下の値を初期化するために使用され &lt;code&gt;MouseEvent&lt;/code&gt; を介して作成され &lt;code&gt;DocumentEvent&lt;/code&gt; インターフェイスを。</target>
        </trans-unit>
        <trans-unit id="fbeef5c0517fc941e5840401645ff8bb1740d90c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initMouseEvent&lt;/code&gt; method is used to initialize the value of a &lt;code&gt;MouseEvent&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface. This method may only be called before the &lt;code&gt;MouseEvent&lt;/code&gt; has been dispatched via the &lt;code&gt;dispatchEvent&lt;/code&gt; method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence.</source>
          <target state="translated">&lt;code&gt;initMouseEvent&lt;/code&gt; 方法は、以下の値を初期化するために使用され &lt;code&gt;MouseEvent&lt;/code&gt; を介して作成され &lt;code&gt;DocumentEvent&lt;/code&gt; インターフェイスを。このメソッドは、 &lt;code&gt;MouseEvent&lt;/code&gt; が &lt;code&gt;dispatchEvent&lt;/code&gt; メソッドを介してディスパッチされる前にのみ呼び出すことができますが、必要に応じて、そのフェーズ中に複数回呼び出すことができます。複数回呼び出された場合は、最後の呼び出しが優先されます。</target>
        </trans-unit>
        <trans-unit id="625a8b0abe6c5b47d1eefb61955bc931458fce29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initMutationEvent&lt;/code&gt; method is used to initialize the value of a &lt;code&gt;MutationEvent&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;initMutationEvent&lt;/code&gt; 方法は、以下の値を初期化するために使用され &lt;code&gt;MutationEvent&lt;/code&gt; 介して作成 &lt;code&gt;DocumentEvent&lt;/code&gt; インターフェイスを。</target>
        </trans-unit>
        <trans-unit id="254b29b2d9aabd1ae0ea96ab048a74c10af149c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initMutationEvent&lt;/code&gt; method is used to initialize the value of a &lt;code&gt;MutationEvent&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface. This method may only be called before the &lt;code&gt;MutationEvent&lt;/code&gt; has been dispatched via the &lt;code&gt;dispatchEvent&lt;/code&gt; method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence.</source>
          <target state="translated">&lt;code&gt;initMutationEvent&lt;/code&gt; 方法は、以下の値を初期化するために使用され &lt;code&gt;MutationEvent&lt;/code&gt; 介して作成 &lt;code&gt;DocumentEvent&lt;/code&gt; インターフェイスを。このメソッドは、 &lt;code&gt;MutationEvent&lt;/code&gt; が &lt;code&gt;dispatchEvent&lt;/code&gt; メソッドを介してディスパッチされる前にのみ呼び出すことができますが、必要に応じて、そのフェーズ中に複数回呼び出すことができます。複数回呼び出された場合は、最後の呼び出しが優先されます。</target>
        </trans-unit>
        <trans-unit id="0031ccc968fa433b9c0ee69137ad1acff5549339" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initUIEvent&lt;/code&gt; method is used to initialize the value of a &lt;code&gt;UIEvent&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;initUIEvent&lt;/code&gt; の方法は、の値を初期化するために使用され &lt;code&gt;UIEvent&lt;/code&gt; を介して作成 &lt;code&gt;DocumentEvent&lt;/code&gt; インターフェイスを。</target>
        </trans-unit>
        <trans-unit id="f5e2a52bd2dedb43955ead95d35976c3258ced77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initUIEvent&lt;/code&gt; method is used to initialize the value of a &lt;code&gt;UIEvent&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface. This method may only be called before the &lt;code&gt;UIEvent&lt;/code&gt; has been dispatched via the &lt;code&gt;dispatchEvent&lt;/code&gt; method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence.</source>
          <target state="translated">&lt;code&gt;initUIEvent&lt;/code&gt; の方法は、の値を初期化するために使用され &lt;code&gt;UIEvent&lt;/code&gt; を介して作成 &lt;code&gt;DocumentEvent&lt;/code&gt; インターフェイスを。このメソッドは、 &lt;code&gt;UIEvent&lt;/code&gt; が &lt;code&gt;dispatchEvent&lt;/code&gt; メソッドを介してディスパッチされる前にのみ呼び出すことができますが、必要に応じて、そのフェーズ中に複数回呼び出すことができます。複数回呼び出された場合は、最後の呼び出しが優先されます。</target>
        </trans-unit>
        <trans-unit id="178fa46f7783f7ca8be10feb795a8f432e6ce094" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialSize&lt;/code&gt; parameter may be used by the implementation as a &lt;em&gt;hint&lt;/em&gt; as to the initial number of tasks it may submit. For example, it may be used to indicate the initial number of threads that wait on I/O events.</source>
          <target state="translated">&lt;code&gt;initialSize&lt;/code&gt; パラメータは、として実装で使用することができる&lt;em&gt;ヒント&lt;/em&gt;それが提出することができるタスクの初期数について。たとえば、I / Oイベントを待機するスレッドの初期数を示すために使用できます。</target>
        </trans-unit>
        <trans-unit id="1bd09b116084a74e12383d4253d1c5f87a806306" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialize&lt;/code&gt; methods may each be called any number of times. If no &lt;code&gt;initialize&lt;/code&gt; method is called on a DSAKeyPairGenerator, each provider that implements this interface should supply (and document) a default initialization. Note that defaults may vary across different providers. Additionally, the default value for a provider may change in a future version. Therefore, it is recommended to explicitly initialize the DSAKeyPairGenerator instead of relying on provider-specific defaults.</source>
          <target state="translated">&lt;code&gt;initialize&lt;/code&gt; 方法は、それぞれ何回でも呼び出すことができます。DSAKeyPairGeneratorで &lt;code&gt;initialize&lt;/code&gt; メソッドが呼び出されない場合、このインターフェイスを実装する各プロバイダーは、デフォルトの初期化を提供（および文書化）する必要があります。デフォルトはプロバイダーによって異なる場合があることに注意してください。さらに、プロバイダーのデフォルト値は将来のバージョンで変更される可能性があります。したがって、プロバイダー固有のデフォルトに依存するのではなく、DSAKeyPairGeneratorを明示的に初期化することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="8e1910412b5ab4f4360c75fcf4e4c4f981f39033" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialize&lt;/code&gt; methods may each be called any number of times. If no &lt;code&gt;initialize&lt;/code&gt; method is called on a DSAKeyPairGenerator, the default is to generate 1024-bit keys, using precomputed p, q and g parameters and an instance of SecureRandom as the random bit source.</source>
          <target state="translated">&lt;code&gt;initialize&lt;/code&gt; 方法は、それぞれ何回でも呼び出すことができます。DSAKeyPairGeneratorで &lt;code&gt;initialize&lt;/code&gt; メソッドが呼び出されない場合、デフォルトでは、事前計算されたp、q、gパラメーターと、ランダムビットソースとしてSecureRandomのインスタンスを使用して、1024ビットの鍵が生成されます。</target>
        </trans-unit>
        <trans-unit id="e89c947619670b6f05ed77c9eb43708ff984ab4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;abstract&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;abstract&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="57a2bf2f87f99f529f820792d0d9541859c36200" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;final&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;final&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="b83b91795fa9f3dd467562df8b850ad43ca35b18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;interface&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;interface&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="6e6129e278d1c31b1641cf76868b23a7ccbc053b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;native&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;native&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="9487f7c45da0d56c561a74e7e315aad283ae33db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;private&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;private&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="d998015ddde224da2f2e242d06b1b5cda8342b93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;protected&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の表す値 &lt;code&gt;protected&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="1ab9b738d34103d531a4ba5cdf4833da76ab4445" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;public&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;public&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="cb450909d14452e1607d3359ccbe310b15e65773" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;static&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;static&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="e48ba12a5c869896a959b271934ece28496f4515" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;strictfp&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;strictfp&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="ab15ce0d3f3e80624e13e8b8f7afdae7f2cc31b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;synchronized&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;synchronized&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="47c273abe027c89df6d6ce37e4c65a5d5f445ccc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;transient&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;transient&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="75d6fc286ca2b46ac7f2dfbb0cff289b6c5d7d46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;volatile&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;volatile&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="cfd98033227ef6b3a7f984e0cf8a786a155a86aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;interface&lt;/code&gt; modifier discussed in this class is not a true modifier in the Java language and it appears after all other modifiers listed by this method. This method may return a string of modifiers that are not valid modifiers of a Java entity; in other words, no checking is done on the possible validity of the combination of modifiers represented by the input. Note that to perform such checking for a known kind of entity, such as a constructor or method, first AND the argument of &lt;code&gt;toString&lt;/code&gt; with the appropriate mask from a method like &lt;a href=&quot;#constructorModifiers()&quot;&gt;&lt;code&gt;constructorModifiers()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#methodModifiers()&quot;&gt;&lt;code&gt;methodModifiers()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;interface&lt;/code&gt; このクラスで議論修飾子は、Java言語での真の修飾ではありません、それはこの方法で記載されている他のすべての修飾子の後に表示されます。このメソッドは、Javaエンティティの有効な修飾子ではない修飾子の文字列を返す場合があります。言い換えると、入力によって表される修飾子の組み合わせの有効性の可能性についてはチェックが行われません。コンストラクタやメソッドなどの既知の種類のエンティティに対してこのようなチェックを実行するには、最初に &lt;code&gt;toString&lt;/code&gt; の引数と&lt;a href=&quot;#constructorModifiers()&quot;&gt; &lt;code&gt;constructorModifiers()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#methodModifiers()&quot;&gt; &lt;code&gt;methodModifiers()&lt;/code&gt; &lt;/a&gt;などのメソッドからの適切なマスクをANDします。</target>
        </trans-unit>
        <trans-unit id="cfcd94506157aeb895a9c9c21b22d64a6d79a08a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;interface&lt;/code&gt; modifier discussed in this class is not a true modifier in the Java language and it appears after all other modifiers listed by this method. This method may return a string of modifiers that are not valid modifiers of a Java entity; in other words, no checking is done on the possible validity of the combination of modifiers represented by the input. Note that to perform such checking for a known kind of entity, such as a constructor or method, first AND the argument of &lt;code&gt;toString&lt;/code&gt; with the appropriate mask from a method like &lt;a href=&quot;modifier#constructorModifiers--&quot;&gt;&lt;code&gt;constructorModifiers()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;modifier#methodModifiers--&quot;&gt;&lt;code&gt;methodModifiers()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;interface&lt;/code&gt; このクラスで議論修飾子は、Java言語での真の修飾ではありません、それはこの方法で記載されている他のすべての修飾子の後に表示されます。このメソッドは、Javaエンティティの有効な修飾子ではない修飾子の文字列を返す場合があります。つまり、入力によって表される修飾子の組み合わせの有効性のチェックは行われません。コンストラクタやメソッドなどの既知の種類のエンティティに対してこのようなチェックを実行するには、最初に、 &lt;code&gt;toString&lt;/code&gt; の引数と、&lt;a href=&quot;modifier#constructorModifiers--&quot;&gt; &lt;code&gt;constructorModifiers()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;modifier#methodModifiers--&quot;&gt; &lt;code&gt;methodModifiers()&lt;/code&gt; &lt;/a&gt;などのメソッドからの適切なマスクをANDで結合します。</target>
        </trans-unit>
        <trans-unit id="58627a573928318b0e86229e8345a42317bf4581" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;invokedynamic&lt;/code&gt; instruction makes use of bootstrap &lt;code&gt;MethodHandle&lt;/code&gt; constants to dynamically resolve &lt;code&gt;CallSite&lt;/code&gt; objects for custom method invocation behavior.</source>
          <target state="translated">&lt;code&gt;invokedynamic&lt;/code&gt; の命令は、ブートストラップを使用します &lt;code&gt;MethodHandle&lt;/code&gt; 定数を動的に解決するために &lt;code&gt;CallSite&lt;/code&gt; カスタムメソッド呼び出しの動作のためのオブジェクト。</target>
        </trans-unit>
        <trans-unit id="665a37a65bad1ed4e2e3237e067bfa95f31eb667" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isContainer&lt;/code&gt;&lt;a href=&quot;../../java/beans/featuredescriptor#getValue(java.lang.String)&quot;&gt;&lt;code&gt;feature attribute&lt;/code&gt;&lt;/a&gt; was introduced primarily for the Swing library. All Swing components extend the &lt;a href=&quot;../../java/awt/container&quot;&gt;&lt;code&gt;Container&lt;/code&gt;&lt;/a&gt; class by design, so the builder tool assumes that all Swing components are containers. The &lt;a href=&quot;../../java/beans/beaninfo&quot;&gt;&lt;code&gt;BeanInfo&lt;/code&gt;&lt;/a&gt; classes with the &lt;code&gt;isContainer&lt;/code&gt; attribute allow to directly specify whether a Swing component is a container or not.</source>
          <target state="translated">&lt;code&gt;isContainer&lt;/code&gt; の&lt;a href=&quot;../../java/beans/featuredescriptor#getValue(java.lang.String)&quot;&gt; &lt;code&gt;feature attribute&lt;/code&gt; &lt;/a&gt;、主にSwingライブラリのために導入されました。すべてのSwingコンポーネントは設計により&lt;a href=&quot;../../java/awt/container&quot;&gt; &lt;code&gt;Container&lt;/code&gt; &lt;/a&gt;クラスを拡張するため、ビルダーツールはすべてのSwingコンポーネントがコンテナーであると想定します。&lt;a href=&quot;../../java/beans/beaninfo&quot;&gt; &lt;code&gt;BeanInfo&lt;/code&gt; &lt;/a&gt;を持つクラス &lt;code&gt;isContainer&lt;/code&gt; の属性は、直接、Swingコンポーネントがコンテナであるかどうかを指定することができます。</target>
        </trans-unit>
        <trans-unit id="fbbe4efb7b82c12416112b91d882adb2461b3096" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isEnabled&lt;/code&gt; method</source>
          <target state="translated">&lt;code&gt;isEnabled&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="f254cbd5db1e9d15f5755ade659caa4db237d900" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isMixerSupported&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; for all the info objects returned by this method. The corresponding mixer instances for the info objects are returned by the &lt;code&gt;getMixer&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;isMixerSupported&lt;/code&gt; のメソッドが返す &lt;code&gt;true&lt;/code&gt; すべての情報については、このメソッドによって返されるオブジェクト。infoオブジェクトに対応するミキサーインスタンスは、 &lt;code&gt;getMixer&lt;/code&gt; メソッドによって返されます。</target>
        </trans-unit>
        <trans-unit id="cc647a7047b23398301d649428d6203301b91e91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;iterations&lt;/code&gt; handle must not be &lt;code&gt;null&lt;/code&gt;, and must return the type &lt;code&gt;int&lt;/code&gt;, referred to here as &lt;code&gt;I&lt;/code&gt; in parameter type lists.</source>
          <target state="translated">&lt;code&gt;iterations&lt;/code&gt; ハンドルがあってはならない &lt;code&gt;null&lt;/code&gt; 、および型を返す必要があります &lt;code&gt;int&lt;/code&gt; 型を、とここでいう &lt;code&gt;I&lt;/code&gt; パラメータ型リストに。</target>
        </trans-unit>
        <trans-unit id="faab6cad1b99da33b71348933be79609cd1c2d1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.awt.TextArea&lt;/code&gt; could be monitored for changes by adding a &lt;code&gt;TextListener&lt;/code&gt; for &lt;code&gt;TextEvent&lt;/code&gt;s. In the &lt;code&gt;JTextComponent&lt;/code&gt; based components, changes are broadcasted from the model via a &lt;code&gt;DocumentEvent&lt;/code&gt; to &lt;code&gt;DocumentListeners&lt;/code&gt;. The &lt;code&gt;DocumentEvent&lt;/code&gt; gives the location of the change and the kind of change if desired. The code fragment might look something like:</source>
          <target state="translated">&lt;code&gt;TextEvent&lt;/code&gt; の &lt;code&gt;TextListener&lt;/code&gt; を追加することにより、 &lt;code&gt;java.awt.TextArea&lt;/code&gt; の変更を監視できます。 &lt;code&gt;JTextComponent&lt;/code&gt; ベースのコンポーネント、変更を介してモデルから放送される &lt;code&gt;DocumentEvent&lt;/code&gt; をする &lt;code&gt;DocumentListeners&lt;/code&gt; 。 &lt;code&gt;DocumentEvent&lt;/code&gt; 変化し、所望であれば、変化の種類の場所を与えます。コードフラグメントは次のようになります。</target>
        </trans-unit>
        <trans-unit id="55efcc9383d4d056ce334accbd6b2bac39494936" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.awt.TextArea&lt;/code&gt; has the ability to do line wrapping. This was controlled by the horizontal scrolling policy. Since scrolling is not done by &lt;code&gt;JTextArea&lt;/code&gt; directly, backward compatibility must be provided another way. &lt;code&gt;JTextArea&lt;/code&gt; has a bound property for line wrapping that controls whether or not it will wrap lines. By default, the line wrapping property is set to false (not wrapped).</source>
          <target state="translated">&lt;code&gt;java.awt.TextArea&lt;/code&gt; のは、行の折り返しを行う能力を持っています。これは、水平スクロールポリシーによって制御されていました。スクロールは &lt;code&gt;JTextArea&lt;/code&gt; によって直接行われないため、下位互換性を別の方法で提供する必要があります。 &lt;code&gt;JTextArea&lt;/code&gt; には、行を折り返すかどうかを制御する行折り返しのバインドされたプロパティがあります。デフォルトでは、行の折り返しプロパティはfalse（折り返されていません）に設定されています。</target>
        </trans-unit>
        <trans-unit id="c0fcfe43cbce6a18be4a70c21673c0e92d35fccc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.awt.TextArea&lt;/code&gt; internally handles scrolling. &lt;code&gt;JTextArea&lt;/code&gt; is different in that it doesn't manage scrolling, but implements the swing &lt;code&gt;Scrollable&lt;/code&gt; interface. This allows it to be placed inside a &lt;code&gt;JScrollPane&lt;/code&gt; if scrolling behavior is desired, and used directly if scrolling is not desired.</source>
          <target state="translated">&lt;code&gt;java.awt.TextArea&lt;/code&gt; のは、内部でスクロール処理します。 &lt;code&gt;JTextArea&lt;/code&gt; は、スクロールを管理しないという点で異なりますが、 &lt;code&gt;Scrollable&lt;/code&gt; インターフェイスを実装します。これにより、スクロール動作が必要な場合は &lt;code&gt;JScrollPane&lt;/code&gt; 内に配置でき、スクロールが不要な場合は直接使用できます。</target>
        </trans-unit>
        <trans-unit id="0db34ffc0a9406c8096ce234b9fa75533ba4eff0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.awt.TextField&lt;/code&gt; could be monitored for changes by adding a &lt;code&gt;TextListener&lt;/code&gt; for &lt;code&gt;TextEvent&lt;/code&gt;'s. In the &lt;code&gt;JTextComponent&lt;/code&gt; based components, changes are broadcasted from the model via a &lt;code&gt;DocumentEvent&lt;/code&gt; to &lt;code&gt;DocumentListeners&lt;/code&gt;. The &lt;code&gt;DocumentEvent&lt;/code&gt; gives the location of the change and the kind of change if desired. The code fragment might look something like:</source>
          <target state="translated">&lt;code&gt;TextEvent&lt;/code&gt; の &lt;code&gt;TextListener&lt;/code&gt; を追加することにより、 &lt;code&gt;java.awt.TextField&lt;/code&gt; の変更を監視できます。 &lt;code&gt;JTextComponent&lt;/code&gt; ベースのコンポーネント、変更を介してモデルから放送される &lt;code&gt;DocumentEvent&lt;/code&gt; をする &lt;code&gt;DocumentListeners&lt;/code&gt; 。 &lt;code&gt;DocumentEvent&lt;/code&gt; 変化し、所望であれば、変化の種類の場所を与えます。コードフラグメントは次のようになります。</target>
        </trans-unit>
        <trans-unit id="bec8b9be4298b00c09430efa2b0f3eff6e4f2e07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.lang.invoke&lt;/code&gt; package contains dynamic language support provided directly by the Java core class libraries and virtual machine.</source>
          <target state="translated">&lt;code&gt;java.lang.invoke&lt;/code&gt; のパッケージには、Javaのコア・クラス・ライブラリおよび仮想マシンによって直接提供される動的言語サポートが含まれています。</target>
        </trans-unit>
        <trans-unit id="b0a41816ff2f5ea5a0a95f8f418989d42132101f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.lang.invoke&lt;/code&gt; package provides low-level primitives for interacting with the Java Virtual Machine.</source>
          <target state="translated">&lt;code&gt;java.lang.invoke&lt;/code&gt; のパッケージには、Java仮想マシンと対話するための低レベルプリミティブを提供します。</target>
        </trans-unit>
        <trans-unit id="8f060dd8b6798a7705664964cbd779c5052966d1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.lang.runtime&lt;/code&gt; package provides low-level runtime support for the Java language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e2e6b7ef82a944f100ddc377e04a645035f44c50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.nio&lt;/code&gt; package defines the buffer classes, which are used throughout the NIO APIs. The charset API is defined in the &lt;a href=&quot;charset/package-summary&quot;&gt;&lt;code&gt;java.nio.charset&lt;/code&gt;&lt;/a&gt; package, and the channel and selector APIs are defined in the &lt;a href=&quot;channels/package-summary&quot;&gt;&lt;code&gt;java.nio.channels&lt;/code&gt;&lt;/a&gt; package. Each of these subpackages has its own service-provider (SPI) subpackage, the contents of which can be used to extend the platform's default implementations or to construct alternative implementations.</source>
          <target state="translated">&lt;code&gt;java.nio&lt;/code&gt; でのパッケージは、NIO APIの全体で使用されるバッファクラスを定義しています。 charset APIは&lt;a href=&quot;charset/package-summary&quot;&gt; &lt;code&gt;java.nio.charset&lt;/code&gt; &lt;/a&gt;パッケージで定義されており、チャネルおよびセレクターAPIは&lt;a href=&quot;channels/package-summary&quot;&gt; &lt;code&gt;java.nio.channels&lt;/code&gt; &lt;/a&gt;パッケージで定義されています。これらの各サブパッケージには、独自のサービスプロバイダー（SPI）サブパッケージがあり、その内容を使用して、プラットフォームのデフォルト実装を拡張したり、代替実装を構築したりできます。</target>
        </trans-unit>
        <trans-unit id="169158b25e43c0b1b051996b7d7ecf8990270082" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.security.ProtectionDomain&lt;/code&gt; of a proxy class is the same as that of system classes loaded by the bootstrap class loader, such as &lt;code&gt;java.lang.Object&lt;/code&gt;, because the code for a proxy class is generated by trusted system code. This protection domain will typically be granted &lt;code&gt;java.security.AllPermission&lt;/code&gt;.</source>
          <target state="translated">プロキシクラスのコードは信頼できるシステムコードによって生成されるため、プロキシクラスの &lt;code&gt;java.security.ProtectionDomain&lt;/code&gt; は、ブートストラップクラスローダーによってロードされたシステムクラス（ &lt;code&gt;java.lang.Object&lt;/code&gt; など）と同じです。この保護ドメインには通常、 &lt;code&gt;java.security.AllPermission&lt;/code&gt; が付与されます。</target>
        </trans-unit>
        <trans-unit id="9813f685206a1823081b6d834a2cc39d317ab3f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.security.acl &lt;/code&gt; package provides the interfaces to the ACL and related data structures (ACL entries, groups, permissions, etc.), and the &lt;code&gt;sun.security.acl &lt;/code&gt; classes provide a default implementation of the interfaces. For example, &lt;code&gt;java.security.acl.Acl &lt;/code&gt; provides the interface to an ACL and the &lt;code&gt;sun.security.acl.AclImpl &lt;/code&gt; class provides the default implementation of the interface.</source>
          <target state="translated">&lt;code&gt;java.security.acl &lt;/code&gt; パッケージは、ACLと関連するデータ構造へのインターフェイス（ACLエントリ、グループ、アクセス権など）を提供し、 &lt;code&gt;sun.security.acl &lt;/code&gt; クラスは、インターフェイスのデフォルトの実装を提供します。たとえば、 &lt;code&gt;java.security.acl.Acl &lt;/code&gt; はACLへのインタフェースを提供し、 &lt;code&gt;sun.security.acl.AclImpl &lt;/code&gt; クラスはインタフェースのデフォルトの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="cfb4c2fdc7d8d17ba626b9a63de7a2721320820c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.security.acl.Acl &lt;/code&gt; interface extends the &lt;code&gt;java.security.acl.Owner &lt;/code&gt; interface. The Owner interface is used to maintain a list of owners for each ACL. Only owners are allowed to modify an ACL. For example, only an owner can call the ACL's &lt;code&gt;addEntry&lt;/code&gt; method to add a new ACL entry to the ACL.</source>
          <target state="translated">&lt;code&gt;java.security.acl.Acl &lt;/code&gt; のインターフェイスを拡張し &lt;code&gt;java.security.acl.Owner &lt;/code&gt; のインターフェイスを。オーナーインターフェイスは、各ACLのオーナーのリストを維持するために使用されます。所有者のみがACLを変更できます。たとえば、所有者だけがACLの &lt;code&gt;addEntry&lt;/code&gt; メソッドを呼び出して、ACLに新しいACLエントリを追加できます。</target>
        </trans-unit>
        <trans-unit id="784b90ba50939cbb669846b289f22423e455bd4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.sql&lt;/code&gt; package contains API for the following:</source>
          <target state="translated">&lt;code&gt;java.sql&lt;/code&gt; パッケージには、次のAPIが含まれています。</target>
        </trans-unit>
        <trans-unit id="c584f80333ee86bf0587299c7f49da992c3a95b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.time.chrono&lt;/code&gt; package contains the calendar neutral API &lt;a href=&quot;chrono/chronolocaldate&quot;&gt;&lt;code&gt;ChronoLocalDate&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;chrono/chronolocaldatetime&quot;&gt;&lt;code&gt;ChronoLocalDateTime&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;chrono/chronozoneddatetime&quot;&gt;&lt;code&gt;ChronoZonedDateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;chrono/era&quot;&gt;&lt;code&gt;Era&lt;/code&gt;&lt;/a&gt;. This is intended for use by applications that need to use localized calendars. It is recommended that applications use the ISO-8601 date and time classes from this package across system boundaries, such as to the database or across the network. The calendar neutral API should be reserved for interactions with users.</source>
          <target state="translated">&lt;code&gt;java.time.chrono&lt;/code&gt; のパッケージには、カレンダー中立APIが含まれ&lt;a href=&quot;chrono/chronolocaldate&quot;&gt; &lt;code&gt;ChronoLocalDate&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;chrono/chronolocaldatetime&quot;&gt; &lt;code&gt;ChronoLocalDateTime&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;chrono/chronozoneddatetime&quot;&gt; &lt;code&gt;ChronoZonedDateTime&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;chrono/era&quot;&gt; &lt;code&gt;Era&lt;/code&gt; &lt;/a&gt;。これは、ローカライズされたカレンダーを使用する必要があるアプリケーションでの使用を目的としています。アプリケーションは、データベースやネットワークなどのシステム境界を越えて、このパッケージのISO-8601日時クラスを使用することをお勧めします。カレンダーニュートラルAPIは、ユーザーとのやり取りのために予約する必要があります。</target>
        </trans-unit>
        <trans-unit id="03e8a4f31755534e88e5baa019171c02ab0e0e1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.util.jar&lt;/code&gt; package is based on the following specifications:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dd3f9283b71471748cf9a84dacce07bc07e230bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.imageio.spi&lt;/code&gt; package contains service provider interfaces for reading, writing, and transcoding images, and obtaining image input and output streams, as well as a run-time registry that discovers installed instances of Image I/O service providers and allows new instances to be registered dynamically.</source>
          <target state="translated">&lt;code&gt;javax.imageio.spi&lt;/code&gt; パッケージには、イメージの読み取り、書き込み、トランスコード、イメージの入力ストリームと出力ストリームの取得のためのサービスプロバイダーインターフェイスと、インストールされているイメージI / Oサービスプロバイダーのインスタンスを検出して新しいものを許可するランタイムレジストリが含まれています。動的に登録されるインスタンス。</target>
        </trans-unit>
        <trans-unit id="31f5723f716d2e10c3dc95d349885c1c4063b2cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.imageio.spi&lt;/code&gt; package contains service provider interfaces for reading, writing, and transcoding images, and obtaining input and output streams, as well as a run-time registry that discovers installed service provider instances and allows new instances to be registered dynamically.</source>
          <target state="translated">&lt;code&gt;javax.imageio.spi&lt;/code&gt; パッケージには、イメージの読み取り、書き込み、トランスコード、入力ストリームと出力ストリームの取得のためのサービスプロバイダーインターフェイス、およびインストールされたサービスプロバイダーインスタンスを検出して新しいインスタンスを動的に登録できるランタイムレジストリが含まれています。</target>
        </trans-unit>
        <trans-unit id="2f9893bf2cb21c5852d399c228329581eed4bc85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.print.attribute&lt;/code&gt; package describes the types of attributes and how they can be collected into sets. The &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; package enumerates all of the standard attributes supported by the API, most of which are implementations of attributes specified in the IETF Specification, &lt;a href=&quot;http://www.ietf.org/rfc/rfc2911.txt&quot;&gt; RFC 2911 Internet Printing Protocol, 1.1: Model and Semantics&lt;/a&gt;, dated September 2000. The attributes specified in &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; include common capabilities, such as: resolution, copies, media sizes, job priority, and page ranges.</source>
          <target state="translated">&lt;code&gt;javax.print.attribute&lt;/code&gt; ののパッケージには、属性の種類を説明し、それらがどのようにセットに収集することができます。 &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; ののすべての属性の実装であるほとんどがAPIでサポートされている標準属性、のを列挙は、IETF仕様で指定されたパッケージ、&lt;a href=&quot;http://www.ietf.org/rfc/rfc2911.txt&quot;&gt;RFC 2911インターネット印刷プロトコル、1.1：モデルとセマンティクス&lt;/a&gt;、日付2000年9月 &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; で指定された属性には、解像度、コピー、メディアサイズ、ジョブの優先順位、ページ範囲などの一般的な機能が含まれます。</target>
        </trans-unit>
        <trans-unit id="c52c82c2dc7611fe0c69651dc489e948a8470acb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.print.attribute&lt;/code&gt; package describes the types of attributes and how they can be collected into sets. The &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; package enumerates all of the standard attributes supported by the API, most of which are implementations of attributes specified in the IETF Specification, &lt;a href=&quot;http://www.ietf.org/rfc/rfc2911.txt&quot;&gt;RFC 2911 Internet Printing Protocol, 1.1: Model and Semantics&lt;/a&gt;, dated September 2000. The attributes specified in &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; include common capabilities, such as: resolution, copies, media sizes, job priority, and page ranges.</source>
          <target state="translated">&lt;code&gt;javax.print.attribute&lt;/code&gt; ののパッケージには、属性の種類を説明し、それらがどのようにセットに収集することができます。 &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; ののすべての属性の実装であるほとんどがAPIでサポートされている標準属性、のを列挙は、IETF仕様で指定されたパッケージ、&lt;a href=&quot;http://www.ietf.org/rfc/rfc2911.txt&quot;&gt;RFC 2911インターネット印刷プロトコル、1.1：モデルとセマンティクス&lt;/a&gt;、日付2000年9月 &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; で指定されている属性には、解像度、コピー、メディアサイズ、ジョブの優先度、ページ範囲などの一般的な機能が含まれています。</target>
        </trans-unit>
        <trans-unit id="f2cf594265efb7b9fc2edd8226233f1ddb5455a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.print.attribute&lt;/code&gt; package describes the types of attributes and how they can be collected into sets. The &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; package enumerates all of the standard attributes supported by the API, most of which are implementations of attributes specified in the IETF Specification, &lt;a href=&quot;https://www.ietf.org/rfc/rfc2911.txt&quot;&gt;RFC 2911 Internet Printing Protocol, 1.1: Model and Semantics&lt;/a&gt;, dated September 2000. The attributes specified in &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; include common capabilities, such as: resolution, copies, media sizes, job priority, and page ranges.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f1ac81c4983fd4e99cf0a56e6178b754e13e7442" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.print.attribute&lt;/code&gt; package includes &lt;a href=&quot;hashattributeset&quot;&gt;HashAttributeSet&lt;/a&gt; as a concrete implementation of the attribute set interface. &lt;code&gt;HashAttributeSet&lt;/code&gt; provides an attribute set based on a hash map. You can use this implementation or provide your own implementation of interface &lt;code&gt;AttributeSet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;javax.print.attribute&lt;/code&gt; ののパッケージには、&lt;a href=&quot;hashattributeset&quot;&gt;HashAttributeSetを&lt;/a&gt;属性セットのインタフェースの具体的な実装として。 &lt;code&gt;HashAttributeSet&lt;/code&gt; は、ハッシュマップに基づいた属性セットを提供します。この実装を使用することも、インターフェース &lt;code&gt;AttributeSet&lt;/code&gt; の独自の実装を提供することもできます。</target>
        </trans-unit>
        <trans-unit id="ce40bf00e14dc3ae69324c9a349e2c2ebf3d4866" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.sql&lt;/code&gt; package provides for the following:</source>
          <target state="translated">&lt;code&gt;javax.sql&lt;/code&gt; でのパッケージには、次のために用意されています。</target>
        </trans-unit>
        <trans-unit id="054bef0e67b4c84386043a510c836ef1eefccd8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.sql&lt;/code&gt; package provides the preferred way to make a connection with a data source. The &lt;code&gt;DriverManager&lt;/code&gt; class, the original mechanism, is still valid, and code using it will continue to run. However, the newer &lt;code&gt;DataSource&lt;/code&gt; mechanism is preferred because it offers many advantages over the &lt;code&gt;DriverManager&lt;/code&gt; mechanism.</source>
          <target state="translated">&lt;code&gt;javax.sql&lt;/code&gt; でのパッケージには、データソースとの接続を行うための好ましい方法を提供します。 &lt;code&gt;DriverManager&lt;/code&gt; クラス、オリジナルのメカニズムは、まだ有効であり、それを使用してコードを実行し続けます。ただし、 &lt;code&gt;DriverManager&lt;/code&gt; メカニズムに比べて多くの利点があるため、新しい &lt;code&gt;DataSource&lt;/code&gt; メカニズムが推奨されます。</target>
        </trans-unit>
        <trans-unit id="78270c76347c7770cb655e4c785215d8bdb0d512" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.xml.catalog.defer&lt;/code&gt; property as described in item &lt;a href=&quot;catalogfeatures#DEFER&quot;&gt;DEFER&lt;/a&gt; of the Catalog Features table.</source>
          <target state="translated">&lt;code&gt;javax.xml.catalog.defer&lt;/code&gt; の項目で説明したようにプロパティ&lt;a href=&quot;catalogfeatures#DEFER&quot;&gt;DEFER&lt;/a&gt;カタログのは、台を備えています。</target>
        </trans-unit>
        <trans-unit id="15d2ad6f93e03730ebc25b9f11249586e69ac782" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.xml.catalog.files&lt;/code&gt; property as described in item &lt;a href=&quot;catalogfeatures#FILES&quot;&gt;FILES&lt;/a&gt; of the Catalog Features table.</source>
          <target state="translated">&lt;code&gt;javax.xml.catalog.files&lt;/code&gt; の項目で説明したようにプロパティ&lt;a href=&quot;catalogfeatures#FILES&quot;&gt;FILES&lt;/a&gt;カタログのは、台を備えています。</target>
        </trans-unit>
        <trans-unit id="9fc2f2e095ade91fa2f052d206896d8dfe4877e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.xml.catalog.prefer&lt;/code&gt; property as described in item &lt;a href=&quot;catalogfeatures#PREFER&quot;&gt;PREFER&lt;/a&gt; of the Catalog Features table.</source>
          <target state="translated">&lt;code&gt;javax.xml.catalog.prefer&lt;/code&gt; の項目で説明したようにプロパティが&lt;a href=&quot;catalogfeatures#PREFER&quot;&gt;好む&lt;/a&gt;カタログの台を備えています。</target>
        </trans-unit>
        <trans-unit id="db3821d6c87a43457aa9b8813d01a7019a6129e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.xml.catalog.resolve&lt;/code&gt; property as described in item &lt;a href=&quot;catalogfeatures#RESOLVE&quot;&gt;RESOLVE&lt;/a&gt; of the Catalog Features table.</source>
          <target state="translated">&lt;code&gt;javax.xml.catalog.resolve&lt;/code&gt; 項目で説明したようにプロパティ&lt;a href=&quot;catalogfeatures#RESOLVE&quot;&gt;RESOLVE&lt;/a&gt;カタログのは、台を備えています。</target>
        </trans-unit>
        <trans-unit id="93789cdb1067b60dea1052c68162e9476ca283fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jaxp.properties&lt;/code&gt; file is typically in the conf directory of the Java installation. The file is read only once by the JAXP implementation and its values are then cached for future use. If the file does not exist when the first attempt is made to read from it, no further attempts are made to check for its existence. It is not possible to change the value of any properties in &lt;code&gt;jaxp.properties&lt;/code&gt; after it has been read.</source>
          <target state="translated">&lt;code&gt;jaxp.properties&lt;/code&gt; のファイルは、Javaのインストールのconfディレクトリにあるのが典型的です。ファイルはJAXP実装によって一度だけ読み取られ、その値は将来の使用のためにキャッシュされます。ファイルからの最初の読み取りが試行されたときにファイルが存在しない場合、その存在を確認するためのそれ以上の試行は行われません。 &lt;code&gt;jaxp.properties&lt;/code&gt; 後、jaxp.propertiesのプロパティの値を変更することはできません。</target>
        </trans-unit>
        <trans-unit id="e2a7485770f758bc31860b6c07b8541a8b9eeb14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jdbc.drivers&lt;/code&gt; system property which contains a colon separated list of fully qualified class names of JDBC drivers. Each driver is loaded using the &lt;a href=&quot;../../../java.base/java/lang/classloader#getSystemClassLoader()&quot;&gt;system class loader&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;jdbc.drivers&lt;/code&gt; のJDBCドライバの完全修飾クラス名のコロンで区切られたリストを含むシステムプロパティ。各ドライバーは、&lt;a href=&quot;../../../java.base/java/lang/classloader#getSystemClassLoader()&quot;&gt;システムクラスローダー&lt;/a&gt;を使用してロードされます。</target>
        </trans-unit>
        <trans-unit id="a71eaf9975dc38ac7aef813701422744379f589d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jpackage&lt;/code&gt; tool is not thread-safe. An application should not call either of the &lt;a href=&quot;../java.base/java/util/spi/toolprovider&quot;&gt;&lt;code&gt;ToolProvider&lt;/code&gt;&lt;/a&gt;&lt;code&gt;run&lt;/code&gt; methods concurrently, even with separate &lt;code&gt;&quot;jpackage&quot;&lt;/code&gt;&lt;code&gt;ToolProvider&lt;/code&gt; instances, or undefined behavior may result.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a4512a267bf8a4a8b628ff06249f45a97a9013e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kind&lt;/code&gt; of a directive.</source>
          <target state="translated">ディレクティブの &lt;code&gt;kind&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="766e65fec5bf118351de7f21179d89ba7379dbda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kind&lt;/code&gt; of an element.</source>
          <target state="translated">要素の &lt;code&gt;kind&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="583ea0cb6650b486f04f1d06cd030a009d684d42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;krb5.conf&lt;/code&gt; file is formatted in the Windows INI file style, which contains a series of relations grouped into different sections. Each relation contains a key and a value, the value can be an arbitrary string or a boolean value. A boolean value can be one of &quot;true&quot;, &quot;false&quot;, &quot;yes&quot;, or &quot;no&quot;, and values are case-insensitive.</source>
          <target state="translated">&lt;code&gt;krb5.conf&lt;/code&gt; ファイルが別のセクションにグループ化関係のシリーズを含むWindows INIファイル形式でフォーマットされます。各リレーションにはキーと値が含まれ、値は任意の文字列またはブール値にすることができます。ブール値は、「true」、「false」、「yes」、または「no」のいずれかになり、値では大文字と小文字が区別されません。</target>
        </trans-unit>
        <trans-unit id="fbe5ef5eb552727a780a36060063e8f5dc9148f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;layeredPane&lt;/code&gt; fills the entire viewable area of the &lt;code&gt;JRootPane&lt;/code&gt;. (bounds - insets)</source>
          <target state="translated">&lt;code&gt;layeredPane&lt;/code&gt; は、全体の表示可能領域いっぱい &lt;code&gt;JRootPane&lt;/code&gt; 。（境界-挿入図）</target>
        </trans-unit>
        <trans-unit id="3cfb47b698c324c8e60c3a7f81085135ef605f6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;layeredPane&lt;/code&gt; is the parent of all children in the &lt;code&gt;JRootPane&lt;/code&gt; -- both as the direct parent of the menu and the grandparent of all components added to the &lt;code&gt;contentPane&lt;/code&gt;. It is an instance of &lt;code&gt;JLayeredPane&lt;/code&gt;, which provides the ability to add components at several layers. This capability is very useful when working with menu popups, dialog boxes, and dragging -- situations in which you need to place a component on top of all other components in the pane.</source>
          <target state="translated">&lt;code&gt;layeredPane&lt;/code&gt; は、すべての子供の親である &lt;code&gt;JRootPane&lt;/code&gt; の両方のメニューに加え、すべてのコンポーネントの祖父母の直接の親として- &lt;code&gt;contentPane&lt;/code&gt; 。これは &lt;code&gt;JLayeredPane&lt;/code&gt; のインスタンスであり、複数のレイヤーにコンポーネントを追加する機能を提供します。この機能は、メニューポップアップ、ダイアログボックス、およびドラッグ（ペイン内の他のすべてのコンポーネントの上にコンポーネントを配置する必要がある状況）を操作するときに非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="bbb82873975dbeba0e74c27fbee85cbfbbfbdc0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ldc&lt;/code&gt; instruction makes use of bootstrap &lt;code&gt;MethodHandle&lt;/code&gt; constants to dynamically resolve custom constant values.</source>
          <target state="translated">&lt;code&gt;ldc&lt;/code&gt; 命令は、ブートストラップを使用します &lt;code&gt;MethodHandle&lt;/code&gt; 動的に解決カスタム一定の値に定数を。</target>
        </trans-unit>
        <trans-unit id="a5fbfe70cef778b32594cced3a732339cbc1acf5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; argument is negative.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 引数が負です。</target>
        </trans-unit>
        <trans-unit id="5c30faee739e118e9dbf221fbacf126dc2e548ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; argument must be less than or equal to &lt;code&gt;buf.length&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 引数が未満であるかに等しくなければならない &lt;code&gt;buf.length&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c1ab860b5d9fdfdc8cacefe29fa6bee88d721891" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;limit&lt;/code&gt; parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array.</source>
          <target state="translated">&lt;code&gt;limit&lt;/code&gt; パラメータは、パターンが適用される回数を制御し、従って、得られた配列の長さに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="a20aaa21bfe3d598720524fef65f51974af49fb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;limit&lt;/code&gt; parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array. If the limit</source>
          <target state="translated">&lt;code&gt;limit&lt;/code&gt; パラメータは、パターンが適用される回数を制御し、従って、得られた配列の長さに影響を与えます。限界なら</target>
        </trans-unit>
        <trans-unit id="7227cc8a8f47600f7a135282736709ff73dd62b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;link&lt;/code&gt; parameter locates the directory entry to create. The &lt;code&gt;existing&lt;/code&gt; parameter is the path to an existing file. This method creates a new directory entry for the file so that it can be accessed using &lt;code&gt;link&lt;/code&gt; as the path. On some file systems this is known as creating a &quot;hard link&quot;. Whether the file attributes are maintained for the file or for each directory entry is file system specific and therefore not specified. Typically, a file system requires that all links (directory entries) for a file be on the same file system. Furthermore, on some platforms, the Java virtual machine may require to be started with implementation specific privileges to create hard links or to create links to directories.</source>
          <target state="translated">&lt;code&gt;link&lt;/code&gt; パラメータは、作成するディレクトリエントリを検索します。 &lt;code&gt;existing&lt;/code&gt; パラメータは、既存のファイルへのパスです。このメソッドは、 &lt;code&gt;link&lt;/code&gt; をパスとして使用してアクセスできるように、ファイルの新しいディレクトリエントリを作成します。一部のファイルシステムでは、これは「ハードリンク」の作成と呼ばれます。ファイル属性がファイルに対して維持されるか、各ディレクトリエントリに対して維持されるかは、ファイルシステム固有であるため、指定されていません。通常、ファイルシステムでは、ファイルのすべてのリンク（ディレクトリエントリ）が同じファイルシステム上にある必要があります。さらに、一部のプラットフォームでは、ハードリンクを作成したり、ディレクトリへのリンクを作成したりするために、Java仮想マシンを実装固有の権限で起動する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="9d151fce3015e4ed9e5cd20051237afb5cefea88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listIterator(int)&lt;/code&gt; method returns a &quot;wrapper object&quot; over a list iterator on the backing list, which is created with the corresponding method on the backing list. The &lt;code&gt;iterator&lt;/code&gt; method merely returns &lt;code&gt;listIterator()&lt;/code&gt;, and the &lt;code&gt;size&lt;/code&gt; method merely returns the subclass's &lt;code&gt;size&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;listIterator(int)&lt;/code&gt; メソッドは、バッキングリストの対応するメソッドで作成されたバッキングリスト、上リストイテレータ上「ラッパー・オブジェクト」を返します。 &lt;code&gt;iterator&lt;/code&gt; 方法は、単に返す &lt;code&gt;listIterator()&lt;/code&gt; 、及び &lt;code&gt;size&lt;/code&gt; 方法は、単に、サブクラスの戻り &lt;code&gt;size&lt;/code&gt; フィールド。</target>
        </trans-unit>
        <trans-unit id="2c77410030181476fea1a68458124459ebc9a9bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listener&lt;/code&gt; listens to property changes only in this context.</source>
          <target state="translated">&lt;code&gt;listener&lt;/code&gt; 唯一、このコンテキスト内のプロパティの変更に待機します。</target>
        </trans-unit>
        <trans-unit id="1fedd930e38f5398c449c705300b0fc17b0566c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loadClass&lt;/code&gt; method in class &lt;code&gt;ClassLoader&lt;/code&gt;.</source>
          <target state="translated">クラス &lt;code&gt;ClassLoader&lt;/code&gt; の &lt;code&gt;loadClass&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="df54bb2871f3875ee6a1a7f2fe8a7beb4fbe0bd8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locate&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt; simply returns the component itself if the (</source>
          <target state="translated">&lt;code&gt;Component&lt;/code&gt; の &lt;code&gt;locate&lt;/code&gt; メソッドは、（（</target>
        </trans-unit>
        <trans-unit id="9577d55fc0aa6d8010723707a44862242076491d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lookupEndpoints&lt;/code&gt; method of each provider, if instantiated, is invoked once with a combination of each of the URLs in the the &lt;code&gt;java.naming.provider.url&lt;/code&gt; property and the environment until a provider returns non-empty or all providers have been exhausted. If none of the &lt;a href=&quot;../ldap/spi/ldapdnsprovider&quot;&gt;LdapDnsProviders&lt;/a&gt; return a non-empty &lt;a href=&quot;../ldap/spi/ldapdnsproviderresult&quot;&gt;result&lt;/a&gt; then the implementation will make a best-effort attempt to determine an endpoint. A &lt;a href=&quot;../../../../java.base/java/util/serviceconfigurationerror&quot;&gt;ServiceConfigurationError&lt;/a&gt;, &lt;code&gt;Error&lt;/code&gt; or &lt;code&gt;RuntimeException&lt;/code&gt; thrown when loading or calling an &lt;a href=&quot;../ldap/spi/ldapdnsprovider&quot;&gt;LdapDnsProvider&lt;/a&gt;, if encountered, will be propagated to the calling thread.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6c9b144092edff275e75b32f1dca016975180187" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mapper&lt;/code&gt; function passed to &lt;code&gt;flatMap&lt;/code&gt; splits a line, using a simple regular expression, into an array of words, and then creates a stream of words from that array.</source>
          <target state="translated">&lt;code&gt;mapper&lt;/code&gt; に渡す機能 &lt;code&gt;flatMap&lt;/code&gt; は、単語の配列に、単純な正規表現を使用して、行を分割し、そのアレイからワードのストリームを生成します。</target>
        </trans-unit>
        <trans-unit id="e7777926bab037130e9c4b41941f7d725a543594" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mapping()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, such as downstream of a &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. For example, given a stream of &lt;code&gt;Person&lt;/code&gt;, to accumulate the set of last names in each city:</source>
          <target state="translated">&lt;code&gt;mapping()&lt;/code&gt; このようなの下流として、マルチレベルの低減に使用される場合、コレクターは最も有用である &lt;code&gt;groupingBy&lt;/code&gt; 又は &lt;code&gt;partitioningBy&lt;/code&gt; 。たとえば、 &lt;code&gt;Person&lt;/code&gt; のストリームが与えられ、各都市の姓のセットを累積するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="903b585e02a8cfe6d8af38444d4c285b4ecfdab9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;InflaterInputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;InflaterInputStream&lt;/code&gt; の &lt;code&gt;mark&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="0371bac823202240bd6c72d5e06eb31b731df75c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; の &lt;code&gt;mark&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="7e02e9dcce04c471816e17e93a8e7c8612865389" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;LineNumberInputStream&lt;/code&gt; remembers the current line number in a private variable, and then calls the &lt;code&gt;mark&lt;/code&gt; method of the underlying input stream.</source>
          <target state="translated">&lt;code&gt;LineNumberInputStream&lt;/code&gt; の &lt;code&gt;mark&lt;/code&gt; メソッドは、プライベート変数の現在の行番号を記憶し、基になる入力ストリームの &lt;code&gt;mark&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="9baaba468b2b9ec943dee5d33e382f44cbd16e98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;PushbackInputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;PushbackInputStream&lt;/code&gt; の &lt;code&gt;mark&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="266811666f451efbcca8485179044d44787aa53c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;markSupported()&lt;/code&gt; method returns &lt;code&gt;false&lt;/code&gt;. The &lt;code&gt;mark()&lt;/code&gt; and &lt;code&gt;reset()&lt;/code&gt; methods throw an &lt;code&gt;IOException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;markSupported()&lt;/code&gt; メソッドが返す &lt;code&gt;false&lt;/code&gt; 。 &lt;code&gt;mark()&lt;/code&gt; および &lt;code&gt;reset()&lt;/code&gt; メソッドがスロー &lt;code&gt;IOException&lt;/code&gt; が。</target>
        </trans-unit>
        <trans-unit id="24e3553f60a435975160a122db551ded68bc69d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;markSupported()&lt;/code&gt; method returns &lt;code&gt;false&lt;/code&gt;. The &lt;code&gt;mark()&lt;/code&gt; method does nothing, and the &lt;code&gt;reset()&lt;/code&gt; method throws &lt;code&gt;IOException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;markSupported()&lt;/code&gt; メソッドが返す &lt;code&gt;false&lt;/code&gt; 。 &lt;code&gt;mark()&lt;/code&gt; メソッドは何もしませんし、 &lt;code&gt;reset()&lt;/code&gt; メソッドは、スロー &lt;code&gt;IOException&lt;/code&gt; が。</target>
        </trans-unit>
        <trans-unit id="6554f1607ef695c0c64cabf2785fd9a958b83486" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;marshal&lt;/code&gt; method of &lt;code&gt;KeyInfo&lt;/code&gt; MUST support &lt;code&gt;DOMStructure&lt;/code&gt; and &lt;code&gt;DOMCryptoContext&lt;/code&gt; parameter types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="77e5480e00ffc1e7db2c7cde3ede487453a10255" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxDepth&lt;/code&gt; parameter is the maximum number of levels of directories to visit. A value of &lt;code&gt;0&lt;/code&gt; means that only the starting file is visited, unless denied by the security manager. A value of &lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt;&lt;code&gt;MAX_VALUE&lt;/code&gt;&lt;/a&gt; may be used to indicate that all levels should be visited.</source>
          <target state="translated">&lt;code&gt;maxDepth&lt;/code&gt; パラメータが訪問するディレクトリのレベルの最大数です。値 &lt;code&gt;0&lt;/code&gt; は、セキュリティマネージャーによって拒否されない限り、開始ファイルのみがアクセスされることを意味します。&lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt; &lt;code&gt;MAX_VALUE&lt;/code&gt; &lt;/a&gt;の値は、すべてのレベルにアクセスする必要があることを示すために使用できます。</target>
        </trans-unit>
        <trans-unit id="18e28bc41e209ebe6c61a493b6c9622bd4b0c37d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxDepth&lt;/code&gt; parameter is the maximum number of levels of directories to visit. A value of &lt;code&gt;0&lt;/code&gt; means that only the starting file is visited, unless denied by the security manager. A value of &lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt;&lt;code&gt;MAX_VALUE&lt;/code&gt;&lt;/a&gt; may be used to indicate that all levels should be visited. The &lt;code&gt;visitFile&lt;/code&gt; method is invoked for all files, including directories, encountered at &lt;code&gt;maxDepth&lt;/code&gt;, unless the basic file attributes cannot be read, in which case the &lt;code&gt;
 visitFileFailed&lt;/code&gt; method is invoked.</source>
          <target state="translated">&lt;code&gt;maxDepth&lt;/code&gt; パラメータが訪問するディレクトリのレベルの最大数です。値 &lt;code&gt;0&lt;/code&gt; は、セキュリティマネージャによって拒否されない限り、開始ファイルのみがアクセスされることを意味します。&lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt; &lt;code&gt;MAX_VALUE&lt;/code&gt; &lt;/a&gt;の値を使用して、すべてのレベルにアクセスする必要があることを示すことができます。 &lt;code&gt;visitFile&lt;/code&gt; の方法はで遭遇したディレクトリを含む、すべてのファイル、ために呼び出され &lt;code&gt;maxDepth&lt;/code&gt; 、その場合には、基本的なファイル属性を読み取ることができない場合を除き、 &lt;code&gt; visitFileFailed&lt;/code&gt; のメソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="259fe46dcadeee76b1ff944baef9fa3edc7fae57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxDepth&lt;/code&gt; parameter is the maximum number of levels of directories to visit. A value of &lt;code&gt;0&lt;/code&gt; means that only the starting file is visited, unless denied by the security manager. A value of &lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt;&lt;code&gt;MAX_VALUE&lt;/code&gt;&lt;/a&gt; may be used to indicate that all levels should be visited. The &lt;code&gt;visitFile&lt;/code&gt; method is invoked for all files, including directories, encountered at &lt;code&gt;maxDepth&lt;/code&gt;, unless the basic file attributes cannot be read, in which case the &lt;code&gt;visitFileFailed&lt;/code&gt; method is invoked.</source>
          <target state="translated">&lt;code&gt;maxDepth&lt;/code&gt; パラメータが訪問するディレクトリのレベルの最大数です。値 &lt;code&gt;0&lt;/code&gt; は、セキュリティマネージャーによって拒否されない限り、開始ファイルのみがアクセスされることを意味します。&lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt; &lt;code&gt;MAX_VALUE&lt;/code&gt; &lt;/a&gt;の値は、すべてのレベルにアクセスする必要があることを示すために使用できます。 &lt;code&gt;visitFile&lt;/code&gt; の方法はで遭遇したディレクトリを含む、すべてのファイル、ために呼び出され &lt;code&gt;maxDepth&lt;/code&gt; 、その場合には、基本的なファイル属性を読み取ることができない場合を除き、 &lt;code&gt;visitFileFailed&lt;/code&gt; のメソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e7185a792bfbe5991a400ad88da03cbdb0d16fb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxOutStreams&lt;/code&gt; and &lt;code&gt;maxInStreams&lt;/code&gt; parameters represent the maximum number of streams that the application wishes to be able to send to and receive from. They are negotiated with the remote peer and may be limited by the operating system.</source>
          <target state="new"/>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
