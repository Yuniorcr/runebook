<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="openjdk">
    <body>
      <group id="openjdk">
        <trans-unit id="95f12ecc4c931b6cd52c7c8712c089eb1f901958" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vector&lt;/code&gt; class implements a growable array of objects.</source>
          <target state="translated">&lt;code&gt;Vector&lt;/code&gt; クラスは、オブジェクトの可変長配列を実装します。</target>
        </trans-unit>
        <trans-unit id="4aeeb9de325145d9de793fc5e171c818d3209bca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vector&lt;/code&gt; class implements a growable array of objects. Like an array, it contains components that can be accessed using an integer index. However, the size of a &lt;code&gt;Vector&lt;/code&gt; can grow or shrink as needed to accommodate adding and removing items after the &lt;code&gt;Vector&lt;/code&gt; has been created.</source>
          <target state="translated">&lt;code&gt;Vector&lt;/code&gt; クラスは、オブジェクトの可変長配列を実装します。配列のように、整数のインデックスを使用してアクセスできるコンポーネントが含まれています。しかし、の大きさ &lt;code&gt;Vector&lt;/code&gt; 後のアイテムの追加と削除に対応するために、必要に応じて拡大または縮小することができます &lt;code&gt;Vector&lt;/code&gt; 作成されています。</target>
        </trans-unit>
        <trans-unit id="4a2a2d34e6edf9a736c688c4e496fc8f413e787d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vector&lt;/code&gt; of &lt;code&gt;Vectors&lt;/code&gt; of &lt;code&gt;Object&lt;/code&gt; values.</source>
          <target state="translated">&lt;code&gt;Vector&lt;/code&gt; の &lt;code&gt;Vectors&lt;/code&gt; の &lt;code&gt;Object&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="c51ed8f23325be7432bcd95a2fad8327dd3a6c7d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Vector&lt;/code&gt; of column identifiers.</source>
          <target state="translated">列識別子の &lt;code&gt;Vector&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef38f50778470be314c350ac1236d4ae66252c2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;VetoableChangeSupport&lt;/code&gt; associated with this &lt;code&gt;BeanContextChildSupport&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;VetoableChangeSupport&lt;/code&gt; これに関連した &lt;code&gt;BeanContextChildSupport&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="20a05157c7add57e69ed4b84eda43d3b9471dac5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Void&lt;/code&gt; class is an uninstantiable placeholder class to hold a reference to the &lt;code&gt;Class&lt;/code&gt; object representing the Java keyword void.</source>
          <target state="translated">&lt;code&gt;Void&lt;/code&gt; クラスへの参照を保持するuninstantiableプレースホルダー・クラスである &lt;code&gt;Class&lt;/code&gt; のJavaキーワードボイドを表すオブジェクト。</target>
        </trans-unit>
        <trans-unit id="b7201fbe9821d111b8e7310e2e9e5f50d2f9f0fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;WebRowSetImpl&lt;/code&gt; provides the standard reference implementation, which may be extended if required.</source>
          <target state="translated">&lt;code&gt;WebRowSetImpl&lt;/code&gt; は、必要に応じて延長することができる標準のリファレンス実装を提供します。</target>
        </trans-unit>
        <trans-unit id="9727e0ed3037aaa46ce224bd1fe010383f3480c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Window&lt;/code&gt; and its subcomponents can be made displayable again by rebuilding the native resources with a subsequent call to &lt;code&gt;pack&lt;/code&gt; or &lt;code&gt;show&lt;/code&gt;. The states of the recreated &lt;code&gt;Window&lt;/code&gt; and its subcomponents will be identical to the states of these objects at the point where the &lt;code&gt;Window&lt;/code&gt; was disposed (not accounting for additional modifications between those actions).</source>
          <target state="translated">&lt;code&gt;Window&lt;/code&gt; とそのサブコンポーネントは、後続の呼び出しでネイティブリソースを再構築することによって再び表示可能にすることができます &lt;code&gt;pack&lt;/code&gt; や &lt;code&gt;show&lt;/code&gt; 。再作成された &lt;code&gt;Window&lt;/code&gt; とそのサブコンポーネントの状態は、 &lt;code&gt;Window&lt;/code&gt; が破棄された時点でのこれらのオブジェクトの状態と同じになります（これらのアクション間の追加の変更は考慮されません）。</target>
        </trans-unit>
        <trans-unit id="9e95df5176a50ee550434605ecd3ba4571d76304" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Window&lt;/code&gt; class and the &lt;code&gt;Applet&lt;/code&gt; class are the validate roots in AWT. Swing introduces more validate roots.</source>
          <target state="translated">&lt;code&gt;Window&lt;/code&gt; クラスと &lt;code&gt;Applet&lt;/code&gt; クラスは、AWTでの検証の根です。Swingは、より多くの検証ルートを導入します。</target>
        </trans-unit>
        <trans-unit id="dcf547c8c4952ee62719999861c70718ea329248" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Window&lt;/code&gt; meets the requirements outlined in the &lt;a href=&quot;#isFocusableWindow()&quot;&gt;&lt;code&gt;isFocusableWindow()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;Window&lt;/code&gt; に概説要件を満たし&lt;a href=&quot;#isFocusableWindow()&quot;&gt; &lt;code&gt;isFocusableWindow()&lt;/code&gt; &lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="704045f5a2599d8a137d2e74c9f85efdab2b97d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Window&lt;/code&gt;'s &lt;code&gt;autoRequestFocus&lt;/code&gt; property is of the &lt;code&gt;true&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;Window&lt;/code&gt; の &lt;code&gt;autoRequestFocus&lt;/code&gt; のプロパティがである &lt;code&gt;true&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="26d20b795a509ccf345f4880f86bffc5ff46ea07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Writer&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Writer&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="77fb3bff5f49c42c2161c3e19062b5010a06389f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Writer&lt;/code&gt; methods to write text throw &lt;code&gt;IOException&lt;/code&gt; if the text cannot be encoded using the specified charset.</source>
          <target state="translated">&lt;code&gt;Writer&lt;/code&gt; 書き込みテキストへのメソッドスロー &lt;code&gt;IOException&lt;/code&gt; がテキストが指定された文字セットを使用してエンコードすることができない場合。</target>
        </trans-unit>
        <trans-unit id="5df6357d2d9dd77291511c1a5a3bbe7008f4a76d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Writer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Writer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d0b59a3f7afdfb200daf7c7684da04108a0ed23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XAConnection&lt;/code&gt; interface is derived from the &lt;code&gt;PooledConnection&lt;/code&gt; interface, so what applies to a pooled connection also applies to a connection that is part of a distributed transaction. A transaction manager in the middle tier handles everything transparently. The only change in application code is that an application cannot do anything that would interfere with the transaction manager's handling of the transaction. Specifically, an application cannot call the methods &lt;code&gt;Connection.commit&lt;/code&gt; or &lt;code&gt;Connection.rollback&lt;/code&gt;, and it cannot set the connection to be in auto-commit mode (that is, it cannot call &lt;code&gt;Connection.setAutoCommit(true)&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;XAConnection&lt;/code&gt; インターフェースが由来する &lt;code&gt;PooledConnection&lt;/code&gt; プールされた接続に適用されるものも分散トランザクションの一部である接続に適用されるように、インターフェース。中間層のトランザクションマネージャーは、すべてを透過的に処理します。アプリケーションコードの唯一の変更点は、アプリケーションがトランザクションマネージャのトランザクションの処理を妨げるようなことは何もできないことです。具体的には、アプリケーションはメソッド &lt;code&gt;Connection.commit&lt;/code&gt; または &lt;code&gt;Connection.rollback&lt;/code&gt; を呼び出すことができず、接続を自動コミットモードに設定することもできません（つまり、 &lt;code&gt;Connection.setAutoCommit(true)&lt;/code&gt; を呼び出すことはできません）。</target>
        </trans-unit>
        <trans-unit id="2fdc5e90dac380c583a94ac10964401cbc1bff2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLDecoder&lt;/code&gt; class is used to read XML documents created using the &lt;code&gt;XMLEncoder&lt;/code&gt; and is used just like the &lt;code&gt;ObjectInputStream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;XMLDecoder&lt;/code&gt; ののクラスを使用して作成したXML文書を読み取るために使用され &lt;code&gt;XMLEncoder&lt;/code&gt; をし、同じように使用され &lt;code&gt;ObjectInputStream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4c73680d790e9f555b97eb4fbffb24cd26c3ccca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLDecoder&lt;/code&gt; class is used to read XML documents created using the &lt;code&gt;XMLEncoder&lt;/code&gt; and is used just like the &lt;code&gt;ObjectInputStream&lt;/code&gt;. For example, one can use the following fragment to read the first object defined in an XML document written by the &lt;code&gt;XMLEncoder&lt;/code&gt; class:</source>
          <target state="translated">&lt;code&gt;XMLDecoder&lt;/code&gt; ののクラスを使用して作成したXML文書を読み取るために使用され &lt;code&gt;XMLEncoder&lt;/code&gt; をし、同じように使用され &lt;code&gt;ObjectInputStream&lt;/code&gt; 。たとえば、次のフラグメントを使用して、 &lt;code&gt;XMLEncoder&lt;/code&gt; クラスによって記述されたXMLドキュメントで定義された最初のオブジェクトを読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="b40fba744abf8f8cdfdbf7823211e024611a2005" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLEncoder&lt;/code&gt; class is a complementary alternative to the &lt;code&gt;ObjectOutputStream&lt;/code&gt; and can used to generate a textual representation of a &lt;em&gt;JavaBean&lt;/em&gt; in the same way that the &lt;code&gt;ObjectOutputStream&lt;/code&gt; can be used to create binary representation of &lt;code&gt;Serializable&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;XMLEncoder&lt;/code&gt; クラスは、に相補的代替物である &lt;code&gt;ObjectOutputStream&lt;/code&gt; のテキスト表現を生成するために使用することができる&lt;em&gt;JavaBeanの&lt;/em&gt;と同じ方法で &lt;code&gt;ObjectOutputStream&lt;/code&gt; のがのバイナリ表現を作成するために使用できる &lt;code&gt;Serializable&lt;/code&gt; オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="bc93ab4e94e8fd32e113d65a55be49ef42b7d783" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLEncoder&lt;/code&gt; class is a complementary alternative to the &lt;code&gt;ObjectOutputStream&lt;/code&gt; and can used to generate a textual representation of a &lt;em&gt;JavaBean&lt;/em&gt; in the same way that the &lt;code&gt;ObjectOutputStream&lt;/code&gt; can be used to create binary representation of &lt;code&gt;Serializable&lt;/code&gt; objects. For example, the following fragment can be used to create a textual representation the supplied &lt;em&gt;JavaBean&lt;/em&gt; and all its properties:</source>
          <target state="translated">&lt;code&gt;XMLEncoder&lt;/code&gt; クラスは、に相補的代替物である &lt;code&gt;ObjectOutputStream&lt;/code&gt; のテキスト表現を生成するために使用することができる&lt;em&gt;JavaBeanの&lt;/em&gt;と同じ方法で &lt;code&gt;ObjectOutputStream&lt;/code&gt; のがのバイナリ表現を作成するために使用できる &lt;code&gt;Serializable&lt;/code&gt; オブジェクトを。たとえば、次のフラグメントを使用して、提供された&lt;em&gt;JavaBean&lt;/em&gt;とそのすべてのプロパティのテキスト表現を作成できます。</target>
        </trans-unit>
        <trans-unit id="baee72131905882a77a0b4ca9b76ace184c77c99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLEncoder&lt;/code&gt; class provides a default denotation for &lt;em&gt;JavaBean&lt;/em&gt;s in which they are represented as XML documents complying with version 1.0 of the XML specification and the UTF-8 character encoding of the Unicode/ISO 10646 character set. The XML documents produced by the &lt;code&gt;XMLEncoder&lt;/code&gt; class are:</source>
          <target state="translated">&lt;code&gt;XMLEncoder&lt;/code&gt; クラスは、デフォルトの表記を提供&lt;em&gt;するJavaBean&lt;/em&gt;の彼らはXML仕様とUnicode / ISO 10646文字セットのUTF-8文字エンコーディングのバージョン1.0に準拠するXML文書として表現されているが。 &lt;code&gt;XMLEncoder&lt;/code&gt; クラスによって生成されるXMLドキュメントは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="773745b0980b73ae3cf7133fbf0740a9e51a6976" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XMLStreamReader&lt;/code&gt; or &lt;code&gt;XMLEventReader&lt;/code&gt; used to construct this &lt;code&gt;StAXSource&lt;/code&gt; is queried to determine the system identifier of the XML source.</source>
          <target state="translated">&lt;code&gt;XMLStreamReader&lt;/code&gt; 内または &lt;code&gt;XMLEventReader&lt;/code&gt; のこの構築するために使用される &lt;code&gt;StAXSource&lt;/code&gt; がはXMLソースのシステム識別子を決定するために照会されます。</target>
        </trans-unit>
        <trans-unit id="5e8ba5718ccb5dddefc8fcb9ef5b222f271f2b83" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathEvaluationResult&lt;/code&gt; interface represents the result of the evaluation of an XPath expression within the context of a particular node.</source>
          <target state="translated">&lt;code&gt;XPathEvaluationResult&lt;/code&gt; のインターフェースは、特定のノードのコンテキスト内のXPath式の評価の結果を表します。</target>
        </trans-unit>
        <trans-unit id="7979524a823b2b3c2152adeae36a863101800820" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathEvaluationResult&lt;/code&gt; interface represents the result of the evaluation of an XPath expression within the context of a particular node. The evaluation of an XPath expression can result in various result types as defined in XML Path Language (XPath) Version 1.0.</source>
          <target state="translated">&lt;code&gt;XPathEvaluationResult&lt;/code&gt; のインターフェースは、特定のノードのコンテキスト内のXPath式の評価の結果を表します。XPath式の評価により、XMLパス言語（XPath）バージョン1.0で定義されているさまざまな結果タイプが生成される可能性があります。</target>
        </trans-unit>
        <trans-unit id="864adcf3b012bbba70056106a86d52bf42863eff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathFactory&lt;/code&gt; builtin system-default implementation is only required to support the &lt;a href=&quot;#DEFAULT_OBJECT_MODEL_URI&quot;&gt;&lt;code&gt;default object model&lt;/code&gt;&lt;/a&gt;, the &lt;a href=&quot;../../../org/w3c/dom/package-summary&quot;&gt;W3C DOM&lt;/a&gt;, but may support additional object models.</source>
          <target state="translated">&lt;code&gt;XPathFactory&lt;/code&gt; 組み込みシステム・デフォルトの実装では、唯一のサポートに必要な&lt;a href=&quot;#DEFAULT_OBJECT_MODEL_URI&quot;&gt; &lt;code&gt;default object model&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../../org/w3c/dom/package-summary&quot;&gt;W3C DOMの&lt;/a&gt;が、追加のオブジェクトモデルをサポートすることができます。</target>
        </trans-unit>
        <trans-unit id="1579758fa332f4ff09bb6a3a0a884344e634c7db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XPathVariableResolver&lt;/code&gt; and the XPath evaluator must adhere to a contract that cannot be directly enforced by the API. Although variables may be mutable, that is, an application may wish to evaluate the same XPath expression more than once with different variable values, in the course of evaluating any single XPath expression, a variable's value &lt;strong&gt;&lt;em&gt;must&lt;/em&gt;&lt;/strong&gt; not change.</source>
          <target state="translated">&lt;code&gt;XPathVariableResolver&lt;/code&gt; およびXPath評価者は、直接APIによって強制することはできない契約に準拠する必要があります。変数は変更可能である場合があります。つまり、アプリケーションは、異なる変数値を使用して同じXPath式を複数回評価する場合が&lt;strong&gt;&lt;em&gt;あり&lt;/em&gt;&lt;/strong&gt;ますが、単一のXPath式を評価する過程で、変数の値を変更して&lt;strong&gt;&lt;em&gt;はなりませ&lt;/em&gt;&lt;/strong&gt;ん。</target>
        </trans-unit>
        <trans-unit id="dc6626b4ce56edf5eec0e4e7f1f6d83d431a9d81" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[ ]&lt;/code&gt; characters are a</source>
          <target state="translated">&lt;code&gt;[ ]&lt;/code&gt; の文字があります</target>
        </trans-unit>
        <trans-unit id="a2448ee443a37bfe2270b1cc58275c79e860c644" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;aCommand&lt;/code&gt; will be set in the delivered event if specified.</source>
          <target state="translated">&lt;code&gt;aCommand&lt;/code&gt; はは、指定された場合に配信イベントに設定されます。</target>
        </trans-unit>
        <trans-unit id="7c55d0ff61eb4e937c515821a0807c8069fecf30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;aCondition&lt;/code&gt; can be one of:</source>
          <target state="translated">&lt;code&gt;aCondition&lt;/code&gt; は、のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="cbec44aca0eff7c0fd9d646cfb96819a5b4c572f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;accumulator&lt;/code&gt; function must be an &lt;a href=&quot;package-summary#Associativity&quot;&gt;associative&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;accumulator&lt;/code&gt; 機能がなければなりません&lt;a href=&quot;package-summary#Associativity&quot;&gt;連想&lt;/a&gt;機能。</target>
        </trans-unit>
        <trans-unit id="4185fd67e39e58987d681ed4e049cb9068cef055" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;action&lt;/code&gt; argument is of the same format as the &lt;code&gt;eventPropertyName&lt;/code&gt; argument where the last property name identifies either a method name or writable property.</source>
          <target state="translated">&lt;code&gt;action&lt;/code&gt; 引数と同じフォーマットである &lt;code&gt;eventPropertyName&lt;/code&gt; の最後のプロパティ名を識別するメソッド名または書き込み可能なプロパティのいずれかの引数。</target>
        </trans-unit>
        <trans-unit id="31404f4484a67d5901851525c58dad6c4c563d5b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;agentmain&lt;/code&gt; method has one of two possible signatures. The JVM first attempts to invoke the following method on the agent class:</source>
          <target state="translated">&lt;code&gt;agentmain&lt;/code&gt; の方法は、2つの可能なシグネチャのうちの1つを有します。JVMは最初に、エージェントクラスで次のメソッドを呼び出そうとします。</target>
        </trans-unit>
        <trans-unit id="cc78d234a40aa6ddd38f2300973ad58dbc9f2403" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;agentmain&lt;/code&gt; method should do any necessary initialization required to start the agent and return. If the agent cannot be started, for example the agent class cannot be loaded, the agent class does not define a conformant &lt;code&gt;agentmain&lt;/code&gt; method, or the &lt;code&gt;agentmain&lt;/code&gt; method throws an uncaught exception or error, the JVM will abort.</source>
          <target state="translated">&lt;code&gt;agentmain&lt;/code&gt; の方法は、エージェントとリターンを開始するために必要なすべての必要な初期化を行う必要があります。エージェントを起動できない場合、たとえば、エージェントクラスをロードできない場合、エージェントクラスが準拠する &lt;code&gt;agentmain&lt;/code&gt; メソッドを定義していない場合、または &lt;code&gt;agentmain&lt;/code&gt; メソッドがキャッチされない例外またはエラーをスローした場合、JVMは異常終了します。</target>
        </trans-unit>
        <trans-unit id="e39ec8f12fac3e1235b57830cba8b781dedf715e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;agentmain&lt;/code&gt; method should do any necessary initialization required to start the agent. When startup is complete the method should return. If the agent cannot be started (for example, because the agent class cannot be loaded, or because the agent class does not have a conformant &lt;code&gt;agentmain&lt;/code&gt; method), the JVM will not abort. If the &lt;code&gt;agentmain&lt;/code&gt; method throws an uncaught exception it will be ignored (but may be logged by the JVM for troubleshooting purposes).</source>
          <target state="translated">&lt;code&gt;agentmain&lt;/code&gt; の方法は、エージェントを起動するために必要なすべての必要な初期化を行う必要があります。起動が完了すると、メソッドは戻るはずです。エージェントを開始できない場合（たとえば、エージェントクラスをロードできない場合、またはエージェントクラスに準拠した &lt;code&gt;agentmain&lt;/code&gt; メソッドがない場合）、JVMは中止されません。 &lt;code&gt;agentmain&lt;/code&gt; メソッドがキャッチされない例外をスローした場合、それは無視されます（ただし、トラブルシューティングの目的でJVMによってログに記録される場合があります）。</target>
        </trans-unit>
        <trans-unit id="4200792e507990527888853e33e39555b27217a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attribute&lt;/code&gt; parameter identifies the attribute to be read and takes the form:</source>
          <target state="translated">&lt;code&gt;attribute&lt;/code&gt; パラメータは、属性が読み取られるように識別し、形式をとります。</target>
        </trans-unit>
        <trans-unit id="e13622be0932a01b09ea0231195ad9dee2d891a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attribute&lt;/code&gt; parameter identifies the attribute to be set and takes the form:</source>
          <target state="translated">&lt;code&gt;attribute&lt;/code&gt; パラメータを識別属性が設定され、フォームをとることにします。</target>
        </trans-unit>
        <trans-unit id="9300dec972e233c14dfee6f24a1437eb62d16c5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attributes&lt;/code&gt; parameter identifies the attributes to be read and takes the form:</source>
          <target state="translated">&lt;code&gt;attributes&lt;/code&gt; 属性が読み込まれるパラメータが識別されているとの形式をとります。</target>
        </trans-unit>
        <trans-unit id="e891f2a34d3ff9a18061c78c854c7a39d310fd9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attributes&lt;/code&gt;&lt;code&gt;NamedNodeMaps&lt;/code&gt; are equal. This is: they are both &lt;code&gt;null&lt;/code&gt;, or they have the same length and for each node that exists in one map there is a node that exists in the other map and is equal, although not necessarily at the same index.</source>
          <target state="translated">&lt;code&gt;NamedNodeMaps&lt;/code&gt; の &lt;code&gt;attributes&lt;/code&gt; は同じです。つまり、両方とも &lt;code&gt;null&lt;/code&gt; であるか、同じ長さであり、一方のマップに存在するノードごとに、もう一方のマップに存在し、等しいノードがありますが、必ずしも同じインデックスにあるとは限りません。</target>
        </trans-unit>
        <trans-unit id="71ec10680a515404dcea83dc93b34a00ae544957" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is an optional array of file &lt;a href=&quot;../file/attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; ファイルのオプション配列であるパラメータ&lt;a href=&quot;../file/attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;ファイルを作成する際にアトミックに設定します。</target>
        </trans-unit>
        <trans-unit id="aa73d718a6e84fdffc4666766b8c6f4155f86290" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the link. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; パラメータはオプションで&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;attributes&lt;/code&gt; &lt;/a&gt;のリンクを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name()&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="f5d11588e62ee6ecee510a144a13ae053b7ded0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the link. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; パラメータはオプションで&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;attributes&lt;/code&gt; &lt;/a&gt;のリンクを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="6a9611129a94268b694e7f0a6870f3b072a950a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when a new file is created.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;新しいファイルが作成されたときにアトミックに設定します。</target>
        </trans-unit>
        <trans-unit id="9a59843ac8ffdbb8b27a7af904c73b09addfd665" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the directory. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;、ディレクトリを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name()&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="1530cb7be2e1a90d2e32e41b80f5181fbd3c409a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the directory. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;、ディレクトリを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="a2eafb0f18e2c0f90cfaa47597137720724d74ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;のファイルを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name()&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="09484803eed7eb220bb9cee3c89264c72f6e5064" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored. When no file attributes are specified, then the resulting file may have more restrictive access permissions to files created by the &lt;a href=&quot;../../io/file#createTempFile(java.lang.String,java.lang.String,java.io.File)&quot;&gt;&lt;code&gt;File.createTempFile(String,String,File)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;のファイルを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name()&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。ファイル属性が指定されていない場合、結果のファイルには、&lt;a href=&quot;../../io/file#createTempFile(java.lang.String,java.lang.String,java.io.File)&quot;&gt; &lt;code&gt;File.createTempFile(String,String,File)&lt;/code&gt; &lt;/a&gt;メソッドによって作成されたファイルへのより制限的なアクセス許可が含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="ad9b07c9e2205e3502079d33de386fcf7c13ff4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;のファイルを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="3d4f30d19e092c8b774921588c985e988e8af3fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the file. Each attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored. When no file attributes are specified, then the resulting file may have more restrictive access permissions to files created by the &lt;a href=&quot;../../io/file#createTempFile-java.lang.String-java.lang.String-java.io.File-&quot;&gt;&lt;code&gt;File.createTempFile(String,String,File)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;のファイルを作成するときにアトミックに設定します。各属性はその&lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。ファイル属性が指定されていない場合、結果のファイルには、&lt;a href=&quot;../../io/file#createTempFile-java.lang.String-java.lang.String-java.io.File-&quot;&gt; &lt;code&gt;File.createTempFile(String,String,File)&lt;/code&gt; &lt;/a&gt;メソッドによって作成されたファイルへのより限定的なアクセス許可が与えられる可能性があります。</target>
        </trans-unit>
        <trans-unit id="b269fdea6c6d809695550b9428ade177ba1ea0ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the nonexistent directories. Each file attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name()&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;存在しないディレクトリを作成する際にアトミックに設定します。各ファイル属性は、その&lt;a href=&quot;attribute/fileattribute#name()&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="eac58af08c25e30b8096bbec06d65d5969d2351b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;attrs&lt;/code&gt; parameter is optional &lt;a href=&quot;attribute/fileattribute&quot;&gt;&lt;code&gt;file-attributes&lt;/code&gt;&lt;/a&gt; to set atomically when creating the nonexistent directories. Each file attribute is identified by its &lt;a href=&quot;attribute/fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.</source>
          <target state="translated">&lt;code&gt;attrs&lt;/code&gt; オプションであるパラメータ&lt;a href=&quot;attribute/fileattribute&quot;&gt; &lt;code&gt;file-attributes&lt;/code&gt; &lt;/a&gt;存在しないディレクトリを作成する際にアトミックに設定します。各ファイル属性はその&lt;a href=&quot;attribute/fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;識別されます。同じ名前の複数の属性が配列に含まれている場合、最後の出現を除くすべてが無視されます。</target>
        </trans-unit>
        <trans-unit id="9310f8ddf2f2e1abe2704763c0d8698944c86a52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;available&lt;/code&gt; method for class &lt;code&gt;InputStream&lt;/code&gt; always returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">クラス &lt;code&gt;InputStream&lt;/code&gt; の &lt;code&gt;available&lt;/code&gt; メソッドは常に &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="07e935be2d00da600d82b1459bdd0645c167a8af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;available&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; always returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; の &lt;code&gt;available&lt;/code&gt; メソッドは常に &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2a223f99a73adb8d4155acdcdbe953d90137df1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;available&lt;/code&gt; method of the underlying stream returns zero, indicating that further input requests would block.</source>
          <target state="translated">基になるストリームの &lt;code&gt;available&lt;/code&gt; メソッドはゼロを返し、それ以上の入力要求がブロックされることを示します。</target>
        </trans-unit>
        <trans-unit id="c19d6f589a03480c7507cbcf9ea41e93f9410bd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backlog&lt;/code&gt; argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than &lt;code&gt;0&lt;/code&gt;. If it is less than or equal to &lt;code&gt;0&lt;/code&gt;, then an implementation specific default will be used.</source>
          <target state="translated">&lt;code&gt;backlog&lt;/code&gt; 引数は、ソケット上の保留中の接続の要求の最大数です。その正確なセマンティクスは実装固有です。特に、実装では最大長を課したり、パラメータをすべて無視したりする場合があります。指定する値は &lt;code&gt;0&lt;/code&gt; より大きい必要があります。 &lt;code&gt;0&lt;/code&gt; 以下の場合、実装固有のデフォルトが使用されます。</target>
        </trans-unit>
        <trans-unit id="29ad9363012d93283f3d04ff689ea4b529ac1006" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backlog&lt;/code&gt; argument must be a positive value greater than 0. If the value passed if equal or less than 0, then the default value will be assumed.</source>
          <target state="translated">&lt;code&gt;backlog&lt;/code&gt; 値以下で0を、デフォルト値が仮定される場合に渡した場合引数が0より正の値も大きくなければなりません。</target>
        </trans-unit>
        <trans-unit id="b04fd34021527ffa6eec03ad117996148e622e5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;backlog&lt;/code&gt; parameter is the maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. If the &lt;code&gt;backlog&lt;/code&gt; parameter has the value &lt;code&gt;0&lt;/code&gt;, or a negative value, then an implementation specific default is used.</source>
          <target state="translated">&lt;code&gt;backlog&lt;/code&gt; パラメータは、ソケット上の保留中の接続の最大数です。その正確なセマンティクスは実装固有です。特に、実装では最大長を課したり、パラメータをすべて無視したりする場合があります。場合 &lt;code&gt;backlog&lt;/code&gt; パラメータが値を有する &lt;code&gt;0&lt;/code&gt; 、または負の値を、次に、実装固有のデフォルトが使用されます。</target>
        </trans-unit>
        <trans-unit id="9758dfb7f206fee802af2ff421e244af4ed6b224" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beginIndex&lt;/code&gt; and &lt;code&gt;endIndex&lt;/code&gt; parameters specify the subsequence of name elements. The name that is &lt;em&gt;closest&lt;/em&gt; to the root in the directory hierarchy has index &lt;code&gt;0&lt;/code&gt;. The name that is &lt;em&gt;farthest&lt;/em&gt; from the root has index &lt;a href=&quot;#getNameCount()&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;-1&lt;/code&gt;. The returned &lt;code&gt;Path&lt;/code&gt; object has the name elements that begin at &lt;code&gt;beginIndex&lt;/code&gt; and extend to the element at index &lt;code&gt;
 endIndex-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beginIndex&lt;/code&gt; パラメータと &lt;code&gt;endIndex&lt;/code&gt; のパラメータは、name要素のサブシーケンスを指定します。ディレクトリ階層のルートに&lt;em&gt;最も近い&lt;/em&gt;名前のインデックスは &lt;code&gt;0&lt;/code&gt; です。ルートから&lt;em&gt;最も遠い&lt;/em&gt;名前のインデックス&lt;a href=&quot;#getNameCount()&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; &lt;code&gt;-1&lt;/code&gt; です。返される &lt;code&gt;Path&lt;/code&gt; オブジェクトには、 &lt;code&gt;beginIndex&lt;/code&gt; で始まり、インデックス &lt;code&gt; endIndex-1&lt;/code&gt; の要素まで拡張されるname要素があります。</target>
        </trans-unit>
        <trans-unit id="038e82ed2e83821157222aec4b1425ddc2acdb2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;beginIndex&lt;/code&gt; and &lt;code&gt;endIndex&lt;/code&gt; parameters specify the subsequence of name elements. The name that is &lt;em&gt;closest&lt;/em&gt; to the root in the directory hierarchy has index &lt;code&gt;0&lt;/code&gt;. The name that is &lt;em&gt;farthest&lt;/em&gt; from the root has index &lt;a href=&quot;path#getNameCount--&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;-1&lt;/code&gt;. The returned &lt;code&gt;Path&lt;/code&gt; object has the name elements that begin at &lt;code&gt;beginIndex&lt;/code&gt; and extend to the element at index &lt;code&gt;endIndex-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beginIndex&lt;/code&gt; パラメータと &lt;code&gt;endIndex&lt;/code&gt; のパラメータは、name要素のサブシーケンスを指定します。ディレクトリ階層のルートに&lt;em&gt;最も近い&lt;/em&gt;名前のインデックスは &lt;code&gt;0&lt;/code&gt; です。ルートから&lt;em&gt;最も遠い&lt;/em&gt;名前のインデックス&lt;a href=&quot;path#getNameCount--&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; &lt;code&gt;-1&lt;/code&gt; です。返される &lt;code&gt;Path&lt;/code&gt; オブジェクトには、 &lt;code&gt;beginIndex&lt;/code&gt; で始まり、インデックス &lt;code&gt;endIndex-1&lt;/code&gt; の要素まで続く名前要素があります。</target>
        </trans-unit>
        <trans-unit id="23cf20e6e7ba36d73ecb53fccee07162da8d920d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;body&lt;/code&gt; handle must not be &lt;code&gt;null&lt;/code&gt;; its type must be of the form &lt;code&gt;(V A...)V&lt;/code&gt;, where &lt;code&gt;V&lt;/code&gt; is non-&lt;code&gt;void&lt;/code&gt;, or else &lt;code&gt;(A...)void&lt;/code&gt;. (In the &lt;code&gt;void&lt;/code&gt; case, we assign the type &lt;code&gt;void&lt;/code&gt; to the name &lt;code&gt;V&lt;/code&gt;, and we will write &lt;code&gt;(V A...)V&lt;/code&gt; with the understanding that a &lt;code&gt;void&lt;/code&gt; type &lt;code&gt;V&lt;/code&gt; is quietly dropped from the parameter list, leaving &lt;code&gt;(A...)V&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;body&lt;/code&gt; ハンドルがあってはならない &lt;code&gt;null&lt;/code&gt; 。そのタイプは、 &lt;code&gt;(V A...)V&lt;/code&gt; の形式である必要があります。ここで、 &lt;code&gt;V&lt;/code&gt; は非 &lt;code&gt;void&lt;/code&gt; 、または &lt;code&gt;(A...)void&lt;/code&gt; です。 （では &lt;code&gt;void&lt;/code&gt; の場合は、我々はタイプ割り当てる &lt;code&gt;void&lt;/code&gt; 名前に &lt;code&gt;V&lt;/code&gt; 、そして我々は書きます &lt;code&gt;(V A...)V&lt;/code&gt; という理解で &lt;code&gt;void&lt;/code&gt; 型 &lt;code&gt;V&lt;/code&gt; は静かに残して、パラメータリストから削除される &lt;code&gt;(A...)V&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="87c334e233d7c15dbce8f02769f49f0543984685" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;body&lt;/code&gt; handle must not be &lt;code&gt;null&lt;/code&gt;; its type must be of the form &lt;code&gt;(V I A...)V&lt;/code&gt;, where &lt;code&gt;V&lt;/code&gt; is non-&lt;code&gt;void&lt;/code&gt;, or else &lt;code&gt;(I A...)void&lt;/code&gt;. (In the &lt;code&gt;void&lt;/code&gt; case, we assign the type &lt;code&gt;void&lt;/code&gt; to the name &lt;code&gt;V&lt;/code&gt;, and we will write &lt;code&gt;(V I A...)V&lt;/code&gt; with the understanding that a &lt;code&gt;void&lt;/code&gt; type &lt;code&gt;V&lt;/code&gt; is quietly dropped from the parameter list, leaving &lt;code&gt;(I A...)V&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;body&lt;/code&gt; ハンドルがあってはならない &lt;code&gt;null&lt;/code&gt; 。そのタイプは、 &lt;code&gt;(V I A...)V&lt;/code&gt; の形式である必要があります。ここで、 &lt;code&gt;V&lt;/code&gt; は非 &lt;code&gt;void&lt;/code&gt; 、または &lt;code&gt;(I A...)void&lt;/code&gt; です。 （では &lt;code&gt;void&lt;/code&gt; の場合は、我々はタイプ割り当てる &lt;code&gt;void&lt;/code&gt; 名前に &lt;code&gt;V&lt;/code&gt; 、そして我々は書きます &lt;code&gt;(V I A...)V&lt;/code&gt; することを理解した上で &lt;code&gt;void&lt;/code&gt; 型 &lt;code&gt;V&lt;/code&gt; は静かに残して、パラメータリストから削除される &lt;code&gt;(I A...)V&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="1e3ecb1f1c113d7459558edaafd1c22e159c798c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;body&lt;/code&gt; handle must not be &lt;code&gt;null&lt;/code&gt;; its type must be of the form &lt;code&gt;(V T A...)V&lt;/code&gt;, where &lt;code&gt;V&lt;/code&gt; is non-&lt;code&gt;void&lt;/code&gt;, or else &lt;code&gt;(T A...)void&lt;/code&gt;. (In the &lt;code&gt;void&lt;/code&gt; case, we assign the type &lt;code&gt;void&lt;/code&gt; to the name &lt;code&gt;V&lt;/code&gt;, and we will write &lt;code&gt;(V T A...)V&lt;/code&gt; with the understanding that a &lt;code&gt;void&lt;/code&gt; type &lt;code&gt;V&lt;/code&gt; is quietly dropped from the parameter list, leaving &lt;code&gt;(T A...)V&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;body&lt;/code&gt; ハンドルがあってはならない &lt;code&gt;null&lt;/code&gt; 。そのタイプは、 &lt;code&gt;(V T A...)V&lt;/code&gt; の形式である必要があります。ここで、 &lt;code&gt;V&lt;/code&gt; は非 &lt;code&gt;void&lt;/code&gt; 、または &lt;code&gt;(T A...)void&lt;/code&gt; です。（では &lt;code&gt;void&lt;/code&gt; の場合は、我々はタイプ割り当てる &lt;code&gt;void&lt;/code&gt; 名前に &lt;code&gt;V&lt;/code&gt; 、そして我々は書きます &lt;code&gt;(V T A...)V&lt;/code&gt; という理解では &lt;code&gt;void&lt;/code&gt; 型 &lt;code&gt;V&lt;/code&gt; は静かに残して、パラメータリストから削除される &lt;code&gt;(T A...)V&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="2607bcf7e52a949a9098498708e7ed0874e36f9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;bytes&lt;/code&gt; parameter is the class bytes of a valid class file (as defined by the &lt;em&gt;The Java Virtual Machine Specification&lt;/em&gt;) with a class name in the same package as the lookup class.</source>
          <target state="translated">&lt;code&gt;bytes&lt;/code&gt; パラメータは、（で定義されたクラスは、有効なクラスファイルのバイトである&lt;em&gt;ザ・Java仮想マシン仕様&lt;/em&gt;のルックアップクラスと同じパッケージ内のクラス名を使用して）。</target>
        </trans-unit>
        <trans-unit id="ce830a6dc99fa048ff691c489beb4b6f9e5a2ab8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;caller&lt;/code&gt; parameter must be a &lt;code&gt;WebRowSet&lt;/code&gt; object whose &lt;code&gt;XmlWriter&lt;/code&gt; field contains a reference to this &lt;code&gt;XmlWriter&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;caller&lt;/code&gt; パラメータがなければなりません &lt;code&gt;WebRowSet&lt;/code&gt; そのオブジェクト &lt;code&gt;XmlWriter&lt;/code&gt; フィールドこの参照が含まれ &lt;code&gt;XmlWriter&lt;/code&gt; オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="549d3c0cc45d126bfe6b339f4e7d396df73338b1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cause&lt;/code&gt; is not initialized.</source>
          <target state="translated">&lt;code&gt;cause&lt;/code&gt; 初期化されていません。</target>
        </trans-unit>
        <trans-unit id="a0fdf3dc80a013dc8c4afe2a38389db91bc45e47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cert.provider.x509v1&lt;/code&gt; property is set to a default implementation for X.509 such as:</source>
          <target state="translated">&lt;code&gt;cert.provider.x509v1&lt;/code&gt; プロパティは、X.509などのデフォルトの実装に設定されています：</target>
        </trans-unit>
        <trans-unit id="51472b90fccbf1d42ba6001caf6f52c8f72d01a2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;changeFlags&lt;/code&gt; parameter of any &lt;code&gt;HierarchyEvent&lt;/code&gt; instance takes one of the following values:</source>
          <target state="translated">&lt;code&gt;HierarchyEvent&lt;/code&gt; インスタンスの &lt;code&gt;changeFlags&lt;/code&gt; パラメーターは、次のいずれかの値を取ります。</target>
        </trans-unit>
        <trans-unit id="7e2379eb6107205000a967e604f084a77bb6b353" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;changeListener&lt;/code&gt; is the listener we add to the model.</source>
          <target state="translated">&lt;code&gt;changeListener&lt;/code&gt; です、モデルに追加するリスナーです。</target>
        </trans-unit>
        <trans-unit id="312b7fe1366e0a3c03057bcb7caeef6dc182a366" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;char&lt;/code&gt; data type (and therefore the value that a &lt;code&gt;Character&lt;/code&gt; object encapsulates) are based on the original Unicode specification, which defined characters as fixed-width 16-bit entities. The Unicode Standard has since been changed to allow for characters whose representation requires more than 16 bits. The range of legal &lt;em&gt;code point&lt;/em&gt;s is now U+0000 to U+10FFFF, known as &lt;em&gt;Unicode scalar value&lt;/em&gt;. (Refer to the &lt;a href=&quot;http://www.unicode.org/reports/tr27/#notation&quot;&gt;&lt;i&gt; definition&lt;/i&gt;&lt;/a&gt; of the U+</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; データタイプ（したがって値その &lt;code&gt;Character&lt;/code&gt; オブジェクト封入）は固定幅16ビットエンティティとしての文字を定義して、元のUnicode仕様に基づいています。Unicode規格は、16ビットを超える表現を必要とする文字を許可するように変更されました。正当な&lt;em&gt;コードポイント&lt;/em&gt;の範囲は、&lt;em&gt;Unicodeスカラー値&lt;/em&gt;として知られるU + 0000からU + 10FFFFになりました。（U +の&lt;a href=&quot;http://www.unicode.org/reports/tr27/#notation&quot;&gt;&lt;i&gt;定義&lt;/i&gt;&lt;/a&gt;を参照してください</target>
        </trans-unit>
        <trans-unit id="159881b528b95151218ddcf06070876dc2535a5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;checkAccess&lt;/code&gt; method of the parent thread group is called with no arguments; this may result in a security exception.</source>
          <target state="translated">親スレッドグループの &lt;code&gt;checkAccess&lt;/code&gt; メソッドは、引数なしで呼び出されます。これにより、セキュリティ例外が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="98813f94bb2ecfd8b901aa13def3a342737037f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;checkImage&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt; calls its peer's &lt;code&gt;checkImage&lt;/code&gt; method to calculate the flags. If this component does not yet have a peer, the component's toolkit's &lt;code&gt;checkImage&lt;/code&gt; method is called instead.</source>
          <target state="translated">&lt;code&gt;checkImage&lt;/code&gt; の方法 &lt;code&gt;Component&lt;/code&gt; そのピアの呼び出しを &lt;code&gt;checkImage&lt;/code&gt; のフラグを計算する方法を。このコンポーネントにまだピアがない場合は、代わりにコンポーネントのツールキットの &lt;code&gt;checkImage&lt;/code&gt; メソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5e8a72d273e2359cf1503e1f34724cc9c2dc1f67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;checkPermission&lt;/code&gt; method that takes a context object in addition to a permission makes access decisions based on that context, rather than on that of the current execution thread. Code within a different context can thus call that method, passing the permission and the previously-saved context object. A sample call, using the SecurityManager &lt;code&gt;sm&lt;/code&gt; obtained as in the previous example, is the following:</source>
          <target state="translated">&lt;code&gt;checkPermission&lt;/code&gt; 許可に加えて、コンテキストオブジェクトを取るメソッドではなく、現在の実行スレッドのそれに比べて、そのコンテキストに基づいてアクセスを決定します。したがって、別のコンテキスト内のコードはそのメソッドを呼び出して、アクセス許可と以前に保存されたコンテキストオブジェクトを渡すことができます。前の例のように取得したSecurityManager &lt;code&gt;sm&lt;/code&gt; を使用したサンプルコールは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="fc365efffcfa5fe96ee6d3621be5f1681a395b54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;childNodes&lt;/code&gt;&lt;code&gt;NodeLists&lt;/code&gt; are equal. This is: they are both &lt;code&gt;null&lt;/code&gt;, or they have the same length and contain equal nodes at the same index. Note that normalization can affect equality; to avoid this, nodes should be normalized before being compared.</source>
          <target state="translated">&lt;code&gt;childNodes&lt;/code&gt; &lt;code&gt;NodeLists&lt;/code&gt; は同じです。これは、両方とも &lt;code&gt;null&lt;/code&gt; であるか、同じ長さで同じインデックスに等しいノードが含まれていることです。正規化は平等に影響を与える可能性があることに注意してください。これを回避するには、ノードを比較する前に正規化する必要があります。</target>
        </trans-unit>
        <trans-unit id="3a5d909660d723c346a03d0f41bd75687e11de0c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cleanup&lt;/code&gt; handle will be passed one or two additional leading arguments. The first is the exception thrown during the execution of the &lt;code&gt;target&lt;/code&gt; handle, or &lt;code&gt;null&lt;/code&gt; if no exception was thrown. The second is the result of the execution of the &lt;code&gt;target&lt;/code&gt; handle, or, if it throws an exception, a &lt;code&gt;null&lt;/code&gt;, zero, or &lt;code&gt;false&lt;/code&gt; value of the required type is supplied as a placeholder. The second argument is not present if the &lt;code&gt;target&lt;/code&gt; handle has a &lt;code&gt;void&lt;/code&gt; return type. (Note that, except for argument type conversions, combinators represent &lt;code&gt;void&lt;/code&gt; values in parameter lists by omitting the corresponding paradoxical arguments, not by inserting &lt;code&gt;null&lt;/code&gt; or zero values.)</source>
          <target state="translated">&lt;code&gt;cleanup&lt;/code&gt; ハンドルは、1つのまたは2つの追加の主要な引数が渡されます。 1つ目は、 &lt;code&gt;target&lt;/code&gt; ハンドルの実行中にスローされる例外、または例外がスローされなかった場合は &lt;code&gt;null&lt;/code&gt; です。 2つ目は、 &lt;code&gt;target&lt;/code&gt; ハンドルの実行結果です。例外がスローされた場合は、必要なタイプの &lt;code&gt;null&lt;/code&gt; 、0、または &lt;code&gt;false&lt;/code&gt; の値がプレースホルダーとして提供されます。 &lt;code&gt;target&lt;/code&gt; ハンドルの戻り値の型が &lt;code&gt;void&lt;/code&gt; の場合、2番目の引数は存在しません。 （引数型変換を除いて、コンビネータは &lt;code&gt;void&lt;/code&gt; を表すことに注意してください &lt;code&gt;null&lt;/code&gt; またはゼロの値を挿入するのではなく、対応する逆説的な引数を省略して、パラメータリストの値を指定します。）</target>
        </trans-unit>
        <trans-unit id="8a37143162f383e40541a3c536a0bad8cdbdac3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clear&lt;/code&gt; method sets calendar field(s) undefined. &lt;code&gt;GregorianCalendar&lt;/code&gt; uses the following default value for each calendar field if its value is undefined.</source>
          <target state="translated">&lt;code&gt;clear&lt;/code&gt; メソッドセットカレンダフィールド（複数可）に定義されていません。 &lt;code&gt;GregorianCalendar&lt;/code&gt; は、値が定義されていない場合、各カレンダーフィールドに次のデフォルト値を使用します。</target>
        </trans-unit>
        <trans-unit id="23c5d3ad8f50c87806bd51026f62bd3f83bef13e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clientProperty&lt;/code&gt; dictionary is not intended to support large scale extensions to JComponent nor should be it considered an alternative to subclassing when designing a new component.</source>
          <target state="translated">&lt;code&gt;clientProperty&lt;/code&gt; の辞書は、JComponentのに大規模な拡張機能をサポートすることを意図していないにもそれが新しいコンポーネントを設計するときのサブクラス化の代替を検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="eca26951481b1fa79d4de62013b67d4d4f363ce7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clockSequence&lt;/code&gt; value is only meaningful in a time-based UUID, which has version type 1. If this UUID is not a time-based UUID then this method throws UnsupportedOperationException.</source>
          <target state="translated">&lt;code&gt;clockSequence&lt;/code&gt; の値は、このUUIDが時間ベースのUUIDでない場合、このメソッドはUnsupportedOperationExceptionをスローバージョンタイプ1を有する時間ベースのUUIDにのみ意味があります。</target>
        </trans-unit>
        <trans-unit id="17c69f5047e8b8edc7675c7afa6d967e75c7e9a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;CipherInputStream&lt;/code&gt; calls the &lt;code&gt;close&lt;/code&gt; method of its underlying input stream.</source>
          <target state="translated">&lt;code&gt;close&lt;/code&gt; の方法 &lt;code&gt;CipherInputStream&lt;/code&gt; 呼び出し、 &lt;code&gt;close&lt;/code&gt; その基礎となる入力ストリームの方法を。</target>
        </trans-unit>
        <trans-unit id="8d16e59d74dedefbb9dca52dccbe54c8fd4fa9e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt; calls its &lt;code&gt;flush&lt;/code&gt; method, and then calls the &lt;code&gt;close&lt;/code&gt; method of its underlying output stream.</source>
          <target state="translated">&lt;code&gt;FilterOutputStream&lt;/code&gt; の &lt;code&gt;close&lt;/code&gt; メソッドは、 &lt;code&gt;flush&lt;/code&gt; メソッドを呼び出してから、基になる出力ストリームの &lt;code&gt;close&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="7e09c5caa8f665f3b57f5f5f897465a41503642c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; の &lt;code&gt;close&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="b8a4c592a0ecb263805a474537d609748a764ffc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;close&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;OutputStream&lt;/code&gt; の &lt;code&gt;close&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="d2531be3b89a10105b22c29564d26639ca4a592a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;color&lt;/code&gt; corresponds to a hex &lt;code&gt;String&lt;/code&gt; as understood by &lt;code&gt;Color.decode&lt;/code&gt;. For example, one of the &lt;code&gt;name-color&lt;/code&gt; pairs is &lt;code&gt;
 &quot;desktop&quot;-&quot;#005C5C&quot;&lt;/code&gt;. This corresponds to the &lt;code&gt;
 SystemColor&lt;/code&gt; field &lt;code&gt;desktop&lt;/code&gt;, with a color value of &lt;code&gt;new Color(0x005C5C)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;color&lt;/code&gt; 六角に対応する &lt;code&gt;String&lt;/code&gt; によって理解されるよう &lt;code&gt;Color.decode&lt;/code&gt; の。たとえば、 &lt;code&gt;name-color&lt;/code&gt; ペアの1つは、 &lt;code&gt; &quot;desktop&quot;-&quot;#005C5C&quot;&lt;/code&gt; です。これは、 &lt;code&gt; SystemColor&lt;/code&gt; フィールド &lt;code&gt;desktop&lt;/code&gt; 対応し、色の値は &lt;code&gt;new Color(0x005C5C)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="272a141fe34e23fe1ed9cd1611d645995f50e5bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;combine&lt;/code&gt; method investigates the two input arrays of ProtectionDomains and returns a single array containing the updated ProtectionDomains. In the simplest case, the &lt;code&gt;combine&lt;/code&gt; method merges the two stacks into one. In more complex cases, the &lt;code&gt;combine&lt;/code&gt; method returns a modified stack of ProtectionDomains. The modification may have added new ProtectionDomains, removed certain ProtectionDomains, or simply updated existing ProtectionDomains. Re-ordering and other optimizations to the ProtectionDomains are also permitted. Typically the &lt;code&gt;combine&lt;/code&gt; method bases its updates on the information encapsulated in the &lt;code&gt;DomainCombiner&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;combine&lt;/code&gt; 方法がたProtectionDomainsの2つの入力配列を調査し、更新されたProtectionDomainsを含む単一の配列を返します。最も単純なケースでは、 &lt;code&gt;combine&lt;/code&gt; メソッドは2つのスタックを1つにマージします。より複雑なケースでは、 &lt;code&gt;combine&lt;/code&gt; メソッドはProtectionDomainsの変更されたスタックを返します。変更により、新しいProtectionDomainが追加された、特定のProtectionDomainが削除された、または単に既存のProtectionDomainが更新された可能性があります。 ProtectionDomainsの並べ替えやその他の最適化も許可されます。通常、 &lt;code&gt;combine&lt;/code&gt; メソッドは、 &lt;code&gt;DomainCombiner&lt;/code&gt; にカプセル化された情報に基づいて更新を行います。</target>
        </trans-unit>
        <trans-unit id="44c35d21bf67cf9c4f42525ec0fe6621b0e16aaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;command&lt;/code&gt; property may not be needed if the &lt;code&gt;RowSet&lt;/code&gt; object gets its data from a source that does not support commands, such as a spreadsheet or other tabular file. Thus, this property is optional and may be &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;command&lt;/code&gt; 場合はプロパティが必要とされないこと &lt;code&gt;RowSet&lt;/code&gt; オブジェクトは、スプレッドシートや他の表形式のファイルなどのコマンドを、サポートしていないソースからデータを取得します。したがって、このプロパティはオプションであり、 &lt;code&gt;null&lt;/code&gt; の場合があります。</target>
        </trans-unit>
        <trans-unit id="928da17633454632f0bf287b021e570d64611c36" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;completed&lt;/code&gt; argument to the &lt;a href=&quot;#end(boolean)&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt; method tells whether or not the I/O operation actually completed, that is, whether it had any effect that would be visible to the invoker. In the case of an operation that reads bytes, for example, this argument should be &lt;code&gt;true&lt;/code&gt; if, and only if, some bytes were actually transferred into the invoker's target buffer.</source>
          <target state="translated">&lt;a href=&quot;#end(boolean)&quot;&gt; &lt;code&gt;end&lt;/code&gt; &lt;/a&gt;メソッドの &lt;code&gt;completed&lt;/code&gt; 引数は、I / O操作が実際に完了したかどうか、つまり、呼び出し元に表示される効果があったかどうかを示します。たとえば、バイトを読み取る操作の場合、一部のバイトが実際に呼び出し元のターゲットバッファーに転送された場合にのみ、この引数は &lt;code&gt;true&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="7a90cfbc00ca33b6d145e6807e96aa2002b85303" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;completed&lt;/code&gt; argument to the &lt;a href=&quot;abstractinterruptiblechannel#end-boolean-&quot;&gt;&lt;code&gt;end&lt;/code&gt;&lt;/a&gt; method tells whether or not the I/O operation actually completed, that is, whether it had any effect that would be visible to the invoker. In the case of an operation that reads bytes, for example, this argument should be &lt;code&gt;true&lt;/code&gt; if, and only if, some bytes were actually transferred into the invoker's target buffer.</source>
          <target state="translated">&lt;a href=&quot;abstractinterruptiblechannel#end-boolean-&quot;&gt; &lt;code&gt;end&lt;/code&gt; &lt;/a&gt;メソッドへの &lt;code&gt;completed&lt;/code&gt; 引数は、I / O操作が実際に完了したかどうか、つまり、呼び出し側から見える影響があったかどうかを示します。たとえば、バイトを読み取る操作の場合、一部のバイトが呼び出し元のターゲットバッファーに実際に転送された場合にのみ、この引数は &lt;code&gt;true&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="a5d94cf564353166be1db9cb4e8271b8ded55663" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;components&lt;/code&gt; array.</source>
          <target state="translated">&lt;code&gt;components&lt;/code&gt; アレイ。</target>
        </trans-unit>
        <trans-unit id="15e9d479711030667ddbf21dea87568e74553c2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;contains&lt;/code&gt; and &lt;code&gt;intersects&lt;/code&gt; methods consider the interior of a &lt;code&gt;Shape&lt;/code&gt; to be the area it encloses as if it were filled. This means that these methods consider unclosed shapes to be implicitly closed for the purpose of determining if a shape contains or intersects a rectangle or if a shape contains a point.</source>
          <target state="translated">&lt;code&gt;contains&lt;/code&gt; と &lt;code&gt;intersects&lt;/code&gt; 方法は、内部検討する &lt;code&gt;Shape&lt;/code&gt; 、それが満たされたかのように囲む領域であると。つまり、これらのメソッドは、形状に長方形が含まれるか交差するか、または形状に点が含まれるかどうかを判断する目的で、閉じられていない形状が暗黙的に閉じられていると見なします。</target>
        </trans-unit>
        <trans-unit id="3114ba8be141b590dba202ffb1a396b416bb2f2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;contentPane&lt;/code&gt; fills the entire viewable area, minus the &lt;code&gt;menuBar&lt;/code&gt;, if present.</source>
          <target state="translated">&lt;code&gt;contentPane&lt;/code&gt; は、表示可能領域全体を埋める、マイナス &lt;code&gt;menuBar&lt;/code&gt; 、存在する場合。</target>
        </trans-unit>
        <trans-unit id="f41c89acf8d6260cc4c3edf1c8a3be1a487a118d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;countMatches&lt;/code&gt; operation can be invoked as follows:</source>
          <target state="translated">&lt;code&gt;countMatches&lt;/code&gt; を次のように操作を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="72616ce87a153d98c6a948602b30731bd218fc29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;createMBeanServer&lt;/code&gt; permission implies the &lt;code&gt;newMBeanServer&lt;/code&gt; permission.</source>
          <target state="translated">&lt;code&gt;createMBeanServer&lt;/code&gt; の許可が意味 &lt;code&gt;newMBeanServer&lt;/code&gt; の許可を。</target>
        </trans-unit>
        <trans-unit id="367254891eef16003973d17f79d44e07bdd79f5f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;d.width&lt;/code&gt; and &lt;code&gt;d.height&lt;/code&gt; values are automatically enlarged if either is less than the minimum size as specified by previous call to &lt;code&gt;setMinimumSize&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;d.width&lt;/code&gt; と &lt;code&gt;d.height&lt;/code&gt; の前回の呼び出しで指定された以下の最小寸法よりもいずれかの場合に値が自動的に拡大され &lt;code&gt;setMinimumSize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bdee408adddec1cc773279770c4eb9ef77c9c337" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;data&lt;/code&gt; is always a legal UTF-16 sequence.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; 常に、法的なUTF-16シーケンスです。</target>
        </trans-unit>
        <trans-unit id="f4549daee89cce421917747661b9b9dbdbc5d4cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;deregister&lt;/code&gt; method is intended only to be used by JDBC Drivers and not by applications. JDBC drivers are recommended to not implement &lt;code&gt;DriverAction&lt;/code&gt; in a public class. If there are active connections to the database at the time that the &lt;code&gt;deregister&lt;/code&gt; method is called, it is implementation specific as to whether the connections are closed or allowed to continue. Once this method is called, it is implementation specific as to whether the driver may limit the ability to create new connections to the database, invoke other &lt;code&gt;Driver&lt;/code&gt; methods or throw a &lt;code&gt;SQLException&lt;/code&gt;. Consult your JDBC driver's documentation for additional information on its behavior.</source>
          <target state="translated">&lt;code&gt;deregister&lt;/code&gt; 方法は、唯一のJDBCドライバではなくアプリケーションによって使用されることを意図しています。 JDBCドライバーは、パブリッククラスに &lt;code&gt;DriverAction&lt;/code&gt; を実装しないことをお勧めします。 &lt;code&gt;deregister&lt;/code&gt; メソッドが呼び出されたときにデータベースへのアクティブな接続がある場合、接続が閉じられているか、続行が許可されているかは実装固有です。このメソッドが呼び出されると、ドライバーがデータベースへの新しい接続を作成する機能を制限するか、他の &lt;code&gt;Driver&lt;/code&gt; メソッドを呼び出すか、 &lt;code&gt;SQLException&lt;/code&gt; をスローするかどうかに関して実装固有です。動作の詳細については、JDBCドライバーのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="5b8e66ca8dcc60e252a66649960d4c45b1465623" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;descriptor&lt;/code&gt; can contain entries that will define the values returned by certain methods of this class, as explained in the &lt;a href=&quot;package-summary#constraints&quot;&gt; package description&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;descriptor&lt;/code&gt; で説明したように、このクラスの特定のメソッドによって返される値を定義するエントリを含むことができ&lt;a href=&quot;package-summary#constraints&quot;&gt;、パッケージの説明を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e74408bd8afc062ff7d9cfe3aab2c13ea6f53b21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dest&lt;/code&gt; argument refers to an object that is not an array.</source>
          <target state="translated">&lt;code&gt;dest&lt;/code&gt; 引数が配列でないオブジェクトを指します。</target>
        </trans-unit>
        <trans-unit id="8294f1f3beefad7591b5cc3ea0551866cab7aae2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;destPos&lt;/code&gt; argument is negative.</source>
          <target state="translated">&lt;code&gt;destPos&lt;/code&gt; の引数が負です。</target>
        </trans-unit>
        <trans-unit id="71160060862e661265f3fd734b0330aa232357eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;detail&lt;/code&gt; attribute inherited from &lt;code&gt;UIEvent&lt;/code&gt; indicates the number of times a mouse button has been pressed and released over the same screen location during a user action. The attribute value is 1 when the user begins this action and increments by 1 for each full sequence of pressing and releasing. If the user moves the mouse between the mousedown and mouseup the value will be set to 0, indicating that no click is occurring.</source>
          <target state="translated">&lt;code&gt;detail&lt;/code&gt; から継承された属性 &lt;code&gt;UIEvent&lt;/code&gt; マウスボタンが押されたユーザアクションの間に同じ画面位置にわたって放出された回数を示しています。ユーザーがこのアクションを開始すると、属性値は1になり、押して放すシーケンス全体ごとに1ずつ増加します。ユーザーがマウスをマウスダウンとマウスアップの間で動かすと、値は0に設定され、クリックが発生していないことを示します。</target>
        </trans-unit>
        <trans-unit id="2a960f617370308fb92badef083ce1edd73bfd82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;digest&lt;/code&gt; method can be called once for a given number of updates. After &lt;code&gt;digest&lt;/code&gt; has been called, the MessageDigest object is reset to its initialized state.</source>
          <target state="translated">&lt;code&gt;digest&lt;/code&gt; 方法は、アップデートの与えられた数のために一度呼び出すことができます。後 &lt;code&gt;digest&lt;/code&gt; 呼ばれてきた、MessageDigestオブジェクトは初期化状態にリセットされます。</target>
        </trans-unit>
        <trans-unit id="e1dde7d27adbf8e6cef3b9bbcdbc4cbcc2ad96bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;double&lt;/code&gt; format can represent all consecutive integers in the range -2&lt;sup&gt;53&lt;/sup&gt; to 2&lt;sup&gt;53&lt;/sup&gt;. If the pipeline has more than 2&lt;sup&gt;53&lt;/sup&gt; values, the divisor in the average computation will saturate at 2&lt;sup&gt;53&lt;/sup&gt;, leading to additional numerical errors.</source>
          <target state="translated">&lt;code&gt;double&lt;/code&gt; フォーマットは範囲内のすべての連続した整数を表すことができ、-2 &lt;sup&gt;53&lt;/sup&gt; 2 &lt;sup&gt;53&lt;/sup&gt;。パイプラインに2 &lt;sup&gt;53を&lt;/sup&gt;超える値がある場合、平均計算の除数は2 &lt;sup&gt;53&lt;/sup&gt;で飽和し、追加の数値エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="cad4be16e75ad0f3392aac98141ceaed42bece6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;double&lt;/code&gt; value that is closer than any other to</source>
          <target state="translated">&lt;code&gt;double&lt;/code&gt; 他により近い値</target>
        </trans-unit>
        <trans-unit id="1e3ae85b07a531401bb2890e79fc22f20146cf1b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;draw3DRect&lt;/code&gt; and &lt;code&gt;fill3DRect&lt;/code&gt; methods were implemented in terms of the &lt;code&gt;drawLine&lt;/code&gt; and &lt;code&gt;fillRect&lt;/code&gt; methods in the &lt;code&gt;Graphics&lt;/code&gt; class which would predicate their behavior upon the current &lt;code&gt;Stroke&lt;/code&gt; and &lt;code&gt;Paint&lt;/code&gt; objects in a &lt;code&gt;Graphics2D&lt;/code&gt; context. This class overrides those implementations with versions that use the current &lt;code&gt;Color&lt;/code&gt; exclusively, overriding the current &lt;code&gt;Paint&lt;/code&gt; and which uses &lt;code&gt;fillRect&lt;/code&gt; to describe the exact same behavior as the preexisting methods regardless of the setting of the current &lt;code&gt;Stroke&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;draw3DRect&lt;/code&gt; と &lt;code&gt;fill3DRect&lt;/code&gt; 方法は換算で実施された &lt;code&gt;drawLine&lt;/code&gt; と &lt;code&gt;fillRect&lt;/code&gt; のメソッド &lt;code&gt;Graphics&lt;/code&gt; 電流にその動作を述語なるクラス &lt;code&gt;Stroke&lt;/code&gt; 及び &lt;code&gt;Paint&lt;/code&gt; 内のオブジェクトを &lt;code&gt;Graphics2D&lt;/code&gt; コンテキスト。このクラスは、現在の &lt;code&gt;Color&lt;/code&gt; を排他的に使用し、現在の &lt;code&gt;Paint&lt;/code&gt; をオーバーライドし、 &lt;code&gt;fillRect&lt;/code&gt; を使用して、現在の &lt;code&gt;Stroke&lt;/code&gt; の設定に関係なく、既存のメソッドとまったく同じ動作を記述するバージョンでこれらの実装をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="6f02492238ec3eeb18bc396353d14b09af775519" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dstOffset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;charsequence#length()&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;dstOffset&lt;/code&gt; コピーの引数がより大きいか等しくなければならない &lt;code&gt;0&lt;/code&gt; 、未満又は等しい&lt;a href=&quot;charsequence#length()&quot;&gt;長さ&lt;/a&gt;この配列の。</target>
        </trans-unit>
        <trans-unit id="99457e6b4813c6110cd28c3bdc215ba87cac93e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dstOffset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;stringbuffer#length--&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;dstOffset&lt;/code&gt; コピーの引数がより大きいか等しくなければならない &lt;code&gt;0&lt;/code&gt; 、未満又は等しい&lt;a href=&quot;stringbuffer#length--&quot;&gt;長さ&lt;/a&gt;この配列の。</target>
        </trans-unit>
        <trans-unit id="cf3f3c8673cb205a88acf65cbe9d481cc7bd21e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dstOffset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;stringbuilder#length--&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;dstOffset&lt;/code&gt; コピーの引数がより大きいか等しくなければならない &lt;code&gt;0&lt;/code&gt; 、未満又は等しい&lt;a href=&quot;stringbuilder#length--&quot;&gt;長さ&lt;/a&gt;この配列の。</target>
        </trans-unit>
        <trans-unit id="57b48e0bd69c0d96f6dab5758abac0f4d57b113a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;encoded&lt;/code&gt; argument is illegal if it:</source>
          <target state="translated">次の場合、 &lt;code&gt;encoded&lt;/code&gt; 引数は不正です。</target>
        </trans-unit>
        <trans-unit id="7f825d64728b91255aebca414eb9e4365aeec903" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;endOfInput&lt;/code&gt; parameter advises this method as to whether the invoker can provide further input beyond that contained in the given input buffer. If there is a possibility of providing additional input then the invoker should pass &lt;code&gt;false&lt;/code&gt; for this parameter; if there is no possibility of providing further input then the invoker should pass &lt;code&gt;true&lt;/code&gt;. It is not erroneous, and in fact it is quite common, to pass &lt;code&gt;false&lt;/code&gt; in one invocation and later discover that no further input was actually available. It is critical, however, that the final invocation of this method in a sequence of invocations always pass &lt;code&gt;true&lt;/code&gt; so that any remaining undecoded input will be treated as being malformed.</source>
          <target state="translated">&lt;code&gt;endOfInput&lt;/code&gt; のパラメータは、呼び出しが指定された入力バッファに含まれるそれを超えて、さらに入力を提供することができるかどうかに関して、この方法をアドバイス。追加の入力を提供する可能性がある場合、呼び出し元はこのパラメーターに &lt;code&gt;false&lt;/code&gt; を渡す必要があります。さらに入力を提供する可能性がない場合、呼び出し側は &lt;code&gt;true&lt;/code&gt; を渡す必要があります。1回の呼び出しで &lt;code&gt;false&lt;/code&gt; を渡して、後で実際に使用できる入力がないことを検出することは、誤りではなく、実際には非常に一般的です。ただし、呼び出しのシーケンスでのこのメソッドの最後の呼び出しは常に &lt;code&gt;true&lt;/code&gt; を渡すため、残りのデコードされていない入力はすべて不正な形式として処理されます。</target>
        </trans-unit>
        <trans-unit id="fabf47fc50497b896963aa9019b8b35e3fbde409" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;endOfInput&lt;/code&gt; parameter advises this method as to whether the invoker can provide further input beyond that contained in the given input buffer. If there is a possibility of providing additional input then the invoker should pass &lt;code&gt;false&lt;/code&gt; for this parameter; if there is no possibility of providing further input then the invoker should pass &lt;code&gt;true&lt;/code&gt;. It is not erroneous, and in fact it is quite common, to pass &lt;code&gt;false&lt;/code&gt; in one invocation and later discover that no further input was actually available. It is critical, however, that the final invocation of this method in a sequence of invocations always pass &lt;code&gt;true&lt;/code&gt; so that any remaining unencoded input will be treated as being malformed.</source>
          <target state="translated">&lt;code&gt;endOfInput&lt;/code&gt; のパラメータは、呼び出しが指定された入力バッファに含まれるそれを超えて、さらに入力を提供することができるかどうかに関して、この方法をアドバイス。追加の入力を提供する可能性がある場合、呼び出し元はこのパラメーターに &lt;code&gt;false&lt;/code&gt; を渡す必要があります。さらに入力を提供する可能性がない場合、呼び出し側は &lt;code&gt;true&lt;/code&gt; を渡す必要があります。1回の呼び出しで &lt;code&gt;false&lt;/code&gt; を渡して、後で実際に使用できる入力がないことを検出することは、誤りではなく、実際には非常に一般的です。ただし、呼び出しのシーケンスにおけるこのメソッドの最後の呼び出しは常に &lt;code&gt;true&lt;/code&gt; を渡し、残りのエンコードされていない入力が不正な形式として処理されることが重要です。</target>
        </trans-unit>
        <trans-unit id="ec11602184cb13ced71453ae56dda30935562022" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;entities&lt;/code&gt;&lt;code&gt;NamedNodeMaps&lt;/code&gt; are equal.</source>
          <target state="translated">&lt;code&gt;entities&lt;/code&gt; &lt;code&gt;NamedNodeMaps&lt;/code&gt; は同じです。</target>
        </trans-unit>
        <trans-unit id="ec561af054842027cb5a40ad05b4b5c7e68a8699" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;entry&lt;/code&gt; argument is valid only for the duration of the invocation. Using &lt;code&gt;entry&lt;/code&gt; after the call returns results in undefined behavior.</source>
          <target state="translated">&lt;code&gt;entry&lt;/code&gt; 引数は呼び出しの間有効です。呼び出しが戻った後に &lt;code&gt;entry&lt;/code&gt; を使用すると、未定義の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="759ffc9229118351f3a52e836520820e1dc112e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equals()&lt;/code&gt; method for an enumeration class just does a test for identical objects (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">列挙型クラスの &lt;code&gt;equals()&lt;/code&gt; メソッドは、同一のオブジェクト（ &lt;code&gt;==&lt;/code&gt; ）のテストのみを行います。</target>
        </trans-unit>
        <trans-unit id="b29ad1a11acf214b8866d6a3f630b101a0ca3675" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equals&lt;/code&gt; method for class &lt;code&gt;Object&lt;/code&gt; implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;, this method returns &lt;code&gt;true&lt;/code&gt; if and only if &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; refer to the same object (&lt;code&gt;x == y&lt;/code&gt; has the value &lt;code&gt;true&lt;/code&gt;).</source>
          <target state="translated">クラス &lt;code&gt;Object&lt;/code&gt; の &lt;code&gt;equals&lt;/code&gt; メソッドは、オブジェクトに対して最も識別可能な同値関係を実装します。つまり、null以外の参照値 &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; の場合、このメソッドは、 &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; が同じオブジェクトを参照する場合（ &lt;code&gt;x == y&lt;/code&gt; の値が &lt;code&gt;true&lt;/code&gt; ）の場合にのみ &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="387966673ba7ec974b34376b9ba2a99dc7f3ff88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;equals&lt;/code&gt; method implements an equivalence relation on non-null object references:</source>
          <target state="translated">&lt;code&gt;equals&lt;/code&gt; メソッドを実装にnull以外のオブジェクト参照上の同値関係を：</target>
        </trans-unit>
        <trans-unit id="5611c44255183f5d91cb4e6ea30bca9c8f5bc511" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;estimateDepth&lt;/code&gt; specifies the estimate number of stack frames this &lt;code&gt;StackWalker&lt;/code&gt; will traverse that the &lt;code&gt;StackWalker&lt;/code&gt; could use as a hint for the buffer size.</source>
          <target state="translated">&lt;code&gt;estimateDepth&lt;/code&gt; はこのスタックフレームの推定数を指定 &lt;code&gt;StackWalker&lt;/code&gt; がいることを横断する &lt;code&gt;StackWalker&lt;/code&gt; は、バッファサイズのヒントとして使用することができます。</target>
        </trans-unit>
        <trans-unit id="542970e582dd284bb20814dd3b131537943f85a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eventPropertyName&lt;/code&gt; string is used to extract a value from the incoming event object that is passed to the target method. The common case is the target method takes no arguments, in which case a value of null should be used for the &lt;code&gt;eventPropertyName&lt;/code&gt;. Alternatively if you want the incoming event object passed directly to the target method use the empty string. The format of the &lt;code&gt;eventPropertyName&lt;/code&gt; string is a sequence of methods or properties where each method or property is applied to the value returned by the preceding method starting from the incoming event object. The syntax is: &lt;code&gt;propertyName{.propertyName}*&lt;/code&gt; where &lt;code&gt;propertyName&lt;/code&gt; matches a method or property. For example, to extract the &lt;code&gt;point&lt;/code&gt; property from a &lt;code&gt;MouseEvent&lt;/code&gt;, you could use either &lt;code&gt;&quot;point&quot;&lt;/code&gt; or &lt;code&gt;&quot;getPoint&quot;&lt;/code&gt; as the &lt;code&gt;eventPropertyName&lt;/code&gt;. To extract the &quot;text&quot; property from a &lt;code&gt;MouseEvent&lt;/code&gt; with a &lt;code&gt;JLabel&lt;/code&gt; source use any of the following as &lt;code&gt;eventPropertyName&lt;/code&gt;: &lt;code&gt;&quot;source.text&quot;&lt;/code&gt;, &lt;code&gt;&quot;getSource.text&quot; &quot;getSource.getText&quot;&lt;/code&gt; or &lt;code&gt;&quot;source.getText&quot;&lt;/code&gt;. If a method can not be found, or an exception is generated as part of invoking a method a &lt;code&gt;RuntimeException&lt;/code&gt; will be thrown at dispatch time. For example, if the incoming event object is null, and &lt;code&gt;eventPropertyName&lt;/code&gt; is non-null and not empty, a &lt;code&gt;RuntimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;eventPropertyName&lt;/code&gt; の文字列は、ターゲットメソッドに渡される受信イベントオブジェクトから値を抽出するために使用されます。一般的なケースは、ターゲットメソッドが引数をとらない場合です。この場合、 &lt;code&gt;eventPropertyName&lt;/code&gt; にはnullの値を使用する必要があります。または、着信イベントオブジェクトをターゲットメソッドに直接渡す場合は、空の文字列を使用します。 &lt;code&gt;eventPropertyName&lt;/code&gt; 文字列の形式は、一連のメソッドまたはプロパティであり、各メソッドまたはプロパティは、着信イベントオブジェクトから開始して前のメソッドによって返される値に適用されます。構文は次のとおりです &lt;code&gt;propertyName{.propertyName}*&lt;/code&gt; ここで、 &lt;code&gt;propertyName&lt;/code&gt; はメソッドまたはプロパティと一致します。たとえば、 &lt;code&gt;point&lt;/code&gt; を抽出するには &lt;code&gt;MouseEvent&lt;/code&gt; のプロパティの場合、 &lt;code&gt;eventPropertyName&lt;/code&gt; として &lt;code&gt;&quot;point&quot;&lt;/code&gt; または &lt;code&gt;&quot;getPoint&quot;&lt;/code&gt; getPoint 」のいずれかを使用できます。 「テキスト」プロパティを抽出し &lt;code&gt;MouseEvent&lt;/code&gt; と &lt;code&gt;JLabel&lt;/code&gt; ののいずれかとして、以下のソース使用 &lt;code&gt;eventPropertyName&lt;/code&gt; ： &lt;code&gt;&quot;source.text&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;getSource.text&quot; &quot;getSource.getText&quot;&lt;/code&gt; 又は &lt;code&gt;&quot;source.getText&quot;&lt;/code&gt; 。メソッドが見つからない場合、またはメソッドの呼び出しの一部として例外が生成された場合、ディスパッチ時に &lt;code&gt;RuntimeException&lt;/code&gt; がスローされます。たとえば、着信イベントオブジェクトがnullの場合、 &lt;code&gt;eventPropertyName&lt;/code&gt; はnullではなく、空ではありません。 &lt;code&gt;RuntimeException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="979f15807ff26fd3232fc39f57a589f6474444ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;eventPropertyName&lt;/code&gt; string is used to extract a value from the incoming event object that is passed to the target method. The common case is the target method takes no arguments, in which case a value of null should be used for the &lt;code&gt;eventPropertyName&lt;/code&gt;. Alternatively if you want the incoming event object passed directly to the target method use the empty string. The format of the &lt;code&gt;eventPropertyName&lt;/code&gt; string is a sequence of methods or properties where each method or property is applied to the value returned by the preceding method starting from the incoming event object. The syntax is: &lt;code&gt;propertyName{.propertyName}*&lt;/code&gt; where &lt;code&gt;propertyName&lt;/code&gt; matches a method or property. For example, to extract the &lt;code&gt;point&lt;/code&gt; property from a &lt;code&gt;MouseEvent&lt;/code&gt;, you could use either &lt;code&gt;&quot;point&quot;&lt;/code&gt; or &lt;code&gt;&quot;getPoint&quot;&lt;/code&gt; as the &lt;code&gt;eventPropertyName&lt;/code&gt;. To extract the &quot;text&quot; property from a &lt;code&gt;MouseEvent&lt;/code&gt; with a &lt;code&gt;JLabel&lt;/code&gt; source use any of the following as &lt;code&gt;eventPropertyName&lt;/code&gt;: &lt;code&gt;&quot;source.text&quot;&lt;/code&gt;, &lt;code&gt;&quot;getSource.text&quot;&lt;/code&gt;&lt;code&gt;&quot;getSource.getText&quot;&lt;/code&gt; or &lt;code&gt;&quot;source.getText&quot;&lt;/code&gt;. If a method can not be found, or an exception is generated as part of invoking a method a &lt;code&gt;RuntimeException&lt;/code&gt; will be thrown at dispatch time. For example, if the incoming event object is null, and &lt;code&gt;eventPropertyName&lt;/code&gt; is non-null and not empty, a &lt;code&gt;RuntimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">&lt;code&gt;eventPropertyName&lt;/code&gt; の文字列は、ターゲットメソッドに渡される受信イベントオブジェクトから値を抽出するために使用されます。一般的なケースは、ターゲットメソッドが引数を取らない場合です。その場合、 &lt;code&gt;eventPropertyName&lt;/code&gt; にnullの値を使用する必要があります。または、着信イベントオブジェクトをターゲットメソッドに直接渡す場合は、空の文字列を使用します。 &lt;code&gt;eventPropertyName&lt;/code&gt; 文字列の形式は、一連のメソッドまたはプロパティであり、各メソッドまたはプロパティは、着信イベントオブジェクトから始まる、前のメソッドによって返された値に適用されます。構文は次のとおりです &lt;code&gt;propertyName{.propertyName}*&lt;/code&gt; ここで、 &lt;code&gt;propertyName&lt;/code&gt; はメソッドまたはプロパティと一致します。たとえば、 &lt;code&gt;point&lt;/code&gt; を抽出するには &lt;code&gt;MouseEvent&lt;/code&gt; のプロパティでは、 &lt;code&gt;&quot;point&quot;&lt;/code&gt; または &lt;code&gt;&quot;getPoint&quot;&lt;/code&gt; &lt;code&gt;eventPropertyName&lt;/code&gt; 」のいずれかをeventPropertyNameとして使用できます。 「テキスト」プロパティを抽出し &lt;code&gt;MouseEvent&lt;/code&gt; と &lt;code&gt;JLabel&lt;/code&gt; ののいずれかとして、以下のソース使用 &lt;code&gt;eventPropertyName&lt;/code&gt; ： &lt;code&gt;&quot;source.text&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;getSource.text&quot;&lt;/code&gt; &lt;code&gt;&quot;getSource.getText&quot;&lt;/code&gt; 又は &lt;code&gt;&quot;source.getText&quot;&lt;/code&gt; 。メソッドが見つからない場合、またはメソッドの呼び出しの一部として例外が生成された場合は、ディスパッチ時に &lt;code&gt;RuntimeException&lt;/code&gt; がスローされます。たとえば、着信イベントオブジェクトがnullで、 &lt;code&gt;eventPropertyName&lt;/code&gt; nullではなく空ではない場合、 &lt;code&gt;RuntimeException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="11b7dfa61c07755540a7b91b193348ac328193f3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method executes an SQL statement and indicates the form of the first result. You must then use the methods &lt;code&gt;getResultSet&lt;/code&gt; or &lt;code&gt;getUpdateCount&lt;/code&gt; to retrieve the result, and &lt;code&gt;getMoreResults&lt;/code&gt; to move to any subsequent result(s).</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; 方法は、SQL文を実行し、最初の結果の形式を示しています。その後、メソッドを使用する必要があり &lt;code&gt;getResultSet&lt;/code&gt; メソッドまたは &lt;code&gt;getUpdateCount&lt;/code&gt; はした結果を取得するために、および &lt;code&gt;getMoreResults&lt;/code&gt; により引き続き任意の結果（複数可）に移動します。</target>
        </trans-unit>
        <trans-unit id="05464faee96a489e25104ce5867b437da02b7e6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method finds a method whose name is the same as the &lt;code&gt;methodName&lt;/code&gt; property, and invokes the method on the target.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; メソッドは、その名と同じ方法見つけ &lt;code&gt;methodName&lt;/code&gt; ののプロパティを、ターゲット上のメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="881d0e5738f41f203ab7920ce95659722dd4768f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method finds a method whose name is the same as the &lt;code&gt;methodName&lt;/code&gt; property, and invokes the method on the target. When the target's class defines many methods with the given name the implementation should choose the most specific method using the algorithm specified in the Java Language Specification (15.11). The dynamic class of the target and arguments are used in place of the compile-time type information and, like the &lt;a href=&quot;../../../java.base/java/lang/reflect/method&quot;&gt;&lt;code&gt;Method&lt;/code&gt;&lt;/a&gt; class itself, conversion between primitive values and their associated wrapper classes is handled internally.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; メソッドは、その名と同じ方法見つけ &lt;code&gt;methodName&lt;/code&gt; ののプロパティを、ターゲット上のメソッドを呼び出します。ターゲットのクラスが指定された名前で多くのメソッドを定義する場合、実装はJava言語仕様（15.11）で指定されたアルゴリズムを使用して最も具体的なメソッドを選択する必要があります。ターゲットと引数の動的クラスは、コンパイル時の型情報の代わりに使用され、&lt;a href=&quot;../../../java.base/java/lang/reflect/method&quot;&gt; &lt;code&gt;Method&lt;/code&gt; &lt;/a&gt;クラス自体と同様に、プリミティブ値とそれに関連するラッパークラス間の変換は内部で処理されます。</target>
        </trans-unit>
        <trans-unit id="7b4b06ad05dfb91d784c6607e33529a4e06af587" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method finds a method whose name is the same as the &lt;code&gt;methodName&lt;/code&gt; property, and invokes the method on the target. When the target's class defines many methods with the given name the implementation should choose the most specific method using the algorithm specified in the Java Language Specification (15.11). The dynamic class of the target and arguments are used in place of the compile-time type information and, like the &lt;a href=&quot;../lang/reflect/method&quot;&gt;&lt;code&gt;Method&lt;/code&gt;&lt;/a&gt; class itself, conversion between primitive values and their associated wrapper classes is handled internally.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; メソッドは、その名と同じ方法見つけ &lt;code&gt;methodName&lt;/code&gt; ののプロパティを、ターゲット上のメソッドを呼び出します。ターゲットのクラスが特定の名前を持つ多くのメソッドを定義する場合、実装は、Java言語仕様（15.11）で指定されたアルゴリズムを使用して、最も具体的なメソッドを選択する必要があります。ターゲットの動的クラスと引数は、コンパイル時の型情報の代わりに使用され、&lt;a href=&quot;../lang/reflect/method&quot;&gt; &lt;code&gt;Method&lt;/code&gt; &lt;/a&gt;クラス自体と同様に、プリミティブ値とそれに関連するラッパークラス間の変換は内部で処理されます。</target>
        </trans-unit>
        <trans-unit id="8ad6c0c213db0ee82bf11ddff27fdf95642bb749" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method may use the following properties to create a connection for reading data: url, data source name, user name, password, transaction isolation, and type map. The &lt;code&gt;execute&lt;/code&gt; method may use the following properties to create a statement to execute a command: command, read only, maximum field size, maximum rows, escape processing, and query timeout.</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; URL、データソース名、ユーザー名、パスワード、トランザクション遮断、および型マップ：メソッドは、データを読み込むための接続を作成するには、次のプロパティを使用することができます。 &lt;code&gt;execute&lt;/code&gt; 方法は、コマンドを実行するためのステートメントを作成するために、次のプロパティを使用することができます：コマンド、読み取り専用、最大フィールドサイズ、最大行、エスケープ処理、およびクエリのタイムアウトを。</target>
        </trans-unit>
        <trans-unit id="d2e86b01e43a8878ea8710bd314038dcf77ab8f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;execute&lt;/code&gt; method returns a &lt;code&gt;boolean&lt;/code&gt; to indicate the form of the first result. You must call either the method &lt;code&gt;getResultSet&lt;/code&gt; or &lt;code&gt;getUpdateCount&lt;/code&gt; to retrieve the result; you must call &lt;code&gt;getMoreResults&lt;/code&gt; to move to any subsequent result(s).</source>
          <target state="translated">&lt;code&gt;execute&lt;/code&gt; 方法は、戻り &lt;code&gt;boolean&lt;/code&gt; 最初の結果の形式を示すために。結果を取得するには、メソッド &lt;code&gt;getResultSet&lt;/code&gt; または &lt;code&gt;getUpdateCount&lt;/code&gt; のいずれかを呼び出す必要があります。後続の結果に移動するには、 &lt;code&gt;getMoreResults&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="721571d52ff7950b67b214b688c61b64a75961c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;executor&lt;/code&gt; parameter is an &lt;code&gt;ExecutorService&lt;/code&gt; that creates new threads as needed to execute tasks that are submitted to handle I/O events and dispatch completion results for operations initiated on asynchronous channels in the group. It may reuse previously constructed threads when they are available.</source>
          <target state="translated">&lt;code&gt;executor&lt;/code&gt; パラメータがある &lt;code&gt;ExecutorService&lt;/code&gt; のグループでの非同期チャネル上で開始操作のためのI / Oイベント・発送完了の結果を処理するために提出されたタスクを実行するために必要に応じて新しいスレッドを作成します。以前に構築されたスレッドが利用可能な場合、それらを再利用できます。</target>
        </trans-unit>
        <trans-unit id="ec1467cb33e94fd2c0bb533c599fa01ae6a0656e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;executor&lt;/code&gt; parameter is an &lt;code&gt;ExecutorService&lt;/code&gt; that executes tasks submitted to dispatch completion results for operations initiated on asynchronous channels in the group.</source>
          <target state="translated">&lt;code&gt;executor&lt;/code&gt; パラメータがある &lt;code&gt;ExecutorService&lt;/code&gt; の実行タスクがグループ内の非同期チャネル上で開始操作に発送完了の結果を提出しました。</target>
        </trans-unit>
        <trans-unit id="340e8f3277e0a9554138eaf4e4d1386486ab2daf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;executor&lt;/code&gt; parameter is the &lt;a href=&quot;../../util/concurrent/executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; to which tasks are submitted to handle I/O events and dispatch completion results for operations initiated on resulting channel. The nature of these tasks is highly implementation specific and so care should be taken when configuring the &lt;code&gt;Executor&lt;/code&gt;. Minimally it should support an unbounded work queue and should not run tasks on the caller thread of the &lt;a href=&quot;../../util/concurrent/executor#execute(java.lang.Runnable)&quot;&gt;&lt;code&gt;execute&lt;/code&gt;&lt;/a&gt; method. Shutting down the executor service while the channel is open results in unspecified behavior.</source>
          <target state="translated">&lt;code&gt;executor&lt;/code&gt; パラメータがある&lt;a href=&quot;../../util/concurrent/executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; の&lt;/a&gt;タスクは、チャネルを結果に開始した操作のI / Oイベント・発送完了の結果を処理するために提出されました。これらのタスクの性質は実装固有であるため、 &lt;code&gt;Executor&lt;/code&gt; を構成する際には注意が必要です。最低限、無制限のワークキューをサポートする必要があり、&lt;a href=&quot;../../util/concurrent/executor#execute(java.lang.Runnable)&quot;&gt; &lt;code&gt;execute&lt;/code&gt; &lt;/a&gt;メソッドの呼び出し元スレッドでタスクを実行しないでください。チャネルが開いているときにエグゼキュータサービスをシャットダウンすると、動作が不特定になります。</target>
        </trans-unit>
        <trans-unit id="f3b206390268e595a7543c9f72d6571233bef9fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;executor&lt;/code&gt; parameter is the &lt;a href=&quot;../../util/concurrent/executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; to which tasks are submitted to handle I/O events and dispatch completion results for operations initiated on resulting channel. The nature of these tasks is highly implementation specific and so care should be taken when configuring the &lt;code&gt;Executor&lt;/code&gt;. Minimally it should support an unbounded work queue and should not run tasks on the caller thread of the &lt;a href=&quot;../../util/concurrent/executor#execute-java.lang.Runnable-&quot;&gt;&lt;code&gt;execute&lt;/code&gt;&lt;/a&gt; method. Shutting down the executor service while the channel is open results in unspecified behavior.</source>
          <target state="translated">&lt;code&gt;executor&lt;/code&gt; パラメータがある&lt;a href=&quot;../../util/concurrent/executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; の&lt;/a&gt;タスクは、チャネルを結果に開始した操作のI / Oイベント・発送完了の結果を処理するために提出されました。これらのタスクの性質は実装固有であり、 &lt;code&gt;Executor&lt;/code&gt; を構成する際には注意が必要です。最低限、無制限の作業キューをサポートし、&lt;a href=&quot;../../util/concurrent/executor#execute-java.lang.Runnable-&quot;&gt; &lt;code&gt;execute&lt;/code&gt; &lt;/a&gt;メソッドの呼び出し側スレッドでタスクを実行しないでください。チャネルが開いている間にexecutorサービスをシャットダウンすると、不特定の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="9a348a5e6c50ba5a16fcb50db730eca7f5277712" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;exit&lt;/code&gt; method of class &lt;code&gt;Runtime&lt;/code&gt; has been called and the security manager has permitted the exit operation to take place.</source>
          <target state="translated">クラス &lt;code&gt;Runtime&lt;/code&gt; の &lt;code&gt;exit&lt;/code&gt; メソッドが呼び出され、セキュリティマネージャがexit操作の実行を許可しました。</target>
        </trans-unit>
        <trans-unit id="54da7fdc8d08868a250106136d8727592f95e4ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extraExports&lt;/code&gt; parameter is the map of additional packages to export. The &lt;code&gt;extraOpens&lt;/code&gt; parameter is the map of additional packages to open. In both cases, the map key is the fully-qualified name of the package as defined in section 6.5.3 of</source>
          <target state="translated">&lt;code&gt;extraExports&lt;/code&gt; のパラメータは、エクスポートする追加パッケージのマップです。 &lt;code&gt;extraOpens&lt;/code&gt; のパラメータがオープンする追加パッケージのマップです。どちらの場合も、マップキーは、のセクション6.5.3で定義されているパッケージの完全修飾名です。</target>
        </trans-unit>
        <trans-unit id="7fa94cd8aa6c313051f5bdb81ee487e8d422730c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extraProvides&lt;/code&gt; parameter is the additional service providers for the module to provide. The map key is the service type. The map value is the non-empty list of implementation types, each of which is a member of the module and an implementation of the service.</source>
          <target state="translated">&lt;code&gt;extraProvides&lt;/code&gt; のパラメータは、提供するために、モジュールの追加のサービスプロバイダーです。マップキーはサービスタイプです。マップ値は、実装タイプの空でないリストであり、各実装タイプはモジュールのメンバーであり、サービスの実装です。</target>
        </trans-unit>
        <trans-unit id="676f7c17aac8c78e797db6e7abb083ffd0ff7492" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;failure&lt;/code&gt; callback is invoked when the RMI runtime is unable to create a &lt;code&gt;ServerSocket&lt;/code&gt; via the &lt;code&gt;RMISocketFactory&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;failure&lt;/code&gt; RMIランタイムが作成できなかった場合にコールバックが呼び出され &lt;code&gt;ServerSocket&lt;/code&gt; 経由して &lt;code&gt;RMISocketFactory&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="969956ed69e8a6235531b9a7241b70965fe5c99b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;failure&lt;/code&gt; callback is invoked when the RMI runtime is unable to create a &lt;code&gt;ServerSocket&lt;/code&gt; via the &lt;code&gt;RMISocketFactory&lt;/code&gt;. An &lt;code&gt;RMIFailureHandler&lt;/code&gt; is registered via a call to &lt;code&gt;RMISocketFacotry.setFailureHandler&lt;/code&gt;. If no failure handler is installed, the default behavior is to attempt to re-create the ServerSocket.</source>
          <target state="translated">&lt;code&gt;failure&lt;/code&gt; RMIランタイムが作成できなかった場合にコールバックが呼び出され &lt;code&gt;ServerSocket&lt;/code&gt; 経由して &lt;code&gt;RMISocketFactory&lt;/code&gt; 。アン &lt;code&gt;RMIFailureHandler&lt;/code&gt; ははへの呼び出しによって登録されて &lt;code&gt;RMISocketFacotry.setFailureHandler&lt;/code&gt; 。障害ハンドラーがインストールされていない場合、デフォルトの動作はServerSocketの再作成を試みることです。</target>
        </trans-unit>
        <trans-unit id="1a61775a7139e096b9fd0be3d2ad7ac6f1c956f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;family&lt;/code&gt; parameter is used to specify the &lt;a href=&quot;../../net/protocolfamily&quot;&gt;&lt;code&gt;ProtocolFamily&lt;/code&gt;&lt;/a&gt;. If the datagram channel is to be used for IP multicasting then this should correspond to the address type of the multicast groups that this channel will join.</source>
          <target state="translated">&lt;code&gt;family&lt;/code&gt; パラメータが指定するために使用され&lt;a href=&quot;../../net/protocolfamily&quot;&gt; &lt;code&gt;ProtocolFamily&lt;/code&gt; を&lt;/a&gt;。データグラムチャネルがIPマルチキャストに使用される場合、これはこのチャネルが参加するマルチキャストグループのアドレスタイプに対応している必要があります。</target>
        </trans-unit>
        <trans-unit id="f08c1804c0526409a1ecb2988cff36a97dc47de4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filter&lt;/code&gt; and &lt;code&gt;handback&lt;/code&gt; parameters may be null if and only if they are null in a listener to be removed.</source>
          <target state="translated">&lt;code&gt;filter&lt;/code&gt; と &lt;code&gt;handback&lt;/code&gt; のパラメータは、それらが除去されるリスナーにヌルである場合に限り、NULLとすることができます。</target>
        </trans-unit>
        <trans-unit id="e2e6442675b7f51f69f821df5212aa778b1fe932" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;filtering()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, such as downstream of a &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. For example, given a stream of &lt;code&gt;Employee&lt;/code&gt;, to accumulate the employees in each department that have a salary above a certain threshold:</source>
          <target state="translated">&lt;code&gt;filtering()&lt;/code&gt; このようなの下流として、マルチレベルの低減に使用される場合、コレクターは最も有用である &lt;code&gt;groupingBy&lt;/code&gt; 又は &lt;code&gt;partitioningBy&lt;/code&gt; 。たとえば、 &lt;code&gt;Employee&lt;/code&gt; ストリームが与えられた場合、特定のしきい値を超える給与を持つ各部門の従業員を累積するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="e696db23567885b82ff4f03850097e84169fd88a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated and will be removed.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は廃止され、削除されます。</target>
        </trans-unit>
        <trans-unit id="097d5634e76c7fdc3a50dea30921ddef17371844" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated and will be removed. It is implemented as a no-op. Subclasses that override &lt;code&gt;finalize&lt;/code&gt; in order to perform cleanup should be modified to use alternative cleanup mechanisms and remove the overriding &lt;code&gt;finalize&lt;/code&gt; method. The recommended cleanup for compressor is to explicitly call &lt;code&gt;end&lt;/code&gt; method when it is no longer in use. If the &lt;code&gt;end&lt;/code&gt; is not invoked explicitly the resource of the compressor will be released when the instance becomes unreachable,</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は廃止され、削除されます。これは、no-opとして実装されます。クリーンアップを実行するために &lt;code&gt;finalize&lt;/code&gt; をオーバーライドするサブクラスは、代替のクリーンアップメカニズムを使用し、オーバーライドする &lt;code&gt;finalize&lt;/code&gt; メソッドを削除するように変更する必要があります。コンプレッサーの推奨されるクリーンアップは、使用されなくなったときに &lt;code&gt;end&lt;/code&gt; メソッドを明示的に呼び出すことです。場合は &lt;code&gt;end&lt;/code&gt; 明示的に呼び出されていないインスタンスが到達不能になった場合の圧縮機のリソースが解放され、</target>
        </trans-unit>
        <trans-unit id="47b79383bcae3e922204d5ea86fccfb170bfe2e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated and will be removed. It is implemented as a no-op. Subclasses that override &lt;code&gt;finalize&lt;/code&gt; in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding &lt;code&gt;finalize&lt;/code&gt; method. The recommended cleanup for ZipFile object is to explicitly invoke &lt;code&gt;close&lt;/code&gt; method when it is no longer in use, or use try-with-resources. If the &lt;code&gt;close&lt;/code&gt; is not invoked explicitly the resources held by this object will be released when the instance becomes unreachable.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は廃止され、削除されます。これは、no-opとして実装されます。クリーンアップを実行するために &lt;code&gt;finalize&lt;/code&gt; をオーバーライドするサブクラスは、代替のクリーンアップメカニズムを使用し、オーバーライドする &lt;code&gt;finalize&lt;/code&gt; メソッドを削除するように変更する必要があります。 ZipFileオブジェクトの推奨されるクリーンアップは、使用されなくなったときに &lt;code&gt;close&lt;/code&gt; メソッドを明示的に呼び出すか、try-with-resourcesを使用することです。場合は &lt;code&gt;close&lt;/code&gt; 明示的に呼び出されていないインスタンスが到達不能になった場合、このオブジェクトが保持しているリソースが解放されます。</target>
        </trans-unit>
        <trans-unit id="7f87f25a450e774218ae842f94ecc4f8e21a6230" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated and will be removed. It is implemented as a no-op. Subclasses that override &lt;code&gt;finalize&lt;/code&gt; in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding &lt;code&gt;finalize&lt;/code&gt; method. The recommended cleanup for compressor is to explicitly call &lt;code&gt;end&lt;/code&gt; method when it is no longer in use. If the &lt;code&gt;end&lt;/code&gt; is not invoked explicitly the resource of the compressor will be released when the instance becomes unreachable.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は廃止され、削除されます。これは、no-opとして実装されます。クリーンアップを実行するために &lt;code&gt;finalize&lt;/code&gt; をオーバーライドするサブクラスは、代替のクリーンアップメカニズムを使用し、オーバーライドする &lt;code&gt;finalize&lt;/code&gt; メソッドを削除するように変更する必要があります。コンプレッサーの推奨されるクリーンアップは、使用されなくなったときに &lt;code&gt;end&lt;/code&gt; メソッドを明示的に呼び出すことです。場合は &lt;code&gt;end&lt;/code&gt; 明示的に呼び出されていないインスタンスが到達不能になった場合の圧縮機のリソースが解放されます。</target>
        </trans-unit>
        <trans-unit id="a5781f1fe78b11db626c54005d97fda3c5e9dc2a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated and will be removed. Subclasses that override &lt;code&gt;finalize&lt;/code&gt; in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding &lt;code&gt;finalize&lt;/code&gt; method. When overriding the &lt;code&gt;finalize&lt;/code&gt; method, its implementation must explicitly ensure that &lt;code&gt;super.finalize()&lt;/code&gt; is invoked as described in &lt;a href=&quot;../lang/object#finalize()&quot;&gt;&lt;code&gt;Object.finalize()&lt;/code&gt;&lt;/a&gt;. See the specification for &lt;a href=&quot;../lang/object#finalize()&quot;&gt;&lt;code&gt;Object.finalize()&lt;/code&gt;&lt;/a&gt; for further information about migration options.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は廃止され、削除されます。クリーンアップを実行するために &lt;code&gt;finalize&lt;/code&gt; をオーバーライドするサブクラスは、代替のクリーンアップメカニズムを使用し、オーバーライドする &lt;code&gt;finalize&lt;/code&gt; メソッドを削除するように変更する必要があります。 &lt;code&gt;finalize&lt;/code&gt; メソッドをオーバーライドする場合、その実装では、&lt;a href=&quot;../lang/object#finalize()&quot;&gt; &lt;code&gt;Object.finalize()&lt;/code&gt; で&lt;/a&gt;説明されているように、 &lt;code&gt;super.finalize()&lt;/code&gt; が呼び出されることを明示的に確認する必要があります。移行オプションの詳細については、&lt;a href=&quot;../lang/object#finalize()&quot;&gt; &lt;code&gt;Object.finalize()&lt;/code&gt; の&lt;/a&gt;仕様を参照してください。</target>
        </trans-unit>
        <trans-unit id="a42af659e94273af1e3e71c3f847d665f87c7926" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は廃止されました。</target>
        </trans-unit>
        <trans-unit id="301938edcbcee8912bd33f8f0d3d67fd77b6a355" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated. Subclasses that override &lt;code&gt;finalize&lt;/code&gt; in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding &lt;code&gt;finalize&lt;/code&gt; method. When overriding the &lt;code&gt;finalize&lt;/code&gt; method, its implementation must explicitly ensure that &lt;code&gt;super.finalize()&lt;/code&gt; is invoked as described in &lt;a href=&quot;../../../../java.base/java/lang/object#finalize()&quot;&gt;&lt;code&gt;Object.finalize()&lt;/code&gt;&lt;/a&gt;. See the specification for &lt;a href=&quot;../../../../java.base/java/lang/object#finalize()&quot;&gt;&lt;code&gt;Object.finalize()&lt;/code&gt;&lt;/a&gt; for further information about migration options.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は廃止されました。クリーンアップを実行するために &lt;code&gt;finalize&lt;/code&gt; をオーバーライドするサブクラスは、代替のクリーンアップメカニズムを使用し、オーバーライドする &lt;code&gt;finalize&lt;/code&gt; メソッドを削除するように変更する必要があります。 &lt;code&gt;finalize&lt;/code&gt; メソッドをオーバーライドする場合、その実装では、&lt;a href=&quot;../../../../java.base/java/lang/object#finalize()&quot;&gt; &lt;code&gt;Object.finalize()&lt;/code&gt; で&lt;/a&gt;説明されているように &lt;code&gt;super.finalize()&lt;/code&gt; が呼び出されることを明示的に確認する必要があります。移行オプションの詳細については、&lt;a href=&quot;../../../../java.base/java/lang/object#finalize()&quot;&gt; &lt;code&gt;Object.finalize()&lt;/code&gt; の&lt;/a&gt;仕様を参照してください。</target>
        </trans-unit>
        <trans-unit id="3cf6ab10b27945f3cea37844915cc05f3c74248d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method has been deprecated. Subclasses that override &lt;code&gt;finalize&lt;/code&gt; in order to perform cleanup should be modified to use alternative cleanup mechanisms and to remove the overriding &lt;code&gt;finalize&lt;/code&gt; method. When overriding the &lt;code&gt;finalize&lt;/code&gt; method, its implementation must explicitly ensure that &lt;code&gt;super.finalize()&lt;/code&gt; is invoked as described in &lt;a href=&quot;../../../java.base/java/lang/object#finalize()&quot;&gt;&lt;code&gt;Object.finalize()&lt;/code&gt;&lt;/a&gt;. See the specification for &lt;a href=&quot;../../../java.base/java/lang/object#finalize()&quot;&gt;&lt;code&gt;Object.finalize()&lt;/code&gt;&lt;/a&gt; for further information about migration options.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は廃止されました。クリーンアップを実行するために &lt;code&gt;finalize&lt;/code&gt; をオーバーライドするサブクラスは、代替のクリーンアップメカニズムを使用し、オーバーライドする &lt;code&gt;finalize&lt;/code&gt; メソッドを削除するように変更する必要があります。 &lt;code&gt;finalize&lt;/code&gt; メソッドをオーバーライドする場合、その実装では、&lt;a href=&quot;../../../java.base/java/lang/object#finalize()&quot;&gt; &lt;code&gt;Object.finalize()&lt;/code&gt; で&lt;/a&gt;説明されているように &lt;code&gt;super.finalize()&lt;/code&gt; が呼び出されることを明示的に確認する必要があります。移行オプションの詳細については、&lt;a href=&quot;../../../java.base/java/lang/object#finalize()&quot;&gt; &lt;code&gt;Object.finalize()&lt;/code&gt; の&lt;/a&gt;仕様を参照してください。</target>
        </trans-unit>
        <trans-unit id="acfa3270c433f7fbeb166904731784b7ab01474e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method is never invoked more than once by a Java virtual machine for any given object.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; 方法は、任意のオブジェクトについてJava仮想マシンが複数回呼び出されることはありません。</target>
        </trans-unit>
        <trans-unit id="36550a7fe4b3770df4940e5d45c14dff3f4cb361" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;finalize&lt;/code&gt; method of class &lt;code&gt;Object&lt;/code&gt; performs no special action; it simply returns normally. Subclasses of &lt;code&gt;Object&lt;/code&gt; may override this definition.</source>
          <target state="translated">クラス &lt;code&gt;Object&lt;/code&gt; の &lt;code&gt;finalize&lt;/code&gt; メソッドは特別なアクションを実行しません。単に正常に戻ります。 &lt;code&gt;Object&lt;/code&gt; のサブクラスはこの定義をオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="290eeab6379b679af729a0f7d139a6b6afebf8ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;findSystemClass&lt;/code&gt; method in class &lt;code&gt;ClassLoader&lt;/code&gt; .</source>
          <target state="translated">クラス &lt;code&gt;ClassLoader&lt;/code&gt; の &lt;code&gt;findSystemClass&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="b78d49371e443cbd3adbfb51ffc64676bde68d8a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flatMap()&lt;/code&gt; operation has the effect of applying a one-to-many transformation to the elements of the stream, and then flattening the resulting elements into a new stream.</source>
          <target state="translated">&lt;code&gt;flatMap()&lt;/code&gt; 操作は、ストリームの要素に一対多の変換を適用し、新しいストリームに得られる要素を平坦化する効果を有します。</target>
        </trans-unit>
        <trans-unit id="296d9a4aaa513be61985bb6776a603e7a0774231" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flatMapping()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, such as downstream of a &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. For example, given a stream of &lt;code&gt;Order&lt;/code&gt;, to accumulate the set of line items for each customer:</source>
          <target state="translated">&lt;code&gt;flatMapping()&lt;/code&gt; このようなの下流として、マルチレベルの低減に使用される場合、コレクターは最も有用である &lt;code&gt;groupingBy&lt;/code&gt; 又は &lt;code&gt;partitioningBy&lt;/code&gt; 。たとえば、 &lt;code&gt;Order&lt;/code&gt; ストリームが与えられた場合、各顧客のラインアイテムのセットを蓄積するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="ee0bb92de803847414b86012236c4f48f3910542" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush()&lt;/code&gt; method does nothing.</source>
          <target state="translated">&lt;code&gt;flush()&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="9794be29838cb64627abe081d7728e6987d9e44a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; method of &lt;code&gt;DataOutputStream&lt;/code&gt; calls the &lt;code&gt;flush&lt;/code&gt; method of its underlying output stream.</source>
          <target state="translated">&lt;code&gt;flush&lt;/code&gt; の方法 &lt;code&gt;DataOutputStream&lt;/code&gt; のは、呼び出す &lt;code&gt;flush&lt;/code&gt; その基本となる出力ストリームの方法を。</target>
        </trans-unit>
        <trans-unit id="195ffa6218dd9b603f2e4ca8f61c877be833e3ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt; calls the &lt;code&gt;flush&lt;/code&gt; method of its underlying output stream.</source>
          <target state="translated">&lt;code&gt;flush&lt;/code&gt; の方法 &lt;code&gt;FilterOutputStream&lt;/code&gt; は、呼び出す &lt;code&gt;flush&lt;/code&gt; その基本となる出力ストリームの方法を。</target>
        </trans-unit>
        <trans-unit id="68aa9823b85500f33061dc1eb4258756e15e005f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;flush&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;OutputStream&lt;/code&gt; の &lt;code&gt;flush&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="708bb18e269a3b497919640ccb7a50b14533bedd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forName&lt;/code&gt; method in class &lt;code&gt;Class&lt;/code&gt;.</source>
          <target state="translated">クラス &lt;code&gt;Class&lt;/code&gt; の &lt;code&gt;forName&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="1e830c12e2148cec99c8883588bf6d4b50000667" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forward&lt;/code&gt; flag specifies the order that certificates will be passed to the &lt;a href=&quot;#check(java.security.cert.Certificate)&quot;&gt;&lt;code&gt;check&lt;/code&gt;&lt;/a&gt; method (forward or reverse).</source>
          <target state="translated">&lt;code&gt;forward&lt;/code&gt; フラグは証明書が渡されることを指定するため&lt;a href=&quot;#check(java.security.cert.Certificate)&quot;&gt; &lt;code&gt;check&lt;/code&gt; &lt;/a&gt;方法（順方向または逆方向）を。</target>
        </trans-unit>
        <trans-unit id="4c26146099bd6b8ccdb37b5c47095892a4be4161" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forward&lt;/code&gt; flag specifies the order that certificates will be passed to the &lt;a href=&quot;#check(java.security.cert.Certificate,java.util.Collection)&quot;&gt;&lt;code&gt;check&lt;/code&gt;&lt;/a&gt; method (forward or reverse). A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;&lt;b&gt;must&lt;/b&gt; support reverse checking and &lt;b&gt;may&lt;/b&gt; support forward checking.</source>
          <target state="translated">&lt;code&gt;forward&lt;/code&gt; フラグは証明書が渡されることを指定するため&lt;a href=&quot;#check(java.security.cert.Certificate,java.util.Collection)&quot;&gt; &lt;code&gt;check&lt;/code&gt; &lt;/a&gt;方法（順方向または逆方向）を。 A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; &lt;b&gt;しなければならない&lt;/b&gt;逆チェックをサポートして&lt;b&gt;も&lt;/b&gt;順方向のチェックをサポートしています。</target>
        </trans-unit>
        <trans-unit id="8de3dc96d234b55e125cd365d4c69d5d74e9de59" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forward&lt;/code&gt; flag specifies the order that certificates will be passed to the &lt;a href=&quot;certpathchecker#check-java.security.cert.Certificate-&quot;&gt;&lt;code&gt;check&lt;/code&gt;&lt;/a&gt; method (forward or reverse).</source>
          <target state="translated">&lt;code&gt;forward&lt;/code&gt; フラグは証明書が渡されることを指定するため&lt;a href=&quot;certpathchecker#check-java.security.cert.Certificate-&quot;&gt; &lt;code&gt;check&lt;/code&gt; &lt;/a&gt;方法（順方向または逆方向）を。</target>
        </trans-unit>
        <trans-unit id="7f3a1ac72ca4c5a5aab4a7ea8026300ca9e9a65d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;forward&lt;/code&gt; flag specifies the order that certificates will be passed to the &lt;a href=&quot;pkixcertpathchecker#check-java.security.cert.Certificate-java.util.Collection-&quot;&gt;&lt;code&gt;check&lt;/code&gt;&lt;/a&gt; method (forward or reverse). A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;&lt;b&gt;must&lt;/b&gt; support reverse checking and &lt;b&gt;may&lt;/b&gt; support forward checking.</source>
          <target state="translated">&lt;code&gt;forward&lt;/code&gt; フラグは証明書が渡されることを指定するため&lt;a href=&quot;pkixcertpathchecker#check-java.security.cert.Certificate-java.util.Collection-&quot;&gt; &lt;code&gt;check&lt;/code&gt; &lt;/a&gt;方法（順方向または逆方向）を。A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; &lt;b&gt;しなければならない&lt;/b&gt;逆チェックをサポートして&lt;b&gt;も&lt;/b&gt;順方向のチェックをサポートしています。</target>
        </trans-unit>
        <trans-unit id="c29abf69126019dfa340a81cfcd7917ddb6a1954" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fractionalDigits&lt;/code&gt; parameter allows the output of the fractional second to be controlled. Specifying zero will cause no fractional digits to be output. From 1 to 9 will output an increasing number of digits, using zero right-padding if necessary. The special value -1 is used to output as many digits as necessary to avoid any trailing zeroes.</source>
          <target state="translated">&lt;code&gt;fractionalDigits&lt;/code&gt; のパラメータは、小数第二の出力を制御することを可能にします。ゼロを指定すると、小数桁は出力されません。1から9は、必要に応じてゼロ右パディングを使用して、桁数を増やして出力します。特殊な値-1は、後続のゼロを回避するために必要な数の桁を出力するために使用されます。</target>
        </trans-unit>
        <trans-unit id="7b74f2d1a70560572c42c19ad803e17b40cd8b5e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get/putClientProperty&lt;/code&gt; methods provide access to a small per-instance hashtable. Callers can use get/putClientProperty to annotate components that were created by another module. For example, a layout manager might store per child constraints this way. For example:</source>
          <target state="translated">&lt;code&gt;get/putClientProperty&lt;/code&gt; メソッドは、インスタンスごとの小さなハッシュテーブルへのアクセスを提供します。呼び出し元は、get / putClientPropertyを使用して、別のモジュールによって作成されたコンポーネントに注釈を付けることができます。たとえば、レイアウトマネージャーは、この方法で子ごとの制約を格納できます。例えば：</target>
        </trans-unit>
        <trans-unit id="854b032e913f227ca9315dfb23f41c9eee3500bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getAWTEventListeners&lt;/code&gt; method of &lt;code&gt;Toolkit&lt;/code&gt; can return a mixture of &lt;code&gt;AWTEventListener&lt;/code&gt; and &lt;code&gt;AWTEventListenerProxy&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;getAWTEventListeners&lt;/code&gt; の方法 &lt;code&gt;Toolkit&lt;/code&gt; の混合物で返すことができる &lt;code&gt;AWTEventListener&lt;/code&gt; と &lt;code&gt;AWTEventListenerProxy&lt;/code&gt; オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="23ff0ed130fbcc2ffd5daaf1ed441144839e0f30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getBundle&lt;/code&gt; factory methods with no &lt;code&gt;Control&lt;/code&gt; parameter locate and load resource bundles from &lt;a href=&quot;spi/resourcebundleprovider&quot;&gt;service providers&lt;/a&gt;. It may continue the search as if calling &lt;a href=&quot;../lang/module#getResourceAsStream(java.lang.String)&quot;&gt;&lt;code&gt;Module.getResourceAsStream(String)&lt;/code&gt;&lt;/a&gt; to find the named resource from a given module and calling &lt;a href=&quot;../lang/classloader#getResourceAsStream(java.lang.String)&quot;&gt;&lt;code&gt;ClassLoader.getResourceAsStream(String)&lt;/code&gt;&lt;/a&gt;; refer to the specification of the &lt;code&gt;getBundle&lt;/code&gt; method for details. Only non-encapsulated resource bundles of &quot;&lt;code&gt;java.class&lt;/code&gt;&quot; or &quot;&lt;code&gt;java.properties&lt;/code&gt;&quot; format are searched.</source>
          <target state="translated">&lt;code&gt;getBundle&lt;/code&gt; のなしでファクトリメソッド &lt;code&gt;Control&lt;/code&gt; パラメータからリソースバンドルを探し、ロード&lt;a href=&quot;spi/resourcebundleprovider&quot;&gt;サービスプロバイダー&lt;/a&gt;。&lt;a href=&quot;../lang/module#getResourceAsStream(java.lang.String)&quot;&gt; &lt;code&gt;Module.getResourceAsStream(String)&lt;/code&gt; &lt;/a&gt;を呼び出して特定のモジュールから名前付きリソースを検索し、&lt;a href=&quot;../lang/classloader#getResourceAsStream(java.lang.String)&quot;&gt; &lt;code&gt;ClassLoader.getResourceAsStream(String)&lt;/code&gt; &lt;/a&gt;を呼び出すかのように、検索を続行できます。詳細については、 &lt;code&gt;getBundle&lt;/code&gt; メソッドの仕様を参照してください。 「 &lt;code&gt;java.class&lt;/code&gt; 」または「 &lt;code&gt;java.properties&lt;/code&gt; 」形式のカプセル化されていないリソースバンドルのみが検索されます。</target>
        </trans-unit>
        <trans-unit id="dd64d876b826e032eea9ddf5b6c247d57ce3fd4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; and &lt;code&gt;
 getMinimalDaysInFirstWeek()&lt;/code&gt; values are initialized using locale-dependent resources when constructing a &lt;code&gt;
 GregorianCalendar&lt;/code&gt;. &lt;a id=&quot;iso8601_compatible_setting&quot;&gt;The week determination is compatible&lt;/a&gt; with the ISO 8601 standard when &lt;code&gt;
 getFirstDayOfWeek()&lt;/code&gt; is &lt;code&gt;MONDAY&lt;/code&gt; and &lt;code&gt;
 getMinimalDaysInFirstWeek()&lt;/code&gt; is 4, which values are used in locales where the standard is preferred. These values can explicitly be set by calling &lt;a href=&quot;calendar#setFirstDayOfWeek(int)&quot;&gt;&lt;code&gt;setFirstDayOfWeek()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;calendar#setMinimalDaysInFirstWeek(int)&quot;&gt;&lt;code&gt;setMinimalDaysInFirstWeek()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; および &lt;code&gt; getMinimalDaysInFirstWeek()&lt;/code&gt; の値を構築する際に、ロケール依存のリソースを使用して初期化され &lt;code&gt; GregorianCalendar&lt;/code&gt; 。 &lt;code&gt; getFirstDayOfWeek()&lt;/code&gt; が &lt;code&gt;MONDAY&lt;/code&gt; で &lt;code&gt; getMinimalDaysInFirstWeek()&lt;/code&gt; が4の場合、&lt;a id=&quot;iso8601_compatible_setting&quot;&gt;週の決定は&lt;/a&gt;ISO 8601標準と互換性があります。これらの値は、標準が優先されるロケールで使用されます。これらの値は、&lt;a href=&quot;calendar#setFirstDayOfWeek(int)&quot;&gt; &lt;code&gt;setFirstDayOfWeek()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;calendar#setMinimalDaysInFirstWeek(int)&quot;&gt; &lt;code&gt;setMinimalDaysInFirstWeek()&lt;/code&gt; を&lt;/a&gt;呼び出すことで明示的に設定できます。</target>
        </trans-unit>
        <trans-unit id="0f3e1d9782b5c32d63d7b0cc83ee2c191412bb87" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; and &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; values are initialized using locale-dependent resources when constructing a &lt;code&gt;GregorianCalendar&lt;/code&gt;. &lt;a name=&quot;iso8601_compatible_setting&quot;&gt;The week determination is compatible&lt;/a&gt; with the ISO 8601 standard when &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; is &lt;code&gt;MONDAY&lt;/code&gt; and &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; is 4, which values are used in locales where the standard is preferred. These values can explicitly be set by calling &lt;a href=&quot;calendar#setFirstDayOfWeek-int-&quot;&gt;&lt;code&gt;setFirstDayOfWeek()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;calendar#setMinimalDaysInFirstWeek-int-&quot;&gt;&lt;code&gt;setMinimalDaysInFirstWeek()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; および &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; の値を構築する際に、ロケール依存のリソースを使用して初期化され &lt;code&gt;GregorianCalendar&lt;/code&gt; 。 &lt;code&gt;getFirstDayOfWeek()&lt;/code&gt; が &lt;code&gt;MONDAY&lt;/code&gt; で &lt;code&gt;getMinimalDaysInFirstWeek()&lt;/code&gt; が4の場合、&lt;a name=&quot;iso8601_compatible_setting&quot;&gt;週の決定は&lt;/a&gt; ISO 8601標準と互換性があり、標準が優先されるロケールで使用されます。これらの値は、&lt;a href=&quot;calendar#setFirstDayOfWeek-int-&quot;&gt; &lt;code&gt;setFirstDayOfWeek()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;calendar#setMinimalDaysInFirstWeek-int-&quot;&gt; &lt;code&gt;setMinimalDaysInFirstWeek()&lt;/code&gt; を&lt;/a&gt;呼び出すことによって明示的に設定できます。</target>
        </trans-unit>
        <trans-unit id="56523d844e395cab10ecde9ba8b570825460b5cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getInstance&lt;/code&gt; factory method of the &lt;code&gt;Cipher&lt;/code&gt; engine class follows these rules in order to instantiate a provider's implementation of &lt;code&gt;CipherSpi&lt;/code&gt; for a transformation of the form &quot;</source>
          <target state="translated">&lt;code&gt;Cipher&lt;/code&gt; エンジンクラスの &lt;code&gt;getInstance&lt;/code&gt; ファクトリメソッドは、フォームの変換のためにプロバイダーの &lt;code&gt;CipherSpi&lt;/code&gt; の実装をインスタンス化するために、これらのルールに従います</target>
        </trans-unit>
        <trans-unit id="f09e308477567f7fb18f8db544516ee32916e1fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getNotifTypes&lt;/code&gt; method returns an array of strings containing the notification types that the MBean may emit. The notification type is a dot-notation string which describes what the emitted notification is about, not the Java class of the notification. A single generic notification class can be used to send notifications of several types. All of these types are returned in the string array result of the &lt;code&gt;getNotifTypes&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;getNotifTypes&lt;/code&gt; の方法は、MBeanを発することができることの通知タイプを含む文字列の配列を返します。通知タイプは、通知のJavaクラスではなく、発行された通知の内容を説明するドット表記文字列です。単一の汎用通知クラスを使用して、いくつかのタイプの通知を送信できます。これらのタイプはすべて、 &lt;code&gt;getNotifTypes&lt;/code&gt; メソッドの文字列配列の結果で返されます。</target>
        </trans-unit>
        <trans-unit id="058e0ca7376a98eb437efbc0aef64d1a8a108d0b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getObjectInstance()&lt;/code&gt; method of an object factory may be invoked multiple times, possibly using different parameters. The implementation is thread-safe.</source>
          <target state="translated">オブジェクトファクトリの &lt;code&gt;getObjectInstance()&lt;/code&gt; メソッドは、異なるパラメーターを使用して、複数回呼び出すことができます。実装はスレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="6a8501111fcfea5e31cfee8d6894af584ff150ce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getOptionType&lt;/code&gt; method returns this value if this &lt;code&gt;ConfirmationCallback&lt;/code&gt; was instantiated with &lt;code&gt;options&lt;/code&gt; instead of an &lt;code&gt;optionType&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getOptionType&lt;/code&gt; のこの場合、メソッドはこの値を返し &lt;code&gt;ConfirmationCallback&lt;/code&gt; をを用いてインスタンス化された &lt;code&gt;options&lt;/code&gt; の代わりに &lt;code&gt;optionType&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8a70b914e02ddbca33ccc8428f3eed3b38dd996" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getPropertyInfo&lt;/code&gt; method is intended to allow a generic GUI tool to discover what properties it should prompt a human for in order to get enough information to connect to a database. Note that depending on the values the human has supplied so far, additional values may become necessary, so it may be necessary to iterate though several calls to the &lt;code&gt;getPropertyInfo&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;getPropertyInfo&lt;/code&gt; の方法は、一般的なGUIツールは、それがデータベースに接続するのに十分な情報を得るためにのために人間を求めるべき性質を発見できるようにするためのものです。人間がこれまでに提供した値によっては、追加の値が必要になる場合があるため、 &lt;code&gt;getPropertyInfo&lt;/code&gt; メソッドを何度か呼び出しても繰り返す必要がある場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6ebc4bc14d6647d69c5c4a4fb63fb8fd2ffdfd9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getResources&lt;/code&gt; method of the context &lt;code&gt;ClassLoader&lt;/code&gt; is used locate JAR files containing files named &lt;code&gt;META-INF/services/javax.imageio.spi.&lt;/code&gt;</source>
          <target state="translated">コンテキスト &lt;code&gt;ClassLoader&lt;/code&gt; の &lt;code&gt;getResources&lt;/code&gt; メソッドを使用して、 &lt;code&gt;META-INF/services/javax.imageio.spi.&lt;/code&gt; という名前のファイルを含むJARファイルを見つけます。</target>
        </trans-unit>
        <trans-unit id="b2b6b51bd170eb65242dd9c81805d8ac434ccc43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;getStateToBind()&lt;/code&gt; method of a state factory may be invoked multiple times, possibly using different parameters. The implementation is thread-safe.</source>
          <target state="translated">状態ファクトリの &lt;code&gt;getStateToBind()&lt;/code&gt; メソッドは、おそらく異なるパラメーターを使用して、複数回呼び出すことができます。実装はスレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="4133bc1ef355b2f7d534eacc6206c1d3c4756a8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;glassPane&lt;/code&gt; and &lt;code&gt;contentPane&lt;/code&gt; have the same bounds, which means &lt;code&gt;JRootPane&lt;/code&gt; does not tiles its children and this should return false.</source>
          <target state="translated">&lt;code&gt;glassPane&lt;/code&gt; と &lt;code&gt;contentPane&lt;/code&gt; をを意味し、同じ境界を持っている &lt;code&gt;JRootPane&lt;/code&gt; その子をタイリングせず、これがfalseを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="ee344936fcd60a44c7aadfe704fe188c2bf05a14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;glassPane&lt;/code&gt; and &lt;code&gt;contentPane&lt;/code&gt; have the same bounds, which means &lt;code&gt;JRootPane&lt;/code&gt; does not tiles its children and this should return false. On the other hand, the &lt;code&gt;glassPane&lt;/code&gt; is normally not visible, and so this can return true if the &lt;code&gt;glassPane&lt;/code&gt; isn't visible. Therefore, the return value here depends upon the visibility of the &lt;code&gt;glassPane&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;glassPane&lt;/code&gt; と &lt;code&gt;contentPane&lt;/code&gt; をを意味し、同じ境界を持っている &lt;code&gt;JRootPane&lt;/code&gt; その子をタイリングせず、これがfalseを返す必要があります。一方、 &lt;code&gt;glassPane&lt;/code&gt; は通常は表示されないため、 &lt;code&gt;glassPane&lt;/code&gt; が表示されていない場合はtrueを返すことができます。したがって、ここでの戻り値は、 &lt;code&gt;glassPane&lt;/code&gt; の可視性に依存します。</target>
        </trans-unit>
        <trans-unit id="c64b9cd519193ff182ca1d2c0d0b61365f9b46ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;glassPane&lt;/code&gt; fills the entire viewable area of the &lt;code&gt;JRootPane&lt;/code&gt; (bounds - insets).</source>
          <target state="translated">&lt;code&gt;glassPane&lt;/code&gt; は、全体の表示可能領域塗りつぶし &lt;code&gt;JRootPane&lt;/code&gt; （ -インセット境界を）。</target>
        </trans-unit>
        <trans-unit id="303f1b7ffcb897ac198d0b32c1e4690dd69e7d53" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;glassPane&lt;/code&gt; sits on top of all other components in the &lt;code&gt;JRootPane&lt;/code&gt;. That provides a convenient place to draw above all other components, and makes it possible to intercept mouse events, which is useful both for dragging and for drawing. Developers can use &lt;code&gt;setVisible&lt;/code&gt; on the &lt;code&gt;glassPane&lt;/code&gt; to control when the &lt;code&gt;glassPane&lt;/code&gt; displays over the other children. By default the &lt;code&gt;glassPane&lt;/code&gt; is not visible.</source>
          <target state="translated">&lt;code&gt;glassPane&lt;/code&gt; は内の他のすべてのコンポーネントの上に座っている &lt;code&gt;JRootPane&lt;/code&gt; 。これは、他のすべてのコンポーネントの上に描画するのに便利な場所を提供し、マウスイベントをインターセプトすることを可能にします。これは、ドラッグと描画の両方に役立ちます。開発者は、使用することができる &lt;code&gt;setVisible&lt;/code&gt; 上 &lt;code&gt;glassPane&lt;/code&gt; 制御する際 &lt;code&gt;glassPane&lt;/code&gt; 他の子供たちの上に表示されます。デフォルトでは、 &lt;code&gt;glassPane&lt;/code&gt; は表示されません。</target>
        </trans-unit>
        <trans-unit id="f433eca03b2eb0f32d07fb7e2e68b92fac6f3c89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;handle&lt;/code&gt; method implementation checks the instance(s) of the &lt;code&gt;Callback&lt;/code&gt; object(s) passed in to retrieve or display the requested information. The following example is provided to help demonstrate what an &lt;code&gt;handle&lt;/code&gt; method implementation might look like. This example code is for guidance only. Many details, including proper error handling, are left out for simplicity.</source>
          <target state="translated">&lt;code&gt;handle&lt;/code&gt; のメソッドの実装をチェックインスタンス（複数可） &lt;code&gt;Callback&lt;/code&gt; に渡されたオブジェクト（複数可）を取得または要求された情報を表示します。次の例は、 &lt;code&gt;handle&lt;/code&gt; メソッドの実装がどのようになるかを示すのに役立ちます。このコード例はガイダンスのみを目的としています。適切なエラー処理を含む多くの詳細は、簡略化のために省略されています。</target>
        </trans-unit>
        <trans-unit id="78806b6c0d8e3a500425fd33fe6be57433f2f45a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hashCode&lt;/code&gt; method of the returned set returns the sum of the</source>
          <target state="translated">返されたセットの &lt;code&gt;hashCode&lt;/code&gt; メソッドは、</target>
        </trans-unit>
        <trans-unit id="2f587f428ba9d70c513a6f20faefa7737e3169e3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hashCode&lt;/code&gt; method uses the underlying &lt;code&gt;java.util.Date&lt;/code&gt; implementation and therefore does not include nanos in its computation.</source>
          <target state="translated">&lt;code&gt;hashCode&lt;/code&gt; 方法は、基礎となる使用 &lt;code&gt;java.util.Date&lt;/code&gt; の実装を、したがって、その計算にnanos値を含んでいません。</target>
        </trans-unit>
        <trans-unit id="fd1ec688b3211b62ec6deea7903a4e5a33c5b1e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hostname&lt;/code&gt; argument is illegal if it:</source>
          <target state="translated">次の場合、 &lt;code&gt;hostname&lt;/code&gt; 引数は無効です。</target>
        </trans-unit>
        <trans-unit id="0e43ec7f450994678afac7d3d20f221033df02a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;hostnameVerifier&lt;/code&gt; for this object.</source>
          <target state="translated">このオブジェクトの &lt;code&gt;hostnameVerifier&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a0862b9286e778fa946553866f62a5a21c32639" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;iconOnly&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;iconOnly&lt;/code&gt; の値。</target>
        </trans-unit>
        <trans-unit id="daad7e8488e5cfcb51dabab10521abe9fa406690" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;iconifyFrame()&lt;/code&gt; code calls this to determine the proper bounds for the desktopIcon.</source>
          <target state="translated">&lt;code&gt;iconifyFrame()&lt;/code&gt; のコードは、desktopIconの適切な境界を指定し、これを呼び出します。</target>
        </trans-unit>
        <trans-unit id="51e65210412db39a03c74c582c66b807b1845931" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;icons&lt;/code&gt; list can contain &lt;code&gt;MultiResolutionImage&lt;/code&gt; images also. Suitable image depending on screen resolution is extracted from base &lt;code&gt;MultiResolutionImage&lt;/code&gt; image and added to the icons list while base resolution image is removed from list. The &lt;code&gt;icons&lt;/code&gt; list is scanned for the images of most appropriate dimensions from the beginning. If the list contains several images of the same size, the first will be used.</source>
          <target state="translated">&lt;code&gt;icons&lt;/code&gt; リストが含まれている可能 &lt;code&gt;MultiResolutionImage&lt;/code&gt; のも画像を。画面解像度に応じた適切な画像がベース &lt;code&gt;MultiResolutionImage&lt;/code&gt; 画像から抽出され、アイコンリストに追加され、ベース解像度画像がリストから削除されます。 &lt;code&gt;icons&lt;/code&gt; リストは、最初から最も適切な寸法の画像がスキャンされます。リストに同じサイズの画像が複数含まれている場合は、最初の画像が使用されます。</target>
        </trans-unit>
        <trans-unit id="3a3a03a08373e3a4eb0d5649cfecb26445106e34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;identity&lt;/code&gt; value must be an identity for the accumulator function. This means that for all &lt;code&gt;t&lt;/code&gt;, &lt;code&gt;accumulator.apply(identity, t)&lt;/code&gt; is equal to &lt;code&gt;t&lt;/code&gt;. The &lt;code&gt;accumulator&lt;/code&gt; function must be an &lt;a href=&quot;package-summary#Associativity&quot;&gt;associative&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;identity&lt;/code&gt; 値は、アキュムレータ機能のIDでなければなりません。これは、すべての &lt;code&gt;t&lt;/code&gt; について、 &lt;code&gt;accumulator.apply(identity, t)&lt;/code&gt; が &lt;code&gt;t&lt;/code&gt; に等しいことを意味します。 &lt;code&gt;accumulator&lt;/code&gt; 機能がなければなりません&lt;a href=&quot;package-summary#Associativity&quot;&gt;連想&lt;/a&gt;機能。</target>
        </trans-unit>
        <trans-unit id="15d70cdc09c9191c55557a009f3a78afb163bfc0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;identity&lt;/code&gt; value must be an identity for the accumulator function. This means that for all &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;accumulator.apply(identity, x)&lt;/code&gt; is equal to &lt;code&gt;x&lt;/code&gt;. The &lt;code&gt;accumulator&lt;/code&gt; function must be an &lt;a href=&quot;package-summary#Associativity&quot;&gt;associative&lt;/a&gt; function.</source>
          <target state="translated">&lt;code&gt;identity&lt;/code&gt; 値は、アキュムレータ機能のIDでなければなりません。これは、すべての &lt;code&gt;x&lt;/code&gt; について、 &lt;code&gt;accumulator.apply(identity, x)&lt;/code&gt; が &lt;code&gt;x&lt;/code&gt; に等しいことを意味します。 &lt;code&gt;accumulator&lt;/code&gt; 機能がなければなりません&lt;a href=&quot;package-summary#Associativity&quot;&gt;連想&lt;/a&gt;機能。</target>
        </trans-unit>
        <trans-unit id="c7c434e8ee038c0b3fcfe01a6456babfb2b633e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;identity&lt;/code&gt; value must be an identity for the combiner function. This means that for all &lt;code&gt;u&lt;/code&gt;, &lt;code&gt;combiner(identity, u)&lt;/code&gt; is equal to &lt;code&gt;u&lt;/code&gt;. Additionally, the &lt;code&gt;combiner&lt;/code&gt; function must be compatible with the &lt;code&gt;accumulator&lt;/code&gt; function; for all &lt;code&gt;u&lt;/code&gt; and &lt;code&gt;t&lt;/code&gt;, the following must hold:</source>
          <target state="translated">&lt;code&gt;identity&lt;/code&gt; 値は、コンバイナ機能のIDでなければなりません。これは、すべての &lt;code&gt;u&lt;/code&gt; について、 &lt;code&gt;combiner(identity, u)&lt;/code&gt; が &lt;code&gt;u&lt;/code&gt; に等しいことを意味します。さらに、 &lt;code&gt;combiner&lt;/code&gt; 機能は &lt;code&gt;accumulator&lt;/code&gt; 機能と互換性がなければなりません。すべての &lt;code&gt;u&lt;/code&gt; および &lt;code&gt;t&lt;/code&gt; について、次の条件が満たされている必要があります。</target>
        </trans-unit>
        <trans-unit id="cb7b6822fbfe6353745706addd58f9b58b682324" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ifAddress&lt;/code&gt; argument can be used on a multi-homed host for a &lt;code&gt;ServerSocket&lt;/code&gt; that will only accept connect requests to one of its addresses. If &lt;code&gt;ifAddress&lt;/code&gt; is null, it will accept connections on all local addresses. The socket is configured with the socket options (such as accept timeout) given to this factory.</source>
          <target state="translated">&lt;code&gt;ifAddress&lt;/code&gt; の引数は、マルチホームホスト上で使用することができます &lt;code&gt;ServerSocket&lt;/code&gt; をのみ、そのアドレスの1つに接続要求を受け入れます。 &lt;code&gt;ifAddress&lt;/code&gt; がnullの場合、すべてのローカルアドレスの接続を受け入れます。ソケットは、このファクトリに指定されたソケットオプション（受け入れタイムアウトなど）で構成されます。</target>
        </trans-unit>
        <trans-unit id="9d4aa0ca4766a00288d0853e4d6293a48f65d87d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ignoreMetadata&lt;/code&gt; parameter, if set to &lt;code&gt;true&lt;/code&gt;, allows the reader to disregard any metadata encountered during the read. Subsequent calls to the &lt;code&gt;getStreamMetadata&lt;/code&gt; and &lt;code&gt;getImageMetadata&lt;/code&gt; methods may return &lt;code&gt;null&lt;/code&gt;, and an &lt;code&gt;IIOImage&lt;/code&gt; returned from &lt;code&gt;readAll&lt;/code&gt; may return &lt;code&gt;null&lt;/code&gt; from their &lt;code&gt;getMetadata&lt;/code&gt; method. Setting this parameter may allow the reader to work more efficiently. The reader may choose to disregard this setting and return metadata normally.</source>
          <target state="translated">&lt;code&gt;ignoreMetadata&lt;/code&gt; のパラメータは、に設定されている場合 &lt;code&gt;true&lt;/code&gt; 、リーダーが読み取り中に発生したメタデータを無視することができます。 &lt;code&gt;getStreamMetadata&lt;/code&gt; メソッドと &lt;code&gt;getImageMetadata&lt;/code&gt; メソッドへの後続の呼び出しは &lt;code&gt;null&lt;/code&gt; を返し、 &lt;code&gt;readAll&lt;/code&gt; から返された &lt;code&gt;IIOImage&lt;/code&gt; は &lt;code&gt;getMetadata&lt;/code&gt; メソッドから &lt;code&gt;null&lt;/code&gt; を返す場合があります。このパラメーターを設定すると、リーダーがより効率的に動作できるようになります。読者はこの設定を無視して、通常どおりメタデータを返すことを選択できます。</target>
        </trans-unit>
        <trans-unit id="74a61b8b43c5d10d1b00563be9b1b6cef6be194e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;imageUpdate&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt; incrementally draws an image on the component as more of the bits of the image are available.</source>
          <target state="translated">&lt;code&gt;Component&lt;/code&gt; の &lt;code&gt;imageUpdate&lt;/code&gt; メソッドは、イメージのより多くのビットが使用可能になると、コンポーネント上にイメージを段階的に描画します。</target>
        </trans-unit>
        <trans-unit id="fd6a40388fc0550eb7dfd1739f418989dfe9f308" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;implies&lt;/code&gt; method is used by the AccessController to determine whether or not a requested permission is implied by another permission that is known to be valid in the current execution context.</source>
          <target state="translated">&lt;code&gt;implies&lt;/code&gt; 方法が要求された許可は、現在の実行コンテキストで有効であることが知られている別の許可によって暗示されているか否かを判断するためにAccessControllerによって使用されます。</target>
        </trans-unit>
        <trans-unit id="99323cb09ca7a1b5b3ed49e52564ae4467d979f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;inactiveObject&lt;/code&gt; call informs the &lt;code&gt;ActivationMonitor&lt;/code&gt; that the remote object reference it holds for the object with the activation identifier, &lt;code&gt;id&lt;/code&gt;, is no longer valid. The monitor considers the reference associated with &lt;code&gt;id&lt;/code&gt; as a stale reference. Since the reference is considered stale, a subsequent &lt;code&gt;activate&lt;/code&gt; call for the same activation identifier results in re-activating the remote object.</source>
          <target state="translated">&lt;code&gt;inactiveObject&lt;/code&gt; のコール知らせる &lt;code&gt;ActivationMonitor&lt;/code&gt; にリモートオブジェクト参照が起動識別子を持つオブジェクトに当てはまることは、 &lt;code&gt;id&lt;/code&gt; 、もはや有効ではありません。モニターは、 &lt;code&gt;id&lt;/code&gt; に関連付けられた参照を古い参照と見なします。参照は古くなっていると見なさ &lt;code&gt;activate&lt;/code&gt; ため、同じアクティブ化識別子に対する後続のアクティブ化呼び出しにより、リモートオブジェクトが再アクティブ化されます。</target>
        </trans-unit>
        <trans-unit id="dc20171b44b44f5f3758ac37b7d5a7ded6f19e83" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index&lt;/code&gt; is defined to be out of bounds if any of the following inequalities is true:</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; 、以下の不等式のいずれかに該当する場合範囲外になるように定義されています。</target>
        </trans-unit>
        <trans-unit id="5f5eaf7ade6f853439e4b56543435a4f43f085fc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index&lt;/code&gt; parameter is the index of the name element to return. The element that is &lt;em&gt;closest&lt;/em&gt; to the root in the directory hierarchy has index &lt;code&gt;0&lt;/code&gt;. The element that is &lt;em&gt;farthest&lt;/em&gt; from the root has index &lt;a href=&quot;#getNameCount()&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; パラメータは、リターンにname要素のインデックスです。ディレクトリ階層のルートに&lt;em&gt;最も近い&lt;/em&gt;要素のインデックスは &lt;code&gt;0&lt;/code&gt; です。ルートから&lt;em&gt;最も遠い&lt;/em&gt;要素のインデックス&lt;a href=&quot;#getNameCount()&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; &lt;code&gt;-1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="64642e3202227bf1eb96b4d1dcff39ebc286b611" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index&lt;/code&gt; parameter is the index of the name element to return. The element that is &lt;em&gt;closest&lt;/em&gt; to the root in the directory hierarchy has index &lt;code&gt;0&lt;/code&gt;. The element that is &lt;em&gt;farthest&lt;/em&gt; from the root has index &lt;a href=&quot;path#getNameCount--&quot;&gt;&lt;code&gt;count&lt;/code&gt;&lt;/a&gt;&lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; パラメータは、リターンにname要素のインデックスです。ディレクトリ階層のルートに&lt;em&gt;最も近い&lt;/em&gt;要素のインデックスは &lt;code&gt;0&lt;/code&gt; です。ルートから&lt;em&gt;最も遠い&lt;/em&gt;要素のインデックス&lt;a href=&quot;path#getNameCount--&quot;&gt; &lt;code&gt;count&lt;/code&gt; &lt;/a&gt; &lt;code&gt;-1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8ba30d2da47964c5ec7ffd415d13cac0e4683bed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;infoflags&lt;/code&gt; argument should be the bitwise inclusive &lt;b&gt;OR&lt;/b&gt; of the following flags: &lt;code&gt;WIDTH&lt;/code&gt;, &lt;code&gt;HEIGHT&lt;/code&gt;, &lt;code&gt;PROPERTIES&lt;/code&gt;, &lt;code&gt;SOMEBITS&lt;/code&gt;, &lt;code&gt;FRAMEBITS&lt;/code&gt;, &lt;code&gt;ALLBITS&lt;/code&gt;, &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;ABORT&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;infoflags&lt;/code&gt; の引数は、ビット単位の包含的であるべき&lt;b&gt;OR&lt;/b&gt;：以下のフラグの &lt;code&gt;WIDTH&lt;/code&gt; 、 &lt;code&gt;HEIGHT&lt;/code&gt; 、 &lt;code&gt;PROPERTIES&lt;/code&gt; 、 &lt;code&gt;SOMEBITS&lt;/code&gt; 、 &lt;code&gt;FRAMEBITS&lt;/code&gt; 、 &lt;code&gt;ALLBITS&lt;/code&gt; 、 &lt;code&gt;ERROR&lt;/code&gt; 、 &lt;code&gt;ABORT&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd34925c76b9aa7f124b7924e51f96a4065ec4cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init&lt;/code&gt; handle describes the initial value of an additional optional loop-local variable. In each iteration, this loop-local variable, if present, will be passed to the &lt;code&gt;body&lt;/code&gt; and updated with the value returned from its invocation. The result of loop execution will be the final value of the additional loop-local variable (if present).</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; ハンドルは、追加オプションのループローカル変数の初期値を記述する。各反復で、このループローカル変数が存在する場合は、 &lt;code&gt;body&lt;/code&gt; 渡され、呼び出しから返された値で更新されます。ループ実行の結果は、追加のループローカル変数（存在する場合）の最終値になります。</target>
        </trans-unit>
        <trans-unit id="a4d191b328a1c5a3fb19ebaef345b041450f0653" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initEvent&lt;/code&gt; method is used to initialize the value of an &lt;code&gt;Event&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;initEvent&lt;/code&gt; 方法は、以下の値を初期化するために使用される &lt;code&gt;Event&lt;/code&gt; を介して作成 &lt;code&gt;DocumentEvent&lt;/code&gt; インターフェイスを。</target>
        </trans-unit>
        <trans-unit id="e980ab2973cbdf463d4df8c8ce1591af9572002f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initEvent&lt;/code&gt; method is used to initialize the value of an &lt;code&gt;Event&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface. This method may only be called before the &lt;code&gt;Event&lt;/code&gt; has been dispatched via the &lt;code&gt;dispatchEvent&lt;/code&gt; method, though it may be called multiple times during that phase if necessary. If called multiple times the final invocation takes precedence. If called from a subclass of &lt;code&gt;Event&lt;/code&gt; interface only the values specified in the &lt;code&gt;initEvent&lt;/code&gt; method are modified, all other attributes are left unchanged.</source>
          <target state="translated">&lt;code&gt;initEvent&lt;/code&gt; 方法は、以下の値を初期化するために使用される &lt;code&gt;Event&lt;/code&gt; を介して作成 &lt;code&gt;DocumentEvent&lt;/code&gt; インターフェイスを。このメソッドは、 &lt;code&gt;dispatchEvent&lt;/code&gt; メソッドを介して &lt;code&gt;Event&lt;/code&gt; がディスパッチされる前にのみ呼び出すことができますが、必要に応じて、そのフェーズ中に複数回呼び出すことができます。複数回呼び出された場合、最後の呼び出しが優先されます。 &lt;code&gt;Event&lt;/code&gt; インターフェイスのサブクラスから呼び出された場合、 &lt;code&gt;initEvent&lt;/code&gt; メソッドで指定された値のみが変更され、他のすべての属性は変更されません。</target>
        </trans-unit>
        <trans-unit id="2e79e9c0595f3db6eb879c2cd4bff42c0c8821e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initMouseEvent&lt;/code&gt; method is used to initialize the value of a &lt;code&gt;MouseEvent&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;initMouseEvent&lt;/code&gt; 方法は、以下の値を初期化するために使用され &lt;code&gt;MouseEvent&lt;/code&gt; を介して作成され &lt;code&gt;DocumentEvent&lt;/code&gt; インターフェイスを。</target>
        </trans-unit>
        <trans-unit id="fbeef5c0517fc941e5840401645ff8bb1740d90c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initMouseEvent&lt;/code&gt; method is used to initialize the value of a &lt;code&gt;MouseEvent&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface. This method may only be called before the &lt;code&gt;MouseEvent&lt;/code&gt; has been dispatched via the &lt;code&gt;dispatchEvent&lt;/code&gt; method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence.</source>
          <target state="translated">&lt;code&gt;initMouseEvent&lt;/code&gt; 方法は、以下の値を初期化するために使用され &lt;code&gt;MouseEvent&lt;/code&gt; を介して作成され &lt;code&gt;DocumentEvent&lt;/code&gt; インターフェイスを。このメソッドは、 &lt;code&gt;MouseEvent&lt;/code&gt; が &lt;code&gt;dispatchEvent&lt;/code&gt; メソッドを介してディスパッチされる前にのみ呼び出すことができますが、必要に応じて、そのフェーズ中に複数回呼び出すことができます。複数回呼び出された場合は、最後の呼び出しが優先されます。</target>
        </trans-unit>
        <trans-unit id="625a8b0abe6c5b47d1eefb61955bc931458fce29" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initMutationEvent&lt;/code&gt; method is used to initialize the value of a &lt;code&gt;MutationEvent&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;initMutationEvent&lt;/code&gt; 方法は、以下の値を初期化するために使用され &lt;code&gt;MutationEvent&lt;/code&gt; 介して作成 &lt;code&gt;DocumentEvent&lt;/code&gt; インターフェイスを。</target>
        </trans-unit>
        <trans-unit id="254b29b2d9aabd1ae0ea96ab048a74c10af149c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initMutationEvent&lt;/code&gt; method is used to initialize the value of a &lt;code&gt;MutationEvent&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface. This method may only be called before the &lt;code&gt;MutationEvent&lt;/code&gt; has been dispatched via the &lt;code&gt;dispatchEvent&lt;/code&gt; method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence.</source>
          <target state="translated">&lt;code&gt;initMutationEvent&lt;/code&gt; 方法は、以下の値を初期化するために使用され &lt;code&gt;MutationEvent&lt;/code&gt; 介して作成 &lt;code&gt;DocumentEvent&lt;/code&gt; インターフェイスを。このメソッドは、 &lt;code&gt;MutationEvent&lt;/code&gt; が &lt;code&gt;dispatchEvent&lt;/code&gt; メソッドを介してディスパッチされる前にのみ呼び出すことができますが、必要に応じて、そのフェーズ中に複数回呼び出すことができます。複数回呼び出された場合は、最後の呼び出しが優先されます。</target>
        </trans-unit>
        <trans-unit id="0031ccc968fa433b9c0ee69137ad1acff5549339" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initUIEvent&lt;/code&gt; method is used to initialize the value of a &lt;code&gt;UIEvent&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;initUIEvent&lt;/code&gt; の方法は、の値を初期化するために使用され &lt;code&gt;UIEvent&lt;/code&gt; を介して作成 &lt;code&gt;DocumentEvent&lt;/code&gt; インターフェイスを。</target>
        </trans-unit>
        <trans-unit id="f5e2a52bd2dedb43955ead95d35976c3258ced77" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initUIEvent&lt;/code&gt; method is used to initialize the value of a &lt;code&gt;UIEvent&lt;/code&gt; created through the &lt;code&gt;DocumentEvent&lt;/code&gt; interface. This method may only be called before the &lt;code&gt;UIEvent&lt;/code&gt; has been dispatched via the &lt;code&gt;dispatchEvent&lt;/code&gt; method, though it may be called multiple times during that phase if necessary. If called multiple times, the final invocation takes precedence.</source>
          <target state="translated">&lt;code&gt;initUIEvent&lt;/code&gt; の方法は、の値を初期化するために使用され &lt;code&gt;UIEvent&lt;/code&gt; を介して作成 &lt;code&gt;DocumentEvent&lt;/code&gt; インターフェイスを。このメソッドは、 &lt;code&gt;UIEvent&lt;/code&gt; が &lt;code&gt;dispatchEvent&lt;/code&gt; メソッドを介してディスパッチされる前にのみ呼び出すことができますが、必要に応じて、そのフェーズ中に複数回呼び出すことができます。複数回呼び出された場合は、最後の呼び出しが優先されます。</target>
        </trans-unit>
        <trans-unit id="178fa46f7783f7ca8be10feb795a8f432e6ce094" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialSize&lt;/code&gt; parameter may be used by the implementation as a &lt;em&gt;hint&lt;/em&gt; as to the initial number of tasks it may submit. For example, it may be used to indicate the initial number of threads that wait on I/O events.</source>
          <target state="translated">&lt;code&gt;initialSize&lt;/code&gt; パラメータは、として実装で使用することができる&lt;em&gt;ヒント&lt;/em&gt;それが提出することができるタスクの初期数について。たとえば、I / Oイベントを待機するスレッドの初期数を示すために使用できます。</target>
        </trans-unit>
        <trans-unit id="1bd09b116084a74e12383d4253d1c5f87a806306" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialize&lt;/code&gt; methods may each be called any number of times. If no &lt;code&gt;initialize&lt;/code&gt; method is called on a DSAKeyPairGenerator, each provider that implements this interface should supply (and document) a default initialization. Note that defaults may vary across different providers. Additionally, the default value for a provider may change in a future version. Therefore, it is recommended to explicitly initialize the DSAKeyPairGenerator instead of relying on provider-specific defaults.</source>
          <target state="translated">&lt;code&gt;initialize&lt;/code&gt; 方法は、それぞれ何回でも呼び出すことができます。DSAKeyPairGeneratorで &lt;code&gt;initialize&lt;/code&gt; メソッドが呼び出されない場合、このインターフェイスを実装する各プロバイダーは、デフォルトの初期化を提供（および文書化）する必要があります。デフォルトはプロバイダーによって異なる場合があることに注意してください。さらに、プロバイダーのデフォルト値は将来のバージョンで変更される可能性があります。したがって、プロバイダー固有のデフォルトに依存するのではなく、DSAKeyPairGeneratorを明示的に初期化することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="8e1910412b5ab4f4360c75fcf4e4c4f981f39033" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;initialize&lt;/code&gt; methods may each be called any number of times. If no &lt;code&gt;initialize&lt;/code&gt; method is called on a DSAKeyPairGenerator, the default is to generate 1024-bit keys, using precomputed p, q and g parameters and an instance of SecureRandom as the random bit source.</source>
          <target state="translated">&lt;code&gt;initialize&lt;/code&gt; 方法は、それぞれ何回でも呼び出すことができます。DSAKeyPairGeneratorで &lt;code&gt;initialize&lt;/code&gt; メソッドが呼び出されない場合、デフォルトでは、事前計算されたp、q、gパラメーターと、ランダムビットソースとしてSecureRandomのインスタンスを使用して、1024ビットの鍵が生成されます。</target>
        </trans-unit>
        <trans-unit id="e89c947619670b6f05ed77c9eb43708ff984ab4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;abstract&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;abstract&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="57a2bf2f87f99f529f820792d0d9541859c36200" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;final&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;final&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="b83b91795fa9f3dd467562df8b850ad43ca35b18" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;interface&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;interface&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="6e6129e278d1c31b1641cf76868b23a7ccbc053b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;native&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;native&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="9487f7c45da0d56c561a74e7e315aad283ae33db" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;private&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;private&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="d998015ddde224da2f2e242d06b1b5cda8342b93" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;protected&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の表す値 &lt;code&gt;protected&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="1ab9b738d34103d531a4ba5cdf4833da76ab4445" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;public&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;public&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="cb450909d14452e1607d3359ccbe310b15e65773" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;static&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;static&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="e48ba12a5c869896a959b271934ece28496f4515" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;strictfp&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;strictfp&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="ab15ce0d3f3e80624e13e8b8f7afdae7f2cc31b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;synchronized&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;synchronized&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="47c273abe027c89df6d6ce37e4c65a5d5f445ccc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;transient&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;transient&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="75d6fc286ca2b46ac7f2dfbb0cff289b6c5d7d46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;int&lt;/code&gt; value representing the &lt;code&gt;volatile&lt;/code&gt; modifier.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の代表値 &lt;code&gt;volatile&lt;/code&gt; 修飾子を。</target>
        </trans-unit>
        <trans-unit id="cfd98033227ef6b3a7f984e0cf8a786a155a86aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;interface&lt;/code&gt; modifier discussed in this class is not a true modifier in the Java language and it appears after all other modifiers listed by this method. This method may return a string of modifiers that are not valid modifiers of a Java entity; in other words, no checking is done on the possible validity of the combination of modifiers represented by the input. Note that to perform such checking for a known kind of entity, such as a constructor or method, first AND the argument of &lt;code&gt;toString&lt;/code&gt; with the appropriate mask from a method like &lt;a href=&quot;#constructorModifiers()&quot;&gt;&lt;code&gt;constructorModifiers()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#methodModifiers()&quot;&gt;&lt;code&gt;methodModifiers()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;interface&lt;/code&gt; このクラスで議論修飾子は、Java言語での真の修飾ではありません、それはこの方法で記載されている他のすべての修飾子の後に表示されます。このメソッドは、Javaエンティティの有効な修飾子ではない修飾子の文字列を返す場合があります。言い換えると、入力によって表される修飾子の組み合わせの有効性の可能性についてはチェックが行われません。コンストラクタやメソッドなどの既知の種類のエンティティに対してこのようなチェックを実行するには、最初に &lt;code&gt;toString&lt;/code&gt; の引数と&lt;a href=&quot;#constructorModifiers()&quot;&gt; &lt;code&gt;constructorModifiers()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;#methodModifiers()&quot;&gt; &lt;code&gt;methodModifiers()&lt;/code&gt; &lt;/a&gt;などのメソッドからの適切なマスクをANDします。</target>
        </trans-unit>
        <trans-unit id="cfcd94506157aeb895a9c9c21b22d64a6d79a08a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;interface&lt;/code&gt; modifier discussed in this class is not a true modifier in the Java language and it appears after all other modifiers listed by this method. This method may return a string of modifiers that are not valid modifiers of a Java entity; in other words, no checking is done on the possible validity of the combination of modifiers represented by the input. Note that to perform such checking for a known kind of entity, such as a constructor or method, first AND the argument of &lt;code&gt;toString&lt;/code&gt; with the appropriate mask from a method like &lt;a href=&quot;modifier#constructorModifiers--&quot;&gt;&lt;code&gt;constructorModifiers()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;modifier#methodModifiers--&quot;&gt;&lt;code&gt;methodModifiers()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;interface&lt;/code&gt; このクラスで議論修飾子は、Java言語での真の修飾ではありません、それはこの方法で記載されている他のすべての修飾子の後に表示されます。このメソッドは、Javaエンティティの有効な修飾子ではない修飾子の文字列を返す場合があります。つまり、入力によって表される修飾子の組み合わせの有効性のチェックは行われません。コンストラクタやメソッドなどの既知の種類のエンティティに対してこのようなチェックを実行するには、最初に、 &lt;code&gt;toString&lt;/code&gt; の引数と、&lt;a href=&quot;modifier#constructorModifiers--&quot;&gt; &lt;code&gt;constructorModifiers()&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;modifier#methodModifiers--&quot;&gt; &lt;code&gt;methodModifiers()&lt;/code&gt; &lt;/a&gt;などのメソッドからの適切なマスクをANDで結合します。</target>
        </trans-unit>
        <trans-unit id="58627a573928318b0e86229e8345a42317bf4581" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;invokedynamic&lt;/code&gt; instruction makes use of bootstrap &lt;code&gt;MethodHandle&lt;/code&gt; constants to dynamically resolve &lt;code&gt;CallSite&lt;/code&gt; objects for custom method invocation behavior.</source>
          <target state="translated">&lt;code&gt;invokedynamic&lt;/code&gt; の命令は、ブートストラップを使用します &lt;code&gt;MethodHandle&lt;/code&gt; 定数を動的に解決するために &lt;code&gt;CallSite&lt;/code&gt; カスタムメソッド呼び出しの動作のためのオブジェクト。</target>
        </trans-unit>
        <trans-unit id="665a37a65bad1ed4e2e3237e067bfa95f31eb667" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isContainer&lt;/code&gt;&lt;a href=&quot;../../java/beans/featuredescriptor#getValue(java.lang.String)&quot;&gt;&lt;code&gt;feature attribute&lt;/code&gt;&lt;/a&gt; was introduced primarily for the Swing library. All Swing components extend the &lt;a href=&quot;../../java/awt/container&quot;&gt;&lt;code&gt;Container&lt;/code&gt;&lt;/a&gt; class by design, so the builder tool assumes that all Swing components are containers. The &lt;a href=&quot;../../java/beans/beaninfo&quot;&gt;&lt;code&gt;BeanInfo&lt;/code&gt;&lt;/a&gt; classes with the &lt;code&gt;isContainer&lt;/code&gt; attribute allow to directly specify whether a Swing component is a container or not.</source>
          <target state="translated">&lt;code&gt;isContainer&lt;/code&gt; の&lt;a href=&quot;../../java/beans/featuredescriptor#getValue(java.lang.String)&quot;&gt; &lt;code&gt;feature attribute&lt;/code&gt; &lt;/a&gt;、主にSwingライブラリのために導入されました。すべてのSwingコンポーネントは設計により&lt;a href=&quot;../../java/awt/container&quot;&gt; &lt;code&gt;Container&lt;/code&gt; &lt;/a&gt;クラスを拡張するため、ビルダーツールはすべてのSwingコンポーネントがコンテナーであると想定します。&lt;a href=&quot;../../java/beans/beaninfo&quot;&gt; &lt;code&gt;BeanInfo&lt;/code&gt; &lt;/a&gt;を持つクラス &lt;code&gt;isContainer&lt;/code&gt; の属性は、直接、Swingコンポーネントがコンテナであるかどうかを指定することができます。</target>
        </trans-unit>
        <trans-unit id="fbbe4efb7b82c12416112b91d882adb2461b3096" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isEnabled&lt;/code&gt; method</source>
          <target state="translated">&lt;code&gt;isEnabled&lt;/code&gt; 方法</target>
        </trans-unit>
        <trans-unit id="f254cbd5db1e9d15f5755ade659caa4db237d900" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;isMixerSupported&lt;/code&gt; method returns &lt;code&gt;true&lt;/code&gt; for all the info objects returned by this method. The corresponding mixer instances for the info objects are returned by the &lt;code&gt;getMixer&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;isMixerSupported&lt;/code&gt; のメソッドが返す &lt;code&gt;true&lt;/code&gt; すべての情報については、このメソッドによって返されるオブジェクト。infoオブジェクトに対応するミキサーインスタンスは、 &lt;code&gt;getMixer&lt;/code&gt; メソッドによって返されます。</target>
        </trans-unit>
        <trans-unit id="cc647a7047b23398301d649428d6203301b91e91" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;iterations&lt;/code&gt; handle must not be &lt;code&gt;null&lt;/code&gt;, and must return the type &lt;code&gt;int&lt;/code&gt;, referred to here as &lt;code&gt;I&lt;/code&gt; in parameter type lists.</source>
          <target state="translated">&lt;code&gt;iterations&lt;/code&gt; ハンドルがあってはならない &lt;code&gt;null&lt;/code&gt; 、および型を返す必要があります &lt;code&gt;int&lt;/code&gt; 型を、とここでいう &lt;code&gt;I&lt;/code&gt; パラメータ型リストに。</target>
        </trans-unit>
        <trans-unit id="faab6cad1b99da33b71348933be79609cd1c2d1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.awt.TextArea&lt;/code&gt; could be monitored for changes by adding a &lt;code&gt;TextListener&lt;/code&gt; for &lt;code&gt;TextEvent&lt;/code&gt;s. In the &lt;code&gt;JTextComponent&lt;/code&gt; based components, changes are broadcasted from the model via a &lt;code&gt;DocumentEvent&lt;/code&gt; to &lt;code&gt;DocumentListeners&lt;/code&gt;. The &lt;code&gt;DocumentEvent&lt;/code&gt; gives the location of the change and the kind of change if desired. The code fragment might look something like:</source>
          <target state="translated">&lt;code&gt;TextEvent&lt;/code&gt; の &lt;code&gt;TextListener&lt;/code&gt; を追加することにより、 &lt;code&gt;java.awt.TextArea&lt;/code&gt; の変更を監視できます。 &lt;code&gt;JTextComponent&lt;/code&gt; ベースのコンポーネント、変更を介してモデルから放送される &lt;code&gt;DocumentEvent&lt;/code&gt; をする &lt;code&gt;DocumentListeners&lt;/code&gt; 。 &lt;code&gt;DocumentEvent&lt;/code&gt; 変化し、所望であれば、変化の種類の場所を与えます。コードフラグメントは次のようになります。</target>
        </trans-unit>
        <trans-unit id="55efcc9383d4d056ce334accbd6b2bac39494936" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.awt.TextArea&lt;/code&gt; has the ability to do line wrapping. This was controlled by the horizontal scrolling policy. Since scrolling is not done by &lt;code&gt;JTextArea&lt;/code&gt; directly, backward compatibility must be provided another way. &lt;code&gt;JTextArea&lt;/code&gt; has a bound property for line wrapping that controls whether or not it will wrap lines. By default, the line wrapping property is set to false (not wrapped).</source>
          <target state="translated">&lt;code&gt;java.awt.TextArea&lt;/code&gt; のは、行の折り返しを行う能力を持っています。これは、水平スクロールポリシーによって制御されていました。スクロールは &lt;code&gt;JTextArea&lt;/code&gt; によって直接行われないため、下位互換性を別の方法で提供する必要があります。 &lt;code&gt;JTextArea&lt;/code&gt; には、行を折り返すかどうかを制御する行折り返しのバインドされたプロパティがあります。デフォルトでは、行の折り返しプロパティはfalse（折り返されていません）に設定されています。</target>
        </trans-unit>
        <trans-unit id="c0fcfe43cbce6a18be4a70c21673c0e92d35fccc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.awt.TextArea&lt;/code&gt; internally handles scrolling. &lt;code&gt;JTextArea&lt;/code&gt; is different in that it doesn't manage scrolling, but implements the swing &lt;code&gt;Scrollable&lt;/code&gt; interface. This allows it to be placed inside a &lt;code&gt;JScrollPane&lt;/code&gt; if scrolling behavior is desired, and used directly if scrolling is not desired.</source>
          <target state="translated">&lt;code&gt;java.awt.TextArea&lt;/code&gt; のは、内部でスクロール処理します。 &lt;code&gt;JTextArea&lt;/code&gt; は、スクロールを管理しないという点で異なりますが、 &lt;code&gt;Scrollable&lt;/code&gt; インターフェイスを実装します。これにより、スクロール動作が必要な場合は &lt;code&gt;JScrollPane&lt;/code&gt; 内に配置でき、スクロールが不要な場合は直接使用できます。</target>
        </trans-unit>
        <trans-unit id="0db34ffc0a9406c8096ce234b9fa75533ba4eff0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.awt.TextField&lt;/code&gt; could be monitored for changes by adding a &lt;code&gt;TextListener&lt;/code&gt; for &lt;code&gt;TextEvent&lt;/code&gt;'s. In the &lt;code&gt;JTextComponent&lt;/code&gt; based components, changes are broadcasted from the model via a &lt;code&gt;DocumentEvent&lt;/code&gt; to &lt;code&gt;DocumentListeners&lt;/code&gt;. The &lt;code&gt;DocumentEvent&lt;/code&gt; gives the location of the change and the kind of change if desired. The code fragment might look something like:</source>
          <target state="translated">&lt;code&gt;TextEvent&lt;/code&gt; の &lt;code&gt;TextListener&lt;/code&gt; を追加することにより、 &lt;code&gt;java.awt.TextField&lt;/code&gt; の変更を監視できます。 &lt;code&gt;JTextComponent&lt;/code&gt; ベースのコンポーネント、変更を介してモデルから放送される &lt;code&gt;DocumentEvent&lt;/code&gt; をする &lt;code&gt;DocumentListeners&lt;/code&gt; 。 &lt;code&gt;DocumentEvent&lt;/code&gt; 変化し、所望であれば、変化の種類の場所を与えます。コードフラグメントは次のようになります。</target>
        </trans-unit>
        <trans-unit id="bec8b9be4298b00c09430efa2b0f3eff6e4f2e07" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.lang.invoke&lt;/code&gt; package contains dynamic language support provided directly by the Java core class libraries and virtual machine.</source>
          <target state="translated">&lt;code&gt;java.lang.invoke&lt;/code&gt; のパッケージには、Javaのコア・クラス・ライブラリおよび仮想マシンによって直接提供される動的言語サポートが含まれています。</target>
        </trans-unit>
        <trans-unit id="b0a41816ff2f5ea5a0a95f8f418989d42132101f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.lang.invoke&lt;/code&gt; package provides low-level primitives for interacting with the Java Virtual Machine.</source>
          <target state="translated">&lt;code&gt;java.lang.invoke&lt;/code&gt; のパッケージには、Java仮想マシンと対話するための低レベルプリミティブを提供します。</target>
        </trans-unit>
        <trans-unit id="e2e6b7ef82a944f100ddc377e04a645035f44c50" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.nio&lt;/code&gt; package defines the buffer classes, which are used throughout the NIO APIs. The charset API is defined in the &lt;a href=&quot;charset/package-summary&quot;&gt;&lt;code&gt;java.nio.charset&lt;/code&gt;&lt;/a&gt; package, and the channel and selector APIs are defined in the &lt;a href=&quot;channels/package-summary&quot;&gt;&lt;code&gt;java.nio.channels&lt;/code&gt;&lt;/a&gt; package. Each of these subpackages has its own service-provider (SPI) subpackage, the contents of which can be used to extend the platform's default implementations or to construct alternative implementations.</source>
          <target state="translated">&lt;code&gt;java.nio&lt;/code&gt; でのパッケージは、NIO APIの全体で使用されるバッファクラスを定義しています。 charset APIは&lt;a href=&quot;charset/package-summary&quot;&gt; &lt;code&gt;java.nio.charset&lt;/code&gt; &lt;/a&gt;パッケージで定義されており、チャネルおよびセレクターAPIは&lt;a href=&quot;channels/package-summary&quot;&gt; &lt;code&gt;java.nio.channels&lt;/code&gt; &lt;/a&gt;パッケージで定義されています。これらの各サブパッケージには、独自のサービスプロバイダー（SPI）サブパッケージがあり、その内容を使用して、プラットフォームのデフォルト実装を拡張したり、代替実装を構築したりできます。</target>
        </trans-unit>
        <trans-unit id="169158b25e43c0b1b051996b7d7ecf8990270082" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.security.ProtectionDomain&lt;/code&gt; of a proxy class is the same as that of system classes loaded by the bootstrap class loader, such as &lt;code&gt;java.lang.Object&lt;/code&gt;, because the code for a proxy class is generated by trusted system code. This protection domain will typically be granted &lt;code&gt;java.security.AllPermission&lt;/code&gt;.</source>
          <target state="translated">プロキシクラスのコードは信頼できるシステムコードによって生成されるため、プロキシクラスの &lt;code&gt;java.security.ProtectionDomain&lt;/code&gt; は、ブートストラップクラスローダーによってロードされたシステムクラス（ &lt;code&gt;java.lang.Object&lt;/code&gt; など）と同じです。この保護ドメインには通常、 &lt;code&gt;java.security.AllPermission&lt;/code&gt; が付与されます。</target>
        </trans-unit>
        <trans-unit id="9813f685206a1823081b6d834a2cc39d317ab3f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.security.acl &lt;/code&gt; package provides the interfaces to the ACL and related data structures (ACL entries, groups, permissions, etc.), and the &lt;code&gt;sun.security.acl &lt;/code&gt; classes provide a default implementation of the interfaces. For example, &lt;code&gt;java.security.acl.Acl &lt;/code&gt; provides the interface to an ACL and the &lt;code&gt;sun.security.acl.AclImpl &lt;/code&gt; class provides the default implementation of the interface.</source>
          <target state="translated">&lt;code&gt;java.security.acl &lt;/code&gt; パッケージは、ACLと関連するデータ構造へのインターフェイス（ACLエントリ、グループ、アクセス権など）を提供し、 &lt;code&gt;sun.security.acl &lt;/code&gt; クラスは、インターフェイスのデフォルトの実装を提供します。たとえば、 &lt;code&gt;java.security.acl.Acl &lt;/code&gt; はACLへのインタフェースを提供し、 &lt;code&gt;sun.security.acl.AclImpl &lt;/code&gt; クラスはインタフェースのデフォルトの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="cfb4c2fdc7d8d17ba626b9a63de7a2721320820c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.security.acl.Acl &lt;/code&gt; interface extends the &lt;code&gt;java.security.acl.Owner &lt;/code&gt; interface. The Owner interface is used to maintain a list of owners for each ACL. Only owners are allowed to modify an ACL. For example, only an owner can call the ACL's &lt;code&gt;addEntry&lt;/code&gt; method to add a new ACL entry to the ACL.</source>
          <target state="translated">&lt;code&gt;java.security.acl.Acl &lt;/code&gt; のインターフェイスを拡張し &lt;code&gt;java.security.acl.Owner &lt;/code&gt; のインターフェイスを。オーナーインターフェイスは、各ACLのオーナーのリストを維持するために使用されます。所有者のみがACLを変更できます。たとえば、所有者だけがACLの &lt;code&gt;addEntry&lt;/code&gt; メソッドを呼び出して、ACLに新しいACLエントリを追加できます。</target>
        </trans-unit>
        <trans-unit id="784b90ba50939cbb669846b289f22423e455bd4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.sql&lt;/code&gt; package contains API for the following:</source>
          <target state="translated">&lt;code&gt;java.sql&lt;/code&gt; パッケージには、次のAPIが含まれています。</target>
        </trans-unit>
        <trans-unit id="c584f80333ee86bf0587299c7f49da992c3a95b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;java.time.chrono&lt;/code&gt; package contains the calendar neutral API &lt;a href=&quot;chrono/chronolocaldate&quot;&gt;&lt;code&gt;ChronoLocalDate&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;chrono/chronolocaldatetime&quot;&gt;&lt;code&gt;ChronoLocalDateTime&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;chrono/chronozoneddatetime&quot;&gt;&lt;code&gt;ChronoZonedDateTime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;chrono/era&quot;&gt;&lt;code&gt;Era&lt;/code&gt;&lt;/a&gt;. This is intended for use by applications that need to use localized calendars. It is recommended that applications use the ISO-8601 date and time classes from this package across system boundaries, such as to the database or across the network. The calendar neutral API should be reserved for interactions with users.</source>
          <target state="translated">&lt;code&gt;java.time.chrono&lt;/code&gt; のパッケージには、カレンダー中立APIが含まれ&lt;a href=&quot;chrono/chronolocaldate&quot;&gt; &lt;code&gt;ChronoLocalDate&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;chrono/chronolocaldatetime&quot;&gt; &lt;code&gt;ChronoLocalDateTime&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;chrono/chronozoneddatetime&quot;&gt; &lt;code&gt;ChronoZonedDateTime&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;chrono/era&quot;&gt; &lt;code&gt;Era&lt;/code&gt; &lt;/a&gt;。これは、ローカライズされたカレンダーを使用する必要があるアプリケーションでの使用を目的としています。アプリケーションは、データベースやネットワークなどのシステム境界を越えて、このパッケージのISO-8601日時クラスを使用することをお勧めします。カレンダーニュートラルAPIは、ユーザーとのやり取りのために予約する必要があります。</target>
        </trans-unit>
        <trans-unit id="dd3f9283b71471748cf9a84dacce07bc07e230bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.imageio.spi&lt;/code&gt; package contains service provider interfaces for reading, writing, and transcoding images, and obtaining image input and output streams, as well as a run-time registry that discovers installed instances of Image I/O service providers and allows new instances to be registered dynamically.</source>
          <target state="translated">&lt;code&gt;javax.imageio.spi&lt;/code&gt; パッケージには、イメージの読み取り、書き込み、トランスコード、イメージの入力ストリームと出力ストリームの取得のためのサービスプロバイダーインターフェイスと、インストールされているイメージI / Oサービスプロバイダーのインスタンスを検出して新しいものを許可するランタイムレジストリが含まれています。動的に登録されるインスタンス。</target>
        </trans-unit>
        <trans-unit id="31f5723f716d2e10c3dc95d349885c1c4063b2cb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.imageio.spi&lt;/code&gt; package contains service provider interfaces for reading, writing, and transcoding images, and obtaining input and output streams, as well as a run-time registry that discovers installed service provider instances and allows new instances to be registered dynamically.</source>
          <target state="translated">&lt;code&gt;javax.imageio.spi&lt;/code&gt; パッケージには、イメージの読み取り、書き込み、トランスコード、入力ストリームと出力ストリームの取得のためのサービスプロバイダーインターフェイス、およびインストールされたサービスプロバイダーインスタンスを検出して新しいインスタンスを動的に登録できるランタイムレジストリが含まれています。</target>
        </trans-unit>
        <trans-unit id="2f9893bf2cb21c5852d399c228329581eed4bc85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.print.attribute&lt;/code&gt; package describes the types of attributes and how they can be collected into sets. The &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; package enumerates all of the standard attributes supported by the API, most of which are implementations of attributes specified in the IETF Specification, &lt;a href=&quot;http://www.ietf.org/rfc/rfc2911.txt&quot;&gt; RFC 2911 Internet Printing Protocol, 1.1: Model and Semantics&lt;/a&gt;, dated September 2000. The attributes specified in &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; include common capabilities, such as: resolution, copies, media sizes, job priority, and page ranges.</source>
          <target state="translated">&lt;code&gt;javax.print.attribute&lt;/code&gt; ののパッケージには、属性の種類を説明し、それらがどのようにセットに収集することができます。 &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; ののすべての属性の実装であるほとんどがAPIでサポートされている標準属性、のを列挙は、IETF仕様で指定されたパッケージ、&lt;a href=&quot;http://www.ietf.org/rfc/rfc2911.txt&quot;&gt;RFC 2911インターネット印刷プロトコル、1.1：モデルとセマンティクス&lt;/a&gt;、日付2000年9月 &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; で指定された属性には、解像度、コピー、メディアサイズ、ジョブの優先順位、ページ範囲などの一般的な機能が含まれます。</target>
        </trans-unit>
        <trans-unit id="c52c82c2dc7611fe0c69651dc489e948a8470acb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.print.attribute&lt;/code&gt; package describes the types of attributes and how they can be collected into sets. The &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; package enumerates all of the standard attributes supported by the API, most of which are implementations of attributes specified in the IETF Specification, &lt;a href=&quot;http://www.ietf.org/rfc/rfc2911.txt&quot;&gt;RFC 2911 Internet Printing Protocol, 1.1: Model and Semantics&lt;/a&gt;, dated September 2000. The attributes specified in &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; include common capabilities, such as: resolution, copies, media sizes, job priority, and page ranges.</source>
          <target state="translated">&lt;code&gt;javax.print.attribute&lt;/code&gt; ののパッケージには、属性の種類を説明し、それらがどのようにセットに収集することができます。 &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; ののすべての属性の実装であるほとんどがAPIでサポートされている標準属性、のを列挙は、IETF仕様で指定されたパッケージ、&lt;a href=&quot;http://www.ietf.org/rfc/rfc2911.txt&quot;&gt;RFC 2911インターネット印刷プロトコル、1.1：モデルとセマンティクス&lt;/a&gt;、日付2000年9月 &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; で指定されている属性には、解像度、コピー、メディアサイズ、ジョブの優先度、ページ範囲などの一般的な機能が含まれています。</target>
        </trans-unit>
        <trans-unit id="f1ac81c4983fd4e99cf0a56e6178b754e13e7442" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.print.attribute&lt;/code&gt; package includes &lt;a href=&quot;hashattributeset&quot;&gt;HashAttributeSet&lt;/a&gt; as a concrete implementation of the attribute set interface. &lt;code&gt;HashAttributeSet&lt;/code&gt; provides an attribute set based on a hash map. You can use this implementation or provide your own implementation of interface &lt;code&gt;AttributeSet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;javax.print.attribute&lt;/code&gt; ののパッケージには、&lt;a href=&quot;hashattributeset&quot;&gt;HashAttributeSetを&lt;/a&gt;属性セットのインタフェースの具体的な実装として。 &lt;code&gt;HashAttributeSet&lt;/code&gt; は、ハッシュマップに基づいた属性セットを提供します。この実装を使用することも、インターフェース &lt;code&gt;AttributeSet&lt;/code&gt; の独自の実装を提供することもできます。</target>
        </trans-unit>
        <trans-unit id="ce40bf00e14dc3ae69324c9a349e2c2ebf3d4866" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.sql&lt;/code&gt; package provides for the following:</source>
          <target state="translated">&lt;code&gt;javax.sql&lt;/code&gt; でのパッケージには、次のために用意されています。</target>
        </trans-unit>
        <trans-unit id="054bef0e67b4c84386043a510c836ef1eefccd8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.sql&lt;/code&gt; package provides the preferred way to make a connection with a data source. The &lt;code&gt;DriverManager&lt;/code&gt; class, the original mechanism, is still valid, and code using it will continue to run. However, the newer &lt;code&gt;DataSource&lt;/code&gt; mechanism is preferred because it offers many advantages over the &lt;code&gt;DriverManager&lt;/code&gt; mechanism.</source>
          <target state="translated">&lt;code&gt;javax.sql&lt;/code&gt; でのパッケージには、データソースとの接続を行うための好ましい方法を提供します。 &lt;code&gt;DriverManager&lt;/code&gt; クラス、オリジナルのメカニズムは、まだ有効であり、それを使用してコードを実行し続けます。ただし、 &lt;code&gt;DriverManager&lt;/code&gt; メカニズムに比べて多くの利点があるため、新しい &lt;code&gt;DataSource&lt;/code&gt; メカニズムが推奨されます。</target>
        </trans-unit>
        <trans-unit id="78270c76347c7770cb655e4c785215d8bdb0d512" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.xml.catalog.defer&lt;/code&gt; property as described in item &lt;a href=&quot;catalogfeatures#DEFER&quot;&gt;DEFER&lt;/a&gt; of the Catalog Features table.</source>
          <target state="translated">&lt;code&gt;javax.xml.catalog.defer&lt;/code&gt; の項目で説明したようにプロパティ&lt;a href=&quot;catalogfeatures#DEFER&quot;&gt;DEFER&lt;/a&gt;カタログのは、台を備えています。</target>
        </trans-unit>
        <trans-unit id="15d2ad6f93e03730ebc25b9f11249586e69ac782" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.xml.catalog.files&lt;/code&gt; property as described in item &lt;a href=&quot;catalogfeatures#FILES&quot;&gt;FILES&lt;/a&gt; of the Catalog Features table.</source>
          <target state="translated">&lt;code&gt;javax.xml.catalog.files&lt;/code&gt; の項目で説明したようにプロパティ&lt;a href=&quot;catalogfeatures#FILES&quot;&gt;FILES&lt;/a&gt;カタログのは、台を備えています。</target>
        </trans-unit>
        <trans-unit id="9fc2f2e095ade91fa2f052d206896d8dfe4877e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.xml.catalog.prefer&lt;/code&gt; property as described in item &lt;a href=&quot;catalogfeatures#PREFER&quot;&gt;PREFER&lt;/a&gt; of the Catalog Features table.</source>
          <target state="translated">&lt;code&gt;javax.xml.catalog.prefer&lt;/code&gt; の項目で説明したようにプロパティが&lt;a href=&quot;catalogfeatures#PREFER&quot;&gt;好む&lt;/a&gt;カタログの台を備えています。</target>
        </trans-unit>
        <trans-unit id="db3821d6c87a43457aa9b8813d01a7019a6129e4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;javax.xml.catalog.resolve&lt;/code&gt; property as described in item &lt;a href=&quot;catalogfeatures#RESOLVE&quot;&gt;RESOLVE&lt;/a&gt; of the Catalog Features table.</source>
          <target state="translated">&lt;code&gt;javax.xml.catalog.resolve&lt;/code&gt; 項目で説明したようにプロパティ&lt;a href=&quot;catalogfeatures#RESOLVE&quot;&gt;RESOLVE&lt;/a&gt;カタログのは、台を備えています。</target>
        </trans-unit>
        <trans-unit id="93789cdb1067b60dea1052c68162e9476ca283fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jaxp.properties&lt;/code&gt; file is typically in the conf directory of the Java installation. The file is read only once by the JAXP implementation and its values are then cached for future use. If the file does not exist when the first attempt is made to read from it, no further attempts are made to check for its existence. It is not possible to change the value of any properties in &lt;code&gt;jaxp.properties&lt;/code&gt; after it has been read.</source>
          <target state="translated">&lt;code&gt;jaxp.properties&lt;/code&gt; のファイルは、Javaのインストールのconfディレクトリにあるのが典型的です。ファイルはJAXP実装によって一度だけ読み取られ、その値は将来の使用のためにキャッシュされます。ファイルからの最初の読み取りが試行されたときにファイルが存在しない場合、その存在を確認するためのそれ以上の試行は行われません。 &lt;code&gt;jaxp.properties&lt;/code&gt; 後、jaxp.propertiesのプロパティの値を変更することはできません。</target>
        </trans-unit>
        <trans-unit id="e2a7485770f758bc31860b6c07b8541a8b9eeb14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jdbc.drivers&lt;/code&gt; system property which contains a colon separated list of fully qualified class names of JDBC drivers. Each driver is loaded using the &lt;a href=&quot;../../../java.base/java/lang/classloader#getSystemClassLoader()&quot;&gt;system class loader&lt;/a&gt;:</source>
          <target state="translated">&lt;code&gt;jdbc.drivers&lt;/code&gt; のJDBCドライバの完全修飾クラス名のコロンで区切られたリストを含むシステムプロパティ。各ドライバーは、&lt;a href=&quot;../../../java.base/java/lang/classloader#getSystemClassLoader()&quot;&gt;システムクラスローダー&lt;/a&gt;を使用してロードされます。</target>
        </trans-unit>
        <trans-unit id="a4512a267bf8a4a8b628ff06249f45a97a9013e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kind&lt;/code&gt; of a directive.</source>
          <target state="translated">ディレクティブの &lt;code&gt;kind&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="766e65fec5bf118351de7f21179d89ba7379dbda" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;kind&lt;/code&gt; of an element.</source>
          <target state="translated">要素の &lt;code&gt;kind&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="583ea0cb6650b486f04f1d06cd030a009d684d42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;krb5.conf&lt;/code&gt; file is formatted in the Windows INI file style, which contains a series of relations grouped into different sections. Each relation contains a key and a value, the value can be an arbitrary string or a boolean value. A boolean value can be one of &quot;true&quot;, &quot;false&quot;, &quot;yes&quot;, or &quot;no&quot;, and values are case-insensitive.</source>
          <target state="translated">&lt;code&gt;krb5.conf&lt;/code&gt; ファイルが別のセクションにグループ化関係のシリーズを含むWindows INIファイル形式でフォーマットされます。各リレーションにはキーと値が含まれ、値は任意の文字列またはブール値にすることができます。ブール値は、「true」、「false」、「yes」、または「no」のいずれかになり、値では大文字と小文字が区別されません。</target>
        </trans-unit>
        <trans-unit id="fbe5ef5eb552727a780a36060063e8f5dc9148f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;layeredPane&lt;/code&gt; fills the entire viewable area of the &lt;code&gt;JRootPane&lt;/code&gt;. (bounds - insets)</source>
          <target state="translated">&lt;code&gt;layeredPane&lt;/code&gt; は、全体の表示可能領域いっぱい &lt;code&gt;JRootPane&lt;/code&gt; 。（境界-挿入図）</target>
        </trans-unit>
        <trans-unit id="3cfb47b698c324c8e60c3a7f81085135ef605f6a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;layeredPane&lt;/code&gt; is the parent of all children in the &lt;code&gt;JRootPane&lt;/code&gt; -- both as the direct parent of the menu and the grandparent of all components added to the &lt;code&gt;contentPane&lt;/code&gt;. It is an instance of &lt;code&gt;JLayeredPane&lt;/code&gt;, which provides the ability to add components at several layers. This capability is very useful when working with menu popups, dialog boxes, and dragging -- situations in which you need to place a component on top of all other components in the pane.</source>
          <target state="translated">&lt;code&gt;layeredPane&lt;/code&gt; は、すべての子供の親である &lt;code&gt;JRootPane&lt;/code&gt; の両方のメニューに加え、すべてのコンポーネントの祖父母の直接の親として- &lt;code&gt;contentPane&lt;/code&gt; 。これは &lt;code&gt;JLayeredPane&lt;/code&gt; のインスタンスであり、複数のレイヤーにコンポーネントを追加する機能を提供します。この機能は、メニューポップアップ、ダイアログボックス、およびドラッグ（ペイン内の他のすべてのコンポーネントの上にコンポーネントを配置する必要がある状況）を操作するときに非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="bbb82873975dbeba0e74c27fbee85cbfbbfbdc0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ldc&lt;/code&gt; instruction makes use of bootstrap &lt;code&gt;MethodHandle&lt;/code&gt; constants to dynamically resolve custom constant values.</source>
          <target state="translated">&lt;code&gt;ldc&lt;/code&gt; 命令は、ブートストラップを使用します &lt;code&gt;MethodHandle&lt;/code&gt; 動的に解決カスタム一定の値に定数を。</target>
        </trans-unit>
        <trans-unit id="a5fbfe70cef778b32594cced3a732339cbc1acf5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; argument is negative.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 引数が負です。</target>
        </trans-unit>
        <trans-unit id="5c30faee739e118e9dbf221fbacf126dc2e548ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;length&lt;/code&gt; argument must be less than or equal to &lt;code&gt;buf.length&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;length&lt;/code&gt; 引数が未満であるかに等しくなければならない &lt;code&gt;buf.length&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c1ab860b5d9fdfdc8cacefe29fa6bee88d721891" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;limit&lt;/code&gt; parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array.</source>
          <target state="translated">&lt;code&gt;limit&lt;/code&gt; パラメータは、パターンが適用される回数を制御し、従って、得られた配列の長さに影響を与えます。</target>
        </trans-unit>
        <trans-unit id="a20aaa21bfe3d598720524fef65f51974af49fb4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;limit&lt;/code&gt; parameter controls the number of times the pattern is applied and therefore affects the length of the resulting array. If the limit</source>
          <target state="translated">&lt;code&gt;limit&lt;/code&gt; パラメータは、パターンが適用される回数を制御し、従って、得られた配列の長さに影響を与えます。限界なら</target>
        </trans-unit>
        <trans-unit id="7227cc8a8f47600f7a135282736709ff73dd62b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;link&lt;/code&gt; parameter locates the directory entry to create. The &lt;code&gt;existing&lt;/code&gt; parameter is the path to an existing file. This method creates a new directory entry for the file so that it can be accessed using &lt;code&gt;link&lt;/code&gt; as the path. On some file systems this is known as creating a &quot;hard link&quot;. Whether the file attributes are maintained for the file or for each directory entry is file system specific and therefore not specified. Typically, a file system requires that all links (directory entries) for a file be on the same file system. Furthermore, on some platforms, the Java virtual machine may require to be started with implementation specific privileges to create hard links or to create links to directories.</source>
          <target state="translated">&lt;code&gt;link&lt;/code&gt; パラメータは、作成するディレクトリエントリを検索します。 &lt;code&gt;existing&lt;/code&gt; パラメータは、既存のファイルへのパスです。このメソッドは、 &lt;code&gt;link&lt;/code&gt; をパスとして使用してアクセスできるように、ファイルの新しいディレクトリエントリを作成します。一部のファイルシステムでは、これは「ハードリンク」の作成と呼ばれます。ファイル属性がファイルに対して維持されるか、各ディレクトリエントリに対して維持されるかは、ファイルシステム固有であるため、指定されていません。通常、ファイルシステムでは、ファイルのすべてのリンク（ディレクトリエントリ）が同じファイルシステム上にある必要があります。さらに、一部のプラットフォームでは、ハードリンクを作成したり、ディレクトリへのリンクを作成したりするために、Java仮想マシンを実装固有の権限で起動する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="9d151fce3015e4ed9e5cd20051237afb5cefea88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listIterator(int)&lt;/code&gt; method returns a &quot;wrapper object&quot; over a list iterator on the backing list, which is created with the corresponding method on the backing list. The &lt;code&gt;iterator&lt;/code&gt; method merely returns &lt;code&gt;listIterator()&lt;/code&gt;, and the &lt;code&gt;size&lt;/code&gt; method merely returns the subclass's &lt;code&gt;size&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;listIterator(int)&lt;/code&gt; メソッドは、バッキングリストの対応するメソッドで作成されたバッキングリスト、上リストイテレータ上「ラッパー・オブジェクト」を返します。 &lt;code&gt;iterator&lt;/code&gt; 方法は、単に返す &lt;code&gt;listIterator()&lt;/code&gt; 、及び &lt;code&gt;size&lt;/code&gt; 方法は、単に、サブクラスの戻り &lt;code&gt;size&lt;/code&gt; フィールド。</target>
        </trans-unit>
        <trans-unit id="2c77410030181476fea1a68458124459ebc9a9bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;listener&lt;/code&gt; listens to property changes only in this context.</source>
          <target state="translated">&lt;code&gt;listener&lt;/code&gt; 唯一、このコンテキスト内のプロパティの変更に待機します。</target>
        </trans-unit>
        <trans-unit id="1fedd930e38f5398c449c705300b0fc17b0566c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;loadClass&lt;/code&gt; method in class &lt;code&gt;ClassLoader&lt;/code&gt;.</source>
          <target state="translated">クラス &lt;code&gt;ClassLoader&lt;/code&gt; の &lt;code&gt;loadClass&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="df54bb2871f3875ee6a1a7f2fe8a7beb4fbe0bd8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;locate&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt; simply returns the component itself if the (</source>
          <target state="translated">&lt;code&gt;Component&lt;/code&gt; の &lt;code&gt;locate&lt;/code&gt; メソッドは、（（</target>
        </trans-unit>
        <trans-unit id="6c9b144092edff275e75b32f1dca016975180187" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mapper&lt;/code&gt; function passed to &lt;code&gt;flatMap&lt;/code&gt; splits a line, using a simple regular expression, into an array of words, and then creates a stream of words from that array.</source>
          <target state="translated">&lt;code&gt;mapper&lt;/code&gt; に渡す機能 &lt;code&gt;flatMap&lt;/code&gt; は、単語の配列に、単純な正規表現を使用して、行を分割し、そのアレイからワードのストリームを生成します。</target>
        </trans-unit>
        <trans-unit id="e7777926bab037130e9c4b41941f7d725a543594" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mapping()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, such as downstream of a &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. For example, given a stream of &lt;code&gt;Person&lt;/code&gt;, to accumulate the set of last names in each city:</source>
          <target state="translated">&lt;code&gt;mapping()&lt;/code&gt; このようなの下流として、マルチレベルの低減に使用される場合、コレクターは最も有用である &lt;code&gt;groupingBy&lt;/code&gt; 又は &lt;code&gt;partitioningBy&lt;/code&gt; 。たとえば、 &lt;code&gt;Person&lt;/code&gt; のストリームが与えられ、各都市の姓のセットを累積するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="903b585e02a8cfe6d8af38444d4c285b4ecfdab9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;InflaterInputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;InflaterInputStream&lt;/code&gt; の &lt;code&gt;mark&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="0371bac823202240bd6c72d5e06eb31b731df75c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; の &lt;code&gt;mark&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="7e02e9dcce04c471816e17e93a8e7c8612865389" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;LineNumberInputStream&lt;/code&gt; remembers the current line number in a private variable, and then calls the &lt;code&gt;mark&lt;/code&gt; method of the underlying input stream.</source>
          <target state="translated">&lt;code&gt;LineNumberInputStream&lt;/code&gt; の &lt;code&gt;mark&lt;/code&gt; メソッドは、プライベート変数の現在の行番号を記憶し、基になる入力ストリームの &lt;code&gt;mark&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="9baaba468b2b9ec943dee5d33e382f44cbd16e98" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mark&lt;/code&gt; method of &lt;code&gt;PushbackInputStream&lt;/code&gt; does nothing.</source>
          <target state="translated">&lt;code&gt;PushbackInputStream&lt;/code&gt; の &lt;code&gt;mark&lt;/code&gt; メソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="266811666f451efbcca8485179044d44787aa53c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;markSupported()&lt;/code&gt; method returns &lt;code&gt;false&lt;/code&gt;. The &lt;code&gt;mark()&lt;/code&gt; and &lt;code&gt;reset()&lt;/code&gt; methods throw an &lt;code&gt;IOException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;markSupported()&lt;/code&gt; メソッドが返す &lt;code&gt;false&lt;/code&gt; 。 &lt;code&gt;mark()&lt;/code&gt; および &lt;code&gt;reset()&lt;/code&gt; メソッドがスロー &lt;code&gt;IOException&lt;/code&gt; が。</target>
        </trans-unit>
        <trans-unit id="24e3553f60a435975160a122db551ded68bc69d4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;markSupported()&lt;/code&gt; method returns &lt;code&gt;false&lt;/code&gt;. The &lt;code&gt;mark()&lt;/code&gt; method does nothing, and the &lt;code&gt;reset()&lt;/code&gt; method throws &lt;code&gt;IOException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;markSupported()&lt;/code&gt; メソッドが返す &lt;code&gt;false&lt;/code&gt; 。 &lt;code&gt;mark()&lt;/code&gt; メソッドは何もしませんし、 &lt;code&gt;reset()&lt;/code&gt; メソッドは、スロー &lt;code&gt;IOException&lt;/code&gt; が。</target>
        </trans-unit>
        <trans-unit id="77e5480e00ffc1e7db2c7cde3ede487453a10255" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxDepth&lt;/code&gt; parameter is the maximum number of levels of directories to visit. A value of &lt;code&gt;0&lt;/code&gt; means that only the starting file is visited, unless denied by the security manager. A value of &lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt;&lt;code&gt;MAX_VALUE&lt;/code&gt;&lt;/a&gt; may be used to indicate that all levels should be visited.</source>
          <target state="translated">&lt;code&gt;maxDepth&lt;/code&gt; パラメータが訪問するディレクトリのレベルの最大数です。値 &lt;code&gt;0&lt;/code&gt; は、セキュリティマネージャーによって拒否されない限り、開始ファイルのみがアクセスされることを意味します。&lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt; &lt;code&gt;MAX_VALUE&lt;/code&gt; &lt;/a&gt;の値は、すべてのレベルにアクセスする必要があることを示すために使用できます。</target>
        </trans-unit>
        <trans-unit id="18e28bc41e209ebe6c61a493b6c9622bd4b0c37d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxDepth&lt;/code&gt; parameter is the maximum number of levels of directories to visit. A value of &lt;code&gt;0&lt;/code&gt; means that only the starting file is visited, unless denied by the security manager. A value of &lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt;&lt;code&gt;MAX_VALUE&lt;/code&gt;&lt;/a&gt; may be used to indicate that all levels should be visited. The &lt;code&gt;visitFile&lt;/code&gt; method is invoked for all files, including directories, encountered at &lt;code&gt;maxDepth&lt;/code&gt;, unless the basic file attributes cannot be read, in which case the &lt;code&gt;
 visitFileFailed&lt;/code&gt; method is invoked.</source>
          <target state="translated">&lt;code&gt;maxDepth&lt;/code&gt; パラメータが訪問するディレクトリのレベルの最大数です。値 &lt;code&gt;0&lt;/code&gt; は、セキュリティマネージャによって拒否されない限り、開始ファイルのみがアクセスされることを意味します。&lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt; &lt;code&gt;MAX_VALUE&lt;/code&gt; &lt;/a&gt;の値を使用して、すべてのレベルにアクセスする必要があることを示すことができます。 &lt;code&gt;visitFile&lt;/code&gt; の方法はで遭遇したディレクトリを含む、すべてのファイル、ために呼び出され &lt;code&gt;maxDepth&lt;/code&gt; 、その場合には、基本的なファイル属性を読み取ることができない場合を除き、 &lt;code&gt; visitFileFailed&lt;/code&gt; のメソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="259fe46dcadeee76b1ff944baef9fa3edc7fae57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;maxDepth&lt;/code&gt; parameter is the maximum number of levels of directories to visit. A value of &lt;code&gt;0&lt;/code&gt; means that only the starting file is visited, unless denied by the security manager. A value of &lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt;&lt;code&gt;MAX_VALUE&lt;/code&gt;&lt;/a&gt; may be used to indicate that all levels should be visited. The &lt;code&gt;visitFile&lt;/code&gt; method is invoked for all files, including directories, encountered at &lt;code&gt;maxDepth&lt;/code&gt;, unless the basic file attributes cannot be read, in which case the &lt;code&gt;visitFileFailed&lt;/code&gt; method is invoked.</source>
          <target state="translated">&lt;code&gt;maxDepth&lt;/code&gt; パラメータが訪問するディレクトリのレベルの最大数です。値 &lt;code&gt;0&lt;/code&gt; は、セキュリティマネージャーによって拒否されない限り、開始ファイルのみがアクセスされることを意味します。&lt;a href=&quot;../../lang/integer#MAX_VALUE&quot;&gt; &lt;code&gt;MAX_VALUE&lt;/code&gt; &lt;/a&gt;の値は、すべてのレベルにアクセスする必要があることを示すために使用できます。 &lt;code&gt;visitFile&lt;/code&gt; の方法はで遭遇したディレクトリを含む、すべてのファイル、ために呼び出され &lt;code&gt;maxDepth&lt;/code&gt; 、その場合には、基本的なファイル属性を読み取ることができない場合を除き、 &lt;code&gt;visitFileFailed&lt;/code&gt; のメソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="df4b870fb6b307f47ae3b882d0d392b6a0a27623" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;menuBar&lt;/code&gt; is positioned at the upper edge of the &lt;code&gt;layeredPane&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;menuBar&lt;/code&gt; はの上端に位置している &lt;code&gt;layeredPane&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="25cc63f27b499ac936092a81d7ae1cac847e5fe0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;messageType&lt;/code&gt; parameter is primarily used to supply a default icon from the look and feel.</source>
          <target state="translated">&lt;code&gt;messageType&lt;/code&gt; パラメータは主に外観からデフォルトのアイコンを供給するために使用されます。</target>
        </trans-unit>
        <trans-unit id="6af76e421d8e057e7b7d9ff20dd9e09a4d087b85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;metaData&lt;/code&gt; parameter can be used to limit the number of I/O operations that this method is required to perform. Passing &lt;code&gt;false&lt;/code&gt; for this parameter indicates that only updates to the file's content need be written to storage; passing &lt;code&gt;true&lt;/code&gt; indicates that updates to both the file's content and metadata must be written, which generally requires at least one more I/O operation. Whether this parameter actually has any effect is dependent upon the underlying operating system and is therefore unspecified.</source>
          <target state="translated">&lt;code&gt;metaData&lt;/code&gt; パラメータは、この方法は、実行するために必要であることをI / O操作の数を制限するために使用することができます。このパラメーターに &lt;code&gt;false&lt;/code&gt; を渡すと、ファイルのコンテンツの更新のみをストレージに書き込む必要があることを示します。 &lt;code&gt;true&lt;/code&gt; を渡すと、ファイルのコンテンツとメタデータの両方への更新を書き込む必要があることを示します。これには通常、少なくとももう1つのI / O操作が必要です。このパラメーターが実際に効果があるかどうかは、基礎となるオペレーティングシステムに依存するため、指定されていません。</target>
        </trans-unit>
        <trans-unit id="68681b14e33063683f77b0c98ad6ad810109a928" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum&lt;/code&gt; parameters can be &lt;code&gt;null&lt;/code&gt; to indicate that the range doesn't have an upper or lower bound. If &lt;code&gt;value&lt;/code&gt; or &lt;code&gt;stepSize&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, or if both &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum&lt;/code&gt; are specified and &lt;code&gt;minimum &amp;gt; maximum&lt;/code&gt; then an &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown. Similarly if &lt;code&gt;(minimum &amp;lt;= value &amp;lt;= maximum&lt;/code&gt;) is false, an &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;minimum&lt;/code&gt; と &lt;code&gt;maximum&lt;/code&gt; のパラメータがあってもよい &lt;code&gt;null&lt;/code&gt; 範囲が上限以下を有していないことを示すために。もし &lt;code&gt;value&lt;/code&gt; または &lt;code&gt;stepSize&lt;/code&gt; ある &lt;code&gt;null&lt;/code&gt; 、または両方の場合に &lt;code&gt;minimum&lt;/code&gt; と &lt;code&gt;maximum&lt;/code&gt; 指定され、 &lt;code&gt;minimum &amp;gt; maximum&lt;/code&gt; その後 &lt;code&gt;IllegalArgumentException&lt;/code&gt; スローされます。同様に、 &lt;code&gt;(minimum &amp;lt;= value &amp;lt;= maximum&lt;/code&gt; ）がfalseの場合、 &lt;code&gt;IllegalArgumentException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="74be4dfd459c69d6c5eed0336db7d26406e6421b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;minimumCapacity&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;minimumCapacity&lt;/code&gt; の引数。</target>
        </trans-unit>
        <trans-unit id="890e9f6e189646766e2f576b109ba30702568602" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mode&lt;/code&gt; argument specifies the access mode with which the file is to be opened. The permitted values and their meanings are as specified for the &lt;a href=&quot;#mode&quot;&gt;&lt;code&gt;RandomAccessFile(File,String)&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;mode&lt;/code&gt; 引数は、ファイルが開かれるとアクセスモードを指定します。許可される値とその意味は、&lt;a href=&quot;#mode&quot;&gt; &lt;code&gt;RandomAccessFile(File,String)&lt;/code&gt; &lt;/a&gt;コンストラクターに指定されているとおりです。</target>
        </trans-unit>
        <trans-unit id="8d634c96d7b7dc8c2283b2dc960c9bfb6ad5d16f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;modifiers&lt;/code&gt; parameter specifies &lt;em&gt;modifiers&lt;/em&gt; that qualify how the directory is registered. This release does not define any &lt;em&gt;standard&lt;/em&gt; modifiers. It may contain implementation specific modifiers.</source>
          <target state="translated">&lt;code&gt;modifiers&lt;/code&gt; を指定するパラメータ&lt;em&gt;修飾子&lt;/em&gt;ディレクトリが登録されているかの資格。このリリースでは、&lt;em&gt;標準の&lt;/em&gt;修飾子は定義されていません。実装固有の修飾子が含まれる場合があります。</target>
        </trans-unit>
        <trans-unit id="1c71b33fd5b314e171d4df0723194294f0896265" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;msg&lt;/code&gt; string is localized using the given resource bundle. If the resource bundle is &lt;code&gt;null&lt;/code&gt;, then the &lt;code&gt;msg&lt;/code&gt; string is not localized.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; 文字列が与えられたリソースバンドルを使用してローカライズされています。リソースバンドルが &lt;code&gt;null&lt;/code&gt; の場合、 &lt;code&gt;msg&lt;/code&gt; 文字列はローカライズされません。</target>
        </trans-unit>
        <trans-unit id="3ad795f1c708af7880ff420b8fad93daa8b2155f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;n&lt;/code&gt; parameter may be negative, even though the &lt;code&gt;skip&lt;/code&gt; method of the &lt;a href=&quot;reader&quot;&gt;&lt;code&gt;Reader&lt;/code&gt;&lt;/a&gt; superclass throws an exception in this case. If &lt;code&gt;n&lt;/code&gt; is negative, then this method does nothing and returns &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">この場合、&lt;a href=&quot;reader&quot;&gt; &lt;code&gt;Reader&lt;/code&gt; &lt;/a&gt;スーパークラスの &lt;code&gt;skip&lt;/code&gt; メソッドが例外をスローしますが、 &lt;code&gt;n&lt;/code&gt; パラメータは負になる場合があります。場合は &lt;code&gt;n&lt;/code&gt; 負の場合、このメソッドは何も戻りません &lt;code&gt;0&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="7dff9aa267101b80032f4f16286856df7bec91f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;environment&lt;/code&gt; parameters are owned by the caller. The implementation will not modify these objects or keep references to them, although it may keep references to clones or copies.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; と &lt;code&gt;environment&lt;/code&gt; パラメータは、呼び出し側が所有しています。実装は、これらのオブジェクトを変更したり、それらへの参照を保持したりしませんが、クローンまたはコピーへの参照を保持する場合があります。</target>
        </trans-unit>
        <trans-unit id="30d43ffbfe8d9be7ac13f65149aa0271dd8dbc00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;nameCtx&lt;/code&gt; parameters may optionally be used to specify the name of the object being created. &lt;code&gt;name&lt;/code&gt; is the name of the object, relative to context &lt;code&gt;nameCtx&lt;/code&gt;. This information could be useful to the object factory or to the object implementation. If there are several possible contexts from which the object could be named -- as will often be the case -- it is up to the caller to select one. A good rule of thumb is to select the &quot;deepest&quot; context available. If &lt;code&gt;nameCtx&lt;/code&gt; is null, &lt;code&gt;name&lt;/code&gt; is relative to the default initial context. If no name is being specified, the &lt;code&gt;name&lt;/code&gt; parameter should be null.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; と &lt;code&gt;nameCtx&lt;/code&gt; パラメータは、必要に応じて作成されたオブジェクトの名前を指定するために使用されてもよいです。 &lt;code&gt;name&lt;/code&gt; は、コンテキスト &lt;code&gt;nameCtx&lt;/code&gt; を基準にしたオブジェクトの名前です。この情報は、オブジェクトファクトリまたはオブジェクトの実装に役立つ場合があります。オブジェクトに名前を付けることができるコンテキストがいくつかある場合（よくあることですが）、いずれかを選択するのは呼び出し側の責任です。大体の目安は、利用可能な「最も深い」コンテキストを選択することです。 &lt;code&gt;nameCtx&lt;/code&gt; がnullの場合、 &lt;code&gt;name&lt;/code&gt; はデフォルトの初期コンテキストを基準にしています。名前を指定しない場合、 &lt;code&gt;name&lt;/code&gt; パラメータはnullにする必要があります。</target>
        </trans-unit>
        <trans-unit id="be1fd20ce63d2a2b2230f8b0a96a9b6d08008ebe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;nameCtx&lt;/code&gt; parameters may optionally be used to specify the name of the object being created. See the description of &quot;Name and Context Parameters&quot; in &lt;a href=&quot;objectfactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)&quot;&gt;&lt;code&gt;ObjectFactory.getObjectInstance()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; と &lt;code&gt;nameCtx&lt;/code&gt; パラメータは、必要に応じて作成されたオブジェクトの名前を指定するために使用されてもよいです。詳細については、&lt;a href=&quot;objectfactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)&quot;&gt; &lt;code&gt;ObjectFactory.getObjectInstance()&lt;/code&gt; &lt;/a&gt;の「名前とコンテキストパラメータ」の説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="1c9872e72bac6d145cc0c98edc174c7beb6a1a6f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;nameCtx&lt;/code&gt; parameters may optionally be used to specify the name of the object being created. See the description of &quot;Name and Context Parameters&quot; in &lt;a href=&quot;objectfactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)&quot;&gt;&lt;code&gt;ObjectFactory.getObjectInstance()&lt;/code&gt;&lt;/a&gt; for details. If a factory uses &lt;code&gt;nameCtx&lt;/code&gt; it should synchronize its use against concurrent access, since context implementations are not guaranteed to be thread-safe.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; と &lt;code&gt;nameCtx&lt;/code&gt; パラメータは、必要に応じて作成されたオブジェクトの名前を指定するために使用されてもよいです。詳細については、&lt;a href=&quot;objectfactory#getObjectInstance(java.lang.Object,javax.naming.Name,javax.naming.Context,java.util.Hashtable)&quot;&gt; &lt;code&gt;ObjectFactory.getObjectInstance()&lt;/code&gt; &lt;/a&gt;の「名前とコンテキストパラメータ」の説明を参照してください。ファクトリが &lt;code&gt;nameCtx&lt;/code&gt; を使用する場合、コンテキスト実装はスレッドセーフであることが保証されていないため、同時アクセスに対してその使用を同期する必要があります。</target>
        </trans-unit>
        <trans-unit id="f70a327d5594e9f181a40f5c6ca0cd8e025505b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;nameCtx&lt;/code&gt; parameters may optionally be used to specify the name of the object being created. See the description of &quot;Name and Context Parameters&quot; in &lt;a href=&quot;objectfactory#getObjectInstance-java.lang.Object-javax.naming.Name-javax.naming.Context-java.util.Hashtable-&quot;&gt;&lt;code&gt;ObjectFactory.getObjectInstance()&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; と &lt;code&gt;nameCtx&lt;/code&gt; パラメータは、必要に応じて作成されたオブジェクトの名前を指定するために使用されてもよいです。詳細については、&lt;a href=&quot;objectfactory#getObjectInstance-java.lang.Object-javax.naming.Name-javax.naming.Context-java.util.Hashtable-&quot;&gt; &lt;code&gt;ObjectFactory.getObjectInstance()&lt;/code&gt; &lt;/a&gt;の「名前とコンテキストパラメータ」の説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="d4c006afdb1b3d49e58c74bd4a0ffd732b023002" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;nameCtx&lt;/code&gt; parameters may optionally be used to specify the name of the object being created. See the description of &quot;Name and Context Parameters&quot; in &lt;a href=&quot;objectfactory#getObjectInstance-java.lang.Object-javax.naming.Name-javax.naming.Context-java.util.Hashtable-&quot;&gt;&lt;code&gt;ObjectFactory.getObjectInstance()&lt;/code&gt;&lt;/a&gt; for details. If a factory uses &lt;code&gt;nameCtx&lt;/code&gt; it should synchronize its use against concurrent access, since context implementations are not guaranteed to be thread-safe.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; と &lt;code&gt;nameCtx&lt;/code&gt; パラメータは、必要に応じて作成されたオブジェクトの名前を指定するために使用されてもよいです。詳細については、&lt;a href=&quot;objectfactory#getObjectInstance-java.lang.Object-javax.naming.Name-javax.naming.Context-java.util.Hashtable-&quot;&gt; &lt;code&gt;ObjectFactory.getObjectInstance()&lt;/code&gt; &lt;/a&gt;の「名前とコンテキストパラメータ」の説明を参照してください。ファクトリが &lt;code&gt;nameCtx&lt;/code&gt; を使用する場合、コンテキストの実装がスレッドセーフであることが保証されていないため、ファクトリはその使用を同時アクセスに対して同期化する必要があります。</target>
        </trans-unit>
        <trans-unit id="e883ac2d08181956247cb122333240f05339fa61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; argument is case insensitive.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 引数はケース鈍感です。</target>
        </trans-unit>
        <trans-unit id="75ed05c0b8a33486c051a951114b24540ff05d3b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt; matching is case insensitive, with any leading and trailing whitespace character removed.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 一致は削除任意の先頭と末尾の空白文字で、ケース鈍感です。</target>
        </trans-unit>
        <trans-unit id="6b3818f758723f19e7f19461448d70ae40bd144a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;attrs&lt;/code&gt;, and &lt;code&gt;environment&lt;/code&gt; parameters are owned by the caller. The implementation will not modify these objects or keep references to them, although it may keep references to clones or copies.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;attrs&lt;/code&gt; 、および &lt;code&gt;environment&lt;/code&gt; パラメータは、呼び出し側が所有しています。実装は、これらのオブジェクトを変更したり、それらへの参照を保持したりしませんが、クローンまたはコピーへの参照を保持する場合があります。</target>
        </trans-unit>
        <trans-unit id="48161fbd495af11311a77e82a4acb8a1f70aaa4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;inAttrs&lt;/code&gt;, and &lt;code&gt;environment&lt;/code&gt; parameters are owned by the caller. The implementation will not modify these objects or keep references to them, although it may keep references to clones or copies. The object returned by this method is owned by the caller. The implementation will not subsequently modify it. It will contain either a new &lt;code&gt;Attributes&lt;/code&gt; object that is likewise owned by the caller, or a reference to the original &lt;code&gt;inAttrs&lt;/code&gt; parameter.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;inAttrs&lt;/code&gt; 、および &lt;code&gt;environment&lt;/code&gt; パラメータは、呼び出し側が所有しています。実装は、これらのオブジェクトを変更したり、それらへの参照を保持したりしませんが、クローンまたはコピーへの参照を保持する場合があります。このメソッドによって返されるオブジェクトは、呼び出し元が所有しています。その後、実装はそれを変更しません。同様に、呼び出し元が所有する新しい &lt;code&gt;Attributes&lt;/code&gt; オブジェクト、または元の &lt;code&gt;inAttrs&lt;/code&gt; パラメータへの参照が含まれます。</target>
        </trans-unit>
        <trans-unit id="ef2e6b4b4d41262649d36998a45ab4a554e41dd9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;names&lt;/code&gt; parameter (if not &lt;code&gt;null&lt;/code&gt;) is a &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;X500Principal&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;names&lt;/code&gt; パラメータが（ない場合 &lt;code&gt;null&lt;/code&gt; ）である &lt;code&gt;Collection&lt;/code&gt; の &lt;code&gt;X500Principal&lt;/code&gt; 秒。</target>
        </trans-unit>
        <trans-unit id="f5c100cec826504d35586ac2749c0d0f50484e21" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;names&lt;/code&gt; parameter (if not &lt;code&gt;null&lt;/code&gt;) is a &lt;code&gt;Collection&lt;/code&gt; of names. Each name is a &lt;code&gt;String&lt;/code&gt; or a byte array representing a distinguished name (in &lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt; or ASN.1 DER encoded form, respectively). If &lt;code&gt;null&lt;/code&gt; is supplied as the value for this argument, no issuerNames check will be performed.</source>
          <target state="translated">&lt;code&gt;names&lt;/code&gt; パラメータが（ない場合 &lt;code&gt;null&lt;/code&gt; ）で &lt;code&gt;Collection&lt;/code&gt; の名前の。各名前は、識別名を表す &lt;code&gt;String&lt;/code&gt; またはバイト配列です（それぞれ&lt;a href=&quot;http://www.ietf.org/rfc/rfc2253.txt&quot;&gt;RFC 2253&lt;/a&gt;またはASN.1 DERエンコード形式）。場合は &lt;code&gt;null&lt;/code&gt; がこの引数の値として供給され、何のissurNamesのチェックは行われません。</target>
        </trans-unit>
        <trans-unit id="10f8926ca6dbdca434f3cdffa8eda26510a88124" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;names&lt;/code&gt; parameter (if not &lt;code&gt;null&lt;/code&gt;) is a &lt;code&gt;Collection&lt;/code&gt; with one entry for each name to be included in the pathToNames criterion. Each entry is a &lt;code&gt;List&lt;/code&gt; whose first entry is an &lt;code&gt;Integer&lt;/code&gt; (the name type, 0-8) and whose second entry is a &lt;code&gt;String&lt;/code&gt; or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. If &lt;code&gt;null&lt;/code&gt; is supplied as the value for this argument, no pathToNames check will be performed.</source>
          <target state="translated">&lt;code&gt;names&lt;/code&gt; パラメータ（そうでない場合は &lt;code&gt;null&lt;/code&gt; が）ある &lt;code&gt;Collection&lt;/code&gt; pathToNames基準値に含まれている名前ごとに1つのエントリと。各エントリは、最初のエントリが &lt;code&gt;Integer&lt;/code&gt; （名前のタイプ、0〜8）であり、2番目のエントリが &lt;code&gt;String&lt;/code&gt; またはバイト配列（それぞれ、文字列またはASN.1 DERエンコード形式の名前）である &lt;code&gt;List&lt;/code&gt; です。同じタイプの名前が複数存在する可能性があります。場合は &lt;code&gt;null&lt;/code&gt; がこの引数の値として供給され、pathToNamesのチェックは行われません。</target>
        </trans-unit>
        <trans-unit id="b7f614fb779c50df2c64620e5af3100fbb23fe19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;names&lt;/code&gt; parameter (if not &lt;code&gt;null&lt;/code&gt;) is a &lt;code&gt;Collection&lt;/code&gt; with one entry for each name to be included in the subject alternative name criterion. Each entry is a &lt;code&gt;List&lt;/code&gt; whose first entry is an &lt;code&gt;Integer&lt;/code&gt; (the name type, 0-8) and whose second entry is a &lt;code&gt;String&lt;/code&gt; or a byte array (the name, in string or ASN.1 DER encoded form, respectively). There can be multiple names of the same type. If &lt;code&gt;null&lt;/code&gt; is supplied as the value for this argument, no subjectAlternativeNames check will be performed.</source>
          <target state="translated">&lt;code&gt;names&lt;/code&gt; パラメータ（そうでない場合は &lt;code&gt;null&lt;/code&gt; が）ある &lt;code&gt;Collection&lt;/code&gt; サブジェクト代替名基準値に含まれている名前ごとに1つのエントリとなります。各エントリは、最初のエントリが &lt;code&gt;Integer&lt;/code&gt; （名前のタイプ、0〜8）であり、2番目のエントリが &lt;code&gt;String&lt;/code&gt; またはバイト配列（それぞれ、文字列またはASN.1 DERエンコード形式の名前）である &lt;code&gt;List&lt;/code&gt; です。同じタイプの名前が複数存在する可能性があります。場合は &lt;code&gt;null&lt;/code&gt; がこの引数の値として供給され、subjectAlternativeNamesのチェックは行われません。</target>
        </trans-unit>
        <trans-unit id="86f6973623e34ae41d0cb380cd7a6687a04a283e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;network interface&lt;/code&gt; and &lt;code&gt;ttl&lt;/code&gt; parameters let the caller specify which network interface the test will go through and the maximum number of hops the packets should go through. A negative value for the &lt;code&gt;ttl&lt;/code&gt; will result in an IllegalArgumentException being thrown.</source>
          <target state="translated">&lt;code&gt;network interface&lt;/code&gt; と &lt;code&gt;ttl&lt;/code&gt; パラメータは、発信者が通過しますとホップの最大数は、パケットが通過すべきテストインタフェースたネットワークを指定してみましょう。 &lt;code&gt;ttl&lt;/code&gt; に負の値を指定すると、IllegalArgumentExceptionがスローされます。</target>
        </trans-unit>
        <trans-unit id="8b09e54aa5c847f44721e53e1758b993160bcd0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;newLength&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;newLength&lt;/code&gt; の引数はより大きくなるかに等しくなければならない &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7231d4e3f44c3037aca933714c69e80b5eb9b9ae" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;newTypes&lt;/code&gt; list contains types &lt;code&gt;P..., M..., A...&lt;/code&gt;, with as many types in &lt;code&gt;P&lt;/code&gt; as indicated by &lt;code&gt;pos&lt;/code&gt;. The &lt;code&gt;M&lt;/code&gt; types are precisely those that the &lt;code&gt;M&lt;/code&gt; types in the target handle's parameter type list are supposed to match. The types in &lt;code&gt;A&lt;/code&gt; are additional types found after the matching sub-list.</source>
          <target state="translated">&lt;code&gt;newTypes&lt;/code&gt; のリストが含まれているタイプ &lt;code&gt;P..., M..., A...&lt;/code&gt; のように多くの種類と、 &lt;code&gt;P&lt;/code&gt; で示されるように &lt;code&gt;pos&lt;/code&gt; 。 &lt;code&gt;M&lt;/code&gt; の種類は正確にあるものである &lt;code&gt;M&lt;/code&gt; のターゲットハンドルのパラメータ・タイプのリスト内の型が一致することになっています。 &lt;code&gt;A&lt;/code&gt; のタイプは、一致するサブリストの後にある追加のタイプです。</target>
        </trans-unit>
        <trans-unit id="238e2ddc1de1cf5d38b16bf8a5ed7a88e495f8bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;nodeName&lt;/code&gt; attribute that is inherited from &lt;code&gt;Node&lt;/code&gt; contains the name of the entity.</source>
          <target state="translated">&lt;code&gt;nodeName&lt;/code&gt; から継承された属性 &lt;code&gt;Node&lt;/code&gt; 、エンティティの名前が含まれています。</target>
        </trans-unit>
        <trans-unit id="cd6f3c9ed9744a178a240c4efe334b44144e9408" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;normalize&lt;/code&gt; method helps solve these problems by transforming text into the canonical composed and decomposed forms as shown in the first example above. In addition, you can have it perform compatibility decompositions so that you can treat compatibility characters the same as their equivalents. Finally, the &lt;code&gt;normalize&lt;/code&gt; method rearranges accents into the proper canonical order, so that you do not have to worry about accent rearrangement on your own.</source>
          <target state="translated">&lt;code&gt;normalize&lt;/code&gt; 方法は、正規の構成と上記第一の例に示すように、フォームの分解にテキストを変換することによって、これらの問題を解決するのに役立ちます。さらに、互換性分解を実行して、互換性文字を同等のものと同じように扱うことができます。最後に、 &lt;code&gt;normalize&lt;/code&gt; メソッドはアクセントを適切な正規の順序に再配置するため、自分でアクセントの再配置を心配する必要はありません。</target>
        </trans-unit>
        <trans-unit id="5f52e6638e3eca203f0c48df0632a417ad5518e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;notations&lt;/code&gt;&lt;code&gt;NamedNodeMaps&lt;/code&gt; are equal.</source>
          <target state="translated">&lt;code&gt;NamedNodeMaps&lt;/code&gt; の &lt;code&gt;notations&lt;/code&gt; は同じです。</target>
        </trans-unit>
        <trans-unit id="63cf4faf44647d95951cea7798d0b85f615c45ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ns&lt;/code&gt; parameter may be negative, even though the &lt;code&gt;skip&lt;/code&gt; method of the &lt;a href=&quot;reader&quot;&gt;&lt;code&gt;Reader&lt;/code&gt;&lt;/a&gt; superclass throws an exception in this case. Negative values of &lt;code&gt;ns&lt;/code&gt; cause the stream to skip backwards. Negative return values indicate a skip backwards. It is not possible to skip backwards past the beginning of the string.</source>
          <target state="translated">この場合、&lt;a href=&quot;reader&quot;&gt; &lt;code&gt;Reader&lt;/code&gt; &lt;/a&gt;スーパークラスの &lt;code&gt;skip&lt;/code&gt; メソッドが例外をスローしますが、 &lt;code&gt;ns&lt;/code&gt; パラメータは負の値になる場合があります。 &lt;code&gt;ns&lt;/code&gt; の負の値は、ストリームを逆方向にスキップさせます。負の戻り値は後方にスキップすることを示します。文字列の先頭を越えて後方にスキップすることはできません。</target>
        </trans-unit>
        <trans-unit id="e0fcc06e98814dd87a3c62b985949fba60bdb550" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; argument is the index of the first byte of the subarray, and the &lt;code&gt;count&lt;/code&gt; argument specifies the length of the subarray.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; 引数は部分配列の先頭のバイトのインデックスであり、 &lt;code&gt;count&lt;/code&gt; 引数は部分配列の長さを指定します。</target>
        </trans-unit>
        <trans-unit id="baa0351e008899618db6b64da0e758694ddf41eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; argument is the index of the first character of the subarray. The &lt;code&gt;count&lt;/code&gt; argument specifies the length of the subarray. The contents of the subarray are copied; subsequent modification of the character array does not affect the returned string.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; 引数は、部分配列の最初の文字のインデックスです。 &lt;code&gt;count&lt;/code&gt; 引数は部分配列の長さを指定します。サブ配列の内容がコピーされます。その後の文字配列の変更は、返される文字列には影響しません。</target>
        </trans-unit>
        <trans-unit id="9c01d1aa6c77241f92e51f28f20db5fb08e4c253" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;charsequence#length()&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; 引数がより大きいか等しくなければならない &lt;code&gt;0&lt;/code&gt; 、未満又は等しい&lt;a href=&quot;charsequence#length()&quot;&gt;長さ&lt;/a&gt;この配列の。</target>
        </trans-unit>
        <trans-unit id="7d930134c90bf6d49ed3db167b3ffa23d64e6b5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;stringbuffer#length--&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; 引数がより大きいか等しくなければならない &lt;code&gt;0&lt;/code&gt; 、未満又は等しい&lt;a href=&quot;stringbuffer#length--&quot;&gt;長さ&lt;/a&gt;この配列の。</target>
        </trans-unit>
        <trans-unit id="5649ec97e26cd383b62037dbe7726158b1b2a542" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;offset&lt;/code&gt; argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than or equal to the &lt;a href=&quot;stringbuilder#length--&quot;&gt;length&lt;/a&gt; of this sequence.</source>
          <target state="translated">&lt;code&gt;offset&lt;/code&gt; 引数がより大きいか等しくなければならない &lt;code&gt;0&lt;/code&gt; 、未満又は等しい&lt;a href=&quot;stringbuilder#length--&quot;&gt;長さ&lt;/a&gt;この配列の。</target>
        </trans-unit>
        <trans-unit id="2d5b4d40ecb1db6747499e6955bb54e7c954105e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;openAttributes&lt;/code&gt;, &lt;code&gt;openConstructors&lt;/code&gt;, &lt;code&gt;
 openOperations&lt;/code&gt; and &lt;code&gt;notifications&lt;/code&gt; array parameters are internally copied, so that subsequent changes to the arrays referenced by these parameters have no effect on this instance.</source>
          <target state="translated">&lt;code&gt;openAttributes&lt;/code&gt; 、 &lt;code&gt;openConstructors&lt;/code&gt; 、 &lt;code&gt; openOperations&lt;/code&gt; 及び &lt;code&gt;notifications&lt;/code&gt; 配列パラメータは、内部で、これらのパラメータによって参照配列に対する後続の変更は、このインスタンスに影響を及ぼさないように、コピーされます。</target>
        </trans-unit>
        <trans-unit id="4b47fbce935f5d028b77339d1ef9818c0b7586f4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;openAttributes&lt;/code&gt;, &lt;code&gt;openConstructors&lt;/code&gt;, &lt;code&gt;openOperations&lt;/code&gt; and &lt;code&gt;notifications&lt;/code&gt; array parameters are internally copied, so that subsequent changes to the arrays referenced by these parameters have no effect on this instance.</source>
          <target state="translated">&lt;code&gt;openAttributes&lt;/code&gt; 、 &lt;code&gt;openConstructors&lt;/code&gt; 、 &lt;code&gt;openOperations&lt;/code&gt; 及び &lt;code&gt;notifications&lt;/code&gt; 配列パラメータは、内部で、これらのパラメータによって参照配列に対する後続の変更は、このインスタンスに影響を及ぼさないように、コピーされます。</target>
        </trans-unit>
        <trans-unit id="d6983d2110c5fe985de448c67aa2a3f5fba3481e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; array may be used to indicate how symbolic links are handled by the resulting file attribute view for the case that the file is a symbolic link. By default, symbolic links are followed. If the option &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt;&lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt;&lt;/a&gt; is present then symbolic links are not followed. This option is ignored by implementations that do not support symbolic links.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 配列は、シンボリックリンクが、ファイルがシンボリックリンクである場合の結果のファイル属性ビューでどのように扱われるかを示すために使用することができます。デフォルトでは、シンボリックリンクをたどります。オプション&lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt; &lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt; &lt;/a&gt;が存在する場合、シンボリックリンクは追跡されません。このオプションは、シンボリックリンクをサポートしない実装では無視されます。</target>
        </trans-unit>
        <trans-unit id="e205a1262affb513a2bd877857ae965e9d442d7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt;&lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt;&lt;/a&gt; is present then symbolic links are not followed.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 配列は、ファイルがシンボリックリンクであった場合のためにどのように処理されるか、シンボリックリンクを示すために使用することができます。デフォルトでは、シンボリックリンクがたどられ、リンクの最終ターゲットのファイル属性が読み取られます。オプション&lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt; &lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt; &lt;/a&gt;が存在する場合、シンボリックリンクは追跡されません。</target>
        </trans-unit>
        <trans-unit id="07b7edf8d716c1c078bf2b1c0f91fb4940940f39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is set. If the option &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt;&lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt;&lt;/a&gt; is present then symbolic links are not followed.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 配列は、ファイルがシンボリックリンクであった場合のためにどのように処理されるか、シンボリックリンクを示すために使用することができます。デフォルトでは、シンボリックリンクがたどられ、リンクの最終ターゲットのファイル属性が設定されます。オプション&lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt; &lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt; &lt;/a&gt;が存在する場合、シンボリックリンクは追跡されません。</target>
        </trans-unit>
        <trans-unit id="d06342b773fea6549bc89fc2462a7083b70f4fb7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; array may be used to indicate how symbolic links are handled. By default, symbolic links are resolved to their final target. If the option &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt;&lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt;&lt;/a&gt; is present then this method does not resolve symbolic links. Some implementations allow special names such as &quot;&lt;code&gt;..&lt;/code&gt;&quot; to refer to the parent directory. When deriving the &lt;em&gt;real path&lt;/em&gt;, and a &quot;&lt;code&gt;..&lt;/code&gt;&quot; (or equivalent) is preceded by a non-&quot;&lt;code&gt;..&lt;/code&gt;&quot; name then an implementation will typically cause both names to be removed. When not resolving symbolic links and the preceding name is a symbolic link then the names are only removed if it guaranteed that the resulting path will locate the same file as this path.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 配列は、シンボリックリンクがどのように処理されるかを示すために使用することができます。デフォルトでは、シンボリックリンクは最終的なターゲットに解決されます。オプション&lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt; &lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt; &lt;/a&gt;が存在する場合、このメソッドはシンボリックリンクを解決しません。一部の実装では、「 &lt;code&gt;..&lt;/code&gt; 」などの特別な名前で親ディレクトリを参照できます。&lt;em&gt;実際のパスを&lt;/em&gt;導出するときに、「 &lt;code&gt;..&lt;/code&gt; 」（または同等のもの）の前に「 &lt;code&gt;..&lt;/code&gt; 」以外の名前を付けると、通常、実装によって両方の名前が削除されます。シンボリックリンクを解決せず、前の名前がシンボリックリンクである場合、結果のパスがこのパスと同じファイルを見つけることが保証されている場合にのみ、名前が削除されます。</target>
        </trans-unit>
        <trans-unit id="f5a345ea481a9989b3e67c3fdfaa252ee2038c96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter determines how the file is opened. If no options are present then it is equivalent to opening the file with the &lt;a href=&quot;standardopenoption#READ&quot;&gt;&lt;code&gt;READ&lt;/code&gt;&lt;/a&gt; option. In addition to the &lt;code&gt;
 READ&lt;/code&gt; option, an implementation may also support additional implementation specific options.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータは、ファイルが開かれた方法を決定します。オプションが存在しない場合は、&lt;a href=&quot;standardopenoption#READ&quot;&gt; &lt;code&gt;READ&lt;/code&gt; &lt;/a&gt;オプションを使用してファイルを開くのと同じです。 &lt;code&gt; READ&lt;/code&gt; オプションに加えて、実装は追加の実装固有のオプションもサポートする場合があります。</target>
        </trans-unit>
        <trans-unit id="0bc9bb7ec20a4fcc37fab92a84728a3be6a3d529" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter determines how the file is opened. If no options are present then it is equivalent to opening the file with the &lt;a href=&quot;standardopenoption#READ&quot;&gt;&lt;code&gt;READ&lt;/code&gt;&lt;/a&gt; option. In addition to the &lt;code&gt;READ&lt;/code&gt; option, an implementation may also support additional implementation specific options.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータは、ファイルが開かれた方法を決定します。オプションが存在しない場合は、&lt;a href=&quot;standardopenoption#READ&quot;&gt; &lt;code&gt;READ&lt;/code&gt; &lt;/a&gt;オプションでファイルを開くのと同じです。 &lt;code&gt;READ&lt;/code&gt; オプションに加えて、実装は追加の実装固有のオプションもサポートします。</target>
        </trans-unit>
        <trans-unit id="feb5d322a388c3217a1ff698a06ad00e166739fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter determines how the file is opened. The &lt;a href=&quot;../file/standardopenoption#READ&quot;&gt;&lt;code&gt;READ&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../file/standardopenoption#WRITE&quot;&gt;&lt;code&gt;WRITE&lt;/code&gt;&lt;/a&gt; options determine if the file should be opened for reading and/or writing. If neither option (or the &lt;a href=&quot;../file/standardopenoption#APPEND&quot;&gt;&lt;code&gt;APPEND&lt;/code&gt;&lt;/a&gt; option) is contained in the array then the file is opened for reading. By default reading or writing commences at the beginning of the file.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータは、ファイルが開かれた方法を決定します。&lt;a href=&quot;../file/standardopenoption#READ&quot;&gt; &lt;code&gt;READ&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../file/standardopenoption#WRITE&quot;&gt; &lt;code&gt;WRITE&lt;/code&gt; の&lt;/a&gt;ファイルは読み取りおよび/または書き込み用にオープンする必要がある場合のオプションが決定します。どちらのオプション（または&lt;a href=&quot;../file/standardopenoption#APPEND&quot;&gt; &lt;code&gt;APPEND&lt;/code&gt; &lt;/a&gt;オプション）も配列に含まれていない場合、ファイルは読み取り用に開かれます。デフォルトでは、ファイルの先頭から読み取りまたは書き込みが開始されます。</target>
        </trans-unit>
        <trans-unit id="c735a8e347a9d0b0ecd22343769651f2ac14125f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter determines how the file is opened. The &lt;a href=&quot;../file/standardopenoption#READ&quot;&gt;&lt;code&gt;READ&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../file/standardopenoption#WRITE&quot;&gt;&lt;code&gt;WRITE&lt;/code&gt;&lt;/a&gt; options determines if the file should be opened for reading and/or writing. If neither option is contained in the array then an existing file is opened for reading.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータは、ファイルが開かれた方法を決定します。&lt;a href=&quot;../file/standardopenoption#READ&quot;&gt; &lt;code&gt;READ&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../file/standardopenoption#WRITE&quot;&gt; &lt;code&gt;WRITE&lt;/code&gt; &lt;/a&gt;ファイルは読み取りおよび/または書き込み用にオープンする必要がある場合のオプションが決定されます。どちらのオプションも配列に含まれていない場合、既存のファイルが読み取り用に開かれます。</target>
        </trans-unit>
        <trans-unit id="70441efdb55fa14107d32cb84dfbb03932007cdd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter determines how the file is opened. The &lt;a href=&quot;standardopenoption#READ&quot;&gt;&lt;code&gt;READ&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;standardopenoption#WRITE&quot;&gt;&lt;code&gt;WRITE&lt;/code&gt;&lt;/a&gt; options determine if the file should be opened for reading and/or writing. If neither option (or the &lt;a href=&quot;standardopenoption#APPEND&quot;&gt;&lt;code&gt;APPEND&lt;/code&gt;&lt;/a&gt; option) is present then the file is opened for reading. By default reading or writing commence at the beginning of the file.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータは、ファイルが開かれた方法を決定します。&lt;a href=&quot;standardopenoption#READ&quot;&gt; &lt;code&gt;READ&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;standardopenoption#WRITE&quot;&gt; &lt;code&gt;WRITE&lt;/code&gt; の&lt;/a&gt;ファイルは読み取りおよび/または書き込み用にオープンする必要がある場合のオプションが決定します。どちらのオプション（または&lt;a href=&quot;standardopenoption#APPEND&quot;&gt; &lt;code&gt;APPEND&lt;/code&gt; &lt;/a&gt;オプション）も存在しない場合、ファイルは読み取り用に開かれます。デフォルトでは、ファイルの先頭で読み取りまたは書き込みが開始されます。</target>
        </trans-unit>
        <trans-unit id="adaafaa0c2c26b989f9f5f2e8716f29c6f11b35c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed. If the option &lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt;&lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt;&lt;/a&gt; is present then symbolic links are not followed.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータは、ファイルがシンボリックリンクであった場合のためにどのように処理されるか、シンボリックリンクを示すために使用することができます。デフォルトでは、シンボリックリンクをたどります。オプション&lt;a href=&quot;linkoption#NOFOLLOW_LINKS&quot;&gt; &lt;code&gt;NOFOLLOW_LINKS&lt;/code&gt; &lt;/a&gt;が存在する場合、シンボリックリンクは追跡されません。</target>
        </trans-unit>
        <trans-unit id="e88e22b5339b7c784d561d64428df97e00625dcf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter may include any of the following:</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; パラメータは、次のいずれかを含むことができます。</target>
        </trans-unit>
        <trans-unit id="4b13774c0241962d758bb9e487f1b8e4b324b63e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter specifies how the file is created or opened. If no options are present then this method works as if the &lt;a href=&quot;standardopenoption#CREATE&quot;&gt;&lt;code&gt;CREATE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;standardopenoption#TRUNCATE_EXISTING&quot;&gt;&lt;code&gt;TRUNCATE_EXISTING&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;standardopenoption#WRITE&quot;&gt;&lt;code&gt;WRITE&lt;/code&gt;&lt;/a&gt; options are present. In other words, it opens the file for writing, creating the file if it doesn't exist, or initially truncating an existing &lt;a href=&quot;#isRegularFile(java.nio.file.Path,java.nio.file.LinkOption...)&quot;&gt;&lt;code&gt;regular-file&lt;/code&gt;&lt;/a&gt; to a size of &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; ファイルを作成したり開いたりする方法を指定するパラメータ。オプションが存在しない場合、このメソッドは、&lt;a href=&quot;standardopenoption#CREATE&quot;&gt; &lt;code&gt;CREATE&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;standardopenoption#TRUNCATE_EXISTING&quot;&gt; &lt;code&gt;TRUNCATE_EXISTING&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;standardopenoption#WRITE&quot;&gt; &lt;code&gt;WRITE&lt;/code&gt; &lt;/a&gt;オプションが存在するかのように機能します。つまり、書き込み用にファイルを開くか、ファイルが存在しない場合はファイルを作成するか、最初に既存の&lt;a href=&quot;#isRegularFile(java.nio.file.Path,java.nio.file.LinkOption...)&quot;&gt; &lt;code&gt;regular-file&lt;/code&gt; &lt;/a&gt;をサイズ &lt;code&gt;0&lt;/code&gt; に切り捨てます。</target>
        </trans-unit>
        <trans-unit id="9f9d8a105de341349c54bc6855f4dc3514259ce3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter specifies how the file is created or opened. If no options are present then this method works as if the &lt;a href=&quot;standardopenoption#CREATE&quot;&gt;&lt;code&gt;CREATE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;standardopenoption#TRUNCATE_EXISTING&quot;&gt;&lt;code&gt;TRUNCATE_EXISTING&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;standardopenoption#WRITE&quot;&gt;&lt;code&gt;WRITE&lt;/code&gt;&lt;/a&gt; options are present. In other words, it opens the file for writing, creating the file if it doesn't exist, or initially truncating an existing &lt;a href=&quot;#isRegularFile(java.nio.file.Path,java.nio.file.LinkOption...)&quot;&gt;&lt;code&gt;regular-file&lt;/code&gt;&lt;/a&gt; to a size of &lt;code&gt;0&lt;/code&gt;. The method ensures that the file is closed when all lines have been written (or an I/O error or other runtime exception is thrown). If an I/O error occurs then it may do so after the file has been created or truncated, or after some bytes have been written to the file.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; ファイルを作成したり開いたりする方法を指定するパラメータ。オプションが存在しない場合、このメソッドは、&lt;a href=&quot;standardopenoption#CREATE&quot;&gt; &lt;code&gt;CREATE&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;standardopenoption#TRUNCATE_EXISTING&quot;&gt; &lt;code&gt;TRUNCATE_EXISTING&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;standardopenoption#WRITE&quot;&gt; &lt;code&gt;WRITE&lt;/code&gt; &lt;/a&gt;オプションが存在するかのように機能します。つまり、書き込み用にファイルを開くか、ファイルが存在しない場合はファイルを作成するか、最初に既存の&lt;a href=&quot;#isRegularFile(java.nio.file.Path,java.nio.file.LinkOption...)&quot;&gt; &lt;code&gt;regular-file&lt;/code&gt; &lt;/a&gt;をサイズ &lt;code&gt;0&lt;/code&gt; に切り捨てます。このメソッドは、すべての行が書き込まれたとき（または、I / Oエラーまたはその他のランタイム例外がスローされたとき）にファイルが確実に閉じられるようにします。 I / Oエラーが発生した場合は、ファイルが作成または切り捨てられた後、またはいくつかのバイトがファイルに書き込まれた後に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="6c00a59ba94adcb6905e3dd085514e8e2f27d12a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;options&lt;/code&gt; parameter specifies how the the file is created or opened. If no options are present then this method works as if the &lt;a href=&quot;standardopenoption#CREATE&quot;&gt;&lt;code&gt;CREATE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;standardopenoption#TRUNCATE_EXISTING&quot;&gt;&lt;code&gt;TRUNCATE_EXISTING&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;standardopenoption#WRITE&quot;&gt;&lt;code&gt;WRITE&lt;/code&gt;&lt;/a&gt; options are present. In other words, it opens the file for writing, creating the file if it doesn't exist, or initially truncating an existing &lt;a href=&quot;files#isRegularFile-java.nio.file.Path-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;regular-file&lt;/code&gt;&lt;/a&gt; to a size of &lt;code&gt;0&lt;/code&gt;. The method ensures that the file is closed when all lines have been written (or an I/O error or other runtime exception is thrown). If an I/O error occurs then it may do so after the file has created or truncated, or after some bytes have been written to the file.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; ファイルを作成したり開いたりする方法を指定するパラメータ。オプションが存在しない場合、このメソッドは、&lt;a href=&quot;standardopenoption#CREATE&quot;&gt; &lt;code&gt;CREATE&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;standardopenoption#TRUNCATE_EXISTING&quot;&gt; &lt;code&gt;TRUNCATE_EXISTING&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;standardopenoption#WRITE&quot;&gt; &lt;code&gt;WRITE&lt;/code&gt; &lt;/a&gt;オプションが存在するかのように機能します。つまり、書き込み用にファイルを開き、存在しない場合はファイルを作成するか、既存の&lt;a href=&quot;files#isRegularFile-java.nio.file.Path-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;regular-file&lt;/code&gt; &lt;/a&gt;を最初にサイズ &lt;code&gt;0&lt;/code&gt; に切り捨てます。このメソッドは、すべての行が書き込まれたときに（またはI / Oエラーまたはその他の実行時例外がスローされたときに）ファイルが確実に閉じられるようにします。 I / Oエラーが発生した場合、ファイルが作成または切り捨てられた後、またはファイルにいくつかのバイトが書き込まれた後に発生することがあります。</target>
        </trans-unit>
        <trans-unit id="19ea8dcb435d7496383db34913da36823ca371d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;orientation&lt;/code&gt; argument must take one of the two values &lt;code&gt;Scrollbar.HORIZONTAL&lt;/code&gt;, or &lt;code&gt;Scrollbar.VERTICAL&lt;/code&gt;, indicating a horizontal or vertical scroll bar, respectively.</source>
          <target state="translated">&lt;code&gt;orientation&lt;/code&gt; 引数は、2つの値のいずれかなければならない &lt;code&gt;Scrollbar.HORIZONTAL&lt;/code&gt; 、または &lt;code&gt;Scrollbar.VERTICAL&lt;/code&gt; それぞれ、水平または垂直スクロールバーを示します。</target>
        </trans-unit>
        <trans-unit id="d38cc57bdb401fa5458030b8203d68a47b6b87cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;outputMimeType&lt;/code&gt; parameter describes the document type that you want to create, whereas the &lt;code&gt;flavor&lt;/code&gt; parameter describes the format in which the input data will be provided by the application to the &lt;code&gt;StreamPrintService&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;outputMimeType&lt;/code&gt; のに対し、パラメータは、作成することを文書タイプを記述する &lt;code&gt;flavor&lt;/code&gt; パラメータが入力されたデータは、へのアプリケーションによって提供されるフォーマットについて説明し &lt;code&gt;StreamPrintService&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8257034935941be3f0b0a79bcb02da45c170ab8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ownerElement&lt;/code&gt; attribute is set to &lt;code&gt;null&lt;/code&gt; and the &lt;code&gt;specified&lt;/code&gt; flag is set to &lt;code&gt;true&lt;/code&gt; on the adopted &lt;code&gt;Attr&lt;/code&gt;. The descendants of the source &lt;code&gt;Attr&lt;/code&gt; are recursively adopted.</source>
          <target state="translated">&lt;code&gt;ownerElement&lt;/code&gt; 属性に設定されている &lt;code&gt;null&lt;/code&gt; と &lt;code&gt;specified&lt;/code&gt; フラグが設定されている &lt;code&gt;true&lt;/code&gt; 採用上 &lt;code&gt;Attr&lt;/code&gt; 。ソース &lt;code&gt;Attr&lt;/code&gt; の子孫が再帰的に採用されます。</target>
        </trans-unit>
        <trans-unit id="db95ff142963f6cc3449f48fbd4ccbf6c3102b9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ownerElement&lt;/code&gt; attribute is set to &lt;code&gt;null&lt;/code&gt; and the &lt;code&gt;specified&lt;/code&gt; flag is set to &lt;code&gt;true&lt;/code&gt; on the generated &lt;code&gt;Attr&lt;/code&gt;. The descendants of the source &lt;code&gt;Attr&lt;/code&gt; are recursively imported and the resulting nodes reassembled to form the corresponding subtree. Note that the &lt;code&gt;deep&lt;/code&gt; parameter has no effect on &lt;code&gt;Attr&lt;/code&gt; nodes; they always carry their children with them when imported.</source>
          <target state="translated">&lt;code&gt;ownerElement&lt;/code&gt; 属性がに設定され &lt;code&gt;null&lt;/code&gt; と &lt;code&gt;specified&lt;/code&gt; フラグが設定されている &lt;code&gt;true&lt;/code&gt; 生成に &lt;code&gt;Attr&lt;/code&gt; 。ソース &lt;code&gt;Attr&lt;/code&gt; の子孫が再帰的にインポートされ、結果のノードが再構築されて、対応するサブツリーが形成されます。 &lt;code&gt;deep&lt;/code&gt; パラメータは &lt;code&gt;Attr&lt;/code&gt; ノードに影響を与えないことに注意してください。輸入時には常に子供を連れて行きます。</target>
        </trans-unit>
        <trans-unit id="5c95aaf1fcdce3e672aff6748a9bdc1c5a92b1a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;packageFinder&lt;/code&gt; parameter is for use when reading module descriptors from legacy module-artifact formats that do not record the set of packages in the descriptor itself.</source>
          <target state="translated">&lt;code&gt;packageFinder&lt;/code&gt; の記述自体にパッケージのセットを記録していないレガシーモジュールアーティファクトのフォーマットからのモジュールの記述子を読み込むときにパラメータが使用するためのものです。</target>
        </trans-unit>
        <trans-unit id="c1d6a3e2666b292d57c5aab696b343f540ec638d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;params&lt;/code&gt; field now contains two elements, each of which is an array two elements long. The first element is the parameter number; the second is the value to be set. In this case, the first element of &lt;code&gt;params&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;5000&lt;/code&gt;, and the second element is &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;&quot;West&quot;&lt;/code&gt;. When an application calls the method &lt;code&gt;execute&lt;/code&gt;, it will in turn call on this &lt;code&gt;RowSet&lt;/code&gt; object's reader, which will in turn invoke its &lt;code&gt;readData&lt;/code&gt; method. As part of its implementation, &lt;code&gt;readData&lt;/code&gt; will get the values in &lt;code&gt;params&lt;/code&gt; and use them to set the command's placeholder parameters. The following code fragment gives an idea of how the reader does this, after obtaining the &lt;code&gt;Connection&lt;/code&gt; object &lt;code&gt;con&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; はのフィールドは現在、二つの要素長い配列でそれぞれが2つの要素を、含んでいます。最初の要素はパラメーター番号です。 2番目は設定する値です。この場合、最初の要素 &lt;code&gt;params&lt;/code&gt; がある &lt;code&gt;1&lt;/code&gt; 、 &lt;code&gt;5000&lt;/code&gt; 、及び第二の要素である &lt;code&gt;2&lt;/code&gt; 、 &lt;code&gt;&quot;West&quot;&lt;/code&gt; 。アプリケーションがメソッド &lt;code&gt;execute&lt;/code&gt; を呼び出すと、次にこの &lt;code&gt;RowSet&lt;/code&gt; オブジェクトのリーダーが呼び出され、次に &lt;code&gt;readData&lt;/code&gt; メソッドが呼び出されます。その実装の一部として、 &lt;code&gt;readData&lt;/code&gt; は &lt;code&gt;params&lt;/code&gt; の値を取得しますそれらを使用して、コマンドのプレースホルダーパラメーターを設定します。次のコードフラグメントは、 &lt;code&gt;Connection&lt;/code&gt; オブジェクト &lt;code&gt;con&lt;/code&gt; を取得した後、リーダーがこれをどのように行うかを示しています。</target>
        </trans-unit>
        <trans-unit id="edb61ce5d9acc2ab5ce76544d532094234d018a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parent&lt;/code&gt; argument determines two things: the frame on which the open dialog depends and the component whose position the look and feel should consider when placing the dialog. If the parent is a &lt;code&gt;Frame&lt;/code&gt; object (such as a &lt;code&gt;JFrame&lt;/code&gt;) then the dialog depends on the frame and the look and feel positions the dialog relative to the frame (for example, centered over the frame). If the parent is a component, then the dialog depends on the frame containing the component, and is positioned relative to the component (for example, centered over the component). If the parent is &lt;code&gt;null&lt;/code&gt;, then the dialog depends on no visible window, and it's placed in a look-and-feel-dependent position such as the center of the screen.</source>
          <target state="translated">&lt;code&gt;parent&lt;/code&gt; 開くダイアログが依存するフレームと位置ルックアンドフィールダイアログを配置するときに考慮すべきであるコンポーネント：引数は2つのことを決定します。親が &lt;code&gt;Frame&lt;/code&gt; オブジェクト（ &lt;code&gt;JFrame&lt;/code&gt; など）の場合、ダイアログはフレームに依存し、ルックアンドフィールはダイアログをフレームに対して相対的に配置します（たとえば、フレームの中央に配置します）。親がコンポーネントの場合、ダイアログはコンポーネントを含むフレームに依存し、コンポーネントに対して相対的に配置されます（たとえば、コンポーネントの中央に配置されます）。親が &lt;code&gt;null&lt;/code&gt; の場合、ダイアログは表示されているウィンドウに依存せず、画面の中央など、ルックアンドフィールに依存する位置に配置されます。</target>
        </trans-unit>
        <trans-unit id="64a8995d9ac05171aede64481f740265b7613585" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parseURL&lt;/code&gt; method of &lt;code&gt;URLStreamHandler&lt;/code&gt; parses the string representation as if it were an &lt;code&gt;http&lt;/code&gt; specification. Most URL protocol families have a similar parsing. A stream protocol handler for a protocol that has a different syntax must override this routine.</source>
          <target state="translated">&lt;code&gt;URLStreamHandler&lt;/code&gt; の &lt;code&gt;parseURL&lt;/code&gt; メソッドは、文字列表現を &lt;code&gt;http&lt;/code&gt; 仕様であるかのように解析します。ほとんどのURLプロトコルファミリは同様の解析を行います。構文が異なるプロトコルのストリームプロトコルハンドラは、このルーチンをオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="2221038019d4be2cb2f88fab060218d2d5a02e57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; parameter is associated with a &lt;code&gt;FileSystem&lt;/code&gt; that supports the &lt;a href=&quot;attribute/posixfileattributeview&quot;&gt;&lt;code&gt;PosixFileAttributeView&lt;/code&gt;&lt;/a&gt;. This attribute view provides access to file attributes commonly associated with files on file systems used by operating systems that implement the Portable Operating System Interface (POSIX) family of standards.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; パラメータが関連付けられている &lt;code&gt;FileSystem&lt;/code&gt; をサポート&lt;a href=&quot;attribute/posixfileattributeview&quot;&gt; &lt;code&gt;PosixFileAttributeView&lt;/code&gt; を&lt;/a&gt;。この属性ビューは、標準のポータブルオペレーティングシステムインターフェイス（POSIX）ファミリを実装するオペレーティングシステムによって使用されるファイルシステム上のファイルに一般的に関連付けられているファイル属性へのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="b249e9a3d9c0f37793a768ee4c126d9c0f3b49e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; parameter is associated with a file system that supports &lt;a href=&quot;attribute/fileownerattributeview&quot;&gt;&lt;code&gt;FileOwnerAttributeView&lt;/code&gt;&lt;/a&gt;. This file attribute view provides access to a file attribute that is the owner of the file.</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; パラメータがサポートするファイルシステムに関連付けられている&lt;a href=&quot;attribute/fileownerattributeview&quot;&gt; &lt;code&gt;FileOwnerAttributeView&lt;/code&gt; を&lt;/a&gt;。このファイル属性ビューは、ファイルの所有者であるファイル属性へのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="5493aef38945eeedee66c785a93a8e949626fc4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;perms&lt;/code&gt; parameter is a &lt;code&gt;String&lt;/code&gt; representing the permissions. It has 9 characters that are interpreted as three sets of three. The first set refers to the owner's permissions; the next to the group permissions and the last to others. Within each set, the first character is &lt;code&gt;'r'&lt;/code&gt; to indicate permission to read, the second character is &lt;code&gt;'w'&lt;/code&gt; to indicate permission to write, and the third character is &lt;code&gt;'x'&lt;/code&gt; for execute permission. Where a permission is not set then the corresponding character is set to &lt;code&gt;'-'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;perms&lt;/code&gt; パラメータがある &lt;code&gt;String&lt;/code&gt; のアクセス権を表します。3つの3つのセットとして解釈される9文字があります。最初のセットは所有者の権限を参照しています。グループの権限の隣と他の人の最後。各セット内で、最初の文字は &lt;code&gt;'r'&lt;/code&gt; 読み取り権限を示し、2番目の文字は &lt;code&gt;'w'&lt;/code&gt; 書き込み権限を示し、3番目の文字は &lt;code&gt;'x'&lt;/code&gt; で実行権限を示します。権限が設定されていない場合、対応する文字は &lt;code&gt;'-'&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="b9d482d82a8c67b95f55d10ab3dda1aad0c96b7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;persistPolicy&lt;/code&gt; and &lt;code&gt;currencyTimeLimit&lt;/code&gt; fields are meaningless for constructors, but are not considered invalid.</source>
          <target state="translated">&lt;code&gt;persistPolicy&lt;/code&gt; と &lt;code&gt;currencyTimeLimit&lt;/code&gt; フィールドは、コンストラクタに対して無意味ですが、無効と見なされていません。</target>
        </trans-unit>
        <trans-unit id="ca92d75fa54a7f375119b1732a1defda2c5a065a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;popup&lt;/code&gt; can be set on one &lt;code&gt;TrayIcon&lt;/code&gt; only. Setting the same popup on multiple &lt;code&gt;TrayIcon&lt;/code&gt;s will cause an &lt;code&gt;IllegalArgumentException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;popup&lt;/code&gt; 1つのに設定することができ &lt;code&gt;TrayIcon&lt;/code&gt; にのみ。複数の &lt;code&gt;TrayIcon&lt;/code&gt; に同じポップアップを設定すると、 &lt;code&gt;IllegalArgumentException&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="822e7053ed501794bcb73e078de627432ea24760" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pos&lt;/code&gt; argument may range between zero and</source>
          <target state="translated">&lt;code&gt;pos&lt;/code&gt; 引数がゼロとの間の範囲であり得ます</target>
        </trans-unit>
        <trans-unit id="0d4b8df143426535636c3d9fcf5d259dd494e8ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pos&lt;/code&gt; argument selects which parameters are to be bound. It may range between zero and</source>
          <target state="translated">&lt;code&gt;pos&lt;/code&gt; パラメータがバインドされる引数の選択。ゼロから</target>
        </trans-unit>
        <trans-unit id="1a88d4013b421f51fd6a8b134cf58266c11d071d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pred&lt;/code&gt; handle describes the loop condition; and &lt;code&gt;body&lt;/code&gt;, its body. The loop resulting from this method will, in each iteration, first evaluate the predicate and then execute its body (if the predicate evaluates to &lt;code&gt;true&lt;/code&gt;). The loop will terminate once the predicate evaluates to &lt;code&gt;false&lt;/code&gt; (the body will not be executed in this case).</source>
          <target state="translated">&lt;code&gt;pred&lt;/code&gt; ハンドルは、ループ条件を記述します。と &lt;code&gt;body&lt;/code&gt; 、その体。このメソッドから生じるループは、各反復で、最初に述語を評価し、次にその本体を実行します（述語が &lt;code&gt;true&lt;/code&gt; と評価された場合）。述語が &lt;code&gt;false&lt;/code&gt; と評価されると、ループは終了します（この場合、本体は実行されません）。</target>
        </trans-unit>
        <trans-unit id="a86ac63e6484dc40818acb31efed1223ef30cbe4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pred&lt;/code&gt; handle describes the loop condition; and &lt;code&gt;body&lt;/code&gt;, its body. The loop resulting from this method will, in each iteration, first execute its body and then evaluate the predicate. The loop will terminate once the predicate evaluates to &lt;code&gt;false&lt;/code&gt; after an execution of the body.</source>
          <target state="translated">&lt;code&gt;pred&lt;/code&gt; ハンドルは、ループ条件を記述します。と &lt;code&gt;body&lt;/code&gt; 、その体。このメソッドから生じるループは、各反復で、最初にその本体を実行し、次に述語を評価します。本文の実行後に述語が &lt;code&gt;false&lt;/code&gt; と評価されると、ループは終了します。</target>
        </trans-unit>
        <trans-unit id="83271b2397fc080adb45b6ed96f5fc2c799338f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pred&lt;/code&gt; handle must not be &lt;code&gt;null&lt;/code&gt;. It must have &lt;code&gt;boolean&lt;/code&gt; as its return type. Its parameter list (either empty or of the form &lt;code&gt;(V A*)&lt;/code&gt;) must be effectively identical to the internal parameter list.</source>
          <target state="translated">&lt;code&gt;pred&lt;/code&gt; ハンドルがあってはならない &lt;code&gt;null&lt;/code&gt; 。戻り &lt;code&gt;boolean&lt;/code&gt; としてブール値が必要です。そのパラメータリスト（空または形式 &lt;code&gt;(V A*)&lt;/code&gt; いずれか）は、内部パラメータリストと実質的に同一である必要があります。</target>
        </trans-unit>
        <trans-unit id="12d2f504fe0c18a15bb945c0612b6e3db966f980" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;preferredSize&lt;/code&gt; is only computed once, subsequent calls to this method just return a cached size.</source>
          <target state="translated">&lt;code&gt;preferredSize&lt;/code&gt; がが一度だけ計算され、このメソッドへの後続の呼び出しは、単にキャッシュされたサイズを返します。</target>
        </trans-unit>
        <trans-unit id="3295278a86db378f96ef38915c5399dfa8f46eb8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prefix&lt;/code&gt; argument must be at least three characters long. It is recommended that the prefix be a short, meaningful string such as &lt;code&gt;&quot;hjb&quot;&lt;/code&gt; or &lt;code&gt;&quot;mail&quot;&lt;/code&gt;. The &lt;code&gt;suffix&lt;/code&gt; argument may be &lt;code&gt;null&lt;/code&gt;, in which case the suffix &lt;code&gt;&quot;.tmp&quot;&lt;/code&gt; will be used.</source>
          <target state="translated">&lt;code&gt;prefix&lt;/code&gt; 引数は、少なくとも3つの文字でなければなりません。プレフィックスは、 &lt;code&gt;&quot;hjb&quot;&lt;/code&gt; や &lt;code&gt;&quot;mail&quot;&lt;/code&gt; などの短く意味のある文字列にすることをお勧めします。 &lt;code&gt;suffix&lt;/code&gt; 引数とすることができる &lt;code&gt;null&lt;/code&gt; サフィックス、その場合には、 &lt;code&gt;&quot;.tmp&quot;&lt;/code&gt; 使用されます。</target>
        </trans-unit>
        <trans-unit id="925230b553f62600c7f8ab6d82a4beb6853e7805" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;premain&lt;/code&gt; method has one of two possible signatures. The JVM first attempts to invoke the following method on the agent class:</source>
          <target state="translated">&lt;code&gt;premain&lt;/code&gt; メソッドは、2つの可能なシグネチャのうちの1つを有します。JVMは最初に、エージェントクラスで次のメソッドを呼び出そうとします。</target>
        </trans-unit>
        <trans-unit id="0521fbe64ec7e5f9ef121124473e0d97a004ca5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;r.width&lt;/code&gt; or &lt;code&gt;r.height&lt;/code&gt; values will be automatically enlarged if either is less than the minimum size as specified by previous call to &lt;code&gt;setMinimumSize&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;r.width&lt;/code&gt; 又は &lt;code&gt;r.height&lt;/code&gt; の前回の呼び出しで指定された以下の最小寸法よりもいずれかの場合に値が自動的に拡大される &lt;code&gt;setMinimumSize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e5caea50061710cec044d7be43530e50e1eb551a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;radix&lt;/code&gt; argument is valid if it is greater than or equal to &lt;code&gt;MIN_RADIX&lt;/code&gt; and less than or equal to &lt;code&gt;MAX_RADIX&lt;/code&gt;. The &lt;code&gt;digit&lt;/code&gt; argument is valid if &lt;code&gt;0 &amp;lt;= digit &amp;lt; radix&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;radix&lt;/code&gt; それがより大きいかに等しい場合の引数が有効で &lt;code&gt;MIN_RADIX&lt;/code&gt; 未満または等しい &lt;code&gt;MAX_RADIX&lt;/code&gt; 。 &lt;code&gt;digit&lt;/code&gt; 場合は引数が有効です &lt;code&gt;0 &amp;lt;= digit &amp;lt; radix&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b33942ad43fbe9d22cb9d95c4c4908fdaa08301" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;radix&lt;/code&gt; is either smaller than &lt;a href=&quot;character#MIN_RADIX&quot;&gt;&lt;code&gt;Character.MIN_RADIX&lt;/code&gt;&lt;/a&gt; or larger than &lt;a href=&quot;character#MAX_RADIX&quot;&gt;&lt;code&gt;Character.MAX_RADIX&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;radix&lt;/code&gt; いずれよりも小さい&lt;a href=&quot;character#MIN_RADIX&quot;&gt; &lt;code&gt;Character.MIN_RADIX&lt;/code&gt; &lt;/a&gt;又はより大きい&lt;a href=&quot;character#MAX_RADIX&quot;&gt; &lt;code&gt;Character.MAX_RADIX&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5d785142e5ab58037a089cd9e5a386011f0b7e09" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ranges&lt;/code&gt; to be given can take one of the following forms:</source>
          <target state="translated">&lt;code&gt;ranges&lt;/code&gt; 与えられるべきは、以下のいずれかの形式をとることができます。</target>
        </trans-unit>
        <trans-unit id="1259bcaaf2e03d5637399a403f2eed4bcb0658f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read(b)&lt;/code&gt; method for class &lt;code&gt;InputStream&lt;/code&gt; has the same effect as:</source>
          <target state="translated">クラス &lt;code&gt;InputStream&lt;/code&gt; の &lt;code&gt;read(b)&lt;/code&gt; メソッドの効果は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="4604e99f767c72aaa96525bf29f68941bb283ab2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read(b)&lt;/code&gt; method has the same effect as:</source>
          <target state="translated">&lt;code&gt;read(b)&lt;/code&gt; 方法と同じ効果を有します。</target>
        </trans-unit>
        <trans-unit id="d053108594714cc2e678b8a8b8bcae476c059c88" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read(b,&lt;/code&gt;&lt;code&gt;off,&lt;/code&gt;&lt;code&gt;len)&lt;/code&gt; method for class &lt;code&gt;InputStream&lt;/code&gt; simply calls the method &lt;code&gt;read()&lt;/code&gt; repeatedly. If the first such call results in an &lt;code&gt;IOException&lt;/code&gt;, that exception is returned from the call to the &lt;code&gt;read(b,&lt;/code&gt;&lt;code&gt;off,&lt;/code&gt;&lt;code&gt;len)&lt;/code&gt; method. If any subsequent call to &lt;code&gt;read()&lt;/code&gt; results in a &lt;code&gt;IOException&lt;/code&gt;, the exception is caught and treated as if it were end of file; the bytes read up to that point are stored into &lt;code&gt;b&lt;/code&gt; and the number of bytes read before the exception occurred is returned. The default implementation of this method blocks until the requested amount of input data &lt;code&gt;len&lt;/code&gt; has been read, end of file is detected, or an exception is thrown. Subclasses are encouraged to provide a more efficient implementation of this method.</source>
          <target state="translated">クラス &lt;code&gt;InputStream&lt;/code&gt; の &lt;code&gt;read(b,&lt;/code&gt; &lt;code&gt;off,&lt;/code&gt; &lt;code&gt;len)&lt;/code&gt; メソッドは、メソッド &lt;code&gt;read()&lt;/code&gt; を繰り返し呼び出すだけです。そのような最初の呼び出しの結果が &lt;code&gt;IOException&lt;/code&gt; になる場合、その例外は呼び出しから &lt;code&gt;read(b,&lt;/code&gt; &lt;code&gt;off,&lt;/code&gt; &lt;code&gt;len)&lt;/code&gt; メソッドに返されます。後続の呼び出しがする場合 &lt;code&gt;read()&lt;/code&gt; で結果を &lt;code&gt;IOException&lt;/code&gt; が、例外が捕捉され、それがファイルの終わりであるかのように処理しました。その時点までに読み取られたバイトは &lt;code&gt;b&lt;/code&gt; に格納され、例外が発生する前に読み取られたバイト数が返されます。このメソッドのデフォルト実装は、要求された量の入力データ &lt;code&gt;len&lt;/code&gt; までブロックします。読み取られたか、ファイルの終わりが検出されたか、または例外がスローされました。サブクラスは、このメソッドのより効率的な実装を提供することが推奨されます。</target>
        </trans-unit>
        <trans-unit id="d73e15d99486a3edb623a542384b22544dac32ad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;InputStream&lt;/code&gt; calls the &lt;code&gt;read&lt;/code&gt; method of three arguments with the arguments &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;b.length&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; の方法 &lt;code&gt;InputStream&lt;/code&gt; 呼び出して &lt;code&gt;read&lt;/code&gt; 3つの引数と引数の方法 &lt;code&gt;b&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; 、および &lt;code&gt;b.length&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7efed5a820d4dabed25b8a28bd1df6414d7e77e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;LineNumberInputStream&lt;/code&gt; calls the &lt;code&gt;read&lt;/code&gt; method of the underlying input stream. It checks for carriage returns and newline characters in the input, and modifies the current line number as appropriate. A carriage-return character or a carriage return followed by a newline character are both converted into a single newline character.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; の方法 &lt;code&gt;LineNumberInputStream&lt;/code&gt; は、呼び出して &lt;code&gt;read&lt;/code&gt; 基本となる入力ストリームの方法を。入力のキャリッジリターンと改行文字をチェックし、必要に応じて現在の行番号を変更します。復帰文字または復帰とそれに続く改行文字は、どちらも単一の改行文字に変換されます。</target>
        </trans-unit>
        <trans-unit id="4d12f1e1c60d3ded7ff55ddd8ec9fa42dcbe1312" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;LineNumberInputStream&lt;/code&gt; repeatedly calls the &lt;code&gt;read&lt;/code&gt; method of zero arguments to fill in the byte array.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; の方法 &lt;code&gt;LineNumberInputStream&lt;/code&gt; は、繰り返し呼び出して &lt;code&gt;read&lt;/code&gt; 、バイト配列を埋めるためにゼロ引数の方法を。</target>
        </trans-unit>
        <trans-unit id="9c073aae985b3b46c91c5b9276bb615fd3d6afcd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;SequenceInputStream&lt;/code&gt; tries to read the data from the current substream. If it fails to read any characters because the substream has reached the end of the stream, it calls the &lt;code&gt;close&lt;/code&gt; method of the current substream and begins reading from the next substream.</source>
          <target state="translated">&lt;code&gt;SequenceInputStream&lt;/code&gt; の &lt;code&gt;read&lt;/code&gt; メソッドは、現在のサブストリームからデータを読み取ろうとします。サブストリームがストリームの終わりに達したために文字の読み取りに失敗した場合、現在のサブストリームの &lt;code&gt;close&lt;/code&gt; メソッドを呼び出し、次のサブストリームから読み取りを開始します。</target>
        </trans-unit>
        <trans-unit id="266c4f3bc071054256173e68adbd4a6e7656ec4f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;StringBufferInputStream&lt;/code&gt; cannot block. It copies the low eight bits from the characters in this input stream's buffer into the byte array argument.</source>
          <target state="translated">&lt;code&gt;StringBufferInputStream&lt;/code&gt; の &lt;code&gt;read&lt;/code&gt; メソッドはブロックできません。この入力ストリームのバッファ内の文字から下位8ビットをバイト配列引数にコピーします。</target>
        </trans-unit>
        <trans-unit id="e61745f20485b6632a27794087bfb013bec50ba7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of &lt;code&gt;StringBufferInputStream&lt;/code&gt; cannot block. It returns the low eight bits of the next character in this input stream's buffer.</source>
          <target state="translated">&lt;code&gt;StringBufferInputStream&lt;/code&gt; の &lt;code&gt;read&lt;/code&gt; メソッドはブロックできません。この入力ストリームのバッファにある次の文字の下位8ビットを返します。</target>
        </trans-unit>
        <trans-unit id="b68abbad5ba6fb28f94eaadf9085c6dda28742eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; method of the underlying stream returns &lt;code&gt;-1&lt;/code&gt;, indicating end-of-file, or</source>
          <target state="translated">基本となるストリームの &lt;code&gt;read&lt;/code&gt; メソッドは &lt;code&gt;-1&lt;/code&gt; を返し、ファイルの終わりを示します。</target>
        </trans-unit>
        <trans-unit id="3c7f1342e13b19c7f98cefc6efd106f8e231e650" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; methods of the resulting stream will throw an &lt;a href=&quot;illegalblockingmodeexception&quot;&gt;&lt;code&gt;IllegalBlockingModeException&lt;/code&gt;&lt;/a&gt; if invoked while the underlying channel is in non-blocking mode. The stream will not be buffered, and it will not support the &lt;a href=&quot;../../io/inputstream#mark(int)&quot;&gt;&lt;code&gt;mark&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../io/inputstream#reset()&quot;&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/a&gt; methods. The stream will be safe for access by multiple concurrent threads. Closing the stream will in turn cause the channel to be closed.</source>
          <target state="translated">結果のストリームの &lt;code&gt;read&lt;/code&gt; メソッドは、基になるチャネルが非ブロッキングモードのときに呼び出されると、&lt;a href=&quot;illegalblockingmodeexception&quot;&gt; &lt;code&gt;IllegalBlockingModeException&lt;/code&gt; &lt;/a&gt;をスローします。ストリームはバッファリングされず、&lt;a href=&quot;../../io/inputstream#mark(int)&quot;&gt; &lt;code&gt;mark&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../io/inputstream#reset()&quot;&gt; &lt;code&gt;reset&lt;/code&gt; &lt;/a&gt;メソッドをサポートしません。ストリームは、複数の同時スレッドによるアクセスに対して安全になります。ストリームを閉じると、チャネルが閉じられます。</target>
        </trans-unit>
        <trans-unit id="6ff4f563e5b69d4b6268d50e4aa9d51aa5725103" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; methods of the resulting stream will throw an &lt;a href=&quot;illegalblockingmodeexception&quot;&gt;&lt;code&gt;IllegalBlockingModeException&lt;/code&gt;&lt;/a&gt; if invoked while the underlying channel is in non-blocking mode. The stream will not be buffered, and it will not support the &lt;a href=&quot;../../io/inputstream#mark-int-&quot;&gt;&lt;code&gt;mark&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../io/inputstream#reset--&quot;&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/a&gt; methods. The stream will be safe for access by multiple concurrent threads. Closing the stream will in turn cause the channel to be closed.</source>
          <target state="translated">基になるチャネルが非ブロッキングモードのときに呼び出された場合、結果のストリームの &lt;code&gt;read&lt;/code&gt; メソッドは&lt;a href=&quot;illegalblockingmodeexception&quot;&gt; &lt;code&gt;IllegalBlockingModeException&lt;/code&gt; &lt;/a&gt;をスローします。ストリームはバッファリングされず、&lt;a href=&quot;../../io/inputstream#mark-int-&quot;&gt; &lt;code&gt;mark&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../io/inputstream#reset--&quot;&gt; &lt;code&gt;reset&lt;/code&gt; &lt;/a&gt;メソッドをサポートしません。ストリームは、複数の同時スレッドによるアクセスに対して安全になります。ストリームを閉じると、チャネルが閉じられます。</target>
        </trans-unit>
        <trans-unit id="3b7ea7159daa93e13abc58f5ee72d1aa9624ff2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read&lt;/code&gt; methods of the returned &lt;code&gt;InputStream&lt;/code&gt; will throw &lt;code&gt;IOException&lt;/code&gt; when reading bytes that cannot be decoded.</source>
          <target state="translated">デコードできないバイトを読み取る &lt;code&gt;IOException&lt;/code&gt; 、返された &lt;code&gt;InputStream&lt;/code&gt; の &lt;code&gt;read&lt;/code&gt; メソッドはIOExceptionをスローします。</target>
        </trans-unit>
        <trans-unit id="05a4ee599465096efb07afcd435e0618463168e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readData&lt;/code&gt; method adds rows to the caller. It can be implemented in a wide variety of ways and can even populate the caller with rows from a nonrelational data source. In general, a reader may invoke any of the rowset's methods, with one exception. Calling the method &lt;code&gt;execute&lt;/code&gt; will cause an &lt;code&gt;SQLException&lt;/code&gt; to be thrown because &lt;code&gt;execute&lt;/code&gt; may not be called recursively. Also, when a reader invokes &lt;code&gt;RowSet&lt;/code&gt; methods, no listeners are notified; that is, no &lt;code&gt;RowSetEvent&lt;/code&gt; objects are generated and no &lt;code&gt;RowSetListener&lt;/code&gt; methods are invoked. This is true because listeners are already being notified by the method &lt;code&gt;execute&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;readData&lt;/code&gt; メソッドは、呼び出し元に行を追加します。さまざまな方法で実装でき、非リレーショナルデータソースからの行を呼び出し元に入力することもできます。一般に、リーダーは、1つの例外を除いて、行セットの任意のメソッドを呼び出すことができます。メソッドが呼び出し &lt;code&gt;execute&lt;/code&gt; 原因となります &lt;code&gt;SQLException&lt;/code&gt; がためにスローされるように &lt;code&gt;execute&lt;/code&gt; 再帰的に呼び出されないことがあります。また、リーダーが &lt;code&gt;RowSet&lt;/code&gt; メソッドを呼び出すと、リスナーは通知されません。つまり、 &lt;code&gt;RowSetEvent&lt;/code&gt; オブジェクトは生成されず、 &lt;code&gt;RowSetListener&lt;/code&gt; メソッドは呼び出されません。これは、リスナーがメソッド &lt;code&gt;execute&lt;/code&gt; によってすでに通知されているためです。</target>
        </trans-unit>
        <trans-unit id="b52f6c80e4a3c11df2890b54a5a8b3b1218aeabd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readlimit&lt;/code&gt; argument tells this input stream to allow that many bytes to be read before the mark position gets invalidated.</source>
          <target state="translated">&lt;code&gt;readlimit&lt;/code&gt; の引数は、マーク位置が無効になる前に多くのバイトを読み取ることができるようにすることを、この入力ストリームを伝えます。</target>
        </trans-unit>
        <trans-unit id="f523a2bdf73035ee44a575de3e5dff08d7683039" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;readlimit&lt;/code&gt; arguments tells this input stream to allow that many bytes to be read before the mark position gets invalidated.</source>
          <target state="translated">&lt;code&gt;readlimit&lt;/code&gt; の引数は、マーク位置が無効になる前に多くのバイトを読み取ることができるようにすることを、この入力ストリームを伝えます。</target>
        </trans-unit>
        <trans-unit id="26aa2e19c94981b7af3edb0fd924e85788e560ef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ready&lt;/code&gt; method of the underlying stream returns &lt;code&gt;false&lt;/code&gt;, indicating that further input requests would block.</source>
          <target state="translated">基になるストリームの &lt;code&gt;ready&lt;/code&gt; メソッドは &lt;code&gt;false&lt;/code&gt; を返し、それ以上の入力要求がブロックされることを示します。</target>
        </trans-unit>
        <trans-unit id="82057f4ffe730acc914f906991a8da694e9b715d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reducing()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, downstream of &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. To perform a simple map-reduce on a stream, use &lt;a href=&quot;stream#map(java.util.function.Function)&quot;&gt;&lt;code&gt;Stream.map(Function)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stream#reduce(T,java.util.function.BinaryOperator)&quot;&gt;&lt;code&gt;Stream.reduce(Object, BinaryOperator)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;reducing()&lt;/code&gt; の下流にマルチレベルの低減に使用される場合、コレクターは最も有用である &lt;code&gt;groupingBy&lt;/code&gt; 又は &lt;code&gt;partitioningBy&lt;/code&gt; 。ストリームで単純なmap-reduceを実行するには、&lt;a href=&quot;stream#map(java.util.function.Function)&quot;&gt; &lt;code&gt;Stream.map(Function)&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;stream#reduce(T,java.util.function.BinaryOperator)&quot;&gt; &lt;code&gt;Stream.reduce(Object, BinaryOperator)&lt;/code&gt; &lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="165873d7f5551dc1377b152568842b2aacddf487" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reducing()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, downstream of &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. To perform a simple map-reduce on a stream, use &lt;a href=&quot;stream#map-java.util.function.Function-&quot;&gt;&lt;code&gt;Stream.map(Function)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stream#reduce-T-java.util.function.BinaryOperator-&quot;&gt;&lt;code&gt;Stream.reduce(Object, BinaryOperator)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;reducing()&lt;/code&gt; の下流にマルチレベルの低減に使用される場合、コレクターは最も有用である &lt;code&gt;groupingBy&lt;/code&gt; 又は &lt;code&gt;partitioningBy&lt;/code&gt; 。ストリームに対して単純なmap-reduceを実行するには、&lt;a href=&quot;stream#map-java.util.function.Function-&quot;&gt; &lt;code&gt;Stream.map(Function)&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;stream#reduce-T-java.util.function.BinaryOperator-&quot;&gt; &lt;code&gt;Stream.reduce(Object, BinaryOperator)&lt;/code&gt; &lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="b8dd7b9000da8c4a38e9a5b07cb2af0e9bc54239" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reducing()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, downstream of &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. To perform a simple reduction on a stream, use &lt;a href=&quot;stream#reduce(T,java.util.function.BinaryOperator)&quot;&gt;&lt;code&gt;Stream.reduce(Object, BinaryOperator)&lt;/code&gt;&lt;/a&gt;} instead.</source>
          <target state="translated">&lt;code&gt;reducing()&lt;/code&gt; の下流にマルチレベルの低減に使用される場合、コレクターは最も有用である &lt;code&gt;groupingBy&lt;/code&gt; 又は &lt;code&gt;partitioningBy&lt;/code&gt; 。ストリームで単純なリダクションを実行するには、代わりに&lt;a href=&quot;stream#reduce(T,java.util.function.BinaryOperator)&quot;&gt; &lt;code&gt;Stream.reduce(Object, BinaryOperator)&lt;/code&gt; &lt;/a&gt; }を使用します。</target>
        </trans-unit>
        <trans-unit id="1031f383b6493cee2618b8a613faaaa7b50cece7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reducing()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, downstream of &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. To perform a simple reduction on a stream, use &lt;a href=&quot;stream#reduce(java.util.function.BinaryOperator)&quot;&gt;&lt;code&gt;Stream.reduce(BinaryOperator)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;reducing()&lt;/code&gt; の下流にマルチレベルの低減に使用される場合、コレクターは最も有用である &lt;code&gt;groupingBy&lt;/code&gt; 又は &lt;code&gt;partitioningBy&lt;/code&gt; 。ストリームで単純なリダクションを実行するには、代わりに&lt;a href=&quot;stream#reduce(java.util.function.BinaryOperator)&quot;&gt; &lt;code&gt;Stream.reduce(BinaryOperator)&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="7e64fcbf48d32ed9f489fe7ed817a63867533729" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reducing()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, downstream of &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. To perform a simple reduction on a stream, use &lt;a href=&quot;stream#reduce-T-java.util.function.BinaryOperator-&quot;&gt;&lt;code&gt;Stream.reduce(Object, BinaryOperator)&lt;/code&gt;&lt;/a&gt;} instead.</source>
          <target state="translated">&lt;code&gt;reducing()&lt;/code&gt; の下流にマルチレベルの低減に使用される場合、コレクターは最も有用である &lt;code&gt;groupingBy&lt;/code&gt; 又は &lt;code&gt;partitioningBy&lt;/code&gt; 。ストリームに対して単純な削減を実行するには、代わりに&lt;a href=&quot;stream#reduce-T-java.util.function.BinaryOperator-&quot;&gt; &lt;code&gt;Stream.reduce(Object, BinaryOperator)&lt;/code&gt; &lt;/a&gt; }を使用します。</target>
        </trans-unit>
        <trans-unit id="331f2b86728595fcc490eed59b6a8eb8cea11e3d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reducing()&lt;/code&gt; collectors are most useful when used in a multi-level reduction, downstream of &lt;code&gt;groupingBy&lt;/code&gt; or &lt;code&gt;partitioningBy&lt;/code&gt;. To perform a simple reduction on a stream, use &lt;a href=&quot;stream#reduce-java.util.function.BinaryOperator-&quot;&gt;&lt;code&gt;Stream.reduce(BinaryOperator)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;reducing()&lt;/code&gt; の下流にマルチレベルの低減に使用される場合、コレクターは最も有用である &lt;code&gt;groupingBy&lt;/code&gt; 又は &lt;code&gt;partitioningBy&lt;/code&gt; 。ストリームで単純な削減を実行するには、代わりに&lt;a href=&quot;stream#reduce-java.util.function.BinaryOperator-&quot;&gt; &lt;code&gt;Stream.reduce(BinaryOperator)&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="b6e4a1cfb3d954ef8dc93a66017c84659865340e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;refresh&lt;/code&gt; method causes the policy object to refresh/reload its data. This operation is implementation-dependent. For example, if the policy object stores its data in configuration files, calling &lt;code&gt;refresh&lt;/code&gt; will cause it to re-read the configuration policy files. If a refresh operation is not supported, this method does nothing. Note that refreshed policy may not have an effect on classes in a particular ProtectionDomain. This is dependent on the Policy provider's implementation of the &lt;code&gt;implies&lt;/code&gt; method and its PermissionCollection caching strategy.</source>
          <target state="translated">&lt;code&gt;refresh&lt;/code&gt; 方法は、リフレッシュにポリシーオブジェクトを起こし/そのデータをリロードします。この操作は実装に依存します。たとえば、ポリシーオブジェクトがデータを構成ファイルに格納している場合、 &lt;code&gt;refresh&lt;/code&gt; を呼び出すと、構成ポリシーファイルが再度読み込まれます。更新操作がサポートされていない場合、このメソッドは何もしません。更新されたポリシーは、特定のProtectionDomainのクラスに影響を与えない場合があることに注意してください。これは、ポリシープロバイダーの &lt;code&gt;implies&lt;/code&gt; メソッドの実装とそのPermissionCollectionキャッシング戦略に依存します。</target>
        </trans-unit>
        <trans-unit id="e2cb1c75917513fd66c67c74580c51f242c6ba51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;refreshRow&lt;/code&gt; method provides a way for an application to explicitly tell the JDBC driver to refetch a row(s) from the database. An application may want to call &lt;code&gt;refreshRow&lt;/code&gt; when caching or prefetching is being done by the JDBC driver to fetch the latest value of a row from the database. The JDBC driver may actually refresh multiple rows at once if the fetch size is greater than one.</source>
          <target state="translated">&lt;code&gt;refreshRow&lt;/code&gt; の方法は、アプリケーションが明示的にデータベースから行を再フェッチするためにJDBCドライバに指示するための方法を提供します。アプリケーションは、JDBCドライバーによってキャッシュまたはプリフェッチが実行されているときに &lt;code&gt;refreshRow&lt;/code&gt; を呼び出して、データベースから行の最新の値をフェッチする場合があります。フェッチサイズが1より大きい場合、JDBCドライバーは実際には一度に複数の行を更新する場合があります。</target>
        </trans-unit>
        <trans-unit id="b92536f2a5a0e1a3b6f9a0f2c5c546403063f5bb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;registerMBean&lt;/code&gt; method is simpler for local use, but cannot be used remotely. The &lt;code&gt;createMBean&lt;/code&gt; method can be used remotely, but sometimes requires attention to class loading issues.</source>
          <target state="translated">&lt;code&gt;registerMBean&lt;/code&gt; メソッドは、ローカルでの使用のために簡単ですが、リモートで使用することはできません。 &lt;code&gt;createMBean&lt;/code&gt; メソッドは、リモートで使用され、時にはクラスローディングの問題に注意を要することができます。</target>
        </trans-unit>
        <trans-unit id="3bd964509b0c0b7b2aff54193499f79341906bf5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;registerObject&lt;/code&gt; method is used to register an activation descriptor, &lt;code&gt;desc&lt;/code&gt;, and obtain an activation identifier for a activatable remote object.</source>
          <target state="translated">&lt;code&gt;registerObject&lt;/code&gt; の方法は、起動記述子、登録するために使用される &lt;code&gt;desc&lt;/code&gt; 、および起動可能なリモートオブジェクトの起動識別子を取得します。</target>
        </trans-unit>
        <trans-unit id="0648dc19ee55d0e590d0f1e083a26887e631abbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;registerObject&lt;/code&gt; method is used to register an activation descriptor, &lt;code&gt;desc&lt;/code&gt;, and obtain an activation identifier for a activatable remote object. The &lt;code&gt;ActivationSystem&lt;/code&gt; creates an &lt;code&gt;ActivationID&lt;/code&gt; (a activation identifier) for the object specified by the descriptor, &lt;code&gt;desc&lt;/code&gt;, and records, in stable storage, the activation descriptor and its associated identifier for later use. When the &lt;code&gt;Activator&lt;/code&gt; receives an &lt;code&gt;activate&lt;/code&gt; request for a specific identifier, it looks up the activation descriptor (registered previously) for the specified identifier and uses that information to activate the object.</source>
          <target state="translated">&lt;code&gt;registerObject&lt;/code&gt; の方法は、起動記述子、登録するために使用される &lt;code&gt;desc&lt;/code&gt; 、および起動可能なリモートオブジェクトの起動識別子を取得します。 &lt;code&gt;ActivationSystem&lt;/code&gt; は、作成 &lt;code&gt;ActivationID&lt;/code&gt; 記述子によって指定されたオブジェクトのために（起動識別子）を &lt;code&gt;desc&lt;/code&gt; 、安定したストレージには、レコード起動記述子と後で使用するためにその関連識別子。ときに &lt;code&gt;Activator&lt;/code&gt; 受信 &lt;code&gt;activate&lt;/code&gt; 特定識別子の要求を、その情報がオブジェクトをアクティブにすることを指定された識別子および使用のために（以前に登録された）起動記述子を検索します。</target>
        </trans-unit>
        <trans-unit id="d5b769a6261bcf9c925196e481e33f743eb9161c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;replaceEditor&lt;/code&gt; method is called when the spinners editor is changed with &lt;code&gt;JSpinner.setEditor&lt;/code&gt;. If you've overriden this method, then you'll probably want to override &lt;code&gt;replaceEditor&lt;/code&gt; as well.</source>
          <target state="translated">&lt;code&gt;replaceEditor&lt;/code&gt; のスピナーエディタがで変更されたときにメソッドが呼び出され &lt;code&gt;JSpinner.setEditor&lt;/code&gt; 。このメソッドをオーバーライドした場合は、 &lt;code&gt;replaceEditor&lt;/code&gt; もオーバーライドすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b2bff7fa0a0c8c4fa4c945d1cc03fe4bb97f5383" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;required&lt;/code&gt; field is &lt;code&gt;true&lt;/code&gt; if a value must be supplied for this property during &lt;code&gt;Driver.connect&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">&lt;code&gt;required&lt;/code&gt; フィールドがあり &lt;code&gt;true&lt;/code&gt; 値が中に、このプロパティのために供給しなければならない場合 &lt;code&gt;Driver.connect&lt;/code&gt; と &lt;code&gt;false&lt;/code&gt; そう。</target>
        </trans-unit>
        <trans-unit id="dec43624de062d1e7493f56cb68ff2515b4d245d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reset&lt;/code&gt; method of &lt;code&gt;LineNumberInputStream&lt;/code&gt; resets the line number to be the line number at the time the &lt;code&gt;mark&lt;/code&gt; method was called, and then calls the &lt;code&gt;reset&lt;/code&gt; method of the underlying input stream.</source>
          <target state="translated">&lt;code&gt;LineNumberInputStream&lt;/code&gt; の &lt;code&gt;reset&lt;/code&gt; メソッドは、行番号を &lt;code&gt;mark&lt;/code&gt; メソッドが呼び出されたときの行番号に &lt;code&gt;reset&lt;/code&gt; から、基になる入力ストリームのresetメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="bcb2620e18cfc65d493f7d3aa17132a5ca731483" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;root&lt;/code&gt; node of the &lt;code&gt;TreeWalker&lt;/code&gt;, as specified when it was created.</source>
          <target state="translated">作成時に指定された &lt;code&gt;TreeWalker&lt;/code&gt; の &lt;code&gt;root&lt;/code&gt; ノード。</target>
        </trans-unit>
        <trans-unit id="ef077420b03ffbe4cf9c89bd8f72839c46602b82" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; components should be floating-point values between zero and one (numbers in the range 0.0-1.0). The &lt;code&gt;h&lt;/code&gt; component can be any floating-point number. The floor of this number is subtracted from it to create a fraction between 0 and 1. This fractional number is then multiplied by 360 to produce the hue angle in the HSB color model.</source>
          <target state="translated">&lt;code&gt;s&lt;/code&gt; および &lt;code&gt;b&lt;/code&gt; 成分は、0と1の間の浮動小数点値（0.0〜1.0の範囲内の数字）であるべきです。 &lt;code&gt;h&lt;/code&gt; コンポーネントは、任意の浮動小数点数であることができます。この数値のフロアを減算して、0と1の間の分数を作成します。次に、この小数に360を掛けて、HSBカラーモデルの色相角度を生成します。</target>
        </trans-unit>
        <trans-unit id="e6920483d1b5d5fdadee6caa3bd9747d28274c80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;saturation&lt;/code&gt; and &lt;code&gt;brightness&lt;/code&gt; components should be floating-point values between zero and one (numbers in the range 0.0-1.0). The &lt;code&gt;hue&lt;/code&gt; component can be any floating-point number. The floor of this number is subtracted from it to create a fraction between 0 and 1. This fractional number is then multiplied by 360 to produce the hue angle in the HSB color model.</source>
          <target state="translated">&lt;code&gt;saturation&lt;/code&gt; と &lt;code&gt;brightness&lt;/code&gt; 成分は0と1の間の浮動小数点値（0.0〜1.0の範囲内の数字）であるべきです。 &lt;code&gt;hue&lt;/code&gt; 成分は、任意の浮動小数点数であることができます。この数値のフロアを減算して、0と1の間の分数を作成します。次に、この小数に360を掛けて、HSBカラーモデルの色相角度を生成します。</target>
        </trans-unit>
        <trans-unit id="9e487af727a443b2fc09683914bf955d5aed101d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;schedule&lt;/code&gt; methods create tasks with various delays and return a task object that can be used to cancel or check execution. The &lt;code&gt;scheduleAtFixedRate&lt;/code&gt; and &lt;code&gt;scheduleWithFixedDelay&lt;/code&gt; methods create and execute tasks that run periodically until cancelled.</source>
          <target state="translated">&lt;code&gt;schedule&lt;/code&gt; 方法は、種々の遅延でタスクを作成し、実行をキャンセルするか確認するために使用することができるタスクオブジェクトを返します。 &lt;code&gt;scheduleAtFixedRate&lt;/code&gt; と &lt;code&gt;scheduleWithFixedDelay&lt;/code&gt; 方法が取り消されるまで定期的に実行タスクを作成して実行します。</target>
        </trans-unit>
        <trans-unit id="08c9e29dc36b0482fbc29013fb24d1e073d335c3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scrollUnderway&lt;/code&gt; flag is used for components like &lt;code&gt;JList&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;scrollUnderway&lt;/code&gt; のフラグのような構成要素のために使用される &lt;code&gt;JList&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0d1c017ef96a248d10e61c88fe2cbb2851eb303e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;scrollUnderway&lt;/code&gt; flag is used for components like &lt;code&gt;JList&lt;/code&gt;. When the downarrow key is pressed on a &lt;code&gt;JList&lt;/code&gt; and the selected cell is the last in the list, the &lt;code&gt;scrollpane&lt;/code&gt; autoscrolls. Here, the old selected cell needs repainting and so we need a flag to make the viewport do the optimized painting only when there is an explicit call to &lt;code&gt;setViewPosition(Point)&lt;/code&gt;. When &lt;code&gt;setBounds&lt;/code&gt; is called through other routes, the flag is off and the view repaints normally. Another approach would be to remove this from the &lt;code&gt;JViewport&lt;/code&gt; class and have the &lt;code&gt;JList&lt;/code&gt; manage this case by using &lt;code&gt;setBackingStoreEnabled&lt;/code&gt;. The default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;scrollUnderway&lt;/code&gt; のフラグのような構成要素のために使用される &lt;code&gt;JList&lt;/code&gt; 。 &lt;code&gt;JList&lt;/code&gt; で下矢印キーが押され、選択したセルがリストの最後になると、 &lt;code&gt;scrollpane&lt;/code&gt; ペインが自動スクロールします。ここでは、選択した古いセルを再描画する必要があるため、 &lt;code&gt;setViewPosition(Point)&lt;/code&gt; が明示的に呼び出された場合にのみ、ビューポートに最適化された描画を実行させるためのフラグが必要です。場合 &lt;code&gt;setBounds&lt;/code&gt; が他の経路を介して呼び出され、フラグがオフであり、ビューは、通常、再描画します。別のアプローチはからこれを削除するだろう &lt;code&gt;JViewport&lt;/code&gt; クラスと持って &lt;code&gt;JList&lt;/code&gt; のは、使用してこのケースを管理 &lt;code&gt;setBackingStoreEnabled&lt;/code&gt; 。デフォルトは &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="275b9770ecb642dad5739bf9b860015b219e5bc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;seekForwardOnly&lt;/code&gt; parameter controls whether the value returned by &lt;code&gt;getMinIndex&lt;/code&gt; will be increased as each image (or thumbnail, or image metadata) is read. If &lt;code&gt;seekForwardOnly&lt;/code&gt; is true, then a call to &lt;code&gt;read(index)&lt;/code&gt; will throw an &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; if &lt;code&gt;index &amp;lt; this.minIndex&lt;/code&gt;; otherwise, the value of &lt;code&gt;minIndex&lt;/code&gt; will be set to &lt;code&gt;index&lt;/code&gt;. If &lt;code&gt;seekForwardOnly&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, the value of &lt;code&gt;minIndex&lt;/code&gt; will remain 0 regardless of any read operations.</source>
          <target state="translated">&lt;code&gt;seekForwardOnly&lt;/code&gt; によって返される値か否かのパラメータを制御 &lt;code&gt;getMinIndex&lt;/code&gt; は、各画像（またはサムネイル、又は画像メタデータ）が読み出されるように増加するであろう。場合 &lt;code&gt;seekForwardOnly&lt;/code&gt; が trueの場合、その後の呼び出し &lt;code&gt;read(index)&lt;/code&gt; スローされます &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; 場合は &lt;code&gt;index &amp;lt; this.minIndex&lt;/code&gt; 。それ以外の場合、 &lt;code&gt;minIndex&lt;/code&gt; の値は &lt;code&gt;index&lt;/code&gt; に設定されます。 &lt;code&gt;seekForwardOnly&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合、読み取り操作に関係なく、 &lt;code&gt;minIndex&lt;/code&gt; の値は0 のままになります。</target>
        </trans-unit>
        <trans-unit id="d1482f0d46f1a2acb9dc1233fcf5f91d87996d1a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sendClose&lt;/code&gt; method does not close this WebSocket's input. It merely closes this WebSocket's output by sending a Close message. To enforce closing the input, invoke the &lt;code&gt;abort&lt;/code&gt; method. Here is an example of an application that sends a Close message, and then starts a timer. Once no data has been received within the specified timeout, the timer goes off and the alarm aborts &lt;code&gt;WebSocket&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;sendClose&lt;/code&gt; メソッドは、こののWebSocketの入力閉じません。Closeメッセージを送信して、このWebSocketの出力を閉じるだけです。入力を強制的に閉じるには、 &lt;code&gt;abort&lt;/code&gt; メソッドを呼び出します。これは、Closeメッセージを送信してからタイマーを開始するアプリケーションの例です。指定されたタイムアウト内にデータが受信されなくなると、タイマーがオフになり、アラームが &lt;code&gt;WebSocket&lt;/code&gt; を中止します。</target>
        </trans-unit>
        <trans-unit id="2b89c456d2b4bd25e583ec6cc1aa01d8496f3f6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setPaintMode&lt;/code&gt; method is implemented as a convenience method to set the default &lt;code&gt;Composite&lt;/code&gt;, equivalent to &lt;code&gt;setComposite(new AlphaComposite.SrcOver)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;setPaintMode&lt;/code&gt; の方法は、デフォルト設定する便利な方法として実装されている &lt;code&gt;Composite&lt;/code&gt; に相当する、 &lt;code&gt;setComposite(new AlphaComposite.SrcOver)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="43b250cc63cb491b2b4915e37282c63d786eef72" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setSize&lt;/code&gt; method should be prepared to be called a number of times (i.e. It may be called even if the size didn't change). The &lt;code&gt;setSize&lt;/code&gt; method is generally called to make sure the View layout is complete prior to trying to perform an operation on it that requires an up-to-date layout. A view's size should &lt;em&gt;always&lt;/em&gt; be set to a value within the minimum and maximum span specified by that view. Additionally, the view must always call the &lt;code&gt;preferenceChanged&lt;/code&gt; method on the parent if it has changed the values for the layout it would like, and expects the parent to honor. The parent View is not required to recognize a change until the &lt;code&gt;preferenceChanged&lt;/code&gt; has been sent. This allows parent View implementations to cache the child requirements if desired. The calling sequence looks something like the following:</source>
          <target state="translated">&lt;code&gt;setSize&lt;/code&gt; の方法は、回数（サイズが変更されなかった場合でも、それが呼ばれるIE）と呼ばれるように準備する必要があります。 &lt;code&gt;setSize&lt;/code&gt; の方法は、一般的に確認してくださいビューのレイアウトは前に最新のレイアウトを必要とし、それに対する操作を実行しようとしているに完全であることを確認するために呼び出されます。ビューのサイズは、&lt;em&gt;常に&lt;/em&gt;そのビューで指定された最小および最大スパン内の値に設定する必要があります。さらに、ビューが &lt;code&gt;preferenceChanged&lt;/code&gt; するレイアウトの値を変更した場合、ビューは常に親のpreferenceChangedメソッドを呼び出す必要があり、親がそれを尊重することを期待します。親ビューは、 &lt;code&gt;preferenceChanged&lt;/code&gt; まで変更を認識する必要はありません。送られた。これにより、親Viewの実装は、必要に応じて子の要件をキャッシュできます。呼び出しシーケンスは次のようになります。</target>
        </trans-unit>
        <trans-unit id="42f025b3d9979c63bfda933d9c9717fb99aa29ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;setXORMode(Color xorcolor)&lt;/code&gt; method is implemented as a convenience method to set a special &lt;code&gt;Composite&lt;/code&gt; object that ignores the &lt;code&gt;Alpha&lt;/code&gt; components of source colors and sets the destination color to the value:</source>
          <target state="translated">&lt;code&gt;setXORMode(Color xorcolor)&lt;/code&gt; 方法は、特別に設定する便利な方法として実装されている &lt;code&gt;Composite&lt;/code&gt; 無視オブジェクト &lt;code&gt;Alpha&lt;/code&gt; ソース色の成分をその値に目標色を設定します。</target>
        </trans-unit>
        <trans-unit id="e4d9578b126fe071444650921e8afdae2dde1b52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shape&lt;/code&gt; argument may have the following values:</source>
          <target state="translated">&lt;code&gt;shape&lt;/code&gt; 引数には、次の値を持っていることがあります。</target>
        </trans-unit>
        <trans-unit id="bf825e34076ebaf2f0b03cf88441dbd2884319b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;signature&lt;/code&gt; array parameter is internally copied, so that subsequent changes to the array referenced by &lt;code&gt;
 signature&lt;/code&gt; have no effect on this instance.</source>
          <target state="translated">&lt;code&gt;signature&lt;/code&gt; 配列パラメータは、内部で参照配列に対する後続の変更ように、コピーされ &lt;code&gt; signature&lt;/code&gt; このインスタンスに影響を及ぼしません。</target>
        </trans-unit>
        <trans-unit id="76ca7bc87a7a645eee5be869e5f2afee6e7546a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;signature&lt;/code&gt; array parameter is internally copied, so that subsequent changes to the array referenced by &lt;code&gt;signature&lt;/code&gt; have no effect on this instance.</source>
          <target state="translated">&lt;code&gt;signature&lt;/code&gt; 配列パラメータは、内部で参照配列に対する後続の変更ように、コピーされ &lt;code&gt;signature&lt;/code&gt; このインスタンスに影響を及ぼしません。</target>
        </trans-unit>
        <trans-unit id="4ab62abd8dea24de7feab17efb96ab240af801b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt;, &lt;code&gt;isEmpty&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;iterator&lt;/code&gt;, and &lt;code&gt;listIterator&lt;/code&gt; operations run in constant time. The &lt;code&gt;add&lt;/code&gt; operation runs in</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; 、 &lt;code&gt;isEmpty&lt;/code&gt; 、 &lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;set&lt;/code&gt; 、 &lt;code&gt;iterator&lt;/code&gt; 、および &lt;code&gt;listIterator&lt;/code&gt; 一定の時間で実行されます操作。 &lt;code&gt;add&lt;/code&gt; 操作が実行される中</target>
        </trans-unit>
        <trans-unit id="9a1118dd39358bc6d8e191accb546fe46ebdd2b3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;skip&lt;/code&gt; method implementation of this class creates a byte array and then repeatedly reads into it until &lt;code&gt;n&lt;/code&gt; bytes have been read or the end of the stream has been reached. Subclasses are encouraged to provide a more efficient implementation of this method. For instance, the implementation may depend on the ability to seek.</source>
          <target state="translated">このクラスの &lt;code&gt;skip&lt;/code&gt; メソッド実装は、バイト配列を作成し、 &lt;code&gt;n&lt;/code&gt; バイトが読み取られるか、ストリームの終わりに達するまで、繰り返し読み取ります。サブクラスは、このメソッドのより効率的な実装を提供することをお勧めします。たとえば、実装はシークする能力に依存する場合があります。</target>
        </trans-unit>
        <trans-unit id="a4a7eb3594e941fdb97e903210733646c272b12a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;skip&lt;/code&gt; method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly &lt;code&gt;0&lt;/code&gt;. If &lt;code&gt;n&lt;/code&gt; is negative, the method will try to skip backwards. In case the backing file does not support backward skip at its current position, an &lt;code&gt;IOException&lt;/code&gt; is thrown. The actual number of bytes skipped is returned. If it skips forwards, it returns a positive value. If it skips backwards, it returns a negative value.</source>
          <target state="translated">&lt;code&gt;skip&lt;/code&gt; 方法は、様々な理由で、バイトのいくつかのより少ない数、おそらくをスキップ終わる可能性が &lt;code&gt;0&lt;/code&gt; 。場合は &lt;code&gt;n&lt;/code&gt; 負の場合、この方法は、後方スキップしようとします。バッキングファイルが現在の位置で逆方向スキップをサポートしていない &lt;code&gt;IOException&lt;/code&gt; 、IOExceptionがスローされます。スキップされた実際のバイト数が返されます。前方にスキップすると、正の値を返します。後方にスキップすると、負の値を返します。</target>
        </trans-unit>
        <trans-unit id="66c38c1c54f362c964143fb2033b1ddc5a7e0a28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;skip&lt;/code&gt; method of &lt;code&gt;LineNumberInputStream&lt;/code&gt; creates a byte array and then repeatedly reads into it until &lt;code&gt;n&lt;/code&gt; bytes have been read or the end of the stream has been reached.</source>
          <target state="translated">&lt;code&gt;LineNumberInputStream&lt;/code&gt; の &lt;code&gt;skip&lt;/code&gt; メソッドは、バイト配列を作成し、 &lt;code&gt;n&lt;/code&gt; バイトが読み取られるまで、またはストリームの終わりに達するまで、バイト配列を繰り返し読み取ります。</target>
        </trans-unit>
        <trans-unit id="6a923526e0376b2377270933dbe7190607b0ff31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;skip&lt;/code&gt; method of &lt;code&gt;PushbackInputStream&lt;/code&gt; first skips over the bytes in the pushback buffer, if any. It then calls the &lt;code&gt;skip&lt;/code&gt; method of the underlying input stream if more bytes need to be skipped. The actual number of bytes skipped is returned.</source>
          <target state="translated">&lt;code&gt;PushbackInputStream&lt;/code&gt; の &lt;code&gt;skip&lt;/code&gt; メソッドは、最初にプッシュバックバッファー内のバイトがあればそれをスキップします。次に、さらにバイトをスキップする必要がある場合は、基になる入力ストリームの &lt;code&gt;skip&lt;/code&gt; メソッドを呼び出します。スキップされた実際のバイト数が返されます。</target>
        </trans-unit>
        <trans-unit id="c16533536dab6e2f9b65c6a5002fc87433ad4e31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;skip&lt;/code&gt; method of this class creates a byte array and then repeatedly reads into it until &lt;code&gt;n&lt;/code&gt; bytes have been read or the end of the stream has been reached. Subclasses are encouraged to provide a more efficient implementation of this method. For instance, the implementation may depend on the ability to seek.</source>
          <target state="translated">このクラスの &lt;code&gt;skip&lt;/code&gt; メソッドは、バイト配列を作成し、 &lt;code&gt;n&lt;/code&gt; バイトが読み取られるまで、またはストリームの終わりに達するまで、繰り返し読み取ります。サブクラスは、このメソッドのより効率的な実装を提供することが推奨されます。たとえば、実装はシークする能力に依存する場合があります。</target>
        </trans-unit>
        <trans-unit id="48bb13788e4dffd1bf5c784a19fc6b8edec85d28" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; argument and &lt;code&gt;dest&lt;/code&gt; argument refer to arrays whose component types are different primitive types.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 引数と &lt;code&gt;dest&lt;/code&gt; 引数は、そのコンポーネントのタイプ異なるプリミティブ型である配列を指します。</target>
        </trans-unit>
        <trans-unit id="2ded185c55f988e1ab8aa4ba594d8425c8a39394" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; argument refers to an array with a primitive component type and the &lt;code&gt;dest&lt;/code&gt; argument refers to an array with a reference component type.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 引数は、プリミティブコンポーネントタイプを持つ配列を指すと &lt;code&gt;dest&lt;/code&gt; 引数が参照コンポーネント型を持つ配列を指します。</target>
        </trans-unit>
        <trans-unit id="9b64842c9ed7d557d1d18f19836d86fd1cadc9b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; argument refers to an array with a reference component type and the &lt;code&gt;dest&lt;/code&gt; argument refers to an array with a primitive component type.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 引数は、参照コンポーネントタイプを持つ配列を指すと &lt;code&gt;dest&lt;/code&gt; 引数がプリミティブコンポーネントタイプを持つ配列を指します。</target>
        </trans-unit>
        <trans-unit id="17390f5ec2c7023bf41b502643c3390be1470837" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; argument refers to an object that is not an array.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; 引数が配列でないオブジェクトを指します。</target>
        </trans-unit>
        <trans-unit id="32cf5d4487a70ff5b3296fb66460f51ac7c6a160" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;srcPos&lt;/code&gt; argument is negative.</source>
          <target state="translated">&lt;code&gt;srcPos&lt;/code&gt; の引数が負です。</target>
        </trans-unit>
        <trans-unit id="be02728a3743350708b8b357f2bfb78e56f08541" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; handles must not be &lt;code&gt;null&lt;/code&gt;, and must both return the common type &lt;code&gt;int&lt;/code&gt;, referred to here as &lt;code&gt;I&lt;/code&gt; in parameter type lists.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; と &lt;code&gt;end&lt;/code&gt; のハンドルがあってはならない &lt;code&gt;null&lt;/code&gt; 、および両方の一般的なタイプの返す必要があります &lt;code&gt;int&lt;/code&gt; 型を、とここでいう &lt;code&gt;I&lt;/code&gt; パラメータ型リストに。</target>
        </trans-unit>
        <trans-unit id="6dc25c0527566429af8136756050546b7203d021" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; parameters can be &lt;code&gt;null&lt;/code&gt; to indicate that the range doesn't have an upper or lower bound. If &lt;code&gt;value&lt;/code&gt; or &lt;code&gt;calendarField&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, or if both &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; are specified and &lt;code&gt;minimum &amp;gt; maximum&lt;/code&gt; then an &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown. Similarly if &lt;code&gt;(minimum &amp;lt;= value &amp;lt;= maximum)&lt;/code&gt; is false, an IllegalArgumentException is thrown.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; 及び &lt;code&gt;end&lt;/code&gt; パラメータがあってもよい &lt;code&gt;null&lt;/code&gt; 範囲が上限又は結合と下限を有していないことを示すために。もし &lt;code&gt;value&lt;/code&gt; または &lt;code&gt;calendarField&lt;/code&gt; はである &lt;code&gt;null&lt;/code&gt; 、または両方の場合 &lt;code&gt;start&lt;/code&gt; と &lt;code&gt;end&lt;/code&gt; 指定され、 &lt;code&gt;minimum &amp;gt; maximum&lt;/code&gt; 次いで、 &lt;code&gt;IllegalArgumentException&lt;/code&gt; がスローされます。同様に、 &lt;code&gt;(minimum &amp;lt;= value &amp;lt;= maximum)&lt;/code&gt; がfalseの場合、IllegalArgumentExceptionがスローされます。</target>
        </trans-unit>
        <trans-unit id="e4cc6c311e7eebc97573c7745efa0c1accd23d43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;startPipeline&lt;/code&gt; method performs the same checks on each ProcessBuilder as does the &lt;a href=&quot;#start()&quot;&gt;&lt;code&gt;start()&lt;/code&gt;&lt;/a&gt; method. The new process will invoke the command and arguments given by &lt;a href=&quot;#command()&quot;&gt;&lt;code&gt;command()&lt;/code&gt;&lt;/a&gt;, in a working directory as given by &lt;a href=&quot;#directory()&quot;&gt;&lt;code&gt;directory()&lt;/code&gt;&lt;/a&gt;, with a process environment as given by &lt;a href=&quot;#environment()&quot;&gt;&lt;code&gt;environment()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;startPipeline&lt;/code&gt; のないような方法は、各ProcessBuilderを上に同じチェックを実行&lt;a href=&quot;#start()&quot;&gt; &lt;code&gt;start()&lt;/code&gt; &lt;/a&gt;メソッドを。新しいプロセスは、&lt;a href=&quot;#directory()&quot;&gt; &lt;code&gt;directory()&lt;/code&gt; &lt;/a&gt;で指定された作業ディレクトリで、&lt;a href=&quot;#environment()&quot;&gt; &lt;code&gt;environment()&lt;/code&gt; で&lt;/a&gt;指定されたプロセス環境を使用して、&lt;a href=&quot;#command()&quot;&gt; &lt;code&gt;command()&lt;/code&gt; &lt;/a&gt;で指定されたコマンドと引数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="076b65d1dcb2536b5b9253389218e30908409663" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stateChange&lt;/code&gt; of any &lt;code&gt;ItemEvent&lt;/code&gt; instance takes one of the following values:</source>
          <target state="translated">&lt;code&gt;ItemEvent&lt;/code&gt; インスタンスの &lt;code&gt;stateChange&lt;/code&gt; は、次のいずれかの値を取ります。</target>
        </trans-unit>
        <trans-unit id="4d7e3c187b7502624a8ff731ccc49ed33e5b1f80" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;statusCode&lt;/code&gt; is an integer from the range &lt;code&gt;1000 &amp;lt;= code &amp;lt;= 4999&lt;/code&gt;. Status codes &lt;code&gt;1002&lt;/code&gt;, &lt;code&gt;1003&lt;/code&gt;, &lt;code&gt;1006&lt;/code&gt;, &lt;code&gt;1007&lt;/code&gt;, &lt;code&gt;1009&lt;/code&gt;, &lt;code&gt;1010&lt;/code&gt;, &lt;code&gt;1012&lt;/code&gt;, &lt;code&gt;1013&lt;/code&gt; and &lt;code&gt;1015&lt;/code&gt; are illegal. Behaviour in respect to other status codes is implementation-specific. A legal &lt;code&gt;reason&lt;/code&gt; is a string that has a UTF-8 representation not longer than &lt;code&gt;123&lt;/code&gt; bytes.</source>
          <target state="translated">&lt;code&gt;statusCode&lt;/code&gt; の範囲の整数であり、 &lt;code&gt;1000 &amp;lt;= code &amp;lt;= 4999&lt;/code&gt; 。ステータスコード &lt;code&gt;1002&lt;/code&gt; 、 &lt;code&gt;1003&lt;/code&gt; 、 &lt;code&gt;1006&lt;/code&gt; 、 &lt;code&gt;1007&lt;/code&gt; 、 &lt;code&gt;1009&lt;/code&gt; 、 &lt;code&gt;1010&lt;/code&gt; 、 &lt;code&gt;1012&lt;/code&gt; 、 &lt;code&gt;1013&lt;/code&gt; 年と &lt;code&gt;1015&lt;/code&gt; 年は違法です。他のステータスコードに関する動作は、実装固有です。法的な &lt;code&gt;reason&lt;/code&gt; は、 &lt;code&gt;123&lt;/code&gt; バイト以下のUTF-8表現を持つ文字列です。</target>
        </trans-unit>
        <trans-unit id="96a37830010cc84066474823aaa8925f3e262fd2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stopPropagation&lt;/code&gt; method is used prevent further propagation of an event during event flow.</source>
          <target state="translated">&lt;code&gt;stopPropagation&lt;/code&gt; の方法は、イベントフロー中のイベントのさらなる伝播を防ぐために使用されます。</target>
        </trans-unit>
        <trans-unit id="87a32d228a0f8798ef1bced948af76af2274fc0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stopPropagation&lt;/code&gt; method is used prevent further propagation of an event during event flow. If this method is called by any &lt;code&gt;EventListener&lt;/code&gt; the event will cease propagating through the tree. The event will complete dispatch to all listeners on the current &lt;code&gt;EventTarget&lt;/code&gt; before event flow stops. This method may be used during any stage of event flow.</source>
          <target state="translated">&lt;code&gt;stopPropagation&lt;/code&gt; の方法は、イベントフロー中のイベントのさらなる伝播を防ぐために使用されます。このメソッドが &lt;code&gt;EventListener&lt;/code&gt; によって呼び出されると、イベントはツリーを介した伝播を停止します。イベントは、イベントフローが停止する前に、現在の &lt;code&gt;EventTarget&lt;/code&gt; 上のすべてのリスナーへのディスパッチを完了します。この方法は、イベントフローのどの段階でも使用できます。</target>
        </trans-unit>
        <trans-unit id="345b6d87d178ad048ca717372d6308e35699c398" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stream&lt;/code&gt; walks the file tree as elements are consumed. The &lt;code&gt;Stream&lt;/code&gt; returned is guaranteed to have at least one element, the starting file itself. For each file visited, the stream attempts to read its &lt;a href=&quot;attribute/basicfileattributes&quot;&gt;&lt;code&gt;BasicFileAttributes&lt;/code&gt;&lt;/a&gt;. If the file is a directory and can be opened successfully, entries in the directory, and their &lt;em&gt;descendants&lt;/em&gt; will follow the directory in the stream as they are encountered. When all entries have been visited, then the directory is closed. The file tree walk then continues at the next &lt;em&gt;sibling&lt;/em&gt; of the directory.</source>
          <target state="translated">&lt;code&gt;stream&lt;/code&gt; 要素が消費されるファイルツリーを歩きます。 &lt;code&gt;Stream&lt;/code&gt; 少なくとも一つの要素は、出発ファイル自体を持つことが保証されて戻りました。アクセスしたファイルごとに、ストリームはその&lt;a href=&quot;attribute/basicfileattributes&quot;&gt; &lt;code&gt;BasicFileAttributes&lt;/code&gt; &lt;/a&gt;を読み取ろうとします。ファイルがディレクトリであり、正常に開くことができる場合、ディレクトリ内のエントリとその&lt;em&gt;子孫&lt;/em&gt;は、遭遇したストリームのディレクトリに従います。すべてのエントリにアクセスすると、ディレクトリが閉じます。ファイルツリーのウォークは、ディレクトリの次の&lt;em&gt;兄弟&lt;/em&gt;で続行されます。</target>
        </trans-unit>
        <trans-unit id="b3710d2b5eccac183494c98736ff55e0daad76d0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;system&lt;/code&gt; factory methods provide clocks based on the best available system clock This may use &lt;a href=&quot;../lang/system#currentTimeMillis()&quot;&gt;&lt;code&gt;System.currentTimeMillis()&lt;/code&gt;&lt;/a&gt;, or a higher resolution clock if one is available.</source>
          <target state="translated">&lt;code&gt;system&lt;/code&gt; ファクトリメソッドは、これが使用できる利用可能な最善のシステムクロックに基づいてクロックを提供する&lt;a href=&quot;../lang/system#currentTimeMillis()&quot;&gt; &lt;code&gt;System.currentTimeMillis()&lt;/code&gt; &lt;/a&gt;利用可能な場合、またはより高い解像度のクロックを。</target>
        </trans-unit>
        <trans-unit id="bbed603ba13286eef01f00c49ed0143e560232fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;system&lt;/code&gt; factory methods provide clocks based on the best available system clock This may use &lt;a href=&quot;../lang/system#currentTimeMillis--&quot;&gt;&lt;code&gt;System.currentTimeMillis()&lt;/code&gt;&lt;/a&gt;, or a higher resolution clock if one is available.</source>
          <target state="translated">&lt;code&gt;system&lt;/code&gt; ファクトリメソッドは、これが使用できる利用可能な最善のシステムクロックに基づいてクロックを提供する&lt;a href=&quot;../lang/system#currentTimeMillis--&quot;&gt; &lt;code&gt;System.currentTimeMillis()&lt;/code&gt; &lt;/a&gt;利用可能な場合、またはより高い解像度のクロックを。</target>
        </trans-unit>
        <trans-unit id="705416f1898f90c6d7101837ec2872b8de0927e5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;systemId&lt;/code&gt; will be used literally, with no attempt to be made absolute to the &lt;code&gt;baseUri&lt;/code&gt;. The &lt;code&gt;baseUri&lt;/code&gt; and &lt;code&gt;namespace&lt;/code&gt; are not used in the search for a match in a catalog. However, a relative &lt;code&gt;systemId&lt;/code&gt; in an xml source may have been made absolute by the parser with the &lt;code&gt;baseURI&lt;/code&gt;, thus making it unable to find a &lt;code&gt;system&lt;/code&gt; entry. In such a case, a &lt;code&gt;systemSuffix&lt;/code&gt; entry is recommended over a &lt;code&gt;system&lt;/code&gt; entry.</source>
          <target state="translated">&lt;code&gt;systemId&lt;/code&gt; 無いの試みで、文字通り使用されますが、絶対に行われる &lt;code&gt;baseUri&lt;/code&gt; 。 &lt;code&gt;baseUri&lt;/code&gt; と &lt;code&gt;namespace&lt;/code&gt; カタログでのマッチの検索に使用されていません。ただし、xmlソース内の相対 &lt;code&gt;systemId&lt;/code&gt; は、 &lt;code&gt;baseURI&lt;/code&gt; を使用してパーサーによって絶対化されている可能性があるため、 &lt;code&gt;system&lt;/code&gt; エントリを見つけることができません。このような場合、 &lt;code&gt;system&lt;/code&gt; エントリよりも &lt;code&gt;systemSuffix&lt;/code&gt; エントリをお勧めします。</target>
        </trans-unit>
        <trans-unit id="5fa8fe0340ab2e43b8e4f2fccf1346d93701ab46" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;systemId&lt;/code&gt; will be used literally, with no attempt to be made absolute to the &lt;code&gt;baseUri&lt;/code&gt;. The &lt;code&gt;baseUri&lt;/code&gt;, &lt;code&gt;namespaceUri&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; are not used in the search for a match in a catalog. However, a relative &lt;code&gt;systemId&lt;/code&gt; in a source may have been made absolute by the parser with the &lt;code&gt;baseURI&lt;/code&gt;, thus making it unable to find a &lt;code&gt;system&lt;/code&gt; entry. In such a case, a &lt;code&gt;systemSuffix&lt;/code&gt; entry is recommended over a &lt;code&gt;system&lt;/code&gt; entry.</source>
          <target state="translated">&lt;code&gt;systemId&lt;/code&gt; 無いの試みで、文字通り使用されますが、絶対に行われる &lt;code&gt;baseUri&lt;/code&gt; 。 &lt;code&gt;baseUri&lt;/code&gt; 、 &lt;code&gt;namespaceUri&lt;/code&gt; と &lt;code&gt;type&lt;/code&gt; カタログでのマッチの検索に使用されていません。ただし、ソース内の相対 &lt;code&gt;systemId&lt;/code&gt; は、 &lt;code&gt;baseURI&lt;/code&gt; を使用してパーサーによって絶対化されている可能性があるため、 &lt;code&gt;system&lt;/code&gt; エントリを見つけることができません。このような場合、 &lt;code&gt;system&lt;/code&gt; エントリよりも &lt;code&gt;systemSuffix&lt;/code&gt; エントリをお勧めします。</target>
        </trans-unit>
        <trans-unit id="102c04e139e85c06b332c1cf89cc171685c4335a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;cleanup&lt;/code&gt; handles must have the same corresponding argument and return types, except that the &lt;code&gt;cleanup&lt;/code&gt; handle may omit trailing arguments. Also, the &lt;code&gt;cleanup&lt;/code&gt; handle must have one or two extra leading parameters:</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; と &lt;code&gt;cleanup&lt;/code&gt; ハンドルは、同じ対応する引数や戻り値の型を持っていることを除いてしなければならない &lt;code&gt;cleanup&lt;/code&gt; ハンドルは後続の引数を省略することができます。また、 &lt;code&gt;cleanup&lt;/code&gt; ハンドルには、1つまたは2つの追加の先行パラメーターが必要です。</target>
        </trans-unit>
        <trans-unit id="fc9c79ee1df025d55ac0b05752be64291c34d35f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; and the &lt;code&gt;methodName&lt;/code&gt; values should not be &lt;code&gt;null&lt;/code&gt;. Otherwise an attempt to execute this &lt;code&gt;Expression&lt;/code&gt; will result in a &lt;code&gt;NullPointerException&lt;/code&gt;. If the &lt;code&gt;arguments&lt;/code&gt; value is &lt;code&gt;null&lt;/code&gt;, an empty array is used as the value of the &lt;code&gt;arguments&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; と &lt;code&gt;methodName&lt;/code&gt; 値はすべきではない &lt;code&gt;null&lt;/code&gt; 。そうでない場合、この &lt;code&gt;Expression&lt;/code&gt; を実行しようとすると、 &lt;code&gt;NullPointerException&lt;/code&gt; が発生します。場合 &lt;code&gt;arguments&lt;/code&gt; 値が &lt;code&gt;null&lt;/code&gt; 、空の配列は、の値として使用される &lt;code&gt;arguments&lt;/code&gt; プロパティ。</target>
        </trans-unit>
        <trans-unit id="67df39f98209ce29324f6940292995bb97c5d095" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; parameter is the target of the link. It may be an &lt;a href=&quot;path#isAbsolute()&quot;&gt;&lt;code&gt;absolute&lt;/code&gt;&lt;/a&gt; or relative path and may not exist. When the target is a relative path then file system operations on the resulting link are relative to the path of the link.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; パラメータは、リンクのターゲットです。それがあってもよい&lt;a href=&quot;path#isAbsolute()&quot;&gt; &lt;code&gt;absolute&lt;/code&gt; &lt;/a&gt;または相対パスとが存在しなくてもよいです。ターゲットが相対パスの場合、結果のリンクに対するファイルシステム操作は、リンクのパスに相対的です。</target>
        </trans-unit>
        <trans-unit id="643140ef281b03db8ff1987c73ac0c49fd06dd1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;target&lt;/code&gt; parameter is the target of the link. It may be an &lt;a href=&quot;path#isAbsolute--&quot;&gt;&lt;code&gt;absolute&lt;/code&gt;&lt;/a&gt; or relative path and may not exist. When the target is a relative path then file system operations on the resulting link are relative to the path of the link.</source>
          <target state="translated">&lt;code&gt;target&lt;/code&gt; パラメータは、リンクのターゲットです。それがあってもよい&lt;a href=&quot;path#isAbsolute--&quot;&gt; &lt;code&gt;absolute&lt;/code&gt; &lt;/a&gt;または相対パスとが存在しなくてもよいです。ターゲットが相対パスの場合、結果のリンクでのファイルシステム操作は、リンクのパスに対して相対的です。</target>
        </trans-unit>
        <trans-unit id="0009c69a4dc15a49dcbf1a0c8eae01039c7c4a96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;thumbnails&lt;/code&gt; argument must either be &lt;code&gt;null&lt;/code&gt; or contain only &lt;code&gt;BufferedImage&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;thumbnails&lt;/code&gt; 引数はどちらかでなければなりません &lt;code&gt;null&lt;/code&gt; のみ含ま &lt;code&gt;BufferedImage&lt;/code&gt; オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="7f203db2af4b065dabcc3805554e22404c4433c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timeStamp&lt;/code&gt; of the notification is a time value (consistent with &lt;a href=&quot;../../../../java.base/java/lang/system#currentTimeMillis()&quot;&gt;&lt;code&gt;System.currentTimeMillis()&lt;/code&gt;&lt;/a&gt;) indicating when the notification was constructed.</source>
          <target state="translated">通知の &lt;code&gt;timeStamp&lt;/code&gt; は、通知がいつ作成されたかを示す時間値（&lt;a href=&quot;../../../../java.base/java/lang/system#currentTimeMillis()&quot;&gt; &lt;code&gt;System.currentTimeMillis()&lt;/code&gt; &lt;/a&gt;と一致）です。</target>
        </trans-unit>
        <trans-unit id="a0e9ab517d625c7c2deaf59529ad7e0219c013fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timeStamp&lt;/code&gt; of the notification is a time value (consistent with &lt;a href=&quot;../../../java/lang/system#currentTimeMillis--&quot;&gt;&lt;code&gt;System.currentTimeMillis()&lt;/code&gt;&lt;/a&gt;) indicating when the notification was constructed.</source>
          <target state="translated">通知の &lt;code&gt;timeStamp&lt;/code&gt; は、通知がいつ作成されたかを示す時間値（&lt;a href=&quot;../../../java/lang/system#currentTimeMillis--&quot;&gt; &lt;code&gt;System.currentTimeMillis()&lt;/code&gt; &lt;/a&gt;と一致）です。</target>
        </trans-unit>
        <trans-unit id="b2dc1977f789016cfbe08995493b9abe10ad9cbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString&lt;/code&gt; method for class &lt;code&gt;Object&lt;/code&gt; returns a string consisting of the name of the class of which the object is an instance, the at-sign character `&lt;code&gt;@&lt;/code&gt;', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:</source>
          <target state="translated">クラス &lt;code&gt;Object&lt;/code&gt; の &lt;code&gt;toString&lt;/code&gt; メソッドは、オブジェクトがインスタンスであるクラスの名前、アットマーク文字 ` &lt;code&gt;@&lt;/code&gt; '、およびオブジェクトのハッシュコードの符号なし16進表現で構成される文字列を返します。つまり、このメソッドは次の値に等しい文字列を返します。</target>
        </trans-unit>
        <trans-unit id="f35e165aad5f7865197b005be9bb45266399d993" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;toString&lt;/code&gt; method may return two different values on two &lt;code&gt;StackTraceElement&lt;/code&gt; instances that are &lt;a href=&quot;#equals(java.lang.Object)&quot;&gt;equal&lt;/a&gt;, for example one created via the constructor, and one obtained from &lt;a href=&quot;throwable&quot;&gt;&lt;code&gt;Throwable&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;stackwalker.stackframe&quot;&gt;&lt;code&gt;StackWalker.StackFrame&lt;/code&gt;&lt;/a&gt;, where an implementation may choose to omit some element in the returned string.</source>
          <target state="translated">&lt;code&gt;toString&lt;/code&gt; の方法は、2つのに2つの異なる値を返すことができる &lt;code&gt;StackTraceElement&lt;/code&gt; であるインスタンス&lt;a href=&quot;#equals(java.lang.Object)&quot;&gt;等しい&lt;/a&gt;例示コンストラクタを介して作成したもの、とから得られたため、&lt;a href=&quot;throwable&quot;&gt; &lt;code&gt;Throwable&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;stackwalker.stackframe&quot;&gt; &lt;code&gt;StackWalker.StackFrame&lt;/code&gt; &lt;/a&gt;実装が返される文字列内のいくつかの要素を省略することを選択することができます。</target>
        </trans-unit>
        <trans-unit id="bc716b32be2e2ea2d617e608d9ff17039ae30d19" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; argument should be a valid value for the byte that follows the status byte in the &lt;code&gt;MetaMessage&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; argument should contain all the subsequent bytes of the &lt;code&gt;MetaMessage&lt;/code&gt;. In other words, the byte that specifies the type of &lt;code&gt;MetaMessage&lt;/code&gt; is not considered a data byte.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; 引数は、中ステータスバイト以下のバイトの有効な値でなければなりません &lt;code&gt;MetaMessage&lt;/code&gt; を。 &lt;code&gt;data&lt;/code&gt; 引数は、すべての後続のバイト含まれている必要があり &lt;code&gt;MetaMessage&lt;/code&gt; を。つまり、 &lt;code&gt;MetaMessage&lt;/code&gt; のタイプを指定するバイトは、データバイトとは見なされません。</target>
        </trans-unit>
        <trans-unit id="06b9218c7159f9ade16823be04d6c173149333fb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; of any &lt;code&gt;AdjustmentEvent&lt;/code&gt; instance takes one of the following values:</source>
          <target state="translated">&lt;code&gt;AdjustmentEvent&lt;/code&gt; インスタンスの &lt;code&gt;type&lt;/code&gt; は、次のいずれかの値を取ります。</target>
        </trans-unit>
        <trans-unit id="9d6e7d46137f25ad7f8964128a6f000618a91b9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; parameter indicates the relation between the two components. If the two components will be contained in the same parent and are showing similar logically related items, use &lt;code&gt;RELATED&lt;/code&gt;. If the two components will be contained in the same parent but show logically unrelated items use &lt;code&gt;UNRELATED&lt;/code&gt;. Some look and feels may not distinguish between the &lt;code&gt;RELATED&lt;/code&gt; and &lt;code&gt;UNRELATED&lt;/code&gt; types.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; パラメータは、2つの構成要素間の関係を示します。 2つのコンポーネントが同じ親に含まれ、同様の論理的に関連するアイテムを表示している場合は、 &lt;code&gt;RELATED&lt;/code&gt; を使用します。 2つのコンポーネントが同じ親に含まれるが、論理的に関連のないアイテムが表示される場合は、 &lt;code&gt;UNRELATED&lt;/code&gt; を使用します。一部のルックアンドフィールでは、 &lt;code&gt;RELATED&lt;/code&gt; タイプと &lt;code&gt;UNRELATED&lt;/code&gt; タイプを区別できない場合があります。</target>
        </trans-unit>
        <trans-unit id="fc25f1a4f79c0d9cb38f65494514c69d349c3f8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; parameter is the type of the attributes required and this method returns an instance of that type if supported. All implementations support a basic set of file attributes and so invoking this method with a &lt;code&gt;type&lt;/code&gt; parameter of &lt;code&gt;
 BasicFileAttributes.class&lt;/code&gt; will not throw &lt;code&gt;
 UnsupportedOperationException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; パラメータは、必須属性のタイプであり、サポートされている場合、この方法は、そのタイプのインスタンスを返します。すべての実装はファイル属性の基本セットをサポートしているため、 &lt;code&gt; BasicFileAttributes.class&lt;/code&gt; の &lt;code&gt;type&lt;/code&gt; パラメーターを使用してこのメ​​ソッドを呼び出しても &lt;code&gt; UnsupportedOperationException&lt;/code&gt; はスローされません。</target>
        </trans-unit>
        <trans-unit id="714e35a3944791dcc0a21aa2cfb1cc1a672a4844" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; parameter is the type of the attributes required and this method returns an instance of that type if supported. All implementations support a basic set of file attributes and so invoking this method with a &lt;code&gt;type&lt;/code&gt; parameter of &lt;code&gt;BasicFileAttributes.class&lt;/code&gt; will not throw &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; パラメータは、必須属性のタイプであり、サポートされている場合、この方法は、そのタイプのインスタンスを返します。すべての実装はファイル属性の基本セットをサポートしているため、 &lt;code&gt;BasicFileAttributes.class&lt;/code&gt; の &lt;code&gt;type&lt;/code&gt; パラメーターを指定してこのメ​​ソッドを呼び出しても、 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; はスローされません。</target>
        </trans-unit>
        <trans-unit id="f1056213ec4dbb35ecbc5b5160831677aa11a47e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; parameter is typically a class, but it may be any type, such as an interface, a primitive type (like &lt;code&gt;int.class&lt;/code&gt;), or &lt;code&gt;void.class&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; パラメータは、典型的には、クラスであるが、そのようなインタフェース、（などプリミティブ型など任意のタイプであってもよい &lt;code&gt;int.class&lt;/code&gt; を）、または &lt;code&gt;void.class&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d0f557c7ffa69e938b51901e39f9567f456bb67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;typeName&lt;/code&gt; here is determined by the &lt;a href=&quot;#type-names&quot;&gt; type name rules&lt;/a&gt; detailed below.</source>
          <target state="translated">ここでの &lt;code&gt;typeName&lt;/code&gt; は、以下に詳述する&lt;a href=&quot;#type-names&quot;&gt;タイプ名の規則&lt;/a&gt;によって決定されます。</target>
        </trans-unit>
        <trans-unit id="b34f44d7ea255df3fe2a501bc7503f396e8bcc57" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uncaughtException&lt;/code&gt; method of &lt;code&gt;ThreadGroup&lt;/code&gt; does the following:</source>
          <target state="translated">&lt;code&gt;ThreadGroup&lt;/code&gt; の &lt;code&gt;uncaughtException&lt;/code&gt; メソッドは次のことを行います。</target>
        </trans-unit>
        <trans-unit id="284484383fbc17bd10f3ef3060ba77933b35645d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;underlinedIndex&lt;/code&gt; parameter points to a char value (Unicode code unit) in the given string. If the char value specified at the underlined index is in the high-surrogate range and the char value at the following index is in the low-surrogate range then the supplementary character corresponding to this surrogate pair is underlined.</source>
          <target state="translated">&lt;code&gt;underlinedIndex&lt;/code&gt; の指定された文字列のchar値（Unicodeコード単位）にパラメータ点。下線付きのインデックスで指定されたchar値が高サロゲート範囲にあり、次のインデックスのchar値が低サロゲート範囲にある場合、このサロゲートペアに対応する補足文字に下線が引かれます。</target>
        </trans-unit>
        <trans-unit id="4450253c95c412d34ca14474c433b55151989bf1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update&lt;/code&gt; method of &lt;code&gt;Component&lt;/code&gt; calls this component's &lt;code&gt;paint&lt;/code&gt; method to redraw this component. This method is commonly overridden by subclasses which need to do additional work in response to a call to &lt;code&gt;repaint&lt;/code&gt;. Subclasses of Component that override this method should either call &lt;code&gt;super.update(g)&lt;/code&gt;, or call &lt;code&gt;paint(g)&lt;/code&gt; directly from their &lt;code&gt;update&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;Component&lt;/code&gt; の &lt;code&gt;update&lt;/code&gt; メソッドは、このコンポーネントの &lt;code&gt;paint&lt;/code&gt; メソッドを呼び出して、このコンポーネントを再描画します。このメソッドは通常、 &lt;code&gt;repaint&lt;/code&gt; の呼び出しに応答して追加の作業を行う必要があるサブクラスによってオーバーライドされます。このメソッドをオーバーライドするComponentのサブクラスは、 &lt;code&gt;super.update(g)&lt;/code&gt; を呼び出すか、 &lt;code&gt;update&lt;/code&gt; メソッドから直接 &lt;code&gt;paint(g)&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="ba8b125bbe0fb10254e8b4e3a983a07e8dccd3bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uri&lt;/code&gt; parameter is an absolute, hierarchical URI, with a scheme equal (without regard to case) to the scheme supported by this provider. The exact form of the URI is highly provider dependent. The &lt;code&gt;env&lt;/code&gt; parameter is a map of provider specific properties to configure the file system.</source>
          <target state="translated">&lt;code&gt;uri&lt;/code&gt; パラメータは、このプロバイダによってサポートされている方式と（場合に関係なく）同じ方式で、絶対的な、階層URIです。URIの正確な形式は、プロバイダーに大きく依存します。 &lt;code&gt;env&lt;/code&gt; パラメータは、ファイルシステムを設定するには、プロバイダ固有のプロパティのマップです。</target>
        </trans-unit>
        <trans-unit id="8d5265eccd53a8174604390135889708c5fc5e2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;useOrdering&lt;/code&gt; argument controls the ordering of the results using the same rules as &lt;code&gt;getServiceProviders(Class, boolean)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;useOrdering&lt;/code&gt; 引数が同じルールを使用して結果の順序を制御 &lt;code&gt;getServiceProviders(Class, boolean)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cf3c577a872e1c1751d1a92167097db6476c0ae8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;value&lt;/code&gt; can be retrieved by calling the &lt;code&gt;get&lt;/code&gt; method with a &lt;code&gt;key&lt;/code&gt; that is equal to the original &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; 呼び出すことによって取得することができる &lt;code&gt;get&lt;/code&gt; と方法 &lt;code&gt;key&lt;/code&gt; 元に等しい &lt;code&gt;key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c6dc1003235f78ae44b563cd9c64b625dec84264" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;value&lt;/code&gt; field specifies the current value of the property, based on a combination of the information supplied to the method &lt;code&gt;getPropertyInfo&lt;/code&gt;, the Java environment, and the driver-supplied default values.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; フィールドは、メソッドに提供された情報の組み合わせに基づいて、プロパティの現在の値を指定 &lt;code&gt;getPropertyInfo&lt;/code&gt; 、Java環境、およびドライバが提供するデフォルト値。</target>
        </trans-unit>
        <trans-unit id="6bb04aabca923c27392cb6a07985f491ac538c08" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;value&lt;/code&gt; field specifies the current value of the property, based on a combination of the information supplied to the method &lt;code&gt;getPropertyInfo&lt;/code&gt;, the Java environment, and the driver-supplied default values. This field may be null if no value is known.</source>
          <target state="translated">&lt;code&gt;value&lt;/code&gt; フィールドは、メソッドに提供された情報の組み合わせに基づいて、プロパティの現在の値を指定 &lt;code&gt;getPropertyInfo&lt;/code&gt; 、Java環境、およびドライバが提供するデフォルト値。値が不明な場合、このフィールドはnullになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="a0dc0ca5643c577e2bc28f2c4d9f85f55ae2ae0a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;view&lt;/code&gt; attribute identifies the &lt;code&gt;AbstractView&lt;/code&gt; from which the event was generated.</source>
          <target state="translated">&lt;code&gt;view&lt;/code&gt; 属性識別 &lt;code&gt;AbstractView&lt;/code&gt; イベントが生成されました。</target>
        </trans-unit>
        <trans-unit id="35e9083dd12ca67db6c302fb48e049498f0e86ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; values are automatically enlarged if either is less than the minimum size as specified by previous call to &lt;code&gt;setMinimumSize&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;width&lt;/code&gt; と &lt;code&gt;height&lt;/code&gt; の前回の呼び出しで指定された以下の最小寸法よりもいずれかの場合に値が自動的に拡大され &lt;code&gt;setMinimumSize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e270b26fb5f4d86ce8e6fe4ab24f798852bc112c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;width&lt;/code&gt; or &lt;code&gt;height&lt;/code&gt; values are automatically enlarged if either is less than the minimum size as specified by previous call to &lt;code&gt;setMinimumSize&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;width&lt;/code&gt; または &lt;code&gt;height&lt;/code&gt; の前回の呼び出しで指定された以下の最小寸法よりもいずれかの場合に値が自動的に拡大され &lt;code&gt;setMinimumSize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cb6cc5d83f6f060e6206ee4432cd2838d953df43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;wrap()&lt;/code&gt; and &lt;code&gt;unwrap()&lt;/code&gt; methods may execute concurrently of each other.</source>
          <target state="translated">&lt;code&gt;wrap()&lt;/code&gt; および &lt;code&gt;unwrap()&lt;/code&gt; メソッドは、互いに同時に実行してもよいです。</target>
        </trans-unit>
        <trans-unit id="b6ac35afc51c676f6acfb59fbb66aebb7fd7dffe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;CipherOutputStream&lt;/code&gt; calls the &lt;code&gt;write&lt;/code&gt; method of three arguments with the three arguments &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;b.length&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; の方法 &lt;code&gt;CipherOutputStream&lt;/code&gt; は、呼び出して &lt;code&gt;write&lt;/code&gt; 3つの3つの引数と引数の方法 &lt;code&gt;b&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; 、および &lt;code&gt;b.length&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b444208efa76dded6db1c12df1b7df685049876c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt; calls its &lt;code&gt;write&lt;/code&gt; method of three arguments with the arguments &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;b.length&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FilterOutputStream&lt;/code&gt; の &lt;code&gt;write&lt;/code&gt; メソッドは、引数 &lt;code&gt;b&lt;/code&gt; 、 &lt;code&gt;0&lt;/code&gt; 、および &lt;code&gt;b.length&lt;/code&gt; を使用して、3つの引数の &lt;code&gt;write&lt;/code&gt; メソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="4d273be569b8b30933a05fc498292c5402a93de3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt; calls the &lt;code&gt;write&lt;/code&gt; method of its underlying output stream, that is, it performs &lt;code&gt;out.write(b)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; 方法 &lt;code&gt;FilterOutputStream&lt;/code&gt; は、呼び出し &lt;code&gt;write&lt;/code&gt; で、その基本となる出力ストリームの方法を、それが実行 &lt;code&gt;out.write(b)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b52d117ddcb1aaf2483d386c55d430f15571498" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;FilterOutputStream&lt;/code&gt; calls the &lt;code&gt;write&lt;/code&gt; method of one argument on each &lt;code&gt;byte&lt;/code&gt; to output.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; の方法 &lt;code&gt;FilterOutputStream&lt;/code&gt; は、呼び出し、 &lt;code&gt;write&lt;/code&gt; ごとに1つの引数のメソッド &lt;code&gt;byte&lt;/code&gt; 出力にします。</target>
        </trans-unit>
        <trans-unit id="f6b5bd7ff632f357b485afe4736af5f2318b4eb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt; calls the write method of one argument on each of the bytes to be written out. Subclasses are encouraged to override this method and provide a more efficient implementation.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; の方法 &lt;code&gt;OutputStream&lt;/code&gt; 、書き込むバイトごとに1つの引数のwriteメソッドを呼び出します。サブクラスでは、このメソッドをオーバーライドして、より効率的な実装を提供することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4052734952517729cae634a4334fbfe7bc56b79a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write&lt;/code&gt; methods of the resulting stream will throw an &lt;a href=&quot;illegalblockingmodeexception&quot;&gt;&lt;code&gt;IllegalBlockingModeException&lt;/code&gt;&lt;/a&gt; if invoked while the underlying channel is in non-blocking mode. The stream will not be buffered. The stream will be safe for access by multiple concurrent threads. Closing the stream will in turn cause the channel to be closed.</source>
          <target state="translated">基になるチャネルが非ブロッキングモードのときに呼び出された場合、結果のストリームの &lt;code&gt;write&lt;/code&gt; メソッドは&lt;a href=&quot;illegalblockingmodeexception&quot;&gt; &lt;code&gt;IllegalBlockingModeException&lt;/code&gt; &lt;/a&gt;をスローします。ストリームはバッファリングされません。ストリームは、複数の同時スレッドによるアクセスに対して安全になります。ストリームを閉じると、チャネルが閉じられます。</target>
        </trans-unit>
        <trans-unit id="7aeccac65dd62b076d4abb5d4c775615877d46ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writeObject&lt;/code&gt; is a single entry point to the persistence and is used by a &lt;code&gt;Encoder&lt;/code&gt; in the traditional mode of delegation. Although this method is not final, it should not need to be subclassed under normal circumstances.</source>
          <target state="translated">&lt;code&gt;writeObject&lt;/code&gt; は、持続性への単一のエントリポイントであるとで使用されている &lt;code&gt;Encoder&lt;/code&gt; の代表団の伝統的なモードで。このメソッドは最終的なものではありませんが、通常の状況ではサブクラス化する必要はありません。</target>
        </trans-unit>
        <trans-unit id="0937ca02336197261dddb7803acba46aa6ec7743" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writeObject&lt;/code&gt; is a single entry point to the persistence and is used by an &lt;code&gt;Encoder&lt;/code&gt; in the traditional mode of delegation.</source>
          <target state="translated">&lt;code&gt;writeObject&lt;/code&gt; は、持続性の単一のエントリポイントであるとによって使用される &lt;code&gt;Encoder&lt;/code&gt; 委任の伝統的なモードで。</target>
        </trans-unit>
        <trans-unit id="9c855374ef3af39f227ccdf574cfb54afb0d247f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writeObject&lt;/code&gt; is a single entry point to the persistence and is used by an &lt;code&gt;Encoder&lt;/code&gt; in the traditional mode of delegation. Although this method is not final, it should not need to be subclassed under normal circumstances.</source>
          <target state="translated">&lt;code&gt;writeObject&lt;/code&gt; は、持続性の単一のエントリポイントであるとによって使用される &lt;code&gt;Encoder&lt;/code&gt; 委任の伝統的なモードで。このメソッドは最終的なものではありませんが、通常の状況ではサブクラス化する必要はありません。</target>
        </trans-unit>
        <trans-unit id="65972030b222838810b7ba8b656c7648e06077d7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;writeUTF&lt;/code&gt; method of interface &lt;code&gt;DataOutput&lt;/code&gt; may be used to write data that is suitable for reading by this method.</source>
          <target state="translated">インターフェース &lt;code&gt;DataOutput&lt;/code&gt; の &lt;code&gt;writeUTF&lt;/code&gt; メソッドを使用して、このメソッドによる読み取りに適したデータを書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="ecdfdf55c3e6233c34db1e9797ae4ac06e60e0e8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{ }&lt;/code&gt; characters are a group of subpatterns, where the group matches if any subpattern in the group matches. The &lt;code&gt;&quot;,&quot;&lt;/code&gt; character is used to separate the subpatterns. Groups cannot be nested.</source>
          <target state="translated">&lt;code&gt;{ }&lt;/code&gt; の文字はグループがあれば一致するサブパターンのグループであるグループマッチの任意のサブパターン。 &lt;code&gt;&quot;,&quot;&lt;/code&gt; 文字は、サブパターンを区切るために使用されます。グループはネストできません。</target>
        </trans-unit>
        <trans-unit id="4383cedf66c99d541142d23205794e9fbe074f11" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;action&lt;/em&gt;. For a permission you need, this is one of the actions in the list &lt;a href=&quot;#action-list&quot;&gt;below&lt;/a&gt;. For a permission you have, this is a comma-separated list of those actions, or &lt;code&gt;*&lt;/code&gt;, representing all actions.</source>
          <target state="translated">&lt;em&gt;アクション&lt;/em&gt;。必要な権限の場合、これは&lt;a href=&quot;#action-list&quot;&gt;以下&lt;/a&gt;のリストのアクションの1つです。あなたが持っている許可の場合、これはそれらのアクションのコンマ区切りリスト、またはすべてのアクションを表す &lt;code&gt;*&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a6904e89112c0b2f4cf76a3eaf77590286f5121f" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;canonical key property list&lt;/em&gt; is the same string as described for &lt;a href=&quot;#getCanonicalKeyPropertyListString()&quot;&gt;&lt;code&gt;getCanonicalKeyPropertyListString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;正規のキープロパティリストは、&lt;/em&gt;のために説明したのと同じ文字列である&lt;a href=&quot;#getCanonicalKeyPropertyListString()&quot;&gt; &lt;code&gt;getCanonicalKeyPropertyListString()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4203e1844ba2358b9cf99e65861fc5814fcbd135" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;canonical key property list&lt;/em&gt; is the same string as described for &lt;a href=&quot;objectname#getCanonicalKeyPropertyListString--&quot;&gt;&lt;code&gt;getCanonicalKeyPropertyListString()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;正規のキープロパティリストは、&lt;/em&gt;のために説明したのと同じ文字列である&lt;a href=&quot;objectname#getCanonicalKeyPropertyListString--&quot;&gt; &lt;code&gt;getCanonicalKeyPropertyListString()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0da932c873e0a87699cfc16c3ea52c0b2e0de4c0" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;class name&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;クラス名&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b34ed1bdfeb4a02859cb87fc0dd3c70da93cc4ac" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;domain&lt;/em&gt; is a string of characters not including the character colon (&lt;code&gt;:&lt;/code&gt;). It is recommended that the domain should not contain the string &quot;&lt;code&gt;//&lt;/code&gt;&quot;, which is reserved for future use.</source>
          <target state="translated">&lt;em&gt;ドメインは&lt;/em&gt;、文字、コロンを含まない文字列です（ &lt;code&gt;:&lt;/code&gt; ）。ドメインには、将来の使用のために予約されている文字列「 &lt;code&gt;//&lt;/code&gt; 」を含めないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4031de43ef1c59b0c68ad4834eee900eefebe3c6" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;head&lt;/em&gt; of this queue is the &lt;em&gt;least&lt;/em&gt; element with respect to the specified ordering. If multiple elements are tied for least value, the head is one of those elements -- ties are broken arbitrarily. The queue retrieval operations &lt;code&gt;poll&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, &lt;code&gt;peek&lt;/code&gt;, and &lt;code&gt;element&lt;/code&gt; access the element at the head of the queue.</source>
          <target state="translated">このキューの&lt;em&gt;先頭&lt;/em&gt;は、指定された順序に関して&lt;em&gt;最小の&lt;/em&gt;要素です。複数の要素が最小値で結合されている場合、ヘッドはそれらの要素の1つです。結合は任意に分割されます。キュー取得操作は、 &lt;code&gt;poll&lt;/code&gt; 、 &lt;code&gt;remove&lt;/code&gt; 、 &lt;code&gt;peek&lt;/code&gt; 、および &lt;code&gt;element&lt;/code&gt; アクセスにより、キューの先頭にある要素にアクセスします。</target>
        </trans-unit>
        <trans-unit id="132748ef7ce7edd118fa2aec50bbb6b7013d4a04" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;key properties&lt;/em&gt; are an unordered set of keys and associated values.</source>
          <target state="translated">&lt;em&gt;キープロパティは&lt;/em&gt;、キーと関連する値の非順序集合です。</target>
        </trans-unit>
        <trans-unit id="49b6c7b812bfb37bbfa829d277662d381281a9fd" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;mapped&lt;/em&gt; Java type, &lt;em&gt;opendata(J)&lt;/em&gt;, which is always the same for any given &lt;em&gt;opentype(J)&lt;/em&gt;. This is a Java class.</source>
          <target state="translated">&lt;em&gt;マッピングされた&lt;/em&gt; Java型、&lt;em&gt;をopendata（J）&lt;/em&gt;は常に、任意の所与のために同じである、&lt;em&gt;OpenTypeの（J） &lt;/em&gt;。これはJavaクラスです。</target>
        </trans-unit>
        <trans-unit id="bbb454761775dc1a414464798499aeee43da2b26" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;member&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;メンバー&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="074cbd71c6bb024356bb7396d0de2ecfe45082b5" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;name&lt;/em&gt; of the permission can also denote a list of one or more comma-separated operations. Spaces are allowed at the beginning and end of the &lt;em&gt;name&lt;/em&gt; and before and after commas.</source>
          <target state="translated">権限の&lt;em&gt;名前&lt;/em&gt;は、1つ以上のコンマ区切りの操作のリストを表すこともできます。&lt;em&gt;名前の&lt;/em&gt;最初と最後、およびコンマの前後にはスペースを入れることができます。</target>
        </trans-unit>
        <trans-unit id="9480872eca819a401a143d99801ef4a81e78cc7a" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;object name&lt;/em&gt;.</source>
          <target state="translated">&lt;em&gt;オブジェクト名&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="b8bea707941f307636110813bd9843488dbd1cb0" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;opens&lt;/em&gt; directive in a module declaration declares a package to be open to allow all types in the package, and all their members, not just public types and their public members to be reflected on by APIs that support private access or a way to bypass or suppress default Java language access control checks.</source>
          <target state="translated">モジュール宣言の&lt;em&gt;opens&lt;/em&gt;ディレクティブは、パッケージが開いていることを宣言して、パッケージ内のすべてのタイプと、パブリックタイプとそのパブリックメンバーだけでなく、そのすべてのメンバーが、プライベートアクセスまたはバイパスする方法をサポートするAPIによって反映されるようにします。デフォルトのJava言語アクセス制御チェックを抑制します。</target>
        </trans-unit>
        <trans-unit id="5ea4f18aba4c5af225e35673d4891fc5fa9e0a6b" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;origin&lt;/em&gt; of an element or other language model item.</source>
          <target state="translated">要素または他の言語モデルアイテムの&lt;em&gt;起源&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="7bf772b2c89d559914753f218273f17b3f5fef8c" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;origin&lt;/em&gt; of an element or other language model item. The origin of an element or item models how a construct in a program is declared in the source code, explicitly, implicitly, etc.</source>
          <target state="translated">要素または他の言語モデルアイテムの&lt;em&gt;起源&lt;/em&gt;。要素またはアイテムの起源は、プログラム内の構成がソースコードで明示的、暗黙的にどのように宣言されるかをモデル化します。</target>
        </trans-unit>
        <trans-unit id="f0e83e021e240eac4fd2981ea6d32868e52f81d8" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;parent&lt;/em&gt; of an abstract pathname consists of the pathname's prefix, if any, and each name in the pathname's name sequence except for the last. If the name sequence is empty then the pathname does not name a parent directory.</source>
          <target state="translated">抽象パス名の&lt;em&gt;親&lt;/em&gt;は、パス名のプレフィックス（存在する場合）と、パス名の名前シーケンスの最後の名前を除く各名前で構成されます。名前シーケンスが空の場合、パス名は親ディレクトリを指定しません。</target>
        </trans-unit>
        <trans-unit id="89fec665c0c46c36e97a962d8fe4d0387ff30f83" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;parent&lt;/em&gt; of an abstract pathname may be obtained by invoking the &lt;a href=&quot;#getParent()&quot;&gt;&lt;code&gt;getParent()&lt;/code&gt;&lt;/a&gt; method of this class and consists of the pathname's prefix and each name in the pathname's name sequence except for the last. Each directory's absolute pathname is an ancestor of any &lt;code&gt;File&lt;/code&gt; object with an absolute abstract pathname which begins with the directory's absolute pathname. For example, the directory denoted by the abstract pathname &lt;code&gt;&quot;/usr&quot;&lt;/code&gt; is an ancestor of the directory denoted by the pathname &lt;code&gt;&quot;/usr/local/bin&quot;&lt;/code&gt;.</source>
          <target state="translated">抽象パス名の&lt;em&gt;親&lt;/em&gt;は、このクラスの&lt;a href=&quot;#getParent()&quot;&gt; &lt;code&gt;getParent()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって取得でき、パス名のプレフィックスと、最後を除くパス名の名前シーケンス内の各名前で構成されます。各ディレクトリの絶対パス名は、ディレクトリの絶対パス名で始まる絶対抽象パス名を持つ &lt;code&gt;File&lt;/code&gt; オブジェクトの祖先です。たとえば、抽象パス名 &lt;code&gt;&quot;/usr&quot;&lt;/code&gt; で示されるディレクトリは、パス名 &lt;code&gt;&quot;/usr/local/bin&quot;&lt;/code&gt; 示されるディレクトリの祖先です。</target>
        </trans-unit>
        <trans-unit id="d0528ba347878b821ba42755b3a17661463c339f" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;parent&lt;/em&gt; of an abstract pathname may be obtained by invoking the &lt;a href=&quot;file#getParent--&quot;&gt;&lt;code&gt;getParent()&lt;/code&gt;&lt;/a&gt; method of this class and consists of the pathname's prefix and each name in the pathname's name sequence except for the last. Each directory's absolute pathname is an ancestor of any &lt;code&gt;File&lt;/code&gt; object with an absolute abstract pathname which begins with the directory's absolute pathname. For example, the directory denoted by the abstract pathname &lt;code&gt;&quot;/usr&quot;&lt;/code&gt; is an ancestor of the directory denoted by the pathname &lt;code&gt;&quot;/usr/local/bin&quot;&lt;/code&gt;.</source>
          <target state="translated">抽象パス名の&lt;em&gt;親&lt;/em&gt;は、このクラスの&lt;a href=&quot;file#getParent--&quot;&gt; &lt;code&gt;getParent()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって取得でき、パス名のプレフィックスと、パス名の名前シーケンスの最後の名前を除く各名前で構成されます。各ディレクトリの絶対パス名は、ディレクトリの絶対パス名で始まる絶対抽象パス名を持つ任意の &lt;code&gt;File&lt;/code&gt; オブジェクトの祖先です。たとえば、抽象パス名 &lt;code&gt;&quot;/usr&quot;&lt;/code&gt; で示されるディレクトリは、パス名 &lt;code&gt;&quot;/usr/local/bin&quot;&lt;/code&gt; 示されるディレクトリの祖先です。</target>
        </trans-unit>
        <trans-unit id="3219f3facb21696d1ed20d4e54a6c99ee13262e4" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;pattern indication&lt;/em&gt; is:</source>
          <target state="translated">&lt;em&gt;パターンの表示は&lt;/em&gt;次のとおりです。</target>
        </trans-unit>
        <trans-unit id="75b0986f1f4d3f972e20d5706e48596a413d0f0a" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;specified&lt;/em&gt; flag for each attribute will always be true, unless it has been set to false in the copy constructor or using &lt;a href=&quot;#setSpecified(int,boolean)&quot;&gt;&lt;code&gt;setSpecified(int, boolean)&lt;/code&gt;&lt;/a&gt;. Similarly, the &lt;em&gt;declared&lt;/em&gt; flag for each attribute will always be false, except for defaulted attributes (&lt;em&gt;specified&lt;/em&gt; is false), non-CDATA attributes, or when it is set to true using &lt;a href=&quot;#setDeclared(int,boolean)&quot;&gt;&lt;code&gt;setDeclared(int, boolean)&lt;/code&gt;&lt;/a&gt;. If you change an attribute's type by hand, you may need to modify its &lt;em&gt;declared&lt;/em&gt; flag to match.</source>
          <target state="translated">&lt;em&gt;指定された&lt;/em&gt;それは、コピーコンストラクタでfalseに設定されてか、使用していない限り、各属性のフラグは常に、trueになります&lt;a href=&quot;#setSpecified(int,boolean)&quot;&gt; &lt;code&gt;setSpecified(int, boolean)&lt;/code&gt; &lt;/a&gt;。同様に、各属性の&lt;em&gt;宣言された&lt;/em&gt;フラグは、デフォルトの属性（falseに&lt;em&gt;指定&lt;/em&gt;）、非CDATA属性、または&lt;a href=&quot;#setDeclared(int,boolean)&quot;&gt; &lt;code&gt;setDeclared(int, boolean)&lt;/code&gt; &lt;/a&gt;を使用してtrueに設定されている場合を除いて、常にfalseになります。属性のタイプを手動で変更する場合、一致するように&lt;em&gt;宣言された&lt;/em&gt;フラグを変更する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="e24706d6569ad24b7b450fbbe13dd7ea6ed5e827" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;time-to-live&lt;/em&gt; for Internet Protocol (IP) multicast datagrams</source>
          <target state="translated">&lt;em&gt;生存時間&lt;/em&gt;インターネット・プロトコル（IP）マルチキャストデータグラムのために</target>
        </trans-unit>
        <trans-unit id="2a0f0d9a04c7aa959de016e80e8a27f487dc3d88" translate="yes" xml:space="preserve">
          <source>The &lt;em&gt;time-to-live&lt;/em&gt; for Internet Protocol (IP) multicast datagrams.</source>
          <target state="translated">&lt;em&gt;生存時間&lt;/em&gt;インターネット・プロトコル（IP）マルチキャストデータグラムのために。</target>
        </trans-unit>
        <trans-unit id="a5cbd78bbaec3014307f658d756d06fe19f45c6b" translate="yes" xml:space="preserve">
          <source>The &lt;var&gt;outer&lt;/var&gt; parameter is a pointer to the MBeanServer that should be passed to the &lt;a href=&quot;mbeanregistration&quot;&gt;&lt;code&gt;MBeanRegistration&lt;/code&gt;&lt;/a&gt; interface when registering MBeans inside the MBeanServer. If &lt;var&gt;outer&lt;/var&gt; is &lt;code&gt;null&lt;/code&gt;, then the MBeanServer implementation must use its own &lt;code&gt;this&lt;/code&gt; reference when invoking the &lt;a href=&quot;mbeanregistration&quot;&gt;&lt;code&gt;MBeanRegistration&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">&lt;var&gt;outer&lt;/var&gt; パラメータが渡されるべきであるMBeanServerへのポインタである&lt;a href=&quot;mbeanregistration&quot;&gt; &lt;code&gt;MBeanRegistration&lt;/code&gt; の&lt;/a&gt; MBeanServerの内部MBeanを登録する際のインターフェース。 &lt;var&gt;outer&lt;/var&gt; が &lt;code&gt;null&lt;/code&gt; の場合、MBeanServer実装は、&lt;a href=&quot;mbeanregistration&quot;&gt; &lt;code&gt;MBeanRegistration&lt;/code&gt; &lt;/a&gt;インターフェースを呼び出すときに独自の &lt;code&gt;this&lt;/code&gt; 参照を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="f59eba20773f5628795f2594c47e23e68f64a277" translate="yes" xml:space="preserve">
          <source>The ACL Entries in each ACL observe the following rules:</source>
          <target state="translated">各ACLのエントリーは、以下のルールを遵守します。</target>
        </trans-unit>
        <trans-unit id="8bff27e96b6704d8f87499203e5a6ae8eb995398" translate="yes" xml:space="preserve">
          <source>The ACL entry represented by this class is based on the ACL model specified in &lt;a href=&quot;http://www.ietf.org/rfc/rfc3530.txt&quot;&gt;&lt;i&gt;RFC 3530: Network File System (NFS) version 4 Protocol&lt;/i&gt;&lt;/a&gt;. Each entry has four components as follows:</source>
          <target state="translated">このクラスで表されるACLエントリは、&lt;a href=&quot;http://www.ietf.org/rfc/rfc3530.txt&quot;&gt;&lt;i&gt;RFC 3530：Network File System（NFS）version 4 Protocolで&lt;/i&gt;&lt;/a&gt;指定されているACLモデルに基づいています。各エントリには、次の4つのコンポーネントがあります。</target>
        </trans-unit>
        <trans-unit id="7935a2f1ee484e91861f127adcc137f1458cac88" translate="yes" xml:space="preserve">
          <source>The API allows a concrete &lt;a href=&quot;transformerfactory&quot;&gt;&lt;code&gt;TransformerFactory&lt;/code&gt;&lt;/a&gt; object to be created from the static function &lt;a href=&quot;transformerfactory#newInstance()&quot;&gt;&lt;code&gt;TransformerFactory.newInstance()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">APIを使用すると、静的関数&lt;a href=&quot;transformerfactory#newInstance()&quot;&gt; &lt;code&gt;TransformerFactory.newInstance()&lt;/code&gt; &lt;/a&gt;から具体的な&lt;a href=&quot;transformerfactory&quot;&gt; &lt;code&gt;TransformerFactory&lt;/code&gt; &lt;/a&gt;オブジェクトを作成できます。</target>
        </trans-unit>
        <trans-unit id="36548e1972814e3b9960a257ac0e7fefe094719d" translate="yes" xml:space="preserve">
          <source>The API has a relatively large surface area in terms of number of methods. This is made manageable through the use of consistent method prefixes.</source>
          <target state="translated">APIはメソッド数の点で比較的大きな表面積を持っています。これは、一貫したメソッドの接頭辞を使用することで管理しやすくなっています。</target>
        </trans-unit>
        <trans-unit id="dbd68d7bbcc6cfd76b2979294dc860ef940a8a77" translate="yes" xml:space="preserve">
          <source>The API has been designed to reject null early and to be clear about this behavior. A key exception is any method that takes an object and returns a boolean, for the purpose of checking or validating, will generally return false for null.</source>
          <target state="translated">APIはNULLを早期に拒否し、この動作を明確にするように設計されています。重要な例外として、オブジェクトを受け取り、チェックや検証の目的でブール値を返すメソッドは、一般的に null の場合は false を返します。</target>
        </trans-unit>
        <trans-unit id="5d2d1219bb89c1b00654a21e6d21d64a9c99c7dd" translate="yes" xml:space="preserve">
          <source>The API includes remote access, so a remote management program can interact with a running application for these purposes.</source>
          <target state="translated">APIにはリモートアクセスが含まれているため、リモート管理プログラムはこれらの目的のために実行中のアプリケーションと対話することができます。</target>
        </trans-unit>
        <trans-unit id="0ddb46698ab6320ca268f051f9fdff93cea456dc" translate="yes" xml:space="preserve">
          <source>The API is also designed for user extensibility, as there are many ways of calculating time. The &lt;a href=&quot;temporal/temporalfield&quot;&gt;field&lt;/a&gt; and &lt;a href=&quot;temporal/temporalunit&quot;&gt;unit&lt;/a&gt; API, accessed via &lt;a href=&quot;temporal/temporalaccessor&quot;&gt;&lt;code&gt;TemporalAccessor&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;temporal/temporal&quot;&gt;&lt;code&gt;Temporal&lt;/code&gt;&lt;/a&gt; provide considerable flexibility to applications. In addition, the &lt;a href=&quot;temporal/temporalquery&quot;&gt;&lt;code&gt;TemporalQuery&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;temporal/temporaladjuster&quot;&gt;&lt;code&gt;TemporalAdjuster&lt;/code&gt;&lt;/a&gt; interfaces provide day-to-day power, allowing code to read close to business requirements:</source>
          <target state="translated">時間を計算する方法はたくさんあるので、APIはユーザーの拡張性を考慮して設計されています。&lt;a href=&quot;temporal/temporalfield&quot;&gt;フィールド&lt;/a&gt;および&lt;a href=&quot;temporal/temporalunit&quot;&gt;ユニット&lt;/a&gt;を介してアクセスAPI、&lt;a href=&quot;temporal/temporalaccessor&quot;&gt; &lt;code&gt;TemporalAccessor&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;temporal/temporal&quot;&gt; &lt;code&gt;Temporal&lt;/code&gt; &lt;/a&gt;アプリケーションにかなりの柔軟性を提供します。さらに、&lt;a href=&quot;temporal/temporalquery&quot;&gt; &lt;code&gt;TemporalQuery&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;temporal/temporaladjuster&quot;&gt; &lt;code&gt;TemporalAdjuster&lt;/code&gt; &lt;/a&gt;インターフェイスは日々の能力を提供し、コードがビジネス要件に近い読み取りを可能にします。</target>
        </trans-unit>
        <trans-unit id="9d4850815012acd78d63e490cb3a9ac9619de1e0" translate="yes" xml:space="preserve">
          <source>The API is defined by classes in the package &lt;code&gt;javax.smartcardio&lt;/code&gt;. They can be classified as follows:</source>
          <target state="translated">APIは、パッケージ &lt;code&gt;javax.smartcardio&lt;/code&gt; のクラスによって定義されます。それらは次のように分類できます。</target>
        </trans-unit>
        <trans-unit id="14204c857d829d56ea62ee7c57aa99da1a8c1fa8" translate="yes" xml:space="preserve">
          <source>The API is designed to be type-safe where reasonable in the main high-level API. Thus, there are separate classes for the distinct concepts of date, time and date-time, plus variants for offset and time-zone. This can seem like a lot of classes, but most applications can begin with just five date/time types.</source>
          <target state="translated">このAPIは、メインの高レベルAPIの中で合理的なところでは型安全であるように設計されています。このように、日付、時刻、日付-時刻という明確な概念のための別々のクラスがあり、さらにオフセットとタイムゾーンのためのバリアントがあります。これは多くのクラスがあるように見えますが、ほとんどのアプリケーションでは5つの日付/時刻型だけで始めることができます。</target>
        </trans-unit>
        <trans-unit id="5ef3ef0b96f3f41f9bc604e1a12e6451e41174cc" translate="yes" xml:space="preserve">
          <source>The API provides a way for URIs referenced from within the stylesheet instructions or within the transformation to be resolved by the calling application. This can be done by creating a class that implements the &lt;a href=&quot;uriresolver&quot;&gt;&lt;code&gt;URIResolver&lt;/code&gt;&lt;/a&gt; interface, with its one method, &lt;a href=&quot;uriresolver#resolve(java.lang.String,java.lang.String)&quot;&gt;&lt;code&gt;URIResolver.resolve(java.lang.String, java.lang.String)&lt;/code&gt;&lt;/a&gt;, and use this class to set the URI resolution for the transformation instructions or transformation with &lt;a href=&quot;transformerfactory#setURIResolver(javax.xml.transform.URIResolver)&quot;&gt;&lt;code&gt;TransformerFactory.setURIResolver(javax.xml.transform.URIResolver)&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;transformer#setURIResolver(javax.xml.transform.URIResolver)&quot;&gt;&lt;code&gt;Transformer.setURIResolver(javax.xml.transform.URIResolver)&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;URIResolver.resolve&lt;/code&gt; method takes two String arguments, the URI found in the stylesheet instructions or built as part of the transformation process, and the base URI against which the first argument will be made absolute if the absolute URI is required. The returned &lt;a href=&quot;source&quot;&gt;&lt;code&gt;Source&lt;/code&gt;&lt;/a&gt; object must be usable by the transformer, as specified in its implemented features.</source>
          <target state="translated">APIは、スタイルシート命令内または変換内から参照されるURIを、呼び出し元のアプリケーションによって解決する方法を提供します。これは、&lt;a href=&quot;uriresolver&quot;&gt; &lt;code&gt;URIResolver&lt;/code&gt; &lt;/a&gt;インターフェイスを実装するクラスを1つのメソッド&lt;a href=&quot;uriresolver#resolve(java.lang.String,java.lang.String)&quot;&gt; &lt;code&gt;URIResolver.resolve(java.lang.String, java.lang.String)&lt;/code&gt; &lt;/a&gt;で作成し、このクラスを使用して変換命令のURI解像度を設定することで実行できます。形質転換&lt;a href=&quot;transformerfactory#setURIResolver(javax.xml.transform.URIResolver)&quot;&gt; &lt;code&gt;TransformerFactory.setURIResolver(javax.xml.transform.URIResolver)&lt;/code&gt; &lt;/a&gt;又は&lt;a href=&quot;transformer#setURIResolver(javax.xml.transform.URIResolver)&quot;&gt; &lt;code&gt;Transformer.setURIResolver(javax.xml.transform.URIResolver)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;URIResolver.resolve&lt;/code&gt; メソッドは2つの文字列引数を取ります。スタイルシート命令で見つかった、または変換プロセスの一部として構築されたURIと、絶対URIが必要な場合に最初の引数が絶対になるベースURIです。返される&lt;a href=&quot;source&quot;&gt; &lt;code&gt;Source&lt;/code&gt; &lt;/a&gt;オブジェクトは、実装された機能で指定されているように、トランスフォーマーで使用できる必要があります。</target>
        </trans-unit>
        <trans-unit id="1d7455826253bffa39b78615725dcdd563f19a04" translate="yes" xml:space="preserve">
          <source>The API requires every print service to support certain attributes; other attributes are optional and the service can choose whether or not to support them. Each attribute has a set of values that it accepts. The API requires every print service to support certain values for certain attributes; other attribute values are optional and the service can choose whether or not to support them. These support requirements are recorded in the documentation for each attribute class.</source>
          <target state="translated">APIでは、すべての印刷サービスが特定の属性をサポートする必要があります。各属性には、受け入れられる値のセットがあります。その他の属性の値はオプションであり、サービスはそれらをサポートするかどうかを選択することができます。これらのサポート要件は、各属性クラスのドキュメントに記録されています。</target>
        </trans-unit>
        <trans-unit id="98bf436512bc6abd974a2733430a3d5b5a388d6c" translate="yes" xml:space="preserve">
          <source>The APIs added in 1.7 map between the old and new language codes, maintaining the old codes internal to Locale (so that &lt;code&gt;getLanguage&lt;/code&gt; and &lt;code&gt;toString&lt;/code&gt; reflect the old code), but using the new codes in the BCP 47 language tag APIs (so that &lt;code&gt;toLanguageTag&lt;/code&gt; reflects the new one). This preserves the equivalence between Locales no matter which code or API is used to construct them. Java's default resource bundle lookup mechanism also implements this mapping, so that resources can be named using either convention, see &lt;a href=&quot;resourcebundle.control&quot;&gt;&lt;code&gt;ResourceBundle.Control&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">1.7で追加されたAPIは、古い言語コードと新しい言語コードを &lt;code&gt;getLanguage&lt;/code&gt; 、Locale内部の古いコードを維持し（getLanguageと &lt;code&gt;toString&lt;/code&gt; が古いコードを反映するように）、BCP 47言語タグAPIで新しいコードを使用する（ &lt;code&gt;toLanguageTag&lt;/code&gt; が反映するように）新しい方）。これにより、どのコードまたはAPIを使用してロケールを構築しても、ロケール間の同等性が維持されます。Javaのデフォルトのリソースバンドルの検索メカニズムもそうリソースはいずれかの規則を使用して命名することができ、参照、このマッピングを実装&lt;a href=&quot;resourcebundle.control&quot;&gt; &lt;code&gt;ResourceBundle.Control&lt;/code&gt; のを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6023c5172deb2e42606e029f4d360e805d38b457" translate="yes" xml:space="preserve">
          <source>The APIs in this package are all deprecated without replacement.</source>
          <target state="translated">本パッケージの API はすべて非推奨です。</target>
        </trans-unit>
        <trans-unit id="1e8aa36e1e31661c0e8ce5465a873be7b0631796" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition for this is:</source>
          <target state="translated">そのためのASN.1の定義は</target>
        </trans-unit>
        <trans-unit id="943be2a0bc4bf87f26928040bf4bf42222a1a4d3" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition is as follows:</source>
          <target state="translated">ASN.1の定義は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="33b3e4f975d64c40485d484aff9c8c6946bbcac2" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition of &lt;code&gt;GeneralNames&lt;/code&gt; is defined in &lt;a href=&quot;#getSubjectAlternativeNames()&quot;&gt;&lt;code&gt;getSubjectAlternativeNames&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;GeneralNames&lt;/code&gt; のASN.1定義は、&lt;a href=&quot;#getSubjectAlternativeNames()&quot;&gt; &lt;code&gt;getSubjectAlternativeNames&lt;/code&gt; &lt;/a&gt;で定義されています。</target>
        </trans-unit>
        <trans-unit id="47734034dda78f218c309ac08628f954c60425f3" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition of &lt;code&gt;GeneralNames&lt;/code&gt; is defined in &lt;a href=&quot;x509certificate#getSubjectAlternativeNames--&quot;&gt;&lt;code&gt;getSubjectAlternativeNames&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;GeneralNames&lt;/code&gt; のASN.1定義は、&lt;a href=&quot;x509certificate#getSubjectAlternativeNames--&quot;&gt; &lt;code&gt;getSubjectAlternativeNames&lt;/code&gt; &lt;/a&gt;で定義されています。</target>
        </trans-unit>
        <trans-unit id="8d4394df37dee40fdf32c164d9e7675520b84225" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition of &lt;code&gt;tbsCertList&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;tbsCertList&lt;/code&gt; のASN.1定義は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f3b0786ad17cd85c2406e5dec048d22519850b47" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition of &lt;code&gt;tbsCertificate&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;tbsCertificate&lt;/code&gt; のASN.1定義は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ef48af476f938c6dbaa3d39664736786a596b706" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition of the &lt;code&gt;IssuerAltName&lt;/code&gt; extension is:</source>
          <target state="translated">&lt;code&gt;IssuerAltName&lt;/code&gt; 拡張機能のASN.1定義は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f3bfe2daf1a8d1055520bbddc7ce3310410386b4" translate="yes" xml:space="preserve">
          <source>The ASN.1 definition of the &lt;code&gt;SubjectAltName&lt;/code&gt; extension is:</source>
          <target state="translated">&lt;code&gt;SubjectAltName&lt;/code&gt; 拡張機能のASN.1定義は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ef7fb5e463d8e7a85b7d17a9a4424f5c59dec8a2" translate="yes" xml:space="preserve">
          <source>The AWT Focus Subsystem</source>
          <target state="translated">AWTフォーカスサブシステム</target>
        </trans-unit>
        <trans-unit id="c23a37e89e94656b7c67efc2143f08a7162a7dc6" translate="yes" xml:space="preserve">
          <source>The AWT Modality</source>
          <target state="translated">AWTモダリティ</target>
        </trans-unit>
        <trans-unit id="b973428a4010a2e2c6902dfcdc73ebef4dc85d16" translate="yes" xml:space="preserve">
          <source>The AWT listener model lets applications attach event listeners to components in order to bind events to actions. Swing encourages the use of keymaps instead of listeners, but maintains compatibility with listeners by giving the listeners a chance to steal an event by consuming it.</source>
          <target state="translated">AWTリスナーモデルでは、アプリケーションはイベントリスナーをコンポーネントにアタッチして、イベントをアクションに結びつけることができます。Swingはリスナーの代わりにキーマップの使用を奨励していますが、リスナーがイベントを消費することでイベントを盗むチャンスを与えることで、リスナーとの互換性を維持しています。</target>
        </trans-unit>
        <trans-unit id="0669e573aa756da1edc3404f2ca12e839dcd44e2" translate="yes" xml:space="preserve">
          <source>The AccessControlContext of the thread that created the instance of URLClassLoader will be used when subsequently loading classes and resources.</source>
          <target state="translated">URLClassLoader のインスタンスを作成したスレッドの AccessControlContext は、その後にクラスやリソースをロードする際に使用されます。</target>
        </trans-unit>
        <trans-unit id="b36f05d0d881d326a4ca7052f41c11e7cb29b4d8" translate="yes" xml:space="preserve">
          <source>The AccessController class is used for access control operations and decisions.</source>
          <target state="translated">アクセス制御の操作や判断にはAccessControllerクラスを使用します。</target>
        </trans-unit>
        <trans-unit id="e44ca12442a1e7b0c2ea9c89fdb764999e8954ae" translate="yes" xml:space="preserve">
          <source>The AccessibleObject class is the base class for Field, Method and Constructor objects.</source>
          <target state="translated">AccessibleObject クラスは、Field、Method、Constructor オブジェクトの基底クラスです。</target>
        </trans-unit>
        <trans-unit id="6a4566430ddc25f7244284392e568dac22b82186" translate="yes" xml:space="preserve">
          <source>The AccessibleObject class is the base class for Field, Method and Constructor objects. It provides the ability to flag a reflected object as suppressing default Java language access control checks when it is used. The access checks--for public, default (package) access, protected, and private members--are performed when Fields, Methods or Constructors are used to set or get fields, to invoke methods, or to create and initialize new instances of classes, respectively.</source>
          <target state="translated">AccessibleObjectクラスは、Field、Method、Constructorオブジェクトの基底クラスです。これは、反映されたオブジェクトが使用されたときに、デフォルトのJava言語のアクセス制御チェックを抑制するようにフラグを立てる機能を提供します。アクセス・チェックは、public、default (package)アクセス、protected、private の各メンバに対して、フィールド、メソッド、コンストラクタが、フィールドの設定や取得、メソッドの呼び出し、クラスの新しいインスタンスの作成や初期化にそれぞれ使用されたときに実行されます。</target>
        </trans-unit>
        <trans-unit id="a68ea02747038a8e45417b19cd5c6838a7022a98" translate="yes" xml:space="preserve">
          <source>The AffineTransform parameter passed into and out of this class are cloned. The RenderingHints and Shape parameters are not necessarily cloneable and are therefore only reference copied. Altering RenderingHints or Shape instances that are in use by instances of RenderContext may have undesired side effects.</source>
          <target state="translated">このクラスに出し入れするAffineTransformパラメータはクローン化されます。RenderingHints と Shape パラメータは必ずしも複製可能ではないため、参照コピーのみとなります。RenderContext のインスタンスで使用されている RenderingHints や Shape インスタンスを変更すると、望ましくない副作用が生じる可能性があります。</target>
        </trans-unit>
        <trans-unit id="6784e3abc090fab94e5244fcbe90ade6d9424123" translate="yes" xml:space="preserve">
          <source>The AllPermission is a permission that implies all other permissions.</source>
          <target state="translated">AllPermissionは、他のすべてのパーミッションを暗示するパーミッションです。</target>
        </trans-unit>
        <trans-unit id="160ae22b65044b8568a8445e371a31bf8aaf3856" translate="yes" xml:space="preserve">
          <source>The Alt key extended modifier constant.</source>
          <target state="translated">Altキーの拡張修飾子定数です。</target>
        </trans-unit>
        <trans-unit id="c32b87d13e51010df9b131a2a159c6f08c4061cc" translate="yes" xml:space="preserve">
          <source>The Alt key modifier constant.</source>
          <target state="translated">Altキー修飾子の定数。</target>
        </trans-unit>
        <trans-unit id="67ebaec467a6e9959ba36c0e74821764b3f28d0e" translate="yes" xml:space="preserve">
          <source>The AltGraph key extended modifier constant.</source>
          <target state="translated">AltGraph キー拡張修飾子定数。</target>
        </trans-unit>
        <trans-unit id="af96a3451e70135ea5a5f5dfb4bc7b7416b43b8e" translate="yes" xml:space="preserve">
          <source>The AltGraph key modifier constant.</source>
          <target state="translated">AltGraph キー修飾子定数。</target>
        </trans-unit>
        <trans-unit id="6868186048f362d856c90c60963c84a42086381e" translate="yes" xml:space="preserve">
          <source>The Applet API is deprecated, no replacement.</source>
          <target state="translated">Applet APIは非推奨で、代替はありません。</target>
        </trans-unit>
        <trans-unit id="952898db7755e8938613fa579a9e9fc86b6e5a52" translate="yes" xml:space="preserve">
          <source>The Applet API is deprecated.</source>
          <target state="translated">Applet APIは非推奨です。</target>
        </trans-unit>
        <trans-unit id="8dd33816bcdb119edd3850a36cdb8640a02f66c5" translate="yes" xml:space="preserve">
          <source>The Applet API is deprecated. See the &lt;a href=&quot;../../java/applet/package-summary&quot;&gt; java.applet package documentation&lt;/a&gt; for further information.</source>
          <target state="translated">アプレットAPIは非推奨です。詳細については、&lt;a href=&quot;../../java/applet/package-summary&quot;&gt;java.appletパッケージのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3fde7dcfee0eaa7810b2d3e4119c1b3003baeb65" translate="yes" xml:space="preserve">
          <source>The Applet API is deprecated. See the &lt;a href=&quot;../applet/package-summary&quot;&gt; java.applet package documentation&lt;/a&gt; for further information.</source>
          <target state="translated">アプレットAPIは非推奨です。詳細については、&lt;a href=&quot;../applet/package-summary&quot;&gt;java.appletパッケージのドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="074b0f1a024ad247a895c2f41c9dab31804bb1f1" translate="yes" xml:space="preserve">
          <source>The Arabic range with the Arabic-Indic digits.</source>
          <target state="translated">アラビア語の範囲をアラビア語-インド語の桁数で表します。</target>
        </trans-unit>
        <trans-unit id="5f0a7cc180f7ec121449f8ad22a0f254f01aed33" translate="yes" xml:space="preserve">
          <source>The Arabic range with the Eastern Arabic-Indic digits.</source>
          <target state="translated">東部のアラビア語-インド語の桁数を持つアラビア語の範囲。</target>
        </trans-unit>
        <trans-unit id="9b559b3d068940514b3b2c10adaad5cfb38dfc1e" translate="yes" xml:space="preserve">
          <source>The Area class will attempt to return the tightest bounding box possible for the Shape. The bounding box will not be padded to include the control points of curves in the outline of the Shape, but should tightly fit the actual geometry of the outline itself.</source>
          <target state="translated">Areaクラスは、Shapeに対して可能な限りタイトな外接枠を返そうとします。Shapeのアウトラインに曲線の制御点が含まれるようにバウンディングボックスはパディングされませんが、アウトライン自体の実際のジオメトリにぴったりとフィットするようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="9477ca8f0c7cd6500bd0479d8977d02cdcbaf631" translate="yes" xml:space="preserve">
          <source>The Area class will attempt to return the tightest bounding box possible for the Shape. The bounding box will not be padded to include the control points of curves in the outline of the Shape, but should tightly fit the actual geometry of the outline itself. Since the returned object represents the bounding box with integers, the bounding box can only be as tight as the nearest integer coordinates that encompass the geometry of the Shape.</source>
          <target state="translated">Areaクラスは、Shapeに対して可能な限りタイトな外接枠を返そうとします。外接枠は、シェイプのアウトラインの曲線の制御点を含むようにパディングされることはありませんが、アウトライン自体の実際のジオメトリにぴったりとフィットするようにしなければなりません。返されたオブジェクトは整数でバウンディングボックスを表しているため、バウンディングボックスはシェイプのジオメトリを包含する最も近い整数の座標と同じくらいしかタイトにすることができません。</target>
        </trans-unit>
        <trans-unit id="e40e5d487b331e1f7f4c2477322a84662ea1dcde" translate="yes" xml:space="preserve">
          <source>The Art of Computer Programming</source>
          <target state="translated">コンピュータ・プログラミングの技術</target>
        </trans-unit>
        <trans-unit id="3e916cc17dff2d73e810c4085e8846b18e562a3e" translate="yes" xml:space="preserve">
          <source>The Art of Computer Programming,</source>
          <target state="translated">コンピュータ・プログラミングの芸術。</target>
        </trans-unit>
        <trans-unit id="d69bacd54b669ff7d878e60414c2d1f8611ca3a2" translate="yes" xml:space="preserve">
          <source>The Art of Computer Programming, Volume 2</source>
          <target state="translated">コンピュータ・プログラミングの技術 第2巻</target>
        </trans-unit>
        <trans-unit id="545bef1b9e1299301bb2907b1e213bfe088b7b67" translate="yes" xml:space="preserve">
          <source>The Attribute with attrID that was previous in this attribute set; null if no such attribute existed.</source>
          <target state="translated">この属性セットの前にあった attrID を持つ Attribute;そのような属性が存在しない場合は null。</target>
        </trans-unit>
        <trans-unit id="86989bf0d4a1d404f5eef67b394b9e8347a4cb82" translate="yes" xml:space="preserve">
          <source>The Attribute with the same ID as attr that was previous in this attribute set; null if no such attribute existed.</source>
          <target state="translated">この属性セットの前にあったattrと同じIDを持つ属性。</target>
        </trans-unit>
        <trans-unit id="188be4b00e3695b200467797aef29ec1a27bdb7b" translate="yes" xml:space="preserve">
          <source>The Attribute with the same ID as attrID that was previous in the attribute set; null if no such attribute existed.</source>
          <target state="translated">属性セットの前にあったattrIDと同じIDを持つ属性。</target>
        </trans-unit>
        <trans-unit id="17831de708d75ed43f9af6c62286f3a3d590fbe3" translate="yes" xml:space="preserve">
          <source>The Attributes class maps Manifest attribute names to associated string values.</source>
          <target state="translated">Attributes クラスは、マニフェスト属性名を関連付けられた文字列値にマッピングします。</target>
        </trans-unit>
        <trans-unit id="11106864e8cece63f4df274160f30c89327ce115" translate="yes" xml:space="preserve">
          <source>The Attributes class maps Manifest attribute names to associated string values. Valid attribute names are case-insensitive, are restricted to the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed 70 characters in length. Attribute values can contain any characters and will be UTF8-encoded when written to the output stream. See the JAR File Specification for more information about valid attribute names and values.</source>
          <target state="translated">属性クラスは、マニフェスト属性名を関連する文字列値にマッピングします。有効な属性名は大文字小文字を区別せず、[0-9a-zA-Z_-]のセットのASCII文字に制限され、長さは70文字を超えることはできません。属性値は任意の文字を含むことができ、出力ストリームに書き込まれる際にはUTF8エンコードされます。有効な属性名と値の詳細については、JAR ファイル仕様書を参照してください。</target>
        </trans-unit>
        <trans-unit id="3ef11f26de12755419a148282a58582ba21062d2" translate="yes" xml:space="preserve">
          <source>The Attributes class maps Manifest attribute names to associated string values. Valid attribute names are case-insensitive, are restricted to the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed 70 characters in length. There must be a colon and a SPACE after the name; the combined length will not exceed 72 characters. Attribute values can contain any characters and will be UTF8-encoded when written to the output stream. See the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/specs/jar/jar.html&quot;&gt;JAR File Specification&lt;/a&gt; for more information about valid attribute names and values.</source>
          <target state="translated">属性クラスは、マニフェスト属性名を関連する文字列値にマップします。有効な属性名は大文字と小文字を区別せず、セット[0-9a-zA-Z_-]内のASCII文字に制限されており、長さが70文字を超えることはできません。名前の後にコロンとスペースが必要です。合計の長さは72文字を超えません。属性値には任意の文字を含めることができ、出力ストリームに書き込まれるときにUTF8でエンコードされます。有効な属性名と値の詳細については、&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/specs/jar/jar.html&quot;&gt;JARファイル仕様&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5b1b32f55e754aebc8c66e80e5a265f6ce9b4d29" translate="yes" xml:space="preserve">
          <source>The Attributes.Name class represents an attribute name stored in this Map.</source>
          <target state="translated">Attributes.Name クラスは、このマップに格納されている属性名を表します。</target>
        </trans-unit>
        <trans-unit id="e586abe0903b7ef3e0a894bd9fa0abd2347cbc7b" translate="yes" xml:space="preserve">
          <source>The Attributes.Name class represents an attribute name stored in this Map. Valid attribute names are case-insensitive, are restricted to the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed 70 characters in length. Attribute values can contain any characters and will be UTF8-encoded when written to the output stream. See the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/specs/jar/jar.html&quot;&gt;JAR File Specification&lt;/a&gt; for more information about valid attribute names and values.</source>
          <target state="translated">attributes.Nameクラスは、このマップに格納されている属性名を表します。有効な属性名は大文字と小文字を区別せず、セット[0-9a-zA-Z_-]内のASCII文字に制限されており、長さが70文字を超えることはできません。属性値には任意の文字を含めることができ、出力ストリームに書き込まれるときにUTF8でエンコードされます。有効な属性名と値の詳細については、&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/specs/jar/jar.html&quot;&gt;JARファイル仕様&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="130d29f5e1935938287de918b31d59eac532adc8" translate="yes" xml:space="preserve">
          <source>The Attributes.Name class represents an attribute name stored in this Map. Valid attribute names are case-insensitive, are restricted to the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed 70 characters in length. Attribute values can contain any characters and will be UTF8-encoded when written to the output stream. See the JAR File Specification for more information about valid attribute names and values.</source>
          <target state="translated">Attributes.Name クラスは、このマップに格納されている属性名を表します。有効な属性名は大文字小文字を区別せず、[0-9a-zA-Z_-]セットの ASCII 文字に制限されます。属性値には任意の文字を含めることができ、出力ストリームに書き込まれると UTF8 エンコードされます。有効な属性名と値の詳細については、JAR ファイル仕様書を参照してください。</target>
        </trans-unit>
        <trans-unit id="933c13e97de653f311c0095da4356feb1ef9aa07" translate="yes" xml:space="preserve">
          <source>The BIDI_EMBEDDING attribute in the text, if present, represents embedding level information. Negative values from -1 to -62 indicate overrides at the absolute value of the level. Positive values from 1 to 62 indicate embeddings. Where values are zero or not defined, the base embedding level as determined by the base direction is assumed.</source>
          <target state="translated">テキスト内の BIDI_EMBEDDING 属性が存在する場合、埋め込みレベル情報を表します。1から-62までの負の値は、レベルの絶対値でのオーバーライドを示す。1から62までの正の値は、エンベッディングを示す。値がゼロであるか定義されていない場合には、ベース方向によって決定されるベース埋め込みレベルが想定される。</target>
        </trans-unit>
        <trans-unit id="0a6d149de56262f01e5e36cd8497b77dee6738e2" translate="yes" xml:space="preserve">
          <source>The BackSpace key.</source>
          <target state="translated">BackSpaceキーです。</target>
        </trans-unit>
        <trans-unit id="39a8d250337b403c7a9d7f4737d5c4ebb7d43c9b" translate="yes" xml:space="preserve">
          <source>The Balinese range with the Balinese digits.</source>
          <target state="translated">バリの桁数でバリのレンジ。</target>
        </trans-unit>
        <trans-unit id="479b03243c34870565e01fcb4d8b7558405fd430" translate="yes" xml:space="preserve">
          <source>The Base64 padding character &lt;code&gt;'='&lt;/code&gt; is accepted and interpreted as the end of the encoded byte data, but is not required. So if the final unit of the encoded byte data only has two or three Base64 characters (without the corresponding padding character(s) padded), they are decoded as if followed by padding character(s). If there is a padding character present in the final unit, the correct number of padding character(s) must be present, otherwise &lt;code&gt;IllegalArgumentException&lt;/code&gt; ( &lt;code&gt;IOException&lt;/code&gt; when reading from a Base64 stream) is thrown during decoding.</source>
          <target state="translated">Base64パディング文字 &lt;code&gt;'='&lt;/code&gt; は受け入れられ、エンコードされたバイトデータの終わりとして解釈されますが、必須ではありません。したがって、エンコードされたバイトデータの最後のユニットに2つまたは3つのBase64文字のみが含まれている場合（対応する埋め込み文字が埋め込まれていない場合）、それらは埋め込み文字が続くかのようにデコードされます。最後のユニットにパディング文字が存在する場合は、正しい数のパディング文字が存在する必要があります。それ以外の場合は、デコード中に &lt;code&gt;IllegalArgumentException&lt;/code&gt; （Base64ストリームから読み取る &lt;code&gt;IOException&lt;/code&gt; ）がスローされます。</target>
        </trans-unit>
        <trans-unit id="7f2fa42fffaffc455185b2641418acb565381be2" translate="yes" xml:space="preserve">
          <source>The BasicPermission class extends the Permission class, and can be used as the base class for permissions that want to follow the same naming convention as BasicPermission.</source>
          <target state="translated">BasicPermissionクラスはPermissionクラスを拡張したもので、BasicPermissionと同じ命名規則に従いたいパーミッションの基底クラスとして使用することができます。</target>
        </trans-unit>
        <trans-unit id="d8109724094de0721a57a12d33075bebc3a6c1d9" translate="yes" xml:space="preserve">
          <source>The BasicReason enumerates the potential reasons that a certification path of any type may be invalid.</source>
          <target state="translated">BasicReason は、任意のタイプの認証パスが無効である可能性がある潜在的な理由を列挙します。</target>
        </trans-unit>
        <trans-unit id="7f2f07330207c79bdf9b8035cdfc8c33b0b86b6f" translate="yes" xml:space="preserve">
          <source>The BeanContext acts a logical hierarchical container for JavaBeans.</source>
          <target state="translated">BeanContextは、JavaBeansの論理階層コンテナとして動作します。</target>
        </trans-unit>
        <trans-unit id="db9f214e6794613d1af4a4bd16aca364a324671d" translate="yes" xml:space="preserve">
          <source>The BeanContextServices interface provides a mechanism for a BeanContext to expose generic &quot;services&quot; to the BeanContextChild objects within.</source>
          <target state="translated">BeanContextServicesインタフェースは,BeanContext内のBeanContextChildオブジェクトに汎用的な「サービス」を公開するためのBeanContextのメカニズムを提供します。</target>
        </trans-unit>
        <trans-unit id="28e60bfa8d3958dbf027cd9ce5a707ff9a06e8f0" translate="yes" xml:space="preserve">
          <source>The Bengali range with the Bengali digits.</source>
          <target state="translated">ベンガル語の数字を使ったベンガル語の範囲です。</target>
        </trans-unit>
        <trans-unit id="61f473874cda4877ad49e4b4e18b2669d648bcfa" translate="yes" xml:space="preserve">
          <source>The BigInteger constant one.</source>
          <target state="translated">BigIntegerの定数1。</target>
        </trans-unit>
        <trans-unit id="4fe20da433bea836e2620a8e5bd24465caa34b0d" translate="yes" xml:space="preserve">
          <source>The BigInteger constant ten.</source>
          <target state="translated">BigInteger定数10。</target>
        </trans-unit>
        <trans-unit id="2ae94bca84a3b818bb066e53ab21fbe4a5a93bac" translate="yes" xml:space="preserve">
          <source>The BigInteger constant two.</source>
          <target state="translated">BigIntegerの定数2。</target>
        </trans-unit>
        <trans-unit id="eaa19daee6ceb68fa207da723944fc65078e9b5c" translate="yes" xml:space="preserve">
          <source>The BigInteger constant zero.</source>
          <target state="translated">BigIntegerの定数ゼロ。</target>
        </trans-unit>
        <trans-unit id="f2abfa8bc11f1cc0906af68cb43302c5e56e7dbc" translate="yes" xml:space="preserve">
          <source>The Boolean class wraps a value of the primitive type &lt;code&gt;boolean&lt;/code&gt; in an object.</source>
          <target state="translated">Booleanクラスは、プリミティブ型 &lt;code&gt;boolean&lt;/code&gt; の値をオブジェクトにラップします。</target>
        </trans-unit>
        <trans-unit id="d66eb41900b1a53b5e15c061f84c26f96aec8f20" translate="yes" xml:space="preserve">
          <source>The Boolean class wraps a value of the primitive type &lt;code&gt;boolean&lt;/code&gt; in an object. An object of type &lt;code&gt;Boolean&lt;/code&gt; contains a single field whose type is &lt;code&gt;boolean&lt;/code&gt;.</source>
          <target state="translated">Booleanクラスは、プリミティブ型 &lt;code&gt;boolean&lt;/code&gt; の値をオブジェクトにラップします。型のオブジェクト &lt;code&gt;Boolean&lt;/code&gt; 型がある単一のフィールドが含ま &lt;code&gt;boolean&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="81801484504e216b7fb284280633eaa1558a087c" translate="yes" xml:space="preserve">
          <source>The BoxLayout manager is constructed with an axis parameter that specifies the type of layout that will be done. There are four choices:</source>
          <target state="translated">BoxLayoutマネージャは、実行されるレイアウトのタイプを指定する軸パラメータで構成されています。4つの選択肢があります。</target>
        </trans-unit>
        <trans-unit id="bc0905838de7d1f34ab2990b1ad9e0ca39c77842" translate="yes" xml:space="preserve">
          <source>The Builder class for building the CatalogFeatures object.</source>
          <target state="translated">CatalogFeatures オブジェクトを構築するための Builder クラスです。</target>
        </trans-unit>
        <trans-unit id="efc67a7d1a2c9c36bea385389f98ef36be245ba3" translate="yes" xml:space="preserve">
          <source>The CIEXYZ conversion color space defined above.</source>
          <target state="translated">上記で定義したCIEXYZ変換色空間。</target>
        </trans-unit>
        <trans-unit id="806e172d08d936be7f9a402bfc1b266638b44841" translate="yes" xml:space="preserve">
          <source>The CLA byte of the command APDU is automatically adjusted to match the channel number of this CardChannel.</source>
          <target state="translated">コマンド APDU の CLA バイトは、この CardChannel のチャネル番号と一致するように自動的に調整されます。</target>
        </trans-unit>
        <trans-unit id="69ad751af3c43bdb33861e917a3b1c15e936c9cf" translate="yes" xml:space="preserve">
          <source>The COLUMN_SIZE column represents the specified column size for the given column. For numeric data, this is the maximum precision. For character data, this is the length in characters. For datetime datatypes, this is the length in characters of the String representation (assuming the maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes. For the ROWID datatype, this is the length in bytes. Null is returned for data types where the column size is not applicable.</source>
          <target state="translated">COLUMN_SIZE列は、指定された列の指定された列サイズを表します。数値データの場合、これは最大精度です。文字データの場合、これは文字単位の長さです。データタイプの場合、これは String 表現の文字数で表した長さです (小数点以下の秒数成分の最大許容精度を前提としています)。バイナリ・データの場合、これはバイト単位の長さです。ROWIDデータ型の場合、これはバイト単位の長さです。列サイズが適用できないデータ型の場合、Null が返されます。</target>
        </trans-unit>
        <trans-unit id="36a57ef1b9f6c643e2079cf370e0822f39c24fb7" translate="yes" xml:space="preserve">
          <source>The COLUMN_SIZE column specifies the column size for the given column. For numeric data, this is the maximum precision. For character data, this is the length in characters. For datetime datatypes, this is the length in characters of the String representation (assuming the maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes. For the ROWID datatype, this is the length in bytes. Null is returned for data types where the column size is not applicable.</source>
          <target state="translated">COLUMN_SIZE列は、指定された列の列サイズを指定します。数値データの場合、これは最大精度です。文字データの場合、これは文字単位の長さです。データタイプの場合、これは String 表現の文字単位の長さです (小数の秒成分の最大許容精度を想定しています)。バイナリ・データの場合、これはバイト単位の長さです。ROWIDデータ型の場合、これはバイト単位の長さです。列サイズが適用できないデータ型の場合、Null が返されます。</target>
        </trans-unit>
        <trans-unit id="730ba74f50d3f28436fa29f532e375e6c0695ab2" translate="yes" xml:space="preserve">
          <source>The CPU time provided by this interface has nanosecond precision but not necessarily nanosecond accuracy.</source>
          <target state="translated">このインタフェースが提供するCPU時間は、ナノ秒の精度を有するが、必ずしもナノ秒の精度を有するとは限らない。</target>
        </trans-unit>
        <trans-unit id="e8f7f2f7ff227a32e7a5531eecf91cf56365cd7f" translate="yes" xml:space="preserve">
          <source>The CRL or OCSP response cannot be obtained because of a network error.</source>
          <target state="translated">ネットワーク・エラーのため、CRL または OCSP 応答を取得できません。</target>
        </trans-unit>
        <trans-unit id="7089d78e3e0c62b70041275bb433057c167f603b" translate="yes" xml:space="preserve">
          <source>The CRLReason enumeration specifies the reason that a certificate is revoked, as defined in &lt;a href=&quot;http://tools.ietf.org/html/rfc5280&quot;&gt; RFC 5280: Internet X.509 Public Key Infrastructure Certificate and CRL Profile&lt;/a&gt;.</source>
          <target state="translated">CRLReason列挙は、&lt;a href=&quot;http://tools.ietf.org/html/rfc5280&quot;&gt;RFC 5280：Internet X.509 Public Key Infrastructure Certificate and CRL Profileで&lt;/a&gt;定義されているように、証明書が取り消される理由を指定します。</target>
        </trans-unit>
        <trans-unit id="b4d351c3db241b4d379234c7ac2cb5765fab41d2" translate="yes" xml:space="preserve">
          <source>The CRLReason enumeration specifies the reason that a certificate is revoked, as defined in &lt;a href=&quot;http://www.ietf.org/rfc/rfc3280.txt&quot;&gt; RFC 3280: Internet X.509 Public Key Infrastructure Certificate and CRL Profile&lt;/a&gt;.</source>
          <target state="translated">CRLReason列挙は、&lt;a href=&quot;http://www.ietf.org/rfc/rfc3280.txt&quot;&gt;RFC 3280：Internet X.509 Public Key Infrastructure Certificate and CRL Profileで&lt;/a&gt;定義されているように、証明書が取り消される理由を指定します。</target>
        </trans-unit>
        <trans-unit id="e7812130094f12985b55dbf55a811756b56e1df5" translate="yes" xml:space="preserve">
          <source>The CS_CIEXYZ space used by the toCIEXYZ/fromCIEXYZ methods can be described as follows:</source>
          <target state="translated">toCIEXYZ/fromCIEXYZメソッドで使用されるCS_CIEXYZ空間は、以下のように記述することができます。</target>
        </trans-unit>
        <trans-unit id="c9919c5ae2bcb3b9d6a077925318f690f537fce5" translate="yes" xml:space="preserve">
          <source>The Caps Lock key, a non-ASCII action key.</source>
          <target state="translated">Caps Lockキー、非ASCIIのアクションキーです。</target>
        </trans-unit>
        <trans-unit id="8e67b3c0835b7fe125721227039570d3711aedb5" translate="yes" xml:space="preserve">
          <source>The Catalog API defines a standard solution for resolving external resources referenced by XML documents. It is fully supported by the XML Processors allowing application developers to configure a catalog through an XML processor or system property or the jaxp.properties file to take advantage of the feature.</source>
          <target state="translated">カタログAPIは、XMLドキュメントで参照される外部リソースを解決するための標準的なソリューションを定義しています。これはXMLプロセッサによって完全にサポートされており、アプリケーション開発者はXMLプロセッサやシステムプロパティ、またはjaxp.propertiesファイルを使ってカタログを設定し、この機能を利用することができます。</target>
        </trans-unit>
        <trans-unit id="8c3439a20de44e9f818a8524933afd2726aea753" translate="yes" xml:space="preserve">
          <source>The Catalog Features are supported throughout the JAXP processors, including SAX and DOM (&lt;a href=&quot;../parsers/package-summary&quot;&gt;&lt;code&gt;javax.xml.parsers&lt;/code&gt;&lt;/a&gt;), and StAX parsers (&lt;a href=&quot;../stream/package-summary&quot;&gt;&lt;code&gt;javax.xml.stream&lt;/code&gt;&lt;/a&gt;), Schema Validation (&lt;a href=&quot;../validation/package-summary&quot;&gt;&lt;code&gt;javax.xml.validation&lt;/code&gt;&lt;/a&gt;), and XML Transformation (&lt;a href=&quot;../transform/package-summary&quot;&gt;&lt;code&gt;javax.xml.transform&lt;/code&gt;&lt;/a&gt;). The features described above can be set through JAXP factories or processors that define a setProperty or setAttribute interface. For example, the following code snippet sets a URI to a catalog file on a SAX parser through the &lt;code&gt;javax.xml.catalog.files&lt;/code&gt; property:</source>
          <target state="translated">カタログ機能は、SAXおよびDOM（&lt;a href=&quot;../parsers/package-summary&quot;&gt; &lt;code&gt;javax.xml.parsers&lt;/code&gt; &lt;/a&gt;）、StAXパーサー（&lt;a href=&quot;../stream/package-summary&quot;&gt; &lt;code&gt;javax.xml.stream&lt;/code&gt; &lt;/a&gt;）、スキーマ検証（&lt;a href=&quot;../validation/package-summary&quot;&gt; &lt;code&gt;javax.xml.validation&lt;/code&gt; &lt;/a&gt;）、XML変換（&lt;a href=&quot;../transform/package-summary&quot;&gt; &lt;code&gt;javax.xml.transform&lt;/code&gt; &lt;/a&gt;）などのJAXPプロセッサー全体でサポートされています。.transform）。上記の機能は、setPropertyまたはsetAttributeインターフェイスを定義するJAXPファクトリまたはプロセッサを介して設定できます。たとえば、次のコードスニペットは、 &lt;code&gt;javax.xml.catalog.files&lt;/code&gt; プロパティを介してSAXパーサー上のカタログファイルにURIを設定します。</target>
        </trans-unit>
        <trans-unit id="f5c80cce7f8e24a12ba725dd3dd4f782aefcd3e2" translate="yes" xml:space="preserve">
          <source>The Catalog Manager manages the creation of XML Catalogs and Catalog Resolvers.</source>
          <target state="translated">カタログ マネージャは、XML カタログとカタログ リゾルバの作成を管理します。</target>
        </trans-unit>
        <trans-unit id="385001113bb38abb20285d1ebb83df4d50340b14" translate="yes" xml:space="preserve">
          <source>The Catalog class represents an entity Catalog as defined by &lt;a href=&quot;https://www.oasis-open.org/committees/download.php/14809/xml-catalogs.html&quot;&gt; XML Catalogs, OASIS Standard V1.1, 7 October 2005&lt;/a&gt;.</source>
          <target state="translated">Catalogクラスは、&lt;a href=&quot;https://www.oasis-open.org/committees/download.php/14809/xml-catalogs.html&quot;&gt;XMLカタログ、OASIS標準V1.1、2005年10月7日で&lt;/a&gt;定義されているエンティティカタログを表します。</target>
        </trans-unit>
        <trans-unit id="1909b728d3f1eea8632e5d9e1f0a292d2819745c" translate="yes" xml:space="preserve">
          <source>The Catalog support is available for any process in the JAXP library that supports a resolver. The following table lists all such processes.</source>
          <target state="translated">カタログのサポートは、リゾルバをサポートするJAXPライブラリ内の任意のプロセスで利用できます。次の表に、そのようなすべてのプロセスを示します。</target>
        </trans-unit>
        <trans-unit id="ed3ae395d6b192794b3d15b214dfe88f06d1d0b4" translate="yes" xml:space="preserve">
          <source>The CatalogFeatures holds a collection of features and properties.</source>
          <target state="translated">CatalogFeaturesは、機能とプロパティのコレクションを保持しています。</target>
        </trans-unit>
        <trans-unit id="45bf43ea40ad206a16c91fe7538584c327d0aa28" translate="yes" xml:space="preserve">
          <source>The CatalogResolver however, will throw &lt;a href=&quot;catalogexception&quot;&gt;&lt;code&gt;CatalogException&lt;/code&gt;&lt;/a&gt; only when &lt;code&gt;javax.xml.catalog.resolve&lt;/code&gt; is specified as &lt;code&gt;strict&lt;/code&gt;. For applications that expect to handle the checked Exceptions, it may be necessary to use a custom resolver to wrap the CatalogResolver or implement it with a &lt;a href=&quot;catalog&quot;&gt;&lt;code&gt;Catalog&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">ただし、CatalogResolverは、 &lt;code&gt;javax.xml.catalog.resolve&lt;/code&gt; が &lt;code&gt;strict&lt;/code&gt; として指定されている場合にのみ&lt;a href=&quot;catalogexception&quot;&gt; &lt;code&gt;CatalogException&lt;/code&gt; &lt;/a&gt;をスローします。チェックされた例外を処理することを期待するアプリケーションの場合、カスタムリゾルバーを使用してCatalogResolverをラップするか、&lt;a href=&quot;catalog&quot;&gt; &lt;code&gt;Catalog&lt;/code&gt; &lt;/a&gt;オブジェクトで実装する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="3c9da4fdbaba5f8c9f09732fa4d7f6d8a7c39639" translate="yes" xml:space="preserve">
          <source>The ChaCha20 and ChaCha20-Poly1305 algorithms have a similar requirement for unique nonces with a given key. After each encryption or decryption operation, callers should re-initialize their ChaCha20 or ChaCha20-Poly1305 ciphers with parameters that specify a different nonce value. Please see &lt;a href=&quot;https://tools.ietf.org/html/rfc7539&quot;&gt;RFC 7539&lt;/a&gt; for more information on the ChaCha20 and ChaCha20-Poly1305 algorithms.</source>
          <target state="translated">ChaCha20およびChaCha20-Poly1305アルゴリズムには、特定のキーを持つ一意のナンスに対する同様の要件があります。暗号化または復号化操作が行われるたびに、呼び出し元は、異なるナンス値を指定するパラメーターを使用して、ChaCha20またはChaCha20-Poly1305暗号を再初期化する必要があります。ChaCha20およびChaCha20-Poly1305アルゴリズムの詳細については、RFC7539を参照し&lt;a href=&quot;https://tools.ietf.org/html/rfc7539&quot;&gt;て&lt;/a&gt;ください。</target>
        </trans-unit>
        <trans-unit id="b6a9e74f4885fe7cf70c23e4e55e9a31b16bb5b1" translate="yes" xml:space="preserve">
          <source>The Cham range with the Cham digits.</source>
          <target state="translated">チャム桁のあるチャムレンジ。</target>
        </trans-unit>
        <trans-unit id="33f1a9e451f535334439b331e5952fb5eceaa417" translate="yes" xml:space="preserve">
          <source>The Character Encoding is not supported.</source>
          <target state="translated">文字エンコードには対応していません。</target>
        </trans-unit>
        <trans-unit id="5a47ec8afb6ab11bcf60e2a316aaa05ee5d6f88e" translate="yes" xml:space="preserve">
          <source>The Class Loader Repository used by the given MBeanServer.</source>
          <target state="translated">指定されたMBeanServerが使用するクラス・ローダ・リポジトリ。</target>
        </trans-unit>
        <trans-unit id="004f0206b3d3d849c825f918d9b68ef429b3b940" translate="yes" xml:space="preserve">
          <source>The Class object for the bean's customizer. This may be null if the bean doesn't have a customizer.</source>
          <target state="translated">ビーンのカスタマイザのクラスオブジェクト。ビーンがカスタマイザを持っていない場合、これはnullになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="537754527d3370203382836d7cb800a91b8ee729" translate="yes" xml:space="preserve">
          <source>The Class object for the bean.</source>
          <target state="translated">ビーンのクラスオブジェクト。</target>
        </trans-unit>
        <trans-unit id="df1481dabe3eac178ff1405ee9b4259ce1e6e7a5" translate="yes" xml:space="preserve">
          <source>The Class object for the target interface that will get invoked when the event is fired.</source>
          <target state="translated">イベントが発生したときに呼び出されるターゲット・インターフェースの Class オブジェクト。</target>
        </trans-unit>
        <trans-unit id="7eac5b9958cd8cfff4271334618aee040eeba806" translate="yes" xml:space="preserve">
          <source>The Class object representing the primitive type boolean.</source>
          <target state="translated">プリミティブ型のbooleanを表すクラスオブジェクト。</target>
        </trans-unit>
        <trans-unit id="3618cc4f2a2349312e42daaa29d613987f1e092c" translate="yes" xml:space="preserve">
          <source>The ClassLoader that the module is defined to</source>
          <target state="translated">モジュールが定義されている ClassLoader</target>
        </trans-unit>
        <trans-unit id="d40630063d92d99c85238befefd749074cac2197" translate="yes" xml:space="preserve">
          <source>The ClassLoader used for that MBean. If &lt;var&gt;l&lt;/var&gt; is the MBean's actual ClassLoader, and &lt;var&gt;r&lt;/var&gt; is the returned value, then either:</source>
          <target state="translated">そのMBeanに使用されるClassLoader。場合 &lt;var&gt;l&lt;/var&gt; は MBeanの実際のClassLoaderあり、そして &lt;var&gt;r&lt;/var&gt; は、その後、いずれかで返される値です。</target>
        </trans-unit>
        <trans-unit id="66051b6d430a30f6ea7fd611d6e0df14e41ad561" translate="yes" xml:space="preserve">
          <source>The ClassLoaderRepository for this MBeanServer.</source>
          <target state="translated">この MBeanServer の ClassLoaderRepository。</target>
        </trans-unit>
        <trans-unit id="2fd3574d8c10f0ef7d993b723f5632e342d0a6ee" translate="yes" xml:space="preserve">
          <source>The CodeBase and Signedby components of the triplet name/value pairs are optional. If they are not present, then any any codebase will match, and any signer (including unsigned code) will match. For Example,</source>
          <target state="translated">トリプレット名/値のペアの CodeBase と Signedby コンポーネントはオプションです。これらが存在しない場合は、任意のコードベースがマッチし、任意の署名者 (符号なしコードを含む)がマッチします。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c2d96326649dde95c7e44b0d7b9ed5f0eb24edde" translate="yes" xml:space="preserve">
          <source>The Color choice action identifier The color is passed as an argument</source>
          <target state="translated">色選択アクション識別子 色は引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="9aefa3745661aac9f95067164415b6aba2584a76" translate="yes" xml:space="preserve">
          <source>The ColorType instance to use for specifying color printing.</source>
          <target state="translated">カラー印刷を指定する際に使用するColorTypeインスタンス。</target>
        </trans-unit>
        <trans-unit id="fc12d050c25db30932a215afa844cd2c0a1f9907" translate="yes" xml:space="preserve">
          <source>The ColorType instance to use for specifying monochrome printing.</source>
          <target state="translated">モノクロ印刷を指定する際に使用するColorTypeインスタンス。</target>
        </trans-unit>
        <trans-unit id="a1a553cf69cfe6ca631789fbb350d1c4c807cf8f" translate="yes" xml:space="preserve">
          <source>The Component that the @{code ComboBoxEditor} uses for editing.</source>
          <target state="translated">ComboBoxEditor}の@{code ComboBoxEditor}が編集に使用するコンポーネント。</target>
        </trans-unit>
        <trans-unit id="227d796281ad0577957a4e31b0889941847041af" translate="yes" xml:space="preserve">
          <source>The Component this DragGestureRecognizer is associated with</source>
          <target state="translated">この DragGestureRecognizer が関連付けられているコンポーネント</target>
        </trans-unit>
        <trans-unit id="d6129cd0df87476b144f9ae72f10280b8502d399" translate="yes" xml:space="preserve">
          <source>The Component this label is for; null if the label is not the label for a component</source>
          <target state="translated">ラベルがコンポーネントのラベルでない場合はnull</target>
        </trans-unit>
        <trans-unit id="8e16e6d4e4c40d6ee7cab533803dc66da6417071" translate="yes" xml:space="preserve">
          <source>The Component will receive drops only if it is enabled.</source>
          <target state="translated">コンポーネントは、有効になっている場合にのみドロップを受信します。</target>
        </trans-unit>
        <trans-unit id="e75fddc976a61c1460b567593850ec1eade9d839" translate="yes" xml:space="preserve">
          <source>The ComponentOrientation class encapsulates the language-sensitive orientation that is to be used to order the elements of a component or of text.</source>
          <target state="translated">ComponentOrientationクラスは、コンポーネントやテキストの要素の順序付けに使用される言語依存の方向をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="0c349a7e3983834131e43d6005575c88312a4af1" translate="yes" xml:space="preserve">
          <source>The ComponentOrientation class encapsulates the language-sensitive orientation that is to be used to order the elements of a component or of text. It is used to reflect the differences in this ordering between Western alphabets, Middle Eastern (such as Hebrew), and Far Eastern (such as Japanese).</source>
          <target state="translated">ComponentOrientationクラスは、コンポーネントやテキストの要素の順序付けに使用される言語依存の方向をカプセル化します。これは、西洋のアルファベット、中東(ヘブライ語など)、極東(日本語など)の違いを反映させるために使用されます。</target>
        </trans-unit>
        <trans-unit id="5789b4c7dbeca56610041c215040cd828abe15bd" translate="yes" xml:space="preserve">
          <source>The ConnectionBuilder instance that was created</source>
          <target state="translated">作成された ConnectionBuilder インスタンス</target>
        </trans-unit>
        <trans-unit id="88c73e6550e83b79c38c378eb869baa98b113ae7" translate="yes" xml:space="preserve">
          <source>The ContentHandler that is to be transformation output.</source>
          <target state="translated">変換出力する ContentHandler。</target>
        </trans-unit>
        <trans-unit id="17423c94f8f2ce034afcc39cef2cb4df86197b19" translate="yes" xml:space="preserve">
          <source>The Control key extended modifier constant.</source>
          <target state="translated">コントロールキーの拡張修飾子定数です。</target>
        </trans-unit>
        <trans-unit id="d1ab2b838d9028c98dee874736d7f5d9ec2c600c" translate="yes" xml:space="preserve">
          <source>The Control key modifier constant.</source>
          <target state="translated">コントロールキーの修飾子定数です。</target>
        </trans-unit>
        <trans-unit id="69e37ac36977091dd5dd589e3937201a303cc9c9" translate="yes" xml:space="preserve">
          <source>The DGC abstraction is used for the server side of the distributed garbage collection algorithm.</source>
          <target state="translated">DGCの抽象化は、分散型ガベージコレクションアルゴリズムのサーバー側に使用されます。</target>
        </trans-unit>
        <trans-unit id="bed07d1e948423e4a8940850acf00fea1b04ba74" translate="yes" xml:space="preserve">
          <source>The DGC abstraction is used for the server side of the distributed garbage collection algorithm. This interface contains the two methods: dirty and clean. A dirty call is made when a remote reference is unmarshaled in a client (the client is indicated by its VMID). A corresponding clean call is made when no more references to the remote reference exist in the client. A failed dirty call must schedule a strong clean call so that the call's sequence number can be retained in order to detect future calls received out of order by the distributed garbage collector. A reference to a remote object is leased for a period of time by the client holding the reference. The lease period starts when the dirty call is received. It is the client's responsibility to renew the leases, by making additional dirty calls, on the remote references it holds before such leases expire. If the client does not renew the lease before it expires, the distributed garbage collector assumes that the remote object is no longer referenced by that client.</source>
          <target state="translated">分散型ガベージコレクションアルゴリズムのサーバー側には、DGCの抽象化が使用されます。このインターフェイスには、ダーティとクリーンの2つのメソッドが含まれています。ダーティな呼び出しは、リモート参照がクライアントでマーシャルされていないときに行われます(クライアントはそのVMIDによって示されます)。対応するクリーンコールは、クライアント内にリモート参照への参照がこれ以上存在しない場合に行われます。失敗したダーティコールは、分散型ガベージコレクタが順番外で受信した将来のコールを検出するために、 コールのシーケンス番号を保持できるように、強力なクリーンコールをスケジュールする必要がある。リモートオブジェクトへの参照は、参照を保持するクライアントによって一定期間リースされる。リース期間は、ダーティコールを受信したときに開始されます。そのようなリースが期限切れになる前に、保持しているリモート参照に対して追加のダーティコールを行うことでリースを更新するのはクライアントの責任です。クライアントがリースの期限が切れる前にリースを更新しない場合、分散型ガベージコレクタは、リモートオブジェクトがそのクライアントによって参照されなくなったと仮定します。</target>
        </trans-unit>
        <trans-unit id="7d83f00558a7ea5fd54e20050b4b87aeb295129d" translate="yes" xml:space="preserve">
          <source>The DOM Core does not support editing &lt;code&gt;Notation&lt;/code&gt; nodes; they are therefore readonly.</source>
          <target state="translated">DOMコアは &lt;code&gt;Notation&lt;/code&gt; ノードの編集をサポートしていません。したがって、読み取り専用です。</target>
        </trans-unit>
        <trans-unit id="43530ca2de642f60fb45cbf08c7d48675f2f6e1a" translate="yes" xml:space="preserve">
          <source>The DOM Core represents all attribute values as simple strings, even if the DTD or schema associated with the document declares them of some specific type such as tokenized.</source>
          <target state="translated">DOM コアは、ドキュメントに関連付けられた DTD やスキーマがトークン化などの特定の型で属性値を宣言している場合でも、すべての属性値を単純な文字列として表現します。</target>
        </trans-unit>
        <trans-unit id="1199d22f6ddd51766a7301391a2be8379e37ab04" translate="yes" xml:space="preserve">
          <source>The DOM Level 2 does not support editing entities, therefore &lt;code&gt;entities&lt;/code&gt; cannot be altered in any way.</source>
          <target state="translated">DOMレベル2はエンティティの編集をサポートしていないため、 &lt;code&gt;entities&lt;/code&gt; を変更することはできません。</target>
        </trans-unit>
        <trans-unit id="c8bb5a095cdbe93e8badd4f90d462b85913dc20b" translate="yes" xml:space="preserve">
          <source>The DOM Level 2 does not support editing notations, therefore &lt;code&gt;notations&lt;/code&gt; cannot be altered in any way.</source>
          <target state="translated">DOMレベル2は表記法の編集をサポートしていないため、 &lt;code&gt;notations&lt;/code&gt; を変更することはできません。</target>
        </trans-unit>
        <trans-unit id="38aa50df9727b894588dbbc35c05e27ae364fb85" translate="yes" xml:space="preserve">
          <source>The DOM does not provide any filters. &lt;code&gt;NodeFilter&lt;/code&gt; is just an interface that users can implement to provide their own filters.</source>
          <target state="translated">DOMはフィルターを提供しません。 &lt;code&gt;NodeFilter&lt;/code&gt; は、ユーザーが独自のフィルターを提供するために実装できる単なるインターフェースです。</target>
        </trans-unit>
        <trans-unit id="df7387b1fd60bcbca923e30e23e97edc8aba858f" translate="yes" xml:space="preserve">
          <source>The DOM implementation is expected to use the attribute &lt;code&gt;Attr.isId&lt;/code&gt; to determine if an attribute is of type ID.</source>
          <target state="translated">DOM実装は、属性 &lt;code&gt;Attr.isId&lt;/code&gt; を使用して、属性がタイプIDであるかどうかを判別することが期待されています。</target>
        </trans-unit>
        <trans-unit id="261049d3d4a4937744f0dafd0f1e3545c9ba8678" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to ANY</source>
          <target state="translated">DTD定数はANY</target>
        </trans-unit>
        <trans-unit id="8c0b4e5d9b4605e3158ab4842fcd5983e5fb8dd8" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to CDATA</source>
          <target state="translated">DTD定数はCDATAに対応しています。</target>
        </trans-unit>
        <trans-unit id="28996f14fa52b071fff9da5038251a1e16777136" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to CONREF</source>
          <target state="translated">DTD定数はCONREFに対応しています。</target>
        </trans-unit>
        <trans-unit id="f70e3a438499a724f3e9b5b8faacae04267c9342" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to CURRENT</source>
          <target state="translated">DTD定数はCURRENTに対応しています。</target>
        </trans-unit>
        <trans-unit id="7462581804069a243f9c87bece58e662cb9bbd5a" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to DEFAULT</source>
          <target state="translated">DTD定数はDEFAULTに対応しています。</target>
        </trans-unit>
        <trans-unit id="c5d9608e6bca1b6ed6581eea2cd2e05102db06db" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to EMPTY</source>
          <target state="translated">DTD定数はEMPTYに対応しています。</target>
        </trans-unit>
        <trans-unit id="ba76c731eea210411652ded92b544523f559f8cf" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to ENDTAG</source>
          <target state="translated">DTD定数はENDTAGに対応しています。</target>
        </trans-unit>
        <trans-unit id="b037b57b7b4055d8226d80e6b35f4dd61693ff9f" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to ENTITIES</source>
          <target state="translated">DTD 定数は ENTITIES に対応しています。</target>
        </trans-unit>
        <trans-unit id="8c124dba0aabae007ca78f786c43238803deb8de" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to ENTITY</source>
          <target state="translated">DTD定数はENTITY</target>
        </trans-unit>
        <trans-unit id="92bfbbfc06b21dd3f552573a10a0382a8a8b166c" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to FIXED</source>
          <target state="translated">DTD定数はFIXEDに対応しています。</target>
        </trans-unit>
        <trans-unit id="d0730aee51ad3d5e3c5d358c5486abb58f57b053" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to GENERAL</source>
          <target state="translated">DTD定数はGENERALに対応しています。</target>
        </trans-unit>
        <trans-unit id="d512f886dc03b5f4056a96d2ee1b6e8d93d6234f" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to ID</source>
          <target state="translated">DTD定数はID</target>
        </trans-unit>
        <trans-unit id="c82b046bea18e9a490fb2a44c0258368ed834626" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to IDREF</source>
          <target state="translated">DTD定数はIDREFに対応しています。</target>
        </trans-unit>
        <trans-unit id="6385c232cbf5970b321152ba72e8ec4b8bf03880" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to IDREFS</source>
          <target state="translated">DTD定数はIDREFSに対応しています。</target>
        </trans-unit>
        <trans-unit id="d27662c44dc624358badebfa3780410f2185d572" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to IMPLIED</source>
          <target state="translated">DTD 定数は IMPLIED に対応しています。</target>
        </trans-unit>
        <trans-unit id="0bb5d1554124f83a103f88151731450f51e29063" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to MD</source>
          <target state="translated">DTD定数はMDに対応しています。</target>
        </trans-unit>
        <trans-unit id="9e2a110f1661c64c646c0d75fca1fd31b10c0d7b" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to MODEL</source>
          <target state="translated">DTD定数はMODELに対応しています。</target>
        </trans-unit>
        <trans-unit id="217e0e2fe34e949d8d212ae8100c329e2798959d" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to MS</source>
          <target state="translated">DTD定数はMS</target>
        </trans-unit>
        <trans-unit id="210401b9f4da9fb6620b3dfe9a679b8ba982571f" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to NAME</source>
          <target state="translated">DTD 定数は NAME に対応しています。</target>
        </trans-unit>
        <trans-unit id="d059f6bc57570668211b615f9ec763ce6c011d33" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to NAMES</source>
          <target state="translated">DTD定数はNAMESに対応しています。</target>
        </trans-unit>
        <trans-unit id="08d23b2ba3d9d4c0170e8dceb590345eef62e898" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to NMTOKEN</source>
          <target state="translated">DTD定数はNMTOKENに対応しています。</target>
        </trans-unit>
        <trans-unit id="43e5d6fd6f35ae58bb647fdbe002079d0ef4e79c" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to NMTOKENS</source>
          <target state="translated">DTD定数はNMTOKENSに対応しています。</target>
        </trans-unit>
        <trans-unit id="4d3d6809165f3ec86156d0455227d9f935592dc6" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to NOTATION</source>
          <target state="translated">DTD定数はNOTATIONに対応しています。</target>
        </trans-unit>
        <trans-unit id="c82aa0c7d66e7bfc1ad232cd78fa3ee3b3837ca2" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to NUMBER</source>
          <target state="translated">DTD定数はNUMBERに対応しています。</target>
        </trans-unit>
        <trans-unit id="f6dcc9ece8551b878b9dbb942a5c4193aafd677b" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to NUMBERS</source>
          <target state="translated">DTD定数はNUMBERSに対応しています。</target>
        </trans-unit>
        <trans-unit id="0f4c355ec8195dd5f3a4b693d27573962d42907a" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to NUTOKEN</source>
          <target state="translated">DTD定数はNUTOKENに対応しています。</target>
        </trans-unit>
        <trans-unit id="464cfae6e349c057b8352dc2ee53bd2e0ce2c4d2" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to NUTOKENS</source>
          <target state="translated">DTD定数はNUTOKENSに対応しています。</target>
        </trans-unit>
        <trans-unit id="f530150f84f7ecb1f890a8d98900f43e6e96c04a" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to PARAMETER</source>
          <target state="translated">DTD 定数は PARAMETER に対応しています。</target>
        </trans-unit>
        <trans-unit id="2b88e73f94ceff69a11fb44af74e03c994ab76c6" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to PI</source>
          <target state="translated">DTD定数はPI</target>
        </trans-unit>
        <trans-unit id="a793a8ddc64beceb41e4cb80ca28fff3889db1b7" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to PUBLIC</source>
          <target state="translated">DTD定数はPUBLICに対応しています。</target>
        </trans-unit>
        <trans-unit id="4f40a4668a58a1e30057b305854e48fe8a85cb6e" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to RCDATA</source>
          <target state="translated">DTD定数はRCDATAに対応しています。</target>
        </trans-unit>
        <trans-unit id="594edcbb019633ce1e15d7afb490d0bfd587095c" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to REQUIRED</source>
          <target state="translated">DTD定数はREQUIREDに対応しています。</target>
        </trans-unit>
        <trans-unit id="3941302d7f73508bc2f880765e67c45b860abdd3" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to SDATA</source>
          <target state="translated">DTD定数はSDATAに対応しています。</target>
        </trans-unit>
        <trans-unit id="7659fc2638f54b5b97b669423f51591f41e6dd65" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to STARTTAG</source>
          <target state="translated">DTD定数はSTARTTAGに対応しています。</target>
        </trans-unit>
        <trans-unit id="2b30fe032c549b0fe7db4de6e7c9c64ffab5c023" translate="yes" xml:space="preserve">
          <source>The DTD constant corresponds to SYSTEM</source>
          <target state="translated">DTD定数はSYSTEMに対応しています。</target>
        </trans-unit>
        <trans-unit id="2ced5dc3156a8a4a80da644c296c6141e4689e3c" translate="yes" xml:space="preserve">
          <source>The DTD specification is provided as Appendix A to the Java Logging APIs specification.</source>
          <target state="translated">DTD仕様は、Java Logging APIs仕様の付録Aとして提供されています。</target>
        </trans-unit>
        <trans-unit id="a7f4a801e7fcf309a447907757a88537413eb4aa" translate="yes" xml:space="preserve">
          <source>The DataBuffer that stores the image data.</source>
          <target state="translated">画像データを格納するDataBufferです。</target>
        </trans-unit>
        <trans-unit id="9b8dc3e1ba53caad2f4dafd2ec2d61e42595250b" translate="yes" xml:space="preserve">
          <source>The Delete key.</source>
          <target state="translated">削除キーです。</target>
        </trans-unit>
        <trans-unit id="c016969447ee027a7d4e0c0671983d0d54d60bd4" translate="yes" xml:space="preserve">
          <source>The Descriptor fields contributed in this way by different annotations on the same program element must be consistent. That is, two different annotations, or two members of the same annotation, must not define a different value for the same Descriptor field. Fields from annotations on a getter method must also be consistent with fields from annotations on the corresponding setter method.</source>
          <target state="translated">このように、同じプログラム要素上の異なるアノテーションによって貢献されるDescriptorフィールドは、一貫していなければなりません。つまり、2つの異なるアノテーション、または同じアノテーションの2つのメンバが、同じDescriptorフィールドに対して異なる値を定義してはなりません。ゲッター・メソッド上のアノテーションからのフィールドもまた、対応するセッター・メソッド上のアノテーションからのフィールドと一致していなければなりません。</target>
        </trans-unit>
        <trans-unit id="7bb6cc0ddd226d41211cd3043455d41114d7cede" translate="yes" xml:space="preserve">
          <source>The Descriptor resulting from these annotations will be merged with any Descriptor fields provided by the implementation, such as the &lt;a href=&quot;descriptor#immutableInfo&quot;&gt;&lt;code&gt;
 immutableInfo&lt;/code&gt;&lt;/a&gt; field for an MBean. The fields from the annotations must be consistent with these fields provided by the implementation.</source>
          <target state="translated">これらのアノテーションの結果であるDescriptorは、MBeanの&lt;a href=&quot;descriptor#immutableInfo&quot;&gt; &lt;code&gt; immutableInfo&lt;/code&gt; &lt;/a&gt;フィールドなど、実装によって提供されるDescriptorフィールドとマージされます。注釈のフィールドは、実装によって提供されるこれらのフィールドと一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="6bee60701b79c62232ecee0abd5ca5f3df40a69c" translate="yes" xml:space="preserve">
          <source>The Descriptor resulting from these annotations will be merged with any Descriptor fields provided by the implementation, such as the &lt;a href=&quot;descriptor#immutableInfo&quot;&gt;&lt;code&gt;immutableInfo&lt;/code&gt;&lt;/a&gt; field for an MBean. The fields from the annotations must be consistent with these fields provided by the implementation.</source>
          <target state="translated">これらの注釈の結果である記述子は、MBeanの&lt;a href=&quot;descriptor#immutableInfo&quot;&gt; &lt;code&gt;immutableInfo&lt;/code&gt; &lt;/a&gt;フィールドなど、実装によって提供される記述子フィールドとマージされます。アノテーションのフィールドは、実装によって提供されるこれらのフィールドと一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="2264cfb97c49339ec2eb79ff8f9c5b3541970253" translate="yes" xml:space="preserve">
          <source>The Devanagari range with the Devanagari digits.</source>
          <target state="translated">デヴァナガリのレンジでデヴァナガリの桁数で</target>
        </trans-unit>
        <trans-unit id="c9d5aea86dc06f534995783c5eed783935bbadb9" translate="yes" xml:space="preserve">
          <source>The Directory Context</source>
          <target state="translated">ディレクトリのコンテキスト</target>
        </trans-unit>
        <trans-unit id="3e6ee01f1cfdc49d30867413241b4a4694ea090f" translate="yes" xml:space="preserve">
          <source>The Document Type Declaration (see &lt;code&gt;DocumentType&lt;/code&gt;) associated with this document.</source>
          <target state="translated">このドキュメントに関連付けられているドキュメントタイプ宣言（ &lt;code&gt;DocumentType&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="254ccb37fffeb4d7034d09aace0490d444a1fd8d" translate="yes" xml:space="preserve">
          <source>The Document Type Declaration (see &lt;code&gt;DocumentType&lt;/code&gt;) associated with this document. For XML documents without a document type declaration this returns &lt;code&gt;null&lt;/code&gt;. For HTML documents, a &lt;code&gt;DocumentType&lt;/code&gt; object may be returned, independently of the presence or absence of document type declaration in the HTML document.</source>
          <target state="translated">このドキュメントに関連付けられているドキュメントタイプ宣言（ &lt;code&gt;DocumentType&lt;/code&gt; を参照）。文書型宣言のないXML文書の場合、これは &lt;code&gt;null&lt;/code&gt; を返します。HTMLドキュメントの場合、HTMLドキュメント内のドキュメント型宣言の有無に関係なく、 &lt;code&gt;DocumentType&lt;/code&gt; オブジェクトが返される場合があります。</target>
        </trans-unit>
        <trans-unit id="60d54d249addf311d02c8ca2ce1ec1e6177cdf46" translate="yes" xml:space="preserve">
          <source>The DocumentEvent notification is based upon the JavaBeans event model. There is no guarantee about the order of delivery to listeners, and all listeners must be notified prior to making further mutations to the Document. &lt;em&gt;This means implementations of the DocumentListener may not mutate the source of the event (i.e. the associated Document)&lt;/em&gt;.</source>
          <target state="translated">DocumentEvent通知は、JavaBeansイベントモデルに基づいています。リスナーへの配信順序についての保証はありません。ドキュメントにさらに変更を加える前に、すべてのリスナーに通知する必要があります。&lt;em&gt;これは、DocumentListenerの実装がイベントのソース（つまり、関連付けられたドキュメント）を変更しない可能性があることを意味します&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="306e0349e4730fe12ea20a18564d5aded0a959d4" translate="yes" xml:space="preserve">
          <source>The DocumentTypeDefinition is written to the output</source>
          <target state="translated">DocumentTypeDefinitionが出力に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="d62abb5465a5124d177e3dae735859f7772db3a7" translate="yes" xml:space="preserve">
          <source>The Down Arrow key, a non-ASCII action key.</source>
          <target state="translated">下矢印キー、非ASCIIのアクションキーです。</target>
        </trans-unit>
        <trans-unit id="535a8c59d3fc6ca72816c57f9fe3cb8a0847b806" translate="yes" xml:space="preserve">
          <source>The DriverManager will try to load as many drivers as it can find and then for any given connection request, it will ask each driver in turn to try to connect to the target URL.</source>
          <target state="translated">DriverManager は、見つけられるだけ多くのドライバをロードしようとし、任意の接続要求に対して、各ドライバに順番にターゲット URL への接続を試みるように要求します。</target>
        </trans-unit>
        <trans-unit id="9908e26b6e54260393c71d3b6feaa03992ee4047" translate="yes" xml:space="preserve">
          <source>The End key, a non-ASCII action key.</source>
          <target state="translated">非ASCIIのアクションキーであるEndキー。</target>
        </trans-unit>
        <trans-unit id="82569fedc0af6f3aed7f65a6a3fe39ea20b67c7c" translate="yes" xml:space="preserve">
          <source>The Enter key.</source>
          <target state="translated">エンターキーです。</target>
        </trans-unit>
        <trans-unit id="9467ddc0b1822e3f422eef8fbcd692138357cb1f" translate="yes" xml:space="preserve">
          <source>The ErrorManager's &quot;error&quot; method will be invoked if any errors occur while using this Handler.</source>
          <target state="translated">このハンドラーの使用中にエラーが発生した場合は、ErrorManager の &quot;error&quot; メソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="337111c58074fe3c7a3c0c5188b4a34f626e799a" translate="yes" xml:space="preserve">
          <source>The Escape key.</source>
          <target state="translated">脱出キーです。</target>
        </trans-unit>
        <trans-unit id="855ec55237c438b93c6ece3595fe96fed3e0fe47" translate="yes" xml:space="preserve">
          <source>The Ethiopic range with the Ethiopic digits.</source>
          <target state="translated">エチオピアの桁数を使ったエチオピアの範囲です。</target>
        </trans-unit>
        <trans-unit id="c4abdb2c97b7ad28fbff4b44ab36d6a6f3821d59" translate="yes" xml:space="preserve">
          <source>The Ethiopic range with the Ethiopic digits. Ethiopic does not have a decimal digit 0 so Latin (European) 0 is used.</source>
          <target state="translated">エチオピアの桁数を使ったエチオピアの範囲です。エチオピアには10進数の0がないので、ラテン語(ヨーロッパ)の0が使われます。</target>
        </trans-unit>
        <trans-unit id="f846f27691c1830b0c4862884909ba741da0054f" translate="yes" xml:space="preserve">
          <source>The F1 function key, a non-ASCII action key.</source>
          <target state="translated">F1ファンクションキー、非ASCIIアクションキーです。</target>
        </trans-unit>
        <trans-unit id="e0c99ce79d7c1cf5f028270fbbd639ed83b660bf" translate="yes" xml:space="preserve">
          <source>The F10 function key, a non-ASCII action key.</source>
          <target state="translated">F10ファンクションキー、非ASCIIアクションキーです。</target>
        </trans-unit>
        <trans-unit id="34b95e3d41adccd87cc4a5447e94b0969fdf7692" translate="yes" xml:space="preserve">
          <source>The F11 function key, a non-ASCII action key.</source>
          <target state="translated">F11ファンクションキー、非ASCIIアクションキーです。</target>
        </trans-unit>
        <trans-unit id="4712072dec079034a0d1d72b4ea1e0bd718589b7" translate="yes" xml:space="preserve">
          <source>The F12 function key, a non-ASCII action key.</source>
          <target state="translated">F12ファンクションキー、非ASCIIアクションキーです。</target>
        </trans-unit>
        <trans-unit id="8f3e6133006f60f80467d379477797cb8466f921" translate="yes" xml:space="preserve">
          <source>The F2 function key, a non-ASCII action key.</source>
          <target state="translated">F2ファンクションキー、非ASCIIアクションキーです。</target>
        </trans-unit>
        <trans-unit id="8cba0d95d956dcad6261f3c860b0b98ddb8261bd" translate="yes" xml:space="preserve">
          <source>The F3 function key, a non-ASCII action key.</source>
          <target state="translated">F3ファンクションキー、非ASCIIアクションキーです。</target>
        </trans-unit>
        <trans-unit id="688fc8033a58b76724aa1e69114742ef26b5aea2" translate="yes" xml:space="preserve">
          <source>The F4 function key, a non-ASCII action key.</source>
          <target state="translated">F4ファンクションキー、非ASCIIアクションキーです。</target>
        </trans-unit>
        <trans-unit id="424aca125a04f4c0ca7b024f4f463806f8d801e0" translate="yes" xml:space="preserve">
          <source>The F5 function key, a non-ASCII action key.</source>
          <target state="translated">F5ファンクションキー、非ASCIIアクションキーです。</target>
        </trans-unit>
        <trans-unit id="75137fe57f42039f646febcef40c10236bd497b2" translate="yes" xml:space="preserve">
          <source>The F6 function key, a non-ASCII action key.</source>
          <target state="translated">F6ファンクションキー、非ASCIIアクションキーです。</target>
        </trans-unit>
        <trans-unit id="32df2a32958042664970351ad3ceae10e39b1214" translate="yes" xml:space="preserve">
          <source>The F7 function key, a non-ASCII action key.</source>
          <target state="translated">F7ファンクションキー、非ASCIIアクションキーです。</target>
        </trans-unit>
        <trans-unit id="04f2191aa3813883fac7f747c758351877d2dbd7" translate="yes" xml:space="preserve">
          <source>The F8 function key, a non-ASCII action key.</source>
          <target state="translated">F8ファンクションキー、非ASCIIアクションキーです。</target>
        </trans-unit>
        <trans-unit id="1822ce331e4a2923ad9c29fc3b0f664d404ea2c6" translate="yes" xml:space="preserve">
          <source>The F9 function key, a non-ASCII action key.</source>
          <target state="translated">F9ファンクションキー、非ASCIIアクションキーです。</target>
        </trans-unit>
        <trans-unit id="4d4c7427ed03e2196382cf762ac3a454fd9aad30" translate="yes" xml:space="preserve">
          <source>The FeatureDescriptor class is the common baseclass for PropertyDescriptor, EventSetDescriptor, and MethodDescriptor, etc.</source>
          <target state="translated">FeatureDescriptorクラスは、PropertyDescriptor、EventSetDescriptor、MethodDescriptorなどの共通ベースクラスです。</target>
        </trans-unit>
        <trans-unit id="6e02d9b92b748aa46a1fe40c56191a70c2db37b1" translate="yes" xml:space="preserve">
          <source>The ForkJoinTask class is not usually directly subclassed. Instead, you subclass one of the abstract classes that support a particular style of fork/join processing, typically &lt;a href=&quot;recursiveaction&quot;&gt;&lt;code&gt;RecursiveAction&lt;/code&gt;&lt;/a&gt; for most computations that do not return results, &lt;a href=&quot;recursivetask&quot;&gt;&lt;code&gt;RecursiveTask&lt;/code&gt;&lt;/a&gt; for those that do, and &lt;a href=&quot;countedcompleter&quot;&gt;&lt;code&gt;CountedCompleter&lt;/code&gt;&lt;/a&gt; for those in which completed actions trigger other actions. Normally, a concrete ForkJoinTask subclass declares fields comprising its parameters, established in a constructor, and then defines a &lt;code&gt;compute&lt;/code&gt; method that somehow uses the control methods supplied by this base class.</source>
          <target state="translated">ForkJoinTaskクラスは通常、直接サブクラス化されていません。代わりに、フォークの特定のスタイルをサポートする抽象クラスのあなたサブクラス1は/処理し、一般的に参加&lt;a href=&quot;recursiveaction&quot;&gt; &lt;code&gt;RecursiveAction&lt;/code&gt; &lt;/a&gt;結果を返しません。ほとんどの計算のため、&lt;a href=&quot;recursivetask&quot;&gt; &lt;code&gt;RecursiveTask&lt;/code&gt; &lt;/a&gt;ないもののために、と&lt;a href=&quot;countedcompleter&quot;&gt; &lt;code&gt;CountedCompleter&lt;/code&gt; の&lt;/a&gt;アクションが他のアクションをトリガー完成したものをのために。通常、具象ForkJoinTaskサブクラスは、パラメーターで構成されるフィールドを宣言し、コンストラクターで確立してから、この基本クラスによって提供される制御メソッドを何らかの方法で使用 &lt;code&gt;compute&lt;/code&gt; メソッドを定義します。</target>
        </trans-unit>
        <trans-unit id="b623035f5596637c9505afc931878e7c86c5b5b2" translate="yes" xml:space="preserve">
          <source>The GCM specification states that &lt;code&gt;tLen&lt;/code&gt; may only have the values {128, 120, 112, 104, 96}, or {64, 32} for certain applications. Other values can be specified for this class, but not all CSP implementations will support them.</source>
          <target state="translated">GCM仕様では、特定の &lt;code&gt;tLen&lt;/code&gt; は、tLenの値は{ 128、120、112、104、96 }、または{ 64、32}のみである可能性があると規定されています。このクラスには他の値を指定できますが、すべてのCSP実装がそれらをサポートするわけではありません。</target>
        </trans-unit>
        <trans-unit id="21c0818ef96710144df08a551d7b266882d023aa" translate="yes" xml:space="preserve">
          <source>The GIF image writer plug-in guarantees lossless writing for images which meet the following requirements:</source>
          <target state="translated">GIF イメージライタープラグインは、以下の要件を満たす画像に対してロスレス書き込みを保証します。</target>
        </trans-unit>
        <trans-unit id="69631d7c8bd6040a091b247bf1496d5ed878fb6f" translate="yes" xml:space="preserve">
          <source>The GIF image writer plug-in supports setting output stream metadata from metadata supplied to the writer in either the native GIF stream metadata format  javax_imageio_gif_stream_1.0  or the standard metadata format  javax_imageio_1.0, and setting output image metadata from metadata supplied to the writer in either the native GIF image metadata format  javax_imageio_gif_image_1.0  or the standard metadata format javax_imageio_1.0. The mapping of standard metadata format to the GIF native stream and image metadata formats is given in the tables  here .</source>
          <target state="translated">GIF 画像書 き 出 し プ ラ グ イ ンは、 ラ イ タ ーに与え ら れた メ タ デー タ の出力ス ト リ ーム メ タ デー タ を、 ネイティブ GIF ス ト リ ーム メ タ デー タ 形式 javax_imageio_gif_stream_1.0 か標準 メ タ デー タ 形式 javax_imageio_1.0 のいずれかで設定 し 、 ラ イ タ ーに与え ら れた メ タ デー タ の出力画像 メ タ デー タ を、 ネイティブ GIF 画像 メ タ デー タ 形式 javax_imageio_gif_image_1.0 か標準 メ タ デー タ 形式 javax_imageio_1.0 のいずれかで設定す る こ と をサポー ト し てい ます。標準メタデータフォーマットと GIF ネイティブストリーム・画像メタデータフォーマットとのマッピングを以下の表に示します。</target>
        </trans-unit>
        <trans-unit id="5a39c518ab297860c2f8783913dcca7c6af3666c" translate="yes" xml:space="preserve">
          <source>The GIF image writer plug-in supports setting output stream metadata from metadata supplied to the writer in either the native GIF stream metadata format &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/imageio/metadata/doc-files/gif_metadata.html#gif_stream_metadata_format&quot;&gt; javax_imageio_gif_stream_1.0&lt;/a&gt; or the standard metadata format &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/imageio/metadata/doc-files/standard_metadata.html&quot;&gt;javax_imageio_1.0&lt;/a&gt;, and setting output image metadata from metadata supplied to the writer in either the native GIF image metadata format &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/imageio/metadata/doc-files/gif_metadata.html#gif_image_metadata_format&quot;&gt; javax_imageio_gif_image_1.0&lt;/a&gt; or the standard metadata format &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/imageio/metadata/doc-files/standard_metadata.html&quot;&gt;javax_imageio_1.0&lt;/a&gt;. The mapping of standard metadata format to the GIF native stream and image metadata formats is given in the tables &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/imageio/metadata/doc-files/gif_metadata.html#mapping&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">GIFイメージライタープラグインは、ネイティブGIFストリームメタデータ形式&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/imageio/metadata/doc-files/gif_metadata.html#gif_stream_metadata_format&quot;&gt;javax_imageio_gif_stream_1.0&lt;/a&gt;または標準メタデータ形式&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/imageio/metadata/doc-files/standard_metadata.html&quot;&gt;javax_imageio_1.0の&lt;/a&gt;いずれかでライターに提供されたメタデータからの出力ストリームメタデータの設定、およびライターに提供されたメタデータからの出力イメージメタデータの設定をサポートします。ネイティブGIFイメージメタデータ形式&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/imageio/metadata/doc-files/gif_metadata.html#gif_image_metadata_format&quot;&gt;javax_imageio_gif_image_1.0&lt;/a&gt;または標準メタデータ形式&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/imageio/metadata/doc-files/standard_metadata.html&quot;&gt;javax_imageio_1.0の&lt;/a&gt;いずれか。標準メタデータ形式のGIFネイティブストリームおよび画像メタデータ形式へのマッピングは、次の表に記載されてい&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/imageio/metadata/doc-files/gif_metadata.html#mapping&quot;&gt;ます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5fe47dfc42c1004ae9afdedd5c749c38a37ee470" translate="yes" xml:space="preserve">
          <source>The GIF writer plug-in supports the creation of animated GIF images through the standard sequence writing methods defined in the &lt;code&gt;ImageWriter&lt;/code&gt; class.</source>
          <target state="translated">GIFライタープラグインは、 &lt;code&gt;ImageWriter&lt;/code&gt; クラスで定義された標準シーケンス書き込みメソッドを使用して、アニメーションGIF画像の作成をサポートします。</target>
        </trans-unit>
        <trans-unit id="36041d90b5051a2148ab5cf02c46a6972de006b3" translate="yes" xml:space="preserve">
          <source>The GSS-API authentication tokens contain a definitive start and end. This method will attempt to read one of these tokens per invocation, and may block on the stream if only part of the token is available. In all other respects this method is equivalent to the byte array based &lt;a href=&quot;#acceptSecContext(byte%5B%5D,int,int)&quot;&gt;&lt;code&gt;acceptSecContext&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">GSS-API認証トークンには、明確な開始と終了が含まれています。このメソッドは、呼び出しごとにこれらのトークンの1つを読み取ろうとし、トークンの一部しか使用できない場合はストリームでブロックする可能性があります。他のすべての点で、このメソッドはバイト配列ベースの&lt;a href=&quot;#acceptSecContext(byte%5B%5D,int,int)&quot;&gt; &lt;code&gt;acceptSecContext&lt;/code&gt; &lt;/a&gt;と同等です。</target>
        </trans-unit>
        <trans-unit id="56846475ff5ecbb5782e2832cfad2417350c183f" translate="yes" xml:space="preserve">
          <source>The GSS-API authentication tokens contain a definitive start and end. This method will attempt to read one of these tokens per invocation, and may block on the stream if only part of the token is available. In all other respects this method is equivalent to the byte array based &lt;a href=&quot;#initSecContext(byte%5B%5D,int,int)&quot;&gt;&lt;code&gt;initSecContext&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">GSS-API認証トークンには、明確な開始と終了が含まれています。このメソッドは、呼び出しごとにこれらのトークンの1つを読み取ろうとし、トークンの一部しか使用できない場合はストリームでブロックする可能性があります。他のすべての点で、このメソッドはバイト配列ベースの&lt;a href=&quot;#initSecContext(byte%5B%5D,int,int)&quot;&gt; &lt;code&gt;initSecContext&lt;/code&gt; &lt;/a&gt;と同等です。</target>
        </trans-unit>
        <trans-unit id="eeb819a0af8bbcd4715be7fc89a01023347f013f" translate="yes" xml:space="preserve">
          <source>The GSS-API does not perform any communication with the peer. It merely produces tokens that the application must somehow transport to the other end.</source>
          <target state="translated">GSS-API はピアとの通信を行いません。それは単に、アプリケーションが何らかの方法で相手側に転送しなければならないトークンを生成するだけです。</target>
        </trans-unit>
        <trans-unit id="016e2418772c7bef7110806243864d9ad960cfde" translate="yes" xml:space="preserve">
          <source>The GSS-API is defined in a language independent way in &lt;a href=&quot;http://www.ietf.org/rfc/rfc2743.txt&quot;&gt;RFC 2743&lt;/a&gt;. The Java language bindings are defined in &lt;a href=&quot;http://www.ietf.org/rfc/rfc2853.txt&quot;&gt;RFC 2853&lt;/a&gt;</source>
          <target state="translated">GSS-APIは、&lt;a href=&quot;http://www.ietf.org/rfc/rfc2743.txt&quot;&gt;RFC2743&lt;/a&gt;で言語に依存しない方法で定義されています。Java言語バインディングは&lt;a href=&quot;http://www.ietf.org/rfc/rfc2853.txt&quot;&gt;RFC2853で&lt;/a&gt;定義されています</target>
        </trans-unit>
        <trans-unit id="2bda69e49cc0677094f88eb85a8d0e079496d764" translate="yes" xml:space="preserve">
          <source>The GSS-API itself does not dictate how an underlying mechanism obtains the credentials that are needed for authentication. It is assumed that prior to calling the GSS-API, these credentials are obtained and stored in a location that the mechanism provider is aware of. However, the default model in the Java platform will be that mechanism providers must obtain credentials only from the private or public credential sets associated with the &lt;a href=&quot;../../../../java.base/javax/security/auth/subject&quot;&gt;&lt;code&gt;Subject&lt;/code&gt;&lt;/a&gt; in the current access control context. The Kerberos v5 mechanism will search for the required INITIATE and ACCEPT credentials (&lt;a href=&quot;../../../javax/security/auth/kerberos/kerberosticket&quot;&gt;&lt;code&gt;KerberosTicket&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../../javax/security/auth/kerberos/kerberoskey&quot;&gt;&lt;code&gt;KerberosKey&lt;/code&gt;&lt;/a&gt;) in the private credential set where as some other mechanism might look in the public set or in both. If the desired credential is not present in the appropriate sets of the current Subject, the GSS-API call must fail.</source>
          <target state="translated">GSS-API自体は、基盤となるメカニズムが認証に必要な資格情報を取得する方法を指示しません。 GSS-APIを呼び出す前に、これらの資格情報が取得され、メカニズムプロバイダーが認識している場所に保存されていると想定されます。ただし、Javaプラットフォームのデフォルトのモデルでは、メカニズムプロバイダーは、現在のアクセス制御コンテキストで&lt;a href=&quot;../../../../java.base/javax/security/auth/subject&quot;&gt; &lt;code&gt;Subject&lt;/code&gt; &lt;/a&gt;に関連付けられたプライベートまたはパブリックの資格情報セットからのみ資格情報を取得する必要があります。 Kerberos v5メカニズムは、必要なINITIATEおよびACCEPT資格情報（&lt;a href=&quot;../../../javax/security/auth/kerberos/kerberosticket&quot;&gt; &lt;code&gt;KerberosTicket&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../../javax/security/auth/kerberos/kerberoskey&quot;&gt; &lt;code&gt;KerberosKey&lt;/code&gt; )&lt;/a&gt;を検索します。）他のメカニズムがパブリックセットまたはその両方で検索される可能性があるプライベート資格情報セット内。目的の資格情報が現在のサブジェクトの適切なセットに存在しない場合、GSS-API呼び出しは失敗する必要があります。</target>
        </trans-unit>
        <trans-unit id="1e36671f93a675a82883cad4ce03c74c37680a15" translate="yes" xml:space="preserve">
          <source>The GSSManager would then first check with B if m1 was needed. In case B did not provide support for m1, the GSSManager would continue on to check with A. If any mechanism m2 is needed where m2 is different from m1 then the GSSManager would skip B and check with A directly.</source>
          <target state="translated">次に、GSSManager は、m1 が必要かどうかをまず B に確認する。B が m1 のサポートを提供していない場合、GSSManager は A にチェックを続けます。m2 が m1 と異なるメカニズム m2 が必要な場合、GSSManager は B をスキップして A に直接チェックを行います。</target>
        </trans-unit>
        <trans-unit id="78d03db12c1f011d0634db41f691571762f77a53" translate="yes" xml:space="preserve">
          <source>The GSSName name class contains public static Oid objects representing the standard name types defined in GSS-API.</source>
          <target state="translated">GSSNameクラスは、GSS-APIで定義されている標準的な名前タイプを表すパブリックな静的Oidオブジェクトを含んでいます。</target>
        </trans-unit>
        <trans-unit id="7c0eb54612e1b91b3d550046715cc18734cac067" translate="yes" xml:space="preserve">
          <source>The Generated annotation is used to mark source code that has been generated.</source>
          <target state="translated">Generated アノテーションは、生成されたソース コードをマークするために使用されます。</target>
        </trans-unit>
        <trans-unit id="f56c3c8627f80ee0eab3cf06dab68a8edf476a84" translate="yes" xml:space="preserve">
          <source>The Generated annotation is used to mark source code that has been generated. It can also be used to differentiate user written code from generated code in a single file.</source>
          <target state="translated">Generated アノテーションは、生成されたソース コードをマークするために使用します。また、単一のファイル内でユーザーが書いたコードと生成されたコードを区別するために使用することもできます。</target>
        </trans-unit>
        <trans-unit id="e14d8067e3c65f5d662592905874e96a639ba661" translate="yes" xml:space="preserve">
          <source>The Generated annotation is used to mark source code that has been generated. It can also be used to differentiate user written code from generated code in a single file. When used, the value element must have the name of the code generator. The recommended convention is to use the fully qualified name of the code generator in the value field .</source>
          <target state="translated">Generated アノテーションは、生成されたソース コードをマークするために使用します。また、単一のファイル内でユーザーが書いたコードと生成されたコードを区別するためにも使用できます。使用する場合、value 要素にはコード・ジェネレーターの名前を指定する必要があります。推奨される慣習は、値フィールドにコード・ジェネレーターの完全修飾名を使用することです。</target>
        </trans-unit>
        <trans-unit id="7af39d750477e1f9f73af9fe47ad7493425adbba" translate="yes" xml:space="preserve">
          <source>The Grand Unification of the above three.</source>
          <target state="translated">上記3つの大統一。</target>
        </trans-unit>
        <trans-unit id="04a51ed5fc80fe55a7d442756d529463d0e7f962" translate="yes" xml:space="preserve">
          <source>The GraphicAttribute determines the logical and visual bounds of the text; the actual Font values are ignored.</source>
          <target state="translated">GraphicAttribute は、 テキス ト の論理的 ・ 視覚的境界を決定 し ます。</target>
        </trans-unit>
        <trans-unit id="80dc94d54b402ab87a3bcf626574c928999dab0b" translate="yes" xml:space="preserve">
          <source>The Gujarati range with the Gujarati digits.</source>
          <target state="translated">グジャラート語の桁数のあるグジャラート語の範囲。</target>
        </trans-unit>
        <trans-unit id="3204f255d6bf3f20cea1af9b6db821aaebbf6fe0" translate="yes" xml:space="preserve">
          <source>The Gurmukhi range with the Gurmukhi digits.</source>
          <target state="translated">グルムキーの桁数でグルムキーの範囲。</target>
        </trans-unit>
        <trans-unit id="034f52c179ed2f285aff346a1a725164486ab642" translate="yes" xml:space="preserve">
          <source>The HTTP cookie management in java.net package looks like:</source>
          <target state="translated">java.netパッケージのHTTPクッキー管理は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="7b3a512be37bd12625c3a8628efd22b37676aac1" translate="yes" xml:space="preserve">
          <source>The HTTP method (GET,POST,PUT,etc.).</source>
          <target state="translated">HTTPメソッド(GET,POST,PUTなど)。</target>
        </trans-unit>
        <trans-unit id="45069240481f167a4b1839f87d58530261cd8d54" translate="yes" xml:space="preserve">
          <source>The HTTP protocol handler has a few settings that can be accessed through System Properties. This covers &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/doc-files/net-properties.html#Proxies&quot;&gt;Proxy settings&lt;/a&gt; as well as &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/doc-files/net-properties.html#MiscHTTP&quot;&gt; various other settings&lt;/a&gt;.</source>
          <target state="translated">HTTPプロトコルハンドラーには、システムプロパティからアクセスできるいくつかの設定があります。これには、&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/doc-files/net-properties.html#Proxies&quot;&gt;プロキシ設定&lt;/a&gt;だけでなく、&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/net/doc-files/net-properties.html#MiscHTTP&quot;&gt;その他のさまざまな&lt;/a&gt;設定も含まれます。</target>
        </trans-unit>
        <trans-unit id="2d94af71e4f20cb6dbee51f81cf708d34fd43e9a" translate="yes" xml:space="preserve">
          <source>The HTTP protocol handler has a few settings that can be accessed through System Properties. This covers Proxy settings as well as  various other settings.</source>
          <target state="translated">HTTP プロトコルハンドラには、システムのプロパティからアクセスできるいくつかの設定があります。これは、プロキシの設定だけでなく、他の様々な設定をカバーしています。</target>
        </trans-unit>
        <trans-unit id="5cddb7cac72e4320c7958e414281c0eaaa74294f" translate="yes" xml:space="preserve">
          <source>The HTTP protocol version.</source>
          <target state="translated">HTTPプロトコルのバージョンです。</target>
        </trans-unit>
        <trans-unit id="0965d22a7cf7456f138f50ade9b626d2ce1a8ce8" translate="yes" xml:space="preserve">
          <source>The HTTP response message.</source>
          <target state="translated">HTTP レスポンスメッセージです。</target>
        </trans-unit>
        <trans-unit id="342acebe15f32e49ce73e2666488d1f7edf89d4a" translate="yes" xml:space="preserve">
          <source>The Highlighter bound to the associated text component is used to render the selection by default. Selection appearance can be customized by supplying a painter to use for the highlights. By default a painter is used that will render a solid color as specified in the associated text component in the &lt;code&gt;SelectionColor&lt;/code&gt; property. This can easily be changed by reimplementing the &lt;a href=&quot;#getSelectionPainter()&quot;&gt;&lt;code&gt;getSelectionPainter&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">関連するテキストコンポーネントにバインドされた蛍光ペンは、デフォルトで選択をレンダリングするために使用されます。ハイライトに使用するペインターを提供することにより、選択の外観をカスタマイズできます。デフォルトでは、 &lt;code&gt;SelectionColor&lt;/code&gt; プロパティの関連するテキストコンポーネントで指定されているように単色をレンダリングするペインターが使用されます。これは、&lt;a href=&quot;#getSelectionPainter()&quot;&gt; &lt;code&gt;getSelectionPainter&lt;/code&gt; &lt;/a&gt;メソッドを再実装することで簡単に変更できます。</target>
        </trans-unit>
        <trans-unit id="76c37afd4ebfca43ecc7113a9e735aed8c4a4c59" translate="yes" xml:space="preserve">
          <source>The Hijrah calendar has a different total of days in a year than Gregorian calendar, and the length of each month is based on the period of a complete revolution of the moon around the earth (as between successive new moons). Refer to the &lt;a href=&quot;hijrahchronology&quot;&gt;&lt;code&gt;HijrahChronology&lt;/code&gt;&lt;/a&gt; for details of supported variants.</source>
          <target state="translated">ヒジュラカレンダーは、グレゴリオ暦とは1年の合計日数が異なります。各月の長さは、地球の周りの月が完全に公転する周期に基づいています（連続する新月の間など）。サポートされているバリアントの詳細については、&lt;a href=&quot;hijrahchronology&quot;&gt; &lt;code&gt;HijrahChronology&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3cbb0a5265ed2b32362a56646ea33dae11e8ddd1" translate="yes" xml:space="preserve">
          <source>The Hijrah calendar is a lunar calendar supporting Islamic calendars.</source>
          <target state="translated">ヒジュラ暦は、イスラム暦をサポートする太陰暦です。</target>
        </trans-unit>
        <trans-unit id="5ef062b6d3746a7faa9fd4ff82681d5f88437d55" translate="yes" xml:space="preserve">
          <source>The Hijrah calendar system has one era, 'AH', defined by &lt;a href=&quot;hijrahera&quot;&gt;&lt;code&gt;HijrahEra&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">Hijrahカレンダーシステムには、&lt;a href=&quot;hijrahera&quot;&gt; &lt;code&gt;HijrahEra&lt;/code&gt; &lt;/a&gt;によって定義された1つの時代「AH」があります。</target>
        </trans-unit>
        <trans-unit id="e597c41e9fa5f54ee9b2548de5fc25d85b9400b7" translate="yes" xml:space="preserve">
          <source>The Hijrah calendar system has only one era covering the proleptic years greater than zero.</source>
          <target state="translated">ヒジュラ暦のシステムでは、ゼロよりも大きいプロレプティックな年をカバーする時代が1つだけあります。</target>
        </trans-unit>
        <trans-unit id="8c7bf054691c4990879f32b517b7eb5c7c8f7c31" translate="yes" xml:space="preserve">
          <source>The Hijrah property resource is a set of properties that describe the calendar. The syntax is defined by &lt;code&gt;java.util.Properties#load(Reader)&lt;/code&gt;.</source>
          <target state="translated">Hijrahプロパティリソースは、カレンダーを説明する一連のプロパティです。構文は &lt;code&gt;java.util.Properties#load(Reader)&lt;/code&gt; によって定義されます。</target>
        </trans-unit>
        <trans-unit id="2d5f51089d0f9a89148d7f6f56fbc17a08c3c7dd" translate="yes" xml:space="preserve">
          <source>The HijrahChronology follows the rules of the Hijrah calendar system. The Hijrah calendar has several variants based on differences in when the new moon is determined to have occurred and where the observation is made. In some variants the length of each month is computed algorithmically from the astronomical data for the moon and earth and in others the length of the month is determined by an authorized sighting of the new moon. For the algorithmically based calendars the calendar can project into the future. For sighting based calendars only historical data from past sightings is available.</source>
          <target state="translated">ヒジュラークロノロジーは、ヒジュラー暦のルールに従います。ヒジュラ暦には、新月がいつ発生したか、どこで観測されたかの違いに基づいて、いくつかのバリエーションがあります。月と地球の天文学的なデータをもとに、月の長さをアルゴリズムで計算するものもあれば、新月の目撃情報をもとに月の長さを決定するものもあります。アルゴリズムに基づいたカレンダーでは、カレンダーは未来を予測することができます。目撃情報に基づいたカレンダーでは、過去の目撃情報から得られた過去のデータのみが利用可能です。</target>
        </trans-unit>
        <trans-unit id="e24e34ecc8a9ad3b4e4ea87309f75a1db55428a1" translate="yes" xml:space="preserve">
          <source>The Home key, a non-ASCII action key.</source>
          <target state="translated">ホームキー、非ASCIIのアクションキーです。</target>
        </trans-unit>
        <trans-unit id="b30101cf2f801668711691b72956c848b7ff79c7" translate="yes" xml:space="preserve">
          <source>The IANA charset registry does change over time, and so the canonical name and the aliases of a particular charset may also change over time. To ensure compatibility it is recommended that no alias ever be removed from a charset, and that if the canonical name of a charset is changed then its previous canonical name be made into an alias.</source>
          <target state="translated">IANA の charset レジストリは時間の経過とともに変化するので、特定の charset の正規名とエイリアスも時間の経過とともに変化する可能性があります。互換性を確保するために、エイリアスが文字セットから削除されることはなく、文字セットの正規名が変更された場合、以前の正規名をエイリアスにすることが推奨されています。</target>
        </trans-unit>
        <trans-unit id="4291d010a17ade250e32deaae43f97dfb3a7ba1f" translate="yes" xml:space="preserve">
          <source>The ICC standard uses a device independent color space (DICS) as the mechanism for converting color from one device to another device. In this architecture, colors are converted from the source device's color space to the ICC DICS and then from the ICC DICS to the destination device's color space. The ICC standard defines device profiles which contain transforms which will convert between a device's color space and the ICC DICS. The overall conversion of colors from a source device to colors of a destination device is done by connecting the device-to-DICS transform of the profile for the source device to the DICS-to-device transform of the profile for the destination device. For this reason, the ICC DICS is commonly referred to as the profile connection space (PCS). The color space used in the methods toCIEXYZ and fromCIEXYZ is the CIEXYZ PCS defined by the ICC Specification. This is also the color space represented by ColorSpace.CS_CIEXYZ.</source>
          <target state="translated">ICC規格では、あるデバイスから別のデバイスへの色変換の仕組みとしてDICS(Device Independent Color Space)を採用しています。こ のアーキテ ク チ ャ では、 色は、 ソース デバ イ ス の色空間か ら ICC DICS に変換 さ れ、 その後 ICC DICS からデスティネーション デバ イ ス の色空間に変換 さ れます。ICC 規格は、 デバ イ ス の色空間 と ICC DICS の間で変換す る 変換を含むデバ イ ス プ ロ フ ァ イ ルを定義 し てい ます。ソースデバイスからデスティネーションデバイスの色への全体的な変換は、ソースデバイスのプロファイルのデバイス-DICS変換とデスティネーションデバイスのプロファイルのDICS-to-デバイス変換を接続することで行われます。このため、ICCのDICSは、一般的にPCS(Profile Connection Space)と呼ばれている。toCIEXYZおよびfromCIEXYZのメソッドで使用される色空間は、ICC仕様で定義されているCIEXYZ PCSです。これは、ColorSpace.CS_CIEXYZで表される色空間でもあります。</target>
        </trans-unit>
        <trans-unit id="e6b1df547566cde6967819973372499ee99ddb22" translate="yes" xml:space="preserve">
          <source>The ICC_ColorSpace class is an implementation of the abstract ColorSpace class.</source>
          <target state="translated">ICC_ColorSpaceクラスは、抽象ColorSpaceクラスの実装です。</target>
        </trans-unit>
        <trans-unit id="29a4fdfa37a516d2928ce968cabea4dcd82635e5" translate="yes" xml:space="preserve">
          <source>The ICC_ColorSpace class is an implementation of the abstract ColorSpace class. This representation of device independent and device dependent color spaces is based on the International Color Consortium Specification ICC.1:2001-12, File Format for Color Profiles (see &lt;a href=&quot;http://www.color.org&quot;&gt;http://www.color.org&lt;/a&gt;).</source>
          <target state="translated">ICC_ColorSpaceクラスは、抽象ColorSpaceクラスの実装です。デバイスに依存しない色空間とデバイスに依存する色空間のこの表現は、International Color Consortium Specification ICC.1：2001-12、File Format for Color Profiles（&lt;a href=&quot;http://www.color.org&quot;&gt;http://www.color.orgを参照&lt;/a&gt;）に基づいています。</target>
        </trans-unit>
        <trans-unit id="72f3ceadbe13561989c9f7b18cd300f66f00b9cf" translate="yes" xml:space="preserve">
          <source>The ICC_ProfileRGB class is a subclass of the ICC_Profile class that represents profiles which meet the following criteria:</source>
          <target state="translated">ICC_ProfileRGBクラスは、以下の基準を満たすプロファイルを表すICC_Profileクラスのサブクラスです。</target>
        </trans-unit>
        <trans-unit id="46384c6ea74d47171799bd6ab4946e6155803a9f" translate="yes" xml:space="preserve">
          <source>The ICC_ProfileRGB class is a subclass of the ICC_Profile class that represents profiles which meet the following criteria: The profile's color space type is RGB. The profile includes the &lt;code&gt;redColorantTag&lt;/code&gt;, &lt;code&gt;greenColorantTag&lt;/code&gt;, &lt;code&gt;blueColorantTag&lt;/code&gt;, &lt;code&gt;redTRCTag&lt;/code&gt;, &lt;code&gt;greenTRCTag&lt;/code&gt;, &lt;code&gt;blueTRCTag&lt;/code&gt;, and &lt;code&gt;mediaWhitePointTag&lt;/code&gt; tags. The &lt;code&gt;ICC_Profile getInstance&lt;/code&gt; method will return an &lt;code&gt;ICC_ProfileRGB&lt;/code&gt; object when these conditions are met.</source>
          <target state="translated">ICC_ProfileRGBクラスは、次の条件を満たすプロファイルを表すICC_Profileクラスのサブクラスです。プロファイルの色空間タイプはRGBです。プロファイルには、 &lt;code&gt;redColorantTag&lt;/code&gt; 、 &lt;code&gt;greenColorantTag&lt;/code&gt; 、 &lt;code&gt;blueColorantTag&lt;/code&gt; 、 &lt;code&gt;redTRCTag&lt;/code&gt; 、 &lt;code&gt;greenTRCTag&lt;/code&gt; 、 &lt;code&gt;blueTRCTag&lt;/code&gt; 、および &lt;code&gt;mediaWhitePointTag&lt;/code&gt; タグが含まれます。 &lt;code&gt;ICC_Profile getInstance&lt;/code&gt; メソッドは戻ります &lt;code&gt;ICC_ProfileRGB&lt;/code&gt; のこれらの条件が満たされたときにオブジェクトを。</target>
        </trans-unit>
        <trans-unit id="a09a7c491e42ec0ccd6087606b59441de1f0715c" translate="yes" xml:space="preserve">
          <source>The ID is minor variation to the standard ISO-8601 formatted string for the offset. There are three formats:</source>
          <target state="translated">ID は、オフセットのための標準 ISO-8601 フォーマットの文字列に対するマイナーなバリエーションである。フォーマットは3つあります。</target>
        </trans-unit>
        <trans-unit id="d29cb73c296776b288211b97e00b807749e9b2d0" translate="yes" xml:space="preserve">
          <source>The ID is unique within the system. There are three types of ID.</source>
          <target state="translated">IDはシステム内で一意です。IDには3種類あります。</target>
        </trans-unit>
        <trans-unit id="ae854760d3f4276cd755511e493cc5a51b830e12" translate="yes" xml:space="preserve">
          <source>The ID of the listener to which the notification is targeted.</source>
          <target state="translated">通知の対象となるリスナーのID。</target>
        </trans-unit>
        <trans-unit id="01ee2510bd3aca83bad9699f7e3b7df60b473549" translate="yes" xml:space="preserve">
          <source>The ID of the returned offset will be normalized to one of the formats described by &lt;a href=&quot;#getId()&quot;&gt;&lt;code&gt;getId()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返されるオフセットのIDは、&lt;a href=&quot;#getId()&quot;&gt; &lt;code&gt;getId()&lt;/code&gt; で&lt;/a&gt;記述された形式の1つに正規化されます。</target>
        </trans-unit>
        <trans-unit id="61fd4732cbe2e01752b6c8cf6a30f14f6ab40119" translate="yes" xml:space="preserve">
          <source>The ID of the returned offset will be normalized to one of the formats described by &lt;a href=&quot;zoneoffset#getId--&quot;&gt;&lt;code&gt;getId()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">返されるオフセットのIDは、&lt;a href=&quot;zoneoffset#getId--&quot;&gt; &lt;code&gt;getId()&lt;/code&gt; で&lt;/a&gt;記述された形式のいずれかに正規化されます。</target>
        </trans-unit>
        <trans-unit id="7c8cb46fd48547fa630e300fcba11829a98c4159" translate="yes" xml:space="preserve">
          <source>The ID of the thread that owns the object that the thread is blocked.</source>
          <target state="translated">スレッドがブロックされているオブジェクトを所有しているスレッドのID。</target>
        </trans-unit>
        <trans-unit id="4bed910017ae47e15f9fd68ce9f4a7a2eb621fdb" translate="yes" xml:space="preserve">
          <source>The ID uniquely identifies the &lt;code&gt;Chronology&lt;/code&gt;. It can be used to lookup the &lt;code&gt;Chronology&lt;/code&gt; using &lt;a href=&quot;#of(java.lang.String)&quot;&gt;&lt;code&gt;of(String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">IDは、 &lt;code&gt;Chronology&lt;/code&gt; 一意に識別します。&lt;a href=&quot;#of(java.lang.String)&quot;&gt; &lt;code&gt;of(String)&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;Chronology&lt;/code&gt; を検索するために使用できます。</target>
        </trans-unit>
        <trans-unit id="bbbbed4ad86feca80f73d8a6ba6de9c29be78a79" translate="yes" xml:space="preserve">
          <source>The ID uniquely identifies the &lt;code&gt;Chronology&lt;/code&gt;. It can be used to lookup the &lt;code&gt;Chronology&lt;/code&gt; using &lt;a href=&quot;chronology#of(java.lang.String)&quot;&gt;&lt;code&gt;Chronology.of(String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">IDは、 &lt;code&gt;Chronology&lt;/code&gt; 一意に識別します。&lt;a href=&quot;chronology#of(java.lang.String)&quot;&gt; &lt;code&gt;Chronology.of(String)&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;Chronology&lt;/code&gt; を検索するために使用できます。</target>
        </trans-unit>
        <trans-unit id="fd6d60e60fa86ec5a78289385fee6d0f6bc1bdd6" translate="yes" xml:space="preserve">
          <source>The ID uniquely identifies the &lt;code&gt;Chronology&lt;/code&gt;. It can be used to lookup the &lt;code&gt;Chronology&lt;/code&gt; using &lt;a href=&quot;chronology#of-java.lang.String-&quot;&gt;&lt;code&gt;Chronology.of(String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">IDは、 &lt;code&gt;Chronology&lt;/code&gt; 一意に識別します。&lt;a href=&quot;chronology#of-java.lang.String-&quot;&gt; &lt;code&gt;Chronology.of(String)&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;Chronology&lt;/code&gt; を検索するために使用できます。</target>
        </trans-unit>
        <trans-unit id="1cafcec37d18d1f40c55857c337e84b388be6a4b" translate="yes" xml:space="preserve">
          <source>The ID uniquely identifies the &lt;code&gt;Chronology&lt;/code&gt;. It can be used to lookup the &lt;code&gt;Chronology&lt;/code&gt; using &lt;a href=&quot;chronology#of-java.lang.String-&quot;&gt;&lt;code&gt;of(String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">IDは、 &lt;code&gt;Chronology&lt;/code&gt; 一意に識別します。&lt;a href=&quot;chronology#of-java.lang.String-&quot;&gt; &lt;code&gt;of(String)&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;Chronology&lt;/code&gt; を検索するために使用できます。</target>
        </trans-unit>
        <trans-unit id="eec3d7c57ef5447e9bdebab954ee90700a2a652d" translate="yes" xml:space="preserve">
          <source>The IP address of the remote end of this socket.</source>
          <target state="translated">このソケットのリモート側のIPアドレス。</target>
        </trans-unit>
        <trans-unit id="510660eb55dda01e452a05872bd22f9cfe584483" translate="yes" xml:space="preserve">
          <source>The IPv6-address is a literal IPv6 address as described above. The</source>
          <target state="translated">このIPv6アドレスは、上述したようにリテラルIPv6アドレスである。であることを示しています。</target>
        </trans-unit>
        <trans-unit id="4679bfab8bdf1a02bfe30406e4c9f7a2085873a2" translate="yes" xml:space="preserve">
          <source>The ISO 3166-1 codes can be found on-line.</source>
          <target state="translated">ISO 3166-1のコードはオンラインで見つけることができます。</target>
        </trans-unit>
        <trans-unit id="611dd8f9d48699c9411b9432a1cb2dc63863602c" translate="yes" xml:space="preserve">
          <source>The ISO calendar system behaves as follows:</source>
          <target state="translated">ISOカレンダーシステムは以下のように動作します。</target>
        </trans-unit>
        <trans-unit id="6082f991bd981467ab45e2ffde3309b5e82f6280" translate="yes" xml:space="preserve">
          <source>The ISO calendar system defines an additional week-based division of years. This defines a year based on whole Monday to Monday weeks. This is modeled in &lt;a href=&quot;isofields&quot;&gt;&lt;code&gt;IsoFields&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ISOカレンダーシステムは、追加の週ベースの年の区分を定義します。これは、月曜日から月曜日の週全体に基づいて年を定義します。これは&lt;a href=&quot;isofields&quot;&gt; &lt;code&gt;IsoFields&lt;/code&gt; &lt;/a&gt;でモデル化されています。</target>
        </trans-unit>
        <trans-unit id="4d077fd16854767d357096f809fb7b81bacb82c7" translate="yes" xml:space="preserve">
          <source>The ISO calendar system.</source>
          <target state="translated">ISOカレンダーシステム。</target>
        </trans-unit>
        <trans-unit id="58e26e3bf55479a8a5120fe45b369953d4715df2" translate="yes" xml:space="preserve">
          <source>The ISO date formatter that formats or parses a date with an offset, such as '2011-12-03+01:00'.</source>
          <target state="translated">2011-12-03+01:00' のようなオフセットを持つ日付をフォーマットまたはパースする ISO 日付フォーマッタ。</target>
        </trans-unit>
        <trans-unit id="6de9417addd60d61c439ecd60520ce653b7ff208" translate="yes" xml:space="preserve">
          <source>The ISO date formatter that formats or parses a date with the offset if available, such as '2011-12-03' or '2011-12-03+01:00'.</source>
          <target state="translated">ISO 日付フォーマッタは、'2011-12-03' や '2011-12-03+01:00' のように、オフセットがある場合にはオフセットを使って日付をフォーマットしたり、パースしたりします。</target>
        </trans-unit>
        <trans-unit id="2bed7eaa4131a3fd0eed3c41b0dc86a015ca96db" translate="yes" xml:space="preserve">
          <source>The ISO date formatter that formats or parses a date without an offset, such as '2011-12-03'.</source>
          <target state="translated">2011-12-03' のようなオフセットのない日付をフォーマットまたはパースする ISO 日付フォーマッタ。</target>
        </trans-unit>
        <trans-unit id="21efec4c9a9cd99bd7c37c45effa030d9f01c4ca" translate="yes" xml:space="preserve">
          <source>The ISO date formatter that formats or parses a date without an offset, such as '20111203'.</source>
          <target state="translated">20111203' のようなオフセットのない日付をフォーマットまたはパースする ISO 日付フォーマッタ。</target>
        </trans-unit>
        <trans-unit id="5e79ab154ec99d657cac16998df6c24432d36bfb" translate="yes" xml:space="preserve">
          <source>The ISO date formatter that formats or parses the ordinal date without an offset, such as '2012-337'.</source>
          <target state="translated">2012-337' のようなオフセットのない順序の日付をフォーマットまたはパースする ISO 日付フォーマッタ。</target>
        </trans-unit>
        <trans-unit id="8947499950b72303579b6072a1f0f70410f938f9" translate="yes" xml:space="preserve">
          <source>The ISO date formatter that formats or parses the week-based date without an offset, such as '2012-W48-6'.</source>
          <target state="translated">2012-W48-6' のように、週単位の日付をオフセットなしでフォーマットまたはパースする ISO 日付フォーマッタ。</target>
        </trans-unit>
        <trans-unit id="ad4a4f923ef1dd96afdbb263d3503d29224e8ce9" translate="yes" xml:space="preserve">
          <source>The ISO date of the first day of the minimum Hijrah year.</source>
          <target state="translated">最小ヒジュラー年の初日のISO日付。</target>
        </trans-unit>
        <trans-unit id="ab2094bfe0e934a818f591f8e39df5d0c0f5b428" translate="yes" xml:space="preserve">
          <source>The ISO date-time formatter that formats or parses a date-time with an offset, such as '2011-12-03T10:15:30+01:00'.</source>
          <target state="translated">2011-12-03T10:15:30+01:00' のようなオフセットを持つ日付時刻をフォーマットまたはパースする ISO 日付時刻フォーマッタ。</target>
        </trans-unit>
        <trans-unit id="b7f380848807763c304877a683626ef209b2dd72" translate="yes" xml:space="preserve">
          <source>The ISO date-time formatter that formats or parses a date-time without an offset, such as '2011-12-03T10:15:30'.</source>
          <target state="translated">2011-12-03T10:15:30' のようなオフセットのない日付時刻をフォーマットまたはパースする ISO 日付時刻フォーマッタ。</target>
        </trans-unit>
        <trans-unit id="bd2f9f3c47232e93e12ebe7e08b1617ed46664af" translate="yes" xml:space="preserve">
          <source>The ISO instant formatter that formats or parses an instant in UTC, such as '2011-12-03T10:15:30Z'.</source>
          <target state="translated">2011-12-03T10:15:30Z' のように UTC でインスタントをフォーマットまたはパースする ISO インスタントフォーマッタ。</target>
        </trans-unit>
        <trans-unit id="95a52b961a46e25216875fca80e6d411d7ab598a" translate="yes" xml:space="preserve">
          <source>The ISO time formatter that formats or parses a time with an offset, such as '10:15+01:00' or '10:15:30+01:00'.</source>
          <target state="translated">10:15+01:00」や「10:15:30+01:00」のようなオフセットを持つ時刻をフォーマットまたはパースするISO時刻フォーマッタ。</target>
        </trans-unit>
        <trans-unit id="df2987c695a53ce54ed87dd02ab3fbad12667817" translate="yes" xml:space="preserve">
          <source>The ISO time formatter that formats or parses a time without an offset, such as '10:15' or '10:15:30'.</source>
          <target state="translated">10:15' や '10:15:30' のようなオフセットのない時刻をフォーマットまたはパースする ISO 時刻フォーマッタ。</target>
        </trans-unit>
        <trans-unit id="d335e1639bd2cf2c6fa963a589bd508ea6cff667" translate="yes" xml:space="preserve">
          <source>The ISO time formatter that formats or parses a time, with the offset if available, such as '10:15', '10:15:30' or '10:15:30+01:00'.</source>
          <target state="translated">10:15'、'10:15:30'、'10:15:30+01:00' のように、オフセットがあればそれを用いて時刻をフォーマットまたはパースする ISO 時刻フォーマッタ。</target>
        </trans-unit>
        <trans-unit id="0a3f5206473b8e9b0e863ce6a87c607ec16d4baa" translate="yes" xml:space="preserve">
          <source>The ISO-8601 calendar system is the modern civil calendar system used today in most of the world. It is equivalent to the proleptic Gregorian calendar system, in which today's rules for leap years are applied for all time.</source>
          <target state="translated">ISO-8601カレンダーシステムは、今日、世界のほとんどの国で使用されている近代的な民暦システムである。それは閏年のための今日の規則がすべての時間のために適用されるプロレプティックグレゴリオ暦システムと同等である。</target>
        </trans-unit>
        <trans-unit id="6b0753a83aa00ab66715a1d0bce536d311b35dee" translate="yes" xml:space="preserve">
          <source>The ISO-8601 calendar system is the modern civil calendar system used today in most of the world. It is equivalent to the proleptic Gregorian calendar system, in which today's rules for leap years are applied for all time. For most applications written today, the ISO-8601 rules are entirely suitable. However, any application that makes use of historical dates, and requires them to be accurate will find the ISO-8601 approach unsuitable.</source>
          <target state="translated">ISO-8601カレンダーシステムは、今日、世界のほとんどの国で使用されている近代的な民暦システムである。それは、うるう年のための今日の規則がすべての時間のために適用されるプロレプティック・グレゴリオ暦システムに相当します。今日書かれているほとんどのアプリケーションでは、ISO-8601の規則が完全に適しています。しかし、歴史的な日付を使用し、それらが正確であることを必要とする任意のアプリケーションでは、ISO-8601のアプローチは不適当であることがわかります。</target>
        </trans-unit>
        <trans-unit id="2b87b0b3d3f02384c82a8cdf0d2d60d19047ef46" translate="yes" xml:space="preserve">
          <source>The ISO-8601 calendar system is the modern civil calendar system used today in most of the world. This API assumes that all calendar systems use the same representation, this class, for time-of-day.</source>
          <target state="translated">ISO-8601 暦システムは、今日世界のほとんどの国で使用されている最新の民間暦システムです。この API は、すべてのカレンダーシステムが同じ表現であるこのクラスを使用することを前提としています。</target>
        </trans-unit>
        <trans-unit id="24cf4f50b66f15436634e4e63889e0eeb0811579" translate="yes" xml:space="preserve">
          <source>The ISO-8601 definition, where a week starts on Monday and the first week has a minimum of 4 days.</source>
          <target state="translated">週が月曜日から始まるISO-8601の定義で、最初の週は最低でも4日です。</target>
        </trans-unit>
        <trans-unit id="ea56e5764492774cbd5793c14b636ad2fff88f1f" translate="yes" xml:space="preserve">
          <source>The ISO-8601 standard defines a calendar system based on weeks. It uses the week-based-year and week-of-week-based-year concepts to split up the passage of days instead of the standard year/month/day.</source>
          <target state="translated">ISO-8601規格では、週を基準としたカレンダーシステムを定義しています。標準的な年/月/日の代わりに、週を基準とした年と週を基準とした年の概念を使用して、日の経過を分割します。</target>
        </trans-unit>
        <trans-unit id="cd8f2e4ef07a7ae4561e3a206df7d9c3194cc3bf" translate="yes" xml:space="preserve">
          <source>The ISO-8601 standard does not define eras. A definition has therefore been created with two eras - 'Current era' (CE) for years on or after 0001-01-01 (ISO), and 'Before current era' (BCE) for years before that.</source>
          <target state="translated">ISO-8601 規格では、時代を定義していない。そのため、0001-01-01(ISO)以降の年月は「現在の時代」(CE)、それ以前の年月は「現在の時代以前」(BCE)という2つの時代を定義しています。</target>
        </trans-unit>
        <trans-unit id="15f2960aca862d8387dbd45828c14f2ee1a23360" translate="yes" xml:space="preserve">
          <source>The ISO-8601 standard is based on the standard civic 12 month year. This is commonly divided into four quarters, often abbreviated as Q1, Q2, Q3 and Q4.</source>
          <target state="translated">ISO-8601規格は、標準的な公民12ヶ月年をベースにしています。これは一般的にQ1、Q2、Q3、Q4と略されることが多い4つの四半期に分けられています。</target>
        </trans-unit>
        <trans-unit id="6e18900e4d1930d96696f4d4906e19682a06d587" translate="yes" xml:space="preserve">
          <source>The ISO-8601 standard was originally intended as a data interchange format, defining a string format for dates and times. However, it also defines an alternate way of expressing the date, based on the concept of week-based-year.</source>
          <target state="translated">ISO-8601規格は元々、日付と時刻のための文字列フォーマットを定義するデータ交換フォーマットとして意図されていた。しかし、週を基準とした年の概念に基づいた日付の代替的な表現方法も定義されています。</target>
        </trans-unit>
        <trans-unit id="12da9e8bfa2848ec37f88ea0629d59e6306e0906" translate="yes" xml:space="preserve">
          <source>The ISO-like date-time formatter that formats or parses a date-time with offset and zone, such as '2011-12-03T10:15:30+01:00[Europe/Paris]'.</source>
          <target state="translated">2011-12-03T10:15:30+01:00[ヨーロッパ/パリ]のようなオフセットとゾーンを持つ日付時刻をフォーマットまたはパースするISOライクな日付時刻フォーマッタ。</target>
        </trans-unit>
        <trans-unit id="86afa3124f1aed75c36e4dd56bfce8c49977f732" translate="yes" xml:space="preserve">
          <source>The ISO-like date-time formatter that formats or parses a date-time with the offset and zone if available, such as '2011-12-03T10:15:30', '2011-12-03T10:15:30+01:00' or '2011-12-03T10:15:30+01:00[Europe/Paris]'.</source>
          <target state="translated">ISOライクな日付時刻フォーマッタで、'2011-12-03T10:15:30'、'2011-12-03T10:15:30+01:00'、'2011-12-03T10:15:30+01:00[ヨーロッパ/パリ]のように、利用可能であればオフセットとゾーンを指定して日付時刻をフォーマットまたはパースする。</target>
        </trans-unit>
        <trans-unit id="1770c1e43e10767defa4c018f5743b7b2d0ab296" translate="yes" xml:space="preserve">
          <source>The IV is taken from &lt;code&gt;iv&lt;/code&gt;, starting at &lt;code&gt;offset&lt;/code&gt; inclusive. Note that the size of the IV (block size), starting at &lt;code&gt;offset&lt;/code&gt; inclusive, must be twice the word size. The bytes that constitute the IV are those between &lt;code&gt;iv[offset]&lt;/code&gt; and &lt;code&gt;iv[offset+2*(wordSize/8)-1]&lt;/code&gt; inclusive.</source>
          <target state="translated">IVは &lt;code&gt;iv&lt;/code&gt; から取得され、 &lt;code&gt;offset&lt;/code&gt; 含みます。IVのサイズ（ブロックサイズ）は、 &lt;code&gt;offset&lt;/code&gt; 含めて、ワードサイズの2倍でなければならないことに注意してください。IVを構成するバイトは、 &lt;code&gt;iv[offset]&lt;/code&gt; と &lt;code&gt;iv[offset+2*(wordSize/8)-1]&lt;/code&gt; 間のバイトです。</target>
        </trans-unit>
        <trans-unit id="47f00745675042f6a724b595797a24a07101fd7a" translate="yes" xml:space="preserve">
          <source>The IV is taken from &lt;code&gt;iv&lt;/code&gt;, starting at &lt;code&gt;offset&lt;/code&gt; inclusive. The bytes that constitute the IV are those between &lt;code&gt;iv[offset]&lt;/code&gt; and &lt;code&gt;iv[offset+7]&lt;/code&gt; inclusive.</source>
          <target state="translated">IVは &lt;code&gt;iv&lt;/code&gt; から取得され、 &lt;code&gt;offset&lt;/code&gt; 含みます。IVを構成するバイトは、 &lt;code&gt;iv[offset]&lt;/code&gt; と &lt;code&gt;iv[offset+7]&lt;/code&gt; 間のバイトです。</target>
        </trans-unit>
        <trans-unit id="dd985ba4ac843c2aa13ce1073a3079fccc30b81d" translate="yes" xml:space="preserve">
          <source>The Id of the calendar in common usage</source>
          <target state="translated">一般的に使われているカレンダーのID</target>
        </trans-unit>
        <trans-unit id="faa9a0061bb28bf6c97cd39acf5b5a828ccf93f4" translate="yes" xml:space="preserve">
          <source>The InetAddress class has a cache to store successful as well as unsuccessful host name resolutions.</source>
          <target state="translated">InetAddress クラスは、成功したホスト名と失敗したホスト名の解決策を保存するためのキャッシュを持っています。</target>
        </trans-unit>
        <trans-unit id="b6bf2f6528348c5b02c604ad3248d294717b2a1b" translate="yes" xml:space="preserve">
          <source>The InetAddress class provides methods to resolve host names to their IP addresses and vice versa.</source>
          <target state="translated">InetAddress クラスは、ホスト名を IP アドレスに解決するメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="65b8748cc6268fcd7ebec74a58229406dde9da72" translate="yes" xml:space="preserve">
          <source>The InetAddress returned will represent the IPv4 loopback address, 127.0.0.1, or the IPv6 loopback address, ::1. The IPv4 loopback address returned is only one of many in the form 127.*.*.*</source>
          <target state="translated">返される InetAddress は、IPv4 ループバックアドレス 127.0.0.0.1、または IPv6 ループバックアドレス ::1 を表します。返されるIPv4ループバックアドレスは、127.*.*.*.*.</target>
        </trans-unit>
        <trans-unit id="2152fa5309ac167073dd45954409ff4768fda7a1" translate="yes" xml:space="preserve">
          <source>The Initial Context</source>
          <target state="translated">初期文脈</target>
        </trans-unit>
        <trans-unit id="ac8c89b1c1f180681f98a482edf01b3499693ace" translate="yes" xml:space="preserve">
          <source>The Insert key, a non-ASCII action key.</source>
          <target state="translated">Insertキー、非ASCIIアクションキーです。</target>
        </trans-unit>
        <trans-unit id="9ff6f766ad82286cf3b4ec81ad2977fb2af744de" translate="yes" xml:space="preserve">
          <source>The Internet Assigned Numbers Authority maintains the &lt;a href=&quot;http://www.iana.org/assignments/uri-schemes.html&quot;&gt;official list of URI schemes&lt;/a&gt;.</source>
          <target state="translated">Internet Assigned Numbers Authorityは、&lt;a href=&quot;http://www.iana.org/assignments/uri-schemes.html&quot;&gt;URIスキームの公式リストを&lt;/a&gt;管理しています。</target>
        </trans-unit>
        <trans-unit id="d6529cb88cc0262a6e384c19547d019dbb6bed8b" translate="yes" xml:space="preserve">
          <source>The Introspector class provides a standard way for tools to learn about the properties, events, and methods supported by a target Java Bean.</source>
          <target state="translated">Introspectorクラスは,ターゲットJava Beanがサポートするプロパティ,イベント,メソッドについて学習するためのツールの標準的な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="d59d73b56b3dc062d05806ca58651ba62a2b2f54" translate="yes" xml:space="preserve">
          <source>The JAAS login module in the JDK reference implementation destroys all tickets after logout.</source>
          <target state="translated">JDK リファレンス実装の JAAS ログインモジュールは、ログアウト後にすべてのチケットを破棄します。</target>
        </trans-unit>
        <trans-unit id="fc346e9074de046178b6976458380753f8a1bf98" translate="yes" xml:space="preserve">
          <source>The JAR File Specification defines manifest attributes for standalone applications that are packaged as &lt;em&gt;executable JAR files&lt;/em&gt;. If an implementation supports a mechanism to start an application as an executable JAR then the main manifest may include the &lt;code&gt;Launcher-Agent-Class&lt;/code&gt; attribute to specify the class name of an agent to start before the application &lt;code&gt;main&lt;/code&gt; method is invoked. The Java virtual machine attempts to invoke the following method on the agent class:</source>
          <target state="translated">JARファイル仕様は、&lt;em&gt;実行可能JARファイル&lt;/em&gt;としてパッケージ化されたスタンドアロンアプリケーションのマニフェスト属性を定義し&lt;em&gt;ます&lt;/em&gt;。実装が実行可能JARとしてアプリケーションを開始するメカニズムをサポートしている場合、メインマニフェストには &lt;code&gt;Launcher-Agent-Class&lt;/code&gt; 属性を含めて、アプリケーションの &lt;code&gt;main&lt;/code&gt; メソッドが呼び出される前に開始するエージェントのクラス名を指定できます。 Java仮想マシンは、エージェントクラスで次のメソッドを呼び出そうとします。</target>
        </trans-unit>
        <trans-unit id="9399cacad1f2d454e6eb5e3191a8f321b607ef5b" translate="yes" xml:space="preserve">
          <source>The JAR File Specification: Package Sealing</source>
          <target state="translated">JARファイルの仕様。パッケージの封印</target>
        </trans-unit>
        <trans-unit id="bb84f09030f91494fb9beb5357d12365eccba462" translate="yes" xml:space="preserve">
          <source>The JAR manifest file name.</source>
          <target state="translated">JAR マニフェストファイル名。</target>
        </trans-unit>
        <trans-unit id="767966e80e6e7fb64c0055271e699571168269ff" translate="yes" xml:space="preserve">
          <source>The JAXP Processors' support for Catalog depends on both the &lt;a href=&quot;../xmlconstants#USE_CATALOG&quot;&gt;&lt;code&gt;USE_CATALOG&lt;/code&gt;&lt;/a&gt; feature and the existence of valid Catalog file(s). A JAXP processor will use the Catalog only when the feature is true and valid Catalog file(s) are specified through the &lt;code&gt;javax.xml.catalog.files&lt;/code&gt; property. It will make no attempt to use the Catalog if either &lt;a href=&quot;../xmlconstants#USE_CATALOG&quot;&gt;&lt;code&gt;USE_CATALOG&lt;/code&gt;&lt;/a&gt; is set to false, or there is no Catalog file specified.</source>
          <target state="translated">The JAXP Processors' support for Catalog depends on both the &lt;a href=&quot;../xmlconstants#USE_CATALOG&quot;&gt; &lt;code&gt;USE_CATALOG&lt;/code&gt; &lt;/a&gt; feature and the existence of valid Catalog file(s). A JAXP processor will use the Catalog only when the feature is true and valid Catalog file(s) are specified through the &lt;code&gt;javax.xml.catalog.files&lt;/code&gt; property. It will make no attempt to use the Catalog if either &lt;a href=&quot;../xmlconstants#USE_CATALOG&quot;&gt; &lt;code&gt;USE_CATALOG&lt;/code&gt; &lt;/a&gt; is set to false, or there is no Catalog file specified.</target>
        </trans-unit>
        <trans-unit id="672525f13b4776f4afc24e25f67783864e75b16d" translate="yes" xml:space="preserve">
          <source>The JAXP parsing API has been integrated with the Validation API. Applications may create a &lt;a href=&quot;schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt; with the validation API and associate it with a &lt;a href=&quot;../parsers/documentbuilderfactory&quot;&gt;&lt;code&gt;DocumentBuilderFactory&lt;/code&gt;&lt;/a&gt; or a &lt;a href=&quot;../parsers/saxparserfactory&quot;&gt;&lt;code&gt;SAXParserFactory&lt;/code&gt;&lt;/a&gt; instance by using the &lt;a href=&quot;../parsers/documentbuilderfactory#setSchema(javax.xml.validation.Schema)&quot;&gt;&lt;code&gt;DocumentBuilderFactory.setSchema(Schema)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../parsers/saxparserfactory#setSchema(javax.xml.validation.Schema)&quot;&gt;&lt;code&gt;SAXParserFactory.setSchema(Schema)&lt;/code&gt;&lt;/a&gt; methods. &lt;strong&gt;You should not&lt;/strong&gt; both set a schema and call &lt;code&gt;setValidating(true)&lt;/code&gt; on a parser factory. The former technique will cause parsers to use the new validation API; the latter will cause parsers to use their own internal validation facilities. &lt;strong&gt;Turning on both of these options simultaneously will cause either redundant behavior or error conditions.&lt;/strong&gt;</source>
          <target state="translated">The JAXP parsing API has been integrated with the Validation API. Applications may create a &lt;a href=&quot;schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt; with the validation API and associate it with a &lt;a href=&quot;../parsers/documentbuilderfactory&quot;&gt; &lt;code&gt;DocumentBuilderFactory&lt;/code&gt; &lt;/a&gt; or a &lt;a href=&quot;../parsers/saxparserfactory&quot;&gt; &lt;code&gt;SAXParserFactory&lt;/code&gt; &lt;/a&gt; instance by using the &lt;a href=&quot;../parsers/documentbuilderfactory#setSchema(javax.xml.validation.Schema)&quot;&gt; &lt;code&gt;DocumentBuilderFactory.setSchema(Schema)&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;../parsers/saxparserfactory#setSchema(javax.xml.validation.Schema)&quot;&gt; &lt;code&gt;SAXParserFactory.setSchema(Schema)&lt;/code&gt; &lt;/a&gt; methods. &lt;strong&gt;You should not&lt;/strong&gt; both set a schema and call &lt;code&gt;setValidating(true)&lt;/code&gt; on a parser factory. The former technique will cause parsers to use the new validation API; the latter will cause parsers to use their own internal validation facilities. &lt;strong&gt;Turning on both of these options simultaneously will cause either redundant behavior or error conditions.&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db8911ccdb0a32b11e7f663779352a6851708390" translate="yes" xml:space="preserve">
          <source>The JAXP processors give preference to user-specified custom resolvers. If such a resolver is registered, it will be used over the CatalogResolver. If it returns null however, the processors will continue resolving with the CatalogResolver. If it returns an empty source, no attempt will be made by the CatalogResolver.</source>
          <target state="translated">JAXPプロセッサは、ユーザーが指定したカスタムリゾルバを優先的に使用します。そのようなリゾルバが登録されている場合は、CatalogResolverよりもそのリゾルバが使用されます。しかし、これがnullを返す場合、プロセッサはCatalogResolverでの解決を継続します。これが空のソースを返した場合、カタログリゾルバは何も試みません。</target>
        </trans-unit>
        <trans-unit id="99f24bc9813db0373534263c88d5131c62a4ac28" translate="yes" xml:space="preserve">
          <source>The JAXP processors will observe the default settings of the &lt;a href=&quot;catalogfeatures&quot;&gt;&lt;code&gt;CatalogFeatures&lt;/code&gt;&lt;/a&gt;. The processors, for example, will report an Exception by default when no matching entry is found since the default value of the &lt;code&gt;javax.xml.catalog.resolve&lt;/code&gt; property is strict.</source>
          <target state="translated">The JAXP processors will observe the default settings of the &lt;a href=&quot;catalogfeatures&quot;&gt; &lt;code&gt;CatalogFeatures&lt;/code&gt; &lt;/a&gt;. The processors, for example, will report an Exception by default when no matching entry is found since the default value of the &lt;code&gt;javax.xml.catalog.resolve&lt;/code&gt; property is strict.</target>
        </trans-unit>
        <trans-unit id="a2d24c7890bba0f3964cbaede11464e0250281a1" translate="yes" xml:space="preserve">
          <source>The JAXP validation API decouples the validation of an instance document from the parsing of an XML document. This is advantageous for several reasons, some of which are:</source>
          <target state="translated">JAXP検証APIは、インスタンス文書の検証とXML文書の解析を切り離します。これはいくつかの理由で有利です。</target>
        </trans-unit>
        <trans-unit id="c6740abff5341aaea3d3add9108309db47269f46" translate="yes" xml:space="preserve">
          <source>The JDBC 1.0 API</source>
          <target state="translated">JDBC 1.0 API</target>
        </trans-unit>
        <trans-unit id="2ef0b1e1237f551a4a27a689e562cb12d6000ad9" translate="yes" xml:space="preserve">
          <source>The JDBC 1.2 API</source>
          <target state="translated">JDBC 1.2 API</target>
        </trans-unit>
        <trans-unit id="58d78690167f9669f3dd44eef343f4abed230945" translate="yes" xml:space="preserve">
          <source>The JDBC 2.0 Optional Package API</source>
          <target state="translated">JDBC 2.0 オプションパッケージAPI</target>
        </trans-unit>
        <trans-unit id="2210ba25b69c2db4ed032d072c7ec3aa1505d86c" translate="yes" xml:space="preserve">
          <source>The JDBC 2.1 core API</source>
          <target state="translated">JDBC 2.1 のコア API</target>
        </trans-unit>
        <trans-unit id="ea17f896a65d406c1673560b63457b11cfbedc0c" translate="yes" xml:space="preserve">
          <source>The JDBC 3.0 API</source>
          <target state="translated">JDBC 3.0 API</target>
        </trans-unit>
        <trans-unit id="59a75209b42a7de6d5159a3ca206067460cfc599" translate="yes" xml:space="preserve">
          <source>The JDBC 3.0 specification added the maxStatements &lt;code&gt;ConnectionPooledDataSource&lt;/code&gt; property to provide a standard mechanism for enabling the pooling of &lt;code&gt;PreparedStatements&lt;/code&gt; and to specify the size of the statement pool. However, there was no way for a driver to notify an external statement pool when a &lt;code&gt;PreparedStatement&lt;/code&gt; becomes invalid. For some databases, a statement becomes invalid if a DDL operation is performed that affects the table. For example an application may create a temporary table to do some work on the table and then destroy it. It may later recreate the same table when it is needed again. Some databases will invalidate any prepared statements that reference the temporary table when the table is dropped.</source>
          <target state="translated">The JDBC 3.0 specification added the maxStatements &lt;code&gt;ConnectionPooledDataSource&lt;/code&gt; property to provide a standard mechanism for enabling the pooling of &lt;code&gt;PreparedStatements&lt;/code&gt; and to specify the size of the statement pool. However, there was no way for a driver to notify an external statement pool when a &lt;code&gt;PreparedStatement&lt;/code&gt; becomes invalid. For some databases, a statement becomes invalid if a DDL operation is performed that affects the table. For example an application may create a temporary table to do some work on the table and then destroy it. It may later recreate the same table when it is needed again. Some databases will invalidate any prepared statements that reference the temporary table when the table is dropped.</target>
        </trans-unit>
        <trans-unit id="b75de8c2dc71b65df97e8ecbf3ef4bedd3196b45" translate="yes" xml:space="preserve">
          <source>The JDBC 4.0 API</source>
          <target state="translated">JDBC 4.0 API</target>
        </trans-unit>
        <trans-unit id="8537833ae96efc546ce1bf57458bf13e4e00612d" translate="yes" xml:space="preserve">
          <source>The JDBC 4.1 API</source>
          <target state="translated">JDBC 4.1 API</target>
        </trans-unit>
        <trans-unit id="2522ad222d6d4fff647d1822f3c053ef1b208ea1" translate="yes" xml:space="preserve">
          <source>The JDBC 4.2 API</source>
          <target state="translated">JDBC 4.2 API</target>
        </trans-unit>
        <trans-unit id="063101cb057d027845a508bc0a2d52d1e469963b" translate="yes" xml:space="preserve">
          <source>The JDBC 4.3 API incorporates all of the previous JDBC API versions:</source>
          <target state="translated">JDBC 4.3 APIは、以前のJDBC APIのすべてのバージョンを組み込んでいます。</target>
        </trans-unit>
        <trans-unit id="908da5094f4f523619fcbfb6f3b042822f877a05" translate="yes" xml:space="preserve">
          <source>The JDBC API provides mechanisms for mapping an SQL structured type or DISTINCT type to the Java programming language. Typically, a structured type is mapped to a class, and its attributes are mapped to fields in the class. (A DISTINCT type can thought of as having one attribute.) However, there are many other possibilities, and there may be any number of different mappings.</source>
          <target state="translated">JDBC APIは、SQL構造化型またはDISTINCT型をJavaプログラミング言語にマッピングする仕組みを提供します。通常、構造化型はクラスにマッピングされ、その属性はクラス内のフィールドにマッピングされます。(DISTINCT型は1つの属性を持つと考えることができます。)しかし、他にも多くの可能性があり、いくつもの異なるマッピングが存在する可能性があります。</target>
        </trans-unit>
        <trans-unit id="1e67b3a9fa0b65d4e49f3b35324e61a95fab14b1" translate="yes" xml:space="preserve">
          <source>The JDBC API supports this SQL feature by providing the name of the SQL cursor used by a &lt;code&gt;ResultSet&lt;/code&gt; object. The current row of a &lt;code&gt;ResultSet&lt;/code&gt; object is also the current row of this SQL cursor.</source>
          <target state="translated">The JDBC API supports this SQL feature by providing the name of the SQL cursor used by a &lt;code&gt;ResultSet&lt;/code&gt; object. The current row of a &lt;code&gt;ResultSet&lt;/code&gt; object is also the current row of this SQL cursor.</target>
        </trans-unit>
        <trans-unit id="9d48b4e02a7ef8b217df6704fbc3fbef3055bb97" translate="yes" xml:space="preserve">
          <source>The JDBC driver initializes the input stream with a type map before calling this method, which is used by the appropriate &lt;code&gt;SQLInput&lt;/code&gt; reader method on the stream.</source>
          <target state="translated">The JDBC driver initializes the input stream with a type map before calling this method, which is used by the appropriate &lt;code&gt;SQLInput&lt;/code&gt; reader method on the stream.</target>
        </trans-unit>
        <trans-unit id="fcf45bd369f2e97b6bb4e9ebc9b75d647e55ac9a" translate="yes" xml:space="preserve">
          <source>The JDBC driver's static initialization block must call &lt;a href=&quot;drivermanager#registerDriver(java.sql.Driver,java.sql.DriverAction)&quot;&gt;DriverManager.registerDriver(java.sql.Driver, java.sql.DriverAction)&lt;/a&gt; in order to inform &lt;code&gt;DriverManager&lt;/code&gt; which &lt;code&gt;DriverAction&lt;/code&gt; implementation to call when the JDBC driver is de-registered.</source>
          <target state="translated">The JDBC driver's static initialization block must call &lt;a href=&quot;drivermanager#registerDriver(java.sql.Driver,java.sql.DriverAction)&quot;&gt;DriverManager.registerDriver(java.sql.Driver, java.sql.DriverAction)&lt;/a&gt; in order to inform &lt;code&gt;DriverManager&lt;/code&gt; which &lt;code&gt;DriverAction&lt;/code&gt; implementation to call when the JDBC driver is de-registered.</target>
        </trans-unit>
        <trans-unit id="90e93f4c83b64826e6a378f97cf636a358d28bb9" translate="yes" xml:space="preserve">
          <source>The JDBC specification defines a standard mapping from Java &lt;code&gt;Object&lt;/code&gt; types to SQL types. The driver will use this standard mapping to convert the given object to its corresponding SQL type before sending it to the database. If the object has a custom mapping (is of a class implementing &lt;code&gt;SQLData&lt;/code&gt;), the driver should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt; to write the object to the SQL data stream.</source>
          <target state="translated">The JDBC specification defines a standard mapping from Java &lt;code&gt;Object&lt;/code&gt; types to SQL types. The driver will use this standard mapping to convert the given object to its corresponding SQL type before sending it to the database. If the object has a custom mapping (is of a class implementing &lt;code&gt;SQLData&lt;/code&gt; ), the driver should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt; to write the object to the SQL data stream.</target>
        </trans-unit>
        <trans-unit id="ee974a8e55da2c721c226bef3a30b526c2729b4d" translate="yes" xml:space="preserve">
          <source>The JDBC specification provides a standard mapping from Java Object types to SQL types. The driver will convert the given Java object to its standard SQL mapping before sending it to the database.</source>
          <target state="translated">JDBC仕様では、Javaオブジェクトの型からSQLの型への標準的なマッピングを提供しています。ドライバは、与えられたJavaオブジェクトをデータベースに送信する前に、その標準SQLマッピングに変換します。</target>
        </trans-unit>
        <trans-unit id="3e9c491f1d268a5ac29eab9e5df11e173ed6c9d0" translate="yes" xml:space="preserve">
          <source>The JDBC specification specifies a standard mapping from Java &lt;code&gt;Object&lt;/code&gt; types to SQL types. The given argument will be converted to the corresponding SQL type before being sent to the database.</source>
          <target state="translated">The JDBC specification specifies a standard mapping from Java &lt;code&gt;Object&lt;/code&gt; types to SQL types. The given argument will be converted to the corresponding SQL type before being sent to the database.</target>
        </trans-unit>
        <trans-unit id="523fd79ec39492a793ce5d43b1d416a59b37eb0f" translate="yes" xml:space="preserve">
          <source>The JDBC technology-enabled driver registers a type map with the stream before passing the stream to the application.</source>
          <target state="translated">JDBC テクノロジー対応ドライバは、ストリームをアプリケーションに渡す前に、ストリームにタイプマップを登録します。</target>
        </trans-unit>
        <trans-unit id="4f2501807ea5543e21ac42081e7607f5eda00852" translate="yes" xml:space="preserve">
          <source>The JDBC type specified by &lt;code&gt;sqlType&lt;/code&gt; for an OUT parameter determines the Java type that must be used in the &lt;code&gt;get&lt;/code&gt; method to read the value of that parameter.</source>
          <target state="translated">The JDBC type specified by &lt;code&gt;sqlType&lt;/code&gt; for an OUT parameter determines the Java type that must be used in the &lt;code&gt;get&lt;/code&gt; method to read the value of that parameter.</target>
        </trans-unit>
        <trans-unit id="de789869d263780a3433be03e37625511f9f77e8" translate="yes" xml:space="preserve">
          <source>The JDBC&amp;trade; 4.3 API includes both the &lt;code&gt;java.sql&lt;/code&gt; package, referred to as the JDBC core API, and the &lt;code&gt;javax.sql&lt;/code&gt; package, referred to as the JDBC Optional Package API. This complete JDBC API is included in the Java&amp;trade; Standard Edition (Java SE&amp;trade;), version 7. The &lt;code&gt;javax.sql&lt;/code&gt; package extends the functionality of the JDBC API from a client-side API to a server-side API, and it is an essential part of the Java&amp;trade; Enterprise Edition (Java EE&amp;trade;) technology.</source>
          <target state="translated">The JDBC&amp;trade; 4.3 API includes both the &lt;code&gt;java.sql&lt;/code&gt; package, referred to as the JDBC core API, and the &lt;code&gt;javax.sql&lt;/code&gt; package, referred to as the JDBC Optional Package API. This complete JDBC API is included in the Java&amp;trade; Standard Edition (Java SE&amp;trade;), version 7. The &lt;code&gt;javax.sql&lt;/code&gt; package extends the functionality of the JDBC API from a client-side API to a server-side API, and it is an essential part of the Java&amp;trade; Enterprise Edition (Java EE&amp;trade;) technology.</target>
        </trans-unit>
        <trans-unit id="f969a21212467360facf86185bc85dca1542c554" translate="yes" xml:space="preserve">
          <source>The JDK 1.0 event system is supported for backwards compatibility, but its use with newer versions of the platform is discouraged. The five types of adjustment events introduced with JDK 1.1 correspond to the five event types that are associated with scroll bars in previous platform versions. The following list gives the adjustment event type, and the corresponding JDK 1.0 event type it replaces.</source>
          <target state="translated">JDK 1.0 のイベントシステムは後方互換性のためにサポートされていますが、プラットフォームの新しいバージョンでの使用は推奨されていません。JDK 1.1で導入された5種類の調整イベントは、以前のプラットフォームのバージョンでスクロールバーに関連付けられていた5つのイベントタイプに対応しています。以下のリストは、調整イベントのタイプと、それに代わる対応する JDK 1.0 のイベントタイプを示しています。</target>
        </trans-unit>
        <trans-unit id="3d1c7a729b653acd1693d52a432bb13d5ba67a48" translate="yes" xml:space="preserve">
          <source>The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;security#getProviders()&quot;&gt;&lt;code&gt;Security.getProviders()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;security#getProviders()&quot;&gt; &lt;code&gt;Security.getProviders()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ffe26effc5f2dd90c2a6cedb9ce1386ed82b03d8" translate="yes" xml:space="preserve">
          <source>The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt;&lt;a href=&quot;../../../../../../java.base/java/security/security#getProperty(java.lang.String)&quot;&gt;&lt;code&gt;Security&lt;/code&gt;&lt;/a&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;../../../../../../java.base/java/security/security#getProviders()&quot;&gt;&lt;code&gt;Security.getProviders()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt; &lt;a href=&quot;../../../../../../java.base/java/security/security#getProperty(java.lang.String)&quot;&gt; &lt;code&gt;Security&lt;/code&gt; &lt;/a&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;../../../../../../java.base/java/security/security#getProviders()&quot;&gt; &lt;code&gt;Security.getProviders()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8ac4775b3e40e73761c25007bba30e40be920bc3" translate="yes" xml:space="preserve">
          <source>The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt;&lt;a href=&quot;../../../../../java.base/java/security/security#getProperty(java.lang.String)&quot;&gt;&lt;code&gt;Security&lt;/code&gt;&lt;/a&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;../../../../../java.base/java/security/security#getProviders()&quot;&gt;&lt;code&gt;Security.getProviders()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt; &lt;a href=&quot;../../../../../java.base/java/security/security#getProperty(java.lang.String)&quot;&gt; &lt;code&gt;Security&lt;/code&gt; &lt;/a&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;../../../../../java.base/java/security/security#getProviders()&quot;&gt; &lt;code&gt;Security.getProviders()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="62bf224ef20a8c8efd79de17ded7edf373246c8e" translate="yes" xml:space="preserve">
          <source>The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt;&lt;a href=&quot;../../../../java.base/java/security/security#getProperty(java.lang.String)&quot;&gt;&lt;code&gt;Security&lt;/code&gt;&lt;/a&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;../../../../java.base/java/security/security#getProviders()&quot;&gt;&lt;code&gt;Security.getProviders()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt; &lt;a href=&quot;../../../../java.base/java/security/security#getProperty(java.lang.String)&quot;&gt; &lt;code&gt;Security&lt;/code&gt; &lt;/a&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;../../../../java.base/java/security/security#getProviders()&quot;&gt; &lt;code&gt;Security.getProviders()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="45825bff39d02867764b21ee89aae790885bd0b7" translate="yes" xml:space="preserve">
          <source>The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt;&lt;a href=&quot;../../../../java/security/security#getProperty(java.lang.String)&quot;&gt;&lt;code&gt;Security&lt;/code&gt;&lt;/a&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;../../../../java/security/security#getProviders()&quot;&gt;&lt;code&gt;Security.getProviders()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt; &lt;a href=&quot;../../../../java/security/security#getProperty(java.lang.String)&quot;&gt; &lt;code&gt;Security&lt;/code&gt; &lt;/a&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;../../../../java/security/security#getProviders()&quot;&gt; &lt;code&gt;Security.getProviders()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="803cbab520d0b89989ac7e30afebc082051ee02d" translate="yes" xml:space="preserve">
          <source>The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt;&lt;a href=&quot;../../../java.base/java/security/security#getProperty(java.lang.String)&quot;&gt;&lt;code&gt;Security&lt;/code&gt;&lt;/a&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;../../../java.base/java/security/security#getProviders()&quot;&gt;&lt;code&gt;Security.getProviders()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt; &lt;a href=&quot;../../../java.base/java/security/security#getProperty(java.lang.String)&quot;&gt; &lt;code&gt;Security&lt;/code&gt; &lt;/a&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;../../../java.base/java/security/security#getProviders()&quot;&gt; &lt;code&gt;Security.getProviders()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="1cbcd88a86bafdf6f51dcf7a0cbbb0373e437354" translate="yes" xml:space="preserve">
          <source>The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt;&lt;a href=&quot;../../../java/security/security#getProperty(java.lang.String)&quot;&gt;&lt;code&gt;Security&lt;/code&gt;&lt;/a&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;../../../java/security/security#getProviders()&quot;&gt;&lt;code&gt;Security.getProviders()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt; &lt;a href=&quot;../../../java/security/security#getProperty(java.lang.String)&quot;&gt; &lt;code&gt;Security&lt;/code&gt; &lt;/a&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;../../../java/security/security#getProviders()&quot;&gt; &lt;code&gt;Security.getProviders()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0fc06d2c193c85c4e354c96804cda6886c8cc40b" translate="yes" xml:space="preserve">
          <source>The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt;&lt;a href=&quot;../../java/security/security#getProperty(java.lang.String)&quot;&gt;&lt;code&gt;Security&lt;/code&gt;&lt;/a&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;../../java/security/security#getProviders()&quot;&gt;&lt;code&gt;Security.getProviders()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt; &lt;a href=&quot;../../java/security/security#getProperty(java.lang.String)&quot;&gt; &lt;code&gt;Security&lt;/code&gt; &lt;/a&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;../../java/security/security#getProviders()&quot;&gt; &lt;code&gt;Security.getProviders()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="fd56ba177b238763ab159cda3e93de4df961c47c" translate="yes" xml:space="preserve">
          <source>The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt;&lt;a href=&quot;../security#getProperty(java.lang.String)&quot;&gt;&lt;code&gt;Security&lt;/code&gt;&lt;/a&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;../security#getProviders()&quot;&gt;&lt;code&gt;Security.getProviders()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt; &lt;a href=&quot;../security#getProperty(java.lang.String)&quot;&gt; &lt;code&gt;Security&lt;/code&gt; &lt;/a&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;../security#getProviders()&quot;&gt; &lt;code&gt;Security.getProviders()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="e2ff4634b7d2e0418683c1f5d82da119c746f73f" translate="yes" xml:space="preserve">
          <source>The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt;&lt;a href=&quot;security#getProperty(java.lang.String)&quot;&gt;&lt;code&gt;Security&lt;/code&gt;&lt;/a&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;security#getProviders()&quot;&gt;&lt;code&gt;Security.getProviders()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The JDK Reference Implementation additionally uses the &lt;code&gt;jdk.security.provider.preferred&lt;/code&gt; &lt;a href=&quot;security#getProperty(java.lang.String)&quot;&gt; &lt;code&gt;Security&lt;/code&gt; &lt;/a&gt; property to determine the preferred provider order for the specified algorithm. This may be different than the order of providers returned by &lt;a href=&quot;security#getProviders()&quot;&gt; &lt;code&gt;Security.getProviders()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="befa33c1b2a2cde739097412d1f98fd45c743c49" translate="yes" xml:space="preserve">
          <source>The JDK SunJSSE provider implementation default for this mode is false.</source>
          <target state="translated">このモードの JDK SunJSSE プロバイダ実装のデフォルトは false です。</target>
        </trans-unit>
        <trans-unit id="8bf12e035729ecbd5e8b0cb95471b6a6dd98ddbd" translate="yes" xml:space="preserve">
          <source>The JDK SunJSSE provider implementation returns false unless &lt;a href=&quot;#setUseClientMode(boolean)&quot;&gt;&lt;code&gt;setUseClientMode(boolean)&lt;/code&gt;&lt;/a&gt; is used to change the mode to true.</source>
          <target state="translated">The JDK SunJSSE provider implementation returns false unless &lt;a href=&quot;#setUseClientMode(boolean)&quot;&gt; &lt;code&gt;setUseClientMode(boolean)&lt;/code&gt; &lt;/a&gt; is used to change the mode to true.</target>
        </trans-unit>
        <trans-unit id="358eb35c3338a7ee46a21e172820d69f3e988176" translate="yes" xml:space="preserve">
          <source>The JDK implementation of this module includes a language-independent command-line script shell, &lt;em&gt;&lt;a id=&quot;jrunscript&quot;&gt;jrunscript&lt;/a&gt;&lt;/em&gt;, that supports executing JavaScript and other languages if its corresponding script engine is installed.</source>
          <target state="translated">The JDK implementation of this module includes a language-independent command-line script shell, &lt;em&gt;&lt;a id=&quot;jrunscript&quot;&gt;jrunscript&lt;/a&gt;&lt;/em&gt;, that supports executing JavaScript and other languages if its corresponding script engine is installed.</target>
        </trans-unit>
        <trans-unit id="ca8ec67b178a4223fa65b7e67f9198c2b19d7c3c" translate="yes" xml:space="preserve">
          <source>The JDK implementation of this module includes the &lt;em&gt;&lt;a id=&quot;rmiregistry&quot;&gt;rmiregistry&lt;/a&gt;&lt;/em&gt; tool to start a remote object registry, and the &lt;em&gt;&lt;a id=&quot;rmid&quot;&gt;rmid&lt;/a&gt;&lt;/em&gt; tool to start the activation system daemon.</source>
          <target state="translated">The JDK implementation of this module includes the &lt;em&gt;&lt;a id=&quot;rmiregistry&quot;&gt;rmiregistry&lt;/a&gt;&lt;/em&gt; tool to start a remote object registry, and the &lt;em&gt;&lt;a id=&quot;rmid&quot;&gt;rmid&lt;/a&gt;&lt;/em&gt; tool to start the activation system daemon.</target>
        </trans-unit>
        <trans-unit id="a40a63ec61f8f60c0c587e2bbb0619e0bd28d621" translate="yes" xml:space="preserve">
          <source>The JDK implementation of this module provides an implementation of the &lt;a id=&quot;jrt&quot;&gt;jrt&lt;/a&gt;&lt;a href=&quot;java/nio/file/spi/filesystemprovider&quot;&gt;file system provider&lt;/a&gt; to enumerate and read the class and resource files in a run-time image. The jrt file system can be created by calling &lt;a href=&quot;java/nio/file/filesystems#newFileSystem(java.net.URI,java.util.Map)&quot;&gt;&lt;code&gt;FileSystems.newFileSystem(URI.create(&quot;jrt:/&quot;))&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The JDK implementation of this module provides an implementation of the &lt;a id=&quot;jrt&quot;&gt;jrt&lt;/a&gt;&lt;a href=&quot;java/nio/file/spi/filesystemprovider&quot;&gt;file system provider&lt;/a&gt; to enumerate and read the class and resource files in a run-time image. The jrt file system can be created by calling &lt;a href=&quot;java/nio/file/filesystems#newFileSystem(java.net.URI,java.util.Map)&quot;&gt; &lt;code&gt;FileSystems.newFileSystem(URI.create(&quot;jrt:/&quot;))&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ff828cede05c6d73aace767cbbd1fa03e209c5c1" translate="yes" xml:space="preserve">
          <source>The JDK implementation returns the cache size as set by the &lt;code&gt;setSessionCacheSize&lt;/code&gt; method, or if not set, the value of the system property. If neither is set, it returns a default value of 20480.</source>
          <target state="translated">The JDK implementation returns the cache size as set by the &lt;code&gt;setSessionCacheSize&lt;/code&gt; method, or if not set, the value of the system property. If neither is set, it returns a default value of 20480.</target>
        </trans-unit>
        <trans-unit id="63abf37567a69daeb1c9eb0eac9845726723f07a" translate="yes" xml:space="preserve">
          <source>The JDK implementation returns the session timeout as set by the &lt;code&gt;setSessionTimeout&lt;/code&gt; method, or if not set, a default value of 86400 seconds (24 hours).</source>
          <target state="translated">The JDK implementation returns the session timeout as set by the &lt;code&gt;setSessionTimeout&lt;/code&gt; method, or if not set, a default value of 86400 seconds (24 hours).</target>
        </trans-unit>
        <trans-unit id="1e8321947a5392937c7a6036d74e85eb794e0aeb" translate="yes" xml:space="preserve">
          <source>The JDK implementation supports static registration of the security providers via the &lt;code&gt;conf/security/java.security&lt;/code&gt; file in the Java installation directory. These providers are automatically installed by the JDK runtime, see &lt;a href=&quot;https://www.oracle.com/pls/topic/lookup?ctx=javase11&amp;amp;id=security_guide_jca_provider&quot;&gt;The Provider Class&lt;/a&gt; in the Java Cryptography Architecture (JCA) Reference Guide for information about how a particular type of provider, the cryptographic service provider, works and is installed.</source>
          <target state="translated">The JDK implementation supports static registration of the security providers via the &lt;code&gt;conf/security/java.security&lt;/code&gt; file in the Java installation directory. These providers are automatically installed by the JDK runtime, see &lt;a href=&quot;https://www.oracle.com/pls/topic/lookup?ctx=javase11&amp;amp;id=security_guide_jca_provider&quot;&gt;The Provider Class&lt;/a&gt; in the Java Cryptography Architecture (JCA) Reference Guide for information about how a particular type of provider, the cryptographic service provider, works and is installed.</target>
        </trans-unit>
        <trans-unit id="7977a89a83ddfc3d655c3423c1d5cef0ff1b4d9d" translate="yes" xml:space="preserve">
          <source>The JDK includes &lt;code&gt;PrintServiceLookup&lt;/code&gt; implementations that can locate the standard platform printers. To locate other types of printers, such as IPP printers or JINI printers, a print-service provider can write implementations of &lt;code&gt;PrintServiceLookup&lt;/code&gt;. The print-service provider can dynamically install these &lt;code&gt;PrintServiceLookup&lt;/code&gt; implementations using the  SPI JAR file specification.</source>
          <target state="translated">JDKには、標準プラットフォームのプリンターを見つけることができる &lt;code&gt;PrintServiceLookup&lt;/code&gt; 実装が含まれています。IPPプリンターやJINIプリンターなど、他のタイプのプリンターを見つけるために、印刷サービスプロバイダーは &lt;code&gt;PrintServiceLookup&lt;/code&gt; の実装を作成できます。印刷サービスプロバイダーは、SPI JARファイル仕様を使用して、これらの &lt;code&gt;PrintServiceLookup&lt;/code&gt; 実装を動的にインストールできます。</target>
        </trans-unit>
        <trans-unit id="95544c4457ec318de1023345ff557bed46437913" translate="yes" xml:space="preserve">
          <source>The JDK includes &lt;code&gt;PrintServiceLookup&lt;/code&gt; implementations that can locate the standard platform printers. To locate other types of printers, such as IPP printers or JINI printers, a print-service provider can write implementations of &lt;code&gt;PrintServiceLookup&lt;/code&gt;. The print-service provider can dynamically install these &lt;code&gt;PrintServiceLookup&lt;/code&gt; implementations using the &lt;a href=&quot;../../../java.base/java/util/serviceloader&quot;&gt;&lt;code&gt;ServiceLoader&lt;/code&gt;&lt;/a&gt; facility.</source>
          <target state="translated">The JDK includes &lt;code&gt;PrintServiceLookup&lt;/code&gt; implementations that can locate the standard platform printers. To locate other types of printers, such as IPP printers or JINI printers, a print-service provider can write implementations of &lt;code&gt;PrintServiceLookup&lt;/code&gt; . The print-service provider can dynamically install these &lt;code&gt;PrintServiceLookup&lt;/code&gt; implementations using the &lt;a href=&quot;../../../java.base/java/util/serviceloader&quot;&gt; &lt;code&gt;ServiceLoader&lt;/code&gt; &lt;/a&gt; facility.</target>
        </trans-unit>
        <trans-unit id="c17c58306c6fb36155552fb80a036d49556c883b" translate="yes" xml:space="preserve">
          <source>The JDK(tm) 1.1 rendering model is based on a pixelization model that specifies that coordinates are infinitely thin, lying between the pixels. Drawing operations are performed using a one-pixel wide pen that fills the pixel below and to the right of the anchor point on the path. The JDK 1.1 rendering model is consistent with the capabilities of most of the existing class of platform renderers that need to resolve integer coordinates to a discrete pen that must fall completely on a specified number of pixels.</source>
          <target state="translated">JDK(tm)1.1の描画モデルは、ピクセル間に横たわる無限に細い座標を指定するピクセル化モデルに基づいています。描画操作は、パス上のアンカーポイントの下と右側のピクセルを塗りつぶす1ピクセル幅のペンを使用して行われます。JDK 1.1 のレンダリングモデルは、指定された数のピクセルに完全に収まる必要がある離散ペンに整数の座標を解決する必要がある既存のクラスのプラットフォームレンダラのほとんどの機能と一致しています。</target>
        </trans-unit>
        <trans-unit id="b4df1f98a0565fca9a29ad6073a1bc23033b2822" translate="yes" xml:space="preserve">
          <source>The JList used for representing the files is created by subclasses, but the selection is monitored in this class.</source>
          <target state="translated">ファイルの表現に使用するJListはサブクラスで作成しますが、選択はこのクラスで監視しています。</target>
        </trans-unit>
        <trans-unit id="7224bc9a099b77a16bc3be0479f9b05ff7eb1a25" translate="yes" xml:space="preserve">
          <source>The JList used for representing the files is created by subclasses, but the selection is monitored in this class. The TransferHandler installed in the JFileChooser is also installed in the file list as it is used as the actual transfer source. The list is updated on a mouse enter to reflect the current data transfer state of the file chooser.</source>
          <target state="translated">ファイルの表現に使用するJListはサブクラスで作成していますが、選択はこのクラスで監視しています。JFileChooserにインストールされているTransferHandlerは、実際の転送元として使用されるため、ファイルリストにもインストールされています。リストはマウス入力時に更新され、現在のファイルチューザのデータ転送状態を反映しています。</target>
        </trans-unit>
        <trans-unit id="adacbc5dc9ca937440df58f189dfa0a26e578715" translate="yes" xml:space="preserve">
          <source>The JMM specifically allows optimizing compilers to elide reads or writes of variables that are known to be useless. Such elided reads and writes have no effect on the happens-before relation. Regardless of this fact, the volatile &lt;code&gt;V&lt;/code&gt; will not be elided, even though its written value is indeterminate and its read value is not used.</source>
          <target state="translated">JMMを使用すると、最適化コンパイラーは、役に立たないことがわかっている変数の読み取りまたは書き込みを省略できます。このように省略された読み取りと書き込みは、発生前の関係には影響しません。この事実に関係なく、揮発性 &lt;code&gt;V&lt;/code&gt; は、書き込まれた値が不確定であり、その読み取り値が使用されていなくても、除外されません。</target>
        </trans-unit>
        <trans-unit id="245a29e6968c20703520c2a92906f5e9e0f071ea" translate="yes" xml:space="preserve">
          <source>The JMX API can also be used as part of a solution for managing systems, networks, and so on.</source>
          <target state="translated">また、JMX APIは、システムやネットワークなどを管理するためのソリューションの一部として利用することもできます。</target>
        </trans-unit>
        <trans-unit id="fcfd357aa0013a97754ba965d15a09dda3cf149c" translate="yes" xml:space="preserve">
          <source>The JMX API consists of interfaces for monitoring and management of the JVM and other components in the Java runtime.</source>
          <target state="translated">JMX APIは、Javaランタイム内のJVMやその他のコンポーネントを監視・管理するためのインタフェースで構成されています。</target>
        </trans-unit>
        <trans-unit id="44195781584f2d466ba7e2c1a615da361d712792" translate="yes" xml:space="preserve">
          <source>The JMX Remote API also defines an optional connector called &lt;b&gt;JMXMP Connector&lt;/b&gt; implementing the JMX Message Protocol (JMXMP). As it is optional, it is not part of this bundle (see note below).</source>
          <target state="translated">JMXリモートAPIは、JMXメッセージプロトコル（JMXMP）を実装する&lt;b&gt;JMXMPコネクタ&lt;/b&gt;と呼ばれるオプションのコネクタも定義します。これはオプションであるため、このバンドルの一部ではありません（下記の注を参照）。</target>
        </trans-unit>
        <trans-unit id="49ce3ebe998d499efd4c77a77394ab17b1f03636" translate="yes" xml:space="preserve">
          <source>The JMX Remote API defines a standard connector, the &lt;b&gt;RMI Connector&lt;/b&gt;, which provides remote access to an MBeanServer through RMI.</source>
          <target state="translated">JMXリモートAPIは、&lt;b&gt;RMI&lt;/b&gt;を介してMBeanServerへのリモートアクセスを提供する標準コネクタである&lt;b&gt;RMIコネクタを&lt;/b&gt;定義します。</target>
        </trans-unit>
        <trans-unit id="fd57cf73dfe60c2aa55ec8129a23ade5a302d5fa" translate="yes" xml:space="preserve">
          <source>The JMX specification also defines the notion of an &lt;em&gt;adaptor&lt;/em&gt;. An adaptor translates between requests in a protocol such as SNMP or HTML and accesses to an MBean Server. So for example an SNMP GET operation might result in a &lt;code&gt;getAttribute&lt;/code&gt; on the MBean Server.</source>
          <target state="translated">JMX仕様では、&lt;em&gt;アダプタ&lt;/em&gt;の概念も定義されています。アダプターは、SNMPやHTMLなどのプロトコルの要求間で変換を行い、MBeanサーバーにアクセスします。したがって、たとえば、SNMP GET操作は、MBeanサーバーで &lt;code&gt;getAttribute&lt;/code&gt; になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="ad7600c1b4c4869f0bb7b9d742500b17e728fe9b" translate="yes" xml:space="preserve">
          <source>The JMX specification defines the notion of &lt;b&gt;connectors&lt;/b&gt;. A connector is attached to a JMX API MBean server and makes it accessible to remote Java clients. The client end of a connector exports essentially the same interface as the MBean server, specifically the &lt;a href=&quot;../mbeanserverconnection&quot;&gt;&lt;code&gt;MBeanServerConnection&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">JMX仕様では、&lt;b&gt;コネクタ&lt;/b&gt;の概念を定義してい&lt;b&gt;ます&lt;/b&gt;。コネクタはJMX API MBeanサーバーに接続され、リモートJavaクライアントからアクセスできるようにします。コネクターのクライアント側は、基本的にMBeanサーバーと同じインターフェース、特に&lt;a href=&quot;../mbeanserverconnection&quot;&gt; &lt;code&gt;MBeanServerConnection&lt;/code&gt; &lt;/a&gt;インターフェースをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="96af366dabe06f77839ee8dbe7885151d35d2d4b" translate="yes" xml:space="preserve">
          <source>The JNDI SPI provides the means for creating JNDI service providers, through which JNDI applications access different naming and directory services.</source>
          <target state="translated">JNDI SPIは、JNDIサービスプロバイダを作成するための手段を提供し、それによってJNDIアプリケーションがさまざまなネーミングやディレクトリサービスにアクセスします。</target>
        </trans-unit>
        <trans-unit id="33732f94d8d93f615200108becd1fb08f06a0bea" translate="yes" xml:space="preserve">
          <source>The JNDI class library reads the resource files and makes the property values freely available. Thus JNDI resource files should be considered to be &quot;world readable&quot;, and sensitive information such as clear-text passwords should not be stored there.</source>
          <target state="translated">JNDI クラスライブラリはリソースファイルを読み込んで、プロパティ値を自由に利用できるようにします。したがって、JNDIのリソースファイルは &quot;世界で読める &quot;ものとみなされるべきであり、クリアテキストパスワードのような機密情報はそこに保存されるべきではありません。</target>
        </trans-unit>
        <trans-unit id="088d7c9d898f7a840b1256be8ddef986f15194cb" translate="yes" xml:space="preserve">
          <source>The JNDI framework allows for different initial context implementations to be specified at runtime. An initial context is created using an initial context factory. A program can install its own builder that creates initial context factories, thereby overriding the default policies used by the framework, by calling NamingManager.setInitialContextFactoryBuilder(). The InitialContextFactoryBuilder interface must be implemented by such a builder.</source>
          <target state="translated">JNDI フレームワークでは、実行時に異なる初期コンテキストの実装を指定することができます。初期コンテキストは初期コンテキストファクトリを使って作成されます。プログラムは、NamingManager.setInitialContextFactoryBuilder()を呼び出すことで、初期コンテキストファクトリを作成する独自のビルダをインストールし、フレームワークで使用されるデフォルトポリシーを上書きすることができます。InitialContextFactoryBuilder インターフェースは、そのようなビルダで実装されていなければなりません。</target>
        </trans-unit>
        <trans-unit id="d098149f3977423197730ce483608b5d9c5ba323" translate="yes" xml:space="preserve">
          <source>The JNDI framework allows for different initial context implementations to be specified at runtime. The initial context is created using an &lt;em&gt;initial context factory&lt;/em&gt;. An initial context factory must implement the InitialContextFactory interface, which provides a method for creating instances of initial context that implement the Context interface. In addition, the factory class must be public and must have a public constructor that accepts no arguments.</source>
          <target state="translated">JNDIフレームワークでは、さまざまな初期コンテキスト実装を実行時に指定できます。初期コンテキストは、&lt;em&gt;初期コンテキストファクトリ&lt;/em&gt;を使用して作成され&lt;em&gt;ます&lt;/em&gt;。初期コンテキストファクトリは、ContextContextを実装する初期コンテキストのインスタンスを作成するためのメソッドを提供するInitialContextFactoryインターフェースを実装する必要があります。さらに、ファクトリクラスはパブリックである必要があり、引数を受け入れないパブリックコンストラクターを持っている必要があります。</target>
        </trans-unit>
        <trans-unit id="b9064bba67a68203f58a597fa1fa3afbedec89f6" translate="yes" xml:space="preserve">
          <source>The JNDI framework allows for object implementations to be loaded in dynamically via &lt;code&gt;object factories&lt;/code&gt;.</source>
          <target state="translated">JNDIフレームワークでは、 &lt;code&gt;object factories&lt;/code&gt; を介してオブジェクト実装を動的にロードできます。</target>
        </trans-unit>
        <trans-unit id="134c5f63e690609e9c6a657638ccd21e3550dca4" translate="yes" xml:space="preserve">
          <source>The JNDI framework allows for object implementations to be loaded in dynamically via &lt;em&gt;object factories&lt;/em&gt;. For example, when looking up a printer bound in the name space, if the print service binds printer names to &lt;code&gt;Reference&lt;/code&gt;s, the printer &lt;code&gt;Reference&lt;/code&gt; could be used to create a printer object, so that the caller of lookup can directly operate on the printer object after the lookup.</source>
          <target state="translated">JNDIフレームワークでは、&lt;em&gt;オブジェクトファクトリ&lt;/em&gt;を介してオブジェクト実装を動的にロードでき&lt;em&gt;ます&lt;/em&gt;。たとえば、名前空間にバインドされているプリンターを検索するときに、印刷サービスがプリンター名を &lt;code&gt;Reference&lt;/code&gt; にバインドしている場合、プリンター &lt;code&gt;Reference&lt;/code&gt; を使用してプリンターオブジェクトを作成し、検索の呼び出し元がプリンターオブジェクトを直接操作できるようにすることができます。検索後。</target>
        </trans-unit>
        <trans-unit id="f3b7acec5238c7d2dd7fa0082fb8db71d5d2e9ed" translate="yes" xml:space="preserve">
          <source>The JNDI framework allows for object implementations to be loaded in dynamically via &lt;em&gt;object factories&lt;/em&gt;. For example, when looking up a printer bound in the name space, if the print service binds printer names to References, the printer Reference could be used to create a printer object, so that the caller of lookup can directly operate on the printer object after the lookup.</source>
          <target state="translated">JNDIフレームワークでは、&lt;em&gt;オブジェクトファクトリ&lt;/em&gt;を介してオブジェクト実装を動的にロードでき&lt;em&gt;ます&lt;/em&gt;。たとえば、名前空間にバインドされているプリンターを検索するときに、印刷サービスがプリンター名をReferencesにバインドしている場合、プリンター参照を使用してプリンターオブジェクトを作成し、ルックアップの呼び出し元がプリンターオブジェクトを直接操作できるようにすることができます。ルックアップ。</target>
        </trans-unit>
        <trans-unit id="0f159102714c8eb7af6cff7ee4872dd30ee0cf55" translate="yes" xml:space="preserve">
          <source>The JNDI framework allows for object implementations to be loaded in dynamically via &lt;em&gt;object factories&lt;/em&gt;. For example, when looking up a printer bound in the name space, if the print service binds printer names to References, the printer Reference could be used to create a printer object, so that the caller of lookup can directly operate on the printer object after the lookup. An ObjectFactory is responsible for creating objects of a specific type. JNDI uses a default policy for using and loading object factories. You can override this default policy by calling &lt;code&gt;NamingManager.setObjectFactoryBuilder()&lt;/code&gt; with an ObjectFactoryBuilder, which contains the program-defined way of creating/loading object factories. Any &lt;code&gt;ObjectFactoryBuilder&lt;/code&gt; implementation must implement this interface that for creating object factories.</source>
          <target state="translated">JNDIフレームワークでは、&lt;em&gt;オブジェクトファクトリ&lt;/em&gt;を介してオブジェクト実装を動的にロードでき&lt;em&gt;ます&lt;/em&gt;。たとえば、名前空間にバインドされているプリンターを検索するときに、印刷サービスがプリンター名をReferencesにバインドしている場合、プリンター参照を使用してプリンターオブジェクトを作成し、ルックアップの呼び出し元がプリンターオブジェクトを直接操作できるようにすることができます。ルックアップ。 ObjectFactoryは、特定のタイプのオブジェクトの作成を担当します。 JNDIは、オブジェクトファクトリの使用とロードにデフォルトのポリシーを使用します。オブジェクトファクトリを作成/ロードするプログラム定義の方法を含むObjectFactoryBuilder を使用して &lt;code&gt;NamingManager.setObjectFactoryBuilder()&lt;/code&gt; を呼び出すことにより、このデフォルトポリシーをオーバーライドできます。どれ &lt;code&gt;ObjectFactoryBuilder&lt;/code&gt; は 実装は、オブジェクトファクトリを作成するためのこのインターフェイスを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="88db5d84ce039b71278336e8b1b44b578aa0d61d" translate="yes" xml:space="preserve">
          <source>The JNDI framework allows for object implementations to be loaded in dynamically via &lt;em&gt;object factories&lt;/em&gt;. See &lt;code&gt;ObjectFactory&lt;/code&gt; for details.</source>
          <target state="translated">JNDIフレームワークでは、&lt;em&gt;オブジェクトファクトリ&lt;/em&gt;を介してオブジェクト実装を動的にロードでき&lt;em&gt;ます&lt;/em&gt;。詳細については、 &lt;code&gt;ObjectFactory&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="5669f05609b02ee4c44fdaa5adbcabc508864f50" translate="yes" xml:space="preserve">
          <source>The JNDI library will consult the provider resource file when determining the values of these properties. Properties other than these may be set in the provider resource file at the discretion of the service provider. The service provider's documentation should clearly state which properties are allowed; other properties in the file will be ignored.</source>
          <target state="translated">JNDI ライブラリは、これらのプロパティの値を決定する際に、プロバイダリソースファイルを参照します。これら以外のプロパティは、サービスプロバイダの判断でプロバイダリソースファイルに設定することができます。サービスプロバイダのドキュメントには、どのプロパティが許可されているかが明記されている必要があり、ファイル内の他のプロパティは無視されます。</target>
        </trans-unit>
        <trans-unit id="bec69931581644a1ef0084216dc02cc47be425fa" translate="yes" xml:space="preserve">
          <source>The JNDI name of the resource. For field annotations, the default is the field name. For method annotations, the default is the JavaBeans property name corresponding to the method. For class annotations, there is no default and this must be specified.</source>
          <target state="translated">リソースのJNDI名。フィールド注釈の場合、デフォルトはフィールド名です。メソッドのアノテーションの場合、デフォルトは、メソッドに対応する JavaBeans プロパティ名です。クラス注釈の場合、デフォルトはなく、これを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="edc24d0f37d47900732cfdcdc56bc8ec2f6044ca" translate="yes" xml:space="preserve">
          <source>The JPS API is designed to be used in Java profiles which do not support AWT.</source>
          <target state="translated">JPS APIは、AWTをサポートしていないJavaプロファイルで使用することを想定しています。</target>
        </trans-unit>
        <trans-unit id="363b84f0385d00914c1240423dd0f5bb6b4ee6f6" translate="yes" xml:space="preserve">
          <source>The JRE data transfer implementation interprets the parameter &quot;class&quot; of a MIME type as &lt;b&gt;a representation class&lt;/b&gt;. The representation class reflects the class of the object being transferred. In other words, the representation class is the type of object returned by &lt;a href=&quot;transferable#getTransferData(java.awt.datatransfer.DataFlavor)&quot;&gt;&lt;code&gt;Transferable.getTransferData(java.awt.datatransfer.DataFlavor)&lt;/code&gt;&lt;/a&gt;. For example, the MIME type of &lt;a href=&quot;#imageFlavor&quot;&gt;&lt;code&gt;imageFlavor&lt;/code&gt;&lt;/a&gt; is &lt;code&gt;&quot;image/x-java-image;class=java.awt.Image&quot;&lt;/code&gt;, the primary type is &lt;code&gt;image&lt;/code&gt;, the subtype is &lt;code&gt;x-java-image&lt;/code&gt;, and the representation class is &lt;code&gt;java.awt.Image&lt;/code&gt;. When &lt;code&gt;getTransferData&lt;/code&gt; is invoked with a &lt;code&gt;DataFlavor&lt;/code&gt; of &lt;code&gt;imageFlavor&lt;/code&gt;, an instance of &lt;code&gt;java.awt.Image&lt;/code&gt; is returned. It's important to note that &lt;code&gt;DataFlavor&lt;/code&gt; does no error checking against the representation class. It is up to consumers of &lt;code&gt;DataFlavor&lt;/code&gt;, such as &lt;code&gt;Transferable&lt;/code&gt;, to honor the representation class.</source>
          <target state="translated">The JRE data transfer implementation interprets the parameter &quot;class&quot; of a MIME type as &lt;b&gt;a representation class&lt;/b&gt;. The representation class reflects the class of the object being transferred. In other words, the representation class is the type of object returned by &lt;a href=&quot;transferable#getTransferData(java.awt.datatransfer.DataFlavor)&quot;&gt; &lt;code&gt;Transferable.getTransferData(java.awt.datatransfer.DataFlavor)&lt;/code&gt; &lt;/a&gt;. For example, the MIME type of &lt;a href=&quot;#imageFlavor&quot;&gt; &lt;code&gt;imageFlavor&lt;/code&gt; &lt;/a&gt; is &lt;code&gt;&quot;image/x-java-image;class=java.awt.Image&quot;&lt;/code&gt; , the primary type is &lt;code&gt;image&lt;/code&gt; , the subtype is &lt;code&gt;x-java-image&lt;/code&gt; , and the representation class is &lt;code&gt;java.awt.Image&lt;/code&gt; . When &lt;code&gt;getTransferData&lt;/code&gt; is invoked with a &lt;code&gt;DataFlavor&lt;/code&gt; of &lt;code&gt;imageFlavor&lt;/code&gt; , an instance of &lt;code&gt;java.awt.Image&lt;/code&gt; is returned. It's important to note that &lt;code&gt;DataFlavor&lt;/code&gt; does no error checking against the representation class. It is up to consumers of &lt;code&gt;DataFlavor&lt;/code&gt; , such as &lt;code&gt;Transferable&lt;/code&gt; , to honor the representation class.</target>
        </trans-unit>
        <trans-unit id="17a160f7d45e8174e9c03f104bfe115657a97de9" translate="yes" xml:space="preserve">
          <source>The JScrollPane component creates scrollbars (by default) that override this method and delegate to the viewports Scrollable view, if it has one. The Scrollable interface provides a more specialized version of this method.</source>
          <target state="translated">JScrollPane コンポーネントは、このメソッドをオーバーライドし、ビューポートの Scrollable ビューがあれば、それに委譲するスクロールバーを作成します (デフォルトでは)。Scrollable インターフェースは、このメソッドのより専門的なバージョンを提供します。</target>
        </trans-unit>
        <trans-unit id="8578472fe170c11efcaca36252367b026245c2be" translate="yes" xml:space="preserve">
          <source>The JVM bytecode format supports immediate constants of the classes &lt;a href=&quot;methodhandle&quot;&gt;&lt;code&gt;MethodHandle&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;methodtype&quot;&gt;&lt;code&gt;MethodType&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">JVMバイトコード形式は、クラス&lt;a href=&quot;methodhandle&quot;&gt; &lt;code&gt;MethodHandle&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;methodtype&quot;&gt; &lt;code&gt;MethodType&lt;/code&gt; の&lt;/a&gt;即時定数をサポートしています。</target>
        </trans-unit>
        <trans-unit id="423700bf3f40eb8f7ae2196876409f2568dcd9ca" translate="yes" xml:space="preserve">
          <source>The JVM imposes a similar requirement on &lt;code&gt;invokespecial&lt;/code&gt; instruction, that the receiver argument must match both the resolved method &lt;em&gt;and&lt;/em&gt; the current class. Again, this requirement is enforced by narrowing the type of the leading parameter to the resulting method handle. (See the Java Virtual Machine Specification, section 4.10.1.9.)</source>
          <target state="translated">JVMは、 &lt;code&gt;invokespecial&lt;/code&gt; 命令にも同様の要件を課しています。レシーバー引数は、解決されたメソッド&lt;em&gt;と&lt;/em&gt;現在のクラスの両方に一致する必要があります。繰り返しになりますが、この要件は、主要なパラメーターの型を結果のメソッドハンドルに狭めることによって適用されます。（Java仮想マシン仕様のセクション4.10.1.9を参照してください。）</target>
        </trans-unit>
        <trans-unit id="f6a937822298d3770df670d2d33f12a835018bdf" translate="yes" xml:space="preserve">
          <source>The JVM imposes on all methods and constructors of any kind an absolute limit of 255 stacked arguments. This limit can appear more restrictive in certain cases:</source>
          <target state="translated">JVMは、あらゆる種類のすべてのメソッドおよびコンストラクタに対して、スタックされた引数255個の絶対的な制限を課します。この制限は、特定のケースではより制限的に見えることがあります。</target>
        </trans-unit>
        <trans-unit id="dc6a5c598e3c5bccd4ab59217eeb5725b65103d3" translate="yes" xml:space="preserve">
          <source>The JVM represents constructors and static initializer blocks as internal methods with special names (&lt;code&gt;&quot;&amp;lt;init&amp;gt;&quot;&lt;/code&gt; and &lt;code&gt;&quot;&amp;lt;clinit&amp;gt;&quot;&lt;/code&gt;). The internal syntax of invocation instructions allows them to refer to such internal methods as if they were normal methods, but the JVM bytecode verifier rejects them. A lookup of such an internal method will produce a &lt;code&gt;NoSuchMethodException&lt;/code&gt;.</source>
          <target state="translated">JVMは、コンストラクターと静的初期化ブロックを、特別な名前（ &lt;code&gt;&quot;&amp;lt;init&amp;gt;&quot;&lt;/code&gt; および &lt;code&gt;&quot;&amp;lt;clinit&amp;gt;&quot;&lt;/code&gt; ）を持つ内部メソッドとして表します。呼び出し命令の内部構文により、通常のメソッドのように内部メソッドを参照できますが、JVMバイトコードベリファイアはそれらを拒否します。そのような内部メソッドのルックアップは &lt;code&gt;NoSuchMethodException&lt;/code&gt; を生成します。</target>
        </trans-unit>
        <trans-unit id="4bed2dbd7bc1a0a64894245adfbe5487e3761dab" translate="yes" xml:space="preserve">
          <source>The Japanese Imperial calendar system is the same as the ISO calendar system apart from the era-based year numbering. The proleptic-year is defined to be equal to the ISO proleptic-year.</source>
          <target state="translated">日本の暦制度は、時代に基づく年号を除いて、ISOの暦制度と同じです。プロレプティックイヤーはISOのプロレプティックイヤーと同じと定義されています。</target>
        </trans-unit>
        <trans-unit id="1377cea6a56d5ed563cbb1106ccb49deee8306eb" translate="yes" xml:space="preserve">
          <source>The Japanese Imperial calendar system.</source>
          <target state="translated">日本の皇室暦制度。</target>
        </trans-unit>
        <trans-unit id="7564ca9cd9ffac61a50b36479cc4d2f52a3b5c1f" translate="yes" xml:space="preserve">
          <source>The Japanese calendar system has multiple eras defined by &lt;a href=&quot;japaneseera&quot;&gt;&lt;code&gt;JapaneseEra&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">日本の暦システムには、&lt;a href=&quot;japaneseera&quot;&gt; &lt;code&gt;JapaneseEra&lt;/code&gt; &lt;/a&gt;によって定義された複数の年号があります。</target>
        </trans-unit>
        <trans-unit id="04fc513b47cf3ef30849ce129084aceb11af3867" translate="yes" xml:space="preserve">
          <source>The Japanese government defines the official name and start date of each era. Eras are consecutive and their date ranges do not overlap, so the end date of one era is always the day before the start date of the next era.</source>
          <target state="translated">日本政府は、各時代の正式名称と開始日を定めています。時代は連続しており、日付の範囲が重ならないため、ある時代の終了日は常に次の時代の開始日の前日になります。</target>
        </trans-unit>
        <trans-unit id="265e051cf5be43bb91edb907b6aaa5aa90a2b761" translate="yes" xml:space="preserve">
          <source>The Japanese month and day-of-month are the same as those in the ISO calendar system. They are not reset when the era changes. For example:</source>
          <target state="translated">日本の月と曜日は、ISOカレンダーシステムのものと同じです。これらは時代が変わってもリセットされません。例えば</target>
        </trans-unit>
        <trans-unit id="9a132e736768e81687dffdd4d971dcc6de9796ad" translate="yes" xml:space="preserve">
          <source>The Japanese proleptic year, month and day-of-month are the same as those in the ISO calendar system. They are not reset when the era changes.</source>
          <target state="translated">日本のプロレプティックの年・月・日は、ISOカレンダーシステムのものと同じです。時代が変わってもリセットされない。</target>
        </trans-unit>
        <trans-unit id="ab077295795f59b02a71b197389bd1772b628d47" translate="yes" xml:space="preserve">
          <source>The Java 2D(tm) (Java(tm) 2 platform) API supports antialiasing renderers. A pen with a width of one pixel does not need to fall completely on pixel N as opposed to pixel N+1. The pen can fall partially on both pixels. It is not necessary to choose a bias direction for a wide pen since the blending that occurs along the pen traversal edges makes the sub-pixel position of the pen visible to the user. On the other hand, when antialiasing is turned off by setting the &lt;a href=&quot;renderinghints#KEY_ANTIALIASING&quot;&gt;&lt;code&gt;KEY_ANTIALIASING&lt;/code&gt;&lt;/a&gt; hint key to the &lt;a href=&quot;renderinghints#VALUE_ANTIALIAS_OFF&quot;&gt;&lt;code&gt;VALUE_ANTIALIAS_OFF&lt;/code&gt;&lt;/a&gt; hint value, the renderer might need to apply a bias to determine which pixel to modify when the pen is straddling a pixel boundary, such as when it is drawn along an integer coordinate in device space. While the capabilities of an antialiasing renderer make it no longer necessary for the rendering model to specify a bias for the pen, it is desirable for the antialiasing and non-antialiasing renderers to perform similarly for the common cases of drawing one-pixel wide horizontal and vertical lines on the screen. To ensure that turning on antialiasing by setting the &lt;a href=&quot;renderinghints#KEY_ANTIALIASING&quot;&gt;&lt;code&gt;KEY_ANTIALIASING&lt;/code&gt;&lt;/a&gt; hint key to &lt;a href=&quot;renderinghints#VALUE_ANTIALIAS_ON&quot;&gt;&lt;code&gt;VALUE_ANTIALIAS_ON&lt;/code&gt;&lt;/a&gt; does not cause such lines to suddenly become twice as wide and half as opaque, it is desirable to have the model specify a path for such lines so that they completely cover a particular set of pixels to help increase their crispness.</source>
          <target state="translated">The Java 2D(tm) (Java(tm) 2 platform) API supports antialiasing renderers. A pen with a width of one pixel does not need to fall completely on pixel N as opposed to pixel N+1. The pen can fall partially on both pixels. It is not necessary to choose a bias direction for a wide pen since the blending that occurs along the pen traversal edges makes the sub-pixel position of the pen visible to the user. On the other hand, when antialiasing is turned off by setting the &lt;a href=&quot;renderinghints#KEY_ANTIALIASING&quot;&gt; &lt;code&gt;KEY_ANTIALIASING&lt;/code&gt; &lt;/a&gt; hint key to the &lt;a href=&quot;renderinghints#VALUE_ANTIALIAS_OFF&quot;&gt; &lt;code&gt;VALUE_ANTIALIAS_OFF&lt;/code&gt; &lt;/a&gt; hint value, the renderer might need to apply a bias to determine which pixel to modify when the pen is straddling a pixel boundary, such as when it is drawn along an integer coordinate in device space. While the capabilities of an antialiasing renderer make it no longer necessary for the rendering model to specify a bias for the pen, it is desirable for the antialiasing and non-antialiasing renderers to perform similarly for the common cases of drawing one-pixel wide horizontal and vertical lines on the screen. To ensure that turning on antialiasing by setting the &lt;a href=&quot;renderinghints#KEY_ANTIALIASING&quot;&gt; &lt;code&gt;KEY_ANTIALIASING&lt;/code&gt; &lt;/a&gt; hint key to &lt;a href=&quot;renderinghints#VALUE_ANTIALIAS_ON&quot;&gt; &lt;code&gt;VALUE_ANTIALIAS_ON&lt;/code&gt; &lt;/a&gt; does not cause such lines to suddenly become twice as wide and half as opaque, it is desirable to have the model specify a path for such lines so that they completely cover a particular set of pixels to help increase their crispness.</target>
        </trans-unit>
        <trans-unit id="0fbc55fe3353d168165d01c77ce52a7169349fae" translate="yes" xml:space="preserve">
          <source>The Java AWT Native Interface (JAWT)</source>
          <target state="translated">Java AWT ネイティブインターフェース (JAWT)</target>
        </trans-unit>
        <trans-unit id="3db037c857875b9fa1012171be8083c44281dea6" translate="yes" xml:space="preserve">
          <source>The Java Accessibility API package consists of 8 Java programming language interfaces, and 6 Java programming language classes. These are described below.</source>
          <target state="translated">Java Accessibility APIパッケージは、8つのJavaプログラミング言語インタフェースと6つのJavaプログラミング言語クラスで構成されています。これらを以下に説明します。</target>
        </trans-unit>
        <trans-unit id="c7cd6bf18e5d512749050266dad5e8ad183ff281" translate="yes" xml:space="preserve">
          <source>The Java Development Kit (JDK) APIs are specific to the JDK and will not necessarily be available in all implementations of the Java SE Platform. These APIs are in modules whose names start with &lt;code&gt;jdk&lt;/code&gt;.</source>
          <target state="translated">The Java Development Kit (JDK) APIs are specific to the JDK and will not necessarily be available in all implementations of the Java SE Platform. These APIs are in modules whose names start with &lt;code&gt;jdk&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="61602e7596e12b632597fd4f988db4b318fd0d87" translate="yes" xml:space="preserve">
          <source>The Java Language Specification</source>
          <target state="translated">Java言語仕様書</target>
        </trans-unit>
        <trans-unit id="bbe92060513e13f1787c56819355245bef3c94ab" translate="yes" xml:space="preserve">
          <source>The Java Look and Feel, otherwise known as Metal.</source>
          <target state="translated">Javaのルックアンドフィール、別名メタルと呼ばれています。</target>
        </trans-unit>
        <trans-unit id="05622f717f9f313a62126060521423008c4d1058" translate="yes" xml:space="preserve">
          <source>The Java Management Extensions (JMX&amp;trade;) API is a standard API for management and monitoring. Typical uses include:</source>
          <target state="translated">The Java Management Extensions (JMX&amp;trade;) API is a standard API for management and monitoring. Typical uses include:</target>
        </trans-unit>
        <trans-unit id="37d13fecff6728378da832d10b9051c944390c97" translate="yes" xml:space="preserve">
          <source>The Java Management Extensions (JMX&lt;sup&gt;TM&lt;/sup&gt;) API is a standard API for management and monitoring. Typical uses include:</source>
          <target state="translated">Java Management Extensions（JMX &lt;sup&gt;TM&lt;/sup&gt;）APIは、管理と監視のための標準APIです。一般的な用途は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d78753332522c3ae6721300363a5c6096e665327" translate="yes" xml:space="preserve">
          <source>The Java Platform distinguishes between two kinds of fonts: &lt;em&gt;physical&lt;/em&gt; fonts and &lt;em&gt;logical&lt;/em&gt; fonts.</source>
          <target state="translated">The Java Platform distinguishes between two kinds of fonts: &lt;em&gt;physical&lt;/em&gt; fonts and &lt;em&gt;logical&lt;/em&gt; fonts.</target>
        </trans-unit>
        <trans-unit id="8bef35235f701eb6de58ba31cfe59d2bb33aa8ff" translate="yes" xml:space="preserve">
          <source>The Java Platform provides a number of classes that perform locale-sensitive operations. For example, the &lt;code&gt;NumberFormat&lt;/code&gt; class formats numbers, currency, and percentages in a locale-sensitive manner. Classes such as &lt;code&gt;NumberFormat&lt;/code&gt; have several convenience methods for creating a default object of that type. For example, the &lt;code&gt;NumberFormat&lt;/code&gt; class provides these three convenience methods for creating a default &lt;code&gt;NumberFormat&lt;/code&gt; object:</source>
          <target state="translated">Javaプラットフォームは、ロケールに依存する操作を実行するいくつかのクラスを提供します。たとえば、 &lt;code&gt;NumberFormat&lt;/code&gt; クラスは、数値、通貨、およびパーセンテージをロケール依存の方法でフォーマットします。 &lt;code&gt;NumberFormat&lt;/code&gt; などのクラスには、そのタイプのデフォルトオブジェクトを作成するための便利なメソッドがいくつかあります。たとえば、 &lt;code&gt;NumberFormat&lt;/code&gt; クラスは、デフォルトの &lt;code&gt;NumberFormat&lt;/code&gt; オブジェクトを作成するための次の3つの便利なメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="3b60f629f49f10f4985e6a720af54abf514bac30" translate="yes" xml:space="preserve">
          <source>The Java Platform provides three specialized subclasses of &lt;code&gt;Format&lt;/code&gt;-- &lt;code&gt;DateFormat&lt;/code&gt;, &lt;code&gt;MessageFormat&lt;/code&gt;, and &lt;code&gt;NumberFormat&lt;/code&gt;--for formatting dates, messages, and numbers, respectively.</source>
          <target state="translated">Javaプラットフォームの3つの特殊なサブクラスを提供 &lt;code&gt;Format&lt;/code&gt; - &lt;code&gt;DateFormat&lt;/code&gt; の、 &lt;code&gt;MessageFormat&lt;/code&gt; の、と &lt;code&gt;NumberFormat&lt;/code&gt; 日付、メッセージ、数字をフォーマット--for、それぞれ。</target>
        </trans-unit>
        <trans-unit id="03ea0cad9aef11b637a3137ff4122043f3493aef" translate="yes" xml:space="preserve">
          <source>The Java Platform provides two subclasses of &lt;code&gt;ResourceBundle&lt;/code&gt;, &lt;code&gt;ListResourceBundle&lt;/code&gt; and &lt;code&gt;PropertyResourceBundle&lt;/code&gt;, that provide a fairly simple way to create resources. As you saw briefly in a previous example, &lt;code&gt;ListResourceBundle&lt;/code&gt; manages its resource as a list of key/value pairs. &lt;code&gt;PropertyResourceBundle&lt;/code&gt; uses a properties file to manage its resources.</source>
          <target state="translated">Javaプラットフォームは、の2つのサブクラスを提供 &lt;code&gt;ResourceBundle&lt;/code&gt; 、 &lt;code&gt;ListResourceBundle&lt;/code&gt; および &lt;code&gt;PropertyResourceBundle&lt;/code&gt; のリソースを作成するかなり簡単な方法を提供し、。前の例で簡単に見たように、 &lt;code&gt;ListResourceBundle&lt;/code&gt; はそのリソースをキーと値のペアのリストとして管理します。 &lt;code&gt;PropertyResourceBundle&lt;/code&gt; は、プロパティファイルを使用してリソースを管理します。</target>
        </trans-unit>
        <trans-unit id="2228edce994b6e3417cf42c80f9c126b6f466b3b" translate="yes" xml:space="preserve">
          <source>The Java Platform supports input methods that have been developed in the Java programming language, using the interfaces in the &lt;a href=&quot;spi/package-summary&quot;&gt;&lt;code&gt;java.awt.im.spi&lt;/code&gt;&lt;/a&gt; package, which can be made available by adding them to the application's class path. Implementations may also support using the native input methods of the platforms they run on; however, not all platforms and locales provide input methods. Keyboard layouts are provided by the host platform.</source>
          <target state="translated">The Java Platform supports input methods that have been developed in the Java programming language, using the interfaces in the &lt;a href=&quot;spi/package-summary&quot;&gt; &lt;code&gt;java.awt.im.spi&lt;/code&gt; &lt;/a&gt; package, which can be made available by adding them to the application's class path. Implementations may also support using the native input methods of the platforms they run on; however, not all platforms and locales provide input methods. Keyboard layouts are provided by the host platform.</target>
        </trans-unit>
        <trans-unit id="563105f61580384f40b3157faa1d0806aadcdba7" translate="yes" xml:space="preserve">
          <source>The Java Platform, Standard Edition (Java SE) APIs define the core Java platform for general-purpose computing. These APIs are in modules whose names start with &lt;code&gt;java&lt;/code&gt;.</source>
          <target state="translated">The Java Platform, Standard Edition (Java SE) APIs define the core Java platform for general-purpose computing. These APIs are in modules whose names start with &lt;code&gt;java&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8f239cc990f3edd2c4e5449b541498920cb9d284" translate="yes" xml:space="preserve">
          <source>The Java Print Service API defines a group of standard attribute classes modeled upon the attributes in the Internet Printing Protocol (IPP) version 1.1. The standard attribute classes are in the subpackage &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; to keep the actual attribute classes conceptually separate from the generic apparatus defined in package &lt;code&gt;javax.print.attribute&lt;/code&gt;.</source>
          <target state="translated">The Java Print Service API defines a group of standard attribute classes modeled upon the attributes in the Internet Printing Protocol (IPP) version 1.1. The standard attribute classes are in the subpackage &lt;code&gt;javax.print.attribute.standard&lt;/code&gt; to keep the actual attribute classes conceptually separate from the generic apparatus defined in package &lt;code&gt;javax.print.attribute&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="94f66170e9f1f394a5254a9fe89af973c28cd26f" translate="yes" xml:space="preserve">
          <source>The Java Print Service API defines a group of standard attribute classes modeled upon the attributes in the Internet Printing Protocol (IPP) version 1.1. The standard attribute classes are in the subpackage javax.print.attribute.standard to keep the actual attribute classes conceptually separate from the generic apparatus defined in package javax.print.attribute.</source>
          <target state="translated">Java Print Service APIは,インターネット印刷プロトコル(IPP)バージョン1.1の属性をモデルにした標準属性クラス群を定義している。標準属性クラスは,実際の属性クラスをパッケージjavax.print.attributeで定義されている一般的な装置から概念的に分離しておくために,サブパッケージjavax.print.attribute.standardにあります。</target>
        </trans-unit>
        <trans-unit id="a818f0937d6870054c9657fd1853dbbf7260285b" translate="yes" xml:space="preserve">
          <source>The Java Print Service API defines these different kinds of attributes with five subinterfaces of &lt;code&gt;Attribute&lt;/code&gt;:</source>
          <target state="translated">Java Print Service APIは、 &lt;code&gt;Attribute&lt;/code&gt; の 5つのサブインターフェースを使用して、これらの異なる種類の属性を定義します。</target>
        </trans-unit>
        <trans-unit id="4a4823caa7194efcb9ec79cc33455ea92b11d4af" translate="yes" xml:space="preserve">
          <source>The Java Print Service API does not define any mandatorily supported &lt;code&gt;DocFlavors&lt;/code&gt;. However, here are some examples of MIME types that a Java Print Service instance might support for client formatted print data. Nested classes inside class &lt;code&gt;DocFlavor&lt;/code&gt; declare predefined static constant &lt;code&gt;DocFlavor&lt;/code&gt; objects for these example doc flavors; class &lt;code&gt;DocFlavor&lt;/code&gt;'s constructor can be used to create an arbitrary doc flavor.</source>
          <target state="translated">The Java Print Service API does not define any mandatorily supported &lt;code&gt;DocFlavors&lt;/code&gt; . However, here are some examples of MIME types that a Java Print Service instance might support for client formatted print data. Nested classes inside class &lt;code&gt;DocFlavor&lt;/code&gt; declare predefined static constant &lt;code&gt;DocFlavor&lt;/code&gt; objects for these example doc flavors; class &lt;code&gt;DocFlavor&lt;/code&gt; 's constructor can be used to create an arbitrary doc flavor.</target>
        </trans-unit>
        <trans-unit id="fe3bd743981c387b2400e5d9b97f685293d95022" translate="yes" xml:space="preserve">
          <source>The Java Print Service API does not define any mandatorily supported DocFlavors. However, here are some examples of MIME types that a Java Print Service instance might support for client formatted print data. Nested classes inside class DocFlavor declare predefined static constant DocFlavor objects for these example doc flavors; class DocFlavor's constructor can be used to create an arbitrary doc flavor.</source>
          <target state="translated">Java Print Service APIは、強制的にサポートされるDocFlavorsを定義していない。しかし、Java Print Serviceインスタンスがクライアントフォーマットされた印刷データに対してサポートする可能性のあるMIMEタイプの例を以下に示す。クラスDocFlavor内のネストされたクラスは、これらの例のdocフレーバーに対して、定義済みの静的定数DocFlavorオブジェクトを宣言している。</target>
        </trans-unit>
        <trans-unit id="65c3c2c1fe707b0a8b3bdeea8d3461a62fcf7c49" translate="yes" xml:space="preserve">
          <source>The Java Print Service API is designed so that vendors can:</source>
          <target state="translated">Java Print Service APIは、ベンダーができるように設計されています。</target>
        </trans-unit>
        <trans-unit id="3f34c755601f30797b5c5b7d5b48474498065dd9" translate="yes" xml:space="preserve">
          <source>The Java Print Service API provides four specializations of an attribute set that are restricted to contain just one of the four kinds of attributes, as discussed in the &lt;a href=&quot;#role&quot;&gt;Attribute Roles&lt;/a&gt; section:</source>
          <target state="translated">Java Print Service APIは、&lt;a href=&quot;#role&quot;&gt;属性の役割の&lt;/a&gt;セクションで説明したように、4種類の属性の1つだけを含むように制限された属性セットの4つの特殊化を提供します。</target>
        </trans-unit>
        <trans-unit id="5e75e4ce71063f5deab60042bab1ecda724688fe" translate="yes" xml:space="preserve">
          <source>The Java SE 11 Platform uses character information from version 10.0 of the Unicode Standard, with an extension. The Java SE 11 Platform allows an implementation of class &lt;code&gt;Character&lt;/code&gt; to use the Japanese Era code point, &lt;code&gt;U+32FF&lt;/code&gt;, from the first version of the Unicode Standard after 10.0 that assigns the code point. Consequently, the behavior of fields and methods of class &lt;code&gt;Character&lt;/code&gt; may vary across implementations of the Java SE 11 Platform when processing the aforementioned code point ( outside of version 10.0 ), except for the following methods that define Java identifiers: &lt;a href=&quot;#isJavaIdentifierStart(int)&quot;&gt;&lt;code&gt;isJavaIdentifierStart(int)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#isJavaIdentifierStart(char)&quot;&gt;&lt;code&gt;isJavaIdentifierStart(char)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#isJavaIdentifierPart(int)&quot;&gt;&lt;code&gt;isJavaIdentifierPart(int)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#isJavaIdentifierPart(char)&quot;&gt;&lt;code&gt;isJavaIdentifierPart(char)&lt;/code&gt;&lt;/a&gt;. Code points in Java identifiers must be drawn from version 10.0 of the Unicode Standard.</source>
          <target state="translated">The Java SE 11 Platform uses character information from version 10.0 of the Unicode Standard, with an extension. The Java SE 11 Platform allows an implementation of class &lt;code&gt;Character&lt;/code&gt; to use the Japanese Era code point, &lt;code&gt;U+32FF&lt;/code&gt; , from the first version of the Unicode Standard after 10.0 that assigns the code point. Consequently, the behavior of fields and methods of class &lt;code&gt;Character&lt;/code&gt; may vary across implementations of the Java SE 11 Platform when processing the aforementioned code point ( outside of version 10.0 ), except for the following methods that define Java identifiers: &lt;a href=&quot;#isJavaIdentifierStart(int)&quot;&gt; &lt;code&gt;isJavaIdentifierStart(int)&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#isJavaIdentifierStart(char)&quot;&gt; &lt;code&gt;isJavaIdentifierStart(char)&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#isJavaIdentifierPart(int)&quot;&gt; &lt;code&gt;isJavaIdentifierPart(int)&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;#isJavaIdentifierPart(char)&quot;&gt; &lt;code&gt;isJavaIdentifierPart(char)&lt;/code&gt; &lt;/a&gt;. Code points in Java identifiers must be drawn from version 10.0 of the Unicode Standard.</target>
        </trans-unit>
        <trans-unit id="afb3e24894a90acb5b20ffe967cda4ac6a0179f2" translate="yes" xml:space="preserve">
          <source>The Java SE Platform supports all eras defined by the Japanese government, beginning with the Meiji era. Each era is identified in the Platform by an integer value and a name. The &lt;a href=&quot;#of(int)&quot;&gt;&lt;code&gt;of(int)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#valueOf(java.lang.String)&quot;&gt;&lt;code&gt;valueOf(String)&lt;/code&gt;&lt;/a&gt; methods may be used to obtain a singleton instance of JapaneseEra for each era. The &lt;a href=&quot;#values()&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; method returns the singleton instances of all supported eras.</source>
          <target state="translated">The Java SE Platform supports all eras defined by the Japanese government, beginning with the Meiji era. Each era is identified in the Platform by an integer value and a name. The &lt;a href=&quot;#of(int)&quot;&gt; &lt;code&gt;of(int)&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;#valueOf(java.lang.String)&quot;&gt; &lt;code&gt;valueOf(String)&lt;/code&gt; &lt;/a&gt; methods may be used to obtain a singleton instance of JapaneseEra for each era. The &lt;a href=&quot;#values()&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt; method returns the singleton instances of all supported eras.</target>
        </trans-unit>
        <trans-unit id="020b92794f4c93bc0ed4d9763a4e104a73b9e2f4" translate="yes" xml:space="preserve">
          <source>The Java SQL framework allows for multiple database drivers.</source>
          <target state="translated">Java SQLフレームワークでは、複数のデータベースドライバを使用することができます。</target>
        </trans-unit>
        <trans-unit id="4cea0620c1bef0b99a18c809ce3bab655ecb274b" translate="yes" xml:space="preserve">
          <source>The Java Sound Tutorial</source>
          <target state="translated">Javaサウンドチュートリアル</target>
        </trans-unit>
        <trans-unit id="c2715c77dd34c70665dfad2f1923e173e786e209" translate="yes" xml:space="preserve">
          <source>The Java Time-Scale divides each calendar day into exactly 86400 subdivisions, known as seconds. These seconds may differ from the SI second. It closely matches the de facto international civil time scale, the definition of which changes from time to time.</source>
          <target state="translated">Javaタイムスケールは、各暦日を秒と呼ばれる86400の細分化に分割しています。これらの秒は、SI秒とは異なる場合があります。これは、事実上の国際的な市民時間スケールと密接に一致しており、その定義は時々刻々と変化します。</target>
        </trans-unit>
        <trans-unit id="4bde9066215b58dffb03e10c8882b75db84e87a4" translate="yes" xml:space="preserve">
          <source>The Java Time-Scale has slightly different definitions for different segments of the time-line, each based on the consensus international time scale that is used as the basis for civil time. Whenever the internationally-agreed time scale is modified or replaced, a new segment of the Java Time-Scale must be defined for it. Each segment must meet these requirements:</source>
          <target state="translated">Java時間尺度は,時間軸の異なるセグメントに対してわずかに異なる定義を持っており,それぞれが市民時間の基礎として使用されているコンセンサス国際時間尺度に基づいている。国際的に合意された時間尺度が修正されたり置き換えられたりするたびに、Java時間尺度の新しいセグメントが定義されなければならない。各セグメントは、これらの要件を満たさなければならない。</target>
        </trans-unit>
        <trans-unit id="f78637fddaa4e53e279355beabee4458db283b36" translate="yes" xml:space="preserve">
          <source>The Java Tutorial</source>
          <target state="translated">Javaチュートリアル</target>
        </trans-unit>
        <trans-unit id="4600970ab5dcc28d471a34b69880d44724af7c9c" translate="yes" xml:space="preserve">
          <source>The Java Virtual Machine Specification</source>
          <target state="translated">Java仮想マシン仕様</target>
        </trans-unit>
        <trans-unit id="e3cf148b298a0b996efd7f97bd7f2e6174fda315" translate="yes" xml:space="preserve">
          <source>The Java Virtual Machine sets the default locale during startup based on the host environment. It is used by many locale-sensitive methods if no locale is explicitly specified.</source>
          <target state="translated">Java 仮想マシンは、ホスト環境に基づいて起動時のデフォルトロケールを設定します。これは、ロケールが明示的に指定されていない場合、多くのロケールに敏感なメソッドで使用されます。</target>
        </trans-unit>
        <trans-unit id="54550db269bf7cd9cb4b43e4d04a89f68d9ad806" translate="yes" xml:space="preserve">
          <source>The Java Virtual Machine sets the default locale during startup based on the host environment. It is used by many locale-sensitive methods if no locale is explicitly specified. It can be changed using the &lt;a href=&quot;#setDefault(java.util.Locale)&quot;&gt;&lt;code&gt;setDefault&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">The Java Virtual Machine sets the default locale during startup based on the host environment. It is used by many locale-sensitive methods if no locale is explicitly specified. It can be changed using the &lt;a href=&quot;#setDefault(java.util.Locale)&quot;&gt; &lt;code&gt;setDefault&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="d9d7a4ea102a2331058fd720ef77be5d28603b6b" translate="yes" xml:space="preserve">
          <source>The Java Virtual Machine sets the default locale during startup based on the host environment. It is used by many locale-sensitive methods if no locale is explicitly specified. It can be changed using the &lt;a href=&quot;locale#setDefault-java.util.Locale-&quot;&gt;&lt;code&gt;setDefault&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">Java仮想マシンは、ホスト環境に基づいて、起動時にデフォルトのロケールを設定します。ロケールが明示的に指定されていない場合、ロケールに依存する多くのメソッドで使用されます。&lt;a href=&quot;locale#setDefault-java.util.Locale-&quot;&gt; &lt;code&gt;setDefault&lt;/code&gt; &lt;/a&gt;メソッドを使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="935b4a63d6ee5db34b9d75a511cfdfab0947e278" translate="yes" xml:space="preserve">
          <source>The Java Virtual Machine sets the default locale during startup based on the host environment. It is used by many locale-sensitive methods if no locale is explicitly specified. It can be changed using the setDefault(Locale.Category, Locale) method.</source>
          <target state="translated">Java 仮想マシンは、ホスト環境に基づいて起動時のデフォルトロケールを設定します。これは、ロケールが明示的に指定されていない場合、多くのロケールセンシティブなメソッドで使用されます。setDefault(Locale.Category,Locale)メソッドを使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="f5d4bfdb8b77d90d9d3b5f96ac809bfa715ae313" translate="yes" xml:space="preserve">
          <source>The Java class name of composite data values this composite type represents (ie the class name returned by the &lt;a href=&quot;opentype#getClassName()&quot;&gt;&lt;code&gt;getClassName&lt;/code&gt;&lt;/a&gt; method) is set to the string value returned by &lt;code&gt;CompositeData.class.getName()&lt;/code&gt;.</source>
          <target state="translated">The Java class name of composite data values this composite type represents (ie the class name returned by the &lt;a href=&quot;opentype#getClassName()&quot;&gt; &lt;code&gt;getClassName&lt;/code&gt; &lt;/a&gt; method) is set to the string value returned by &lt;code&gt;CompositeData.class.getName()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="0bf9c7a5833d85446736a0e1c4523720b0baa70e" translate="yes" xml:space="preserve">
          <source>The Java class name of composite data values this composite type represents (ie the class name returned by the &lt;a href=&quot;opentype#getClassName--&quot;&gt;&lt;code&gt;getClassName&lt;/code&gt;&lt;/a&gt; method) is set to the string value returned by &lt;code&gt;CompositeData.class.getName()&lt;/code&gt;.</source>
          <target state="translated">この複合型が表す複合データ値のJavaクラス名（つまり、&lt;a href=&quot;opentype#getClassName--&quot;&gt; &lt;code&gt;getClassName&lt;/code&gt; &lt;/a&gt;メソッドによって返されるクラス名）は、 &lt;code&gt;CompositeData.class.getName()&lt;/code&gt; によって返される文字列値に設定されます。</target>
        </trans-unit>
        <trans-unit id="c797024101e43684f89be3466f4ed077167867bf" translate="yes" xml:space="preserve">
          <source>The Java class name of tabular data values this tabular type represents (ie the class name returned by the &lt;a href=&quot;opentype#getClassName()&quot;&gt;&lt;code&gt;getClassName&lt;/code&gt;&lt;/a&gt; method) is set to the string value returned by &lt;code&gt;TabularData.class.getName()&lt;/code&gt;.</source>
          <target state="translated">The Java class name of tabular data values this tabular type represents (ie the class name returned by the &lt;a href=&quot;opentype#getClassName()&quot;&gt; &lt;code&gt;getClassName&lt;/code&gt; &lt;/a&gt; method) is set to the string value returned by &lt;code&gt;TabularData.class.getName()&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="bda12988aff6c0c6b0da57eda918cd7f7e41f2f4" translate="yes" xml:space="preserve">
          <source>The Java class name of tabular data values this tabular type represents (ie the class name returned by the &lt;a href=&quot;opentype#getClassName--&quot;&gt;&lt;code&gt;getClassName&lt;/code&gt;&lt;/a&gt; method) is set to the string value returned by &lt;code&gt;TabularData.class.getName()&lt;/code&gt;.</source>
          <target state="translated">この表形式タイプが表す表形式データ値のJavaクラス名（つまり、&lt;a href=&quot;opentype#getClassName--&quot;&gt; &lt;code&gt;getClassName&lt;/code&gt; &lt;/a&gt;メソッドによって返されるクラス名）は、 &lt;code&gt;TabularData.class.getName()&lt;/code&gt; によって返される文字列値に設定されます。</target>
        </trans-unit>
        <trans-unit id="9c14a043362d4c6a8070d7ef91c6074e182453f3" translate="yes" xml:space="preserve">
          <source>The Java input method framework intends to support all combinations of input methods (host input methods and Java input methods) and components (peered and lightweight). However, because of limitations in the underlying platform, it may not always be possible to enable the communication between Java input methods and peered AWT components. Support for this specific combination is therefore platform dependent. In Sun's Java SE Runtime Environments, this combination is supported on Windows, but not on Solaris.</source>
          <target state="translated">Java入力メソッドフレームワークは、入力メソッド(ホスト入力メソッドとJava入力メソッド)とコンポーネント(ピアード型と軽量型)のすべての組み合わせをサポートすることを意図しています。しかし、基礎となるプラットフォームの制限のため、Java入力メソッドとピアードAWTコンポーネント間の通信を可能にすることが常に可能であるとは限らない。したがって、この特定の組み合わせのサポートは、プラットフォームに依存します。SunのJava SEランタイム環境では、この組み合わせはWindowsでサポートされていますが、Solarisではサポートされていません。</target>
        </trans-unit>
        <trans-unit id="79100a6d797f840a76dcfd0b27ebb8da026f838e" translate="yes" xml:space="preserve">
          <source>The Java interface name for a Standard MBean or MXBean, as returned by &lt;a href=&quot;../../../java.base/java/lang/class#getName()&quot;&gt;&lt;code&gt;Class.getName()&lt;/code&gt;&lt;/a&gt;. A Standard MBean or MXBean registered directly in the MBean Server or created using the &lt;a href=&quot;standardmbean&quot;&gt;&lt;code&gt;StandardMBean&lt;/code&gt;&lt;/a&gt; class will have this field in its MBeanInfo Descriptor.</source>
          <target state="translated">The Java interface name for a Standard MBean or MXBean, as returned by &lt;a href=&quot;../../../java.base/java/lang/class#getName()&quot;&gt; &lt;code&gt;Class.getName()&lt;/code&gt; &lt;/a&gt;. A Standard MBean or MXBean registered directly in the MBean Server or created using the &lt;a href=&quot;standardmbean&quot;&gt; &lt;code&gt;StandardMBean&lt;/code&gt; &lt;/a&gt; class will have this field in its MBeanInfo Descriptor.</target>
        </trans-unit>
        <trans-unit id="51863c4a757aa5599aa4ec4ebb6fdc59f85b517e" translate="yes" xml:space="preserve">
          <source>The Java interface name for a Standard MBean or MXBean, as returned by &lt;a href=&quot;../../java/lang/class#getName--&quot;&gt;&lt;code&gt;Class.getName()&lt;/code&gt;&lt;/a&gt;. A Standard MBean or MXBean registered directly in the MBean Server or created using the &lt;a href=&quot;standardmbean&quot;&gt;&lt;code&gt;StandardMBean&lt;/code&gt;&lt;/a&gt; class will have this field in its MBeanInfo Descriptor.</source>
          <target state="translated">&lt;a href=&quot;../../java/lang/class#getName--&quot;&gt; &lt;code&gt;Class.getName()&lt;/code&gt; &lt;/a&gt;によって返される、標準MBeanまたはMXBeanのJavaインターフェース名。 MBeanサーバーに直接登録された、または&lt;a href=&quot;standardmbean&quot;&gt; &lt;code&gt;StandardMBean&lt;/code&gt; &lt;/a&gt;クラスを使用して作成された標準MBeanまたはMXBean は、MBeanInfo記述子にこのフィールドを持ちます。</target>
        </trans-unit>
        <trans-unit id="b846c3f527602fad3b8086a6f7a5ad28be2a0b97" translate="yes" xml:space="preserve">
          <source>The Java language provides special support for the string concatenation operator ( + ), and for conversion of other objects to strings. For additional information on string concatenation and conversion, see</source>
          <target state="translated">Java言語は,文字列連結演算子(+)と,他のオブジェクトの文字列への変換を特別にサポートしています。文字列の連結と変換についての詳細は</target>
        </trans-unit>
        <trans-unit id="1aedb6f153f14e307ee0a63ee1143e333aca4608" translate="yes" xml:space="preserve">
          <source>The Java language provides special support for the string concatenation operator ( + ), and for conversion of other objects to strings. String concatenation is implemented through the &lt;code&gt;StringBuilder&lt;/code&gt;(or &lt;code&gt;StringBuffer&lt;/code&gt;) class and its &lt;code&gt;append&lt;/code&gt; method. String conversions are implemented through the method &lt;code&gt;toString&lt;/code&gt;, defined by &lt;code&gt;Object&lt;/code&gt; and inherited by all classes in Java. For additional information on string concatenation and conversion, see Gosling, Joy, and Steele,</source>
          <target state="translated">Java言語は、文字列連結演算子（+）、および他のオブジェクトから文字列への変換を特別にサポートしています。文字列の連結は、 &lt;code&gt;StringBuilder&lt;/code&gt; （または &lt;code&gt;StringBuffer&lt;/code&gt; ）クラスとその &lt;code&gt;append&lt;/code&gt; メソッドを介して実装されます。文字列変換は、メソッド &lt;code&gt;toString&lt;/code&gt; を介して実装され、 &lt;code&gt;Object&lt;/code&gt; によって定義され、Javaのすべてのクラスによって継承されます。文字列の連結と変換の詳細については、Gosling、Joy、およびSteeleを参照してください。</target>
        </trans-unit>
        <trans-unit id="e0998193a86cfe456d402b1f0c70a66b6cd6c11c" translate="yes" xml:space="preserve">
          <source>The Java math library is defined with respect to &lt;code&gt;fdlibm&lt;/code&gt; version 5.3. Where &lt;code&gt;fdlibm&lt;/code&gt; provides more than one definition for a function (such as &lt;code&gt;acos&lt;/code&gt;), use the &quot;IEEE 754 core function&quot; version (residing in a file whose name begins with the letter &lt;code&gt;e&lt;/code&gt;). The methods which require &lt;code&gt;fdlibm&lt;/code&gt; semantics are &lt;code&gt;sin&lt;/code&gt;, &lt;code&gt;cos&lt;/code&gt;, &lt;code&gt;tan&lt;/code&gt;, &lt;code&gt;asin&lt;/code&gt;, &lt;code&gt;acos&lt;/code&gt;, &lt;code&gt;atan&lt;/code&gt;, &lt;code&gt;exp&lt;/code&gt;, &lt;code&gt;log&lt;/code&gt;, &lt;code&gt;log10&lt;/code&gt;, &lt;code&gt;cbrt&lt;/code&gt;, &lt;code&gt;atan2&lt;/code&gt;, &lt;code&gt;pow&lt;/code&gt;, &lt;code&gt;sinh&lt;/code&gt;, &lt;code&gt;cosh&lt;/code&gt;, &lt;code&gt;tanh&lt;/code&gt;, &lt;code&gt;hypot&lt;/code&gt;, &lt;code&gt;expm1&lt;/code&gt;, and &lt;code&gt;log1p&lt;/code&gt;.</source>
          <target state="translated">Java数学ライブラリは、 &lt;code&gt;fdlibm&lt;/code&gt; バージョン5.3 に関して定義されています。どこ &lt;code&gt;fdlibm&lt;/code&gt; は（のような機能のために複数の定義を提供 &lt;code&gt;acos&lt;/code&gt; ）、（名前が文字で始まるファイルに存在する「IEEE 754コア機能」バージョンを使用 &lt;code&gt;e&lt;/code&gt; ）。必要とする方法 &lt;code&gt;fdlibm&lt;/code&gt; セマンティクスがある &lt;code&gt;sin&lt;/code&gt; 、 &lt;code&gt;cos&lt;/code&gt; 、 &lt;code&gt;tan&lt;/code&gt; 、 &lt;code&gt;asin&lt;/code&gt; 、 &lt;code&gt;acos&lt;/code&gt; 、 &lt;code&gt;atan&lt;/code&gt; 、 &lt;code&gt;exp&lt;/code&gt; 、 &lt;code&gt;log&lt;/code&gt; 、 &lt;code&gt;log10&lt;/code&gt; 、 &lt;code&gt;cbrt&lt;/code&gt; 、 &lt;code&gt;atan2&lt;/code&gt; 、 &lt;code&gt;pow&lt;/code&gt; 、 &lt;code&gt;sinh&lt;/code&gt; 、 &lt;code&gt;cosh&lt;/code&gt; 、 &lt;code&gt;tanh&lt;/code&gt; 、 &lt;code&gt;hypot&lt;/code&gt; 、 &lt;code&gt;expm1&lt;/code&gt; 、および &lt;code&gt;log1p&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="75bc96f1b0cc70e1672a7ea3f62bf4ee8f43d325" translate="yes" xml:space="preserve">
          <source>The Java programming language does not guarantee which thread will invoke the &lt;code&gt;finalize&lt;/code&gt; method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates.</source>
          <target state="translated">Javaプログラミング言語は、どのスレッドが特定のオブジェクトの &lt;code&gt;finalize&lt;/code&gt; メソッドを呼び出すかを保証しません。ただし、finalizeを呼び出すスレッドは、finalizeが呼び出されたときに、ユーザーに表示される同期ロックを保持しないことが保証されています。キャッチされない例外がfinalizeメソッドによってスローされた場合、その例外は無視され、そのオブジェクトのファイナライズは終了します。</target>
        </trans-unit>
        <trans-unit id="a17398b63cfead5fb4c823a73d9a91965bc4ebc9" translate="yes" xml:space="preserve">
          <source>The Java run-time has the following built-in class loaders:</source>
          <target state="translated">Javaランタイムには、以下の組み込みクラスローダーがあります。</target>
        </trans-unit>
        <trans-unit id="af13f60de6a564a40dc8e97ebaf3a0143c84236a" translate="yes" xml:space="preserve">
          <source>The Java time-scale is used for all date-time classes. This includes &lt;code&gt;Instant&lt;/code&gt;, &lt;code&gt;LocalDate&lt;/code&gt;, &lt;code&gt;LocalTime&lt;/code&gt;, &lt;code&gt;OffsetDateTime&lt;/code&gt;, &lt;code&gt;ZonedDateTime&lt;/code&gt; and &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">Javaタイムスケールは、すべての日時クラスに使用されます。これには、 &lt;code&gt;Instant&lt;/code&gt; 、 &lt;code&gt;LocalDate&lt;/code&gt; 、 &lt;code&gt;LocalTime&lt;/code&gt; 、 &lt;code&gt;OffsetDateTime&lt;/code&gt; 、 &lt;code&gt;ZonedDateTime&lt;/code&gt; 、 &lt;code&gt;Duration&lt;/code&gt; が含まれます。</target>
        </trans-unit>
        <trans-unit id="b2da8a881d3a54f6e4f6b884054ec854ec43a1d9" translate="yes" xml:space="preserve">
          <source>The Java type of the resource. For field annotations, the default is the type of the field. For method annotations, the default is the type of the JavaBeans property. For class annotations, there is no default and this must be specified.</source>
          <target state="translated">リソースのJava型。フィールド注釈の場合、デフォルトはフィールドのタイプです。メソッドのアノテーションの場合、デフォルトは JavaBeans プロパティの型です。クラス注釈の場合、デフォルトはなく、これを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="43d20fd86e33d070ee07b30fb6fd2637b8965aa6" translate="yes" xml:space="preserve">
          <source>The Java virtual machine</source>
          <target state="translated">Java仮想マシン</target>
        </trans-unit>
        <trans-unit id="9b5c7ce28420ae67114f39b12a0543341609a160" translate="yes" xml:space="preserve">
          <source>The Java virtual machine has a</source>
          <target state="translated">Java仮想マシンには</target>
        </trans-unit>
        <trans-unit id="8516f820bb05657121a79dd1bd0a5cddcc1f2f53" translate="yes" xml:space="preserve">
          <source>The Java virtual machine has a default provider that provides zone rules for the time-zones defined by IANA Time Zone Database (TZDB). If the system property &lt;code&gt;java.time.zone.DefaultZoneRulesProvider&lt;/code&gt; is defined then it is taken to be the fully-qualified name of a concrete ZoneRulesProvider class to be loaded as the default provider, using the system class loader. If this system property is not defined, a system-default provider will be loaded to serve as the default provider.</source>
          <target state="translated">Java仮想マシンには、IANAタイムゾーンデータベース（TZDB）によって定義されたタイムゾーンのゾーンルールを提供するデフォルトプロバイダーがあります。システムプロパティ &lt;code&gt;java.time.zone.DefaultZoneRulesProvider&lt;/code&gt; が定義されている場合は、システムクラスローダーを使用して、デフォルトプロバイダーとして読み込まれる具体的なZoneRulesProviderクラスの完全修飾名と見なされます。このシステムプロパティが定義されていない場合、システムデフォルトプロバイダーがロードされ、デフォルトプロバイダーとして機能します。</target>
        </trans-unit>
        <trans-unit id="01e66a7f2f90bc990318958109b0d41e725d670b" translate="yes" xml:space="preserve">
          <source>The Java virtual machine has a heap for object allocation and also maintains non-heap memory for the method area and the Java virtual machine execution. The Java virtual machine can have one or more memory pools. Each memory pool represents a memory area of one of the following types:</source>
          <target state="translated">Java仮想マシンは、オブジェクトの割り当てのためのヒープを持ち、また、メソッド領域とJava仮想マシンの実行のための非ヒープメモリを維持します。Java 仮想マシンは、1 つ以上のメモリプールを持つことができます。各メモリプールは、以下のいずれかのタイプのメモリ領域を表します。</target>
        </trans-unit>
        <trans-unit id="20591611464f80238a71287e9fce3d26d00ecfac" translate="yes" xml:space="preserve">
          <source>The Java virtual machine implementation may use a high resolution timer to measure the elapsed time. This method may return the same value even if the collection count has been incremented if the collection elapsed time is very short.</source>
          <target state="translated">Java仮想マシンの実装では、高解像度のタイマーを使用して経過時間を測定することがあります。このメソッドは、コレクションの経過時間が非常に短い場合、コレクションカウントがインクリメントされていても同じ値を返す場合があります。</target>
        </trans-unit>
        <trans-unit id="1b9d55292bfb865db4e6b6204b4073d1f202f8ab" translate="yes" xml:space="preserve">
          <source>The Java virtual machine maintains the peak memory usage of a memory pool since the virtual machine was started or the peak was reset. The peak memory usage is returned by the &lt;a href=&quot;#getPeakUsage()&quot;&gt;&lt;code&gt;getPeakUsage()&lt;/code&gt;&lt;/a&gt; method and reset by calling the &lt;a href=&quot;#resetPeakUsage()&quot;&gt;&lt;code&gt;resetPeakUsage()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">The Java virtual machine maintains the peak memory usage of a memory pool since the virtual machine was started or the peak was reset. The peak memory usage is returned by the &lt;a href=&quot;#getPeakUsage()&quot;&gt; &lt;code&gt;getPeakUsage()&lt;/code&gt; &lt;/a&gt; method and reset by calling the &lt;a href=&quot;#resetPeakUsage()&quot;&gt; &lt;code&gt;resetPeakUsage()&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="21c32d462e38386cb39051b42822e7568e72eaed" translate="yes" xml:space="preserve">
          <source>The Java virtual machine maintains the peak memory usage of a memory pool since the virtual machine was started or the peak was reset. The peak memory usage is returned by the &lt;a href=&quot;memorypoolmxbean#getPeakUsage--&quot;&gt;&lt;code&gt;getPeakUsage()&lt;/code&gt;&lt;/a&gt; method and reset by calling the &lt;a href=&quot;memorypoolmxbean#resetPeakUsage--&quot;&gt;&lt;code&gt;resetPeakUsage()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">Java仮想マシンは、仮想マシンが起動またはピークがリセットされてから、メモリプールのピークメモリ使用量を維持します。ピークのメモリ使用量が返される&lt;a href=&quot;memorypoolmxbean#getPeakUsage--&quot;&gt; &lt;code&gt;getPeakUsage()&lt;/code&gt; &lt;/a&gt;メソッドと呼び出すことによってリセット&lt;a href=&quot;memorypoolmxbean#resetPeakUsage--&quot;&gt; &lt;code&gt;resetPeakUsage()&lt;/code&gt; &lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="1dd3f55b5efbf2036c2fe1ec00c3c49d3ddb4916" translate="yes" xml:space="preserve">
          <source>The Java virtual machine manages memory other than the heap (referred as</source>
          <target state="translated">Java仮想マシンはヒープ以外のメモリを管理しています(</target>
        </trans-unit>
        <trans-unit id="472437aa219a5ab5c682981b0f53bbaf388053c7" translate="yes" xml:space="preserve">
          <source>The Java virtual machine may measure the time with a high resolution timer. This statistic is reset when the thread contention monitoring is reenabled.</source>
          <target state="translated">Java 仮想マシンは、高解像度タイマーで時間を測定することがあります。この統計量は、スレッド競合監視が再有効化されるとリセットされます。</target>
        </trans-unit>
        <trans-unit id="7d5cc1c9e97c8fd121944655161d88c67a4b91ea" translate="yes" xml:space="preserve">
          <source>The Java&amp;trade; Language Specification</source>
          <target state="translated">Java&amp;trade;言語仕様</target>
        </trans-unit>
        <trans-unit id="fff53af6e46bb1a4be8a5ab0a06369d5f80e1391" translate="yes" xml:space="preserve">
          <source>The Java&amp;trade; Language Specification, First Edition</source>
          <target state="translated">Java&amp;trade;言語仕様、初版</target>
        </trans-unit>
        <trans-unit id="417681d10c199b472becfb181846b8f2351a0cd7" translate="yes" xml:space="preserve">
          <source>The Java&amp;trade; Language Specification, Second Edition</source>
          <target state="translated">Java&amp;trade;言語仕様、第2版</target>
        </trans-unit>
        <trans-unit id="a4154fea8bd8d5b8ca35ca7f9f31b5ca95523b77" translate="yes" xml:space="preserve">
          <source>The Java&amp;trade; Language Specification, Third Edition</source>
          <target state="translated">Java&amp;trade;言語仕様、第3版</target>
        </trans-unit>
        <trans-unit id="b01e874645c4aa3cc169adba9f26395f941d4bfb" translate="yes" xml:space="preserve">
          <source>The Java&amp;trade; Virtual Machine Specification</source>
          <target state="translated">Java&amp;trade;仮想マシン仕様</target>
        </trans-unit>
        <trans-unit id="573f4350c0a7648c709160ed919837ba77cd9cc2" translate="yes" xml:space="preserve">
          <source>The Java(tm)2D API adopts the convention that one point is equivalent to one unit in user coordinates. When using a normalized transform for converting user space coordinates to device space coordinates 72 user space units equal 1 inch in device space. In this case one point is 1/72 of an inch.</source>
          <target state="translated">Java(tm)2D APIでは、ユーザ座標では1点が1単位に相当するという慣例を採用しています。ユーザ空間座標をデバイス空間座標に変換するために正規化変換を使用する場合、ユーザ空間の72単位はデバイス空間の1インチに相当します。この場合、1点は1インチの1/72となります。</target>
        </trans-unit>
        <trans-unit id="4cadba2d15fbb9804bf151281d2e05044e9bc484" translate="yes" xml:space="preserve">
          <source>The JavaBeans&amp;trade; specification defines the notion of design time as is a mode in which JavaBeans instances should function during their composition and customization in a interactive design, composition or construction tool, as opposed to runtime when the JavaBean is part of an applet, application, or other live Java executable abstraction.</source>
          <target state="translated">JavaBeans&amp;trade;仕様は、JavaBeansがアプレット、アプリケーションの一部である場合の実行時ではなく、対話型の設計、構成、または構築ツールでの構成およびカスタマイズ中にJavaBeansインスタンスが機能するモードである設計時の概念を定義します。または他のライブJava実行可能抽象化。</target>
        </trans-unit>
        <trans-unit id="2c47a19a69292af9f4d3ab44cef1faa2270339a1" translate="yes" xml:space="preserve">
          <source>The Javanese range with the Javanese digits.</source>
          <target state="translated">ジャワの桁数でジャワの範囲。</target>
        </trans-unit>
        <trans-unit id="7ece0bccd4f47c81fc16bd9c26fb8dacabc06bc3" translate="yes" xml:space="preserve">
          <source>The Jdbc &lt;code&gt;RowSet&lt;/code&gt; Implementations specification provides two reference implementations of the &lt;code&gt;SyncProvider&lt;/code&gt; abstract class: &lt;code&gt;RIOptimisticProvider&lt;/code&gt; and &lt;code&gt;RIXMLProvider&lt;/code&gt;. The &lt;code&gt;RIOptimisticProvider&lt;/code&gt; can set any &lt;code&gt;RowSet&lt;/code&gt; implementation with a &lt;code&gt;RowSetReader&lt;/code&gt; object and a &lt;code&gt;RowSetWriter&lt;/code&gt; object. However, only the &lt;code&gt;RIXMLProvider&lt;/code&gt; implementation can set an &lt;code&gt;XmlReader&lt;/code&gt; object and an &lt;code&gt;XmlWriter&lt;/code&gt; object. A &lt;code&gt;WebRowSet&lt;/code&gt; object uses the &lt;code&gt;XmlReader&lt;/code&gt; object to read data in XML format to populate itself with that data. It uses the &lt;code&gt;XmlWriter&lt;/code&gt; object to write itself to a stream or &lt;code&gt;java.io.Writer&lt;/code&gt; object in XML format.</source>
          <target state="translated">The Jdbc &lt;code&gt;RowSet&lt;/code&gt; Implementations specification provides two reference implementations of the &lt;code&gt;SyncProvider&lt;/code&gt; abstract class: &lt;code&gt;RIOptimisticProvider&lt;/code&gt; and &lt;code&gt;RIXMLProvider&lt;/code&gt; . The &lt;code&gt;RIOptimisticProvider&lt;/code&gt; can set any &lt;code&gt;RowSet&lt;/code&gt; implementation with a &lt;code&gt;RowSetReader&lt;/code&gt; object and a &lt;code&gt;RowSetWriter&lt;/code&gt; object. However, only the &lt;code&gt;RIXMLProvider&lt;/code&gt; implementation can set an &lt;code&gt;XmlReader&lt;/code&gt; object and an &lt;code&gt;XmlWriter&lt;/code&gt; object. A &lt;code&gt;WebRowSet&lt;/code&gt; object uses the &lt;code&gt;XmlReader&lt;/code&gt; object to read data in XML format to populate itself with that data. It uses the &lt;code&gt;XmlWriter&lt;/code&gt; object to write itself to a stream or &lt;code&gt;java.io.Writer&lt;/code&gt; object in XML format.</target>
        </trans-unit>
        <trans-unit id="46152631e4488fac6b1cad7442ef7feac4ea4d12" translate="yes" xml:space="preserve">
          <source>The JobImpressions attribute describes the size of the job. This attribute is not intended to be a counter; it is intended to be useful routing and scheduling information if known. The printer may try to compute the JobImpressions attribute's value if it is not supplied in the Print Request. Even if the client does supply a value for the JobImpressions attribute in the Print Request, the printer may choose to change the value if the printer is able to compute a value which is more accurate than the client supplied value. The printer may be able to determine the correct value for the JobImpressions attribute either right at job submission time or at any later point in time.</source>
          <target state="translated">JobImpressions属性は、ジョブのサイズを記述します。この属性はカウンタではなく、既知であれば有用なルーティングおよびスケジューリング情報となることを意図しています。印刷要求でJobImpressions属性の値が提供されていない場合、プリンタはJobImpressions属性の値を計算しようとすることがある。クライアントが印刷要求でJobImpressions属性の値を供給したとしても、プリンタは、クライアントが供給した値よりも正確な値を計算することができれば、その値を変更することを選択してもよい。プリンタは、ジョブ投入時に、またはそれ以降の任意の時点で、JobImpressions属性の正しい値を決定することができるかもしれない。</target>
        </trans-unit>
        <trans-unit id="2eda45bce719c55226f8cb11330a3730a179a164" translate="yes" xml:space="preserve">
          <source>The JobImpressionsCompleted attribute describes the progress of the job. This attribute is intended to be a counter. That is, the JobImpressionsCompleted value for a job that has not started processing must be 0. When the job's &lt;a href=&quot;jobstate&quot;&gt;&lt;code&gt;JobState&lt;/code&gt;&lt;/a&gt; is PROCESSING or PROCESSING_STOPPED, the JobImpressionsCompleted value is intended to increase as the job is processed; it indicates the amount of the job that has been processed at the time the Print Job's attribute set is queried or at the time a print job event is reported. When the job enters the COMPLETED, CANCELED, or ABORTED states, the JobImpressionsCompleted value is the final value for the job.</source>
          <target state="translated">JobImpressionsCompleted属性は、ジョブの進行状況を示します。この属性は、カウンターとなることを目的としています。つまり、処理を開始していないジョブのJobImpressionsCompleted値は0である必要があります。ジョブの&lt;a href=&quot;jobstate&quot;&gt; &lt;code&gt;JobState&lt;/code&gt; &lt;/a&gt;がPROCESSINGまたはPROCESSING_STOPPED の場合、JobImpressionsCompleted値はジョブが処理されるにつれて増加することを目的としています。これは、印刷ジョブの属性セットが照会されたとき、または印刷ジョブイベントが報告されたときに処理されたジョブの量を示します。ジョブがCOMPLETED、CANCELED、またはABORTED状態になると、JobImpressionsCompleted値がジョブの最終値になります。</target>
        </trans-unit>
        <trans-unit id="23b552cbebfc9eeb6f00f5f7f1d577e52be27c5e" translate="yes" xml:space="preserve">
          <source>The JobKOctets attribute describes the size of the job. This attribute is not intended to be a counter; it is intended to be useful routing and scheduling information if known. The printer may try to compute the JobKOctets attribute's value if it is not supplied in the Print Request. Even if the client does supply a value for the JobKOctets attribute in the Print Request, the printer may choose to change the value if the printer is able to compute a value which is more accurate than the client supplied value. The printer may be able to determine the correct value for the JobKOctets attribute either right at job submission time or at any later point in time.</source>
          <target state="translated">JobKOctets属性は、ジョブのサイズを記述します。この属性はカウンタではなく、既知であれば有用なルーティングおよびスケジューリング情報となることを意図しています。印刷要求に JobKOctets 属性の値が提供されていない場合、プリンタは JobKOctets 属性の値を計算しようとすることがあります。クライアントが印刷要求でJobKOctets属性の値を供給したとしても、プリンタは、クライアントが供給した値よりも正確な値を計算することができれば、その値を変更することを選択してもよい。プリンタは、ジョブ投入時に、またはそれ以降の任意の時点で、JobKoctets属性の正しい値を決定することができる。</target>
        </trans-unit>
        <trans-unit id="10778b515020fa74e3922d67e4e4cfb07a6b5d4d" translate="yes" xml:space="preserve">
          <source>The JobKOctets value must also not include the multiplicative factor due to a copies instruction embedded in the document data. If the document data actually includes replications of the document data, this value will include such replication. In other words, this value is always the size of the source document data, rather than a measure of the hardcopy output to be produced.</source>
          <target state="translated">また、JobKOctets値には、文書データに埋め込まれた複製命令による乗算係数を含めてはならない。文書データが実際に文書データの複製を含む場合、この値はそのような複製を含む。言い換えれば、この値は、生成されるハードコピー出力の尺度ではなく、常にソース文書データのサイズである。</target>
        </trans-unit>
        <trans-unit id="4f8e193f841acdf58db4b152692036053ed12078" translate="yes" xml:space="preserve">
          <source>The JobKOctets value must not include the multiplicative factors contributed by the number of copies specified by the &lt;a href=&quot;copies&quot;&gt;&lt;code&gt;Copies&lt;/code&gt;&lt;/a&gt; attribute, independent of whether the device can process multiple copies without making multiple passes over the job or document data and independent of whether the output is collated or not. Thus the value is independent of the implementation and indicates the size of the document(s) measured in K octets independent of the number of copies.</source>
          <target state="translated">JobKOctets値には、デバイスがジョブまたはドキュメントデータに対して複数のパスを作成せずに複数のコピーを処理できるかどうか、および出力が照合されるかどうかとは無関係に、&lt;a href=&quot;copies&quot;&gt; &lt;code&gt;Copies&lt;/code&gt; &lt;/a&gt;属性で指定されたコピー数が寄与する乗法因子を含めないでください。 。したがって、値は実装とは無関係であり、コピーの数とは無関係にKオクテットで測定されたドキュメントのサイズを示します。</target>
        </trans-unit>
        <trans-unit id="860b972389f862538b6b997fd07b4c1c60636261" translate="yes" xml:space="preserve">
          <source>The JobKOctetsProcessed attribute describes the progress of the job. This attribute is intended to be a counter. That is, the JobKOctetsProcessed value for a job that has not started processing must be 0. When the job's &lt;a href=&quot;jobstate&quot;&gt;&lt;code&gt;JobState&lt;/code&gt;&lt;/a&gt; is PROCESSING or PROCESSING_STOPPED, the JobKOctetsProcessed value is intended to increase as the job is processed; it indicates the amount of the job that has been processed at the time the Print Job's attribute set is queried or at the time a print job event is reported. When the job enters the COMPLETED, CANCELED, or ABORTED states, the JobKOctetsProcessed value is the final value for the job.</source>
          <target state="translated">JobKOctetsProcessed属性は、ジョブの進行状況を示します。この属性は、カウンターとなることを目的としています。つまり、処理を開始していないジョブのJobKOctetsProcessed値は0である必要があります。ジョブの&lt;a href=&quot;jobstate&quot;&gt; &lt;code&gt;JobState&lt;/code&gt; &lt;/a&gt;がPROCESSINGまたはPROCESSING_STOPPED の場合、JobKOctetsProcessed値はジョブが処理されるにつれて増加することを意図しています。これは、印刷ジョブの属性セットが照会されたとき、または印刷ジョブイベントが報告されたときに処理されたジョブの量を示します。ジョブがCOMPLETED、CANCELED、またはABORTED状態になると、JobKOctetsProcessed値がジョブの最終値になります。</target>
        </trans-unit>
        <trans-unit id="67c4f689dd8dce6456481d0861afa2eb83cc72f8" translate="yes" xml:space="preserve">
          <source>The JobMediaSheets attribute describes the size of the job. This attribute is not intended to be a counter; it is intended to be useful routing and scheduling information if known. The printer may try to compute the JobMediaSheets attribute's value if it is not supplied in the Print Request. Even if the client does supply a value for the JobMediaSheets attribute in the Print Request, the printer may choose to change the value if the printer is able to compute a value which is more accurate than the client supplied value. The printer may be able to determine the correct value for the JobMediaSheets attribute either right at job submission time or at any later point in time.</source>
          <target state="translated">JobMediaSheets属性は、ジョブのサイズを記述します。この属性はカウンタではなく、既知であれば有用なルーティングおよびスケジューリング情報となることを意図しています。印刷要求でJobMediaSheets属性の値が提供されない場合、プリンタはJobMediaSheets属性の値を計算しようとすることがあります。クライアントが印刷要求でJobMediaSheets属性の値を供給したとしても、プリンタは、クライアントが供給した値よりも正確な値を計算することができれば、その値を変更することを選択してもよい。プリンタは、ジョブ投入時に、またはそれ以降の任意の時点で、JobMediaSheets属性の正しい値を決定することができるかもしれない。</target>
        </trans-unit>
        <trans-unit id="27e40040d6353841f04365a16d249f070597a18a" translate="yes" xml:space="preserve">
          <source>The JobMediaSheetsCompleted attribute describes the progress of the job. This attribute is intended to be a counter. That is, the JobMediaSheetsCompleted value for a job that has not started processing must be 0. When the job's &lt;a href=&quot;jobstate&quot;&gt;&lt;code&gt;JobState&lt;/code&gt;&lt;/a&gt; is PROCESSING or PROCESSING_STOPPED, the JobMediaSheetsCompleted value is intended to increase as the job is processed; it indicates the amount of the job that has been processed at the time the Print Job's attribute set is queried or at the time a print job event is reported. When the job enters the COMPLETED, CANCELED, or ABORTED states, the JobMediaSheetsCompleted value is the final value for the job.</source>
          <target state="translated">JobMediaSheetsCompleted属性は、ジョブの進行状況を示します。この属性は、カウンターとなることを目的としています。つまり、処理を開始していないジョブのJobMediaSheetsCompleted値は0である必要があります。ジョブの&lt;a href=&quot;jobstate&quot;&gt; &lt;code&gt;JobState&lt;/code&gt; &lt;/a&gt;がPROCESSINGまたはPROCESSING_STOPPED の場合、JobMediaSheetsCompleted値は、ジョブが処理されるにつれて増加することを目的としています。これは、印刷ジョブの属性セットが照会されたとき、または印刷ジョブイベントが報告されたときに処理されたジョブの量を示します。ジョブがCOMPLETED、CANCELED、またはABORTED状態になると、JobMediaSheetsCompleted値がジョブの最終値になります。</target>
        </trans-unit>
        <trans-unit id="bc898aeb76a9f867124df93fc92a814fb7980188" translate="yes" xml:space="preserve">
          <source>The Julian Day is a standard way of expressing date and time commonly used in the scientific community. It is expressed as a decimal number of whole days where days start at midday. This class represents variations on Julian Days that count whole days from midnight.</source>
          <target state="translated">ユリウス日は、科学界で一般的に使用されている日付と時間の標準的な表現方法です。これは、日が真昼から始まる全日の十進数で表されます。このクラスは、真夜中からの全日を数えるユリウス日のバリエーションを表しています。</target>
        </trans-unit>
        <trans-unit id="9eef549030343348c0081e0aeeb494d2d5823916" translate="yes" xml:space="preserve">
          <source>The Kannada range with the Kannada digits.</source>
          <target state="translated">神奈田の桁数で神奈田の範囲。</target>
        </trans-unit>
        <trans-unit id="9d5cb955409a47e5080caa7c35c25ddf731fb54b" translate="yes" xml:space="preserve">
          <source>The Kayah Li range with the Kayah Li digits.</source>
          <target state="translated">カヤ・リーの桁があるカヤ・リーのレンジ。</target>
        </trans-unit>
        <trans-unit id="04de0af52612213497a4e8449d41e7beb1c261f5" translate="yes" xml:space="preserve">
          <source>The Kerberos network authentication protocol is defined in &lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;RFC 4120&lt;/a&gt;. The Java platform contains support for the client side of Kerberos via the &lt;a href=&quot;../../../../org/ietf/jgss/package-summary&quot;&gt;&lt;code&gt;org.ietf.jgss&lt;/code&gt;&lt;/a&gt; package. There might also be a login module that implements &lt;a href=&quot;../../../../../java.base/javax/security/auth/spi/loginmodule&quot;&gt;&lt;code&gt;LoginModule&lt;/code&gt;&lt;/a&gt; to authenticate Kerberos principals.</source>
          <target state="translated">The Kerberos network authentication protocol is defined in &lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;RFC 4120&lt;/a&gt;. The Java platform contains support for the client side of Kerberos via the &lt;a href=&quot;../../../../org/ietf/jgss/package-summary&quot;&gt; &lt;code&gt;org.ietf.jgss&lt;/code&gt; &lt;/a&gt; package. There might also be a login module that implements &lt;a href=&quot;../../../../../java.base/javax/security/auth/spi/loginmodule&quot;&gt; &lt;code&gt;LoginModule&lt;/code&gt; &lt;/a&gt; to authenticate Kerberos principals.</target>
        </trans-unit>
        <trans-unit id="b31c8a2b1469694c5596d8e7d24f8ca4168d3814" translate="yes" xml:space="preserve">
          <source>The Kerberos network authentication protocol is defined in &lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;RFC 4120&lt;/a&gt;. The Java platform contains support for the client side of Kerberos via the &lt;a href=&quot;/openjdk~8_web/org/ietf/jgss/package-summary&quot;&gt;&lt;code&gt;org.ietf.jgss&lt;/code&gt;&lt;/a&gt; package. There might also be a login module that implements &lt;a href=&quot;../spi/loginmodule&quot;&gt;&lt;code&gt;LoginModule&lt;/code&gt;&lt;/a&gt; to authenticate Kerberos principals.</source>
          <target state="translated">Kerberosネットワーク認証プロトコルは&lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;RFC 4120で&lt;/a&gt;定義されています。Javaプラットフォームには、&lt;a href=&quot;/openjdk~8_web/org/ietf/jgss/package-summary&quot;&gt; &lt;code&gt;org.ietf.jgss&lt;/code&gt; &lt;/a&gt;パッケージによるKerberosのクライアント側のサポートが含まれています。Kerberosプリンシパルを認証するために&lt;a href=&quot;../spi/loginmodule&quot;&gt; &lt;code&gt;LoginModule&lt;/code&gt; &lt;/a&gt;を実装するログインモジュールが存在する場合もあります。</target>
        </trans-unit>
        <trans-unit id="179c153fa31e392a5dae09bfb3ec12cf7382a77e" translate="yes" xml:space="preserve">
          <source>The Kerberos v5 mechanism (&quot;1.2.840.113554.1.2.2&quot;) will always be returned in this list when the indicated nametype is one of &lt;a href=&quot;gssname#NT_HOSTBASED_SERVICE&quot;&gt;&lt;code&gt;GSSName.NT_HOSTBASED_SERVICE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;gssname#NT_EXPORT_NAME&quot;&gt;&lt;code&gt;GSSName.NT_EXPORT_NAME&lt;/code&gt;&lt;/a&gt;, or &quot;1.2.840.113554.1.2.2.1&quot;.</source>
          <target state="translated">The Kerberos v5 mechanism (&quot;1.2.840.113554.1.2.2&quot;) will always be returned in this list when the indicated nametype is one of &lt;a href=&quot;gssname#NT_HOSTBASED_SERVICE&quot;&gt; &lt;code&gt;GSSName.NT_HOSTBASED_SERVICE&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;gssname#NT_EXPORT_NAME&quot;&gt; &lt;code&gt;GSSName.NT_EXPORT_NAME&lt;/code&gt; &lt;/a&gt;, or &quot;1.2.840.113554.1.2.2.1&quot;.</target>
        </trans-unit>
        <trans-unit id="1544cf9c5107663734ae872cc327b8154b4bc517" translate="yes" xml:space="preserve">
          <source>The Key interface is the top-level interface for all keys.</source>
          <target state="translated">キーインターフェースは、すべてのキーのトップレベルインターフェースです。</target>
        </trans-unit>
        <trans-unit id="0f7ba838a05da49357b31ae6823009d4f10f3dbe" translate="yes" xml:space="preserve">
          <source>The Key interface is the top-level interface for all keys. It defines the functionality shared by all key objects. All keys have three characteristics:</source>
          <target state="translated">キー・インターフェースは、すべてのキーのためのトップレベルのインターフェースです。これは、すべての鍵オブジェクトが共有する機能を定義します。すべての鍵には3つの特徴があります。</target>
        </trans-unit>
        <trans-unit id="cf548aaac46d4e0f0b562c298e02a26e9e223aa6" translate="yes" xml:space="preserve">
          <source>The KeyPairGenerator class is used to generate pairs of public and private keys.</source>
          <target state="translated">KeyPairGenerator クラスは、公開鍵と秘密鍵のペアを生成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="84ce39b134b25304a741de41814f7513944cfe5b" translate="yes" xml:space="preserve">
          <source>The KeyPairGenerator class is used to generate pairs of public and private keys. Key pair generators are constructed using the &lt;code&gt;getInstance&lt;/code&gt; factory methods (static methods that return instances of a given class).</source>
          <target state="translated">KeyPairGeneratorクラスは、公開鍵と秘密鍵のペアを生成するために使用されます。キーペアジェネレータは、 &lt;code&gt;getInstance&lt;/code&gt; ファクトリメソッド（特定のクラスのインスタンスを返す静的メソッド）を使用して構築されます。</target>
        </trans-unit>
        <trans-unit id="15b0ebadd884d0b51462c94b77021fc226c8b293" translate="yes" xml:space="preserve">
          <source>The KeyStore is instantiated from &lt;code&gt;provider&lt;/code&gt; if non-null. Otherwise, all installed providers are searched.</source>
          <target state="translated">KeyStoreは、nullでない場合、 &lt;code&gt;provider&lt;/code&gt; からインスタンス化されます。それ以外の場合は、インストールされているすべてのプロバイダーが検索されます。</target>
        </trans-unit>
        <trans-unit id="0e2ef01fdd78023f4e41a2332f54d31d4e897196" translate="yes" xml:space="preserve">
          <source>The KeyboardFocusManager is both a centralized location for client code to query for the focus owner and initiate focus changes, and an event dispatcher for all FocusEvents, WindowEvents related to focus, and KeyEvents.</source>
          <target state="translated">KeyboardFocusManager は、フォーカスの所有者を検索してフォーカスの変更を開始するためのクライアント コードの一元化された場所であると同時に、すべての FocusEvents、フォーカスに関連する WindowEvents、および KeyEvents のイベント ディスパッチャでもあります。</target>
        </trans-unit>
        <trans-unit id="fe9108e974a840f34cdac2d8957f8fc6f75c25d0" translate="yes" xml:space="preserve">
          <source>The KeyboardFocusManager is responsible for managing the active and focused Windows, and the current focus owner.</source>
          <target state="translated">KeyboardFocusManager は、アクティブでフォーカスされた Windows、および現在のフォーカスの所有者を管理する責任があります。</target>
        </trans-unit>
        <trans-unit id="c9b92722aba2c53f9e3ad23b73c28a03069188d3" translate="yes" xml:space="preserve">
          <source>The KeyboardFocusManager is responsible for managing the active and focused Windows, and the current focus owner. The focus owner is defined as the Component in an application that will typically receive all KeyEvents generated by the user. The focused Window is the Window that is, or contains, the focus owner. Only a Frame or a Dialog can be the active Window. The native windowing system may denote the active Window or its children with special decorations, such as a highlighted title bar. The active Window is always either the focused Window, or the first Frame or Dialog that is an owner of the focused Window.</source>
          <target state="translated">KeyboardFocusManager は、アクティブな Windows とフォーカスされた Windows、および現在のフォーカスの所有者を管理します。フォーカスオーナーは、通常、ユーザーによって生成されたすべての KeyEvents を受け取るアプリケーションのコンポーネントとして定義されます。フォーカスされたウィンドウとは、フォーカスの所有者であるウィンドウ、またはそれを含むウィンドウのことです。フレームまたはダイアログのみがアクティブウィンドウになることができます。ネイティブウィンドウシステムでは、アクティブウィンドウやその子ウィンドウを、ハイライトされたタイトルバーのような特別な装飾で表示することができます。アクティブウィンドウは、常にフォーカスされたウィンドウか、フォーカスされたウィンドウの所有者である最初のフレームまたはダイアログのいずれかです。</target>
        </trans-unit>
        <trans-unit id="dfdf028492eeb6a2c0a7e187bb51caef0fe58094" translate="yes" xml:space="preserve">
          <source>The Khmer range with the Khmer digits.</source>
          <target state="translated">クメール語の桁数でクメール語の範囲。</target>
        </trans-unit>
        <trans-unit id="ba0192d9ab92e21e9c2744dd9f7ef43296184075" translate="yes" xml:space="preserve">
          <source>The LDAPv3 protocol uses controls to send and receive additional data to affect the behavior of predefined operations. Controls can be sent along with any LDAP operation to the server. These are referred to as &lt;em&gt;request controls&lt;/em&gt;. For example, a &quot;sort&quot; control can be sent with an LDAP search operation to request that the results be returned in a particular order. Solicited and unsolicited controls can also be returned with responses from the server. Such controls are referred to as &lt;em&gt;response controls&lt;/em&gt;. For example, an LDAP server might define a special control to return change notifications.</source>
          <target state="translated">LDAPv3プロトコルは、コントロールを使用して追加のデータを送受信し、事前定義された操作の動作に影響を与えます。コントロールは、LDAP操作とともにサーバーに送信できます。これらは、&lt;em&gt;リクエストコントロール&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。たとえば、LDAP検索操作で「ソート」コントロールを送信して、特定の順序で結果を返すように要求できます。要請されたコントロールと要請されていないコントロールも、サーバーからの応答で返すことができます。このようなコントロールは、&lt;em&gt;応答コントロール&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。たとえば、LDAPサーバーは、変更通知を返す特別なコントロールを定義する場合があります。</target>
        </trans-unit>
        <trans-unit id="84b009686e42e06098b246c404691be107aa2893" translate="yes" xml:space="preserve">
          <source>The Lao range with the Lao digits.</source>
          <target state="translated">ラオスの桁数でラオスの範囲。</target>
        </trans-unit>
        <trans-unit id="3d7e088fa5dee667531590ff7a47cda4787dd6af" translate="yes" xml:space="preserve">
          <source>The Latin (European) range with the Latin (ASCII) digits.</source>
          <target state="translated">ラテン語(ASCII)の桁数を持つラテン語(ヨーロッパ)の範囲。</target>
        </trans-unit>
        <trans-unit id="e69f4a3d93cbdffcb22365dd2d768eab2d0fbb22" translate="yes" xml:space="preserve">
          <source>The Left Arrow key, a non-ASCII action key.</source>
          <target state="translated">左矢印キー、非ASCIIのアクションキーです。</target>
        </trans-unit>
        <trans-unit id="625f245af32d880495183dfc988c393be7c10c2c" translate="yes" xml:space="preserve">
          <source>The Lepcha range with the Lepcha digits.</source>
          <target state="translated">レプチャの桁数でレプチャ範囲。</target>
        </trans-unit>
        <trans-unit id="e247331a2fdfcd1f002adc01fbf899e2a1591f78" translate="yes" xml:space="preserve">
          <source>The Level class defines a set of standard logging levels that can be used to control logging output.</source>
          <target state="translated">Level クラスは、ロギング出力を制御するために使用できる標準ロギングレベルのセットを定義します。</target>
        </trans-unit>
        <trans-unit id="5e0b0c714c17843fb551c38291dba43f83549e84" translate="yes" xml:space="preserve">
          <source>The Level class defines a set of standard logging levels that can be used to control logging output. The logging Level objects are ordered and are specified by ordered integers. Enabling logging at a given level also enables logging at all higher levels.</source>
          <target state="translated">Level クラスは、ロギング出力を制御するために使用できる標準ロギングレベルのセットを定義します。ロギングLevelオブジェクトは順序付きで、順序付き整数で指定されます。与えられたレベルでロギングを有効にすると、それより高いレベルのすべてのロギングも有効になります。</target>
        </trans-unit>
        <trans-unit id="1eb102e7a522f2dead8bb60ac1334e542914f901" translate="yes" xml:space="preserve">
          <source>The Limbu range with the Limbu digits.</source>
          <target state="translated">リンブの桁数でリンブレンジ。</target>
        </trans-unit>
        <trans-unit id="23341604b8e30c5db6f5082ffe273ce643ebf866" translate="yes" xml:space="preserve">
          <source>The LineEvent.Type inner class identifies what kind of event occurred on a line.</source>
          <target state="translated">LineEvent.Type インナー・クラスは、ライン上でどのようなイベントが発生したかを識別します。</target>
        </trans-unit>
        <trans-unit id="f4515bae178db99e414cd4419e58ab70e3a4ab78" translate="yes" xml:space="preserve">
          <source>The LineEvent.Type inner class identifies what kind of event occurred on a line. Static instances are provided for the common types (OPEN, CLOSE, START, and STOP).</source>
          <target state="translated">LineEvent.Type インナー・クラスは、ライン上でどのようなイベントが発生したかを識別します。一般的なタイプ (OPEN、CLOSE、START、およびSTOP)に対してスタティック・インスタンスが提供されます。</target>
        </trans-unit>
        <trans-unit id="82041c3f3458b7321d9e6904a9a2fbd85ff5e8fb" translate="yes" xml:space="preserve">
          <source>The ListSelectionListener that's added to the JLists selection model at installUI time, and whenever the JList.selectionModel property changes.</source>
          <target state="translated">installUI時にJListsの選択モデルに追加されるListSelectionListenerで、JList.slectionModelプロパティが変更されるたびに追加されます。</target>
        </trans-unit>
        <trans-unit id="9d8a5479edc0054602772a4f3eec0b96299fb21f" translate="yes" xml:space="preserve">
          <source>The ListSelectionListener that's added to the JLists selection model at installUI time, and whenever the JList.selectionModel property changes. When the selection changes we repaint the affected rows.</source>
          <target state="translated">installUI時にJListsの選択モデルに追加されるListSelectionListenerで、JList.slectionModelプロパティが変更されるたびに追加されます。選択範囲が変更されると、影響を受けた行を再描画します。</target>
        </trans-unit>
        <trans-unit id="15a370cb868586ab99d868f607377364eaa66939" translate="yes" xml:space="preserve">
          <source>The Locale constructors have always specified that the language and the country param be two characters in length, although in practice they have accepted any length. The specification has now been relaxed to allow language codes of two to eight characters and country (region) codes of two to three characters, and in particular, three-letter language codes and three-digit region codes as specified in the IANA Language Subtag Registry. For compatibility, the implementation still does not impose a length constraint.</source>
          <target state="translated">Localeのコンストラクタでは、言語と国のパラメータの長さは常に2文字であることを指定してきましたが、実際には任意の長さを受け入れてきました。この仕様は、2文字から8文字の言語コードと2文字から3文字の国(地域)コード、特にIANA言語サブタグレジストリで指定されている3文字の言語コードと3桁の地域コードを許容するように緩和されました。互換性のために、この実装ではまだ長さの制約は課されていない。</target>
        </trans-unit>
        <trans-unit id="cb678f5a8ea6de459807c825837564cfaf1f3ed6" translate="yes" xml:space="preserve">
          <source>The LogManager defines two optional system properties that allow control over the initial configuration, as specified in the &lt;a href=&quot;#readConfiguration()&quot;&gt;&lt;code&gt;readConfiguration()&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">The LogManager defines two optional system properties that allow control over the initial configuration, as specified in the &lt;a href=&quot;#readConfiguration()&quot;&gt; &lt;code&gt;readConfiguration()&lt;/code&gt; &lt;/a&gt; method:</target>
        </trans-unit>
        <trans-unit id="3bb20e6e58795891b26d0418b98b5c49029c3c3e" translate="yes" xml:space="preserve">
          <source>The LogManager defines two optional system properties that allow control over the initial configuration:</source>
          <target state="translated">LogManager は、初期設定の制御を可能にする 2 つのオプションのシステムプロパティを定義します。</target>
        </trans-unit>
        <trans-unit id="3cca1e6f62e92b82a24f09973b67d35f6162ed74" translate="yes" xml:space="preserve">
          <source>The LogRecord class is serializable.</source>
          <target state="translated">LogRecord クラスはシリアライズ可能です。</target>
        </trans-unit>
        <trans-unit id="37b5ec8719483e5837405faf74d2042c53b0e061" translate="yes" xml:space="preserve">
          <source>The Logger factory methods call this method to register each newly created Logger.</source>
          <target state="translated">Logger factory メソッドは、このメソッドを呼び出して、新しく作成された各 Logger を登録します。</target>
        </trans-unit>
        <trans-unit id="16fa852d45e166564cfd7fb514ab7d4a6acfffbe" translate="yes" xml:space="preserve">
          <source>The Logging APIs offer both static and dynamic configuration control. Static control enables field service staff to set up a particular configuration and then re-launch the application with the new logging settings. Dynamic control allows for updates to the logging configuration within a currently running program. The APIs also allow for logging to be enabled or disabled for different functional areas of the system. For example, a field service engineer might be interested in tracing all AWT events, but might have no interest in socket events or memory management.</source>
          <target state="translated">ロギング API は、静的および動的な設定制御の両方を提供します。静的制御は、フィールドサービススタッフが特定の設定を設定し、新しいロギング設定でアプリケーションを再起動することを可能にします。動的制御では、現在実行中のプログラム内でロギング設定を更新することができます。また、APIは、システムの異なる機能領域に対してロギングを有効または無効にすることができます。例えば、フィールドサービスエンジニアはすべてのAWTイベントのトレースに興味があるかもしれませんが、ソケットイベントやメモリ管理には興味がないかもしれません。</target>
        </trans-unit>
        <trans-unit id="8d2c9dc56a0259f0e6bad38df059f2ef62f5a015" translate="yes" xml:space="preserve">
          <source>The LoginModule-specific options represent the options configured for this &lt;code&gt;LoginModule&lt;/code&gt; by an administrator or user in the login &lt;code&gt;Configuration&lt;/code&gt;. The options are defined by the &lt;code&gt;LoginModule&lt;/code&gt; itself and control the behavior within it. For example, a &lt;code&gt;LoginModule&lt;/code&gt; may define options to support debugging/testing capabilities. Options are defined using a key-value syntax, such as</source>
          <target state="translated">LoginModule固有のオプションは、ログイン &lt;code&gt;Configuration&lt;/code&gt; で管理者またはユーザーがこの &lt;code&gt;LoginModule&lt;/code&gt; 用に構成したオプションを表します。オプションは &lt;code&gt;LoginModule&lt;/code&gt; 自体によって定義され、LoginModule内の動作を制御します。たとえば、 &lt;code&gt;LoginModule&lt;/code&gt; は、デバッグ/テスト機能をサポートするオプションを定義できます。オプションは、次のようなKey-Value構文を使用して定義されます。</target>
        </trans-unit>
        <trans-unit id="873df94afa4e7ad82e48e9073fb806c35bb167b5" translate="yes" xml:space="preserve">
          <source>The MAC result is stored in &lt;code&gt;output&lt;/code&gt;, starting at &lt;code&gt;outOffset&lt;/code&gt; inclusive.</source>
          <target state="translated">MACの結果は、 &lt;code&gt;outOffset&lt;/code&gt; から始まる &lt;code&gt;output&lt;/code&gt; に格納されます。</target>
        </trans-unit>
        <trans-unit id="df379351016742258da0a9b0e11610edb7e1d510" translate="yes" xml:space="preserve">
          <source>The MBean Server can be queried for MBeans that meet a particular condition, using its &lt;a href=&quot;mbeanserver#queryNames(javax.management.ObjectName,javax.management.QueryExp)&quot;&gt;&lt;code&gt;queryNames&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;mbeanserver#queryMBeans(javax.management.ObjectName,javax.management.QueryExp)&quot;&gt;&lt;code&gt;queryMBeans&lt;/code&gt;&lt;/a&gt; method. The &lt;a href=&quot;queryexp&quot;&gt;&lt;code&gt;QueryExp&lt;/code&gt;&lt;/a&gt; parameter to the method can be any implementation of the interface &lt;code&gt;QueryExp&lt;/code&gt;, but it is usually best to obtain the &lt;code&gt;QueryExp&lt;/code&gt; value by calling the static methods in this class. This is particularly true when querying a remote MBean Server: a custom implementation of the &lt;code&gt;QueryExp&lt;/code&gt; interface might not be present in the remote MBean Server, but the methods in this class return only standard classes that are part of the JMX implementation.</source>
          <target state="translated">The MBean Server can be queried for MBeans that meet a particular condition, using its &lt;a href=&quot;mbeanserver#queryNames(javax.management.ObjectName,javax.management.QueryExp)&quot;&gt; &lt;code&gt;queryNames&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;mbeanserver#queryMBeans(javax.management.ObjectName,javax.management.QueryExp)&quot;&gt; &lt;code&gt;queryMBeans&lt;/code&gt; &lt;/a&gt; method. The &lt;a href=&quot;queryexp&quot;&gt; &lt;code&gt;QueryExp&lt;/code&gt; &lt;/a&gt; parameter to the method can be any implementation of the interface &lt;code&gt;QueryExp&lt;/code&gt; , but it is usually best to obtain the &lt;code&gt;QueryExp&lt;/code&gt; value by calling the static methods in this class. This is particularly true when querying a remote MBean Server: a custom implementation of the &lt;code&gt;QueryExp&lt;/code&gt; interface might not be present in the remote MBean Server, but the methods in this class return only standard classes that are part of the JMX implementation.</target>
        </trans-unit>
        <trans-unit id="8e20974e279464971ac54f4c492ac718451f3fb7" translate="yes" xml:space="preserve">
          <source>The MBean Server can be queried for MBeans that meet a particular condition, using its &lt;a href=&quot;mbeanserver#queryNames-javax.management.ObjectName-javax.management.QueryExp-&quot;&gt;&lt;code&gt;queryNames&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;mbeanserver#queryMBeans-javax.management.ObjectName-javax.management.QueryExp-&quot;&gt;&lt;code&gt;queryMBeans&lt;/code&gt;&lt;/a&gt; method. The &lt;a href=&quot;queryexp&quot;&gt;&lt;code&gt;QueryExp&lt;/code&gt;&lt;/a&gt; parameter to the method can be any implementation of the interface &lt;code&gt;QueryExp&lt;/code&gt;, but it is usually best to obtain the &lt;code&gt;QueryExp&lt;/code&gt; value by calling the static methods in this class. This is particularly true when querying a remote MBean Server: a custom implementation of the &lt;code&gt;QueryExp&lt;/code&gt; interface might not be present in the remote MBean Server, but the methods in this class return only standard classes that are part of the JMX implementation.</source>
          <target state="translated">MBeanサーバーは、その&lt;a href=&quot;mbeanserver#queryNames-javax.management.ObjectName-javax.management.QueryExp-&quot;&gt; &lt;code&gt;queryNames&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;mbeanserver#queryMBeans-javax.management.ObjectName-javax.management.QueryExp-&quot;&gt; &lt;code&gt;queryMBeans&lt;/code&gt; &lt;/a&gt;メソッドを使用して、特定の条件を満たすMBeanを照会できます。メソッドの&lt;a href=&quot;queryexp&quot;&gt; &lt;code&gt;QueryExp&lt;/code&gt; &lt;/a&gt;パラメータは、インターフェイス &lt;code&gt;QueryExp&lt;/code&gt; の任意の実装にすることができますが、通常は、このクラスの静的メソッドを呼び出して &lt;code&gt;QueryExp&lt;/code&gt; 値を取得するのが最善です。これは、リモートMBeanサーバーをクエリする場合に特に当てはまります &lt;code&gt;QueryExp&lt;/code&gt; インターフェースのカスタム実装がリモートMBeanサーバーに存在しない場合がありますが、このクラスのメソッドは、JMX実装の一部である標準クラスのみを返します。</target>
        </trans-unit>
        <trans-unit id="9b55c952d8b9667a8cd83b230d433a9d1d3bc37d" translate="yes" xml:space="preserve">
          <source>The MBean Server used is the one returned by &lt;a href=&quot;queryeval#getMBeanServer()&quot;&gt;&lt;code&gt;QueryEval.getMBeanServer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The MBean Server used is the one returned by &lt;a href=&quot;queryeval#getMBeanServer()&quot;&gt; &lt;code&gt;QueryEval.getMBeanServer()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="72d1d3a5c29db56a086580b10e87cee9417c2769" translate="yes" xml:space="preserve">
          <source>The MBean Server used is the one returned by &lt;a href=&quot;queryeval#getMBeanServer--&quot;&gt;&lt;code&gt;QueryEval.getMBeanServer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用されるMBeanサーバーは、&lt;a href=&quot;queryeval#getMBeanServer--&quot;&gt; &lt;code&gt;QueryEval.getMBeanServer()&lt;/code&gt; &lt;/a&gt;によって返されるサーバーです。</target>
        </trans-unit>
        <trans-unit id="21324a38f03c31ace3a1e422ca3454c83ac8dbb8" translate="yes" xml:space="preserve">
          <source>The MBean is already registered in the repository.</source>
          <target state="translated">MBeanはすでにリポジトリに登録されています。</target>
        </trans-unit>
        <trans-unit id="43753879ff4a9ab9e94f41c105bc04ec605906f3" translate="yes" xml:space="preserve">
          <source>The MBean must have a listener that exactly matches the given &lt;code&gt;listener&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, and &lt;code&gt;handback&lt;/code&gt; parameters. If there is more than one such listener, only one is removed.</source>
          <target state="translated">MBeanには、指定された &lt;code&gt;listener&lt;/code&gt; 、 &lt;code&gt;filter&lt;/code&gt; 、および &lt;code&gt;handback&lt;/code&gt; パラメータと完全に一致するリスナーが必要です。そのようなリスナーが複数ある場合は、1つだけが削除されます。</target>
        </trans-unit>
        <trans-unit id="30152426051a3aa7c2787f9bb448c65fd9d96573" translate="yes" xml:space="preserve">
          <source>The MBean server connection through which the methods of a proxy using this handler are forwarded.</source>
          <target state="translated">このハンドラを使用したプロキシのメソッドが転送される MBean サーバ接続。</target>
        </trans-unit>
        <trans-unit id="5a6b667365181658d557141a79bdcd9ae1d79d48" translate="yes" xml:space="preserve">
          <source>The MBeanServer reference is internally kept. This will allow &lt;code&gt;findMBeanServer&lt;/code&gt; to return a reference to this MBeanServer object.</source>
          <target state="translated">MBeanServer参照は内部的に保持されます。これにより、 &lt;code&gt;findMBeanServer&lt;/code&gt; がこのMBeanServerオブジェクトへの参照を返すことができます。</target>
        </trans-unit>
        <trans-unit id="fce98176f741b29841e04388f314ecc341556fb9" translate="yes" xml:space="preserve">
          <source>The MBeanServerBuilder makes it possible to wrap the MBeanServers returned by the default MBeanServerBuilder implementation, for the purpose of e.g. adding an additional security layer.</source>
          <target state="translated">MBeanServerBuilder を使用すると、デフォルトの MBeanServerBuilder 実装で返された MBeanServers をラップして、セキュリティ層を追加することができます。</target>
        </trans-unit>
        <trans-unit id="3ebb8ef1bdda79f2bf977d8f0f2c843f817752de" translate="yes" xml:space="preserve">
          <source>The MGF1ParameterSpec which uses &quot;SHA-1&quot; message digest</source>
          <target state="translated">SHA-1」メッセージダイジェストを使用するMGF1ParameterSpec</target>
        </trans-unit>
        <trans-unit id="c43e787474141d0bb72e21314b04491164ecd29c" translate="yes" xml:space="preserve">
          <source>The MGF1ParameterSpec which uses &quot;SHA-1&quot; message digest.</source>
          <target state="translated">SHA-1 &quot;メッセージダイジェストを使用するMGF1ParameterSpec。</target>
        </trans-unit>
        <trans-unit id="32c91218272c1ce637c8a43d4efa8d7be714817e" translate="yes" xml:space="preserve">
          <source>The MGF1ParameterSpec which uses &quot;SHA-224&quot; message digest</source>
          <target state="translated">SHA-224」メッセージダイジェストを使用するMGF1ParameterSpec</target>
        </trans-unit>
        <trans-unit id="ded68968556406a67098d9312cb325eb7740b1a7" translate="yes" xml:space="preserve">
          <source>The MGF1ParameterSpec which uses &quot;SHA-224&quot; message digest.</source>
          <target state="translated">SHA-224 &quot;メッセージダイジェストを使用するMGF1ParameterSpec。</target>
        </trans-unit>
        <trans-unit id="f4145abd624d13b5fd6c271646d555d996874e76" translate="yes" xml:space="preserve">
          <source>The MGF1ParameterSpec which uses &quot;SHA-256&quot; message digest</source>
          <target state="translated">SHA-256」メッセージダイジェストを使用するMGF1ParameterSpec</target>
        </trans-unit>
        <trans-unit id="30567a972c0ebfa4faa9759c8c4f5615d0736a78" translate="yes" xml:space="preserve">
          <source>The MGF1ParameterSpec which uses &quot;SHA-256&quot; message digest.</source>
          <target state="translated">SHA-256 &quot;メッセージダイジェストを使用するMGF1ParameterSpec。</target>
        </trans-unit>
        <trans-unit id="ffe8090c162f81eda0ca11ad18b4d00f0460668a" translate="yes" xml:space="preserve">
          <source>The MGF1ParameterSpec which uses &quot;SHA-384&quot; message digest</source>
          <target state="translated">SHA-384」メッセージダイジェストを使用するMGF1ParameterSpec</target>
        </trans-unit>
        <trans-unit id="8f743fd5434a0de8774dcd2c54b80badfe4a3dec" translate="yes" xml:space="preserve">
          <source>The MGF1ParameterSpec which uses &quot;SHA-384&quot; message digest.</source>
          <target state="translated">SHA-384 &quot;メッセージダイジェストを使用するMGF1ParameterSpec。</target>
        </trans-unit>
        <trans-unit id="9fcd13c9a51cff2dfe34d11d75622669ff7a2f6f" translate="yes" xml:space="preserve">
          <source>The MGF1ParameterSpec which uses SHA-512 message digest</source>
          <target state="translated">SHA-512メッセージダイジェストを使用するMGF1ParameterSpec</target>
        </trans-unit>
        <trans-unit id="773fa0838097295208f32770a4edbdf66bd50a46" translate="yes" xml:space="preserve">
          <source>The MGF1ParameterSpec which uses SHA-512 message digest.</source>
          <target state="translated">SHA-512メッセージダイジェストを使用するMGF1ParameterSpec。</target>
        </trans-unit>
        <trans-unit id="c6fdeb15a6d0d672938ac7162d09074690eabb53" translate="yes" xml:space="preserve">
          <source>The MGF1ParameterSpec which uses SHA-512/224 message digest</source>
          <target state="translated">SHA-512/224メッセージダイジェストを使用するMGF1ParameterSpec</target>
        </trans-unit>
        <trans-unit id="6b740423dca40861f104766ac050de56d78d3f30" translate="yes" xml:space="preserve">
          <source>The MGF1ParameterSpec which uses SHA-512/256 message digest</source>
          <target state="translated">SHA-512/256メッセージダイジェストを使用するMGF1ParameterSpec</target>
        </trans-unit>
        <trans-unit id="516e21a61c986db4b650efb7f3b9edffb19e1c28" translate="yes" xml:space="preserve">
          <source>The MIDI 1.0 Specification defines both 7-bit controllers and 14-bit controllers. Continuous controllers, such as wheels and sliders, typically have 14 bits (two MIDI bytes), while discrete controllers, such as switches, typically have 7 bits (one MIDI byte). Refer to the specification to see the expected resolution for each type of control.</source>
          <target state="translated">MIDI 1.0 仕様では 7 ビットコントローラと 14 ビットコントローラの両方が定義されています。ホイールやスライダーなどの連続的なコントローラは通常 14 ビット(2 つの MIDI バイト)で、スイッチなどの個別のコントローラは通常 7 ビット(1 つの MIDI バイト)です。各タイプのコントロールの期待される解像度については、仕様書を参照してください。</target>
        </trans-unit>
        <trans-unit id="3b90ca10823dacdb7ec1aff6e9c338eb2858be24" translate="yes" xml:space="preserve">
          <source>The MIDI 1.0 specification provides for 16 channels, so this method returns an array of at least 16 elements. However, if this synthesizer doesn't make use of all 16 channels, some of the elements of the array might be &lt;code&gt;null&lt;/code&gt;, so you should check each element before using it.</source>
          <target state="translated">MIDI 1.0仕様は16チャネルを提供するため、このメソッドは少なくとも16要素の配列を返します。ただし、このシンセサイザが16チャネルすべてを使用しない場合、配列の一部の要素が &lt;code&gt;null&lt;/code&gt; になる可能性があるため、使用する前に各要素を確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="049c7ab3e0f2c876b50b46fe3789a8747dae1e9c" translate="yes" xml:space="preserve">
          <source>The MIDI channel on which this voice is playing.</source>
          <target state="translated">この音声が再生されているMIDIチャンネル。</target>
        </trans-unit>
        <trans-unit id="b52e6c1511e484eaf10f9c3556aee2243b42e67c" translate="yes" xml:space="preserve">
          <source>The MIDI channel on which this voice is playing. The value is a zero-based channel number if the voice is active, or unspecified if the voice is inactive.</source>
          <target state="translated">この音色が演奏されている MIDI チャンネル。ボイスがアクティブな場合はゼロベースのチャンネル番号、アクティブでない場合は指定されません。</target>
        </trans-unit>
        <trans-unit id="526debeb157a66f1367b032953ad21ed8a2a5fd6" translate="yes" xml:space="preserve">
          <source>The MIDI message data.</source>
          <target state="translated">MIDIメッセージデータです。</target>
        </trans-unit>
        <trans-unit id="72e471be8e18253cd2fa90755b2430be47a7c9c7" translate="yes" xml:space="preserve">
          <source>The MIDI message data. The first byte is the status byte for the message; subsequent bytes up to the length of the message are data bytes for this message.</source>
          <target state="translated">MIDI メッセージデータ。最初のバイトはメッセージのステータスバイトで、メッセージの長さまでの後続のバイトはこのメッセージのデータバイトです。</target>
        </trans-unit>
        <trans-unit id="317772b1f4d7bef7e847f7a2507ef5cf22a36f76" translate="yes" xml:space="preserve">
          <source>The MIDI note that this voice is playing.</source>
          <target state="translated">この音声が再生されているMIDIノート。</target>
        </trans-unit>
        <trans-unit id="09d0f1e1fda22537e5c3106cad4d736b151fe66f" translate="yes" xml:space="preserve">
          <source>The MIDI note that this voice is playing. The range for an active voice is from 0 to 127 in semitones, with 60 referring to Middle C. The value is unspecified if the voice is inactive.</source>
          <target state="translated">この音色が演奏しているMIDIノート。アクティブな音色の範囲は0から127までの半音で、60はミドルCを基準にしています。</target>
        </trans-unit>
        <trans-unit id="9f275ac1e77302fd1f9c984942071af0000235dd" translate="yes" xml:space="preserve">
          <source>The MIDI specification does not dictate whether notes that are already sounding should switch to the new instrument (timbre) or continue with their original timbre until terminated by a note-off.</source>
          <target state="translated">MIDI仕様では、既に鳴っている音符を新しい楽器(音色)に切り替えるか、ノートオフで終了するまで元の音色を維持するかは規定されていません。</target>
        </trans-unit>
        <trans-unit id="883ec76cbd3a1ad3d350032e79eb664e1f1a784b" translate="yes" xml:space="preserve">
          <source>The MIDI specification stipulates that pitch bend be a 14-bit value, where zero is maximum downward bend, 16383 is maximum upward bend, and 8192 is the center (no pitch bend). The actual amount of pitch change is not specified; it can be changed by a pitch-bend sensitivity setting. However, the General MIDI specification says that the default range should be two semitones up and down from center.</source>
          <target state="translated">MIDI 仕様では、ピッチベンドは 14 ビットの値であることが規定されており、ゼロが最大下向きベンド、16383 が最大上向きベンド、8192 がセンター(ピッチベンドなし)となっています。実際のピッチの変化量は規定されておらず、ピッチベンドの感度設定で変化させることができます。ただし、一般的なMIDIの仕様では、デフォルトの範囲はセンターから2半音上下するようにしてくださいと書かれています。</target>
        </trans-unit>
        <trans-unit id="635898bd1d6ec018c38dd8a4feda9d061e0d6d2b" translate="yes" xml:space="preserve">
          <source>The MIDI specification stipulates that pitch bend be a 14-bit value, where zero is maximum downward bend, 16383 is maximum upward bend, and 8192 is the center (no pitch bend). The actual amount of pitch change is not specified; it can be changed by a pitch-bend sensitivity setting. However, the General MIDI specification says that the default range should be two semitones up and down from center. It is possible that the underlying synthesizer does not support this MIDI message. In order to verify that &lt;code&gt;setPitchBend&lt;/code&gt; was successful, use &lt;code&gt;getPitchBend&lt;/code&gt;.</source>
          <target state="translated">MIDI仕様では、ピッチベンドは14ビット値であることが規定されており、ゼロは最大の下向きのベンド、16383は最大の上向きのベンド、8192が中心（ピッチベンドなし）です。ピッチ変更の実際の量は指定されていません。ピッチベンド感度設定で変更できます。ただし、一般的なMIDI仕様では、デフォルトの範囲は中央から上下に2セミトーンにする必要があると規定されています。基になるシンセサイザがこのMIDIメッセージをサポートしていない可能性があります。 &lt;code&gt;setPitchBend&lt;/code&gt; が成功したことを確認するには、getPitchBendを使用し &lt;code&gt;getPitchBend&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7cc37db06eee182d506afa49c0c246f6a9c01a35" translate="yes" xml:space="preserve">
          <source>The MIDI standard expresses MIDI data in bytes. However, because Java&amp;trade; uses signed bytes, the Java Sound API uses integers instead of bytes when expressing MIDI data. For example, the &lt;a href=&quot;#getStatus()&quot;&gt;&lt;code&gt;getStatus()&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;MidiMessage&lt;/code&gt; returns MIDI status bytes as integers. If you are processing MIDI data that originated outside Java Sound and now is encoded as signed bytes, the bytes can be converted to integers using this conversion:</source>
          <target state="translated">MIDI規格は、MIDIデータをバイト単位で表現します。ただし、Java&amp;trade;は符号付きバイトを使用するため、Java Sound APIは、MIDIデータを表現するときにバイトではなく整数を使用します。たとえば、 &lt;code&gt;MidiMessage&lt;/code&gt; の&lt;a href=&quot;#getStatus()&quot;&gt; &lt;code&gt;getStatus()&lt;/code&gt; &lt;/a&gt;メソッドは、MIDIステータスバイトを整数として返します。Java Soundの外部で発生し、現在は符号付きバイトとしてエンコードされているMIDIデータを処理している場合、バイトは次の変換を使用して整数に変換できます。</target>
        </trans-unit>
        <trans-unit id="c526e09fb95606778bb5e764a54a0e9f208fc206" translate="yes" xml:space="preserve">
          <source>The MIDI standard expresses MIDI data in bytes. However, because Java&lt;sup id=&quot;integersVsBytes&quot;&gt;TM&lt;/sup&gt; uses signed bytes, the Java Sound API uses integers instead of bytes when expressing MIDI data. For example, the &lt;a href=&quot;midimessage#getStatus--&quot;&gt;&lt;code&gt;getStatus()&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;MidiMessage&lt;/code&gt; returns MIDI status bytes as integers. If you are processing MIDI data that originated outside Java Sound and now is encoded as signed bytes, the bytes can can be converted to integers using this conversion:</source>
          <target state="translated">MIDI規格は、MIDIデータをバイト単位で表します。ただし、Java &lt;sup id=&quot;integersVsBytes&quot;&gt;TM&lt;/sup&gt;は符号付きバイトを使用するため、Java Sound APIはMIDIデータを表現するときにバイトではなく整数を使用します。たとえば、 &lt;code&gt;MidiMessage&lt;/code&gt; の&lt;a href=&quot;midimessage#getStatus--&quot;&gt; &lt;code&gt;getStatus()&lt;/code&gt; &lt;/a&gt;メソッドは、MIDIステータスバイトを整数として返します。 Java Soundの外部で発生し、現在符号付きバイトとしてエンコードされているMIDIデータを処理している場合、この変換を使用してバイトを整数に変換できます。</target>
        </trans-unit>
        <trans-unit id="0c8a2781b35fa31817c29abe30b50e8043af665c" translate="yes" xml:space="preserve">
          <source>The MIDI tracks in this sequence.</source>
          <target state="translated">このシーケンスのMIDIトラック。</target>
        </trans-unit>
        <trans-unit id="23a350af8445001f598c4651a4f45324e9f33c23" translate="yes" xml:space="preserve">
          <source>The MLet text file's base URL.</source>
          <target state="translated">MLetテキストファイルのベースURLです。</target>
        </trans-unit>
        <trans-unit id="db0ce9ae1e5d2f89a8f312663fdfbed2b32ba495" translate="yes" xml:space="preserve">
          <source>The MXBean concept provides a simple way to code an MBean that only references a predefined set of types, the ones defined by &lt;a href=&quot;openmbean/package-summary&quot;&gt;&lt;code&gt;javax.management.openmbean&lt;/code&gt;&lt;/a&gt;. In this way, you can be sure that your MBean will be usable by any client, including remote clients, without any requirement that the client have access to &lt;em&gt;model-specific classes&lt;/em&gt; representing the types of your MBeans.</source>
          <target state="translated">MXBeanの概念は、&lt;a href=&quot;openmbean/package-summary&quot;&gt; &lt;code&gt;javax.management.openmbean&lt;/code&gt; で&lt;/a&gt;定義されている定義済みのタイプのセットのみを参照するMBeanをコーディングする簡単な方法を提供します。このようにして、クライアントがMBeanのタイプを表す&lt;em&gt;モデル固有のクラスに&lt;/em&gt;アクセスする必要がなくても、リモートクライアントを含むすべてのクライアントがMBeanを確実に使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="e33c92fe4338e85410252cbf5f86c27123acc080" translate="yes" xml:space="preserve">
          <source>The Malayalam range with the Malayalam digits.</source>
          <target state="translated">マラヤーラム語の桁数を使ったマラヤーラム語の範囲です。</target>
        </trans-unit>
        <trans-unit id="d4a3d1afcec2a7b84cb429f3bcbbf430180a0aa8" translate="yes" xml:space="preserve">
          <source>The ManageReferral control's assigned object identifier is 2.16.840.1.113730.3.4.2.</source>
          <target state="translated">ManageReferrerral コントロールに割り当てられたオブジェクト識別子は 2.16.840.1.11730.3.4.2 です。</target>
        </trans-unit>
        <trans-unit id="f0c9875b8d07e007e2745fc0af6fe732b94df483" translate="yes" xml:space="preserve">
          <source>The Manifest class is used to maintain Manifest entry names and their associated Attributes.</source>
          <target state="translated">マニフェスト・クラスは、マニフェスト・エントリ名とそれに関連する属性を維持するために使用されます。</target>
        </trans-unit>
        <trans-unit id="0f91edbc800e6ebe0a97d46777ffeab5dd79019f" translate="yes" xml:space="preserve">
          <source>The Manifest class is used to maintain Manifest entry names and their associated Attributes. There are main Manifest Attributes as well as per-entry Attributes. For information on the Manifest format, please see the  Manifest format specification.</source>
          <target state="translated">Manifestクラスは、マニフェスト・エントリ名とそれに関連する属性を維持するために使用されます。Manifestの主要な属性と、エントリごとの属性があります。マニフェスト・フォーマットに関する情報は、マニフェスト・フォーマット仕様を参照してください。</target>
        </trans-unit>
        <trans-unit id="6b08c1dceec8f387af3ac7117a090db5f90ca9a8" translate="yes" xml:space="preserve">
          <source>The Manifest class is used to maintain Manifest entry names and their associated Attributes. There are main Manifest Attributes as well as per-entry Attributes. For information on the Manifest format, please see the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/specs/jar/jar.html&quot;&gt; Manifest format specification&lt;/a&gt;.</source>
          <target state="translated">マニフェストクラスは、マニフェストエントリ名とそれに関連する属性を維持するために使用されます。メインのマニフェスト属性とエントリごとの属性があります。マニフェスト形式の詳細については、&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/specs/jar/jar.html&quot;&gt;マニフェスト形式の仕様&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="a14dcb9ffe833bd8ff0c3971c624e1ee8fa1ea44" translate="yes" xml:space="preserve">
          <source>The MediaSize is in turn used to locate the MediaSizeName object. This method may return null if the closest matching MediaSize has no corresponding Media instance.</source>
          <target state="translated">MediaSize は、MediaSizeName オブジェクトを見つけるために使用されます。最も近い一致する MediaSize に対応する Media インスタンスがない場合、このメソッドは null を返すことがあります。</target>
        </trans-unit>
        <trans-unit id="c7f2589c5eb6fefc0630c3f00ed4bcf6743212bf" translate="yes" xml:space="preserve">
          <source>The MediaType instance for 6 3/4 envelope, 3 5/8 x 6 1/2 in.</source>
          <target state="translated">6 3/4 エンベロープ、3 5/8 x 6 1/2 インチの MediaType インスタンス。</target>
        </trans-unit>
        <trans-unit id="573f4b6872edf71d06ba58486250a54311c264a2" translate="yes" xml:space="preserve">
          <source>The MediaType instance for Engineering A, 8 1/2 x 11 in.</source>
          <target state="translated">エンジニアリング A,8 1/2 x 11 インチの MediaType インスタンス。</target>
        </trans-unit>
        <trans-unit id="64d3072107241435185f88936c6286ff514d147e" translate="yes" xml:space="preserve">
          <source>The MediaType instance for Engineering B, 11 x 17 in.</source>
          <target state="translated">エンジニアリング B,11 x 17 インチの MediaType インスタンス。</target>
        </trans-unit>
        <trans-unit id="c7692968c3215d63e31ac87679acd24d403571f9" translate="yes" xml:space="preserve">
          <source>The MediaType instance for Engineering C, 17 x 22 in.</source>
          <target state="translated">エンジニアリングC,17 x 22 in.</target>
        </trans-unit>
        <trans-unit id="9f478c8d9d5bcb2ea8dcf961f52385b3f2895b9b" translate="yes" xml:space="preserve">
          <source>The MediaType instance for Engineering D, 22 x 34 in.</source>
          <target state="translated">エンジニアリング D,22 x 34 インチの MediaType インスタンス。</target>
        </trans-unit>
        <trans-unit id="dbaba1c80bc3cfe1b7c16c807a907a7e87387b83" translate="yes" xml:space="preserve">
          <source>The MediaType instance for Engineering E, 34 x 44 in.</source>
          <target state="translated">エンジニアリング E,34 x 44 インチの MediaType インスタンス。</target>
        </trans-unit>
        <trans-unit id="0b90d28550428199920f8f10dbe0d35f58b47e46" translate="yes" xml:space="preserve">
          <source>The MediaType instance for Executive, 7 1/4 x 10 1/2 in.</source>
          <target state="translated">Executive,7 1/4 x 10 1/2 インチの MediaType インスタンス。</target>
        </trans-unit>
        <trans-unit id="54db702c63c3eba7e3cf9613a7e24e501b5591f5" translate="yes" xml:space="preserve">
          <source>The MediaType instance for Folio, 8 1/2 x 13 in.</source>
          <target state="translated">Folio,8 1/2 x 13 in.</target>
        </trans-unit>
        <trans-unit id="ca7bc12d3f763cdf64763c795bba0f7408968808" translate="yes" xml:space="preserve">
          <source>The MediaType instance for ISO Designated Long, 110 x 220 mm.</source>
          <target state="translated">ISO指定ロング、110 x 220 mm用のMediaTypeインスタンス。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
