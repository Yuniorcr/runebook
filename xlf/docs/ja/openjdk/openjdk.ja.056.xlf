<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="openjdk">
    <body>
      <group id="openjdk">
        <trans-unit id="266b9c7d1cd227bf46d8383331c2c534cb3a9b1c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; The return value from the method is intended only as an approximation for the sake of error reporting; it is not intended to provide sufficient information to edit the character content of the original XML document.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;メソッドからの戻り値は、エラー報告のための概算としてのみ意図されています。元のXMLドキュメントの文字コンテンツを編集するための十分な情報を提供することを目的としたものではありません。</target>
        </trans-unit>
        <trans-unit id="21985473b3d61c21012ece4b313176f883a9b179" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; This class implements &lt;a href=&quot;../../../../../java.base/java/io/serializable&quot;&gt;&lt;code&gt;Serializable&lt;/code&gt;&lt;/a&gt; as a side effect of it extending &lt;a href=&quot;../basic/basiclookandfeel&quot;&gt;&lt;code&gt;BasicLookAndFeel&lt;/code&gt;&lt;/a&gt;. It is not intended to be serialized. An attempt to serialize it will result in &lt;a href=&quot;../../../../../java.base/java/io/notserializableexception&quot;&gt;&lt;code&gt;NotSerializableException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;このクラスは、&lt;a href=&quot;../basic/basiclookandfeel&quot;&gt; &lt;code&gt;BasicLookAndFeel&lt;/code&gt; を&lt;/a&gt;拡張する副作用として&lt;a href=&quot;../../../../../java.base/java/io/serializable&quot;&gt; &lt;code&gt;Serializable&lt;/code&gt; &lt;/a&gt;を実装します。シリアル化するためのものではありません。シリアル化しようとすると、&lt;a href=&quot;../../../../../java.base/java/io/notserializableexception&quot;&gt; &lt;code&gt;NotSerializableException&lt;/code&gt; &lt;/a&gt;が発生します。</target>
        </trans-unit>
        <trans-unit id="ecef0bbee86d8c27cb2ff042c933619b73660bb1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; We recommend that you &lt;em&gt;not&lt;/em&gt; create subclasses of this class. If you absolutely must create a subclass, be sure to invoke the superclass version of each method.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;このクラスのサブクラスを作成し&lt;em&gt;ない&lt;/em&gt;ことをお勧めします。どうしてもサブクラスを作成する必要がある場合は、必ず各メソッドのスーパークラスバージョンを呼び出してください。</target>
        </trans-unit>
        <trans-unit id="96b0c9c7489bfd4c4158836d657171dd8d149515" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt;&lt;code&gt;DefaultTableModel&lt;/code&gt; returns a column class of &lt;code&gt;Object&lt;/code&gt;. When &lt;code&gt;DefaultTableModel&lt;/code&gt; is used with a &lt;code&gt;TableRowSorter&lt;/code&gt; this will result in extensive use of &lt;code&gt;toString&lt;/code&gt;, which for non-&lt;code&gt;String&lt;/code&gt; data types is expensive. If you use &lt;code&gt;DefaultTableModel&lt;/code&gt; with a &lt;code&gt;TableRowSorter&lt;/code&gt; you are strongly encouraged to override &lt;code&gt;getColumnClass&lt;/code&gt; to return the appropriate type.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt; &lt;code&gt;DefaultTableModel&lt;/code&gt; は、 &lt;code&gt;Object&lt;/code&gt; の列クラスを返します。場合 &lt;code&gt;DefaultTableModel&lt;/code&gt; 用いて使用される &lt;code&gt;TableRowSorter&lt;/code&gt; は、これはの広範な使用をもたらす &lt;code&gt;toString&lt;/code&gt; 非ため、 &lt;code&gt;String&lt;/code&gt; データ型に高価です。 &lt;code&gt;TableRowSorter&lt;/code&gt; で &lt;code&gt;DefaultTableModel&lt;/code&gt; を使用する場合は、 &lt;code&gt;getColumnClass&lt;/code&gt; をオーバーライドして適切なタイプを返すことを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="1a4dbfd60ddd2ae5bc2e394d9bec2c60f4dd0044" translate="yes" xml:space="preserve">
          <source>&lt;sub&gt;&lt;i&gt;opt&lt;/i&gt;&lt;/sub&gt;</source>
          <target state="translated">&lt;sub&gt;&lt;i&gt;opt&lt;/i&gt;&lt;/sub&gt;</target>
        </trans-unit>
        <trans-unit id="de0f4e877e0dcacc6b548ebdb0de7f7af031fa32" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;1&lt;/sup&gt; Depends on the definition of &lt;a href=&quot;formattable&quot;&gt;&lt;code&gt;Formattable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;sup&gt;1 &lt;/sup&gt;&lt;a href=&quot;formattable&quot;&gt; &lt;code&gt;Formattable&lt;/code&gt; &lt;/a&gt;の定義に依存します。</target>
        </trans-unit>
        <trans-unit id="c18d6e71a34fe8209f6204f366f7cb332c7dd04c" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2&lt;/sup&gt; +</source>
          <target state="translated">&lt;sup&gt;2&lt;/sup&gt; +</target>
        </trans-unit>
        <trans-unit id="2597a4bec834c34a56ab45519733a00d41053d50" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2&lt;/sup&gt; For &lt;code&gt;'d'&lt;/code&gt; conversion only.</source>
          <target state="translated">&lt;sup&gt;2&lt;/sup&gt;については &lt;code&gt;'d'&lt;/code&gt; のみの変換。</target>
        </trans-unit>
        <trans-unit id="d0bcc49d2213a764ee7fceaf4a9b1c99b65c6ab7" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2&lt;/sup&gt;) without intermediate overflow or underflow</source>
          <target state="translated">&lt;sup&gt;2&lt;/sup&gt;）中間オーバーフローまたはアンダーフローなし</target>
        </trans-unit>
        <trans-unit id="b8a0e46b9a691b7062789b86d5efd4910967fd59" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;2&lt;/sup&gt;) without intermediate overflow or underflow.</source>
          <target state="translated">&lt;sup&gt;2&lt;/sup&gt;）中間オーバーフローまたはアンダーフローなし。</target>
        </trans-unit>
        <trans-unit id="5205c0c6122f510a63e496b2c218115e94e6564d" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;3&lt;/sup&gt; For &lt;code&gt;'o'&lt;/code&gt;, &lt;code&gt;'x'&lt;/code&gt;, and &lt;code&gt;'X'&lt;/code&gt; conversions only.</source>
          <target state="translated">&lt;sup&gt;3&lt;/sup&gt;については &lt;code&gt;'o'&lt;/code&gt; 、 &lt;code&gt;'x'&lt;/code&gt; 、および &lt;code&gt;'X'&lt;/code&gt; のみコンバージョン。</target>
        </trans-unit>
        <trans-unit id="1074f936fb9e998e1b4069f5b737ea4c77d097d4" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;4&lt;/sup&gt; For &lt;code&gt;'d'&lt;/code&gt;, &lt;code&gt;'o'&lt;/code&gt;, &lt;code&gt;'x'&lt;/code&gt;, and &lt;code&gt;'X'&lt;/code&gt; conversions applied to &lt;a href=&quot;../math/biginteger&quot;&gt;&lt;code&gt;BigInteger&lt;/code&gt;&lt;/a&gt; or &lt;code&gt;'d'&lt;/code&gt; applied to &lt;code&gt;byte&lt;/code&gt;, &lt;a href=&quot;../lang/byte&quot;&gt;&lt;code&gt;Byte&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;a href=&quot;../lang/short&quot;&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;int&lt;/code&gt; and &lt;a href=&quot;../lang/integer&quot;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;long&lt;/code&gt;, and &lt;a href=&quot;../lang/long&quot;&gt;&lt;code&gt;Long&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;sup&gt;4&lt;/sup&gt;については &lt;code&gt;'d'&lt;/code&gt; 、 &lt;code&gt;'o'&lt;/code&gt; 、 &lt;code&gt;'x'&lt;/code&gt; 、および &lt;code&gt;'X'&lt;/code&gt; の変換は、に適用される&lt;a href=&quot;../math/biginteger&quot;&gt; &lt;code&gt;BigInteger&lt;/code&gt; &lt;/a&gt;または &lt;code&gt;'d'&lt;/code&gt; に適用される &lt;code&gt;byte&lt;/code&gt; 、&lt;a href=&quot;../lang/byte&quot;&gt; &lt;code&gt;Byte&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;short&lt;/code&gt; 、&lt;a href=&quot;../lang/short&quot;&gt; &lt;code&gt;Short&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;int&lt;/code&gt; と&lt;a href=&quot;../lang/integer&quot;&gt; &lt;code&gt;Integer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;long&lt;/code&gt; 、及び&lt;a href=&quot;../lang/long&quot;&gt; &lt;code&gt;Long&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="1cbf27830e5e9235d5fadca0b7b2fbeff8e8286e" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;5&lt;/sup&gt; For &lt;code&gt;'e'&lt;/code&gt;, &lt;code&gt;'E'&lt;/code&gt;, &lt;code&gt;'f'&lt;/code&gt;, &lt;code&gt;'g'&lt;/code&gt;, and &lt;code&gt;'G'&lt;/code&gt; conversions only.</source>
          <target state="translated">&lt;sup&gt;5&lt;/sup&gt;について &lt;code&gt;'e'&lt;/code&gt; 、 &lt;code&gt;'E'&lt;/code&gt; 、 &lt;code&gt;'f'&lt;/code&gt; 、 &lt;code&gt;'g'&lt;/code&gt; 、及び &lt;code&gt;'G'&lt;/code&gt; のみコンバージョン。</target>
        </trans-unit>
        <trans-unit id="c387cad14f96f3797404e05c2ba187515fcd6235" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;code&gt;a&lt;/code&gt;&lt;/sup&gt;, where</source>
          <target state="translated">&lt;sup&gt; &lt;code&gt;a&lt;/code&gt; &lt;/sup&gt;、どこ</target>
        </trans-unit>
        <trans-unit id="b5c29c713c380389f4685bafc832846f1ca12da5" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;code&gt;x&lt;/code&gt;&lt;/sup&gt; - 1 is within 1/2 ulp of the limit value -1, &lt;code&gt;-1.0&lt;/code&gt; should be returned.</source>
          <target state="translated">&lt;sup&gt; &lt;code&gt;x&lt;/code&gt; &lt;/sup&gt; -1は制限値-1の1/2 ulp以内にあり、 &lt;code&gt;-1.0&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="c2135a42fc3333807a86f1f9e4e6958262803c8b" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;code&gt;x&lt;/code&gt;&lt;/sup&gt; - 1.</source>
          <target state="translated">&lt;sup&gt; &lt;code&gt;x&lt;/code&gt; &lt;/sup&gt; -1。</target>
        </trans-unit>
        <trans-unit id="1b216d6dbef77b084f6b35f200086ec73058e228" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;&lt;code&gt;x&lt;/code&gt;&lt;/sup&gt; -1.</source>
          <target state="translated">&lt;sup&gt; &lt;code&gt;x&lt;/code&gt; &lt;/sup&gt; -1。</target>
        </trans-unit>
        <trans-unit id="cd592b76807caff2a10355e16a8f793f23dbf715" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;th&lt;/sup&gt;&lt;a href=&quot;#cg&quot;&gt;capturing group&lt;/a&gt; and &lt;code&gt;\g{&lt;/code&gt;</source>
          <target state="translated">&lt;sup&gt;th &lt;/sup&gt;&lt;a href=&quot;#cg&quot;&gt;キャプチャグループ&lt;/a&gt;と &lt;code&gt;\g{&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8f76c86a36f13f2cba9267e9c8be26387681d1ca" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;th&lt;/sup&gt;&lt;a href=&quot;#cg&quot;&gt;capturing group&lt;/a&gt; matched</source>
          <target state="translated">&lt;sup&gt;第&lt;/sup&gt;&lt;a href=&quot;#cg&quot;&gt;キャプチャグループ&lt;/a&gt;に一致</target>
        </trans-unit>
        <trans-unit id="37049399390566ec49b8a3a6a0e0b51f26048321" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;x&lt;/sup&gt; -1.</source>
          <target state="translated">&lt;sup&gt;x&lt;/sup&gt; -1。</target>
        </trans-unit>
        <trans-unit id="85a414158c654cf05eff4c426095be529210b3d3" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;x&lt;/sup&gt; -1. Note that for values of</source>
          <target state="translated">&lt;sup&gt;x&lt;/sup&gt; -1。の値について</target>
        </trans-unit>
        <trans-unit id="6a993260c9b3e2f7c8670ea387d904181ca53d47" translate="yes" xml:space="preserve">
          <source>&lt;sup&gt;x&lt;/sup&gt; than &lt;code&gt;exp(x)&lt;/code&gt;.</source>
          <target state="translated">&lt;sup&gt;X&lt;/sup&gt;よりも &lt;code&gt;exp(x)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8883fc032f7d88faa589f2c04bbbebac06ec546" translate="yes" xml:space="preserve">
          <source>&lt;u&gt;&lt;a href=&quot;element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt;&lt;/u&gt; is an important interface used in constructing a Document. It has the power to describe various structural parts of a document, such as paragraphs, lines of text, or even (in HTML documents) items in lists. Conceptually, the Element interface captures some of the spirit of an SGML document. So if you know SGML, you may already have some understanding of Swing's Element interface.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c0047393c729c4df9310c0151cd3b09c874299" translate="yes" xml:space="preserve">
          <source>&lt;u&gt;Figure 2&lt;/u&gt; shows how how those same two lines of text might map to actual content:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="04f4ed1b0adf4af2159fcb8b22a7588a68ce12c9" translate="yes" xml:space="preserve">
          <source>&lt;u&gt;Figure 7&lt;/u&gt; shows how those same Elements might map to content.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fc525efcc305521da75e0e3a51a3972a5a9ddbee" translate="yes" xml:space="preserve">
          <source>&lt;u&gt;Note&lt;/u&gt;: the optional packages implementing the optional part of the &lt;em&gt;JMX Remote API&lt;/em&gt; are not included in the &lt;em&gt;Java SE Platform&lt;/em&gt; but are available from the &lt;em&gt;JMX Remote API &lt;a href=&quot;http://java.sun.com/products/JavaManagement/download.html&quot;&gt; Reference Implementation&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="translated">&lt;u&gt;注&lt;/u&gt;：&lt;em&gt;JMXリモートAPIの&lt;/em&gt;オプション部分を実装するオプションパッケージは、&lt;em&gt;Java SEプラットフォームに&lt;/em&gt;は含まれていませんが、&lt;em&gt;JMXリモートAPI &lt;a href=&quot;http://java.sun.com/products/JavaManagement/download.html&quot;&gt;リファレンス実装&lt;/a&gt;&lt;/em&gt;から入手できます。</target>
        </trans-unit>
        <trans-unit id="c95050da94ce8cbd9d9f171a30894b4e3150e24a" translate="yes" xml:space="preserve">
          <source>&lt;u&gt;Note&lt;/u&gt;: the optional packages implementing the optional part of the &lt;em&gt;JMX Remote API&lt;/em&gt; are not included in the &lt;em&gt;Java SE Platform&lt;/em&gt; but are available from the &lt;em&gt;JMX Remote API &lt;a href=&quot;https://www.oracle.com/technetwork/java/javasebusiness/downloads/java-archive-downloads-java-plat-419418.html&quot;&gt; Reference Implementation&lt;/a&gt;&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c0f347eadc263dbe3156f7147779a70c0429a944" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;archivelist&lt;/var&gt; must be enclosed in double quote marks.</source>
          <target state="translated">&lt;var&gt;archivelist&lt;/var&gt; は二重引用符で囲む必要があります。</target>
        </trans-unit>
        <trans-unit id="0f7ae43de7edbd0bc080fcada93cb989036d38e9" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;argumentType&lt;/var&gt; is the type of the argument that will be passed as parameter to the MBean's constructor.</source>
          <target state="translated">&lt;var&gt;argumentType&lt;/var&gt; は、MBeanのコンストラクターにパラメーターとして渡される引数のタイプです。</target>
        </trans-unit>
        <trans-unit id="1674d9d1a27cffdf0b23f453411f558dba05f8b3" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;CompositeData&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; は &lt;code&gt;CompositeData&lt;/code&gt; インターフェースも実装します。</target>
        </trans-unit>
        <trans-unit id="fb05f6536453ff87492d9c522273919b1d7a3922" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;OpenMBeanAttributeInfo&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; は &lt;code&gt;OpenMBeanAttributeInfo&lt;/code&gt; インターフェースも実装します。</target>
        </trans-unit>
        <trans-unit id="50b92fe75a21071455ff482534f31f8857956624" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;OpenMBeanConstructorInfo&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; は &lt;code&gt;OpenMBeanConstructorInfo&lt;/code&gt; インターフェースも実装します。</target>
        </trans-unit>
        <trans-unit id="4bce2a26c7ed13e307bbf5478eebee587fc812ea" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;OpenMBeanInfo&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; は &lt;code&gt;OpenMBeanInfo&lt;/code&gt; インターフェースも実装します。</target>
        </trans-unit>
        <trans-unit id="19ee9467bed306ae58eb068d05a8e2ebfab5221c" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;OpenMBeanOperationInfo&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; は &lt;code&gt;OpenMBeanOperationInfo&lt;/code&gt; インターフェースも実装します。</target>
        </trans-unit>
        <trans-unit id="155ef69e8e05f1c4d40bf9ce9cb7bcf2e4a2a321" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; は &lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt; インターフェースも実装します。</target>
        </trans-unit>
        <trans-unit id="75c27052d7ad9e7ec808018e194884173ee3b254" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; also implements the &lt;code&gt;TabularData&lt;/code&gt; interface,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; は、 &lt;code&gt;TabularData&lt;/code&gt; インターフェイスも実装します。</target>
        </trans-unit>
        <trans-unit id="253e502e7c38100be4045e40afe0238dc7f6f07f" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;obj&lt;/var&gt; is non null,</source>
          <target state="translated">&lt;var&gt;obj&lt;/var&gt; はnullではありません。</target>
        </trans-unit>
        <trans-unit id="be7def36241841366cfcf2d66a6a803286e807d7" translate="yes" xml:space="preserve">
          <source>&lt;var&gt;r&lt;/var&gt; is identical to &lt;var&gt;l&lt;/var&gt;; or</source>
          <target state="translated">&lt;var&gt;r&lt;/var&gt; は &lt;var&gt;l&lt;/var&gt; と同じです。または</target>
        </trans-unit>
        <trans-unit id="000f0cc4f75966810f276d4416f6272b5d9ca8a9" translate="yes" xml:space="preserve">
          <source>= &quot;NoMoreOftenThan&quot; and now &amp;gt; 'lastPersistTime' + 'persistPeriod'</source>
          <target state="translated">= &quot;NoMoreOftenThan&quot;そして今&amp;gt; 'lastPersistTime' + 'persistPeriod'</target>
        </trans-unit>
        <trans-unit id="dc3f8fabe8a4ebf8b4483e92773970369ef510de" translate="yes" xml:space="preserve">
          <source>= &quot;always&quot;</source>
          <target state="translated">=「常に」</target>
        </trans-unit>
        <trans-unit id="1bf9dad3a3a2784844323dab08b5aaa968220d27" translate="yes" xml:space="preserve">
          <source>= &quot;never&quot;</source>
          <target state="translated">=「しない」</target>
        </trans-unit>
        <trans-unit id="34903d623efbf67149181aefad27a2a5d9f47407" translate="yes" xml:space="preserve">
          <source>= &quot;onTimer&quot; and now &amp;gt; 'lastPersistTime' + 'persistPeriod'</source>
          <target state="translated">= &quot;onTimer&quot;そして今&amp;gt; 'lastPersistTime' + 'persistPeriod'</target>
        </trans-unit>
        <trans-unit id="f2ac7312c97fa5c14d6b268b273d483de875b7de" translate="yes" xml:space="preserve">
          <source>= &quot;onUnregister&quot;</source>
          <target state="translated">= &quot;onUnregister&quot;</target>
        </trans-unit>
        <trans-unit id="6073d22b378d3717b8d914e2c234e32fa17432a7" translate="yes" xml:space="preserve">
          <source>= &quot;onUpdate&quot;</source>
          <target state="translated">= &quot;onUpdate&quot;</target>
        </trans-unit>
        <trans-unit id="64a9966d0ceabdfc0d6a5ba87b81e6f9017846d1" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;end&lt;/code&gt; - &lt;code&gt;start&lt;/code&gt; chars from the given string into this buffer, starting at the given &lt;code&gt;start&lt;/code&gt; index and at the current position of this buffer. The position of this buffer is then incremented by</source>
          <target state="translated">= &lt;code&gt;end&lt;/code&gt; - &lt;code&gt;start&lt;/code&gt; 所与始まる、このバッファに指定した文字列から文字を &lt;code&gt;start&lt;/code&gt; インデックスと、このバッファの現在位置。このバッファの位置は、次に増加します</target>
        </trans-unit>
        <trans-unit id="28c7232e0a2e120dd8424f182ecc7a935bae8d44" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt; -</source>
          <target state="translated">= &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt; -</target>
        </trans-unit>
        <trans-unit id="c9d552344caa9efd6762036644cc5c62516c425e" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the byte at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; はインデックス0にコピーされ、インデックスのバイト</target>
        </trans-unit>
        <trans-unit id="aed792725570a2f872c76857d21042195bb30c14" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the char at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; はインデックス0にコピーされ、インデックスの文字は</target>
        </trans-unit>
        <trans-unit id="21fee3245de177f4253dbc6a67add6bbeae887e7" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the double at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; はインデックス0にコピーされ、インデックスのdouble</target>
        </trans-unit>
        <trans-unit id="ee5ebd2842327761e0a36d657d90805da9596bc5" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the float at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; はインデックス0にコピーされ、インデックスのフロート</target>
        </trans-unit>
        <trans-unit id="a8989acf643e840a55b06efc797f4ea5008a4996" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the int at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; はインデックス0にコピーされ、インデックスのint</target>
        </trans-unit>
        <trans-unit id="9a6aea9c2c83f43f46b312204abd9943d119eb36" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the long at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; はインデックス0にコピーされ、インデックスのlong</target>
        </trans-unit>
        <trans-unit id="b2ac89c119732feac494ff47bbdede7fd7dcacd0" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;position()&lt;/code&gt; is copied to index zero, the short at index</source>
          <target state="translated">= &lt;code&gt;position()&lt;/code&gt; はインデックス0にコピーされ、インデックスはshortになります</target>
        </trans-unit>
        <trans-unit id="be8c718160d931158eae8b4cb03c3be155a388a2" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; bytes from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= 各バッファーの現在の位置から開始して、指定されたバッファーからこのバッファーに &lt;code&gt;src.remaining()&lt;/code&gt; バイト。次に、両方のバッファの位置が次のように増分されます。</target>
        </trans-unit>
        <trans-unit id="69153de829419c04279a7105bbabbf1880a25384" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; chars from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= &lt;code&gt;src.remaining()&lt;/code&gt; 指定されたバッファーからこのバッファーに、各バッファーの現在の位置から開始する文字。次に、両方のバッファの位置が次のように増分されます。</target>
        </trans-unit>
        <trans-unit id="47440d269c37d48340c7d1f028c7bb7576627972" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; doubles from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= &lt;code&gt;src.remaining()&lt;/code&gt; は、指定されたバッファーからこのバッファーに2倍になり、各バッファーの現在の位置から開始します。次に、両方のバッファの位置が次のように増分されます。</target>
        </trans-unit>
        <trans-unit id="524006f6324997801d2639eb94b4d225fcefe335" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; floats from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= &lt;code&gt;src.remaining()&lt;/code&gt; は、各バッファーの現在の位置から開始して、指定されたバッファーからこのバッファーに浮動します。次に、両方のバッファの位置が次のように増分されます。</target>
        </trans-unit>
        <trans-unit id="c1f1ac87c508781c2c937813352f423c40b5e590" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; ints from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= &lt;code&gt;src.remaining()&lt;/code&gt; は、各バッファーの現在の位置から開始して、指定されたバッファーからこのバッファーにintsします。次に、両方のバッファの位置が次のように増分されます。</target>
        </trans-unit>
        <trans-unit id="1692b1504c9da0451bcfce3c110d60affb2641da" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; longs from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= &lt;code&gt;src.remaining()&lt;/code&gt; は、各バッファーの現在位置から開始して、指定されたバッファーからこのバッファーにlongします。次に、両方のバッファの位置が次のように増分されます。</target>
        </trans-unit>
        <trans-unit id="cd0a9f2c8f1162d98a7f1d49d63febb05cb8a2a3" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;src.remaining()&lt;/code&gt; shorts from the given buffer into this buffer, starting at each buffer's current position. The positions of both buffers are then incremented by</source>
          <target state="translated">= &lt;code&gt;src.remaining()&lt;/code&gt; は、各バッファーの現在の位置から開始して、指定されたバッファーからこのバッファーにショートします。次に、両方のバッファの位置が次のように増分されます。</target>
        </trans-unit>
        <trans-unit id="a28ac76ff95178f962891214ed2bbdcac540aca1" translate="yes" xml:space="preserve">
          <source>= = &quot;NoMoreOftenThan&quot; and now &amp;lt; 'lastPersistTime' + 'persistPeriod'</source>
          <target state="translated">= = &quot;NoMoreOftenThan&quot;そして今&amp;lt;'lastPersistTime' + 'persistPeriod'</target>
        </trans-unit>
        <trans-unit id="254ea32e3f14a1b61854947afe774fcefe8a0c78" translate="yes" xml:space="preserve">
          <source>= = &quot;onTimer&quot; &amp;amp;&amp;amp; now &amp;lt; 'lastPersistTime' + 'persistPeriod'</source>
          <target state="translated">= = &quot;onTimer&quot; &amp;amp;&amp;amp; now &amp;lt;'lastPersistTime' + 'persistPeriod'</target>
        </trans-unit>
        <trans-unit id="2bcaf237b85571232711954ab87fc5fd94e1a619" translate="yes" xml:space="preserve">
          <source>=&amp;gt; &lt;code&gt;JSpinner.DefaultEditor&lt;/code&gt;</source>
          <target state="translated">=&amp;gt; &lt;code&gt;JSpinner.DefaultEditor&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5bab61eb53176449e25c2c82f172b82cb13ffb9d" translate="yes" xml:space="preserve">
          <source>?</source>
          <target state="translated">?</target>
        </trans-unit>
        <trans-unit id="a347759e33ed1f6c135c01aa7eadad17f6a3c812" translate="yes" xml:space="preserve">
          <source>? There must be at least one digit to represent the fractional part, and beyond that as many, but only as many, more digits as are needed to uniquely distinguish the argument value from adjacent values of type &lt;code&gt;double&lt;/code&gt;. That is, suppose that</source>
          <target state="translated">？小数部を表すには少なくとも1桁が必要です。それを超えると、引数値を &lt;code&gt;double&lt;/code&gt; 型の隣接する値から一意に区別するために必要な桁数だけ増えます。つまり、</target>
        </trans-unit>
        <trans-unit id="a8cba9ed9d4d1b9f27317f69c50ee4ed11419a1d" translate="yes" xml:space="preserve">
          <source>? There must be at least one digit to represent the fractional part, and beyond that as many, but only as many, more digits as are needed to uniquely distinguish the argument value from adjacent values of type &lt;code&gt;float&lt;/code&gt;. That is, suppose that</source>
          <target state="translated">？小数部を表すには、少なくとも1桁が必要です。それを超えると、引数の値を &lt;code&gt;float&lt;/code&gt; 型の隣接する値から一意に区別するために必要な桁数だけ増えます。つまり、</target>
        </trans-unit>
        <trans-unit id="15f3b821260db2ca1c7758c5f916d3d2b52e3e9b" translate="yes" xml:space="preserve">
          <source>@author name-text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1cd2b5c8f6f04e0c39c9b50da887cb3cad059d81" translate="yes" xml:space="preserve">
          <source>@deprecated deprecated text.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="03aef64fc744318465ba3a2878cdbc19e8eea2d5" translate="yes" xml:space="preserve">
          <source>@exception class-name description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fbaac2863fb12addd4b0b3837da31ff8d17ce2a" translate="yes" xml:space="preserve">
          <source>@hidden</source>
          <target state="translated">@hidden</target>
        </trans-unit>
        <trans-unit id="c272289abfdcaea6377ba614cb382ab6a57fb7e8" translate="yes" xml:space="preserve">
          <source>@name content</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6fa071bacd83a486e630de18fc2015a0b263c087" translate="yes" xml:space="preserve">
          <source>@param parameter-name description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5fda16d274e881fdd170cd61ce0a52074594024b" translate="yes" xml:space="preserve">
          <source>@provides service-type description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c08eb1126bdbda59374bf0333d2ccf2b6ba81215" translate="yes" xml:space="preserve">
          <source>@return description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="24cf082b1ecc502333000beffcc16ba898bc39ed" translate="yes" xml:space="preserve">
          <source>@see &quot;string&quot;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="df31f985c2e20c8f6eaf1acff94ffe9d6bc7ef92" translate="yes" xml:space="preserve">
          <source>@see &amp;lt;a href=&quot;URL#value&quot;&amp;gt; label &amp;lt;/a&amp;gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9b58e7dc60678b30037413a45586aaa9916a6dc0" translate="yes" xml:space="preserve">
          <source>@see reference</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1f5c47e99707a1f88929ec2ddd451ccf2963a1a4" translate="yes" xml:space="preserve">
          <source>@serial field-description | include | exclude</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="11fb65f45492a421be3b423f630df38abac342da" translate="yes" xml:space="preserve">
          <source>@serialData data-description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="8187e9cc80f9b9e1db8e8925e35de900da634e7e" translate="yes" xml:space="preserve">
          <source>@serialField field-name field-type field-description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa53138709b96b606e9223e4a2c3c0543e5b00a5" translate="yes" xml:space="preserve">
          <source>@since since-text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af0e272a0735684783c41b93234036e9c69f1c9e" translate="yes" xml:space="preserve">
          <source>@throws class-name description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f97d76e9c2c971866ae75d0a6dba78d8f7e1c78" translate="yes" xml:space="preserve">
          <source>@uses service-type description</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a056b91042dc8278bd0fd8fd9653e8fcc32e2e0c" translate="yes" xml:space="preserve">
          <source>@version version-text</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6dcd4ce23d88e2ee9568ba546c007c63d9131c1b" translate="yes" xml:space="preserve">
          <source>A</source>
          <target state="translated">A</target>
        </trans-unit>
        <trans-unit id="5513e4eb0c8216dc7136f185aa48f14223d55392" translate="yes" xml:space="preserve">
          <source>A &quot;&lt;em&gt;spurious wakeup&lt;/em&gt;&quot; occurs.</source>
          <target state="translated">「&lt;em&gt;偽のウェイクアップ&lt;/em&gt;」が発生します。</target>
        </trans-unit>
        <trans-unit id="0f3349c60554425c5718ffb5eb59dfc83572efa4" translate="yes" xml:space="preserve">
          <source>A &quot;PropertyChange&quot; event gets delivered whenever a bean changes a &quot;bound&quot; or &quot;constrained&quot; property.</source>
          <target state="translated">PropertyChange &quot;イベントは、ビーンが &quot;bound &quot;または &quot;constrained &quot;プロパティを変更するたびに配信されます。</target>
        </trans-unit>
        <trans-unit id="641c6959c3dfc13b48a4945e633e5452ededb36f" translate="yes" xml:space="preserve">
          <source>A &quot;PropertyChange&quot; event gets delivered whenever a bean changes a &quot;bound&quot; or &quot;constrained&quot; property. A PropertyChangeEvent object is sent as an argument to the PropertyChangeListener and VetoableChangeListener methods.</source>
          <target state="translated">PropertyChange &quot;イベントは、ビーンが &quot;bound &quot;または &quot;constrained &quot;プロパティを変更するたびに配信されます。PropertyChangeEventオブジェクトは、PropertyChangeListenerおよびVetoableChangeListenerメソッドへの引数として送られます。</target>
        </trans-unit>
        <trans-unit id="4df819facc660a51f8d27eeac2181a40009a4e9e" translate="yes" xml:space="preserve">
          <source>A &quot;PropertyChange&quot; event gets fired whenever a bean changes a &quot;bound&quot; property.</source>
          <target state="translated">PropertyChange &quot;イベントは、ビーンが &quot;bound &quot;プロパティを変更するたびに発生します。</target>
        </trans-unit>
        <trans-unit id="748edf61f82044c2de9355255e500dd4fa92c8f4" translate="yes" xml:space="preserve">
          <source>A &quot;PropertyChange&quot; event gets fired whenever a bean changes a &quot;bound&quot; property. You can register a PropertyChangeListener with a source bean so as to be notified of any bound property updates.</source>
          <target state="translated">PropertyChange &quot;イベントは、ビーンが &quot;バインドされた &quot;プロパティを変更するたびに発生します。バインドされたプロパティの更新を通知されるように、ソースビーンにPropertyChangeListenerを登録することができます。</target>
        </trans-unit>
        <trans-unit id="74477595da6a327ec1904f24675655777c0cd5a0" translate="yes" xml:space="preserve">
          <source>A &quot;equal to&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class  javax.management.BinaryRelQueryExp with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;query#EQ&quot;&gt;&lt;code&gt;EQ&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数の「等しい」制約。返されたオブジェクトは、 &lt;code&gt;relOp&lt;/code&gt; が&lt;a href=&quot;query#EQ&quot;&gt; &lt;code&gt;EQ&lt;/code&gt; に&lt;/a&gt;等しい非パブリッククラスjavax.management.BinaryRelQueryExpのインスタンスとしてシリアル化されます。</target>
        </trans-unit>
        <trans-unit id="806135f1a52f04469e38ea2065903e0417612389" translate="yes" xml:space="preserve">
          <source>A &quot;equal to&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class &lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt; javax.management.BinaryRelQueryExp&lt;/a&gt; with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;#EQ&quot;&gt;&lt;code&gt;EQ&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数に対する「等しい」制約。返されたオブジェクトは、&lt;a href=&quot;#EQ&quot;&gt; &lt;code&gt;EQ&lt;/code&gt; に&lt;/a&gt;等しい &lt;code&gt;relOp&lt;/code&gt; を持つ非パブリッククラス&lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt;javax.management.BinaryRelQueryExpの&lt;/a&gt;インスタンスとしてシリアル化されます。</target>
        </trans-unit>
        <trans-unit id="1ed5ff3c67d78ecde9fc5f98ceeda9d337712b20" translate="yes" xml:space="preserve">
          <source>A &quot;equal to&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class &lt;a href=&quot;https://docs.oracle.com/en/java/javase/15/docs/api/serialized-form.html#javax.management.BinaryRelQueryExp&quot;&gt; javax.management.BinaryRelQueryExp&lt;/a&gt; with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;#EQ&quot;&gt;&lt;code&gt;EQ&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0de043fb0225053ecca95aaef17dc683110891a0" translate="yes" xml:space="preserve">
          <source>A &quot;greater than or equal to&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class  javax.management.BinaryRelQueryExp with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;query#GE&quot;&gt;&lt;code&gt;GE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数の「以上」制約。返されたオブジェクトは、 &lt;code&gt;relOp&lt;/code&gt; が&lt;a href=&quot;query#GE&quot;&gt; &lt;code&gt;GE&lt;/code&gt; &lt;/a&gt;の非パブリッククラスjavax.management.BinaryRelQueryExpのインスタンスとしてシリアル化されます。</target>
        </trans-unit>
        <trans-unit id="bc3ecdef79ff1bfb9f7d7207928bcd10d5350dba" translate="yes" xml:space="preserve">
          <source>A &quot;greater than or equal to&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class &lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt; javax.management.BinaryRelQueryExp&lt;/a&gt; with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;#GE&quot;&gt;&lt;code&gt;GE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数に対する「以上」の制約。返されるオブジェクトは、&lt;a href=&quot;#GE&quot;&gt; &lt;code&gt;GE&lt;/code&gt; に&lt;/a&gt;等しい &lt;code&gt;relOp&lt;/code&gt; を持つ非パブリッククラス&lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt;javax.management.BinaryRelQueryExpの&lt;/a&gt;インスタンスとしてシリアル化されます。</target>
        </trans-unit>
        <trans-unit id="30e92115d38ed4025e2785d408473123f1a7397b" translate="yes" xml:space="preserve">
          <source>A &quot;greater than or equal to&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class &lt;a href=&quot;https://docs.oracle.com/en/java/javase/15/docs/api/serialized-form.html#javax.management.BinaryRelQueryExp&quot;&gt; javax.management.BinaryRelQueryExp&lt;/a&gt; with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;#GE&quot;&gt;&lt;code&gt;GE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a884531a739aabf42ac28cb17e1de598cfc3b3bc" translate="yes" xml:space="preserve">
          <source>A &quot;greater than&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class  javax.management.BinaryRelQueryExp with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;query#GT&quot;&gt;&lt;code&gt;GT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数に対する「より大きい」制約。返されたオブジェクトは、&lt;a href=&quot;query#GT&quot;&gt; &lt;code&gt;GT&lt;/code&gt; に&lt;/a&gt;等しい &lt;code&gt;relOp&lt;/code&gt; を持つ非パブリッククラスjavax.management.BinaryRelQueryExpのインスタンスとしてシリアル化されます。</target>
        </trans-unit>
        <trans-unit id="cbfa98504026d3c18ee01d321f7bdf3ec1d4c1cc" translate="yes" xml:space="preserve">
          <source>A &quot;greater than&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class &lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt; javax.management.BinaryRelQueryExp&lt;/a&gt; with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;#GT&quot;&gt;&lt;code&gt;GT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数に対する「より大きい」制約。返されるオブジェクトは、&lt;a href=&quot;#GT&quot;&gt; &lt;code&gt;GT&lt;/code&gt; に&lt;/a&gt;等しい &lt;code&gt;relOp&lt;/code&gt; を持つ非パブリッククラス&lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt;javax.management.BinaryRelQueryExpの&lt;/a&gt;インスタンスとしてシリアル化されます。</target>
        </trans-unit>
        <trans-unit id="9f16235603e635b49d5a2e98e30ed6692ea6a533" translate="yes" xml:space="preserve">
          <source>A &quot;greater than&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class &lt;a href=&quot;https://docs.oracle.com/en/java/javase/15/docs/api/serialized-form.html#javax.management.BinaryRelQueryExp&quot;&gt; javax.management.BinaryRelQueryExp&lt;/a&gt; with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;#GT&quot;&gt;&lt;code&gt;GT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="da25afbc37982ef7e00ed1ad8dc107c0b3a9335b" translate="yes" xml:space="preserve">
          <source>A &quot;less than or equal to&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class  javax.management.BinaryRelQueryExp with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;query#LE&quot;&gt;&lt;code&gt;LE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数に対する「以下」制約。返されたオブジェクトは、非公開クラスjavax.management.BinaryRelQueryExpのインスタンスとして直列化され、 &lt;code&gt;relOp&lt;/code&gt; が&lt;a href=&quot;query#LE&quot;&gt; &lt;code&gt;LE&lt;/code&gt; に&lt;/a&gt;等しくなります。</target>
        </trans-unit>
        <trans-unit id="b969cef0427ec7ab5db2c26f93f14dd1c4bde6b9" translate="yes" xml:space="preserve">
          <source>A &quot;less than or equal to&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class &lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt; javax.management.BinaryRelQueryExp&lt;/a&gt; with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;#LE&quot;&gt;&lt;code&gt;LE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数に対する「以下」の制約。返されるオブジェクトは、&lt;a href=&quot;#LE&quot;&gt; &lt;code&gt;LE&lt;/code&gt; に&lt;/a&gt;等しい &lt;code&gt;relOp&lt;/code&gt; を持つ非パブリッククラス&lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt;javax.management.BinaryRelQueryExpの&lt;/a&gt;インスタンスとしてシリアル化されます。</target>
        </trans-unit>
        <trans-unit id="b5a75e5ad27b31129ef39f99ab6b0e1f04fbe0b4" translate="yes" xml:space="preserve">
          <source>A &quot;less than or equal to&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class &lt;a href=&quot;https://docs.oracle.com/en/java/javase/15/docs/api/serialized-form.html#javax.management.BinaryRelQueryExp&quot;&gt; javax.management.BinaryRelQueryExp&lt;/a&gt; with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;#LE&quot;&gt;&lt;code&gt;LE&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="be9fee56b89e6dfc556451a6459fb3114cf7cfdb" translate="yes" xml:space="preserve">
          <source>A &quot;less than&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class  javax.management.BinaryRelQueryExp with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;query#LT&quot;&gt;&lt;code&gt;LT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数に対する「小なり」制約。返されたオブジェクトは、&lt;a href=&quot;query#LT&quot;&gt; &lt;code&gt;LT&lt;/code&gt; に&lt;/a&gt;等しい &lt;code&gt;relOp&lt;/code&gt; を持つ非パブリッククラスjavax.management.BinaryRelQueryExpのインスタンスとしてシリアル化されます。</target>
        </trans-unit>
        <trans-unit id="2e39b3bbfebf627cec72762c22afa78146b9d831" translate="yes" xml:space="preserve">
          <source>A &quot;less than&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class &lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt; javax.management.BinaryRelQueryExp&lt;/a&gt; with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;#LT&quot;&gt;&lt;code&gt;LT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">引数に対する「未満」の制約。返されるオブジェクトは、&lt;a href=&quot;#LT&quot;&gt; &lt;code&gt;LT&lt;/code&gt; に&lt;/a&gt;等しい &lt;code&gt;relOp&lt;/code&gt; を持つ非パブリッククラス&lt;a href=&quot;../../serialized-form#javax.management.BinaryRelQueryExp&quot;&gt;javax.management.BinaryRelQueryExpの&lt;/a&gt;インスタンスとしてシリアル化されます。</target>
        </trans-unit>
        <trans-unit id="dbb9a8cd549a01665c423542556bc9c1bc768c7b" translate="yes" xml:space="preserve">
          <source>A &quot;less than&quot; constraint on the arguments. The returned object will be serialized as an instance of the non-public class &lt;a href=&quot;https://docs.oracle.com/en/java/javase/15/docs/api/serialized-form.html#javax.management.BinaryRelQueryExp&quot;&gt; javax.management.BinaryRelQueryExp&lt;/a&gt; with a &lt;code&gt;relOp&lt;/code&gt; equal to &lt;a href=&quot;#LT&quot;&gt;&lt;code&gt;LT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="de08da0a62465d61a02c69fc3c0e07a5ba4bf8d3" translate="yes" xml:space="preserve">
          <source>A &quot;main&quot; &lt;code&gt;ForkJoinTask&lt;/code&gt; begins execution when it is explicitly submitted to a &lt;a href=&quot;forkjoinpool&quot;&gt;&lt;code&gt;ForkJoinPool&lt;/code&gt;&lt;/a&gt;, or, if not already engaged in a ForkJoin computation, commenced in the &lt;a href=&quot;forkjoinpool#commonPool()&quot;&gt;&lt;code&gt;ForkJoinPool.commonPool()&lt;/code&gt;&lt;/a&gt; via &lt;a href=&quot;#fork()&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#invoke()&quot;&gt;&lt;code&gt;invoke()&lt;/code&gt;&lt;/a&gt;, or related methods. Once started, it will usually in turn start other subtasks. As indicated by the name of this class, many programs using &lt;code&gt;ForkJoinTask&lt;/code&gt; employ only methods &lt;a href=&quot;#fork()&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#join()&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt;, or derivatives such as &lt;a href=&quot;#invokeAll(java.util.concurrent.ForkJoinTask...)&quot;&gt;&lt;code&gt;invokeAll&lt;/code&gt;&lt;/a&gt;. However, this class also provides a number of other methods that can come into play in advanced usages, as well as extension mechanics that allow support of new forms of fork/join processing.</source>
          <target state="translated">「メイン」の &lt;code&gt;ForkJoinTask&lt;/code&gt; は、&lt;a href=&quot;forkjoinpool&quot;&gt; &lt;code&gt;ForkJoinPool&lt;/code&gt; に&lt;/a&gt;明示的に送信されたとき、またはForkJoin計算にまだ関与していない場合は、&lt;a href=&quot;#fork()&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#invoke()&quot;&gt; &lt;code&gt;invoke()&lt;/code&gt; &lt;/a&gt;、または関連メソッドを介して&lt;a href=&quot;forkjoinpool#commonPool()&quot;&gt; &lt;code&gt;ForkJoinPool.commonPool()&lt;/code&gt; &lt;/a&gt;で開始されたときに実行を開始します。開始すると、通常は他のサブタスクを開始します。このクラスの名前で示されているように、 &lt;code&gt;ForkJoinTask&lt;/code&gt; を使用する多くのプログラムは、メソッド&lt;a href=&quot;#fork()&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#join()&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;#invokeAll(java.util.concurrent.ForkJoinTask...)&quot;&gt; &lt;code&gt;invokeAll&lt;/code&gt; &lt;/a&gt;などの派生物のみを使用します。。ただし、このクラスは、高度な使用法で使用できる他の多くのメソッドや、新しい形式のフォーク/結合処理のサポートを可能にする拡張メカニズムも提供します。</target>
        </trans-unit>
        <trans-unit id="c02a3212a46bc55a239d47bafb8d0b6642e57a37" translate="yes" xml:space="preserve">
          <source>A &quot;main&quot; &lt;code&gt;ForkJoinTask&lt;/code&gt; begins execution when it is explicitly submitted to a &lt;a href=&quot;forkjoinpool&quot;&gt;&lt;code&gt;ForkJoinPool&lt;/code&gt;&lt;/a&gt;, or, if not already engaged in a ForkJoin computation, commenced in the &lt;a href=&quot;forkjoinpool#commonPool--&quot;&gt;&lt;code&gt;ForkJoinPool.commonPool()&lt;/code&gt;&lt;/a&gt; via &lt;a href=&quot;forkjointask#fork--&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;forkjointask#invoke--&quot;&gt;&lt;code&gt;invoke()&lt;/code&gt;&lt;/a&gt;, or related methods. Once started, it will usually in turn start other subtasks. As indicated by the name of this class, many programs using &lt;code&gt;ForkJoinTask&lt;/code&gt; employ only methods &lt;a href=&quot;forkjointask#fork--&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;forkjointask#join--&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt;, or derivatives such as &lt;a href=&quot;forkjointask#invokeAll-java.util.concurrent.ForkJoinTask...-&quot;&gt;&lt;code&gt;invokeAll&lt;/code&gt;&lt;/a&gt;. However, this class also provides a number of other methods that can come into play in advanced usages, as well as extension mechanics that allow support of new forms of fork/join processing.</source>
          <target state="translated">「メイン」の &lt;code&gt;ForkJoinTask&lt;/code&gt; は、明示的に&lt;a href=&quot;forkjoinpool&quot;&gt; &lt;code&gt;ForkJoinPool&lt;/code&gt; &lt;/a&gt;に送信されるか、まだForkJoin計算に従事していない場合は、&lt;a href=&quot;forkjointask#fork--&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;forkjointask#invoke--&quot;&gt; &lt;code&gt;invoke()&lt;/code&gt; &lt;/a&gt;、または関連メソッドを介して&lt;a href=&quot;forkjoinpool#commonPool--&quot;&gt; &lt;code&gt;ForkJoinPool.commonPool()&lt;/code&gt; &lt;/a&gt;で開始されると、実行を開始します。いったん開始すると、通常は次に他のサブタスクを開始します。このクラスの名前が示すように、 &lt;code&gt;ForkJoinTask&lt;/code&gt; を使用する多くのプログラムは、メソッド&lt;a href=&quot;forkjointask#fork--&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;forkjointask#join--&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;forkjointask#invokeAll-java.util.concurrent.ForkJoinTask...-&quot;&gt; &lt;code&gt;invokeAll&lt;/code&gt; &lt;/a&gt;などの派生物のみを使用します。ただし、このクラスは、高度な使用法で機能する他の多くのメソッドと、新しい形式のフォーク/結合処理のサポートを可能にする拡張メカニズムも提供します。</target>
        </trans-unit>
        <trans-unit id="dc943e5cfb69961b43a73ba91cd6046c46d3cf2b" translate="yes" xml:space="preserve">
          <source>A &quot;plain&quot; socket implements these methods exactly as described, without attempting to go through a firewall or proxy.</source>
          <target state="translated">プレーン」ソケットは、ファイアウォールやプロキシを経由することなく、説明した通りにこれらのメソッドを実装しています。</target>
        </trans-unit>
        <trans-unit id="714027f0d67b1bf8b96c8ccc0f216b5a66a47b26" translate="yes" xml:space="preserve">
          <source>A &quot;pluggable look and feel&quot; (L&amp;amp;F) that can be specified by the programmer or (optionally) selected by the user at runtime. The look and feel for each component is provided by a &lt;em&gt;UI delegate&lt;/em&gt; -- an object that descends from &lt;a href=&quot;plaf/componentui&quot;&gt;&lt;code&gt;ComponentUI&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html&quot;&gt;How to Set the Look and Feel&lt;/a&gt; in &lt;em&gt;The Java Tutorial&lt;/em&gt; for more information.</source>
          <target state="translated">プログラマーが指定できる、または（オプションで）実行時にユーザーが選択できる「プラグ可能なルックアンドフィール」（L＆F）。各コンポーネントのルックアンドフィールは、&lt;em&gt;UIデリゲート（&lt;/em&gt;&lt;a href=&quot;plaf/componentui&quot;&gt; &lt;code&gt;ComponentUI&lt;/code&gt; の&lt;/a&gt;子孫であるオブジェクト）によって提供されます。詳細については&lt;em&gt;、Javaチュートリアルの&lt;/em&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html&quot;&gt;ルックアンドフィールを設定する方法を&lt;/a&gt;参照してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="64fea0e13f24284a3ee7c08b16bf7442f65bbb63" translate="yes" xml:space="preserve">
          <source>A &quot;pluggable look and feel&quot; (L&amp;amp;F) that can be specified by the programmer or (optionally) selected by the user at runtime. The look and feel for each component is provided by a &lt;em&gt;UI delegate&lt;/em&gt; -- an object that descends from &lt;a href=&quot;plaf/componentui&quot;&gt;&lt;code&gt;ComponentUI&lt;/code&gt;&lt;/a&gt;. See &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html&quot;&gt;How to Set the Look and Feel&lt;/a&gt; in &lt;em&gt;The Java Tutorial&lt;/em&gt; for more information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9465dad66907e5534f8ce78f8a2bcc5366eb7d63" translate="yes" xml:space="preserve">
          <source>A &quot;provides service-name with implementation-name&quot; directive.</source>
          <target state="translated">サービス名を実装名で提供する」ディレクティブです。</target>
        </trans-unit>
        <trans-unit id="c7bcf1682006ae246b205c9162c9f0602f85cd20" translate="yes" xml:space="preserve">
          <source>A &quot;requires (static|transitive)* module-name&quot; directive.</source>
          <target state="translated">requires (static|transitive)*module-name&quot; ディレクティブ。</target>
        </trans-unit>
        <trans-unit id="8a7bdab095c6dd95a987d94861c32e7a52ed7eff" translate="yes" xml:space="preserve">
          <source>A &quot;root class&quot; is determined as follows: if the remote object's class directly implements an interface that extends &lt;a href=&quot;../remote&quot;&gt;&lt;code&gt;Remote&lt;/code&gt;&lt;/a&gt;, then the remote object's class is the root class; otherwise, the root class is the most derived superclass of the remote object's class that directly implements an interface that extends &lt;code&gt;Remote&lt;/code&gt;.</source>
          <target state="translated">「ルートクラス」は次のように決定されます。リモートオブジェクトのクラスが&lt;a href=&quot;../remote&quot;&gt; &lt;code&gt;Remote&lt;/code&gt; &lt;/a&gt;を拡張するインターフェイスを直接実装している場合、リモートオブジェクトのクラスはルートクラスです。それ以外の場合、ルートクラスは、 &lt;code&gt;Remote&lt;/code&gt; を拡張するインターフェイスを直接実装するリモートオブジェクトのクラスの最も派生したスーパークラスです。</target>
        </trans-unit>
        <trans-unit id="d3b2b197c97d0a70f7eb09f20de7797275be9cab" translate="yes" xml:space="preserve">
          <source>A &quot;uses service-name&quot; directive.</source>
          <target state="translated">uses service-name&quot; ディレクティブ。</target>
        </trans-unit>
        <trans-unit id="28b9590fb34dc6e99ef9e2f2fa6e5db1aa5e5d57" translate="yes" xml:space="preserve">
          <source>A 'normal' user exception occurred.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ba532363ce1d66c2c8ccfa4e11dfa3d0986d92e2" translate="yes" xml:space="preserve">
          <source>A 'requires' directive (irrespective of 'transitive') expresses that one module depends on some other module. The effect of the 'transitive' modifier is to cause additional modules to also depend on the other module. If module M 'requires transitive N', then not only does M depend on N, but any module that depends on M also depends on N. This allows M to be refactored so that some or all of its content can be moved to a new module N without breaking modules that have a 'requires M' directive.</source>
          <target state="translated">requires' ディレクティブは('transitive' に関係なく)あるモジュールが他のモジュールに依存していることを表現します。'transitive' 修飾子の効果は、追加のモジュールが他のモジュールにも依存することを意味します。モジュール M が 'transitive N' を必要とする場合、M は N に依存するだけでなく、M に依存するモジュールも N に依存します。</target>
        </trans-unit>
        <trans-unit id="9428d7434c49a807b44f9ca3264e255b1193cd1f" translate="yes" xml:space="preserve">
          <source>A (Notification, Listener ID) pair.</source>
          <target state="translated">A(通知、リスナーID)のペア。</target>
        </trans-unit>
        <trans-unit id="2f407ba41c22ce011c5499faf836fd2378747934" translate="yes" xml:space="preserve">
          <source>A (transparent) specification of cryptographic parameters.</source>
          <target state="translated">暗号パラメータの(透過的な)指定。</target>
        </trans-unit>
        <trans-unit id="58e3837094f5b54f63ba78d8733c9477066d3bba" translate="yes" xml:space="preserve">
          <source>A (transparent) specification of the key material that constitutes a cryptographic key.</source>
          <target state="translated">暗号鍵を構成する鍵材料の(透過的な)指定。</target>
        </trans-unit>
        <trans-unit id="8a0daedd32e98b9659cc4c7bd3330fef767ba115" translate="yes" xml:space="preserve">
          <source>A 10Mb JAR packed without this limit will typically pack about 10% smaller, but the packer may require a larger Java heap (about ten times the segment limit).</source>
          <target state="translated">この制限なしにパックされた10MbのJARは、通常は約10%小さくパックされますが、パッカーはより大きなJavaヒープ(セグメント制限の約10倍)を必要とする場合があります。</target>
        </trans-unit>
        <trans-unit id="05bf1a9a5d16275ca3c45ce8c10234dc159e4f35" translate="yes" xml:space="preserve">
          <source>A 3-element &lt;code&gt;float&lt;/code&gt; array containing the x, y, and z components of the profile's &lt;code&gt;mediaWhitePointTag&lt;/code&gt;.</source>
          <target state="translated">プロファイルの &lt;code&gt;mediaWhitePointTag&lt;/code&gt; のx、y、zコンポーネントを含む3要素の &lt;code&gt;float&lt;/code&gt; 配列。</target>
        </trans-unit>
        <trans-unit id="91ecface88db4fa194df61b4808b90c9557ce239" translate="yes" xml:space="preserve">
          <source>A 3x3 &lt;code&gt;float&lt;/code&gt; array that contains the x, y, and z components of the profile's &lt;code&gt;redColorantTag&lt;/code&gt;, &lt;code&gt;greenColorantTag&lt;/code&gt;, and &lt;code&gt;blueColorantTag&lt;/code&gt;.</source>
          <target state="translated">プロファイルの &lt;code&gt;redColorantTag&lt;/code&gt; 、 &lt;code&gt;greenColorantTag&lt;/code&gt; 、および &lt;code&gt;blueColorantTag&lt;/code&gt; のx、y、およびzコンポーネントを含む3x3 &lt;code&gt;float&lt;/code&gt; 配列。</target>
        </trans-unit>
        <trans-unit id="ad169425f469f5721472a7f8f45b5e8885e3e53c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#GARBAGE_COLLECTION_NOTIFICATION&quot;&gt;garbage collection notification&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d5ed81011075464149b1976fc773bb87522058f6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#MEMORY_COLLECTION_THRESHOLD_EXCEEDED&quot;&gt;&lt;code&gt;collection usage threshold exceeded notification&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#MEMORY_COLLECTION_THRESHOLD_EXCEEDED&quot;&gt; &lt;code&gt;collection usage threshold exceeded notification&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ff3aed431ec27dfe240376bb132bbe524b2aa31f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#MEMORY_THRESHOLD_EXCEEDED&quot;&gt;&lt;code&gt;usage threshold exceeded notification&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#MEMORY_THRESHOLD_EXCEEDED&quot;&gt; &lt;code&gt;usage threshold exceeded notification&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="965f439c423479a4189eafcf9eab717600faf4ad" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;#matches(java.lang.String,java.lang.CharSequence)&quot;&gt;&lt;code&gt;matches&lt;/code&gt;&lt;/a&gt; method is defined by this class as a convenience for when a regular expression is used just once. This method compiles an expression and matches an input sequence against it in a single invocation. The statement</source>
          <target state="translated">&lt;a href=&quot;#matches(java.lang.String,java.lang.CharSequence)&quot;&gt; &lt;code&gt;matches&lt;/code&gt; &lt;/a&gt;方法は、正規表現を一度だけ使用されたときのために便利なように、このクラスで定義されています。このメソッドは、式をコンパイルし、1回の呼び出しで入力シーケンスをその式と照合します。声明</target>
        </trans-unit>
        <trans-unit id="6c54a13b6677108d39955eabbb6233163fad8fc2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../../../../java.security.jgss/org/ietf/jgss/gssexception#NO_CRED&quot;&gt;&lt;code&gt;GSSException.NO_CRED&lt;/code&gt;&lt;/a&gt; will be thrown if the impersonation fails. A &lt;a href=&quot;../../../../../java.security.jgss/org/ietf/jgss/gssexception#FAILURE&quot;&gt;&lt;code&gt;GSSException.FAILURE&lt;/code&gt;&lt;/a&gt; will be thrown if the impersonation method is not available to this credential object.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2e0d5c3149511c61f84a95a5b70167502ac2192f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../../../java.management/javax/management/openmbean/compositedata&quot;&gt;&lt;code&gt;CompositeData&lt;/code&gt;&lt;/a&gt; representing the &lt;code&gt;GarbageCollectionNotificationInfo&lt;/code&gt; object is stored in the &lt;a href=&quot;../../../../java.management/javax/management/notification#setUserData(java.lang.Object)&quot;&gt;userdata&lt;/a&gt; of a &lt;a href=&quot;../../../../java.management/javax/management/notification&quot;&gt;notification&lt;/a&gt;. The &lt;a href=&quot;#from(javax.management.openmbean.CompositeData)&quot;&gt;&lt;code&gt;from&lt;/code&gt;&lt;/a&gt; method is provided to convert from a &lt;code&gt;CompositeData&lt;/code&gt; to a &lt;code&gt;GarbageCollectionNotificationInfo&lt;/code&gt; object. For example:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7e2d5fdb7fc493a397ed2e4debe3a1b2836de31a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../../javax/management/openmbean/compositedata&quot;&gt;&lt;code&gt;CompositeData&lt;/code&gt;&lt;/a&gt; representing the &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; object is stored in the &lt;a href=&quot;../../../javax/management/notification#setUserData(java.lang.Object)&quot;&gt;&lt;code&gt;user data&lt;/code&gt;&lt;/a&gt; of a &lt;a href=&quot;../../../javax/management/notification&quot;&gt;&lt;code&gt;notification&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#from(javax.management.openmbean.CompositeData)&quot;&gt;&lt;code&gt;from&lt;/code&gt;&lt;/a&gt; method is provided to convert from a &lt;code&gt;CompositeData&lt;/code&gt; to a &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; object. For example:</source>
          <target state="translated">A&lt;a href=&quot;../../../javax/management/openmbean/compositedata&quot;&gt; &lt;code&gt;CompositeData&lt;/code&gt; &lt;/a&gt;表す &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; オブジェクトをに格納され&lt;a href=&quot;../../../javax/management/notification#setUserData(java.lang.Object)&quot;&gt; &lt;code&gt;user data&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../../../javax/management/notification&quot;&gt; &lt;code&gt;notification&lt;/code&gt; &lt;/a&gt;。方法は、以下から変換するために提供され &lt;code&gt;CompositeData&lt;/code&gt; へ &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; オブジェクト。例えば：&lt;a href=&quot;#from(javax.management.openmbean.CompositeData)&quot;&gt; &lt;code&gt;from&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1a37cb5a0b97de4647147b96fe32fdde82bc6e05" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../../../javax/management/openmbean/compositedata&quot;&gt;&lt;code&gt;CompositeData&lt;/code&gt;&lt;/a&gt; representing the &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; object is stored in the &lt;a href=&quot;../../../javax/management/notification#setUserData-java.lang.Object-&quot;&gt;&lt;code&gt;user data&lt;/code&gt;&lt;/a&gt; of a &lt;a href=&quot;../../../javax/management/notification&quot;&gt;&lt;code&gt;notification&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;memorynotificationinfo#from-javax.management.openmbean.CompositeData-&quot;&gt;&lt;code&gt;from&lt;/code&gt;&lt;/a&gt; method is provided to convert from a &lt;code&gt;CompositeData&lt;/code&gt; to a &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; object. For example:</source>
          <target state="translated">A &lt;a href=&quot;../../../javax/management/openmbean/compositedata&quot;&gt; &lt;code&gt;CompositeData&lt;/code&gt; &lt;/a&gt;表す &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; オブジェクトをに格納され&lt;a href=&quot;../../../javax/management/notification#setUserData-java.lang.Object-&quot;&gt; &lt;code&gt;user data&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../../../javax/management/notification&quot;&gt; &lt;code&gt;notification&lt;/code&gt; &lt;/a&gt;。方法は、以下から変換するために提供され &lt;code&gt;CompositeData&lt;/code&gt; へ &lt;code&gt;MemoryNotificationInfo&lt;/code&gt; オブジェクト。例えば：&lt;a href=&quot;memorynotificationinfo#from-javax.management.openmbean.CompositeData-&quot;&gt; &lt;code&gt;from&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="a811fb395a0b9a25a42733345d26e124a500bf96" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../constant/package-summary#nominal&quot;&gt;nominal descriptor&lt;/a&gt; for a &lt;a href=&quot;varhandle&quot;&gt;&lt;code&gt;VarHandle&lt;/code&gt;&lt;/a&gt; constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6503faa32cb286134021110311634dfb9c87d502" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../deque&quot;&gt;&lt;code&gt;Deque&lt;/code&gt;&lt;/a&gt; that additionally supports blocking operations that wait for the deque to become non-empty when retrieving an element, and wait for space to become available in the deque when storing an element.</source>
          <target state="translated">A &lt;a href=&quot;../deque&quot;&gt; &lt;code&gt;Deque&lt;/code&gt; &lt;/a&gt;さらに待ち時間が要素の取得時に両端キューのための非空になるために、要素の格納時に両端キューで利用可能になるスペースを待つという操作をブロックしサポートしていること。</target>
        </trans-unit>
        <trans-unit id="63afc8d76194070d365749d60355076276705929" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../guardingdynamiclinker&quot;&gt;&lt;code&gt;GuardingDynamicLinker&lt;/code&gt;&lt;/a&gt; that delegates sequentially to a list of other guarding dynamic linkers in its &lt;a href=&quot;#getGuardedInvocation(jdk.dynalink.linker.LinkRequest,jdk.dynalink.linker.LinkerServices)&quot;&gt;&lt;code&gt;getGuardedInvocation(LinkRequest, LinkerServices)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ad7c60b509d0b1f146c0575bae3be9add45158d9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../guardingdynamiclinker&quot;&gt;&lt;code&gt;GuardingDynamicLinker&lt;/code&gt;&lt;/a&gt; that delegates sequentially to a list of other guarding dynamic linkers in its &lt;a href=&quot;compositeguardingdynamiclinker#getGuardedInvocation(jdk.dynalink.linker.LinkRequest,jdk.dynalink.linker.LinkerServices)&quot;&gt;&lt;code&gt;CompositeGuardingDynamicLinker.getGuardedInvocation(LinkRequest, LinkerServices)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dba6f0c1acf2151ba3a42a66c5c34a8aba57158d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../io/inputstream&quot;&gt;&lt;code&gt;InputStream&lt;/code&gt;&lt;/a&gt; object or &lt;code&gt;null&lt;/code&gt; if no resource with this name is found</source>
          <target state="translated">&lt;a href=&quot;../io/inputstream&quot;&gt; &lt;code&gt;InputStream&lt;/code&gt; &lt;/a&gt;オブジェクトまたは &lt;code&gt;null&lt;/code&gt; のこの名前を持つリソースが見つからない場合</target>
        </trans-unit>
        <trans-unit id="a612fe212b2e0a6a82c1619af955f9181b263640" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../io/inputstream&quot;&gt;&lt;code&gt;InputStream&lt;/code&gt;&lt;/a&gt; object; &lt;code&gt;null&lt;/code&gt; if no resource with this name is found, the resource is in a package that is not &lt;a href=&quot;module#isOpen(java.lang.String,java.lang.Module)&quot;&gt;open&lt;/a&gt; to at least the caller module, or access to the resource is denied by the security manager.</source>
          <target state="translated">A&lt;a href=&quot;../io/inputstream&quot;&gt; &lt;code&gt;InputStream&lt;/code&gt; &lt;/a&gt;オブジェクト。この名前のリソースが見つからない場合、リソースが少なくとも呼び出し元モジュールに対して&lt;a href=&quot;module#isOpen(java.lang.String,java.lang.Module)&quot;&gt;開か&lt;/a&gt;れていないパッケージ内にある場合、またはリソースへのアクセスがセキュリティマネージャによって拒否されている場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d25934cda3a9bfafd7fae12fbc5f6a17dbcc7d6" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; providing thread safety and atomicity guarantees.</source>
          <target state="translated">スレッドの安全性と原子性を保証する&lt;a href=&quot;../map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="62db7b7f9d0139d2e61cb326d0f7b697d1a9d526" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../net/url&quot;&gt;&lt;code&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/code&gt;&lt;/a&gt; object for reading the resource, or &lt;code&gt;null&lt;/code&gt; if the resource could not be found</source>
          <target state="translated">リソースを読み取るための&lt;a href=&quot;../net/url&quot;&gt; &lt;code&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/code&gt; &lt;/a&gt;オブジェクト、またはリソースが見つからなかった場合は &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="92904b2916ccc19475c9d8a05961cc34f9478be0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../net/url&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; object or &lt;code&gt;null&lt;/code&gt; if no resource with this name is found</source>
          <target state="translated">&lt;a href=&quot;../net/url&quot;&gt; &lt;code&gt;URL&lt;/code&gt; の&lt;/a&gt;オブジェクトまたは &lt;code&gt;null&lt;/code&gt; のこの名前を持つリソースが見つからない場合</target>
        </trans-unit>
        <trans-unit id="43e76ed2c2b3fb1bf4caf7d1271322cb62bbd186" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../net/url&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; object; &lt;code&gt;null&lt;/code&gt; if no resource with this name is found, the resource cannot be located by a URL, the resource is in a package that is not &lt;a href=&quot;module#isOpen(java.lang.String,java.lang.Module)&quot;&gt;open&lt;/a&gt; to at least the caller module, or access to the resource is denied by the security manager.</source>
          <target state="translated">&lt;a href=&quot;../net/url&quot;&gt; &lt;code&gt;URL&lt;/code&gt; の&lt;/a&gt;オブジェクト。この名前のリソースが見つからない場合、リソースをURLで見つけることができない場合、リソースが少なくとも呼び出し元モジュールに対して&lt;a href=&quot;module#isOpen(java.lang.String,java.lang.Module)&quot;&gt;開か&lt;/a&gt;れていないパッケージ内にある場合、またはリソースへのアクセスがセキュリティマネージャーによって拒否された場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d71c936b3325c278faa3b09399c0af11c11a9318" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../net/url&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; to the resource; &lt;code&gt;
          null&lt;/code&gt; if the resource could not be found, a URL could not be constructed to locate the resource, the resource is in a package that is not opened unconditionally or access to the resource is denied by the security manager.</source>
          <target state="translated">&lt;a href=&quot;../net/url&quot;&gt; &lt;code&gt;URL&lt;/code&gt; &lt;/a&gt;リソースへ。 &lt;code&gt; null&lt;/code&gt; リソースが見つからなかった場合、リソースを見つけるためのURLを構築できなかった場合、リソースが無条件に開かれていないパッケージ内にある場合、またはリソースへのアクセスがセキュリティマネージャによって拒否された場合。</target>
        </trans-unit>
        <trans-unit id="3b0803c10a5a0b7b7405f75def879d1b018c2de9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../parsers/documentbuilder&quot;&gt;&lt;code&gt;DocumentBuilder&lt;/code&gt;&lt;/a&gt; uses this information to properly implement &lt;a href=&quot;../../../org/w3c/dom/attr#isId()&quot;&gt;&lt;code&gt;Attr.isId()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A&lt;a href=&quot;../parsers/documentbuilder&quot;&gt; &lt;code&gt;DocumentBuilder&lt;/code&gt; &lt;/a&gt;適切に実装するためにこの情報を使用し&lt;a href=&quot;../../../org/w3c/dom/attr#isId()&quot;&gt; &lt;code&gt;Attr.isId()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4ffceb7e507fb0a892fc75dd1e51b54d2140ad41" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../queue&quot;&gt;&lt;code&gt;Queue&lt;/code&gt;&lt;/a&gt; that additionally supports operations that wait for the queue to become non-empty when retrieving an element, and wait for space to become available in the queue when storing an element.</source>
          <target state="translated">要素を取得するときにキューが空でなくなるのを待機し、要素を格納するときにキュー内のスペースが利用可能になるのを待機する操作をさらにサポートする&lt;a href=&quot;../queue&quot;&gt; &lt;code&gt;Queue&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8bf9c6a1bf6c8ca478c3c983832aafa5229fdfdb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../servicenotfoundexception&quot;&gt;&lt;code&gt;ServiceNotFoundException&lt;/code&gt;&lt;/a&gt; if a setMethod field is defined in the descriptor for the attribute and the managed resource is null; or if no setMethod field is defined and caching is not enabled for the attribute. Note that if there is no getMethod field either, then caching is automatically enabled.</source>
          <target state="translated">&lt;a href=&quot;../servicenotfoundexception&quot;&gt; &lt;code&gt;ServiceNotFoundException&lt;/code&gt; &lt;/a&gt;のsetMethodフィールドは属性および管理対象リソースの記述子で定義されている場合はnullです。または、setMethodフィールドが定義されておらず、属性のキャッシングが有効になっていない場合。getMethodフィールドもない場合は、キャッシュが自動的に有効になることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9e09a194da693429884fa3e8508ac4c1d7d8029a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; projection of a ConcurrentHashMap may be created (using &lt;a href=&quot;#newKeySet()&quot;&gt;&lt;code&gt;newKeySet()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#newKeySet(int)&quot;&gt;&lt;code&gt;newKeySet(int)&lt;/code&gt;&lt;/a&gt;), or viewed (using &lt;a href=&quot;#keySet(V)&quot;&gt;&lt;code&gt;keySet(Object)&lt;/code&gt;&lt;/a&gt; when only keys are of interest, and the mapped values are (perhaps transiently) not used or all take the same mapping value.</source>
          <target state="translated">A&lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;のConcurrentHashMapの投影は（使用して作成することができる&lt;a href=&quot;#newKeySet()&quot;&gt; &lt;code&gt;newKeySet()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#newKeySet(int)&quot;&gt; &lt;code&gt;newKeySet(int)&lt;/code&gt; を&lt;/a&gt;使用して（）、または閲覧&lt;a href=&quot;#keySet(V)&quot;&gt; &lt;code&gt;keySet(Object)&lt;/code&gt; &lt;/a&gt;キーのみに関心があり、マップされた値は、（おそらく一時的）使用されるか、または、全てのテイクされていない場合同じマッピング値。</target>
        </trans-unit>
        <trans-unit id="a4e9e19029dbb5add608aa6e16ff760b042947a7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; projection of a ConcurrentHashMap may be created (using &lt;a href=&quot;concurrenthashmap#newKeySet--&quot;&gt;&lt;code&gt;newKeySet()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;concurrenthashmap#newKeySet-int-&quot;&gt;&lt;code&gt;newKeySet(int)&lt;/code&gt;&lt;/a&gt;), or viewed (using &lt;a href=&quot;concurrenthashmap#keySet-V-&quot;&gt;&lt;code&gt;keySet(Object)&lt;/code&gt;&lt;/a&gt; when only keys are of interest, and the mapped values are (perhaps transiently) not used or all take the same mapping value.</source>
          <target state="translated">A &lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;のConcurrentHashMapの投影は（使用して作成することができる&lt;a href=&quot;concurrenthashmap#newKeySet--&quot;&gt; &lt;code&gt;newKeySet()&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;concurrenthashmap#newKeySet-int-&quot;&gt; &lt;code&gt;newKeySet(int)&lt;/code&gt; を&lt;/a&gt;使用して（）、または閲覧&lt;a href=&quot;concurrenthashmap#keySet-V-&quot;&gt; &lt;code&gt;keySet(Object)&lt;/code&gt; &lt;/a&gt;キーのみに関心があり、マップされた値は、（おそらく一時的）使用されるか、または、全てのテイクされていない場合同じマッピング値。</target>
        </trans-unit>
        <trans-unit id="be331f7b5a864efc83138b67a21f7e2fe7ef6ac2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; that uses an internal &lt;a href=&quot;copyonwritearraylist&quot;&gt;&lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;&lt;/a&gt; for all of its operations.</source>
          <target state="translated">&lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;内部使用&lt;a href=&quot;copyonwritearraylist&quot;&gt; &lt;code&gt;CopyOnWriteArrayList&lt;/code&gt; と&lt;/a&gt;その操作のすべてのために。</target>
        </trans-unit>
        <trans-unit id="efb4a8120d13d79cc9dcf294ea51182dad3073dd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; that uses an internal &lt;a href=&quot;copyonwritearraylist&quot;&gt;&lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;&lt;/a&gt; for all of its operations. Thus, it shares the same basic properties:</source>
          <target state="translated">&lt;a href=&quot;../set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;内部使用&lt;a href=&quot;copyonwritearraylist&quot;&gt; &lt;code&gt;CopyOnWriteArrayList&lt;/code&gt; と&lt;/a&gt;その操作のすべてのために。したがって、同じ基本的なプロパティを共有します。</target>
        </trans-unit>
        <trans-unit id="8dbf6d061899ddef03364739ab7eb527a1d175d0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../util/concurrent/completablefuture&quot;&gt;&lt;code&gt;CompletableFuture&lt;/code&gt;&lt;/a&gt; available from &lt;a href=&quot;#onExit()&quot;&gt;&lt;code&gt;onExit()&lt;/code&gt;&lt;/a&gt; can be used to wait for process termination, and possibly trigger dependent actions.</source>
          <target state="translated">A &lt;a href=&quot;../util/concurrent/completablefuture&quot;&gt; &lt;code&gt;CompletableFuture&lt;/code&gt; &lt;/a&gt;から入手可能な&lt;a href=&quot;#onExit()&quot;&gt; &lt;code&gt;onExit()&lt;/code&gt; &lt;/a&gt;プロセスの終了を待ち、そしておそらく依存アクションをトリガするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="277a6a216b99c43ae18f017143f28d3b87ed8ae4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../zoneoffset&quot;&gt;&lt;code&gt;ZoneOffset&lt;/code&gt;&lt;/a&gt; represents the period of time that local time differs from UTC/Greenwich. This is usually a fixed number of hours and minutes. It is equivalent to the &lt;a href=&quot;../zoneoffset#getTotalSeconds()&quot;&gt;&lt;code&gt;total amount&lt;/code&gt;&lt;/a&gt; of the offset in seconds. For example, during the winter Paris has an offset of &lt;code&gt;+01:00&lt;/code&gt;, which is 3600 seconds.</source>
          <target state="translated">A &lt;a href=&quot;../zoneoffset&quot;&gt; &lt;code&gt;ZoneOffset&lt;/code&gt; は&lt;/a&gt;UTC /グリニッジからの現地時間が異なることに時間を表しています。これは通常、固定された時間と分数です。これは、秒単位のオフセットの&lt;a href=&quot;../zoneoffset#getTotalSeconds()&quot;&gt; &lt;code&gt;total amount&lt;/code&gt; &lt;/a&gt;に相当します。たとえば、冬の間、パリには &lt;code&gt;+01:00&lt;/code&gt; のオフセットがあります。これは3600秒です。</target>
        </trans-unit>
        <trans-unit id="3b865fb1319606c6e09017437d962d44df137e3f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;../zoneoffset&quot;&gt;&lt;code&gt;ZoneOffset&lt;/code&gt;&lt;/a&gt; represents the period of time that local time differs from UTC/Greenwich. This is usually a fixed number of hours and minutes. It is equivalent to the &lt;a href=&quot;../zoneoffset#getTotalSeconds--&quot;&gt;&lt;code&gt;total amount&lt;/code&gt;&lt;/a&gt; of the offset in seconds. For example, during the winter Paris has an offset of &lt;code&gt;+01:00&lt;/code&gt;, which is 3600 seconds.</source>
          <target state="translated">A &lt;a href=&quot;../zoneoffset&quot;&gt; &lt;code&gt;ZoneOffset&lt;/code&gt; は&lt;/a&gt; UTC /グリニッジからの現地時間が異なることに時間を表しています。これは通常、固定された時間と分です。秒単位のオフセットの&lt;a href=&quot;../zoneoffset#getTotalSeconds--&quot;&gt; &lt;code&gt;total amount&lt;/code&gt; &lt;/a&gt;に相当します。たとえば、冬の間、パリのオフセットは &lt;code&gt;+01:00&lt;/code&gt; 、つまり3600秒です。</target>
        </trans-unit>
        <trans-unit id="c61e2d7c471ce08f6bc574a15853bccffea04ea0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;blockingqueue&quot;&gt;&lt;code&gt;BlockingQueue&lt;/code&gt;&lt;/a&gt; in which producers may wait for consumers to receive elements.</source>
          <target state="translated">&lt;a href=&quot;blockingqueue&quot;&gt; &lt;code&gt;BlockingQueue&lt;/code&gt; の&lt;/a&gt;消費者が要素を受信するために生産者が待っています。</target>
        </trans-unit>
        <trans-unit id="d2da4722fe3b889a3e89333836804f1518a27ee8" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;blockingqueue&quot;&gt;&lt;code&gt;BlockingQueue&lt;/code&gt;&lt;/a&gt; in which producers may wait for consumers to receive elements. A &lt;code&gt;TransferQueue&lt;/code&gt; may be useful for example in message passing applications in which producers sometimes (using method &lt;a href=&quot;#transfer(E)&quot;&gt;&lt;code&gt;transfer(E)&lt;/code&gt;&lt;/a&gt;) await receipt of elements by consumers invoking &lt;code&gt;take&lt;/code&gt; or &lt;code&gt;poll&lt;/code&gt;, while at other times enqueue elements (via method &lt;code&gt;put&lt;/code&gt;) without waiting for receipt. &lt;a href=&quot;#tryTransfer(E)&quot;&gt;Non-blocking&lt;/a&gt; and &lt;a href=&quot;#tryTransfer(E,long,java.util.concurrent.TimeUnit)&quot;&gt;time-out&lt;/a&gt; versions of &lt;code&gt;tryTransfer&lt;/code&gt; are also available. A &lt;code&gt;TransferQueue&lt;/code&gt; may also be queried, via &lt;a href=&quot;#hasWaitingConsumer()&quot;&gt;&lt;code&gt;hasWaitingConsumer()&lt;/code&gt;&lt;/a&gt;, whether there are any threads waiting for items, which is a converse analogy to a &lt;code&gt;peek&lt;/code&gt; operation.</source>
          <target state="translated">&lt;a href=&quot;blockingqueue&quot;&gt; &lt;code&gt;BlockingQueue&lt;/code&gt; の&lt;/a&gt;消費者が要素を受信するために生産者が待っています。 A &lt;code&gt;TransferQueue&lt;/code&gt; は、メッセージパッシングの応用例に有用であり得るものでプロデューサ時々 （使用方法&lt;a href=&quot;#transfer(E)&quot;&gt; &lt;code&gt;transfer(E)&lt;/code&gt; &lt;/a&gt;）を呼び出す消費者素子のawait受領 &lt;code&gt;take&lt;/code&gt; または &lt;code&gt;poll&lt;/code&gt; 他の時間に（方法を介してエレメントをエンキューでながら、 &lt;code&gt;put&lt;/code&gt; 受信を待たず）。&lt;a href=&quot;#tryTransfer(E)&quot;&gt;ノンブロッキング&lt;/a&gt;と&lt;a href=&quot;#tryTransfer(E,long,java.util.concurrent.TimeUnit)&quot;&gt;タイムアウト&lt;/a&gt;のバージョン &lt;code&gt;tryTransfer&lt;/code&gt; はもご利用いただけます。 A &lt;code&gt;TransferQueue&lt;/code&gt; をも介して、照会されてもよい&lt;a href=&quot;#hasWaitingConsumer()&quot;&gt; &lt;code&gt;hasWaitingConsumer()&lt;/code&gt; &lt;/a&gt;、アイテムを待機しているスレッドがあるかどうか。これは、 &lt;code&gt;peek&lt;/code&gt; 操作とは逆のアナロジーです。</target>
        </trans-unit>
        <trans-unit id="3cd18643ea2f82fbc2020f2325a3e672cf888dae" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;blockingqueue&quot;&gt;&lt;code&gt;BlockingQueue&lt;/code&gt;&lt;/a&gt; in which producers may wait for consumers to receive elements. A &lt;code&gt;TransferQueue&lt;/code&gt; may be useful for example in message passing applications in which producers sometimes (using method &lt;a href=&quot;transferqueue#transfer-E-&quot;&gt;&lt;code&gt;transfer(E)&lt;/code&gt;&lt;/a&gt;) await receipt of elements by consumers invoking &lt;code&gt;take&lt;/code&gt; or &lt;code&gt;poll&lt;/code&gt;, while at other times enqueue elements (via method &lt;code&gt;put&lt;/code&gt;) without waiting for receipt. &lt;a href=&quot;transferqueue#tryTransfer-E-&quot;&gt;Non-blocking&lt;/a&gt; and &lt;a href=&quot;transferqueue#tryTransfer-E-long-java.util.concurrent.TimeUnit-&quot;&gt;time-out&lt;/a&gt; versions of &lt;code&gt;tryTransfer&lt;/code&gt; are also available. A &lt;code&gt;TransferQueue&lt;/code&gt; may also be queried, via &lt;a href=&quot;transferqueue#hasWaitingConsumer--&quot;&gt;&lt;code&gt;hasWaitingConsumer()&lt;/code&gt;&lt;/a&gt;, whether there are any threads waiting for items, which is a converse analogy to a &lt;code&gt;peek&lt;/code&gt; operation.</source>
          <target state="translated">&lt;a href=&quot;blockingqueue&quot;&gt; &lt;code&gt;BlockingQueue&lt;/code&gt; の&lt;/a&gt;消費者が要素を受信するために生産者が待っています。 A &lt;code&gt;TransferQueue&lt;/code&gt; は、メッセージパッシングの応用例に有用であり得るものでプロデューサ時々 （使用方法&lt;a href=&quot;transferqueue#transfer-E-&quot;&gt; &lt;code&gt;transfer(E)&lt;/code&gt; &lt;/a&gt;）を呼び出す消費者素子のawait受領 &lt;code&gt;take&lt;/code&gt; または &lt;code&gt;poll&lt;/code&gt; 他の時間に（方法を介してエレメントをエンキューでながら、 &lt;code&gt;put&lt;/code&gt; 受信を待たず）。&lt;a href=&quot;transferqueue#tryTransfer-E-&quot;&gt;ノンブロッキング&lt;/a&gt;と&lt;a href=&quot;transferqueue#tryTransfer-E-long-java.util.concurrent.TimeUnit-&quot;&gt;タイムアウト&lt;/a&gt;のバージョン &lt;code&gt;tryTransfer&lt;/code&gt; はもご利用いただけます。 A &lt;code&gt;TransferQueue&lt;/code&gt; をも介して、照会されてもよい&lt;a href=&quot;transferqueue#hasWaitingConsumer--&quot;&gt; &lt;code&gt;hasWaitingConsumer()&lt;/code&gt; &lt;/a&gt;、アイテムを待機しているスレッドがあるかどうか。これは、 &lt;code&gt;peek&lt;/code&gt; 操作とは逆です。</target>
        </trans-unit>
        <trans-unit id="ec45ca597ae996747e8a0083bd998a797a9539d5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;blockingqueue&quot;&gt;blocking queue&lt;/a&gt; in which each insert operation must wait for a corresponding remove operation by another thread, and vice versa.</source>
          <target state="translated">各挿入操作が別のスレッドによる対応する削除操作を待機する必要がある、またはその逆の&lt;a href=&quot;blockingqueue&quot;&gt;ブロッキングキュー&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2048d85d25ed94ca6135978e0122e6078feb309a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;blockingqueue&quot;&gt;blocking queue&lt;/a&gt; in which each insert operation must wait for a corresponding remove operation by another thread, and vice versa. A synchronous queue does not have any internal capacity, not even a capacity of one. You cannot &lt;code&gt;peek&lt;/code&gt; at a synchronous queue because an element is only present when you try to remove it; you cannot insert an element (using any method) unless another thread is trying to remove it; you cannot iterate as there is nothing to iterate. The &lt;em&gt;head&lt;/em&gt; of the queue is the element that the first queued inserting thread is trying to add to the queue; if there is no such queued thread then no element is available for removal and &lt;code&gt;poll()&lt;/code&gt; will return &lt;code&gt;null&lt;/code&gt;. For purposes of other &lt;code&gt;Collection&lt;/code&gt; methods (for example &lt;code&gt;contains&lt;/code&gt;), a &lt;code&gt;SynchronousQueue&lt;/code&gt; acts as an empty collection. This queue does not permit &lt;code&gt;null&lt;/code&gt; elements.</source>
          <target state="translated">各挿入操作が別のスレッドによる対応する削除操作を待機する必要がある、またはその逆の&lt;a href=&quot;blockingqueue&quot;&gt;ブロッキングキュー&lt;/a&gt;。同期キューには、内部容量がなく、1の容量すらありません。要素は削除しようとしたときにのみ存在するため、同期キューを &lt;code&gt;peek&lt;/code&gt; ことはできません。別のスレッドが要素を削除しようとしない限り、（任意のメソッドを使用して）要素を挿入することはできません。反復するものがないため、反復することはできません。キューの&lt;em&gt;先頭&lt;/em&gt;は、最初にキューに入れられた挿入スレッドがキューに追加しようとしている要素です。そのようなキューに入れられたスレッドがない場合、削除に使用できる要素はなく、 &lt;code&gt;poll()&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; を返します。他の &lt;code&gt;Collection&lt;/code&gt; ためメソッド（たとえば、 &lt;code&gt;contains&lt;/code&gt; ）では、 &lt;code&gt;SynchronousQueue&lt;/code&gt; は空のコレクションとして機能します。このキューは &lt;code&gt;null&lt;/code&gt; 要素を許可しません。</target>
        </trans-unit>
        <trans-unit id="ab7bc3bd400bf41c2ff2c7269822e90a6f35f53d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;coderresult#malformedForLength(int)&quot;&gt;malformed-input&lt;/a&gt; result indicates that a malformed-input error has been detected. The malformed bytes begin at the input buffer's (possibly incremented) position; the number of malformed bytes may be determined by invoking the result object's &lt;a href=&quot;coderresult#length()&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; method. This case applies only if the &lt;a href=&quot;#onMalformedInput(java.nio.charset.CodingErrorAction)&quot;&gt;malformed action&lt;/a&gt; of this decoder is &lt;a href=&quot;codingerroraction#REPORT&quot;&gt;&lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt;&lt;/a&gt;; otherwise the malformed input will be ignored or replaced, as requested.</source>
          <target state="translated">&lt;a href=&quot;coderresult#malformedForLength(int)&quot;&gt;不正入力&lt;/a&gt;結果が不正入力エラーが検出されたことを示します。不正な形式のバイトは、入力バッファーの（場合によってはインクリメントされた）位置から始まります。不正な形式のバイト数は、結果オブジェクトの&lt;a href=&quot;coderresult#length()&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことで判別できます。このケースは、このデコーダーの&lt;a href=&quot;#onMalformedInput(java.nio.charset.CodingErrorAction)&quot;&gt;不正なアクション&lt;/a&gt;が&lt;a href=&quot;codingerroraction#REPORT&quot;&gt; &lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt; である&lt;/a&gt;場合にのみ適用されます。そうしないと、要求に応じて、不正な入力が無視または置換されます。</target>
        </trans-unit>
        <trans-unit id="d4facc66fd22bee4d4f940ee144b4df7a51ac3ea" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;coderresult#malformedForLength(int)&quot;&gt;malformed-input&lt;/a&gt; result indicates that a malformed-input error has been detected. The malformed characters begin at the input buffer's (possibly incremented) position; the number of malformed characters may be determined by invoking the result object's &lt;a href=&quot;coderresult#length()&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; method. This case applies only if the &lt;a href=&quot;#onMalformedInput(java.nio.charset.CodingErrorAction)&quot;&gt;malformed action&lt;/a&gt; of this encoder is &lt;a href=&quot;codingerroraction#REPORT&quot;&gt;&lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt;&lt;/a&gt;; otherwise the malformed input will be ignored or replaced, as requested.</source>
          <target state="translated">&lt;a href=&quot;coderresult#malformedForLength(int)&quot;&gt;不正入力&lt;/a&gt;結果が不正入力エラーが検出されたことを示します。不正な形式の文字は、入力バッファーの（場合によってはインクリメントされた）位置から始まります。不正な形式の文字の数は、結果オブジェクトの&lt;a href=&quot;coderresult#length()&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって判別できます。このケースは、このエンコーダーの&lt;a href=&quot;#onMalformedInput(java.nio.charset.CodingErrorAction)&quot;&gt;不正なアクション&lt;/a&gt;が&lt;a href=&quot;codingerroraction#REPORT&quot;&gt; &lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt; である&lt;/a&gt;場合にのみ適用されます。そうしないと、要求に応じて、不正な入力が無視または置換されます。</target>
        </trans-unit>
        <trans-unit id="37dc8e605e4b17de4ad0b00e29ff2ed2f0879183" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;coderresult#malformedForLength-int-&quot;&gt;malformed-input&lt;/a&gt; result indicates that a malformed-input error has been detected. The malformed bytes begin at the input buffer's (possibly incremented) position; the number of malformed bytes may be determined by invoking the result object's &lt;a href=&quot;coderresult#length--&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; method. This case applies only if the &lt;a href=&quot;charsetdecoder#onMalformedInput-java.nio.charset.CodingErrorAction-&quot;&gt;malformed action&lt;/a&gt; of this decoder is &lt;a href=&quot;codingerroraction#REPORT&quot;&gt;&lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt;&lt;/a&gt;; otherwise the malformed input will be ignored or replaced, as requested.</source>
          <target state="translated">&lt;a href=&quot;coderresult#malformedForLength-int-&quot;&gt;不正入力&lt;/a&gt;結果が不正入力エラーが検出されたことを示します。不正な形式のバイトは、入力バッファーの（インクリメントされている可能性がある）位置から始まります。不正なバイト数は、結果オブジェクトの&lt;a href=&quot;coderresult#length--&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって判別できます。このケースは、このデコーダーの&lt;a href=&quot;charsetdecoder#onMalformedInput-java.nio.charset.CodingErrorAction-&quot;&gt;不正なアクション&lt;/a&gt;が&lt;a href=&quot;codingerroraction#REPORT&quot;&gt; &lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt; の&lt;/a&gt;場合にのみ適用されます。そうでない場合、要求に応じて、不正な形式の入力は無視または置き換えられます。</target>
        </trans-unit>
        <trans-unit id="f428d88605448e02d0039be4c865a5189a5a84d1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;coderresult#malformedForLength-int-&quot;&gt;malformed-input&lt;/a&gt; result indicates that a malformed-input error has been detected. The malformed characters begin at the input buffer's (possibly incremented) position; the number of malformed characters may be determined by invoking the result object's &lt;a href=&quot;coderresult#length--&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; method. This case applies only if the &lt;a href=&quot;charsetencoder#onMalformedInput-java.nio.charset.CodingErrorAction-&quot;&gt;malformed action&lt;/a&gt; of this encoder is &lt;a href=&quot;codingerroraction#REPORT&quot;&gt;&lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt;&lt;/a&gt;; otherwise the malformed input will be ignored or replaced, as requested.</source>
          <target state="translated">&lt;a href=&quot;coderresult#malformedForLength-int-&quot;&gt;不正入力&lt;/a&gt;結果が不正入力エラーが検出されたことを示します。不正な文字は、入力バッファーの（インクリメントされる可能性がある）位置から始まります。不正な文字の数は、結果オブジェクトの&lt;a href=&quot;coderresult#length--&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって決定される場合があります。このケースは、このエンコーダーの&lt;a href=&quot;charsetencoder#onMalformedInput-java.nio.charset.CodingErrorAction-&quot;&gt;不正なアクション&lt;/a&gt;が&lt;a href=&quot;codingerroraction#REPORT&quot;&gt; &lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt; の&lt;/a&gt;場合にのみ適用されます。そうでない場合、要求に応じて、不正な形式の入力は無視または置き換えられます。</target>
        </trans-unit>
        <trans-unit id="bbdff358d3d93270d3b49e5121994b44fae3466d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;collection&quot;&gt;&lt;code&gt;Collection&lt;/code&gt;&lt;/a&gt; has an encounter order if the corresponding &lt;a href=&quot;collection#iterator()&quot;&gt;&lt;code&gt;Collection.iterator()&lt;/code&gt;&lt;/a&gt; documents an order. If so, the encounter order is the same as the documented order. Otherwise, a collection does not have an encounter order.</source>
          <target state="translated">A&lt;a href=&quot;collection&quot;&gt; &lt;code&gt;Collection&lt;/code&gt; &lt;/a&gt;、対応するならば出会いの順序を持っている&lt;a href=&quot;collection#iterator()&quot;&gt; &lt;code&gt;Collection.iterator()&lt;/code&gt; &lt;/a&gt;文書順。その場合、遭遇順序は文書化された順序と同じです。それ以外の場合、コレクションには遭遇順序がありません。</target>
        </trans-unit>
        <trans-unit id="3f35d1e5ef784758d765b02805cd2bcc0afad6eb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;collection&quot;&gt;&lt;code&gt;Collection&lt;/code&gt;&lt;/a&gt; has an encounter order if the corresponding &lt;a href=&quot;collection#iterator--&quot;&gt;&lt;code&gt;Collection.iterator()&lt;/code&gt;&lt;/a&gt; documents an order. If so, the encounter order is the same as the documented order. Otherwise, a collection does not have an encounter order.</source>
          <target state="translated">A &lt;a href=&quot;collection&quot;&gt; &lt;code&gt;Collection&lt;/code&gt; &lt;/a&gt;、対応するならば出会いの順序を持っている&lt;a href=&quot;collection#iterator--&quot;&gt; &lt;code&gt;Collection.iterator()&lt;/code&gt; &lt;/a&gt;文書順。その場合、遭遇順序は文書化された順序と同じです。それ以外の場合、コレクションには遭遇順序がありません。</target>
        </trans-unit>
        <trans-unit id="cc2b847cc7c57e579a25f0284eb310a0cfef0a28" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;collector&quot;&gt;&lt;code&gt;Collector&lt;/code&gt;&lt;/a&gt; that supports concurrent reduction is marked with the &lt;a href=&quot;collector.characteristics#CONCURRENT&quot;&gt;&lt;code&gt;Collector.Characteristics.CONCURRENT&lt;/code&gt;&lt;/a&gt; characteristic. However, a concurrent collection also has a downside. If multiple threads are depositing results concurrently into a shared container, the order in which results are deposited is non-deterministic. Consequently, a concurrent reduction is only possible if ordering is not important for the stream being processed. The &lt;a href=&quot;stream#collect(java.util.stream.Collector)&quot;&gt;&lt;code&gt;Stream.collect(Collector)&lt;/code&gt;&lt;/a&gt; implementation will only perform a concurrent reduction if</source>
          <target state="translated">同時削減をサポートする&lt;a href=&quot;collector&quot;&gt; &lt;code&gt;Collector&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;collector.characteristics#CONCURRENT&quot;&gt; &lt;code&gt;Collector.Characteristics.CONCURRENT&lt;/code&gt; &lt;/a&gt;特性でマークされます。ただし、並行収集には欠点もあります。複数のスレッドが結果を共有コンテナに同時に格納している場合、結果が格納される順序は非決定的です。したがって、同時削減は、処理中のストリームにとって順序付けが重要でない場合にのみ可能です。&lt;a href=&quot;stream#collect(java.util.stream.Collector)&quot;&gt; &lt;code&gt;Stream.collect(Collector)&lt;/code&gt; &lt;/a&gt;場合の実装にのみ同時削減を実行します</target>
        </trans-unit>
        <trans-unit id="ab018cbfa657eeeb3853dd6f519e165f35dbdda0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;collector&quot;&gt;&lt;code&gt;Collector&lt;/code&gt;&lt;/a&gt; that supports concurrent reduction is marked with the &lt;a href=&quot;collector.characteristics#CONCURRENT&quot;&gt;&lt;code&gt;Collector.Characteristics.CONCURRENT&lt;/code&gt;&lt;/a&gt; characteristic. However, a concurrent collection also has a downside. If multiple threads are depositing results concurrently into a shared container, the order in which results are deposited is non-deterministic. Consequently, a concurrent reduction is only possible if ordering is not important for the stream being processed. The &lt;a href=&quot;stream#collect-java.util.stream.Collector-&quot;&gt;&lt;code&gt;Stream.collect(Collector)&lt;/code&gt;&lt;/a&gt; implementation will only perform a concurrent reduction if</source>
          <target state="translated">同時削減をサポートする&lt;a href=&quot;collector&quot;&gt; &lt;code&gt;Collector&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;collector.characteristics#CONCURRENT&quot;&gt; &lt;code&gt;Collector.Characteristics.CONCURRENT&lt;/code&gt; &lt;/a&gt;特性でマークされます。ただし、同時収集には欠点もあります。複数のスレッドが結果を共有コンテナーに同時にデポジットする場合、結果がデポジットされる順序は確定的ではありません。したがって、処理中のストリームで順序が重要でない場合にのみ、同時削減が可能です。&lt;a href=&quot;stream#collect-java.util.stream.Collector-&quot;&gt; &lt;code&gt;Stream.collect(Collector)&lt;/code&gt; &lt;/a&gt;場合の実装にのみ同時削減を実行します</target>
        </trans-unit>
        <trans-unit id="0e7dad79d0852bf10bcfb2d08d6293f448e8a4d2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;completionservice&quot;&gt;&lt;code&gt;CompletionService&lt;/code&gt;&lt;/a&gt; that uses a supplied &lt;a href=&quot;executor&quot;&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/a&gt; to execute tasks.</source>
          <target state="translated">A &lt;a href=&quot;completionservice&quot;&gt; &lt;code&gt;CompletionService&lt;/code&gt; &lt;/a&gt;供給使用&lt;a href=&quot;executor&quot;&gt; &lt;code&gt;Executor&lt;/code&gt; &lt;/a&gt;タスクを実行します。</target>
        </trans-unit>
        <trans-unit id="8fc11ba08553877860bb977c11eb04da587620cf" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;completionservice&quot;&gt;&lt;code&gt;CompletionService&lt;/code&gt;&lt;/a&gt; that uses a supplied &lt;a href=&quot;executor&quot;&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/a&gt; to execute tasks. This class arranges that submitted tasks are, upon completion, placed on a queue accessible using &lt;code&gt;take&lt;/code&gt;. The class is lightweight enough to be suitable for transient use when processing groups of tasks.</source>
          <target state="translated">A &lt;a href=&quot;completionservice&quot;&gt; &lt;code&gt;CompletionService&lt;/code&gt; &lt;/a&gt;供給使用&lt;a href=&quot;executor&quot;&gt; &lt;code&gt;Executor&lt;/code&gt; &lt;/a&gt;タスクを実行します。このクラスは、送信されたタスクが完了時に、 &lt;code&gt;take&lt;/code&gt; を使用してアクセス可能なキューに配置されるように調整します。このクラスは軽量で、タスクのグループを処理する際の一時的な使用に適しています。</target>
        </trans-unit>
        <trans-unit id="5487865321680404f56b9512a31e170dee210b17" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;concurrentmap&quot;&gt;&lt;code&gt;ConcurrentMap&lt;/code&gt;&lt;/a&gt; supporting &lt;a href=&quot;../navigablemap&quot;&gt;&lt;code&gt;NavigableMap&lt;/code&gt;&lt;/a&gt; operations, and recursively so for its navigable sub-maps.</source>
          <target state="translated">&lt;a href=&quot;../navigablemap&quot;&gt; &lt;code&gt;NavigableMap&lt;/code&gt; &lt;/a&gt;操作をサポートする&lt;a href=&quot;concurrentmap&quot;&gt; &lt;code&gt;ConcurrentMap&lt;/code&gt; &lt;/a&gt;、およびそのナビゲート可能なサブマップのために再帰的に。</target>
        </trans-unit>
        <trans-unit id="863b55387f3da2ec571636428aef2853fe2d732b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;constant/package-summary#nominal&quot;&gt;nominal descriptor&lt;/a&gt; for an &lt;code&gt;enum&lt;/code&gt; constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f7641f19a7578375417db247c91b15b840ee693e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;constantdesc&quot;&gt;&lt;code&gt;ConstantDesc&lt;/code&gt;&lt;/a&gt; is a description of a constant value. Such a description is the &lt;em&gt;nominal form&lt;/em&gt; of the constant value; it is not the value itself, but rather a &quot;recipe&quot; for describing the value, storing the value in a constant pool entry, or reconstituting the value given a class loading context. Every &lt;a href=&quot;constantdesc&quot;&gt;&lt;code&gt;ConstantDesc&lt;/code&gt;&lt;/a&gt; knows how to &lt;em&gt;resolve&lt;/em&gt; itself -- compute the value that it describes -- via &lt;a href=&quot;constantdesc#resolveConstantDesc(java.lang.invoke.MethodHandles.Lookup)&quot;&gt;&lt;code&gt;ConstantDesc.resolveConstantDesc&lt;/code&gt;&lt;/a&gt;. This allows an API which accepts &lt;a href=&quot;constantdesc&quot;&gt;&lt;code&gt;ConstantDesc&lt;/code&gt;&lt;/a&gt; objects to evaluate them reflectively, provided that the classes and methods referenced in their nominal description are present and accessible.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0ff16a3f7fcfc58771d7d7c99226a55b1dced8e2" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;countermonitor&quot;&gt;&lt;code&gt;CounterMonitor&lt;/code&gt;&lt;/a&gt; observes attributes of integer type. The attributes are assumed to be non-negative, and monotonically increasing except for a possible &lt;em&gt;roll-over&lt;/em&gt; at a specified &lt;em&gt;modulus&lt;/em&gt;. Each observed attribute has an associated &lt;em&gt;threshold&lt;/em&gt; value. A notification is sent when the attribute exceeds its threshold.</source>
          <target state="translated">A &lt;a href=&quot;countermonitor&quot;&gt; &lt;code&gt;CounterMonitor&lt;/code&gt; のは、&lt;/a&gt;整数型の属性を観察します。属性は負ではなく、指定された&lt;em&gt;係数&lt;/em&gt;での&lt;em&gt;ロールオーバーの&lt;/em&gt;可能性を除いて単調に増加すると想定されています。観察された各属性には、関連付けられた&lt;em&gt;しきい値があり&lt;/em&gt;ます。属性がしきい値を超えると通知が送信されます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cf7c7740d35492b515d5429814617f3d7cc18903" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;cyclicbarrier&quot;&gt;&lt;code&gt;CyclicBarrier&lt;/code&gt;&lt;/a&gt; is a resettable multiway synchronization point useful in some styles of parallel programming.</source>
          <target state="translated">A &lt;a href=&quot;cyclicbarrier&quot;&gt; &lt;code&gt;CyclicBarrier&lt;/code&gt; をは、&lt;/a&gt;並列プログラミングのいくつかのスタイルで有用リセット可能な多方向同期点です。</target>
        </trans-unit>
        <trans-unit id="a841608c7059c5a7a581927322bcccc959673a92" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;datatypeconstants#FIELD_UNDEFINED&quot;&gt;&lt;code&gt;DatatypeConstants.FIELD_UNDEFINED&lt;/code&gt;&lt;/a&gt; value indicates that field is not set.</source>
          <target state="translated">A &lt;a href=&quot;datatypeconstants#FIELD_UNDEFINED&quot;&gt; &lt;code&gt;DatatypeConstants.FIELD_UNDEFINED&lt;/code&gt; のの&lt;/a&gt;値は、フィールドが設定されていないことを示しています。</target>
        </trans-unit>
        <trans-unit id="a17b0dc0c53cf7d6fe7e42aadfa8ecff813092a4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;docattributeset&quot;&gt;&lt;code&gt;DocAttributeSet&lt;/code&gt;&lt;/a&gt;, containing &lt;a href=&quot;docattribute&quot;&gt;&lt;code&gt;DocAttribute&lt;/code&gt;&lt;/a&gt;s, specifies the characteristics of an individual doc and the print job settings to be applied to an individual doc.</source>
          <target state="translated">A &lt;a href=&quot;docattributeset&quot;&gt; &lt;code&gt;DocAttributeSet&lt;/code&gt; &lt;/a&gt;含む、&lt;a href=&quot;docattribute&quot;&gt; &lt;code&gt;DocAttribute&lt;/code&gt; &lt;/a&gt;個々のドキュメント印刷ジョブ設定のS、指定の特性は、個々のドキュメントに適用されます。</target>
        </trans-unit>
        <trans-unit id="ed608efcfa013ea2be917bbb860290d8dbb12f72" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;flow.publisher&quot;&gt;&lt;code&gt;Flow.Publisher&lt;/code&gt;&lt;/a&gt; that asynchronously issues submitted (non-null) items to current subscribers until it is closed.</source>
          <target state="translated">送信された（null以外の）アイテムを、閉じられるまで現在のサブスクライバーに非同期で発行する&lt;a href=&quot;flow.publisher&quot;&gt; &lt;code&gt;Flow.Publisher&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="026d41f21cfa4376df4ce02074add91f83fca562" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;flow.publisher&quot;&gt;&lt;code&gt;Flow.Publisher&lt;/code&gt;&lt;/a&gt; that asynchronously issues submitted (non-null) items to current subscribers until it is closed. Each current subscriber receives newly submitted items in the same order unless drops or exceptions are encountered. Using a SubmissionPublisher allows item generators to act as compliant &lt;a href=&quot;http://www.reactive-streams.org/&quot;&gt; reactive-streams&lt;/a&gt; Publishers relying on drop handling and/or blocking for flow control.</source>
          <target state="translated">送信された（null以外の）アイテムを、閉じられるまで現在のサブスクライバーに非同期で発行する&lt;a href=&quot;flow.publisher&quot;&gt; &lt;code&gt;Flow.Publisher&lt;/code&gt; &lt;/a&gt;。現在の各サブスクライバーは、ドロップまたは例外が発生しない限り、新しく送信されたアイテムを同じ順序で受け取ります。 SubmissionPublisherを使用すると、アイテムジェネレーターは、フロー制御のためにドロップ処理やブロッキングに依存する準拠した&lt;a href=&quot;http://www.reactive-streams.org/&quot;&gt;リアクティブストリーム&lt;/a&gt;パブリッシャーとして機能できます。</target>
        </trans-unit>
        <trans-unit id="0224e649b252d805cb53fe47b42180a2218c478a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;flow.subscriber&quot;&gt;&lt;code&gt;Flow.Subscriber&lt;/code&gt;&lt;/a&gt; arranges that items be requested and processed. Items (invocations of &lt;a href=&quot;flow.subscriber#onNext(T)&quot;&gt;&lt;code&gt;Flow.Subscriber.onNext(T)&lt;/code&gt;&lt;/a&gt;) are not issued unless requested, but multiple items may be requested. Many Subscriber implementations can arrange this in the style of the following example, where a buffer size of 1 single-steps, and larger sizes usually allow for more efficient overlapped processing with less communication; for example with a value of 64, this keeps total outstanding requests between 32 and 64. Because Subscriber method invocations for a given &lt;a href=&quot;flow.subscription&quot;&gt;&lt;code&gt;Flow.Subscription&lt;/code&gt;&lt;/a&gt; are strictly ordered, there is no need for these methods to use locks or volatiles unless a Subscriber maintains multiple Subscriptions (in which case it is better to instead define multiple Subscribers, each with its own Subscription).</source>
          <target state="translated">A &lt;a href=&quot;flow.subscriber&quot;&gt; &lt;code&gt;Flow.Subscriber&lt;/code&gt; は&lt;/a&gt;アイテムが要求され、処理されることを並べます。アイテム（&lt;a href=&quot;flow.subscriber#onNext(T)&quot;&gt; &lt;code&gt;Flow.Subscriber.onNext(T)&lt;/code&gt; の&lt;/a&gt;呼び出し）は、要求されない限り発行されませんが、複数のアイテムが要求される場合があります。多くのサブスクライバー実装は、これを次の例のスタイルで配置できます。ここで、バッファーサイズは1シングルステップであり、サイズが大きいほど、通常、より少ない通信でより効率的なオーバーラップ処理が可能になります。たとえば、値が64の場合、未処理のリクエストの合計は&lt;a href=&quot;flow.subscription&quot;&gt; &lt;code&gt;Flow.Subscription&lt;/code&gt; &lt;/a&gt;ます。これは、特定のFlow.Subscriptionに対するサブスクライバーメソッドの呼び出しが原因です。厳密に順序付けられている場合、サブスクライバーが複数のサブスクリプションを維持しない限り、これらのメソッドでロックまたは揮発性物質を使用する必要はありません（その場合、代わりに、それぞれが独自のサブスクリプションを持つ複数のサブスクライバーを定義することをお勧めします）。</target>
        </trans-unit>
        <trans-unit id="ed79beedb532be58b73413e2f5d0f78429b3d587" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;forkjointask&quot;&gt;&lt;code&gt;ForkJoinTask&lt;/code&gt;&lt;/a&gt; with a completion action performed when triggered and there are no remaining pending actions.</source>
          <target state="translated">A &lt;a href=&quot;forkjointask&quot;&gt; &lt;code&gt;ForkJoinTask&lt;/code&gt; &lt;/a&gt;トリガされたときに完了アクションとは、実行されない残りの保留中のアクションはありません。</target>
        </trans-unit>
        <trans-unit id="a60bf0ce2dc486adc95611aa6a3e0d65ba11fb09" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;forkjointask&quot;&gt;&lt;code&gt;ForkJoinTask&lt;/code&gt;&lt;/a&gt; with a completion action performed when triggered and there are no remaining pending actions. CountedCompleters are in general more robust in the presence of subtask stalls and blockage than are other forms of ForkJoinTasks, but are less intuitive to program. Uses of CountedCompleter are similar to those of other completion based components (such as &lt;a href=&quot;../../nio/channels/completionhandler&quot;&gt;&lt;code&gt;CompletionHandler&lt;/code&gt;&lt;/a&gt;) except that multiple &lt;em&gt;pending&lt;/em&gt; completions may be necessary to trigger the completion action &lt;a href=&quot;#onCompletion(java.util.concurrent.CountedCompleter)&quot;&gt;&lt;code&gt;onCompletion(CountedCompleter)&lt;/code&gt;&lt;/a&gt;, not just one. Unless initialized otherwise, the &lt;a href=&quot;#getPendingCount()&quot;&gt;pending count&lt;/a&gt; starts at zero, but may be (atomically) changed using methods &lt;a href=&quot;#setPendingCount(int)&quot;&gt;&lt;code&gt;setPendingCount(int)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#addToPendingCount(int)&quot;&gt;&lt;code&gt;addToPendingCount(int)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#compareAndSetPendingCount(int,int)&quot;&gt;&lt;code&gt;compareAndSetPendingCount(int, int)&lt;/code&gt;&lt;/a&gt;. Upon invocation of &lt;a href=&quot;#tryComplete()&quot;&gt;&lt;code&gt;tryComplete()&lt;/code&gt;&lt;/a&gt;, if the pending action count is nonzero, it is decremented; otherwise, the completion action is performed, and if this completer itself has a completer, the process is continued with its completer. As is the case with related synchronization components such as &lt;a href=&quot;phaser&quot;&gt;&lt;code&gt;Phaser&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;semaphore&quot;&gt;&lt;code&gt;Semaphore&lt;/code&gt;&lt;/a&gt;, these methods affect only internal counts; they do not establish any further internal bookkeeping. In particular, the identities of pending tasks are not maintained. As illustrated below, you can create subclasses that do record some or all pending tasks or their results when needed. As illustrated below, utility methods supporting customization of completion traversals are also provided. However, because CountedCompleters provide only basic synchronization mechanisms, it may be useful to create further abstract subclasses that maintain linkages, fields, and additional support methods appropriate for a set of related usages.</source>
          <target state="translated">A &lt;a href=&quot;forkjointask&quot;&gt; &lt;code&gt;ForkJoinTask&lt;/code&gt; &lt;/a&gt;トリガされたときに完了アクションとは、実行されない残りの保留中のアクションはありません。 CountedCompletersは、一般に、サブタスクのストールやブロックが存在する場合、他の形式のForkJoinTasksよりも堅牢ですが、プログラミングの直感性が低くなります。 CountedCompleterの使用法は、他の完了ベースのコンポーネント（&lt;a href=&quot;../../nio/channels/completionhandler&quot;&gt; &lt;code&gt;CompletionHandler&lt;/code&gt; &lt;/a&gt;など）の使用法と似ていますが、完了アクション&lt;a href=&quot;#onCompletion(java.util.concurrent.CountedCompleter)&quot;&gt; &lt;code&gt;onCompletion(CountedCompleter)&lt;/code&gt; &lt;/a&gt;をトリガーするために、1つだけでなく、複数の&lt;em&gt;保留中の&lt;/em&gt;完了が必要になる場合があります。特に初期化されない限り、&lt;a href=&quot;#getPendingCount()&quot;&gt;保留中のカウント&lt;/a&gt;はゼロから始まりますが、メソッド&lt;a href=&quot;#setPendingCount(int)&quot;&gt; &lt;code&gt;setPendingCount(int)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#addToPendingCount(int)&quot;&gt; &lt;code&gt;addToPendingCount(int)&lt;/code&gt; &lt;/a&gt;を使用して（原子的に）変更できます。、および&lt;a href=&quot;#compareAndSetPendingCount(int,int)&quot;&gt; &lt;code&gt;compareAndSetPendingCount(int, int)&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;#tryComplete()&quot;&gt; &lt;code&gt;tryComplete()&lt;/code&gt; の&lt;/a&gt;呼び出し時に、保留中のアクションカウントがゼロ以外の場合、デクリメントされます。それ以外の場合は、完了アクションが実行され、このコンプリーター自体にコンプリーターがある場合、プロセスはそのコンプリーターで続行されます。&lt;a href=&quot;phaser&quot;&gt; &lt;code&gt;Phaser&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;semaphore&quot;&gt; &lt;code&gt;Semaphore&lt;/code&gt; &lt;/a&gt;などの関連する同期コンポーネントの場合と同様です。、これらのメソッドは内部カウントにのみ影響します。彼らはそれ以上の内部簿記を確立しません。特に、保留中のタスクのIDは維持されません。以下に示すように、必要に応じて、保留中のタスクまたはその結果の一部またはすべてを記録するサブクラスを作成できます。以下に示すように、完了トラバーサルのカスタマイズをサポートするユーティリティメソッドも提供されます。ただし、CountedCompletersは基本的な同期メカニズムしか提供しないため、関連する一連の使用法に適したリンケージ、フィールド、および追加のサポートメソッドを維持するさらに抽象的なサブクラスを作成すると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="fb3ed653dbdcc6e068861ae3377f577af5456fa8" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;forkjointask&quot;&gt;&lt;code&gt;ForkJoinTask&lt;/code&gt;&lt;/a&gt; with a completion action performed when triggered and there are no remaining pending actions. CountedCompleters are in general more robust in the presence of subtask stalls and blockage than are other forms of ForkJoinTasks, but are less intuitive to program. Uses of CountedCompleter are similar to those of other completion based components (such as &lt;a href=&quot;../../nio/channels/completionhandler&quot;&gt;&lt;code&gt;CompletionHandler&lt;/code&gt;&lt;/a&gt;) except that multiple &lt;em&gt;pending&lt;/em&gt; completions may be necessary to trigger the completion action &lt;a href=&quot;countedcompleter#onCompletion-java.util.concurrent.CountedCompleter-&quot;&gt;&lt;code&gt;onCompletion(CountedCompleter)&lt;/code&gt;&lt;/a&gt;, not just one. Unless initialized otherwise, the &lt;a href=&quot;countedcompleter#getPendingCount--&quot;&gt;pending count&lt;/a&gt; starts at zero, but may be (atomically) changed using methods &lt;a href=&quot;countedcompleter#setPendingCount-int-&quot;&gt;&lt;code&gt;setPendingCount(int)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;countedcompleter#addToPendingCount-int-&quot;&gt;&lt;code&gt;addToPendingCount(int)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;countedcompleter#compareAndSetPendingCount-int-int-&quot;&gt;&lt;code&gt;compareAndSetPendingCount(int, int)&lt;/code&gt;&lt;/a&gt;. Upon invocation of &lt;a href=&quot;countedcompleter#tryComplete--&quot;&gt;&lt;code&gt;tryComplete()&lt;/code&gt;&lt;/a&gt;, if the pending action count is nonzero, it is decremented; otherwise, the completion action is performed, and if this completer itself has a completer, the process is continued with its completer. As is the case with related synchronization components such as &lt;a href=&quot;phaser&quot;&gt;&lt;code&gt;Phaser&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;semaphore&quot;&gt;&lt;code&gt;Semaphore&lt;/code&gt;&lt;/a&gt;, these methods affect only internal counts; they do not establish any further internal bookkeeping. In particular, the identities of pending tasks are not maintained. As illustrated below, you can create subclasses that do record some or all pending tasks or their results when needed. As illustrated below, utility methods supporting customization of completion traversals are also provided. However, because CountedCompleters provide only basic synchronization mechanisms, it may be useful to create further abstract subclasses that maintain linkages, fields, and additional support methods appropriate for a set of related usages.</source>
          <target state="translated">A &lt;a href=&quot;forkjointask&quot;&gt; &lt;code&gt;ForkJoinTask&lt;/code&gt; &lt;/a&gt;トリガされたときに完了アクションとは、実行されない残りの保留中のアクションはありません。 CountedCompletersは、他の形式のForkJoinTasksよりも、一般にサブタスクのストールやブロックの存在下でより堅牢ですが、プログラムの直感的ではありません。 CountedCompleterの使用は、他の完了ベースのコンポーネント（&lt;a href=&quot;../../nio/channels/completionhandler&quot;&gt; &lt;code&gt;CompletionHandler&lt;/code&gt; &lt;/a&gt;など）の使用と似ていますが、完了アクション&lt;a href=&quot;countedcompleter#onCompletion-java.util.concurrent.CountedCompleter-&quot;&gt; &lt;code&gt;onCompletion(CountedCompleter)&lt;/code&gt; &lt;/a&gt;をトリガーするために、1つだけではなく、複数の&lt;em&gt;保留中の&lt;/em&gt;完了が必要になる場合があります。別の方法で初期化しない限り、&lt;a href=&quot;countedcompleter#getPendingCount--&quot;&gt;保留中のカウント&lt;/a&gt;はゼロから始まりますが、メソッド&lt;a href=&quot;countedcompleter#setPendingCount-int-&quot;&gt; &lt;code&gt;setPendingCount(int)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;countedcompleter#addToPendingCount-int-&quot;&gt; &lt;code&gt;addToPendingCount(int)&lt;/code&gt; &lt;/a&gt;を使用して（原子的に）変更できます、および&lt;a href=&quot;countedcompleter#compareAndSetPendingCount-int-int-&quot;&gt; &lt;code&gt;compareAndSetPendingCount(int, int)&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;countedcompleter#tryComplete--&quot;&gt; &lt;code&gt;tryComplete()&lt;/code&gt; の&lt;/a&gt;呼び出し時に、保留中のアクションの数がゼロ以外の場合は減分されます。それ以外の場合は、完了アクションが実行され、このコンプリーター自体にコンプリーターがある場合、プロセスはそのコンプリーターで続行されます。&lt;a href=&quot;phaser&quot;&gt; &lt;code&gt;Phaser&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;semaphore&quot;&gt; &lt;code&gt;Semaphore&lt;/code&gt; &lt;/a&gt;などの関連する同期コンポーネントの場合と同様に、これらのメソッドは内部カウントのみに影響します。彼らはそれ以上の内部簿記を確立しません。特に、保留中のタスクのIDは維持されません。以下に示すように、必要に応じて、保留中のタスクの一部またはすべてまたはその結果を記録するサブクラスを作成できます。以下に示すように、完了走査のカスタマイズをサポートするユーティリティメソッドも提供されます。ただし、CountedCompletersは基本的な同期メカニズムのみを提供するため、関連する一連の使用法に適したリンケージ、フィールド、および追加のサポートメソッドを維持する抽象サブクラスをさらに作成すると役立つ場合があります。</target>
        </trans-unit>
        <trans-unit id="01aa76019566735bcbbc891207a7f10feb22942c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; that is &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;ある&lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="39c86cf98ef90fcf1a663c7ea35c635f02ef8181" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; that is &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt;. Successful execution of the &lt;code&gt;run&lt;/code&gt; method causes completion of the &lt;code&gt;Future&lt;/code&gt; and allows access to its results.</source>
          <target state="translated">&lt;a href=&quot;future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;ある&lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; を&lt;/a&gt;。 &lt;code&gt;run&lt;/code&gt; メソッドの実行が成功すると、 &lt;code&gt;Future&lt;/code&gt; が完了し、その結果にアクセスできるようになります。</target>
        </trans-unit>
        <trans-unit id="9497a6b404465677f8a6392e98d814062889e3c5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; that may be explicitly completed (setting its value and status), and may be used as a &lt;a href=&quot;completionstage&quot;&gt;&lt;code&gt;CompletionStage&lt;/code&gt;&lt;/a&gt;, supporting dependent functions and actions that trigger upon its completion.</source>
          <target state="translated">&lt;a href=&quot;future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;明示的（その値とステータスを設定）が完了してもよい、として使用することができる&lt;a href=&quot;completionstage&quot;&gt; &lt;code&gt;CompletionStage&lt;/code&gt; &lt;/a&gt;依存機能及び行動の完了時にトリガーことを支持します。</target>
        </trans-unit>
        <trans-unit id="a78490901c38c9a824e6ce8c5131db90ed0da208" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;gaugemonitor&quot;&gt;&lt;code&gt;GaugeMonitor&lt;/code&gt;&lt;/a&gt; observes attributes of numerical type. Each observed attribute has an associated &lt;em&gt;high threshold&lt;/em&gt; and &lt;em&gt;low threshold&lt;/em&gt;.</source>
          <target state="translated">A &lt;a href=&quot;gaugemonitor&quot;&gt; &lt;code&gt;GaugeMonitor&lt;/code&gt; は&lt;/a&gt;、数値型の属性を観察します。観察された各属性には、関連する&lt;em&gt;高しきい値&lt;/em&gt;と&lt;em&gt;低しきい値があり&lt;/em&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a9cc0a105ccb1b813228488039de0073b6c98704" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;gcinfo&quot;&gt;&lt;code&gt;GcInfo&lt;/code&gt;&lt;/a&gt; object containing some statistics about the GC cycle (start time, end time) and the memory usage before and after the GC cycle.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7dbfa3c19bc49325bb3201857c32ee3dc8f288e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;httpresponse.bodyhandler&quot;&gt;&lt;code&gt;BodyHandler&lt;/code&gt;&lt;/a&gt; must be supplied for each &lt;a href=&quot;httprequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; sent. The &lt;code&gt;BodyHandler&lt;/code&gt; determines how to handle the response body, if any. Once an &lt;a href=&quot;httpresponse&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt; is received, the headers, response code, and body (typically) are available. Whether the response body bytes have been read or not depends on the type, &lt;code&gt;T&lt;/code&gt;, of the response body.</source>
          <target state="translated">A &lt;a href=&quot;httpresponse.bodyhandler&quot;&gt; &lt;code&gt;BodyHandler&lt;/code&gt; は、&lt;/a&gt;それぞれに供給されなければならない&lt;a href=&quot;httprequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;送りました。 &lt;code&gt;BodyHandler&lt;/code&gt; があれば、レスポンスボディを処理する方法を決定します。一旦&lt;a href=&quot;httpresponse&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;受信し、ヘッダ、応答コード、及び本体は、（典型的に）入手可能です。応答本文のバイトが読み取られたかどうかは、応答本文のタイプ &lt;code&gt;T&lt;/code&gt; によって異なります。</target>
        </trans-unit>
        <trans-unit id="1ed6d8c65b8cee77ebe45720456bfca54776fee3" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;https://docs.oracle.com/en/java/javase/15/docs/specs/jvmti.html&quot;&gt;JVM TI&lt;/a&gt; client is called an</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="83fabc9c2d9f90a6511e60bf17fbf41d85870f60" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;keymap&quot;&gt;&lt;code&gt;Keymap&lt;/code&gt;&lt;/a&gt; lets an application bind key strokes to actions. In order to allow keymaps to be shared across multiple text components, they can use actions that extend &lt;code&gt;TextAction&lt;/code&gt;. &lt;code&gt;TextAction&lt;/code&gt; can determine which &lt;code&gt;JTextComponent&lt;/code&gt; most recently has or had focus and therefore is the subject of the action (In the case that the &lt;code&gt;ActionEvent&lt;/code&gt; sent to the action doesn't contain the target text component as its source).</source>
          <target state="translated">A&lt;a href=&quot;keymap&quot;&gt; &lt;code&gt;Keymap&lt;/code&gt; &lt;/a&gt;アクションへのアプリケーションのバインドキーストロークをすることができます。キーマップを複数のテキストコンポーネント間で共有できるようにするために、 &lt;code&gt;TextAction&lt;/code&gt; を拡張するアクションを使用できます。 &lt;code&gt;TextAction&lt;/code&gt; は、どの &lt;code&gt;JTextComponent&lt;/code&gt; が最近フォーカスを持っているか、または持っていたので、アクションのサブジェクトであるかを判別できます（アクションに送信された &lt;code&gt;ActionEvent&lt;/code&gt; に、ソースとしてターゲットテキストコンポーネントが含まれていない場合）。</target>
        </trans-unit>
        <trans-unit id="7dd19ae8058e5cba032ae717f2314f0d68d1a345" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; that further provides a &lt;em&gt;total ordering&lt;/em&gt; on its keys.</source>
          <target state="translated">A &lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;はさらに、&lt;em&gt;全順序&lt;/em&gt;そのキーのを。</target>
        </trans-unit>
        <trans-unit id="48b5e086c6b73b09a6ed5e87d2fbf4df89a0b3f4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; that further provides a &lt;em&gt;total ordering&lt;/em&gt; on its keys. The map is ordered according to the &lt;a href=&quot;../lang/comparable&quot;&gt;natural ordering&lt;/a&gt; of its keys, or by a &lt;a href=&quot;comparator&quot;&gt;&lt;code&gt;Comparator&lt;/code&gt;&lt;/a&gt; typically provided at sorted map creation time. This order is reflected when iterating over the sorted map's collection views (returned by the &lt;code&gt;entrySet&lt;/code&gt;, &lt;code&gt;keySet&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt; methods). Several additional operations are provided to take advantage of the ordering. (This interface is the map analogue of &lt;a href=&quot;sortedset&quot;&gt;&lt;code&gt;SortedSet&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">A &lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;はさらに、&lt;em&gt;全順序&lt;/em&gt;そのキーのを。マップは、そのキーの&lt;a href=&quot;../lang/comparable&quot;&gt;自然な順序&lt;/a&gt;に従って、またはソートされたマップの作成時に通常提供される&lt;a href=&quot;comparator&quot;&gt; &lt;code&gt;Comparator&lt;/code&gt; &lt;/a&gt;レーターによって順序付けられます。この順序は、ソートされたマップのコレクションビュー（ &lt;code&gt;entrySet&lt;/code&gt; 、 &lt;code&gt;keySet&lt;/code&gt; 、 &lt;code&gt;values&lt;/code&gt; メソッドによって返される）を反復するときに反映されます。順序付けを利用するために、いくつかの追加操作が提供されています。（このインターフェースは&lt;a href=&quot;sortedset&quot;&gt; &lt;code&gt;SortedSet&lt;/code&gt; &lt;/a&gt;のマップ類似物です。）</target>
        </trans-unit>
        <trans-unit id="7e48ac8948c121853633ee49556249fbee04bf07" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;memorynotificationinfo#MEMORY_COLLECTION_THRESHOLD_EXCEEDED&quot;&gt;&lt;code&gt;collection usage threshold exceeded notification&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;memorynotificationinfo#MEMORY_COLLECTION_THRESHOLD_EXCEEDED&quot;&gt; &lt;code&gt;collection usage threshold exceeded notification&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="83775a71362eccbda74e498dbaf5475b80e9af93" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;memorynotificationinfo#MEMORY_THRESHOLD_EXCEEDED&quot;&gt;&lt;code&gt;usage threshold exceeded notification&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;memorynotificationinfo#MEMORY_THRESHOLD_EXCEEDED&quot;&gt; &lt;code&gt;usage threshold exceeded notification&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9cf55c41df3db5a8e3f95adf8ba0d18a164936f9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;namespace&quot;&gt;&lt;code&gt;Namespace&lt;/code&gt;&lt;/a&gt; is an &lt;a href=&quot;attribute&quot;&gt;&lt;code&gt;Attribute&lt;/code&gt;&lt;/a&gt;. One can iterate over a list of namespaces as a list of attributes. However this method returns only the list of namespaces declared on this START_ELEMENT and does not include the attributes declared on this START_ELEMENT. Returns an empty iterator if there are no namespaces.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4fb768af361736ab2e96c30d909366181c9d332c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;navigableset&quot;&gt;&lt;code&gt;NavigableSet&lt;/code&gt;&lt;/a&gt; implementation based on a &lt;a href=&quot;treemap&quot;&gt;&lt;code&gt;TreeMap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;navigableset&quot;&gt; &lt;code&gt;NavigableSet&lt;/code&gt; &lt;/a&gt;に基づいて実装&lt;a href=&quot;treemap&quot;&gt; &lt;code&gt;TreeMap&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e1945e9f8b306c48cd802c297f5976ff3571bd3c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;navigableset&quot;&gt;&lt;code&gt;NavigableSet&lt;/code&gt;&lt;/a&gt; implementation based on a &lt;a href=&quot;treemap&quot;&gt;&lt;code&gt;TreeMap&lt;/code&gt;&lt;/a&gt;. The elements are ordered using their &lt;a href=&quot;../lang/comparable&quot;&gt;natural ordering&lt;/a&gt;, or by a &lt;a href=&quot;comparator&quot;&gt;&lt;code&gt;Comparator&lt;/code&gt;&lt;/a&gt; provided at set creation time, depending on which constructor is used.</source>
          <target state="translated">&lt;a href=&quot;navigableset&quot;&gt; &lt;code&gt;NavigableSet&lt;/code&gt; &lt;/a&gt;に基づいて実装&lt;a href=&quot;treemap&quot;&gt; &lt;code&gt;TreeMap&lt;/code&gt; &lt;/a&gt;。要素は、使用されるコンストラクターに応じて、&lt;a href=&quot;../lang/comparable&quot;&gt;自然な順序付け&lt;/a&gt;を使用して、またはセットの作成時に提供される&lt;a href=&quot;comparator&quot;&gt; &lt;code&gt;Comparator&lt;/code&gt; &lt;/a&gt;によって順序付けられます。</target>
        </trans-unit>
        <trans-unit id="b3f8c3e414c6371bee46fb98c1599f739e3b9d4a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;package-summary#Reduction&quot;&gt;mutable reduction operation&lt;/a&gt; that accumulates input elements into a mutable result container, optionally transforming the accumulated result into a final representation after all input elements have been processed.</source>
          <target state="translated">&lt;a href=&quot;package-summary#Reduction&quot;&gt;可変リダクション演算&lt;/a&gt;すべての入力要素が処理された後に変更可能な結果容器へ入力要素を蓄積し、必要に応じて最終的な表現に蓄積された結果を変換します。</target>
        </trans-unit>
        <trans-unit id="30f07146010e48a8044433994ff386aed66eeb3a" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;package-summary#Reduction&quot;&gt;mutable reduction operation&lt;/a&gt; that accumulates input elements into a mutable result container, optionally transforming the accumulated result into a final representation after all input elements have been processed. Reduction operations can be performed either sequentially or in parallel.</source>
          <target state="translated">&lt;a href=&quot;package-summary#Reduction&quot;&gt;可変リダクション演算&lt;/a&gt;すべての入力要素が処理された後に変更可能な結果容器へ入力要素を蓄積し、必要に応じて最終的な表現に蓄積された結果を変換します。リダクション操作は、順次または並行して実行できます。</target>
        </trans-unit>
        <trans-unit id="abc96a168b35988741540fedbbef4f60c1182326" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;package-summary#nominal&quot;&gt;nominal descriptor&lt;/a&gt; for a &lt;a href=&quot;../class&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt; constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecde411a725de0db7729ebf92ab1937bdc59d1a4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;package-summary#nominal&quot;&gt;nominal descriptor&lt;/a&gt; for a &lt;a href=&quot;../invoke/methodhandle&quot;&gt;&lt;code&gt;MethodHandle&lt;/code&gt;&lt;/a&gt; constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a535123cd1b793fa3236be513e6321cb21bf3981" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;package-summary#nominal&quot;&gt;nominal descriptor&lt;/a&gt; for a &lt;a href=&quot;../invoke/methodtype&quot;&gt;MethodType&lt;/a&gt; constant.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ea4739e45c4b3e9a26b70b544f1fe6644cf20973" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;package-summary#nominal&quot;&gt;nominal descriptor&lt;/a&gt; for a direct &lt;a href=&quot;../invoke/methodhandle&quot;&gt;&lt;code&gt;MethodHandle&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="529edc0891c29e585064a25eb34fc8d1c50d7e59" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;package-summary#nominal&quot;&gt;nominal descriptor&lt;/a&gt; for a direct &lt;a href=&quot;../invoke/methodhandle&quot;&gt;&lt;code&gt;MethodHandle&lt;/code&gt;&lt;/a&gt;. A &lt;a href=&quot;directmethodhandledesc&quot;&gt;DirectMethodHandleDesc&lt;/a&gt; corresponds to a &lt;code&gt;Constant_MethodHandle_info&lt;/code&gt; entry in the constant pool of a classfile.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f88090fab4e327db596ce85bf7af40416f200f64" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;package-summary#nominal&quot;&gt;nominal descriptor&lt;/a&gt; for a dynamic constant (one described in the constant pool with &lt;code&gt;Constant_Dynamic_info&lt;/code&gt;.)</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2ce7c9b7cdf7fe56697c5b4b714ba2315240cdbb" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;package-summary#nominal&quot;&gt;nominal descriptor&lt;/a&gt; for a loadable constant value, as defined in JVMS 4.4.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c591268a513c4f754bd1e844e50e791a4444c57" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;package-summary#nominal&quot;&gt;nominal descriptor&lt;/a&gt; for a loadable constant value, as defined in JVMS 4.4. Such a descriptor can be resolved via &lt;a href=&quot;#resolveConstantDesc(java.lang.invoke.MethodHandles.Lookup)&quot;&gt;&lt;code&gt;resolveConstantDesc(MethodHandles.Lookup)&lt;/code&gt;&lt;/a&gt; to yield the constant value itself.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="936283972ac35e7d2099dfca5a81691b0d1b03f1" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;package-summary#nominal&quot;&gt;nominal descriptor&lt;/a&gt; for an &lt;code&gt;invokedynamic&lt;/code&gt; call site.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4d44a71d81959b746ebcfb66ded7e38898863b29" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;pattern#matches-java.lang.String-java.lang.CharSequence-&quot;&gt;&lt;code&gt;matches&lt;/code&gt;&lt;/a&gt; method is defined by this class as a convenience for when a regular expression is used just once. This method compiles an expression and matches an input sequence against it in a single invocation. The statement</source>
          <target state="translated">&lt;a href=&quot;pattern#matches-java.lang.String-java.lang.CharSequence-&quot;&gt; &lt;code&gt;matches&lt;/code&gt; &lt;/a&gt;方法は、正規表現を一度だけ使用されたときのために便利なように、このクラスで定義されています。このメソッドは、式をコンパイルし、1回の呼び出しで入力シーケンスをそれと照合します。ステートメント</target>
        </trans-unit>
        <trans-unit id="16551e367ea0db18f29a807ba404d55b507c0e22" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;phaser&quot;&gt;&lt;code&gt;Phaser&lt;/code&gt;&lt;/a&gt; provides a more flexible form of barrier that may be used to control phased computation among multiple threads.</source>
          <target state="translated">A &lt;a href=&quot;phaser&quot;&gt; &lt;code&gt;Phaser&lt;/code&gt; &lt;/a&gt;複数のスレッド間で段階的計算を制御するために使用され得る障壁のより柔軟な形態を提供します。</target>
        </trans-unit>
        <trans-unit id="d4cc5e6df2360a9e6e2de69018f3951cf51d03d0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;printjobattributeset&quot;&gt;&lt;code&gt;PrintJobAttributeSet&lt;/code&gt;&lt;/a&gt;, containing &lt;a href=&quot;printjobattribute&quot;&gt;&lt;code&gt;PrintJobAttribute&lt;/code&gt;&lt;/a&gt;s, reports the status of a print job.</source>
          <target state="translated">A &lt;a href=&quot;printjobattributeset&quot;&gt; &lt;code&gt;PrintJobAttributeSet&lt;/code&gt; は&lt;/a&gt;、含む&lt;a href=&quot;printjobattribute&quot;&gt; &lt;code&gt;PrintJobAttribute&lt;/code&gt; &lt;/a&gt; Sを、印刷ジョブの状態を報告します。</target>
        </trans-unit>
        <trans-unit id="70278963eb3f5045b38f37da9545fc082fdf04e0" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;printrequestattributeset&quot;&gt;&lt;code&gt;PrintRequestAttributeSet&lt;/code&gt;&lt;/a&gt;, containing &lt;a href=&quot;printrequestattribute&quot;&gt;&lt;code&gt;PrintRequestAttribute&lt;/code&gt;&lt;/a&gt;s, specifies the settings to be applied to a whole print job and to all the docs in the print job.</source>
          <target state="translated">A &lt;a href=&quot;printrequestattributeset&quot;&gt; &lt;code&gt;PrintRequestAttributeSet&lt;/code&gt; は&lt;/a&gt;、含む&lt;a href=&quot;printrequestattribute&quot;&gt; &lt;code&gt;PrintRequestAttribute&lt;/code&gt; &lt;/a&gt; Sを、印刷ジョブ全体に、印刷ジョブ内のすべてのドキュメントに適用する設定を指定します。</target>
        </trans-unit>
        <trans-unit id="626b850e45fa1d1351fc6f6cec8df6365c571316" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;printserviceattributeset&quot;&gt;&lt;code&gt;PrintServiceAttributeSet&lt;/code&gt;&lt;/a&gt;, containing &lt;a href=&quot;printserviceattribute&quot;&gt;&lt;code&gt;PrintServiceAttribute&lt;/code&gt;&lt;/a&gt;s, reports the status of a Print Service instance.</source>
          <target state="translated">A &lt;a href=&quot;printserviceattributeset&quot;&gt; &lt;code&gt;PrintServiceAttributeSet&lt;/code&gt; は&lt;/a&gt;、含む&lt;a href=&quot;printserviceattribute&quot;&gt; &lt;code&gt;PrintServiceAttribute&lt;/code&gt; &lt;/a&gt;秒、Print Serviceインスタンスの状態を報告します。</target>
        </trans-unit>
        <trans-unit id="d43c9a647251f8bb0736d88e294cec340b78b30b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;processhandle.info&quot;&gt;&lt;code&gt;ProcessHandle.Info&lt;/code&gt;&lt;/a&gt; instance has accessor methods that return information about the process if it is available.</source>
          <target state="translated">A &lt;a href=&quot;processhandle.info&quot;&gt; &lt;code&gt;ProcessHandle.Info&lt;/code&gt; の&lt;/a&gt;インスタンスは、プロセスに関する戻り情報は、それが利用可能である場合、そのアクセサメソッドを持っています。</target>
        </trans-unit>
        <trans-unit id="08eb7bbe74d99246a71e8526a63915d75b8d5b5e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;scheduledfuture&quot;&gt;&lt;code&gt;ScheduledFuture&lt;/code&gt;&lt;/a&gt; that is &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;scheduledfuture&quot;&gt; &lt;code&gt;ScheduledFuture&lt;/code&gt; &lt;/a&gt;です&lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="aacd731c3ac5b2fa3a63dfc6e470fbf7dc7b7ce7" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;scheduledfuture&quot;&gt;&lt;code&gt;ScheduledFuture&lt;/code&gt;&lt;/a&gt; that is &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt;. Successful execution of the &lt;code&gt;run&lt;/code&gt; method causes completion of the &lt;code&gt;Future&lt;/code&gt; and allows access to its results.</source>
          <target state="translated">&lt;a href=&quot;scheduledfuture&quot;&gt; &lt;code&gt;ScheduledFuture&lt;/code&gt; &lt;/a&gt;です&lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; を&lt;/a&gt;。 &lt;code&gt;run&lt;/code&gt; メソッドの実行が成功すると、 &lt;code&gt;Future&lt;/code&gt; が完了し、その結果にアクセスできるようになります。</target>
        </trans-unit>
        <trans-unit id="4b1e2c183b61c2273675c1311e6d623cf9988d8f" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt; object is immutable in the sense that it shouldn't change the set of constraints once it is created. In other words, if an application validates the same document twice against the same &lt;a href=&quot;schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt;, it must always produce the same result.</source>
          <target state="translated">&lt;a href=&quot;schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt;オブジェクトは、それが作成されると、それは、制約のセットを変更するべきではないという意味で不変です。つまり、アプリケーションが同じ&lt;a href=&quot;schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt;に対して同じドキュメントを2回検証する場合、常に同じ結果を生成する必要があります。</target>
        </trans-unit>
        <trans-unit id="aef6cabb3dc20889673ea86962ada279806cdcbd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt; object is thread safe and applications are encouraged to share it across many parsers in many threads.</source>
          <target state="translated">&lt;a href=&quot;schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt;オブジェクトは、スレッドセーフとアプリケーションは多くのスレッドで多くのパーサー間でそれを共有することが奨励されています。</target>
        </trans-unit>
        <trans-unit id="f2fb19f09a688d7221f482646a2976cccb1d5d5e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt; object is usually created from &lt;a href=&quot;schemafactory&quot;&gt;&lt;code&gt;SchemaFactory&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt;オブジェクトは、通常から作成されます&lt;a href=&quot;schemafactory&quot;&gt; &lt;code&gt;SchemaFactory&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bc5b0b24e94205c03509054e6a99979738a4a624" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;selector&quot;&gt;&lt;i&gt;selector&lt;/i&gt;&lt;/a&gt; is a multiplexor of &lt;a href=&quot;selectablechannel&quot;&gt;&lt;i&gt;selectable channels&lt;/i&gt;&lt;/a&gt;, which in turn are a special type of channel that can be put into &lt;a href=&quot;selectablechannel#bm&quot;&gt;&lt;i&gt;non-blocking mode&lt;/i&gt;&lt;/a&gt;. To perform multiplexed I/O operations, one or more selectable channels are first created, put into non-blocking mode, and &lt;a href=&quot;selectablechannel#register(java.nio.channels.Selector,int,java.lang.Object)&quot;&gt;&lt;code&gt;&lt;i&gt;registered&lt;/i&gt;&lt;/code&gt;&lt;/a&gt; with a selector. Registering a channel specifies the set of I/O operations that will be tested for readiness by the selector, and returns a &lt;a href=&quot;selectionkey&quot;&gt;&lt;i&gt;selection key&lt;/i&gt;&lt;/a&gt; that represents the registration.</source>
          <target state="translated">&lt;a href=&quot;selector&quot;&gt;&lt;i&gt;セレクタ&lt;/i&gt;&lt;/a&gt;のマルチプレクサである&lt;a href=&quot;selectablechannel&quot;&gt;&lt;i&gt;選択チャネル&lt;/i&gt;&lt;/a&gt;順次に入れることができるチャネルの特殊な型で、&lt;a href=&quot;selectablechannel#bm&quot;&gt;&lt;i&gt;非ブロッキングモード&lt;/i&gt;&lt;/a&gt;。多重化I / O操作を実行するには、最初に1つ以上の選択可能なチャネルを作成し、非ブロッキングモードにして、セレクターに&lt;a href=&quot;selectablechannel#register(java.nio.channels.Selector,int,java.lang.Object)&quot;&gt; &lt;code&gt;&lt;i&gt;registered&lt;/i&gt;&lt;/code&gt; &lt;/a&gt;します。チャネルを登録すると、セレクターによって準備ができているかどうかがテストされるI / O操作のセットが指定され、登録を表す&lt;a href=&quot;selectionkey&quot;&gt;&lt;i&gt;選択キー&lt;/i&gt;&lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="087599e9f01711a89e5002b6a3fac3496a476ccd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;selector&quot;&gt;&lt;i&gt;selector&lt;/i&gt;&lt;/a&gt; is a multiplexor of &lt;a href=&quot;selectablechannel&quot;&gt;&lt;i&gt;selectable channels&lt;/i&gt;&lt;/a&gt;, which in turn are a special type of channel that can be put into &lt;a href=&quot;selectablechannel#bm&quot;&gt;&lt;i&gt;non-blocking mode&lt;/i&gt;&lt;/a&gt;. To perform multiplexed I/O operations, one or more selectable channels are first created, put into non-blocking mode, and &lt;a href=&quot;selectablechannel#register-java.nio.channels.Selector-int-java.lang.Object-&quot;&gt;&lt;code&gt;&lt;i&gt;registered&lt;/i&gt;&lt;/code&gt;&lt;/a&gt; with a selector. Registering a channel specifies the set of I/O operations that will be tested for readiness by the selector, and returns a &lt;a href=&quot;selectionkey&quot;&gt;&lt;i&gt;selection key&lt;/i&gt;&lt;/a&gt; that represents the registration.</source>
          <target state="translated">&lt;a href=&quot;selector&quot;&gt;&lt;i&gt;セレクタ&lt;/i&gt;&lt;/a&gt;のマルチプレクサである&lt;a href=&quot;selectablechannel&quot;&gt;&lt;i&gt;選択チャネル&lt;/i&gt;&lt;/a&gt;順次に入れることができるチャネルの特殊な型で、&lt;a href=&quot;selectablechannel#bm&quot;&gt;&lt;i&gt;非ブロッキングモード&lt;/i&gt;&lt;/a&gt;。多重I / O操作を実行するには、最初に1つ以上の選択可能なチャネルを作成し、非ブロッキングモードにして、セレクターに&lt;a href=&quot;selectablechannel#register-java.nio.channels.Selector-int-java.lang.Object-&quot;&gt; &lt;code&gt;&lt;i&gt;registered&lt;/i&gt;&lt;/code&gt; &lt;/a&gt;します。チャネルを登録すると、セレクターによって準備状態がテストされる一連のI / O操作が指定され、登録を表す&lt;a href=&quot;selectionkey&quot;&gt;&lt;i&gt;選択キー&lt;/i&gt;&lt;/a&gt;が返されます。</target>
        </trans-unit>
        <trans-unit id="032109425d793487d595a949321d88f0c3ea878c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;set&quot;&gt;&lt;code&gt;Set&lt;/code&gt;&lt;/a&gt; that further provides a</source>
          <target state="translated">A &lt;a href=&quot;set&quot;&gt; &lt;code&gt;Set&lt;/code&gt; &lt;/a&gt;はさらに、</target>
        </trans-unit>
        <trans-unit id="2ec927f94a2df17af6a57f13009aabf70a1618b9" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sortedmap&quot;&gt;&lt;code&gt;SortedMap&lt;/code&gt;&lt;/a&gt; extended with navigation methods returning the closest matches for given search targets.</source>
          <target state="translated">&lt;a href=&quot;sortedmap&quot;&gt; &lt;code&gt;SortedMap&lt;/code&gt; &lt;/a&gt;された検索ターゲットに最も近い一致を返すナビゲーションメソッドで拡張されたSortedMap。</target>
        </trans-unit>
        <trans-unit id="a52e97a9c42db302a5027966560fe5afc820ef62" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sortedmap&quot;&gt;&lt;code&gt;SortedMap&lt;/code&gt;&lt;/a&gt; extended with navigation methods returning the closest matches for given search targets. Methods &lt;a href=&quot;#lowerEntry(K)&quot;&gt;&lt;code&gt;lowerEntry(K)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#floorEntry(K)&quot;&gt;&lt;code&gt;floorEntry(K)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ceilingEntry(K)&quot;&gt;&lt;code&gt;ceilingEntry(K)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#higherEntry(K)&quot;&gt;&lt;code&gt;higherEntry(K)&lt;/code&gt;&lt;/a&gt; return &lt;code&gt;Map.Entry&lt;/code&gt; objects associated with keys respectively less than, less than or equal, greater than or equal, and greater than a given key, returning &lt;code&gt;null&lt;/code&gt; if there is no such key. Similarly, methods &lt;a href=&quot;#lowerKey(K)&quot;&gt;&lt;code&gt;lowerKey(K)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#floorKey(K)&quot;&gt;&lt;code&gt;floorKey(K)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ceilingKey(K)&quot;&gt;&lt;code&gt;ceilingKey(K)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#higherKey(K)&quot;&gt;&lt;code&gt;higherKey(K)&lt;/code&gt;&lt;/a&gt; return only the associated keys. All of these methods are designed for locating, not traversing entries.</source>
          <target state="translated">&lt;a href=&quot;sortedmap&quot;&gt; &lt;code&gt;SortedMap&lt;/code&gt; &lt;/a&gt;された検索ターゲットに最も近い一致を返すナビゲーションメソッドで拡張されたSortedMap。メソッド&lt;a href=&quot;#lowerEntry(K)&quot;&gt; &lt;code&gt;lowerEntry(K)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#floorEntry(K)&quot;&gt; &lt;code&gt;floorEntry(K)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ceilingEntry(K)&quot;&gt; &lt;code&gt;ceilingEntry(K)&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#higherEntry(K)&quot;&gt; &lt;code&gt;higherEntry(K)&lt;/code&gt; &lt;/a&gt;は、それぞれ指定されたキーよりも小さい、以下、以上、およびより大きいキーに関連付けられた &lt;code&gt;Map.Entry&lt;/code&gt; オブジェクトを返します。そのようなキーがない場合は &lt;code&gt;null&lt;/code&gt; を返します。同様に、メソッド&lt;a href=&quot;#lowerKey(K)&quot;&gt; &lt;code&gt;lowerKey(K)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#floorKey(K)&quot;&gt; &lt;code&gt;floorKey(K)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ceilingKey(K)&quot;&gt; &lt;code&gt;ceilingKey(K)&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#higherKey(K)&quot;&gt; &lt;code&gt;higherKey(K)&lt;/code&gt; &lt;/a&gt;は、関連付けられたキーのみを返します。これらのメソッドはすべて、エントリをトラバースするのではなく、検索するために設計されています。</target>
        </trans-unit>
        <trans-unit id="e21a9d8f7719aa430394aa8fcac440d9c1486a90" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sortedmap&quot;&gt;&lt;code&gt;SortedMap&lt;/code&gt;&lt;/a&gt; extended with navigation methods returning the closest matches for given search targets. Methods &lt;code&gt;lowerEntry&lt;/code&gt;, &lt;code&gt;floorEntry&lt;/code&gt;, &lt;code&gt;ceilingEntry&lt;/code&gt;, and &lt;code&gt;higherEntry&lt;/code&gt; return &lt;code&gt;Map.Entry&lt;/code&gt; objects associated with keys respectively less than, less than or equal, greater than or equal, and greater than a given key, returning &lt;code&gt;null&lt;/code&gt; if there is no such key. Similarly, methods &lt;code&gt;lowerKey&lt;/code&gt;, &lt;code&gt;floorKey&lt;/code&gt;, &lt;code&gt;ceilingKey&lt;/code&gt;, and &lt;code&gt;higherKey&lt;/code&gt; return only the associated keys. All of these methods are designed for locating, not traversing entries.</source>
          <target state="translated">&lt;a href=&quot;sortedmap&quot;&gt; &lt;code&gt;SortedMap&lt;/code&gt; &lt;/a&gt;された検索ターゲットに最も近い一致を返すナビゲーションメソッドで拡張されたSortedMap。方法 &lt;code&gt;lowerEntry&lt;/code&gt; 、 &lt;code&gt;floorEntry&lt;/code&gt; 、 &lt;code&gt;ceilingEntry&lt;/code&gt; 、及び &lt;code&gt;higherEntry&lt;/code&gt; リターン &lt;code&gt;Map.Entry&lt;/code&gt; オブジェクトは、以下、それぞれ、以下のキーに関連付けられているか又は等しい、以上で、かつ指定されたキーよりも大きく、戻し &lt;code&gt;null&lt;/code&gt; そのようなキーが存在しない場合。同様に、方法 &lt;code&gt;lowerKey&lt;/code&gt; 、 &lt;code&gt;floorKey&lt;/code&gt; 、 &lt;code&gt;ceilingKey&lt;/code&gt; 、及び &lt;code&gt;higherKey&lt;/code&gt; のリターンのみ関連するキー。これらのメソッドはすべて、エントリを検索するためではなく、検索するために設計されています。</target>
        </trans-unit>
        <trans-unit id="ad1503f25864e0bfc71b631cdd88fd205a72ed21" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sortedset&quot;&gt;&lt;code&gt;SortedSet&lt;/code&gt;&lt;/a&gt; extended with navigation methods reporting closest matches for given search targets.</source>
          <target state="translated">特定の検索ターゲットに最も近い一致を報告するナビゲーションメソッドで拡張された&lt;a href=&quot;sortedset&quot;&gt; &lt;code&gt;SortedSet&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a3dd81efb8d626da5a7fc78314d3fa030b1cb443" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sortedset&quot;&gt;&lt;code&gt;SortedSet&lt;/code&gt;&lt;/a&gt; extended with navigation methods reporting closest matches for given search targets. Methods &lt;a href=&quot;#lower(E)&quot;&gt;&lt;code&gt;lower(E)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#floor(E)&quot;&gt;&lt;code&gt;floor(E)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#ceiling(E)&quot;&gt;&lt;code&gt;ceiling(E)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#higher(E)&quot;&gt;&lt;code&gt;higher(E)&lt;/code&gt;&lt;/a&gt; return elements respectively less than, less than or equal, greater than or equal, and greater than a given element, returning &lt;code&gt;null&lt;/code&gt; if there is no such element.</source>
          <target state="translated">特定の検索ターゲットに最も近い一致を報告するナビゲーションメソッドで拡張された&lt;a href=&quot;sortedset&quot;&gt; &lt;code&gt;SortedSet&lt;/code&gt; &lt;/a&gt;。メソッド&lt;a href=&quot;#lower(E)&quot;&gt; &lt;code&gt;lower(E)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#floor(E)&quot;&gt; &lt;code&gt;floor(E)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#ceiling(E)&quot;&gt; &lt;code&gt;ceiling(E)&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#higher(E)&quot;&gt; &lt;code&gt;higher(E)&lt;/code&gt; &lt;/a&gt;は、それぞれ、指定された要素よりも小さい、小さい、または等しい、より大きい、またはより大きい要素を返し、存在しない場合は &lt;code&gt;null&lt;/code&gt; を返します。そのような要素。</target>
        </trans-unit>
        <trans-unit id="144a593f0c8b14f1b705cfe56ecd7f10e553f7dd" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;sortedset&quot;&gt;&lt;code&gt;SortedSet&lt;/code&gt;&lt;/a&gt; extended with navigation methods reporting closest matches for given search targets. Methods &lt;code&gt;lower&lt;/code&gt;, &lt;code&gt;floor&lt;/code&gt;, &lt;code&gt;ceiling&lt;/code&gt;, and &lt;code&gt;higher&lt;/code&gt; return elements respectively less than, less than or equal, greater than or equal, and greater than a given element, returning &lt;code&gt;null&lt;/code&gt; if there is no such element. A &lt;code&gt;NavigableSet&lt;/code&gt; may be accessed and traversed in either ascending or descending order. The &lt;code&gt;descendingSet&lt;/code&gt; method returns a view of the set with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. This interface additionally defines methods &lt;code&gt;pollFirst&lt;/code&gt; and &lt;code&gt;pollLast&lt;/code&gt; that return and remove the lowest and highest element, if one exists, else returning &lt;code&gt;null&lt;/code&gt;. Methods &lt;code&gt;subSet&lt;/code&gt;, &lt;code&gt;headSet&lt;/code&gt;, and &lt;code&gt;tailSet&lt;/code&gt; differ from the like-named &lt;code&gt;SortedSet&lt;/code&gt; methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Subsets of any &lt;code&gt;NavigableSet&lt;/code&gt; must implement the &lt;code&gt;NavigableSet&lt;/code&gt; interface.</source>
          <target state="translated">特定の検索ターゲットに最も近い一致を報告するナビゲーションメソッドで拡張された&lt;a href=&quot;sortedset&quot;&gt; &lt;code&gt;SortedSet&lt;/code&gt; &lt;/a&gt;。メソッド &lt;code&gt;lower&lt;/code&gt; 、 &lt;code&gt;floor&lt;/code&gt; 、 &lt;code&gt;ceiling&lt;/code&gt; 、および &lt;code&gt;higher&lt;/code&gt; は、指定された要素よりも小さい、小さい、等しい、大きい、等しい、および大きい要素をそれぞれ返し、そのような要素がない場合は &lt;code&gt;null&lt;/code&gt; を返します。A &lt;code&gt;NavigableSet&lt;/code&gt; アクセスし昇順または降順のいずれかに横断することができます。 &lt;code&gt;descendingSet&lt;/code&gt; methodは、すべての関係メソッドと方向メソッドの意味を逆にしたセットのビューを返します。昇順の操作とビューのパフォーマンスは、降順の操作とビューのパフォーマンスよりも速い可能性があります。このインターフェイスは、最低と最高の要素が存在する場合はそれを返し、削除するメソッド &lt;code&gt;pollFirst&lt;/code&gt; と &lt;code&gt;pollLast&lt;/code&gt; を追加で定義し、存在しない場合は &lt;code&gt;null&lt;/code&gt; を返します。メソッド &lt;code&gt;subSet&lt;/code&gt; 、 &lt;code&gt;headSet&lt;/code&gt; 、および &lt;code&gt;tailSet&lt;/code&gt; は、下限と上限が包括的であるか排他的であるかを説明する追加の引数を受け入れる点で、同じ名前の &lt;code&gt;SortedSet&lt;/code&gt; メソッドとは異なります。いずれかのサブセット &lt;code&gt;NavigableSet&lt;/code&gt; 実装しなければならない &lt;code&gt;NavigableSet&lt;/code&gt; インターフェース。</target>
        </trans-unit>
        <trans-unit id="508e612041bd0602e15347f4cc7579e902e0b73c" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;spi/resourcebundleprovider&quot;&gt;resource bundle provider&lt;/a&gt; can provide resource bundles in any format such XML which replaces the need of &lt;a href=&quot;resourcebundle.control&quot;&gt;&lt;code&gt;ResourceBundle.Control&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;spi/resourcebundleprovider&quot;&gt;リソースバンドルプロバイダは、&lt;/a&gt;の必要性代わる任意のフォーマットなどXMLでリソースバンドルを提供することができます&lt;a href=&quot;resourcebundle.control&quot;&gt; &lt;code&gt;ResourceBundle.Control&lt;/code&gt; のを&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="597357397545095f7f66f71c486785ddb3a1b7d4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;stringmonitor&quot;&gt;&lt;code&gt;StringMonitor&lt;/code&gt;&lt;/a&gt; observes attributes of type &lt;code&gt;String&lt;/code&gt;. A notification is sent when an observed attribute becomes equal and/or not equal to a given string.</source>
          <target state="translated">A &lt;a href=&quot;stringmonitor&quot;&gt; &lt;code&gt;StringMonitor&lt;/code&gt; 文字&lt;/a&gt;型の属性を観察 &lt;code&gt;String&lt;/code&gt; 。監視対象の属性が指定された文字列と等しくなる、または等しくならない場合に通知が送信されます。</target>
        </trans-unit>
        <trans-unit id="7a554775d08ef16a1db651cce70fc15d0d58082e" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;synthesizer&quot;&gt;&lt;code&gt;Synthesizer&lt;/code&gt;&lt;/a&gt; object has a collection of &lt;code&gt;MidiChannels&lt;/code&gt;, usually one for each of the 16 channels prescribed by the MIDI 1.0 specification. The &lt;code&gt;Synthesizer&lt;/code&gt; generates sound when its &lt;code&gt;MidiChannels&lt;/code&gt; receive &lt;code&gt;noteOn&lt;/code&gt; messages.</source>
          <target state="translated">&lt;a href=&quot;synthesizer&quot;&gt; &lt;code&gt;Synthesizer&lt;/code&gt; &lt;/a&gt;オブジェクトは、収集有する &lt;code&gt;MidiChannels&lt;/code&gt; を通常、MIDI 1.0仕様で規定さ16チャンネルのそれぞれに1つずつ。 &lt;code&gt;Synthesizer&lt;/code&gt; その時に音を発生 &lt;code&gt;MidiChannels&lt;/code&gt; が受信 &lt;code&gt;noteOn&lt;/code&gt; メッセージ。</target>
        </trans-unit>
        <trans-unit id="5a012dfeebb79628d1686005f76e53e7142647b5" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;threadpoolexecutor&quot;&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/a&gt; that can additionally schedule commands to run after a given delay, or to execute periodically.</source>
          <target state="translated">A &lt;a href=&quot;threadpoolexecutor&quot;&gt; &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; &lt;/a&gt;さらに所定の遅延後に実行するコマンドをスケジュールすることができ、又は定期的に実行します。</target>
        </trans-unit>
        <trans-unit id="e1281a7af3f4c9dee846ab6949518dda5707a61d" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;threadpoolexecutor&quot;&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/a&gt; that can additionally schedule commands to run after a given delay, or to execute periodically. This class is preferable to &lt;a href=&quot;../timer&quot;&gt;&lt;code&gt;Timer&lt;/code&gt;&lt;/a&gt; when multiple worker threads are needed, or when the additional flexibility or capabilities of &lt;a href=&quot;threadpoolexecutor&quot;&gt;&lt;code&gt;ThreadPoolExecutor&lt;/code&gt;&lt;/a&gt; (which this class extends) are required.</source>
          <target state="translated">A &lt;a href=&quot;threadpoolexecutor&quot;&gt; &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; &lt;/a&gt;さらに所定の遅延後に実行するコマンドをスケジュールすることができ、又は定期的に実行します。このクラスは、複数のワーカースレッドが必要な場合、または&lt;a href=&quot;threadpoolexecutor&quot;&gt; &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; &lt;/a&gt;（このクラスが拡張する）の追加の柔軟性または機能が必要な場合に、&lt;a href=&quot;../timer&quot;&gt; &lt;code&gt;Timer&lt;/code&gt; &lt;/a&gt;よりも適しています。</target>
        </trans-unit>
        <trans-unit id="21b3d179f0825291774efe6d3750b47065d83336" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;transformerconfigurationexception&quot;&gt;&lt;code&gt;TransformerConfigurationException&lt;/code&gt;&lt;/a&gt; may be thrown if for any reason a Transformer can not be created. A TransformerConfigurationException may be thrown if there is a syntax error in the transformation instructions, for example when &lt;a href=&quot;transformerfactory#newTransformer(javax.xml.transform.Source)&quot;&gt;&lt;code&gt;TransformerFactory.newTransformer(javax.xml.transform.Source)&lt;/code&gt;&lt;/a&gt; is called.</source>
          <target state="translated">A&lt;a href=&quot;transformerconfigurationexception&quot;&gt; &lt;code&gt;TransformerConfigurationException&lt;/code&gt; &lt;/a&gt;何らかの理由で変圧器が作成できない場合にスローされることがあります。&lt;a href=&quot;transformerfactory#newTransformer(javax.xml.transform.Source)&quot;&gt; &lt;code&gt;TransformerFactory.newTransformer(javax.xml.transform.Source)&lt;/code&gt; &lt;/a&gt;が呼び出された場合など、変換命令に構文エラーがある場合、TransformerConfigurationExceptionがスローされることがあります。</target>
        </trans-unit>
        <trans-unit id="804686a9d3acef4144d066dce97c14041c82c5c4" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt; is automatically reset every time the startDocument method is invoked.</source>
          <target state="translated">A&lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; &lt;/a&gt;自動的にstartDocumentメソッドが呼び出されるたびにリセットされます。</target>
        </trans-unit>
        <trans-unit id="8e2baa9508561c44624c1e607804e4410a22b720" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt; may buffer events to certain extent, but to allow &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt; to be used by a parser, the following requirement has to be met.</source>
          <target state="translated">A&lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; &lt;/a&gt;ある程度イベントをバッファリングすることができるが、可能にする&lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; &lt;/a&gt;パーサによって使用されるように、次の要件を満たさなければなりません。</target>
        </trans-unit>
        <trans-unit id="418af67dd0828ba9e383620ac5b3cc678ea2af16" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt; object is not thread-safe and not reentrant. In other words, it is the application's responsibility to make sure that one &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt; object is not used from more than one thread at any given time.</source>
          <target state="translated">A&lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; &lt;/a&gt;オブジェクトは、スレッドセーフではなくリエントラントではありません。つまり、1つの&lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; &lt;/a&gt;オブジェクトが常に複数のスレッドから使​​用されないようにするのはアプリケーションの責任です。</target>
        </trans-unit>
        <trans-unit id="eceb4a0aa8cdf9a5bb4f0898489012d46eb2694b" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;watchable&quot;&gt;&lt;code&gt;Watchable&lt;/code&gt;&lt;/a&gt; object is registered with a watch service by invoking its &lt;a href=&quot;watchable#register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind%5B%5D,java.nio.file.WatchEvent.Modifier...)&quot;&gt;&lt;code&gt;register&lt;/code&gt;&lt;/a&gt; method, returning a &lt;a href=&quot;watchkey&quot;&gt;&lt;code&gt;WatchKey&lt;/code&gt;&lt;/a&gt; to represent the registration. When an event for an object is detected the key is &lt;em&gt;signalled&lt;/em&gt;, and if not currently signalled, it is queued to the watch service so that it can be retrieved by consumers that invoke the &lt;a href=&quot;#poll()&quot;&gt;&lt;code&gt;poll&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#take()&quot;&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt; methods to retrieve keys and process events. Once the events have been processed the consumer invokes the key's &lt;a href=&quot;watchkey#reset()&quot;&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/a&gt; method to reset the key which allows the key to be signalled and re-queued with further events.</source>
          <target state="translated">&lt;a href=&quot;watchable&quot;&gt; &lt;code&gt;Watchable&lt;/code&gt; &lt;/a&gt;オブジェクトは、その呼び出すことによって、時計サービスに登録された&lt;a href=&quot;watchable#register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind%5B%5D,java.nio.file.WatchEvent.Modifier...)&quot;&gt; &lt;code&gt;register&lt;/code&gt; &lt;/a&gt;の復帰、方法を&lt;a href=&quot;watchkey&quot;&gt; &lt;code&gt;WatchKey&lt;/code&gt; を&lt;/a&gt;登録を表現するために。オブジェクトのイベントが検出された場合、キーがされて&lt;em&gt;合図&lt;/em&gt;し、現在は知らされていない場合、呼び出すことを消費者が取得できるように、それは時計のサービスにキューイングされる&lt;a href=&quot;#poll()&quot;&gt; &lt;code&gt;poll&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#take()&quot;&gt; &lt;code&gt;take&lt;/code&gt; &lt;/a&gt;キーやプロセスイベントを取得するためのメソッドを。イベントが処理されると、コンシューマーはキーの&lt;a href=&quot;watchkey#reset()&quot;&gt; &lt;code&gt;reset&lt;/code&gt; &lt;/a&gt;メソッドを呼び出してキーをリセットします。これにより、キーに信号を送信し、さらにイベントをキューに入れることができます。</target>
        </trans-unit>
        <trans-unit id="5e38e84dbd5fbf8c4a36da4fa6f64faf252dc448" translate="yes" xml:space="preserve">
          <source>A &lt;a href=&quot;watchable&quot;&gt;&lt;code&gt;Watchable&lt;/code&gt;&lt;/a&gt; object is registered with a watch service by invoking its &lt;a href=&quot;watchable#register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind:A-java.nio.file.WatchEvent.Modifier...-&quot;&gt;&lt;code&gt;register&lt;/code&gt;&lt;/a&gt; method, returning a &lt;a href=&quot;watchkey&quot;&gt;&lt;code&gt;WatchKey&lt;/code&gt;&lt;/a&gt; to represent the registration. When an event for an object is detected the key is &lt;em&gt;signalled&lt;/em&gt;, and if not currently signalled, it is queued to the watch service so that it can be retrieved by consumers that invoke the &lt;a href=&quot;watchservice#poll--&quot;&gt;&lt;code&gt;poll&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;watchservice#take--&quot;&gt;&lt;code&gt;take&lt;/code&gt;&lt;/a&gt; methods to retrieve keys and process events. Once the events have been processed the consumer invokes the key's &lt;a href=&quot;watchkey#reset--&quot;&gt;&lt;code&gt;reset&lt;/code&gt;&lt;/a&gt; method to reset the key which allows the key to be signalled and re-queued with further events.</source>
          <target state="translated">&lt;a href=&quot;watchable&quot;&gt; &lt;code&gt;Watchable&lt;/code&gt; &lt;/a&gt;オブジェクトは、その呼び出すことによって、時計サービスに登録された&lt;a href=&quot;watchable#register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind:A-java.nio.file.WatchEvent.Modifier...-&quot;&gt; &lt;code&gt;register&lt;/code&gt; &lt;/a&gt;の復帰、方法を&lt;a href=&quot;watchkey&quot;&gt; &lt;code&gt;WatchKey&lt;/code&gt; を&lt;/a&gt;登録を表現するために。オブジェクトのイベントが検出されると、キーが&lt;em&gt;通知&lt;/em&gt;され、現在通知されていない場合は、監視サービスのキューに入れられるため、&lt;a href=&quot;watchservice#poll--&quot;&gt; &lt;code&gt;poll&lt;/code&gt; &lt;/a&gt;を呼び出すか&lt;a href=&quot;watchservice#take--&quot;&gt; &lt;code&gt;take&lt;/code&gt; &lt;/a&gt;メソッドを取得してキーを取得し、イベントを処理するコンシューマーがそれを取得できます。イベントが処理されると、コンシューマーはキーの&lt;a href=&quot;watchkey#reset--&quot;&gt; &lt;code&gt;reset&lt;/code&gt; &lt;/a&gt;メソッドを呼び出してキーをリセットします。これにより、キーに信号を送信し、さらにイベントをキューに再登録できます。</target>
        </trans-unit>
        <trans-unit id="24a065fa3080837963ec25eca30e237dde0239bf" translate="yes" xml:space="preserve">
          <source>A &lt;a id=&quot;week_year&quot;&gt;&lt;em&gt;week year&lt;/em&gt;&lt;/a&gt; is in sync with a &lt;code&gt;WEEK_OF_YEAR&lt;/code&gt; cycle. All weeks between the first and last weeks (inclusive) have the same &lt;em&gt;week year&lt;/em&gt; value. Therefore, the first and last days of a week year may have different calendar year values.</source>
          <target state="translated">1&lt;a id=&quot;week_year&quot;&gt;&lt;em&gt;週間&lt;/em&gt;&lt;/a&gt;は、 &lt;code&gt;WEEK_OF_YEAR&lt;/code&gt; サイクルと同期しています。最初の週と最後の週（両端を含む）の間のすべての週の&lt;em&gt;週の年の&lt;/em&gt;値は同じです。したがって、週の最初と最後の日は、暦年の値が異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="bafaa93643e476baab4c314bb4e8fec0898917e2" translate="yes" xml:space="preserve">
          <source>A &lt;a name=&quot;week_year&quot;&gt;&lt;em&gt;week year&lt;/em&gt;&lt;/a&gt; is in sync with a &lt;code&gt;WEEK_OF_YEAR&lt;/code&gt; cycle. All weeks between the first and last weeks (inclusive) have the same &lt;em&gt;week year&lt;/em&gt; value. Therefore, the first and last days of a week year may have different calendar year values.</source>
          <target state="translated">1 &lt;a name=&quot;week_year&quot;&gt;&lt;em&gt;週間の年&lt;/em&gt;&lt;/a&gt;は &lt;code&gt;WEEK_OF_YEAR&lt;/code&gt; サイクルと同期しています。最初の週から最後の週までのすべての週（包括的）の&lt;em&gt;週の&lt;/em&gt;値は同じです。したがって、週の最初と最後の日は、暦年の値が異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="3a32bd68e7a89017dff287ded45b918cb9d1e779" translate="yes" xml:space="preserve">
          <source>A &lt;b&gt;synchronized view&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;同期ビュー&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="72336d1e66f1a59676f137b1d515bc4f4f29e666" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;synthesizer&quot;&gt;&lt;code&gt;Synthesizer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; object has a collection of &lt;code&gt;MidiChannels&lt;/code&gt;, usually one for each of the 16 channels prescribed by the MIDI 1.0 specification. The &lt;code&gt;Synthesizer&lt;/code&gt; generates sound when its &lt;code&gt;MidiChannels&lt;/code&gt; receive &lt;code&gt;noteOn&lt;/code&gt; messages.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;synthesizer&quot;&gt;&lt;code&gt;Synthesizer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; オブジェクトは、収集有する &lt;code&gt;MidiChannels&lt;/code&gt; を通常、MIDI 1.0仕様で規定さ16チャンネルのそれぞれに1つずつ。 &lt;code&gt;Synthesizer&lt;/code&gt; その時に音を発生 &lt;code&gt;MidiChannels&lt;/code&gt; が受信 &lt;code&gt;noteOn&lt;/code&gt; メッセージ。</target>
        </trans-unit>
        <trans-unit id="88a61d5e72877351082e461191f01eacb47de075" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BasicAttribute&lt;/code&gt; instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify a &lt;code&gt;BasicAttribute&lt;/code&gt; should lock the object.</source>
          <target state="translated">&lt;code&gt;BasicAttribute&lt;/code&gt; にのインスタンスは、並行マルチスレッドアクセスに対して同期化されません。 &lt;code&gt;BasicAttribute&lt;/code&gt; にアクセスして変更しようとする複数のスレッドは、オブジェクトをロックする必要があります。</target>
        </trans-unit>
        <trans-unit id="3d042ed6072ed6223bbeecf825d60331abea845a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BeanContextChild&lt;/code&gt;, or any arbitrary object associated with a &lt;code&gt;BeanContextChild&lt;/code&gt;, may obtain a reference to a currently registered service from its nesting &lt;code&gt;BeanContextServices&lt;/code&gt; via invocation of this method.</source>
          <target state="translated">A &lt;code&gt;BeanContextChild&lt;/code&gt; 、または関連付けられた任意のオブジェクト &lt;code&gt;BeanContextChild&lt;/code&gt; 、そのネストから現在登録されているサービスへの参照取得してもよい &lt;code&gt;BeanContextServices&lt;/code&gt; このメソッドの呼び出しを介し。</target>
        </trans-unit>
        <trans-unit id="e6477efbf7cdc53cfaece4e371f5177317ac7154" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BeanContextChild&lt;/code&gt;, or any arbitrary object associated with a &lt;code&gt;BeanContextChild&lt;/code&gt;, may obtain a reference to a currently registered service from its nesting &lt;code&gt;BeanContextServices&lt;/code&gt; via invocation of this method. When invoked, this method gets the service by calling the getService() method on the underlying &lt;code&gt;BeanContextServiceProvider&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;BeanContextChild&lt;/code&gt; 、または関連付けられた任意のオブジェクト &lt;code&gt;BeanContextChild&lt;/code&gt; 、そのネストから現在登録されているサービスへの参照取得してもよい &lt;code&gt;BeanContextServices&lt;/code&gt; このメソッドの呼び出しを介し。このメソッドが呼び出されると、基礎となる &lt;code&gt;BeanContextServiceProvider&lt;/code&gt; で getService（）メソッドを呼び出すことによってサービスを取得します。</target>
        </trans-unit>
        <trans-unit id="a7d937e3de27065b64bf0d388046e7b99fcc1d9d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BeanContextMembershipEvent&lt;/code&gt; encapsulates the list of children added to, or removed from, the membership of a particular &lt;code&gt;BeanContext&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;BeanContextMembershipEvent&lt;/code&gt; はに追加子のリストをカプセル化し、またはから取り外し、特定の会員 &lt;code&gt;BeanContext&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="91bf1275319962cf826fde3798c03e8953740be4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BeanContextMembershipEvent&lt;/code&gt; encapsulates the list of children added to, or removed from, the membership of a particular &lt;code&gt;BeanContext&lt;/code&gt;. An instance of this event is fired whenever a successful add(), remove(), retainAll(), removeAll(), or clear() is invoked on a given &lt;code&gt;BeanContext&lt;/code&gt; instance. Objects interested in receiving events of this type must implement the &lt;code&gt;BeanContextMembershipListener&lt;/code&gt; interface, and must register their intent via the &lt;code&gt;BeanContext&lt;/code&gt;'s &lt;code&gt;addBeanContextMembershipListener(BeanContextMembershipListener bcml)
 &lt;/code&gt; method.</source>
          <target state="translated">A &lt;code&gt;BeanContextMembershipEvent&lt;/code&gt; はに追加子のリストをカプセル化し、またはから取り外し、特定の会員 &lt;code&gt;BeanContext&lt;/code&gt; 。このイベントのインスタンスは、指定された &lt;code&gt;BeanContext&lt;/code&gt; インスタンスでadd（）、remove（）、retainAll（）、removeAll（）、またはclear（）が正常に呼び出されるたびに発生します。このタイプのイベントを受信することに関心のオブジェクトが実装する必要 &lt;code&gt;BeanContextMembershipListener&lt;/code&gt; 仕様のインターフェースを、を介してそれらの意図を登録しなければならない &lt;code&gt;BeanContext&lt;/code&gt; の &lt;code&gt;addBeanContextMembershipListener(BeanContextMembershipListener bcml) &lt;/code&gt; 方法。</target>
        </trans-unit>
        <trans-unit id="9659d34478898dfbbfc3a12cfe88bfdd0393753b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BeanContextMembershipEvent&lt;/code&gt; encapsulates the list of children added to, or removed from, the membership of a particular &lt;code&gt;BeanContext&lt;/code&gt;. An instance of this event is fired whenever a successful add(), remove(), retainAll(), removeAll(), or clear() is invoked on a given &lt;code&gt;BeanContext&lt;/code&gt; instance. Objects interested in receiving events of this type must implement the &lt;code&gt;BeanContextMembershipListener&lt;/code&gt; interface, and must register their intent via the &lt;code&gt;BeanContext&lt;/code&gt;'s &lt;code&gt;addBeanContextMembershipListener(BeanContextMembershipListener bcml)&lt;/code&gt; method.</source>
          <target state="translated">A &lt;code&gt;BeanContextMembershipEvent&lt;/code&gt; はに追加子のリストをカプセル化し、またはから取り外し、特定の会員 &lt;code&gt;BeanContext&lt;/code&gt; 。このイベントのインスタンスは、特定の &lt;code&gt;BeanContext&lt;/code&gt; インスタンスでadd（）、remove（）、retainAll（）、removeAll（）、またはclear（）が正常に呼び出されるたびに発生します。このタイプのイベントの受信に関心のあるオブジェクトは、 &lt;code&gt;BeanContextMembershipListener&lt;/code&gt; インターフェースを実装する必要があり、 &lt;code&gt;BeanContext&lt;/code&gt; の &lt;code&gt;addBeanContextMembershipListener(BeanContextMembershipListener bcml)&lt;/code&gt; メソッドを介してその意図を登録する必要があります。</target>
        </trans-unit>
        <trans-unit id="a6e0eebcfe0d3ed57683c9fc7337776a57a3c700" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Bindings&lt;/code&gt; that can be used to replace the state of this &lt;code&gt;ScriptEngine&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;Bindings&lt;/code&gt; この状態置き換えるために使用することができ &lt;code&gt;ScriptEngine&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9d9959b72a03cd70ae64c8744d103a8f8d2d3869" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BitSet&lt;/code&gt; is not safe for multithreaded use without external synchronization.</source>
          <target state="translated">A &lt;code&gt;BitSet&lt;/code&gt; 外部同期せずにマルチスレッドを使用するのは安全ではありません。</target>
        </trans-unit>
        <trans-unit id="db3d71546bbd73bb0af0b4a8e54824d1d4daee9b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BlockingDeque&lt;/code&gt; implementation may be used directly as a FIFO &lt;code&gt;BlockingQueue&lt;/code&gt;. The methods inherited from the &lt;code&gt;BlockingQueue&lt;/code&gt; interface are precisely equivalent to &lt;code&gt;BlockingDeque&lt;/code&gt; methods as indicated in the following table:</source>
          <target state="translated">&lt;code&gt;BlockingDeque&lt;/code&gt; の実装では、FIFOとして直接使用することができる &lt;code&gt;BlockingQueue&lt;/code&gt; の。 &lt;code&gt;BlockingQueue&lt;/code&gt; インターフェースから継承したメソッドは、次の表に示すように、 &lt;code&gt;BlockingDeque&lt;/code&gt; メソッドとまったく同じです。</target>
        </trans-unit>
        <trans-unit id="a76835f399a49c314d4b4e5405eae0aaf04257b5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BlockingQueue&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; intrinsically support any kind of &quot;close&quot; or &quot;shutdown&quot; operation to indicate that no more items will be added. The needs and usage of such features tend to be implementation-dependent. For example, a common tactic is for producers to insert special &lt;em&gt;end-of-stream&lt;/em&gt; or &lt;em&gt;poison&lt;/em&gt; objects, that are interpreted accordingly when taken by consumers.</source>
          <target state="translated">A &lt;code&gt;BlockingQueue&lt;/code&gt; のはない&lt;em&gt;ではない&lt;/em&gt;、本質的にそれ以上の項目が追加されないことを示すために、「クローズ」または「シャットダウン」操作のいずれかの種類をサポートしています。このような機能のニーズと使用法は、実装に依存する傾向があります。たとえば、一般的な戦術は、プロデューサーが特別な&lt;em&gt;ストリーム終了&lt;/em&gt;オブジェクトまたは&lt;em&gt;有害&lt;/em&gt;オブジェクトを挿入すること&lt;em&gt;です。&lt;/em&gt;これらのオブジェクトは、コンシューマーが取得すると適切に解釈されます。</target>
        </trans-unit>
        <trans-unit id="eca4d1d80b86d58c41ef4f6ba5994e1a2b48aa61" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BlockingQueue&lt;/code&gt; does not accept &lt;code&gt;null&lt;/code&gt; elements. Implementations throw &lt;code&gt;NullPointerException&lt;/code&gt; on attempts to &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;put&lt;/code&gt; or &lt;code&gt;offer&lt;/code&gt; a &lt;code&gt;null&lt;/code&gt;. A &lt;code&gt;null&lt;/code&gt; is used as a sentinel value to indicate failure of &lt;code&gt;poll&lt;/code&gt; operations.</source>
          <target state="translated">A &lt;code&gt;BlockingQueue&lt;/code&gt; のは受け入れない &lt;code&gt;null&lt;/code&gt; 要素を。 &lt;code&gt;null&lt;/code&gt; を &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;put&lt;/code&gt; または &lt;code&gt;offer&lt;/code&gt; しようとすると、実装は &lt;code&gt;NullPointerException&lt;/code&gt; をスローします。 &lt;code&gt;null&lt;/code&gt; 失敗を示すために、センチネル値として使用される &lt;code&gt;poll&lt;/code&gt; 動作を制御します。</target>
        </trans-unit>
        <trans-unit id="b78b406a4e1bd798dd6d5ed40a98f39662fdf4d6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BlockingQueue&lt;/code&gt; may be capacity bounded. At any given time it may have a &lt;code&gt;remainingCapacity&lt;/code&gt; beyond which no additional elements can be &lt;code&gt;put&lt;/code&gt; without blocking. A &lt;code&gt;BlockingQueue&lt;/code&gt; without any intrinsic capacity constraints always reports a remaining capacity of &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;BlockingQueue&lt;/code&gt; 容量が制限されます。任意の時点でそれが持っているかもしれ &lt;code&gt;remainingCapacity&lt;/code&gt; 追加の要素をすることができ、それを超える &lt;code&gt;put&lt;/code&gt; ブロックせずに。A &lt;code&gt;BlockingQueue&lt;/code&gt; の任意の固有の容量制約のない、常に残量報告 &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; のを。</target>
        </trans-unit>
        <trans-unit id="a3723120985482d8ca2245a8af75ed9fa27d4ebc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BodyHandler&lt;/code&gt; is a function that takes a &lt;a href=&quot;httpresponse.responseinfo&quot;&gt;&lt;code&gt;ResponseInfo&lt;/code&gt;&lt;/a&gt; object; and which returns a &lt;code&gt;BodySubscriber&lt;/code&gt;. The &lt;code&gt;BodyHandler&lt;/code&gt; is invoked when the response status code and headers are available, but before the response body bytes are received.</source>
          <target state="translated">A &lt;code&gt;BodyHandler&lt;/code&gt; を取る関数である&lt;a href=&quot;httpresponse.responseinfo&quot;&gt; &lt;code&gt;ResponseInfo&lt;/code&gt; の&lt;/a&gt;オブジェクトを、そして、 &lt;code&gt;BodySubscriber&lt;/code&gt; を返します。 &lt;code&gt;BodyHandler&lt;/code&gt; は、応答ステータスコードとヘッダが利用可能であるときに呼び出されるが、応答の前に身体バイトが受信されます。</target>
        </trans-unit>
        <trans-unit id="954a6d2d3b78f37533eb6cf9697e804c459bbe7c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BodyPublisher&lt;/code&gt; converts high-level Java objects into a flow of byte buffers suitable for sending as a request body.</source>
          <target state="translated">A &lt;code&gt;BodyPublisher&lt;/code&gt; は、 Javaがリクエストボディとして送信するのに適したバイトバッファの流れの中にオブジェクトをハイレベルに変換します。</target>
        </trans-unit>
        <trans-unit id="5046af99e5a6c729927a847e5bf6b77f18c851b5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BodyPublisher&lt;/code&gt; converts high-level Java objects into a flow of byte buffers suitable for sending as a request body. The class &lt;a href=&quot;httprequest.bodypublishers&quot;&gt;&lt;code&gt;BodyPublishers&lt;/code&gt;&lt;/a&gt; provides implementations of many common publishers.</source>
          <target state="translated">A &lt;code&gt;BodyPublisher&lt;/code&gt; は、 Javaがリクエストボディとして送信するのに適したバイトバッファの流れの中にオブジェクトをハイレベルに変換します。&lt;a href=&quot;httprequest.bodypublishers&quot;&gt; &lt;code&gt;BodyPublishers&lt;/code&gt; &lt;/a&gt;クラスは、多くの一般的なパブリッシャーの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="32c0496d2a688ac3691600ee951d371fb8c23bc9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BodyPublisher&lt;/code&gt; that reports a &lt;a href=&quot;#contentLength()&quot;&gt;content length&lt;/a&gt; of &lt;code&gt;0&lt;/code&gt; may not be subscribed to by the HTTP Client, as it has effectively no data to publish.</source>
          <target state="translated">A &lt;code&gt;BodyPublisher&lt;/code&gt; 報告し&lt;a href=&quot;#contentLength()&quot;&gt;たコンテンツの長さ&lt;/a&gt;の &lt;code&gt;0&lt;/code&gt; は、それが効果的に公開するデータがないとして、HTTPクライアントによってサブスクライブすることはできません。</target>
        </trans-unit>
        <trans-unit id="09e2ed31874107bea79cfdfff944b7b53f0559f0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BodySubscriber&lt;/code&gt; consumes response body bytes and converts them into a higher-level Java type.</source>
          <target state="translated">A &lt;code&gt;BodySubscriber&lt;/code&gt; は、上位のJava型に応答ボディバイトと変換して消費します。</target>
        </trans-unit>
        <trans-unit id="3a8eade4c0acab26b1e0c3b867ecd680ca13e093" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BodySubscriber&lt;/code&gt; consumes response body bytes and converts them into a higher-level Java type. The class &lt;a href=&quot;httpresponse.bodysubscribers&quot;&gt;&lt;code&gt;BodySubscriber&lt;/code&gt;&lt;/a&gt; provides implementations of many common body subscribers.</source>
          <target state="translated">A &lt;code&gt;BodySubscriber&lt;/code&gt; は、上位のJava型に応答ボディバイトと変換して消費します。クラス&lt;a href=&quot;httpresponse.bodysubscribers&quot;&gt; &lt;code&gt;BodySubscriber&lt;/code&gt; &lt;/a&gt;は、多くの一般的なボディサブスクライバーの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="94fa6de5ff198e7b7db08299fb3c5ea98a20afd4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BodySubscriber&lt;/code&gt; consumes response body bytes and converts them into a higher-level Java type. The class &lt;a href=&quot;httpresponse.bodysubscribers&quot;&gt;&lt;code&gt;BodySubscribers&lt;/code&gt;&lt;/a&gt; provides implementations of many common body subscribers.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="daad42d7694c98c1e82e4a60b31c2d07a4abd4dc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BodySubscriber&lt;/code&gt; which publishes the response body through a &lt;code&gt;Publisher&amp;lt;List&amp;lt;ByteBuffer&amp;gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Publisher&amp;lt;List&amp;lt;ByteBuffer&amp;gt;&amp;gt;&lt;/code&gt; 介して応答本文を公開する &lt;code&gt;BodySubscriber&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c5ed9b672132ae16990dfbd114f77626e0e70005" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BooleanControl&lt;/code&gt; provides the ability to switch between two possible settings that affect a line's audio.</source>
          <target state="translated">A &lt;code&gt;BooleanControl&lt;/code&gt; は、ラインのオーディオに影響を与える2つの設定を切り替える機能を提供します。</target>
        </trans-unit>
        <trans-unit id="bb49fdf6b0ad623e7f3f062755e5f831934335d1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BooleanControl&lt;/code&gt; provides the ability to switch between two possible settings that affect a line's audio. The settings are boolean values (&lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;). A graphical user interface might represent the control by a two-state button, an on/off switch, two mutually exclusive buttons, or a checkbox (among other possibilities). For example, depressing a button might activate a &lt;a href=&quot;booleancontrol.type#MUTE&quot;&gt;&lt;code&gt;MUTE&lt;/code&gt;&lt;/a&gt; control to silence the line's audio.</source>
          <target state="translated">A &lt;code&gt;BooleanControl&lt;/code&gt; は、ラインのオーディオに影響を与える2つの設定を切り替える機能を提供します。設定はブール値（ &lt;code&gt;true&lt;/code&gt; および &lt;code&gt;false&lt;/code&gt; ）です。グラフィカルユーザーインターフェイスは、2つの状態のボタン、オン/オフスイッチ、2つの相互に排他的なボタン、またはチェックボックス（他の可能性の中でも）によってコントロールを表す場合があります。たとえば、ボタンを押すと、&lt;a href=&quot;booleancontrol.type#MUTE&quot;&gt; &lt;code&gt;MUTE&lt;/code&gt; &lt;/a&gt;コントロールがアクティブになり、回線の音声が消音されます。</target>
        </trans-unit>
        <trans-unit id="9911f76b173e085a5790f91a525f4397f9513f1a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BooleanControl&lt;/code&gt; provides the ability to switch between two possible settings that affect a line's audio. The settings are boolean values (&lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;). A graphical user interface might represent the control by a two-state button, an on/off switch, two mutually exclusive buttons, or a checkbox (among other possibilities). For example, depressing a button might activate a &lt;code&gt;&lt;a href=&quot;booleancontrol.type#MUTE&quot;&gt;&lt;code&gt;MUTE&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; control to silence the line's audio.</source>
          <target state="translated">A &lt;code&gt;BooleanControl&lt;/code&gt; は、ラインのオーディオに影響を与える2つの設定を切り替える機能を提供します。設定はブール値（ &lt;code&gt;true&lt;/code&gt; および &lt;code&gt;false&lt;/code&gt; ）です。グラフィカルユーザーインターフェイスは、2つの状態のボタン、オン/オフスイッチ、2つの相互に排他的なボタン、またはチェックボックス（他の可能性がある）によってコントロールを表す場合があります。たとえば、ボタンを押すと、 &lt;code&gt;&lt;a href=&quot;booleancontrol.type#MUTE&quot;&gt;&lt;code&gt;MUTE&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; コントロールがアクティブになり、ラインの音声が止まります。</target>
        </trans-unit>
        <trans-unit id="9b914d22e1412533f2cef28997e1fb52c2b2dc70" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BufferedInputStream&lt;/code&gt; adds functionality to another input stream-namely, the ability to buffer the input and to support the &lt;code&gt;mark&lt;/code&gt; and &lt;code&gt;reset&lt;/code&gt; methods.</source>
          <target state="translated">A &lt;code&gt;BufferedInputStream&lt;/code&gt; 入力をバッファし、サポートするための別の入力ストリームすなわち、能力に機能を追加 &lt;code&gt;mark&lt;/code&gt; と &lt;code&gt;reset&lt;/code&gt; 方法を。</target>
        </trans-unit>
        <trans-unit id="93c4c3c5557c20913ab566f39f1e4c2d80a37495" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;BufferedInputStream&lt;/code&gt; adds functionality to another input stream-namely, the ability to buffer the input and to support the &lt;code&gt;mark&lt;/code&gt; and &lt;code&gt;reset&lt;/code&gt; methods. When the &lt;code&gt;BufferedInputStream&lt;/code&gt; is created, an internal buffer array is created. As bytes from the stream are read or skipped, the internal buffer is refilled as necessary from the contained input stream, many bytes at a time. The &lt;code&gt;mark&lt;/code&gt; operation remembers a point in the input stream and the &lt;code&gt;reset&lt;/code&gt; operation causes all the bytes read since the most recent &lt;code&gt;mark&lt;/code&gt; operation to be reread before new bytes are taken from the contained input stream.</source>
          <target state="translated">A &lt;code&gt;BufferedInputStream&lt;/code&gt; 入力をバッファし、サポートするための別の入力ストリームすなわち、能力に機能を追加 &lt;code&gt;mark&lt;/code&gt; と &lt;code&gt;reset&lt;/code&gt; 方法を。とき &lt;code&gt;BufferedInputStream&lt;/code&gt; 作成され、内部バッファ配列が作成されます。ストリームからのバイトが読み取られるかスキップされると、内部バッファーは必要に応じて、含まれている入力ストリームから一度に多くのバイトが補充されます。 &lt;code&gt;mark&lt;/code&gt; 操作は、入力ストリーム内のポイントを記憶し、 &lt;code&gt;reset&lt;/code&gt; 操作はすべての最も最近のため、読み込まれたバイト原因となる &lt;code&gt;mark&lt;/code&gt; の新しいバイトが含まれている入力ストリームから取られる前に再読する操作。</target>
        </trans-unit>
        <trans-unit id="a0ecef3ad6c8543087c7266df26538e704760491" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Builder&lt;/code&gt; checks the components and invariants as components are added to the builder. The rationale for this is to detect errors as early as possible and not defer all validation to the &lt;a href=&quot;#build()&quot;&gt;&lt;code&gt;build&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">A &lt;code&gt;Builder&lt;/code&gt; は、成分は、ビルダーに追加されるコンポーネントおよび不変条件をチェックします。これの理論的根拠は、エラーをできるだけ早く検出し、すべての検証を&lt;a href=&quot;#build()&quot;&gt; &lt;code&gt;build&lt;/code&gt; &lt;/a&gt;メソッドに延期しないことです。</target>
        </trans-unit>
        <trans-unit id="8074a1cd6822a8d169f849c5286eeb64c2975544" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Builder&lt;/code&gt; object is obtained by invoking one of the &lt;a href=&quot;aclentry#newBuilder()&quot;&gt;&lt;code&gt;newBuilder&lt;/code&gt;&lt;/a&gt; methods defined by the &lt;code&gt;AclEntry&lt;/code&gt; class.</source>
          <target state="translated">A &lt;code&gt;Builder&lt;/code&gt; オブジェクトは、のいずれかを呼び出すことによって得られる&lt;a href=&quot;aclentry#newBuilder()&quot;&gt; &lt;code&gt;newBuilder&lt;/code&gt; さ&lt;/a&gt;によって定義されたメソッド &lt;code&gt;AclEntry&lt;/code&gt; のクラス。</target>
        </trans-unit>
        <trans-unit id="b6c6519b4d74a67eecc36daf82594125562f744c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Builder&lt;/code&gt; object is obtained by invoking one of the &lt;a href=&quot;aclentry#newBuilder--&quot;&gt;&lt;code&gt;newBuilder&lt;/code&gt;&lt;/a&gt; methods defined by the &lt;code&gt;AclEntry&lt;/code&gt; class.</source>
          <target state="translated">A &lt;code&gt;Builder&lt;/code&gt; オブジェクトは、のいずれかを呼び出すことによって得られる&lt;a href=&quot;aclentry#newBuilder--&quot;&gt; &lt;code&gt;newBuilder&lt;/code&gt; さ&lt;/a&gt;によって定義されたメソッド &lt;code&gt;AclEntry&lt;/code&gt; のクラス。</target>
        </trans-unit>
        <trans-unit id="73ba69c95f915dc8cd68b2839f15c2e47a1be8bc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ButtonGroup&lt;/code&gt; can be used with any set of objects that inherit from &lt;code&gt;AbstractButton&lt;/code&gt;. Typically a button group contains instances of &lt;code&gt;JRadioButton&lt;/code&gt;, &lt;code&gt;JRadioButtonMenuItem&lt;/code&gt;, or &lt;code&gt;JToggleButton&lt;/code&gt;. It wouldn't make sense to put an instance of &lt;code&gt;JButton&lt;/code&gt; or &lt;code&gt;JMenuItem&lt;/code&gt; in a button group because &lt;code&gt;JButton&lt;/code&gt; and &lt;code&gt;JMenuItem&lt;/code&gt; don't implement the selected state.</source>
          <target state="translated">A &lt;code&gt;ButtonGroup&lt;/code&gt; をはそれから継承するオブジェクトの任意のセットで使用することができ &lt;code&gt;AbstractButton&lt;/code&gt; の。通常、ボタングループには、 &lt;code&gt;JRadioButton&lt;/code&gt; 、 &lt;code&gt;JRadioButtonMenuItem&lt;/code&gt; 、または &lt;code&gt;JToggleButton&lt;/code&gt; のインスタンスが含まれます。 &lt;code&gt;JButton&lt;/code&gt; と &lt;code&gt;JMenuItem&lt;/code&gt; は選択された状態を実装しないため、 &lt;code&gt;JButton&lt;/code&gt; または &lt;code&gt;JMenuItem&lt;/code&gt; のインスタンスをボタングループに配置することは意味がありません。</target>
        </trans-unit>
        <trans-unit id="791602e7a16aa82d92f76658de19c18cb1b48d6b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ByteArrayInputStream&lt;/code&gt; contains an internal buffer that contains bytes that may be read from the stream.</source>
          <target state="translated">A &lt;code&gt;ByteArrayInputStream&lt;/code&gt; ストリームから読み込まれたバイトを格納する内部バッファを含んでいます。</target>
        </trans-unit>
        <trans-unit id="aad024046734b23cdb23ec9792c4cc03fde87676" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ByteArrayInputStream&lt;/code&gt; contains an internal buffer that contains bytes that may be read from the stream. An internal counter keeps track of the next byte to be supplied by the &lt;code&gt;read&lt;/code&gt; method.</source>
          <target state="translated">A &lt;code&gt;ByteArrayInputStream&lt;/code&gt; ストリームから読み込まれたバイトを格納する内部バッファを含んでいます。内部カウンターは、 &lt;code&gt;read&lt;/code&gt; メソッドによって提供される次のバイトを追跡します。</target>
        </trans-unit>
        <trans-unit id="c824b6f84f896f24c9a504599c92a3ba81b4c301" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ByteChannel&lt;/code&gt; connected to an entity that contains a variable-length sequence of bytes</source>
          <target state="translated">A &lt;code&gt;ByteChannel&lt;/code&gt; はバイトの可変長配列を含むエンティティに接続されています</target>
        </trans-unit>
        <trans-unit id="2e0305ce221f1c16fad4bc61cfa1b63616256e91" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CAPTION&lt;/code&gt; element.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f8f59faa82da92687132e2471fe3d0f1c23da118" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CRLSelector&lt;/code&gt; that selects &lt;code&gt;X509CRLs&lt;/code&gt; that match all specified criteria.</source>
          <target state="translated">指定されたすべての基準に一致する &lt;code&gt;CRLSelector&lt;/code&gt; を選択する &lt;code&gt;X509CRLs&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="43965c0eb0dde6d867e326218f4d5796a9f54040" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CRLSelector&lt;/code&gt; that selects &lt;code&gt;X509CRLs&lt;/code&gt; that match all specified criteria. This class is particularly useful when selecting CRLs from a &lt;code&gt;CertStore&lt;/code&gt; to check revocation status of a particular certificate.</source>
          <target state="translated">指定されたすべての基準に一致する &lt;code&gt;CRLSelector&lt;/code&gt; を選択する &lt;code&gt;X509CRLs&lt;/code&gt; 。このクラスは、 &lt;code&gt;CertStore&lt;/code&gt; からCRLを選択して特定の証明書の失効ステータスを確認する場合に特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="8d902bd075204accf1f5381d76d1c73144162046" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CachedRowSet&lt;/code&gt; implementation should always be instantiated with an available &lt;code&gt;SyncProvider&lt;/code&gt; mechanism, but there are cases where resetting the &lt;code&gt;SyncProvider&lt;/code&gt; object is desirable or necessary. For example, an application might want to use the default &lt;code&gt;SyncProvider&lt;/code&gt; object for a time and then choose to use a provider that has more recently become available and better fits its needs.</source>
          <target state="translated">&lt;code&gt;CachedRowSet&lt;/code&gt; 実装は常に利用可能でインスタンス化されるべきである &lt;code&gt;SyncProvider&lt;/code&gt; 機構が、リセットする場合がある &lt;code&gt;SyncProvider&lt;/code&gt; オブジェクトが望ましいまたは必要であるが。たとえば、アプリケーションは、デフォルトの &lt;code&gt;SyncProvider&lt;/code&gt; オブジェクトをしばらく使用してから、最近利用可能になり、ニーズにより適したプロバイダーを使用することを選択する場合があります。</target>
        </trans-unit>
        <trans-unit id="f0e72057bc3912d1067f8cf18d9927ed995edf5e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CachedRowSet&lt;/code&gt; object is a</source>
          <target state="translated">A &lt;code&gt;CachedRowSet&lt;/code&gt; オブジェクトがあります</target>
        </trans-unit>
        <trans-unit id="db32b03a716f025b091c9aff728b814a7645a59a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CachedRowSet&lt;/code&gt; object is a container for rows of data that caches its rows in memory, which makes it possible to operate without always being connected to its data source. Further, it is a JavaBeans component and is scrollable, updatable, and serializable. A &lt;code&gt;CachedRowSet&lt;/code&gt; object typically contains rows from a result set, but it can also contain rows from any file with a tabular format, such as a spread sheet. The reference implementation supports getting data only from a &lt;code&gt;ResultSet&lt;/code&gt; object, but developers can extend the &lt;code&gt;SyncProvider&lt;/code&gt; implementations to provide access to other tabular data sources.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0131f3ed8b4d441f8ce0e8c5666cfad89c0cf346" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CachedRowSet&lt;/code&gt; object is a container for rows of data that caches its rows in memory, which makes it possible to operate without always being connected to its data source. Further, it is a JavaBeans&amp;trade; component and is scrollable, updatable, and serializable. A &lt;code&gt;CachedRowSet&lt;/code&gt; object typically contains rows from a result set, but it can also contain rows from any file with a tabular format, such as a spread sheet. The reference implementation supports getting data only from a &lt;code&gt;ResultSet&lt;/code&gt; object, but developers can extend the &lt;code&gt;SyncProvider&lt;/code&gt; implementations to provide access to other tabular data sources.</source>
          <target state="translated">&lt;code&gt;CachedRowSet&lt;/code&gt; オブジェクトは、常に、そのデータソースに接続することなく動作することができるメモリ内のその行をキャッシュするデータの行のための容器です。さらに、これはJavaBeans&amp;trade;コンポーネントであり、スクロール可能、更新可能、およびシリアル化可能です。 &lt;code&gt;CachedRowSet&lt;/code&gt; オブジェクトは、典型的には、結果セットから行を含んでいるが、それはまた、スプレッドシートなど、表形式の任意のファイルから行を含むことができます。リファレンス実装は、 &lt;code&gt;ResultSet&lt;/code&gt; オブジェクトからのデータの取得のみをサポートしますが、開発者は &lt;code&gt;SyncProvider&lt;/code&gt; 実装を拡張して、他の表形式のデータソースへのアクセスを提供できます。</target>
        </trans-unit>
        <trans-unit id="4d124d3faaddd6a205670c8032f9cef17c53c2d5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CachedRowSet&lt;/code&gt; object may use any &lt;code&gt;SyncProvider&lt;/code&gt; implementation that has been registered with the &lt;code&gt;SyncFactory&lt;/code&gt; singleton. An application can find out which &lt;code&gt;SyncProvider&lt;/code&gt; implementations have been registered by calling the following line of code.</source>
          <target state="translated">&lt;code&gt;CachedRowSet&lt;/code&gt; オブジェクトは、任意の使用できる &lt;code&gt;SyncProvider&lt;/code&gt; に登録されている実装 &lt;code&gt;SyncFactory&lt;/code&gt; がシングルトン。アプリケーションは、次のコード行を呼び出すことにより、登録されている &lt;code&gt;SyncProvider&lt;/code&gt; 実装を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="2765fdbc2085f164518df4b47d7dea2a126e4d97" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Calendar&lt;/code&gt; object can produce all the calendar field values needed to implement the date-time formatting for a particular language and calendar style (for example, Japanese-Gregorian, Japanese-Traditional). &lt;code&gt;Calendar&lt;/code&gt; defines the range of values returned by certain calendar fields, as well as their meaning. For example, the first month of the calendar system has value &lt;code&gt;MONTH ==
 JANUARY&lt;/code&gt; for all calendars. Other values are defined by the concrete subclass, such as &lt;code&gt;ERA&lt;/code&gt;. See individual field documentation and subclass documentation for details.</source>
          <target state="translated">&lt;code&gt;Calendar&lt;/code&gt; オブジェクトは、特定の言語およびカレンダスタイル（例えば、日本語グレゴリオ、日本の伝統）の書式日時を実装するために必要なすべてのカレンダフィールド値を生成することができます。 &lt;code&gt;Calendar&lt;/code&gt; は、特定のカレンダーフィールドによって返される値の範囲とその意味を定義します。たとえば、カレンダーシステムの最初の月の値はすべてのカレンダーで &lt;code&gt;MONTH == JANUARY&lt;/code&gt; です。その他の値は、 &lt;code&gt;ERA&lt;/code&gt; などの具象サブクラスによって定義されます。詳細については、個々のフィールドのドキュメントとサブクラスのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="dd6d85b0756315f1e4f7663f70b69679fb6b450a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CallSite&lt;/code&gt; is a holder for a variable &lt;a href=&quot;methodhandle&quot;&gt;&lt;code&gt;MethodHandle&lt;/code&gt;&lt;/a&gt;, which is called its &lt;code&gt;target&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;CallSite&lt;/code&gt; 変数のためのホルダーです&lt;a href=&quot;methodhandle&quot;&gt; &lt;code&gt;MethodHandle&lt;/code&gt; &lt;/a&gt;その呼ばれ、 &lt;code&gt;target&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="af7606e6576b77b9af5096f4621ff846b4bf3b23" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CallSite&lt;/code&gt; is a holder for a variable &lt;a href=&quot;methodhandle&quot;&gt;&lt;code&gt;MethodHandle&lt;/code&gt;&lt;/a&gt;, which is called its &lt;code&gt;target&lt;/code&gt;. An &lt;code&gt;invokedynamic&lt;/code&gt; instruction linked to a &lt;code&gt;CallSite&lt;/code&gt; delegates all calls to the site's current target. A &lt;code&gt;CallSite&lt;/code&gt; may be associated with several &lt;code&gt;invokedynamic&lt;/code&gt; instructions, or it may be &quot;free floating&quot;, associated with none. In any case, it may be invoked through an associated method handle called its &lt;a href=&quot;#dynamicInvoker()&quot;&gt;dynamic invoker&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;CallSite&lt;/code&gt; 変数のためのホルダーです&lt;a href=&quot;methodhandle&quot;&gt; &lt;code&gt;MethodHandle&lt;/code&gt; &lt;/a&gt;その呼ばれ、 &lt;code&gt;target&lt;/code&gt; 。 &lt;code&gt;invokedynamic&lt;/code&gt; の命令は、にリンクされている &lt;code&gt;CallSite&lt;/code&gt; 委譲し、サイトの現在のターゲットへのすべての呼び出しを。 A &lt;code&gt;CallSite&lt;/code&gt; いくつか関連付けることができる &lt;code&gt;invokedynamic&lt;/code&gt; の指示、またはnoneに関連付けられている、「浮動自由」であってもよいです。いずれの場合も、&lt;a href=&quot;#dynamicInvoker()&quot;&gt;動的呼び出し元&lt;/a&gt;と呼ばれる関連するメソッドハンドルを介して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="53c675c04cbcf5d7a16adfd5966a7e5bcf6d3a57" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CallSite&lt;/code&gt; is a holder for a variable &lt;a href=&quot;methodhandle&quot;&gt;&lt;code&gt;MethodHandle&lt;/code&gt;&lt;/a&gt;, which is called its &lt;code&gt;target&lt;/code&gt;. An &lt;code&gt;invokedynamic&lt;/code&gt; instruction linked to a &lt;code&gt;CallSite&lt;/code&gt; delegates all calls to the site's current target. A &lt;code&gt;CallSite&lt;/code&gt; may be associated with several &lt;code&gt;invokedynamic&lt;/code&gt; instructions, or it may be &quot;free floating&quot;, associated with none. In any case, it may be invoked through an associated method handle called its &lt;a href=&quot;callsite#dynamicInvoker--&quot;&gt;dynamic invoker&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;CallSite&lt;/code&gt; 変数のためのホルダーです&lt;a href=&quot;methodhandle&quot;&gt; &lt;code&gt;MethodHandle&lt;/code&gt; &lt;/a&gt;その呼ばれ、 &lt;code&gt;target&lt;/code&gt; 。 &lt;code&gt;invokedynamic&lt;/code&gt; の命令は、にリンクされている &lt;code&gt;CallSite&lt;/code&gt; 委譲し、サイトの現在のターゲットへのすべての呼び出しを。A &lt;code&gt;CallSite&lt;/code&gt; いくつか関連付けることができる &lt;code&gt;invokedynamic&lt;/code&gt; の指示、またはnoneに関連付けられている、「浮動自由」であってもよいです。いずれの場合でも、その&lt;a href=&quot;callsite#dynamicInvoker--&quot;&gt;動的invoker&lt;/a&gt;と呼ばれる関連するメソッドハンドルを介して呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="547b858de4fcb2878a66306f28e205b002131a1a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CallableStatement&lt;/code&gt; can return one &lt;a href=&quot;resultset&quot;&gt;&lt;code&gt;ResultSet&lt;/code&gt;&lt;/a&gt; object or multiple &lt;code&gt;ResultSet&lt;/code&gt; objects. Multiple &lt;code&gt;ResultSet&lt;/code&gt; objects are handled using operations inherited from &lt;a href=&quot;statement&quot;&gt;&lt;code&gt;Statement&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;CallableStatement&lt;/code&gt; のは1つの返すことができる&lt;a href=&quot;resultset&quot;&gt; &lt;code&gt;ResultSet&lt;/code&gt; &lt;/a&gt;オブジェクトまたは複数 &lt;code&gt;ResultSet&lt;/code&gt; オブジェクトを。複数の &lt;code&gt;ResultSet&lt;/code&gt; オブジェクトは、&lt;a href=&quot;statement&quot;&gt; &lt;code&gt;Statement&lt;/code&gt; &lt;/a&gt;から継承された操作を使用して処理されます。</target>
        </trans-unit>
        <trans-unit id="0413228db51a17d13f79f04340759b91adfe51d7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CanonicalizationMethod&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;xmlsignaturefactory#newCanonicalizationMethod(java.lang.String,javax.xml.crypto.dsig.spec.C14NMethodParameterSpec)&quot;&gt;&lt;code&gt;newCanonicalizationMethod&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;code&gt;CanonicalizationMethod&lt;/code&gt; にのインスタンスが呼び出すことによって作成することができる&lt;a href=&quot;xmlsignaturefactory#newCanonicalizationMethod(java.lang.String,javax.xml.crypto.dsig.spec.C14NMethodParameterSpec)&quot;&gt; &lt;code&gt;newCanonicalizationMethod&lt;/code&gt; の&lt;/a&gt;方法&lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt;クラス。</target>
        </trans-unit>
        <trans-unit id="caab9927e90eaec3c1db4b9160eea9b93b8ff8c2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Canvas&lt;/code&gt; component represents a blank rectangular area of the screen onto which the application can draw or from which the application can trap input events from the user.</source>
          <target state="translated">&lt;code&gt;Canvas&lt;/code&gt; コンポーネントは、アプリケーションが描画したり、ユーザからのアプリケーション缶トラップ入力イベントそこからできる空白の矩形の画面領域を表しています。</target>
        </trans-unit>
        <trans-unit id="0dd12b23a94abb46dcb9f0a2b86fff1bdd9aca53" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CardLayout&lt;/code&gt; object is a layout manager for a container.</source>
          <target state="translated">A &lt;code&gt;CardLayout&lt;/code&gt; のオブジェクトは、コンテナのレイアウトマネージャです。</target>
        </trans-unit>
        <trans-unit id="621e12c9ac34ad5ac20b20b766debfb166ad61be" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CardLayout&lt;/code&gt; object is a layout manager for a container. It treats each component in the container as a card. Only one card is visible at a time, and the container acts as a stack of cards. The first component added to a &lt;code&gt;CardLayout&lt;/code&gt; object is the visible component when the container is first displayed.</source>
          <target state="translated">A &lt;code&gt;CardLayout&lt;/code&gt; のオブジェクトは、コンテナのレイアウトマネージャです。コンテナ内の各コンポーネントをカードとして扱います。一度に表示できるカードは1つだけで、コンテナはカードのスタックとして機能します。 &lt;code&gt;CardLayout&lt;/code&gt; オブジェクトに追加される最初のコンポーネントは、コンテナが最初に表示されたときに表示されるコンポーネントです。</target>
        </trans-unit>
        <trans-unit id="8614ff39dac3427ab2dd1c97bfe13af1b41dbc07" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertPathBuilderException&lt;/code&gt; provides support for wrapping exceptions. The &lt;a href=&quot;../../lang/throwable#getCause()&quot;&gt;&lt;code&gt;getCause&lt;/code&gt;&lt;/a&gt; method returns the throwable, if any, that caused this exception to be thrown.</source>
          <target state="translated">A &lt;code&gt;CertPathBuilderException&lt;/code&gt; ラッピング例外のサポートを提供します。&lt;a href=&quot;../../lang/throwable#getCause()&quot;&gt; &lt;code&gt;getCause&lt;/code&gt; の&lt;/a&gt;いずれかの場合、このメソッドは、この例外がスローされる原因となったこと、スロー可能を返します。</target>
        </trans-unit>
        <trans-unit id="728e147679cf1365aaeb47445695777da9023df7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertPathBuilderException&lt;/code&gt; provides support for wrapping exceptions. The &lt;a href=&quot;../../lang/throwable#getCause--&quot;&gt;&lt;code&gt;getCause&lt;/code&gt;&lt;/a&gt; method returns the throwable, if any, that caused this exception to be thrown.</source>
          <target state="translated">A &lt;code&gt;CertPathBuilderException&lt;/code&gt; ラッピング例外のサポートを提供します。&lt;a href=&quot;../../lang/throwable#getCause--&quot;&gt; &lt;code&gt;getCause&lt;/code&gt; の&lt;/a&gt;いずれかの場合、このメソッドは、この例外がスローされる原因となったこと、スロー可能を返します。</target>
        </trans-unit>
        <trans-unit id="4c69635f5cbf1ce4cd70d0b40a545efeb57e3d75" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertPathChecker&lt;/code&gt; implementation is typically created to extend a certification path validation algorithm. For example, an implementation may check for and process a critical private extension of each certificate in a certification path.</source>
          <target state="translated">&lt;code&gt;CertPathChecker&lt;/code&gt; の実装は、通常、証明書パス検証アルゴリズムを拡張するために作成されます。たとえば、実装では、証明書パス内の各証明書の重要なプライベート拡張をチェックして処理する場合があります。</target>
        </trans-unit>
        <trans-unit id="22ed0f43de3b6721b8b086ee315ea80ef5b53940" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertPathValidatorException&lt;/code&gt; may also include the certification path that was being validated when the exception was thrown, the index of the certificate in the certification path that caused the exception to be thrown, and the reason that caused the failure. Use the &lt;a href=&quot;#getCertPath()&quot;&gt;&lt;code&gt;getCertPath&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#getIndex()&quot;&gt;&lt;code&gt;getIndex&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#getReason()&quot;&gt;&lt;code&gt;getReason&lt;/code&gt;&lt;/a&gt; methods to retrieve this information.</source>
          <target state="translated">A &lt;code&gt;CertPathValidatorException&lt;/code&gt; また、例外がスローされた場合、例外を引き起こした証明書パス内の証明書のインデックスがスローされ、検証された証明書パス、および失敗の原因となった理由を含むことができます。使用&lt;a href=&quot;#getCertPath()&quot;&gt; &lt;code&gt;getCertPath&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#getIndex()&quot;&gt; &lt;code&gt;getIndex&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#getReason()&quot;&gt; &lt;code&gt;getReason&lt;/code&gt; の&lt;/a&gt;この情報を取得する方法を。</target>
        </trans-unit>
        <trans-unit id="50135e1330488469bfafb1eba28f2aab6b352876" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertPathValidatorException&lt;/code&gt; may also include the certification path that was being validated when the exception was thrown, the index of the certificate in the certification path that caused the exception to be thrown, and the reason that caused the failure. Use the &lt;a href=&quot;certpathvalidatorexception#getCertPath--&quot;&gt;&lt;code&gt;getCertPath&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;certpathvalidatorexception#getIndex--&quot;&gt;&lt;code&gt;getIndex&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;certpathvalidatorexception#getReason--&quot;&gt;&lt;code&gt;getReason&lt;/code&gt;&lt;/a&gt; methods to retrieve this information.</source>
          <target state="translated">A &lt;code&gt;CertPathValidatorException&lt;/code&gt; また、例外がスローされた場合、例外を引き起こした証明書パス内の証明書のインデックスがスローされ、検証された証明書パス、および失敗の原因となった理由を含むことができます。この情報を取得するには、&lt;a href=&quot;certpathvalidatorexception#getCertPath--&quot;&gt; &lt;code&gt;getCertPath&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;certpathvalidatorexception#getIndex--&quot;&gt; &lt;code&gt;getIndex&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;certpathvalidatorexception#getReason--&quot;&gt; &lt;code&gt;getReason&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="38b1b71011b8b49819d5ea795a235b3d12b5fdd3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertPathValidatorException&lt;/code&gt; provides support for wrapping exceptions. The &lt;a href=&quot;../../lang/throwable#getCause()&quot;&gt;&lt;code&gt;getCause&lt;/code&gt;&lt;/a&gt; method returns the throwable, if any, that caused this exception to be thrown.</source>
          <target state="translated">A &lt;code&gt;CertPathValidatorException&lt;/code&gt; には、ラッピング例外のサポートを提供します。&lt;a href=&quot;../../lang/throwable#getCause()&quot;&gt; &lt;code&gt;getCause&lt;/code&gt; の&lt;/a&gt;いずれかの場合、このメソッドは、この例外がスローされる原因となったこと、スロー可能を返します。</target>
        </trans-unit>
        <trans-unit id="15eba905a426f40a8890ddabc999c9a3b52da9f0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertPathValidatorException&lt;/code&gt; provides support for wrapping exceptions. The &lt;a href=&quot;../../lang/throwable#getCause--&quot;&gt;&lt;code&gt;getCause&lt;/code&gt;&lt;/a&gt; method returns the throwable, if any, that caused this exception to be thrown.</source>
          <target state="translated">A &lt;code&gt;CertPathValidatorException&lt;/code&gt; には、ラッピング例外のサポートを提供します。&lt;a href=&quot;../../lang/throwable#getCause--&quot;&gt; &lt;code&gt;getCause&lt;/code&gt; の&lt;/a&gt;いずれかの場合、このメソッドは、この例外がスローされる原因となったこと、スロー可能を返します。</target>
        </trans-unit>
        <trans-unit id="65f560d009f0e6567db9175712bf85433fe5cc63" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertSelector&lt;/code&gt; that selects &lt;code&gt;X509Certificates&lt;/code&gt; that match all specified criteria.</source>
          <target state="translated">指定されたすべての基準に一致する &lt;code&gt;X509Certificates&lt;/code&gt; を選択する &lt;code&gt;CertSelector&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="be5c8ef13cabc2de05d5ea064c20acabb9a14fa6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertSelector&lt;/code&gt; that selects &lt;code&gt;X509Certificates&lt;/code&gt; that match all specified criteria. This class is particularly useful when selecting certificates from a &lt;code&gt;CertStore&lt;/code&gt; to build a PKIX-compliant certification path.</source>
          <target state="translated">指定されたすべての基準に一致する &lt;code&gt;X509Certificates&lt;/code&gt; を選択する &lt;code&gt;CertSelector&lt;/code&gt; 。このクラスは、 &lt;code&gt;CertStore&lt;/code&gt; から証明書を選択してPKIX準拠の証明書パスを構築する場合に特に役立ちます。</target>
        </trans-unit>
        <trans-unit id="7ea723de250e2659718edd41421ee46e8f50da70" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertStoreException&lt;/code&gt; provides support for wrapping exceptions. The &lt;a href=&quot;../../lang/throwable#getCause()&quot;&gt;&lt;code&gt;getCause&lt;/code&gt;&lt;/a&gt; method returns the throwable, if any, that caused this exception to be thrown.</source>
          <target state="translated">A &lt;code&gt;CertStoreException&lt;/code&gt; ラッピング例外のサポートを提供します。&lt;a href=&quot;../../lang/throwable#getCause()&quot;&gt; &lt;code&gt;getCause&lt;/code&gt; の&lt;/a&gt;いずれかの場合、このメソッドは、この例外がスローされる原因となったこと、スロー可能を返します。</target>
        </trans-unit>
        <trans-unit id="238fe188e71ee7dfe9fce6d0836d7928d5866c0c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CertStoreException&lt;/code&gt; provides support for wrapping exceptions. The &lt;a href=&quot;../../lang/throwable#getCause--&quot;&gt;&lt;code&gt;getCause&lt;/code&gt;&lt;/a&gt; method returns the throwable, if any, that caused this exception to be thrown.</source>
          <target state="translated">A &lt;code&gt;CertStoreException&lt;/code&gt; ラッピング例外のサポートを提供します。&lt;a href=&quot;../../lang/throwable#getCause--&quot;&gt; &lt;code&gt;getCause&lt;/code&gt; の&lt;/a&gt;いずれかの場合、このメソッドは、この例外がスローされる原因となったこと、スロー可能を返します。</target>
        </trans-unit>
        <trans-unit id="2132e6d56d7be6af520361f786a04619acc657a8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CharSequence&lt;/code&gt; is a readable sequence of &lt;code&gt;char&lt;/code&gt; values.</source>
          <target state="translated">A &lt;code&gt;CharSequence&lt;/code&gt; 読み込み可能なシーケンスである &lt;code&gt;char&lt;/code&gt; 型の値。</target>
        </trans-unit>
        <trans-unit id="bd0a7e6c88d50c76fa8e459d55e92a9be2f616e0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CharSequence&lt;/code&gt; is a readable sequence of &lt;code&gt;char&lt;/code&gt; values. This interface provides uniform, read-only access to many different kinds of &lt;code&gt;char&lt;/code&gt; sequences. A &lt;code&gt;char&lt;/code&gt; value represents a character in the</source>
          <target state="translated">A &lt;code&gt;CharSequence&lt;/code&gt; 読み込み可能なシーケンスである &lt;code&gt;char&lt;/code&gt; 型の値。このインターフェイスは、さまざまな種類の &lt;code&gt;char&lt;/code&gt; シーケンスへの統一された読み取り専用アクセスを提供します。 &lt;code&gt;char&lt;/code&gt; 型の値がで文字を表し</target>
        </trans-unit>
        <trans-unit id="e7df40ea3adad9621e2b177acc8b4c53a91715cf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ChoiceFormat&lt;/code&gt; allows you to attach a format to a range of numbers.</source>
          <target state="translated">A &lt;code&gt;ChoiceFormat&lt;/code&gt; を使用すると、ある範囲の数値にフォーマットを追加することができます。</target>
        </trans-unit>
        <trans-unit id="9bdbb6f65dc1a455bd231eb6943f7e27c4025766" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ChoiceFormat&lt;/code&gt; allows you to attach a format to a range of numbers. It is generally used in a &lt;code&gt;MessageFormat&lt;/code&gt; for handling plurals. The choice is specified with an ascending list of doubles, where each item specifies a half-open interval up to the next item:</source>
          <target state="translated">A &lt;code&gt;ChoiceFormat&lt;/code&gt; を使用すると、ある範囲の数値にフォーマットを追加することができます。通常、 &lt;code&gt;MessageFormat&lt;/code&gt; で複数を処理するために使用されます。選択は、doubleの昇順リストで指定されます。各項目は、次の項目までの半開間隔を指定します。</target>
        </trans-unit>
        <trans-unit id="ec4321c06a7245a80c8ed4f7d37472138143a6a0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ChronoLocalDate&lt;/code&gt; is the abstract representation of a date where the &lt;code&gt;Chronology chronology&lt;/code&gt;, or calendar system, is pluggable. The date is defined in terms of fields expressed by &lt;a href=&quot;../temporal/temporalfield&quot;&gt;&lt;code&gt;TemporalField&lt;/code&gt;&lt;/a&gt;, where most common implementations are defined in &lt;a href=&quot;../temporal/chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt;. The chronology defines how the calendar system operates and the meaning of the standard fields.</source>
          <target state="translated">A &lt;code&gt;ChronoLocalDate&lt;/code&gt; は、日付の抽象的表現である &lt;code&gt;Chronology chronology&lt;/code&gt; 、またはカレンダーシステムは、プラグイン可能です。日付は、&lt;a href=&quot;../temporal/temporalfield&quot;&gt; &lt;code&gt;TemporalField&lt;/code&gt; &lt;/a&gt;で表現されるフィールドで定義され&lt;a href=&quot;../temporal/chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; &lt;/a&gt;。最も一般的な実装はChronoFieldで定義されています。年表は、カレンダーシステムの動作方法と標準フィールドの意味を定義します。</target>
        </trans-unit>
        <trans-unit id="f18b024a28c84c2b5dc8056afec37c541ede1c43" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ChronoLocalDateTime&lt;/code&gt; is the abstract representation of a local date-time where the &lt;code&gt;Chronology chronology&lt;/code&gt;, or calendar system, is pluggable. The date-time is defined in terms of fields expressed by &lt;a href=&quot;../temporal/temporalfield&quot;&gt;&lt;code&gt;TemporalField&lt;/code&gt;&lt;/a&gt;, where most common implementations are defined in &lt;a href=&quot;../temporal/chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt;. The chronology defines how the calendar system operates and the meaning of the standard fields.</source>
          <target state="translated">A &lt;code&gt;ChronoLocalDateTime&lt;/code&gt; はローカル日時の抽象的表現である &lt;code&gt;Chronology chronology&lt;/code&gt; 、またはカレンダーシステムは、プラグイン可能です。日時は、&lt;a href=&quot;../temporal/temporalfield&quot;&gt; &lt;code&gt;TemporalField&lt;/code&gt; &lt;/a&gt;で表現されるフィールドで定義され&lt;a href=&quot;../temporal/chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; &lt;/a&gt;。最も一般的な実装はChronoFieldで定義されています。年表は、カレンダーシステムの動作方法と標準フィールドの意味を定義します。</target>
        </trans-unit>
        <trans-unit id="c76c79312f7e6ddd8a4da9c994ee6a3d57012b1f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ChronoZonedDateTime&lt;/code&gt; is the abstract representation of an offset date-time where the &lt;code&gt;Chronology chronology&lt;/code&gt;, or calendar system, is pluggable. The date-time is defined in terms of fields expressed by &lt;a href=&quot;../temporal/temporalfield&quot;&gt;&lt;code&gt;TemporalField&lt;/code&gt;&lt;/a&gt;, where most common implementations are defined in &lt;a href=&quot;../temporal/chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt;. The chronology defines how the calendar system operates and the meaning of the standard fields.</source>
          <target state="translated">A &lt;code&gt;ChronoZonedDateTime&lt;/code&gt; はオフセット日時の抽象的表現である &lt;code&gt;Chronology chronology&lt;/code&gt; 、またはカレンダーシステムは、プラグイン可能です。日時は、&lt;a href=&quot;../temporal/temporalfield&quot;&gt; &lt;code&gt;TemporalField&lt;/code&gt; &lt;/a&gt;で表現されるフィールドで定義され&lt;a href=&quot;../temporal/chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; &lt;/a&gt;。最も一般的な実装はChronoFieldで定義されています。年表は、カレンダーシステムの動作方法と標準フィールドの意味を定義します。</target>
        </trans-unit>
        <trans-unit id="2e2380d8987110818f81e55fb1d2a8118642ba89" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Cipher&lt;/code&gt; property in a provider master class may have one of the following formats:</source>
          <target state="translated">&lt;code&gt;Cipher&lt;/code&gt; プロバイダのマスタークラス内のプロパティには、次のいずれかの形式を持っていることがあります。</target>
        </trans-unit>
        <trans-unit id="1d4a61915e8a9354cda5cb40cb0bc94d6d8a034c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Class&lt;/code&gt; object indicating the legal object type for use by the &lt;code&gt;createInputStreamInstance&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; で使用される正当なオブジェクト型を示すオブジェクト &lt;code&gt;createInputStreamInstance&lt;/code&gt; の方法。</target>
        </trans-unit>
        <trans-unit id="551a73a83752aece608b370ef85b4554f6122dda" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Class&lt;/code&gt; reference to the newly available service</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 新たに利用可能なサービスへの参照</target>
        </trans-unit>
        <trans-unit id="8e648ba4c009aceac40f44ba6c1fde70c046db83" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Class&lt;/code&gt; reference to the service that is being revoked</source>
          <target state="translated">&lt;code&gt;Class&lt;/code&gt; 取り消されているサービスへの参照</target>
        </trans-unit>
        <trans-unit id="8d5022d7a53475c3ab19ea496fbbb9690140fc5d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Class&lt;/code&gt; reference to the service that is being revoked.</source>
          <target state="translated">A &lt;code&gt;Class&lt;/code&gt; 取り消されているサービスへの参照。</target>
        </trans-unit>
        <trans-unit id="f09859abcc28d86a85cbfa595e6d974ffaef8054" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ClassCastException&lt;/code&gt; is thrown if &lt;code&gt;obj&lt;/code&gt; is not a primitive array of type &lt;code&gt;TransferType&lt;/code&gt;. An &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; might be thrown if the coordinates are not in bounds, or if &lt;code&gt;obj&lt;/code&gt; is not large enough to hold the pixel data.</source>
          <target state="translated">A &lt;code&gt;ClassCastException&lt;/code&gt; があれば投げられる &lt;code&gt;obj&lt;/code&gt; が型のプリミティブ配列でない &lt;code&gt;TransferType&lt;/code&gt; 。 &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt; が座標が境界内にない場合にスローされるかもしれない場合、または &lt;code&gt;obj&lt;/code&gt; がピクセルデータを保持するために十分な大きさではありません。</target>
        </trans-unit>
        <trans-unit id="76833f57fb130a6054ef6ee8795bec499dea3722" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Closeable&lt;/code&gt; is a source or destination of data that can be closed.</source>
          <target state="translated">A &lt;code&gt;Closeable&lt;/code&gt; 閉鎖することができるデータのソースまたは宛先です。</target>
        </trans-unit>
        <trans-unit id="ead854f27504c26751e8689f46b3ee4504aa692a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Closeable&lt;/code&gt; is a source or destination of data that can be closed. The close method is invoked to release resources that the object is holding (such as open files).</source>
          <target state="translated">A &lt;code&gt;Closeable&lt;/code&gt; 閉鎖することができるデータのソースまたは宛先です。closeメソッドは、オブジェクトが保持しているリソース（開いているファイルなど）を解放するために呼び出されます。</target>
        </trans-unit>
        <trans-unit id="fa25ad62b7032b57adecb70db33d146dd9cf1256" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CollationKey&lt;/code&gt; represents a &lt;code&gt;String&lt;/code&gt; under the rules of a specific &lt;code&gt;Collator&lt;/code&gt; object.</source>
          <target state="translated">A &lt;code&gt;CollationKey&lt;/code&gt; 表す &lt;code&gt;String&lt;/code&gt; 特定のルールの下で &lt;code&gt;Collator&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="6392757ac50f95e05875f5d1abe06fd277d9183c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CollationKey&lt;/code&gt; represents a &lt;code&gt;String&lt;/code&gt; under the rules of a specific &lt;code&gt;Collator&lt;/code&gt; object. Comparing two &lt;code&gt;CollationKey&lt;/code&gt;s returns the relative order of the &lt;code&gt;String&lt;/code&gt;s they represent. Using &lt;code&gt;CollationKey&lt;/code&gt;s to compare &lt;code&gt;String&lt;/code&gt;s is generally faster than using &lt;code&gt;Collator.compare&lt;/code&gt;. Thus, when the &lt;code&gt;String&lt;/code&gt;s must be compared multiple times, for example when sorting a list of &lt;code&gt;String&lt;/code&gt;s. It's more efficient to use &lt;code&gt;CollationKey&lt;/code&gt;s.</source>
          <target state="translated">A &lt;code&gt;CollationKey&lt;/code&gt; 表す &lt;code&gt;String&lt;/code&gt; 特定のルールの下で &lt;code&gt;Collator&lt;/code&gt; オブジェクト。2つの &lt;code&gt;CollationKey&lt;/code&gt; 比較すると、それらが表す &lt;code&gt;String&lt;/code&gt; の相対的な順序が返されます。 &lt;code&gt;CollationKey&lt;/code&gt; を使用して &lt;code&gt;String&lt;/code&gt; を比較すると、通常は &lt;code&gt;Collator.compare&lt;/code&gt; を使用するよりも高速です。したがって、例えば &lt;code&gt;String&lt;/code&gt; のリストをソートする場合など、 &lt;code&gt;String&lt;/code&gt; を複数回比較する必要がある場合。 &lt;code&gt;CollationKey&lt;/code&gt; を使用する方が効率的です。</target>
        </trans-unit>
        <trans-unit id="ae4706b0d2166804b39f4bdf98edf570f3f0ff49" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;CRL&lt;/code&gt;s that match the specified selector (never &lt;code&gt;null&lt;/code&gt;)</source>
          <target state="translated">A &lt;code&gt;Collection&lt;/code&gt; の &lt;code&gt;CRL&lt;/code&gt; Sに一致指定したセレクタ（決して &lt;code&gt;null&lt;/code&gt; に）</target>
        </trans-unit>
        <trans-unit id="98391a28fff09416b3a85282c39d7f24bf17bd18" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Collection&lt;/code&gt; of &lt;code&gt;Certificate&lt;/code&gt;s that match the specified selector (never &lt;code&gt;null&lt;/code&gt;)</source>
          <target state="translated">A &lt;code&gt;Collection&lt;/code&gt; の &lt;code&gt;Certificate&lt;/code&gt; のように一致指定セレクター（決して &lt;code&gt;null&lt;/code&gt; に）</target>
        </trans-unit>
        <trans-unit id="fcf9b063a928ea8d1b27f485abf63c132f37ab3a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Collector&lt;/code&gt; is specified by four functions that work together to accumulate entries into a mutable result container, and optionally perform a final transform on the result. They are:</source>
          <target state="translated">A &lt;code&gt;Collector&lt;/code&gt; 変更可能な結果容器内に蓄積エントリに一緒に4つの機能により、その仕事を指定し、必要に応じて最終的な結果に変換を実行します。彼らです：</target>
        </trans-unit>
        <trans-unit id="b116730b94f507b9013d20aec57e08a1a73e37ed" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Collector&lt;/code&gt; which concatenates CharSequence elements, separated by the specified delimiter, in encounter order</source>
          <target state="translated">指定された区切り文字で区切られたCharSequence要素を遭遇順に連結する &lt;code&gt;Collector&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a7a306058b1bed8b4be6e2ba45666d219a0afc9b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ColorModel&lt;/code&gt; class that works with pixel values that represent color and alpha information as separate samples and that store each sample in a separate data element.</source>
          <target state="translated">色とアルファ情報を個別のサンプルとして表し、各サンプルを個別のデータ要素に格納するピクセル値を処理する &lt;code&gt;ColorModel&lt;/code&gt; クラス。</target>
        </trans-unit>
        <trans-unit id="eec5db285d074dc6c032370e2718b8b026511fc2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ColorModel&lt;/code&gt; class that works with pixel values that represent color and alpha information as separate samples and that store each sample in a separate data element. This class can be used with an arbitrary &lt;code&gt;ColorSpace&lt;/code&gt;. The number of color samples in the pixel values must be same as the number of color components in the &lt;code&gt;ColorSpace&lt;/code&gt;. There may be a single alpha sample.</source>
          <target state="translated">色とアルファ情報を個別のサンプルとして表し、各サンプルを個別のデータ要素に格納するピクセル値を処理する &lt;code&gt;ColorModel&lt;/code&gt; クラス。このクラスは、任意の &lt;code&gt;ColorSpace&lt;/code&gt; で使用できます。ピクセル値のカラーサンプルの数は、 &lt;code&gt;ColorSpace&lt;/code&gt; のカラーコンポーネントの数と同じである必要があります。アルファサンプルが1つある場合があります。</target>
        </trans-unit>
        <trans-unit id="547818ca649f844f79bb465943cb5471724df68c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CompletableFuture&lt;/code&gt; returned from this method can complete exceptionally with:</source>
          <target state="translated">A &lt;code&gt;CompletableFuture&lt;/code&gt; はと非常に完了することができ、このメソッドから返されます：</target>
        </trans-unit>
        <trans-unit id="fd284d2909299b800818a662712c68cf36c2e24e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ComponentColorModel&lt;/code&gt; can be used in conjunction with a &lt;code&gt;ComponentSampleModel&lt;/code&gt;, a &lt;code&gt;BandedSampleModel&lt;/code&gt;, or a &lt;code&gt;PixelInterleavedSampleModel&lt;/code&gt; to construct a &lt;code&gt;BufferedImage&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;ComponentColorModel&lt;/code&gt; これは、と組み合わせて使用することができる &lt;code&gt;ComponentSampleModel&lt;/code&gt; の、 &lt;code&gt;BandedSampleModel&lt;/code&gt; の、または &lt;code&gt;PixelInterleavedSampleModel&lt;/code&gt; 構築する &lt;code&gt;BufferedImage&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="215b9e8124f54fcf6fc4752426c310c5bc4b0444" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ComponentInputMap&lt;/code&gt; is an &lt;code&gt;InputMap&lt;/code&gt; associated with a particular &lt;code&gt;JComponent&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;ComponentInputMap&lt;/code&gt; ある &lt;code&gt;InputMap&lt;/code&gt; を特定の関連付けられた &lt;code&gt;JComponent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a562c4e394af1191e27ca7eec183f37f0dced096" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ComponentInputMap&lt;/code&gt; is an &lt;code&gt;InputMap&lt;/code&gt; associated with a particular &lt;code&gt;JComponent&lt;/code&gt;. The component is automatically notified whenever the &lt;code&gt;ComponentInputMap&lt;/code&gt; changes. &lt;code&gt;ComponentInputMap&lt;/code&gt;s are used for &lt;code&gt;WHEN_IN_FOCUSED_WINDOW&lt;/code&gt; bindings.</source>
          <target state="translated">A &lt;code&gt;ComponentInputMap&lt;/code&gt; ある &lt;code&gt;InputMap&lt;/code&gt; を特定の関連付けられた &lt;code&gt;JComponent&lt;/code&gt; 。 &lt;code&gt;ComponentInputMap&lt;/code&gt; が変更されるたびに、コンポーネントに自動的に通知されます。 &lt;code&gt;ComponentInputMap&lt;/code&gt; は、 &lt;code&gt;WHEN_IN_FOCUSED_WINDOW&lt;/code&gt; バインディングに使用されます。</target>
        </trans-unit>
        <trans-unit id="c31a57b7db785bbafda48aee8a14f2345128cafa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ComponentListener&lt;/code&gt; object is registered via &lt;code&gt;addComponentListener&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;ComponentListener&lt;/code&gt; オブジェクトを経由して登録されている &lt;code&gt;addComponentListener&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de776e86bb01bd11700a39d1b521872b9776c9ce" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CompositeData&lt;/code&gt; representing &lt;code&gt;ThreadInfo&lt;/code&gt; of version &lt;em&gt;N&lt;/em&gt; contains &lt;code&gt;&quot;stackTrace&quot;&lt;/code&gt; attribute and &lt;code&gt;&quot;lockedMonitors&quot;&lt;/code&gt; attribute representing an array of &lt;code&gt;StackTraceElement&lt;/code&gt; and an array of &lt;a href=&quot;monitorinfo&quot;&gt;&lt;code&gt;MonitorInfo&lt;/code&gt;&lt;/a&gt; respectively and their types are of version &lt;em&gt;N&lt;/em&gt;. The &lt;code&gt;&quot;lockedStackFrame&quot;&lt;/code&gt; attribute in &lt;a href=&quot;monitorinfo#from(javax.management.openmbean.CompositeData)&quot;&gt;&lt;code&gt;MonitorInfo&lt;/code&gt;&lt;/a&gt;'s composite type must represent &lt;code&gt;StackTraceElement&lt;/code&gt; of the same version &lt;em&gt;N&lt;/em&gt;. Otherwise, this method will throw &lt;code&gt;IllegalArgumentException&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;CompositeData&lt;/code&gt; 表す &lt;code&gt;ThreadInfo&lt;/code&gt; にバージョンを&lt;em&gt;Nが&lt;/em&gt;含まれている &lt;code&gt;&quot;stackTrace&quot;&lt;/code&gt; 属性と &lt;code&gt;&quot;lockedMonitors&quot;&lt;/code&gt; の配列を表す属性 &lt;code&gt;StackTraceElement&lt;/code&gt; の配列&lt;a href=&quot;monitorinfo&quot;&gt; &lt;code&gt;MonitorInfo&lt;/code&gt; &lt;/a&gt;それぞれとその種類はバージョンである&lt;em&gt;N&lt;/em&gt;。&lt;a href=&quot;monitorinfo#from(javax.management.openmbean.CompositeData)&quot;&gt; &lt;code&gt;MonitorInfo&lt;/code&gt; &lt;/a&gt;の複合タイプの &lt;code&gt;&quot;lockedStackFrame&quot;&lt;/code&gt; 属性は、同じバージョン&lt;em&gt;Nの&lt;/em&gt; &lt;code&gt;StackTraceElement&lt;/code&gt; を表す必要があります。それ以外の場合、このメソッドは &lt;code&gt;IllegalArgumentException&lt;/code&gt; をスローします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2d2570bd5ce1ea4612f9ae93952dccac9143ac53" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CompositeName&lt;/code&gt; instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify a &lt;code&gt;CompositeName&lt;/code&gt; should lock the object.</source>
          <target state="translated">A &lt;code&gt;CompositeName&lt;/code&gt; インスタンスは、並行マルチスレッドアクセスに対して同期化されません。 &lt;code&gt;CompositeName&lt;/code&gt; にアクセスして変更しようとする複数のスレッドは、オブジェクトをロックする必要があります。</target>
        </trans-unit>
        <trans-unit id="bc18441fe19e7991e5f4bb3ce9a1c8fb901cb25a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CompoundControl&lt;/code&gt;, such as a graphic equalizer, provides control over two or more related properties, each of which is itself represented as a &lt;code&gt;Control&lt;/code&gt;.</source>
          <target state="translated">グラフィックイコライザーなどの &lt;code&gt;CompoundControl&lt;/code&gt; は、2つ以上の関連プロパティを制御します。それぞれのプロパティは、それ自体が &lt;code&gt;Control&lt;/code&gt; として表されます。</target>
        </trans-unit>
        <trans-unit id="bb19507e95a7882d1164574206b39a444478df23" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CompoundName&lt;/code&gt; instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify a &lt;code&gt;CompoundName&lt;/code&gt; should lock the object.</source>
          <target state="translated">&lt;code&gt;CompoundName&lt;/code&gt; とのインスタンスは、並行マルチスレッドアクセスに対して同期化されません。 &lt;code&gt;CompoundName&lt;/code&gt; にアクセスして変更しようとする複数のスレッドは、オブジェクトをロックする必要があります。</target>
        </trans-unit>
        <trans-unit id="1a8abfd863968986c4551b5104be0b11a2d835de" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Condition&lt;/code&gt; implementation can provide behavior and semantics that is different from that of the &lt;code&gt;Object&lt;/code&gt; monitor methods, such as guaranteed ordering for notifications, or not requiring a lock to be held when performing notifications. If an implementation provides such specialized semantics then the implementation must document those semantics.</source>
          <target state="translated">A &lt;code&gt;Condition&lt;/code&gt; 実装は、とは異なる振る舞いおよびセマンティクスを提供することができる &lt;code&gt;Object&lt;/code&gt; ような通知のために保証順序としてモニター方法、または通知を行う際に保持されるロックを必要としません。実装がそのような特殊なセマンティクスを提供する場合、実装はそれらのセマンティクスを文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="894d96a6d02f49c084a0cdde5939b69b3c2c71f7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Condition&lt;/code&gt; instance is intrinsically bound to a lock. To obtain a &lt;code&gt;Condition&lt;/code&gt; instance for a particular &lt;a href=&quot;lock&quot;&gt;&lt;code&gt;Lock&lt;/code&gt;&lt;/a&gt; instance use its &lt;a href=&quot;lock#newCondition()&quot;&gt;&lt;code&gt;newCondition()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;Condition&lt;/code&gt; インスタンスは、本質的にロックにバインドされています。特定の&lt;a href=&quot;lock&quot;&gt; &lt;code&gt;Lock&lt;/code&gt; &lt;/a&gt;インスタンスの &lt;code&gt;Condition&lt;/code&gt; インスタンスを取得するには、その&lt;a href=&quot;lock#newCondition()&quot;&gt; &lt;code&gt;newCondition()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="0c6ca21c0d4497ebf365c900bfa1c35883c30d13" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Condition&lt;/code&gt; instance is intrinsically bound to a lock. To obtain a &lt;code&gt;Condition&lt;/code&gt; instance for a particular &lt;a href=&quot;lock&quot;&gt;&lt;code&gt;Lock&lt;/code&gt;&lt;/a&gt; instance use its &lt;a href=&quot;lock#newCondition--&quot;&gt;&lt;code&gt;newCondition()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;Condition&lt;/code&gt; インスタンスは、本質的にロックにバインドされています。特定の&lt;a href=&quot;lock&quot;&gt; &lt;code&gt;Lock&lt;/code&gt; &lt;/a&gt;インスタンスの &lt;code&gt;Condition&lt;/code&gt; インスタンスを取得するには、その&lt;a href=&quot;lock#newCondition--&quot;&gt; &lt;code&gt;newCondition()&lt;/code&gt; &lt;/a&gt;メソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="59a74a281351361da08496c5052dabec5bda2143" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ConnectException&lt;/code&gt; is thrown if a connection is refused to the remote host for a remote method call.</source>
          <target state="translated">A &lt;code&gt;ConnectException&lt;/code&gt; 、接続がリモートメソッド呼び出しでリモートホストに拒否された場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="35365431a4509521961b18fcc03474ebc29edf27" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ConnectIOException&lt;/code&gt; is thrown if an &lt;code&gt;IOException&lt;/code&gt; occurs while making a connection to the remote host for a remote method call.</source>
          <target state="translated">A &lt;code&gt;ConnectIOException&lt;/code&gt; の場合スローさ &lt;code&gt;IOException&lt;/code&gt; リモートメソッド呼び出しのためにリモート・ホストに接続しながら起こります。</target>
        </trans-unit>
        <trans-unit id="cd401922b89f304759d8a11ef9eacfbf19b39264" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Connection&lt;/code&gt; object's database is able to provide information describing its tables, its supported SQL grammar, its stored procedures, the capabilities of this connection, and so on. This information is obtained with the &lt;code&gt;getMetaData&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;Connection&lt;/code&gt; オブジェクトのデータベースは、テーブル、サポートしているSQL文法、ストアドプロシージャ、この接続の能力などを記述する情報を提供することができます。この情報は、 &lt;code&gt;getMetaData&lt;/code&gt; メソッドを使用して取得されます。</target>
        </trans-unit>
        <trans-unit id="f0410c1af00ff590f6c0f9060f3e7b26d6110699" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ConstantCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target is permanent, and can never be changed.</source>
          <target state="translated">A &lt;code&gt;ConstantCallSite&lt;/code&gt; がある&lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt;そのターゲット永続的であり、変更することはできません。</target>
        </trans-unit>
        <trans-unit id="0fe56ac45686158ddd827916ddeec9333e1196a0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ConstantCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target is permanent, and can never be changed. An &lt;code&gt;invokedynamic&lt;/code&gt; instruction linked to a &lt;code&gt;ConstantCallSite&lt;/code&gt; is permanently bound to the call site's target.</source>
          <target state="translated">A &lt;code&gt;ConstantCallSite&lt;/code&gt; がある&lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt;そのターゲット永続的であり、変更することはできません。 &lt;code&gt;invokedynamic&lt;/code&gt; のにリンクされている命令 &lt;code&gt;ConstantCallSite&lt;/code&gt; は恒久的に呼び出しサイトのターゲットにバインドされています。</target>
        </trans-unit>
        <trans-unit id="587e100c970910a84d26ddbfba1fcdab9804d1cd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Constraints&lt;/code&gt; object holds the constraints that govern the way a component's size and position change in a container controlled by a &lt;code&gt;SpringLayout&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Constraints&lt;/code&gt; オブジェクトは、によって制御されるコンテナ内のコンポーネントのサイズと位置変更方法左右する制約保持し &lt;code&gt;SpringLayout&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0b250c1d19fbfacd163c07679292f8b80db258f1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Constraints&lt;/code&gt; object holds the constraints that govern the way a component's size and position change in a container controlled by a &lt;code&gt;SpringLayout&lt;/code&gt;. A &lt;code&gt;Constraints&lt;/code&gt; object is like a &lt;code&gt;Rectangle&lt;/code&gt;, in that it has &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, and &lt;code&gt;height&lt;/code&gt; properties. In the &lt;code&gt;Constraints&lt;/code&gt; object, however, these properties have &lt;code&gt;Spring&lt;/code&gt; values instead of integers. In addition, a &lt;code&gt;Constraints&lt;/code&gt; object can be manipulated as four edges -- north, south, east, and west -- using the &lt;code&gt;constraint&lt;/code&gt; property.</source>
          <target state="translated">&lt;code&gt;Constraints&lt;/code&gt; オブジェクトは、によって制御されるコンテナ内のコンポーネントのサイズと位置変更方法左右する制約保持し &lt;code&gt;SpringLayout&lt;/code&gt; 。 &lt;code&gt;Constraints&lt;/code&gt; オブジェクトは次のようである &lt;code&gt;Rectangle&lt;/code&gt; が有する点で、 &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;y&lt;/code&gt; 、 &lt;code&gt;width&lt;/code&gt; 、および &lt;code&gt;height&lt;/code&gt; のプロパティを。では &lt;code&gt;Constraints&lt;/code&gt; オブジェクト、しかし、これらの性質は持っている &lt;code&gt;Spring&lt;/code&gt; 代わりに、整数の値を。さらに、 &lt;code&gt;Constraints&lt;/code&gt; オブジェクトは、 &lt;code&gt;constraint&lt;/code&gt; プロパティを使用して、北、南、東、西の4つのエッジとして操作できます。</target>
        </trans-unit>
        <trans-unit id="f0373f2115cc61f1ecd48de231e06c805c7dc5c1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Control[]&lt;/code&gt; array passed as a parameter to any method is owned by the caller. The service provider will not modify the array or keep a reference to it, although it may keep references to the individual &lt;code&gt;Control&lt;/code&gt; objects in the array. A &lt;code&gt;Control[]&lt;/code&gt; array returned by any method is immutable, and may not subsequently be modified by either the caller or the service provider.</source>
          <target state="translated">A &lt;code&gt;Control[]&lt;/code&gt; 任意のメソッドにパラメータとして渡された配列は、呼び出し側によって所有されています。サービスプロバイダーは、配列を変更したり、配列への参照を保持したりしませんが、配列内の個々の &lt;code&gt;Control&lt;/code&gt; オブジェクトへの参照を保持する場合があります。どのメソッドによって返された &lt;code&gt;Control[]&lt;/code&gt; 配列も不変であり、呼び出し元またはサービスプロバイダーが後で変更することはできません。</target>
        </trans-unit>
        <trans-unit id="ee3aa4e3df63ebfdf55915ed94497312a8df67b9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Control[]&lt;/code&gt; array passed as a parameter to the &lt;code&gt;getReferralContext()&lt;/code&gt; method is owned by the caller. The service provider will not modify the array or keep a reference to it, although it may keep references to the individual &lt;code&gt;Control&lt;/code&gt; objects in the array.</source>
          <target state="translated">A &lt;code&gt;Control[]&lt;/code&gt; にパラメータとして渡された配列 &lt;code&gt;getReferralContext()&lt;/code&gt; メソッドは、呼び出し側によって所有されています。サービスプロバイダーは、配列を変更したり、配列への参照を保持したりしませんが、配列内の個々の &lt;code&gt;Control&lt;/code&gt; オブジェクトへの参照を保持する場合があります。</target>
        </trans-unit>
        <trans-unit id="623fddfc00e813f22200868156b0c8c96356f578" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CountDownLatch&lt;/code&gt; is a versatile synchronization tool and can be used for a number of purposes. A &lt;code&gt;CountDownLatch&lt;/code&gt; initialized with a count of one serves as a simple on/off latch, or gate: all threads invoking &lt;a href=&quot;#await()&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; wait at the gate until it is opened by a thread invoking &lt;a href=&quot;#countDown()&quot;&gt;&lt;code&gt;countDown()&lt;/code&gt;&lt;/a&gt;. A &lt;code&gt;CountDownLatch&lt;/code&gt; initialized to &lt;em&gt;N&lt;/em&gt; can be used to make one thread wait until &lt;em&gt;N&lt;/em&gt; threads have completed some action, or some action has been completed N times.</source>
          <target state="translated">A &lt;code&gt;CountDownLatch&lt;/code&gt; 汎用性の高い同期ツールであり、多くの目的のために使用することができます。 A &lt;code&gt;CountDownLatch&lt;/code&gt; 、ラッチ、またはゲートのオン/オフ、単純なように、1つのサーブのカウントで初期化：すべてのスレッドが呼び出す&lt;a href=&quot;#await()&quot;&gt; &lt;code&gt;await&lt;/code&gt; &lt;/a&gt;それが呼び出すスレッドによって開かれるまでゲートで待機を&lt;a href=&quot;#countDown()&quot;&gt; &lt;code&gt;countDown()&lt;/code&gt; &lt;/a&gt;。&lt;em&gt;Nに&lt;/em&gt;初期化された &lt;code&gt;CountDownLatch&lt;/code&gt; を使用して、&lt;em&gt;N&lt;/em&gt;スレッドが何らかのアクションを完了するまで、または何らかのアクションがN回完了するまで、1つのスレッドを待機させることができます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="23654a775571a88b4f2911239e9e4effa00f8212" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CountDownLatch&lt;/code&gt; is a versatile synchronization tool and can be used for a number of purposes. A &lt;code&gt;CountDownLatch&lt;/code&gt; initialized with a count of one serves as a simple on/off latch, or gate: all threads invoking &lt;a href=&quot;countdownlatch#await--&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; wait at the gate until it is opened by a thread invoking &lt;a href=&quot;countdownlatch#countDown--&quot;&gt;&lt;code&gt;countDown()&lt;/code&gt;&lt;/a&gt;. A &lt;code&gt;CountDownLatch&lt;/code&gt; initialized to &lt;em&gt;N&lt;/em&gt; can be used to make one thread wait until &lt;em&gt;N&lt;/em&gt; threads have completed some action, or some action has been completed N times.</source>
          <target state="translated">A &lt;code&gt;CountDownLatch&lt;/code&gt; 汎用性の高い同期ツールであり、多くの目的のために使用することができます。 A &lt;code&gt;CountDownLatch&lt;/code&gt; 、ラッチ、またはゲートのオン/オフ、単純なように、1つのサーブのカウントで初期化：すべてのスレッドが呼び出す&lt;a href=&quot;countdownlatch#await--&quot;&gt; &lt;code&gt;await&lt;/code&gt; &lt;/a&gt;それが呼び出すスレッドによって開かれるまでゲートで待機を&lt;a href=&quot;countdownlatch#countDown--&quot;&gt; &lt;code&gt;countDown()&lt;/code&gt; &lt;/a&gt;。&lt;em&gt;Nに&lt;/em&gt;初期化された &lt;code&gt;CountDownLatch&lt;/code&gt; を使用して、&lt;em&gt;N&lt;/em&gt;スレッドが何らかのアクションを完了するか、一部のアクションがN回完了するまで、1つのスレッドを待機させることができます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5780200d18f32d48a90570cf7ae27f4206cd6133" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CountDownLatch&lt;/code&gt; is initialized with a given &lt;em&gt;count&lt;/em&gt;. The &lt;a href=&quot;#await()&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; methods block until the current count reaches zero due to invocations of the &lt;a href=&quot;#countDown()&quot;&gt;&lt;code&gt;countDown()&lt;/code&gt;&lt;/a&gt; method, after which all waiting threads are released and any subsequent invocations of &lt;a href=&quot;#await()&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; return immediately. This is a one-shot phenomenon -- the count cannot be reset. If you need a version that resets the count, consider using a &lt;a href=&quot;cyclicbarrier&quot;&gt;&lt;code&gt;CyclicBarrier&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;CountDownLatch&lt;/code&gt; 与えて初期化され&lt;em&gt;、カウント&lt;/em&gt;。&lt;a href=&quot;#await()&quot;&gt; &lt;code&gt;await&lt;/code&gt; &lt;/a&gt;現在のカウントに達するが、の呼び出しのためにゼロまで、方法はブロック&lt;a href=&quot;#countDown()&quot;&gt; &lt;code&gt;countDown()&lt;/code&gt; &lt;/a&gt;すべての待機中のスレッドが解放された後方法、及び任意の後続の呼び出し&lt;a href=&quot;#await()&quot;&gt; &lt;code&gt;await&lt;/code&gt; &lt;/a&gt;直ちに復帰。これはワンショットの現象です。カウントをリセットすることはできません。カウントをリセットするバージョンが必要な場合は、&lt;a href=&quot;cyclicbarrier&quot;&gt; &lt;code&gt;CyclicBarrier&lt;/code&gt; の&lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="5d7ec18000de9280f0c1b01ceced2d3d4a2aabac" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CountDownLatch&lt;/code&gt; is initialized with a given &lt;em&gt;count&lt;/em&gt;. The &lt;a href=&quot;countdownlatch#await--&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; methods block until the current count reaches zero due to invocations of the &lt;a href=&quot;countdownlatch#countDown--&quot;&gt;&lt;code&gt;countDown()&lt;/code&gt;&lt;/a&gt; method, after which all waiting threads are released and any subsequent invocations of &lt;a href=&quot;countdownlatch#await--&quot;&gt;&lt;code&gt;await&lt;/code&gt;&lt;/a&gt; return immediately. This is a one-shot phenomenon -- the count cannot be reset. If you need a version that resets the count, consider using a &lt;a href=&quot;cyclicbarrier&quot;&gt;&lt;code&gt;CyclicBarrier&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;CountDownLatch&lt;/code&gt; 与えて初期化され&lt;em&gt;、カウント&lt;/em&gt;。&lt;a href=&quot;countdownlatch#await--&quot;&gt; &lt;code&gt;await&lt;/code&gt; &lt;/a&gt;現在のカウントに達するが、の呼び出しのためにゼロまで、方法はブロック&lt;a href=&quot;countdownlatch#countDown--&quot;&gt; &lt;code&gt;countDown()&lt;/code&gt; &lt;/a&gt;すべての待機中のスレッドが解放された後方法、及び任意の後続の呼び出し&lt;a href=&quot;countdownlatch#await--&quot;&gt; &lt;code&gt;await&lt;/code&gt; &lt;/a&gt;直ちに復帰。これはワンショット現象です。カウントをリセットできません。カウントをリセットするバージョンが必要な場合は、&lt;a href=&quot;cyclicbarrier&quot;&gt; &lt;code&gt;CyclicBarrier&lt;/code&gt; の&lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="f1f5b8769fcbc5e2f74bc723a2975c47a63c9aa6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CounterMonitor&lt;/code&gt; can operate in &lt;em&gt;difference mode&lt;/em&gt;. In this mode, the value compared against the threshold is the difference between two successive observations of an attribute.</source>
          <target state="translated">A &lt;code&gt;CounterMonitor&lt;/code&gt; のはで動作することができ&lt;em&gt;差分モード&lt;/em&gt;。このモードでは、しきい値と比較される値は、属性の2つの連続する観測間の差です。</target>
        </trans-unit>
        <trans-unit id="d7269b012ee130f2cfb0f0d27df9e22dbed71430" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CyclicBarrier&lt;/code&gt; supports an optional &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt; command that is run once per barrier point, after the last thread in the party arrives, but before any threads are released. This &lt;em&gt;barrier action&lt;/em&gt; is useful for updating shared-state before any of the parties continue.</source>
          <target state="translated">A &lt;code&gt;CyclicBarrier&lt;/code&gt; をは、オプションのサポート&lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; を&lt;/a&gt;任意のスレッドがリリースされる前に、パーティーの最後のスレッドが到着したが、後に、一度バリアポイントごとに実行されるコマンドを。この&lt;em&gt;バリアアクション&lt;/em&gt;は、いずれかのパーティが続行する前に共有状態を更新するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="d0e59db3fed8b2b585d26ca27a870c98cefe2f2b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DATE_EDITOR&lt;/code&gt; is a component that allows users to edit &lt;code&gt;java.util.Date&lt;/code&gt; and &lt;code&gt;java.util.Time&lt;/code&gt; objects.</source>
          <target state="translated">A &lt;code&gt;DATE_EDITOR&lt;/code&gt; は、編集にユーザーを可能にするコンポーネントです &lt;code&gt;java.util.Date&lt;/code&gt; と &lt;code&gt;java.util.Time&lt;/code&gt; のオブジェクト。</target>
        </trans-unit>
        <trans-unit id="3f28a3a3fddcbfd552884340d2a55ce72b45a7a6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DOCUMENT_MODAL&lt;/code&gt; dialog blocks input to all top-level windows from the same document except those from its own child hierarchy.</source>
          <target state="translated">A &lt;code&gt;DOCUMENT_MODAL&lt;/code&gt; 同じ文書から、自身の子階層からのものを除き、すべてのトップレベルウィンドウにダイアログブロック入力。</target>
        </trans-unit>
        <trans-unit id="3ce0bd6bebd56e547c80658e640f71d622bcff6a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DOCUMENT_MODAL&lt;/code&gt; dialog blocks input to all top-level windows from the same document except those from its own child hierarchy. A document is a top-level window without an owner. It may contain child windows that, together with the top-level window are treated as a single solid document. Since every top-level window must belong to some document, its root can be found as the top-nearest window without an owner.</source>
          <target state="translated">A &lt;code&gt;DOCUMENT_MODAL&lt;/code&gt; 同じ文書から、自身の子階層からのものを除き、すべてのトップレベルウィンドウにダイアログブロック入力。ドキュメントは、所有者のいないトップレベルのウィンドウです。これには、最上位ウィンドウとともに単一のソリッドドキュメントとして扱われる子ウィンドウが含まれる場合があります。すべてのトップレベルウィンドウは何らかのドキュメントに属している必要があるため、そのルートは所有者のいない最上位ウィンドウとして見つけることができます。</target>
        </trans-unit>
        <trans-unit id="7a3f7d42d20b7b3d67d7fa0fa8e42adc3c948908" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DOMString&lt;/code&gt; indicating which related data is expected in &lt;code&gt;relatedData&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;DOMString&lt;/code&gt; 関連データが期待されているかを示す &lt;code&gt;relatedData&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5116e7b33efbcdbfd8f9de6e1e6813af7149e130" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DOMString&lt;/code&gt; indicating which related data is expected in &lt;code&gt;relatedData&lt;/code&gt;. Users should refer to the specification of the error in order to find its &lt;code&gt;DOMString&lt;/code&gt; type and &lt;code&gt;relatedData&lt;/code&gt; definitions if any.</source>
          <target state="translated">A &lt;code&gt;DOMString&lt;/code&gt; 関連データが期待されているかを示す &lt;code&gt;relatedData&lt;/code&gt; 。ユーザーは、エラーの仕様を参照して、その &lt;code&gt;DOMString&lt;/code&gt; タイプと &lt;code&gt;relatedData&lt;/code&gt; 定義（存在する場合）を見つける必要があります。</target>
        </trans-unit>
        <trans-unit id="fdf3136aa9ed6d2adfa91078dd901de169c1263f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DataFlavor&lt;/code&gt; provides meta information about data.</source>
          <target state="translated">A &lt;code&gt;DataFlavor&lt;/code&gt; がデータに関するメタ情報を提供します。</target>
        </trans-unit>
        <trans-unit id="4be4aba3f469353d84e00a69221bb21d6219bb1a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DataFlavor&lt;/code&gt; provides meta information about data. &lt;code&gt;DataFlavor&lt;/code&gt; is typically used to access data on the clipboard, or during a drag and drop operation.</source>
          <target state="translated">A &lt;code&gt;DataFlavor&lt;/code&gt; がデータに関するメタ情報を提供します。 &lt;code&gt;DataFlavor&lt;/code&gt; は通常、クリップボード上のデータにアクセスするため、またはドラッグアンドドロップ操作中に使用されます。</target>
        </trans-unit>
        <trans-unit id="0a68c6d45b89da215100f63a2c1fb4b42f275c24" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DataSource&lt;/code&gt; object can be implemented to work with the middle tier infrastructure so that the connections it produces will be pooled for reuse. An application that uses such a &lt;code&gt;DataSource&lt;/code&gt; implementation will automatically get a connection that participates in connection pooling. A &lt;code&gt;DataSource&lt;/code&gt; object can also be implemented to work with the middle tier infrastructure so that the connections it produces can be used for distributed transactions without any special coding.</source>
          <target state="translated">&lt;code&gt;DataSource&lt;/code&gt; オブジェクトは、それが生成する接続が再利用のためにプールされるように、中間層インフラストラクチャで動作するように実装することができます。このようなデータ &lt;code&gt;DataSource&lt;/code&gt; 実装を使用するアプリケーションは、接続プールに参加する接続を自動的に取得します。 A &lt;code&gt;DataSource&lt;/code&gt; が生成する接続が特別なコーディングなしで分散トランザクションのために使用することができるように、オブジェクトは、中間層インフラストラクチャで動作するように実装することができます。</target>
        </trans-unit>
        <trans-unit id="407f539c1a6a73f3fb5878397ad90f413d6a8652" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DataSource&lt;/code&gt; object has properties that can be modified when necessary. For example, if the data source is moved to a different server, the property for the server can be changed. The benefit is that because the data source's properties can be changed, any code accessing that data source does not need to be changed.</source>
          <target state="translated">&lt;code&gt;DataSource&lt;/code&gt; オブジェクトは、必要に応じて変更することができる特性を有します。たとえば、データソースを別のサーバーに移動した場合、サーバーのプロパティを変更できます。利点は、データソースのプロパティを変更できるため、そのデータソースにアクセスするコードを変更する必要がないことです。</target>
        </trans-unit>
        <trans-unit id="983265f22277c984071b6d0839ff11a5aabd6129" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Date&lt;/code&gt; parsed from the string.</source>
          <target state="translated">&lt;code&gt;Date&lt;/code&gt; 文字列から解析。</target>
        </trans-unit>
        <trans-unit id="1b9da6c54213efee90c22320dda6686553788abc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Date&lt;/code&gt; parsed from the string. In case of error, returns null.</source>
          <target state="translated">&lt;code&gt;Date&lt;/code&gt; 文字列から解析。エラーの場合、nullを返します。</target>
        </trans-unit>
        <trans-unit id="88198a2133b30c87ec970f147ea4593fb57ae6ef" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Date&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if the input could not be parsed</source>
          <target state="translated">&lt;code&gt;Date&lt;/code&gt; 、または &lt;code&gt;null&lt;/code&gt; 入力が解析できなかった場合</target>
        </trans-unit>
        <trans-unit id="b940e54bad740f2ada94ed3c5d00e1993947acda" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DecimalFormat&lt;/code&gt; comprises a &lt;em&gt;pattern&lt;/em&gt; and a set of &lt;em&gt;symbols&lt;/em&gt;. The pattern may be set directly using &lt;code&gt;applyPattern()&lt;/code&gt;, or indirectly using the API methods. The symbols are stored in a &lt;code&gt;DecimalFormatSymbols&lt;/code&gt; object. When using the &lt;code&gt;NumberFormat&lt;/code&gt; factory methods, the pattern and symbols are read from localized &lt;code&gt;ResourceBundle&lt;/code&gt;s.</source>
          <target state="translated">A &lt;code&gt;DecimalFormat&lt;/code&gt; 含む&lt;em&gt;パターン&lt;/em&gt;との組&lt;em&gt;のシンボルを&lt;/em&gt;。パターンは、 &lt;code&gt;applyPattern()&lt;/code&gt; を使用して直接設定することも、APIメソッドを使用して間接的に設定することもできます。シンボルは &lt;code&gt;DecimalFormatSymbols&lt;/code&gt; オブジェクトに格納されます。 &lt;code&gt;NumberFormat&lt;/code&gt; ファクトリメソッドを使用する場合、パターンとシンボルはローカライズされた &lt;code&gt;ResourceBundle&lt;/code&gt; から読み取られます。</target>
        </trans-unit>
        <trans-unit id="f386dd84dac1520ed2bcfb17a3ac2ee80b93ecc1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DecimalFormat&lt;/code&gt; pattern contains a positive and negative subpattern, for example, &lt;code&gt;&quot;#,##0.00;(#,##0.00)&quot;&lt;/code&gt;. Each subpattern has a prefix, numeric part, and suffix. The negative subpattern is optional; if absent, then the positive subpattern prefixed with the localized minus sign (&lt;code&gt;'-'&lt;/code&gt; in most locales) is used as the negative subpattern. That is, &lt;code&gt;&quot;0.00&quot;&lt;/code&gt; alone is equivalent to &lt;code&gt;&quot;0.00;-0.00&quot;&lt;/code&gt;. If there is an explicit negative subpattern, it serves only to specify the negative prefix and suffix; the number of digits, minimal digits, and other characteristics are all the same as the positive pattern. That means that &lt;code&gt;&quot;#,##0.0#;(#)&quot;&lt;/code&gt; produces precisely the same behavior as &lt;code&gt;&quot;#,##0.0#;(#,##0.0#)&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DecimalFormat&lt;/code&gt; のパターンは、例えば、正と負のサブパターンが含ま &lt;code&gt;&quot;#,##0.00;(#,##0.00)&quot;&lt;/code&gt; 。各サブパターンには、プレフィックス、数値部分、およびサフィックスがあります。負のサブパターンはオプションです。存在しない場合、ローカライズされたマイナス記号（ほとんどのロケールでは &lt;code&gt;'-'&lt;/code&gt; ）が前に付けられた正のサブパターンが負のサブパターンとして使用されます。つまり、 &lt;code&gt;&quot;0.00&quot;&lt;/code&gt; のみは &lt;code&gt;&quot;0.00;-0.00&quot;&lt;/code&gt; と同等です。明示的なネガティブサブパターンがある場合、それはネガティブプレフィックスとサフィックスを指定するためにのみ機能します。桁数、最小桁数、およびその他の特性はすべて、正のパターンと同じです。つまり、 &lt;code&gt;&quot;#,##0.0#;(#)&quot;&lt;/code&gt; とまったく同じ動作を生成します &lt;code&gt;&quot;#,##0.0#;(#,##0.0#)&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="43f62f17c93d6e503ea6958cb597b84dc9cc8960" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DefaultMutableTreeNode&lt;/code&gt; is a general-purpose node in a tree data structure.</source>
          <target state="translated">A &lt;code&gt;DefaultMutableTreeNode&lt;/code&gt; のは、ツリーデータ構造の汎用ノードです。</target>
        </trans-unit>
        <trans-unit id="d500332cdb51c4544e081fe6aaa562e8f963e7a1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DefaultMutableTreeNode&lt;/code&gt; is a general-purpose node in a tree data structure. For examples of using default mutable tree nodes, see &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/tree.html&quot;&gt;How to Use Trees&lt;/a&gt; in &lt;em&gt;The Java Tutorial.&lt;/em&gt;</source>
          <target state="translated">A &lt;code&gt;DefaultMutableTreeNode&lt;/code&gt; のは、ツリーデータ構造の汎用ノードです。デフォルトの可変ツリーノードの使用例については&lt;em&gt;、Javaチュートリアルの&lt;/em&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/tree.html&quot;&gt;「ツリーの使用方法」を&lt;/a&gt;参照してください&lt;em&gt;。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7c748b8d788228ebf84979c6a45c3bbd71d5cb14" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DefaultMutableTreeNode&lt;/code&gt; is a general-purpose node in a tree data structure. For examples of using default mutable tree nodes, see &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/uiswing/components/tree.html&quot;&gt;How to Use Trees&lt;/a&gt; in &lt;em&gt;The Java Tutorial.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="47e3fd3937b7f9d45c2963522b8029c7a9d7864a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DigestMethod&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;xmlsignaturefactory#newDigestMethod(java.lang.String,javax.xml.crypto.dsig.spec.DigestMethodParameterSpec)&quot;&gt;&lt;code&gt;newDigestMethod&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;code&gt;DigestMethod&lt;/code&gt; のインスタンスを呼び出すことによって作成することができる&lt;a href=&quot;xmlsignaturefactory#newDigestMethod(java.lang.String,javax.xml.crypto.dsig.spec.DigestMethodParameterSpec)&quot;&gt; &lt;code&gt;newDigestMethod&lt;/code&gt; の&lt;/a&gt;方法&lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt;クラス。</target>
        </trans-unit>
        <trans-unit id="748fe46a90c654076e96379836903b45a13d067e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Dimension&lt;/code&gt; object that indicates the size of this component; &lt;code&gt;null&lt;/code&gt; if this object is not on the screen</source>
          <target state="translated">&lt;code&gt;Dimension&lt;/code&gt; このコンポーネントのサイズを示すオブジェクト。このオブジェクトが画面に表示されていない場合は &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a6525ce217e5549cf04ce19699f3d34ed2bc57c4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DirObjectFactory&lt;/code&gt; extends &lt;code&gt;ObjectFactory&lt;/code&gt; by allowing an &lt;code&gt;Attributes&lt;/code&gt; instance to be supplied to the &lt;code&gt;getObjectInstance()&lt;/code&gt; method. &lt;code&gt;DirObjectFactory&lt;/code&gt; implementations are intended to be used by &lt;code&gt;DirContext&lt;/code&gt; service providers. The service provider, in addition reading an object from the directory, might already have attributes that are useful for the object factory to check to see whether the factory is supposed to process the object. For instance, an LDAP-style service provider might have read the &quot;objectclass&quot; of the object. A CORBA object factory might be interested only in LDAP entries with &quot;objectclass=corbaObject&quot;. By using the attributes supplied by the LDAP service provider, the CORBA object factory can quickly eliminate objects that it need not worry about, and non-CORBA object factories can quickly eliminate CORBA-related LDAP entries.</source>
          <target state="translated">A &lt;code&gt;DirObjectFactory&lt;/code&gt; は延び &lt;code&gt;ObjectFactory&lt;/code&gt; 可能にすることによって、 &lt;code&gt;Attributes&lt;/code&gt; に供給されるインスタンスを &lt;code&gt;getObjectInstance()&lt;/code&gt; メソッド。 &lt;code&gt;DirObjectFactory&lt;/code&gt; 実装は、 &lt;code&gt;DirContext&lt;/code&gt; で使用することを目的としていますサービスプロバイダー。サービスプロバイダーは、ディレクトリからオブジェクトを読み取ることに加えて、オブジェクトファクトリがオブジェクトを処理することになっているかどうかを確認するためにチェックするのに役立つ属性をすでに持っている場合があります。たとえば、LDAPスタイルのサービスプロバイダーは、オブジェクトの「オブジェクトクラス」を読み取った可能性があります。 CORBAオブジェクトファクトリは、「objectclass = corbaObject」を含むLDAPエントリにのみ関心がある可能性があります。 LDAPサービスプロバイダーが提供する属性を使用することで、CORBAオブジェクトファクトリは、心配する必要のないオブジェクトをすばやく削除でき、CORBA以外のオブジェクトファクトリは、CORBA関連のLDAPエントリをすばやく削除できます。</target>
        </trans-unit>
        <trans-unit id="7a1be329221d19aed1829322a7305689086b3003" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DirStateFactory&lt;/code&gt; extends &lt;code&gt;StateFactory&lt;/code&gt; by allowing an &lt;code&gt;Attributes&lt;/code&gt; instance to be supplied to and be returned by the &lt;code&gt;getStateToBind()&lt;/code&gt; method. &lt;code&gt;DirStateFactory&lt;/code&gt; implementations are intended to be used by &lt;code&gt;DirContext&lt;/code&gt; service providers. When a caller binds an object using &lt;code&gt;DirContext.bind()&lt;/code&gt;, he might also specify a set of attributes to be bound with the object. The object and attributes to be bound are passed to the &lt;code&gt;getStateToBind()&lt;/code&gt; method of a factory. If the factory processes the object and attributes, it returns a corresponding pair of object and attributes to be bound. If the factory does not process the object, it must return null.</source>
          <target state="translated">A &lt;code&gt;DirStateFactory&lt;/code&gt; は延び &lt;code&gt;StateFactory&lt;/code&gt; を可能にすることによって、 &lt;code&gt;Attributes&lt;/code&gt; インスタンスに供給されると、によって返される &lt;code&gt;getStateToBind()&lt;/code&gt; メソッド。 &lt;code&gt;DirStateFactory&lt;/code&gt; 実装は、 &lt;code&gt;DirContext&lt;/code&gt; サービスプロバイダーによる使用を目的としています。呼び出し元が &lt;code&gt;DirContext.bind()&lt;/code&gt; を使用してオブジェクトをバインドするときに、オブジェクトにバインドされる属性のセットを指定する場合もあります。バインドされるオブジェクトと属性は、ファクトリの &lt;code&gt;getStateToBind()&lt;/code&gt; メソッドに渡されます。ファクトリがオブジェクトと属性を処理する場合、バインドするオブジェクトと属性の対応するペアを返します。ファクトリがオブジェクトを処理しない場合は、nullを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="a58679715515bab3aef6bbaa606fe4fadd60c73a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DirectoryStream&lt;/code&gt; is opened upon creation and is closed by invoking the &lt;code&gt;close&lt;/code&gt; method. Closing a directory stream releases any resources associated with the stream. Failure to close the stream may result in a resource leak. The try-with-resources statement provides a useful construct to ensure that the stream is closed:</source>
          <target state="translated">A &lt;code&gt;DirectoryStream&lt;/code&gt; は、作成時に開かれ、呼び出すことによって閉じられている &lt;code&gt;close&lt;/code&gt; 方法を。ディレクトリストリームを閉じると、そのストリームに関連付けられているすべてのリソースが解放されます。ストリームを閉じないと、リソースリークが発生する可能性があります。try-with-resourcesステートメントは、ストリームが確実に閉じられるようにするための便利な構成を提供します。</target>
        </trans-unit>
        <trans-unit id="65b703cdf43a5ec83f8ad4044878e129de1094fd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DirectoryStream&lt;/code&gt; that defines operations on files that are located relative to an open directory.</source>
          <target state="translated">開いているディレクトリからの相対位置にあるファイルに対する操作を定義する &lt;code&gt;DirectoryStream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01c2f8bc2c160fdac6becd46d1322732a89e078f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DirectoryStream&lt;/code&gt; that defines operations on files that are located relative to an open directory. A &lt;code&gt;SecureDirectoryStream&lt;/code&gt; is intended for use by sophisticated or security sensitive applications requiring to traverse file trees or otherwise operate on directories in a race-free manner. Race conditions can arise when a sequence of file operations cannot be carried out in isolation. Each of the file operations defined by this interface specify a relative path. All access to the file is relative to the open directory irrespective of if the directory is moved or replaced by an attacker while the directory is open. A &lt;code&gt;SecureDirectoryStream&lt;/code&gt; may also be used as a virtual &lt;em&gt;working directory&lt;/em&gt;.</source>
          <target state="translated">開いているディレクトリからの相対位置にあるファイルに対する操作を定義する &lt;code&gt;DirectoryStream&lt;/code&gt; 。 A &lt;code&gt;SecureDirectoryStream&lt;/code&gt; は、ファイルツリーをトラバースか、そうでなければ、レースのない方法でディレクトリを操作するために必要な洗練されたか、セキュリティに敏感なアプリケーションで使用するためのものです。一連のファイル操作を分離して実行できない場合、競合状態が発生する可能性があります。このインターフェースで定義された各ファイル操作は、相対パスを指定します。ファイルへのすべてのアクセスは、ディレクトリが開いている間にディレクトリが移動または攻撃者によって置き換えられたかどうかに関係なく、開いているディレクトリに関連しています。 A &lt;code&gt;SecureDirectoryStream&lt;/code&gt; は、仮想として使用することができる&lt;em&gt;の作業ディレクトリ&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="0612efab86216fdda0a0396170a641c29dd7bdb4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DocAttributeSet&lt;/code&gt; is just an &lt;a href=&quot;attributeset&quot;&gt;&lt;code&gt;AttributeSet&lt;/code&gt;&lt;/a&gt; whose constructors and mutating operations guarantee an additional invariant, namely that all attribute values in the &lt;code&gt;DocAttributeSet&lt;/code&gt; must be instances of interface &lt;a href=&quot;docattribute&quot;&gt;&lt;code&gt;DocAttribute&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#add(javax.print.attribute.Attribute)&quot;&gt;&lt;code&gt;add(Attribute)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#addAll(javax.print.attribute.AttributeSet)&quot;&gt;&lt;code&gt;addAll(AttributeSet)&lt;/code&gt;&lt;/a&gt; operations are respecified below to guarantee this additional invariant.</source>
          <target state="translated">A &lt;code&gt;DocAttributeSet&lt;/code&gt; はちょうどある&lt;a href=&quot;attributeset&quot;&gt; &lt;code&gt;AttributeSet&lt;/code&gt; &lt;/a&gt;を持つコンストラクタと変異操作ですべての属性値、すなわちことを、追加の不変性を保証 &lt;code&gt;DocAttributeSet&lt;/code&gt; は、インタフェースのインスタンスでなければなりません&lt;a href=&quot;docattribute&quot;&gt; &lt;code&gt;DocAttribute&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;#add(javax.print.attribute.Attribute)&quot;&gt; &lt;code&gt;add(Attribute)&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#addAll(javax.print.attribute.AttributeSet)&quot;&gt; &lt;code&gt;addAll(AttributeSet)&lt;/code&gt; &lt;/a&gt;の操作は、この追加の不変式を保証するために次のようにしています。</target>
        </trans-unit>
        <trans-unit id="af03376ceecb544d9985acc0755ed98550534ecd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DocPrintJob&lt;/code&gt; obtains its print data by means of interface &lt;a href=&quot;doc&quot;&gt;&lt;code&gt;Doc&lt;/code&gt;&lt;/a&gt;. A &lt;code&gt;Doc&lt;/code&gt; object lets the &lt;code&gt;DocPrintJob&lt;/code&gt; determine the doc flavor the client can supply. A &lt;code&gt;Doc&lt;/code&gt; object also lets the &lt;code&gt;DocPrintJob&lt;/code&gt; obtain an instance of the doc flavor's representation class, from which the &lt;code&gt;DocPrintJob&lt;/code&gt; then obtains the actual print data.</source>
          <target state="translated">A &lt;code&gt;DocPrintJob&lt;/code&gt; インタフェースによってその印刷データを取得&lt;a href=&quot;doc&quot;&gt; &lt;code&gt;Doc&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;Doc&lt;/code&gt; オブジェクトができ &lt;code&gt;DocPrintJob&lt;/code&gt; クライアントが提供可能なdocフレーバを判別します。 &lt;code&gt;Doc&lt;/code&gt; オブジェクトもでき &lt;code&gt;DocPrintJob&lt;/code&gt; そこからdocフレーバの表現クラスのインスタンス得 &lt;code&gt;DocPrintJob&lt;/code&gt; 、実際の印刷データを取得します。</target>
        </trans-unit>
        <trans-unit id="45f553c3dc219e11e9cac35d1e111bda89463aab" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DomainCombiner&lt;/code&gt; is passed as a parameter to the appropriate constructor for &lt;code&gt;AccessControlContext&lt;/code&gt;. The newly constructed context is then passed to the &lt;code&gt;AccessController.doPrivileged(..., context)&lt;/code&gt; method to bind the provided context (and associated &lt;code&gt;DomainCombiner&lt;/code&gt;) with the current execution Thread. Subsequent calls to &lt;code&gt;AccessController.getContext&lt;/code&gt; or &lt;code&gt;AccessController.checkPermission&lt;/code&gt; cause the &lt;code&gt;DomainCombiner.combine&lt;/code&gt; to get invoked.</source>
          <target state="translated">A &lt;code&gt;DomainCombiner&lt;/code&gt; のために適切なコンストラクタにパラメータとして渡され &lt;code&gt;AccessControlContext&lt;/code&gt; 。次に、新しく構築されたコンテキストが &lt;code&gt;AccessController.doPrivileged(..., context)&lt;/code&gt; メソッドに渡され、提供されたコンテキスト（および関連する &lt;code&gt;DomainCombiner&lt;/code&gt; ）が現在の実行スレッドにバインドされます。その後 &lt;code&gt;AccessController.getContext&lt;/code&gt; または &lt;code&gt;AccessController.checkPermission&lt;/code&gt; を呼び出すと、 &lt;code&gt;DomainCombiner.combine&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7af584515b6d622da0599e538175efd0509780e2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DomainCombiner&lt;/code&gt; provides a means to dynamically update the ProtectionDomains associated with the current &lt;code&gt;AccessControlContext&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;DomainCombiner&lt;/code&gt; 動的に現在関連付けられたProtectionDomains更新する手段を提供する &lt;code&gt;AccessControlContext&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="969de020230c5d0de2297be66b00415bdc63a99b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DosFileAttributeView&lt;/code&gt; is a &lt;a href=&quot;basicfileattributeview&quot;&gt;&lt;code&gt;BasicFileAttributeView&lt;/code&gt;&lt;/a&gt; that additionally supports access to the set of DOS attribute flags that are used to indicate if the file is read-only, hidden, a system file, or archived.</source>
          <target state="translated">A &lt;code&gt;DosFileAttributeView&lt;/code&gt; がある&lt;a href=&quot;basicfileattributeview&quot;&gt; &lt;code&gt;BasicFileAttributeView&lt;/code&gt; &lt;/a&gt;さらに、ファイルが読み取り専用の場合は、システムファイルを隠された、またはアーカイブを示すために使用されているDOSの属性フラグのセットへのアクセスをサポートしています。</target>
        </trans-unit>
        <trans-unit id="3e0422692eeba56e400501c60a1367491cd3defc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DragGestureEvent&lt;/code&gt; is passed to &lt;code&gt;DragGestureListener&lt;/code&gt;'s dragGestureRecognized() method when a particular &lt;code&gt;DragGestureRecognizer&lt;/code&gt; detects that a platform dependent drag initiating gesture has occurred on the &lt;code&gt;Component&lt;/code&gt; that it is tracking.</source>
          <target state="translated">A &lt;code&gt;DragGestureEvent&lt;/code&gt; に渡される &lt;code&gt;DragGestureListener&lt;/code&gt; 特定の場合のdragGestureRecognized（）メソッド &lt;code&gt;DragGestureRecognizer&lt;/code&gt; 、プラットフォーム依存のドラッグ開始ジェスチャーがで発生したことを検出する &lt;code&gt;Component&lt;/code&gt; が追跡されていること。</target>
        </trans-unit>
        <trans-unit id="df8b8227642a3736f692748d4a90f5d5a95ec8dd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DragGestureEvent&lt;/code&gt; is passed to &lt;code&gt;DragGestureListener&lt;/code&gt;'s dragGestureRecognized() method when a particular &lt;code&gt;DragGestureRecognizer&lt;/code&gt; detects that a platform dependent drag initiating gesture has occurred on the &lt;code&gt;Component&lt;/code&gt; that it is tracking. The &lt;code&gt;action&lt;/code&gt; field of any &lt;code&gt;DragGestureEvent&lt;/code&gt; instance should take one of the following values:</source>
          <target state="translated">A &lt;code&gt;DragGestureEvent&lt;/code&gt; に渡される &lt;code&gt;DragGestureListener&lt;/code&gt; 特定の場合のdragGestureRecognized（）メソッド &lt;code&gt;DragGestureRecognizer&lt;/code&gt; 、プラットフォーム依存のドラッグ開始ジェスチャーがで発生したことを検出する &lt;code&gt;Component&lt;/code&gt; が追跡されていること。 &lt;code&gt;DragGestureEvent&lt;/code&gt; インスタンスの &lt;code&gt;action&lt;/code&gt; フィールドは、次のいずれかの値を取る必要があります。</target>
        </trans-unit>
        <trans-unit id="e6b64ca08ec1ff3206b0a11ebecc01a01ae26514" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DragGestureRecognizer&lt;/code&gt; is obtained from the &lt;code&gt;DragSource&lt;/code&gt; and is associated with a &lt;code&gt;Component&lt;/code&gt; in order to track and identify any Drag initiating gesture by the user over the &lt;code&gt;Component&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;DragGestureRecognizer&lt;/code&gt; から得られ &lt;code&gt;DragSource&lt;/code&gt; と関連付けられている &lt;code&gt;Component&lt;/code&gt; 追跡とを介してユーザによって任意のドラッグ開始ジェスチャーを識別するために &lt;code&gt;Component&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="65e20906fc545ca43fa04f80a5d9ada7302621ca" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DragSource&lt;/code&gt; comes into existence, associated with some presentation element (&lt;code&gt;Component&lt;/code&gt;) in the GUI, to initiate a Drag and Drop of some potentially &lt;code&gt;Transferable&lt;/code&gt; data.</source>
          <target state="translated">&lt;code&gt;Transferable&lt;/code&gt; 可能な可能性のあるデータのドラッグアンドドロップを開始するために、GUIの一部のプレゼンテーション要素（ &lt;code&gt;Component&lt;/code&gt; ）に関連付けられた &lt;code&gt;DragSource&lt;/code&gt; が作成されます。</target>
        </trans-unit>
        <trans-unit id="1a92d5d9ddc22a56ce39e56abcb59681f362c267" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DriverAction&lt;/code&gt; implementation is not intended to be used directly by applications. A JDBC Driver may choose to create its &lt;code&gt;DriverAction&lt;/code&gt; implementation in a private class to avoid it being called directly.</source>
          <target state="translated">&lt;code&gt;DriverAction&lt;/code&gt; の実装は、アプリケーションによって直接使用するためのものではありません。JDBCドライバーは、直接呼び出されないように、プライベートクラスで &lt;code&gt;DriverAction&lt;/code&gt; 実装を作成することを選択できます。</target>
        </trans-unit>
        <trans-unit id="12068ae8e6190d25faca1bbbace9a271d823ded5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DropTargetContext&lt;/code&gt; is created whenever the logical cursor associated with a Drag and Drop operation coincides with the visible geometry of a &lt;code&gt;Component&lt;/code&gt; associated with a &lt;code&gt;DropTarget&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;DropTargetContext&lt;/code&gt; 論理カーソルが可視ジオメトリとドラッグ＆ドロップ操作の一致に関連付けたびに作成された &lt;code&gt;Component&lt;/code&gt; に関連付けられ &lt;code&gt;DropTarget&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="98bed9bb6d3e8178c5f5b3ab8da421776c67f667" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DropTargetContext&lt;/code&gt; is created whenever the logical cursor associated with a Drag and Drop operation coincides with the visible geometry of a &lt;code&gt;Component&lt;/code&gt; associated with a &lt;code&gt;DropTarget&lt;/code&gt;. The &lt;code&gt;DropTargetContext&lt;/code&gt; provides the mechanism for a potential receiver of a drop operation to both provide the end user with the appropriate drag under feedback, but also to effect the subsequent data transfer if appropriate.</source>
          <target state="translated">A &lt;code&gt;DropTargetContext&lt;/code&gt; 論理カーソルが可視ジオメトリとドラッグ＆ドロップ操作の一致に関連付けたびに作成された &lt;code&gt;Component&lt;/code&gt; に関連付けられ &lt;code&gt;DropTarget&lt;/code&gt; 。 &lt;code&gt;DropTargetContext&lt;/code&gt; 、両方のフィードバック下、適切なドラッグをエンドユーザに提供するために、ドロップ操作の潜在的受信機のためのメカニズムを提供するだけでなく、適切な場合、後続のデータ転送を達成します。</target>
        </trans-unit>
        <trans-unit id="30d4f0a0b6cd4dfe2827283578fb4258723b708c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Duration&lt;/code&gt; represents a directed distance between two points on the time-line and can therefore be positive, zero or negative. This method checks whether the length is less than zero.</source>
          <target state="translated">&lt;code&gt;Duration&lt;/code&gt; タイムライン上の2点間の有向距離を表しており、従って、正、ゼロまたは負とすることができます。このメソッドは、長さがゼロ未満かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="2748f760b08fada23b2956823b2400fe17d043c7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Duration&lt;/code&gt; represents a directed distance between two points on the time-line and can therefore be positive, zero or negative. This method checks whether the length is zero.</source>
          <target state="translated">&lt;code&gt;Duration&lt;/code&gt; タイムライン上の2点間の有向距離を表しており、従って、正、ゼロまたは負とすることができます。このメソッドは、長さがゼロかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="930f6f6edd843ad2d6fbf30a21b58dbc51ccf9e6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Duration&lt;/code&gt; represents a directed distance between two points on the time-line. A negative duration is expressed by the negative sign of the seconds part. A duration of -1 nanosecond is stored as -1 seconds plus 999,999,999 nanoseconds.</source>
          <target state="translated">&lt;code&gt;Duration&lt;/code&gt; タイムライン上の2点間の有向の距離を表します。負の期間は、秒部分の負の符号で表されます。-1ナノ秒の期間は、-1秒+ 999,999,999ナノ秒として格納されます。</target>
        </trans-unit>
        <trans-unit id="c5f9797b527ff1fb2efee429f3363309891a1f28" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;DynamicLinkerFactory&lt;/code&gt; can be configured with a &lt;a href=&quot;jdk/dynalink/dynamiclinkerfactory#setClassLoader(java.lang.ClassLoader)&quot;&gt;class loader&lt;/a&gt;. It will try to instantiate all &lt;a href=&quot;jdk/dynalink/linker/guardingdynamiclinkerexporter&quot;&gt;&lt;code&gt;GuardingDynamicLinkerExporter&lt;/code&gt;&lt;/a&gt; classes visible to that class loader and compose the linkers they provide into the &lt;code&gt;DynamicLinker&lt;/code&gt; it creates. This allows for interoperability between languages: if you have two language runtimes A and B deployed in your JVM and they export their linkers through the above mechanism, language runtime A will have a language-specific linker instance from B and vice versa inside their &lt;code&gt;DynamicLinker&lt;/code&gt; objects. This means that if an object from language runtime B gets passed to code from language runtime A, the linker from B will get a chance to link the call site in A when it encounters the object from B.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a5025f75a24cc7c2641a1007fe78fed4557bb80a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;EnumControl&lt;/code&gt; provides control over a set of discrete possible values, each represented by an object.</source>
          <target state="translated">A &lt;code&gt;EnumControl&lt;/code&gt; は離散可能な値、オブジェクトによって表されるそれぞれのセットのコントロールを提供します。</target>
        </trans-unit>
        <trans-unit id="5b18550a37715d871995df89cc05801612c8dd56" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;EnumControl&lt;/code&gt; provides control over a set of discrete possible values, each represented by an object. In a graphical user interface, such a control might be represented by a set of buttons, each of which chooses one value or setting. For example, a reverb control might provide several preset reverberation settings, instead of providing continuously adjustable parameters of the sort that would be represented by &lt;code&gt;&lt;a href=&quot;floatcontrol&quot;&gt;&lt;code&gt;FloatControl&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; objects.</source>
          <target state="translated">A &lt;code&gt;EnumControl&lt;/code&gt; は離散可能な値、オブジェクトによって表されるそれぞれのセットのコントロールを提供します。グラフィカルユーザーインターフェイスでは、このようなコントロールは、それぞれが1つの値または設定を選択するボタンのセットで表される場合があります。たとえば、リバーブコントロールは、 &lt;code&gt;&lt;a href=&quot;floatcontrol&quot;&gt;&lt;code&gt;FloatControl&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; オブジェクトによって表される種類の継続的に調整可能なパラメーターを提供する代わりに、いくつかの事前設定されたリバーブ設定を提供する場合があります。</target>
        </trans-unit>
        <trans-unit id="4202cdf8de4262946a959135d355ce779c084535" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FONT_CHOOSER&lt;/code&gt; is a component that lets the user pick various attributes for fonts.</source>
          <target state="translated">A &lt;code&gt;FONT_CHOOSER&lt;/code&gt; は、ユーザーがフォントの各種属性を選択できるようにするコンポーネントです。</target>
        </trans-unit>
        <trans-unit id="94ff7967cdf12cd25b3783588570d481ded45c74" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Field&lt;/code&gt; permits widening conversions to occur during a get or set access operation, but throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if a narrowing conversion would occur.</source>
          <target state="translated">A &lt;code&gt;Field&lt;/code&gt; 取得または設定アクセス動作中に発生するように拡大変換を可能にするが、スロー &lt;code&gt;IllegalArgumentException&lt;/code&gt; 縮小変換が発生する場合。</target>
        </trans-unit>
        <trans-unit id="1328055d250f23371e05fcc65298d035aa264889" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Field&lt;/code&gt; provides information about, and dynamic access to, a single field of a class or an interface.</source>
          <target state="translated">A &lt;code&gt;Field&lt;/code&gt; に関する情報、及びへの動的アクセス、クラスまたはインタフェースの単一フィールドを提供します。</target>
        </trans-unit>
        <trans-unit id="3d84578fa873dd7a44de9272ca71dfa5a8a00812" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Field&lt;/code&gt; provides information about, and dynamic access to, a single field of a class or an interface. The reflected field may be a class (static) field or an instance field.</source>
          <target state="translated">A &lt;code&gt;Field&lt;/code&gt; に関する情報、及びへの動的アクセス、クラスまたはインタフェースの単一フィールドを提供します。反射フィールドは、クラス（静的）フィールドまたはインスタンスフィールドの場合があります。</target>
        </trans-unit>
        <trans-unit id="be851e9dcdb2a6a22642fa0e075fd2d060b49379" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileChannel&lt;/code&gt; is created by invoking one of its static &lt;a href=&quot;filechannel#open(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute...)&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; methods, or by invoking the &lt;code&gt;
 getChannel&lt;/code&gt; method of a &lt;a href=&quot;../../io/fileinputstream&quot;&gt;&lt;code&gt;FileInputStream&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../io/fileoutputstream&quot;&gt;&lt;code&gt;FileOutputStream&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../../io/randomaccessfile&quot;&gt;&lt;code&gt;RandomAccessFile&lt;/code&gt;&lt;/a&gt; to return a file channel connected to the same underlying file as the &lt;a href=&quot;../../io/package-summary&quot;&gt;&lt;code&gt;java.io&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">A &lt;code&gt;FileChannel&lt;/code&gt; その静的のいずれか呼び出すことによって作成された&lt;a href=&quot;filechannel#open(java.nio.file.Path,java.util.Set,java.nio.file.attribute.FileAttribute...)&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;な方法を、または呼び出すことによって、 &lt;code&gt; getChannel&lt;/code&gt; 方法&lt;a href=&quot;../../io/fileinputstream&quot;&gt; &lt;code&gt;FileInputStream&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../io/fileoutputstream&quot;&gt; &lt;code&gt;FileOutputStream&lt;/code&gt; &lt;/a&gt;、又は&lt;a href=&quot;../../io/randomaccessfile&quot;&gt; &lt;code&gt;RandomAccessFile&lt;/code&gt; &lt;/a&gt;と同じ基本的なファイルに接続されたファイルチャネル返す&lt;a href=&quot;../../io/package-summary&quot;&gt; &lt;code&gt;java.io&lt;/code&gt; の&lt;/a&gt;クラス。</target>
        </trans-unit>
        <trans-unit id="3c6a8b1955dd096b5a0b1fc4b44adee3b3e60c93" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileChannel&lt;/code&gt; is created by invoking one of its static &lt;a href=&quot;filechannel#open-java.nio.file.Path-java.util.Set-java.nio.file.attribute.FileAttribute...-&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; methods, or by invoking the &lt;code&gt;getChannel&lt;/code&gt; method of a &lt;a href=&quot;../../io/fileinputstream&quot;&gt;&lt;code&gt;FileInputStream&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../../io/fileoutputstream&quot;&gt;&lt;code&gt;FileOutputStream&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../../io/randomaccessfile&quot;&gt;&lt;code&gt;RandomAccessFile&lt;/code&gt;&lt;/a&gt; to return a file channel connected to the same underlying file as the &lt;code&gt;&lt;a href=&quot;../../io/package-summary&quot;&gt;&lt;code&gt;java.io&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; class.</source>
          <target state="translated">A &lt;code&gt;FileChannel&lt;/code&gt; その静的のいずれか呼び出すことによって作成された&lt;a href=&quot;filechannel#open-java.nio.file.Path-java.util.Set-java.nio.file.attribute.FileAttribute...-&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;な方法を、または呼び出すことによって、 &lt;code&gt;getChannel&lt;/code&gt; 方法&lt;a href=&quot;../../io/fileinputstream&quot;&gt; &lt;code&gt;FileInputStream&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../../io/fileoutputstream&quot;&gt; &lt;code&gt;FileOutputStream&lt;/code&gt; &lt;/a&gt;、又は&lt;a href=&quot;../../io/randomaccessfile&quot;&gt; &lt;code&gt;RandomAccessFile&lt;/code&gt; &lt;/a&gt;と同じ基本的なファイルに接続されたファイルチャネル返す &lt;code&gt;&lt;a href=&quot;../../io/package-summary&quot;&gt;&lt;code&gt;java.io&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; のクラス。</target>
        </trans-unit>
        <trans-unit id="482f3e78c3eaddf0f4f51de9acc9f719f77190c8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileFilter&lt;/code&gt; can be set on a &lt;code&gt;JFileChooser&lt;/code&gt; to keep unwanted files from appearing in the directory listing. For an example implementation of a simple file filter, see &lt;code&gt;&lt;i&gt;yourJDK&lt;/i&gt;/demo/jfc/FileChooserDemo/ExampleFileFilter.java&lt;/code&gt;. For more information and examples see &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html&quot;&gt;How to Use File Choosers&lt;/a&gt;, a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.</source>
          <target state="translated">A &lt;code&gt;FileFilter&lt;/code&gt; のは、上で設定することができ &lt;code&gt;JFileChooser&lt;/code&gt; のディレクトリのリストに表示され、不要なファイルを保持します。単純なファイルフィルターの実装例については、 &lt;code&gt;&lt;i&gt;yourJDK&lt;/i&gt;/demo/jfc/FileChooserDemo/ExampleFileFilter.java&lt;/code&gt; を参照してください。詳細と例については&lt;em&gt;、Javaチュートリアルの&lt;/em&gt;セクションにある&lt;em&gt;「&lt;/em&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html&quot;&gt;ファイルチューザの使用方法」を&lt;/a&gt;参照してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a88f27beedc463dd736d4346d67c27ad6ead611b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileFilter&lt;/code&gt; can be set on a &lt;code&gt;JFileChooser&lt;/code&gt; to keep unwanted files from appearing in the directory listing. For an example implementation of a simple file filter, see &lt;code&gt;&lt;i&gt;yourJDK&lt;/i&gt;/demo/jfc/FileChooserDemo/ExampleFileFilter.java&lt;/code&gt;. For more information and examples see &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/uiswing/components/filechooser.html&quot;&gt;How to Use File Choosers&lt;/a&gt;, a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d7dbe17be044a047cac0a60d497bd3d6df3636b7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileInputStream&lt;/code&gt; obtains input bytes from a file in a file system.</source>
          <target state="translated">A &lt;code&gt;FileInputStream&lt;/code&gt; を取得する入力は、ファイルシステム内のファイルからのバイト。</target>
        </trans-unit>
        <trans-unit id="1796330eede2865aae5adce7c54631168f35ad9e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileInputStream&lt;/code&gt; obtains input bytes from a file in a file system. What files are available depends on the host environment.</source>
          <target state="translated">A &lt;code&gt;FileInputStream&lt;/code&gt; を取得する入力は、ファイルシステム内のファイルからのバイト。使用可能なファイルは、ホスト環境によって異なります。</target>
        </trans-unit>
        <trans-unit id="214a2c8beeebdce1896d0edcb65579291e981912" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileSystem&lt;/code&gt; can provide read-only or read-write access to the file system. Whether or not a file system provides read-only access is established when the &lt;code&gt;FileSystem&lt;/code&gt; is created and can be tested by invoking its &lt;a href=&quot;#isReadOnly()&quot;&gt;&lt;code&gt;isReadOnly&lt;/code&gt;&lt;/a&gt; method. Attempts to write to file stores by means of an object associated with a read-only file system throws &lt;a href=&quot;readonlyfilesystemexception&quot;&gt;&lt;code&gt;ReadOnlyFileSystemException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;FileSystem&lt;/code&gt; 、ファイルシステムへの読み取り専用または読み取り書き込みアクセスを提供することができます。かどうかは、ファイルシステムが読み取り専用アクセスをするときに確立されてい &lt;code&gt;FileSystem&lt;/code&gt; 作成され、その呼び出すことによってテストすることができ&lt;a href=&quot;#isReadOnly()&quot;&gt; &lt;code&gt;isReadOnly&lt;/code&gt; &lt;/a&gt;方法を。&lt;a href=&quot;readonlyfilesystemexception&quot;&gt; &lt;code&gt;ReadOnlyFileSystemException&lt;/code&gt; &lt;/a&gt;ファイルシステムに関連付けられたオブジェクトを使用してファイルストアに書き込もうとすると、ReadOnlyFileSystemExceptionがスローされます。</target>
        </trans-unit>
        <trans-unit id="2632d4be74b6a4625d839cf5ae4e5976f681131b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileSystem&lt;/code&gt; can provide read-only or read-write access to the file system. Whether or not a file system provides read-only access is established when the &lt;code&gt;FileSystem&lt;/code&gt; is created and can be tested by invoking its &lt;a href=&quot;filesystem#isReadOnly--&quot;&gt;&lt;code&gt;isReadOnly&lt;/code&gt;&lt;/a&gt; method. Attempts to write to file stores by means of an object associated with a read-only file system throws &lt;a href=&quot;readonlyfilesystemexception&quot;&gt;&lt;code&gt;ReadOnlyFileSystemException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;FileSystem&lt;/code&gt; 、ファイルシステムへの読み取り専用または読み取り書き込みアクセスを提供することができます。ファイルシステムが読み取り専用アクセスを提供するかどうかは、 &lt;code&gt;FileSystem&lt;/code&gt; の作成時に確立され、その&lt;a href=&quot;filesystem#isReadOnly--&quot;&gt; &lt;code&gt;isReadOnly&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによってテストできます。&lt;a href=&quot;readonlyfilesystemexception&quot;&gt; &lt;code&gt;ReadOnlyFileSystemException&lt;/code&gt; &lt;/a&gt;ファイルシステムに関連付けられたオブジェクトを使用してファイルストアに書き込もうとすると、ReadOnlyFileSystemExceptionがスローされます。</target>
        </trans-unit>
        <trans-unit id="c7c3fb79d465914ca1df5911c7a10492bdbb55ad" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileSystem&lt;/code&gt; implementation supports the &quot;&lt;code&gt;glob&lt;/code&gt;&quot; and &quot;&lt;code&gt;regex&lt;/code&gt;&quot; syntaxes, and may support others. The value of the syntax component is compared without regard to case.</source>
          <target state="translated">A &lt;code&gt;FileSystem&lt;/code&gt; 実装は、「サポート &lt;code&gt;glob&lt;/code&gt; 」と「 &lt;code&gt;regex&lt;/code&gt; 」の構文を、そして他の人をサポートすることができます。構文コンポーネントの値は、大文字小文字を区別せずに比較されます。</target>
        </trans-unit>
        <trans-unit id="679add4b88b56d5af3c24c1ad0ab7cf79c45d079" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FileTime&lt;/code&gt; is primarily intended to represent the value of a file's time stamp. Where used to represent</source>
          <target state="translated">A &lt;code&gt;FileTime&lt;/code&gt; 、主に、ファイルのタイムスタンプの値を表すことが意図されています。を表すために使用される場所</target>
        </trans-unit>
        <trans-unit id="3788c0fcb354158afae8b7a311ab4d1c461b74ab" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FilterInputStream&lt;/code&gt; contains some other input stream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality.</source>
          <target state="translated">A &lt;code&gt;FilterInputStream&lt;/code&gt; は、おそらく途中でデータを変換または追加の機能を提供する、それはデータの基本的なソースとして使用する他のいくつかの入力ストリームを、含んでいます。</target>
        </trans-unit>
        <trans-unit id="7df34daede311fcfe7b9123ab498e1afb22440cb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FilterInputStream&lt;/code&gt; contains some other input stream, which it uses as its basic source of data, possibly transforming the data along the way or providing additional functionality. The class &lt;code&gt;FilterInputStream&lt;/code&gt; itself simply overrides all methods of &lt;code&gt;InputStream&lt;/code&gt; with versions that pass all requests to the contained input stream. Subclasses of &lt;code&gt;FilterInputStream&lt;/code&gt; may further override some of these methods and may also provide additional methods and fields.</source>
          <target state="translated">A &lt;code&gt;FilterInputStream&lt;/code&gt; は、おそらく途中でデータを変換または追加の機能を提供する、それはデータの基本的なソースとして使用する他のいくつかの入力ストリームを、含んでいます。 &lt;code&gt;FilterInputStream&lt;/code&gt; クラス自体は、含まれている入力ストリームにすべてのリクエストを渡すバージョンで &lt;code&gt;InputStream&lt;/code&gt; のすべてのメソッドを単にオーバーライドします。 &lt;code&gt;FilterInputStream&lt;/code&gt; のサブクラスは、これらのメソッドの一部をさらにオーバーライドし、追加のメソッドとフィールドを提供する場合もあります。</target>
        </trans-unit>
        <trans-unit id="0776d262b9a240668408d943063b8980215c05ce" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FloatControl&lt;/code&gt; object provides control over a range of floating-point values.</source>
          <target state="translated">&lt;code&gt;FloatControl&lt;/code&gt; のオブジェクトは、浮動小数点値の範囲にわたって制御を提供します。</target>
        </trans-unit>
        <trans-unit id="b5bb40a4c17c7317b8919e259e3349beb9e44552" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FloatControl&lt;/code&gt; object provides control over a range of floating-point values. Float controls are often represented in graphical user interfaces by continuously adjustable objects such as sliders or rotary knobs. Concrete subclasses of &lt;code&gt;FloatControl&lt;/code&gt; implement controls, such as gain and pan, that affect a line's audio signal in some way that an application can manipulate. The &lt;a href=&quot;floatcontrol.type&quot;&gt;&lt;code&gt;FloatControl.Type&lt;/code&gt;&lt;/a&gt; inner class provides static instances of types that are used to identify some common kinds of float control.</source>
          <target state="translated">&lt;code&gt;FloatControl&lt;/code&gt; のオブジェクトは、浮動小数点値の範囲にわたって制御を提供します。フロートコントロールは、多くの場合、スライダーや回転ノブなどの継続的に調整可能なオブジェクトによってグラフィカルユーザーインターフェイスで表されます。 &lt;code&gt;FloatControl&lt;/code&gt; の具体的なサブクラスは、ゲインやパンなど、アプリケーションが操作できる何らかの方法でラインのオーディオ信号に影響を与えるコントロールを実装します。&lt;a href=&quot;floatcontrol.type&quot;&gt; &lt;code&gt;FloatControl.Type&lt;/code&gt; &lt;/a&gt;内部クラスは、フロート制御のいくつかの一般的な種類を識別するために使用されるタイプの静的インスタンスを提供します。</target>
        </trans-unit>
        <trans-unit id="165ea81b3de0ff3435f43bdd01ecce2114051843" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FloatControl&lt;/code&gt; object provides control over a range of floating-point values. Float controls are often represented in graphical user interfaces by continuously adjustable objects such as sliders or rotary knobs. Concrete subclasses of &lt;code&gt;FloatControl&lt;/code&gt; implement controls, such as gain and pan, that affect a line's audio signal in some way that an application can manipulate. The &lt;code&gt;&lt;a href=&quot;floatcontrol.type&quot;&gt;&lt;code&gt;FloatControl.Type&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; inner class provides static instances of types that are used to identify some common kinds of float control.</source>
          <target state="translated">&lt;code&gt;FloatControl&lt;/code&gt; のオブジェクトは、浮動小数点値の範囲にわたって制御を提供します。フロートコントロールは、多くの場合、スライダーや回転ノブなどの継続的に調整可能なオブジェクトによってグラフィカルユーザーインターフェイスで表されます。 &lt;code&gt;FloatControl&lt;/code&gt; 実装の具体的なサブクラスは、ゲインやパンなど、アプリケーションが操作できる何らかの方法でラインのオーディオ信号に影響を与えるコントロールを実装します。 &lt;code&gt;&lt;a href=&quot;floatcontrol.type&quot;&gt;&lt;code&gt;FloatControl.Type&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 内部クラスは、フロート制御のいくつかの一般的な種類を識別するために使用されるタイプの静的インスタンスを提供します。</target>
        </trans-unit>
        <trans-unit id="944eb4dbe083d626573fb9205a6f80a2ef305e79" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Flushable&lt;/code&gt; is a destination of data that can be flushed.</source>
          <target state="translated">A &lt;code&gt;Flushable&lt;/code&gt; フラッシュすることができるデータの宛先です。</target>
        </trans-unit>
        <trans-unit id="d537dc81750c6b0be163b1df3ae5f7fcb7f1acc2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Flushable&lt;/code&gt; is a destination of data that can be flushed. The flush method is invoked to write any buffered output to the underlying stream.</source>
          <target state="translated">A &lt;code&gt;Flushable&lt;/code&gt; フラッシュすることができるデータの宛先です。flushメソッドが呼び出されて、バッファリングされた出力が基になるストリームに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="f809fd3c068420eb8d546ff15622bd985c9d00bd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FocusListener&lt;/code&gt; object is registered via &lt;code&gt;addFocusListener&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FocusListener&lt;/code&gt; オブジェクトがによって登録され &lt;code&gt;addFocusListener&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aaa0f38c6cc271c8a7ac9b6a9808bb1a14f8d02c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Font&lt;/code&gt; can have many faces, such as heavy, medium, oblique, gothic and regular. All of these faces have similar typographic design.</source>
          <target state="translated">A &lt;code&gt;Font&lt;/code&gt; 、斜めゴシックおよび通常そのような重い、媒体として多くの面を、有することができます。これらの顔はすべて、同様の活版印刷デザインを持っています。</target>
        </trans-unit>
        <trans-unit id="7091d201aaf5fd42bc40f0165c256fbb7c1d55b9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ForkJoinPool&lt;/code&gt; differs from other kinds of &lt;a href=&quot;executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; mainly by virtue of employing &lt;em&gt;work-stealing&lt;/em&gt;: all threads in the pool attempt to find and execute tasks submitted to the pool and/or created by other active tasks (eventually blocking waiting for work if none exist). This enables efficient processing when most tasks spawn other subtasks (as do most &lt;code&gt;ForkJoinTask&lt;/code&gt;s), as well as when many small tasks are submitted to the pool from external clients. Especially when setting &lt;em&gt;asyncMode&lt;/em&gt; to true in constructors, &lt;code&gt;
 ForkJoinPool&lt;/code&gt;s may also be appropriate for use with event-style tasks that are never joined. All worker threads are initialized with &lt;a href=&quot;../../lang/thread#isDaemon()&quot;&gt;&lt;code&gt;Thread.isDaemon()&lt;/code&gt;&lt;/a&gt; set &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;ForkJoinPool&lt;/code&gt; の他の種類から異なる&lt;a href=&quot;executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; の&lt;/a&gt;主として使用のおかげで、&lt;em&gt;ワークスチールを&lt;/em&gt;：タスクを見つけて実行するプールの試みで、すべてのスレッドがプールに提出及び/又は他のアクティブなタスク（結局なし存在する場合は作業を待っているブロック）によって作成されました。これにより、ほとんどのタスクが他のサブタスクを生成する場合（ほとんどの &lt;code&gt;ForkJoinTask&lt;/code&gt; と同様）、および多くの小さなタスクが外部クライアントからプールに送信される場合に、効率的な処理が可能になります。特にコンストラクターで&lt;em&gt;asyncMode&lt;/em&gt;をtrueに設定する場合、 &lt;code&gt; ForkJoinPool&lt;/code&gt; は、決して結合されないイベントスタイルのタスクでの使用にも適している場合があります。すべてのワーカースレッドは&lt;a href=&quot;../../lang/thread#isDaemon()&quot;&gt; &lt;code&gt;Thread.isDaemon()&lt;/code&gt; で&lt;/a&gt;初期化されます &lt;code&gt;true&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="a8d18a90b5521be7acf1afb0796d715eb20c7f79" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ForkJoinPool&lt;/code&gt; differs from other kinds of &lt;a href=&quot;executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; mainly by virtue of employing &lt;em&gt;work-stealing&lt;/em&gt;: all threads in the pool attempt to find and execute tasks submitted to the pool and/or created by other active tasks (eventually blocking waiting for work if none exist). This enables efficient processing when most tasks spawn other subtasks (as do most &lt;code&gt;ForkJoinTask&lt;/code&gt;s), as well as when many small tasks are submitted to the pool from external clients. Especially when setting &lt;em&gt;asyncMode&lt;/em&gt; to true in constructors, &lt;code&gt;ForkJoinPool&lt;/code&gt;s may also be appropriate for use with event-style tasks that are never joined.</source>
          <target state="translated">A &lt;code&gt;ForkJoinPool&lt;/code&gt; の他の種類から異なる&lt;a href=&quot;executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; の&lt;/a&gt;主として使用のおかげで、&lt;em&gt;ワークスチールを&lt;/em&gt;：タスクを見つけて実行するプールの試みで、すべてのスレッドがプールに提出及び/又は他のアクティブなタスク（結局なし存在する場合は作業を待っているブロック）によって作成されました。これにより、ほとんどのタスクが他のサブタスクを生成するとき（ほとんどの &lt;code&gt;ForkJoinTask&lt;/code&gt; と同様）、および多くの小さなタスクが外部クライアントからプールに送信されるときに、効率的な処理が可能になります。特に、コンストラクターで&lt;em&gt;asyncMode&lt;/em&gt;をtrue に設定する場合、 &lt;code&gt;ForkJoinPool&lt;/code&gt; は、結合されないイベントスタイルのタスクでの使用にも適している場合があります。</target>
        </trans-unit>
        <trans-unit id="0e3dce3428616a5b7729adb9311035be829ff79b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ForkJoinTask&lt;/code&gt; is a lightweight form of &lt;a href=&quot;future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;. The efficiency of &lt;code&gt;ForkJoinTask&lt;/code&gt;s stems from a set of restrictions (that are only partially statically enforceable) reflecting their main use as computational tasks calculating pure functions or operating on purely isolated objects. The primary coordination mechanisms are &lt;a href=&quot;#fork()&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt;, that arranges asynchronous execution, and &lt;a href=&quot;#join()&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt;, that doesn't proceed until the task's result has been computed. Computations should ideally avoid &lt;code&gt;synchronized&lt;/code&gt; methods or blocks, and should minimize other blocking synchronization apart from joining other tasks or using synchronizers such as Phasers that are advertised to cooperate with fork/join scheduling. Subdividable tasks should also not perform blocking I/O, and should ideally access variables that are completely independent of those accessed by other running tasks. These guidelines are loosely enforced by not permitting checked exceptions such as &lt;code&gt;IOExceptions&lt;/code&gt; to be thrown. However, computations may still encounter unchecked exceptions, that are rethrown to callers attempting to join them. These exceptions may additionally include &lt;a href=&quot;rejectedexecutionexception&quot;&gt;&lt;code&gt;RejectedExecutionException&lt;/code&gt;&lt;/a&gt; stemming from internal resource exhaustion, such as failure to allocate internal task queues. Rethrown exceptions behave in the same way as regular exceptions, but, when possible, contain stack traces (as displayed for example using &lt;code&gt;ex.printStackTrace()&lt;/code&gt;) of both the thread that initiated the computation as well as the thread actually encountering the exception; minimally only the latter.</source>
          <target state="translated">A &lt;code&gt;ForkJoinTask&lt;/code&gt; は軽量形で&lt;a href=&quot;future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;ForkJoinTask&lt;/code&gt; の効率は、純粋関数を計算したり、純粋に分離されたオブジェクトを操作したりする計算タスクとしての主な用途を反映した一連の制限（部分的に静的に強制可能）に由来します。主要な調整メカニズムは、非同期実行を調整する&lt;a href=&quot;#fork()&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; &lt;/a&gt;と、タスクの結果が計算されるまで続行しない&lt;a href=&quot;#join()&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt;です。計算は理想的には &lt;code&gt;synchronized&lt;/code&gt; 避けるべきですメソッドまたはブロック。他のタスクに参加したり、フォーク/参加スケジューリングと連携するようにアドバタイズされたフェイザーなどのシンクロナイザーを使用したりする以外に、他のブロッキング同期を最小限に抑える必要があります。細分化可能なタスクもブロッキングI / Oを実行するべきではなく、理想的には、他の実行中のタスクによってアクセスされる変数から完全に独立した変数にアクセスする必要があります。これらのガイドラインは、 &lt;code&gt;IOExceptions&lt;/code&gt; などのチェックされた例外のスローを許可しないことによって大まかに実施されます。ただし、計算では、チェックされていない例外が発生する可能性があります。例外は、それらに参加しようとする呼び出し元に再スローされます。これらの例外には、&lt;a href=&quot;rejectedexecutionexception&quot;&gt; &lt;code&gt;RejectedExecutionException&lt;/code&gt; &lt;/a&gt;が追加で含まれる場合があります内部タスクキューの割り当ての失敗など、内部リソースの枯渇に起因します。再スローされた例外は通常の例外と同じように動作しますが、可能な場合は、計算を開始したスレッドと実際に例外が発生したスレッドの両方のスタックトレース（たとえば、 &lt;code&gt;ex.printStackTrace()&lt;/code&gt; を使用して表示）が含まれます。少なくとも後者のみ。</target>
        </trans-unit>
        <trans-unit id="9544e01c6b5af36520a8f8b6ebcc6596c68d9f35" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ForkJoinTask&lt;/code&gt; is a lightweight form of &lt;a href=&quot;future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt;. The efficiency of &lt;code&gt;ForkJoinTask&lt;/code&gt;s stems from a set of restrictions (that are only partially statically enforceable) reflecting their main use as computational tasks calculating pure functions or operating on purely isolated objects. The primary coordination mechanisms are &lt;a href=&quot;forkjointask#fork--&quot;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/a&gt;, that arranges asynchronous execution, and &lt;a href=&quot;forkjointask#join--&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt;, that doesn't proceed until the task's result has been computed. Computations should ideally avoid &lt;code&gt;synchronized&lt;/code&gt; methods or blocks, and should minimize other blocking synchronization apart from joining other tasks or using synchronizers such as Phasers that are advertised to cooperate with fork/join scheduling. Subdividable tasks should also not perform blocking I/O, and should ideally access variables that are completely independent of those accessed by other running tasks. These guidelines are loosely enforced by not permitting checked exceptions such as &lt;code&gt;IOExceptions&lt;/code&gt; to be thrown. However, computations may still encounter unchecked exceptions, that are rethrown to callers attempting to join them. These exceptions may additionally include &lt;a href=&quot;rejectedexecutionexception&quot;&gt;&lt;code&gt;RejectedExecutionException&lt;/code&gt;&lt;/a&gt; stemming from internal resource exhaustion, such as failure to allocate internal task queues. Rethrown exceptions behave in the same way as regular exceptions, but, when possible, contain stack traces (as displayed for example using &lt;code&gt;ex.printStackTrace()&lt;/code&gt;) of both the thread that initiated the computation as well as the thread actually encountering the exception; minimally only the latter.</source>
          <target state="translated">A &lt;code&gt;ForkJoinTask&lt;/code&gt; は軽量形で&lt;a href=&quot;future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;ForkJoinTask&lt;/code&gt; の効率は、純粋な関数を計算したり、純粋に分離されたオブジェクトを操作したりする計算タスクとしての主な使用法を反映する一連の制限（部分的に静的にのみ実施可能）に由来します。主な調整メカニズムは、非同期実行を調整する&lt;a href=&quot;forkjointask#fork--&quot;&gt; &lt;code&gt;fork()&lt;/code&gt; &lt;/a&gt;と、タスクの結果が計算されるまで進行しない&lt;a href=&quot;forkjointask#join--&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt;です。計算は理想的には &lt;code&gt;synchronized&lt;/code&gt; 避けるべきですメソッドまたはブロック。他のタスクへの参加や、フォーク/ジョインスケジューリングと連携するようにアドバタイズされるフェイザーなどのシンクロナイザーの使用は別として、他のブロッキング同期を最小限に抑える必要があります。分割可能なタスクもブロッキングI / Oを実行するべきではなく、他の実行中のタスクがアクセスする変数から完全に独立した変数にアクセスするのが理想的です。これらのガイドラインは、 &lt;code&gt;IOExceptions&lt;/code&gt; などのチェックされた例外のスローを許可しないことにより、大まかに適用されます。ただし、計算では未チェックの例外が引き続き発生する可能性があり、それらはそれらを結合しようとする呼び出し元に再スローされます。これらの例外には、&lt;a href=&quot;rejectedexecutionexception&quot;&gt; &lt;code&gt;RejectedExecutionException&lt;/code&gt; &lt;/a&gt;がさらに含まれる場合があります。内部タスクキューの割り当ての失敗など、内部リソースの枯渇に起因します。再スローされた例外は通常の例外と同じように動作しますが、可能な場合は、計算を開始したスレッドと、実際に例外が発生したスレッドの両方のスタックトレース（ &lt;code&gt;ex.printStackTrace()&lt;/code&gt; を使用して表示される）が含まれます。少なくとも後者のみ。</target>
        </trans-unit>
        <trans-unit id="14da08ff70bb1beab693903db89e6bbfa739294b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Frame&lt;/code&gt; is a top-level window with a title and a border.</source>
          <target state="translated">&lt;code&gt;Frame&lt;/code&gt; 、タイトルとボーダを持つトップレベルウィンドウです。</target>
        </trans-unit>
        <trans-unit id="59e4537d03997fc8e4572b5632f13f3e8f86fa81" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Frame&lt;/code&gt; object, for example, has a top inset that corresponds to the height of the frame's title bar.</source>
          <target state="translated">&lt;code&gt;Frame&lt;/code&gt; オブジェクトは、例えば、フレームのタイトルバーの高さに対応することをトップインセットを持っています。</target>
        </trans-unit>
        <trans-unit id="aaed9c1c95e36e578332ed99960bdc34b464e2c1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Future&lt;/code&gt; object representing the pending result</source>
          <target state="translated">&lt;code&gt;Future&lt;/code&gt; 保留中の結果を表すオブジェクト</target>
        </trans-unit>
        <trans-unit id="e3c738535226d76fc03962a22432b614701ce29c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Future&lt;/code&gt; represents the result of an asynchronous computation.</source>
          <target state="translated">A &lt;code&gt;Future&lt;/code&gt; 非同期計算の結果を表します。</target>
        </trans-unit>
        <trans-unit id="eba862211d7584251d0b7d0c2a6de4b35930cfa6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Future&lt;/code&gt; represents the result of an asynchronous computation. Methods are provided to check if the computation is complete, to wait for its completion, and to retrieve the result of the computation. The result can only be retrieved using method &lt;code&gt;get&lt;/code&gt; when the computation has completed, blocking if necessary until it is ready. Cancellation is performed by the &lt;code&gt;cancel&lt;/code&gt; method. Additional methods are provided to determine if the task completed normally or was cancelled. Once a computation has completed, the computation cannot be cancelled. If you would like to use a &lt;code&gt;Future&lt;/code&gt; for the sake of cancellability but not provide a usable result, you can declare types of the form &lt;code&gt;Future&amp;lt;?&amp;gt;&lt;/code&gt; and return &lt;code&gt;null&lt;/code&gt; as a result of the underlying task.</source>
          <target state="translated">A &lt;code&gt;Future&lt;/code&gt; 非同期計算の結果を表します。計算が完了したかどうかを確認し、その完了を待機し、計算の結果を取得するためのメソッドが提供されています。結果は、計算が完了したときにのみ &lt;code&gt;get&lt;/code&gt; メソッドを使用して取得でき、必要に応じて準備ができるまでブロックされます。キャンセルは &lt;code&gt;cancel&lt;/code&gt; メソッドで行います。タスクが正常に完了したかキャンセルされたかを判断するための追加のメソッドが提供されています。計算が完了すると、計算をキャンセルすることはできません。キャンセル可能性のために &lt;code&gt;Future&lt;/code&gt; を使用したいが、使用可能な結果を​​提供したくない場合は、 &lt;code&gt;Future&amp;lt;?&amp;gt;&lt;/code&gt; 形式の型を宣言して &lt;code&gt;null&lt;/code&gt; を返すことができます。 基になるタスクの結果として。</target>
        </trans-unit>
        <trans-unit id="f9bf9f3ae9d9dc18349e070a2be923bb4c83d53c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;FutureTask&lt;/code&gt; can be used to wrap a &lt;a href=&quot;callable&quot;&gt;&lt;code&gt;Callable&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../../lang/runnable&quot;&gt;&lt;code&gt;Runnable&lt;/code&gt;&lt;/a&gt; object. Because &lt;code&gt;FutureTask&lt;/code&gt; implements &lt;code&gt;Runnable&lt;/code&gt;, a &lt;code&gt;FutureTask&lt;/code&gt; can be submitted to an &lt;a href=&quot;executor&quot;&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/a&gt; for execution.</source>
          <target state="translated">A &lt;code&gt;FutureTask&lt;/code&gt; をラップするために使用することができます&lt;a href=&quot;callable&quot;&gt; &lt;code&gt;Callable&lt;/code&gt; &lt;/a&gt;か&lt;a href=&quot;../../lang/runnable&quot;&gt; &lt;code&gt;Runnable&lt;/code&gt; &lt;/a&gt;オブジェクトを。 &lt;code&gt;FutureTask&lt;/code&gt; は &lt;code&gt;Runnable&lt;/code&gt; を実装しているため、 &lt;code&gt;FutureTask&lt;/code&gt; を&lt;a href=&quot;executor&quot;&gt; &lt;code&gt;Executor&lt;/code&gt; &lt;/a&gt;に送信して実行できます。</target>
        </trans-unit>
        <trans-unit id="e67d966c0d13366c153ce5f0e757c6dac3fdb0dd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;GROUP_BOX&lt;/code&gt; is a simple container that contains a border around it and contains components inside it.</source>
          <target state="translated">A &lt;code&gt;GROUP_BOX&lt;/code&gt; は、その周りに境界線が含まれており、その内部の部品が含まれている単純なコンテナです。</target>
        </trans-unit>
        <trans-unit id="b15d7f012da980ff804256f43a1e764ab575fa4d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;GaugeMonitor&lt;/code&gt; can operate in &lt;em&gt;difference mode&lt;/em&gt;. In this mode, the value compared against the high and low thresholds is the difference between two successive observations of an attribute.</source>
          <target state="translated">A &lt;code&gt;GaugeMonitor&lt;/code&gt; はで動作することができ&lt;em&gt;差分モード&lt;/em&gt;。このモードでは、高しきい値と低しきい値に対して比較される値は、属性の2つの連続する観測間の差です。</target>
        </trans-unit>
        <trans-unit id="808059b6c45e84ba504c80b1434f13dc3966a887" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;GlyphVector&lt;/code&gt; is associated with exactly one &lt;code&gt;Font&lt;/code&gt;, and can provide data useful only in relation to this &lt;code&gt;Font&lt;/code&gt;. In addition, metrics obtained from a &lt;code&gt;GlyphVector&lt;/code&gt; are not generally geometrically scalable since the pixelization and spacing are dependent on grid-fitting algorithms within a &lt;code&gt;Font&lt;/code&gt;. To facilitate accurate measurement of a &lt;code&gt;GlyphVector&lt;/code&gt; and its component glyphs, you must specify a scaling transform, anti-alias mode, and fractional metrics mode when creating the &lt;code&gt;GlyphVector&lt;/code&gt;. These characteristics can be derived from the destination device.</source>
          <target state="translated">A &lt;code&gt;GlyphVector&lt;/code&gt; のは、正確に1つに関連付けられる &lt;code&gt;Font&lt;/code&gt; 、およびのみに関連して有用なデータを提供することができる &lt;code&gt;Font&lt;/code&gt; 。さらに、 &lt;code&gt;GlyphVector&lt;/code&gt; から取得されたメトリックは、ピクセル化と間隔が &lt;code&gt;Font&lt;/code&gt; 内のグリッドフィッティングアルゴリズムに依存しているため、一般に幾何学的にスケーラブルではありません。正確な測定を容易にするために &lt;code&gt;GlyphVector&lt;/code&gt; の作成時に、そのコンポーネントのグリフを、あなたが変換スケーリングを指定する必要があり、アンチエイリアスモード、および部分メトリックスモード &lt;code&gt;GlyphVector&lt;/code&gt; のを。これらの特性は、宛先デバイスから取得できます。</target>
        </trans-unit>
        <trans-unit id="d09bf768aea31ab1ff2d6764b03dea110b3f5b8c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;GlyphVector&lt;/code&gt; object is a collection of glyphs containing geometric information for the placement of each glyph in a transformed coordinate space which corresponds to the device on which the &lt;code&gt;GlyphVector&lt;/code&gt; is ultimately displayed.</source>
          <target state="translated">A &lt;code&gt;GlyphVector&lt;/code&gt; 内のオブジェクトは、どのデバイスに対応する座標変換空間内の各グリフを配置するための幾何学的情報を含むグリフのコレクションです &lt;code&gt;GlyphVector&lt;/code&gt; のは、最終的に表示されます。</target>
        </trans-unit>
        <trans-unit id="31e9dc31ab34f86503d195faf50a6e4ec7657f5e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Graphics&lt;/code&gt; object encapsulates state information needed for the basic rendering operations that Java supports. This state information includes the following properties:</source>
          <target state="translated">&lt;code&gt;Graphics&lt;/code&gt; オブジェクトは、Javaがサポートすることを基本的なレンダリング操作に必要な状態情報をカプセル化します。この状態情報には、次のプロパティが含まれます。</target>
        </trans-unit>
        <trans-unit id="98b274d30d5b77844c6f808ebbde1cf0501f072a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Group&lt;/code&gt; that aligns and sizes it's children.</source>
          <target state="translated">子を揃えてサイズを調整する &lt;code&gt;Group&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d339eb16dcfd277b22e0fd6637e62527c1be2267" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Group&lt;/code&gt; that aligns and sizes it's children. &lt;code&gt;ParallelGroup&lt;/code&gt; aligns it's children in four possible ways: along the baseline, centered, anchored to the leading edge, or anchored to the trailing edge.</source>
          <target state="translated">子を揃えてサイズを調整する &lt;code&gt;Group&lt;/code&gt; 。 &lt;code&gt;ParallelGroup&lt;/code&gt; は、ベースラインに沿って、中央に配置する、前縁に固定する、または後縁に固定するという4つの方法で子を整列させます。</target>
        </trans-unit>
        <trans-unit id="74f684e8bcd3b6930a7334f03e093a8636931638" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Group&lt;/code&gt; that aligns and sizes its children.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5709c33a70780b4280ad70eef3ad9bed1110b77b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Group&lt;/code&gt; that aligns and sizes its children. &lt;code&gt;ParallelGroup&lt;/code&gt; aligns its children in four possible ways: along the baseline, centered, anchored to the leading edge, or anchored to the trailing edge.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="6aef82558bac354b2e4ffd244f025111979caa2d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Group&lt;/code&gt; that positions and sizes its elements sequentially, one after another.</source>
          <target state="translated">要素を順番に配置およびサイズ変更する &lt;code&gt;Group&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="549861e65bafbdd9423dea003b305d1390c7c0e8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Group&lt;/code&gt; that positions and sizes its elements sequentially, one after another. This class has no public constructor, use the &lt;code&gt;createSequentialGroup&lt;/code&gt; method to create one.</source>
          <target state="translated">要素を順番に配置およびサイズ変更する &lt;code&gt;Group&lt;/code&gt; 。このクラスにはパブリックコンストラクターがありません &lt;code&gt;createSequentialGroup&lt;/code&gt; メソッドを使用して作成してください。</target>
        </trans-unit>
        <trans-unit id="4cf3cffad5d242245950456e0383e3dadcec2d32" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Handler&lt;/code&gt; can be disabled by doing a &lt;code&gt;setLevel(Level.OFF)&lt;/code&gt; and can be re-enabled by doing a &lt;code&gt;setLevel&lt;/code&gt; with an appropriate level.</source>
          <target state="translated">A &lt;code&gt;Handler&lt;/code&gt; 実行して無効にすることができる &lt;code&gt;setLevel(Level.OFF)&lt;/code&gt; し、実行して再有効化することが可能 &lt;code&gt;setLevel&lt;/code&gt; 適切なレベルで。</target>
        </trans-unit>
        <trans-unit id="07d5ef0f1e1b73dbbd9fd210671b4d619d422fe6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Handler&lt;/code&gt; object takes log messages from a &lt;code&gt;Logger&lt;/code&gt; and exports them.</source>
          <target state="translated">&lt;code&gt;Handler&lt;/code&gt; オブジェクトからログメッセージを受け取り &lt;code&gt;Logger&lt;/code&gt; と輸出それら。</target>
        </trans-unit>
        <trans-unit id="71915fb4257dbd796d9ff81b937255b731d13b27" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Handler&lt;/code&gt; object takes log messages from a &lt;code&gt;Logger&lt;/code&gt; and exports them. It might for example, write them to a console or write them to a file, or send them to a network logging service, or forward them to an OS log, or whatever.</source>
          <target state="translated">&lt;code&gt;Handler&lt;/code&gt; オブジェクトからログメッセージを受け取り &lt;code&gt;Logger&lt;/code&gt; と輸出それら。たとえば、コンソールに書き込んだり、ファイルに書き込んだり、ネットワークログサービスに送信したり、OSログに転送したりできます。</target>
        </trans-unit>
        <trans-unit id="c043a5498a1c6516a85aefb7fe01c5496b8fa25d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;JButton&lt;/code&gt; is created with this as its label.</source>
          <target state="translated">A &lt;code&gt;JButton&lt;/code&gt; のは、これをラベルとして作成されます。</target>
        </trans-unit>
        <trans-unit id="94922e3df2645eec1358aa3bab9f5ed7b7d2f774" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;JDIPermission&lt;/code&gt; object contains a name (also referred to as a &quot;target name&quot;) but no actions list; you either have the named permission or you don't.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="585bfc49a751caf274ce7d5d4caa7a2becdd770b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;JLabel&lt;/code&gt; object can display either text, an image, or both. You can specify where in the label's display area the label's contents are aligned by setting the vertical and horizontal alignment. By default, labels are vertically centered in their display area. Text-only labels are leading edge aligned, by default; image-only labels are horizontally centered, by default.</source>
          <target state="translated">&lt;code&gt;JLabel&lt;/code&gt; ののオブジェクトのいずれかのテキスト、イメージ、またはその両方を表示することができます。垂直方向と水平方向の配置を設定することにより、ラベルの表示領域のどこにラベルの内容を配置するかを指定できます。デフォルトでは、ラベルは表示領域の垂直方向の中央に配置されます。デフォルトでは、テキストのみのラベルは前縁に揃えられます。デフォルトでは、画像のみのラベルは水平方向の中央に配置されます。</target>
        </trans-unit>
        <trans-unit id="bcd53b6c411732736c4dd4e1ccee842e3483ddbf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;JSpinner&lt;/code&gt; has a single child component that's responsible for displaying and potentially changing the current element or</source>
          <target state="translated">A &lt;code&gt;JSpinner&lt;/code&gt; のは、表示され、潜在的に現在の要素を変更したりする責任だ単一の子コンポーネントを持っています</target>
        </trans-unit>
        <trans-unit id="7f594d64f28fa2188d323f2d18ed647f3a7397d1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;JSpinner&lt;/code&gt;'s sequence value is defined by its &lt;code&gt;SpinnerModel&lt;/code&gt;. The &lt;code&gt;model&lt;/code&gt; can be specified as a constructor argument and changed with the &lt;code&gt;model&lt;/code&gt; property. &lt;code&gt;SpinnerModel&lt;/code&gt; classes for some common types are provided: &lt;code&gt;SpinnerListModel&lt;/code&gt;, &lt;code&gt;SpinnerNumberModel&lt;/code&gt;, and &lt;code&gt;SpinnerDateModel&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;JSpinner&lt;/code&gt; ののシーケンス値は、そのによって定義され &lt;code&gt;SpinnerModel&lt;/code&gt; です。 &lt;code&gt;model&lt;/code&gt; 、コンストラクタの引数として指定したとして変更することができる &lt;code&gt;model&lt;/code&gt; プロパティ。いくつかの一般的なタイプの &lt;code&gt;SpinnerModel&lt;/code&gt; クラスが提供されています： &lt;code&gt;SpinnerListModel&lt;/code&gt; 、 &lt;code&gt;SpinnerNumberModel&lt;/code&gt; 、および &lt;code&gt;SpinnerDateModel&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ac4a9fa2c90047df98b18998be1b5d8ef332c001" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;JTextArea&lt;/code&gt; is a multi-line area that displays plain text.</source>
          <target state="translated">A &lt;code&gt;JTextArea&lt;/code&gt; のは、ディスプレイ平文その複数行の領域です。</target>
        </trans-unit>
        <trans-unit id="599011ab5514bb26626ca3250a62c0f2cb431bdd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;JTextArea&lt;/code&gt; is a multi-line area that displays plain text. It is intended to be a lightweight component that provides source compatibility with the &lt;code&gt;java.awt.TextArea&lt;/code&gt; class where it can reasonably do so. You can find information and examples of using all the text components in &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/text.html&quot;&gt;Using Text Components&lt;/a&gt;, a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;</source>
          <target state="translated">A &lt;code&gt;JTextArea&lt;/code&gt; のは、ディスプレイ平文その複数行の領域です。これは、 &lt;code&gt;java.awt.TextArea&lt;/code&gt; クラスとのソース互換性を合理的に提供できる軽量コンポーネントであることが意図されています。すべてのテキストコンポーネントの使用に関する情報と例は、&lt;em&gt;Javaチュートリアルの&lt;/em&gt;セクションである&lt;em&gt;「&lt;/em&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/text.html&quot;&gt;テキストコンポーネントの使用」に&lt;/a&gt;あります&lt;em&gt;。&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="928f25e4942dc25fc7c37c641ebbf63544084df6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;JTextArea&lt;/code&gt; is a multi-line area that displays plain text. It is intended to be a lightweight component that provides source compatibility with the &lt;code&gt;java.awt.TextArea&lt;/code&gt; class where it can reasonably do so. You can find information and examples of using all the text components in &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/uiswing/components/text.html&quot;&gt;Using Text Components&lt;/a&gt;, a section in &lt;em&gt;The Java Tutorial.&lt;/em&gt;</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="fb49204534e5ab19b355fd6d0029faa105b21294" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;JWindow&lt;/code&gt; is a container that can be displayed anywhere on the user's desktop.</source>
          <target state="translated">A &lt;code&gt;JWindow&lt;/code&gt; のは、ユーザーのデスクトップ上のどこにでも表示できるコンテナです。</target>
        </trans-unit>
        <trans-unit id="201efb5597ecfce6e0c41db46b7e67710dad8174" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;JWindow&lt;/code&gt; is a container that can be displayed anywhere on the user's desktop. It does not have the title bar, window-management buttons, or other trimmings associated with a &lt;code&gt;JFrame&lt;/code&gt;, but it is still a &quot;first-class citizen&quot; of the user's desktop, and can exist anywhere on it.</source>
          <target state="translated">A &lt;code&gt;JWindow&lt;/code&gt; is a container that can be displayed anywhere on the user's desktop. It does not have the title bar, window-management buttons, or other trimmings associated with a &lt;code&gt;JFrame&lt;/code&gt; , but it is still a &quot;first-class citizen&quot; of the user's desktop, and can exist anywhere on it.</target>
        </trans-unit>
        <trans-unit id="dcc3b0d144365dbfa47f757b66cde02c77acc393" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KerberosKey&lt;/code&gt; object includes an EncryptionKey, a &lt;a href=&quot;kerberosprincipal&quot;&gt;&lt;code&gt;KerberosPrincipal&lt;/code&gt;&lt;/a&gt; as its owner, and the version number of the key.</source>
          <target state="translated">A &lt;code&gt;KerberosKey&lt;/code&gt; object includes an EncryptionKey, a &lt;a href=&quot;kerberosprincipal&quot;&gt; &lt;code&gt;KerberosPrincipal&lt;/code&gt; &lt;/a&gt; as its owner, and the version number of the key.</target>
        </trans-unit>
        <trans-unit id="d2f55fcdf4871d6cb95f44b20907b710610f1bde" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyInfo&lt;/code&gt; instance may be created by invoking one of the &lt;a href=&quot;keyinfofactory#newKeyInfo(java.util.List)&quot;&gt;&lt;code&gt;newKeyInfo&lt;/code&gt;&lt;/a&gt; methods of the &lt;a href=&quot;keyinfofactory&quot;&gt;&lt;code&gt;KeyInfoFactory&lt;/code&gt;&lt;/a&gt; class, and passing it a list of one or more &lt;code&gt;XMLStructure&lt;/code&gt;s and an optional id parameter; for example:</source>
          <target state="translated">A &lt;code&gt;KeyInfo&lt;/code&gt; instance may be created by invoking one of the &lt;a href=&quot;keyinfofactory#newKeyInfo(java.util.List)&quot;&gt; &lt;code&gt;newKeyInfo&lt;/code&gt; &lt;/a&gt; methods of the &lt;a href=&quot;keyinfofactory&quot;&gt; &lt;code&gt;KeyInfoFactory&lt;/code&gt; &lt;/a&gt; class, and passing it a list of one or more &lt;code&gt;XMLStructure&lt;/code&gt; s and an optional id parameter; for example:</target>
        </trans-unit>
        <trans-unit id="012f55a0c0584ff20c441c4b7b74fd9047d2e0c2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyListener&lt;/code&gt; object is registered via &lt;code&gt;addKeyListener&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;KeyListener&lt;/code&gt; object is registered via &lt;code&gt;addKeyListener&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2f3e571242e9629b5fa97ea40e492f8c6ef61590" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyName&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;keyinfofactory#newKeyName(java.lang.String)&quot;&gt;&lt;code&gt;newKeyName&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;keyinfofactory&quot;&gt;&lt;code&gt;KeyInfoFactory&lt;/code&gt;&lt;/a&gt; class, and passing it a &lt;code&gt;String&lt;/code&gt; representing the name of the key; for example:</source>
          <target state="translated">A &lt;code&gt;KeyName&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;keyinfofactory#newKeyName(java.lang.String)&quot;&gt; &lt;code&gt;newKeyName&lt;/code&gt; &lt;/a&gt; method of the &lt;a href=&quot;keyinfofactory&quot;&gt; &lt;code&gt;KeyInfoFactory&lt;/code&gt; &lt;/a&gt; class, and passing it a &lt;code&gt;String&lt;/code&gt; representing the name of the key; for example:</target>
        </trans-unit>
        <trans-unit id="51ffb2a6e4b862e2a4b8cb8c96de97af75952482" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeySelectorException&lt;/code&gt; can contain a cause: another throwable that caused this &lt;code&gt;KeySelectorException&lt;/code&gt; to get thrown.</source>
          <target state="translated">A &lt;code&gt;KeySelectorException&lt;/code&gt; can contain a cause: another throwable that caused this &lt;code&gt;KeySelectorException&lt;/code&gt; to get thrown.</target>
        </trans-unit>
        <trans-unit id="3fb57c28b4cbc4de67b9b837881a7c7b94627b9d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyStore&lt;/code&gt; entry that holds a &lt;code&gt;PrivateKey&lt;/code&gt; and corresponding certificate chain.</source>
          <target state="translated">&lt;code&gt;KeyStore&lt;/code&gt; 保持エントリ &lt;code&gt;PrivateKey&lt;/code&gt; と対応する証明書チェーン。</target>
        </trans-unit>
        <trans-unit id="837ba561898b391715044e3d771ab97e0f801556" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyStore&lt;/code&gt; entry that holds a &lt;code&gt;SecretKey&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;KeyStore&lt;/code&gt; 保持されているエントリ &lt;code&gt;SecretKey&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d4f9392633e9e6a7977e14aae24bfa123ae981d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyStore&lt;/code&gt; entry that holds a trusted &lt;code&gt;Certificate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;KeyStore&lt;/code&gt; 保持されているエントリは、信頼できる &lt;code&gt;Certificate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e3c291843cd8aff8aee9399a0e479b86bb3a9660" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyStore&lt;/code&gt; manages different types of entries. Each type of entry implements the &lt;code&gt;KeyStore.Entry&lt;/code&gt; interface. Three basic &lt;code&gt;KeyStore.Entry&lt;/code&gt; implementations are provided:</source>
          <target state="translated">A &lt;code&gt;KeyStore&lt;/code&gt; エントリの種類を管理します。エントリの各タイプは、 &lt;code&gt;KeyStore.Entry&lt;/code&gt; インターフェースを実装します。3つの基本的な &lt;code&gt;KeyStore.Entry&lt;/code&gt; 実装が提供されます。</target>
        </trans-unit>
        <trans-unit id="5f8acb0e477c2ee7ecefc6414095975eb0214211" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;KeyValue&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;keyinfofactory#newKeyValue(java.security.PublicKey)&quot;&gt;&lt;code&gt;newKeyValue&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;keyinfofactory&quot;&gt;&lt;code&gt;KeyInfoFactory&lt;/code&gt;&lt;/a&gt; class, and passing it a &lt;a href=&quot;../../../../../../java.base/java/security/publickey&quot;&gt;&lt;code&gt;PublicKey&lt;/code&gt;&lt;/a&gt; representing the value of the public key. Here is an example of creating a &lt;code&gt;KeyValue&lt;/code&gt; from a &lt;a href=&quot;../../../../../../java.base/java/security/interfaces/dsapublickey&quot;&gt;&lt;code&gt;DSAPublicKey&lt;/code&gt;&lt;/a&gt; of a &lt;a href=&quot;../../../../../../java.base/java/security/cert/certificate&quot;&gt;&lt;code&gt;Certificate&lt;/code&gt;&lt;/a&gt; stored in a &lt;a href=&quot;../../../../../../java.base/java/security/keystore&quot;&gt;&lt;code&gt;KeyStore&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">A &lt;code&gt;KeyValue&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;keyinfofactory#newKeyValue(java.security.PublicKey)&quot;&gt; &lt;code&gt;newKeyValue&lt;/code&gt; &lt;/a&gt; method of the &lt;a href=&quot;keyinfofactory&quot;&gt; &lt;code&gt;KeyInfoFactory&lt;/code&gt; &lt;/a&gt; class, and passing it a &lt;a href=&quot;../../../../../../java.base/java/security/publickey&quot;&gt; &lt;code&gt;PublicKey&lt;/code&gt; &lt;/a&gt; representing the value of the public key. Here is an example of creating a &lt;code&gt;KeyValue&lt;/code&gt; from a &lt;a href=&quot;../../../../../../java.base/java/security/interfaces/dsapublickey&quot;&gt; &lt;code&gt;DSAPublicKey&lt;/code&gt; &lt;/a&gt; of a &lt;a href=&quot;../../../../../../java.base/java/security/cert/certificate&quot;&gt; &lt;code&gt;Certificate&lt;/code&gt; &lt;/a&gt; stored in a &lt;a href=&quot;../../../../../../java.base/java/security/keystore&quot;&gt; &lt;code&gt;KeyStore&lt;/code&gt; &lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="c4b228d8e239a4731e8a03a244c7c1dd24b6042e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LSInput&lt;/code&gt; object describing the new input source, or &lt;code&gt;null&lt;/code&gt; to request that the parser open a regular URI connection to the resource.</source>
          <target state="translated">A &lt;code&gt;LSInput&lt;/code&gt; object describing the new input source, or &lt;code&gt;null&lt;/code&gt; to request that the parser open a regular URI connection to the resource.</target>
        </trans-unit>
        <trans-unit id="f76ee51cc37d3f506f1ad2927635397e5ab3b4d1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LSSerializer&lt;/code&gt; provides an API for serializing (writing) a DOM document out into XML.</source>
          <target state="translated">A &lt;code&gt;LSSerializer&lt;/code&gt; provides an API for serializing (writing) a DOM document out into XML.</target>
        </trans-unit>
        <trans-unit id="abe7fa5680110da7b6a61364c82151f1575a53b0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LSSerializer&lt;/code&gt; provides an API for serializing (writing) a DOM document out into XML. The XML data is written to a string or an output stream. Any changes or fixups made during the serialization affect only the serialized data. The &lt;code&gt;Document&lt;/code&gt; object and its children are never altered by the serialization operation.</source>
          <target state="translated">A &lt;code&gt;LSSerializer&lt;/code&gt; provides an API for serializing (writing) a DOM document out into XML. The XML data is written to a string or an output stream. Any changes or fixups made during the serialization affect only the serialized data. The &lt;code&gt;Document&lt;/code&gt; object and its children are never altered by the serialization operation.</target>
        </trans-unit>
        <trans-unit id="801222b890ab81b38019c7af42d4cb8c93476196" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Label&lt;/code&gt; object is a component for placing text in a container.</source>
          <target state="translated">A &lt;code&gt;Label&lt;/code&gt; object is a component for placing text in a container.</target>
        </trans-unit>
        <trans-unit id="123cbaa06c6b665f4a5fae9ccd069a82e908d0fe" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Label&lt;/code&gt; object is a component for placing text in a container. A label displays a single line of read-only text. The text can be changed by the application, but a user cannot edit it directly.</source>
          <target state="translated">A &lt;code&gt;Label&lt;/code&gt; object is a component for placing text in a container. A label displays a single line of read-only text. The text can be changed by the application, but a user cannot edit it directly.</target>
        </trans-unit>
        <trans-unit id="c4dae11bb0779a5adf426c55c4dd02a312f2630d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LabelView&lt;/code&gt; is a styled chunk of text that represents a view mapped over an element in the text model.</source>
          <target state="translated">A &lt;code&gt;LabelView&lt;/code&gt; is a styled chunk of text that represents a view mapped over an element in the text model.</target>
        </trans-unit>
        <trans-unit id="ac4ae858cbc3947bf1a4ac65ccfc0c34eaafbbc0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LabelView&lt;/code&gt; is a styled chunk of text that represents a view mapped over an element in the text model. It caches the character level attributes used for rendering.</source>
          <target state="translated">A &lt;code&gt;LabelView&lt;/code&gt; is a styled chunk of text that represents a view mapped over an element in the text model. It caches the character level attributes used for rendering.</target>
        </trans-unit>
        <trans-unit id="f429ad9047f95d3332ba89e413a6cc0ee2434630" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LexicalHandler&lt;/code&gt;, or null.</source>
          <target state="translated">A &lt;code&gt;LexicalHandler&lt;/code&gt; , or null.</target>
        </trans-unit>
        <trans-unit id="bb4a585b9fa4f77ccbfb42f60f7e4ebf122059bf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Line.Info&lt;/code&gt; can be retrieved using various methods of the &lt;code&gt;Line&lt;/code&gt;, &lt;code&gt;Mixer&lt;/code&gt;, and &lt;code&gt;AudioSystem&lt;/code&gt; interfaces. Other such methods let you pass a &lt;code&gt;Line.Info&lt;/code&gt; as an argument, to learn whether lines matching the specified configuration are available and to obtain them.</source>
          <target state="translated">A &lt;code&gt;Line.Info&lt;/code&gt; は、種々の方法を用いて取得することができる &lt;code&gt;Line&lt;/code&gt; 、 &lt;code&gt;Mixer&lt;/code&gt; 、及び &lt;code&gt;AudioSystem&lt;/code&gt; インタフェースを。他のそのようなメソッドを使用すると、引数として &lt;code&gt;Line.Info&lt;/code&gt; を渡して、指定された構成に一致するラインが使用可能かどうかを確認し、それらを取得できます。</target>
        </trans-unit>
        <trans-unit id="5433f861d6141ec2c15ed3524c528b35530116f7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Line.Info&lt;/code&gt; object contains information about a line.</source>
          <target state="translated">&lt;code&gt;Line.Info&lt;/code&gt; オブジェクトは、ラインに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="411649ef651b4ec2897e14a73c6efb69e286dd53" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Line.Info&lt;/code&gt; object contains information about a line. The only information provided by &lt;code&gt;Line.Info&lt;/code&gt; itself is the Java class of the line. A subclass of &lt;code&gt;Line.Info&lt;/code&gt; adds other kinds of information about the line. This additional information depends on which &lt;code&gt;Line&lt;/code&gt; subinterface is implemented by the kind of line that the &lt;code&gt;Line.Info&lt;/code&gt; subclass describes.</source>
          <target state="translated">&lt;code&gt;Line.Info&lt;/code&gt; オブジェクトは、ラインに関する情報が含まれています。 &lt;code&gt;Line.Info&lt;/code&gt; 自体によって提供される唯一の情報は、回線のJavaクラスです。 &lt;code&gt;Line.Info&lt;/code&gt; のサブクラスは、ラインに関する他の種類の情報を追加します。この追加情報は、 &lt;code&gt;Line.Info&lt;/code&gt; サブクラスが記述する線の種類によって実装される &lt;code&gt;Line&lt;/code&gt; サブインターフェースによって異なります。</target>
        </trans-unit>
        <trans-unit id="f5de3198e8f1dfa44dcfc8af9b52d97a73d03b8f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LineUnavailableException&lt;/code&gt; is an exception indicating that a line cannot be opened because it is unavailable.</source>
          <target state="translated">A &lt;code&gt;LineUnavailableException&lt;/code&gt; は、それが使用できないため、ラインを開くことができないことを示す例外です。</target>
        </trans-unit>
        <trans-unit id="4abb8847d52965ede812fd61400508e96855279e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LineUnavailableException&lt;/code&gt; is an exception indicating that a line cannot be opened because it is unavailable. This situation arises most commonly when a requested line is already in use by another application.</source>
          <target state="translated">A &lt;code&gt;LineUnavailableException&lt;/code&gt; は、それが使用できないため、ラインを開くことができないことを示す例外です。この状況は、要求された回線が別のアプリケーションによってすでに使用されている場合に最もよく発生します。</target>
        </trans-unit>
        <trans-unit id="fcb957da8c31310ec301dd29626158388e9473b1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; is reconstructed as a &lt;code&gt;java.util.ArrayList&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;; a &lt;code&gt;Set&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; as a &lt;code&gt;java.util.HashSet&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;; a &lt;code&gt;SortedSet&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; as a &lt;code&gt;java.util.TreeSet&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;List&amp;lt;&lt;/code&gt; &lt;em&gt;Eは&lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; として再構築され &lt;code&gt;java.util.ArrayList&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 。 &lt;code&gt;Set&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; として &lt;code&gt;java.util.HashSet&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 。 &lt;code&gt;SortedSet&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; として &lt;code&gt;java.util.TreeSet&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c5612ba3544e8d755ed07b488135f8d65a862088" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;
      Set&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;, such as &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; or &lt;code&gt;
        Set&amp;lt;ObjectName&amp;gt;&lt;/code&gt;, is mapped in the same way as an array of the same element type, such as &lt;code&gt;String[]&lt;/code&gt; or &lt;code&gt;
          ObjectName[]&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;List&amp;lt;&lt;/code&gt; &lt;em&gt;E&lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt; Set&amp;lt;&lt;/code&gt; &lt;em&gt;E&lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; , such as &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; or &lt;code&gt; Set&amp;lt;ObjectName&amp;gt;&lt;/code&gt; , is mapped in the same way as an array of the same element type, such as &lt;code&gt;String[]&lt;/code&gt; or &lt;code&gt; ObjectName[]&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="af514fc0928d7590d9dc3d67e977394e1aca4d98" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;Set&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;, such as &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; or &lt;code&gt;Set&amp;lt;ObjectName&amp;gt;&lt;/code&gt;, is mapped in the same way as an array of the same element type, such as &lt;code&gt;String[]&lt;/code&gt; or &lt;code&gt;ObjectName[]&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;List&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; または &lt;code&gt;Set&amp;lt;&lt;/code&gt; &lt;em&gt;E &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; のような、 &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; または &lt;code&gt;Set&amp;lt;ObjectName&amp;gt;&lt;/code&gt; 、のような、同じ要素型の配列と同じ方法でマッピングされている &lt;code&gt;String[]&lt;/code&gt; または &lt;code&gt;ObjectName[]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="491f6106940ce82948b741e62cf889f957747531" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; can be converted to a &lt;code&gt;String[]&lt;/code&gt; using &lt;a href=&quot;../../../java.base/java/util/list#toArray(T%5B%5D)&quot;&gt;&lt;code&gt;List.toArray(new
          String[0])&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; can be converted to a &lt;code&gt;String[]&lt;/code&gt; using &lt;a href=&quot;../../../java.base/java/util/list#toArray(T%5B%5D)&quot;&gt; &lt;code&gt;List.toArray(new String[0])&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="655d6f46a51b7f12297ceef1f25f3c615013051a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; can be converted to a &lt;code&gt;String[]&lt;/code&gt; using &lt;a href=&quot;../../java/util/list#toArray-T:A-&quot;&gt;&lt;code&gt;List.toArray(new
          String[0])&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; に変換することができる &lt;code&gt;String[]&lt;/code&gt; 使用&lt;a href=&quot;../../java/util/list#toArray-T:A-&quot;&gt; &lt;code&gt;List.toArray(new String[0])&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="784dc8e6adfc0a37725d118e74305dfbf9bd33ed" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;BufferedImage&lt;/code&gt; thumbnails, or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;BufferedImage&lt;/code&gt; thumbnails, or &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="cdb60bce0f809f664699468a47d7ccb04d51a1b6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;BufferedImage&lt;/code&gt; thumbnails, or &lt;code&gt;null&lt;/code&gt;. Non-&lt;code&gt;BufferedImage&lt;/code&gt; objects must not be stored in this &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; の &lt;code&gt;BufferedImage&lt;/code&gt; サムネイル、または &lt;code&gt;null&lt;/code&gt; 。非 &lt;code&gt;BufferedImage&lt;/code&gt; オブジェクトをこの &lt;code&gt;List&lt;/code&gt; 格納してはなりません。</target>
        </trans-unit>
        <trans-unit id="36b2069fe914d7b06b5470b8c3919de4f456ffd0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of &lt;code&gt;Locale&lt;/code&gt;s, one for each element of &lt;code&gt;warningListeners&lt;/code&gt;, initialized by default &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;List&lt;/code&gt; の &lt;code&gt;Locale&lt;/code&gt; の、の各要素に対して1つの &lt;code&gt;warningListeners&lt;/code&gt; デフォルトで初期化され、 &lt;code&gt;null&lt;/code&gt; 空と同義である、 &lt;code&gt;List&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e3a7c07b884a663e7b28c579dbc62722d830dd12" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of currently registered &lt;code&gt;IIOReadProgressListener&lt;/code&gt;s, initialized by default to &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 現在登録されているの &lt;code&gt;IIOReadProgressListener&lt;/code&gt; にデフォルトで初期化S、 &lt;code&gt;null&lt;/code&gt; 空と同義である、 &lt;code&gt;List&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3f3df7f953dd6fc375207a519bf3b8812d9b980e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of currently registered &lt;code&gt;IIOReadUpdateListener&lt;/code&gt;s, initialized by default to &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 現在登録されているの &lt;code&gt;IIOReadUpdateListener&lt;/code&gt; にデフォルトで初期化S、 &lt;code&gt;null&lt;/code&gt; 空と同義である、 &lt;code&gt;List&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="02920fdeb4509bc480fe7cb92fdd00152bb3b36e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of currently registered &lt;code&gt;IIOReadWarningListener&lt;/code&gt;s, initialized by default to &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 現在登録の &lt;code&gt;IIOReadWarningListener&lt;/code&gt; にデフォルトで初期化S、 &lt;code&gt;null&lt;/code&gt; 空と同義である、 &lt;code&gt;List&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1efe3832c842f4b962429c8ff5af3c882f4ac2e8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of currently registered &lt;code&gt;IIOWriteProgressListener&lt;/code&gt;s, initialized by default &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 現在登録の &lt;code&gt;IIOWriteProgressListener&lt;/code&gt; デフォルトで初期化S、 &lt;code&gt;null&lt;/code&gt; 空と同義である、 &lt;code&gt;List&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b98b86689e972cd06c339fa353658a98f167a0a5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of currently registered &lt;code&gt;IIOWriteWarningListener&lt;/code&gt;s, initialized by default to &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; 現在登録の &lt;code&gt;IIOWriteWarningListener&lt;/code&gt; にデフォルトで初期化S、 &lt;code&gt;null&lt;/code&gt; 空と同義である、 &lt;code&gt;List&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="917395ca416ac2ceda1a7b79e06bc0660475f8a6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;List&lt;/code&gt; of the &lt;code&gt;Locale&lt;/code&gt;s associated with each currently registered &lt;code&gt;IIOReadWarningListener&lt;/code&gt;, initialized by default to &lt;code&gt;null&lt;/code&gt;, which is synonymous with an empty &lt;code&gt;List&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;List&lt;/code&gt; の &lt;code&gt;Locale&lt;/code&gt; のそれぞれ現在登録に関連付けられている &lt;code&gt;IIOReadWarningListener&lt;/code&gt; にデフォルトで初期化され、 &lt;code&gt;null&lt;/code&gt; 空と同義である、 &lt;code&gt;List&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="211c43ac85ae6d5574fc22ebc86733087aaf3305" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ListModel&lt;/code&gt; can be supplied directly to a &lt;code&gt;JList&lt;/code&gt; by way of a constructor or the &lt;code&gt;setModel&lt;/code&gt; method. The contents need not be static - the number of items, and the values of items can change over time. A correct &lt;code&gt;ListModel&lt;/code&gt; implementation notifies the set of &lt;code&gt;javax.swing.event.ListDataListener&lt;/code&gt;s that have been added to it, each time a change occurs. These changes are characterized by a &lt;code&gt;javax.swing.event.ListDataEvent&lt;/code&gt;, which identifies the range of list indices that have been modified, added, or removed. &lt;code&gt;JList&lt;/code&gt;'s &lt;code&gt;ListUI&lt;/code&gt; is responsible for keeping the visual representation up to date with changes, by listening to the model.</source>
          <target state="translated">A &lt;code&gt;ListModel&lt;/code&gt; can be supplied directly to a &lt;code&gt;JList&lt;/code&gt; by way of a constructor or the &lt;code&gt;setModel&lt;/code&gt; method. The contents need not be static - the number of items, and the values of items can change over time. A correct &lt;code&gt;ListModel&lt;/code&gt; implementation notifies the set of &lt;code&gt;javax.swing.event.ListDataListener&lt;/code&gt; s that have been added to it, each time a change occurs. These changes are characterized by a &lt;code&gt;javax.swing.event.ListDataEvent&lt;/code&gt; , which identifies the range of list indices that have been modified, added, or removed. &lt;code&gt;JList&lt;/code&gt; 's &lt;code&gt;ListUI&lt;/code&gt; is responsible for keeping the visual representation up to date with changes, by listening to the model.</target>
        </trans-unit>
        <trans-unit id="cb5267a4f83942b24929404c0f218034b517dcf3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ListSelectionListener&lt;/code&gt; that forwards &lt;code&gt;ListSelectionEvents&lt;/code&gt; when there is a column selection change.</source>
          <target state="translated">A &lt;code&gt;ListSelectionListener&lt;/code&gt; that forwards &lt;code&gt;ListSelectionEvents&lt;/code&gt; when there is a column selection change.</target>
        </trans-unit>
        <trans-unit id="b58a7624cae8f15ddb95782892153cb5fabf8fd5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LocalTime&lt;/code&gt; is formed if there is at least an hour-of-day available. This involves providing default values for minute, second and fraction of second.</source>
          <target state="translated">A &lt;code&gt;LocalTime&lt;/code&gt; 少なくとも時間- 1日の利用可能がある場合に形成されています。これには、分、秒、秒の小数部のデフォルト値を提供することが含まれます。</target>
        </trans-unit>
        <trans-unit id="01853789d6079ac2028fec19eeeae43f9b897108" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Locale&lt;/code&gt; is the mechanism for identifying the kind of object (&lt;code&gt;NumberFormat&lt;/code&gt;) that you would like to get. The locale is &lt;strong&gt;just&lt;/strong&gt; a mechanism for identifying objects, &lt;strong&gt;not&lt;/strong&gt; a container for the objects themselves.</source>
          <target state="translated">A &lt;code&gt;Locale&lt;/code&gt; オブジェクト（の種類識別するための仕組みである &lt;code&gt;NumberFormat&lt;/code&gt; あなたが取得したいと思いことを）。ロケールは、&lt;strong&gt;単に&lt;/strong&gt;オブジェクトを識別するための機構&lt;strong&gt;ではない&lt;/strong&gt;オブジェクト自体のコンテナ。</target>
        </trans-unit>
        <trans-unit id="6fcfa373099d6b3da024951a19df5dd6b097e2d8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Locale&lt;/code&gt; object logically consists of the fields described below.</source>
          <target state="translated">A &lt;code&gt;Locale&lt;/code&gt; オブジェクトは、論理的に、以下に記載のフィールドから構成されています。</target>
        </trans-unit>
        <trans-unit id="166cc021915f9ee4f85c76cabe7204921d6e9fe0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Locale&lt;/code&gt; object represents a specific geographical, political, or cultural region.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; オブジェクトは、地理的、政治的、または文化的地域特定を表します。</target>
        </trans-unit>
        <trans-unit id="635a5aa01099339234a0a7ea3dcb399de997df31" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Locale&lt;/code&gt; object represents a specific geographical, political, or cultural region. An operation that requires a &lt;code&gt;Locale&lt;/code&gt; to perform its task is called &lt;em&gt;locale-sensitive&lt;/em&gt; and uses the &lt;code&gt;Locale&lt;/code&gt; to tailor information for the user. For example, displaying a number is a locale-sensitive operation&amp;mdash; the number should be formatted according to the customs and conventions of the user's native country, region, or culture.</source>
          <target state="translated">&lt;code&gt;Locale&lt;/code&gt; オブジェクトは、地理的、政治的、または文化的地域特定を表します。タスクの実行に &lt;code&gt;Locale&lt;/code&gt; が必要な操作は&lt;em&gt;ロケール依存&lt;/em&gt;と呼ばれ、 &lt;code&gt;Locale&lt;/code&gt; を使用してユーザーの情報を調整します。たとえば、数値の表示はロケールに依存する操作です。数値は、ユーザーの出身国、地域、または文化の慣習や規則に従ってフォーマットする必要があります。</target>
        </trans-unit>
        <trans-unit id="0cd9ed10b27f2ef168f4256244d20117115ba51e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Locale&lt;/code&gt; to be used to localize compression type names and quality descriptions, or &lt;code&gt;null&lt;/code&gt; to use a default &lt;code&gt;Locale&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;Locale&lt;/code&gt; to be used to localize compression type names and quality descriptions, or &lt;code&gt;null&lt;/code&gt; to use a default &lt;code&gt;Locale&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="12f70407c67f5352dca1aed29447302a2a4d4250" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Locale&lt;/code&gt; to be used to localize compression type names and quality descriptions, or &lt;code&gt;null&lt;/code&gt; to use a default &lt;code&gt;Locale&lt;/code&gt;. Subclasses must set the value manually.</source>
          <target state="translated">A &lt;code&gt;Locale&lt;/code&gt; 圧縮方式名と品質概要、またはローカライズするために使用される &lt;code&gt;null&lt;/code&gt; デフォルトに使用する &lt;code&gt;Locale&lt;/code&gt; 。サブクラスは手動で値を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="8276cf42ea4317cfe442daf66653a487c4e1f80d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Lock&lt;/code&gt; class can also provide behavior and semantics that is quite different from that of the implicit monitor lock, such as guaranteed ordering, non-reentrant usage, or deadlock detection. If an implementation provides such specialized semantics then the implementation must document those semantics.</source>
          <target state="translated">A &lt;code&gt;Lock&lt;/code&gt; クラスにも、このような順序は保証、非リエントラントの使用、またはデッドロックの検出など、暗黙の監視ロックとは全く異なる振る舞いと意味を提供することができます。実装がそのような特殊なセマンティクスを提供する場合、実装はそれらのセマンティクスを文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="3eca3b7befac58e83c9e637d52b7f145f7ba7b59" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Lock&lt;/code&gt; implementation may be able to detect erroneous use of the lock, such as an invocation that would cause deadlock, and may throw an (unchecked) exception in such circumstances. The circumstances and the exception type must be documented by that &lt;code&gt;Lock&lt;/code&gt; implementation.</source>
          <target state="translated">A &lt;code&gt;Lock&lt;/code&gt; の実装は、このようなデッドロックを引き起こす、とこのような状況で（チェック）例外をスローすることが呼び出しなどのロックの不正使用を検出することができます。その &lt;code&gt;Lock&lt;/code&gt; 実装によって、状況と例外タイプを文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="f3c0cd3882685c535519cd28b18404b3a9a21c01" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Lock&lt;/code&gt; implementation will usually impose restrictions on which thread can release a lock (typically only the holder of the lock can release it) and may throw an (unchecked) exception if the restriction is violated. Any restrictions and the exception type must be documented by that &lt;code&gt;Lock&lt;/code&gt; implementation.</source>
          <target state="translated">&lt;code&gt;Lock&lt;/code&gt; の実装は通常、スレッドがロックを解除することができます（通常はロックの唯一の所有者がそれを解放することができます）、制限に違反した場合（チェック）例外をスロー可能性があるに制限を課します。制限および例外タイプは、その &lt;code&gt;Lock&lt;/code&gt; 実装によって文書化されている必要があります。</target>
        </trans-unit>
        <trans-unit id="b71cbc511c202cb9f3e5502805e1768103b9d6cf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;LoginModule&lt;/code&gt; implementation must have a constructor with no arguments. This allows classes which load the &lt;code&gt;LoginModule&lt;/code&gt; to instantiate it.</source>
          <target state="translated">&lt;code&gt;LoginModule&lt;/code&gt; 実装は、引数なしのコンストラクタを持たなければなりません。これにより、 &lt;code&gt;LoginModule&lt;/code&gt; をロードするクラスがそれをインスタンス化できます。</target>
        </trans-unit>
        <trans-unit id="d949ad08cad7e449a2f42749aa45dffb85fab86e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Lookup&lt;/code&gt; object can be shared with other trusted code, such as a metaobject protocol. A shared &lt;code&gt;Lookup&lt;/code&gt; object delegates the capability to create method handles on private members of the lookup class. Even if privileged code uses the &lt;code&gt;Lookup&lt;/code&gt; object, the access checking is confined to the privileges of the original lookup class.</source>
          <target state="translated">&lt;code&gt;Lookup&lt;/code&gt; オブジェクトは、メタオブジェクトプロトコルのような他の信頼されたコードと共有することができます。共有 &lt;code&gt;Lookup&lt;/code&gt; オブジェクトは、ルックアップクラスのプライベートメンバーにメソッドハンドルを作成する機能を委任します。特権コードが &lt;code&gt;Lookup&lt;/code&gt; オブジェクトを使用する場合でも、アクセスチェックは元の参照クラスの特権に限定されます。</target>
        </trans-unit>
        <trans-unit id="16c504d0134db57150e75cd387d1909b4f16459d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Lookup&lt;/code&gt; object produced by the factory methods, such as the &lt;a href=&quot;methodhandles#lookup()&quot;&gt;&lt;code&gt;lookup()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;methodhandles#publicLookup()&quot;&gt;&lt;code&gt;publicLookup()&lt;/code&gt;&lt;/a&gt; method, has &lt;code&gt;null&lt;/code&gt; previous lookup class. A &lt;code&gt;Lookup&lt;/code&gt; object has a non-null previous lookup class when this lookup was teleported from an old lookup class in one module to a new lookup class in another module.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bec657cc08b058966f2642f6c31e17ccf5c008e6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Lookup&lt;/code&gt; on &lt;code&gt;C&lt;/code&gt; can also &lt;em&gt;teleport&lt;/em&gt; to a target class via &lt;a href=&quot;#in(java.lang.Class)&quot;&gt;&lt;code&gt;Lookup.in&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;methodhandles#privateLookupIn(java.lang.Class,java.lang.invoke.MethodHandles.Lookup)&quot;&gt;&lt;code&gt;MethodHandles.privateLookupIn&lt;/code&gt;&lt;/a&gt; methods. Teleporting across modules will always record the original lookup class as the &lt;em&gt;&lt;a href=&quot;#previousLookupClass()&quot;&gt;previous lookup class&lt;/a&gt;&lt;/em&gt; and drops &lt;a href=&quot;#MODULE&quot;&gt;&lt;code&gt;MODULE&lt;/code&gt;&lt;/a&gt; access. If the target class is in the same module as the lookup class &lt;code&gt;C&lt;/code&gt;, then the target class becomes the new lookup class and there is no change to the previous lookup class. If the target class is in a different module from &lt;code&gt;M1&lt;/code&gt; (&lt;code&gt;C&lt;/code&gt;'s module), &lt;code&gt;C&lt;/code&gt; becomes the new previous lookup class and the target class becomes the new lookup class. In that case, if there was already a previous lookup class in &lt;code&gt;M0&lt;/code&gt;, and it differs from &lt;code&gt;M1&lt;/code&gt; and &lt;code&gt;M2&lt;/code&gt;, then the resulting lookup drops all privileges. For example,</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="991d368dcf0b3e78a36d53f3d2e05fd9c24be32c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Lookup&lt;/code&gt; with &lt;a href=&quot;#PUBLIC&quot;&gt;&lt;code&gt;PUBLIC&lt;/code&gt;&lt;/a&gt; or with &lt;a href=&quot;#UNCONDITIONAL&quot;&gt;&lt;code&gt;UNCONDITIONAL&lt;/code&gt;&lt;/a&gt; mode allows cross-module access. The access checking is performed with respect to both the lookup class and the previous lookup class if present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0e5c2e23d370340df0db26fb2033c3a065c8f0e0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Lookup&lt;/code&gt; with &lt;a href=&quot;#UNCONDITIONAL&quot;&gt;&lt;code&gt;UNCONDITIONAL&lt;/code&gt;&lt;/a&gt; mode can access public type in all modules when the type is in a package that is &lt;a href=&quot;../module#isExported(java.lang.String)&quot;&gt;exported unconditionally&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7ecd163745bccdb5a30005b5592bea80bbd8e300" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Lookup&lt;/code&gt; with this lookup mode performs cross-module access check with respect to the &lt;a href=&quot;#lookupClass()&quot;&gt;lookup class&lt;/a&gt; and &lt;a href=&quot;#previousLookupClass()&quot;&gt;previous lookup class&lt;/a&gt; if present.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="638ae617b2818d2f9f7783f4b29ead82b402514c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ManagedBlocker&lt;/code&gt; provides two methods. Method &lt;a href=&quot;#isReleasable()&quot;&gt;&lt;code&gt;isReleasable()&lt;/code&gt;&lt;/a&gt; must return &lt;code&gt;true&lt;/code&gt; if blocking is not necessary. Method &lt;a href=&quot;#block()&quot;&gt;&lt;code&gt;block()&lt;/code&gt;&lt;/a&gt; blocks the current thread if necessary (perhaps internally invoking &lt;code&gt;isReleasable&lt;/code&gt; before actually blocking). These actions are performed by any thread invoking &lt;a href=&quot;forkjoinpool#managedBlock(java.util.concurrent.ForkJoinPool.ManagedBlocker)&quot;&gt;&lt;code&gt;ForkJoinPool.managedBlock(ManagedBlocker)&lt;/code&gt;&lt;/a&gt;. The unusual methods in this API accommodate synchronizers that may, but don't usually, block for long periods. Similarly, they allow more efficient internal handling of cases in which additional workers may be, but usually are not, needed to ensure sufficient parallelism. Toward this end, implementations of method &lt;code&gt;isReleasable&lt;/code&gt; must be amenable to repeated invocation.</source>
          <target state="translated">A &lt;code&gt;ManagedBlocker&lt;/code&gt; provides two methods. Method &lt;a href=&quot;#isReleasable()&quot;&gt; &lt;code&gt;isReleasable()&lt;/code&gt; &lt;/a&gt; must return &lt;code&gt;true&lt;/code&gt; if blocking is not necessary. Method &lt;a href=&quot;#block()&quot;&gt; &lt;code&gt;block()&lt;/code&gt; &lt;/a&gt; blocks the current thread if necessary (perhaps internally invoking &lt;code&gt;isReleasable&lt;/code&gt; before actually blocking). These actions are performed by any thread invoking &lt;a href=&quot;forkjoinpool#managedBlock(java.util.concurrent.ForkJoinPool.ManagedBlocker)&quot;&gt; &lt;code&gt;ForkJoinPool.managedBlock(ManagedBlocker)&lt;/code&gt; &lt;/a&gt;. The unusual methods in this API accommodate synchronizers that may, but don't usually, block for long periods. Similarly, they allow more efficient internal handling of cases in which additional workers may be, but usually are not, needed to ensure sufficient parallelism. Toward this end, implementations of method &lt;code&gt;isReleasable&lt;/code&gt; must be amenable to repeated invocation.</target>
        </trans-unit>
        <trans-unit id="41de0ba43f16a90c262039e2bd1814b41250f82c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ManagedBlocker&lt;/code&gt; provides two methods. Method &lt;a href=&quot;forkjoinpool.managedblocker#isReleasable--&quot;&gt;&lt;code&gt;isReleasable()&lt;/code&gt;&lt;/a&gt; must return &lt;code&gt;true&lt;/code&gt; if blocking is not necessary. Method &lt;a href=&quot;forkjoinpool.managedblocker#block--&quot;&gt;&lt;code&gt;block()&lt;/code&gt;&lt;/a&gt; blocks the current thread if necessary (perhaps internally invoking &lt;code&gt;isReleasable&lt;/code&gt; before actually blocking). These actions are performed by any thread invoking &lt;a href=&quot;forkjoinpool#managedBlock-java.util.concurrent.ForkJoinPool.ManagedBlocker-&quot;&gt;&lt;code&gt;ForkJoinPool.managedBlock(ManagedBlocker)&lt;/code&gt;&lt;/a&gt;. The unusual methods in this API accommodate synchronizers that may, but don't usually, block for long periods. Similarly, they allow more efficient internal handling of cases in which additional workers may be, but usually are not, needed to ensure sufficient parallelism. Toward this end, implementations of method &lt;code&gt;isReleasable&lt;/code&gt; must be amenable to repeated invocation.</source>
          <target state="translated">A &lt;code&gt;ManagedBlocker&lt;/code&gt; は、 2つのメソッドを提供します。ブロックが不要な場合、メソッド&lt;a href=&quot;forkjoinpool.managedblocker#isReleasable--&quot;&gt; &lt;code&gt;isReleasable()&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;true&lt;/code&gt; を返す必要があります。メソッド&lt;a href=&quot;forkjoinpool.managedblocker#block--&quot;&gt; &lt;code&gt;block()&lt;/code&gt; &lt;/a&gt;は、必要に応じて現在のスレッドをブロックします（おそらく、実際にブロックする前に、内部的に &lt;code&gt;isReleasable&lt;/code&gt; を呼び出します）。これらのアクションは、&lt;a href=&quot;forkjoinpool#managedBlock-java.util.concurrent.ForkJoinPool.ManagedBlocker-&quot;&gt; &lt;code&gt;ForkJoinPool.managedBlock(ManagedBlocker)&lt;/code&gt; &lt;/a&gt;を呼び出すスレッドによって実行されます。このAPIの珍しいメソッドは、通常はブロックしない可能性がありますが、長期間ブロックするシンクロナイザーに対応します。同様に、十分な並列処理を確保するために追加のワーカーが必要になる場合があるが、通常は必要とされない場合の内部処理をより効率的に行うことができます。この目的のために、メソッドの実装は &lt;code&gt;isReleasable&lt;/code&gt; 繰り返し呼び出しを受け入れる必要があります。</target>
        </trans-unit>
        <trans-unit id="5e9cc5dc674a5b0316a5dbf3c9f9cf213ece6f21" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Manifest&lt;/code&gt; instance may be created by invoking one of the &lt;a href=&quot;xmlsignaturefactory#newManifest(java.util.List)&quot;&gt;&lt;code&gt;newManifest&lt;/code&gt;&lt;/a&gt; methods of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class; for example:</source>
          <target state="translated">A &lt;code&gt;Manifest&lt;/code&gt; instance may be created by invoking one of the &lt;a href=&quot;xmlsignaturefactory#newManifest(java.util.List)&quot;&gt; &lt;code&gt;newManifest&lt;/code&gt; &lt;/a&gt; methods of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt; class; for example:</target>
        </trans-unit>
        <trans-unit id="ccb5483368ce702117255c40bb64a3c638ac6959" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Map&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; is reconstructed as a &lt;code&gt;java.util.HashMap&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;; a &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; as a &lt;code&gt;java.util.TreeMap&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;Map&amp;lt;&lt;/code&gt; &lt;em&gt;Kは&lt;/em&gt;、&lt;em&gt;V &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; として再構成され &lt;code&gt;java.util.HashMap&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt;、&lt;em&gt;V &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 。 &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt;、&lt;em&gt;V &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; として &lt;code&gt;java.util.TreeMap&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt;、&lt;em&gt;V &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="34d9d6e43d15d27f890e53136a47ea22621edffc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Map&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;
      SortedMap&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;, for example &lt;code&gt;
      Map&amp;lt;String,ObjectName&amp;gt;&lt;/code&gt;, has Open Type &lt;a href=&quot;openmbean/tabulartype&quot;&gt;&lt;code&gt;TabularType&lt;/code&gt;&lt;/a&gt; and is mapped to a &lt;a href=&quot;openmbean/tabulardata&quot;&gt;&lt;code&gt;TabularData&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;TabularType&lt;/code&gt; has two items called &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;. The Open Type of &lt;code&gt;key&lt;/code&gt; is &lt;em&gt;opentype(K)&lt;/em&gt;, and the Open Type of &lt;code&gt;value&lt;/code&gt; is &lt;em&gt;opentype(V)&lt;/em&gt;. The index of the &lt;code&gt;TabularType&lt;/code&gt; is the single item &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;Map&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt; SortedMap&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; , for example &lt;code&gt; Map&amp;lt;String,ObjectName&amp;gt;&lt;/code&gt; , has Open Type &lt;a href=&quot;openmbean/tabulartype&quot;&gt; &lt;code&gt;TabularType&lt;/code&gt; &lt;/a&gt; and is mapped to a &lt;a href=&quot;openmbean/tabulardata&quot;&gt; &lt;code&gt;TabularData&lt;/code&gt; &lt;/a&gt;. The &lt;code&gt;TabularType&lt;/code&gt; has two items called &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; . The Open Type of &lt;code&gt;key&lt;/code&gt; is &lt;em&gt;opentype(K)&lt;/em&gt;, and the Open Type of &lt;code&gt;value&lt;/code&gt; is &lt;em&gt;opentype(V)&lt;/em&gt;. The index of the &lt;code&gt;TabularType&lt;/code&gt; is the single item &lt;code&gt;key&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a5492d91c797e8ad61ee773f7ff7771cc95b5945" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Map&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; or &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt;, for example &lt;code&gt;Map&amp;lt;String,ObjectName&amp;gt;&lt;/code&gt;, has Open Type &lt;a href=&quot;openmbean/tabulartype&quot;&gt;&lt;code&gt;TabularType&lt;/code&gt;&lt;/a&gt; and is mapped to a &lt;a href=&quot;openmbean/tabulardata&quot;&gt;&lt;code&gt;TabularData&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;TabularType&lt;/code&gt; has two items called &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt;. The Open Type of &lt;code&gt;key&lt;/code&gt; is &lt;em&gt;opentype(K)&lt;/em&gt;, and the Open Type of &lt;code&gt;value&lt;/code&gt; is &lt;em&gt;opentype(V)&lt;/em&gt;. The index of the &lt;code&gt;TabularType&lt;/code&gt; is the single item &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;Map&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt;、&lt;em&gt;V &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; または &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt;、&lt;em&gt;Vは&lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; 、例えば &lt;code&gt;Map&amp;lt;String,ObjectName&amp;gt;&lt;/code&gt; 、オープンタイプ有する&lt;a href=&quot;openmbean/tabulartype&quot;&gt; &lt;code&gt;TabularType&lt;/code&gt; では&lt;/a&gt;とにマッピングされ&lt;a href=&quot;openmbean/tabulardata&quot;&gt; &lt;code&gt;TabularData&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;TabularType&lt;/code&gt; では、と呼ばれる2つの項目がある &lt;code&gt;key&lt;/code&gt; と &lt;code&gt;value&lt;/code&gt; 。 &lt;code&gt;key&lt;/code&gt; のOpen Type は&lt;em&gt;opentype（K）で&lt;/em&gt;、 &lt;code&gt;value&lt;/code&gt; のOpen Type は&lt;em&gt;opentype（V）&lt;/em&gt;です。 &lt;code&gt;TabularType&lt;/code&gt; のインデックスは、単一のアイテム &lt;code&gt;key&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="491fe026154b44bab21540fc1d12cd511ab4f8ab" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MarshalException&lt;/code&gt; can contain a cause: another throwable that caused this &lt;code&gt;MarshalException&lt;/code&gt; to get thrown.</source>
          <target state="translated">A &lt;code&gt;MarshalException&lt;/code&gt; can contain a cause: another throwable that caused this &lt;code&gt;MarshalException&lt;/code&gt; to get thrown.</target>
        </trans-unit>
        <trans-unit id="e2bfa32c78e5059bce11c1a8e652de673f8f4c33" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MarshalException&lt;/code&gt; is thrown if a &lt;code&gt;java.io.IOException&lt;/code&gt; occurs while marshalling the remote call header, arguments or return value for a remote method call.</source>
          <target state="translated">A &lt;code&gt;MarshalException&lt;/code&gt; is thrown if a &lt;code&gt;java.io.IOException&lt;/code&gt; occurs while marshalling the remote call header, arguments or return value for a remote method call.</target>
        </trans-unit>
        <trans-unit id="6bd9d90b4757239b6c0c4997a903f5d67e33dbf6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MarshalException&lt;/code&gt; is thrown if a &lt;code&gt;java.io.IOException&lt;/code&gt; occurs while marshalling the remote call header, arguments or return value for a remote method call. A &lt;code&gt;MarshalException&lt;/code&gt; is also thrown if the receiver does not support the protocol version of the sender.</source>
          <target state="translated">A &lt;code&gt;MarshalException&lt;/code&gt; is thrown if a &lt;code&gt;java.io.IOException&lt;/code&gt; occurs while marshalling the remote call header, arguments or return value for a remote method call. A &lt;code&gt;MarshalException&lt;/code&gt; is also thrown if the receiver does not support the protocol version of the sender.</target>
        </trans-unit>
        <trans-unit id="a93248bdc0454438b648bb944c4e7eceb09fdc67" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MarshalledObject&lt;/code&gt; contains a byte stream with the serialized representation of an object given to its constructor.</source>
          <target state="translated">A &lt;code&gt;MarshalledObject&lt;/code&gt; contains a byte stream with the serialized representation of an object given to its constructor.</target>
        </trans-unit>
        <trans-unit id="1b6eeb9b8ba22d69fe4c738b2de7f3dcbf5218ae" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MarshalledObject&lt;/code&gt; contains a byte stream with the serialized representation of an object given to its constructor. The &lt;code&gt;get&lt;/code&gt; method returns a new copy of the original object, as deserialized from the contained byte stream. The contained object is serialized and deserialized with the same serialization semantics used for marshaling and unmarshaling parameters and return values of RMI calls: When the serialized form is created:</source>
          <target state="translated">A &lt;code&gt;MarshalledObject&lt;/code&gt; contains a byte stream with the serialized representation of an object given to its constructor. The &lt;code&gt;get&lt;/code&gt; method returns a new copy of the original object, as deserialized from the contained byte stream. The contained object is serialized and deserialized with the same serialization semantics used for marshaling and unmarshaling parameters and return values of RMI calls: When the serialized form is created:</target>
        </trans-unit>
        <trans-unit id="70fad3c3b4f1266ef436d5efdebeba344be477f5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MathContext&lt;/code&gt; object whose settings have the values required for unlimited precision arithmetic.</source>
          <target state="translated">A &lt;code&gt;MathContext&lt;/code&gt; object whose settings have the values required for unlimited precision arithmetic.</target>
        </trans-unit>
        <trans-unit id="4e3654abaa9ec0cd85de26194397d568c17a1dc7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MathContext&lt;/code&gt; object whose settings have the values required for unlimited precision arithmetic. The values of the settings are: &lt;code&gt;
  precision=0 roundingMode=HALF_UP
  &lt;/code&gt;</source>
          <target state="translated">A &lt;code&gt;MathContext&lt;/code&gt; その設定無制限の精度での計算に必要な値を持つオブジェクト。設定の値は次のとおりです： &lt;code&gt; precision=0 roundingMode=HALF_UP &lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="96c1e909740c6811a0d1efdeffb1ff302e2bb931" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MathContext&lt;/code&gt; object with a precision setting matching the IEEE 754R Decimal128 format, 34 digits, and a rounding mode of &lt;a href=&quot;roundingmode#HALF_EVEN&quot;&gt;&lt;code&gt;HALF_EVEN&lt;/code&gt;&lt;/a&gt;, the IEEE 754R default.</source>
          <target state="translated">A &lt;code&gt;MathContext&lt;/code&gt; IEEE 754R Decimal28形式、34桁、の丸めモードマッチング精度が設定されたオブジェクト&lt;a href=&quot;roundingmode#HALF_EVEN&quot;&gt; &lt;code&gt;HALF_EVEN&lt;/code&gt; &lt;/a&gt;、IEEE 754Rのデフォルト。</target>
        </trans-unit>
        <trans-unit id="5c1e77d0a3347653dcee6a8b1f11bee4a66d44be" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MathContext&lt;/code&gt; object with a precision setting matching the IEEE 754R Decimal32 format, 7 digits, and a rounding mode of &lt;a href=&quot;roundingmode#HALF_EVEN&quot;&gt;&lt;code&gt;HALF_EVEN&lt;/code&gt;&lt;/a&gt;, the IEEE 754R default.</source>
          <target state="translated">A &lt;code&gt;MathContext&lt;/code&gt; IEEE 754R Decimal32形式、7桁、の丸めモードマッチング精度が設定されたオブジェクト&lt;a href=&quot;roundingmode#HALF_EVEN&quot;&gt; &lt;code&gt;HALF_EVEN&lt;/code&gt; &lt;/a&gt;、IEEE 754Rのデフォルト。</target>
        </trans-unit>
        <trans-unit id="b4edaafe90086d392d090849cc8b67e7f5445efa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MathContext&lt;/code&gt; object with a precision setting matching the IEEE 754R Decimal64 format, 16 digits, and a rounding mode of &lt;a href=&quot;roundingmode#HALF_EVEN&quot;&gt;&lt;code&gt;HALF_EVEN&lt;/code&gt;&lt;/a&gt;, the IEEE 754R default.</source>
          <target state="translated">A &lt;code&gt;MathContext&lt;/code&gt; IEEE 754R Decimal64形式、16桁、の丸めモードマッチング精度が設定されたオブジェクト&lt;a href=&quot;roundingmode#HALF_EVEN&quot;&gt; &lt;code&gt;HALF_EVEN&lt;/code&gt; &lt;/a&gt;、IEEE 754Rのデフォルト。</target>
        </trans-unit>
        <trans-unit id="d9677ef7cd01bbfe977031fa93ccb1eb8392aa7b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Media&lt;/code&gt; object is constructed with a value which represents one of the ways in which the Media attribute can be specified.</source>
          <target state="translated">A &lt;code&gt;Media&lt;/code&gt; object is constructed with a value which represents one of the ways in which the Media attribute can be specified.</target>
        </trans-unit>
        <trans-unit id="606f930b55bbce0493e70e26368aa5b13a7f4fca" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MemoryUsage&lt;/code&gt; object contains four values:</source>
          <target state="translated">&lt;code&gt;MemoryUsage&lt;/code&gt; オブジェクトには4つの値が含まれます。</target>
        </trans-unit>
        <trans-unit id="fa4d939f81165b50263fcede0b6dfe1f34749207" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MemoryUsage&lt;/code&gt; object represents a snapshot of memory usage.</source>
          <target state="translated">&lt;code&gt;MemoryUsage&lt;/code&gt; オブジェクトは、メモリ使用量のスナップショットを表します。</target>
        </trans-unit>
        <trans-unit id="78b89506999de34adc0eab3d85d54befd68853ab" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MemoryUsage&lt;/code&gt; object represents a snapshot of memory usage. Instances of the &lt;code&gt;MemoryUsage&lt;/code&gt; class are usually constructed by methods that are used to obtain memory usage information about individual memory pool of the Java virtual machine or the heap or non-heap memory of the Java virtual machine as a whole.</source>
          <target state="translated">&lt;code&gt;MemoryUsage&lt;/code&gt; オブジェクトは、メモリ使用量のスナップショットを表します。通常、 &lt;code&gt;MemoryUsage&lt;/code&gt; クラスのインスタンスは、Java仮想マシンの個々のメモリプールまたはJava仮想マシン全体のヒープまたは非ヒープメモリに関するメモリ使用量情報を取得するために使用されるメソッドによって構築されます。</target>
        </trans-unit>
        <trans-unit id="2878636561e8e5d31d7c4ea4ddce32490944eca3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Menu&lt;/code&gt; object is a pull-down menu component that is deployed from a menu bar.</source>
          <target state="translated">A &lt;code&gt;Menu&lt;/code&gt; object is a pull-down menu component that is deployed from a menu bar.</target>
        </trans-unit>
        <trans-unit id="a97fd72ec727d747337194ffbf451d3f7cf10cc8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Messager&lt;/code&gt; provides the way for an annotation processor to report error messages, warnings, and other notices.</source>
          <target state="translated">A &lt;code&gt;Messager&lt;/code&gt; レポートのエラーメッセージ、警告、およびその他の通知に注釈プロセッサのための方法を提供します。</target>
        </trans-unit>
        <trans-unit id="8b5521c29051dc916ca552f3e4107d413e2197a1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Messager&lt;/code&gt; provides the way for an annotation processor to report error messages, warnings, and other notices. Elements, annotations, and annotation values can be passed to provide a location hint for the message. However, such location hints may be unavailable or only approximate.</source>
          <target state="translated">A &lt;code&gt;Messager&lt;/code&gt; レポートのエラーメッセージ、警告、およびその他の通知に注釈プロセッサのための方法を提供します。要素、注釈、および注釈値を渡して、メッセージの場所のヒントを提供できます。ただし、そのような位置のヒントは利用できないか、概算にすぎない場合があります。</target>
        </trans-unit>
        <trans-unit id="8a28ba9d7e8182d497600748bf3e7d346a35f0fd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MetaMessage&lt;/code&gt; is a &lt;a href=&quot;midimessage&quot;&gt;&lt;code&gt;MidiMessage&lt;/code&gt;&lt;/a&gt; that is not meaningful to synthesizers, but that can be stored in a MIDI file and interpreted by a sequencer program.</source>
          <target state="translated">A &lt;code&gt;MetaMessage&lt;/code&gt; is a &lt;a href=&quot;midimessage&quot;&gt; &lt;code&gt;MidiMessage&lt;/code&gt; &lt;/a&gt; that is not meaningful to synthesizers, but that can be stored in a MIDI file and interpreted by a sequencer program.</target>
        </trans-unit>
        <trans-unit id="2776880490c670eb8356fedbda3e278ca4cac50a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MetaMessage&lt;/code&gt; is a &lt;a href=&quot;midimessage&quot;&gt;&lt;code&gt;MidiMessage&lt;/code&gt;&lt;/a&gt; that is not meaningful to synthesizers, but that can be stored in a MIDI file and interpreted by a sequencer program. (See the discussion in the &lt;code&gt;MidiMessage&lt;/code&gt; class description.) The Standard MIDI Files specification defines various types of meta-events, such as sequence number, lyric, cue point, and set tempo. There are also meta-events for such information as lyrics, copyrights, tempo indications, time and key signatures, markers, etc. For more information, see the Standard MIDI Files 1.0 specification, which is part of the Complete MIDI 1.0 Detailed Specification published by the MIDI Manufacturer's Association (&lt;a href=&quot;http://www.midi.org&quot;&gt;http://www.midi.org&lt;/a&gt;).</source>
          <target state="translated">A &lt;code&gt;MetaMessage&lt;/code&gt; is a &lt;a href=&quot;midimessage&quot;&gt; &lt;code&gt;MidiMessage&lt;/code&gt; &lt;/a&gt; that is not meaningful to synthesizers, but that can be stored in a MIDI file and interpreted by a sequencer program. (See the discussion in the &lt;code&gt;MidiMessage&lt;/code&gt; class description.) The Standard MIDI Files specification defines various types of meta-events, such as sequence number, lyric, cue point, and set tempo. There are also meta-events for such information as lyrics, copyrights, tempo indications, time and key signatures, markers, etc. For more information, see the Standard MIDI Files 1.0 specification, which is part of the Complete MIDI 1.0 Detailed Specification published by the MIDI Manufacturer's Association (&lt;a href=&quot;http://www.midi.org&quot;&gt;http://www.midi.org&lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="1ad837bf3e31c7b5b47588b5b301ff6b6f388b32" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MetaMessage&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;midimessage&quot;&gt;&lt;code&gt;MidiMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; that is not meaningful to synthesizers, but that can be stored in a MIDI file and interpreted by a sequencer program.</source>
          <target state="translated">A &lt;code&gt;MetaMessage&lt;/code&gt; がある &lt;code&gt;&lt;a href=&quot;midimessage&quot;&gt;&lt;code&gt;MidiMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; シンセサイザーに意味はないが、それは、MIDIファイルに格納され、シーケンサプログラムによって解釈することができます。</target>
        </trans-unit>
        <trans-unit id="6411c04f2592f16b41f8ac78ab0fe3af9c44008b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MetaMessage&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;midimessage&quot;&gt;&lt;code&gt;MidiMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; that is not meaningful to synthesizers, but that can be stored in a MIDI file and interpreted by a sequencer program. (See the discussion in the &lt;code&gt;MidiMessage&lt;/code&gt; class description.) The Standard MIDI Files specification defines various types of meta-events, such as sequence number, lyric, cue point, and set tempo. There are also meta-events for such information as lyrics, copyrights, tempo indications, time and key signatures, markers, etc. For more information, see the Standard MIDI Files 1.0 specification, which is part of the Complete MIDI 1.0 Detailed Specification published by the MIDI Manufacturer's Association (&lt;a href=&quot;http://www.midi.org&quot;&gt;http://www.midi.org&lt;/a&gt;).</source>
          <target state="translated">A &lt;code&gt;MetaMessage&lt;/code&gt; がある &lt;code&gt;&lt;a href=&quot;midimessage&quot;&gt;&lt;code&gt;MidiMessage&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; シンセサイザーに意味はないが、それは、MIDIファイルに格納され、シーケンサプログラムによって解釈することができます。 （ &lt;code&gt;MidiMessage&lt;/code&gt; クラスの説明の説明を参照してください。）標準MIDIファイル仕様では、シーケンス番号、歌詞、キューポイント、設定テンポなど、さまざまなタイプのメタイベントが定義されています。歌詞、著作権、テンポ表示、時間と調号、マーカーなどの情報のメタイベントもあります。詳細については、Standard MIDI Files 1.0仕様を参照してください。これは、発行されたComplete MIDI 1.0詳細仕様の一部です。 MIDI Manufacturers Association（&lt;a href=&quot;http://www.midi.org&quot;&gt;http://www.midi.org&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="b1556bc39acc4a33d83d3058b0e35d9fe2b1eecd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Method&lt;/code&gt; permits widening conversions to occur when matching the actual parameters to invoke with the underlying method's formal parameters, but it throws an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if a narrowing conversion would occur.</source>
          <target state="translated">A &lt;code&gt;Method&lt;/code&gt; 、基礎となるメソッドの仮パラメータで起動する実際のパラメータに一致するときに発生するように拡大変換を可能にするが、それはスロー &lt;code&gt;IllegalArgumentException&lt;/code&gt; 縮小変換が発生する場合。</target>
        </trans-unit>
        <trans-unit id="2661b86b675a199266968a6e45d097d08b2ed1b8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Method&lt;/code&gt; provides information about, and access to, a single method on a class or interface.</source>
          <target state="translated">A &lt;code&gt;Method&lt;/code&gt; についての情報、およびクラスまたはインタフェース上の単一のメソッドへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="0b3a1d14a60ca6e1169eb522df600b9e89fb9a7c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Method&lt;/code&gt; provides information about, and access to, a single method on a class or interface. The reflected method may be a class method or an instance method (including an abstract method).</source>
          <target state="translated">A &lt;code&gt;Method&lt;/code&gt; についての情報、およびクラスまたはインタフェース上の単一のメソッドへのアクセスを提供します。リフレクトされたメソッドは、クラスメソッドまたはインスタンスメソッド（抽象メソッドを含む）の場合があります。</target>
        </trans-unit>
        <trans-unit id="7f5283226cb7888fe7049b87dfff2a5e77bdb1dd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MethodType&lt;/code&gt; can be described in &lt;a href=&quot;../constant/methodtypedesc&quot;&gt;nominal form&lt;/a&gt; if and only if all of the parameter types and return type can be described with a &lt;a href=&quot;../class#describeConstable()&quot;&gt;&lt;code&gt;nominal descriptor&lt;/code&gt;&lt;/a&gt; represented by &lt;a href=&quot;../constant/classdesc&quot;&gt;&lt;code&gt;ClassDesc&lt;/code&gt;&lt;/a&gt;. If a method type can be described nominally, then:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="db033c5925ad5ebb7b67f81287d933584d91e0cf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiChannel&lt;/code&gt; object represents a single MIDI channel.</source>
          <target state="translated">&lt;code&gt;MidiChannel&lt;/code&gt; のオブジェクトは、単一のMIDIチャンネルを表します。</target>
        </trans-unit>
        <trans-unit id="deef091e63ec51b5ffcf1c4a7c047cd054eff163" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiChannel&lt;/code&gt; object represents a single MIDI channel. Generally, each &lt;code&gt;MidiChannel&lt;/code&gt; method processes a like-named MIDI &quot;channel voice&quot; or &quot;channel mode&quot; message as defined by the MIDI specification. However, &lt;code&gt;MidiChannel&lt;/code&gt; adds some &quot;get&quot; methods that retrieve the value most recently set by one of the standard MIDI channel messages. Similarly, methods for per-channel solo and mute have been added.</source>
          <target state="translated">&lt;code&gt;MidiChannel&lt;/code&gt; のオブジェクトは、単一のMIDIチャンネルを表します。一般に、各 &lt;code&gt;MidiChannel&lt;/code&gt; メソッドは、MIDI仕様で定義されている、同じ名前のMIDI「チャネルボイス」または「チャネルモード」メッセージを処理します。ただし、 &lt;code&gt;MidiChannel&lt;/code&gt; には、標準MIDIチャネルメッセージの1つによって最後に設定された値を取得する「get」メソッドがいくつか追加されています。同様に、チャンネルごとのソロとミュートのメソッドが追加されました。</target>
        </trans-unit>
        <trans-unit id="d29f38e3f918da8dc28f11c91b574df75fb3581a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDevice.Info&lt;/code&gt; object contains assorted data about a &lt;a href=&quot;mididevice&quot;&gt;&lt;code&gt;MidiDevice&lt;/code&gt;&lt;/a&gt;, including its name, the company who created it, and descriptive text.</source>
          <target state="translated">A &lt;code&gt;MidiDevice.Info&lt;/code&gt; object contains assorted data about a &lt;a href=&quot;mididevice&quot;&gt; &lt;code&gt;MidiDevice&lt;/code&gt; &lt;/a&gt;, including its name, the company who created it, and descriptive text.</target>
        </trans-unit>
        <trans-unit id="1f2d3effb9276c4453dfb28467e6bcfc3448d55d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDevice.Info&lt;/code&gt; object contains assorted data about a &lt;code&gt;&lt;a href=&quot;mididevice&quot;&gt;&lt;code&gt;MidiDevice&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;, including its name, the company who created it, and descriptive text.</source>
          <target state="translated">&lt;code&gt;MidiDevice.Info&lt;/code&gt; のオブジェクトは、およそ各種データが含ま &lt;code&gt;&lt;a href=&quot;mididevice&quot;&gt;&lt;code&gt;MidiDevice&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; その名前、製作会社名、説明テキストなどを、。</target>
        </trans-unit>
        <trans-unit id="4429461eb7a4efbdf69a4aeb669bf5eced481a98" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDevice&lt;/code&gt; can be a transmitter or a receiver of MIDI events, or both. Therefore, it can provide &lt;a href=&quot;transmitter&quot;&gt;&lt;code&gt;Transmitter&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;Receiver&lt;/code&gt;&lt;/a&gt; instances (or both). Typically, MIDI IN ports provide transmitters, MIDI OUT ports and synthesizers provide receivers. A Sequencer typically provides transmitters for playback and receivers for recording.</source>
          <target state="translated">A &lt;code&gt;MidiDevice&lt;/code&gt; 送信機またはMIDIイベント、または両方の受信機であってもよいです。したがって、&lt;a href=&quot;transmitter&quot;&gt; &lt;code&gt;Transmitter&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;receiver&quot;&gt; &lt;code&gt;Receiver&lt;/code&gt; &lt;/a&gt;インスタンス（またはその両方）を提供できます。通常、MIDI INポートはトランスミッタを提供し、MIDI OUTポートとシンセサイザはレシーバを提供します。シーケンサは通常、再生用のトランスミッタと録音用のレシーバを提供します。</target>
        </trans-unit>
        <trans-unit id="73037143518746bb4920c9fc38dc1c15052002f1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDevice&lt;/code&gt; can be opened and closed explicitly as well as implicitly. Explicit opening is accomplished by calling &lt;a href=&quot;#open()&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;, explicit closing is done by calling &lt;a href=&quot;#close()&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; on the &lt;code&gt;MidiDevice&lt;/code&gt; instance. If an application opens a &lt;code&gt;MidiDevice&lt;/code&gt; explicitly, it has to close it explicitly to free system resources and enable the application to exit cleanly. Implicit opening is done by calling &lt;a href=&quot;midisystem#getReceiver()&quot;&gt;&lt;code&gt;MidiSystem.getReceiver()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;midisystem#getTransmitter()&quot;&gt;&lt;code&gt;MidiSystem.getTransmitter()&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;MidiDevice&lt;/code&gt; used by &lt;code&gt;MidiSystem.getReceiver&lt;/code&gt; and &lt;code&gt;MidiSystem.getTransmitter&lt;/code&gt; is implementation-dependent unless the properties &lt;code&gt;javax.sound.midi.Receiver&lt;/code&gt; and &lt;code&gt;javax.sound.midi.Transmitter&lt;/code&gt; are used (see the description of properties to select default providers in &lt;a href=&quot;midisystem&quot;&gt;&lt;code&gt;MidiSystem&lt;/code&gt;&lt;/a&gt;). A &lt;code&gt;MidiDevice&lt;/code&gt; that was opened implicitly, is closed implicitly by closing the &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; that resulted in opening it. If more than one implicitly opening &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; were obtained by the application, the device is closed after the last &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; has been closed. On the other hand, calling &lt;code&gt;getReceiver&lt;/code&gt; or &lt;code&gt;getTransmitter&lt;/code&gt; on the device instance directly does not open the device implicitly. Closing these &lt;code&gt;Transmitter&lt;/code&gt;s and &lt;code&gt;Receiver&lt;/code&gt;s does not close the device implicitly. To use a device with &lt;code&gt;Receiver&lt;/code&gt;s or &lt;code&gt;Transmitter&lt;/code&gt;s obtained this way, the device has to be opened and closed explicitly.</source>
          <target state="translated">A &lt;code&gt;MidiDevice&lt;/code&gt; can be opened and closed explicitly as well as implicitly. Explicit opening is accomplished by calling &lt;a href=&quot;#open()&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;, explicit closing is done by calling &lt;a href=&quot;#close()&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt; on the &lt;code&gt;MidiDevice&lt;/code&gt; instance. If an application opens a &lt;code&gt;MidiDevice&lt;/code&gt; explicitly, it has to close it explicitly to free system resources and enable the application to exit cleanly. Implicit opening is done by calling &lt;a href=&quot;midisystem#getReceiver()&quot;&gt; &lt;code&gt;MidiSystem.getReceiver()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;midisystem#getTransmitter()&quot;&gt; &lt;code&gt;MidiSystem.getTransmitter()&lt;/code&gt; &lt;/a&gt;. The &lt;code&gt;MidiDevice&lt;/code&gt; used by &lt;code&gt;MidiSystem.getReceiver&lt;/code&gt; and &lt;code&gt;MidiSystem.getTransmitter&lt;/code&gt; is implementation-dependent unless the properties &lt;code&gt;javax.sound.midi.Receiver&lt;/code&gt; and &lt;code&gt;javax.sound.midi.Transmitter&lt;/code&gt; are used (see the description of properties to select default providers in &lt;a href=&quot;midisystem&quot;&gt; &lt;code&gt;MidiSystem&lt;/code&gt; &lt;/a&gt;). A &lt;code&gt;MidiDevice&lt;/code&gt; that was opened implicitly, is closed implicitly by closing the &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; that resulted in opening it. If more than one implicitly opening &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; were obtained by the application, the device is closed after the last &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; has been closed. On the other hand, calling &lt;code&gt;getReceiver&lt;/code&gt; or &lt;code&gt;getTransmitter&lt;/code&gt; on the device instance directly does not open the device implicitly. Closing these &lt;code&gt;Transmitter&lt;/code&gt; s and &lt;code&gt;Receiver&lt;/code&gt; s does not close the device implicitly. To use a device with &lt;code&gt;Receiver&lt;/code&gt; s or &lt;code&gt;Transmitter&lt;/code&gt; s obtained this way, the device has to be opened and closed explicitly.</target>
        </trans-unit>
        <trans-unit id="ef1a43b985855c29aef01aad7535cc36a37fca12" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDevice&lt;/code&gt; can be opened and closed explicitly as well as implicitly. Explicit opening is accomplished by calling &lt;a href=&quot;mididevice#open--&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt;, explicit closing is done by calling &lt;a href=&quot;mididevice#close--&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt; on the &lt;code&gt;MidiDevice&lt;/code&gt; instance. If an application opens a &lt;code&gt;MidiDevice&lt;/code&gt; explicitly, it has to close it explicitly to free system resources and enable the application to exit cleanly. Implicit opening is done by calling &lt;a href=&quot;midisystem#getReceiver--&quot;&gt;&lt;code&gt;MidiSystem.getReceiver&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;midisystem#getTransmitter--&quot;&gt;&lt;code&gt;MidiSystem.getTransmitter&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;MidiDevice&lt;/code&gt; used by &lt;code&gt;MidiSystem.getReceiver&lt;/code&gt; and &lt;code&gt;MidiSystem.getTransmitter&lt;/code&gt; is implementation-dependant unless the properties &lt;code&gt;javax.sound.midi.Receiver&lt;/code&gt; and &lt;code&gt;javax.sound.midi.Transmitter&lt;/code&gt; are used (see the description of properties to select default providers in &lt;a href=&quot;midisystem&quot;&gt;&lt;code&gt;MidiSystem&lt;/code&gt;&lt;/a&gt;). A &lt;code&gt;MidiDevice&lt;/code&gt; that was opened implicitly, is closed implicitly by closing the &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; that resulted in opening it. If more than one implicitly opening &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; were obtained by the application, the device is closed after the last &lt;code&gt;Receiver&lt;/code&gt; or &lt;code&gt;Transmitter&lt;/code&gt; has been closed. On the other hand, calling &lt;code&gt;getReceiver&lt;/code&gt; or &lt;code&gt;getTransmitter&lt;/code&gt; on the device instance directly does not open the device implicitly. Closing these &lt;code&gt;Transmitter&lt;/code&gt;s and &lt;code&gt;Receiver&lt;/code&gt;s does not close the device implicitly. To use a device with &lt;code&gt;Receiver&lt;/code&gt;s or &lt;code&gt;Transmitter&lt;/code&gt;s obtained this way, the device has to be opened and closed explicitly.</source>
          <target state="translated">A &lt;code&gt;MidiDevice&lt;/code&gt; 開かれ、暗黙的にも明示的に閉じることができます。明示的なオープンは&lt;a href=&quot;mididevice#open--&quot;&gt; &lt;code&gt;open()&lt;/code&gt; &lt;/a&gt;を呼び出すことで行われ、明示的なクローズは &lt;code&gt;MidiDevice&lt;/code&gt; インスタンスで&lt;a href=&quot;mididevice#close--&quot;&gt; &lt;code&gt;close()&lt;/code&gt; &lt;/a&gt;を呼び出すことで行われます。アプリケーションが &lt;code&gt;MidiDevice&lt;/code&gt; を明示的に開く場合は、システムリソースを解放してアプリケーションが正常に終了できるように、アプリケーションを明示的に閉じる必要があります。暗黙的なオープンは、&lt;a href=&quot;midisystem#getReceiver--&quot;&gt; &lt;code&gt;MidiSystem.getReceiver&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;midisystem#getTransmitter--&quot;&gt; &lt;code&gt;MidiSystem.getTransmitter&lt;/code&gt; を&lt;/a&gt;呼び出すことによって行われます。 &lt;code&gt;MidiDevice&lt;/code&gt; で使用 &lt;code&gt;MidiSystem.getReceiver&lt;/code&gt; と &lt;code&gt;MidiSystem.getTransmitter&lt;/code&gt; は実装依存特性ない限りであります &lt;code&gt;javax.sound.midi.Receiver&lt;/code&gt; および &lt;code&gt;javax.sound.midi.Transmitter&lt;/code&gt; が使用されます（&lt;a href=&quot;midisystem&quot;&gt; &lt;code&gt;MidiSystem&lt;/code&gt; で&lt;/a&gt;デフォルトプロバイダーを選択するためのプロパティの説明を参照してください）。暗黙的に開かれた &lt;code&gt;MidiDevice&lt;/code&gt; は、それを開く原因となった &lt;code&gt;Receiver&lt;/code&gt; または &lt;code&gt;Transmitter&lt;/code&gt; を閉じることによって暗黙的に閉じられます。アプリケーションによって暗黙的に開いている &lt;code&gt;Receiver&lt;/code&gt; または &lt;code&gt;Transmitter&lt;/code&gt; が複数取得された場合、最後の &lt;code&gt;Receiver&lt;/code&gt; または &lt;code&gt;Transmitter&lt;/code&gt; が閉じられた後にデバイスが閉じられます。一方、 &lt;code&gt;getReceiver&lt;/code&gt; または &lt;code&gt;getTransmitter&lt;/code&gt; を呼び出すデバイスインスタンスで直接デバイスを暗黙的に開くことはありません。これらの &lt;code&gt;Transmitter&lt;/code&gt; と &lt;code&gt;Receiver&lt;/code&gt; 閉じても、デバイスは暗黙的に閉じられません。この方法で取得した &lt;code&gt;Receiver&lt;/code&gt; または &lt;code&gt;Transmitter&lt;/code&gt; でデバイスを使用するには、デバイスを明示的に開閉する必要があります。</target>
        </trans-unit>
        <trans-unit id="e3efcb5be1434c81f03cbddbaadc4016017d3dd3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDevice&lt;/code&gt; includes a &lt;a href=&quot;mididevice.info&quot;&gt;&lt;code&gt;MidiDevice.Info&lt;/code&gt;&lt;/a&gt; object to provide manufacturer information and so on.</source>
          <target state="translated">A &lt;code&gt;MidiDevice&lt;/code&gt; includes a &lt;a href=&quot;mididevice.info&quot;&gt; &lt;code&gt;MidiDevice.Info&lt;/code&gt; &lt;/a&gt; object to provide manufacturer information and so on.</target>
        </trans-unit>
        <trans-unit id="7db816b29cf24e8a91f20dcd4cca5fcb5b1278eb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDevice&lt;/code&gt; includes a &lt;code&gt;&lt;a href=&quot;mididevice.info&quot;&gt;&lt;code&gt;MidiDevice.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; object to provide manufacturer information and so on.</source>
          <target state="translated">A &lt;code&gt;MidiDevice&lt;/code&gt; 含ま &lt;code&gt;&lt;a href=&quot;mididevice.info&quot;&gt;&lt;code&gt;MidiDevice.Info&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; のように製造者情報とを提供することを目的とします。</target>
        </trans-unit>
        <trans-unit id="8cc1fd3cea819e030e67804197f469d0190de70a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDeviceProvider&lt;/code&gt; is a factory or provider for a particular type of MIDI device.</source>
          <target state="translated">A &lt;code&gt;MidiDeviceProvider&lt;/code&gt; がは、 MIDIデバイスの特定のタイプのファクトリまたはプロバイダです。</target>
        </trans-unit>
        <trans-unit id="22c2795e1420ab167287908c52a758f064a0385e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiDeviceProvider&lt;/code&gt; is a factory or provider for a particular type of MIDI device. This mechanism allows the implementation to determine how resources are managed in the creation and management of a device.</source>
          <target state="translated">A &lt;code&gt;MidiDeviceProvider&lt;/code&gt; がは、 MIDIデバイスの特定のタイプのファクトリまたはプロバイダです。このメカニズムにより、実装は、デバイスの作成と管理におけるリソースの管理方法を決定できます。</target>
        </trans-unit>
        <trans-unit id="3a365e0072adf6018c7a45fe965c77b5ff34f79a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiFileFormat&lt;/code&gt; object can include a set of properties. A property is a pair of key and value: the key is of type &lt;code&gt;String&lt;/code&gt;, the associated property value is an arbitrary object. Properties specify additional informational meta data (like a author, or copyright). Properties are optional information, and file reader and file writer implementations are not required to provide or recognize properties.</source>
          <target state="translated">&lt;code&gt;MidiFileFormat&lt;/code&gt; のオブジェクトは、プロパティのセットを含むことができます。プロパティはキーと値のペアです。キーは &lt;code&gt;String&lt;/code&gt; 型で、関連付けられているプロパティ値は任意のオブジェクトです。プロパティは、追加の情報メタデータ（著者や著作権など）を指定します。プロパティはオプションの情報であり、ファイルリーダーとファイルライターの実装は、プロパティを提供または認識する必要はありません。</target>
        </trans-unit>
        <trans-unit id="02bac295f8f072ec44d74de766e4927dd0a110af" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiFileFormat&lt;/code&gt; object encapsulates a MIDI file's type, as well as its length and timing information.</source>
          <target state="translated">A &lt;code&gt;MidiFileFormat&lt;/code&gt; ののオブジェクトは、MIDIファイルの種類だけでなく、その長さやタイミング情報をカプセル化します。</target>
        </trans-unit>
        <trans-unit id="2b878e15bde87ac507d22902b909939ed90d36be" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiFileReader&lt;/code&gt; supplies MIDI file-reading services.</source>
          <target state="translated">&lt;code&gt;MidiFileReader&lt;/code&gt; はは、 MIDIファイル読み込みサービスを提供しています。</target>
        </trans-unit>
        <trans-unit id="63817d768f0fd5bd135044726715dc91b7d35f1f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiFileReader&lt;/code&gt; supplies MIDI file-reading services. Classes implementing this interface can parse the format information from one or more types of MIDI file, and can produce a &lt;a href=&quot;../sequence&quot;&gt;&lt;code&gt;Sequence&lt;/code&gt;&lt;/a&gt; object from files of these types.</source>
          <target state="translated">&lt;code&gt;MidiFileReader&lt;/code&gt; はは、 MIDIファイル読み込みサービスを提供しています。このインターフェイスを実装するクラスは、1つ以上のタイプのMIDIファイルからフォーマット情報を解析し、これらのタイプのファイルから&lt;a href=&quot;../sequence&quot;&gt; &lt;code&gt;Sequence&lt;/code&gt; &lt;/a&gt;オブジェクトを生成できます。</target>
        </trans-unit>
        <trans-unit id="18e0790864146b232d72e058bee3d2f1a5480e47" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiFileWriter&lt;/code&gt; supplies MIDI file-writing services.</source>
          <target state="translated">A &lt;code&gt;MidiFileWriter&lt;/code&gt; はは、 MIDIファイル書き込みサービスを提供します。</target>
        </trans-unit>
        <trans-unit id="586a7aeb0cbf6524813db1bd1765bcd6b1133f75" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiFileWriter&lt;/code&gt; supplies MIDI file-writing services. Classes that implement this interface can write one or more types of MIDI file from a &lt;a href=&quot;../sequence&quot;&gt;&lt;code&gt;Sequence&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">A &lt;code&gt;MidiFileWriter&lt;/code&gt; はは、 MIDIファイル書き込みサービスを提供します。このインターフェイスを実装するクラスは、&lt;a href=&quot;../sequence&quot;&gt; &lt;code&gt;Sequence&lt;/code&gt; &lt;/a&gt;オブジェクトから1つ以上のタイプのMIDIファイルを書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="f32314512dc1326f8c653bc76f3a7149e7754f8e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiUnavailableException&lt;/code&gt; is thrown when a requested MIDI component cannot be opened or created because it is unavailable.</source>
          <target state="translated">A &lt;code&gt;MidiUnavailableException&lt;/code&gt; は、それが使用できないため、要求されたMIDIコンポーネントが開いたり作成できない場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="4da275a041db1ba3738a86b4858e949c177031ed" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiUnavailableException&lt;/code&gt; is thrown when a requested MIDI component cannot be opened or created because it is unavailable. This often occurs when a device is in use by another application. More generally, it can occur when there is a finite number of a certain kind of resource that can be used for some purpose, and all of them are already in use (perhaps all by this application). For an example of the latter case, see the &lt;a href=&quot;transmitter#setReceiver(javax.sound.midi.Receiver)&quot;&gt;&lt;code&gt;setReceiver&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;Transmitter&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;MidiUnavailableException&lt;/code&gt; is thrown when a requested MIDI component cannot be opened or created because it is unavailable. This often occurs when a device is in use by another application. More generally, it can occur when there is a finite number of a certain kind of resource that can be used for some purpose, and all of them are already in use (perhaps all by this application). For an example of the latter case, see the &lt;a href=&quot;transmitter#setReceiver(javax.sound.midi.Receiver)&quot;&gt; &lt;code&gt;setReceiver&lt;/code&gt; &lt;/a&gt; method of &lt;code&gt;Transmitter&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b7c94d4d663e27a735bb120381a0efbe34ba5992" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MidiUnavailableException&lt;/code&gt; is thrown when a requested MIDI component cannot be opened or created because it is unavailable. This often occurs when a device is in use by another application. More generally, it can occur when there is a finite number of a certain kind of resource that can be used for some purpose, and all of them are already in use (perhaps all by this application). For an example of the latter case, see the &lt;a href=&quot;transmitter#setReceiver-javax.sound.midi.Receiver-&quot;&gt;&lt;code&gt;setReceiver&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;Transmitter&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;MidiUnavailableException&lt;/code&gt; は、それが使用できないため、要求されたMIDIコンポーネントが開いたり作成できない場合にスローされます。これは、デバイスが別のアプリケーションで使用されている場合によく発生します。より一般的には、ある目的に使用できる特定の種類のリソースが有限数あり、それらのすべてが既に使用されている場合に発生する可能性があります（おそらくすべてこのアプリケーションによって）。後者の例については、 &lt;code&gt;Transmitter&lt;/code&gt; の&lt;a href=&quot;transmitter#setReceiver-javax.sound.midi.Receiver-&quot;&gt; &lt;code&gt;setReceiver&lt;/code&gt; &lt;/a&gt;メソッドを参照してください。</target>
        </trans-unit>
        <trans-unit id="7bd6145bc2699f35d65222d486204f21b8e857d2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleFinder&lt;/code&gt; can only find one module with a given name. A &lt;code&gt;ModuleFinder&lt;/code&gt; that finds modules in a sequence of directories, for example, will locate the first occurrence of a module of a given name and will ignore other modules of that name that appear in directories later in the sequence.</source>
          <target state="translated">A &lt;code&gt;ModuleFinder&lt;/code&gt; can only find one module with a given name. A &lt;code&gt;ModuleFinder&lt;/code&gt; that finds modules in a sequence of directories, for example, will locate the first occurrence of a module of a given name and will ignore other modules of that name that appear in directories later in the sequence.</target>
        </trans-unit>
        <trans-unit id="151cc912e1882e06ada7b55608da3ce2c84a450c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleFinder&lt;/code&gt; is not required to be thread safe.</source>
          <target state="translated">A &lt;code&gt;ModuleFinder&lt;/code&gt; is not required to be thread safe.</target>
        </trans-unit>
        <trans-unit id="520a6bd5f2753ba51b6f22de28a264c06618cd0c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleFinder&lt;/code&gt; provides a consistent view of the modules that it locates. If &lt;a href=&quot;#findAll()&quot;&gt;&lt;code&gt;findAll&lt;/code&gt;&lt;/a&gt; is invoked several times then it will return the same (equals) result each time. For each &lt;code&gt;
 ModuleReference&lt;/code&gt; element in the returned set then it is guaranteed that &lt;a href=&quot;#find(java.lang.String)&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt; will locate the &lt;code&gt;ModuleReference&lt;/code&gt; if invoked to find that module.</source>
          <target state="translated">A &lt;code&gt;ModuleFinder&lt;/code&gt; provides a consistent view of the modules that it locates. If &lt;a href=&quot;#findAll()&quot;&gt; &lt;code&gt;findAll&lt;/code&gt; &lt;/a&gt; is invoked several times then it will return the same (equals) result each time. For each &lt;code&gt; ModuleReference&lt;/code&gt; element in the returned set then it is guaranteed that &lt;a href=&quot;#find(java.lang.String)&quot;&gt; &lt;code&gt;find&lt;/code&gt; &lt;/a&gt; will locate the &lt;code&gt;ModuleReference&lt;/code&gt; if invoked to find that module.</target>
        </trans-unit>
        <trans-unit id="97b1937e314095f2bf769efa2e7a74f81112e13c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleFinder&lt;/code&gt; provides a consistent view of the modules that it locates. If &lt;code&gt;find&lt;/code&gt; is invoked several times to locate the same module (by name) then it will return the same result each time. If a module is located then it is guaranteed to be a member of the set of modules returned by the &lt;a href=&quot;#findAll()&quot;&gt;&lt;code&gt;findAll&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">A &lt;code&gt;ModuleFinder&lt;/code&gt; provides a consistent view of the modules that it locates. If &lt;code&gt;find&lt;/code&gt; is invoked several times to locate the same module (by name) then it will return the same result each time. If a module is located then it is guaranteed to be a member of the set of modules returned by the &lt;a href=&quot;#findAll()&quot;&gt; &lt;code&gt;findAll&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="de8e7a181646738ad9cf4dd1d0b42aef252a897e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleFinder&lt;/code&gt; that composes a sequence of module finders</source>
          <target state="translated">A &lt;code&gt;ModuleFinder&lt;/code&gt; that composes a sequence of module finders</target>
        </trans-unit>
        <trans-unit id="67f4a0df08a8d45867ab49b2d4ff47b27a22e8a8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleFinder&lt;/code&gt; that locates modules on the file system</source>
          <target state="translated">A &lt;code&gt;ModuleFinder&lt;/code&gt; that locates modules on the file system</target>
        </trans-unit>
        <trans-unit id="3d0335579dc719decbc51f0f8113cda4f691e6c0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleFinder&lt;/code&gt; that locates the system modules</source>
          <target state="translated">A &lt;code&gt;ModuleFinder&lt;/code&gt; that locates the system modules</target>
        </trans-unit>
        <trans-unit id="b76309464d432cccc5060cc8cb02e6a531a9c67a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleReader&lt;/code&gt; implementation may require permissions to access resources in the module. Consequently the &lt;a href=&quot;#find(java.lang.String)&quot;&gt;&lt;code&gt;find&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#open(java.lang.String)&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#read(java.lang.String)&quot;&gt;&lt;code&gt;read&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#list()&quot;&gt;&lt;code&gt;list&lt;/code&gt;&lt;/a&gt; methods may throw &lt;code&gt;
 SecurityException&lt;/code&gt; if access is denied by the security manager.</source>
          <target state="translated">A &lt;code&gt;ModuleReader&lt;/code&gt; implementation may require permissions to access resources in the module. Consequently the &lt;a href=&quot;#find(java.lang.String)&quot;&gt; &lt;code&gt;find&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#open(java.lang.String)&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#read(java.lang.String)&quot;&gt; &lt;code&gt;read&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;#list()&quot;&gt; &lt;code&gt;list&lt;/code&gt; &lt;/a&gt; methods may throw &lt;code&gt; SecurityException&lt;/code&gt; if access is denied by the security manager.</target>
        </trans-unit>
        <trans-unit id="af26778fbff6483aeeddbb472619832eb42965da" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleReader&lt;/code&gt; is &lt;a href=&quot;modulereference#open()&quot;&gt;open&lt;/a&gt; upon creation and is closed by invoking the &lt;a href=&quot;#close()&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; method. Failure to close a module reader may result in a resource leak. The &lt;code&gt;
 try-with-resources&lt;/code&gt; statement provides a useful construct to ensure that module readers are closed.</source>
          <target state="translated">A &lt;code&gt;ModuleReader&lt;/code&gt; is &lt;a href=&quot;modulereference#open()&quot;&gt;open&lt;/a&gt; upon creation and is closed by invoking the &lt;a href=&quot;#close()&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt; method. Failure to close a module reader may result in a resource leak. The &lt;code&gt; try-with-resources&lt;/code&gt; statement provides a useful construct to ensure that module readers are closed.</target>
        </trans-unit>
        <trans-unit id="3ee49b131945159b783b1e371edebb40a8b5fa3a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ModuleReader&lt;/code&gt; to read the module</source>
          <target state="translated">A &lt;code&gt;ModuleReader&lt;/code&gt; to read the module</target>
        </trans-unit>
        <trans-unit id="9543d1e26988d85e148c57ef600ad6d84534e5ca" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MouseEvent&lt;/code&gt; object is also passed to every &lt;code&gt;MouseMotionListener&lt;/code&gt; or &lt;code&gt;MouseMotionAdapter&lt;/code&gt; object which is registered to receive mouse motion events using the component's &lt;code&gt;addMouseMotionListener&lt;/code&gt; method. (&lt;code&gt;MouseMotionAdapter&lt;/code&gt; objects implement the &lt;code&gt;MouseMotionListener&lt;/code&gt; interface.) Each such listener object gets a &lt;code&gt;MouseEvent&lt;/code&gt; containing the mouse motion event.</source>
          <target state="translated">A &lt;code&gt;MouseEvent&lt;/code&gt; object is also passed to every &lt;code&gt;MouseMotionListener&lt;/code&gt; or &lt;code&gt;MouseMotionAdapter&lt;/code&gt; object which is registered to receive mouse motion events using the component's &lt;code&gt;addMouseMotionListener&lt;/code&gt; method. ( &lt;code&gt;MouseMotionAdapter&lt;/code&gt; objects implement the &lt;code&gt;MouseMotionListener&lt;/code&gt; interface.) Each such listener object gets a &lt;code&gt;MouseEvent&lt;/code&gt; containing the mouse motion event.</target>
        </trans-unit>
        <trans-unit id="7042b6b3daa7338343941410c3d6d8af24662b2d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MouseEvent&lt;/code&gt; object is passed to every &lt;code&gt;MouseListener&lt;/code&gt; or &lt;code&gt;MouseAdapter&lt;/code&gt; object which is registered to receive the &quot;interesting&quot; mouse events using the component's &lt;code&gt;addMouseListener&lt;/code&gt; method. (&lt;code&gt;MouseAdapter&lt;/code&gt; objects implement the &lt;code&gt;MouseListener&lt;/code&gt; interface.) Each such listener object gets a &lt;code&gt;MouseEvent&lt;/code&gt; containing the mouse event.</source>
          <target state="translated">A &lt;code&gt;MouseEvent&lt;/code&gt; object is passed to every &lt;code&gt;MouseListener&lt;/code&gt; or &lt;code&gt;MouseAdapter&lt;/code&gt; object which is registered to receive the &quot;interesting&quot; mouse events using the component's &lt;code&gt;addMouseListener&lt;/code&gt; method. ( &lt;code&gt;MouseAdapter&lt;/code&gt; objects implement the &lt;code&gt;MouseListener&lt;/code&gt; interface.) Each such listener object gets a &lt;code&gt;MouseEvent&lt;/code&gt; containing the mouse event.</target>
        </trans-unit>
        <trans-unit id="cccb397dcd14457d099ecaa7105d1f34c6f009b5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MouseListener&lt;/code&gt; object is registered via &lt;code&gt;addMouseListener&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;MouseListener&lt;/code&gt; object is registered via &lt;code&gt;addMouseListener&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="9ef9a9409a13d087d6ca94c2dd527fd7bcfe8f57" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MouseMotionListener&lt;/code&gt; object is registered via &lt;code&gt;addMouseMotionListener&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;MouseMotionListener&lt;/code&gt; object is registered via &lt;code&gt;addMouseMotionListener&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="fa4ce636c398e062ad05ccc33de8832fe91cc03c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MouseWheelListener&lt;/code&gt; object is registered via &lt;code&gt;addMouseWheelListener&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;MouseWheelListener&lt;/code&gt; object is registered via &lt;code&gt;addMouseWheelListener&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="f288774a826422b9a89638b2ddfd02698e03d33c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MutableCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target variable behaves like an ordinary field.</source>
          <target state="translated">A &lt;code&gt;MutableCallSite&lt;/code&gt; がある&lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt;そのターゲット変数通常のフィールドのように動作します。</target>
        </trans-unit>
        <trans-unit id="97bd9615782b9cae8342b464551053132d8a5c9d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MutableCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target variable behaves like an ordinary field. An &lt;code&gt;invokedynamic&lt;/code&gt; instruction linked to a &lt;code&gt;MutableCallSite&lt;/code&gt; delegates all calls to the site's current target. The &lt;a href=&quot;callsite#dynamicInvoker()&quot;&gt;dynamic invoker&lt;/a&gt; of a mutable call site also delegates each call to the site's current target.</source>
          <target state="translated">A &lt;code&gt;MutableCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt; whose target variable behaves like an ordinary field. An &lt;code&gt;invokedynamic&lt;/code&gt; instruction linked to a &lt;code&gt;MutableCallSite&lt;/code&gt; delegates all calls to the site's current target. The &lt;a href=&quot;callsite#dynamicInvoker()&quot;&gt;dynamic invoker&lt;/a&gt; of a mutable call site also delegates each call to the site's current target.</target>
        </trans-unit>
        <trans-unit id="7dbbbebff1a773ccfef19e1f057066dee938b48b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MutableCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target variable behaves like an ordinary field. An &lt;code&gt;invokedynamic&lt;/code&gt; instruction linked to a &lt;code&gt;MutableCallSite&lt;/code&gt; delegates all calls to the site's current target. The &lt;a href=&quot;callsite#dynamicInvoker--&quot;&gt;dynamic invoker&lt;/a&gt; of a mutable call site also delegates each call to the site's current target.</source>
          <target state="translated">A &lt;code&gt;MutableCallSite&lt;/code&gt; がある&lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt;そのターゲット変数通常のフィールドのように動作します。 &lt;code&gt;invokedynamic&lt;/code&gt; の命令は、にリンクされている &lt;code&gt;MutableCallSite&lt;/code&gt; の代表者、サイトの現在のターゲットへのすべての呼び出しを。可変呼び出しサイトの&lt;a href=&quot;callsite#dynamicInvoker--&quot;&gt;動的呼び出し元&lt;/a&gt;は、各呼び出しをサイトの現在のターゲットに委任します。</target>
        </trans-unit>
        <trans-unit id="ddea2e9580b4e5b08cf0cb2cef7357024c227bdd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Name&lt;/code&gt; parameter passed to any method is owned by the caller. The service provider will not modify the object or keep a reference to it. A &lt;code&gt;ResolveResult&lt;/code&gt; object returned by any method is owned by the caller. The caller may subsequently modify it; the service provider may not.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; 任意のメソッドに渡されるパラメータは、呼び出し側が所有しています。サービスプロバイダーは、オブジェクトを変更したり、オブジェクトへの参照を保持したりしません。 &lt;code&gt;ResolveResult&lt;/code&gt; のいずれかの方法で返されるオブジェクトは呼び出し側が所有しています。呼び出し元は後でそれを変更できます。サービスプロバイダーはそうしないかもしれません。</target>
        </trans-unit>
        <trans-unit id="f35879cc18f0c6f1e6c601de043d035821ee29c3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Name&lt;/code&gt; parameter passed to any method of the &lt;code&gt;Context&lt;/code&gt; interface or one of its subinterfaces will not be modified by the service provider. The service provider may keep a reference to it for the duration of the operation, including any enumeration of the method's results and the processing of any referrals generated. The caller should not modify the object during this time. A &lt;code&gt;Name&lt;/code&gt; returned by any such method is owned by the caller. The caller may subsequently modify it; the service provider may not.</source>
          <target state="translated">A &lt;code&gt;Name&lt;/code&gt; の任意のメソッドに渡されるパラメータ &lt;code&gt;Context&lt;/code&gt; インターフェイスまたはそのサブインターフェイスの一方は、サービスプロバイダによって変更されません。サービスプロバイダーは、メソッドの結果の列挙や生成されたリフェラルの処理など、操作の実行中は参照を維持できます。この間、呼び出し元はオブジェクトを変更しないでください。このようなメソッドによって返される &lt;code&gt;Name&lt;/code&gt; は、呼び出し元が所有します。呼び出し元は後でそれを変更できます。サービスプロバイダーはそうしないかもしれません。</target>
        </trans-unit>
        <trans-unit id="1484e0dfd575a64d5fdcfe553e17b7f0c185a086" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the attributes of this node (if it is an &lt;code&gt;Element&lt;/code&gt;) or &lt;code&gt;null&lt;/code&gt; otherwise.</source>
          <target state="translated">A &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the attributes of this node (if it is an &lt;code&gt;Element&lt;/code&gt; ) or &lt;code&gt;null&lt;/code&gt; otherwise.</target>
        </trans-unit>
        <trans-unit id="a29ed6eaa294500c0f869a620c135ed5c065d755" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the general entities, both external and internal, declared in the DTD.</source>
          <target state="translated">A &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the general entities, both external and internal, declared in the DTD.</target>
        </trans-unit>
        <trans-unit id="00195fef233e2a80558c312ad3d6dba296e81674" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the general entities, both external and internal, declared in the DTD. Parameter entities are not contained. Duplicates are discarded. For example in:</source>
          <target state="translated">A &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the general entities, both external and internal, declared in the DTD. Parameter entities are not contained. Duplicates are discarded. For example in:</target>
        </trans-unit>
        <trans-unit id="73aa833cac5a7f47b147b0a4d4d4eb73d37289e0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the notations declared in the DTD.</source>
          <target state="translated">A &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the notations declared in the DTD.</target>
        </trans-unit>
        <trans-unit id="c5b840d837bc263d4d3242dc37a8cc6a92576537" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the notations declared in the DTD. Duplicates are discarded. Every node in this map also implements the &lt;code&gt;Notation&lt;/code&gt; interface.</source>
          <target state="translated">A &lt;code&gt;NamedNodeMap&lt;/code&gt; containing the notations declared in the DTD. Duplicates are discarded. Every node in this map also implements the &lt;code&gt;Notation&lt;/code&gt; interface.</target>
        </trans-unit>
        <trans-unit id="8473a973a44184ea3d9b6302ea62f682af8b1f55" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NavigableMap&lt;/code&gt; may be accessed and traversed in either ascending or descending key order. The &lt;a href=&quot;#descendingMap()&quot;&gt;&lt;code&gt;descendingMap()&lt;/code&gt;&lt;/a&gt; method returns a view of the map with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. Methods &lt;a href=&quot;#subMap(K,boolean,K,boolean)&quot;&gt;&lt;code&gt;subMap(K, boolean, K, boolean)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#headMap(K,boolean)&quot;&gt;&lt;code&gt;headMap(K, boolean)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#tailMap(K,boolean)&quot;&gt;&lt;code&gt;tailMap(K, boolean)&lt;/code&gt;&lt;/a&gt; differ from the like-named &lt;code&gt;SortedMap&lt;/code&gt; methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Submaps of any &lt;code&gt;NavigableMap&lt;/code&gt; must implement the &lt;code&gt;NavigableMap&lt;/code&gt; interface.</source>
          <target state="translated">A &lt;code&gt;NavigableMap&lt;/code&gt; may be accessed and traversed in either ascending or descending key order. The &lt;a href=&quot;#descendingMap()&quot;&gt; &lt;code&gt;descendingMap()&lt;/code&gt; &lt;/a&gt; method returns a view of the map with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. Methods &lt;a href=&quot;#subMap(K,boolean,K,boolean)&quot;&gt; &lt;code&gt;subMap(K, boolean, K, boolean)&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#headMap(K,boolean)&quot;&gt; &lt;code&gt;headMap(K, boolean)&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;#tailMap(K,boolean)&quot;&gt; &lt;code&gt;tailMap(K, boolean)&lt;/code&gt; &lt;/a&gt; differ from the like-named &lt;code&gt;SortedMap&lt;/code&gt; methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Submaps of any &lt;code&gt;NavigableMap&lt;/code&gt; must implement the &lt;code&gt;NavigableMap&lt;/code&gt; interface.</target>
        </trans-unit>
        <trans-unit id="26ae98ff07d84a581b94b546be70a1c3091b0550" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NavigableMap&lt;/code&gt; may be accessed and traversed in either ascending or descending key order. The &lt;code&gt;descendingMap&lt;/code&gt; method returns a view of the map with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. Methods &lt;code&gt;subMap&lt;/code&gt;, &lt;code&gt;headMap&lt;/code&gt;, and &lt;code&gt;tailMap&lt;/code&gt; differ from the like-named &lt;code&gt;SortedMap&lt;/code&gt; methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Submaps of any &lt;code&gt;NavigableMap&lt;/code&gt; must implement the &lt;code&gt;NavigableMap&lt;/code&gt; interface.</source>
          <target state="translated">A &lt;code&gt;NavigableMap&lt;/code&gt; のは、アクセスのいずれか昇順または降順キーの順序で横断することができます。 &lt;code&gt;descendingMap&lt;/code&gt; の方法は、反転すべてのリレーショナルと指向方法の感覚を持つ地図のビューを返します。昇順の操作とビューのパフォーマンスは、降順の操作とビューのパフォーマンスよりも速い可能性があります。メソッド &lt;code&gt;subMap&lt;/code&gt; 、 &lt;code&gt;headMap&lt;/code&gt; 、および &lt;code&gt;tailMap&lt;/code&gt; は、下限と上限が包括的であるか排他的であるかを記述する追加の引数を受け入れる点で、同じ名前の &lt;code&gt;SortedMap&lt;/code&gt; メソッドとは異なります。 &lt;code&gt;NavigableMap&lt;/code&gt; のサブマップは、 &lt;code&gt;NavigableMap&lt;/code&gt; インターフェースを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="3024e348667f5731d8014b894f6d9fe0d9449b55" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NavigableSet&lt;/code&gt; may be accessed and traversed in either ascending or descending order. The &lt;a href=&quot;#descendingSet()&quot;&gt;&lt;code&gt;descendingSet()&lt;/code&gt;&lt;/a&gt; method returns a view of the set with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. This interface additionally defines methods &lt;a href=&quot;#pollFirst()&quot;&gt;&lt;code&gt;pollFirst()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#pollLast()&quot;&gt;&lt;code&gt;pollLast()&lt;/code&gt;&lt;/a&gt; that return and remove the lowest and highest element, if one exists, else returning &lt;code&gt;null&lt;/code&gt;. Methods &lt;a href=&quot;#subSet(E,boolean,E,boolean)&quot;&gt;&lt;code&gt;subSet(E, boolean, E, boolean)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#headSet(E,boolean)&quot;&gt;&lt;code&gt;headSet(E, boolean)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#tailSet(E,boolean)&quot;&gt;&lt;code&gt;tailSet(E, boolean)&lt;/code&gt;&lt;/a&gt; differ from the like-named &lt;code&gt;SortedSet&lt;/code&gt; methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Subsets of any &lt;code&gt;NavigableSet&lt;/code&gt; must implement the &lt;code&gt;NavigableSet&lt;/code&gt; interface.</source>
          <target state="translated">A &lt;code&gt;NavigableSet&lt;/code&gt; may be accessed and traversed in either ascending or descending order. The &lt;a href=&quot;#descendingSet()&quot;&gt; &lt;code&gt;descendingSet()&lt;/code&gt; &lt;/a&gt; method returns a view of the set with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. This interface additionally defines methods &lt;a href=&quot;#pollFirst()&quot;&gt; &lt;code&gt;pollFirst()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;#pollLast()&quot;&gt; &lt;code&gt;pollLast()&lt;/code&gt; &lt;/a&gt; that return and remove the lowest and highest element, if one exists, else returning &lt;code&gt;null&lt;/code&gt; . Methods &lt;a href=&quot;#subSet(E,boolean,E,boolean)&quot;&gt; &lt;code&gt;subSet(E, boolean, E, boolean)&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#headSet(E,boolean)&quot;&gt; &lt;code&gt;headSet(E, boolean)&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;#tailSet(E,boolean)&quot;&gt; &lt;code&gt;tailSet(E, boolean)&lt;/code&gt; &lt;/a&gt; differ from the like-named &lt;code&gt;SortedSet&lt;/code&gt; methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Subsets of any &lt;code&gt;NavigableSet&lt;/code&gt; must implement the &lt;code&gt;NavigableSet&lt;/code&gt; interface.</target>
        </trans-unit>
        <trans-unit id="c66d9145f89916cb5ca92325d0da454b29a1f136" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NetworkInterface&lt;/code&gt; or &lt;code&gt;null&lt;/code&gt; if there is no network interface with the specified IP address.</source>
          <target state="translated">A &lt;code&gt;NetworkInterface&lt;/code&gt; または &lt;code&gt;null&lt;/code&gt; が指定したIPアドレスを持つネットワークインタフェースが存在しない場合。</target>
        </trans-unit>
        <trans-unit id="79e6780e84690e8bd58f9e8be9004880b83eab6d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NetworkInterface&lt;/code&gt; with the specified name, or &lt;code&gt;null&lt;/code&gt; if there is no network interface with the specified name.</source>
          <target state="translated">A &lt;code&gt;NetworkInterface&lt;/code&gt; 指定された名前、または持つ &lt;code&gt;null&lt;/code&gt; が指定された名前を持つネットワークインタフェースが存在しない場合。</target>
        </trans-unit>
        <trans-unit id="47734803ceb6e3dd1d15a3ef0495e65125bb9572" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NoSuchMechanismException&lt;/code&gt; can contain a cause: another throwable that caused this &lt;code&gt;NoSuchMechanismException&lt;/code&gt; to get thrown.</source>
          <target state="translated">A &lt;code&gt;NoSuchMechanismException&lt;/code&gt; can contain a cause: another throwable that caused this &lt;code&gt;NoSuchMechanismException&lt;/code&gt; to get thrown.</target>
        </trans-unit>
        <trans-unit id="22ec30ce1b97673fedafc6ce3a5d02e2fc789696" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NoSuchObjectException&lt;/code&gt; is thrown if an attempt is made to invoke a method on an object that no longer exists in the remote virtual machine.</source>
          <target state="translated">A &lt;code&gt;NoSuchObjectException&lt;/code&gt; is thrown if an attempt is made to invoke a method on an object that no longer exists in the remote virtual machine.</target>
        </trans-unit>
        <trans-unit id="a555720718d66c0baeb281fa2e824e7c3a711c3b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NoSuchObjectException&lt;/code&gt; is thrown if an attempt is made to invoke a method on an object that no longer exists in the remote virtual machine. If a &lt;code&gt;NoSuchObjectException&lt;/code&gt; occurs attempting to invoke a method on a remote object, the call may be retransmitted and still preserve RMI's &quot;at most once&quot; call semantics. A &lt;code&gt;NoSuchObjectException&lt;/code&gt; is also thrown by the method &lt;code&gt;java.rmi.server.RemoteObject.toStub&lt;/code&gt; and by the &lt;code&gt;unexportObject&lt;/code&gt; methods of &lt;code&gt;java.rmi.server.UnicastRemoteObject&lt;/code&gt; and &lt;code&gt;java.rmi.activation.Activatable&lt;/code&gt; and</source>
          <target state="translated">A &lt;code&gt;NoSuchObjectException&lt;/code&gt; is thrown if an attempt is made to invoke a method on an object that no longer exists in the remote virtual machine. If a &lt;code&gt;NoSuchObjectException&lt;/code&gt; occurs attempting to invoke a method on a remote object, the call may be retransmitted and still preserve RMI's &quot;at most once&quot; call semantics. A &lt;code&gt;NoSuchObjectException&lt;/code&gt; is also thrown by the method &lt;code&gt;java.rmi.server.RemoteObject.toStub&lt;/code&gt; and by the &lt;code&gt;unexportObject&lt;/code&gt; methods of &lt;code&gt;java.rmi.server.UnicastRemoteObject&lt;/code&gt; and &lt;code&gt;java.rmi.activation.Activatable&lt;/code&gt; and</target>
        </trans-unit>
        <trans-unit id="78ff662ce60349b988cae8bc43b4f7d139713630" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Node&lt;/code&gt; (of any type) with the specified &lt;code&gt;nodeName&lt;/code&gt;, or &lt;code&gt;null&lt;/code&gt; if it does not identify any node in this map.</source>
          <target state="translated">A &lt;code&gt;Node&lt;/code&gt; (of any type) with the specified &lt;code&gt;nodeName&lt;/code&gt; , or &lt;code&gt;null&lt;/code&gt; if it does not identify any node in this map.</target>
        </trans-unit>
        <trans-unit id="0d617f4ce51e8d2626e03760aa9fddaca1b90d4a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Node&lt;/code&gt; (of any type) with the specified local name and namespace URI, or &lt;code&gt;null&lt;/code&gt; if they do not identify any node in this map.</source>
          <target state="translated">A &lt;code&gt;Node&lt;/code&gt; (of any type) with the specified local name and namespace URI, or &lt;code&gt;null&lt;/code&gt; if they do not identify any node in this map.</target>
        </trans-unit>
        <trans-unit id="8905f541ed33bf537e53361b7e5249ead89ea651" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NodeList&lt;/code&gt; that contains all children of this node.</source>
          <target state="translated">A &lt;code&gt;NodeList&lt;/code&gt; that contains all children of this node.</target>
        </trans-unit>
        <trans-unit id="9ee22797d9d162e4a5c835020982a08af19e947a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NodeList&lt;/code&gt; that contains all children of this node. If there are no children, this is a &lt;code&gt;NodeList&lt;/code&gt; containing no nodes.</source>
          <target state="translated">A &lt;code&gt;NodeList&lt;/code&gt; that contains all children of this node. If there are no children, this is a &lt;code&gt;NodeList&lt;/code&gt; containing no nodes.</target>
        </trans-unit>
        <trans-unit id="78f8655fafea08a38349d6c4b99e445e18f24366" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NotBoundException&lt;/code&gt; is thrown if an attempt is made to lookup or unbind in the registry a name that has no associated binding.</source>
          <target state="translated">A &lt;code&gt;NotBoundException&lt;/code&gt; is thrown if an attempt is made to lookup or unbind in the registry a name that has no associated binding.</target>
        </trans-unit>
        <trans-unit id="f905cd07907538b4a504bef2446ba3f796141db0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Notation&lt;/code&gt; node does not have any parent.</source>
          <target state="translated">A &lt;code&gt;Notation&lt;/code&gt; node does not have any parent.</target>
        </trans-unit>
        <trans-unit id="6fb26775a9fdcc1c3bf7e667ca62b4a0e3847451" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NotificationResult&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;NotificationResult&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="499bbbe749d1a8fe35d2d63486ceb566b6f99956" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NullPointerException&lt;/code&gt; is thrown if &lt;code&gt;nsContext&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;NullPointerException&lt;/code&gt; is thrown if &lt;code&gt;nsContext&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="7a241740ed76ba1500385e19d2672c53d6568516" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NullPointerException&lt;/code&gt; is thrown if &lt;code&gt;resolver&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;NullPointerException&lt;/code&gt; is thrown if &lt;code&gt;resolver&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="945c414a6ef8a9eb9ea267fe5c9e9ffbea32a062" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Number&lt;/code&gt; parsed from the string.</source>
          <target state="translated">A &lt;code&gt;Number&lt;/code&gt; 文字列から解析しました。</target>
        </trans-unit>
        <trans-unit id="07267f60c29eb956490162424a03b8eaa0ddf249" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Number&lt;/code&gt; parsed from the string. In case of error, returns null.</source>
          <target state="translated">A &lt;code&gt;Number&lt;/code&gt; 文字列から解析しました。エラーの場合、nullを返します。</target>
        </trans-unit>
        <trans-unit id="1af1d23d0fb47c7b520a040ff295b3966f9f68e5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NumberFormat&lt;/code&gt; instance for compact number formatting</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="9f4696afd159bc736f50e3e0bf524a48873d8bd0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NumericShaper.Range&lt;/code&gt; represents a Unicode range of a script having its own decimal digits.</source>
          <target state="translated">A &lt;code&gt;NumericShaper.Range&lt;/code&gt; represents a Unicode range of a script having its own decimal digits.</target>
        </trans-unit>
        <trans-unit id="56e5b0ad5467779fba265ba1ef5ecb4b612cbe0d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NumericShaper.Range&lt;/code&gt; represents a Unicode range of a script having its own decimal digits. For example, the &lt;a href=&quot;#THAI&quot;&gt;&lt;code&gt;THAI&lt;/code&gt;&lt;/a&gt; range has the Thai digits, THAI DIGIT ZERO (U+0E50) to THAI DIGIT NINE (U+0E59).</source>
          <target state="translated">A &lt;code&gt;NumericShaper.Range&lt;/code&gt; represents a Unicode range of a script having its own decimal digits. For example, the &lt;a href=&quot;#THAI&quot;&gt; &lt;code&gt;THAI&lt;/code&gt; &lt;/a&gt; range has the Thai digits, THAI DIGIT ZERO (U+0E50) to THAI DIGIT NINE (U+0E59).</target>
        </trans-unit>
        <trans-unit id="736e9e890567a024806b1d5102a661882d8bb329" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PGPData&lt;/code&gt; instance may be created by invoking one of the &lt;a href=&quot;keyinfofactory#newPGPData(byte%5B%5D)&quot;&gt;&lt;code&gt;newPGPData&lt;/code&gt;&lt;/a&gt; methods of the &lt;a href=&quot;keyinfofactory&quot;&gt;&lt;code&gt;KeyInfoFactory&lt;/code&gt;&lt;/a&gt; class, and passing it &lt;code&gt;byte&lt;/code&gt; arrays representing the contents of the PGP public key identifier and/or PGP key material packet, and an optional list of elements from an external namespace.</source>
          <target state="translated">A &lt;code&gt;PGPData&lt;/code&gt; instance may be created by invoking one of the &lt;a href=&quot;keyinfofactory#newPGPData(byte%5B%5D)&quot;&gt; &lt;code&gt;newPGPData&lt;/code&gt; &lt;/a&gt; methods of the &lt;a href=&quot;keyinfofactory&quot;&gt; &lt;code&gt;KeyInfoFactory&lt;/code&gt; &lt;/a&gt; class, and passing it &lt;code&gt;byte&lt;/code&gt; arrays representing the contents of the PGP public key identifier and/or PGP key material packet, and an optional list of elements from an external namespace.</target>
        </trans-unit>
        <trans-unit id="8a2e68373d50ce1993a491419ed8183f080a7dde" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; for checking the revocation status of certificates with the PKIX algorithm.</source>
          <target state="translated">PKIXアルゴリズムを使用して証明書の失効ステータスをチェックするための &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="79e2a20db8442012e6eb5a55cd86128049dfa98d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; may be called multiple times on successive certificates in a certification path. Concrete subclasses are expected to maintain any internal state that may be necessary to check successive certificates. The &lt;a href=&quot;#init(boolean)&quot;&gt;&lt;code&gt;init&lt;/code&gt;&lt;/a&gt; method is used to initialize the internal state of the checker so that the certificates of a new certification path may be checked. A stateful implementation &lt;b&gt;must&lt;/b&gt; override the &lt;a href=&quot;#clone()&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; method if necessary in order to allow a PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt; to efficiently backtrack and try other paths. In these situations, the &lt;code&gt;CertPathBuilder&lt;/code&gt; is able to restore prior path validation states by restoring the cloned &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;s.</source>
          <target state="translated">A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; may be called multiple times on successive certificates in a certification path. Concrete subclasses are expected to maintain any internal state that may be necessary to check successive certificates. The &lt;a href=&quot;#init(boolean)&quot;&gt; &lt;code&gt;init&lt;/code&gt; &lt;/a&gt; method is used to initialize the internal state of the checker so that the certificates of a new certification path may be checked. A stateful implementation &lt;b&gt;must&lt;/b&gt; override the &lt;a href=&quot;#clone()&quot;&gt; &lt;code&gt;clone&lt;/code&gt; &lt;/a&gt; method if necessary in order to allow a PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt; to efficiently backtrack and try other paths. In these situations, the &lt;code&gt;CertPathBuilder&lt;/code&gt; is able to restore prior path validation states by restoring the cloned &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; s.</target>
        </trans-unit>
        <trans-unit id="65b6019c9f6b36bf4a4374f0323b98058d8f83d4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; may be called multiple times on successive certificates in a certification path. Concrete subclasses are expected to maintain any internal state that may be necessary to check successive certificates. The &lt;a href=&quot;pkixcertpathchecker#init-boolean-&quot;&gt;&lt;code&gt;init&lt;/code&gt;&lt;/a&gt; method is used to initialize the internal state of the checker so that the certificates of a new certification path may be checked. A stateful implementation &lt;b&gt;must&lt;/b&gt; override the &lt;a href=&quot;pkixcertpathchecker#clone--&quot;&gt;&lt;code&gt;clone&lt;/code&gt;&lt;/a&gt; method if necessary in order to allow a PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt; to efficiently backtrack and try other paths. In these situations, the &lt;code&gt;CertPathBuilder&lt;/code&gt; is able to restore prior path validation states by restoring the cloned &lt;code&gt;PKIXCertPathChecker&lt;/code&gt;s.</source>
          <target state="translated">A &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; 証明書パス内の連続する証明書に複数回呼び出すことができます。具象サブクラスは、連続する証明書をチェックするために必要になる可能性のある内部状態を維持することが期待されています。&lt;a href=&quot;pkixcertpathchecker#init-boolean-&quot;&gt; &lt;code&gt;init&lt;/code&gt; &lt;/a&gt;メソッドは、新しい証明書パスの証明書を確認することができるようにチェッカーの内部状態を初期化するために使用されます。PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt; が効率的にバックトラックして他のパスを試行できるようにするために、ステートフルな実装&lt;b&gt;は&lt;/b&gt;、必要に応じて&lt;a href=&quot;pkixcertpathchecker#clone--&quot;&gt; &lt;code&gt;clone&lt;/code&gt; &lt;/a&gt;メソッドをオーバーライドする&lt;b&gt;必要があり&lt;/b&gt;ます。これらの状況では、 &lt;code&gt;CertPathBuilder&lt;/code&gt; は、複製された &lt;code&gt;PKIXCertPathChecker&lt;/code&gt; を復元することにより、以前のパス検証状態を復元できます。</target>
        </trans-unit>
        <trans-unit id="e2aa3cb94194902df1ddaeffd50bf581104fa46a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; checks the revocation status of certificates with the Online Certificate Status Protocol (OCSP) or Certificate Revocation Lists (CRLs). OCSP is described in RFC 2560 and is a network protocol for determining the status of a certificate. A CRL is a time-stamped list identifying revoked certificates, and RFC 5280 describes an algorithm for determining the revocation status of certificates using CRLs.</source>
          <target state="translated">A &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; のチェック、オンライン証明書状態プロトコル（OCSP）または証明書失効リスト（CRL）と証明書の失効ステータスを。 OCSPはRFC 2560で説明されており、証明書のステータスを判別するためのネットワークプロトコルです。 CRLは失効した証明書を識別するタイムスタンプ付きリストであり、RFC 5280はCRLを使用して証明書の失効ステータスを決定するアルゴリズムを記述しています。</target>
        </trans-unit>
        <trans-unit id="b291c2578ded61f2aca8159ee09dde07c31f0c1d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; is obtained by calling the &lt;a href=&quot;certpathvalidator#getRevocationChecker()&quot;&gt;&lt;code&gt;getRevocationChecker&lt;/code&gt;&lt;/a&gt; method of a PKIX &lt;code&gt;CertPathValidator&lt;/code&gt;. Additional parameters and options specific to revocation can be set (by calling the &lt;a href=&quot;#setOcspResponder(java.net.URI)&quot;&gt;&lt;code&gt;setOcspResponder&lt;/code&gt;&lt;/a&gt; method for instance). The &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; is added to a &lt;code&gt;PKIXParameters&lt;/code&gt; object using the &lt;a href=&quot;pkixparameters#addCertPathChecker(java.security.cert.PKIXCertPathChecker)&quot;&gt;&lt;code&gt;addCertPathChecker&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;pkixparameters#setCertPathCheckers(java.util.List)&quot;&gt;&lt;code&gt;setCertPathCheckers&lt;/code&gt;&lt;/a&gt; method, and then the &lt;code&gt;PKIXParameters&lt;/code&gt; is passed along with the &lt;code&gt;CertPath&lt;/code&gt; to be validated to the &lt;a href=&quot;certpathvalidator#validate(java.security.cert.CertPath,java.security.cert.CertPathParameters)&quot;&gt;&lt;code&gt;validate&lt;/code&gt;&lt;/a&gt; method of a PKIX &lt;code&gt;CertPathValidator&lt;/code&gt;. When supplying a revocation checker in this manner, it will be used to check revocation irrespective of the setting of the &lt;a href=&quot;pkixparameters#isRevocationEnabled()&quot;&gt;&lt;code&gt;RevocationEnabled&lt;/code&gt;&lt;/a&gt; flag. Similarly, a &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; may be added to a &lt;code&gt;PKIXBuilderParameters&lt;/code&gt; object for use with a PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; is obtained by calling the &lt;a href=&quot;certpathvalidator#getRevocationChecker()&quot;&gt; &lt;code&gt;getRevocationChecker&lt;/code&gt; &lt;/a&gt; method of a PKIX &lt;code&gt;CertPathValidator&lt;/code&gt; . Additional parameters and options specific to revocation can be set (by calling the &lt;a href=&quot;#setOcspResponder(java.net.URI)&quot;&gt; &lt;code&gt;setOcspResponder&lt;/code&gt; &lt;/a&gt; method for instance). The &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; is added to a &lt;code&gt;PKIXParameters&lt;/code&gt; object using the &lt;a href=&quot;pkixparameters#addCertPathChecker(java.security.cert.PKIXCertPathChecker)&quot;&gt; &lt;code&gt;addCertPathChecker&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;pkixparameters#setCertPathCheckers(java.util.List)&quot;&gt; &lt;code&gt;setCertPathCheckers&lt;/code&gt; &lt;/a&gt; method, and then the &lt;code&gt;PKIXParameters&lt;/code&gt; is passed along with the &lt;code&gt;CertPath&lt;/code&gt; to be validated to the &lt;a href=&quot;certpathvalidator#validate(java.security.cert.CertPath,java.security.cert.CertPathParameters)&quot;&gt; &lt;code&gt;validate&lt;/code&gt; &lt;/a&gt; method of a PKIX &lt;code&gt;CertPathValidator&lt;/code&gt; . When supplying a revocation checker in this manner, it will be used to check revocation irrespective of the setting of the &lt;a href=&quot;pkixparameters#isRevocationEnabled()&quot;&gt; &lt;code&gt;RevocationEnabled&lt;/code&gt; &lt;/a&gt; flag. Similarly, a &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; may be added to a &lt;code&gt;PKIXBuilderParameters&lt;/code&gt; object for use with a PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="968991d1ecee5d9aa89b891f287de7d1a71a88d1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; is obtained by calling the &lt;a href=&quot;certpathvalidator#getRevocationChecker--&quot;&gt;&lt;code&gt;getRevocationChecker&lt;/code&gt;&lt;/a&gt; method of a PKIX &lt;code&gt;CertPathValidator&lt;/code&gt;. Additional parameters and options specific to revocation can be set (by calling the &lt;a href=&quot;pkixrevocationchecker#setOcspResponder-java.net.URI-&quot;&gt;&lt;code&gt;setOcspResponder&lt;/code&gt;&lt;/a&gt; method for instance). The &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; is added to a &lt;code&gt;PKIXParameters&lt;/code&gt; object using the &lt;a href=&quot;pkixparameters#addCertPathChecker-java.security.cert.PKIXCertPathChecker-&quot;&gt;&lt;code&gt;addCertPathChecker&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;pkixparameters#setCertPathCheckers-java.util.List-&quot;&gt;&lt;code&gt;setCertPathCheckers&lt;/code&gt;&lt;/a&gt; method, and then the &lt;code&gt;PKIXParameters&lt;/code&gt; is passed along with the &lt;code&gt;CertPath&lt;/code&gt; to be validated to the &lt;a href=&quot;certpathvalidator#validate-java.security.cert.CertPath-java.security.cert.CertPathParameters-&quot;&gt;&lt;code&gt;validate&lt;/code&gt;&lt;/a&gt; method of a PKIX &lt;code&gt;CertPathValidator&lt;/code&gt;. When supplying a revocation checker in this manner, it will be used to check revocation irrespective of the setting of the &lt;a href=&quot;pkixparameters#isRevocationEnabled--&quot;&gt;&lt;code&gt;RevocationEnabled&lt;/code&gt;&lt;/a&gt; flag. Similarly, a &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; may be added to a &lt;code&gt;PKIXBuilderParameters&lt;/code&gt; object for use with a PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; を呼び出すことによって取得された&lt;a href=&quot;certpathvalidator#getRevocationChecker--&quot;&gt; &lt;code&gt;getRevocationChecker&lt;/code&gt; の&lt;/a&gt; PKIXの方法 &lt;code&gt;CertPathValidator&lt;/code&gt; 。失効に固有の追加のパラメーターとオプションを設定できます（たとえば、&lt;a href=&quot;pkixrevocationchecker#setOcspResponder-java.net.URI-&quot;&gt; &lt;code&gt;setOcspResponder&lt;/code&gt; &lt;/a&gt;メソッドを呼び出します）。 &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; はに追加さ &lt;code&gt;PKIXParameters&lt;/code&gt; の使用して、オブジェクト&lt;a href=&quot;pkixparameters#addCertPathChecker-java.security.cert.PKIXCertPathChecker-&quot;&gt; &lt;code&gt;addCertPathChecker&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;pkixparameters#setCertPathCheckers-java.util.List-&quot;&gt; &lt;code&gt;setCertPathCheckers&lt;/code&gt; &lt;/a&gt;方法を、次に &lt;code&gt;PKIXParameters&lt;/code&gt; のは一緒に渡される &lt;code&gt;CertPath&lt;/code&gt; を検証する&lt;a href=&quot;certpathvalidator#validate-java.security.cert.CertPath-java.security.cert.CertPathParameters-&quot;&gt; &lt;code&gt;validate&lt;/code&gt; &lt;/a&gt; PKIXの方法 &lt;code&gt;CertPathValidator&lt;/code&gt; 。この方法で失効チェッカーを提供すると、&lt;a href=&quot;pkixparameters#isRevocationEnabled--&quot;&gt; &lt;code&gt;RevocationEnabled&lt;/code&gt; &lt;/a&gt;フラグの設定に関係なく、失効を確認するために使用されます。同様に、 &lt;code&gt;PKIXRevocationChecker&lt;/code&gt; を &lt;code&gt;PKIXBuilderParameters&lt;/code&gt; オブジェクトに追加して、PKIX &lt;code&gt;CertPathBuilder&lt;/code&gt; で使用できます。</target>
        </trans-unit>
        <trans-unit id="00344c3e603a69e9d256f9a4aa735572b4874a2f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Package&lt;/code&gt; automatically defined for classes in a named module has the following properties:</source>
          <target state="translated">A &lt;code&gt;Package&lt;/code&gt; automatically defined for classes in a named module has the following properties:</target>
        </trans-unit>
        <trans-unit id="27bb430a82bbd3a758f400dee1d01a8df22aa656" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Package&lt;/code&gt; automatically defined for classes in an unnamed module has the following properties:</source>
          <target state="translated">A &lt;code&gt;Package&lt;/code&gt; automatically defined for classes in an unnamed module has the following properties:</target>
        </trans-unit>
        <trans-unit id="e6a03132a0dfdf419d31833c7b484cefba6ebaef" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Package&lt;/code&gt; can be obtained with the &lt;a href=&quot;#getPackage(java.lang.String)&quot;&gt;&lt;code&gt;Package.getPackage(String)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;classloader#getDefinedPackage(java.lang.String)&quot;&gt;&lt;code&gt;ClassLoader.getDefinedPackage(String)&lt;/code&gt;&lt;/a&gt; methods. Every &lt;code&gt;Package&lt;/code&gt; defined by a class loader can be obtained with the &lt;a href=&quot;#getPackages()&quot;&gt;&lt;code&gt;Package.getPackages()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;classloader#getDefinedPackages()&quot;&gt;&lt;code&gt;ClassLoader.getDefinedPackages()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">A &lt;code&gt;Package&lt;/code&gt; can be obtained with the &lt;a href=&quot;#getPackage(java.lang.String)&quot;&gt; &lt;code&gt;Package.getPackage(String)&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;classloader#getDefinedPackage(java.lang.String)&quot;&gt; &lt;code&gt;ClassLoader.getDefinedPackage(String)&lt;/code&gt; &lt;/a&gt; methods. Every &lt;code&gt;Package&lt;/code&gt; defined by a class loader can be obtained with the &lt;a href=&quot;#getPackages()&quot;&gt; &lt;code&gt;Package.getPackages()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;classloader#getDefinedPackages()&quot;&gt; &lt;code&gt;ClassLoader.getDefinedPackages()&lt;/code&gt; &lt;/a&gt; methods.</target>
        </trans-unit>
        <trans-unit id="b82d06470574b291a78e5f8f00efe49b58636bfd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Package&lt;/code&gt; may be explicitly defined with the &lt;a href=&quot;classloader#definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)&quot;&gt;&lt;code&gt;ClassLoader.definePackage(String, String, String, String,
 String, String, String, URL)&lt;/code&gt;&lt;/a&gt; method. The caller supplies the specification and implementation titles, versions, and vendors. The caller also indicates whether the package is &lt;a href=&quot;../util/jar/attributes.name#SEALED&quot;&gt;sealed&lt;/a&gt;. If a &lt;code&gt;Package&lt;/code&gt; is not explicitly defined for a run-time package when a class in that run-time package is defined, then a &lt;code&gt;Package&lt;/code&gt; is automatically defined by the class's defining class loader, as follows.</source>
          <target state="translated">A &lt;code&gt;Package&lt;/code&gt; may be explicitly defined with the &lt;a href=&quot;classloader#definePackage(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.net.URL)&quot;&gt; &lt;code&gt;ClassLoader.definePackage(String, String, String, String, String, String, String, URL)&lt;/code&gt; &lt;/a&gt; method. The caller supplies the specification and implementation titles, versions, and vendors. The caller also indicates whether the package is &lt;a href=&quot;../util/jar/attributes.name#SEALED&quot;&gt;sealed&lt;/a&gt;. If a &lt;code&gt;Package&lt;/code&gt; is not explicitly defined for a run-time package when a class in that run-time package is defined, then a &lt;code&gt;Package&lt;/code&gt; is automatically defined by the class's defining class loader, as follows.</target>
        </trans-unit>
        <trans-unit id="f55f6f5c08f5641cc7d5ff85b17db1e9b5d4b93e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Painter&lt;/code&gt; may be created with a type parameter. This type will be expected in the &lt;code&gt;paint&lt;/code&gt; method. For example, you may wish to write a &lt;code&gt;Painter&lt;/code&gt; that only works with subclasses of &lt;a href=&quot;../../java/awt/component&quot;&gt;&lt;code&gt;Component&lt;/code&gt;&lt;/a&gt;. In that case, when the &lt;code&gt;Painter&lt;/code&gt; is declared, you may declare that it requires a &lt;code&gt;Component&lt;/code&gt;, allowing the paint method to be type safe. Ex:</source>
          <target state="translated">A &lt;code&gt;Painter&lt;/code&gt; may be created with a type parameter. This type will be expected in the &lt;code&gt;paint&lt;/code&gt; method. For example, you may wish to write a &lt;code&gt;Painter&lt;/code&gt; that only works with subclasses of &lt;a href=&quot;../../java/awt/component&quot;&gt; &lt;code&gt;Component&lt;/code&gt; &lt;/a&gt;. In that case, when the &lt;code&gt;Painter&lt;/code&gt; is declared, you may declare that it requires a &lt;code&gt;Component&lt;/code&gt; , allowing the paint method to be type safe. Ex:</target>
        </trans-unit>
        <trans-unit id="61019145f25d0823b99987b93ef8f19602e98c8d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ParallelGroup&lt;/code&gt; that aligns it's children along the baseline must first decide where the baseline is anchored. The baseline can either be anchored to the top, or anchored to the bottom of the group. That is, the distance between the baseline and the beginning of the group can be a constant distance, or the distance between the end of the group and the baseline can be a constant distance. The possible choices correspond to the &lt;code&gt;BaselineResizeBehavior&lt;/code&gt; constants &lt;a href=&quot;../../java/awt/component.baselineresizebehavior#CONSTANT_ASCENT&quot;&gt;&lt;code&gt;CONSTANT_ASCENT&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../java/awt/component.baselineresizebehavior#CONSTANT_DESCENT&quot;&gt;&lt;code&gt;CONSTANT_DESCENT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;ParallelGroup&lt;/code&gt; that aligns it's children along the baseline must first decide where the baseline is anchored. The baseline can either be anchored to the top, or anchored to the bottom of the group. That is, the distance between the baseline and the beginning of the group can be a constant distance, or the distance between the end of the group and the baseline can be a constant distance. The possible choices correspond to the &lt;code&gt;BaselineResizeBehavior&lt;/code&gt; constants &lt;a href=&quot;../../java/awt/component.baselineresizebehavior#CONSTANT_ASCENT&quot;&gt; &lt;code&gt;CONSTANT_ASCENT&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;../../java/awt/component.baselineresizebehavior#CONSTANT_DESCENT&quot;&gt; &lt;code&gt;CONSTANT_DESCENT&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5478336d5f075d5ea8c31c7e9a524970cff7b853" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ParallelGroup&lt;/code&gt; that aligns it's elements along the baseline is only useful along the vertical axis. If you create a baseline group and use it along the horizontal axis an &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown when you ask &lt;code&gt;GroupLayout&lt;/code&gt; for the minimum, preferred or maximum size or attempt to layout the components.</source>
          <target state="translated">A &lt;code&gt;ParallelGroup&lt;/code&gt; that aligns it's elements along the baseline is only useful along the vertical axis. If you create a baseline group and use it along the horizontal axis an &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown when you ask &lt;code&gt;GroupLayout&lt;/code&gt; for the minimum, preferred or maximum size or attempt to layout the components.</target>
        </trans-unit>
        <trans-unit id="62a9557fe45969ec99cfe417c5afc1f0b41f5568" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ParallelGroup&lt;/code&gt; that aligns its children along the baseline must first decide where the baseline is anchored. The baseline can either be anchored to the top, or anchored to the bottom of the group. That is, the distance between the baseline and the beginning of the group can be a constant distance, or the distance between the end of the group and the baseline can be a constant distance. The possible choices correspond to the &lt;code&gt;BaselineResizeBehavior&lt;/code&gt; constants &lt;a href=&quot;../../java/awt/component.baselineresizebehavior#CONSTANT_ASCENT&quot;&gt;&lt;code&gt;CONSTANT_ASCENT&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../java/awt/component.baselineresizebehavior#CONSTANT_DESCENT&quot;&gt;&lt;code&gt;CONSTANT_DESCENT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="69e3794af34295284a2190edae607aff12672729" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ParallelGroup&lt;/code&gt; that aligns its elements along the baseline is only useful along the vertical axis. If you create a baseline group and use it along the horizontal axis an &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown when you ask &lt;code&gt;GroupLayout&lt;/code&gt; for the minimum, preferred or maximum size or attempt to layout the components.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b7875a196205cc0e87611c2a7d7139b12281bbdc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ParameterBlock&lt;/code&gt; encapsulates all the information about sources and parameters (Objects) required by a RenderableImageOp, or other classes that process images.</source>
          <target state="translated">A &lt;code&gt;ParameterBlock&lt;/code&gt; encapsulates all the information about sources and parameters (Objects) required by a RenderableImageOp, or other classes that process images.</target>
        </trans-unit>
        <trans-unit id="44d5dff505605889de7a5e58ef3f8444907a95a1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Patch&lt;/code&gt; object represents a location, on a MIDI synthesizer, into which a single instrument is stored (loaded).</source>
          <target state="translated">&lt;code&gt;Patch&lt;/code&gt; オブジェクトは、単一の器具が（ロード）格納されるMIDIシンセサイザに、位置を表します。</target>
        </trans-unit>
        <trans-unit id="2bade130cacfd73a6662dacf0beb86afa67968ce" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Patch&lt;/code&gt; object represents a location, on a MIDI synthesizer, into which a single instrument is stored (loaded). Every &lt;code&gt;Instrument&lt;/code&gt; object has its own &lt;code&gt;Patch&lt;/code&gt; object that specifies the memory location into which that instrument should be loaded. The location is specified abstractly by a bank index and a program number (not by any scheme that directly refers to a specific address or offset in RAM). This is a hierarchical indexing scheme: MIDI provides for up to 16384 banks, each of which contains up to 128 program locations. For example, a minimal sort of synthesizer might have only one bank of instruments, and only 32 instruments (programs) in that bank.</source>
          <target state="translated">&lt;code&gt;Patch&lt;/code&gt; オブジェクトは、単一の器具が（ロード）格納されるMIDIシンセサイザに、位置を表します。すべての &lt;code&gt;Instrument&lt;/code&gt; オブジェクトには、そのインストゥルメントをロードするメモリの場所を指定する独自の &lt;code&gt;Patch&lt;/code&gt; オブジェクトがあります。ロケーションは、バンクインデックスとプログラム番号によって抽象的に指定されます（RAM内の特定のアドレスまたはオフセットを直接参照するスキームではありません）。これは階層的なインデックススキーマです。MIDIは最大16384のバンクを提供し、各バンクには最大128のプログラムロケーションが含まれます。たとえば、最小限の種類のシンセサイザには、1つのバンクのインストゥルメントしかなく、そのバンクには32のインストゥルメント（プログラム）しかない場合があります。</target>
        </trans-unit>
        <trans-unit id="320c0383b6ba27539a9291c5c08457dac6be0ca9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Path&lt;/code&gt; represents a path that is hierarchical and composed of a sequence of directory and file name elements separated by a special separator or delimiter. A &lt;em&gt;root component&lt;/em&gt;, that identifies a file system hierarchy, may also be present. The name element that is &lt;em&gt;farthest&lt;/em&gt; from the root of the directory hierarchy is the name of a file or directory. The other name elements are directory names. A &lt;code&gt;Path&lt;/code&gt; can represent a root, a root and a sequence of names, or simply one or more name elements. A &lt;code&gt;Path&lt;/code&gt; is considered to be an</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; 階層と特殊セパレータまたは区切り文字で区切られたディレクトリとファイル名の要素の配列で構成されているパスを表します。&lt;em&gt;ルートコンポーネント&lt;/em&gt;、ことを識別するファイルシステム階層は、存在してもよいです。ディレクトリ階層のルートから&lt;em&gt;最も遠い&lt;/em&gt;名前要素は、ファイルまたはディレクトリの名前です。他の名前要素はディレクトリ名です。 &lt;code&gt;Path&lt;/code&gt; 根、根や名前、または単に一つ以上のname要素の順序を表すことができます。 &lt;code&gt;Path&lt;/code&gt; あると考えられています</target>
        </trans-unit>
        <trans-unit id="2ce8947d69cb036c7e7e382001791f3427abc1c5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PathIterator&lt;/code&gt; that defines the arc's boundary.</source>
          <target state="translated">A &lt;code&gt;PathIterator&lt;/code&gt; that defines the arc's boundary.</target>
        </trans-unit>
        <trans-unit id="02db17db5b91e548f1ad12abac1017180e407cf3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Phaser&lt;/code&gt; may be used instead of a &lt;code&gt;CountDownLatch&lt;/code&gt; to control a one-shot action serving a variable number of parties. The typical idiom is for the method setting this up to first register, then start all the actions, then deregister, as in:</source>
          <target state="translated">A &lt;code&gt;Phaser&lt;/code&gt; may be used instead of a &lt;code&gt;CountDownLatch&lt;/code&gt; to control a one-shot action serving a variable number of parties. The typical idiom is for the method setting this up to first register, then start all the actions, then deregister, as in:</target>
        </trans-unit>
        <trans-unit id="2e056d8aeb0d2e80640b4c47fd934931fffc6852" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Phaser&lt;/code&gt; may be used instead of a &lt;code&gt;CountDownLatch&lt;/code&gt; to control a one-shot action serving a variable number of parties. The typical idiom is for the method setting this up to first register, then start the actions, then deregister, as in:</source>
          <target state="translated">A &lt;code&gt;Phaser&lt;/code&gt; 代わりに使用されてもよい &lt;code&gt;CountDownLatch&lt;/code&gt; 当事者の可変数をサービングワンショット動作を制御します。典型的なイディオムは、これを最初に登録するように設定する方法であり、次にアクションを開始し、次に登録解除します。</target>
        </trans-unit>
        <trans-unit id="b3726e6cb3f9c91800a6b7315e247de7b538989e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Point2D&lt;/code&gt; object representing the x,y coordinates of the ending point of the arc.</source>
          <target state="translated">A &lt;code&gt;Point2D&lt;/code&gt; object representing the x,y coordinates of the ending point of the arc.</target>
        </trans-unit>
        <trans-unit id="7506fe06746a7ab15b3b2c74adc4e3ab1cd96058" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Point2D&lt;/code&gt; object representing the x,y coordinates of the starting point of the arc.</source>
          <target state="translated">A &lt;code&gt;Point2D&lt;/code&gt; object representing the x,y coordinates of the starting point of the arc.</target>
        </trans-unit>
        <trans-unit id="7ba4fc27c0a519f672a4f2b0dd3490e89f4c6ed3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Policy&lt;/code&gt; contains the following information. Note that this example only represents the syntax for the default &lt;code&gt;Policy&lt;/code&gt; implementation. Subclass implementations of this class may implement alternative syntaxes and may retrieve the &lt;code&gt;Policy&lt;/code&gt; from any source such as files, databases, or servers.</source>
          <target state="translated">A &lt;code&gt;Policy&lt;/code&gt; 、以下の情報が含まれています。この例は、デフォルトの &lt;code&gt;Policy&lt;/code&gt; 実装の構文のみを表していることに注意してください。このクラスのサブクラス実装は、代替構文を実装し、ファイル、データベース、サーバーなどの任意のソースから &lt;code&gt;Policy&lt;/code&gt; を取得できます。</target>
        </trans-unit>
        <trans-unit id="c551493ea204607c260d63a76232db5f1422e1c4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Policy&lt;/code&gt; object can be queried for the set of Permissions granted to code running as a &lt;code&gt;Principal&lt;/code&gt; in the following manner:</source>
          <target state="translated">&lt;code&gt;Policy&lt;/code&gt; オブジェクトは、として実行コードに付与されたアクセス権のセットを照会することができる &lt;code&gt;Principal&lt;/code&gt; 次のように：</target>
        </trans-unit>
        <trans-unit id="e603fa49d7d9bf4791bd8564e966f88040e4457b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Position&lt;/code&gt; object points at a location between two characters. As the surrounding content is altered, the &lt;code&gt;Position&lt;/code&gt; object adjusts its offset automatically to reflect the changes. If content is inserted or removed before the &lt;code&gt;Position&lt;/code&gt; object's location, then the &lt;code&gt;Position&lt;/code&gt; increments or decrements its offset, respectively, so as to point to the same location. If a portion of the document is removed that contains a &lt;code&gt;Position&lt;/code&gt;'s offset, then the &lt;code&gt;Position&lt;/code&gt;'s offset becomes that of the beginning of the removed region. For example, if a &lt;code&gt;Position&lt;/code&gt; has an offset of 5 and the region 2-10 is removed, then the &lt;code&gt;Position&lt;/code&gt;'s offset becomes 2.</source>
          <target state="translated">A &lt;code&gt;Position&lt;/code&gt; object points at a location between two characters. As the surrounding content is altered, the &lt;code&gt;Position&lt;/code&gt; object adjusts its offset automatically to reflect the changes. If content is inserted or removed before the &lt;code&gt;Position&lt;/code&gt; object's location, then the &lt;code&gt;Position&lt;/code&gt; increments or decrements its offset, respectively, so as to point to the same location. If a portion of the document is removed that contains a &lt;code&gt;Position&lt;/code&gt; 's offset, then the &lt;code&gt;Position&lt;/code&gt; 's offset becomes that of the beginning of the removed region. For example, if a &lt;code&gt;Position&lt;/code&gt; has an offset of 5 and the region 2-10 is removed, then the &lt;code&gt;Position&lt;/code&gt; 's offset becomes 2.</target>
        </trans-unit>
        <trans-unit id="0e6789762086fb624373b893ae1c639a188c341e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Principal&lt;/code&gt; representing an identity used to determine access rights to objects in a file system.</source>
          <target state="translated">&lt;code&gt;Principal&lt;/code&gt; ファイルシステム内のオブジェクトへのアクセス権を決定するために使用するIDを表します。</target>
        </trans-unit>
        <trans-unit id="6aceb3a2faf95ee9fd58c042971b6d90b1138e41" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PrintJobAttributeSet&lt;/code&gt; is just an &lt;a href=&quot;attributeset&quot;&gt;&lt;code&gt;AttributeSet&lt;/code&gt;&lt;/a&gt; whose constructors and mutating operations guarantee an additional invariant, namely that all attribute values in the &lt;code&gt;PrintJobAttributeSet&lt;/code&gt; must be instances of interface &lt;a href=&quot;printjobattribute&quot;&gt;&lt;code&gt;PrintJobAttribute&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#add(javax.print.attribute.Attribute)&quot;&gt;&lt;code&gt;add(Attribute)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#addAll(javax.print.attribute.AttributeSet)&quot;&gt;&lt;code&gt;addAll(AttributeSet)&lt;/code&gt;&lt;/a&gt; operations are respecified below to guarantee this additional invariant.</source>
          <target state="translated">A &lt;code&gt;PrintJobAttributeSet&lt;/code&gt; is just an &lt;a href=&quot;attributeset&quot;&gt; &lt;code&gt;AttributeSet&lt;/code&gt; &lt;/a&gt; whose constructors and mutating operations guarantee an additional invariant, namely that all attribute values in the &lt;code&gt;PrintJobAttributeSet&lt;/code&gt; must be instances of interface &lt;a href=&quot;printjobattribute&quot;&gt; &lt;code&gt;PrintJobAttribute&lt;/code&gt; &lt;/a&gt;. The &lt;a href=&quot;#add(javax.print.attribute.Attribute)&quot;&gt; &lt;code&gt;add(Attribute)&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;#addAll(javax.print.attribute.AttributeSet)&quot;&gt; &lt;code&gt;addAll(AttributeSet)&lt;/code&gt; &lt;/a&gt; operations are respecified below to guarantee this additional invariant.</target>
        </trans-unit>
        <trans-unit id="174cff475cd36fe7b2cdbe06b01da9c527d7b5db" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PrintServiceAttributeSet&lt;/code&gt; is just an &lt;a href=&quot;attributeset&quot;&gt;&lt;code&gt;AttributeSet&lt;/code&gt;&lt;/a&gt; whose constructors and mutating operations guarantee an additional invariant, namely that all attribute values in the &lt;code&gt;PrintServiceAttributeSet&lt;/code&gt; must be instances of interface &lt;a href=&quot;printserviceattribute&quot;&gt;&lt;code&gt;PrintServiceAttribute&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;#add(javax.print.attribute.Attribute)&quot;&gt;&lt;code&gt;add(Attribute)&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#addAll(javax.print.attribute.AttributeSet)&quot;&gt;&lt;code&gt;addAll(AttributeSet)&lt;/code&gt;&lt;/a&gt; operations are respecified below to guarantee this additional invariant.</source>
          <target state="translated">A &lt;code&gt;PrintServiceAttributeSet&lt;/code&gt; is just an &lt;a href=&quot;attributeset&quot;&gt; &lt;code&gt;AttributeSet&lt;/code&gt; &lt;/a&gt; whose constructors and mutating operations guarantee an additional invariant, namely that all attribute values in the &lt;code&gt;PrintServiceAttributeSet&lt;/code&gt; must be instances of interface &lt;a href=&quot;printserviceattribute&quot;&gt; &lt;code&gt;PrintServiceAttribute&lt;/code&gt; &lt;/a&gt;. The &lt;a href=&quot;#add(javax.print.attribute.Attribute)&quot;&gt; &lt;code&gt;add(Attribute)&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;#addAll(javax.print.attribute.AttributeSet)&quot;&gt; &lt;code&gt;addAll(AttributeSet)&lt;/code&gt; &lt;/a&gt; operations are respecified below to guarantee this additional invariant.</target>
        </trans-unit>
        <trans-unit id="6821c066d80c383742f82d9ec454ed8de1bf1b17" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PrintServiceLookup&lt;/code&gt; implementor is recommended to check for the &lt;code&gt;SecurityManager.checkPrintJobAccess()&lt;/code&gt; to deny access to untrusted code. Following this recommended policy means that untrusted code may not be able to locate any print services. Downloaded applets are the most common example of untrusted code.</source>
          <target state="translated">A &lt;code&gt;PrintServiceLookup&lt;/code&gt; implementor is recommended to check for the &lt;code&gt;SecurityManager.checkPrintJobAccess()&lt;/code&gt; to deny access to untrusted code. Following this recommended policy means that untrusted code may not be able to locate any print services. Downloaded applets are the most common example of untrusted code.</target>
        </trans-unit>
        <trans-unit id="edc93fd469a7b3a042919a5e86d89ac76d6a2eda" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PrintStream&lt;/code&gt; adds functionality to another output stream, namely the ability to print representations of various data values conveniently.</source>
          <target state="translated">A &lt;code&gt;PrintStream&lt;/code&gt; 別の出力ストリーム、便利に各種データ値の表現を印刷する、すなわち能力に機能を追加します。</target>
        </trans-unit>
        <trans-unit id="9172fc92bd31a6e2c58b2c9e1a5b0568f5d5fe89" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PrintStream&lt;/code&gt; adds functionality to another output stream, namely the ability to print representations of various data values conveniently. Two other features are provided as well. Unlike other output streams, a &lt;code&gt;PrintStream&lt;/code&gt; never throws an &lt;code&gt;IOException&lt;/code&gt;; instead, exceptional situations merely set an internal flag that can be tested via the &lt;code&gt;checkError&lt;/code&gt; method. Optionally, a &lt;code&gt;PrintStream&lt;/code&gt; can be created so as to flush automatically; this means that the &lt;code&gt;flush&lt;/code&gt; method is automatically invoked after a byte array is written, one of the &lt;code&gt;println&lt;/code&gt; methods is invoked, or a newline character or byte (&lt;code&gt;'\n'&lt;/code&gt;) is written.</source>
          <target state="translated">A &lt;code&gt;PrintStream&lt;/code&gt; 別の出力ストリーム、便利に各種データ値の表現を印刷する、すなわち能力に機能を追加します。他の2つの機能も提供されています。他の出力ストリームとは異なり、 &lt;code&gt;PrintStream&lt;/code&gt; は &lt;code&gt;IOException&lt;/code&gt; をスローしません。代わりに、例外的な状況では、単に &lt;code&gt;checkError&lt;/code&gt; メソッドでテストできる内部フラグを設定します。オプションで、自動的にフラッシュするように &lt;code&gt;PrintStream&lt;/code&gt; を作成できます。これは、バイト配列が書き込まれた後、 &lt;code&gt;println&lt;/code&gt; メソッドの1つが呼び出された後、または改行文字またはバイト（ &lt;code&gt;'\n'&lt;/code&gt; ）が書き込まれた後に、 &lt;code&gt;flush&lt;/code&gt; メソッドが自動的に呼び出されることを意味します。</target>
        </trans-unit>
        <trans-unit id="443d2c19443869278d45cf70c4daeb2a90b59332" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Printable(..)&lt;/code&gt; may be set on a &lt;code&gt;PrinterJob&lt;/code&gt;. When the client subsequently initiates printing by calling &lt;code&gt;PrinterJob.print(..)&lt;/code&gt; control</source>
          <target state="translated">A &lt;code&gt;Printable(..)&lt;/code&gt; may be set on a &lt;code&gt;PrinterJob&lt;/code&gt; . When the client subsequently initiates printing by calling &lt;code&gt;PrinterJob.print(..)&lt;/code&gt; control</target>
        </trans-unit>
        <trans-unit id="dead7cff0dd9e0e698d1ea6176c439b087a91d0a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PrinterJob&lt;/code&gt; object should be created using the static &lt;a href=&quot;#getPrinterJob()&quot;&gt;&lt;code&gt;getPrinterJob&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">A &lt;code&gt;PrinterJob&lt;/code&gt; object should be created using the static &lt;a href=&quot;#getPrinterJob()&quot;&gt; &lt;code&gt;getPrinterJob&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="f86a8fedc1b01e36f3fffe6a84ad30ad6d807042" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Properties&lt;/code&gt; object that contains the name and current value of each of the client info properties supported by the driver.</source>
          <target state="translated">A &lt;code&gt;Properties&lt;/code&gt; object that contains the name and current value of each of the client info properties supported by the driver.</target>
        </trans-unit>
        <trans-unit id="e5b459beeeccec3e6150676d0f5e6290385f678d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PropertyChangeEvent&lt;/code&gt; will get fired in response to setting a bound property, e.g. &lt;code&gt;setFont&lt;/code&gt;, &lt;code&gt;setBackground&lt;/code&gt;, or &lt;code&gt;setForeground&lt;/code&gt;. Note that if the current component is inheriting its foreground, background, or font from its container, then no event will be fired in response to a change in the inherited property.</source>
          <target state="translated">A &lt;code&gt;PropertyChangeEvent&lt;/code&gt; will get fired in response to setting a bound property, e.g. &lt;code&gt;setFont&lt;/code&gt; , &lt;code&gt;setBackground&lt;/code&gt; , or &lt;code&gt;setForeground&lt;/code&gt; . Note that if the current component is inheriting its foreground, background, or font from its container, then no event will be fired in response to a change in the inherited property.</target>
        </trans-unit>
        <trans-unit id="e01cf0c66503370e041abd76e97451d46e517e44" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PropertyChangeEvent&lt;/code&gt; will get fired whenever a default is changed.</source>
          <target state="translated">A &lt;code&gt;PropertyChangeEvent&lt;/code&gt; will get fired whenever a default is changed.</target>
        </trans-unit>
        <trans-unit id="43af3e934c517c608a5c379e17c1f394d58aea3a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PropertyChangeSupport&lt;/code&gt; instance is thread-safe.</source>
          <target state="translated">&lt;code&gt;PropertyChangeSupport&lt;/code&gt; のインスタンスは、スレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="d53111262efd93277c3a285555a54956749a689a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PushbackInputStream&lt;/code&gt; adds functionality to another input stream, namely the ability to &quot;push back&quot; or &quot;unread&quot; bytes, by storing pushed-back bytes in an internal buffer.</source>
          <target state="translated">A &lt;code&gt;PushbackInputStream&lt;/code&gt; adds functionality to another input stream, namely the ability to &quot;push back&quot; or &quot;unread&quot; bytes, by storing pushed-back bytes in an internal buffer.</target>
        </trans-unit>
        <trans-unit id="7af6908d661fc3df825c5f01de05f00d52da3b63" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PushbackInputStream&lt;/code&gt; adds functionality to another input stream, namely the ability to &quot;push back&quot; or &quot;unread&quot; bytes, by storing pushed-back bytes in an internal buffer. This is useful in situations where it is convenient for a fragment of code to read an indefinite number of data bytes that are delimited by a particular byte value; after reading the terminating byte, the code fragment can &quot;unread&quot; it, so that the next read operation on the input stream will reread the byte that was pushed back. For example, bytes representing the characters constituting an identifier might be terminated by a byte representing an operator character; a method whose job is to read just an identifier can read until it sees the operator and then push the operator back to be re-read.</source>
          <target state="translated">A &lt;code&gt;PushbackInputStream&lt;/code&gt; adds functionality to another input stream, namely the ability to &quot;push back&quot; or &quot;unread&quot; bytes, by storing pushed-back bytes in an internal buffer. This is useful in situations where it is convenient for a fragment of code to read an indefinite number of data bytes that are delimited by a particular byte value; after reading the terminating byte, the code fragment can &quot;unread&quot; it, so that the next read operation on the input stream will reread the byte that was pushed back. For example, bytes representing the characters constituting an identifier might be terminated by a byte representing an operator character; a method whose job is to read just an identifier can read until it sees the operator and then push the operator back to be re-read.</target>
        </trans-unit>
        <trans-unit id="498529e0c6968af51d25a65d16502b51019d6bb2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PushbackInputStream&lt;/code&gt; adds functionality to another input stream, namely the ability to &quot;push back&quot; or &quot;unread&quot; one byte.</source>
          <target state="translated">A &lt;code&gt;PushbackInputStream&lt;/code&gt; は、ほかの入力ストリーム、「プッシュバック」または「未読」の1つのバイトに機能を追加します。</target>
        </trans-unit>
        <trans-unit id="5f514d5e2008c6e74c443994d842ab05a6d27a76" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;PushbackInputStream&lt;/code&gt; adds functionality to another input stream, namely the ability to &quot;push back&quot; or &quot;unread&quot; one byte. This is useful in situations where it is convenient for a fragment of code to read an indefinite number of data bytes that are delimited by a particular byte value; after reading the terminating byte, the code fragment can &quot;unread&quot; it, so that the next read operation on the input stream will reread the byte that was pushed back. For example, bytes representing the characters constituting an identifier might be terminated by a byte representing an operator character; a method whose job is to read just an identifier can read until it sees the operator and then push the operator back to be re-read.</source>
          <target state="translated">A &lt;code&gt;PushbackInputStream&lt;/code&gt; は、ほかの入力ストリーム、「プッシュバック」または「未読」の1つのバイトに機能を追加します。これは、コードのフラグメントが特定のバイト値で区切られた無制限の数のデータバイトを読み取るのに便利な状況で役立ちます。終了バイトを読み取った後、コードフラグメントはそれを「未読み取り」にすることができるため、入力ストリームに対する次の読み取り操作は、プッシュバックされたバイトを再度読み取ります。たとえば、識別子を構成する文字を表すバイトは、演算子文字を表すバイトで終了する場合があります。識別子だけを読み取ることを目的とするメソッドは、オペレーターが見えるまで読み取ることができ、オペレーターを押し戻して再度読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="b195ed2afd356225750c7019651fb6c71cb290d1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Queue&lt;/code&gt; implementation that extends this class must minimally define a method &lt;a href=&quot;queue#offer(E)&quot;&gt;&lt;code&gt;Queue.offer(E)&lt;/code&gt;&lt;/a&gt; which does not permit insertion of &lt;code&gt;null&lt;/code&gt; elements, along with methods &lt;a href=&quot;queue#peek()&quot;&gt;&lt;code&gt;Queue.peek()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;queue#poll()&quot;&gt;&lt;code&gt;Queue.poll()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;collection#size()&quot;&gt;&lt;code&gt;Collection.size()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;collection#iterator()&quot;&gt;&lt;code&gt;Collection.iterator()&lt;/code&gt;&lt;/a&gt;. Typically, additional methods will be overridden as well. If these requirements cannot be met, consider instead subclassing &lt;a href=&quot;abstractcollection&quot;&gt;&lt;code&gt;AbstractCollection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このクラスを拡張する &lt;code&gt;Queue&lt;/code&gt; 実装では、メソッド&lt;a href=&quot;queue#peek()&quot;&gt; &lt;code&gt;Queue.peek()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;queue#poll()&quot;&gt; &lt;code&gt;Queue.poll()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;collection#size()&quot;&gt; &lt;code&gt;Collection.size()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;collection#iterator()&quot;&gt; &lt;code&gt;Collection.iterator()&lt;/code&gt; &lt;/a&gt;とともに、 &lt;code&gt;null&lt;/code&gt; 要素の挿入を許可しないメソッド&lt;a href=&quot;queue#offer(E)&quot;&gt; &lt;code&gt;Queue.offer(E)&lt;/code&gt; &lt;/a&gt;を最小限に定義する必要があります。.iterator（）。通常、追加のメソッドもオーバーライドされます。これらの要件を満たせない場合は、代わりに&lt;a href=&quot;abstractcollection&quot;&gt; &lt;code&gt;AbstractCollection&lt;/code&gt; &lt;/a&gt;をサブクラス化することを検討してください。</target>
        </trans-unit>
        <trans-unit id="58bb4d4e29ec77b52a73e79c2c7ec5fcb02deb1a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Queue&lt;/code&gt; implementation that extends this class must minimally define a method &lt;a href=&quot;queue#offer-E-&quot;&gt;&lt;code&gt;Queue.offer(E)&lt;/code&gt;&lt;/a&gt; which does not permit insertion of &lt;code&gt;null&lt;/code&gt; elements, along with methods &lt;a href=&quot;queue#peek--&quot;&gt;&lt;code&gt;Queue.peek()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;queue#poll--&quot;&gt;&lt;code&gt;Queue.poll()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;collection#size--&quot;&gt;&lt;code&gt;Collection.size()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;collection#iterator--&quot;&gt;&lt;code&gt;Collection.iterator()&lt;/code&gt;&lt;/a&gt;. Typically, additional methods will be overridden as well. If these requirements cannot be met, consider instead subclassing &lt;a href=&quot;abstractcollection&quot;&gt;&lt;code&gt;AbstractCollection&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このクラスを拡張する &lt;code&gt;Queue&lt;/code&gt; 実装は、メソッド&lt;a href=&quot;queue#peek--&quot;&gt; &lt;code&gt;Queue.peek()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;queue#poll--&quot;&gt; &lt;code&gt;Queue.poll()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;collection#size--&quot;&gt; &lt;code&gt;Collection.size()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;collection#iterator--&quot;&gt; &lt;code&gt;Collection.iterator()&lt;/code&gt; &lt;/a&gt;とともに、 &lt;code&gt;null&lt;/code&gt; 要素の挿入を許可しないメソッド&lt;a href=&quot;queue#offer-E-&quot;&gt; &lt;code&gt;Queue.offer(E)&lt;/code&gt; &lt;/a&gt;を最小限に定義する必要があります.iterator（）。通常、追加のメソッドもオーバーライドされます。これらの要件を満たすことができない場合は、代わりに&lt;a href=&quot;abstractcollection&quot;&gt; &lt;code&gt;AbstractCollection&lt;/code&gt; &lt;/a&gt;をサブクラス化することを検討してください。</target>
        </trans-unit>
        <trans-unit id="def3b6f50120461d8708c238f889d3f9cd108135" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ReadWriteLock&lt;/code&gt; maintains a pair of associated &lt;a href=&quot;lock&quot;&gt;&lt;code&gt;locks&lt;/code&gt;&lt;/a&gt;, one for read-only operations and one for writing.</source>
          <target state="translated">A &lt;code&gt;ReadWriteLock&lt;/code&gt; は、関連する一対の保持&lt;a href=&quot;lock&quot;&gt; &lt;code&gt;locks&lt;/code&gt; &lt;/a&gt;、読取り専用操作用と書き込みのための1つを。</target>
        </trans-unit>
        <trans-unit id="0e09680152da974de7708bd54d72fd93831d1e80" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ReadWriteLock&lt;/code&gt; maintains a pair of associated &lt;a href=&quot;lock&quot;&gt;&lt;code&gt;locks&lt;/code&gt;&lt;/a&gt;, one for read-only operations and one for writing. The &lt;a href=&quot;#readLock()&quot;&gt;read lock&lt;/a&gt; may be held simultaneously by multiple reader threads, so long as there are no writers. The &lt;a href=&quot;#writeLock()&quot;&gt;write lock&lt;/a&gt; is exclusive.</source>
          <target state="translated">A &lt;code&gt;ReadWriteLock&lt;/code&gt; は、関連する一対の保持&lt;a href=&quot;lock&quot;&gt; &lt;code&gt;locks&lt;/code&gt; &lt;/a&gt;、読取り専用操作用と書き込みのための1つを。&lt;a href=&quot;#readLock()&quot;&gt;読み取りロックは&lt;/a&gt;限りない作家が存在しないように、複数のリーダースレッドにより同時に保持することができます。&lt;a href=&quot;#writeLock()&quot;&gt;書き込みロックは&lt;/a&gt;排他的です。</target>
        </trans-unit>
        <trans-unit id="3a5c3d06115aa28aff29d5534c6fc5941725a3a8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ReadWriteLock&lt;/code&gt; maintains a pair of associated &lt;a href=&quot;lock&quot;&gt;&lt;code&gt;locks&lt;/code&gt;&lt;/a&gt;, one for read-only operations and one for writing. The &lt;a href=&quot;readwritelock#readLock--&quot;&gt;&lt;code&gt;read lock&lt;/code&gt;&lt;/a&gt; may be held simultaneously by multiple reader threads, so long as there are no writers. The &lt;a href=&quot;readwritelock#writeLock--&quot;&gt;&lt;code&gt;write lock&lt;/code&gt;&lt;/a&gt; is exclusive.</source>
          <target state="translated">A &lt;code&gt;ReadWriteLock&lt;/code&gt; は、関連する一対の保持&lt;a href=&quot;lock&quot;&gt; &lt;code&gt;locks&lt;/code&gt; &lt;/a&gt;、読取り専用操作用と書き込みのための1つを。&lt;a href=&quot;readwritelock#readLock--&quot;&gt; &lt;code&gt;read lock&lt;/code&gt; &lt;/a&gt;限りない作家が存在しないように、複数のリーダースレッドにより同時に保持することができます。&lt;a href=&quot;readwritelock#writeLock--&quot;&gt; &lt;code&gt;write lock&lt;/code&gt; &lt;/a&gt;排他的です。</target>
        </trans-unit>
        <trans-unit id="a4ba4d2f544963239cdad0d5889d9b75a3868aa7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Readable&lt;/code&gt; is a source of characters.</source>
          <target state="translated">A &lt;code&gt;Readable&lt;/code&gt; 文字のソースです。</target>
        </trans-unit>
        <trans-unit id="96d71823f195cce50e0a0e598590732b249e1579" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Readable&lt;/code&gt; is a source of characters. Characters from a &lt;code&gt;Readable&lt;/code&gt; are made available to callers of the read method via a &lt;a href=&quot;../nio/charbuffer&quot;&gt;&lt;code&gt;CharBuffer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;Readable&lt;/code&gt; 文字のソースです。 &lt;code&gt;Readable&lt;/code&gt; の文字は、&lt;a href=&quot;../nio/charbuffer&quot;&gt; &lt;code&gt;CharBuffer&lt;/code&gt; &lt;/a&gt;を介してreadメソッドの呼び出し元が利用できるようになります。</target>
        </trans-unit>
        <trans-unit id="7adc9e5e51403a4efa309a291957fa4c97c0d4d0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Receiver&lt;/code&gt; receives &lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt; objects and typically does something useful in response, such as interpreting them to generate sound or raw MIDI output.</source>
          <target state="translated">A &lt;code&gt;Receiver&lt;/code&gt; 受信&lt;a href=&quot;midievent&quot;&gt; &lt;code&gt;MidiEvent&lt;/code&gt; &lt;/a&gt;オブジェクトを、通常、このような音や、生のMIDI出力を生成するためにそれらを解釈するよう、応答に便利な何かをします。</target>
        </trans-unit>
        <trans-unit id="3c76c7c5e28bd7a486394b016c5582a809e88117" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Receiver&lt;/code&gt; receives &lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt; objects and typically does something useful in response, such as interpreting them to generate sound or raw MIDI output. Common MIDI receivers include synthesizers and MIDI Out ports.</source>
          <target state="translated">A &lt;code&gt;Receiver&lt;/code&gt; 受信&lt;a href=&quot;midievent&quot;&gt; &lt;code&gt;MidiEvent&lt;/code&gt; &lt;/a&gt;オブジェクトを、通常、このような音や、生のMIDI出力を生成するためにそれらを解釈するよう、応答に便利な何かをします。一般的なMIDIレシーバーには、シンセサイザーとMIDI出力ポートが含まれます。</target>
        </trans-unit>
        <trans-unit id="f19fa51699f4a664e93d7e5f550006586f58badc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Receiver&lt;/code&gt; receives &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; objects and typically does something useful in response, such as interpreting them to generate sound or raw MIDI output.</source>
          <target state="translated">A &lt;code&gt;Receiver&lt;/code&gt; 受信 &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; オブジェクトを、通常、このような音や、生のMIDI出力を生成するためにそれらを解釈するよう、応答に便利な何かをします。</target>
        </trans-unit>
        <trans-unit id="c29d462e6a52ab2259a7447d7f75c8ca3d531769" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Receiver&lt;/code&gt; receives &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; objects and typically does something useful in response, such as interpreting them to generate sound or raw MIDI output. Common MIDI receivers include synthesizers and MIDI Out ports.</source>
          <target state="translated">A &lt;code&gt;Receiver&lt;/code&gt; 受信 &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; オブジェクトを、通常、このような音や、生のMIDI出力を生成するためにそれらを解釈するよう、応答に便利な何かをします。一般的なMIDIレシーバーには、シンセサイザーとMIDI出力ポートが含まれます。</target>
        </trans-unit>
        <trans-unit id="8b6502f89a0860b667635265c50410dcd6a13613" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RecordComponent&lt;/code&gt; provides information about, and dynamic access to, a component of a record class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0bb66c2ae6ee8ada24da899deda6a542dac4fcad" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Rectangle&lt;/code&gt; object's &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; are &lt;code&gt;public&lt;/code&gt; fields. The constructors that create a &lt;code&gt;Rectangle&lt;/code&gt;, and the methods that can modify one, do not prevent setting a negative value for width or height.</source>
          <target state="translated">&lt;code&gt;Rectangle&lt;/code&gt; オブジェクトの &lt;code&gt;width&lt;/code&gt; と &lt;code&gt;height&lt;/code&gt; ある &lt;code&gt;public&lt;/code&gt; 場。 &lt;code&gt;Rectangle&lt;/code&gt; を作成するコンストラクター、およびRectangleを変更できるメソッドは、幅または高さに負の値を設定することを妨げません。</target>
        </trans-unit>
        <trans-unit id="09e45f5db9320d95c47dec97d00933c57ab8e443" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Rectangle&lt;/code&gt; specifies an area in a coordinate space that is enclosed by the &lt;code&gt;Rectangle&lt;/code&gt; object's upper-left point &lt;code&gt;(x,y)&lt;/code&gt; in the coordinate space, its width, and its height.</source>
          <target state="translated">A &lt;code&gt;Rectangle&lt;/code&gt; で囲まれる座標空間内の領域を指定 &lt;code&gt;Rectangle&lt;/code&gt; オブジェクトの左上の点 &lt;code&gt;(x,y)&lt;/code&gt; 座標空間、およびその幅と高さです。</target>
        </trans-unit>
        <trans-unit id="f868590cec06b06b083e631f103714d7966ad707" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Rectangle&lt;/code&gt; whose width or height is negative has neither location nor dimension along those axes with negative dimensions. Such a &lt;code&gt;Rectangle&lt;/code&gt; is treated as non-existent along those axes. Such a &lt;code&gt;Rectangle&lt;/code&gt; is also empty with respect to containment calculations and methods which test if it contains or intersects a point or rectangle will always return false. Methods which combine such a &lt;code&gt;Rectangle&lt;/code&gt; with a point or rectangle will ignore the &lt;code&gt;Rectangle&lt;/code&gt; entirely in generating the result. If two &lt;code&gt;Rectangle&lt;/code&gt; objects are combined and each has a negative dimension, the result will have at least one negative dimension.</source>
          <target state="translated">&lt;code&gt;Rectangle&lt;/code&gt; 、幅または高さの負では、負の寸法を有するこれらの軸に沿ったいずれの場所にも寸法を有します。このような &lt;code&gt;Rectangle&lt;/code&gt; は、これらの軸に沿って存在しないものとして扱われます。このような &lt;code&gt;Rectangle&lt;/code&gt; は、包含計算に関しても空であり、点または長方形を含むか交差するかをテストするメソッドは常にfalseを返します。このような &lt;code&gt;Rectangle&lt;/code&gt; を点または長方形と組み合わせるメソッドは、結果を生成する際に &lt;code&gt;Rectangle&lt;/code&gt; 完全に無視します。 2つの &lt;code&gt;Rectangle&lt;/code&gt; オブジェクトが組み合わされ、それぞれが負の次元を持つ場合、結果には少なくとも1つの負の次元があります。</target>
        </trans-unit>
        <trans-unit id="b5b6b7944f45cb077aa26fe53c3e98fdd2d8c61d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ReentrantLock&lt;/code&gt; is &lt;em&gt;owned&lt;/em&gt; by the thread last successfully locking, but not yet unlocking it. A thread invoking &lt;code&gt;lock&lt;/code&gt; will return, successfully acquiring the lock, when the lock is not owned by another thread. The method will return immediately if the current thread already owns the lock. This can be checked using methods &lt;a href=&quot;#isHeldByCurrentThread()&quot;&gt;&lt;code&gt;isHeldByCurrentThread()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#getHoldCount()&quot;&gt;&lt;code&gt;getHoldCount()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;ReentrantLock&lt;/code&gt; のがされて&lt;em&gt;所有している&lt;/em&gt;最後に正常にロックするスレッドが、まだそれをアンロックません。ロックが別のスレッドによって所有されていない場合、ロックを呼び出すスレッドは戻り、 &lt;code&gt;lock&lt;/code&gt; を正常に取得します。現在のスレッドがすでにロックを所有している場合、メソッドはすぐに戻ります。これは、メソッド&lt;a href=&quot;#isHeldByCurrentThread()&quot;&gt; &lt;code&gt;isHeldByCurrentThread()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#getHoldCount()&quot;&gt; &lt;code&gt;getHoldCount()&lt;/code&gt; &lt;/a&gt;を使用して確認できます。</target>
        </trans-unit>
        <trans-unit id="a466154e254c73452531856243b05c8548e2667c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ReentrantLock&lt;/code&gt; is &lt;em&gt;owned&lt;/em&gt; by the thread last successfully locking, but not yet unlocking it. A thread invoking &lt;code&gt;lock&lt;/code&gt; will return, successfully acquiring the lock, when the lock is not owned by another thread. The method will return immediately if the current thread already owns the lock. This can be checked using methods &lt;a href=&quot;reentrantlock#isHeldByCurrentThread--&quot;&gt;&lt;code&gt;isHeldByCurrentThread()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;reentrantlock#getHoldCount--&quot;&gt;&lt;code&gt;getHoldCount()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;ReentrantLock&lt;/code&gt; のがされて&lt;em&gt;所有している&lt;/em&gt;最後に正常にロックするスレッドが、まだそれをアンロックません。 &lt;code&gt;lock&lt;/code&gt; を呼び出しているスレッドは、ロックが別のスレッドによって所有されていない場合に戻り、ロックを正常に取得します。現在のスレッドがすでにロックを所有している場合、メソッドはすぐに戻ります。これは、方法を使用して確認することができ&lt;a href=&quot;reentrantlock#isHeldByCurrentThread--&quot;&gt; &lt;code&gt;isHeldByCurrentThread()&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;reentrantlock#getHoldCount--&quot;&gt; &lt;code&gt;getHoldCount()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f10e17887e5593070207f224b5b3a59f8276fe3d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Ref&lt;/code&gt; object can be stored in the database using the &lt;code&gt;PreparedStatement.setRef&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;Ref&lt;/code&gt; オブジェクトが使用してデータベースに格納することができる &lt;code&gt;PreparedStatement.setRef&lt;/code&gt; の方法。</target>
        </trans-unit>
        <trans-unit id="7a1be5a08da98f67b80c48691f5802cfaa8fadba" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Reference&lt;/code&gt; instance may be created by invoking one of the &lt;a href=&quot;xmlsignaturefactory#newReference(java.lang.String,javax.xml.crypto.dsig.DigestMethod)&quot;&gt;&lt;code&gt;newReference&lt;/code&gt;&lt;/a&gt; methods of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class; for example:</source>
          <target state="translated">A &lt;code&gt;Reference&lt;/code&gt; インスタンスのいずれ呼び出すことによって作成することができる&lt;a href=&quot;xmlsignaturefactory#newReference(java.lang.String,javax.xml.crypto.dsig.DigestMethod)&quot;&gt; &lt;code&gt;newReference&lt;/code&gt; の&lt;/a&gt;方法&lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt;クラス; 例えば：</target>
        </trans-unit>
        <trans-unit id="3fdc135bd81bdab338e4afb3857420e914b0195c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Registry&lt;/code&gt; implementation may choose to restrict access to some or all of its methods (for example, methods that mutate the registry's bindings may be restricted to calls originating from the local host). If a &lt;code&gt;Registry&lt;/code&gt; method chooses to deny access for a given invocation, its implementation may throw &lt;a href=&quot;../accessexception&quot;&gt;&lt;code&gt;AccessException&lt;/code&gt;&lt;/a&gt;, which (because it extends &lt;a href=&quot;../remoteexception&quot;&gt;&lt;code&gt;RemoteException&lt;/code&gt;&lt;/a&gt;) will be wrapped in a &lt;a href=&quot;../serverexception&quot;&gt;&lt;code&gt;ServerException&lt;/code&gt;&lt;/a&gt; when caught by a remote client.</source>
          <target state="translated">A &lt;code&gt;Registry&lt;/code&gt; 実装では、そのメソッド（のmutateレジストリのバインディングがローカルホストからの通話の発信元に制限することができること例えば、メソッド）の一部またはすべてへのアクセスを制限することもできます。 &lt;code&gt;Registry&lt;/code&gt; メソッドが特定の呼び出しに対するアクセスを拒否することを選択した場合、その実装は&lt;a href=&quot;../accessexception&quot;&gt; &lt;code&gt;AccessException&lt;/code&gt; を&lt;/a&gt;スローする可能性があります。これは、リモートクライアントによってキャッチされると&lt;a href=&quot;../serverexception&quot;&gt; &lt;code&gt;ServerException&lt;/code&gt; &lt;/a&gt;にラップされ&lt;a href=&quot;../remoteexception&quot;&gt; &lt;code&gt;RemoteException&lt;/code&gt; &lt;/a&gt;（RemoteExceptionを拡張するため）。</target>
        </trans-unit>
        <trans-unit id="c9f9be31f6b2c570638fd587aa515aab5324ec80" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RemoteException&lt;/code&gt; is the common superclass for a number of communication-related exceptions that may occur during the execution of a remote method call.</source>
          <target state="translated">A &lt;code&gt;RemoteException&lt;/code&gt; リモートメソッド呼び出しの実行中に発生する多くの通信関連の例外で使用する共通のスーパークラスです。</target>
        </trans-unit>
        <trans-unit id="839e5b3abac606b93773f169161acf83a8a3b493" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RemoteException&lt;/code&gt; is the common superclass for a number of communication-related exceptions that may occur during the execution of a remote method call. Each method of a remote interface, an interface that extends &lt;code&gt;java.rmi.Remote&lt;/code&gt;, must list &lt;code&gt;RemoteException&lt;/code&gt; in its throws clause.</source>
          <target state="translated">A &lt;code&gt;RemoteException&lt;/code&gt; リモートメソッド呼び出しの実行中に発生する多くの通信関連の例外で使用する共通のスーパークラスです。 &lt;code&gt;java.rmi.Remote&lt;/code&gt; を拡張するインターフェースであるリモート・インターフェースの各メソッドは、throws節に &lt;code&gt;RemoteException&lt;/code&gt; をリストする必要があります。</target>
        </trans-unit>
        <trans-unit id="6faecf013e62df9ef640102b4e068feb15415a8d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ResourceBundle.Control&lt;/code&gt; instance must be thread-safe if it's simultaneously used by multiple threads. &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; does not synchronize to call the &lt;code&gt;ResourceBundle.Control&lt;/code&gt; methods. The default implementations of the methods are thread-safe.</source>
          <target state="translated">&lt;code&gt;ResourceBundle.Control&lt;/code&gt; のそれは同時に複数のスレッドで使われている場合、インスタンスは、スレッドセーフでなければなりません。 &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; は、 &lt;code&gt;ResourceBundle.Control&lt;/code&gt; メソッドを呼び出すために同期しません。メソッドのデフォルトの実装はスレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="278799dac47bdb1e5dd43e1ae79d07011ec7107d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Result&lt;/code&gt; containing the object's state for binding and the corresponding attributes to be bound; null if the object don't use this factory.</source>
          <target state="translated">&lt;code&gt;Result&lt;/code&gt; 結合のためにオブジェクトの状態を含む、対応する属性が拘束されることに。オブジェクトがこのファクトリを使用しない場合はnull。</target>
        </trans-unit>
        <trans-unit id="a2b81ce01a926fddf334a3e3dd43c889d7b6ef26" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ResultSet&lt;/code&gt; object is automatically closed when the &lt;code&gt;Statement&lt;/code&gt; object that generated it is closed, re-executed, or used to retrieve the next result from a sequence of multiple results.</source>
          <target state="translated">A &lt;code&gt;ResultSet&lt;/code&gt; オブジェクトが自動的に閉じられたときに &lt;code&gt;Statement&lt;/code&gt; オブジェクト生成することをそれが再実行、閉鎖、または複数の結果のシーケンスから次の結果を取得するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1269551aceff07e982e1aa7dc11633a1585bf491" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ResultSet&lt;/code&gt; object maintains a cursor pointing to its current row of data. Initially the cursor is positioned before the first row. The &lt;code&gt;next&lt;/code&gt; method moves the cursor to the next row, and because it returns &lt;code&gt;false&lt;/code&gt; when there are no more rows in the &lt;code&gt;ResultSet&lt;/code&gt; object, it can be used in a &lt;code&gt;while&lt;/code&gt; loop to iterate through the result set.</source>
          <target state="translated">A &lt;code&gt;ResultSet&lt;/code&gt; オブジェクトは、データの現在の行を指し示すカーソルを維持します。最初、カーソルは最初の行の前に置かれます。 &lt;code&gt;next&lt;/code&gt; の方法は、次の行にカーソルを移動させ、それが返すので &lt;code&gt;false&lt;/code&gt; もう行はに存在しない場合 &lt;code&gt;ResultSet&lt;/code&gt; オブジェクト、それに使用することができ &lt;code&gt;while&lt;/code&gt; 結果セットを反復処理するループ。</target>
        </trans-unit>
        <trans-unit id="a0b09f6a0f2c58ea2685ec820d4941a9f6308fe9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ResultSet&lt;/code&gt; object; each row is a supported client info property</source>
          <target state="translated">A &lt;code&gt;ResultSet&lt;/code&gt; オブジェクト。各行はサポートされているクライアント情報プロパティです</target>
        </trans-unit>
        <trans-unit id="e5992f73179b55bd02b7ba70a2343356434f5001" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RetrievalMethod&lt;/code&gt; instance may be created by invoking one of the &lt;a href=&quot;keyinfofactory#newRetrievalMethod(java.lang.String)&quot;&gt;&lt;code&gt;newRetrievalMethod&lt;/code&gt;&lt;/a&gt; methods of the &lt;a href=&quot;keyinfofactory&quot;&gt;&lt;code&gt;KeyInfoFactory&lt;/code&gt;&lt;/a&gt; class, and passing it the URI identifying the location of the KeyInfo, an optional type URI identifying the type of KeyInfo, and an optional list of &lt;a href=&quot;../transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt;s; for example:</source>
          <target state="translated">A &lt;code&gt;RetrievalMethod&lt;/code&gt; のインスタンスのいずれ呼び出すことによって作成することができる&lt;a href=&quot;keyinfofactory#newRetrievalMethod(java.lang.String)&quot;&gt; &lt;code&gt;newRetrievalMethod&lt;/code&gt; の&lt;/a&gt;方法&lt;a href=&quot;keyinfofactory&quot;&gt; &lt;code&gt;KeyInfoFactory&lt;/code&gt; &lt;/a&gt;、クラス、およびURIがのKeyInfoの位置を特定することを通すのKeyInfoのタイプを識別するオプションのタイプURIとの任意リスト&lt;a href=&quot;../transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt;秒。例えば：</target>
        </trans-unit>
        <trans-unit id="65ba03d2db39091b26c473a97ad70a6088f30b42" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object creates a &lt;code&gt;RowSetMetaDataImpl&lt;/code&gt; object internally in order to set and retrieve information about its columns.</source>
          <target state="translated">A &lt;code&gt;RowSet&lt;/code&gt; オブジェクトが作成されます &lt;code&gt;RowSetMetaDataImpl&lt;/code&gt; を設定するために内部的にオブジェクトとその列に関する情報を取得します。</target>
        </trans-unit>
        <trans-unit id="35523f0350f58a1b43f5f1ed18cf7e25c00fb33b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object inherits the default properties of the &lt;code&gt;ResultSet&lt;/code&gt; object from which it got its data. That &lt;code&gt;ResultSet&lt;/code&gt; object's default fetch direction is set by the &lt;code&gt;Statement&lt;/code&gt; object that created it.</source>
          <target state="translated">A &lt;code&gt;RowSet&lt;/code&gt; オブジェクトは、デフォルトのプロパティを継承 &lt;code&gt;ResultSet&lt;/code&gt; それはそのデータを取得した場所からオブジェクトを。その &lt;code&gt;ResultSet&lt;/code&gt; オブジェクトのデフォルトのフェッチ方向は、それを作成した &lt;code&gt;Statement&lt;/code&gt; オブジェクトによって設定されます。</target>
        </trans-unit>
        <trans-unit id="233e78f8a0df18f6595fe7b4553e59c2f7f22eb2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object inherits the default properties of the &lt;code&gt;ResultSet&lt;/code&gt; object from which it got its data. That &lt;code&gt;ResultSet&lt;/code&gt; object's default fetch size is set by the &lt;code&gt;Statement&lt;/code&gt; object that created it.</source>
          <target state="translated">A &lt;code&gt;RowSet&lt;/code&gt; オブジェクトは、デフォルトのプロパティを継承 &lt;code&gt;ResultSet&lt;/code&gt; それはそのデータを取得した場所からオブジェクトを。その &lt;code&gt;ResultSet&lt;/code&gt; オブジェクトのデフォルトのフェッチサイズは、それを作成した &lt;code&gt;Statement&lt;/code&gt; オブジェクトによって設定されます。</target>
        </trans-unit>
        <trans-unit id="7221f1b82771a3bccc7338601ef515aa66597f75" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object is a JavaBeans component because it has properties and participates in the JavaBeans event notification mechanism. The &lt;code&gt;RowSetListener&lt;/code&gt; interface is implemented by a component that wants to be notified about events that occur to a particular &lt;code&gt;RowSet&lt;/code&gt; object. Such a component registers itself as a listener with a rowset via the &lt;code&gt;RowSet.addRowSetListener&lt;/code&gt; method.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ebfb40d9306da82896bf76a34239df58062d487b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object is a JavaBeans&amp;trade; component because it has properties and participates in the JavaBeans event notification mechanism. The &lt;code&gt;RowSetListener&lt;/code&gt; interface is implemented by a component that wants to be notified about events that occur to a particular &lt;code&gt;RowSet&lt;/code&gt; object. Such a component registers itself as a listener with a rowset via the &lt;code&gt;RowSet.addRowSetListener&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;RowSet&lt;/code&gt; がJavaBeansのイベント通知機構のプロパティと参加を持っているので、オブジェクトは、JavaBeans&amp;trade;コンポーネントです。 &lt;code&gt;RowSetListener&lt;/code&gt; のインターフェースは、特定に発生したイベントについて通知することを希望するコンポーネントによって実装され &lt;code&gt;RowSet&lt;/code&gt; オブジェクト。このようなコンポーネントは、 &lt;code&gt;RowSet.addRowSetListener&lt;/code&gt; メソッドを介して、それ自体を行セットのリスナーとして登録します。</target>
        </trans-unit>
        <trans-unit id="830d058daa7ae6abbfbbea71c3c410a4f2856270" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object may be populated with data from an SQL &lt;code&gt;VIEW&lt;/code&gt;. The following constants indicate whether a &lt;code&gt;SyncProvider&lt;/code&gt; object can update data in the table or tables from which the &lt;code&gt;VIEW&lt;/code&gt; was derived.</source>
          <target state="translated">&lt;code&gt;RowSet&lt;/code&gt; オブジェクトは、SQLからデータが取り込まれてもよい &lt;code&gt;VIEW&lt;/code&gt; 。次の定数は、 &lt;code&gt;SyncProvider&lt;/code&gt; オブジェクトが1つまたは複数の &lt;code&gt;VIEW&lt;/code&gt; の派生元のテーブルのデータを更新できるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="e6142e837cc318c749d31fbf09d8617cec525f36" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object may make a connection with a data source and maintain that connection throughout its life cycle, in which case it is called a</source>
          <target state="translated">&lt;code&gt;RowSet&lt;/code&gt; オブジェクトは、データソースとの接続を確立し、そのライフサイクル全体を通じてその接続を維持する場合があります。この場合、オブジェクトは</target>
        </trans-unit>
        <trans-unit id="707af84de9b7b68e5ebc3584a61760a2a098f653" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object may use this method at any time to change its setting for the fetch direction.</source>
          <target state="translated">&lt;code&gt;RowSet&lt;/code&gt; オブジェクトは、フェッチ方向のためにその設定を変更するために、任意の時点でこの方法を使用することができます。</target>
        </trans-unit>
        <trans-unit id="6b010452c34608c38c571e31f2ff693f48d6b4b9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object may use this method at any time to change its setting for the fetch size.</source>
          <target state="translated">&lt;code&gt;RowSet&lt;/code&gt; オブジェクトは、フェッチサイズのためにその設定を変更するために、任意の時点でこの方法を使用することができます。</target>
        </trans-unit>
        <trans-unit id="0108b9517bbe90dce9032e777e0703638967bf71" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object that implements the &lt;code&gt;RowSetInternal&lt;/code&gt; interface can call on the &lt;code&gt;RowSetReader&lt;/code&gt; object associated with it to populate itself with data. It can also call on the &lt;code&gt;RowSetWriter&lt;/code&gt; object associated with it to write any changes to its rows back to the data source from which it originally got the rows. A rowset that remains connected to its data source does not need to use a reader and writer because it can simply operate on the data source directly.</source>
          <target state="translated">&lt;code&gt;RowSetInternal&lt;/code&gt; インターフェイスを実装する &lt;code&gt;RowSet&lt;/code&gt; オブジェクトは、それに関連付けられた &lt;code&gt;RowSetReader&lt;/code&gt; オブジェクトを呼び出して、それ自体にデータを取り込むことができます。また、関連付けられている &lt;code&gt;RowSetWriter&lt;/code&gt; オブジェクトを呼び出して、行への変更を、最初に行を取得したデータソースに書き戻すこともできます。データソースに接続されたままの行セットは、データソースを直接操作できるため、リーダーとライターを使用する必要はありません。</target>
        </trans-unit>
        <trans-unit id="54c411c4de012f77914b5e702ec2b2960d6d6b74" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSet&lt;/code&gt; object uses these methods internally when it is populated with data from a different &lt;code&gt;ResultSet&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;RowSet&lt;/code&gt; 、それが異なるからデータが取り込まれたときにオブジェクトが内部これらの方法を使用し &lt;code&gt;ResultSet&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="49fd81f8a57e315b66135c3c63ce9133ad73f97f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;RowSetFactory&lt;/code&gt; implementation &lt;strong&gt;must&lt;/strong&gt; be provided.</source>
          <target state="translated">&lt;code&gt;RowSetFactory&lt;/code&gt; 実装が&lt;strong&gt;なければなりません&lt;/strong&gt;提供すること。</target>
        </trans-unit>
        <trans-unit id="7e7bc1293f0b3728a32d4cbb58bc720ecd6c238e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SPIN_BOX&lt;/code&gt; is a simple spinner component and its main use is for simple numbers.</source>
          <target state="translated">A &lt;code&gt;SPIN_BOX&lt;/code&gt; は、単純なスピナーコンポーネントであり、その主な用途は、単純な数字のためです。</target>
        </trans-unit>
        <trans-unit id="3ea8ba5219610eb2bae35255e8594348e4d58db4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SQLException&lt;/code&gt; will be thrown if &lt;code&gt;identifier&lt;/code&gt; contains any characters invalid in a delimited identifier or the identifier length is invalid for the datasource.</source>
          <target state="translated">A &lt;code&gt;SQLException&lt;/code&gt; が場合にスローされます &lt;code&gt;identifier&lt;/code&gt; 任意の文字は、区切られた識別子に無効または識別子の長さがデータソースには無効であるが含まれています。</target>
        </trans-unit>
        <trans-unit id="96a2cfd5e8cf4b28163c2ecff3951f3275086377" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SQLPermission&lt;/code&gt; object contains a name (also referred to as a &quot;target name&quot;) but no actions list; there is either a named permission or there is not. The target name is the name of the permission (see below). The naming convention follows the hierarchical property naming convention. In addition, an asterisk may appear at the end of the name, following a &quot;.&quot;, or by itself, to signify a wildcard match. For example: &lt;code&gt;loadLibrary.*&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt; signify a wildcard match, while &lt;code&gt;*loadLibrary&lt;/code&gt; and &lt;code&gt;a*b&lt;/code&gt; do not.</source>
          <target state="translated">&lt;code&gt;SQLPermission&lt;/code&gt; のオブジェクトは、名前（また、「ターゲット名」とも呼ばれる）が、アクションリストは持ちません。名前付きのアクセス許可があるか、ないかのどちらかです。ターゲット名は、パーミッションの名前です（以下を参照）。命名規則は、階層プロパティの命名規則に従います。さらに、名前の末尾の「。」の後にアスタリスクを表示することも、ワイルドカードの一致を示すために単独で表示することもできます。例： &lt;code&gt;loadLibrary.*&lt;/code&gt; と &lt;code&gt;*&lt;/code&gt; はワイルドカードの一致を示しますが、 &lt;code&gt;*loadLibrary&lt;/code&gt; と &lt;code&gt;a*b&lt;/code&gt; は一致しません。</target>
        </trans-unit>
        <trans-unit id="13cffffbd34d388f3bda9e47c2411e5450931db5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SSLEngine&lt;/code&gt; provides a means for establishing secure communication sessions between two peers. &lt;code&gt;SSLEngine&lt;/code&gt; operations typically consume bytes from an input buffer and produce bytes in an output buffer. This class provides operational result values describing the state of the &lt;code&gt;SSLEngine&lt;/code&gt;, including indications of what operations are needed to finish an ongoing handshake. Lastly, it reports the number of bytes consumed and produced as a result of this operation.</source>
          <target state="translated">A &lt;code&gt;SSLEngine&lt;/code&gt; のは、 2つのピア間の安全な通信セッションを確立するための手段を提供します。 &lt;code&gt;SSLEngine&lt;/code&gt; 操作は通常、入力バッファーからバイトを消費し、出力バッファーにバイトを生成します。このクラスは、進行中のハンドシェイクを完了するために必要な操作の指示など、 &lt;code&gt;SSLEngine&lt;/code&gt; の状態を説明する操作結果値を提供します。最後に、この操作の結果として消費および生成されたバイト数を報告します。</target>
        </trans-unit>
        <trans-unit id="be5086a8a2a67512afd14b8d89179cdc1c7714b2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SSLEngine&lt;/code&gt; using this session may generate SSL/TLS packets of any size up to and including the value returned by this method. All &lt;code&gt;SSLEngine&lt;/code&gt; network buffers should be sized at least this large to avoid insufficient space problems when performing &lt;code&gt;wrap&lt;/code&gt; and &lt;code&gt;unwrap&lt;/code&gt; calls.</source>
          <target state="translated">このセッションを使用する &lt;code&gt;SSLEngine&lt;/code&gt; は、このメソッドから返される値までの任意のサイズのSSL / TLSパケットを生成できます。すべての &lt;code&gt;SSLEngine&lt;/code&gt; ネットワークバッファーのサイズは、 &lt;code&gt;wrap&lt;/code&gt; と &lt;code&gt;unwrap&lt;/code&gt; 呼び出しを実行するときのスペース不足の問題を回避するために、少なくともこのサイズにする必要があります。</target>
        </trans-unit>
        <trans-unit id="e9f67ce9dc7b53b9f6147aebe912ac7694d345ac" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SSLSessionContext&lt;/code&gt; represents a set of &lt;code&gt;SSLSession&lt;/code&gt;s associated with a single entity.</source>
          <target state="translated">A &lt;code&gt;SSLSessionContext&lt;/code&gt; には、一組を表し &lt;code&gt;SSLSession&lt;/code&gt; の単一のエンティティに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="ad116e37518384a6f8fd1b681641d4d1a4337f0d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SSLSessionContext&lt;/code&gt; represents a set of &lt;code&gt;SSLSession&lt;/code&gt;s associated with a single entity. For example, it could be associated with a server or client who participates in many sessions concurrently.</source>
          <target state="translated">A &lt;code&gt;SSLSessionContext&lt;/code&gt; には、一組を表し &lt;code&gt;SSLSession&lt;/code&gt; の単一のエンティティに関連付けられています。たとえば、同時に多くのセッションに参加するサーバーまたはクライアントに関連付けることができます。</target>
        </trans-unit>
        <trans-unit id="1d2a0651dbfc4f447ad26fb1ac64513d96122a53" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;STATUS_BAR&lt;/code&gt; is an simple component that can contain multiple labels of status information to the user.</source>
          <target state="translated">A &lt;code&gt;STATUS_BAR&lt;/code&gt; は、ユーザにステータス情報の複数のラベルを含むことができ、簡単な構成要素です。</target>
        </trans-unit>
        <trans-unit id="5cb886248ddeb9dfbe863b678ae575818122b820" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SampleModel&lt;/code&gt; that is compatible with this &lt;code&gt;ColorModel&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;ColorModel&lt;/code&gt; と互換性のある &lt;code&gt;SampleModel&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df191139b688447435814cf148062bb1f416f974" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SampleModel&lt;/code&gt; to be used as a prototype.</source>
          <target state="translated">A &lt;code&gt;SampleModel&lt;/code&gt; プロトタイプとして使用されます。</target>
        </trans-unit>
        <trans-unit id="eb176b2751507777548bce49c3daa1e4bf12d3a7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Scanner&lt;/code&gt; breaks its input into tokens using a delimiter pattern, which by default matches whitespace. The resulting tokens may then be converted into values of different types using the various &lt;code&gt;next&lt;/code&gt; methods.</source>
          <target state="translated">A &lt;code&gt;Scanner&lt;/code&gt; 、デフォルトでは空白と一致する区切りパターンを使用してトークンにその入力を破ります。結果のトークンは、さまざまな &lt;code&gt;next&lt;/code&gt; メソッドを使用して、さまざまなタイプの値に変換できます。</target>
        </trans-unit>
        <trans-unit id="d2ae5d01da91681b0e09f5bf993b02ff3d8c51d8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Scanner&lt;/code&gt; is not safe for multithreaded use without external synchronization.</source>
          <target state="translated">A &lt;code&gt;Scanner&lt;/code&gt; 外部同期せずにマルチスレッドを使用するのは安全ではありません。</target>
        </trans-unit>
        <trans-unit id="7114063e1218883537734c8807826b78fa2867d3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ScriptEngine&lt;/code&gt; created by the factory located in the search. Returns null if no such factory was found. The &lt;code&gt;ScriptEngineManager&lt;/code&gt; sets its own &lt;code&gt;globalScope&lt;/code&gt;&lt;code&gt;Bindings&lt;/code&gt; as the &lt;code&gt;GLOBAL_SCOPE&lt;/code&gt;&lt;code&gt;Bindings&lt;/code&gt; of the newly created &lt;code&gt;ScriptEngine&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;ScriptEngine&lt;/code&gt; のは検索にある工場で作成されました。そのようなファクトリが見つからなかった場合はnullを返します。 &lt;code&gt;ScriptEngineManager&lt;/code&gt; は、独自の設定 &lt;code&gt;globalScope&lt;/code&gt; &lt;code&gt;Bindings&lt;/code&gt; よう &lt;code&gt;GLOBAL_SCOPE&lt;/code&gt; &lt;code&gt;Bindings&lt;/code&gt; 新しく作成されたの &lt;code&gt;ScriptEngine&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6db977adc07c1fec67a733e8feec882a1d25224d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SearchControls&lt;/code&gt; or array object passed as a parameter to any method is owned by the caller. The service provider will not modify the object or keep a reference to it.</source>
          <target state="translated">&lt;code&gt;SearchControls&lt;/code&gt; の任意の方法のパラメーターは、発信者によって所有されているように、または配列オブジェクトが渡されます。サービスプロバイダーは、オブジェクトを変更したり、オブジェクトへの参照を保持したりしません。</target>
        </trans-unit>
        <trans-unit id="4c5a148aab6fdebb2f29c63449a68ab51157e6ce" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecureDirectoryStream&lt;/code&gt; requires corresponding support from the underlying operating system. Where an implementation supports this features then the &lt;code&gt;DirectoryStream&lt;/code&gt; returned by the &lt;a href=&quot;files#newDirectoryStream(java.nio.file.Path)&quot;&gt;&lt;code&gt;newDirectoryStream&lt;/code&gt;&lt;/a&gt; method will be a &lt;code&gt;SecureDirectoryStream&lt;/code&gt; and must be cast to that type in order to invoke the methods defined by this interface.</source>
          <target state="translated">A &lt;code&gt;SecureDirectoryStream&lt;/code&gt; は、基礎となるオペレーティングシステムから対応するサポートが必要です。実装がこの機能をサポートしている場合、&lt;a href=&quot;files#newDirectoryStream(java.nio.file.Path)&quot;&gt; &lt;code&gt;newDirectoryStream&lt;/code&gt; &lt;/a&gt;メソッドによって返される &lt;code&gt;DirectoryStream&lt;/code&gt; は &lt;code&gt;SecureDirectoryStream&lt;/code&gt; になり、このインターフェイスで定義されたメソッドを呼び出すには、そのタイプにキャストする必要があります。</target>
        </trans-unit>
        <trans-unit id="a29b101451e61fce98157bb2ee58c4b375379b8a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecureDirectoryStream&lt;/code&gt; requires corresponding support from the underlying operating system. Where an implementation supports this features then the &lt;code&gt;DirectoryStream&lt;/code&gt; returned by the &lt;a href=&quot;files#newDirectoryStream-java.nio.file.Path-&quot;&gt;&lt;code&gt;newDirectoryStream&lt;/code&gt;&lt;/a&gt; method will be a &lt;code&gt;SecureDirectoryStream&lt;/code&gt; and must be cast to that type in order to invoke the methods defined by this interface.</source>
          <target state="translated">A &lt;code&gt;SecureDirectoryStream&lt;/code&gt; は、基礎となるオペレーティングシステムから対応するサポートが必要です。実装がこの機能をサポートしている場合、&lt;a href=&quot;files#newDirectoryStream-java.nio.file.Path-&quot;&gt; &lt;code&gt;newDirectoryStream&lt;/code&gt; &lt;/a&gt;メソッドによって返される &lt;code&gt;DirectoryStream&lt;/code&gt; は &lt;code&gt;SecureDirectoryStream&lt;/code&gt; であり、このインターフェースによって定義されたメソッドを呼び出すために、その型にキャストする必要があります。</target>
        </trans-unit>
        <trans-unit id="a09895bcec5b253ef83a4711a43fb6500d77ab91" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecureRandom&lt;/code&gt; can be reseeded at any time by calling the &lt;code&gt;reseed&lt;/code&gt; or &lt;code&gt;setSeed&lt;/code&gt; method. The &lt;code&gt;reseed&lt;/code&gt; method reads entropy input from its entropy source to reseed itself. The &lt;code&gt;setSeed&lt;/code&gt; method requires the caller to provide the seed.</source>
          <target state="translated">A &lt;code&gt;SecureRandom&lt;/code&gt; 呼び出すことにより、いつでも再播種することができます &lt;code&gt;reseed&lt;/code&gt; か &lt;code&gt;setSeed&lt;/code&gt; メソッドを。 &lt;code&gt;reseed&lt;/code&gt; 方法は、それ自体を再シードするために、そのエントロピー源からのエントロピー入力を読み取ります。 &lt;code&gt;setSeed&lt;/code&gt; メソッドは、種子を提供するために、呼び出し元が必要です。</target>
        </trans-unit>
        <trans-unit id="c58cb4d6699a4a2f4e16889a3900c3794374d2a2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecureRandom&lt;/code&gt; service provider can advertise that it is thread-safe by setting the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html#service-attributes&quot;&gt;service provider attribute&lt;/a&gt; &quot;ThreadSafe&quot; to &quot;true&quot; when registering the provider. Otherwise, this class will instead synchronize access to the following methods of the &lt;code&gt;SecureRandomSpi&lt;/code&gt; implementation:</source>
          <target state="translated">&lt;code&gt;SecureRandom&lt;/code&gt; のサービスプロバイダは、それが設定することで、スレッドセーフであることを宣伝することができ&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html#service-attributes&quot;&gt;、サービスプロバイダ属性&lt;/a&gt;プロバイダを登録する際に、「真」に「スレッドセーフ」を。それ以外の場合、このクラスは代わりに &lt;code&gt;SecureRandomSpi&lt;/code&gt; 実装の次のメソッドへのアクセスを同期します。</target>
        </trans-unit>
        <trans-unit id="48f58d7e35b33c41a747ee77d10db82cdf4cd55a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecureRandom&lt;/code&gt; service provider can advertise that it is thread-safe by setting the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/15/docs/specs/security/standard-names.html#service-attributes&quot;&gt;service provider attribute&lt;/a&gt; &quot;ThreadSafe&quot; to &quot;true&quot; when registering the provider. Otherwise, this class will instead synchronize access to the following methods of the &lt;code&gt;SecureRandomSpi&lt;/code&gt; implementation:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="363c5c2b325a2467f2dba26473ef1182cb00a6ce" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecurityException&lt;/code&gt; is also thrown if any of the elements of the input &lt;code&gt;array&lt;/code&gt; is a &lt;a href=&quot;constructor&quot;&gt;&lt;code&gt;Constructor&lt;/code&gt;&lt;/a&gt; object for the class &lt;code&gt;java.lang.Class&lt;/code&gt; and &lt;code&gt;flag&lt;/code&gt; is true.</source>
          <target state="translated">A &lt;code&gt;SecurityException&lt;/code&gt; が入力の要素のいずれかの場合にもスローされる &lt;code&gt;array&lt;/code&gt; ある&lt;a href=&quot;constructor&quot;&gt; &lt;code&gt;Constructor&lt;/code&gt; &lt;/a&gt;クラスのオブジェクト &lt;code&gt;java.lang.Class&lt;/code&gt; と &lt;code&gt;flag&lt;/code&gt; 真です。</target>
        </trans-unit>
        <trans-unit id="8267123825960a628289c6028b67620bec4aa5d7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecurityException&lt;/code&gt; is also thrown if this object is a &lt;code&gt;Constructor&lt;/code&gt; object for the class &lt;code&gt;Class&lt;/code&gt; and &lt;code&gt;flag&lt;/code&gt; is true.</source>
          <target state="translated">A &lt;code&gt;SecurityException&lt;/code&gt; がこのオブジェクトがある場合にもスローされる &lt;code&gt;Constructor&lt;/code&gt; クラスのオブジェクト &lt;code&gt;Class&lt;/code&gt; と &lt;code&gt;flag&lt;/code&gt; 真です。</target>
        </trans-unit>
        <trans-unit id="1348b96b1f9cb55e6c7bc102d126076ba48c8171" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecurityException&lt;/code&gt; is raised if &lt;code&gt;flag&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; but accessibility of any of the elements of the input &lt;code&gt;array&lt;/code&gt; may not be changed (for example, if the element object is a &lt;a href=&quot;constructor&quot;&gt;&lt;code&gt;Constructor&lt;/code&gt;&lt;/a&gt; object for the class &lt;a href=&quot;../class&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt;). In the event of such a SecurityException, the accessibility of objects is set to &lt;code&gt;flag&lt;/code&gt; for array elements upto (and excluding) the element for which the exception occurred; the accessibility of elements beyond (and including) the element for which the exception occurred is unchanged.</source>
          <target state="translated">A &lt;code&gt;SecurityException&lt;/code&gt; があれば上昇する &lt;code&gt;flag&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; が、入力の要素の任意のアクセシビリティ &lt;code&gt;array&lt;/code&gt; （要素オブジェクトである場合、例えば、変更されないことが&lt;a href=&quot;constructor&quot;&gt; &lt;code&gt;Constructor&lt;/code&gt; &lt;/a&gt;クラスのオブジェクト&lt;a href=&quot;../class&quot;&gt; &lt;code&gt;Class&lt;/code&gt; &lt;/a&gt;）。そのようなSecurityExceptionが発生した場合、オブジェクトのアクセス可能性は、例外が発生した要素まで（および除外する）配列要素に &lt;code&gt;flag&lt;/code&gt; を立てるように設定されます。例外が発生した要素を超えた（およびそれを含む）要素のアクセシビリティは変更されません。</target>
        </trans-unit>
        <trans-unit id="91d4909b78a699d458ff1b4c6a25ff1e864934b3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecurityException&lt;/code&gt; is raised if &lt;code&gt;flag&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; but accessibility of this object may not be changed (for example, if this element object is a &lt;a href=&quot;constructor&quot;&gt;&lt;code&gt;Constructor&lt;/code&gt;&lt;/a&gt; object for the class &lt;a href=&quot;../class&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">A &lt;code&gt;SecurityException&lt;/code&gt; があれば上昇する &lt;code&gt;flag&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; なく（この要素オブジェクトがある場合、例えば、このオブジェクトのアクセシビリティが変更されないことが&lt;a href=&quot;constructor&quot;&gt; &lt;code&gt;Constructor&lt;/code&gt; &lt;/a&gt;クラスのオブジェクト&lt;a href=&quot;../class&quot;&gt; &lt;code&gt;Class&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="be2d43eca8667b1e0a7c0bbdfd5cbe7046d51e49" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SecurityException&lt;/code&gt; is raised if this object is a &lt;a href=&quot;constructor&quot;&gt;&lt;code&gt;Constructor&lt;/code&gt;&lt;/a&gt; object for the class &lt;code&gt;java.lang.Class&lt;/code&gt;, and &lt;code&gt;flag&lt;/code&gt; is true.</source>
          <target state="translated">A &lt;code&gt;SecurityException&lt;/code&gt; がこのオブジェクトがある場合に上昇する&lt;a href=&quot;constructor&quot;&gt; &lt;code&gt;Constructor&lt;/code&gt; &lt;/a&gt;クラスのオブジェクト &lt;code&gt;java.lang.Class&lt;/code&gt; 、及び &lt;code&gt;flag&lt;/code&gt; 真です。</target>
        </trans-unit>
        <trans-unit id="333a27035fa0205934ea5038f80b765e2ca2a0f3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Sequence&lt;/code&gt; can be created from a MIDI file by reading the file into an input stream and invoking one of the &lt;code&gt;getSequence&lt;/code&gt; methods of &lt;a href=&quot;midisystem&quot;&gt;&lt;code&gt;MidiSystem&lt;/code&gt;&lt;/a&gt;. A sequence can also be built from scratch by adding new &lt;code&gt;Tracks&lt;/code&gt; to an empty &lt;code&gt;Sequence&lt;/code&gt;, and adding &lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt; objects to these &lt;code&gt;Tracks&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;Sequence&lt;/code&gt; 入力ストリームにファイルを読み込むとの一方呼び出すことによって、MIDIファイルから作成することができる &lt;code&gt;getSequence&lt;/code&gt; の方法&lt;a href=&quot;midisystem&quot;&gt; &lt;code&gt;MidiSystem&lt;/code&gt; &lt;/a&gt;。空の &lt;code&gt;Sequence&lt;/code&gt; 新しい &lt;code&gt;Tracks&lt;/code&gt; を追加し、これらの &lt;code&gt;Tracks&lt;/code&gt; &lt;a href=&quot;midievent&quot;&gt; &lt;code&gt;MidiEvent&lt;/code&gt; &lt;/a&gt;オブジェクトを追加することで、シーケンスを最初から作成することもできます。</target>
        </trans-unit>
        <trans-unit id="47f1ccb99f3622c1d1fbee26066775abbdd89280" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Sequence&lt;/code&gt; can be created from a MIDI file by reading the file into an input stream and invoking one of the &lt;code&gt;getSequence&lt;/code&gt; methods of &lt;a href=&quot;midisystem&quot;&gt;&lt;code&gt;MidiSystem&lt;/code&gt;&lt;/a&gt;. A sequence can also be built from scratch by adding new &lt;code&gt;Tracks&lt;/code&gt; to an empty &lt;code&gt;Sequence&lt;/code&gt;, and adding &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; objects to these &lt;code&gt;Tracks&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;Sequence&lt;/code&gt; 入力ストリームにファイルを読み込むとの一方呼び出すことによって、MIDIファイルから作成することができる &lt;code&gt;getSequence&lt;/code&gt; の方法&lt;a href=&quot;midisystem&quot;&gt; &lt;code&gt;MidiSystem&lt;/code&gt; &lt;/a&gt;。空の &lt;code&gt;Sequence&lt;/code&gt; 新しい &lt;code&gt;Tracks&lt;/code&gt; を追加し、これらの &lt;code&gt;Tracks&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; オブジェクトを追加することにより、シーケンスを最初から作成することもできます。</target>
        </trans-unit>
        <trans-unit id="3a5ff8b505d73b540246b730e9a90c0545a3cc85" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Sequence&lt;/code&gt; is a data structure containing musical information (often an entire song or composition) that can be played back by a &lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">A &lt;code&gt;Sequence&lt;/code&gt; で再生可能な音楽情報を含むデータ構造（多くの場合、曲全体または組成物）である&lt;a href=&quot;sequencer&quot;&gt; &lt;code&gt;Sequencer&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="fa71ed91e1341a5f16c1570d55c6594ba10dd17c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Sequence&lt;/code&gt; is a data structure containing musical information (often an entire song or composition) that can be played back by a &lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt; object. Specifically, the &lt;code&gt;Sequence&lt;/code&gt; contains timing information and one or more tracks. Each &lt;a href=&quot;track&quot;&gt;&lt;code&gt;track&lt;/code&gt;&lt;/a&gt; consists of a series of MIDI events (such as note-ons, note-offs, program changes, and meta-events). The sequence's timing information specifies the type of unit that is used to time-stamp the events in the sequence.</source>
          <target state="translated">A &lt;code&gt;Sequence&lt;/code&gt; で再生可能な音楽情報を含むデータ構造（多くの場合、曲全体または組成物）である&lt;a href=&quot;sequencer&quot;&gt; &lt;code&gt;Sequencer&lt;/code&gt; &lt;/a&gt;オブジェクト。具体的には、 &lt;code&gt;Sequence&lt;/code&gt; はタイミング情報と1つ以上のトラックが含まれます。各&lt;a href=&quot;track&quot;&gt; &lt;code&gt;track&lt;/code&gt; &lt;/a&gt;は、一連のMIDIイベント（ノートオン、ノートオフ、プログラムの変更、メタイベントなど）で構成されています。シーケンスのタイミング情報は、シーケンス内のイベントにタイムスタンプを付けるために使用されるユニットのタイプを指定します。</target>
        </trans-unit>
        <trans-unit id="92987c7d586485713ab01347ccc93734161b144f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Sequence&lt;/code&gt; is a data structure containing musical information (often an entire song or composition) that can be played back by a &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; object.</source>
          <target state="translated">A &lt;code&gt;Sequence&lt;/code&gt; で再生可能な音楽情報を含むデータ構造（多くの場合、曲全体または組成物）である &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="c03b7c1f7021273b40415a3aaea4dcc1f735d836" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Sequence&lt;/code&gt; is a data structure containing musical information (often an entire song or composition) that can be played back by a &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; object. Specifically, the &lt;code&gt;Sequence&lt;/code&gt; contains timing information and one or more tracks. Each &lt;code&gt;&lt;a href=&quot;track&quot;&gt;&lt;code&gt;track&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; consists of a series of MIDI events (such as note-ons, note-offs, program changes, and meta-events). The sequence's timing information specifies the type of unit that is used to time-stamp the events in the sequence.</source>
          <target state="translated">A &lt;code&gt;Sequence&lt;/code&gt; で再生可能な音楽情報を含むデータ構造（多くの場合、曲全体または組成物）である &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; オブジェクト。具体的には、 &lt;code&gt;Sequence&lt;/code&gt; はタイミング情報と1つ以上のトラックが含まれます。各 &lt;code&gt;&lt;a href=&quot;track&quot;&gt;&lt;code&gt;track&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; は、一連のMIDIイベント（ノートオン、ノートオフ、プログラム変更、メタイベントなど）で構成されています。シーケンスのタイミング情報は、シーケンス内のイベントにタイムスタンプを付けるために使用されるユニットのタイプを指定します。</target>
        </trans-unit>
        <trans-unit id="53ae5e222af53133bd2c9490689f333c8858ecfa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SequenceInputStream&lt;/code&gt; represents the logical concatenation of other input streams.</source>
          <target state="translated">A &lt;code&gt;SequenceInputStream&lt;/code&gt; 他の入力ストリームの論理的連結を表します。</target>
        </trans-unit>
        <trans-unit id="5dfc24617c0471997ddeb447ae28a22a21b8674a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SequenceInputStream&lt;/code&gt; represents the logical concatenation of other input streams. It starts out with an ordered collection of input streams and reads from the first one until end of file is reached, whereupon it reads from the second one, and so on, until end of file is reached on the last of the contained input streams.</source>
          <target state="translated">A &lt;code&gt;SequenceInputStream&lt;/code&gt; 他の入力ストリームの論理的連結を表します。これは、入力ストリームの順序付けられたコレクションから始まり、ファイルの終わりに達するまで最初のストリームから読み取り、その後2番目のストリームから読み取り、以下同様に、含まれている入力ストリームの最後でファイルの終わりに達するまで読み取ります。</target>
        </trans-unit>
        <trans-unit id="64f8e35603f8ba57d8ba66f9ae61c25ccd670a67" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ServerCloneException&lt;/code&gt; is thrown if a remote exception occurs during the cloning of a &lt;code&gt;UnicastRemoteObject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ServerCloneException&lt;/code&gt; のは、リモート例外がのクローニング中に発生した場合にスローされ &lt;code&gt;UnicastRemoteObject&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="b7eba2e9b7dd931ba77a3701035a13eebd64f627" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ServerError&lt;/code&gt; is thrown as a result of a remote method invocation when an &lt;code&gt;Error&lt;/code&gt; is thrown while processing the invocation on the server, either while unmarshalling the arguments, executing the remote method itself, or marshalling the return value.</source>
          <target state="translated">A &lt;code&gt;ServerError&lt;/code&gt; リモートメソッド呼び出しの結果としてスローされ &lt;code&gt;Error&lt;/code&gt; サーバー上で呼び出しを処理している間、引数をアンマーシャリングリモートメソッド自体を実行する、または戻り値を整列化しながらのいずれか、スローされます。</target>
        </trans-unit>
        <trans-unit id="a3b63fb9fe91928086d1b1f47d822e660c579eef" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ServerError&lt;/code&gt; is thrown as a result of a remote method invocation when an &lt;code&gt;Error&lt;/code&gt; is thrown while processing the invocation on the server, either while unmarshalling the arguments, executing the remote method itself, or marshalling the return value. A &lt;code&gt;ServerError&lt;/code&gt; instance contains the original &lt;code&gt;Error&lt;/code&gt; that occurred as its cause.</source>
          <target state="translated">A &lt;code&gt;ServerError&lt;/code&gt; リモートメソッド呼び出しの結果としてスローされ &lt;code&gt;Error&lt;/code&gt; サーバー上で呼び出しを処理している間、引数をアンマーシャリングリモートメソッド自体を実行する、または戻り値を整列化しながらのいずれか、スローされます。 &lt;code&gt;ServerError&lt;/code&gt; のインスタンスは、元含ま &lt;code&gt;Error&lt;/code&gt; の原因として発生しました。</target>
        </trans-unit>
        <trans-unit id="c4a92e396c22734a0762dd6b2fd187b5c5d3052e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ServerException&lt;/code&gt; is thrown as a result of a remote method invocation when a &lt;code&gt;RemoteException&lt;/code&gt; is thrown while processing the invocation on the server, either while unmarshalling the arguments or executing the remote method itself.</source>
          <target state="translated">A &lt;code&gt;ServerException&lt;/code&gt; は、リモートメソッド呼び出しの結果としてスローされる &lt;code&gt;RemoteException&lt;/code&gt; がサーバ上で呼び出しを処理している間に投げ、いずれかの引数を非整列化またはリモートメソッド自体の実行中にされます。</target>
        </trans-unit>
        <trans-unit id="2330b59ecf339f5b208e07a73273f4281a6fee8b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ServerException&lt;/code&gt; is thrown as a result of a remote method invocation when a &lt;code&gt;RemoteException&lt;/code&gt; is thrown while processing the invocation on the server, either while unmarshalling the arguments or executing the remote method itself. A &lt;code&gt;ServerException&lt;/code&gt; instance contains the original &lt;code&gt;RemoteException&lt;/code&gt; that occurred as its cause.</source>
          <target state="translated">A &lt;code&gt;ServerException&lt;/code&gt; は、リモートメソッド呼び出しの結果としてスローされる &lt;code&gt;RemoteException&lt;/code&gt; がサーバ上で呼び出しを処理している間に投げ、いずれかの引数を非整列化またはリモートメソッド自体の実行中にされます。 &lt;code&gt;ServerException&lt;/code&gt; のインスタンスは、元の含ま &lt;code&gt;RemoteException&lt;/code&gt; その原因として発生しました。</target>
        </trans-unit>
        <trans-unit id="3d75c2168deeeca35b1589b3c45e0a3a7cba5a16" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ServerRuntimeException&lt;/code&gt; is not thrown from servers executing on the Java 2 platform v1.2 or later versions.</source>
          <target state="translated">&lt;code&gt;ServerRuntimeException&lt;/code&gt; は、 Java 2プラットフォーム1.2以降またはそれ以降のバージョンで実行されるサーバからスローされていません。</target>
        </trans-unit>
        <trans-unit id="a3a1640525a688346d415ae5d3f4e448fed7dd2e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Set&lt;/code&gt; containing the open associations, or an empty &lt;code&gt;Set&lt;/code&gt; if there are none.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="68cee623b4eb08a33c48f686d33c5250166ff777" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Set&lt;/code&gt; of &lt;code&gt;PolicyQualifierInfo&lt;/code&gt; objects are returned by the &lt;a href=&quot;policynode#getPolicyQualifiers()&quot;&gt;&lt;code&gt;PolicyNode.getPolicyQualifiers&lt;/code&gt;&lt;/a&gt; method. This allows applications with specific policy requirements to process and validate each policy qualifier. Applications that need to process policy qualifiers should explicitly set the &lt;code&gt;policyQualifiersRejected&lt;/code&gt; flag to false (by calling the &lt;a href=&quot;pkixparameters#setPolicyQualifiersRejected(boolean)&quot;&gt;&lt;code&gt;PKIXParameters.setPolicyQualifiersRejected&lt;/code&gt;&lt;/a&gt; method) before validating a certification path.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; の &lt;code&gt;PolicyQualifierInfo&lt;/code&gt; のオブジェクトがによって返される&lt;a href=&quot;policynode#getPolicyQualifiers()&quot;&gt; &lt;code&gt;PolicyNode.getPolicyQualifiers&lt;/code&gt; の&lt;/a&gt;方法。これにより、特定のポリシー要件を持つアプリケーションが各ポリシー修飾子を処理および検証できます。ポリシー修飾子を処理する必要があるアプリケーションは、認証パスを検証する前に、 &lt;code&gt;policyQualifiersRejected&lt;/code&gt; フラグを明示的にfalseに設定する必要があります（&lt;a href=&quot;pkixparameters#setPolicyQualifiersRejected(boolean)&quot;&gt; &lt;code&gt;PKIXParameters.setPolicyQualifiersRejected&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことにより）。</target>
        </trans-unit>
        <trans-unit id="664c53380d8546663274983ecf83d6c0d77d55fb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Set&lt;/code&gt; of &lt;code&gt;PolicyQualifierInfo&lt;/code&gt; objects are returned by the &lt;a href=&quot;policynode#getPolicyQualifiers--&quot;&gt;&lt;code&gt;PolicyNode.getPolicyQualifiers&lt;/code&gt;&lt;/a&gt; method. This allows applications with specific policy requirements to process and validate each policy qualifier. Applications that need to process policy qualifiers should explicitly set the &lt;code&gt;policyQualifiersRejected&lt;/code&gt; flag to false (by calling the &lt;a href=&quot;pkixparameters#setPolicyQualifiersRejected-boolean-&quot;&gt;&lt;code&gt;PKIXParameters.setPolicyQualifiersRejected&lt;/code&gt;&lt;/a&gt; method) before validating a certification path.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; の &lt;code&gt;PolicyQualifierInfo&lt;/code&gt; のオブジェクトがによって返される&lt;a href=&quot;policynode#getPolicyQualifiers--&quot;&gt; &lt;code&gt;PolicyNode.getPolicyQualifiers&lt;/code&gt; の&lt;/a&gt;方法。これにより、特定のポリシー要件を持つアプリケーションが各ポリシー修飾子を処理および検証できます。ポリシー修飾子を処理する必要のあるアプリケーションは、証明書パスを検証する前に（&lt;a href=&quot;pkixparameters#setPolicyQualifiersRejected-boolean-&quot;&gt; &lt;code&gt;PKIXParameters.setPolicyQualifiersRejected&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことにより） &lt;code&gt;policyQualifiersRejected&lt;/code&gt; フラグを明示的にfalseに設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="9e26bc246691b598cf4b4baea9dbd4941f31b126" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Set&lt;/code&gt; of private credentials held by this &lt;code&gt;Subject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; 、この保持する非公開資格の &lt;code&gt;Subject&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="25ecf6c13358fd6c3988492153f2ca66c0a7c09d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Set&lt;/code&gt; of public credentials held by this &lt;code&gt;Subject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; 、この保持する公開資格の &lt;code&gt;Subject&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d23d1497e3e01041be25fe9fe4c863ffe56c1001" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ShardingKey&lt;/code&gt; may also be used for specifying a &lt;code&gt;superShardingKey&lt;/code&gt;. Databases that support composite Sharding may use a &lt;code&gt;superShardingKey&lt;/code&gt; to specify a additional level of partitioning within the Shard.</source>
          <target state="translated">A &lt;code&gt;ShardingKey&lt;/code&gt; はまた、特定のために使用することができる &lt;code&gt;superShardingKey&lt;/code&gt; を。複合シャーディングをサポートするデータベースは、 &lt;code&gt;superShardingKey&lt;/code&gt; を使用して、シャード内のパーティションの追加レベルを指定できます。</target>
        </trans-unit>
        <trans-unit id="8e76fcba29fd4a12c2249595d7807514ece699ed" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ShortMessage&lt;/code&gt; contains a MIDI message that has at most two data bytes following its status byte.</source>
          <target state="translated">A &lt;code&gt;ShortMessage&lt;/code&gt; には、ステータスバイトを次のバイト、最大で二つのデータを持っているMIDIメッセージが含まれています。</target>
        </trans-unit>
        <trans-unit id="332caac10175dbc76add8475e7dbeca6d7617182" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ShortMessage&lt;/code&gt; contains a MIDI message that has at most two data bytes following its status byte. The types of MIDI message that satisfy this criterion are channel voice, channel mode, system common, and system real-time--in other words, everything except system exclusive and meta-events. The &lt;code&gt;ShortMessage&lt;/code&gt; class provides methods for getting and setting the contents of the MIDI message.</source>
          <target state="translated">A &lt;code&gt;ShortMessage&lt;/code&gt; には、ステータスバイトを次のバイト、最大で二つのデータを持っているMIDIメッセージが含まれています。この基準を満たすMIDIメッセージのタイプは、チャネル音声、チャネルモード、システムコモン、およびシステムリアルタイムです。つまり、システムエクスクルーシブとメタイベントを除くすべてです。 &lt;code&gt;ShortMessage&lt;/code&gt; クラスは、MIDIメッセージの内容を取得および設定するための方法を提供します。</target>
        </trans-unit>
        <trans-unit id="13ae34f3b0a0aff81ddb18ddb3768b8b2a397067" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SignatureMethod&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;xmlsignaturefactory#newSignatureMethod(java.lang.String,javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec)&quot;&gt;&lt;code&gt;newSignatureMethod&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;code&gt;SignatureMethod&lt;/code&gt; インスタンスを呼び出すことによって作成することができる&lt;a href=&quot;xmlsignaturefactory#newSignatureMethod(java.lang.String,javax.xml.crypto.dsig.spec.SignatureMethodParameterSpec)&quot;&gt; &lt;code&gt;newSignatureMethod&lt;/code&gt; の&lt;/a&gt;方法&lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt;クラス。</target>
        </trans-unit>
        <trans-unit id="31075194033bd091ea68517207b55ef35963bc6b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SignatureProperties&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;xmlsignaturefactory#newSignatureProperties(java.util.List,java.lang.String)&quot;&gt;&lt;code&gt;newSignatureProperties&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class; for example:</source>
          <target state="translated">&lt;code&gt;SignatureProperties&lt;/code&gt; のインスタンス呼び出すことによって作成することができる&lt;a href=&quot;xmlsignaturefactory#newSignatureProperties(java.util.List,java.lang.String)&quot;&gt; &lt;code&gt;newSignatureProperties&lt;/code&gt; の&lt;/a&gt;方法&lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt;クラスを、例えば：</target>
        </trans-unit>
        <trans-unit id="d864d4ecc1eed7f3acee7d1b31bb6f1733c60e27" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SignatureProperty&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;xmlsignaturefactory#newSignatureProperty(java.util.List,java.lang.String,java.lang.String)&quot;&gt;&lt;code&gt;newSignatureProperty&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class; for example:</source>
          <target state="translated">&lt;code&gt;SignatureProperty&lt;/code&gt; のインスタンスを呼び出すことによって作成することができる&lt;a href=&quot;xmlsignaturefactory#newSignatureProperty(java.util.List,java.lang.String,java.lang.String)&quot;&gt; &lt;code&gt;newSignatureProperty&lt;/code&gt; の&lt;/a&gt;方法&lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt;クラスを、例えば：</target>
        </trans-unit>
        <trans-unit id="161b7033a5670df38a4bf1dadf04453cd433b023" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SignedInfo&lt;/code&gt; instance may be created by invoking one of the &lt;a href=&quot;xmlsignaturefactory#newSignedInfo(javax.xml.crypto.dsig.CanonicalizationMethod,javax.xml.crypto.dsig.SignatureMethod,java.util.List)&quot;&gt;&lt;code&gt;newSignedInfo&lt;/code&gt;&lt;/a&gt; methods of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">A &lt;code&gt;SignedInfo&lt;/code&gt; インスタンスのいずれ呼び出すことによって作成することができる&lt;a href=&quot;xmlsignaturefactory#newSignedInfo(javax.xml.crypto.dsig.CanonicalizationMethod,javax.xml.crypto.dsig.SignatureMethod,java.util.List)&quot;&gt; &lt;code&gt;newSignedInfo&lt;/code&gt; の&lt;/a&gt;方法&lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt;クラス。</target>
        </trans-unit>
        <trans-unit id="fd52f6852258fb45d0465f21689b2a061df0bff2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SimpleScriptContext&lt;/code&gt; is used as the default &lt;code&gt;ScriptContext&lt;/code&gt; of the &lt;code&gt;AbstractScriptEngine&lt;/code&gt;..</source>
          <target state="translated">A &lt;code&gt;SimpleScriptContext&lt;/code&gt; がデフォルトとして使用され &lt;code&gt;ScriptContext&lt;/code&gt; の &lt;code&gt;AbstractScriptEngine&lt;/code&gt; ..</target>
        </trans-unit>
        <trans-unit id="a5555cfa3e24e81ee173481d7b51680cf89e298b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SimpleScriptContext&lt;/code&gt; returned by this method is used to implement eval methods using the abstract &lt;code&gt;eval(Reader,Bindings)&lt;/code&gt; and &lt;code&gt;eval(String,Bindings)&lt;/code&gt; versions.</source>
          <target state="translated">A &lt;code&gt;SimpleScriptContext&lt;/code&gt; は抽象用いて評価方法を実施するために使用され、このメソッドによって返される &lt;code&gt;eval(Reader,Bindings)&lt;/code&gt; と &lt;code&gt;eval(String,Bindings)&lt;/code&gt; バージョン。</target>
        </trans-unit>
        <trans-unit id="5c3522c1bb51e037675256ff738011a971700111" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SizeSequence&lt;/code&gt; object efficiently maintains an ordered list of sizes and corresponding positions.</source>
          <target state="translated">A &lt;code&gt;SizeSequence&lt;/code&gt; オブジェクトは、効率的なサイズおよび対応する位置の順序付きリストを保持します。</target>
        </trans-unit>
        <trans-unit id="bd4e66b73c0e8d262a5a6d1ddc1597c7e1aad79a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SizeSequence&lt;/code&gt; object efficiently maintains an ordered list of sizes and corresponding positions. One situation for which &lt;code&gt;SizeSequence&lt;/code&gt; might be appropriate is in a component that displays multiple rows of unequal size. In this case, a single &lt;code&gt;SizeSequence&lt;/code&gt; object could be used to track the heights and Y positions of all rows.</source>
          <target state="translated">A &lt;code&gt;SizeSequence&lt;/code&gt; オブジェクトは、効率的なサイズおよび対応する位置の順序付きリストを保持します。 &lt;code&gt;SizeSequence&lt;/code&gt; が適切である可能性がある1つの状況は、サイズが異なる複数の行を表示するコンポーネントです。この場合、単一の &lt;code&gt;SizeSequence&lt;/code&gt; オブジェクトを使用して、すべての行の高さとY位置を追跡できます。</target>
        </trans-unit>
        <trans-unit id="5ee1558d6d28954c02def5254470fac145c00dbc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SkeletonNotFoundException&lt;/code&gt; is thrown if the &lt;code&gt;Skeleton&lt;/code&gt; corresponding to the remote object being exported is not found. Skeletons are no longer required, so this exception is never thrown.</source>
          <target state="translated">A &lt;code&gt;SkeletonNotFoundException&lt;/code&gt; の場合にスローされる &lt;code&gt;Skeleton&lt;/code&gt; エクスポートされるリモートオブジェクトに対応するが見つかりません。スケルトンは不要になったため、この例外がスローされることはありません。</target>
        </trans-unit>
        <trans-unit id="0aa792e298cb7d4503cc6f14cc6a01bcc2f8b031" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; is mapped in the same way, but it is only convertible if &lt;em&gt;K&lt;/em&gt; is a class or interface that implements &lt;a href=&quot;../../../java.base/java/lang/comparable&quot;&gt;&lt;code&gt;Comparable&lt;/code&gt;&lt;/a&gt;. Thus, a &lt;code&gt;SortedMap&amp;lt;String,int[]&amp;gt;&lt;/code&gt; is convertible, but a &lt;code&gt;SortedMap&amp;lt;int[],String&amp;gt;&lt;/code&gt; is not. The conversion of a &lt;code&gt;SortedMap&lt;/code&gt; instance will fail with an &lt;code&gt;
          IllegalArgumentException&lt;/code&gt; if it has a non-null &lt;a href=&quot;../../../java.base/java/util/sortedmap#comparator()&quot;&gt;&lt;code&gt;comparator()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt;、&lt;em&gt;V &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; と同じ方法でマッピングされているが、場合にのみ変換可能である&lt;em&gt;Kが&lt;/em&gt;実装するクラスまたはインタフェースである&lt;a href=&quot;../../../java.base/java/lang/comparable&quot;&gt; &lt;code&gt;Comparable&lt;/code&gt; &lt;/a&gt;。したがって、 &lt;code&gt;SortedMap&amp;lt;String,int[]&amp;gt;&lt;/code&gt; は変換可能 &lt;code&gt;SortedMap&amp;lt;int[],String&amp;gt;&lt;/code&gt; が、SortedMap &amp;lt;int []、String&amp;gt;は変換できません。 &lt;code&gt;SortedMap&lt;/code&gt; インスタンスの変換は、null以外の&lt;a href=&quot;../../../java.base/java/util/sortedmap#comparator()&quot;&gt; &lt;code&gt;comparator()&lt;/code&gt; &lt;/a&gt;がある場合、 &lt;code&gt; IllegalArgumentException&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="be41add239b970c680e56068d4ab46a2a90a5a84" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt;&lt;em&gt;K&lt;/em&gt;,&lt;em&gt;V&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; is mapped in the same way, but it is only convertible if &lt;em&gt;K&lt;/em&gt; is a class or interface that implements &lt;a href=&quot;../../java/lang/comparable&quot;&gt;&lt;code&gt;Comparable&lt;/code&gt;&lt;/a&gt;. Thus, a &lt;code&gt;SortedMap&amp;lt;String,int[]&amp;gt;&lt;/code&gt; is convertible, but a &lt;code&gt;SortedMap&amp;lt;int[],String&amp;gt;&lt;/code&gt; is not. The conversion of a &lt;code&gt;SortedMap&lt;/code&gt; instance will fail with an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if it has a non-null &lt;a href=&quot;../../java/util/sortedmap#comparator--&quot;&gt;&lt;code&gt;comparator()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;SortedMap&amp;lt;&lt;/code&gt; &lt;em&gt;K&lt;/em&gt;、&lt;em&gt;V &lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; と同じ方法でマッピングされているが、場合にのみ変換可能である&lt;em&gt;Kが&lt;/em&gt;実装するクラスまたはインタフェースである&lt;a href=&quot;../../java/lang/comparable&quot;&gt; &lt;code&gt;Comparable&lt;/code&gt; &lt;/a&gt;。したがって、 &lt;code&gt;SortedMap&amp;lt;String,int[]&amp;gt;&lt;/code&gt; は変換可能 &lt;code&gt;SortedMap&amp;lt;int[],String&amp;gt;&lt;/code&gt; が、SortedMap &amp;lt;int []、String&amp;gt;は変換できません。 &lt;code&gt;SortedMap&lt;/code&gt; インスタンスの変換は、nullでない&lt;a href=&quot;../../java/util/sortedmap#comparator--&quot;&gt; &lt;code&gt;comparator()&lt;/code&gt; &lt;/a&gt;がある場合、 &lt;code&gt;IllegalArgumentException&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="86d2da3d0dd8fc66d3bad010c91cfe52a35e33d1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SortedSet&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; is also mapped in the same way as an &lt;em&gt;E&lt;/em&gt;&lt;code&gt;[]&lt;/code&gt;, but it is only convertible if &lt;em&gt;E&lt;/em&gt; is a class or interface that implements &lt;a href=&quot;../../../java.base/java/lang/comparable&quot;&gt;&lt;code&gt;Comparable&lt;/code&gt;&lt;/a&gt;. Thus, a &lt;code&gt;SortedSet&amp;lt;String&amp;gt;&lt;/code&gt; or &lt;code&gt;SortedSet&amp;lt;Integer&amp;gt;&lt;/code&gt; is convertible, but a &lt;code&gt;
          SortedSet&amp;lt;int[]&amp;gt;&lt;/code&gt; or &lt;code&gt;SortedSet&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; is not. The conversion of a &lt;code&gt;SortedSet&lt;/code&gt; instance will fail with an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if it has a non-null &lt;a href=&quot;../../../java.base/java/util/sortedset#comparator()&quot;&gt;&lt;code&gt;comparator()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;SortedSet&amp;lt;&lt;/code&gt; &lt;em&gt;Eは&lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; また、同じ方法でマッピングされる&lt;em&gt;E &lt;/em&gt; &lt;code&gt;[]&lt;/code&gt; 、しかし場合にのみ変換可能であり&lt;em&gt;、Eは&lt;/em&gt;、クラスまたはインタフェースが実装されていること&lt;a href=&quot;../../../java.base/java/lang/comparable&quot;&gt; &lt;code&gt;Comparable&lt;/code&gt; &lt;/a&gt;。したがって、 &lt;code&gt;SortedSet&amp;lt;String&amp;gt;&lt;/code&gt; または &lt;code&gt;SortedSet&amp;lt;Integer&amp;gt;&lt;/code&gt; は変換可能ですが、 &lt;code&gt; SortedSet&amp;lt;int[]&amp;gt;&lt;/code&gt; または &lt;code&gt;SortedSet&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; は変換できません。 &lt;code&gt;SortedSet&lt;/code&gt; インスタンスの変換は、null以外の&lt;a href=&quot;../../../java.base/java/util/sortedset#comparator()&quot;&gt; &lt;code&gt;comparator()&lt;/code&gt; &lt;/a&gt;がある場合、 &lt;code&gt;IllegalArgumentException&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="eba384ea4c59a220657b695b8a65869443ab17b0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SortedSet&amp;lt;&lt;/code&gt;&lt;em&gt;E&lt;/em&gt;&lt;code&gt;&amp;gt;&lt;/code&gt; is also mapped in the same way as an &lt;em&gt;E&lt;/em&gt;&lt;code&gt;[]&lt;/code&gt;, but it is only convertible if &lt;em&gt;E&lt;/em&gt; is a class or interface that implements &lt;a href=&quot;../../java/lang/comparable&quot;&gt;&lt;code&gt;Comparable&lt;/code&gt;&lt;/a&gt;. Thus, a &lt;code&gt;SortedSet&amp;lt;String&amp;gt;&lt;/code&gt; or &lt;code&gt;SortedSet&amp;lt;Integer&amp;gt;&lt;/code&gt; is convertible, but a &lt;code&gt;SortedSet&amp;lt;int[]&amp;gt;&lt;/code&gt; or &lt;code&gt;SortedSet&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; is not. The conversion of a &lt;code&gt;SortedSet&lt;/code&gt; instance will fail with an &lt;code&gt;IllegalArgumentException&lt;/code&gt; if it has a non-null &lt;a href=&quot;../../java/util/sortedset#comparator--&quot;&gt;&lt;code&gt;comparator()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;SortedSet&amp;lt;&lt;/code&gt; &lt;em&gt;Eは&lt;/em&gt; &lt;code&gt;&amp;gt;&lt;/code&gt; また、同じ方法でマッピングされる&lt;em&gt;E &lt;/em&gt; &lt;code&gt;[]&lt;/code&gt; 、しかし場合にのみ変換可能であり&lt;em&gt;、Eは&lt;/em&gt;、クラスまたはインタフェースが実装されていること&lt;a href=&quot;../../java/lang/comparable&quot;&gt; &lt;code&gt;Comparable&lt;/code&gt; &lt;/a&gt;。したがって、 &lt;code&gt;SortedSet&amp;lt;String&amp;gt;&lt;/code&gt; または &lt;code&gt;SortedSet&amp;lt;Integer&amp;gt;&lt;/code&gt; は変換可能ですが、 &lt;code&gt;SortedSet&amp;lt;int[]&amp;gt;&lt;/code&gt; または &lt;code&gt;SortedSet&amp;lt;List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; は変換できません。 &lt;code&gt;SortedSet&lt;/code&gt; インスタンスの変換は、nullでない&lt;a href=&quot;../../java/util/sortedset#comparator--&quot;&gt; &lt;code&gt;comparator()&lt;/code&gt; &lt;/a&gt;がある場合、 &lt;code&gt;IllegalArgumentException&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="9a1428a93985c53305df08261b8b65973bb4ae90" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Soundbank&lt;/code&gt; contains a set of &lt;code&gt;Instruments&lt;/code&gt; that can be loaded into a &lt;code&gt;Synthesizer&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;Soundbank&lt;/code&gt; 一連の含まれている &lt;code&gt;Instruments&lt;/code&gt; にロードすることができ &lt;code&gt;Synthesizer&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="936fe97b42056562dcee1bb2643c429b7f2dde2d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Soundbank&lt;/code&gt; contains a set of &lt;code&gt;Instruments&lt;/code&gt; that can be loaded into a &lt;code&gt;Synthesizer&lt;/code&gt;. Note that a Java Sound &lt;code&gt;Soundbank&lt;/code&gt; is different from a MIDI bank. MIDI permits up to 16383 banks, each containing up to 128 instruments (also sometimes called programs, patches, or timbres). However, a &lt;code&gt;Soundbank&lt;/code&gt; can contain 16383 times 128 instruments, because the instruments within a &lt;code&gt;Soundbank&lt;/code&gt; are indexed by both a MIDI program number and a MIDI bank number (via a &lt;code&gt;Patch&lt;/code&gt; object). Thus, a &lt;code&gt;Soundbank&lt;/code&gt; can be thought of as a collection of MIDI banks.</source>
          <target state="translated">A &lt;code&gt;Soundbank&lt;/code&gt; 一連の含まれている &lt;code&gt;Instruments&lt;/code&gt; にロードすることができ &lt;code&gt;Synthesizer&lt;/code&gt; 。Java Sound &lt;code&gt;Soundbank&lt;/code&gt; はMIDIバンクとは異なることに注意してください。MIDIは最大16383のバンクを許可し、各バンクには最大128のインストゥルメント（プログラム、パッチ、またはティンバーとも呼ばれる）が含まれます。ただし、 &lt;code&gt;Soundbank&lt;/code&gt; 内のインストゥル &lt;code&gt;Soundbank&lt;/code&gt; はMIDIプログラム番号とMIDIバンク番号の両方（ &lt;code&gt;Patch&lt;/code&gt; オブジェクトを介して）でインデックス付けされるため、Soundbankには16383 x 128のインストゥルメントを含めることができます。したがって、 &lt;code&gt;Soundbank&lt;/code&gt; バンクはMIDIバンクのコレクションと考えることができます。</target>
        </trans-unit>
        <trans-unit id="bb71c7f35d20411e9a38b12129e5a3cc399d79a3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SoundbankReader&lt;/code&gt; supplies soundbank file-reading services.</source>
          <target state="translated">&lt;code&gt;SoundbankReader&lt;/code&gt; の物資サウンドバンクファイル読み込みサービスを提供しています。</target>
        </trans-unit>
        <trans-unit id="d6ebdda51f94a93f6575dd9124879e379ffd4459" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SoundbankReader&lt;/code&gt; supplies soundbank file-reading services. Concrete subclasses of &lt;code&gt;SoundbankReader&lt;/code&gt; parse a given soundbank file, producing a &lt;a href=&quot;../soundbank&quot;&gt;&lt;code&gt;Soundbank&lt;/code&gt;&lt;/a&gt; object that can be loaded into a &lt;a href=&quot;../synthesizer&quot;&gt;&lt;code&gt;Synthesizer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;SoundbankReader&lt;/code&gt; の物資サウンドバンクファイル読み込みサービスを提供しています。 &lt;code&gt;SoundbankReader&lt;/code&gt; の具象サブクラスは、指定されたサウンドバンクファイルを解析し、&lt;a href=&quot;../synthesizer&quot;&gt; &lt;code&gt;Synthesizer&lt;/code&gt; に&lt;/a&gt;ロードできる&lt;a href=&quot;../soundbank&quot;&gt; &lt;code&gt;Soundbank&lt;/code&gt; &lt;/a&gt;オブジェクトを生成します。</target>
        </trans-unit>
        <trans-unit id="531bd93ae1b0a0949760752bd971c5d495fa484f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SoundbankResource&lt;/code&gt; represents any audio resource stored in a &lt;a href=&quot;soundbank&quot;&gt;&lt;code&gt;Soundbank&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;SoundbankResource&lt;/code&gt; とは、に格納された任意のオーディオリソース表す&lt;a href=&quot;soundbank&quot;&gt; &lt;code&gt;Soundbank&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8daf3926a405767122d6902eed98c6cc7a828cc2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SoundbankResource&lt;/code&gt; represents any audio resource stored in a &lt;a href=&quot;soundbank&quot;&gt;&lt;code&gt;Soundbank&lt;/code&gt;&lt;/a&gt;. Common soundbank resources include:</source>
          <target state="translated">A &lt;code&gt;SoundbankResource&lt;/code&gt; とは、に格納された任意のオーディオリソース表す&lt;a href=&quot;soundbank&quot;&gt; &lt;code&gt;Soundbank&lt;/code&gt; &lt;/a&gt;。一般的なサウンドバンクのリソースは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="6c75af74d3d4959ceb2c10f6ff6fa241a313d323" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SoundbankResource&lt;/code&gt; represents any audio resource stored in a &lt;code&gt;&lt;a href=&quot;soundbank&quot;&gt;&lt;code&gt;Soundbank&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;SoundbankResource&lt;/code&gt; とは、に格納された任意のオーディオリソース表す &lt;code&gt;&lt;a href=&quot;soundbank&quot;&gt;&lt;code&gt;Soundbank&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3778c6c6b603f44bd9513dc8ca46834e3c73bffb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SoundbankResource&lt;/code&gt; represents any audio resource stored in a &lt;code&gt;&lt;a href=&quot;soundbank&quot;&gt;&lt;code&gt;Soundbank&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;. Common soundbank resources include:</source>
          <target state="translated">A &lt;code&gt;SoundbankResource&lt;/code&gt; とは、に格納された任意のオーディオリソース表す &lt;code&gt;&lt;a href=&quot;soundbank&quot;&gt;&lt;code&gt;Soundbank&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 。共通のサウンドバンクリソースには次のものがあります。</target>
        </trans-unit>
        <trans-unit id="676ccfc2783b72d0cdbcf2483ca996f800476580" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Source&lt;/code&gt;&lt;code&gt;Object&lt;/code&gt; suitable for passing to the &lt;code&gt;TransformerFactory&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TransformerFactory&lt;/code&gt; に渡すのに適した &lt;code&gt;Source&lt;/code&gt; &lt;code&gt;Object&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f45c7bf343186e4baef93dd0ec4dd1259f8e4c74" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SpinnerModel&lt;/code&gt; for sequences of &lt;code&gt;Date&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;SpinnerModel&lt;/code&gt; のシーケンスのための &lt;code&gt;Date&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="392213bf914cb7615247161f7fc76519defde5d4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SpinnerModel&lt;/code&gt; for sequences of &lt;code&gt;Date&lt;/code&gt;s. The upper and lower bounds of the sequence are defined by properties called &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; and the size of the increase or decrease computed by the &lt;code&gt;nextValue&lt;/code&gt; and &lt;code&gt;previousValue&lt;/code&gt; methods is defined by a property called &lt;code&gt;calendarField&lt;/code&gt;. The &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;end&lt;/code&gt; properties can be &lt;code&gt;null&lt;/code&gt; to indicate that the sequence has no lower or upper limit.</source>
          <target state="translated">&lt;code&gt;SpinnerModel&lt;/code&gt; のシーケンスのための &lt;code&gt;Date&lt;/code&gt; の。シーケンスの上限と下限は &lt;code&gt;start&lt;/code&gt; と &lt;code&gt;end&lt;/code&gt; と呼ばれるプロパティによって定義され、 &lt;code&gt;nextValue&lt;/code&gt; メソッドと &lt;code&gt;previousValue&lt;/code&gt; メソッドによって計算される増加または減少のサイズは &lt;code&gt;calendarField&lt;/code&gt; と呼ばれるプロパティによって定義されます。 &lt;code&gt;start&lt;/code&gt; および &lt;code&gt;end&lt;/code&gt; 特性があってもよい &lt;code&gt;null&lt;/code&gt; 配列がない上限または下限を有していることを示すために。</target>
        </trans-unit>
        <trans-unit id="6f45aa5fd321b96a79a9fe3cf25bb484669f4118" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SpinnerModel&lt;/code&gt; for sequences of numbers.</source>
          <target state="translated">&lt;code&gt;SpinnerModel&lt;/code&gt; 数字のシーケンスのために。</target>
        </trans-unit>
        <trans-unit id="d187c6f6825bea9218b43a222d8024c230fd233b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SpinnerModel&lt;/code&gt; for sequences of numbers. The upper and lower bounds of the sequence are defined by properties called &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum&lt;/code&gt;. The size of the increase or decrease computed by the &lt;code&gt;nextValue&lt;/code&gt; and &lt;code&gt;previousValue&lt;/code&gt; methods is defined by a property called &lt;code&gt;stepSize&lt;/code&gt;. The &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum&lt;/code&gt; properties can be &lt;code&gt;null&lt;/code&gt; to indicate that the sequence has no lower or upper limit. All of the properties in this class are defined in terms of two generic types: &lt;code&gt;Number&lt;/code&gt; and &lt;code&gt;Comparable&lt;/code&gt;, so that all Java numeric types may be accommodated. Internally, there's only support for values whose type is one of the primitive &lt;code&gt;Number&lt;/code&gt; types: &lt;code&gt;Double&lt;/code&gt;, &lt;code&gt;Float&lt;/code&gt;, &lt;code&gt;Long&lt;/code&gt;, &lt;code&gt;Integer&lt;/code&gt;, &lt;code&gt;Short&lt;/code&gt;, or &lt;code&gt;Byte&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SpinnerModel&lt;/code&gt; 数字のシーケンスのために。シーケンスの上限と下限は、 &lt;code&gt;minimum&lt;/code&gt; と &lt;code&gt;maximum&lt;/code&gt; 値と呼ばれるプロパティによって定義されます。計算された増減の大きさ &lt;code&gt;nextValue&lt;/code&gt; メソッドと &lt;code&gt;previousValue&lt;/code&gt; メソッドが呼び出さプロパティによって定義されている &lt;code&gt;stepSize&lt;/code&gt; 。 &lt;code&gt;minimum&lt;/code&gt; と &lt;code&gt;maximum&lt;/code&gt; の特性とすることができる &lt;code&gt;null&lt;/code&gt; 配列がない上限または下限を有していることを示すために。このクラスのすべてのプロパティは、 &lt;code&gt;Number&lt;/code&gt; と &lt;code&gt;Comparable&lt;/code&gt; の2つのジェネリック型で定義されています。、すべてのJava数値タイプに対応できるようにします。内部的には、タイプがプリミティブの &lt;code&gt;Number&lt;/code&gt; タイプの1つである値（ &lt;code&gt;Double&lt;/code&gt; 、 &lt;code&gt;Float&lt;/code&gt; 、 &lt;code&gt;Long&lt;/code&gt; 、 &lt;code&gt;Integer&lt;/code&gt; 、 &lt;code&gt;Short&lt;/code&gt; 、または &lt;code&gt;Byte&lt;/code&gt; )のみがサポートされています。</target>
        </trans-unit>
        <trans-unit id="fbfe491daf8df4ed6725a2f50f6f7d4dd5daab9b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SpinnerModel&lt;/code&gt; has three properties, only the first is read/write.</source>
          <target state="translated">A &lt;code&gt;SpinnerModel&lt;/code&gt; 最初は読み取り/書き込みで、3つのプロパティを持っています。</target>
        </trans-unit>
        <trans-unit id="dfadbbee2a75f91ba2e5b6043571e05f0377a1e0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Spring&lt;/code&gt; can be treated as a pair of intervals with a single common point: the preferred value. The following rules define some of the arithmetic operators that can be applied to intervals (&lt;code&gt;[a, b]&lt;/code&gt; refers to the interval from &lt;code&gt;a&lt;/code&gt; to &lt;code&gt;b&lt;/code&gt;, where &lt;code&gt;a &amp;lt;= b&lt;/code&gt;).</source>
          <target state="translated">A &lt;code&gt;Spring&lt;/code&gt; 好ましい値：単一の共通点との間隔のペアとして扱うことができます。以下の規則は、時間間隔に適用することができる算術演算子のいくつかの定義（ &lt;code&gt;[a, b]&lt;/code&gt; から間隔を意味し &lt;code&gt;b&lt;/code&gt; 、 &lt;code&gt;a &amp;lt;= b&lt;/code&gt; ）。 &lt;code&gt;a&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9f9250daa9ad4c59ffc79d62d4e332248dc6117b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SpringLayout&lt;/code&gt; lays out the children of its associated container according to a set of constraints.</source>
          <target state="translated">A &lt;code&gt;SpringLayout&lt;/code&gt; 、一連の制約に基づいて、関連するコンテナの子を配置します。</target>
        </trans-unit>
        <trans-unit id="647df4c0f4a0e18cd2cbef78259fd7de61698945" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SpringLayout&lt;/code&gt; lays out the children of its associated container according to a set of constraints. See &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/layout/spring.html&quot;&gt;How to Use SpringLayout&lt;/a&gt; in &lt;em&gt;The Java Tutorial&lt;/em&gt; for examples of using &lt;code&gt;SpringLayout&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;SpringLayout&lt;/code&gt; 、一連の制約に基づいて、関連するコンテナの子を配置します。参照してください&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/layout/spring.html&quot;&gt;どのように使ったSpringLayoutに&lt;/a&gt;で&lt;em&gt;Javaチュートリアル&lt;/em&gt;の使用例について &lt;code&gt;SpringLayout&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5750761ca1f07b4a8a5c3657d465c11efe891835" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SpringLayout&lt;/code&gt; lays out the children of its associated container according to a set of constraints. See &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/uiswing/layout/spring.html&quot;&gt;How to Use SpringLayout&lt;/a&gt; in &lt;em&gt;The Java Tutorial&lt;/em&gt; for examples of using &lt;code&gt;SpringLayout&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a839716f37e131b27baf09f1bcaa49eab165af51" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StackFrame&lt;/code&gt; object represents a method invocation returned by &lt;a href=&quot;stackwalker&quot;&gt;&lt;code&gt;StackWalker&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;StackFrame&lt;/code&gt; オブジェクトは、によって返されたメソッド呼び出しを表し&lt;a href=&quot;stackwalker&quot;&gt; &lt;code&gt;StackWalker&lt;/code&gt; を&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7b5399ec744e680e76f8bd66a301234127a65991" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StackWalker&lt;/code&gt; configured with this option will support &lt;a href=&quot;stackwalker#getCallerClass()&quot;&gt;&lt;code&gt;StackWalker.getCallerClass()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stackwalker.stackframe#getDeclaringClass()&quot;&gt;&lt;code&gt;StackFrame.getDeclaringClass()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このオプションで構成された &lt;code&gt;StackWalker&lt;/code&gt; は、&lt;a href=&quot;stackwalker#getCallerClass()&quot;&gt; &lt;code&gt;StackWalker.getCallerClass()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;stackwalker.stackframe#getDeclaringClass()&quot;&gt; &lt;code&gt;StackFrame.getDeclaringClass()&lt;/code&gt; &lt;/a&gt;をサポートします。</target>
        </trans-unit>
        <trans-unit id="b86b63120f1187e9a115af3b0e4d8f77d1520294" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Statement&lt;/code&gt; object represents a primitive statement in which a single method is applied to a target and a set of arguments - as in &lt;code&gt;&quot;a.setFoo(b)&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Statement&lt;/code&gt; のよう-オブジェクトは、単一のメソッドをターゲットと引数のセットに適用したプリミティブステートメント表す &lt;code&gt;&quot;a.setFoo(b)&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3a61be4591e38d6b7a3aa4b3b5d6a361b09587d3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Statement&lt;/code&gt; object represents a primitive statement in which a single method is applied to a target and a set of arguments - as in &lt;code&gt;&quot;a.setFoo(b)&quot;&lt;/code&gt;. Note that where this example uses names to denote the target and its argument, a statement object does not require a name space and is constructed with the values themselves. The statement object associates the named method with its environment as a simple set of values: the target and an array of argument values.</source>
          <target state="translated">&lt;code&gt;Statement&lt;/code&gt; のよう-オブジェクトは、単一のメソッドをターゲットと引数のセットに適用したプリミティブステートメント表す &lt;code&gt;&quot;a.setFoo(b)&quot;&lt;/code&gt; 。この例では名前を使用してターゲットとその引数を示していますが、ステートメントオブジェクトは名前空間を必要とせず、値自体で構成されています。ステートメントオブジェクトは、名前付きメソッドをその単純な値のセット（ターゲットと引数値の配列）として環境に関連付けます。</target>
        </trans-unit>
        <trans-unit id="f73581493c1b2f0ecf66831949c9034f451696b1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StatementEvent&lt;/code&gt; is sent to all &lt;code&gt;StatementEventListener&lt;/code&gt;s which were registered with a &lt;code&gt;PooledConnection&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;StatementEvent&lt;/code&gt; はすべてに送信される &lt;code&gt;StatementEventListener&lt;/code&gt; で登録された秒 &lt;code&gt;PooledConnection&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f41bc39c312df02f4d21bf896a121cd0a424b96e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StatementEvent&lt;/code&gt; is sent to all &lt;code&gt;StatementEventListener&lt;/code&gt;s which were registered with a &lt;code&gt;PooledConnection&lt;/code&gt;. This occurs when the driver determines that a &lt;code&gt;PreparedStatement&lt;/code&gt; that is associated with the &lt;code&gt;PooledConnection&lt;/code&gt; has been closed or the driver determines is invalid.</source>
          <target state="translated">A &lt;code&gt;StatementEvent&lt;/code&gt; はすべてに送信される &lt;code&gt;StatementEventListener&lt;/code&gt; で登録された秒 &lt;code&gt;PooledConnection&lt;/code&gt; 。これは、 &lt;code&gt;PooledConnection&lt;/code&gt; に関連付けられている &lt;code&gt;PreparedStatement&lt;/code&gt; が閉じられているとドライバーが判断した場合、またはドライバーが無効であると判断した場合に発生します。</target>
        </trans-unit>
        <trans-unit id="bd2df8bb26a7e8052efe5bdb4f2ef98c07c3e44c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StreamPrintServiceFactory&lt;/code&gt; is the factory for &lt;a href=&quot;javax/print/streamprintservice&quot;&gt;&lt;code&gt;StreamPrintService&lt;/code&gt;&lt;/a&gt; instances, which can print to an output stream in a particular document format described as a mime type.</source>
          <target state="translated">A &lt;code&gt;StreamPrintServiceFactory&lt;/code&gt; はのために工場で&lt;a href=&quot;javax/print/streamprintservice&quot;&gt; &lt;code&gt;StreamPrintService&lt;/code&gt; &lt;/a&gt;MIMEタイプとして記載された特定の文書フォーマットで出力ストリームに印刷することができインスタンス。</target>
        </trans-unit>
        <trans-unit id="88b96780c6028bc816e36e9837df5f86754a3912" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StreamPrintServiceFactory&lt;/code&gt; is the factory for &lt;a href=&quot;streamprintservice&quot;&gt;&lt;code&gt;StreamPrintService&lt;/code&gt;&lt;/a&gt; instances, which can print to an output stream in a particular document format described as a mime type.</source>
          <target state="translated">A &lt;code&gt;StreamPrintServiceFactory&lt;/code&gt; はのために工場で&lt;a href=&quot;streamprintservice&quot;&gt; &lt;code&gt;StreamPrintService&lt;/code&gt; &lt;/a&gt; MIMEタイプとして記載された特定の文書フォーマットで出力ストリームに印刷することができインスタンス。</target>
        </trans-unit>
        <trans-unit id="9f370a18ad256d8838013b96f3fd3a6c57070006" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StreamPrintServiceFactory&lt;/code&gt; is the factory for &lt;a href=&quot;streamprintservice&quot;&gt;&lt;code&gt;StreamPrintService&lt;/code&gt;&lt;/a&gt; instances, which can print to an output stream in a particular document format described as a mime type. A typical output document format may be Postscript(TM).</source>
          <target state="translated">A &lt;code&gt;StreamPrintServiceFactory&lt;/code&gt; はのために工場で&lt;a href=&quot;streamprintservice&quot;&gt; &lt;code&gt;StreamPrintService&lt;/code&gt; &lt;/a&gt; MIMEタイプとして記載された特定の文書フォーマットで出力ストリームに印刷することができインスタンス。典型的な出力ドキュメント形式はPostscript（TM）です。</target>
        </trans-unit>
        <trans-unit id="b656cee1e6a2645b9dd951fcb66dbb0f94a1a368" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; constant containing the standard format name, &lt;code&gt;&quot;javax_imageio_1.0&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; 標準形式名を含む定数、 &lt;code&gt;&quot;javax_imageio_1.0&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53fba3d0e985e2fa295966cac78bdf47bb9cd3fc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; containing the class name of the native stream metadata format supported by this plug-in, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; このプラグインは、最初にサポートされるネイティブのストリームメタデータ形式のクラス名を含む &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8d1c74db349ee872ae5cd9850f6c87be3d51a45e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; containing the name of the associated plug-in class, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; 、関連プラグインクラス、最初の名前を含む &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d45247269dbaf1c1d7689b448b26edb5feef622e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; containing the name of the current compression type, or &lt;code&gt;null&lt;/code&gt; if none is set.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; 現在の圧縮タイプ、または名前を含む &lt;code&gt;null&lt;/code&gt; 何も設定されていない場合。</target>
        </trans-unit>
        <trans-unit id="50a95660663285b02c516594baebaf298fae2baa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; containing the name of the native stream metadata format supported by this plug-in, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; このプラグインは、最初にサポートされるネイティブのストリームメタデータ形式の名前を含む &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="daebdbc07674cc4a6f713de7393f0826d2e05d53" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; representation of a positive &lt;code&gt;Long&lt;/code&gt; value followed by an empty space and one of the following units:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="a223c6052304a28bfe657353c24cb87b484346cd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; representing the error message with location information appended.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; 位置情報とエラーメッセージを表す添付しました。</target>
        </trans-unit>
        <trans-unit id="d10ab1d455c0a57466c25555861d5c804559d231" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; represents a string in the UTF-16 format in which &lt;em&gt;supplementary characters&lt;/em&gt; are represented by &lt;em&gt;surrogate pairs&lt;/em&gt; (see the section &lt;a href=&quot;character#unicode&quot;&gt;Unicode Character Representations&lt;/a&gt; in the &lt;code&gt;Character&lt;/code&gt; class for more information). Index values refer to &lt;code&gt;char&lt;/code&gt; code units, so a supplementary character uses two positions in a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; たUTF-16形式の文字列表す&lt;em&gt;補助文字が&lt;/em&gt;で表される&lt;em&gt;サロゲートペア&lt;/em&gt;（節を参照&lt;a href=&quot;character#unicode&quot;&gt;のUnicode文字表現&lt;/a&gt;における &lt;code&gt;Character&lt;/code&gt; 詳細については、クラス）。インデックス値は &lt;code&gt;char&lt;/code&gt; コード単位を参照するため、補助文字は &lt;code&gt;String&lt;/code&gt; の 2つの位置を使用します。</target>
        </trans-unit>
        <trans-unit id="34c086efe17669f8c286b6ac46d5b21d5d149d5e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; to be returned from &lt;code&gt;getVendorName&lt;/code&gt;, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; から返される &lt;code&gt;getVendorName&lt;/code&gt; 最初は、 &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="03315933b3ff9b0f30ad43e2ef49e3cb9a6150ad" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; to be returned from &lt;code&gt;getVendorName&lt;/code&gt;, initially &lt;code&gt;null&lt;/code&gt;. Constructors should set this to a non-&lt;code&gt;null&lt;/code&gt; value.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; から返される &lt;code&gt;getVendorName&lt;/code&gt; 最初は、 &lt;code&gt;null&lt;/code&gt; 。コンストラクタはこれを &lt;code&gt;null&lt;/code&gt; 以外の値に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d73b9ed3737e5a0865beb15731efe020f845df7a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; to be returned from &lt;code&gt;getVersion&lt;/code&gt;, initially null.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; から返される &lt;code&gt;getVersion&lt;/code&gt; 、最初はnull。</target>
        </trans-unit>
        <trans-unit id="4f161d6eb22ce16b9243b0894aaae9d6076c8921" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String&lt;/code&gt; to be returned from &lt;code&gt;getVersion&lt;/code&gt;, initially null. Constructors should set this to a non-&lt;code&gt;null&lt;/code&gt; value.</source>
          <target state="translated">A &lt;code&gt;String&lt;/code&gt; から返される &lt;code&gt;getVersion&lt;/code&gt; 、最初はnull。コンストラクタはこれを &lt;code&gt;null&lt;/code&gt; 以外の値に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="ae9b075558f4a4a24b9bd96101c6b618f699536c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StringJoiner&lt;/code&gt; is empty if &lt;a href=&quot;#add(java.lang.CharSequence)&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt; has never been called, and if &lt;code&gt;merge()&lt;/code&gt; has never been called with a non-empty &lt;code&gt;StringJoiner&lt;/code&gt; argument.</source>
          <target state="translated">A &lt;code&gt;StringJoiner&lt;/code&gt; は場合は空である&lt;a href=&quot;#add(java.lang.CharSequence)&quot;&gt; &lt;code&gt;add()&lt;/code&gt; &lt;/a&gt;呼び出されなかった場合、および &lt;code&gt;merge()&lt;/code&gt; 空でないと呼ばれていない &lt;code&gt;StringJoiner&lt;/code&gt; の引数。</target>
        </trans-unit>
        <trans-unit id="843830e38e5ab1ee9ec315a6b3904b915eb4d232" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StringJoiner&lt;/code&gt; is empty if &lt;a href=&quot;stringjoiner#add-java.lang.CharSequence-&quot;&gt;&lt;code&gt;add()&lt;/code&gt;&lt;/a&gt; has never been called, and if &lt;code&gt;merge()&lt;/code&gt; has never been called with a non-empty &lt;code&gt;StringJoiner&lt;/code&gt; argument.</source>
          <target state="translated">A &lt;code&gt;StringJoiner&lt;/code&gt; は場合は空である&lt;a href=&quot;stringjoiner#add-java.lang.CharSequence-&quot;&gt; &lt;code&gt;add()&lt;/code&gt; &lt;/a&gt;呼び出されなかった場合、および &lt;code&gt;merge()&lt;/code&gt; 空でないと呼ばれていない &lt;code&gt;StringJoiner&lt;/code&gt; の引数。</target>
        </trans-unit>
        <trans-unit id="f945f4248f125fc9f42cd4cd88c1f0e16cb55452" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StringJoiner&lt;/code&gt; may be employed to create formatted output from a &lt;a href=&quot;stream/stream&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;stream/collectors#joining(java.lang.CharSequence)&quot;&gt;&lt;code&gt;Collectors.joining(CharSequence)&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">A &lt;code&gt;StringJoiner&lt;/code&gt; はからフォーマットされた出力を作成するために使用することができる&lt;a href=&quot;stream/stream&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;用い&lt;a href=&quot;stream/collectors#joining(java.lang.CharSequence)&quot;&gt; &lt;code&gt;Collectors.joining(CharSequence)&lt;/code&gt; &lt;/a&gt;。例えば：</target>
        </trans-unit>
        <trans-unit id="4f01da94ce05781ad0c478fa1fd9874f22c00b82" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StringJoiner&lt;/code&gt; may be employed to create formatted output from a &lt;a href=&quot;stream/stream&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;stream/collectors#joining-java.lang.CharSequence-&quot;&gt;&lt;code&gt;Collectors.joining(CharSequence)&lt;/code&gt;&lt;/a&gt;. For example:</source>
          <target state="translated">A &lt;code&gt;StringJoiner&lt;/code&gt; はからフォーマットされた出力を作成するために使用することができる&lt;a href=&quot;stream/stream&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;用い&lt;a href=&quot;stream/collectors#joining-java.lang.CharSequence-&quot;&gt; &lt;code&gt;Collectors.joining(CharSequence)&lt;/code&gt; &lt;/a&gt;。例えば：</target>
        </trans-unit>
        <trans-unit id="7b30e0d159c48329651d255c8e3e3295c07dcd39" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StringTokenizer&lt;/code&gt; object internally maintains a current position within the string to be tokenized. Some operations advance this current position past the characters processed.</source>
          <target state="translated">&lt;code&gt;StringTokenizer&lt;/code&gt; はのオブジェクトは、内部的に、文字列内の現在位置がトークン化されるように維持しています。一部の操作は、処理された文字を超えてこの現在の位置を進めます。</target>
        </trans-unit>
        <trans-unit id="f2e2befae22818c094f8322a0e604a8f947006ab" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String[]&lt;/code&gt; can be converted to a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; using &lt;a href=&quot;../../../java.base/java/util/arrays#asList(T...)&quot;&gt;&lt;code&gt;Arrays.asList&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;String[]&lt;/code&gt; に変換することができる &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; 使用&lt;a href=&quot;../../../java.base/java/util/arrays#asList(T...)&quot;&gt; &lt;code&gt;Arrays.asList&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5e7436c99924a2c38b8714b1e9dd2189b9fa534e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;String[]&lt;/code&gt; can be converted to a &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; using &lt;a href=&quot;../../java/util/arrays#asList-T...-&quot;&gt;&lt;code&gt;Arrays.asList&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;String[]&lt;/code&gt; に変換することができる &lt;code&gt;List&amp;lt;String&amp;gt;&lt;/code&gt; 使用&lt;a href=&quot;../../java/util/arrays#asList-T...-&quot;&gt; &lt;code&gt;Arrays.asList&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="7a7e56015aefb2c91c33ffde725bf100e28b8a74" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StubNotFoundException&lt;/code&gt; is thrown if a valid stub class could not be found for a remote object when it is exported.</source>
          <target state="translated">A &lt;code&gt;StubNotFoundException&lt;/code&gt; 、エクスポート時に、有効なスタブクラスがリモートオブジェクトで見つからなかった場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="86f0d0afd7a91d757b2bea22dfacefb257c32c3a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;StubNotFoundException&lt;/code&gt; is thrown if a valid stub class could not be found for a remote object when it is exported. A &lt;code&gt;StubNotFoundException&lt;/code&gt; may also be thrown when an activatable object is registered via the &lt;code&gt;java.rmi.activation.Activatable.register&lt;/code&gt; method.</source>
          <target state="translated">A &lt;code&gt;StubNotFoundException&lt;/code&gt; 、エクスポート時に、有効なスタブクラスがリモートオブジェクトで見つからなかった場合にスローされます。A &lt;code&gt;StubNotFoundException&lt;/code&gt; 起動可能なオブジェクトを介して登録されている場合にもスローされる &lt;code&gt;java.rmi.activation.Activatable.register&lt;/code&gt; の方法。</target>
        </trans-unit>
        <trans-unit id="f94dd11ea1cb9c0c1609ce1c124d27fea9c24183" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Subject&lt;/code&gt; may also own security-related attributes, which are referred to as credentials. Sensitive credentials that require special protection, such as private cryptographic keys, are stored within a private credential &lt;code&gt;Set&lt;/code&gt;. Credentials intended to be shared, such as public key certificates or Kerberos server tickets are stored within a public credential &lt;code&gt;Set&lt;/code&gt;. Different permissions are required to access and modify the different credential Sets.</source>
          <target state="translated">&lt;code&gt;Subject&lt;/code&gt; 資格証明書と呼ばれている独自のセキュリティ関連の属性、またしてもよいです。秘密の暗号化キーなどの特別な保護を必要とする機密の資格情報は、秘密の資格情報 &lt;code&gt;Set&lt;/code&gt; 格納されます。公開鍵証明書やKerberosサーバーチケットなどの共有を目的とした資格情報は、公開資格情報 &lt;code&gt;Set&lt;/code&gt; 内に格納されます。異なる資格情報セットにアクセスして変更するには、異なる権限が必要です。</target>
        </trans-unit>
        <trans-unit id="22269baf3728ed9f7d15e4ab750c278b8d5283a9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Subject&lt;/code&gt; represents a grouping of related information for a single entity, such as a person.</source>
          <target state="translated">&lt;code&gt;Subject&lt;/code&gt; 、人物などの単一のエンティティに関する情報のグループ化を表します。</target>
        </trans-unit>
        <trans-unit id="93c8ea0d491d86c0014097b3753fabb605464376" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Subject&lt;/code&gt; represents a grouping of related information for a single entity, such as a person. Such information includes the Subject's identities as well as its security-related attributes (passwords and cryptographic keys, for example).</source>
          <target state="translated">&lt;code&gt;Subject&lt;/code&gt; 、人物などの単一のエンティティに関する情報のグループ化を表します。このような情報には、サブジェクトのIDとそのセキュリティ関連の属性（パスワードや暗号化キーなど）が含まれます。</target>
        </trans-unit>
        <trans-unit id="b4b96f4b0a834a875a405d5e37faefcc3df3352d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SubjectDomainCombiner&lt;/code&gt; updates ProtectionDomains with Principals from the &lt;code&gt;Subject&lt;/code&gt; associated with this &lt;code&gt;SubjectDomainCombiner&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;SubjectDomainCombiner&lt;/code&gt; には、からのプリンシパルとのProtectionDomainsを更新 &lt;code&gt;Subject&lt;/code&gt; これに関連し &lt;code&gt;SubjectDomainCombiner&lt;/code&gt; に。</target>
        </trans-unit>
        <trans-unit id="228eae16184e9b6eedf87243ab41ab01541ff465" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SwitchPoint&lt;/code&gt; is an object which can publish state transitions to other threads.</source>
          <target state="translated">A &lt;code&gt;SwitchPoint&lt;/code&gt; 他のスレッドの状態遷移を公開することができるオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="be714f87cf38c5ca9056ac6e6285bffa2e095693" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SwitchPoint&lt;/code&gt; is an object which can publish state transitions to other threads. A switch point is initially in the &lt;em&gt;valid&lt;/em&gt; state, but may at any time be changed to the &lt;em&gt;invalid&lt;/em&gt; state. Invalidation cannot be reversed. A switch point can combine a &lt;em&gt;guarded pair&lt;/em&gt; of method handles into a &lt;em&gt;guarded delegator&lt;/em&gt;. The guarded delegator is a method handle which delegates to one of the old method handles. The state of the switch point determines which of the two gets the delegation.</source>
          <target state="translated">A &lt;code&gt;SwitchPoint&lt;/code&gt; 他のスレッドの状態遷移を公開することができるオブジェクトです。スイッチポイントは最初は&lt;em&gt;有効な&lt;/em&gt;状態&lt;em&gt;です&lt;/em&gt;が、いつでも&lt;em&gt;無効な&lt;/em&gt;状態に変更でき&lt;em&gt;ます&lt;/em&gt;。無効化を元に戻すことはできません。スイッチポイントは、&lt;em&gt;保護&lt;/em&gt;されたメソッドハンドルの&lt;em&gt;ペア&lt;/em&gt;を&lt;em&gt;保護&lt;/em&gt;された&lt;em&gt;デリゲーターに&lt;/em&gt;結合できます。保護されたデリゲーターは、古いメソッドハンドルの1つにデリゲートするメソッドハンドルです。スイッチポイントの状態により、2つのうちどちらが委任を取得するかが決まります。</target>
        </trans-unit>
        <trans-unit id="5e52e804a03b2b1c3cf01055a92fe4273f8ee447" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncMode&lt;/code&gt; object represents one of the ways in which a MIDI sequencer's notion of time can be synchronized with a master or slave device.</source>
          <target state="translated">&lt;code&gt;SyncMode&lt;/code&gt; オブジェクトは、時間のMIDIシーケンサーの概念は、マスターまたはスレーブデバイスと同期させることができる方法の1つを表します。</target>
        </trans-unit>
        <trans-unit id="57b963ed2297f7f44f5e670069b94a810a4c2b31" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncMode&lt;/code&gt; object represents one of the ways in which a MIDI sequencer's notion of time can be synchronized with a master or slave device. If the sequencer is being synchronized to a master, the sequencer revises its current time in response to messages from the master. If the sequencer has a slave, the sequencer similarly sends messages to control the slave's timing.</source>
          <target state="translated">&lt;code&gt;SyncMode&lt;/code&gt; オブジェクトは、時間のMIDIシーケンサーの概念は、マスターまたはスレーブデバイスと同期させることができる方法の1つを表します。シーケンサーがマスターに同期されている場合、シーケンサーはマスターからのメッセージに応じて現在の時刻を修正します。シーケンサーにスレーブがある場合、シーケンサーは同様にスレーブのタイミングを制御するメッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="62066fb10b853bfb564b915079e0d4cc678eb458" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncProvider&lt;/code&gt; implementation is identified by a unique ID, which is its fully qualified class name. This name must be registered with the &lt;code&gt;SyncFactory&lt;/code&gt; SPI, thus making the implementation available to all &lt;code&gt;RowSet&lt;/code&gt; implementations. The factory mechanism in the reference implementation uses this name to instantiate the implementation, which can then provide a &lt;code&gt;RowSet&lt;/code&gt; object with its reader (a &lt;code&gt;javax.sql.RowSetReader&lt;/code&gt; object) and its writer (a &lt;code&gt;javax.sql.RowSetWriter&lt;/code&gt; object).</source>
          <target state="translated">&lt;code&gt;SyncProvider&lt;/code&gt; 実装は、その完全修飾クラス名でユニークなIDによって識別されます。この名前は &lt;code&gt;SyncFactory&lt;/code&gt; SPIに登録する必要があるため、すべての &lt;code&gt;RowSet&lt;/code&gt; 実装で実装を使用できます。リファレンス実装のファクトリメカニズムは、この名前を使用して実装をインスタンス化し、 &lt;code&gt;RowSet&lt;/code&gt; オブジェクトにそのリーダー（ &lt;code&gt;javax.sql.RowSetReader&lt;/code&gt; オブジェクト）とそのライター（ &lt;code&gt;javax.sql.RowSetWriter&lt;/code&gt; オブジェクト）を提供できます。</target>
        </trans-unit>
        <trans-unit id="7311d23c53b03da1bd1a98c374e6ec93bb6f7661" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncProvider&lt;/code&gt; implementation may choose to implement a specific handler to handle a subset of query violations. However if an original query violation or a more general data source constraint violation is not handled by the &lt;code&gt;SyncProvider&lt;/code&gt; implementation, all &lt;code&gt;SyncProvider&lt;/code&gt; objects must throw a &lt;code&gt;SyncProviderException&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SyncProvider&lt;/code&gt; 実装は、クエリー違反のサブセットを処理するために、特定のハンドラを実装することもできます。ただし、元のクエリ違反またはより一般的なデータソース制約違反が &lt;code&gt;SyncProvider&lt;/code&gt; 実装によって処理されない場合、すべての &lt;code&gt;SyncProvider&lt;/code&gt; オブジェクトは &lt;code&gt;SyncProviderException&lt;/code&gt; をスローする必要があります。</target>
        </trans-unit>
        <trans-unit id="5516c8268a0b200569e0ac4f643cb1d4ad44ce7d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncProvider&lt;/code&gt; implementation provides a disconnected &lt;code&gt;RowSet&lt;/code&gt; object with the mechanisms for reading data into it and for writing data that has been modified in it back to the underlying data source. A</source>
          <target state="translated">&lt;code&gt;SyncProvider&lt;/code&gt; 実装は切断提供 &lt;code&gt;RowSet&lt;/code&gt; それにデータを読み取るための、基礎となるデータソースに戻すことで変更されたデータを書き込むためのメカニズムを持つオブジェクト。A</target>
        </trans-unit>
        <trans-unit id="ae72098b6f26bacd5f99b6b566a7b1a93651c31c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncProvider&lt;/code&gt; object provides a &lt;code&gt;CachedRowSet&lt;/code&gt; object with a reader (a &lt;code&gt;RowSetReader&lt;/code&gt; object) for reading data from a data source to populate itself with data. A reader can be implemented to read data from a &lt;code&gt;ResultSet&lt;/code&gt; object or from a file with a tabular format. A &lt;code&gt;SyncProvider&lt;/code&gt; object also provides a writer (a &lt;code&gt;RowSetWriter&lt;/code&gt; object) for synchronizing any modifications to the &lt;code&gt;CachedRowSet&lt;/code&gt; object's data made while it was disconnected with the data in the underlying data source.</source>
          <target state="translated">&lt;code&gt;SyncProvider&lt;/code&gt; オブジェクトは、提供 &lt;code&gt;CachedRowSet&lt;/code&gt; リーダー（持つオブジェクトを &lt;code&gt;RowSetReader&lt;/code&gt; のデータで自身を移入するために、データソースからデータを読み取るためのオブジェクト）。リーダーは、 &lt;code&gt;ResultSet&lt;/code&gt; オブジェクトまたは表形式のファイルからデータを読み取るように実装できます。 &lt;code&gt;SyncProvider&lt;/code&gt; オブジェクトは、ライター（提供 &lt;code&gt;RowSetWriter&lt;/code&gt; のに任意の変更を同期させるためのオブジェクト） &lt;code&gt;CachedRowSet&lt;/code&gt; それは、基礎となるデータソースのデータを用いて切断している間に行わオブジェクトのデータ。</target>
        </trans-unit>
        <trans-unit id="93658669de6bcc3dd7ce035782e1c13aab7a3cdb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncProviderException&lt;/code&gt; object may or may not contain a description of the condition causing the exception. The inherited method &lt;code&gt;getMessage&lt;/code&gt; may be called to retrieve the description if there is one.</source>
          <target state="translated">&lt;code&gt;SyncProviderException&lt;/code&gt; オブジェクトは、または例外を引き起こす条件の記述を含んでも含まなくてもよいです。継承されたメソッド &lt;code&gt;getMessage&lt;/code&gt; は、説明がある場合はそれを取得するために呼び出される場合があります。</target>
        </trans-unit>
        <trans-unit id="f773d096e13bb83540eb8a00687c0ec5277f9373" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncResolver&lt;/code&gt; object is a specialized &lt;code&gt;RowSet&lt;/code&gt; object that implements the &lt;code&gt;SyncResolver&lt;/code&gt; interface. It &lt;b&gt;may&lt;/b&gt; operate as either a connected &lt;code&gt;RowSet&lt;/code&gt; object (an implementation of the &lt;code&gt;JdbcRowSet&lt;/code&gt; interface) or a connected &lt;code&gt;RowSet&lt;/code&gt; object (an implementation of the &lt;code&gt;CachedRowSet&lt;/code&gt; interface or one of its subinterfaces). For information on the subinterfaces, see the &lt;a href=&quot;../package-summary&quot;&gt;&lt;code&gt;javax.sql.rowset&lt;/code&gt;&lt;/a&gt; package description. The reference implementation for &lt;code&gt;SyncResolver&lt;/code&gt; implements the &lt;code&gt;CachedRowSet&lt;/code&gt; interface, but other implementations may choose to implement the &lt;code&gt;JdbcRowSet&lt;/code&gt; interface to satisfy particular needs.</source>
          <target state="translated">A &lt;code&gt;SyncResolver&lt;/code&gt; オブジェクトは、特化され &lt;code&gt;RowSet&lt;/code&gt; オブジェクト実装する &lt;code&gt;SyncResolver&lt;/code&gt; インターフェース。これ&lt;b&gt;は&lt;/b&gt;、接続された &lt;code&gt;RowSet&lt;/code&gt; オブジェクト（ &lt;code&gt;JdbcRowSet&lt;/code&gt; インターフェイスの実装）または接続された &lt;code&gt;RowSet&lt;/code&gt; オブジェクト（ &lt;code&gt;CachedRowSet&lt;/code&gt; インターフェイスまたはそのサブインターフェイスの1つの実装）として動作します。サブインターフェースについては、&lt;a href=&quot;../package-summary&quot;&gt; &lt;code&gt;javax.sql.rowset&lt;/code&gt; &lt;/a&gt;パッケージの説明を参照してください。 &lt;code&gt;SyncResolver&lt;/code&gt; のリファレンス実装は &lt;code&gt;CachedRowSet&lt;/code&gt; インターフェイスを実装しますが、他の実装は &lt;code&gt;JdbcRowSet&lt;/code&gt; の実装を選択する場合があります 特定のニーズを満たすためのインターフェース。</target>
        </trans-unit>
        <trans-unit id="831f70f37f0af58442c7772e629646eff1da65e4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SyncResolver&lt;/code&gt; object, which is a special kind of &lt;code&gt;CachedRowSet&lt;/code&gt; object or a &lt;code&gt;JdbcRowSet&lt;/code&gt; object that has implemented the &lt;code&gt;SyncResolver&lt;/code&gt; interface, examines the conflicts row by row. It is a duplicate of the &lt;code&gt;RowSet&lt;/code&gt; object being synchronized except that it contains only the data from the data source this is causing a conflict. All of the other column values are set to &lt;code&gt;null&lt;/code&gt;. To navigate from one conflict value to another, a &lt;code&gt;SyncResolver&lt;/code&gt; object provides the methods &lt;code&gt;nextConflict&lt;/code&gt; and &lt;code&gt;previousConflict&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SyncResolver&lt;/code&gt; 特別な種類であるオブジェクト &lt;code&gt;CachedRowSet&lt;/code&gt; オブジェクトまたは &lt;code&gt;JdbcRowSet&lt;/code&gt; を実装しているオブジェクト &lt;code&gt;SyncResolver&lt;/code&gt; インタフェースは、行によって競合行を調べます。競合の原因となっているデータソースからのデータのみが含まれていることを除いて、同期されている &lt;code&gt;RowSet&lt;/code&gt; オブジェクトの複製です。他のすべての列値は &lt;code&gt;null&lt;/code&gt; に設定されます。ある競合値から別の競合値に移動するために、 &lt;code&gt;SyncResolver&lt;/code&gt; オブジェクトはメソッド &lt;code&gt;nextConflict&lt;/code&gt; および &lt;code&gt;previousConflict&lt;/code&gt; を提供します。</target>
        </trans-unit>
        <trans-unit id="20bd756a8d8c45d903c01414a26ff940cfa94c5b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Synthesizer&lt;/code&gt; generates sound.</source>
          <target state="translated">A &lt;code&gt;Synthesizer&lt;/code&gt; 音を発生します。</target>
        </trans-unit>
        <trans-unit id="6d0451cd1f434824db4bc18015bdc2300ec5a785" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Synthesizer&lt;/code&gt; generates sound. This usually happens when one of the &lt;code&gt;Synthesizer&lt;/code&gt;'s &lt;a href=&quot;midichannel&quot;&gt;&lt;code&gt;MidiChannel&lt;/code&gt;&lt;/a&gt; objects receives a &lt;a href=&quot;midichannel#noteOn(int,int)&quot;&gt;&lt;code&gt;noteOn&lt;/code&gt;&lt;/a&gt; message, either directly or via the &lt;code&gt;Synthesizer&lt;/code&gt; object. Many &lt;code&gt;Synthesizer&lt;/code&gt;s support &lt;code&gt;Receivers&lt;/code&gt;, through which MIDI events can be delivered to the &lt;code&gt;Synthesizer&lt;/code&gt;. In such cases, the &lt;code&gt;Synthesizer&lt;/code&gt; typically responds by sending a corresponding message to the appropriate &lt;code&gt;MidiChannel&lt;/code&gt;, or by processing the event itself if the event isn't one of the MIDI channel messages.</source>
          <target state="translated">A &lt;code&gt;Synthesizer&lt;/code&gt; 音を発生します。これは通常、 &lt;code&gt;Synthesizer&lt;/code&gt; の&lt;a href=&quot;midichannel&quot;&gt; &lt;code&gt;MidiChannel&lt;/code&gt; &lt;/a&gt;オブジェクトの1つが、直接または &lt;code&gt;Synthesizer&lt;/code&gt; オブジェクトを介して&lt;a href=&quot;midichannel#noteOn(int,int)&quot;&gt; &lt;code&gt;noteOn&lt;/code&gt; &lt;/a&gt;メッセージを受信したときに発生します。多くの &lt;code&gt;Synthesizer&lt;/code&gt; &lt;code&gt;Receivers&lt;/code&gt; サポートしており、レシーバーを介してMIDIイベントを &lt;code&gt;Synthesizer&lt;/code&gt; 配信できます。このような場合、 &lt;code&gt;Synthesizer&lt;/code&gt; は通常、対応するメッセージを適切な &lt;code&gt;MidiChannel&lt;/code&gt; に送信するか、イベントがMIDIチャンネルメッセージの1つでない場合は、イベント自体を処理することによって応答します。</target>
        </trans-unit>
        <trans-unit id="a603b4809d42d4f273b7e8030849821e379b8887" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Synthesizer&lt;/code&gt; generates sound. This usually happens when one of the &lt;code&gt;Synthesizer&lt;/code&gt;'s &lt;a href=&quot;midichannel&quot;&gt;&lt;code&gt;MidiChannel&lt;/code&gt;&lt;/a&gt; objects receives a &lt;a href=&quot;midichannel#noteOn-int-int-&quot;&gt;&lt;code&gt;noteOn&lt;/code&gt;&lt;/a&gt; message, either directly or via the &lt;code&gt;Synthesizer&lt;/code&gt; object. Many &lt;code&gt;Synthesizer&lt;/code&gt;s support &lt;code&gt;Receivers&lt;/code&gt;, through which MIDI events can be delivered to the &lt;code&gt;Synthesizer&lt;/code&gt;. In such cases, the &lt;code&gt;Synthesizer&lt;/code&gt; typically responds by sending a corresponding message to the appropriate &lt;code&gt;MidiChannel&lt;/code&gt;, or by processing the event itself if the event isn't one of the MIDI channel messages.</source>
          <target state="translated">A &lt;code&gt;Synthesizer&lt;/code&gt; 音を発生します。これは通常、 &lt;code&gt;Synthesizer&lt;/code&gt; の&lt;a href=&quot;midichannel&quot;&gt; &lt;code&gt;MidiChannel&lt;/code&gt; &lt;/a&gt;オブジェクトの1つが直接または &lt;code&gt;Synthesizer&lt;/code&gt; オブジェクトを介して&lt;a href=&quot;midichannel#noteOn-int-int-&quot;&gt; &lt;code&gt;noteOn&lt;/code&gt; &lt;/a&gt;メッセージを受信したときに発生します。多くの &lt;code&gt;Synthesizer&lt;/code&gt; は &lt;code&gt;Receivers&lt;/code&gt; サポートしており、レシーバーを介してMIDIイベントを &lt;code&gt;Synthesizer&lt;/code&gt; に配信できます。このような場合、 &lt;code&gt;Synthesizer&lt;/code&gt; は通常、対応するメッセージを適切な &lt;code&gt;MidiChannel&lt;/code&gt; に送信するか、イベントがMIDIチャネルメッセージの1つでない場合はイベント自体を処理することによって応答します。</target>
        </trans-unit>
        <trans-unit id="f4ee297ddf421454f00e52bd94c3be8de88eacbd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SysexMessage&lt;/code&gt; object represents a MIDI system exclusive message.</source>
          <target state="translated">A &lt;code&gt;SysexMessage&lt;/code&gt; のオブジェクトは、MIDIシステムエクスクルーシブメッセージを表しています。</target>
        </trans-unit>
        <trans-unit id="b424007adfcafcda69dcf202fdc35d2c353d59d8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TIFFDirectory&lt;/code&gt; is aware of the tag numbers in the group of &lt;a href=&quot;tifftagset&quot;&gt;&lt;code&gt;TIFFTagSet&lt;/code&gt;&lt;/a&gt;s associated with it. When a &lt;code&gt;TIFFDirectory&lt;/code&gt; is created from a native image metadata object, these tag sets are derived from the &lt;code&gt;tagSets&lt;/code&gt; attribute of the &lt;code&gt;TIFFIFD&lt;/code&gt; node.</source>
          <target state="translated">A &lt;code&gt;TIFFDirectory&lt;/code&gt; は、グループ内のタグ番号を認識している&lt;a href=&quot;tifftagset&quot;&gt; &lt;code&gt;TIFFTagSet&lt;/code&gt; &lt;/a&gt;それに関連付けられたS。場合 &lt;code&gt;TIFFDirectory&lt;/code&gt; がネイティブイメージメタデータオブジェクトから作成され、これらのタグのセットが由来する &lt;code&gt;tagSets&lt;/code&gt; の属性 &lt;code&gt;TIFFIFD&lt;/code&gt; のノード。</target>
        </trans-unit>
        <trans-unit id="875ad0a723fa0c853b7894c344e24746b670155a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TIFFDirectory&lt;/code&gt; might also have a parent &lt;a href=&quot;tifftag&quot;&gt;&lt;code&gt;TIFFTag&lt;/code&gt;&lt;/a&gt;. This will occur if the directory represents an IFD other than the root IFD of the image. The parent tag is the tag of the IFD Entry which is a pointer to the IFD represented by this &lt;code&gt;TIFFDirectory&lt;/code&gt;. The &lt;a href=&quot;tifftag#isIFDPointer()&quot;&gt;&lt;code&gt;TIFFTag.isIFDPointer()&lt;/code&gt;&lt;/a&gt; method of this parent &lt;code&gt;TIFFTag&lt;/code&gt; must return &lt;code&gt;true&lt;/code&gt;. When a &lt;code&gt;TIFFDirectory&lt;/code&gt; is created from a native image metadata object, the parent tag set is set from the &lt;code&gt;parentTagName&lt;/code&gt; attribute of the corresponding &lt;code&gt;TIFFIFD&lt;/code&gt; node. Note that a &lt;code&gt;TIFFDirectory&lt;/code&gt; instance which has a non-&lt;code&gt;null&lt;/code&gt; parent tag will be contained in the data field of a &lt;code&gt;TIFFField&lt;/code&gt; instance which has a tag field equal to the contained directory's parent tag.</source>
          <target state="translated">A &lt;code&gt;TIFFDirectory&lt;/code&gt; は、親ている場合があります&lt;a href=&quot;tifftag&quot;&gt; &lt;code&gt;TIFFTag&lt;/code&gt; を&lt;/a&gt;。これは、ディレクトリがイメージのルートIFD以外のIFDを表す場合に発生します。親タグは、この &lt;code&gt;TIFFDirectory&lt;/code&gt; によって表されるIFDへのポインタであるIFDエントリのタグです。この親 &lt;code&gt;TIFFTag&lt;/code&gt; の&lt;a href=&quot;tifftag#isIFDPointer()&quot;&gt; &lt;code&gt;TIFFTag.isIFDPointer()&lt;/code&gt; &lt;/a&gt;メソッドは &lt;code&gt;true&lt;/code&gt; を返す必要があります。場合 &lt;code&gt;TIFFDirectory&lt;/code&gt; がネイティブイメージメタデータオブジェクトから作成され、親タグのセットは、以下から設定されている &lt;code&gt;parentTagName&lt;/code&gt; の対応する属性 &lt;code&gt;TIFFIFD&lt;/code&gt; のノード。 &lt;code&gt;null&lt;/code&gt; &lt;code&gt;TIFFDirectory&lt;/code&gt; インスタンスがあることに注意してください親タグは、含まれているディレクトリの親タグと等しいタグフィールドを持つ &lt;code&gt;TIFFField&lt;/code&gt; インスタンスのデータフィールドに含まれます。</target>
        </trans-unit>
        <trans-unit id="b9ae6f29cddcbce47dd7709903ac63f6215ae140" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TIFFDirectory&lt;/code&gt; populated from the contents of the supplied metadata object.</source>
          <target state="translated">&lt;code&gt;TIFFDirectory&lt;/code&gt; 供給されたメタデータオブジェクトの内容から移入。</target>
        </trans-unit>
        <trans-unit id="7d368c530bab22fa4adc6ff07c537517c0d110c3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TIFFField&lt;/code&gt; with the requested tag number of &lt;code&gt;null&lt;/code&gt; if no such field is present.</source>
          <target state="translated">そのようなフィールドが存在しない場合、要求されたタグ番号が &lt;code&gt;null&lt;/code&gt; の &lt;code&gt;TIFFField&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="18150cd8e4b4c4f831b53d6d503460e64ffc67ff" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TIFF_UNDEFINED&lt;/code&gt; value is treated as though it were a &lt;code&gt;TIFF_BYTE&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TIFF_UNDEFINED&lt;/code&gt; のそれがあったかのように値が処理され &lt;code&gt;TIFF_BYTE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="22ce405197c16d33cb4946bf9dd4035759d81e7a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TOOLKIT_MODAL&lt;/code&gt; dialog blocks all top-level windows run from the same toolkit except those from its own child hierarchy.</source>
          <target state="translated">A &lt;code&gt;TOOLKIT_MODAL&lt;/code&gt; ダイアログブロックは、すべてのトップレベルウィンドウは、自身の子階層からのものを除き、同じツールキットから実行します。</target>
        </trans-unit>
        <trans-unit id="dae47f9fbdf14ab4d9052bb6ec8de9a9fed7d448" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TOOLKIT_MODAL&lt;/code&gt; dialog blocks all top-level windows run from the same toolkit except those from its own child hierarchy. If there are several applets launched in a browser, all of them run with the same toolkit; thus, a toolkit-modal dialog displayed by an applet may affect other applets and all windows of the browser instance which embeds the Java runtime environment for this toolkit. Special &lt;code&gt;AWTPermission&lt;/code&gt; &quot;toolkitModality&quot; must be granted to use toolkit-modal dialogs. If a &lt;code&gt;TOOLKIT_MODAL&lt;/code&gt; dialog is being created and this permission is not granted, a &lt;code&gt;SecurityException&lt;/code&gt; will be thrown, and no dialog will be created. If a modality type is being changed to &lt;code&gt;TOOLKIT_MODAL&lt;/code&gt; and this permission is not granted, a &lt;code&gt;SecurityException&lt;/code&gt; will be thrown, and the modality type will be left unchanged.</source>
          <target state="translated">A &lt;code&gt;TOOLKIT_MODAL&lt;/code&gt; ダイアログブロックは、すべてのトップレベルウィンドウは、自身の子階層からのものを除き、同じツールキットから実行します。ブラウザで複数のアプレットが起動されている場合、それらはすべて同じツールキットで実行されます。したがって、アプレットによって表示されるツールキットモーダルダイアログは、他のアプレットや、このツールキットのJavaランタイム環境を組み込んだブラウザインスタンスのすべてのウィンドウに影響を与える可能性があります。ツールキットモーダルダイアログを使用するには、特別な &lt;code&gt;AWTPermission&lt;/code&gt; 「toolkitModality」を付与する必要があります。場合 &lt;code&gt;TOOLKIT_MODAL&lt;/code&gt; ダイアログが作成されており、この権限が付与されていない、 &lt;code&gt;SecurityException&lt;/code&gt; がスローされます、そして何のダイアログは作成されません。モダリティタイプが &lt;code&gt;TOOLKIT_MODAL&lt;/code&gt; に変更されていて、この権限が付与されていない場合、 &lt;code&gt;SecurityException&lt;/code&gt; がスローされ、モダリティタイプは変更されません。</target>
        </trans-unit>
        <trans-unit id="1d5fc4695449c52b91505450f62d8103e6563969" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TableColumn&lt;/code&gt; represents all the attributes of a column in a &lt;code&gt;JTable&lt;/code&gt;, such as width, resizability, minimum and maximum width.</source>
          <target state="translated">A &lt;code&gt;TableColumn&lt;/code&gt; のは、列のすべての属性を表し &lt;code&gt;JTable&lt;/code&gt; のような幅、サイズ変更できる、最小および最大幅とし、。</target>
        </trans-unit>
        <trans-unit id="53c87258f33aeaa9bb8627a37e666b4dfc91a5e8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TableColumn&lt;/code&gt; represents all the attributes of a column in a &lt;code&gt;JTable&lt;/code&gt;, such as width, resizability, minimum and maximum width. In addition, the &lt;code&gt;TableColumn&lt;/code&gt; provides slots for a renderer and an editor that can be used to display and edit the values in this column.</source>
          <target state="translated">A &lt;code&gt;TableColumn&lt;/code&gt; のは、列のすべての属性を表し &lt;code&gt;JTable&lt;/code&gt; のような幅、サイズ変更できる、最小および最大幅とし、。さらに、 &lt;code&gt;TableColumn&lt;/code&gt; は、この列の値を表示および編集するために使用できるレンダラーとエディター用のスロットを提供します。</target>
        </trans-unit>
        <trans-unit id="e2859b19ec78253d2ceb32f653234edc9de0e75e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TabularType&lt;/code&gt; is assignable from another &lt;code&gt;
 TabularType&lt;/code&gt; if they have the same &lt;a href=&quot;opentype#getTypeName()&quot;&gt;typeName&lt;/a&gt; and &lt;a href=&quot;tabulartype#getIndexNames()&quot;&gt;index name list&lt;/a&gt;, and the &lt;a href=&quot;tabulartype#getRowType()&quot;&gt;row type&lt;/a&gt; of the first is assignable from the row type of the second.</source>
          <target state="translated">A &lt;code&gt;TabularType&lt;/code&gt; では、別の割り当て可能である &lt;code&gt; TabularType&lt;/code&gt; でそれらが同じ持っている場合&lt;a href=&quot;opentype#getTypeName()&quot;&gt;型名&lt;/a&gt;と&lt;a href=&quot;tabulartype#getIndexNames()&quot;&gt;インデックス名のリストを&lt;/a&gt;、そして&lt;a href=&quot;tabulartype#getRowType()&quot;&gt;行タイプ&lt;/a&gt;第一の第二の行タイプから割り当て可能です。</target>
        </trans-unit>
        <trans-unit id="00b7508b878aac3376b48986794450063c3d2c33" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TabularType&lt;/code&gt; is assignable from another &lt;code&gt;TabularType&lt;/code&gt; if they have the same &lt;a href=&quot;opentype#getTypeName--&quot;&gt;typeName&lt;/a&gt; and &lt;a href=&quot;tabulartype#getIndexNames--&quot;&gt;index name list&lt;/a&gt;, and the &lt;a href=&quot;tabulartype#getRowType--&quot;&gt;row type&lt;/a&gt; of the first is assignable from the row type of the second.</source>
          <target state="translated">A &lt;code&gt;TabularType&lt;/code&gt; では、別の割り当て可能である &lt;code&gt;TabularType&lt;/code&gt; でそれらが同じ持っている場合&lt;a href=&quot;opentype#getTypeName--&quot;&gt;型名&lt;/a&gt;と&lt;a href=&quot;tabulartype#getIndexNames--&quot;&gt;インデックス名のリストを&lt;/a&gt;、そして&lt;a href=&quot;tabulartype#getRowType--&quot;&gt;行タイプ&lt;/a&gt;第一の第二の行タイプから割り当て可能です。</target>
        </trans-unit>
        <trans-unit id="bcb12be556933750047f1bf21aca57c7527723b3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TemporalAccessor&lt;/code&gt; represents some form of date and time information. This factory converts the arbitrary temporal object to an instance of &lt;code&gt;ZoneId&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;TemporalAccessor&lt;/code&gt; は、日付と時刻の情報を何らかの形で表しています。このファクトリは、任意の一時オブジェクトを &lt;code&gt;ZoneId&lt;/code&gt; のインスタンスに変換します。</target>
        </trans-unit>
        <trans-unit id="6686144140c8aaa5fced7bb05302a39e575ea1b7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TemporalAccessor&lt;/code&gt; represents some form of date and time information. This factory converts the arbitrary temporal object to an instance of &lt;code&gt;ZoneOffset&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;TemporalAccessor&lt;/code&gt; は、日付と時刻の情報を何らかの形で表しています。このファクトリは、任意の一時オブジェクトを &lt;code&gt;ZoneOffset&lt;/code&gt; のインスタンスに変換します。</target>
        </trans-unit>
        <trans-unit id="357c0e971e0c7765b80d26848f102f0a3d8cd9d9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TextArea&lt;/code&gt; object is a multi-line region that displays text.</source>
          <target state="translated">&lt;code&gt;TextArea&lt;/code&gt; オブジェクトは、その表示テキスト複数行の領域です。</target>
        </trans-unit>
        <trans-unit id="318888287335146bdbda48f609997d911e60975b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TextArea&lt;/code&gt; object is a multi-line region that displays text. It can be set to allow editing or to be read-only.</source>
          <target state="translated">&lt;code&gt;TextArea&lt;/code&gt; オブジェクトは、その表示テキスト複数行の領域です。編集を許可するか、読み取り専用にするように設定できます。</target>
        </trans-unit>
        <trans-unit id="c77b86a697f7cee769c19456b5b3de357feac93b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TextField&lt;/code&gt; object is a text component that allows for the editing of a single line of text.</source>
          <target state="translated">&lt;code&gt;TextField&lt;/code&gt; オブジェクトは、1行のテキストの編集を可能にするテキストコンポーネントです。</target>
        </trans-unit>
        <trans-unit id="6a5d1aafeb71fab06ca3a506802e9ed098926fbf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TextLayout&lt;/code&gt; object can be rendered using its &lt;code&gt;draw&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;TextLayout&lt;/code&gt; オブジェクトは、その使用してレンダリングすることができ &lt;code&gt;draw&lt;/code&gt; 方法を。</target>
        </trans-unit>
        <trans-unit id="f4debc510b5d9cbf0f9f7bb8fb97f710bb844a5e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TextListener&lt;/code&gt; object is registered via &lt;code&gt;addTextListener&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;TextListener&lt;/code&gt; オブジェクトを介して登録され &lt;code&gt;addTextListener&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="db1af988d6eb91e12d54f00858b58528022db90e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TextMeasurer&lt;/code&gt; object is constructed with an &lt;a href=&quot;../../../../java.base/java/text/attributedcharacteriterator&quot;&gt;&lt;code&gt;AttributedCharacterIterator&lt;/code&gt;&lt;/a&gt; representing a single paragraph of text. The value returned by the &lt;a href=&quot;../../../../java.base/java/text/characteriterator#getBeginIndex()&quot;&gt;&lt;code&gt;getBeginIndex&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; defines the absolute index of the first character. The value returned by the &lt;a href=&quot;../../../../java.base/java/text/characteriterator#getEndIndex()&quot;&gt;&lt;code&gt;getEndIndex&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; defines the index past the last character. These values define the range of indexes to use in calls to the &lt;code&gt;TextMeasurer&lt;/code&gt;. For example, calls to get the advance of a range of text or the line break of a range of text must use indexes between the beginning and end index values. Calls to &lt;a href=&quot;#insertChar(java.text.AttributedCharacterIterator,int)&quot;&gt;&lt;code&gt;insertChar&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#deleteChar(java.text.AttributedCharacterIterator,int)&quot;&gt;&lt;code&gt;deleteChar&lt;/code&gt;&lt;/a&gt; reset the &lt;code&gt;TextMeasurer&lt;/code&gt; to use the beginning index and end index of the &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; passed in those calls.</source>
          <target state="translated">&lt;code&gt;TextMeasurer&lt;/code&gt; のオブジェクトを用いて構築され&lt;a href=&quot;../../../../java.base/java/text/attributedcharacteriterator&quot;&gt; &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; &lt;/a&gt;テキストの単一の段落を表します。 &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; の&lt;a href=&quot;../../../../java.base/java/text/characteriterator#getBeginIndex()&quot;&gt; &lt;code&gt;getBeginIndex&lt;/code&gt; &lt;/a&gt;メソッドによって返される値は、最初の文字の絶対インデックスを定義します。 &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; の&lt;a href=&quot;../../../../java.base/java/text/characteriterator#getEndIndex()&quot;&gt; &lt;code&gt;getEndIndex&lt;/code&gt; &lt;/a&gt;メソッドによって返される値は、最後の文字を超えたインデックスを定義します。これらの値は、 &lt;code&gt;TextMeasurer&lt;/code&gt; の呼び出しで使用するインデックスの範囲を定義します。たとえば、テキストの範囲の前進またはテキストの範囲の改行を取得するための呼び出しでは、開始インデックス値と終了インデックス値の間のインデックスを使用する必要があります。&lt;a href=&quot;#insertChar(java.text.AttributedCharacterIterator,int)&quot;&gt; &lt;code&gt;insertChar&lt;/code&gt; &lt;/a&gt;との呼び出し&lt;a href=&quot;#deleteChar(java.text.AttributedCharacterIterator,int)&quot;&gt; &lt;code&gt;deleteChar&lt;/code&gt; は&lt;/a&gt;リセット &lt;code&gt;TextMeasurer&lt;/code&gt; の開始インデックスと終了インデックスを使用する &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; のこれらの呼び出しに渡されます。</target>
        </trans-unit>
        <trans-unit id="432dd0288e2dea2a07b238ecf158d33313a9be1e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; will automatically adjust the pool size (see &lt;a href=&quot;#getPoolSize()&quot;&gt;&lt;code&gt;getPoolSize()&lt;/code&gt;&lt;/a&gt;) according to the bounds set by corePoolSize (see &lt;a href=&quot;#getCorePoolSize()&quot;&gt;&lt;code&gt;getCorePoolSize()&lt;/code&gt;&lt;/a&gt;) and maximumPoolSize (see &lt;a href=&quot;#getMaximumPoolSize()&quot;&gt;&lt;code&gt;getMaximumPoolSize()&lt;/code&gt;&lt;/a&gt;). When a new task is submitted in method &lt;a href=&quot;#execute(java.lang.Runnable)&quot;&gt;&lt;code&gt;execute(Runnable)&lt;/code&gt;&lt;/a&gt;, if fewer than corePoolSize threads are running, a new thread is created to handle the request, even if other worker threads are idle. Else if fewer than maximumPoolSize threads are running, a new thread will be created to handle the request only if the queue is full. By setting corePoolSize and maximumPoolSize the same, you create a fixed-size thread pool. By setting maximumPoolSize to an essentially unbounded value such as &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;, you allow the pool to accommodate an arbitrary number of concurrent tasks. Most typically, core and maximum pool sizes are set only upon construction, but they may also be changed dynamically using &lt;a href=&quot;#setCorePoolSize(int)&quot;&gt;&lt;code&gt;setCorePoolSize(int)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#setMaximumPoolSize(int)&quot;&gt;&lt;code&gt;setMaximumPoolSize(int)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; は自動的にプールサイズを調整する（参照&lt;a href=&quot;#getPoolSize()&quot;&gt; &lt;code&gt;getPoolSize()&lt;/code&gt; &lt;/a&gt;）corePoolSizeにより設定された限界に従う（参照&lt;a href=&quot;#getCorePoolSize()&quot;&gt; &lt;code&gt;getCorePoolSize()&lt;/code&gt; &lt;/a&gt;）とmaximumPoolSize（参照&lt;a href=&quot;#getMaximumPoolSize()&quot;&gt; &lt;code&gt;getMaximumPoolSize()&lt;/code&gt; &lt;/a&gt;）。メソッド&lt;a href=&quot;#execute(java.lang.Runnable)&quot;&gt; &lt;code&gt;execute(Runnable)&lt;/code&gt; &lt;/a&gt;で新しいタスクが送信されたときに、実行中のスレッドがcorePoolSize未満の場合、他のワーカースレッドがアイドル状態であっても、要求を処理するために新しいスレッドが作成されます。それ以外の場合、実行されているスレッドがmaximumPoolSize未満の場合、キューがいっぱいの場合にのみ要求を処理するために新しいスレッドが作成されます。 corePoolSizeとmaximumPoolSizeを同じに設定することで、固定サイズのスレッドプールを作成します。 maximumPoolSizeを &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; などの本質的に無制限の値に設定する、プールが任意の数の同時タスクに対応できるようにします。最も一般的には、コアと最大プールサイズは構築時にのみ設定されますが、&lt;a href=&quot;#setCorePoolSize(int)&quot;&gt; &lt;code&gt;setCorePoolSize(int)&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#setMaximumPoolSize(int)&quot;&gt; &lt;code&gt;setMaximumPoolSize(int)&lt;/code&gt; &lt;/a&gt;を使用して動的に変更することもできます。</target>
        </trans-unit>
        <trans-unit id="c5b7cf009138d5d0f2fff7b982816adbb7fce9da" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; will automatically adjust the pool size (see &lt;a href=&quot;threadpoolexecutor#getPoolSize--&quot;&gt;&lt;code&gt;getPoolSize()&lt;/code&gt;&lt;/a&gt;) according to the bounds set by corePoolSize (see &lt;a href=&quot;threadpoolexecutor#getCorePoolSize--&quot;&gt;&lt;code&gt;getCorePoolSize()&lt;/code&gt;&lt;/a&gt;) and maximumPoolSize (see &lt;a href=&quot;threadpoolexecutor#getMaximumPoolSize--&quot;&gt;&lt;code&gt;getMaximumPoolSize()&lt;/code&gt;&lt;/a&gt;). When a new task is submitted in method &lt;a href=&quot;threadpoolexecutor#execute-java.lang.Runnable-&quot;&gt;&lt;code&gt;execute(Runnable)&lt;/code&gt;&lt;/a&gt;, and fewer than corePoolSize threads are running, a new thread is created to handle the request, even if other worker threads are idle. If there are more than corePoolSize but less than maximumPoolSize threads running, a new thread will be created only if the queue is full. By setting corePoolSize and maximumPoolSize the same, you create a fixed-size thread pool. By setting maximumPoolSize to an essentially unbounded value such as &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;, you allow the pool to accommodate an arbitrary number of concurrent tasks. Most typically, core and maximum pool sizes are set only upon construction, but they may also be changed dynamically using &lt;a href=&quot;threadpoolexecutor#setCorePoolSize-int-&quot;&gt;&lt;code&gt;setCorePoolSize(int)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;threadpoolexecutor#setMaximumPoolSize-int-&quot;&gt;&lt;code&gt;setMaximumPoolSize(int)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; は自動的にプールサイズを調整する（参照&lt;a href=&quot;threadpoolexecutor#getPoolSize--&quot;&gt; &lt;code&gt;getPoolSize()&lt;/code&gt; &lt;/a&gt;）corePoolSizeにより設定された限界に従う（参照&lt;a href=&quot;threadpoolexecutor#getCorePoolSize--&quot;&gt; &lt;code&gt;getCorePoolSize()&lt;/code&gt; &lt;/a&gt;）とmaximumPoolSize（参照&lt;a href=&quot;threadpoolexecutor#getMaximumPoolSize--&quot;&gt; &lt;code&gt;getMaximumPoolSize()&lt;/code&gt; &lt;/a&gt;）。メソッド&lt;a href=&quot;threadpoolexecutor#execute-java.lang.Runnable-&quot;&gt; &lt;code&gt;execute(Runnable)&lt;/code&gt; &lt;/a&gt;で新しいタスクが送信され、実行中のスレッドがcorePoolSize未満の場合、他のワーカースレッドがアイドル状態であっても、リクエストを処理するために新しいスレッドが作成されます。 corePoolSizeを超えてmaximumPoolSize未満のスレッドが実行されている場合、キューがいっぱいの場合にのみ、新しいスレッドが作成されます。 corePoolSizeとmaximumPoolSizeを同じに設定することで、固定サイズのスレッドプールを作成します。 maximumPoolSizeを次のような本質的に無制限の値に設定する &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; では、プールが任意の数の同時タスクに対応できるようにします。最も一般的には、コアおよび最大プールサイズは構築時にのみ設定されますが、&lt;a href=&quot;threadpoolexecutor#setCorePoolSize-int-&quot;&gt; &lt;code&gt;setCorePoolSize(int)&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;threadpoolexecutor#setMaximumPoolSize-int-&quot;&gt; &lt;code&gt;setMaximumPoolSize(int)&lt;/code&gt; &lt;/a&gt;を使用して動的に変更することもできます。</target>
        </trans-unit>
        <trans-unit id="eca1f8984467324213270372e3af64cb7babf441" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TimeUnit&lt;/code&gt; is mainly used to inform time-based methods how a given timing parameter should be interpreted. For example, the following code will timeout in 50 milliseconds if the &lt;a href=&quot;locks/lock&quot;&gt;&lt;code&gt;lock&lt;/code&gt;&lt;/a&gt; is not available:</source>
          <target state="translated">A &lt;code&gt;TimeUnit&lt;/code&gt; では、主に所定のタイミングパラメータをどのように解釈するかを時間ベースの方法を知らせるために使用されます。たとえば、&lt;a href=&quot;locks/lock&quot;&gt; &lt;code&gt;lock&lt;/code&gt; &lt;/a&gt;が使用できない場合、次のコードは50ミリ秒でタイムアウトします。</target>
        </trans-unit>
        <trans-unit id="f23aa9e76a05136ff2469933ea4a3b3c24e042ea" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TimeUnit&lt;/code&gt; represents time durations at a given unit of granularity and provides utility methods to convert across units, and to perform timing and delay operations in these units.</source>
          <target state="translated">A &lt;code&gt;TimeUnit&lt;/code&gt; では、粒状の所定の単位で時間を表し、単位を変換するユーティリティメソッドを提供し、これらの単位でタイミングおよび遅延操作を実行します。</target>
        </trans-unit>
        <trans-unit id="cbde8d639f9de2af0b3456b7b9535eba31789a55" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TimeUnit&lt;/code&gt; represents time durations at a given unit of granularity and provides utility methods to convert across units, and to perform timing and delay operations in these units. A &lt;code&gt;TimeUnit&lt;/code&gt; does not maintain time information, but only helps organize and use time representations that may be maintained separately across various contexts. A nanosecond is defined as one thousandth of a microsecond, a microsecond as one thousandth of a millisecond, a millisecond as one thousandth of a second, a minute as sixty seconds, an hour as sixty minutes, and a day as twenty four hours.</source>
          <target state="translated">A &lt;code&gt;TimeUnit&lt;/code&gt; では、粒状の所定の単位で時間を表し、単位を変換するユーティリティメソッドを提供し、これらの単位でタイミングおよび遅延操作を実行します。 A &lt;code&gt;TimeUnit&lt;/code&gt; では、時間情報を維持するが、唯一のさまざまなコンテキスト間で別々に維持することができる時間表現を整理し、使用できますしません。ナノ秒は1000分の1マイクロ秒、マイクロ秒は1000分の1ミリ秒、1ミリ秒は1000分の1秒、1分は60秒、1時間は60分、1日は24時間と定義されます。</target>
        </trans-unit>
        <trans-unit id="401c628905e0a284f93c6e1b743bb8e851f83229" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Track&lt;/code&gt; occupies a middle level in the hierarchy of data played by a &lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;: sequencers play sequences, which contain tracks, which contain MIDI events. A sequencer may provide controls that mute or solo individual tracks.</source>
          <target state="translated">A &lt;code&gt;Track&lt;/code&gt; によって演奏されるデータの階層で中間レベルを占め&lt;a href=&quot;sequencer&quot;&gt; &lt;code&gt;Sequencer&lt;/code&gt; &lt;/a&gt;：シーケンサは、MIDIイベントが含まれているトラックを含む配列を、再生します。シーケンサーは、個々のトラックをミュートまたはソロにするコントロールを提供する場合があります。</target>
        </trans-unit>
        <trans-unit id="cb72ddaf5fa462b8e5b5a29713baefb0b3439f3a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Track&lt;/code&gt; occupies a middle level in the hierarchy of data played by a &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;: sequencers play sequences, which contain tracks, which contain MIDI events. A sequencer may provide controls that mute or solo individual tracks.</source>
          <target state="translated">A &lt;code&gt;Track&lt;/code&gt; によって演奏されるデータの階層で中間レベルを占め &lt;code&gt;&lt;a href=&quot;sequencer&quot;&gt;&lt;code&gt;Sequencer&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; ：シーケンサは、MIDIイベントが含まれているトラックを含む配列を、再生します。シーケンサーは、個々のトラックをミュートまたはソロにするコントロールを提供します。</target>
        </trans-unit>
        <trans-unit id="7dca9c7ff91e154dc11c0176a814ef0d3b792503" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Transferable&lt;/code&gt; which implements the capability required to transfer a &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; を転送するために必要な機能を実装する &lt;code&gt;Transferable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="22f9024613781cfd1bae219663a121319c797eee" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Transform&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;xmlsignaturefactory#newTransform(java.lang.String,javax.xml.crypto.dsig.spec.TransformParameterSpec)&quot;&gt;&lt;code&gt;newTransform&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;code&gt;Transform&lt;/code&gt; インスタンス呼び出すことによって作成することができる&lt;a href=&quot;xmlsignaturefactory#newTransform(java.lang.String,javax.xml.crypto.dsig.spec.TransformParameterSpec)&quot;&gt; &lt;code&gt;newTransform&lt;/code&gt; の&lt;/a&gt;方法&lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt;クラス。</target>
        </trans-unit>
        <trans-unit id="ce8eb8ae483b249dde3a67758552767732ab705e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TransformAttribute&lt;/code&gt; representing the identity transform.</source>
          <target state="translated">A &lt;code&gt;TransformAttribute&lt;/code&gt; アイデンティティ変換を表します。</target>
        </trans-unit>
        <trans-unit id="794d6415c9a0902d8857c3f3d41bcb725804988a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TransformException&lt;/code&gt; can contain a cause: another throwable that caused this &lt;code&gt;TransformException&lt;/code&gt; to get thrown.</source>
          <target state="translated">A &lt;code&gt;TransformException&lt;/code&gt; は、この原因別のスロー可能オブジェクト：原因含めることができ &lt;code&gt;TransformException&lt;/code&gt; をスローをします。</target>
        </trans-unit>
        <trans-unit id="6f1ebdad4154be73db70650d4c661a605d4d5a60" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Transformer&lt;/code&gt; may be used multiple times. Parameters and output properties are preserved across transformations.</source>
          <target state="translated">A &lt;code&gt;Transformer&lt;/code&gt; 複数回使用することができます。パラメータと出力プロパティは、変換間で保持されます。</target>
        </trans-unit>
        <trans-unit id="d7d7308b87cdcd31a24c3b2985ced7b66eb3d439" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Transformer&lt;/code&gt; object that may be used to perform a transformation in a single &lt;code&gt;Thread&lt;/code&gt;, never &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Transformer&lt;/code&gt; 単一で変換を実行するために使用することができるオブジェクト &lt;code&gt;Thread&lt;/code&gt; 、決して &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5fef58fcbfbb311f387986c4ba19267aa872e583" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Transmitter&lt;/code&gt; sends &lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt; objects to one or more &lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;Receivers&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;code&gt;Transmitter&lt;/code&gt; 送信&lt;a href=&quot;midievent&quot;&gt; &lt;code&gt;MidiEvent&lt;/code&gt; &lt;/a&gt;一個の以上のオブジェクトを&lt;a href=&quot;receiver&quot;&gt; &lt;code&gt;Receivers&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3e98f51d396b18ef7f7ea6a95ac3f4559c6c559e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Transmitter&lt;/code&gt; sends &lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt; objects to one or more &lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;Receivers&lt;/code&gt;&lt;/a&gt;. Common MIDI transmitters include sequencers and MIDI input ports.</source>
          <target state="translated">A &lt;code&gt;Transmitter&lt;/code&gt; 送信&lt;a href=&quot;midievent&quot;&gt; &lt;code&gt;MidiEvent&lt;/code&gt; &lt;/a&gt;一個の以上のオブジェクトを&lt;a href=&quot;receiver&quot;&gt; &lt;code&gt;Receivers&lt;/code&gt; &lt;/a&gt;。一般的なMIDIトランスミッターには、シーケンサーとMIDI入力ポートが含まれます。</target>
        </trans-unit>
        <trans-unit id="47f7ecde27375f051e8d2dbe61836c772a17041b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Transmitter&lt;/code&gt; sends &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; objects to one or more &lt;code&gt;&lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;Receivers&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;Transmitter&lt;/code&gt; 送信 &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 一個の以上のオブジェクトを &lt;code&gt;&lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;Receivers&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ab5f5a092ccddf7f0ff4eb7494123a9cb8a192eb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Transmitter&lt;/code&gt; sends &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; objects to one or more &lt;code&gt;&lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;Receivers&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;. Common MIDI transmitters include sequencers and MIDI input ports.</source>
          <target state="translated">A &lt;code&gt;Transmitter&lt;/code&gt; 送信 &lt;code&gt;&lt;a href=&quot;midievent&quot;&gt;&lt;code&gt;MidiEvent&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 一個の以上のオブジェクトを &lt;code&gt;&lt;a href=&quot;receiver&quot;&gt;&lt;code&gt;Receivers&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 。一般的なMIDIトランスミッターには、シーケンサーとMIDI入力ポートが含まれます。</target>
        </trans-unit>
        <trans-unit id="84b5b168f5983c184cb97f5c437732a0737ac2ee" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TransportService&lt;/code&gt; may listen on multiple, yet different, addresses at the same time. To uniquely identify each &lt;code&gt;listener&lt;/code&gt; a listen key is created each time that &lt;a href=&quot;transportservice#startListening(java.lang.String)&quot;&gt;&lt;code&gt;startListening&lt;/code&gt;&lt;/a&gt; is called. The listen key is used in calls to the &lt;a href=&quot;transportservice#accept(com.sun.jdi.connect.spi.TransportService.ListenKey,long,long)&quot;&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt; method to accept inbound connections to that listener. A listen key is valid until it is used as an argument to &lt;a href=&quot;transportservice#stopListening(com.sun.jdi.connect.spi.TransportService.ListenKey)&quot;&gt;&lt;code&gt;stopListening&lt;/code&gt;&lt;/a&gt; to stop the transport service from listening on an address.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c43c787dc6ab76efe4badde6c83e22211538613c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TrayIcon&lt;/code&gt; can generate an &lt;a href=&quot;event/actionevent&quot;&gt;&lt;code&gt;ActionEvent&lt;/code&gt;&lt;/a&gt;. On some platforms, this occurs when the user selects the tray icon using either the mouse or keyboard.</source>
          <target state="translated">A &lt;code&gt;TrayIcon&lt;/code&gt; には、生成することができます&lt;a href=&quot;event/actionevent&quot;&gt; &lt;code&gt;ActionEvent&lt;/code&gt; &lt;/a&gt;。一部のプラットフォームでは、ユーザーがマウスまたはキーボードを使用してトレイアイコンを選択すると、これが発生します。</target>
        </trans-unit>
        <trans-unit id="466337adb8accff8d5b78bd4e68c60e9d871eb35" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TrayIcon&lt;/code&gt; can generate various &lt;a href=&quot;event/mouseevent&quot;&gt;&lt;code&gt;MouseEvents&lt;/code&gt;&lt;/a&gt; and supports adding corresponding listeners to receive notification of these events. &lt;code&gt;TrayIcon&lt;/code&gt; processes some of the events by itself. For example, by default, when the right-mouse click is performed on the &lt;code&gt;TrayIcon&lt;/code&gt; it displays the specified popup menu. When the mouse hovers over the &lt;code&gt;TrayIcon&lt;/code&gt; the tooltip is displayed (this behaviour is platform dependent).</source>
          <target state="translated">&lt;code&gt;TrayIcon&lt;/code&gt; には様々な生成することができる&lt;a href=&quot;event/mouseevent&quot;&gt; &lt;code&gt;MouseEvents&lt;/code&gt; &lt;/a&gt;これらのイベントの通知を受信するために対応するリスナーを追加し、サポートします。 &lt;code&gt;TrayIcon&lt;/code&gt; は、いくつかのイベントを単独で処理します。たとえば、デフォルトでは、 &lt;code&gt;TrayIcon&lt;/code&gt; でマウスの右クリックを実行すると、指定されたポップアップメニューが表示されます。マウスを &lt;code&gt;TrayIcon&lt;/code&gt; に合わせると、ツールチップが表示されます（この動作はプラットフォームによって異なります）。</target>
        </trans-unit>
        <trans-unit id="c6f001286c01c45c4daea4afa2c0d9a72aa6a0f1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TrayIcon&lt;/code&gt; object represents a tray icon that can be added to the &lt;a href=&quot;systemtray&quot;&gt;&lt;code&gt;system tray&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;TrayIcon&lt;/code&gt; にするオブジェクトを添加することができるトレイアイコンを表し&lt;a href=&quot;systemtray&quot;&gt; &lt;code&gt;system tray&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="8946c319e955d2eb9e506aa6eba7bd114aeb5444" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TrayIcon&lt;/code&gt; object represents a tray icon that can be added to the &lt;a href=&quot;systemtray&quot;&gt;&lt;code&gt;system tray&lt;/code&gt;&lt;/a&gt;. A &lt;code&gt;TrayIcon&lt;/code&gt; can have a tooltip (text), an image, a popup menu, and a set of listeners associated with it.</source>
          <target state="translated">&lt;code&gt;TrayIcon&lt;/code&gt; にするオブジェクトを添加することができるトレイアイコンを表し&lt;a href=&quot;systemtray&quot;&gt; &lt;code&gt;system tray&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;TrayIcon&lt;/code&gt; にはツールヒント（テキスト）、画像、ポップアップメニュー、およびそれに関連するリスナーのセットを持つことができます。</target>
        </trans-unit>
        <trans-unit id="f07b1f8a803b8ad8312fc19de57667c518e2327f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TreeCellEditor&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;TreeCellEditor&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d10b5b132d04669d5f36e25776be61d409dc94af" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TreeCellEditor&lt;/code&gt;. You need to supply an instance of &lt;code&gt;DefaultTreeCellRenderer&lt;/code&gt; so that the icons can be obtained. You can optionally supply a &lt;code&gt;TreeCellEditor&lt;/code&gt; that will be layed out according to the icon in the &lt;code&gt;DefaultTreeCellRenderer&lt;/code&gt;. If you do not supply a &lt;code&gt;TreeCellEditor&lt;/code&gt;, a &lt;code&gt;TextField&lt;/code&gt; will be used. Editing is started on a triple mouse click, or after a click, pause, click and a delay of 1200 milliseconds.</source>
          <target state="translated">A &lt;code&gt;TreeCellEditor&lt;/code&gt; 。アイコンを取得できるように、 &lt;code&gt;DefaultTreeCellRenderer&lt;/code&gt; のインスタンスを指定する必要があります。オプションで、 &lt;code&gt;DefaultTreeCellRenderer&lt;/code&gt; のアイコンに従って &lt;code&gt;TreeCellEditor&lt;/code&gt; されるTreeCellEditorを指定できます。 &lt;code&gt;TreeCellEditor&lt;/code&gt; を指定しない場合、 &lt;code&gt;TextField&lt;/code&gt; が使用されます。編集は、マウスを3回クリックするか、クリック、一時停止、クリック、および1200ミリ秒の遅延の後に開始されます。</target>
        </trans-unit>
        <trans-unit id="a9a9973b7ddc573008a40e63e16153e2288f330f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UID&lt;/code&gt; created via this constructor will not clash with any &lt;code&gt;UID&lt;/code&gt;s generated via the no-arg constructor.</source>
          <target state="translated">このコンストラクターを介して作成された &lt;code&gt;UID&lt;/code&gt; は、引数なしのコンストラクターを介して生成された &lt;code&gt;UID&lt;/code&gt; と衝突しません。</target>
        </trans-unit>
        <trans-unit id="13c40d3cb524b714a351808aa3e4e0e1cdd674d6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UID&lt;/code&gt; instance contains three primitive values:</source>
          <target state="translated">&lt;code&gt;UID&lt;/code&gt; のインスタンスは3つのプリミティブ値が含まれています。</target>
        </trans-unit>
        <trans-unit id="fe7d3ef4cba20379961fe38e5fb6e101ad696498" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UID&lt;/code&gt; represents an identifier that is unique over time with respect to the host it is generated on, or one of 2&lt;sup&gt;16&lt;/sup&gt; &quot;well-known&quot; identifiers.</source>
          <target state="translated">A &lt;code&gt;UID&lt;/code&gt; は、それが生成されるホスト、または2のいずれかに関連して時間をかけて一意の識別子を表し&lt;sup&gt;16&lt;/sup&gt;「既知の」識別子。</target>
        </trans-unit>
        <trans-unit id="76bc6d6be8cc65817824000c73faa0bd77b88f49" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;URIReferenceException&lt;/code&gt; can contain a cause: another throwable that caused this &lt;code&gt;URIReferenceException&lt;/code&gt; to get thrown.</source>
          <target state="translated">A &lt;code&gt;URIReferenceException&lt;/code&gt; この原因別のスロー可能オブジェクト：原因含めることができます &lt;code&gt;URIReferenceException&lt;/code&gt; スローをします。</target>
        </trans-unit>
        <trans-unit id="b58bc0ca4e83b0a96c3a1511203b83099584426f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;URL&lt;/code&gt; object for reading the resource, or &lt;code&gt;null&lt;/code&gt; if the resource could not be found</source>
          <target state="translated">リソースを読み取るための &lt;code&gt;URL&lt;/code&gt; オブジェクト、またはリソースが見つからなかった場合は &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a3ae6dcbe03a5258c2de9b5adc43f66d499b2dc9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;URL&lt;/code&gt; object for reading the resource, or &lt;code&gt;null&lt;/code&gt; if the resource could not be found or the invoker doesn't have adequate privileges to get the resource.</source>
          <target state="translated">リソースを読み取るための &lt;code&gt;URL&lt;/code&gt; オブジェクト。リソースが見つからなかった場合、または呼び出し側にリソースを取得するための適切な権限がない場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e94033eefad59f1c4203f56b39af581faa583c07" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UUID&lt;/code&gt; generated from the specified array</source>
          <target state="translated">A &lt;code&gt;UUID&lt;/code&gt; 指定された配列から生成</target>
        </trans-unit>
        <trans-unit id="21620c1dde73d7df7f4687f50490fccf13363b02" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UUID&lt;/code&gt; with the specified value</source>
          <target state="translated">指定された値を持つ &lt;code&gt;UUID&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8922dbcbd6678e8544f8c534c1ebaa6cd046b103" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UserPrincipal&lt;/code&gt; object is an abstract representation of an identity. It has a &lt;a href=&quot;../../../security/principal#getName()&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; that is typically the username or account name that it represents. User principal objects may be obtained using a &lt;a href=&quot;userprincipallookupservice&quot;&gt;&lt;code&gt;UserPrincipalLookupService&lt;/code&gt;&lt;/a&gt;, or returned by &lt;a href=&quot;fileattributeview&quot;&gt;&lt;code&gt;FileAttributeView&lt;/code&gt;&lt;/a&gt; implementations that provide access to identity related attributes. For example, the &lt;a href=&quot;aclfileattributeview&quot;&gt;&lt;code&gt;AclFileAttributeView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;posixfileattributeview&quot;&gt;&lt;code&gt;PosixFileAttributeView&lt;/code&gt;&lt;/a&gt; provide access to a file's &lt;a href=&quot;posixfileattributes#owner()&quot;&gt;&lt;code&gt;owner&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UserPrincipal&lt;/code&gt; のオブジェクトは、アイデンティティの抽象表現です。それは持っている&lt;a href=&quot;../../../security/principal#getName()&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;一般的に、それが表すユーザ名またはアカウント名です。ユーザープリンシパルオブジェクトは、&lt;a href=&quot;userprincipallookupservice&quot;&gt; &lt;code&gt;UserPrincipalLookupService&lt;/code&gt; &lt;/a&gt;を使用して取得するか、ID関連の属性へのアクセスを提供する&lt;a href=&quot;fileattributeview&quot;&gt; &lt;code&gt;FileAttributeView&lt;/code&gt; &lt;/a&gt;実装によって返されます。たとえば、&lt;a href=&quot;aclfileattributeview&quot;&gt; &lt;code&gt;AclFileAttributeView&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;posixfileattributeview&quot;&gt; &lt;code&gt;PosixFileAttributeView&lt;/code&gt; &lt;/a&gt;は、ファイルの&lt;a href=&quot;posixfileattributes#owner()&quot;&gt; &lt;code&gt;owner&lt;/code&gt; &lt;/a&gt;へのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="599a7629c98484788296ad2234207d277d0e2d7d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UserPrincipal&lt;/code&gt; object is an abstract representation of an identity. It has a &lt;a href=&quot;../../../security/principal#getName--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt; that is typically the username or account name that it represents. User principal objects may be obtained using a &lt;a href=&quot;userprincipallookupservice&quot;&gt;&lt;code&gt;UserPrincipalLookupService&lt;/code&gt;&lt;/a&gt;, or returned by &lt;a href=&quot;fileattributeview&quot;&gt;&lt;code&gt;FileAttributeView&lt;/code&gt;&lt;/a&gt; implementations that provide access to identity related attributes. For example, the &lt;a href=&quot;aclfileattributeview&quot;&gt;&lt;code&gt;AclFileAttributeView&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;posixfileattributeview&quot;&gt;&lt;code&gt;PosixFileAttributeView&lt;/code&gt;&lt;/a&gt; provide access to a file's &lt;a href=&quot;posixfileattributes#owner--&quot;&gt;&lt;code&gt;owner&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;UserPrincipal&lt;/code&gt; のオブジェクトは、アイデンティティの抽象表現です。それは持っている&lt;a href=&quot;../../../security/principal#getName--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt;一般的に、それが表すユーザ名またはアカウント名です。ユーザープリンシパルオブジェクトは、&lt;a href=&quot;userprincipallookupservice&quot;&gt; &lt;code&gt;UserPrincipalLookupService&lt;/code&gt; &lt;/a&gt;を使用して取得するか、ID関連の属性へのアクセスを提供する&lt;a href=&quot;fileattributeview&quot;&gt; &lt;code&gt;FileAttributeView&lt;/code&gt; &lt;/a&gt;実装から返すことができます。たとえば、&lt;a href=&quot;aclfileattributeview&quot;&gt; &lt;code&gt;AclFileAttributeView&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;posixfileattributeview&quot;&gt; &lt;code&gt;PosixFileAttributeView&lt;/code&gt; &lt;/a&gt;は、ファイルの&lt;a href=&quot;posixfileattributes#owner--&quot;&gt; &lt;code&gt;owner&lt;/code&gt; &lt;/a&gt;へのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="1c1f4741da78dd945ec791bf160e2424b5cc586b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UserPrincipal&lt;/code&gt; representing a &lt;em&gt;group identity&lt;/em&gt;, used to determine access rights to objects in a file system.</source>
          <target state="translated">A &lt;code&gt;UserPrincipal&lt;/code&gt; 表す&lt;em&gt;グループIDは&lt;/em&gt;、ファイルシステム内のオブジェクトへのアクセス権を決定するために使用します。</target>
        </trans-unit>
        <trans-unit id="8a116dd3c690ffcfbe35976550ba70d5560c07e7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;UserPrincipal&lt;/code&gt; representing a &lt;em&gt;group identity&lt;/em&gt;, used to determine access rights to objects in a file system. The exact definition of a group is implementation specific, but typically, it represents an identity created for administrative purposes so as to determine the access rights for the members of the group. Whether an entity can be a member of multiple groups, and whether groups can be nested, are implementation specified and therefore not specified.</source>
          <target state="translated">A &lt;code&gt;UserPrincipal&lt;/code&gt; 表す&lt;em&gt;グループIDは&lt;/em&gt;、ファイルシステム内のオブジェクトへのアクセス権を決定するために使用します。グループの正確な定義は実装固有ですが、通常、グループのメンバーのアクセス権を決定するために管理目的で作成されたIDを表します。エンティティが複数のグループのメンバーになることができるかどうか、およびグループをネストできるかどうかは、実装によって指定されるため、指定されていません。</target>
        </trans-unit>
        <trans-unit id="286c6994b195ff63e6cf6d828ee4b62110a6e467" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;VetoableChangeSupport&lt;/code&gt; instance is thread-safe.</source>
          <target state="translated">&lt;code&gt;VetoableChangeSupport&lt;/code&gt; のインスタンスは、スレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="7c39da4cc886a1480134b9477fecb46ea860f403" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;View&lt;/code&gt; is inherently transparent. While a view may render into its entire allocation, typically a view does not. Rendering is performed by traversing down the tree of &lt;code&gt;View&lt;/code&gt; implementations. Each &lt;code&gt;View&lt;/code&gt; is responsible for rendering its children. This behavior is depended upon for thread safety. While view implementations do not necessarily have to be implemented with thread safety in mind, other view implementations that do make use of concurrency can depend upon a tree traversal to guarantee thread safety.</source>
          <target state="translated">A &lt;code&gt;View&lt;/code&gt; は、本質的に透明です。ビューは割り当て全体にレンダリングされる場合がありますが、通常、ビューはレンダリングされません。レンダリングは、 &lt;code&gt;View&lt;/code&gt; 実装のツリーを下に移動することによって実行されます。各 &lt;code&gt;View&lt;/code&gt; は、その子をレンダリングする責任があります。この動作は、スレッドセーフに依存しています。ビューの実装は必ずしもスレッドセーフを念頭に置いて実装する必要はありませんが、並行性を利用する他のビューの実装は、スレッドセーフを保証するためにツリートラバーサルに依存する可能性があります。</target>
        </trans-unit>
        <trans-unit id="be03df672c94c77e01bf6a7d0e532abce574de99" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;VirtualMachine&lt;/code&gt; represents a Java virtual machine to which this Java virtual machine has attached. The Java virtual machine to which it is attached is sometimes called the</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5b2f2752a220063e8a9a1857f54d0efb58e87444" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;VirtualMachineDescriptor&lt;/code&gt; also has a &lt;a href=&quot;#displayName()&quot;&gt;&lt;code&gt;displayName&lt;/code&gt;&lt;/a&gt;. The display name is typically a human readable string that a tool might display to a user. For example, a tool that shows a list of Java virtual machines running on a system might use the display name rather than the identifier. A &lt;code&gt;VirtualMachineDescriptor&lt;/code&gt; may be created without a</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="966c96e09355ea598f681d4e0b0634b52ad13a7f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;VirtualMachineDescriptor&lt;/code&gt; is a container class used to describe a Java virtual machine. It encapsulates an identifier that identifies a target virtual machine, and a reference to the &lt;a href=&quot;spi/attachprovider&quot;&gt;&lt;code&gt;AttachProvider&lt;/code&gt;&lt;/a&gt; that should be used when attempting to attach to the virtual machine. The identifier is implementation-dependent but is typically the process identifier (or pid) environments where each Java virtual machine runs in its own operating system process.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c7c1a5f09da71ded9d9701609b9298eebe4f189a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;VoiceStatus&lt;/code&gt; object contains information about the current status of one of the voices produced by a &lt;a href=&quot;synthesizer&quot;&gt;&lt;code&gt;Synthesizer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;VoiceStatus&lt;/code&gt; オブジェクトは、によって生成される音声のいずれかの現在のステータスに関する情報が含まれてい&lt;a href=&quot;synthesizer&quot;&gt; &lt;code&gt;Synthesizer&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="596e71e7a54065b28311c0799dfe3ff8f15f0487" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;VolatileCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target acts like a volatile variable.</source>
          <target state="translated">A &lt;code&gt;VolatileCallSite&lt;/code&gt; がある&lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt;そのターゲットvolatile変数のような働きをします。</target>
        </trans-unit>
        <trans-unit id="e0d418aa2c0aa5c7b088b46eb9b8c553a1989036" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;VolatileCallSite&lt;/code&gt; is a &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; whose target acts like a volatile variable. An &lt;code&gt;invokedynamic&lt;/code&gt; instruction linked to a &lt;code&gt;VolatileCallSite&lt;/code&gt; sees updates to its call site target immediately, even if the update occurs in another thread. There may be a performance penalty for such tight coupling between threads.</source>
          <target state="translated">A &lt;code&gt;VolatileCallSite&lt;/code&gt; がある&lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt;そのターゲットvolatile変数のような働きをします。 &lt;code&gt;invokedynamic&lt;/code&gt; のにリンクされている命令 &lt;code&gt;VolatileCallSite&lt;/code&gt; は更新が別のスレッドで発生した場合でも、すぐにその呼び出しサイトのターゲットへの更新を見ています。スレッド間のこのような密結合には、パフォーマンスが低下する可能性があります。</target>
        </trans-unit>
        <trans-unit id="422fcf97e0a270d1eed1f6556c906973a4223b55" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;WebRowSet&lt;/code&gt; object can insert a new row by moving to the insert row, calling the appropriate updater methods for each column in the row, and then calling the method &lt;code&gt;insertRow&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;WebRowSet&lt;/code&gt; オブジェクトは、挿入行に移動する行の各列に対して適切な更新メソッドを呼び出し、その後、メソッドを呼び出すことによって新しい行を挿入することができる &lt;code&gt;insertRow&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c195302a2b3caef4fcd49f5a7d2356fa0fe23977" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;WebSocket&lt;/code&gt; has been connected.</source>
          <target state="translated">&lt;code&gt;WebSocket&lt;/code&gt; が接続されていました。</target>
        </trans-unit>
        <trans-unit id="795b7bd5c6d0f92eeef0e5692db40ba00e671bfe" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;WebSocket&lt;/code&gt; invokes methods of the associated listener passing itself as an argument. These methods are invoked in a thread-safe manner, such that the next invocation may start only after the previous one has finished.</source>
          <target state="translated">&lt;code&gt;WebSocket&lt;/code&gt; は、引数として自身を通過する関連するリスナーのメソッドを呼び出します。これらのメソッドはスレッドセーフな方法で呼び出されるため、次の呼び出しは前の呼び出しが終了した後にのみ開始できます。</target>
        </trans-unit>
        <trans-unit id="ef7a88d2e30cce9da51d34eb036cab772256ef19" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Window&lt;/code&gt; object is a top-level window with no borders and no menubar.</source>
          <target state="translated">&lt;code&gt;Window&lt;/code&gt; オブジェクトはボーダおよびメニューバーを持たないトップレベルウィンドウです。</target>
        </trans-unit>
        <trans-unit id="37af458e69ffd40570fb606e1c3a53b0b15bf3e4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Window&lt;/code&gt; object is a top-level window with no borders and no menubar. The default layout for a window is &lt;code&gt;BorderLayout&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Window&lt;/code&gt; オブジェクトはボーダおよびメニューバーを持たないトップレベルウィンドウです。ウィンドウのデフォルトのレイアウトは &lt;code&gt;BorderLayout&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8f2659d09382819cc3894e60b723100ad2720739" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;WritableRaster&lt;/code&gt; containing the image's alpha channel.</source>
          <target state="translated">A &lt;code&gt;WritableRaster&lt;/code&gt; 画像のアルファチャンネルを含みます。</target>
        </trans-unit>
        <trans-unit id="cb3422899b3c6df4136bc9881bcf3cb17b355389" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;WritableRaster&lt;/code&gt; that is compatible with this &lt;code&gt;ColorModel&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;ColorModel&lt;/code&gt; と互換性のある &lt;code&gt;WritableRaster&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="20a284f55c692945b604b39cc536b076f43e6dc2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;XMLObject&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;xmlsignaturefactory#newXMLObject(java.util.List,java.lang.String,java.lang.String,java.lang.String)&quot;&gt;&lt;code&gt;newXMLObject&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class; for example:</source>
          <target state="translated">&lt;code&gt;XMLObject&lt;/code&gt; のインスタンスを呼び出すことによって作成することができる&lt;a href=&quot;xmlsignaturefactory#newXMLObject(java.util.List,java.lang.String,java.lang.String,java.lang.String)&quot;&gt; &lt;code&gt;newXMLObject&lt;/code&gt; の&lt;/a&gt;方法&lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt;クラスを、例えば：</target>
        </trans-unit>
        <trans-unit id="8d9990704b4f7c2fb32800d093417ea36291d6a1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ZoneId&lt;/code&gt; can be deserialized in a Java Runtime where the ID is unknown. For example, if a server-side Java Runtime has been updated with a new zone ID, but the client-side Java Runtime has not been updated. In this case, the &lt;code&gt;ZoneId&lt;/code&gt; object will exist, and can be queried using &lt;code&gt;getId&lt;/code&gt;, &lt;code&gt;equals&lt;/code&gt;, &lt;code&gt;hashCode&lt;/code&gt;, &lt;code&gt;toString&lt;/code&gt;, &lt;code&gt;getDisplayName&lt;/code&gt; and &lt;code&gt;normalized&lt;/code&gt;. However, any call to &lt;code&gt;getRules&lt;/code&gt; will fail with &lt;code&gt;ZoneRulesException&lt;/code&gt;. This approach is designed to allow a &lt;a href=&quot;zoneddatetime&quot;&gt;&lt;code&gt;ZonedDateTime&lt;/code&gt;&lt;/a&gt; to be loaded and queried, but not modified, on a Java Runtime with incomplete time-zone information.</source>
          <target state="translated">A &lt;code&gt;ZoneId&lt;/code&gt; IDが不明であるJavaランタイムで非直列化することができます。たとえば、サーバー側のJavaランタイムが新しいゾーンIDで更新されているが、クライアント側のJavaランタイムは更新されていない場合。この場合、 &lt;code&gt;ZoneId&lt;/code&gt; オブジェクトが存在し、 &lt;code&gt;getId&lt;/code&gt; 、 &lt;code&gt;equals&lt;/code&gt; 、 &lt;code&gt;hashCode&lt;/code&gt; 、 &lt;code&gt;toString&lt;/code&gt; 、 &lt;code&gt;getDisplayName&lt;/code&gt; 、および &lt;code&gt;normalized&lt;/code&gt; を使用してクエリできます。ただし、 &lt;code&gt;getRules&lt;/code&gt; の呼び出しはすべてZoneRulesExceptionで失敗し &lt;code&gt;ZoneRulesException&lt;/code&gt; 。このアプローチは、タイムゾーン情報が不完全なJavaランタイムで&lt;a href=&quot;zoneddatetime&quot;&gt; &lt;code&gt;ZonedDateTime&lt;/code&gt; &lt;/a&gt;をロードおよびクエリできるように設計されていますが、変更はできません。</target>
        </trans-unit>
        <trans-unit id="da505947151bf4272a8a9b83469f5005bb360311" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ZoneId&lt;/code&gt; is used to identify the rules used to convert between an &lt;a href=&quot;instant&quot;&gt;&lt;code&gt;Instant&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;localdatetime&quot;&gt;&lt;code&gt;LocalDateTime&lt;/code&gt;&lt;/a&gt;. There are two distinct types of ID:</source>
          <target state="translated">A &lt;code&gt;ZoneId&lt;/code&gt; 間で変換するために使用されるルールを識別するために使用される&lt;a href=&quot;instant&quot;&gt; &lt;code&gt;Instant&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;localdatetime&quot;&gt; &lt;code&gt;LocalDateTime&lt;/code&gt; &lt;/a&gt;。IDには2つの異なるタイプがあります。</target>
        </trans-unit>
        <trans-unit id="05f3af6a7feaa91622bf80e2250ca79781091904" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;ZonedDateTime&lt;/code&gt; holds state equivalent to three separate objects, a &lt;code&gt;LocalDateTime&lt;/code&gt;, a &lt;code&gt;ZoneId&lt;/code&gt; and the resolved &lt;code&gt;ZoneOffset&lt;/code&gt;. The offset and local date-time are used to define an instant when necessary. The zone ID is used to obtain the rules for how and when the offset changes. The offset cannot be freely set, as the zone controls which offsets are valid.</source>
          <target state="translated">A &lt;code&gt;ZonedDateTime&lt;/code&gt; は、 3つの別々のオブジェクトの状態と同等の保持 &lt;code&gt;LocalDateTime&lt;/code&gt; を、 &lt;code&gt;ZoneId&lt;/code&gt; 及び解決 &lt;code&gt;ZoneOffset&lt;/code&gt; 。オフセットとローカルの日時は、必要なときにインスタントを定義するために使用されます。ゾーンIDは、オフセットがいつどのように変更されるかについてのルールを取得するために使用されます。ゾーンは有効なオフセットを制御するため、オフセットを自由に設定することはできません。</target>
        </trans-unit>
        <trans-unit id="0d10e806fe2685e19549872b276996cba4677bdf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; indicating if the encapsulated &lt;code&gt;Transferable&lt;/code&gt; object represents the result of local drag-n-drop operation (within the same JVM).</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; カプセル化された場合を示し &lt;code&gt;Transferable&lt;/code&gt; オブジェクトが同じJVM内のローカルなドラッグ＆ドロップ操作の結果を表します。</target>
        </trans-unit>
        <trans-unit id="fc9cd49ad7b5f59a0d1f4361c3727c4e5c505b5a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; indicating if this instance may now render a GUI.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; このインスタンスがGUIを描画できるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="911789bac1c76b67035efa87a8656de4b6dc167c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; indicating whether or not this object is currently in design time mode.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; このオブジェクトが現在、設計時モードであるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="f020b03a03d1d7e0fea471e7287ff71c308e6333" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; parameter allows you to specify whether or not a printing dialog is displayed to the user. When it is, the user may use the dialog to change the destination printer or printing attributes, or even to cancel the print. Another two parameters allow for a &lt;code&gt;PrintService&lt;/code&gt; and printing attributes to be specified. These parameters can be used either to provide initial values for the print dialog, or to specify values when the dialog is not shown.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; パラメータを使用すると、印刷ダイアログがユーザーに表示されるかどうかを指定することができます。その場合、ユーザーはダイアログを使用して、宛先のプリンターまたは印刷属性を変更したり、印刷をキャンセルしたりすることができます。別の2つのパラメーターを使用すると、 &lt;code&gt;PrintService&lt;/code&gt; 属性と印刷属性を指定できます。これらのパラメータは、印刷ダイアログの初期値を提供するため、またはダイアログが表示されていないときに値を指定するために使用できます。</target>
        </trans-unit>
        <trans-unit id="02f0086c349da359110250836ba03df79dd8e698" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;ImageWriteParam&lt;/code&gt; allows images to be written as a progressive sequence of increasing quality passes.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; である &lt;code&gt;true&lt;/code&gt; この場合 &lt;code&gt;ImageWriteParam&lt;/code&gt; で画像品質パスを増加させるのプログレッシブシーケンスとして書き込まれることを可能にします。</target>
        </trans-unit>
        <trans-unit id="b410ad56ec7b1440a4b739b5de51c7d451c01a75" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;ImageWriteParam&lt;/code&gt; allows images to be written as a progressive sequence of increasing quality passes. By default, the value is &lt;code&gt;false&lt;/code&gt;. Subclasses must set the value manually.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; である &lt;code&gt;true&lt;/code&gt; この場合 &lt;code&gt;ImageWriteParam&lt;/code&gt; で画像品質パスを増加させるのプログレッシブシーケンスとして書き込まれることを可能にします。デフォルトでは、値は &lt;code&gt;false&lt;/code&gt; です。サブクラスは手動で値を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="e1aa5ec614f6f8cdf29028ca9609323b4981b960" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;ImageWriteParam&lt;/code&gt; allows tile width and tile height parameters to be set.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; である &lt;code&gt;true&lt;/code&gt; この場合 &lt;code&gt;ImageWriteParam&lt;/code&gt; でタイルの幅と高さのパラメータを設定することができます。</target>
        </trans-unit>
        <trans-unit id="835d34959de64d4a8d84312a811100962bb32824" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;ImageWriteParam&lt;/code&gt; allows tile width and tile height parameters to be set. By default, the value is &lt;code&gt;false&lt;/code&gt;. Subclasses must set the value manually.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; である &lt;code&gt;true&lt;/code&gt; この場合 &lt;code&gt;ImageWriteParam&lt;/code&gt; でタイルの幅と高さのパラメータを設定することができます。デフォルトでは、値は &lt;code&gt;false&lt;/code&gt; です。サブクラスは手動で値を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="5a16a4b6cceb46d7210d870aeb738780b5350ffd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;ImageWriteParam&lt;/code&gt; allows tiling grid offset parameters to be set.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; である &lt;code&gt;true&lt;/code&gt; この場合 &lt;code&gt;ImageWriteParam&lt;/code&gt; で設定するグリッドオフセットパラメータをタイリングすることができます。</target>
        </trans-unit>
        <trans-unit id="69e6051986f502b35b40f12341fca7ee231dbb2f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this &lt;code&gt;ImageWriteParam&lt;/code&gt; allows tiling grid offset parameters to be set. By default, the value is &lt;code&gt;false&lt;/code&gt;. Subclasses must set the value manually.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; である &lt;code&gt;true&lt;/code&gt; この場合 &lt;code&gt;ImageWriteParam&lt;/code&gt; で設定するグリッドオフセットパラメータをタイリングすることができます。デフォルトでは、値は &lt;code&gt;false&lt;/code&gt; です。サブクラスは手動で値を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="ba57c1828f933d49824cc9acbe04ac90994cee7f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this writer can write images using compression.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; である &lt;code&gt;true&lt;/code&gt; このライターは、圧縮を使用してイメージを書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="e8334a88bf0f77348a41e079c994d353ef7e14ad" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if this writer can write images using compression. By default, the value is &lt;code&gt;false&lt;/code&gt;. Subclasses must set the value manually.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; である &lt;code&gt;true&lt;/code&gt; このライターは、圧縮を使用してイメージを書き込むことができます。デフォルトでは、値は &lt;code&gt;false&lt;/code&gt; です。サブクラスは手動で値を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="af783e5ccce67dac2defe55ca956bd446858f68b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; that is &lt;code&gt;true&lt;/code&gt; if tiling parameters have been specified.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; である &lt;code&gt;true&lt;/code&gt; タイリングパラメータが指定されている場合。</target>
        </trans-unit>
        <trans-unit id="298b6d38fd53ceb77f5afd16627685f8849adc99" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; value that may be updated atomically.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; アトミックに更新することができる値。</target>
        </trans-unit>
        <trans-unit id="f183a691e5656cf9381e6b26108e31cd997e0220" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; value that may be updated atomically. See the &lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt;&lt;code&gt;VarHandle&lt;/code&gt;&lt;/a&gt; specification for descriptions of the properties of atomic accesses. An &lt;code&gt;AtomicBoolean&lt;/code&gt; is used in applications such as atomically updated flags, and cannot be used as a replacement for a &lt;a href=&quot;../../../lang/boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; アトミックに更新することができる値。アトミックアクセスのプロパティの説明については、&lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt; &lt;code&gt;VarHandle&lt;/code&gt; &lt;/a&gt;仕様を参照してください。アン &lt;code&gt;AtomicBoolean&lt;/code&gt; は、このようなアトミック更新フラグなどの用途に使用され、の代替として使用することはできません&lt;a href=&quot;../../../lang/boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c101afa2aedde90937ffa8c036550e520ca97ed0" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt; value that may be updated atomically. See the &lt;a href=&quot;package-summary&quot;&gt;&lt;code&gt;java.util.concurrent.atomic&lt;/code&gt;&lt;/a&gt; package specification for description of the properties of atomic variables. An &lt;code&gt;AtomicBoolean&lt;/code&gt; is used in applications such as atomically updated flags, and cannot be used as a replacement for a &lt;a href=&quot;../../../lang/boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; アトミックに更新することができる値。アトミック変数のプロパティの説明については、&lt;a href=&quot;package-summary&quot;&gt; &lt;code&gt;java.util.concurrent.atomic&lt;/code&gt; &lt;/a&gt;パッケージ仕様を参照してください。アン &lt;code&gt;AtomicBoolean&lt;/code&gt; は、このようなアトミック更新フラグなどの用途に使用され、の代替として使用することはできません&lt;a href=&quot;../../../lang/boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2a76cd3619b4ccf3c191aed8eefc4ec53921b519" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;byte&lt;/code&gt; array initialized with a size of &lt;a href=&quot;#destWidth&quot;&gt;&lt;code&gt;destWidth&lt;/code&gt;&lt;/a&gt; and used to deliver a row of pixel data to the &lt;a href=&quot;imageconsumer&quot;&gt;&lt;code&gt;ImageConsumer&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;byte&lt;/code&gt; 配列のサイズで初期化さ&lt;a href=&quot;#destWidth&quot;&gt; &lt;code&gt;destWidth&lt;/code&gt; &lt;/a&gt;と、画素データの列を送達するために使用さ&lt;a href=&quot;imageconsumer&quot;&gt; &lt;code&gt;ImageConsumer&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="20da1027223eab2ad2c66e79d10dc8ff1024234e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;char&lt;/code&gt; value, therefore, represents Basic Multilingual Plane (BMP) code points, including the surrogate code points, or code units of the UTF-16 encoding. An &lt;code&gt;int&lt;/code&gt; value represents all Unicode code points, including supplementary code points. The lower (least significant) 21 bits of &lt;code&gt;int&lt;/code&gt; are used to represent Unicode code points and the upper (most significant) 11 bits must be zero. Unless otherwise specified, the behavior with respect to supplementary characters and surrogate &lt;code&gt;char&lt;/code&gt; values is as follows:</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; 値は、従って、サロゲートコードポイント、またはUTF-16エンコーディングのコード単位を含む基本多言語面（BMP）コードポイントを表しています。 &lt;code&gt;int&lt;/code&gt; 値は、補助コードポイントを含むすべてのUnicodeコードポイントを表します。 &lt;code&gt;int&lt;/code&gt; の下位（最下位）21ビットはUnicodeコードポイントを表すために使用され、上位（最上位）11ビットはゼロでなければなりません。特に指定がない限り、補助文字と代理 &lt;code&gt;char&lt;/code&gt; 値に関する動作は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="6efab522b7aee8a07cad8889be3980bfb50d4943" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;class&lt;/code&gt; file of version 55.0 or greater may record the host of the nest to which it belongs by using the &lt;code&gt;NestHost&lt;/code&gt; attribute (JVMS 4.7.28). Alternatively, a &lt;code&gt;class&lt;/code&gt; file of version 55.0 or greater may act as a nest host by enumerating the nest's other members with the &lt;code&gt;NestMembers&lt;/code&gt; attribute (JVMS 4.7.29). A &lt;code&gt;class&lt;/code&gt; file of version 54.0 or lower does not use these attributes.</source>
          <target state="translated">&lt;code&gt;class&lt;/code&gt; バージョン55.0以上のファイルは、それが使用することによって属する巣のホスト記録することができる &lt;code&gt;NestHost&lt;/code&gt; 属性（JVMS 4.7.28）を。または、バージョン55.0以降の &lt;code&gt;class&lt;/code&gt; ファイルは、 &lt;code&gt;NestMembers&lt;/code&gt; 属性（JVMS 4.7.29）を使用してネストの他のメンバーを列挙することにより、ネストホストとして機能する場合があります。 &lt;code&gt;class&lt;/code&gt; バージョン54.0またはそれ以下のファイルは、これらの属性を使用しません。</target>
        </trans-unit>
        <trans-unit id="eda7397702e8e699a3d9cd248aa7777f6f0ea18d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;count&lt;/code&gt; value of 0 disables looping: playback will continue at the loop end point, and it will not loop back to the loop start point. This is a sequencer's default.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; ループ0の場合は無効の値：再生がループエンドポイントで継続する、それがループスタート地点にループバックしません。これはシーケンサーのデフォルトです。</target>
        </trans-unit>
        <trans-unit id="cd82d12abe21bb169705776073d69b7b82dee223" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;count&lt;/code&gt; value of 0 indicates that any current looping should cease and playback should continue to the end of the clip. The behavior is undefined when this method is invoked with any other value during a loop operation.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; 0の値は、任意の現在のループは中止すべきと再生はクリップの最後まで続けるべきであることを示しています。ループ操作中にこのメソッドが他の値で呼び出された場合の動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="4a9fd5c6543bde97c1701163a0d5f4be46237afa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;float&lt;/code&gt; containing the current compression quality setting.</source>
          <target state="translated">&lt;code&gt;float&lt;/code&gt; 現在の圧縮品質設定を含みます。</target>
        </trans-unit>
        <trans-unit id="002c59e83944aa5f0541632ce7cc87a21431c134" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;float&lt;/code&gt; containing the current compression quality setting. The initial value is &lt;code&gt;1.0F&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;float&lt;/code&gt; 現在の圧縮品質設定を含みます。初期値は &lt;code&gt;1.0F&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1479a5979c4c5293d1e73493a144c501a4ed3832" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;getDecoder&lt;/code&gt; method is defined similarly.</source>
          <target state="translated">&lt;code&gt;getDecoder&lt;/code&gt; の方法は、同様に定義されます。</target>
        </trans-unit>
        <trans-unit id="3c7ffaa40cbe2054db9cb8e86eaadea3ee80a4e9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;java.lang.Object&lt;/code&gt; holding the OUT parameter value</source>
          <target state="translated">OUTパラメータ値を保持する &lt;code&gt;java.lang.Object&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="44edcb148071b12866fbe7f946483d8fc7f7136e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;java.lang.Object&lt;/code&gt; holding the OUT parameter value.</source>
          <target state="translated">OUTパラメータ値を保持する &lt;code&gt;java.lang.Object&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7437daa70a343a0b95fb2fbb0eaa5c65eff81fa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;java.util.Map&lt;/code&gt; object is used to associate the SQL structured type with its mapping to the class &lt;code&gt;Authors&lt;/code&gt;. The following code fragment shows how a &lt;code&gt;Map&lt;/code&gt; object might be created and given an entry associating &lt;code&gt;AUTHORS&lt;/code&gt; and &lt;code&gt;Authors&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;java.util.Map&lt;/code&gt; のオブジェクトは、クラスへのマッピングとSQL構造型を関連付けるために使用されている &lt;code&gt;Authors&lt;/code&gt; 。次のコードフラグメントは、 &lt;code&gt;Map&lt;/code&gt; オブジェクトを作成し、 &lt;code&gt;AUTHORS&lt;/code&gt; と &lt;code&gt;Authors&lt;/code&gt; を関連付けるエントリを指定する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="a0ef54338e3f5fd740d5848f5642a2c1ccb5cf6e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;long&lt;/code&gt; array in which elements may be updated atomically.</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; 要素を原子的に更新可能なアレイ。</target>
        </trans-unit>
        <trans-unit id="3bcdd10f85c7468fa110c2018ba0e2892d616ace" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;long&lt;/code&gt; array in which elements may be updated atomically. See the &lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt;&lt;code&gt;VarHandle&lt;/code&gt;&lt;/a&gt; specification for descriptions of the properties of atomic accesses.</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; 要素を原子的に更新可能なアレイ。アトミックアクセスのプロパティの説明については、&lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt; &lt;code&gt;VarHandle&lt;/code&gt; &lt;/a&gt;仕様を参照してください。</target>
        </trans-unit>
        <trans-unit id="88aeee4d95787893e3688fea4c58f90d49ca8c99" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;long&lt;/code&gt; array in which elements may be updated atomically. See the &lt;a href=&quot;package-summary&quot;&gt;&lt;code&gt;java.util.concurrent.atomic&lt;/code&gt;&lt;/a&gt; package specification for description of the properties of atomic variables.</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; 要素を原子的に更新可能なアレイ。アトミック変数のプロパティの説明については、&lt;a href=&quot;package-summary&quot;&gt; &lt;code&gt;java.util.concurrent.atomic&lt;/code&gt; &lt;/a&gt;パッケージ仕様を参照してください。</target>
        </trans-unit>
        <trans-unit id="03ee3984a4ce41f61a957ded4535f07488a6735b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;long&lt;/code&gt; or &lt;code&gt;double&lt;/code&gt; argument counts (for purposes of arity limits) as two argument slots.</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; または &lt;code&gt;double&lt;/code&gt; 2つの引数スロットとして（アリティの制限のために）引数カウント。</target>
        </trans-unit>
        <trans-unit id="a04b66b2d94cf4ae8fbc24d6ec5f4a83902cb97c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;long&lt;/code&gt; value representing the time the file was last modified, measured in milliseconds since the epoch (00:00:00 GMT, January 1, 1970), or &lt;code&gt;0L&lt;/code&gt; if the file does not exist or if an I/O error occurs</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; ファイルはエポック（00:00:00 GMT 1970年1月1日）からのミリ秒で測定され、最後に変更された時間を表す値、または &lt;code&gt;0L&lt;/code&gt; ファイルが存在しない場合、またはI / Oエラーが発生した場合</target>
        </trans-unit>
        <trans-unit id="01233b54d85186abbddf9436bfdbaf094a88ef54" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;long&lt;/code&gt; value representing the time the file was last modified, measured in milliseconds since the epoch (00:00:00 GMT, January 1, 1970), or &lt;code&gt;0L&lt;/code&gt; if the file does not exist or if an I/O error occurs. The value may be negative indicating the number of milliseconds before the epoch</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; エポックからのミリ秒で測定されたファイルが最後に変更された時間を表す値、（00:00:00 GMT 1970年1月1日）、または &lt;code&gt;0L&lt;/code&gt; ファイルが存在しないか、I / Oエラーが発生した場合にない場合。値は負の場合があり、エポックの前のミリ秒数を示します</target>
        </trans-unit>
        <trans-unit id="bc909250cbeae60993a8740b7bb550fbcd052167" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;long&lt;/code&gt; value that may be updated atomically.</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; アトミックに更新することができる値。</target>
        </trans-unit>
        <trans-unit id="ec162d19f31a3cd4caaba214a167faedbd80db54" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;long&lt;/code&gt; value that may be updated atomically. See the &lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt;&lt;code&gt;VarHandle&lt;/code&gt;&lt;/a&gt; specification for descriptions of the properties of atomic accesses. An &lt;code&gt;AtomicLong&lt;/code&gt; is used in applications such as atomically incremented sequence numbers, and cannot be used as a replacement for a &lt;a href=&quot;../../../lang/long&quot;&gt;&lt;code&gt;Long&lt;/code&gt;&lt;/a&gt;. However, this class does extend &lt;code&gt;Number&lt;/code&gt; to allow uniform access by tools and utilities that deal with numerically-based classes.</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; アトミックに更新することができる値。アトミックアクセスのプロパティの説明については、&lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt; &lt;code&gt;VarHandle&lt;/code&gt; &lt;/a&gt;仕様を参照してください。アン &lt;code&gt;AtomicLong&lt;/code&gt; は、そのようなアトミックインクリメントされたシーケンス番号などのアプリケーションで使用されている、との代替として使用することはできません&lt;a href=&quot;../../../lang/long&quot;&gt; &lt;code&gt;Long&lt;/code&gt; &lt;/a&gt;。ただし、このクラスは &lt;code&gt;Number&lt;/code&gt; を拡張して、数値ベースのクラスを処理するツールやユーティリティによる均一なアクセスを可能にします。</target>
        </trans-unit>
        <trans-unit id="192854d39ccd972a8265120efc645d14fb105c7c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;long&lt;/code&gt; value that may be updated atomically. See the &lt;a href=&quot;package-summary&quot;&gt;&lt;code&gt;java.util.concurrent.atomic&lt;/code&gt;&lt;/a&gt; package specification for description of the properties of atomic variables. An &lt;code&gt;AtomicLong&lt;/code&gt; is used in applications such as atomically incremented sequence numbers, and cannot be used as a replacement for a &lt;a href=&quot;../../../lang/long&quot;&gt;&lt;code&gt;Long&lt;/code&gt;&lt;/a&gt;. However, this class does extend &lt;code&gt;Number&lt;/code&gt; to allow uniform access by tools and utilities that deal with numerically-based classes.</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; アトミックに更新することができる値。アトミック変数のプロパティの説明については、&lt;a href=&quot;package-summary&quot;&gt; &lt;code&gt;java.util.concurrent.atomic&lt;/code&gt; &lt;/a&gt;パッケージ仕様を参照してください。アン &lt;code&gt;AtomicLong&lt;/code&gt; は、そのようなアトミックインクリメントされたシーケンス番号などのアプリケーションで使用されている、との代替として使用することはできません&lt;a href=&quot;../../../lang/long&quot;&gt; &lt;code&gt;Long&lt;/code&gt; &lt;/a&gt;。ただし、このクラスは &lt;code&gt;Number&lt;/code&gt; を拡張して、数値ベースのクラスを処理するツールやユーティリティによる均一なアクセスを可能にします。</target>
        </trans-unit>
        <trans-unit id="235874c94c0f2dfde0bba3dfb03aba6a5c029f12" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;mailto:&lt;/code&gt; URI can specify message fields including</source>
          <target state="translated">A &lt;code&gt;mailto:&lt;/code&gt; URIは、以下を含むメッセージフィールドを指定することができます</target>
        </trans-unit>
        <trans-unit id="e9fc1df4b7ac98eebfc4971379d3682ab28fb645" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;named-capturing group&lt;/code&gt; is still numbered as described in &lt;a href=&quot;#gnumber&quot;&gt;Group number&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;named-capturing group&lt;/code&gt; で説明したように、まだ番号が付けられ&lt;a href=&quot;#gnumber&quot;&gt;、グループ番号&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ddc816003f98669f500647d38c58eeab0e8488b6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; address will assign the</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; アドレスが割り当てられます</target>
        </trans-unit>
        <trans-unit id="073111b0c86bd79b925cf37fa0cb0aae841fb84e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; array reference is considered lexicographically less than a non-&lt;code&gt;null&lt;/code&gt; array reference. Two &lt;code&gt;null&lt;/code&gt; array references are considered equal.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 配列参照は、辞書以下の非より考えられる &lt;code&gt;null&lt;/code&gt; 配列参照。2つの &lt;code&gt;null&lt;/code&gt; 配列参照は等しいと見なされます。</target>
        </trans-unit>
        <trans-unit id="329fa026cc72a7c35dee3ce859c96300362979ec" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; array reference is considered lexicographically less than a non-&lt;code&gt;null&lt;/code&gt; array reference. Two &lt;code&gt;null&lt;/code&gt; array references are considered equal. A &lt;code&gt;null&lt;/code&gt; array element is considered lexicographically less than a non-&lt;code&gt;null&lt;/code&gt; array element. Two &lt;code&gt;null&lt;/code&gt; array elements are considered equal.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="af43eaaf3581a1e718f40089e52888e01f0297bf" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; array reference is considered lexicographically less than a non-&lt;code&gt;null&lt;/code&gt; array reference. Two &lt;code&gt;null&lt;/code&gt; array references are considered equal. A &lt;code&gt;null&lt;/code&gt; array element is considered lexicographically than a non-&lt;code&gt;null&lt;/code&gt; array element. Two &lt;code&gt;null&lt;/code&gt; array elements are considered equal.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 配列参照は、辞書以下の非より考えられる &lt;code&gt;null&lt;/code&gt; 配列参照。2つの &lt;code&gt;null&lt;/code&gt; 配列参照は等しいと見なされます。 &lt;code&gt;null&lt;/code&gt; 配列要素は、非よりも辞書式考えられる &lt;code&gt;null&lt;/code&gt; アレイ素子。2つの &lt;code&gt;null&lt;/code&gt; 配列要素は等しいと見なされます。</target>
        </trans-unit>
        <trans-unit id="a1bfbb3f894a1e1d42024d7651c1edc781e39653" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; value for</source>
          <target state="translated">の &lt;code&gt;null&lt;/code&gt; 値</target>
        </trans-unit>
        <trans-unit id="dcb60d8ba30e7b319805196a1f0ba9444c9c5ea9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; value indicates that all destination bands will be used.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 値は、すべてのデスティネーションバンドが使用されることを示しています。</target>
        </trans-unit>
        <trans-unit id="5aee2cf861557c088e548f762214d97ee16bebd1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; value indicates that all source bands will be used.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 値は、すべてのソースバンドが使用されることを示しています。</target>
        </trans-unit>
        <trans-unit id="c8aa7f56541d93b0cf41a104114d2908d45605e8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; value indicates that field is not set.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 値は、フィールドが設定されていないことを示しています。</target>
        </trans-unit>
        <trans-unit id="7e24479059a86232b3b1259897089f329fb70b5c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; value may be passed to function</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 値は、関数に渡されてもよいです</target>
        </trans-unit>
        <trans-unit id="1f63c6f19d49f7eeccf62713ebc460ba91686c20" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt; value or &lt;code&gt;Action&lt;/code&gt; results in the button's &lt;code&gt;mnemonic&lt;/code&gt; property being set to &lt;code&gt;'\0'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; 値または &lt;code&gt;Action&lt;/code&gt; ボタンの中に結果 &lt;code&gt;mnemonic&lt;/code&gt; のプロパティ設定中の &lt;code&gt;'\0'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="358b40c26f1d1fc27be4c8fd5ddb8dcc6f763775" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;null&lt;/code&gt;&lt;code&gt;domainName&lt;/code&gt; is equivalent to and represented by an empty string.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e7861e42cadd5a8e7683aa20e472886e476b3a9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;serialVersionUID&lt;/code&gt; field in an interface is ineffectual.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="316a2dd6a1a519cbd86c3c4d8154558ce3d693ae" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;serialVersionUID&lt;/code&gt; field in an interface is ineffectual. Do not use; no replacement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="49912ba1de6fbd5de094cb48143007a99622de08" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;startElement&lt;/code&gt; filter function may access or change the attributes for the Element. Changing Namespace declarations will have no effect on namespace resolution by the parser.</source>
          <target state="translated">&lt;code&gt;startElement&lt;/code&gt; フィルタ機能は、アクセスしたり、要素の属性を変更することがあります。名前空間宣言を変更しても、パーサーによる名前空間の解決には影響しません。</target>
        </trans-unit>
        <trans-unit id="f673ebe2d5c5810c50da61a00a4c5064ab7d452e" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;Dynamic MBean&lt;/em&gt; is an MBean that defines its management interface at run-time. For example, a configuration MBean could determine the names and types of the attributes it exposes by parsing an XML file.</source>
          <target state="translated">A &lt;em&gt;ダイナミックMBeanは&lt;/em&gt;、実行時にその管理インタフェースを定義するMBeanです。たとえば、構成MBeanは、XMLファイルを解析することにより、それが公開する属性の名前とタイプを判別できます。</target>
        </trans-unit>
        <trans-unit id="c1adf451901eb2b128ac5f178878235f9536b4ce" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;Model MBean&lt;/em&gt; is a kind of Dynamic MBean that acts as a bridge between the management interface and the underlying managed resource. Both the management interface and the managed resource are specified as Java objects. The same Model MBean implementation can be reused many times with different management interfaces and managed resources, and it can provide common functionality such as persistence and caching. Model MBeans are defined by the package &lt;a href=&quot;modelmbean/package-summary&quot;&gt;&lt;code&gt;
        javax.management.modelmbean&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">A &lt;em&gt;モデルMBeanは、&lt;/em&gt;管理インタフェースと基礎となる管理対象リソースの間のブリッジとして動作する動的なMBeanの一種です。管理インターフェースと管理対象リソースの両方がJavaオブジェクトとして指定されています。同じModel MBean実装は、さまざまな管理インターフェースや管理対象リソースで何度も再利用でき、永続化やキャッシングなどの一般的な機能を提供できます。モデルMBeanは、パッケージ&lt;a href=&quot;modelmbean/package-summary&quot;&gt; &lt;code&gt; javax.management.modelmbean&lt;/code&gt; で&lt;/a&gt;定義されています。</target>
        </trans-unit>
        <trans-unit id="38f817f1bc8c8c30eeb708b79191fff2439cfeee" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;URL context factory&lt;/em&gt; is a special ObjectFactory that creates contexts for resolving URLs or objects whose locations are specified by URLs. The &lt;code&gt;getObjectInstance()&lt;/code&gt; method of a URL context factory will obey the following rules.</source>
          <target state="translated">&lt;em&gt;URLコンテキストファクトリは、&lt;/em&gt; URLまたはURLが位置を指定するオブジェクトを解決するコンテキストを生成し、特殊なObjectFactoryをです。URLコンテキストファクトリの &lt;code&gt;getObjectInstance()&lt;/code&gt; メソッドは、次のルールに従います。</target>
        </trans-unit>
        <trans-unit id="0da0a069e013ab04293daef37d59dd3f72593cab" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;character&lt;/em&gt; is a symbol that represents an item such as a letter, a digit, or punctuation in an abstract way. For example, &lt;code&gt;'g'&lt;/code&gt;, LATIN SMALL LETTER G, is a character.</source>
          <target state="translated">&lt;em&gt;文字は&lt;/em&gt;、このような抽象的で、文字、数字、または句読点などのアイテムを表しているシンボルです。たとえば、 &lt;code&gt;'g'&lt;/code&gt; 、LATIN SMALL LETTERGは文字です。</target>
        </trans-unit>
        <trans-unit id="1b6020abc9bbd5b3b68dcf3dadb60c07aea04cbf" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;component&lt;/em&gt; is an object having a graphical representation that can be displayed on the screen and that can interact with the user.</source>
          <target state="translated">&lt;em&gt;コンポーネントは、&lt;/em&gt;画面上に表示することができ、それはユーザと対話できるグラフィカルな表現を有するオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="5981e4cabac85afb86636e08791d62135577cae2" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;component&lt;/em&gt; is an object having a graphical representation that can be displayed on the screen and that can interact with the user. Examples of components are the buttons, checkboxes, and scrollbars of a typical graphical user interface.</source>
          <target state="translated">&lt;em&gt;コンポーネントは、&lt;/em&gt;画面上に表示することができ、それはユーザと対話できるグラフィカルな表現を有するオブジェクトです。コンポーネントの例としては、一般的なグラフィカルユーザーインターフェイスのボタン、チェックボックス、スクロールバーがあります。</target>
        </trans-unit>
        <trans-unit id="bae7e79736ca0e41eec88bd1fbd34a7b4e497cc6" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;direct method handle&lt;/em&gt; represents a method, constructor, or field without any intervening argument bindings or other transformations. The method, constructor, or field referred to by a direct method handle is called its &lt;em&gt;underlying member&lt;/em&gt;. Direct method handles may be obtained in any of these ways:</source>
          <target state="translated">&lt;em&gt;直接法ハンドルは&lt;/em&gt;任意の介在引数バインディング又は他の変換なしの方法、コンストラクタ、またはフィールドを表します。直接メソッドハンドルによって参照されるメソッド、コンストラクタ、またはフィールドは、その&lt;em&gt;基礎となるメンバー&lt;/em&gt;と呼ばれます。直接メソッドハンドルは、次のいずれかの方法で取得できます。</target>
        </trans-unit>
        <trans-unit id="3208ea1e27927112df98fe1305517c6f41d8a6c7" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;glyph&lt;/em&gt; is a shape used to render a character or a sequence of characters. In simple writing systems, such as Latin, typically one glyph represents one character. In general, however, characters and glyphs do not have one-to-one correspondence. For example, the character '&amp;aacute;' LATIN SMALL LETTER A WITH ACUTE, can be represented by two glyphs: one for 'a' and one for '&amp;acute;'. On the other hand, the two-character string &quot;fi&quot; can be represented by a single glyph, an &quot;fi&quot; ligature. In complex writing systems, such as Arabic or the South and South-East Asian writing systems, the relationship between characters and glyphs can be more complicated and involve context-dependent selection of glyphs as well as glyph reordering. A font encapsulates the collection of glyphs needed to render a selected set of characters as well as the tables needed to map sequences of characters to corresponding sequences of glyphs.</source>
          <target state="translated">&lt;em&gt;グリフ&lt;/em&gt;文字または文字のシーケンスをレンダリングするために使用される形状です。ラテン語などの単純な書記体系では、通常、1つのグリフが1つの文字を表します。ただし、一般的に、文字とグリフは1対1で対応していません。たとえば、文字「&amp;aacute;」LATIN SMALL LETTER A WITH ACUTEは、「a」用と「 &amp;acute;」用の2つのグリフで表すことができます。一方、2文字の文字列「fi」は、単一のグリフである「fi」合字で表すことができます。アラビア語や南アジアおよび南東アジアの書記体系などの複雑な書記体系では、文字とグリフの関係がより複雑になり、文脈に応じたグリフの選択とグリフの並べ替えが必要になる場合があります。フォントは、選択した文字セットをレンダリングするために必要なグリフのコレクションと、文字のシーケンスを対応するグリフのシーケンスにマップするために必要なテーブルをカプセル化します。</target>
        </trans-unit>
        <trans-unit id="d8dacb0c0c5e3609e90253da2505ca498963c418" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;layout path&lt;/em&gt; originates from a &lt;em&gt;root&lt;/em&gt; layout (typically a group or a sequence layout) and terminates at a layout nested within the root layout - this is the layout &lt;em&gt;selected&lt;/em&gt; by the layout path. Layout paths are typically expressed as a sequence of one or more &lt;a href=&quot;memorylayout.pathelement&quot;&gt;&lt;code&gt;MemoryLayout.PathElement&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="23c977c205f5d1a10d0c80e98d23945f1f5b0892" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;lookup object&lt;/em&gt; is a factory for creating method handles, when the creation requires access checking.</source>
          <target state="translated">&lt;em&gt;検索対象は、&lt;/em&gt;作成がアクセス検査を必要とする場合、メソッドハンドルを作成するためのファクトリです。</target>
        </trans-unit>
        <trans-unit id="ec9f139bfeb4d7705debb706974cceb3ded9eaf5" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;lookup object&lt;/em&gt; is a factory for creating method handles, when the creation requires access checking. Method handles do not perform access checks when they are called, but rather when they are created. Therefore, method handle access restrictions must be enforced when a method handle is created. The caller class against which those restrictions are enforced is known as the &lt;a href=&quot;#lookupClass()&quot;&gt;lookup class&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;検索対象は、&lt;/em&gt;作成がアクセス検査を必要とする場合、メソッドハンドルを作成するためのファクトリです。メソッドハンドルは、呼び出されたときではなく、作成されたときにアクセスチェックを実行します。したがって、メソッドハンドルの作成時に、メソッドハンドルのアクセス制限を適用する必要があります。これらの制限が適用される呼び出し元クラスは、&lt;a href=&quot;#lookupClass()&quot;&gt;ルックアップクラス&lt;/a&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="22cf7fb007bf2d5fe1f35768641f433f636d2570" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;lookup object&lt;/em&gt; is a factory for creating method handles, when the creation requires access checking. Method handles do not perform access checks when they are called, but rather when they are created. Therefore, method handle access restrictions must be enforced when a method handle is created. The caller class against which those restrictions are enforced is known as the &lt;a href=&quot;methodhandles.lookup#lookupClass&quot;&gt;lookup class&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;検索対象は、&lt;/em&gt;作成がアクセス検査を必要とする場合、メソッドハンドルを作成するためのファクトリです。メソッドハンドルは、呼び出されたときにアクセスチェックを実行せず、作成時にアクセスチェックを実行します。したがって、メソッドハンドルを作成するときに、メソッドハンドルのアクセス制限を適用する必要があります。これらの制限が適用される呼び出し元クラスは、&lt;a href=&quot;methodhandles.lookup#lookupClass&quot;&gt;ルックアップクラス&lt;/a&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="03d5c0b02f91cd438ce51f0976c6a1b93c530e9a" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;mutable reduction operation&lt;/em&gt; accumulates input elements into a mutable result container, such as a &lt;code&gt;Collection&lt;/code&gt; or &lt;code&gt;StringBuilder&lt;/code&gt;, as it processes the elements in the stream.</source>
          <target state="translated">&lt;em&gt;可変リダクション演算は、&lt;/em&gt;など変更可能な結果容器へ入力要素を蓄積 &lt;code&gt;Collection&lt;/code&gt; または &lt;code&gt;StringBuilder&lt;/code&gt; のそれがストリーム内の要素を処理するように、。</target>
        </trans-unit>
        <trans-unit id="9e8fc7fd60302cc0d2d564d3cd78710e4bca9017" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;notification&lt;/em&gt; is an instance of the &lt;a href=&quot;notification&quot;&gt;&lt;code&gt;Notification&lt;/code&gt;&lt;/a&gt; class or a subclass. In addition to its Java class, it has a &lt;em&gt;type&lt;/em&gt; string that can distinguish it from other notifications of the same class.</source>
          <target state="translated">&lt;em&gt;通知&lt;/em&gt;のインスタンスである&lt;a href=&quot;notification&quot;&gt; &lt;code&gt;Notification&lt;/code&gt; &lt;/a&gt;クラスまたはサブクラス。そのJavaクラスに加えて、同じクラスの他の通知と区別できる&lt;em&gt;タイプ&lt;/em&gt;文字列があります。</target>
        </trans-unit>
        <trans-unit id="e9cd5e4185dd07b85f3d563a03ad8994c7f4c23a" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;package name&lt;/em&gt; is derived from the resource name. If the package name is a &lt;a href=&quot;#getPackages()&quot;&gt;package&lt;/a&gt; in the module then the resource can only be located by the caller of this method when the package is &lt;a href=&quot;#isOpen(java.lang.String,java.lang.Module)&quot;&gt;open&lt;/a&gt; to at least the caller's module. If the resource is not in a package in the module then the resource is not encapsulated.</source>
          <target state="translated">&lt;em&gt;パッケージ名は、&lt;/em&gt;リソース名に由来しています。パッケージ名がモジュール内の&lt;a href=&quot;#getPackages()&quot;&gt;パッケージ&lt;/a&gt;である場合、リソースは、パッケージが少なくとも呼び出し元のモジュールに対して&lt;a href=&quot;#isOpen(java.lang.String,java.lang.Module)&quot;&gt;開か&lt;/a&gt;れている場合にのみ、このメソッドの呼び出し元によって見つけることができます。リソースがモジュール内のパッケージにない場合、リソースはカプセル化されません。</target>
        </trans-unit>
        <trans-unit id="32d9b97aae32d5b323b7ea17ce070dd4e8295814" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;platform MBeanServer&lt;/em&gt; can be accessed with the &lt;a href=&quot;managementfactory#getPlatformMBeanServer()&quot;&gt;&lt;code&gt;getPlatformMBeanServer&lt;/code&gt;&lt;/a&gt; method. On the first call to this method, it creates the platform MBeanServer and registers all platform MXBeans including &lt;a href=&quot;platformmanagedobject&quot;&gt;platform MXBeans&lt;/a&gt;. Each platform MXBean is registered with a unique name defined in the specification of the management interface. This is a single MBeanServer that can be shared by different managed components running within the same Java virtual machine.</source>
          <target state="translated">&lt;em&gt;プラットフォームのMBeanServerを&lt;/em&gt;用いてアクセスすることができる&lt;a href=&quot;managementfactory#getPlatformMBeanServer()&quot;&gt; &lt;code&gt;getPlatformMBeanServer&lt;/code&gt; の&lt;/a&gt;方法。このメソッドの最初の呼び出し時に、それはプラットフォームのMBeanServerを作成し、を含むすべてのプラットフォームMXBean登録する&lt;a href=&quot;platformmanagedobject&quot;&gt;プラットフォームMXBeanを&lt;/a&gt;。各プラットフォームMXBeanは、管理インターフェースの仕様で定義された一意の名前で登録されます。これは、同じJava仮想マシン内で実行されているさまざまな管理対象コンポーネントで共有できる単一のMBeanServerです。</target>
        </trans-unit>
        <trans-unit id="21c81f57a687d236a9823553d443d7c7bfc4f429" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;platform MBeanServer&lt;/em&gt; can be accessed with the &lt;a href=&quot;managementfactory#getPlatformMBeanServer--&quot;&gt;&lt;code&gt;getPlatformMBeanServer&lt;/code&gt;&lt;/a&gt; method. On the first call to this method, it creates the platform MBeanServer and registers all platform MXBeans including &lt;a href=&quot;platformmanagedobject&quot;&gt;platform MXBeans&lt;/a&gt;. Each platform MXBean is registered with a unique name defined in the specification of the management interface. This is a single MBeanServer that can be shared by different managed components running within the same Java virtual machine.</source>
          <target state="translated">&lt;em&gt;プラットフォームのMBeanServerを&lt;/em&gt;用いてアクセスすることができる&lt;a href=&quot;managementfactory#getPlatformMBeanServer--&quot;&gt; &lt;code&gt;getPlatformMBeanServer&lt;/code&gt; の&lt;/a&gt;方法。このメソッドの最初の呼び出し時に、それはプラットフォームのMBeanServerを作成し、を含むすべてのプラットフォームMXBean登録する&lt;a href=&quot;platformmanagedobject&quot;&gt;プラットフォームMXBeanを&lt;/a&gt;。各プラットフォームMXBeanは、管理インターフェースの仕様で定義された一意の名前で登録されます。これは、同じJava仮想マシン内で実行されているさまざまな管理対象コンポーネントで共有できる単一のMBeanServerです。</target>
        </trans-unit>
        <trans-unit id="32bec0eef41ca07d26cedc2089260b4548d59027" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;provider package list&lt;/em&gt; is searched for as follows:</source>
          <target state="translated">&lt;em&gt;プロバイダパッケージリストは&lt;/em&gt;、次のように検索されます。</target>
        </trans-unit>
        <trans-unit id="75f53e336013d60a78f82431737bf11c8a71996a" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;proxy class&lt;/em&gt; is a class created at runtime that implements a specified list of interfaces, known as &lt;em&gt;proxy interfaces&lt;/em&gt;. A &lt;em&gt;proxy instance&lt;/em&gt; is an instance of a proxy class. Each proxy instance has an associated</source>
          <target state="translated">&lt;em&gt;プロキシクラスは、&lt;/em&gt;実行時に作成されたクラスであり、その実装として知られているインターフェースの指定されたリスト、&lt;em&gt;プロキシインターフェイス&lt;/em&gt;。&lt;em&gt;プロキシ・インスタンスは、&lt;/em&gt;プロキシクラスのインスタンスです。各プロキシインスタンスには、関連付けられた</target>
        </trans-unit>
        <trans-unit id="bbe2813a0b49a517a6994326f5bc65425bce7602" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;qualified&lt;/em&gt; element name is one that has its package name prepended to it, such as &lt;code&gt;java.lang.String&lt;/code&gt;. A non-qualified name has no package name, such as &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="385a385274a30bf632664dbb24d9c18b767194e2" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;quoted value&lt;/em&gt; consists of a quote (&lt;code&gt;&quot;&lt;/code&gt;), followed by a possibly empty string of characters, followed by another quote. Within the string of characters, the backslash (&lt;code&gt;\&lt;/code&gt;) has a special meaning. It must be followed by one of the following characters:</source>
          <target state="translated">&lt;em&gt;引用された値は、&lt;/em&gt;引用符（で構成され &lt;code&gt;&quot;&lt;/code&gt; 別の引用符に続く文字の文字列で、空が続く）、。文字の文字列内では、バックスラッシュ（ &lt;code&gt;\&lt;/code&gt; ）は特別な意味を持っている。それは、次のいずれかが続かなければなりませんキャラクター：</target>
        </trans-unit>
        <trans-unit id="ce63194cd7c0ea049812ae14373f43a626930e75" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;record class&lt;/em&gt; is a shallowly immutable, transparent carrier for a fixed set of values, called the &lt;em&gt;record components&lt;/em&gt;. The Java language provides concise syntax for declaring record classes, whereby the record components are declared in the record header. The list of record components declared in the record header form the &lt;em&gt;record descriptor&lt;/em&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5e671cc59a0e1a4f6c086eb387d26a321894a7fe" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;reduction&lt;/em&gt; operation (also called a &lt;em&gt;fold&lt;/em&gt;) takes a sequence of input elements and combines them into a single summary result by repeated application of a combining operation, such as finding the sum or maximum of a set of numbers, or accumulating elements into a list. The streams classes have multiple forms of general reduction operations, called &lt;a href=&quot;stream#reduce(java.util.function.BinaryOperator)&quot;&gt;&lt;code&gt;reduce()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stream#collect(java.util.stream.Collector)&quot;&gt;&lt;code&gt;collect()&lt;/code&gt;&lt;/a&gt;, as well as multiple specialized reduction forms such as &lt;a href=&quot;intstream#sum()&quot;&gt;&lt;code&gt;sum()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;intstream#max()&quot;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;intstream#count()&quot;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;還元&lt;/em&gt;（別名操作&lt;em&gt;倍&lt;/em&gt;）、このような数値の組の和又は最大値を見つけること、またはリスト内の要素を蓄積するように、結合操作を繰り返し適用することにより、単一の要約結果に入力要素とコンバインそれらの配列をとります。ストリームクラスには、&lt;a href=&quot;stream#reduce(java.util.function.BinaryOperator)&quot;&gt; &lt;code&gt;reduce()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;stream#collect(java.util.stream.Collector)&quot;&gt; &lt;code&gt;collect()&lt;/code&gt; &lt;/a&gt;（）と呼ばれる複数の形式の一般的な削減操作と、&lt;a href=&quot;intstream#sum()&quot;&gt; &lt;code&gt;sum()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;intstream#max()&quot;&gt; &lt;code&gt;max()&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;intstream#count()&quot;&gt; &lt;code&gt;count()&lt;/code&gt; &lt;/a&gt;などの複数の特殊な削減形式があります。</target>
        </trans-unit>
        <trans-unit id="881652b1aaf32556529fd976baa7d3f05a31e6a9" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;reduction&lt;/em&gt; operation (also called a &lt;em&gt;fold&lt;/em&gt;) takes a sequence of input elements and combines them into a single summary result by repeated application of a combining operation, such as finding the sum or maximum of a set of numbers, or accumulating elements into a list. The streams classes have multiple forms of general reduction operations, called &lt;a href=&quot;stream#reduce-java.util.function.BinaryOperator-&quot;&gt;&lt;code&gt;reduce()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;stream#collect-java.util.stream.Collector-&quot;&gt;&lt;code&gt;collect()&lt;/code&gt;&lt;/a&gt;, as well as multiple specialized reduction forms such as &lt;a href=&quot;intstream#sum--&quot;&gt;&lt;code&gt;sum()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;intstream#max--&quot;&gt;&lt;code&gt;max()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;intstream#count--&quot;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;em&gt;還元&lt;/em&gt;（別名操作&lt;em&gt;倍&lt;/em&gt;）、このような数値の組の和又は最大値を見つけること、またはリスト内の要素を蓄積するように、結合操作を繰り返し適用することにより、単一の要約結果に入力要素とコンバインそれらの配列をとります。ストリームクラスには、&lt;a href=&quot;stream#reduce-java.util.function.BinaryOperator-&quot;&gt; &lt;code&gt;reduce()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;stream#collect-java.util.stream.Collector-&quot;&gt; &lt;code&gt;collect()&lt;/code&gt; &lt;/a&gt;（）と呼ばれる一般的な削減操作の複数の形式と、&lt;a href=&quot;intstream#sum--&quot;&gt; &lt;code&gt;sum()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;intstream#max--&quot;&gt; &lt;code&gt;max()&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;intstream#count--&quot;&gt; &lt;code&gt;count()&lt;/code&gt; &lt;/a&gt;などの複数の特殊な削減形式があります。</target>
        </trans-unit>
        <trans-unit id="432755a5f675a231099e40d1fd01a3255d083a6a" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;reference object&lt;/em&gt; encapsulates a reference to some other object so that the reference itself may be examined and manipulated like any other object. Three types of reference objects are provided, each weaker than the last: &lt;em&gt;soft&lt;/em&gt;, &lt;em&gt;weak&lt;/em&gt;, and &lt;em&gt;phantom&lt;/em&gt;. Each type corresponds to a different level of reachability, as defined below. Soft references are for implementing memory-sensitive caches, weak references are for implementing canonicalizing mappings that do not prevent their keys (or values) from being reclaimed, and phantom references are for scheduling post-mortem cleanup actions. Post-mortem cleanup actions can be registered and managed by a &lt;a href=&quot;cleaner&quot;&gt;&lt;code&gt;Cleaner&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b091889df96c828d757f4c394d0df7407841cf1e" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;relation type&lt;/em&gt; defines a relationship between MBeans. It contains &lt;em&gt;roles&lt;/em&gt; that the MBeans play in the relationship. Usually there are at least two roles in a relation type.</source>
          <target state="translated">&lt;em&gt;関係型は、&lt;/em&gt; MBeanの間の関係を定義します。MBeanが関係で果たす&lt;em&gt;役割&lt;/em&gt;が含まれています。通常、関係タイプには少なくとも2つの役割があります。</target>
        </trans-unit>
        <trans-unit id="3899aa8cc676171703dc878529f50a9965979186" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;relation&lt;/em&gt; is a named instance of a relation type, where specific MBeans appear in the roles, represented by their &lt;a href=&quot;../objectname&quot;&gt;&lt;code&gt;ObjectName&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">&lt;em&gt;関係は、&lt;/em&gt;それらによって表される特定のMBeanは、ロールに表示される関係タイプの名前付きインスタンスで&lt;a href=&quot;../objectname&quot;&gt; &lt;code&gt;ObjectName&lt;/code&gt; &lt;/a&gt; S。</target>
        </trans-unit>
        <trans-unit id="1944d9900738e576ae4fce116ef62f21ef3a291b" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;run with respect to a set of attributes&lt;/em&gt; is a maximum text range for which this condition is met for each member attribute.</source>
          <target state="translated">&lt;em&gt;属性セットに対して実行は&lt;/em&gt;、この条件は、各メンバ属性に満たされているため、最大テキスト範囲です。</target>
        </trans-unit>
        <trans-unit id="0d67170b41f46f2a54ffcedc832e8521fdb9e0ee" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;run with respect to an attribute&lt;/em&gt; is a maximum text range for which:</source>
          <target state="translated">&lt;em&gt;属性について、ランの&lt;/em&gt;ための最大テキスト範囲です。</target>
        </trans-unit>
        <trans-unit id="60c63adbc71294c80ec9d80af6bef2584d4c4aee" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;short version string&lt;/em&gt;, &lt;code&gt;$SVSTR&lt;/code&gt;, often useful in less formal contexts, is a version number optionally followed by a pre-release identifier:</source>
          <target state="translated">&lt;em&gt;ショートバージョン文字列&lt;/em&gt;、 &lt;code&gt;$SVSTR&lt;/code&gt; 少ない正式な文脈でしばしば有用なのは、必要に応じてプレリリース識別子が続くバージョン番号です：</target>
        </trans-unit>
        <trans-unit id="77a55bad18ac56a1c3d3d180c828c330f121c52a" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;version number&lt;/em&gt;, &lt;code&gt;$VNUM&lt;/code&gt;, is a non-empty sequence of elements separated by period characters (U+002E). An element is either zero, or an unsigned integer numeral without leading zeros. The final element in a version number must not be zero. When an element is incremented, all subsequent elements are removed. The format is:</source>
          <target state="translated">&lt;em&gt;バージョン番号&lt;/em&gt;、 &lt;code&gt;$VNUM&lt;/code&gt; 、ピリオド文字（U + 002E）によって分離された要素の非空のシーケンスです。要素は、ゼロ、または先行ゼロのない符号なし整数のいずれかです。バージョン番号の最後の要素はゼロであってはなりません。要素がインクリメントされると、後続のすべての要素が削除されます。形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="33101b84457f2cfa1c154a19b48a4dd0fa91e421" translate="yes" xml:space="preserve">
          <source>A &lt;em&gt;version string&lt;/em&gt;, &lt;code&gt;$VSTR&lt;/code&gt;, is a version number &lt;code&gt;
 $VNUM&lt;/code&gt;, as described above, optionally followed by pre-release and build information, in one of the following formats:</source>
          <target state="translated">&lt;em&gt;バージョン文字列&lt;/em&gt;、 &lt;code&gt;$VSTR&lt;/code&gt; 、バージョン番号 &lt;code&gt; $VNUM&lt;/code&gt; 、必要に応じて以下のいずれかの形式で、プレリリースビルド情報続いて、上記のように：</target>
        </trans-unit>
        <trans-unit id="806b08b4e8ef62277d75b5f1cd9e89140a50a7ed" translate="yes" xml:space="preserve">
          <source>A Base64 decoder.</source>
          <target state="translated">Base64デコーダです。</target>
        </trans-unit>
        <trans-unit id="38879c33dc00c52c03ee4ebf16cfa8fb6c4bb7f9" translate="yes" xml:space="preserve">
          <source>A Base64 encoder.</source>
          <target state="translated">Base64エンコーダ。</target>
        </trans-unit>
        <trans-unit id="b1d103ec388aee5968f3ecd9fbbf62a0676958f3" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of PopupMenuSeparatorUI.</source>
          <target state="translated">PopupMenuSeparatorUIの基本的なL＆F実装。</target>
        </trans-unit>
        <trans-unit id="a86d915f23ab9abd7e1ab669cf1b1a5a6ff54905" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of PopupMenuSeparatorUI. This implementation is a &quot;combined&quot; view/controller.</source>
          <target state="translated">PopupMenuSeparatorUIの基本的なL＆F実装。この実装は、「結合された」ビュー/コントローラーです。</target>
        </trans-unit>
        <trans-unit id="a28fd96240d773873fb27e46761d229709bb9c0a" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of ProgressBarUI.</source>
          <target state="translated">ProgressBarUIの基本的なL＆F実装。</target>
        </trans-unit>
        <trans-unit id="ea44464426214cb4fc7af3ea4e86c9dc073e3a38" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of SeparatorUI.</source>
          <target state="translated">SeparatorUIの基本的なL＆F実装。</target>
        </trans-unit>
        <trans-unit id="524103230d8f4ce04e4ffb7374e6367e6d39a507" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of SeparatorUI. This implementation is a &quot;combined&quot; view/controller.</source>
          <target state="translated">SeparatorUIの基本的なL＆F実装。この実装は、「結合された」ビュー/コントローラーです。</target>
        </trans-unit>
        <trans-unit id="ffaab5953e723084e354c05d129bf2d7a5b06b11" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of SliderUI.</source>
          <target state="translated">SliderUIの基本的なL＆F実装。</target>
        </trans-unit>
        <trans-unit id="fc182b2e3b749f812e894997134470a6c903fc0a" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of TabbedPaneUI.</source>
          <target state="translated">TabbedPaneUIの基本的なL＆F実装。</target>
        </trans-unit>
        <trans-unit id="10e4474f1e0be2b51fad8c1cf90a852e079a90cb" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of ToolBarSeparatorUI.</source>
          <target state="translated">ToolBarSeparatorUIの基本的なL＆F実装。</target>
        </trans-unit>
        <trans-unit id="56378e91409286f49e40a5d1367e7f777761bfb4" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of ToolBarSeparatorUI. This implementation is a &quot;combined&quot; view/controller.</source>
          <target state="translated">ToolBarSeparatorUIの基本的なL＆F実装。この実装は、「結合された」ビュー/コントローラーです。</target>
        </trans-unit>
        <trans-unit id="0a99b8ac60388e481db78d72edd1c6637a14dca4" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of ToolBarUI.</source>
          <target state="translated">ToolBarUIの基本的なL＆F実装。</target>
        </trans-unit>
        <trans-unit id="8ecd154b65ab21887639b06d195787366a5c5e48" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of ToolBarUI. This implementation is a &quot;combined&quot; view/controller.</source>
          <target state="translated">ToolBarUIの基本的なL＆F実装。この実装は、「結合された」ビュー/コントローラーです。</target>
        </trans-unit>
        <trans-unit id="9cca53b343f4a7dc7eff79153a080da200c72690" translate="yes" xml:space="preserve">
          <source>A Basic L&amp;amp;F implementation of the SplitPaneUI.</source>
          <target state="translated">SplitPaneUIの基本的なL＆F実装。</target>
        </trans-unit>
        <trans-unit id="7effbb868774fa7201da24bfa7e98891f4622fad" translate="yes" xml:space="preserve">
          <source>A BasicAttributes instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify a single BasicAttributes instance should lock the object.</source>
          <target state="translated">BasicAttributes インスタンスは、同時多発的なマルチスレッド アクセスに対して同期化されていません。1つのBasicAttributesインスタンスにアクセスして変更しようとする複数のスレッドは、オブジェクトをロックしなければなりません。</target>
        </trans-unit>
        <trans-unit id="d9247c27ac2f78a7a463f4f28a7e2b80d016da76" translate="yes" xml:space="preserve">
          <source>A BeanContextServiceProvider implementor who wishes to provide explicit information about the services their bean may provide shall implement a BeanInfo class that implements this BeanInfo subinterface and provides explicit information about the methods, properties, events, etc, of their services.</source>
          <target state="translated">自分のBeanが提供するサービスについて明示的な情報を提供したいBeanContextServiceProvider実装者は,このBeanInfoサブインタフェースを実装し,自分のサービスのメソッド,プロパティ,イベントなどについて明示的な情報を提供するBeanInfoクラスを実装しなければならない。</target>
        </trans-unit>
        <trans-unit id="e8f23324906add1f310a590417b0abed83b70cce" translate="yes" xml:space="preserve">
          <source>A BeanDescriptor provides global information about a &quot;bean&quot;, including its Java class, its displayName, etc.</source>
          <target state="translated">BeanDescriptorは,Javaクラス,displayNameなどを含む &quot;Bean &quot;に関するグローバルな情報を提供します.</target>
        </trans-unit>
        <trans-unit id="21e115ffee0fc95123c0feadd52121e72a12c44f" translate="yes" xml:space="preserve">
          <source>A BeanInfo object describing the target bean.</source>
          <target state="translated">ターゲットBeanを記述するBeanInfoオブジェクト。</target>
        </trans-unit>
        <trans-unit id="6c41a3a1a268cf77e426b305da1dbb801de9ddc8" translate="yes" xml:space="preserve">
          <source>A Bidi object provides information on the bidirectional reordering of the text used to create it. This is required, for example, to properly display Arabic or Hebrew text. These languages are inherently mixed directional, as they order numbers from left-to-right while ordering most other text from right-to-left.</source>
          <target state="translated">Bidiオブジェクトは、それを作成するために使用されるテキストの双方向の並び替えに関する情報を提供します。これは、例えば、アラビア語やヘブライ語のテキストを適切に表示するために必要です。これらの言語は、数字を左から右に並べる一方で、他のほとんどのテキストを右から左に並べるため、本質的に混在した方向性を持っています。</target>
        </trans-unit>
        <trans-unit id="29e791cb5cdd134f853346aba38560632c6426be" translate="yes" xml:space="preserve">
          <source>A BinaryRefAddr consists of a type that describes the communication mechanism and an opaque buffer containing the address description specific to that communication mechanism. The format and interpretation of the address type and the contents of the opaque buffer are based on the agreement of three parties: the client that uses the address, the object/server that can be reached using the address, and the administrator or program that creates the address.</source>
          <target state="translated">BinaryRefAddr は、通信機構を記述する型と、その通信機構に固有のアドレス記述を格納した不透明バッファから構成される。アドレス型と不透明バッファの内容のフォーマットと解釈は、アドレスを使用するクライアント、アドレスを使用して到達可能なオブジェクト/サーバ、アドレスを作成する管理者またはプログラムの3者の合意に基づいています。</target>
        </trans-unit>
        <trans-unit id="39a6848d4b9b5cac97a7e4fd4b3cf19f03c74e59" translate="yes" xml:space="preserve">
          <source>A Binding instance is not synchronized against concurrent access by multiple threads. Threads that need to access a Binding concurrently should synchronize amongst themselves and provide the necessary locking.</source>
          <target state="translated">バインディングのインスタンスは、複数のスレッドによる同時アクセスに対しては同期化されません。バインディングに同時にアクセスする必要があるスレッドは、スレッド間で同期し、必要なロックを提供しなければなりません。</target>
        </trans-unit>
        <trans-unit id="359b87dbe2ac0cf833cd33e678422c1583e37741" translate="yes" xml:space="preserve">
          <source>A Border wrapper class which implements UIResource.</source>
          <target state="translated">UIResource を実装した Border ラッパークラス。</target>
        </trans-unit>
        <trans-unit id="d344d077cbfcb8283cabcc4f56252e81a35f735d" translate="yes" xml:space="preserve">
          <source>A Border wrapper class which implements UIResource. UI classes which set border properties should use this class to wrap any borders specified as defaults. This class delegates all method invocations to the Border &quot;delegate&quot; object specified at construction.</source>
          <target state="translated">UIResource を実装した Border ラッパークラスです。ボーダーのプロパティを設定する UI クラスは、デフォルトで指定されたボーダーをラップするためにこのクラスを使用する必要があります。このクラスは、すべてのメソッド呼び出しを、構築時に指定された Border &quot;delegate&quot; オブジェクトに委譲します。</target>
        </trans-unit>
        <trans-unit id="5fcf840c5e0ee43714bd210d1b1ab35679b18b25" translate="yes" xml:space="preserve">
          <source>A CannotProceedException instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify CannotProceedException should lock the object.</source>
          <target state="translated">CannotProceedException のインスタンスは、同時多発的なマルチスレッドアクセスに対して同期化されていません。CannotProceedException にアクセスして変更しようとする複数のスレッドは、オブジェクトをロックしなければなりません。</target>
        </trans-unit>
        <trans-unit id="3711f46200eab78ac34b47a9e818cad8ef3b5be1" translate="yes" xml:space="preserve">
          <source>A CardPermission with a name of &lt;code&gt;*&lt;/code&gt; applies to all card terminals. The actions string is a comma separated list of the actions listed below, or &lt;code&gt;*&lt;/code&gt; to signify &quot;all actions.&quot;</source>
          <target state="translated">&lt;code&gt;*&lt;/code&gt; という名前のCardPermissionは、すべてのカード端末に適用されます。アクション文字列は、以下にリストされているアクションのコンマ区切りのリスト、または「すべてのアクション」を示す &lt;code&gt;*&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a5d12e1e7f853f5acc75fbcaef13869cdd98ca0d" translate="yes" xml:space="preserve">
          <source>A Catalog Resolver that implements SAX &lt;a href=&quot;../../../org/xml/sax/entityresolver&quot;&gt;&lt;code&gt;EntityResolver&lt;/code&gt;&lt;/a&gt;, StAX &lt;a href=&quot;../stream/xmlresolver&quot;&gt;&lt;code&gt;XMLResolver&lt;/code&gt;&lt;/a&gt;, DOM LS &lt;a href=&quot;../../../org/w3c/dom/ls/lsresourceresolver&quot;&gt;&lt;code&gt;LSResourceResolver&lt;/code&gt;&lt;/a&gt; used by Schema Validation, and Transform &lt;a href=&quot;../transform/uriresolver&quot;&gt;&lt;code&gt;URIResolver&lt;/code&gt;&lt;/a&gt;, and resolves external references using catalogs.</source>
          <target state="translated">SAX &lt;a href=&quot;../../../org/xml/sax/entityresolver&quot;&gt; &lt;code&gt;EntityResolver&lt;/code&gt; &lt;/a&gt;、StAX &lt;a href=&quot;../stream/xmlresolver&quot;&gt; &lt;code&gt;XMLResolver&lt;/code&gt; &lt;/a&gt;、スキーマ検証で使用されるDOM LS &lt;a href=&quot;../../../org/w3c/dom/ls/lsresourceresolver&quot;&gt; &lt;code&gt;LSResourceResolver&lt;/code&gt; &lt;/a&gt;、およびTransform &lt;a href=&quot;../transform/uriresolver&quot;&gt; &lt;code&gt;URIResolver&lt;/code&gt; &lt;/a&gt;を実装し、カタログを使用して外部参照を解決するカタログリゾルバー。</target>
        </trans-unit>
        <trans-unit id="a13b428d65b18d206b5c9f6274e74e38bb8c6763" translate="yes" xml:space="preserve">
          <source>A CatalogFeatures instance can be created through its builder as illustrated in the following sample code:</source>
          <target state="translated">CatalogFeatures インスタンスは、次のサンプル・コードに示すように、ビルダーを使用して作成できます。</target>
        </trans-unit>
        <trans-unit id="bb4e740e5333b7ab4af49fd927ba5c0f79ed5bfd" translate="yes" xml:space="preserve">
          <source>A CipherInputStream is composed of an InputStream and a Cipher so that read() methods return data that are read in from the underlying InputStream but have been additionally processed by the Cipher.</source>
          <target state="translated">CipherInputStream は InputStream と Cipher から構成されており、 read()メソッドは基礎となる InputStream から読み込まれたデータを返しますが、Cipher によって追加処理されたデータを返します。</target>
        </trans-unit>
        <trans-unit id="605214ba078d3fc48b5059183bf76aec5c86bd39" translate="yes" xml:space="preserve">
          <source>A CipherInputStream is composed of an InputStream and a Cipher so that read() methods return data that are read in from the underlying InputStream but have been additionally processed by the Cipher. The Cipher must be fully initialized before being used by a CipherInputStream.</source>
          <target state="translated">CipherInputStream は InputStream と Cipher から構成されており、read()メソッドは基底の InputStream から読み込まれたデータを返しますが、そのデータは Cipher によって追加処理されています。CipherInputStream で使用する前に Cipher は完全に初期化されていなければなりません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
