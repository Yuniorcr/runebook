<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="openjdk">
    <body>
      <group id="openjdk">
        <trans-unit id="f39034bf48af4a2a7e0007af959e946b8879dbb4" translate="yes" xml:space="preserve">
          <source>AppReopenedListener</source>
          <target state="translated">AppReopenedListener</target>
        </trans-unit>
        <trans-unit id="9873539fcb88f7ee0879938f9466d38e937cdb68" translate="yes" xml:space="preserve">
          <source>Append the result of the parse operation as children of the context node.</source>
          <target state="translated">パース操作の結果をコンテキスト・ノードの子として追加します。</target>
        </trans-unit>
        <trans-unit id="15c56a67e3dda4c7838f309123141818a20ad999" translate="yes" xml:space="preserve">
          <source>Append the result of the parse operation as children of the context node. For this action to work, the context node must be an &lt;code&gt;Element&lt;/code&gt; or a &lt;code&gt;DocumentFragment&lt;/code&gt;.</source>
          <target state="translated">解析操作の結果をコンテキストノードの子として追加します。このアクションが機能するには、コンテキストノードが &lt;code&gt;Element&lt;/code&gt; または &lt;code&gt;DocumentFragment&lt;/code&gt; である必要があります。</target>
        </trans-unit>
        <trans-unit id="a31784e9c8345c607c1c12178975f37bc948add9" translate="yes" xml:space="preserve">
          <source>Append the string to the end of the character data of the node.</source>
          <target state="translated">ノードの文字データの末尾に文字列を追加します。</target>
        </trans-unit>
        <trans-unit id="3917518f5c9fea6b1131ac35ce9e11bb2cc20d36" translate="yes" xml:space="preserve">
          <source>Append the string to the end of the character data of the node. Upon success, &lt;code&gt;data&lt;/code&gt; provides access to the concatenation of &lt;code&gt;data&lt;/code&gt; and the &lt;code&gt;DOMString&lt;/code&gt; specified.</source>
          <target state="translated">ノードの文字データの末尾に文字列を追加します。成功すると、 &lt;code&gt;data&lt;/code&gt; は、指定された &lt;code&gt;data&lt;/code&gt; と &lt;code&gt;DOMString&lt;/code&gt; の連結へのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="e96335f31dca923971fca83bb7d266b9f6649b68" translate="yes" xml:space="preserve">
          <source>Appendable</source>
          <target state="translated">Appendable</target>
        </trans-unit>
        <trans-unit id="11a860f1c6b7689ad6a213a9174bafe276cbd0d1" translate="yes" xml:space="preserve">
          <source>Appendable.append()</source>
          <target state="translated">Appendable.append()</target>
        </trans-unit>
        <trans-unit id="d53172897c9eb8037d26348365a16f64403f724a" translate="yes" xml:space="preserve">
          <source>Appendables are not necessarily safe for multithreaded access. Thread safety is the responsibility of classes that extend and implement this interface.</source>
          <target state="translated">アペンドブルは必ずしもマルチスレッドアクセスが安全とは限りません。スレッドの安全性は、このインターフェイスを拡張して実装するクラスの責任です。</target>
        </trans-unit>
        <trans-unit id="b09231380953cd773284db8286106f113bc2ca0e" translate="yes" xml:space="preserve">
          <source>Appends &lt;code&gt;aColumn&lt;/code&gt; to the end of the &lt;code&gt;tableColumns&lt;/code&gt; array.</source>
          <target state="translated">&lt;code&gt;tableColumns&lt;/code&gt; 配列の最後に &lt;code&gt;aColumn&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="1688fd5bea0983b4b83dfd3baaa4d7720e1d952d" translate="yes" xml:space="preserve">
          <source>Appends &lt;code&gt;aColumn&lt;/code&gt; to the end of the &lt;code&gt;tableColumns&lt;/code&gt; array. This method also posts the &lt;code&gt;columnAdded&lt;/code&gt; event to its listeners.</source>
          <target state="translated">&lt;code&gt;tableColumns&lt;/code&gt; 配列の最後に &lt;code&gt;aColumn&lt;/code&gt; を追加します。このメソッドは、 &lt;code&gt;columnAdded&lt;/code&gt; イベントもリスナーに送信します。</target>
        </trans-unit>
        <trans-unit id="476900224e8db0b4b4f41494325e92b48ca6273c" translate="yes" xml:space="preserve">
          <source>Appends &lt;code&gt;aColumn&lt;/code&gt; to the end of the &lt;code&gt;tableColumns&lt;/code&gt; array. This method posts a &lt;code&gt;columnAdded&lt;/code&gt; event to its listeners.</source>
          <target state="translated">&lt;code&gt;tableColumns&lt;/code&gt; 配列の最後に &lt;code&gt;aColumn&lt;/code&gt; を追加します。このメソッドは、 &lt;code&gt;columnAdded&lt;/code&gt; イベントをリスナーに送信します。</target>
        </trans-unit>
        <trans-unit id="ac2e41223a5c3cc2e0a60d340e62a21e0747258e" translate="yes" xml:space="preserve">
          <source>Appends &lt;code&gt;aColumn&lt;/code&gt; to the end of the array of columns held by this &lt;code&gt;JTable&lt;/code&gt;'s column model.</source>
          <target state="translated">この &lt;code&gt;JTable&lt;/code&gt; の列モデルが保持する列の配列の最後に &lt;code&gt;aColumn&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="f157f9c6e2ae9b0e021c2ef3135d57f3d7e45417" translate="yes" xml:space="preserve">
          <source>Appends &lt;code&gt;aColumn&lt;/code&gt; to the end of the array of columns held by this &lt;code&gt;JTable&lt;/code&gt;'s column model. If the column name of &lt;code&gt;aColumn&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, sets the column name of &lt;code&gt;aColumn&lt;/code&gt; to the name returned by &lt;code&gt;getModel().getColumnName()&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;JTable&lt;/code&gt; の列モデルが保持する列の配列の最後に &lt;code&gt;aColumn&lt;/code&gt; を追加します。列名場合 &lt;code&gt;aColumn&lt;/code&gt; がある &lt;code&gt;null&lt;/code&gt; の列名に設定 &lt;code&gt;aColumn&lt;/code&gt; を返す名前を &lt;code&gt;getModel().getColumnName()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b3567a175fb0562baf41d927b02a10bc057a7dc2" translate="yes" xml:space="preserve">
          <source>Appends &lt;code&gt;numPages&lt;/code&gt; pages to the end of this &lt;code&gt;Book&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Book&lt;/code&gt; の最後に &lt;code&gt;numPages&lt;/code&gt; ページを追加します。</target>
        </trans-unit>
        <trans-unit id="d963ea9ab0cdb9378e2ac779b39f6651a5f9f417" translate="yes" xml:space="preserve">
          <source>Appends &lt;code&gt;numPages&lt;/code&gt; pages to the end of this &lt;code&gt;Book&lt;/code&gt;. Each of the pages is associated with &lt;code&gt;page&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Book&lt;/code&gt; の最後に &lt;code&gt;numPages&lt;/code&gt; ページを追加します。各ページはページに関連付けられてい &lt;code&gt;page&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8f98fb3d99eb6387339869d14cad794715865769" translate="yes" xml:space="preserve">
          <source>Appends a character literal to the formatter.</source>
          <target state="translated">文字リテラルをフォーマッタに追加します。</target>
        </trans-unit>
        <trans-unit id="6077317e32c454c82c629234a15fe3257661a4b8" translate="yes" xml:space="preserve">
          <source>Appends a complete image stream consisting of a single image with default metadata and thumbnails to the output.</source>
          <target state="translated">デフォルトのメタデータとサムネイルを持つ単一の画像からなる完全な画像ストリームを出力に追加します。</target>
        </trans-unit>
        <trans-unit id="281820819f429504ff3a6174eb989801d1b94191" translate="yes" xml:space="preserve">
          <source>Appends a complete image stream consisting of a single image with default metadata and thumbnails to the output. This method is a shorthand for &lt;code&gt;write(null, new IIOImage(image, null, null), null)&lt;/code&gt;.</source>
          <target state="translated">デフォルトのメタデータとサムネイルを持つ単一の画像で構成される完全な画像ストリームを出力に追加します。このメソッドは、 &lt;code&gt;write(null, new IIOImage(image, null, null), null)&lt;/code&gt; 省略形です。</target>
        </trans-unit>
        <trans-unit id="b394e8311dbe84884c0c6a05ef5d485f0b50e3f4" translate="yes" xml:space="preserve">
          <source>Appends a complete image stream containing a single image and associated stream and image metadata and thumbnails to the output.</source>
          <target state="translated">1枚の画像とそれに関連するストリーム、画像のメタデータとサムネイルを含む完全な画像ストリームを出力に追加します。</target>
        </trans-unit>
        <trans-unit id="082ed2fbeb6ea36a03039ae30cc1f13d37c03cf6" translate="yes" xml:space="preserve">
          <source>Appends a complete image stream containing a single image and associated stream and image metadata and thumbnails to the output. Any necessary header information is included. If the output is an &lt;code&gt;ImageOutputStream&lt;/code&gt;, its existing contents prior to the current seek position are not affected, and need not be readable or writable.</source>
          <target state="translated">単一の画像と関連するストリームを含む完全な画像ストリーム、および画像メタデータとサムネイルを出力に追加します。必要なヘッダー情報が含まれています。出力が &lt;code&gt;ImageOutputStream&lt;/code&gt; の場合、現在のシーク位置より前の既存のコンテンツは影響を受けないため、読み取りまたは書き込み可能である必要はありません。</target>
        </trans-unit>
        <trans-unit id="0bc06e5906435d3b2053668b21081e0932a459aa" translate="yes" xml:space="preserve">
          <source>Appends a complete image stream containing a single image with default metadata and thumbnails to the output.</source>
          <target state="translated">デフォルトのメタデータとサムネイルを含む単一の画像を含む完全な画像ストリームを出力に追加します。</target>
        </trans-unit>
        <trans-unit id="18ebb8ee6ccf16d140e00b450c04c71131d11a2b" translate="yes" xml:space="preserve">
          <source>Appends a complete image stream containing a single image with default metadata and thumbnails to the output. This method is a shorthand for &lt;code&gt;write(null, image, null)&lt;/code&gt;.</source>
          <target state="translated">デフォルトのメタデータとサムネイルを含む単一の画像を含む完全な画像ストリームを出力に追加します。このメソッドは、 &lt;code&gt;write(null, image, null)&lt;/code&gt; 省略形です。</target>
        </trans-unit>
        <trans-unit id="a941db26292911f29d227015e8b2cb9bcadbb060" translate="yes" xml:space="preserve">
          <source>Appends a component to the end of this menu.</source>
          <target state="translated">このメニューの最後にコンポーネントを追加します。</target>
        </trans-unit>
        <trans-unit id="808ac411923619c4b90b8bd0ac2575ed6da65d24" translate="yes" xml:space="preserve">
          <source>Appends a component to the end of this menu. Returns the component added.</source>
          <target state="translated">このメニューの最後にコンポーネントを追加します。追加したコンポーネントを返します。</target>
        </trans-unit>
        <trans-unit id="abca56478705acafda5962bca0f06124d244612d" translate="yes" xml:space="preserve">
          <source>Appends a default value for a field to the formatter for use in parsing.</source>
          <target state="translated">解析で使用するために、フィールドのデフォルト値をフォーマッタに追加します。</target>
        </trans-unit>
        <trans-unit id="6d0408587bdab66748506d5ccffef80210dda614" translate="yes" xml:space="preserve">
          <source>Appends a formatter to the builder which will optionally format/parse.</source>
          <target state="translated">ビルダーにフォーマッタを追加し、オプションでフォーマット/パースを行います。</target>
        </trans-unit>
        <trans-unit id="bb68160d57d05f66cb98ca9aaf61f00cc94fc06a" translate="yes" xml:space="preserve">
          <source>Appends a localized date-time pattern to the formatter.</source>
          <target state="translated">局所化された日時パターンをフォーマッタに追加します。</target>
        </trans-unit>
        <trans-unit id="1217504978e2795be7500740649dfe70a7b13e32" translate="yes" xml:space="preserve">
          <source>Appends a menu item to the end of this menu.</source>
          <target state="translated">メニューの最後にメニュー項目を追加します。</target>
        </trans-unit>
        <trans-unit id="b4b3ed5abd41c4c60aeac7fd96fdd7ac2b4c42c8" translate="yes" xml:space="preserve">
          <source>Appends a menu item to the end of this menu. Returns the menu item added.</source>
          <target state="translated">このメニューの最後にメニュー項目を追加します。追加したメニュー項目を返します。</target>
        </trans-unit>
        <trans-unit id="69a66bcc78d7ab6960539eb87b2e7c284c5faf97" translate="yes" xml:space="preserve">
          <source>Appends a new menu item to the end of the menu which dispatches the specified &lt;code&gt;Action&lt;/code&gt; object.</source>
          <target state="translated">指定された &lt;code&gt;Action&lt;/code&gt; オブジェクトをディスパッチするメニューの最後に新しいメニュー項目を追加します。</target>
        </trans-unit>
        <trans-unit id="a2e9e468420caf2ebccb84f1a57d9ce3d161a486" translate="yes" xml:space="preserve">
          <source>Appends a new separator at the end of the menu.</source>
          <target state="translated">メニューの最後に新しい区切り文字を追加します。</target>
        </trans-unit>
        <trans-unit id="b19f1cad37d90822685ed81c99d8cf72dabc9b8d" translate="yes" xml:space="preserve">
          <source>Appends a new separator to the end of the menu.</source>
          <target state="translated">メニューの最後に新しい区切り文字を追加します。</target>
        </trans-unit>
        <trans-unit id="d2ecd751a6b29f51496d9df2f46576cc0ad6758f" translate="yes" xml:space="preserve">
          <source>Appends a separator of a specified size to the end of the tool bar.</source>
          <target state="translated">指定したサイズのセパレータをツールバーの端に追加します。</target>
        </trans-unit>
        <trans-unit id="5e0b21445319456c84c04eb01921af34bb5d2f57" translate="yes" xml:space="preserve">
          <source>Appends a separator of default size to the end of the tool bar.</source>
          <target state="translated">ツールバーの最後にデフォルトサイズのセパレータを追加します。</target>
        </trans-unit>
        <trans-unit id="6d55718779625090d2139598847a3396a06b2336" translate="yes" xml:space="preserve">
          <source>Appends a separator of default size to the end of the tool bar. The default size is determined by the current look and feel.</source>
          <target state="translated">ツールバーの最後にデフォルトサイズのセパレータを追加します。デフォルトのサイズは、現在のルックアンドフィールによって決定されます。</target>
        </trans-unit>
        <trans-unit id="c23cc498bc3000b0c783d67f3bcbeae4de95b95e" translate="yes" xml:space="preserve">
          <source>Appends a single child view.</source>
          <target state="translated">単一の子ビューを追加します。</target>
        </trans-unit>
        <trans-unit id="cd121f6528c5a509555f199c51d3705ccdc31c89" translate="yes" xml:space="preserve">
          <source>Appends a single child view. This is a convenience call to &lt;code&gt;replace&lt;/code&gt;.</source>
          <target state="translated">単一の子ビューを追加します。これは、を &lt;code&gt;replace&lt;/code&gt; 便利な呼び出しです。</target>
        </trans-unit>
        <trans-unit id="f928a001c97be018da4b9e617c36c02b4a7c574b" translate="yes" xml:space="preserve">
          <source>Appends a single image and possibly associated metadata and thumbnails, to the output.</source>
          <target state="translated">1枚の画像と、関連するメタデータやサムネイルを出力に追加します。</target>
        </trans-unit>
        <trans-unit id="7246f1a135cf1661873c64195d4d1ddf2e277ebc" translate="yes" xml:space="preserve">
          <source>Appends a single image and possibly associated metadata and thumbnails, to the output. If the output is an &lt;code&gt;ImageOutputStream&lt;/code&gt;, the existing contents of the output prior to the current seek position may be flushed, and need not be readable or writable, unless the plug-in needs to be able to patch up the header information when &lt;code&gt;endWriteSequence&lt;/code&gt; is called (</source>
          <target state="translated">単一の画像と関連するメタデータとサムネイルを出力に追加します。出力が &lt;code&gt;ImageOutputStream&lt;/code&gt; である場合、 &lt;code&gt;endWriteSequence&lt;/code&gt; が呼び出されたときにプラグインがヘッダー情報にパッチを適用できる必要がない限り、現在のシーク位置の前の出力の既存のコンテンツはフラッシュされる可能性があり、読み取りまたは書き込み可能である必要はありません。（</target>
        </trans-unit>
        <trans-unit id="1f5864b4be5e5e7f2cf21d57d680ea8ccba362f9" translate="yes" xml:space="preserve">
          <source>Appends a single page to the end of this &lt;code&gt;Book&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Book&lt;/code&gt; の最後に1ページを追加します。</target>
        </trans-unit>
        <trans-unit id="32d3b6c48828d9d8a5d3b4841f37611b121fbd03" translate="yes" xml:space="preserve">
          <source>Appends a string literal to the formatter.</source>
          <target state="translated">文字列リテラルをフォーマッタに追加します。</target>
        </trans-unit>
        <trans-unit id="f3de7accc40cc007982752ee97a632514266c812" translate="yes" xml:space="preserve">
          <source>Appends a subsequence of the specified &lt;code&gt;CharSequence&lt;/code&gt; to this sequence.</source>
          <target state="translated">指定された &lt;code&gt;CharSequence&lt;/code&gt; のサブシーケンスをこのシーケンスに追加します。</target>
        </trans-unit>
        <trans-unit id="0e356f7ac511797cc61434da9df3dfdcd3a70dd3" translate="yes" xml:space="preserve">
          <source>Appends a subsequence of the specified character sequence to this &lt;code&gt;Appendable&lt;/code&gt;.</source>
          <target state="translated">指定された文字シーケンスのサブシーケンスをこの &lt;code&gt;Appendable&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="7befa15893242af110648efcab30eacc7923163f" translate="yes" xml:space="preserve">
          <source>Appends a subsequence of the specified character sequence to this buffer</source>
          <target state="translated">指定された文字列の一部をこのバッファに追加します。</target>
        </trans-unit>
        <trans-unit id="c3cf7e5ef845ab525de4a8d21ed77f112d2fe332" translate="yes" xml:space="preserve">
          <source>Appends a subsequence of the specified character sequence to this output stream.</source>
          <target state="translated">指定された文字列の一部をこの出力ストリームに追加します。</target>
        </trans-unit>
        <trans-unit id="f81662094bc46ddeeaa6f7e0f83ca0ae28c7e885" translate="yes" xml:space="preserve">
          <source>Appends a subsequence of the specified character sequence to this writer.</source>
          <target state="translated">指定された文字列の一部をこのライタに追加します。</target>
        </trans-unit>
        <trans-unit id="277fcdbc9374c81d3075ff361cb702c1a8a0e406" translate="yes" xml:space="preserve">
          <source>Appends a subsequence of the specified character sequence to this writer. &lt;code&gt;Appendable&lt;/code&gt;.</source>
          <target state="translated">指定された文字シーケンスのサブシーケンスをこのライターに追加します。 &lt;code&gt;Appendable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="201900c26f23aec90ffceb602d72d0077dd68d68" translate="yes" xml:space="preserve">
          <source>Appends all of the elements in the specified Collection to the end of this Vector, in the order that they are returned by the specified Collection's Iterator.</source>
          <target state="translated">指定されたコレクションのすべての要素を、指定されたコレクションの Iterator が返す順に、この Vector の末尾に追加します。</target>
        </trans-unit>
        <trans-unit id="0574c7f0a86f5650f0f8ef583a0603eae42daad2" translate="yes" xml:space="preserve">
          <source>Appends all of the elements in the specified Collection to the end of this Vector, in the order that they are returned by the specified Collection's Iterator. The behavior of this operation is undefined if the specified Collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified Collection is this Vector, and this Vector is nonempty.)</source>
          <target state="translated">指定された Collection のすべての要素を、指定された Collection の Iterator が返す順に、この Vector の末尾に追加します。この操作の実行中に指定された Collection が変更された場合、この操作の動作は未定義です。(これは、指定された Collection がこの Vector であり、この Vector が空でない場合、この呼び出しの動作は未定義であることを意味します)。</target>
        </trans-unit>
        <trans-unit id="bb43596870d59b0e0d3cf29a0529c953b660e5d6" translate="yes" xml:space="preserve">
          <source>Appends all of the elements in the specified collection that are not already contained in this list, to the end of this list, in the order that they are returned by the specified collection's iterator.</source>
          <target state="translated">指定されたコレクションの要素のうち、このリストにまだ含まれていないものをすべて、指定されたコレクションのイテレータによって返された順に、このリストの最後に追加します。</target>
        </trans-unit>
        <trans-unit id="aea405c8cb63d25bc7f6636c9d53ff5bac903ed1" translate="yes" xml:space="preserve">
          <source>Appends all of the elements in the specified collection to the end of this deque, in the order that they are returned by the specified collection's iterator.</source>
          <target state="translated">指定されたコレクションのすべての要素を、指定されたコレクションのイテレータが返す順に、このdequeの最後に追加します。</target>
        </trans-unit>
        <trans-unit id="dcda93a6791cda5e9c4f7954cfea2259b46bfd83" translate="yes" xml:space="preserve">
          <source>Appends all of the elements in the specified collection to the end of this deque, in the order that they are returned by the specified collection's iterator. Attempts to &lt;code&gt;addAll&lt;/code&gt; of a deque to itself result in &lt;code&gt;IllegalArgumentException&lt;/code&gt;.</source>
          <target state="translated">指定されたコレクションのすべての要素を、指定されたコレクションの反復子によって返される順序で、この両端キューの最後に追加します。両端キューの &lt;code&gt;addAll&lt;/code&gt; をそれ自体に追加しようとすると、 &lt;code&gt;IllegalArgumentException&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="d4d846522feb2c1927702595ce16b699ee76751f" translate="yes" xml:space="preserve">
          <source>Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator.</source>
          <target state="translated">指定したコレクションのすべての要素を、指定したコレクションの Iterator から返された順にリストの末尾に追加します。</target>
        </trans-unit>
        <trans-unit id="397d3730ee19812406d353adf8610e6cd03599c1" translate="yes" xml:space="preserve">
          <source>Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's Iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified collection is this list, and this list is nonempty.)</source>
          <target state="translated">指定されたコレクション内のすべての要素を、指定されたコレクションの Iterator から返された順に、このリストの末尾に追加します。この操作の実行中に指定されたコレクションが変更された場合、この操作の動作は未定義です (このことは、指定されたコレクションの Iterator によって返された順にこのリストの最後に要素を追加することを意味します)。(これは、指定されたコレクションがこのリストであり、このリストが空ではない場合、この呼び出しの動作は未定義であることを意味します)。</target>
        </trans-unit>
        <trans-unit id="c17ff44c3173f7dfe8e30253d0f04ed6b1630484" translate="yes" xml:space="preserve">
          <source>Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation).</source>
          <target state="translated">指定されたコレクションのすべての要素を、指定されたコレクションのイテレータによって返された順に、このリストの最後に追加します(オプションの操作)。</target>
        </trans-unit>
        <trans-unit id="95d62f71c6304dbb7e65e70d817dc7c858d790ce" translate="yes" xml:space="preserve">
          <source>Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation). The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.)</source>
          <target state="translated">指定されたコレクション内のすべての要素を、指定されたコレクションのイテレータによって返された順に、このリストの末尾に追加します(オプションの操作)。この操作の実行中に指定されたコレクションが変更された場合、この操作の動作は不定です。(指定されたコレクションがこのリストであり、それが空でない場合に発生することに注意してください)。</target>
        </trans-unit>
        <trans-unit id="849f59f09a7e7d4b1d5f159fb019f744f182b6f2" translate="yes" xml:space="preserve">
          <source>Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator.</source>
          <target state="translated">指定されたコレクションのすべての要素を、指定されたコレクションのイテレータによって返された順に、このリストの最後に追加します。</target>
        </trans-unit>
        <trans-unit id="50dc125948b2483e5ca1254bc5728d97989acc9b" translate="yes" xml:space="preserve">
          <source>Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.)</source>
          <target state="translated">指定されたコレクションのすべての要素を、指定されたコレクションのイテレータによって返された順に、このリストの末尾に追加します。この操作の実行中に指定されたコレクションが変更された場合、この操作の動作は不定です。(指定されたコレクションがこのリストであり、それが空でない場合に発生することに注意してください)。</target>
        </trans-unit>
        <trans-unit id="b2e8ea05b088e4e262c2838e587c14ebed395923" translate="yes" xml:space="preserve">
          <source>Appends all of the elements in the specified collection to the end of this queue, in the order that they are returned by the specified collection's iterator.</source>
          <target state="translated">指定されたコレクションのすべての要素を、指定されたコレクションのイテレータによって返された順に、このキューの最後に追加します。</target>
        </trans-unit>
        <trans-unit id="fc09be9b9a0a1d52de670a92bd12013c7ad6f7f3" translate="yes" xml:space="preserve">
          <source>Appends all of the elements in the specified collection to the end of this queue, in the order that they are returned by the specified collection's iterator. Attempts to &lt;code&gt;addAll&lt;/code&gt; of a queue to itself result in &lt;code&gt;IllegalArgumentException&lt;/code&gt;.</source>
          <target state="translated">指定されたコレクションのすべての要素を、指定されたコレクションの反復子によって返される順序で、このキューの最後に追加します。キューの &lt;code&gt;addAll&lt;/code&gt; を自分自身に追加しようとすると、 &lt;code&gt;IllegalArgumentException&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="9fe0cf973e8832dacac57cf537cd2dab762e757b" translate="yes" xml:space="preserve">
          <source>Appends all the elements in the &lt;code&gt;AttributeList&lt;/code&gt; specified to the end of the list, in the order in which they are returned by the Iterator of the &lt;code&gt;AttributeList&lt;/code&gt; specified.</source>
          <target state="translated">アペンド内のすべての要素 &lt;code&gt;AttributeList&lt;/code&gt; それらがの反復子によって返される順番で、リストの末尾に指定され &lt;code&gt;AttributeList&lt;/code&gt; 指定しました。</target>
        </trans-unit>
        <trans-unit id="c7ac69fdd545a8295e9282388ba7c224995c8342" translate="yes" xml:space="preserve">
          <source>Appends all the elements in the RoleList specified to the end of the list, in the order in which they are returned by the Iterator of the RoleList specified.</source>
          <target state="translated">指定された RoleList のすべての要素を、指定された RoleList の Iterator が返す順番でリストの最後に追加します。</target>
        </trans-unit>
        <trans-unit id="b6eae929bd5fa510fc8fc2b75f2780993eb58230" translate="yes" xml:space="preserve">
          <source>Appends all the elements in the RoleUnresolvedList specified to the end of the list, in the order in which they are returned by the Iterator of the RoleUnresolvedList specified.</source>
          <target state="translated">指定された RoleUnresolvedList のすべての要素を、指定された RoleUnresolvedList の Iterator が返す順序でリストの末尾に追加します。</target>
        </trans-unit>
        <trans-unit id="45f1980f0df46580be48f61880766db0755d50d9" translate="yes" xml:space="preserve">
          <source>Appends all the elements of a formatter to the builder.</source>
          <target state="translated">フォーマッタのすべての要素をビルダに追加します。</target>
        </trans-unit>
        <trans-unit id="31b641689af075ef5c48a0639be6ca8ac79d50a2" translate="yes" xml:space="preserve">
          <source>Appends an instant using ISO-8601 to the formatter with control over the number of fractional digits.</source>
          <target state="translated">ISO-8601を使用して、小数点以下の桁数を制御してフォーマッタに瞬間を追加します。</target>
        </trans-unit>
        <trans-unit id="57800dac739f3809ff175f6143b1b045f21851d4" translate="yes" xml:space="preserve">
          <source>Appends an instant using ISO-8601 to the formatter, formatting fractional digits in groups of three.</source>
          <target state="translated">ISO-8601を使用した瞬間をフォーマッタに追加し、3つのグループに分けて小数点以下の数字をフォーマットします。</target>
        </trans-unit>
        <trans-unit id="b8b255024c76d062ff8b118ac6eca861d7631194" translate="yes" xml:space="preserve">
          <source>Appends the chronology ID, such as 'ISO' or 'ThaiBuddhist', to the formatter.</source>
          <target state="translated">ISO」や「ThaiBuddhist」などのクロノロジーIDをフォーマッタに追加します。</target>
        </trans-unit>
        <trans-unit id="37cdd5a8434d4d4e821fd8cc820f46ad90144d63" translate="yes" xml:space="preserve">
          <source>Appends the chronology name to the formatter.</source>
          <target state="translated">フォーマッタに年表名を追加します。</target>
        </trans-unit>
        <trans-unit id="0c71eddcbc6b0d34240cdfe59e9946e4d6649e1f" translate="yes" xml:space="preserve">
          <source>Appends the element, if not present.</source>
          <target state="translated">要素が存在しない場合は追加します。</target>
        </trans-unit>
        <trans-unit id="6b894f08dc1016bbdc27bc779c7964129fbe006d" translate="yes" xml:space="preserve">
          <source>Appends the elements defined by the specified pattern to the builder.</source>
          <target state="translated">指定されたパターンで定義された要素をビルダに追加します。</target>
        </trans-unit>
        <trans-unit id="e38b63f8db7af830809ba065e424033c6009df43" translate="yes" xml:space="preserve">
          <source>Appends the fractional value of a date-time field to the formatter.</source>
          <target state="translated">日付時間フィールドの端数値をフォーマッタに追加します。</target>
        </trans-unit>
        <trans-unit id="ca79df163842e89277b503f9e16670dc70a94ee7" translate="yes" xml:space="preserve">
          <source>Appends the generic time-zone name, such as 'Pacific Time', to the formatter.</source>
          <target state="translated">フォーマッタに「太平洋時間」などの一般的なタイムゾーン名を追加します。</target>
        </trans-unit>
        <trans-unit id="b115ddbe12a96262baae96eb719e21b0e9300014" translate="yes" xml:space="preserve">
          <source>Appends the geometry of the specified &lt;a href=&quot;pathiterator&quot;&gt;&lt;code&gt;PathIterator&lt;/code&gt;&lt;/a&gt; object to the path, possibly connecting the new geometry to the existing path segments with a line segment.</source>
          <target state="translated">指定された&lt;a href=&quot;pathiterator&quot;&gt; &lt;code&gt;PathIterator&lt;/code&gt; &lt;/a&gt;オブジェクトのジオメトリをパスに追加し、場合によっては新しいジオメトリを既存のパスセグメントに線分で接続します。</target>
        </trans-unit>
        <trans-unit id="58cf85acb76194155c4c6ba58cfda8c9daa2bb52" translate="yes" xml:space="preserve">
          <source>Appends the geometry of the specified &lt;a href=&quot;pathiterator&quot;&gt;&lt;code&gt;PathIterator&lt;/code&gt;&lt;/a&gt; object to the path, possibly connecting the new geometry to the existing path segments with a line segment. If the &lt;code&gt;connect&lt;/code&gt; parameter is &lt;code&gt;true&lt;/code&gt; and the path is not empty then any initial &lt;code&gt;moveTo&lt;/code&gt; in the geometry of the appended &lt;code&gt;Shape&lt;/code&gt; is turned into a &lt;code&gt;lineTo&lt;/code&gt; segment. If the destination coordinates of such a connecting &lt;code&gt;lineTo&lt;/code&gt; segment match the ending coordinates of a currently open subpath then the segment is omitted as superfluous. The winding rule of the specified &lt;code&gt;Shape&lt;/code&gt; is ignored and the appended geometry is governed by the winding rule specified for this path.</source>
          <target state="translated">指定された&lt;a href=&quot;pathiterator&quot;&gt; &lt;code&gt;PathIterator&lt;/code&gt; &lt;/a&gt;オブジェクトのジオメトリをパスに追加し、場合によっては新しいジオメトリを既存のパスセグメントに線分で接続します。場合 &lt;code&gt;connect&lt;/code&gt; パラメータであり &lt;code&gt;true&lt;/code&gt; パスが空でない場合、次いで、任意の初期 &lt;code&gt;moveTo&lt;/code&gt; 添付のジオメトリの &lt;code&gt;Shape&lt;/code&gt; になっている &lt;code&gt;lineTo&lt;/code&gt; セグメント。このような接続 &lt;code&gt;lineTo&lt;/code&gt; セグメントの宛先座標が、現在開いているサブパスの終了座標と一致する場合、そのセグメントは不要なものとして省略されます。指定された &lt;code&gt;Shape&lt;/code&gt; のワインディングルールは無視され、追加されたジオメトリは、このパスに指定されたワインディングルールによって管理されます。</target>
        </trans-unit>
        <trans-unit id="5f507763da8834f1035539ee1d697fe9174b721e" translate="yes" xml:space="preserve">
          <source>Appends the geometry of the specified &lt;code&gt;Shape&lt;/code&gt; object to the path, possibly connecting the new geometry to the existing path segments with a line segment.</source>
          <target state="translated">指定した &lt;code&gt;Shape&lt;/code&gt; オブジェクトのジオメトリをパスに追加し、新しいジオメトリを既存のパスセグメントに線分で接続する場合があります。</target>
        </trans-unit>
        <trans-unit id="4d45717ffd1956dece97af594637a5042761e9da" translate="yes" xml:space="preserve">
          <source>Appends the geometry of the specified &lt;code&gt;Shape&lt;/code&gt; object to the path, possibly connecting the new geometry to the existing path segments with a line segment. If the &lt;code&gt;connect&lt;/code&gt; parameter is &lt;code&gt;true&lt;/code&gt; and the path is not empty then any initial &lt;code&gt;moveTo&lt;/code&gt; in the geometry of the appended &lt;code&gt;Shape&lt;/code&gt; is turned into a &lt;code&gt;lineTo&lt;/code&gt; segment. If the destination coordinates of such a connecting &lt;code&gt;lineTo&lt;/code&gt; segment match the ending coordinates of a currently open subpath then the segment is omitted as superfluous. The winding rule of the specified &lt;code&gt;Shape&lt;/code&gt; is ignored and the appended geometry is governed by the winding rule specified for this path.</source>
          <target state="translated">指定した &lt;code&gt;Shape&lt;/code&gt; オブジェクトのジオメトリをパスに追加し、新しいジオメトリを既存のパスセグメントに線分で接続する場合があります。場合 &lt;code&gt;connect&lt;/code&gt; パラメータであり &lt;code&gt;true&lt;/code&gt; パスが空でない場合、次いで、任意の初期 &lt;code&gt;moveTo&lt;/code&gt; 添付のジオメトリの &lt;code&gt;Shape&lt;/code&gt; になっている &lt;code&gt;lineTo&lt;/code&gt; セグメント。このような接続 &lt;code&gt;lineTo&lt;/code&gt; セグメントの宛先座標が、現在開いているサブパスの終了座標と一致する場合、そのセグメントは不要なものとして省略されます。指定された &lt;code&gt;Shape&lt;/code&gt; のワインディングルールは無視され、追加されたジオメトリは、このパスに指定されたワインディングルールによって管理されます。</target>
        </trans-unit>
        <trans-unit id="aee95d38f44b67f4da37bd848a96f3178d59e5a8" translate="yes" xml:space="preserve">
          <source>Appends the given text to the end of the document.</source>
          <target state="translated">与えられたテキストを文書の最後に追加します。</target>
        </trans-unit>
        <trans-unit id="374f5fe01edbae6815e4ed307b24e4dbd22508c6" translate="yes" xml:space="preserve">
          <source>Appends the given text to the end of the document. Does nothing if the model is null or the string is null or empty.</source>
          <target state="translated">与えられたテキストをドキュメントの最後に追加します。モデルがNULL、文字列がNULLまたは空の場合は何もしません。</target>
        </trans-unit>
        <trans-unit id="fbe1e3e6ccbf0420c766b7d5fe40a86470a1d25d" translate="yes" xml:space="preserve">
          <source>Appends the given text to the text area's current text.</source>
          <target state="translated">与えられたテキストをテキストエリアの現在のテキストに追加します。</target>
        </trans-unit>
        <trans-unit id="97d46862568414c0b9e367d4cdf281bea3e7e493" translate="yes" xml:space="preserve">
          <source>Appends the localized zone offset, such as 'GMT+01:00', to the formatter.</source>
          <target state="translated">地域化されたゾーンオフセット('GMT+01:00' など)をフォーマッタに追加します。</target>
        </trans-unit>
        <trans-unit id="fd286ce1d15d7645892b282499aa1ecce4aa925e" translate="yes" xml:space="preserve">
          <source>Appends the reduced value of a date-time field to the formatter.</source>
          <target state="translated">日付-時刻フィールドの縮小値をフォーマッタに追加します。</target>
        </trans-unit>
        <trans-unit id="d23820a391259610c6b7bb21a498a57e376f2b05" translate="yes" xml:space="preserve">
          <source>Appends the specified &lt;code&gt;CharSequence&lt;/code&gt; to this sequence.</source>
          <target state="translated">指定された &lt;code&gt;CharSequence&lt;/code&gt; をこのシーケンスに追加します。</target>
        </trans-unit>
        <trans-unit id="403adf760efb7fe7cb1aa666063d328faf97f09e" translate="yes" xml:space="preserve">
          <source>Appends the specified &lt;code&gt;StringBuffer&lt;/code&gt; to this sequence.</source>
          <target state="translated">指定された &lt;code&gt;StringBuffer&lt;/code&gt; をこのシーケンスに追加します。</target>
        </trans-unit>
        <trans-unit id="5892314ebff890abad54a7a7be692ff3ea762427" translate="yes" xml:space="preserve">
          <source>Appends the specified URL to the list of URLs to search for classes and resources.</source>
          <target state="translated">クラスやリソースを検索するためのURLのリストに、指定したURLを追加します。</target>
        </trans-unit>
        <trans-unit id="73915bea68ba19ae72f33dc4bfdcc44636bc7108" translate="yes" xml:space="preserve">
          <source>Appends the specified char to this buffer</source>
          <target state="translated">指定した文字をこのバッファに追加します。</target>
        </trans-unit>
        <trans-unit id="f10b41fc51842242ba117d2c4f767a409a2c964a" translate="yes" xml:space="preserve">
          <source>Appends the specified character sequence to this &lt;code&gt;Appendable&lt;/code&gt;.</source>
          <target state="translated">指定された文字シーケンスをこの &lt;code&gt;Appendable&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="3075ba4f49ae6a67e39b472af9bf812da0b2253e" translate="yes" xml:space="preserve">
          <source>Appends the specified character sequence to this buffer</source>
          <target state="translated">指定した文字列をこのバッファに追加します。</target>
        </trans-unit>
        <trans-unit id="e9b0b9ea35093bbab5cb3a27f2b9ffa8024c499c" translate="yes" xml:space="preserve">
          <source>Appends the specified character sequence to this output stream.</source>
          <target state="translated">指定された文字列をこの出力ストリームに追加します。</target>
        </trans-unit>
        <trans-unit id="887bf872fc6b7ed418b5e718d6b3a0388c2bead1" translate="yes" xml:space="preserve">
          <source>Appends the specified character sequence to this writer.</source>
          <target state="translated">指定された文字列をこのライタに追加します。</target>
        </trans-unit>
        <trans-unit id="ef647ab518b3e2a40fedf796692416afcaca78e0" translate="yes" xml:space="preserve">
          <source>Appends the specified character to this &lt;code&gt;Appendable&lt;/code&gt;.</source>
          <target state="translated">指定された文字をこの &lt;code&gt;Appendable&lt;/code&gt; に追加します。</target>
        </trans-unit>
        <trans-unit id="1ea8d81001eaf82780b763ae2e6dacaefa1698ce" translate="yes" xml:space="preserve">
          <source>Appends the specified character to this output stream.</source>
          <target state="translated">指定した文字をこの出力ストリームに追加します。</target>
        </trans-unit>
        <trans-unit id="3d1e8b2d88ae00633bf4795273c255496c85aafe" translate="yes" xml:space="preserve">
          <source>Appends the specified character to this writer.</source>
          <target state="translated">指定した文字をこのライターに追加します。</target>
        </trans-unit>
        <trans-unit id="4093a0c9df3c2371bdf1c791854d0fce03c9d058" translate="yes" xml:space="preserve">
          <source>Appends the specified component to the end of this container.</source>
          <target state="translated">指定したコンポーネントをこのコンテナの末尾に追加します。</target>
        </trans-unit>
        <trans-unit id="877038f4a6f17ee2b8a7500f552ddacacbc994a8" translate="yes" xml:space="preserve">
          <source>Appends the specified component to the end of this container. This is a convenience method for &lt;a href=&quot;#addImpl(java.awt.Component,java.lang.Object,int)&quot;&gt;&lt;code&gt;addImpl(java.awt.Component, java.lang.Object, int)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたコンポーネントをこのコンテナの最後に追加します。これは、&lt;a href=&quot;#addImpl(java.awt.Component,java.lang.Object,int)&quot;&gt; &lt;code&gt;addImpl(java.awt.Component, java.lang.Object, int)&lt;/code&gt; &lt;/a&gt;便利なメソッドです。</target>
        </trans-unit>
        <trans-unit id="c67c0539bfb73ed763f5009a1fa3babf42790093" translate="yes" xml:space="preserve">
          <source>Appends the specified coordinates to this &lt;code&gt;Polygon&lt;/code&gt;.</source>
          <target state="translated">指定された座標をこの &lt;code&gt;Polygon&lt;/code&gt; 追加します。</target>
        </trans-unit>
        <trans-unit id="6d6377ba64cf7e458515159c18b80a0099538be1" translate="yes" xml:space="preserve">
          <source>Appends the specified element to the end of this Vector.</source>
          <target state="translated">指定した要素をこのベクターの末尾に追加します。</target>
        </trans-unit>
        <trans-unit id="c349afe5e41baabf619d250f973de2631a819363" translate="yes" xml:space="preserve">
          <source>Appends the specified element to the end of this list (optional operation).</source>
          <target state="translated">指定された要素をリストの末尾に追加します(任意の操作)。</target>
        </trans-unit>
        <trans-unit id="e786e7cc0f0900809cfabc8dff37ab88f2b0c507" translate="yes" xml:space="preserve">
          <source>Appends the specified element to the end of this list.</source>
          <target state="translated">指定した要素をリストの末尾に追加します。</target>
        </trans-unit>
        <trans-unit id="79a02db15553112578bc583213992e5af537660d" translate="yes" xml:space="preserve">
          <source>Appends the specified exception to the exceptions that were suppressed in order to deliver this exception.</source>
          <target state="translated">この例外を配信するために抑圧された例外に、指定された例外を追加します。</target>
        </trans-unit>
        <trans-unit id="89e15512a891a8fbf4db2f5714182d60f58c57f4" translate="yes" xml:space="preserve">
          <source>Appends the specified exception to the exceptions that were suppressed in order to deliver this exception. This method is thread-safe and typically called (automatically and implicitly) by the &lt;code&gt;try&lt;/code&gt;-with-resources statement.</source>
          <target state="translated">この例外を配信するために抑制された例外に、指定された例外を追加します。このメソッドはスレッドセーフであり、通常、 &lt;code&gt;try&lt;/code&gt; -with-resourcesステートメントによって（自動的かつ暗黙的に）呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e9b937fc9361f9718ac900d4b93f787db5572ad7" translate="yes" xml:space="preserve">
          <source>Appends the specified menu item to the end of this menu.</source>
          <target state="translated">指定したメニュー項目をメニューの最後に追加します。</target>
        </trans-unit>
        <trans-unit id="c6c97272e1c7e1340478d0cd77ecaa2732904de7" translate="yes" xml:space="preserve">
          <source>Appends the specified menu to the end of the menu bar.</source>
          <target state="translated">指定したメニューをメニューバーの末尾に追加します。</target>
        </trans-unit>
        <trans-unit id="088a1f0d499d8b31f5099362a31c3a6d9606e250" translate="yes" xml:space="preserve">
          <source>Appends the specified string to this character sequence.</source>
          <target state="translated">指定した文字列をこの文字列に追加します。</target>
        </trans-unit>
        <trans-unit id="2f191e8e601e6a0d6d9bd5bf4260185658ef46f9" translate="yes" xml:space="preserve">
          <source>Appends the string representation of a subarray of the &lt;code&gt;char&lt;/code&gt; array argument to this sequence.</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; 配列引数のサブ配列の文字列表現をこのシーケンスに追加します。</target>
        </trans-unit>
        <trans-unit id="db66fd97a079558f509cf7046555fa67ead53369" translate="yes" xml:space="preserve">
          <source>Appends the string representation of the &lt;code&gt;Object&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 引数の文字列表現を追加します。</target>
        </trans-unit>
        <trans-unit id="fdcfe0a57ccfd59aff3e13b380b34851f14bb38c" translate="yes" xml:space="preserve">
          <source>Appends the string representation of the &lt;code&gt;boolean&lt;/code&gt; argument to the sequence.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 引数の文字列表現をシーケンスに追加します。</target>
        </trans-unit>
        <trans-unit id="f1b024e4927c67af8f6fae9e55ee4a8f6dae7b79" translate="yes" xml:space="preserve">
          <source>Appends the string representation of the &lt;code&gt;char&lt;/code&gt; argument to this sequence.</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; 引数の文字列表現をこのシーケンスに追加します。</target>
        </trans-unit>
        <trans-unit id="74119a37c1afbfc043dc9e471cf7fb1a05613fd6" translate="yes" xml:space="preserve">
          <source>Appends the string representation of the &lt;code&gt;char&lt;/code&gt; array argument to this sequence.</source>
          <target state="translated">&lt;code&gt;char&lt;/code&gt; 配列引数の文字列表現をこのシーケンスに追加します。</target>
        </trans-unit>
        <trans-unit id="01ef91fecec989cf22290887f3826204d3d68916" translate="yes" xml:space="preserve">
          <source>Appends the string representation of the &lt;code&gt;codePoint&lt;/code&gt; argument to this sequence.</source>
          <target state="translated">&lt;code&gt;codePoint&lt;/code&gt; 引数の文字列表現をこのシーケンスに追加します。</target>
        </trans-unit>
        <trans-unit id="163ff8bd37d249d282af7c101be46c5e84506eaa" translate="yes" xml:space="preserve">
          <source>Appends the string representation of the &lt;code&gt;double&lt;/code&gt; argument to this sequence.</source>
          <target state="translated">&lt;code&gt;double&lt;/code&gt; 引数の文字列表現をこのシーケンスに追加します。</target>
        </trans-unit>
        <trans-unit id="2ea5a8324ac302b185027ecfd9539501689e5aca" translate="yes" xml:space="preserve">
          <source>Appends the string representation of the &lt;code&gt;float&lt;/code&gt; argument to this sequence.</source>
          <target state="translated">&lt;code&gt;float&lt;/code&gt; 引数の文字列表現をこのシーケンスに追加します。</target>
        </trans-unit>
        <trans-unit id="f57211745a2b4498fd6b12988fc604c40d01fadb" translate="yes" xml:space="preserve">
          <source>Appends the string representation of the &lt;code&gt;int&lt;/code&gt; argument to this sequence.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 引数の文字列表現をこのシーケンスに追加します。</target>
        </trans-unit>
        <trans-unit id="8841ab004de348406bc2339572b5dacb3dfabf83" translate="yes" xml:space="preserve">
          <source>Appends the string representation of the &lt;code&gt;long&lt;/code&gt; argument to this sequence.</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; 引数の文字列表現をこのシーケンスに追加します。</target>
        </trans-unit>
        <trans-unit id="b76372942da5bbdb7456c730eef6450037742063" translate="yes" xml:space="preserve">
          <source>Appends the text of a date-time field to the formatter using the full text style.</source>
          <target state="translated">フルテキストスタイルを使用して、日付・時刻フィールドのテキストをフォーマッタに追加します。</target>
        </trans-unit>
        <trans-unit id="6de64cb1814bcaa101564c20928a648a625492b9" translate="yes" xml:space="preserve">
          <source>Appends the text of a date-time field to the formatter using the specified map to supply the text.</source>
          <target state="translated">指定されたマップを使用してテキストを供給するために、日付-時刻フィールドのテキストをフォーマッタに追加します。</target>
        </trans-unit>
        <trans-unit id="47624b2d52e60838e636d54e86d8d936e7a86c02" translate="yes" xml:space="preserve">
          <source>Appends the text of a date-time field to the formatter.</source>
          <target state="translated">日時フィールドのテキストをフォーマッタに追加します。</target>
        </trans-unit>
        <trans-unit id="e144089807b8aec12ca52afc817e29d9c32a1ef6" translate="yes" xml:space="preserve">
          <source>Appends the time-zone ID, such as 'Europe/Paris' or '+02:00', to the formatter, using the best available zone ID.</source>
          <target state="translated">Europe/Paris」や「+02:00」などのタイムゾーンIDを、利用可能な最良のゾーンIDを使用してフォーマッタに追加します。</target>
        </trans-unit>
        <trans-unit id="c62c30d255541630177a168af30674da0f2bf39a" translate="yes" xml:space="preserve">
          <source>Appends the time-zone ID, such as 'Europe/Paris' or '+02:00', to the formatter.</source>
          <target state="translated">Europe/Paris」や「+02:00」などのタイムゾーンIDをフォーマッタに追加します。</target>
        </trans-unit>
        <trans-unit id="ebec0377fec25d4e0ded182c38d98da4043d0b5a" translate="yes" xml:space="preserve">
          <source>Appends the time-zone name, such as 'British Summer Time', to the formatter.</source>
          <target state="translated">フォーマッタに「British Summer Time」などのタイムゾーン名を追加します。</target>
        </trans-unit>
        <trans-unit id="fce4d833a5294e5be507295337076318cc55f391" translate="yes" xml:space="preserve">
          <source>Appends the time-zone region ID, such as 'Europe/Paris', to the formatter, rejecting the zone ID if it is a &lt;code&gt;ZoneOffset&lt;/code&gt;.</source>
          <target state="translated">'Europe / Paris'などのタイムゾーン地域IDを &lt;code&gt;ZoneOffset&lt;/code&gt; 、ZoneOffsetの場合はゾーンIDを拒否します。</target>
        </trans-unit>
        <trans-unit id="46b5c41f6878511d79dc2357225f0f3c59199147" translate="yes" xml:space="preserve">
          <source>Appends the value of a date-time field to the formatter providing full control over formatting.</source>
          <target state="translated">フォーマットの完全なコントロールを提供するフォーマッタに日付-時刻フィールドの値を追加します。</target>
        </trans-unit>
        <trans-unit id="4c16af480b92b45ba43b0fc2b238944f9add2fe0" translate="yes" xml:space="preserve">
          <source>Appends the value of a date-time field to the formatter using a fixed width, zero-padded approach.</source>
          <target state="translated">固定幅でゼロパッドのアプローチを用いて、日付-時刻フィールドの値をフォーマッタに追加します。</target>
        </trans-unit>
        <trans-unit id="186f7ffe827c5f1a49eb2f747df751f27687bbe4" translate="yes" xml:space="preserve">
          <source>Appends the value of a date-time field to the formatter using a normal output style.</source>
          <target state="translated">通常の出力スタイルを使用して、日付-時刻フィールドの値をフォーマッタに追加します。</target>
        </trans-unit>
        <trans-unit id="db208587cb329f41f68ab69d38d81b63d7b0e039" translate="yes" xml:space="preserve">
          <source>Appends the zone offset, such as '+01:00', to the formatter.</source>
          <target state="translated">ゾーンオフセット('+01:00'など)をフォーマッタに追加します。</target>
        </trans-unit>
        <trans-unit id="18b2b60a1a07cab1060e2d47172cbe32a0b7f89d" translate="yes" xml:space="preserve">
          <source>Applet</source>
          <target state="translated">Applet</target>
        </trans-unit>
        <trans-unit id="c8d76e1c8736bdcb6f20c99b29ccce6172a71aff" translate="yes" xml:space="preserve">
          <source>Applet class file.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="963066d05e2225e3d080a032b57dc82df1fc2137" translate="yes" xml:space="preserve">
          <source>Applet class file. See the &lt;code&gt;code&lt;/code&gt; attribute for HTMLAppletElement.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="2d06ebecfeca5761c9195e06966b26ea1e152d82" translate="yes" xml:space="preserve">
          <source>Applet class file. See the code attribute definition in HTML 4.0. This attribute is deprecated in HTML 4.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3aa2e09a94b226303351ddc50dae9e64eadf1838" translate="yes" xml:space="preserve">
          <source>Applet.AccessibleApplet</source>
          <target state="translated">Applet.AccessibleApplet</target>
        </trans-unit>
        <trans-unit id="4fc1edd5ee53c250311ccc5208b107f025a4b8b7" translate="yes" xml:space="preserve">
          <source>AppletContext</source>
          <target state="translated">AppletContext</target>
        </trans-unit>
        <trans-unit id="488b0304818d795d79ef00b876ed6c33abb17a19" translate="yes" xml:space="preserve">
          <source>AppletInitializer</source>
          <target state="translated">AppletInitializer</target>
        </trans-unit>
        <trans-unit id="a0e9a59fc6a8081eea334fc91e80fc293bfdb9d3" translate="yes" xml:space="preserve">
          <source>AppletInitializer.activate()</source>
          <target state="translated">AppletInitializer.activate()</target>
        </trans-unit>
        <trans-unit id="00640ab6965f79d693f1a39c2c2b63fe4721b903" translate="yes" xml:space="preserve">
          <source>AppletInitializer.initialize()</source>
          <target state="translated">AppletInitializer.initialize()</target>
        </trans-unit>
        <trans-unit id="f5415147ecdcf531d4510ec0ec67e6b5a749dcf6" translate="yes" xml:space="preserve">
          <source>AppletStub</source>
          <target state="translated">AppletStub</target>
        </trans-unit>
        <trans-unit id="1dff35ce41c1c847b6d220332d1bd7905bee5db1" translate="yes" xml:space="preserve">
          <source>Applets typically run in a container that already has a security manager, so there is generally no need for applets to set a security manager. If you have a standalone application, you might need to set a &lt;code&gt;SecurityManager&lt;/code&gt; in order to enable class downloading. This can be done by adding the following to your code. (It needs to be executed before RMI can download code from remote hosts, so it most likely needs to appear in the &lt;code&gt;main&lt;/code&gt; method of your application.)</source>
          <target state="translated">アプレットは通常、セキュリティマネージャがすでに存在するコンテナで実行されるため、通常、アプレットがセキュリティマネージャを設定する必要はありません。スタンドアロンアプリケーションを使用している場合は、クラスのダウンロードを有効にするために &lt;code&gt;SecurityManager&lt;/code&gt; を設定する必要がある場合があります。これは、コードに以下を追加することで実行できます。（RMIがリモートホストからコードをダウンロードする前に実行する必要があるため、アプリケーションの &lt;code&gt;main&lt;/code&gt; メソッドに表示される可能性があります。）</target>
        </trans-unit>
        <trans-unit id="71ca9b44d558b98a70fafc048cc860bce54dfcd5" translate="yes" xml:space="preserve">
          <source>Applicable only if the event is dynamically defined using the &lt;code&gt;EventFactory&lt;/code&gt; class.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1e49f01f985d37daacd5c2ac45cd785f57acc910" translate="yes" xml:space="preserve">
          <source>Application Data - Once the communication parameters have been established and the handshake is complete, application data may flow through the &lt;code&gt;SSLEngine&lt;/code&gt;. Outbound application messages are encrypted and integrity protected, and inbound messages reverse the process.</source>
          <target state="translated">アプリケーションデータ-通信パラメータが確立されてハンドシェイクが完了すると、アプリケーションデータが &lt;code&gt;SSLEngine&lt;/code&gt; を通過する場合があります。送信アプリケーションメッセージは暗号化され、整合性が保護され、受信メッセージはプロセスを逆にします。</target>
        </trans-unit>
        <trans-unit id="1c01bfbc616afd5a098ddde578a275ebbbf2b372" translate="yes" xml:space="preserve">
          <source>Application Resource Files</source>
          <target state="translated">アプリケーションリソースファイル</target>
        </trans-unit>
        <trans-unit id="3c888e08801297fc7c9a8c9e3373ba0d954cc1a4" translate="yes" xml:space="preserve">
          <source>Application code can also create a new MBean Server, or access already-created MBean Servers, using the &lt;a href=&quot;mbeanserverfactory&quot;&gt;&lt;code&gt;MBeanServerFactory&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">アプリケーションコードは、&lt;a href=&quot;mbeanserverfactory&quot;&gt; &lt;code&gt;MBeanServerFactory&lt;/code&gt; &lt;/a&gt;クラスを使用して、新しいMBeanサーバーを作成したり、作成済みのMBeanサーバーにアクセスしたりすることもできます。</target>
        </trans-unit>
        <trans-unit id="f0ddafcb009f60a8abcaf2a35a101c3eda97ef79" translate="yes" xml:space="preserve">
          <source>Application code can directly subclass Configuration to provide a custom implementation. In addition, an instance of a Configuration object can be constructed by invoking one of the &lt;code&gt;getInstance&lt;/code&gt; factory methods with a standard type. The default policy type is &quot;JavaLoginConfig&quot;. See the Configuration section in the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html#configuration-types&quot;&gt; Java Security Standard Algorithm Names Specification&lt;/a&gt; for a list of standard Configuration types.</source>
          <target state="translated">アプリケーションコードは、構成を直接サブクラス化して、カスタム実装を提供できます。さらに、構成オブジェクトのインスタンスは、標準タイプで &lt;code&gt;getInstance&lt;/code&gt; ファクトリメソッドの1つを呼び出すことによって構築できます。デフォルトのポリシータイプは「JavaLoginConfig」です。標準構成タイプのリストについては、「&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/specs/security/standard-names.html#configuration-types&quot;&gt;Javaセキュリティー標準アルゴリズム名仕様&lt;/a&gt;」の「構成」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="c24d780492c7941b88aeeb278320787b7ebd9bf3" translate="yes" xml:space="preserve">
          <source>Application code can directly subclass Configuration to provide a custom implementation. In addition, an instance of a Configuration object can be constructed by invoking one of the &lt;code&gt;getInstance&lt;/code&gt; factory methods with a standard type. The default policy type is &quot;JavaLoginConfig&quot;. See the Configuration section in the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/15/docs/specs/security/standard-names.html#configuration-types&quot;&gt; Java Security Standard Algorithm Names Specification&lt;/a&gt; for a list of standard Configuration types.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ecf48d008bc04c9fba8077398c4acbc137fa56a1" translate="yes" xml:space="preserve">
          <source>Application code can directly subclass Configuration to provide a custom implementation. In addition, an instance of a Configuration object can be constructed by invoking one of the &lt;code&gt;getInstance&lt;/code&gt; factory methods with a standard type. The default policy type is &quot;JavaLoginConfig&quot;. See the Configuration section in the &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#Configuration&quot;&gt; Java Cryptography Architecture Standard Algorithm Name Documentation&lt;/a&gt; for a list of standard Configuration types.</source>
          <target state="translated">アプリケーションコードは、Configurationを直接サブクラス化して、カスタム実装を提供できます。さらに、Configurationオブジェクトのインスタンスは、標準タイプの &lt;code&gt;getInstance&lt;/code&gt; ファクトリメソッドの1つを呼び出すことによって構築できます。デフォルトのポリシータイプは「JavaLoginConfig」です。標準の構成タイプのリストについては、&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#Configuration&quot;&gt;Java暗号化アーキテクチャの標準アルゴリズム名のドキュメント&lt;/a&gt;の構成セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="9d2e568ff7065c4954d0ca7cf3c6b38197e77f6e" translate="yes" xml:space="preserve">
          <source>Application code can directly subclass Policy to provide a custom implementation. In addition, an instance of a Policy object can be constructed by invoking one of the &lt;code&gt;getInstance&lt;/code&gt; factory methods with a standard type. The default policy type is &quot;JavaPolicy&quot;.</source>
          <target state="translated">アプリケーションコードは、Policyを直接サブクラス化して、カスタム実装を提供できます。さらに、標準タイプの &lt;code&gt;getInstance&lt;/code&gt; ファクトリメソッドの1つを呼び出すことにより、Policyオブジェクトのインスタンスを構築できます。デフォルトのポリシータイプは「JavaPolicy」です。</target>
        </trans-unit>
        <trans-unit id="e2e089e05cf66fff329ca5e8678168e19dc8bf7f" translate="yes" xml:space="preserve">
          <source>Application code will not use these methods explicitly, they are used internally by &lt;code&gt;JTable&lt;/code&gt;.</source>
          <target state="translated">アプリケーションコードはこれらのメソッドを明示的に使用せず、 &lt;code&gt;JTable&lt;/code&gt; によって内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="e4f463c504e79280da5308b67af94a7fd194d269" translate="yes" xml:space="preserve">
          <source>Application code will not use these methods explicitly, they are used internally by JTable.</source>
          <target state="translated">アプリケーションコードでは、これらのメソッドは明示的には使用されず、JTable によって内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="f3a6e6614cf26b872cd28ba7e7296063689eae53" translate="yes" xml:space="preserve">
          <source>Application code will not use this method explicitly, it is used internally by the column dragging mechanism.</source>
          <target state="translated">アプリケーションコードはこのメソッドを明示的には使用せず、カラムドラッグ機構によって内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="1b79f5649db950b57931a71da3a2d588807ae702" translate="yes" xml:space="preserve">
          <source>Application code will not use this method explicitly, it is used internally by the column sizing mechanism.</source>
          <target state="translated">アプリケーション・コードはこのメソッドを明示的には使用しません。</target>
        </trans-unit>
        <trans-unit id="771f3f889ff6ba3070f745a76dc87772ecf1dd69" translate="yes" xml:space="preserve">
          <source>Application data (also known as plaintext or cleartext) is data which is produced or consumed by an application. Its counterpart is network data, which consists of either handshaking and/or ciphertext (encrypted) data, and destined to be transported via an I/O mechanism. Inbound data is data which has been received from the peer, and outbound data is destined for the peer.</source>
          <target state="translated">アプリケーションデータ(平文または平文とも呼ばれる)は、アプリケーションによって生成または消費されるデータです。これに相当するのがネットワークデータで、ハンドシェイクや暗号文(暗号化された)データのいずれかで構成され、I/Oメカニズムを介して転送されることになっています。インバウンドデータは相手から受信したデータであり、アウトバウンドデータは相手に向けて送信される。</target>
        </trans-unit>
        <trans-unit id="ecafbb5ea26d556e3932ebfbf003adb3f9f935d5" translate="yes" xml:space="preserve">
          <source>Application developers should refer to their provider's documentation to find out which key specifications are supported by the &lt;a href=&quot;#generateSecret(java.security.spec.KeySpec)&quot;&gt;&lt;code&gt;generateSecret&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#getKeySpec(javax.crypto.SecretKey,java.lang.Class)&quot;&gt;&lt;code&gt;getKeySpec&lt;/code&gt;&lt;/a&gt; methods. For example, the DES secret-key factory supplied by the &quot;SunJCE&quot; provider supports &lt;code&gt;DESKeySpec&lt;/code&gt; as a transparent representation of DES keys, and that provider's secret-key factory for Triple DES keys supports &lt;code&gt;DESedeKeySpec&lt;/code&gt; as a transparent representation of Triple DES keys.</source>
          <target state="translated">アプリケーション開発者は、キーの仕様がによってサポートされているかを見つけるために、自分のプロバイダのドキュメントを参照してください&lt;a href=&quot;#generateSecret(java.security.spec.KeySpec)&quot;&gt; &lt;code&gt;generateSecret&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#getKeySpec(javax.crypto.SecretKey,java.lang.Class)&quot;&gt; &lt;code&gt;getKeySpec&lt;/code&gt; &lt;/a&gt;メソッド。たとえば、「SunJCE」プロバイダーによって提供されるDES秘密鍵ファクトリはDESキーの透過的表現として &lt;code&gt;DESKeySpec&lt;/code&gt; をサポートし、トリプルDESキーのそのプロバイダーの秘密鍵ファクトリはトリプルDESキーの透過的表現として &lt;code&gt;DESedeKeySpec&lt;/code&gt; をサポートします。</target>
        </trans-unit>
        <trans-unit id="c53ca5e7b4b3c64b0c479b972af9b830d8e1445a" translate="yes" xml:space="preserve">
          <source>Application developers should refer to their provider's documentation to find out which key specifications are supported by the &lt;a href=&quot;#generateSecret(java.security.spec.KeySpec)&quot;&gt;&lt;code&gt;generateSecret&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#getKeySpec(javax.crypto.SecretKey,java.lang.Class)&quot;&gt;&lt;code&gt;getKeySpec&lt;/code&gt;&lt;/a&gt; methods. For example, the DESede (Triple DES) secret-key factory supplied by the &quot;SunJCE&quot; provider supports &lt;code&gt;DESedeKeySpec&lt;/code&gt; as a transparent representation of Triple DES keys.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e4731649856f6c1954ff4144c23e30b90b9f5f89" translate="yes" xml:space="preserve">
          <source>Application developers should refer to their provider's documentation to find out which key specifications are supported by the &lt;a href=&quot;secretkeyfactory#generateSecret-java.security.spec.KeySpec-&quot;&gt;&lt;code&gt;generateSecret&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;secretkeyfactory#getKeySpec-javax.crypto.SecretKey-java.lang.Class-&quot;&gt;&lt;code&gt;getKeySpec&lt;/code&gt;&lt;/a&gt; methods. For example, the DES secret-key factory supplied by the &quot;SunJCE&quot; provider supports &lt;code&gt;DESKeySpec&lt;/code&gt; as a transparent representation of DES keys, and that provider's secret-key factory for Triple DES keys supports &lt;code&gt;DESedeKeySpec&lt;/code&gt; as a transparent representation of Triple DES keys.</source>
          <target state="translated">アプリケーション開発者は、キーの仕様がによってサポートされているかを見つけるために、自分のプロバイダのドキュメントを参照してください&lt;a href=&quot;secretkeyfactory#generateSecret-java.security.spec.KeySpec-&quot;&gt; &lt;code&gt;generateSecret&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;secretkeyfactory#getKeySpec-javax.crypto.SecretKey-java.lang.Class-&quot;&gt; &lt;code&gt;getKeySpec&lt;/code&gt; &lt;/a&gt;メソッド。たとえば、「SunJCE」プロバイダが提供するDES秘密鍵ファクトリは、 &lt;code&gt;DESKeySpec&lt;/code&gt; をDES鍵の透過的な表現としてサポートし、トリプルDES鍵のそのプロバイダの秘密鍵ファクトリは、トリプルDES鍵の透過的な表現として &lt;code&gt;DESedeKeySpec&lt;/code&gt; をサポートします。</target>
        </trans-unit>
        <trans-unit id="05a10d262c8adc401cafe34e37c1a23c2b26d366" translate="yes" xml:space="preserve">
          <source>Application servers are not required to support any particular form or type of mapped name, nor the ability to use mapped names. The mapped name is product-dependent and often installation-dependent. No use of a mapped name is portable.</source>
          <target state="translated">アプリケーションサーバは、特定の形式やタイプのマップドネームをサポートする必要はありませんし、マップドネームを使用する機能も必要ありません。マップされた名前は製品に依存し、多くの場合インストールに依存します。マップされた名前の使用は移植性がありません。</target>
        </trans-unit>
        <trans-unit id="7334dcab4d38450f3344a48c3f61759e7e00a671" translate="yes" xml:space="preserve">
          <source>Application writers can extend this class when they need to implement only part of an interface; parser writers can instantiate this class to provide default handlers when the application has not supplied its own.</source>
          <target state="translated">アプリケーションライターは、インターフェイスの一部のみを実装する必要がある場合にこのクラスを拡張することができます。パーサライターは、アプリケーションが独自のハンドラを提供していない場合に、このクラスをインスタンス化してデフォルトのハンドラを提供することができます。</target>
        </trans-unit>
        <trans-unit id="b47220c84b69e328fec122d9b191c8ae39356d29" translate="yes" xml:space="preserve">
          <source>Application writers can use this method to redirect external system identifiers to secure and/or local URI, to look up public identifiers in a catalogue, or to read an entity from a database or other input source (including, for example, a dialog box).</source>
          <target state="translated">アプリケーションライターは、この方法を使用して、外部システム識別子をセキュアなURIやローカルURIにリダイレクトしたり、カタログ内の公開識別子を検索したり、データベースや他の入力ソース(例えば、ダイアログボックスなど)からエンティティを読み込んだりすることができます。</target>
        </trans-unit>
        <trans-unit id="ad99f1ff92befdc42409538a4a9dd6dcb1ee33e7" translate="yes" xml:space="preserve">
          <source>Application writers can use this method to redirect external system identifiers to secure and/or local URIs, to look up public identifiers in a catalogue, or to read an entity from a database or other input source (including, for example, a dialog box). Neither XML nor SAX specifies a preferred policy for using public or system IDs to resolve resources. However, SAX specifies how to interpret any InputSource returned by this method, and that if none is returned, then the system ID will be dereferenced as a URL.</source>
          <target state="translated">アプリケーション・ライターはこの方法を使用して、外部システム識別子をセキュアなURIやローカルURIにリダイレクトしたり、カタログ内のパブリック識別子を検索したり、データベースやその他の入力ソース(ダイアログ・ボックスなど)からエンティティを読み込んだりすることができます。XMLもSAXも、リソースを解決するためにパブリックIDまたはシステムIDを使用するための好ましいポリシーを規定していない。しかしながら、SAXは、このメソッドによって返されたInputSourceをどのように解釈するかを規定しており、もし何も返されなかった場合、システムIDはURLとして参照される。</target>
        </trans-unit>
        <trans-unit id="6981b8a3830b95086056c91236e685d7623bc901" translate="yes" xml:space="preserve">
          <source>Application writers should use setSystemId() to provide a base for resolving relative URIs, and may use setPublicId to include a public identifier.</source>
          <target state="translated">アプリケーションライターは、相対 URI を解決するためのベースを提供するために setSystemId()を使用すべきであり、公開識別子を含めるために setPublicId を使用してもよい。</target>
        </trans-unit>
        <trans-unit id="83e4c4088ad948a1e43bb6e90ccf8258db578ba3" translate="yes" xml:space="preserve">
          <source>Application writers should use setSystemId() to provide a base for resolving relative URIs, may use setPublicId to include a public identifier, and may use setEncoding to specify the object's character encoding.</source>
          <target state="translated">アプリケーションライターは、相対 URI を解決するためのベースを提供するために setSystemId()を使用し、公開識別子を含めるために setPublicId を使用し、オブジェクトの文字エンコーディングを指定するために setEncoding を使用することができます。</target>
        </trans-unit>
        <trans-unit id="a62ecdac430fdfde2451dea4ff330e4cd5656ec5" translate="yes" xml:space="preserve">
          <source>Application writers who do not want to implement the entire interface can derive a class from HandlerBase, which implements the default functionality; parser writers can instantiate HandlerBase to obtain a default handler. The application can find the location of any document event using the Locator interface supplied by the Parser through the setDocumentLocator method.</source>
          <target state="translated">インターフェース全体を実装したくないアプリケーションライターは、デフォルトの機能を実装したHandlerBaseからクラスを派生させることができます;パーサーライターは、デフォルトのハンドラを取得するためにHandlerBaseをインスタンス化することができます。アプリケーションは setDocumentLocator メソッドを通してパーサによって提供される Locator インターフェースを使用して、任意のドキュメントイベントの場所を見つけることができます。</target>
        </trans-unit>
        <trans-unit id="53b6e2473f35ddd610a148601726bc65198ce010" translate="yes" xml:space="preserve">
          <source>Application-specified source of randomness.</source>
          <target state="translated">アプリケーションで指定されたランダム性のソース。</target>
        </trans-unit>
        <trans-unit id="aa746d6603ea64f1223d3ba28adfac00d22e42b8" translate="yes" xml:space="preserve">
          <source>ApplicationName - The name of the application currently utilizing the connection</source>
          <target state="translated">ApplicationName-現在接続を利用しているアプリケーションの名前です。</target>
        </trans-unit>
        <trans-unit id="132e90c01e41cbf711e24fb6067cf1406ce4cfbe" translate="yes" xml:space="preserve">
          <source>Applications are discouraged from calling this method since this operation may not be supported by all policy implementations. Applications should rely on the &lt;code&gt;implies&lt;/code&gt; method to perform policy checks.</source>
          <target state="translated">この操作はすべてのポリシー実装でサポートされているとは限らないため、アプリケーションはこのメソッドを呼び出さないでください。アプリケーションは、 &lt;code&gt;implies&lt;/code&gt; メソッドに依存してポリシーチェックを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="e723e9edd551fe7209bf1873036ec2ae65fd9842" translate="yes" xml:space="preserve">
          <source>Applications are discouraged from calling this method since this operation may not be supported by all policy implementations. Applications should solely rely on the &lt;code&gt;implies&lt;/code&gt; method to perform policy checks. If an application absolutely must call a getPermissions method, it should call &lt;code&gt;getPermissions(ProtectionDomain)&lt;/code&gt;.</source>
          <target state="translated">この操作はすべてのポリシー実装でサポートされているとは限らないため、アプリケーションはこのメソッドを呼び出さないでください。アプリケーションは、 &lt;code&gt;implies&lt;/code&gt; メソッドのみに依存してポリシーチェックを実行する必要があります。アプリケーションが絶対にgetPermissionsメソッドを呼び出す必要がある場合は、 &lt;code&gt;getPermissions(ProtectionDomain)&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="57a30a3fedb6b3250c115b3fe69d364bce20f841" translate="yes" xml:space="preserve">
          <source>Applications are not expected to use this class directly. A remote object exported to use a dynamic proxy with &lt;a href=&quot;unicastremoteobject&quot;&gt;&lt;code&gt;UnicastRemoteObject&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../activation/activatable&quot;&gt;&lt;code&gt;Activatable&lt;/code&gt;&lt;/a&gt; has an instance of this class as that proxy's invocation handler.</source>
          <target state="translated">アプリケーションがこのクラスを直接使用することは想定されていません。&lt;a href=&quot;unicastremoteobject&quot;&gt; &lt;code&gt;UnicastRemoteObject&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../activation/activatable&quot;&gt; &lt;code&gt;Activatable&lt;/code&gt; で&lt;/a&gt;動的プロキシを使用するためにエクスポートされたリモートオブジェクトには、そのプロキシの呼び出しハンドラとしてこのクラスのインスタンスがあります。</target>
        </trans-unit>
        <trans-unit id="bc38f60d3ad17a4c6657603cf5a58c9520bb195b" translate="yes" xml:space="preserve">
          <source>Applications can apply a degree of filtering to determine the level of synchronization that a &lt;code&gt;SyncProvider&lt;/code&gt; implementation offers. The following criteria determine whether a provider is made available to a &lt;code&gt;RowSet&lt;/code&gt; object:</source>
          <target state="translated">アプリケーションは、ある程度のフィルタリングを適用して、 &lt;code&gt;SyncProvider&lt;/code&gt; 実装が提供する同期のレベルを決定できます。次の基準は、プロバイダーを &lt;code&gt;RowSet&lt;/code&gt; オブジェクトで使用できるようにするかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="44e4145573d0b541941799c9f70c0f0bcbcebc91" translate="yes" xml:space="preserve">
          <source>Applications can call this method even during a &lt;a href=&quot;schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt; is being parsed.</source>
          <target state="translated">アプリケーションは、&lt;a href=&quot;schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt;が解析されている間でもこのメソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="153f84eb324e14ccfa14a7560ce2acdf23ea121b" translate="yes" xml:space="preserve">
          <source>Applications can determine if an object supports the &lt;code&gt;AccessibleExtendedText&lt;/code&gt; interface by first obtaining its &lt;code&gt;AccessibleContext&lt;/code&gt; (see &lt;a href=&quot;accessible&quot;&gt;&lt;code&gt;Accessible&lt;/code&gt;&lt;/a&gt;) and then calling the &lt;a href=&quot;accessiblecontext#getAccessibleText()&quot;&gt;&lt;code&gt;AccessibleContext.getAccessibleText()&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;AccessibleContext&lt;/code&gt;. If the return value is an instance of &lt;code&gt;AccessibleExtendedText&lt;/code&gt;, the object supports this interface.</source>
          <target state="translated">オブジェクトがサポートするかどうかを判定することができる &lt;code&gt;AccessibleExtendedText&lt;/code&gt; を最初に取得することによってインターフェースを &lt;code&gt;AccessibleContext&lt;/code&gt; を（参照&lt;a href=&quot;accessible&quot;&gt; &lt;code&gt;Accessible&lt;/code&gt; &lt;/a&gt;）、次に呼び出す&lt;a href=&quot;accessiblecontext#getAccessibleText()&quot;&gt; &lt;code&gt;AccessibleContext.getAccessibleText()&lt;/code&gt; &lt;/a&gt;のメソッド &lt;code&gt;AccessibleContext&lt;/code&gt; を。戻り値が &lt;code&gt;AccessibleExtendedText&lt;/code&gt; のインスタンスである場合、オブジェクトはこのインターフェイスをサポートします。</target>
        </trans-unit>
        <trans-unit id="c6a911fb9ffbfbfbcf5b7408fbd2cb67176b9e9b" translate="yes" xml:space="preserve">
          <source>Applications can determine if an object supports the AccessibleAction interface by first obtaining its &lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContext&lt;/a&gt; (see &lt;a href=&quot;#Accessible&quot;&gt;Accessible&lt;/a&gt;) and then calling the &lt;code&gt;getAccessibleAction&lt;/code&gt; method of &lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContext&lt;/a&gt;. If the return value is not &lt;code&gt;null&lt;/code&gt;, the object supports this interface.</source>
          <target state="translated">オブジェクトが最初に取得することによりたAccessibleActionインタフェースをサポートするかどうかを判定することができる&lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContextを&lt;/a&gt;（参照&lt;a href=&quot;#Accessible&quot;&gt;アクセ&lt;/a&gt;）、次に呼び出す &lt;code&gt;getAccessibleAction&lt;/code&gt; の方法&lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContextを&lt;/a&gt;。戻り値が &lt;code&gt;null&lt;/code&gt; でない場合、オブジェクトはこのインターフェースをサポートします。</target>
        </trans-unit>
        <trans-unit id="4176bff2e5f1378ad37d1b8d07311f3665e58076" translate="yes" xml:space="preserve">
          <source>Applications can determine if an object supports the AccessibleComponent interface by first obtaining its &lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContext&lt;/a&gt; (see &lt;a href=&quot;#Accessible&quot;&gt;Accessible&lt;/a&gt;) and then calling the &lt;code&gt;getAccessibleComponent&lt;/code&gt; method of &lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContext&lt;/a&gt;. If the return value is not &lt;code&gt;null&lt;/code&gt;, the object supports this interface.</source>
          <target state="translated">オブジェクトが最初に取得することによってAccessibleComponentインタフェースをサポートするかどうかを判定することができる&lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContextを&lt;/a&gt;（参照&lt;a href=&quot;#Accessible&quot;&gt;アクセ&lt;/a&gt;）、次に呼び出す &lt;code&gt;getAccessibleComponent&lt;/code&gt; の方法&lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContextを&lt;/a&gt;。戻り値が &lt;code&gt;null&lt;/code&gt; でない場合、オブジェクトはこのインターフェースをサポートします。</target>
        </trans-unit>
        <trans-unit id="805f6e698e4e5a778689babdaaef18b2c9a9a771" translate="yes" xml:space="preserve">
          <source>Applications can determine if an object supports the AccessibleSelection interface by first obtaining its &lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContext&lt;/a&gt; (see &lt;a href=&quot;#Accessible&quot;&gt;Accessible&lt;/a&gt;) and then calling the &lt;code&gt;getAccessibleSelection&lt;/code&gt; method of &lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContext&lt;/a&gt;. If the return value is not &lt;code&gt;null&lt;/code&gt;, the object supports this interface.</source>
          <target state="translated">オブジェクトが最初に取得することによってAccessibleSelectionインタフェースをサポートするかどうかを判定することができる&lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContextを&lt;/a&gt;（参照&lt;a href=&quot;#Accessible&quot;&gt;アクセ&lt;/a&gt;）、次に呼び出す &lt;code&gt;getAccessibleSelection&lt;/code&gt; の方法&lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContextを&lt;/a&gt;。戻り値が &lt;code&gt;null&lt;/code&gt; でない場合、オブジェクトはこのインターフェースをサポートします。</target>
        </trans-unit>
        <trans-unit id="d9bef358388a33dfb6045c18f6c5fcfcb395e149" translate="yes" xml:space="preserve">
          <source>Applications can determine if an object supports the AccessibleText interface by first obtaining its &lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContext&lt;/a&gt; (see &lt;a href=&quot;#Accessible&quot;&gt;Accessible&lt;/a&gt;) and then calling the &lt;code&gt;getAccessibleText&lt;/code&gt; method of &lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContext&lt;/a&gt;. If the return value is not &lt;code&gt;null&lt;/code&gt;, the object supports this interface.</source>
          <target state="translated">オブジェクトが最初に取得することによってAccessibleTextインタフェースをサポートするかどうかを判定することができる&lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContextを&lt;/a&gt;（参照&lt;a href=&quot;#Accessible&quot;&gt;アクセ&lt;/a&gt;）、次に呼び出す &lt;code&gt;getAccessibleText&lt;/code&gt; の方法&lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContextを&lt;/a&gt;。戻り値が &lt;code&gt;null&lt;/code&gt; でない場合、オブジェクトはこのインターフェースをサポートします。</target>
        </trans-unit>
        <trans-unit id="cb769fe735c3907709ceb6b86e554b1edfc1f302" translate="yes" xml:space="preserve">
          <source>Applications can determine if an object supports the AccessibleValue interface by first obtaining its &lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContext&lt;/a&gt; (see &lt;a href=&quot;#Accessible&quot;&gt;Accessible&lt;/a&gt;) and then calling the &lt;code&gt;getAccessibleValue&lt;/code&gt; method of &lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContext&lt;/a&gt;. If the return value is not &lt;code&gt;null&lt;/code&gt;, the object supports this interface.</source>
          <target state="translated">オブジェクトが最初に取得することによりたAccessibleValueインタフェースをサポートするかどうかを判定することができる&lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContextを&lt;/a&gt;（参照&lt;a href=&quot;#Accessible&quot;&gt;アクセ&lt;/a&gt;）、次に呼び出す &lt;code&gt;getAccessibleValue&lt;/code&gt; の方法&lt;a href=&quot;#AccessibleContext&quot;&gt;AccessibleContextを&lt;/a&gt;。戻り値が &lt;code&gt;null&lt;/code&gt; でない場合、オブジェクトはこのインターフェースをサポートします。</target>
        </trans-unit>
        <trans-unit id="6c566cba08b160bf81fb42960c8496da9c9443bf" translate="yes" xml:space="preserve">
          <source>Applications can form a &lt;code&gt;WebRowSet&lt;/code&gt; object from the &lt;code&gt;CachedRowSet&lt;/code&gt; object returned by this method in order to export the &lt;code&gt;RowSet&lt;/code&gt; schema definition to XML for future use.</source>
          <target state="translated">アプリケーションは、将来使用するために &lt;code&gt;RowSet&lt;/code&gt; スキーマ定義をXMLにエクスポートするために、このメソッドによって返される &lt;code&gt;CachedRowSet&lt;/code&gt; オブジェクトから &lt;code&gt;WebRowSet&lt;/code&gt; オブジェクトを形成できます。</target>
        </trans-unit>
        <trans-unit id="848d5fe4fb8d8437ee08a3a497b4e4987d7d51dd" translate="yes" xml:space="preserve">
          <source>Applications can obtain instances of this class by calling &lt;a href=&quot;terminalfactory#terminals()&quot;&gt;TerminalFactory.terminals()&lt;/a&gt;.</source>
          <target state="translated">アプリケーションは、&lt;a href=&quot;terminalfactory#terminals()&quot;&gt;TerminalFactory.terminals（）を&lt;/a&gt;呼び出すことにより、このクラスのインスタンスを取得できます。</target>
        </trans-unit>
        <trans-unit id="99ab44a57e9dc2d6d20f4b64c0c5db1c3f3f24ee" translate="yes" xml:space="preserve">
          <source>Applications can override this method in subclasses of &lt;code&gt;ThreadGroup&lt;/code&gt; to provide alternative handling of uncaught exceptions.</source>
          <target state="translated">アプリケーションは、 &lt;code&gt;ThreadGroup&lt;/code&gt; のサブクラスでこのメソッドをオーバーライドして、キャッチされない例外の代替処理を提供できます。</target>
        </trans-unit>
        <trans-unit id="dc4b7664066003d5d1a8c56793978b9e21b5defa" translate="yes" xml:space="preserve">
          <source>Applications can send and receive per-message ancillary information through &lt;a href=&quot;messageinfo&quot;&gt;&lt;code&gt;MessageInfo&lt;/code&gt;&lt;/a&gt;. For example, the stream number that the message it is to be sent or received from. The SCTP stack is event driven and applications can receive notifications of certain SCTP events by invoking the &lt;code&gt;receive&lt;/code&gt; method of the SCTP channel with an appropriate &lt;a href=&quot;notificationhandler&quot;&gt;&lt;code&gt;notification handler&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3ed1edc0226a5b9fdb98ea718f5c59aef398e3b0" translate="yes" xml:space="preserve">
          <source>Applications can specify &lt;code&gt;ResourceBundle.Control&lt;/code&gt; instances returned by the &lt;code&gt;getControl&lt;/code&gt; factory methods or created from a subclass of &lt;code&gt;ResourceBundle.Control&lt;/code&gt; to customize the bundle loading process. The following are examples of changing the default bundle loading process.</source>
          <target state="translated">アプリケーションは、 &lt;code&gt;getControl&lt;/code&gt; ファクトリメソッドによって返される、または &lt;code&gt;ResourceBundle.Control&lt;/code&gt; のサブクラスから作成される &lt;code&gt;ResourceBundle.Control&lt;/code&gt; インスタンスを指定して、バンドルのロードプロセスをカスタマイズできます。以下は、デフォルトのバンドル読み込みプロセスを変更する例です。</target>
        </trans-unit>
        <trans-unit id="c0f4b582b88b3d6f1c2968f7d0f433534f21b7f4" translate="yes" xml:space="preserve">
          <source>Applications can subclass this class to indicate similar exceptions.</source>
          <target state="translated">アプリケーションは、同様の例外を示すためにこのクラスをサブクラス化することができます。</target>
        </trans-unit>
        <trans-unit id="b5639adf96080f7fa0d069edeab3220011ef933f" translate="yes" xml:space="preserve">
          <source>Applications can use a &lt;code&gt;StreamPrintService&lt;/code&gt; obtained from a factory in place of a &lt;code&gt;PrintService&lt;/code&gt; which represents a physical printer device.</source>
          <target state="translated">アプリケーションは、物理的なプリンターデバイスを表す &lt;code&gt;PrintService&lt;/code&gt; の代わりに、ファクトリから取得した &lt;code&gt;StreamPrintService&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="4a0deb30755c5eafb7d8d8ce8df9ecc03af2ede9" translate="yes" xml:space="preserve">
          <source>Applications have to ensure that exclusive access is correctly released. This can be achieved by executing the &lt;code&gt;beginExclusive()&lt;/code&gt; and &lt;code&gt;endExclusive&lt;/code&gt; calls in a &lt;code&gt;try ... finally&lt;/code&gt; block.</source>
          <target state="translated">アプリケーションは、排他的アクセスが正しく解放されていることを確認する必要があります。これは、 &lt;code&gt;try ... finally&lt;/code&gt; ブロックで &lt;code&gt;beginExclusive()&lt;/code&gt; および &lt;code&gt;endExclusive&lt;/code&gt; 呼び出しを実行することで実現できます。</target>
        </trans-unit>
        <trans-unit id="3963cd69ff2fadde570d87ead539525be2c79bb1" translate="yes" xml:space="preserve">
          <source>Applications implement subclasses of &lt;code&gt;ClassLoader&lt;/code&gt; in order to extend the manner in which the Java virtual machine dynamically loads classes.</source>
          <target state="translated">アプリケーションは、Java仮想マシンがクラスを動的にロードする方法を拡張するために、 &lt;code&gt;ClassLoader&lt;/code&gt; のサブクラスを実装します。</target>
        </trans-unit>
        <trans-unit id="be8a4811cc1fccfd081cd55755b371f53d7a6c32" translate="yes" xml:space="preserve">
          <source>Applications locate instances of this class by calling the &lt;a href=&quot;#lookupStreamPrintServiceFactories(javax.print.DocFlavor,java.lang.String)&quot;&gt;&lt;code&gt;lookupStreamPrintServiceFactories(DocFlavor, String)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">アプリケーションは、&lt;a href=&quot;#lookupStreamPrintServiceFactories(javax.print.DocFlavor,java.lang.String)&quot;&gt; &lt;code&gt;lookupStreamPrintServiceFactories(DocFlavor, String)&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことにより、このクラスのインスタンスを見つけます。</target>
        </trans-unit>
        <trans-unit id="3c4bc5621eb479f9d5877f4770a5ce46653ea10b" translate="yes" xml:space="preserve">
          <source>Applications locate instances of this class by calling the &lt;a href=&quot;streamprintservicefactory#lookupStreamPrintServiceFactories-javax.print.DocFlavor-java.lang.String-&quot;&gt;&lt;code&gt;lookupStreamPrintServiceFactories(DocFlavor, String)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">アプリケーションは、&lt;a href=&quot;streamprintservicefactory#lookupStreamPrintServiceFactories-javax.print.DocFlavor-java.lang.String-&quot;&gt; &lt;code&gt;lookupStreamPrintServiceFactories(DocFlavor, String)&lt;/code&gt; &lt;/a&gt;メソッドを呼び出して、このクラスのインスタンスを見つけます。</target>
        </trans-unit>
        <trans-unit id="493c346b5bac7af3f7bdee8467d56ce170c93671" translate="yes" xml:space="preserve">
          <source>Applications may not invoke this method while a parse is in progress (they should create a new Parser instead for each additional XML document). Once a parse is complete, an application may reuse the same Parser object, possibly with a different input source.</source>
          <target state="translated">アプリケーションは、パースが進行している間、このメソッドを呼び出してはいけません(それぞれの追加のXMLドキュメントのために新しいパーサーを作成しなければなりません)。パースが完了すると、アプリケーションは異なる入力ソースで同じパーサーオブジェクトを再利用することができます。</target>
        </trans-unit>
        <trans-unit id="7d09f696befdb9d57275ea4e57836585e74b89fd" translate="yes" xml:space="preserve">
          <source>Applications may not invoke this method while a parse is in progress (they should create a new XMLReader instead for each nested XML document). Once a parse is complete, an application may reuse the same XMLReader object, possibly with a different input source. Configuration of the XMLReader object (such as handler bindings and values established for feature flags and properties) is unchanged by completion of a parse, unless the definition of that aspect of the configuration explicitly specifies other behavior. (For example, feature flags or properties exposing characteristics of the document being parsed.)</source>
          <target state="translated">アプリケーションは、パースの実行中にこのメソッドを呼び出すことはできません (入れ子になった XML ドキュメントごとに新しい XMLReader を作成する必要があります)。パースが完了すると、アプリケーションは同じ XMLReader オブジェクトを、場合によっては異なる入力ソースで再利用することができます。XMLReader オブジェクトの設定 (ハンドラのバインディングや機能フラグやプロパティのために確立された値など)は、設定のその側面の定義で他の動作が明示的に指定されていない限り、パースが完了しても変更されません (例えば、機能フラグやプロパティなど)。(たとえば、解析されるドキュメントの特性を示す機能フラグやプロパティなど)。</target>
        </trans-unit>
        <trans-unit id="e78e65ff374391f1ab4f62a14ea9dc6e2e303832" translate="yes" xml:space="preserve">
          <source>Applications may override any default GUIs and provide their own controllers embedded in their own framework. All that is required is that the &lt;code&gt;activate&lt;/code&gt; method behave modally (not returning until either cancelled or committed), though it need not put up an explicitly modal dialog. Such a non-modal GUI component would be coded roughly as follows:</source>
          <target state="translated">アプリケーションは、デフォルトのGUIをオーバーライドし、独自のフレームワークに組み込まれた独自のコントローラーを提供できます。必要なのは、明示的にモーダルダイアログを表示する必要はありませんが、 &lt;code&gt;activate&lt;/code&gt; メソッドがモーダルに動作する（キャンセルまたはコミットされるまで戻らない）ことだけです。このような非モーダルGUIコンポーネントは、大まかに次のようにコーディングされます。</target>
        </trans-unit>
        <trans-unit id="4b587573b858a58a96fa5abac5ee6d8933768d15" translate="yes" xml:space="preserve">
          <source>Applications may override any default GUIs and provide their own controllers embedded in their own framework. All that is required is that the&lt;code&gt;activate&lt;/code&gt; method behave modally (not returning until either cancelled or committed), though it need not put up an explicitly modal dialog. Such a non-modal GUI component would be coded roughly as follows:</source>
          <target state="translated">アプリケーションは、デフォルトのGUIをオーバーライドし、独自のフレームワークに埋め込まれた独自のコントローラーを提供できます。必要なのは、明示的にモーダルダイアログを表示する必要はありませんが、 &lt;code&gt;activate&lt;/code&gt; メソッドはモーダルで動作すること（キャンセルまたはコミットされるまで返らない）だけです。このような非モーダルGUIコンポーネントは、おおよそ次のようにコーディングされます。</target>
        </trans-unit>
        <trans-unit id="12e0a28eb3da6b82bdbca83b99663ba8b878dc31" translate="yes" xml:space="preserve">
          <source>Applications may register a new or different entity resolver in the middle of a parse, and the SAX parser must begin using the new resolver immediately.</source>
          <target state="translated">アプリケーションは、パースの途中で新しいエンティティリゾルバまたは異なるエンティティリゾルバを登録することができ、SAXパーサは直ちに新しいリゾルバの使用を開始しなければなりません。</target>
        </trans-unit>
        <trans-unit id="cb83f4c4e3f9ac4e3ace42a53002fec40835c90b" translate="yes" xml:space="preserve">
          <source>Applications may register a new or different handler in the middle of a parse, and the SAX parser must begin using the new handler immediately.</source>
          <target state="translated">アプリケーションは、パースの途中で新しいハンドラまたは別のハンドラを登録することができ、SAX パーサは直ちに新しいハンドラの使用を開始しなければなりません。</target>
        </trans-unit>
        <trans-unit id="d5ea9e7d4716fdd3b357b22b1ab31a181081d121" translate="yes" xml:space="preserve">
          <source>Applications may register a new or different resolver in the middle of a parse, and the SAX parser must begin using the new resolver immediately.</source>
          <target state="translated">アプリケーションは、パースの途中で新しいリゾルバまたは別のリゾルバを登録することができ、SAX パーサは直ちに新しいリゾルバの使用を開始しなければなりません。</target>
        </trans-unit>
        <trans-unit id="8479d65a0cb75ab17ac2952d57865056d13ec785" translate="yes" xml:space="preserve">
          <source>Applications may use setPublicId to include a public identifier as well, or setEncoding to specify the character encoding, if known.</source>
          <target state="translated">アプリケーションは setPublicId を使用して公開識別子を含めたり、setEncoding を使用して文字エンコーディングを指定したりすることができます。</target>
        </trans-unit>
        <trans-unit id="f1ab22008fe450339467853779a771cc39c1b147" translate="yes" xml:space="preserve">
          <source>Applications may use the &lt;code&gt;DatabaseMetaData.getClientInfoProperties&lt;/code&gt; method to determine the client info properties supported by the driver and the maximum length that may be specified for each property.</source>
          <target state="translated">アプリケーションは、 &lt;code&gt;DatabaseMetaData.getClientInfoProperties&lt;/code&gt; メソッドを使用して、ドライバーでサポートされているクライアント情報プロパティと、各プロパティに指定できる最大長を決定できます。</target>
        </trans-unit>
        <trans-unit id="86abca252c8dc1fc986531ce260cb232f29e5150" translate="yes" xml:space="preserve">
          <source>Applications may use the &lt;code&gt;DatabaseMetaData.getClientInfoProperties&lt;/code&gt; method to determine the client info properties supported by the driver.</source>
          <target state="translated">アプリケーションは、 &lt;code&gt;DatabaseMetaData.getClientInfoProperties&lt;/code&gt; メソッドを使用して、ドライバーでサポートされているクライアント情報プロパティを判別できます。</target>
        </trans-unit>
        <trans-unit id="f8c1f1a0575644de66b4266591eea42ecef57ba2" translate="yes" xml:space="preserve">
          <source>Applications might choose to process delegated tasks in different threads. When an &lt;code&gt;SSLEngine&lt;/code&gt; is created, the current &lt;a href=&quot;../../../java/security/accesscontrolcontext&quot;&gt;&lt;code&gt;AccessControlContext&lt;/code&gt;&lt;/a&gt; is saved. All future delegated tasks will be processed using this context: that is, all access control decisions will be made using the context captured at engine creation.</source>
          <target state="translated">アプリケーションは、委任されたタスクを異なるスレッドで処理することを選択する場合があります。とき &lt;code&gt;SSLEngine&lt;/code&gt; のが作成され、現在&lt;a href=&quot;../../../java/security/accesscontrolcontext&quot;&gt; &lt;code&gt;AccessControlContext&lt;/code&gt; &lt;/a&gt;保存されます。今後のすべての委任タスクは、このコンテキストを使用して処理されます。つまり、すべてのアクセス制御の決定は、エンジンの作成時に取得されたコンテキストを使用して行われます。</target>
        </trans-unit>
        <trans-unit id="2c21b853c91398004c3c0d3991f71ec0b5c8541a" translate="yes" xml:space="preserve">
          <source>Applications must ensure that &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt;'s &lt;a href=&quot;../../../org/xml/sax/contenthandler#startPrefixMapping(java.lang.String,java.lang.String)&quot;&gt;&lt;code&gt;ContentHandler.startPrefixMapping(String,String)&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../../../org/xml/sax/contenthandler#endPrefixMapping(java.lang.String)&quot;&gt;&lt;code&gt;ContentHandler.endPrefixMapping(String)&lt;/code&gt;&lt;/a&gt; are invoked properly. Similarly, the user-specified &lt;a href=&quot;../../../org/xml/sax/contenthandler&quot;&gt;&lt;code&gt;ContentHandler&lt;/code&gt;&lt;/a&gt; will receive startPrefixMapping/endPrefixMapping events. If the &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt; introduces additional namespace bindings, the user-specified &lt;a href=&quot;../../../org/xml/sax/contenthandler&quot;&gt;&lt;code&gt;ContentHandler&lt;/code&gt;&lt;/a&gt; will receive additional startPrefixMapping/endPrefixMapping events.</source>
          <target state="translated">アプリケーションは、&lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;../../../org/xml/sax/contenthandler#startPrefixMapping(java.lang.String,java.lang.String)&quot;&gt; &lt;code&gt;ContentHandler.startPrefixMapping(String,String)&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../../../org/xml/sax/contenthandler#endPrefixMapping(java.lang.String)&quot;&gt; &lt;code&gt;ContentHandler.endPrefixMapping(String)&lt;/code&gt; &lt;/a&gt;が正しく呼び出されることを確認する必要があります。同様に、ユーザーが指定した&lt;a href=&quot;../../../org/xml/sax/contenthandler&quot;&gt; &lt;code&gt;ContentHandler&lt;/code&gt; &lt;/a&gt;のstartPrefixMapping /複数のendPrefixMappingイベントを受け取ります。場合&lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; &lt;/a&gt;追加の名前空間バインディングを導入し、ユーザーが指定した&lt;a href=&quot;../../../org/xml/sax/contenthandler&quot;&gt; &lt;code&gt;ContentHandler&lt;/code&gt; &lt;/a&gt;、イベントを複数のendPrefixMapping /追加のstartPrefixMappingを受け取ることになります。</target>
        </trans-unit>
        <trans-unit id="a4f08185d62df49415723581536be4829452fc6a" translate="yes" xml:space="preserve">
          <source>Applications needing to implement custom handling for external resources can implement this interface and register their implementation by setting the &quot;resource-resolver&quot; parameter of &lt;code&gt;DOMConfiguration&lt;/code&gt; objects attached to &lt;code&gt;LSParser&lt;/code&gt; and &lt;code&gt;LSSerializer&lt;/code&gt;. It can also be register on &lt;code&gt;DOMConfiguration&lt;/code&gt; objects attached to &lt;code&gt;Document&lt;/code&gt; if the &quot;LS&quot; feature is supported.</source>
          <target state="translated">外部リソースのカスタム処理を実装する必要があるアプリケーションは、 &lt;code&gt;LSParser&lt;/code&gt; および &lt;code&gt;LSSerializer&lt;/code&gt; にアタッチされた &lt;code&gt;DOMConfiguration&lt;/code&gt; オブジェクトの「resource-resolver」パラメーターを設定することにより、このインターフェースを実装し、実装を登録できます。「LS」機能がサポートされている場合は、 &lt;code&gt;Document&lt;/code&gt; 添付された &lt;code&gt;DOMConfiguration&lt;/code&gt; オブジェクトに登録することもできます。</target>
        </trans-unit>
        <trans-unit id="4272d2b9f815f524c6f692c44d6448c0e43bc509" translate="yes" xml:space="preserve">
          <source>Applications or applets that use an exemption mechanism may be granted stronger encryption capabilities than those which don't.</source>
          <target state="translated">免責メカニズムを使用するアプリケーションやアプレットは、そうでないものよりも強力な暗号化機能が付与される場合があります。</target>
        </trans-unit>
        <trans-unit id="d34e45e56b7625b178f394ccedba2bf275358f9a" translate="yes" xml:space="preserve">
          <source>Applications should normally obtain an instance from &lt;a href=&quot;zonerules&quot;&gt;&lt;code&gt;ZoneRules&lt;/code&gt;&lt;/a&gt;. This factory is only intended for use when creating &lt;a href=&quot;zonerules&quot;&gt;&lt;code&gt;ZoneRules&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">通常、アプリケーションは&lt;a href=&quot;zonerules&quot;&gt; &lt;code&gt;ZoneRules&lt;/code&gt; &lt;/a&gt;からインスタンスを取得する必要があります。このファクトリは、&lt;a href=&quot;zonerules&quot;&gt; &lt;code&gt;ZoneRules&lt;/code&gt; の&lt;/a&gt;作成時にのみ使用することを目的としています。</target>
        </trans-unit>
        <trans-unit id="856e62d7222e9db0956537129ad5bbf3467b3d25" translate="yes" xml:space="preserve">
          <source>Applications should not add children directly to the scrollpane.</source>
          <target state="translated">アプリケーションは、スクロールペインに直接子を追加してはいけません。</target>
        </trans-unit>
        <trans-unit id="962732fa9130bc39a7c591ac82bbfe99253b366a" translate="yes" xml:space="preserve">
          <source>Applications should not create their own file descriptors.</source>
          <target state="translated">アプリケーションは、独自のファイルディスクリプタを作成してはいけません。</target>
        </trans-unit>
        <trans-unit id="011adffeaaf1e10d2cacbfcf3b993f3a66b5e494" translate="yes" xml:space="preserve">
          <source>Applications should not normally invoke this method directly.</source>
          <target state="translated">アプリケーションは通常、このメソッドを直接呼び出すべきではありません。</target>
        </trans-unit>
        <trans-unit id="bff34b849d467e1176772314869bdf7c54563ef2" translate="yes" xml:space="preserve">
          <source>Applications should throw instances of this class to indicate other illegal uses of the &lt;code&gt;null&lt;/code&gt; object. &lt;code&gt;NullPointerException&lt;/code&gt; objects may be constructed by the virtual machine as if &lt;a href=&quot;throwable#%3Cinit%3E(java.lang.String,java.lang.Throwable,boolean,boolean)&quot;&gt;suppression were disabled and/or the stack trace was not writable&lt;/a&gt;.</source>
          <target state="translated">アプリケーションは、このクラスのインスタンスをスローして、 &lt;code&gt;null&lt;/code&gt; オブジェクトの他の不正な使用を示す必要があります。 &lt;code&gt;NullPointerException&lt;/code&gt; オブジェクトは、&lt;a href=&quot;throwable#%3Cinit%3E(java.lang.String,java.lang.Throwable,boolean,boolean)&quot;&gt;抑制が無効になっているか、スタックトレースが書き込み可能でなかったかの&lt;/a&gt;ように、仮想マシンによって構築される場合があります。</target>
        </trans-unit>
        <trans-unit id="1c6a7fe42dc9ff4200bf574b34466584498c0fd3" translate="yes" xml:space="preserve">
          <source>Applications should throw instances of this class to indicate other illegal uses of the &lt;code&gt;null&lt;/code&gt; object. &lt;code&gt;NullPointerException&lt;/code&gt; objects may be constructed by the virtual machine as if &lt;a href=&quot;throwable#Throwable-java.lang.String-java.lang.Throwable-boolean-boolean-&quot;&gt;suppression were disabled and/or the stack trace was not writable&lt;/a&gt;.</source>
          <target state="translated">アプリケーションは、このクラスのインスタンスをスローして、 &lt;code&gt;null&lt;/code&gt; オブジェクトの他の不正な使用を示す必要があります。 &lt;code&gt;NullPointerException&lt;/code&gt; オブジェクトは、仮想マシンによって&lt;a href=&quot;throwable#Throwable-java.lang.String-java.lang.Throwable-boolean-boolean-&quot;&gt;抑制が無効になっているか、スタックトレースが書き込み不可である&lt;/a&gt;かのように構築される場合があります。</target>
        </trans-unit>
        <trans-unit id="fe25f35fb35beeb62ad61ab8f11a46b5fdc2ce40" translate="yes" xml:space="preserve">
          <source>Applications that need to define a subclass of &lt;code&gt;InputStream&lt;/code&gt; must always provide a method that returns the next byte of input.</source>
          <target state="translated">&lt;code&gt;InputStream&lt;/code&gt; のサブクラスを定義する必要があるアプリケーションは、入力の次のバイトを返すメソッドを常に提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="31880f2fe972133fb48d5fdc09b7d923da0cb8a5" translate="yes" xml:space="preserve">
          <source>Applications that need to define a subclass of &lt;code&gt;OutputStream&lt;/code&gt; must always provide at least a method that writes one byte of output.</source>
          <target state="translated">&lt;code&gt;OutputStream&lt;/code&gt; のサブクラスを定義する必要があるアプリケーションは、常に少なくとも1バイトの出力を書き込むメソッドを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="e8847b03a0b6b50f755539e3509745b4d6d7a081" translate="yes" xml:space="preserve">
          <source>Applications that override the &lt;code&gt;clone&lt;/code&gt; method can also throw this exception to indicate that an object could not or should not be cloned.</source>
          <target state="translated">&lt;code&gt;clone&lt;/code&gt; メソッドをオーバーライドするアプリケーションもこの例外をスローして、オブジェクトを複製できなかったか、または複製してはならないことを示します。</target>
        </trans-unit>
        <trans-unit id="0130a94bc9bd195ae61ee9f02357e4650f694ab4" translate="yes" xml:space="preserve">
          <source>Applications that use Robot for purposes other than self-testing should handle these error conditions gracefully.</source>
          <target state="translated">自己テスト以外の目的でロボットを使用するアプリケーションは、これらのエラー条件を優雅に処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="bdfc5456438722c57e4af0077c329cc9dc195e2e" translate="yes" xml:space="preserve">
          <source>Applications that want a stricter policy should override this method. If this method is overridden, the method that overrides it should additionally check to see if the calling thread has the &lt;code&gt;RuntimePermission(&quot;modifyThread&quot;)&lt;/code&gt; permission, and if so, return silently. This is to ensure that code granted that permission (such as the JDK itself) is allowed to manipulate any thread.</source>
          <target state="translated">より厳しいポリシーが必要なアプリケーションは、このメソッドをオーバーライドする必要があります。このメソッドがオーバーライドされている場合、オーバーライドするメソッドは、呼び出し元のスレッドが &lt;code&gt;RuntimePermission(&quot;modifyThread&quot;)&lt;/code&gt; 権限を持っているかどうかをさらに確認し、そうである場合はサイレントに戻ります。これは、その権限を付与されたコード（JDK自体など）が任意のスレッドを操作できるようにするためです。</target>
        </trans-unit>
        <trans-unit id="34e2d7454bea95269be25ddc380b555451ae0748" translate="yes" xml:space="preserve">
          <source>Applications that want a stricter policy should override this method. If this method is overridden, the method that overrides it should additionally check to see if the calling thread has the &lt;code&gt;RuntimePermission(&quot;modifyThreadGroup&quot;)&lt;/code&gt; permission, and if so, return silently. This is to ensure that code granted that permission (such as the JDK itself) is allowed to manipulate any thread.</source>
          <target state="translated">より厳しいポリシーが必要なアプリケーションは、このメソッドをオーバーライドする必要があります。このメソッドがオーバーライドされている場合、オーバーライドするメソッドは、呼び出し元のスレッドが &lt;code&gt;RuntimePermission(&quot;modifyThreadGroup&quot;)&lt;/code&gt; 権限を持っているかどうかをさらに確認し、持っている場合はサイレントに戻ります。これは、その権限を付与されたコード（JDK自体など）が任意のスレッドを操作できるようにするためです。</target>
        </trans-unit>
        <trans-unit id="c5fcbc2973f8b1d1a961945bac1ca8ebc1df910f" translate="yes" xml:space="preserve">
          <source>Applications use only the static methods of this abstract class. The instance methods are implemented by a service provider in a subclass and the unification of the results from all installed lookup classes are reported by the static methods of this class when called by the application.</source>
          <target state="translated">アプリケーションは、この抽象クラスの静的メソッドのみを使用します。インスタンスメソッドはサブクラスのサービスプロバイダによって実装され、インストールされたすべてのルックアップクラスからの結果の統一は、アプリケーションによって呼び出されたときにこのクラスの静的メソッドによって報告されます。</target>
        </trans-unit>
        <trans-unit id="71f0645594ce5b298e9e02a37a9af1da7ec30fa8" translate="yes" xml:space="preserve">
          <source>Applications use the &lt;code&gt;DataSource&lt;/code&gt; and &lt;code&gt;RowSet&lt;/code&gt; APIs directly, but the connection pooling and distributed transaction APIs are used internally by the middle-tier infrastructure.</source>
          <target state="translated">アプリケーションは &lt;code&gt;DataSource&lt;/code&gt; APIと &lt;code&gt;RowSet&lt;/code&gt; APIを直接使用しますが、接続プールと分散トランザクションAPIは中間層インフラストラクチャによって内部的に使用されます。</target>
        </trans-unit>
        <trans-unit id="0b3abfab5d4a29aa5145237a84cef9c01d1b2a62" translate="yes" xml:space="preserve">
          <source>Applications use this class by overriding &lt;a href=&quot;#getPasswordAuthentication()&quot;&gt;&lt;code&gt;getPasswordAuthentication()&lt;/code&gt;&lt;/a&gt; in a sub-class. This method will typically use the various getXXX() accessor methods to get information about the entity requesting authentication. It must then acquire a username and password either by interacting with the user or through some other non-interactive means. The credentials are then returned as a &lt;a href=&quot;passwordauthentication&quot;&gt;&lt;code&gt;PasswordAuthentication&lt;/code&gt;&lt;/a&gt; return value.</source>
          <target state="translated">アプリケーションは、サブクラスの&lt;a href=&quot;#getPasswordAuthentication()&quot;&gt; &lt;code&gt;getPasswordAuthentication()&lt;/code&gt; &lt;/a&gt;をオーバーライドすることにより、このクラスを使用します。このメソッドは通常、さまざまなgetXXX（）アクセサーメソッドを使用して、認証を要求しているエンティティに関する情報を取得します。次に、ユーザーと対話するか、その他の非対話型の手段を使用して、ユーザー名とパスワードを取得する必要があります。その後、資格情報は&lt;a href=&quot;passwordauthentication&quot;&gt; &lt;code&gt;PasswordAuthentication&lt;/code&gt; の&lt;/a&gt;戻り値として返されます。</target>
        </trans-unit>
        <trans-unit id="8085b2ec40f77a6963a9d772f8821a4a760738cb" translate="yes" xml:space="preserve">
          <source>Applications use this class by overriding &lt;a href=&quot;authenticator#getPasswordAuthentication--&quot;&gt;&lt;code&gt;getPasswordAuthentication()&lt;/code&gt;&lt;/a&gt; in a sub-class. This method will typically use the various getXXX() accessor methods to get information about the entity requesting authentication. It must then acquire a username and password either by interacting with the user or through some other non-interactive means. The credentials are then returned as a &lt;a href=&quot;passwordauthentication&quot;&gt;&lt;code&gt;PasswordAuthentication&lt;/code&gt;&lt;/a&gt; return value.</source>
          <target state="translated">アプリケーションは、サブクラスで&lt;a href=&quot;authenticator#getPasswordAuthentication--&quot;&gt; &lt;code&gt;getPasswordAuthentication()&lt;/code&gt; &lt;/a&gt;をオーバーライドすることにより、このクラスを使用します。このメソッドは通常、さまざまなgetXXX（）アクセサーメソッドを使用して、認証を要求するエンティティに関する情報を取得します。次に、ユーザーと対話するか、他の非対話的な方法でユーザー名とパスワードを取得する必要があります。次に、資格情報が&lt;a href=&quot;passwordauthentication&quot;&gt; &lt;code&gt;PasswordAuthentication&lt;/code&gt; の&lt;/a&gt;戻り値として返されます。</target>
        </trans-unit>
        <trans-unit id="d9af378508928918978a91b776f2d39c8dbd80a3" translate="yes" xml:space="preserve">
          <source>Applications using this factory method are providing hints for an internal session reuse strategy.</source>
          <target state="translated">このファクトリーメソッドを使用するアプリケーションは、内部セッション再利用戦略のヒントを提供しています。</target>
        </trans-unit>
        <trans-unit id="a41b269f9b80c25739f1b1837b9eea19b5c0ff21" translate="yes" xml:space="preserve">
          <source>Applications using this factory method are providing no hints for an internal session reuse strategy. If hints are desired, &lt;a href=&quot;#createSSLEngine(java.lang.String,int)&quot;&gt;&lt;code&gt;createSSLEngine(String, int)&lt;/code&gt;&lt;/a&gt; should be used instead.</source>
          <target state="translated">このファクトリメソッドを使用するアプリケーションは、内部セッションの再利用戦略のヒントを提供していません。ヒントが必要な場合は、&lt;a href=&quot;#createSSLEngine(java.lang.String,int)&quot;&gt; &lt;code&gt;createSSLEngine(String, int)&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e2e3472131ccf5e729e75486c663694dc0281794" translate="yes" xml:space="preserve">
          <source>Applications using this factory method are providing no hints for an internal session reuse strategy. If hints are desired, &lt;a href=&quot;#engineCreateSSLEngine(java.lang.String,int)&quot;&gt;&lt;code&gt;engineCreateSSLEngine(String, int)&lt;/code&gt;&lt;/a&gt; should be used instead.</source>
          <target state="translated">このファクトリメソッドを使用するアプリケーションは、内部セッションの再利用戦略のヒントを提供していません。ヒントが必要な場合は、&lt;a href=&quot;#engineCreateSSLEngine(java.lang.String,int)&quot;&gt; &lt;code&gt;engineCreateSSLEngine(String, int)&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ed7bfe89dc2287b744eafdd591732d2e9fb94e52" translate="yes" xml:space="preserve">
          <source>Applications using this factory method are providing no hints for an internal session reuse strategy. If hints are desired, &lt;a href=&quot;sslcontext#createSSLEngine-java.lang.String-int-&quot;&gt;&lt;code&gt;createSSLEngine(String, int)&lt;/code&gt;&lt;/a&gt; should be used instead.</source>
          <target state="translated">このファクトリメソッドを使用するアプリケーションは、内部セッション再利用戦略のヒントを提供していません。ヒントが必要な場合は、&lt;a href=&quot;sslcontext#createSSLEngine-java.lang.String-int-&quot;&gt; &lt;code&gt;createSSLEngine(String, int)&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="6739fbed1280ca989694c5498cfd3c0394faccc4" translate="yes" xml:space="preserve">
          <source>Applications using this factory method are providing no hints for an internal session reuse strategy. If hints are desired, &lt;a href=&quot;sslcontextspi#engineCreateSSLEngine-java.lang.String-int-&quot;&gt;&lt;code&gt;engineCreateSSLEngine(String, int)&lt;/code&gt;&lt;/a&gt; should be used instead.</source>
          <target state="translated">このファクトリメソッドを使用するアプリケーションは、内部セッション再利用戦略のヒントを提供していません。ヒントが必要な場合は、&lt;a href=&quot;sslcontextspi#engineCreateSSLEngine-java.lang.String-int-&quot;&gt; &lt;code&gt;engineCreateSSLEngine(String, int)&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="174371772db23b6e9faea3024b79602067942aaa" translate="yes" xml:space="preserve">
          <source>Applications will create a credential object passing the desired parameters. The application can then use the query methods to obtain specific information about the instantiated credential object. When the credential is no longer needed, the application should call the &lt;a href=&quot;#dispose()&quot;&gt;&lt;code&gt;dispose&lt;/code&gt;&lt;/a&gt; method to release any resources held by the credential object and to destroy any cryptographically sensitive information.</source>
          <target state="translated">アプリケーションは、必要なパラメータを渡す資格情報オブジェクトを作成します。次に、アプリケーションはクエリメソッドを使用して、インスタンス化された資格情報オブジェクトに関する特定の情報を取得できます。資格情報が不要になったら、アプリケーションは&lt;a href=&quot;#dispose()&quot;&gt; &lt;code&gt;dispose&lt;/code&gt; &lt;/a&gt;メソッドを呼び出して、資格情報オブジェクトが保持しているリソースを解放し、暗号化された機密情報を破棄する必要があります。</target>
        </trans-unit>
        <trans-unit id="6ad0bc9700b7c348c0ae0c2e93eee2621ce05f25" translate="yes" xml:space="preserve">
          <source>Applications working with file paths and file URIs should take great care to use the appropriate methods to convert between the two. The &lt;a href=&quot;../nio/file/path#of(java.net.URI)&quot;&gt;&lt;code&gt;Path.of(URI)&lt;/code&gt;&lt;/a&gt; factory method and the &lt;a href=&quot;../io/file#%3Cinit%3E(java.net.URI)&quot;&gt;&lt;code&gt;File(URI)&lt;/code&gt;&lt;/a&gt; constructor can be used to create &lt;a href=&quot;../nio/file/path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../io/file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; objects from a file URI. &lt;a href=&quot;../nio/file/path#toUri()&quot;&gt;&lt;code&gt;Path.toUri()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../io/file#toURI()&quot;&gt;&lt;code&gt;File.toURI()&lt;/code&gt;&lt;/a&gt; can be used to create a &lt;a href=&quot;uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt; from a file path, which can be converted to URL using &lt;a href=&quot;uri#toURL()&quot;&gt;&lt;code&gt;URI.toURL()&lt;/code&gt;&lt;/a&gt;. Applications should never try to &lt;a href=&quot;#%3Cinit%3E(java.lang.String,java.lang.String,java.lang.String)&quot;&gt;construct&lt;/a&gt; or &lt;a href=&quot;#%3Cinit%3E(java.lang.String)&quot;&gt;parse&lt;/a&gt; a &lt;code&gt;URL&lt;/code&gt; from the direct string representation of a &lt;code&gt;File&lt;/code&gt; or &lt;code&gt;Path&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bcd42fa637702403f195edee13144d1173a8ef22" translate="yes" xml:space="preserve">
          <source>Applications working with file paths and file URIs should take great care to use the appropriate methods to convert between the two. The &lt;a href=&quot;../nio/file/path#of(java.net.URI)&quot;&gt;&lt;code&gt;Path.of(URI)&lt;/code&gt;&lt;/a&gt; factory method and the &lt;a href=&quot;../io/file#%3Cinit%3E(java.net.URI)&quot;&gt;&lt;code&gt;File(URI)&lt;/code&gt;&lt;/a&gt; constructor can be used to create &lt;a href=&quot;../nio/file/path&quot;&gt;&lt;code&gt;Path&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../io/file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; objects from a file URI. &lt;a href=&quot;../nio/file/path#toUri()&quot;&gt;&lt;code&gt;Path.toUri()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../io/file#toURI()&quot;&gt;&lt;code&gt;File.toURI()&lt;/code&gt;&lt;/a&gt; can be used to create a &lt;a href=&quot;uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt; from a file path. Applications should never try to &lt;a href=&quot;#%3Cinit%3E(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)&quot;&gt;construct&lt;/a&gt;, &lt;a href=&quot;#%3Cinit%3E(java.lang.String)&quot;&gt;parse&lt;/a&gt;, or &lt;a href=&quot;#resolve(java.lang.String)&quot;&gt;resolve&lt;/a&gt; a &lt;code&gt;URI&lt;/code&gt; from the direct string representation of a &lt;code&gt;File&lt;/code&gt; or &lt;code&gt;Path&lt;/code&gt; instance.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7887c222c6fe399a39e8e8a65758153aeb03db5e" translate="yes" xml:space="preserve">
          <source>Applies SSLParameters to newly accepted connections.</source>
          <target state="translated">新しく受け入れた接続にSSLParametersを適用します。</target>
        </trans-unit>
        <trans-unit id="79ba78d7bcdd2ef1aa6315a8bc3d5a4431396b29" translate="yes" xml:space="preserve">
          <source>Applies SSLParameters to this engine.</source>
          <target state="translated">このエンジンにSSLParametersを適用します。</target>
        </trans-unit>
        <trans-unit id="e85201a8248d6af8e821fba56acc7387166ad503" translate="yes" xml:space="preserve">
          <source>Applies SSLParameters to this socket.</source>
          <target state="translated">このソケットにSSLパラメータを適用します。</target>
        </trans-unit>
        <trans-unit id="a7589e9feb0956faa7e2cd8d1076a095a2bc0a62" translate="yes" xml:space="preserve">
          <source>Applies a conversion from a source type to a destination type.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b85f712b61c24db5923e83d81bcc03c037eb36a" translate="yes" xml:space="preserve">
          <source>Applies a visitor to this directive.</source>
          <target state="translated">このディレクティブに訪問者を適用します。</target>
        </trans-unit>
        <trans-unit id="f70e5aa14b98d061b144c57c1d08e4e87dea1418" translate="yes" xml:space="preserve">
          <source>Applies a visitor to this element.</source>
          <target state="translated">この要素に訪問者を適用します。</target>
        </trans-unit>
        <trans-unit id="69489835c4b5d6eb7e6d279c3ea83008ccf5e5c3" translate="yes" xml:space="preserve">
          <source>Applies a visitor to this type.</source>
          <target state="translated">このタイプに訪問者を適用します。</target>
        </trans-unit>
        <trans-unit id="1411b1eda0cd57f82271f22c2d75ff3043a054c4" translate="yes" xml:space="preserve">
          <source>Applies a visitor to this value.</source>
          <target state="translated">この値に訪問者を適用します。</target>
        </trans-unit>
        <trans-unit id="1f7a321f950b56b1d86afe6dff8ec36119d0fc48" translate="yes" xml:space="preserve">
          <source>Applies argument filters to both the invocation and the guard (if it exists and has at least &lt;code&gt;pos + 1&lt;/code&gt; parameters) with &lt;a href=&quot;../../../../java.base/java/lang/invoke/methodhandles#filterArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle...)&quot;&gt;&lt;code&gt;MethodHandles.filterArguments(MethodHandle, int, MethodHandle...)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="e8e3598101e8440656d941dd38f4235e12b1316f" translate="yes" xml:space="preserve">
          <source>Applies capture conversion to a type.</source>
          <target state="translated">型へのキャプチャ変換を適用します。</target>
        </trans-unit>
        <trans-unit id="5cf560b44948d66af3e69c3ef06fa9ba31c7cb6c" translate="yes" xml:space="preserve">
          <source>Applies per-message security services over the established security context using streams. The method will return a token with the application supplied data and a cryptographic MIC over it. The data may be encrypted if confidentiality (privacy) was requested. This method is equivalent to the byte array based &lt;a href=&quot;#wrap(byte%5B%5D,int,int,org.ietf.jgss.MessageProp)&quot;&gt;&lt;code&gt;wrap&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ストリームを使用して、確立されたセキュリティコンテキストにメッセージごとのセキュリティサービスを適用します。このメソッドは、アプリケーションが提供するデータとその上の暗号化MICを含むトークンを返します。機密性（プライバシー）が要求された場合、データは暗号化される可能性があります。このメソッドは、バイト配列ベースの&lt;a href=&quot;#wrap(byte%5B%5D,int,int,org.ietf.jgss.MessageProp)&quot;&gt; &lt;code&gt;wrap&lt;/code&gt; &lt;/a&gt;メソッドと同等です。</target>
        </trans-unit>
        <trans-unit id="d50cd1691b9234a78c92d28bb0b2c107c36c943c" translate="yes" xml:space="preserve">
          <source>Applies per-message security services over the established security context.</source>
          <target state="translated">確立されたセキュリティコンテキスト上で、メッセージごとのセキュリティサービスを適用します。</target>
        </trans-unit>
        <trans-unit id="9b0ac9b16527196413ad532b5060c5eb8219b1e0" translate="yes" xml:space="preserve">
          <source>Applies per-message security services over the established security context. The method will return a token with the application supplied data and a cryptographic MIC over it. The data may be encrypted if confidentiality (privacy) was requested.</source>
          <target state="translated">確立されたセキュリティコンテキスト上で、メッセージごとのセキュリティサービスを適用します。このメソッドは、アプリケーションから提供されたデータとその上の暗号化 MIC を含むトークンを返します。機密性 (プライバシー)が要求された場合、データは暗号化されます。</target>
        </trans-unit>
        <trans-unit id="c3d959679821060b0a8dda5f78ba65f52b2da2c7" translate="yes" xml:space="preserve">
          <source>Applies the &lt;code&gt;AttributeValueExp&lt;/code&gt; on an MBean.</source>
          <target state="translated">MBeanに &lt;code&gt;AttributeValueExp&lt;/code&gt; を適用します。</target>
        </trans-unit>
        <trans-unit id="22c9e18e5a5fe0b138e9c7059d5c927f19cffe9b" translate="yes" xml:space="preserve">
          <source>Applies the &lt;code&gt;AttributeValueExp&lt;/code&gt; on an MBean. This method calls &lt;a href=&quot;#getAttribute(javax.management.ObjectName)&quot;&gt;&lt;code&gt;getAttribute(name)&lt;/code&gt;&lt;/a&gt; and wraps the result as a &lt;code&gt;ValueExp&lt;/code&gt;. The value returned by &lt;code&gt;getAttribute&lt;/code&gt; must be a &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, or &lt;code&gt;Boolean&lt;/code&gt;; otherwise this method throws a &lt;code&gt;BadAttributeValueExpException&lt;/code&gt;, which will cause the containing query to be false for this &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">MBeanに &lt;code&gt;AttributeValueExp&lt;/code&gt; を適用します。このメソッドは&lt;a href=&quot;#getAttribute(javax.management.ObjectName)&quot;&gt; &lt;code&gt;getAttribute(name)&lt;/code&gt; &lt;/a&gt;を呼び出し、結果を &lt;code&gt;ValueExp&lt;/code&gt; としてラップします。 &lt;code&gt;getAttribute&lt;/code&gt; によって返される値は、 &lt;code&gt;Number&lt;/code&gt; 、 &lt;code&gt;String&lt;/code&gt; 、または &lt;code&gt;Boolean&lt;/code&gt; 必要があります。それ以外の場合、このメソッドは &lt;code&gt;BadAttributeValueExpException&lt;/code&gt; をスローします。これにより、この &lt;code&gt;name&lt;/code&gt; に対して含まれているクエリがfalseになります。</target>
        </trans-unit>
        <trans-unit id="90ba83081f32c8fadaa4c2055d819807f1fe71e0" translate="yes" xml:space="preserve">
          <source>Applies the &lt;code&gt;AttributeValueExp&lt;/code&gt; on an MBean. This method calls &lt;a href=&quot;attributevalueexp#getAttribute-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getAttribute(name)&lt;/code&gt;&lt;/a&gt; and wraps the result as a &lt;code&gt;ValueExp&lt;/code&gt;. The value returned by &lt;code&gt;getAttribute&lt;/code&gt; must be a &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;String&lt;/code&gt;, or &lt;code&gt;Boolean&lt;/code&gt;; otherwise this method throws a &lt;code&gt;BadAttributeValueExpException&lt;/code&gt;, which will cause the containing query to be false for this &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">MBeanに &lt;code&gt;AttributeValueExp&lt;/code&gt; を適用します。このメソッドは&lt;a href=&quot;attributevalueexp#getAttribute-javax.management.ObjectName-&quot;&gt; &lt;code&gt;getAttribute(name)&lt;/code&gt; &lt;/a&gt;を呼び出し、結果を &lt;code&gt;ValueExp&lt;/code&gt; としてラップします。 &lt;code&gt;getAttribute&lt;/code&gt; によって返される値は、 &lt;code&gt;Number&lt;/code&gt; 、 &lt;code&gt;String&lt;/code&gt; 、または &lt;code&gt;Boolean&lt;/code&gt; である必要があります。そうでない場合、このメソッドは &lt;code&gt;BadAttributeValueExpException&lt;/code&gt; をスローします。これにより、この &lt;code&gt;name&lt;/code&gt; に対して含まれているクエリがfalseになります。</target>
        </trans-unit>
        <trans-unit id="3f54a850faf032d7ed918850b33bbeda8b2dd173" translate="yes" xml:space="preserve">
          <source>Applies the QueryExp on an MBean.</source>
          <target state="translated">MBean に QueryExp を適用します。</target>
        </trans-unit>
        <trans-unit id="a94f537ce9ac93295258fdd4457c71a11f2f575a" translate="yes" xml:space="preserve">
          <source>Applies the ValueExp on a MBean.</source>
          <target state="translated">MBean に ValueExp を適用します。</target>
        </trans-unit>
        <trans-unit id="56486964cd814481b6bf81aa7aec5bbd43188a97" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;code&gt;Predicate&lt;/code&gt; object to this &lt;code&gt;FilteredRowSet&lt;/code&gt; object.</source>
          <target state="translated">指定された &lt;code&gt;Predicate&lt;/code&gt; オブジェクトをこの &lt;code&gt;FilteredRowSet&lt;/code&gt; オブジェクトに適用します。</target>
        </trans-unit>
        <trans-unit id="733b5fca05a0efaf1bbfcaf0a96624fd1615014c" translate="yes" xml:space="preserve">
          <source>Applies the given &lt;code&gt;Predicate&lt;/code&gt; object to this &lt;code&gt;FilteredRowSet&lt;/code&gt; object. The filter applies controls both to inbound and outbound views, constraining which rows are visible and which rows can be manipulated.</source>
          <target state="translated">指定された &lt;code&gt;Predicate&lt;/code&gt; オブジェクトをこの &lt;code&gt;FilteredRowSet&lt;/code&gt; オブジェクトに適用します。フィルタは、インバウンドビューとアウトバウンドビューの両方にコントロールを適用し、表示される行と操作できる行を制限します。</target>
        </trans-unit>
        <trans-unit id="435f7d09af7ca8afbabdf439428f18a6d6f1b3ad" translate="yes" xml:space="preserve">
          <source>Applies the given attributes to character content.</source>
          <target state="translated">与えられた属性を文字の内容に適用します。</target>
        </trans-unit>
        <trans-unit id="6eadd3e7034c7bed306e72eb53d5a4cbc1d23dbd" translate="yes" xml:space="preserve">
          <source>Applies the given attributes to character content. If there is a selection, the attributes are applied to the selection range. If there is no selection, the attributes are applied to the input attribute set which defines the attributes for any new text that gets inserted.</source>
          <target state="translated">与えられた属性を文字の内容に適用します。選択範囲がある場合、属性は選択範囲に適用されます。選択範囲がない場合、属性は、挿入される新しいテキストの属性を定義する入力属性セットに適用されます。</target>
        </trans-unit>
        <trans-unit id="e1c5a7a8b1e5c1f8a6e8e37e307f22a11ca31c0f" translate="yes" xml:space="preserve">
          <source>Applies the given attributes to paragraphs.</source>
          <target state="translated">与えられた属性を段落に適用します。</target>
        </trans-unit>
        <trans-unit id="2f8651bf3405a1d9ccef675a7c94e72753149f9e" translate="yes" xml:space="preserve">
          <source>Applies the given attributes to paragraphs. If there is a selection, the attributes are applied to the paragraphs that intersect the selection. If there is no selection, the attributes are applied to the paragraph at the current caret position.</source>
          <target state="translated">与えられた属性を段落に適用します。選択範囲がある場合は、その選択範囲と交差する段落に属性が適用されます。選択範囲がない場合は、現在のキャレット位置の段落に属性が適用されます。</target>
        </trans-unit>
        <trans-unit id="fce093abc16868f06fa6d0cf14fcf88a3bd80de1" translate="yes" xml:space="preserve">
          <source>Applies the given attributes to paragraphs. If there is a selection, the attributes are applied to the paragraphs that intersect the selection. if there is no selection, the attributes are applied to the paragraph at the current caret position.</source>
          <target state="translated">与えられた属性を段落に適用します。選択範囲がある場合は、その選択範囲と交差する段落に属性を適用します。 選択範囲がない場合は、現在のキャレット位置の段落に属性を適用します。</target>
        </trans-unit>
        <trans-unit id="5431418c913d0cd8d58500882e9a196a6df9ac82" translate="yes" xml:space="preserve">
          <source>Applies the given function to the stream of &lt;code&gt;StackFrame&lt;/code&gt;s for the current thread, traversing from the top frame of the stack, which is the method calling this &lt;code&gt;walk&lt;/code&gt; method.</source>
          <target state="translated">指定された関数を現在のスレッドの &lt;code&gt;StackFrame&lt;/code&gt; のストリームに適用し、スタックの最上位フレームからトラバースします。これは、この &lt;code&gt;walk&lt;/code&gt; メソッドを呼び出すメソッドです。</target>
        </trans-unit>
        <trans-unit id="68ea95622c17c3501a71d389933a811f354722ff" translate="yes" xml:space="preserve">
          <source>Applies the given localized pattern string to this date format.</source>
          <target state="translated">指定された地域化されたパターン文字列をこの日付フォーマットに適用します。</target>
        </trans-unit>
        <trans-unit id="97ba7da6b18d975571d7145878622f49090f5a6c" translate="yes" xml:space="preserve">
          <source>Applies the given pattern string to this date format.</source>
          <target state="translated">与えられたパターン文字列をこの日付フォーマットに適用します。</target>
        </trans-unit>
        <trans-unit id="092f9872dea41f81d6bea1b5c9bf378fd0d9503d" translate="yes" xml:space="preserve">
          <source>Applies this function to the given argument.</source>
          <target state="translated">この関数を与えられた引数に適用します。</target>
        </trans-unit>
        <trans-unit id="465e66a74ccd22473b9e814ef500f5fd24a7056c" translate="yes" xml:space="preserve">
          <source>Applies this function to the given arguments.</source>
          <target state="translated">この関数は、与えられた引数に適用されます。</target>
        </trans-unit>
        <trans-unit id="1c1cc9ca4c4938bb046e1f73de81d33c228fa5b1" translate="yes" xml:space="preserve">
          <source>Applies this operator to the given operand.</source>
          <target state="translated">与えられたオペランドにこの演算子を適用します。</target>
        </trans-unit>
        <trans-unit id="09e5471b52d0066b4fed63fbe930ae9e7f66a7de" translate="yes" xml:space="preserve">
          <source>Applies this operator to the given operands.</source>
          <target state="translated">与えられたオペランドにこの演算子を適用します。</target>
        </trans-unit>
        <trans-unit id="dd284bad21c47b1ab995e58d8cf866b44c9948b5" translate="yes" xml:space="preserve">
          <source>Apply the colors to the destination drawing surface using the current &lt;a href=&quot;composite&quot;&gt;&lt;code&gt;Composite&lt;/code&gt;&lt;/a&gt; attribute in the &lt;code&gt;Graphics2D&lt;/code&gt; context.</source>
          <target state="translated">&lt;code&gt;Graphics2D&lt;/code&gt; コンテキストの現在の&lt;a href=&quot;composite&quot;&gt; &lt;code&gt;Composite&lt;/code&gt; &lt;/a&gt;属性を使用して、宛先の描画面に色を適用します。</target>
        </trans-unit>
        <trans-unit id="7ebe72edbd46e861f2348adfa7a6d4c1ff878e69" translate="yes" xml:space="preserve">
          <source>Apply the given pattern to this Format object.</source>
          <target state="translated">指定されたパターンをこのFormatオブジェクトに適用します。</target>
        </trans-unit>
        <trans-unit id="40ea6f9cf1dd9e76881f086c503ed2233392c4f8" translate="yes" xml:space="preserve">
          <source>Apply the given pattern to this Format object. A pattern is a short-hand specification for the various formatting properties. These properties can also be changed individually through the various setter methods.</source>
          <target state="translated">指定されたパターンをこのFormatオブジェクトに適用します。パターンとは、さまざまな書式設定プロパティを簡単に指定することができます。これらのプロパティは、さまざまなセッターメソッドを使って個別に変更することもできます。</target>
        </trans-unit>
        <trans-unit id="d3394fe6ba8781f349e9d2e8a1f85bedbb590239" translate="yes" xml:space="preserve">
          <source>Apply the given pattern to this Format object. The pattern is assumed to be in a localized notation. A pattern is a short-hand specification for the various formatting properties. These properties can also be changed individually through the various setter methods.</source>
          <target state="translated">指定されたパターンをこの Format オブジェクトに適用します。パターンはローカライズされた記法であることを前提としています。パターンは、さまざまな書式設定プロパティのための短い手の仕様です。これらのプロパティは、さまざまなセッターメソッドを使って個別に変更することもできます。</target>
        </trans-unit>
        <trans-unit id="922f6429d4f7117b2c682bfb171c71edd287e775" translate="yes" xml:space="preserve">
          <source>Apply the supplied configuration argument to this provider instance and return the configured provider.</source>
          <target state="translated">与えられた構成引数をこのプロバイダ・インスタンスに適用し、構成されたプロバイダを返します。</target>
        </trans-unit>
        <trans-unit id="64987bb6636dbcd6239708a68cc6f3df34a0054e" translate="yes" xml:space="preserve">
          <source>Apply the supplied configuration argument to this provider instance and return the configured provider. Note that if this provider cannot be configured in-place, a new provider will be created and returned. Therefore, callers should always use the returned provider.</source>
          <target state="translated">指定された構成引数をこのプロバイダ・インスタンスに適用し、構成されたプロバイダを返します。このプロバイダをその場で構成できない場合は、新しいプロバイダが作成されて返されることに注意してください。したがって、呼び出し元は常に返されたプロバイダを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a46eaa3873ca34a730dd7803b181407b1e7e2807" translate="yes" xml:space="preserve">
          <source>Applying the Blending Equation</source>
          <target state="translated">ブレンド方程式の適用</target>
        </trans-unit>
        <trans-unit id="473fe811ab475410322782e93567dece51e0b8ff" translate="yes" xml:space="preserve">
          <source>Applying the method &lt;a href=&quot;character#toLowerCase-char-&quot;&gt;&lt;code&gt;Character.toLowerCase(char)&lt;/code&gt;&lt;/a&gt; to each character produces the same result</source>
          <target state="translated">メソッド&lt;a href=&quot;character#toLowerCase-char-&quot;&gt; &lt;code&gt;Character.toLowerCase(char)&lt;/code&gt; &lt;/a&gt;を各文字に適用すると、同じ結果が生成されます</target>
        </trans-unit>
        <trans-unit id="c0925034ed84c1ba3f4ae2dd1afbf8cc66850ac7" translate="yes" xml:space="preserve">
          <source>Applying the method &lt;a href=&quot;character#toUpperCase-char-&quot;&gt;&lt;code&gt;Character.toUpperCase(char)&lt;/code&gt;&lt;/a&gt; to each character produces the same result</source>
          <target state="translated">メソッド&lt;a href=&quot;character#toUpperCase-char-&quot;&gt; &lt;code&gt;Character.toUpperCase(char)&lt;/code&gt; &lt;/a&gt;を各文字に適用すると、同じ結果が生成されます</target>
        </trans-unit>
        <trans-unit id="327ed8d0a0963022714273723ba29db94c41fa04" translate="yes" xml:space="preserve">
          <source>ApproveSelectionAction</source>
          <target state="translated">ApproveSelectionAction</target>
        </trans-unit>
        <trans-unit id="af4f4762f9bd3f0f4a10caf5b6e63dc4ce543724" translate="yes" xml:space="preserve">
          <source>Arabic</source>
          <target state="translated">Arabic</target>
        </trans-unit>
        <trans-unit id="93bf622408a77306c1298867e5c4e0bd5ddde2b1" translate="yes" xml:space="preserve">
          <source>Arbitrary &lt;a href=&quot;https://docs.oracle.com/pls/topic/lookup?ctx=javase15&amp;amp;id=jndi_ldap_gl_prop&quot;&gt;&quot;JNDI properties&quot;&lt;/a&gt; may also be specified in the &lt;a href=&quot;../../../../../../java.base/javax/security/auth/login/configuration&quot;&gt;&lt;code&gt;Configuration&lt;/code&gt;&lt;/a&gt;. They are added to the environment and passed to the LDAP provider. Note that the following four JNDI properties are set by this module directly and are ignored if also present in the configuration:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7a64dc99a10d9b589bd9de24024a282c12818436" translate="yes" xml:space="preserve">
          <source>Arbitrary transformations of the contained value are provided both by low-level read-modify-write operations such as &lt;code&gt;compareAndSet&lt;/code&gt; and by higher-level methods such as &lt;code&gt;getAndUpdate&lt;/code&gt;.</source>
          <target state="translated">含まれている値の任意の変換は、 &lt;code&gt;compareAndSet&lt;/code&gt; などの低レベルの読み取り-変更-書き込み操作と、getAndUpdateなどの高レベルのメソッドの両方によって提供され &lt;code&gt;getAndUpdate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d94e713358cbb21a94171519afdcff3ba1724459" translate="yes" xml:space="preserve">
          <source>Arc2D</source>
          <target state="translated">Arc2D</target>
        </trans-unit>
        <trans-unit id="24a0cfb01e2d18f1c87ef242b3756832c5c434f8" translate="yes" xml:space="preserve">
          <source>Arc2D.Double</source>
          <target state="translated">Arc2D.Double</target>
        </trans-unit>
        <trans-unit id="219b544d41c812c11908bc255bebcda2fd70e19c" translate="yes" xml:space="preserve">
          <source>Arc2D.Float</source>
          <target state="translated">Arc2D.Float</target>
        </trans-unit>
        <trans-unit id="81774a3777584c094447787ba12a1651af131e47" translate="yes" xml:space="preserve">
          <source>Architectural issues to consider</source>
          <target state="translated">考慮すべき建築的な問題</target>
        </trans-unit>
        <trans-unit id="d2c998f8c52ee46eb198cc61d9a35814cb097ee3" translate="yes" xml:space="preserve">
          <source>Are lines horizontal?</source>
          <target state="translated">線は横長なのか?</target>
        </trans-unit>
        <trans-unit id="2cf778fed5e58155d336586ba78713d083e28830" translate="yes" xml:space="preserve">
          <source>Are lines horizontal? This will return true for horizontal, left-to-right writing systems such as Roman.</source>
          <target state="translated">線は横書きですか?これは、ローマ字のような横書きの左から右への書き方の場合は真を返します。</target>
        </trans-unit>
        <trans-unit id="440a4ad2c19eec40d8595d1f1bf68e3a2ba95e5d" translate="yes" xml:space="preserve">
          <source>Are the allocations for the children still valid?</source>
          <target state="translated">子供への配分はまだ有効なのか?</target>
        </trans-unit>
        <trans-unit id="2745debaa64a20eedb49d9f14a0b807c87aa2d2a" translate="yes" xml:space="preserve">
          <source>Area</source>
          <target state="translated">Area</target>
        </trans-unit>
        <trans-unit id="6f52d283c8455ded1590131b78149b805d2402ff" translate="yes" xml:space="preserve">
          <source>AreaAction</source>
          <target state="translated">AreaAction</target>
        </trans-unit>
        <trans-unit id="e81d51c0e9c58d1f20dd4217287950af66b03f67" translate="yes" xml:space="preserve">
          <source>AreaAveragingScaleFilter</source>
          <target state="translated">AreaAveragingScaleFilter</target>
        </trans-unit>
        <trans-unit id="ce5e5792e97fe5c7861d6ae9b29cf5a25cc0e70a" translate="yes" xml:space="preserve">
          <source>Argument</source>
          <target state="translated">Argument</target>
        </trans-unit>
        <trans-unit id="6dee7863f0914f6588e2684aa82d8c428b414ed9" translate="yes" xml:space="preserve">
          <source>Argument Category</source>
          <target state="translated">引数カテゴリ</target>
        </trans-unit>
        <trans-unit id="c572b8e5f06f5529375df62562cb7b867061a307" translate="yes" xml:space="preserve">
          <source>Argument Index</source>
          <target state="translated">引数インデックス</target>
        </trans-unit>
        <trans-unit id="3b22ce472a26848501b86f89d1acecdd7ba7743e" translate="yes" xml:space="preserve">
          <source>Argument lists are padded out by &lt;a href=&quot;#dropArgumentsToMatch(java.lang.invoke.MethodHandle,int,java.util.List,int)&quot;&gt;dropping unused trailing arguments&lt;/a&gt;.</source>
          <target state="translated">引数リストは&lt;a href=&quot;#dropArgumentsToMatch(java.lang.invoke.MethodHandle,int,java.util.List,int)&quot;&gt;、未使用の末尾の引数を削除&lt;/a&gt;することで埋められます。</target>
        </trans-unit>
        <trans-unit id="1cf417639cd88dca5ed348977db444c372780174" translate="yes" xml:space="preserve">
          <source>ArgumentIndex</source>
          <target state="translated">ArgumentIndex</target>
        </trans-unit>
        <trans-unit id="1a4ae3fef371487f78d2f69c8740337873fcf7e7" translate="yes" xml:space="preserve">
          <source>Arguments that appear in the argument list for &lt;a href=&quot;#metafactory(java.lang.invoke.MethodHandles.Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)&quot;&gt;&lt;code&gt;metafactory(MethodHandles.Lookup, String, MethodType, MethodType, MethodHandle, MethodType)&lt;/code&gt;&lt;/a&gt; have the same specification as in that method. The additional arguments are interpreted as follows:</source>
          <target state="translated">&lt;a href=&quot;#metafactory(java.lang.invoke.MethodHandles.Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)&quot;&gt; &lt;code&gt;metafactory(MethodHandles.Lookup, String, MethodType, MethodType, MethodHandle, MethodType)&lt;/code&gt; &lt;/a&gt;の引数リストに表示される引数（MethodHandles.Lookup、String、MethodType、MethodType、MethodHandle、MethodType）の仕様は、そのメソッドと同じです。追加の引数は次のように解釈されます。</target>
        </trans-unit>
        <trans-unit id="2e5bfc7efad8b45cdc934f7fa43f90adf2a2ea6e" translate="yes" xml:space="preserve">
          <source>Arguments that appear in the argument list for &lt;a href=&quot;lambdametafactory#metafactory-java.lang.invoke.MethodHandles.Lookup-java.lang.String-java.lang.invoke.MethodType-java.lang.invoke.MethodType-java.lang.invoke.MethodHandle-java.lang.invoke.MethodType-&quot;&gt;&lt;code&gt;metafactory(MethodHandles.Lookup, String, MethodType, MethodType, MethodHandle, MethodType)&lt;/code&gt;&lt;/a&gt; have the same specification as in that method. The additional arguments are interpreted as follows:</source>
          <target state="translated">&lt;a href=&quot;lambdametafactory#metafactory-java.lang.invoke.MethodHandles.Lookup-java.lang.String-java.lang.invoke.MethodType-java.lang.invoke.MethodType-java.lang.invoke.MethodHandle-java.lang.invoke.MethodType-&quot;&gt; &lt;code&gt;metafactory(MethodHandles.Lookup, String, MethodType, MethodType, MethodHandle, MethodType)&lt;/code&gt; &lt;/a&gt;の引数リストに表示される引数は、そのメソッドと同じ仕様です。追加の引数は次のように解釈されます。</target>
        </trans-unit>
        <trans-unit id="acf9d5ef3ca8bfb95db6ab809773c5a98582c787" translate="yes" xml:space="preserve">
          <source>Arguments used to pass a completion result (that is, for parameters of type &lt;code&gt;T&lt;/code&gt;) for methods accepting them may be null, but passing a null value for any other parameter will result in a &lt;a href=&quot;../../lang/nullpointerexception&quot;&gt;&lt;code&gt;NullPointerException&lt;/code&gt;&lt;/a&gt; being thrown.</source>
          <target state="translated">それらを受け入れるメソッドの完了結果（つまり、タイプ &lt;code&gt;T&lt;/code&gt; のパラメーター）を渡すために使用される引数はnullの場合がありますが、他のパラメーターにnull値を渡すと、&lt;a href=&quot;../../lang/nullpointerexception&quot;&gt; &lt;code&gt;NullPointerException&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="2259330fb77de2bd8dc1911ad15baf0ac1663381" translate="yes" xml:space="preserve">
          <source>ArithmeticException</source>
          <target state="translated">ArithmeticException</target>
        </trans-unit>
        <trans-unit id="6705be38307e0ff0e31175e8f380d6014e23948e" translate="yes" xml:space="preserve">
          <source>Arity limits</source>
          <target state="translated">アリティの限界</target>
        </trans-unit>
        <trans-unit id="02e3b97ab015096a3b53dd7591b690f3d33f15d5" translate="yes" xml:space="preserve">
          <source>Arrange async execution</source>
          <target state="translated">非同期実行のアレンジ</target>
        </trans-unit>
        <trans-unit id="3d56281f7929720ab8951cd1b5aa1de1a5698b01" translate="yes" xml:space="preserve">
          <source>Arrange exec and obtain Future</source>
          <target state="translated">execを手配し、未来を手に入れよう</target>
        </trans-unit>
        <trans-unit id="ddaa41333e9d65ededfb5ce00db0f24147833e1c" translate="yes" xml:space="preserve">
          <source>ArrangeGrid</source>
          <target state="translated">ArrangeGrid</target>
        </trans-unit>
        <trans-unit id="e6033304ba65c2bf03ba37405ffb4242d91c1c5f" translate="yes" xml:space="preserve">
          <source>Arranges for (asynchronous) execution of the given task.</source>
          <target state="translated">与えられたタスクの(非同期の)実行を手配します。</target>
        </trans-unit>
        <trans-unit id="ef4aaa5d407375c225b8697d59217a548d1bc776" translate="yes" xml:space="preserve">
          <source>Arranges to asynchronously execute this task in the pool the current task is running in, if applicable, or using the &lt;a href=&quot;forkjoinpool#commonPool()&quot;&gt;&lt;code&gt;ForkJoinPool.commonPool()&lt;/code&gt;&lt;/a&gt; if not &lt;a href=&quot;#inForkJoinPool()&quot;&gt;&lt;code&gt;inForkJoinPool()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">該当する場合は、現在のタスクが実行されているプールでこのタスクを非同期的に実行するように&lt;a href=&quot;forkjoinpool#commonPool()&quot;&gt; &lt;code&gt;ForkJoinPool.commonPool()&lt;/code&gt; &lt;/a&gt;します。inForkJoinPool（）でない場合は、&lt;a href=&quot;#inForkJoinPool()&quot;&gt; &lt;code&gt;inForkJoinPool()&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="2491dfc5f0c04c431d7776873e47d40497b07f23" translate="yes" xml:space="preserve">
          <source>Arranges to asynchronously execute this task in the pool the current task is running in, if applicable, or using the &lt;a href=&quot;forkjoinpool#commonPool()&quot;&gt;&lt;code&gt;ForkJoinPool.commonPool()&lt;/code&gt;&lt;/a&gt; if not &lt;a href=&quot;#inForkJoinPool()&quot;&gt;&lt;code&gt;inForkJoinPool()&lt;/code&gt;&lt;/a&gt;. While it is not necessarily enforced, it is a usage error to fork a task more than once unless it has completed and been reinitialized. Subsequent modifications to the state of this task or any data it operates on are not necessarily consistently observable by any thread other than the one executing it unless preceded by a call to &lt;a href=&quot;#join()&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt; or related methods, or a call to &lt;a href=&quot;future#isDone()&quot;&gt;&lt;code&gt;Future.isDone()&lt;/code&gt;&lt;/a&gt; returning &lt;code&gt;
 true&lt;/code&gt;.</source>
          <target state="translated">該当する場合は、現在のタスクが実行されているプールでこのタスクを非同期的に実行するように&lt;a href=&quot;forkjoinpool#commonPool()&quot;&gt; &lt;code&gt;ForkJoinPool.commonPool()&lt;/code&gt; &lt;/a&gt;します。inForkJoinPool（）でない場合は、&lt;a href=&quot;#inForkJoinPool()&quot;&gt; &lt;code&gt;inForkJoinPool()&lt;/code&gt; &lt;/a&gt;ます。必ずしも強制されるわけではありませんが、タスクが完了して再初期化されない限り、タスクを複数回フォークすることは使用上のエラーです。このタスクまたはタスクが操作するデータの状態に対するその後の変更は、&lt;a href=&quot;#join()&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt;または関連メソッドの呼び出し、または&lt;a href=&quot;future#isDone()&quot;&gt; &lt;code&gt;Future.isDone()&lt;/code&gt; の&lt;/a&gt;呼び出しが先行しない限り、タスクを実行するスレッド以外のスレッドによって必ずしも一貫して監視できるとは限りません。 &lt;code&gt; true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="71cba7686e4af3c9e7770e896be81d3174386480" translate="yes" xml:space="preserve">
          <source>Arranges to asynchronously execute this task in the pool the current task is running in, if applicable, or using the &lt;a href=&quot;forkjoinpool#commonPool--&quot;&gt;&lt;code&gt;ForkJoinPool.commonPool()&lt;/code&gt;&lt;/a&gt; if not &lt;a href=&quot;forkjointask#inForkJoinPool--&quot;&gt;&lt;code&gt;inForkJoinPool()&lt;/code&gt;&lt;/a&gt;. While it is not necessarily enforced, it is a usage error to fork a task more than once unless it has completed and been reinitialized. Subsequent modifications to the state of this task or any data it operates on are not necessarily consistently observable by any thread other than the one executing it unless preceded by a call to &lt;a href=&quot;forkjointask#join--&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt; or related methods, or a call to &lt;a href=&quot;forkjointask#isDone--&quot;&gt;&lt;code&gt;isDone()&lt;/code&gt;&lt;/a&gt; returning &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">現在のタスクが実行されているプールでこのタスクを非同期で実行するように&lt;a href=&quot;forkjoinpool#commonPool--&quot;&gt; &lt;code&gt;ForkJoinPool.commonPool()&lt;/code&gt; &lt;/a&gt;該当する場合）、またはinForkJoinPool（）でない場合は&lt;a href=&quot;forkjointask#inForkJoinPool--&quot;&gt; &lt;code&gt;inForkJoinPool()&lt;/code&gt; &lt;/a&gt;ます。必ずしも強制されているわけではありませんが、完了して再初期化されていない限り、タスクを複数回フォークすると使用法エラーになります。&lt;a href=&quot;forkjointask#join--&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt;または関連メソッドの呼び出し、または&lt;a href=&quot;forkjointask#isDone--&quot;&gt; &lt;code&gt;isDone()&lt;/code&gt; の&lt;/a&gt;呼び出しが &lt;code&gt;true&lt;/code&gt; を返すことが前にある場合を除いて、このタスクの状態またはそれが操作するデータへのその後の変更は、必ずしもそれを実行するスレッド以外のスレッドで一貫して監視できるわけではありません。。</target>
        </trans-unit>
        <trans-unit id="107004472b7ba4e5e31f3082ee1fb5a1239eec61" translate="yes" xml:space="preserve">
          <source>Array</source>
          <target state="translated">Array</target>
        </trans-unit>
        <trans-unit id="bc55c41480128611db3606ce90d8ff4a898f10c4" translate="yes" xml:space="preserve">
          <source>Array and buffer segments are effectively &lt;em&gt;views&lt;/em&gt; over existing memory regions which might outlive the lifecycle of the segments derived from them, and can even be manipulated directly (e.g. via array access, or direct use of the &lt;a href=&quot;../../../../java.base/java/nio/bytebuffer&quot;&gt;&lt;code&gt;ByteBuffer&lt;/code&gt;&lt;/a&gt; API) by other clients. As a result, while sharing array or buffer segments is possible, it is strongly advised that clients wishing to do so take extra precautions to make sure that the underlying memory sources associated with such segments remain inaccessible, and that said memory sources are never aliased by more than one segment at a time - e.g. so as to prevent concurrent modifications of the contents of an array, or buffer segment.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="7747b10dd8edbc36723d3bda1e4fc1f9d0dce370" translate="yes" xml:space="preserve">
          <source>Array of Actions to install on JFormattedTextField</source>
          <target state="translated">JFormattedTextField にインストールするアクションの配列</target>
        </trans-unit>
        <trans-unit id="f8525f3f00f2bbff94d01f29f59dbcc41a51d329" translate="yes" xml:space="preserve">
          <source>Array of TableColumn objects in this model</source>
          <target state="translated">このモデルのTableColumnオブジェクトの配列</target>
        </trans-unit>
        <trans-unit id="bb7ef34866c1c3791e0e32c3560fdda96203d676" translate="yes" xml:space="preserve">
          <source>Array of class constants or enum constants</source>
          <target state="translated">クラス定数または列挙定数の配列</target>
        </trans-unit>
        <trans-unit id="6c0eeedee20201092df554dd207d8eac0d32e06b" translate="yes" xml:space="preserve">
          <source>Array of extra objects to be included in the cache key</source>
          <target state="translated">キャッシュキーに含まれる追加オブジェクトの配列</target>
        </trans-unit>
        <trans-unit id="569807c2a3ec4f7f160eb054479694d8449216d8" translate="yes" xml:space="preserve">
          <source>Array of printing attribute categories that the client can specify as a doc-level or job-level attribute in a Print Request. Each element in the array is a &lt;a href=&quot;../../java/lang/class&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt; that implements interface &lt;a href=&quot;attribute/attribute&quot;&gt;&lt;code&gt;Attribute&lt;/code&gt;&lt;/a&gt;. The array is empty if no categories are supported.</source>
          <target state="translated">クライアントが印刷要求でドキュメントレベルまたはジョブレベルの属性として指定できる印刷属性カテゴリの配列。配列の各要素は、インターフェース&lt;a href=&quot;attribute/attribute&quot;&gt; &lt;code&gt;Attribute&lt;/code&gt; &lt;/a&gt;を実装する&lt;a href=&quot;../../java/lang/class&quot;&gt; &lt;code&gt;Class&lt;/code&gt; &lt;/a&gt;です。サポートされているカテゴリがない場合、配列は空です。</target>
        </trans-unit>
        <trans-unit id="acea35f9cae772bd6729ea0a91ba2e0d2e049d3b" translate="yes" xml:space="preserve">
          <source>Array of supported doc flavors, should have at least one element.</source>
          <target state="translated">サポートされているdocフレーバーの配列で、少なくとも一つの要素を持つ必要があります。</target>
        </trans-unit>
        <trans-unit id="1b6dc0470fc51b523a7e090cb616eed491033a26" translate="yes" xml:space="preserve">
          <source>Array of values the user can choose from.</source>
          <target state="translated">ユーザーが選択できる値の配列。</target>
        </trans-unit>
        <trans-unit id="db7de6653d382624f40994ff09165d3589b89b86" translate="yes" xml:space="preserve">
          <source>Array of values the user can choose from. Look and feel will provide the UI component to choose this from.</source>
          <target state="translated">ユーザーが選択できる値の配列。Look and feelはこれを選択するためのUIコンポーネントを提供します。</target>
        </trans-unit>
        <trans-unit id="67254b0229a4173b61140618f8507f28706cc74c" translate="yes" xml:space="preserve">
          <source>Array used for multiple resource declarations.</source>
          <target state="translated">複数のリソース宣言に使用される配列。</target>
        </trans-unit>
        <trans-unit id="4658726120ea2a76ab5f9db00569884eaf5c32c1" translate="yes" xml:space="preserve">
          <source>Array.get()</source>
          <target state="translated">Array.get()</target>
        </trans-unit>
        <trans-unit id="1169b0baca08e75ccd9d1d7d32fc92353347736e" translate="yes" xml:space="preserve">
          <source>Array.getBoolean()</source>
          <target state="translated">Array.getBoolean()</target>
        </trans-unit>
        <trans-unit id="45e230ecb81ecd9ebe58640f54af87cee473a1c7" translate="yes" xml:space="preserve">
          <source>Array.getByte()</source>
          <target state="translated">Array.getByte()</target>
        </trans-unit>
        <trans-unit id="9b247c6af24e2cac173bff15ce5dd20e7554ca39" translate="yes" xml:space="preserve">
          <source>Array.getChar()</source>
          <target state="translated">Array.getChar()</target>
        </trans-unit>
        <trans-unit id="8e241acaa4e7de56f4f6b06a9a2b69c8b3934a9c" translate="yes" xml:space="preserve">
          <source>Array.getDouble()</source>
          <target state="translated">Array.getDouble()</target>
        </trans-unit>
        <trans-unit id="d72cad2b167d638887c65cb8102a0842bdeef724" translate="yes" xml:space="preserve">
          <source>Array.getFloat()</source>
          <target state="translated">Array.getFloat()</target>
        </trans-unit>
        <trans-unit id="4a5e0617636097c95ddd3b26825b9fa630129bd0" translate="yes" xml:space="preserve">
          <source>Array.getInt()</source>
          <target state="translated">Array.getInt()</target>
        </trans-unit>
        <trans-unit id="b1ea126ae4a5892b65c8761706ebf577fa0b8447" translate="yes" xml:space="preserve">
          <source>Array.getLength()</source>
          <target state="translated">Array.getLength()</target>
        </trans-unit>
        <trans-unit id="b4e13c666fbd535053c99dc297ab35fb4f028144" translate="yes" xml:space="preserve">
          <source>Array.getLong()</source>
          <target state="translated">Array.getLong()</target>
        </trans-unit>
        <trans-unit id="5d172f7ac795870d2f898d4e0b36bea81b013a3f" translate="yes" xml:space="preserve">
          <source>Array.getShort()</source>
          <target state="translated">Array.getShort()</target>
        </trans-unit>
        <trans-unit id="e88fedaeae84f4fd50173a5bdd67c92f374f0d63" translate="yes" xml:space="preserve">
          <source>Array.newInstance()</source>
          <target state="translated">Array.newInstance()</target>
        </trans-unit>
        <trans-unit id="f6af3462971f6d30e9ec2c85b6f112b33661a48c" translate="yes" xml:space="preserve">
          <source>Array.set()</source>
          <target state="translated">Array.set()</target>
        </trans-unit>
        <trans-unit id="f91f1f89eedde88ec92a16f2690640ccc75db314" translate="yes" xml:space="preserve">
          <source>Array.setBoolean()</source>
          <target state="translated">Array.setBoolean()</target>
        </trans-unit>
        <trans-unit id="9a2dc485cb875a98afdbe9f1fc0af3ae91bc7d22" translate="yes" xml:space="preserve">
          <source>Array.setByte()</source>
          <target state="translated">Array.setByte()</target>
        </trans-unit>
        <trans-unit id="3bc6ded8b8303eae5d660be744937261f4fb655b" translate="yes" xml:space="preserve">
          <source>Array.setChar()</source>
          <target state="translated">Array.setChar()</target>
        </trans-unit>
        <trans-unit id="062ef285c7735737b8feec3b6018d5913746147a" translate="yes" xml:space="preserve">
          <source>Array.setDouble()</source>
          <target state="translated">Array.setDouble()</target>
        </trans-unit>
        <trans-unit id="b284650cdb4942518c61c9fb415d0f3273563e0b" translate="yes" xml:space="preserve">
          <source>Array.setFloat()</source>
          <target state="translated">Array.setFloat()</target>
        </trans-unit>
        <trans-unit id="eb2dd2165c3cdf2c0752876ae095f28dd88b60dc" translate="yes" xml:space="preserve">
          <source>Array.setInt()</source>
          <target state="translated">Array.setInt()</target>
        </trans-unit>
        <trans-unit id="da531263561c3c737792c93701185e9465b36a9c" translate="yes" xml:space="preserve">
          <source>Array.setLong()</source>
          <target state="translated">Array.setLong()</target>
        </trans-unit>
        <trans-unit id="0773afd66a6be3901682429b86107e92c0137d0b" translate="yes" xml:space="preserve">
          <source>Array.setShort()</source>
          <target state="translated">Array.setShort()</target>
        </trans-unit>
        <trans-unit id="27c998e9dae719f06258d8b8e94ec06a1b89f205" translate="yes" xml:space="preserve">
          <source>ArrayAccessTree</source>
          <target state="translated">ArrayAccessTree</target>
        </trans-unit>
        <trans-unit id="1a283a038a4dcdb2e50b5ad5b7b9ab73e8033daf" translate="yes" xml:space="preserve">
          <source>ArrayBlockingQueue</source>
          <target state="translated">ArrayBlockingQueue</target>
        </trans-unit>
        <trans-unit id="3d96acc37cd4954c931fa29a5de4124c31c1d3e9" translate="yes" xml:space="preserve">
          <source>ArrayBlockingQueue.add()</source>
          <target state="translated">ArrayBlockingQueue.add()</target>
        </trans-unit>
        <trans-unit id="3dbd1eb6fdbac03d7ef6563da0eb3a8180e79e61" translate="yes" xml:space="preserve">
          <source>ArrayBlockingQueue.clear()</source>
          <target state="translated">ArrayBlockingQueue.clear()</target>
        </trans-unit>
        <trans-unit id="d2b8c263fb51c1d3665002060e6cacb05b477a5f" translate="yes" xml:space="preserve">
          <source>ArrayBlockingQueue.contains()</source>
          <target state="translated">ArrayBlockingQueue.contains()</target>
        </trans-unit>
        <trans-unit id="56496c2e552af45b7fe3d89c4a6e038dd024ffe1" translate="yes" xml:space="preserve">
          <source>ArrayBlockingQueue.drainTo()</source>
          <target state="translated">ArrayBlockingQueue.drainTo()</target>
        </trans-unit>
        <trans-unit id="bb6a69f32e54e7f6e94d4b4a1f2502f19ab5e73c" translate="yes" xml:space="preserve">
          <source>ArrayBlockingQueue.iterator()</source>
          <target state="translated">ArrayBlockingQueue.iterator()</target>
        </trans-unit>
        <trans-unit id="ae8981ef0588c86f5c55f27f5891a2639e002e80" translate="yes" xml:space="preserve">
          <source>ArrayBlockingQueue.offer()</source>
          <target state="translated">ArrayBlockingQueue.offer()</target>
        </trans-unit>
        <trans-unit id="b2f039549dcdcef93e747e665aa28a510a467c06" translate="yes" xml:space="preserve">
          <source>ArrayBlockingQueue.peek()</source>
          <target state="translated">ArrayBlockingQueue.peek()</target>
        </trans-unit>
        <trans-unit id="6713c2584369c8ae5280831ce58bedae449bc270" translate="yes" xml:space="preserve">
          <source>ArrayBlockingQueue.poll()</source>
          <target state="translated">ArrayBlockingQueue.poll()</target>
        </trans-unit>
        <trans-unit id="0ea6f79daf5205a896305d995a997675b14b3d2b" translate="yes" xml:space="preserve">
          <source>ArrayBlockingQueue.put()</source>
          <target state="translated">ArrayBlockingQueue.put()</target>
        </trans-unit>
        <trans-unit id="e75f62a1986ae83f920bebf8c1ac2bf450672d87" translate="yes" xml:space="preserve">
          <source>ArrayBlockingQueue.remainingCapacity()</source>
          <target state="translated">ArrayBlockingQueue.remainingCapacity()</target>
        </trans-unit>
        <trans-unit id="baffefbb01fe5b64bee2c1206365c66a2329aa74" translate="yes" xml:space="preserve">
          <source>ArrayBlockingQueue.remove()</source>
          <target state="translated">ArrayBlockingQueue.remove()</target>
        </trans-unit>
        <trans-unit id="01039bfc283527758908b9a5697520991aa6a923" translate="yes" xml:space="preserve">
          <source>ArrayBlockingQueue.size()</source>
          <target state="translated">ArrayBlockingQueue.size()</target>
        </trans-unit>
        <trans-unit id="8f1266bf6b909b6efa0985bdf17784f5de67fbd2" translate="yes" xml:space="preserve">
          <source>ArrayBlockingQueue.spliterator()</source>
          <target state="translated">ArrayBlockingQueue.spliterator()</target>
        </trans-unit>
        <trans-unit id="babefc9596faf932dfa911f390aff3a971b2ccff" translate="yes" xml:space="preserve">
          <source>ArrayBlockingQueue.take()</source>
          <target state="translated">ArrayBlockingQueue.take()</target>
        </trans-unit>
        <trans-unit id="ecd956bb79ba9d156919269a43e7111bb0457368" translate="yes" xml:space="preserve">
          <source>ArrayBlockingQueue.toArray()</source>
          <target state="translated">ArrayBlockingQueue.toArray()</target>
        </trans-unit>
        <trans-unit id="ac7393cded22c6ae03dbbf5d496efe87f9cd2b60" translate="yes" xml:space="preserve">
          <source>ArrayBlockingQueue.toString()</source>
          <target state="translated">ArrayBlockingQueue.toString()</target>
        </trans-unit>
        <trans-unit id="a1d9626b2a8faf29b6417286fb8a6b3e1f9be338" translate="yes" xml:space="preserve">
          <source>ArrayDeque</source>
          <target state="translated">ArrayDeque</target>
        </trans-unit>
        <trans-unit id="bed2df06b552cca23f4d8af39984e1178eeb27a4" translate="yes" xml:space="preserve">
          <source>ArrayDeque.add()</source>
          <target state="translated">ArrayDeque.add()</target>
        </trans-unit>
        <trans-unit id="d2701c9e24b7f41499b59cd658e03461d594b48d" translate="yes" xml:space="preserve">
          <source>ArrayDeque.addFirst()</source>
          <target state="translated">ArrayDeque.addFirst()</target>
        </trans-unit>
        <trans-unit id="e437dd06b166eda7b7de7a8002cf304b9b770bf4" translate="yes" xml:space="preserve">
          <source>ArrayDeque.addLast()</source>
          <target state="translated">ArrayDeque.addLast()</target>
        </trans-unit>
        <trans-unit id="a352cf50a3d9d333f0cb4a879b607e249c258494" translate="yes" xml:space="preserve">
          <source>ArrayDeque.clear()</source>
          <target state="translated">ArrayDeque.clear()</target>
        </trans-unit>
        <trans-unit id="9e84be1b39b7efeaa4ccb90aca05601634b0ddd9" translate="yes" xml:space="preserve">
          <source>ArrayDeque.clone()</source>
          <target state="translated">ArrayDeque.clone()</target>
        </trans-unit>
        <trans-unit id="7982354300300d171b3016130244329713b149cd" translate="yes" xml:space="preserve">
          <source>ArrayDeque.contains()</source>
          <target state="translated">ArrayDeque.contains()</target>
        </trans-unit>
        <trans-unit id="75b05cd9e1f69bc6dac6a81afad1a495b214d20e" translate="yes" xml:space="preserve">
          <source>ArrayDeque.descendingIterator()</source>
          <target state="translated">ArrayDeque.descendingIterator()</target>
        </trans-unit>
        <trans-unit id="e0a60bac2ddad41306d36b5b43bc5f77e1dc4781" translate="yes" xml:space="preserve">
          <source>ArrayDeque.element()</source>
          <target state="translated">ArrayDeque.element()</target>
        </trans-unit>
        <trans-unit id="a420aa718866ddb4a3a295fa14df62837dca90e0" translate="yes" xml:space="preserve">
          <source>ArrayDeque.getFirst()</source>
          <target state="translated">ArrayDeque.getFirst()</target>
        </trans-unit>
        <trans-unit id="7dc95f4a9183134e5a977034584c9c29c0da84d0" translate="yes" xml:space="preserve">
          <source>ArrayDeque.getLast()</source>
          <target state="translated">ArrayDeque.getLast()</target>
        </trans-unit>
        <trans-unit id="ea86c6721057aa21b774837669c804b2ae5ff14b" translate="yes" xml:space="preserve">
          <source>ArrayDeque.isEmpty()</source>
          <target state="translated">ArrayDeque.isEmpty()</target>
        </trans-unit>
        <trans-unit id="2778cf97463835ee87fdf389f420513adc88da5e" translate="yes" xml:space="preserve">
          <source>ArrayDeque.iterator()</source>
          <target state="translated">ArrayDeque.iterator()</target>
        </trans-unit>
        <trans-unit id="9a23b8f00c880c251e597a2828b54b13cf11591e" translate="yes" xml:space="preserve">
          <source>ArrayDeque.offer()</source>
          <target state="translated">ArrayDeque.offer()</target>
        </trans-unit>
        <trans-unit id="956983a0c043c9c5a1f7d323c7d758837dde02ba" translate="yes" xml:space="preserve">
          <source>ArrayDeque.offerFirst()</source>
          <target state="translated">ArrayDeque.offerFirst()</target>
        </trans-unit>
        <trans-unit id="4bb9d892b664791a921a331d941810f8b80c900b" translate="yes" xml:space="preserve">
          <source>ArrayDeque.offerLast()</source>
          <target state="translated">ArrayDeque.offerLast()</target>
        </trans-unit>
        <trans-unit id="f33bac0a172c3990700e65739fa16ef9abf2961f" translate="yes" xml:space="preserve">
          <source>ArrayDeque.peek()</source>
          <target state="translated">ArrayDeque.peek()</target>
        </trans-unit>
        <trans-unit id="314c49c13bf4a77b621e7be5815bcd236146d330" translate="yes" xml:space="preserve">
          <source>ArrayDeque.peekFirst()</source>
          <target state="translated">ArrayDeque.peekFirst()</target>
        </trans-unit>
        <trans-unit id="0f0b523e109dd965b5e3fd8f054173fa9acf9395" translate="yes" xml:space="preserve">
          <source>ArrayDeque.peekLast()</source>
          <target state="translated">ArrayDeque.peekLast()</target>
        </trans-unit>
        <trans-unit id="b7d97e0cac420b8b46914f7eb4b9ff69a56f47f1" translate="yes" xml:space="preserve">
          <source>ArrayDeque.poll()</source>
          <target state="translated">ArrayDeque.poll()</target>
        </trans-unit>
        <trans-unit id="ec16ee31c4dc2bcd8f0f02b45cc335c86eb9fe4d" translate="yes" xml:space="preserve">
          <source>ArrayDeque.pollFirst()</source>
          <target state="translated">ArrayDeque.pollFirst()</target>
        </trans-unit>
        <trans-unit id="8d134b459fc996a5e431c9e7ae608aeea0923492" translate="yes" xml:space="preserve">
          <source>ArrayDeque.pollLast()</source>
          <target state="translated">ArrayDeque.pollLast()</target>
        </trans-unit>
        <trans-unit id="770e2003af764711664240954edb26b3268a95d5" translate="yes" xml:space="preserve">
          <source>ArrayDeque.pop()</source>
          <target state="translated">ArrayDeque.pop()</target>
        </trans-unit>
        <trans-unit id="60fc19ac26e8d552fa9d36569e69afe123439d32" translate="yes" xml:space="preserve">
          <source>ArrayDeque.push()</source>
          <target state="translated">ArrayDeque.push()</target>
        </trans-unit>
        <trans-unit id="ca1078f7c4af77c9358b816a58b5ae37310f9fd6" translate="yes" xml:space="preserve">
          <source>ArrayDeque.remove()</source>
          <target state="translated">ArrayDeque.remove()</target>
        </trans-unit>
        <trans-unit id="16a4d68564ea8bca4be4f1174ceca9d5f7110b20" translate="yes" xml:space="preserve">
          <source>ArrayDeque.removeFirst()</source>
          <target state="translated">ArrayDeque.removeFirst()</target>
        </trans-unit>
        <trans-unit id="0ef19d078a9315e6fb282cd424c2059db93eaec0" translate="yes" xml:space="preserve">
          <source>ArrayDeque.removeFirstOccurrence()</source>
          <target state="translated">ArrayDeque.removeFirstOccurrence()</target>
        </trans-unit>
        <trans-unit id="2ef2e331f8c0a6398215f9094fcd408191cde0d2" translate="yes" xml:space="preserve">
          <source>ArrayDeque.removeLast()</source>
          <target state="translated">ArrayDeque.removeLast()</target>
        </trans-unit>
        <trans-unit id="7c8b7e728f64463eb5ff97018c0f09518af8af5e" translate="yes" xml:space="preserve">
          <source>ArrayDeque.removeLastOccurrence()</source>
          <target state="translated">ArrayDeque.removeLastOccurrence()</target>
        </trans-unit>
        <trans-unit id="a54b8c10adeb716e784d2ad7c4305438595619f7" translate="yes" xml:space="preserve">
          <source>ArrayDeque.size()</source>
          <target state="translated">ArrayDeque.size()</target>
        </trans-unit>
        <trans-unit id="50926f012e8f6d6654906ecf9aeced2678ec6965" translate="yes" xml:space="preserve">
          <source>ArrayDeque.spliterator()</source>
          <target state="translated">ArrayDeque.spliterator()</target>
        </trans-unit>
        <trans-unit id="4983ebbc8740047ee462627b80722151818752f9" translate="yes" xml:space="preserve">
          <source>ArrayDeque.toArray()</source>
          <target state="translated">ArrayDeque.toArray()</target>
        </trans-unit>
        <trans-unit id="21484b74aa640458082fe4bb49601200afedc0f0" translate="yes" xml:space="preserve">
          <source>ArrayIndexOutOfBoundsException</source>
          <target state="translated">ArrayIndexOutOfBoundsException</target>
        </trans-unit>
        <trans-unit id="f5baaa4ad5d36710b8fed9d2bc4a53a86da5b55a" translate="yes" xml:space="preserve">
          <source>ArrayList</source>
          <target state="translated">ArrayList</target>
        </trans-unit>
        <trans-unit id="d1b38d91a4da43ea7d424a38ce96c626a121696b" translate="yes" xml:space="preserve">
          <source>ArrayList of ObjectName objects for referenced MBeans.</source>
          <target state="translated">参照される MBeans の ObjectName オブジェクトの ArrayList。</target>
        </trans-unit>
        <trans-unit id="a1d711fdf8512dbf9ae876dfaad2ed359350d906" translate="yes" xml:space="preserve">
          <source>ArrayList of RoleInfo.</source>
          <target state="translated">RoleInfoのArrayList。</target>
        </trans-unit>
        <trans-unit id="79f1f5f289d4a364472fcb60a9d57fe0207ae8ac" translate="yes" xml:space="preserve">
          <source>ArrayList of String</source>
          <target state="translated">文字列のArrayList</target>
        </trans-unit>
        <trans-unit id="f072bf434a8e4e92915b83b944e15e391db88282" translate="yes" xml:space="preserve">
          <source>ArrayList of relation type names (Strings)</source>
          <target state="translated">関係型名のArrayList(文字列</target>
        </trans-unit>
        <trans-unit id="0f47b6ff5f2eca03244dbd321baeb58760b3cf91" translate="yes" xml:space="preserve">
          <source>ArrayList.add()</source>
          <target state="translated">ArrayList.add()</target>
        </trans-unit>
        <trans-unit id="507a2eea358226004f14b71091689e5b0b3de625" translate="yes" xml:space="preserve">
          <source>ArrayList.addAll()</source>
          <target state="translated">ArrayList.addAll()</target>
        </trans-unit>
        <trans-unit id="082bae60cab9869e2405f845a57761031488cc85" translate="yes" xml:space="preserve">
          <source>ArrayList.clear()</source>
          <target state="translated">ArrayList.clear()</target>
        </trans-unit>
        <trans-unit id="088b969c19105c440fdadb5c6c028c09751f4524" translate="yes" xml:space="preserve">
          <source>ArrayList.clone()</source>
          <target state="translated">ArrayList.clone()</target>
        </trans-unit>
        <trans-unit id="8772045082c4ae7aa5b0cc2513d87c1dd3f0519c" translate="yes" xml:space="preserve">
          <source>ArrayList.contains()</source>
          <target state="translated">ArrayList.contains()</target>
        </trans-unit>
        <trans-unit id="696a156109972f7f27cb904a75eea4be0ca4edb5" translate="yes" xml:space="preserve">
          <source>ArrayList.ensureCapacity()</source>
          <target state="translated">ArrayList.ensureCapacity()</target>
        </trans-unit>
        <trans-unit id="a65347c40f0e485b54559608a032f6fcd888d79a" translate="yes" xml:space="preserve">
          <source>ArrayList.forEach()</source>
          <target state="translated">ArrayList.forEach()</target>
        </trans-unit>
        <trans-unit id="c6d0a301f9d31161a1449a9f575abf47243c5209" translate="yes" xml:space="preserve">
          <source>ArrayList.get()</source>
          <target state="translated">ArrayList.get()</target>
        </trans-unit>
        <trans-unit id="f494893c35f2e63cdd96ebe689dc06117c3036b3" translate="yes" xml:space="preserve">
          <source>ArrayList.indexOf()</source>
          <target state="translated">ArrayList.indexOf()</target>
        </trans-unit>
        <trans-unit id="68caef6bb721f87b173f7baf484b770b7fbf672e" translate="yes" xml:space="preserve">
          <source>ArrayList.isEmpty()</source>
          <target state="translated">ArrayList.isEmpty()</target>
        </trans-unit>
        <trans-unit id="6794ed7d20aaefcda7a3eaf86ab23508164d2d72" translate="yes" xml:space="preserve">
          <source>ArrayList.iterator()</source>
          <target state="translated">ArrayList.iterator()</target>
        </trans-unit>
        <trans-unit id="205270f883fc49ffa068c9a3dbe66852020bf3a2" translate="yes" xml:space="preserve">
          <source>ArrayList.lastIndexOf()</source>
          <target state="translated">ArrayList.lastIndexOf()</target>
        </trans-unit>
        <trans-unit id="aa3f5f8a7bf8faa3ea051729f325aa4505c1a5f7" translate="yes" xml:space="preserve">
          <source>ArrayList.listIterator()</source>
          <target state="translated">ArrayList.listIterator()</target>
        </trans-unit>
        <trans-unit id="4acdb817b23096f50c66aac9c5e120b25d50ad5e" translate="yes" xml:space="preserve">
          <source>ArrayList.remove()</source>
          <target state="translated">ArrayList.remove()</target>
        </trans-unit>
        <trans-unit id="d3667e4b10100a95482cdb56bc6e0e42b4ec20f5" translate="yes" xml:space="preserve">
          <source>ArrayList.removeAll()</source>
          <target state="translated">ArrayList.removeAll()</target>
        </trans-unit>
        <trans-unit id="ab982c1457071db3d759d9fc8bb07db0f0568b23" translate="yes" xml:space="preserve">
          <source>ArrayList.removeIf()</source>
          <target state="translated">ArrayList.removeIf()</target>
        </trans-unit>
        <trans-unit id="566e74e2242ca7c9df417b51e91dabe7c34c143c" translate="yes" xml:space="preserve">
          <source>ArrayList.removeRange()</source>
          <target state="translated">ArrayList.removeRange()</target>
        </trans-unit>
        <trans-unit id="36bab2da55c0e9dc6a1f7f936fa8697fbbd75548" translate="yes" xml:space="preserve">
          <source>ArrayList.replaceAll()</source>
          <target state="translated">ArrayList.replaceAll()</target>
        </trans-unit>
        <trans-unit id="532a41b9f0e66f2a34cf7991c625b88a72eb406d" translate="yes" xml:space="preserve">
          <source>ArrayList.retainAll()</source>
          <target state="translated">ArrayList.retainAll()</target>
        </trans-unit>
        <trans-unit id="32fc31340174e6ddb82791777b34fbb197c55b26" translate="yes" xml:space="preserve">
          <source>ArrayList.set()</source>
          <target state="translated">ArrayList.set()</target>
        </trans-unit>
        <trans-unit id="f16daa8e32cf5bf5607ac82deb5cfb60765a4a90" translate="yes" xml:space="preserve">
          <source>ArrayList.size()</source>
          <target state="translated">ArrayList.size()</target>
        </trans-unit>
        <trans-unit id="fac2a946b847ab427216c071e3f0b3af92c4a36f" translate="yes" xml:space="preserve">
          <source>ArrayList.sort()</source>
          <target state="translated">ArrayList.sort()</target>
        </trans-unit>
        <trans-unit id="d148a99b7cd7829c476159cb3b6c744b0c5ee770" translate="yes" xml:space="preserve">
          <source>ArrayList.spliterator()</source>
          <target state="translated">ArrayList.spliterator()</target>
        </trans-unit>
        <trans-unit id="e0385a55c46be6d850fd057ec9a0d3a4cedea4c3" translate="yes" xml:space="preserve">
          <source>ArrayList.subList()</source>
          <target state="translated">ArrayList.subList()</target>
        </trans-unit>
        <trans-unit id="1fd2236a7851d3a0612dc24e53d2ac3991b3c237" translate="yes" xml:space="preserve">
          <source>ArrayList.toArray()</source>
          <target state="translated">ArrayList.toArray()</target>
        </trans-unit>
        <trans-unit id="1ff7df7831f0c607f6db81ba9f79b3b9239ceef3" translate="yes" xml:space="preserve">
          <source>ArrayList.trimToSize()</source>
          <target state="translated">ArrayList.trimToSize()</target>
        </trans-unit>
        <trans-unit id="f3e822b0f88a8917e3e4ad8cc4c1429ac5849188" translate="yes" xml:space="preserve">
          <source>ArrayReference</source>
          <target state="translated">ArrayReference</target>
        </trans-unit>
        <trans-unit id="70ce27f43d491914a500ad71f5cd62e7c63052b6" translate="yes" xml:space="preserve">
          <source>ArrayStoreException</source>
          <target state="translated">ArrayStoreException</target>
        </trans-unit>
        <trans-unit id="77e0a11af696ddb246c753fbf92cf343a2992b51" translate="yes" xml:space="preserve">
          <source>ArrayType</source>
          <target state="translated">ArrayType</target>
        </trans-unit>
        <trans-unit id="0ad6cfa3795c8768a161ec4d9565a1cb78765d05" translate="yes" xml:space="preserve">
          <source>ArrayType.equals()</source>
          <target state="translated">ArrayType.equals()</target>
        </trans-unit>
        <trans-unit id="b6cf1edc1e95c031c5a6ec52f87a88a439d88d8c" translate="yes" xml:space="preserve">
          <source>ArrayType.getArrayType()</source>
          <target state="translated">ArrayType.getArrayType()</target>
        </trans-unit>
        <trans-unit id="2d529dd9d80021b7d146f1cf42e0717a7cf4216a" translate="yes" xml:space="preserve">
          <source>ArrayType.getComponentType()</source>
          <target state="translated">ArrayType.getComponentType()</target>
        </trans-unit>
        <trans-unit id="03b3b6b244b2153b6b58e79a75359d327e3244e5" translate="yes" xml:space="preserve">
          <source>ArrayType.getDimension()</source>
          <target state="translated">ArrayType.getDimension()</target>
        </trans-unit>
        <trans-unit id="59d72720bddbebb8c69f72937b6908a569a0696a" translate="yes" xml:space="preserve">
          <source>ArrayType.getElementOpenType()</source>
          <target state="translated">ArrayType.getElementOpenType()</target>
        </trans-unit>
        <trans-unit id="229162e2aee70affd2dbe41528f566b00858fd60" translate="yes" xml:space="preserve">
          <source>ArrayType.getPrimitiveArrayType()</source>
          <target state="translated">ArrayType.getPrimitiveArrayType()</target>
        </trans-unit>
        <trans-unit id="3146cb41e5856b3709df762521839f1a446b3dcc" translate="yes" xml:space="preserve">
          <source>ArrayType.hashCode()</source>
          <target state="translated">ArrayType.hashCode()</target>
        </trans-unit>
        <trans-unit id="93d36cfaf61145695e080e5e742a56ce0312a81b" translate="yes" xml:space="preserve">
          <source>ArrayType.isPrimitiveArray()</source>
          <target state="translated">ArrayType.isPrimitiveArray()</target>
        </trans-unit>
        <trans-unit id="98cc545995e3dd73b4112c4ef40a1f05d7eaa3c0" translate="yes" xml:space="preserve">
          <source>ArrayType.isValue()</source>
          <target state="translated">ArrayType.isValue()</target>
        </trans-unit>
        <trans-unit id="f227b51b3a472ea46fad9e1babf056963137e266" translate="yes" xml:space="preserve">
          <source>ArrayType.toString()</source>
          <target state="translated">ArrayType.toString()</target>
        </trans-unit>
        <trans-unit id="4ec7f87d57631933601651fc3214dc0e78866ab1" translate="yes" xml:space="preserve">
          <source>ArrayTypeTree</source>
          <target state="translated">ArrayTypeTree</target>
        </trans-unit>
        <trans-unit id="b90cc9bfd23567a2ff5ba1f00e7c63ca6da8755e" translate="yes" xml:space="preserve">
          <source>Arrays</source>
          <target state="translated">Arrays</target>
        </trans-unit>
        <trans-unit id="785112061d071a3b0f54a08c6eb7aef42d45601d" translate="yes" xml:space="preserve">
          <source>Arrays.asList()</source>
          <target state="translated">Arrays.asList()</target>
        </trans-unit>
        <trans-unit id="f3d9ec164d4d8a6008befbecb43760ebc32085f2" translate="yes" xml:space="preserve">
          <source>Arrays.binarySearch()</source>
          <target state="translated">Arrays.binarySearch()</target>
        </trans-unit>
        <trans-unit id="12502654ba05a3e6d53da76af059402cbb12044a" translate="yes" xml:space="preserve">
          <source>Arrays.copyOf()</source>
          <target state="translated">Arrays.copyOf()</target>
        </trans-unit>
        <trans-unit id="dbc9f4a9ab427ca23d1513d26347763e5b9209db" translate="yes" xml:space="preserve">
          <source>Arrays.copyOfRange()</source>
          <target state="translated">Arrays.copyOfRange()</target>
        </trans-unit>
        <trans-unit id="0e5aa98d7dcf419ac91cb5a6dd4cf0faff77b0f9" translate="yes" xml:space="preserve">
          <source>Arrays.deepEquals()</source>
          <target state="translated">Arrays.deepEquals()</target>
        </trans-unit>
        <trans-unit id="b8790dc370ceaac6a247f001d220325b8a9840f1" translate="yes" xml:space="preserve">
          <source>Arrays.deepHashCode()</source>
          <target state="translated">Arrays.deepHashCode()</target>
        </trans-unit>
        <trans-unit id="c14ee3f183bc78fa73dda4bc29af17be0e9d4c84" translate="yes" xml:space="preserve">
          <source>Arrays.deepToString()</source>
          <target state="translated">Arrays.deepToString()</target>
        </trans-unit>
        <trans-unit id="15a2250d58064792e0aa4c812b2fcd12bbf2cba8" translate="yes" xml:space="preserve">
          <source>Arrays.equals()</source>
          <target state="translated">Arrays.equals()</target>
        </trans-unit>
        <trans-unit id="7065cdf47ae5fa24a1bc1786252642b6ffc02e75" translate="yes" xml:space="preserve">
          <source>Arrays.fill()</source>
          <target state="translated">Arrays.fill()</target>
        </trans-unit>
        <trans-unit id="b7f4f05ac6079c2f39826d73fa974a667c2af896" translate="yes" xml:space="preserve">
          <source>Arrays.hashCode()</source>
          <target state="translated">Arrays.hashCode()</target>
        </trans-unit>
        <trans-unit id="1c84a0a521a0f88270229b96bf0c0c7052d3e797" translate="yes" xml:space="preserve">
          <source>Arrays.parallelPrefix()</source>
          <target state="translated">Arrays.parallelPrefix()</target>
        </trans-unit>
        <trans-unit id="6158fac122308b4615eef303cf6d18c4b6c598db" translate="yes" xml:space="preserve">
          <source>Arrays.parallelSetAll()</source>
          <target state="translated">Arrays.parallelSetAll()</target>
        </trans-unit>
        <trans-unit id="80c65cbf63256455d9f0156c52fe85f7774ffe3b" translate="yes" xml:space="preserve">
          <source>Arrays.parallelSort()</source>
          <target state="translated">Arrays.parallelSort()</target>
        </trans-unit>
        <trans-unit id="be3d1ea55339b035c7d4c55fc7102d227e5eb8ac" translate="yes" xml:space="preserve">
          <source>Arrays.setAll()</source>
          <target state="translated">Arrays.setAll()</target>
        </trans-unit>
        <trans-unit id="6eb3c3ed8dad53c9c7b43fe48c62d680b9b601f2" translate="yes" xml:space="preserve">
          <source>Arrays.sort()</source>
          <target state="translated">Arrays.sort()</target>
        </trans-unit>
        <trans-unit id="db8256238c2e9e487d4c3cd55dcc7735a411e0ad" translate="yes" xml:space="preserve">
          <source>Arrays.spliterator()</source>
          <target state="translated">Arrays.spliterator()</target>
        </trans-unit>
        <trans-unit id="3f01157894c7fb06cfd674ea96da3e264a32b485" translate="yes" xml:space="preserve">
          <source>Arrays.stream()</source>
          <target state="translated">Arrays.stream()</target>
        </trans-unit>
        <trans-unit id="9169ccbfd1326cb33090f82ec8fbe3c7ab8af645" translate="yes" xml:space="preserve">
          <source>Arrays.toString()</source>
          <target state="translated">Arrays.toString()</target>
        </trans-unit>
        <trans-unit id="0593ec9ff63572472f50caf84da2753c8e528390" translate="yes" xml:space="preserve">
          <source>Arrives at this phaser and awaits others.</source>
          <target state="translated">このフェイザーに到着し、他の人を待つ。</target>
        </trans-unit>
        <trans-unit id="d1539b18fd678578b164311c3d48f4d617b373cc" translate="yes" xml:space="preserve">
          <source>Arrives at this phaser and awaits others. Equivalent in effect to &lt;code&gt;awaitAdvance(arrive())&lt;/code&gt;. If you need to await with interruption or timeout, you can arrange this with an analogous construction using one of the other forms of the &lt;code&gt;
 awaitAdvance&lt;/code&gt; method. If instead you need to deregister upon arrival, use &lt;code&gt;awaitAdvance(arriveAndDeregister())&lt;/code&gt;.</source>
          <target state="translated">このフェイザーに到着し、他の人を待ちます。 &lt;code&gt;awaitAdvance(arrive())&lt;/code&gt; と実質的に同等です。中断またはタイムアウトで &lt;code&gt; awaitAdvance&lt;/code&gt; する必要がある場合は、awaitAdvanceメソッドの他の形式の1つを使用して、類似の構造でこれを調整できます。代わりに、到着時に登録を &lt;code&gt;awaitAdvance(arriveAndDeregister())&lt;/code&gt; する必要がある場合は、awaitAdvance（arriveAndDeregister（））を使用してください。</target>
        </trans-unit>
        <trans-unit id="b298b30836ac59332910f7b9733054fb1ef7ff82" translate="yes" xml:space="preserve">
          <source>Arrives at this phaser and awaits others. Equivalent in effect to &lt;code&gt;awaitAdvance(arrive())&lt;/code&gt;. If you need to await with interruption or timeout, you can arrange this with an analogous construction using one of the other forms of the &lt;code&gt;awaitAdvance&lt;/code&gt; method. If instead you need to deregister upon arrival, use &lt;code&gt;awaitAdvance(arriveAndDeregister())&lt;/code&gt;.</source>
          <target state="translated">このフェイザーに到着し、他の人を待っています。実質的に &lt;code&gt;awaitAdvance(arrive())&lt;/code&gt; と同等です。割り込みまたはタイムアウトで &lt;code&gt;awaitAdvance&lt;/code&gt; する必要がある場合は、awaitAdvanceメソッドの他の形式のいずれかを使用して、類似の構成でこれを調整できます。代わりに、到着時に登録 &lt;code&gt;awaitAdvance(arriveAndDeregister())&lt;/code&gt; する必要がある場合は、awaitAdvance（arriveAndDeregister（））を使用します。</target>
        </trans-unit>
        <trans-unit id="5ea548ad2eef87c5d8b67034a1e4844e0af0439d" translate="yes" xml:space="preserve">
          <source>Arrives at this phaser and deregisters from it without waiting for others to arrive.</source>
          <target state="translated">このフェイザーに到着し、他の人の到着を待たずに登録を解除する。</target>
        </trans-unit>
        <trans-unit id="331a996402bfe9c73489f9b59ef23c5414ff2f59" translate="yes" xml:space="preserve">
          <source>Arrives at this phaser and deregisters from it without waiting for others to arrive. Deregistration reduces the number of parties required to advance in future phases. If this phaser has a parent, and deregistration causes this phaser to have zero parties, this phaser is also deregistered from its parent.</source>
          <target state="translated">このフェイザーに到着し、他の人の到着を待たずに登録を解除する。登録解除は、将来のフェイズに進むために必要なパーティの数を減らす。このフェイザーに親がいて、登録解除によってこのフェイザーのパーティ数がゼロになった場合、このフェイザーも親から登録解除される。</target>
        </trans-unit>
        <trans-unit id="d77bf15c90eea56d5b8772727b356cf4aaf22515" translate="yes" xml:space="preserve">
          <source>Arrives at this phaser, without waiting for others to arrive.</source>
          <target state="translated">他の人の到着を待たずに、このフェイザーに到着。</target>
        </trans-unit>
        <trans-unit id="0b0acd2f28a72c90a83e78811a10a96eb0dbb71a" translate="yes" xml:space="preserve">
          <source>ArrowButton's are special types of buttons that also render a directional indicator, typically an arrow.</source>
          <target state="translated">矢印ボタンは、方向指示器(通常は矢印)を表示する特別なタイプのボタンです。</target>
        </trans-unit>
        <trans-unit id="5c6cd0f44fc52608739cfb8e05a5e7345de993e6" translate="yes" xml:space="preserve">
          <source>ArrowButton's are special types of buttons that also render a directional indicator, typically an arrow. ArrowButtons are used by composite components, for example ScrollBar's contain ArrowButtons. To bind a style to this &lt;code&gt;Region&lt;/code&gt; use the name &lt;code&gt;ArrowButton&lt;/code&gt;.</source>
          <target state="translated">ArrowButtonは、方向インジケーター（通常は矢印）もレンダリングする特殊なタイプのボタンです。ArrowButtonsは、複合コンポーネントによって使用されます。たとえば、ScrollBarにはArrowButtonsが含まれています。スタイルをこの &lt;code&gt;Region&lt;/code&gt; バインドするには、 &lt;code&gt;ArrowButton&lt;/code&gt; という名前を使用します。</target>
        </trans-unit>
        <trans-unit id="9cc73ee5807d168a1d8aacc166c82c2ee7c47082" translate="yes" xml:space="preserve">
          <source>ArrowButtonListener</source>
          <target state="translated">ArrowButtonListener</target>
        </trans-unit>
        <trans-unit id="85039c6640a4167808be49d7f6bbb5c37d904454" translate="yes" xml:space="preserve">
          <source>Artificial unit that represents the concept of forever.</source>
          <target state="translated">永遠の概念を表す人工単位。</target>
        </trans-unit>
        <trans-unit id="09a0f3f10a2375351ccbcd46c508e740e33c0052" translate="yes" xml:space="preserve">
          <source>Artificial unit that represents the concept of forever. This is primarily used with &lt;a href=&quot;temporalfield&quot;&gt;&lt;code&gt;TemporalField&lt;/code&gt;&lt;/a&gt; to represent unbounded fields such as the year or era. The estimated duration of the era is artificially defined as the largest duration supported by &lt;code&gt;Duration&lt;/code&gt;.</source>
          <target state="translated">永遠の概念を表現する人工ユニット。これは主に&lt;a href=&quot;temporalfield&quot;&gt; &lt;code&gt;TemporalField&lt;/code&gt; で&lt;/a&gt;使用され、年や年号などの境界のないフィールドを表します。時代の推定期間は、 &lt;code&gt;Duration&lt;/code&gt; によってサポートされる最大期間として人工的に定義されます。</target>
        </trans-unit>
        <trans-unit id="28878bd911a6e2161201f12a752b16a0e3a64e59" translate="yes" xml:space="preserve">
          <source>Artificial unit that represents the concept of forever. This is primarily used with &lt;a href=&quot;temporalfield&quot;&gt;&lt;code&gt;TemporalField&lt;/code&gt;&lt;/a&gt; to represent unbounded fields such as the year or era. The estimated duration of this unit is artificially defined as the largest duration supported by &lt;a href=&quot;../duration&quot;&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">永遠のコンセプトを表現する人工ユニット。これは主に&lt;a href=&quot;temporalfield&quot;&gt; &lt;code&gt;TemporalField&lt;/code&gt; で&lt;/a&gt;使用され、年や時代などの無制限のフィールドを表します。このユニットの推定持続時間は人為によってサポートされる最大継続時間として定義される&lt;a href=&quot;../duration&quot;&gt; &lt;code&gt;Duration&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="51055c590ce92112eede9c3d7b64cc8efee1e10c" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;ArrayType&lt;/code&gt; instances are immutable, the hash code for this instance is calculated once, on the first call to &lt;code&gt;hashCode&lt;/code&gt;, and then the same value is returned for subsequent calls.</source>
          <target state="translated">&lt;code&gt;ArrayType&lt;/code&gt; のインスタンスは不変で、このインスタンスのハッシュコードは、の最初の呼び出し時に1回だけ計算された &lt;code&gt;hashCode&lt;/code&gt; と同じ値が後続の呼び出しのために戻されます。</target>
        </trans-unit>
        <trans-unit id="8a06eee7db8e8e0c95360d596e24304443d3c08a" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;ArrayType&lt;/code&gt; instances are immutable, the string representation for this instance is calculated once, on the first call to &lt;code&gt;toString&lt;/code&gt;, and then the same value is returned for subsequent calls.</source>
          <target state="translated">&lt;code&gt;ArrayType&lt;/code&gt; のインスタンスは不変で、このインスタンスの文字列表現の最初の呼び出し時に1回だけ計算される &lt;code&gt;toString&lt;/code&gt; し、同じ値が後続の呼び出しのために戻されます。</target>
        </trans-unit>
        <trans-unit id="4f31c066c80c5ecc56fb18455cfb5f55e8d1452b" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;CompositeType&lt;/code&gt; instances are immutable, the hash code for this instance is calculated once, on the first call to &lt;code&gt;hashCode&lt;/code&gt;, and then the same value is returned for subsequent calls.</source>
          <target state="translated">&lt;code&gt;CompositeType&lt;/code&gt; インスタンスは不変で、このインスタンスのハッシュコードは、の最初の呼び出し時に1回だけ計算された &lt;code&gt;hashCode&lt;/code&gt; と同じ値が後続の呼び出しのために戻されます。</target>
        </trans-unit>
        <trans-unit id="14e5a49915ee48848aa83aac1c10d5aa4e7f1ccb" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;CompositeType&lt;/code&gt; instances are immutable, the string representation for this instance is calculated once, on the first call to &lt;code&gt;toString&lt;/code&gt;, and then the same value is returned for subsequent calls.</source>
          <target state="translated">&lt;code&gt;CompositeType&lt;/code&gt; インスタンスは不変で、このインスタンスの文字列表現の最初の呼び出し時に1回だけ計算される &lt;code&gt;toString&lt;/code&gt; し、同じ値が後続の呼び出しのために戻されます。</target>
        </trans-unit>
        <trans-unit id="f39844cef3aced03bf7c027927a3077ca0c207aa" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;EventHandler&lt;/code&gt; ultimately relies on reflection to invoke a method we recommend against targeting an overloaded method. For example, if the target is an instance of the class &lt;code&gt;MyTarget&lt;/code&gt; which is defined as:</source>
          <target state="translated">&lt;code&gt;EventHandler&lt;/code&gt; は最終的にメソッドを呼び出すためにリフレクションに依存している私たちは、オーバーロードされたメソッドをターゲットに対してお勧めします。たとえば、ターゲットが次のように定義される &lt;code&gt;MyTarget&lt;/code&gt; クラスのインスタンスである場合：</target>
        </trans-unit>
        <trans-unit id="0ee103e1a122355fcb9e79b4fe3fc234251537c4" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;OpenMBeanAttributeInfoSupport&lt;/code&gt; instances are immutable, the hash code for this instance is calculated once, on the first call to &lt;code&gt;hashCode&lt;/code&gt;, and then the same value is returned for subsequent calls.</source>
          <target state="translated">&lt;code&gt;OpenMBeanAttributeInfoSupport&lt;/code&gt; のインスタンスは不変で、このインスタンスのハッシュコードは、の最初の呼び出し時に1回だけ計算された &lt;code&gt;hashCode&lt;/code&gt; と同じ値が後続の呼び出しのために戻されます。</target>
        </trans-unit>
        <trans-unit id="946d6e26cfa18c5dae68a73cdfafd66ae3e8c5fc" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;OpenMBeanAttributeInfoSupport&lt;/code&gt; instances are immutable, the string representation for this instance is calculated once, on the first call to &lt;code&gt;toString&lt;/code&gt;, and then the same value is returned for subsequent calls.</source>
          <target state="translated">&lt;code&gt;OpenMBeanAttributeInfoSupport&lt;/code&gt; のインスタンスは不変で、このインスタンスの文字列表現の最初の呼び出し時に1回だけ計算される &lt;code&gt;toString&lt;/code&gt; し、同じ値が後続の呼び出しのために戻されます。</target>
        </trans-unit>
        <trans-unit id="9bfab5877cfd4aadd260affbf021286f773564b5" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;OpenMBeanConstructorInfoSupport&lt;/code&gt; instances are immutable, the hash code for this instance is calculated once, on the first call to &lt;code&gt;hashCode&lt;/code&gt;, and then the same value is returned for subsequent calls.</source>
          <target state="translated">&lt;code&gt;OpenMBeanConstructorInfoSupport&lt;/code&gt; のインスタンスは不変で、このインスタンスのハッシュコードは、の最初の呼び出し時に1回だけ計算された &lt;code&gt;hashCode&lt;/code&gt; と同じ値が後続の呼び出しのために戻されます。</target>
        </trans-unit>
        <trans-unit id="7ac07f54833c9ed8e5c753676bb8a2eddf1a57aa" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;OpenMBeanConstructorInfoSupport&lt;/code&gt; instances are immutable, the string representation for this instance is calculated once, on the first call to &lt;code&gt;toString&lt;/code&gt;, and then the same value is returned for subsequent calls.</source>
          <target state="translated">&lt;code&gt;OpenMBeanConstructorInfoSupport&lt;/code&gt; のインスタンスは不変で、このインスタンスの文字列表現の最初の呼び出し時に1回だけ計算される &lt;code&gt;toString&lt;/code&gt; し、同じ値が後続の呼び出しのために戻されます。</target>
        </trans-unit>
        <trans-unit id="dbf0445af58e188e046e7e859bff2655bb05cf95" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;OpenMBeanInfoSupport&lt;/code&gt; instances are immutable, the hash code for this instance is calculated once, on the first call to &lt;code&gt;hashCode&lt;/code&gt;, and then the same value is returned for subsequent calls.</source>
          <target state="translated">&lt;code&gt;OpenMBeanInfoSupport&lt;/code&gt; のインスタンスは不変で、このインスタンスのハッシュコードは、の最初の呼び出し時に1回だけ計算された &lt;code&gt;hashCode&lt;/code&gt; と同じ値が後続の呼び出しのために戻されます。</target>
        </trans-unit>
        <trans-unit id="428c0b090909064feea96c5ea3e0851adaf9590a" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;OpenMBeanInfoSupport&lt;/code&gt; instances are immutable, the string representation for this instance is calculated once, on the first call to &lt;code&gt;toString&lt;/code&gt;, and then the same value is returned for subsequent calls.</source>
          <target state="translated">&lt;code&gt;OpenMBeanInfoSupport&lt;/code&gt; のインスタンスは不変で、このインスタンスの文字列表現の最初の呼び出し時に1回だけ計算される &lt;code&gt;toString&lt;/code&gt; し、同じ値が後続の呼び出しのために戻されます。</target>
        </trans-unit>
        <trans-unit id="b3c738e291bc0c1040cfbeb66d921626f9eb1fdc" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;OpenMBeanOperationInfoSupport&lt;/code&gt; instances are immutable, the hash code for this instance is calculated once, on the first call to &lt;code&gt;hashCode&lt;/code&gt;, and then the same value is returned for subsequent calls.</source>
          <target state="translated">&lt;code&gt;OpenMBeanOperationInfoSupport&lt;/code&gt; のインスタンスは不変で、このインスタンスのハッシュコードは、の最初の呼び出し時に1回だけ計算された &lt;code&gt;hashCode&lt;/code&gt; と同じ値が後続の呼び出しのために戻されます。</target>
        </trans-unit>
        <trans-unit id="227aadac004a08ea1ee54c3a5b5ecd8b3b17e38b" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;OpenMBeanOperationInfoSupport&lt;/code&gt; instances are immutable, the string representation for this instance is calculated once, on the first call to &lt;code&gt;toString&lt;/code&gt;, and then the same value is returned for subsequent calls.</source>
          <target state="translated">&lt;code&gt;OpenMBeanOperationInfoSupport&lt;/code&gt; のインスタンスは不変で、このインスタンスの文字列表現の最初の呼び出し時に1回だけ計算される &lt;code&gt;toString&lt;/code&gt; し、同じ値が後続の呼び出しのために戻されます。</target>
        </trans-unit>
        <trans-unit id="c6930e46117c4bb5747552c4bb0b1e5ed8204dae" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;OpenMBeanParameterInfoSupport&lt;/code&gt; instances are immutable, the hash code for this instance is calculated once, on the first call to &lt;code&gt;hashCode&lt;/code&gt;, and then the same value is returned for subsequent calls.</source>
          <target state="translated">&lt;code&gt;OpenMBeanParameterInfoSupport&lt;/code&gt; のインスタンスは不変で、このインスタンスのハッシュコードは、の最初の呼び出し時に1回だけ計算された &lt;code&gt;hashCode&lt;/code&gt; と同じ値が後続の呼び出しのために戻されます。</target>
        </trans-unit>
        <trans-unit id="c28102d97791fec60864d02ec9584b7d0725f6f7" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;OpenMBeanParameterInfoSupport&lt;/code&gt; instances are immutable, the string representation for this instance is calculated once, on the first call to &lt;code&gt;toString&lt;/code&gt;, and then the same value is returned for subsequent calls.</source>
          <target state="translated">&lt;code&gt;OpenMBeanParameterInfoSupport&lt;/code&gt; のインスタンスは不変で、このインスタンスの文字列表現の最初の呼び出し時に1回だけ計算される &lt;code&gt;toString&lt;/code&gt; し、同じ値が後続の呼び出しのために戻されます。</target>
        </trans-unit>
        <trans-unit id="f4aa7fa6a849490533c1d02585baa36a48ace15e" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;SimpleType&lt;/code&gt; instances are immutable, the hash code for this instance is calculated once, on the first call to &lt;code&gt;hashCode&lt;/code&gt;, and then the same value is returned for subsequent calls.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; のインスタンスは不変で、このインスタンスのハッシュコードは、の最初の呼び出し時に1回だけ計算された &lt;code&gt;hashCode&lt;/code&gt; と同じ値が後続の呼び出しのために戻されます。</target>
        </trans-unit>
        <trans-unit id="ab6cadd5d40419488fed610574bff741e74a9113" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;SimpleType&lt;/code&gt; instances are immutable, the string representation for this instance is calculated once, on the first call to &lt;code&gt;toString&lt;/code&gt;, and then the same value is returned for subsequent calls.</source>
          <target state="translated">&lt;code&gt;SimpleType&lt;/code&gt; のインスタンスは不変で、このインスタンスの文字列表現の最初の呼び出し時に1回だけ計算される &lt;code&gt;toString&lt;/code&gt; し、同じ値が後続の呼び出しのために戻されます。</target>
        </trans-unit>
        <trans-unit id="93bc4d923197d0977c93323bf2dfa7f5a46914ed" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;TabularType&lt;/code&gt; instances are immutable, the hash code for this instance is calculated once, on the first call to &lt;code&gt;hashCode&lt;/code&gt;, and then the same value is returned for subsequent calls.</source>
          <target state="translated">&lt;code&gt;TabularType&lt;/code&gt; でのインスタンスは不変で、このインスタンスのハッシュコードは、の最初の呼び出し時に1回だけ計算された &lt;code&gt;hashCode&lt;/code&gt; と同じ値が後続の呼び出しのために戻されます。</target>
        </trans-unit>
        <trans-unit id="047b3ab07b8a9ec14650cf8b2c56435c20d42ea5" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;TabularType&lt;/code&gt; instances are immutable, the string representation for this instance is calculated once, on the first call to &lt;code&gt;toString&lt;/code&gt;, and then the same value is returned for subsequent calls.</source>
          <target state="translated">&lt;code&gt;TabularType&lt;/code&gt; でのインスタンスは不変で、このインスタンスの文字列表現の最初の呼び出し時に1回だけ計算される &lt;code&gt;toString&lt;/code&gt; し、同じ値が後続の呼び出しのために戻されます。</target>
        </trans-unit>
        <trans-unit id="396ab8afee4eb44f6c8771bdd963d301172563d2" translate="yes" xml:space="preserve">
          <source>As &lt;code&gt;c1&lt;/code&gt; is the largest of the three components, the parallel group is sized to &lt;code&gt;c1&lt;/code&gt;. As &lt;code&gt;c2&lt;/code&gt; and &lt;code&gt;c3&lt;/code&gt; are smaller than &lt;code&gt;c1&lt;/code&gt; they are aligned based on the alignment specified for the component (if specified) or the default alignment of the parallel group. In the diagram &lt;code&gt;c2&lt;/code&gt; and &lt;code&gt;c3&lt;/code&gt; were created with an alignment of &lt;code&gt;LEADING&lt;/code&gt;. If the component orientation were right-to-left then &lt;code&gt;c2&lt;/code&gt; and &lt;code&gt;c3&lt;/code&gt; would be positioned on the opposite side.</source>
          <target state="translated">&lt;code&gt;c1&lt;/code&gt; は3つの成分の最も大きい、パラレルグループが大きさである &lt;code&gt;c1&lt;/code&gt; 。 &lt;code&gt;c2&lt;/code&gt; と &lt;code&gt;c3&lt;/code&gt; より小さい &lt;code&gt;c1&lt;/code&gt; それらはアラインメントに基づいて配列されている成分（指定されている場合）または並列グループのデフォルトの位置合わせのために指定されました。図では、 &lt;code&gt;c2&lt;/code&gt; と &lt;code&gt;c3&lt;/code&gt; は &lt;code&gt;LEADING&lt;/code&gt; の配置で作成されています。コンポーネントの向きが右から左の場合、 &lt;code&gt;c2&lt;/code&gt; と &lt;code&gt;c3&lt;/code&gt; は反対側に配置されます。</target>
        </trans-unit>
        <trans-unit id="28a1d751cfb71b7fcb97fc65216d17c414cf67ab" translate="yes" xml:space="preserve">
          <source>As RFC 1122 section 4.2.4.2 indicates, a compliant TCP implementation should, but is not required to, let application change the TOS field during the lifetime of a connection. So whether the type-of-service field can be changed after the TCP connection has been established depends on the implementation in the underlying platform. Applications should not assume that they can change the TOS field after the connection.</source>
          <target state="translated">RFC 1122の4.2.4.2節が示すように、準拠したTCPの実装では、アプリケーションが接続の有効期間中にTOSフィールドを変更できるようにすべきですが、その必要はありません。したがって、TCP 接続が確立された後にサービスタイプフィールドを変更できるかどうかは、基礎となるプラットフォームの実装に依存します。アプリケーションは、接続後にTOSフィールドを変更できると仮定すべきではありません。</target>
        </trans-unit>
        <trans-unit id="e1f390e0b93e35b816181456c6d7c90804944390" translate="yes" xml:space="preserve">
          <source>As SO_SNDBUF is a hint, applications that want to verify what size the buffer is should call &lt;a href=&quot;#getSendBufferSize()&quot;&gt;&lt;code&gt;getSendBufferSize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">SO_SNDBUFはヒントであるため、バッファーのサイズを確認するアプリケーションは、&lt;a href=&quot;#getSendBufferSize()&quot;&gt; &lt;code&gt;getSendBufferSize()&lt;/code&gt; &lt;/a&gt;を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="63933179360786262318bf144605f9c23c651e60" translate="yes" xml:space="preserve">
          <source>As SO_SNDBUF is a hint, applications that want to verify what size the buffer is should call &lt;a href=&quot;datagramsocket#getSendBufferSize--&quot;&gt;&lt;code&gt;getSendBufferSize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">SO_SNDBUFはヒントであるため、バッファーのサイズを確認する必要があるアプリケーションは、&lt;a href=&quot;datagramsocket#getSendBufferSize--&quot;&gt; &lt;code&gt;getSendBufferSize()&lt;/code&gt; &lt;/a&gt;を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="8c126704b5a3fcc95e4f56fd04a4805113d3d177" translate="yes" xml:space="preserve">
          <source>As a convenience, &lt;code&gt;BorderLayout&lt;/code&gt; interprets the absence of a string specification the same as the constant &lt;code&gt;CENTER&lt;/code&gt;:</source>
          <target state="translated">便宜上、 &lt;code&gt;BorderLayout&lt;/code&gt; は、文字列指定がないことを定数 &lt;code&gt;CENTER&lt;/code&gt; と同じように解釈します。</target>
        </trans-unit>
        <trans-unit id="623216a332823a9b42526097333c8db524b41960" translate="yes" xml:space="preserve">
          <source>As a convenience, the standard classes that implement this interface (such as &lt;code&gt;JFrame&lt;/code&gt;, &lt;code&gt;JDialog&lt;/code&gt;, &lt;code&gt;JWindow&lt;/code&gt;, &lt;code&gt;JApplet&lt;/code&gt;, and &lt;code&gt;JInternalFrame&lt;/code&gt;) have their &lt;code&gt;add&lt;/code&gt;, &lt;code&gt;remove&lt;/code&gt;, and &lt;code&gt;setLayout&lt;/code&gt; methods overridden, so that they delegate calls to the corresponding methods of the &lt;code&gt;ContentPane&lt;/code&gt;. For example, you can add a child component to a frame as follows:</source>
          <target state="translated">便宜上、このインターフェイスを実装する標準クラス（ &lt;code&gt;JFrame&lt;/code&gt; 、 &lt;code&gt;JDialog&lt;/code&gt; 、 &lt;code&gt;JWindow&lt;/code&gt; 、 &lt;code&gt;JApplet&lt;/code&gt; 、 &lt;code&gt;JInternalFrame&lt;/code&gt; など）では、 &lt;code&gt;add&lt;/code&gt; 、 &lt;code&gt;remove&lt;/code&gt; 、および &lt;code&gt;setLayout&lt;/code&gt; メソッドがオーバーライドされるため、 &lt;code&gt;ContentPane&lt;/code&gt; の対応するメソッドへの呼び出しが委任されます。たとえば、次のように子コンポーネントをフレームに追加できます。</target>
        </trans-unit>
        <trans-unit id="1384114084e4b557636b3a669133612afbae554c" translate="yes" xml:space="preserve">
          <source>As a corner case, an uncasted &lt;code&gt;null&lt;/code&gt; argument is given a symbolic type descriptor of &lt;code&gt;java.lang.Void&lt;/code&gt;. The ambiguity with the type &lt;code&gt;Void&lt;/code&gt; is harmless, since there are no references of type &lt;code&gt;Void&lt;/code&gt; except the null reference.</source>
          <target state="translated">コーナーケースとして、キャストされていない &lt;code&gt;null&lt;/code&gt; 引数には、 &lt;code&gt;java.lang.Void&lt;/code&gt; のシンボリック型記述子が与えられます。ヌル参照以外に &lt;code&gt;Void&lt;/code&gt; 型の参照がないため、 &lt;code&gt;Void&lt;/code&gt; 型とのあいまいさは無害です。</target>
        </trans-unit>
        <trans-unit id="4dd15ca7767698ca99948d2fe7faf753510dcb36" translate="yes" xml:space="preserve">
          <source>As a corollary of this, access to protected members is restricted to receivers only of the accessing class, or one of its subclasses, and the accessing class must in turn be a subclass (or package sibling) of the protected member's defining class. If a method reference refers to a protected non-static method or field of a class outside the current package, the receiver argument will be narrowed to the type of the accessing class.</source>
          <target state="translated">これに関連して、保護されたメンバーへのアクセスは、アクセスしているクラスまたはそのサブクラスの一つの受信者にのみ制限されています。メソッド参照が現在のパッケージ外のクラスの保護された非静的メソッドやフィールドを参照している場合、レシーバの引数はアクセスするクラスの型に絞られます。</target>
        </trans-unit>
        <trans-unit id="b5e2fbf4bf3c3874328b22e88bce1d044494b951" translate="yes" xml:space="preserve">
          <source>As a corollary, two threads must not attempt to call the same method (either &lt;code&gt;wrap()&lt;/code&gt; or &lt;code&gt;unwrap()&lt;/code&gt;) concurrently, because there is no way to guarantee the eventual packet ordering.</source>
          <target state="translated">当然の結果として、最終的なパケットの順序を保証する方法がないため、2つのスレッドが同じメソッド（ &lt;code&gt;wrap()&lt;/code&gt; または &lt;code&gt;unwrap()&lt;/code&gt; ）を同時に呼び出そうとしないでください。</target>
        </trans-unit>
        <trans-unit id="294df90d4fa2b7808301cd9a5c8eb1990b072037" translate="yes" xml:space="preserve">
          <source>As a delegate of Views, this object is responsible for the insets of a View and making sure the background is maintained according to the CSS attributes.</source>
          <target state="translated">Viewsのデリゲートとして、このオブジェクトはViewのインセットを担当し、背景がCSS属性に従って維持されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="580e11f8bfcdf88928df2e045bb0ed702f504ca2" translate="yes" xml:space="preserve">
          <source>As a further improvement, notice that the left task need not even exist. Instead of creating a new one, we can iterate using the original task, and add a pending count for each fork. Additionally, because no task in this tree implements an &lt;a href=&quot;countedcompleter#onCompletion-java.util.concurrent.CountedCompleter-&quot;&gt;&lt;code&gt;onCompletion(CountedCompleter)&lt;/code&gt;&lt;/a&gt; method, &lt;code&gt;tryComplete()&lt;/code&gt; can be replaced with &lt;a href=&quot;countedcompleter#propagateCompletion--&quot;&gt;&lt;code&gt;propagateCompletion()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">さらなる改善として、左のタスクが存在する必要さえないことに注意してください。新しいタスクを作成する代わりに、元のタスクを使用して繰り返し、各フォークに保留中のカウントを追加できます。また、このツリーの実装ではありませんので、タスク&lt;a href=&quot;countedcompleter#onCompletion-java.util.concurrent.CountedCompleter-&quot;&gt; &lt;code&gt;onCompletion(CountedCompleter)&lt;/code&gt; &lt;/a&gt;メソッド、 &lt;code&gt;tryComplete()&lt;/code&gt; を置き換えることができる&lt;a href=&quot;countedcompleter#propagateCompletion--&quot;&gt; &lt;code&gt;propagateCompletion()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5bad71a3fb8ccd4692da1314d34451b8a2867d03" translate="yes" xml:space="preserve">
          <source>As a further optimization, notice that the left task need not even exist. Instead of creating a new one, we can continue using the original task, and add a pending count for each fork. Additionally, because no task in this tree implements an &lt;a href=&quot;#onCompletion(java.util.concurrent.CountedCompleter)&quot;&gt;&lt;code&gt;onCompletion(CountedCompleter)&lt;/code&gt;&lt;/a&gt; method, &lt;code&gt;tryComplete&lt;/code&gt; can be replaced with &lt;a href=&quot;#propagateCompletion()&quot;&gt;&lt;code&gt;propagateCompletion()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">さらなる最適化として、左側のタスクが存在する必要さえないことに注意してください。新しいタスクを作成する代わりに、元のタスクを引き続き使用して、各フォークに保留中のカウントを追加できます。さらに、このツリーには&lt;a href=&quot;#onCompletion(java.util.concurrent.CountedCompleter)&quot;&gt; &lt;code&gt;onCompletion(CountedCompleter)&lt;/code&gt; &lt;/a&gt;メソッドを実装するタスクがないため、 &lt;code&gt;tryComplete&lt;/code&gt; を&lt;a href=&quot;#propagateCompletion()&quot;&gt; &lt;code&gt;propagateCompletion()&lt;/code&gt; に&lt;/a&gt;置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="b8b19025d85d644eb22f97cbd0fa732dcda56af0" translate="yes" xml:space="preserve">
          <source>As a general rule, the default load factor (.75) offers a good tradeoff between time and space costs. Higher values decrease the space overhead but increase the lookup cost (reflected in most of the operations of the &lt;code&gt;HashMap&lt;/code&gt; class, including &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;put&lt;/code&gt;). The expected number of entries in the map and its load factor should be taken into account when setting its initial capacity, so as to minimize the number of rehash operations. If the initial capacity is greater than the maximum number of entries divided by the load factor, no rehash operations will ever occur.</source>
          <target state="translated">原則として、デフォルトの負荷係数（.75）は、時間とスペースのコストの間で適切なトレードオフを提供します。値を大きくすると、スペースのオーバーヘッドは減少しますが、検索コストが増加します（ &lt;code&gt;get&lt;/code&gt; および &lt;code&gt;put&lt;/code&gt; を含む &lt;code&gt;HashMap&lt;/code&gt; クラスのほとんどの操作で反映されます）。マップ内の予想されるエントリ数とその負荷係数は、初期容量を設定するときに考慮に入れて、再ハッシュ操作の数を最小限に抑える必要があります。初期容量がエントリの最大数を負荷係数で割った値より大きい場合、再ハッシュ操作は発生しません。</target>
        </trans-unit>
        <trans-unit id="7f05ad47986d3ce6ff04a4c600cb7bc75a4a5dad" translate="yes" xml:space="preserve">
          <source>As a guide to naming &lt;code&gt;SyncProvider&lt;/code&gt; implementations, the following should be noted:</source>
          <target state="translated">&lt;code&gt;SyncProvider&lt;/code&gt; 実装に名前を付けるためのガイドとして、次の点に注意する必要があります。</target>
        </trans-unit>
        <trans-unit id="e854b3bf3147e12e70b3724dc0c7a2eaff478c26" translate="yes" xml:space="preserve">
          <source>As a matter of pure convention, the &lt;a href=&quot;methodhandles.lookup#lookupClass&quot;&gt;lookup class&lt;/a&gt; of this lookup object will be &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">純粋な規則の問題として、このルックアップオブジェクトの&lt;a href=&quot;methodhandles.lookup#lookupClass&quot;&gt;ルックアップクラス&lt;/a&gt;は&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d14768545d05835f3609fcc1faf367631d891a6e" translate="yes" xml:space="preserve">
          <source>As a matter of pure convention, the &lt;a href=&quot;methodhandles.lookup#lookupClass()&quot;&gt;lookup class&lt;/a&gt; of this lookup object will be &lt;a href=&quot;../object&quot;&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">純粋な慣例として、このルックアップオブジェクトの&lt;a href=&quot;methodhandles.lookup#lookupClass()&quot;&gt;ルックアップクラス&lt;/a&gt;は&lt;a href=&quot;../object&quot;&gt; &lt;code&gt;Object&lt;/code&gt; になり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="7b19e5b4703495ec90563138008d666eca821389" translate="yes" xml:space="preserve">
          <source>As a matter of style, programmers should always use this annotation on the most deeply nested element where it is effective. If you want to suppress a warning in a particular method, you should annotate that method rather than its class.</source>
          <target state="translated">スタイルの問題として、プログラマは常にこのアノテーションを効果的な最も深い入れ子になっている要素に使用するべきです。特定のメソッドで警告を抑制したい場合は、そのメソッドのクラスではなく、そのメソッドにアノテーションを付けるべきです。</target>
        </trans-unit>
        <trans-unit id="4b54334dbad11746d8242cb8b52d1a32929adbea" translate="yes" xml:space="preserve">
          <source>As a numeric identifier.</source>
          <target state="translated">数字の識別子として。</target>
        </trans-unit>
        <trans-unit id="10ae13ed4ff91de1ecaf9c67004a39286fa17f1e" translate="yes" xml:space="preserve">
          <source>As a particular instance of the &lt;a href=&quot;package-summary&quot;&gt;general accuracy requirements&lt;/a&gt; and the ordering behavior required of this interface, the list of enclosed elements will be returned in the natural order for the originating source of information about the type. For example, if the information about the type is originating from a source file, the elements will be returned in source code order. (However, in that case the the ordering of &lt;a href=&quot;../util/elements.origin#MANDATED&quot;&gt;implicitly declared&lt;/a&gt; elements, such as default constructors, is not specified.)</source>
          <target state="translated">このインターフェイスに必要な&lt;a href=&quot;package-summary&quot;&gt;一般的な精度要件&lt;/a&gt;と順序付け動作の特定の例として、囲まれた要素のリストが、タイプに関する情報の元のソースに対して自然な順序で返されます。たとえば、タイプに関する情報がソースファイルからのものである場合、要素はソースコードの順序で返されます。（ただし、その場合、デフォルトのコンストラクターなど、&lt;a href=&quot;../util/elements.origin#MANDATED&quot;&gt;暗黙的に宣言された&lt;/a&gt;要素の順序は指定されません。）</target>
        </trans-unit>
        <trans-unit id="4ea0debaf0c58be87193507940bb32b65aead044" translate="yes" xml:space="preserve">
          <source>As a rule, the &lt;code&gt;equals&lt;/code&gt; method should be used by implementations of this class to decide if two keys are the same.</source>
          <target state="translated">原則として、このクラスの実装では、 &lt;code&gt;equals&lt;/code&gt; メソッドを使用して、2つのキーが同じかどうかを判断する必要があります。</target>
        </trans-unit>
        <trans-unit id="cc11a3f7d42b1ac540afd0c6c3ee9d0bfe836f85" translate="yes" xml:space="preserve">
          <source>As a special case, a value of -1 will produce a single large segment with all input files, while a value of 0 will produce one segment for each class. Larger archive segments result in less fragmentation and better compression, but processing them requires more memory.</source>
          <target state="translated">特殊なケースとして、値 -1 を指定すると、すべての入力ファイルに対して 1 つの大きなセグメントが生成され、値 0 を指定すると各クラスに対して 1 つのセグメントが生成されます。アーカイブのセグメントが大きいほど断片化が少なく圧縮率が高くなりますが、処理にはより多くのメモリを必要とします。</target>
        </trans-unit>
        <trans-unit id="6ffc2cd29b50910748b3dfc8aac2d22991c2da03" translate="yes" xml:space="preserve">
          <source>As a special case, if the body contributes only &lt;code&gt;V&lt;/code&gt; and &lt;code&gt;I&lt;/code&gt; types, with no additional &lt;code&gt;A&lt;/code&gt; types, then the internal parameter list is extended by the argument types &lt;code&gt;A...&lt;/code&gt; of the &lt;code&gt;end&lt;/code&gt; handle.</source>
          <target state="translated">特殊なケースとして、体が寄与する場合にのみ、 &lt;code&gt;V&lt;/code&gt; と &lt;code&gt;I&lt;/code&gt; なし追加と種類、 &lt;code&gt;A&lt;/code&gt; の種類、内部パラメータリストは、引数の型によって拡張された &lt;code&gt;A...&lt;/code&gt; の &lt;code&gt;end&lt;/code&gt; ハンドル。</target>
        </trans-unit>
        <trans-unit id="0543fa2121ace689795a5b36a10d99cf789f79b8" translate="yes" xml:space="preserve">
          <source>As a special case, if the body contributes only &lt;code&gt;V&lt;/code&gt; and &lt;code&gt;I&lt;/code&gt; types, with no additional &lt;code&gt;A&lt;/code&gt; types, then the internal parameter list is extended by the argument types &lt;code&gt;A...&lt;/code&gt; of the &lt;code&gt;iterations&lt;/code&gt; handle.</source>
          <target state="translated">特殊なケースとして、体が寄与する場合にのみ、 &lt;code&gt;V&lt;/code&gt; と &lt;code&gt;I&lt;/code&gt; なし追加と種類、 &lt;code&gt;A&lt;/code&gt; の種類、内部パラメータリストは、引数の型によって拡張された &lt;code&gt;A...&lt;/code&gt; の &lt;code&gt;iterations&lt;/code&gt; ハンドル。</target>
        </trans-unit>
        <trans-unit id="c77f144e7f31f7133a206cb54181a33e19ca97bd" translate="yes" xml:space="preserve">
          <source>As a special case, if the body contributes only &lt;code&gt;V&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt; types, with no additional &lt;code&gt;A&lt;/code&gt; types, then the internal parameter list is extended by the argument types &lt;code&gt;A...&lt;/code&gt; of the &lt;code&gt;iterator&lt;/code&gt; handle; if it is &lt;code&gt;null&lt;/code&gt; the single type &lt;code&gt;Iterable&lt;/code&gt; is added and constitutes the &lt;code&gt;A...&lt;/code&gt; list.</source>
          <target state="translated">特殊なケースとして、本体のみの寄与場合 &lt;code&gt;V&lt;/code&gt; と &lt;code&gt;T&lt;/code&gt; なし追加とタイプ、 &lt;code&gt;A&lt;/code&gt; のタイプは、内部パラメータリストは、引数の型によって拡張された &lt;code&gt;A...&lt;/code&gt; の &lt;code&gt;iterator&lt;/code&gt; ハンドル。 &lt;code&gt;null&lt;/code&gt; の場合、単一のタイプ &lt;code&gt;Iterable&lt;/code&gt; が追加され、 &lt;code&gt;A...&lt;/code&gt; リストを構成します。</target>
        </trans-unit>
        <trans-unit id="08b0d14a79938767ce36fbb2707705d3d9cc39a1" translate="yes" xml:space="preserve">
          <source>As a special case, urls of the form, &quot;scheme:*&quot; are accepted to mean any url of the given scheme.</source>
          <target state="translated">特殊なケースとして、&quot;scheme:*&quot;という形式のURLは、与えられたスキームの任意のURLを意味するものとして受け入れられます。</target>
        </trans-unit>
        <trans-unit id="84f7d6bfe0569d881c0e177f460ee852887b2dff" translate="yes" xml:space="preserve">
          <source>As a special case, when the Core Reflection API is used to view the signature polymorphic access mode methods in this class, they appear as ordinary non-polymorphic methods. Their reflective appearance, as viewed by &lt;a href=&quot;../class#getDeclaredMethod(java.lang.String,java.lang.Class...)&quot;&gt;&lt;code&gt;Class.getDeclaredMethod&lt;/code&gt;&lt;/a&gt;, is unaffected by their special status in this API. For example, &lt;a href=&quot;../reflect/executable#getModifiers()&quot;&gt;&lt;code&gt;Method.getModifiers&lt;/code&gt;&lt;/a&gt; will report exactly those modifier bits required for any similarly declared method, including in this case &lt;code&gt;native&lt;/code&gt; and &lt;code&gt;varargs&lt;/code&gt; bits.</source>
          <target state="translated">特別な場合として、Core Reflection APIを使用してこのクラスのシグネチャポリモーフィックアクセスモードメソッドを表示すると、通常の非ポリモーフィックメソッドとして表示されます。&lt;a href=&quot;../class#getDeclaredMethod(java.lang.String,java.lang.Class...)&quot;&gt; &lt;code&gt;Class.getDeclaredMethod&lt;/code&gt; &lt;/a&gt;で表示される反射的な外観は、このAPIでの特別なステータスの影響を受けません。たとえば、&lt;a href=&quot;../reflect/executable#getModifiers()&quot;&gt; &lt;code&gt;Method.getModifiers&lt;/code&gt; &lt;/a&gt;は、この場合は &lt;code&gt;native&lt;/code&gt; ビットと &lt;code&gt;varargs&lt;/code&gt; ビットを含む、同様に宣言されたメソッドに必要な修飾子ビットを正確に報告します。</target>
        </trans-unit>
        <trans-unit id="461db1b17375856f1f73326f8f768f30bff7ae49" translate="yes" xml:space="preserve">
          <source>As a special case, when the Core Reflection API is used to view the signature polymorphic methods &lt;code&gt;invokeExact&lt;/code&gt; or plain &lt;code&gt;invoke&lt;/code&gt; in this class, they appear as ordinary non-polymorphic methods. Their reflective appearance, as viewed by &lt;a href=&quot;../class#getDeclaredMethod(java.lang.String,java.lang.Class...)&quot;&gt;&lt;code&gt;Class.getDeclaredMethod&lt;/code&gt;&lt;/a&gt;, is unaffected by their special status in this API. For example, &lt;a href=&quot;../reflect/executable#getModifiers()&quot;&gt;&lt;code&gt;Method.getModifiers&lt;/code&gt;&lt;/a&gt; will report exactly those modifier bits required for any similarly declared method, including in this case &lt;code&gt;native&lt;/code&gt; and &lt;code&gt;varargs&lt;/code&gt; bits.</source>
          <target state="translated">特別な場合として、Core Reflection APIを使用してこのクラスのシグネチャポリモーフィックメソッド &lt;code&gt;invokeExact&lt;/code&gt; またはプレーン &lt;code&gt;invoke&lt;/code&gt; を表示すると、通常の非ポリモーフィックメソッドとして表示されます。&lt;a href=&quot;../class#getDeclaredMethod(java.lang.String,java.lang.Class...)&quot;&gt; &lt;code&gt;Class.getDeclaredMethod&lt;/code&gt; &lt;/a&gt;で表示される反射的な外観は、このAPIでの特別なステータスの影響を受けません。たとえば、&lt;a href=&quot;../reflect/executable#getModifiers()&quot;&gt; &lt;code&gt;Method.getModifiers&lt;/code&gt; &lt;/a&gt;は、この場合は &lt;code&gt;native&lt;/code&gt; ビットと &lt;code&gt;varargs&lt;/code&gt; ビットを含む、同様に宣言されたメソッドに必要な修飾子ビットを正確に報告します。</target>
        </trans-unit>
        <trans-unit id="216f9961d4139cec8f0bddd8265f28e7c9a615bb" translate="yes" xml:space="preserve">
          <source>As a special case, when the Core Reflection API is used to view the signature polymorphic methods &lt;code&gt;invokeExact&lt;/code&gt; or plain &lt;code&gt;invoke&lt;/code&gt; in this class, they appear as ordinary non-polymorphic methods. Their reflective appearance, as viewed by &lt;a href=&quot;../class#getDeclaredMethod-java.lang.String-java.lang.Class...-&quot;&gt;&lt;code&gt;Class.getDeclaredMethod&lt;/code&gt;&lt;/a&gt;, is unaffected by their special status in this API. For example, &lt;a href=&quot;../reflect/method#getModifiers--&quot;&gt;&lt;code&gt;Method.getModifiers&lt;/code&gt;&lt;/a&gt; will report exactly those modifier bits required for any similarly declared method, including in this case &lt;code&gt;native&lt;/code&gt; and &lt;code&gt;varargs&lt;/code&gt; bits.</source>
          <target state="translated">特殊なケースとして、コアリフレクションAPIを使用してこのクラスの署名ポリモーフィックメソッド &lt;code&gt;invokeExact&lt;/code&gt; または単純な &lt;code&gt;invoke&lt;/code&gt; を表示すると、通常の非ポリモーフィックメソッドとして表示されます。&lt;a href=&quot;../class#getDeclaredMethod-java.lang.String-java.lang.Class...-&quot;&gt; &lt;code&gt;Class.getDeclaredMethod&lt;/code&gt; &lt;/a&gt;によって表示されるそれらの反射的な外観は、このAPIでの特別なステータスの影響を受けません。たとえば、&lt;a href=&quot;../reflect/method#getModifiers--&quot;&gt; &lt;code&gt;Method.getModifiers&lt;/code&gt; &lt;/a&gt;は、同様に宣言されたメソッドに必要な修飾子ビット（この場合は &lt;code&gt;native&lt;/code&gt; ビットと &lt;code&gt;varargs&lt;/code&gt; ビットを含む）を正確に報告します。</target>
        </trans-unit>
        <trans-unit id="f3508d6b0f8d38b0a073fe61a77c17290460cd9c" translate="yes" xml:space="preserve">
          <source>As a string.</source>
          <target state="translated">文字列として。</target>
        </trans-unit>
        <trans-unit id="02c0e99193c309cd55617591b9c9cc47876658f4" translate="yes" xml:space="preserve">
          <source>As a third example, the line:</source>
          <target state="translated">3つ目の例として、セリフ。</target>
        </trans-unit>
        <trans-unit id="f3cd84df848618f3e33e617ab7faae9f566cbead" translate="yes" xml:space="preserve">
          <source>As all events are delivered on the event dispatching thread, care must be taken in event processing. In particular, a long running task, such as network io or computational intensive processing, executed on the event dispatching thread blocks the event dispatching thread from dispatching any other events. While the event dispatching thread is blocked the application is completely unresponsive to user input. Refer to &lt;a href=&quot;swingworker&quot;&gt;&lt;code&gt;SwingWorker&lt;/code&gt;&lt;/a&gt; for the preferred way to do such processing when working with Swing.</source>
          <target state="translated">すべてのイベントはイベントディスパッチスレッドで配信されるため、イベント処理には注意が必要です。特に、ネットワークioや計算集約型処理など、イベントディスパッチスレッドで実行される長時間実行タスクは、イベントディスパッチスレッドが他のイベントをディスパッチするのをブロックします。イベントディスパッチスレッドがブロックされている間、アプリケーションはユーザー入力に完全に応答しません。Swingを使用するときにこのような処理を行うための好ましい方法については、&lt;a href=&quot;swingworker&quot;&gt; &lt;code&gt;SwingWorker&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="5a2d3b42ea5a2a4845e3f6b24418f4af05907a8c" translate="yes" xml:space="preserve">
          <source>As already mentioned this supports CSS. We don't support the full CSS spec. Refer to the javadoc of the CSS class to see what properties we support. The two major CSS parsing related concepts we do not currently support are pseudo selectors, such as &lt;code&gt;A:link { color: red }&lt;/code&gt;, and the &lt;code&gt;important&lt;/code&gt; modifier.</source>
          <target state="translated">すでに述べたように、これはCSSをサポートします。完全なCSS仕様はサポートしていません。サポートされているプロパティについては、CSSクラスのjavadocを参照してください。現在サポートされていない2つの主要なCSS解析関連の概念は、 &lt;code&gt;A:link { color: red }&lt;/code&gt; などの疑似セレクターと &lt;code&gt;important&lt;/code&gt; 修飾子です。</target>
        </trans-unit>
        <trans-unit id="fcf3b06fd523e2b92dcafbaa3dc3070a140b52b4" translate="yes" xml:space="preserve">
          <source>As always, GSS-API implementations must impose a local access-control policy on callers to prevent unauthorized callers from acquiring credentials to which they are not entitled. Non-default values for initLifetime and acceptLifetime cannot always be honored by the underlying mechanisms, thus callers should be prepared to call &lt;a href=&quot;#getRemainingInitLifetime(org.ietf.jgss.Oid)&quot;&gt;&lt;code&gt;getRemainingInitLifetime&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#getRemainingAcceptLifetime(org.ietf.jgss.Oid)&quot;&gt;&lt;code&gt;getRemainingAcceptLifetime&lt;/code&gt;&lt;/a&gt; on the credential.</source>
          <target state="translated">いつものように、GSS-API実装は、許可されていない発信者が資格のない資格情報を取得するのを防ぐために、発信者にローカルアクセス制御ポリシーを課す必要があります。initLifetimeとacceptLifetimeのデフォルト以外の値は、基盤となるメカニズムによって常に尊重されるとは限らないため、呼び出し&lt;a href=&quot;#getRemainingAcceptLifetime(org.ietf.jgss.Oid)&quot;&gt; &lt;code&gt;getRemainingAcceptLifetime&lt;/code&gt; &lt;/a&gt;は、資格情報で&lt;a href=&quot;#getRemainingInitLifetime(org.ietf.jgss.Oid)&quot;&gt; &lt;code&gt;getRemainingInitLifetime&lt;/code&gt; &lt;/a&gt;とgetRemainingAcceptLifetimeを呼び出す準備をする必要があります。</target>
        </trans-unit>
        <trans-unit id="d20a6ada10d0115ed4b136d5f68578e23b849406" translate="yes" xml:space="preserve">
          <source>As an aid to agents that deploy supporting classes on the search path of the bootstrap class loader, or the search path of the class loader that loads the main agent class, the Java virtual machine arranges for the module of transformed classes to read the unnamed module of both class loaders.</source>
          <target state="translated">ブートストラップ・クラス・ローダの検索パス、またはメイン・エージェント・クラスをロードするクラス・ローダの検索パスにサポート・クラスをデプロイするエージェントへの補助として、Java 仮想マシンは、変換されたクラスのモジュールが両方のクラス・ローダの名前のないモジュールを読むように手配します。</target>
        </trans-unit>
        <trans-unit id="2c8eb36876577789fcdb3c4850fa5c24c780ff9a" translate="yes" xml:space="preserve">
          <source>As an alternative to the generated addresses just described, the &lt;code&gt;serviceURL&lt;/code&gt; address supplied when creating a connector server can specify a &lt;em&gt;directory address&lt;/em&gt; in which to store the provided or generated &lt;code&gt;RMIServer&lt;/code&gt; stub. This directory address is then used by both client and server.</source>
          <target state="translated">生成されたアドレスの代わりに、コネクタサーバーの作成時に指定された &lt;code&gt;serviceURL&lt;/code&gt; アドレスは、提供または生成された &lt;code&gt;RMIServer&lt;/code&gt; スタブを格納する&lt;em&gt;ディレクトリアドレス&lt;/em&gt;を指定できます。このディレクトリアドレスは、クライアントとサーバーの両方で使用されます。</target>
        </trans-unit>
        <trans-unit id="d264f31c9b2c8f4622e4e0337771b3dbb526bb93" translate="yes" xml:space="preserve">
          <source>As an alternative, the application can request the value or type of specific attributes:</source>
          <target state="translated">代替として、アプリケーションは特定の属性の値またはタイプを要求することができます。</target>
        </trans-unit>
        <trans-unit id="c1f18943e71618cbbb7bdca802691957dfdda635" translate="yes" xml:space="preserve">
          <source>As an example consider a method in a class that spins in a loop until some flag is set outside of that method. A call to the &lt;code&gt;onSpinWait&lt;/code&gt; method should be placed inside the spin loop.</source>
          <target state="translated">例として、そのメソッドの外部にフラグが設定されるまでループでスピンするクラスのメソッドについて考えてみます。 &lt;code&gt;onSpinWait&lt;/code&gt; メソッドの呼び出しは、スピンループ内に配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="ce78af05eb9f6f37051b98f08c5f9b210775e147" translate="yes" xml:space="preserve">
          <source>As an example consider an Exif image. The &lt;code&gt;TIFFDirectory&lt;/code&gt; instance corresponding to the Exif IFD in the Exif stream would have parent tag &lt;a href=&quot;exifparenttifftagset#TAG_EXIF_IFD_POINTER&quot;&gt;&lt;code&gt;TAG_EXIF_IFD_POINTER&lt;/code&gt;&lt;/a&gt; and would include &lt;a href=&quot;exiftifftagset&quot;&gt;&lt;code&gt;ExifTIFFTagSet&lt;/code&gt;&lt;/a&gt; in its group of known tag sets. The &lt;code&gt;TIFFDirectory&lt;/code&gt; corresponding to this Exif IFD will be contained in the data field of a &lt;code&gt;TIFFField&lt;/code&gt; which will in turn be contained in the &lt;code&gt;TIFFDirectory&lt;/code&gt; corresponding to the primary IFD of the Exif image which will itself have a &lt;code&gt;null&lt;/code&gt;-valued parent tag.</source>
          <target state="translated">例として、Exif画像を考えてみましょう。Exifストリームの &lt;code&gt;TIFFDirectory&lt;/code&gt; 対応するTIFFDirectoryインスタンスには、親タグ&lt;a href=&quot;exifparenttifftagset#TAG_EXIF_IFD_POINTER&quot;&gt; &lt;code&gt;TAG_EXIF_IFD_POINTER&lt;/code&gt; が&lt;/a&gt;あり、既知のタグセットのグループに&lt;a href=&quot;exiftifftagset&quot;&gt; &lt;code&gt;ExifTIFFTagSet&lt;/code&gt; &lt;/a&gt;が含まれます。この &lt;code&gt;TIFFDirectory&lt;/code&gt; 対応するTIFFDirectoryは、 &lt;code&gt;TIFFField&lt;/code&gt; のデータフィールドに含まれます &lt;code&gt;TIFFDirectory&lt;/code&gt; は、ExifイメージのプライマリIFDに対応するTIFFDirectoryに含まれ、それ自体が &lt;code&gt;null&lt;/code&gt; 値の親タグを持ちます。</target>
        </trans-unit>
        <trans-unit id="519670b8abe414575f9887bc856f1caca855376c" translate="yes" xml:space="preserve">
          <source>As an example how a parallel computation framework, such as the &lt;code&gt;java.util.stream&lt;/code&gt; package, would use Spliterator in a parallel computation, here is one way to implement an associated parallel forEach, that illustrates the primary usage idiom of splitting off subtasks until the estimated amount of work is small enough to perform sequentially. Here we assume that the order of processing across subtasks doesn't matter; different (forked) tasks may further split and process elements concurrently in undetermined order. This example uses a &lt;a href=&quot;concurrent/countedcompleter&quot;&gt;&lt;code&gt;CountedCompleter&lt;/code&gt;&lt;/a&gt;; similar usages apply to other parallel task constructions.</source>
          <target state="translated">&lt;code&gt;java.util.stream&lt;/code&gt; パッケージなどの並列計算フレームワークが並列計算でSpliteratorを使用する方法の例として、関連する並列forEachを実装する1つの方法を次に示します。これは、サブタスクを分割する主な使用法を示しています。見積もられた作業量は、順次実行するのに十分な量です。ここでは、サブタスク間での処理の順序は重要ではないと想定しています。異なる（フォークされた）タスクは、要素をさらに分割して、未決定の順序で同時に処理する場合があります。この例では&lt;a href=&quot;concurrent/countedcompleter&quot;&gt; &lt;code&gt;CountedCompleter&lt;/code&gt; を&lt;/a&gt;使用しています。同様の使用法が他の並列タスク構築にも適用されます。</target>
        </trans-unit>
        <trans-unit id="8d0ae0a0b146fb1c4a7ccc7080745fe849c0f316" translate="yes" xml:space="preserve">
          <source>As an example of how to transform a stream pipeline that inappropriately uses side-effects to one that does not, the following code searches a stream of strings for those matching a given regular expression, and puts the matches in a list.</source>
          <target state="translated">副作用を不適切に使用しているストリームパイプラインをそうでないものに変換する方法の例として、次のコードは、文字列のストリームから与えられた正規表現にマッチするものを検索し、マッチしたものをリストに入れます。</target>
        </trans-unit>
        <trans-unit id="be0b4cb6953281dedf890ce02d6399e01e8e281d" translate="yes" xml:space="preserve">
          <source>As an example of the creation and meaning of SocketPermissions, note that if the following permission:</source>
          <target state="translated">SocketPermissionsの作成と意味の例として、以下のようなパーミッションがある場合に注意してください。</target>
        </trans-unit>
        <trans-unit id="af9f7dce64decac25923a7b89727f0ff8e9ce855" translate="yes" xml:space="preserve">
          <source>As an example, a JAR file named &quot;&lt;code&gt;foo-bar.jar&lt;/code&gt;&quot; will derive a module name &quot;&lt;code&gt;foo.bar&lt;/code&gt;&quot; and no version. A JAR file named &quot;&lt;code&gt;foo-bar-1.2.3-SNAPSHOT.jar&lt;/code&gt;&quot; will derive a module name &quot;&lt;code&gt;foo.bar&lt;/code&gt;&quot; and &quot;&lt;code&gt;1.2.3-SNAPSHOT&lt;/code&gt;&quot; as the version.</source>
          <target state="translated">例として、「 &lt;code&gt;foo-bar.jar&lt;/code&gt; 」という名前のJARファイルは、モジュール名「 &lt;code&gt;foo.bar&lt;/code&gt; 」を派生させ、バージョンは派生しません。「 &lt;code&gt;foo-bar-1.2.3-SNAPSHOT.jar&lt;/code&gt; 」という名前のJARファイルは、バージョンとして「 &lt;code&gt;foo.bar&lt;/code&gt; 」および「 &lt;code&gt;1.2.3-SNAPSHOT&lt;/code&gt; 」というモジュール名を取得します。</target>
        </trans-unit>
        <trans-unit id="97b387abc8b857d9304279d1b14c91f4f3312903" translate="yes" xml:space="preserve">
          <source>As an example, a connection ID can look something like this:</source>
          <target state="translated">例として、接続IDは次のようになります。</target>
        </trans-unit>
        <trans-unit id="fff2ace97e2977937ba5240c246934c0d575e39c" translate="yes" xml:space="preserve">
          <source>As an example, consider the memory layout expressed by a &lt;a href=&quot;sequencelayout&quot;&gt;&lt;code&gt;SequenceLayout&lt;/code&gt;&lt;/a&gt; instance constructed as follows:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3f24b1ec4f0deb26b67d4a967e2d2944546f1544" translate="yes" xml:space="preserve">
          <source>As an example, each of the following three lines specifies the key &lt;code&gt;&quot;Truth&quot;&lt;/code&gt; and the associated element value &lt;code&gt;&quot;Beauty&quot;&lt;/code&gt;:</source>
          <target state="translated">例として、次の3行はそれぞれ、キー &lt;code&gt;&quot;Truth&quot;&lt;/code&gt; および関連する要素値 &lt;code&gt;&quot;Beauty&quot;&lt;/code&gt; を指定しています。</target>
        </trans-unit>
        <trans-unit id="94dcbeee3c11515162585b2f17366749bf1bb66b" translate="yes" xml:space="preserve">
          <source>As an example, let's say you wanted to change the attributes of the first three characters in &lt;u&gt;Figure 9&lt;/u&gt;, shown previously. The first two arguments passed to &lt;code&gt;setCharacterAttributes()&lt;/code&gt; would be 0 and 3. The third argument would be the AttributeSet containing the new attributes. In the example we are considering, it doesn't matter what the fourth argument is.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="cb323e62cc666c2cfc67d18c162e62100b1485d7" translate="yes" xml:space="preserve">
          <source>As an example, suppose a module specifies the following directive:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f3eb8046c9fa22260a1f4ffbf4ea69bccaf666b0" translate="yes" xml:space="preserve">
          <source>As an example, suppose a module specifies the following directives:</source>
          <target state="translated">例として、あるモジュールが以下のディレクティブを指定しているとします。</target>
        </trans-unit>
        <trans-unit id="a9d7c71d033ba15d3b2c3f4170e79efd63f690d4" translate="yes" xml:space="preserve">
          <source>As an example, suppose the service is &lt;code&gt;com.example.CodecFactory&lt;/code&gt;, an interface that defines methods for producing encoders and decoders:</source>
          <target state="translated">例として、サービスが &lt;code&gt;com.example.CodecFactory&lt;/code&gt; であると仮定します。これは、エンコーダーとデコーダーを生成するためのメソッドを定義するインターフェースです。</target>
        </trans-unit>
        <trans-unit id="5287559ce076aa6993abddd37b36a81602b2644f" translate="yes" xml:space="preserve">
          <source>As an example, suppose we have a bounded buffer which supports &lt;code&gt;put&lt;/code&gt; and &lt;code&gt;take&lt;/code&gt; methods. If a &lt;code&gt;take&lt;/code&gt; is attempted on an empty buffer, then the thread will block until an item becomes available; if a &lt;code&gt;put&lt;/code&gt; is attempted on a full buffer, then the thread will block until a space becomes available. We would like to keep waiting &lt;code&gt;put&lt;/code&gt; threads and &lt;code&gt;take&lt;/code&gt; threads in separate wait-sets so that we can use the optimization of only notifying a single thread at a time when items or spaces become available in the buffer. This can be achieved using two &lt;a href=&quot;condition&quot;&gt;&lt;code&gt;Condition&lt;/code&gt;&lt;/a&gt; instances.</source>
          <target state="translated">例として、 &lt;code&gt;put&lt;/code&gt; メソッドと &lt;code&gt;take&lt;/code&gt; メソッドをサポートする境界付きバッファがあるとします。場合 &lt;code&gt;take&lt;/code&gt; 空のバッファで試行されている項目が利用可能になるまで、スレッドがブロックされます。場合 &lt;code&gt;put&lt;/code&gt; バッファフルで試行された空間が利用可能になるまで、そのスレッドはブロックされます。私たちは待たせしたい &lt;code&gt;put&lt;/code&gt; スレッドをと &lt;code&gt;take&lt;/code&gt; 、我々は唯一のアイテムやスペースがバッファに利用可能になった時点で、単一のスレッドに通知する最適化を使用できるように、別の待機セットにスレッドを。これは、2つの&lt;a href=&quot;condition&quot;&gt; &lt;code&gt;Condition&lt;/code&gt; &lt;/a&gt;インスタンスを使用して実現できます。</target>
        </trans-unit>
        <trans-unit id="25026a033fa89a756fd3fbc1cc4ef7249b229f4d" translate="yes" xml:space="preserve">
          <source>As an example, suppose you wanted to find all MBeans where the &lt;code&gt;
 Enabled&lt;/code&gt; attribute is &lt;code&gt;true&lt;/code&gt; and the &lt;code&gt;Owner&lt;/code&gt; attribute is &lt;code&gt;
 &quot;Duke&quot;&lt;/code&gt;. Here is how you could construct the appropriate &lt;code&gt;QueryExp&lt;/code&gt; by chaining together method calls:</source>
          <target state="translated">例として、 &lt;code&gt; Enabled&lt;/code&gt; 属性が &lt;code&gt;true&lt;/code&gt; で、 &lt;code&gt;Owner&lt;/code&gt; 属性が &lt;code&gt; &quot;Duke&quot;&lt;/code&gt; であるすべてのMBeanを検索するとします。メソッド呼び出しをチェーン化することにより、適切な &lt;code&gt;QueryExp&lt;/code&gt; を構築する方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="fe3bc312e29b02ca913f13cc16a375dece93eb7a" translate="yes" xml:space="preserve">
          <source>As an example, suppose you wanted to find all MBeans where the &lt;code&gt;Enabled&lt;/code&gt; attribute is &lt;code&gt;true&lt;/code&gt; and the &lt;code&gt;Owner&lt;/code&gt; attribute is &lt;code&gt;&quot;Duke&quot;&lt;/code&gt;. Here is how you could construct the appropriate &lt;code&gt;QueryExp&lt;/code&gt; by chaining together method calls:</source>
          <target state="translated">例として、 &lt;code&gt;Enabled&lt;/code&gt; 属性が &lt;code&gt;true&lt;/code&gt; で、 &lt;code&gt;Owner&lt;/code&gt; 属性が &lt;code&gt;&quot;Duke&quot;&lt;/code&gt; であるすべてのMBeanを検索するとします。メソッドの呼び出しを &lt;code&gt;QueryExp&lt;/code&gt; て適切なQueryExpを作成する方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="20743818463fcdeb7f18917626acb2165d277608" translate="yes" xml:space="preserve">
          <source>As an example, the following piece of code:</source>
          <target state="translated">例として、次のようなコードがあります。</target>
        </trans-unit>
        <trans-unit id="98bfa17581a2aa8712de27e7e305b34e05a857cb" translate="yes" xml:space="preserve">
          <source>As an example, the strings &quot;Good&quot;, &quot;Better&quot;, and &quot;Best&quot; could be associated with the ranges &lt;code&gt;[0, .33)&lt;/code&gt;, &lt;code&gt;[.33, .66)&lt;/code&gt;, and &lt;code&gt;[.66, 1.0]&lt;/code&gt;. In this case, &lt;code&gt;getCompressionQualityDescriptions&lt;/code&gt; would return &lt;code&gt;{ &quot;Good&quot;, &quot;Better&quot;, &quot;Best&quot; }&lt;/code&gt; and &lt;code&gt;getCompressionQualityValues&lt;/code&gt; would return &lt;code&gt;{ 0.0F, .33F, .66F, 1.0F }&lt;/code&gt;.</source>
          <target state="translated">たとえば、文字列 &quot;Good&quot;、 &quot;Better&quot;、および &quot;Best&quot;は、範囲 &lt;code&gt;[0, .33)&lt;/code&gt; 、 &lt;code&gt;[.33, .66)&lt;/code&gt; 、および &lt;code&gt;[.66, 1.0]&lt;/code&gt; 関連付けることができます。この場合、 &lt;code&gt;getCompressionQualityDescriptions&lt;/code&gt; は &lt;code&gt;{ &quot;Good&quot;, &quot;Better&quot;, &quot;Best&quot; }&lt;/code&gt; を返し、 &lt;code&gt;getCompressionQualityValues&lt;/code&gt; は &lt;code&gt;{ 0.0F, .33F, .66F, 1.0F }&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7c84b909cb394014f6e9e28fcceef3cdf0b27e39" translate="yes" xml:space="preserve">
          <source>As an example, think of two Language Priority Lists each of which includes only one language range and a set of following language tags:</source>
          <target state="translated">例として、2つの言語優先順位リストを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="b74235f16bc65bf0ded8643900f93d34fe2af4db" translate="yes" xml:space="preserve">
          <source>As another example, if the &lt;code&gt;JMXServiceURL&lt;/code&gt; is:</source>
          <target state="translated">別の例として、 &lt;code&gt;JMXServiceURL&lt;/code&gt; が次の場合：</target>
        </trans-unit>
        <trans-unit id="5d0ec54f9ead5c0da0a715695859c6a3e3eb8423" translate="yes" xml:space="preserve">
          <source>As another example, let's say you wanted to insert the pattern &quot;new\ntext\n&quot; at offset 2 as shown previously in &lt;u&gt;Figure 2&lt;/u&gt;. This operation would have the result shown in &lt;u&gt;Figure 4&lt;/u&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3aa2758b9604888fefa6adbf8630b3457e22630" translate="yes" xml:space="preserve">
          <source>As another example, the following three lines specify a single property:</source>
          <target state="translated">別の例として、以下の3行で1つのプロパティを指定しています。</target>
        </trans-unit>
        <trans-unit id="cf8bb67abb028308da14d13bd3f1168caca43131" translate="yes" xml:space="preserve">
          <source>As another example, this code allows &lt;code&gt;long&lt;/code&gt; types to be assigned from entries in a file &lt;code&gt;myNumbers&lt;/code&gt;:</source>
          <target state="translated">別の例として、このコードでは、ファイル &lt;code&gt;myNumbers&lt;/code&gt; のエントリから &lt;code&gt;long&lt;/code&gt; 型を割り当てることができます。</target>
        </trans-unit>
        <trans-unit id="890be3293dd6c9aa5007d8e0c51531fac9b53c8a" translate="yes" xml:space="preserve">
          <source>As appropriate, the doclet calls the &lt;a href=&quot;#toString(java.util.List,javax.lang.model.element.Element)&quot;&gt;&lt;code&gt;toString&lt;/code&gt;&lt;/a&gt; method on the taglet object, giving it a list of tags and the element for which the tags are part of the element's documentation comment, from which the taglet can determine the string to be included in the documentation. The doclet will typically specify any requirements on the contents of the string that is returned.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="aa967af9ff93d303ea894c49b3d794790a1fff12" translate="yes" xml:space="preserve">
          <source>As appropriate, the tool calls the &lt;a href=&quot;#process(java.util.Set,javax.annotation.processing.RoundEnvironment)&quot;&gt;&lt;code&gt;process&lt;/code&gt;&lt;/a&gt; method on the &lt;code&gt;Processor&lt;/code&gt; object; a new &lt;code&gt;Processor&lt;/code&gt; object is &lt;em&gt;not&lt;/em&gt; created for each round.</source>
          <target state="translated">必要に応じて、ツールは &lt;code&gt;Processor&lt;/code&gt; オブジェクトの&lt;a href=&quot;#process(java.util.Set,javax.annotation.processing.RoundEnvironment)&quot;&gt; &lt;code&gt;process&lt;/code&gt; &lt;/a&gt;メソッドを呼び出します。ラウンドごとに新しい &lt;code&gt;Processor&lt;/code&gt; オブジェクトは作成され&lt;em&gt;ません&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="6018ced76c00230539b215f3d88e0df0f812f353" translate="yes" xml:space="preserve">
          <source>As appropriate, the tool calls the &lt;a href=&quot;#run(jdk.javadoc.doclet.DocletEnvironment)&quot;&gt;&lt;code&gt;run&lt;/code&gt;&lt;/a&gt; method on the doclet object, giving it a DocletEnvironment object, from which the doclet can determine the elements to be included in the documentation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="5298b9629494ed8424507f9377213cba4fd0e6bf" translate="yes" xml:space="preserve">
          <source>As appropriate, the tool calls the &lt;a href=&quot;processor#process-java.util.Set-javax.annotation.processing.RoundEnvironment-&quot;&gt;&lt;code&gt;process&lt;/code&gt;&lt;/a&gt; method on the &lt;code&gt;Processor&lt;/code&gt; object; a new &lt;code&gt;Processor&lt;/code&gt; object is &lt;em&gt;not&lt;/em&gt; created for each round.</source>
          <target state="translated">必要に応じて、ツールは &lt;code&gt;Processor&lt;/code&gt; オブジェクトの&lt;a href=&quot;processor#process-java.util.Set-javax.annotation.processing.RoundEnvironment-&quot;&gt; &lt;code&gt;process&lt;/code&gt; &lt;/a&gt;メソッドを呼び出します。新しい &lt;code&gt;Processor&lt;/code&gt; オブジェクトはラウンドごとに作成され&lt;em&gt;ません&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="8ca21abb6a8a33a2129f38bbd3cb676d86062b00" translate="yes" xml:space="preserve">
          <source>As defined in section 1.2 of the W3C XML 1.0 Recommendation, fatal errors are those that would make it impossible for a parser to continue normal processing. These include violation of a well-formedness constraint, invalid encoding, and forbidden structural errors as described in the W3C XML 1.0 Recommendation.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0b6301b17b79ed3b3340c90417e936d981fab12b" translate="yes" xml:space="preserve">
          <source>As described in section 3, &quot;Server Name Indication&quot;, of &lt;a href=&quot;http://www.ietf.org/rfc/rfc6066.txt&quot;&gt;TLS Extensions (RFC 6066)&lt;/a&gt;, &quot;HostName&quot; contains the fully qualified DNS hostname of the server, as understood by the client. The encoded server name value of a hostname is represented as a byte string using ASCII encoding without a trailing dot. This allows the support of Internationalized Domain Names (IDN) through the use of A-labels (the ASCII-Compatible Encoding (ACE) form of a valid string of Internationalized Domain Names for Applications (IDNA)) defined in &lt;a href=&quot;http://www.ietf.org/rfc/rfc5890.txt&quot;&gt;RFC 5890&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://www.ietf.org/rfc/rfc6066.txt&quot;&gt;TLS拡張（RFC 6066）の&lt;/a&gt;セクション3「サーバー名の表示」で説明されているように、「HostName」には、クライアントが理解するサーバーの完全修飾DNSホスト名が含まれています。ホスト名のエンコードされたサーバー名の値は、ASCIIエンコードを使用して、末尾にドットのないバイト文字列として表されます。これにより、&lt;a href=&quot;http://www.ietf.org/rfc/rfc5890.txt&quot;&gt;RFC 5890で&lt;/a&gt;定義されている Aラベル（アプリケーション用の国際化ドメイン名（IDNA）の有効な文字列のASCII互換エンコーディング（ACE）形式）を使用して、国際化ドメイン名（IDN）をサポートできます。</target>
        </trans-unit>
        <trans-unit id="dc71b8e5666a98322b4472e7b461bc07c2a58ca5" translate="yes" xml:space="preserve">
          <source>As described in section 3, &quot;Server Name Indication&quot;, of &lt;a href=&quot;https://www.ietf.org/rfc/rfc6066.txt&quot;&gt;TLS Extensions (RFC 6066)&lt;/a&gt;, &quot;HostName&quot; contains the fully qualified DNS hostname of the server, as understood by the client. The encoded server name value of a hostname is represented as a byte string using ASCII encoding without a trailing dot. This allows the support of Internationalized Domain Names (IDN) through the use of A-labels (the ASCII-Compatible Encoding (ACE) form of a valid string of Internationalized Domain Names for Applications (IDNA)) defined in &lt;a href=&quot;https://www.ietf.org/rfc/rfc5890.txt&quot;&gt;RFC 5890&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d3bce682edc8c24d9e7ae232cf93cc47f151c707" translate="yes" xml:space="preserve">
          <source>As described in the Java Virtual Machine Specification, certain types in this package are given special treatment by the virtual machine:</source>
          <target state="translated">Java仮想マシン仕様書に記載されているように、本パッケージの特定の型は仮想マシンによって特別な扱いを受けます。</target>
        </trans-unit>
        <trans-unit id="6b4f306157d9d4daaf890904a7cf403b8f976740" translate="yes" xml:space="preserve">
          <source>As described in the Java Virtual Machine Specification, certain types in this package have special relations to dynamic language support in the virtual machine:</source>
          <target state="translated">Java 仮想マシン仕様書で説明されているように、本パッケージの特定の型は、仮想マシンの動的言語サポートと特別な関係を持っています。</target>
        </trans-unit>
        <trans-unit id="72e701ee63c9d6aac4889cb8fb04b11a80bd1ad2" translate="yes" xml:space="preserve">
          <source>As dictated by the Standard MIDI Files specification, two status byte values are legal for a &lt;code&gt;SysexMessage&lt;/code&gt; read from a MIDI file:</source>
          <target state="translated">標準MIDIファイル仕様で規定されているように、2つのステータスバイト値は、MIDIファイルから読み取られた &lt;code&gt;SysexMessage&lt;/code&gt; に対して有効です。</target>
        </trans-unit>
        <trans-unit id="823211c0e6e5c6f3a690856e6dbbe71cc75eed60" translate="yes" xml:space="preserve">
          <source>As discussed above, performing calculations on a date where the rules of the calendar system are pluggable requires skill and is not recommended. Fortunately, the need to perform calculations on a date in an arbitrary calendar system is extremely rare. For example, it is highly unlikely that the business rules of a library book rental scheme will allow rentals to be for one month, where meaning of the month is dependent on the user's preferred calendar system.</source>
          <target state="translated">上述したように、カレンダーシステムのルールがプラグイン可能な日付で計算を実行するにはスキルが必要であり、お勧めできません。幸いなことに、任意のカレンダーシステムの日付で計算を実行する必要性は極めて稀です。例えば、図書館の本のレンタルスキームのビジネスルールでは、レンタルは1ヶ月間であることが認められていますが、その月の意味はユーザーの好みのカレンダーシステムに依存しています。</target>
        </trans-unit>
        <trans-unit id="36314eb89ebb3a2d4ef9809875cad02204176e33" translate="yes" xml:space="preserve">
          <source>As documented in the JVM specification, all failures arising from the linkage of a dynamic call site are reported by a &lt;a href=&quot;../bootstrapmethoderror&quot;&gt;&lt;code&gt;BootstrapMethodError&lt;/code&gt;&lt;/a&gt;, which is thrown as the abnormal termination of the dynamic call site execution. If this happens, the same error will the thrown for all subsequent attempts to execute the dynamic call site.</source>
          <target state="translated">JVM仕様に記載されているように、動的呼び出しサイトのリンクから発生するすべての障害は、動的呼び出しサイト実行の異常終了としてスローされる&lt;a href=&quot;../bootstrapmethoderror&quot;&gt; &lt;code&gt;BootstrapMethodError&lt;/code&gt; &lt;/a&gt;によって報告されます。これが発生した場合、動的呼び出しサイトを実行する後続のすべての試行で同じエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="bf9e2b2d25d40b2e40f4396be9bb0dd7402e5fb1" translate="yes" xml:space="preserve">
          <source>As empty branch elements are not allowed in the document, if the element is the sole child, its parent element is removed as well, recursively. This means that when replacing all the children of a particular element, new children should be added &lt;em&gt;before&lt;/em&gt; removing old children.</source>
          <target state="translated">ドキュメントでは空のブランチ要素は許可されていないため、要素が唯一の子である場合、その親要素も再帰的に削除されます。つまり、特定の要素のすべての子を置き換える場合は、古い子を削除する&lt;em&gt;前に&lt;/em&gt;新しい子を追加&lt;em&gt;する&lt;/em&gt;必要があります。</target>
        </trans-unit>
        <trans-unit id="a10251bdf20853933c47ec19a245569632c05790" translate="yes" xml:space="preserve">
          <source>As explained in the &lt;code&gt;DOMString&lt;/code&gt; interface, text strings in the DOM are represented in UTF-16, i.e. as a sequence of 16-bit units. In the following, the term 16-bit units is used whenever necessary to indicate that indexing on CharacterData is done in 16-bit units.</source>
          <target state="translated">&lt;code&gt;DOMString&lt;/code&gt; インターフェイスで説明されているように、DOM内のテキスト文字列はUTF-16で、つまり16ビット単位のシーケンスとして表されます。以下では、16ビットユニットという用語は、CharacterDataのインデックス作成が16ビットユニットで行われることを示すために必要な場合は常に使用されます。</target>
        </trans-unit>
        <trans-unit id="1c5f4783a2e6c5d9961ec49ed626628e6b18d177" translate="yes" xml:space="preserve">
          <source>As far as customizing how the table looks in the printed result, &lt;code&gt;JTable&lt;/code&gt; itself will take care of hiding the selection and focus during printing. For additional customizations, your renderers or painting code can customize the look based on the value of &lt;a href=&quot;jcomponent#isPaintingForPrint()&quot;&gt;&lt;code&gt;JComponent.isPaintingForPrint()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">印刷結果でのテーブルの外観をカスタマイズする限り、 &lt;code&gt;JTable&lt;/code&gt; 自体が、印刷中に選択範囲とフォーカスを非表示にします。追加のカスタマイズについては、レンダラーまたはペイントコードで、&lt;a href=&quot;jcomponent#isPaintingForPrint()&quot;&gt; &lt;code&gt;JComponent.isPaintingForPrint()&lt;/code&gt; の&lt;/a&gt;値に基づいて外観をカスタマイズできます。</target>
        </trans-unit>
        <trans-unit id="a7ad0c960b5bd3230a5f549e534d4486f10cd73a" translate="yes" xml:space="preserve">
          <source>As far as is reasonably practical, the &lt;code&gt;hashCode&lt;/code&gt; method defined by class &lt;code&gt;Object&lt;/code&gt; returns distinct integers for distinct objects.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3bf1bd957df6b1e6645097076c35d04db35960a2" translate="yes" xml:space="preserve">
          <source>As for &lt;code&gt;Entity&lt;/code&gt; nodes, &lt;code&gt;EntityReference&lt;/code&gt; nodes and all their descendants are readonly.</source>
          <target state="translated">用として &lt;code&gt;Entity&lt;/code&gt; ノード、 &lt;code&gt;EntityReference&lt;/code&gt; ノードとそのすべての子孫読み取り専用です。</target>
        </trans-unit>
        <trans-unit id="4fd4c6616b03047a5039b07c21afb5e7a0ec9d44" translate="yes" xml:space="preserve">
          <source>As for all &lt;code&gt;JComponent&lt;/code&gt; classes, you can use &lt;a href=&quot;inputmap&quot;&gt;&lt;code&gt;InputMap&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;actionmap&quot;&gt;&lt;code&gt;ActionMap&lt;/code&gt;&lt;/a&gt; to associate an &lt;a href=&quot;action&quot;&gt;&lt;code&gt;Action&lt;/code&gt;&lt;/a&gt; object with a &lt;a href=&quot;keystroke&quot;&gt;&lt;code&gt;KeyStroke&lt;/code&gt;&lt;/a&gt; and execute the action under specified conditions.</source>
          <target state="translated">すべての &lt;code&gt;JComponent&lt;/code&gt; クラスについて、&lt;a href=&quot;inputmap&quot;&gt; &lt;code&gt;InputMap&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;actionmap&quot;&gt; &lt;code&gt;ActionMap&lt;/code&gt; &lt;/a&gt;を使用して、&lt;a href=&quot;action&quot;&gt; &lt;code&gt;Action&lt;/code&gt; &lt;/a&gt;オブジェクトを&lt;a href=&quot;keystroke&quot;&gt; &lt;code&gt;KeyStroke&lt;/code&gt; &lt;/a&gt;に関連付け、指定された条件下でアクションを実行できます。</target>
        </trans-unit>
        <trans-unit id="c236b5259ac7c472ff07c31799d3d5ff24f4fa7e" translate="yes" xml:space="preserve">
          <source>As for the rest, the returned kind will depend on the value (false or true accordingly) of &lt;code&gt;isInterface&lt;/code&gt;:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b894f63cb8c564155a5703563abd39ad622c4ab3" translate="yes" xml:space="preserve">
          <source>As guaranteed by the WebSocket Protocol, the message consists of not more than &lt;code&gt;125&lt;/code&gt; bytes. These bytes are located from the buffer's position to its limit.</source>
          <target state="translated">WebSocketプロトコルで保証されているように、メッセージは &lt;code&gt;125&lt;/code&gt; バイト以下で構成されます。これらのバイトは、バッファーの位置から限界まで配置されます。</target>
        </trans-unit>
        <trans-unit id="d08bfa569d3c6b52674c19efff0534f7b7a13392" translate="yes" xml:space="preserve">
          <source>As html skips whitespace the position for text will be the position of the first valid character, eg in the string '\n\n\nblah' the text 'blah' will have a position of 3, the newlines are skipped.</source>
          <target state="translated">htmlが空白をスキップするので、テキストの位置は最初の有効な文字の位置になります。</target>
        </trans-unit>
        <trans-unit id="c223f6bbf9967816d62342a4c9f6c1437115f662" translate="yes" xml:space="preserve">
          <source>As implied by the above, one valid implementation of this method is given by the expression below which computes a &lt;code&gt;double&lt;/code&gt; with the same exponent and significand as the argument but with a guaranteed zero sign bit indicating a positive value:</source>
          <target state="translated">上記で暗示されているように、このメソッドの1つの有効な実装は、引数と同じ指数と仮数を持ち、正の値を示す保証されたゼロ符号ビットを持つ &lt;code&gt;double&lt;/code&gt; を計算する次の式で与えられます。</target>
        </trans-unit>
        <trans-unit id="70ed0065184e03471d3e9ef112b8a79b054572ba" translate="yes" xml:space="preserve">
          <source>As implied by the above, one valid implementation of this method is given by the expression below which computes a &lt;code&gt;float&lt;/code&gt; with the same exponent and significand as the argument but with a guaranteed zero sign bit indicating a positive value:</source>
          <target state="translated">上記で暗示されているように、このメソッドの1つの有効な実装は、引数と同じ指数と仮数を持ち、正の値を示す保証されたゼロ符号ビットを持つ &lt;code&gt;float&lt;/code&gt; を計算する以下の式によって与えられます。</target>
        </trans-unit>
        <trans-unit id="7620dc9eaffdd8d3c92f18aa3797c61e64859c95" translate="yes" xml:space="preserve">
          <source>As in the one argument version, interrupts and spurious wakeups are possible, and this method should always be used in a loop:</source>
          <target state="translated">1引数バージョンと同様に、割り込みやスプリアスウェイクアップが可能であり、このメソッドは常にループ内で使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="b6a12f2a545ba53922d480b551f75008baa4d398" translate="yes" xml:space="preserve">
          <source>As inconsistent with &lt;code&gt;hashCode()&lt;/code&gt; contract, use &lt;a href=&quot;#isMimeTypeEqual(java.lang.String)&quot;&gt;&lt;code&gt;isMimeTypeEqual(String)&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">&lt;code&gt;hashCode()&lt;/code&gt; コントラクトと矛盾するため、代わりに&lt;a href=&quot;#isMimeTypeEqual(java.lang.String)&quot;&gt; &lt;code&gt;isMimeTypeEqual(String)&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="3de0ea91bebc6cff04f6c4a0b27942aa56579aef" translate="yes" xml:space="preserve">
          <source>As indicated above, there are many issues to consider when try to use and manipulate a date in an arbitrary calendar system. These are some of the key issues.</source>
          <target state="translated">上記のように、任意のカレンダーシステムで日付を使用して操作しようとすると、考慮すべき多くの問題があります。これらは重要な問題のいくつかです。</target>
        </trans-unit>
        <trans-unit id="5642f21bd06f9e0469d94ef1ca5f2237ede6c426" translate="yes" xml:space="preserve">
          <source>As interruption generally implies cancellation, and checks for interruption are often infrequent, an implementation can favor responding to an interrupt over normal method return. This is true even if it can be shown that the interrupt occurred after another action may have unblocked the thread. An implementation should document this behavior.</source>
          <target state="translated">割り込みは一般的にキャンセルを意味し、割り込みのチェックは頻繁には行われないため、実装では通常のメソッドの戻り値よりも割り込みへの応答を優先することができます。これは、別のアクションがスレッドのブロックを解除した後に割込みが発生したことを示すことができた場合にも当てはまります。実装ではこの動作を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="682a7908747b239c3cd1be0e6e2d9d7739d4d462" translate="yes" xml:space="preserve">
          <source>As interruption generally implies cancellation, and checks for interruption are often infrequent, an implementation can favor responding to an interrupt over normal method return. This is true even if it can be shown that the interrupt occurred after another action that may have unblocked the thread. An implementation should document this behavior.</source>
          <target state="translated">割り込みは一般的にキャンセルを意味し、割り込みのチェックは頻繁には行われないため、実装では通常のメソッドの戻り値よりも割り込みへの応答を優先することができます。これは、スレッドのブロックが解除された可能性のある別のアクションの後に割込みが発生したことを示すことができた場合にも当てはまります。実装ではこの動作を文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="deca80918e6f723d8b3411fc4be463146d7fb9d5" translate="yes" xml:space="preserve">
          <source>As is normal with thread-local ordering of write events, every action already performed by the current thread is taken to happen before the volatile write to &lt;code&gt;V&lt;/code&gt;. (In some implementations, this means that the current thread performs a global release operation.)</source>
          <target state="translated">書き込みイベントのスレッドローカルな順序付けでは通常のことですが、現在のスレッドによってすでに実行されているすべてのアクションは、 &lt;code&gt;V&lt;/code&gt; への揮発性書き込みの前に発生します。（一部の実装では、これは現在のスレッドがグローバル解放操作を実行することを意味します。）</target>
        </trans-unit>
        <trans-unit id="280fd0ecc7b23215e80f5701196ff52f63873f1c" translate="yes" xml:space="preserve">
          <source>As is the case with other ExecutorServices, there are three main task execution methods summarized in the following table. These are designed to be used primarily by clients not already engaged in fork/join computations in the current pool. The main forms of these methods accept instances of &lt;code&gt;ForkJoinTask&lt;/code&gt;, but overloaded forms also allow mixed execution of plain &lt;code&gt;
 Runnable&lt;/code&gt;- or &lt;code&gt;Callable&lt;/code&gt;- based activities as well. However, tasks that are already executing in a pool should normally instead use the within-computation forms listed in the table unless using async event-style tasks that are not usually joined, in which case there is little difference among choice of methods.</source>
          <target state="translated">他のExecutorServicesの場合と同様に、次の表に要約されている3つの主要なタスク実行方法があります。これらは主に、現在のプールでフォーク/結合の計算にまだ関与していないクライアントによって使用されるように設計されています。これらのメソッドのメインフォームは &lt;code&gt;ForkJoinTask&lt;/code&gt; のインスタンスを受け入れますが、オーバーロードされたフォームでは、プレーンな &lt;code&gt; Runnable&lt;/code&gt; （または &lt;code&gt;Callable&lt;/code&gt; ）ベースのアクティビティを混合して実行することもできます。ただし、プールですでに実行されているタスクは、通常は結合されない非同期イベントスタイルのタスクを使用しない限り、通常は表にリストされている計算内フォームを使用する必要があります。この場合、メソッドの選択にほとんど違いはありません。</target>
        </trans-unit>
        <trans-unit id="c2b850de7e5f6fae367a3847e0ff710535eb37d2" translate="yes" xml:space="preserve">
          <source>As is the case with other ExecutorServices, there are three main task execution methods summarized in the following table. These are designed to be used primarily by clients not already engaged in fork/join computations in the current pool. The main forms of these methods accept instances of &lt;code&gt;ForkJoinTask&lt;/code&gt;, but overloaded forms also allow mixed execution of plain &lt;code&gt;Runnable&lt;/code&gt;- or &lt;code&gt;Callable&lt;/code&gt;- based activities as well. However, tasks that are already executing in a pool should normally instead use the within-computation forms listed in the table unless using async event-style tasks that are not usually joined, in which case there is little difference among choice of methods.</source>
          <target state="translated">他のExecutorServicesと同様に、次の表に要約されている3つの主要なタスク実行メソッドがあります。これらは主に、現在のプールでフォーク/ジョインの計算にまだ関与していないクライアントが使用するように設計されています。これらのメソッドのメインフォームは &lt;code&gt;ForkJoinTask&lt;/code&gt; のインスタンスを受け入れますが、オーバーロードされたフォームは、プレーンな &lt;code&gt;Runnable&lt;/code&gt; ベースまたは &lt;code&gt;Callable&lt;/code&gt; ベースのアクティビティの混合実行も可能にします。ただし、プールで既に実行されているタスクは通常、通常は結合されない非同期イベントスタイルのタスクを使用しない限り、代わりに表に記載されている計算内フォームを使用する必要があります。この場合、メソッドの選択にほとんど違いはありません。</target>
        </trans-unit>
        <trans-unit id="35255f3b8879a5b2a391888c7bcc4428c54ff06c" translate="yes" xml:space="preserve">
          <source>As is usual with virtual methods, source-level calls to &lt;code&gt;invokeExact&lt;/code&gt; and &lt;code&gt;invoke&lt;/code&gt; compile to an &lt;code&gt;invokevirtual&lt;/code&gt; instruction. More unusually, the compiler must record the actual argument types, and may not perform method invocation conversions on the arguments. Instead, it must generate instructions that push them on the stack according to their own unconverted types. The method handle object itself is pushed on the stack before the arguments. The compiler then generates an &lt;code&gt;invokevirtual&lt;/code&gt; instruction that invokes the method handle with a symbolic type descriptor which describes the argument and return types.</source>
          <target state="translated">仮想メソッドで通常行われているように、 &lt;code&gt;invokeExact&lt;/code&gt; および &lt;code&gt;invoke&lt;/code&gt; へのソースレベルの呼び出しは、 &lt;code&gt;invokevirtual&lt;/code&gt; 命令へのコンパイルを呼び出します。さらに珍しいことに、コンパイラは実際の引数タイプを記録する必要があり、引数に対してメソッド呼び出し変換を実行しない場合があります。代わりに、変換されていない独自の型に従ってスタックにプッシュする命令を生成する必要があります。メソッドハンドルオブジェクト自体は、引数の前にスタックにプッシュされます。次に、コンパイラは、引数と戻り値の型を記述するシンボリック型記述子を使用してメソッドハンドルを呼び出す &lt;code&gt;invokevirtual&lt;/code&gt; 命令を生成します。</target>
        </trans-unit>
        <trans-unit id="f4d082e3a7819c6c85102d27161b03668225f32f" translate="yes" xml:space="preserve">
          <source>As is usual with virtual methods, source-level calls to &lt;code&gt;invokeExact&lt;/code&gt; and &lt;code&gt;invoke&lt;/code&gt; compile to an &lt;code&gt;invokevirtual&lt;/code&gt; instruction. More unusually, the compiler must record the actual argument types, and may not perform method invocation conversions on the arguments. Instead, it must push them on the stack according to their own unconverted types. The method handle object itself is pushed on the stack before the arguments. The compiler then calls the method handle with a symbolic type descriptor which describes the argument and return types.</source>
          <target state="translated">仮想メソッドの場合と同様に、 &lt;code&gt;invokeExact&lt;/code&gt; および &lt;code&gt;invoke&lt;/code&gt; コンパイルのソースレベルの呼び出しは、 &lt;code&gt;invokevirtual&lt;/code&gt; 命令にコンパイルされます。さらに珍しいことに、コンパイラーは実際の引数タイプを記録する必要があり、引数に対してメソッド呼び出し変換を実行しない場合があります。代わりに、変換されていない独自の型に従って、それらをスタックにプッシュする必要があります。メソッドハンドルオブジェクト自体は、引数の前にスタックにプッシュされます。次に、コンパイラーは、引数と戻りの型を記述するシンボリック型記述子を使用してメソッドハンドルを呼び出します。</target>
        </trans-unit>
        <trans-unit id="103795efb378ee6530e68440f6b7990618ac2966" translate="yes" xml:space="preserve">
          <source>As is usual with virtual methods, source-level calls to access mode methods compile to an &lt;code&gt;invokevirtual&lt;/code&gt; instruction. More unusually, the compiler must record the actual argument types, and may not perform method invocation conversions on the arguments. Instead, it must generate instructions to push them on the stack according to their own unconverted types. The VarHandle object itself will be pushed on the stack before the arguments. The compiler then generates an &lt;code&gt;invokevirtual&lt;/code&gt; instruction that invokes the access mode method with a symbolic type descriptor which describes the argument and return types.</source>
          <target state="translated">仮想メソッドで通常行われているように、アクセスモードメソッドへのソースレベルの呼び出しは、 &lt;code&gt;invokevirtual&lt;/code&gt; 命令にコンパイルされます。さらに珍しいことに、コンパイラは実際の引数タイプを記録する必要があり、引数に対してメソッド呼び出し変換を実行しない場合があります。代わりに、変換されていない独自の型に従ってスタックにプッシュする命令を生成する必要があります。 VarHandleオブジェクト自体は、引数の前にスタックにプッシュされます。次に、コンパイラは、引数と戻り値の型を記述するシンボリック型記述子を使用してアクセスモードメソッドを呼び出す &lt;code&gt;invokevirtual&lt;/code&gt; 命令を生成します。</target>
        </trans-unit>
        <trans-unit id="74a104890384d5eb34e0f6435f39fc9894819a17" translate="yes" xml:space="preserve">
          <source>As it is typically impractical to obtain the &lt;code&gt;TreeUI&lt;/code&gt; from the &lt;code&gt;JTree&lt;/code&gt; and cast to an instance of &lt;code&gt;MetalTreeUI&lt;/code&gt; you enable this property via the client property &lt;code&gt;JTree.lineStyle&lt;/code&gt;. For example, to switch to &lt;code&gt;Horizontal&lt;/code&gt; style you would do: &lt;code&gt;tree.putClientProperty(&quot;JTree.lineStyle&quot;, &quot;Horizontal&quot;);&lt;/code&gt;</source>
          <target state="translated">それは得ることが一般的には非現実的であるとして &lt;code&gt;TreeUI&lt;/code&gt; をから &lt;code&gt;JTree&lt;/code&gt; のインスタンスにキャスト &lt;code&gt;MetalTreeUI&lt;/code&gt; あなたは、クライアントのプロパティを通じてこのプロパティを有効に &lt;code&gt;JTree.lineStyle&lt;/code&gt; 。たとえば、 &lt;code&gt;Horizontal&lt;/code&gt; スタイルに切り替えるには、次のようにします &lt;code&gt;tree.putClientProperty(&quot;JTree.lineStyle&quot;, &quot;Horizontal&quot;);&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3836cc61017cde6198ec4d05f53ecb34d804d8cb" translate="yes" xml:space="preserve">
          <source>As just mentioned, a PlainDocument contains a root Element, which in turn contains an Element for each line of text. When text is inserted into a PlainDocument, it creates the Elements that are needed for an Element to exist for each newline. To illustrate, let's say you wanted to insert a newline at offset 2 in &lt;u&gt;Figure 2&lt;/u&gt;, above. To accomplish this objective, you could use the Document method &lt;code&gt;insertString()&lt;/code&gt;, using this syntax:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="bd413f3a79e5b5d005a16c39828bd3b915ac3102" translate="yes" xml:space="preserve">
          <source>As long as each bootstrap method can be correctly invoked by &lt;code&gt;MethodHandle.invoke&lt;/code&gt;, its detailed type is arbitrary. For example, the first argument could be &lt;code&gt;Object&lt;/code&gt; instead of &lt;code&gt;MethodHandles.Lookup&lt;/code&gt;, and the return type could also be &lt;code&gt;Object&lt;/code&gt; instead of &lt;code&gt;CallSite&lt;/code&gt;. (Note that the types and number of the stacked arguments limit the legal kinds of bootstrap methods to appropriately typed static methods and constructors of &lt;code&gt;CallSite&lt;/code&gt; subclasses.)</source>
          <target state="translated">各ブートストラップメソッドが &lt;code&gt;MethodHandle.invoke&lt;/code&gt; によって正しく呼び出せる限り、その詳細な型は任意です。たとえば、最初の引数は &lt;code&gt;MethodHandles.Lookup&lt;/code&gt; ではなく &lt;code&gt;Object&lt;/code&gt; であり、戻り値の型は &lt;code&gt;CallSite&lt;/code&gt; ではなく &lt;code&gt;Object&lt;/code&gt; である可能性があります。 （スタックされた引数の型と数により、正当な種類のブートストラップメソッドが、適切に型指定された静的メソッドと &lt;code&gt;CallSite&lt;/code&gt; サブクラスのコンストラクターに制限されることに注意してください。）</target>
        </trans-unit>
        <trans-unit id="e0466654ef45ec448d8ee41f8acfd12ca31c99c4" translate="yes" xml:space="preserve">
          <source>As long as the constraints of the Java Memory Model are obeyed, implementations may delay the completion of a &lt;code&gt;syncAll&lt;/code&gt; operation while other threads (&lt;code&gt;T&lt;/code&gt; above) continue to use previous values of &lt;code&gt;S&lt;/code&gt;'s target. However, implementations are (as always) encouraged to avoid livelock, and to eventually require all threads to take account of the updated target.</source>
          <target state="translated">Javaメモリモデルの制約が守られている &lt;code&gt;syncAll&lt;/code&gt; 、他のスレッド（上記の &lt;code&gt;T&lt;/code&gt; ）が &lt;code&gt;S&lt;/code&gt; のターゲットの以前の値を使用し続けている間、実装はsyncAll操作の完了を遅らせる可能性があります。ただし、実装は（いつものように）ライブロックを回避し、最終的にすべてのスレッドが更新されたターゲットを考慮することを要求することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="930ba2ce92706ad2996098d82d35de349c3e2a75" translate="yes" xml:space="preserve">
          <source>As mentioned in the package description of &lt;code&gt;javax.print&lt;/code&gt;, a &lt;code&gt;null&lt;/code&gt; reference parameter to methods is incorrect unless explicitly documented on the method as having a meaningful interpretation. Usage to the contrary is incorrect coding and may result in a run time exception either immediately or at some later time. &lt;code&gt;IllegalArgumentException&lt;/code&gt; and &lt;code&gt;NullPointerException&lt;/code&gt; are examples of typical and acceptable run time exceptions for such cases.</source>
          <target state="translated">&lt;code&gt;javax.print&lt;/code&gt; のパッケージの説明で述べたように、メソッドへの &lt;code&gt;null&lt;/code&gt; 参照パラメーターは、意味のある解釈があるとしてメソッドに明示的に文書化されていない限り、正しくありません。逆の使用法は誤ったコーディングであり、すぐにまたは後で実行時例外が発生する可能性があります。 &lt;code&gt;IllegalArgumentException&lt;/code&gt; と &lt;code&gt;NullPointerException&lt;/code&gt; は、このような場合の一般的で許容可能な実行時例外の例です。</target>
        </trans-unit>
        <trans-unit id="ef47518c57367cc39530570a388c653f9133e814" translate="yes" xml:space="preserve">
          <source>As mentioned in the package description of javax.print, a null reference parameter to methods is incorrect unless explicitly documented on the method as having a meaningful interpretation. Usage to the contrary is incorrect coding and may result in a run time exception either immediately or at some later time. IllegalArgumentException and NullPointerException are examples of typical and acceptable run time exceptions for such cases.</source>
          <target state="translated">javax.printのパッケージの説明でも述べたように、メソッドへのnull参照パラメータは、メソッドに意味のある解釈を持つことが明示的に文書化されていない限り、正しくありません。それとは逆の使い方をすると、不適切なコーディングとなり、実行時の例外が発生する可能性があります。IllegalArgumentException と NullPointerException は、このような場合に発生する典型的で許容できるランタイム例外の例です。</target>
        </trans-unit>
        <trans-unit id="658b60b45ae1f084a108c71ff05f1cfdd970d71f" translate="yes" xml:space="preserve">
          <source>As mentioned, &lt;code&gt;flavor1&lt;/code&gt; and &lt;code&gt;flavor2&lt;/code&gt; are considered identical. As such, asking a &lt;code&gt;Transferable&lt;/code&gt; for either &lt;code&gt;DataFlavor&lt;/code&gt; returns the same results.</source>
          <target state="translated">前述のように、 &lt;code&gt;flavor1&lt;/code&gt; と &lt;code&gt;flavor2&lt;/code&gt; は同一であると見なされます。そのため、いずれかの &lt;code&gt;DataFlavor&lt;/code&gt; に対して &lt;code&gt;Transferable&lt;/code&gt; を要求すると、同じ結果が返されます。</target>
        </trans-unit>
        <trans-unit id="cf0c458e0a3f734bebd8ffc23b81ee99b33a763f" translate="yes" xml:space="preserve">
          <source>As mentioned, URL and URLConnection rely on protocol handlers which must be present, otherwise an Exception is thrown. This is the major difference with URIs which only identify resources, and therefore don't need to have access to the protocol handler. So, while it is possible to create an URI with any kind of protocol scheme (e.g. &lt;code&gt;myproto://myhost.mydomain/resource/&lt;/code&gt;), a similar URL will try to instantiate the handler for the specified protocol; if it doesn't exist an exception will be thrown.</source>
          <target state="translated">前述のように、URLとURLConnectionは、存在する必要のあるプロトコルハンドラーに依存しています。それ以外の場合は、例外がスローされます。これは、リソースのみを識別するため、プロトコルハンドラにアクセスする必要がないURIとの大きな違いです。したがって、あらゆる種類のプロトコルスキーム（ &lt;code&gt;myproto://myhost.mydomain/resource/&lt;/code&gt; など）でURIを作成することは可能ですが、同様のURLは指定されたプロトコルのハンドラーをインスタンス化しようとします。存在しない場合は、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="c439206e7a2da26a2faa9d4b4b049cd5b4436121" translate="yes" xml:space="preserve">
          <source>As much as is reasonably practical, the hashCode method defined by class &lt;code&gt;Object&lt;/code&gt; does return distinct integers for distinct objects. (The hashCode may or may not be implemented as some function of an object's memory address at some point in time.)</source>
          <target state="translated">合理的に実用的である限り、クラス &lt;code&gt;Object&lt;/code&gt; によって定義されたhashCodeメソッドは、個別のオブジェクトに対して個別の整数を返します。（hashCodeは、ある時点でオブジェクトのメモリアドレスの関数として実装される場合とされない場合があります。）</target>
        </trans-unit>
        <trans-unit id="e74b35b186283378f9b0106c790dba3e1f4abdfd" translate="yes" xml:space="preserve">
          <source>As much as is reasonably practical, the hashCode method defined by class &lt;code&gt;Object&lt;/code&gt; does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java&amp;trade; programming language.)</source>
          <target state="translated">合理的に実用的である限り、クラス &lt;code&gt;Object&lt;/code&gt; によって定義されたhashCodeメソッドは、個別のオブジェクトに対して個別の整数を返します。 （これは通常、オブジェクトの内部アドレスを整数に変換することによって実装されますが、この実装手法はJava&amp;trade;プログラミング言語では必要ありません。）</target>
        </trans-unit>
        <trans-unit id="896cf238ecb885632ecc94b86442bd80a47d1959" translate="yes" xml:space="preserve">
          <source>As noted above, the actual method type of the bootstrap method can vary. For example, the fourth argument could be &lt;code&gt;MethodHandle&lt;/code&gt;, if that is the type of the corresponding constant in the &lt;code&gt;CONSTANT_InvokeDynamic&lt;/code&gt; entry. In that case, the &lt;code&gt;MethodHandle.invoke&lt;/code&gt; call will pass the extra method handle constant as an &lt;code&gt;Object&lt;/code&gt;, but the type matching machinery of &lt;code&gt;MethodHandle.invoke&lt;/code&gt; will cast the reference back to &lt;code&gt;MethodHandle&lt;/code&gt; before invoking the bootstrap method. (If a string constant were passed instead, by badly generated code, that cast would then fail, resulting in a &lt;code&gt;BootstrapMethodError&lt;/code&gt;.)</source>
          <target state="translated">上記のように、ブートストラップメソッドの実際のメソッドタイプは異なる場合があります。たとえば、4番目の引数は、それが &lt;code&gt;CONSTANT_InvokeDynamic&lt;/code&gt; エントリ内の対応する定数の型である場合、 &lt;code&gt;MethodHandle&lt;/code&gt; になります。その場合、 &lt;code&gt;MethodHandle.invoke&lt;/code&gt; の呼び出しは、として余分方法のハンドル定数を通過する &lt;code&gt;Object&lt;/code&gt; が、タイプマッチング機械 &lt;code&gt;MethodHandle.invoke&lt;/code&gt; は参照バックキャストう &lt;code&gt;MethodHandle&lt;/code&gt; をブートストラップメソッドを呼び出す前に。 （代わりに文字列定数が渡された場合、不適切に生成されたコードによって、そのキャストは失敗し、 &lt;code&gt;BootstrapMethodError&lt;/code&gt; が発生します。）</target>
        </trans-unit>
        <trans-unit id="86d58fb2698a77126c6a3f5dcde06c1be10241ab" translate="yes" xml:space="preserve">
          <source>As noted in &lt;a href=&quot;../lang/autocloseable#close()&quot;&gt;&lt;code&gt;AutoCloseable.close()&lt;/code&gt;&lt;/a&gt;, cases where the close may fail require careful attention. It is strongly advised to relinquish the underlying resources and to internally &lt;em&gt;mark&lt;/em&gt; the &lt;code&gt;Closeable&lt;/code&gt; as closed, prior to throwing the &lt;code&gt;IOException&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../lang/autocloseable#close()&quot;&gt; &lt;code&gt;AutoCloseable.close()&lt;/code&gt; に&lt;/a&gt;記載されているように、クローズが失敗する可能性がある場合は注意が必要です。 &lt;code&gt;IOException&lt;/code&gt; をスローする前に、基になるリソースを放棄し、内部で &lt;code&gt;Closeable&lt;/code&gt; をクローズとして&lt;em&gt;マーク&lt;/em&gt;することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="32a33e4d3cced7ddc9346d0339be98de3caa49df" translate="yes" xml:space="preserve">
          <source>As noted in &lt;a href=&quot;../lang/autocloseable#close--&quot;&gt;&lt;code&gt;AutoCloseable.close()&lt;/code&gt;&lt;/a&gt;, cases where the close may fail require careful attention. It is strongly advised to relinquish the underlying resources and to internally &lt;em&gt;mark&lt;/em&gt; the &lt;code&gt;Closeable&lt;/code&gt; as closed, prior to throwing the &lt;code&gt;IOException&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;../lang/autocloseable#close--&quot;&gt; &lt;code&gt;AutoCloseable.close()&lt;/code&gt; に&lt;/a&gt;記載されているように、閉じることができない場合は注意が必要です。 &lt;code&gt;IOException&lt;/code&gt; をスローする前に、基になるリソースを放棄し、内部で &lt;code&gt;Closeable&lt;/code&gt; をクローズ済みとして&lt;em&gt;マーク&lt;/em&gt;することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="4566f9c885e3ad9e992d254b2442aca7ca24b212" translate="yes" xml:space="preserve">
          <source>As noted in &lt;code&gt;UIManager&lt;/code&gt; each &lt;code&gt;LookAndFeel&lt;/code&gt; has the opportunity to provide a set of defaults that are layered in with developer and system defaults. Some of Swing's components require the look and feel to provide a specific set of defaults. These are documented in the classes that require the specific default.</source>
          <target state="translated">&lt;code&gt;UIManager&lt;/code&gt; に記載されているように、各 &lt;code&gt;LookAndFeel&lt;/code&gt; には、開発者およびシステムのデフォルトと階層化された一連のデフォルトを提供する機会があります。Swingのコンポーネントの中には、特定のデフォルトのセットを提供するためのルックアンドフィールを必要とするものがあります。これらは、特定のデフォルトを必要とするクラスで文書化されています。</target>
        </trans-unit>
        <trans-unit id="7247086c7fab6f3282000b3391fad996e6a81579" translate="yes" xml:space="preserve">
          <source>As of 1.3 this method is just a cover for &lt;code&gt;java.awt.EventQueue.invokeAndWait()&lt;/code&gt;.</source>
          <target state="translated">1.3以降、このメソッドは &lt;code&gt;java.awt.EventQueue.invokeAndWait()&lt;/code&gt; の単なるカバーです。</target>
        </trans-unit>
        <trans-unit id="14ee2019d0c4c5a944a512798b441f4eaab8677d" translate="yes" xml:space="preserve">
          <source>As of 1.3 this method is just a cover for &lt;code&gt;java.awt.EventQueue.invokeLater()&lt;/code&gt;.</source>
          <target state="translated">1.3以降、このメソッドは &lt;code&gt;java.awt.EventQueue.invokeLater()&lt;/code&gt; の単なるカバーです。</target>
        </trans-unit>
        <trans-unit id="612b8dd6969171d982d326b92ecc73e6c5219294" translate="yes" xml:space="preserve">
          <source>As of 1.3 this method is just a cover for &lt;code&gt;java.awt.EventQueue.isDispatchThread()&lt;/code&gt;.</source>
          <target state="translated">1.3以降、このメソッドは &lt;code&gt;java.awt.EventQueue.isDispatchThread()&lt;/code&gt; の単なるカバーです。</target>
        </trans-unit>
        <trans-unit id="8fd2681408ced2b6910a4b6a9a0001c61709b5dd" translate="yes" xml:space="preserve">
          <source>As of 1.3, value comes from UIManager UIManager property FormView.resetButtonText</source>
          <target state="translated">1.3では、値はUIManager UIManagerプロパティFormView.resetButtonTextから来ています。</target>
        </trans-unit>
        <trans-unit id="95dded3f869f45308da343a4de1eb830ea2391ed" translate="yes" xml:space="preserve">
          <source>As of 1.3, value now comes from UIManager property FormView.submitButtonText</source>
          <target state="translated">1.3では、値はUIManagerプロパティFormView.submitButtonTextから来るようになりました。</target>
        </trans-unit>
        <trans-unit id="0cf651a3c482c18eb34caa55ea8d1cfd6481649d" translate="yes" xml:space="preserve">
          <source>As of 1.3.</source>
          <target state="translated">1.3の時点で</target>
        </trans-unit>
        <trans-unit id="b21093cf4f2a87ae11817ac47d99d87e559e7bf8" translate="yes" xml:space="preserve">
          <source>As of 1.4 a BlockAction</source>
          <target state="translated">1.4ではBlockAction</target>
        </trans-unit>
        <trans-unit id="d4f5b6b2f6806457767b882b8e9b302d549c5ef3" translate="yes" xml:space="preserve">
          <source>As of 1.4 this field is final.</source>
          <target state="translated">1.4の時点では、このフィールドは最終的なものです。</target>
        </trans-unit>
        <trans-unit id="6f6943ece34c654e379de3a2d956d7e1c8bd3ee4" translate="yes" xml:space="preserve">
          <source>As of 1.4, replaced by &lt;code&gt;Component.setFocusTraversalKeys(int, Set)&lt;/code&gt; and &lt;code&gt;Container.setFocusCycleRoot(boolean)&lt;/code&gt;.</source>
          <target state="translated">1.4以降、 &lt;code&gt;Component.setFocusTraversalKeys(int, Set)&lt;/code&gt; および &lt;code&gt;Container.setFocusCycleRoot(boolean)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="6a0bd2f061f6181f8089c4f9b308a1a4c55a0f76" translate="yes" xml:space="preserve">
          <source>As of 1.4, replaced by &lt;code&gt;FocusTraversalPolicy.getDefaultComponent(Container).requestFocus()&lt;/code&gt;</source>
          <target state="translated">1.4以降、 &lt;code&gt;FocusTraversalPolicy.getDefaultComponent(Container).requestFocus()&lt;/code&gt; に置き換えられました</target>
        </trans-unit>
        <trans-unit id="69030aae104775e6725721ca29b89a51c373039a" translate="yes" xml:space="preserve">
          <source>As of 1.4, replaced by &lt;code&gt;FocusTraversalPolicy&lt;/code&gt;</source>
          <target state="translated">1.4以降、 &lt;code&gt;FocusTraversalPolicy&lt;/code&gt; に置き換えられました</target>
        </trans-unit>
        <trans-unit id="fc714aff4cc9fa3e05658c6ce1e5c7f442977cc6" translate="yes" xml:space="preserve">
          <source>As of 1.4, replaced by &lt;code&gt;FocusTraversalPolicy&lt;/code&gt;.</source>
          <target state="translated">1.4以降、 &lt;code&gt;FocusTraversalPolicy&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="1f35a386c5a558df6ce157d5a621ed2c29d873c2" translate="yes" xml:space="preserve">
          <source>As of 1.4, replaced by &lt;code&gt;KeyboardFocusManager.getDefaultFocusTraversalPolicy()&lt;/code&gt;</source>
          <target state="translated">1.4以降、 &lt;code&gt;KeyboardFocusManager.getDefaultFocusTraversalPolicy()&lt;/code&gt; に置き換えられました</target>
        </trans-unit>
        <trans-unit id="8f7b9d687bb739fbb439d6adf05bcea717a8e920" translate="yes" xml:space="preserve">
          <source>As of 1.4, replaced by &lt;code&gt;KeyboardFocusManager.getFocusOwner()&lt;/code&gt;.</source>
          <target state="translated">1.4以降、 &lt;code&gt;KeyboardFocusManager.getFocusOwner()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="4120adbf871102091499306963573310bfdeaf5b" translate="yes" xml:space="preserve">
          <source>As of 1.4, replaced by &lt;code&gt;isFocusable()&lt;/code&gt;.</source>
          <target state="translated">1.4以降、 &lt;code&gt;isFocusable()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="4078cfe3937faabfba671d2a570abce668bef825" translate="yes" xml:space="preserve">
          <source>As of 1.4, this class is now obsolete, doesn't do anything, and is only included for backwards API compatibility.</source>
          <target state="translated">1.4 の時点で、このクラスは廃止され、何もせず、後方の API 互換性のためだけに含まれています。</target>
        </trans-unit>
        <trans-unit id="2a3a2b8654a18a3407672451588d551b97d0f64c" translate="yes" xml:space="preserve">
          <source>As of 1.4, this class is now obsolete, doesn't do anything, and is only included for backwards API compatibility. Do not call or override.</source>
          <target state="translated">1.4 以降、このクラスは廃止され、何もせず、後方の API 互換性のためだけに含まれています。呼び出したりオーバーライドしたりしないでください。</target>
        </trans-unit>
        <trans-unit id="c548dda8d18587686eae830cf20254e14261a65f" translate="yes" xml:space="preserve">
          <source>As of 1.5, &lt;a href=&quot;processbuilder#start()&quot;&gt;&lt;code&gt;ProcessBuilder.start()&lt;/code&gt;&lt;/a&gt; is the preferred way to create a &lt;code&gt;Process&lt;/code&gt;.</source>
          <target state="translated">1.5以降、&lt;a href=&quot;processbuilder#start()&quot;&gt; &lt;code&gt;ProcessBuilder.start()&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;Process&lt;/code&gt; を作成するための推奨される方法です。</target>
        </trans-unit>
        <trans-unit id="4f841b77c906be2ef00ecd3023912695621031d6" translate="yes" xml:space="preserve">
          <source>As of 1.5, &lt;a href=&quot;processbuilder#start--&quot;&gt;&lt;code&gt;ProcessBuilder.start()&lt;/code&gt;&lt;/a&gt; is the preferred way to create a &lt;code&gt;Process&lt;/code&gt;.</source>
          <target state="translated">1.5以降、 &lt;code&gt;Process&lt;/code&gt; を作成するには、&lt;a href=&quot;processbuilder#start--&quot;&gt; &lt;code&gt;ProcessBuilder.start()&lt;/code&gt; &lt;/a&gt;が推奨される方法です。</target>
        </trans-unit>
        <trans-unit id="00c8381a41f0a615d501dbd28d8ab8c081b28992" translate="yes" xml:space="preserve">
          <source>As of 1.6 &lt;code&gt;RepaintManager&lt;/code&gt; handles repaint requests for Swing's top level components (&lt;code&gt;JApplet&lt;/code&gt;, &lt;code&gt;JWindow&lt;/code&gt;, &lt;code&gt;JFrame&lt;/code&gt; and &lt;code&gt;JDialog&lt;/code&gt;). Any calls to &lt;code&gt;repaint&lt;/code&gt; on one of these will call into the appropriate &lt;code&gt;addDirtyRegion&lt;/code&gt; method.</source>
          <target state="translated">1.6 &lt;code&gt;RepaintManager&lt;/code&gt; は、Swingの最上位コンポーネント（ &lt;code&gt;JApplet&lt;/code&gt; 、 &lt;code&gt;JWindow&lt;/code&gt; 、 &lt;code&gt;JFrame&lt;/code&gt; 、および &lt;code&gt;JDialog&lt;/code&gt; ）の再描画要求を処理します。呼び出し &lt;code&gt;repaint&lt;/code&gt; これらのいずれかに該当するに呼び出します &lt;code&gt;addDirtyRegion&lt;/code&gt; の方法。</target>
        </trans-unit>
        <trans-unit id="b70359d515a6b5eb5eda8309bf3124e5aff82b14" translate="yes" xml:space="preserve">
          <source>As of J2SE 1.4, &lt;code&gt;KeyEvent&lt;/code&gt;s are redirected to the focus owner. Please see the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/doc-files/FocusSpec.html&quot;&gt;Focus Specification&lt;/a&gt; for further information.</source>
          <target state="translated">J2SE 1.4以降、 &lt;code&gt;KeyEvent&lt;/code&gt; はフォーカス所有者にリダイレクトされます。詳細については、&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/doc-files/FocusSpec.html&quot;&gt;フォーカス仕様&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="759dc44b7302b228ac356ab2bb2e40cf61469520" translate="yes" xml:space="preserve">
          <source>As of J2SE 1.4, &lt;code&gt;KeyEvent&lt;/code&gt;s are redirected to the focus owner. Please see the &lt;a href=&quot;https://docs.oracle.com/en/java/javase/15/docs/api/java.desktop/java/awt/doc-files/FocusSpec.html&quot;&gt;Focus Specification&lt;/a&gt; for further information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4275c974aeb2f997c66cdc7d8c8ff0ffbec458a7" translate="yes" xml:space="preserve">
          <source>As of J2SE 1.4, replaced by &lt;a href=&quot;component#applyComponentOrientation(java.awt.ComponentOrientation)&quot;&gt;&lt;code&gt;Component.applyComponentOrientation&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">J2SE 1.4以降、&lt;a href=&quot;component#applyComponentOrientation(java.awt.ComponentOrientation)&quot;&gt; &lt;code&gt;Component.applyComponentOrientation&lt;/code&gt; &lt;/a&gt;に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="0eda1248633dc5aece6898581820dfebc3c783ec" translate="yes" xml:space="preserve">
          <source>As of J2SE 1.4, use &lt;a href=&quot;#getOrientation(java.util.Locale)&quot;&gt;&lt;code&gt;getOrientation(java.util.Locale)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">J2SE 1.4以降、&lt;a href=&quot;#getOrientation(java.util.Locale)&quot;&gt; &lt;code&gt;getOrientation(java.util.Locale)&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="205ae4b1491f3a618d959d167e04a4d3b103f459" translate="yes" xml:space="preserve">
          <source>As of JDK 1.7, replaced by &lt;a href=&quot;#getSelectedValuesList()&quot;&gt;&lt;code&gt;getSelectedValuesList()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">JDK 1.7以降、&lt;a href=&quot;#getSelectedValuesList()&quot;&gt; &lt;code&gt;getSelectedValuesList()&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="8e842eed2965fc75d946a8906f628936c18cde45" translate="yes" xml:space="preserve">
          <source>As of JDK 5, replaced by &lt;code&gt;Component.setBounds(int, int, int, int)&lt;/code&gt;.</source>
          <target state="translated">JDK 5以降、 &lt;code&gt;Component.setBounds(int, int, int, int)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="acd4e566da2cb13190000c450e8dba393e17b625" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1 replaced by &lt;code&gt;dispatchEvent(AWTEvent)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1 &lt;code&gt;dispatchEvent(AWTEvent)&lt;/code&gt; 、dispatchEvent（AWTEvent）に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="933caf0d6e1f93a0a4a41c7920755cf96d7fcca5" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1 replaced by dispatchEvent(AWTEvent).</source>
          <target state="translated">JDK バージョン 1.1 より dispatchEvent(AWTEvent)に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="d023ffdceb027daf6e1645589f6f01345f660293" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1 replaced by processEvent(AWTEvent).</source>
          <target state="translated">JDK バージョン 1.1 より processEvent(AWTEvent)に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="f5506c931d4308a73c43a4b0aed9aac92da7fffa" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, Not for public use in the future.</source>
          <target state="translated">JDKバージョン1.1の時点では、将来的に公開されることはありません。</target>
        </trans-unit>
        <trans-unit id="383310e7457b9a270c48f692aa77c3d80368eea8" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, Not for public use in the future. This method is expected to be retained only as a package private method.</source>
          <target state="translated">JDK バージョン 1.1 の時点では、将来的には公開用ではありません。このメソッドはパッケージのプライベートメソッドとしてのみ保持されることが予想されます。</target>
        </trans-unit>
        <trans-unit id="79b83cc8bacd199f934d7e3b4d0ae7eedf242a68" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;a href=&quot;#dispatchEvent(java.awt.AWTEvent)&quot;&gt;&lt;code&gt;dispatchEvent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、&lt;a href=&quot;#dispatchEvent(java.awt.AWTEvent)&quot;&gt; &lt;code&gt;dispatchEvent&lt;/code&gt; &lt;/a&gt;に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="af60a9781d9ce5eb2a82b45c437f9542d56e3f37" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;-(Calendar.get(Calendar.ZONE_OFFSET) +
 Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;-(Calendar.get(Calendar.ZONE_OFFSET) + Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="862bd45c2ef1e44ce848071b4788359d8277f4ab" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;Calendar.get(Calendar.DAY_OF_MONTH)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;Calendar.get(Calendar.DAY_OF_MONTH)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="f77530d3f27a7d829604a7dfcf2443e8640f1315" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;Calendar.get(Calendar.DAY_OF_WEEK)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;Calendar.get(Calendar.DAY_OF_WEEK)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="2fa2c35b30828245dba843b62b84c2249bc60ffe" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;Calendar.get(Calendar.HOUR_OF_DAY)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;Calendar.get(Calendar.HOUR_OF_DAY)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="76901278b1bea81bc056c34aa73a7dc92c277542" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;Calendar.get(Calendar.MINUTE)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;Calendar.get(Calendar.MINUTE)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="64c2aca2cded1a2d366ab88c3c53fe3e22dbbdcf" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;Calendar.get(Calendar.MONTH)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;Calendar.get(Calendar.MONTH)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="29f97b319aad1e2d079bd36791f5a4fc7391730c" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;Calendar.get(Calendar.SECOND)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;Calendar.get(Calendar.SECOND)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="ba32aceba1ab42323593d862f67eee864216d3c7" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;Calendar.get(Calendar.YEAR) - 1900&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;Calendar.get(Calendar.YEAR) - 1900&lt;/code&gt; -1900に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="25a012c9eef0640445a12ec17019b2083cf12462" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(Calendar.DAY_OF_MONTH, int date)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;Calendar.set(Calendar.DAY_OF_MONTH, int date)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="f148f66bfe6bff3da40dd58e6742c4477c689036" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(Calendar.HOUR_OF_DAY, int hours)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;Calendar.set(Calendar.HOUR_OF_DAY, int hours)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="e92f33fb489c41272e8a35d8da75143d876b94c6" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(Calendar.MINUTE, int minutes)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;Calendar.set(Calendar.MINUTE, int minutes)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="fb5700613dcca99459a38ef951b5fc66b2495f8c" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(Calendar.MONTH, int month)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;Calendar.set(Calendar.MONTH, int month)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="fec704ae4485de8f51ab6dc8a1acdc3dc8843b2c" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(Calendar.SECOND, int seconds)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;Calendar.set(Calendar.SECOND, int seconds)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="3d0bd61a1eebf74ddf12d1100ec312b654fadfa5" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(Calendar.YEAR, year + 1900)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;Calendar.set(Calendar.YEAR, year + 1900)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="2555cbf7a2b1fdc30ed0a5234b9a4f5f8e9a188d" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(year + 1900, month, date)&lt;/code&gt; or &lt;code&gt;GregorianCalendar(year + 1900, month, date)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;Calendar.set(year + 1900, month, date)&lt;/code&gt; または &lt;code&gt;GregorianCalendar(year + 1900, month, date)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="8b90c24efb44a8f8df38f0931579aeb41b7eaa4e" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(year + 1900, month, date, hrs, min)&lt;/code&gt; or &lt;code&gt;GregorianCalendar(year + 1900, month, date, hrs, min)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;Calendar.set(year + 1900, month, date, hrs, min)&lt;/code&gt; または &lt;code&gt;GregorianCalendar(year + 1900, month, date, hrs, min)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="ab19d298f07791ed92fb53f3475d34ce269d6a14" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(year + 1900, month, date, hrs, min, sec)&lt;/code&gt; or &lt;code&gt;GregorianCalendar(year + 1900, month, date, hrs, min, sec)&lt;/code&gt;, using a UTC &lt;code&gt;TimeZone&lt;/code&gt;, followed by &lt;code&gt;Calendar.getTime().getTime()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降は、置き換えられ &lt;code&gt;Calendar.set(year + 1900, month, date, hrs, min, sec)&lt;/code&gt; または &lt;code&gt;GregorianCalendar(year + 1900, month, date, hrs, min, sec)&lt;/code&gt; UTC使用して、 &lt;code&gt;TimeZone&lt;/code&gt; 、その後、 &lt;code&gt;Calendar.getTime().getTime()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b39359e34b54f9d5132599171d24e3534ff1a5eb" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;Calendar.set(year + 1900, month, date, hrs, min, sec)&lt;/code&gt; or &lt;code&gt;GregorianCalendar(year + 1900, month, date, hrs, min, sec)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;Calendar.set(year + 1900, month, date, hrs, min, sec)&lt;/code&gt; または &lt;code&gt;GregorianCalendar(year + 1900, month, date, hrs, min, sec)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="27c94ee3a6e159ccffd23a93408b4d84b718e276" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;Component.getCursor()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;Component.getCursor()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="b413ea2cf5a9b9857fb3d0731b9cc31851d148aa" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;Component.setCursor(Cursor)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;Component.setCursor(Cursor)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="7818380166a2993dea6908fe34d6c7b14a2cfd12" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;DateFormat.format(Date date)&lt;/code&gt;, using a GMT &lt;code&gt;TimeZone&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、GMT &lt;code&gt;TimeZone&lt;/code&gt; を使用して &lt;code&gt;DateFormat.format(Date date)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="e80190dc24da84550676cd77af807c7907322298" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;DateFormat.format(Date date)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;DateFormat.format(Date date)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="41d46e3cf866a5960cb1d14dab6cc7525ca389d3" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;DateFormat.parse(String s)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;DateFormat.parse(String s)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="c74e6e0e10e4d69bff73fb7a727da09c0c8907dd" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;append(String)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;append(String)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="657891bd09f91e429f8533f511660f33600bce9a" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;contains(int, int)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;contains(int, int)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="b97640725738db5f9bd11b511d28d622c8a2c391" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;dispatchEvent(AWTEvent e)&lt;/code&gt;</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;dispatchEvent(AWTEvent e)&lt;/code&gt; に置き換えられました</target>
        </trans-unit>
        <trans-unit id="fe070ff5657a4e5c75e2d3b0ac91cb8b180eea97" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;dispatchEvent(AWTEvent e)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;dispatchEvent(AWTEvent e)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="3b24763a2b2a2110003710ce430ffc3a3b68b3a8" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;doLayout()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;doLayout()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="927e992a14753040b5c901dd380578abac0bb8a4" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;getBlockIncrement()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;getBlockIncrement()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="a48e4e4732eb319195c2db693217512d73ab9055" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;getBounds()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;getBounds()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="b21c9550deb44f8b3b09d90a88a81625d5d8976c" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;getClipBounds()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;getClipBounds()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="ba045eb54b12bb9963e2c66fabce79acb03077a6" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;getComponentAt(int, int)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;getComponentAt(int, int)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="2bfd4b14d9d5d2fc4dd3cdeb015d263da6e02d0d" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;getInsets()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;getInsets()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="0bca5dd0571901ee1a3343f2cbb0ddbad44789f2" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;getItemCount()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;getItemCount()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="2eaee3fba9e8543d95c339d91d6b711ddf6eb16f" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;getLocation()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;getLocation()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="d11a13f7bb070af99b802ae1b324cced5a67e328" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;getMenuCount()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;getMenuCount()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="1f7f931c662c8de397e070c94b5f073d72f6f6bc" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;getMinimumSize()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;getMinimumSize()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="fbc616ed74380ee00fdde02e90274c20861d2f27" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;getMinimumSize(int)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;getMinimumSize(int)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="fa6c9349fb90ccfeae499d2ff856aa26d1aeaee0" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;getMinimumSize(int, int)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;getMinimumSize(int, int)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="21751df976183702afbfd140f2295ccb88b4fcb8" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;getPreferredSize()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;getPreferredSize()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="ebf651b2bb74515fafd10b012fd2a39fce205b61" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;getPreferredSize(int)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;getPreferredSize(int)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="90907f6546dc5338883128c0af942a00500f8bb1" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;getPreferredSize(int, int)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;getPreferredSize(int, int)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="7b4df14bb49fd244d657e17d89b6c3f076b892f0" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;getSelectedCheckbox()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;getSelectedCheckbox()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="b2520dc893e84fa8387a81ff0f495e6b15dd4a6c" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;getSize()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;getSize()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="fb43948465bf5eb1f1979cd38822c8ba4ff15d71" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;getUnitIncrement()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;getUnitIncrement()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="12cdad42e834c649a36a414828bfe4f95425f57e" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;getVisibleAmount()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;getVisibleAmount()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="5d16764d83319a4f9587185e3916038fa9d88e8a" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;insert(String, int)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;insert(String, int)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="673c1de9b17342bad3424a81feecbdfdeb7d4ad6" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;isIndexSelected(int)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;isIndexSelected(int)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="3ad11af3f5ff474472b1039de69914f69e17f144" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;isMultipleMode()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;isMultipleMode()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="4345c9146d6a9ac127c8c2bf0107d79c56ca2677" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;java.awt.Component.setEnabled(boolean)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;java.awt.Component.setEnabled(boolean)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="d8ea04455e4cdd5949ec1c9cfdc8c18026d2d2ec" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;removeAll()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;removeAll()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="9034774553d5e34369fcf8de7ef8556ed4d2b736" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;replaceRange(String, int, int)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;replaceRange(String, int, int)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="bccee485a05fee207bf917d918e5490556581ff4" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;setBlockIncrement()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;setBlockIncrement()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="024e3f53a8d2c13d2ff73864add76e7ed32e61a5" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;setBounds(int, int, int, int)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;setBounds(int, int, int, int)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="403f81d2f0a18b069b5416204d0ef57c18ae1ebe" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;setEchoChar(char)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;setEchoChar(char)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="525c54ff72b2ae6925c37d4378eb28a609acc5f3" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;setEnabled(boolean)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;setEnabled(boolean)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="d4f4264f084d028c2121e4d38235e0ca59f3145a" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;setLocation(int, int)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;setLocation(int, int)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="32f65d8a4aceaf20e3d983ec9ecf18122b892612" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;setMultipleMode(boolean)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;setMultipleMode(boolean)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="7e9a1d5dcf94d1a7bc8b63b3963b22cdf393fa97" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;setSelectedCheckbox(Checkbox)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;setSelectedCheckbox(Checkbox)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="db0f410a21c048b898cb95e2ff573087366ecc04" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;setSize(Dimension)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;setSize(Dimension)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="c1147a00de342aa069ad5ce26b6d743e46861796" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;setSize(int, int)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;setSize(int, int)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="2fedf9e12e1bf7ccffae809ee90869da88e3a281" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;setUnitIncrement(int)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;setUnitIncrement(int)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="ba5f045eb3f75c2edcbe2a4aeff0770a4ae1eb35" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by &lt;code&gt;setVisible(boolean)&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1以降、 &lt;code&gt;setVisible(boolean)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="4ff86ca4140514fddbb088afabc0c9c17c4ef4b7" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by contains(int, int).</source>
          <target state="translated">JDK バージョン 1.1 以降、contains(int,int)に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="7590d75c26466d5985cd6ff99541f0009b265fbd" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by dispatchEvent(AWTEvent).</source>
          <target state="translated">JDK バージョン 1.1 以降、dispatchEvent(AWTEvent)に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="7fb3455469a33d6333f8421e7e86f1a8638acd70" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by getComponentAt(int, int).</source>
          <target state="translated">JDK バージョン 1.1 以降、getComponentAt(int,int)に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="901f30185afca84105291a66fd4e84eb5675e977" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by getComponentCount().</source>
          <target state="translated">JDK バージョン 1.1 以降、getComponentCount()に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="6754f1789b8bab7a83a073ddb6c104c444850f81" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by processFocusEvent(FocusEvent).</source>
          <target state="translated">JDKバージョン1.1より、processFocusEvent(FocusEvent)に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="807f7111e175b46b30e39cceb63deda16fce0f9f" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by processKeyEvent(KeyEvent).</source>
          <target state="translated">JDK バージョン 1.1 の時点で、processKeyEvent(KeyEvent)に置き換えられています。</target>
        </trans-unit>
        <trans-unit id="e12fded5aa0b6f176810c710258960a88a34f217" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by processMouseEvent(MouseEvent).</source>
          <target state="translated">JDK バージョン 1.1 以降、processMouseEvent(MouseEvent)に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="7e6c33261c4a17d6999ccfb56c6afa56f389c738" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by processMouseMotionEvent(MouseEvent).</source>
          <target state="translated">JDKバージョン1.1のとき、processMouseMotionEvent(MouseEvent)に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="e036f729a9b3d31c464e6723e4ff14b8d9652079" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, replaced by transferFocus().</source>
          <target state="translated">JDK バージョン 1.1 以降、transferFocus()に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="8a9ad99eef6bb9748574f02170c39a89ef7bd855" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, should register this component as ActionListener on component which fires action events.</source>
          <target state="translated">JDKバージョン1.1では、アクションイベントを発生させるコンポーネントにActionListenerとして登録する必要があります。</target>
        </trans-unit>
        <trans-unit id="11a5b9ef252127ad7d297a29fdebeb61ee5c7177" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1, the preferred way to tokenize an input stream is to convert it into a character stream, for example:</source>
          <target state="translated">JDK バージョン 1.1 の時点では、入力ストリームをトークン化する好ましい方法は、例えば文字ストリームに変換することです。</target>
        </trans-unit>
        <trans-unit id="fc97ce694acf92463aadec8ee94b80b73ba5209d" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.1.1, replaced by &lt;code&gt;getMaxDescent()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.1.1以降、 &lt;code&gt;getMaxDescent()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="37e75136f4be5cfe9e299e469461138dd57b14bf" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.2, replaced by the &lt;code&gt;Font&lt;/code&gt; method &lt;code&gt;getLineMetrics&lt;/code&gt;.</source>
          <target state="translated">JDKバージョン1.2以降、 &lt;code&gt;Font&lt;/code&gt; メソッド &lt;code&gt;getLineMetrics&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="dbccb3d5c45a75a068a9ad2412360ac6f9829588" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.5, replaced by &lt;a href=&quot;#setVisible(boolean)&quot;&gt;&lt;code&gt;setVisible(boolean)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">JDKバージョン1.5以降、&lt;a href=&quot;#setVisible(boolean)&quot;&gt; &lt;code&gt;setVisible(boolean)&lt;/code&gt; に&lt;/a&gt;置き換えられました。</target>
        </trans-unit>
        <trans-unit id="5f13b7e8edde06ba8737796722eb7d20c6cf6f54" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.7</source>
          <target state="translated">JDKバージョン1.7の時点で</target>
        </trans-unit>
        <trans-unit id="17744b50c6835b55040bfc8e1e6945364190877f" translate="yes" xml:space="preserve">
          <source>As of JDK version 1.7, the &lt;a href=&quot;#getPredefinedCursor(int)&quot;&gt;&lt;code&gt;getPredefinedCursor(int)&lt;/code&gt;&lt;/a&gt; method should be used instead.</source>
          <target state="translated">JDKバージョン1.7以降では、&lt;a href=&quot;#getPredefinedCursor(int)&quot;&gt; &lt;code&gt;getPredefinedCursor(int)&lt;/code&gt; &lt;/a&gt;メソッドを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="82d2ded73e384823b93b5c0213b63e1c31f05843" translate="yes" xml:space="preserve">
          <source>As of JDK version 9.</source>
          <target state="translated">JDKバージョン9の時点で。</target>
        </trans-unit>
        <trans-unit id="4f108a70b45d438d2a8820ad3d0f05adb841b518" translate="yes" xml:space="preserve">
          <source>As of JDK version 9. Obsolete class.</source>
          <target state="translated">JDK バージョン 9 の時点では。廃止されたクラス。</target>
        </trans-unit>
        <trans-unit id="0e79b12ef3cc60e10f55387f928279dc1bd198cf" translate="yes" xml:space="preserve">
          <source>As of JDK version Swing1.1 replaced by &lt;code&gt;JScrollPane.getViewportBorderBounds()&lt;/code&gt;.</source>
          <target state="translated">JDKバージョンSwing1.1以降、 &lt;code&gt;JScrollPane.getViewportBorderBounds()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="09df6f63e1723dcdd01e59e900fdea2698d4efb9" translate="yes" xml:space="preserve">
          <source>As of JMX 1.2, replaced by &lt;a href=&quot;#addObservedObject(javax.management.ObjectName)&quot;&gt;&lt;code&gt;addObservedObject(javax.management.ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">JMX 1.2以降、&lt;a href=&quot;#addObservedObject(javax.management.ObjectName)&quot;&gt; &lt;code&gt;addObservedObject(javax.management.ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="9a6d2717f2ae36e1f0190b1f0ad86c532fe5fc6e" translate="yes" xml:space="preserve">
          <source>As of JMX 1.2, replaced by &lt;a href=&quot;#getDerivedGauge(javax.management.ObjectName)&quot;&gt;&lt;code&gt;getDerivedGauge(ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">JMX 1.2以降、&lt;a href=&quot;#getDerivedGauge(javax.management.ObjectName)&quot;&gt; &lt;code&gt;getDerivedGauge(ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="14b4288a4bd81842562762a5b8926301081ae225" translate="yes" xml:space="preserve">
          <source>As of JMX 1.2, replaced by &lt;a href=&quot;#getDerivedGaugeTimeStamp(javax.management.ObjectName)&quot;&gt;&lt;code&gt;getDerivedGaugeTimeStamp(ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">JMX 1.2以降、&lt;a href=&quot;#getDerivedGaugeTimeStamp(javax.management.ObjectName)&quot;&gt; &lt;code&gt;getDerivedGaugeTimeStamp(ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="38cdf5a93feda1b157951c8636c2c27196af26ba" translate="yes" xml:space="preserve">
          <source>As of JMX 1.2, replaced by &lt;a href=&quot;#getObservedObjects()&quot;&gt;&lt;code&gt;getObservedObjects()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">JMX 1.2以降、&lt;a href=&quot;#getObservedObjects()&quot;&gt; &lt;code&gt;getObservedObjects()&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="5f8713edd2fcb8c7b603a4a2d2b8598a9ebbf586" translate="yes" xml:space="preserve">
          <source>As of JMX 1.2, replaced by &lt;a href=&quot;#getThreshold(javax.management.ObjectName)&quot;&gt;&lt;code&gt;getThreshold(ObjectName)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">JMX 1.2以降、&lt;a href=&quot;#getThreshold(javax.management.ObjectName)&quot;&gt; &lt;code&gt;getThreshold(ObjectName)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="74ede142d761c569f6cdfe31ce4b923db880135e" translate="yes" xml:space="preserve">
          <source>As of JMX 1.2, replaced by &lt;a href=&quot;#setInitThreshold(java.lang.Number)&quot;&gt;&lt;code&gt;setInitThreshold(java.lang.Number)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">JMX 1.2以降、&lt;a href=&quot;#setInitThreshold(java.lang.Number)&quot;&gt; &lt;code&gt;setInitThreshold(java.lang.Number)&lt;/code&gt; に&lt;/a&gt;置き換えられました</target>
        </trans-unit>
        <trans-unit id="0d6a2c0383ddcb7e62fc33647247dd7f714d05a6" translate="yes" xml:space="preserve">
          <source>As of Java 2 SDK v1.2, the default implementation of each of the other &lt;code&gt;check&lt;/code&gt; methods in &lt;code&gt;SecurityManager&lt;/code&gt; is to call the &lt;code&gt;SecurityManager checkPermission&lt;/code&gt; method to determine if the calling thread has permission to perform the requested operation.</source>
          <target state="translated">Java 2 SDK v1.2以降、 &lt;code&gt;SecurityManager&lt;/code&gt; の他の各 &lt;code&gt;check&lt;/code&gt; メソッドのデフォルトの実装では、 &lt;code&gt;SecurityManager checkPermission&lt;/code&gt; メソッドを呼び出して、呼び出し側のスレッドが要求された操作を実行する権限を持っているかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="aaf8bab14e9352eee7e1a1c6a7e3e34a670bddbc" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform 1.4, this previously undocumented class is now obsolete.</source>
          <target state="translated">Java 2 platform 1.4では、以前は文書化されていなかったこのクラスは、現在では廃止されています。</target>
        </trans-unit>
        <trans-unit id="ddddc033b7a47cfce94f414d2d69291f3335ad15" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform 1.4, this previously undocumented class is now obsolete. KeyBindings are now managed by the popup menu.</source>
          <target state="translated">Java 2プラットフォーム1.4では、以前は文書化されていなかったこのクラスは現在では廃止されています。キーバインドはポップアップメニューで管理されるようになりました。</target>
        </trans-unit>
        <trans-unit id="9361fd538103c7bda01829e0d20f4d0a0d0eb8c4" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v 1.4, this class is now obsolete and is only included for backwards API compatibility.</source>
          <target state="translated">Java 2 プラットフォーム v 1.4 の時点で、このクラスは現在廃止されており、後方の API 互換性のためにのみ含まれています。</target>
        </trans-unit>
        <trans-unit id="de3225be5bcdd924660d18dde9f99c4c4647b288" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v 1.4, this class is now obsolete and is only included for backwards API compatibility. Do not instantiate or subclass.</source>
          <target state="translated">Java 2 プラットフォーム v 1.4 の時点で、このクラスは現在では廃止されており、後方の API 互換性のためにのみ含まれています。インスタンス化やサブクラス化はしないでください。</target>
        </trans-unit>
        <trans-unit id="3f2400239d38085729b3b575d33ec752d5e6e3a0" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v 1.4, this class is now obsolete, doesn't do anything, and is only included for backwards API compatibility.</source>
          <target state="translated">Java 2 プラットフォーム v 1.4 の時点で、このクラスは廃止されており、何もしておらず、後方の API 互換性のためだけに含まれています。</target>
        </trans-unit>
        <trans-unit id="ffd09d50f061770ff5622decf87b9f56216b34f1" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v 1.4, this class is now obsolete, doesn't do anything, and is only included for backwards API compatibility. Do not call or override.</source>
          <target state="translated">Java 2 プラットフォーム v 1.4 の時点で、このクラスは現在では廃止されており、何もしておらず、後方の API 互換性のためだけに含まれています。呼び出したり、オーバーライドしたりしないでください。</target>
        </trans-unit>
        <trans-unit id="46bcc2c3854382aa9226a4f7f987b9ad05a7bb5c" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.2, replaced by &lt;code&gt;getPassword&lt;/code&gt;.</source>
          <target state="translated">Java 2プラットフォームv1.2以降、 &lt;code&gt;getPassword&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="a199d02e08db7672b80c1f6718d12e790f3289a6" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.3</source>
          <target state="translated">Java 2プラットフォームv1.3の時点で</target>
        </trans-unit>
        <trans-unit id="be583631d8560d6e5df31a06fb4e9b13793fad67" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.3 this class is no longer used. Instead &lt;code&gt;JTable&lt;/code&gt; overrides &lt;code&gt;processKeyBinding&lt;/code&gt; to dispatch the event to the current &lt;code&gt;TableCellEditor&lt;/code&gt;.</source>
          <target state="translated">Java 2プラットフォームv1.3以降、このクラスは使用されなくなりました。代わりに、 &lt;code&gt;JTable&lt;/code&gt; は &lt;code&gt;processKeyBinding&lt;/code&gt; をオーバーライドして、イベントを現在の &lt;code&gt;TableCellEditor&lt;/code&gt; にディスパッチします。</target>
        </trans-unit>
        <trans-unit id="82cb662072105780e7d62f8b9453055d5c5f8799" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.3 this method is no longer used. Instead you should set the border on the divider.</source>
          <target state="translated">Java 2 プラットフォーム v1.3 以降、この方法は使用されなくなりました。代わりに、仕切りの境界線を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="cdeec53fa418324c652e89f54ba7148c204bc608" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.3 this method is no longer used. Subclassers previously using this method should instead create an &lt;code&gt;Action&lt;/code&gt; wrapping the &lt;code&gt;ActionListener&lt;/code&gt;, and register that &lt;code&gt;Action&lt;/code&gt; by overriding &lt;code&gt;installKeyboardActions&lt;/code&gt; and placing the &lt;code&gt;Action&lt;/code&gt; in the &lt;code&gt;SplitPane's ActionMap&lt;/code&gt;. Please refer to the key bindings specification for further details.</source>
          <target state="translated">Java 2プラットフォームv1.3以降、このメソッドは使用されなくなりました。以前にこのメソッドを使用していた &lt;code&gt;SplitPane's ActionMap&lt;/code&gt; は、代わりに &lt;code&gt;ActionListener&lt;/code&gt; をラップする &lt;code&gt;Action&lt;/code&gt; を作成し、 &lt;code&gt;installKeyboardActions&lt;/code&gt; をオーバーライドして、SplitPaneのActionMapに &lt;code&gt;Action&lt;/code&gt; を配置することによってその &lt;code&gt;Action&lt;/code&gt; を登録する必要があります。詳細については、キーバインディングの仕様を参照してください。</target>
        </trans-unit>
        <trans-unit id="e534ea9fb51de547ac607efe3fc3a6f126317505" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.3 this previously undocumented field is no longer used. Key bindings are now defined by the LookAndFeel, please refer to the key bindings specification for further details.</source>
          <target state="translated">Java 2 platform v1.3では、以前は文書化されていなかったこのフィールドは使用されなくなりました。キーバインディングはLookAndFeelによって定義されるようになりました。</target>
        </trans-unit>
        <trans-unit id="723772ab0c0ff5e6610a59b285c8adb7d82fa261" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.3 this undocumented class is no longer used.</source>
          <target state="translated">Java 2 platform v1.3では、この文書化されていないクラスは使用されなくなりました。</target>
        </trans-unit>
        <trans-unit id="7ce068ca5276f94983f51f8d0d9a69153ee8e731" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.3 this undocumented class is no longer used. The recommended approach to creating bindings is to use a combination of an &lt;code&gt;ActionMap&lt;/code&gt;, to contain the action, and an &lt;code&gt;InputMap&lt;/code&gt; to contain the mapping from KeyStroke to action description. The InputMap is usually described in the LookAndFeel tables.</source>
          <target state="translated">Java 2プラットフォームv1.3以降、この文書化されていないクラスは使用されなくなりました。バインディングを作成するための推奨されるアプローチは、アクションを含む &lt;code&gt;ActionMap&lt;/code&gt; と、KeyStrokeからアクションの説明へのマッピングを含む &lt;code&gt;InputMap&lt;/code&gt; の組み合わせを使用することです。InputMapは通常、LookAndFeelテーブルで記述されます。</target>
        </trans-unit>
        <trans-unit id="423ae3fefce4ad8339fd1ed6d5d57e63e8e34a36" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.3, instead set the border on the divider.</source>
          <target state="translated">Java 2 platform v1.3の時点では、代わりに仕切りにボーダーを設定しています。</target>
        </trans-unit>
        <trans-unit id="50486120b71f93b80ae8fca229cba995ebbf6943" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.3, replaced by &lt;code&gt;getScrollMode()&lt;/code&gt;.</source>
          <target state="translated">Java 2プラットフォームv1.3以降、 &lt;code&gt;getScrollMode()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="ffec56faa6959762f309a23d80f883c476242195" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.3, replaced by &lt;code&gt;setScrollMode()&lt;/code&gt;.</source>
          <target state="translated">Java 2プラットフォームv1.3以降、 &lt;code&gt;setScrollMode()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="a03b05174075ed272ad545267503fb0e541f998f" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.3, this method is not called by the &lt;code&gt;TableColumn&lt;/code&gt; constructor.</source>
          <target state="translated">Java 2プラットフォームv1.3以降、このメソッドは &lt;code&gt;TableColumn&lt;/code&gt; コンストラクターによって呼び出されません。</target>
        </trans-unit>
        <trans-unit id="22f8243765077d0567287e5b0d79261e5dfabd7a" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.3, this method is not called by the &lt;code&gt;TableColumn&lt;/code&gt; constructor. Previously this method was used by the &lt;code&gt;TableColumn&lt;/code&gt; to create a default header renderer. As of Java 2 platform v1.3, the default header renderer is &lt;code&gt;null&lt;/code&gt;. &lt;code&gt;JTableHeader&lt;/code&gt; now provides its own shared default renderer, just as the &lt;code&gt;JTable&lt;/code&gt; does for its cell renderers.</source>
          <target state="translated">Java 2プラットフォームv1.3以降、このメソッドは &lt;code&gt;TableColumn&lt;/code&gt; コンストラクターによって呼び出されません。以前は、このメソッドは &lt;code&gt;TableColumn&lt;/code&gt; によってデフォルトのヘッダーレンダラーを作成するために使用されていました。Java 2プラットフォームv1.3以降、デフォルトのヘッダーレンダラーは &lt;code&gt;null&lt;/code&gt; です。 &lt;code&gt;JTableHeader&lt;/code&gt; は、 &lt;code&gt;JTable&lt;/code&gt; がセルレンダラーに対して提供するのと同様に、独自の共有デフォルトレンダラーを提供するようになりました。</target>
        </trans-unit>
        <trans-unit id="b2c309c6a1cc9124e74b7a70b0db4bd233c4084f" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.3, use insertAtBoundary</source>
          <target state="translated">Java 2 プラットフォーム v1.3 では、insertAtBoundary を使用します。</target>
        </trans-unit>
        <trans-unit id="f558fb4e4dcb44f1b81651ab72371a94b8765aa2" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.3.</source>
          <target state="translated">Java 2プラットフォームv1.3の時点で。</target>
        </trans-unit>
        <trans-unit id="735a6ad54461a9f02de15d5117ca1eb4075969c7" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.4 this field should no longer be used.</source>
          <target state="translated">Java 2 platform v1.4では、このフィールドは使用されなくなりました。</target>
        </trans-unit>
        <trans-unit id="d815d3e90ca1134ef75abb4709d250a96d17e2bd" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.4 this field should no longer be used. If you wish to provide similar behavior you should directly override &lt;code&gt;isCellEditable&lt;/code&gt;.</source>
          <target state="translated">Java 2プラットフォームv1.4以降、このフィールドは使用されなくなりました。同様の動作を提供したい場合は、 &lt;code&gt;isCellEditable&lt;/code&gt; を直接オーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="49027db9f5967ad1562bb9a36b6814d52ef1117b" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.4 this method is no longer used.</source>
          <target state="translated">Java 2 プラットフォーム v1.4 以降、このメソッドは使用されなくなりました。</target>
        </trans-unit>
        <trans-unit id="f93f409ef33fdf20da65d3cb02bc77de2cee7312" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.4 this method is no longer used. Do not call or override. All the functionality of this method is in the MetalPropertyChangeListener.</source>
          <target state="translated">Java 2 プラットフォーム v1.4 では、このメソッドは使用されなくなりました。呼び出したり、オーバーライドしたりしないでください。このメソッドの機能はすべて MetalPropertyChangeListener にあります。</target>
        </trans-unit>
        <trans-unit id="30b8a54b505f53e840a5851311f9de529716d5fd" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.4 this previously undocumented field is no longer used.</source>
          <target state="translated">Java 2 platform v1.4では、これまで文書化されていなかったこのフィールドは使用されなくなりました。</target>
        </trans-unit>
        <trans-unit id="fe120a3e2fd7c53de2769a4a97b57f050d3c5e44" translate="yes" xml:space="preserve">
          <source>As of Java 2 platform v1.4.</source>
          <target state="translated">Java 2プラットフォームv1.4の時点で。</target>
        </trans-unit>
        <trans-unit id="870a114d631932f5053bcd585f88c526fe19c48d" translate="yes" xml:space="preserve">
          <source>As of Java SE 10, the first element of a version number is not the major-release number but the feature-release counter, incremented for every time-based release.</source>
          <target state="translated">Java SE 10では、バージョン番号の最初の要素はメジャーリリース番号ではなく、機能リリースカウンタであり、時間ベースのリリースごとにインクリメントされます。</target>
        </trans-unit>
        <trans-unit id="874abecafeb22a591175e878cc75476187c2f796" translate="yes" xml:space="preserve">
          <source>As of Java SE 10, the first element of a version number is not the major-release number but the feature-release counter, incremented for every time-based release. Use the &lt;a href=&quot;#feature()&quot;&gt;&lt;code&gt;feature()&lt;/code&gt;&lt;/a&gt; method in preference to this method. For compatibility, this method returns the value of the &lt;a href=&quot;#FEATURE&quot;&gt;feature&lt;/a&gt; element.</source>
          <target state="translated">Java SE 10以降、バージョン番号の最初の要素はメジャーリリース番号ではなく、時間ベースのリリースごとに増分される機能リリースカウンターです。このメソッドよりも&lt;a href=&quot;#feature()&quot;&gt; &lt;code&gt;feature()&lt;/code&gt; &lt;/a&gt;メソッドを使用してください。互換性のために、このメソッドは&lt;a href=&quot;#FEATURE&quot;&gt;機能&lt;/a&gt;要素の値を返します。</target>
        </trans-unit>
        <trans-unit id="47f76336237e73dac48d90e785a1aab35096db06" translate="yes" xml:space="preserve">
          <source>As of Java SE 10, the second element of a version number is not the minor-release number but the interim-release counter, incremented for every interim release.</source>
          <target state="translated">Java SE 10 では、バージョン番号の 2 番目の要素はマイナーリリース番号ではなく、中間リリースのたびにインクリメントされる中間リリースカウンタです。</target>
        </trans-unit>
        <trans-unit id="176fdd148cb9e2b9277b063452610ddcedd572c9" translate="yes" xml:space="preserve">
          <source>As of Java SE 10, the second element of a version number is not the minor-release number but the interim-release counter, incremented for every interim release. Use the &lt;a href=&quot;#interim()&quot;&gt;&lt;code&gt;interim()&lt;/code&gt;&lt;/a&gt; method in preference to this method. For compatibility, this method returns the value of the &lt;a href=&quot;#INTERIM&quot;&gt;interim&lt;/a&gt; element, or zero if it is absent.</source>
          <target state="translated">Java SE 10の時点では、バージョン番号の2番目の要素はマイナーリリース番号ではなく、暫定リリースカウンターであり、暫定リリースごとに増分されます。このメソッドよりも&lt;a href=&quot;#interim()&quot;&gt; &lt;code&gt;interim()&lt;/code&gt; &lt;/a&gt;メソッドを使用してください。互換性のために、このメソッドは&lt;a href=&quot;#INTERIM&quot;&gt;暫定&lt;/a&gt;要素の値を返します。存在しない場合はゼロを返します。</target>
        </trans-unit>
        <trans-unit id="8b3cacc889816b258b9dcc03d911f2c4c6bbde75" translate="yes" xml:space="preserve">
          <source>As of Java SE 10, the third element of a version number is not the security level but the update-release counter, incremented for every update release.</source>
          <target state="translated">Java SE 10では、バージョン番号の3番目の要素は、セキュリティレベルではなく、更新リリースカウンタで、更新リリースごとにインクリメントされます。</target>
        </trans-unit>
        <trans-unit id="d1f1ee60f2179dbf4962eac5d9c2e50440806861" translate="yes" xml:space="preserve">
          <source>As of Java SE 10, the third element of a version number is not the security level but the update-release counter, incremented for every update release. Use the &lt;a href=&quot;#update()&quot;&gt;&lt;code&gt;update()&lt;/code&gt;&lt;/a&gt; method in preference to this method. For compatibility, this method returns the value of the &lt;a href=&quot;#UPDATE&quot;&gt;update&lt;/a&gt; element, or zero if it is absent.</source>
          <target state="translated">Java SE 10の時点で、バージョン番号の3番目の要素はセキュリティレベルではなく、更新リリースごとに増分される更新リリースカウンタです。このメソッドよりも&lt;a href=&quot;#update()&quot;&gt; &lt;code&gt;update()&lt;/code&gt; &lt;/a&gt;メソッドを使用してください。互換性のために、このメソッドは&lt;a href=&quot;#UPDATE&quot;&gt;update&lt;/a&gt;要素の値を返します。存在しない場合はゼロを返します。</target>
        </trans-unit>
        <trans-unit id="ac1cb05e209367a48dc3ac3c99c7cd48c59a1cd6" translate="yes" xml:space="preserve">
          <source>As of Swing version 1.0.2, replaced by &lt;code&gt;new JScrollPane(aTable)&lt;/code&gt;.</source>
          <target state="translated">Swingバージョン1.0.2以降、 &lt;code&gt;new JScrollPane(aTable)&lt;/code&gt; 置き換えられました。</target>
        </trans-unit>
        <trans-unit id="82f1434454dc1cb820590dfba19b66529399bc23" translate="yes" xml:space="preserve">
          <source>As of Swing version 1.0.3 replaced by &lt;code&gt;getJMenuBar()&lt;/code&gt;.</source>
          <target state="translated">Swingバージョン1.0.3以降、 &lt;code&gt;getJMenuBar()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="4be97f451fe3d46789afa2901709b6807a24ca92" translate="yes" xml:space="preserve">
          <source>As of Swing version 1.0.3 replaced by &lt;code&gt;setJMenuBar(JMenuBar m)&lt;/code&gt;.</source>
          <target state="translated">Swingバージョン1.0.3以降、 &lt;code&gt;setJMenuBar(JMenuBar m)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="c8b21dac3ca5bd856005d0c63195cfaaf65226e2" translate="yes" xml:space="preserve">
          <source>As of Swing version 1.0.3 replaced by &lt;code&gt;setJMenuBar(JMenuBar menu)&lt;/code&gt;.</source>
          <target state="translated">Swingバージョン1.0.3以降、 &lt;code&gt;setJMenuBar(JMenuBar menu)&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="87c6f4504cb250fc2c92ec36cede0d01750fa2c2" translate="yes" xml:space="preserve">
          <source>As of Swing version 1.0.3, replaced by &lt;code&gt;doLayout()&lt;/code&gt;.</source>
          <target state="translated">Swingバージョン1.0.3以降、 &lt;code&gt;doLayout()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="4bd402d4b47296fb14a4c642d98724984636191e" translate="yes" xml:space="preserve">
          <source>As of Swing version 1.0.3, replaced by &lt;code&gt;getJMenuBar()&lt;/code&gt;.</source>
          <target state="translated">Swingバージョン1.0.3以降、 &lt;code&gt;getJMenuBar()&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="e08c1998b3504c141072c04254f8fadb0f566316" translate="yes" xml:space="preserve">
          <source>As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The &quot;&lt;code&gt;IOException&lt;/code&gt; that terminated the print job&quot; that is provided at construction time and accessed via the &lt;a href=&quot;#getIOException()&quot;&gt;&lt;code&gt;getIOException()&lt;/code&gt;&lt;/a&gt; method is now known as the</source>
          <target state="translated">リリース1.4の時点で、この例外は、汎用の例外連鎖メカニズムに準拠するように改良されています。「 &lt;code&gt;IOException&lt;/code&gt; を構築時に提供され介してアクセスされた印刷ジョブ終了」&lt;a href=&quot;#getIOException()&quot;&gt; &lt;code&gt;getIOException()&lt;/code&gt; &lt;/a&gt;メソッドは、現在として知られています</target>
        </trans-unit>
        <trans-unit id="3537b28ccb55746c134247c452faa27ade7075c7" translate="yes" xml:space="preserve">
          <source>As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The &quot;detail exception&quot; that may be provided at construction time and accessed via the public &lt;a href=&quot;#detail&quot;&gt;&lt;code&gt;detail&lt;/code&gt;&lt;/a&gt; field is now known as the</source>
          <target state="translated">リリース1.4の時点で、この例外は、汎用の例外連鎖メカニズムに準拠するように改良されています。建設時に提供され、パブリック&lt;a href=&quot;#detail&quot;&gt; &lt;code&gt;detail&lt;/code&gt; &lt;/a&gt;フィールドを介してアクセスされる可能性のある「詳細例外」は、現在、</target>
        </trans-unit>
        <trans-unit id="38a41bfa4140a87f71793039399828eac684be96" translate="yes" xml:space="preserve">
          <source>As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The &quot;exception causing the abort&quot; that is provided at construction time and accessed via the public &lt;a href=&quot;#detail&quot;&gt;&lt;code&gt;detail&lt;/code&gt;&lt;/a&gt; field is now known as the</source>
          <target state="translated">リリース1.4の時点で、この例外は、汎用の例外連鎖メカニズムに準拠するように改良されています。建設時に提供され、パブリック&lt;a href=&quot;#detail&quot;&gt; &lt;code&gt;detail&lt;/code&gt; &lt;/a&gt;フィールドを介してアクセスされる「アボートを引き起こす例外」は、現在、</target>
        </trans-unit>
        <trans-unit id="155920b436a733307bf2f132ae7bdebc97ee45ce" translate="yes" xml:space="preserve">
          <source>As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The &quot;exception causing the abort&quot; that is provided at construction time and accessed via the public &lt;a href=&quot;writeabortedexception#detail&quot;&gt;&lt;code&gt;detail&lt;/code&gt;&lt;/a&gt; field is now known as the</source>
          <target state="translated">リリース1.4以降、この例外は汎用の例外チェーンメカ​​ニズムに準拠するように改良されました。建設時に提供され、公開&lt;a href=&quot;writeabortedexception#detail&quot;&gt; &lt;code&gt;detail&lt;/code&gt; &lt;/a&gt;フィールドを介してアクセスされる「異常終了を引き起こす例外」は、現在、</target>
        </trans-unit>
        <trans-unit id="05c4806cbf6997bf4a2b024b7563e447c395b349" translate="yes" xml:space="preserve">
          <source>As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The &quot;exception thrown by the privileged computation&quot; that is provided at construction time and accessed via the &lt;a href=&quot;#getException()&quot;&gt;&lt;code&gt;getException()&lt;/code&gt;&lt;/a&gt; method is now known as the</source>
          <target state="translated">リリース1.4の時点で、この例外は、汎用の例外連鎖メカニズムに準拠するように改良されています。構築時に提供され、&lt;a href=&quot;#getException()&quot;&gt; &lt;code&gt;getException()&lt;/code&gt; &lt;/a&gt;メソッドを介してアクセスされる「特権計算によってスローされる例外」は、現在、</target>
        </trans-unit>
        <trans-unit id="8495fe7de406e54be9a9a6704464127b904b17f9" translate="yes" xml:space="preserve">
          <source>As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The &quot;exception thrown by the privileged computation&quot; that is provided at construction time and accessed via the &lt;a href=&quot;privilegedactionexception#getException--&quot;&gt;&lt;code&gt;getException()&lt;/code&gt;&lt;/a&gt; method is now known as the</source>
          <target state="translated">リリース1.4以降、この例外は汎用の例外チェーンメカ​​ニズムに準拠するように改良されました。構築時に提供され、&lt;a href=&quot;privilegedactionexception#getException--&quot;&gt; &lt;code&gt;getException()&lt;/code&gt; &lt;/a&gt;メソッドを介してアクセスされる「特権計算によってスローされる例外」は、現在、</target>
        </trans-unit>
        <trans-unit id="9eb20d677973b4d444992bcfeb741c46213ad5b8" translate="yes" xml:space="preserve">
          <source>As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The &quot;nested exception&quot; that may be provided at construction time and accessed via the public &lt;a href=&quot;#detail&quot;&gt;&lt;code&gt;detail&lt;/code&gt;&lt;/a&gt; field is now known as the</source>
          <target state="translated">リリース1.4の時点で、この例外は、汎用の例外連鎖メカニズムに準拠するように改良されています。建設時に提供され、パブリック&lt;a href=&quot;#detail&quot;&gt; &lt;code&gt;detail&lt;/code&gt; &lt;/a&gt;フィールドを介してアクセスされる可能性のある「ネストされた例外」は、現在、</target>
        </trans-unit>
        <trans-unit id="5fb3da4dd2c838061870fbe2ad2012fc8cfe2ab8" translate="yes" xml:space="preserve">
          <source>As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The &quot;optional exception that was raised while loading the class&quot; that may be provided at construction time and accessed via the &lt;a href=&quot;#getException()&quot;&gt;&lt;code&gt;getException()&lt;/code&gt;&lt;/a&gt; method is now known as the</source>
          <target state="translated">リリース1.4の時点で、この例外は、汎用の例外連鎖メカニズムに準拠するように改良されています。構築時に提供され、&lt;a href=&quot;#getException()&quot;&gt; &lt;code&gt;getException()&lt;/code&gt; &lt;/a&gt;メソッドを介してアクセスされる可能性のある「クラスのロード中に発生したオプションの例外」は、現在、</target>
        </trans-unit>
        <trans-unit id="0e80c8416bb52dec10dec7b4bec14bd1c9044e25" translate="yes" xml:space="preserve">
          <source>As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The &quot;optional exception that was raised while loading the class&quot; that may be provided at construction time and accessed via the &lt;a href=&quot;classnotfoundexception#getException--&quot;&gt;&lt;code&gt;getException()&lt;/code&gt;&lt;/a&gt; method is now known as the</source>
          <target state="translated">リリース1.4以降、この例外は汎用の例外チェーンメカ​​ニズムに準拠するように改良されました。構築時に提供され、&lt;a href=&quot;classnotfoundexception#getException--&quot;&gt; &lt;code&gt;getException()&lt;/code&gt; &lt;/a&gt;メソッドを介してアクセスされる「クラスのロード中に発生したオプションの例外」は、現在、</target>
        </trans-unit>
        <trans-unit id="98b22717e520f503eeca57b7a0cdf6582e3d5b21" translate="yes" xml:space="preserve">
          <source>As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The &quot;saved throwable object&quot; that may be provided at construction time and accessed via the &lt;a href=&quot;#getException()&quot;&gt;&lt;code&gt;getException()&lt;/code&gt;&lt;/a&gt; method is now known as the</source>
          <target state="translated">リリース1.4の時点で、この例外は、汎用の例外連鎖メカニズムに準拠するように改良されています。構築時に提供され、&lt;a href=&quot;#getException()&quot;&gt; &lt;code&gt;getException()&lt;/code&gt; &lt;/a&gt;メソッドを介してアクセスされる「保存されたスロー可能オブジェクト」は、現在、</target>
        </trans-unit>
        <trans-unit id="a03b661cd4f78001e9078093a2c0b7edd9e59ee0" translate="yes" xml:space="preserve">
          <source>As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The &quot;saved throwable object&quot; that may be provided at construction time and accessed via the &lt;a href=&quot;exceptionininitializererror#getException--&quot;&gt;&lt;code&gt;getException()&lt;/code&gt;&lt;/a&gt; method is now known as the</source>
          <target state="translated">リリース1.4以降、この例外は汎用の例外チェーンメカ​​ニズムに準拠するように改良されました。構築時に提供され、&lt;a href=&quot;exceptionininitializererror#getException--&quot;&gt; &lt;code&gt;getException()&lt;/code&gt; &lt;/a&gt;メソッドを介してアクセスできる「保存されたスロー可能なオブジェクト」は、現在、</target>
        </trans-unit>
        <trans-unit id="5c00973f94dd87b5972e337104c8c200c571c568" translate="yes" xml:space="preserve">
          <source>As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The &quot;target exception&quot; that is provided at construction time and accessed via the &lt;a href=&quot;#getTargetException()&quot;&gt;&lt;code&gt;getTargetException()&lt;/code&gt;&lt;/a&gt; method is now known as the</source>
          <target state="translated">リリース1.4の時点で、この例外は、汎用の例外連鎖メカニズムに準拠するように改良されています。構築時に提供され、&lt;a href=&quot;#getTargetException()&quot;&gt; &lt;code&gt;getTargetException()&lt;/code&gt; &lt;/a&gt;メソッドを介してアクセスされる「ターゲット例外」は、現在、</target>
        </trans-unit>
        <trans-unit id="a5f4d3eca6416349f41ab5a1a6b1e77c4d437ad4" translate="yes" xml:space="preserve">
          <source>As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The &quot;target exception&quot; that is provided at construction time and accessed via the &lt;a href=&quot;invocationtargetexception#getTargetException--&quot;&gt;&lt;code&gt;getTargetException()&lt;/code&gt;&lt;/a&gt; method is now known as the</source>
          <target state="translated">リリース1.4以降、この例外は汎用の例外チェーンメカ​​ニズムに準拠するように改良されました。構築時に提供され、&lt;a href=&quot;invocationtargetexception#getTargetException--&quot;&gt; &lt;code&gt;getTargetException()&lt;/code&gt; &lt;/a&gt;メソッドを介してアクセスされる「ターゲット例外」は、</target>
        </trans-unit>
        <trans-unit id="80eb32895fea620be0b2747213fc17d59e21b26b" translate="yes" xml:space="preserve">
          <source>As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The &quot;undeclared checked exception that was thrown by the invocation handler&quot; that may be provided at construction time and accessed via the &lt;a href=&quot;#getUndeclaredThrowable()&quot;&gt;&lt;code&gt;getUndeclaredThrowable()&lt;/code&gt;&lt;/a&gt; method is now known as the</source>
          <target state="translated">リリース1.4の時点で、この例外は、汎用の例外連鎖メカニズムに準拠するように改良されています。構築時に提供され、&lt;a href=&quot;#getUndeclaredThrowable()&quot;&gt; &lt;code&gt;getUndeclaredThrowable()&lt;/code&gt; &lt;/a&gt;メソッドを介してアクセスされる可能性のある「呼び出しハンドラーによってスローされた宣言されていないチェック済み例外」は、現在、</target>
        </trans-unit>
        <trans-unit id="745046a23cf80e295270cdcaa70c0f899787c482" translate="yes" xml:space="preserve">
          <source>As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The &quot;undeclared checked exception that was thrown by the invocation handler&quot; that may be provided at construction time and accessed via the &lt;a href=&quot;undeclaredthrowableexception#getUndeclaredThrowable--&quot;&gt;&lt;code&gt;getUndeclaredThrowable()&lt;/code&gt;&lt;/a&gt; method is now known as the</source>
          <target state="translated">リリース1.4以降、この例外は汎用の例外チェーンメカ​​ニズムに準拠するように改良されました。構築時に提供され、&lt;a href=&quot;undeclaredthrowableexception#getUndeclaredThrowable--&quot;&gt; &lt;code&gt;getUndeclaredThrowable()&lt;/code&gt; &lt;/a&gt;メソッドを介してアクセスできる「呼び出しハンドラによってスローされた、宣言されていないチェック済み例外」は、現在、</target>
        </trans-unit>
        <trans-unit id="ec9f2b3eb7bda6088852bcb9696d1f7b65bc5186" translate="yes" xml:space="preserve">
          <source>As of release 1.4, this exception has been retrofitted to conform to the general purpose exception-chaining mechanism. The &quot;wrapped remote exception&quot; that may be provided at construction time and accessed via the public &lt;a href=&quot;#detail&quot;&gt;&lt;code&gt;detail&lt;/code&gt;&lt;/a&gt; field is now known as the</source>
          <target state="translated">リリース1.4の時点で、この例外は、汎用の例外連鎖メカニズムに準拠するように改良されています。構築時に提供され、パブリック&lt;a href=&quot;#detail&quot;&gt; &lt;code&gt;detail&lt;/code&gt; &lt;/a&gt;フィールドを介してアクセスされる可能性のある「ラップされたリモート例外」は、現在、</target>
        </trans-unit>
        <trans-unit id="08abfb7f42903e6ce5dc42817d72e81a7e3128b7" translate="yes" xml:space="preserve">
          <source>As of release 7, the platform supports the notion of</source>
          <target state="translated">リリース7では、プラットフォームは</target>
        </trans-unit>
        <trans-unit id="d199937d4d0e643598ee602346c6a171ef560fe1" translate="yes" xml:space="preserve">
          <source>As of release JDK 5, this class has been supplemented with an equivalent class designed for use by a single thread, &lt;a href=&quot;stringbuilder&quot;&gt;&lt;code&gt;StringBuilder&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;StringBuilder&lt;/code&gt; class should generally be used in preference to this one, as it supports all of the same operations but it is faster, as it performs no synchronization.</source>
          <target state="translated">リリースJDK 5の時点で、このクラスには、シングルスレッドで使用するために設計された同等のクラスである&lt;a href=&quot;stringbuilder&quot;&gt; &lt;code&gt;StringBuilder&lt;/code&gt; &lt;/a&gt;が追加されています。 &lt;code&gt;StringBuilder&lt;/code&gt; 、同じ操作の全てをサポートしますが、それは同期を実行しないように、それは、高速であるように、クラスは、一般的に、これに優先して使用すべきです。</target>
        </trans-unit>
        <trans-unit id="2e6bcd78086d103a664fb31d032ae03a98131ac5" translate="yes" xml:space="preserve">
          <source>As of the Java 2 platform v1.2, this class was retrofitted to implement the &lt;a href=&quot;list&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; interface, making it a member of the &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/collections/index.html&quot;&gt; Java Collections Framework&lt;/a&gt;. Unlike the new collection implementations, &lt;code&gt;Vector&lt;/code&gt; is synchronized. If a thread-safe implementation is not needed, it is recommended to use &lt;a href=&quot;arraylist&quot;&gt;&lt;code&gt;ArrayList&lt;/code&gt;&lt;/a&gt; in place of &lt;code&gt;Vector&lt;/code&gt;.</source>
          <target state="translated">Java 2プラットフォームv1.2以降、このクラスは&lt;a href=&quot;list&quot;&gt; &lt;code&gt;List&lt;/code&gt; &lt;/a&gt;インターフェースを実装するために改良され、&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/collections/index.html&quot;&gt;Java Collections Frameworkの&lt;/a&gt;メンバーになりました。新しいコレクションの実装とは異なり、 &lt;code&gt;Vector&lt;/code&gt; は同期されます。スレッドセーフな実装が必要ない場合は、 &lt;code&gt;Vector&lt;/code&gt; の代わりに&lt;a href=&quot;arraylist&quot;&gt; &lt;code&gt;ArrayList&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f9bbe3fdbcf9e9f98b620f55c3ee04603691aa08" translate="yes" xml:space="preserve">
          <source>As of the Java 2 platform v1.2, this class was retrofitted to implement the &lt;a href=&quot;list&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; interface, making it a member of the &lt;a href=&quot;package-summary#CollectionsFramework&quot;&gt; Java Collections Framework&lt;/a&gt;. Unlike the new collection implementations, &lt;code&gt;Vector&lt;/code&gt; is synchronized. If a thread-safe implementation is not needed, it is recommended to use &lt;a href=&quot;arraylist&quot;&gt;&lt;code&gt;ArrayList&lt;/code&gt;&lt;/a&gt; in place of &lt;code&gt;Vector&lt;/code&gt;.</source>
          <target state="translated">Java 2プラットフォームv1.2の時点で、このクラスは&lt;a href=&quot;list&quot;&gt; &lt;code&gt;List&lt;/code&gt; &lt;/a&gt;インターフェイスを実装するように改良され、&lt;a href=&quot;package-summary#CollectionsFramework&quot;&gt;Javaコレクションフレームワークの&lt;/a&gt;メンバーになりました。新しいコレクションの実装とは異なり、 &lt;code&gt;Vector&lt;/code&gt; は同期されます。スレッドセーフな実装が必要ない場合は、 &lt;code&gt;Vector&lt;/code&gt; の代わりに&lt;a href=&quot;arraylist&quot;&gt; &lt;code&gt;ArrayList&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="fca7f268bf7fdde33cb8e4ec038344234d57ae07" translate="yes" xml:space="preserve">
          <source>As of the Java 2 platform v1.2, this class was retrofitted to implement the &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; interface, making it a member of the &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/collections/index.html&quot;&gt; Java Collections Framework&lt;/a&gt;. Unlike the new collection implementations, &lt;code&gt;Hashtable&lt;/code&gt; is synchronized. If a thread-safe implementation is not needed, it is recommended to use &lt;a href=&quot;hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt; in place of &lt;code&gt;Hashtable&lt;/code&gt;. If a thread-safe highly-concurrent implementation is desired, then it is recommended to use &lt;a href=&quot;concurrent/concurrenthashmap&quot;&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;&lt;/a&gt; in place of &lt;code&gt;Hashtable&lt;/code&gt;.</source>
          <target state="translated">Java 2プラットフォームv1.2以降、このクラスは&lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;インターフェースを実装するために改良され、&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/collections/index.html&quot;&gt;Java Collections Frameworkの&lt;/a&gt;メンバーになりました。新しいコレクションの実装とは異なり、 &lt;code&gt;Hashtable&lt;/code&gt; は同期されます。スレッドセーフな実装が必要ない場合は、 &lt;code&gt;Hashtable&lt;/code&gt; の代わりに&lt;a href=&quot;hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。スレッドセーフの高度な同時実装が必要な場合は、 &lt;code&gt;Hashtable&lt;/code&gt; の代わりに&lt;a href=&quot;concurrent/concurrenthashmap&quot;&gt; &lt;code&gt;ConcurrentHashMap&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="fa0e1843fcf3cfc5e3b98851e0ca2ee8a7a7beac" translate="yes" xml:space="preserve">
          <source>As of the Java 2 platform v1.2, this class was retrofitted to implement the &lt;a href=&quot;map&quot;&gt;&lt;code&gt;Map&lt;/code&gt;&lt;/a&gt; interface, making it a member of the &lt;a href=&quot;package-summary#CollectionsFramework&quot;&gt; Java Collections Framework&lt;/a&gt;. Unlike the new collection implementations, &lt;code&gt;Hashtable&lt;/code&gt; is synchronized. If a thread-safe implementation is not needed, it is recommended to use &lt;a href=&quot;hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt; in place of &lt;code&gt;Hashtable&lt;/code&gt;. If a thread-safe highly-concurrent implementation is desired, then it is recommended to use &lt;a href=&quot;concurrent/concurrenthashmap&quot;&gt;&lt;code&gt;ConcurrentHashMap&lt;/code&gt;&lt;/a&gt; in place of &lt;code&gt;Hashtable&lt;/code&gt;.</source>
          <target state="translated">Java 2プラットフォームv1.2の時点で、このクラスは&lt;a href=&quot;map&quot;&gt; &lt;code&gt;Map&lt;/code&gt; &lt;/a&gt;インターフェースを実装するように改良され、&lt;a href=&quot;package-summary#CollectionsFramework&quot;&gt;Javaコレクションフレームワークの&lt;/a&gt;メンバーになりました。新しいコレクションの実装とは異なり、 &lt;code&gt;Hashtable&lt;/code&gt; は同期されます。スレッドセーフな実装が必要ない場合は、 &lt;code&gt;Hashtable&lt;/code&gt; の代わりに&lt;a href=&quot;hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。スレッドセーフな高度な並行実装が必要な場合は、 &lt;code&gt;Hashtable&lt;/code&gt; の代わりに&lt;a href=&quot;concurrent/concurrenthashmap&quot;&gt; &lt;code&gt;ConcurrentHashMap&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="8c1dadb9a609742bac134bce7543bdcb4233e40d" translate="yes" xml:space="preserve">
          <source>As of v1.4, the &lt;code&gt;java.beans&lt;/code&gt; package provides support for &lt;em&gt;long-term persistence&lt;/em&gt; -- reading and writing a bean as a textual representation of its property values. The property values are treated as beans, and are recursively read or written to capture their publicly available state. This approach is suitable for long-term storage because it relies only on public API, rather than the likely-to-change private implementation.</source>
          <target state="translated">v1.4以降、 &lt;code&gt;java.beans&lt;/code&gt; パッケージは、&lt;em&gt;長期的な永続性の&lt;/em&gt;サポートを提供します。つまり、Beanをそのプロパティ値のテキスト表現として読み書きします。プロパティ値はBeanとして扱われ、公開されている状態を取得するために再帰的に読み書きされます。このアプローチは、変更される可能性のあるプライベート実装ではなく、パブリックAPIのみに依存しているため、長期ストレージに適しています。</target>
        </trans-unit>
        <trans-unit id="2fe88917a8774511a1f31627d32350cf0b1a85da" translate="yes" xml:space="preserve">
          <source>As part of its initialization, the &lt;code&gt;DriverManager&lt;/code&gt; class will attempt to load available JDBC drivers by using:</source>
          <target state="translated">初期化の一部として、 &lt;code&gt;DriverManager&lt;/code&gt; クラスは、以下を使用して使用可能なJDBCドライバーをロードしようとします。</target>
        </trans-unit>
        <trans-unit id="eeb69f99ce768e2368d58f91be9d9b4d2ac4e667" translate="yes" xml:space="preserve">
          <source>As part of its internal notification process, a &lt;code&gt;RowSet&lt;/code&gt; object creates an instance of &lt;code&gt;RowSetEvent&lt;/code&gt; and passes it to the listener. The listener can use this &lt;code&gt;RowSetEvent&lt;/code&gt; object to find out which rowset had the event.</source>
          <target state="translated">内部通知プロセスの一部として、 &lt;code&gt;RowSet&lt;/code&gt; オブジェクトは &lt;code&gt;RowSetEvent&lt;/code&gt; のインスタンスを作成し、それをリスナーに渡します。リスナーは、この &lt;code&gt;RowSetEvent&lt;/code&gt; オブジェクトを使用して、イベントが発生した行セットを見つけることができます。</target>
        </trans-unit>
        <trans-unit id="3cb3da4b4ff931e292c1804ac98488778ba3257c" translate="yes" xml:space="preserve">
          <source>As per the contract of the base &lt;code&gt;Image#getGraphics()&lt;/code&gt; method, this implementation will always throw &lt;code&gt;UnsupportedOperationException&lt;/code&gt; since only off-screen images can return a &lt;code&gt;Graphics&lt;/code&gt; object.</source>
          <target state="translated">基本の &lt;code&gt;Image#getGraphics()&lt;/code&gt; メソッドのコントラクトに従って、オフスクリーン画像のみが &lt;code&gt;Graphics&lt;/code&gt; オブジェクトを返すことができるため、この実装は常に &lt;code&gt;UnsupportedOperationException&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="9bd69e06d29fd180cdb41e0da6ff64991d991c7b" translate="yes" xml:space="preserve">
          <source>As previously mentioned, DefaultStyledDocument maintains an Element structure such that the root Element contains a child Element for each paragraph. In turn, each of these paragraph Elements contains an Element for each style of text in the paragraph. As an example, let's say you had a document containing one paragraph, and that this paragraph contained two styles, as shown in &lt;u&gt;Figure 8&lt;/u&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="3934207a533e24592d8c4d7a9d31ad79632324aa" translate="yes" xml:space="preserve">
          <source>As previously stated, this invokes &lt;code&gt;loadSystemColors&lt;/code&gt; with the supplied &lt;code&gt;table&lt;/code&gt; and &lt;code&gt;name-color&lt;/code&gt; pair array. The last argument to &lt;code&gt;loadSystemColors&lt;/code&gt; indicates whether the value of the field in &lt;code&gt;SystemColor&lt;/code&gt; should be used. This method passes the value of &lt;code&gt;
 isNativeLookAndFeel()&lt;/code&gt; as the last argument to &lt;code&gt;loadSystemColors&lt;/code&gt;.</source>
          <target state="translated">前に述べたように、これは提供された &lt;code&gt;table&lt;/code&gt; と &lt;code&gt;name-color&lt;/code&gt; ペアの配列を &lt;code&gt;loadSystemColors&lt;/code&gt; してloadSystemColorsを呼び出します。最後の引数 &lt;code&gt;loadSystemColors&lt;/code&gt; のは、フィールドの値があるかどうかを示す &lt;code&gt;SystemColor&lt;/code&gt; とを使用する必要があります。このメソッドは、 &lt;code&gt; isNativeLookAndFeel()&lt;/code&gt; の値を最後の引数として &lt;code&gt;loadSystemColors&lt;/code&gt; に渡します。</target>
        </trans-unit>
        <trans-unit id="f37d49d91e67aab15a9f7a227fc3a78be4eb9abd" translate="yes" xml:space="preserve">
          <source>As service binding involves resolution then it may fail with &lt;code&gt;
 FindException&lt;/code&gt; or &lt;code&gt;ResolutionException&lt;/code&gt; for exactly the same reasons specified in &lt;code&gt;resolve&lt;/code&gt;.</source>
          <target state="translated">サービスバインディングには解決が含まれる &lt;code&gt;resolve&lt;/code&gt; 、resolveで指定されたのとまったく同じ理由で &lt;code&gt; FindException&lt;/code&gt; または &lt;code&gt;ResolutionException&lt;/code&gt; で失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="7aafc293e257030347fd4b78d6be1bc7cd7cacca" translate="yes" xml:space="preserve">
          <source>As shown in &lt;a href=&quot;#figure1&quot;&gt;figure 1&lt;/a&gt;, if &lt;b&gt;D&lt;/b&gt; was just added, the index of the next edit will be 4. Invoking &lt;code&gt;undo&lt;/code&gt; results in invoking &lt;code&gt;undo&lt;/code&gt; on &lt;b&gt;D&lt;/b&gt; and setting the index of the next edit to 3 (edit</source>
          <target state="translated">&lt;a href=&quot;#figure1&quot;&gt;図1&lt;/a&gt;に示すように、&lt;b&gt;D&lt;/b&gt;が追加されたばかりの場合、次の編集のインデックスは4になります。 &lt;code&gt;undo&lt;/code&gt; を呼び出すと、&lt;b&gt;D&lt;/b&gt;で &lt;code&gt;undo&lt;/code&gt; が呼び出され、次の編集のインデックスが3に設定されます（編集&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="74de9815fea9b7360931636613219dd6f8de6ac1" translate="yes" xml:space="preserve">
          <source>As shown, although the date objects are in different calendar systems, represented by different &lt;code&gt;Chronology&lt;/code&gt; instances, both can be queried using the same constant on &lt;code&gt;ChronoField&lt;/code&gt;. For a full discussion of the implications of this, see &lt;a href=&quot;chronolocaldate&quot;&gt;&lt;code&gt;ChronoLocalDate&lt;/code&gt;&lt;/a&gt;. In general, the advice is to use the known ISO-based &lt;code&gt;LocalDate&lt;/code&gt;, rather than &lt;code&gt;ChronoLocalDate&lt;/code&gt;.</source>
          <target state="translated">示されているように、日付オブジェクトは異なるカレンダーシステムにあり、異なる &lt;code&gt;Chronology&lt;/code&gt; インスタンスで表されますが、どちらも &lt;code&gt;ChronoField&lt;/code&gt; で同じ定数を使用してクエリできます。この影響の詳細については、&lt;a href=&quot;chronolocaldate&quot;&gt; &lt;code&gt;ChronoLocalDate&lt;/code&gt; を&lt;/a&gt;参照してください。一般的には、アドバイスは知られているISOベースを使用することである &lt;code&gt;LocalDate&lt;/code&gt; ではなく、 &lt;code&gt;ChronoLocalDate&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="18d7e1176138c02170e7e0f9731e4b0101ef7e9d" translate="yes" xml:space="preserve">
          <source>As shown, there can be two different sets of request controls associated with a context: connection request controls and context request controls. This is required for those applications needing to send critical controls that might not be applicable to both the context operation and any implicit LDAP &quot;bind&quot; operation. A typical user program would do the following:</source>
          <target state="translated">示されているように、コンテキストには、接続要求コントロールとコンテキスト要求コントロールの 2 つの異なる要求コントロールのセットがあります。これは、コンテキスト操作と暗黙のLDAP &quot;バインド &quot;操作の両方には適用されないかもしれない重要なコントロールを送信する必要があるアプリケーションのために必要です。典型的なユーザープログラムは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="2144436e183058db41c722ad6e7b3a6a91de6eae" translate="yes" xml:space="preserve">
          <source>As specified in &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/doc-files/FocusSpec.html&quot;&gt;Focus Specification&lt;/a&gt; key events are dispatched to the focus owner by default.</source>
          <target state="translated">&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/doc-files/FocusSpec.html&quot;&gt;フォーカス仕様で&lt;/a&gt;指定されているように、キーイベントはデフォルトでフォーカス所有者にディスパッチされます。</target>
        </trans-unit>
        <trans-unit id="7d4d5ed881a3035f2233eab717eb355501a40321" translate="yes" xml:space="preserve">
          <source>As specified in &lt;a href=&quot;https://docs.oracle.com/en/java/javase/15/docs/api/java.desktop/java/awt/doc-files/FocusSpec.html&quot;&gt;Focus Specification&lt;/a&gt; key events are dispatched to the focus owner by default.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="1b352dd5bd27a81759ee7172972f80beb9d86cf6" translate="yes" xml:space="preserve">
          <source>As specified in &lt;a href=&quot;https://www.oasis-open.org/committees/download.php/14809/xml-catalogs.html#s.res.fail&quot;&gt; XML Catalogs, OASIS Standard V1.1&lt;/a&gt;, if a catalog entry is invalid, it is ignored. In case all entries are invalid, the resulting Catalog object will contain no Catalog elements. Any matching operation using the Catalog will return null.</source>
          <target state="translated">&lt;a href=&quot;https://www.oasis-open.org/committees/download.php/14809/xml-catalogs.html#s.res.fail&quot;&gt;XMLカタログ、OASIS標準V1.1&lt;/a&gt;で指定されているように、カタログエントリが無効な場合、それは無視されます。すべてのエントリが無効な場合、結果のカタログオブジェクトにはカタログ要素が含まれません。カタログを使用した一致操作はすべてnullを返します。</target>
        </trans-unit>
        <trans-unit id="038e4c2fbfc0101cd213203d9902254e7adab9f7" translate="yes" xml:space="preserve">
          <source>As specified in &lt;a href=&quot;https://www.oasis-open.org/committees/download.php/14809/xml-catalogs.html#s.res.fail&quot;&gt; XML Catalogs, OASIS Standard V1.1&lt;/a&gt;, if a catalog entry is invalid, it is ignored. In case all entries are invalid, the resulting CatalogResolver object will contain no valid catalog. Any resolution operation using the resolver therefore will return as no mapping is found. See &lt;a href=&quot;catalogresolver&quot;&gt;&lt;code&gt;CatalogResolver&lt;/code&gt;&lt;/a&gt; for the behavior when no mapping is found.</source>
          <target state="translated">&lt;a href=&quot;https://www.oasis-open.org/committees/download.php/14809/xml-catalogs.html#s.res.fail&quot;&gt;XMLカタログ、OASIS標準V1.1&lt;/a&gt;で指定されているように、カタログエントリが無効な場合、それは無視されます。すべてのエントリが無効な場合、結果のCatalogResolverオブジェクトには有効なカタログが含まれません。したがって、リゾルバーを使用した解決操作は、マッピングが見つからないために返されます。マッピングが見つからない場合の動作については、&lt;a href=&quot;catalogresolver&quot;&gt; &lt;code&gt;CatalogResolver&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="85eeef57e9253e237d872efe82c0b85684896fb6" translate="yes" xml:space="preserve">
          <source>As specified in [&lt;a href=&quot;http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407&quot;&gt;DOM Level 3 Core&lt;/a&gt;] , when a document is first made available via the LSParser:</source>
          <target state="translated">[ &lt;a href=&quot;http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407&quot;&gt;DOM Level 3 Core&lt;/a&gt; ]で指定されているように、ドキュメントがLSParserを介して最初に利用可能になったとき：</target>
        </trans-unit>
        <trans-unit id="7f6a12e78b527fd55e688ccd127353a907b451d6" translate="yes" xml:space="preserve">
          <source>As specified in [&lt;a href=&quot;https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407&quot;&gt;DOM Level 3 Core&lt;/a&gt;] , when a document is first made available via the LSParser:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="09a387e17a0102b28fda4804fcb6ca57e3626e02" translate="yes" xml:space="preserve">
          <source>As specified in section 5.4.3 of the</source>
          <target state="translated">の5.4.3項で規定されているように</target>
        </trans-unit>
        <trans-unit id="8a81f332a784752a04d5a460f5f8755e0973c1c2" translate="yes" xml:space="preserve">
          <source>As the &lt;code&gt;WatchService&lt;/code&gt; is intended to map directly on to the native file event notification facility (where available) then many of details on how registered objects are watched is highly implementation specific. When watching a directory for changes for example, and the directory is moved or renamed in the file system, there is no guarantee that the watch key will be cancelled and so the object returned by this method may no longer be a valid path to the directory.</source>
          <target state="translated">&lt;code&gt;WatchService&lt;/code&gt; がネイティブファイルイベント通知機能（使用可能）上に直接マッピングすることが意図され、次に登録されたオブジェクトが視聴されている方法の詳細の多くは、高度に実装固有です。たとえば、ディレクトリの変更を監視していて、ディレクトリがファイルシステムで移動または名前変更されている場合、監視キーがキャンセルされる保証はないため、このメソッドによって返されるオブジェクトは、ディレクトリへの有効なパスではなくなる可能性があります。 。</target>
        </trans-unit>
        <trans-unit id="12aa136826b865e2ff157db15e4d08b9665bb439" translate="yes" xml:space="preserve">
          <source>As the &lt;code&gt;nodeName&lt;/code&gt; attribute is used to derive the name which the node must be stored under, multiple nodes of certain types (those that have a &quot;special&quot; string value) cannot be stored as the names would clash. This is seen as preferable to allowing nodes to be aliased.</source>
          <target state="translated">&lt;code&gt;nodeName&lt;/code&gt; 属性はノードの下に格納されなければならない名前を導出するために使用される名前が衝突であろうように、特定のタイプ（「特別な」文字列値を有するもの）の複数のノードを格納することができません。これは、ノードのエイリアスを許可するよりも望ましいと見なされています。</target>
        </trans-unit>
        <trans-unit id="aa6c49cf03238266cf1714236a6543613f54d3f0" translate="yes" xml:space="preserve">
          <source>As the content is parsed by the underlying parser, methods of the given &lt;a href=&quot;../../../org/xml/sax/handlerbase&quot;&gt;&lt;code&gt;HandlerBase&lt;/code&gt;&lt;/a&gt; or the &lt;a href=&quot;../../../org/xml/sax/helpers/defaulthandler&quot;&gt;&lt;code&gt;DefaultHandler&lt;/code&gt;&lt;/a&gt; are called.</source>
          <target state="translated">コンテンツが基礎となるパーサーによって解析されると、指定された&lt;a href=&quot;../../../org/xml/sax/handlerbase&quot;&gt; &lt;code&gt;HandlerBase&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../../org/xml/sax/helpers/defaulthandler&quot;&gt; &lt;code&gt;DefaultHandler&lt;/code&gt; の&lt;/a&gt;メソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="2cdb2d73ddfa0ff1f2ef686f5ebf6bdbffa6affd" translate="yes" xml:space="preserve">
          <source>As the image is scaled up, it will look correspondingly blocky. As the image is scaled down, the colors for source pixels will be either used unmodified, or skipped entirely in the output representation.</source>
          <target state="translated">画像を拡大縮小すると、それに応じてブロック状に見えます。画像が縮小されると、ソースピクセルの色は変更されずに使用されるか、出力表現では完全にスキップされます。</target>
        </trans-unit>
        <trans-unit id="a702f8af3fa364bc3c009cfa9afe487d6f1c3e40" translate="yes" xml:space="preserve">
          <source>As the image is scaled up, there are no blocky edges and the interpolation should appear smoother and with better depictions of any edges in the original image than with &lt;code&gt;BILINEAR&lt;/code&gt;. As the image is scaled down, even more of the original color samples from the original image will have their color information carried through and represented.</source>
          <target state="translated">画像が拡大されると、ブロック状のエッジがなくなり、補間はより滑らかに表示され、 &lt;code&gt;BILINEAR&lt;/code&gt; よりも元の画像のエッジがより適切に描写されます。画像が縮小されると、元の画像からの元の色サンプルのさらに多くが、色情報を引き継いで表現されます。</target>
        </trans-unit>
        <trans-unit id="91d1aab307d7ddc986f82f00f0b850043842f4ea" translate="yes" xml:space="preserve">
          <source>As the image is scaled up, there are no blocky edges between the colors in the image as there are with &lt;a href=&quot;#VALUE_INTERPOLATION_NEAREST_NEIGHBOR&quot;&gt;&lt;code&gt;NEAREST_NEIGHBOR&lt;/code&gt;&lt;/a&gt;, but the blending may show some subtle discontinuities along the horizontal and vertical edges that line up with the samples caused by a sudden change in the slope of the interpolation from one side of a sample to the other. As the image is scaled down, more image pixels have their color samples represented in the resulting output since each output pixel receives color information from up to 4 image pixels.</source>
          <target state="translated">画像が拡大されると、&lt;a href=&quot;#VALUE_INTERPOLATION_NEAREST_NEIGHBOR&quot;&gt; &lt;code&gt;NEAREST_NEIGHBOR&lt;/code&gt; の&lt;/a&gt;場合のように画像の色の間にブロック状のエッジはありませんが、ブレンドでは、水平方向と垂直方向のエッジに沿って微妙な不連続性が見られ、サンプルの一方の側からもう一方の側への補間の傾き。画像が縮小されると、各出力ピクセルが最大4つの画像ピクセルから色情報を受け取るため、より多くの画像ピクセルのカラーサンプルが結果の出力に表示されます。</target>
        </trans-unit>
        <trans-unit id="61317a2ac613441bcf5d5afe40ea81f32fa6489b" translate="yes" xml:space="preserve">
          <source>As the inheritance hierarchy implies, a &lt;code&gt;PopupMenu&lt;/code&gt; can be used anywhere a &lt;code&gt;Menu&lt;/code&gt; can be used. However, if you use a &lt;code&gt;PopupMenu&lt;/code&gt; like a &lt;code&gt;Menu&lt;/code&gt; (e.g., you add it to a &lt;code&gt;MenuBar&lt;/code&gt;), then you &lt;b&gt;cannot&lt;/b&gt; call &lt;code&gt;show&lt;/code&gt; on that &lt;code&gt;PopupMenu&lt;/code&gt;.</source>
          <target state="translated">継承階層が示すように、 &lt;code&gt;PopupMenu&lt;/code&gt; は、 &lt;code&gt;Menu&lt;/code&gt; 使用できる場所であればどこでも使用できます。ただし、 &lt;code&gt;Menu&lt;/code&gt; ように &lt;code&gt;PopupMenu&lt;/code&gt; を使用する場合（たとえば、 &lt;code&gt;MenuBar&lt;/code&gt; に追加する場合）、その &lt;code&gt;PopupMenu&lt;/code&gt; で &lt;code&gt;show&lt;/code&gt; を呼び出すこと&lt;b&gt;はできません&lt;/b&gt;。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="7a4403430e032de99eacb96bb465f8eff3f54dd0" translate="yes" xml:space="preserve">
          <source>As the largest &lt;code&gt;double&lt;/code&gt; value less than &lt;code&gt;1.0&lt;/code&gt; is &lt;code&gt;Math.nextDown(1.0)&lt;/code&gt;, a value &lt;code&gt;x&lt;/code&gt; in the closed range &lt;code&gt;[x1,x2]&lt;/code&gt; where &lt;code&gt;x1&amp;lt;=x2&lt;/code&gt; may be defined by the statements</source>
          <target state="translated">最大のような &lt;code&gt;double&lt;/code&gt; 値未満 &lt;code&gt;1.0&lt;/code&gt; である &lt;code&gt;Math.nextDown(1.0)&lt;/code&gt; 、値 &lt;code&gt;x&lt;/code&gt; 閉じた範囲で &lt;code&gt;[x1,x2]&lt;/code&gt; &lt;code&gt;x1&amp;lt;=x2&lt;/code&gt; 文で定義することができます</target>
        </trans-unit>
        <trans-unit id="10db4757a6b843534723bc0bbcb82eb46a835d72" translate="yes" xml:space="preserve">
          <source>As the monitor attributes may change at runtime, a check is performed before each observation. If a monitor attribute has become invalid, a monitor setting exception is thrown.</source>
          <target state="translated">実行時にモニタ属性が変更される可能性があるため、各観測の前にチェックを行います。モニター属性が無効になった場合は、モニター設定の例外が発生します。</target>
        </trans-unit>
        <trans-unit id="3ac8e4fde6dec6335496b355fcdd102b05472c6c" translate="yes" xml:space="preserve">
          <source>As the new data is inserted into the document, at least one mutation event is fired per new immediate child or sibling of the context node.</source>
          <target state="translated">新しいデータがドキュメントに挿入されると、コンテキストノードの新しい即時子または兄弟姉妹ごとに少なくとも1つの突然変異イベントが発生します。</target>
        </trans-unit>
        <trans-unit id="b0b8b1e8829293993b0747795d1bed596ed71cd8" translate="yes" xml:space="preserve">
          <source>As the return value is an &lt;code&gt;int&lt;/code&gt;, an incorrect value will be returned for &lt;code&gt;Duration&lt;/code&gt;s with years that go beyond the range of an &lt;code&gt;int&lt;/code&gt;. Use &lt;a href=&quot;#getField(javax.xml.datatype.DatatypeConstants.Field)&quot;&gt;&lt;code&gt;getField(DatatypeConstants.YEARS)&lt;/code&gt;&lt;/a&gt; to avoid possible loss of precision.</source>
          <target state="translated">戻り値は &lt;code&gt;int&lt;/code&gt; であるため、 &lt;code&gt;int&lt;/code&gt; の範囲を超える年数の &lt;code&gt;Duration&lt;/code&gt; sに対して誤った値が返されます。&lt;a href=&quot;#getField(javax.xml.datatype.DatatypeConstants.Field)&quot;&gt; &lt;code&gt;getField(DatatypeConstants.YEARS)&lt;/code&gt; &lt;/a&gt;を使用して、精度が低下する可能性を回避します。</target>
        </trans-unit>
        <trans-unit id="4c93f4f4fbd468b9aefc52826d44fc46124020f4" translate="yes" xml:space="preserve">
          <source>As the semantics of how a tree or subtree may be merged with another tree are completely format-specific, plug-in authors may implement this method in whatever manner is most appropriate for the format, including simply replacing all existing state with the contents of the given tree.</source>
          <target state="translated">ツリーやサブツリーを別のツリーにマージする方法のセマンティクスは完全にフォーマット固有のものなので、プラグインの作成者は、既存のすべての状態を指定されたツリーの内容で単純に置き換えるなど、フォーマットに最も適した方法でこの方法を実装することができます。</target>
        </trans-unit>
        <trans-unit id="2d705cd2177ec8c77e1a322180421cd69a851ea3" translate="yes" xml:space="preserve">
          <source>As the start and end offsets of the changed region (0 and 3) fall on character Element boundaries, no structure change is needed. That is, only the attributes of the character Element style 1 will change.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="0aae174adf4969941ef7ca9af30375166a193cba" translate="yes" xml:space="preserve">
          <source>As the underlying network implementation may ignore the traffic class or type-of-service set using &lt;a href=&quot;#setTrafficClass(int)&quot;&gt;&lt;code&gt;setTrafficClass(int)&lt;/code&gt;&lt;/a&gt; this method may return a different value than was previously set using the &lt;a href=&quot;#setTrafficClass(int)&quot;&gt;&lt;code&gt;setTrafficClass(int)&lt;/code&gt;&lt;/a&gt; method on this DatagramSocket.</source>
          <target state="translated">基盤となるネットワーク実装は、&lt;a href=&quot;#setTrafficClass(int)&quot;&gt; &lt;code&gt;setTrafficClass(int)&lt;/code&gt; &lt;/a&gt;を使用してトラフィッククラスまたはサービスタイプセットを無視する可能性があるため、このメソッドは、このDatagramSocketで&lt;a href=&quot;#setTrafficClass(int)&quot;&gt; &lt;code&gt;setTrafficClass(int)&lt;/code&gt; &lt;/a&gt;メソッドを使用して以前に設定されたものとは異なる値を返す場合があります。</target>
        </trans-unit>
        <trans-unit id="13250d2ca51c1336598dc788a65b3c27315c3b2f" translate="yes" xml:space="preserve">
          <source>As the underlying network implementation may ignore the traffic class or type-of-service set using &lt;a href=&quot;#setTrafficClass(int)&quot;&gt;&lt;code&gt;setTrafficClass(int)&lt;/code&gt;&lt;/a&gt; this method may return a different value than was previously set using the &lt;a href=&quot;#setTrafficClass(int)&quot;&gt;&lt;code&gt;setTrafficClass(int)&lt;/code&gt;&lt;/a&gt; method on this Socket.</source>
          <target state="translated">基盤となるネットワーク実装は、&lt;a href=&quot;#setTrafficClass(int)&quot;&gt; &lt;code&gt;setTrafficClass(int)&lt;/code&gt; &lt;/a&gt;を使用してトラフィッククラスまたはサービスタイプセットを無視する可能性があるため、このメソッドは、このソケットで&lt;a href=&quot;#setTrafficClass(int)&quot;&gt; &lt;code&gt;setTrafficClass(int)&lt;/code&gt; &lt;/a&gt;メソッドを使用して以前に設定されたものとは異なる値を返す場合があります。</target>
        </trans-unit>
        <trans-unit id="6e3b663db14ddbd84bf650414e653cfed7b4d3bf" translate="yes" xml:space="preserve">
          <source>As the underlying network implementation may ignore the traffic class or type-of-service set using &lt;a href=&quot;datagramsocket#setTrafficClass-int-&quot;&gt;&lt;code&gt;setTrafficClass(int)&lt;/code&gt;&lt;/a&gt; this method may return a different value than was previously set using the &lt;a href=&quot;datagramsocket#setTrafficClass-int-&quot;&gt;&lt;code&gt;setTrafficClass(int)&lt;/code&gt;&lt;/a&gt; method on this DatagramSocket.</source>
          <target state="translated">基礎となるネットワーク実装は、&lt;a href=&quot;datagramsocket#setTrafficClass-int-&quot;&gt; &lt;code&gt;setTrafficClass(int)&lt;/code&gt; &lt;/a&gt;を使用して設定されたトラフィッククラスまたはサービスタイプを無視する可能性があるため、このメソッドは、このDatagramSocketで&lt;a href=&quot;datagramsocket#setTrafficClass-int-&quot;&gt; &lt;code&gt;setTrafficClass(int)&lt;/code&gt; &lt;/a&gt;メソッドを使用して以前に設定されたものとは異なる値を返す場合があります。</target>
        </trans-unit>
        <trans-unit id="bd3dcaa75bfca85fdab534c16fe7b401186b0b4f" translate="yes" xml:space="preserve">
          <source>As the underlying network implementation may ignore the traffic class or type-of-service set using &lt;a href=&quot;socket#setTrafficClass-int-&quot;&gt;&lt;code&gt;setTrafficClass(int)&lt;/code&gt;&lt;/a&gt; this method may return a different value than was previously set using the &lt;a href=&quot;socket#setTrafficClass-int-&quot;&gt;&lt;code&gt;setTrafficClass(int)&lt;/code&gt;&lt;/a&gt; method on this Socket.</source>
          <target state="translated">基礎となるネットワーク実装は、&lt;a href=&quot;socket#setTrafficClass-int-&quot;&gt; &lt;code&gt;setTrafficClass(int)&lt;/code&gt; &lt;/a&gt;を使用して設定されたトラフィッククラスまたはサービスタイプを無視する可能性があるため、このメソッドは、このSocketで&lt;a href=&quot;socket#setTrafficClass-int-&quot;&gt; &lt;code&gt;setTrafficClass(int)&lt;/code&gt; &lt;/a&gt;メソッドを使用して以前に設定されたものとは異なる値を返す場合があります。</target>
        </trans-unit>
        <trans-unit id="30c1a54150bebd25d644937ac69968a8cf3ce67a" translate="yes" xml:space="preserve">
          <source>As the user gestures navigate over &lt;code&gt;Component&lt;/code&gt;(s) in the GUI with associated &lt;code&gt;DropTarget&lt;/code&gt;(s), the &lt;code&gt;DragSource&lt;/code&gt; receives notifications in order to provide &quot;Drag Over&quot; feedback effects, and the &lt;code&gt;DropTarget&lt;/code&gt;(s) receive notifications in order to provide &quot;Drag Under&quot; feedback effects based upon the operation(s) supported and the data type(s) involved.</source>
          <target state="translated">ユーザージェスチャが関連する &lt;code&gt;DropTarget&lt;/code&gt; を使用してGUIの &lt;code&gt;Component&lt;/code&gt; ナビゲートすると、 &lt;code&gt;DragSource&lt;/code&gt; は「DragOver」フィードバック効果を提供するために通知を受信し、 &lt;code&gt;DropTarget&lt;/code&gt; は「DragUnder」を提供するために通知を受信します。 &quot;サポートされている操作と関連するデータタイプに基づくフィードバック効果。</target>
        </trans-unit>
        <trans-unit id="a018fd4869a6ee0a6d1fa92b59dcb90f4eaffe64" translate="yes" xml:space="preserve">
          <source>As the user scrolls to a new print service selection, the values copied are based on the settings for the previous service, together with any user changes. The values are not based on the original settings supplied by the client.</source>
          <target state="translated">ユーザーが新しいプリントサービスの選択にスクロールすると、コピーされた値は、ユーザーの変更と一緒に前のサービスの設定に基づいています。値は、クライアントから提供された元の設定には基づいていません。</target>
        </trans-unit>
        <trans-unit id="c24ced3aee59d1f2dd37a59962b90aa7b6659d75" translate="yes" xml:space="preserve">
          <source>As this formatter has an optional element, it may be necessary to parse using &lt;a href=&quot;#parseBest(java.lang.CharSequence,java.time.temporal.TemporalQuery...)&quot;&gt;&lt;code&gt;parseBest(java.lang.CharSequence, java.time.temporal.TemporalQuery&amp;lt;?&amp;gt;...)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このフォーマッタにはオプションの要素があるため&lt;a href=&quot;#parseBest(java.lang.CharSequence,java.time.temporal.TemporalQuery...)&quot;&gt; &lt;code&gt;parseBest(java.lang.CharSequence, java.time.temporal.TemporalQuery&amp;lt;?&amp;gt;...)&lt;/code&gt; &lt;/a&gt;を使用して解析する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="63b2cbf6bbb7a70620dccb2c42662a47a39ad720" translate="yes" xml:space="preserve">
          <source>As this formatter has an optional element, it may be necessary to parse using &lt;a href=&quot;datetimeformatter#parseBest-java.lang.CharSequence-java.time.temporal.TemporalQuery...-&quot;&gt;&lt;code&gt;parseBest(java.lang.CharSequence, java.time.temporal.TemporalQuery&amp;lt;?&amp;gt;...)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このフォーマッタにはオプションの要素があるため&lt;a href=&quot;datetimeformatter#parseBest-java.lang.CharSequence-java.time.temporal.TemporalQuery...-&quot;&gt; &lt;code&gt;parseBest(java.lang.CharSequence, java.time.temporal.TemporalQuery&amp;lt;?&amp;gt;...)&lt;/code&gt; &lt;/a&gt;を使用して解析する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="a90cb6e4f589014bf7857aa07948c0333ab20879" translate="yes" xml:space="preserve">
          <source>As usual, the &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; and &lt;code&gt;:&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; can be omitted.</source>
          <target state="translated">通常どおり、 &lt;code&gt;&lt;em&gt;host&lt;/em&gt;&lt;/code&gt; と &lt;code&gt;:&lt;em&gt;port&lt;/em&gt;&lt;/code&gt; は省略できます。</target>
        </trans-unit>
        <trans-unit id="7535c46dcf2769b40f61ad05b1ea40757f5b181c" translate="yes" xml:space="preserve">
          <source>As when creating a &lt;code&gt;Configuration&lt;/code&gt;, &lt;a href=&quot;module/moduledescriptor#isAutomatic()&quot;&gt;&lt;code&gt;automatic&lt;/code&gt;&lt;/a&gt; modules receive special treatment when creating a layer. An automatic module is created in the Java virtual machine as a &lt;code&gt;Module&lt;/code&gt; that reads every unnamed &lt;code&gt;
 Module&lt;/code&gt; in the Java virtual machine.</source>
          <target state="translated">&lt;code&gt;Configuration&lt;/code&gt; を作成するときと同様に、&lt;a href=&quot;module/moduledescriptor#isAutomatic()&quot;&gt; &lt;code&gt;automatic&lt;/code&gt; &lt;/a&gt;モジュールはレイヤーを作成するときに特別な扱いを受けます。自動モジュールは、次のようにJava仮想マシンで作成された &lt;code&gt;Module&lt;/code&gt; すべての無名の読み込み &lt;code&gt; Module&lt;/code&gt; Java仮想マシンに。</target>
        </trans-unit>
        <trans-unit id="d986f1c6b5fc10c93dce9af4e60795f3b2310ad7" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;filechannel&quot;&gt;&lt;code&gt;FileChannel&lt;/code&gt;&lt;/a&gt;, the view of a file provided by an instance of this class is guaranteed to be consistent with other views of the same file provided by other instances in the same program. The view provided by an instance of this class may or may not, however, be consistent with the views seen by other concurrently-running programs due to caching performed by the underlying operating system and delays induced by network-filesystem protocols. This is true regardless of the language in which these other programs are written, and whether they are running on the same machine or on some other machine. The exact nature of any such inconsistencies are system-dependent and are therefore unspecified.</source>
          <target state="translated">&lt;a href=&quot;filechannel&quot;&gt; &lt;code&gt;FileChannel&lt;/code&gt; &lt;/a&gt;と同様に、このクラスのインスタンスによって提供されるファイルのビューは、同じプログラム内の他のインスタンスによって提供される同じファイルの他のビューと一貫していることが保証されています。ただし、このクラスのインスタンスによって提供されるビューは、基盤となるオペレーティングシステムによって実行されるキャッシュと、ネットワークファイルシステムプロトコルによって引き起こされる遅延のために、他の並行実行プログラムによって表示されるビューと一致する場合と一致しない場合があります。これは、これらの他のプログラムが記述されている言語、および同じマシンで実行されているか、他のマシンで実行されているかに関係なく当てはまります。このような不整合の正確な性質はシステムに依存するため、詳細は不明です。</target>
        </trans-unit>
        <trans-unit id="7321b4553d4be1009088b0499507fe54640c853f" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;jobkoctets&quot;&gt;&lt;code&gt;JobKOctets&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;JobImpressions&lt;/code&gt; value must also not include the multiplicative factor due to a copies instruction embedded in the document data. If the document data actually includes replications of the document data, this value will include such replication. In other words, this value is always the number of impressions in the source document data, rather than a measure of the number of impressions to be produced by the job.</source>
          <target state="translated">同様&lt;a href=&quot;jobkoctets&quot;&gt; &lt;code&gt;JobKOctets&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;JobImpressions&lt;/code&gt; の値はまた、文書データに埋め込まれたコピー命令に乗法因子を含んではなりません。ドキュメントデータに実際にドキュメントデータの複製が含まれている場合、この値にはそのような複製が含まれます。つまり、この値は、ジョブによって生成されるインプレッション数の測定値ではなく、常にソースドキュメントデータのインプレッション数です。</target>
        </trans-unit>
        <trans-unit id="0dd8db7d1efbbb6b79d2c73ecc53bb267bfa661c" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;jobkoctets&quot;&gt;&lt;code&gt;JobKOctets&lt;/code&gt;&lt;/a&gt;, the &lt;code&gt;JobImpressions&lt;/code&gt; value must not include the multiplicative factors contributed by the number of copies specified by the &lt;a href=&quot;copies&quot;&gt;&lt;code&gt;Copies&lt;/code&gt;&lt;/a&gt; attribute, independent of whether the device can process multiple copies without making multiple passes over the job or document data and independent of whether the output is collated or not. Thus the value is independent of the implementation and reflects the size of the document(s) measured in impressions independent of the number of copies.</source>
          <target state="translated">同様&lt;a href=&quot;jobkoctets&quot;&gt; &lt;code&gt;JobKOctets&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;JobImpressions&lt;/code&gt; の値によって指定された部数が寄与する乗法因子含んではならない&lt;a href=&quot;copies&quot;&gt; &lt;code&gt;Copies&lt;/code&gt; &lt;/a&gt;装置がジョブまたはドキュメントデータに対して複数のパスを作ることなく、複数のコピーを処理することができるかどうかとは無関係とするかどうか出力の独立属性を照合されているかどうか。したがって、値は実装に依存せず、コピー数に関係なくインプレッションで測定されたドキュメントのサイズを反映します。</target>
        </trans-unit>
        <trans-unit id="d0a1adff4be253570aae7c70e7723a214fe98ebb" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;jobkoctets&quot;&gt;&lt;code&gt;JobKOctets&lt;/code&gt;&lt;/a&gt;, the JobImpressions value must also not include the multiplicative factor due to a copies instruction embedded in the document data. If the document data actually includes replications of the document data, this value will include such replication. In other words, this value is always the number of impressions in the source document data, rather than a measure of the number of impressions to be produced by the job.</source>
          <target state="translated">&lt;a href=&quot;jobkoctets&quot;&gt; &lt;code&gt;JobKOctets&lt;/code&gt; の&lt;/a&gt;場合と同様に、JobImpressions値には、ドキュメントデータに埋め込まれたコピー命令が原因で、乗数を含めないでください。ドキュメントデータに実際にドキュメントデータの複製が含まれている場合、この値にはそのような複製が含まれます。つまり、この値は、ジョブによって生成されるインプレッション数の測定値ではなく、常にソースドキュメントデータのインプレッション数です。</target>
        </trans-unit>
        <trans-unit id="f5f9f9939fad21a9bd4b811bb57e093c751929f2" translate="yes" xml:space="preserve">
          <source>As with &lt;a href=&quot;jobkoctets&quot;&gt;&lt;code&gt;JobKOctets&lt;/code&gt;&lt;/a&gt;, the JobImpressions value must not include the multiplicative factors contributed by the number of copies specified by the &lt;a href=&quot;copies&quot;&gt;&lt;code&gt;Copies&lt;/code&gt;&lt;/a&gt; attribute, independent of whether the device can process multiple copies without making multiple passes over the job or document data and independent of whether the output is collated or not. Thus the value is independent of the implementation and reflects the size of the document(s) measured in impressions independent of the number of copies.</source>
          <target state="translated">同様&lt;a href=&quot;jobkoctets&quot;&gt; &lt;code&gt;JobKOctets&lt;/code&gt; &lt;/a&gt;、JobImpressions値によって指定された部数が寄与する乗法因子含んではならない&lt;a href=&quot;copies&quot;&gt; &lt;code&gt;Copies&lt;/code&gt; &lt;/a&gt;装置がジョブまたはドキュメントデータに対して複数のパスを作ることなく、複数のコピーを処理することができるかどうかとは無関係とするかどうか出力の独立属性を照合されるかどうか。したがって、この値は実装に依存せず、コピー数に関係なく、印象で測定されたドキュメントのサイズを反映します。</target>
        </trans-unit>
        <trans-unit id="a2723d228f118c016a25042ee3a660575455f1bc" translate="yes" xml:space="preserve">
          <source>As with &lt;code&gt;ActionMap&lt;/code&gt; if you create a cycle, eg:</source>
          <target state="translated">&lt;code&gt;ActionMap&lt;/code&gt; と同様に、サイクルを作成する場合、例：</target>
        </trans-unit>
        <trans-unit id="f6b36971863105d539cbb564dc7a3ad1e3ebc632" translate="yes" xml:space="preserve">
          <source>As with &lt;code&gt;InputMap&lt;/code&gt; if you create a cycle, eg:</source>
          <target state="translated">&lt;code&gt;InputMap&lt;/code&gt; と同様に、サイクルを作成する場合、例：</target>
        </trans-unit>
        <trans-unit id="6fc6e5c3cc00733d1ff1b8546cc74f47994bb5e7" translate="yes" xml:space="preserve">
          <source>As with &lt;code&gt;Object.equals()&lt;/code&gt;, the notion of ordering for names depends on the class that implements this interface. For example, the ordering may be based on lexicographical ordering of the name components. Specific attributes of the name, such as how it treats case, may affect the ordering. In general, two names of different classes may not be compared.</source>
          <target state="translated">同じように &lt;code&gt;Object.equals()&lt;/code&gt; 、名の順序付けの概念は、クラス実装されていることをこのインターフェイスに依存します。たとえば、順序は名前コンポーネントの辞書式順序に基づく場合があります。大文字と小文字の扱いなど、名前の特定の属性が順序に影響する場合があります。一般に、異なるクラスの2つの名前は比較できません。</target>
        </trans-unit>
        <trans-unit id="c6a98742073e2df8125e467c41af37aa99b7823a" translate="yes" xml:space="preserve">
          <source>As with &lt;code&gt;ThreadPoolExecutor&lt;/code&gt;, if not otherwise specified, this class uses &lt;a href=&quot;executors#defaultThreadFactory()&quot;&gt;&lt;code&gt;Executors.defaultThreadFactory()&lt;/code&gt;&lt;/a&gt; as the default thread factory, and &lt;a href=&quot;threadpoolexecutor.abortpolicy&quot;&gt;&lt;code&gt;ThreadPoolExecutor.AbortPolicy&lt;/code&gt;&lt;/a&gt; as the default rejected execution handler.</source>
          <target state="translated">&lt;code&gt;ThreadPoolExecutor&lt;/code&gt; と同様に、特に指定がない限り、このクラスはデフォルトのスレッドファクトリとして&lt;a href=&quot;executors#defaultThreadFactory()&quot;&gt; &lt;code&gt;Executors.defaultThreadFactory()&lt;/code&gt; &lt;/a&gt;を使用し、デフォルトの拒否された実行ハンドラーとして&lt;a href=&quot;threadpoolexecutor.abortpolicy&quot;&gt; &lt;code&gt;ThreadPoolExecutor.AbortPolicy&lt;/code&gt; &lt;/a&gt;を使用します。</target>
        </trans-unit>
        <trans-unit id="b749bece098f77ecadbb1923dbff8752bd9d9094" translate="yes" xml:space="preserve">
          <source>As with &lt;code&gt;java.awt.datatransfer.StringSelection&lt;/code&gt;, if the requested flavor is &lt;code&gt;DataFlavor.plainTextFlavor&lt;/code&gt;, or an equivalent flavor, a Reader is returned. &lt;b&gt;Note:&lt;/b&gt; The behavior of the system Clipboard's &lt;code&gt;getTransferData()&lt;/code&gt; method for &lt;code&gt;DataFlavor.plainTextFlavor&lt;/code&gt;, and equivalent DataFlavors, is inconsistent with the definition of &lt;code&gt;DataFlavor.plainTextFlavor&lt;/code&gt;. Because of this, support for &lt;code&gt;DataFlavor.plainTextFlavor&lt;/code&gt;, and equivalent flavors, is &lt;b&gt;deprecated&lt;/b&gt;.</source>
          <target state="translated">同じように &lt;code&gt;java.awt.datatransfer.StringSelection&lt;/code&gt; 要求された味わいがある場合は、 &lt;code&gt;DataFlavor.plainTextFlavor&lt;/code&gt; または同等の風味、Readerが返されます。&lt;b&gt;注：&lt;/b&gt; &lt;code&gt;DataFlavor.plainTextFlavor&lt;/code&gt; および同等のDataFlavorsに対するシステムクリップボードの &lt;code&gt;getTransferData()&lt;/code&gt; メソッドの動作は、DataFlavor.plainTextFlavorの定義と矛盾してい &lt;code&gt;DataFlavor.plainTextFlavor&lt;/code&gt; 。このため、 &lt;code&gt;DataFlavor.plainTextFlavor&lt;/code&gt; および同等のフレーバーのサポートは&lt;b&gt;非推奨になりました&lt;/b&gt;。&lt;b&gt;&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="262554f67a3eea86592c01186bc8f29566223708" translate="yes" xml:space="preserve">
          <source>As with &lt;code&gt;reduce()&lt;/code&gt;, a benefit of expressing &lt;code&gt;collect&lt;/code&gt; in this abstract way is that it is directly amenable to parallelization: we can accumulate partial results in parallel and then combine them, so long as the accumulation and combining functions satisfy the appropriate requirements. For example, to collect the String representations of the elements in a stream into an &lt;code&gt;ArrayList&lt;/code&gt;, we could write the obvious sequential for-each form:</source>
          <target state="translated">同様 &lt;code&gt;reduce()&lt;/code&gt; 、発現の利益 &lt;code&gt;collect&lt;/code&gt; この抽象的方法では、それが並列に直接影響を受けやすいということである。我々は長い間蓄積および合成機能が適切な要件を満たすように、並列に部分的な結果を蓄積し、それらを組み合わせることができます。たとえば、ストリーム内の要素のString表現を収集して &lt;code&gt;ArrayList&lt;/code&gt; に収集するには、明白な順次for-eachフォームを記述します。</target>
        </trans-unit>
        <trans-unit id="ede03b687b41f48e7233661bb939683685897780" translate="yes" xml:space="preserve">
          <source>As with any reflected method, these methods (when reflected) may be invoked directly via &lt;a href=&quot;../reflect/method#invoke(java.lang.Object,java.lang.Object...)&quot;&gt;&lt;code&gt;java.lang.reflect.Method.invoke&lt;/code&gt;&lt;/a&gt;, via JNI, or indirectly via &lt;a href=&quot;methodhandles.lookup#unreflect(java.lang.reflect.Method)&quot;&gt;&lt;code&gt;Lookup.unreflect&lt;/code&gt;&lt;/a&gt;. However, such reflective calls do not result in access mode method invocations. Such a call, if passed the required argument (a single one, of type &lt;code&gt;Object[]&lt;/code&gt;), will ignore the argument and will throw an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.</source>
          <target state="translated">他の&lt;a href=&quot;methodhandles.lookup#unreflect(java.lang.reflect.Method)&quot;&gt; &lt;code&gt;Lookup.unreflect&lt;/code&gt; &lt;/a&gt;メソッドと同様に、これらのメソッド（リフレクトされている場合）は、&lt;a href=&quot;../reflect/method#invoke(java.lang.Object,java.lang.Object...)&quot;&gt; &lt;code&gt;java.lang.reflect.Method.invoke&lt;/code&gt; &lt;/a&gt;を介して直接、JNIを介して、またはLookup.unreflectを介して間接的に呼び出すことができます。ただし、このようなリフレクティブ呼び出しでは、アクセスモードメソッドが呼び出されることはありません。このような呼び出しは、必要な引数（ &lt;code&gt;Object[]&lt;/code&gt; 型の単一の引数）が渡された場合、引数を無視し、 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="6333d66ae19067718314b731c9a438823931dc0f" translate="yes" xml:space="preserve">
          <source>As with any reflected method, these methods (when reflected) may be invoked via &lt;a href=&quot;../reflect/method#invoke(java.lang.Object,java.lang.Object...)&quot;&gt;&lt;code&gt;java.lang.reflect.Method.invoke&lt;/code&gt;&lt;/a&gt;. However, such reflective calls do not result in method handle invocations. Such a call, if passed the required argument (a single one, of type &lt;code&gt;Object[]&lt;/code&gt;), will ignore the argument and will throw an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.</source>
          <target state="translated">他のリフレクトされたメソッドと同様に、これらのメソッド（リフレクトされた場合）は&lt;a href=&quot;../reflect/method#invoke(java.lang.Object,java.lang.Object...)&quot;&gt; &lt;code&gt;java.lang.reflect.Method.invoke&lt;/code&gt; &lt;/a&gt;を介して呼び出すことができます。ただし、このようなリフレクティブ呼び出しでは、メソッドハンドルの呼び出しは発生しません。このような呼び出しは、必要な引数（ &lt;code&gt;Object[]&lt;/code&gt; 型の単一の引数）が渡された場合、引数を無視し、 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="896d64f648c747af5597747b989014908d267502" translate="yes" xml:space="preserve">
          <source>As with any reflected method, these methods (when reflected) may be invoked via &lt;a href=&quot;../reflect/method#invoke-java.lang.Object-java.lang.Object...-&quot;&gt;&lt;code&gt;java.lang.reflect.Method.invoke&lt;/code&gt;&lt;/a&gt;. However, such reflective calls do not result in method handle invocations. Such a call, if passed the required argument (a single one, of type &lt;code&gt;Object[]&lt;/code&gt;), will ignore the argument and will throw an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.</source>
          <target state="translated">他のリフレクトメソッドと同様に、これらのメソッド（&lt;a href=&quot;../reflect/method#invoke-java.lang.Object-java.lang.Object...-&quot;&gt; &lt;code&gt;java.lang.reflect.Method.invoke&lt;/code&gt; &lt;/a&gt;時）はjava.lang.reflect.Method.invokeを介して呼び出すことができます。ただし、このようなリフレクティブな呼び出しでは、メソッドハンドルの呼び出しは行われません。このような呼び出しは、必要な引数（ &lt;code&gt;Object[]&lt;/code&gt; 型の単一の引数）が渡された場合、引数を無視し、 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="6b9b6e0ef7ecc1f48f3ff6c34453251a64104c1e" translate="yes" xml:space="preserve">
          <source>As with automatic modules, the contents of a packaged or exploded module may need to be &lt;em&gt;scanned&lt;/em&gt; in order to determine the packages in the module. Whether &lt;a href=&quot;../../nio/file/files#isHidden(java.nio.file.Path)&quot;&gt;hidden files&lt;/a&gt; are ignored or not is implementation specific and therefore not specified. If a &lt;code&gt;.class&lt;/code&gt; file (other than &lt;code&gt;
 module-info.class&lt;/code&gt;) is found in the top-level directory then it is assumed to be a class in the unnamed package and so &lt;code&gt;FindException&lt;/code&gt; is thrown.</source>
          <target state="translated">自動モジュールと同様に、モジュール内のパッケージを判別するために、パッケージ化または展開されたモジュールの内容を&lt;em&gt;スキャン&lt;/em&gt;する必要がある場合があります。&lt;a href=&quot;../../nio/file/files#isHidden(java.nio.file.Path)&quot;&gt;隠しファイル&lt;/a&gt;を無視するかどうかは実装固有であるため、指定されていません。 &lt;code&gt;.class&lt;/code&gt; ファイル（ &lt;code&gt; module-info.class&lt;/code&gt; 以外）が最上位ディレクトリで見つかった場合、そのファイルは名前のないパッケージのクラスであると見なされるため、 &lt;code&gt;FindException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="b9011646c18b6a1b541565467e477948b20784f1" translate="yes" xml:space="preserve">
          <source>As with other &lt;a href=&quot;../../../java.base/java/security/permission&quot;&gt;&lt;code&gt;Permission&lt;/code&gt;&lt;/a&gt; objects, an MBeanPermission can represent either a permission that you &lt;em&gt;have&lt;/em&gt; or a permission that you &lt;em&gt;need&lt;/em&gt;. When a sensitive operation is being checked for permission, an MBeanPermission is constructed representing the permission you need. The operation is only allowed if the permissions you have &lt;a href=&quot;#implies(java.security.Permission)&quot;&gt;imply&lt;/a&gt; the permission you need.</source>
          <target state="translated">他の&lt;a href=&quot;../../../java.base/java/security/permission&quot;&gt; &lt;code&gt;Permission&lt;/code&gt; &lt;/a&gt;オブジェクトと同様に、MBeanPermissionは、所有し&lt;em&gt;て&lt;/em&gt;いるアクセス許可または&lt;em&gt;必要な&lt;/em&gt;アクセス許可のいずれかを表すことができます。機密性の高い操作でアクセス許可がチェックされると、必要なアクセス許可を表すMBeanPermissionが作成されます。操作は、あなたが持って&lt;a href=&quot;#implies(java.security.Permission)&quot;&gt;いる&lt;/a&gt;許可があなたが必要とする許可を暗示している場合にのみ許可されます。</target>
        </trans-unit>
        <trans-unit id="cba2c61f7f99bc01a53a595cc3d12bcd79fb3392" translate="yes" xml:space="preserve">
          <source>As with other &lt;a href=&quot;../../java/security/permission&quot;&gt;&lt;code&gt;Permission&lt;/code&gt;&lt;/a&gt; objects, an MBeanPermission can represent either a permission that you &lt;em&gt;have&lt;/em&gt; or a permission that you &lt;em&gt;need&lt;/em&gt;. When a sensitive operation is being checked for permission, an MBeanPermission is constructed representing the permission you need. The operation is only allowed if the permissions you have &lt;a href=&quot;mbeanpermission#implies-java.security.Permission-&quot;&gt;imply&lt;/a&gt; the permission you need.</source>
          <target state="translated">他の&lt;a href=&quot;../../java/security/permission&quot;&gt; &lt;code&gt;Permission&lt;/code&gt; &lt;/a&gt;オブジェクトと同様に、MBeanPermissionは、所有し&lt;em&gt;て&lt;/em&gt;いる権限または&lt;em&gt;必要な&lt;/em&gt;権限のいずれかを表すことができます。機密性の高い操作の権限がチェックされると、必要な権限を表すMBeanPermissionが構築されます。この操作は、ユーザーが持って&lt;a href=&quot;mbeanpermission#implies-java.security.Permission-&quot;&gt;いる&lt;/a&gt;アクセス許可が必要なアクセス許可を暗黙に示している場合にのみ許可されます。</target>
        </trans-unit>
        <trans-unit id="e99dc2c6441f0c0cb81841bcf0e2788829832e10" translate="yes" xml:space="preserve">
          <source>As with other &lt;code&gt;&lt;a href=&quot;control&quot;&gt;&lt;code&gt;Control&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; subclasses, a method is provided that returns string labels for the values, suitable for display in the user interface.</source>
          <target state="translated">他の &lt;code&gt;&lt;a href=&quot;control&quot;&gt;&lt;code&gt;Control&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; サブクラスと同様に、ユーザーインターフェイスでの表示に適した、値の文字列ラベルを返すメソッドが提供されます。</target>
        </trans-unit>
        <trans-unit id="65f9ecf9281d455ff39c6145c2b79da2e1fe863c" translate="yes" xml:space="preserve">
          <source>As with other &lt;code&gt;Control&lt;/code&gt; subclasses, a method is provided that returns string labels for the values, suitable for display in the user interface.</source>
          <target state="translated">他の &lt;code&gt;Control&lt;/code&gt; サブクラスと同様に、ユーザーインターフェイスでの表示に適した値の文字列ラベルを返すメソッドが提供されています。</target>
        </trans-unit>
        <trans-unit id="1246ab44696837b0652fc305b2d39edc07ce22ac" translate="yes" xml:space="preserve">
          <source>As with pooled connections, connections made via a &lt;code&gt;DataSource&lt;/code&gt; object that is implemented to work with the middle tier infrastructure may participate in distributed transactions. This gives an application the ability to involve data sources on multiple servers in a single transaction.</source>
          <target state="translated">プールされた接続と同様に、中間層インフラストラクチャと連携するように実装された &lt;code&gt;DataSource&lt;/code&gt; オブジェクトを介して行われた接続は、分散トランザクションに参加できます。これにより、アプリケーションは1回のトランザクションで複数のサーバー上のデータソースを使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="615d032dca7df7a5c842602da0a20b505578a94e" translate="yes" xml:space="preserve">
          <source>As with selectors, the implementation of asynchronous channels can be replaced by &quot;plugging in&quot; an alternative definition or instance of the &lt;a href=&quot;spi/asynchronouschannelprovider&quot;&gt;&lt;code&gt;AsynchronousChannelProvider&lt;/code&gt;&lt;/a&gt; class defined in the &lt;a href=&quot;spi/package-summary&quot;&gt;&lt;code&gt;java.nio.channels.spi&lt;/code&gt;&lt;/a&gt; package. It is not expected that many developers will actually make use of this facility; it is provided primarily so that sophisticated users can take advantage of operating-system-specific asynchronous I/O mechanisms when very high performance is required.</source>
          <target state="translated">セレクターと同様に、非同期チャネルの実装は、&lt;a href=&quot;spi/package-summary&quot;&gt; &lt;code&gt;java.nio.channels.spi&lt;/code&gt; &lt;/a&gt;パッケージで定義されている&lt;a href=&quot;spi/asynchronouschannelprovider&quot;&gt; &lt;code&gt;AsynchronousChannelProvider&lt;/code&gt; &lt;/a&gt;クラスの代替定義またはインスタンスを「プラグイン」することで置き換えることができます。多くの開発者が実際にこの機能を利用することは期待されていません。これは主に、非常に高いパフォーマンスが必要な場合に、高度なユーザーがオペレーティングシステム固有の非同期I / Oメカニズムを利用できるようにするために提供されています。</target>
        </trans-unit>
        <trans-unit id="e5a81f92999bbe8bb40deddaac7c56d7ffe984df" translate="yes" xml:space="preserve">
          <source>As with selectors, the implementation of asynchronous channels can be replaced by &quot;plugging in&quot; an alternative definition or instance of the &lt;a href=&quot;spi/asynchronouschannelprovider&quot;&gt;&lt;code&gt;AsynchronousChannelProvider&lt;/code&gt;&lt;/a&gt; class defined in the &lt;code&gt;&lt;a href=&quot;spi/package-summary&quot;&gt;&lt;code&gt;java.nio.channels.spi&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; package. It is not expected that many developers will actually make use of this facility; it is provided primarily so that sophisticated users can take advantage of operating-system-specific asynchronous I/O mechanisms when very high performance is required.</source>
          <target state="translated">セレクターと同様に、非同期チャネルの実装は、 &lt;code&gt;&lt;a href=&quot;spi/package-summary&quot;&gt;&lt;code&gt;java.nio.channels.spi&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; パッケージで定義された&lt;a href=&quot;spi/asynchronouschannelprovider&quot;&gt; &lt;code&gt;AsynchronousChannelProvider&lt;/code&gt; &lt;/a&gt;クラスの代替定義またはインスタンスを「プラグイン」することで置き換えることができます。多くの開発者が実際にこの機能を利用することは期待されていません。これは主に、高度なユーザーが非常に高いパフォーマンスが必要な場合にオペレーティングシステム固有の非同期I / Oメカニズムを利用できるようにするために提供されます。</target>
        </trans-unit>
        <trans-unit id="d1a83689cc07dbd288340afb585c2ad8fe118e29" translate="yes" xml:space="preserve">
          <source>As with the &lt;a href=&quot;#delete(java.nio.file.Path)&quot;&gt;&lt;code&gt;delete(Path)&lt;/code&gt;&lt;/a&gt; method, an implementation may need to examine the file to determine if the file is a directory. Consequently this method may not be atomic with respect to other file system operations. If the file is a symbolic link, then the symbolic link itself, not the final target of the link, is deleted.</source>
          <target state="translated">同様に&lt;a href=&quot;#delete(java.nio.file.Path)&quot;&gt; &lt;code&gt;delete(Path)&lt;/code&gt; &lt;/a&gt;メソッド、実装では、ファイルがディレクトリであるかどうかを判断するために、ファイルを調査する必要があるかもしれません。したがって、この方法は、他のファイルシステム操作に関してアトミックではない可能性があります。ファイルがシンボリックリンクの場合、リンクの最終ターゲットではなく、シンボリックリンク自体が削除されます。</target>
        </trans-unit>
        <trans-unit id="58c9e0627883470188162f1617620dbcb74e8a35" translate="yes" xml:space="preserve">
          <source>As with the &lt;a href=&quot;#findWithinHorizon(java.lang.String,int)&quot;&gt;&lt;code&gt;findWithinHorizon()&lt;/code&gt;&lt;/a&gt; methods, this method might block waiting for additional input, and it might buffer an unbounded amount of input searching for a match.</source>
          <target state="translated">同様&lt;a href=&quot;#findWithinHorizon(java.lang.String,int)&quot;&gt; &lt;code&gt;findWithinHorizon()&lt;/code&gt; &lt;/a&gt;メソッドは、この方法は、追加の入力を待ってブロックする可能性があり、それが一致する入力検索の無制限の量をバッファかもしれません。</target>
        </trans-unit>
        <trans-unit id="8da4a35fbeea42792bb871fcaaaff80c1a8f2297" translate="yes" xml:space="preserve">
          <source>As with the &lt;a href=&quot;files#delete-java.nio.file.Path-&quot;&gt;&lt;code&gt;delete(Path)&lt;/code&gt;&lt;/a&gt; method, an implementation may need to examine the file to determine if the file is a directory. Consequently this method may not be atomic with respect to other file system operations. If the file is a symbolic link, then the symbolic link itself, not the final target of the link, is deleted.</source>
          <target state="translated">同様に&lt;a href=&quot;files#delete-java.nio.file.Path-&quot;&gt; &lt;code&gt;delete(Path)&lt;/code&gt; &lt;/a&gt;メソッド、実装では、ファイルがディレクトリであるかどうかを判断するために、ファイルを調査する必要があるかもしれません。その結果、このメソッドは他のファイルシステム操作に関してアトミックではない可能性があります。ファイルがシンボリックリンクの場合、リンクの最終的なターゲットではなく、シンボリックリンク自体が削除されます。</target>
        </trans-unit>
        <trans-unit id="892068b5185e5337e67f6c48a31993f2577028e8" translate="yes" xml:space="preserve">
          <source>As with the &lt;code&gt;File.createTempFile&lt;/code&gt; methods, this method is only part of a temporary-file facility. Where used as a &lt;em&gt;work files&lt;/em&gt;, the resulting file may be opened using the &lt;a href=&quot;standardopenoption#DELETE_ON_CLOSE&quot;&gt;&lt;code&gt;DELETE_ON_CLOSE&lt;/code&gt;&lt;/a&gt; option so that the file is deleted when the appropriate &lt;code&gt;close&lt;/code&gt; method is invoked. Alternatively, a &lt;a href=&quot;../../lang/runtime#addShutdownHook(java.lang.Thread)&quot;&gt;&lt;code&gt;shutdown-hook&lt;/code&gt;&lt;/a&gt;, or the &lt;a href=&quot;../../io/file#deleteOnExit()&quot;&gt;&lt;code&gt;File.deleteOnExit()&lt;/code&gt;&lt;/a&gt; mechanism may be used to delete the file automatically.</source>
          <target state="translated">&lt;code&gt;File.createTempFile&lt;/code&gt; メソッドと同様に、このメソッドは一時ファイル機能の一部にすぎません。&lt;em&gt;作業ファイル&lt;/em&gt;として使用&lt;em&gt;する&lt;/em&gt;場合、結果のファイルは&lt;a href=&quot;standardopenoption#DELETE_ON_CLOSE&quot;&gt; &lt;code&gt;DELETE_ON_CLOSE&lt;/code&gt; &lt;/a&gt;オプションを使用して開くことができるため、適切な &lt;code&gt;close&lt;/code&gt; メソッドが呼び出されたときにファイルが削除されます。または、&lt;a href=&quot;../../lang/runtime#addShutdownHook(java.lang.Thread)&quot;&gt; &lt;code&gt;shutdown-hook&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../io/file#deleteOnExit()&quot;&gt; &lt;code&gt;File.deleteOnExit()&lt;/code&gt; &lt;/a&gt;メカニズムを使用して、ファイルを自動的に削除することもできます。</target>
        </trans-unit>
        <trans-unit id="29a261b6a09fb814b4bbbcd5aab921703e3b7193" translate="yes" xml:space="preserve">
          <source>As with the &lt;code&gt;File.createTempFile&lt;/code&gt; methods, this method is only part of a temporary-file facility. Where used as a &lt;em&gt;work files&lt;/em&gt;, the resulting file may be opened using the &lt;a href=&quot;standardopenoption#DELETE_ON_CLOSE&quot;&gt;&lt;code&gt;DELETE_ON_CLOSE&lt;/code&gt;&lt;/a&gt; option so that the file is deleted when the appropriate &lt;code&gt;close&lt;/code&gt; method is invoked. Alternatively, a &lt;a href=&quot;../../lang/runtime#addShutdownHook-java.lang.Thread-&quot;&gt;&lt;code&gt;shutdown-hook&lt;/code&gt;&lt;/a&gt;, or the &lt;a href=&quot;../../io/file#deleteOnExit--&quot;&gt;&lt;code&gt;File.deleteOnExit()&lt;/code&gt;&lt;/a&gt; mechanism may be used to delete the file automatically.</source>
          <target state="translated">&lt;code&gt;File.createTempFile&lt;/code&gt; メソッドと同様に、このメソッドは一時ファイル機能の一部にすぎません。&lt;em&gt;作業ファイル&lt;/em&gt;として使用&lt;em&gt;する&lt;/em&gt;場合、結果のファイルは&lt;a href=&quot;standardopenoption#DELETE_ON_CLOSE&quot;&gt; &lt;code&gt;DELETE_ON_CLOSE&lt;/code&gt; &lt;/a&gt;オプションを使用して開くことができるため、適切な &lt;code&gt;close&lt;/code&gt; メソッドが呼び出されたときにファイルが削除されます。または、&lt;a href=&quot;../../lang/runtime#addShutdownHook-java.lang.Thread-&quot;&gt; &lt;code&gt;shutdown-hook&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../../io/file#deleteOnExit--&quot;&gt; &lt;code&gt;File.deleteOnExit()&lt;/code&gt; &lt;/a&gt;メカニズムを使用して、ファイルを自動的に削除することもできます。</target>
        </trans-unit>
        <trans-unit id="7317926a77bc48bf845c713c6d355a6885acef73" translate="yes" xml:space="preserve">
          <source>As with the &lt;code&gt;createTempFile&lt;/code&gt; methods, this method is only part of a temporary-file facility. A &lt;a href=&quot;../../lang/runtime#addShutdownHook(java.lang.Thread)&quot;&gt;&lt;code&gt;shutdown-hook&lt;/code&gt;&lt;/a&gt;, or the &lt;a href=&quot;../../io/file#deleteOnExit()&quot;&gt;&lt;code&gt;File.deleteOnExit()&lt;/code&gt;&lt;/a&gt; mechanism may be used to delete the directory automatically.</source>
          <target state="translated">&lt;code&gt;createTempFile&lt;/code&gt; メソッドと同様に、このメソッドは一時ファイル機能の一部にすぎません。&lt;a href=&quot;../../lang/runtime#addShutdownHook(java.lang.Thread)&quot;&gt; &lt;code&gt;shutdown-hook&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../../io/file#deleteOnExit()&quot;&gt; &lt;code&gt;File.deleteOnExit()&lt;/code&gt; &lt;/a&gt;メカニズムが自動的にディレクトリを削除するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="326ad63f1918b9c85c6453ad60621a5368927b46" translate="yes" xml:space="preserve">
          <source>As with the &lt;code&gt;createTempFile&lt;/code&gt; methods, this method is only part of a temporary-file facility. A &lt;a href=&quot;../../lang/runtime#addShutdownHook-java.lang.Thread-&quot;&gt;&lt;code&gt;shutdown-hook&lt;/code&gt;&lt;/a&gt;, or the &lt;a href=&quot;../../io/file#deleteOnExit--&quot;&gt;&lt;code&gt;File.deleteOnExit()&lt;/code&gt;&lt;/a&gt; mechanism may be used to delete the directory automatically.</source>
          <target state="translated">&lt;code&gt;createTempFile&lt;/code&gt; メソッドと同様に、このメソッドは一時ファイル機能の一部にすぎません。&lt;a href=&quot;../../lang/runtime#addShutdownHook-java.lang.Thread-&quot;&gt; &lt;code&gt;shutdown-hook&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../../io/file#deleteOnExit--&quot;&gt; &lt;code&gt;File.deleteOnExit()&lt;/code&gt; &lt;/a&gt;メカニズムが自動的にディレクトリを削除するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="07e3b8ba36cadd3e6df85e320488c95b68d911b8" translate="yes" xml:space="preserve">
          <source>As with the regular reduction operation, &lt;code&gt;collect()&lt;/code&gt; operations can only be parallelized if appropriate conditions are met. For any partially accumulated result, combining it with an empty result container must produce an equivalent result. That is, for a partially accumulated result &lt;code&gt;p&lt;/code&gt; that is the result of any series of accumulator and combiner invocations, &lt;code&gt;p&lt;/code&gt; must be equivalent to &lt;code&gt;combiner.apply(p, supplier.get())&lt;/code&gt;.</source>
          <target state="translated">通常の縮約操作と同様に、 &lt;code&gt;collect()&lt;/code&gt; 操作は、適切な条件が満たされた場合にのみ並列化できます。部分的に蓄積された結果については、それを空の結果コンテナと組み合わせると、同等の結果が生成される必要があります。つまり、アキュムレータとコンバイナの一連の呼び出しの結果である部分的に蓄積された結果 &lt;code&gt;p&lt;/code&gt; の場合、 &lt;code&gt;p&lt;/code&gt; は、 &lt;code&gt;combiner.apply(p, supplier.get())&lt;/code&gt; と同等でなければなりません。</target>
        </trans-unit>
        <trans-unit id="bcb00a9519c459ce65b7b2341192b1e789fc3248" translate="yes" xml:space="preserve">
          <source>As you can see, the &lt;code&gt;JButton.States&lt;/code&gt; entry lists the states that the JButton style will support. You then specify the settings for each state. If you do not specify the &lt;code&gt;JButton.States&lt;/code&gt; entry, then the standard Synth states will be assumed. If you specify the entry but the list of states is empty or null, then the standard synth states will be assumed.</source>
          <target state="translated">ご覧のとおり、 &lt;code&gt;JButton.States&lt;/code&gt; エントリには、JButtonスタイルがサポートする状態が一覧表示されます。次に、各状態の設定を指定します。 &lt;code&gt;JButton.States&lt;/code&gt; エントリを指定しない場合、標準のSynth状態が想定されます。エントリを指定したが、状態のリストが空またはnullの場合、標準のシンセ状態が想定されます。</target>
        </trans-unit>
        <trans-unit id="ce160b9c85add9848ba5fabe3a06f93d6b3242c4" translate="yes" xml:space="preserve">
          <source>As you can see, the definitions are very similar. The only difference is that the convention for naming the interface is to use &lt;code&gt;&lt;em&gt;Something&lt;/em&gt;MXBean&lt;/code&gt; for MXBeans, rather than &lt;code&gt;&lt;em&gt;Something&lt;/em&gt;MBean&lt;/code&gt; for Standard MBeans.</source>
          <target state="translated">ご覧のとおり、定義は非常に似ています。唯一の違いは、インターフェースの命名規則は、標準MBeanの &lt;code&gt;&lt;em&gt;Something&lt;/em&gt;MBean&lt;/code&gt; MBeanではなく、 &lt;code&gt;&lt;em&gt;Something&lt;/em&gt;MXBean&lt;/code&gt; &lt;em&gt;Something&lt;/em&gt; MXBeanを使用することです。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="221179f56564f16c3bf0ead01596d6864af0443e" translate="yes" xml:space="preserve">
          <source>Ascending key ordered views and their iterators are faster than descending ones.</source>
          <target state="translated">昇順キー順ビューとそのイテレータは降順ビューよりも高速です。</target>
        </trans-unit>
        <trans-unit id="680836461076e4d9fd895662b650ecbef5e28569" translate="yes" xml:space="preserve">
          <source>Ascending ordered views and their iterators are faster than descending ones.</source>
          <target state="translated">昇順ビューとそのイテレータは降順ビューよりも高速です。</target>
        </trans-unit>
        <trans-unit id="fe7333ede146ba59ba3843df3e7ebb063f3db329" translate="yes" xml:space="preserve">
          <source>Ascertains whether escape processing is enabled for this &lt;code&gt;RowSet&lt;/code&gt; object.</source>
          <target state="translated">この &lt;code&gt;RowSet&lt;/code&gt; オブジェクトに対してエスケープ処理が有効になっているかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="758aa47daf61431b726197da8c21e06dda3dc2f0" translate="yes" xml:space="preserve">
          <source>Ascertains whether the last value read from this &lt;code&gt;SQLInputImpl&lt;/code&gt; object was &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;SQLInputImpl&lt;/code&gt; オブジェクトから読み取られた最後の値が &lt;code&gt;null&lt;/code&gt; であったかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="15d9bda45e150bb1a9913fe8f8dfb05cb4ff7c64" translate="yes" xml:space="preserve">
          <source>Aside from some minor deviations noted below, an instance of this class represents a URI reference as defined by &lt;a href=&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;&gt;&lt;i&gt;RFC 2396: Uniform Resource Identifiers (URI): Generic Syntax&lt;/i&gt;&lt;/a&gt;, amended by &lt;a href=&quot;http://www.ietf.org/rfc/rfc2732.txt&quot;&gt;&lt;i&gt;RFC 2732: Format for Literal IPv6 Addresses in URLs&lt;/i&gt;&lt;/a&gt;. The Literal IPv6 address format also supports scope_ids. The syntax and usage of scope_ids is described &lt;a href=&quot;inet6address#scoped&quot;&gt;here&lt;/a&gt;. This class provides constructors for creating URI instances from their components or by parsing their string forms, methods for accessing the various components of an instance, and methods for normalizing, resolving, and relativizing URI instances. Instances of this class are immutable.</source>
          <target state="translated">以下に示すいくつかの小さな逸脱は別として、このクラスのインスタンスは、&lt;a href=&quot;http://www.ietf.org/rfc/rfc2396.txt&quot;&gt;&lt;i&gt;RFC 2396：Uniform Resource Identifiers（URI）：Generic Syntax&lt;/i&gt;&lt;/a&gt;、&lt;a href=&quot;http://www.ietf.org/rfc/rfc2732.txt&quot;&gt;&lt;i&gt;RFC 2732：Format for Literal IPv6 Addresses in &lt;/i&gt;&lt;/a&gt;&lt;i&gt;URLsで&lt;/i&gt;定義されたURI参照を表し&lt;i&gt;ます&lt;/i&gt;。リテラルIPv6アドレス形式は、scope_idもサポートしています。&lt;a href=&quot;inet6address#scoped&quot;&gt;ここで&lt;/a&gt;は、scope_idsの構文と使用法について説明します。このクラスは、コンポーネントから、または文字列形式を解析してURIインスタンスを作成するためのコンストラクター、インスタンスのさまざまなコンポーネントにアクセスするためのメソッド、URIインスタンスを正規化、解決、および相対化するためのメソッドを提供します。このクラスのインスタンスは不変です。</target>
        </trans-unit>
        <trans-unit id="0dae57faef5383ad6dc622ece0c8f5e117789f9e" translate="yes" xml:space="preserve">
          <source>Aside from some minor deviations noted below, an instance of this class represents a URI reference as defined by &lt;a href=&quot;https://www.ietf.org/rfc/rfc2396.txt&quot;&gt;&lt;i&gt;RFC 2396: Uniform Resource Identifiers (URI): Generic Syntax&lt;/i&gt;&lt;/a&gt;, amended by &lt;a href=&quot;https://www.ietf.org/rfc/rfc2732.txt&quot;&gt;&lt;i&gt;RFC 2732: Format for Literal IPv6 Addresses in URLs&lt;/i&gt;&lt;/a&gt;. The Literal IPv6 address format also supports scope_ids. The syntax and usage of scope_ids is described &lt;a href=&quot;inet6address#scoped&quot;&gt;here&lt;/a&gt;. This class provides constructors for creating URI instances from their components or by parsing their string forms, methods for accessing the various components of an instance, and methods for normalizing, resolving, and relativizing URI instances. Instances of this class are immutable.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="b53f94e0b88a8376cd30e61475e0381084d5b75d" translate="yes" xml:space="preserve">
          <source>Ask the authenticator that has been registered with the system for a password.</source>
          <target state="translated">システムに登録されている認証者にパスワードを聞いてみましょう。</target>
        </trans-unit>
        <trans-unit id="37ce9a9c92de1ff89be39c1eee7738ad15cf079f" translate="yes" xml:space="preserve">
          <source>Ask the authenticator that has been registered with the system for a password. This is the preferred method for requesting a password because the hostname can be provided in cases where the InetAddress is not available.</source>
          <target state="translated">システムに登録されている認証子にパスワードを要求します。これは、InetAddress が利用できない場合にホスト名を提供できるため、パスワードを要求する際に好ましい方法です。</target>
        </trans-unit>
        <trans-unit id="dfa2042d74fe5d4408b1711c40259c2e739bf893" translate="yes" xml:space="preserve">
          <source>Ask the editor to start editing and to select everything</source>
          <target state="translated">エディターに編集を開始してもらい、すべてを選択します。</target>
        </trans-unit>
        <trans-unit id="c0b0a70195dc1449b91b352575bd84b45a3dc2a0" translate="yes" xml:space="preserve">
          <source>Ask the given &lt;code&gt;authenticator&lt;/code&gt; for a password.</source>
          <target state="translated">指定された &lt;code&gt;authenticator&lt;/code&gt; にパスワードを要求します。</target>
        </trans-unit>
        <trans-unit id="70685b4b5e5251b8ac4e294cf0f9329f70870415" translate="yes" xml:space="preserve">
          <source>Ask the given &lt;code&gt;authenticator&lt;/code&gt; for a password. If the given &lt;code&gt;authenticator&lt;/code&gt; is null, the authenticator, if any, that has been registered with the system using &lt;a href=&quot;#setDefault(java.net.Authenticator)&quot;&gt;&lt;code&gt;setDefault&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">指定された &lt;code&gt;authenticator&lt;/code&gt; にパスワードを要求します。指定された &lt;code&gt;authenticator&lt;/code&gt; がnullの場合、&lt;a href=&quot;#setDefault(java.net.Authenticator)&quot;&gt; &lt;code&gt;setDefault&lt;/code&gt; &lt;/a&gt;を使用してシステムに登録されているオーセンティケーターが使用されます。</target>
        </trans-unit>
        <trans-unit id="2b96067459f9364e53d745b6285496bafb7d8dbc" translate="yes" xml:space="preserve">
          <source>Ask the resource manager to prepare for a transaction commit of the transaction specified in xid.</source>
          <target state="translated">リソースマネージャに、xid で指定されたトランザクションのトランザクションコミットの準備を依頼します。</target>
        </trans-unit>
        <trans-unit id="2e6bb01b3d9978b9222f3cfc88666046c17032cf" translate="yes" xml:space="preserve">
          <source>Ask this authenticator for a password.</source>
          <target state="translated">この認証機能にパスワードを要求します。</target>
        </trans-unit>
        <trans-unit id="54a223f32c33573a38b8d6ba7d39910720e9071e" translate="yes" xml:space="preserve">
          <source>Asks a confirming question, like yes/no/cancel.</source>
          <target state="translated">はい/いいえ/キャンセルのような確認の質問をします。</target>
        </trans-unit>
        <trans-unit id="e2f0096d1367ce69aa70ecb7503d8a10498a0c06" translate="yes" xml:space="preserve">
          <source>Asks the current input method to reconvert text from the current client component.</source>
          <target state="translated">現在の入力メソッドに、現在のクライアントコンポーネントからテキストを再変換するように依頼します。</target>
        </trans-unit>
        <trans-unit id="8cbd44a99e0624127211f52983fe7b7a658e42ca" translate="yes" xml:space="preserve">
          <source>Asks the current input method to reconvert text from the current client component. The input method obtains the text to be reconverted from the client component using the &lt;a href=&quot;inputmethodrequests#getSelectedText(java.text.AttributedCharacterIterator.Attribute%5B%5D)&quot;&gt;&lt;code&gt;InputMethodRequests.getSelectedText&lt;/code&gt;&lt;/a&gt; method. The other &lt;code&gt;InputMethodRequests&lt;/code&gt; methods must be prepared to deal with further information requests by the input method. The composed and/or committed text will be sent to the client component as a sequence of &lt;code&gt;InputMethodEvent&lt;/code&gt;s. If the input method cannot reconvert the given text, the text is returned as committed text in an &lt;code&gt;InputMethodEvent&lt;/code&gt;.</source>
          <target state="translated">現在の入力メソッドに、現在のクライアントコンポーネントからテキストを再変換するように要求します。inputメソッドは、&lt;a href=&quot;inputmethodrequests#getSelectedText(java.text.AttributedCharacterIterator.Attribute%5B%5D)&quot;&gt; &lt;code&gt;InputMethodRequests.getSelectedText&lt;/code&gt; &lt;/a&gt;メソッドを使用して、クライアントコンポーネントから再変換されるテキストを取得します。他の &lt;code&gt;InputMethodRequests&lt;/code&gt; メソッドは、inputメソッドによる追加情報要求を処理するために準備する必要があります。作成および/またはコミットされたテキストは、 &lt;code&gt;InputMethodEvent&lt;/code&gt; のシーケンスとしてクライアントコンポーネントに送信されます。inputメソッドが指定されたテキストを再変換できない場合、そのテキストは &lt;code&gt;InputMethodEvent&lt;/code&gt; でコミットされたテキストとして返されます。</target>
        </trans-unit>
        <trans-unit id="ac710040d9edd7f70003a1f51cda6c7e543a3c41" translate="yes" xml:space="preserve">
          <source>Asks the editor if it can start editing using &lt;code&gt;anEvent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;anEvent&lt;/code&gt; を使用して編集を開始できるかどうかを編集者に尋ねます。</target>
        </trans-unit>
        <trans-unit id="0fdb7a9cc29fde0e52139a9e114e5c4daef86b3c" translate="yes" xml:space="preserve">
          <source>Asks the editor if it can start editing using &lt;code&gt;anEvent&lt;/code&gt;. &lt;code&gt;anEvent&lt;/code&gt; is in the invoking component coordinate system. The editor can not assume the Component returned by &lt;code&gt;getCellEditorComponent&lt;/code&gt; is installed. This method is intended for the use of client to avoid the cost of setting up and installing the editor component if editing is not possible. If editing can be started this method returns true.</source>
          <target state="translated">&lt;code&gt;anEvent&lt;/code&gt; を使用して編集を開始できるかどうかを編集者に尋ねます。 &lt;code&gt;anEvent&lt;/code&gt; は、呼び出し元のコンポーネントの座標系にあります。エディタは、 &lt;code&gt;getCellEditorComponent&lt;/code&gt; によって返されるコンポーネントがインストールされていると想定することはできません。この方法は、編集が不可能な場合にエディターコンポーネントをセットアップしてインストールするコストを回避するために、クライアントを使用することを目的としています。編集を開始できる場合、このメソッドはtrueを返します。</target>
        </trans-unit>
        <trans-unit id="06dde0e10bcd29c0ee90a4753e16bdaa6cc557e1" translate="yes" xml:space="preserve">
          <source>Asks this filter to pre/post-process the given exchange.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="78312fd1df600ceeb2a97bf86d0f751dabfb9ad4" translate="yes" xml:space="preserve">
          <source>Asks this filter to pre/post-process the given exchange. The filter can:</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="45efd8625e80e75e71f5326b2062c4dfbfa9b66b" translate="yes" xml:space="preserve">
          <source>Assembles system menu.</source>
          <target state="translated">システムメニューを組み立てます。</target>
        </trans-unit>
        <trans-unit id="dee4b0d912144613e9938d4cd44f33f545e9693a" translate="yes" xml:space="preserve">
          <source>AssertTree</source>
          <target state="translated">AssertTree</target>
        </trans-unit>
        <trans-unit id="e3292c12a856a02722a46d87471ff4e6faefa104" translate="yes" xml:space="preserve">
          <source>AssertionError</source>
          <target state="translated">AssertionError</target>
        </trans-unit>
        <trans-unit id="72a049221815f87248586556441a46a16237d8e4" translate="yes" xml:space="preserve">
          <source>Assign a value to the &quot;declared&quot; flag of a specific attribute.</source>
          <target state="translated">特定の属性の &quot;宣言 &quot;フラグに値を代入します。</target>
        </trans-unit>
        <trans-unit id="3179effeb5d69717e2bad863525aafb9facaa135" translate="yes" xml:space="preserve">
          <source>Assign a value to the &quot;declared&quot; flag of a specific attribute. This is normally needed only for attributes of type CDATA, including attributes whose type is changed to or from CDATA.</source>
          <target state="translated">特定の属性の &quot;宣言された &quot;フラグに値を割り当てる。これは通常、CDATA型の属性にのみ必要とされ、CDATA型に変更された、あるいはCDATAから変更された属性を含む。</target>
        </trans-unit>
        <trans-unit id="3956cdf51fca4fb0472c212d072a3c40a049bc65" translate="yes" xml:space="preserve">
          <source>Assign a value to the &quot;specified&quot; flag of a specific attribute.</source>
          <target state="translated">特定の属性の &quot;指定 &quot;フラグに値を代入します。</target>
        </trans-unit>
        <trans-unit id="1e54db72810ff4a9f71ddd57a69c6af046c56877" translate="yes" xml:space="preserve">
          <source>Assign a value to the &quot;specified&quot; flag of a specific attribute. This is the only way this flag can be cleared, except clearing by initialization with the copy constructor.</source>
          <target state="translated">特定の属性の「指定された」フラグに値を代入します。このフラグをクリアできるのは、コピーコンストラクタで初期化してクリアする以外には、この方法はありません。</target>
        </trans-unit>
        <trans-unit id="e24e824b68118fff14de0778b82b4c9dbfb94b46" translate="yes" xml:space="preserve">
          <source>Assigned</source>
          <target state="translated">Assigned</target>
        </trans-unit>
        <trans-unit id="7bba905b55142579de2a66f6b683b423c3b0fe2f" translate="yes" xml:space="preserve">
          <source>Assigning the value different from listed above will cause an unspecified behavior.</source>
          <target state="translated">上記と異なる値を指定した場合、指定した動作ができなくなります。</target>
        </trans-unit>
        <trans-unit id="aba7f8ea24d1d89adf7ccf6191e29dc4d229e16e" translate="yes" xml:space="preserve">
          <source>Assigning the value different from listed above will cause unspecified behavior.</source>
          <target state="translated">上記と異なる値を代入すると、指定した値と異なる動作をします。</target>
        </trans-unit>
        <trans-unit id="cb45aeee3f3b149b4fc58059e7b5b1f2f0cba7bb" translate="yes" xml:space="preserve">
          <source>AssignmentTree</source>
          <target state="translated">AssignmentTree</target>
        </trans-unit>
        <trans-unit id="feb44de01dc8a4662fb53826bfc183a924d5cecb" translate="yes" xml:space="preserve">
          <source>Assigns a label to this option group.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="dfcec30e3e9a474fc1350c3d5f81ef3cfeed3faf" translate="yes" xml:space="preserve">
          <source>Assigns a label to this option group. See the label attribute definition in HTML 4.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="852dbb53c173a49101772c0f25442c6ccfb20602" translate="yes" xml:space="preserve">
          <source>Assigns a new value to a cookie after the cookie is created.</source>
          <target state="translated">クッキーが作成された後、新しい値をクッキーに割り当てます。</target>
        </trans-unit>
        <trans-unit id="b52d10a10654b41ea61d70d7f65aa92071dd4dd3" translate="yes" xml:space="preserve">
          <source>Assigns a new value to a cookie after the cookie is created. If you use a binary value, you may want to use BASE64 encoding.</source>
          <target state="translated">クッキーが作成された後に新しい値をクッキーに割り当てます。バイナリ値を使用する場合は、BASE64 エンコーディングを使用したいかもしれません。</target>
        </trans-unit>
        <trans-unit id="6fe908b687fa7a787c124faff3c9e602f0ff2373" translate="yes" xml:space="preserve">
          <source>Assigns a value to a static field.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="21b9a36bbe815af5a7224a9558cd9257f9d90f8b" translate="yes" xml:space="preserve">
          <source>Assigns a value to a static field. The &lt;a href=&quot;field&quot;&gt;&lt;code&gt;Field&lt;/code&gt;&lt;/a&gt; must be valid for this ClassType; that is, it must be from the mirrored object's class or a superclass of that class. The field must not be final.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="4c6ec57416daeb7e1bf901725b6c77e9ee388e56" translate="yes" xml:space="preserve">
          <source>Assigns default positions to each glyph in this &lt;code&gt;GlyphVector&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;GlyphVector&lt;/code&gt; の各グリフにデフォルトの位置を割り当てます。</target>
        </trans-unit>
        <trans-unit id="a3a33595b5d4599556bcefe95e14bfa5c59089f3" translate="yes" xml:space="preserve">
          <source>Assigns default positions to each glyph in this &lt;code&gt;GlyphVector&lt;/code&gt;. This can destroy information generated during initial layout of this &lt;code&gt;GlyphVector&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;GlyphVector&lt;/code&gt; の各グリフにデフォルトの位置を割り当てます。これにより、この &lt;code&gt;GlyphVector&lt;/code&gt; の初期レイアウト中に生成された情報が破壊される可能性があります。</target>
        </trans-unit>
        <trans-unit id="6c53a3314f445e4a9a4018a59d0a067e552ecb6d" translate="yes" xml:space="preserve">
          <source>Assigns the current value of the encoding property.</source>
          <target state="translated">エンコーディングプロパティの現在の値を代入します。</target>
        </trans-unit>
        <trans-unit id="940caf1a2a99903001af7a3a14c58ce863f86e5c" translate="yes" xml:space="preserve">
          <source>Assigns the current value of the version property.</source>
          <target state="translated">version プロパティの現在の値を代入します。</target>
        </trans-unit>
        <trans-unit id="14131902f49a325ec31a2d035fe77e792ea1898a" translate="yes" xml:space="preserve">
          <source>Assigns the given certificate to the given alias.</source>
          <target state="translated">与えられた証明書を、与えられたエイリアスに割り当てます。</target>
        </trans-unit>
        <trans-unit id="dd54242e3214e9a11b71c1f7bbbd2c0d26edd181" translate="yes" xml:space="preserve">
          <source>Assigns the given key (that has already been protected) to the given alias.</source>
          <target state="translated">指定されたエイリアスに、指定された鍵 (既に保護されている鍵)を割り当てます。</target>
        </trans-unit>
        <trans-unit id="190310fc8afce66d231a98403c36c4c9c03fcbe3" translate="yes" xml:space="preserve">
          <source>Assigns the given key to the given alias, protecting it with the given password.</source>
          <target state="translated">与えられたエイリアスに与えられた鍵を割り当て、与えられたパスワードで保護します。</target>
        </trans-unit>
        <trans-unit id="fa0f1bbf5f4d07b8de90733569bccd093335123e" translate="yes" xml:space="preserve">
          <source>Assigns the given trusted certificate to the given alias.</source>
          <target state="translated">与えられた信頼できる証明書を、与えられたエイリアスに割り当てます。</target>
        </trans-unit>
        <trans-unit id="41bb3dd961b066e09527355b3f6b2f0decad0e47" translate="yes" xml:space="preserve">
          <source>Assigns the specified Object reference to each element of the specified array of Objects.</source>
          <target state="translated">指定されたオブジェクトの配列の各要素に、指定されたオブジェクト参照を割り当てます。</target>
        </trans-unit>
        <trans-unit id="cc29f457a43c6edbf792bb3025852f00001f92b0" translate="yes" xml:space="preserve">
          <source>Assigns the specified Object reference to each element of the specified range of the specified array of Objects.</source>
          <target state="translated">指定されたオブジェクトの配列の指定された範囲の各要素に、指定されたオブジェクト参照を代入します。</target>
        </trans-unit>
        <trans-unit id="9e6567cd1d0e6b379d3edb1755530e088fdcca25" translate="yes" xml:space="preserve">
          <source>Assigns the specified Object reference to each element of the specified range of the specified array of Objects. The range to be filled extends from index &lt;code&gt;fromIndex&lt;/code&gt;, inclusive, to index &lt;code&gt;toIndex&lt;/code&gt;, exclusive. (If &lt;code&gt;fromIndex==toIndex&lt;/code&gt;, the range to be filled is empty.)</source>
          <target state="translated">指定されたObjectの配列の指定された範囲の各要素に指定されたObject参照を割り当てます。充填される範囲は、インデックスから延び &lt;code&gt;fromIndex&lt;/code&gt; インデックスに、包括的、 &lt;code&gt;toIndex&lt;/code&gt; の、排他。（ &lt;code&gt;fromIndex==toIndex&lt;/code&gt; 場合、入力される範囲は空です。）</target>
        </trans-unit>
        <trans-unit id="aa97362d123bf088ceb72ad6ec4beca483f4bbd7" translate="yes" xml:space="preserve">
          <source>Assigns the specified boolean value to each element of the specified array of booleans.</source>
          <target state="translated">指定されたブーリアン値を、指定されたブーリアン配列の各要素に割り当てます。</target>
        </trans-unit>
        <trans-unit id="a9fb44ef9537d0bed01355fa19c92227ce44a2bd" translate="yes" xml:space="preserve">
          <source>Assigns the specified boolean value to each element of the specified range of the specified array of booleans.</source>
          <target state="translated">指定されたブーリアンの配列の指定された範囲の各要素に指定されたブーリアン値を代入します。</target>
        </trans-unit>
        <trans-unit id="19c114567eeb53351e27e40c31941a7cad152ac2" translate="yes" xml:space="preserve">
          <source>Assigns the specified boolean value to each element of the specified range of the specified array of booleans. The range to be filled extends from index &lt;code&gt;fromIndex&lt;/code&gt;, inclusive, to index &lt;code&gt;toIndex&lt;/code&gt;, exclusive. (If &lt;code&gt;fromIndex==toIndex&lt;/code&gt;, the range to be filled is empty.)</source>
          <target state="translated">指定されたブール値の配列の指定された範囲の各要素に指定されたブール値を割り当てます。充填される範囲は、インデックスから延び &lt;code&gt;fromIndex&lt;/code&gt; インデックスに、包括的、 &lt;code&gt;toIndex&lt;/code&gt; の、排他。（ &lt;code&gt;fromIndex==toIndex&lt;/code&gt; 場合、入力される範囲は空です。）</target>
        </trans-unit>
        <trans-unit id="b71da5862ab3bca6cd964d71a1c4b63d88307544" translate="yes" xml:space="preserve">
          <source>Assigns the specified byte value to each element of the specified array of bytes.</source>
          <target state="translated">指定されたバイト数の配列の各要素に指定されたバイト値を代入します。</target>
        </trans-unit>
        <trans-unit id="066d0c8db44b64c11d31eaf82ed6f233a443883d" translate="yes" xml:space="preserve">
          <source>Assigns the specified byte value to each element of the specified range of the specified array of bytes.</source>
          <target state="translated">指定されたバイト値を、指定されたバイト配列の指定範囲の各要素に代入します。</target>
        </trans-unit>
        <trans-unit id="aabf230d433b804d69bfbdde2d2bbe871d5db946" translate="yes" xml:space="preserve">
          <source>Assigns the specified byte value to each element of the specified range of the specified array of bytes. The range to be filled extends from index &lt;code&gt;fromIndex&lt;/code&gt;, inclusive, to index &lt;code&gt;toIndex&lt;/code&gt;, exclusive. (If &lt;code&gt;fromIndex==toIndex&lt;/code&gt;, the range to be filled is empty.)</source>
          <target state="translated">指定されたバイト配列の指定された範囲の各要素に指定されたバイト値を割り当てます。充填される範囲は、インデックスから延び &lt;code&gt;fromIndex&lt;/code&gt; インデックスに、包括的、 &lt;code&gt;toIndex&lt;/code&gt; の、排他。（ &lt;code&gt;fromIndex==toIndex&lt;/code&gt; 場合、入力される範囲は空です。）</target>
        </trans-unit>
        <trans-unit id="a61cd2fecf8872fd26aa3b2bc9d7203ef55288db" translate="yes" xml:space="preserve">
          <source>Assigns the specified char value to each element of the specified array of chars.</source>
          <target state="translated">指定された文字の配列の各要素に、指定された文字の値を代入します。</target>
        </trans-unit>
        <trans-unit id="9b9d986a8a5b5cfc53fe22c191d9f02b111d7c7b" translate="yes" xml:space="preserve">
          <source>Assigns the specified char value to each element of the specified range of the specified array of chars.</source>
          <target state="translated">指定されたcharの配列の指定された範囲の各要素に、指定されたcharの値を代入します。</target>
        </trans-unit>
        <trans-unit id="bfc01c4cd64169604e3669500d07ccedad5fa31b" translate="yes" xml:space="preserve">
          <source>Assigns the specified char value to each element of the specified range of the specified array of chars. The range to be filled extends from index &lt;code&gt;fromIndex&lt;/code&gt;, inclusive, to index &lt;code&gt;toIndex&lt;/code&gt;, exclusive. (If &lt;code&gt;fromIndex==toIndex&lt;/code&gt;, the range to be filled is empty.)</source>
          <target state="translated">指定された文字配列の指定された範囲の各要素に指定された文字値を割り当てます。充填される範囲は、インデックスから延び &lt;code&gt;fromIndex&lt;/code&gt; インデックスに、包括的、 &lt;code&gt;toIndex&lt;/code&gt; の、排他。（ &lt;code&gt;fromIndex==toIndex&lt;/code&gt; 場合、入力される範囲は空です。）</target>
        </trans-unit>
        <trans-unit id="aa2949a21b0bda3197dc597b50e2edbadd924d2d" translate="yes" xml:space="preserve">
          <source>Assigns the specified double value to each element of the specified array of doubles.</source>
          <target state="translated">指定された倍数の配列の各要素に、指定された倍数の値を代入します。</target>
        </trans-unit>
        <trans-unit id="d747a12501c41aa9ea13554b2c57fec5aa48a4ae" translate="yes" xml:space="preserve">
          <source>Assigns the specified double value to each element of the specified range of the specified array of doubles.</source>
          <target state="translated">指定された倍数の配列の指定された範囲の各要素に、指定された倍数の値を代入します。</target>
        </trans-unit>
        <trans-unit id="c2cccf0fbbdc4c631f0191e8949b6b9e251d2e05" translate="yes" xml:space="preserve">
          <source>Assigns the specified double value to each element of the specified range of the specified array of doubles. The range to be filled extends from index &lt;code&gt;fromIndex&lt;/code&gt;, inclusive, to index &lt;code&gt;toIndex&lt;/code&gt;, exclusive. (If &lt;code&gt;fromIndex==toIndex&lt;/code&gt;, the range to be filled is empty.)</source>
          <target state="translated">指定されたdouble値の配列の指定された範囲の各要素に指定されたdouble値を割り当てます。充填される範囲は、インデックスから延び &lt;code&gt;fromIndex&lt;/code&gt; インデックスに、包括的、 &lt;code&gt;toIndex&lt;/code&gt; の、排他。（ &lt;code&gt;fromIndex==toIndex&lt;/code&gt; 場合、入力される範囲は空です。）</target>
        </trans-unit>
        <trans-unit id="548f8d9d8d90319449cd7c1e43c0ddb3165d7cba" translate="yes" xml:space="preserve">
          <source>Assigns the specified float value to each element of the specified array of floats.</source>
          <target state="translated">指定された float の配列の各要素に、指定された float の値を代入します。</target>
        </trans-unit>
        <trans-unit id="2544a9ca144b11339a617b3d5c9d97a0d4d7169a" translate="yes" xml:space="preserve">
          <source>Assigns the specified float value to each element of the specified range of the specified array of floats.</source>
          <target state="translated">指定された float の配列の指定された範囲の各要素に、指定された float の値を代入します。</target>
        </trans-unit>
        <trans-unit id="87f83cba2e8ee29319591b81320b49a9a38a3f77" translate="yes" xml:space="preserve">
          <source>Assigns the specified float value to each element of the specified range of the specified array of floats. The range to be filled extends from index &lt;code&gt;fromIndex&lt;/code&gt;, inclusive, to index &lt;code&gt;toIndex&lt;/code&gt;, exclusive. (If &lt;code&gt;fromIndex==toIndex&lt;/code&gt;, the range to be filled is empty.)</source>
          <target state="translated">指定されたfloat値の配列の指定された範囲の各要素に指定されたfloat値を割り当てます。充填される範囲は、インデックスから延び &lt;code&gt;fromIndex&lt;/code&gt; インデックスに、包括的、 &lt;code&gt;toIndex&lt;/code&gt; の、排他。（ &lt;code&gt;fromIndex==toIndex&lt;/code&gt; 場合、入力される範囲は空です。）</target>
        </trans-unit>
        <trans-unit id="8ab05d5d5c34361f40aec66e70227fcc60b823b6" translate="yes" xml:space="preserve">
          <source>Assigns the specified int value to each element of the specified array of ints.</source>
          <target state="translated">指定されたintの配列の各要素に指定されたint値を代入します。</target>
        </trans-unit>
        <trans-unit id="15dcd4995be25075436a346bb2447364772538da" translate="yes" xml:space="preserve">
          <source>Assigns the specified int value to each element of the specified range of the specified array of ints.</source>
          <target state="translated">指定されたintの配列の指定された範囲の各要素に、指定されたintの値を代入します。</target>
        </trans-unit>
        <trans-unit id="8ab20ceeff85d29f36f3312d2b8c7695c820d435" translate="yes" xml:space="preserve">
          <source>Assigns the specified int value to each element of the specified range of the specified array of ints. The range to be filled extends from index &lt;code&gt;fromIndex&lt;/code&gt;, inclusive, to index &lt;code&gt;toIndex&lt;/code&gt;, exclusive. (If &lt;code&gt;fromIndex==toIndex&lt;/code&gt;, the range to be filled is empty.)</source>
          <target state="translated">指定されたint値の配列の指定された範囲の各要素に指定されたint値を割り当てます。充填される範囲は、インデックスから延び &lt;code&gt;fromIndex&lt;/code&gt; インデックスに、包括的、 &lt;code&gt;toIndex&lt;/code&gt; の、排他。（ &lt;code&gt;fromIndex==toIndex&lt;/code&gt; 場合、入力される範囲は空です。）</target>
        </trans-unit>
        <trans-unit id="8e7cfdfe806edcc64f438c51c5879abbcede733e" translate="yes" xml:space="preserve">
          <source>Assigns the specified long value to each element of the specified array of longs.</source>
          <target state="translated">指定されたlongの配列の各要素に、指定されたlongの値を代入します。</target>
        </trans-unit>
        <trans-unit id="f4cf28244917fe9de5a11c62f7d5f82f3bded36a" translate="yes" xml:space="preserve">
          <source>Assigns the specified long value to each element of the specified range of the specified array of longs.</source>
          <target state="translated">指定されたlongの配列の指定された範囲の各要素に、指定されたlongの値を代入します。</target>
        </trans-unit>
        <trans-unit id="7c12a444178cac052d8254551cf806e6c839cad0" translate="yes" xml:space="preserve">
          <source>Assigns the specified long value to each element of the specified range of the specified array of longs. The range to be filled extends from index &lt;code&gt;fromIndex&lt;/code&gt;, inclusive, to index &lt;code&gt;toIndex&lt;/code&gt;, exclusive. (If &lt;code&gt;fromIndex==toIndex&lt;/code&gt;, the range to be filled is empty.)</source>
          <target state="translated">指定されたlong値の配列の指定された範囲の各要素に指定されたlong値を割り当てます。充填される範囲は、インデックスから延び &lt;code&gt;fromIndex&lt;/code&gt; インデックスに、包括的、 &lt;code&gt;toIndex&lt;/code&gt; の、排他。（ &lt;code&gt;fromIndex==toIndex&lt;/code&gt; 場合、入力される範囲は空です。）</target>
        </trans-unit>
        <trans-unit id="b0362a5fb07ffcc97a8d631afd78d1343ee6009e" translate="yes" xml:space="preserve">
          <source>Assigns the specified short value to each element of the specified array of shorts.</source>
          <target state="translated">指定されたショートの配列の各要素に、指定されたショートの値を代入します。</target>
        </trans-unit>
        <trans-unit id="b908fdb8daae43487c0422a708e8dfeb85f68cfb" translate="yes" xml:space="preserve">
          <source>Assigns the specified short value to each element of the specified range of the specified array of shorts.</source>
          <target state="translated">指定されたショートの配列の指定された範囲の各要素に、指定されたショートの値を代入します。</target>
        </trans-unit>
        <trans-unit id="bb589c326208de9d7da93d57ef3ba32112689328" translate="yes" xml:space="preserve">
          <source>Assigns the specified short value to each element of the specified range of the specified array of shorts. The range to be filled extends from index &lt;code&gt;fromIndex&lt;/code&gt;, inclusive, to index &lt;code&gt;toIndex&lt;/code&gt;, exclusive. (If &lt;code&gt;fromIndex==toIndex&lt;/code&gt;, the range to be filled is empty.)</source>
          <target state="translated">指定されたshort値の配列の指定された範囲の各要素に指定されたshort値を割り当てます。充填される範囲は、インデックスから延び &lt;code&gt;fromIndex&lt;/code&gt; インデックスに、包括的、 &lt;code&gt;toIndex&lt;/code&gt; の、排他。（ &lt;code&gt;fromIndex==toIndex&lt;/code&gt; 場合、入力される範囲は空です。）</target>
        </trans-unit>
        <trans-unit id="a39e950342c74cb6be62ea68712b0794ec71defa" translate="yes" xml:space="preserve">
          <source>Associate a &lt;code&gt;DropTarget&lt;/code&gt; with this component.</source>
          <target state="translated">関連付け &lt;code&gt;DropTarget&lt;/code&gt; このコンポーネントと。</target>
        </trans-unit>
        <trans-unit id="3d5ab5a5222dcc5ea4afd28ee96ca88a58abfa6d" translate="yes" xml:space="preserve">
          <source>Associate a &lt;code&gt;DropTarget&lt;/code&gt; with this component. The &lt;code&gt;Component&lt;/code&gt; will receive drops only if it is enabled.</source>
          <target state="translated">関連付け &lt;code&gt;DropTarget&lt;/code&gt; このコンポーネントと。 &lt;code&gt;Component&lt;/code&gt; 、それが有効になっている場合にのみドロップを受け取ります。</target>
        </trans-unit>
        <trans-unit id="afda1354a3a51a2a4ece66c971df42f00468cfd9" translate="yes" xml:space="preserve">
          <source>Associate a named attribute with this feature.</source>
          <target state="translated">名前付き属性をこの機能に関連付けます。</target>
        </trans-unit>
        <trans-unit id="55a8164c7b8d7289d071313db70a61de250d6bb6" translate="yes" xml:space="preserve">
          <source>Associate an object to a key on this node.</source>
          <target state="translated">このノードのキーにオブジェクトを関連付けます。</target>
        </trans-unit>
        <trans-unit id="7f664988fe3783f9a217e070c6a53a17cd55f4d9" translate="yes" xml:space="preserve">
          <source>Associate an object to a key on this node. The object can later be retrieved from this node by calling &lt;code&gt;getUserData&lt;/code&gt; with the same key.</source>
          <target state="translated">オブジェクトをこのノードのキーに関連付けます。同じキーで &lt;code&gt;getUserData&lt;/code&gt; を呼び出すことにより、後でこのノードからオブジェクトを取得できます。</target>
        </trans-unit>
        <trans-unit id="fed07227fb7016097478db12f2ca5f4e93599583" translate="yes" xml:space="preserve">
          <source>Associate the newly instantiated Applet with the appropriate AppletContext.</source>
          <target state="translated">新しくインスタンス化されたアプレットを適切な AppletContext に関連付けます。</target>
        </trans-unit>
        <trans-unit id="5ea80ee780b44807cfe90a72a283ba223f4cc7d4" translate="yes" xml:space="preserve">
          <source>Associate the provided &lt;code&gt;Subject&lt;/code&gt; with this &lt;code&gt;SubjectDomainCombiner&lt;/code&gt;.</source>
          <target state="translated">提供された &lt;code&gt;Subject&lt;/code&gt; をこの &lt;code&gt;SubjectDomainCombiner&lt;/code&gt; に関連付けます。</target>
        </trans-unit>
        <trans-unit id="96a7869a23b73f3451a0232cf15bec5ea0c63c5f" translate="yes" xml:space="preserve">
          <source>Associate this PrinterJob with a new PrintService.</source>
          <target state="translated">このPrinterJobを新しいPrintServiceに関連付ける。</target>
        </trans-unit>
        <trans-unit id="fe1cb668107f9f3d7fd39778f9092c90c15f0854" translate="yes" xml:space="preserve">
          <source>Associate this PrinterJob with a new PrintService. This method is overridden by subclasses which support specifying a Print Service. Throws &lt;code&gt;PrinterException&lt;/code&gt; if the specified service cannot support the &lt;code&gt;Pageable&lt;/code&gt; and &lt;code&gt;Printable&lt;/code&gt; interfaces necessary to support 2D printing.</source>
          <target state="translated">このPrinterJobを新しいPrintServiceに関連付けます。このメソッドは、印刷サービスの指定をサポートするサブクラスによってオーバーライドされます。スロー &lt;code&gt;PrinterException&lt;/code&gt; のは、指定されたサービスをサポートできない場合は &lt;code&gt;Pageable&lt;/code&gt; および &lt;code&gt;Printable&lt;/code&gt; 2次元印刷をサポートするために必要なインターフェイスを。</target>
        </trans-unit>
        <trans-unit id="e29d38541cd869d3405412eed5b1633671996421" translate="yes" xml:space="preserve">
          <source>Associated</source>
          <target state="translated">Associated</target>
        </trans-unit>
        <trans-unit id="3246840316d0ddc59ad3c49063f2862ee303c3b2" translate="yes" xml:space="preserve">
          <source>Associated information.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f33b766b2ca7f60340f64c18e7dd44abd4794549" translate="yes" xml:space="preserve">
          <source>Associated information. See the content attribute definition in HTML 4.0.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="ab2853b54ff68cc61d43758928563f5524e96c5d" translate="yes" xml:space="preserve">
          <source>Associated with pattern matching for instanceof, a preview feature of the Java language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c8ce7ecaed08cad36eddbe2655952c3488a9b2c3" translate="yes" xml:space="preserve">
          <source>Associated with pattern matching for {@code instanceof}, a preview feature of the Java language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="92aad05ea7a40fb1731ceb7ae96277b437e5080c" translate="yes" xml:space="preserve">
          <source>Associated with records, a preview feature of the Java language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c2c2e91067ff8dd70801ff43a0df716100ca2dea" translate="yes" xml:space="preserve">
          <source>Associated with sealed classes, a preview feature of the Java language.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="f50b7fd0df03584f3b5bca62d24db870b1c88efd" translate="yes" xml:space="preserve">
          <source>Associated with the issuance of an event set, suspensions may have occurred in the target VM. These suspensions correspond with the &lt;a href=&quot;#suspendPolicy()&quot;&gt;&lt;code&gt;suspend policy&lt;/code&gt;&lt;/a&gt;. To assure matching resumes occur, it is recommended, where possible, to complete the processing of an event set with &lt;a href=&quot;#resume()&quot;&gt;&lt;code&gt;EventSet.resume()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="c56252f4b250dc006a0320b3dbe2ee3bd8d9e4bb" translate="yes" xml:space="preserve">
          <source>Associates a &lt;code&gt;Bindings&lt;/code&gt; instance with a particular scope in this &lt;code&gt;ScriptContext&lt;/code&gt;.</source>
          <target state="translated">関連付ける &lt;code&gt;Bindings&lt;/code&gt; このにおける特定のスコープでインスタンス &lt;code&gt;ScriptContext&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b775edadbddda2d7d7523bed597c7f2ffebaac1" translate="yes" xml:space="preserve">
          <source>Associates a &lt;code&gt;Bindings&lt;/code&gt; instance with a particular scope in this &lt;code&gt;ScriptContext&lt;/code&gt;. Calls to the &lt;code&gt;getAttribute&lt;/code&gt; and &lt;code&gt;setAttribute&lt;/code&gt; methods must map to the &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;put&lt;/code&gt; methods of the &lt;code&gt;Bindings&lt;/code&gt; for the specified scope.</source>
          <target state="translated">関連付ける &lt;code&gt;Bindings&lt;/code&gt; このにおける特定のスコープでインスタンス &lt;code&gt;ScriptContext&lt;/code&gt; 。 &lt;code&gt;getAttribute&lt;/code&gt; メソッドと &lt;code&gt;setAttribute&lt;/code&gt; メソッドの呼び出しは、指定されたスコープの &lt;code&gt;Bindings&lt;/code&gt; の &lt;code&gt;get&lt;/code&gt; メソッドと &lt;code&gt;put&lt;/code&gt; メソッドにマップする必要があります。</target>
        </trans-unit>
        <trans-unit id="429c2cbe243b64b1cc542b6771ea7e607e72de21" translate="yes" xml:space="preserve">
          <source>Associates a property with the document.</source>
          <target state="translated">プロパティをドキュメントに関連付けます。</target>
        </trans-unit>
        <trans-unit id="561f0cb319ee05eb8f7dd277fd39cbc5f41079e6" translate="yes" xml:space="preserve">
          <source>Associates a property with the document. Two standard property keys provided are: &lt;a href=&quot;#StreamDescriptionProperty&quot;&gt; &lt;code&gt;StreamDescriptionProperty&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#TitleProperty&quot;&gt;&lt;code&gt;TitleProperty&lt;/code&gt;&lt;/a&gt;. Other properties, such as author, may also be defined.</source>
          <target state="translated">プロパティをドキュメントに関連付けます。提供される2つの標準プロパティキーは、&lt;a href=&quot;#StreamDescriptionProperty&quot;&gt; &lt;code&gt;StreamDescriptionProperty&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#TitleProperty&quot;&gt; &lt;code&gt;TitleProperty&lt;/code&gt; &lt;/a&gt;です。著者などの他のプロパティも定義できます。</target>
        </trans-unit>
        <trans-unit id="d77c9190951a1c06534733f64b9cfbabd320492c" translate="yes" xml:space="preserve">
          <source>Associates a string representing the specified boolean value with the specified key in this preference node.</source>
          <target state="translated">指定されたブール値を表す文字列を、このプリファレンスノードの指定されたキーに関連付けます。</target>
        </trans-unit>
        <trans-unit id="3fad436712ad26a7310dfd53775ac46a6cb4631a" translate="yes" xml:space="preserve">
          <source>Associates a string representing the specified boolean value with the specified key in this preference node. The associated string is &lt;code&gt;&quot;true&quot;&lt;/code&gt; if the value is true, and &lt;code&gt;&quot;false&quot;&lt;/code&gt; if it is false. This method is intended for use in conjunction with &lt;a href=&quot;#getBoolean(java.lang.String,boolean)&quot;&gt;&lt;code&gt;getBoolean(java.lang.String, boolean)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたブール値を表す文字列を、この設定ノードの指定されたキーに関連付けます。関連する文字列は、値がtrueの場合は &lt;code&gt;&quot;true&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;false&quot;&lt;/code&gt; 場合は「false」です。このメソッドは、&lt;a href=&quot;#getBoolean(java.lang.String,boolean)&quot;&gt; &lt;code&gt;getBoolean(java.lang.String, boolean)&lt;/code&gt; &lt;/a&gt;と組み合わせて使用​​することを目的としています。</target>
        </trans-unit>
        <trans-unit id="cb1e81826acc11cdd4fd8787f2f261093651dd07" translate="yes" xml:space="preserve">
          <source>Associates a string representing the specified boolean value with the specified key in this preference node. The associated string is &lt;code&gt;&quot;true&quot;&lt;/code&gt; if the value is true, and &lt;code&gt;&quot;false&quot;&lt;/code&gt; if it is false. This method is intended for use in conjunction with &lt;a href=&quot;preferences#getBoolean-java.lang.String-boolean-&quot;&gt;&lt;code&gt;getBoolean(java.lang.String, boolean)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたブール値を表す文字列を、この設定ノード内の指定されたキーに関連付けます。関連する文字列は、値がtrueの場合は &lt;code&gt;&quot;true&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;false&quot;&lt;/code&gt; 場合は「false」です。このメソッドは、&lt;a href=&quot;preferences#getBoolean-java.lang.String-boolean-&quot;&gt; &lt;code&gt;getBoolean(java.lang.String, boolean)&lt;/code&gt; &lt;/a&gt;と組み合わせて使用​​するためのものです。</target>
        </trans-unit>
        <trans-unit id="62ce37159c6c7c1e8fac38ab3d53b3e0b0cbbe84" translate="yes" xml:space="preserve">
          <source>Associates a string representing the specified byte array with the specified key in this preference node.</source>
          <target state="translated">指定されたバイト配列を表す文字列を、このプリファレンスノードの指定されたキーに関連付けます。</target>
        </trans-unit>
        <trans-unit id="2833c20c864a4a65f2407bd5a5f7c09afc6d20e5" translate="yes" xml:space="preserve">
          <source>Associates a string representing the specified byte array with the specified key in this preference node. The associated string is the</source>
          <target state="translated">指定されたバイト配列を表す文字列を、このプリファレンスノードの指定されたキーに関連付けます。関連付ける文字列は</target>
        </trans-unit>
        <trans-unit id="b986481f8eebbd1cfc5e920b04128b1fbbff926d" translate="yes" xml:space="preserve">
          <source>Associates a string representing the specified double value with the specified key in this preference node.</source>
          <target state="translated">指定された二重値を表す文字列を、このプリファレンスノードの指定されたキーに関連付けます。</target>
        </trans-unit>
        <trans-unit id="59b1f3e3783dcc197f8456f3d721d926d9807199" translate="yes" xml:space="preserve">
          <source>Associates a string representing the specified double value with the specified key in this preference node. The associated string is the one that would be returned if the double value were passed to &lt;a href=&quot;../../../../java.base/java/lang/double#toString(double)&quot;&gt;&lt;code&gt;Double.toString(double)&lt;/code&gt;&lt;/a&gt;. This method is intended for use in conjunction with &lt;a href=&quot;#getDouble(java.lang.String,double)&quot;&gt;&lt;code&gt;getDouble(java.lang.String, double)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたdouble値を表す文字列を、この設定ノードの指定されたキーに関連付けます。関連する文字列は、double値が&lt;a href=&quot;../../../../java.base/java/lang/double#toString(double)&quot;&gt; &lt;code&gt;Double.toString(double)&lt;/code&gt; に&lt;/a&gt;渡された場合に返される文字列です。このメソッドは、&lt;a href=&quot;#getDouble(java.lang.String,double)&quot;&gt; &lt;code&gt;getDouble(java.lang.String, double)&lt;/code&gt; &lt;/a&gt;と組み合わせて使用​​することを目的としています。</target>
        </trans-unit>
        <trans-unit id="405e98c0ec2e33a2102051245efeb3354d88d37a" translate="yes" xml:space="preserve">
          <source>Associates a string representing the specified double value with the specified key in this preference node. The associated string is the one that would be returned if the double value were passed to &lt;a href=&quot;../../lang/double#toString-double-&quot;&gt;&lt;code&gt;Double.toString(double)&lt;/code&gt;&lt;/a&gt;. This method is intended for use in conjunction with &lt;a href=&quot;preferences#getDouble-java.lang.String-double-&quot;&gt;&lt;code&gt;getDouble(java.lang.String, double)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたdouble値を表す文字列を、この設定ノード内の指定されたキーに関連付けます。関連する文字列は、double値が&lt;a href=&quot;../../lang/double#toString-double-&quot;&gt; &lt;code&gt;Double.toString(double)&lt;/code&gt; に&lt;/a&gt;渡された場合に返される文字列です。このメソッドは、&lt;a href=&quot;preferences#getDouble-java.lang.String-double-&quot;&gt; &lt;code&gt;getDouble(java.lang.String, double)&lt;/code&gt; &lt;/a&gt;と組み合わせて使用​​するためのものです。</target>
        </trans-unit>
        <trans-unit id="811d93a2d81ac217e884d98ea40501bed7e07b28" translate="yes" xml:space="preserve">
          <source>Associates a string representing the specified float value with the specified key in this preference node.</source>
          <target state="translated">指定された float 値を表す文字列を、このプリファレンスノードの指定されたキーに関連付けます。</target>
        </trans-unit>
        <trans-unit id="265b6ab460e863a9f81e12fae614898938027fb4" translate="yes" xml:space="preserve">
          <source>Associates a string representing the specified float value with the specified key in this preference node. The associated string is the one that would be returned if the float value were passed to &lt;a href=&quot;../../../../java.base/java/lang/float#toString(float)&quot;&gt;&lt;code&gt;Float.toString(float)&lt;/code&gt;&lt;/a&gt;. This method is intended for use in conjunction with &lt;a href=&quot;#getFloat(java.lang.String,float)&quot;&gt;&lt;code&gt;getFloat(java.lang.String, float)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたfloat値を表す文字列を、この設定ノードの指定されたキーに関連付けます。関連する文字列は、float値が&lt;a href=&quot;../../../../java.base/java/lang/float#toString(float)&quot;&gt; &lt;code&gt;Float.toString(float)&lt;/code&gt; に&lt;/a&gt;渡された場合に返される文字列です。このメソッドは、&lt;a href=&quot;#getFloat(java.lang.String,float)&quot;&gt; &lt;code&gt;getFloat(java.lang.String, float)&lt;/code&gt; &lt;/a&gt;と組み合わせて使用​​することを目的としています。</target>
        </trans-unit>
        <trans-unit id="e1a97e7672e7f164eb7d746fc62a23c0bfd82b25" translate="yes" xml:space="preserve">
          <source>Associates a string representing the specified float value with the specified key in this preference node. The associated string is the one that would be returned if the float value were passed to &lt;a href=&quot;../../lang/float#toString-float-&quot;&gt;&lt;code&gt;Float.toString(float)&lt;/code&gt;&lt;/a&gt;. This method is intended for use in conjunction with &lt;a href=&quot;preferences#getFloat-java.lang.String-float-&quot;&gt;&lt;code&gt;getFloat(java.lang.String, float)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたfloat値を表す文字列を、この設定ノード内の指定されたキーに関連付けます。関連する文字列は、float値が&lt;a href=&quot;../../lang/float#toString-float-&quot;&gt; &lt;code&gt;Float.toString(float)&lt;/code&gt; に&lt;/a&gt;渡された場合に返される文字列です。このメソッドは、&lt;a href=&quot;preferences#getFloat-java.lang.String-float-&quot;&gt; &lt;code&gt;getFloat(java.lang.String, float)&lt;/code&gt; &lt;/a&gt;と組み合わせて使用​​するためのものです。</target>
        </trans-unit>
        <trans-unit id="3f126d853d1c8c1081d99f7088f1bc511ff589e3" translate="yes" xml:space="preserve">
          <source>Associates a string representing the specified int value with the specified key in this preference node.</source>
          <target state="translated">指定されたint値を表す文字列を、このプリファレンスノードの指定されたキーに関連付けます。</target>
        </trans-unit>
        <trans-unit id="9d82ccd21c0b6c1717de6a0d084f3786544f8d0c" translate="yes" xml:space="preserve">
          <source>Associates a string representing the specified int value with the specified key in this preference node. The associated string is the one that would be returned if the int value were passed to &lt;a href=&quot;../../../../java.base/java/lang/integer#toString(int)&quot;&gt;&lt;code&gt;Integer.toString(int)&lt;/code&gt;&lt;/a&gt;. This method is intended for use in conjunction with &lt;a href=&quot;#getInt(java.lang.String,int)&quot;&gt;&lt;code&gt;getInt(java.lang.String, int)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたint値を表す文字列を、この設定ノードの指定されたキーに関連付けます。関連する文字列は、int値が&lt;a href=&quot;../../../../java.base/java/lang/integer#toString(int)&quot;&gt; &lt;code&gt;Integer.toString(int)&lt;/code&gt; に&lt;/a&gt;渡された場合に返される文字列です。このメソッドは、&lt;a href=&quot;#getInt(java.lang.String,int)&quot;&gt; &lt;code&gt;getInt(java.lang.String, int)&lt;/code&gt; &lt;/a&gt;と組み合わせて使用​​することを目的としています。</target>
        </trans-unit>
        <trans-unit id="402eba66a399cc572ffcc2bcf5d31eaf5d6758a9" translate="yes" xml:space="preserve">
          <source>Associates a string representing the specified int value with the specified key in this preference node. The associated string is the one that would be returned if the int value were passed to &lt;a href=&quot;../../lang/integer#toString-int-&quot;&gt;&lt;code&gt;Integer.toString(int)&lt;/code&gt;&lt;/a&gt;. This method is intended for use in conjunction with &lt;a href=&quot;preferences#getInt-java.lang.String-int-&quot;&gt;&lt;code&gt;getInt(java.lang.String, int)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたint値を表す文字列を、この設定ノード内の指定されたキーに関連付けます。関連する文字列は、int値が&lt;a href=&quot;../../lang/integer#toString-int-&quot;&gt; &lt;code&gt;Integer.toString(int)&lt;/code&gt; に&lt;/a&gt;渡された場合に返される文字列です。このメソッドは、&lt;a href=&quot;preferences#getInt-java.lang.String-int-&quot;&gt; &lt;code&gt;getInt(java.lang.String, int)&lt;/code&gt; &lt;/a&gt;と組み合わせて使用​​するためのものです。</target>
        </trans-unit>
        <trans-unit id="59874ea1a953f3203589d3f0a64f675b70a05d8e" translate="yes" xml:space="preserve">
          <source>Associates a string representing the specified long value with the specified key in this preference node.</source>
          <target state="translated">指定された長い値を表す文字列を、このプリファレンスノードの指定されたキーに関連付けます。</target>
        </trans-unit>
        <trans-unit id="f50f4e9f4152a2c76a5b968e9850a70d4c665bec" translate="yes" xml:space="preserve">
          <source>Associates a string representing the specified long value with the specified key in this preference node. The associated string is the one that would be returned if the long value were passed to &lt;a href=&quot;../../../../java.base/java/lang/long#toString(long)&quot;&gt;&lt;code&gt;Long.toString(long)&lt;/code&gt;&lt;/a&gt;. This method is intended for use in conjunction with &lt;a href=&quot;#getLong(java.lang.String,long)&quot;&gt;&lt;code&gt;getLong(java.lang.String, long)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたlong値を表す文字列を、この設定ノードの指定されたキーに関連付けます。関連する文字列は、long値が&lt;a href=&quot;../../../../java.base/java/lang/long#toString(long)&quot;&gt; &lt;code&gt;Long.toString(long)&lt;/code&gt; に&lt;/a&gt;渡された場合に返される文字列です。このメソッドは、&lt;a href=&quot;#getLong(java.lang.String,long)&quot;&gt; &lt;code&gt;getLong(java.lang.String, long)&lt;/code&gt; &lt;/a&gt;と組み合わせて使用​​することを目的としています。</target>
        </trans-unit>
        <trans-unit id="72969c845bbda1489fd6757f2f1f88ef6d5c3422" translate="yes" xml:space="preserve">
          <source>Associates a string representing the specified long value with the specified key in this preference node. The associated string is the one that would be returned if the long value were passed to &lt;a href=&quot;../../lang/long#toString-long-&quot;&gt;&lt;code&gt;Long.toString(long)&lt;/code&gt;&lt;/a&gt;. This method is intended for use in conjunction with &lt;a href=&quot;preferences#getLong-java.lang.String-long-&quot;&gt;&lt;code&gt;getLong(java.lang.String, long)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">指定されたlong値を表す文字列を、この設定ノード内の指定されたキーに関連付けます。関連する文字列は、long値が&lt;a href=&quot;../../lang/long#toString-long-&quot;&gt; &lt;code&gt;Long.toString(long)&lt;/code&gt; に&lt;/a&gt;渡された場合に返される文字列です。このメソッドは、&lt;a href=&quot;preferences#getLong-java.lang.String-long-&quot;&gt; &lt;code&gt;getLong(java.lang.String, long)&lt;/code&gt; &lt;/a&gt;と組み合わせて使用​​するためのものです。</target>
        </trans-unit>
        <trans-unit id="9dd3f787ca15bb5eefd28f5c6d487adefe12ce1b" translate="yes" xml:space="preserve">
          <source>Associates the editor with a text document.</source>
          <target state="translated">エディタとテキスト文書を関連付けます。</target>
        </trans-unit>
        <trans-unit id="9d10851be40e90636ddb547482ce215bee2592b6" translate="yes" xml:space="preserve">
          <source>Associates the editor with a text document. The currently registered factory is used to build a view for the document, which gets displayed by the editor after revalidation. A PropertyChange event (&quot;document&quot;) is propagated to each listener.</source>
          <target state="translated">エディタをテキスト文書に関連付けます。現在登録されているファクトリは、再検証後にエディタによって表示されるドキュメントのビューを構築するために使用されます。PropertyChangeイベント(&quot;document&quot;)が各リスナーに伝搬されます。</target>
        </trans-unit>
        <trans-unit id="aec8b78153861e86f1b3f29002affd38e8f3e461" translate="yes" xml:space="preserve">
          <source>Associates the editor with a text document. The currently registered factory is used to build a view for the document, which gets displayed by the editor.</source>
          <target state="translated">エディタをテキスト文書に関連付けます。現在登録されているファクトリは、ドキュメントのビューを構築するために使用され、エディタによって表示されます。</target>
        </trans-unit>
        <trans-unit id="daa90549130d536371136182f14279e9eded26b2" translate="yes" xml:space="preserve">
          <source>Associates the editor with a text document. This must be a &lt;code&gt;StyledDocument&lt;/code&gt;.</source>
          <target state="translated">エディタをテキストドキュメントに関連付けます。これは &lt;code&gt;StyledDocument&lt;/code&gt; である必要があります。</target>
        </trans-unit>
        <trans-unit id="3d8b941f2598d7e75a59544d73f6b3752776225a" translate="yes" xml:space="preserve">
          <source>Associates the given path with the given location. Any previous value will be discarded.</source>
          <target state="translated">指定されたパスと指定された場所を関連付けます。以前の値は破棄されます。</target>
        </trans-unit>
        <trans-unit id="cab030f323008760ae72759c2b396fb5e21f4675" translate="yes" xml:space="preserve">
          <source>Associates the given search path with the given location.</source>
          <target state="translated">与えられた検索パスと与えられた場所を関連付けます。</target>
        </trans-unit>
        <trans-unit id="4616321ebaa03fd4913b0e71d734f5f832ab37fc" translate="yes" xml:space="preserve">
          <source>Associates the given search path with the given location. Any previous value will be discarded. If the location is a module-oriented or output location, any module-specific associations set up by &lt;a href=&quot;#setLocationForModule(javax.tools.JavaFileManager.Location,java.lang.String,java.util.Collection)&quot;&gt;setLocationForModule&lt;/a&gt; will be cancelled.</source>
          <target state="translated">指定された検索パスを指定された場所に関連付けます。以前の値はすべて破棄されます。場所がモジュール指向または出力の場所である場合、&lt;a href=&quot;#setLocationForModule(javax.tools.JavaFileManager.Location,java.lang.String,java.util.Collection)&quot;&gt;setLocationForModule&lt;/a&gt;によって設定されたモジュール固有の関連付けはキャンセルされます。</target>
        </trans-unit>
        <trans-unit id="3c5152450c078fcd1b5d69f65f5f1638bb1ed70a" translate="yes" xml:space="preserve">
          <source>Associates the given search path with the given module and location, which must be a module-oriented or output location.</source>
          <target state="translated">与えられた検索パスを、与えられたモジュールと場所に関連付けます。</target>
        </trans-unit>
        <trans-unit id="824f932d85d61d2fb036c594a862d6fed5463dc4" translate="yes" xml:space="preserve">
          <source>Associates the given search path with the given module and location, which must be a module-oriented or output location. Any previous value will be discarded. This overrides any default association derived from the search path associated with the location itself. All such module-specific associations will be cancelled if a new search path is associated with the location by calling &lt;a href=&quot;#setLocation(javax.tools.JavaFileManager.Location,java.lang.Iterable)&quot;&gt;setLocation &lt;/a&gt; or &lt;a href=&quot;#setLocationFromPaths(javax.tools.JavaFileManager.Location,java.util.Collection)&quot;&gt;setLocationFromPaths&lt;/a&gt;.</source>
          <target state="translated">指定された検索パスを指定されたモジュールと場所に関連付けます。これらはモジュール指向または出力の場所である必要があります。以前の値はすべて破棄されます。これは、場所自体に関連付けられた検索パスから派生したデフォルトの関連付けを上書きします。&lt;a href=&quot;#setLocation(javax.tools.JavaFileManager.Location,java.lang.Iterable)&quot;&gt;setLocation&lt;/a&gt;または&lt;a href=&quot;#setLocationFromPaths(javax.tools.JavaFileManager.Location,java.util.Collection)&quot;&gt;setLocationFromPathsを&lt;/a&gt;呼び出して新しい検索パスが場所に関連付けられている場合、このようなモジュール固有の関連付けはすべてキャンセルされます。</target>
        </trans-unit>
        <trans-unit id="ce44901b8fe7b1e5a344bf936e73410fd825cae2" translate="yes" xml:space="preserve">
          <source>Associates the specified message digest with this stream.</source>
          <target state="translated">指定されたメッセージダイジェストをこのストリームに関連付けます。</target>
        </trans-unit>
        <trans-unit id="4aedc217436104862899bfd917f42c6876d02da2" translate="yes" xml:space="preserve">
          <source>Associates the specified persistence delegate with the given type.</source>
          <target state="translated">指定された永続化デリゲートを、指定された型に関連付けます。</target>
        </trans-unit>
        <trans-unit id="c207a1526d3e87d682d33956745f8f28964f5056" translate="yes" xml:space="preserve">
          <source>Associates the specified stream with the specified key in this applet context.</source>
          <target state="translated">指定されたストリームを、このアプレットコンテキスト内の指定されたキーに関連付けます。</target>
        </trans-unit>
        <trans-unit id="120587f0aaf1be398039e94df3a080b55cdf7bbb" translate="yes" xml:space="preserve">
          <source>Associates the specified stream with the specified key in this applet context. If the applet context previously contained a mapping for this key, the old value is replaced.</source>
          <target state="translated">指定されたストリームを、このアプレット コンテキスト内の指定されたキーに関連付けます。以前にアプレットコンテキストにこのキーのマッピングが含まれていた場合、古い値が置き換えられます。</target>
        </trans-unit>
        <trans-unit id="46394ec7a101b03340a6587004a576409057f8b3" translate="yes" xml:space="preserve">
          <source>Associates the specified value with the specified attribute name (key) in this Map.</source>
          <target state="translated">指定された値を、このマップ内の指定された属性名 (キー)に関連付けます。</target>
        </trans-unit>
        <trans-unit id="e2d6673941ced8f85bc7d2d31f579905b7989d0a" translate="yes" xml:space="preserve">
          <source>Associates the specified value with the specified attribute name (key) in this Map. If the Map previously contained a mapping for the attribute name, the old value is replaced.</source>
          <target state="translated">指定された値を、このマップ内の指定された属性名 (キー)に関連付けます。以前にマップに属性名のマッピングが含まれていた場合、古い値が置き換えられます。</target>
        </trans-unit>
        <trans-unit id="39ad33a5d746b83560d42a35681a1da81c0d0770" translate="yes" xml:space="preserve">
          <source>Associates the specified value with the specified attribute name, specified as a String.</source>
          <target state="translated">指定された値と、指定された属性名(Stringで指定)を関連付けます。</target>
        </trans-unit>
        <trans-unit id="75f2bdf25f7f51dda93e424528bcb2ebe5312dfe" translate="yes" xml:space="preserve">
          <source>Associates the specified value with the specified attribute name, specified as a String. The attributes name is case-insensitive. If the Map previously contained a mapping for the attribute name, the old value is replaced.</source>
          <target state="translated">指定された値を、String で指定された属性名に関連付けます。属性名は大文字と小文字を区別しません。以前にマップに属性名のマッピングが含まれていた場合、古い値が置き換えられます。</target>
        </trans-unit>
        <trans-unit id="2fffb6afdcfe9099ae096bc7c0c1aef032d241d5" translate="yes" xml:space="preserve">
          <source>Associates the specified value with the specified key in this context.</source>
          <target state="translated">指定された値を、このコンテキストで指定されたキーに関連付けます。</target>
        </trans-unit>
        <trans-unit id="c73ac59fc30103d3b70a666642f64b986553ac7d" translate="yes" xml:space="preserve">
          <source>Associates the specified value with the specified key in this context. If the context previously contained a mapping for this key, the old value is replaced by the specified value.</source>
          <target state="translated">指定された値を、このコンテキスト内の指定されたキーに関連付けます。コンテキストにこのキーのマッピングが含まれていた場合は、古い値が指定された値に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="5af9913790bece6eeec4b6b22d0ac1fc117f1210" translate="yes" xml:space="preserve">
          <source>Associates the specified value with the specified key in this identity hash map.</source>
          <target state="translated">指定された値を、この ID ハッシュ・マップの指定されたキーに関連付けます。</target>
        </trans-unit>
        <trans-unit id="0741057f3a2bf120ef2d33699a0aa9512f6a283e" translate="yes" xml:space="preserve">
          <source>Associates the specified value with the specified key in this identity hash map. If the map previously contained a mapping for the key, the old value is replaced.</source>
          <target state="translated">指定された値を、この ID ハッシュ・マップ内の指定されたキーに関連付けます。以前にマップにキーのマッピングが含まれていた場合は、古い値が置き換えられます。</target>
        </trans-unit>
        <trans-unit id="6970d32733ee777a7badb6404c1939ad0c423fd8" translate="yes" xml:space="preserve">
          <source>Associates the specified value with the specified key in this map (optional operation).</source>
          <target state="translated">指定された値を、このマップの指定されたキーに関連付けます(任意の操作)。</target>
        </trans-unit>
        <trans-unit id="27b34f9e23c6cfe9e869dd5dc7451d2d5df38b1d" translate="yes" xml:space="preserve">
          <source>Associates the specified value with the specified key in this map (optional operation). If the map previously contained a mapping for the key, the old value is replaced by the specified value. (A map &lt;code&gt;m&lt;/code&gt; is said to contain a mapping for a key &lt;code&gt;k&lt;/code&gt; if and only if &lt;a href=&quot;#containsKey(java.lang.Object)&quot;&gt;&lt;code&gt;m.containsKey(k)&lt;/code&gt;&lt;/a&gt; would return &lt;code&gt;true&lt;/code&gt;.)</source>
          <target state="translated">指定された値をこのマップ内の指定されたキーに関連付けます（オプションの操作）。マップに以前にキーのマッピングが含まれていた場合、古い値は指定された値に置き換えられます。（マップ &lt;code&gt;m&lt;/code&gt; には、&lt;a href=&quot;#containsKey(java.lang.Object)&quot;&gt; &lt;code&gt;m.containsKey(k)&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を返す場合に限り、キー &lt;code&gt;k&lt;/code&gt; のマッピングが含まれていると言われます。）</target>
        </trans-unit>
        <trans-unit id="3b2417d854b3d413b72fb5e3655a2c211c281d9d" translate="yes" xml:space="preserve">
          <source>Associates the specified value with the specified key in this map (optional operation). If the map previously contained a mapping for the key, the old value is replaced by the specified value. (A map &lt;code&gt;m&lt;/code&gt; is said to contain a mapping for a key &lt;code&gt;k&lt;/code&gt; if and only if &lt;a href=&quot;map#containsKey(java.lang.Object)&quot;&gt;&lt;code&gt;m.containsKey(k)&lt;/code&gt;&lt;/a&gt; would return &lt;code&gt;true&lt;/code&gt;.)</source>
          <target state="translated">指定された値をこのマップ内の指定されたキーに関連付けます（オプションの操作）。マップに以前にキーのマッピングが含まれていた場合、古い値は指定された値に置き換えられます。（マップ &lt;code&gt;m&lt;/code&gt; には、&lt;a href=&quot;map#containsKey(java.lang.Object)&quot;&gt; &lt;code&gt;m.containsKey(k)&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を返す場合に限り、キー &lt;code&gt;k&lt;/code&gt; のマッピングが含まれていると言われます。）</target>
        </trans-unit>
        <trans-unit id="ccb82428d35baee9740c6ecdf19fc281e23f9c3d" translate="yes" xml:space="preserve">
          <source>Associates the specified value with the specified key in this map (optional operation). If the map previously contained a mapping for the key, the old value is replaced by the specified value. (A map &lt;code&gt;m&lt;/code&gt; is said to contain a mapping for a key &lt;code&gt;k&lt;/code&gt; if and only if &lt;a href=&quot;map#containsKey-java.lang.Object-&quot;&gt;&lt;code&gt;m.containsKey(k)&lt;/code&gt;&lt;/a&gt; would return &lt;code&gt;true&lt;/code&gt;.)</source>
          <target state="translated">指定された値をこのマップ内の指定されたキーに関連付けます（オプションの操作）。マップに以前にキーのマッピングが含まれていた場合、古い値は指定された値に置き換えられます。（&lt;a href=&quot;map#containsKey-java.lang.Object-&quot;&gt; &lt;code&gt;m.containsKey(k)&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;true&lt;/code&gt; を返す場合に限り、マップ &lt;code&gt;m&lt;/code&gt; はキー &lt;code&gt;k&lt;/code&gt; のマッピングを含むと言われます。）</target>
        </trans-unit>
        <trans-unit id="36e0d856a6c0dcfe83c15e40aab96415213aa2f9" translate="yes" xml:space="preserve">
          <source>Associates the specified value with the specified key in this map.</source>
          <target state="translated">指定された値を、このマップの指定されたキーに関連付けます。</target>
        </trans-unit>
        <trans-unit id="adb578d547a699ec9eca9741fe72aa2e0bdc6674" translate="yes" xml:space="preserve">
          <source>Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.</source>
          <target state="translated">指定された値を、このマップ内の指定されたキーに関連付けます。以前にマップにそのキーのマッピングが含まれていた場合、古い値が置き換えられます。</target>
        </trans-unit>
        <trans-unit id="551bc84ca615d2fafe109a62876f4e8d0a4502a6" translate="yes" xml:space="preserve">
          <source>Associates the specified value with the specified key in this map. If the map previously contained a mapping for this key, the old value is replaced.</source>
          <target state="translated">指定された値を、このマップ内の指定されたキーに関連付けます。以前にマップにこのキーのマッピングが含まれていた場合、古い値が置き換えられます。</target>
        </trans-unit>
        <trans-unit id="0bc237fc2b57374ff6a182e558a47d47e8763f0a" translate="yes" xml:space="preserve">
          <source>Associates the specified value with the specified key in this preference node.</source>
          <target state="translated">指定された値をこのプリファレンスノードの指定されたキーに関連付けます。</target>
        </trans-unit>
        <trans-unit id="7834ca4a8fca23930775c7ff74cdae02e831d307" translate="yes" xml:space="preserve">
          <source>Associating Style Sheets with XML documents Version 1.0</source>
          <target state="translated">スタイルシートとXML文書の関連付け Version 1.0</target>
        </trans-unit>
        <trans-unit id="1948b8a73d1cd0190740c5b39d682043e8e45d4f" translate="yes" xml:space="preserve">
          <source>Association</source>
          <target state="translated">Association</target>
        </trans-unit>
        <trans-unit id="4a500e9fbe5ad4c564dcfe57725d9630deab6bc1" translate="yes" xml:space="preserve">
          <source>AssociationChangeNotification</source>
          <target state="translated">AssociationChangeNotification</target>
        </trans-unit>
        <trans-unit id="c514d34663ae101e7a667522cae2cb357f3131ab" translate="yes" xml:space="preserve">
          <source>AssociationChangeNotification.AssocChangeEvent</source>
          <target state="translated">AssociationChangeNotification.AssocChangeEvent</target>
        </trans-unit>
        <trans-unit id="980a6f0a3d37d74df814db983881cb652c2c43ec" translate="yes" xml:space="preserve">
          <source>Associations are identified by their Association ID. Association ID's are guaranteed to be unique for the lifetime of the association. An association ID may be reused after the association has been shutdown. An association ID is not unique across multiple SCTP channels. An Association's local and remote addresses may change if the SCTP implementation supports</source>
          <target state="new"/>
        </trans-unit>
        <trans-unit id="d20b5a26a1cdf631954b50a5206246dff93d9c8a" translate="yes" xml:space="preserve">
          <source>Associativity</source>
          <target state="translated">Associativity</target>
        </trans-unit>
        <trans-unit id="01c87cbcfcb3a4c3c670dfd17de13f85145d0637" translate="yes" xml:space="preserve">
          <source>Assume the linkage arguments are as follows:</source>
          <target state="translated">連動引数が以下のようになっているとします。</target>
        </trans-unit>
        <trans-unit id="2dc2100f672c34160990cbf608240b0f61030c73" translate="yes" xml:space="preserve">
          <source>Assuming</source>
          <target state="translated">Assuming</target>
        </trans-unit>
        <trans-unit id="26b8d1cd93b0a70aa708d7ef3eaaabd54c871558" translate="yes" xml:space="preserve">
          <source>Assuming a map contains no incorrectly typed keys or values prior to the time a dynamically typesafe view is generated, and that all subsequent access to the map takes place through the view (or one of its collection views), it is</source>
          <target state="translated">動的にタイプセーフ ビューが生成される前に、マップに誤ってタイプされたキーや値が含まれておらず、その後のマップへのアクセスはすべてビュー (またはそのコレクション ビューの 1 つ)を介して行われると仮定すると、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="9ea0a7be7566f90ae54ba0c383e2ca9e62b14ca1" translate="yes" xml:space="preserve">
          <source>Assuming a map contains no incorrectly typed keys or values prior to the time a dynamically typesafe view is generated, and that all subsequent access to the map takes place through the view (or one of its collection views), it is &lt;em&gt;guaranteed&lt;/em&gt; that the map cannot contain an incorrectly typed key or value.</source>
          <target state="translated">マップは前動的に型保証されたビューが生成された時に何が誤って入力されたキーまたは値が含まれていない、とマップへの後続のすべてのアクセスは、ビュー（またはそのコレクションビューの1つ）を介して行われることを想定すると、それがされる&lt;em&gt;保証は&lt;/em&gt;マップができないこと正しく入力されていないキーまたは値が含まれています。</target>
        </trans-unit>
        <trans-unit id="2684e9da2f1f66e957040b3dfd882412818330a2" translate="yes" xml:space="preserve">
          <source>Assuming that there is a security manager, or that the implementation chooses to make checks anyway, the checks are made as detailed below. In what follows, and unless otherwise specified, &lt;code&gt;className&lt;/code&gt; is the string returned by &lt;a href=&quot;mbeaninfo#getClassName()&quot;&gt;&lt;code&gt;MBeanInfo.getClassName()&lt;/code&gt;&lt;/a&gt; for the target MBean.</source>
          <target state="translated">セキュリティマネージャが存在する場合、または実装がとにかくチェックを行うことを選択した場合、チェックは以下のように行われます。以下では、特に指定がない限り、 &lt;code&gt;className&lt;/code&gt; はターゲットMBeanに対して&lt;a href=&quot;mbeaninfo#getClassName()&quot;&gt; &lt;code&gt;MBeanInfo.getClassName()&lt;/code&gt; &lt;/a&gt;によって返される文字列です。</target>
        </trans-unit>
        <trans-unit id="5e277e047ec1bb884239c12a127e28b4227b5181" translate="yes" xml:space="preserve">
          <source>Assuming that there is a security manager, or that the implementation chooses to make checks anyway, the checks are made as detailed below. In what follows, and unless otherwise specified, &lt;code&gt;className&lt;/code&gt; is the string returned by &lt;a href=&quot;mbeaninfo#getClassName--&quot;&gt;&lt;code&gt;MBeanInfo.getClassName()&lt;/code&gt;&lt;/a&gt; for the target MBean.</source>
          <target state="translated">セキュリティーマネージャーがあるか、実装がいずれにしてもチェックを行うことを選択していると仮定すると、チェックは以下に詳述するように行われます。以下では、特に指定がない限り、 &lt;code&gt;className&lt;/code&gt; はターゲットMBeanの&lt;a href=&quot;mbeaninfo#getClassName--&quot;&gt; &lt;code&gt;MBeanInfo.getClassName()&lt;/code&gt; &lt;/a&gt;によって返される文字列です。</target>
        </trans-unit>
        <trans-unit id="22283d771439aa7823d5c15a58186011af184d67" translate="yes" xml:space="preserve">
          <source>Assuming there are no other scaling transforms added to the &lt;code&gt;Graphics2D&lt;/code&gt; object, the resulting line will be approximately 15 pixels wide. As the example code demonstrates, a floating-point line offers better precision, especially when large transforms are used with a &lt;code&gt;Graphics2D&lt;/code&gt; object. When a line is diagonal, the exact width depends on how the rendering pipeline chooses which pixels to fill as it traces the theoretical widened outline. The choice of which pixels to turn on is affected by the antialiasing attribute because the antialiasing rendering pipeline can choose to color partially-covered pixels.</source>
          <target state="translated">&lt;code&gt;Graphics2D&lt;/code&gt; オブジェクトに他のスケーリング変換が追加されていないと仮定すると、結果の線は約15ピクセル幅になります。サンプルコードが示すように、浮動小数点線は、特に大規模な変換が &lt;code&gt;Graphics2D&lt;/code&gt; オブジェクトで使用される場合に、より高い精度を提供します。線が対角線の場合、正確な幅は、レンダリングパイプラインが、理論的に拡大されたアウトラインをトレースするときに、塗りつぶすピクセルをどのように選択するかによって異なります。オンにするピクセルの選択は、アンチエイリアスレンダリングパイプラインが部分的に覆われたピクセルに色を付けることを選択できるため、アンチエイリアス属性の影響を受けます。</target>
        </trans-unit>
        <trans-unit id="e864db538fc4d63a8155b6107c72a215e133afc3" translate="yes" xml:space="preserve">
          <source>Assure the rectangles are created.</source>
          <target state="translated">矩形が作成されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="54da51c6e514c6c934fbde58897984f378972c6c" translate="yes" xml:space="preserve">
          <source>Astronomical and Scientific Notes</source>
          <target state="translated">天文・科学ノート</target>
        </trans-unit>
        <trans-unit id="580edc5fb3b7034f1b915922663d854b824bc61b" translate="yes" xml:space="preserve">
          <source>Asymmetric primitive: key agreement and key distribution</source>
          <target state="translated">非対称プリミティブ:鍵の一致と鍵の分配</target>
        </trans-unit>
        <trans-unit id="2980e582cf65c953331bea13f7e0d66a66676398" translate="yes" xml:space="preserve">
          <source>Asymmetric primitive: key encapsulation mechanism</source>
          <target state="translated">非対称プリミティブ:鍵カプセル化の仕組み</target>
        </trans-unit>
        <trans-unit id="0d2796c4c5fa505c038af711127a4b8a98410166" translate="yes" xml:space="preserve">
          <source>Asymmetric primitive: public key encryption</source>
          <target state="translated">非対称プリミティブ:公開鍵暗号化</target>
        </trans-unit>
        <trans-unit id="b8470d41ba31d8d653235530d47cdc9f886b039c" translate="yes" xml:space="preserve">
          <source>Asymmetric primitive: signature scheme</source>
          <target state="translated">非対称プリミティブ:署名方式</target>
        </trans-unit>
        <trans-unit id="ee354e8540e9b98480026a8b0146863a1ca05cff" translate="yes" xml:space="preserve">
          <source>AsyncBoxView</source>
          <target state="translated">AsyncBoxView</target>
        </trans-unit>
        <trans-unit id="848467ea04c9f7448c5b0f1fbaa31f843c7d7ac4" translate="yes" xml:space="preserve">
          <source>AsyncBoxView.ChildLocator</source>
          <target state="translated">AsyncBoxView.ChildLocator</target>
        </trans-unit>
        <trans-unit id="93b416ebd87bfed062f5a7578286b1ba8a59456e" translate="yes" xml:space="preserve">
          <source>AsyncBoxView.ChildState</source>
          <target state="translated">AsyncBoxView.ChildState</target>
        </trans-unit>
        <trans-unit id="d36830bb1cdc9797d519a38f83f8c2a95a23787f" translate="yes" xml:space="preserve">
          <source>Asynchronous &lt;code&gt;LSParser&lt;/code&gt; objects are expected to also implement the &lt;code&gt;events::EventTarget&lt;/code&gt; interface so that event listeners can be registered on asynchronous &lt;code&gt;LSParser&lt;/code&gt; objects.</source>
          <target state="translated">非同期 &lt;code&gt;LSParser&lt;/code&gt; オブジェクトは、 &lt;code&gt;events::EventTarget&lt;/code&gt; インターフェイスも実装することが期待されているため、イベントリスナーを非同期 &lt;code&gt;LSParser&lt;/code&gt; オブジェクトに登録できます。</target>
        </trans-unit>
        <trans-unit id="7011bcb2a149d047c8ec7153896517a23adc9f65" translate="yes" xml:space="preserve">
          <source>Asynchronous I/O</source>
          <target state="translated">非同期I/O</target>
        </trans-unit>
        <trans-unit id="8a319250e7a62a6449653025f2ab2f88895ac77d" translate="yes" xml:space="preserve">
          <source>Asynchronous Loading</source>
          <target state="translated">非同期ローディング</target>
        </trans-unit>
        <trans-unit id="3beeb5d6437684f9d37c4cc7339c30f7ce34c987" translate="yes" xml:space="preserve">
          <source>Asynchronous channels are bound to an asynchronous channel group for the purpose of resource sharing. A group has an associated &lt;a href=&quot;../../util/concurrent/executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; to which tasks are submitted to handle I/O events and dispatch to completion handlers that consume the result of asynchronous operations performed on channels in the group. The group can optionally be specified when creating the channel or the channel can be bound to a &lt;em&gt;default group&lt;/em&gt;. Sophisticated users may wish to create their own asynchronous channel groups or configure the &lt;code&gt;ExecutorService&lt;/code&gt; that will be used for the default group.</source>
          <target state="translated">非同期チャネルは、リソース共有のために非同期チャネルグループにバインドされます。グループには、I / Oイベントを処理し、グループ内のチャネルで実行された非同期操作の結果を使用する完了ハンドラーにディスパッチするタスクが送信される、関連付けられた&lt;a href=&quot;../../util/concurrent/executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; &lt;/a&gt;があります。グループは、チャネルの作成時にオプションで指定できます。または、チャネルを&lt;em&gt;デフォルトグループに&lt;/em&gt;バインドでき&lt;em&gt;ます&lt;/em&gt;。洗練されたユーザーは、独自の非同期チャネルグループを作成したり、デフォルトグループに使用される &lt;code&gt;ExecutorService&lt;/code&gt; を構成したりできます。</target>
        </trans-unit>
        <trans-unit id="10310ac79f4a508680b2efe15ed75869c6a0dde6" translate="yes" xml:space="preserve">
          <source>Asynchronous channels are safe for use by multiple concurrent threads. Some channel implementations may support concurrent reading and writing, but may not allow more than one read and one write operation to be outstanding at any given time.</source>
          <target state="translated">非同期チャンネルは、複数のスレッドが同時に使用しても安全です。チャンネルの実装によっては、同時読み取りと同時書き込みをサポートしている場合がありますが、一度に複数の読み取りと書き込みを許可しない場合があります。</target>
        </trans-unit>
        <trans-unit id="dba4ef655eef73aea32f4791092fafa5f8e4f5ec" translate="yes" xml:space="preserve">
          <source>Asynchronous socket channels are created in one of two ways. A newly-created &lt;code&gt;AsynchronousSocketChannel&lt;/code&gt; is created by invoking one of the &lt;a href=&quot;#open(java.nio.channels.AsynchronousChannelGroup)&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; methods defined by this class. A newly-created channel is open but not yet connected. A connected &lt;code&gt;AsynchronousSocketChannel&lt;/code&gt; is created when a connection is made to the socket of an &lt;a href=&quot;asynchronousserversocketchannel&quot;&gt;&lt;code&gt;AsynchronousServerSocketChannel&lt;/code&gt;&lt;/a&gt;. It is not possible to create an asynchronous socket channel for an arbitrary, pre-existing &lt;a href=&quot;../../net/socket&quot;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">非同期ソケットチャネルは、2つの方法のいずれかで作成されます。新しく作成された &lt;code&gt;AsynchronousSocketChannel&lt;/code&gt; は、このクラスで定義された&lt;a href=&quot;#open(java.nio.channels.AsynchronousChannelGroup)&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;メソッドの1つを呼び出すことによって作成されます。新しく作成されたチャネルは開いていますが、まだ接続されていません。接続 &lt;code&gt;AsynchronousSocketChannel&lt;/code&gt; は接続のソケットに行われたときに作成される&lt;a href=&quot;asynchronousserversocketchannel&quot;&gt; &lt;code&gt;AsynchronousServerSocketChannel&lt;/code&gt; &lt;/a&gt;。任意の既存の&lt;a href=&quot;../../net/socket&quot;&gt; &lt;code&gt;socket&lt;/code&gt; &lt;/a&gt;に対して非同期ソケットチャネルを作成することはできません。</target>
        </trans-unit>
        <trans-unit id="457ba8593230a1f46060a7b261e3c57edf4f55f3" translate="yes" xml:space="preserve">
          <source>Asynchronous socket channels are created in one of two ways. A newly-created &lt;code&gt;AsynchronousSocketChannel&lt;/code&gt; is created by invoking one of the &lt;a href=&quot;asynchronoussocketchannel#open-java.nio.channels.AsynchronousChannelGroup-&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; methods defined by this class. A newly-created channel is open but not yet connected. A connected &lt;code&gt;AsynchronousSocketChannel&lt;/code&gt; is created when a connection is made to the socket of an &lt;a href=&quot;asynchronousserversocketchannel&quot;&gt;&lt;code&gt;AsynchronousServerSocketChannel&lt;/code&gt;&lt;/a&gt;. It is not possible to create an asynchronous socket channel for an arbitrary, pre-existing &lt;a href=&quot;../../net/socket&quot;&gt;&lt;code&gt;socket&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">非同期ソケットチャネルは、2つの方法のいずれかで作成されます。新しく作成された &lt;code&gt;AsynchronousSocketChannel&lt;/code&gt; は、このクラスで定義されている&lt;a href=&quot;asynchronoussocketchannel#open-java.nio.channels.AsynchronousChannelGroup-&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;メソッドの1つを呼び出すことによって作成されます。新しく作成されたチャネルは開いていますが、まだ接続されていません。接続された &lt;code&gt;AsynchronousSocketChannel&lt;/code&gt; は、&lt;a href=&quot;asynchronousserversocketchannel&quot;&gt; &lt;code&gt;AsynchronousServerSocketChannel&lt;/code&gt; の&lt;/a&gt;ソケットに接続されたときに作成されます。任意の既存の&lt;a href=&quot;../../net/socket&quot;&gt; &lt;code&gt;socket&lt;/code&gt; &lt;/a&gt;に対して非同期ソケットチャネルを作成することはできません。</target>
        </trans-unit>
        <trans-unit id="22d1e165da18a2de45d488ef5c26e97f609c9064" translate="yes" xml:space="preserve">
          <source>AsynchronousByteChannel</source>
          <target state="translated">AsynchronousByteChannel</target>
        </trans-unit>
        <trans-unit id="38c2395242933dc76544daf5402d38cadc614d41" translate="yes" xml:space="preserve">
          <source>AsynchronousByteChannel.read()</source>
          <target state="translated">AsynchronousByteChannel.read()</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
