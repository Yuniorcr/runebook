<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="openjdk">
    <body>
      <group id="openjdk">
        <trans-unit id="bc33598046176d9eab7bba30e8222147757f2f72" translate="yes" xml:space="preserve">
          <source>ImageWriter.canWriteRasters()</source>
          <target state="translated">ImageWriter.canWriteRasters()</target>
        </trans-unit>
        <trans-unit id="c5136c9bda61ca27c5cd0dae82f2baf85b060c58" translate="yes" xml:space="preserve">
          <source>ImageWriter.canWriteSequence()</source>
          <target state="translated">ImageWriter.canWriteSequence()</target>
        </trans-unit>
        <trans-unit id="8c93b907cf061808747b0600c515e9f003b0e137" translate="yes" xml:space="preserve">
          <source>ImageWriter.clearAbortRequest()</source>
          <target state="translated">ImageWriter.clearAbortRequest()</target>
        </trans-unit>
        <trans-unit id="69c2b9ab433f8e2fd072dfed1da17c92bae04c90" translate="yes" xml:space="preserve">
          <source>ImageWriter.convertImageMetadata()</source>
          <target state="translated">ImageWriter.convertImageMetadata()</target>
        </trans-unit>
        <trans-unit id="495ce4c2c4273e1e46a930a8187c9f45f94c9896" translate="yes" xml:space="preserve">
          <source>ImageWriter.convertStreamMetadata()</source>
          <target state="translated">ImageWriter.convertStreamMetadata()</target>
        </trans-unit>
        <trans-unit id="b6649f60f10be92daf80ffb85853cd4e31d8d80d" translate="yes" xml:space="preserve">
          <source>ImageWriter.dispose()</source>
          <target state="translated">ImageWriter.dispose()</target>
        </trans-unit>
        <trans-unit id="d9a96211e88c46d8122ba717844aa90f2fe59ae5" translate="yes" xml:space="preserve">
          <source>ImageWriter.endInsertEmpty()</source>
          <target state="translated">ImageWriter.endInsertEmpty()</target>
        </trans-unit>
        <trans-unit id="02c53a0a5a5040166dad2ff2b70bf6417932e5a9" translate="yes" xml:space="preserve">
          <source>ImageWriter.endReplacePixels()</source>
          <target state="translated">ImageWriter.endReplacePixels()</target>
        </trans-unit>
        <trans-unit id="243445b4691380bda3e90240c0c25fbf2db5cfa7" translate="yes" xml:space="preserve">
          <source>ImageWriter.endWriteEmpty()</source>
          <target state="translated">ImageWriter.endWriteEmpty()</target>
        </trans-unit>
        <trans-unit id="7f53b9aebaff977beb83d1ab112645f4aac5efe2" translate="yes" xml:space="preserve">
          <source>ImageWriter.endWriteSequence()</source>
          <target state="translated">ImageWriter.endWriteSequence()</target>
        </trans-unit>
        <trans-unit id="048ac4db3ab2569e1a0464b22494fad23e59c667" translate="yes" xml:space="preserve">
          <source>ImageWriter.getAvailableLocales()</source>
          <target state="translated">ImageWriter.getAvailableLocales()</target>
        </trans-unit>
        <trans-unit id="186f09acf93554a35caa650f580388f83fab1b64" translate="yes" xml:space="preserve">
          <source>ImageWriter.getDefaultImageMetadata()</source>
          <target state="translated">ImageWriter.getDefaultImageMetadata()</target>
        </trans-unit>
        <trans-unit id="261e96dca25da3b6ddc2ddf6270898ef54647ebd" translate="yes" xml:space="preserve">
          <source>ImageWriter.getDefaultStreamMetadata()</source>
          <target state="translated">ImageWriter.getDefaultStreamMetadata()</target>
        </trans-unit>
        <trans-unit id="3b0ecc6a3712bede4df8b034146694078aea067c" translate="yes" xml:space="preserve">
          <source>ImageWriter.getDefaultWriteParam()</source>
          <target state="translated">ImageWriter.getDefaultWriteParam()</target>
        </trans-unit>
        <trans-unit id="d27a11604f88d6dd3d5e1dac72049b7318fa68d4" translate="yes" xml:space="preserve">
          <source>ImageWriter.getLocale()</source>
          <target state="translated">ImageWriter.getLocale()</target>
        </trans-unit>
        <trans-unit id="b1dcdc90769debae6b4b53593e7f1b23abaf557d" translate="yes" xml:space="preserve">
          <source>ImageWriter.getNumThumbnailsSupported()</source>
          <target state="translated">ImageWriter.getNumThumbnailsSupported()</target>
        </trans-unit>
        <trans-unit id="70342f647937897e5a8f931d41cfeeffd55e1d58" translate="yes" xml:space="preserve">
          <source>ImageWriter.getOriginatingProvider()</source>
          <target state="translated">ImageWriter.getOriginatingProvider()</target>
        </trans-unit>
        <trans-unit id="2e3dc4746bcf1b64502e6c10b09f75bae504e08f" translate="yes" xml:space="preserve">
          <source>ImageWriter.getOutput()</source>
          <target state="translated">ImageWriter.getOutput()</target>
        </trans-unit>
        <trans-unit id="17b68947f77c2816d5402030aae865b9c6bf49d7" translate="yes" xml:space="preserve">
          <source>ImageWriter.getPreferredThumbnailSizes()</source>
          <target state="translated">ImageWriter.getPreferredThumbnailSizes()</target>
        </trans-unit>
        <trans-unit id="f0996382875ebc3931f8227d1da9d9999c6262f0" translate="yes" xml:space="preserve">
          <source>ImageWriter.prepareInsertEmpty()</source>
          <target state="translated">ImageWriter.prepareInsertEmpty()</target>
        </trans-unit>
        <trans-unit id="1600a8485e8aee5eabdb03fa172a540fa208a9ca" translate="yes" xml:space="preserve">
          <source>ImageWriter.prepareReplacePixels()</source>
          <target state="translated">ImageWriter.prepareReplacePixels()</target>
        </trans-unit>
        <trans-unit id="35d0acbd7d75f38aa62c22dada23269ac6e692a6" translate="yes" xml:space="preserve">
          <source>ImageWriter.prepareWriteEmpty()</source>
          <target state="translated">ImageWriter.prepareWriteEmpty()</target>
        </trans-unit>
        <trans-unit id="77b62910eb17e81d20d2ac6ee3a1451fec8f7b11" translate="yes" xml:space="preserve">
          <source>ImageWriter.prepareWriteSequence()</source>
          <target state="translated">ImageWriter.prepareWriteSequence()</target>
        </trans-unit>
        <trans-unit id="264a512aa75f545384e20d5c2a2d44f8cfd28c22" translate="yes" xml:space="preserve">
          <source>ImageWriter.processImageComplete()</source>
          <target state="translated">ImageWriter.processImageComplete()</target>
        </trans-unit>
        <trans-unit id="d899034a5d569f4ed1324d22847e032242084711" translate="yes" xml:space="preserve">
          <source>ImageWriter.processImageProgress()</source>
          <target state="translated">ImageWriter.processImageProgress()</target>
        </trans-unit>
        <trans-unit id="27332d4fb5ca683298f89fcef5f985ee18b1e27d" translate="yes" xml:space="preserve">
          <source>ImageWriter.processImageStarted()</source>
          <target state="translated">ImageWriter.processImageStarted()</target>
        </trans-unit>
        <trans-unit id="ea20b4712a47bc75f276b4adf8231f76d03fb566" translate="yes" xml:space="preserve">
          <source>ImageWriter.processThumbnailComplete()</source>
          <target state="translated">ImageWriter.processThumbnailComplete()</target>
        </trans-unit>
        <trans-unit id="51d80f53b4677d0c618c41e75214b7f17c0cfefb" translate="yes" xml:space="preserve">
          <source>ImageWriter.processThumbnailProgress()</source>
          <target state="translated">ImageWriter.processThumbnailProgress()</target>
        </trans-unit>
        <trans-unit id="e8d245e553e69546053b699570a19cf917b0ff1e" translate="yes" xml:space="preserve">
          <source>ImageWriter.processThumbnailStarted()</source>
          <target state="translated">ImageWriter.processThumbnailStarted()</target>
        </trans-unit>
        <trans-unit id="db5f4715eb940bd70bc26506a945db7ea9b2da98" translate="yes" xml:space="preserve">
          <source>ImageWriter.processWarningOccurred()</source>
          <target state="translated">ImageWriter.processWarningOccurred()</target>
        </trans-unit>
        <trans-unit id="7858acf7ee93b4017b8847e7702c868343598811" translate="yes" xml:space="preserve">
          <source>ImageWriter.processWriteAborted()</source>
          <target state="translated">ImageWriter.processWriteAborted()</target>
        </trans-unit>
        <trans-unit id="03fbfbe0ce8b469a11cc57d3d2f89ca0bcce678a" translate="yes" xml:space="preserve">
          <source>ImageWriter.removeAllIIOWriteProgressListeners()</source>
          <target state="translated">ImageWriter.removeAllIIOWriteProgressListeners()</target>
        </trans-unit>
        <trans-unit id="b83fee8f0c7d4508aa22b6525bb5d98ed0b3322f" translate="yes" xml:space="preserve">
          <source>ImageWriter.removeAllIIOWriteWarningListeners()</source>
          <target state="translated">ImageWriter.removeAllIIOWriteWarningListeners()</target>
        </trans-unit>
        <trans-unit id="cde86c599bcb774b43043a447041773b82450a7d" translate="yes" xml:space="preserve">
          <source>ImageWriter.removeIIOWriteProgressListener()</source>
          <target state="translated">ImageWriter.removeIIOWriteProgressListener()</target>
        </trans-unit>
        <trans-unit id="b9c0bc66df2955815d28d74bdff020a6af20a3d1" translate="yes" xml:space="preserve">
          <source>ImageWriter.removeIIOWriteWarningListener()</source>
          <target state="translated">ImageWriter.removeIIOWriteWarningListener()</target>
        </trans-unit>
        <trans-unit id="31fbb91214d8d39ad428825a48f3fbdb6fa60e2a" translate="yes" xml:space="preserve">
          <source>ImageWriter.removeImage()</source>
          <target state="translated">ImageWriter.removeImage()</target>
        </trans-unit>
        <trans-unit id="4f44e6546a9791fa9ab18d909a79abb19a863b88" translate="yes" xml:space="preserve">
          <source>ImageWriter.replaceImageMetadata()</source>
          <target state="translated">ImageWriter.replaceImageMetadata()</target>
        </trans-unit>
        <trans-unit id="c40e5cfd970633aa96ec6453b5cd39189eec519f" translate="yes" xml:space="preserve">
          <source>ImageWriter.replacePixels()</source>
          <target state="translated">ImageWriter.replacePixels()</target>
        </trans-unit>
        <trans-unit id="74e4c3be0799bbe1f7c421eb7be21b166ff60279" translate="yes" xml:space="preserve">
          <source>ImageWriter.replaceStreamMetadata()</source>
          <target state="translated">ImageWriter.replaceStreamMetadata()</target>
        </trans-unit>
        <trans-unit id="85d06995be275a5540df30d0831143341e3bbff7" translate="yes" xml:space="preserve">
          <source>ImageWriter.reset()</source>
          <target state="translated">ImageWriter.reset()</target>
        </trans-unit>
        <trans-unit id="8fe56500c78199dad9352d8f603280356d3ac6c3" translate="yes" xml:space="preserve">
          <source>ImageWriter.setLocale()</source>
          <target state="translated">ImageWriter.setLocale()</target>
        </trans-unit>
        <trans-unit id="3c39e2913413d8d0162136d0c5d1d8e02851ce04" translate="yes" xml:space="preserve">
          <source>ImageWriter.setOutput()</source>
          <target state="translated">ImageWriter.setOutput()</target>
        </trans-unit>
        <trans-unit id="843ab49be0e6f42a53e35a4061fe467639fa6461" translate="yes" xml:space="preserve">
          <source>ImageWriter.write()</source>
          <target state="translated">ImageWriter.write()</target>
        </trans-unit>
        <trans-unit id="85fea7a2a9c977e351bbbfbd5963fa188c87bdac" translate="yes" xml:space="preserve">
          <source>ImageWriter.writeInsert()</source>
          <target state="translated">ImageWriter.writeInsert()</target>
        </trans-unit>
        <trans-unit id="ff12abc364282e927d5d6556cd4e677d4b326b02" translate="yes" xml:space="preserve">
          <source>ImageWriter.writeToSequence()</source>
          <target state="translated">ImageWriter.writeToSequence()</target>
        </trans-unit>
        <trans-unit id="d4c1cd6c86ba14ace868abe5436b6c3ea6867041" translate="yes" xml:space="preserve">
          <source>ImageWriterSpi</source>
          <target state="translated">ImageWriterSpi</target>
        </trans-unit>
        <trans-unit id="7907c00c50feae52e7cd33381c995a5fe91a5327" translate="yes" xml:space="preserve">
          <source>ImageWriterSpi.canEncodeImage()</source>
          <target state="translated">ImageWriterSpi.canEncodeImage()</target>
        </trans-unit>
        <trans-unit id="114df7b0203df03ac058feb677cbc146b5ae8953" translate="yes" xml:space="preserve">
          <source>ImageWriterSpi.createWriterInstance()</source>
          <target state="translated">ImageWriterSpi.createWriterInstance()</target>
        </trans-unit>
        <trans-unit id="8c525960abeb10238cfa5bdebd4bafd51d80f9a9" translate="yes" xml:space="preserve">
          <source>ImageWriterSpi.getImageReaderSpiNames()</source>
          <target state="translated">ImageWriterSpi.getImageReaderSpiNames()</target>
        </trans-unit>
        <trans-unit id="2576cfdd9438a00c172370eb8ea0ed0dea89009f" translate="yes" xml:space="preserve">
          <source>ImageWriterSpi.getOutputTypes()</source>
          <target state="translated">ImageWriterSpi.getOutputTypes()</target>
        </trans-unit>
        <trans-unit id="b8388bf6802a2e78f4d3d0f825bbf4e83e656d96" translate="yes" xml:space="preserve">
          <source>ImageWriterSpi.isFormatLossless()</source>
          <target state="translated">ImageWriterSpi.isFormatLossless()</target>
        </trans-unit>
        <trans-unit id="473bc7237ab98736b74f2348995a72361b8fe8de" translate="yes" xml:space="preserve">
          <source>ImageWriterSpi.isOwnWriter()</source>
          <target state="translated">ImageWriterSpi.isOwnWriter()</target>
        </trans-unit>
        <trans-unit id="f3bbe23a175ec37e8cc3e09e80fbc7806f08b9b6" translate="yes" xml:space="preserve">
          <source>Images with 2 or 4 bits per pixel may be constructed via the &lt;code&gt;BufferedImage&lt;/code&gt; constructor that takes a &lt;code&gt;ColorModel&lt;/code&gt; argument by supplying a &lt;code&gt;ColorModel&lt;/code&gt; with an appropriate map size.</source>
          <target state="translated">ピクセルあたり2ビットまたは4ビットの画像は、適切なマップサイズで &lt;code&gt;ColorModel&lt;/code&gt; を提供することにより、 &lt;code&gt;ColorModel&lt;/code&gt; 引数をとる &lt;code&gt;BufferedImage&lt;/code&gt; コンストラクターを介して構築できます。</target>
        </trans-unit>
        <trans-unit id="1d0b7a4a289cb642b58d04e1e7fbb91d92814504" translate="yes" xml:space="preserve">
          <source>Images with 8 bits per pixel should use the image types &lt;code&gt;TYPE_BYTE_INDEXED&lt;/code&gt; or &lt;code&gt;TYPE_BYTE_GRAY&lt;/code&gt; depending on their &lt;code&gt;ColorModel&lt;/code&gt;.</source>
          <target state="translated">ピクセルあたり8ビットの画像は、 &lt;code&gt;ColorModel&lt;/code&gt; に応じて、画像タイプ &lt;code&gt;TYPE_BYTE_INDEXED&lt;/code&gt; または &lt;code&gt;TYPE_BYTE_GRAY&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="63ce1f7ade23f27731d8bef9021d16cca263431a" translate="yes" xml:space="preserve">
          <source>Images with an IndexColorModel cannot be rescaled.</source>
          <target state="translated">IndexColorModelを持つ画像はリスケールできません。</target>
        </trans-unit>
        <trans-unit id="35f524310930c051d8da9bc51a1b0a045b71ab2c" translate="yes" xml:space="preserve">
          <source>Images with an IndexColorModel cannot be used.</source>
          <target state="translated">IndexColorModelを持つ画像は使用できません。</target>
        </trans-unit>
        <trans-unit id="d6b0d05ca581d19b3503a81b578fda4383632307" translate="yes" xml:space="preserve">
          <source>ImagingOpException</source>
          <target state="translated">ImagingOpException</target>
        </trans-unit>
        <trans-unit id="b6a1b86fae938216f357d1624854ea77f4576400" translate="yes" xml:space="preserve">
          <source>Immediately performs the base action of this task and returns true if, upon return from this method, this task is guaranteed to have completed normally.</source>
          <target state="translated">このタスクの基本動作を即座に実行し、このメソッドからの復帰時に、このタスクが正常に完了したことが保証されていれば真を返します。</target>
        </trans-unit>
        <trans-unit id="4211eb9c1fee9874525c7e0858d275f457d53e7d" translate="yes" xml:space="preserve">
          <source>Immediately performs the base action of this task and returns true if, upon return from this method, this task is guaranteed to have completed normally. This method may return false otherwise, to indicate that this task is not necessarily complete (or is not known to be complete), for example in asynchronous actions that require explicit invocations of completion methods. This method may also throw an (unchecked) exception to indicate abnormal exit. This method is designed to support extensions, and should not in general be called otherwise.</source>
          <target state="translated">このタスクの基本アクションを直ちに実行し、このメソッドからの復帰時に、このタスクが正常に完了したことが保証されていれば真を返します。このメソッドは、完了メソッドの明示的な呼び出しを必要とする非同期アクションなどで、このタスクが必ずしも完了していない(または完了していることがわからない)ことを示すために、それ以外の場合は false を返すことがあります。このメソッドは、異常終了を示すために例外を投げることもあります(チェックなし)。このメソッドは拡張機能をサポートするように設計されており、それ以外の場合は一般的に呼び出されるべきではありません。</target>
        </trans-unit>
        <trans-unit id="78a6ee9cdbd11937f920f9cf6abd0fcc93bbeeab" translate="yes" xml:space="preserve">
          <source>Immediately removes the current row from this &lt;code&gt;CachedRowSet&lt;/code&gt; object if the row has been inserted, and also notifies listeners that a row has changed.</source>
          <target state="translated">行が挿入されている場合は、この &lt;code&gt;CachedRowSet&lt;/code&gt; オブジェクトから現在の行をすぐに削除し、行が変更されたことをリスナーに通知します。</target>
        </trans-unit>
        <trans-unit id="e3c8282a36b8a47dc4b2f78994ea2dd708f414e0" translate="yes" xml:space="preserve">
          <source>Immediately removes the current row from this &lt;code&gt;CachedRowSet&lt;/code&gt; object if the row has been inserted, and also notifies listeners that a row has changed. This method can be called at any time during the lifetime of a rowset and assuming the current row is within the exception limitations (see below), it cancels the row insertion of the current row.</source>
          <target state="translated">行が挿入されている場合は、この &lt;code&gt;CachedRowSet&lt;/code&gt; オブジェクトから現在の行をすぐに削除し、行が変更されたことをリスナーに通知します。このメソッドは、行セットの存続期間中いつでも呼び出すことができ、現在の行が例外制限内にあると想定して（以下を参照）、現在の行の行挿入をキャンセルします。</target>
        </trans-unit>
        <trans-unit id="d58d2e0de365bbfe06df3bd3e214308fc7b4c341" translate="yes" xml:space="preserve">
          <source>Immediately reverses the last update operation if the row has been modified.</source>
          <target state="translated">行が変更されている場合は、直前の更新操作を即座に反転させます。</target>
        </trans-unit>
        <trans-unit id="178618a784f41413ed0dba00dd3910328200d108" translate="yes" xml:space="preserve">
          <source>Immediately reverses the last update operation if the row has been modified. This method can be called to reverse updates on all columns until all updates in a row have been rolled back to their state just prior to the last synchronization (&lt;code&gt;acceptChanges&lt;/code&gt;) or population. This method may also be called while performing updates to the insert row.</source>
          <target state="translated">行が変更されている場合は、最後の更新操作をすぐに元に戻します。このメソッドを呼び出すと、行内のすべての更新が最後の同期（ &lt;code&gt;acceptChanges&lt;/code&gt; ）またはポピュレーションの直前の状態にロールバックされるまで、すべての列の更新を元に戻すことができます。このメソッドは、挿入行の更新を実行しているときに呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="ac8d36e07cc56e5300256f2a8edfaee0ed2e6146" translate="yes" xml:space="preserve">
          <source>Immediately turns off all sounding notes on this channel, ignoring the state of the Hold Pedal and the internal decay rate of the current &lt;code&gt;Instrument&lt;/code&gt;.</source>
          <target state="translated">ホールドペダルの状態と現在の &lt;code&gt;Instrument&lt;/code&gt; 内部ディケイレートを無視して、このチャンネルのすべての発音ノートを即座にオフにします。</target>
        </trans-unit>
        <trans-unit id="8758ee05b925965fd186ddc64c16d26477e3f464" translate="yes" xml:space="preserve">
          <source>Immutable arbitrary-precision integers.</source>
          <target state="translated">不変の任意精度整数。</target>
        </trans-unit>
        <trans-unit id="9dadabf71766048113467cbc9b081255811fb85d" translate="yes" xml:space="preserve">
          <source>Immutable arbitrary-precision integers. All operations behave as if BigIntegers were represented in two's-complement notation (like Java's primitive integer types). BigInteger provides analogues to all of Java's primitive integer operators, and all relevant methods from java.lang.Math. Additionally, BigInteger provides operations for modular arithmetic, GCD calculation, primality testing, prime generation, bit manipulation, and a few other miscellaneous operations.</source>
          <target state="translated">不変の任意精度整数。すべての演算は、BigIntegerが2の補数記法で表現されているかのように動作します(Javaの原始整数型のように)。BigIntegerは、Javaの原始整数演算子のすべての類似体と、java.lang.Math.Mathからのすべての関連メソッドを提供します。さらに、BigIntegerは、モジュラー演算、GCD計算、プリマリティテスト、素数生成、ビット操作、およびいくつかの他の雑多な演算を提供します。</target>
        </trans-unit>
        <trans-unit id="0d3137173d33f7241e713b1cc45e83e35598949c" translate="yes" xml:space="preserve">
          <source>Immutable in-memory representation of grammar.</source>
          <target state="translated">文法の不変のインメモリ表現。</target>
        </trans-unit>
        <trans-unit id="9135fe2945023ddca478ae564e2500e0944e20a3" translate="yes" xml:space="preserve">
          <source>Immutable objects which encapsulate the context settings which describe certain rules for numerical operators, such as those implemented by the &lt;a href=&quot;bigdecimal&quot;&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;a href=&quot;bigdecimal&quot;&gt; &lt;code&gt;BigDecimal&lt;/code&gt; &lt;/a&gt;クラスによって実装されるものなど、数値演算子の特定のルールを記述するコンテキスト設定をカプセル化する不変オブジェクト。</target>
        </trans-unit>
        <trans-unit id="3e6d3d9a67ba06c33eaf819b41614751d94fff83" translate="yes" xml:space="preserve">
          <source>Immutable representation of a time span as defined in the W3C XML Schema 1.0 specification.</source>
          <target state="translated">W3C XML Schema 1.0仕様で定義されているタイムスパンの不変表現。</target>
        </trans-unit>
        <trans-unit id="946d1618638d399656d4c970d5ff50225bc47ca3" translate="yes" xml:space="preserve">
          <source>Immutable, arbitrary-precision signed decimal numbers.</source>
          <target state="translated">不変、任意精度の符号付き10進数。</target>
        </trans-unit>
        <trans-unit id="10a4ef5ea8019a3a68a2a4a396691f1d378d5c37" translate="yes" xml:space="preserve">
          <source>Immutable, arbitrary-precision signed decimal numbers. A &lt;code&gt;BigDecimal&lt;/code&gt; consists of an arbitrary precision integer</source>
          <target state="translated">不変の任意精度の符号付き10進数。A &lt;code&gt;BigDecimal&lt;/code&gt; 任意精度の整数から成り</target>
        </trans-unit>
        <trans-unit id="7319e7f2b2dabeaa6c7b27e3568a5f5708e41dfe" translate="yes" xml:space="preserve">
          <source>ImmutableDescriptor</source>
          <target state="translated">ImmutableDescriptor</target>
        </trans-unit>
        <trans-unit id="b36cd894ece50e6aeffc14aae55cd0c27226fd98" translate="yes" xml:space="preserve">
          <source>ImmutableDescriptor.clone()</source>
          <target state="translated">ImmutableDescriptor.clone()</target>
        </trans-unit>
        <trans-unit id="ed62e375f112ad9ccee1fba5b30840d38fa2702b" translate="yes" xml:space="preserve">
          <source>ImmutableDescriptor.equals()</source>
          <target state="translated">ImmutableDescriptor.equals()</target>
        </trans-unit>
        <trans-unit id="cc2486aaa3fee33eb39977e70168c71e9c152579" translate="yes" xml:space="preserve">
          <source>ImmutableDescriptor.getFieldNames()</source>
          <target state="translated">ImmutableDescriptor.getFieldNames()</target>
        </trans-unit>
        <trans-unit id="33c0e00e50294d5765396d16bed5b31e31b33704" translate="yes" xml:space="preserve">
          <source>ImmutableDescriptor.getFieldValue()</source>
          <target state="translated">ImmutableDescriptor.getFieldValue()</target>
        </trans-unit>
        <trans-unit id="27f5f695db4a9c871dae6c1af910d2e02e2d8827" translate="yes" xml:space="preserve">
          <source>ImmutableDescriptor.getFieldValues()</source>
          <target state="translated">ImmutableDescriptor.getFieldValues()</target>
        </trans-unit>
        <trans-unit id="c74b89a34fa2994f4dc20dbdb82753d62c2f8dba" translate="yes" xml:space="preserve">
          <source>ImmutableDescriptor.getFields()</source>
          <target state="translated">ImmutableDescriptor.getFields()</target>
        </trans-unit>
        <trans-unit id="1ef304a4a99d2ee1d85fa6fa5017995b00e2e0d9" translate="yes" xml:space="preserve">
          <source>ImmutableDescriptor.hashCode()</source>
          <target state="translated">ImmutableDescriptor.hashCode()</target>
        </trans-unit>
        <trans-unit id="1bed3158b55a0ff6dc6cf7eee07c3cb59df5f3ae" translate="yes" xml:space="preserve">
          <source>ImmutableDescriptor.isValid()</source>
          <target state="translated">ImmutableDescriptor.isValid()</target>
        </trans-unit>
        <trans-unit id="9d20352efe423c7d09b17d5ea975cfa82b08c2a1" translate="yes" xml:space="preserve">
          <source>ImmutableDescriptor.removeField()</source>
          <target state="translated">ImmutableDescriptor.removeField()</target>
        </trans-unit>
        <trans-unit id="d8f820196ba5acc46b266d1f2d228cf55ed7e0e1" translate="yes" xml:space="preserve">
          <source>ImmutableDescriptor.setField()</source>
          <target state="translated">ImmutableDescriptor.setField()</target>
        </trans-unit>
        <trans-unit id="b253285758003719de94b91f5f21225436dd43df" translate="yes" xml:space="preserve">
          <source>ImmutableDescriptor.setFields()</source>
          <target state="translated">ImmutableDescriptor.setFields()</target>
        </trans-unit>
        <trans-unit id="3331b138f3a353ed1554e90d8d377dd39afe2405" translate="yes" xml:space="preserve">
          <source>ImmutableDescriptor.toString()</source>
          <target state="translated">ImmutableDescriptor.toString()</target>
        </trans-unit>
        <trans-unit id="58bb6a00dee16db192f8a0654a1c5b9c33aee672" translate="yes" xml:space="preserve">
          <source>ImmutableDescriptor.union()</source>
          <target state="translated">ImmutableDescriptor.union()</target>
        </trans-unit>
        <trans-unit id="53ec8c0efe8d1c9632dd1fa4a2184ba29ffd5a20" translate="yes" xml:space="preserve">
          <source>Impl</source>
          <target state="translated">Impl</target>
        </trans-unit>
        <trans-unit id="f0056cd1979fbe037e426222b348d25fd0689453" translate="yes" xml:space="preserve">
          <source>Implement &lt;code&gt;NamingListener.namingExceptionThrown()&lt;/code&gt; so that it will be notified of exceptions thrown while attempting to collect information about the events.</source>
          <target state="translated">&lt;code&gt;NamingListener.namingExceptionThrown()&lt;/code&gt; を実装して、イベントに関する情報を収集しようとしたときにスローされた例外が通知されるようにします。</target>
        </trans-unit>
        <trans-unit id="690dbe719c377561373486aa2f92fb2d6f5e4ff2" translate="yes" xml:space="preserve">
          <source>Implement &lt;code&gt;NamingListener.namingExceptionThrown()&lt;/code&gt; so that it will be notified of exceptions thrown while attempting to collect unsolicited notification events.</source>
          <target state="translated">非請求通知イベントの収集を試行中にスローされた例外が通知されるように、 &lt;code&gt;NamingListener.namingExceptionThrown()&lt;/code&gt; を実装します。</target>
        </trans-unit>
        <trans-unit id="75affea7e53c52cd8fab4edffef65fbf6ddb7308" translate="yes" xml:space="preserve">
          <source>Implement this interface and its method</source>
          <target state="translated">このインタフェースとそのメソッドを実装する</target>
        </trans-unit>
        <trans-unit id="5063beca960838bb432eb32e9373f94a39f1f788" translate="yes" xml:space="preserve">
          <source>Implement this interface and its method (&lt;code&gt;objectChanged()&lt;/code&gt;)</source>
          <target state="translated">このインターフェースとそのメソッドを実装します（ &lt;code&gt;objectChanged()&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="aff6c99e6945c218f388a4965c6177505dfafc44" translate="yes" xml:space="preserve">
          <source>Implement this interface and its methods.</source>
          <target state="translated">このインタフェースとそのメソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="2e66b6c0aeb65e7c92f1357992e37901f5147726" translate="yes" xml:space="preserve">
          <source>Implementation Caveats</source>
          <target state="translated">実装上の注意点</target>
        </trans-unit>
        <trans-unit id="1ea8952f50fb61a30b61a3567d5ee3bac1c761f1" translate="yes" xml:space="preserve">
          <source>Implementation Considerations</source>
          <target state="translated">実装上の考慮事項</target>
        </trans-unit>
        <trans-unit id="5392a59cf19d936f582c62933f66e98178ed888b" translate="yes" xml:space="preserve">
          <source>Implementation Note:</source>
          <target state="translated">実装ノート。</target>
        </trans-unit>
        <trans-unit id="35577183da3a83c37a96990c90025cb613ff293d" translate="yes" xml:space="preserve">
          <source>Implementation Notes</source>
          <target state="translated">実装上の注意事項</target>
        </trans-unit>
        <trans-unit id="56bd65881e479e23bf147d909b47f36e4767545c" translate="yes" xml:space="preserve">
          <source>Implementation Requirements:</source>
          <target state="translated">実装要件。</target>
        </trans-unit>
        <trans-unit id="c054b6d2d6fae8ccc22414dda4a08abbd6309cb2" translate="yes" xml:space="preserve">
          <source>Implementation classes can implement any number of remote interfaces and can extend other remote implementation classes. RMI provides some convenience classes that remote object implementations can extend which facilitate remote object creation. These classes are &lt;code&gt;java.rmi.server.UnicastRemoteObject&lt;/code&gt; and &lt;code&gt;java.rmi.activation.Activatable&lt;/code&gt;.</source>
          <target state="translated">実装クラスは、任意の数のリモートインターフェイスを実装でき、他のリモート実装クラスを拡張できます。RMIは、リモートオブジェクトの作成を容易にする、リモートオブジェクトの実装が拡張できるいくつかの便利なクラスを提供します。これらのクラスは、 &lt;code&gt;java.rmi.server.UnicastRemoteObject&lt;/code&gt; および &lt;code&gt;java.rmi.activation.Activatable&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b4db05a22307844f1edc4910aee61a1ebef7a63d" translate="yes" xml:space="preserve">
          <source>Implementation defaults require that only cipher suites which authenticate servers and provide confidentiality be enabled by default. Only if both sides explicitly agree to unauthenticated and/or non-private (unencrypted) communications will such a cipher suite be selected.</source>
          <target state="translated">実装のデフォルトでは、サーバを認証して機密性を提供する暗号化スイートのみがデフォルトで有効になっている必要があります。このような暗号化スイートが選択されるのは、認証されていない通信および/またはプライベートではない (暗号化されていない)通信に双方が明示的に同意した場合のみです。</target>
        </trans-unit>
        <trans-unit id="c2f7359e09ff4796735a0de165edbf80e271b48e" translate="yes" xml:space="preserve">
          <source>Implementation defaults require that only cipher suites which authenticate servers and provide confidentiality be enabled by default. Only if both sides explicitly agree to unauthenticated and/or non-private (unencrypted) communications will such a ciphersuite be selected.</source>
          <target state="translated">実装のデフォルトでは、サーバを認証して機密性を提供する暗号化スイートのみがデフォルトで有効になっている必要があります。このような暗号化スイートが選択されるのは、認証されていないおよび/またはプライベートではない (暗号化されていない)通信に双方が明示的に同意した場合のみです。</target>
        </trans-unit>
        <trans-unit id="89a26f51603685592a55c536acb5f2c479db2b32" translate="yes" xml:space="preserve">
          <source>Implementation dependent*</source>
          <target state="translated">実装に依存する*。</target>
        </trans-unit>
        <trans-unit id="7d8419888cec7209ae96fa638de54f65acbe69d3" translate="yes" xml:space="preserve">
          <source>Implementation note: All basic operations execute in constant time. They are likely (though not guaranteed) to be faster than their &lt;a href=&quot;hashmap&quot;&gt;&lt;code&gt;HashMap&lt;/code&gt;&lt;/a&gt; counterparts.</source>
          <target state="translated">実装上の注意：すべての基本操作は一定の時間で実行されます。それらは（保証はされませんが）&lt;a href=&quot;hashmap&quot;&gt; &lt;code&gt;HashMap&lt;/code&gt; の&lt;/a&gt;対応物よりも高速である可能性があります。</target>
        </trans-unit>
        <trans-unit id="cf02ce9de07c112e78515bdd74f832a2026eaf4c" translate="yes" xml:space="preserve">
          <source>Implementation note: All basic operations execute in constant time. They are likely (though not guaranteed) to be much faster than their &lt;a href=&quot;hashset&quot;&gt;&lt;code&gt;HashSet&lt;/code&gt;&lt;/a&gt; counterparts. Even bulk operations execute in constant time if their argument is also an enum set.</source>
          <target state="translated">実装上の注意：すべての基本操作は一定の時間で実行されます。それらは（保証はされませんが）&lt;a href=&quot;hashset&quot;&gt; &lt;code&gt;HashSet&lt;/code&gt; の&lt;/a&gt;対応物よりもはるかに高速である可能性があります。引数も列挙セットである場合、一括操作でさえ一定の時間で実行されます。</target>
        </trans-unit>
        <trans-unit id="c78934415a11eef7fc53181c42efe07bfe3abdfc" translate="yes" xml:space="preserve">
          <source>Implementation note: All constructors start a timer thread.</source>
          <target state="translated">実装上の注意:すべてのコンストラクタはタイマースレッドを開始します。</target>
        </trans-unit>
        <trans-unit id="9f92508b268a3c37cb005d5f88087365e6264aad" translate="yes" xml:space="preserve">
          <source>Implementation note: Currently the syntax properties of n are not used when doing the comparison. They might be in the future.</source>
          <target state="translated">実装上の注意:現在のところ、比較を行う際にnの構文プロパティは使用されていません。将来的には使用されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="357fbc883df7f4e052dd8544280cd702a44ddce7" translate="yes" xml:space="preserve">
          <source>Implementation note: Currently the syntax properties of suffix is not used or checked. They might be in the future.</source>
          <target state="translated">実装上の注意:現在のところ、接尾辞の構文プロパティは使用されていませんし、チェックもされていません。将来的には使われるかもしれません。</target>
        </trans-unit>
        <trans-unit id="57c22944b726188bf6ae7fd68a8e4603e289bff8" translate="yes" xml:space="preserve">
          <source>Implementation note: Currently the syntax properties of the two compound names are not compared for equality. They might be in the future.</source>
          <target state="translated">実装上の注意:現在のところ、2 つの複合名の構文プロパティは平等性のために比較されていません。将来的には比較されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="17efe67f11fa0904c5508671cc86b1f03383b987" translate="yes" xml:space="preserve">
          <source>Implementation note: Currently the syntax properties of the two compound names are not compared when checking order. They might be in the future.</source>
          <target state="translated">実装上の注意:現在、2 つの複合名の構文プロパティは、順序をチェックする際に比較されません。将来的には比較されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="fadd3ec1701bf6a8dfbeac94df0eeb78424f23bc" translate="yes" xml:space="preserve">
          <source>Implementation note: In Sun's JRE, the &lt;code&gt;PreferencesFactory&lt;/code&gt; implementation is located as follows:</source>
          <target state="translated">実装上の注意：SunのJREでは、 &lt;code&gt;PreferencesFactory&lt;/code&gt; 実装は次の場所にあります。</target>
        </trans-unit>
        <trans-unit id="32af97f107bce0105a0965130e4994d46e36fe62" translate="yes" xml:space="preserve">
          <source>Implementation note: In Sun's default &lt;code&gt;Preferences&lt;/code&gt; implementations, the user's identity is inherited from the underlying operating system and does not change for the lifetime of the virtual machine. It is recognized that server-side &lt;code&gt;Preferences&lt;/code&gt; implementations may have the user identity change from request to request, implicitly passed to &lt;code&gt;Preferences&lt;/code&gt; methods via the use of a static &lt;a href=&quot;../../../../java.base/java/lang/threadlocal&quot;&gt;&lt;code&gt;ThreadLocal&lt;/code&gt;&lt;/a&gt; instance. Authors of such implementations are</source>
          <target state="translated">実装上の注意：Sunのデフォルトの &lt;code&gt;Preferences&lt;/code&gt; 実装では、ユーザーのIDは基盤となるオペレーティングシステムから継承され、仮想マシンの存続期間中は変更されません。サーバー側の &lt;code&gt;Preferences&lt;/code&gt; 実装では、ユーザーIDがリクエストごとに変更され、静的&lt;a href=&quot;../../../../java.base/java/lang/threadlocal&quot;&gt; &lt;code&gt;ThreadLocal&lt;/code&gt; &lt;/a&gt;インスタンスを使用して &lt;code&gt;Preferences&lt;/code&gt; メソッドに暗黙的に渡される場合があることが認識されています。そのような実装の作者は</target>
        </trans-unit>
        <trans-unit id="e83e39679a9ec5b714b7a869ee88c37537f350ca" translate="yes" xml:space="preserve">
          <source>Implementation note: In Sun's default &lt;code&gt;Preferences&lt;/code&gt; implementations, the user's identity is inherited from the underlying operating system and does not change for the lifetime of the virtual machine. It is recognized that server-side &lt;code&gt;Preferences&lt;/code&gt; implementations may have the user identity change from request to request, implicitly passed to &lt;code&gt;Preferences&lt;/code&gt; methods via the use of a static &lt;a href=&quot;../../lang/threadlocal&quot;&gt;&lt;code&gt;ThreadLocal&lt;/code&gt;&lt;/a&gt; instance. Authors of such implementations are</source>
          <target state="translated">実装に関する注記：Sunのデフォルトの &lt;code&gt;Preferences&lt;/code&gt; 実装では、ユーザーのIDは基礎となるオペレーティングシステムから継承され、仮想マシンの存続期間中は変わりません。サーバー側の &lt;code&gt;Preferences&lt;/code&gt; 実装では、静的&lt;a href=&quot;../../lang/threadlocal&quot;&gt; &lt;code&gt;ThreadLocal&lt;/code&gt; &lt;/a&gt;インスタンスを使用して &lt;code&gt;Preferences&lt;/code&gt; メソッドに暗黙的に渡される、リクエストごとにユーザーIDが変更される場合があることが認識されています。そのような実装の作者は</target>
        </trans-unit>
        <trans-unit id="f8347a8d9b2c4d7fc6f3f82a020b9be3d04e1235" translate="yes" xml:space="preserve">
          <source>Implementation note: It is a good idea for the returned input stream to be buffered.</source>
          <target state="translated">実装上の注意:返された入力ストリームはバッファリングされているのが良いでしょう。</target>
        </trans-unit>
        <trans-unit id="e620b36bbd87ef780306fc9678272515771dd91b" translate="yes" xml:space="preserve">
          <source>Implementation note: It is a good idea for the returned output stream to be buffered.</source>
          <target state="translated">実装上の注意:返された出力ストリームがバッファリングされていることは良いアイデアです。</target>
        </trans-unit>
        <trans-unit id="12c36d0f22c12cc8b408418579ca954e388e69cb" translate="yes" xml:space="preserve">
          <source>Implementation note: Java platform implementers are encouraged to document their implementation's behavior with respect to the &lt;code&gt;stackSize&lt;/code&gt; parameter.</source>
          <target state="translated">実装上の注意：Javaプラットフォームの実装者は、 &lt;code&gt;stackSize&lt;/code&gt; パラメーターに関する実装の動作を文書化することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a80652326887f793e45705b34277de3fc6ce115d" translate="yes" xml:space="preserve">
          <source>Implementation note: The implementations of the &quot;bit twiddling&quot; methods (such as &lt;a href=&quot;#highestOneBit(int)&quot;&gt;&lt;code&gt;highestOneBit&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#numberOfTrailingZeros(int)&quot;&gt;&lt;code&gt;numberOfTrailingZeros&lt;/code&gt;&lt;/a&gt;) are based on material from Henry S. Warren, Jr.'s</source>
          <target state="translated">実装注：（例えば、メソッド「いじるビット」の実装&lt;a href=&quot;#highestOneBit(int)&quot;&gt; &lt;code&gt;highestOneBit&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#numberOfTrailingZeros(int)&quot;&gt; &lt;code&gt;numberOfTrailingZeros&lt;/code&gt; は&lt;/a&gt;）ヘンリーS.ウォーレン・ジュニア者からの材料に基づいています</target>
        </trans-unit>
        <trans-unit id="a7085ff44d84babc5ff1f7930ff810b8715a1f05" translate="yes" xml:space="preserve">
          <source>Implementation note: The implementations of the &quot;bit twiddling&quot; methods (such as &lt;a href=&quot;#highestOneBit(long)&quot;&gt;&lt;code&gt;highestOneBit&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#numberOfTrailingZeros(long)&quot;&gt;&lt;code&gt;numberOfTrailingZeros&lt;/code&gt;&lt;/a&gt;) are based on material from Henry S. Warren, Jr.'s</source>
          <target state="translated">実装注：（例えば、メソッド「いじるビット」の実装&lt;a href=&quot;#highestOneBit(long)&quot;&gt; &lt;code&gt;highestOneBit&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#numberOfTrailingZeros(long)&quot;&gt; &lt;code&gt;numberOfTrailingZeros&lt;/code&gt; は&lt;/a&gt;）ヘンリーS.ウォーレン・ジュニア者からの材料に基づいています</target>
        </trans-unit>
        <trans-unit id="cc3f67c06af9914501ca24f8883a4e8966569d3d" translate="yes" xml:space="preserve">
          <source>Implementation note: The implementations of the &quot;bit twiddling&quot; methods (such as &lt;a href=&quot;integer#highestOneBit-int-&quot;&gt;&lt;code&gt;highestOneBit&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;integer#numberOfTrailingZeros-int-&quot;&gt;&lt;code&gt;numberOfTrailingZeros&lt;/code&gt;&lt;/a&gt;) are based on material from Henry S. Warren, Jr.'s</source>
          <target state="translated">実装注：（例えば、メソッド「いじるビット」の実装&lt;a href=&quot;integer#highestOneBit-int-&quot;&gt; &lt;code&gt;highestOneBit&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;integer#numberOfTrailingZeros-int-&quot;&gt; &lt;code&gt;numberOfTrailingZeros&lt;/code&gt; は&lt;/a&gt;）ヘンリーS.ウォーレン・ジュニア者からの材料に基づいています</target>
        </trans-unit>
        <trans-unit id="8a4a16b7058693cbd0304356eead5736843a8092" translate="yes" xml:space="preserve">
          <source>Implementation note: The implementations of the &quot;bit twiddling&quot; methods (such as &lt;a href=&quot;long#highestOneBit-long-&quot;&gt;&lt;code&gt;highestOneBit&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;long#numberOfTrailingZeros-long-&quot;&gt;&lt;code&gt;numberOfTrailingZeros&lt;/code&gt;&lt;/a&gt;) are based on material from Henry S. Warren, Jr.'s</source>
          <target state="translated">実装注：（例えば、メソッド「いじるビット」の実装&lt;a href=&quot;long#highestOneBit-long-&quot;&gt; &lt;code&gt;highestOneBit&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;long#numberOfTrailingZeros-long-&quot;&gt; &lt;code&gt;numberOfTrailingZeros&lt;/code&gt; は&lt;/a&gt;）ヘンリーS.ウォーレン・ジュニア者からの材料に基づいています</target>
        </trans-unit>
        <trans-unit id="3188db0c530c042cb96da0a5994510f97bfc5cc0" translate="yes" xml:space="preserve">
          <source>Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.</source>
          <target state="translated">実装ノート:ソートアルゴリズムは、Vladimir Yaroslavoslavskiy、Jon Bentley、Joshua BlochによるDual-Pivot Quicksortです。このアルゴリズムは、他のクイックソートが二次性能に劣化する原因となる多くのデータセットに対してO(n log(n))の性能を提供し、従来の(ワンピボット)クイックソートの実装よりも一般的に高速です。</target>
        </trans-unit>
        <trans-unit id="b1d5721596c5d27ffa016e87f4ba7a7afcdd3a37" translate="yes" xml:space="preserve">
          <source>Implementation note: This class scales to large numbers of concurrently scheduled tasks (thousands should present no problem). Internally, it uses a binary heap to represent its task queue, so the cost to schedule a task is O(log n), where n is the number of concurrently scheduled tasks.</source>
          <target state="translated">実装上の注意:このクラスは多数の同時スケジュールされたタスクに対応しています (数千個でも問題ありません)。内部的には、タスクキューを表現するためにバイナリヒープを使用しているので、タスクをスケジュールするためのコストはO(log n)です。</target>
        </trans-unit>
        <trans-unit id="8ef20428f4dadec2f47e6e6850bd2a0025279b42" translate="yes" xml:space="preserve">
          <source>Implementation note: This implementation is a stable, adaptive, iterative mergesort that requires far fewer than n lg(n) comparisons when the input array is partially sorted, while offering the performance of a traditional mergesort when the input array is randomly ordered. If the input array is nearly sorted, the implementation requires approximately n comparisons. Temporary storage requirements vary from a small constant for nearly sorted input arrays to n/2 object references for randomly ordered input arrays.</source>
          <target state="translated">実装上の注意:この実装は,入力配列が部分的にソートされている場合には,従来のマージソートの性能を提供しながら,入力配列がランダムに順序付けされている場合には,従来のマージソートの性能を提供しながら,n lg(n)よりもはるかに少ない比較を必要とする,安定した適応的な反復的マージソートです.入力配列がほぼソートされている場合,実装では約n回の比較が必要となります.一時的なストレージ要件は,ほぼソートされた入力配列に対する小さな定数から,ランダムに順序付けられた入力配列に対するn/2オブジェクト参照まで様々です.</target>
        </trans-unit>
        <trans-unit id="eb0470b2fedea042771a02bc0a5cad6afbd16278" translate="yes" xml:space="preserve">
          <source>Implementation note: This implementation maintains markable references by creating internal objects representing &quot;boxed&quot; [reference, boolean] pairs.</source>
          <target state="translated">実装上の注意:この実装では、&quot;ボックス化された&quot; [参照、ブール値]ペアを表す内部オブジェクトを作成することで、マーク可能な参照を維持します。</target>
        </trans-unit>
        <trans-unit id="2cff0a7e73f6f3b914b5fc7d60794f6a681ade41" translate="yes" xml:space="preserve">
          <source>Implementation note: This implementation maintains stamped references by creating internal objects representing &quot;boxed&quot; [reference, integer] pairs.</source>
          <target state="translated">実装上の注意:この実装では、「ボックス化された」[参照、整数]ペアを表す内部オブジェクトを作成することで、スタンプされた参照を維持します。</target>
        </trans-unit>
        <trans-unit id="82eefb0670ba392863839d4b7c351ae2f2aec431" translate="yes" xml:space="preserve">
          <source>Implementation note: This is a simple</source>
          <target state="translated">実装上の注意:これはシンプルな</target>
        </trans-unit>
        <trans-unit id="0f1b03ffa0afe0f4d925ad6c4cbaf6a53cc3d45c" translate="yes" xml:space="preserve">
          <source>Implementation note: this implementation provides O(log(n)) time for the enqueuing and dequeuing methods (&lt;code&gt;offer&lt;/code&gt;, &lt;code&gt;poll&lt;/code&gt;, &lt;code&gt;remove()&lt;/code&gt; and &lt;code&gt;add&lt;/code&gt;); linear time for the &lt;code&gt;remove(Object)&lt;/code&gt; and &lt;code&gt;contains(Object)&lt;/code&gt; methods; and constant time for the retrieval methods (&lt;code&gt;peek&lt;/code&gt;, &lt;code&gt;element&lt;/code&gt;, and &lt;code&gt;size&lt;/code&gt;).</source>
          <target state="translated">実装メモ：この実装は、エンキューおよびデキューのメソッド（ &lt;code&gt;offer&lt;/code&gt; 、 &lt;code&gt;poll&lt;/code&gt; 、 &lt;code&gt;remove()&lt;/code&gt; 、 &lt;code&gt;add&lt;/code&gt; ）にO（log（n））時間を提供します。 &lt;code&gt;remove(Object)&lt;/code&gt; および &lt;code&gt;contains(Object)&lt;/code&gt; メソッドの線形時間。取得メソッド（ &lt;code&gt;peek&lt;/code&gt; 、 &lt;code&gt;element&lt;/code&gt; 、 &lt;code&gt;size&lt;/code&gt; ）の一定時間。</target>
        </trans-unit>
        <trans-unit id="62d6f06657d3359a7c49b4f528b67ee2cdba413a" translate="yes" xml:space="preserve">
          <source>Implementation of ComboPopup.getKeyListener().</source>
          <target state="translated">ComboPopup.getKeyListener()の実装です。</target>
        </trans-unit>
        <trans-unit id="70462c77e4382253855b86e4e7f6f7c7c0723bf8" translate="yes" xml:space="preserve">
          <source>Implementation of ComboPopup.getList().</source>
          <target state="translated">ComboPopup.getList()の実装です。</target>
        </trans-unit>
        <trans-unit id="5788526cf7b5f9f213ed4c51c11bc1a3c88db823" translate="yes" xml:space="preserve">
          <source>Implementation of ComboPopup.getMouseListener().</source>
          <target state="translated">ComboPopup.getMouseListener()の実装です。</target>
        </trans-unit>
        <trans-unit id="dcfea7aadf5f0efc973fd90897934bacf8738909" translate="yes" xml:space="preserve">
          <source>Implementation of ComboPopup.getMouseMotionListener().</source>
          <target state="translated">ComboPopup.getMouseMotionListener()の実装です。</target>
        </trans-unit>
        <trans-unit id="6bbde2392be17daf4b5536ddf29fc67cd5e4611f" translate="yes" xml:space="preserve">
          <source>Implementation of ComboPopup.hide().</source>
          <target state="translated">ComboPopup.hide()の実装。</target>
        </trans-unit>
        <trans-unit id="987207700ef33908715f75cb881ee0043c420d73" translate="yes" xml:space="preserve">
          <source>Implementation of ComboPopup.show().</source>
          <target state="translated">ComboPopup.show()の実装。</target>
        </trans-unit>
        <trans-unit id="fa0fb2c8ec52562d3cc085877c70e27e31dce0d3" translate="yes" xml:space="preserve">
          <source>Implementation of ScrollBarUI for the Basic Look and Feel</source>
          <target state="translated">基本的な見た目のためのScrollBarUIの実装</target>
        </trans-unit>
        <trans-unit id="e4c2e8d390498cc8b74a825e1fe79b2f66af8b30" translate="yes" xml:space="preserve">
          <source>Implementation of ScrollBarUI for the Metal Look and Feel</source>
          <target state="translated">メタルルック&amp;フィールのためのScrollBarUIの実装</target>
        </trans-unit>
        <trans-unit id="e5d871d42e339265298961acaedbdd4193e5ecce" translate="yes" xml:space="preserve">
          <source>Implementation of an ActionListener that the JSplitPane UI uses for handling specific key presses.</source>
          <target state="translated">JSplitPane UIが特定のキー押下を処理するために使用するActionListenerの実装。</target>
        </trans-unit>
        <trans-unit id="3118ec0d79d222bcd2256d07c590a042e52e16c7" translate="yes" xml:space="preserve">
          <source>Implementation of the &lt;a href=&quot;rmiconnection&quot;&gt;&lt;code&gt;RMIConnection&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">&lt;a href=&quot;rmiconnection&quot;&gt; &lt;code&gt;RMIConnection&lt;/code&gt; &lt;/a&gt;インターフェースの実装。</target>
        </trans-unit>
        <trans-unit id="f35fc1148f7585e27e0b304b08634ba0530c650a" translate="yes" xml:space="preserve">
          <source>Implementation of the &lt;a href=&quot;rmiconnection&quot;&gt;&lt;code&gt;RMIConnection&lt;/code&gt;&lt;/a&gt; interface. User code will not usually reference this class.</source>
          <target state="translated">&lt;a href=&quot;rmiconnection&quot;&gt; &lt;code&gt;RMIConnection&lt;/code&gt; &lt;/a&gt;インターフェースの実装。ユーザーコードは通常このクラスを参照しません。</target>
        </trans-unit>
        <trans-unit id="7aae3f60380c55bc82937af4ac2577abd3646434" translate="yes" xml:space="preserve">
          <source>Implementation of the FocusListener that the JSplitPane UI uses.</source>
          <target state="translated">JSplitPane UIが使用するFocusListenerの実装。</target>
        </trans-unit>
        <trans-unit id="e45222ac40e5e9145fe91fecc0ab9e099a479550" translate="yes" xml:space="preserve">
          <source>Implementation of the PropertyChangeListener that the JSplitPane UI uses.</source>
          <target state="translated">JSplitPane UIが使用するPropertyChangeListenerの実装。</target>
        </trans-unit>
        <trans-unit id="2a530c76800e044b9bf6aafcd3efc974a11ea05e" translate="yes" xml:space="preserve">
          <source>Implementation of this &quot;interface&quot; can be obtained through the &lt;a href=&quot;validatorhandler#getTypeInfoProvider()&quot;&gt;&lt;code&gt;ValidatorHandler.getTypeInfoProvider()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">この「インターフェース」の実装は、&lt;a href=&quot;validatorhandler#getTypeInfoProvider()&quot;&gt; &lt;code&gt;ValidatorHandler.getTypeInfoProvider()&lt;/code&gt; &lt;/a&gt;メソッドを介して取得できます。</target>
        </trans-unit>
        <trans-unit id="7f55d131a2dc1cfdadfdc55ae7393f24e57ed10d" translate="yes" xml:space="preserve">
          <source>Implementation of this compound name. This field is initialized by the constructors and cannot be null. It should be treated as a read-only variable by subclasses.</source>
          <target state="translated">この複合名の実装。このフィールドはコンストラクタによって初期化され、NULLにすることはできません。サブクラスでは読み取り専用の変数として扱う必要があります。</target>
        </trans-unit>
        <trans-unit id="c455488aae5e9f5d4d1f7ba581ef3e990cd0d089" translate="yes" xml:space="preserve">
          <source>Implementation of this method should make sure the returned keys match the latest content of the keytab file. The result is a newly created copy that can be modified by the caller without modifying the keytab object. The caller should &lt;a href=&quot;kerberoskey#destroy()&quot;&gt;&lt;code&gt;destroy&lt;/code&gt;&lt;/a&gt; the result keys after they are used.</source>
          <target state="translated">このメソッドの実装では、返されたキーがkeytabファイルの最新のコンテンツと一致することを確認する必要があります。その結果、新しく作成されたコピーが作成され、keytabオブジェクトを変更せずに呼び出し元が変更できます。呼び出し元は、結果キーが使用された後、それらを&lt;a href=&quot;kerberoskey#destroy()&quot;&gt; &lt;code&gt;destroy&lt;/code&gt; &lt;/a&gt;必要があります。</target>
        </trans-unit>
        <trans-unit id="4588461e3c03d7bc79552363d89b889505499be0" translate="yes" xml:space="preserve">
          <source>Implementation of this method should make sure the returned keys match the latest content of the keytab file. The result is a newly created copy that can be modified by the caller without modifying the keytab object. The caller should &lt;a href=&quot;kerberoskey#destroy--&quot;&gt;&lt;code&gt;destroy&lt;/code&gt;&lt;/a&gt; the result keys after they are used.</source>
          <target state="translated">このメソッドを実装すると、返されるキーがkeytabファイルの最新のコンテンツと一致するようになります。結果は、keytabオブジェクトを変更せずに呼び出し元が変更できる、新しく作成されたコピーです。呼び出し元は、使用後に結果キーを&lt;a href=&quot;kerberoskey#destroy--&quot;&gt; &lt;code&gt;destroy&lt;/code&gt; &lt;/a&gt;必要があります。</target>
        </trans-unit>
        <trans-unit id="396c510a1fc2ba783df94b6f422e4210a3731d18" translate="yes" xml:space="preserve">
          <source>Implementation specific properties are prefixed with a package name associated with the implementor, beginning with &lt;code&gt;com.&lt;/code&gt; or a similar prefix. All property names beginning with &lt;code&gt;pack.&lt;/code&gt; and &lt;code&gt;unpack.&lt;/code&gt; are reserved for use by this API.</source>
          <target state="translated">実装固有のプロパティには、 &lt;code&gt;com.&lt;/code&gt; で始まる、実装者に関連付けられたパッケージ名の接頭辞が付きます。または同様の接頭辞。 &lt;code&gt;pack.&lt;/code&gt; 始まるすべてのプロパティ名。そして &lt;code&gt;unpack.&lt;/code&gt; このAPIで使用するために予約されています。</target>
        </trans-unit>
        <trans-unit id="f7b530c2bf8258e2420563a2fcc5823de5071326" translate="yes" xml:space="preserve">
          <source>Implementations are free to flush changes into the persistent store at any time. They do not need to wait for this method to be called.</source>
          <target state="translated">実装は、いつでも変更を永続ストアにフラッシュすることができます。このメソッドが呼ばれるのを待つ必要はありません。</target>
        </trans-unit>
        <trans-unit id="bbef6d428d76eba48a5e342afaf9006175c411f4" translate="yes" xml:space="preserve">
          <source>Implementations are free to ignore the hints completely, but should try to use an implementation algorithm that is as close as possible to the request. If an implementation supports a given algorithm when any value is used for an associated hint key, then minimally it must do so when the value for that key is the exact value that specifies the algorithm.</source>
          <target state="translated">実装はヒントを完全に無視することは自由であるが、リクエストに可能な限り近い実装 アルゴリズムを使用しようとすべきである。関連するヒントキーに何らかの値が使用されるときに、実装が与えられた アルゴリズムをサポートする場合、そのキーの値がアルゴリズムを指定する 正確な値であるときに、最低限、そうしなければならない。</target>
        </trans-unit>
        <trans-unit id="eafb44c538b7aa7794d10b653782aa71d2cf24c8" translate="yes" xml:space="preserve">
          <source>Implementations are free to implement the Cloneable interface.</source>
          <target state="translated">Cloneableインターフェースの実装は自由です。</target>
        </trans-unit>
        <trans-unit id="90d7991836c70f5920ce49a6302cb1849e347963" translate="yes" xml:space="preserve">
          <source>Implementations are free to implement the Cloneable interface. Client applications can test cloneability by attempting cloning and catching the CloneNotSupportedException:</source>
          <target state="translated">実装は自由に Cloneable インターフェースを実装することができます。クライアントアプリケーションは複製を試みて CloneNotSupportedException をキャッチすることで複製可能性をテストすることができます。</target>
        </trans-unit>
        <trans-unit id="cf03efd7cfc8f1ec7309d501f6cf5b8fc2e0cc89" translate="yes" xml:space="preserve">
          <source>Implementations are not required to support the activation mechanism. If activation is not supported by this implementation, several specific activation API methods are all required to throw &lt;code&gt;UnsupportedOperationException&lt;/code&gt;. If activation is supported by this implementation, these methods must never throw &lt;code&gt;
UnsupportedOperationException&lt;/code&gt;. These methods are denoted by the presence of an entry for &lt;code&gt;UnsupportedOperationException&lt;/code&gt; in the &lt;strong&gt;Throws&lt;/strong&gt; section of each method's specification.</source>
          <target state="translated">アクティベーションメカニズムをサポートするために実装は必要ありません。この実装でアクティベーションがサポートされていない場合、 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; をスローするには、いくつかの特定のアクティベーションAPIメソッドがすべて必要です。この実装でアクティベーションがサポートされている場合、これらのメソッドは &lt;code&gt; UnsupportedOperationException&lt;/code&gt; をスローしてはなりません。これらの方法はのためのエントリの存在によって示されている &lt;code&gt;UnsupportedOperationException&lt;/code&gt; における&lt;strong&gt;例外&lt;/strong&gt;各メソッドの仕様のセクション。</target>
        </trans-unit>
        <trans-unit id="3aaeb0d29c017dba3531c1ffc50226364e7eb90c" translate="yes" xml:space="preserve">
          <source>Implementations are not required to support the inter-process transfer of security contexts. Before exporting a context, calling the &lt;a href=&quot;gsscontext#isTransferable()&quot;&gt;&lt;code&gt;GSSContext.isTransferable&lt;/code&gt;&lt;/a&gt; will indicate if the context is transferable. Calling this method in an implementation that does not support it will result in a &lt;code&gt;GSSException&lt;/code&gt; with the error code &lt;a href=&quot;gssexception#UNAVAILABLE&quot;&gt;&lt;code&gt;GSSException.UNAVAILABLE&lt;/code&gt;&lt;/a&gt;. Some mechanism providers might require that the caller be granted permission to initiate or accept a security context. A failed permission check might cause a &lt;a href=&quot;../../../../java.base/java/lang/securityexception&quot;&gt;&lt;code&gt;SecurityException&lt;/code&gt;&lt;/a&gt; to be thrown from this method.</source>
          <target state="translated">セキュリティコンテキストのプロセス間転送をサポートするために実装は必要ありません。コンテキストをエクスポートする前に、&lt;a href=&quot;gsscontext#isTransferable()&quot;&gt; &lt;code&gt;GSSContext.isTransferable&lt;/code&gt; &lt;/a&gt;を呼び出すと、コンテキストが転送可能かどうかが示されます。それはになりますサポートしていない実装でこのメソッドを呼び出し &lt;code&gt;GSSException&lt;/code&gt; エラーコードで&lt;a href=&quot;gssexception#UNAVAILABLE&quot;&gt; &lt;code&gt;GSSException.UNAVAILABLE&lt;/code&gt; が設定&lt;/a&gt;。一部のメカニズムプロバイダーは、セキュリティコンテキストを開始または受け入れるためのアクセス許可を呼び出し元に付与することを要求する場合があります。権限チェックに失敗すると、このメソッドから&lt;a href=&quot;../../../../java.base/java/lang/securityexception&quot;&gt; &lt;code&gt;SecurityException&lt;/code&gt; &lt;/a&gt;がスローされる可能性があります。</target>
        </trans-unit>
        <trans-unit id="300c1a5202ff7486ff2aa1de97b32a5d09be7717" translate="yes" xml:space="preserve">
          <source>Implementations are not required to support the inter-process transfer of security contexts. Calling the &lt;a href=&quot;#isTransferable()&quot;&gt;&lt;code&gt;isTransferable&lt;/code&gt;&lt;/a&gt; method will indicate if the context object is transferable.</source>
          <target state="translated">セキュリティコンテキストのプロセス間転送をサポートするために実装は必要ありません。&lt;a href=&quot;#isTransferable()&quot;&gt; &lt;code&gt;isTransferable&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すと、コンテキストオブジェクトが転送可能かどうかが示されます。</target>
        </trans-unit>
        <trans-unit id="279ebb8422b455b13529fc4a3a9cbf3ded65a160" translate="yes" xml:space="preserve">
          <source>Implementations are required to support the encodings &quot;UTF-8&quot;, &quot;UTF-16&quot;, &quot;UTF-16BE&quot;, and &quot;UTF-16LE&quot; to guarantee that data is serializable in all encodings that are required to be supported by all XML parsers. When the encoding is UTF-8, whether or not a byte order mark is serialized, or if the output is big-endian or little-endian, is implementation dependent. When the encoding is UTF-16, whether or not the output is big-endian or little-endian is implementation dependent, but a Byte Order Mark must be generated for non-character outputs, such as &lt;code&gt;LSOutput.byteStream&lt;/code&gt; or &lt;code&gt;LSOutput.systemId&lt;/code&gt;. If the Byte Order Mark is not generated, a &quot;byte-order-mark-needed&quot; warning is reported. When the encoding is UTF-16LE or UTF-16BE, the output is big-endian (UTF-16BE) or little-endian (UTF-16LE) and the Byte Order Mark is not be generated. In all cases, the encoding declaration, if generated, will correspond to the encoding used during the serialization (e.g. &lt;code&gt;encoding=&quot;UTF-16&quot;&lt;/code&gt; will appear if UTF-16 was requested).</source>
          <target state="translated">エンコーディング「UTF-8」、「UTF-16」、「UTF-16BE」、および「UTF-16LE」をサポートして、すべてのXMLパーサーでサポートする必要があるすべてのエンコーディングでデータをシリアル化できるようにするための実装が必要です。 。エンコーディングがUTF-8の場合、バイト順マークがシリアル化されているかどうか、または出力がビッグエンディアンかリトルエンディアンかは、実装に依存します。エンコーディングがUTF-16の場合、出力がビッグエンディアンかリトルエンディアンかは実装によって異なりますが、 &lt;code&gt;LSOutput.byteStream&lt;/code&gt; や &lt;code&gt;LSOutput.systemId&lt;/code&gt; などの文字以外の出力にはバイト順マークを生成する必要があります。。バイトオーダーマークが生成されない場合、「byte-order-mark-needed」警告が報告されます。エンコーディングがUTF-16LEまたはUTF-16BEの場合、出力はビッグエンディアン（UTF-16BE）またはリトルエンディアン（UTF-16LE）であり、バイト順マークは生成されません。すべての場合において、エンコーディング宣言は、生成された場合、シリアル化中に使用されたエンコーディングに対応します（たとえば、UTF-16が要求された場合は &lt;code&gt;encoding=&quot;UTF-16&quot;&lt;/code&gt; が表示されます）。</target>
        </trans-unit>
        <trans-unit id="c6210cf47411e0dfdee18058689ad0ba683b6a96" translate="yes" xml:space="preserve">
          <source>Implementations may declare support for units not listed by &lt;a href=&quot;#getUnits()&quot;&gt;&lt;code&gt;getUnits()&lt;/code&gt;&lt;/a&gt;. Typically, the implementation would define additional units as conversions for the convenience of developers.</source>
          <target state="translated">実装は、&lt;a href=&quot;#getUnits()&quot;&gt; &lt;code&gt;getUnits()&lt;/code&gt; &lt;/a&gt;によってリストされていないユニットのサポートを宣言する場合があります。通常、実装では、開発者の便宜のために、追加のユニットを変換として定義します。</target>
        </trans-unit>
        <trans-unit id="72941d4649ad680b0f6b254a46807c194c448b61" translate="yes" xml:space="preserve">
          <source>Implementations may declare support for units not listed by &lt;a href=&quot;temporalamount#getUnits--&quot;&gt;&lt;code&gt;getUnits()&lt;/code&gt;&lt;/a&gt;. Typically, the implementation would define additional units as conversions for the convenience of developers.</source>
          <target state="translated">実装では、&lt;a href=&quot;temporalamount#getUnits--&quot;&gt; &lt;code&gt;getUnits()&lt;/code&gt; で&lt;/a&gt;リストされていないユニットのサポートを宣言する場合があります。通常、実装では、開発者の便宜のために、追加の単位を変換として定義します。</target>
        </trans-unit>
        <trans-unit id="90019721b0e69908f3a99c86842dc54fd684fc05" translate="yes" xml:space="preserve">
          <source>Implementations may define additional target names, but should use naming conventions such as reverse domain name notation to avoid name clashes.</source>
          <target state="translated">実装では、追加のターゲット名を定義してもよいが、名前の衝突を避けるために、逆ドメイン名表記などの命名規則を使用すべきである。</target>
        </trans-unit>
        <trans-unit id="7ed96c27054978247c25aafe7cde2ed3d3f6d247" translate="yes" xml:space="preserve">
          <source>Implementations may define implementation-specific keys.</source>
          <target state="translated">実装では、実装固有のキーを定義してもよい。</target>
        </trans-unit>
        <trans-unit id="3d744716af7fd8fb39c04d68e9c8e3b43a019eaf" translate="yes" xml:space="preserve">
          <source>Implementations may use a caching strategy for performance reasons. As such, it is possible that the start of the millisecond observed via this clock will be later than that observed directly via the underlying clock.</source>
          <target state="translated">実装では、性能上の理由からキャッシング戦略を使用することがあります。そのため、このクロックを介して観測されるミリ秒の開始は、基礎となるクロックを介して直接観測されるミリ秒の開始よりも遅くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="e57a2e93acdecde99104a5856de790d14178c604" translate="yes" xml:space="preserve">
          <source>Implementations may use a caching strategy for performance reasons. As such, it is possible that the start of the minute observed via this clock will be later than that observed directly via the underlying clock.</source>
          <target state="translated">実装では、パフォーマンス上の理由からキャッシング戦略を使用することがあります。そのため、このクロックを介して観測された分の開始時刻は、基礎となるクロックを介して直接観測された分の開始時刻よりも遅くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="04f1ca2276b8a29b06fcbeeba05dd07d9e348abf" translate="yes" xml:space="preserve">
          <source>Implementations may use a caching strategy for performance reasons. As such, it is possible that the start of the requested duration observed via this clock will be later than that observed directly via the underlying clock.</source>
          <target state="translated">実装では、パフォーマンスの理由からキャッシング戦略を使用することがあります。そのため、このクロックを介して観測された要求された持続時間の開始は、基礎となるクロックを介して直接観測されたものよりも遅くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="267df03caeacf7ccfb622de33114e48140903168" translate="yes" xml:space="preserve">
          <source>Implementations may use a caching strategy for performance reasons. As such, it is possible that the start of the second observed via this clock will be later than that observed directly via the underlying clock.</source>
          <target state="translated">実装では、性能上の理由からキャッシング戦略を使用することがあります。このように、このクロックを介して観測された秒の開始は、基礎となるクロックを介して直接観測された秒の開始よりも遅くなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="42a423f39aec87a0b698a181814535acfa0c37d2" translate="yes" xml:space="preserve">
          <source>Implementations may, though they need not, include additional values in the job's &lt;a href=&quot;jobstatereasons&quot;&gt;&lt;code&gt;JobStateReasons&lt;/code&gt;&lt;/a&gt; attribute to indicate the progress of the job, such as adding the &lt;code&gt;JOB_PRINTING&lt;/code&gt; value to indicate when the output device is actually making marks on paper and/or the &lt;code&gt;PROCESSING_TO_STOP_POINT&lt;/code&gt; value to indicate that the printer is in the process of canceling or aborting the job.</source>
          <target state="translated">実装では、必須ではありませんが、ジョブの進行状況を示すためにジョブの&lt;a href=&quot;jobstatereasons&quot;&gt; &lt;code&gt;JobStateReasons&lt;/code&gt; &lt;/a&gt;属性に追加の値を &lt;code&gt;JOB_PRINTING&lt;/code&gt; ことができます。たとえば、出力デバイスが実際に紙にマークを付けていることを示すJOB_PRINTING値や、示すための &lt;code&gt;PROCESSING_TO_STOP_POINT&lt;/code&gt; 値を追加します。プリンタがジョブをキャンセルまたは中止している最中であること。</target>
        </trans-unit>
        <trans-unit id="72c785333a007e0af3308efdcee58fc2bb59ca70" translate="yes" xml:space="preserve">
          <source>Implementations may, though they need not, include additional values in the job's &lt;a href=&quot;jobstatereasons&quot;&gt;&lt;code&gt;JobStateReasons&lt;/code&gt;&lt;/a&gt; attribute to indicate the progress of the job, such as adding the JOB_PRINTING value to indicate when the output device is actually making marks on paper and/or the PROCESSING_TO_STOP_POINT value to indicate that the printer is in the process of canceling or aborting the job.</source>
          <target state="translated">実装は、必須ではありませんが、ジョブの&lt;a href=&quot;jobstatereasons&quot;&gt; &lt;code&gt;JobStateReasons&lt;/code&gt; &lt;/a&gt;属性に追加の値を含めることができます。たとえば、出力デバイスが紙に実際にマークを付けていることを示すJOB_PRINTING値や、示すPROCESSING_TO_STOP_POINT値を追加するなどです。プリンタがジョブをキャンセルまたは中止している最中であること。</target>
        </trans-unit>
        <trans-unit id="5c2a22452963a67974d8eca84853200d44148ad1" translate="yes" xml:space="preserve">
          <source>Implementations must begin by checking to ensure that the input temporal object is of the same observable type as the implementation. They must then perform the calculation for all instances of &lt;a href=&quot;chronounit&quot;&gt;&lt;code&gt;ChronoUnit&lt;/code&gt;&lt;/a&gt;. An &lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt; must be thrown for &lt;code&gt;ChronoUnit&lt;/code&gt; instances that are unsupported.</source>
          <target state="translated">実装は、入力時間オブジェクトが実装と同じ監視可能なタイプであることを確認することから始める必要があります。次に、&lt;a href=&quot;chronounit&quot;&gt; &lt;code&gt;ChronoUnit&lt;/code&gt; の&lt;/a&gt;すべてのインスタンスの計算を実行する必要があります。アン &lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt; がためにスローされなければならない &lt;code&gt;ChronoUnit&lt;/code&gt; のサポートされていませんインスタンス。</target>
        </trans-unit>
        <trans-unit id="bdb87811bb31cda5ac17ddd36108afefeabd84e6" translate="yes" xml:space="preserve">
          <source>Implementations must begin by checking to if the two temporals have the same type using &lt;code&gt;getClass()&lt;/code&gt;. If they do not, then the result must be obtained by calling &lt;code&gt;temporal1Inclusive.until(temporal2Exclusive, this)&lt;/code&gt;.</source>
          <target state="translated">実装は、 &lt;code&gt;getClass()&lt;/code&gt; を使用して2つのテンポラルが同じ型であるかどうかをチェックすることから始める必要があります。そうでない場合は、 &lt;code&gt;temporal1Inclusive.until(temporal2Exclusive, this)&lt;/code&gt; 呼び出して結果を取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="99c64c5755e63efaf236d48da5e987824e3c2112" translate="yes" xml:space="preserve">
          <source>Implementations must behave in a manor equivalent to the default method behavior.</source>
          <target state="translated">実装は、デフォルトのメソッドの動作と同等の動作をしなければなりません。</target>
        </trans-unit>
        <trans-unit id="605da4bf3bfd7a213bfefbf11d71af5029cff3f0" translate="yes" xml:space="preserve">
          <source>Implementations must check and handle all fields defined in &lt;a href=&quot;chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt;. If the field is supported and has an &lt;code&gt;int&lt;/code&gt; range, then the value of the field must be returned. If unsupported, then an &lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt; must be thrown.</source>
          <target state="translated">実装では、&lt;a href=&quot;chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; で&lt;/a&gt;定義されているすべてのフィールドをチェックして処理する必要があります。フィールドがサポートされ、 &lt;code&gt;int&lt;/code&gt; 範囲がある場合、フィールドの値を返す必要があります。サポートされていない場合は、 &lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt; をスローする必要があります。</target>
        </trans-unit>
        <trans-unit id="326e8afcb79071d12736245c0670a0b22ed327ab" translate="yes" xml:space="preserve">
          <source>Implementations must check and handle all fields defined in &lt;a href=&quot;chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt;. If the field is supported, then the adjustment must be performed. If unsupported, then an &lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt; must be thrown.</source>
          <target state="translated">実装では、&lt;a href=&quot;chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; で&lt;/a&gt;定義されているすべてのフィールドをチェックして処理する必要があります。フィールドがサポートされている場合は、調整を実行する必要があります。サポートされていない場合は、 &lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt; をスローする必要があります。</target>
        </trans-unit>
        <trans-unit id="24d6daafcab1ab7caec669e141738ff42d7ea11e" translate="yes" xml:space="preserve">
          <source>Implementations must check and handle all fields defined in &lt;a href=&quot;chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt;. If the field is supported, then the range of the field must be returned. If unsupported, then an &lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt; must be thrown.</source>
          <target state="translated">実装では、&lt;a href=&quot;chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; で&lt;/a&gt;定義されているすべてのフィールドをチェックして処理する必要があります。フィールドがサポートされている場合は、フィールドの範囲を返す必要があります。サポートされていない場合は、 &lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt; をスローする必要があります。</target>
        </trans-unit>
        <trans-unit id="0d3ca1653868ebecb681dc93b4d875e227530a96" translate="yes" xml:space="preserve">
          <source>Implementations must check and handle all fields defined in &lt;a href=&quot;chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt;. If the field is supported, then the value of the field must be returned. If unsupported, then an &lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt; must be thrown.</source>
          <target state="translated">実装では、&lt;a href=&quot;chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; で&lt;/a&gt;定義されているすべてのフィールドをチェックして処理する必要があります。フィールドがサポートされている場合、フィールドの値を返す必要があります。サポートされていない場合は、 &lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt; をスローする必要があります。</target>
        </trans-unit>
        <trans-unit id="88d058d164cfb523e09f28cd76915ef7323f9f89" translate="yes" xml:space="preserve">
          <source>Implementations must check and handle all fields defined in &lt;a href=&quot;chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt;. If the field is supported, then true must be returned, otherwise false must be returned.</source>
          <target state="translated">実装では、&lt;a href=&quot;chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; で&lt;/a&gt;定義されているすべてのフィールドをチェックして処理する必要があります。フィールドがサポートされている場合はtrueを返し、サポートされていない場合はfalseを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="7bd8473721518ac9344401f3ce0ebff69428b906" translate="yes" xml:space="preserve">
          <source>Implementations must check and handle all units defined in &lt;a href=&quot;chronounit&quot;&gt;&lt;code&gt;ChronoUnit&lt;/code&gt;&lt;/a&gt;. If the unit is supported, then the addition must be performed. If unsupported, then an &lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt; must be thrown.</source>
          <target state="translated">実装では、&lt;a href=&quot;chronounit&quot;&gt; &lt;code&gt;ChronoUnit&lt;/code&gt; で&lt;/a&gt;定義されているすべてのユニットをチェックして処理する必要があります。ユニットがサポートされている場合は、追加を実行する必要があります。サポートされていない場合は、 &lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt; をスローする必要があります。</target>
        </trans-unit>
        <trans-unit id="54a5a6f5a6257c54b041e51e2f466300a629dac3" translate="yes" xml:space="preserve">
          <source>Implementations must check and handle all units defined in &lt;a href=&quot;chronounit&quot;&gt;&lt;code&gt;ChronoUnit&lt;/code&gt;&lt;/a&gt;. If the unit is supported, then true must be returned, otherwise false must be returned.</source>
          <target state="translated">実装では、&lt;a href=&quot;chronounit&quot;&gt; &lt;code&gt;ChronoUnit&lt;/code&gt; で&lt;/a&gt;定義されているすべてのユニットをチェックして処理する必要があります。ユニットがサポートされている場合はtrueを返し、サポートされていない場合はfalseを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="bac724627545efd92aff130adf9ca347e33f9433" translate="yes" xml:space="preserve">
          <source>Implementations must ensure that no observable state is altered when this read-only method is invoked.</source>
          <target state="translated">実装では、この読み取り専用メソッドが呼び出されたときに、観測可能な状態が変更されないようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="ed106bff8c1e29175cd31f921160a542066c5d66" translate="yes" xml:space="preserve">
          <source>Implementations must not alter either this object or the specified temporal object. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable implementations.</source>
          <target state="translated">実装は、このオブジェクトや指定されたテンポラリオブジェクトを変更してはならない。その代わりに、元のオブジェクトの調整されたコピーが返されなければなりません。これは、不変型と変異型の実装に対して同等の安全な動作を提供します。</target>
        </trans-unit>
        <trans-unit id="cd2cfa4068cda0e805725377df4ada91ed41d4d7" translate="yes" xml:space="preserve">
          <source>Implementations must not alter the specified temporal object. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable implementations.</source>
          <target state="translated">実装は指定された一時オブジェクトを変更してはならない。その代わりに、調整されたオリジナルのコピーが返されなければなりません。これは、不変型と変異型の実装に対して同等の安全な動作を提供します。</target>
        </trans-unit>
        <trans-unit id="3f230e75f808fadf35c94cfc851888119bcf87f0" translate="yes" xml:space="preserve">
          <source>Implementations must not alter this object. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable implementations.</source>
          <target state="translated">実装はこのオブジェクトを変更してはいけません。その代わりに、元のオブジェクトの調整済みコピーを返さなければなりません。これは、不変型と変異型の実装と同等の安全な動作を提供します。</target>
        </trans-unit>
        <trans-unit id="74a6d982447b042f899eb1e8d5f95251242078cc" translate="yes" xml:space="preserve">
          <source>Implementations must provide a result for each valid zone ID, however they do not have to provide a history of rules. Thus the map will always contain one element, and will only contain more than one element if historical rule information is available.</source>
          <target state="translated">実装は有効なゾーンIDごとに結果を提供しなければならないが、ルールの履歴を提供する必要はない。したがって、マップは常に1つの要素を含み、歴史的なルール情報が利用可能な場合にのみ、複数の要素を含むことになります。</target>
        </trans-unit>
        <trans-unit id="25d23de117447ed754f1b335e41805de9782f446" translate="yes" xml:space="preserve">
          <source>Implementations must provide a result for each valid zone ID, however they do not have to provide a history of rules. Thus the map will contain at least one element, and will only contain more than one element if historical rule information is available.</source>
          <target state="translated">実装は有効なゾーンIDごとに結果を提供しなければならないが、ルールの履歴を提供する必要はない。したがって、マップは少なくとも1つの要素を含み、過去のルール情報が利用可能な場合には1つ以上の要素を含むことになる。</target>
        </trans-unit>
        <trans-unit id="c2fcd171ac5ea0d1a6a331955bf015198a85c6ae" translate="yes" xml:space="preserve">
          <source>Implementations of &lt;a href=&quot;collector&quot;&gt;&lt;code&gt;Collector&lt;/code&gt;&lt;/a&gt; that implement various useful reduction operations, such as accumulating elements into collections, summarizing elements according to various criteria, etc.</source>
          <target state="translated">実装&lt;a href=&quot;collector&quot;&gt; &lt;code&gt;Collector&lt;/code&gt; &lt;/a&gt;など、様々な基準に基づいて要素を要約、コレクションに蓄積素子などの種々の有用な還元操作を実現します、</target>
        </trans-unit>
        <trans-unit id="56c583707ceca10be97e7528d97e75c1ef0caad2" translate="yes" xml:space="preserve">
          <source>Implementations of &lt;a href=&quot;httprequest.bodypublisher&quot;&gt;&lt;code&gt;BodyPublisher&lt;/code&gt;&lt;/a&gt; that implement various useful publishers, such as publishing the request body from a String, or from a file.</source>
          <target state="translated">実装&lt;a href=&quot;httprequest.bodypublisher&quot;&gt; &lt;code&gt;BodyPublisher&lt;/code&gt; &lt;/a&gt;、このような文字列から、またはファイルからのリクエストボディを公開など、さまざまな便利な出版社、実装します。</target>
        </trans-unit>
        <trans-unit id="f0e5930142ddaf85b2c690a6452341555a620717" translate="yes" xml:space="preserve">
          <source>Implementations of &lt;a href=&quot;httpresponse.bodyhandler&quot;&gt;&lt;code&gt;BodyHandler&lt;/code&gt;&lt;/a&gt; that implement various useful handlers, such as handling the response body as a String, or streaming the response body to a file.</source>
          <target state="translated">実装&lt;a href=&quot;httpresponse.bodyhandler&quot;&gt; &lt;code&gt;BodyHandler&lt;/code&gt; &lt;/a&gt; Stringなどのレスポンスボディを扱う、またはファイルへのレスポンスボディをストリーミングなど様々な便利なハンドラを実装します。</target>
        </trans-unit>
        <trans-unit id="eafe6d74c7776fb65071b9a548e19a8c637730ac" translate="yes" xml:space="preserve">
          <source>Implementations of &lt;a href=&quot;httpresponse.bodysubscriber&quot;&gt;&lt;code&gt;BodySubscriber&lt;/code&gt;&lt;/a&gt; that implement various useful subscribers, such as converting the response body bytes into a String, or streaming the bytes to a file.</source>
          <target state="translated">実装&lt;a href=&quot;httpresponse.bodysubscriber&quot;&gt; &lt;code&gt;BodySubscriber&lt;/code&gt; &lt;/a&gt;ようなファイルのバイトを文字列に応答ボディバイトを変換する、またはストリーミングなどの様々な有用な加入者を、実装します。</target>
        </trans-unit>
        <trans-unit id="fda3fc111a7c70a81a169cb2fa4b3f7a1e491639" translate="yes" xml:space="preserve">
          <source>Implementations of &lt;code&gt;ModuleReader&lt;/code&gt; should take great care when translating an abstract resource name to the location of a resource in a packaged module or on the file system. Implementations are advised to treat resource names with elements such as '&lt;code&gt;.&lt;/code&gt;, '&lt;code&gt;..&lt;/code&gt;', elements containing file separators, or empty elements as &quot;not found&quot;. More generally, if the resource name is not in the stream of elements that the &lt;code&gt;list&lt;/code&gt; method returns then the resource should be treated as &quot;not found&quot; to avoid inconsistencies.</source>
          <target state="translated">&lt;code&gt;ModuleReader&lt;/code&gt; の実装は、抽象リソース名をパッケージ化されたモジュールまたはファイルシステム内のリソースの場所に変換するときに細心の注意を払う必要があります。実装では、リソース名を 'などの要素で処理することをお勧めし &lt;code&gt;.&lt;/code&gt; 、 ' &lt;code&gt;..&lt;/code&gt; '、ファイルセパレータを含む要素、または「見つかりません」として空の要素。より一般的には、リソース名が &lt;code&gt;list&lt;/code&gt; メソッドが返す要素のストリームにない場合、矛盾を避けるためにリソースは「見つかりません」として扱われる必要があります。</target>
        </trans-unit>
        <trans-unit id="d62ca42b5c26ec3f438b17776a6e4557007f5596" translate="yes" xml:space="preserve">
          <source>Implementations of &lt;code&gt;TreeNode&lt;/code&gt; that override &lt;code&gt;equals&lt;/code&gt; will typically need to override &lt;code&gt;hashCode&lt;/code&gt; as well. Refer to &lt;a href=&quot;treemodel&quot;&gt;&lt;code&gt;TreeModel&lt;/code&gt;&lt;/a&gt; for more information. For further information and examples of using tree nodes, see &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/tree.html&quot;&gt;How to Use Tree Nodes&lt;/a&gt; in &lt;em&gt;The Java Tutorial.&lt;/em&gt;</source>
          <target state="translated">&lt;code&gt;equals&lt;/code&gt; をオーバーライドする &lt;code&gt;TreeNode&lt;/code&gt; の実装は、通常、 &lt;code&gt;hashCode&lt;/code&gt; もオーバーライドする必要があります。詳細については、&lt;a href=&quot;treemodel&quot;&gt; &lt;code&gt;TreeModel&lt;/code&gt; &lt;/a&gt;を参照してください。ツリーノードの使用の詳細と例については&lt;em&gt;、Javaチュートリアルの&lt;/em&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/components/tree.html&quot;&gt;「ツリーノードの使用方法」を&lt;/a&gt;参照してください&lt;em&gt;。&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="993e4aede7d89287621098e82da0b0a8d21ce0b4" translate="yes" xml:space="preserve">
          <source>Implementations of entry-returning methods are expected to return &lt;code&gt;Map.Entry&lt;/code&gt; pairs representing snapshots of mappings at the time they were produced, and thus generally do &lt;em&gt;not&lt;/em&gt; support the optional &lt;code&gt;Entry.setValue&lt;/code&gt; method. Note however that it is possible to change mappings in the associated map using method &lt;code&gt;put&lt;/code&gt;.</source>
          <target state="translated">エントリを返すメソッドの実装は、作成時のマッピングのスナップショットを表す &lt;code&gt;Map.Entry&lt;/code&gt; ペアを返すことが期待されているため、通常、オプションの &lt;code&gt;Entry.setValue&lt;/code&gt; メソッドをサポートしてい&lt;em&gt;ません&lt;/em&gt;。ただし、メソッド &lt;code&gt;put&lt;/code&gt; を使用して、関連するマップのマッピングを変更できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d3b30e509d044195699ed5241d1f9e400fe5a8aa" translate="yes" xml:space="preserve">
          <source>Implementations of the DataInput and DataOutput interfaces represent Unicode strings in a format that is a slight modification of UTF-8. (For information regarding the standard UTF-8 format, see section</source>
          <target state="translated">DataInput と DataOutput インターフェイスの実装は、UTF-8 を少し修正した形式で Unicode 文字列を表現します。(標準のUTF-8形式については、セクション</target>
        </trans-unit>
        <trans-unit id="0a34c5a5639e138de40d514fc9cb6812e04cb9ff" translate="yes" xml:space="preserve">
          <source>Implementations of the Java time-scale using the JSR-310 API are not required to provide any clock that is sub-second accurate, or that progresses monotonically or smoothly. Implementations are therefore not required to actually perform the UTC-SLS slew or to otherwise be aware of leap seconds. JSR-310 does, however, require that implementations must document the approach they use when defining a clock representing the current instant. See &lt;a href=&quot;clock&quot;&gt;&lt;code&gt;Clock&lt;/code&gt;&lt;/a&gt; for details on the available clocks.</source>
          <target state="translated">JSR-310 APIを使用したJavaタイムスケールの実装では、1秒未満の精度のクロックを提供したり、単調またはスムーズに進行したりする必要はありません。したがって、実装ではUTC-SLSスルーを実際に実行したり、うるう秒を認識したりする必要はありません。ただし、JSR-310では、実装が現在の瞬間を表すクロックを定義するときに使用するアプローチを文書化する必要があります。参照&lt;a href=&quot;clock&quot;&gt; &lt;code&gt;Clock&lt;/code&gt; &lt;/a&gt;利用できるクロックの詳細については。</target>
        </trans-unit>
        <trans-unit id="7ee8c35661e0c08111bc2cda529b33eb9ba4c61e" translate="yes" xml:space="preserve">
          <source>Implementations of these locale sensitive services are packaged using the Java Extension Mechanism as installed extensions. A provider identifies itself with a provider-configuration file in the resource directory META-INF/services, using the fully qualified provider interface class name as the file name. The file should contain a list of fully-qualified concrete provider class names, one per line. A line is terminated by any one of a line feed ('\n'), a carriage return ('\r'), or a carriage return followed immediately by a line feed. Space and tab characters surrounding each name, as well as blank lines, are ignored. The comment character is '#' ('#'); on each line all characters following the first comment character are ignored. The file must be encoded in UTF-8.</source>
          <target state="translated">これらのロケールに敏感なサービスの実装は、インストールされている拡張機能として Java Extension Mechanism を使用してパッケージ化されます。プロバイダは、リソースディレクトリ META-INF/services にある provider-configuration ファイルで、完全修飾された provider interface クラス名をファイル名として使用して、自分自身を識別する。このファイルには、1 行に 1 つずつ、完全修飾された具体的なプロバイダクラス名のリストが含まれていなければならない。行は、ラインフィード('\n')、キャリッジ・リターン('\r')、またはキャリッジ・リターンに続くラインフィードのいずれかで終了します。各名前を囲むスペースやタブ文字、空行は無視されます。コメント文字は '#' ('#')です。各行では、最初のコメント文字に続くすべての文字は無視されます。ファイルは UTF-8 でエンコードされている必要があります。</target>
        </trans-unit>
        <trans-unit id="acf4fcd382a74c4dbdd3e6fcf810f002d6e56033" translate="yes" xml:space="preserve">
          <source>Implementations of these locale sensitive services can be made available by adding them to the application's class path. A provider identifies itself with a provider-configuration file in the resource directory META-INF/services, using the fully qualified provider interface class name as the file name. The file should contain a list of fully-qualified concrete provider class names, one per line. A line is terminated by any one of a line feed ('\n'), a carriage return ('\r'), or a carriage return followed immediately by a line feed. Space and tab characters surrounding each name, as well as blank lines, are ignored. The comment character is '#' ('#'); on each line all characters following the first comment character are ignored. The file must be encoded in UTF-8.</source>
          <target state="translated">これらのロケールに配慮したサービスの実装は、アプリケーションのクラスパスに追加することで利用可能になります。プロバイダは、リソースディレクトリ META-INF/services にある provider-configuration ファイルで、完全修飾された provider interface クラス名をファイル名として使用して、自分自身を識別します。このファイルには、1行に1つずつ、完全修飾された具体的なプロバイダ・クラス名のリストが含まれている必要があります。行は、ラインフィード('\n')、キャリッジ・リターン('\r')、またはキャリッジ・リターンに続くラインフィードのいずれかで終了します。各名前を囲むスペースやタブ文字、空行は無視されます。コメント文字は '#' ('#')です。各行では、最初のコメント文字に続くすべての文字は無視されます。ファイルは UTF-8 でエンコードされている必要があります。</target>
        </trans-unit>
        <trans-unit id="9c79b815c8ed87dfe91404db79bb52d71de12170" translate="yes" xml:space="preserve">
          <source>Implementations of this class provide lookup services for print services (typically equivalent to printers) of a particular type.</source>
          <target state="translated">このクラスの実装は、特定のタイプのプリントサービス(一般的にはプリンタに相当)のためのルックアップサービスを提供します。</target>
        </trans-unit>
        <trans-unit id="089a7b88f26f69596bf9828e528be33ab419614f" translate="yes" xml:space="preserve">
          <source>Implementations of this interface and of &lt;code&gt;NotificationBroadcaster&lt;/code&gt; should be careful about synchronization. In particular, it is not a good idea for an implementation to hold any locks while it is calling a listener. To deal with the possibility that the list of listeners might change while a notification is being dispatched, a good strategy is to use a &lt;a href=&quot;../../../java.base/java/util/concurrent/copyonwritearraylist&quot;&gt;&lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;&lt;/a&gt; for this list.</source>
          <target state="translated">このインターフェースと &lt;code&gt;NotificationBroadcaster&lt;/code&gt; の実装では、同期に注意する必要があります。特に、実装がリスナーを呼び出している間、ロックを保持することはお勧めできません。通知のディスパッチ中にリスナーのリストが変更される可能性に対処するには、このリストに&lt;a href=&quot;../../../java.base/java/util/concurrent/copyonwritearraylist&quot;&gt; &lt;code&gt;CopyOnWriteArrayList&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f006a559626fb65e046d55aa1f754669269e0a38" translate="yes" xml:space="preserve">
          <source>Implementations of this interface and of &lt;code&gt;NotificationBroadcaster&lt;/code&gt; should be careful about synchronization. In particular, it is not a good idea for an implementation to hold any locks while it is calling a listener. To deal with the possibility that the list of listeners might change while a notification is being dispatched, a good strategy is to use a &lt;a href=&quot;../../java/util/concurrent/copyonwritearraylist&quot;&gt;&lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;&lt;/a&gt; for this list.</source>
          <target state="translated">このインターフェイスと &lt;code&gt;NotificationBroadcaster&lt;/code&gt; の実装は、同期に注意する必要があります。特に、リスナーを呼び出している間、実装がロックを保持することはお勧めできません。通知のディスパッチ中にリスナーのリストが変更される可能性に対処するには、このリストに&lt;a href=&quot;../../java/util/concurrent/copyonwritearraylist&quot;&gt; &lt;code&gt;CopyOnWriteArrayList&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="9c232244698db00ce36774a2c87375ef2ab6b6f4" translate="yes" xml:space="preserve">
          <source>Implementations of this interface and of &lt;code&gt;NotificationEmitter&lt;/code&gt; should be careful about synchronization. In particular, it is not a good idea for an implementation to hold any locks while it is calling a listener. To deal with the possibility that the list of listeners might change while a notification is being dispatched, a good strategy is to use a &lt;a href=&quot;../../../java.base/java/util/concurrent/copyonwritearraylist&quot;&gt;&lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;&lt;/a&gt; for this list.</source>
          <target state="translated">このインターフェイスと &lt;code&gt;NotificationEmitter&lt;/code&gt; の実装では、同期に注意する必要があります。特に、実装がリスナーを呼び出している間、ロックを保持することはお勧めできません。通知のディスパッチ中にリスナーのリストが変更される可能性に対処するには、このリストに&lt;a href=&quot;../../../java.base/java/util/concurrent/copyonwritearraylist&quot;&gt; &lt;code&gt;CopyOnWriteArrayList&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="58aa1ab9d54f0bb6c3d1e90d7b35e36a53ae6ddf" translate="yes" xml:space="preserve">
          <source>Implementations of this interface and of &lt;code&gt;NotificationEmitter&lt;/code&gt; should be careful about synchronization. In particular, it is not a good idea for an implementation to hold any locks while it is calling a listener. To deal with the possibility that the list of listeners might change while a notification is being dispatched, a good strategy is to use a &lt;a href=&quot;../../java/util/concurrent/copyonwritearraylist&quot;&gt;&lt;code&gt;CopyOnWriteArrayList&lt;/code&gt;&lt;/a&gt; for this list.</source>
          <target state="translated">このインターフェースと &lt;code&gt;NotificationEmitter&lt;/code&gt; の実装は、同期に注意する必要があります。特に、リスナーを呼び出している間、実装がロックを保持することはお勧めできません。通知のディスパッチ中にリスナーのリストが変更される可能性に対処するには、このリストに&lt;a href=&quot;../../java/util/concurrent/copyonwritearraylist&quot;&gt; &lt;code&gt;CopyOnWriteArrayList&lt;/code&gt; &lt;/a&gt;を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="94b491a654af895b6d8857d4a56507944db181aa" translate="yes" xml:space="preserve">
          <source>Implementations of this interface are attached to a &lt;a href=&quot;../docprintjob&quot;&gt;&lt;code&gt;DocPrintJob&lt;/code&gt;&lt;/a&gt; to monitor the status of attribute changes associated with the print job.</source>
          <target state="translated">このインターフェイスの実装は&lt;a href=&quot;../docprintjob&quot;&gt; &lt;code&gt;DocPrintJob&lt;/code&gt; &lt;/a&gt;にアタッチされ、印刷ジョブに関連する属性変更のステータスを監視します。</target>
        </trans-unit>
        <trans-unit id="4aa8cb2baf5c284c221df16a7268ff0b1941abb2" translate="yes" xml:space="preserve">
          <source>Implementations of this interface are immutable and safe for use by multiple concurrent threads.</source>
          <target state="translated">このインターフェイスの実装は不変であり、複数の並行スレッドで使用しても安全です。</target>
        </trans-unit>
        <trans-unit id="49c062426f85483f883d6e693db7f7fa3fbe1290" translate="yes" xml:space="preserve">
          <source>Implementations of this interface are passed to a &lt;code&gt;CallbackHandler&lt;/code&gt;, allowing underlying security services the ability to interact with a calling application to retrieve specific authentication data such as usernames and passwords, or to display certain information, such as error and warning messages.</source>
          <target state="translated">このインターフェイスの実装は &lt;code&gt;CallbackHandler&lt;/code&gt; に渡されます。これにより、基盤となるセキュリティサービスは、呼び出し元のアプリケーションと対話して、ユーザー名やパスワードなどの特定の認証データを取得したり、エラーや警告メッセージなどの特定の情報を表示したりできます。</target>
        </trans-unit>
        <trans-unit id="58261f86ebc3621d1ab8d9da33065adeb7d657d0" translate="yes" xml:space="preserve">
          <source>Implementations of this interface can differ regarding the thread in which the methods of filters and listeners are called.</source>
          <target state="translated">このインターフェイスの実装は、フィルタやリスナーのメソッドが呼び出されるスレッドによって異なります。</target>
        </trans-unit>
        <trans-unit id="027d52c95dd46e88fa1635d12867938271a5588b" translate="yes" xml:space="preserve">
          <source>Implementations of this interface should specify the events they support.</source>
          <target state="translated">このインターフェイスの実装は、サポートするイベントを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="c6e3891d672494d0423b2340b5ba53445ff48f7f" translate="yes" xml:space="preserve">
          <source>Implementations of this listener interface are attached to a &lt;a href=&quot;../printservice&quot;&gt;&lt;code&gt;PrintService&lt;/code&gt;&lt;/a&gt; to monitor the status of the print service.</source>
          <target state="translated">このリスナーインターフェイスの実装は&lt;a href=&quot;../printservice&quot;&gt; &lt;code&gt;PrintService&lt;/code&gt; &lt;/a&gt;にアタッチされ、印刷サービスのステータスを監視します。</target>
        </trans-unit>
        <trans-unit id="75c9d5402d09dbbffee2d3bf6c5bc10e82a612cd" translate="yes" xml:space="preserve">
          <source>Implementations of this listener interface should be attached to a &lt;a href=&quot;../docprintjob&quot;&gt;&lt;code&gt;DocPrintJob&lt;/code&gt;&lt;/a&gt; to monitor the status of the printer job.</source>
          <target state="translated">このリスナーインターフェイスの実装を&lt;a href=&quot;../docprintjob&quot;&gt; &lt;code&gt;DocPrintJob&lt;/code&gt; &lt;/a&gt;にアタッチして、プリンタージョブのステータスを監視する必要があります。</target>
        </trans-unit>
        <trans-unit id="98cca08688fad60efd0ff1cada2bd3924fcafeb7" translate="yes" xml:space="preserve">
          <source>Implementations of this listener interface should be attached to a &lt;a href=&quot;../docprintjob&quot;&gt;&lt;code&gt;DocPrintJob&lt;/code&gt;&lt;/a&gt; to monitor the status of the printer job. These callback methods may be invoked on the thread processing the print job, or a service created notification thread. In either case the client should not perform lengthy processing in these callbacks.</source>
          <target state="translated">このリスナーインターフェイスの実装を&lt;a href=&quot;../docprintjob&quot;&gt; &lt;code&gt;DocPrintJob&lt;/code&gt; &lt;/a&gt;にアタッチして、プリンタージョブのステータスを監視する必要があります。これらのコールバックメソッドは、印刷ジョブを処理するスレッド、またはサービスによって作成された通知スレッドで呼び出すことができます。どちらの場合も、クライアントはこれらのコールバックで長時間の処理を実行するべきではありません。</target>
        </trans-unit>
        <trans-unit id="4402cd1b45417982edba7b2ac6df98c76b27647c" translate="yes" xml:space="preserve">
          <source>Implementations of this method are permitted, but not required, to return the same object from multiple invocations.</source>
          <target state="translated">このメソッドの実装は、複数回の呼び出しから同じオブジェクトを返すことが許可されていますが、必須ではありません。</target>
        </trans-unit>
        <trans-unit id="a1f0a740fb87b360af2d304f28d804dd997ef4e9" translate="yes" xml:space="preserve">
          <source>Implementations of this method need not create a separate &lt;code&gt;List&lt;/code&gt; object for each call. Using this method is likely to have comparable cost to using the like-named field. (Unlike this method, the field does not provide type safety.)</source>
          <target state="translated">このメソッドの実装では、呼び出しごとに個別の &lt;code&gt;List&lt;/code&gt; オブジェクトを作成する必要はありません。この方法を使用すると、同じ名前のフィールドを使用する場合と同等のコストがかかる可能性があります。（このメソッドとは異なり、このフィールドはタイプセーフを提供しません。）</target>
        </trans-unit>
        <trans-unit id="7d7e4eb6f727ccc34715a0e9ae615998421dde8c" translate="yes" xml:space="preserve">
          <source>Implementations of this method need not create a separate &lt;code&gt;Map&lt;/code&gt; object for each call. Using this method is likely to have comparable cost to using the like-named field. (Unlike this method, the field does not provide type safety.)</source>
          <target state="translated">このメソッドの実装では、呼び出しごとに個別の &lt;code&gt;Map&lt;/code&gt; オブジェクトを作成する必要はありません。この方法を使用すると、同じ名前のフィールドを使用する場合と同等のコストがかかる可能性があります。（このメソッドとは異なり、このフィールドはタイプセーフを提供しません。）</target>
        </trans-unit>
        <trans-unit id="f753f34db48ccb0310777f203dd093fd8129db52" translate="yes" xml:space="preserve">
          <source>Implementations of this method need not create a separate &lt;code&gt;NavigableMap&lt;/code&gt; object for each call.</source>
          <target state="translated">このメソッドの実装では、呼び出しごとに個別の &lt;code&gt;NavigableMap&lt;/code&gt; オブジェクトを作成する必要はありません。</target>
        </trans-unit>
        <trans-unit id="724af2588f9712c349db1f2980acabcda1643883" translate="yes" xml:space="preserve">
          <source>Implementations of this method need not create a separate &lt;code&gt;NavigableSet&lt;/code&gt; object for each call.</source>
          <target state="translated">このメソッドの実装では、呼び出しごとに個別の &lt;code&gt;NavigableSet&lt;/code&gt; オブジェクトを作成する必要はありません。</target>
        </trans-unit>
        <trans-unit id="8c569f90769c2ffcc16f17ff5ae79fd3729cd607" translate="yes" xml:space="preserve">
          <source>Implementations of this method need not create a separate &lt;code&gt;Set&lt;/code&gt; object for each call. Using this method is likely to have comparable cost to using the like-named field. (Unlike this method, the field does not provide type safety.)</source>
          <target state="translated">このメソッドの実装では、呼び出しごとに個別の &lt;code&gt;Set&lt;/code&gt; オブジェクトを作成する必要はありません。この方法を使用すると、同じ名前のフィールドを使用する場合と同等のコストがかかる可能性があります。（このメソッドとは異なり、このフィールドはタイプセーフを提供しません。）</target>
        </trans-unit>
        <trans-unit id="a6219835d128fc2b015c10dfba2058045935cdb9" translate="yes" xml:space="preserve">
          <source>Implementations of this method need not create a separate &lt;code&gt;SortedMap&lt;/code&gt; object for each call.</source>
          <target state="translated">このメソッドの実装では、呼び出しごとに個別の &lt;code&gt;SortedMap&lt;/code&gt; オブジェクトを作成する必要はありません。</target>
        </trans-unit>
        <trans-unit id="4148397f35d90aa072e66df043b8d5c754ee09b6" translate="yes" xml:space="preserve">
          <source>Implementations of this method need not create a separate &lt;code&gt;SortedSet&lt;/code&gt; object for each call.</source>
          <target state="translated">このメソッドの実装では、呼び出しごとに個別の &lt;code&gt;SortedSet&lt;/code&gt; オブジェクトを作成する必要はありません。</target>
        </trans-unit>
        <trans-unit id="fc865e84a8b192577a99b4d5bdcabe36bdf2a1ba" translate="yes" xml:space="preserve">
          <source>Implementations should combine duplicate TreePaths that are added to the selection. For example, the following code</source>
          <target state="translated">実装では、選択範囲に追加された重複したTreePathを結合しなければなりません。例えば、以下のコードは</target>
        </trans-unit>
        <trans-unit id="e09a8eb7b589680f1982a4e270b31adca911a817" translate="yes" xml:space="preserve">
          <source>Implementations should determine whether they are supported using the fields available in &lt;a href=&quot;chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">実装では、&lt;a href=&quot;chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; で&lt;/a&gt;使用可能なフィールドを使用してそれらがサポートされているかどうかを判断する必要があります。</target>
        </trans-unit>
        <trans-unit id="6d0dc13ed50551259c51f74f77585ebb3686a0b5" translate="yes" xml:space="preserve">
          <source>Implementations should implement &lt;code&gt;Serializable&lt;/code&gt; wherever possible and must document whether or not they do support serialization.</source>
          <target state="translated">実装は可能な限り &lt;code&gt;Serializable&lt;/code&gt; を実装し、シリアル化をサポートするかどうかを文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="f20a07b2b8fb2eb7d7481c5c66b280630e90b787" translate="yes" xml:space="preserve">
          <source>Implementations should override the default &lt;code&gt;destroy&lt;/code&gt; and &lt;code&gt;isDestroyed&lt;/code&gt; methods from the &lt;a href=&quot;../../javax/security/auth/destroyable&quot;&gt;&lt;code&gt;Destroyable&lt;/code&gt;&lt;/a&gt; interface to enable sensitive key information to be destroyed, cleared, or in the case where such information is immutable, unreferenced. Finally, since &lt;code&gt;PrivateKey&lt;/code&gt; is &lt;code&gt;Serializable&lt;/code&gt;, implementations should also override &lt;a href=&quot;../io/objectoutputstream#writeObject(java.lang.Object)&quot;&gt;&lt;code&gt;ObjectOutputStream.writeObject(java.lang.Object)&lt;/code&gt;&lt;/a&gt; to prevent keys that have been destroyed from being serialized.</source>
          <target state="translated">実装では、デフォルトはオーバーライドする必要が &lt;code&gt;destroy&lt;/code&gt; と &lt;code&gt;isDestroyed&lt;/code&gt; から方法&lt;a href=&quot;../../javax/security/auth/destroyable&quot;&gt; &lt;code&gt;Destroyable&lt;/code&gt; &lt;/a&gt;界面機密鍵情報は、破壊クリア、またはそのような情報が参照されていない、不変である場合にされることを可能にします。最後に、 &lt;code&gt;PrivateKey&lt;/code&gt; はシリアル &lt;code&gt;Serializable&lt;/code&gt; であるため、実装は&lt;a href=&quot;../io/objectoutputstream#writeObject(java.lang.Object)&quot;&gt; &lt;code&gt;ObjectOutputStream.writeObject(java.lang.Object)&lt;/code&gt; &lt;/a&gt;もオーバーライドして、破棄されたキーがシリアル化されないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="c2023f1a7cd65e43dc987df91289f438391353dd" translate="yes" xml:space="preserve">
          <source>Implementations should override the default &lt;code&gt;destroy&lt;/code&gt; and &lt;code&gt;isDestroyed&lt;/code&gt; methods from the &lt;a href=&quot;../../javax/security/auth/destroyable&quot;&gt;&lt;code&gt;Destroyable&lt;/code&gt;&lt;/a&gt; interface to enable sensitive key information to be destroyed, cleared, or in the case where such information is immutable, unreferenced. Finally, since &lt;code&gt;PrivateKey&lt;/code&gt; is &lt;code&gt;Serializable&lt;/code&gt;, implementations should also override &lt;a href=&quot;../io/objectoutputstream#writeObject-java.lang.Object-&quot;&gt;&lt;code&gt;ObjectOutputStream.writeObject(java.lang.Object)&lt;/code&gt;&lt;/a&gt; to prevent keys that have been destroyed from being serialized.</source>
          <target state="translated">実装では、デフォルトはオーバーライドする必要が &lt;code&gt;destroy&lt;/code&gt; と &lt;code&gt;isDestroyed&lt;/code&gt; から方法&lt;a href=&quot;../../javax/security/auth/destroyable&quot;&gt; &lt;code&gt;Destroyable&lt;/code&gt; &lt;/a&gt;界面機密鍵情報は、破壊クリア、またはそのような情報が参照されていない、不変である場合にされることを可能にします。最後に、 &lt;code&gt;PrivateKey&lt;/code&gt; は &lt;code&gt;Serializable&lt;/code&gt; であるため、実装は&lt;a href=&quot;../io/objectoutputstream#writeObject-java.lang.Object-&quot;&gt; &lt;code&gt;ObjectOutputStream.writeObject(java.lang.Object)&lt;/code&gt; &lt;/a&gt;もオーバーライドして、破棄されたキーがシリアル化されないようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="3f89a141b40f5b504d614a3aa48c27dfceeae9ae" translate="yes" xml:space="preserve">
          <source>Implementations should perform any queries or calculations using the fields available in &lt;a href=&quot;chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt;. If the field is not supported an &lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt; must be thrown.</source>
          <target state="translated">実装では、&lt;a href=&quot;chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; で&lt;/a&gt;使用可能なフィールドを使用して、クエリまたは計算を実行する必要があります。フィールドがサポートされてい &lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt; 場合は、UnsupportedTemporalTypeExceptionをスローする必要があります。</target>
        </trans-unit>
        <trans-unit id="bb7adf8c98b0949039b35e12066594b1afab0446" translate="yes" xml:space="preserve">
          <source>Implementations should perform any queries or calculations using the units available in &lt;a href=&quot;chronounit&quot;&gt;&lt;code&gt;ChronoUnit&lt;/code&gt;&lt;/a&gt; or the fields available in &lt;a href=&quot;chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt;. If the unit is not supported an &lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt; must be thrown.</source>
          <target state="translated">実装では、&lt;a href=&quot;chronounit&quot;&gt; &lt;code&gt;ChronoUnit&lt;/code&gt; で&lt;/a&gt;使用可能な単位または&lt;a href=&quot;chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; で&lt;/a&gt;使用可能なフィールドを使用して、クエリまたは計算を実行する必要があります。ユニットがサポートされてい &lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt; 場合は、UnsupportedTemporalTypeExceptionをスローする必要があります。</target>
        </trans-unit>
        <trans-unit id="7ceb7c1ca9b69ca4554167b37ceed67cb09622fc" translate="yes" xml:space="preserve">
          <source>Implementations should perform any queries or calculations using the units available in &lt;a href=&quot;chronounit&quot;&gt;&lt;code&gt;ChronoUnit&lt;/code&gt;&lt;/a&gt; or the fields available in &lt;a href=&quot;chronofield&quot;&gt;&lt;code&gt;ChronoField&lt;/code&gt;&lt;/a&gt;. If the unit is not supported an &lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt; must be thrown. Implementations must not alter the specified temporal objects.</source>
          <target state="translated">実装では、&lt;a href=&quot;chronounit&quot;&gt; &lt;code&gt;ChronoUnit&lt;/code&gt; で&lt;/a&gt;使用可能な単位または&lt;a href=&quot;chronofield&quot;&gt; &lt;code&gt;ChronoField&lt;/code&gt; で&lt;/a&gt;使用可能なフィールドを使用して、クエリまたは計算を実行する必要があります。ユニットがサポートされてい &lt;code&gt;UnsupportedTemporalTypeException&lt;/code&gt; 場合は、UnsupportedTemporalTypeExceptionをスローする必要があります。実装は、指定された一時オブジェクトを変更してはなりません。</target>
        </trans-unit>
        <trans-unit id="f4c8d5deb5010407f725941d6330fb83e7adf8c4" translate="yes" xml:space="preserve">
          <source>Implementations should raise other exceptions under other circumstances. For example, implementations should raise an implementation-dependent exception if a &lt;code&gt;null&lt;/code&gt; argument is passed when &lt;code&gt;null&lt;/code&gt; was not expected.</source>
          <target state="translated">実装は、他の状況下で他の例外を発生させる必要があります。たとえば、実装は実装依存例外を発生させなければならない &lt;code&gt;null&lt;/code&gt; 時に引数が渡された &lt;code&gt;null&lt;/code&gt; が予想されていませんでした。</target>
        </trans-unit>
        <trans-unit id="d8fb224f30dd82a4384971b67059784a6d15590c" translate="yes" xml:space="preserve">
          <source>Implementations should transparently handle artifacts of the transmission protocol. For example, when using the T=0 protocol, the following processing should occur as described in ISO/IEC 7816-4:</source>
          <target state="translated">実装は、伝送プロトコルのアーティファクトを透過的に処理することが望ましい。例えば、T=0プロトコルを使用する場合、ISO/IEC 7816-4に記述されているように、以下の処理が行われるべきである。</target>
        </trans-unit>
        <trans-unit id="9525ca7fbcb8134eb42edfabd5ffb3edf11a4d7c" translate="yes" xml:space="preserve">
          <source>Implementations supporting this attribute view may also support setting the initial ACL when creating a file or directory. The initial ACL may be provided to methods such as &lt;a href=&quot;../files#createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)&quot;&gt;&lt;code&gt;createFile&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../files#createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)&quot;&gt;&lt;code&gt;createDirectory&lt;/code&gt;&lt;/a&gt; as an &lt;a href=&quot;fileattribute&quot;&gt;&lt;code&gt;FileAttribute&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;fileattribute#name()&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&quot;acl:acl&quot;&lt;/code&gt; and a &lt;a href=&quot;fileattribute#value()&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/a&gt; that is the list of &lt;code&gt;AclEntry&lt;/code&gt; objects.</source>
          <target state="translated">この属性ビューをサポートする実装は、ファイルまたはディレクトリを作成するときの初期ACLの設定もサポートする場合があります。初期ACLは、次のような方法を提供することができる&lt;a href=&quot;../files#createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)&quot;&gt; &lt;code&gt;createFile&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../files#createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)&quot;&gt; &lt;code&gt;createDirectory&lt;/code&gt; &lt;/a&gt;として&lt;a href=&quot;fileattribute&quot;&gt; &lt;code&gt;FileAttribute&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;fileattribute#name()&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&quot;acl:acl&quot;&lt;/code&gt; と&lt;a href=&quot;fileattribute#value()&quot;&gt; &lt;code&gt;value&lt;/code&gt; &lt;/a&gt;のリストである &lt;code&gt;AclEntry&lt;/code&gt; はオブジェクト。</target>
        </trans-unit>
        <trans-unit id="9265c990fd1a70dc9468d67065e182a75e5b85cc" translate="yes" xml:space="preserve">
          <source>Implementations supporting this attribute view may also support setting the initial ACL when creating a file or directory. The initial ACL may be provided to methods such as &lt;a href=&quot;../files#createFile-java.nio.file.Path-java.nio.file.attribute.FileAttribute...-&quot;&gt;&lt;code&gt;createFile&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../files#createDirectory-java.nio.file.Path-java.nio.file.attribute.FileAttribute...-&quot;&gt;&lt;code&gt;createDirectory&lt;/code&gt;&lt;/a&gt; as an &lt;a href=&quot;fileattribute&quot;&gt;&lt;code&gt;FileAttribute&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&quot;acl:acl&quot;&lt;/code&gt; and a &lt;a href=&quot;fileattribute#value--&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/a&gt; that is the list of &lt;code&gt;AclEntry&lt;/code&gt; objects.</source>
          <target state="translated">この属性ビューをサポートする実装は、ファイルまたはディレクトリの作成時に初期ACLの設定もサポートする場合があります。最初のACLは、&lt;a href=&quot;fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&quot;acl:acl&quot;&lt;/code&gt; で、&lt;a href=&quot;fileattribute#value--&quot;&gt; &lt;code&gt;value&lt;/code&gt; &lt;/a&gt;が &lt;code&gt;AclEntry&lt;/code&gt; オブジェクトのリストである&lt;a href=&quot;fileattribute&quot;&gt; &lt;code&gt;FileAttribute&lt;/code&gt; &lt;/a&gt;として、&lt;a href=&quot;../files#createFile-java.nio.file.Path-java.nio.file.attribute.FileAttribute...-&quot;&gt; &lt;code&gt;createFile&lt;/code&gt; &lt;/a&gt;や&lt;a href=&quot;../files#createDirectory-java.nio.file.Path-java.nio.file.attribute.FileAttribute...-&quot;&gt; &lt;code&gt;createDirectory&lt;/code&gt; &lt;/a&gt;などのメソッドに提供できます。</target>
        </trans-unit>
        <trans-unit id="10dd796e1e9bf0840bd0fadcb7619888855b0e5e" translate="yes" xml:space="preserve">
          <source>Implementations supporting this attribute view may also support setting the initial permissions when creating a file or directory. The initial permissions are provided to the &lt;a href=&quot;../files#createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)&quot;&gt;&lt;code&gt;createFile&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../files#createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)&quot;&gt;&lt;code&gt;createDirectory&lt;/code&gt;&lt;/a&gt; methods as a &lt;a href=&quot;fileattribute&quot;&gt;&lt;code&gt;FileAttribute&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;fileattribute#name()&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&quot;posix:permissions&quot;&lt;/code&gt; and a &lt;a href=&quot;fileattribute#value()&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/a&gt; that is the set of permissions. The following example uses the &lt;a href=&quot;posixfilepermissions#asFileAttribute(java.util.Set)&quot;&gt;&lt;code&gt;asFileAttribute&lt;/code&gt;&lt;/a&gt; method to construct a &lt;code&gt;FileAttribute&lt;/code&gt; when creating a file:</source>
          <target state="translated">この属性ビューをサポートする実装は、ファイルまたはディレクトリを作成するときの初期権限の設定もサポートする場合があります。最初の権限はに提供されている&lt;a href=&quot;../files#createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)&quot;&gt; &lt;code&gt;createFile&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../files#createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute...)&quot;&gt; &lt;code&gt;createDirectory&lt;/code&gt; &lt;/a&gt;ような方法&lt;a href=&quot;fileattribute&quot;&gt; &lt;code&gt;FileAttribute&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;fileattribute#name()&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&quot;posix:permissions&quot;&lt;/code&gt; と&lt;a href=&quot;fileattribute#value()&quot;&gt; &lt;code&gt;value&lt;/code&gt; &lt;/a&gt;の許可のセットです。次の例では、&lt;a href=&quot;posixfilepermissions#asFileAttribute(java.util.Set)&quot;&gt; &lt;code&gt;asFileAttribute&lt;/code&gt; &lt;/a&gt;メソッドを使用して、ファイルを作成するときに &lt;code&gt;FileAttribute&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="c46af4741218e7b1b97c7da9603c5a880f593947" translate="yes" xml:space="preserve">
          <source>Implementations supporting this attribute view may also support setting the initial permissions when creating a file or directory. The initial permissions are provided to the &lt;a href=&quot;../files#createFile-java.nio.file.Path-java.nio.file.attribute.FileAttribute...-&quot;&gt;&lt;code&gt;createFile&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;../files#createDirectory-java.nio.file.Path-java.nio.file.attribute.FileAttribute...-&quot;&gt;&lt;code&gt;createDirectory&lt;/code&gt;&lt;/a&gt; methods as a &lt;a href=&quot;fileattribute&quot;&gt;&lt;code&gt;FileAttribute&lt;/code&gt;&lt;/a&gt; with &lt;a href=&quot;fileattribute#name--&quot;&gt;&lt;code&gt;name&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&quot;posix:permissions&quot;&lt;/code&gt; and a &lt;a href=&quot;fileattribute#value--&quot;&gt;&lt;code&gt;value&lt;/code&gt;&lt;/a&gt; that is the set of permissions. The following example uses the &lt;a href=&quot;posixfilepermissions#asFileAttribute-java.util.Set-&quot;&gt;&lt;code&gt;asFileAttribute&lt;/code&gt;&lt;/a&gt; method to construct a &lt;code&gt;FileAttribute&lt;/code&gt; when creating a file:</source>
          <target state="translated">この属性ビューをサポートする実装は、ファイルまたはディレクトリを作成するときの初期権限の設定もサポートする場合があります。最初の権限はに提供されている&lt;a href=&quot;../files#createFile-java.nio.file.Path-java.nio.file.attribute.FileAttribute...-&quot;&gt; &lt;code&gt;createFile&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;../files#createDirectory-java.nio.file.Path-java.nio.file.attribute.FileAttribute...-&quot;&gt; &lt;code&gt;createDirectory&lt;/code&gt; &lt;/a&gt;ような方法&lt;a href=&quot;fileattribute&quot;&gt; &lt;code&gt;FileAttribute&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;fileattribute#name--&quot;&gt; &lt;code&gt;name&lt;/code&gt; &lt;/a&gt; &lt;code&gt;&quot;posix:permissions&quot;&lt;/code&gt; と&lt;a href=&quot;fileattribute#value--&quot;&gt; &lt;code&gt;value&lt;/code&gt; &lt;/a&gt;の許可のセットです。次の例では、ファイルの作成時に&lt;a href=&quot;posixfilepermissions#asFileAttribute-java.util.Set-&quot;&gt; &lt;code&gt;asFileAttribute&lt;/code&gt; &lt;/a&gt;メソッドを使用して &lt;code&gt;FileAttribute&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="e4f7352bd5189bae4e86402d1ca84f5a70c34ad4" translate="yes" xml:space="preserve">
          <source>Implemented by a service provider, used by the static methods of this class.</source>
          <target state="translated">サービスプロバイダによって実装され、このクラスの静的メソッドによって使用されます。</target>
        </trans-unit>
        <trans-unit id="5d27247adfc98a632446be7b025feb0b66fde48b" translate="yes" xml:space="preserve">
          <source>Implemented by objects that can have a &lt;code&gt;JMXServiceURL&lt;/code&gt; address.</source>
          <target state="translated">&lt;code&gt;JMXServiceURL&lt;/code&gt; アドレスを持つことができるオブジェクトによって実装されます。</target>
        </trans-unit>
        <trans-unit id="e18ec9389651cc68787839f4398e87d90fd1fb0e" translate="yes" xml:space="preserve">
          <source>Implemented by objects that can have a &lt;code&gt;JMXServiceURL&lt;/code&gt; address. All &lt;a href=&quot;jmxconnectorserver&quot;&gt;&lt;code&gt;JMXConnectorServer&lt;/code&gt;&lt;/a&gt; objects implement this interface. Depending on the connector implementation, a &lt;a href=&quot;jmxconnector&quot;&gt;&lt;code&gt;JMXConnector&lt;/code&gt;&lt;/a&gt; object may implement this interface too. &lt;code&gt;JMXConnector&lt;/code&gt; objects for the RMI Connector are instances of &lt;a href=&quot;../../../../java.management.rmi/javax/management/remote/rmi/rmiconnector&quot;&gt;&lt;code&gt;RMIConnector&lt;/code&gt;&lt;/a&gt; which implements this interface.</source>
          <target state="translated">&lt;code&gt;JMXServiceURL&lt;/code&gt; アドレスを持つことができるオブジェクトによって実装されます。すべての&lt;a href=&quot;jmxconnectorserver&quot;&gt; &lt;code&gt;JMXConnectorServer&lt;/code&gt; &lt;/a&gt;オブジェクトは、このインターフェースを実装します。コネクタの実装によっては、&lt;a href=&quot;jmxconnector&quot;&gt; &lt;code&gt;JMXConnector&lt;/code&gt; &lt;/a&gt;オブジェクトもこのインターフェイスを実装する場合があります。RMIコネクタの &lt;code&gt;JMXConnector&lt;/code&gt; オブジェクトは、このインターフェイスを実装する&lt;a href=&quot;../../../../java.management.rmi/javax/management/remote/rmi/rmiconnector&quot;&gt; &lt;code&gt;RMIConnector&lt;/code&gt; の&lt;/a&gt;インスタンスです。</target>
        </trans-unit>
        <trans-unit id="61cd05b213ed2ee1d81c4aee8d8fd0536738b4af" translate="yes" xml:space="preserve">
          <source>Implemented by objects that can have a &lt;code&gt;JMXServiceURL&lt;/code&gt; address. All &lt;a href=&quot;jmxconnectorserver&quot;&gt;&lt;code&gt;JMXConnectorServer&lt;/code&gt;&lt;/a&gt; objects implement this interface. Depending on the connector implementation, a &lt;a href=&quot;jmxconnector&quot;&gt;&lt;code&gt;JMXConnector&lt;/code&gt;&lt;/a&gt; object may implement this interface too. &lt;code&gt;JMXConnector&lt;/code&gt; objects for the RMI Connector are instances of &lt;a href=&quot;rmi/rmiconnector&quot;&gt;&lt;code&gt;RMIConnector&lt;/code&gt;&lt;/a&gt; which implements this interface.</source>
          <target state="translated">&lt;code&gt;JMXServiceURL&lt;/code&gt; アドレスを持つことができるオブジェクトによって実装されます。すべての&lt;a href=&quot;jmxconnectorserver&quot;&gt; &lt;code&gt;JMXConnectorServer&lt;/code&gt; &lt;/a&gt;オブジェクトはこのインターフェースを実装しています。コネクターの実装によっては、&lt;a href=&quot;jmxconnector&quot;&gt; &lt;code&gt;JMXConnector&lt;/code&gt; &lt;/a&gt;オブジェクトもこのインターフェースを実装する場合があります。RMIコネクターの &lt;code&gt;JMXConnector&lt;/code&gt; オブジェクトは、このインターフェースを実装する&lt;a href=&quot;rmi/rmiconnector&quot;&gt; &lt;code&gt;RMIConnector&lt;/code&gt; の&lt;/a&gt;インスタンスです。</target>
        </trans-unit>
        <trans-unit id="e3d61810bc73f33e4e00486624813fd3c76d0745" translate="yes" xml:space="preserve">
          <source>Implemented to be a &lt;code&gt;MenuElement&lt;/code&gt; -- does nothing.</source>
          <target state="translated">&lt;code&gt;MenuElement&lt;/code&gt; として実装されています-何もしません。</target>
        </trans-unit>
        <trans-unit id="cbf96cb764bf289e584a3256d8b7340a013852d9" translate="yes" xml:space="preserve">
          <source>Implemented to be a &lt;code&gt;MenuElement&lt;/code&gt; -- returns the menus in this menu bar.</source>
          <target state="translated">&lt;code&gt;MenuElement&lt;/code&gt; として実装-このメニューバーのメニューを返します。</target>
        </trans-unit>
        <trans-unit id="49ed97f064afc431455d8a8d0c9ee34d43d19b3b" translate="yes" xml:space="preserve">
          <source>Implemented to be a &lt;code&gt;MenuElement&lt;/code&gt; -- returns the menus in this menu bar. This is the reason for implementing the &lt;code&gt;MenuElement&lt;/code&gt; interface -- so that the menu bar can be treated the same as other menu elements.</source>
          <target state="translated">&lt;code&gt;MenuElement&lt;/code&gt; として実装-このメニューバーのメニューを返します。これが、 &lt;code&gt;MenuElement&lt;/code&gt; インターフェイスを実装する理由です。これにより、メニューバーを他のメニュー要素と同じように扱うことができます。</target>
        </trans-unit>
        <trans-unit id="af39823a4addc01a879447b01511360237f5e522" translate="yes" xml:space="preserve">
          <source>Implemented to be a &lt;code&gt;MenuElement&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;MenuElement&lt;/code&gt; として実装されました。</target>
        </trans-unit>
        <trans-unit id="e7203d79e1e510762b33e93ba6a7d51389952311" translate="yes" xml:space="preserve">
          <source>Implemented to be a &lt;code&gt;MenuElement&lt;/code&gt;. Returns this object.</source>
          <target state="translated">&lt;code&gt;MenuElement&lt;/code&gt; として実装されました。このオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="6106e4896a692c93ab85fcb3e444b73ba8fbeee9" translate="yes" xml:space="preserve">
          <source>Implementer's Guide</source>
          <target state="translated">インプリメンターズガイド</target>
        </trans-unit>
        <trans-unit id="492fa413aa34c053a664565f4e23bc9d32ccaa54" translate="yes" xml:space="preserve">
          <source>Implementers should specify the name of an appropriate class to be instantiated if no other implementation resolution mechanism succeeds.</source>
          <target state="translated">実装者は、他の実装解決メカニズムが成功しなかった場合に、インスタンス化される適切なクラスの名前を指定しなければなりません。</target>
        </trans-unit>
        <trans-unit id="6316c998aaf80f52e21906c45a08ecf6dd94f2cb" translate="yes" xml:space="preserve">
          <source>Implementing the Externalizable interface allows the object to assume complete control over the contents and format of the object's serialized form. The methods of the Externalizable interface, writeExternal and readExternal, are called to save and restore the objects state. When implemented by a class they can write and read their own state using all of the methods of ObjectOutput and ObjectInput. It is the responsibility of the objects to handle any versioning that occurs.</source>
          <target state="translated">Externalizableインターフェースを実装することで、オブジェクトはオブジェクトのシリアライズされたフォームの内容とフォーマットを完全に制御することができます。Externalizable インターフェースの writeExternal と readExternal のメソッドは、オブジェクトの状態を保存したり復元したりするために呼び出されます。クラスによって実装されている場合は、ObjectOutputとObjectInputのすべてのメソッドを使用して、自分自身の状態を書き込んだり、読み込んだりすることができます。バージョニングが発生した場合、それを処理するのはオブジェクトの責任です。</target>
        </trans-unit>
        <trans-unit id="85a1b32441e6f8998efff0a593cf96d0554294af" translate="yes" xml:space="preserve">
          <source>Implementing the MemoryPool object works similarly for both Standard MBeans and MXBeans.</source>
          <target state="translated">MemoryPool オブジェクトの実装は、Standard MBeans と MXBeans の両方で同様に動作します。</target>
        </trans-unit>
        <trans-unit id="b27273a4fe2fe56656ab15058c038de342b8f1ba" translate="yes" xml:space="preserve">
          <source>Implementing the Serializable interface allows object serialization to save and restore the entire state of the object and it allows classes to evolve between the time the stream is written and the time it is read. It automatically traverses references between objects, saving and restoring entire graphs.</source>
          <target state="translated">Serializableインターフェースを実装することで、オブジェクトのシリアル化により、オブジェクト全体の状態を保存・復元することができ、ストリームが書き込まれてから読み込まれるまでの間にクラスを進化させることができるようになります。また、オブジェクト間の参照を自動的にトラバースし、グラフ全体の保存と復元を行います。</target>
        </trans-unit>
        <trans-unit id="c4eba021a9e9d2a95adfd121f50523d25266d18b" translate="yes" xml:space="preserve">
          <source>Implementing this interface allows an object to be the target of the &quot;for-each loop&quot; statement.</source>
          <target state="translated">このインターフェイスを実装することで、オブジェクトを &quot;for-eachループ &quot;文の対象にすることができます。</target>
        </trans-unit>
        <trans-unit id="b2c3a655b63b5ea1f21619a61f5d5ab25bccd7b1" translate="yes" xml:space="preserve">
          <source>Implementing this interface allows an object to be the target of the &quot;for-each loop&quot; statement. See &lt;strong&gt; &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/language/foreach.html&quot;&gt;For-each Loop&lt;/a&gt; &lt;/strong&gt;</source>
          <target state="translated">このインターフェイスを実装すると、オブジェクトを「for-eachループ」ステートメントのターゲットにすることができます。&lt;strong&gt;&lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/language/foreach.html&quot;&gt;For-Eachループを&lt;/a&gt;&lt;/strong&gt;参照&lt;strong&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="677667db2207746335237bb2c25d22bd60cea248" translate="yes" xml:space="preserve">
          <source>Implementing this interface allows an object to be the target of the enhanced &lt;code&gt;for&lt;/code&gt; statement (sometimes called the &quot;for-each loop&quot; statement).</source>
          <target state="translated">このインターフェイスを実装すると、オブジェクトを拡張 &lt;code&gt;for&lt;/code&gt; ステートメント（「for-eachループ」ステートメントと呼ばれることもあります）のターゲットにすることができます。</target>
        </trans-unit>
        <trans-unit id="16b8440feaff663be30e5ff98a6229d156358ad9" translate="yes" xml:space="preserve">
          <source>Implementors and developers should pay particular attention to how the features set on this &lt;a href=&quot;schemafactory&quot;&gt;&lt;code&gt;SchemaFactory&lt;/code&gt;&lt;/a&gt; are processed by this special &lt;a href=&quot;schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt;. In some cases, for example, when the &lt;a href=&quot;schemafactory&quot;&gt;&lt;code&gt;SchemaFactory&lt;/code&gt;&lt;/a&gt; and the class actually loading the schema come from different implementations, it may not be possible for &lt;a href=&quot;schemafactory&quot;&gt;&lt;code&gt;SchemaFactory&lt;/code&gt;&lt;/a&gt; features to be inherited automatically. Developers should make sure that features, such as secure processing, are explicitly set in both places.</source>
          <target state="translated">実装者と開発者は、この&lt;a href=&quot;schemafactory&quot;&gt; &lt;code&gt;SchemaFactory&lt;/code&gt; に&lt;/a&gt;設定された機能がこの特別な&lt;a href=&quot;schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt;によってどのように処理されるかに特に注意を払う必要があります。たとえば、&lt;a href=&quot;schemafactory&quot;&gt; &lt;code&gt;SchemaFactory&lt;/code&gt; &lt;/a&gt;と実際にスキーマをロードするクラスが異なる実装からのものである場合、&lt;a href=&quot;schemafactory&quot;&gt; &lt;code&gt;SchemaFactory&lt;/code&gt; の&lt;/a&gt;機能を自動的に継承できない場合があります。開発者は、安全な処理などの機能が両方の場所で明示的に設定されていることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="99951e523cfc57b1343f700e7220490f37aa210c" translate="yes" xml:space="preserve">
          <source>Implementors and developers should pay particular attention to how the special &lt;a href=&quot;schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt; object returned by &lt;a href=&quot;#newSchema()&quot;&gt;&lt;code&gt;newSchema()&lt;/code&gt;&lt;/a&gt; is processed. In some cases, for example, when the &lt;code&gt;SchemaFactory&lt;/code&gt; and the class actually loading the schema come from different implementations, it may not be possible for &lt;code&gt;SchemaFactory&lt;/code&gt; features to be inherited automatically. Developers should make sure that features, such as secure processing, are explicitly set in both places.</source>
          <target state="translated">実装者と開発者は、&lt;a href=&quot;#newSchema()&quot;&gt; &lt;code&gt;newSchema()&lt;/code&gt; &lt;/a&gt;によって返される特別な&lt;a href=&quot;schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt;オブジェクトがどのように処理されるかに特に注意を払う必要があります。たとえば、 &lt;code&gt;SchemaFactory&lt;/code&gt; と実際にスキーマをロードするクラスが異なる実装からのものである場合、 &lt;code&gt;SchemaFactory&lt;/code&gt; の機能を自動的に継承できない場合があります。開発者は、安全な処理などの機能が両方の場所で明示的に設定されていることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="8577e7b0e57464789c03fce26dcd7c74511a3795" translate="yes" xml:space="preserve">
          <source>Implementors are free (and encouraged) to invent their own features, using names built on their own URIs.</source>
          <target state="translated">実装者は、自分のURIに基づいて作られた名前を使って、自分の機能を発明することを自由に(奨励されて)行うことができます。</target>
        </trans-unit>
        <trans-unit id="dc3a77180c30a4d8539025481958848c09be493e" translate="yes" xml:space="preserve">
          <source>Implementors are free (and encouraged) to invent their own properties, using names built on their own URIs.</source>
          <target state="translated">実装者は、自分のURIに基づいて作られた名前を使って、自分のプロパティを発明することを自由に(奨励されて)行うことができます。</target>
        </trans-unit>
        <trans-unit id="ee508ec5b0694cae10b7518c95bffc14abcc25ed" translate="yes" xml:space="preserve">
          <source>Implementors are notified when the app becomes the foreground app and when it is no longer the foreground app.</source>
          <target state="translated">実装者には、アプリがフォアグラウンドアプリになった時と、アプリがフォアグラウンドアプリでなくなった時に通知されます。</target>
        </trans-unit>
        <trans-unit id="ba3e9207c3154f7847ddc0b6161132c852925581" translate="yes" xml:space="preserve">
          <source>Implementors are notified when the app becomes the foreground app and when it is no longer the foreground app. This notification is useful for hiding and showing transient UI like palette windows which should be hidden when the app is in the background.</source>
          <target state="translated">アプリがフォアグラウンドアプリになったとき、フォアグラウンドアプリでなくなったときに実装者に通知されます。この通知は、アプリがバックグラウンドになったときに非表示にすべきパレットウィンドウのような過渡的なUIを非表示にしたり表示したりするのに便利です。</target>
        </trans-unit>
        <trans-unit id="9d37a186316d3ce73428e4b8ed79605fa6ada0ad" translate="yes" xml:space="preserve">
          <source>Implementors are notified when the app is hidden or shown by the user.</source>
          <target state="translated">実装者は、アプリが非表示になったり、ユーザーに表示されたりした場合に通知されます。</target>
        </trans-unit>
        <trans-unit id="275d1a155c071e2398e4415f5c0fade0a1bc4c93" translate="yes" xml:space="preserve">
          <source>Implementors are notified when the app is hidden or shown by the user. This notification is helpful for discontinuing a costly animation if it's not visible to the user.</source>
          <target state="translated">実装者は、アプリが非表示になったり、ユーザーに表示されたりした場合に通知されます。この通知は、ユーザーに見えない場合にコストのかかるアニメーションを中止するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="138204779c48d5972dd906bafe8996d60eaece4f" translate="yes" xml:space="preserve">
          <source>Implementors must override the nine abstract service-provider interface (SPI) methods: &lt;a href=&quot;#getSpi(java.lang.String)&quot;&gt;&lt;code&gt;getSpi(String)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#putSpi(java.lang.String,java.lang.String)&quot;&gt;&lt;code&gt;putSpi(String,String)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#removeSpi(java.lang.String)&quot;&gt;&lt;code&gt;removeSpi(String)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#childSpi(java.lang.String)&quot;&gt;&lt;code&gt;childSpi(String)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#removeNodeSpi()&quot;&gt;&lt;code&gt;removeNodeSpi()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#keysSpi()&quot;&gt;&lt;code&gt;keysSpi()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#childrenNamesSpi()&quot;&gt;&lt;code&gt;childrenNamesSpi()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#syncSpi()&quot;&gt;&lt;code&gt;syncSpi()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#flushSpi()&quot;&gt;&lt;code&gt;flushSpi()&lt;/code&gt;&lt;/a&gt;. All of the concrete methods specify precisely how they are implemented atop these SPI methods. The implementor may, at his discretion, override one or more of the concrete methods if the default implementation is unsatisfactory for any reason, such as performance.</source>
          <target state="translated">実装者は、9つの抽象サービスプロバイダーインターフェイス（SPI）メソッドをオーバーライドする必要があります：&lt;a href=&quot;#getSpi(java.lang.String)&quot;&gt; &lt;code&gt;getSpi(String)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#putSpi(java.lang.String,java.lang.String)&quot;&gt; &lt;code&gt;putSpi(String,String)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#removeSpi(java.lang.String)&quot;&gt; &lt;code&gt;removeSpi(String)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#childSpi(java.lang.String)&quot;&gt; &lt;code&gt;childSpi(String)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#removeNodeSpi()&quot;&gt; &lt;code&gt;removeNodeSpi()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#keysSpi()&quot;&gt; &lt;code&gt;keysSpi()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#childrenNamesSpi()&quot;&gt; &lt;code&gt;childrenNamesSpi()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#syncSpi()&quot;&gt; &lt;code&gt;syncSpi()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#flushSpi()&quot;&gt; &lt;code&gt;flushSpi()&lt;/code&gt; &lt;/a&gt;。すべての具体的なメソッドは、これらのSPIメソッドの上に実装する方法を正確に指定します。実装者は、パフォーマンスなどの理由でデフォルトの実装が不十分な場合、独自の裁量で1つ以上の具体的なメソッドをオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="cfc9c018f8a42ee85a1ab091653d70a1654d6247" translate="yes" xml:space="preserve">
          <source>Implementors must override the nine abstract service-provider interface (SPI) methods: &lt;a href=&quot;abstractpreferences#getSpi-java.lang.String-&quot;&gt;&lt;code&gt;getSpi(String)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;abstractpreferences#putSpi-java.lang.String-java.lang.String-&quot;&gt;&lt;code&gt;putSpi(String,String)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;abstractpreferences#removeSpi-java.lang.String-&quot;&gt;&lt;code&gt;removeSpi(String)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;abstractpreferences#childSpi-java.lang.String-&quot;&gt;&lt;code&gt;childSpi(String)&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;abstractpreferences#removeNodeSpi--&quot;&gt;&lt;code&gt;removeNodeSpi()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;abstractpreferences#keysSpi--&quot;&gt;&lt;code&gt;keysSpi()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;abstractpreferences#childrenNamesSpi--&quot;&gt;&lt;code&gt;childrenNamesSpi()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;abstractpreferences#syncSpi--&quot;&gt;&lt;code&gt;syncSpi()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;abstractpreferences#flushSpi--&quot;&gt;&lt;code&gt;flushSpi()&lt;/code&gt;&lt;/a&gt;. All of the concrete methods specify precisely how they are implemented atop these SPI methods. The implementor may, at his discretion, override one or more of the concrete methods if the default implementation is unsatisfactory for any reason, such as performance.</source>
          <target state="translated">実装者は、9つの抽象サービスプロバイダーインターフェース（SPI）メソッドをオーバーライドする必要があります：&lt;a href=&quot;abstractpreferences#getSpi-java.lang.String-&quot;&gt; &lt;code&gt;getSpi(String)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;abstractpreferences#putSpi-java.lang.String-java.lang.String-&quot;&gt; &lt;code&gt;putSpi(String,String)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;abstractpreferences#removeSpi-java.lang.String-&quot;&gt; &lt;code&gt;removeSpi(String)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;abstractpreferences#childSpi-java.lang.String-&quot;&gt; &lt;code&gt;childSpi(String)&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;abstractpreferences#removeNodeSpi--&quot;&gt; &lt;code&gt;removeNodeSpi()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;abstractpreferences#keysSpi--&quot;&gt; &lt;code&gt;keysSpi()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;abstractpreferences#childrenNamesSpi--&quot;&gt; &lt;code&gt;childrenNamesSpi()&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;abstractpreferences#syncSpi--&quot;&gt; &lt;code&gt;syncSpi()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;abstractpreferences#flushSpi--&quot;&gt; &lt;code&gt;flushSpi()&lt;/code&gt; &lt;/a&gt;。すべての具象メソッドは、これらのSPIメソッドの上に実装する方法を正確に指定します。実装者は、デフォルトの実装がパフォーマンスなどの理由で不十分な場合、独自の裁量で、1つ以上の具象メソッドをオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="aead7400492ac0da3dcc2b29c778531e2a05071f" translate="yes" xml:space="preserve">
          <source>Implementors of serializable lambdas, such as compilers or language runtime libraries, are expected to ensure that instances deserialize properly. One means to do so is to ensure that the &lt;code&gt;writeReplace&lt;/code&gt; method returns an instance of &lt;code&gt;SerializedLambda&lt;/code&gt;, rather than allowing default serialization to proceed.</source>
          <target state="translated">コンパイラや言語ランタイムライブラリなどのシリアル化可能なラムダの実装者は、インスタンスが適切に逆シリアル化されることを保証する必要があります。そのための1つの方法は、デフォルトのシリアル化を続行するのではなく、 &lt;code&gt;writeReplace&lt;/code&gt; メソッドが &lt;code&gt;SerializedLambda&lt;/code&gt; のインスタンスを返すようにすることです。</target>
        </trans-unit>
        <trans-unit id="44c88085cccf2d65812bb1fc7a1aca637317273a" translate="yes" xml:space="preserve">
          <source>Implementors of this class which wrap an underlying implementation can consider using the &lt;a href=&quot;../../../org/xml/sax/helpers/parseradapter&quot;&gt;&lt;code&gt;ParserAdapter&lt;/code&gt;&lt;/a&gt; class to initially adapt their SAX1 implementation to work under this revised class.</source>
          <target state="translated">基礎となる実装をラップするこのクラスの実装者は、&lt;a href=&quot;../../../org/xml/sax/helpers/parseradapter&quot;&gt; &lt;code&gt;ParserAdapter&lt;/code&gt; &lt;/a&gt;クラスを使用して、最初にSAX1実装をこの改訂されたクラスで機能するように適合させることを検討できます。</target>
        </trans-unit>
        <trans-unit id="659cd7b74c1d7802de5869ebeaf003d5a53e8f3a" translate="yes" xml:space="preserve">
          <source>Implementors of this interface may find it convenient to extend &lt;a href=&quot;abstractprocessor&quot;&gt;&lt;code&gt;AbstractProcessor&lt;/code&gt;&lt;/a&gt; rather than implementing this interface directly.</source>
          <target state="translated">このインターフェースの実装者は、このインターフェースを直接実装するよりも、&lt;a href=&quot;abstractprocessor&quot;&gt; &lt;code&gt;AbstractProcessor&lt;/code&gt; &lt;/a&gt;を拡張する方が便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="d68709ed0031e9d20d4e17ec993bab81dd93a700" translate="yes" xml:space="preserve">
          <source>Implementors receive notification as the system is entering sleep, and after the system wakes.</source>
          <target state="translated">実装者は、システムがスリープ状態に入ると同時に、システムが目覚めた後に通知を受け取る。</target>
        </trans-unit>
        <trans-unit id="7798e91330173822181e6655dadd7e58496cc350" translate="yes" xml:space="preserve">
          <source>Implementors receive notification as the system is entering sleep, and after the system wakes. This notification is useful for disconnecting from network services prior to sleep, or re-establishing a connection if the network configuration has changed during sleep.</source>
          <target state="translated">実装者は、システムがスリープ状態に入ると同時に、システムが目覚めた後に通知を受け取ります。この通知は、スリープ前にネットワークサービスから切断したり、スリープ中にネットワーク構成が変更された場合に接続を再確立したりするのに便利です。</target>
        </trans-unit>
        <trans-unit id="447da6c7b13c5c1f40bebb620e8d04cab91b424d" translate="yes" xml:space="preserve">
          <source>Implementors receive notification when the app has been asked to open again.</source>
          <target state="translated">実装者は、アプリを再度開くように求められたときに通知を受け取ります。</target>
        </trans-unit>
        <trans-unit id="8d4c4b3d7fe642c2f0cbd29a70ec392e711ab9d9" translate="yes" xml:space="preserve">
          <source>Implementors receive notification when the app has been asked to open again. This notification is useful for showing a new document when your app has no open windows.</source>
          <target state="translated">実装者は、アプリが再び開くように要求されたときに通知を受け取ります。この通知は、アプリに開いているウィンドウがない場合に新しいドキュメントを表示するのに便利です。</target>
        </trans-unit>
        <trans-unit id="aa5fd4cfebec19ecb97f8db63b20c59efe6a87de" translate="yes" xml:space="preserve">
          <source>Implementors receive notification when the displays attached to the system have entered power save sleep.</source>
          <target state="translated">実装者は、システムに接続されたディスプレイがパワーセーブスリープに入ったときに通知を受ける。</target>
        </trans-unit>
        <trans-unit id="f3ac142b1424fd9c9ed9c1112ef26559d15b4ba3" translate="yes" xml:space="preserve">
          <source>Implementors receive notification when the displays attached to the system have entered power save sleep. This notification is useful for discontinuing a costly animation, or indicating that the user is no longer present on a network service.</source>
          <target state="translated">実装者は、システムに接続されたディスプレイがパワーセーブスリープに入ったときに通知を受け取る。この通知は、高価なアニメーションを中止したり、ユーザがネットワークサービス上に存在しなくなったことを示すのに有用である。</target>
        </trans-unit>
        <trans-unit id="a8b4aaea29398e416216bb5778297092d40e3545" translate="yes" xml:space="preserve">
          <source>Implementors receive notification when the user session changes.</source>
          <target state="translated">実装者は、ユーザセッションが変更されたときに通知を受け取る。</target>
        </trans-unit>
        <trans-unit id="4e1a43914199e6b094a085a07ae83622bf99a286" translate="yes" xml:space="preserve">
          <source>Implementors receive notification when the user session changes. This notification is useful for discontinuing a costly animation, or indicating that the user is no longer present on a network service. Some systems may provide a reason of the user session change.</source>
          <target state="translated">実装者は、ユーザセッションが変更されたときに通知を受け取る。この通知は、高価なアニメーションを中止したり、ユーザがネットワークサービス上に存在しなくなったことを示すのに有用である。システムによっては、ユーザセッションの変更の理由を提供してもよい。</target>
        </trans-unit>
        <trans-unit id="aa19933155a45f4e0ac8040534fd17524cd4459a" translate="yes" xml:space="preserve">
          <source>Implementors should assure that the properties set on the &lt;a href=&quot;schemafactory&quot;&gt;&lt;code&gt;SchemaFactory&lt;/code&gt;&lt;/a&gt; that created this &lt;a href=&quot;schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt; are also set on the &lt;a href=&quot;validator&quot;&gt;&lt;code&gt;Validator&lt;/code&gt;&lt;/a&gt; constructed.</source>
          <target state="translated">実装者は、この&lt;a href=&quot;schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt;を作成した&lt;a href=&quot;schemafactory&quot;&gt; &lt;code&gt;SchemaFactory&lt;/code&gt; に&lt;/a&gt;設定されたプロパティが、構築された&lt;a href=&quot;validator&quot;&gt; &lt;code&gt;Validator&lt;/code&gt; &lt;/a&gt;も設定されていることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="c34a71d5c363e25ed5c27a45f3f354fa775afff6" translate="yes" xml:space="preserve">
          <source>Implementors should assure that the properties set on the &lt;a href=&quot;schemafactory&quot;&gt;&lt;code&gt;SchemaFactory&lt;/code&gt;&lt;/a&gt; that created this &lt;a href=&quot;schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt; are also set on the &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt; constructed.</source>
          <target state="translated">実装者は、この&lt;a href=&quot;schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt;を作成した&lt;a href=&quot;schemafactory&quot;&gt; &lt;code&gt;SchemaFactory&lt;/code&gt; に&lt;/a&gt;設定されたプロパティが、構築された&lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; に&lt;/a&gt;も設定されていることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="a6eff8d7cc5d25aa20d533294644c7c1a063c35c" translate="yes" xml:space="preserve">
          <source>Implementors should note that there is also a &lt;code&gt;ContentHandler&lt;/code&gt; class in the &lt;code&gt;java.net&lt;/code&gt; package; that means that it's probably a bad idea to do</source>
          <target state="translated">実装者は、 &lt;code&gt;java.net&lt;/code&gt; パッケージにも &lt;code&gt;ContentHandler&lt;/code&gt; クラスがあることに注意する必要があります。それはおそらくそれをするのは悪い考えであることを意味します</target>
        </trans-unit>
        <trans-unit id="59e497ae7e63a78a2d82a59d17c0703a451bb786" translate="yes" xml:space="preserve">
          <source>Implements &lt;a href=&quot;../../../org/w3c/dom/ls/lsresourceresolver&quot;&gt;&lt;code&gt;LSResourceResolver&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../org/w3c/dom/ls/lsresourceresolver&quot;&gt; &lt;code&gt;LSResourceResolver&lt;/code&gt; を&lt;/a&gt;実装します。</target>
        </trans-unit>
        <trans-unit id="a83a690b5e99d54d516b6b75e55e496defe55a9b" translate="yes" xml:space="preserve">
          <source>Implements &lt;a href=&quot;../../../org/w3c/dom/ls/lsresourceresolver&quot;&gt;&lt;code&gt;LSResourceResolver&lt;/code&gt;&lt;/a&gt;. For the purpose of resolving &lt;code&gt;publicId&lt;/code&gt; and &lt;code&gt;systemId&lt;/code&gt;, this method is equivalent to &lt;a href=&quot;#resolveEntity(java.lang.String,java.lang.String)&quot;&gt;&lt;code&gt;resolveEntity(java.lang.String, java.lang.String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../org/w3c/dom/ls/lsresourceresolver&quot;&gt; &lt;code&gt;LSResourceResolver&lt;/code&gt; を&lt;/a&gt;実装します。 &lt;code&gt;publicId&lt;/code&gt; と &lt;code&gt;systemId&lt;/code&gt; を解決するために、このメソッドは&lt;a href=&quot;#resolveEntity(java.lang.String,java.lang.String)&quot;&gt; &lt;code&gt;resolveEntity(java.lang.String, java.lang.String)&lt;/code&gt; &lt;/a&gt;と同等です。</target>
        </trans-unit>
        <trans-unit id="62ff680457fbba2bd8145e76bbc89b6262c6dacf" translate="yes" xml:space="preserve">
          <source>Implements &lt;a href=&quot;../../../org/xml/sax/entityresolver&quot;&gt;&lt;code&gt;EntityResolver&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../../org/xml/sax/entityresolver&quot;&gt; &lt;code&gt;EntityResolver&lt;/code&gt; を&lt;/a&gt;実装します。</target>
        </trans-unit>
        <trans-unit id="483362f4faeee60c16638b977df7afab8a6d2ef0" translate="yes" xml:space="preserve">
          <source>Implements &lt;a href=&quot;../../../org/xml/sax/entityresolver&quot;&gt;&lt;code&gt;EntityResolver&lt;/code&gt;&lt;/a&gt;. The method searches through the catalog entries in the main and alternative catalogs to attempt to find a match with the specified &lt;code&gt;publicId&lt;/code&gt; or systemId.</source>
          <target state="translated">&lt;a href=&quot;../../../org/xml/sax/entityresolver&quot;&gt; &lt;code&gt;EntityResolver&lt;/code&gt; を&lt;/a&gt;実装します。このメソッドは、メインカタログと代替カタログのカタログエントリを検索して、指定された &lt;code&gt;publicId&lt;/code&gt; またはsystemIdと一致するものを見つけようとします。</target>
        </trans-unit>
        <trans-unit id="f1d270d856595d65238b888f07006bd1a30a5f8c" translate="yes" xml:space="preserve">
          <source>Implements &lt;a href=&quot;../stream/xmlresolver&quot;&gt;&lt;code&gt;XMLResolver&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../stream/xmlresolver&quot;&gt; &lt;code&gt;XMLResolver&lt;/code&gt; を&lt;/a&gt;実装します。</target>
        </trans-unit>
        <trans-unit id="ddbd6ccd580e849d089ad33405309e2013332735" translate="yes" xml:space="preserve">
          <source>Implements &lt;a href=&quot;../stream/xmlresolver&quot;&gt;&lt;code&gt;XMLResolver&lt;/code&gt;&lt;/a&gt;. For the purpose of resolving &lt;code&gt;publicId&lt;/code&gt; and &lt;code&gt;systemId&lt;/code&gt;, this method is equivalent to &lt;a href=&quot;#resolveEntity(java.lang.String,java.lang.String)&quot;&gt;&lt;code&gt;resolveEntity(java.lang.String, java.lang.String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../stream/xmlresolver&quot;&gt; &lt;code&gt;XMLResolver&lt;/code&gt; を&lt;/a&gt;実装します。 &lt;code&gt;publicId&lt;/code&gt; と &lt;code&gt;systemId&lt;/code&gt; を解決するために、このメソッドは&lt;a href=&quot;#resolveEntity(java.lang.String,java.lang.String)&quot;&gt; &lt;code&gt;resolveEntity(java.lang.String, java.lang.String)&lt;/code&gt; &lt;/a&gt;と同等です。</target>
        </trans-unit>
        <trans-unit id="8863098812e88b16cb4e5ec4c94cb23e73164a4a" translate="yes" xml:space="preserve">
          <source>Implements CharacterIterator.current() for String.</source>
          <target state="translated">String 用の CharacterIterator.current()をインプリメントします。</target>
        </trans-unit>
        <trans-unit id="38609ff217165cfd288c6a9112395629b53b1ba0" translate="yes" xml:space="preserve">
          <source>Implements CharacterIterator.first() for String.</source>
          <target state="translated">String 用の CharacterIterator.first()をインプリメントします。</target>
        </trans-unit>
        <trans-unit id="2061a474328a606288949699b4d01ead864c594e" translate="yes" xml:space="preserve">
          <source>Implements CharacterIterator.getBeginIndex() for String.</source>
          <target state="translated">String 用の CharacterIterator.getBeginIndex()をインプリメントします。</target>
        </trans-unit>
        <trans-unit id="f3e0d313072ecadecf8f42575d03f852e7618f30" translate="yes" xml:space="preserve">
          <source>Implements CharacterIterator.getEndIndex() for String.</source>
          <target state="translated">String 用の CharacterIterator.getEndIndex()をインプリメントします。</target>
        </trans-unit>
        <trans-unit id="37d2fcb4f6e906f747d683461fcc4508ccb0e9f3" translate="yes" xml:space="preserve">
          <source>Implements CharacterIterator.getIndex() for String.</source>
          <target state="translated">String 用の CharacterIterator.getIndex()をインプリメントします。</target>
        </trans-unit>
        <trans-unit id="e6267a8f45083745718daf081f7ae536fff0541e" translate="yes" xml:space="preserve">
          <source>Implements CharacterIterator.last() for String.</source>
          <target state="translated">String 用の CharacterIterator.last()をインプリメントします。</target>
        </trans-unit>
        <trans-unit id="9ca927fd2f3bfbd655d908c44ae43b9f811f2ea5" translate="yes" xml:space="preserve">
          <source>Implements CharacterIterator.next() for String.</source>
          <target state="translated">String 用の CharacterIterator.next()をインプリメントします。</target>
        </trans-unit>
        <trans-unit id="6fa220d3128cac8bac5353ff3943c263da81da91" translate="yes" xml:space="preserve">
          <source>Implements CharacterIterator.previous() for String.</source>
          <target state="translated">String 用の CharacterIterator.previous()をインプリメントします。</target>
        </trans-unit>
        <trans-unit id="4ad2159627bb0908caad3b333ea29cbd16bf1140" translate="yes" xml:space="preserve">
          <source>Implements CharacterIterator.setIndex() for String.</source>
          <target state="translated">String 用の CharacterIterator.setIndex()をインプリメントします。</target>
        </trans-unit>
        <trans-unit id="d7d801a17ff9284b9b5a555fad45b98ca0144a28" translate="yes" xml:space="preserve">
          <source>Implements URIResolver.</source>
          <target state="translated">URIResolverをインプリメントします。</target>
        </trans-unit>
        <trans-unit id="318cd35cc48f383eeda6d6fd1b9667781c2143fe" translate="yes" xml:space="preserve">
          <source>Implements URIResolver. The method searches through the catalog entries in the main and alternative catalogs to attempt to find a match with the specified &lt;code&gt;href&lt;/code&gt; attribute. The &lt;code&gt;href&lt;/code&gt; attribute will be used literally, with no attempt to be made absolute to the &lt;code&gt;base&lt;/code&gt;.</source>
          <target state="translated">URIResolverを実装します。このメソッドは、メインカタログと代替カタログのカタログエントリを検索して、指定された &lt;code&gt;href&lt;/code&gt; 属性と一致するものを見つけようとします。 &lt;code&gt;href&lt;/code&gt; 属性は絶対作らすべき試みで、文字通り使用される &lt;code&gt;base&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="31c4b09be804aaf138edc0afa59e53f472c6e688" translate="yes" xml:space="preserve">
          <source>Implements View interface for a simple multi-line text view that has text in one font and color.</source>
          <target state="translated">1つのフォントと色でテキストを表示するシンプルな複数行テキストビューのためのビューインターフェイスを実装します。</target>
        </trans-unit>
        <trans-unit id="fb2809aa78c909534686dfa4a5a387ba869c24e6" translate="yes" xml:space="preserve">
          <source>Implements View interface for a simple multi-line text view that has text in one font and color. The view represents each child element as a line of text.</source>
          <target state="translated">1つのフォントと色でテキストを表示するシンプルな複数行テキストビューのためのビューインターフェイスを実装します。このビューは、各子要素をテキストの行として表現します。</target>
        </trans-unit>
        <trans-unit id="bb36a4fb29616c43d77d4ae60696878082fa8f31" translate="yes" xml:space="preserve">
          <source>Implements View interface for a table, that is composed of an element structure where the child elements of the element this view is responsible for represent rows and the child elements of the row elements are cells.</source>
          <target state="translated">このビューが担当する要素の子要素が行を表し、行要素の子要素がセルを表す要素構造で構成されるテーブルのビューインタフェースを実装します。</target>
        </trans-unit>
        <trans-unit id="16821c6318c86c959d397b02a216025ffa6f1bdf" translate="yes" xml:space="preserve">
          <source>Implements View interface for a table, that is composed of an element structure where the child elements of the element this view is responsible for represent rows and the child elements of the row elements are cells. The cell elements can have an arbitrary element structure under them, which will be built with the ViewFactory returned by the getViewFactory method.</source>
          <target state="translated">このビューが担当する要素の子要素が行を表し、行要素の子要素がセルである要素構造から構成されるテーブル用のビューインタフェースをインプリメントします。セル要素はその下に任意の要素構造を持つことができ、getViewFactoryメソッドで返されるViewFactoryで構築されます。</target>
        </trans-unit>
        <trans-unit id="93d7b85b84f5df6147819e746f11ca13dcd596e9" translate="yes" xml:space="preserve">
          <source>Implements W3C XML Schema Part 2, Section 3.2.7.3 (A).</source>
          <target state="translated">W3C XML Schema Part 2,Section 3.2.7.3 (A)を実装する。</target>
        </trans-unit>
        <trans-unit id="4ed37c520c0b09ffc1b4b1e2621ae8fa8595db68" translate="yes" xml:space="preserve">
          <source>Implements a View suitable for use in JPasswordField UI implementations.</source>
          <target state="translated">JPasswordFieldのUI実装で使用するのに適したビューをインプリメントします。</target>
        </trans-unit>
        <trans-unit id="067b74bffa3943fb1bb2edc38d7679a72dfb5897" translate="yes" xml:space="preserve">
          <source>Implements a View suitable for use in JPasswordField UI implementations. This is basically a field ui that renders its contents as the echo character specified in the associated component (if it can narrow the component to a JPasswordField).</source>
          <target state="translated">JPasswordFieldのUI実装で使用するのに適したViewを実装します。これは基本的には、関連するコンポーネントで指定されたエコー文字としてその内容をレンダリングするフィールドUIです(コンポーネントをJPasswordFieldに絞ることができれば)。</target>
        </trans-unit>
        <trans-unit id="122506fa9d8f19a72b209a6463f3c3f6806b913f" translate="yes" xml:space="preserve">
          <source>Implements a composite element that contains other elements.</source>
          <target state="translated">他の要素を含む複合要素をインプリメントします。</target>
        </trans-unit>
        <trans-unit id="eb77268cf31c9d1b7065ac4f346f0f4f62633aa5" translate="yes" xml:space="preserve">
          <source>Implements a non-terminal append-and-replace step.</source>
          <target state="translated">終端ではない追加・置換ステップをインプリメントします。</target>
        </trans-unit>
        <trans-unit id="8fc7388752bff5a1959372aa839600a88a0d6560" translate="yes" xml:space="preserve">
          <source>Implements a terminal append-and-replace step.</source>
          <target state="translated">ターミナルの追加・置換ステップを実装します。</target>
        </trans-unit>
        <trans-unit id="a4195097f3d067f532df1fff9627a92a21d4eb32" translate="yes" xml:space="preserve">
          <source>Implements absolute timed condition wait.</source>
          <target state="translated">絶対時間条件待ちをインプリメントします。</target>
        </trans-unit>
        <trans-unit id="65420a72d88c9de714dd31d95f63cbe8c1653bea" translate="yes" xml:space="preserve">
          <source>Implements an element that directly represents content of some kind.</source>
          <target state="translated">ある種のコンテンツを直接表現する要素を実装します。</target>
        </trans-unit>
        <trans-unit id="37c1e8dcf99a0f703b26aac24a1a89f9d4541abd" translate="yes" xml:space="preserve">
          <source>Implements an input stream filter for compressing data in the &quot;deflate&quot; compression format.</source>
          <target state="translated">deflate」圧縮形式でデータを圧縮するための入力ストリームフィルタを実装します。</target>
        </trans-unit>
        <trans-unit id="fb39bbcec1c774b4fba93fc21190a47bc5971af5" translate="yes" xml:space="preserve">
          <source>Implements an output stream filter for uncompressing data stored in the &quot;deflate&quot; compression format.</source>
          <target state="translated">deflate&quot; 圧縮形式で保存されたデータを解凍するための出力ストリームフィルタを実装します。</target>
        </trans-unit>
        <trans-unit id="9c43b35ae2a5e1c03476a63c25a2b6caa54dc356" translate="yes" xml:space="preserve">
          <source>Implements execution conventions for CountedCompleters.</source>
          <target state="translated">CountedCompletersの実行規約を実装します。</target>
        </trans-unit>
        <trans-unit id="551f1837817dc3b5cc8875eeb3c93a0ab8888206" translate="yes" xml:space="preserve">
          <source>Implements execution conventions for RecursiveActions.</source>
          <target state="translated">RecursiveActionsの実行規約を実装します。</target>
        </trans-unit>
        <trans-unit id="f0fdfaa1349a464aa045ad325a724296034d0863" translate="yes" xml:space="preserve">
          <source>Implements execution conventions for RecursiveTask.</source>
          <target state="translated">RecursiveTaskの実行規約を実装します。</target>
        </trans-unit>
        <trans-unit id="4cf0ccace084c50198d2ff61513b820d4b7ab184" translate="yes" xml:space="preserve">
          <source>Implements interruptible condition wait.</source>
          <target state="translated">割り込み条件待ちをインプリメントします。</target>
        </trans-unit>
        <trans-unit id="5ef5d897a19fb982809f56979cd95dfafbb96664" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;TableCellEditor&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;TableCellEditor&lt;/code&gt; インターフェイスを実装します。</target>
        </trans-unit>
        <trans-unit id="1614df85be305c9188349340b94e25e4e4c33b0d" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;TreeCellEditor&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;TreeCellEditor&lt;/code&gt; インターフェースを実装します。</target>
        </trans-unit>
        <trans-unit id="5a884e5830e3412fc3cf287954f6b32ab405511f" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;absolutePath&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#absolutePath()&quot;&gt;&lt;code&gt;Preferences.absolutePath()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#absolutePath()&quot;&gt; &lt;code&gt;Preferences.absolutePath()&lt;/code&gt; の&lt;/a&gt;仕様に従って &lt;code&gt;absolutePath&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="2303304616ae77f7756f510ceeff5058198c36af" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;absolutePath&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#absolutePath--&quot;&gt;&lt;code&gt;Preferences.absolutePath()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#absolutePath--&quot;&gt; &lt;code&gt;Preferences.absolutePath()&lt;/code&gt; の&lt;/a&gt;仕様に従って、 &lt;code&gt;absolutePath&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="497711fb7d3b95561f2fd887f3f3cff39b4d70b2" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;children&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#childrenNames()&quot;&gt;&lt;code&gt;Preferences.childrenNames()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#childrenNames()&quot;&gt; &lt;code&gt;Preferences.childrenNames()&lt;/code&gt; の&lt;/a&gt;仕様に従って &lt;code&gt;children&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="034f9deafba508d9af3bcf5b68973bd9dea1bd76" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;children&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#childrenNames--&quot;&gt;&lt;code&gt;Preferences.childrenNames()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#childrenNames--&quot;&gt; &lt;code&gt;Preferences.childrenNames()&lt;/code&gt; の&lt;/a&gt;仕様に従って、 &lt;code&gt;children&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="059e0498a51dfd4925cfb2b3102695e450c99c62" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;clear&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#clear()&quot;&gt;&lt;code&gt;Preferences.clear()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#clear()&quot;&gt; &lt;code&gt;Preferences.clear()&lt;/code&gt; の&lt;/a&gt;仕様に従って &lt;code&gt;clear&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="46cb2a81f204b4143be54da7ee4ce2b43a9f0e15" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;clear&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#clear--&quot;&gt;&lt;code&gt;Preferences.clear()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#clear--&quot;&gt; &lt;code&gt;Preferences.clear()&lt;/code&gt; の&lt;/a&gt;仕様に従って、 &lt;code&gt;clear&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="27384530e833319c1741f425fdd02affb746be4a" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;exportNode&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#exportNode(java.io.OutputStream)&quot;&gt;&lt;code&gt;Preferences.exportNode(OutputStream)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#exportNode(java.io.OutputStream)&quot;&gt; &lt;code&gt;Preferences.exportNode(OutputStream)&lt;/code&gt; の&lt;/a&gt;仕様 &lt;code&gt;exportNode&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="c5271f0b8def61c25744f1dd1f9a7a0866178042" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;exportNode&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#exportNode-java.io.OutputStream-&quot;&gt;&lt;code&gt;Preferences.exportNode(OutputStream)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#exportNode-java.io.OutputStream-&quot;&gt; &lt;code&gt;Preferences.exportNode(OutputStream)&lt;/code&gt; の&lt;/a&gt;仕様に従って、 &lt;code&gt;exportNode&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="98aad1f6a054ecea9742f417fa73cff7c9b09ac3" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;exportSubtree&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#exportSubtree(java.io.OutputStream)&quot;&gt;&lt;code&gt;Preferences.exportSubtree(OutputStream)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#exportSubtree(java.io.OutputStream)&quot;&gt; &lt;code&gt;Preferences.exportSubtree(OutputStream)&lt;/code&gt; の&lt;/a&gt;仕様 &lt;code&gt;exportSubtree&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="6992328892719c452810c6ca8560c959a91e93f4" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;exportSubtree&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#exportSubtree-java.io.OutputStream-&quot;&gt;&lt;code&gt;Preferences.exportSubtree(OutputStream)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#exportSubtree-java.io.OutputStream-&quot;&gt; &lt;code&gt;Preferences.exportSubtree(OutputStream)&lt;/code&gt; の&lt;/a&gt;仕様に従って、 &lt;code&gt;exportSubtree&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="f75a22f3a2ce6719749fb126229e20961cecf828" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;flush&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#flush()&quot;&gt;&lt;code&gt;Preferences.flush()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#flush()&quot;&gt; &lt;code&gt;Preferences.flush()&lt;/code&gt; の&lt;/a&gt;仕様に従って &lt;code&gt;flush&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="0bcf92c331b449f42058427c1857f88ad0cc933d" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;flush&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#flush--&quot;&gt;&lt;code&gt;Preferences.flush()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#flush--&quot;&gt; &lt;code&gt;Preferences.flush()&lt;/code&gt; の&lt;/a&gt;仕様に従って、 &lt;code&gt;flush&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="78015e2cb6a6572466b2f3107eadbeb75649f6f0" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;get&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#get(java.lang.String,java.lang.String)&quot;&gt;&lt;code&gt;Preferences.get(String,String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#get(java.lang.String,java.lang.String)&quot;&gt; &lt;code&gt;Preferences.get(String,String)&lt;/code&gt; &lt;/a&gt;仕様に従って &lt;code&gt;get&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="fd60f453d49bb8d7d210813e6ce68cc6bfb94562" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;get&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#get-java.lang.String-java.lang.String-&quot;&gt;&lt;code&gt;Preferences.get(String,String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#get-java.lang.String-java.lang.String-&quot;&gt; &lt;code&gt;Preferences.get(String,String)&lt;/code&gt; &lt;/a&gt;仕様に従って &lt;code&gt;get&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="ea353e66c1ac86790405e5ed097438b417b79346" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;getBoolean&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#getBoolean(java.lang.String,boolean)&quot;&gt;&lt;code&gt;Preferences.getBoolean(String,boolean)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#getBoolean(java.lang.String,boolean)&quot;&gt; &lt;code&gt;Preferences.getBoolean(String,boolean)&lt;/code&gt; &lt;/a&gt;仕様に従って &lt;code&gt;getBoolean&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="bb5155ae4fbbe6ae18c3ab26004b7eece250eb0f" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;getBoolean&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#getBoolean-java.lang.String-boolean-&quot;&gt;&lt;code&gt;Preferences.getBoolean(String,boolean)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#getBoolean-java.lang.String-boolean-&quot;&gt; &lt;code&gt;Preferences.getBoolean(String,boolean)&lt;/code&gt; &lt;/a&gt;仕様に従って &lt;code&gt;getBoolean&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="0b7fc840c8fcf629db0b7313f488ea98f77836eb" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;getByteArray&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#getByteArray(java.lang.String,byte%5B%5D)&quot;&gt;&lt;code&gt;Preferences.getByteArray(String,byte[])&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#getByteArray(java.lang.String,byte%5B%5D)&quot;&gt; &lt;code&gt;Preferences.getByteArray(String,byte[])&lt;/code&gt; &lt;/a&gt;の仕様 &lt;code&gt;getByteArray&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="f0b4007d76b02ecf996288a0c19ed712d960828e" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;getByteArray&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#getByteArray-java.lang.String-byte:A-&quot;&gt;&lt;code&gt;Preferences.getByteArray(String,byte[])&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#getByteArray-java.lang.String-byte:A-&quot;&gt; &lt;code&gt;Preferences.getByteArray(String,byte[])&lt;/code&gt; &lt;/a&gt;の仕様 &lt;code&gt;getByteArray&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="a44773ab8dcb04f9357998eb6b4f39e88e41394d" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;getDouble&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#getDouble(java.lang.String,double)&quot;&gt;&lt;code&gt;Preferences.getDouble(String,double)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#getDouble(java.lang.String,double)&quot;&gt; &lt;code&gt;Preferences.getDouble(String,double)&lt;/code&gt; &lt;/a&gt;仕様に従って &lt;code&gt;getDouble&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="e9e450fbaa690dcceaab8d53b8c3cbedb82f9d78" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;getDouble&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#getDouble-java.lang.String-double-&quot;&gt;&lt;code&gt;Preferences.getDouble(String,double)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#getDouble-java.lang.String-double-&quot;&gt; &lt;code&gt;Preferences.getDouble(String,double)&lt;/code&gt; &lt;/a&gt;仕様に従って &lt;code&gt;getDouble&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="4b1e5f933602798366ed31ec748973cb8f3739c0" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;getFloat&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#getFloat(java.lang.String,float)&quot;&gt;&lt;code&gt;Preferences.getFloat(String,float)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#getFloat(java.lang.String,float)&quot;&gt; &lt;code&gt;Preferences.getFloat(String,float)&lt;/code&gt; &lt;/a&gt;仕様に従って &lt;code&gt;getFloat&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="84b21b049297b5e1b111acffab81a95f30370f84" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;getFloat&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#getFloat-java.lang.String-float-&quot;&gt;&lt;code&gt;Preferences.getFloat(String,float)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#getFloat-java.lang.String-float-&quot;&gt; &lt;code&gt;Preferences.getFloat(String,float)&lt;/code&gt; &lt;/a&gt;仕様に従って &lt;code&gt;getFloat&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="b5f74f30c5422d8d952c57c972e6d8fc8639e2dc" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;getInt&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#getInt(java.lang.String,int)&quot;&gt;&lt;code&gt;Preferences.getInt(String,int)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#getInt(java.lang.String,int)&quot;&gt; &lt;code&gt;Preferences.getInt(String,int)&lt;/code&gt; &lt;/a&gt;仕様 &lt;code&gt;getInt&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="c274f814517f4670c893c66cb2bfa98eeab7e4bd" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;getInt&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#getInt-java.lang.String-int-&quot;&gt;&lt;code&gt;Preferences.getInt(String,int)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#getInt-java.lang.String-int-&quot;&gt; &lt;code&gt;Preferences.getInt(String,int)&lt;/code&gt; &lt;/a&gt;仕様 &lt;code&gt;getInt&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="f9716d025f1b0da02dcfcfcafecd8a4dc2e3ab9f" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;getLong&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#getLong(java.lang.String,long)&quot;&gt;&lt;code&gt;Preferences.getLong(String,long)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#getLong(java.lang.String,long)&quot;&gt; &lt;code&gt;Preferences.getLong(String,long)&lt;/code&gt; &lt;/a&gt;仕様に従って &lt;code&gt;getLong&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="1da387d0a91dd5384161de4e156bcc24ea6fbf17" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;getLong&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#getLong-java.lang.String-long-&quot;&gt;&lt;code&gt;Preferences.getLong(String,long)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#getLong-java.lang.String-long-&quot;&gt; &lt;code&gt;Preferences.getLong(String,long)&lt;/code&gt; &lt;/a&gt;仕様に従って &lt;code&gt;getLong&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="4eaa95ecc8b1c6d190deea16df5803f9a33f646f" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;isUserNode&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#isUserNode()&quot;&gt;&lt;code&gt;Preferences.isUserNode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#isUserNode()&quot;&gt; &lt;code&gt;Preferences.isUserNode()&lt;/code&gt; の&lt;/a&gt;仕様 &lt;code&gt;isUserNode&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="ea4fec525521819b707dbeac6d4f7ff72f03a4c2" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;isUserNode&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#isUserNode--&quot;&gt;&lt;code&gt;Preferences.isUserNode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#isUserNode--&quot;&gt; &lt;code&gt;Preferences.isUserNode()&lt;/code&gt; の&lt;/a&gt;仕様に従って、 &lt;code&gt;isUserNode&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="e5056bd26346ca8c414eb53534dd9265bec86009" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;keys&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#keys()&quot;&gt;&lt;code&gt;Preferences.keys()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#keys()&quot;&gt; &lt;code&gt;Preferences.keys()&lt;/code&gt; の&lt;/a&gt;仕様に従って &lt;code&gt;keys&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="dd3d33b98e343258fdc365b452fe2c54c3a57a8c" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;keys&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#keys--&quot;&gt;&lt;code&gt;Preferences.keys()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#keys--&quot;&gt; &lt;code&gt;Preferences.keys()&lt;/code&gt; の&lt;/a&gt;仕様に従って、 &lt;code&gt;keys&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="f5c94dffc44ba9a6355d9a0ae6ff61d2d2dd03f3" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;name&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#name()&quot;&gt;&lt;code&gt;Preferences.name()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#name()&quot;&gt; &lt;code&gt;Preferences.name()&lt;/code&gt; の&lt;/a&gt;仕様に従って &lt;code&gt;name&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="b8b350943fb40b138fd56f36c6dbef682a6322e1" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;name&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#name--&quot;&gt;&lt;code&gt;Preferences.name()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#name--&quot;&gt; &lt;code&gt;Preferences.name()&lt;/code&gt; の&lt;/a&gt;仕様に従って、 &lt;code&gt;name&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="e852153c5eb8ea699e3354d9551a6e43544dcd03" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;node&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#node(java.lang.String)&quot;&gt;&lt;code&gt;Preferences.node(String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#node(java.lang.String)&quot;&gt; &lt;code&gt;Preferences.node(String)&lt;/code&gt; の&lt;/a&gt;仕様に従って &lt;code&gt;node&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="0649c8cc433a5e7005ae22f20906c8b707b86e84" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;node&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#node-java.lang.String-&quot;&gt;&lt;code&gt;Preferences.node(String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#node-java.lang.String-&quot;&gt; &lt;code&gt;Preferences.node(String)&lt;/code&gt; の&lt;/a&gt;仕様に従って &lt;code&gt;node&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="721cd1cca821bc0d961d9aefe3bb96e48fb959bf" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;nodeExists&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#nodeExists(java.lang.String)&quot;&gt;&lt;code&gt;Preferences.nodeExists(String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#nodeExists(java.lang.String)&quot;&gt; &lt;code&gt;Preferences.nodeExists(String)&lt;/code&gt; の&lt;/a&gt;仕様 &lt;code&gt;nodeExists&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="e4aa7ebab34301da1cde7559e5697decfe5af827" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;nodeExists&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#nodeExists-java.lang.String-&quot;&gt;&lt;code&gt;Preferences.nodeExists(String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#nodeExists-java.lang.String-&quot;&gt; &lt;code&gt;Preferences.nodeExists(String)&lt;/code&gt; の&lt;/a&gt;仕様に従って、 &lt;code&gt;nodeExists&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="7e8f9fb1d98b5f9d794284d8ed809f6806b7c844" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;parent&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#parent()&quot;&gt;&lt;code&gt;Preferences.parent()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#parent()&quot;&gt; &lt;code&gt;Preferences.parent()&lt;/code&gt; の&lt;/a&gt;仕様に従って &lt;code&gt;parent&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="f4fe173b9d0a89ea7f1b5eba6be1698ca690f55e" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;parent&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#parent--&quot;&gt;&lt;code&gt;Preferences.parent()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#parent--&quot;&gt; &lt;code&gt;Preferences.parent()&lt;/code&gt; の&lt;/a&gt;仕様に従って、 &lt;code&gt;parent&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="9d809f3091f242364c316d9f4236b053d68715fb" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;put&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#put(java.lang.String,java.lang.String)&quot;&gt;&lt;code&gt;Preferences.put(String,String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#put(java.lang.String,java.lang.String)&quot;&gt; &lt;code&gt;Preferences.put(String,String)&lt;/code&gt; &lt;/a&gt;仕様に従って &lt;code&gt;put&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="56c5e61149b3eee9a14a2381738dfc70bccfc389" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;put&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#put-java.lang.String-java.lang.String-&quot;&gt;&lt;code&gt;Preferences.put(String,String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#put-java.lang.String-java.lang.String-&quot;&gt; &lt;code&gt;Preferences.put(String,String)&lt;/code&gt; &lt;/a&gt;仕様に従って、 &lt;code&gt;put&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="8f056c5d095a472be619608c64cedd250d13f1d7" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;putBoolean&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#putBoolean(java.lang.String,boolean)&quot;&gt;&lt;code&gt;Preferences.putBoolean(String,boolean)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#putBoolean(java.lang.String,boolean)&quot;&gt; &lt;code&gt;Preferences.putBoolean(String,boolean)&lt;/code&gt; &lt;/a&gt;仕様 &lt;code&gt;putBoolean&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="c964cfd9449cfba5f084d6eb883e09669a4711ef" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;putBoolean&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#putBoolean-java.lang.String-boolean-&quot;&gt;&lt;code&gt;Preferences.putBoolean(String,boolean)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#putBoolean-java.lang.String-boolean-&quot;&gt; &lt;code&gt;Preferences.putBoolean(String,boolean)&lt;/code&gt; &lt;/a&gt;仕様に従って、 &lt;code&gt;putBoolean&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="af75d3c130947f6453fb67efe7a6515eaa2f9eb7" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;putByteArray&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#putByteArray(java.lang.String,byte%5B%5D)&quot;&gt;&lt;code&gt;Preferences.putByteArray(String,byte[])&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#putByteArray(java.lang.String,byte%5B%5D)&quot;&gt; &lt;code&gt;Preferences.putByteArray(String,byte[])&lt;/code&gt; &lt;/a&gt;の仕様 &lt;code&gt;putByteArray&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="6dfb192ca6481e94bbe487fe93ad8e390c6a8ddf" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;putByteArray&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#putByteArray-java.lang.String-byte:A-&quot;&gt;&lt;code&gt;Preferences.putByteArray(String,byte[])&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#putByteArray-java.lang.String-byte:A-&quot;&gt; &lt;code&gt;Preferences.putByteArray(String,byte[])&lt;/code&gt; &lt;/a&gt;の仕様に従って、 &lt;code&gt;putByteArray&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="86f038d3dbcc6bf189a5c7d2b8d83b4055d9607e" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;putDouble&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#putDouble(java.lang.String,double)&quot;&gt;&lt;code&gt;Preferences.putDouble(String,double)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#putDouble(java.lang.String,double)&quot;&gt; &lt;code&gt;Preferences.putDouble(String,double)&lt;/code&gt; &lt;/a&gt;仕様 &lt;code&gt;putDouble&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="700b1f1d7618f6e22ebcf34385a559a63ca591ae" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;putDouble&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#putDouble-java.lang.String-double-&quot;&gt;&lt;code&gt;Preferences.putDouble(String,double)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#putDouble-java.lang.String-double-&quot;&gt; &lt;code&gt;Preferences.putDouble(String,double)&lt;/code&gt; &lt;/a&gt;仕様に従って、 &lt;code&gt;putDouble&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="d8603d94d3fb23a4921e68448f26bf91b23e2187" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;putFloat&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#putFloat(java.lang.String,float)&quot;&gt;&lt;code&gt;Preferences.putFloat(String,float)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#putFloat(java.lang.String,float)&quot;&gt; &lt;code&gt;Preferences.putFloat(String,float)&lt;/code&gt; &lt;/a&gt;仕様 &lt;code&gt;putFloat&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="80192947101c876eaade219b960719ce5fba52be" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;putFloat&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#putFloat-java.lang.String-float-&quot;&gt;&lt;code&gt;Preferences.putFloat(String,float)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#putFloat-java.lang.String-float-&quot;&gt; &lt;code&gt;Preferences.putFloat(String,float)&lt;/code&gt; &lt;/a&gt;仕様に従って、 &lt;code&gt;putFloat&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="c2a61e9f0bf4527abc6bd4ad38427bfcb330d4db" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;putInt&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#putInt(java.lang.String,int)&quot;&gt;&lt;code&gt;Preferences.putInt(String,int)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#putInt(java.lang.String,int)&quot;&gt; &lt;code&gt;Preferences.putInt(String,int)&lt;/code&gt; &lt;/a&gt;仕様 &lt;code&gt;putInt&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="4a885f79dd7082ca994a78ab5b9536740b01678f" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;putInt&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#putInt-java.lang.String-int-&quot;&gt;&lt;code&gt;Preferences.putInt(String,int)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#putInt-java.lang.String-int-&quot;&gt; &lt;code&gt;Preferences.putInt(String,int)&lt;/code&gt; &lt;/a&gt;仕様に従って、 &lt;code&gt;putInt&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="dfa859440e2acc402f4baa4bb6bfe19c14468b22" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;putLong&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#putLong(java.lang.String,long)&quot;&gt;&lt;code&gt;Preferences.putLong(String,long)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#putLong(java.lang.String,long)&quot;&gt; &lt;code&gt;Preferences.putLong(String,long)&lt;/code&gt; &lt;/a&gt;仕様 &lt;code&gt;putLong&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="95eb710c08c834586c53fc11e79b1b0c9ead4298" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;putLong&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#putLong-java.lang.String-long-&quot;&gt;&lt;code&gt;Preferences.putLong(String,long)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#putLong-java.lang.String-long-&quot;&gt; &lt;code&gt;Preferences.putLong(String,long)&lt;/code&gt; &lt;/a&gt;仕様に従って、 &lt;code&gt;putLong&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="1145d33fa13a92fc862f33552963cbefaf56a0dd" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;remove(String)&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#remove(java.lang.String)&quot;&gt;&lt;code&gt;Preferences.remove(String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#remove(java.lang.String)&quot;&gt; &lt;code&gt;Preferences.remove(String)&lt;/code&gt; の&lt;/a&gt;仕様に従って &lt;code&gt;remove(String)&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="b0b2653970946b64ed4ddaa3ebfdafe0eb71373a" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;remove(String)&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#remove-java.lang.String-&quot;&gt;&lt;code&gt;Preferences.remove(String)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#remove-java.lang.String-&quot;&gt; &lt;code&gt;Preferences.remove(String)&lt;/code&gt; の&lt;/a&gt;仕様に従って、 &lt;code&gt;remove(String)&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="f73d465ace07becf08f1ef90ce5d0fc36fd68877" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;removeNode()&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#removeNode()&quot;&gt;&lt;code&gt;Preferences.removeNode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#removeNode()&quot;&gt; &lt;code&gt;Preferences.removeNode()&lt;/code&gt; の&lt;/a&gt;仕様に従って &lt;code&gt;removeNode()&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="a9fc2ab6783e8c0ed4c3c6887838e051d6ead650" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;removeNode()&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#removeNode--&quot;&gt;&lt;code&gt;Preferences.removeNode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#removeNode--&quot;&gt; &lt;code&gt;Preferences.removeNode()&lt;/code&gt; の&lt;/a&gt;仕様に従って、 &lt;code&gt;removeNode()&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="4e514973362c210c6c0a45eabf33779bc4abe69e" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;sync&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#sync()&quot;&gt;&lt;code&gt;Preferences.sync()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#sync()&quot;&gt; &lt;code&gt;Preferences.sync()&lt;/code&gt; の&lt;/a&gt;仕様に従って &lt;code&gt;sync&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="0f50cf978662ba1a1c66109922a9ef7df030c0f8" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;sync&lt;/code&gt; method as per the specification in &lt;a href=&quot;preferences#sync--&quot;&gt;&lt;code&gt;Preferences.sync()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;preferences#sync--&quot;&gt; &lt;code&gt;Preferences.sync()&lt;/code&gt; の&lt;/a&gt;仕様に従って、 &lt;code&gt;sync&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="8070a9651a28f504d3ee606de0cb54a78c1a449a" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OutputStream&lt;/code&gt; の &lt;code&gt;write&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="eba7a76fb44749a7dc70c0178e32f86bfaaab0bb" translate="yes" xml:space="preserve">
          <source>Implements the &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;Writer&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Writer&lt;/code&gt; の &lt;code&gt;write&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="7345100c6205aaddd53c33150182817376407dd0" translate="yes" xml:space="preserve">
          <source>Implements the Highlighter interfaces.</source>
          <target state="translated">Highlightleer インターフェイスを実装します。</target>
        </trans-unit>
        <trans-unit id="713527e650aa1d514fc11e2fb72846d8adfaba95" translate="yes" xml:space="preserve">
          <source>Implements the Highlighter interfaces. Implements a simple highlight painter that renders in a solid color.</source>
          <target state="translated">ハイライターのインターフェイスを実装しています。ソリッドカラーでレンダリングするシンプルなハイライトペインターをインプリメントします。</target>
        </trans-unit>
        <trans-unit id="1df7d1f3a6612a7a78698f998e2369cabdbb3654" translate="yes" xml:space="preserve">
          <source>Implements the abstract &lt;code&gt;write&lt;/code&gt; method of &lt;code&gt;OutputStream&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OutputStream&lt;/code&gt; の抽象 &lt;code&gt;write&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="e84e5d2d6f3ad30c13bbffe6f10586dcbe14843b" translate="yes" xml:space="preserve">
          <source>Implements the abstract part of an element.</source>
          <target state="translated">要素の抽象部分をインプリメントします。</target>
        </trans-unit>
        <trans-unit id="55af899b56f29b0b6a4178b4545eb0b45c43ff18" translate="yes" xml:space="preserve">
          <source>Implements the abstract part of an element. By default elements support attributes by having a field that represents the immutable part of the current attribute set for the element. The element itself implements MutableAttributeSet which can be used to modify the set by fetching a new immutable set. The immutable sets are provided by the AttributeContext associated with the document.</source>
          <target state="translated">要素の抽象部分を実装します。デフォルトでは、要素は、要素の現在の属性セットの不変部分を表すフィールドを持つことで属性をサポートします。要素自体は MutableAttributeSet を実装しており、これは新しい不変セットを取得することでセットを変更するために使用することができます。不変セットは、ドキュメントに関連付けられたAttributeContextによって提供されます。</target>
        </trans-unit>
        <trans-unit id="ab32001571b15dd2de30bb6329e0837209226884" translate="yes" xml:space="preserve">
          <source>Implements the guard interface for a permission.</source>
          <target state="translated">パーミッションのためのガードインターフェースをインプリメントします。</target>
        </trans-unit>
        <trans-unit id="85dcc3ce4240cbda68572ddbcac72a94ce15863a" translate="yes" xml:space="preserve">
          <source>Implements the guard interface for a permission. The &lt;code&gt;SecurityManager.checkPermission&lt;/code&gt; method is called, passing this permission object as the permission to check. Returns silently if access is granted. Otherwise, throws a SecurityException.</source>
          <target state="translated">権限のガードインターフェイスを実装します。 &lt;code&gt;SecurityManager.checkPermission&lt;/code&gt; の方法をチェックする権限として、この権限オブジェクトを渡す、と呼ばれています。アクセスが許可されると、サイレントに戻ります。それ以外の場合は、SecurityExceptionをスローします。</target>
        </trans-unit>
        <trans-unit id="9c8baefff3346231902a3ebabd8df14c787b0f9b" translate="yes" xml:space="preserve">
          <source>Implements timed condition wait.</source>
          <target state="translated">時間条件待ちをインプリメントします。</target>
        </trans-unit>
        <trans-unit id="97bc4b1502ef7ea7fd18271c7831c9405cc5ea04" translate="yes" xml:space="preserve">
          <source>Implements uninterruptible condition wait.</source>
          <target state="translated">無停電状態での待ち時間をインプリメントします。</target>
        </trans-unit>
        <trans-unit id="dd92548143f247a24fedf6b61a62fa9529e2d435" translate="yes" xml:space="preserve">
          <source>Implicitly images are defined to provide color samples at integer coordinate locations. When images are rendered upright with no scaling onto a destination, the choice of which image pixels map to which device pixels is obvious and the samples at the integer coordinate locations in the image are transferred to the pixels at the corresponding integer locations on the device pixel grid one for one. When images are rendered in a scaled, rotated, or otherwise transformed coordinate system, then the mapping of device pixel coordinates back to the image can raise the question of what color sample to use for the continuous coordinates that lie between the integer locations of the provided image samples. Interpolation algorithms define functions which provide a color sample for any continuous coordinate in an image based on the color samples at the surrounding integer coordinates.</source>
          <target state="translated">暗黙のうちに画像は整数座標位置でのカラーサンプルを提供するように定義されています。画像が目的地への拡大縮小を行わずに直立してレンダリングされる場合には、どの画像ピクセルがどのデバイスピクセルにマッピングされるかは明らかで、画像内の整数座標位置のサンプルは、デバイスピクセルグリッド上の対応する整数位置のピクセルに1対1で転送されます。画像がスケーリング、回転、またはその他の変換された座標系でレンダリングされる場合、デバイスピクセル座標の画像へのマッピングは、提供された画像サンプルの整数位置の間にある連続座標にどの色サンプルを使用するかという問題を生じさせることができる。補間アルゴリズムは、周辺の整数座標におけるカラーサンプルに基づいて、画像内の任意の連続座標に対してカラーサンプルを提供する関数を定義しています。</target>
        </trans-unit>
        <trans-unit id="b87df961a9a5842e2e0bd58fed3cd0c357e92df5" translate="yes" xml:space="preserve">
          <source>Imports a node from another document to this document, without altering or removing the source node from the original document; this method creates a new copy of the source node.</source>
          <target state="translated">このメソッドは、元のドキュメントから元のノードを変更または削除することなく、別のドキュメントからこのドキュメントにノードをインポートします。</target>
        </trans-unit>
        <trans-unit id="e917c5488e98c0c27be507a69f948d4511aef81e" translate="yes" xml:space="preserve">
          <source>Imports a node from another document to this document, without altering or removing the source node from the original document; this method creates a new copy of the source node. The returned node has no parent; (&lt;code&gt;parentNode&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;).</source>
          <target state="translated">元のドキュメントからソースノードを変更または削除せずに、別のドキュメントからこのドキュメントにノードをインポートします。このメソッドは、ソースノードの新しいコピーを作成します。返されたノードには親がありません。（ &lt;code&gt;parentNode&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; です）。</target>
        </trans-unit>
        <trans-unit id="0c6ca8c58332c18473e39f6c0dc8388cdd462423" translate="yes" xml:space="preserve">
          <source>Imports a style sheet from &lt;code&gt;url&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; からスタイルシートをインポートします。</target>
        </trans-unit>
        <trans-unit id="c4ad0c0cd3e499422f46a1d9968702d23884ac58" translate="yes" xml:space="preserve">
          <source>Imports a style sheet from &lt;code&gt;url&lt;/code&gt;. The resulting rules are directly added to the receiver. If you do not want the rules to become part of the receiver, create a new StyleSheet and use addStyleSheet to link it in.</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; からスタイルシートをインポートします。結果のルールは、レシーバーに直接追加されます。ルールをレシーバーの一部にしたくない場合は、新しいスタイルシートを作成し、addStyleSheetを使用してリンクします。</target>
        </trans-unit>
        <trans-unit id="d8049e75e7deb9a5b855f06e7154ee44499587ef" translate="yes" xml:space="preserve">
          <source>Imports all of the preferences represented by the XML document on the specified input stream.</source>
          <target state="translated">指定された入力ストリーム上のXMLドキュメントで表現されるすべてのプリファレンスをインポートします。</target>
        </trans-unit>
        <trans-unit id="c71923291c8740cc76f9206ce1cdd5cb8964838b" translate="yes" xml:space="preserve">
          <source>Imports all of the preferences represented by the XML document on the specified input stream. The document may represent user preferences or system preferences. If it represents user preferences, the preferences will be imported into the calling user's preference tree (even if they originally came from a different user's preference tree). If any of the preferences described by the document inhabit preference nodes that do not exist, the nodes will be created.</source>
          <target state="translated">指定された入力ストリーム上のXMLドキュメントで表されるすべての環境設定をインポートします。ドキュメントは、ユーザの環境設定やシステムの環境設定を表すものです。ユーザの環境設定を表している場合は、その環境設定は呼び出し元のユーザの環境設定ツリーにインポートされます (元々は別のユーザの環境設定ツリーから来たものであったとしても)。ドキュメントで説明されている環境設定のいずれかが、存在しない環境設定ノードに存在する場合は、そのノードが作成されます。</target>
        </trans-unit>
        <trans-unit id="7a226069a9c2b9c733fa93be074ddc8ebc8389b5" translate="yes" xml:space="preserve">
          <source>Imports the parameters from &lt;code&gt;params&lt;/code&gt; and decodes them according to the specified decoding format.</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; からパラメータをインポートし、指定されたデコード形式に従ってデコードします。</target>
        </trans-unit>
        <trans-unit id="c3b5a559d458b855feabfd942350c4d64812e691" translate="yes" xml:space="preserve">
          <source>Imports the parameters from &lt;code&gt;params&lt;/code&gt; and decodes them according to the specified decoding format. If &lt;code&gt;format&lt;/code&gt; is null, the primary decoding format for parameters is used. The primary decoding format is ASN.1, if an ASN.1 specification for these parameters exists.</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; からパラメーターをインポートし、指定されたデコード形式に従ってデコードします。 &lt;code&gt;format&lt;/code&gt; がnullの場合、パラメーターのプライマリデコード形式が使用されます。これらのパラメーターのASN.1仕様が存在する場合、主なデコード形式はASN.1です。</target>
        </trans-unit>
        <trans-unit id="b9528a5169d705e997248664b82ddd257d316162" translate="yes" xml:space="preserve">
          <source>Imports the parameters from &lt;code&gt;params&lt;/code&gt; and decodes them according to the specified decoding scheme.</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; からパラメータをインポートし、指定されたデコードスキームに従ってそれらをデコードします。</target>
        </trans-unit>
        <trans-unit id="8daf910475ce86194cd83279397f2ce3ae7b465e" translate="yes" xml:space="preserve">
          <source>Imports the parameters from &lt;code&gt;params&lt;/code&gt; and decodes them according to the specified decoding scheme. If &lt;code&gt;format&lt;/code&gt; is null, the primary decoding format for parameters is used. The primary decoding format is ASN.1, if an ASN.1 specification for these parameters exists.</source>
          <target state="translated">&lt;code&gt;params&lt;/code&gt; からパラメータをインポートし、指定されたデコードスキームに従ってそれらをデコードします。 &lt;code&gt;format&lt;/code&gt; がnullの場合、パラメーターのプライマリデコード形式が使用されます。これらのパラメーターのASN.1仕様が存在する場合、主なデコード形式はASN.1です。</target>
        </trans-unit>
        <trans-unit id="22b4275a83eb032a3c18ec6f1903022b54365237" translate="yes" xml:space="preserve">
          <source>Imports the specified parameters and decodes them according to the primary decoding format for parameters.</source>
          <target state="translated">指定されたパラメータをインポートし、パラメータのプライマリデコード形式に従ってデコードします。</target>
        </trans-unit>
        <trans-unit id="9e1a8d9caf50a44dc7557cdf109bddec4a771f9e" translate="yes" xml:space="preserve">
          <source>Imports the specified parameters and decodes them according to the primary decoding format for parameters. The primary decoding format for parameters is ASN.1, if an ASN.1 specification for this type of parameters exists.</source>
          <target state="translated">指定されたパラメータをインポートし、パラメータのプライマリデコードフォーマットに従ってデコードします。このタイプのパラメータのASN.1仕様が存在する場合、パラメータのプライマリデコードフォーマットはASN.1です。</target>
        </trans-unit>
        <trans-unit id="5db680fa20839f2707dc803343b2a35951c109b1" translate="yes" xml:space="preserve">
          <source>Imposes each consecutive pair of print-stream pages upon front and back sides of consecutive media sheets, such that the orientation of each pair of print-stream pages on the medium would be correct for the reader as if for binding on the long edge.</source>
          <target state="translated">連続した媒体シートの表裏に連続した一対の印刷ストリームページを課すことにより、媒体上での印刷ストリームページの各対の向きが、長辺の綴じの場合と同様に、読み手にとって正しい方向になるようにする。</target>
        </trans-unit>
        <trans-unit id="4d2c0bf8d32601bc858999c087909fdfb54b33dc" translate="yes" xml:space="preserve">
          <source>Imposes each consecutive pair of print-stream pages upon front and back sides of consecutive media sheets, such that the orientation of each pair of print-stream pages on the medium would be correct for the reader as if for binding on the long edge. This imposition is also known as &quot;duplex&quot; (see &lt;a href=&quot;#DUPLEX&quot;&gt;&lt;code&gt;DUPLEX&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">連続するメディアシートの表側と裏側に連続する印刷ストリームページの各ペアを課し、メディア上の印刷ストリームページの各ペアの向きが、長辺で綴じる場合と同じようにリーダーにとって正しいようにします。この面付けは「デュプレックス」とも呼ばれます（&lt;a href=&quot;#DUPLEX&quot;&gt; &lt;code&gt;DUPLEX&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="ebb09cb4d38a6b66afe6af78e3d1ad2ebf60b9fe" translate="yes" xml:space="preserve">
          <source>Imposes each consecutive pair of print-stream pages upon front and back sides of consecutive media sheets, such that the orientation of each pair of print-stream pages on the medium would be correct for the reader as if for binding on the long edge. This imposition is also known as &quot;duplex&quot; (see &lt;a href=&quot;sides#DUPLEX&quot;&gt;&lt;code&gt;DUPLEX&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">メディア上の各印刷ストリームページのペアの向きが、長辺を綴じているかのようにリーダーにとって正しいように、連続するメディアシートの前面と裏面に各連続する印刷ストリームページのペアを課します。この面付けは「二重」としても知られています（&lt;a href=&quot;sides#DUPLEX&quot;&gt; &lt;code&gt;DUPLEX&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="1f05e8edf660348d6f25a6c7698a3fed9d42d663" translate="yes" xml:space="preserve">
          <source>Imposes each consecutive pair of print-stream pages upon front and back sides of consecutive media sheets, such that the orientation of each pair of print-stream pages on the medium would be correct for the reader as if for binding on the short edge.</source>
          <target state="translated">連続した媒体シートの表裏面に連続した一対の印刷ストリームページを課すことにより、媒体上の各印刷ストリームページの向きが、短辺の綴じの場合と同様に、読み手にとって正しい方向になるようにする。</target>
        </trans-unit>
        <trans-unit id="1aef01edddd4b2d9c074f505881ac04fe92598e9" translate="yes" xml:space="preserve">
          <source>Imposes each consecutive pair of print-stream pages upon front and back sides of consecutive media sheets, such that the orientation of each pair of print-stream pages on the medium would be correct for the reader as if for binding on the short edge. This imposition is also known as &quot;tumble&quot; (see &lt;a href=&quot;#TUMBLE&quot;&gt;&lt;code&gt;TUMBLE&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">連続するメディアシートの表側と裏側に連続する印刷ストリームページの各ペアを課し、メディア上の印刷ストリームページの各ペアの向きが、短辺で綴じる場合と同じようにリーダーにとって正しいようにします。この面付けは「タンブル」とも呼ばれます（&lt;a href=&quot;#TUMBLE&quot;&gt; &lt;code&gt;TUMBLE&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="54db18fccd287c2e1b6e20e055a1cdacd0a5564b" translate="yes" xml:space="preserve">
          <source>Imposes each consecutive pair of print-stream pages upon front and back sides of consecutive media sheets, such that the orientation of each pair of print-stream pages on the medium would be correct for the reader as if for binding on the short edge. This imposition is also known as &quot;tumble&quot; (see &lt;a href=&quot;sides#TUMBLE&quot;&gt;&lt;code&gt;TUMBLE&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">媒体上の各印刷ストリームページのペアの向きが、短辺をとじるかのようにリーダーにとって正しいように、連続する媒体シートの前面と裏面に各連続する印刷ストリームページのペアを課します。この面付けは「タンブル」としても知られています（&lt;a href=&quot;sides#TUMBLE&quot;&gt; &lt;code&gt;TUMBLE&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="d2be57fb742356053fcc2d4484541e57728aa6dd" translate="yes" xml:space="preserve">
          <source>Imposes each consecutive print-stream page upon the same side of consecutive media sheets.</source>
          <target state="translated">連続したメディアシートの同じ面に、連続した印刷ストリームの各ページを課す。</target>
        </trans-unit>
        <trans-unit id="cecfaf1a15b7081e3c047943c8dccba7e77b2633" translate="yes" xml:space="preserve">
          <source>In 2008, time-zone offsets around the world extended from -12:00 to +14:00. To prevent any problems with that range being extended, yet still provide validation, the range of offsets is restricted to -18:00 to 18:00 inclusive.</source>
          <target state="translated">2008年には、世界中の時間帯のオフセットが-12:00から+14:00まで拡張されました。この範囲が拡張されたことによる問題を防ぎつつ検証を提供するために、オフセットの範囲は-18:00から18:00までに制限されています。</target>
        </trans-unit>
        <trans-unit id="86389704bee7bc2f2d5910700581356c0e5689e9" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../format/resolverstyle#LENIENT&quot;&gt;lenient mode&lt;/a&gt;, only the week-based-year is validated against the range of valid values. If the day-of-week is outside the range 1 to 7, then the resulting date is adjusted by a suitable number of weeks to reduce the day-of-week to the range 1 to 7. If the week-of-week-based-year value is outside the range 1 to 52, then any excess weeks are added or subtracted from the resulting date.</source>
          <target state="translated">で&lt;a href=&quot;../format/resolverstyle#LENIENT&quot;&gt;緩いモードで&lt;/a&gt;、唯一の週ベース年には有効な値の範囲に対して検証されます。曜日が1から7の範囲外の場合、結果の日付は適切な週数で調整され、曜日を1から7の範囲に減らします。 based-yearの値が1から52の範囲外の場合、超過した週が結果の日付から加算または減算されます。</target>
        </trans-unit>
        <trans-unit id="f9e4a79de23768eb149fc2303c479b95439f491c" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../format/resolverstyle#LENIENT&quot;&gt;lenient mode&lt;/a&gt;, only the year is validated against the range of valid values. The resulting date is calculated equivalent to the following three stage approach. First, create a date on the first of January in the requested year. Then take the quarter-of-year, subtract one, and add the amount in quarters to the date. Finally, take the day-of-quarter, subtract one, and add the amount in days to the date.</source>
          <target state="translated">で&lt;a href=&quot;../format/resolverstyle#LENIENT&quot;&gt;緩いモードで&lt;/a&gt;、唯一の年は、有効な値の範囲に対して検証されます。結果の日付は、次の3段階のアプローチと同等に計算されます。まず、要求された年の1月1日に日付を作成します。次に、四半期を取り、1を引いて、四半期の金額を日付に追加します。最後に、四半期の日を取り、1を引いて、日付に日数を加算します。</target>
        </trans-unit>
        <trans-unit id="cd6ec172c1edc269b53c0583f46c3f095ab84cae" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../format/resolverstyle#LENIENT&quot;&gt;lenient mode&lt;/a&gt;, the year and day-of-week are validated against the range of valid values. The resulting date is calculated equivalent to the following four stage approach. First, create a date on the first day of the first week of January in the requested year. Then take the month-of-year, subtract one, and add the amount in months to the date. Then take the week-of-month, subtract one, and add the amount in weeks to the date. Finally, adjust to the correct day-of-week within the localized week.</source>
          <target state="translated">で&lt;a href=&quot;../format/resolverstyle#LENIENT&quot;&gt;緩いモード&lt;/a&gt;、年と曜日が有効な値の範囲に照らして検証されています。結果の日付は、次の4段階のアプローチと同等に計算されます。まず、要求された年の1月の第1週の最初の日に日付を作成します。次に、月を取り、1を引いて、日付に月単位の金額を追加します。次に、月の週を取り、1を引いて、週の量を日付に追加します。最後に、ローカライズされた週の正しい曜日に調整します。</target>
        </trans-unit>
        <trans-unit id="4e3729f6e6efd6616dbdd65aa7497b7c86a2f948" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../format/resolverstyle#LENIENT&quot;&gt;lenient mode&lt;/a&gt;, the year and day-of-week are validated against the range of valid values. The resulting date is calculated equivalent to the following three stage approach. First, create a date on the first day of the first week in the requested week-based-year. Then take the week-of-week-based-year, subtract one, and add the amount in weeks to the date. Finally, adjust to the correct day-of-week within the localized week.</source>
          <target state="translated">で&lt;a href=&quot;../format/resolverstyle#LENIENT&quot;&gt;緩いモード&lt;/a&gt;、年と曜日が有効な値の範囲に照らして検証されています。結果の日付は、次の3段階のアプローチと同等に計算されます。まず、要求された週ベースの年の最初の週の最初の日に日付を作成します。次に、週ベースの年を取り、1を引いて、日付に週単位の量を追加します。最後に、ローカライズされた週の正しい曜日に調整します。</target>
        </trans-unit>
        <trans-unit id="59cdf6f2f16e3f4bbc8085642ff9ed4c512d12dd" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../format/resolverstyle#LENIENT&quot;&gt;lenient mode&lt;/a&gt;, the year and day-of-week are validated against the range of valid values. The resulting date is calculated equivalent to the following three stage approach. First, create a date on the first day of the first week in the requested year. Then take the week-of-year, subtract one, and add the amount in weeks to the date. Finally, adjust to the correct day-of-week within the localized week.</source>
          <target state="translated">で&lt;a href=&quot;../format/resolverstyle#LENIENT&quot;&gt;緩いモード&lt;/a&gt;、年と曜日が有効な値の範囲に照らして検証されています。結果の日付は、次の3段階のアプローチと同等に計算されます。まず、要求された年の最初の週の最初の日に日付を作成します。次に、年の週を取り、1を引いて、週の量を日付に追加します。最後に、ローカライズされた週の正しい曜日に調整します。</target>
        </trans-unit>
        <trans-unit id="0fb07a317c3eaba0aff1f9dde717867e0b71ef5e" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../format/resolverstyle#SMART&quot;&gt;smart mode&lt;/a&gt;, all four fields are validated against their range of valid values. The week-of-month field is validated from 0 to 6, meaning that the resulting date can be in a different month to that specified.</source>
          <target state="translated">では&lt;a href=&quot;../format/resolverstyle#SMART&quot;&gt;、スマートモードで&lt;/a&gt;、4つのすべてのフィールドが有効な値のその範囲に対して検証されています。月の週フィールドは0から6まで検証され、結果の日付は指定された月と異なる月になる可能性があることを意味します。</target>
        </trans-unit>
        <trans-unit id="8e475c8cf450e0722c0f73724f68b49888b78026" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../format/resolverstyle#SMART&quot;&gt;smart mode&lt;/a&gt;, all three fields are validated against their range of valid values. The day-of-quarter field is validated between 1 and 92, ignoring the actual range based on the year and quarter. If the day-of-quarter exceeds the actual range by one day, then the resulting date is one day later. If the day-of-quarter exceeds the actual range by two days, then the resulting date is two days later.</source>
          <target state="translated">では&lt;a href=&quot;../format/resolverstyle#SMART&quot;&gt;、スマートモードで&lt;/a&gt;、すべての3つのフィールドが有効な値のその範囲に対して検証されています。四半期の日フィールドは、年と四半期に基づく実際の範囲を無視して、1から92の間で検証されます。四半期の日が実際の範囲を1日超える場合、結果の日付は1日後です。四半期の日が実際の範囲を2日超える場合、結果の日付は2日後です。</target>
        </trans-unit>
        <trans-unit id="48298e99d0fc04b4dade93a7fa8a98aa3f5d9136" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../format/resolverstyle#SMART&quot;&gt;smart mode&lt;/a&gt;, all three fields are validated against their range of valid values. The week-of-week-based-year field is validated between 1 and 53, ignoring the week-based-year. If the week-of-week-based-year is 53, but the week-based-year only has 52 weeks, then the resulting date is in week 1 of the following week-based-year.</source>
          <target state="translated">では&lt;a href=&quot;../format/resolverstyle#SMART&quot;&gt;、スマートモードで&lt;/a&gt;、すべての3つのフィールドが有効な値のその範囲に対して検証されています。週ベースの年フィールドは、週ベースの年を無視して、1から53の間で検証されます。週ベースの年が53で、週ベースの年が52週しかない場合、結果の日付は次の週ベースの年の第1週になります。</target>
        </trans-unit>
        <trans-unit id="78349302167faa6d7a2aed1df47448ca5048b25d" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../format/resolverstyle#SMART&quot;&gt;smart mode&lt;/a&gt;, all three fields are validated against their range of valid values. The week-of-week-based-year field is validated from 1 to 53, meaning that the resulting date can be in the following week-based-year to that specified.</source>
          <target state="translated">では&lt;a href=&quot;../format/resolverstyle#SMART&quot;&gt;、スマートモードで&lt;/a&gt;、すべての3つのフィールドが有効な値のその範囲に対して検証されています。週ベースの年フィールドは、1から53まで検証されます。つまり、結果の日付は、指定された週ベースの次の週ベースの年になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f232305a5c1e15ea107e37a90c2ece7913724549" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../format/resolverstyle#SMART&quot;&gt;smart mode&lt;/a&gt;, all three fields are validated against their range of valid values. The week-of-year field is validated from 0 to 54, meaning that the resulting date can be in a different year to that specified.</source>
          <target state="translated">では&lt;a href=&quot;../format/resolverstyle#SMART&quot;&gt;、スマートモードで&lt;/a&gt;、すべての3つのフィールドが有効な値のその範囲に対して検証されています。年の週フィールドは0から54まで検証されます。つまり、結果の日付は指定した年とは異なる年になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="92aff29473ae74aa918cfecc94d38303412532e6" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../format/resolverstyle#STRICT&quot;&gt;strict mode&lt;/a&gt;, all four fields are validated against their range of valid values. The week-of-month field is validated to ensure that the resulting month is the month requested.</source>
          <target state="translated">で&lt;a href=&quot;../format/resolverstyle#STRICT&quot;&gt;strictモード&lt;/a&gt;、4つのすべてのフィールドが有効な値のその範囲に対して検証されています。毎週のフィールドは、結果の月が要求された月であることを確認するために検証されます。</target>
        </trans-unit>
        <trans-unit id="0f0e202932cebbe8a155bd934de772f0860489c8" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../format/resolverstyle#STRICT&quot;&gt;strict mode&lt;/a&gt;, all three fields are validated against their range of valid values. The day-of-quarter field is validated from 1 to 90, 91 or 92 depending on the year and quarter.</source>
          <target state="translated">で&lt;a href=&quot;../format/resolverstyle#STRICT&quot;&gt;strictモード&lt;/a&gt;、3つのすべてのフィールドが有効な値のその範囲に対して検証されています。四半期の日フィールドは、年と四半期に応じて、1から90、91、または92まで検証されます。</target>
        </trans-unit>
        <trans-unit id="61038d4b8c7da66e5b7168e9d72153f9f95dd9b8" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../format/resolverstyle#STRICT&quot;&gt;strict mode&lt;/a&gt;, all three fields are validated against their range of valid values. The week-of-week-based-year field is validated from 1 to 52 or 53 depending on the week-based-year.</source>
          <target state="translated">で&lt;a href=&quot;../format/resolverstyle#STRICT&quot;&gt;strictモード&lt;/a&gt;、3つのすべてのフィールドが有効な値のその範囲に対して検証されています。週ベースの年フィールドは、週ベースの年に応じて、1から52または53まで検証されます。</target>
        </trans-unit>
        <trans-unit id="6c209b717e4718fb111069dea4a3876d7d3d886e" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../format/resolverstyle#STRICT&quot;&gt;strict mode&lt;/a&gt;, all three fields are validated against their range of valid values. The week-of-year field is validated to ensure that the resulting week-based-year is the week-based-year requested.</source>
          <target state="translated">で&lt;a href=&quot;../format/resolverstyle#STRICT&quot;&gt;strictモード&lt;/a&gt;、3つのすべてのフィールドが有効な値のその範囲に対して検証されています。年の週フィールドは、結果の週ベースの年が要求された週ベースの年であることを確認するために検証されます。</target>
        </trans-unit>
        <trans-unit id="0e3442bcb8b50ab377f46533d2cb10831695feee" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;../format/resolverstyle#STRICT&quot;&gt;strict mode&lt;/a&gt;, all three fields are validated against their range of valid values. The week-of-year field is validated to ensure that the resulting year is the year requested.</source>
          <target state="translated">で&lt;a href=&quot;../format/resolverstyle#STRICT&quot;&gt;strictモード&lt;/a&gt;、3つのすべてのフィールドが有効な値のその範囲に対して検証されています。週のフィールドは、結果の年が要求された年であることを確認するために検証されます。</target>
        </trans-unit>
        <trans-unit id="94d0612798926c7af8d39f4a4589255d75a064c6" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;threadpoolexecutor.callerrunspolicy&quot;&gt;&lt;code&gt;ThreadPoolExecutor.CallerRunsPolicy&lt;/code&gt;&lt;/a&gt;, the thread that invokes &lt;code&gt;execute&lt;/code&gt; itself runs the task. This provides a simple feedback control mechanism that will slow down the rate that new tasks are submitted.</source>
          <target state="translated">で&lt;a href=&quot;threadpoolexecutor.callerrunspolicy&quot;&gt; &lt;code&gt;ThreadPoolExecutor.CallerRunsPolicy&lt;/code&gt; &lt;/a&gt;、呼び出すが、そのスレッド &lt;code&gt;execute&lt;/code&gt; 自体は、タスクを実行します。これにより、新しいタスクが送信される速度を遅くする単純なフィードバック制御メカニズムが提供されます。</target>
        </trans-unit>
        <trans-unit id="cb2aef34e8541d620db480296296a5005b0d8ebb" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;threadpoolexecutor.discardoldestpolicy&quot;&gt;&lt;code&gt;ThreadPoolExecutor.DiscardOldestPolicy&lt;/code&gt;&lt;/a&gt;, if the executor is not shut down, the task at the head of the work queue is dropped, and then execution is retried (which can fail again, causing this to be repeated.)</source>
          <target state="translated">では&lt;a href=&quot;threadpoolexecutor.discardoldestpolicy&quot;&gt; &lt;code&gt;ThreadPoolExecutor.DiscardOldestPolicy&lt;/code&gt; &lt;/a&gt; executorがシャットダウンされていない場合は、作業キューの先頭のタスクは破棄され、その後、実行が再試行され（これが繰り返されることを引き起こし、再び失敗する可能性があります。）</target>
        </trans-unit>
        <trans-unit id="c8f191d695cda03baf1111a2194130a680c23105" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;threadpoolexecutor.discardpolicy&quot;&gt;&lt;code&gt;ThreadPoolExecutor.DiscardPolicy&lt;/code&gt;&lt;/a&gt;, a task that cannot be executed is simply dropped.</source>
          <target state="translated">で&lt;a href=&quot;threadpoolexecutor.discardpolicy&quot;&gt; &lt;code&gt;ThreadPoolExecutor.DiscardPolicy&lt;/code&gt; &lt;/a&gt;、実行できないタスクが単に削除されます。</target>
        </trans-unit>
        <trans-unit id="6a15117b6493b903456265f081034d8302acd07d" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;HORIZONTAL_WRAP&lt;/code&gt; and &lt;code&gt;VERTICAL_WRAP&lt;/code&gt; orientations:</source>
          <target state="translated">で &lt;code&gt;HORIZONTAL_WRAP&lt;/code&gt; と &lt;code&gt;VERTICAL_WRAP&lt;/code&gt; 方向：</target>
        </trans-unit>
        <trans-unit id="657094c86ed548da67d27b0e04ccf6a2d6ee6e00" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;PrintMode.NORMAL&lt;/code&gt; when a column is too wide to fit in the printable area -- print the center portion of the column and leave the left and right borders off the table.</source>
          <target state="translated">で &lt;code&gt;PrintMode.NORMAL&lt;/code&gt; 列の中央部を印刷し、テーブルから左と右の境界線を残す-カラムには、印刷可能領域に合わせて広すぎるとき。</target>
        </trans-unit>
        <trans-unit id="77ab4acd6e3939d9de1d113380fbf9c5a2f82c8c" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;SINGLE_INTERVAL_SELECTION&lt;/code&gt; selection mode, if the removal would produce two disjoint selections, the removal is extended through the greater end of the selection. For example, if the selection is &lt;code&gt;0-10&lt;/code&gt; and you supply indices &lt;code&gt;5,6&lt;/code&gt; (in any order) the resulting selection is &lt;code&gt;0-4&lt;/code&gt;.</source>
          <target state="translated">で &lt;code&gt;SINGLE_INTERVAL_SELECTION&lt;/code&gt; の除去は、2つの互いに素の選択を生成する場合に選択モード、除去は選択のより大きな端部を通って延長されます。例えば、選択があれば &lt;code&gt;0-10&lt;/code&gt; あなたがインデックス供給する &lt;code&gt;5,6&lt;/code&gt; を（任意の順序で）得られた選択である &lt;code&gt;0-4&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aece51993e01377983c7d1ade636af0247e43c89" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;SINGLE_SELECTION&lt;/code&gt; selection mode, only the second index is used.</source>
          <target state="translated">で &lt;code&gt;SINGLE_SELECTION&lt;/code&gt; の選択モード、第2のインデックスのみが使用されます。</target>
        </trans-unit>
        <trans-unit id="d06087fed3dfc62f5a68adee13608ed1d4cf33b1" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;SINGLE_SELECTION&lt;/code&gt; selection mode, this is equivalent to calling &lt;code&gt;setSelectionInterval&lt;/code&gt;, and only the second index is used. In &lt;code&gt;SINGLE_INTERVAL_SELECTION&lt;/code&gt; selection mode, this method behaves like &lt;code&gt;setSelectionInterval&lt;/code&gt;, unless the given interval is immediately adjacent to or overlaps the existing selection, and can therefore be used to grow it.</source>
          <target state="translated">で &lt;code&gt;SINGLE_SELECTION&lt;/code&gt; の選択モード、これは呼び出すのと同じです &lt;code&gt;setSelectionInterval&lt;/code&gt; メソッドを、そして唯一の2番目のインデックスが使用されています。で &lt;code&gt;SINGLE_INTERVAL_SELECTION&lt;/code&gt; の選択モード、のようなこの方法の挙動 &lt;code&gt;setSelectionInterval&lt;/code&gt; メソッドは、指定された間隔がない限りにすぐ隣接しているか、または既存の選択をオーバーラップし、したがって、それを成長させるために使用することができます。</target>
        </trans-unit>
        <trans-unit id="df3c016e449ce26f1586e36d7017736782ea197d" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;SINGLE_SELECTION&lt;/code&gt; selection mode, this is equivalent to calling &lt;code&gt;setSelectionInterval&lt;/code&gt;, and only the second index is used. In &lt;code&gt;SINGLE_INTERVAL_SELECTION&lt;/code&gt; selection mode, this method behaves like &lt;code&gt;setSelectionInterval&lt;/code&gt;, unless the given interval is immediately adjacent to or overlaps the existing selection, and can therefore be used to grow the selection.</source>
          <target state="translated">で &lt;code&gt;SINGLE_SELECTION&lt;/code&gt; の選択モード、これは呼び出すのと同じです &lt;code&gt;setSelectionInterval&lt;/code&gt; メソッドを、そして唯一の2番目のインデックスが使用されています。で &lt;code&gt;SINGLE_INTERVAL_SELECTION&lt;/code&gt; の選択モード、のようなこの方法の挙動 &lt;code&gt;setSelectionInterval&lt;/code&gt; メソッドは、指定された間隔がない限りにすぐ隣接しているか、または既存の選択をオーバーラップし、したがって選択を成長させるために使用することができます。</target>
        </trans-unit>
        <trans-unit id="a254052d2946ad1ebd808cc9b17d1d7fc3e2c385" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;VERTICAL&lt;/code&gt; orientation:</source>
          <target state="translated">で &lt;code&gt;VERTICAL&lt;/code&gt; オリエンテーション：</target>
        </trans-unit>
        <trans-unit id="0564ee6a70dbf13f614fae05c50df5afc450037f" translate="yes" xml:space="preserve">
          <source>In Beans 1.0 the given name can indicate either a serialized object or a class. Other mechanisms may be added in the future. In beans 1.0 we first try to treat the beanName as a serialized object name then as a class name.</source>
          <target state="translated">Beans 1.0では、与えられた名前はシリアル化されたオブジェクトかクラスのどちらかを示すことができます。将来的には他のメカニズムが追加されるかもしれません。Bean 1.0 では、まず beanName をシリアライズされたオブジェクト名として扱い、次にクラス名として扱おうとしています。</target>
        </trans-unit>
        <trans-unit id="042c75bc8038a7bfe93454be2f4ccc7544315dc7" translate="yes" xml:space="preserve">
          <source>In InetAddress and Inet6Address, it is used for internal representation; it has no functional role. Java will never return an IPv4-mapped address. These classes can take an IPv4-mapped address as input, both in byte array and text representation. However, it will be converted into an IPv4 address.</source>
          <target state="translated">InetAddressおよびInet6Addressでは、内部表現に使用され、機能的な役割はありません。JavaがIPv4にマップされたアドレスを返すことはありません。これらのクラスは、バイト配列でもテキスト表現でも、IPv4にマップされたアドレスを入力として受け取ることができます。ただし、IPv4アドレスに変換されます。</target>
        </trans-unit>
        <trans-unit id="014f1fa7c567eb71497930106403f0d11979f4bc" translate="yes" xml:space="preserve">
          <source>In JNDI, all naming and directory operations are performed relative to a context. There are no absolute roots. Therefore JNDI defines an &lt;em&gt;initial context&lt;/em&gt;, &lt;code&gt;InitialContext&lt;/code&gt;, which provides a starting point for naming and directory operations. Once you have an initial context, you can use it to look up other contexts and objects.</source>
          <target state="translated">JNDIでは、すべてのネーミングおよびディレクトリ操作は、コンテキストに関連して実行されます。絶対的なルーツはありません。したがって、JNDIを定義&lt;em&gt;初期コンテキスト&lt;/em&gt;、 &lt;code&gt;InitialContext&lt;/code&gt; のネーミングおよびディレクトリ操作のための出発点を提供します。初期コンテキストを取得したら、それを使用して他のコンテキストやオブジェクトを検索できます。</target>
        </trans-unit>
        <trans-unit id="79426411ad6360c359271abac5b6331b8b48b7e0" translate="yes" xml:space="preserve">
          <source>In Java Sound, &lt;code&gt;MidiEvent&lt;/code&gt; objects are typically contained in a &lt;a href=&quot;track&quot;&gt;&lt;code&gt;Track&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;Tracks&lt;/code&gt; are likewise contained in a &lt;code&gt;Sequence&lt;/code&gt;.</source>
          <target state="translated">Java Soundでは、 &lt;code&gt;MidiEvent&lt;/code&gt; オブジェクトは通常&lt;a href=&quot;track&quot;&gt; &lt;code&gt;Track&lt;/code&gt; &lt;/a&gt;に含まれ、 &lt;code&gt;Tracks&lt;/code&gt; も同様に &lt;code&gt;Sequence&lt;/code&gt; に含まれます。</target>
        </trans-unit>
        <trans-unit id="13209128b680b3afe374b6116423184d3647e46c" translate="yes" xml:space="preserve">
          <source>In Java Sound, &lt;code&gt;MidiEvent&lt;/code&gt; objects are typically contained in a &lt;code&gt;&lt;a href=&quot;track&quot;&gt;&lt;code&gt;Track&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;Tracks&lt;/code&gt; are likewise contained in a &lt;code&gt;Sequence&lt;/code&gt;.</source>
          <target state="translated">Java Soundでは、 &lt;code&gt;MidiEvent&lt;/code&gt; オブジェクトは通常 &lt;code&gt;&lt;a href=&quot;track&quot;&gt;&lt;code&gt;Track&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; に含まれ、 &lt;code&gt;Tracks&lt;/code&gt; も同様に &lt;code&gt;Sequence&lt;/code&gt; に含まれます。</target>
        </trans-unit>
        <trans-unit id="fe5a504b5bd5d313a777bae81479bb507e440e57" translate="yes" xml:space="preserve">
          <source>In Java Sound, however, a &lt;code&gt;Synthesizer&lt;/code&gt; class can expose the contents of its voices through its &lt;a href=&quot;synthesizer#getVoiceStatus()&quot;&gt;&lt;code&gt;getVoiceStatus()&lt;/code&gt;&lt;/a&gt; method. This behavior is recommended but optional; synthesizers that don't expose their voice allocation simply return a zero-length array. A &lt;code&gt;Synthesizer&lt;/code&gt; that does report its voice status should maintain this information at all times for all of its voices, whether they are currently sounding or not. In other words, a given type of &lt;code&gt;Synthesizer&lt;/code&gt; always has a fixed number of voices, equal to the maximum number of simultaneous notes it is capable of sounding.</source>
          <target state="translated">ただし、Java Soundでは、 &lt;code&gt;Synthesizer&lt;/code&gt; クラスは&lt;a href=&quot;synthesizer#getVoiceStatus()&quot;&gt; &lt;code&gt;getVoiceStatus()&lt;/code&gt; &lt;/a&gt;メソッドを介して音声のコンテンツを公開できます。この動作は推奨されますが、オプションです。音声割り当てを公開しないシンセサイザーは、長さがゼロの配列を返すだけです。音声ステータスを報告する &lt;code&gt;Synthesizer&lt;/code&gt; は、現在鳴っていてもいなくても、すべての音声についてこの情報を常に維持する必要があります。言い換えると、特定のタイプの &lt;code&gt;Synthesizer&lt;/code&gt; 常に固定数のボイスがあり、それはそれが鳴らすことができる同時ノートの最大数に等しくなります。</target>
        </trans-unit>
        <trans-unit id="98331511b3ce4c496aa8e2ac58efd2c1a6a50995" translate="yes" xml:space="preserve">
          <source>In Java Sound, however, a &lt;code&gt;Synthesizer&lt;/code&gt; class can expose the contents of its voices through its &lt;a href=&quot;synthesizer#getVoiceStatus--&quot;&gt;&lt;code&gt;getVoiceStatus()&lt;/code&gt;&lt;/a&gt; method. This behavior is recommended but optional; synthesizers that don't expose their voice allocation simply return a zero-length array. A &lt;code&gt;Synthesizer&lt;/code&gt; that does report its voice status should maintain this information at all times for all of its voices, whether they are currently sounding or not. In other words, a given type of &lt;code&gt;Synthesizer&lt;/code&gt; always has a fixed number of voices, equal to the maximum number of simultaneous notes it is capable of sounding.</source>
          <target state="translated">ただし、Java Soundでは、 &lt;code&gt;Synthesizer&lt;/code&gt; クラスは、&lt;a href=&quot;synthesizer#getVoiceStatus--&quot;&gt; &lt;code&gt;getVoiceStatus()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、その音声の内容を公開できます。この動作は推奨されていますが、オプションです。音声割り当てを公開しないシンセサイザは、長さがゼロの配列を返すだけです。音声ステータスを報告する &lt;code&gt;Synthesizer&lt;/code&gt; は、現在音声が出ているかどうかに関係なく、すべての音声についてこの情報を常に維持する必要があります。つまり、特定のタイプの &lt;code&gt;Synthesizer&lt;/code&gt; 常に、固定された数のボイスがあり、それは発音可能な同時ノートの最大数と同じです。</target>
        </trans-unit>
        <trans-unit id="7717ad4c43dc4f90b8dc37532fbf48149788e4e0" translate="yes" xml:space="preserve">
          <source>In June of 1996, the basic X.509 v3 format was completed by ISO/IEC and ANSI X9, which is described below in ASN.1:</source>
          <target state="translated">1996年6月にISO/IECとANSI X9によって基本的なX.509 v3フォーマットが完成し、ASN.1では以下のように記述されています。</target>
        </trans-unit>
        <trans-unit id="bd04fce7fa942ea18d8a8670f1b727e68adbc514" translate="yes" xml:space="preserve">
          <source>In Open MBeans, attributes and parameters can have default values and/or constraints associated with them in the &lt;code&gt;
      OpenMBeanAttributeInfo&lt;/code&gt; or &lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt;. There are two ways to specify these constraints. Either the values are directly specified as parameters to one of the constructors of &lt;code&gt;OpenMBeanAttributeInfoSupport&lt;/code&gt; or &lt;code&gt;OpenMBeanParameterInfoSupport&lt;/code&gt;, for example &lt;a href=&quot;openmbeanparameterinfosupport#%3Cinit%3E(java.lang.String,java.lang.String,javax.management.openmbean.OpenType,T,T%5B%5D)&quot;&gt;&lt;code&gt;OpenMBeanParameterInfoSupport(
      String, String, OpenType, Object, Object[])&lt;/code&gt;&lt;/a&gt;; or the values are specified in a &lt;a href=&quot;../descriptor&quot;&gt;&lt;code&gt;Descriptor&lt;/code&gt;&lt;/a&gt; given as a parameter to one of the constructors.</source>
          <target state="translated">Open MBeanでは、属性とパラメーターに、 &lt;code&gt; OpenMBeanAttributeInfo&lt;/code&gt; または &lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt; でデフォルト値や制約を関連付けることができます。これらの制約を指定する方法は2つあります。値は、 &lt;code&gt;OpenMBeanAttributeInfoSupport&lt;/code&gt; または &lt;code&gt;OpenMBeanParameterInfoSupport&lt;/code&gt; のコンストラクターの1つへのパラメーターとして直接指定されます。たとえば、&lt;a href=&quot;openmbeanparameterinfosupport#%3Cinit%3E(java.lang.String,java.lang.String,javax.management.openmbean.OpenType,T,T%5B%5D)&quot;&gt; &lt;code&gt;OpenMBeanParameterInfoSupport( String, String, OpenType, Object, Object[])&lt;/code&gt; &lt;/a&gt; ;または、値は、コンストラクターの1つにパラメーターとして指定された&lt;a href=&quot;../descriptor&quot;&gt; &lt;code&gt;Descriptor&lt;/code&gt; &lt;/a&gt;子で指定されます。</target>
        </trans-unit>
        <trans-unit id="0cd5532b3248e413385cbfc9fc717eba269294fb" translate="yes" xml:space="preserve">
          <source>In Open MBeans, attributes and parameters can have default values and/or constraints associated with them in the &lt;code&gt;OpenMBeanAttributeInfo&lt;/code&gt; or &lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt;. There are two ways to specify these constraints. Either the values are directly specified as parameters to one of the constructors of &lt;code&gt;OpenMBeanAttributeInfoSupport&lt;/code&gt; or &lt;code&gt;OpenMBeanParameterInfoSupport&lt;/code&gt;, for example &lt;a href=&quot;openmbeanparameterinfosupport#OpenMBeanParameterInfoSupport-java.lang.String-java.lang.String-javax.management.openmbean.OpenType-T-T:A-&quot;&gt;&lt;code&gt;OpenMBeanParameterInfoSupport.OpenMBeanParameterInfoSupport(
      String, String, OpenType, Object, Object[])&lt;/code&gt;&lt;/a&gt;; or the values are specified in a &lt;a href=&quot;../descriptor&quot;&gt;&lt;code&gt;Descriptor&lt;/code&gt;&lt;/a&gt; given as a parameter to one of the constructors.</source>
          <target state="translated">Open MBeanでは、属性とパラメーターに &lt;code&gt;OpenMBeanAttributeInfo&lt;/code&gt; または &lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt; で関連付けられたデフォルト値や制約を設定できます。これらの制約を指定するには2つの方法があります。値は、 &lt;code&gt;OpenMBeanAttributeInfoSupport&lt;/code&gt; または &lt;code&gt;OpenMBeanParameterInfoSupport&lt;/code&gt; のコンストラクターのいずれかにパラメーターとして直接指定されます。たとえば、&lt;a href=&quot;openmbeanparameterinfosupport#OpenMBeanParameterInfoSupport-java.lang.String-java.lang.String-javax.management.openmbean.OpenType-T-T:A-&quot;&gt; &lt;code&gt;OpenMBeanParameterInfoSupport.OpenMBeanParameterInfoSupport( String, String, OpenType, Object, Object[])&lt;/code&gt; &lt;/a&gt;ます。または、値は、コンストラクターの1つにパラメーターとして指定された&lt;a href=&quot;../descriptor&quot;&gt; &lt;code&gt;Descriptor&lt;/code&gt; &lt;/a&gt;子で指定されます。</target>
        </trans-unit>
        <trans-unit id="57742fea34c047c7946636e9200af85a7134f451" translate="yes" xml:space="preserve">
          <source>In Perl, &lt;code&gt;\1&lt;/code&gt; through &lt;code&gt;\9&lt;/code&gt; are always interpreted as back references; a backslash-escaped number greater than &lt;code&gt;9&lt;/code&gt; is treated as a back reference if at least that many subexpressions exist, otherwise it is interpreted, if possible, as an octal escape. In this class octal escapes must always begin with a zero. In this class, &lt;code&gt;\1&lt;/code&gt; through &lt;code&gt;\9&lt;/code&gt; are always interpreted as back references, and a larger number is accepted as a back reference if at least that many subexpressions exist at that point in the regular expression, otherwise the parser will drop digits until the number is smaller or equal to the existing number of groups or it is one digit.</source>
          <target state="translated">Perlでは、 &lt;code&gt;\1&lt;/code&gt; から &lt;code&gt;\9&lt;/code&gt; は常に後方参照として解釈されます。 &lt;code&gt;9&lt;/code&gt; より大きいバックスラッシュエスケープされた数値は、少なくともその数のサブ式が存在する場合は後方参照として扱われ、そうでない場合は、可能であれば8進エスケープとして解釈されます。このクラスでは、8進エスケープは常にゼロで始まる必要があります。このクラスでは、 &lt;code&gt;\1&lt;/code&gt; から &lt;code&gt;\9&lt;/code&gt; は常に後方参照として解釈され、正規表現のその時点で少なくともその数の部分式が存在する場合、より大きい数が後方参照として受け入れられます。それ以外の場合、パーサーは数値まで数字をドロップします既存のグループ数以下であるか、1桁です。</target>
        </trans-unit>
        <trans-unit id="4d1565310b4b37e62e7a911cfa4fcf890fef7d66" translate="yes" xml:space="preserve">
          <source>In Perl, embedded flags at the top level of an expression affect the whole expression. In this class, embedded flags always take effect at the point at which they appear, whether they are at the top level or within a group; in the latter case, flags are restored at the end of the group just as in Perl.</source>
          <target state="translated">Perlでは、式のトップレベルに埋め込まれたフラグは式全体に影響を与えます。このクラスでは、埋め込まれたフラグは、トップレベルにあってもグループ内にあっても、常にそのフラグが現れた時点で効果を発揮します。</target>
        </trans-unit>
        <trans-unit id="45254eb83c7215694144dea45c11035bc6d7f671" translate="yes" xml:space="preserve">
          <source>In SQL, a result table is retrieved through a cursor that is named. The current row of a result set can be updated or deleted using a positioned update/delete statement that references the cursor name. To insure that the cursor has the proper isolation level to support update, the cursor's &lt;code&gt;SELECT&lt;/code&gt; statement should be of the form &lt;code&gt;SELECT FOR UPDATE&lt;/code&gt;. If &lt;code&gt;FOR UPDATE&lt;/code&gt; is omitted, the positioned updates may fail.</source>
          <target state="translated">SQLでは、結果テーブルは名前の付いたカーソルを介して取得されます。結果セットの現在の行は、カーソル名を参照する配置された更新/削除ステートメントを使用して更新または削除できます。カーソルが更新をサポートするための適切な分離レベルを持っていることを保証するには、カーソルの &lt;code&gt;SELECT&lt;/code&gt; ステートメントは &lt;code&gt;SELECT FOR UPDATE&lt;/code&gt; の形式である必要があります。場合は &lt;code&gt;FOR UPDATE&lt;/code&gt; が省略され、位置付け更新に失敗することがあります。</target>
        </trans-unit>
        <trans-unit id="3b570462cd79d760be3948904adcdedf1d492b06" translate="yes" xml:space="preserve">
          <source>In SSL, sessions are used to describe an ongoing relationship between two entities.</source>
          <target state="translated">SSLでは、セッションは2つのエンティティ間の継続的な関係を記述するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1ff794ab8aeeb7f642a324d3b35b851cc6c68096" translate="yes" xml:space="preserve">
          <source>In SSL, sessions are used to describe an ongoing relationship between two entities. Each SSL connection involves one session at a time, but that session may be used on many connections between those entities, simultaneously or sequentially. The session used on a connection may also be replaced by a different session. Sessions are created, or rejoined, as part of the SSL handshaking protocol. Sessions may be invalidated due to policies affecting security or resource usage, or by an application explicitly calling &lt;code&gt;invalidate&lt;/code&gt;. Session management policies are typically used to tune performance.</source>
          <target state="translated">SSLでは、セッションは2つのエンティティ間の進行中の関係を記述するために使用されます。各SSL接続には一度に1つのセッションが含まれますが、そのセッションは、これらのエンティティ間の多くの接続で同時にまたは順次に使用できます。接続で使用されるセッションは、別のセッションで置き換えることもできます。セッションは、SSLハンドシェイクプロトコルの一部として作成または再結合されます。セキュリティまたはリソースの使用に影響を与えるポリシー、またはアプリケーションが明示的に &lt;code&gt;invalidate&lt;/code&gt; を呼び出すことにより、セッションが無効になる場合があります。セッション管理ポリシーは、通常、パフォーマンスを調整するために使用されます。</target>
        </trans-unit>
        <trans-unit id="dacc622167500cd916a0808c821aecd15f9adae6" translate="yes" xml:space="preserve">
          <source>In XML, this is described by the &lt;code&gt;modifyRow&lt;/code&gt; tag. Both the original and new values are contained within the tag for original row tracking purposes.</source>
          <target state="translated">XMLでは、これは &lt;code&gt;modifyRow&lt;/code&gt; タグで記述されます。元の行追跡の目的で、元の値と新しい値の両方がタグ内に含まれています。</target>
        </trans-unit>
        <trans-unit id="4d1efbff85d860f1baeae7205b1916956c1776cb" translate="yes" xml:space="preserve">
          <source>In XML, where the value of an attribute can contain entity references, the child nodes of the &lt;code&gt;Attr&lt;/code&gt; node may be either &lt;code&gt;Text&lt;/code&gt; or &lt;code&gt;EntityReference&lt;/code&gt; nodes (when these are in use; see the description of &lt;code&gt;EntityReference&lt;/code&gt; for discussion).</source>
          <target state="translated">属性の値にエンティティ参照を含めることができるXMLでは、 &lt;code&gt;Attr&lt;/code&gt; ノードの子ノードは &lt;code&gt;Text&lt;/code&gt; ノードまたは &lt;code&gt;EntityReference&lt;/code&gt; ノードのいずれかです（これらが使用されている場合。説明については、 &lt;code&gt;EntityReference&lt;/code&gt; の説明を参照してください）。</target>
        </trans-unit>
        <trans-unit id="89a3d9e997a1741012b57bb389e6d0d560cfaf98" translate="yes" xml:space="preserve">
          <source>In a &lt;code&gt;SpringLayout&lt;/code&gt;, the position of each edge is dependent on the position of just one other edge. If a constraint is subsequently added to create a new binding for an edge, the previous binding is discarded and the edge remains dependent on a single edge. Springs should only be attached between edges of the container and its immediate children; the behavior of the &lt;code&gt;SpringLayout&lt;/code&gt; when presented with constraints linking the edges of components from different containers (either internal or external) is undefined.</source>
          <target state="translated">内 &lt;code&gt;SpringLayout&lt;/code&gt; 、各エッジの位置は、ちょうど一つの他のエッジの位置に依存しています。その後、制約を追加してエッジの新しいバインディングを作成すると、前のバインディングは破棄され、エッジは単一のエッジに依存したままになります。スプリングは、コンテナの端とその直接の子の間にのみ取り付ける必要があります。異なるコンテナ（内部または外部）のコンポーネントのエッジをリンクする制約が提示された場合の &lt;code&gt;SpringLayout&lt;/code&gt; の動作は定義されていません。</target>
        </trans-unit>
        <trans-unit id="26f05bf5ad6ab1df97bc4c4688975872f5e533e1" translate="yes" xml:space="preserve">
          <source>In a comma-separated list of actions, spaces are allowed before and after each action.</source>
          <target state="translated">カンマで区切られたアクションのリストでは、各アクションの前後にスペースを入れることができます。</target>
        </trans-unit>
        <trans-unit id="f1b27c3d7f721836425a197858414f76de2981f3" translate="yes" xml:space="preserve">
          <source>In a directory, named objects can have associated with them attributes. The &lt;code&gt;Attribute&lt;/code&gt; interface represents an attribute associated with a named object. An attribute contains 0 or more, possibly null, values. The attribute values can be ordered or unordered (see &lt;code&gt;isOrdered()&lt;/code&gt;). If the values are unordered, no duplicates are allowed. If the values are ordered, duplicates are allowed.</source>
          <target state="translated">ディレクトリでは、名前付きオブジェクトに属性を関連付けることができます。 &lt;code&gt;Attribute&lt;/code&gt; インタフェースは、指定されたオブジェクトに関連付けられた属性を表します。属性には、0以上の、場合によってはnullの値が含まれます。属性値は順序付けすることも順序付けしないこともできます（ &lt;code&gt;isOrdered()&lt;/code&gt; を参照）。値が順序付けられていない場合、重複は許可されません。値が順序付けられている場合、重複が許可されます。</target>
        </trans-unit>
        <trans-unit id="d814ed6a72f0f727435c36a8f8920d7394fc6592" translate="yes" xml:space="preserve">
          <source>In a directory, named objects can have associated with them attributes. The Attributes interface represents a collection of attributes. For example, you can request from the directory the attributes associated with an object. Those attributes are returned in an object that implements the Attributes interface.</source>
          <target state="translated">ディレクトリ内では、名前のついたオブジェクトは属性を持つことができます。属性インタフェースは、属性のコレクションを表します。例えば、あるオブジェクトに関連付けられた属性をディレクトリに要求することができます。これらの属性は、Attributes インターフェースを実装したオブジェクトで返されます。</target>
        </trans-unit>
        <trans-unit id="ef39a078f24c6cadc5267973ce916397b861c70d" translate="yes" xml:space="preserve">
          <source>In a federated naming system, a context from one naming system may be bound to a name in another. One can subsequently look up and perform operations on the foreign context using a composite name. However, an attempt destroy the context using this composite name will fail with &lt;code&gt;NotContextException&lt;/code&gt;, because the foreign context is not a &quot;subcontext&quot; of the context in which it is bound. Instead, use &lt;code&gt;unbind()&lt;/code&gt; to remove the binding of the foreign context. Destroying the foreign context requires that the &lt;code&gt;destroySubcontext()&lt;/code&gt; be performed on a context from the foreign context's &quot;native&quot; naming system.</source>
          <target state="translated">連合ネーミングシステムでは、あるネーミングシステムのコンテキストが別のネーミングシステムの名前にバインドされる場合があります。その後、複合名を使用して外部コンテキストを検索し、操作を実行できます。ただし、このコンポジット名を使用してコンテキストを破棄しようとすると、外部コンテキストがバインドされているコンテキストの「サブコンテキスト」ではないため、 &lt;code&gt;NotContextException&lt;/code&gt; で失敗します。代わりに、 &lt;code&gt;unbind()&lt;/code&gt; を使用して外部コンテキストのバインディングを削除してください。外部コンテキストを &lt;code&gt;destroySubcontext()&lt;/code&gt; は、外部コンテキストの「ネイティブ」ネーミングシステムのコンテキストでdestroySubcontext（）を実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="114c0d7797271a679147f3a27754dcc0dd68dfa2" translate="yes" xml:space="preserve">
          <source>In a given instance any particular component is either</source>
          <target state="translated">任意のインスタンスでは、特定のコンポーネントは以下のいずれかです。</target>
        </trans-unit>
        <trans-unit id="5a88cd9c503e0a1686f90cc15c6ea972d48245fb" translate="yes" xml:space="preserve">
          <source>In a multi-screen environment with a virtual device, the location is specified in the corresponding virtual coordinate system. If the cursor location is outside the bounds of the virtual device the reported coordinates are clipped to fit within the bounds of the virtual device.</source>
          <target state="translated">仮想デバイスを持つマルチスクリーン環境では、位置は対応する仮想座標系で指定されます。カーソル位置が仮想デバイスの範囲外にある場合、報告された座標は仮想デバイスの範囲内に収まるように切り取られます。</target>
        </trans-unit>
        <trans-unit id="beec8e3caa686180234f4b8afe0fdcd9210ef4f5" translate="yes" xml:space="preserve">
          <source>In a multi-screen environment with a virtual device:</source>
          <target state="translated">仮想デバイスを使ったマルチスクリーン環境で</target>
        </trans-unit>
        <trans-unit id="2234900dfb150b5e384fa3f5f81373e10b3301c9" translate="yes" xml:space="preserve">
          <source>In a multi-screen environment without a virtual device, the cursor location is specified in the coordinate system of the</source>
          <target state="translated">仮想デバイスを使用しないマルチスクリーン環境では、カーソル位置は</target>
        </trans-unit>
        <trans-unit id="2c6404a0209e09710c9372e3d7d693cc85df5520" translate="yes" xml:space="preserve">
          <source>In a multi-screen environment without a virtual device:</source>
          <target state="translated">バーチャルデバイスを使わないマルチスクリーン環境で</target>
        </trans-unit>
        <trans-unit id="f1a97eb3ece37ddd086b40af97826bcd430f5f23" translate="yes" xml:space="preserve">
          <source>In a multi-screen environment, the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; objects can be used to render components on multiple screens. The following code sample demonstrates how to create a &lt;code&gt;JFrame&lt;/code&gt; object for each &lt;code&gt;GraphicsConfiguration&lt;/code&gt; on each screen device in the &lt;code&gt;GraphicsEnvironment&lt;/code&gt;:</source>
          <target state="translated">マルチスクリーン環境では、 &lt;code&gt;GraphicsConfiguration&lt;/code&gt; オブジェクトを使用して、コンポーネントを複数のスクリーンにレンダリングできます。次のコードサンプルは、 &lt;code&gt;GraphicsEnvironment&lt;/code&gt; の各画面デバイスで &lt;code&gt;GraphicsConfiguration&lt;/code&gt; ごとに &lt;code&gt;JFrame&lt;/code&gt; オブジェクトを作成する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="3b320df9cfdd61b94d5da4cf0c882fd741be52ee" translate="yes" xml:space="preserve">
          <source>In a multi-screen environment, you can create a &lt;code&gt;Dialog&lt;/code&gt; on a different screen device than its owner. See &lt;a href=&quot;frame&quot;&gt;&lt;code&gt;Frame&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">マルチスクリーン環境では、所有者とは異なるスクリーンデバイスで &lt;code&gt;Dialog&lt;/code&gt; を作成できます。詳細については、&lt;a href=&quot;frame&quot;&gt; &lt;code&gt;Frame&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d07ce735bcf4902c8204f1f63d8f440d8bc34c23" translate="yes" xml:space="preserve">
          <source>In a multi-screen environment, you can create a &lt;code&gt;Frame&lt;/code&gt; on a different screen device by constructing the &lt;code&gt;Frame&lt;/code&gt; with &lt;a href=&quot;#%3Cinit%3E(java.awt.GraphicsConfiguration)&quot;&gt;&lt;code&gt;Frame(GraphicsConfiguration)&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#%3Cinit%3E(java.lang.String,java.awt.GraphicsConfiguration)&quot;&gt;&lt;code&gt;Frame(String title, GraphicsConfiguration)&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;GraphicsConfiguration&lt;/code&gt; object is one of the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; objects of the target screen device.</source>
          <target state="translated">マルチスクリーン環境では、作成することができ &lt;code&gt;Frame&lt;/code&gt; 構成することにより、異なったスクリーンデバイス上に &lt;code&gt;Frame&lt;/code&gt; をして&lt;a href=&quot;#%3Cinit%3E(java.awt.GraphicsConfiguration)&quot;&gt; &lt;code&gt;Frame(GraphicsConfiguration)&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#%3Cinit%3E(java.lang.String,java.awt.GraphicsConfiguration)&quot;&gt; &lt;code&gt;Frame(String title, GraphicsConfiguration)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;GraphicsConfiguration&lt;/code&gt; オブジェクトは次のいずれかである &lt;code&gt;GraphicsConfiguration&lt;/code&gt; ターゲットスクリーンデバイスのオブジェクト。</target>
        </trans-unit>
        <trans-unit id="e9512c06f1bf7d4fe185f8414ab76dfe1eb4fa74" translate="yes" xml:space="preserve">
          <source>In a multi-screen environment, you can create a &lt;code&gt;JDialog&lt;/code&gt; on a different screen device than its owner. See &lt;a href=&quot;../../java/awt/frame&quot;&gt;&lt;code&gt;Frame&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">マルチスクリーン環境では、所有者とは異なるスクリーンデバイスで &lt;code&gt;JDialog&lt;/code&gt; を作成できます。詳細については、&lt;a href=&quot;../../java/awt/frame&quot;&gt; &lt;code&gt;Frame&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="cc171c3b95f3c60739318307a09709f0df11ea58" translate="yes" xml:space="preserve">
          <source>In a multi-screen environment, you can create a &lt;code&gt;JFrame&lt;/code&gt; on a different screen device. See &lt;a href=&quot;../../java/awt/frame&quot;&gt;&lt;code&gt;Frame&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">マルチスクリーン環境では、別のスクリーンデバイスで &lt;code&gt;JFrame&lt;/code&gt; を作成できます。詳細については、&lt;a href=&quot;../../java/awt/frame&quot;&gt; &lt;code&gt;Frame&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="58e515a085d497dcf291b45c8fdb16f2cb60b541" translate="yes" xml:space="preserve">
          <source>In a multi-screen environment, you can create a &lt;code&gt;JWindow&lt;/code&gt; on a different screen device. See &lt;a href=&quot;../../java/awt/window&quot;&gt;&lt;code&gt;Window&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">マルチスクリーン環境では、別のスクリーンデバイスで &lt;code&gt;JWindow&lt;/code&gt; を作成できます。詳細については、&lt;a href=&quot;../../java/awt/window&quot;&gt; &lt;code&gt;Window&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3ffadd88ef62e8dc7d903ba85453cda0c5774bb0" translate="yes" xml:space="preserve">
          <source>In a multi-screen environment, you can create a &lt;code&gt;Window&lt;/code&gt; on a different screen device by constructing the &lt;code&gt;Window&lt;/code&gt; with &lt;a href=&quot;#%3Cinit%3E(java.awt.Window,java.awt.GraphicsConfiguration)&quot;&gt;&lt;code&gt;Window(Window, GraphicsConfiguration)&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;GraphicsConfiguration&lt;/code&gt; object is one of the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; objects of the target screen device.</source>
          <target state="translated">マルチスクリーン環境では、作成することができます &lt;code&gt;Window&lt;/code&gt; 構築することにより、異なるスクリーンデバイス上の &lt;code&gt;Window&lt;/code&gt; と&lt;a href=&quot;#%3Cinit%3E(java.awt.Window,java.awt.GraphicsConfiguration)&quot;&gt; &lt;code&gt;Window(Window, GraphicsConfiguration)&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;GraphicsConfiguration&lt;/code&gt; オブジェクトは次のいずれかである &lt;code&gt;GraphicsConfiguration&lt;/code&gt; ターゲットスクリーンデバイスのオブジェクト。</target>
        </trans-unit>
        <trans-unit id="cbb6f1b2109695564847c69426e7cd2b5d348cd9" translate="yes" xml:space="preserve">
          <source>In a multithreaded application, &lt;a href=&quot;keyeventdispatcher&quot;&gt;&lt;code&gt;KeyEventDispatcher&lt;/code&gt;&lt;/a&gt; behaves the same as other AWT listeners. See &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/doc-files/AWTThreadIssues.html#ListenersThreads&quot;&gt;AWT Threading Issues&lt;/a&gt; for more details.</source>
          <target state="translated">マルチスレッドアプリケーションでは、&lt;a href=&quot;keyeventdispatcher&quot;&gt; &lt;code&gt;KeyEventDispatcher&lt;/code&gt; &lt;/a&gt;は他のAWTリスナーと同じように動作します。詳細については、&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/doc-files/AWTThreadIssues.html#ListenersThreads&quot;&gt;AWTスレッドの問題&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="25abd890f9d831cb21b6f248256eaa8ffdec0eec" translate="yes" xml:space="preserve">
          <source>In a multithreaded application, &lt;a href=&quot;keyeventpostprocessor&quot;&gt;&lt;code&gt;KeyEventPostProcessor&lt;/code&gt;&lt;/a&gt; behaves the same as other AWT listeners. See &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/doc-files/AWTThreadIssues.html#ListenersThreads&quot;&gt;AWT Threading Issues&lt;/a&gt; for more details.</source>
          <target state="translated">マルチスレッドアプリケーションでは、&lt;a href=&quot;keyeventpostprocessor&quot;&gt; &lt;code&gt;KeyEventPostProcessor&lt;/code&gt; &lt;/a&gt;は他のAWTリスナーと同じように動作します。詳細については、&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/doc-files/AWTThreadIssues.html#ListenersThreads&quot;&gt;AWTスレッドの問題&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="efe47ac7935506f54f1c9824300c5228ddba832f" translate="yes" xml:space="preserve">
          <source>In a provider-configuration file, any mention of a service provider that is deployed in a named module is ignored. This is to avoid duplicates that would otherwise arise when a named module has both a</source>
          <target state="translated">provider-configuration ファイルでは、名前付きモジュールにデプロイされているサービスプロバイダへの言及は無視されます。これは、名前付きモジュールに</target>
        </trans-unit>
        <trans-unit id="4f34c121362e6825cfb7979d461f740a49f541c2" translate="yes" xml:space="preserve">
          <source>In a similar manner, this method can be used to ignore secondary fields that would otherwise be cross-checked. For example, if the formatter consists of year, month, day-of-month and day-of-week, then there is only one way to resolve a date, but the parsed value for day-of-week will be cross-checked against the resolved date. Calling this method with the arguments &lt;a href=&quot;../temporal/chronofield#YEAR&quot;&gt;&lt;code&gt;YEAR&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../temporal/chronofield#MONTH_OF_YEAR&quot;&gt;&lt;code&gt;MONTH_OF_YEAR&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../temporal/chronofield#DAY_OF_MONTH&quot;&gt;&lt;code&gt;DAY_OF_MONTH&lt;/code&gt;&lt;/a&gt; will ensure that the date is resolved correctly, but without any cross-check for the day-of-week.</source>
          <target state="translated">同様に、このメソッドを使用すると、他の方法でクロスチェックされるセカンダリフィールドを無視できます。たとえば、フォーマッタが年、月、日、および曜日で構成されている場合、日付を解決する方法は1つしかありませんが、曜日の解析された値はクロスチェックされます解決日に対して。引数&lt;a href=&quot;../temporal/chronofield#YEAR&quot;&gt; &lt;code&gt;YEAR&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../temporal/chronofield#MONTH_OF_YEAR&quot;&gt; &lt;code&gt;MONTH_OF_YEAR&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../temporal/chronofield#DAY_OF_MONTH&quot;&gt; &lt;code&gt;DAY_OF_MONTH&lt;/code&gt; &lt;/a&gt;を指定してこのメ​​ソッドを呼び出すと、日付が正しく解決されますが、曜日のクロスチェックは行われません。</target>
        </trans-unit>
        <trans-unit id="90329937fe209cdc5c56c8a7860e7f3ea7544235" translate="yes" xml:space="preserve">
          <source>In a string without quotes or escapes, any instance of the separator delimits two atomic names. Each atomic name is referred to as a &lt;em&gt;component&lt;/em&gt;.</source>
          <target state="translated">引用符またはエスケープのない文字列では、セパレーターのインスタンスは2つのアトミック名を区切ります。各原子名は&lt;em&gt;コンポーネント&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="0ed539e402cf385b4dd9e80abdc848541c1447f9" translate="yes" xml:space="preserve">
          <source>In a text processing application that can cache intermediate representations of text, creation and subsequent caching of a &lt;code&gt;GlyphVector&lt;/code&gt; for use during rendering is the fastest method to present the visual representation of characters to a user.</source>
          <target state="translated">テキストの中間表現をキャッシュできるテキスト処理アプリケーションでは、レンダリング中に使用する &lt;code&gt;GlyphVector&lt;/code&gt; の作成とその後のキャッシュが、文字の視覚的表現をユーザーに提示するための最速の方法です。</target>
        </trans-unit>
        <trans-unit id="ed263b2f5c9c11d52878d6f815cf7ac22d9692aa" translate="yes" xml:space="preserve">
          <source>In a tree of tiered phasers, registration and deregistration of child phasers with their parent are managed automatically. Whenever the number of registered parties of a child phaser becomes non-zero (as established in the &lt;a href=&quot;#%3Cinit%3E(java.util.concurrent.Phaser,int)&quot;&gt;&lt;code&gt;Phaser(Phaser,int)&lt;/code&gt;&lt;/a&gt; constructor, &lt;a href=&quot;#register()&quot;&gt;&lt;code&gt;register()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;#bulkRegister(int)&quot;&gt;&lt;code&gt;bulkRegister(int)&lt;/code&gt;&lt;/a&gt;), the child phaser is registered with its parent. Whenever the number of registered parties becomes zero as the result of an invocation of &lt;a href=&quot;#arriveAndDeregister()&quot;&gt;&lt;code&gt;arriveAndDeregister()&lt;/code&gt;&lt;/a&gt;, the child phaser is deregistered from its parent.</source>
          <target state="translated">階層型フェイザーのツリーでは、親との子フェイザーの登録と登録解除が自動的に管理されます。子フェイザーの登録済みパーティの数がゼロ以外になると（&lt;a href=&quot;#%3Cinit%3E(java.util.concurrent.Phaser,int)&quot;&gt; &lt;code&gt;Phaser(Phaser,int)&lt;/code&gt; &lt;/a&gt;コンストラクター、&lt;a href=&quot;#register()&quot;&gt; &lt;code&gt;register()&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;#bulkRegister(int)&quot;&gt; &lt;code&gt;bulkRegister(int)&lt;/code&gt; で確立されるように&lt;/a&gt;）、子フェイザーはその親に登録されます。&lt;a href=&quot;#arriveAndDeregister()&quot;&gt; &lt;code&gt;arriveAndDeregister()&lt;/code&gt; &lt;/a&gt;呼び出しの結果として登録済みパーティの数がゼロになると、子フェイザーはその親から登録解除されます。</target>
        </trans-unit>
        <trans-unit id="85fe56db10a3c0d908e17d31e5b4da75440bafdf" translate="yes" xml:space="preserve">
          <source>In a tree of tiered phasers, registration and deregistration of child phasers with their parent are managed automatically. Whenever the number of registered parties of a child phaser becomes non-zero (as established in the &lt;a href=&quot;phaser#Phaser-java.util.concurrent.Phaser-int-&quot;&gt;&lt;code&gt;Phaser(Phaser,int)&lt;/code&gt;&lt;/a&gt; constructor, &lt;a href=&quot;phaser#register--&quot;&gt;&lt;code&gt;register()&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;phaser#bulkRegister-int-&quot;&gt;&lt;code&gt;bulkRegister(int)&lt;/code&gt;&lt;/a&gt;), the child phaser is registered with its parent. Whenever the number of registered parties becomes zero as the result of an invocation of &lt;a href=&quot;phaser#arriveAndDeregister--&quot;&gt;&lt;code&gt;arriveAndDeregister()&lt;/code&gt;&lt;/a&gt;, the child phaser is deregistered from its parent.</source>
          <target state="translated">階層化されたフェイザーのツリーでは、子フェイザーの親への登録と登録解除が自動的に管理されます。子フェイザーの登録済みパーティーの数が（&lt;a href=&quot;phaser#Phaser-java.util.concurrent.Phaser-int-&quot;&gt; &lt;code&gt;Phaser(Phaser,int)&lt;/code&gt; &lt;/a&gt;コンストラクター、&lt;a href=&quot;phaser#register--&quot;&gt; &lt;code&gt;register()&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;phaser#bulkRegister-int-&quot;&gt; &lt;code&gt;bulkRegister(int)&lt;/code&gt; で&lt;/a&gt;確立された）非ゼロになると、子フェイザーはその親に登録されます。登録されたパーティーの数がゼロになったときはいつでも、&lt;a href=&quot;phaser#arriveAndDeregister--&quot;&gt; &lt;code&gt;arriveAndDeregister()&lt;/code&gt; &lt;/a&gt;と登録解除（）の呼び出しの結果、子フェイザーはその親から登録解除されます。</target>
        </trans-unit>
        <trans-unit id="6842084fd313a8aff5259cff4e2ee349f7ffc691" translate="yes" xml:space="preserve">
          <source>In a virtual device multi-screen environment in which the desktop area could span multiple physical screen devices, the bounds of all configurations are relative to the virtual device coordinate system. The origin of the virtual-coordinate system is at the upper left-hand corner of the primary physical screen. Depending on the location of the primary screen in the virtual device, negative coordinates are possible, as shown in the following figure.</source>
          <target state="translated">デスクトップ領域が複数の物理スクリーンデバイスにまたがる可能性のある仮想デバイスマルチスクリーン環境では、すべての構成の境界は仮想デバイス座標系に対する相対的なものである。仮想座標系の原点は、プライマリ物理画面の左上隅にある。仮想デバイス内の主画面の位置によっては、下図のような負の座標も可能である。</target>
        </trans-unit>
        <trans-unit id="cf00b9b973d8c83ad9d8253cbb4fa615258d8038" translate="yes" xml:space="preserve">
          <source>In a virtual device multi-screen environment in which the desktop area could span multiple physical screen devices, the bounds of all configurations are relative to the virtual-coordinate system. The origin of the virtual-coordinate system is at the upper left-hand corner of the primary physical screen. Depending on the location of the primary screen in the virtual device, negative coordinates are possible, as shown in the following figure.</source>
          <target state="translated">デスクトップ領域が複数の物理スクリーンデバイスにまたがるような仮想デバイス・マルチスクリーン環境では、すべての構成の境界は仮想座標系を基準とした相対的なものである。仮想座標系の原点は、プライマリ物理画面の左上隅にある。仮想デバイス内の主画面の位置によっては、次の図のように負の座標が可能である。</target>
        </trans-unit>
        <trans-unit id="37042eb4e42e068b312195920663ac63249d62d0" translate="yes" xml:space="preserve">
          <source>In a virtual device multi-screen environment in which the desktop area could span multiple physical screen devices, the bounds of the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; objects are relative to the virtual coordinate system. When setting the location of a component, use &lt;a href=&quot;#getBounds()&quot;&gt;&lt;code&gt;getBounds&lt;/code&gt;&lt;/a&gt; to get the bounds of the desired &lt;code&gt;GraphicsConfiguration&lt;/code&gt; and offset the location with the coordinates of the &lt;code&gt;GraphicsConfiguration&lt;/code&gt;, as the following code sample illustrates:</source>
          <target state="translated">デスクトップ領域が複数の物理画面デバイスにまたがる可能性がある仮想デバイスのマルチ画面環境では、 &lt;code&gt;GraphicsConfiguration&lt;/code&gt; オブジェクトの境界は仮想座標系を基準にしています。次のコードサンプルに示すように、コンポーネントの場所を設定するときは、&lt;a href=&quot;#getBounds()&quot;&gt; &lt;code&gt;getBounds&lt;/code&gt; &lt;/a&gt;を使用して目的の &lt;code&gt;GraphicsConfiguration&lt;/code&gt; の境界を取得し、場所を &lt;code&gt;GraphicsConfiguration&lt;/code&gt; の座標でオフセットします。</target>
        </trans-unit>
        <trans-unit id="4de1fa88647ce453435c8841d38d13382e76babc" translate="yes" xml:space="preserve">
          <source>In a weighted list, each language range is given a weight value. The weight value is identical to the &quot;quality value&quot; in &lt;a href=&quot;http://tools.ietf.org/html/rfc2616&quot;&gt;RFC 2616&lt;/a&gt;, and it expresses how much the user prefers the language. A weight value is specified after a corresponding language range followed by &lt;code&gt;&quot;;q=&quot;&lt;/code&gt;, and the default weight value is &lt;code&gt;MAX_WEIGHT&lt;/code&gt; when it is omitted.</source>
          <target state="translated">加重リストでは、各言語範囲に加重値が与えられます。重み値は&lt;a href=&quot;http://tools.ietf.org/html/rfc2616&quot;&gt;RFC 2616の&lt;/a&gt;「品質値」と同じであり、ユーザーが言語をどれだけ好むかを表します。重み値は、対応する言語の範囲の後に &lt;code&gt;&quot;;q=&quot;&lt;/code&gt; 続くように指定され、省略された場合のデフォルトの重み値は &lt;code&gt;MAX_WEIGHT&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="db07c01b971410649ed0adc273a6cbcf93d8159c" translate="yes" xml:space="preserve">
          <source>In addition it provides an extension mechanism so that arbitrary attribute/value pairs can be associated with a design feature.</source>
          <target state="translated">さらに、任意の属性/値のペアをデザイン機能に関連付けることができるようにするための拡張メカニズムを提供します。</target>
        </trans-unit>
        <trans-unit id="aee5260cc3f43d7a4d3d6be25379877f1d070d35" translate="yes" xml:space="preserve">
          <source>In addition there is a level OFF that can be used to turn off logging, and a level ALL that can be used to enable logging of all messages.</source>
          <target state="translated">さらに、ロギングをオフにするために使用できるレベル OFF と、すべてのメッセージのロギングを有効にするために使用できるレベル ALL があります。</target>
        </trans-unit>
        <trans-unit id="25aa82e21834a941721fb6024ff6ae38ee5c486b" translate="yes" xml:space="preserve">
          <source>In addition to &lt;code&gt;READ&lt;/code&gt; and &lt;code&gt;WRITE&lt;/code&gt;, the following options may be present:</source>
          <target state="translated">&lt;code&gt;READ&lt;/code&gt; および &lt;code&gt;WRITE&lt;/code&gt; に加えて、次のオプションが存在する場合があります。</target>
        </trans-unit>
        <trans-unit id="a77e8c6c29cfcb07a58299b7f377977a6631ab29" translate="yes" xml:space="preserve">
          <source>In addition to &lt;code&gt;Stream&lt;/code&gt;, which is a stream of object references, there are primitive specializations for &lt;a href=&quot;intstream&quot;&gt;&lt;code&gt;IntStream&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;longstream&quot;&gt;&lt;code&gt;LongStream&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;doublestream&quot;&gt;&lt;code&gt;DoubleStream&lt;/code&gt;&lt;/a&gt;, all of which are referred to as &quot;streams&quot; and conform to the characteristics and restrictions described here.</source>
          <target state="translated">オブジェクト参照のストリームである &lt;code&gt;Stream&lt;/code&gt; に加えて、&lt;a href=&quot;intstream&quot;&gt; &lt;code&gt;IntStream&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;longstream&quot;&gt; &lt;code&gt;LongStream&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;doublestream&quot;&gt; &lt;code&gt;DoubleStream&lt;/code&gt; の&lt;/a&gt;プリミティブな特殊化があります。これらはすべて「ストリーム」と呼ばれ、ここで説明する特性と制限に準拠しています。</target>
        </trans-unit>
        <trans-unit id="f7053d093b3d7495ffccb4caf96bc92474aae362" translate="yes" xml:space="preserve">
          <source>In addition to JAR files, an implementation may also support modules that are packaged in other implementation specific module formats. If an element in the array specified to this method is a path to a directory of modules then entries in the directory that not recognized as modules are ignored. If an element in the array is a path to a packaged module that is not recognized then a &lt;code&gt;FindException&lt;/code&gt; is thrown when the file is encountered. Paths to files that do not exist are always ignored.</source>
          <target state="translated">JARファイルに加えて、実装は、他の実装固有のモジュール形式でパッケージ化されたモジュールもサポートする場合があります。このメソッドに指定された配列内の要素がモジュールのディレクトリへのパスである場合、モジュールとして認識されないディレクトリ内のエントリは無視されます。配列内の要素が認識されないパッケージ化されたモジュールへのパスである場合、ファイルが &lt;code&gt;FindException&lt;/code&gt; されるとFindExceptionがスローされます。存在しないファイルへのパスは常に無視されます。</target>
        </trans-unit>
        <trans-unit id="863160dc390b3ec933c01afa4c507995a466826d" translate="yes" xml:space="preserve">
          <source>In addition to a message string, a reference to another &lt;code&gt;Throwable&lt;/code&gt; (&lt;code&gt;Error&lt;/code&gt; or &lt;code&gt;Exception&lt;/code&gt;) is maintained. This reference, if non-&lt;code&gt;null&lt;/code&gt;, refers to the event that caused this exception to occur. For example, an &lt;code&gt;IOException&lt;/code&gt; while reading from a &lt;code&gt;File&lt;/code&gt; would be stored there.</source>
          <target state="translated">メッセージ文字列に加えて、別の &lt;code&gt;Throwable&lt;/code&gt; （ &lt;code&gt;Error&lt;/code&gt; または &lt;code&gt;Exception&lt;/code&gt; ）への参照が維持されます。この参照は、 &lt;code&gt;null&lt;/code&gt; でない場合、この例外を発生させたイベントを参照します。たとえば、 &lt;code&gt;File&lt;/code&gt; からの読み取り中の &lt;code&gt;IOException&lt;/code&gt; はそこに格納されます。</target>
        </trans-unit>
        <trans-unit id="7cae3428a9414e77995a69af58d38c2d85c371b2" translate="yes" xml:space="preserve">
          <source>In addition to accessing the components of a path, a &lt;code&gt;Path&lt;/code&gt; also defines the &lt;a href=&quot;#resolve(java.nio.file.Path)&quot;&gt;&lt;code&gt;resolve&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#resolveSibling(java.nio.file.Path)&quot;&gt;&lt;code&gt;resolveSibling&lt;/code&gt;&lt;/a&gt; methods to combine paths. The &lt;a href=&quot;#relativize(java.nio.file.Path)&quot;&gt;&lt;code&gt;relativize&lt;/code&gt;&lt;/a&gt; method that can be used to construct a relative path between two paths. Paths can be &lt;a href=&quot;#compareTo(java.nio.file.Path)&quot;&gt;&lt;code&gt;compared&lt;/code&gt;&lt;/a&gt;, and tested against each other using the &lt;a href=&quot;#startsWith(java.nio.file.Path)&quot;&gt;&lt;code&gt;startsWith&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#endsWith(java.nio.file.Path)&quot;&gt;&lt;code&gt;endsWith&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">パスは、パスのコンポーネントにアクセスするだけでなく、 &lt;code&gt;Path&lt;/code&gt; を組み合わせる&lt;a href=&quot;#resolve(java.nio.file.Path)&quot;&gt; &lt;code&gt;resolve&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#resolveSibling(java.nio.file.Path)&quot;&gt; &lt;code&gt;resolveSibling&lt;/code&gt; &lt;/a&gt;メソッドとresolveSiblingメソッドも定義します。&lt;a href=&quot;#relativize(java.nio.file.Path)&quot;&gt; &lt;code&gt;relativize&lt;/code&gt; &lt;/a&gt;二つのパスの間の相対パスを構築することができる方法。パスはすることができ&lt;a href=&quot;#compareTo(java.nio.file.Path)&quot;&gt; &lt;code&gt;compared&lt;/code&gt; &lt;/a&gt;、そして使用して互いに対して試験&lt;a href=&quot;#startsWith(java.nio.file.Path)&quot;&gt; &lt;code&gt;startsWith&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#endsWith(java.nio.file.Path)&quot;&gt; &lt;code&gt;endsWith&lt;/code&gt; &lt;/a&gt;方法を。</target>
        </trans-unit>
        <trans-unit id="2ad396eb168616040e6ae0797aa5e8deb8ca87b3" translate="yes" xml:space="preserve">
          <source>In addition to accessing the components of a path, a &lt;code&gt;Path&lt;/code&gt; also defines the &lt;a href=&quot;path#resolve-java.nio.file.Path-&quot;&gt;&lt;code&gt;resolve&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;path#resolveSibling-java.nio.file.Path-&quot;&gt;&lt;code&gt;resolveSibling&lt;/code&gt;&lt;/a&gt; methods to combine paths. The &lt;a href=&quot;path#relativize-java.nio.file.Path-&quot;&gt;&lt;code&gt;relativize&lt;/code&gt;&lt;/a&gt; method that can be used to construct a relative path between two paths. Paths can be &lt;a href=&quot;path#compareTo-java.nio.file.Path-&quot;&gt;&lt;code&gt;compared&lt;/code&gt;&lt;/a&gt;, and tested against each other using the &lt;a href=&quot;path#startsWith-java.nio.file.Path-&quot;&gt;&lt;code&gt;startsWith&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;path#endsWith-java.nio.file.Path-&quot;&gt;&lt;code&gt;endsWith&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">パスは、パスのコンポーネントにアクセスするだけでなく、 &lt;code&gt;Path&lt;/code&gt; を結合&lt;a href=&quot;path#resolve-java.nio.file.Path-&quot;&gt; &lt;code&gt;resolve&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;path#resolveSibling-java.nio.file.Path-&quot;&gt; &lt;code&gt;resolveSibling&lt;/code&gt; &lt;/a&gt;メソッドとresolveSiblingメソッドも定義します。&lt;a href=&quot;path#relativize-java.nio.file.Path-&quot;&gt; &lt;code&gt;relativize&lt;/code&gt; &lt;/a&gt;二つのパスの間の相対パスを構築することができる方法。パスはすることができ&lt;a href=&quot;path#compareTo-java.nio.file.Path-&quot;&gt; &lt;code&gt;compared&lt;/code&gt; &lt;/a&gt;、そして使用して互いに対して試験&lt;a href=&quot;path#startsWith-java.nio.file.Path-&quot;&gt; &lt;code&gt;startsWith&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;path#endsWith-java.nio.file.Path-&quot;&gt; &lt;code&gt;endsWith&lt;/code&gt; &lt;/a&gt;方法を。</target>
        </trans-unit>
        <trans-unit id="b69db6d9c887a09c80baed2338b0466acc408a2c" translate="yes" xml:space="preserve">
          <source>In addition to adjusting a date-time, an interface is provided to enable querying via &lt;a href=&quot;temporalquery&quot;&gt;&lt;code&gt;TemporalQuery&lt;/code&gt;&lt;/a&gt;. The most common implementations of the query interface are method references. The &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; methods on major classes can all be used, such as &lt;code&gt;LocalDate::from&lt;/code&gt; or &lt;code&gt;Month::from&lt;/code&gt;. Further implementations are provided in &lt;a href=&quot;temporalqueries&quot;&gt;&lt;code&gt;TemporalQueries&lt;/code&gt;&lt;/a&gt; as static methods. Applications can also define queries by implementing &lt;a href=&quot;temporalquery&quot;&gt;&lt;code&gt;TemporalQuery&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">日時の調整に加えて、&lt;a href=&quot;temporalquery&quot;&gt; &lt;code&gt;TemporalQuery&lt;/code&gt; &lt;/a&gt;を介したクエリを可能にするインターフェースが提供されています。クエリインターフェイスの最も一般的な実装は、メソッド参照です。 &lt;code&gt;LocalDate::from&lt;/code&gt; や &lt;code&gt;Month::from&lt;/code&gt; など、主要なクラスの &lt;code&gt;from(TemporalAccessor)&lt;/code&gt; メソッドをすべて使用できます。&lt;a href=&quot;temporalqueries&quot;&gt; &lt;code&gt;TemporalQueries&lt;/code&gt; では&lt;/a&gt;、静的メソッドとしてさらに実装が提供されます。アプリケーションは、&lt;a href=&quot;temporalquery&quot;&gt; &lt;code&gt;TemporalQuery&lt;/code&gt; &lt;/a&gt;を実装することでクエリを定義することもできます。</target>
        </trans-unit>
        <trans-unit id="b19c15dcc38f6284d861a9041b2c5b74bc056854" translate="yes" xml:space="preserve">
          <source>In addition to any and all default formats text returned by the system Clipboard's &lt;code&gt;getTransferData()&lt;/code&gt; method is available in the following flavors:</source>
          <target state="translated">システムクリップボードの &lt;code&gt;getTransferData()&lt;/code&gt; メソッドによって返されるすべてのデフォルト形式のテキストに加えて、次のフレーバーで使用できます。</target>
        </trans-unit>
        <trans-unit id="18dd49d60299a8c8c9308c9ee36eeeae82c291e1" translate="yes" xml:space="preserve">
          <source>In addition to any notification specified by the application, a ModelMBean may always send also two additional notifications:</source>
          <target state="translated">アプリケーションによって指定された通知に加えて、ModelMBeanは常に2つの追加通知を送信することができます。</target>
        </trans-unit>
        <trans-unit id="d4c0aa78ed39e161d449ed162b18522a30f07ac8" translate="yes" xml:space="preserve">
          <source>In addition to attribute views, this package also defines classes and interfaces that are used when accessing attributes:</source>
          <target state="translated">属性ビューに加えて、本パッケージでは属性にアクセスする際に使用するクラスやインターフェースも定義しています。</target>
        </trans-unit>
        <trans-unit id="bc50128c00af4b489ab96e5629b96a88aadeb5af" translate="yes" xml:space="preserve">
          <source>In addition to classes representing single values and arrays, this package contains &lt;em&gt;Updater&lt;/em&gt; classes that can be used to obtain &lt;code&gt;compareAndSet&lt;/code&gt; and related operations on any selected &lt;code&gt;volatile&lt;/code&gt; field of any selected class. These classes predate the introduction of &lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt;&lt;code&gt;VarHandle&lt;/code&gt;&lt;/a&gt;, and are of more limited use. &lt;a href=&quot;atomicreferencefieldupdater&quot;&gt;&lt;code&gt;AtomicReferenceFieldUpdater&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;atomicintegerfieldupdater&quot;&gt;&lt;code&gt;AtomicIntegerFieldUpdater&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;atomiclongfieldupdater&quot;&gt;&lt;code&gt;AtomicLongFieldUpdater&lt;/code&gt;&lt;/a&gt; are reflection-based utilities that provide access to the associated field types. These are mainly of use in atomic data structures in which several &lt;code&gt;volatile&lt;/code&gt; fields of the same node (for example, the links of a tree node) are independently subject to atomic updates. These classes enable greater flexibility in how and when to use atomic updates, at the expense of more awkward reflection-based setup, less convenient usage, and weaker guarantees.</source>
          <target state="translated">このパッケージには、単一の値と配列を表すクラスに加えて、選択したクラスの選択した &lt;code&gt;volatile&lt;/code&gt; フィールドに対する &lt;code&gt;compareAndSet&lt;/code&gt; および関連する操作を取得するために使用できるアップ&lt;em&gt;データー&lt;/em&gt;クラスが含まれています。これらのクラスは、&lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt; &lt;code&gt;VarHandle&lt;/code&gt; &lt;/a&gt;の導入よりも前のものであり、使用が制限されています。&lt;a href=&quot;atomicreferencefieldupdater&quot;&gt; &lt;code&gt;AtomicReferenceFieldUpdater&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;atomicintegerfieldupdater&quot;&gt; &lt;code&gt;AtomicIntegerFieldUpdater&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;atomiclongfieldupdater&quot;&gt; &lt;code&gt;AtomicLongFieldUpdater&lt;/code&gt; &lt;/a&gt;は、関連するフィールドタイプへのアクセスを提供するリフレクションベースのユーティリティです。これらは主に、いくつかの &lt;code&gt;volatile&lt;/code&gt; が含まれる原子データ構造で使用されます。同じノードのフィールド（たとえば、ツリーノードのリンク）は、独立してアトミック更新の対象になります。これらのクラスにより、アトミック更新をいつどのように使用するかについての柔軟性が高まりますが、リフレクションベースのセットアップがより厄介になり、使用方法が不便になり、保証が弱くなります。</target>
        </trans-unit>
        <trans-unit id="27cf5bf5dd1546b6480b43a44092643f35de07f9" translate="yes" xml:space="preserve">
          <source>In addition to classes representing single values, this package contains &lt;em&gt;Updater&lt;/em&gt; classes that can be used to obtain &lt;code&gt;compareAndSet&lt;/code&gt; operations on any selected &lt;code&gt;volatile&lt;/code&gt; field of any selected class. &lt;a href=&quot;atomicreferencefieldupdater&quot;&gt;&lt;code&gt;AtomicReferenceFieldUpdater&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;atomicintegerfieldupdater&quot;&gt;&lt;code&gt;AtomicIntegerFieldUpdater&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;atomiclongfieldupdater&quot;&gt;&lt;code&gt;AtomicLongFieldUpdater&lt;/code&gt;&lt;/a&gt; are reflection-based utilities that provide access to the associated field types. These are mainly of use in atomic data structures in which several &lt;code&gt;volatile&lt;/code&gt; fields of the same node (for example, the links of a tree node) are independently subject to atomic updates. These classes enable greater flexibility in how and when to use atomic updates, at the expense of more awkward reflection-based setup, less convenient usage, and weaker guarantees.</source>
          <target state="translated">単一の値を表すクラスに加えて、このパッケージには、選択したクラスの選択した &lt;code&gt;volatile&lt;/code&gt; フィールドに対する &lt;code&gt;compareAndSet&lt;/code&gt; 操作を取得するために使用できる&lt;em&gt;Updater&lt;/em&gt;クラスが含まれています。&lt;a href=&quot;atomicreferencefieldupdater&quot;&gt; &lt;code&gt;AtomicReferenceFieldUpdater&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;atomicintegerfieldupdater&quot;&gt; &lt;code&gt;AtomicIntegerFieldUpdater&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;atomiclongfieldupdater&quot;&gt; &lt;code&gt;AtomicLongFieldUpdater&lt;/code&gt; &lt;/a&gt;は、関連するフィールドタイプへのアクセスを提供するリフレクションベースのユーティリティです。これらは主に、いくつかの &lt;code&gt;volatile&lt;/code&gt; あるアトミックデータ構造で使用されます。同じノードのフィールド（ツリーノードのリンクなど）は、独立してアトミック更新の対象になります。これらのクラスを使用すると、アトミック更新をいつどのように使用するかをより柔軟に設定できますが、リフレクションベースのセットアップが煩雑になり、使い勝手が悪くなり、保証が弱まります。</target>
        </trans-unit>
        <trans-unit id="86cfc1a551a2b499d9426296495d7d86d23960f2" translate="yes" xml:space="preserve">
          <source>In addition to element nodes, XPath location paths may also address attribute nodes, text nodes, comment nodes, and processing instruction nodes. The following table gives examples of location paths for each of these node types:</source>
          <target state="translated">XPath のロケ地パスは、要素ノードのほかに、属性ノード、テキスト ノード、コメント ノード、および処理命令ノードを指定することができます。次の表に、これらのノード・タイプごとのロケーション・パスの例を示します。</target>
        </trans-unit>
        <trans-unit id="1a910912e92276c4c5b3275eff73b6ba6d758828" translate="yes" xml:space="preserve">
          <source>In addition to execution and lifecycle control methods, this class provides status check methods (for example &lt;a href=&quot;#getStealCount()&quot;&gt;&lt;code&gt;getStealCount()&lt;/code&gt;&lt;/a&gt;) that are intended to aid in developing, tuning, and monitoring fork/join applications. Also, method &lt;a href=&quot;#toString()&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; returns indications of pool state in a convenient form for informal monitoring.</source>
          <target state="translated">このクラスは、実行およびライフサイクル制御メソッドに加えて、フォーク/結合アプリケーションの開発、調整、および監視を支援することを目的としたステータスチェックメソッド（たとえば、&lt;a href=&quot;#getStealCount()&quot;&gt; &lt;code&gt;getStealCount()&lt;/code&gt; &lt;/a&gt;）を提供します。また、メソッド&lt;a href=&quot;#toString()&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt;は、プールの状態の表示を非公式の監視に便利な形式で返します。</target>
        </trans-unit>
        <trans-unit id="c07668fb78a3e8b44ef261341e115a92aefc5157" translate="yes" xml:space="preserve">
          <source>In addition to execution and lifecycle control methods, this class provides status check methods (for example &lt;a href=&quot;forkjoinpool#getStealCount--&quot;&gt;&lt;code&gt;getStealCount()&lt;/code&gt;&lt;/a&gt;) that are intended to aid in developing, tuning, and monitoring fork/join applications. Also, method &lt;a href=&quot;forkjoinpool#toString--&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; returns indications of pool state in a convenient form for informal monitoring.</source>
          <target state="translated">実行およびライフサイクル制御メソッドに加えて、このクラスは、fork / joinアプリケーションの開発、調整、および監視を支援することを目的としたステータスチェックメソッド（たとえば、&lt;a href=&quot;forkjoinpool#getStealCount--&quot;&gt; &lt;code&gt;getStealCount()&lt;/code&gt; &lt;/a&gt;）を提供します。また、メソッド&lt;a href=&quot;forkjoinpool#toString--&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt;は、プールの状態の表示を非公式の監視に便利な形式で返します。</target>
        </trans-unit>
        <trans-unit id="c14f1da366289ef8301d035cb42e8fc05d0b3be6" translate="yes" xml:space="preserve">
          <source>In addition to groups created explicitly, the Java virtual machine maintains a system-wide &lt;em&gt;default group&lt;/em&gt; that is constructed automatically. Asynchronous channels that do not specify a group at construction time are bound to the default group. The default group has an associated thread pool that creates new threads as needed. The default group may be configured by means of system properties defined in the table below. Where the &lt;a href=&quot;../../util/concurrent/threadfactory&quot;&gt;&lt;code&gt;ThreadFactory&lt;/code&gt;&lt;/a&gt; for the default group is not configured then the pooled threads of the default group are &lt;a href=&quot;../../lang/thread#isDaemon()&quot;&gt;&lt;code&gt;daemon&lt;/code&gt;&lt;/a&gt; threads.</source>
          <target state="translated">明示的に作成されたグループに加えて、Java仮想マシンは、自動的に構築されるシステム全体の&lt;em&gt;デフォルトグループ&lt;/em&gt;を維持します。構築時にグループを指定しない非同期チャネルは、デフォルトのグループにバインドされます。デフォルトのグループには、必要に応じて新しいスレッドを作成するスレッドプールが関連付けられています。デフォルトのグループは、以下の表で定義されているシステムプロパティを使用して構成できます。どこ&lt;a href=&quot;../../util/concurrent/threadfactory&quot;&gt; &lt;code&gt;ThreadFactory&lt;/code&gt; &lt;/a&gt;デフォルト・グループのために設定されていないデフォルトのグループのプールされたスレッドがある&lt;a href=&quot;../../lang/thread#isDaemon()&quot;&gt; &lt;code&gt;daemon&lt;/code&gt; &lt;/a&gt;スレッド。</target>
        </trans-unit>
        <trans-unit id="249af950c1dd714f44dfbec5cb9ac53d258e1718" translate="yes" xml:space="preserve">
          <source>In addition to groups created explicitly, the Java virtual machine maintains a system-wide &lt;em&gt;default group&lt;/em&gt; that is constructed automatically. Asynchronous channels that do not specify a group at construction time are bound to the default group. The default group has an associated thread pool that creates new threads as needed. The default group may be configured by means of system properties defined in the table below. Where the &lt;a href=&quot;../../util/concurrent/threadfactory&quot;&gt;&lt;code&gt;ThreadFactory&lt;/code&gt;&lt;/a&gt; for the default group is not configured then the pooled threads of the default group are &lt;a href=&quot;../../lang/thread#isDaemon--&quot;&gt;&lt;code&gt;daemon&lt;/code&gt;&lt;/a&gt; threads.</source>
          <target state="translated">明示的に作成されたグループに加えて、Java仮想マシンは、自動的に構築されるシステム全体の&lt;em&gt;デフォルトグループ&lt;/em&gt;を維持します。構築時にグループを指定しない非同期チャネルは、デフォルトグループにバインドされます。デフォルトのグループには、必要に応じて新しいスレッドを作成するスレッドプールが関連付けられています。デフォルトのグループは、以下の表で定義されているシステムプロパティを使用して構成できます。どこ&lt;a href=&quot;../../util/concurrent/threadfactory&quot;&gt; &lt;code&gt;ThreadFactory&lt;/code&gt; &lt;/a&gt;デフォルト・グループのために設定されていないデフォルトのグループのプールされたスレッドがある&lt;a href=&quot;../../lang/thread#isDaemon--&quot;&gt; &lt;code&gt;daemon&lt;/code&gt; &lt;/a&gt;スレッド。</target>
        </trans-unit>
        <trans-unit id="e10fc02d16ef570a75e8db5a40d2d23818a250fc" translate="yes" xml:space="preserve">
          <source>In addition to implementing the &lt;a href=&quot;lock&quot;&gt;&lt;code&gt;Lock&lt;/code&gt;&lt;/a&gt; interface, this class defines a number of &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;protected&lt;/code&gt; methods for inspecting the state of the lock. Some of these methods are only useful for instrumentation and monitoring.</source>
          <target state="translated">&lt;a href=&quot;lock&quot;&gt; &lt;code&gt;Lock&lt;/code&gt; &lt;/a&gt;インターフェースの実装に加えて、このクラスは、ロックの状態を検査するためのいくつかの &lt;code&gt;public&lt;/code&gt; および &lt;code&gt;protected&lt;/code&gt; メソッドを定義します。これらの方法の一部は、計測と監視にのみ役立ちます。</target>
        </trans-unit>
        <trans-unit id="91e7be4c0bd9afd5d0219e0805abd80ce1a6ae2d" translate="yes" xml:space="preserve">
          <source>In addition to loading classes, a class loader is also responsible for locating resources. A resource is some data (a &quot;&lt;code&gt;.class&lt;/code&gt;&quot; file, configuration data, or an image for example) that is identified with an abstract '/'-separated path name. Resources are typically packaged with an application or library so that they can be located by code in the application or library. In some cases, the resources are included so that they can be located by other libraries.</source>
          <target state="translated">クラスのロードに加えて、クラスローダーはリソースの検索も担当します。リソースは、抽象的な「/」で区切られたパス名で識別されるデータ（ &quot; &lt;code&gt;.class&lt;/code&gt; &quot;ファイル、構成データ、またはイメージなど）です。リソースは通常、アプリケーションまたはライブラリにパッケージ化されているため、アプリケーションまたはライブラリ内のコードで見つけることができます。場合によっては、他のライブラリで見つけられるようにリソースが含まれています。</target>
        </trans-unit>
        <trans-unit id="ec4b220124539fad132ce531bce148656eb3511a" translate="yes" xml:space="preserve">
          <source>In addition to methods for accessing the position, limit, and capacity values and for marking and resetting, this class also defines the following operations upon buffers:</source>
          <target state="translated">位置、限界値、容量値へのアクセス、マーキング、リセットのメソッドに加え、バッファに対する以下の操作を定義します。</target>
        </trans-unit>
        <trans-unit id="c9c67790b6c91037224cb0e43f334ace4be9115f" translate="yes" xml:space="preserve">
          <source>In addition to raising the defined errors and warnings, implementations are expected to raise implementation specific errors and warnings for any other error and warning cases such as IO errors (file not found, permission denied,...) and so on.</source>
          <target state="translated">定義されたエラーと警告の発生に加えて、実装は、IOエラー(ファイルが見つからない、パーミッションが拒否された、など)のような他のエラーと警告のケースに対して、実装固有のエラーと警告を発生させることが期待されています。</target>
        </trans-unit>
        <trans-unit id="fd52079bbe205b3bcd374f203efffc0470e1745b" translate="yes" xml:space="preserve">
          <source>In addition to raising the defined errors and warnings, implementations are expected to raise implementation specific errors and warnings for any other error and warning cases such as IO errors (file not found, permission denied,...), XML well-formedness errors, and so on.</source>
          <target state="translated">定義されたエラーと警告の発生に加えて、実装は IO エラー (ファイルが見つからない、パーミッションが拒否された、...)、XML 整形エラーなどの他のエラーと警告のケースに対して、実装固有のエラーと警告を発生させることが期待されています。</target>
        </trans-unit>
        <trans-unit id="4afd3c157bbfa30f1d336e095cfe8fd7e7490d3a" translate="yes" xml:space="preserve">
          <source>In addition to read and write operations, this class defines the following operations:</source>
          <target state="translated">このクラスでは、読み書き操作の他に、以下の操作を定義しています。</target>
        </trans-unit>
        <trans-unit id="bec83f051a9027148e6a86a6c722b1724d907132" translate="yes" xml:space="preserve">
          <source>In addition to reading bytes from the input buffer and writing characters to the output buffer, this method returns a &lt;a href=&quot;coderresult&quot;&gt;&lt;code&gt;CoderResult&lt;/code&gt;&lt;/a&gt; object to describe its reason for termination:</source>
          <target state="translated">このメソッドは、入力バッファーからバイトを読み取り、文字を出力バッファーに書き込むことに加えて、終了の理由を説明する&lt;a href=&quot;coderresult&quot;&gt; &lt;code&gt;CoderResult&lt;/code&gt; &lt;/a&gt;オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="6511f7091630bdef1a1d4d49b93dfe3aaad905c0" translate="yes" xml:space="preserve">
          <source>In addition to reading characters from the input buffer and writing bytes to the output buffer, this method returns a &lt;a href=&quot;coderresult&quot;&gt;&lt;code&gt;CoderResult&lt;/code&gt;&lt;/a&gt; object to describe its reason for termination:</source>
          <target state="translated">このメソッドは、入力バッファーから文字を読み取り、出力バッファーにバイトを書き込むだけでなく、終了の理由を説明する&lt;a href=&quot;coderresult&quot;&gt; &lt;code&gt;CoderResult&lt;/code&gt; &lt;/a&gt;オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="426c21be8d23fc549653794732dd4ec11d9e7056" translate="yes" xml:space="preserve">
          <source>In addition to serving as a standalone class, this class provides &lt;code&gt;protected&lt;/code&gt; functionality that may be useful when creating customized task classes.</source>
          <target state="translated">このクラスは、スタンドアロンクラスとして機能するだけでなく、カスタマイズされたタスククラスを作成するときに役立つ &lt;code&gt;protected&lt;/code&gt; 機能を提供します。</target>
        </trans-unit>
        <trans-unit id="de03a6972c04d5b1cdbf9debef3b7b16ba094ed9" translate="yes" xml:space="preserve">
          <source>In addition to serving as the base class for other component-related events (InputEvent, FocusEvent, WindowEvent, ContainerEvent), this class defines the events that indicate changes in a component's size, position, or visibility.</source>
          <target state="translated">他のコンポーネント関連イベント(InputEvent、FocusEvent、WindowEvent、ContainerEvent)の基底クラスとしての役割に加えて、このクラスは、コンポーネントのサイズ、位置、または可視性の変更を示すイベントを定義します。</target>
        </trans-unit>
        <trans-unit id="67587c18b575b6663ae372b4e32c91ccb2a965bf" translate="yes" xml:space="preserve">
          <source>In addition to sorting &lt;code&gt;TableRowSorter&lt;/code&gt; provides the ability to filter. A filter is specified using the &lt;code&gt;setFilter&lt;/code&gt; method. The following example will only show rows containing the string &quot;foo&quot;:</source>
          <target state="translated">&lt;code&gt;TableRowSorter&lt;/code&gt; の並べ替えに加えて、フィルタリングする機能があります。フィルタは、 &lt;code&gt;setFilter&lt;/code&gt; メソッドを使用して指定されます。次の例では、文字列「foo」を含む行のみを表示します。</target>
        </trans-unit>
        <trans-unit id="ab8996f20e697a6d14a3748b6ff488d071e6087b" translate="yes" xml:space="preserve">
          <source>In addition to sorting, &lt;code&gt;DefaultRowSorter&lt;/code&gt; provides the ability to filter rows. Filtering is done by way of a &lt;code&gt;RowFilter&lt;/code&gt; that is specified using the &lt;code&gt;setRowFilter&lt;/code&gt; method. If no filter has been specified all rows are included.</source>
          <target state="translated">&lt;code&gt;DefaultRowSorter&lt;/code&gt; は、並べ替えに加えて、行をフィルタリングする機能を提供します。フィルタリングはの方法により行われている &lt;code&gt;RowFilter&lt;/code&gt; 使用して指定された &lt;code&gt;setRowFilter&lt;/code&gt; の方法を。フィルタが指定されていない場合は、すべての行が含まれます。</target>
        </trans-unit>
        <trans-unit id="70d7ce344f3e3d1092fd258a0707f75b56a6ae69" translate="yes" xml:space="preserve">
          <source>In addition to supporting</source>
          <target state="translated">サポートに加えて</target>
        </trans-unit>
        <trans-unit id="8c7f0496437b99dd6707c416172fdab3ba96b9f6" translate="yes" xml:space="preserve">
          <source>In addition to supporting access to variables under various access modes, a set of static methods, referred to as memory fence methods, is also provided for fine-grained control of memory ordering. The Java Language Specification permits other threads to observe operations as if they were executed in orders different than are apparent in program source code, subject to constraints arising, for example, from the use of locks, &lt;code&gt;volatile&lt;/code&gt; fields or VarHandles. The static methods, &lt;a href=&quot;#fullFence()&quot;&gt;&lt;code&gt;fullFence&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#acquireFence()&quot;&gt;&lt;code&gt;acquireFence&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#releaseFence()&quot;&gt;&lt;code&gt;releaseFence&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#loadLoadFence()&quot;&gt;&lt;code&gt;loadLoadFence&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#storeStoreFence()&quot;&gt;&lt;code&gt;storeStoreFence&lt;/code&gt;&lt;/a&gt;, can also be used to impose constraints. Their specifications, as is the case for certain access modes, are phrased in terms of the lack of &quot;reorderings&quot; -- observable ordering effects that might otherwise occur if the fence was not present. More precise phrasing of the specification of access mode methods and memory fence methods may accompany future updates of the Java Language Specification.</source>
          <target state="translated">さまざまなアクセスモードで変数へのアクセスをサポートすることに加えて、メモリフェンスメソッドと呼ばれる一連の静的メソッドも、メモリの順序をきめ細かく制御するために提供されています。 Java言語仕様では、他のスレッドが、プログラムのソースコードで見られるのとは異なる順序で実行されたかのように操作を監視できます。たとえば、ロック、 &lt;code&gt;volatile&lt;/code&gt; フィールド、VarHandlesの使用などの制約があります。静的メソッド、&lt;a href=&quot;#fullFence()&quot;&gt; &lt;code&gt;fullFence&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#acquireFence()&quot;&gt; &lt;code&gt;acquireFence&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#releaseFence()&quot;&gt; &lt;code&gt;releaseFence&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#loadLoadFence()&quot;&gt; &lt;code&gt;loadLoadFence&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#storeStoreFence()&quot;&gt; &lt;code&gt;storeStoreFence&lt;/code&gt; &lt;/a&gt;、を使用して制約を課すこともできます。それらの仕様は、特定のアクセスモードの場合と同様に、「並べ替え」の欠如という観点から表現されています。これは、フェンスが存在しない場合に発生する可能性のある観察可能な順序の影響です。アクセスモードメソッドとメモリフェンスメソッドの仕様のより正確な言い回しは、Java言語仕様の将来の更新に伴う可能性があります。</target>
        </trans-unit>
        <trans-unit id="1859092e8b0634ddf24a8ae6a3d0f5a50355a662" translate="yes" xml:space="preserve">
          <source>In addition to the &lt;code&gt;actionPerformed&lt;/code&gt; method defined by the &lt;code&gt;ActionListener&lt;/code&gt; interface, this interface allows the application to define, in a single place:</source>
          <target state="translated">&lt;code&gt;ActionListener&lt;/code&gt; インターフェースによって定義された &lt;code&gt;actionPerformed&lt;/code&gt; メソッドに加えて、このインターフェースにより、アプリケーションは1つの場所で以下を定義できます。</target>
        </trans-unit>
        <trans-unit id="dc3b5860862c2beb6fcb5c470df7d2a1f92ba9de" translate="yes" xml:space="preserve">
          <source>In addition to the QName types, the XPath API supports the use of Class types through the &lt;code&gt;XPathExpression.evaluteExpression(...)&lt;/code&gt; or &lt;code&gt;XPath.evaluateExpression(...)&lt;/code&gt; methods. The XPath data types are mapped to Class types as follows:</source>
          <target state="translated">QName型に加えて、XPath APIは、 &lt;code&gt;XPathExpression.evaluteExpression(...)&lt;/code&gt; または &lt;code&gt;XPath.evaluateExpression(...)&lt;/code&gt; メソッドによるクラス型の使用をサポートします。XPathデータ型は、次のようにクラス型にマップされます。</target>
        </trans-unit>
        <trans-unit id="1db36d86361d1b95831e09d49fbfd3fd4e22ef41" translate="yes" xml:space="preserve">
          <source>In addition to the above entry types, a catalog may define nextCatalog entries to add additional catalog entry files.</source>
          <target state="translated">上記のエントリタイプに加えて、カタログは、追加のカタログエントリファイルを追加するためにnextCatalogエントリを定義することができます。</target>
        </trans-unit>
        <trans-unit id="18c728a111c8455b1f773c9317d47ab5f17511c4" translate="yes" xml:space="preserve">
          <source>In addition to the abstract methods of &lt;a href=&quot;view&quot;&gt;&lt;code&gt;View&lt;/code&gt;&lt;/a&gt;, subclasses of &lt;code&gt;CompositeView&lt;/code&gt; will need to override:</source>
          <target state="translated">&lt;a href=&quot;view&quot;&gt; &lt;code&gt;View&lt;/code&gt; &lt;/a&gt;の抽象メソッドに加えて、 &lt;code&gt;CompositeView&lt;/code&gt; のサブクラスは以下をオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="ce31b60794642f2f5ac852c05072694e4e7f3686" translate="yes" xml:space="preserve">
          <source>In addition to the actions performed by the &lt;a href=&quot;#shutdown()&quot;&gt;&lt;code&gt;shutdown&lt;/code&gt;&lt;/a&gt; method, this method invokes the &lt;a href=&quot;asynchronouschannel#close()&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; method on all open channels in the group. This method does not attempt to stop or interrupt threads that are executing completion handlers. The group terminates when all actively executing completion handlers have run to completion and all resources have been released. This method may be invoked at any time. If some other thread has already invoked it, then another invocation will block until the first invocation is complete, after which it will return without effect.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;#shutdown()&quot;&gt; &lt;code&gt;shutdown&lt;/code&gt; &lt;/a&gt;メソッドによって実行されるアクションに加えて、グループ内のすべての開いているチャネルで&lt;a href=&quot;asynchronouschannel#close()&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt;メソッドを呼び出します。このメソッドは、完了ハンドラーを実行しているスレッドを停止または中断しようとはしません。グループは、アクティブに実行されているすべての完了ハンドラーが完了するまで実行され、すべてのリソースが解放されると終了します。このメソッドはいつでも呼び出すことができます。他のスレッドがすでにそれを呼び出している場合、別の呼び出しは最初の呼び出しが完了するまでブロックされ、その後は効果なしで戻ります。</target>
        </trans-unit>
        <trans-unit id="c50e8ec4869b062e7983b8307d360d622f72d425" translate="yes" xml:space="preserve">
          <source>In addition to the actions performed by the &lt;a href=&quot;asynchronouschannelgroup#shutdown--&quot;&gt;&lt;code&gt;shutdown&lt;/code&gt;&lt;/a&gt; method, this method invokes the &lt;a href=&quot;asynchronouschannel#close--&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; method on all open channels in the group. This method does not attempt to stop or interrupt threads that are executing completion handlers. The group terminates when all actively executing completion handlers have run to completion and all resources have been released. This method may be invoked at any time. If some other thread has already invoked it, then another invocation will block until the first invocation is complete, after which it will return without effect.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;asynchronouschannelgroup#shutdown--&quot;&gt; &lt;code&gt;shutdown&lt;/code&gt; &lt;/a&gt;メソッドによって実行されるアクションに加えて、グループ内のすべての開いているチャネルで&lt;a href=&quot;asynchronouschannel#close--&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt;メソッドを呼び出します。このメソッドは、完了ハンドラーを実行しているスレッドを停止または中断しようとしません。グループは、アクティブに実行されているすべての完了ハンドラーが完全に実行され、すべてのリソースが解放されると終了します。このメソッドはいつでも呼び出すことができます。他のスレッドがすでにそれを呼び出している場合、別の呼び出しは最初の呼び出しが完了するまでブロックされ、その後、効果なしに戻ります。</target>
        </trans-unit>
        <trans-unit id="db5536f8eff9177c520068c301225ff17b585888" translate="yes" xml:space="preserve">
          <source>In addition to the available calendar types returned by the &lt;a href=&quot;calendar#getAvailableCalendarTypes()&quot;&gt;&lt;code&gt;Calendar.getAvailableCalendarTypes&lt;/code&gt;&lt;/a&gt; method, &lt;code&gt;&quot;gregorian&quot;&lt;/code&gt; and &lt;code&gt;&quot;iso8601&quot;&lt;/code&gt; as aliases of &lt;code&gt;&quot;gregory&quot;&lt;/code&gt; can be used with this method.</source>
          <target state="translated">&lt;a href=&quot;calendar#getAvailableCalendarTypes()&quot;&gt; &lt;code&gt;Calendar.getAvailableCalendarTypes&lt;/code&gt; &lt;/a&gt;メソッドによって返される使用可能なカレンダータイプに加えて、 &lt;code&gt;&quot;gregory&quot;&lt;/code&gt; エイリアスとして &lt;code&gt;&quot;gregorian&quot;&lt;/code&gt; および &lt;code&gt;&quot;iso8601&quot;&lt;/code&gt; をこのメソッドで使用できます。</target>
        </trans-unit>
        <trans-unit id="28f37e8f3f69aa56facb878f44fda7bd5bd3c674" translate="yes" xml:space="preserve">
          <source>In addition to the available calendar types returned by the &lt;a href=&quot;calendar#getAvailableCalendarTypes--&quot;&gt;&lt;code&gt;Calendar.getAvailableCalendarTypes&lt;/code&gt;&lt;/a&gt; method, &lt;code&gt;&quot;gregorian&quot;&lt;/code&gt; and &lt;code&gt;&quot;iso8601&quot;&lt;/code&gt; as aliases of &lt;code&gt;&quot;gregory&quot;&lt;/code&gt; can be used with this method.</source>
          <target state="translated">返された利用可能なカレンダータイプに加えて&lt;a href=&quot;calendar#getAvailableCalendarTypes--&quot;&gt; &lt;code&gt;Calendar.getAvailableCalendarTypes&lt;/code&gt; の&lt;/a&gt;方法、 &lt;code&gt;&quot;gregorian&quot;&lt;/code&gt; と &lt;code&gt;&quot;iso8601&quot;&lt;/code&gt; の別名として &lt;code&gt;&quot;gregory&quot;&lt;/code&gt; この方法で使用することができます。</target>
        </trans-unit>
        <trans-unit id="fd12ac6606823d59289f6ff193c3f677e411d491" translate="yes" xml:space="preserve">
          <source>In addition to the callback methods, the &lt;a href=&quot;#toBundleName(java.lang.String,java.util.Locale)&quot;&gt;&lt;code&gt;toBundleName&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#toResourceName(java.lang.String,java.lang.String)&quot;&gt;&lt;code&gt;toResourceName&lt;/code&gt;&lt;/a&gt; methods are defined primarily for convenience in implementing the callback methods. However, the &lt;code&gt;toBundleName&lt;/code&gt; method could be overridden to provide different conventions in the organization and packaging of localized resources. The &lt;code&gt;toResourceName&lt;/code&gt; method is &lt;code&gt;final&lt;/code&gt; to avoid use of wrong resource and class name separators.</source>
          <target state="translated">コールバックメソッドに加えて、&lt;a href=&quot;#toBundleName(java.lang.String,java.util.Locale)&quot;&gt; &lt;code&gt;toBundleName&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;#toResourceName(java.lang.String,java.lang.String)&quot;&gt; &lt;code&gt;toResourceName&lt;/code&gt; &lt;/a&gt;方法は、コールバックメソッドを実装するの便宜上、主に定義されています。ただし、 &lt;code&gt;toBundleName&lt;/code&gt; メソッドをオーバーライドして、ローカライズされたリソースの編成とパッケージ化でさまざまな規則を提供することができます。 &lt;code&gt;toResourceName&lt;/code&gt; の方法があり &lt;code&gt;final&lt;/code&gt; 間違ったリソースとクラス名のセパレータの使用を避けること。</target>
        </trans-unit>
        <trans-unit id="e0a216003ee5984925855b502c7955bbfbb35501" translate="yes" xml:space="preserve">
          <source>In addition to the callback methods, the &lt;a href=&quot;resourcebundle.control#toBundleName-java.lang.String-java.util.Locale-&quot;&gt;&lt;code&gt;toBundleName&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;resourcebundle.control#toResourceName-java.lang.String-java.lang.String-&quot;&gt;&lt;code&gt;toResourceName&lt;/code&gt;&lt;/a&gt; methods are defined primarily for convenience in implementing the callback methods. However, the &lt;code&gt;toBundleName&lt;/code&gt; method could be overridden to provide different conventions in the organization and packaging of localized resources. The &lt;code&gt;toResourceName&lt;/code&gt; method is &lt;code&gt;final&lt;/code&gt; to avoid use of wrong resource and class name separators.</source>
          <target state="translated">コールバックメソッドに加えて、&lt;a href=&quot;resourcebundle.control#toBundleName-java.lang.String-java.util.Locale-&quot;&gt; &lt;code&gt;toBundleName&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;resourcebundle.control#toResourceName-java.lang.String-java.lang.String-&quot;&gt; &lt;code&gt;toResourceName&lt;/code&gt; &lt;/a&gt;方法は、コールバックメソッドを実装するの便宜上、主に定義されています。ただし、 &lt;code&gt;toBundleName&lt;/code&gt; メソッドをオーバーライドして、ローカライズされたリソースの編成とパッケージ化にさまざまな規則を提供することができます。 &lt;code&gt;toResourceName&lt;/code&gt; の方法があり &lt;code&gt;final&lt;/code&gt; 間違ったリソースとクラス名のセパレータの使用を避けること。</target>
        </trans-unit>
        <trans-unit id="491aa20d021002d74c407245ae5546393cb48e59" translate="yes" xml:space="preserve">
          <source>In addition to the date-time parameters, the &lt;a href=&quot;#setLocale(java.util.Locale)&quot;&gt;locale&lt;/a&gt;, &lt;a href=&quot;#setTimeZone(java.util.TimeZone)&quot;&gt;time zone&lt;/a&gt;, &lt;a href=&quot;#setWeekDefinition(int,int)&quot;&gt;week definition&lt;/a&gt;, and &lt;a href=&quot;#setLenient(boolean)&quot;&gt;leniency mode&lt;/a&gt; parameters can be set.</source>
          <target state="translated">日時パラメーターに加えて、&lt;a href=&quot;#setLocale(java.util.Locale)&quot;&gt;ロケール&lt;/a&gt;、&lt;a href=&quot;#setTimeZone(java.util.TimeZone)&quot;&gt;タイムゾーン&lt;/a&gt;、&lt;a href=&quot;#setWeekDefinition(int,int)&quot;&gt;週の定義&lt;/a&gt;、および&lt;a href=&quot;#setLenient(boolean)&quot;&gt;リーニエンシーモードの&lt;/a&gt;パラメーターを設定できます。</target>
        </trans-unit>
        <trans-unit id="cfc19ac6ac647d4ae06152ad3a7c4c90d5c62ae5" translate="yes" xml:space="preserve">
          <source>In addition to the date-time parameters, the &lt;a href=&quot;calendar.builder#setLocale-java.util.Locale-&quot;&gt;locale&lt;/a&gt;, &lt;a href=&quot;calendar.builder#setTimeZone-java.util.TimeZone-&quot;&gt;time zone&lt;/a&gt;, &lt;a href=&quot;calendar.builder#setWeekDefinition-int-int-&quot;&gt;week definition&lt;/a&gt;, and &lt;a href=&quot;calendar.builder#setLenient-boolean-&quot;&gt;leniency mode&lt;/a&gt; parameters can be set.</source>
          <target state="translated">日時パラメータに加えて、&lt;a href=&quot;calendar.builder#setLocale-java.util.Locale-&quot;&gt;ロケール&lt;/a&gt;、&lt;a href=&quot;calendar.builder#setTimeZone-java.util.TimeZone-&quot;&gt;タイムゾーン&lt;/a&gt;、&lt;a href=&quot;calendar.builder#setWeekDefinition-int-int-&quot;&gt;週の定義&lt;/a&gt;、および&lt;a href=&quot;calendar.builder#setLenient-boolean-&quot;&gt;制限モードの&lt;/a&gt;パラメータを設定できます。</target>
        </trans-unit>
        <trans-unit id="7614b1698980716dbcbacae739451584fa463381" translate="yes" xml:space="preserve">
          <source>In addition to the encoding, the audio format includes other properties that further specify the exact arrangement of the data. These include the number of channels, sample rate, sample size, byte order, frame rate, and frame size. Sounds may have different numbers of audio channels: one for mono, two for stereo. The sample rate measures how many &quot;snapshots&quot; (samples) of the sound pressure are taken per second, per channel. (If the sound is stereo rather than mono, two samples are actually measured at each instant of time: one for the left channel, and another for the right channel; however, the sample rate still measures the number per channel, so the rate is the same regardless of the number of channels. This is the standard use of the term.) The sample size indicates how many bits are used to store each snapshot; 8 and 16 are typical values. For 16-bit samples (or any other sample size larger than a byte), byte order is important; the bytes in each sample are arranged in either the &quot;little-endian&quot; or &quot;big-endian&quot; style. For encodings like PCM, a frame consists of the set of samples for all channels at a given point in time, and so the size of a frame (in bytes) is always equal to the size of a sample (in bytes) times the number of channels. However, with some other sorts of encodings a frame can contain a bundle of compressed data for a whole series of samples, as well as additional, non-sample data. For such encodings, the sample rate and sample size refer to the data after it is decoded into PCM, and so they are completely different from the frame rate and frame size.</source>
          <target state="translated">エンコーディングに加えて、オーディオフォーマットには、データの正確な配置をさらに特定する他のプロパティが含まれています。これらには、チャンネル数、サンプルレート、サンプルサイズ、バイトオーダー、フレームレート、フレームサイズが含まれます。サウンドは、モノラルには1つ、ステレオには2つの異なるチャンネル数を持つことができます。サンプルレートは、音圧の「スナップショット」(サンプル)の数を測定します。モノラルではなくステレオの場合、実際には各瞬間に 2 つのサンプルが測定されます:1 つは左チャンネル、もう 1 つは右チャンネルですが、サンプルレートはチャンネルごとの数を測定します。これがこの用語の標準的な使用法です)。サンプルサイズは、各スナップショットを保存するのに使用するビット数を示します。16 ビットサンプル(または 1 バイトよりも大きなサンプルサイズ)では、バイトの順序が重要です。PCM のようなエンコーディングでは、フレームは、ある時点でのすべてのチャンネルのサンプルの集合で構成されているため、フレームのサイズ(バイト数)は、常にサンプルのサイズ(バイト数)にチャンネル数をかけたものになります。しかし、他の種類のエンコーディングでは、フレームには一連のサンプル全体の圧縮データの束と、追加の非サンプルデータが含まれている場合があります。このようなエンコーディングでは、サンプルレートとサンプルサイズは、PCMにデコードされた後のデータを指すため、フレームレートとフレームサイズとは全く異なります。</target>
        </trans-unit>
        <trans-unit id="d6a83c2e73788cf89b876bfa744823e9380a8ac0" translate="yes" xml:space="preserve">
          <source>In addition to the familiar read, write, and close operations of byte channels, this class defines the following file-specific operations:</source>
          <target state="translated">このクラスは、バイトチャネルのおなじみの読み込み、書き込み、クローズ操作に加えて、以下のファイル固有の操作を定義しています。</target>
        </trans-unit>
        <trans-unit id="4f1190da5af20b63b0a7ea53b9dcbc33953d6769" translate="yes" xml:space="preserve">
          <source>In addition to the format, formatters can be created with desired Locale, Chronology, ZoneId, and DecimalStyle.</source>
          <target state="translated">フォーマットに加えて、Locale、Chronology、ZoneId、DecimalStyleを指定してフォーマッタを作成することができます。</target>
        </trans-unit>
        <trans-unit id="1e059e38a779b1f301213b52de153cb2600a26b3" translate="yes" xml:space="preserve">
          <source>In addition to the method area, a Java virtual machine implementation may require memory for internal processing or optimization which also belongs to non-heap memory. For example, the JIT compiler requires memory for storing the native machine code translated from the Java virtual machine code for high performance.</source>
          <target state="translated">Java仮想マシンの実装では、メソッド領域以外にも非ヒープメモリに属する内部処理や最適化のためのメモリを必要とする場合があります。例えば、JITコンパイラは、Java仮想マシンコードから翻訳されたネイティブマシンコードを高性能化するために格納するためのメモリを必要とする。</target>
        </trans-unit>
        <trans-unit id="ee283b61b3d9459d225d145542e24d6b57b4d6d2" translate="yes" xml:space="preserve">
          <source>In addition to the methods defined by this class, a file store may support one or more &lt;a href=&quot;attribute/filestoreattributeview&quot;&gt;&lt;code&gt;FileStoreAttributeView&lt;/code&gt;&lt;/a&gt; classes that provide a read-only or updatable view of a set of file store attributes.</source>
          <target state="translated">このクラスで定義されたメソッドに加えて、ファイルストアは、ファイルストア属性のセットの読み取り専用または更新可能なビューを提供する1つ以上の&lt;a href=&quot;attribute/filestoreattributeview&quot;&gt; &lt;code&gt;FileStoreAttributeView&lt;/code&gt; &lt;/a&gt;クラスをサポートする場合があります。</target>
        </trans-unit>
        <trans-unit id="2986e636ae207892e9dac39e23fe9879168cb86f" translate="yes" xml:space="preserve">
          <source>In addition to the methods provided by Document and StyledDocument for mutating an HTMLDocument, HTMLDocument provides a number of convenience methods. The following methods can be used to insert HTML content into an existing document.</source>
          <target state="translated">HTMLDocumentを変異させるためにDocumentとStyledDocumentが提供するメソッドに加えて、HTMLDocumentは多くの便利なメソッドを提供しています。以下のメソッドを使用して、既存のドキュメントに HTML コンテンツを挿入することができます。</target>
        </trans-unit>
        <trans-unit id="432330f85a6a85defb1d0daea6e69ee9342c7288" translate="yes" xml:space="preserve">
          <source>In addition to the network-oriented channels described in &lt;a href=&quot;../nio/channels/spi/selectorprovider#inheritedChannel()&quot;&gt;&lt;code&gt;inheritedChannel&lt;/code&gt;&lt;/a&gt;, this method may return other kinds of channels in the future.</source>
          <target state="translated">このメソッドは、&lt;a href=&quot;../nio/channels/spi/selectorprovider#inheritedChannel()&quot;&gt; &lt;code&gt;inheritedChannel&lt;/code&gt; &lt;/a&gt;で説明されているネットワーク指向のチャネルに加えて、将来的に他の種類のチャネルを返す可能性があります。</target>
        </trans-unit>
        <trans-unit id="6b02ab5a714cd80e6567da7665467edf7fd5e8ed" translate="yes" xml:space="preserve">
          <source>In addition to the network-oriented channels described in &lt;a href=&quot;../nio/channels/spi/selectorprovider#inheritedChannel--&quot;&gt;&lt;code&gt;inheritedChannel&lt;/code&gt;&lt;/a&gt;, this method may return other kinds of channels in the future.</source>
          <target state="translated">&lt;a href=&quot;../nio/channels/spi/selectorprovider#inheritedChannel--&quot;&gt; &lt;code&gt;inheritedChannel&lt;/code&gt; &lt;/a&gt;で説明されているネットワーク指向のチャネルに加えて、このメソッドは将来、他の種類のチャネルを返す可能性があります。</target>
        </trans-unit>
        <trans-unit id="a33bc2b0c620d7bc4fb0799e179286bb4b725634" translate="yes" xml:space="preserve">
          <source>In addition to the network-oriented channels described, this method may return other kinds of channels in the future.</source>
          <target state="translated">このメソッドは、説明したネットワーク指向のチャンネルに加えて、将来的には他の種類のチャンネルを返す可能性があります。</target>
        </trans-unit>
        <trans-unit id="a905ba3369b4a4f562d01a3f87216887f67f158a" translate="yes" xml:space="preserve">
          <source>In addition to the parameters described here, other GCM inputs/output (Additional Authenticated Data (AAD), Keys, block ciphers, plain/ciphertext and authentication tags) are handled in the &lt;code&gt;
 Cipher&lt;/code&gt; class.</source>
          <target state="translated">ここで説明するパラメーターに加えて、他のGCM入力/出力（追加の認証データ（AAD）、キー、ブロック暗号、プレーン/暗号文、および認証タグ）は &lt;code&gt; Cipher&lt;/code&gt; クラスで処理されます。</target>
        </trans-unit>
        <trans-unit id="6ed6b95a08d3c44af62e52f25de87e487d831331" translate="yes" xml:space="preserve">
          <source>In addition to the parameters described here, other GCM inputs/output (Additional Authenticated Data (AAD), Keys, block ciphers, plain/ciphertext and authentication tags) are handled in the &lt;code&gt;Cipher&lt;/code&gt; class.</source>
          <target state="translated">ここで説明するパラメーターに加えて、他のGCM入出力（追加の認証データ（AAD）、キー、ブロック暗号、プレーン/暗号テキスト、および認証タグ）は &lt;code&gt;Cipher&lt;/code&gt; クラスで処理されます。</target>
        </trans-unit>
        <trans-unit id="2068645f319b6e731f1184b3eeafec498fde158b" translate="yes" xml:space="preserve">
          <source>In addition to the parameters recognized by the &lt;a href=&quot;https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMConfiguration&quot;&gt;DOMConfiguration&lt;/a&gt; interface defined in [&lt;a href=&quot;http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407&quot;&gt;DOM Level 3 Core&lt;/a&gt;] , the &lt;code&gt;DOMConfiguration&lt;/code&gt; objects for &lt;code&gt;LSSerializer&lt;/code&gt; adds, or modifies, the following parameters:</source>
          <target state="translated">In addition to the parameters recognized by the &lt;a href=&quot;https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMConfiguration&quot;&gt;DOMConfiguration&lt;/a&gt; interface defined in [&lt;a href=&quot;http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407&quot;&gt;DOM Level 3 Core&lt;/a&gt;] , the &lt;code&gt;DOMConfiguration&lt;/code&gt; objects for &lt;code&gt;LSSerializer&lt;/code&gt; adds, or modifies, the following parameters:</target>
        </trans-unit>
        <trans-unit id="48faa16800a54ef7adf79ec21201779ba48c231e" translate="yes" xml:space="preserve">
          <source>In addition to the parameters recognized in on the &lt;a href=&quot;https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMConfiguration&quot;&gt;DOMConfiguration&lt;/a&gt; interface defined in [&lt;a href=&quot;http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407&quot;&gt;DOM Level 3 Core&lt;/a&gt;] , the &lt;code&gt;DOMConfiguration&lt;/code&gt; objects for &lt;code&gt;LSParser&lt;/code&gt; add or modify the following parameters:</source>
          <target state="translated">In addition to the parameters recognized in on the &lt;a href=&quot;https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMConfiguration&quot;&gt;DOMConfiguration&lt;/a&gt; interface defined in [&lt;a href=&quot;http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407&quot;&gt;DOM Level 3 Core&lt;/a&gt;] , the &lt;code&gt;DOMConfiguration&lt;/code&gt; objects for &lt;code&gt;LSParser&lt;/code&gt; add or modify the following parameters:</target>
        </trans-unit>
        <trans-unit id="6f624142e4495c5af474cb0a78db2e72fbaa8b70" translate="yes" xml:space="preserve">
          <source>In addition to the predefined implementations in &lt;a href=&quot;collectors&quot;&gt;&lt;code&gt;Collectors&lt;/code&gt;&lt;/a&gt;, the static factory methods &lt;a href=&quot;#of(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.stream.Collector.Characteristics...)&quot;&gt;&lt;code&gt;of(Supplier, BiConsumer, BinaryOperator, Characteristics...)&lt;/code&gt;&lt;/a&gt; can be used to construct collectors. For example, you could create a collector that accumulates widgets into a &lt;code&gt;TreeSet&lt;/code&gt; with:</source>
          <target state="translated">In addition to the predefined implementations in &lt;a href=&quot;collectors&quot;&gt; &lt;code&gt;Collectors&lt;/code&gt; &lt;/a&gt;, the static factory methods &lt;a href=&quot;#of(java.util.function.Supplier,java.util.function.BiConsumer,java.util.function.BinaryOperator,java.util.stream.Collector.Characteristics...)&quot;&gt; &lt;code&gt;of(Supplier, BiConsumer, BinaryOperator, Characteristics...)&lt;/code&gt; &lt;/a&gt; can be used to construct collectors. For example, you could create a collector that accumulates widgets into a &lt;code&gt;TreeSet&lt;/code&gt; with:</target>
        </trans-unit>
        <trans-unit id="df0afba264acde97691ac7208acbd4a41b35b800" translate="yes" xml:space="preserve">
          <source>In addition to the predefined implementations in &lt;a href=&quot;collectors&quot;&gt;&lt;code&gt;Collectors&lt;/code&gt;&lt;/a&gt;, the static factory methods &lt;a href=&quot;collector#of-java.util.function.Supplier-java.util.function.BiConsumer-java.util.function.BinaryOperator-java.util.stream.Collector.Characteristics...-&quot;&gt;&lt;code&gt;of(Supplier, BiConsumer, BinaryOperator, Characteristics...)&lt;/code&gt;&lt;/a&gt; can be used to construct collectors. For example, you could create a collector that accumulates widgets into a &lt;code&gt;TreeSet&lt;/code&gt; with:</source>
          <target state="translated">&lt;a href=&quot;collectors&quot;&gt; &lt;code&gt;Collectors&lt;/code&gt; &lt;/a&gt;の事前定義された実装に加えて、静的ファクトリーメソッド&lt;a href=&quot;collector#of-java.util.function.Supplier-java.util.function.BiConsumer-java.util.function.BinaryOperator-java.util.stream.Collector.Characteristics...-&quot;&gt; &lt;code&gt;of(Supplier, BiConsumer, BinaryOperator, Characteristics...)&lt;/code&gt; &lt;/a&gt;を使用してコレクターを構築できます。たとえば、ウィジェットを &lt;code&gt;TreeSet&lt;/code&gt; に蓄積するコレクターを次のように作成できます。</target>
        </trans-unit>
        <trans-unit id="adf89d4fe796fb988f7407950dd9eefb826761d9" translate="yes" xml:space="preserve">
          <source>In addition to the properties of the super class, the &lt;code&gt;Expression&lt;/code&gt; object provides a &lt;em&gt;value&lt;/em&gt; which is the object returned when this expression is evaluated. The return value is typically not provided by the caller and is instead computed by dynamically finding the method and invoking it when the first call to &lt;code&gt;getValue&lt;/code&gt; is made.</source>
          <target state="translated">スーパークラスのプロパティに加えて、 &lt;code&gt;Expression&lt;/code&gt; オブジェクトは、この式が評価されたときに返されるオブジェクトである&lt;em&gt;値&lt;/em&gt;を提供し&lt;em&gt;ます&lt;/em&gt;。通常、戻り値は呼び出し元から提供されるのではなく、メソッドを動的に検索し、 &lt;code&gt;getValue&lt;/code&gt; への最初の呼び出しが行われたときにそれを呼び出すことによって計算されます。</target>
        </trans-unit>
        <trans-unit id="d2394c9520c75ba71dccb27ec850e0d98f0290f5" translate="yes" xml:space="preserve">
          <source>In addition to the restrictions on characters spelt out above, no part of an ObjectName may contain a newline character (&lt;code&gt;'\n'&lt;/code&gt;), whether the domain, a key, or a value, whether quoted or unquoted. The newline character can be represented in a quoted value with the sequence &lt;code&gt;\n&lt;/code&gt;.</source>
          <target state="translated">上記のスペルの文字の制限に加えて、ObjectNameのどの部分にも、ドメイン、キー、または値（引用符付きまたは引用符なし）にかかわらず、改行文字（ &lt;code&gt;'\n'&lt;/code&gt; ）を含めることはできません。改行文字は、シーケンス &lt;code&gt;\n&lt;/code&gt; 引用符付きの値で表すことができます。</target>
        </trans-unit>
        <trans-unit id="c33e9e8d1cb86388922d67f15e1b30f1c2d89d24" translate="yes" xml:space="preserve">
          <source>In addition to the scroll bars and viewport, a &lt;code&gt;JScrollPane&lt;/code&gt; can have a column header and a row header. Each of these is a &lt;code&gt;JViewport&lt;/code&gt; object that you specify with &lt;code&gt;setRowHeaderView&lt;/code&gt;, and &lt;code&gt;setColumnHeaderView&lt;/code&gt;. The column header viewport automatically scrolls left and right, tracking the left-right scrolling of the main viewport. (It never scrolls vertically, however.) The row header acts in a similar fashion.</source>
          <target state="translated">In addition to the scroll bars and viewport, a &lt;code&gt;JScrollPane&lt;/code&gt; can have a column header and a row header. Each of these is a &lt;code&gt;JViewport&lt;/code&gt; object that you specify with &lt;code&gt;setRowHeaderView&lt;/code&gt; , and &lt;code&gt;setColumnHeaderView&lt;/code&gt; . The column header viewport automatically scrolls left and right, tracking the left-right scrolling of the main viewport. (It never scrolls vertically, however.) The row header acts in a similar fashion.</target>
        </trans-unit>
        <trans-unit id="b2c1ff8172f1e7aba63f37e75d386a7d225ec94c" translate="yes" xml:space="preserve">
          <source>In addition to the standard session attributes, SSL sessions expose these read-only attributes:</source>
          <target state="translated">標準のセッション属性に加えて、SSLセッションはこれらの読み取り専用属性を公開しています。</target>
        </trans-unit>
        <trans-unit id="9f4f266b17adc8e2aeb86a93d5446474a986f525" translate="yes" xml:space="preserve">
          <source>In addition to the standard system properties, the system properties may include the following keys:</source>
          <target state="translated">標準のシステムプロパティに加えて、システムプロパティには以下のキーが含まれていてもよい。</target>
        </trans-unit>
        <trans-unit id="83938c315c82af2806ebd155f43016814eda7fb4" translate="yes" xml:space="preserve">
          <source>In addition to the textual enum name, each day-of-week has an &lt;code&gt;int&lt;/code&gt; value. The &lt;code&gt;int&lt;/code&gt; value follows the ISO-8601 standard, from 1 (Monday) to 7 (Sunday). It is recommended that applications use the enum rather than the &lt;code&gt;int&lt;/code&gt; value to ensure code clarity.</source>
          <target state="translated">テキストの列挙名に加えて、各曜日には &lt;code&gt;int&lt;/code&gt; 値があります。 &lt;code&gt;int&lt;/code&gt; 型の値は、7日（日）に1からISO-8601標準、（月曜日）に従います。コードを明確にするために、アプリケーションでは &lt;code&gt;int&lt;/code&gt; 値ではなくenumを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="2d4d3851f8f7049f215ed834737db941515f6412" translate="yes" xml:space="preserve">
          <source>In addition to the textual enum name, each month-of-year has an &lt;code&gt;int&lt;/code&gt; value. The &lt;code&gt;int&lt;/code&gt; value follows normal usage and the ISO-8601 standard, from 1 (January) to 12 (December). It is recommended that applications use the enum rather than the &lt;code&gt;int&lt;/code&gt; value to ensure code clarity.</source>
          <target state="translated">テキストの列挙名に加えて、各月には &lt;code&gt;int&lt;/code&gt; 値があります。 &lt;code&gt;int&lt;/code&gt; 値は1（1月）から12（12月）への通常の使用およびISO-8601標準に従います。コードを明確にするために、アプリケーションでは &lt;code&gt;int&lt;/code&gt; 値ではなくenumを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="dbbe182566bca48d0fbeb7cd780b3e1c5f49a252" translate="yes" xml:space="preserve">
          <source>In addition to the usage restrictions imposed by its &lt;a href=&quot;annotation/target&quot;&gt;&lt;code&gt;@Target&lt;/code&gt;&lt;/a&gt; meta-annotation, compilers are required to implement additional usage restrictions on this annotation type; it is a compile-time error if a method or constructor declaration is annotated with a &lt;code&gt;@SafeVarargs&lt;/code&gt; annotation, and either:</source>
          <target state="translated">&lt;a href=&quot;annotation/target&quot;&gt; &lt;code&gt;@Target&lt;/code&gt; &lt;/a&gt;メタアノテーションによって課される使用制限に加えて、コンパイラーはこのアノテーションタイプに追加の使用制限を実装する必要があります。メソッドまたはコンストラクター宣言に &lt;code&gt;@SafeVarargs&lt;/code&gt; アノテーションが付けられている場合、および次のいずれかの場合は、コンパイル時エラーになります。</target>
        </trans-unit>
        <trans-unit id="48906b2213eda76c1ef9cb3120b0f8752c37d2ea" translate="yes" xml:space="preserve">
          <source>In addition to these and related methods for directly manipulating status and results, CompletableFuture implements interface &lt;a href=&quot;completionstage&quot;&gt;&lt;code&gt;CompletionStage&lt;/code&gt;&lt;/a&gt; with the following policies:</source>
          <target state="translated">ステータスと結果を直接操作するためのこれらのメソッドと関連するメソッドに加えて、CompletableFuture は、次のポリシーでインターフェイス&lt;a href=&quot;completionstage&quot;&gt; &lt;code&gt;CompletionStage&lt;/code&gt; &lt;/a&gt;を実装します。</target>
        </trans-unit>
        <trans-unit id="53919e02325aec34ba4ab39d138ab42852e587c0" translate="yes" xml:space="preserve">
          <source>In addition to using a delegation model, this persistence scheme differs from traditional serialization schemes in requiring an analog of the &lt;code&gt;writeObject&lt;/code&gt; method without a corresponding &lt;code&gt;readObject&lt;/code&gt; method. The &lt;code&gt;writeObject&lt;/code&gt; analog encodes each instance in terms of its public API and there is no need to define a &lt;code&gt;readObject&lt;/code&gt; analog since the procedure for reading the serialized form is defined by the semantics of method invocation as laid out in the Java Language Specification. Breaking the dependency between &lt;code&gt;writeObject&lt;/code&gt; and &lt;code&gt;readObject&lt;/code&gt; implementations, which may change from version to version, is the key factor in making the archives produced by this technique immune to changes in the private implementations of the classes to which they refer.</source>
          <target state="translated">委任モデルを使用することに加えて、この永続化スキームは、対応する &lt;code&gt;readObject&lt;/code&gt; メソッドなしで &lt;code&gt;writeObject&lt;/code&gt; メソッドの類似物を必要とする点で、従来のシリアル化スキームとは異なります。 &lt;code&gt;writeObject&lt;/code&gt; その公開APIの点でアナログエンコード各インスタンスと定義する必要がない &lt;code&gt;readObject&lt;/code&gt; Java言語仕様にレイアウトとして直列化された形式を読み取るための手順は、メソッド呼び出しのセマンティクスによって定義されているのでアナログ。 &lt;code&gt;writeObject&lt;/code&gt; と &lt;code&gt;readObject&lt;/code&gt; 間の依存関係を解消するバージョンごとに変更される可能性のある実装は、この手法によって生成されるアーカイブを、それらが参照するクラスのプライベート実装の変更の影響を受けないようにするための重要な要素です。</target>
        </trans-unit>
        <trans-unit id="af9d69a85de071c5503c968b6878570e7a051f81" translate="yes" xml:space="preserve">
          <source>In addition,</source>
          <target state="translated">おまけに</target>
        </trans-unit>
        <trans-unit id="d13d4f13ec02cd9aaa9c26800becfd83ad1806e2" translate="yes" xml:space="preserve">
          <source>In addition, &lt;code&gt;BorderLayout&lt;/code&gt; supports the relative positioning constants, &lt;code&gt;PAGE_START&lt;/code&gt;, &lt;code&gt;PAGE_END&lt;/code&gt;, &lt;code&gt;LINE_START&lt;/code&gt;, and &lt;code&gt;LINE_END&lt;/code&gt;. In a container whose &lt;code&gt;ComponentOrientation&lt;/code&gt; is set to &lt;code&gt;ComponentOrientation.LEFT_TO_RIGHT&lt;/code&gt;, these constants map to &lt;code&gt;NORTH&lt;/code&gt;, &lt;code&gt;SOUTH&lt;/code&gt;, &lt;code&gt;WEST&lt;/code&gt;, and &lt;code&gt;EAST&lt;/code&gt;, respectively.</source>
          <target state="translated">In addition, &lt;code&gt;BorderLayout&lt;/code&gt; supports the relative positioning constants, &lt;code&gt;PAGE_START&lt;/code&gt; , &lt;code&gt;PAGE_END&lt;/code&gt; , &lt;code&gt;LINE_START&lt;/code&gt; , and &lt;code&gt;LINE_END&lt;/code&gt; . In a container whose &lt;code&gt;ComponentOrientation&lt;/code&gt; is set to &lt;code&gt;ComponentOrientation.LEFT_TO_RIGHT&lt;/code&gt; , these constants map to &lt;code&gt;NORTH&lt;/code&gt; , &lt;code&gt;SOUTH&lt;/code&gt; , &lt;code&gt;WEST&lt;/code&gt; , and &lt;code&gt;EAST&lt;/code&gt; , respectively.</target>
        </trans-unit>
        <trans-unit id="f1f23c6ebcae32c016f175cd630762e9b2b7d49f" translate="yes" xml:space="preserve">
          <source>In addition, &lt;code&gt;Runnable&lt;/code&gt; provides the means for a class to be active while not subclassing &lt;code&gt;Thread&lt;/code&gt;. A class that implements &lt;code&gt;Runnable&lt;/code&gt; can run without subclassing &lt;code&gt;Thread&lt;/code&gt; by instantiating a &lt;code&gt;Thread&lt;/code&gt; instance and passing itself in as the target. In most cases, the &lt;code&gt;Runnable&lt;/code&gt; interface should be used if you are only planning to override the &lt;code&gt;run()&lt;/code&gt; method and no other &lt;code&gt;Thread&lt;/code&gt; methods. This is important because classes should not be subclassed unless the programmer intends on modifying or enhancing the fundamental behavior of the class.</source>
          <target state="translated">さらに、 &lt;code&gt;Runnable&lt;/code&gt; は、 &lt;code&gt;Thread&lt;/code&gt; をサブクラス化しないときにクラスをアクティブにする手段を提供します。実装するクラス &lt;code&gt;Runnable&lt;/code&gt; サブクラス化せずに実行できる &lt;code&gt;Thread&lt;/code&gt; インスタンス化することによって &lt;code&gt;Thread&lt;/code&gt; インスタンスを、ターゲットなどで自分自身を渡します。ほとんどの場合、 &lt;code&gt;run()&lt;/code&gt; メソッドのみをオーバーライドし、他の &lt;code&gt;Thread&lt;/code&gt; メソッドはオーバーライドしない場合は、 &lt;code&gt;Runnable&lt;/code&gt; インターフェースを使用する必要があります。プログラマーがクラスの基本的な動作を変更または拡張するつもりでない限り、クラスをサブクラス化してはならないため、これは重要です。</target>
        </trans-unit>
        <trans-unit id="d0ffa912abbac66bc23c7cc4eb525a47987acde5" translate="yes" xml:space="preserve">
          <source>In addition, BCP 47 imposes syntax restrictions that are not imposed by Locale's constructors. This means that conversions between some Locales and BCP 47 language tags cannot be made without losing information. Thus &lt;code&gt;toLanguageTag&lt;/code&gt; cannot represent the state of locales whose language, country, or variant do not conform to BCP 47.</source>
          <target state="translated">さらに、BCP 47は、ロケールのコンストラクターによって課されない構文制限を課します。つまり、一部のロケールとBCP 47言語タグ間の変換は、情報を失うことなく行うことができません。したがって、 &lt;code&gt;toLanguageTag&lt;/code&gt; は、言語、国、またはバリアントがBCP 47に準拠していないロケールの状態を表すことができません。</target>
        </trans-unit>
        <trans-unit id="90c28b724a8b29cd571cc3e38dd5717b9002649b" translate="yes" xml:space="preserve">
          <source>In addition, NimbusStyle handles ColorTypes slightly differently from Synth.</source>
          <target state="translated">また、NimbusStyleでは、Synthとは少し違ったColorTypesの扱いをしています。</target>
        </trans-unit>
        <trans-unit id="579421e1e85ce32e6e5ea22308534b8f6511e547" translate="yes" xml:space="preserve">
          <source>In addition, a layer cannot be created if the configuration contains a module named &quot;&lt;code&gt;java.base&lt;/code&gt;&quot;, a configuration contains a module with a package named &quot;&lt;code&gt;java&lt;/code&gt;&quot; or a package name starting with &quot;&lt;code&gt;java.&lt;/code&gt;&quot;, or the function to map a module name to a class loader returns &lt;code&gt;null&lt;/code&gt; or the &lt;a href=&quot;classloader#getPlatformClassLoader()&quot;&gt;platform class loader&lt;/a&gt;.</source>
          <target state="translated">In addition, a layer cannot be created if the configuration contains a module named &quot; &lt;code&gt;java.base&lt;/code&gt; &quot;, a configuration contains a module with a package named &quot; &lt;code&gt;java&lt;/code&gt; &quot; or a package name starting with &quot; &lt;code&gt;java.&lt;/code&gt; &quot;, or the function to map a module name to a class loader returns &lt;code&gt;null&lt;/code&gt; or the &lt;a href=&quot;classloader#getPlatformClassLoader()&quot;&gt;platform class loader&lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="6bbe447b352cd3c67e1d9564f1a4f7893ccf3bb5" translate="yes" xml:space="preserve">
          <source>In addition, a layer cannot be created if the configuration contains a module named &quot;&lt;code&gt;java.base&lt;/code&gt;&quot;, or a module contains a package named &quot;&lt;code&gt;java&lt;/code&gt;&quot; or a package with a name starting with &quot;&lt;code&gt;java.&lt;/code&gt;&quot;.</source>
          <target state="translated">In addition, a layer cannot be created if the configuration contains a module named &quot; &lt;code&gt;java.base&lt;/code&gt; &quot;, or a module contains a package named &quot; &lt;code&gt;java&lt;/code&gt; &quot; or a package with a name starting with &quot; &lt;code&gt;java.&lt;/code&gt; &quot;.</target>
        </trans-unit>
        <trans-unit id="0dca754d6c2d6b8518fc03f50d1c276e3093b30c" translate="yes" xml:space="preserve">
          <source>In addition, an application can use the &lt;code&gt;SyncProvider&lt;/code&gt; object returned by this method to call methods that return information about the &lt;code&gt;SyncProvider&lt;/code&gt; object, including information about the vendor, version, provider identification, synchronization grade, and locks it currently has set.</source>
          <target state="translated">In addition, an application can use the &lt;code&gt;SyncProvider&lt;/code&gt; object returned by this method to call methods that return information about the &lt;code&gt;SyncProvider&lt;/code&gt; object, including information about the vendor, version, provider identification, synchronization grade, and locks it currently has set.</target>
        </trans-unit>
        <trans-unit id="0fe92cfe39db7917857638c730c6e8a9d72af5f4" translate="yes" xml:space="preserve">
          <source>In addition, an application must specify constraints on the target certificate that the &lt;code&gt;CertPathBuilder&lt;/code&gt; will attempt to build a path to. The constraints are specified as a &lt;code&gt;CertSelector&lt;/code&gt; object. These constraints should provide the &lt;code&gt;CertPathBuilder&lt;/code&gt; with enough search criteria to find the target certificate. Minimal criteria for an &lt;code&gt;X509Certificate&lt;/code&gt; usually include the subject name and/or one or more subject alternative names. If enough criteria is not specified, the &lt;code&gt;CertPathBuilder&lt;/code&gt; may throw a &lt;code&gt;CertPathBuilderException&lt;/code&gt;.</source>
          <target state="translated">さらに、アプリケーションは、 &lt;code&gt;CertPathBuilder&lt;/code&gt; がパスを構築しようとするターゲット証明書に制約を指定する必要があります。制約は &lt;code&gt;CertSelector&lt;/code&gt; オブジェクトとして指定されます。これらの制約により、 &lt;code&gt;CertPathBuilder&lt;/code&gt; はターゲット証明書を見つけるのに十分な検索基準を提供するはずです。 &lt;code&gt;X509Certificate&lt;/code&gt; の最低限の基準には、通常、サブジェクト名や1つ以上のサブジェクト代替名が含まれます。十分な基準が指定されていない場合、 &lt;code&gt;CertPathBuilder&lt;/code&gt; はCertPathBuilderExceptionをスローすることがあり &lt;code&gt;CertPathBuilderException&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a9e610984b972d7e5beb58e119cffbd2ab22c70f" translate="yes" xml:space="preserve">
          <source>In addition, an instance has four flags. These flags indicate:</source>
          <target state="translated">さらに、インスタンスには 4 つのフラグがあります。これらのフラグは次のことを示します。</target>
        </trans-unit>
        <trans-unit id="870e411531c039af2dbdb3bb6e5d628c5975e9bb" translate="yes" xml:space="preserve">
          <source>In addition, an offset mechanism enables particular counting intervals to be detected. If the offset value is not zero, whenever the threshold is triggered by the counter value reaching a comparison level, that comparison level is incremented by the offset value. This is regarded as taking place instantaneously, that is, before the count is incremented. Thus, for each level, the threshold triggers an event notification every time the count increases by an interval equal to the offset value.</source>
          <target state="translated">さらに、オフセット機構は、特定のカウント間隔を検出することを可能にする。オフセット値がゼロでない場合、カウンタ値が比較レベルに達することで閾値がトリガーされるたびに、その比較レベルはオフセット値によってインクリメントされます。これは、瞬間的に、すなわち、カウントがインクリメントされる前に行われるものとみなされる。このように、各レベルについて、しきい値は、カウントがオフセット値に等しい間隔で増加するたびにイベント通知をトリガします。</target>
        </trans-unit>
        <trans-unit id="a450ba34174b50c1a21d59970e5437dc6cb80f12" translate="yes" xml:space="preserve">
          <source>In addition, any &lt;code&gt;RowSet&lt;/code&gt; object created by this method will have the same properties as this &lt;code&gt;CachedRowSet&lt;/code&gt; object. For example, if this &lt;code&gt;CachedRowSet&lt;/code&gt; object is read-only, all of its duplicates will also be read-only. If it is changed to be updatable, the duplicates also become updatable.</source>
          <target state="translated">In addition, any &lt;code&gt;RowSet&lt;/code&gt; object created by this method will have the same properties as this &lt;code&gt;CachedRowSet&lt;/code&gt; object. For example, if this &lt;code&gt;CachedRowSet&lt;/code&gt; object is read-only, all of its duplicates will also be read-only. If it is changed to be updatable, the duplicates also become updatable.</target>
        </trans-unit>
        <trans-unit id="53b8d630d402819b1f760ea377f44b6a16712937" translate="yes" xml:space="preserve">
          <source>In addition, any of the elements may be decorated by padding, either with spaces or any other character.</source>
          <target state="translated">また、いずれかの要素は、スペースまたは他の任意の文字を用いて、パディングによって装飾されていてもよい。</target>
        </trans-unit>
        <trans-unit id="5b0ddda2d0f82cf4aed49fad8ad8b055e9a723d9" translate="yes" xml:space="preserve">
          <source>In addition, every character in a font has an</source>
          <target state="translated">さらに、フォント内のすべての文字には</target>
        </trans-unit>
        <trans-unit id="fe6d4ce281cc41c2d663795cad62610decb0511e" translate="yes" xml:space="preserve">
          <source>In addition, if a &lt;a href=&quot;finishings&quot;&gt;&lt;code&gt;Finishings&lt;/code&gt;&lt;/a&gt; attribute of &lt;a href=&quot;finishings#STAPLE&quot;&gt;&lt;code&gt;STAPLE&lt;/code&gt;&lt;/a&gt; is specified, then:</source>
          <target state="translated">さらに、&lt;a href=&quot;finishings#STAPLE&quot;&gt; &lt;code&gt;STAPLE&lt;/code&gt; の&lt;/a&gt;&lt;a href=&quot;finishings&quot;&gt; &lt;code&gt;Finishings&lt;/code&gt; &lt;/a&gt;属性が指定されている場合は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="1fa3f127cf7a63d846e423fccda6af2e43a26b4b" translate="yes" xml:space="preserve">
          <source>In addition, if a &lt;code&gt;Map&lt;/code&gt; object is passed to one of the constructors or to the method &lt;code&gt;getAttributes&lt;/code&gt;, the structured type is custom mapped according to the mapping specified in the &lt;code&gt;Map&lt;/code&gt; object.</source>
          <target state="translated">In addition, if a &lt;code&gt;Map&lt;/code&gt; object is passed to one of the constructors or to the method &lt;code&gt;getAttributes&lt;/code&gt; , the structured type is custom mapped according to the mapping specified in the &lt;code&gt;Map&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="4c71d449e4a597019a72691ecc234388e0f7fdd8" translate="yes" xml:space="preserve">
          <source>In addition, if the class loader is not the bootstrap or &lt;a href=&quot;../lang/classloader#getPlatformClassLoader()&quot;&gt;platform class loader&lt;/a&gt;, then service providers may be located in the named modules of other class loaders. Specifically, if the class loader, or any class loader reachable via parent delegation, has a module in a &lt;a href=&quot;../lang/modulelayer&quot;&gt;module layer&lt;/a&gt;, then service providers in all modules in the module layer are located.</source>
          <target state="translated">In addition, if the class loader is not the bootstrap or &lt;a href=&quot;../lang/classloader#getPlatformClassLoader()&quot;&gt;platform class loader&lt;/a&gt;, then service providers may be located in the named modules of other class loaders. Specifically, if the class loader, or any class loader reachable via parent delegation, has a module in a &lt;a href=&quot;../lang/modulelayer&quot;&gt;module layer&lt;/a&gt;, then service providers in all modules in the module layer are located.</target>
        </trans-unit>
        <trans-unit id="6693592d77694b84bdf498092215f9da7f914aab" translate="yes" xml:space="preserve">
          <source>In addition, if there are known attributes with default values, &lt;code&gt;Attr&lt;/code&gt; nodes representing them are automatically created and attached to the element.</source>
          <target state="translated">In addition, if there are known attributes with default values, &lt;code&gt;Attr&lt;/code&gt; nodes representing them are automatically created and attached to the element.</target>
        </trans-unit>
        <trans-unit id="3719d936e29998d0689eb9e0adf828047d1a0f6c" translate="yes" xml:space="preserve">
          <source>In addition, its &lt;code&gt;checkPermission&lt;/code&gt; method is invoked with the &lt;code&gt;RuntimePermission(&quot;enableContextClassLoaderOverride&quot;)&lt;/code&gt; permission when invoked directly or indirectly by the constructor of a subclass which overrides the &lt;code&gt;getContextClassLoader&lt;/code&gt; or &lt;code&gt;setContextClassLoader&lt;/code&gt; methods.</source>
          <target state="translated">さらに、その &lt;code&gt;checkPermission&lt;/code&gt; メソッドは、 &lt;code&gt;getContextClassLoader&lt;/code&gt; または &lt;code&gt;setContextClassLoader&lt;/code&gt; メソッドをオーバーライドするサブクラスのコンストラクターによって直接的または間接的に呼び出されると、 &lt;code&gt;RuntimePermission(&quot;enableContextClassLoaderOverride&quot;)&lt;/code&gt; 権限で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="de54fb02014412ecd1787d4096721b6bd9a09795" translate="yes" xml:space="preserve">
          <source>In addition, multiple cancellations of row deletions can be made by adjusting the position of the cursor using any of the cursor position control methods such as:</source>
          <target state="translated">また、行削除の複数キャンセルは、カーソル位置制御手段のいずれかを用いてカーソル位置を調整することにより行うことができる。</target>
        </trans-unit>
        <trans-unit id="5a982507e35bcbb8afa02271b7a356830dfdca5b" translate="yes" xml:space="preserve">
          <source>In addition, multiple cancellations of row insertions can be made by adjusting the position of the cursor using any of the cursor position control methods such as:</source>
          <target state="translated">また、行挿入の複数回のキャンセルは、カーソル位置制御手段のいずれかを用いてカーソルの位置を調整することにより行うことができる。</target>
        </trans-unit>
        <trans-unit id="d0be37ef9695b65cf9e9180a2ae0ea88d1cdf6af" translate="yes" xml:space="preserve">
          <source>In addition, some operations, such as Arabic shaping, require context, so that the characters at the start and limit can have the proper shapes. Sometimes the data in the buffer outside the provided range does not have valid data. The values LAYOUT_NO_START_CONTEXT and LAYOUT_NO_LIMIT_CONTEXT can be added to the flags parameter to indicate that the text before start, or after limit, respectively, should not be examined for context.</source>
          <target state="translated">さらに、アラビア語のシェイピングのようないくつかの操作では、開始位置や制限位置の文字が適切な形になるようにコンテキストが必要です。提供された範囲外のバッファ内のデータが有効なデータを持たないことがあります。値 LAYOUT_NO_START_CONTEXT と LAYOUT_NO_LIMIT_CONTEXT を flags パラ メ タ に追加す る こ と で、 それぞれ開始前のテ キ ス ト と 制限後のテ キ ス ト を コ ン テ キ ス ト のために検査 し ない こ と を示す こ と がで き ます。</target>
        </trans-unit>
        <trans-unit id="eb227b57999fd7e909da8da1d2a7fde11cad3089" translate="yes" xml:space="preserve">
          <source>In addition, some subclasses may also implement other &lt;code&gt;getXxxxInstance&lt;/code&gt; methods for more specialized control. For example, the &lt;code&gt;NumberFormat&lt;/code&gt; class provides &lt;code&gt;getPercentInstance&lt;/code&gt; and &lt;code&gt;getCurrencyInstance&lt;/code&gt; methods for getting specialized number formatters.</source>
          <target state="translated">さらに、一部のサブクラスは、より特殊な制御のために他の &lt;code&gt;getXxxxInstance&lt;/code&gt; メソッドを実装する場合もあります。たとえば、 &lt;code&gt;NumberFormat&lt;/code&gt; クラスは、特殊な数値フォーマッターを取得するための &lt;code&gt;getPercentInstance&lt;/code&gt; メソッドと &lt;code&gt;getCurrencyInstance&lt;/code&gt; メソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="8521432ca817c76647f2d846f1bef6c88792da85" translate="yes" xml:space="preserve">
          <source>In addition, the &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; contains at least attributes indicating where text was generated from an argument in the &lt;code&gt;arguments&lt;/code&gt; array. The keys of these attributes are of type &lt;code&gt;MessageFormat.Field&lt;/code&gt;, their values are &lt;code&gt;Integer&lt;/code&gt; objects indicating the index in the &lt;code&gt;arguments&lt;/code&gt; array of the argument from which the text was generated.</source>
          <target state="translated">さらに、 &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; には、少なくとも、 &lt;code&gt;arguments&lt;/code&gt; 配列の引数からテキストが生成された場所を示す属性が含まれています。これらの属性のキーは &lt;code&gt;MessageFormat.Field&lt;/code&gt; 型であり、それらの値はテキストが生成された &lt;code&gt;arguments&lt;/code&gt; 配列内のインデックスを示す &lt;code&gt;Integer&lt;/code&gt; オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="a6e2e314534ac045cf69b2d41f6340feecc19940" translate="yes" xml:space="preserve">
          <source>In addition, the PrincipalClass/PrincipalName pairing may be repeated:</source>
          <target state="translated">また、PrincipalClass/PrincipalName のペアリングを繰り返すこともできます。</target>
        </trans-unit>
        <trans-unit id="059ef3ffe1e79dfc5ca9021949523c0f33a49b34" translate="yes" xml:space="preserve">
          <source>In addition, the class defines methods that are used to maintain a current &lt;em&gt;selection&lt;/em&gt; from the text. The text selection, a substring of the component's text, is the target of editing operations. It is also referred to as the &lt;em&gt;selected text&lt;/em&gt;.</source>
          <target state="translated">In addition, the class defines methods that are used to maintain a current &lt;em&gt;selection&lt;/em&gt; from the text. The text selection, a substring of the component's text, is the target of editing operations. It is also referred to as the &lt;em&gt;selected text&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="cf2386bcd0be6584acdb144b841b15f4c960e9dd" translate="yes" xml:space="preserve">
          <source>In addition, the following operations are supported, either directly, or indirectly through objects that the &lt;code&gt;Sequencer&lt;/code&gt; has access to:</source>
          <target state="translated">さらに、次の操作は、 &lt;code&gt;Sequencer&lt;/code&gt; がアクセスできるオブジェクトを介して、直接的または間接的にサポートされています。</target>
        </trans-unit>
        <trans-unit id="b49601d6aae95f2a139f03510edca3cb80c87127" translate="yes" xml:space="preserve">
          <source>In addition, the horizontal and vertical gaps are set to the specified values. Horizontal gaps are placed between each of the columns. Vertical gaps are placed between each of the rows.</source>
          <target state="translated">また、水平方向の隙間と垂直方向の隙間は、指定された値に設定されています。水平方向のギャップは、各列の間に配置されます。縦方向のギャップは、各行の間に配置されます。</target>
        </trans-unit>
        <trans-unit id="e95a48cd4b0c0c77f9a895c979e24d8c600e0c7e" translate="yes" xml:space="preserve">
          <source>In addition, the structured type is custom mapped to a class in the Java programming language if there is such a mapping, as are its attributes, if appropriate.</source>
          <target state="translated">さらに、構造化された型は、そのようなマッピングがある場合には、Javaプログラミング言語のクラスにカスタムマッピングされます。</target>
        </trans-unit>
        <trans-unit id="4847332e5f9a256254c2b8f86ee3aff2ec216774" translate="yes" xml:space="preserve">
          <source>In addition, this class provides a large number of static methods for determining a character's category (lowercase letter, digit, etc.) and for converting characters from uppercase to lowercase and vice versa.</source>
          <target state="translated">さらに、このクラスは、文字のカテゴリ(小文字、数字など)を決定したり、大文字から小文字への変換やその逆の変換を行うための多数の静的メソッドを提供しています。</target>
        </trans-unit>
        <trans-unit id="c0f1f85aac1e1e7e02b8f9ea172b9f1824281377" translate="yes" xml:space="preserve">
          <source>In addition, this class provides many methods for converting a &lt;code&gt;boolean&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt; and a &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;boolean&lt;/code&gt;, as well as other constants and methods useful when dealing with a &lt;code&gt;boolean&lt;/code&gt;.</source>
          <target state="translated">加えて、このクラスは、変換のための多くの方法を提供する &lt;code&gt;boolean&lt;/code&gt; に &lt;code&gt;String&lt;/code&gt; と &lt;code&gt;String&lt;/code&gt; を &lt;code&gt;boolean&lt;/code&gt; を扱う場合に有用な、ならびに他の定数および方法を &lt;code&gt;boolean&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="86218e012109407362f27dd46c0b2b37d9a404bc" translate="yes" xml:space="preserve">
          <source>In addition, this class provides several methods for converting a &lt;code&gt;byte&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt; and a &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;
 byte&lt;/code&gt;, as well as other constants and methods useful when dealing with a &lt;code&gt;byte&lt;/code&gt;.</source>
          <target state="translated">In addition, this class provides several methods for converting a &lt;code&gt;byte&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt; and a &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt; byte&lt;/code&gt; , as well as other constants and methods useful when dealing with a &lt;code&gt;byte&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8ffeb51b3224523ef436b1d1938bf920a43bfc60" translate="yes" xml:space="preserve">
          <source>In addition, this class provides several methods for converting a &lt;code&gt;byte&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt; and a &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;byte&lt;/code&gt;, as well as other constants and methods useful when dealing with a &lt;code&gt;byte&lt;/code&gt;.</source>
          <target state="translated">また、このクラスには、変換するためのいくつかの方法を提供 &lt;code&gt;byte&lt;/code&gt; の &lt;code&gt;String&lt;/code&gt; と &lt;code&gt;String&lt;/code&gt; に &lt;code&gt;byte&lt;/code&gt; を扱う場合に有用な、ならびに他の定数とメソッドを &lt;code&gt;byte&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e85c3617c388e7fe3a9752600be2c78c296128c0" translate="yes" xml:space="preserve">
          <source>In addition, this class provides several methods for converting a &lt;code&gt;double&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt; and a &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;double&lt;/code&gt;, as well as other constants and methods useful when dealing with a &lt;code&gt;double&lt;/code&gt;.</source>
          <target state="translated">また、このクラスには、変換するためのいくつかの方法を提供 &lt;code&gt;double&lt;/code&gt; に &lt;code&gt;String&lt;/code&gt; と &lt;code&gt;String&lt;/code&gt; に &lt;code&gt;double&lt;/code&gt; を扱う場合に有用な、ならびに他の定数および方法を &lt;code&gt;double&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="68a2ece26a8ec24ff52bdb5b8ffee400c05c5514" translate="yes" xml:space="preserve">
          <source>In addition, this class provides several methods for converting a &lt;code&gt;float&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt; and a &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;float&lt;/code&gt;, as well as other constants and methods useful when dealing with a &lt;code&gt;float&lt;/code&gt;.</source>
          <target state="translated">また、このクラスには、変換するためのいくつかの方法を提供 &lt;code&gt;float&lt;/code&gt; に &lt;code&gt;String&lt;/code&gt; と &lt;code&gt;String&lt;/code&gt; に &lt;code&gt;float&lt;/code&gt; を扱う場合に有用な、ならびに他の定数および方法を &lt;code&gt;float&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d7a80682c0aaad3c6f64e1cc3e7a4dd1f8f891d" translate="yes" xml:space="preserve">
          <source>In addition, this class provides several methods for converting a &lt;code&gt;long&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt; and a &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;
 long&lt;/code&gt;, as well as other constants and methods useful when dealing with a &lt;code&gt;long&lt;/code&gt;.</source>
          <target state="translated">In addition, this class provides several methods for converting a &lt;code&gt;long&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt; and a &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt; long&lt;/code&gt; , as well as other constants and methods useful when dealing with a &lt;code&gt;long&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="c3209e7895f5274dda2c59c01800db0e7f1a6cb9" translate="yes" xml:space="preserve">
          <source>In addition, this class provides several methods for converting a &lt;code&gt;long&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt; and a &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;long&lt;/code&gt;, as well as other constants and methods useful when dealing with a &lt;code&gt;long&lt;/code&gt;.</source>
          <target state="translated">また、このクラスには、変換するためのいくつかの方法を提供 &lt;code&gt;long&lt;/code&gt; に &lt;code&gt;String&lt;/code&gt; と &lt;code&gt;String&lt;/code&gt; に &lt;code&gt;long&lt;/code&gt; を扱う場合に有用な、ならびに他の定数および方法を &lt;code&gt;long&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bceab1896f5431f9616536d2c3debec95c7baf0d" translate="yes" xml:space="preserve">
          <source>In addition, this class provides several methods for converting a &lt;code&gt;short&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt; and a &lt;code&gt;String&lt;/code&gt; to a &lt;code&gt;short&lt;/code&gt;, as well as other constants and methods useful when dealing with a &lt;code&gt;short&lt;/code&gt;.</source>
          <target state="translated">また、このクラスには、変換するためのいくつかの方法を提供 &lt;code&gt;short&lt;/code&gt; に &lt;code&gt;String&lt;/code&gt; や &lt;code&gt;String&lt;/code&gt; に &lt;code&gt;short&lt;/code&gt; を扱う場合に有用な、ならびに他の定数および方法を &lt;code&gt;short&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="77411ccbd611f6cf25185bc001e7ca50aa01649a" translate="yes" xml:space="preserve">
          <source>In addition, this class provides several methods for converting an &lt;code&gt;int&lt;/code&gt; to a &lt;code&gt;String&lt;/code&gt; and a &lt;code&gt;String&lt;/code&gt; to an &lt;code&gt;int&lt;/code&gt;, as well as other constants and methods useful when dealing with an &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">また、このクラスには、変換するためのいくつかの方法を提供 &lt;code&gt;int&lt;/code&gt; に &lt;code&gt;String&lt;/code&gt; や &lt;code&gt;String&lt;/code&gt; に &lt;code&gt;int&lt;/code&gt; 値を扱う場合に有用な、ならびに他の定数および方法を &lt;code&gt;int&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="68c06dbee76a5636d9963ea08f8ff95d58d1e068" translate="yes" xml:space="preserve">
          <source>In addition, this class provides several methods for determining a character's category (lowercase letter, digit, etc.) and for converting characters from uppercase to lowercase and vice versa.</source>
          <target state="translated">さらに、このクラスは、文字のカテゴリ(小文字、数字など)を決定するためのいくつかのメソッドと、文字を大文字から小文字に変換するためのメソッド、およびその逆のメソッドを提供します。</target>
        </trans-unit>
        <trans-unit id="e292b452247845d9e091ce216510934fc5ca8378" translate="yes" xml:space="preserve">
          <source>In addition, unlike &lt;code&gt;set()&lt;/code&gt;, &lt;code&gt;add()&lt;/code&gt; forces an immediate recomputation of the calendar's milliseconds and all fields.</source>
          <target state="translated">さらに、 &lt;code&gt;set()&lt;/code&gt; とは異なり、 &lt;code&gt;add()&lt;/code&gt; はカレンダーのミリ秒とすべてのフィールドの即時の再計算を強制します。</target>
        </trans-unit>
        <trans-unit id="4885f27aaffdd79828e0a037c13dc416292803f1" translate="yes" xml:space="preserve">
          <source>In addition, when a security manager is present, loggers provided to system classes should not be directly configurable through the logging backend without requiring permissions.</source>
          <target state="translated">さらに、セキュリティ マネージャが存在する場合、システム クラスに提供されるロガーは、権限を必要とせずにロギング バックエンドを介して直接設定できるようにすべきではありません。</target>
        </trans-unit>
        <trans-unit id="a9dfe816f9d7068cb163a587c8942b7b0c372c47" translate="yes" xml:space="preserve">
          <source>In all cases, &lt;code&gt;pos&lt;/code&gt; must be greater than or equal to zero, and &lt;code&gt;pos&lt;/code&gt; must also be less than or equal to the target's arity.</source>
          <target state="translated">全ての場合において、 &lt;code&gt;pos&lt;/code&gt; 0以上でなければならず、 &lt;code&gt;pos&lt;/code&gt; また未満であるか、ターゲットのアリティに等しくなければなりません。</target>
        </trans-unit>
        <trans-unit id="09e47909f30bd0dae2adcaf9dec3e17da3c754a0" translate="yes" xml:space="preserve">
          <source>In all cases, arguments given to methods for these purposes need not fall within the indicated ranges; for example, a date may be specified as January 32 and is interpreted as meaning February 1.</source>
          <target state="translated">すべての場合において、これらの目的のためにメソッドに与えられる引数は、示された範囲内に収まる必要はありません;例えば、日付は1月32日と指定され、2月1日を意味すると解釈されます。</target>
        </trans-unit>
        <trans-unit id="710a1058addac3a4778571f2e89fe86199a733c7" translate="yes" xml:space="preserve">
          <source>In all cases, before this method can return the current thread must re-acquire the lock associated with this condition. When the thread returns it is &lt;em&gt;guaranteed&lt;/em&gt; to hold this lock.</source>
          <target state="translated">すべての場合において、このメソッドが戻る前に、現在のスレッドはこの条件に関連付けられたロックを再取得する必要があります。スレッドが戻ると、このロックを保持することが&lt;em&gt;保証さ&lt;/em&gt;れます。</target>
        </trans-unit>
        <trans-unit id="26a8f8af04f382db67be9b5de3a26f6c349c6b6b" translate="yes" xml:space="preserve">
          <source>In all cases, calculations that use this method to calculate results along one axis will not fail because of anomalies in calculations along the other axis. When the cell is not valid the &lt;code&gt;includeSpacing&lt;/code&gt; parameter is ignored.</source>
          <target state="translated">In all cases, calculations that use this method to calculate results along one axis will not fail because of anomalies in calculations along the other axis. When the cell is not valid the &lt;code&gt;includeSpacing&lt;/code&gt; parameter is ignored.</target>
        </trans-unit>
        <trans-unit id="89452fe59efb654a902cd41128a35da921fe424a" translate="yes" xml:space="preserve">
          <source>In all cases, if the new value is outside the valid range of values for the field then a &lt;code&gt;DateTimeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">すべての場合において、新しい値がフィールドの値の有効範囲外の場合、 &lt;code&gt;DateTimeException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="81081b4ee2ad6edc756e2675593e859604468b70" translate="yes" xml:space="preserve">
          <source>In all cases, it is legal to return a more capable metadata object than strictly necessary. The format name and node names are merely hints that may be used to reduce the reader's workload.</source>
          <target state="translated">いずれの場合も、厳密には必要以上に有能なメタデータオブジェクトを返すことは合法である。フォーマット名やノード名は、読者の作業負荷を軽減するためのヒントにすぎません。</target>
        </trans-unit>
        <trans-unit id="a8642fd07de10ab15e255b32922459adaf42a0c8" translate="yes" xml:space="preserve">
          <source>In all cases, the result is a &lt;code&gt;long&lt;/code&gt; integer that, when given to the &lt;a href=&quot;#longBitsToDouble(long)&quot;&gt;&lt;code&gt;longBitsToDouble(long)&lt;/code&gt;&lt;/a&gt; method, will produce a floating-point value the same as the argument to &lt;code&gt;doubleToLongBits&lt;/code&gt; (except all NaN values are collapsed to a single &quot;canonical&quot; NaN value).</source>
          <target state="translated">In all cases, the result is a &lt;code&gt;long&lt;/code&gt; integer that, when given to the &lt;a href=&quot;#longBitsToDouble(long)&quot;&gt; &lt;code&gt;longBitsToDouble(long)&lt;/code&gt; &lt;/a&gt; method, will produce a floating-point value the same as the argument to &lt;code&gt;doubleToLongBits&lt;/code&gt; (except all NaN values are collapsed to a single &quot;canonical&quot; NaN value).</target>
        </trans-unit>
        <trans-unit id="8837bb6be2c5fdd23d8a48631d7aee2f241759eb" translate="yes" xml:space="preserve">
          <source>In all cases, the result is a &lt;code&gt;long&lt;/code&gt; integer that, when given to the &lt;a href=&quot;#longBitsToDouble(long)&quot;&gt;&lt;code&gt;longBitsToDouble(long)&lt;/code&gt;&lt;/a&gt; method, will produce a floating-point value the same as the argument to &lt;code&gt;doubleToRawLongBits&lt;/code&gt;.</source>
          <target state="translated">In all cases, the result is a &lt;code&gt;long&lt;/code&gt; integer that, when given to the &lt;a href=&quot;#longBitsToDouble(long)&quot;&gt; &lt;code&gt;longBitsToDouble(long)&lt;/code&gt; &lt;/a&gt; method, will produce a floating-point value the same as the argument to &lt;code&gt;doubleToRawLongBits&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="3e386c1014f9389cd75e4097f8ba05b0eb55648f" translate="yes" xml:space="preserve">
          <source>In all cases, the result is a &lt;code&gt;long&lt;/code&gt; integer that, when given to the &lt;a href=&quot;double#longBitsToDouble-long-&quot;&gt;&lt;code&gt;longBitsToDouble(long)&lt;/code&gt;&lt;/a&gt; method, will produce a floating-point value the same as the argument to &lt;code&gt;doubleToLongBits&lt;/code&gt; (except all NaN values are collapsed to a single &quot;canonical&quot; NaN value).</source>
          <target state="translated">すべての場合において、結果は &lt;code&gt;long&lt;/code&gt; 整数であり、&lt;a href=&quot;double#longBitsToDouble-long-&quot;&gt; &lt;code&gt;longBitsToDouble(long)&lt;/code&gt; &lt;/a&gt;メソッドに渡されると、doubleToLongBitsへの引数と同じ浮動小数点値を生成し &lt;code&gt;doubleToLongBits&lt;/code&gt; （ただし、すべてのNaN値が単一の「正規の」NaNに縮小されている場合を除く）値）。</target>
        </trans-unit>
        <trans-unit id="94e816d46d03eaaedcfd4333b2b790c79aab00a5" translate="yes" xml:space="preserve">
          <source>In all cases, the result is a &lt;code&gt;long&lt;/code&gt; integer that, when given to the &lt;a href=&quot;double#longBitsToDouble-long-&quot;&gt;&lt;code&gt;longBitsToDouble(long)&lt;/code&gt;&lt;/a&gt; method, will produce a floating-point value the same as the argument to &lt;code&gt;doubleToRawLongBits&lt;/code&gt;.</source>
          <target state="translated">すべての場合において、結果は &lt;code&gt;long&lt;/code&gt; 整数であり、&lt;a href=&quot;double#longBitsToDouble-long-&quot;&gt; &lt;code&gt;longBitsToDouble(long)&lt;/code&gt; &lt;/a&gt;メソッドに渡されると、doubleToRawLongBitsへの引数と同じ浮動小数点値を &lt;code&gt;doubleToRawLongBits&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="1fd6b3425097c0e30a0d9da2eb4d3433636ea847" translate="yes" xml:space="preserve">
          <source>In all cases, the result is an integer that, when given to the &lt;a href=&quot;#intBitsToFloat(int)&quot;&gt;&lt;code&gt;intBitsToFloat(int)&lt;/code&gt;&lt;/a&gt; method, will produce a floating-point value the same as the argument to &lt;code&gt;floatToIntBits&lt;/code&gt; (except all NaN values are collapsed to a single &quot;canonical&quot; NaN value).</source>
          <target state="translated">In all cases, the result is an integer that, when given to the &lt;a href=&quot;#intBitsToFloat(int)&quot;&gt; &lt;code&gt;intBitsToFloat(int)&lt;/code&gt; &lt;/a&gt; method, will produce a floating-point value the same as the argument to &lt;code&gt;floatToIntBits&lt;/code&gt; (except all NaN values are collapsed to a single &quot;canonical&quot; NaN value).</target>
        </trans-unit>
        <trans-unit id="84c117b508f6a4eab4d75f1234503941d79ab2fb" translate="yes" xml:space="preserve">
          <source>In all cases, the result is an integer that, when given to the &lt;a href=&quot;#intBitsToFloat(int)&quot;&gt;&lt;code&gt;intBitsToFloat(int)&lt;/code&gt;&lt;/a&gt; method, will produce a floating-point value the same as the argument to &lt;code&gt;floatToRawIntBits&lt;/code&gt;.</source>
          <target state="translated">In all cases, the result is an integer that, when given to the &lt;a href=&quot;#intBitsToFloat(int)&quot;&gt; &lt;code&gt;intBitsToFloat(int)&lt;/code&gt; &lt;/a&gt; method, will produce a floating-point value the same as the argument to &lt;code&gt;floatToRawIntBits&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="8fa2f7b6b965b0569cfce25d70b8a9ac24c40131" translate="yes" xml:space="preserve">
          <source>In all cases, the result is an integer that, when given to the &lt;a href=&quot;float#intBitsToFloat-int-&quot;&gt;&lt;code&gt;intBitsToFloat(int)&lt;/code&gt;&lt;/a&gt; method, will produce a floating-point value the same as the argument to &lt;code&gt;floatToIntBits&lt;/code&gt; (except all NaN values are collapsed to a single &quot;canonical&quot; NaN value).</source>
          <target state="translated">すべての場合において、結果は整数であり、&lt;a href=&quot;float#intBitsToFloat-int-&quot;&gt; &lt;code&gt;intBitsToFloat(int)&lt;/code&gt; &lt;/a&gt;メソッドに &lt;code&gt;floatToIntBits&lt;/code&gt; れると、floatToIntBitsへの引数と同じ浮動小数点値を生成します（すべてのNaN値が単一の「正規の」NaN値に縮小される場合を除く） ）。</target>
        </trans-unit>
        <trans-unit id="f8ae1992023cdf3fa87efe9d9a4061db37810e06" translate="yes" xml:space="preserve">
          <source>In all cases, the result is an integer that, when given to the &lt;a href=&quot;float#intBitsToFloat-int-&quot;&gt;&lt;code&gt;intBitsToFloat(int)&lt;/code&gt;&lt;/a&gt; method, will produce a floating-point value the same as the argument to &lt;code&gt;floatToRawIntBits&lt;/code&gt;.</source>
          <target state="translated">すべての場合において、結果は整数であり、&lt;a href=&quot;float#intBitsToFloat-int-&quot;&gt; &lt;code&gt;intBitsToFloat(int)&lt;/code&gt; &lt;/a&gt;メソッドに &lt;code&gt;floatToRawIntBits&lt;/code&gt; れると、floatToRawIntBitsへの引数と同じ浮動小数点値を生成します。</target>
        </trans-unit>
        <trans-unit id="d3f55b4dbef121f94603171922b50a3691948cf6" translate="yes" xml:space="preserve">
          <source>In all cases, this method returns &lt;code&gt;true&lt;/code&gt;, since DefaultKeyboardFocusManager is designed so that neither &lt;code&gt;dispatchEvent&lt;/code&gt;, nor the AWT event dispatcher, should take further action on the event in any situation.</source>
          <target state="translated">In all cases, this method returns &lt;code&gt;true&lt;/code&gt; , since DefaultKeyboardFocusManager is designed so that neither &lt;code&gt;dispatchEvent&lt;/code&gt; , nor the AWT event dispatcher, should take further action on the event in any situation.</target>
        </trans-unit>
        <trans-unit id="d859740a340aab2ef2df184897feb73868229deb" translate="yes" xml:space="preserve">
          <source>In all cases, what the target eventually returns is returned unchanged by the adapter.</source>
          <target state="translated">いずれの場合も、ターゲットが最終的に返すものはアダプタによって変更されずに返されます。</target>
        </trans-unit>
        <trans-unit id="3f9e867ee25c16d7f93432110c660aa7dfa2f352" translate="yes" xml:space="preserve">
          <source>In all methods of class &lt;code&gt;Date&lt;/code&gt; that accept or return year, month, date, hours, minutes, and seconds values, the following representations are used:</source>
          <target state="translated">年、月、日付、時間、分、秒の値を受け入れるまたは返すクラス &lt;code&gt;Date&lt;/code&gt; のすべてのメソッドでは、次の表現が使用されます。</target>
        </trans-unit>
        <trans-unit id="13fb9ca977fc45a075a964a2af1e52f78784083b" translate="yes" xml:space="preserve">
          <source>In all other cases the default persistence delegate is returned. The default persistence delegate assumes the type is a &lt;em&gt;JavaBean&lt;/em&gt;, implying that it has a default constructor and that its state may be characterized by the matching pairs of &quot;setter&quot; and &quot;getter&quot; methods returned by the &lt;a href=&quot;introspector&quot;&gt;&lt;code&gt;Introspector&lt;/code&gt;&lt;/a&gt; class. The default constructor is the constructor with the greatest number of parameters that has the &lt;a href=&quot;constructorproperties&quot;&gt;&lt;code&gt;ConstructorProperties&lt;/code&gt;&lt;/a&gt; annotation. If none of the constructors has the &lt;code&gt;ConstructorProperties&lt;/code&gt; annotation, then the nullary constructor (constructor with no parameters) will be used. For example, in the following code fragment, the nullary constructor for the &lt;code&gt;Foo&lt;/code&gt; class will be used, while the two-parameter constructor for the &lt;code&gt;Bar&lt;/code&gt; class will be used.</source>
          <target state="translated">その他の場合はすべて、デフォルトの永続デリゲートが返されます。デフォルトの永続デリゲートは、型が&lt;em&gt;JavaBean&lt;/em&gt;であることを想定しており、デフォルトのコンストラクターがあり、その状態は、&lt;a href=&quot;introspector&quot;&gt; &lt;code&gt;Introspector&lt;/code&gt; &lt;/a&gt;クラスによって返される「setter」および「getter」メソッドの一致するペアによって特徴付けられる場合があることを意味します。デフォルトのコンストラクターは、&lt;a href=&quot;constructorproperties&quot;&gt; &lt;code&gt;ConstructorProperties&lt;/code&gt; &lt;/a&gt;アノテーションを持つパラメーターの数が最も多いコンストラクターです。どのコンストラクタにも &lt;code&gt;ConstructorProperties&lt;/code&gt; アノテーションがない場合、nullaryコンストラクタ（パラメータのないコンストラクタ）が使用されます。たとえば、次のコードでは、 &lt;code&gt;Foo&lt;/code&gt; の nullコンストラクタークラスが使用され、 &lt;code&gt;Bar&lt;/code&gt; クラスの2つのパラメーターのコンストラクターが使用されます。</target>
        </trans-unit>
        <trans-unit id="4f080e0ee2b15b4c102aa7079a0aa7b6d0e55888" translate="yes" xml:space="preserve">
          <source>In all other cases, let</source>
          <target state="translated">それ以外の場合は</target>
        </trans-unit>
        <trans-unit id="a11fe3cb468743e49daade63ee6734a831ca51f6" translate="yes" xml:space="preserve">
          <source>In all other respects, this method does the same thing as the method &lt;a href=&quot;object#wait-long-&quot;&gt;&lt;code&gt;wait(long)&lt;/code&gt;&lt;/a&gt; of one argument. In particular, &lt;code&gt;wait(0, 0)&lt;/code&gt; means the same thing as &lt;code&gt;wait(0)&lt;/code&gt;.</source>
          <target state="translated">他のすべての点で、このメソッドは1つの引数のメソッド&lt;a href=&quot;object#wait-long-&quot;&gt; &lt;code&gt;wait(long)&lt;/code&gt; &lt;/a&gt;と同じことを行います。特に、 &lt;code&gt;wait(0, 0)&lt;/code&gt; は &lt;code&gt;wait(0)&lt;/code&gt; と同じことを意味します。</target>
        </trans-unit>
        <trans-unit id="d2a52a46fb3d14d37051820f4fdc8a542f211e8c" translate="yes" xml:space="preserve">
          <source>In all respects, this method behaves as if &lt;code&gt;wait(0L, 0)&lt;/code&gt; had been called. See the specification of the &lt;a href=&quot;#wait(long,int)&quot;&gt;&lt;code&gt;wait(long, int)&lt;/code&gt;&lt;/a&gt; method for details.</source>
          <target state="translated">In all respects, this method behaves as if &lt;code&gt;wait(0L, 0)&lt;/code&gt; had been called. See the specification of the &lt;a href=&quot;#wait(long,int)&quot;&gt; &lt;code&gt;wait(long, int)&lt;/code&gt; &lt;/a&gt; method for details.</target>
        </trans-unit>
        <trans-unit id="876c5fadd4e670707e8da62775562984c13c2478" translate="yes" xml:space="preserve">
          <source>In all respects, this method behaves as if &lt;code&gt;wait(timeoutMillis, 0)&lt;/code&gt; had been called. See the specification of the &lt;a href=&quot;#wait(long,int)&quot;&gt;&lt;code&gt;wait(long, int)&lt;/code&gt;&lt;/a&gt; method for details.</source>
          <target state="translated">In all respects, this method behaves as if &lt;code&gt;wait(timeoutMillis, 0)&lt;/code&gt; had been called. See the specification of the &lt;a href=&quot;#wait(long,int)&quot;&gt; &lt;code&gt;wait(long, int)&lt;/code&gt; &lt;/a&gt; method for details.</target>
        </trans-unit>
        <trans-unit id="5881c9128a5b4634af69fc3e5e6bf8a1e1d2fddf" translate="yes" xml:space="preserve">
          <source>In an application which requires &lt;code&gt;invokedynamic&lt;/code&gt; instructions with individually mutable behaviors, their bootstrap methods should produce distinct &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; objects, one for each linkage request. Alternatively, an application can link a single &lt;code&gt;CallSite&lt;/code&gt; object to several &lt;code&gt;invokedynamic&lt;/code&gt; instructions, in which case a change to the target method will become visible at each of the instructions.</source>
          <target state="translated">In an application which requires &lt;code&gt;invokedynamic&lt;/code&gt; instructions with individually mutable behaviors, their bootstrap methods should produce distinct &lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt; objects, one for each linkage request. Alternatively, an application can link a single &lt;code&gt;CallSite&lt;/code&gt; object to several &lt;code&gt;invokedynamic&lt;/code&gt; instructions, in which case a change to the target method will become visible at each of the instructions.</target>
        </trans-unit>
        <trans-unit id="effcf63c91f615a32cf1d9dcd223b04f78c7e609" translate="yes" xml:space="preserve">
          <source>In an application which requires dynamic call sites with individually mutable behaviors, their bootstrap methods should produce distinct &lt;a href=&quot;callsite&quot;&gt;&lt;code&gt;CallSite&lt;/code&gt;&lt;/a&gt; objects, one for each linkage request. Alternatively, an application can link a single &lt;code&gt;CallSite&lt;/code&gt; object to several &lt;code&gt;invokedynamic&lt;/code&gt; instructions, in which case a change to the target method will become visible at each of the instructions.</source>
          <target state="translated">個別に変更可能な動作を持つ動的な呼び出しサイトを必要とするアプリケーションでは、それらのブートストラップメソッドは、リンケージ要求ごとに1つずつ、別個の&lt;a href=&quot;callsite&quot;&gt; &lt;code&gt;CallSite&lt;/code&gt; &lt;/a&gt;オブジェクトを生成する必要があります。あるいは、アプリケーションは単一の &lt;code&gt;CallSite&lt;/code&gt; オブジェクトを複数の &lt;code&gt;invokedynamic&lt;/code&gt; 命令にリンクできます。その場合、ターゲットメソッドへの変更は各命令で可視になります。</target>
        </trans-unit>
        <trans-unit id="a6322785784db32ea230804c456ea63d59ad58e8" translate="yes" xml:space="preserve">
          <source>In an element representing a method named &quot;get&quot; taking one integer argument, the &quot;method&quot; attribute is replaced with an &quot;index&quot; attribute whose value the value of the first argument.</source>
          <target state="translated">整数の引数を一つ取る get という名前のメソッドを表す要素では、method 属性は第一引数の値を値とする index 属性に置き換えられる。</target>
        </trans-unit>
        <trans-unit id="c3d66182f526cc1c3711397e1bc8a88caa07d70f" translate="yes" xml:space="preserve">
          <source>In an element representing a method named &quot;set&quot; taking two arguments, the first of which is an integer, the &quot;method&quot; attribute is replaced with an &quot;index&quot; attribute whose value the value of the first argument.</source>
          <target state="translated">二つの引数を持つ set という名前のメソッドを表す要素において、最初の引数の値が整数である場合、&quot;method&quot; 属性は、最初の引数の値を値とする index 属性に置き換えられる。</target>
        </trans-unit>
        <trans-unit id="3defc8fdafc7a95d821ad6a2e72f02a3b02b057c" translate="yes" xml:space="preserve">
          <source>In an element representing a monadic method whose name starts with &quot;set&quot;, the &quot;method&quot; attribute is replaced with a &quot;property&quot; attribute whose value is given by removing the &quot;set&quot; prefix and decapitalizing the result.</source>
          <target state="translated">名前が &quot;set &quot;で始まるモナディックメソッドを表す要素では、&quot;method &quot;属性を &quot;property &quot;属性に置き換え、接頭辞 &quot;set &quot;を削除して結果をデシタライズすることで値を与えます。</target>
        </trans-unit>
        <trans-unit id="c9402abdb3bb2eff2c83147b78c26d50aa2578b7" translate="yes" xml:space="preserve">
          <source>In an element representing a nullary method whose name starts with &quot;get&quot;, the &quot;method&quot; attribute is replaced with a &quot;property&quot; attribute whose value is given by removing the &quot;get&quot; prefix and decapitalizing the result.</source>
          <target state="translated">名前が &quot;get &quot;で始まるnullaryなメソッドを表す要素では、&quot;method &quot;属性は &quot;property &quot;属性に置き換えられ、その値は &quot;get &quot;の接頭辞を削除して結果をデシタライズすることで与えられます。</target>
        </trans-unit>
        <trans-unit id="f680341ae630eeaec6f425095320e0e5baed727c" translate="yes" xml:space="preserve">
          <source>In another example, if a search() method was invoked with a specified size limit of 'n'. If the answer consists of more than 'n' results, search() would first return a NamingEnumeration. When the n'th result has been returned by invoking next() on the NamingEnumeration, a SizeLimitExceedException would then thrown when hasMore() is invoked.</source>
          <target state="translated">別の例では、指定されたサイズの制限が 'n' である search()メソッドが呼び出されたとします。答えが 'n' 以上の結果からなる場合、search()は最初に NamingEnumeration を返します。NamingEnumeration の next()を呼び出して n 番目の結果が返された場合、hasMore()が呼び出されたときに SizeLimitExceedException がスローされます。</target>
        </trans-unit>
        <trans-unit id="63473c669373298ff8b126a800c3c9be701d8f25" translate="yes" xml:space="preserve">
          <source>In any case, byte order marks occurring after the first element of an input sequence are not omitted since the same code is used to represent &lt;small&gt;ZERO-WIDTH NON-BREAKING SPACE&lt;/small&gt;.</source>
          <target state="translated">いずれの場合も、同じコードを使用して&lt;small&gt;ZERO-WIDTH NON-BREAKING SPACE&lt;/small&gt;を表すため、入力シーケンスの最初の要素の後に発生するバイトオーダーマークは省略されません。</target>
        </trans-unit>
        <trans-unit id="ec213efaa5103b31dfaf4a45519f35d0934bea15" translate="yes" xml:space="preserve">
          <source>In any case, if this method is to be reinvoked in the same decoding operation then care should be taken to preserve any bytes remaining in the input buffer so that they are available to the next invocation.</source>
          <target state="translated">いずれにしても、このメソッドが同じデコード処理で再起動される場合は、入力バッファに残っているバイトを保存して、次の呼び出しで利用できるように注意しなければなりません。</target>
        </trans-unit>
        <trans-unit id="de7b4cedf7b1b3605cbb4d5e220c17ec91cfeb27" translate="yes" xml:space="preserve">
          <source>In any case, if this method is to be reinvoked in the same encoding operation then care should be taken to preserve any characters remaining in the input buffer so that they are available to the next invocation.</source>
          <target state="translated">いずれにしても、同じエンコーディング操作でこのメソッドを再起動する場合は、入力バッファに残っている文字を保存して、次の起動時に利用できるように注意しなければなりません。</target>
        </trans-unit>
        <trans-unit id="e3d361555e6e7f2aefd6719812880d76caffb268" translate="yes" xml:space="preserve">
          <source>In any mode, when a row is too tall to fit in the printable area -- print the upper-most portion of the row and paint no lower border on the table.</source>
          <target state="translated">どのモードでも、行が高すぎて印刷可能な領域に収まらない場合 --行の最上部の部分を印刷して、テーブル上の下の境界線を描かないようにします。</target>
        </trans-unit>
        <trans-unit id="42c371089599906ae5216970a156c82451cbcf79" translate="yes" xml:space="preserve">
          <source>In any mode, when the header or footer text is too wide to fit completely in the printable area -- print as much of the text as possible starting from the beginning, as determined by the table's &lt;code&gt;ComponentOrientation&lt;/code&gt;.</source>
          <target state="translated">In any mode, when the header or footer text is too wide to fit completely in the printable area -- print as much of the text as possible starting from the beginning, as determined by the table's &lt;code&gt;ComponentOrientation&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b7c25745d87214e8c648f8952d20a0f3e9a240b8" translate="yes" xml:space="preserve">
          <source>In any other part of the system, where a date must be manipulated in a calendar system other than ISO, the use case will generally specify the calendar system to use. For example, an application may need to calculate the next Islamic or Hebrew holiday which may require manipulating the date. This kind of use case can be handled as follows:</source>
          <target state="translated">システムの他の部分で、ISO以外のカレンダシステムで日付を操作しなければならない場合、一般的には使用するカレンダシステムが指定されます。例えば、あるアプリケーションは、次のイスラム教やヘブライ教の祝日を計算する必要があるかもしれませんが、これは日付を操作する必要があるかもしれません。このようなユースケースは、以下のように扱うことができます。</target>
        </trans-unit>
        <trans-unit id="6bfb37bc0f12d7bd938335d6fa2308caf29415db" translate="yes" xml:space="preserve">
          <source>In attribute subclassing, attributes are defined in a class hierarchy. In some directories, for example, the &quot;name&quot; attribute might be the superclass of all name-related attributes, including &quot;commonName&quot; and &quot;surName&quot;. Asking for the &quot;name&quot; attribute might return both the &quot;commonName&quot; and &quot;surName&quot; attributes.</source>
          <target state="translated">属性のサブクラス化では、属性はクラス階層で定義されます。例えば、いくつかのディレクトリでは、&quot;name&quot; 属性は、&quot;commonName&quot; と &quot;surName&quot; を含む全ての名前関連の属性のスーパークラスになっているかもしれません。name&quot; 属性を求めると、&quot;commonName&quot; と &quot;surName&quot; 属性の両方が返ってくるかもしれません。</target>
        </trans-unit>
        <trans-unit id="db07d9eddd1469a03a0d4523aef982ea0329c470" translate="yes" xml:space="preserve">
          <source>In both cases, if a complete &lt;code&gt;ChronoLocalDateTime&lt;/code&gt; or &lt;code&gt;Instant&lt;/code&gt; is parsed, then the excess days are added to the date part. As a result, this query will return a zero period.</source>
          <target state="translated">どちらの場合も、完全な &lt;code&gt;ChronoLocalDateTime&lt;/code&gt; または &lt;code&gt;Instant&lt;/code&gt; が解析されると、超過した日数が日付部分に追加されます。その結果、このクエリはゼロ期間を返します。</target>
        </trans-unit>
        <trans-unit id="91a4a245b640227d3d4414ba8ce731f1a8ba5d28" translate="yes" xml:space="preserve">
          <source>In both string form and array form, each successive integer group gives a range of integers to be included in the set. The first integer in each group gives the lower bound of the range; the second integer in each group gives the upper bound of the range; if there is only one integer in the group, the upper bound is the same as the lower bound. If the upper bound is less than the lower bound, it denotes a &lt;code&gt;null&lt;/code&gt; range (no values). If the upper bound is equal to the lower bound, it denotes a range consisting of a single value. If the upper bound is greater than the lower bound, it denotes a range consisting of more than one value. The ranges may appear in any order and are allowed to overlap. The union of all the ranges gives the set's contents. Once a &lt;code&gt;SetOfIntegerSyntax&lt;/code&gt; instance is constructed, its value is immutable.</source>
          <target state="translated">In both string form and array form, each successive integer group gives a range of integers to be included in the set. The first integer in each group gives the lower bound of the range; the second integer in each group gives the upper bound of the range; if there is only one integer in the group, the upper bound is the same as the lower bound. If the upper bound is less than the lower bound, it denotes a &lt;code&gt;null&lt;/code&gt; range (no values). If the upper bound is equal to the lower bound, it denotes a range consisting of a single value. If the upper bound is greater than the lower bound, it denotes a range consisting of more than one value. The ranges may appear in any order and are allowed to overlap. The union of all the ranges gives the set's contents. Once a &lt;code&gt;SetOfIntegerSyntax&lt;/code&gt; instance is constructed, its value is immutable.</target>
        </trans-unit>
        <trans-unit id="2f636f886ea66f4a3a9afd96f753e53de19a4e47" translate="yes" xml:space="preserve">
          <source>In both string form and array form, each successive integer group gives a range of integers to be included in the set. The first integer in each group gives the lower bound of the range; the second integer in each group gives the upper bound of the range; if there is only one integer in the group, the upper bound is the same as the lower bound. If the upper bound is less than the lower bound, it denotes a null range (no values). If the upper bound is equal to the lower bound, it denotes a range consisting of a single value. If the upper bound is greater than the lower bound, it denotes a range consisting of more than one value. The ranges may appear in any order and are allowed to overlap. The union of all the ranges gives the set's contents. Once a SetOfIntegerSyntax instance is constructed, its value is immutable.</source>
          <target state="translated">文字列形式でも配列形式でも、各連続する整数群は、集合に含まれる整数の範囲を与えます。各グループの最初の整数が範囲の下限を与え、各グループの2番目の整数が範囲の上限を与えます。 グループ内に1つの整数しかない場合、上限は下限と同じです。上界が下界より小さい場合は、ヌル範囲(値がありません)を表します。上界が下界と等しい場合は、1つの値からなる範囲を表します。上限が下限より大きい場合は、複数の値からなる範囲を表します。範囲は任意の順序で出現し、重複しても構いません。すべての範囲の和がセットの内容を表します。SetOfIntegerSyntaxインスタンスが構築されると、その値は不変です。</target>
        </trans-unit>
        <trans-unit id="4d2d378458c146562d67eef1a8ddb1eb555f8996" translate="yes" xml:space="preserve">
          <source>In case of &lt;a href=&quot;../../../../java.base/java/util/serviceconfigurationerror&quot;&gt;&lt;code&gt;ServiceConfigurationError&lt;/code&gt;&lt;/a&gt; a &lt;a href=&quot;schemafactoryconfigurationerror&quot;&gt;&lt;code&gt;SchemaFactoryConfigurationError&lt;/code&gt;&lt;/a&gt; will be thrown.</source>
          <target state="translated">In case of &lt;a href=&quot;../../../../java.base/java/util/serviceconfigurationerror&quot;&gt; &lt;code&gt;ServiceConfigurationError&lt;/code&gt; &lt;/a&gt; a &lt;a href=&quot;schemafactoryconfigurationerror&quot;&gt; &lt;code&gt;SchemaFactoryConfigurationError&lt;/code&gt; &lt;/a&gt; will be thrown.</target>
        </trans-unit>
        <trans-unit id="9d8151180e8b90a1132b0cccb8774fce54d1a54c" translate="yes" xml:space="preserve">
          <source>In case of &lt;a href=&quot;../../../../java.base/java/util/serviceconfigurationerror&quot;&gt;&lt;code&gt;ServiceConfigurationError&lt;/code&gt;&lt;/a&gt; an &lt;a href=&quot;xpathfactoryconfigurationexception&quot;&gt;&lt;code&gt;XPathFactoryConfigurationException&lt;/code&gt;&lt;/a&gt; will be thrown.</source>
          <target state="translated">In case of &lt;a href=&quot;../../../../java.base/java/util/serviceconfigurationerror&quot;&gt; &lt;code&gt;ServiceConfigurationError&lt;/code&gt; &lt;/a&gt; an &lt;a href=&quot;xpathfactoryconfigurationexception&quot;&gt; &lt;code&gt;XPathFactoryConfigurationException&lt;/code&gt; &lt;/a&gt; will be thrown.</target>
        </trans-unit>
        <trans-unit id="6ab38b391c63c43cfa86dbd08744e0705f58ee43" translate="yes" xml:space="preserve">
          <source>In case of &lt;a href=&quot;../../../../java.base/java/util/serviceconfigurationerror&quot;&gt;&lt;code&gt;service
     configuration error&lt;/code&gt;&lt;/a&gt;, a &lt;a href=&quot;datatypeconfigurationexception&quot;&gt;&lt;code&gt;DatatypeConfigurationException&lt;/code&gt;&lt;/a&gt; will be thrown.</source>
          <target state="translated">In case of &lt;a href=&quot;../../../../java.base/java/util/serviceconfigurationerror&quot;&gt; &lt;code&gt;service configuration error&lt;/code&gt; &lt;/a&gt;, a &lt;a href=&quot;datatypeconfigurationexception&quot;&gt; &lt;code&gt;DatatypeConfigurationException&lt;/code&gt; &lt;/a&gt; will be thrown.</target>
        </trans-unit>
        <trans-unit id="6ad8b6db0e5041707a878e8f2137cb2dc1e748f6" translate="yes" xml:space="preserve">
          <source>In case of error while checking the byte or character stream, the method will return false to allow the XML processor to handle the error.</source>
          <target state="translated">バイトまたは文字ストリームのチェック中にエラーが発生した場合、このメソッドは false を返し、XML プロセッサがエラーを処理できるようにします。</target>
        </trans-unit>
        <trans-unit id="beaa91ad6c8eaa4dea63cdc3004dcaca25742485" translate="yes" xml:space="preserve">
          <source>In case of exceptional completion with a CompletionException, methods &lt;a href=&quot;#get()&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#get(long,java.util.concurrent.TimeUnit)&quot;&gt;&lt;code&gt;get(long, TimeUnit)&lt;/code&gt;&lt;/a&gt; throw an &lt;a href=&quot;executionexception&quot;&gt;&lt;code&gt;ExecutionException&lt;/code&gt;&lt;/a&gt; with the same cause as held in the corresponding CompletionException. To simplify usage in most contexts, this class also defines methods &lt;a href=&quot;#join()&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#getNow(T)&quot;&gt;&lt;code&gt;getNow(T)&lt;/code&gt;&lt;/a&gt; that instead throw the CompletionException directly in these cases.</source>
          <target state="translated">In case of exceptional completion with a CompletionException, methods &lt;a href=&quot;#get()&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;#get(long,java.util.concurrent.TimeUnit)&quot;&gt; &lt;code&gt;get(long, TimeUnit)&lt;/code&gt; &lt;/a&gt; throw an &lt;a href=&quot;executionexception&quot;&gt; &lt;code&gt;ExecutionException&lt;/code&gt; &lt;/a&gt; with the same cause as held in the corresponding CompletionException. To simplify usage in most contexts, this class also defines methods &lt;a href=&quot;#join()&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt; and &lt;a href=&quot;#getNow(T)&quot;&gt; &lt;code&gt;getNow(T)&lt;/code&gt; &lt;/a&gt; that instead throw the CompletionException directly in these cases.</target>
        </trans-unit>
        <trans-unit id="a484bdc7d644636e56b6e425fca8f967f78e3d13" translate="yes" xml:space="preserve">
          <source>In case of exceptional completion with a CompletionException, methods &lt;a href=&quot;completablefuture#get--&quot;&gt;&lt;code&gt;get()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;completablefuture#get-long-java.util.concurrent.TimeUnit-&quot;&gt;&lt;code&gt;get(long, TimeUnit)&lt;/code&gt;&lt;/a&gt; throw an &lt;a href=&quot;executionexception&quot;&gt;&lt;code&gt;ExecutionException&lt;/code&gt;&lt;/a&gt; with the same cause as held in the corresponding CompletionException. To simplify usage in most contexts, this class also defines methods &lt;a href=&quot;completablefuture#join--&quot;&gt;&lt;code&gt;join()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;completablefuture#getNow-T-&quot;&gt;&lt;code&gt;getNow(T)&lt;/code&gt;&lt;/a&gt; that instead throw the CompletionException directly in these cases.</source>
          <target state="translated">CompletionExceptionによる例外的な完了の場合、メソッド&lt;a href=&quot;completablefuture#get--&quot;&gt; &lt;code&gt;get()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;completablefuture#get-long-java.util.concurrent.TimeUnit-&quot;&gt; &lt;code&gt;get(long, TimeUnit)&lt;/code&gt; &lt;/a&gt;は、対応するCompletionExceptionに保持されているのと同じ原因で&lt;a href=&quot;executionexception&quot;&gt; &lt;code&gt;ExecutionException&lt;/code&gt; &lt;/a&gt;をスローします。ほとんどのコンテキストでの使用を簡素化するために、このクラスは、これらの場合に代わりにCompletionExceptionを直接スローするメソッド&lt;a href=&quot;completablefuture#join--&quot;&gt; &lt;code&gt;join()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;completablefuture#getNow-T-&quot;&gt; &lt;code&gt;getNow(T)&lt;/code&gt; &lt;/a&gt;も定義します。</target>
        </trans-unit>
        <trans-unit id="02e1bf0c0b871bf4e85899ff41b22e62b5894d0a" translate="yes" xml:space="preserve">
          <source>In case of local transfer a serialized copy of the object returned by the encapsulated transferable is provided when the data is requested in application/x-java-serialized-object data flavor.</source>
          <target state="translated">ローカル転送の場合、データがapplication/x-java-serialized-objectデータフレーバーで要求されたときに、カプセル化された転送可能なオブジェクトによって返されるオブジェクトのシリアライズされたコピーが提供されます。</target>
        </trans-unit>
        <trans-unit id="6b30498fac7ace93c84b231cbf2811b4209e3742" translate="yes" xml:space="preserve">
          <source>In case the client does not explicitly initialize the AlgorithmParameterGenerator (via a call to an &lt;code&gt;engineInit&lt;/code&gt; method), each provider must supply (and document) a default initialization. For example, the Sun provider uses a default modulus prime size of 1024 bits for the generation of DSA parameters.</source>
          <target state="translated">クライアントが（ &lt;code&gt;engineInit&lt;/code&gt; メソッドの呼び出しを介して）AlgorithmParameterGeneratorを明示的に初期化しない場合、各プロバイダーはデフォルトの初期化を提供（および文書化）する必要があります。たとえば、Sunプロバイダーは、DSAパラメータの生成に1024ビットのデフォルトの係数素数サイズを使用します。</target>
        </trans-unit>
        <trans-unit id="68e407b5b13916cde2cd11c5f37eb5f842e4f9a5" translate="yes" xml:space="preserve">
          <source>In case the client does not explicitly initialize the AlgorithmParameterGenerator (via a call to an &lt;code&gt;engineInit&lt;/code&gt; method), each provider must supply (and document) a default initialization. See the Keysize Restriction sections of the &lt;a href=&quot;https://www.oracle.com/pls/topic/lookup?ctx=javase11&amp;amp;id=security_guide_jdk_providers&quot;&gt;JDK Providers&lt;/a&gt; document for information on the AlgorithmParameterGenerator defaults used by JDK providers. However, note that defaults may vary across different providers. Additionally, the default value for a provider may change in a future version. Therefore, it is recommended to explicitly initialize the AlgorithmParameterGenerator instead of relying on provider-specific defaults.</source>
          <target state="translated">In case the client does not explicitly initialize the AlgorithmParameterGenerator (via a call to an &lt;code&gt;engineInit&lt;/code&gt; method), each provider must supply (and document) a default initialization. See the Keysize Restriction sections of the &lt;a href=&quot;https://www.oracle.com/pls/topic/lookup?ctx=javase11&amp;amp;id=security_guide_jdk_providers&quot;&gt;JDK Providers&lt;/a&gt; document for information on the AlgorithmParameterGenerator defaults used by JDK providers. However, note that defaults may vary across different providers. Additionally, the default value for a provider may change in a future version. Therefore, it is recommended to explicitly initialize the AlgorithmParameterGenerator instead of relying on provider-specific defaults.</target>
        </trans-unit>
        <trans-unit id="a37d2611d020aa41b4751a0d8cd1144f2acda07a" translate="yes" xml:space="preserve">
          <source>In case the client does not explicitly initialize the AlgorithmParameterGenerator (via a call to an &lt;code&gt;init&lt;/code&gt; method), each provider must supply (and document) a default initialization. For example, the Sun provider uses a default modulus prime size of 1024 bits for the generation of DSA parameters.</source>
          <target state="translated">クライアントが明示的にAlgorithmParameterGeneratorを初期化しない場合（ &lt;code&gt;init&lt;/code&gt; メソッドの呼び出しを介して）、各プロバイダーはデフォルトの初期化を提供（および文書化）する必要があります。たとえば、Sunプロバイダーは、DSAパラメータの生成に1024ビットのデフォルトの係数素数サイズを使用します。</target>
        </trans-unit>
        <trans-unit id="618f13f618647d566b20d8751205271f6da0fde1" translate="yes" xml:space="preserve">
          <source>In case the client does not explicitly initialize the AlgorithmParameterGenerator (via a call to an &lt;code&gt;init&lt;/code&gt; method), each provider must supply (and document) a default initialization. See the Keysize Restriction sections of the &lt;a href=&quot;https://www.oracle.com/pls/topic/lookup?ctx=javase11&amp;amp;id=security_guide_jdk_providers&quot;&gt;JDK Providers&lt;/a&gt; document for information on the AlgorithmParameterGenerator defaults used by JDK providers. However, note that defaults may vary across different providers. Additionally, the default value for a provider may change in a future version. Therefore, it is recommended to explicitly initialize the AlgorithmParameterGenerator instead of relying on provider-specific defaults.</source>
          <target state="translated">In case the client does not explicitly initialize the AlgorithmParameterGenerator (via a call to an &lt;code&gt;init&lt;/code&gt; method), each provider must supply (and document) a default initialization. See the Keysize Restriction sections of the &lt;a href=&quot;https://www.oracle.com/pls/topic/lookup?ctx=javase11&amp;amp;id=security_guide_jdk_providers&quot;&gt;JDK Providers&lt;/a&gt; document for information on the AlgorithmParameterGenerator defaults used by JDK providers. However, note that defaults may vary across different providers. Additionally, the default value for a provider may change in a future version. Therefore, it is recommended to explicitly initialize the AlgorithmParameterGenerator instead of relying on provider-specific defaults.</target>
        </trans-unit>
        <trans-unit id="5eb2b1a734ed185b35dd6d539f47ccd18d6fa259" translate="yes" xml:space="preserve">
          <source>In case the client does not explicitly initialize the KeyGenerator (via a call to an &lt;code&gt;init&lt;/code&gt; method), each provider must supply (and document) a default initialization.</source>
          <target state="translated">クライアントが（ &lt;code&gt;init&lt;/code&gt; メソッドの呼び出しを介して）KeyGeneratorを明示的に初期化しない場合、各プロバイダーはデフォルトの初期化を提供（および文書化）する必要があります。</target>
        </trans-unit>
        <trans-unit id="850cecd70d52ca77c6e849b65f63f33d0551283d" translate="yes" xml:space="preserve">
          <source>In case the client does not explicitly initialize the KeyGenerator (via a call to an &lt;code&gt;init&lt;/code&gt; method), each provider must supply (and document) a default initialization. See the Keysize Restriction sections of the &lt;a href=&quot;https://www.oracle.com/pls/topic/lookup?ctx=javase11&amp;amp;id=security_guide_jdk_providers&quot;&gt;JDK Providers&lt;/a&gt; document for information on the KeyGenerator defaults used by JDK providers. However, note that defaults may vary across different providers. Additionally, the default value for a provider may change in a future version. Therefore, it is recommended to explicitly initialize the KeyGenerator instead of relying on provider-specific defaults.</source>
          <target state="translated">In case the client does not explicitly initialize the KeyGenerator (via a call to an &lt;code&gt;init&lt;/code&gt; method), each provider must supply (and document) a default initialization. See the Keysize Restriction sections of the &lt;a href=&quot;https://www.oracle.com/pls/topic/lookup?ctx=javase11&amp;amp;id=security_guide_jdk_providers&quot;&gt;JDK Providers&lt;/a&gt; document for information on the KeyGenerator defaults used by JDK providers. However, note that defaults may vary across different providers. Additionally, the default value for a provider may change in a future version. Therefore, it is recommended to explicitly initialize the KeyGenerator instead of relying on provider-specific defaults.</target>
        </trans-unit>
        <trans-unit id="debfe51230845fafd7d09cad852623660ca1f4b3" translate="yes" xml:space="preserve">
          <source>In case the client does not explicitly initialize the KeyPairGenerator (via a call to an &lt;code&gt;initialize&lt;/code&gt; method), each provider must supply (and document) a default initialization. For example, the</source>
          <target state="translated">クライアントが（ &lt;code&gt;initialize&lt;/code&gt; メソッドの呼び出しを介して）KeyPairGeneratorを明示的に初期化しない場合、各プロバイダーはデフォルトの初期化を提供（および文書化）する必要があります。たとえば、</target>
        </trans-unit>
        <trans-unit id="204488c07139beb503a6394353ed2128445b7fb4" translate="yes" xml:space="preserve">
          <source>In case the client does not explicitly initialize the KeyPairGenerator (via a call to an &lt;code&gt;initialize&lt;/code&gt; method), each provider must supply (and document) a default initialization. See the Keysize Restriction sections of the &lt;a href=&quot;https://www.oracle.com/pls/topic/lookup?ctx=javase11&amp;amp;id=security_guide_jdk_providers&quot;&gt;JDK Providers&lt;/a&gt; document for information on the KeyPairGenerator defaults used by JDK providers. However, note that defaults may vary across different providers. Additionally, the default value for a provider may change in a future version. Therefore, it is recommended to explicitly initialize the KeyPairGenerator instead of relying on provider-specific defaults.</source>
          <target state="translated">In case the client does not explicitly initialize the KeyPairGenerator (via a call to an &lt;code&gt;initialize&lt;/code&gt; method), each provider must supply (and document) a default initialization. See the Keysize Restriction sections of the &lt;a href=&quot;https://www.oracle.com/pls/topic/lookup?ctx=javase11&amp;amp;id=security_guide_jdk_providers&quot;&gt;JDK Providers&lt;/a&gt; document for information on the KeyPairGenerator defaults used by JDK providers. However, note that defaults may vary across different providers. Additionally, the default value for a provider may change in a future version. Therefore, it is recommended to explicitly initialize the KeyPairGenerator instead of relying on provider-specific defaults.</target>
        </trans-unit>
        <trans-unit id="74c4c704743eaa4c51b305733ce161d1198c7af9" translate="yes" xml:space="preserve">
          <source>In cases where the given member is of variable arity (i.e., a method or constructor) the returned method handle will also be of &lt;a href=&quot;methodhandle#asVarargsCollector(java.lang.Class)&quot;&gt;variable arity&lt;/a&gt;. In all other cases, the returned method handle will be of fixed arity.</source>
          <target state="translated">In cases where the given member is of variable arity (i.e., a method or constructor) the returned method handle will also be of &lt;a href=&quot;methodhandle#asVarargsCollector(java.lang.Class)&quot;&gt;variable arity&lt;/a&gt;. In all other cases, the returned method handle will be of fixed arity.</target>
        </trans-unit>
        <trans-unit id="9941fbe4a1552d799e92803cbaeb391d95bf7051" translate="yes" xml:space="preserve">
          <source>In cases where the given member is of variable arity (i.e., a method or constructor) the returned method handle will also be of &lt;a href=&quot;methodhandle#asVarargsCollector-java.lang.Class-&quot;&gt;variable arity&lt;/a&gt;. In all other cases, the returned method handle will be of fixed arity.</source>
          <target state="translated">指定されたメンバーが可変アリティ（つまり、メソッドまたはコンストラクター）である場合、返されるメソッドハンドルも&lt;a href=&quot;methodhandle#asVarargsCollector-java.lang.Class-&quot;&gt;可変アリティになります&lt;/a&gt;。他のすべての場合では、返されるメソッドハンドルは固定されたアリティになります。</target>
        </trans-unit>
        <trans-unit id="b23a675004466dd2b4cbce7eda7eaf631095a71f" translate="yes" xml:space="preserve">
          <source>In cases where the inherited channel represents a network socket then the &lt;a href=&quot;../channel&quot;&gt;&lt;code&gt;Channel&lt;/code&gt;&lt;/a&gt; type returned by this method is determined as follows:</source>
          <target state="translated">継承されたチャネルがネットワークソケットを表す場合、このメソッドによって返される&lt;a href=&quot;../channel&quot;&gt; &lt;code&gt;Channel&lt;/code&gt; &lt;/a&gt;タイプは次のように決定されます。</target>
        </trans-unit>
        <trans-unit id="f6aa2646aaa3d5e37e2c5cce3a7678a57dd20872" translate="yes" xml:space="preserve">
          <source>In cases where the lookup object is &lt;a href=&quot;methodhandles#publicLookup()&quot;&gt;&lt;code&gt;publicLookup()&lt;/code&gt;&lt;/a&gt;, or some other lookup object without &lt;a href=&quot;methodhandles.lookup#privacc&quot;&gt;private access&lt;/a&gt;, the lookup class is disregarded. In such cases, no caller-sensitive method handle can be created, access is forbidden, and the lookup fails with an &lt;code&gt;IllegalAccessException&lt;/code&gt;.</source>
          <target state="translated">In cases where the lookup object is &lt;a href=&quot;methodhandles#publicLookup()&quot;&gt; &lt;code&gt;publicLookup()&lt;/code&gt; &lt;/a&gt;, or some other lookup object without &lt;a href=&quot;methodhandles.lookup#privacc&quot;&gt;private access&lt;/a&gt;, the lookup class is disregarded. In such cases, no caller-sensitive method handle can be created, access is forbidden, and the lookup fails with an &lt;code&gt;IllegalAccessException&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="e96745c8c1f08936c49bcea65ee1327783f9c9d0" translate="yes" xml:space="preserve">
          <source>In cases where the lookup object is &lt;a href=&quot;methodhandles#publicLookup--&quot;&gt;&lt;code&gt;publicLookup()&lt;/code&gt;&lt;/a&gt;, or some other lookup object without &lt;a href=&quot;methodhandles.lookup#privacc&quot;&gt;private access&lt;/a&gt;, the lookup class is disregarded. In such cases, no caller-sensitive method handle can be created, access is forbidden, and the lookup fails with an &lt;code&gt;IllegalAccessException&lt;/code&gt;.</source>
          <target state="translated">ルックアップオブジェクトが&lt;a href=&quot;methodhandles#publicLookup--&quot;&gt; &lt;code&gt;publicLookup()&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;methodhandles.lookup#privacc&quot;&gt;プライベートアクセスの&lt;/a&gt;ないその他のルックアップオブジェクトである場合、ルックアップクラスは無視されます。このような場合、呼び出し側に依存するメソッドハンドルを作成できず、アクセスが禁止され、検索が &lt;code&gt;IllegalAccessException&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="610432ed467c71937577f34e5257a28d540e06ac" translate="yes" xml:space="preserve">
          <source>In cases where the stream implementation is able to optimize away the production of some or all the elements (such as with short-circuiting operations like &lt;code&gt;findFirst&lt;/code&gt;, or in the example described in &lt;a href=&quot;#count()&quot;&gt;&lt;code&gt;count()&lt;/code&gt;&lt;/a&gt;), the action will not be invoked for those elements.</source>
          <target state="translated">In cases where the stream implementation is able to optimize away the production of some or all the elements (such as with short-circuiting operations like &lt;code&gt;findFirst&lt;/code&gt; , or in the example described in &lt;a href=&quot;#count()&quot;&gt; &lt;code&gt;count()&lt;/code&gt; &lt;/a&gt;), the action will not be invoked for those elements.</target>
        </trans-unit>
        <trans-unit id="77f68deaa108cb1537a1eec87f3fc8ea57159538" translate="yes" xml:space="preserve">
          <source>In client mode, unless the return &lt;a href=&quot;../../../java/util/list&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; is empty, the client should use the requested server names to guide its endpoint identification of the peer's identity, and/or other aspects of security policy.</source>
          <target state="translated">クライアントモードでは、戻り&lt;a href=&quot;../../../java/util/list&quot;&gt; &lt;code&gt;List&lt;/code&gt; &lt;/a&gt;が空でない限り、クライアントは要求されたサーバー名を使用して、ピアのアイデンティティのエンドポイント識別やセキュリティポリシーの他の側面をガイドする必要があります。</target>
        </trans-unit>
        <trans-unit id="766cdb2ff65ab81907f3f51a9b0d20746cd713e5" translate="yes" xml:space="preserve">
          <source>In conforming implementations of Element Traversal, all objects that implement &lt;a href=&quot;element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; must also implement the &lt;code&gt;ElementTraversal&lt;/code&gt; interface. Four of the methods, &lt;a href=&quot;#getFirstElementChild()&quot;&gt;&lt;code&gt;getFirstElementChild()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#getLastElementChild()&quot;&gt;&lt;code&gt;getLastElementChild()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#getPreviousElementSibling()&quot;&gt;&lt;code&gt;getPreviousElementSibling()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#getNextElementSibling()&quot;&gt;&lt;code&gt;getNextElementSibling()&lt;/code&gt;&lt;/a&gt;, each provides a live reference to another element with the defined relationship to the current element, if the related element exists. The fifth method, &lt;a href=&quot;#getChildElementCount()&quot;&gt;&lt;code&gt;getChildElementCount()&lt;/code&gt;&lt;/a&gt;, exposes the number of child elements of an element, for preprocessing before navigation.</source>
          <target state="translated">In conforming implementations of Element Traversal, all objects that implement &lt;a href=&quot;element&quot;&gt; &lt;code&gt;Element&lt;/code&gt; &lt;/a&gt; must also implement the &lt;code&gt;ElementTraversal&lt;/code&gt; interface. Four of the methods, &lt;a href=&quot;#getFirstElementChild()&quot;&gt; &lt;code&gt;getFirstElementChild()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#getLastElementChild()&quot;&gt; &lt;code&gt;getLastElementChild()&lt;/code&gt; &lt;/a&gt;, &lt;a href=&quot;#getPreviousElementSibling()&quot;&gt; &lt;code&gt;getPreviousElementSibling()&lt;/code&gt; &lt;/a&gt;, and &lt;a href=&quot;#getNextElementSibling()&quot;&gt; &lt;code&gt;getNextElementSibling()&lt;/code&gt; &lt;/a&gt;, each provides a live reference to another element with the defined relationship to the current element, if the related element exists. The fifth method, &lt;a href=&quot;#getChildElementCount()&quot;&gt; &lt;code&gt;getChildElementCount()&lt;/code&gt; &lt;/a&gt;, exposes the number of child elements of an element, for preprocessing before navigation.</target>
        </trans-unit>
        <trans-unit id="79b29a8711f23dff025211e81b749f6713301187" translate="yes" xml:space="preserve">
          <source>In contrast, the &lt;a href=&quot;printermoreinfo&quot;&gt;&lt;code&gt;PrinterMoreInfo&lt;/code&gt;&lt;/a&gt; attribute is used to find out more information about this specific printer rather than this general kind of printer.</source>
          <target state="translated">対照的に、&lt;a href=&quot;printermoreinfo&quot;&gt; &lt;code&gt;PrinterMoreInfo&lt;/code&gt; &lt;/a&gt;属性は、この一般的な種類のプリンターではなく、この特定のプリンターに関する詳細情報を見つけるために使用されます。</target>
        </trans-unit>
        <trans-unit id="9caffca4032e0bb867acc7983198b345a565191b" translate="yes" xml:space="preserve">
          <source>In contrast, the &lt;a href=&quot;printermoreinfomanufacturer&quot;&gt;&lt;code&gt;PrinterMoreInfoManufacturer&lt;/code&gt;&lt;/a&gt; attribute is used to find out more information about this general kind of printer rather than this specific printer.</source>
          <target state="translated">対照的に、&lt;a href=&quot;printermoreinfomanufacturer&quot;&gt; &lt;code&gt;PrinterMoreInfoManufacturer&lt;/code&gt; &lt;/a&gt;属性は、この特定のプリンターではなく、この一般的な種類のプリンターに関する詳細情報を見つけるために使用されます。</target>
        </trans-unit>
        <trans-unit id="bed3edf217562c5e1423cbcacb264e83e97f8ab1" translate="yes" xml:space="preserve">
          <source>In details, the state model for buttons works as follows when used with the keyboard:</source>
          <target state="translated">具体的には、キーボードで使用する場合、ボタンの状態モデルは以下のように動作します。</target>
        </trans-unit>
        <trans-unit id="4062e12a39d4486940201fa830bbde974cf851ea" translate="yes" xml:space="preserve">
          <source>In details, the state model for buttons works as follows when used with the mouse:</source>
          <target state="translated">具体的には、マウスで使用する場合のボタンの状態モデルは以下のように動作します。</target>
        </trans-unit>
        <trans-unit id="ee40bba43e6448bd8f50c5059985279d975f96e9" translate="yes" xml:space="preserve">
          <source>In doing so, a &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt; may modify the events, for example by adding defaulted attributes.</source>
          <target state="translated">In doing so, a &lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; &lt;/a&gt; may modify the events, for example by adding defaulted attributes.</target>
        </trans-unit>
        <trans-unit id="060627d2546f44e2eb02a70e34bf6f73812e4991" translate="yes" xml:space="preserve">
          <source>In dotall mode, the expression &lt;code&gt;.&lt;/code&gt; matches any character, including a line terminator. By default this expression does not match line terminators.</source>
          <target state="translated">dotallモードでは、式 &lt;code&gt;.&lt;/code&gt; 行末記号を含む任意の文字に一致します。デフォルトでは、この式は行末記号と一致しません。</target>
        </trans-unit>
        <trans-unit id="56eb79ce8d988bd4f7d4412f2ff9d697e4ca2aec" translate="yes" xml:space="preserve">
          <source>In each iteration, the iteration variables are passed to an invocation of the &lt;code&gt;body&lt;/code&gt; handle. A non-&lt;code&gt;void&lt;/code&gt; value returned from the body (of type &lt;code&gt;V&lt;/code&gt;) updates the leading iteration variable. The result of the loop handle execution will be the final &lt;code&gt;V&lt;/code&gt; value of that variable (or &lt;code&gt;void&lt;/code&gt; if there is no &lt;code&gt;V&lt;/code&gt; variable).</source>
          <target state="translated">In each iteration, the iteration variables are passed to an invocation of the &lt;code&gt;body&lt;/code&gt; handle. A non- &lt;code&gt;void&lt;/code&gt; value returned from the body (of type &lt;code&gt;V&lt;/code&gt; ) updates the leading iteration variable. The result of the loop handle execution will be the final &lt;code&gt;V&lt;/code&gt; value of that variable (or &lt;code&gt;void&lt;/code&gt; if there is no &lt;code&gt;V&lt;/code&gt; variable).</target>
        </trans-unit>
        <trans-unit id="d88997d2890c678dab9000d415f1fe8afb3e8043" translate="yes" xml:space="preserve">
          <source>In either case, if the host was specified using the &lt;code&gt;[...]&lt;/code&gt; syntax for numeric IPv6 addresses, the square brackets are not included in the return value here.</source>
          <target state="translated">どちらの場合でも、ホストが数値IPv6アドレスの &lt;code&gt;[...]&lt;/code&gt; 構文を使用して指定された場合、角括弧はここでの戻り値には含まれません。</target>
        </trans-unit>
        <trans-unit id="4f9f1eeccbc325e134332f21c771ad94fb506cd0" translate="yes" xml:space="preserve">
          <source>In either case, language ranges are sorted in descending order in the Language Priority List based on priority or weight. If a language range appears in the given &lt;code&gt;ranges&lt;/code&gt; more than once, only the first one is included on the Language Priority List.</source>
          <target state="translated">どちらの場合も、言語の範囲は、優先順位または重みに基づいて、言語優先順位リストで降順にソートされます。言語範囲が指定された &lt;code&gt;ranges&lt;/code&gt; 複数回出現する場合、最初の言語範囲のみが言語優先リストに含まれます。</target>
        </trans-unit>
        <trans-unit id="769252c126293283cc7c83a2b1bd6109e998defc" translate="yes" xml:space="preserve">
          <source>In either case, the &quot;*&quot; or &quot;-&quot; character at the end of a wildcard &lt;code&gt;path&lt;/code&gt; is removed before canonicalization or normalization. It is stored in a separate wildcard flag field.</source>
          <target state="translated">In either case, the &quot;*&quot; or &quot;-&quot; character at the end of a wildcard &lt;code&gt;path&lt;/code&gt; is removed before canonicalization or normalization. It is stored in a separate wildcard flag field.</target>
        </trans-unit>
        <trans-unit id="55b6c09f46927e3b4d92afe1b61f0c38ea762b03" translate="yes" xml:space="preserve">
          <source>In either case, the class</source>
          <target state="translated">いずれの場合も、クラス</target>
        </trans-unit>
        <trans-unit id="236fdad6a9437be057f2da47354343f51080d4cd" translate="yes" xml:space="preserve">
          <source>In either case, the code that instantiates an X.509 certificate consults the value of the &lt;code&gt;cert.provider.x509v1&lt;/code&gt; security property to locate the actual implementation or instantiates a default implementation.</source>
          <target state="translated">どちらの場合も、X.509証明書をインスタンス化するコードは、 &lt;code&gt;cert.provider.x509v1&lt;/code&gt; セキュリティプロパティの値を調べて実際の実装を見つけるか、デフォルトの実装をインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="45f7d360a66191e21bd373f5aba227e8c0490155" translate="yes" xml:space="preserve">
          <source>In either case, the quality setting in an &lt;code&gt;ImageWriteParam&lt;/code&gt; has the same meaning as for the underlying library: 1.00 means a quantization table of all 1's, 0.75 means the &quot;standard&quot;, visually lossless quantization table, and 0.00 means aquantization table of all 255's.</source>
          <target state="translated">どちらの場合も、 &lt;code&gt;ImageWriteParam&lt;/code&gt; の品質設定は、基になるライブラリと同じ意味を持ちます。1.00はすべて1の量子化テーブルを意味し、0.75は「標準」の視覚的に損失のない量子化テーブルを意味し、0.00はすべて255の量子化テーブルを意味します。</target>
        </trans-unit>
        <trans-unit id="eb55847a08d18a4afa181d4462c2342b7398dcea" translate="yes" xml:space="preserve">
          <source>In environments in which the delegation model is not strictly hierarchical, class loaders need to be parallel capable, otherwise class loading can lead to deadlocks because the loader lock is held for the duration of the class loading process (see &lt;a href=&quot;classloader#loadClass-java.lang.String-&quot;&gt;&lt;code&gt;&lt;code&gt;loadClass&lt;/code&gt;&lt;/code&gt;&lt;/a&gt; methods).</source>
          <target state="translated">委任モデルが厳密に階層的でない環境では、クラスローダーは並列対応である必要があります。そうでない場合、ローダーのロックがクラスの読み込みプロセスの間保持されるため、クラスの読み込みがデッドロックにつながる可能性があります（&lt;a href=&quot;classloader#loadClass-java.lang.String-&quot;&gt; &lt;code&gt;&lt;code&gt;loadClass&lt;/code&gt;&lt;/code&gt; &lt;/a&gt;メソッドを参照）。</target>
        </trans-unit>
        <trans-unit id="c22bcef59b65807b22a81446aa681e17a7f9b7cf" translate="yes" xml:space="preserve">
          <source>In essence, a menu is a button with an associated &lt;code&gt;JPopupMenu&lt;/code&gt;. When the &quot;button&quot; is pressed, the &lt;code&gt;JPopupMenu&lt;/code&gt; appears. If the &quot;button&quot; is on the &lt;code&gt;JMenuBar&lt;/code&gt;, the menu is a top-level window. If the &quot;button&quot; is another menu item, then the &lt;code&gt;JPopupMenu&lt;/code&gt; is &quot;pull-right&quot; menu.</source>
          <target state="translated">In essence, a menu is a button with an associated &lt;code&gt;JPopupMenu&lt;/code&gt; . When the &quot;button&quot; is pressed, the &lt;code&gt;JPopupMenu&lt;/code&gt; appears. If the &quot;button&quot; is on the &lt;code&gt;JMenuBar&lt;/code&gt; , the menu is a top-level window. If the &quot;button&quot; is another menu item, then the &lt;code&gt;JPopupMenu&lt;/code&gt; is &quot;pull-right&quot; menu.</target>
        </trans-unit>
        <trans-unit id="76b01c569fddbef2fd279870bf0626c68e22edb7" translate="yes" xml:space="preserve">
          <source>In every case, elements &lt;code&gt;b[0]&lt;/code&gt; through &lt;code&gt;b[off]&lt;/code&gt; and elements &lt;code&gt;b[off+len]&lt;/code&gt; through &lt;code&gt;b[b.length-1]&lt;/code&gt; are unaffected.</source>
          <target state="translated">すべての場合において、要素 &lt;code&gt;b[0]&lt;/code&gt; を介して、 &lt;code&gt;b[off]&lt;/code&gt; と要素 &lt;code&gt;b[off+len]&lt;/code&gt; を介して &lt;code&gt;b[b.length-1]&lt;/code&gt; 影響を受けません。</target>
        </trans-unit>
        <trans-unit id="801d9d22e0c396affe549d48580efe1c12d56b6f" translate="yes" xml:space="preserve">
          <source>In every other case, an &lt;code&gt;OpenType&lt;/code&gt; is assignable from another &lt;code&gt;OpenType&lt;/code&gt; only if they are equal.</source>
          <target state="translated">他のすべてのケースでは、 &lt;code&gt;OpenType&lt;/code&gt; は、それらが等しい場合にのみ別の &lt;code&gt;OpenType&lt;/code&gt; から割り当て可能です。</target>
        </trans-unit>
        <trans-unit id="2542cc96f3c5e1b57effa4d62600ff590801b978" translate="yes" xml:space="preserve">
          <source>In fact, &quot;import ...*&quot; is usually a sign of sloppy programming anyway, so the user should consider this a feature rather than a bug.</source>
          <target state="translated">実際には、&quot;import ...*&quot;は通常、いずれにせよずさんなプログラミングのサインなので、ユーザーはこれをバグというよりも機能と考えるべきです。</target>
        </trans-unit>
        <trans-unit id="7180b2cd8aff78dc10263ca1b56b42ba5afd94b5" translate="yes" xml:space="preserve">
          <source>In fixed-delay execution, each execution is scheduled relative to the actual execution time of the previous execution. If an execution is delayed for any reason (such as garbage collection or other background activity), subsequent executions will be delayed as well. In the long run, the frequency of execution will generally be slightly lower than the reciprocal of the specified period (assuming the system clock underlying &lt;code&gt;Object.wait(long)&lt;/code&gt; is accurate).</source>
          <target state="translated">固定遅延実行では、各実行は前の実行の実際の実行時間に関連してスケジュールされます。何らかの理由（ガベージコレクションやその他のバックグラウンドアクティビティなど）で実行が遅延した場合、後続の実行も遅延します。長期的には、実行の頻度は通常、指定された期間の逆数よりわずかに低くなります（ &lt;code&gt;Object.wait(long)&lt;/code&gt; の基礎となるシステムクロックが正確であると想定）。</target>
        </trans-unit>
        <trans-unit id="06dd4ce58b291cfcd7c050a8ac56352c9904d7d1" translate="yes" xml:space="preserve">
          <source>In fixed-delay execution, each execution is scheduled relative to the actual execution time of the previous execution. If an execution is delayed for any reason (such as garbage collection or other background activity), subsequent executions will be delayed as well. In the long run, the frequency of execution will generally be slightly lower than the reciprocal of the specified period (assuming the system clock underlying &lt;code&gt;Object.wait(long)&lt;/code&gt; is accurate). As a consequence of the above, if the scheduled first time is in the past, it is scheduled for immediate execution.</source>
          <target state="translated">固定遅延実行では、各実行は前の実行の実際の実行時間に関連してスケジュールされます。何らかの理由（ガベージコレクションやその他のバックグラウンドアクティビティなど）で実行が遅延した場合、後続の実行も遅延します。長期的には、実行の頻度は通常、指定された期間の逆数よりわずかに低くなります（ &lt;code&gt;Object.wait(long)&lt;/code&gt; の基礎となるシステムクロックが正確であると想定）。上記の結果として、最初にスケジュールされた時間が過去の場合、即時実行がスケジュールされます。</target>
        </trans-unit>
        <trans-unit id="38f4d1c31bc026707af439dd64fd16f577250fa5" translate="yes" xml:space="preserve">
          <source>In fixed-rate execution, each execution is scheduled relative to the scheduled execution time of the initial execution. If an execution is delayed for any reason (such as garbage collection or other background activity), two or more executions will occur in rapid succession to &quot;catch up.&quot; In the long run, the frequency of execution will be exactly the reciprocal of the specified period (assuming the system clock underlying &lt;code&gt;Object.wait(long)&lt;/code&gt; is accurate).</source>
          <target state="translated">固定レート実行では、各実行は、最初の実行のスケジュールされた実行時間に関連してスケジュールされます。なんらかの理由（ガベージコレクションやその他のバックグラウンドアクティビティなど）によって実行が遅延した場合、「追いつき」に続いて、2つ以上の実行が連続して発生します。長期的には、実行頻度は指定された期間の逆数になります（ &lt;code&gt;Object.wait(long)&lt;/code&gt; の基礎となるシステムクロックが正確であると想定）。</target>
        </trans-unit>
        <trans-unit id="6c5dab1a04b2f64b424e450784bf531fabb4f1ec" translate="yes" xml:space="preserve">
          <source>In fixed-rate execution, each execution is scheduled relative to the scheduled execution time of the initial execution. If an execution is delayed for any reason (such as garbage collection or other background activity), two or more executions will occur in rapid succession to &quot;catch up.&quot; In the long run, the frequency of execution will be exactly the reciprocal of the specified period (assuming the system clock underlying &lt;code&gt;Object.wait(long)&lt;/code&gt; is accurate). As a consequence of the above, if the scheduled first time is in the past, then any &quot;missed&quot; executions will be scheduled for immediate &quot;catch up&quot; execution.</source>
          <target state="translated">固定レート実行では、各実行は、最初の実行のスケジュールされた実行時間に関連してスケジュールされます。なんらかの理由（ガベージコレクションやその他のバックグラウンドアクティビティなど）によって実行が遅延した場合、「追いつき」に続いて、2つ以上の実行が連続して発生します。長期的には、実行頻度は指定された期間の逆数になります（ &lt;code&gt;Object.wait(long)&lt;/code&gt; の基礎となるシステムクロックが正確であると想定）。上記の結果として、スケジュールされた最初の時間が過去の場合、「実行されなかった」実行は、即時の「追いつき」実行のためにスケジュールされます。</target>
        </trans-unit>
        <trans-unit id="377721e57496fed42d1cae3373a6f0668f7794a9" translate="yes" xml:space="preserve">
          <source>In general SEVERE messages should describe events that are of considerable importance and which will prevent normal program execution. They should be reasonably intelligible to end users and to system administrators. This level is initialized to &lt;code&gt;1000&lt;/code&gt;.</source>
          <target state="translated">一般に、SEVEREメッセージは、非常に重要であり、通常のプログラムの実行を妨げるイベントを説明する必要があります。それらは、エンドユーザーおよびシステム管理者にとって合理的に理解できるものである必要があります。このレベルは &lt;code&gt;1000&lt;/code&gt; に初期化されます。</target>
        </trans-unit>
        <trans-unit id="61cf99ed5ef8da1599e976e4159b4d46eb5f6234" translate="yes" xml:space="preserve">
          <source>In general Swing is not thread safe. All Swing components and related classes, unless otherwise documented, must be accessed on the event dispatching thread.</source>
          <target state="translated">一般的に、Swing はスレッドセーフではありません。他に文書化されていない限り、すべてのSwingコンポーネントと関連するクラスは、イベントディスパッチスレッド上でアクセスしなければなりません。</target>
        </trans-unit>
        <trans-unit id="ca89517b7bed3fbab9bcbe3cd835aaae375b5494" translate="yes" xml:space="preserve">
          <source>In general WARNING messages should describe events that will be of interest to end users or system managers, or which indicate potential problems. This level is initialized to &lt;code&gt;900&lt;/code&gt;.</source>
          <target state="translated">一般に、WARNINGメッセージは、エンドユーザーまたはシステム管理者にとって重要なイベント、または潜在的な問題を示すイベントを説明する必要があります。このレベルは &lt;code&gt;900&lt;/code&gt; に初期化されます。</target>
        </trans-unit>
        <trans-unit id="52ab12fc5c3f521826991557e9ca1a023d1a3454" translate="yes" xml:space="preserve">
          <source>In general the FINE level should be used for information that will be broadly interesting to developers who do not have a specialized interest in the specific subsystem.</source>
          <target state="translated">一般にFINEレベルは、特定のサブシステムに専門的な関心を持たない開発者に広く興味を持ってもらえるような情報を提供するために使用されるべきである。</target>
        </trans-unit>
        <trans-unit id="fc5cc8c0864383c85fb2bed4626443c7e7721dce" translate="yes" xml:space="preserve">
          <source>In general the rounding modes and precision setting determine how operations return results with a limited number of digits when the exact result has more digits (perhaps infinitely many in the case of division and square root) than the number of digits returned. First, the total number of digits to return is specified by the &lt;code&gt;MathContext&lt;/code&gt;'s &lt;code&gt;precision&lt;/code&gt; setting; this determines the result's</source>
          <target state="translated">In general the rounding modes and precision setting determine how operations return results with a limited number of digits when the exact result has more digits (perhaps infinitely many in the case of division and square root) than the number of digits returned. First, the total number of digits to return is specified by the &lt;code&gt;MathContext&lt;/code&gt; 's &lt;code&gt;precision&lt;/code&gt; setting; this determines the result's</target>
        </trans-unit>
        <trans-unit id="1963e8a87e697420d77d12336068a0b78ee8491b" translate="yes" xml:space="preserve">
          <source>In general the rounding modes and precision setting determine how operations return results with a limited number of digits when the exact result has more digits (perhaps infinitely many in the case of division) than the number of digits returned. First, the total number of digits to return is specified by the &lt;code&gt;MathContext&lt;/code&gt;'s &lt;code&gt;precision&lt;/code&gt; setting; this determines the result's</source>
          <target state="translated">一般に、丸めモードと精度設定は、正確な結果が返される桁数よりも桁数が多い場合（除算の場合はおそらく無限に多い）に、制限された桁数で演算が結果を返す方法を決定します。まず、返される総桁数は &lt;code&gt;MathContext&lt;/code&gt; の &lt;code&gt;precision&lt;/code&gt; 設定で指定されます。これは結果を決定します</target>
        </trans-unit>
        <trans-unit id="efb1ad58a65f9bea2add8227af1103b53b3080cd" translate="yes" xml:space="preserve">
          <source>In general this approach is much faster. Compared to the backing store approach this avoids the overhead of maintaining an offscreen buffer and having to do two &lt;code&gt;copyArea&lt;/code&gt;s. Compared to the non backing store case this approach will greatly reduce the painted region.</source>
          <target state="translated">In general this approach is much faster. Compared to the backing store approach this avoids the overhead of maintaining an offscreen buffer and having to do two &lt;code&gt;copyArea&lt;/code&gt; s. Compared to the non backing store case this approach will greatly reduce the painted region.</target>
        </trans-unit>
        <trans-unit id="c0e94901874b2ae22cda0cfde069060cc90a5196" translate="yes" xml:space="preserve">
          <source>In general, &lt;a href=&quot;string#toLowerCase()&quot;&gt;&lt;code&gt;String.toLowerCase()&lt;/code&gt;&lt;/a&gt; should be used to map characters to lowercase. &lt;code&gt;String&lt;/code&gt; case mapping methods have several benefits over &lt;code&gt;Character&lt;/code&gt; case mapping methods. &lt;code&gt;String&lt;/code&gt; case mapping methods can perform locale-sensitive mappings, context-sensitive mappings, and 1:M character mappings, whereas the &lt;code&gt;Character&lt;/code&gt; case mapping methods cannot.</source>
          <target state="translated">In general, &lt;a href=&quot;string#toLowerCase()&quot;&gt; &lt;code&gt;String.toLowerCase()&lt;/code&gt; &lt;/a&gt; should be used to map characters to lowercase. &lt;code&gt;String&lt;/code&gt; case mapping methods have several benefits over &lt;code&gt;Character&lt;/code&gt; case mapping methods. &lt;code&gt;String&lt;/code&gt; case mapping methods can perform locale-sensitive mappings, context-sensitive mappings, and 1:M character mappings, whereas the &lt;code&gt;Character&lt;/code&gt; case mapping methods cannot.</target>
        </trans-unit>
        <trans-unit id="7903ecabcfca49b9b51c9a6417d726476aff19c9" translate="yes" xml:space="preserve">
          <source>In general, &lt;a href=&quot;string#toLowerCase--&quot;&gt;&lt;code&gt;String.toLowerCase()&lt;/code&gt;&lt;/a&gt; should be used to map characters to lowercase. &lt;code&gt;String&lt;/code&gt; case mapping methods have several benefits over &lt;code&gt;Character&lt;/code&gt; case mapping methods. &lt;code&gt;String&lt;/code&gt; case mapping methods can perform locale-sensitive mappings, context-sensitive mappings, and 1:M character mappings, whereas the &lt;code&gt;Character&lt;/code&gt; case mapping methods cannot.</source>
          <target state="translated">一般に、文字を小文字にマップするには、&lt;a href=&quot;string#toLowerCase--&quot;&gt; &lt;code&gt;String.toLowerCase()&lt;/code&gt; &lt;/a&gt;を使用する必要があります。 &lt;code&gt;String&lt;/code&gt; 大文字と小文字のマッピング方法には、 &lt;code&gt;Character&lt;/code&gt; 大文字と小文字のマッピング方法に比べていくつかの利点があります。 &lt;code&gt;String&lt;/code&gt; に対し、Mの文字マッピング：ケースマッピングメソッドは、ロケールに依存マッピング、コンテキスト依存のマッピング、および1を実行することができる &lt;code&gt;Character&lt;/code&gt; ケースマッピング方法ができません。</target>
        </trans-unit>
        <trans-unit id="fcb952ce2751f84d52d12ddb4b53912b10d6c4f4" translate="yes" xml:space="preserve">
          <source>In general, &lt;a href=&quot;string#toUpperCase()&quot;&gt;&lt;code&gt;String.toUpperCase()&lt;/code&gt;&lt;/a&gt; should be used to map characters to uppercase. &lt;code&gt;String&lt;/code&gt; case mapping methods have several benefits over &lt;code&gt;Character&lt;/code&gt; case mapping methods. &lt;code&gt;String&lt;/code&gt; case mapping methods can perform locale-sensitive mappings, context-sensitive mappings, and 1:M character mappings, whereas the &lt;code&gt;Character&lt;/code&gt; case mapping methods cannot.</source>
          <target state="translated">In general, &lt;a href=&quot;string#toUpperCase()&quot;&gt; &lt;code&gt;String.toUpperCase()&lt;/code&gt; &lt;/a&gt; should be used to map characters to uppercase. &lt;code&gt;String&lt;/code&gt; case mapping methods have several benefits over &lt;code&gt;Character&lt;/code&gt; case mapping methods. &lt;code&gt;String&lt;/code&gt; case mapping methods can perform locale-sensitive mappings, context-sensitive mappings, and 1:M character mappings, whereas the &lt;code&gt;Character&lt;/code&gt; case mapping methods cannot.</target>
        </trans-unit>
        <trans-unit id="e84c348879217d2774b2e6f52daa41be1dbd7647" translate="yes" xml:space="preserve">
          <source>In general, &lt;a href=&quot;string#toUpperCase--&quot;&gt;&lt;code&gt;String.toUpperCase()&lt;/code&gt;&lt;/a&gt; should be used to map characters to uppercase. &lt;code&gt;String&lt;/code&gt; case mapping methods have several benefits over &lt;code&gt;Character&lt;/code&gt; case mapping methods. &lt;code&gt;String&lt;/code&gt; case mapping methods can perform locale-sensitive mappings, context-sensitive mappings, and 1:M character mappings, whereas the &lt;code&gt;Character&lt;/code&gt; case mapping methods cannot.</source>
          <target state="translated">一般に、文字を大文字にマップするには、&lt;a href=&quot;string#toUpperCase--&quot;&gt; &lt;code&gt;String.toUpperCase()&lt;/code&gt; &lt;/a&gt;を使用する必要があります。 &lt;code&gt;String&lt;/code&gt; 場合のマッピング方法は、以上のいくつかの利点持っている &lt;code&gt;Character&lt;/code&gt; ケースマッピング方法を。 &lt;code&gt;String&lt;/code&gt; に対し、Mの文字マッピング：ケースマッピングメソッドは、ロケールに依存マッピング、コンテキスト依存のマッピング、および1を実行することができる &lt;code&gt;Character&lt;/code&gt; ケースマッピング方法ができません。</target>
        </trans-unit>
        <trans-unit id="d7e17baf4657b727413c0aba5c861df347a6bdea" translate="yes" xml:space="preserve">
          <source>In general, a URL can be broken into several parts. Consider the following example:</source>
          <target state="translated">一般的に、URLはいくつかの部分に分割することができます。次の例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="bdd376741f3d8082da9a304e1c250753cd486c5b" translate="yes" xml:space="preserve">
          <source>In general, a Writer sends its output immediately to the underlying character or byte stream. Unless prompt output is required, it is advisable to wrap a BufferedWriter around any Writer whose write() operations may be costly, such as FileWriters and OutputStreamWriters. For example,</source>
          <target state="translated">一般的に、ライターはその出力を基になっている文字またはバイト・ストリームに直ちに送信します。プロンプト出力が必要な場合を除き、FileWriterやOutputStreamWriterのようなwrite()操作がコストのかかるWriterには、BufferedWriterをラップすることをお勧めします。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="639aff6278df151aefd56fe9abfe51c6c6546a60" translate="yes" xml:space="preserve">
          <source>In general, asynchronous tasks execute in either the thread invoking the operation, e.g. &lt;a href=&quot;httpclient#send(java.net.http.HttpRequest,java.net.http.HttpResponse.BodyHandler)&quot;&gt;sending&lt;/a&gt; an HTTP request, or by the threads supplied by the client's &lt;a href=&quot;httpclient#executor()&quot;&gt;&lt;code&gt;executor&lt;/code&gt;&lt;/a&gt;. Dependent tasks, those that are triggered by returned CompletionStages or CompletableFutures, that do not explicitly specify an executor, execute in the same &lt;a href=&quot;../../../../java.base/java/util/concurrent/completablefuture#defaultExecutor()&quot;&gt;&lt;code&gt;default executor&lt;/code&gt;&lt;/a&gt; as that of &lt;code&gt;
 CompletableFuture&lt;/code&gt;, or the invoking thread if the operation completes before the dependent task is registered.</source>
          <target state="translated">In general, asynchronous tasks execute in either the thread invoking the operation, e.g. &lt;a href=&quot;httpclient#send(java.net.http.HttpRequest,java.net.http.HttpResponse.BodyHandler)&quot;&gt;sending&lt;/a&gt; an HTTP request, or by the threads supplied by the client's &lt;a href=&quot;httpclient#executor()&quot;&gt; &lt;code&gt;executor&lt;/code&gt; &lt;/a&gt;. Dependent tasks, those that are triggered by returned CompletionStages or CompletableFutures, that do not explicitly specify an executor, execute in the same &lt;a href=&quot;../../../../java.base/java/util/concurrent/completablefuture#defaultExecutor()&quot;&gt; &lt;code&gt;default executor&lt;/code&gt; &lt;/a&gt; as that of &lt;code&gt; CompletableFuture&lt;/code&gt; , or the invoking thread if the operation completes before the dependent task is registered.</target>
        </trans-unit>
        <trans-unit id="b8c3a1d31a2b60ee471be38513d574e12d32af96" translate="yes" xml:space="preserve">
          <source>In general, creating a connection to a URL is a multistep process:</source>
          <target state="translated">一般的に、URLへの接続を作成するのは多段階のプロセスです。</target>
        </trans-unit>
        <trans-unit id="bfd8112757a14085d8d97c9f9777d5d3cd54f34f" translate="yes" xml:space="preserve">
          <source>In general, developers should use the &lt;code&gt;UIDefaults&lt;/code&gt; returned from &lt;code&gt;getDefaults()&lt;/code&gt;. As the current look and feel may expect certain values to exist, altering the &lt;code&gt;UIDefaults&lt;/code&gt; returned from this method could have unexpected results.</source>
          <target state="translated">In general, developers should use the &lt;code&gt;UIDefaults&lt;/code&gt; returned from &lt;code&gt;getDefaults()&lt;/code&gt; . As the current look and feel may expect certain values to exist, altering the &lt;code&gt;UIDefaults&lt;/code&gt; returned from this method could have unexpected results.</target>
        </trans-unit>
        <trans-unit id="2098f901fe353218eb3766afcbda6c9dd9a40b32" translate="yes" xml:space="preserve">
          <source>In general, each read request made of a Reader causes a corresponding read request to be made of the underlying character or byte stream. It is therefore advisable to wrap a BufferedReader around any Reader whose read() operations may be costly, such as FileReaders and InputStreamReaders. For example,</source>
          <target state="translated">一般的に、リーダーの各読み取り要求は、その下にある文字またはバイト・ストリームの対応する読み取り要求を引き起こします。したがって、FileReadersやInputStreamReadersのように、read()操作にコストがかかるReaderの周りにBufferedReaderをラップすることをお勧めします。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="3316f354198c51080a3833552e7b39608bce991e" translate="yes" xml:space="preserve">
          <source>In general, if sb refers to an instance of a &lt;code&gt;StringBuffer&lt;/code&gt;, then &lt;code&gt;sb.append(x)&lt;/code&gt; has the same effect as &lt;code&gt;sb.insert(sb.length(), x)&lt;/code&gt;.</source>
          <target state="translated">SBはのインスタンスを参照する場合、一般的に、 &lt;code&gt;StringBuffer&lt;/code&gt; の次に、 &lt;code&gt;sb.append(x)&lt;/code&gt; と同様の効果を有する &lt;code&gt;sb.insert(sb.length(), x)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="915babbb9e40489175934fdd5d39ee98d92d2ac1" translate="yes" xml:space="preserve">
          <source>In general, if sb refers to an instance of a &lt;code&gt;StringBuilder&lt;/code&gt;, then &lt;code&gt;sb.append(x)&lt;/code&gt; has the same effect as &lt;code&gt;sb.insert(sb.length(), x)&lt;/code&gt;.</source>
          <target state="translated">SBはのインスタンスを参照する場合、一般的に、 &lt;code&gt;StringBuilder&lt;/code&gt; を、次いで &lt;code&gt;sb.append(x)&lt;/code&gt; と同様の効果を有する &lt;code&gt;sb.insert(sb.length(), x)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="42ad5e48d6d5adf2f12d6cf9f61d8fa7a84aac0c" translate="yes" xml:space="preserve">
          <source>In general, if the text used to construct the &lt;code&gt;LineBreakMeasurer&lt;/code&gt; changes, a new &lt;code&gt;LineBreakMeasurer&lt;/code&gt; must be constructed to reflect the change. (The old &lt;code&gt;LineBreakMeasurer&lt;/code&gt; continues to function properly, but it won't be aware of the text change.) Nevertheless, if the text change is the insertion or deletion of a single character, an existing &lt;code&gt;LineBreakMeasurer&lt;/code&gt; can be 'updated' by calling &lt;code&gt;insertChar&lt;/code&gt; or &lt;code&gt;deleteChar&lt;/code&gt;. Updating an existing &lt;code&gt;LineBreakMeasurer&lt;/code&gt; is much faster than creating a new one. Clients who modify text based on user typing should take advantage of these methods.</source>
          <target state="translated">In general, if the text used to construct the &lt;code&gt;LineBreakMeasurer&lt;/code&gt; changes, a new &lt;code&gt;LineBreakMeasurer&lt;/code&gt; must be constructed to reflect the change. (The old &lt;code&gt;LineBreakMeasurer&lt;/code&gt; continues to function properly, but it won't be aware of the text change.) Nevertheless, if the text change is the insertion or deletion of a single character, an existing &lt;code&gt;LineBreakMeasurer&lt;/code&gt; can be 'updated' by calling &lt;code&gt;insertChar&lt;/code&gt; or &lt;code&gt;deleteChar&lt;/code&gt; . Updating an existing &lt;code&gt;LineBreakMeasurer&lt;/code&gt; is much faster than creating a new one. Clients who modify text based on user typing should take advantage of these methods.</target>
        </trans-unit>
        <trans-unit id="6bd60088580eccde556a63506e5f80dae1b4ac3c" translate="yes" xml:space="preserve">
          <source>In general, it is preferable to use a &lt;code&gt;FileCacheImageInputStream&lt;/code&gt; when reading from a regular &lt;code&gt;InputStream&lt;/code&gt;. This class is provided for cases where it is not possible to create a writable temporary file.</source>
          <target state="translated">通常、通常の &lt;code&gt;InputStream&lt;/code&gt; から読み取る場合は、 &lt;code&gt;FileCacheImageInputStream&lt;/code&gt; を使用することをお勧めします。このクラスは、書き込み可能な一時ファイルを作成できない場合に提供されます。</target>
        </trans-unit>
        <trans-unit id="21e5e3c075e0b11cb1e347193c00ff4d2551bbce" translate="yes" xml:space="preserve">
          <source>In general, manipulating a date, and even querying a date, is wide open to bugs when the calendar system is unknown at development time. This is why it is essential that code using this interface is subjected to additional code reviews. It is also why an architectural decision to avoid this interface type is usually the correct one.</source>
          <target state="translated">一般的に、日付を操作したり、日付を照会したりすることは、開発時にカレンダーシステムが不明な場合、バグが発生する可能性があります。このため、このインターフェイスを使用するコードは、追加のコードレビューを受けることが不可欠です。また、このインターフェイスタイプを避けるというアーキテクチャ上の決定が、通常は正しいものである理由でもあります。</target>
        </trans-unit>
        <trans-unit id="39aaaeecd067c9c412df4df520158abdb4239fe8" translate="yes" xml:space="preserve">
          <source>In general, parameter values remain in force for repeated use in this &lt;code&gt;RowSet&lt;/code&gt; object's command. Setting a parameter value with the setter methods automatically clears the value of the designated parameter and replaces it with the new specified value.</source>
          <target state="translated">In general, parameter values remain in force for repeated use in this &lt;code&gt;RowSet&lt;/code&gt; object's command. Setting a parameter value with the setter methods automatically clears the value of the designated parameter and replaces it with the new specified value.</target>
        </trans-unit>
        <trans-unit id="71c31f7c17038994ad8645a2526545f703559d4a" translate="yes" xml:space="preserve">
          <source>In general, parameter values remain in force for repeated use of a &lt;code&gt;RowSet&lt;/code&gt; object. Setting a parameter value automatically clears its previous value. However, in some cases it is useful to immediately release the resources used by the current parameter values, which can be done by calling the method &lt;code&gt;clearParameters&lt;/code&gt;.</source>
          <target state="translated">In general, parameter values remain in force for repeated use of a &lt;code&gt;RowSet&lt;/code&gt; object. Setting a parameter value automatically clears its previous value. However, in some cases it is useful to immediately release the resources used by the current parameter values, which can be done by calling the method &lt;code&gt;clearParameters&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="5618fd2f8fa2eb38f62b620d4f37d70fac329de9" translate="yes" xml:space="preserve">
          <source>In general, parameter values remain in force for repeated use of a statement. Setting a parameter value automatically clears its previous value. However, in some cases it is useful to immediately release the resources used by the current parameter values; this can be done by calling the method &lt;code&gt;clearParameters&lt;/code&gt;.</source>
          <target state="translated">In general, parameter values remain in force for repeated use of a statement. Setting a parameter value automatically clears its previous value. However, in some cases it is useful to immediately release the resources used by the current parameter values; this can be done by calling the method &lt;code&gt;clearParameters&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="d3191d89aec4e6dd8c1fe52f14c52757a8cac353" translate="yes" xml:space="preserve">
          <source>In general, preformatted PDL print data is provided in a byte oriented representation class (byte array, &lt;code&gt;InputStream&lt;/code&gt;, &lt;code&gt;URL&lt;/code&gt;).</source>
          <target state="translated">In general, preformatted PDL print data is provided in a byte oriented representation class (byte array, &lt;code&gt;InputStream&lt;/code&gt; , &lt;code&gt;URL&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="fde684fe3ce7e630fddfb34fcb022e3e0a8c906d" translate="yes" xml:space="preserve">
          <source>In general, preformatted PDL print data is provided in a byte oriented representation class (byte array, InputStream, URL).</source>
          <target state="translated">一般的に、あらかじめフォーマットされたPDL印刷データは、バイト指向の表現クラス(バイト配列、InputStream、URL)で提供されます。</target>
        </trans-unit>
        <trans-unit id="1105749eb220cc12502bb7cf78e0bd9681ecb820" translate="yes" xml:space="preserve">
          <source>In general, preformatted image print data is provided in a byte oriented representation class (byte array, &lt;code&gt;InputStream&lt;/code&gt;, &lt;code&gt;URL&lt;/code&gt;).</source>
          <target state="translated">In general, preformatted image print data is provided in a byte oriented representation class (byte array, &lt;code&gt;InputStream&lt;/code&gt; , &lt;code&gt;URL&lt;/code&gt; ).</target>
        </trans-unit>
        <trans-unit id="a1a70f78ea99c155d3ce2eddde22908dd11fa016" translate="yes" xml:space="preserve">
          <source>In general, preformatted image print data is provided in a byte oriented representation class (byte array, InputStream, URL).</source>
          <target state="translated">一般に、あらかじめフォーマットされた画像印刷データは、バイト指向の表現クラス(バイト配列、InputStream、URL)で提供される。</target>
        </trans-unit>
        <trans-unit id="8f59090f50a6fbd17d3d80f0442b0770cb6823af" translate="yes" xml:space="preserve">
          <source>In general, preformatted text print data is provided either in a character oriented representation class (character array, String, Reader) or in a byte oriented representation class (byte array, InputStream, URL).</source>
          <target state="translated">一般的に、フォーマット済みのテキスト印刷データは、文字指向の表現クラス(文字配列、String、Reader)またはバイト指向の表現クラス(バイト配列、InputStream、URL)のいずれかで提供される。</target>
        </trans-unit>
        <trans-unit id="ea1acfd551ae424b2b0f0cdb837009a958059593" translate="yes" xml:space="preserve">
          <source>In general, processors must not knowingly attempt to overwrite existing files that were not generated by some processor. A &lt;code&gt;
 Filer&lt;/code&gt; may reject attempts to open a file corresponding to an existing type, like &lt;code&gt;java.lang.Object&lt;/code&gt;. Likewise, the invoker of the annotation processing tool must not knowingly configure the tool such that the discovered processors will attempt to overwrite existing files that were not generated.</source>
          <target state="translated">In general, processors must not knowingly attempt to overwrite existing files that were not generated by some processor. A &lt;code&gt; Filer&lt;/code&gt; may reject attempts to open a file corresponding to an existing type, like &lt;code&gt;java.lang.Object&lt;/code&gt; . Likewise, the invoker of the annotation processing tool must not knowingly configure the tool such that the discovered processors will attempt to overwrite existing files that were not generated.</target>
        </trans-unit>
        <trans-unit id="e174721fc57e1470b14637e03eed9bd9757b2c64" translate="yes" xml:space="preserve">
          <source>In general, processors must not knowingly attempt to overwrite existing files that were not generated by some processor. A &lt;code&gt;Filer&lt;/code&gt; may reject attempts to open a file corresponding to an existing type, like &lt;code&gt;java.lang.Object&lt;/code&gt;. Likewise, the invoker of the annotation processing tool must not knowingly configure the tool such that the discovered processors will attempt to overwrite existing files that were not generated.</source>
          <target state="translated">一般に、プロセッサーは、あるプロセッサーによって生成されなかった既存のファイルを故意に上書きしようと試みてはなりません。A &lt;code&gt;Filer&lt;/code&gt; 同様に、既存のタイプに対応するファイルを開くしようとする試み拒否できる &lt;code&gt;java.lang.Object&lt;/code&gt; 上位を。同様に、注釈処理ツールの呼び出し元は、検出されたプロセッサが生成されなかった既存のファイルを上書きしようとするように、ツールを意図的に構成してはなりません。</target>
        </trans-unit>
        <trans-unit id="431a353f97c38c8d198b7fc7b29758a7a00dead2" translate="yes" xml:space="preserve">
          <source>In general, the best results will be achieved when format-specific metadata objects can be created to encapsulate as much information about the image and its associated metadata as possible, in terms that are understood by the specific &lt;code&gt;ImageWriter&lt;/code&gt; used to perform the encoding.</source>
          <target state="translated">一般的に、最良の結果が得られるのは、フォーマット固有のメタデータオブジェクトを作成して、画像とそれに関連するメタデータに関する情報を可能な限りカプセル化して、エンコードの実行に使用される特定の &lt;code&gt;ImageWriter&lt;/code&gt; が理解できる場合です。</target>
        </trans-unit>
        <trans-unit id="53eade6b2898bdabeab389a3447d258d06173156" translate="yes" xml:space="preserve">
          <source>In general, the conditions under which a method handle may be looked up for a method &lt;code&gt;M&lt;/code&gt; are no more restrictive than the conditions under which the lookup class could have compiled, verified, and resolved a call to &lt;code&gt;M&lt;/code&gt;. Where the JVM would raise exceptions like &lt;code&gt;NoSuchMethodError&lt;/code&gt;, a method handle lookup will generally raise a corresponding checked exception, such as &lt;code&gt;NoSuchMethodException&lt;/code&gt;. And the effect of invoking the method handle resulting from the lookup is &lt;a href=&quot;methodhandles.lookup#equiv&quot;&gt;exactly equivalent&lt;/a&gt; to executing the compiled, verified, and resolved call to &lt;code&gt;M&lt;/code&gt;. The same point is true of fields and constructors.</source>
          <target state="translated">一般に、メソッドハンドルがメソッド &lt;code&gt;M&lt;/code&gt; に対してルックアップされる条件は、ルックアップクラスが &lt;code&gt;M&lt;/code&gt; への呼び出しをコンパイル、検証、および解決できる条件よりも限定的ではありません。 JVMが &lt;code&gt;NoSuchMethodError&lt;/code&gt; のような例外を発生させる場合、メソッドハンドルルックアップは、通常、対応するチェック済み例外（ &lt;code&gt;NoSuchMethodException&lt;/code&gt; など）を発生させます。そして、ルックアップの結果としてのメソッドハンドルの呼び出しの影響は、コンパイル、検証、および解決された &lt;code&gt;M&lt;/code&gt; の呼び出しを実行することと&lt;a href=&quot;methodhandles.lookup#equiv&quot;&gt;まったく同じ&lt;/a&gt;です。フィールドとコンストラクターについても同じことが言えます。</target>
        </trans-unit>
        <trans-unit id="fc8aa2bd1828abadaa5eb8121e1cdc0acddb6b87" translate="yes" xml:space="preserve">
          <source>In general, this method does not need to be overridden by subclasses. All Look and Feel rendering code should reside in the &lt;code&gt;paint&lt;/code&gt; method.</source>
          <target state="translated">In general, this method does not need to be overridden by subclasses. All Look and Feel rendering code should reside in the &lt;code&gt;paint&lt;/code&gt; method.</target>
        </trans-unit>
        <trans-unit id="7e29aefc51ddd907e426422b3411bda4d27c9e92" translate="yes" xml:space="preserve">
          <source>In general, this method is a lightweight operation for getting an approximate memory usage. For some memory pools, for example, when objects are not packed contiguously, this method may be an expensive operation that requires some computation to determine the current memory usage. An implementation should document when this is the case.</source>
          <target state="translated">一般的に、このメソッドは、おおよそのメモリ使用量を取得するための軽量な操作です。いくつかのメモリプール、例えばオブジェクトが連続してパックされていない場合、このメソッドは、現在のメモリ使用量を決定するためにいくつかの計算を必要とする高価な操作になるかもしれません。このような場合は、実装で文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="ec36e3e2d136d0a7304c8a66d67a23e51eac0920" translate="yes" xml:space="preserve">
          <source>In general, unless otherwise noted in the javadoc, methods and constructors will throw NullPointerException if passed a null argument. The one broad exception to this rule is that the logging convenience methods in the Logger class (the config, entering, exiting, fine, finer, finest, log, logp, logrb, severe, throwing, and warning methods) will accept null values for all arguments except for the initial Level argument (if any).</source>
          <target state="translated">一般的に、javadocで特に指定がない限り、メソッドやコンストラクタはNull引数を渡すとNullPointerExceptionをスローします。このルールに対する1つの広範な例外は、Loggerクラスのロギング便利メソッド(config、entry、exiting、fine、finer、finest、log、logp、logrb、sterior、throwing、およびwarningメソッド)が、初期Level引数(もしあれば)を除くすべての引数に対してNull値を受け付けることです。</target>
        </trans-unit>
        <trans-unit id="7192acbc6c0b02d808beb4e0437459650d042c65" translate="yes" xml:space="preserve">
          <source>In general, user-written adjusters should be static constants:</source>
          <target state="translated">一般的に、ユーザーが書いたアジャスターは静的な定数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="9d5425a3de90c437c3b6df07d4a422e34dce646a" translate="yes" xml:space="preserve">
          <source>In implementation terms, this method behaves as follows. The result of the parsing phase can be considered to be a map of field to value. The behavior of this method is to cause that map to be filtered between phase 1 and 2, removing all fields other than those specified as arguments to this method.</source>
          <target state="translated">実装上では、このメソッドは以下のように動作します。解析フェーズの結果は、フィールドから値へのマップと考えることができます。このメソッドの動作は、そのマップがフェーズ1とフェーズ2の間でフィルタリングされ、このメソッドの引数として指定されたフィールド以外のすべてのフィールドが削除されます。</target>
        </trans-unit>
        <trans-unit id="1352cdc6280239b4d087354bb36004ed465fd5c1" translate="yes" xml:space="preserve">
          <source>In its more general form, a &lt;code&gt;reduce&lt;/code&gt; operation on elements of type &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; yielding a result of type &lt;code&gt;&amp;lt;U&amp;gt;&lt;/code&gt; requires three parameters:</source>
          <target state="translated">より一般的な形式では、タイプ &lt;code&gt;&amp;lt;U&amp;gt;&lt;/code&gt; の結果を生成するタイプ &lt;code&gt;&amp;lt;T&amp;gt;&lt;/code&gt; の要素に対する &lt;code&gt;reduce&lt;/code&gt; 操作には、3つのパラメーターが必要です。</target>
        </trans-unit>
        <trans-unit id="43dfe4436becbfa9f6b5de81d5020076fec9ff35" translate="yes" xml:space="preserve">
          <source>In its typical usage, a &lt;code&gt;Registry&lt;/code&gt; enables RMI client bootstrapping: it provides a simple means for a client to obtain an initial reference to a remote object. Therefore, a registry's remote object implementation is typically exported with a well-known address, such as with a well-known &lt;a href=&quot;../server/objid#REGISTRY_ID&quot;&gt;&lt;code&gt;ObjID&lt;/code&gt;&lt;/a&gt; and TCP port number (default is &lt;a href=&quot;#REGISTRY_PORT&quot;&gt;&lt;code&gt;1099&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">In its typical usage, a &lt;code&gt;Registry&lt;/code&gt; enables RMI client bootstrapping: it provides a simple means for a client to obtain an initial reference to a remote object. Therefore, a registry's remote object implementation is typically exported with a well-known address, such as with a well-known &lt;a href=&quot;../server/objid#REGISTRY_ID&quot;&gt; &lt;code&gt;ObjID&lt;/code&gt; &lt;/a&gt; and TCP port number (default is &lt;a href=&quot;#REGISTRY_PORT&quot;&gt; &lt;code&gt;1099&lt;/code&gt; &lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="77aca6d6bcab1192b1be419302b328975bd20263" translate="yes" xml:space="preserve">
          <source>In lazy implementations then an &lt;code&gt;IOException&lt;/code&gt; may be thrown when using the stream to list the module contents. If this occurs then the &lt;code&gt;IOException&lt;/code&gt; will be wrapped in an &lt;a href=&quot;../../io/uncheckedioexception&quot;&gt;&lt;code&gt;UncheckedIOException&lt;/code&gt;&lt;/a&gt; and thrown from the method that caused the access to be attempted. &lt;code&gt;SecurityException&lt;/code&gt; may also be thrown when using the stream to list the module contents and access is denied by the security manager.</source>
          <target state="translated">In lazy implementations then an &lt;code&gt;IOException&lt;/code&gt; may be thrown when using the stream to list the module contents. If this occurs then the &lt;code&gt;IOException&lt;/code&gt; will be wrapped in an &lt;a href=&quot;../../io/uncheckedioexception&quot;&gt; &lt;code&gt;UncheckedIOException&lt;/code&gt; &lt;/a&gt; and thrown from the method that caused the access to be attempted. &lt;code&gt;SecurityException&lt;/code&gt; may also be thrown when using the stream to list the module contents and access is denied by the security manager.</target>
        </trans-unit>
        <trans-unit id="9e886fad24b40d123f8ce1e5b68aaa4e75e75121" translate="yes" xml:space="preserve">
          <source>In many cases, it will be more efficient to look up the name once and use the index query methods rather than using the name query methods repeatedly.</source>
          <target state="translated">多くの場合、名前の問い合わせ方法を何度も使うよりも、一度調べてインデックスの問い合わせ方法を使った方が効率的です。</target>
        </trans-unit>
        <trans-unit id="d236b645a588e6e29bda92b7b1d5fa7a8b31381c" translate="yes" xml:space="preserve">
          <source>In many common situations, for example when working URIs that are known to be either URNs or URLs, the hierarchical URIs being used will always be server-based. They therefore must either be parsed as such or treated as an error. In these cases a statement such as</source>
          <target state="translated">多くの一般的な状況、例えば、URNやURLであることがわかっているURIを扱う場合、 使用される階層的なURIは常にサーバーベースである。そのため、それらはそのように解析されるか、エラーとして扱われなければなりません。このような場合には</target>
        </trans-unit>
        <trans-unit id="ec1d65c264699522caa10138b97ab127e6edf2aa" translate="yes" xml:space="preserve">
          <source>In more formal terms, assume these two type lists:</source>
          <target state="translated">より正式な用語では、以下の2つの型リストを想定しています。</target>
        </trans-unit>
        <trans-unit id="0e2934043ae8a161cfa924a72c9b0eec317155f8" translate="yes" xml:space="preserve">
          <source>In most cases, an instance of a &lt;code&gt;URLStreamHandler&lt;/code&gt; subclass is not created directly by an application. Rather, the first time a protocol name is encountered when constructing a &lt;code&gt;URL&lt;/code&gt;, the appropriate stream protocol handler is automatically loaded.</source>
          <target state="translated">ほとんどの場合、 &lt;code&gt;URLStreamHandler&lt;/code&gt; サブクラスのインスタンスは、アプリケーションによって直接作成されません。代わりに、 &lt;code&gt;URL&lt;/code&gt; の作成時に初めてプロトコル名が検出されると、適切なストリームプロトコルハンドラが自動的にロードされます。</target>
        </trans-unit>
        <trans-unit id="39e51666ca03ae4454c2806c86a9f15ed69b1513" translate="yes" xml:space="preserve">
          <source>In most cases, applications should use &lt;a href=&quot;#zone()&quot;&gt;&lt;code&gt;zone()&lt;/code&gt;&lt;/a&gt; as this query is too strict.</source>
          <target state="translated">In most cases, applications should use &lt;a href=&quot;#zone()&quot;&gt; &lt;code&gt;zone()&lt;/code&gt; &lt;/a&gt; as this query is too strict.</target>
        </trans-unit>
        <trans-unit id="f03c583c4f9a187f67c9d5064698de3c6ba9e5f8" translate="yes" xml:space="preserve">
          <source>In most cases, applications should use &lt;a href=&quot;temporalqueries#zone--&quot;&gt;&lt;code&gt;zone()&lt;/code&gt;&lt;/a&gt; as this query is too strict.</source>
          <target state="translated">このクエリは厳密すぎるため、ほとんどの場合、アプリケーションは&lt;a href=&quot;temporalqueries#zone--&quot;&gt; &lt;code&gt;zone()&lt;/code&gt; &lt;/a&gt;を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="d8bced82c06bec9c190b301d0f390306ca5fd209" translate="yes" xml:space="preserve">
          <source>In most cases, applications should use this query rather than &lt;code&gt;#zoneId()&lt;/code&gt;.</source>
          <target state="translated">ほとんどの場合、アプリケーションは &lt;code&gt;#zoneId()&lt;/code&gt; ではなくこのクエリを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="ff9326ee0d49e5994ec528af6a841b42fa62eb09" translate="yes" xml:space="preserve">
          <source>In most cases, it is clearer to reverse the calling pattern by using &lt;a href=&quot;../temporal/temporal#minus(java.time.temporal.TemporalAmount)&quot;&gt;&lt;code&gt;Temporal.minus(TemporalAmount)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">In most cases, it is clearer to reverse the calling pattern by using &lt;a href=&quot;../temporal/temporal#minus(java.time.temporal.TemporalAmount)&quot;&gt; &lt;code&gt;Temporal.minus(TemporalAmount)&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="05534aa8b63ec4048eccf7a07834ab90e9df5565" translate="yes" xml:space="preserve">
          <source>In most cases, it is clearer to reverse the calling pattern by using &lt;a href=&quot;../temporal/temporal#minus-java.time.temporal.TemporalAmount-&quot;&gt;&lt;code&gt;Temporal.minus(TemporalAmount)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ほとんどの場合、&lt;a href=&quot;../temporal/temporal#minus-java.time.temporal.TemporalAmount-&quot;&gt; &lt;code&gt;Temporal.minus(TemporalAmount)&lt;/code&gt; &lt;/a&gt;を使用して呼び出しパターンを逆にすると明確になります。</target>
        </trans-unit>
        <trans-unit id="1a03a50d10f16d909a9a2f2d2612f04f2547de58" translate="yes" xml:space="preserve">
          <source>In most cases, it is clearer to reverse the calling pattern by using &lt;a href=&quot;../temporal/temporal#plus(java.time.temporal.TemporalAmount)&quot;&gt;&lt;code&gt;Temporal.plus(TemporalAmount)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">In most cases, it is clearer to reverse the calling pattern by using &lt;a href=&quot;../temporal/temporal#plus(java.time.temporal.TemporalAmount)&quot;&gt; &lt;code&gt;Temporal.plus(TemporalAmount)&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5ca0f70a9b9175c2c2fe451007859b67358fa814" translate="yes" xml:space="preserve">
          <source>In most cases, it is clearer to reverse the calling pattern by using &lt;a href=&quot;../temporal/temporal#plus-java.time.temporal.TemporalAmount-&quot;&gt;&lt;code&gt;Temporal.plus(TemporalAmount)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ほとんどの場合、&lt;a href=&quot;../temporal/temporal#plus-java.time.temporal.TemporalAmount-&quot;&gt; &lt;code&gt;Temporal.plus(TemporalAmount)&lt;/code&gt; &lt;/a&gt;を使用して呼び出しパターンを逆にする方が明確です。</target>
        </trans-unit>
        <trans-unit id="e78619b09a6dd4ed26333f4a9efd4ae771d133b4" translate="yes" xml:space="preserve">
          <source>In most cases, it is clearer to reverse the calling pattern by using &lt;a href=&quot;../temporal/temporal#with(java.time.temporal.TemporalAdjuster)&quot;&gt;&lt;code&gt;Temporal.with(TemporalAdjuster)&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">In most cases, it is clearer to reverse the calling pattern by using &lt;a href=&quot;../temporal/temporal#with(java.time.temporal.TemporalAdjuster)&quot;&gt; &lt;code&gt;Temporal.with(TemporalAdjuster)&lt;/code&gt; &lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="4cc6b9a301072df7f4a3865fb76f7c4481348a1a" translate="yes" xml:space="preserve">
          <source>In most cases, it is clearer to reverse the calling pattern by using &lt;a href=&quot;../temporal/temporal#with-java.time.temporal.TemporalAdjuster-&quot;&gt;&lt;code&gt;Temporal.with(TemporalAdjuster)&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">ほとんどの場合、&lt;a href=&quot;../temporal/temporal#with-java.time.temporal.TemporalAdjuster-&quot;&gt; &lt;code&gt;Temporal.with(TemporalAdjuster)&lt;/code&gt; &lt;/a&gt;を使用して呼び出しパターンを逆にすると明確になります。</target>
        </trans-unit>
        <trans-unit id="3c5ecb0a687c7d88d6e9b87e2938edab6b659f7a" translate="yes" xml:space="preserve">
          <source>In most cases, it is clearer to reverse the calling pattern by using &lt;a href=&quot;temporal/temporal#minus(java.time.temporal.TemporalAmount)&quot;&gt;&lt;code&gt;Temporal.minus(TemporalAmount)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">In most cases, it is clearer to reverse the calling pattern by using &lt;a href=&quot;temporal/temporal#minus(java.time.temporal.TemporalAmount)&quot;&gt; &lt;code&gt;Temporal.minus(TemporalAmount)&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="8187c2e6793a987f620d69a1063da034bcf390bd" translate="yes" xml:space="preserve">
          <source>In most cases, it is clearer to reverse the calling pattern by using &lt;a href=&quot;temporal/temporal#minus-java.time.temporal.TemporalAmount-&quot;&gt;&lt;code&gt;Temporal.minus(TemporalAmount)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ほとんどの場合、&lt;a href=&quot;temporal/temporal#minus-java.time.temporal.TemporalAmount-&quot;&gt; &lt;code&gt;Temporal.minus(TemporalAmount)&lt;/code&gt; &lt;/a&gt;を使用して呼び出しパターンを逆にすると明確になります。</target>
        </trans-unit>
        <trans-unit id="eb51aa028ce5cd74c12a4c145f287af28b12ae51" translate="yes" xml:space="preserve">
          <source>In most cases, it is clearer to reverse the calling pattern by using &lt;a href=&quot;temporal/temporal#plus(java.time.temporal.TemporalAmount)&quot;&gt;&lt;code&gt;Temporal.plus(TemporalAmount)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">In most cases, it is clearer to reverse the calling pattern by using &lt;a href=&quot;temporal/temporal#plus(java.time.temporal.TemporalAmount)&quot;&gt; &lt;code&gt;Temporal.plus(TemporalAmount)&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="0561b8f397e2afe69a4c02418cf7771d9bd7c4a0" translate="yes" xml:space="preserve">
          <source>In most cases, it is clearer to reverse the calling pattern by using &lt;a href=&quot;temporal/temporal#plus-java.time.temporal.TemporalAmount-&quot;&gt;&lt;code&gt;Temporal.plus(TemporalAmount)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ほとんどの場合、&lt;a href=&quot;temporal/temporal#plus-java.time.temporal.TemporalAmount-&quot;&gt; &lt;code&gt;Temporal.plus(TemporalAmount)&lt;/code&gt; &lt;/a&gt;を使用して呼び出しパターンを逆にする方が明確です。</target>
        </trans-unit>
        <trans-unit id="99db46c681c29fba900cb5c04104ad2c95eeb307" translate="yes" xml:space="preserve">
          <source>In most cases, it is clearer to reverse the calling pattern by using &lt;a href=&quot;temporal/temporal#with(java.time.temporal.TemporalAdjuster)&quot;&gt;&lt;code&gt;Temporal.with(TemporalAdjuster)&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">In most cases, it is clearer to reverse the calling pattern by using &lt;a href=&quot;temporal/temporal#with(java.time.temporal.TemporalAdjuster)&quot;&gt; &lt;code&gt;Temporal.with(TemporalAdjuster)&lt;/code&gt; &lt;/a&gt;:</target>
        </trans-unit>
        <trans-unit id="56f3a9f6060c00fbd937e2e83c6bfc005f30256c" translate="yes" xml:space="preserve">
          <source>In most cases, it is clearer to reverse the calling pattern by using &lt;a href=&quot;temporal/temporal#with-java.time.temporal.TemporalAdjuster-&quot;&gt;&lt;code&gt;Temporal.with(TemporalAdjuster)&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">ほとんどの場合、&lt;a href=&quot;temporal/temporal#with-java.time.temporal.TemporalAdjuster-&quot;&gt; &lt;code&gt;Temporal.with(TemporalAdjuster)&lt;/code&gt; &lt;/a&gt;を使用して呼び出しパターンを逆にすると明確になります。</target>
        </trans-unit>
        <trans-unit id="4dc8fca0cd4dde7b02954c863b88c3a8c6cd211a" translate="yes" xml:space="preserve">
          <source>In most cases, the exact pages to be printed will be generated by a device driver and this attribute would not be required. However, when printing an archived document which has already been formatted, the end user may elect to print just a subset of the pages contained in the document. In this case, if a page range of &lt;code&gt;&quot;&lt;i&gt;n&lt;/i&gt;-&lt;i&gt;m&lt;/i&gt;&quot;&lt;/code&gt; is specified, the first page to be printed will be page</source>
          <target state="translated">ほとんどの場合、印刷される正確なページはデバイスドライバによって生成され、この属性は必要ありません。ただし、すでにフォーマットされたアーカイブ済みドキュメントを印刷する場合、エンドユーザーはドキュメントに含まれるページのサブセットのみを印刷することを選択できます。この場合、 &lt;code&gt;&quot;&lt;i&gt;n&lt;/i&gt;-&lt;i&gt;m&lt;/i&gt;&quot;&lt;/code&gt; ページ範囲を指定すると、最初に印刷されるページがページになります。</target>
        </trans-unit>
        <trans-unit id="228fae619d417827abbff2695d0e3ef18a476bdf" translate="yes" xml:space="preserve">
          <source>In most cases, the methods defined here will delegate to the associated file system provider to perform the file operations.</source>
          <target state="translated">ほとんどの場合、ここで定義されているメソッドは、ファイル操作を実行するために関連するファイルシステムプロバイダに委任します。</target>
        </trans-unit>
        <trans-unit id="400b1753d04b7af8e5783d26598d8e066c54a2d8" translate="yes" xml:space="preserve">
          <source>In most cases, the transition duration is one hour, however this is not always the case. The duration will be positive for a gap and negative for an overlap. Time-zones are second-based, so the nanosecond part of the duration will be zero.</source>
          <target state="translated">ほとんどの場合、移行時間は1時間ですが、必ずしもそうとは限りません。持続時間は、ギャップがある場合は正の値になり、オーバーラップがある場合は負の値になります。タイムゾーンは秒単位なので、持続時間のナノ秒の部分はゼロになります。</target>
        </trans-unit>
        <trans-unit id="e7ed0da15e8a41892d662dc53e44bec661e54f79" translate="yes" xml:space="preserve">
          <source>In most cases, there is only one valid offset for a local date-time. In the case of an overlap, there are two valid offsets, and the earlier one is used, corresponding to the first occurrence of midnight on the date. In the case of a gap, the zoned date-time will represent the instant just after the gap.</source>
          <target state="translated">ほとんどの場合、ローカルな日付時刻に対して有効なオフセットは1つしかありません。重複している場合、2つの有効なオフセットがあり、日付の最初の真夜中に対応する早い方のオフセットが使用されます。ギャップがある場合、ゾーン化された日付時刻は、ギャップの直後の瞬間を表します。</target>
        </trans-unit>
        <trans-unit id="625ac3988fae19a7227d921594f35e99f65364f8" translate="yes" xml:space="preserve">
          <source>In most cases, there is only one valid offset for a local date-time. In the case of an overlap, when clocks are set back, there are two valid offsets. This method uses the earlier offset typically corresponding to &quot;summer&quot;.</source>
          <target state="translated">ほとんどの場合、ローカルの日付時刻に対して有効なオフセットは1つしかありません。オーバーラップしている場合、時計がセットバックされているときには、2つの有効なオフセットがあります。この方法では、一般的に &quot;夏 &quot;に対応する早い方のオフセットを使用します。</target>
        </trans-unit>
        <trans-unit id="c2b939591e64208fc1e25691b062275e7929457a" translate="yes" xml:space="preserve">
          <source>In most cases, there is only one valid offset for a local date-time. In the case of an overlap, where clocks are set back, there are two valid offsets. If the preferred offset is one of the valid offsets then it is used. Otherwise the earlier valid offset is used, typically corresponding to &quot;summer&quot;.</source>
          <target state="translated">ほとんどの場合、ローカルの日付時刻に対して有効なオフセットは1つしかありません。オーバーラップの場合、時計がセットバックされている場合、2つの有効なオフセットがあります。優先されるオフセットが有効なオフセットの1つである場合、それが使用されます。そうでない場合は、早い方の有効なオフセットが使用され、通常は &quot;summer &quot;に対応します。</target>
        </trans-unit>
        <trans-unit id="cd9baba77f7578454bd94a07cc240ce1b5e694d3" translate="yes" xml:space="preserve">
          <source>In most cases, there is only one valid offset for a local date-time. In the case of an overlap, where clocks are set back, there are two valid offsets. This method uses the earlier offset typically corresponding to &quot;summer&quot;.</source>
          <target state="translated">ほとんどの場合、ローカルの日付時刻に対して有効なオフセットは1つしかありません。オーバーラップしている場合、時計が後ろにセットバックされている場合は、2つの有効なオフセットがあります。この方法では、一般的に &quot;夏 &quot;に対応する早い方のオフセットを使用します。</target>
        </trans-unit>
        <trans-unit id="127050ddf27677df3d01d5dadb8b80d81f1bb8d8" translate="yes" xml:space="preserve">
          <source>In most instances, &lt;code&gt;key&lt;/code&gt; will be &lt;code&gt;action.getValue(NAME)&lt;/code&gt;.</source>
          <target state="translated">In most instances, &lt;code&gt;key&lt;/code&gt; will be &lt;code&gt;action.getValue(NAME)&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="1ba29f0eb3427ba3bc8f620c7fd7795c4d04cb6f" translate="yes" xml:space="preserve">
          <source>In multiline mode the expressions &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; match just after or just before, respectively, a line terminator or the end of the input sequence. By default these expressions only match at the beginning and the end of the entire input sequence.</source>
          <target state="translated">複数行モードでは、式 &lt;code&gt;^&lt;/code&gt; および &lt;code&gt;$&lt;/code&gt; は、それぞれ行末記号または入力シーケンスの終わりの直後または直前に一致します。デフォルトでは、これらの式は入力シーケンス全体の最初と最後でのみ一致します。</target>
        </trans-unit>
        <trans-unit id="8cd3059f796b099e853c5ec37ef7ff133f0e47a7" translate="yes" xml:space="preserve">
          <source>In naming systems for which the notion of full name does not apply to this binding an &lt;code&gt;UnsupportedOperationException&lt;/code&gt; is thrown. This exception is also thrown when a service provider written before the introduction of the method is in use.</source>
          <target state="translated">フルネームの概念がこのバインディングに適用されないネーミングシステムでは、 &lt;code&gt;UnsupportedOperationException&lt;/code&gt; がスローされます。この例外は、メソッドの導入前に作成されたサービスプロバイダーが使用されている場合にもスローされます。</target>
        </trans-unit>
        <trans-unit id="2a34c892345a3ff0220626c939a8b01b18ac6ead" translate="yes" xml:space="preserve">
          <source>In negative patterns, the minimum and maximum counts are ignored; these are presumed to be set in the positive pattern.</source>
          <target state="translated">ネガティブパターンでは、最小カウントと最大カウントは無視され、これらはポジティブパターンに設定されていると推定されます。</target>
        </trans-unit>
        <trans-unit id="31e73ad7a9634e0be529544b2d80db294c151284" translate="yes" xml:space="preserve">
          <source>In older versions of JDK a frame state could only be NORMAL or ICONIFIED. Since JDK 1.4 set of supported frame states is expanded and frame state is represented as a bitwise mask.</source>
          <target state="translated">JDK の古いバージョンでは、フレームの状態は NORMAL か ICONIFIED しかありませんでした。JDK 1.4 以降、サポートされているフレーム状態のセットが拡張され、フレーム状態はビットマスクとして表現されます。</target>
        </trans-unit>
        <trans-unit id="59d8176c2778d52eb9144cafca492c89026c206d" translate="yes" xml:space="preserve">
          <source>In order for Views to store less state and therefore be more lightweight, the StyleSheet can act as a factory for painters that handle some of the rendering tasks. This allows implementations to determine what they want to cache and have the sharing potentially at the level that a selector is common to multiple views. Since the StyleSheet may be used by views over multiple documents and typically the HTML attributes don't effect the selector being used, the potential for sharing is significant.</source>
          <target state="translated">ビューの状態の保存量を減らして軽量化するために、StyleSheet はレンダリングタスクの一部を処理するペインターのファクトリとして機能します。これにより、実装では何をキャッシュしたいかを決定し、セレクタが複数のビューに共通であるようなレベルで共有することができます。スタイルシートは複数のドキュメント上のビューで使用される可能性があり、一般的に HTML 属性は使用されるセレクタに影響を与えないので、共有の可能性は大きくなります。</target>
        </trans-unit>
        <trans-unit id="c005fc9511ccd0821d902a0c463f0c8001a2d950" translate="yes" xml:space="preserve">
          <source>In order for activation to be successful, one of the following requirements must be met, otherwise &lt;a href=&quot;activationexception&quot;&gt;&lt;code&gt;ActivationException&lt;/code&gt;&lt;/a&gt; is thrown:</source>
          <target state="translated">In order for activation to be successful, one of the following requirements must be met, otherwise &lt;a href=&quot;activationexception&quot;&gt; &lt;code&gt;ActivationException&lt;/code&gt; &lt;/a&gt; is thrown:</target>
        </trans-unit>
        <trans-unit id="77231df36a359866f2786c79f888114ce42dbf6e" translate="yes" xml:space="preserve">
          <source>In order for major ticks to be painted, &lt;code&gt;setPaintTicks&lt;/code&gt; must be set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">In order for major ticks to be painted, &lt;code&gt;setPaintTicks&lt;/code&gt; must be set to &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="90b0d441ed8104d5d1d6520953b3feb27d631b33" translate="yes" xml:space="preserve">
          <source>In order for minor ticks to be painted, &lt;code&gt;setPaintTicks&lt;/code&gt; must be set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">In order for minor ticks to be painted, &lt;code&gt;setPaintTicks&lt;/code&gt; must be set to &lt;code&gt;true&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="027f5f7c874f0b05685665c2baaf2e4a0856aaaa" translate="yes" xml:space="preserve">
          <source>In order for persistence mechanisms to function properly on BeanContextChild instances across a broad variety of scenarios, implementing classes of this interface are required to define as transient, any or all fields, or instance variables, that may contain, or represent, references to the nesting BeanContext instance or other resources obtained from the BeanContext via any unspecified mechanisms.</source>
          <target state="translated">様々なシナリオにおいてBeanContextChildインスタンス上で永続化機構が適切に機能するために,このインタフェースの実装クラスは,入れ子のBeanContextインスタンスへの参照や,不特定の機構を介してBeanContextから取得された他のリソースを含む,あるいは表現する,任意の,あるいはすべてのフィールド,あるいはインスタンス変数を,過渡的なものとして定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="ca3336b46c543839bf0e83bd249246ba9ceac2c3" translate="yes" xml:space="preserve">
          <source>In order to align a &lt;code&gt;SequentialGroup&lt;/code&gt; along the baseline of a baseline aligned &lt;code&gt;ParallelGroup&lt;/code&gt; you need to specify which of the elements of the &lt;code&gt;SequentialGroup&lt;/code&gt; is used to determine the baseline. The element used to calculate the baseline is specified using one of the &lt;code&gt;add&lt;/code&gt; methods that take a &lt;code&gt;boolean&lt;/code&gt;. The last element added with a value of &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;useAsBaseline&lt;/code&gt; is used to calculate the baseline.</source>
          <target state="translated">In order to align a &lt;code&gt;SequentialGroup&lt;/code&gt; along the baseline of a baseline aligned &lt;code&gt;ParallelGroup&lt;/code&gt; you need to specify which of the elements of the &lt;code&gt;SequentialGroup&lt;/code&gt; is used to determine the baseline. The element used to calculate the baseline is specified using one of the &lt;code&gt;add&lt;/code&gt; methods that take a &lt;code&gt;boolean&lt;/code&gt; . The last element added with a value of &lt;code&gt;true&lt;/code&gt; for &lt;code&gt;useAsBaseline&lt;/code&gt; is used to calculate the baseline.</target>
        </trans-unit>
        <trans-unit id="eff19433d04180ca81ab86aab4794962f4daa886" translate="yes" xml:space="preserve">
          <source>In order to allow changes to be persisted back to the datasource to the originating tables, the &lt;code&gt;acceptChanges&lt;/code&gt; method should be used and called on a JoinRowSet object instance. Implementations can leverage the internal data and update tracking in their implementations to interact with the SyncProvider to persist any changes.</source>
          <target state="translated">In order to allow changes to be persisted back to the datasource to the originating tables, the &lt;code&gt;acceptChanges&lt;/code&gt; method should be used and called on a JoinRowSet object instance. Implementations can leverage the internal data and update tracking in their implementations to interact with the SyncProvider to persist any changes.</target>
        </trans-unit>
        <trans-unit id="0a71a13ccef17116df35b112242d16e8495db897" translate="yes" xml:space="preserve">
          <source>In order to be able to populate itself with data from a database, a rowset needs to set a command property. This property is a query that is a &lt;code&gt;PreparedStatement&lt;/code&gt; object, which allows the query to have parameter placeholders that are set at run time, as opposed to design time. To set these placeholder parameters with values, a rowset provides setter methods for setting values of each data type, similar to the setter methods provided by the &lt;code&gt;PreparedStatement&lt;/code&gt; interface.</source>
          <target state="translated">In order to be able to populate itself with data from a database, a rowset needs to set a command property. This property is a query that is a &lt;code&gt;PreparedStatement&lt;/code&gt; object, which allows the query to have parameter placeholders that are set at run time, as opposed to design time. To set these placeholder parameters with values, a rowset provides setter methods for setting values of each data type, similar to the setter methods provided by the &lt;code&gt;PreparedStatement&lt;/code&gt; interface.</target>
        </trans-unit>
        <trans-unit id="0ba893cd9f06a3e56a7d28781c82514ba4b91f11" translate="yes" xml:space="preserve">
          <source>In order to be used with a selector, an instance of this class must first be</source>
          <target state="translated">セレクタで使用するためには、まずこのクラスのインスタンスが</target>
        </trans-unit>
        <trans-unit id="b98e8db6ce4d9f52c1ffa4b7dff7087581ce0c75" translate="yes" xml:space="preserve">
          <source>In order to create a Cipher object, the application calls the Cipher's &lt;code&gt;getInstance&lt;/code&gt; method, and passes the name of the requested</source>
          <target state="translated">Cipherオブジェクトを作成するために、アプリケーションはCipherの &lt;code&gt;getInstance&lt;/code&gt; メソッドを呼び出し、要求された名前を渡します</target>
        </trans-unit>
        <trans-unit id="956aaf85b665f70ca7103583817b288193842ddf" translate="yes" xml:space="preserve">
          <source>In order to create a collecting adapter which collects a predetermined number of arguments, and whose type reflects this predetermined number, use &lt;a href=&quot;#asCollector(java.lang.Class,int)&quot;&gt;&lt;code&gt;asCollector&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">In order to create a collecting adapter which collects a predetermined number of arguments, and whose type reflects this predetermined number, use &lt;a href=&quot;#asCollector(java.lang.Class,int)&quot;&gt; &lt;code&gt;asCollector&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="31c0dc79be70085d164b878d4cb4d45a32f8f726" translate="yes" xml:space="preserve">
          <source>In order to create a collecting adapter which collects a predetermined number of arguments, and whose type reflects this predetermined number, use &lt;a href=&quot;methodhandle#asCollector-java.lang.Class-int-&quot;&gt;&lt;code&gt;asCollector&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">所定の数の引数を収集し、そのタイプがこの所定の数を反映する収集アダプタを作成するには、代わりに&lt;a href=&quot;methodhandle#asCollector-java.lang.Class-int-&quot;&gt; &lt;code&gt;asCollector&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="68bca81ab917de25475d73141757208db5018151" translate="yes" xml:space="preserve">
          <source>In order to create a collecting adapter which is not restricted to a particular number of collected arguments, use &lt;a href=&quot;#asVarargsCollector(java.lang.Class)&quot;&gt;&lt;code&gt;asVarargsCollector&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#withVarargs(boolean)&quot;&gt;&lt;code&gt;withVarargs&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">In order to create a collecting adapter which is not restricted to a particular number of collected arguments, use &lt;a href=&quot;#asVarargsCollector(java.lang.Class)&quot;&gt; &lt;code&gt;asVarargsCollector&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;#withVarargs(boolean)&quot;&gt; &lt;code&gt;withVarargs&lt;/code&gt; &lt;/a&gt; instead.</target>
        </trans-unit>
        <trans-unit id="53922bd99347421945f987d026bbbefad691f64a" translate="yes" xml:space="preserve">
          <source>In order to create a collecting adapter which is not restricted to a particular number of collected arguments, use &lt;a href=&quot;methodhandle#asVarargsCollector-java.lang.Class-&quot;&gt;&lt;code&gt;asVarargsCollector&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">特定の数の収集された引数に制限されない収集アダプターを作成するには、代わりに&lt;a href=&quot;methodhandle#asVarargsCollector-java.lang.Class-&quot;&gt; &lt;code&gt;asVarargsCollector&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="d50236bff40706c4ebaf917ac3e33937a82d5dd3" translate="yes" xml:space="preserve">
          <source>In order to create an empty keystore, or if the keystore cannot be initialized from a stream, pass &lt;code&gt;null&lt;/code&gt; as the &lt;code&gt;stream&lt;/code&gt; argument.</source>
          <target state="translated">空のキーストアを作成するには、またはキーストアをストリームから初期化できない場合は、 &lt;code&gt;stream&lt;/code&gt; 引数として &lt;code&gt;null&lt;/code&gt; を渡します。</target>
        </trans-unit>
        <trans-unit id="4caf267f8fd9df9e41675d8b26bc879093570dba" translate="yes" xml:space="preserve">
          <source>In order to create an instance of &lt;code&gt;Cipher&lt;/code&gt;, which encapsulates an instance of this &lt;code&gt;CipherSpi&lt;/code&gt; class, an application calls one of the &lt;a href=&quot;cipher#getInstance(java.lang.String)&quot;&gt;&lt;code&gt;getInstance&lt;/code&gt;&lt;/a&gt; factory methods of the &lt;a href=&quot;cipher&quot;&gt;&lt;code&gt;Cipher&lt;/code&gt;&lt;/a&gt; engine class and specifies the requested</source>
          <target state="translated">In order to create an instance of &lt;code&gt;Cipher&lt;/code&gt; , which encapsulates an instance of this &lt;code&gt;CipherSpi&lt;/code&gt; class, an application calls one of the &lt;a href=&quot;cipher#getInstance(java.lang.String)&quot;&gt; &lt;code&gt;getInstance&lt;/code&gt; &lt;/a&gt; factory methods of the &lt;a href=&quot;cipher&quot;&gt; &lt;code&gt;Cipher&lt;/code&gt; &lt;/a&gt; engine class and specifies the requested</target>
        </trans-unit>
        <trans-unit id="7b607b82a2b60c884e3dbe9e1575c5d5d265ec4d" translate="yes" xml:space="preserve">
          <source>In order to create an instance of &lt;code&gt;Cipher&lt;/code&gt;, which encapsulates an instance of this &lt;code&gt;CipherSpi&lt;/code&gt; class, an application calls one of the &lt;a href=&quot;cipher#getInstance-java.lang.String-&quot;&gt;&lt;code&gt;getInstance&lt;/code&gt;&lt;/a&gt; factory methods of the &lt;a href=&quot;cipher&quot;&gt;&lt;code&gt;Cipher&lt;/code&gt;&lt;/a&gt; engine class and specifies the requested</source>
          <target state="translated">この &lt;code&gt;CipherSpi&lt;/code&gt; クラスのインスタンスをカプセル化する &lt;code&gt;Cipher&lt;/code&gt; のインスタンスを作成するために、アプリケーションは&lt;a href=&quot;cipher&quot;&gt; &lt;code&gt;Cipher&lt;/code&gt; &lt;/a&gt;エンジンクラスの&lt;a href=&quot;cipher#getInstance-java.lang.String-&quot;&gt; &lt;code&gt;getInstance&lt;/code&gt; &lt;/a&gt;ファクトリメソッドの1つを呼び出し、要求された</target>
        </trans-unit>
        <trans-unit id="64007bb6dc6fcb0629d5ca08ad2441e78ed9b545" translate="yes" xml:space="preserve">
          <source>In order to do matching a user's preferred locales to a set of language tags, &lt;a href=&quot;http://tools.ietf.org/html/rfc4647&quot;&gt;RFC 4647 Matching of Language Tags&lt;/a&gt; defines two mechanisms: filtering and lookup. &lt;em&gt;Filtering&lt;/em&gt; is used to get all matching locales, whereas &lt;em&gt;lookup&lt;/em&gt; is to choose the best matching locale. Matching is done case-insensitively. These matching mechanisms are described in the following sections.</source>
          <target state="translated">ユーザーの優先ロケールと言語タグのセットを照合するために、&lt;a href=&quot;http://tools.ietf.org/html/rfc4647&quot;&gt;RFC 4647言語タグの照合では、&lt;/a&gt;フィルタリングとルックアップという2つのメカニズムが定義されています。&lt;em&gt;フィルタリング&lt;/em&gt;は、一致するすべてのロケールを取得するために使用され&lt;em&gt;ます&lt;/em&gt;が、&lt;em&gt;ルックアップ&lt;/em&gt;は、最も一致するロケールを選択することです。マッチングは大文字と小文字を区別せずに行われます。これらの一致メカニズムについては、次のセクションで説明します。</target>
        </trans-unit>
        <trans-unit id="f843ab19b8395ea6dc81b7d0ba4b053d8211f31d" translate="yes" xml:space="preserve">
          <source>In order to ensure proper run-time semantics of RequireModelMBean, Any subclass of RequiredModelMBean overloading or overriding this method should call &lt;code&gt;super.postDeregister()&lt;/code&gt; in its own &lt;code&gt;postDeregister&lt;/code&gt; implementation.</source>
          <target state="translated">RequireModelMBeanの適切な実行時セマンティクスを保証するために、このメソッドをオーバーロードまたはオーバーライドするRequiredModelMBeanのサブクラスは、独自の &lt;code&gt;postDeregister&lt;/code&gt; 実装で &lt;code&gt;super.postDeregister()&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="b37a3f7800e5557d0d455028524d0c955aed3436" translate="yes" xml:space="preserve">
          <source>In order to ensure proper run-time semantics of RequireModelMBean, Any subclass of RequiredModelMBean overloading or overriding this method should call &lt;code&gt;super.postRegister(registrationDone)&lt;/code&gt; in its own &lt;code&gt;postRegister&lt;/code&gt; implementation.</source>
          <target state="translated">RequireModelMBeanの適切な実行時セマンティクスを保証するために、このメソッドをオーバーロードまたはオーバーライドするRequiredModelMBeanのサブクラスは、独自の &lt;code&gt;postRegister&lt;/code&gt; 実装で &lt;code&gt;super.postRegister(registrationDone)&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="2e25f9de51dfcb2d1f611315c4d8da31e3829630" translate="yes" xml:space="preserve">
          <source>In order to ensure proper run-time semantics of RequireModelMBean, Any subclass of RequiredModelMBean overloading or overriding this method should call &lt;code&gt;super.preDeregister()&lt;/code&gt; in its own &lt;code&gt;preDeregister&lt;/code&gt; implementation.</source>
          <target state="translated">RequireModelMBeanの適切な実行時セマンティクスを保証するために、このメソッドをオーバーロードまたはオーバーライドするRequiredModelMBeanのサブクラスは、独自の &lt;code&gt;preDeregister&lt;/code&gt; 実装でsuper.preDeregister &lt;code&gt;super.preDeregister()&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="8be29ac641af15071548526b32a215df98b96343" translate="yes" xml:space="preserve">
          <source>In order to ensure proper run-time semantics of RequireModelMBean, Any subclass of RequiredModelMBean overloading or overriding this method should call &lt;code&gt;super.preRegister(server, name)&lt;/code&gt; in its own &lt;code&gt;preRegister&lt;/code&gt; implementation.</source>
          <target state="translated">RequireModelMBeanの適切な実行時セマンティクスを保証するために、このメソッドをオーバーロードまたはオーバーライドするRequiredModelMBeanのサブクラスは、独自の &lt;code&gt;preRegister&lt;/code&gt; 実装でsuper.preRegister &lt;code&gt;super.preRegister(server, name)&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="1d55e2199f2b3cc24d9c9bff8ece9cf2b2665ec8" translate="yes" xml:space="preserve">
          <source>In order to ensure that a reclaimable object remains so, the referent of a phantom reference may not be retrieved: The &lt;code&gt;get&lt;/code&gt; method of a phantom reference always returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">再利用可能なオブジェクトが確実に残るようにするために、ファントム参照のリファレントは取得されない場合があり &lt;code&gt;null&lt;/code&gt; 。ファントム参照の &lt;code&gt;get&lt;/code&gt; メソッドは常にnullを返します。</target>
        </trans-unit>
        <trans-unit id="a8da3317d1bcb4070918ebd341897147e3ca33b9" translate="yes" xml:space="preserve">
          <source>In order to explain the interaction between &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;remove&lt;/code&gt; calls, we must model the state transitions of a class value to take into account the alternation between uninitialized and initialized states. To do this, number these states sequentially from zero, and note that uninitialized (or removed) states are numbered with even numbers, while initialized (or re-initialized) states have odd numbers.</source>
          <target state="translated">&lt;code&gt;get&lt;/code&gt; 呼び出しと &lt;code&gt;remove&lt;/code&gt; 呼び出しの間の相互作用を説明するために、クラス値の状態遷移をモデル化して、初期化されていない状態と初期化された状態の変化を考慮する必要があります。これを行うには、これらの状態にゼロから順番に番号を付けます。初期化されていない（または削除された）状態には偶数の番号が付けられ、初期化された（または再初期化された）状態の番号は奇数になります。</target>
        </trans-unit>
        <trans-unit id="b805d69ab19ad3f3d3727f4943dc0a7712be9ed2" translate="yes" xml:space="preserve">
          <source>In order to maintain backward compatibility, the pack file's version is set to accommodate the class files present in the input JAR file. In other words, the pack file version will be the latest, if the class files are the latest and conversely the pack file version will be the oldest if the class file versions are also the oldest. For intermediate class file versions the corresponding pack file version will be used. For example: If the input JAR-files are solely comprised of 1.5 (or lesser) class files, a 1.5 compatible pack file is produced. This will also be the case for archives that have no class files. If the input JAR-files contains a 1.6 class file, then the pack file version will be set to 1.6.</source>
          <target state="translated">後方互換性を維持するために、パックファイルのバージョンは入力JARファイルに存在するクラスファイルに対応するように設定されています。言い換えれば、クラスファイルのバージョンが最新であればパックファイルのバージョンは最新のものになり、逆にクラスファイルのバージョンも最古であればパックファイルのバージョンは最古のものになります。クラスファイルのバージョンが中間の場合は、対応するパックファイルのバージョンが使用されます。例えば、以下のようになります。入力された JAR ファイルが 1.5 (またはそれ以下)のクラスファイルのみで構成されている場合、1.5 互換のパックファイルが生成されます。これはクラスファイルを持たないアーカイブの場合も同様です。入力 JAR ファイルに 1.6 クラスファイルが含まれている場合、パックファイルのバージョンは 1.6 に設定されます。</target>
        </trans-unit>
        <trans-unit id="40ebdaa097d4b8db005e51e585c4da7a094004d1" translate="yes" xml:space="preserve">
          <source>In order to maintain backward-compatibility, specifying a null String, or a String which is formatted incorrectly, returns null.</source>
          <target state="translated">後方互換性を維持するために、NULL 文字列や誤った書式の文字列を指定すると null を返します。</target>
        </trans-unit>
        <trans-unit id="d3d65dfde4a90052c0dc072e889d8e093b67722e" translate="yes" xml:space="preserve">
          <source>In order to maintain compatibility with existing usage, Locale's constructors retain their behavior prior to the Java Runtime Environment version 1.7. The same is largely true for the &lt;code&gt;toString&lt;/code&gt; method. Thus Locale objects can continue to be used as they were. In particular, clients who parse the output of toString into language, country, and variant fields can continue to do so (although this is strongly discouraged), although the variant field will have additional information in it if script or extensions are present.</source>
          <target state="translated">既存の使用法との互換性を維持するために、ロケールのコンストラクターは、Javaランタイム環境バージョン1.7より前の動作を保持します。同じことが &lt;code&gt;toString&lt;/code&gt; メソッドにもほぼ当てはまります。したがって、Localeオブジェクトは従来どおり使用し続けることができます。特に、toStringの出力を言語、国、バリアントフィールドに解析するクライアントは、これを続行できます（ただし、これは強くお勧めしません）。ただし、スクリプトまたは拡張機能が存在する場合、バリアントフィールドには追加情報が含まれます。</target>
        </trans-unit>
        <trans-unit id="d246a53a5685a8f3eb185469887766737b2fe2fa" translate="yes" xml:space="preserve">
          <source>In order to obtain an invoker method for a particular access mode type, use &lt;a href=&quot;methodhandles#varHandleExactInvoker(java.lang.invoke.VarHandle.AccessMode,java.lang.invoke.MethodType)&quot;&gt;&lt;code&gt;MethodHandles.varHandleExactInvoker(java.lang.invoke.VarHandle.AccessMode, java.lang.invoke.MethodType)&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;methodhandles#varHandleInvoker(java.lang.invoke.VarHandle.AccessMode,java.lang.invoke.MethodType)&quot;&gt;&lt;code&gt;MethodHandles.varHandleInvoker(java.lang.invoke.VarHandle.AccessMode, java.lang.invoke.MethodType)&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;methodhandles.lookup#findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)&quot;&gt;&lt;code&gt;Lookup.findVirtual&lt;/code&gt;&lt;/a&gt; API is also able to return a method handle to call an access mode method for any specified access mode type and is equivalent in behaviour to &lt;a href=&quot;methodhandles#varHandleInvoker(java.lang.invoke.VarHandle.AccessMode,java.lang.invoke.MethodType)&quot;&gt;&lt;code&gt;MethodHandles.varHandleInvoker(java.lang.invoke.VarHandle.AccessMode, java.lang.invoke.MethodType)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">In order to obtain an invoker method for a particular access mode type, use &lt;a href=&quot;methodhandles#varHandleExactInvoker(java.lang.invoke.VarHandle.AccessMode,java.lang.invoke.MethodType)&quot;&gt; &lt;code&gt;MethodHandles.varHandleExactInvoker(java.lang.invoke.VarHandle.AccessMode, java.lang.invoke.MethodType)&lt;/code&gt; &lt;/a&gt; or &lt;a href=&quot;methodhandles#varHandleInvoker(java.lang.invoke.VarHandle.AccessMode,java.lang.invoke.MethodType)&quot;&gt; &lt;code&gt;MethodHandles.varHandleInvoker(java.lang.invoke.VarHandle.AccessMode, java.lang.invoke.MethodType)&lt;/code&gt; &lt;/a&gt;. The &lt;a href=&quot;methodhandles.lookup#findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)&quot;&gt; &lt;code&gt;Lookup.findVirtual&lt;/code&gt; &lt;/a&gt; API is also able to return a method handle to call an access mode method for any specified access mode type and is equivalent in behaviour to &lt;a href=&quot;methodhandles#varHandleInvoker(java.lang.invoke.VarHandle.AccessMode,java.lang.invoke.MethodType)&quot;&gt; &lt;code&gt;MethodHandles.varHandleInvoker(java.lang.invoke.VarHandle.AccessMode, java.lang.invoke.MethodType)&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="ce4ef230fb80e9e871692b3856524d75987acf48" translate="yes" xml:space="preserve">
          <source>In order to obtain an invoker method for a particular type descriptor, use &lt;a href=&quot;methodhandles#exactInvoker(java.lang.invoke.MethodType)&quot;&gt;&lt;code&gt;MethodHandles.exactInvoker&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;methodhandles#invoker(java.lang.invoke.MethodType)&quot;&gt;&lt;code&gt;MethodHandles.invoker&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;methodhandles.lookup#findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)&quot;&gt;&lt;code&gt;Lookup.findVirtual&lt;/code&gt;&lt;/a&gt; API is also able to return a method handle to call &lt;code&gt;invokeExact&lt;/code&gt; or plain &lt;code&gt;invoke&lt;/code&gt;, for any specified type descriptor .</source>
          <target state="translated">In order to obtain an invoker method for a particular type descriptor, use &lt;a href=&quot;methodhandles#exactInvoker(java.lang.invoke.MethodType)&quot;&gt; &lt;code&gt;MethodHandles.exactInvoker&lt;/code&gt; &lt;/a&gt;, or &lt;a href=&quot;methodhandles#invoker(java.lang.invoke.MethodType)&quot;&gt; &lt;code&gt;MethodHandles.invoker&lt;/code&gt; &lt;/a&gt;. The &lt;a href=&quot;methodhandles.lookup#findVirtual(java.lang.Class,java.lang.String,java.lang.invoke.MethodType)&quot;&gt; &lt;code&gt;Lookup.findVirtual&lt;/code&gt; &lt;/a&gt; API is also able to return a method handle to call &lt;code&gt;invokeExact&lt;/code&gt; or plain &lt;code&gt;invoke&lt;/code&gt; , for any specified type descriptor .</target>
        </trans-unit>
        <trans-unit id="8c341ab99b93cd08ae1cd8fe6f9e4f20ad47ad03" translate="yes" xml:space="preserve">
          <source>In order to obtain an invoker method for a particular type descriptor, use &lt;a href=&quot;methodhandles#exactInvoker-java.lang.invoke.MethodType-&quot;&gt;&lt;code&gt;MethodHandles.exactInvoker&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;methodhandles#invoker-java.lang.invoke.MethodType-&quot;&gt;&lt;code&gt;MethodHandles.invoker&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;methodhandles.lookup#findVirtual-java.lang.Class-java.lang.String-java.lang.invoke.MethodType-&quot;&gt;&lt;code&gt;Lookup.findVirtual&lt;/code&gt;&lt;/a&gt; API is also able to return a method handle to call &lt;code&gt;invokeExact&lt;/code&gt; or plain &lt;code&gt;invoke&lt;/code&gt;, for any specified type descriptor .</source>
          <target state="translated">特定の型記述子の呼び出しメソッドを取得するには、&lt;a href=&quot;methodhandles#exactInvoker-java.lang.invoke.MethodType-&quot;&gt; &lt;code&gt;MethodHandles.exactInvoker&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;methodhandles#invoker-java.lang.invoke.MethodType-&quot;&gt; &lt;code&gt;MethodHandles.invoker&lt;/code&gt; を&lt;/a&gt;使用します。&lt;a href=&quot;methodhandles.lookup#findVirtual-java.lang.Class-java.lang.String-java.lang.invoke.MethodType-&quot;&gt; &lt;code&gt;Lookup.findVirtual&lt;/code&gt; &lt;/a&gt; APIも呼び出すメソッドハンドル返すことができる &lt;code&gt;invokeExact&lt;/code&gt; またはプレーン &lt;code&gt;invoke&lt;/code&gt; 任意の指定された型記述子のために、。</target>
        </trans-unit>
        <trans-unit id="810bead2e372dd39834a34f84480e291cf7bbae9" translate="yes" xml:space="preserve">
          <source>In order to pass a live link to a Remote object via a Drag and Drop &lt;code&gt;ACTION_LINK&lt;/code&gt; operation a Mime Content Type of application/x-java-remote-object should be used, where the representation class of the &lt;code&gt;DataFlavor&lt;/code&gt; represents the type of the &lt;code&gt;Remote&lt;/code&gt; interface to be transferred.</source>
          <target state="translated">ドラッグアンドドロップの &lt;code&gt;ACTION_LINK&lt;/code&gt; 操作を介してライブリンクをリモートオブジェクトに渡すには、Mimeコンテンツタイプのapplication / x-java-remote-objectを使用する必要があります。ここで、 &lt;code&gt;DataFlavor&lt;/code&gt; の表現クラスは &lt;code&gt;Remote&lt;/code&gt; インターフェイスのタイプを表します。転送されます。</target>
        </trans-unit>
        <trans-unit id="7caad4369bff00659280f907da0a4b977bd41341" translate="yes" xml:space="preserve">
          <source>In order to pass namespaced values to transformations, for instance when setting a property or a parameter on a &lt;a href=&quot;transformer&quot;&gt;&lt;code&gt;Transformer&lt;/code&gt;&lt;/a&gt; object, this specification defines that a String &quot;qname&quot; object parameter be passed as two-part string, the namespace URI enclosed in curly braces ({}), followed by the local name. If the qname has a null URI, then the String object only contains the local name. An application can safely check for a non-null URI by testing to see if the first character of the name is a '{' character.</source>
          <target state="translated">名前空間の値を変換に渡すために、たとえば&lt;a href=&quot;transformer&quot;&gt; &lt;code&gt;Transformer&lt;/code&gt; &lt;/a&gt;オブジェクトにプロパティまたはパラメーターを設定する場合、この仕様では、文字列「qname」オブジェクトパラメーターを2つの部分からなる文字列として渡すことを定義しています。名前空間URIは中括弧で囲まれています（ {}）の後にローカル名が続きます。 qnameのURIがnullの場合、Stringオブジェクトにはローカル名のみが含まれます。アプリケーションは、名前の最初の文字が「{」文字であるかどうかをテストすることにより、null以外のURIを安全にチェックできます。</target>
        </trans-unit>
        <trans-unit id="7ce62073d8b8243aff397ab4c4bebe1848f0dc18" translate="yes" xml:space="preserve">
          <source>In order to return the version number in a double, when there are more than two components (separated by '.' as defined above), only the first two components are retained. The resulting string is then passed to &lt;a href=&quot;../lang/double#valueOf(java.lang.String)&quot;&gt;&lt;code&gt;Double.valueOf(String)&lt;/code&gt;&lt;/a&gt; to generate version number, i.e. &lt;a href=&quot;#getVersion()&quot;&gt;&lt;code&gt;getVersion()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">バージョン番号をdoubleで返すために、3つ以上のコンポーネント（上記で定義されているように「。」で区切られている）がある場合、最初の2つのコンポーネントのみが保持されます。次に、結果の文字列が&lt;a href=&quot;../lang/double#valueOf(java.lang.String)&quot;&gt; &lt;code&gt;Double.valueOf(String)&lt;/code&gt; &lt;/a&gt;に渡され、バージョン番号、つまり&lt;a href=&quot;#getVersion()&quot;&gt; &lt;code&gt;getVersion()&lt;/code&gt; &lt;/a&gt;が生成されます。</target>
        </trans-unit>
        <trans-unit id="264efb423c60280550c1587a3402f655e3fa2c21" translate="yes" xml:space="preserve">
          <source>In order to supply a predicate for the &lt;code&gt;FilteredRowSet&lt;/code&gt;. this interface must be implemented. At this time, the JDBC RowSet Implementations (JSR-114) does not specify any standard filters definitions. By specifying a standard means and mechanism for a range of filters to be defined and deployed with both the reference and vendor implementations of the &lt;code&gt;FilteredRowSet&lt;/code&gt; interface, this allows for a flexible and application motivated implementations of &lt;code&gt;Predicate&lt;/code&gt; to emerge.</source>
          <target state="translated">&lt;code&gt;FilteredRowSet&lt;/code&gt; の述語を提供するため。このインターフェースを実装する必要があります。現時点では、JDBC RowSet実装（JSR-114）は標準フィルター定義を指定していません。 &lt;code&gt;FilteredRowSet&lt;/code&gt; インターフェースの参照実装とベンダー実装の両方で定義および展開されるフィルターの範囲の標準的な手段とメカニズムを指定することにより、 &lt;code&gt;Predicate&lt;/code&gt; 柔軟でアプリケーションに動機付けられた実装を出現させることができます。</target>
        </trans-unit>
        <trans-unit id="21171aa5fee1cb0c9ac069787ce53f4fb32d4b2d" translate="yes" xml:space="preserve">
          <source>In order to supply localized descriptions of elements and attributes, a &lt;code&gt;ResourceBundle&lt;/code&gt; with a base name of &lt;code&gt;this.getClass().getName() + &quot;Resources&quot;&lt;/code&gt; should be supplied via the usual mechanism used by &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt;. Briefly, the subclasser supplies one or more additional classes according to a naming convention (by default, the fully-qualified name of the subclass extending &lt;code&gt;IIMetadataFormatImpl&lt;/code&gt;, plus the string &quot;Resources&quot;, plus the country, language, and variant codes separated by underscores). At run time, calls to &lt;code&gt;getElementDescription&lt;/code&gt; or &lt;code&gt;getAttributeDescription&lt;/code&gt; will attempt to load such classes dynamically according to the supplied locale, and will use either the element name, or the element name followed by a '/' character followed by the attribute name as a key. This key will be supplied to the &lt;code&gt;ResourceBundle&lt;/code&gt;'s &lt;code&gt;getString&lt;/code&gt; method, and the resulting localized description of the node or attribute is returned.</source>
          <target state="translated">要素と属性のローカライズされた説明を提供するには、 &lt;code&gt;this.getClass().getName() + &quot;Resources&quot;&lt;/code&gt; ベース名を持つ &lt;code&gt;ResourceBundle&lt;/code&gt; を、ResourceBundle.getBundleで使用される通常のメカニズムを介して提供する必要があり &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; 。簡単に言うと、サブクラス作成者は、命名規則に従って1つ以上の追加クラスを提供します（デフォルトでは、 &lt;code&gt;IIMetadataFormatImpl&lt;/code&gt; を拡張するサブクラスの完全修飾名、文字列「Resources」、国、言語、およびアンダースコアで区切られたバリアントコード）。 。実行時に、 &lt;code&gt;getElementDescription&lt;/code&gt; または &lt;code&gt;getAttributeDescription&lt;/code&gt; の呼び出し提供されたロケールに従って動的にそのようなクラスをロードしようとし、要素名、または要素名の後に「/」文字と属性名が続くキーをキーとして使用します。このキーは &lt;code&gt;ResourceBundle&lt;/code&gt; の &lt;code&gt;getString&lt;/code&gt; メソッドに提供され、ノードまたは属性の結果のローカライズされた説明が返されます。</target>
        </trans-unit>
        <trans-unit id="014683c12502c542584ab5d18031c8c4346b0831" translate="yes" xml:space="preserve">
          <source>In order to support the platform-independent handling of action keys, the Java platform uses a few additional virtual key constants for functions that would otherwise have to be recognized by interpreting virtual key codes and modifiers. For example, for Japanese Windows keyboards, VK_ALL_CANDIDATES is returned instead of VK_CONVERT with the ALT modifier.</source>
          <target state="translated">プラットフォームに依存しないアクションキーの処理をサポートするために、Javaプラットフォームでは、仮想キーコードや修飾子を解釈して認識しなければならない関数に対して、いくつかの追加の仮想キー定数を使用しています。例えば、日本語のWindowsキーボードでは、VK_CONVERTの代わりにVK_ALL_CANDIDATESがALT修飾子付きで返されます。</target>
        </trans-unit>
        <trans-unit id="b948f84b10418ce16ffc2d20202029b8cb2b47a0" translate="yes" xml:space="preserve">
          <source>In order to take advantage of the specialized CRL format supported by this certificate factory, each element in the returned collection view can be typecast to the corresponding CRL class. For example, if this certificate factory implements X.509 CRLs, the elements in the returned collection can be typecast to the &lt;code&gt;X509CRL&lt;/code&gt; class.</source>
          <target state="translated">この証明書ファクトリでサポートされている特殊なCRL形式を利用するために、返されるコレクションビューの各要素を、対応するCRLクラスに型キャストできます。たとえば、この証明書ファクトリがX.509 CRLを実装している場合、返されたコレクションの要素を &lt;code&gt;X509CRL&lt;/code&gt; クラスに型キャストできます。</target>
        </trans-unit>
        <trans-unit id="80e182cdf13fd4175ed2ea3f937aa79716e1a63a" translate="yes" xml:space="preserve">
          <source>In order to take advantage of the specialized CRL format supported by this certificate factory, the returned CRL object can be typecast to the corresponding CRL class. For example, if this certificate factory implements X.509 CRLs, the returned CRL object can be typecast to the &lt;code&gt;X509CRL&lt;/code&gt; class.</source>
          <target state="translated">この証明書ファクトリでサポートされている特殊なCRL形式を利用するために、返されたCRLオブジェクトを対応するCRLクラスに型キャストできます。たとえば、この証明書ファクトリがX.509 CRLを実装している場合、返されたCRLオブジェクトを &lt;code&gt;X509CRL&lt;/code&gt; クラスに型キャストできます。</target>
        </trans-unit>
        <trans-unit id="01401a15feb01ba8cb6b8c41aeda0f7926741999" translate="yes" xml:space="preserve">
          <source>In order to take advantage of the specialized certificate format supported by this certificate factory, each element in the returned collection view can be typecast to the corresponding certificate class. For example, if this certificate factory implements X.509 certificates, the elements in the returned collection can be typecast to the &lt;code&gt;X509Certificate&lt;/code&gt; class.</source>
          <target state="translated">この証明書ファクトリでサポートされている特殊な証明書形式を利用するために、返されたコレクションビューの各要素を、対応する証明書クラスに型キャストできます。たとえば、この証明書ファクトリがX.509証明書を実装している場合、返されたコレクションの要素を &lt;code&gt;X509Certificate&lt;/code&gt; クラスに型キャストできます。</target>
        </trans-unit>
        <trans-unit id="dbcefe87046aa2f225b01d92aac3ff3e9e108c45" translate="yes" xml:space="preserve">
          <source>In order to take advantage of the specialized certificate format supported by this certificate factory, the returned certificate object can be typecast to the corresponding certificate class. For example, if this certificate factory implements X.509 certificates, the returned certificate object can be typecast to the &lt;code&gt;X509Certificate&lt;/code&gt; class.</source>
          <target state="translated">この証明書ファクトリでサポートされている特殊な証明書形式を利用するために、返された証明書オブジェクトを対応する証明書クラスに型キャストできます。たとえば、この証明書ファクトリがX.509証明書を実装している場合、返された証明書オブジェクトを &lt;code&gt;X509Certificate&lt;/code&gt; クラスに型キャストできます。</target>
        </trans-unit>
        <trans-unit id="4526bf5772005a098203e20083dabc3115a81c2b" translate="yes" xml:space="preserve">
          <source>In order to use the optimistic concurrency control routine, the &lt;code&gt;RIOptimisticProvider&lt;/code&gt; maintains both its current value and its original value (the value it had immediately preceding the current value). Note that if no changes have been made to the data in a &lt;code&gt;RowSet&lt;/code&gt; object, its current values and its original values are the same, both being the values with which the &lt;code&gt;RowSet&lt;/code&gt; object was initially populated. However, once any values in the &lt;code&gt;RowSet&lt;/code&gt; object have been changed, the current values and the original values will be different, though at this stage, the original values are still the initial values. With any subsequent changes to data in a &lt;code&gt;RowSet&lt;/code&gt; object, its original values and current values will still differ, but its original values will be the values that were previously the current values.</source>
          <target state="translated">楽観的同時実行制御ルーチンを使用するために、 &lt;code&gt;RIOptimisticProvider&lt;/code&gt; は、現在の値と元の値（現在の値の直前の値）の両方を維持します。 &lt;code&gt;RowSet&lt;/code&gt; オブジェクトのデータに変更が加えられていない場合、現在の値と元の値は同じであり、どちらも &lt;code&gt;RowSet&lt;/code&gt; オブジェクトに最初に入力された値であることに注意してください。ただし、 &lt;code&gt;RowSet&lt;/code&gt; オブジェクトの値が変更されると、現在の値と元の値は異なりますが、この段階では、元の値はまだ初期値です。 &lt;code&gt;RowSet&lt;/code&gt; 内のデータに対するその後の変更 オブジェクト、元の値と現在の値は引き続き異なりますが、元の値は以前の現在の値でした。</target>
        </trans-unit>
        <trans-unit id="9662b58c0cd62c1e89334c9b72a6441f78201246" translate="yes" xml:space="preserve">
          <source>In other respects, a &lt;code&gt;VolatileCallSite&lt;/code&gt; is interchangeable with &lt;code&gt;MutableCallSite&lt;/code&gt;.</source>
          <target state="translated">他の点では、 &lt;code&gt;VolatileCallSite&lt;/code&gt; は &lt;code&gt;MutableCallSite&lt;/code&gt; と交換可能です。</target>
        </trans-unit>
        <trans-unit id="d25898f69afb15ff5dda349d53baa06f69e822e2" translate="yes" xml:space="preserve">
          <source>In other words for the best results use an LCD display with a digital display connector and specify the appropriate sub-pixel configuration.</source>
          <target state="translated">つまり、最良の結果を得るためには、デジタル表示コネクタ付きのLCDディスプレイを使用し、適切なサブピクセル構成を指定します。</target>
        </trans-unit>
        <trans-unit id="460f5295687a3c368d02873df1172a34752df226" translate="yes" xml:space="preserve">
          <source>In other words, an invocation of this method has exactly the same effect as invoking &lt;code&gt;new String(encode(src), StandardCharsets.ISO_8859_1)&lt;/code&gt;.</source>
          <target state="translated">つまり、このメソッドを呼び出すと、 &lt;code&gt;new String(encode(src), StandardCharsets.ISO_8859_1)&lt;/code&gt; を呼び出すのとまったく同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="61a5057b103f32156f27c9e72a6cd22cf425b56f" translate="yes" xml:space="preserve">
          <source>In other words, an invocation of this method of the form &lt;code&gt;dst.put(src)&lt;/code&gt; has exactly the same effect as the loop</source>
          <target state="translated">つまり、 &lt;code&gt;dst.put(src)&lt;/code&gt; という形式のこのメソッドを呼び出すと、ループとまったく同じ結果になります。</target>
        </trans-unit>
        <trans-unit id="4a97cb7c262be521a458a66846dc006d3685b23d" translate="yes" xml:space="preserve">
          <source>In other words, an invocation of this method of the form &lt;code&gt;dst.put(src, off, len)&lt;/code&gt; has exactly the same effect as the loop</source>
          <target state="translated">つまり、このメソッドを &lt;code&gt;dst.put(src, off, len)&lt;/code&gt; という形式で呼び出すと、ループとまったく同じ結果になります。</target>
        </trans-unit>
        <trans-unit id="12ad70fe4669e051fdd06980e62705cee95c894a" translate="yes" xml:space="preserve">
          <source>In other words, an invocation of this method of the form &lt;code&gt;dst.put(src, start, end)&lt;/code&gt; has exactly the same effect as the loop</source>
          <target state="translated">つまり、このメソッドを &lt;code&gt;dst.put(src, start, end)&lt;/code&gt; という形式で呼び出すと、ループとまったく同じ結果になります。</target>
        </trans-unit>
        <trans-unit id="4ac9d9eff73538c3cdb11833e85cd96968621454" translate="yes" xml:space="preserve">
          <source>In other words, an invocation of this method of the form &lt;code&gt;dst.put(src,&amp;nbsp;off,&amp;nbsp;len)&lt;/code&gt; has exactly the same effect as the loop</source>
          <target state="translated">つまり、 &lt;code&gt;dst.put(src,&amp;nbsp;off,&amp;nbsp;len)&lt;/code&gt; の形式でこのメソッドを呼び出すと、ループとまったく同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="356e5407810f1577f49a325b3dc66beaf9ce52a3" translate="yes" xml:space="preserve">
          <source>In other words, an invocation of this method of the form &lt;code&gt;dst.put(src,&amp;nbsp;start,&amp;nbsp;end)&lt;/code&gt; has exactly the same effect as the loop</source>
          <target state="translated">つまり、 &lt;code&gt;dst.put(src,&amp;nbsp;start,&amp;nbsp;end)&lt;/code&gt; の形式でこのメソッドを呼び出すと、ループとまったく同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="1a3bcb813c7ffe2873d728a358d0e842e6cd293f" translate="yes" xml:space="preserve">
          <source>In other words, an invocation of this method of the form &lt;code&gt;src.get(dst, off, len)&lt;/code&gt; has exactly the same effect as the loop</source>
          <target state="translated">つまり、このメソッドを &lt;code&gt;src.get(dst, off, len)&lt;/code&gt; の形式で呼び出すと、ループとまったく同じ結果になります。</target>
        </trans-unit>
        <trans-unit id="f5e54dab6d94048e7a8977a11929efc013de3da6" translate="yes" xml:space="preserve">
          <source>In other words, an invocation of this method of the form &lt;code&gt;src.get(dst,&amp;nbsp;off,&amp;nbsp;len)&lt;/code&gt; has exactly the same effect as the loop</source>
          <target state="translated">つまり、 &lt;code&gt;src.get(dst,&amp;nbsp;off,&amp;nbsp;len)&lt;/code&gt; の形式でこのメソッドを呼び出すと、ループとまったく同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="aea96e5b08f931cbd38dfab20fcd644c9067f3df" translate="yes" xml:space="preserve">
          <source>In other words, it does not follow symbolic links, and visits all levels of the file tree.</source>
          <target state="translated">言い換えれば、シンボリックリンクには従わず、ファイルツリーのすべてのレベルを訪問します。</target>
        </trans-unit>
        <trans-unit id="c6ec43bec0b5d5c5060ec2f33c0616c173c9f676" translate="yes" xml:space="preserve">
          <source>In other words, it visits all levels of the file tree.</source>
          <target state="translated">言い換えれば、ファイルツリーのすべてのレベルを訪問します。</target>
        </trans-unit>
        <trans-unit id="1c26574665b279451ba4a488577fb7d302c5b7eb" translate="yes" xml:space="preserve">
          <source>In other words, the result is the same as the value of the expression:</source>
          <target state="translated">つまり、結果は式の値と同じになります。</target>
        </trans-unit>
        <trans-unit id="505244a8ed297e57506cfc02395be44d1d47281d" translate="yes" xml:space="preserve">
          <source>In other words, this method returns a &lt;code&gt;Byte&lt;/code&gt; object equal to the value of:</source>
          <target state="translated">つまり、このメソッドは次の値に等しい &lt;code&gt;Byte&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="1369f9d282c98b0db1a38a7bb381cd40063821b2" translate="yes" xml:space="preserve">
          <source>In other words, this method returns a &lt;code&gt;Long&lt;/code&gt; object equal to the value of:</source>
          <target state="translated">つまり、このメソッドは次の値に等しい &lt;code&gt;Long&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="ba6028b1e1ba371422242dcd6a746ef6b3d2d511" translate="yes" xml:space="preserve">
          <source>In other words, this method returns a &lt;code&gt;Short&lt;/code&gt; object equal to the value of:</source>
          <target state="translated">つまり、このメソッドは次の値に等しい &lt;code&gt;Short&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="9a00355912a405656ac89583daae0b5f9ae8b495" translate="yes" xml:space="preserve">
          <source>In other words, this method returns an &lt;code&gt;Integer&lt;/code&gt; object equal to the value of:</source>
          <target state="translated">つまり、このメソッドは次の値に等しい &lt;code&gt;Integer&lt;/code&gt; オブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="97ff7fb7f0f6bafc2c9433156da41b6f41305d24" translate="yes" xml:space="preserve">
          <source>In particular this class implements certain required semantics of the &lt;code&gt;Doc&lt;/code&gt; specification as follows:</source>
          <target state="translated">特に、このクラスは、 &lt;code&gt;Doc&lt;/code&gt; 仕様に必要な特定のセマンティクスを次のように実装します。</target>
        </trans-unit>
        <trans-unit id="41833e830e1de28bbdb99be4725e3eef06b2861c" translate="yes" xml:space="preserve">
          <source>In particular this class implements certain required semantics of the Doc specification as follows:</source>
          <target state="translated">特に、このクラスは、以下のようにDoc仕様に必要なセマンティクスを実装しています。</target>
        </trans-unit>
        <trans-unit id="a948b83113ae7326141669ba70d964072cd3a296" translate="yes" xml:space="preserve">
          <source>In particular, for a mouse with one, two, or three buttons this method may return the following values:</source>
          <target state="translated">特に、1 つ、2 つ、または 3 つのボタンを持つマウスの場合、このメソッドは以下の値を返すことがあります。</target>
        </trans-unit>
        <trans-unit id="81bb4c56da829ee7121302c977f07bc6625c5153" translate="yes" xml:space="preserve">
          <source>In particular, if the two ObjectName instances have different domains then their order is the lexicographical order of the domains. The ordering of the key property list remains unspecified.</source>
          <target state="translated">特に、2つのObjectNameインスタンスが異なるドメインを持つ場合、その順序はドメインの辞書順となります。キー・プロパティ・リストの順序は未指定のままです。</target>
        </trans-unit>
        <trans-unit id="5894ea611cab3c030c00283ed49599698fcfcfad" translate="yes" xml:space="preserve">
          <source>In particular, operations on collection-views do</source>
          <target state="translated">特に、コレクションビューに対する操作は</target>
        </trans-unit>
        <trans-unit id="8661f32f8775daadf95377f956a10599c2e08e36" translate="yes" xml:space="preserve">
          <source>In particular, the current thread is required to issue a fresh read of the target from memory, and must not fail to see a recent update to the target by another thread.</source>
          <target state="translated">特に、現在のスレッドは、メモリからターゲットの新しい読み込みを発行する必要があり、他のスレッドによるターゲットの最近の更新を見落としてはいけません。</target>
        </trans-unit>
        <trans-unit id="005c3ba59a8712aeaee68de4ef1f56b993202750" translate="yes" xml:space="preserve">
          <source>In particular, the current thread may choose to reuse the result of a previous read of the target from memory, and may fail to see a recent update to the target by another thread.</source>
          <target state="translated">特に、現在のスレッドは、メモリからターゲットを以前に読み込んだ結果を再利用することを選択し、別のスレッドによるターゲットの最近の更新を見ることができないかもしれません。</target>
        </trans-unit>
        <trans-unit id="2a0c491100aaf4dd16c8cf6cf2c75893b008214b" translate="yes" xml:space="preserve">
          <source>In particular, the model makes a distinction between static language constructs, like the &lt;a href=&quot;element/package-summary&quot;&gt;element&lt;/a&gt; representing &lt;code&gt;java.util.Set&lt;/code&gt;, and the family of &lt;a href=&quot;type/package-summary&quot;&gt;types&lt;/a&gt; that may be associated with an element, like the raw type &lt;code&gt;java.util.Set&lt;/code&gt;, &lt;code&gt;
 java.util.Set&amp;lt;String&amp;gt;&lt;/code&gt;, and &lt;code&gt;java.util.Set&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">特に、このモデルは、 &lt;code&gt;java.util.Set&lt;/code&gt; を表す&lt;a href=&quot;element/package-summary&quot;&gt;要素&lt;/a&gt;などの静的言語構造と、生の型 &lt;code&gt;java.util.Set&lt;/code&gt; 、 &lt;code&gt; java.util.Set&amp;lt;String&amp;gt;&lt;/code&gt; などの要素に関連付けられる可能性のある&lt;a href=&quot;type/package-summary&quot;&gt;型&lt;/a&gt;のファミリーを区別します。 Set &amp;lt;String&amp;gt;、および &lt;code&gt;java.util.Set&amp;lt;T&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="397ea1619f838bf6759858af4a9e7980654e1c14" translate="yes" xml:space="preserve">
          <source>In particular, the model makes a distinction between static language constructs, like the &lt;a href=&quot;element/package-summary&quot;&gt;element&lt;/a&gt; representing &lt;code&gt;java.util.Set&lt;/code&gt;, and the family of &lt;a href=&quot;type/package-summary&quot;&gt;types&lt;/a&gt; that may be associated with an element, like the raw type &lt;code&gt;java.util.Set&lt;/code&gt;, &lt;code&gt;java.util.Set&amp;lt;String&amp;gt;&lt;/code&gt;, and &lt;code&gt;java.util.Set&amp;lt;T&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">特に、モデルは、 &lt;code&gt;java.util.Set&lt;/code&gt; を表す&lt;a href=&quot;element/package-summary&quot;&gt;要素の&lt;/a&gt;ような静的言語構成要素と、生の型 &lt;code&gt;java.util.Set&lt;/code&gt; 、 &lt;code&gt;java.util.Set&amp;lt;String&amp;gt;&lt;/code&gt; などの要素に関連付けられる可能性のある&lt;a href=&quot;type/package-summary&quot;&gt;型&lt;/a&gt;のファミリーとを区別します。 Set &amp;lt;String&amp;gt;、および &lt;code&gt;java.util.Set&amp;lt;T&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f662f0574d9aac457b04052d9413b3d9616ae3c4" translate="yes" xml:space="preserve">
          <source>In particular, the resolver is only called for functions in an another namespace (functions with an explicit prefix). This means that you cannot use the &lt;code&gt;XPathFunctionResolver&lt;/code&gt; to implement specifications like &lt;a href=&quot;http://www.w3.org/TR/xmldsig-core/&quot;&gt;XML-Signature Syntax and Processing&lt;/a&gt; which extend the function library of XPath 1.0 in the same namespace. This is a consequence of the design of the resolver.</source>
          <target state="translated">特に、リゾルバーは、別の名前空間内の関数（明示的なプレフィックスを持つ関数）に対してのみ呼び出されます。これは、 &lt;code&gt;XPathFunctionResolver&lt;/code&gt; を使用して、同じ名前空間でXPath1.0の関数ライブラリを拡張する&lt;a href=&quot;http://www.w3.org/TR/xmldsig-core/&quot;&gt;XML署名構文や処理&lt;/a&gt;などの仕様を実装できないことを意味します。これは、リゾルバーの設計の結果です。</target>
        </trans-unit>
        <trans-unit id="6d59d813a2d2c234fbceea2f8ac2972003697777" translate="yes" xml:space="preserve">
          <source>In particular, this class handles most or all of the details of byte order interpretation, buffering, mark/reset, discarding, closing, and disposing.</source>
          <target state="translated">特に、このクラスは、バイトオーダーの解釈、バッファリング、マーク/リセット、破棄、終了、廃棄のほとんどまたはすべての詳細を処理します。</target>
        </trans-unit>
        <trans-unit id="9e3426680847347aed69bf7f9bd9aa973db72a2e" translate="yes" xml:space="preserve">
          <source>In particular, this interface is intended to be a common abstraction for constructs that have different formats but important common uses. For example, different types of certificates, such as X.509 certificates and PGP certificates, share general certificate functionality (the need to encode and decode certificates) and some types of information, such as a public key, the principal whose key it is, and the guarantor guaranteeing that the public key is that of the specified principal. So an implementation of X.509 certificates and an implementation of PGP certificates can both utilize the Certificate interface, even though their formats and additional types and amounts of information stored are different.</source>
          <target state="translated">特に、このインタフェースは、形式は異なるが重要な共通の用途を持つ構成要素のための共通の抽象化であることを意図している。例えば、X.509 証明書や PGP 証明書などの異なるタイプの証明書は、一般的な証明書機能(証明書をエンコードしてデコードする必要がある)と、公開鍵、その鍵を持つプリンシパル、公開鍵が指定されたプリンシパルのものであることを保証する保証人などの情報を共有しています。したがって、X.509 証明書の実装と PGP 証明書の実装は、形式や保存される情報の種類や量が異なっていても、証明書インターフェイスを利用することができる。</target>
        </trans-unit>
        <trans-unit id="2e10efdd6b0f7e97bb954a45d7a40fb01f574c42" translate="yes" xml:space="preserve">
          <source>In particular, unrelated threads may fail to see the updated target until they perform a read from memory. Stronger guarantees can be created by putting appropriate operations into the bootstrap method and/or the target methods used at any given call site.</source>
          <target state="translated">特に、関係のないスレッドは、メモリからの読み込みを実行するまで、更新されたターゲットを見ることができないかもしれません。より強力な保証は、任意のコールサイトで使用されるブートストラップメソッドおよび/またはターゲットメソッドに適切な操作を入れることによって作成することができます。</target>
        </trans-unit>
        <trans-unit id="b8f69fa80998eb9c6dbcb7b318ca2c3c6434c7cd" translate="yes" xml:space="preserve">
          <source>In passing these statements to the output stream, where they will be executed, side effects are made to the &lt;code&gt;newInstance&lt;/code&gt;. In most cases this allows the problem of properties whose values depend on each other to actually help the serialization process by making the number of statements that need to be written to the output smaller. In general, the problem of handling interdependent properties is reduced to that of finding an order for the properties in a class such that no property value depends on the value of a subsequent property.</source>
          <target state="translated">これらのステートメントを実行する出力ストリームに渡すと、 &lt;code&gt;newInstance&lt;/code&gt; に副作用が発生します。ほとんどの場合、これにより、値が相互に依存するプロパティの問題が、出力に書き込む必要のあるステートメントの数を少なくすることにより、シリアル化プロセスを実際に支援します。一般に、相互依存プロパティの処理の問題は、クラス内のプロパティの順序を見つけることの問題にまで減少し、プロパティ値は後続のプロパティの値に依存しません。</target>
        </trans-unit>
        <trans-unit id="4594727a51da542b6483bfc22c69e4100582700e" translate="yes" xml:space="preserve">
          <source>In performing an operation on a name that spans multiple namespaces, a context from one naming system may need to pass the operation on to the next naming system. The context implementation does this by first constructing a &lt;code&gt;CannotProceedException&lt;/code&gt; containing information pinpointing how far it has proceeded. It then obtains a continuation context from JNDI by calling &lt;code&gt;getContinuationContext&lt;/code&gt;. The context implementation should then resume the context operation by invoking the same operation on the continuation context, using the remainder of the name that has not yet been resolved.</source>
          <target state="translated">複数の名前空間にまたがる名前で操作を実行する場合、1つのネーミングシステムのコンテキストが次のネーミングシステムに操作を渡す必要がある場合があります。コンテキスト実装は、最初に、それがどこまで進んだかを正確に示す情報を含む &lt;code&gt;CannotProceedException&lt;/code&gt; を作成することによってこれを行います。次に、 &lt;code&gt;getContinuationContext&lt;/code&gt; を呼び出して、JNDIから継続コンテキストを取得します。その後、コンテキスト実装は、まだ解決されていない残りの名前を使用して、継続コンテキストで同じ操作を呼び出すことにより、コンテキスト操作を再開する必要があります。</target>
        </trans-unit>
        <trans-unit id="6f56d490a4b579758b87f7072b8c010487f0805a" translate="yes" xml:space="preserve">
          <source>In practical terms, the &lt;code&gt;Chronology&lt;/code&gt; instance also acts as a factory. The &lt;a href=&quot;#of(java.lang.String)&quot;&gt;&lt;code&gt;of(String)&lt;/code&gt;&lt;/a&gt; method allows an instance to be looked up by identifier, while the &lt;a href=&quot;#ofLocale(java.util.Locale)&quot;&gt;&lt;code&gt;ofLocale(Locale)&lt;/code&gt;&lt;/a&gt; method allows lookup by locale.</source>
          <target state="translated">実際には、 &lt;code&gt;Chronology&lt;/code&gt; インスタンスはファクトリとしても機能します。&lt;a href=&quot;#of(java.lang.String)&quot;&gt; &lt;code&gt;of(String)&lt;/code&gt; &lt;/a&gt;ながら方法は、インスタンス識別子によって参照されることを可能にする&lt;a href=&quot;#ofLocale(java.util.Locale)&quot;&gt; &lt;code&gt;ofLocale(Locale)&lt;/code&gt; &lt;/a&gt;メソッドは、ロケールによって参照可能。</target>
        </trans-unit>
        <trans-unit id="12abb72312e94f1909297d8e075f5705219a1c91" translate="yes" xml:space="preserve">
          <source>In practical terms, the &lt;code&gt;Chronology&lt;/code&gt; instance also acts as a factory. The &lt;a href=&quot;chronology#of-java.lang.String-&quot;&gt;&lt;code&gt;of(String)&lt;/code&gt;&lt;/a&gt; method allows an instance to be looked up by identifier, while the &lt;a href=&quot;chronology#ofLocale-java.util.Locale-&quot;&gt;&lt;code&gt;ofLocale(Locale)&lt;/code&gt;&lt;/a&gt; method allows lookup by locale.</source>
          <target state="translated">実際には、 &lt;code&gt;Chronology&lt;/code&gt; インスタンスはファクトリーとしても機能します。&lt;a href=&quot;chronology#of-java.lang.String-&quot;&gt; &lt;code&gt;of(String)&lt;/code&gt; &lt;/a&gt;ながら方法は、インスタンス識別子によって参照されることを可能にする&lt;a href=&quot;chronology#ofLocale-java.util.Locale-&quot;&gt; &lt;code&gt;ofLocale(Locale)&lt;/code&gt; &lt;/a&gt;メソッドは、ロケールによって参照可能。</target>
        </trans-unit>
        <trans-unit id="44b3d89c096779e08fc6e85e71fb403f5510a848" translate="yes" xml:space="preserve">
          <source>In practice, &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;nextSibling&lt;/code&gt; should be a &lt;a href=&quot;../../../../org/w3c/dom/document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; node, a &lt;a href=&quot;../../../../org/w3c/dom/documentfragment&quot;&gt;&lt;code&gt;DocumentFragment&lt;/code&gt;&lt;/a&gt; node, or a &lt;a href=&quot;../../../../org/w3c/dom/element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; node. In other words, a node that accepts children.</source>
          <target state="translated">実際には、 &lt;code&gt;node&lt;/code&gt; と &lt;code&gt;nextSibling&lt;/code&gt; は、&lt;a href=&quot;../../../../org/w3c/dom/document&quot;&gt; &lt;code&gt;Document&lt;/code&gt; &lt;/a&gt;ノード、&lt;a href=&quot;../../../../org/w3c/dom/documentfragment&quot;&gt; &lt;code&gt;DocumentFragment&lt;/code&gt; &lt;/a&gt;ノード、または&lt;a href=&quot;../../../../org/w3c/dom/element&quot;&gt; &lt;code&gt;Element&lt;/code&gt; &lt;/a&gt;ノードである必要があります。つまり、子を受け入れるノードです。</target>
        </trans-unit>
        <trans-unit id="e66b20b0561cf0c6243ea2c6668f24f53e4932e9" translate="yes" xml:space="preserve">
          <source>In practice, the difference between a plain &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;
      Integer&lt;/code&gt;, etc, does not show up because operations in the JMX API are always on Java objects, not primitives. However, the difference &lt;em&gt;does&lt;/em&gt; show up with arrays.</source>
          <target state="translated">実際には、JMX APIの操作は常にプリミティブではなく、Javaオブジェクトに対して行われるため、プレーンな &lt;code&gt;int&lt;/code&gt; と &lt;code&gt; Integer&lt;/code&gt; などの違いは表示されません。ただし、違い&lt;em&gt;は&lt;/em&gt;配列に現れます。</target>
        </trans-unit>
        <trans-unit id="796f045d0c1c5aaebd129b5c1ce4d6bab163576c" translate="yes" xml:space="preserve">
          <source>In practice, the difference between a plain &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;Integer&lt;/code&gt;, etc, does not show up because operations in the JMX API are always on Java objects, not primitives. However, the difference &lt;em&gt;does&lt;/em&gt; show up with arrays.</source>
          <target state="translated">実際には、JMX APIの操作は常にプリミティブではなくJavaオブジェクトで行われるため、プレーンな &lt;code&gt;int&lt;/code&gt; と &lt;code&gt;Integer&lt;/code&gt; などの違いはわかりません。ただし、違い&lt;em&gt;は&lt;/em&gt;配列で現れます。</target>
        </trans-unit>
        <trans-unit id="3ec9d5278256fac554e36e5f309da0d6e49663e6" translate="yes" xml:space="preserve">
          <source>In practice, the node should be a &lt;a href=&quot;../../../../org/w3c/dom/document&quot;&gt;&lt;code&gt;Document&lt;/code&gt;&lt;/a&gt; node, a &lt;a href=&quot;../../../../org/w3c/dom/documentfragment&quot;&gt;&lt;code&gt;DocumentFragment&lt;/code&gt;&lt;/a&gt; node, or a &lt;a href=&quot;../../../../org/w3c/dom/element&quot;&gt;&lt;code&gt;Element&lt;/code&gt;&lt;/a&gt; node. In other words, a node that accepts children.</source>
          <target state="translated">実際には、ノードは&lt;a href=&quot;../../../../org/w3c/dom/document&quot;&gt; &lt;code&gt;Document&lt;/code&gt; &lt;/a&gt;ノード、&lt;a href=&quot;../../../../org/w3c/dom/documentfragment&quot;&gt; &lt;code&gt;DocumentFragment&lt;/code&gt; &lt;/a&gt;ノード、または&lt;a href=&quot;../../../../org/w3c/dom/element&quot;&gt; &lt;code&gt;Element&lt;/code&gt; &lt;/a&gt;ノードである必要があります。つまり、子を受け入れるノードです。</target>
        </trans-unit>
        <trans-unit id="8ae5216b4c4be405db42d2e5ded9009a76bacd15" translate="yes" xml:space="preserve">
          <source>In rare cases, TCP servers need to act in the SSL client mode on newly accepted connections. For example, FTP clients acquire server sockets and listen there for reverse connections from the server. An FTP client would use an SSLServerSocket in &quot;client&quot; mode to accept the reverse connection while the FTP server uses an SSLSocket with &quot;client&quot; mode disabled to initiate the connection. During the resulting handshake, existing SSL sessions may be reused.</source>
          <target state="translated">まれに、TCP サーバが新たに受け付けた接続に対して SSL クライアントモードで動作する必要があります。例えば、FTPクライアントはサーバのソケットを取得し、サーバからの逆接続をリッスンします。FTPクライアントは &quot;client &quot;モードのSSLServerSocketを使って逆接続を受け入れ、FTPサーバは &quot;client &quot;モードを無効にしたSSLSocketを使って接続を開始します。結果のハンドシェイク中に、既存のSSLセッションを再利用することができます。</target>
        </trans-unit>
        <trans-unit id="7834b390e944da71c10ffa54e9f786537a580ef7" translate="yes" xml:space="preserve">
          <source>In rare circumstances the virtual machine may</source>
          <target state="translated">まれな状況では、仮想マシンは</target>
        </trans-unit>
        <trans-unit id="f2bf8cc36315c630d7cdf208f95ef8dbe558b95e" translate="yes" xml:space="preserve">
          <source>In release 1.4, the focus subsystem was rearchitected. For more information, see &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/misc/focus.html&quot;&gt; How to Use the Focus Subsystem&lt;/a&gt;, a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.</source>
          <target state="translated">リリース1.4では、フォーカスサブシステムが再設計されました。詳細については&lt;em&gt;、Javaチュートリアルの&lt;/em&gt;セクションで&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/misc/focus.html&quot;&gt;あるFocusサブシステムの使用方法を&lt;/a&gt;参照してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="177a25f922fe44253f5e5b34f55196c5dbfa3006" translate="yes" xml:space="preserve">
          <source>In server mode, unless the return &lt;a href=&quot;../../../java/util/list&quot;&gt;&lt;code&gt;List&lt;/code&gt;&lt;/a&gt; is empty, the server should use the requested server names to guide its selection of an appropriate authentication certificate, and/or other aspects of security policy.</source>
          <target state="translated">サーバーモードでは、戻り&lt;a href=&quot;../../../java/util/list&quot;&gt; &lt;code&gt;List&lt;/code&gt; &lt;/a&gt;が空でない限り、サーバーは要求されたサーバー名を使用して、適切な認証証明書やセキュリティポリシーの他の側面の選択をガイドする必要があります。</target>
        </trans-unit>
        <trans-unit id="acaf40d027afc81cab351c04ea9fa2f4414092e5" translate="yes" xml:space="preserve">
          <source>In simple terms, pressing and releasing the mouse over a regular button triggers the button and causes and &lt;code&gt;ActionEvent&lt;/code&gt; to be fired. The same behavior can be produced via a keyboard key defined by the look and feel of the button (typically the SPACE BAR). Pressing and releasing this key while the button has focus will give the same results. For check boxes and radio buttons, the mouse or keyboard equivalent sequence just described causes the button to become selected.</source>
          <target state="translated">簡単に言うと、通常のボタンの上でマウスを押して放すと、ボタンがトリガーされ、 &lt;code&gt;ActionEvent&lt;/code&gt; が発生します。同じ動作は、ボタンのルックアンドフィール（通常はスペースバー）によって定義されるキーボードキーを介して生成できます。ボタンにフォーカスがあるときにこのキーを押して放すと、同じ結果が得られます。チェックボックスとラジオボタンの場合、今説明したマウスまたはキーボードの同等のシーケンスにより、ボタンが選択されます。</target>
        </trans-unit>
        <trans-unit id="7a5c60686b7505cac148f61afec24255ceeab119" translate="yes" xml:space="preserve">
          <source>In some (uncommon) situations, a single SQL statement may return multiple result sets and/or update counts. Normally you can ignore this unless you are (1) executing a stored procedure that you know may return multiple results or (2) you are dynamically executing an unknown SQL string.</source>
          <target state="translated">いくつかの(まれな)状況では、単一のSQL文が複数の結果セットや更新回数を返すことがあります。通常は、(1)複数の結果を返す可能性があることがわかっているストアドプロシージャを実行している場合や、(2)未知のSQL文字列を動的に実行している場合を除いて、これを無視することができます。</target>
        </trans-unit>
        <trans-unit id="9b3839dadf4c5e906a621c1be0df22a48774d481" translate="yes" xml:space="preserve">
          <source>In some cases use of this permission may affect other applications because manipulation of a mixer affects the audio for all lines using that mixer. This permission can enable an applet or application to eavesdrop on a user.</source>
          <target state="translated">ミキサーを操作すると、そのミキサーを使用しているすべてのラインのオーディオに影響を与えるため、このパーミッションを使用すると他のアプリケーションに影響を与える場合があります。このパーミッションを使用すると、アプレットやアプリケーションがユーザーを盗聴できるようになります。</target>
        </trans-unit>
        <trans-unit id="a848177f0354f031651d0cc5a0c1339e1883a198" translate="yes" xml:space="preserve">
          <source>In some cases use of this permission may affect other applications because the audio from one line may be mixed with other audio being played on the system, or because manipulation of a mixer affects the audio for all lines using that mixer.</source>
          <target state="translated">あるラインのオーディオがシステムで再生されている他のオーディオと混ざってしまったり、ミキサーを操作するとそのミキサーを使用しているすべてのラインのオーディオに影響を与えるため、この許可を使用すると他のアプリケーションに影響を与える場合があります。</target>
        </trans-unit>
        <trans-unit id="5afcd4bc923f5719f106155a0a4d4e2a58c6b53a" translate="yes" xml:space="preserve">
          <source>In some cases, a non-blocking read (or skip) may appear to be blocked when it is merely slow, for example when reading large files over slow networks.</source>
          <target state="translated">場合によっては、例えば遅いネットワーク上で大きなファイルを読む場合など、単に遅いだけの場合には、ノンブロッキングの読み取り(またはスキップ)がブロックされているように見えることがあります。</target>
        </trans-unit>
        <trans-unit id="e3fa68306b77ec8a7b03a1c5eb53b2702e05a9e8" translate="yes" xml:space="preserve">
          <source>In some cases, access between nested classes is obtained by the Java compiler by creating an wrapper method to access a private method of another class in the same top-level declaration. For example, a nested class &lt;code&gt;C.D&lt;/code&gt; can access private members within other related classes such as &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;C.D.E&lt;/code&gt;, or &lt;code&gt;C.B&lt;/code&gt;, but the Java compiler may need to generate wrapper methods in those related classes. In such cases, a &lt;code&gt;Lookup&lt;/code&gt; object on &lt;code&gt;C.E&lt;/code&gt; would be unable to those private members. A workaround for this limitation is the &lt;a href=&quot;methodhandles.lookup#in-java.lang.Class-&quot;&gt;&lt;code&gt;Lookup.in&lt;/code&gt;&lt;/a&gt; method, which can transform a lookup on &lt;code&gt;C.E&lt;/code&gt; into one on any of those other classes, without special elevation of privilege.</source>
          <target state="translated">場合によっては、ネストされたクラス間のアクセスは、同じトップレベル宣言内の別のクラスのプライベートメソッドにアクセスするラッパーメソッドを作成することにより、Javaコンパイラーによって取得されます。たとえば、ネストされたクラス &lt;code&gt;C.D&lt;/code&gt; は、 &lt;code&gt;C&lt;/code&gt; 、 &lt;code&gt;C.D.E&lt;/code&gt; 、 &lt;code&gt;C.B&lt;/code&gt; などの他の関連クラス内のプライベートメンバーにアクセスできますが、Javaコンパイラーはそれらの関連クラスでラッパーメソッドを生成する必要がある場合があります。そのような場合、 &lt;code&gt;C.E&lt;/code&gt; &lt;code&gt;Lookup&lt;/code&gt; オブジェクトはそれらのプライベートメンバーにはできません。この制限の回避策は、&lt;a href=&quot;methodhandles.lookup#in-java.lang.Class-&quot;&gt; &lt;code&gt;Lookup.in&lt;/code&gt; &lt;/a&gt;メソッドです。このメソッドは、特別な特権の昇格なしで、 &lt;code&gt;C.E&lt;/code&gt; ルックアップを他のクラスのいずれかに変換できます。</target>
        </trans-unit>
        <trans-unit id="d5cbaf96fc9f77ef0b3f4f97b798f3b481096d3a" translate="yes" xml:space="preserve">
          <source>In some cases, adding the amount can cause the resulting date to become invalid. For example, adding one month to 31st January would result in 31st February. In cases like this, the unit is responsible for resolving the date. Typically it will choose the previous valid date, which would be the last valid day of February in this example.</source>
          <target state="translated">場合によっては、金額を足すと、結果の日付が無効になることがあります。例えば、1月31日に1ヶ月分を足すと2月31日になってしまいます。このような場合、ユニットは日付を解決する責任があります。通常、この例では2月の最後の有効日である前の有効な日付が選択されます。</target>
        </trans-unit>
        <trans-unit id="79dbde154ada935a1511e0a5ad056015e1ce81bb" translate="yes" xml:space="preserve">
          <source>In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then adding one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.</source>
          <target state="translated">フィールドの変更が完全に定義されていない場合があります。例えば、対象のオブジェクトが1月31日を表す日付であれば、1ヶ月を追加しても不明瞭になります。このような場合、フィールドは結果を解決する責任があります。通常、この例では2月の最終有効日である前の有効な日付が選択されます。</target>
        </trans-unit>
        <trans-unit id="bd10444116ccb781851e313beb7e47d91bc0acac" translate="yes" xml:space="preserve">
          <source>In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then changing the month to February would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.</source>
          <target state="translated">フィールドの変更が完全に定義されていない場合があります。例えば、対象のオブジェクトが1月31日を表す日付であれば、月を2月に変更しても不明瞭になります。このような場合、フィールドは結果を解決する責任があります。通常、この例では2月の最終有効日である前の有効な日付が選択されます。</target>
        </trans-unit>
        <trans-unit id="d624716cd77a5fbae34ea08ee2b7ffe4d4819511" translate="yes" xml:space="preserve">
          <source>In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then changing the month to February would be unclear. In cases like this, the implementation is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.</source>
          <target state="translated">フィールドの変更が完全に定義されていない場合があります。例えば、対象のオブジェクトが1月31日を表す日付である場合、月を2月に変更しても不明瞭になってしまいます。このような場合、実装は結果を解決する責任があります。通常、実装は前の有効な日付を選択しますが、この例では2月の最終有効日となります。</target>
        </trans-unit>
        <trans-unit id="c3b9cc17b785ff40a460004eb2e4df03a0601252" translate="yes" xml:space="preserve">
          <source>In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st March, then subtracting one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.</source>
          <target state="translated">フィールドの変更が完全に定義されていない場合があります。例えば、対象のオブジェクトが3月31日を表す日付であれば、1ヶ月分を引いても不明瞭になってしまいます。このような場合、フィールドは結果を解決する責任があります。通常は前の有効な日付を選択しますが、この例では2月の最終有効日となります。</target>
        </trans-unit>
        <trans-unit id="9633ad6bd00dc94ae7a6b39be76eec4e5fff7990" translate="yes" xml:space="preserve">
          <source>In some cases, changing the specified field can cause the resulting date to become invalid, such as changing the month from 31st January to February would make the day-of-month invalid. In cases like this, the field is responsible for resolving the date. Typically it will choose the previous valid date, which would be the last valid day of February in this example.</source>
          <target state="translated">場合によっては、指定したフィールドを変更すると、結果の日付が無効になってしまうことがあります。このような場合、フィールドは日付を解決する責任があります。通常は前の有効な日付が選択され、この例では2月の最後の有効な日になります。</target>
        </trans-unit>
        <trans-unit id="463fb2df4e64e20bb07cdf986fe873e31fa41b06" translate="yes" xml:space="preserve">
          <source>In some cases, changing the specified field can cause the resulting date-time to become invalid, such as changing the month from 31st January to February would make the day-of-month invalid. In cases like this, the field is responsible for resolving the date. Typically it will choose the previous valid date, which would be the last valid day of February in this example.</source>
          <target state="translated">場合によっては、指定されたフィールドを変更すると、結果の日付時刻が無効になることがあります。例えば、1月31日から2月に変更すると、月の曜日が無効になるなどです。このような場合、フィールドは日付を解決する責任があります。通常は前の有効な日付が選択され、この例では2月の最後の有効な日になります。</target>
        </trans-unit>
        <trans-unit id="76ad22f41ac4d331fd71edfa827b6a2c78d142d0" translate="yes" xml:space="preserve">
          <source>In some cases, initialization parameters other than a keystore and password may be needed by a provider. Users of that particular provider are expected to pass an implementation of the appropriate &lt;code&gt;ManagerFactoryParameters&lt;/code&gt; as defined by the provider. The provider can then call the specified methods in the &lt;code&gt;ManagerFactoryParameters&lt;/code&gt; implementation to obtain the needed information.</source>
          <target state="translated">プロバイダーによっては、キーストアとパスワード以外の初期化パラメーターが必要な場合があります。その特定のプロバイダーのユーザーは、プロバイダーによって定義された適切な &lt;code&gt;ManagerFactoryParameters&lt;/code&gt; の実装を渡す必要があります。次に、プロバイダーは &lt;code&gt;ManagerFactoryParameters&lt;/code&gt; 実装の指定されたメソッドを呼び出して、必要な情報を取得できます。</target>
        </trans-unit>
        <trans-unit id="3ec5bdcecc9af12d3c9fc36893ac4dcc77cab3ee" translate="yes" xml:space="preserve">
          <source>In some cases, initialization parameters other than a keystore and password may be needed by a provider. Users of that particular provider are expected to pass an implementation of the appropriate &lt;code&gt;ManagerFactoryParameters&lt;/code&gt; as defined by the provider. The provider can then call the specified methods in the ManagerFactoryParameters implementation to obtain the needed information.</source>
          <target state="translated">プロバイダーによっては、キーストアとパスワード以外の初期化パラメーターが必要な場合があります。その特定のプロバイダーのユーザーは、プロバイダーによって定義された適切な &lt;code&gt;ManagerFactoryParameters&lt;/code&gt; の実装を渡す必要があります。次に、プロバイダーはManagerFactoryParameters実装の指定されたメソッドを呼び出して、必要な情報を取得できます。</target>
        </trans-unit>
        <trans-unit id="5ee40fd23ac237d6d567e29c474e7a44c66c598d" translate="yes" xml:space="preserve">
          <source>In some cases, initialization parameters other than a keystore may be needed by a provider. Users of that particular provider are expected to pass an implementation of the appropriate &lt;code&gt;ManagerFactoryParameters&lt;/code&gt; as defined by the provider. The provider can then call the specified methods in the &lt;code&gt;ManagerFactoryParameters&lt;/code&gt; implementation to obtain the needed information.</source>
          <target state="translated">場合によっては、プロバイダーがキーストア以外の初期化パラメーターを必要とすることがあります。その特定のプロバイダーのユーザーは、プロバイダーによって定義された適切な &lt;code&gt;ManagerFactoryParameters&lt;/code&gt; の実装を渡す必要があります。次に、プロバイダーは &lt;code&gt;ManagerFactoryParameters&lt;/code&gt; 実装の指定されたメソッドを呼び出して、必要な情報を取得できます。</target>
        </trans-unit>
        <trans-unit id="3943e5fcf21e0c58931ef360cbd3da2eb118dd9f" translate="yes" xml:space="preserve">
          <source>In some cases, initialization parameters other than keystores may be needed by a provider. Users of that particular provider are expected to pass an implementation of the appropriate sub-interface of this class as defined by the provider. The provider can then call the specified methods in the &lt;code&gt;ManagerFactoryParameters&lt;/code&gt; implementation to obtain the needed information.</source>
          <target state="translated">プロバイダーによっては、キーストア以外の初期化パラメーターが必要な場合があります。その特定のプロバイダーのユーザーは、プロバイダーによって定義されたこのクラスの適切なサブインターフェースの実装を渡すことが期待されています。次に、プロバイダーは &lt;code&gt;ManagerFactoryParameters&lt;/code&gt; 実装の指定されたメソッドを呼び出して、必要な情報を取得できます。</target>
        </trans-unit>
        <trans-unit id="908a46abad9690abd6da29405c9fa1fb549231ef" translate="yes" xml:space="preserve">
          <source>In some contexts, an attribute set is read-only, which means that the client is only allowed to examine an attribute set's contents but not change them. In other contexts, the attribute set is read-write, which means that the client is allowed both to examine and to change an attribute set's contents. For a read-only attribute set, calling a mutating operation throws an &lt;code&gt;UnmodifiableSetException&lt;/code&gt;.</source>
          <target state="translated">一部のコンテキストでは、属性セットは読み取り専用です。つまり、クライアントは属性セットの内容を検査することのみが許可されており、変更はできません。他のコンテキストでは、属性セットは読み書き可能です。つまり、クライアントは属性セットの内容を調べて変更することができます。読み取り専用の属性セットの場合、変更操作を呼び出すと &lt;code&gt;UnmodifiableSetException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="cac15a18bb25793bfe2d1768e0c7a9131fa203a2" translate="yes" xml:space="preserve">
          <source>In some contexts, the client is only allowed to examine an attribute set's contents but not change them (the set is read-only). In other places, the client is allowed both to examine and to change an attribute set's contents (the set is read-write). For a read-only attribute set, calling a mutating operation throws an &lt;code&gt;UnmodifiableSetException&lt;/code&gt;.</source>
          <target state="translated">一部のコンテキストでは、クライアントは属性セットの内容を調べることのみが許可され、それらを変更することはできません（セットは読み取り専用です）。他の場所では、クライアントは属性セットの内容を調べたり変更したりすることができます（セットは読み取り/書き込みです）。読み取り専用の属性セットの場合、変更操作を呼び出すとUnmodizableSetExceptionがスローさ &lt;code&gt;UnmodifiableSetException&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="ce412aedb62ca8d47d285d3295efb33f716cb96d" translate="yes" xml:space="preserve">
          <source>In some contexts, the client is only allowed to examine an attribute set's contents but not change them (the set is read-only). In other places, the client is allowed both to examine and to change an attribute set's contents (the set is read-write). For a read-only attribute set, calling a mutating operation throws an UnmodifiableSetException.</source>
          <target state="translated">いくつかの文脈では、クライアントは属性セットの内容を調べることはできても、変更することはできません (セットは読み取り専用です)。他の場所では、クライアントは属性セットの内容を調べることと変更することの両方を許可されています(セットは読み書き可能です)。読み取り専用の属性セットの場合、突然変異操作を呼び出すと UnmodifiableSetException が発生します。</target>
        </trans-unit>
        <trans-unit id="eb551e97ee529776d55d9be5a6002c26fcb54fe2" translate="yes" xml:space="preserve">
          <source>In some operating systems, this property can be ignored by the underlying controls.</source>
          <target state="translated">オペレーティング・システムによっては、このプロパティは基礎となるコントロールによって無視されることがあります。</target>
        </trans-unit>
        <trans-unit id="7f6acaf9d833b5998133b034cac67f51895d1578" translate="yes" xml:space="preserve">
          <source>In some variations of the &lt;code&gt;rotate&lt;/code&gt; methods in the &lt;code&gt;AffineTransform&lt;/code&gt; class, a double-precision argument specifies the angle of rotation in radians. These methods have special handling for rotations of approximately 90 degrees (including multiples such as 180, 270, and 360 degrees), so that the common case of quadrant rotation is handled more efficiently. This special handling can cause angles very close to multiples of 90 degrees to be treated as if they were exact multiples of 90 degrees. For small multiples of 90 degrees the range of angles treated as a quadrant rotation is approximately 0.00000121 degrees wide. This section explains why such special care is needed and how it is implemented.</source>
          <target state="translated">&lt;code&gt;AffineTransform&lt;/code&gt; クラスの &lt;code&gt;rotate&lt;/code&gt; メソッドのいくつかのバリエーションでは、倍精度引数が回転角をラジアンで指定します。これらの方法は、約90度（180、270、360度などの倍数を含む）の回転に対して特別な処理を行うため、象限回転の一般的なケースをより効率的に処理できます。この特別な処理により、90度の倍数に非常に近い角度が、90度の正確な倍数であるかのように扱われる可能性があります。 90度の小さな倍数の場合、象限回転として扱われる角度の範囲は、幅が約0.00000121度です。このセクションでは、そのような特別な注意が必要な理由とその実装方法について説明します。</target>
        </trans-unit>
        <trans-unit id="885ee299391385d6ba4dabda1e81289629f68f72" translate="yes" xml:space="preserve">
          <source>In source code, a call to a signature polymorphic method will compile, regardless of the requested symbolic type descriptor. As usual, the Java compiler emits an &lt;code&gt;invokevirtual&lt;/code&gt; instruction with the given symbolic type descriptor against the named method. The unusual part is that the symbolic type descriptor is derived from the actual argument and return types, not from the method declaration.</source>
          <target state="translated">ソースコードでは、要求されたシンボリックタイプ記述子に関係なく、シグネチャポリモーフィックメソッドの呼び出しがコンパイルされます。いつものように、Javaコンパイラーは、指定されたメソッドに対して、指定されたシンボリック型記述子を持つ &lt;code&gt;invokevirtual&lt;/code&gt; 命令を発行します。異常な部分は、シンボリック型記述子がメソッド宣言からではなく、実際の引数と戻り値の型から派生していることです。</target>
        </trans-unit>
        <trans-unit id="1b915bf0ccf792776f6e76bfd8e1c08e30939ddb" translate="yes" xml:space="preserve">
          <source>In strict parsing mode, the minimum number of parsed digits is &lt;code&gt;minWidth&lt;/code&gt; and the maximum is &lt;code&gt;maxWidth&lt;/code&gt;. In lenient parsing mode, the minimum number of parsed digits is one and the maximum is 19 (except as limited by adjacent value parsing).</source>
          <target state="translated">厳密な解析モードでは、解析される数字の最小数は &lt;code&gt;minWidth&lt;/code&gt; で、最大数は &lt;code&gt;maxWidth&lt;/code&gt; です。緩やかな解析モードでは、解析される数字の最小数は1で、最大数は19です（隣接する値の解析による制限を除く）。</target>
        </trans-unit>
        <trans-unit id="e32a1c5a51d2f15051e0db94aa6b8b5a7875526d" translate="yes" xml:space="preserve">
          <source>In strict parsing, any sign will be rejected. In lenient parsing, any sign will be accepted unless the width is fixed.</source>
          <target state="translated">厳密なパースでは、どのような符号も拒否されます。甘い構文解析では、幅が固定されていない限り、どのような符号も受け入れられます。</target>
        </trans-unit>
        <trans-unit id="b74dc38e8b9a0ecab2c681d95be38243e38c6415" translate="yes" xml:space="preserve">
          <source>In strict parsing, the absence of a sign will be rejected. In lenient parsing, any sign will be accepted, with the absence of a sign treated as a positive number.</source>
          <target state="translated">厳密な構文解析では、符号がない場合は拒否されます。甘い構文解析では、符号がない場合は正の数として扱われ、どのような符号も受け入れられます。</target>
        </trans-unit>
        <trans-unit id="5c8071a6cb7a80c6d715aae673f0d54a56ce4046" translate="yes" xml:space="preserve">
          <source>In strict parsing, the negative sign will be accepted and the positive sign rejected. In lenient parsing, any sign will be accepted.</source>
          <target state="translated">厳密な解析では、負の符号は受け入れられ、正の符号は拒否されます。甘い構文解析では、どのような符号も受け入れられます。</target>
        </trans-unit>
        <trans-unit id="67fe828640d1605e5d14133978083d2888d9dcd4" translate="yes" xml:space="preserve">
          <source>In strict parsing, the sign will be rejected unless the pad width is exceeded. In lenient parsing, any sign will be accepted, with the absence of a sign treated as a positive number.</source>
          <target state="translated">厳密な解析では、パッド幅を超えない限り符号は拒否されます。甘い構文解析では、符号がない場合は正の数として扱われ、どのような符号も受け入れられます。</target>
        </trans-unit>
        <trans-unit id="32f38d097aca41b5fd2eca03a22d2ba7f888ee6d" translate="yes" xml:space="preserve">
          <source>In styled text, the baselines for each such run are aligned one after the other to potentially create a non-linear baseline for the entire run of text. For more information, see &lt;a href=&quot;textlayout#getLayoutPath()&quot;&gt;&lt;code&gt;TextLayout.getLayoutPath()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">スタイル付きテキストでは、このような各実行のベースラインが次々に整列され、テキストの実行全体に対して非線形のベースラインが作成される可能性があります。詳細については、&lt;a href=&quot;textlayout#getLayoutPath()&quot;&gt; &lt;code&gt;TextLayout.getLayoutPath()&lt;/code&gt; を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="14e6d10be963a858682493890b1c1e45150c4841" translate="yes" xml:space="preserve">
          <source>In such an environment, when calling &lt;code&gt;setLocation&lt;/code&gt;, you must pass a virtual coordinate to this method. Similarly, calling &lt;code&gt;getLocationOnScreen&lt;/code&gt; on a &lt;code&gt;Frame&lt;/code&gt; returns virtual device coordinates. Call the &lt;code&gt;getBounds&lt;/code&gt; method of a &lt;code&gt;GraphicsConfiguration&lt;/code&gt; to find its origin in the virtual coordinate system.</source>
          <target state="translated">このような環境では、 &lt;code&gt;setLocation&lt;/code&gt; を呼び出すときに、このメソッドに仮想座標を渡す必要があります。同様に、 &lt;code&gt;Frame&lt;/code&gt; &lt;code&gt;getLocationOnScreen&lt;/code&gt; を呼び出すと、仮想デバイスの座標が返されます。 &lt;code&gt;GraphicsConfiguration&lt;/code&gt; の &lt;code&gt;getBounds&lt;/code&gt; メソッドを呼び出して、仮想座標系でその原点を見つけます。</target>
        </trans-unit>
        <trans-unit id="430fe4c1fa3678008389acec40576ab47a3e8f92" translate="yes" xml:space="preserve">
          <source>In such an environment, when calling &lt;code&gt;setLocation&lt;/code&gt;, you must pass a virtual coordinate to this method. Similarly, calling &lt;code&gt;getLocationOnScreen&lt;/code&gt; on a &lt;code&gt;Window&lt;/code&gt; returns virtual device coordinates. Call the &lt;code&gt;getBounds&lt;/code&gt; method of a &lt;code&gt;GraphicsConfiguration&lt;/code&gt; to find its origin in the virtual coordinate system.</source>
          <target state="translated">このような環境では、 &lt;code&gt;setLocation&lt;/code&gt; を呼び出すときに、このメソッドに仮想座標を渡す必要があります。同様に、 &lt;code&gt;Window&lt;/code&gt; &lt;code&gt;getLocationOnScreen&lt;/code&gt; を呼び出すと、仮想デバイスの座標が返されます。 &lt;code&gt;GraphicsConfiguration&lt;/code&gt; の &lt;code&gt;getBounds&lt;/code&gt; メソッドを呼び出して、仮想座標系でその原点を見つけます。</target>
        </trans-unit>
        <trans-unit id="214ba9516aa4a0067c4a338c78f5324a4ab75fa7" translate="yes" xml:space="preserve">
          <source>In such cases an exception will be thrown. The exact nature of the exception is system-dependent, but it will always be a subclass of &lt;a href=&quot;../io/ioexception&quot;&gt;&lt;code&gt;IOException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このような場合、例外がスローされます。例外の正確な性質はシステムに依存しますが、常に&lt;a href=&quot;../io/ioexception&quot;&gt; &lt;code&gt;IOException&lt;/code&gt; の&lt;/a&gt;サブクラスになります。</target>
        </trans-unit>
        <trans-unit id="7c326a999ddfe2daddd2659ccac12ca5a92c10aa" translate="yes" xml:space="preserve">
          <source>In such situations it is desirable that the GUI control detect this and institute a scroll operation in order to make obscured region(s) visible to the user. This feature is known as autoscrolling.</source>
          <target state="translated">このような状況では、GUIコントロールがこれを検出し、ユーザに見えるようにするためにスクロール操作を行うことが望ましい。この機能はオートスクロールとして知られています。</target>
        </trans-unit>
        <trans-unit id="882463d8c19c07511a6474e0e79380cb4537f977" translate="yes" xml:space="preserve">
          <source>In summary, a &lt;code&gt;CachedRowSet&lt;/code&gt; object can be thought of as simply a disconnected set of rows that are being cached outside of a data source. Being thin and serializable, it can easily be sent across a wire, and it is well suited to sending data to a thin client. However, a &lt;code&gt;CachedRowSet&lt;/code&gt; object does have a limitation: It is limited in size by the amount of data it can store in memory at one time.</source>
          <target state="translated">要約すると、 &lt;code&gt;CachedRowSet&lt;/code&gt; オブジェクトは、データソースの外部にキャッシュされている切断された行のセットと考えることができます。シンでシリアライズ可能であるため、ワイヤーを介して簡単に送信でき、シンクライアントにデータを送信するのに適しています。ただし、 &lt;code&gt;CachedRowSet&lt;/code&gt; オブジェクトには制限があります。一度にメモリに格納できるデータの量によってサイズが制限されます。</target>
        </trans-unit>
        <trans-unit id="8067decfb6c0c5c43694b67ad35b84389b8af373" translate="yes" xml:space="preserve">
          <source>In summary, implementations must behave in a manner equivalent to this pseudo-code:</source>
          <target state="translated">要約すると、実装はこの擬似コードと同等の動作をしなければなりません。</target>
        </trans-unit>
        <trans-unit id="ed941580cb00e2437d3c9ed1b978822bc3ddf2fb" translate="yes" xml:space="preserve">
          <source>In terms of design, this class should be viewed primarily as the combination of a &lt;code&gt;LocalDateTime&lt;/code&gt; and a &lt;code&gt;ZoneId&lt;/code&gt;. The &lt;code&gt;ZoneOffset&lt;/code&gt; is a vital, but secondary, piece of information, used to ensure that the class represents an instant, especially during a daylight savings overlap.</source>
          <target state="translated">設計の面では、このクラスは主に &lt;code&gt;LocalDateTime&lt;/code&gt; とZoneIdの組み合わせと見なす必要があり &lt;code&gt;ZoneId&lt;/code&gt; 。 &lt;code&gt;ZoneOffset&lt;/code&gt; は、特に貯蓄が重なる日光中、クラスが瞬間を表していることを確認するために使用される情報の重要な、しかし二次片、です。</target>
        </trans-unit>
        <trans-unit id="76eb19d7c964e4c05ae134c3d7adb2c9eb092b77" translate="yes" xml:space="preserve">
          <source>In terms of the Java Memory Model, this operation performs a synchronization action which is comparable in effect to the writing of a volatile variable by the current thread, and an eventual volatile read by every other thread that may access one of the affected call sites.</source>
          <target state="translated">Javaメモリ・モデルの観点からは、この操作は、現在のスレッドによる揮発性変数の書き込みと、影響を受けるコール・サイトの1つにアクセスする可能性のある他のすべてのスレッドによる最終的な揮発性の読み取りに匹敵する同期動作を実行します。</target>
        </trans-unit>
        <trans-unit id="835cfd0b944daf64dbddb89f8c199c78f037cfd7" translate="yes" xml:space="preserve">
          <source>In that case it is up to the user to call it to maintain the consistency of the relations. To be kept in mind that if an MBean is unregistered and the purge not done immediately, if the ObjectName is reused and assigned to another MBean referenced in a relation, calling manually this purgeRelations() method will cause trouble, as will consider the ObjectName as corresponding to the unregistered MBean, not seeing the new one.</source>
          <target state="translated">この場合、リレーションの整合性を維持するためには、ユーザーがこれを呼び出す必要があります。注意すべき点は、MBean が未登録で、すぐにパージが行われない場合、ObjectName が再利用され、リレーションで参照されている別の MBean に割り当てられている場合、この purgeRelations()メソッドを手動で呼び出すと、ObjectName が未登録の MBean に対応しているとみなされ、新しい MBean が表示されないという問題が発生するということです。</target>
        </trans-unit>
        <trans-unit id="bef1807ddf0304b74d57e74ae70d10d603d4b799" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;../nio/channels/package-summary&quot;&gt;&lt;code&gt;channels&lt;/code&gt;&lt;/a&gt; package, the &lt;a href=&quot;../nio/channels/networkchannel&quot;&gt;&lt;code&gt;NetworkChannel&lt;/code&gt;&lt;/a&gt; interface defines the &lt;a href=&quot;../nio/channels/networkchannel#setOption(java.net.SocketOption,T)&quot;&gt;&lt;code&gt;setOption&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../nio/channels/networkchannel#getOption(java.net.SocketOption)&quot;&gt;&lt;code&gt;getOption&lt;/code&gt;&lt;/a&gt; methods to set and query the channel's socket options.</source>
          <target state="translated">で&lt;a href=&quot;../nio/channels/package-summary&quot;&gt; &lt;code&gt;channels&lt;/code&gt; &lt;/a&gt;パッケージ、&lt;a href=&quot;../nio/channels/networkchannel&quot;&gt; &lt;code&gt;NetworkChannel&lt;/code&gt; の&lt;/a&gt;インターフェースが定義されて&lt;a href=&quot;../nio/channels/networkchannel#setOption(java.net.SocketOption,T)&quot;&gt; &lt;code&gt;setOption&lt;/code&gt; を&lt;/a&gt;し、&lt;a href=&quot;../nio/channels/networkchannel#getOption(java.net.SocketOption)&quot;&gt; &lt;code&gt;getOption&lt;/code&gt; コマンド&lt;/a&gt;セットにする方法と、クエリチャネルのソケットオプションを。</target>
        </trans-unit>
        <trans-unit id="8ebc8aa5c940b2b5ec99046211ecd0bca8ea5a52" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;../nio/channels/package-summary&quot;&gt;&lt;code&gt;channels&lt;/code&gt;&lt;/a&gt; package, the &lt;a href=&quot;../nio/channels/networkchannel&quot;&gt;&lt;code&gt;NetworkChannel&lt;/code&gt;&lt;/a&gt; interface defines the &lt;a href=&quot;../nio/channels/networkchannel#setOption-java.net.SocketOption-T-&quot;&gt;&lt;code&gt;setOption&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../nio/channels/networkchannel#getOption-java.net.SocketOption-&quot;&gt;&lt;code&gt;getOption&lt;/code&gt;&lt;/a&gt; methods to set and query the channel's socket options.</source>
          <target state="translated">で&lt;a href=&quot;../nio/channels/package-summary&quot;&gt; &lt;code&gt;channels&lt;/code&gt; &lt;/a&gt;パッケージ、&lt;a href=&quot;../nio/channels/networkchannel&quot;&gt; &lt;code&gt;NetworkChannel&lt;/code&gt; の&lt;/a&gt;インターフェースが定義されて&lt;a href=&quot;../nio/channels/networkchannel#setOption-java.net.SocketOption-T-&quot;&gt; &lt;code&gt;setOption&lt;/code&gt; を&lt;/a&gt;し、&lt;a href=&quot;../nio/channels/networkchannel#getOption-java.net.SocketOption-&quot;&gt; &lt;code&gt;getOption&lt;/code&gt; コマンド&lt;/a&gt;セットにする方法と、クエリチャネルのソケットオプションを。</target>
        </trans-unit>
        <trans-unit id="b62cb44c2b6302f47dd64bfc710a64f101a0b462" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;getAttributes()&lt;/code&gt; and &lt;code&gt;search()&lt;/code&gt; methods, you can specify that all attributes associated with the requested objects be returned by supply &lt;code&gt;null&lt;/code&gt; as the list of attributes to return. The attributes returned do &lt;em&gt;not&lt;/em&gt; include operational attributes. In order to retrieve operational attributes, you must name them explicitly.</source>
          <target state="translated">&lt;code&gt;getAttributes()&lt;/code&gt; と &lt;code&gt;search()&lt;/code&gt; 方法を、あなたは要求されたオブジェクトに関連付けられたすべての属性が供給によって返されるように指定することができ &lt;code&gt;null&lt;/code&gt; 復帰への属性のリストとして。返される属性には、操作属性&lt;em&gt;は&lt;/em&gt;含まれませ&lt;em&gt;ん&lt;/em&gt;。運用属性を取得するには、明示的に名前を付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="65574745feadc55e1e05a1c122606bd23b2ae9c4" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;getAttributes()&lt;/code&gt; and &lt;code&gt;search()&lt;/code&gt; methods, you can supply the attributes to return by supplying a list of attribute names (strings). The attributes that you get back might not have the same names as the attribute names you have specified. This is because some directories support features that cause them to return other attributes. Such features include attribute subclassing, attribute name synonyms, and attribute language codes.</source>
          <target state="translated">中 &lt;code&gt;getAttributes()&lt;/code&gt; および &lt;code&gt;search()&lt;/code&gt; メソッドは、あなたは属性名（文字列）のリストを供給することによって返すように属性を供給することができます。返される属性は、指定した属性名と同じ名前ではない可能性があります。これは、一部のディレクトリが他の属性を返す機能をサポートしているためです。このような機能には、属性のサブクラス化、属性名の同義語、および属性の言語コードが含まれます。</target>
        </trans-unit>
        <trans-unit id="87d152e8e73df7131decd25ad1ce40aac0f21673" translate="yes" xml:space="preserve">
          <source>In the &lt;em&gt;JNDI form&lt;/em&gt;, the URL indicates &lt;em&gt;where to find an RMI stub for the connector&lt;/em&gt;. This RMI stub is a Java object of type &lt;a href=&quot;rmiserver&quot;&gt;&lt;code&gt;RMIServer&lt;/code&gt;&lt;/a&gt; that gives remote access to the connector server. With this address form, the RMI stub is obtained from an external directory entry included in the URL. An external directory is any directory recognized by &lt;a href=&quot;../../../../../java.naming/javax/naming/package-summary&quot;&gt;&lt;code&gt;JNDI&lt;/code&gt;&lt;/a&gt;, typically the RMI registry, LDAP, or COS Naming.</source>
          <target state="translated">で&lt;em&gt;JNDIフォーム&lt;/em&gt;、URLを示し&lt;em&gt;、コネクタのRMIスタブを検索する場所&lt;/em&gt;。このRMIスタブは、コネクタサーバーへのリモートアクセスを提供するタイプ&lt;a href=&quot;rmiserver&quot;&gt; &lt;code&gt;RMIServer&lt;/code&gt; の&lt;/a&gt;Javaオブジェクトです。このアドレス形式では、RMIスタブはURLに含まれる外部ディレクトリエントリから取得されます。外部ディレクトリは、&lt;a href=&quot;../../../../../java.naming/javax/naming/package-summary&quot;&gt; &lt;code&gt;JNDI&lt;/code&gt; &lt;/a&gt;によって認識される任意のディレクトリであり、通常はRMIレジストリ、LDAP、またはCOSネーミングです。</target>
        </trans-unit>
        <trans-unit id="bbbf3a71704058ced1b5b8411ec253780bd68226" translate="yes" xml:space="preserve">
          <source>In the &lt;em&gt;JNDI form&lt;/em&gt;, the URL indicates &lt;em&gt;where to find an RMI stub for the connector&lt;/em&gt;. This RMI stub is a Java object of type &lt;a href=&quot;rmiserver&quot;&gt;&lt;code&gt;RMIServer&lt;/code&gt;&lt;/a&gt; that gives remote access to the connector server. With this address form, the RMI stub is obtained from an external directory entry included in the URL. An external directory is any directory recognized by &lt;a href=&quot;../../../naming/package-summary&quot;&gt;&lt;code&gt;JNDI&lt;/code&gt;&lt;/a&gt;, typically the RMI registry, LDAP, or COS Naming.</source>
          <target state="translated">で&lt;em&gt;JNDIフォーム&lt;/em&gt;、URLを示し&lt;em&gt;、コネクタのRMIスタブを検索する場所&lt;/em&gt;。このRMIスタブは、コネクタサーバーへのリモートアクセスを提供するタイプ&lt;a href=&quot;rmiserver&quot;&gt; &lt;code&gt;RMIServer&lt;/code&gt; の&lt;/a&gt; Javaオブジェクトです。このアドレス形式では、RMIスタブはURLに含まれる外部ディレクトリエントリから取得されます。外部ディレクトリは、&lt;a href=&quot;../../../naming/package-summary&quot;&gt; &lt;code&gt;JNDI&lt;/code&gt; &lt;/a&gt;によって認識される任意のディレクトリであり、通常はRMIレジストリ、LDAP、またはCOSネーミングです。</target>
        </trans-unit>
        <trans-unit id="fd216e1fa9eb5f8e146da12b5c1bfee5cf25ef08" translate="yes" xml:space="preserve">
          <source>In the &lt;em&gt;encoded form&lt;/em&gt;, the URL directly includes the information needed to connect to the connector server. When using RMI/JRMP, the encoded form is the serialized RMI stub for the server object, encoded using BASE64 without embedded newlines.</source>
          <target state="translated">で&lt;em&gt;エンコードされた形式&lt;/em&gt;、URLを直接コネクタサーバーに接続するために必要な情報が含まれています。RMI / JRMPを使用する場合、エンコードされた形式はサーバーオブジェクトのシリアル化されたRMIスタブであり、改行を埋め込まずにBASE64を使用してエンコードされます。</target>
        </trans-unit>
        <trans-unit id="da195228b955a3ad9cf4e29226a227ba11eca748" translate="yes" xml:space="preserve">
          <source>In the &lt;em&gt;encoded form&lt;/em&gt;, the URL directly includes the information needed to connect to the connector server. When using RMI/JRMP, the encoded form is the serialized RMI stub for the server object, encoded using BASE64 without embedded newlines. When using RMI/IIOP, the encoded form is the CORBA IOR for the server object.</source>
          <target state="translated">で&lt;em&gt;エンコードされた形式&lt;/em&gt;、URLを直接コネクタサーバーに接続するために必要な情報が含まれています。RMI / JRMPを使用する場合、エンコードされたフォームはサーバーオブジェクトのシリアル化されたRMIスタブであり、改行が埋め込まれていないBASE64を使用してエンコードされます。RMI / IIOPを使用する場合、エンコードされた形式はサーバーオブジェクトのCORBA IORです。</target>
        </trans-unit>
        <trans-unit id="86f6b7e5dc81391222de88d79367433c554f6d3d" translate="yes" xml:space="preserve">
          <source>In the JDBC 2.0 API, the behavior of the method &lt;code&gt;getObject&lt;/code&gt; is extended to materialize data of SQL user-defined types. When a column contains a structured or distinct value, the behavior of this method is as if it were a call to: &lt;code&gt;getObject(columnIndex,
 this.getStatement().getConnection().getTypeMap())&lt;/code&gt;.</source>
          <target state="translated">JDBC 2.0 APIでは、メソッド &lt;code&gt;getObject&lt;/code&gt; の動作が拡張され、SQLユーザー定義型のデータが実体化されます。列に構造化された値または個別の値が含まれている場合、このメソッドの動作は、 &lt;code&gt;getObject(columnIndex, this.getStatement().getConnection().getTypeMap())&lt;/code&gt; 呼び出しであるかのようになります。</target>
        </trans-unit>
        <trans-unit id="5e6e492afa18abccbc15a09e9c9801f7982bd748" translate="yes" xml:space="preserve">
          <source>In the Java 1.0 event model, an event contains an &lt;a href=&quot;#id&quot;&gt;&lt;code&gt;id&lt;/code&gt;&lt;/a&gt; field that indicates what type of event it is and which other &lt;code&gt;Event&lt;/code&gt; variables are relevant for the event.</source>
          <target state="translated">Java 1.0イベントモデルでは、イベントには、イベントのタイプと、そのイベントに関連する他の &lt;code&gt;Event&lt;/code&gt; 変数を示す&lt;a href=&quot;#id&quot;&gt; &lt;code&gt;id&lt;/code&gt; &lt;/a&gt;フィールドが含まれています。</target>
        </trans-unit>
        <trans-unit id="a77ab9d4544f54d35b2613f822310c541fff6180" translate="yes" xml:space="preserve">
          <source>In the Java Print Service API, an attribute category is represented by a Java class implementing the &lt;a href=&quot;attribute&quot;&gt;Attribute&lt;/a&gt; interface. Attribute values are instances of such a class or one of its subclasses. For example, to specify the number of copies, an application constructs an instance of the &lt;a href=&quot;standard/copies&quot;&gt;Copies&lt;/a&gt; class with the number of desired copies and uses the &lt;code&gt;Copies&lt;/code&gt; instance as part of the print request. In this case, the &lt;code&gt;Copies&lt;/code&gt; class represents the attribute category, and the &lt;code&gt;Copies&lt;/code&gt; instance represents the attribute value.</source>
          <target state="translated">Java Print Service APIでは、属性カテゴリは、&lt;a href=&quot;attribute&quot;&gt;Attribute&lt;/a&gt;インターフェースを実装するJavaクラスによって表されます。属性値は、そのようなクラスまたはそのサブクラスの1つのインスタンスです。たとえば、アプリケーションは部数を指定するために、必要な部数で&lt;a href=&quot;standard/copies&quot;&gt;Copies&lt;/a&gt;クラスのインスタンスを作成し、印刷要求の一部として &lt;code&gt;Copies&lt;/code&gt; インスタンスを使用します。この場合、 &lt;code&gt;Copies&lt;/code&gt; クラスは属性カテゴリを表し、 &lt;code&gt;Copies&lt;/code&gt; インスタンスは属性値を表します。</target>
        </trans-unit>
        <trans-unit id="67a8902a6ba14e2b0903baaddb1578c58648db1e" translate="yes" xml:space="preserve">
          <source>In the Java SE API documentation, &lt;em&gt;Unicode code point&lt;/em&gt; is used for character values in the range between U+0000 and U+10FFFF, and &lt;em&gt;Unicode code unit&lt;/em&gt; is used for 16-bit &lt;code&gt;char&lt;/code&gt; values that are code units of the &lt;em&gt;UTF-16&lt;/em&gt; encoding. For more information on Unicode terminology, refer to the &lt;a href=&quot;http://www.unicode.org/glossary/&quot;&gt;Unicode Glossary&lt;/a&gt;.</source>
          <target state="translated">Java SE APIドキュメントでは、&lt;em&gt;Unicodeコードポイント&lt;/em&gt;はU + 0000からU + 10FFFFまでの範囲の文字値に使用され、&lt;em&gt;Unicodeコード単位&lt;/em&gt;は&lt;em&gt;UTF-16&lt;/em&gt;エンコーディングのコード単位である16ビット &lt;code&gt;char&lt;/code&gt; 値に使用されます。Unicodeの用語の詳細については、&lt;a href=&quot;http://www.unicode.org/glossary/&quot;&gt;Unicode Glossaryを&lt;/a&gt;参照してください。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5bc8709b34a011f36b043d3971d48950764a1f4c" translate="yes" xml:space="preserve">
          <source>In the Swing component set, borders supercede Insets as the mechanism for creating a (decorated or plain) area around the edge of a component.</source>
          <target state="translated">Swingコンポーネントセットでは、ボーダーは、コンポーネントのエッジの周囲に(装飾または無地の)領域を作成するためのメカニズムとして、Insetsに優先します。</target>
        </trans-unit>
        <trans-unit id="890cc57ecf9bbe3ff59180e50104a57930b04712" translate="yes" xml:space="preserve">
          <source>In the above cases, the type of the expected results are known. In case where the result type is unknown or any type, the &lt;a href=&quot;xpathevaluationresult&quot;&gt;&lt;code&gt;XPathEvaluationResult&lt;/code&gt;&lt;/a&gt; may be used to determine the return type. The following code demonstrates the usage:</source>
          <target state="translated">上記の場合、期待される結果のタイプは既知です。結果の型が不明または任意の型である場合は、&lt;a href=&quot;xpathevaluationresult&quot;&gt; &lt;code&gt;XPathEvaluationResult&lt;/code&gt; &lt;/a&gt;を使用して戻り値の型を決定できます。次のコードは、使用法を示しています。</target>
        </trans-unit>
        <trans-unit id="b7235ee23269ea4f01cc38b0aac3b8a2cb7f2edf" translate="yes" xml:space="preserve">
          <source>In the above example, the XML file is read into a DOM Document before being passed to the XPath API. The following code demonstrates the use of InputSource to leave it to the XPath implementation to process it:</source>
          <target state="translated">上記の例では、XML ファイルは XPath API に渡される前に DOM Document に読み込まれます。次のコードは、処理をXPath実装に任せるためにInputSourceを使用していることを示しています。</target>
        </trans-unit>
        <trans-unit id="6463be53e9fdab868fcd86a08889119e4172ad7b" translate="yes" xml:space="preserve">
          <source>In the above examples, the return type is always &lt;code&gt;CallSite&lt;/code&gt;, but that is not a necessary feature of bootstrap methods. In the case of a dynamically-computed call site, the only requirement is that the return type of the bootstrap method must be convertible (using the &lt;code&gt;asType&lt;/code&gt; conversions) to &lt;code&gt;CallSite&lt;/code&gt;, which means the bootstrap method return type might be &lt;code&gt;Object&lt;/code&gt; or &lt;code&gt;ConstantCallSite&lt;/code&gt;. In the case of a dynamically-resolved constant, the return type of the bootstrap method must be convertible to the type of the constant, as represented by its field type descriptor. For example, if the dynamic constant has a field type descriptor of &lt;code&gt;&quot;C&quot;&lt;/code&gt; (&lt;code&gt;char&lt;/code&gt;) then the bootstrap method return type could be &lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Character&lt;/code&gt;, or &lt;code&gt;char&lt;/code&gt;, but not &lt;code&gt;int&lt;/code&gt; or &lt;code&gt;Integer&lt;/code&gt;.</source>
          <target state="translated">上記の例では、戻り値の型は常に &lt;code&gt;CallSite&lt;/code&gt; ですが、これはブートストラップメソッドの必須機能ではありません。動的に計算された呼び出しサイトの場合には、唯一の要件は、ブートストラップ・メソッドの戻り型は（使用して変換しなければならないことである &lt;code&gt;asType&lt;/code&gt; のへの変換）を &lt;code&gt;CallSite&lt;/code&gt; ブートストラップメソッドの戻り型があるかもしれない手段、 &lt;code&gt;Object&lt;/code&gt; または &lt;code&gt;ConstantCallSite&lt;/code&gt; 。動的に解決される定数の場合、ブートストラップメソッドの戻り値の型は、フィールド型記述子で表されるように、定数の型に変換可能である必要があります。たとえば、動的定数のフィールドタイプ記述子が &lt;code&gt;&quot;C&quot;&lt;/code&gt; （ &lt;code&gt;char&lt;/code&gt; )の場合）その場合、ブートストラップメソッドの戻り値の型は &lt;code&gt;Object&lt;/code&gt; 、 &lt;code&gt;Character&lt;/code&gt; 、または &lt;code&gt;char&lt;/code&gt; である可能性がありますが、 &lt;code&gt;int&lt;/code&gt; または &lt;code&gt;Integer&lt;/code&gt; ではありません。</target>
        </trans-unit>
        <trans-unit id="b2e436a63fb82b00c3480e918656abba05842f97" translate="yes" xml:space="preserve">
          <source>In the above, the &lt;em&gt;package name&lt;/em&gt; for a resource is derived from the subsequence of characters that precedes the last &lt;code&gt;'/'&lt;/code&gt; in the name and then replacing each &lt;code&gt;'/'&lt;/code&gt; character in the subsequence with &lt;code&gt;'.'&lt;/code&gt;. A leading slash is ignored when deriving the package name. As an example, the package name derived for a resource named &quot;&lt;code&gt;a/b/c/foo.properties&lt;/code&gt;&quot; is &quot;&lt;code&gt;a.b.c&lt;/code&gt;&quot;. A resource name with the name &quot;&lt;code&gt;META-INF/MANIFEST.MF&lt;/code&gt;&quot; is never encapsulated because &quot;&lt;code&gt;META-INF&lt;/code&gt;&quot; is not a legal package name.</source>
          <target state="translated">上記では、リソースの&lt;em&gt;パッケージ名&lt;/em&gt;は、&lt;em&gt;名前&lt;/em&gt;の最後の &lt;code&gt;'/'&lt;/code&gt; 前にある文字のサブシーケンスから派生し、サブシーケンスの各 &lt;code&gt;'/'&lt;/code&gt; 文字を &lt;code&gt;'.'&lt;/code&gt; 置き換えます。。パッケージ名を取得するとき、先頭のスラッシュは無視されます。例として、「 &lt;code&gt;a/b/c/foo.properties&lt;/code&gt; 」という名前のリソースから派生したパッケージ名は「 &lt;code&gt;a.b.c&lt;/code&gt; 」です。「 &lt;code&gt;META-INF&lt;/code&gt; 」は有効なパッケージ名ではないため、「META-INF &lt;code&gt;META-INF/MANIFEST.MF&lt;/code&gt; 」という名前のリソース名はカプセル化されません。</target>
        </trans-unit>
        <trans-unit id="60b93c27d35d4ef73db7b1a5de3b9ca5e3bbc362" translate="yes" xml:space="preserve">
          <source>In the absence of &lt;code&gt;remove&lt;/code&gt; calls, a class value has a simple state diagram: uninitialized and initialized. When &lt;code&gt;remove&lt;/code&gt; calls are made, the rules for value observation are more complex. See the documentation for &lt;a href=&quot;#remove(java.lang.Class)&quot;&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;remove&lt;/code&gt; 呼び出しがない場合、クラス値には、初期化されていない状態と初期化された状態の単純な状態図があります。ときに &lt;code&gt;remove&lt;/code&gt; コールが行われ、値の観測のための規則は、より複雑です。詳細については、&lt;a href=&quot;#remove(java.lang.Class)&quot;&gt; &lt;code&gt;remove&lt;/code&gt; &lt;/a&gt;に関するドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="5d6c6f9ca13ab5451799666ab96c66ed377dbd22" translate="yes" xml:space="preserve">
          <source>In the absence of &lt;code&gt;remove&lt;/code&gt; calls, a class value has a simple state diagram: uninitialized and initialized. When &lt;code&gt;remove&lt;/code&gt; calls are made, the rules for value observation are more complex. See the documentation for &lt;a href=&quot;classvalue#remove-java.lang.Class-&quot;&gt;&lt;code&gt;remove&lt;/code&gt;&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;remove&lt;/code&gt; 呼び出しがない場合、クラス値には単純な状態図（初期化されていない状態と初期化されている状態）があります。ときに &lt;code&gt;remove&lt;/code&gt; コールが行われ、値の観測のための規則は、より複雑です。詳細については、&lt;a href=&quot;classvalue#remove-java.lang.Class-&quot;&gt; &lt;code&gt;remove&lt;/code&gt; &lt;/a&gt;のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a254ee0af676fe77ed6ba824317943df316a8c7a" translate="yes" xml:space="preserve">
          <source>In the absence of other alternatives, the method may throw an unchecked &lt;a href=&quot;rejectedexecutionexception&quot;&gt;&lt;code&gt;RejectedExecutionException&lt;/code&gt;&lt;/a&gt;, which will be propagated to the caller of &lt;code&gt;execute&lt;/code&gt;.</source>
          <target state="translated">他の選択肢がない場合、メソッドは未チェックの&lt;a href=&quot;rejectedexecutionexception&quot;&gt; &lt;code&gt;RejectedExecutionException&lt;/code&gt; を&lt;/a&gt;スローする場合があり、これは &lt;code&gt;execute&lt;/code&gt; の呼び出し元に伝播されます。</target>
        </trans-unit>
        <trans-unit id="e0fcd323662ee68a5bf74deb7c77fe408fd53411" translate="yes" xml:space="preserve">
          <source>In the addition to &lt;code&gt;READ&lt;/code&gt; and &lt;code&gt;WRITE&lt;/code&gt;, the following options may be present:</source>
          <target state="translated">&lt;code&gt;READ&lt;/code&gt; および &lt;code&gt;WRITE&lt;/code&gt; に加えて、次のオプションが存在する場合があります。</target>
        </trans-unit>
        <trans-unit id="e177711c2e7ebd76cba6572a163ac3437710fb82" translate="yes" xml:space="preserve">
          <source>In the case of &lt;a href=&quot;#FULL_FLUSH&quot;&gt;&lt;code&gt;FULL_FLUSH&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#SYNC_FLUSH&quot;&gt;&lt;code&gt;SYNC_FLUSH&lt;/code&gt;&lt;/a&gt;, if the return value is &lt;code&gt;len&lt;/code&gt;, the space available in output buffer &lt;code&gt;b&lt;/code&gt;, this method should be invoked again with the same &lt;code&gt;flush&lt;/code&gt; parameter and more output space. Make sure that &lt;code&gt;len&lt;/code&gt; is greater than 6 to avoid flush marker (5 bytes) being repeatedly output to the output buffer every time this method is invoked.</source>
          <target state="translated">以下の場合に&lt;a href=&quot;#FULL_FLUSH&quot;&gt; &lt;code&gt;FULL_FLUSH&lt;/code&gt; &lt;/a&gt;又は&lt;a href=&quot;#SYNC_FLUSH&quot;&gt; &lt;code&gt;SYNC_FLUSH&lt;/code&gt; &lt;/a&gt;戻り値がされた場合、 &lt;code&gt;len&lt;/code&gt; は、出力バッファ内の利用可能なスペース &lt;code&gt;b&lt;/code&gt; 、この方法は同じで再び呼び出されるべき &lt;code&gt;flush&lt;/code&gt; パラメータ及び複数の出力領域。このメソッドが呼び出されるたびにフラッシュマーカー（5バイト）が出力バッファーに繰り返し出力されないように、 &lt;code&gt;len&lt;/code&gt; が6より大きいことを確認してください。</target>
        </trans-unit>
        <trans-unit id="dd96ad5a66fc2285518bf3ab8cbec8fd8e9d5c66" translate="yes" xml:space="preserve">
          <source>In the case of &lt;a href=&quot;#FULL_FLUSH&quot;&gt;&lt;code&gt;FULL_FLUSH&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#SYNC_FLUSH&quot;&gt;&lt;code&gt;SYNC_FLUSH&lt;/code&gt;&lt;/a&gt;, if the return value is equal to the &lt;a href=&quot;../../nio/buffer#remaining()&quot;&gt;remaining space&lt;/a&gt; of the buffer, this method should be invoked again with the same &lt;code&gt;flush&lt;/code&gt; parameter and more output space. Make sure that the buffer has at least 6 bytes of remaining space to avoid the flush marker (5 bytes) being repeatedly output to the output buffer every time this method is invoked.</source>
          <target state="translated">以下の場合に&lt;a href=&quot;#FULL_FLUSH&quot;&gt; &lt;code&gt;FULL_FLUSH&lt;/code&gt; &lt;/a&gt;又は&lt;a href=&quot;#SYNC_FLUSH&quot;&gt; &lt;code&gt;SYNC_FLUSH&lt;/code&gt; &lt;/a&gt;戻り値が等しい場合、&lt;a href=&quot;../../nio/buffer#remaining()&quot;&gt;残りのスペース&lt;/a&gt;バッファの、この方法は同じで再び呼び出されるべき &lt;code&gt;flush&lt;/code&gt; パラメータ及び複数の出力領域。このメソッドが呼び出されるたびにフラッシュマーカー（5バイト）が出力バッファーに繰り返し出力されないように、バッファーに少なくとも6バイトの残りスペースがあることを確認してください。</target>
        </trans-unit>
        <trans-unit id="82201373a2610441e998008c462731da12155c0d" translate="yes" xml:space="preserve">
          <source>In the case of &lt;a href=&quot;deflater#FULL_FLUSH&quot;&gt;&lt;code&gt;FULL_FLUSH&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;deflater#SYNC_FLUSH&quot;&gt;&lt;code&gt;SYNC_FLUSH&lt;/code&gt;&lt;/a&gt;, if the return value is &lt;code&gt;len&lt;/code&gt;, the space available in output buffer &lt;code&gt;b&lt;/code&gt;, this method should be invoked again with the same &lt;code&gt;flush&lt;/code&gt; parameter and more output space.</source>
          <target state="translated">以下の場合に&lt;a href=&quot;deflater#FULL_FLUSH&quot;&gt; &lt;code&gt;FULL_FLUSH&lt;/code&gt; &lt;/a&gt;又は&lt;a href=&quot;deflater#SYNC_FLUSH&quot;&gt; &lt;code&gt;SYNC_FLUSH&lt;/code&gt; &lt;/a&gt;戻り値がされた場合、 &lt;code&gt;len&lt;/code&gt; は、出力バッファ内の利用可能なスペース &lt;code&gt;b&lt;/code&gt; 、この方法は同じで再び呼び出されるべき &lt;code&gt;flush&lt;/code&gt; パラメータ及び複数の出力領域。</target>
        </trans-unit>
        <trans-unit id="b7bc1d11380671a0651c6a64eb86fb652cb256f0" translate="yes" xml:space="preserve">
          <source>In the case of &lt;a href=&quot;standardwatcheventkinds#ENTRY_CREATE&quot;&gt;&lt;code&gt;ENTRY_CREATE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;standardwatcheventkinds#ENTRY_DELETE&quot;&gt;&lt;code&gt;ENTRY_DELETE&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;standardwatcheventkinds#ENTRY_MODIFY&quot;&gt;&lt;code&gt;ENTRY_MODIFY&lt;/code&gt;&lt;/a&gt; events the context is a &lt;code&gt;Path&lt;/code&gt; that is the &lt;a href=&quot;path#relativize(java.nio.file.Path)&quot;&gt;&lt;code&gt;relative&lt;/code&gt;&lt;/a&gt; path between the directory registered with the watch service, and the entry that is created, deleted, or modified.</source>
          <target state="translated">以下の場合に&lt;a href=&quot;standardwatcheventkinds#ENTRY_CREATE&quot;&gt; &lt;code&gt;ENTRY_CREATE&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;standardwatcheventkinds#ENTRY_DELETE&quot;&gt; &lt;code&gt;ENTRY_DELETE&lt;/code&gt; &lt;/a&gt;、及び&lt;a href=&quot;standardwatcheventkinds#ENTRY_MODIFY&quot;&gt; &lt;code&gt;ENTRY_MODIFY&lt;/code&gt; の&lt;/a&gt;イベントコンテキストで &lt;code&gt;Path&lt;/code&gt; で&lt;a href=&quot;path#relativize(java.nio.file.Path)&quot;&gt; &lt;code&gt;relative&lt;/code&gt; &lt;/a&gt;時計サービスに登録ディレクトリ、および、作成、削除、または変更されたエントリとの間の経路。</target>
        </trans-unit>
        <trans-unit id="08a4a6b6701bb5e9bce132b1aa14d72ca141be81" translate="yes" xml:space="preserve">
          <source>In the case of &lt;a href=&quot;standardwatcheventkinds#ENTRY_CREATE&quot;&gt;&lt;code&gt;ENTRY_CREATE&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;standardwatcheventkinds#ENTRY_DELETE&quot;&gt;&lt;code&gt;ENTRY_DELETE&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;standardwatcheventkinds#ENTRY_MODIFY&quot;&gt;&lt;code&gt;ENTRY_MODIFY&lt;/code&gt;&lt;/a&gt; events the context is a &lt;code&gt;Path&lt;/code&gt; that is the &lt;a href=&quot;path#relativize-java.nio.file.Path-&quot;&gt;&lt;code&gt;relative&lt;/code&gt;&lt;/a&gt; path between the directory registered with the watch service, and the entry that is created, deleted, or modified.</source>
          <target state="translated">以下の場合に&lt;a href=&quot;standardwatcheventkinds#ENTRY_CREATE&quot;&gt; &lt;code&gt;ENTRY_CREATE&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;standardwatcheventkinds#ENTRY_DELETE&quot;&gt; &lt;code&gt;ENTRY_DELETE&lt;/code&gt; &lt;/a&gt;、及び&lt;a href=&quot;standardwatcheventkinds#ENTRY_MODIFY&quot;&gt; &lt;code&gt;ENTRY_MODIFY&lt;/code&gt; の&lt;/a&gt;イベントコンテキストで &lt;code&gt;Path&lt;/code&gt; で&lt;a href=&quot;path#relativize-java.nio.file.Path-&quot;&gt; &lt;code&gt;relative&lt;/code&gt; &lt;/a&gt;時計サービスに登録ディレクトリ、および、作成、削除、または変更されたエントリとの間の経路。</target>
        </trans-unit>
        <trans-unit id="44bf9479e2baf7bea92c9e7d1d3e49e131a1ef7b" translate="yes" xml:space="preserve">
          <source>In the case of &lt;code&gt;invokeExact&lt;/code&gt;, the type descriptor of the invocation (after resolving symbolic type names) must exactly match the method type of the receiving method handle. In the case of plain, inexact &lt;code&gt;invoke&lt;/code&gt;, the resolved type descriptor must be a valid argument to the receiver's &lt;a href=&quot;#asType(java.lang.invoke.MethodType)&quot;&gt;&lt;code&gt;asType&lt;/code&gt;&lt;/a&gt; method. Thus, plain &lt;code&gt;invoke&lt;/code&gt; is more permissive than &lt;code&gt;invokeExact&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;invokeExact&lt;/code&gt; の場合、（シンボリック型名を解決した後の）呼び出しの型記述子は、受信メソッドハンドルのメソッド型と正確に一致する必要があります。単純で不正確な &lt;code&gt;invoke&lt;/code&gt; 場合、解決された型記述子は、レシーバーの&lt;a href=&quot;#asType(java.lang.invoke.MethodType)&quot;&gt; &lt;code&gt;asType&lt;/code&gt; &lt;/a&gt;メソッドに対する有効な引数である必要があります。したがって、プレーン &lt;code&gt;invoke&lt;/code&gt; は、 &lt;code&gt;invokeExact&lt;/code&gt; よりも寛容です。</target>
        </trans-unit>
        <trans-unit id="0141b656cd010a95045e183f56a7350cc6b6fbd6" translate="yes" xml:space="preserve">
          <source>In the case of &lt;code&gt;invokeExact&lt;/code&gt;, the type descriptor of the invocation (after resolving symbolic type names) must exactly match the method type of the receiving method handle. In the case of plain, inexact &lt;code&gt;invoke&lt;/code&gt;, the resolved type descriptor must be a valid argument to the receiver's &lt;a href=&quot;methodhandle#asType-java.lang.invoke.MethodType-&quot;&gt;&lt;code&gt;asType&lt;/code&gt;&lt;/a&gt; method. Thus, plain &lt;code&gt;invoke&lt;/code&gt; is more permissive than &lt;code&gt;invokeExact&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;invokeExact&lt;/code&gt; の場合、呼び出しのタイプ記述子（シンボリックタイプ名を解決した後）は、受信メソッドハンドルのメソッドタイプと正確に一致する必要があります。単純な不正確な &lt;code&gt;invoke&lt;/code&gt; の場合、解決された型記述子は、受信者の&lt;a href=&quot;methodhandle#asType-java.lang.invoke.MethodType-&quot;&gt; &lt;code&gt;asType&lt;/code&gt; &lt;/a&gt;メソッドへの有効な引数でなければなりません。したがって、単純な &lt;code&gt;invoke&lt;/code&gt; は &lt;code&gt;invokeExact&lt;/code&gt; よりも寛容です。</target>
        </trans-unit>
        <trans-unit id="ab2ee1acf84658ca3734ba1e3885215a35ed71a6" translate="yes" xml:space="preserve">
          <source>In the case of a certificate factory for X.509 CRLs, &lt;code&gt;inStream&lt;/code&gt; may contain a sequence of DER-encoded CRLs. In addition, &lt;code&gt;inStream&lt;/code&gt; may contain a PKCS#7 CRL set. This is a PKCS#7</source>
          <target state="translated">X.509 CRLの証明書ファクトリの場合、 &lt;code&gt;inStream&lt;/code&gt; にはDERエンコードされたCRLのシーケンスが含まれる場合があります。さらに、 &lt;code&gt;inStream&lt;/code&gt; にはPKCS＃7 CRLセットが含まれる場合があります。これはPKCS＃7です</target>
        </trans-unit>
        <trans-unit id="08ac21be0ad130188c9cac95e7929ab7e554db46" translate="yes" xml:space="preserve">
          <source>In the case of a certificate factory for X.509 CRLs, &lt;code&gt;inStream&lt;/code&gt; may contain a single DER-encoded CRL. In addition, &lt;code&gt;inStream&lt;/code&gt; may contain a PKCS#7 CRL set. This is a PKCS#7</source>
          <target state="translated">X.509 CRLの証明書ファクトリの場合、 &lt;code&gt;inStream&lt;/code&gt; には、DERでエンコードされた単一のCRL が含まれる場合があります。さらに、 &lt;code&gt;inStream&lt;/code&gt; にはPKCS＃7 CRLセットが含まれる場合があります。これはPKCS＃7です</target>
        </trans-unit>
        <trans-unit id="08442fbda5448829acda7334681c1abf6040c3e1" translate="yes" xml:space="preserve">
          <source>In the case of a certificate factory for X.509 certificates, &lt;code&gt;inStream&lt;/code&gt; may contain a sequence of DER-encoded certificates in the formats described for &lt;a href=&quot;#generateCertificate(java.io.InputStream)&quot;&gt;&lt;code&gt;generateCertificate&lt;/code&gt;&lt;/a&gt;. In addition, &lt;code&gt;inStream&lt;/code&gt; may contain a PKCS#7 certificate chain. This is a PKCS#7</source>
          <target state="translated">X.509証明書の証明書ファクトリの場合、 &lt;code&gt;inStream&lt;/code&gt; にはについて記載形式のDER符号化された証明書の配列含有していてもよい&lt;a href=&quot;#generateCertificate(java.io.InputStream)&quot;&gt; &lt;code&gt;generateCertificate&lt;/code&gt; を&lt;/a&gt;。さらに、 &lt;code&gt;inStream&lt;/code&gt; にはPKCS＃7証明書チェーンが含まれる場合があります。これはPKCS＃7です</target>
        </trans-unit>
        <trans-unit id="1fc2160b4adf857b1556e09bd5dd1ba9ce62d01b" translate="yes" xml:space="preserve">
          <source>In the case of a certificate factory for X.509 certificates, &lt;code&gt;inStream&lt;/code&gt; may contain a sequence of DER-encoded certificates in the formats described for &lt;a href=&quot;certificatefactory#generateCertificate-java.io.InputStream-&quot;&gt;&lt;code&gt;generateCertificate&lt;/code&gt;&lt;/a&gt;. In addition, &lt;code&gt;inStream&lt;/code&gt; may contain a PKCS#7 certificate chain. This is a PKCS#7</source>
          <target state="translated">X.509証明書の証明書ファクトリの場合、 &lt;code&gt;inStream&lt;/code&gt; にはについて記載形式のDER符号化された証明書の配列含有していてもよい&lt;a href=&quot;certificatefactory#generateCertificate-java.io.InputStream-&quot;&gt; &lt;code&gt;generateCertificate&lt;/code&gt; を&lt;/a&gt;。さらに、 &lt;code&gt;inStream&lt;/code&gt; にはPKCS＃7証明書チェーンが含まれる場合があります。これはPKCS＃7です</target>
        </trans-unit>
        <trans-unit id="1280b4cb57ef8893db4d47767dab95ce080e8f83" translate="yes" xml:space="preserve">
          <source>In the case of a certificate factory for X.509 certificates, &lt;code&gt;inStream&lt;/code&gt; may contain a single DER-encoded certificate in the formats described for &lt;a href=&quot;certificatefactory#generateCertificate(java.io.InputStream)&quot;&gt;&lt;code&gt;generateCertificate&lt;/code&gt;&lt;/a&gt;. In addition, &lt;code&gt;inStream&lt;/code&gt; may contain a PKCS#7 certificate chain. This is a PKCS#7</source>
          <target state="translated">X.509証明書の証明書ファクトリの場合、 &lt;code&gt;inStream&lt;/code&gt; にはについて記載形式で単一DER符号化された証明書が含まれていてもよい&lt;a href=&quot;certificatefactory#generateCertificate(java.io.InputStream)&quot;&gt; &lt;code&gt;generateCertificate&lt;/code&gt; を&lt;/a&gt;。さらに、 &lt;code&gt;inStream&lt;/code&gt; にはPKCS＃7証明書チェーンが含まれる場合があります。これはPKCS＃7です</target>
        </trans-unit>
        <trans-unit id="9dc29d2259ad105e7403a0727eb82c65459584a5" translate="yes" xml:space="preserve">
          <source>In the case of a certificate factory for X.509 certificates, &lt;code&gt;inStream&lt;/code&gt; may contain a single DER-encoded certificate in the formats described for &lt;a href=&quot;certificatefactory#generateCertificate-java.io.InputStream-&quot;&gt;&lt;code&gt;generateCertificate&lt;/code&gt;&lt;/a&gt;. In addition, &lt;code&gt;inStream&lt;/code&gt; may contain a PKCS#7 certificate chain. This is a PKCS#7</source>
          <target state="translated">X.509証明書の証明書ファクトリの場合、 &lt;code&gt;inStream&lt;/code&gt; にはについて記載形式で単一DER符号化された証明書が含まれていてもよい&lt;a href=&quot;certificatefactory#generateCertificate-java.io.InputStream-&quot;&gt; &lt;code&gt;generateCertificate&lt;/code&gt; を&lt;/a&gt;。さらに、 &lt;code&gt;inStream&lt;/code&gt; にはPKCS＃7証明書チェーンが含まれる場合があります。これはPKCS＃7です</target>
        </trans-unit>
        <trans-unit id="50da2fff261ef006a8b616c0bf4d45a215566afb" translate="yes" xml:space="preserve">
          <source>In the case of a certificate factory for X.509 certificates, the certificate provided in &lt;code&gt;inStream&lt;/code&gt; must be DER-encoded and may be supplied in binary or printable (Base64) encoding. If the certificate is provided in Base64 encoding, it must be bounded at the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at the end by -----END CERTIFICATE-----.</source>
          <target state="translated">X.509証明書の証明書ファクトリの場合、 &lt;code&gt;inStream&lt;/code&gt; で提供される証明書はDERエンコードする必要があり、バイナリまたは印刷可能な（Base64）エンコードで提供できます。証明書がBase64エンコードで提供されている場合は、最初に----- BEGIN CERTIFICATE -----でバインドし、最後に----- END CERTIFICATE -----でバインドする必要があります。 。</target>
        </trans-unit>
        <trans-unit id="1d5701b6b4b744bfc6a3efcf6ae43a047cc32ed3" translate="yes" xml:space="preserve">
          <source>In the case of a channel to an &lt;a href=&quot;../../net/standardprotocolfamily#INET&quot;&gt;&lt;code&gt;IPv4&lt;/code&gt;&lt;/a&gt; socket, the underlying operating system optionally supports &lt;a href=&quot;http://www.ietf.org/rfc/rfc2236.txt&quot;&gt; &lt;i&gt;RFC 2236: Internet Group Management Protocol, Version 2 (IGMPv2)&lt;/i&gt;&lt;/a&gt;. When IGMPv2 is supported then the operating system may additionally support source filtering as specified by &lt;a href=&quot;http://www.ietf.org/rfc/rfc3376.txt&quot;&gt; &lt;i&gt;RFC 3376: Internet Group Management Protocol, Version 3 (IGMPv3)&lt;/i&gt;&lt;/a&gt;. For channels to an &lt;a href=&quot;../../net/standardprotocolfamily#INET6&quot;&gt;&lt;code&gt;IPv6&lt;/code&gt;&lt;/a&gt; socket, the equivalent standards are &lt;a href=&quot;http://www.ietf.org/rfc/rfc2710.txt&quot;&gt; &lt;i&gt;RFC 2710: Multicast Listener Discovery (MLD) for IPv6&lt;/i&gt;&lt;/a&gt; and &lt;a href=&quot;http://www.ietf.org/rfc/rfc3810.txt&quot;&gt; &lt;i&gt;RFC 3810: Multicast Listener Discovery Version 2 (MLDv2) for IPv6&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../net/standardprotocolfamily#INET&quot;&gt; &lt;code&gt;IPv4&lt;/code&gt; &lt;/a&gt;ソケットへのチャネルの場合、基盤となるオペレーティングシステムはオプションで&lt;a href=&quot;http://www.ietf.org/rfc/rfc2236.txt&quot;&gt;&lt;i&gt;RFC 2236：インターネットグループ管理プロトコルバージョン2（IGMPv2）を&lt;/i&gt;&lt;/a&gt;サポートし&lt;i&gt;ます&lt;/i&gt;。IGMPv2がサポートされている場合、オペレーティングシステムは、&lt;a href=&quot;http://www.ietf.org/rfc/rfc3376.txt&quot;&gt;&lt;i&gt;RFC 3376：Internet Group Management Protocol、バージョン3（IGMPv3）で&lt;/i&gt;&lt;/a&gt;指定され&lt;i&gt;ている&lt;/i&gt;ソースフィルタリングを追加でサポートする場合があります。&lt;a href=&quot;../../net/standardprotocolfamily#INET6&quot;&gt; &lt;code&gt;IPv6&lt;/code&gt; &lt;/a&gt;ソケットへのチャネルの場合、同等の標準は、&lt;a href=&quot;http://www.ietf.org/rfc/rfc2710.txt&quot;&gt;&lt;i&gt;RFC 2710：IPv6のマルチキャストリスナディスカバリ（MLD）&lt;/i&gt;&lt;/a&gt;および&lt;a href=&quot;http://www.ietf.org/rfc/rfc3810.txt&quot;&gt;&lt;i&gt;RFC 3810：&lt;/i&gt;&lt;/a&gt;&lt;i&gt;IPv6の&lt;/i&gt;&lt;i&gt;マルチキャストリスナディスカバリバージョン2（MLDv2）です&lt;/i&gt;。 &lt;i&gt;&lt;/i&gt; &lt;i&gt;&lt;/i&gt; &lt;i&gt;&lt;/i&gt; &lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="19a2051fd0e5e72f45a371eb872d31545b4adfc3" translate="yes" xml:space="preserve">
          <source>In the case of a channel to an &lt;a href=&quot;../../net/standardprotocolfamily#INET&quot;&gt;&lt;code&gt;IPv4&lt;/code&gt;&lt;/a&gt; socket, the underlying operating system supports &lt;a href=&quot;http://www.ietf.org/rfc/rfc2236.txt&quot;&gt; &lt;i&gt;RFC 2236: Internet Group Management Protocol, Version 2 (IGMPv2)&lt;/i&gt;&lt;/a&gt;. It may optionally support source filtering as specified by &lt;a href=&quot;http://www.ietf.org/rfc/rfc3376.txt&quot;&gt; &lt;i&gt;RFC 3376: Internet Group Management Protocol, Version 3 (IGMPv3)&lt;/i&gt;&lt;/a&gt;. For channels to an &lt;a href=&quot;../../net/standardprotocolfamily#INET6&quot;&gt;&lt;code&gt;IPv6&lt;/code&gt;&lt;/a&gt; socket, the equivalent standards are &lt;a href=&quot;http://www.ietf.org/rfc/rfc2710.txt&quot;&gt; &lt;i&gt;RFC 2710: Multicast Listener Discovery (MLD) for IPv6&lt;/i&gt;&lt;/a&gt; and &lt;a href=&quot;http://www.ietf.org/rfc/rfc3810.txt&quot;&gt; &lt;i&gt;RFC 3810: Multicast Listener Discovery Version 2 (MLDv2) for IPv6&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../../net/standardprotocolfamily#INET&quot;&gt; &lt;code&gt;IPv4&lt;/code&gt; &lt;/a&gt;ソケットへのチャネルの場合、基盤となるオペレーティングシステムは&lt;a href=&quot;http://www.ietf.org/rfc/rfc2236.txt&quot;&gt;&lt;i&gt;RFC 2236：インターネットグループ管理プロトコル、バージョン2（IGMPv2）を&lt;/i&gt;&lt;/a&gt;サポートし&lt;i&gt;ます&lt;/i&gt;。&lt;a href=&quot;http://www.ietf.org/rfc/rfc3376.txt&quot;&gt;&lt;i&gt;RFC 3376：インターネットグループ管理プロトコル、バージョン3（IGMPv3）で&lt;/i&gt;&lt;/a&gt;指定され&lt;i&gt;ている&lt;/i&gt;ソースフィルタリングをオプションでサポートする場合があります。&lt;a href=&quot;../../net/standardprotocolfamily#INET6&quot;&gt; &lt;code&gt;IPv6&lt;/code&gt; &lt;/a&gt;ソケットへのチャネルの場合、同等の標準は&lt;a href=&quot;http://www.ietf.org/rfc/rfc2710.txt&quot;&gt;&lt;i&gt;RFC 2710：IPv6のマルチキャストリスナーディスカバリ（MLD）&lt;/i&gt;&lt;/a&gt;および&lt;a href=&quot;http://www.ietf.org/rfc/rfc3810.txt&quot;&gt;&lt;i&gt;RFC 3810：&lt;/i&gt;&lt;/a&gt;&lt;i&gt;IPv6の&lt;/i&gt;&lt;i&gt;マルチキャストリスナーディスカバリーバージョン2（MLDv2）です&lt;/i&gt;。 &lt;i&gt;&lt;/i&gt; &lt;i&gt;&lt;/i&gt; &lt;i&gt;&lt;/i&gt; &lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="e531c3c2e234b2ee1973c771c135218a06466ad9" translate="yes" xml:space="preserve">
          <source>In the case of a gap, when clocks jump forward, there is no valid offset. Instead, the local date-time is adjusted to be later by the length of the gap. For a typical one hour daylight savings change, the local date-time will be moved one hour later into the offset typically corresponding to &quot;summer&quot;.</source>
          <target state="translated">ギャップがある場合、時計が前方にジャンプしても有効なオフセットはありません。その代わり、ローカルの日付時刻は、ギャップの長さ分だけ遅くなるように調整されます。典型的な1時間のサマータイムの変更の場合、ローカルの日付時刻は、通常「夏」に対応するオフセットに1時間遅れて移動します。</target>
        </trans-unit>
        <trans-unit id="9fb01ead713905f1c81d4e6999c70b57340a9655" translate="yes" xml:space="preserve">
          <source>In the case of a gap, where clocks jump forward, there is no valid offset. Instead, the local date-time is adjusted to be later by the length of the gap. For a typical one hour daylight savings change, the local date-time will be moved one hour later into the offset typically corresponding to &quot;summer&quot;.</source>
          <target state="translated">クロックが前方にジャンプするギャップの場合、有効なオフセットはありません。その代わり、ローカルの日付時刻は、ギャップの長さ分だけ遅くなるように調整されます。典型的な1時間のサマータイムの変更の場合、ローカルの日付時刻は、通常「夏」に対応するオフセットに1時間遅れて移動します。</target>
        </trans-unit>
        <trans-unit id="b86e31d3309c9966888d1ce571949f78da06b9f0" translate="yes" xml:space="preserve">
          <source>In the case of a periodic notification, the value of parameter</source>
          <target state="translated">定期通知の場合は、パラメータ</target>
        </trans-unit>
        <trans-unit id="96af2556cfa1cd3f7eb8b73ee624b6aaa0970cfe" translate="yes" xml:space="preserve">
          <source>In the case of a periodic notification, uses a</source>
          <target state="translated">定期的な通知の場合は</target>
        </trans-unit>
        <trans-unit id="c9d56fa1d686e2f987ac2bf8aff1d4833e84b98f" translate="yes" xml:space="preserve">
          <source>In the case of a stored entry, the compressed size will be the same as the uncompressed size of the entry.</source>
          <target state="translated">格納されたエントリの場合、圧縮されたサイズは、エントリの非圧縮サイズと同じになります。</target>
        </trans-unit>
        <trans-unit id="79f5f7cb66c356485e0341ec28ed935ec708859f" translate="yes" xml:space="preserve">
          <source>In the case of an error event, the &lt;code&gt;SQLException&lt;/code&gt; about to be thrown to the application</source>
          <target state="translated">エラーイベントの場合、 &lt;code&gt;SQLException&lt;/code&gt; がアプリケーションにスローされようとしています</target>
        </trans-unit>
        <trans-unit id="db9e1ca64bffdeb509e25f717c03ee7e37e961d7" translate="yes" xml:space="preserve">
          <source>In the case of jar: and file: URLs, it also closes any files that were opened by it. If another thread is loading a class when the &lt;code&gt;close&lt;/code&gt; method is invoked, then the result of that load is undefined.</source>
          <target state="translated">jar：およびfile：URLの場合、それによって開かれたすべてのファイルも閉じます。 &lt;code&gt;close&lt;/code&gt; メソッドが呼び出されたときに別のスレッドがクラスをロードしている場合、そのロードの結果は未定義です。</target>
        </trans-unit>
        <trans-unit id="6d29bc847b83395a5115bf2af88720192d26de17" translate="yes" xml:space="preserve">
          <source>In the case of nested elements mouse events are always targeted at the most deeply nested element. Ancestors of the targeted element may use bubbling to obtain notification of mouse events which occur within its descendent elements.</source>
          <target state="translated">ネストされた要素の場合、マウスイベントは常に最も深いネストされた要素を対象としています。対象となる要素の祖先は、その子孫要素内で発生するマウスイベントの通知を得るために、バブリングを使用することができます。</target>
        </trans-unit>
        <trans-unit id="4807dcb176adbdc605239808fd2a7d991465460a" translate="yes" xml:space="preserve">
          <source>In the case of stream-oriented sockets and the TCP/IP protocol, the size of the socket receive buffer may be used when advertising the size of the TCP receive window to the remote peer.</source>
          <target state="translated">ストリーム指向ソケットとTCP/IPプロトコルの場合、TCP受信ウィンドウのサイズをリモートピアに広告する際に、ソケット受信バッファのサイズを使用してもよい。</target>
        </trans-unit>
        <trans-unit id="bf471b822472cd913bb8281589b6b04dc469c7d2" translate="yes" xml:space="preserve">
          <source>In the case of stream-oriented sockets, this socket option usually allows multiple listening sockets to be bound to both same address and same port.</source>
          <target state="translated">ストリーム指向ソケットの場合、このソケットオプションは通常、複数のリスニングソケットを同じアドレスと同じポートの両方にバインドすることを可能にします。</target>
        </trans-unit>
        <trans-unit id="1564f388d1bc3d2b047f3cec6463a2aca746fb14" translate="yes" xml:space="preserve">
          <source>In the case of stream-oriented sockets, this socket option will usually determine whether the socket can be bound to a socket address when a previous connection involving that socket address is in the &lt;em&gt;TIME_WAIT&lt;/em&gt; state. On implementations where the semantics differ, and the socket option is not required to be enabled in order to bind the socket when a previous connection is in this state, then the implementation may choose to ignore this option.</source>
          <target state="translated">ストリーム指向のソケットの場合、このソケットオプションは通常、そのソケットアドレスを含む以前の接続が&lt;em&gt;TIME_WAIT&lt;/em&gt;状態にあるときに、ソケットをソケットアドレスにバインドできるかどうかを決定します。セマンティクスが異なり、以前の接続がこの状態のときにソケットをバインドするためにソケットオプションを有効にする必要がない実装では、実装はこのオプションを無視することを選択できます。</target>
        </trans-unit>
        <trans-unit id="dbce8b76773e0924f547ca32e02c138abec61f0c" translate="yes" xml:space="preserve">
          <source>In the case of the default &lt;a href=&quot;spi/filesystemprovider&quot;&gt;&lt;code&gt;provider&lt;/code&gt;&lt;/a&gt;, and a security manager is set, then the permission checks are performed using the path obtained by resolving the given relative path against the</source>
          <target state="translated">デフォルト&lt;a href=&quot;spi/filesystemprovider&quot;&gt; &lt;code&gt;provider&lt;/code&gt; &lt;/a&gt;場合で、セキュリティマネージャーが設定されている場合、権限チェックは、指定された相対パスを</target>
        </trans-unit>
        <trans-unit id="5968dc2de2ab512d950a835df9b47f509611629e" translate="yes" xml:space="preserve">
          <source>In the case of the default provider, and a security manager is installed, the security manager is invoked to check &lt;a href=&quot;../../lang/runtimepermission&quot;&gt;&lt;code&gt;RuntimePermission&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&quot;getFileStoreAttributes&quot;)&lt;/code&gt;. If denied, then no file stores are returned by the iterator. In addition, the security manager's &lt;a href=&quot;../../lang/securitymanager#checkRead(java.lang.String)&quot;&gt;&lt;code&gt;SecurityManager.checkRead(String)&lt;/code&gt;&lt;/a&gt; method is invoked to check read access to the file store's &lt;em&gt;top-most&lt;/em&gt; directory. If denied, the file store is not returned by the iterator. It is system dependent if the permission checks are done when the iterator is obtained or during iteration.</source>
          <target state="translated">In the case of the default provider, and a security manager is installed, the security manager is invoked to check &lt;a href=&quot;../../lang/runtimepermission&quot;&gt; &lt;code&gt;RuntimePermission&lt;/code&gt; &lt;/a&gt; &lt;code&gt;(&quot;getFileStoreAttributes&quot;)&lt;/code&gt; . If denied, then no file stores are returned by the iterator. In addition, the security manager's &lt;a href=&quot;../../lang/securitymanager#checkRead(java.lang.String)&quot;&gt; &lt;code&gt;SecurityManager.checkRead(String)&lt;/code&gt; &lt;/a&gt; method is invoked to check read access to the file store's &lt;em&gt;top-most&lt;/em&gt; directory. If denied, the file store is not returned by the iterator. It is system dependent if the permission checks are done when the iterator is obtained or during iteration.</target>
        </trans-unit>
        <trans-unit id="9d2512a124feacc9023efa7b4655feac56aa98d5" translate="yes" xml:space="preserve">
          <source>In the case of the default provider, and a security manager is installed, the security manager is invoked to check &lt;a href=&quot;../../lang/runtimepermission&quot;&gt;&lt;code&gt;RuntimePermission&lt;/code&gt;&lt;/a&gt;&lt;code&gt;(&quot;getFileStoreAttributes&quot;)&lt;/code&gt;. If denied, then no file stores are returned by the iterator. In addition, the security manager's &lt;a href=&quot;../../lang/securitymanager#checkRead-java.lang.String-&quot;&gt;&lt;code&gt;SecurityManager.checkRead(String)&lt;/code&gt;&lt;/a&gt; method is invoked to check read access to the file store's &lt;em&gt;top-most&lt;/em&gt; directory. If denied, the file store is not returned by the iterator. It is system dependent if the permission checks are done when the iterator is obtained or during iteration.</source>
          <target state="translated">デフォルトプロバイダーの場合、セキュリティマネージャーがインストールされていると、セキュリティマネージャーが呼び出され、&lt;a href=&quot;../../lang/runtimepermission&quot;&gt; &lt;code&gt;RuntimePermission&lt;/code&gt; &lt;/a&gt; &lt;code&gt;(&quot;getFileStoreAttributes&quot;)&lt;/code&gt; がチェックされます。拒否された場合、イテレータから返されるファイルストアはありません。さらに、セキュリティマネージャーの&lt;a href=&quot;../../lang/securitymanager#checkRead-java.lang.String-&quot;&gt; &lt;code&gt;SecurityManager.checkRead(String)&lt;/code&gt; &lt;/a&gt;メソッドが呼び出され、ファイルストアの&lt;em&gt;最上位&lt;/em&gt;ディレクトリへの読み取りアクセスがチェックされます。拒否された場合、ファイルストアはイテレータから返されません。イテレーターを取得するとき、または反復中に許可検査が行われるかどうかは、システムに依存します。</target>
        </trans-unit>
        <trans-unit id="ea663ac7ab663b6f6b3fe5151c0ca401f469a636" translate="yes" xml:space="preserve">
          <source>In the case of the default provider, identified by the URI scheme &quot;file&quot;, the given URI has a non-empty path component, and undefined query and fragment components. Whether the authority component may be present is platform specific. The returned &lt;code&gt;Path&lt;/code&gt; is associated with the &lt;a href=&quot;filesystems#getDefault()&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt; file system.</source>
          <target state="translated">In the case of the default provider, identified by the URI scheme &quot;file&quot;, the given URI has a non-empty path component, and undefined query and fragment components. Whether the authority component may be present is platform specific. The returned &lt;code&gt;Path&lt;/code&gt; is associated with the &lt;a href=&quot;filesystems#getDefault()&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt; file system.</target>
        </trans-unit>
        <trans-unit id="f4b5c76d8aaed40c475f832a5a54a3692fea75a4" translate="yes" xml:space="preserve">
          <source>In the case of the default provider, identified by the URI scheme &quot;file&quot;, the given URI has a non-empty path component, and undefined query and fragment components. Whether the authority component may be present is platform specific. The returned &lt;code&gt;Path&lt;/code&gt; is associated with the &lt;a href=&quot;filesystems#getDefault--&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt; file system.</source>
          <target state="translated">URIスキーム「ファイル」で識別されるデフォルトプロバイダーの場合、指定されたURIには空でないパスコンポーネント、未定義のクエリおよびフラグメントコンポーネントがあります。権限コンポーネントが存在するかどうかは、プラットフォーム固有です。返される &lt;code&gt;Path&lt;/code&gt; は、&lt;a href=&quot;filesystems#getDefault--&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt;ファイルシステムに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="99df03667bc9a4291eea54f38aa6ac17e53c146f" translate="yes" xml:space="preserve">
          <source>In the case of the default provider, path strings are parsed based on the definition of paths at the platform or virtual file system level. For example, an operating system may not allow specific characters to be present in a file name, but a specific underlying file store may impose different or additional restrictions on the set of legal characters.</source>
          <target state="translated">デフォルトのプロバイダの場合、パス文字列は、プラットフォームまたは仮想ファイルシステムレベルでのパスの定義に基づいて解析されます。例えば、オペレーティング・システムはファイル名に特定の文字が存在することを許可しないかもしれませんが、特定の基礎となるファイル・ストアは、合法的な文字のセットに異なる、または追加の制限を課すかもしれません。</target>
        </trans-unit>
        <trans-unit id="0e677b2f41e86e85d7c1fa6979a637c642297d74" translate="yes" xml:space="preserve">
          <source>In the case of the default provider, the URI is hierarchical with a &lt;a href=&quot;../../net/uri#getPath()&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt; component that is absolute. The query and fragment components are undefined. Whether the authority component is defined or not is implementation dependent. There is no guarantee that the &lt;code&gt;URI&lt;/code&gt; may be used to construct a &lt;a href=&quot;../../io/file&quot;&gt;&lt;code&gt;java.io.File&lt;/code&gt;&lt;/a&gt;. In particular, if this path represents a Universal Naming Convention (UNC) path, then the UNC server name may be encoded in the authority component of the resulting URI. In the case of the default provider, and the file exists, and it can be determined that the file is a directory, then the resulting &lt;code&gt;URI&lt;/code&gt; will end with a slash.</source>
          <target state="translated">In the case of the default provider, the URI is hierarchical with a &lt;a href=&quot;../../net/uri#getPath()&quot;&gt; &lt;code&gt;path&lt;/code&gt; &lt;/a&gt; component that is absolute. The query and fragment components are undefined. Whether the authority component is defined or not is implementation dependent. There is no guarantee that the &lt;code&gt;URI&lt;/code&gt; may be used to construct a &lt;a href=&quot;../../io/file&quot;&gt; &lt;code&gt;java.io.File&lt;/code&gt; &lt;/a&gt;. In particular, if this path represents a Universal Naming Convention (UNC) path, then the UNC server name may be encoded in the authority component of the resulting URI. In the case of the default provider, and the file exists, and it can be determined that the file is a directory, then the resulting &lt;code&gt;URI&lt;/code&gt; will end with a slash.</target>
        </trans-unit>
        <trans-unit id="a898e5309a9ca4566bd5a4562ddfa9fccc431258" translate="yes" xml:space="preserve">
          <source>In the case of the default provider, the URI is hierarchical with a &lt;a href=&quot;../../net/uri#getPath--&quot;&gt;&lt;code&gt;path&lt;/code&gt;&lt;/a&gt; component that is absolute. The query and fragment components are undefined. Whether the authority component is defined or not is implementation dependent. There is no guarantee that the &lt;code&gt;URI&lt;/code&gt; may be used to construct a &lt;a href=&quot;../../io/file&quot;&gt;&lt;code&gt;java.io.File&lt;/code&gt;&lt;/a&gt;. In particular, if this path represents a Universal Naming Convention (UNC) path, then the UNC server name may be encoded in the authority component of the resulting URI. In the case of the default provider, and the file exists, and it can be determined that the file is a directory, then the resulting &lt;code&gt;URI&lt;/code&gt; will end with a slash.</source>
          <target state="translated">デフォルトのプロバイダーの場合、URI は絶対的な&lt;a href=&quot;../../net/uri#getPath--&quot;&gt; &lt;code&gt;path&lt;/code&gt; &lt;/a&gt;コンポーネントを持つ階層型です。クエリとフラグメントのコンポーネントは未定義です。権限コンポーネントが定義されているかどうかは、実装に依存します。 &lt;code&gt;URI&lt;/code&gt; を使用して&lt;a href=&quot;../../io/file&quot;&gt; &lt;code&gt;java.io.File&lt;/code&gt; &lt;/a&gt;を構築できるという保証はありません。特に、このパスが汎用名前付け規則（UNC）パスを表す場合、UNCサーバー名は、結果のURIの機関コンポーネントでエンコードされる場合があります。デフォルトのプロバイダーの場合、ファイルが存在し、ファイルがディレクトリーであると判断できる場合、結果の &lt;code&gt;URI&lt;/code&gt; はスラッシュで終わります。</target>
        </trans-unit>
        <trans-unit id="4e1f93856d74c7fdd21e5edb4105cb0eea03c3e1" translate="yes" xml:space="preserve">
          <source>In the case of the default provider, the returned seekable byte channel is a &lt;a href=&quot;../channels/filechannel&quot;&gt;&lt;code&gt;FileChannel&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトのプロバイダーの場合、返されるシーク可能なバイトチャネルは&lt;a href=&quot;../channels/filechannel&quot;&gt; &lt;code&gt;FileChannel&lt;/code&gt; &lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="e6297028bcf457506860f8e5340cbccdf1009eaa" translate="yes" xml:space="preserve">
          <source>In the case of the default provider, this method returns the same separator as &lt;a href=&quot;../../io/file#separator&quot;&gt;&lt;code&gt;File.separator&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デフォルトのプロバイダーの場合、このメソッドは&lt;a href=&quot;../../io/file#separator&quot;&gt; &lt;code&gt;File.separator&lt;/code&gt; &lt;/a&gt;と同じセパレーターを返します。</target>
        </trans-unit>
        <trans-unit id="3d33ebb7e876e61c518f2ef8d424778898f27226" translate="yes" xml:space="preserve">
          <source>In the case that the variant contains one or more underscores ('_'), a sequence of bundle names generated by truncating the last underscore and the part following it is inserted after a candidate bundle name with the original variant. For example, for a locale with language &quot;en&quot;, script &quot;Latn, country &quot;US&quot; and variant &quot;WINDOWS_VISTA&quot;, and bundle base name &quot;MyResource&quot;, the list of candidate bundle names below is generated:</source>
          <target state="translated">バリアントが 1 つ以上のアンダースコア ('_')を含む場合、最後のアンダースコアとそれに続く部分を切り詰めることで生成された一連のバンドル名が、元のバリアントを持つ候補のバンドル名の後に挿入されます。例えば、言語が &quot;en&quot;、スクリプトが &quot;Latn&quot;、国名が &quot;US&quot;、バリアントが &quot;WINDOWS_VISTA&quot;、バンドルベース名が &quot;MyResource&quot; のロケールの場合、以下の候補バンドル名のリストが生成されます。</target>
        </trans-unit>
        <trans-unit id="97ac944d7ca320a7d3a94df81af470a08f017bde" translate="yes" xml:space="preserve">
          <source>In the case where ProcessHandles cannot be supported then the factory methods must consistently throw &lt;a href=&quot;unsupportedoperationexception&quot;&gt;&lt;code&gt;UnsupportedOperationException&lt;/code&gt;&lt;/a&gt;. The methods of this class throw &lt;a href=&quot;unsupportedoperationexception&quot;&gt;&lt;code&gt;UnsupportedOperationException&lt;/code&gt;&lt;/a&gt; if the operating system does not allow access to query or kill a process.</source>
          <target state="translated">In the case where ProcessHandles cannot be supported then the factory methods must consistently throw &lt;a href=&quot;unsupportedoperationexception&quot;&gt; &lt;code&gt;UnsupportedOperationException&lt;/code&gt; &lt;/a&gt;. The methods of this class throw &lt;a href=&quot;unsupportedoperationexception&quot;&gt; &lt;code&gt;UnsupportedOperationException&lt;/code&gt; &lt;/a&gt; if the operating system does not allow access to query or kill a process.</target>
        </trans-unit>
        <trans-unit id="fa5051ebc5f7be9551f7d184b62acf3110ac4cef" translate="yes" xml:space="preserve">
          <source>In the case where a new connection needs to be established, if the connection cannot be established within the given &lt;code&gt;
 duration&lt;/code&gt;, then &lt;a href=&quot;httpclient#send(java.net.http.HttpRequest,java.net.http.HttpResponse.BodyHandler)&quot;&gt;&lt;code&gt;HttpClient::send&lt;/code&gt;&lt;/a&gt; throws an &lt;a href=&quot;httpconnecttimeoutexception&quot;&gt;&lt;code&gt;HttpConnectTimeoutException&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;httpclient#sendAsync(java.net.http.HttpRequest,java.net.http.HttpResponse.BodyHandler)&quot;&gt;&lt;code&gt;HttpClient::sendAsync&lt;/code&gt;&lt;/a&gt; completes exceptionally with an &lt;code&gt;HttpConnectTimeoutException&lt;/code&gt;. If a new connection does not need to be established, for example if a connection can be reused from a previous request, then this timeout duration has no effect.</source>
          <target state="translated">In the case where a new connection needs to be established, if the connection cannot be established within the given &lt;code&gt; duration&lt;/code&gt; , then &lt;a href=&quot;httpclient#send(java.net.http.HttpRequest,java.net.http.HttpResponse.BodyHandler)&quot;&gt; &lt;code&gt;HttpClient::send&lt;/code&gt; &lt;/a&gt; throws an &lt;a href=&quot;httpconnecttimeoutexception&quot;&gt; &lt;code&gt;HttpConnectTimeoutException&lt;/code&gt; &lt;/a&gt;, or &lt;a href=&quot;httpclient#sendAsync(java.net.http.HttpRequest,java.net.http.HttpResponse.BodyHandler)&quot;&gt; &lt;code&gt;HttpClient::sendAsync&lt;/code&gt; &lt;/a&gt; completes exceptionally with an &lt;code&gt;HttpConnectTimeoutException&lt;/code&gt; . If a new connection does not need to be established, for example if a connection can be reused from a previous request, then this timeout duration has no effect.</target>
        </trans-unit>
        <trans-unit id="52c38dad2c1d9a6ad351c582c8369d290f1b4496" translate="yes" xml:space="preserve">
          <source>In the case where end of stream is reached before &lt;code&gt;len&lt;/code&gt; bytes have been read, then the actual number of bytes read will be returned. When this stream reaches end of stream, further invocations of this method will return zero.</source>
          <target state="translated">In the case where end of stream is reached before &lt;code&gt;len&lt;/code&gt; bytes have been read, then the actual number of bytes read will be returned. When this stream reaches end of stream, further invocations of this method will return zero.</target>
        </trans-unit>
        <trans-unit id="b7b93472fb0fb86fea81d8d8443ed8bdc46acd42" translate="yes" xml:space="preserve">
          <source>In the case where multiple LoginModules fail, this method propagates the exception raised by the first &lt;code&gt;LoginModule&lt;/code&gt; which failed.</source>
          <target state="translated">複数のLoginModuleが失敗した場合、このメソッドは、失敗した最初の &lt;code&gt;LoginModule&lt;/code&gt; によって発生した例外を伝達します。</target>
        </trans-unit>
        <trans-unit id="a70c45e6aeb095e66dfd74054e5938ceea08a232" translate="yes" xml:space="preserve">
          <source>In the common case, all of the pre-connection parameters and general request properties can be ignored: the pre-connection parameters and request properties default to sensible values. For most clients of this interface, there are only two interesting methods: &lt;code&gt;getInputStream&lt;/code&gt; and &lt;code&gt;getContent&lt;/code&gt;, which are mirrored in the &lt;code&gt;URL&lt;/code&gt; class by convenience methods.</source>
          <target state="translated">一般的なケースでは、接続前のパラメーターと一般的なリクエストプロパティはすべて無視できます。接続前のパラメーターとリクエストプロパティは、デフォルトで適切な値に設定されています。このインターフェイスのほとんどのクライアントには、2つの興味深いメソッド、 &lt;code&gt;getInputStream&lt;/code&gt; と &lt;code&gt;getContent&lt;/code&gt; しかありません。これらは、便利なメソッドによって &lt;code&gt;URL&lt;/code&gt; クラスにミラーリングされます。</target>
        </trans-unit>
        <trans-unit id="fc4e72373a72929421b52e76471660916eb25cad" translate="yes" xml:space="preserve">
          <source>In the context of &lt;a href=&quot;../../../annotation/processing/processingenvironment&quot;&gt;annotation processing&lt;/a&gt;, the guarantees for &quot;the same&quot; implementation must include contexts where the &lt;a href=&quot;../../../annotation/processing/package-summary&quot;&gt;API mediated&lt;/a&gt; side effects of &lt;a href=&quot;../../../annotation/processing/processor&quot;&gt;processors&lt;/a&gt; could be visible to each other, including successive annotation processing &lt;a href=&quot;../../../annotation/processing/roundenvironment&quot;&gt;rounds&lt;/a&gt;.</source>
          <target state="translated">文脈で&lt;a href=&quot;../../../annotation/processing/processingenvironment&quot;&gt;注釈処理&lt;/a&gt;、「同じ」実装のための保証はコンテキスト含まなければならない&lt;a href=&quot;../../../annotation/processing/package-summary&quot;&gt;API媒介性&lt;/a&gt;の副作用&lt;a href=&quot;../../../annotation/processing/processor&quot;&gt;プロセッサは、&lt;/a&gt;連続した注釈処理を含む相互に見えるかもしれない、&lt;a href=&quot;../../../annotation/processing/roundenvironment&quot;&gt;ラウンド&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="47f91444a15f2bda2fa6d35d205ab3bb0e17ca5f" translate="yes" xml:space="preserve">
          <source>In the context of a &lt;code&gt;StAXResult&lt;/code&gt;, it is not appropriate to explicitly set the system identifier.</source>
          <target state="translated">In the context of a &lt;code&gt;StAXResult&lt;/code&gt; , it is not appropriate to explicitly set the system identifier.</target>
        </trans-unit>
        <trans-unit id="bf720f95058f2decf42fefd32a1e2515dafa3d6f" translate="yes" xml:space="preserve">
          <source>In the context of a &lt;code&gt;StAXResult&lt;/code&gt;, it is not appropriate to explicitly set the system identifier. The &lt;code&gt;XMLEventWriter&lt;/code&gt; or &lt;code&gt;XMLStreamWriter&lt;/code&gt; used to construct this &lt;code&gt;StAXResult&lt;/code&gt; determines the system identifier of the XML result.</source>
          <target state="translated">In the context of a &lt;code&gt;StAXResult&lt;/code&gt; , it is not appropriate to explicitly set the system identifier. The &lt;code&gt;XMLEventWriter&lt;/code&gt; or &lt;code&gt;XMLStreamWriter&lt;/code&gt; used to construct this &lt;code&gt;StAXResult&lt;/code&gt; determines the system identifier of the XML result.</target>
        </trans-unit>
        <trans-unit id="d34a9a5234275a7027509815264f773e5a1e5697" translate="yes" xml:space="preserve">
          <source>In the context of a &lt;code&gt;StAXSource&lt;/code&gt;, it is not appropriate to explicitly set the system identifier.</source>
          <target state="translated">In the context of a &lt;code&gt;StAXSource&lt;/code&gt; , it is not appropriate to explicitly set the system identifier.</target>
        </trans-unit>
        <trans-unit id="7a373946bb662d5a2a82c9ba24e1f7f6ecff6794" translate="yes" xml:space="preserve">
          <source>In the context of a &lt;code&gt;StAXSource&lt;/code&gt;, it is not appropriate to explicitly set the system identifier. The &lt;code&gt;XMLStreamReader&lt;/code&gt; or &lt;code&gt;XMLEventReader&lt;/code&gt; used to construct this &lt;code&gt;StAXSource&lt;/code&gt; determines the system identifier of the XML source.</source>
          <target state="translated">In the context of a &lt;code&gt;StAXSource&lt;/code&gt; , it is not appropriate to explicitly set the system identifier. The &lt;code&gt;XMLStreamReader&lt;/code&gt; or &lt;code&gt;XMLEventReader&lt;/code&gt; used to construct this &lt;code&gt;StAXSource&lt;/code&gt; determines the system identifier of the XML source.</target>
        </trans-unit>
        <trans-unit id="b0fc226575948bc5d8749aeade7f2700d90dccef" translate="yes" xml:space="preserve">
          <source>In the default &lt;a href=&quot;threadpoolexecutor.abortpolicy&quot;&gt;&lt;code&gt;ThreadPoolExecutor.AbortPolicy&lt;/code&gt;&lt;/a&gt;, the handler throws a runtime &lt;a href=&quot;rejectedexecutionexception&quot;&gt;&lt;code&gt;RejectedExecutionException&lt;/code&gt;&lt;/a&gt; upon rejection.</source>
          <target state="translated">デフォルトの&lt;a href=&quot;threadpoolexecutor.abortpolicy&quot;&gt; &lt;code&gt;ThreadPoolExecutor.AbortPolicy&lt;/code&gt; &lt;/a&gt;では、ハンドラーは&lt;a href=&quot;rejectedexecutionexception&quot;&gt; &lt;code&gt;RejectedExecutionException&lt;/code&gt; &lt;/a&gt;時にランタイムRejectedExecutionExceptionをスローします。</target>
        </trans-unit>
        <trans-unit id="48bb0c8e4f3b335269acf6c1e788fce51afc4c47" translate="yes" xml:space="preserve">
          <source>In the default ISO calendar system, June 2012 would have the value &lt;code&gt;(2012 * 12 + 6 - 1)&lt;/code&gt;. This field is primarily for internal use.</source>
          <target state="translated">デフォルトのISOカレンダーシステムでは、2012年6月の値は &lt;code&gt;(2012 * 12 + 6 - 1)&lt;/code&gt; ます。このフィールドは主に内部で使用されます。</target>
        </trans-unit>
        <trans-unit id="e85a59438f2ed3bcea699be96233c620667aa495" translate="yes" xml:space="preserve">
          <source>In the default ISO calendar system, there are two eras defined, 'BCE' and 'CE'. The era 'CE' is the one currently in use and year-of-era runs from 1 to the maximum value. The era 'BCE' is the previous era, and the year-of-era runs backwards.</source>
          <target state="translated">デフォルトのISOカレンダーシステムでは、'BCE'と'CE'の2つの時代が定義されています。時代 'CE' は現在使用されているもので、年号は 1 から最大値までの間で実行されます。時代「BCE」は前の時代で、時代の年号は逆になります。</target>
        </trans-unit>
        <trans-unit id="0553d6dc2b136e33c3dc86748155cb284b375b0b" translate="yes" xml:space="preserve">
          <source>In the default ISO calendar system, there are two eras defined, 'BCE' and 'CE'. The era 'CE' is the one currently in use and year-of-era runs from 1 to the maximum value. The era 'BCE' is the previous era, and the year-of-era runs backwards. See &lt;a href=&quot;#YEAR_OF_ERA&quot;&gt;&lt;code&gt;YEAR_OF_ERA&lt;/code&gt;&lt;/a&gt; for a full example.</source>
          <target state="translated">In the default ISO calendar system, there are two eras defined, 'BCE' and 'CE'. The era 'CE' is the one currently in use and year-of-era runs from 1 to the maximum value. The era 'BCE' is the previous era, and the year-of-era runs backwards. See &lt;a href=&quot;#YEAR_OF_ERA&quot;&gt; &lt;code&gt;YEAR_OF_ERA&lt;/code&gt; &lt;/a&gt; for a full example.</target>
        </trans-unit>
        <trans-unit id="b2989432ae07e543d739ca5a5f8fcc5927ec8aa7" translate="yes" xml:space="preserve">
          <source>In the default ISO calendar system, there are two eras defined, 'BCE' and 'CE'. The era 'CE' is the one currently in use and year-of-era runs from 1 to the maximum value. The era 'BCE' is the previous era, and the year-of-era runs backwards. See &lt;a href=&quot;chronofield#YEAR_OF_ERA&quot;&gt;&lt;code&gt;YEAR_OF_ERA&lt;/code&gt;&lt;/a&gt; for a full example.</source>
          <target state="translated">デフォルトのISOカレンダーシステムでは、「BCE」と「CE」の2つの時代が定義されています。年代 'CE'は現在使用されている年代であり、年代は1から最大値までです。時代 'BCE'は前の時代であり、年号は逆算されます。完全な例については、&lt;a href=&quot;chronofield#YEAR_OF_ERA&quot;&gt; &lt;code&gt;YEAR_OF_ERA&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="bd780fa87d177f6d0024f4d49192abdd1c6c63cd" translate="yes" xml:space="preserve">
          <source>In the definitions below, an annotation</source>
          <target state="translated">以下の定義では、アノテーション</target>
        </trans-unit>
        <trans-unit id="09bc6c63a67020bf7c2978262bc3265e74344acb" translate="yes" xml:space="preserve">
          <source>In the detailed explanations below, if &quot;&lt;code&gt;a&lt;/code&gt;&quot; represents an instance of document data, then the result of processing the data in document &quot;&lt;code&gt;a&lt;/code&gt;&quot; is a sequence of media sheets represented by &quot;&lt;code&gt;a(*)&lt;/code&gt;&quot;.</source>
          <target state="translated">以下の詳細な説明で、「 &lt;code&gt;a&lt;/code&gt; 」がドキュメントデータのインスタンスを表す場合、ドキュメント「 &lt;code&gt;a&lt;/code&gt; 」のデータを処理した結果は、「 &lt;code&gt;a(*)&lt;/code&gt; 」で表されるメディアシートのシーケンスになります。</target>
        </trans-unit>
        <trans-unit id="b0f79dec8b3ab7b6c24fbe11e1ac1e7891ecced8" translate="yes" xml:space="preserve">
          <source>In the event that multiple package defaults apply to a given class, the package default pertaining to the most specific package takes precedence over the others. For example, if &lt;code&gt;javax.lang&lt;/code&gt; and &lt;code&gt;javax.lang.reflect&lt;/code&gt; both have package defaults associated with them, the latter package default applies to classes in &lt;code&gt;javax.lang.reflect&lt;/code&gt;.</source>
          <target state="translated">特定のクラスに複数のパッケージデフォルトが適用される場合、最も具体的なパッケージに関連するパッケージデフォルトが他のパッケージよりも優先されます。たとえば、 &lt;code&gt;javax.lang&lt;/code&gt; と &lt;code&gt;javax.lang.reflect&lt;/code&gt; の両方に関連付けられたパッケージのデフォルトがある場合、後者のパッケージのデフォルトは &lt;code&gt;javax.lang.reflect&lt;/code&gt; のクラスに適用されます。</target>
        </trans-unit>
        <trans-unit id="9e8bb46a346e88375edb24d85374a9154807145b" translate="yes" xml:space="preserve">
          <source>In the event that the plugin is provided as part of a named module, that module must export the package containing the implementation class to the</source>
          <target state="translated">プラグインが名前付きモジュールの一部として提供される場合、そのモジュールは実装クラスを含むパッケージを</target>
        </trans-unit>
        <trans-unit id="be93f24cde87a11bdd29fa572b15cfd5ab339a32" translate="yes" xml:space="preserve">
          <source>In the event that the user does not set the first keyframe value equal to 0 and/or the last keyframe value equal to 1, keyframes will be created at these positions and the first and last colors will be replicated there. So, if a user specifies the following arrays to construct a gradient:</source>
          <target state="translated">ユーザーが最初のキーフレームの値を0に設定しなかったり、最後のキーフレームの値を1に設定しなかった場合、これらの位置にキーフレームが作成され、最初と最後の色がそこに複製されます。そのため、ユーザーがグラデーションを構築するために以下の配列を指定したとします。</target>
        </trans-unit>
        <trans-unit id="00fd509d5a993973e1038d029ec2399af029eb1f" translate="yes" xml:space="preserve">
          <source>In the example above, we initialize a &lt;code&gt;Range&lt;/code&gt; object which implements the &lt;code&gt;Predicate&lt;/code&gt; interface. This object expresses the following constraints: All rows outputted or modified from this &lt;code&gt;FilteredRowSet&lt;/code&gt; object must fall between the values 'Alpha' and 'Bravo' both values inclusive, in the column 'columnName'. If a filter is applied to a &lt;code&gt;FilteredRowSet&lt;/code&gt; object that contains no data that falls within the range of the filter, no rows are returned.</source>
          <target state="translated">In the example above, we initialize a &lt;code&gt;Range&lt;/code&gt; object which implements the &lt;code&gt;Predicate&lt;/code&gt; interface. This object expresses the following constraints: All rows outputted or modified from this &lt;code&gt;FilteredRowSet&lt;/code&gt; object must fall between the values 'Alpha' and 'Bravo' both values inclusive, in the column 'columnName'. If a filter is applied to a &lt;code&gt;FilteredRowSet&lt;/code&gt; object that contains no data that falls within the range of the filter, no rows are returned.</target>
        </trans-unit>
        <trans-unit id="d1500759c4854f4c300acd35e9ef7742f5686f96" translate="yes" xml:space="preserve">
          <source>In the example below, the reference &lt;code&gt;CachedRowSetImpl&lt;/code&gt; implementation reconfigures its current &lt;code&gt;SyncProvider&lt;/code&gt; object by calling the &lt;code&gt;setSyncProvider&lt;/code&gt; method.</source>
          <target state="translated">In the example below, the reference &lt;code&gt;CachedRowSetImpl&lt;/code&gt; implementation reconfigures its current &lt;code&gt;SyncProvider&lt;/code&gt; object by calling the &lt;code&gt;setSyncProvider&lt;/code&gt; method.</target>
        </trans-unit>
        <trans-unit id="05277234739d6763969157714d95b5b473c13a38" translate="yes" xml:space="preserve">
          <source>In the example, if the content of a document is the sequence &quot;The quick brown fox,&quot; as shown in the preceding diagram, the location just before the word &quot;The&quot; is 0, and the location after the word &quot;The&quot; and before the whitespace that follows it is 3. The entire sequence of characters in the sequence &quot;The&quot; is called a &lt;em&gt;range&lt;/em&gt;.</source>
          <target state="translated">In the example, if the content of a document is the sequence &quot;The quick brown fox,&quot; as shown in the preceding diagram, the location just before the word &quot;The&quot; is 0, and the location after the word &quot;The&quot; and before the whitespace that follows it is 3. The entire sequence of characters in the sequence &quot;The&quot; is called a &lt;em&gt;range&lt;/em&gt;.</target>
        </trans-unit>
        <trans-unit id="b8e11d48b9526227594c6c159985f8ef09465796" translate="yes" xml:space="preserve">
          <source>In the figure, the first index (0) corresponds to the first column, the second index (1) to the second column, and so on. The first column's position starts at 0, and the column occupies &lt;em&gt;size&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt; pixels, where &lt;em&gt;size&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt; is the value returned by &lt;code&gt;getSize(0)&lt;/code&gt;. Thus, the first column ends at &lt;em&gt;size&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt; - 1. The second column then begins at the position &lt;em&gt;size&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt; and occupies &lt;em&gt;size&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt; (&lt;code&gt;getSize(1)&lt;/code&gt;) pixels.</source>
          <target state="translated">In the figure, the first index (0) corresponds to the first column, the second index (1) to the second column, and so on. The first column's position starts at 0, and the column occupies &lt;em&gt;size&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt; pixels, where &lt;em&gt;size&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt; is the value returned by &lt;code&gt;getSize(0)&lt;/code&gt; . Thus, the first column ends at &lt;em&gt;size&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt; - 1. The second column then begins at the position &lt;em&gt;size&lt;sub&gt;0&lt;/sub&gt;&lt;/em&gt; and occupies &lt;em&gt;size&lt;sub&gt;1&lt;/sub&gt;&lt;/em&gt; ( &lt;code&gt;getSize(1)&lt;/code&gt; ) pixels.</target>
        </trans-unit>
        <trans-unit id="497f116b21347428eb7a6e8312ca399ca290624a" translate="yes" xml:space="preserve">
          <source>In the final case, it is exactly as if the target method handle were temporarily adapted with a &lt;a href=&quot;#asCollector(java.lang.Class,int)&quot;&gt;fixed arity collector&lt;/a&gt; to the arity required by the caller type. (As with &lt;code&gt;asCollector&lt;/code&gt;, if the array length is zero, a shared constant may be used instead of a new array. If the implied call to &lt;code&gt;asCollector&lt;/code&gt; would throw an &lt;code&gt;IllegalArgumentException&lt;/code&gt; or &lt;code&gt;WrongMethodTypeException&lt;/code&gt;, the call to the variable arity adapter must throw &lt;code&gt;WrongMethodTypeException&lt;/code&gt;.)</source>
          <target state="translated">In the final case, it is exactly as if the target method handle were temporarily adapted with a &lt;a href=&quot;#asCollector(java.lang.Class,int)&quot;&gt;fixed arity collector&lt;/a&gt; to the arity required by the caller type. (As with &lt;code&gt;asCollector&lt;/code&gt; , if the array length is zero, a shared constant may be used instead of a new array. If the implied call to &lt;code&gt;asCollector&lt;/code&gt; would throw an &lt;code&gt;IllegalArgumentException&lt;/code&gt; or &lt;code&gt;WrongMethodTypeException&lt;/code&gt; , the call to the variable arity adapter must throw &lt;code&gt;WrongMethodTypeException&lt;/code&gt; .)</target>
        </trans-unit>
        <trans-unit id="6debf46fe39f4012b9544dd84da9e6f547b36977" translate="yes" xml:space="preserve">
          <source>In the final case, it is exactly as if the target method handle were temporarily adapted with a &lt;a href=&quot;methodhandle#asCollector-java.lang.Class-int-&quot;&gt;fixed arity collector&lt;/a&gt; to the arity required by the caller type. (As with &lt;code&gt;asCollector&lt;/code&gt;, if the array length is zero, a shared constant may be used instead of a new array. If the implied call to &lt;code&gt;asCollector&lt;/code&gt; would throw an &lt;code&gt;IllegalArgumentException&lt;/code&gt; or &lt;code&gt;WrongMethodTypeException&lt;/code&gt;, the call to the variable arity adapter must throw &lt;code&gt;WrongMethodTypeException&lt;/code&gt;.)</source>
          <target state="translated">最後のケースでは、ターゲットメソッドハンドルが、&lt;a href=&quot;methodhandle#asCollector-java.lang.Class-int-&quot;&gt;固定アリティコレクターで&lt;/a&gt;呼び出し元のタイプに必要なアリティに一時的に適応された場合とまったく同じです。 （と同様 &lt;code&gt;asCollector&lt;/code&gt; 配列の長さがゼロの場合、共有定数は、新しいアレイの代わりに使用することができる。暗黙に呼び出し場合 &lt;code&gt;asCollector&lt;/code&gt; がスローする &lt;code&gt;IllegalArgumentException&lt;/code&gt; または &lt;code&gt;WrongMethodTypeException&lt;/code&gt; 、スローしなければならない変数アリティアダプタへの呼び出し &lt;code&gt;WrongMethodTypeException&lt;/code&gt; します。）</target>
        </trans-unit>
        <trans-unit id="0b39f33db050daf5a8b13214fd8a45e5e32089c0" translate="yes" xml:space="preserve">
          <source>In the first case the global color table in the stream metadata is used, in the second the local color table in the image metadata is used, and in the third a global color table is created from the ColorModel or SampleModel of the (first) image.</source>
          <target state="translated">第一の場合はストリームメタデータのグローバルカラーテーブルが使用され、第二の場合は画像メタデータのローカルカラーテーブルが使用され、第三の場合は(第一の)画像のColorModelまたはSampleModelからグローバルカラーテーブルが作成されます。</target>
        </trans-unit>
        <trans-unit id="13e8476783a96421ed140a44cbc492ba23ff9c6b" translate="yes" xml:space="preserve">
          <source>In the first form, the methods defined by the &lt;a href=&quot;../../util/concurrent/future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; interface may be used to check if the operation has completed, wait for its completion, and to retrieve the result. In the second form, a &lt;a href=&quot;completionhandler&quot;&gt;&lt;code&gt;CompletionHandler&lt;/code&gt;&lt;/a&gt; is invoked to consume the result of the I/O operation when it completes or fails.</source>
          <target state="translated">最初の形式では、&lt;a href=&quot;../../util/concurrent/future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;インターフェースによって定義されたメソッドを使用して、操作が完了したかどうかを確認し、その完了を待機して、結果を取得できます。2番目の形式では、完了または失敗したときにI / O操作の結果を消費するために&lt;a href=&quot;completionhandler&quot;&gt; &lt;code&gt;CompletionHandler&lt;/code&gt; &lt;/a&gt;が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3f3a74e19b90c7de60244c50e295be122becdcae" translate="yes" xml:space="preserve">
          <source>In the following code fragment, the table &lt;code&gt;EMPLOYEES&lt;/code&gt;, whose match column is set to the first column (&lt;code&gt;EMP_ID&lt;/code&gt;), is added to the &lt;code&gt;JoinRowSet&lt;/code&gt; object</source>
          <target state="translated">In the following code fragment, the table &lt;code&gt;EMPLOYEES&lt;/code&gt; , whose match column is set to the first column ( &lt;code&gt;EMP_ID&lt;/code&gt; ), is added to the &lt;code&gt;JoinRowSet&lt;/code&gt; object</target>
        </trans-unit>
        <trans-unit id="ae14c7e2717e4399f35c3ed2c4bc1bb7e0a3378a" translate="yes" xml:space="preserve">
          <source>In the following example of setting a parameter, &lt;code&gt;con&lt;/code&gt; represents an active connection:</source>
          <target state="translated">In the following example of setting a parameter, &lt;code&gt;con&lt;/code&gt; represents an active connection:</target>
        </trans-unit>
        <trans-unit id="8831d20c4571848af5234f8bd06f8194e229c8bb" translate="yes" xml:space="preserve">
          <source>In the following sample:</source>
          <target state="translated">以下のサンプルでは</target>
        </trans-unit>
        <trans-unit id="d4cbe4ad6c13a6890ddfa89884e27c69d70708df" translate="yes" xml:space="preserve">
          <source>In the foregoing description, the notation &lt;code&gt;sgn(&lt;/code&gt;</source>
          <target state="translated">前述の説明では、 &lt;code&gt;sgn(&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="956b372c4bfd9617b01cec8388ef9cee7031a6e7" translate="yes" xml:space="preserve">
          <source>In the implementation then observability of modules may depend on referential integrity or other checks that ensure different builds of tightly coupled modules or modules for specific operating systems or architectures are not combined in the same configuration.</source>
          <target state="translated">実装では、モジュールの観測性は、厳密に結合されたモジュールや特定のオペレーティングシステムやアーキテクチャ用のモジュールの異なるビルドが同じ構成で結合されないことを保証する参照整合性や他のチェックに依存しているかもしれません。</target>
        </trans-unit>
        <trans-unit id="4c882c4c59e8bbed8641ffa48e67f786f75689b9" translate="yes" xml:space="preserve">
          <source>In the map, a key represents a language range whereas a value is a list of equivalents of it. &lt;code&gt;'*'&lt;/code&gt; cannot be used in the map. Each equivalent language range has the same weight value as its original language range.</source>
          <target state="translated">マップでは、キーは言語の範囲を表し、値はそれに相当するもののリストです。 &lt;code&gt;'*'&lt;/code&gt; はマップでは使用できません。同等の各言語範囲には、元の言語範囲と同じ重み値があります。</target>
        </trans-unit>
        <trans-unit id="c8ff356c3bba211a0f9b734c9401b44d64508002" translate="yes" xml:space="preserve">
          <source>In the most typical usages, a fork-join pair act like a call (fork) and return (join) from a parallel recursive function. As is the case with other forms of recursive calls, returns (joins) should be performed innermost-first. For example, &lt;code&gt;a.fork();
 b.fork(); b.join(); a.join();&lt;/code&gt; is likely to be substantially more efficient than joining &lt;code&gt;a&lt;/code&gt; before &lt;code&gt;b&lt;/code&gt;.</source>
          <target state="translated">最も一般的な使用法では、fork-joinペアは、並列再帰関数からの呼び出し（fork）とreturn（join）のように機能します。他の形式の再帰呼び出しの場合と同様に、戻り（結合）は最も内側から実行する必要があります。たとえば、 &lt;code&gt;a.fork(); b.fork(); b.join(); a.join();&lt;/code&gt; &lt;code&gt;b&lt;/code&gt; &lt;code&gt;a&lt;/code&gt; 前にaに参加するよりも実質的に効率的です。</target>
        </trans-unit>
        <trans-unit id="45803657c4f2b399c96bbb895ea5fcbc0d9cb2b3" translate="yes" xml:space="preserve">
          <source>In the picture, &lt;code&gt;&quot;Green&quot;&lt;/code&gt; is the current choice. Pushing the mouse button down on the object causes a menu to appear with the current choice highlighted.</source>
          <target state="translated">In the picture, &lt;code&gt;&quot;Green&quot;&lt;/code&gt; is the current choice. Pushing the mouse button down on the object causes a menu to appear with the current choice highlighted.</target>
        </trans-unit>
        <trans-unit id="f8c3f78d62dea2ab9ca93523050a46d412fcf7d2" translate="yes" xml:space="preserve">
          <source>In the preceding line of code, the column name designates the column in the &lt;code&gt;RowSet&lt;/code&gt; object that is to be set with the given value. The column number can also be used to designate the column.</source>
          <target state="translated">In the preceding line of code, the column name designates the column in the &lt;code&gt;RowSet&lt;/code&gt; object that is to be set with the given value. The column number can also be used to designate the column.</target>
        </trans-unit>
        <trans-unit id="772b0f71c73902deebe22dad6acf14257c43a016" translate="yes" xml:space="preserve">
          <source>In the previous example,</source>
          <target state="translated">先ほどの例では</target>
        </trans-unit>
        <trans-unit id="4b33ded736c76e6c5dfdda5c7c3b03fb8e08b842" translate="yes" xml:space="preserve">
          <source>In the reference implementation an &lt;code&gt;
 IntersectionType&lt;/code&gt; is used to model the explicit target type of a cast expression.</source>
          <target state="translated">In the reference implementation an &lt;code&gt; IntersectionType&lt;/code&gt; is used to model the explicit target type of a cast expression.</target>
        </trans-unit>
        <trans-unit id="ce91faf03879cc9864f989165091644d68a0db7f" translate="yes" xml:space="preserve">
          <source>In the reference implementation, BigInteger constructors and operations throw &lt;code&gt;ArithmeticException&lt;/code&gt; when the result is out of the supported range of -2&lt;sup&gt;&lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;&lt;/sup&gt; (exclusive) to +2&lt;sup&gt;&lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;&lt;/sup&gt; (exclusive).</source>
          <target state="translated">In the reference implementation, BigInteger constructors and operations throw &lt;code&gt;ArithmeticException&lt;/code&gt; when the result is out of the supported range of -2&lt;sup&gt; &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; &lt;/sup&gt; (exclusive) to +2&lt;sup&gt; &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; &lt;/sup&gt; (exclusive).</target>
        </trans-unit>
        <trans-unit id="06d1b85cb56fa3378ec39849f8809455d856b825" translate="yes" xml:space="preserve">
          <source>In the reference implementation, if the annotation processing tool is processing a single module</source>
          <target state="translated">参照実施形態では、アノテーション処理ツールが単一のモジュールを処理している場合</target>
        </trans-unit>
        <trans-unit id="4124b8dc169b038e575762eafe60863f09ee476b" translate="yes" xml:space="preserve">
          <source>In the resolving phase of parsing, a date can be created from a Julian Day field. In &lt;a href=&quot;../format/resolverstyle#STRICT&quot;&gt;strict mode&lt;/a&gt; and &lt;a href=&quot;../format/resolverstyle#SMART&quot;&gt;smart mode&lt;/a&gt; the Julian Day value is validated against the range of valid values. In &lt;a href=&quot;../format/resolverstyle#LENIENT&quot;&gt;lenient mode&lt;/a&gt; no validation occurs.</source>
          <target state="translated">解析の解決フェーズでは、ユリウス日フィールドから日付を作成できます。で&lt;a href=&quot;../format/resolverstyle#STRICT&quot;&gt;strictモード&lt;/a&gt;と&lt;a href=&quot;../format/resolverstyle#SMART&quot;&gt;スマートモード&lt;/a&gt;ユリウス日の値が有効な値の範囲に対して検証されます。で&lt;a href=&quot;../format/resolverstyle#LENIENT&quot;&gt;緩いモード&lt;/a&gt;検証は行われません。</target>
        </trans-unit>
        <trans-unit id="a2a922c0ee008a9be6c940866c2a10fbd2cdf2cd" translate="yes" xml:space="preserve">
          <source>In the resolving phase of parsing, a date can be created from a Modified Julian Day field. In &lt;a href=&quot;../format/resolverstyle#STRICT&quot;&gt;strict mode&lt;/a&gt; and &lt;a href=&quot;../format/resolverstyle#SMART&quot;&gt;smart mode&lt;/a&gt; the Modified Julian Day value is validated against the range of valid values. In &lt;a href=&quot;../format/resolverstyle#LENIENT&quot;&gt;lenient mode&lt;/a&gt; no validation occurs.</source>
          <target state="translated">解析の解決フェーズでは、修正ユリウス日フィールドから日付を作成できます。で&lt;a href=&quot;../format/resolverstyle#STRICT&quot;&gt;strictモード&lt;/a&gt;と&lt;a href=&quot;../format/resolverstyle#SMART&quot;&gt;スマートモード&lt;/a&gt;修正ユリウス日の値が有効な値の範囲に対して検証されます。で&lt;a href=&quot;../format/resolverstyle#LENIENT&quot;&gt;緩いモード&lt;/a&gt;検証は行われません。</target>
        </trans-unit>
        <trans-unit id="f6f852fbde5cc2ca88d160cde722d602e256ed36" translate="yes" xml:space="preserve">
          <source>In the resolving phase of parsing, a date can be created from a Rata Die field. In &lt;a href=&quot;../format/resolverstyle#STRICT&quot;&gt;strict mode&lt;/a&gt; and &lt;a href=&quot;../format/resolverstyle#SMART&quot;&gt;smart mode&lt;/a&gt; the Rata Die value is validated against the range of valid values. In &lt;a href=&quot;../format/resolverstyle#LENIENT&quot;&gt;lenient mode&lt;/a&gt; no validation occurs.</source>
          <target state="translated">解析の解決フェーズでは、日付はRata Dieフィールドから作成できます。で&lt;a href=&quot;../format/resolverstyle#STRICT&quot;&gt;strictモード&lt;/a&gt;と&lt;a href=&quot;../format/resolverstyle#SMART&quot;&gt;スマートモード&lt;/a&gt;ラタダイ値が有効な値の範囲に対して検証されます。で&lt;a href=&quot;../format/resolverstyle#LENIENT&quot;&gt;緩いモード&lt;/a&gt;検証は行われません。</target>
        </trans-unit>
        <trans-unit id="5b20abaab49f8da86e12af6dbc29b49308c16819" translate="yes" xml:space="preserve">
          <source>In the resolving phase of parsing, a date can be created from a week-based-year, week-of-week-based-year and day-of-week.</source>
          <target state="translated">解析の解決段階では、週ベースの年、週ベースの年、曜日から日付を作成することができます。</target>
        </trans-unit>
        <trans-unit id="f88712c44d91044e35e47c8369d89d13d50c4551" translate="yes" xml:space="preserve">
          <source>In the resolving phase of parsing, a date can be created from a week-based-year, week-of-week-based-year and day-of-week. See &lt;a href=&quot;#WEEK_OF_WEEK_BASED_YEAR&quot;&gt;&lt;code&gt;WEEK_OF_WEEK_BASED_YEAR&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">In the resolving phase of parsing, a date can be created from a week-based-year, week-of-week-based-year and day-of-week. See &lt;a href=&quot;#WEEK_OF_WEEK_BASED_YEAR&quot;&gt; &lt;code&gt;WEEK_OF_WEEK_BASED_YEAR&lt;/code&gt; &lt;/a&gt; for details.</target>
        </trans-unit>
        <trans-unit id="bdf7403d000aaea210215adeeb6a46be01f8d76f" translate="yes" xml:space="preserve">
          <source>In the resolving phase of parsing, a date can be created from a week-based-year, week-of-week-based-year and day-of-week. See &lt;a href=&quot;isofields#WEEK_OF_WEEK_BASED_YEAR&quot;&gt;&lt;code&gt;WEEK_OF_WEEK_BASED_YEAR&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">解析の解決フェーズでは、週ベースの年、週ベースの年、および曜日から日付を作成できます。詳細については、&lt;a href=&quot;isofields#WEEK_OF_WEEK_BASED_YEAR&quot;&gt; &lt;code&gt;WEEK_OF_WEEK_BASED_YEAR&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="84410ab58516150fbc8db498e561458f97766283" translate="yes" xml:space="preserve">
          <source>In the resolving phase of parsing, a date can be created from a week-based-year, week-of-year and day-of-week.</source>
          <target state="translated">解析の解決段階では、週を基準とした年、週を基準とした年、週を基準とした曜日から日付を作成することができます。</target>
        </trans-unit>
        <trans-unit id="b39a2e6ee173bfc886b3404b2577117e26d1cf6d" translate="yes" xml:space="preserve">
          <source>In the resolving phase of parsing, a date can be created from a year, quarter-of-year and day-of-quarter.</source>
          <target state="translated">解析の解決段階では、年、四半期、曜日から日付を作成することができます。</target>
        </trans-unit>
        <trans-unit id="9b70403fa838291aec2345c0de44ebd60b6595b8" translate="yes" xml:space="preserve">
          <source>In the resolving phase of parsing, a date can be created from a year, quarter-of-year and day-of-quarter. See &lt;a href=&quot;#DAY_OF_QUARTER&quot;&gt;&lt;code&gt;DAY_OF_QUARTER&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">In the resolving phase of parsing, a date can be created from a year, quarter-of-year and day-of-quarter. See &lt;a href=&quot;#DAY_OF_QUARTER&quot;&gt; &lt;code&gt;DAY_OF_QUARTER&lt;/code&gt; &lt;/a&gt; for details.</target>
        </trans-unit>
        <trans-unit id="9211a4f83ceedceb836e18a497bc19b7625f3563" translate="yes" xml:space="preserve">
          <source>In the resolving phase of parsing, a date can be created from a year, quarter-of-year and day-of-quarter. See &lt;a href=&quot;isofields#DAY_OF_QUARTER&quot;&gt;&lt;code&gt;DAY_OF_QUARTER&lt;/code&gt;&lt;/a&gt; for details.</source>
          <target state="translated">解析の解決フェーズでは、年、四半期、および曜日から日付を作成できます。詳細については、&lt;a href=&quot;isofields#DAY_OF_QUARTER&quot;&gt; &lt;code&gt;DAY_OF_QUARTER&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="1e5f25d0d54f0550fbf9d2e181359a8968474730" translate="yes" xml:space="preserve">
          <source>In the resolving phase of parsing, a date can be created from a year, week-of-month, month-of-year and day-of-week.</source>
          <target state="translated">解析の解決段階では、年、週、月、月、曜日から日付を作成することができます。</target>
        </trans-unit>
        <trans-unit id="75940fac89a1739add9ac1cc303e4379ce1aa35b" translate="yes" xml:space="preserve">
          <source>In the resolving phase of parsing, a date can be created from a year, week-of-year and day-of-week.</source>
          <target state="translated">解析の解決段階では、年、週、曜日から日付を作成することができます。</target>
        </trans-unit>
        <trans-unit id="d796a10d2d6aedb2663bb96172f9692e2b93290a" translate="yes" xml:space="preserve">
          <source>In the resolving phase of parsing, a localized day-of-week will be converted to a standardized &lt;code&gt;ChronoField&lt;/code&gt; day-of-week. The day-of-week must be in the valid range 1 to 7. Other fields in this class build dates using the standardized day-of-week.</source>
          <target state="translated">解析の解決フェーズでは、ローカライズされた曜日が標準化された &lt;code&gt;ChronoField&lt;/code&gt; の曜日に変換されます。曜日は有効な範囲1〜7である必要があります。このクラスの他のフィールドは、標準化された曜日を使用して日付を作成します。</target>
        </trans-unit>
        <trans-unit id="390685e2818a0e35011dcc474219688cf97611cb" translate="yes" xml:space="preserve">
          <source>In the retransform and redefine cases, the transformer must support the redefinition semantics: if a class that the transformer changed during initial definition is later retransformed or redefined, the transformer must insure that the second class output class file is a legal redefinition of the first output class file.</source>
          <target state="translated">再変換と再定義のケースでは、トランスフォーマは再定義セマンティクスをサポートしていなければなりません。</target>
        </trans-unit>
        <trans-unit id="99e95997b1b0be07d0f19e0a7444a7772f6d9830" translate="yes" xml:space="preserve">
          <source>In the same order as they are enqueued.</source>
          <target state="translated">キューに入っている順番と同じです。</target>
        </trans-unit>
        <trans-unit id="5e4545213a608c25290bf3b4b840211fb6076c19" translate="yes" xml:space="preserve">
          <source>In the second example, the function returns a different subscriber depending on the status code.</source>
          <target state="translated">2 番目の例では、この関数はステータスコードに応じて異なる加入者を返します。</target>
        </trans-unit>
        <trans-unit id="db383673567be7d2ec797e169698a7aca3ed907b" translate="yes" xml:space="preserve">
          <source>In the second phase, if the LoginContext's overall authentication succeeded (the relevant REQUIRED, REQUISITE, SUFFICIENT and OPTIONAL LoginModules succeeded), then the &lt;code&gt;commit&lt;/code&gt; method for the &lt;code&gt;LoginModule&lt;/code&gt; gets invoked. The &lt;code&gt;commit&lt;/code&gt; method for a &lt;code&gt;LoginModule&lt;/code&gt; checks its privately saved state to see if its own authentication succeeded. If the overall &lt;code&gt;LoginContext&lt;/code&gt; authentication succeeded and the LoginModule's own authentication succeeded, then the &lt;code&gt;commit&lt;/code&gt; method associates the relevant Principals (authenticated identities) and Credentials (authentication data such as cryptographic keys) with the &lt;code&gt;Subject&lt;/code&gt; located within the &lt;code&gt;LoginModule&lt;/code&gt;.</source>
          <target state="translated">LoginContextの認証全体が成功した場合には、第2段階では、（関連するREQUIRED、REQUISITEを、十分かつOPTIONALの各LoginModuleが成功した）、そして &lt;code&gt;commit&lt;/code&gt; する方法 &lt;code&gt;LoginModule&lt;/code&gt; 呼び出されます。 &lt;code&gt;LoginModule&lt;/code&gt; の &lt;code&gt;commit&lt;/code&gt; メソッドは、プライベートに保存された状態をチェックして、独自の認証が成功したかどうかを確認します。 &lt;code&gt;LoginContext&lt;/code&gt; 認証全体が成功し、LoginModule自体の認証が成功した場合、 &lt;code&gt;commit&lt;/code&gt; メソッドは、関連するプリンシパル（認証されたID）と資格情報（暗号鍵などの認証データ）を &lt;code&gt;LoginModule&lt;/code&gt; 内にある &lt;code&gt;Subject&lt;/code&gt; に関連付けます。</target>
        </trans-unit>
        <trans-unit id="ff4de39ad98bfbe48859fb2eccbe9cf7995269de" translate="yes" xml:space="preserve">
          <source>In the simplest and most typical usage, the value of the &lt;code&gt;type&lt;/code&gt; parameter will simply be the class or interface directly enclosing &lt;code&gt;overrider&lt;/code&gt; (the possibly-overriding method). For example, suppose &lt;code&gt;m1&lt;/code&gt; represents the method &lt;code&gt;String.hashCode&lt;/code&gt; and &lt;code&gt;m2&lt;/code&gt; represents &lt;code&gt;
 Object.hashCode&lt;/code&gt;. We can then ask whether &lt;code&gt;m1&lt;/code&gt; overrides &lt;code&gt;m2&lt;/code&gt; within the class &lt;code&gt;String&lt;/code&gt; (it does):</source>
          <target state="translated">In the simplest and most typical usage, the value of the &lt;code&gt;type&lt;/code&gt; parameter will simply be the class or interface directly enclosing &lt;code&gt;overrider&lt;/code&gt; (the possibly-overriding method). For example, suppose &lt;code&gt;m1&lt;/code&gt; represents the method &lt;code&gt;String.hashCode&lt;/code&gt; and &lt;code&gt;m2&lt;/code&gt; represents &lt;code&gt; Object.hashCode&lt;/code&gt; . We can then ask whether &lt;code&gt;m1&lt;/code&gt; overrides &lt;code&gt;m2&lt;/code&gt; within the class &lt;code&gt;String&lt;/code&gt; (it does):</target>
        </trans-unit>
        <trans-unit id="57d427b7244122df77daa4831775224b6dd479a3" translate="yes" xml:space="preserve">
          <source>In the simplest and most typical usage, the value of the &lt;code&gt;type&lt;/code&gt; parameter will simply be the class or interface directly enclosing &lt;code&gt;overrider&lt;/code&gt; (the possibly-overriding method). For example, suppose &lt;code&gt;m1&lt;/code&gt; represents the method &lt;code&gt;String.hashCode&lt;/code&gt; and &lt;code&gt;m2&lt;/code&gt; represents &lt;code&gt;Object.hashCode&lt;/code&gt;. We can then ask whether &lt;code&gt;m1&lt;/code&gt; overrides &lt;code&gt;m2&lt;/code&gt; within the class &lt;code&gt;String&lt;/code&gt; (it does):</source>
          <target state="translated">最も単純で最も一般的な使用法では、 &lt;code&gt;type&lt;/code&gt; パラメータの値は、オーバーライドするメソッド（ &lt;code&gt;overrider&lt;/code&gt; れる可能性のあるメソッド）を直接囲むクラスまたはインターフェイスになります。たとえば、 &lt;code&gt;m1&lt;/code&gt; がメソッド &lt;code&gt;String.hashCode&lt;/code&gt; を表し、 &lt;code&gt;m2&lt;/code&gt; が &lt;code&gt;Object.hashCode&lt;/code&gt; を表すとします。次に、 &lt;code&gt;m1&lt;/code&gt; がクラス &lt;code&gt;String&lt;/code&gt; 内の &lt;code&gt;m2&lt;/code&gt; をオーバーライドするかどうかを確認できます（そうです）。</target>
        </trans-unit>
        <trans-unit id="d7df6bb5179547c80d776dc0aafd98bdd8b5e175" translate="yes" xml:space="preserve">
          <source>In the simplest case, there is only one descriptor and the returned &lt;code&gt;ImmutableDescriptor&lt;/code&gt; is a copy of its fields at the time this method is called:</source>
          <target state="translated">最も単純なケースでは、記述子が1つだけあり、返される &lt;code&gt;ImmutableDescriptor&lt;/code&gt; は、このメソッドが呼び出されたときのフィールドのコピーです。</target>
        </trans-unit>
        <trans-unit id="93fc6f6665bc8e14ad256aa3e40fbe2fc160ba10" translate="yes" xml:space="preserve">
          <source>In the standard usage of the JMX API, MBeans are implemented as Java objects. However, as explained below, these objects are not usually referenced directly.</source>
          <target state="translated">JMX APIの標準的な使い方では、MBeansはJavaオブジェクトとして実装されています。しかし、以下で説明するように、これらのオブジェクトは通常直接参照されません。</target>
        </trans-unit>
        <trans-unit id="0650024393de036d57e5eb1c4c3b2983aded5a1a" translate="yes" xml:space="preserve">
          <source>In the unnormalized form, each component is an unsigned integral value between 0 and 2&lt;sup&gt;n&lt;/sup&gt; - 1, where n is the number of significant bits for a particular component. If pixel values for a particular &lt;code&gt;ColorModel&lt;/code&gt; represent color samples premultiplied by the alpha sample, unnormalized color component values are also premultiplied. The unnormalized form is used only with instances of &lt;code&gt;ColorModel&lt;/code&gt; whose &lt;code&gt;ColorSpace&lt;/code&gt; has minimum component values of 0.0 for all components and maximum values of 1.0 for all components. The unnormalized form for color and alpha components can be a convenient representation for &lt;code&gt;ColorModels&lt;/code&gt; whose normalized component values all lie between 0.0 and 1.0. In such cases the integral value 0 maps to 0.0 and the value 2&lt;sup&gt;n&lt;/sup&gt; - 1 maps to 1.0. In other cases, such as when the normalized component values can be either negative or positive, the unnormalized form is not convenient. Such &lt;code&gt;ColorModel&lt;/code&gt; objects throw an &lt;a href=&quot;../../../../java.base/java/lang/illegalargumentexception&quot;&gt;&lt;code&gt;IllegalArgumentException&lt;/code&gt;&lt;/a&gt; when methods involving an unnormalized argument are called. Subclasses of &lt;code&gt;ColorModel&lt;/code&gt; must specify the conditions under which this occurs.</source>
          <target state="translated">In the unnormalized form, each component is an unsigned integral value between 0 and 2&lt;sup&gt;n&lt;/sup&gt; - 1, where n is the number of significant bits for a particular component. If pixel values for a particular &lt;code&gt;ColorModel&lt;/code&gt; represent color samples premultiplied by the alpha sample, unnormalized color component values are also premultiplied. The unnormalized form is used only with instances of &lt;code&gt;ColorModel&lt;/code&gt; whose &lt;code&gt;ColorSpace&lt;/code&gt; has minimum component values of 0.0 for all components and maximum values of 1.0 for all components. The unnormalized form for color and alpha components can be a convenient representation for &lt;code&gt;ColorModels&lt;/code&gt; whose normalized component values all lie between 0.0 and 1.0. In such cases the integral value 0 maps to 0.0 and the value 2&lt;sup&gt;n&lt;/sup&gt; - 1 maps to 1.0. In other cases, such as when the normalized component values can be either negative or positive, the unnormalized form is not convenient. Such &lt;code&gt;ColorModel&lt;/code&gt; objects throw an &lt;a href=&quot;../../../../java.base/java/lang/illegalargumentexception&quot;&gt; &lt;code&gt;IllegalArgumentException&lt;/code&gt; &lt;/a&gt; when methods involving an unnormalized argument are called. Subclasses of &lt;code&gt;ColorModel&lt;/code&gt; must specify the conditions under which this occurs.</target>
        </trans-unit>
        <trans-unit id="4fb02047e34ddf08451892b3ff429e03dda69b67" translate="yes" xml:space="preserve">
          <source>In theory, it is possible for there to be more than two valid offsets. This would happen if clocks to be put back more than once in quick succession. This has never happened in the history of time-zones and thus has no special handling. However, if it were to happen, then the list would return more than 2 entries.</source>
          <target state="translated">理論的には、2つ以上の有効なオフセットが存在する可能性があります。これは、時計を素早く連続して2回以上戻す場合に起こります。これはタイムゾーンの歴史の中で一度も起こったことがないので、特別な処理はありません。しかし、もしこのようなことが起こった場合、リストは2つ以上のエントリを返すことになります。</target>
        </trans-unit>
        <trans-unit id="f0557f2e43744a697a7ec3609cc994bb84fbaf06" translate="yes" xml:space="preserve">
          <source>In these examples, the host name &lt;code&gt;ignoredhost&lt;/code&gt; is not used by the connector server or its clients. It can be omitted, for example:</source>
          <target state="translated">これらの例では、ホスト名 &lt;code&gt;ignoredhost&lt;/code&gt; は、コネクタサーバーまたはそのクライアントによって使用されていません。たとえば、省略できます。</target>
        </trans-unit>
        <trans-unit id="a96cc0da1bc8d97002fb7d683d8490c870b59b2b" translate="yes" xml:space="preserve">
          <source>In this &lt;code&gt;JMXServiceURL&lt;/code&gt;, the first &lt;code&gt;rmi:&lt;/code&gt; specifies the RMI connector, while the second &lt;code&gt;rmi:&lt;/code&gt; specifies the RMI registry into which the RMI connector server has stored its stub.</source>
          <target state="translated">この &lt;code&gt;JMXServiceURL&lt;/code&gt; では、最初の &lt;code&gt;rmi:&lt;/code&gt; はRMIコネクタを指定し、2番目の &lt;code&gt;rmi:&lt;/code&gt; はRMIコネクタサーバーがそのスタブを格納したRMIレジストリを指定します。</target>
        </trans-unit>
        <trans-unit id="7200a056d70dbcee507cbef0f2945debea8015ef" translate="yes" xml:space="preserve">
          <source>In this &lt;code&gt;JMXServiceURL&lt;/code&gt;, the first &lt;code&gt;rmi:&lt;/code&gt; specifies the RMI connector, while the second &lt;code&gt;rmi:&lt;/code&gt; specifies the RMI registry.</source>
          <target state="translated">この &lt;code&gt;JMXServiceURL&lt;/code&gt; では、最初の &lt;code&gt;rmi:&lt;/code&gt; はRMIコネクタを指定し、2番目の &lt;code&gt;rmi:&lt;/code&gt; はRMIレジストリを指定します。</target>
        </trans-unit>
        <trans-unit id="dfe617178689a36792645af523da4c25dc32fea7" translate="yes" xml:space="preserve">
          <source>In this approach, the &lt;code&gt;getObject&lt;/code&gt; method creates a cipher object for the appropriate decryption algorithm and initializes it with the given decryption key and the algorithm parameters (if any) that were stored in the sealed object.</source>
          <target state="translated">このアプローチでは、 &lt;code&gt;getObject&lt;/code&gt; メソッドは適切な復号化アルゴリズムの暗号オブジェクトを作成し、封印されたオブジェクトに格納された特定の復号化キーとアルゴリズムパラメータ（存在する場合）でそれを初期化します。</target>
        </trans-unit>
        <trans-unit id="22b6afa9d4a78bd74a00edb5ff917990a506228d" translate="yes" xml:space="preserve">
          <source>In this case, I could then register properties for this component with UIDefaults in the following manner:</source>
          <target state="translated">この場合、次のようにUIDefaultsでこのコンポーネントのプロパティを登録することができます。</target>
        </trans-unit>
        <trans-unit id="6348e3c77ca44896104904d8e87da80a3b45af65" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;code&gt;serviceURL&lt;/code&gt; has one of these two forms:</source>
          <target state="translated">この場合、 &lt;code&gt;serviceURL&lt;/code&gt; は次の2つの形式のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="d0e3338181665fd261d123eabba249b5dd31149f" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;code&gt;serviceURL&lt;/code&gt; has the following form:</source>
          <target state="translated">In this case, the &lt;code&gt;serviceURL&lt;/code&gt; has the following form:</target>
        </trans-unit>
        <trans-unit id="63799a8eba10e14aeec10316307fbff6ccabb3aa" translate="yes" xml:space="preserve">
          <source>In this case, the service provider itself need not be assignable to the service's interface or class.</source>
          <target state="translated">この場合、サービスプロバイダ自体は、サービスのインターフェースやクラスに割り当てる必要はありません。</target>
        </trans-unit>
        <trans-unit id="63f42d08b127520793be019e80489c215cf4a70f" translate="yes" xml:space="preserve">
          <source>In this case, the service provider must be assignable to the service's interface or class</source>
          <target state="translated">この場合、サービスプロバイダは、サービスのインターフェイスまたはクラスに割り当て可能でなければなりません。</target>
        </trans-unit>
        <trans-unit id="720c350da9963fee529988e5b52df9757023ef03" translate="yes" xml:space="preserve">
          <source>In this class, the format of &quot;&amp;lt;name type&amp;gt;&quot; is &quot;[LITERAL] (INTEGER)&quot;, where the optional &quot;LITERAL&quot; is the literal name, and INTEGER is the integer value of the name type. The format of &quot;&amp;lt;name value&amp;gt;&quot; is &quot;XX:...:XX&quot;, where &quot;XX&quot; is the hexadecimal digit representation of a byte value. For example, a returned value of an pseudo server name may look like:</source>
          <target state="translated">このクラスでは、 &quot;&amp;lt;name type&amp;gt;&quot;の形式は &quot;[LITERAL]（INTEGER）&quot;です。ここで、オプションの &quot;LITERAL&quot;はリテラル名で、INTEGERは名前タイプの整数値です。「&amp;lt;名前の値&amp;gt;」の形式は「XX：...：XX」で、「XX」はバイト値の16進数の表現です。たとえば、擬似サーバー名の戻り値は次のようになります。</target>
        </trans-unit>
        <trans-unit id="6cdeb7f788b6607f967210833bc2420e849ecc59" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;widgets&lt;/code&gt; is a &lt;code&gt;Collection&amp;lt;Widget&amp;gt;&lt;/code&gt;. We create a stream of &lt;code&gt;Widget&lt;/code&gt; objects via &lt;a href=&quot;../collection#stream()&quot;&gt;&lt;code&gt;Collection.stream()&lt;/code&gt;&lt;/a&gt;, filter it to produce a stream containing only the red widgets, and then transform it into a stream of &lt;code&gt;int&lt;/code&gt; values representing the weight of each red widget. Then this stream is summed to produce a total weight.</source>
          <target state="translated">In this example, &lt;code&gt;widgets&lt;/code&gt; is a &lt;code&gt;Collection&amp;lt;Widget&amp;gt;&lt;/code&gt; . We create a stream of &lt;code&gt;Widget&lt;/code&gt; objects via &lt;a href=&quot;../collection#stream()&quot;&gt; &lt;code&gt;Collection.stream()&lt;/code&gt; &lt;/a&gt;, filter it to produce a stream containing only the red widgets, and then transform it into a stream of &lt;code&gt;int&lt;/code&gt; values representing the weight of each red widget. Then this stream is summed to produce a total weight.</target>
        </trans-unit>
        <trans-unit id="e193ba75e02e845c525d4e0f2f9ef5c3a18416dc" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;widgets&lt;/code&gt; is a &lt;code&gt;Collection&amp;lt;Widget&amp;gt;&lt;/code&gt;. We create a stream of &lt;code&gt;Widget&lt;/code&gt; objects via &lt;a href=&quot;../collection#stream--&quot;&gt;&lt;code&gt;Collection.stream()&lt;/code&gt;&lt;/a&gt;, filter it to produce a stream containing only the red widgets, and then transform it into a stream of &lt;code&gt;int&lt;/code&gt; values representing the weight of each red widget. Then this stream is summed to produce a total weight.</source>
          <target state="translated">この例では、 &lt;code&gt;widgets&lt;/code&gt; は &lt;code&gt;Collection&amp;lt;Widget&amp;gt;&lt;/code&gt; です。&lt;a href=&quot;../collection#stream--&quot;&gt; &lt;code&gt;Collection.stream()&lt;/code&gt; &lt;/a&gt;を介して &lt;code&gt;Widget&lt;/code&gt; オブジェクトのストリームを作成し、それをフィルタリングして赤いウィジェットのみを含むストリームを生成し、それを各赤いウィジェットの重みを表す &lt;code&gt;int&lt;/code&gt; 値のストリームに変換します。次に、このストリームが合計されて総重量が生成されます。</target>
        </trans-unit>
        <trans-unit id="39bf3f1e82dd624353302de76e51fb88b074c58a" translate="yes" xml:space="preserve">
          <source>In this example, a &lt;code&gt;WebRowSet&lt;/code&gt; object is created and populated with a simple 2 column, 5 row table from a data source. Having the 5 rows in a &lt;code&gt;WebRowSet&lt;/code&gt; object makes it possible to describe them in XML. The metadata describing the various standard JavaBeans properties as defined in the RowSet interface plus the standard properties defined in the &lt;code&gt;CachedRowSet&lt;/code&gt;&amp;trade; interface provide key details that describe WebRowSet properties. Outputting the WebRowSet object to XML using the standard &lt;code&gt;writeXml&lt;/code&gt; methods describes the internal properties as follows:</source>
          <target state="translated">In this example, a &lt;code&gt;WebRowSet&lt;/code&gt; object is created and populated with a simple 2 column, 5 row table from a data source. Having the 5 rows in a &lt;code&gt;WebRowSet&lt;/code&gt; object makes it possible to describe them in XML. The metadata describing the various standard JavaBeans properties as defined in the RowSet interface plus the standard properties defined in the &lt;code&gt;CachedRowSet&lt;/code&gt; &amp;trade; interface provide key details that describe WebRowSet properties. Outputting the WebRowSet object to XML using the standard &lt;code&gt;writeXml&lt;/code&gt; methods describes the internal properties as follows:</target>
        </trans-unit>
        <trans-unit id="1a75831521f54124961b4fc66a51028571265186" translate="yes" xml:space="preserve">
          <source>In this example, as well as others in which tasks have no other effects except to &lt;code&gt;compareAndSet&lt;/code&gt; a common result, the trailing unconditional invocation of &lt;code&gt;tryComplete&lt;/code&gt; could be made conditional (&lt;code&gt;if (result.get() == null) tryComplete();&lt;/code&gt;) because no further bookkeeping is required to manage completions once the root task completes.</source>
          <target state="translated">In this example, as well as others in which tasks have no other effects except to &lt;code&gt;compareAndSet&lt;/code&gt; a common result, the trailing unconditional invocation of &lt;code&gt;tryComplete&lt;/code&gt; could be made conditional ( &lt;code&gt;if (result.get() == null) tryComplete();&lt;/code&gt; ) because no further bookkeeping is required to manage completions once the root task completes.</target>
        </trans-unit>
        <trans-unit id="42c7030ce66b22acc98ef41e2d30078538ce049c" translate="yes" xml:space="preserve">
          <source>In this example, as well as others in which tasks have no other effects except to compareAndSet a common result, the trailing unconditional invocation of &lt;code&gt;tryComplete&lt;/code&gt; could be made conditional (&lt;code&gt;if (result.get() == null) tryComplete();&lt;/code&gt;) because no further bookkeeping is required to manage completions once the root task completes.</source>
          <target state="translated">この例では、同様のタスクがのcompareAndSetを除いて共通の結果を他の効果を有していないような他の末尾無条件呼び出し &lt;code&gt;tryComplete&lt;/code&gt; は（条件作ることができる &lt;code&gt;if (result.get() == null) tryComplete();&lt;/code&gt; ）のでルートタスクが完了すると、完了を管理するための追加の簿記は必要ありません。</target>
        </trans-unit>
        <trans-unit id="9cbdee6a070a799225581b53a39e8fe83cce6d75" translate="yes" xml:space="preserve">
          <source>In this example, serializing &lt;code&gt;aButton&lt;/code&gt; by itself will cause &lt;code&gt;MyApp&lt;/code&gt; and everything it refers to to be serialized as well. The problem is that the listener is serializable by coincidence, not by design. To separate the decisions about &lt;code&gt;MyApp&lt;/code&gt; and the &lt;code&gt;ActionListener&lt;/code&gt; being serializable one can use a nested class, as in the following example:</source>
          <target state="translated">In this example, serializing &lt;code&gt;aButton&lt;/code&gt; by itself will cause &lt;code&gt;MyApp&lt;/code&gt; and everything it refers to to be serialized as well. The problem is that the listener is serializable by coincidence, not by design. To separate the decisions about &lt;code&gt;MyApp&lt;/code&gt; and the &lt;code&gt;ActionListener&lt;/code&gt; being serializable one can use a nested class, as in the following example:</target>
        </trans-unit>
        <trans-unit id="eee5b5ec1422e55461ae970d2b50a5715dd52b4c" translate="yes" xml:space="preserve">
          <source>In this example, suppose you were in the Enabled+Selected state and searched for &quot;foreground&quot;. In this case, we first check for Button.Enabled+Selected.foreground, but no such color exists. We then fall back to the next valid state, in this case, Button.Enabled.foreground, and have a match. So we return it.</source>
          <target state="translated">この例では、Enabled+Selectedの状態で「前景」を検索したとします。この場合、まず Button.Enabled+Selected.foreground をチェックしますが、そのような色は存在しません。次に、次の有効な状態、この場合は Button.Enabled.foreground にフォールバックして、一致する色を見つけました。そこで、これを返します。</target>
        </trans-unit>
        <trans-unit id="409136081c66f45095c7d409508b34b5db16e59f" translate="yes" xml:space="preserve">
          <source>In this example, the loop handle parameters &lt;code&gt;(A...)&lt;/code&gt; were derived from the step functions, which is natural if most of the loop computation happens in the steps. For some loops, the burden of computation might be heaviest in the pred functions, and so the pred functions might need to accept the loop parameter values. For loops with complex exit logic, the fini functions might need to accept loop parameters, and likewise for loops with complex entry logic, where the init functions will need the extra parameters. For such reasons, the rules for determining these parameters are as symmetric as possible, across all clause parts. In general, the loop parameters function as common invariant values across the whole loop, while the iteration variables function as common variant values, or (if there is no step function) as internal loop invariant temporaries.</source>
          <target state="translated">In this example, the loop handle parameters &lt;code&gt;(A...)&lt;/code&gt; were derived from the step functions, which is natural if most of the loop computation happens in the steps. For some loops, the burden of computation might be heaviest in the pred functions, and so the pred functions might need to accept the loop parameter values. For loops with complex exit logic, the fini functions might need to accept loop parameters, and likewise for loops with complex entry logic, where the init functions will need the extra parameters. For such reasons, the rules for determining these parameters are as symmetric as possible, across all clause parts. In general, the loop parameters function as common invariant values across the whole loop, while the iteration variables function as common variant values, or (if there is no step function) as internal loop invariant temporaries.</target>
        </trans-unit>
        <trans-unit id="aed2963fd6dbb4a4e6fa201a311664290c5e4832" translate="yes" xml:space="preserve">
          <source>In this example, the values for &lt;code&gt;CREDIT_LIMIT&lt;/code&gt; and &lt;code&gt;REGION&lt;/code&gt; are placeholder parameters, which are indicated with a question mark (?). The first question mark is placeholder parameter number &lt;code&gt;1&lt;/code&gt;, the second question mark is placeholder parameter number &lt;code&gt;2&lt;/code&gt;, and so on. Any placeholder parameters must be set with values before the query can be executed. To set these placeholder parameters, the &lt;code&gt;BaseRowSet&lt;/code&gt; class provides a set of setter methods, similar to those provided by the &lt;code&gt;PreparedStatement&lt;/code&gt; interface, for setting values of each data type. A &lt;code&gt;RowSet&lt;/code&gt; object stores the parameter values internally, and its &lt;code&gt;execute&lt;/code&gt; method uses them internally to set values for the placeholder parameters before it sends the command to the DBMS to be executed.</source>
          <target state="translated">In this example, the values for &lt;code&gt;CREDIT_LIMIT&lt;/code&gt; and &lt;code&gt;REGION&lt;/code&gt; are placeholder parameters, which are indicated with a question mark (?). The first question mark is placeholder parameter number &lt;code&gt;1&lt;/code&gt; , the second question mark is placeholder parameter number &lt;code&gt;2&lt;/code&gt; , and so on. Any placeholder parameters must be set with values before the query can be executed. To set these placeholder parameters, the &lt;code&gt;BaseRowSet&lt;/code&gt; class provides a set of setter methods, similar to those provided by the &lt;code&gt;PreparedStatement&lt;/code&gt; interface, for setting values of each data type. A &lt;code&gt;RowSet&lt;/code&gt; object stores the parameter values internally, and its &lt;code&gt;execute&lt;/code&gt; method uses them internally to set values for the placeholder parameters before it sends the command to the DBMS to be executed.</target>
        </trans-unit>
        <trans-unit id="93dc5b821ae68dc6ebfeda9a85cb67c0bd4d6187" translate="yes" xml:space="preserve">
          <source>In this implementation of the &lt;code&gt;MutableNode&lt;/code&gt; interface, this operation is very inefficient. In order to determine the next node, this method first performs a linear search in the parent's child-list in order to find the current node.</source>
          <target state="translated">In this implementation of the &lt;code&gt;MutableNode&lt;/code&gt; interface, this operation is very inefficient. In order to determine the next node, this method first performs a linear search in the parent's child-list in order to find the current node.</target>
        </trans-unit>
        <trans-unit id="39a62c2317ac735babb1eb562a47c5533b21792e" translate="yes" xml:space="preserve">
          <source>In this implementation of the &lt;code&gt;MutableNode&lt;/code&gt; interface, this operation is very inefficient. In order to determine the previous node, this method first performs a linear search in the parent's child-list in order to find the current node.</source>
          <target state="translated">In this implementation of the &lt;code&gt;MutableNode&lt;/code&gt; interface, this operation is very inefficient. In order to determine the previous node, this method first performs a linear search in the parent's child-list in order to find the current node.</target>
        </trans-unit>
        <trans-unit id="2ed4d9d662cc61c638b4d92ccc9834b600d7f5a3" translate="yes" xml:space="preserve">
          <source>In this implementation only &quot;ObjectReference&quot; is supported.</source>
          <target state="translated">この実装では、「ObjectReference」のみをサポートしています。</target>
        </trans-unit>
        <trans-unit id="8ac51afe4aa630110440e2c63eec26125f1f704d" translate="yes" xml:space="preserve">
          <source>In this implementation, all field values will be created as Strings. If the field values are not Strings, the programmer will have to reset or convert these fields correctly.</source>
          <target state="translated">この実装では、すべてのフィールド値は文字列として作成されます。フィールド値が文字列でない場合、プログラマはこれらのフィールドをリセットするか、正しく変換する必要があります。</target>
        </trans-unit>
        <trans-unit id="21158219378c10a796461357849e0275a40caa35" translate="yes" xml:space="preserve">
          <source>In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock, and over reporting the elapse of the waiting time.</source>
          <target state="translated">本実施形態では、このメソッドは明示的な割り込みポイントであるため、通常のロック取得やリエントラント取得よりも割り込みへの応答を優先し、待ち時間の経過を報告することを優先しています。</target>
        </trans-unit>
        <trans-unit id="c5302763fc0d8960fc55215843ee5ec52f822951" translate="yes" xml:space="preserve">
          <source>In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock.</source>
          <target state="translated">本実施形態では、このメソッドは明示的な割り込みポイントであるため、通常のロック取得やリエントラント取得よりも割り込みへの応答を優先しています。</target>
        </trans-unit>
        <trans-unit id="612b61e7520baf5be9280167c708d75c2a29f2da" translate="yes" xml:space="preserve">
          <source>In this implementation, in every case where the getMethod needs to be called, because the method is invoked through the standard &quot;invoke&quot; method and thus needs operationInfo, an operation must be specified for that getMethod so that the invocation works correctly.</source>
          <target state="translated">この実装では、getMethodを呼び出す必要があるすべてのケースで、メソッドは標準の &quot;invoke &quot;メソッドから呼び出されるため、operationInfoを必要とするため、その呼び出しが正しく動作するようにgetMethodにオペレーションを指定する必要があります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
