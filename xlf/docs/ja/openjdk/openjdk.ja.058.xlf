<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="openjdk">
    <body>
      <group id="openjdk">
        <trans-unit id="1ae3e0056cd784ead2780334dd8d36832de21f5e" translate="yes" xml:space="preserve">
          <source>AlreadyBoundException</source>
          <target state="translated">AlreadyBoundException</target>
        </trans-unit>
        <trans-unit id="bc7323c5305283cae4b34772641fba6048ec0c98" translate="yes" xml:space="preserve">
          <source>AlreadyConnectedException</source>
          <target state="translated">AlreadyConnectedException</target>
        </trans-unit>
        <trans-unit id="c966b9cdb7a6fb661c7c9ca06cb62dccfd7f5bb8" translate="yes" xml:space="preserve">
          <source>Also as of &lt;a href=&quot;../sourceversion#RELEASE_8&quot;&gt;&lt;code&gt;RELEASE_8&lt;/code&gt;&lt;/a&gt;, in the reference implementation an &lt;code&gt;IntersectionType&lt;/code&gt; is used to model the explicit target type of a cast expression.</source>
          <target state="translated">また、&lt;a href=&quot;../sourceversion#RELEASE_8&quot;&gt; &lt;code&gt;RELEASE_8&lt;/code&gt; &lt;/a&gt;以降、参照実装では &lt;code&gt;IntersectionType&lt;/code&gt; を使用してキャスト式の明示的なターゲットタイプをモデル化しています。</target>
        </trans-unit>
        <trans-unit id="119bfe24019c8ef59786473fa4eaf3f11d6e3588" translate="yes" xml:space="preserve">
          <source>Also if &lt;code&gt;DocFlavor&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt; it must be a flavor supported by this &lt;code&gt;PrintService&lt;/code&gt;, else &lt;code&gt;IllegalArgumentException&lt;/code&gt; will be thrown.</source>
          <target state="translated">また、 &lt;code&gt;DocFlavor&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; でない場合は、この &lt;code&gt;PrintService&lt;/code&gt; でサポートされているフレーバーである必要があります。そうでない場合、 &lt;code&gt;IllegalArgumentException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="560fd3ef72e5e9fd9b4771391936c978312d3981" translate="yes" xml:space="preserve">
          <source>Also if DocFlavor is not null it must be a flavor supported by this PrintService, else IllegalArgumentException will be thrown.</source>
          <target state="translated">また、DocFlavorがnullでない場合は、このPrintServiceがサポートしているフレーバーでなければならず、そうでない場合はIllegalArgumentExceptionがスローされる。</target>
        </trans-unit>
        <trans-unit id="992bca3a4a5a3792b826c12b141a6363324eaddf" translate="yes" xml:space="preserve">
          <source>Also note that the LoginModule-specific options,</source>
          <target state="translated">また、LoginModule固有のオプションにも注意してください。</target>
        </trans-unit>
        <trans-unit id="90f3015f263b589659c5ccecb06f0805828705e5" translate="yes" xml:space="preserve">
          <source>Also note that this class defines only the equations for combining color and alpha values in a purely mathematical sense. The accurate application of its equations depends on the way the data is retrieved from its sources and stored in its destinations. See &lt;a href=&quot;#caveats&quot;&gt;Implementation Caveats&lt;/a&gt; for further information.</source>
          <target state="translated">また、このクラスは、純粋に数学的な意味で色とアルファ値を組み合わせるための方程式のみを定義することに注意してください。その方程式の正確な適用は、データがそのソースから取得され、その宛先に格納される方法に依存します。詳細については、&lt;a href=&quot;#caveats&quot;&gt;実装&lt;/a&gt;に関する警告を参照してください。</target>
        </trans-unit>
        <trans-unit id="6df6434b764698b3b113972baa6dc107cad3b492" translate="yes" xml:space="preserve">
          <source>Also note that this class stores passwords as char arrays instead of &lt;code&gt;String&lt;/code&gt; objects (which would seem more logical), because the String class is immutable and there is no way to overwrite its internal value when the password stored in it is no longer needed. Hence, this class requests the password as a char array, so it can be overwritten when done.</source>
          <target state="translated">また、このクラスはパスワードを &lt;code&gt;String&lt;/code&gt; オブジェクト（より論理的に見える）ではなくchar配列として格納することに注意してください。これは、Stringクラスは不変であり、格納されているパスワードが不要になったときに内部値を上書きする方法がないためです。したがって、このクラスはパスワードをchar配列として要求するため、完了時に上書きできます。</target>
        </trans-unit>
        <trans-unit id="35f79146b32e806c24e3d8d584c559446565cf54" translate="yes" xml:space="preserve">
          <source>Also note that this is different than the behaviour of the Java runtime when interpreting a stream of bytes as text data. That assumes the default encoding for the user's locale. Thus, when spooling a file in local encoding to a Java Print Service it is important to correctly specify the encoding. Developers working in the English locales should be particularly conscious of this, as their platform encoding corresponds to the default mime charset. By this coincidence that particular case may work without specifying the encoding of platform data.</source>
          <target state="translated">また、これはバイトのストリームをテキストデータとして解釈するときのJavaランタイムの動作とは異なることに注意してください。これは、ユーザーのロケールに合わせたデフォルトのエンコーディングを前提としています。したがって、ローカルエンコーディングのファイルをJava Print Serviceにスプールする際には、エンコーディングを正しく指定することが重要です。英語ロケールで作業している開発者は、プラットフォームのエンコーディングがデフォルトのmime文字セットに対応しているため、特に意識しておく必要があります。偶然にも、その特定のケースは、プラットフォーム・データのエンコーディングを指定しなくても動作する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d37eb49280470e438e7e699ff631a3f84af89ba2" translate="yes" xml:space="preserve">
          <source>Also,</source>
          <target state="translated">Also,</target>
        </trans-unit>
        <trans-unit id="0828aa191164f435ae5c642e783d579d0720fdb1" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;DataFlavor&lt;/code&gt; instances with the &quot;text&quot; primary MIME type may have a &quot;charset&quot; parameter. Refer to &lt;a href=&quot;http://www.ietf.org/rfc/rfc2046.txt&quot;&gt;RFC 2046&lt;/a&gt; and &lt;a href=&quot;#selectBestTextFlavor(java.awt.datatransfer.DataFlavor%5B%5D)&quot;&gt;&lt;code&gt;selectBestTextFlavor(java.awt.datatransfer.DataFlavor[])&lt;/code&gt;&lt;/a&gt; for details on &quot;text&quot; MIME types and the &quot;charset&quot; parameter.</source>
          <target state="translated">また、「text」プライマリMIMEタイプの &lt;code&gt;DataFlavor&lt;/code&gt; インスタンスには、「charset」パラメーターが含まれる場合があります。参照してください&lt;a href=&quot;http://www.ietf.org/rfc/rfc2046.txt&quot;&gt;RFC 2046&lt;/a&gt;と&lt;a href=&quot;#selectBestTextFlavor(java.awt.datatransfer.DataFlavor%5B%5D)&quot;&gt; &lt;code&gt;selectBestTextFlavor(java.awt.datatransfer.DataFlavor[])&lt;/code&gt; &lt;/a&gt;「テキスト」MIMEタイプと「文字セット」パラメータの詳細については。</target>
        </trans-unit>
        <trans-unit id="635721d29e61a012f46ed0db479ee83735a9cddc" translate="yes" xml:space="preserve">
          <source>Also, Java treats the language &quot;no&quot; as a synonym of Norwegian Bokm&amp;aring;l &quot;nb&quot;. Except for the single case &lt;code&gt;Locale(&quot;no&quot;,
 &quot;NO&quot;, &quot;NY&quot;)&lt;/code&gt; (handled above), when an input &lt;code&gt;Locale&lt;/code&gt; has language &quot;no&quot; or &quot;nb&quot;, candidate &lt;code&gt;Locale&lt;/code&gt;s with language code &quot;no&quot; and &quot;nb&quot; are interleaved, first using the requested language, then using its synonym. For example, &lt;code&gt;Locale(&quot;nb&quot;, &quot;NO&quot;, &quot;POSIX&quot;)&lt;/code&gt; generates the following candidate list:</source>
          <target state="translated">また、Javaは「no」という言語をノルウェー語のブークモール語「nb」の同義語として扱います。単一のケース &lt;code&gt;Locale(&quot;no&quot;, &quot;NO&quot;, &quot;NY&quot;)&lt;/code&gt; （上記で処理）を除き、入力 &lt;code&gt;Locale&lt;/code&gt; 言語が &quot;no&quot;または &quot;nb&quot;の場合、言語コード &quot;no&quot;および &quot;nbの候補 &lt;code&gt;Locale&lt;/code&gt; &quot;インタリーブされ、最初に要求された言語を使用し、次にその同義語を使用します。たとえば、 &lt;code&gt;Locale(&quot;nb&quot;, &quot;NO&quot;, &quot;POSIX&quot;)&lt;/code&gt; は、次の候補リストを生成します。</target>
        </trans-unit>
        <trans-unit id="59d0f477c29e9007865e779e1d42c76d90531350" translate="yes" xml:space="preserve">
          <source>Also, division of a duration by a number is not provided because the &lt;code&gt;Duration&lt;/code&gt; class can only deal with finite precision decimal numbers. For example, one cannot represent 1 sec divided by 3.</source>
          <target state="translated">また、 &lt;code&gt;Duration&lt;/code&gt; クラスは有限精度の10進数しか処理できないため、期間を数値で除算することはできません。たとえば、1秒を3で割った値を表すことはできません。</target>
        </trans-unit>
        <trans-unit id="2b022799707861a6bf51bb67873edc5f74d0ebdf" translate="yes" xml:space="preserve">
          <source>Also, for service providers that only support registration for existing targets, when the target that a listener has registered for is subsequently removed from the namespace, the listener is notified via a &lt;code&gt;NamingExceptionEvent&lt;/code&gt; (containing a &lt;code&gt;NameNotFoundException&lt;/code&gt;).</source>
          <target state="translated">また、既存のターゲットの登録のみをサポートするサービスプロバイダーの場合、リスナーが登録されたターゲットがその後ネームスペースから削除されると、リスナーは &lt;code&gt;NamingExceptionEvent&lt;/code&gt; （ &lt;code&gt;NameNotFoundException&lt;/code&gt; を含む）を介して通知されます。</target>
        </trans-unit>
        <trans-unit id="af832291322327937b4d8d1356b3a90daa55ea9c" translate="yes" xml:space="preserve">
          <source>Also, if incremental drawing is in effect, the value of the system property &lt;code&gt;awt.image.redrawrate&lt;/code&gt; is interpreted as an integer to give the maximum redraw rate, in milliseconds. If the system property is missing or cannot be interpreted as an integer, the redraw rate is once every 100ms.</source>
          <target state="translated">また、インクリメンタル描画が有効な場合、システムプロパティ &lt;code&gt;awt.image.redrawrate&lt;/code&gt; の値は整数として解釈され、ミリ秒単位で最大の再描画速度が得られます。システムプロパティが欠落しているか、整数として解釈できない場合、再描画速度は100ミリ秒に1回です。</target>
        </trans-unit>
        <trans-unit id="bb09f0f6f8e9dbba923816c9b72371f650027a44" translate="yes" xml:space="preserve">
          <source>Also, if there is a security manager, its &lt;code&gt;checkSecurityAccess&lt;/code&gt; method is called with the string &lt;code&gt;&quot;putProviderProperty.&quot;+name&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is the provider name, to see if it's ok to set this provider's property values. If the default implementation of &lt;code&gt;checkSecurityAccess&lt;/code&gt; is used (that is, that method is not overriden), then this results in a call to the security manager's &lt;code&gt;checkPermission&lt;/code&gt; method with a &lt;code&gt;SecurityPermission(&quot;putProviderProperty.&quot;+name)&lt;/code&gt; permission.</source>
          <target state="translated">また、セキュリティマネージャーがある場合、その &lt;code&gt;checkSecurityAccess&lt;/code&gt; メソッドが文字列 &lt;code&gt;&quot;putProviderProperty.&quot;+name&lt;/code&gt; で呼び出されます。ここで、 &lt;code&gt;name&lt;/code&gt; はプロバイダー名であり、このプロバイダーのプロパティ値を設定してもよいかどうかを確認します。 &lt;code&gt;checkSecurityAccess&lt;/code&gt; のデフォルトの実装が使用されている（つまり、そのメソッドがオーバーライドされていない）場合、これにより、 &lt;code&gt;SecurityPermission(&quot;putProviderProperty.&quot;+name)&lt;/code&gt; 権限を持つセキュリティマネージャの &lt;code&gt;checkPermission&lt;/code&gt; メソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4b44feffb8d34a6389c30b3d2f510f12839adc6a" translate="yes" xml:space="preserve">
          <source>Also, if there is a security manager, its &lt;code&gt;checkSecurityAccess&lt;/code&gt; method is called with the string &lt;code&gt;&quot;removeProviderProperty.&quot;+name&lt;/code&gt;, where &lt;code&gt;name&lt;/code&gt; is the provider name, to see if it's ok to remove this provider's properties. If the default implementation of &lt;code&gt;checkSecurityAccess&lt;/code&gt; is used (that is, that method is not overriden), then this results in a call to the security manager's &lt;code&gt;checkPermission&lt;/code&gt; method with a &lt;code&gt;SecurityPermission(&quot;removeProviderProperty.&quot;+name)&lt;/code&gt; permission.</source>
          <target state="translated">また、セキュリティマネージャーがある場合は、その &lt;code&gt;checkSecurityAccess&lt;/code&gt; メソッドが文字列 &lt;code&gt;&quot;removeProviderProperty.&quot;+name&lt;/code&gt; で呼び出されます。ここで、 &lt;code&gt;name&lt;/code&gt; はプロバイダー名です。このプロバイダーのプロパティを削除してもよいかどうかを確認します。 &lt;code&gt;checkSecurityAccess&lt;/code&gt; のデフォルトの実装が使用されている（つまり、そのメソッドがオーバーライドされていない）場合、これにより、 &lt;code&gt;SecurityPermission(&quot;removeProviderProperty.&quot;+name)&lt;/code&gt; 権限を持つセキュリティマネージャの &lt;code&gt;checkPermission&lt;/code&gt; メソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="2484ef7e1a2973d2e0ace0ef44336cbdcf9a19a6" translate="yes" xml:space="preserve">
          <source>Also, implementations are allowed to use implementation-specific property/feature to alter the semantics of this method.</source>
          <target state="translated">また、実装は、このメソッドのセマンティクスを変更するために、実装固有のプロパティ/機能を使用することが許可されています。</target>
        </trans-unit>
        <trans-unit id="2061227a427ff9c5ad33fe2996f1e63d7e22199b" translate="yes" xml:space="preserve">
          <source>Also, note that &lt;code&gt;DOMValidateContext&lt;/code&gt; instances can contain information and state specific to the XML signature structure it is used with. The results are unpredictable if a &lt;code&gt;DOMValidateContext&lt;/code&gt; is used with different signature structures (for example, you should not use the same &lt;code&gt;DOMValidateContext&lt;/code&gt; instance to validate two different &lt;a href=&quot;../xmlsignature&quot;&gt;&lt;code&gt;XMLSignature&lt;/code&gt;&lt;/a&gt; objects).</source>
          <target state="translated">また、 &lt;code&gt;DOMValidateContext&lt;/code&gt; インスタンスには、使用されるXML署名構造に固有の情報と状態を含めることができることに注意してください。 &lt;code&gt;DOMValidateContext&lt;/code&gt; が異なる署名構造で使用されている場合、結果は予測できません（たとえば、2つの異なる&lt;a href=&quot;../xmlsignature&quot;&gt; &lt;code&gt;XMLSignature&lt;/code&gt; &lt;/a&gt;オブジェクトを検証するために同じ &lt;code&gt;DOMValidateContext&lt;/code&gt; インスタンスを使用しないでください）。</target>
        </trans-unit>
        <trans-unit id="254fb23c0b86f3a891332a7052fd7f3ef154924e" translate="yes" xml:space="preserve">
          <source>Also, since this duration class is a Gregorian duration, this method will not work correctly if the given &lt;a href=&quot;../../../../java.base/java/util/calendar&quot;&gt;&lt;code&gt;Calendar&lt;/code&gt;&lt;/a&gt; object is based on some other calendar systems.</source>
          <target state="translated">また、この期間クラスはグレゴリオ暦の期間であるため、指定された&lt;a href=&quot;../../../../java.base/java/util/calendar&quot;&gt; &lt;code&gt;Calendar&lt;/code&gt; &lt;/a&gt;オブジェクトが他のカレンダーシステムに基づいている場合、このメソッドは正しく機能しません。</target>
        </trans-unit>
        <trans-unit id="f11384ad3bdde7cacb55342119a3ce347ddcca24" translate="yes" xml:space="preserve">
          <source>Also, the &lt;code&gt;XMLStructure&lt;/code&gt;s that are created by this factory may contain state specific to the &lt;code&gt;KeyInfo&lt;/code&gt; and are not intended to be reusable.</source>
          <target state="translated">また、このファクトリによって作成された &lt;code&gt;XMLStructure&lt;/code&gt; には、 &lt;code&gt;KeyInfo&lt;/code&gt; に固有の状態が含まれている可能性があり、再利用を目的としていません。</target>
        </trans-unit>
        <trans-unit id="77bba4a78ed0ebe20f4d6bf2353e015f9872ae8e" translate="yes" xml:space="preserve">
          <source>Also, the &lt;code&gt;XMLStructure&lt;/code&gt;s that are created by this factory may contain state specific to the &lt;code&gt;XMLSignature&lt;/code&gt; and are not intended to be reusable.</source>
          <target state="translated">また、このファクトリによって作成された &lt;code&gt;XMLStructure&lt;/code&gt; には、 &lt;code&gt;XMLSignature&lt;/code&gt; に固有の状態が含まれている可能性があり、再利用を目的としていません。</target>
        </trans-unit>
        <trans-unit id="689fab2361efd4f9f9c0cda2a2ab5814bfbe468c" translate="yes" xml:space="preserve">
          <source>Alterations to the DOM tree may cause the current node to no longer be accepted by the &lt;code&gt;TreeWalker&lt;/code&gt;'s associated filter. &lt;code&gt;currentNode&lt;/code&gt; may also be explicitly set to any node, whether or not it is within the subtree specified by the &lt;code&gt;root&lt;/code&gt; node or would be accepted by the filter and &lt;code&gt;whatToShow&lt;/code&gt; flags. Further traversal occurs relative to &lt;code&gt;currentNode&lt;/code&gt; even if it is not part of the current view, by applying the filters in the requested direction; if no traversal is possible, &lt;code&gt;currentNode&lt;/code&gt; is not changed.</source>
          <target state="translated">DOMツリーを変更すると、現在のノードが &lt;code&gt;TreeWalker&lt;/code&gt; の関連フィルターによって受け入れられなくなる可能性があります。 &lt;code&gt;currentNode&lt;/code&gt; は、 &lt;code&gt;root&lt;/code&gt; ノードによって指定されたサブツリー内にあるかどうか、またはフィルターと &lt;code&gt;whatToShow&lt;/code&gt; フラグによって受け入れられるかどうかに関係なく、任意のノードに明示的に設定することもできます。要求された方向にフィルターを適用することにより、現在のビューの一部でなくても、 &lt;code&gt;currentNode&lt;/code&gt; に対してさらにトラバーサルが発生します。トラバーサルが不可能な場合、 &lt;code&gt;currentNode&lt;/code&gt; は変更されません。</target>
        </trans-unit>
        <trans-unit id="32721661aebc445b79ef6be7a365f08e71cc1c7f" translate="yes" xml:space="preserve">
          <source>Altering the data used to create the &lt;code&gt;GlyphVector&lt;/code&gt; does not alter the state of the &lt;code&gt;GlyphVector&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;GlyphVector&lt;/code&gt; の作成に使用されるデータを変更しても、 &lt;code&gt;GlyphVector&lt;/code&gt; の状態は変更されません。</target>
        </trans-unit>
        <trans-unit id="f07719bf4302008e93f03389d457ae7e31f0ca98" translate="yes" xml:space="preserve">
          <source>Alternate &lt;code&gt;CertPath&lt;/code&gt; class for serialization.</source>
          <target state="translated">シリアル化のための代替 &lt;code&gt;CertPath&lt;/code&gt; クラス。</target>
        </trans-unit>
        <trans-unit id="854c4c0d0d209a005db238dcd881180a6ac22fe7" translate="yes" xml:space="preserve">
          <source>Alternate Certificate class for serialization.</source>
          <target state="translated">シリアル化のための代替証明書クラス。</target>
        </trans-unit>
        <trans-unit id="3f770a0719cdec849cf73da75cc3cd50c904fd63" translate="yes" xml:space="preserve">
          <source>Alternate Tag to check for in the document if parentTag is not found.</source>
          <target state="translated">parentTagが見つからない場合にドキュメント内でチェックする代替タグ。</target>
        </trans-unit>
        <trans-unit id="b472a7b01871cbf4e9ecd30ebaadac6b19672402" translate="yes" xml:space="preserve">
          <source>Alternate tag in HTML to start adding tags from if parentTag is not found and alternateParentTag is found.</source>
          <target state="translated">parentTagが見つからず、alternateParentTagが見つかった場合にタグの追加を開始するHTML内のAlternateタグ。</target>
        </trans-unit>
        <trans-unit id="ccabbe7a16aede222c07e8c49ef810844ca9b834" translate="yes" xml:space="preserve">
          <source>Alternately, an implementation that uses floating point math might produce more accurate results and end up returning to the original pixel value with little, if any, round-off error. Or, an implementation using integer math might decide that since the equations boil down to a virtual NOP on the color values if performed in a floating point space, it can transfer the pixel untouched to the destination and avoid all the math entirely.</source>
          <target state="translated">あるいは,浮動小数点演算を使用する実装では,より正確な結果が得られ,丸め誤差がほとんどなく,元のピクセル値に戻ることになるかもしれません.あるいは,整数演算を使用する実装では,浮動小数点空間で実行された場合には,方程式が色の値に対して仮想的な NOP になるので,手つかずのピクセルを転送先に転送して,すべての演算を完全に回避することができると判断するかもしれません.</target>
        </trans-unit>
        <trans-unit id="76904d3b91288fa319395a0997c7224dfc8e1d06" translate="yes" xml:space="preserve">
          <source>Alternative set of begin/end quotes.</source>
          <target state="translated">開始/終了引用符の代替セット。</target>
        </trans-unit>
        <trans-unit id="c809dd63588089375a89d7a709c19f7e83316764" translate="yes" xml:space="preserve">
          <source>Alternatively, a scroll bar can represent a range of values. For example, if a scroll bar is used for scrolling through text, the width of the &quot;bubble&quot; (also called the &quot;thumb&quot; or &quot;scroll box&quot;) can be used to represent the amount of text that is visible. Here is an example of a scroll bar that represents a range:</source>
          <target state="translated">あるいは、スクロールバーは、値の範囲を表すことができます。例えば、スクロールバーがテキストをスクロールするために使用される場合、「バブル」(「サム」または「スクロールボックス」とも呼ばれる)の幅を使用して、表示されるテキストの量を表すことができます。ここでは、範囲を表すスクロールバーの例を示します。</target>
        </trans-unit>
        <trans-unit id="7c1f5fd3fdfc2ac1ae1beff97fecd792e1342c8b" translate="yes" xml:space="preserve">
          <source>Alternatively, an &lt;code&gt;XMLSignature&lt;/code&gt; may be created from an existing XML representation by invoking the &lt;a href=&quot;#unmarshalXMLSignature(javax.xml.crypto.dsig.XMLValidateContext)&quot;&gt;&lt;code&gt;unmarshalXMLSignature&lt;/code&gt;&lt;/a&gt; method and passing it a mechanism-specific &lt;a href=&quot;xmlvalidatecontext&quot;&gt;&lt;code&gt;XMLValidateContext&lt;/code&gt;&lt;/a&gt; instance containing the XML content:</source>
          <target state="translated">あるいは、 &lt;code&gt;XMLSignature&lt;/code&gt; 呼び出すことによって、既存のXML表現から作成されてもよい&lt;a href=&quot;#unmarshalXMLSignature(javax.xml.crypto.dsig.XMLValidateContext)&quot;&gt; &lt;code&gt;unmarshalXMLSignature&lt;/code&gt; の&lt;/a&gt;方法を、それを機構固有の通過&lt;a href=&quot;xmlvalidatecontext&quot;&gt; &lt;code&gt;XMLValidateContext&lt;/code&gt; &lt;/a&gt; XMLコンテンツを含むインスタンス。</target>
        </trans-unit>
        <trans-unit id="f2ef1d7cf5e1fdbbdab771fd539a3e091d52f6cf" translate="yes" xml:space="preserve">
          <source>Alternatively, an algorithmic process such as a database lookup or the parsing of a command line could be used as a controller, in which case the &lt;code&gt;activate&lt;/code&gt; method would simply look up or compute the settings, call methods on &lt;code&gt;IIOMetadata&lt;/code&gt; to set its state, and return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">または、データベースルックアップやコマンドラインの解析などのアルゴリズムプロセスをコントローラーとして使用することもできます。この場合、 &lt;code&gt;activate&lt;/code&gt; メソッドは単に設定を検索または計算し、 &lt;code&gt;IIOMetadata&lt;/code&gt; のメソッドを呼び出して状態を設定し、戻ります。 &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bc7911655e53c1a1de3c03f4258905341e85ad8b" translate="yes" xml:space="preserve">
          <source>Alternatively, an algorithmic process such as a database lookup or the parsing of a command line could be used as a controller, in which case the &lt;code&gt;activate&lt;/code&gt; method would simply look up or compute the settings, call the &lt;code&gt;IIOParam.setXXX&lt;/code&gt; methods, and return &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">または、データベースルックアップやコマンドラインの解析などのアルゴリズムプロセスをコントローラーとして使用することもできます。この場合、 &lt;code&gt;activate&lt;/code&gt; メソッドは単に設定を検索または計算し、 &lt;code&gt;IIOParam.setXXX&lt;/code&gt; メソッドを呼び出して &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ce2e737cf807e337bfadcc8c52f1e447586bce22" translate="yes" xml:space="preserve">
          <source>Alternatively, if you have a Java interface that corresponds to the management interface for the MBean, you can use an &lt;em&gt;MBean proxy&lt;/em&gt; like this:</source>
          <target state="translated">または、MBeanの管理インターフェースに対応するJavaインターフェースがある場合は、次のような&lt;em&gt;MBeanプロキシを&lt;/em&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="8b710f91e002c2cd0de85f107f01b1616b8ac390" translate="yes" xml:space="preserve">
          <source>Alternatively, it can be invoked through a proxy as follows:</source>
          <target state="translated">あるいは、以下のようにプロキシを介して呼び出すこともできます。</target>
        </trans-unit>
        <trans-unit id="f91ccca47c72634cc55179f792310408d0b7bdff" translate="yes" xml:space="preserve">
          <source>Alternatively, or for components that delegate painting to other objects, you can query during painting whether or not the component is in the midst of a print operation. The &lt;code&gt;isPaintingForPrint&lt;/code&gt; method provides this ability and its return value will be changed by this method: to &lt;code&gt;true&lt;/code&gt; immediately before rendering and to &lt;code&gt;false&lt;/code&gt; immediately after. With each change a property change event is fired on this component with the name &lt;code&gt;&quot;paintingForPrint&quot;&lt;/code&gt;.</source>
          <target state="translated">または、ペイントを他のオブジェクトに委任するコンポーネントの場合、ペイント中にコンポーネントが印刷操作の最中であるかどうかを照会できます。 &lt;code&gt;isPaintingForPrint&lt;/code&gt; の方法は、この機能を提供し、その戻り値は、この方法で変更されます：に &lt;code&gt;true&lt;/code&gt; すぐにレンダリングする前とに &lt;code&gt;false&lt;/code&gt; 直後。変更するたびに、プロパティ変更イベントが &lt;code&gt;&quot;paintingForPrint&quot;&lt;/code&gt; という名前でこのコンポーネントに対して発生します。</target>
        </trans-unit>
        <trans-unit id="eece1be65cd4b48344706307fa5167e9f4b23d25" translate="yes" xml:space="preserve">
          <source>Alternatively, several check boxes can be grouped together under the control of a single object, using the &lt;code&gt;CheckboxGroup&lt;/code&gt; class. In a check box group, at most one button can be in the &quot;on&quot; state at any given time. Clicking on a check box to turn it on forces any other check box in the same group that is on into the &quot;off&quot; state.</source>
          <target state="translated">または、 &lt;code&gt;CheckboxGroup&lt;/code&gt; クラスを使用して、単一のオブジェクトの制御下で複数のチェックボックスをグループ化することもできます。チェックボックスグループでは、最大1つのボタンをいつでも「オン」状態にすることができます。チェックボックスをクリックしてオンにすると、同じグループ内の他のチェックボックスがオンになり、「オフ」状態になります。</target>
        </trans-unit>
        <trans-unit id="98ba2008139a8f1ddc57b10e9710b6bbabc8f2c9" translate="yes" xml:space="preserve">
          <source>Alternatively, suppose we want to move a file to new directory, keeping the same file name, and replacing any existing file of that name in the directory:</source>
          <target state="translated">あるいは、ファイルを新しいディレクトリに移動し、同じファイル名を維持したまま、そのディレクトリ内の既存のファイルを置き換えたい場合を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="f7b67bf78b555ac6bd469d8f04fb467a6b5734ac" translate="yes" xml:space="preserve">
          <source>Alternatively, suppose we want to read file's POSIX attributes without following symbolic links:</source>
          <target state="translated">あるいは、シンボリックリンクに従わずにファイルのPOSIX属性を読みたいとします。</target>
        </trans-unit>
        <trans-unit id="c10d4a4d221d26d87123a366f1cf190342912202" translate="yes" xml:space="preserve">
          <source>Alternatively, the contents of the back buffer can be copied, or</source>
          <target state="translated">あるいは、バックバッファの内容をコピーしたり</target>
        </trans-unit>
        <trans-unit id="51f8ba091976038dcdbee2bef9cbe67fb38d6291" translate="yes" xml:space="preserve">
          <source>Alternatively, the default implementation may call &lt;a href=&quot;#getDeclaredAnnotations()&quot;&gt;&lt;code&gt;getDeclaredAnnotations()&lt;/code&gt;&lt;/a&gt; a single time and the returned array examined for both directly and indirectly present annotations. The results of calling &lt;a href=&quot;#getDeclaredAnnotations()&quot;&gt;&lt;code&gt;getDeclaredAnnotations()&lt;/code&gt;&lt;/a&gt; are assumed to be consistent with the results of calling &lt;a href=&quot;#getDeclaredAnnotation(java.lang.Class)&quot;&gt;&lt;code&gt;getDeclaredAnnotation(Class)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">または、デフォルトの実装で&lt;a href=&quot;#getDeclaredAnnotations()&quot;&gt; &lt;code&gt;getDeclaredAnnotations()&lt;/code&gt; &lt;/a&gt;を1回呼び出し、返された配列で直接および間接的に存在するアノテーションを調べます。呼び出しの結果&lt;a href=&quot;#getDeclaredAnnotations()&quot;&gt; &lt;code&gt;getDeclaredAnnotations()&lt;/code&gt; を&lt;/a&gt;呼び出した結果と一致すると仮定される&lt;a href=&quot;#getDeclaredAnnotation(java.lang.Class)&quot;&gt; &lt;code&gt;getDeclaredAnnotation(Class)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ce71aa8b3435b530752e6a94ac8ea87cc535be9d" translate="yes" xml:space="preserve">
          <source>Alternatively, the default implementation may call &lt;a href=&quot;annotatedelement#getDeclaredAnnotations--&quot;&gt;&lt;code&gt;getDeclaredAnnotations()&lt;/code&gt;&lt;/a&gt; a single time and the returned array examined for both directly and indirectly present annotations. The results of calling &lt;a href=&quot;annotatedelement#getDeclaredAnnotations--&quot;&gt;&lt;code&gt;getDeclaredAnnotations()&lt;/code&gt;&lt;/a&gt; are assumed to be consistent with the results of calling &lt;a href=&quot;annotatedelement#getDeclaredAnnotation-java.lang.Class-&quot;&gt;&lt;code&gt;getDeclaredAnnotation(Class)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">または、デフォルトの実装で&lt;a href=&quot;annotatedelement#getDeclaredAnnotations--&quot;&gt; &lt;code&gt;getDeclaredAnnotations()&lt;/code&gt; &lt;/a&gt;を1回呼び出すと、返された配列が直接的および間接的に存在する注釈について検査されます。呼び出しの結果&lt;a href=&quot;annotatedelement#getDeclaredAnnotations--&quot;&gt; &lt;code&gt;getDeclaredAnnotations()&lt;/code&gt; を&lt;/a&gt;呼び出した結果と一致すると仮定される&lt;a href=&quot;annotatedelement#getDeclaredAnnotation-java.lang.Class-&quot;&gt; &lt;code&gt;getDeclaredAnnotation(Class)&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="830b4756e8f48dc958241e95db2f51ebbba346d9" translate="yes" xml:space="preserve">
          <source>Alternatively, the following code does the same thing:</source>
          <target state="translated">あるいは、以下のコードでも同じことができます。</target>
        </trans-unit>
        <trans-unit id="1f3ef7aa005287034d76059a7fc2ec6dd9e95814" translate="yes" xml:space="preserve">
          <source>Alternatively, the key code may be obtained by calling &lt;code&gt;java.awt.event.KeyEvent.getExtendedKeyCodeForChar&lt;/code&gt;. The modifiers consist of any combination of:</source>
          <target state="translated">または、 &lt;code&gt;java.awt.event.KeyEvent.getExtendedKeyCodeForChar&lt;/code&gt; を呼び出してキーコードを取得することもできます。修飾子は、次の任意の組み合わせで構成されます。</target>
        </trans-unit>
        <trans-unit id="8e1d6a2f04c5d69e6cdfa99195dac79828d2b89f" translate="yes" xml:space="preserve">
          <source>Alternatively, the property could be set in the application by using the following code:</source>
          <target state="translated">また、以下のコードを使用してアプリケーションでプロパティを設定することもできます。</target>
        </trans-unit>
        <trans-unit id="ff60db6d2487402407da376d20aa9e7955473dcb" translate="yes" xml:space="preserve">
          <source>Alternatively, where a channel is ready for more than one operation, the</source>
          <target state="translated">あるいは、チャネルが複数の操作を行う準備ができている場合には</target>
        </trans-unit>
        <trans-unit id="715d5110bce43932f0430777060759513c578e8d" translate="yes" xml:space="preserve">
          <source>Alternatively, you could invoke &lt;code&gt;commitEdit&lt;/code&gt;, which would also commit the value.</source>
          <target state="translated">または、 &lt;code&gt;commitEdit&lt;/code&gt; を呼び出すこともできます。これにより、値もコミットされます。</target>
        </trans-unit>
        <trans-unit id="496960d24e5f42b2d382597e841238e28d493fe2" translate="yes" xml:space="preserve">
          <source>Alters the internal state of this &lt;code&gt;IIOMetadata&lt;/code&gt; object from a tree of XML DOM &lt;code&gt;Node&lt;/code&gt;s whose syntax is defined by the given metadata format.</source>
          <target state="translated">この &lt;code&gt;IIOMetadata&lt;/code&gt; オブジェクトの内部状態を、指定されたメタデータ形式で構文が定義されているXMLDOM &lt;code&gt;Node&lt;/code&gt; のツリーから変更します。</target>
        </trans-unit>
        <trans-unit id="98759ee1f8c390e76e9161d78ad47ac53a6542bf" translate="yes" xml:space="preserve">
          <source>Alters the internal state of this &lt;code&gt;IIOMetadata&lt;/code&gt; object from a tree of XML DOM &lt;code&gt;Node&lt;/code&gt;s whose syntax is defined by the given metadata format. The previous state is altered only as necessary to accommodate the nodes that are present in the given tree. If the tree structure or contents are invalid, an &lt;code&gt;IIOInvalidTreeException&lt;/code&gt; will be thrown.</source>
          <target state="translated">この &lt;code&gt;IIOMetadata&lt;/code&gt; オブジェクトの内部状態を、指定されたメタデータ形式で構文が定義されているXML DOM &lt;code&gt;Node&lt;/code&gt; のツリーから変更します。以前の状態は、特定のツリーに存在するノードに対応するために必要な場合にのみ変更されます。ツリー構造またはコンテンツが無効な場合、 &lt;code&gt;IIOInvalidTreeException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="dcec4fe7af9e3197ba7d923052b807febd088dc3" translate="yes" xml:space="preserve">
          <source>Although &quot;corner&quot; doesn't match any beans property signature, &lt;code&gt;PropertyChange&lt;/code&gt; events are generated with the property name set to the corner key.</source>
          <target state="translated">「corner」はどのBeanプロパティ署名とも一致しませんが、 &lt;code&gt;PropertyChange&lt;/code&gt; イベントは、プロパティ名をコーナーキーに設定して生成されます。</target>
        </trans-unit>
        <trans-unit id="9d336e450909c03473f64fcb71912ebf052be23f" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;Appendable&lt;/code&gt; methods throw an &lt;code&gt;IOException&lt;/code&gt;, this method does not. Instead, any &lt;code&gt;IOException&lt;/code&gt; is wrapped in a runtime exception.</source>
          <target state="translated">が &lt;code&gt;Appendable&lt;/code&gt; メソッドが投げる &lt;code&gt;IOException&lt;/code&gt; が、この方法ではありません。代わりに、 &lt;code&gt;IOException&lt;/code&gt; は実行時例外にラップされます。</target>
        </trans-unit>
        <trans-unit id="bc4b281b0ebaea575e8d37bb38a421441a5b6470" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;RandomAccessFile&lt;/code&gt; is not a subclass of &lt;code&gt;InputStream&lt;/code&gt;, this method behaves in exactly the same way as the &lt;a href=&quot;inputstream#read()&quot;&gt;&lt;code&gt;InputStream.read()&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;InputStream&lt;/code&gt;.</source>
          <target state="translated">けれども &lt;code&gt;RandomAccessFile&lt;/code&gt; のサブクラスではない &lt;code&gt;InputStream&lt;/code&gt; は、この方法は全く同じように動作&lt;a href=&quot;inputstream#read()&quot;&gt; &lt;code&gt;InputStream.read()&lt;/code&gt; &lt;/a&gt;のメソッド &lt;code&gt;InputStream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b7281d9732aa1d31f11570b8cc7003c934230f44" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;RandomAccessFile&lt;/code&gt; is not a subclass of &lt;code&gt;InputStream&lt;/code&gt;, this method behaves in exactly the same way as the &lt;a href=&quot;inputstream#read(byte%5B%5D)&quot;&gt;&lt;code&gt;InputStream.read(byte[])&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;InputStream&lt;/code&gt;.</source>
          <target state="translated">けれども &lt;code&gt;RandomAccessFile&lt;/code&gt; のサブクラスではない &lt;code&gt;InputStream&lt;/code&gt; 、と全く同じ方法で、この方法の挙動&lt;a href=&quot;inputstream#read(byte%5B%5D)&quot;&gt; &lt;code&gt;InputStream.read(byte[])&lt;/code&gt; &lt;/a&gt;の方法 &lt;code&gt;InputStream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a4ba685c2d85f9ab030b93e0fed452eccaa3b1f5" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;RandomAccessFile&lt;/code&gt; is not a subclass of &lt;code&gt;InputStream&lt;/code&gt;, this method behaves in exactly the same way as the &lt;a href=&quot;inputstream#read(byte%5B%5D,int,int)&quot;&gt;&lt;code&gt;InputStream.read(byte[], int, int)&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;InputStream&lt;/code&gt;.</source>
          <target state="translated">けれども &lt;code&gt;RandomAccessFile&lt;/code&gt; のサブクラスではありません &lt;code&gt;InputStream&lt;/code&gt; 、と全く同じ方法で、この方法の挙動&lt;a href=&quot;inputstream#read(byte%5B%5D,int,int)&quot;&gt; &lt;code&gt;InputStream.read(byte[], int, int)&lt;/code&gt; &lt;/a&gt;の方法 &lt;code&gt;InputStream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="706b4e9ae5c6063fc44a3cb6d22c9916d42ddd8d" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;RandomAccessFile&lt;/code&gt; is not a subclass of &lt;code&gt;InputStream&lt;/code&gt;, this method behaves in exactly the same way as the &lt;a href=&quot;inputstream#read--&quot;&gt;&lt;code&gt;InputStream.read()&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;InputStream&lt;/code&gt;.</source>
          <target state="translated">けれども &lt;code&gt;RandomAccessFile&lt;/code&gt; のサブクラスではない &lt;code&gt;InputStream&lt;/code&gt; は、この方法は全く同じように動作&lt;a href=&quot;inputstream#read--&quot;&gt; &lt;code&gt;InputStream.read()&lt;/code&gt; &lt;/a&gt;のメソッド &lt;code&gt;InputStream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="52dc1493af2951afd1ad8461bca05f6ed9765f0d" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;RandomAccessFile&lt;/code&gt; is not a subclass of &lt;code&gt;InputStream&lt;/code&gt;, this method behaves in exactly the same way as the &lt;a href=&quot;inputstream#read-byte:A-&quot;&gt;&lt;code&gt;InputStream.read(byte[])&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;InputStream&lt;/code&gt;.</source>
          <target state="translated">けれども &lt;code&gt;RandomAccessFile&lt;/code&gt; のサブクラスではない &lt;code&gt;InputStream&lt;/code&gt; 、と全く同じ方法で、この方法の挙動&lt;a href=&quot;inputstream#read-byte:A-&quot;&gt; &lt;code&gt;InputStream.read(byte[])&lt;/code&gt; &lt;/a&gt;の方法 &lt;code&gt;InputStream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="997ebc234ddf4f17bc2b71c1a3aa08039e972a6f" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;RandomAccessFile&lt;/code&gt; is not a subclass of &lt;code&gt;InputStream&lt;/code&gt;, this method behaves in exactly the same way as the &lt;a href=&quot;inputstream#read-byte:A-int-int-&quot;&gt;&lt;code&gt;InputStream.read(byte[], int, int)&lt;/code&gt;&lt;/a&gt; method of &lt;code&gt;InputStream&lt;/code&gt;.</source>
          <target state="translated">けれども &lt;code&gt;RandomAccessFile&lt;/code&gt; のサブクラスではない &lt;code&gt;InputStream&lt;/code&gt; 、と全く同じ方法で、この方法の挙動&lt;a href=&quot;inputstream#read-byte:A-int-int-&quot;&gt; &lt;code&gt;InputStream.read(byte[], int, int)&lt;/code&gt; &lt;/a&gt;の方法 &lt;code&gt;InputStream&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee58dd6776f3142220d333cee4b72504ef067247" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;null&lt;/code&gt; is an acceptable value to use in the lookup of stream printing services, it's typical to search for a particular desired format, such as Postscript(TM).</source>
          <target state="translated">が &lt;code&gt;null&lt;/code&gt; ストリーム印刷サービスのルックアップで使用するための許容値であり、そのようなポストスクリプト（登録商標）のような特定の所望のフォーマットを検索するための典型的なです。</target>
        </trans-unit>
        <trans-unit id="a3413186e86a3b598a8096c3581c83e4347653a9" translate="yes" xml:space="preserve">
          <source>Although SAX drivers (parsers) may choose to use this class to implement namespace handling, they are not required to do so. Applications must track namespace information themselves if they want to use namespace information.</source>
          <target state="translated">SAXドライバ(パーサ)はこのクラスを使用して名前空間処理を実装することを選択することができますが、そうすることは必須ではありません。アプリケーションが名前空間情報を使用したい場合は、アプリケーション自身が名前空間情報を追跡しなければなりません。</target>
        </trans-unit>
        <trans-unit id="4b83193e5243d6838f230cc88dd5ab5436dfcf24" translate="yes" xml:space="preserve">
          <source>Although a Raster may live anywhere in the plane, a SampleModel makes use of a simple coordinate system that starts at (0, 0). A Raster therefore contains a translation factor that allows pixel locations to be mapped between the Raster's coordinate system and that of the SampleModel. The translation from the SampleModel coordinate system to that of the Raster may be obtained by the getSampleModelTranslateX and getSampleModelTranslateY methods.</source>
          <target state="translated">Raster は平面上のどこにでも存在しますが、SampleModel は (0,0)から始まる単純な座標系を使用しています。そのため Raster にはピクセルの位置を Raster の座標系と SampleModel の座標系の間でマッピングするための変換係数が含まれています。SampleModel の座標系から Raster の座標系への変換は getSampleModelTranslateX と getSampleModelTranslateY メソッドで取得できます。</target>
        </trans-unit>
        <trans-unit id="2a5cfe92e9afbd46b66a6d39bc9b9f5a5ed8e023" translate="yes" xml:space="preserve">
          <source>Although all &lt;code&gt;Timer&lt;/code&gt;s perform their waiting using a single, shared thread (created by the first &lt;code&gt;Timer&lt;/code&gt; object that executes), the action event handlers for &lt;code&gt;Timer&lt;/code&gt;s execute on another thread -- the event-dispatching thread. This means that the action handlers for &lt;code&gt;Timer&lt;/code&gt;s can safely perform operations on Swing components. However, it also means that the handlers must execute quickly to keep the GUI responsive.</source>
          <target state="translated">すべての &lt;code&gt;Timer&lt;/code&gt; は、単一の共有スレッド（実行する最初の &lt;code&gt;Timer&lt;/code&gt; オブジェクトによって作成される）を使用して待機を実行しますが、 &lt;code&gt;Timer&lt;/code&gt; のアクションイベントハンドラーは、別のスレッド（イベントディスパッチスレッド）で実行されます。これは、 &lt;code&gt;Timer&lt;/code&gt; のアクションハンドラーがSwingコンポーネントで安全に操作を実行できることを意味します。ただし、GUIの応答性を維持するには、ハンドラーを迅速に実行する必要があることも意味します。</target>
        </trans-unit>
        <trans-unit id="f15159aadfd03b5c88e9b5b257f6b52833b55293" translate="yes" xml:space="preserve">
          <source>Although all object graphs may be written using just these three tags, the following definitions are included so that common data structures can be expressed more concisely:</source>
          <target state="translated">すべてのオブジェクトグラフはこの3つのタグだけで記述することができますが、共通のデータ構造をより簡潔に表現できるように、以下の定義が含まれています。</target>
        </trans-unit>
        <trans-unit id="b4c764bc1e5e3badebc4af7d094d1108bc346369" translate="yes" xml:space="preserve">
          <source>Although bytecode instructions can only refer to classes in a related class loader, this API can search for methods in any class, as long as a reference to its &lt;code&gt;Class&lt;/code&gt; object is available. Such cross-loader references are also possible with the Core Reflection API, and are impossible to bytecode instructions such as &lt;code&gt;invokestatic&lt;/code&gt; or &lt;code&gt;getfield&lt;/code&gt;. There is a &lt;a href=&quot;../securitymanager&quot;&gt;security manager API&lt;/a&gt; to allow applications to check such cross-loader references. These checks apply to both the &lt;code&gt;MethodHandles.Lookup&lt;/code&gt; API and the Core Reflection API (as found on &lt;a href=&quot;../class&quot;&gt;&lt;code&gt;Class&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">バイトコード命令は関連するクラスローダーのクラスのみを参照できますが、このAPIは、その &lt;code&gt;Class&lt;/code&gt; オブジェクトへの参照が利用可能である限り、任意のクラスのメソッドを検索できます。このようなクロスローダー参照はCore Reflection APIでも可能であり、 &lt;code&gt;invokestatic&lt;/code&gt; や &lt;code&gt;getfield&lt;/code&gt; などの命令をバイトコード化することはできません。アプリケーションがこのようなクロスローダー参照をチェックできるようにする&lt;a href=&quot;../securitymanager&quot;&gt;セキュリティマネージャAPI&lt;/a&gt;があります。これらのチェックは、 &lt;code&gt;MethodHandles.Lookup&lt;/code&gt; APIとコアリフレクションAPI（&lt;a href=&quot;../class&quot;&gt; &lt;code&gt;Class&lt;/code&gt; にあります&lt;/a&gt;）の両方に適用されます。</target>
        </trans-unit>
        <trans-unit id="5283ca4249a41978922de43f168c33fbf018f8a5" translate="yes" xml:space="preserve">
          <source>Although each step function will receive the current values of &lt;em&gt;all&lt;/em&gt; the loop variables, sometimes a step function only needs to observe the current value of its own variable. In that case, the step function may need to explicitly &lt;a href=&quot;#dropArguments(java.lang.invoke.MethodHandle,int,java.util.List)&quot;&gt;drop all preceding loop variables&lt;/a&gt;. This will require mentioning their types, in an expression like &lt;code&gt;dropArguments(step, 0, V0.class, ...)&lt;/code&gt;.</source>
          <target state="translated">各ステップ関数は&lt;em&gt;すべて&lt;/em&gt;のループ変数の現在の値を受け取りますが、ステップ関数がそれ自体の変数の現在の値を監視するだけでよい場合もあります。その場合、step関数は&lt;a href=&quot;#dropArguments(java.lang.invoke.MethodHandle,int,java.util.List)&quot;&gt;、先行するすべてのループ変数&lt;/a&gt;を明示的に削除する必要がある場合があります。これには、 &lt;code&gt;dropArguments(step, 0, V0.class, ...)&lt;/code&gt; ような式でそれらの型を記述する必要があります。</target>
        </trans-unit>
        <trans-unit id="2e6b498ac081c333a5e7dccebc72397f91a7a248" translate="yes" xml:space="preserve">
          <source>Although historically not precise, midnight also belongs to &quot;am&quot;, and noon belongs to &quot;pm&quot;, so on the same day, 12:00 am (midnight) &amp;lt; 12:01 am, and 12:00 pm (noon) &amp;lt; 12:01 pm</source>
          <target state="translated">歴史的に正確ではありませんが、真夜中も &quot;am&quot;に属し、正午は &quot;pm&quot;に属します。そのため、同じ日の午前12時（真夜中）&amp;lt;午前12時1分、午後12時（正午）未満&amp;lt;12 ：01 pm</target>
        </trans-unit>
        <trans-unit id="6196facb63b695b03e5463242120c8a88650bf9c" translate="yes" xml:space="preserve">
          <source>Although instances of &lt;code&gt;GlyphMetrics&lt;/code&gt; can be directly constructed, they are almost always obtained from a &lt;code&gt;GlyphVector&lt;/code&gt;. Once constructed, &lt;code&gt;GlyphMetrics&lt;/code&gt; objects are immutable.</source>
          <target state="translated">&lt;code&gt;GlyphMetrics&lt;/code&gt; のインスタンスは直接構築できますが、ほとんどの場合、 &lt;code&gt;GlyphVector&lt;/code&gt; から取得されます。構築されると、 &lt;code&gt;GlyphMetrics&lt;/code&gt; オブジェクトは不変です。</target>
        </trans-unit>
        <trans-unit id="f905ee39d136e8dad17bf00e772d9b8926b0fef7" translate="yes" xml:space="preserve">
          <source>Although it is generally safe to make updates to the UI immediately, when executing on the event dispatch thread, there is an exception : if a model listener tries to further change the UI before the UI has been updated to reflect a pending change then the UI may render incorrectly. This can happen if an application installed listener needs to update the UI in response to an event which will cause a change in the model structure. It is important to first allow component installed listeners to process this change, since there is no guarantee of the order in which listeners may be called. The solution is for the application listener to make the change using &lt;code&gt;SwingUtilities.invokeLater&lt;/code&gt; so that any changes to UI rendering will be done post processing all the model listeners installed by the component.</source>
          <target state="translated">通常、UIをすぐに更新するのは安全ですが、イベントディスパッチスレッドで実行する場合、例外があります。保留中の変更を反映するようにUIが更新される前に、モデルリスナーがUIをさらに変更しようとすると、UIが正しくレンダリングされない場合があります。これは、アプリケーションがインストールされたリスナーが、モデル構造の変更を引き起こすイベントに応答してUIを更新する必要がある場合に発生する可能性があります。リスナーが呼び出される順序は保証されていないため、最初にコンポーネントがインストールされたリスナーにこの変更の処理を許可することが重要です。解決策は、アプリケーションリスナーが &lt;code&gt;SwingUtilities.invokeLater&lt;/code&gt; を使用して変更を行い、UIレンダリングへの変更が、コンポーネントによってインストールされたすべてのモデルリスナーの後処理で行われるようにすることです。</target>
        </trans-unit>
        <trans-unit id="eed6aa3f7aa18148aeec790bea839fd8ed510d13" translate="yes" xml:space="preserve">
          <source>Although it is intended for user-defined and Ref parameters, this method may be used to set a null parameter of any JDBC type. If the parameter does not have a user-defined or REF type, the given typeName is ignored.</source>
          <target state="translated">これはユーザ定義パラメータおよびRefパラメータを対象としているが、このメソッドは任意のJDBC型のNULLパラメータを設定するために使用することができる。パラメータにユーザ定義型やREF型がない場合、指定されたtypeNameは無視されます。</target>
        </trans-unit>
        <trans-unit id="cbafba975ebbb2b99cbc259699cb4f03d8c590e4" translate="yes" xml:space="preserve">
          <source>Although it is legal according to RFC 2609 to have a &lt;code&gt;&lt;em&gt;url-path&lt;/em&gt;&lt;/code&gt; that begins with a semicolon, not all implementations of SLP allow it, so it is recommended to avoid that syntax.</source>
          <target state="translated">RFC 2609によると、セミコロンで始まる &lt;code&gt;&lt;em&gt;url-path&lt;/em&gt;&lt;/code&gt; を持つことは合法ですが、SLPのすべての実装で許可されているわけではないため、その構文を避けることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="77fe18df023e5bf5cfd36f8f91a8978672ae5dbc" translate="yes" xml:space="preserve">
          <source>Although it is possible to place arbitrary objects in the source Vector, users of this class may impose semantic constraints such as requiring all sources to be RenderedImages or RenderableImage. &lt;code&gt;ParameterBlock&lt;/code&gt; itself is merely a container and performs no checking on source or parameter types.</source>
          <target state="translated">ソースVectorに任意のオブジェクトを配置することは可能ですが、このクラスのユーザーは、すべてのソースをRenderedImagesまたはRenderableImageにする必要があるなどのセマンティック制約を課す場合があります。 &lt;code&gt;ParameterBlock&lt;/code&gt; 自体は単なるコンテナーであり、ソースまたはパラメーターのタイプのチェックを実行しません。</target>
        </trans-unit>
        <trans-unit id="b823c941de0f9e2d1d13378c9ba0bedf7c139268" translate="yes" xml:space="preserve">
          <source>Although it is recommended that attribute names be valid Java identifiers, it is possible for an attribute to be called &lt;code&gt;HeapMemoryUsage.used&lt;/code&gt;. This means that an &lt;code&gt;ObservedAttribute&lt;/code&gt; that is &lt;code&gt;HeapMemoryUsage.used&lt;/code&gt; could mean that the value to observe is either an attribute of that name, or the property &lt;code&gt;used&lt;/code&gt; within an attribute called &lt;code&gt;HeapMemoryUsage&lt;/code&gt;. So for compatibility reasons, when the &lt;code&gt;ObservedAttribute&lt;/code&gt; contains a period (&lt;code&gt;.&lt;/code&gt;), the monitor will check whether an attribute exists whose name is the full &lt;code&gt;ObservedAttribute&lt;/code&gt; string (&lt;code&gt;HeapMemoryUsage.used&lt;/code&gt; in the example). It does this by calling &lt;a href=&quot;../mbeanserver#getMBeanInfo-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getMBeanInfo&lt;/code&gt;&lt;/a&gt; for the observed MBean and looking for a contained &lt;a href=&quot;../mbeanattributeinfo&quot;&gt;&lt;code&gt;MBeanAttributeInfo&lt;/code&gt;&lt;/a&gt; with the given name. If one is found, then that is what is monitored. If more than one MBean is being observed, the behavior is unspecified if some of them have a &lt;code&gt;HeapMemoryUsage.used&lt;/code&gt; attribute and others do not. An implementation may therefore call &lt;code&gt;getMBeanInfo&lt;/code&gt; on just one of the MBeans in this case. The behavior is also unspecified if the result of the check changes while the monitor is active.</source>
          <target state="translated">属性名は有効なJava識別子にすることをお勧めしますが、属性を &lt;code&gt;HeapMemoryUsage.used&lt;/code&gt; と呼ぶことも可能です。これは、 &lt;code&gt;HeapMemoryUsage.used&lt;/code&gt; である &lt;code&gt;ObservedAttribute&lt;/code&gt; は、監視する値がその名前の属性、または &lt;code&gt;HeapMemoryUsage&lt;/code&gt; と呼ばれる属性内で &lt;code&gt;used&lt;/code&gt; プロパティであることを意味する可能性があることを意味します。したがって、互換性の理由から、 &lt;code&gt;ObservedAttribute&lt;/code&gt; にピリオド（ &lt;code&gt;.&lt;/code&gt; ）が含まれている場合、モニターは、完全な &lt;code&gt;ObservedAttribute&lt;/code&gt; 文字列（例では &lt;code&gt;HeapMemoryUsage.used&lt;/code&gt; )である名前の属性が存在するかどうかを確認します。これは、&lt;a href=&quot;../mbeanserver#getMBeanInfo-javax.management.ObjectName-&quot;&gt; &lt;code&gt;getMBeanInfo&lt;/code&gt; &lt;/a&gt;対象のMBeanの&lt;a href=&quot;../mbeanattributeinfo&quot;&gt; &lt;code&gt;MBeanAttributeInfo&lt;/code&gt; &lt;/a&gt;と、指定された名前を持つ含まれている MBeanAttributeInfoを探します。見つかった場合は、それが監視されます。複数のMBeanが &lt;code&gt;HeapMemoryUsage.used&lt;/code&gt; ている場合、それらの一部に HeapMemoryUsage.used属性があり、他の属性にはない場合の動作は不特定です。したがって、この場合、実装はMBeanの1つだけで &lt;code&gt;getMBeanInfo&lt;/code&gt; を呼び出すことができます。モニターがアクティブな間にチェックの結果が変化した場合の動作も不特定です。</target>
        </trans-unit>
        <trans-unit id="8896f7d66cabd9aaf02495d4b106e2b4e6cd6766" translate="yes" xml:space="preserve">
          <source>Although it is recommended that attribute names be valid Java identifiers, it is possible for an attribute to be called &lt;code&gt;HeapMemoryUsage.used&lt;/code&gt;. This means that an &lt;code&gt;ObservedAttribute&lt;/code&gt; that is &lt;code&gt;HeapMemoryUsage.used&lt;/code&gt; could mean that the value to observe is either an attribute of that name, or the property &lt;code&gt;used&lt;/code&gt; within an attribute called &lt;code&gt;HeapMemoryUsage&lt;/code&gt;. So for compatibility reasons, when the &lt;code&gt;ObservedAttribute&lt;/code&gt; contains a period (&lt;code&gt;.&lt;/code&gt;), the monitor will check whether an attribute exists whose name is the full &lt;code&gt;ObservedAttribute&lt;/code&gt; string (&lt;code&gt;HeapMemoryUsage.used&lt;/code&gt; in the example). It does this by calling &lt;a href=&quot;../mbeanserverconnection#getMBeanInfo(javax.management.ObjectName)&quot;&gt;&lt;code&gt;getMBeanInfo&lt;/code&gt;&lt;/a&gt; for the observed MBean and looking for a contained &lt;a href=&quot;../mbeanattributeinfo&quot;&gt;&lt;code&gt;MBeanAttributeInfo&lt;/code&gt;&lt;/a&gt; with the given name. If one is found, then that is what is monitored. If more than one MBean is being observed, the behavior is unspecified if some of them have a &lt;code&gt;HeapMemoryUsage.used&lt;/code&gt; attribute and others do not. An implementation may therefore call &lt;code&gt;getMBeanInfo&lt;/code&gt; on just one of the MBeans in this case. The behavior is also unspecified if the result of the check changes while the monitor is active.</source>
          <target state="translated">属性名は有効なJava識別子にすることをお勧めしますが、属性を &lt;code&gt;HeapMemoryUsage.used&lt;/code&gt; と呼ぶこともできます。これは、 &lt;code&gt;HeapMemoryUsage.used&lt;/code&gt; である &lt;code&gt;ObservedAttribute&lt;/code&gt; が、監視する値がその名前の属性、または &lt;code&gt;HeapMemoryUsage&lt;/code&gt; と呼ばれる属性内で &lt;code&gt;used&lt;/code&gt; プロパティのいずれかであることを意味する可能性があることを意味します。したがって、互換性の理由から、 &lt;code&gt;ObservedAttribute&lt;/code&gt; にピリオド（ &lt;code&gt;.&lt;/code&gt; ）が含まれている場合、モニターは、名前が完全な &lt;code&gt;ObservedAttribute&lt;/code&gt; 文字列（例では &lt;code&gt;HeapMemoryUsage.used&lt;/code&gt; )である属性が存在するかどうかを確認します。それは呼び出すことによってこれを行います&lt;a href=&quot;../mbeanserverconnection#getMBeanInfo(javax.management.ObjectName)&quot;&gt; &lt;code&gt;getMBeanInfo&lt;/code&gt; &lt;/a&gt;されたMBeanの&lt;a href=&quot;../mbeanattributeinfo&quot;&gt; &lt;code&gt;MBeanAttributeInfo&lt;/code&gt; &lt;/a&gt;で、指定された名前で含まれているMBeanAttributeInfoを探します。見つかった場合は、それが監視されます。複数のMBeanが &lt;code&gt;HeapMemoryUsage.used&lt;/code&gt; ている場合、それらの一部にHeapMemoryUsage.used属性があり、その他にはない場合、動作は指定されません。したがって、この場合、実装はMBeanの1つだけで &lt;code&gt;getMBeanInfo&lt;/code&gt; を呼び出すことができます。モニターがアクティブなときにチェックの結果が変化した場合の動作も指定されていません。</target>
        </trans-unit>
        <trans-unit id="d51c916aaa2897c9155c6a2858409731586ff69d" translate="yes" xml:space="preserve">
          <source>Although null is an acceptable value to use in the lookup of stream printing services, it's typical to search for a particular desired format, such as Postscript(TM).</source>
          <target state="translated">ストリーム印刷サービスのルックアップでは、NULLは許容できる値ですが、Postscript(TM)のような特定の希望するフォーマットを検索するのが一般的です。</target>
        </trans-unit>
        <trans-unit id="e7cbf3982fb342f3e5d0baab024fcbb7703bcfae" translate="yes" xml:space="preserve">
          <source>Although technically you can set the border on any object that inherits from &lt;code&gt;JComponent&lt;/code&gt;, the look and feel implementation of many standard Swing components doesn't work well with user-set borders. In general, when you want to set a border on a standard Swing component other than &lt;code&gt;JPanel&lt;/code&gt; or &lt;code&gt;JLabel&lt;/code&gt;, we recommend that you put the component in a &lt;code&gt;JPanel&lt;/code&gt; and set the border on the &lt;code&gt;JPanel&lt;/code&gt;.</source>
          <target state="translated">技術的には、 &lt;code&gt;JComponent&lt;/code&gt; から継承する任意のオブジェクトに境界線を設定できますが、多くの標準Swingコンポーネントのルックアンドフィール実装は、ユーザーが設定した境界線ではうまく機能しません。一般に、 &lt;code&gt;JPanel&lt;/code&gt; または &lt;code&gt;JLabel&lt;/code&gt; 以外の標準のSwingコンポーネントに境界線を設定する場合は、コンポーネントを &lt;code&gt;JPanel&lt;/code&gt; に配置し、 &lt;code&gt;JPanel&lt;/code&gt; に境界線を設定することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="68256607582007aeadeb4f31286ee85dfce2653f" translate="yes" xml:space="preserve">
          <source>Although the &lt;code&gt;Date&lt;/code&gt; class is intended to reflect coordinated universal time (UTC), it may not do so exactly, depending on the host environment of the Java Virtual Machine. Nearly all modern operating systems assume that 1 day = 24 &amp;times; 60 &amp;times; 60 = 86400 seconds in all cases. In UTC, however, about once every year or two there is an extra second, called a &quot;leap second.&quot; The leap second is always added as the last second of the day, and always on December 31 or June 30. For example, the last minute of the year 1995 was 61 seconds long, thanks to an added leap second. Most computer clocks are not accurate enough to be able to reflect the leap-second distinction.</source>
          <target state="translated">けれども &lt;code&gt;Date&lt;/code&gt; クラスは、世界協定時刻（UTC）を反映することを意図され、それは、Java仮想マシンのホスト環境に応じて、正確にそうではないことがあります。最近のほとんどすべてのオペレーティングシステムでは、1日= 24&amp;times;60&amp;times;60 = 86400秒と想定しています。ただし、UTCでは、約1〜2年に1回、「うるう秒」と呼ばれる余分な秒があります。うるう秒は常にその日の最後の秒として追加され、常に12月31日または6月30日に追加されます。たとえば、うるう秒が追加されたおかげで、1995年の最後の分は61秒でした。ほとんどのコンピューターの時計は、うるう秒の違いを反映できるほど正確ではありません。</target>
        </trans-unit>
        <trans-unit id="b3597cd90b2d4226bd1628706ab515d1f52f3d30" translate="yes" xml:space="preserve">
          <source>Although the &lt;code&gt;menuBar&lt;/code&gt; component is optional, the &lt;code&gt;layeredPane&lt;/code&gt;, &lt;code&gt;contentPane&lt;/code&gt;, and &lt;code&gt;glassPane&lt;/code&gt; always exist. Attempting to set them to &lt;code&gt;null&lt;/code&gt; generates an exception.</source>
          <target state="translated">けれども &lt;code&gt;menuBar&lt;/code&gt; コンポーネントはオプションである、 &lt;code&gt;layeredPane&lt;/code&gt; 、 &lt;code&gt;contentPane&lt;/code&gt; と &lt;code&gt;glassPane&lt;/code&gt; 常に存在します。それらを &lt;code&gt;null&lt;/code&gt; に設定しようとすると、例外が生成されます。</target>
        </trans-unit>
        <trans-unit id="7e9570dcfac4d179d32d45a3e5686908e47828e6" translate="yes" xml:space="preserve">
          <source>Although the Print Service API does not presently provide standardised support for administering a print service, monitoring of the print service is possible and a UI may provide for private update mechanisms.</source>
          <target state="translated">プリントサービスAPIは現在のところ、プリントサービスの管理のための標準化されたサポートを提供していませんが、プリントサービスの監視は可能であり、UIはプライベートな更新メカニズムを提供することができます。</target>
        </trans-unit>
        <trans-unit id="66f0cc05040c7530181c29f5081e467b4a163808" translate="yes" xml:space="preserve">
          <source>Although the basic operation of a read-write lock is straight-forward, there are many policy decisions that an implementation must make, which may affect the effectiveness of the read-write lock in a given application. Examples of these policies include:</source>
          <target state="translated">読み書きロックの基本的な操作は簡単ですが、実装では多くのポリシーの決定が必要であり、それが特定のアプリケーションでの読み書きロックの有効性に影響を与える可能性があります。これらのポリシーの例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="48612c752c3ca5eb784b0812426bed066b3885e9" translate="yes" xml:space="preserve">
          <source>Although the class is abstract, this should be called by all sub-classes.</source>
          <target state="translated">クラスは抽象化されていますが、これはすべてのサブクラスから呼び出されるべきです。</target>
        </trans-unit>
        <trans-unit id="2bb5921804d399af5ea77288bf09dd33cf48f190" translate="yes" xml:space="preserve">
          <source>Although the latency is expressed in microseconds, a synthesizer's actual measured delay may vary over a wider range than this resolution suggests. For example, a synthesizer might have a worst-case delay of a few milliseconds or more.</source>
          <target state="translated">レイテンシはマイクロ秒で表されますが、シンセサイザーの実際の遅延の測定値は、この分解能が示すよりも広い範囲で変化する可能性があります。例えば、シンセサイザーは最悪の場合、数ミリ秒以上の遅延を持つことがあります。</target>
        </trans-unit>
        <trans-unit id="7555049a02481a035a95baf49df2f6ceb8a36653" translate="yes" xml:space="preserve">
          <source>Although the selection is always contiguous, the logically selected text can be discontiguous on lines with mixed-direction text. The logical ranges of text selected can be retrieved using &lt;code&gt;getLogicalRangesForVisualSelection&lt;/code&gt;. For example, consider the text 'ABCdef' where capital letters indicate right-to-left text, rendered on a right-to-left line, with a visual selection from 0L (the leading edge of 'A') to 3T (the trailing edge of 'd'). The text appears as follows, with bold underlined areas representing the selection:</source>
          <target state="translated">選択は常に連続していますが、論理的に選択されたテキストは、方向が混在するテキストの行では不連続になる可能性があります。選択したテキストの論理範囲は、 &lt;code&gt;getLogicalRangesForVisualSelection&lt;/code&gt; を使用して取得できます。たとえば、大文字が右から左のテキストを示し、右から左の行にレンダリングされ、0L（「A」の前縁）から3T（末尾）までの視覚的な選択があるテキスト「ABCdef」について考えてみます。 'd'のエッジ）。テキストは次のように表示され、太字の下線付きの領域が選択を表します。</target>
        </trans-unit>
        <trans-unit id="8a95044f683bd0727b5122897360ca81a92ba466" translate="yes" xml:space="preserve">
          <source>Although this class implements Serializable, attempts to serialize a &lt;code&gt;LineEvent&lt;/code&gt; object will fail.</source>
          <target state="translated">このクラスはSerializableを実装していますが、 &lt;code&gt;LineEvent&lt;/code&gt; オブジェクトをシリアル化しようとすると失敗します。</target>
        </trans-unit>
        <trans-unit id="3ebff8bc4e393e23f9d2b1f0b189eba7c38128b5" translate="yes" xml:space="preserve">
          <source>Always redirect, except from HTTPS URLs to HTTP URLs.</source>
          <target state="translated">HTTPS URLからHTTP URLへのリダイレクト以外は常にリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="193b45a445104f3fa20af1b989ec4456afca07ce" translate="yes" xml:space="preserve">
          <source>Always redirect.</source>
          <target state="translated">常にリダイレクトしてください。</target>
        </trans-unit>
        <trans-unit id="c66943c16b4320d4edcd983915c5eb3557786b34" translate="yes" xml:space="preserve">
          <source>Always repaint in the parents coordinate system to make sure only one paint is performed by the &lt;code&gt;RepaintManager&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RepaintManager&lt;/code&gt; によって1つのペイントのみが実行されるように、常に親座標系で再ペイントします。</target>
        </trans-unit>
        <trans-unit id="765bfbabcab49f7b6ad1ed6eac9419a7a010d883" translate="yes" xml:space="preserve">
          <source>Always return a non-null valid &lt;a href=&quot;schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt; object. Note that when an error has been reported, there is no guarantee that the returned &lt;a href=&quot;schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt; object is meaningful.</source>
          <target state="translated">null以外の有効な&lt;a href=&quot;schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt;オブジェクトを常に返します。エラーが報告された場合、返された&lt;a href=&quot;schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt;オブジェクトに意味があるという保証はないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="3aafaf14035e9d71dc090522d84e883dbe0ade2a" translate="yes" xml:space="preserve">
          <source>Always return a non-null valid object.</source>
          <target state="translated">常に NULL ではない有効なオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="12b67d4043de955106e6e1b2262dc34ef10f5764" translate="yes" xml:space="preserve">
          <source>Always return non-null valid &lt;a href=&quot;schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">null以外の有効な&lt;a href=&quot;schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt;オブジェクトを常に返します。</target>
        </trans-unit>
        <trans-unit id="2570a452eded7ffdc87962a1b1f3195b1cd61ecc" translate="yes" xml:space="preserve">
          <source>Always return null, so that the parser will use the system identifier provided in the XML document. This method implements the SAX default behaviour: application writers can override it in a subclass to do special translations such as catalog lookups or URI redirection.</source>
          <target state="translated">パーサーがXMLドキュメントで提供されているシステム識別子を使用するように、常にnullを返します。このメソッドは、SAXのデフォルトの動作を実装しています。 アプリケーションライターは、カタログ検索やURIリダイレクトなどの特殊な変換を行うために、サブクラスでこのメソッドをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="9ad6eb95beb4af532c7cb136570f2183f510fb2a" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;&quot;[]&quot;&lt;/code&gt;.</source>
          <target state="translated">常に &lt;code&gt;&quot;[]&quot;&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="a7f385ffe2ff8d164beb295d82218670c35cdc85" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; because a &lt;code&gt;DelayQueue&lt;/code&gt; is not capacity constrained.</source>
          <target state="translated">&lt;code&gt;DelayQueue&lt;/code&gt; は容量に制約がないため、常に &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c45bd045d65a4df4c0dd414d55062344a9778187" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; because a &lt;code&gt;LinkedTransferQueue&lt;/code&gt; is not capacity constrained.</source>
          <target state="translated">&lt;code&gt;LinkedTransferQueue&lt;/code&gt; は容量に制約がないため、常に &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b57fa304cd9c670483f8ed783fd0b672996908e5" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; because a &lt;code&gt;PriorityBlockingQueue&lt;/code&gt; is not capacity constrained.</source>
          <target state="translated">&lt;code&gt;PriorityBlockingQueue&lt;/code&gt; は容量に制約がないため、常に &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="3e1cbbf5fa0f0ebd22af53c15e53fea0d74701c5" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;false&lt;/code&gt; because this input stream does not support the &lt;a href=&quot;#mark(int)&quot;&gt;&lt;code&gt;mark()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#reset()&quot;&gt;&lt;code&gt;reset()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">この入力ストリームは&lt;a href=&quot;#mark(int)&quot;&gt; &lt;code&gt;mark()&lt;/code&gt; &lt;/a&gt;&lt;a href=&quot;#reset()&quot;&gt; &lt;code&gt;reset()&lt;/code&gt; &lt;/a&gt;メソッドとreset（）メソッドをサポートしていないため、常に &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1c574375d98cd142b7ad53177ac76c170183c447" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;false&lt;/code&gt; because this input stream does not support the &lt;a href=&quot;deflaterinputstream#mark-int-&quot;&gt;&lt;code&gt;mark()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;deflaterinputstream#reset--&quot;&gt;&lt;code&gt;reset()&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">この入力ストリームは&lt;a href=&quot;deflaterinputstream#mark-int-&quot;&gt; &lt;code&gt;mark()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;deflaterinputstream#reset--&quot;&gt; &lt;code&gt;reset()&lt;/code&gt; &lt;/a&gt;メソッドをサポートしていないため、常に &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4d59977e931ab40859349ce6039d8d8b24f4fd90" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">常に &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8095cb5b5fdb4fc5e113690f76ed9cbd251fddac" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;false&lt;/code&gt;. A &lt;code&gt;SynchronousQueue&lt;/code&gt; has no internal capacity.</source>
          <target state="translated">常に &lt;code&gt;false&lt;/code&gt; を返します。A &lt;code&gt;SynchronousQueue&lt;/code&gt; は何の内部容量がありません。</target>
        </trans-unit>
        <trans-unit id="37f8783ec87b8ec4f904460e4f8016b2501c2094" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;null&lt;/code&gt; because &lt;code&gt;JInternalFrame&lt;/code&gt;s must always be roots of a focus traversal cycle.</source>
          <target state="translated">&lt;code&gt;JInternalFrame&lt;/code&gt; は常にフォーカストラバーサルサイクルのルートである必要があるため、常に &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="14d38f10151eab11357f4f6e837227c2f9e48cd5" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;null&lt;/code&gt; because Windows have no ancestors; they represent the top of the Component hierarchy.</source>
          <target state="translated">Windowsには祖先がないため、常に &lt;code&gt;null&lt;/code&gt; を返します。これらは、コンポーネント階層の最上位を表します。</target>
        </trans-unit>
        <trans-unit id="e89bec8fb850573de2289bb9dc31383490faf82d" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">常に &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f03fd4a8d8315e9e933881f451e18d885e707d64" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;null&lt;/code&gt;. A &lt;code&gt;SynchronousQueue&lt;/code&gt; does not return elements unless actively waited on.</source>
          <target state="translated">常に &lt;code&gt;null&lt;/code&gt; を返します。A &lt;code&gt;SynchronousQueue&lt;/code&gt; は積極的に待っていない限り、要素を返しません。</target>
        </trans-unit>
        <trans-unit id="c86363784a4e703b5bbcae26a963bc7d72f6b044" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;true&lt;/code&gt; because all &lt;code&gt;JInternalFrame&lt;/code&gt;s must be roots of a focus traversal cycle.</source>
          <target state="translated">すべての &lt;code&gt;JInternalFrame&lt;/code&gt; はフォーカストラバーサルサイクルのルートである必要が &lt;code&gt;true&lt;/code&gt; ため、常にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="c48cc222a8a5d731f8a9af708e07765d8d4afe19" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;true&lt;/code&gt; because all Windows must be roots of a focus traversal cycle.</source>
          <target state="translated">すべてのWindowsはフォーカストラバーサルサイクルのルートである必要が &lt;code&gt;true&lt;/code&gt; ため、常にtrueを返します。</target>
        </trans-unit>
        <trans-unit id="fff6aca074bea42f15ac30930a3329f26931ba08" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;true&lt;/code&gt; to cause painting to originate from &lt;code&gt;JLayer&lt;/code&gt;, or one of its ancestors.</source>
          <target state="translated">ペイントが &lt;code&gt;JLayer&lt;/code&gt; またはその祖先の1つから発生するようにするには、常に &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="363877f1c43efa3dfd2bb302fd7fa8e11ffea1c4" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">常に &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ff3d9c5517735a77232228f1de018b754c387c3c" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;true&lt;/code&gt;. A &lt;code&gt;SynchronousQueue&lt;/code&gt; has no internal capacity.</source>
          <target state="translated">常に &lt;code&gt;true&lt;/code&gt; を返します。A &lt;code&gt;SynchronousQueue&lt;/code&gt; は何の内部容量がありません。</target>
        </trans-unit>
        <trans-unit id="98af7a85b9596600754922ec350a977f82f8bd65" translate="yes" xml:space="preserve">
          <source>Always returns zero.</source>
          <target state="translated">常にゼロを返します。</target>
        </trans-unit>
        <trans-unit id="28bb49af2a71608e74996c25d4aeabf4c67c9cac" translate="yes" xml:space="preserve">
          <source>Always returns zero. A &lt;code&gt;SynchronousQueue&lt;/code&gt; has no internal capacity.</source>
          <target state="translated">常にゼロを返します。A &lt;code&gt;SynchronousQueue&lt;/code&gt; は何の内部容量がありません。</target>
        </trans-unit>
        <trans-unit id="2f2e32b964f816773e5ccdcfec64829cd9034c4f" translate="yes" xml:space="preserve">
          <source>Always throws RejectedExecutionException.</source>
          <target state="translated">常にRejectedExecutionExceptionをスローします。</target>
        </trans-unit>
        <trans-unit id="7199aa6ac57b48c0101051672b24dc9e74d2efc5" translate="yes" xml:space="preserve">
          <source>Always throws an &lt;a href=&quot;../unsupportedoperationexception&quot;&gt;&lt;code&gt;UnsupportedOperationException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">常に&lt;a href=&quot;../unsupportedoperationexception&quot;&gt; &lt;code&gt;UnsupportedOperationException&lt;/code&gt; を&lt;/a&gt;スローします。</target>
        </trans-unit>
        <trans-unit id="6c8a0b7f294232ad12f2ce2f73c040adbce56365" translate="yes" xml:space="preserve">
          <source>Always throws an &lt;a href=&quot;../unsupportedoperationexception&quot;&gt;&lt;code&gt;UnsupportedOperationException&lt;/code&gt;&lt;/a&gt;. This kind of call site cannot change its target.</source>
          <target state="translated">常に&lt;a href=&quot;../unsupportedoperationexception&quot;&gt; &lt;code&gt;UnsupportedOperationException&lt;/code&gt; を&lt;/a&gt;スローします。この種の呼び出しサイトはそのターゲットを変更できません。</target>
        </trans-unit>
        <trans-unit id="325105d0ca8c8cc88e846c97f7d636745a2ec908" translate="yes" xml:space="preserve">
          <source>Am array of ISO 639 two-letter language codes.</source>
          <target state="translated">ISO 639の2文字言語コードの配列。</target>
        </trans-unit>
        <trans-unit id="50c1dea8baee388447f721913a2bfdf5431c1038" translate="yes" xml:space="preserve">
          <source>Am/pm marker</source>
          <target state="translated">am/pmマーカ</target>
        </trans-unit>
        <trans-unit id="0e3c2da3fe0e6590419011663ae966dc59482834" translate="yes" xml:space="preserve">
          <source>America/Los_Angeles; Z; -08:30</source>
          <target state="translated">アメリカ/ロサンゼルス;Z;-08:30</target>
        </trans-unit>
        <trans-unit id="29e2c1dccfddb6a4eddc8f7e6df352c49eb9d772" translate="yes" xml:space="preserve">
          <source>Among the applications of this method is to await completion of a set of independent CompletableFutures before continuing a program, as in: &lt;code&gt;CompletableFuture.allOf(c1, c2,
 c3).join();&lt;/code&gt;.</source>
          <target state="translated">このメソッドのアプリケーションの1つは、次のように、プログラムを続行する前に、独立したCompletableFutureのセットの完了を待つことです &lt;code&gt;CompletableFuture.allOf(c1, c2, c3).join();&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eedd9d2ea268f140fe29669d45dd24d7b37284c4" translate="yes" xml:space="preserve">
          <source>Among the facilities provided by the &lt;code&gt;System&lt;/code&gt; class are standard input, standard output, and error output streams; access to externally defined properties and environment variables; a means of loading files and libraries; and a utility method for quickly copying a portion of an array.</source>
          <target state="translated">&lt;code&gt;System&lt;/code&gt; クラスが提供する機能には、標準入力、標準出力、およびエラー出力ストリームがあります。外部で定義されたプロパティと環境変数へのアクセス。ファイルとライブラリをロードする手段。配列の一部をすばやくコピーするためのユーティリティメソッド。</target>
        </trans-unit>
        <trans-unit id="99690d58d4abd10cd0938a7adcb56ded08ef66ad" translate="yes" xml:space="preserve">
          <source>An</source>
          <target state="translated">An</target>
        </trans-unit>
        <trans-unit id="78b893ce6181cb63b5db46249eeb66668483c457" translate="yes" xml:space="preserve">
          <source>An &quot;IndexedPropertyChange&quot; event gets delivered whenever a component that conforms to the JavaBeans&amp;trade; specification (a &quot;bean&quot;) changes a bound indexed property.</source>
          <target state="translated">「IndexedPropertyChange」イベントは、JavaBeans&amp;trade;仕様に準拠するコンポーネント（「bean」）がバインドされたインデックス付きプロパティを変更するたびに配信されます。</target>
        </trans-unit>
        <trans-unit id="eaba1946db1dc9f7ab41cc4bb65e95001a2a2ddf" translate="yes" xml:space="preserve">
          <source>An &quot;IndexedPropertyChange&quot; event gets delivered whenever a component that conforms to the JavaBeans&amp;trade; specification (a &quot;bean&quot;) changes a bound indexed property. This class is an extension of &lt;code&gt;PropertyChangeEvent&lt;/code&gt; but contains the index of the property that has changed.</source>
          <target state="translated">「IndexedPropertyChange」イベントは、JavaBeans&amp;trade;仕様に準拠するコンポーネント（「bean」）がバインドされたインデックス付きプロパティを変更するたびに配信されます。このクラスは &lt;code&gt;PropertyChangeEvent&lt;/code&gt; の拡張ですが、変更されたプロパティのインデックスが含まれています。</target>
        </trans-unit>
        <trans-unit id="30a1dc6ab7158fbcccec0aa3749e4b8fd5acd663" translate="yes" xml:space="preserve">
          <source>An &quot;exports package-name [to module-name-list]&quot; directive.</source>
          <target state="translated">exports package-name [to module-name-list]ディレクティブ。</target>
        </trans-unit>
        <trans-unit id="fbe08fe96667321621dab85acac5aed1376efda5" translate="yes" xml:space="preserve">
          <source>An &quot;opens package-name [to module-name-list]&quot; directive.</source>
          <target state="translated">open package-name [to module-name-list]ディレクティブ。</target>
        </trans-unit>
        <trans-unit id="6eaf05c4f3a9998b29776bcd0cd378b643bd212a" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../../../../../java.base/java/lang/unsupportedoperationexception&quot;&gt;&lt;code&gt;UnsupportedOperationException&lt;/code&gt;&lt;/a&gt; is &lt;strong&gt;always&lt;/strong&gt; thrown by this method.</source>
          <target state="translated">アン&lt;a href=&quot;../../../../../java.base/java/lang/unsupportedoperationexception&quot;&gt; &lt;code&gt;UnsupportedOperationException&lt;/code&gt; が&lt;/a&gt;され&lt;strong&gt;、常に&lt;/strong&gt;このメソッドによってスロー。</target>
        </trans-unit>
        <trans-unit id="6390d8ceda0a81569067edad2a8963d82f2a85a0" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../../../../java.base/java/lang/reflect/invocationhandler&quot;&gt;&lt;code&gt;InvocationHandler&lt;/code&gt;&lt;/a&gt; that forwards getter methods to a &lt;a href=&quot;compositedata&quot;&gt;&lt;code&gt;CompositeData&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">getterメソッドを&lt;a href=&quot;compositedata&quot;&gt; &lt;code&gt;CompositeData&lt;/code&gt; に&lt;/a&gt;転送する&lt;a href=&quot;../../../../java.base/java/lang/reflect/invocationhandler&quot;&gt; &lt;code&gt;InvocationHandler&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="5d976aae01a366ade383d6d6de69ee4972157b18" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../../../../java.base/java/lang/reflect/invocationhandler&quot;&gt;&lt;code&gt;InvocationHandler&lt;/code&gt;&lt;/a&gt; that forwards getter methods to a &lt;a href=&quot;compositedata&quot;&gt;&lt;code&gt;CompositeData&lt;/code&gt;&lt;/a&gt;. If you have an interface that contains only getter methods (such as &lt;code&gt;String getName()&lt;/code&gt; or &lt;code&gt;boolean isActive()&lt;/code&gt;) then you can use this class in conjunction with the &lt;a href=&quot;../../../../java.base/java/lang/reflect/proxy&quot;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt; class to produce an implementation of the interface where each getter returns the value of the corresponding item in a &lt;code&gt;CompositeData&lt;/code&gt;.</source>
          <target state="translated">getterメソッドを&lt;a href=&quot;compositedata&quot;&gt; &lt;code&gt;CompositeData&lt;/code&gt; に&lt;/a&gt;転送する&lt;a href=&quot;../../../../java.base/java/lang/reflect/invocationhandler&quot;&gt; &lt;code&gt;InvocationHandler&lt;/code&gt; &lt;/a&gt;。ゲッターメソッド（ &lt;code&gt;String getName()&lt;/code&gt; や &lt;code&gt;boolean isActive()&lt;/code&gt; など）のみを含むインターフェースがある場合は、このクラスを&lt;a href=&quot;../../../../java.base/java/lang/reflect/proxy&quot;&gt; &lt;code&gt;Proxy&lt;/code&gt; &lt;/a&gt;クラスと組み合わせて使用​​して、各ゲッターがの値を返すインターフェースの実装を作成できます。 &lt;code&gt;CompositeData&lt;/code&gt; 内の対応するアイテム。</target>
        </trans-unit>
        <trans-unit id="b37cc07d93916ebf6d69d976e6587bd6bf4aa717" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../../../java/lang/reflect/invocationhandler&quot;&gt;&lt;code&gt;InvocationHandler&lt;/code&gt;&lt;/a&gt; that forwards getter methods to a &lt;a href=&quot;compositedata&quot;&gt;&lt;code&gt;CompositeData&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">getterメソッドを&lt;a href=&quot;compositedata&quot;&gt; &lt;code&gt;CompositeData&lt;/code&gt; に&lt;/a&gt;転送する&lt;a href=&quot;../../../java/lang/reflect/invocationhandler&quot;&gt; &lt;code&gt;InvocationHandler&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="ea7470fbda70d7692e2d346d7ec92dcfeb136199" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../../../java/lang/reflect/invocationhandler&quot;&gt;&lt;code&gt;InvocationHandler&lt;/code&gt;&lt;/a&gt; that forwards getter methods to a &lt;a href=&quot;compositedata&quot;&gt;&lt;code&gt;CompositeData&lt;/code&gt;&lt;/a&gt;. If you have an interface that contains only getter methods (such as &lt;code&gt;String getName()&lt;/code&gt; or &lt;code&gt;boolean isActive()&lt;/code&gt;) then you can use this class in conjunction with the &lt;a href=&quot;../../../java/lang/reflect/proxy&quot;&gt;&lt;code&gt;Proxy&lt;/code&gt;&lt;/a&gt; class to produce an implementation of the interface where each getter returns the value of the corresponding item in a &lt;code&gt;CompositeData&lt;/code&gt;.</source>
          <target state="translated">getterメソッドを&lt;a href=&quot;compositedata&quot;&gt; &lt;code&gt;CompositeData&lt;/code&gt; に&lt;/a&gt;転送する&lt;a href=&quot;../../../java/lang/reflect/invocationhandler&quot;&gt; &lt;code&gt;InvocationHandler&lt;/code&gt; &lt;/a&gt;。getterメソッドのみを含むインターフェース（ &lt;code&gt;String getName()&lt;/code&gt; や &lt;code&gt;boolean isActive()&lt;/code&gt; など）がある場合、このクラスを&lt;a href=&quot;../../../java/lang/reflect/proxy&quot;&gt; &lt;code&gt;Proxy&lt;/code&gt; &lt;/a&gt;クラスと組み合わせて使用​​して、各getterが値を返すインターフェースの実装を作成できます。 &lt;code&gt;CompositeData&lt;/code&gt; の対応する項目。</target>
        </trans-unit>
        <trans-unit id="7918c71a929d07515a8383c376f1c7b452e3d1ac" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../instant&quot;&gt;&lt;code&gt;Instant&lt;/code&gt;&lt;/a&gt; represents an instantaneous point on the time-line. On their own, an instant has insufficient information to allow a local date-time to be obtained. Only when paired with an offset or time-zone can the local date or time be calculated.</source>
          <target state="translated">&lt;a href=&quot;../instant&quot;&gt; &lt;code&gt;Instant&lt;/code&gt; &lt;/a&gt;タイムライン上の瞬時のポイントを表します。インスタント自体には、ローカルの日時を取得するための十分な情報がありません。オフセットまたはタイムゾーンと組み合わせた場合にのみ、ローカルの日付または時刻を計算できます。</target>
        </trans-unit>
        <trans-unit id="c291da958b4f01738011692193a5b1393caec4c4" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../io/ioexception&quot;&gt;&lt;code&gt;IOException&lt;/code&gt;&lt;/a&gt; occurs while reading a provider-configuration file;</source>
          <target state="translated">アン&lt;a href=&quot;../io/ioexception&quot;&gt; &lt;code&gt;IOException&lt;/code&gt; が&lt;/a&gt;プロバイダ構成ファイルの読み取り中に発生します。</target>
        </trans-unit>
        <trans-unit id="cd8901ae798fc06b17631034613ef16ee906fe23" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;../io/ioexception&quot;&gt;&lt;code&gt;IOException&lt;/code&gt;&lt;/a&gt; occurs while reading the provider-configuration file;</source>
          <target state="translated">アン&lt;a href=&quot;../io/ioexception&quot;&gt; &lt;code&gt;IOException&lt;/code&gt; が&lt;/a&gt;プロバイダ構成ファイルの読み取り中に発生します。</target>
        </trans-unit>
        <trans-unit id="991166bb4b552ba27b6ade464676c5a4017c648c" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;coderresult#unmappableForLength(int)&quot;&gt;unmappable-character&lt;/a&gt; result indicates that an unmappable-character error has been detected. The bytes that decode the unmappable character begin at the input buffer's (possibly incremented) position; the number of such bytes may be determined by invoking the result object's &lt;a href=&quot;coderresult#length()&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; method. This case applies only if the &lt;a href=&quot;#onUnmappableCharacter(java.nio.charset.CodingErrorAction)&quot;&gt;unmappable action&lt;/a&gt; of this decoder is &lt;a href=&quot;codingerroraction#REPORT&quot;&gt;&lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt;&lt;/a&gt;; otherwise the unmappable character will be ignored or replaced, as requested.</source>
          <target state="translated">&lt;a href=&quot;coderresult#unmappableForLength(int)&quot;&gt;マップ不可文字&lt;/a&gt;結果がマップ不可文字エラーが検出されたことを示しています。マップ不可能な文字をデコードするバイトは、入力バッファーの（場合によってはインクリメントされた）位置から始まります。このようなバイト数は、結果オブジェクトの&lt;a href=&quot;coderresult#length()&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって決定できます。この場合は、場合にのみ適用さ&lt;a href=&quot;#onUnmappableCharacter(java.nio.charset.CodingErrorAction)&quot;&gt;マップできないアクション&lt;/a&gt;このデコーダのが&lt;a href=&quot;codingerroraction#REPORT&quot;&gt; &lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt; &lt;/a&gt;。それ以外の場合、マップできない文字は、要求に応じて無視または置換されます。</target>
        </trans-unit>
        <trans-unit id="3e259c2bf65d718506fbd53e72099c1ba454873b" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;coderresult#unmappableForLength(int)&quot;&gt;unmappable-character&lt;/a&gt; result indicates that an unmappable-character error has been detected. The characters that encode the unmappable character begin at the input buffer's (possibly incremented) position; the number of such characters may be determined by invoking the result object's &lt;a href=&quot;coderresult#length()&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; method. This case applies only if the &lt;a href=&quot;#onUnmappableCharacter(java.nio.charset.CodingErrorAction)&quot;&gt;unmappable action&lt;/a&gt; of this encoder is &lt;a href=&quot;codingerroraction#REPORT&quot;&gt;&lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt;&lt;/a&gt;; otherwise the unmappable character will be ignored or replaced, as requested.</source>
          <target state="translated">&lt;a href=&quot;coderresult#unmappableForLength(int)&quot;&gt;マップ不可文字&lt;/a&gt;結果がマップ不可文字エラーが検出されたことを示しています。マップ不可能な文字をエンコードする文字は、入力バッファーの（場合によってはインクリメントされた）位置から始まります。このような文字の数は、結果オブジェクトの&lt;a href=&quot;coderresult#length()&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって決定できます。この場合は、場合にのみ適用さ&lt;a href=&quot;#onUnmappableCharacter(java.nio.charset.CodingErrorAction)&quot;&gt;マップできないアクション&lt;/a&gt;このエンコーダのが&lt;a href=&quot;codingerroraction#REPORT&quot;&gt; &lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt; &lt;/a&gt;。それ以外の場合、マップできない文字は、要求に応じて無視または置換されます。</target>
        </trans-unit>
        <trans-unit id="ddc2cfe54fe2569a712d60c27c4d6401768a7dcc" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;coderresult#unmappableForLength-int-&quot;&gt;unmappable-character&lt;/a&gt; result indicates that an unmappable-character error has been detected. The bytes that decode the unmappable character begin at the input buffer's (possibly incremented) position; the number of such bytes may be determined by invoking the result object's &lt;a href=&quot;coderresult#length--&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; method. This case applies only if the &lt;a href=&quot;charsetdecoder#onUnmappableCharacter-java.nio.charset.CodingErrorAction-&quot;&gt;unmappable action&lt;/a&gt; of this decoder is &lt;a href=&quot;codingerroraction#REPORT&quot;&gt;&lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt;&lt;/a&gt;; otherwise the unmappable character will be ignored or replaced, as requested.</source>
          <target state="translated">&lt;a href=&quot;coderresult#unmappableForLength-int-&quot;&gt;マップ不可文字&lt;/a&gt;結果がマップ不可文字エラーが検出されたことを示しています。マップできない文字をデコードするバイトは、入力バッファーの（インクリメントされている可能性がある）位置から始まります。そのようなバイト数は、結果オブジェクトの&lt;a href=&quot;coderresult#length--&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって決定できます。この場合は、場合にのみ適用さ&lt;a href=&quot;charsetdecoder#onUnmappableCharacter-java.nio.charset.CodingErrorAction-&quot;&gt;マップできないアクション&lt;/a&gt;このデコーダのが&lt;a href=&quot;codingerroraction#REPORT&quot;&gt; &lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt; &lt;/a&gt;。それ以外の場合、マップできない文字は、要求に応じて無視または置換されます。</target>
        </trans-unit>
        <trans-unit id="24ad5d778674482cb1fadf96bfafeed35f4ee8e7" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;coderresult#unmappableForLength-int-&quot;&gt;unmappable-character&lt;/a&gt; result indicates that an unmappable-character error has been detected. The characters that encode the unmappable character begin at the input buffer's (possibly incremented) position; the number of such characters may be determined by invoking the result object's &lt;a href=&quot;coderresult#length--&quot;&gt;&lt;code&gt;length&lt;/code&gt;&lt;/a&gt; method. This case applies only if the &lt;a href=&quot;charsetencoder#onUnmappableCharacter-java.nio.charset.CodingErrorAction-&quot;&gt;unmappable action&lt;/a&gt; of this encoder is &lt;a href=&quot;codingerroraction#REPORT&quot;&gt;&lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt;&lt;/a&gt;; otherwise the unmappable character will be ignored or replaced, as requested.</source>
          <target state="translated">&lt;a href=&quot;coderresult#unmappableForLength-int-&quot;&gt;マップ不可文字&lt;/a&gt;結果がマップ不可文字エラーが検出されたことを示しています。マップできない文字をエンコードする文字は、入力バッファーの（インクリメントされる可能性がある）位置から始まります。そのような文字の数は、結果オブジェクトの&lt;a href=&quot;coderresult#length--&quot;&gt; &lt;code&gt;length&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって決定できます。この場合は、場合にのみ適用さ&lt;a href=&quot;charsetencoder#onUnmappableCharacter-java.nio.charset.CodingErrorAction-&quot;&gt;マップできないアクション&lt;/a&gt;このエンコーダのが&lt;a href=&quot;codingerroraction#REPORT&quot;&gt; &lt;code&gt;CodingErrorAction.REPORT&lt;/code&gt; &lt;/a&gt;。それ以外の場合、要求に応じて、マップできない文字は無視または置換されます。</target>
        </trans-unit>
        <trans-unit id="274190b0577f0d0dcd4180b3f81f886e201a370b" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;enumeration&quot;&gt;&lt;code&gt;Enumeration&lt;/code&gt;&lt;/a&gt; can be converted into an &lt;code&gt;Iterator&lt;/code&gt; by using the &lt;a href=&quot;enumeration#asIterator()&quot;&gt;&lt;code&gt;Enumeration.asIterator()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">AN&lt;a href=&quot;enumeration&quot;&gt; &lt;code&gt;Enumeration&lt;/code&gt; &lt;/a&gt;に変換することができる &lt;code&gt;Iterator&lt;/code&gt; 用いて&lt;a href=&quot;enumeration#asIterator()&quot;&gt; &lt;code&gt;Enumeration.asIterator()&lt;/code&gt; &lt;/a&gt;メソッドを。</target>
        </trans-unit>
        <trans-unit id="935dcd5e72d6e4581b22e340e57695e0b66b55e7" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;exchanger&quot;&gt;&lt;code&gt;Exchanger&lt;/code&gt;&lt;/a&gt; allows two threads to exchange objects at a rendezvous point, and is useful in several pipeline designs.</source>
          <target state="translated">アン&lt;a href=&quot;exchanger&quot;&gt; &lt;code&gt;Exchanger&lt;/code&gt; &lt;/a&gt;ランデブーポイントで交換対象には2つのスレッドを可能にし、いくつかのパイプラインの設計に有用です。</target>
        </trans-unit>
        <trans-unit id="e27c8aaf65d75ce09eff85c14d3c20dce763a054" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;executor&quot;&gt;&lt;code&gt;Executor&lt;/code&gt;&lt;/a&gt; that provides methods to manage termination and methods that can produce a &lt;a href=&quot;future&quot;&gt;&lt;code&gt;Future&lt;/code&gt;&lt;/a&gt; for tracking progress of one or more asynchronous tasks.</source>
          <target state="translated">終了を管理するメソッドと、1つ以上の非同期タスクの進行状況を追跡する&lt;a href=&quot;future&quot;&gt; &lt;code&gt;Future&lt;/code&gt; &lt;/a&gt;を生成できるメソッドを提供する&lt;a href=&quot;executor&quot;&gt; &lt;code&gt;Executor&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bda0cfcde78543a3931d228fe016db10d680fe51" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; for running &lt;a href=&quot;forkjointask&quot;&gt;&lt;code&gt;ForkJoinTask&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">&lt;a href=&quot;forkjointask&quot;&gt; &lt;code&gt;ForkJoinTask&lt;/code&gt; &lt;/a&gt;を実行するための&lt;a href=&quot;executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="bcebfee103ed68fcb7a95dda7ecaff77c1920261" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; for running &lt;a href=&quot;forkjointask&quot;&gt;&lt;code&gt;ForkJoinTask&lt;/code&gt;&lt;/a&gt;s. A &lt;code&gt;ForkJoinPool&lt;/code&gt; provides the entry point for submissions from non-&lt;code&gt;ForkJoinTask&lt;/code&gt; clients, as well as management and monitoring operations.</source>
          <target state="translated">&lt;a href=&quot;forkjointask&quot;&gt; &lt;code&gt;ForkJoinTask&lt;/code&gt; &lt;/a&gt;を実行するための&lt;a href=&quot;executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; &lt;/a&gt;。A &lt;code&gt;ForkJoinPool&lt;/code&gt; は、非から提出のエントリポイントを提供 &lt;code&gt;ForkJoinTask&lt;/code&gt; のクライアント、ならびに管理および監視動作を制御します。</target>
        </trans-unit>
        <trans-unit id="fb82c3e10e84ea888b99043d94e6f67f83436be9" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; that can schedule commands to run after a given delay, or to execute periodically.</source>
          <target state="translated">&lt;a href=&quot;executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; の&lt;/a&gt;コマンドをスケジュールすることができます指定された遅延時間後に実行する、または定期的に実行します。</target>
        </trans-unit>
        <trans-unit id="6fe4373b66e102cf8d9711f250fd25d164ce6bcd" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;executorservice&quot;&gt;&lt;code&gt;ExecutorService&lt;/code&gt;&lt;/a&gt; that executes each submitted task using one of possibly several pooled threads, normally configured using &lt;a href=&quot;executors&quot;&gt;&lt;code&gt;Executors&lt;/code&gt;&lt;/a&gt; factory methods.</source>
          <target state="translated">通常は&lt;a href=&quot;executors&quot;&gt; &lt;code&gt;Executors&lt;/code&gt; &lt;/a&gt;ファクトリメソッドを使用して構成される、プールされた複数のスレッドの1つを使用して、送信された各タスクを実行する&lt;a href=&quot;executorservice&quot;&gt; &lt;code&gt;ExecutorService&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c32c64304c28fa379b6726ffcf58f65020dc5a9a" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;rmiserver&quot;&gt;&lt;code&gt;RMIServer&lt;/code&gt;&lt;/a&gt; object that is exported through JRMP and that creates client connections as RMI objects exported through JRMP.</source>
          <target state="translated">JRMPを介してエクスポートされ、JRMPを介してエクスポートされるRMIオブジェクトとしてクライアント接続を作成する&lt;a href=&quot;rmiserver&quot;&gt; &lt;code&gt;RMIServer&lt;/code&gt; &lt;/a&gt;オブジェクト。</target>
        </trans-unit>
        <trans-unit id="8ee2a66ef29756688ac8031b2103f7bd95c0fbfc" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;rmiserver&quot;&gt;&lt;code&gt;RMIServer&lt;/code&gt;&lt;/a&gt; object that is exported through JRMP and that creates client connections as RMI objects exported through JRMP. User code does not usually reference this class directly.</source>
          <target state="translated">JRMPを介してエクスポートされ、JRMPを介してエクスポートされるRMIオブジェクトとしてクライアント接続を作成する&lt;a href=&quot;rmiserver&quot;&gt; &lt;code&gt;RMIServer&lt;/code&gt; &lt;/a&gt;オブジェクト。ユーザーコードは通常、このクラスを直接参照しません。</target>
        </trans-unit>
        <trans-unit id="0d820e40f267bbd7a7c9a292fd4799bfdc72f7d2" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;rmiserverimpl&quot;&gt;&lt;code&gt;RMIServerImpl&lt;/code&gt;&lt;/a&gt; that is exported through IIOP and that creates client connections as RMI objects exported through IIOP.</source>
          <target state="translated">IIOPを介してエクスポートされ、IIOPを介してエクスポートされるRMIオブジェクトとしてクライアント接続を作成する&lt;a href=&quot;rmiserverimpl&quot;&gt; &lt;code&gt;RMIServerImpl&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="80d636756fafe7e42672c7ba5c976b14ff0db59e" translate="yes" xml:space="preserve">
          <source>An &lt;a href=&quot;rmiserverimpl&quot;&gt;&lt;code&gt;RMIServerImpl&lt;/code&gt;&lt;/a&gt; that is exported through IIOP and that creates client connections as RMI objects exported through IIOP. User code does not usually reference this class directly.</source>
          <target state="translated">IIOPを介してエクスポートされ、IIOPを介してエクスポートされるRMIオブジェクトとしてクライアント接続を作成する&lt;a href=&quot;rmiserverimpl&quot;&gt; &lt;code&gt;RMIServerImpl&lt;/code&gt; &lt;/a&gt;。ユーザーコードは通常、このクラスを直接参照しません。</target>
        </trans-unit>
        <trans-unit id="035897082c5a646c3645fab59021733e8b60b8e2" translate="yes" xml:space="preserve">
          <source>An &lt;b&gt;unmodifiable view&lt;/b&gt;</source>
          <target state="translated">&lt;b&gt;変更不可能なビュー&lt;/b&gt;</target>
        </trans-unit>
        <trans-unit id="e823b9d30a906d8a8d80dd9e125c993194c3c3b6" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;APPLICATION_MODAL&lt;/code&gt; dialog blocks all top-level windows from the same Java application except those from its own child hierarchy.</source>
          <target state="translated">アン &lt;code&gt;APPLICATION_MODAL&lt;/code&gt; ダイアログは、自身の子階層からのものを除き、同じJavaアプリケーションからのすべてのトップレベルウィンドウ。</target>
        </trans-unit>
        <trans-unit id="48f2d2c041f1996c5c7db191b1c1d68941fe7a3c" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;APPLICATION_MODAL&lt;/code&gt; dialog blocks all top-level windows from the same Java application except those from its own child hierarchy. If there are several applets launched in a browser, they can be treated either as separate applications or a single one. This behavior is implementation-dependent.</source>
          <target state="translated">アン &lt;code&gt;APPLICATION_MODAL&lt;/code&gt; ダイアログは、自身の子階層からのものを除き、同じJavaアプリケーションからのすべてのトップレベルウィンドウ。ブラウザで複数のアプレットが起動されている場合、それらは個別のアプリケーションまたは単一のアプリケーションとして扱うことができます。この動作は実装に依存します。</target>
        </trans-unit>
        <trans-unit id="004b99d35d276ee91ac7b66b78e7e666f4aeff4a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AWTEvent&lt;/code&gt; that adds support for &lt;code&gt;JInternalFrame&lt;/code&gt; objects as the event source.</source>
          <target state="translated">イベントソースとして &lt;code&gt;JInternalFrame&lt;/code&gt; オブジェクトのサポートを追加する &lt;code&gt;AWTEvent&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8810e044a62d3e0a55969a677e5057310fc1f0a2" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AWTEvent&lt;/code&gt; that adds support for &lt;code&gt;JInternalFrame&lt;/code&gt; objects as the event source. This class has the same event types as &lt;code&gt;WindowEvent&lt;/code&gt;, although different IDs are used. Help on handling internal frame events is in &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/events/internalframelistener.html&quot;&gt;How to Write an Internal Frame Listener&lt;/a&gt;, a section in &lt;em&gt;The Java Tutorial&lt;/em&gt;.</source>
          <target state="translated">イベントソースとして &lt;code&gt;JInternalFrame&lt;/code&gt; オブジェクトのサポートを追加する &lt;code&gt;AWTEvent&lt;/code&gt; 。このクラスのイベントタイプは &lt;code&gt;WindowEvent&lt;/code&gt; と同じですが、異なるIDが使用されます。内部フレームイベントの処理に関するヘルプは、&lt;em&gt;Javaチュートリアルの&lt;/em&gt;セクションにある&lt;em&gt;「&lt;/em&gt;&lt;a href=&quot;http://docs.oracle.com/javase/tutorial/uiswing/events/internalframelistener.html&quot;&gt;内部フレームリスナーの作成方法」にあり&lt;/a&gt;ます。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="aad51860297f3a3a81fbdb2bd897a52c00bde684" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AWTKeyStroke&lt;/code&gt; represents a key action on the keyboard, or equivalent input device.</source>
          <target state="translated">AN &lt;code&gt;AWTKeyStroke&lt;/code&gt; キーボード、または同等の入力デバイスのキーアクションを表しています。</target>
        </trans-unit>
        <trans-unit id="b9df90de69ce6eb66f2b16a16b51a9c718a11cf8" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AWTKeyStroke&lt;/code&gt; represents a key action on the keyboard, or equivalent input device. &lt;code&gt;AWTKeyStroke&lt;/code&gt;s can correspond to only a press or release of a particular key, just as &lt;code&gt;KEY_PRESSED&lt;/code&gt; and &lt;code&gt;KEY_RELEASED KeyEvent&lt;/code&gt;s do; alternately, they can correspond to typing a specific Java character, just as &lt;code&gt;KEY_TYPED KeyEvent&lt;/code&gt;s do. In all cases, &lt;code&gt;AWTKeyStroke&lt;/code&gt;s can specify modifiers (alt, shift, control, meta, altGraph, or a combination thereof) which must be present during the action for an exact match.</source>
          <target state="translated">AN &lt;code&gt;AWTKeyStroke&lt;/code&gt; キーボード、または同等の入力デバイスのキーアクションを表しています。 &lt;code&gt;AWTKeyStroke&lt;/code&gt; 同じように、特定のキーの唯一のプレスリリースや、秒缶対応 &lt;code&gt;KEY_PRESSED&lt;/code&gt; と &lt;code&gt;KEY_RELEASED KeyEvent&lt;/code&gt; のようにしてください。または、 &lt;code&gt;KEY_TYPED KeyEvent&lt;/code&gt; と同様に、特定のJava文字の入力に対応することもできます。すべての場合において、 &lt;code&gt;AWTKeyStroke&lt;/code&gt; は、完全一致のためにアクション中に存在しなければならない修飾子（alt、shift、control、meta、altGraph、またはそれらの組み合わせ）を指定できます。</target>
        </trans-unit>
        <trans-unit id="f522e6816e525a8346bd94e59b5af67477b4f627" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AbstractFormatter&lt;/code&gt; can only be active in one &lt;code&gt;JFormattedTextField&lt;/code&gt; at a time. &lt;code&gt;JFormattedTextField&lt;/code&gt; invokes &lt;code&gt;install&lt;/code&gt; when it is ready to use it followed by &lt;code&gt;uninstall&lt;/code&gt; when done. Subclasses that wish to install additional state should override &lt;code&gt;install&lt;/code&gt; and message super appropriately.</source>
          <target state="translated">アン &lt;code&gt;AbstractFormatter&lt;/code&gt; 一つだけでアクティブにできる &lt;code&gt;JFormattedTextField&lt;/code&gt; 時。 &lt;code&gt;JFormattedTextField&lt;/code&gt; は、使用する準備ができたら &lt;code&gt;install&lt;/code&gt; 呼び出し、完了したら &lt;code&gt;uninstall&lt;/code&gt; 呼び出します。追加の状態をインストールしたいサブクラスは、 &lt;code&gt;install&lt;/code&gt; とメッセージを非常に適切にオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="9364c6a7ff47d1cfa10a3d041957eb148d5c3929" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AccessException&lt;/code&gt; is thrown by certain methods of the &lt;code&gt;java.rmi.Naming&lt;/code&gt; class (specifically &lt;code&gt;bind&lt;/code&gt;, &lt;code&gt;rebind&lt;/code&gt;, and &lt;code&gt;unbind&lt;/code&gt;) and methods of the &lt;code&gt;java.rmi.activation.ActivationSystem&lt;/code&gt; interface to indicate that the caller does not have permission to perform the action requested by the method call.</source>
          <target state="translated">アン &lt;code&gt;AccessException&lt;/code&gt; 、特定のメソッドによってスローされ &lt;code&gt;java.rmi.Naming&lt;/code&gt; のクラス（特に &lt;code&gt;bind&lt;/code&gt; 、 &lt;code&gt;rebind&lt;/code&gt; 、および &lt;code&gt;unbind&lt;/code&gt; ）との方法 &lt;code&gt;java.rmi.activation.ActivationSystem&lt;/code&gt; というの呼び出し側が要求されたアクションを実行する権限を持っていないことを示すためのインタフェースメソッド呼び出しによる。</target>
        </trans-unit>
        <trans-unit id="c23f4ea4904db9342ee9b9599c7d7fba46712a71" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AccessException&lt;/code&gt; is thrown by certain methods of the &lt;code&gt;java.rmi.Naming&lt;/code&gt; class (specifically &lt;code&gt;bind&lt;/code&gt;, &lt;code&gt;rebind&lt;/code&gt;, and &lt;code&gt;unbind&lt;/code&gt;) and methods of the &lt;code&gt;java.rmi.activation.ActivationSystem&lt;/code&gt; interface to indicate that the caller does not have permission to perform the action requested by the method call. If the method was invoked from a non-local host, then an &lt;code&gt;AccessException&lt;/code&gt; is thrown.</source>
          <target state="translated">アン &lt;code&gt;AccessException&lt;/code&gt; 、特定のメソッドによってスローされ &lt;code&gt;java.rmi.Naming&lt;/code&gt; のクラス（特に &lt;code&gt;bind&lt;/code&gt; 、 &lt;code&gt;rebind&lt;/code&gt; 、および &lt;code&gt;unbind&lt;/code&gt; ）との方法 &lt;code&gt;java.rmi.activation.ActivationSystem&lt;/code&gt; というの呼び出し側が要求されたアクションを実行する権限を持っていないことを示すためのインタフェースメソッド呼び出しによる。メソッドが非ローカルホストから呼び出された場合、 &lt;code&gt;AccessException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="dcfc6c08f1decd0f03ee197624b2ecb53c08149e" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ActionListener&lt;/code&gt; object is registered via &lt;code&gt;addActionListener&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ActionListener&lt;/code&gt; オブジェクトがによって登録され &lt;code&gt;addActionListener&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="090c8db69380c5d0be8a1f259ffb8e0ecdef8972" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ActivationGroup&lt;/code&gt; is</source>
          <target state="translated">アン &lt;code&gt;ActivationGroup&lt;/code&gt; のはあります</target>
        </trans-unit>
        <trans-unit id="e140328f1c362a417d81c0aae596e245431447d0" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ActivationGroup&lt;/code&gt; is responsible for creating new instances of &quot;activatable&quot; objects in its group, informing its &lt;code&gt;ActivationMonitor&lt;/code&gt; when either: its object's become active or inactive, or the group as a whole becomes inactive.</source>
          <target state="translated">アン &lt;code&gt;ActivationGroup&lt;/code&gt; のはその知らせ、そのグループ内の「起動可能」オブジェクトの新しいインスタンスを作成するための責任がある &lt;code&gt;ActivationMonitor&lt;/code&gt; には、そのオブジェクトのアクティブまたは非アクティブになり、あるいはグループ全体が非アクティブになった次の場合のいずれか。</target>
        </trans-unit>
        <trans-unit id="c20d7c2e7d7e1247f9c48b1896c47dcaf4eb17f0" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ActivationInstantiator&lt;/code&gt; is responsible for creating instances of &quot;activatable&quot; objects.</source>
          <target state="translated">アン &lt;code&gt;ActivationInstantiator&lt;/code&gt; 「起動可能」オブジェクトのインスタンスを作成するための責任があります。</target>
        </trans-unit>
        <trans-unit id="2461ed2fa49ed7b8a8c7658840e0279b78b3f664" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ActivationInstantiator&lt;/code&gt; is responsible for creating instances of &quot;activatable&quot; objects. A concrete subclass of &lt;code&gt;ActivationGroup&lt;/code&gt; implements the &lt;code&gt;newInstance&lt;/code&gt; method to handle creating objects within the group.</source>
          <target state="translated">アン &lt;code&gt;ActivationInstantiator&lt;/code&gt; 「起動可能」オブジェクトのインスタンスを作成するための責任があります。 &lt;code&gt;ActivationGroup&lt;/code&gt; の具体的なサブクラスは、グループ内のオブジェクトの作成を処理する &lt;code&gt;newInstance&lt;/code&gt; メソッドを実装します。</target>
        </trans-unit>
        <trans-unit id="91f261569ab3ad0da9c0b0caf626e72e080ba33e" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ActivationMonitor&lt;/code&gt; is specific to an &lt;code&gt;ActivationGroup&lt;/code&gt; and is obtained when a group is reported active via a call to &lt;code&gt;ActivationSystem.activeGroup&lt;/code&gt; (this is done internally).</source>
          <target state="translated">AN &lt;code&gt;ActivationMonitor&lt;/code&gt; には、に特異的で &lt;code&gt;ActivationGroup&lt;/code&gt; グループがへの呼び出しを介して活性が報告されている場合に得られる &lt;code&gt;ActivationSystem.activeGroup&lt;/code&gt; （これは内部的に行われます）。</target>
        </trans-unit>
        <trans-unit id="6007ab20754772b75bafc94ae3758ef9977a87c9" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ActivationMonitor&lt;/code&gt; is specific to an &lt;code&gt;ActivationGroup&lt;/code&gt; and is obtained when a group is reported active via a call to &lt;code&gt;ActivationSystem.activeGroup&lt;/code&gt; (this is done internally). An activation group is responsible for informing its &lt;code&gt;ActivationMonitor&lt;/code&gt; when either: its objects become active or inactive, or the group as a whole becomes inactive.</source>
          <target state="translated">AN &lt;code&gt;ActivationMonitor&lt;/code&gt; には、に特異的で &lt;code&gt;ActivationGroup&lt;/code&gt; グループがへの呼び出しを介して活性が報告されている場合に得られる &lt;code&gt;ActivationSystem.activeGroup&lt;/code&gt; （これは内部的に行われます）。アクティベーショングループは、オブジェクトがアクティブまたは非アクティブになるか、グループ全体が非アクティブになるときに、 &lt;code&gt;ActivationMonitor&lt;/code&gt; に通知する責任があります。</target>
        </trans-unit>
        <trans-unit id="ab9043f44d6d9548e2c4706bce5c7fb930935dee" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AdjustmentListener&lt;/code&gt; object is registered via &lt;code&gt;addAdjustmentListener&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AdjustmentListener&lt;/code&gt; オブジェクトを経て登録されている &lt;code&gt;addAdjustmentListener&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="732e341ff398c966399ffe8adede4c2af068b316" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AlgorithmParameters&lt;/code&gt; object for managing the parameters for a particular algorithm can be obtained by calling one of the &lt;code&gt;getInstance&lt;/code&gt; factory methods (static methods that return instances of a given class).</source>
          <target state="translated">特定のアルゴリズムのパラメータを管理するための &lt;code&gt;AlgorithmParameters&lt;/code&gt; オブジェクトは、 &lt;code&gt;getInstance&lt;/code&gt; ファクトリメソッド（指定されたクラスのインスタンスを返す静的メソッド）の1つを呼び出すことによって取得できます。</target>
        </trans-unit>
        <trans-unit id="569ed1ce46f8f2e42560bfed4c800c600d997ab4" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AlreadyBoundException&lt;/code&gt; is thrown if an attempt is made to bind an object in the registry to a name that already has an associated binding.</source>
          <target state="translated">アン &lt;code&gt;AlreadyBoundException&lt;/code&gt; を試みはすでにバインディング関連した名前に、レジストリ内のオブジェクトをバインドするためになされた場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="3f960b730552ed64c0720f76c2ed048762f1c40c" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Area&lt;/code&gt; may take more path segments to describe the same geometry even when the original outline is simple and obvious. The analysis that the &lt;code&gt;Area&lt;/code&gt; class must perform on the path may not reflect the same concepts of &quot;simple and obvious&quot; as a human being perceives.</source>
          <target state="translated">アン &lt;code&gt;Area&lt;/code&gt; 元のアウトラインがシンプルかつ明白であっても同じジオメトリを記述するために多くのパスセグメントがかかる場合があります。 &lt;code&gt;Area&lt;/code&gt; クラスがパス上で実行する必要のある分析は、人間が認識するのと同じ「単純で明白な」概念を反映していない可能性があります。</target>
        </trans-unit>
        <trans-unit id="06b9bd80cbd09d66f38275b49e56ee50fb9a02b2" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Area&lt;/code&gt; object stores and manipulates a resolution-independent description of an enclosed area of 2-dimensional space.</source>
          <target state="translated">AN &lt;code&gt;Area&lt;/code&gt; オブジェクトを格納および操作する2次元空間の閉じた領域の解像度に依存しない記述。</target>
        </trans-unit>
        <trans-unit id="332b63b9a254f250c77f4f5280970824f2d343a3" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Area&lt;/code&gt; object stores and manipulates a resolution-independent description of an enclosed area of 2-dimensional space. &lt;code&gt;Area&lt;/code&gt; objects can be transformed and can perform various Constructive Area Geometry (CAG) operations when combined with other &lt;code&gt;Area&lt;/code&gt; objects. The CAG operations include area &lt;a href=&quot;#add(java.awt.geom.Area)&quot;&gt;&lt;code&gt;addition&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#subtract(java.awt.geom.Area)&quot;&gt;&lt;code&gt;subtraction&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;#intersect(java.awt.geom.Area)&quot;&gt;&lt;code&gt;intersection&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;#exclusiveOr(java.awt.geom.Area)&quot;&gt;&lt;code&gt;exclusive or&lt;/code&gt;&lt;/a&gt;. See the linked method documentation for examples of the various operations.</source>
          <target state="translated">AN &lt;code&gt;Area&lt;/code&gt; オブジェクトを格納および操作する2次元空間の閉じた領域の解像度に依存しない記述。 &lt;code&gt;Area&lt;/code&gt; オブジェクトは変換でき、他の &lt;code&gt;Area&lt;/code&gt; オブジェクトと組み合わせると、さまざまな建設的エリアジオメトリ（CAG）操作を実行できます。CAG操作には、領域の&lt;a href=&quot;#add(java.awt.geom.Area)&quot;&gt; &lt;code&gt;addition&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#subtract(java.awt.geom.Area)&quot;&gt; &lt;code&gt;subtraction&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;#intersect(java.awt.geom.Area)&quot;&gt; &lt;code&gt;intersection&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;#exclusiveOr(java.awt.geom.Area)&quot;&gt; &lt;code&gt;exclusive or&lt;/code&gt; &lt;/a&gt;論理和が含まれます。さまざまな操作の例については、リンクされたメソッドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="32be98b9f0bd655fa83c61c3a17f96f640b0e767" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ArithmeticException&lt;/code&gt; exception is thrown if</source>
          <target state="translated">次の場合、 &lt;code&gt;ArithmeticException&lt;/code&gt; 例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="77a977324a34c1c1a729977bc296fb57fc9940c1" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ArrayOutOfBoundsException&lt;/code&gt; may be thrown if the coordinates are not in bounds. However, explicit bounds checking is not guaranteed.</source>
          <target state="translated">アン &lt;code&gt;ArrayOutOfBoundsException&lt;/code&gt; は座標が境界内にない場合にスローされることがあります。ただし、明示的な境界チェックは保証されていません。</target>
        </trans-unit>
        <trans-unit id="80b9af2dcb96620d0d08ecc6070368a1b0bd5e64" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ArrayOutOfBoundsException&lt;/code&gt; may be thrown if the region is not in bounds. However, explicit bounds checking is not guaranteed.</source>
          <target state="translated">&lt;code&gt;ArrayOutOfBoundsException&lt;/code&gt; は、領域が境界内にない場合にスローされることがあります。ただし、明示的な境界チェックは保証されていません。</target>
        </trans-unit>
        <trans-unit id="cd9298b10458b6cb9b1421b1564f36584d00bf68" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ArrayType&lt;/code&gt; is assignable from another &lt;code&gt;
 ArrayType&lt;/code&gt; if they have the same &lt;a href=&quot;arraytype#getDimension()&quot;&gt;dimension&lt;/a&gt;; and both are &lt;a href=&quot;arraytype#isPrimitiveArray()&quot;&gt;primitive arrays&lt;/a&gt; or neither is; and the &lt;a href=&quot;arraytype#getElementOpenType()&quot;&gt;element type&lt;/a&gt; of the first is assignable from the element type of the second.</source>
          <target state="translated">アン &lt;code&gt;ArrayType&lt;/code&gt; 別から割り当て可能である &lt;code&gt; ArrayType&lt;/code&gt; 彼らは同じ持っている場合は&lt;a href=&quot;arraytype#getDimension()&quot;&gt;次元を&lt;/a&gt;。どちらも&lt;a href=&quot;arraytype#isPrimitiveArray()&quot;&gt;プリミティブ配列である&lt;/a&gt;か、どちらもそうではありません。および&lt;a href=&quot;arraytype#getElementOpenType()&quot;&gt;要素タイプ&lt;/a&gt;第一の第二の要素型から割り当て可能です。</target>
        </trans-unit>
        <trans-unit id="c3150a3c54bfdd7c1cc5684dcb0b31ab6d4c013a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ArrayType&lt;/code&gt; is assignable from another &lt;code&gt;ArrayType&lt;/code&gt; if they have the same &lt;a href=&quot;arraytype#getDimension--&quot;&gt;dimension&lt;/a&gt;; and both are &lt;a href=&quot;arraytype#isPrimitiveArray--&quot;&gt;primitive arrays&lt;/a&gt; or neither is; and the &lt;a href=&quot;arraytype#getElementOpenType--&quot;&gt;element type&lt;/a&gt; of the first is assignable from the element type of the second.</source>
          <target state="translated">アン &lt;code&gt;ArrayType&lt;/code&gt; 別から割り当て可能である &lt;code&gt;ArrayType&lt;/code&gt; 彼らは同じ持っている場合は&lt;a href=&quot;arraytype#getDimension--&quot;&gt;次元を&lt;/a&gt;。両方とも&lt;a href=&quot;arraytype#isPrimitiveArray--&quot;&gt;プリミティブ配列である&lt;/a&gt;か、どちらもそうではありません。および&lt;a href=&quot;arraytype#getElementOpenType--&quot;&gt;要素タイプ&lt;/a&gt;第一の第二の要素型から割り当て可能です。</target>
        </trans-unit>
        <trans-unit id="153a3fb7efabcd052fc7608e2c4916868820fbd3" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AsynchronousFileChannel&lt;/code&gt; is associated with a thread pool to which tasks are submitted to handle I/O events and dispatch to completion handlers that consume the results of I/O operations on the channel. The completion handler for an I/O operation initiated on a channel is guaranteed to be invoked by one of the threads in the thread pool (This ensures that the completion handler is run by a thread with the expected &lt;em&gt;identity&lt;/em&gt;). Where an I/O operation completes immediately, and the initiating thread is itself a thread in the thread pool, then the completion handler may be invoked directly by the initiating thread. When an &lt;code&gt;AsynchronousFileChannel&lt;/code&gt; is created without specifying a thread pool then the channel is associated with a system-dependent default thread pool that may be shared with other channels. The default thread pool is configured by the system properties defined by the &lt;a href=&quot;asynchronouschannelgroup&quot;&gt;&lt;code&gt;AsynchronousChannelGroup&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">AN &lt;code&gt;AsynchronousFileChannel&lt;/code&gt; は、タスクは、チャネル上のI / O操作の結果を消費完了ハンドラにI / Oイベントとディスパッチを処理するために提出されたスレッドプールに関連付けられています。チャネルで開始されたI / O操作の完了ハンドラーは、スレッドプール内のスレッドの1つによって呼び出されることが保証されます（これにより、完了ハンドラーが予期された&lt;em&gt;IDを&lt;/em&gt;持つスレッドによって実行されることが保証され&lt;em&gt;ます&lt;/em&gt;）。 I / O操作がすぐに完了し、開始スレッド自体がスレッドプール内のスレッドである場合、完了ハンドラーは開始スレッドによって直接呼び出すことができます。とき &lt;code&gt;AsynchronousFileChannel&lt;/code&gt; スレッドプールを指定せずに作成された場合、チャネルは、他のチャネルと共有できるシステム依存のデフォルトスレッドプールに関連付けられます。デフォルトのスレッドプールは、&lt;a href=&quot;asynchronouschannelgroup&quot;&gt; &lt;code&gt;AsynchronousChannelGroup&lt;/code&gt; &lt;/a&gt;クラスで定義されたシステムプロパティによって構成されます。</target>
        </trans-unit>
        <trans-unit id="3c3db66ad3ba110918b097fd77f4598bc42443d0" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AtomicMarkableReference&lt;/code&gt; maintains an object reference along with a mark bit, that can be updated atomically.</source>
          <target state="translated">AN &lt;code&gt;AtomicMarkableReference&lt;/code&gt; は、原子的に更新することができるマークビットとともに、オブジェクト参照を維持します。</target>
        </trans-unit>
        <trans-unit id="3016ca343ad81aeb0b1615e8d6b447240b35e017" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AtomicStampedReference&lt;/code&gt; maintains an object reference along with an integer &quot;stamp&quot;, that can be updated atomically.</source>
          <target state="translated">AN &lt;code&gt;AtomicStampedReference&lt;/code&gt; は、原子的に更新することができる整数「スタンプ」とともに、オブジェクト参照を維持します。</target>
        </trans-unit>
        <trans-unit id="5123f30fd658dab6b046fb2838b15fe7fc022ae6" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AttributeValueExp&lt;/code&gt; may be used anywhere a &lt;code&gt;ValueExp&lt;/code&gt; is required.</source>
          <target state="translated">アン &lt;code&gt;AttributeValueExp&lt;/code&gt; はどこでも使用することができる &lt;code&gt;ValueExp&lt;/code&gt; 必要です。</target>
        </trans-unit>
        <trans-unit id="8f7495226a71eb28232272eba0ac094ee51a6901" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AttributeValueExp&lt;/code&gt; with a null attribute.</source>
          <target state="translated">&lt;code&gt;AttributeValueExp&lt;/code&gt; nullの属性を持ちます。</target>
        </trans-unit>
        <trans-unit id="279f42bf99952eeaa9b39b58bc837bfab21b9fd6" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; allows iteration through both text and related attribute information.</source>
          <target state="translated">アン &lt;code&gt;AttributedCharacterIterator&lt;/code&gt; 、テキストと関連する属性情報を、どちらも繰り返し処理できるようにします。</target>
        </trans-unit>
        <trans-unit id="9854cf7f134e76ab170aa24d1a103b687670ef81" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Attributes&lt;/code&gt;, &lt;code&gt;SearchControls&lt;/code&gt;, or array object passed as a parameter to any method will not be modified by the service provider. The service provider may keep a reference to it for the duration of the operation, including any enumeration of the method's results and the processing of any referrals generated. The caller should not modify the object during this time. An &lt;code&gt;Attributes&lt;/code&gt; object returned by any method is owned by the caller. The caller may subsequently modify it; the service provider will not.</source>
          <target state="translated">&lt;code&gt;Attributes&lt;/code&gt; 、 &lt;code&gt;SearchControls&lt;/code&gt; 任意のメソッドにパラメータとして渡された、または配列オブジェクトは、サービスプロバイダによって変更されません。サービスプロバイダーは、メソッドの結果の列挙や生成されたリフェラルの処理など、オペレーションの実行中は参照を維持できます。この間、呼び出し元はオブジェクトを変更しないでください。 &lt;code&gt;Attributes&lt;/code&gt; いずれかの方法で返されるオブジェクトは呼び出し側が所有しています。呼び出し元は後でそれを変更できます。サービスプロバイダーはしません。</target>
        </trans-unit>
        <trans-unit id="c952d9d193515a12f408dfc6292651d7f8241a6d" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AudioFileFormat&lt;/code&gt; object can include a set of properties. A property is a pair of key and value: the key is of type &lt;code&gt;String&lt;/code&gt;, the associated property value is an arbitrary object. Properties specify additional informational meta data (like a author, copyright, or file duration). Properties are optional information, and file reader and file writer implementations are not required to provide or recognize properties.</source>
          <target state="translated">&lt;code&gt;AudioFileFormat&lt;/code&gt; のオブジェクトは、プロパティのセットを含むことができます。プロパティはキーと値のペアです。キーは &lt;code&gt;String&lt;/code&gt; 型で、関連付けられているプロパティ値は任意のオブジェクトです。プロパティは、追加の情報メタデータ（作成者、著作権、ファイルの長さなど）を指定します。プロパティはオプションの情報であり、ファイルリーダーとファイルライターの実装は、プロパティを提供または認識する必要はありません。</target>
        </trans-unit>
        <trans-unit id="22cf68840d705f0ae1d9f5a88af1fb6deb52103a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AudioFormat&lt;/code&gt; object can include a set of properties. A property is a pair of key and value: the key is of type &lt;code&gt;String&lt;/code&gt;, the associated property value is an arbitrary object. Properties specify additional format specifications, like the bit rate for compressed formats. Properties are mainly used as a means to transport additional information of the audio format to and from the service providers. Therefore, properties are ignored in the &lt;a href=&quot;#matches(javax.sound.sampled.AudioFormat)&quot;&gt;&lt;code&gt;matches(AudioFormat)&lt;/code&gt;&lt;/a&gt; method. However, methods which rely on the installed service providers, like &lt;a href=&quot;audiosystem#isConversionSupported(javax.sound.sampled.AudioFormat.Encoding,javax.sound.sampled.AudioFormat)&quot;&gt;&lt;code&gt;(AudioFormat, AudioFormat)
 isConversionSupported&lt;/code&gt;&lt;/a&gt; may consider properties, depending on the respective service provider implementation.</source>
          <target state="translated">&lt;code&gt;AudioFormat&lt;/code&gt; オブジェクトは、プロパティのセットを含むことができます。プロパティはキーと値のペアです。キーは &lt;code&gt;String&lt;/code&gt; 型であり、関連するプロパティ値は任意のオブジェクトです。プロパティは、圧縮形式のビットレートなど、追加の形式仕様を指定します。プロパティは主に、オーディオ形式の追加情報をサービスプロバイダーとの間で転送する手段として使用されます。したがって、&lt;a href=&quot;#matches(javax.sound.sampled.AudioFormat)&quot;&gt; &lt;code&gt;matches(AudioFormat)&lt;/code&gt; &lt;/a&gt;メソッドではプロパティは無視されます。ただし、&lt;a href=&quot;audiosystem#isConversionSupported(javax.sound.sampled.AudioFormat.Encoding,javax.sound.sampled.AudioFormat)&quot;&gt; &lt;code&gt;(AudioFormat, AudioFormat) isConversionSupported&lt;/code&gt; &lt;/a&gt;など、インストールされているサービスプロバイダーに依存するメソッドは、それぞれのサービスプロバイダーの実装に応じて、プロパティを考慮する場合があります。</target>
        </trans-unit>
        <trans-unit id="d8267c07578a64bfea8ce9a39a53900834e8cade" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;AudioFormat&lt;/code&gt; object can include a set of properties. A property is a pair of key and value: the key is of type &lt;code&gt;String&lt;/code&gt;, the associated property value is an arbitrary object. Properties specify additional format specifications, like the bit rate for compressed formats. Properties are mainly used as a means to transport additional information of the audio format to and from the service providers. Therefore, properties are ignored in the &lt;a href=&quot;audioformat#matches-javax.sound.sampled.AudioFormat-&quot;&gt;&lt;code&gt;matches(AudioFormat)&lt;/code&gt;&lt;/a&gt; method. However, methods which rely on the installed service providers, like &lt;a href=&quot;audiosystem#isConversionSupported-javax.sound.sampled.AudioFormat.Encoding-javax.sound.sampled.AudioFormat-&quot;&gt;&lt;code&gt;(AudioFormat, AudioFormat) isConversionSupported&lt;/code&gt;&lt;/a&gt; may consider properties, depending on the respective service provider implementation.</source>
          <target state="translated">&lt;code&gt;AudioFormat&lt;/code&gt; オブジェクトは、プロパティのセットを含むことができます。プロパティはキーと値のペアです。キーは &lt;code&gt;String&lt;/code&gt; 型で、関連付けられているプロパティ値は任意のオブジェクトです。プロパティは、圧縮形式のビットレートなど、追加の形式仕様を指定します。プロパティは主に、オーディオ形式の追加情報をサービスプロバイダーとの間で転送する手段として使用されます。したがって、&lt;a href=&quot;audioformat#matches-javax.sound.sampled.AudioFormat-&quot;&gt; &lt;code&gt;matches(AudioFormat)&lt;/code&gt; &lt;/a&gt;メソッドではプロパティは無視されます。ただし、&lt;a href=&quot;audiosystem#isConversionSupported-javax.sound.sampled.AudioFormat.Encoding-javax.sound.sampled.AudioFormat-&quot;&gt; &lt;code&gt;(AudioFormat, AudioFormat) isConversionSupported&lt;/code&gt; &lt;/a&gt;など、インストールされているサービスプロバイダーに依存するメソッドは、それぞれのサービスプロバイダーの実装に応じて、プロパティを考慮する場合があります。</target>
        </trans-unit>
        <trans-unit id="39254013db75a6318f326d2a81c1b330d357f85e" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Encoder&lt;/code&gt; is a class which can be used to create files or streams that encode the state of a collection of JavaBeans in terms of their public APIs.</source>
          <target state="translated">アン &lt;code&gt;Encoder&lt;/code&gt; ファイルを作成するために使用することができるクラスであるか、公開APIを使って複数のそのエンコードしJavaBeansの状態をストリーミングします。</target>
        </trans-unit>
        <trans-unit id="5f459cfef12c6f9d9920877698346ad592441a0b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Encoder&lt;/code&gt; is a class which can be used to create files or streams that encode the state of a collection of JavaBeans in terms of their public APIs. The &lt;code&gt;Encoder&lt;/code&gt;, in conjunction with its persistence delegates, is responsible for breaking the object graph down into a series of &lt;code&gt;Statement&lt;/code&gt;s and &lt;code&gt;Expression&lt;/code&gt;s which can be used to create it. A subclass typically provides a syntax for these expressions using some human readable form - like Java source code or XML.</source>
          <target state="translated">アン &lt;code&gt;Encoder&lt;/code&gt; ファイルを作成するために使用することができるクラスであるか、公開APIを使って複数のそのエンコードしJavaBeansの状態をストリーミングします。 &lt;code&gt;Encoder&lt;/code&gt; 、その持続性委譲と併せて、一連のにオブジェクトグラフを破壊する責任がある &lt;code&gt;Statement&lt;/code&gt; sおよび &lt;code&gt;Expression&lt;/code&gt; を作成するために使用することができるの。サブクラスは通常、JavaソースコードやXMLなど、人間が読める形式を使用してこれらの式の構文を提供します。</target>
        </trans-unit>
        <trans-unit id="57db16f3208b781807ac71c1c01187fa3e9377be" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Encoder&lt;/code&gt; is a class which can be used to create files or streams that encode the state of a collection of JavaBeans in terms of their public APIs. The &lt;code&gt;Encoder&lt;/code&gt;, in conjunction with its persistence delegates, is responsible for breaking the object graph down into a series of &lt;code&gt;Statements&lt;/code&gt;s and &lt;code&gt;Expression&lt;/code&gt;s which can be used to create it. A subclass typically provides a syntax for these expressions using some human readable form - like Java source code or XML.</source>
          <target state="translated">アン &lt;code&gt;Encoder&lt;/code&gt; ファイルを作成するために使用することができるクラスであるか、公開APIを使って複数のそのエンコードしJavaBeansの状態をストリーミングします。 &lt;code&gt;Encoder&lt;/code&gt; 、その持続性委譲と併せて、一連のにオブジェクトグラフを破壊する責任がある &lt;code&gt;Statements&lt;/code&gt; Sと &lt;code&gt;Expression&lt;/code&gt; 、それを作成するために使用することができるの。サブクラスは通常、JavaソースコードやXMLなどの人間が読める形式を使用して、これらの式の構文を提供します。</target>
        </trans-unit>
        <trans-unit id="c77aa943626bfc9cd78c42be99aa5591b9ae7f88" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Entity&lt;/code&gt; node does not have any parent.</source>
          <target state="translated">&lt;code&gt;Entity&lt;/code&gt; ノードは親を持ちません。</target>
        </trans-unit>
        <trans-unit id="ec3d697bd11ed72dea901f0ebcabfb7737e8bb5a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Entry&lt;/code&gt; object is passed to instances of &lt;code&gt;RowFilter&lt;/code&gt;, allowing the filter to get the value of the entry's data, and thus to determine whether the entry should be shown.</source>
          <target state="translated">&lt;code&gt;Entry&lt;/code&gt; オブジェクトは、のインスタンスに渡される &lt;code&gt;RowFilter&lt;/code&gt; フィルタはエントリのデータの値を取得することができ、したがって、エントリが表示されるべきかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="1a38d276a61ba43332e677c36a27562bd762f034" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Entry&lt;/code&gt; object is passed to instances of &lt;code&gt;RowFilter&lt;/code&gt;, allowing the filter to get the value of the entry's data, and thus to determine whether the entry should be shown. An &lt;code&gt;Entry&lt;/code&gt; object contains information about the model as well as methods for getting the underlying values from the model.</source>
          <target state="translated">&lt;code&gt;Entry&lt;/code&gt; オブジェクトは、のインスタンスに渡される &lt;code&gt;RowFilter&lt;/code&gt; フィルタはエントリのデータの値を取得することができ、したがって、エントリが表示されるべきかどうかを決定します。 &lt;code&gt;Entry&lt;/code&gt; オブジェクトは、モデルからの根本的な値を取得するための方法と同様のモデルに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="c787df111ea8ed53486e1aedc911836a8a553c35" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;EnumControl&lt;/code&gt; provides control over a set of discrete possible values, each represented by an object.</source>
          <target state="translated">AN &lt;code&gt;EnumControl&lt;/code&gt; は離散可能な値、オブジェクトによって表されるそれぞれのセットのコントロールを提供します。</target>
        </trans-unit>
        <trans-unit id="969f1444a803aff0d57ef7a482817bd88af043f2" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;EnumControl&lt;/code&gt; provides control over a set of discrete possible values, each represented by an object. In a graphical user interface, such a control might be represented by a set of buttons, each of which chooses one value or setting. For example, a reverb control might provide several preset reverberation settings, instead of providing continuously adjustable parameters of the sort that would be represented by &lt;a href=&quot;floatcontrol&quot;&gt;&lt;code&gt;FloatControl&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">AN &lt;code&gt;EnumControl&lt;/code&gt; は離散可能な値、オブジェクトによって表されるそれぞれのセットのコントロールを提供します。グラフィカルユーザーインターフェイスでは、このようなコントロールはボタンのセットで表される場合があり、各ボタンは1つの値または設定を選択します。たとえば、リバーブコントロールは、&lt;a href=&quot;floatcontrol&quot;&gt; &lt;code&gt;FloatControl&lt;/code&gt; &lt;/a&gt;オブジェクトで表されるような連続的に調整可能なパラメーターを提供する代わりに、いくつかのプリセットされたリバーブ設定を提供する場合があります。</target>
        </trans-unit>
        <trans-unit id="5466e4649a7deefc8f2bef793fa40e405d33474c" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Enumeration&lt;/code&gt; of &lt;code&gt;URL&lt;/code&gt;s. If the loader is closed, the Enumeration contains no elements.</source>
          <target state="translated">アン &lt;code&gt;Enumeration&lt;/code&gt; の &lt;code&gt;URL&lt;/code&gt; 秒。ローダーが閉じている場合、列挙には要素が含まれていません。</target>
        </trans-unit>
        <trans-unit id="a2762916eff2ee0911d64b1e4075c136b4b6a548" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Error&lt;/code&gt; is a subclass of &lt;code&gt;Throwable&lt;/code&gt; that indicates serious problems that a reasonable application should not try to catch.</source>
          <target state="translated">&lt;code&gt;Error&lt;/code&gt; のサブクラスで &lt;code&gt;Throwable&lt;/code&gt; の合理的なアプリケーションは、キャッチすべきではないという重大な問題を示します。</target>
        </trans-unit>
        <trans-unit id="48a662260ef3ea122e49b8ef9a4f642585cccde8" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Error&lt;/code&gt; is a subclass of &lt;code&gt;Throwable&lt;/code&gt; that indicates serious problems that a reasonable application should not try to catch. Most such errors are abnormal conditions. The &lt;code&gt;ThreadDeath&lt;/code&gt; error, though a &quot;normal&quot; condition, is also a subclass of &lt;code&gt;Error&lt;/code&gt; because most applications should not try to catch it.</source>
          <target state="translated">&lt;code&gt;Error&lt;/code&gt; のサブクラスで &lt;code&gt;Throwable&lt;/code&gt; の合理的なアプリケーションは、キャッチすべきではないという重大な問題を示します。このようなエラーのほとんどは異常な状態です。 &lt;code&gt;ThreadDeath&lt;/code&gt; のエラーは、「通常」の状態が、またのサブクラスで &lt;code&gt;Error&lt;/code&gt; ほとんどのアプリケーションは、それをキャッチしようとするべきではありませんので。</target>
        </trans-unit>
        <trans-unit id="8f42fc0e3758bfd9e9e772d31c245d9cba24225f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Event&lt;/code&gt; object generated when an event occurs to a &lt;code&gt;RowSet&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;Event&lt;/code&gt; イベントが発生したときに生成されたオブジェクト &lt;code&gt;RowSet&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="8eb88fdb1e0d509eddacdb741f98e7ddfe113ca6" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Event&lt;/code&gt; object generated when an event occurs to a &lt;code&gt;RowSet&lt;/code&gt; object. A &lt;code&gt;RowSetEvent&lt;/code&gt; object is generated when a single row in a rowset is changed, the whole rowset is changed, or the rowset cursor moves.</source>
          <target state="translated">&lt;code&gt;Event&lt;/code&gt; イベントが発生したときに生成されたオブジェクト &lt;code&gt;RowSet&lt;/code&gt; オブジェクト。 &lt;code&gt;RowSetEvent&lt;/code&gt; オブジェクトを行セット内の単一の行が変更されたときに生成され、全体の行セットが変更、または行セットのカーソルが移動されます。</target>
        </trans-unit>
        <trans-unit id="4b3a2e9faa73995630f706c868721098d88c5c50" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Event&lt;/code&gt; object that provides information about the source of a connection-related event.</source>
          <target state="translated">接続関連のイベントのソースに関する情報を提供する &lt;code&gt;Event&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="405be285ec6669b2271e5bb048931003260ad91c" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Event&lt;/code&gt; object that provides information about the source of a connection-related event. &lt;code&gt;ConnectionEvent&lt;/code&gt; objects are generated when an application closes a pooled connection and when an error occurs. The &lt;code&gt;ConnectionEvent&lt;/code&gt; object contains two kinds of information:</source>
          <target state="translated">接続関連のイベントのソースに関する情報を提供する &lt;code&gt;Event&lt;/code&gt; オブジェクト。 &lt;code&gt;ConnectionEvent&lt;/code&gt; オブジェクトは、アプリケーションがプールされた接続を閉じたとき、およびエラーが発生したときに生成されます。 &lt;code&gt;ConnectionEvent&lt;/code&gt; オブジェクトは、2種類の情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="f6f7318713b357b4769d8f1f22a2c306df5b5900" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ExecutorService&lt;/code&gt; can be shut down, which will cause it to reject new tasks. Two different methods are provided for shutting down an &lt;code&gt;ExecutorService&lt;/code&gt;. The &lt;a href=&quot;#shutdown()&quot;&gt;&lt;code&gt;shutdown()&lt;/code&gt;&lt;/a&gt; method will allow previously submitted tasks to execute before terminating, while the &lt;a href=&quot;#shutdownNow()&quot;&gt;&lt;code&gt;shutdownNow()&lt;/code&gt;&lt;/a&gt; method prevents waiting tasks from starting and attempts to stop currently executing tasks. Upon termination, an executor has no tasks actively executing, no tasks awaiting execution, and no new tasks can be submitted. An unused &lt;code&gt;ExecutorService&lt;/code&gt; should be shut down to allow reclamation of its resources.</source>
          <target state="translated">アン &lt;code&gt;ExecutorService&lt;/code&gt; のは、それが新しいタスクを拒否するようになりますどの、シャットダウンすることができます。 &lt;code&gt;ExecutorService&lt;/code&gt; をシャットダウンするための2つの異なるメソッドが提供されています。&lt;a href=&quot;#shutdown()&quot;&gt; &lt;code&gt;shutdown()&lt;/code&gt; &lt;/a&gt;メソッドは、以前に送信タスクが、終了前に実行することを可能にする&lt;a href=&quot;#shutdownNow()&quot;&gt; &lt;code&gt;shutdownNow()&lt;/code&gt; &lt;/a&gt;開始と現在実行中のタスクを停止しようとする試みからタスクを待っている方法が防止されます。終了時に、エグゼキュータにはアクティブに実行されているタスクがなく、実行を待機しているタスクもありません。また、新しいタスクを送信することもできません。未使用の &lt;code&gt;ExecutorService&lt;/code&gt; は、そのリソースを再利用できるようにシャットダウンする必要があります。</target>
        </trans-unit>
        <trans-unit id="b25ba7da66a2e434a31c596e1c9a7682b7d798df" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ExecutorService&lt;/code&gt; can be shut down, which will cause it to reject new tasks. Two different methods are provided for shutting down an &lt;code&gt;ExecutorService&lt;/code&gt;. The &lt;a href=&quot;executorservice#shutdown--&quot;&gt;&lt;code&gt;shutdown()&lt;/code&gt;&lt;/a&gt; method will allow previously submitted tasks to execute before terminating, while the &lt;a href=&quot;executorservice#shutdownNow--&quot;&gt;&lt;code&gt;shutdownNow()&lt;/code&gt;&lt;/a&gt; method prevents waiting tasks from starting and attempts to stop currently executing tasks. Upon termination, an executor has no tasks actively executing, no tasks awaiting execution, and no new tasks can be submitted. An unused &lt;code&gt;ExecutorService&lt;/code&gt; should be shut down to allow reclamation of its resources.</source>
          <target state="translated">アン &lt;code&gt;ExecutorService&lt;/code&gt; のは、それが新しいタスクを拒否するようになりますどの、シャットダウンすることができます。 &lt;code&gt;ExecutorService&lt;/code&gt; をシャットダウンするための2つの異なるメソッドが提供されています。&lt;a href=&quot;executorservice#shutdown--&quot;&gt; &lt;code&gt;shutdown()&lt;/code&gt; &lt;/a&gt;メソッドは、以前に送信タスクが、終了前に実行することを可能にする&lt;a href=&quot;executorservice#shutdownNow--&quot;&gt; &lt;code&gt;shutdownNow()&lt;/code&gt; &lt;/a&gt;開始と現在実行中のタスクを停止しようとする試みからタスクを待っている方法が防止されます。終了すると、エグゼキュータにはアクティブに実行されているタスクがなく、実行を待機しているタスクがなく、新しいタスクを送信できません。リソースを再利用できるようにするには、未使用の &lt;code&gt;ExecutorService&lt;/code&gt; をシャットダウンする必要があります。</target>
        </trans-unit>
        <trans-unit id="34a794824a4e14db04b15382d70fd07f03ea9260" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ExportException&lt;/code&gt; is a &lt;code&gt;RemoteException&lt;/code&gt; thrown if an attempt to export a remote object fails.</source>
          <target state="translated">アン &lt;code&gt;ExportException&lt;/code&gt; はある &lt;code&gt;RemoteException&lt;/code&gt; リモートオブジェクトのエクスポートが失敗した場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="39d3dceb532a9ec02511fe87f6bbde860ca90ddf" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ExportException&lt;/code&gt; is a &lt;code&gt;RemoteException&lt;/code&gt; thrown if an attempt to export a remote object fails. A remote object is exported via the constructors and &lt;code&gt;exportObject&lt;/code&gt; methods of &lt;code&gt;java.rmi.server.UnicastRemoteObject&lt;/code&gt; and &lt;code&gt;java.rmi.activation.Activatable&lt;/code&gt;.</source>
          <target state="translated">アン &lt;code&gt;ExportException&lt;/code&gt; はある &lt;code&gt;RemoteException&lt;/code&gt; リモートオブジェクトのエクスポートが失敗した場合にスローされます。リモートオブジェクトは、 &lt;code&gt;java.rmi.server.UnicastRemoteObject&lt;/code&gt; および &lt;code&gt;java.rmi.activation.Activatable&lt;/code&gt; のコンストラクターおよび &lt;code&gt;exportObject&lt;/code&gt; メソッドを介してエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="911cc4d361073ce5459c6b73df64355557887a59" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Expression&lt;/code&gt; object represents a primitive expression in which a single method is applied to a target and a set of arguments to return a result - as in &lt;code&gt;&quot;a.getFoo()&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Expression&lt;/code&gt; のように-オブジェクトは、単一のメソッドは、結果を返すために、ターゲットと引数のセットに適用した基本式を表す &lt;code&gt;&quot;a.getFoo()&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d1121514d8e3c0ff39e3e710b7095461935c344d" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;HierarchyBoundsListener&lt;/code&gt; object is registered via &lt;code&gt;addHierarchyBoundsListener&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HierarchyBoundsListener&lt;/code&gt; のオブジェクトを経由して登録されている &lt;code&gt;addHierarchyBoundsListener&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cdb980ef39e188d69415dbe3f5c5201555aa2b11" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;HierarchyListener&lt;/code&gt; object is registered via &lt;code&gt;addHierarchyListener&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HierarchyListener&lt;/code&gt; オブジェクトを経て登録されている &lt;code&gt;addHierarchyListener&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="71b416739d8a7c24a93b6a2a268fedf1589a0659" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;HttpClient&lt;/code&gt; can be used to send &lt;a href=&quot;httprequest&quot;&gt;requests&lt;/a&gt; and retrieve their &lt;a href=&quot;httpresponse&quot;&gt;responses&lt;/a&gt;. An &lt;code&gt;
 HttpClient&lt;/code&gt; is created through a &lt;a href=&quot;#newBuilder()&quot;&gt;&lt;code&gt;builder&lt;/code&gt;&lt;/a&gt;. The builder can be used to configure per-client state, like: the preferred protocol version ( HTTP/1.1 or HTTP/2 ), whether to follow redirects, a proxy, an authenticator, etc. Once built, an &lt;code&gt;HttpClient&lt;/code&gt; is immutable, and can be used to send multiple requests.</source>
          <target state="translated">&lt;code&gt;HttpClient&lt;/code&gt; を送信するために使用することができます&lt;a href=&quot;httprequest&quot;&gt;要求を&lt;/a&gt;し、その取得し&lt;a href=&quot;httpresponse&quot;&gt;た応答を&lt;/a&gt;。 &lt;code&gt; HttpClient&lt;/code&gt; をを介して作成される&lt;a href=&quot;#newBuilder()&quot;&gt; &lt;code&gt;builder&lt;/code&gt; &lt;/a&gt;。ビルダーを使用して、クライアントごとの状態を構成できます。たとえば、優先プロトコルバージョン（HTTP /1.1またはHTTP / 2）、リダイレクトに従うかどうか、プロキシ、オーセンティ &lt;code&gt;HttpClient&lt;/code&gt; などです。ビルドされると、HttpClientは不変であり、複数のリクエストを送信するために使用できます。</target>
        </trans-unit>
        <trans-unit id="7717b3d37f46af4ff8f8b4273f9c3e12bd4fa081" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;HttpClient&lt;/code&gt; provides configuration information, and resource sharing, for all requests sent through it.</source>
          <target state="translated">&lt;code&gt;HttpClient&lt;/code&gt; を、それを介して送信されるすべての要求に対して、設定情報、およびリソースの共有を提供します。</target>
        </trans-unit>
        <trans-unit id="f17d27936e7a73fbbc027ce5fa454011a243097e" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;HttpHeaders&lt;/code&gt; is not typically created directly, but rather returned from an &lt;a href=&quot;httprequest#headers()&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&quot;httpresponse#headers()&quot;&gt;&lt;code&gt;HttpResponse&lt;/code&gt;&lt;/a&gt;. Specific HTTP headers can be set for a &lt;a href=&quot;httprequest&quot;&gt;request&lt;/a&gt; through one of the request builder's &lt;a href=&quot;httprequest.builder#header(java.lang.String,java.lang.String)&quot;&gt;&lt;code&gt;headers&lt;/code&gt;&lt;/a&gt; methods.</source>
          <target state="translated">&lt;code&gt;HttpHeaders&lt;/code&gt; は、一般的に直接作成されたのではなく、から返されていない&lt;a href=&quot;httprequest#headers()&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;か&lt;a href=&quot;httpresponse#headers()&quot;&gt; &lt;code&gt;HttpResponse&lt;/code&gt; &lt;/a&gt;。特定のHTTPヘッダーは、リクエストビルダーの&lt;a href=&quot;httprequest.builder#header(java.lang.String,java.lang.String)&quot;&gt; &lt;code&gt;headers&lt;/code&gt; &lt;/a&gt;メソッドの1つを介して&lt;a href=&quot;httprequest&quot;&gt;リクエストに&lt;/a&gt;設定できます。</target>
        </trans-unit>
        <trans-unit id="11c6f410e4f205680cb5a740e84dd27b2032808a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;HttpRequest&lt;/code&gt; instance is built through an &lt;code&gt;HttpRequest&lt;/code&gt;&lt;a href=&quot;httprequest.builder&quot;&gt;builder&lt;/a&gt;. An &lt;code&gt;HttpRequest&lt;/code&gt; builder is obtained from one of the &lt;a href=&quot;#newBuilder(java.net.URI)&quot;&gt;&lt;code&gt;newBuilder&lt;/code&gt;&lt;/a&gt; methods. A request's &lt;a href=&quot;../../../../java.base/java/net/uri&quot;&gt;&lt;code&gt;URI&lt;/code&gt;&lt;/a&gt;, headers, and body can be set. Request bodies are provided through a &lt;a href=&quot;httprequest.bodypublisher&quot;&gt;&lt;code&gt;BodyPublisher&lt;/code&gt;&lt;/a&gt; supplied to one of the &lt;a href=&quot;httprequest.builder#POST(java.net.http.HttpRequest.BodyPublisher)&quot;&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;httprequest.builder#PUT(java.net.http.HttpRequest.BodyPublisher)&quot;&gt;&lt;code&gt;PUT&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;httprequest.builder#method(java.lang.String,java.net.http.HttpRequest.BodyPublisher)&quot;&gt;&lt;code&gt;method&lt;/code&gt;&lt;/a&gt; methods. Once all required parameters have been set in the builder, &lt;a href=&quot;httprequest.builder#build()&quot;&gt;&lt;code&gt;build&lt;/code&gt;&lt;/a&gt; will return the &lt;code&gt;HttpRequest&lt;/code&gt;. Builders can be copied and modified many times in order to build multiple related requests that differ in some parameters.</source>
          <target state="translated">&lt;code&gt;HttpRequest&lt;/code&gt; のインスタンスがを通じて構築される &lt;code&gt;HttpRequest&lt;/code&gt; の&lt;a href=&quot;httprequest.builder&quot;&gt;ビルダー&lt;/a&gt;。 &lt;code&gt;HttpRequest&lt;/code&gt; のビルダーは、のいずれかから得られる&lt;a href=&quot;#newBuilder(java.net.URI)&quot;&gt; &lt;code&gt;newBuilder&lt;/code&gt; の&lt;/a&gt;方法。リクエストの&lt;a href=&quot;../../../../java.base/java/net/uri&quot;&gt; &lt;code&gt;URI&lt;/code&gt; &lt;/a&gt;、ヘッダー、本文を設定できます。リクエストボディは、&lt;a href=&quot;httprequest.builder#POST(java.net.http.HttpRequest.BodyPublisher)&quot;&gt; &lt;code&gt;POST&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;httprequest.builder#PUT(java.net.http.HttpRequest.BodyPublisher)&quot;&gt; &lt;code&gt;PUT&lt;/code&gt; 、&lt;/a&gt;または&lt;a href=&quot;httprequest.builder#method(java.lang.String,java.net.http.HttpRequest.BodyPublisher)&quot;&gt; &lt;code&gt;method&lt;/code&gt; &lt;/a&gt;メソッドのいずれかに提供される&lt;a href=&quot;httprequest.bodypublisher&quot;&gt; &lt;code&gt;BodyPublisher&lt;/code&gt; &lt;/a&gt;を介して提供されます。必要なすべてのパラメーターがビルダーで設定されると、&lt;a href=&quot;httprequest.builder#build()&quot;&gt; &lt;code&gt;build&lt;/code&gt; &lt;/a&gt;は &lt;code&gt;HttpRequest&lt;/code&gt; を返します。ビルダーは、いくつかのパラメーターが異なる複数の関連するリクエストを作成するために、何度もコピーおよび変更できます。</target>
        </trans-unit>
        <trans-unit id="0f09c8f8c954d15c78d939e82c0b050f51ddbb97" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;HttpResponse&lt;/code&gt; is not created directly, but rather returned as a result of sending an &lt;a href=&quot;httprequest&quot;&gt;&lt;code&gt;HttpRequest&lt;/code&gt;&lt;/a&gt;. An &lt;code&gt;HttpResponse&lt;/code&gt; is made available when the response status code and headers have been received, and typically after the response body has also been completely received. Whether or not the &lt;code&gt;HttpResponse&lt;/code&gt; is made available before the response body has been completely received depends on the &lt;a href=&quot;httpresponse.bodyhandler&quot;&gt;&lt;code&gt;BodyHandler&lt;/code&gt;&lt;/a&gt; provided when sending the &lt;code&gt;HttpRequest&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HttpResponse&lt;/code&gt; には直接作成されたのではなく、送信の結果として返されていない&lt;a href=&quot;httprequest&quot;&gt; &lt;code&gt;HttpRequest&lt;/code&gt; &lt;/a&gt;。 &lt;code&gt;HttpResponse&lt;/code&gt; は、応答ステータスコードとヘッダを受信したときに利用可能であり、典型的にはレスポンスボディはまた、完全に受信された後。応答本文が完全に受信される前に &lt;code&gt;HttpResponse&lt;/code&gt; が使用可能になるかどうかは、 &lt;code&gt;HttpRequest&lt;/code&gt; の送信時に提供される&lt;a href=&quot;httpresponse.bodyhandler&quot;&gt; &lt;code&gt;BodyHandler&lt;/code&gt; &lt;/a&gt;によって異なります。</target>
        </trans-unit>
        <trans-unit id="215a9876e2b623e5944bd9958e1e3ffaf2e78159" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;IIOInvalidTreeException&lt;/code&gt; is thrown when an attempt by an &lt;code&gt;IIOMetadata&lt;/code&gt; object to parse a tree of &lt;code&gt;IIOMetadataNode&lt;/code&gt;s fails.</source>
          <target state="translated">アン &lt;code&gt;IIOInvalidTreeException&lt;/code&gt; をすることによって試みたときにスローされる &lt;code&gt;IIOMetadata&lt;/code&gt; のオブジェクトがツリーを解析する &lt;code&gt;IIOMetadataNode&lt;/code&gt; sが失敗しました。</target>
        </trans-unit>
        <trans-unit id="3c04129b842e0c295a65eac3a6a7fd549c01fba5" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;IIOInvalidTreeException&lt;/code&gt; is thrown when an attempt by an &lt;code&gt;IIOMetadata&lt;/code&gt; object to parse a tree of &lt;code&gt;IIOMetadataNode&lt;/code&gt;s fails. The node that led to the parsing error may be stored. As with any parsing error, the actual error may occur at a different point that that where it is detected. The node returned by &lt;code&gt;getOffendingNode&lt;/code&gt; should merely be considered as a clue to the actual nature of the problem.</source>
          <target state="translated">アン &lt;code&gt;IIOInvalidTreeException&lt;/code&gt; をすることによって試みたときにスローされる &lt;code&gt;IIOMetadata&lt;/code&gt; のオブジェクトがツリーを解析する &lt;code&gt;IIOMetadataNode&lt;/code&gt; sが失敗しました。解析エラーの原因となったノードが保存されている可能性があります。他の解析エラーと同様に、実際のエラーは、それが検出された場所とは異なる場所で発生する可能性があります。 &lt;code&gt;getOffendingNode&lt;/code&gt; によって返されるノードは、単に問題の実際の性質の手がかりと見なされるべきです。</target>
        </trans-unit>
        <trans-unit id="ff541d4087da22b8754dd306bbe67f7e60d262ed" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;IIOMetadata&lt;/code&gt; object containing metadata associated with the image.</source>
          <target state="translated">&lt;code&gt;IIOMetadata&lt;/code&gt; の画像に関連するメタデータを含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="8e1604f511b20c861fe9cc5df12c64eb710bbe30" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;IIOMetadataController&lt;/code&gt; that is suggested for use as the controller for this &lt;code&gt;IIOMetadata&lt;/code&gt; object.</source>
          <target state="translated">AN &lt;code&gt;IIOMetadataController&lt;/code&gt; このためのコントローラとして使用するために提案されている &lt;code&gt;IIOMetadata&lt;/code&gt; オブジェクト。</target>
        </trans-unit>
        <trans-unit id="2a1caceefed4d715e967bc65b486a71ca37b7cfa" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;IIOMetadataController&lt;/code&gt; that is suggested for use as the controller for this &lt;code&gt;IIOMetadata&lt;/code&gt; object. It may be retrieved via &lt;code&gt;getDefaultController&lt;/code&gt;. To install the default controller, call &lt;code&gt;setController(getDefaultController())&lt;/code&gt;. This instance variable should be set by subclasses that choose to provide their own default controller, usually a GUI, for setting parameters.</source>
          <target state="translated">AN &lt;code&gt;IIOMetadataController&lt;/code&gt; このためのコントローラとして使用するために提案されている &lt;code&gt;IIOMetadata&lt;/code&gt; オブジェクト。 &lt;code&gt;getDefaultController&lt;/code&gt; を介して取得できます。デフォルトのコントローラーをインストールするには、 &lt;code&gt;setController(getDefaultController())&lt;/code&gt; を呼び出します。このインスタンス変数は、パラメーターを設定するための独自のデフォルトコントローラー（通常はGUI）を提供することを選択したサブクラスによって設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="ffca7cd14f129aa632000db4eed85262cbd1caa8" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;IOException&lt;/code&gt; raised in &lt;code&gt;WebSocket&lt;/code&gt; will result in an invocation of &lt;code&gt;onError&lt;/code&gt; with that exception (if the input is not closed). Unless otherwise stated if the listener's method throws an exception or a &lt;code&gt;CompletionStage&lt;/code&gt; returned from a method completes exceptionally, the WebSocket will invoke &lt;code&gt;onError&lt;/code&gt; with this exception.</source>
          <target state="translated">AN &lt;code&gt;IOException&lt;/code&gt; がで育て &lt;code&gt;WebSocket&lt;/code&gt; の呼び出しをもたらす &lt;code&gt;onError&lt;/code&gt; （入力が閉じていない場合）ことを除いて。特に明記されていない限り、リスナーのメソッドが例外をスローするか、メソッドから返された &lt;code&gt;CompletionStage&lt;/code&gt; が例外的に完了する場合、WebSocketはこの例外を &lt;code&gt;onError&lt;/code&gt; してonErrorを呼び出します。</target>
        </trans-unit>
        <trans-unit id="6c85c959befab236390af4d1a3f85834bbfc7544" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;IOException&lt;/code&gt; will be thrown if the previous marked position lies in the discarded portion of the stream.</source>
          <target state="translated">アン &lt;code&gt;IOException&lt;/code&gt; がストリームの破棄部分の前のマークされた位置にある場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="aafc5d76c4d0cc5592e66cdb998a7e61c1d42f5b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown if any of the argument keys are not recognized and are not namespace qualified.</source>
          <target state="translated">アン &lt;code&gt;IllegalArgumentException&lt;/code&gt; がどの引数キーも認識されていない場合にスローされると、名前空間修飾されていないされています。</target>
        </trans-unit>
        <trans-unit id="f00da7be4b076b2f36252e431adece3820c33e35" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown if the precision section of the string is out of range (&lt;code&gt;&amp;lt; 0&lt;/code&gt;) or the string is not in the format created by the &lt;a href=&quot;#toString()&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">AN &lt;code&gt;IllegalArgumentException&lt;/code&gt; がストリングの精密部が範囲外の場合（スローされる &lt;code&gt;&amp;lt; 0&lt;/code&gt; ）または文字列により作成された形式でない&lt;a href=&quot;#toString()&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt;メソッド。</target>
        </trans-unit>
        <trans-unit id="9aca7475e60215da9f707c0ba7ec6f4941f6b472" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown if the precision section of the string is out of range (&lt;code&gt;&amp;lt; 0&lt;/code&gt;) or the string is not in the format created by the &lt;a href=&quot;mathcontext#toString--&quot;&gt;&lt;code&gt;toString()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">AN &lt;code&gt;IllegalArgumentException&lt;/code&gt; がストリングの精密部が範囲外の場合（スローされる &lt;code&gt;&amp;lt; 0&lt;/code&gt; ）または文字列により作成された形式でない&lt;a href=&quot;mathcontext#toString--&quot;&gt; &lt;code&gt;toString()&lt;/code&gt; &lt;/a&gt;メソッド。</target>
        </trans-unit>
        <trans-unit id="93685aab653d24a9dd987c56ff592429121080f9" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;IllegalArgumentException&lt;/code&gt; is thrown if the source is the same as the destination.</source>
          <target state="translated">アン &lt;code&gt;IllegalArgumentException&lt;/code&gt; が元が送信先と同じ場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="119a85c6746c62edfcc8db89ec12c05ab2117e6b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;IllegalArgumentException&lt;/code&gt; may be thrown if the source and/or destination image is incompatible with the types of images $ allowed by the class implementing this filter.</source>
          <target state="translated">AN &lt;code&gt;IllegalArgumentException&lt;/code&gt; がソースおよび/または宛先画像は$このフィルタを実装するクラスによって許可される画像の種類と互換性がない場合にスローされてもよいです。</target>
        </trans-unit>
        <trans-unit id="56ee9deaa2bf04ff47d286b7b248d2b1f5ad44ce" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown if &lt;code&gt;nextSibling&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;node&lt;/code&gt; is not a parent of &lt;code&gt;nextSibling&lt;/code&gt;. An &lt;code&gt;IllegalStateException&lt;/code&gt; is thrown if &lt;code&gt;node&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;nextSibling&lt;/code&gt; is not &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">アン &lt;code&gt;IllegalStateException&lt;/code&gt; があればスローされ &lt;code&gt;nextSibling&lt;/code&gt; がない &lt;code&gt;null&lt;/code&gt; と &lt;code&gt;node&lt;/code&gt; の親ではありません &lt;code&gt;nextSibling&lt;/code&gt; 。アン &lt;code&gt;IllegalStateException&lt;/code&gt; が場合にスローされ &lt;code&gt;node&lt;/code&gt; あり &lt;code&gt;null&lt;/code&gt; と &lt;code&gt;nextSibling&lt;/code&gt; がない &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="74817d240b4f8e996deaa3f69b3c57e963e3db18" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ImageFilter&lt;/code&gt; subclass might override this method or not, depending on if and how it can send data in TDLR order. Three possibilities exist:</source>
          <target state="translated">&lt;code&gt;ImageFilter&lt;/code&gt; サブクラスは、このメソッドをオーバーライドまたはかもしれないではない、それはTDLR順にデータを送信できる場合、どのように依存します。3つの可能性があります。</target>
        </trans-unit>
        <trans-unit id="3eff97dad7e057d90c5da902c1c97a2c994b4b70" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ImageReadParam&lt;/code&gt; object is used to specify how an image, or a set of images, will be converted on input from a stream in the context of the Java Image I/O framework. A plug-in for a specific image format will return instances of &lt;code&gt;ImageReadParam&lt;/code&gt; from the &lt;code&gt;getDefaultReadParam&lt;/code&gt; method of its &lt;code&gt;ImageReader&lt;/code&gt; implementation.</source>
          <target state="translated">&lt;code&gt;ImageReadParam&lt;/code&gt; オブジェクトは、画像、又は画像のセットは、Java（登録商標）イメージI / Oフレームワークのコンテキストでストリームからの入力に変換する方法を指定するために使用されます。特定の画像形式のプラグインは、 &lt;code&gt;ImageReader&lt;/code&gt; 実装の &lt;code&gt;getDefaultReadParam&lt;/code&gt; メソッドから &lt;code&gt;ImageReadParam&lt;/code&gt; のインスタンスを返します。</target>
        </trans-unit>
        <trans-unit id="0af56b2a30943a55845e373e8a1c863f3264bfd7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ImageTranscoder&lt;/code&gt; may be used to convert the &lt;code&gt;IIOMetadata&lt;/code&gt; objects supplied by the &lt;code&gt;ImageReader&lt;/code&gt; (representing per-stream and per-image metadata) into corresponding objects suitable for encoding by a particular &lt;code&gt;ImageWriter&lt;/code&gt;. In the case where the methods of this interface are being called directly on an &lt;code&gt;ImageWriter&lt;/code&gt;, the output will be suitable for that writer.</source>
          <target state="translated">&lt;code&gt;ImageTranscoder&lt;/code&gt; 変換するために使用することができる &lt;code&gt;IIOMetadata&lt;/code&gt; によって供給されたオブジェクト &lt;code&gt;ImageReader&lt;/code&gt; 特定による符号化に適したオブジェクト対応に（メタデータストリームごとおよびイメージを表す） &lt;code&gt;ImageWriter&lt;/code&gt; 。このインターフェイスのメソッドが &lt;code&gt;ImageWriter&lt;/code&gt; で直接呼び出されている場合、出力はそのライターに適しています。</target>
        </trans-unit>
        <trans-unit id="7d8a7d1e92624334afdc064444398d6ecbd51424" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; to be used to generate a destination image when reading, or to set the output color type when writing.</source>
          <target state="translated">&lt;code&gt;ImageTypeSpecifier&lt;/code&gt; を読み出す際、宛先画像を生成する、または書き込み時に出力色の種類を設定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1b06626b9bc1b7d4424219cb86f9b3a4e96100a9" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; to be used to generate a destination image when reading, or to set the output color type when writing. If non has been set the value will be &lt;code&gt;null&lt;/code&gt;. By default, the value is &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ImageTypeSpecifier&lt;/code&gt; を読み出す際、宛先画像を生成する、または書き込み時に出力色の種類を設定するために使用されます。nonが設定されている場合、値は &lt;code&gt;null&lt;/code&gt; になります。デフォルトでは、値は &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="61eb5323f84c50ba0da8ce5e355ef698aa642788" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ImageWriteParam&lt;/code&gt; may optionally be supplied for cases where it may affect thumbnail handling.</source>
          <target state="translated">AN &lt;code&gt;ImageWriteParam&lt;/code&gt; 必要に応じて、それがサムネイルハンドリングに影響を与える可能性がある場合のために供給されてもよいです。</target>
        </trans-unit>
        <trans-unit id="cef976dbb17b7d66ea0f7ee9c8bea927e951dbbb" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ImageWriteParam&lt;/code&gt; may optionally be supplied to control the writing process. If &lt;code&gt;param&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, a default write param will be used.</source>
          <target state="translated">AN &lt;code&gt;ImageWriteParam&lt;/code&gt; 必要に応じて、書き込み処理を制御するために供給されてもよいです。場合 &lt;code&gt;param&lt;/code&gt; はある &lt;code&gt;null&lt;/code&gt; 、デフォルトの書き込みparamが使用されます。</target>
        </trans-unit>
        <trans-unit id="0676238948674450872f874a2fc5e75fe95516fd" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; will be thrown if &lt;code&gt;pos&lt;/code&gt; is smaller than the flushed position (as returned by &lt;code&gt;getflushedPosition&lt;/code&gt;).</source>
          <target state="translated">AN &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; 場合にスローされる &lt;code&gt;pos&lt;/code&gt; が（から返されるフラッシュ位置よりも小さい &lt;code&gt;getflushedPosition&lt;/code&gt; から）。</target>
        </trans-unit>
        <trans-unit id="5c92d6f2dde615de7d5fde4704fe88b05409eb09" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;InetAddress&lt;/code&gt; representing the address of the network interface used for multicast packets.</source>
          <target state="translated">AN &lt;code&gt;InetAddress&lt;/code&gt; マルチキャストパケットに使用するネットワークインタフェースのアドレスを表します。</target>
        </trans-unit>
        <trans-unit id="381b3fa54eeedc806d16669d213a81385325e77f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;InputMethodListener&lt;/code&gt; object is registered via &lt;code&gt;addInputMethodListener&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;InputMethodListener&lt;/code&gt; オブジェクトがによって登録され &lt;code&gt;addInputMethodListener&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="deb8cf7537deddf0c6f8544b44f9dd3cbc5eb972" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Insets&lt;/code&gt; object is a representation of the borders of a container.</source>
          <target state="translated">&lt;code&gt;Insets&lt;/code&gt; オブジェクトはコンテナの境界を表現したものです。</target>
        </trans-unit>
        <trans-unit id="928361216441cf9c71f23ec8de7e70806a2b59d8" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Insets&lt;/code&gt; object is a representation of the borders of a container. It specifies the space that a container must leave at each of its edges. The space can be a border, a blank space, or a title.</source>
          <target state="translated">&lt;code&gt;Insets&lt;/code&gt; オブジェクトはコンテナの境界を表現したものです。コンテナがその各エッジに残さなければならないスペースを指定します。スペースは、境界線、空白スペース、またはタイトルにすることができます。</target>
        </trans-unit>
        <trans-unit id="53aa0eb23f1c7f11a897dd66738bc32f33c521e7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;InvalidMidiDataException&lt;/code&gt; indicates that inappropriate MIDI data was encountered.</source>
          <target state="translated">アン &lt;code&gt;InvalidMidiDataException&lt;/code&gt; をスローは、不適切なMIDIデータが検出されたことを示しています。</target>
        </trans-unit>
        <trans-unit id="7bba11aa35eb3242c6e0f5f5f48d0e0feed1e04a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;InvalidMidiDataException&lt;/code&gt; indicates that inappropriate MIDI data was encountered. This often means that the data is invalid in and of itself, from the perspective of the MIDI specification. An example would be an undefined status byte. However, the exception might simply mean that the data was invalid in the context it was used, or that the object to which the data was given was unable to parse or use it. For example, a file reader might not be able to parse a Type 2 MIDI file, even though that format is defined in the MIDI specification.</source>
          <target state="translated">アン &lt;code&gt;InvalidMidiDataException&lt;/code&gt; をスローは、不適切なMIDIデータが検出されたことを示しています。これは、MIDI仕様の観点からすると、データ自体が無効であることを意味します。例としては、未定義のステータスバイトがあります。ただし、例外は、データが使用されたコンテキストでデータが無効であること、またはデータが渡されたオブジェクトがデータを解析または使用できなかったことを単に意味している可能性があります。たとえば、ファイルリーダーがType 2 MIDIファイルを解析できない場合がありますが、その形式はMIDI仕様で定義されています。</target>
        </trans-unit>
        <trans-unit id="5fe13eb70d6944f3a9cc1317efdfc7e3e5b2f2cb" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ItemListener&lt;/code&gt; object is registered via &lt;code&gt;addItemListener&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ItemListener&lt;/code&gt; オブジェクトがによって登録され &lt;code&gt;addItemListener&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="876a697241aef30034474ad4bac4fc4eb205beab" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Iterator&lt;/code&gt; that yields provider objects for the given service, in some arbitrary order. The iterator will throw an &lt;code&gt;Error&lt;/code&gt; if a provider-configuration file violates the specified format or if a provider class cannot be found and instantiated.</source>
          <target state="translated">指定されたサービスのプロバイダーオブジェクトを任意の順序で生成する &lt;code&gt;Iterator&lt;/code&gt; 。プロバイダー構成ファイルが指定された形式に違反している場合、またはプロバイダークラスが見つからずインスタンス化できない場合、イテレーターは &lt;code&gt;Error&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="453a65b4c77bec339c86a663165139d2fc1bc97e" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;OBJECT_CHANGED&lt;/code&gt; event type is fired when (the contents of) an object has changed. This might mean that its attributes have been modified, added, or removed, and/or that the object itself has been replaced. How the object has changed can be determined by examining the &lt;code&gt;NamingEvent&lt;/code&gt;'s old and new bindings.</source>
          <target state="translated">&lt;code&gt;OBJECT_CHANGED&lt;/code&gt; イベントタイプは、オブジェクト（の内容）が変化したときに発生します。これは、その属性が変更、追加、または削除されたこと、および/またはオブジェクト自体が置き換えられたことを意味する場合があります。オブジェクトがどのように変更されたかは、 &lt;code&gt;NamingEvent&lt;/code&gt; の古いバインディングと新しいバインディングを調べることで判断できます。</target>
        </trans-unit>
        <trans-unit id="01662decb3ea13e64f59d3c3c37ea323d99c3599" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ObjID&lt;/code&gt; created via this constructor will not clash with any &lt;code&gt;ObjID&lt;/code&gt;s generated via the no-arg constructor.</source>
          <target state="translated">このコンストラクターを介して作成された &lt;code&gt;ObjID&lt;/code&gt; は、引数なしのコンストラクターを介して生成された &lt;code&gt;ObjID&lt;/code&gt; と衝突しません。</target>
        </trans-unit>
        <trans-unit id="ed4c2b7df73f2bba1cb41cc9dae536ef66f5986a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ObjID&lt;/code&gt; instance contains an object number (of type &lt;code&gt;long&lt;/code&gt;) and an address space identifier (of type &lt;a href=&quot;uid&quot;&gt;&lt;code&gt;UID&lt;/code&gt;&lt;/a&gt;). In a unique &lt;code&gt;ObjID&lt;/code&gt;, the address space identifier is unique with respect to a given host over time. In a well-known &lt;code&gt;ObjID&lt;/code&gt;, the address space identifier is equivalent to one returned by invoking the &lt;a href=&quot;uid#%3Cinit%3E(short)&quot;&gt;&lt;code&gt;UID(short)&lt;/code&gt;&lt;/a&gt; constructor with the value zero.</source>
          <target state="translated">AN &lt;code&gt;ObjID&lt;/code&gt; インスタンスは、（タイプのオブジェクト番号含有 &lt;code&gt;long&lt;/code&gt; ）及び（タイプのアドレス空間識別子&lt;a href=&quot;uid&quot;&gt; &lt;code&gt;UID&lt;/code&gt; を&lt;/a&gt;）。一意の &lt;code&gt;ObjID&lt;/code&gt; では、アドレス空間識別子は特定のホストに関して時間の経過とともに一意になります。よく知られている &lt;code&gt;ObjID&lt;/code&gt; では、アドレス空間識別子は、値がゼロの&lt;a href=&quot;uid#%3Cinit%3E(short)&quot;&gt; &lt;code&gt;UID(short)&lt;/code&gt; &lt;/a&gt;コンストラクターを呼び出すことによって返されるものと同等です。</target>
        </trans-unit>
        <trans-unit id="cebae7580f144b2893fd60b11022a25153689298" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ObjID&lt;/code&gt; is used to identify a remote object exported to an RMI runtime.</source>
          <target state="translated">AN &lt;code&gt;ObjID&lt;/code&gt; RMIランタイムにエクスポートされたリモートオブジェクトを識別するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1d88f02c88049f506a26bcc61da5bb687d826268" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ObjID&lt;/code&gt; is used to identify a remote object exported to an RMI runtime. When a remote object is exported, it is assigned an object identifier either implicitly or explicitly, depending on the API used to export.</source>
          <target state="translated">AN &lt;code&gt;ObjID&lt;/code&gt; RMIランタイムにエクスポートされたリモートオブジェクトを識別するために使用されます。リモートオブジェクトがエクスポートされると、エクスポートに使用されるAPIに応じて、暗黙的または明示的にオブジェクト識別子が割り当てられます。</target>
        </trans-unit>
        <trans-unit id="f4a1e28654a182eabca6158e76884be34c9fe9e7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Object&lt;/code&gt; array parsed from the string.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 配列は、文字列から解析されました。</target>
        </trans-unit>
        <trans-unit id="a89fb1fb9e8b9333e018dcdcae26cf8926a94b8e" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Object&lt;/code&gt; array parsed from the string. In case of error, returns null.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 配列は、文字列から解析されました。エラーの場合、nullを返します。</target>
        </trans-unit>
        <trans-unit id="44a73feaa1d30e076b53ad0640258478b3baa47a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Object&lt;/code&gt; may be supplied to the plug-in at construction time. The nature of the object is entirely plug-in specific.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 構築時点でプラグインに供給されてもよいです。オブジェクトの性質は完全にプラグイン固有です。</target>
        </trans-unit>
        <trans-unit id="1113d2ff78e48b86013cb0efbe478a6f171736fb" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Object&lt;/code&gt; parsed from the string.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 文字列から解析しました。</target>
        </trans-unit>
        <trans-unit id="b2b2f9a781ddabf1ce08f839641cdac441c5c350" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Object&lt;/code&gt; parsed from the string. In case of error, returns null.</source>
          <target state="translated">&lt;code&gt;Object&lt;/code&gt; 文字列から解析しました。エラーの場合、nullを返します。</target>
        </trans-unit>
        <trans-unit id="f030ca9d09ead7fca4750fa767a999c981460022" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ObjectFactory&lt;/code&gt; is responsible for creating objects of a specific type. In the above example, you may have a &lt;code&gt;PrinterObjectFactory&lt;/code&gt; for creating &lt;code&gt;Printer&lt;/code&gt; objects.</source>
          <target state="translated">アン &lt;code&gt;ObjectFactory&lt;/code&gt; 特定のタイプのオブジェクトを作成するための責任があります。上記の例では、 &lt;code&gt;Printer&lt;/code&gt; オブジェクトを作成するための &lt;code&gt;PrinterObjectFactory&lt;/code&gt; がある場合があります。</target>
        </trans-unit>
        <trans-unit id="3cffd3d33469f003918640de04922cf8a52ea2f4" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ObjectFactory&lt;/code&gt; is responsible for creating objects of a specific type. In the above example, you may have a PrinterObjectFactory for creating Printer objects.</source>
          <target state="translated">アン &lt;code&gt;ObjectFactory&lt;/code&gt; 特定のタイプのオブジェクトを作成するための責任があります。上記の例では、Printerオブジェクトを作成するためのPrinterObjectFactoryがある場合があります。</target>
        </trans-unit>
        <trans-unit id="1496da793a8904933db3ca8c67149b1c888e274f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ObjectInstance&lt;/code&gt;, containing the &lt;code&gt;ObjectName&lt;/code&gt; and the Java class name of the newly instantiated MBean. If the contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;n&lt;/code&gt;, the contained Java class name is &lt;code&gt;&lt;a href=&quot;#getMBeanInfo(javax.management.ObjectName)&quot;&gt;&lt;code&gt;getMBeanInfo(n)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt;.</source>
          <target state="translated">アン &lt;code&gt;ObjectInstance&lt;/code&gt; 含む、 &lt;code&gt;ObjectName&lt;/code&gt; の新しくインスタンス化されたMBeanのJavaクラス名を。含まれている &lt;code&gt;ObjectName&lt;/code&gt; が &lt;code&gt;n&lt;/code&gt; の場合、含まれているJavaクラス名は &lt;code&gt;&lt;a href=&quot;#getMBeanInfo(javax.management.ObjectName)&quot;&gt;&lt;code&gt;getMBeanInfo(n)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="18ce11c46aec8d8e7573a6e1056894a175c1b584" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ObjectInstance&lt;/code&gt;, containing the &lt;code&gt;ObjectName&lt;/code&gt; and the Java class name of the newly instantiated MBean. If the contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;n&lt;/code&gt;, the contained Java class name is &lt;code&gt;&lt;a href=&quot;#getMBeanInfo(javax.management.ObjectName,javax.security.auth.Subject)&quot;&gt;&lt;code&gt;getMBeanInfo(n)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt;.</source>
          <target state="translated">アン &lt;code&gt;ObjectInstance&lt;/code&gt; 含む、 &lt;code&gt;ObjectName&lt;/code&gt; の新しくインスタンス化されたMBeanのJavaクラス名を。含まれている &lt;code&gt;ObjectName&lt;/code&gt; が &lt;code&gt;n&lt;/code&gt; の場合、含まれているJavaクラス名は &lt;code&gt;&lt;a href=&quot;#getMBeanInfo(javax.management.ObjectName,javax.security.auth.Subject)&quot;&gt;&lt;code&gt;getMBeanInfo(n)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="79badb7efe76de8661c61350f881a70fd7e76866" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ObjectInstance&lt;/code&gt;, containing the &lt;code&gt;ObjectName&lt;/code&gt; and the Java class name of the newly instantiated MBean. If the contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;n&lt;/code&gt;, the contained Java class name is &lt;code&gt;&lt;a href=&quot;mbeanserverconnection#getMBeanInfo(javax.management.ObjectName)&quot;&gt;&lt;code&gt;getMBeanInfo(n)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt;.</source>
          <target state="translated">アン &lt;code&gt;ObjectInstance&lt;/code&gt; 含む、 &lt;code&gt;ObjectName&lt;/code&gt; の新しくインスタンス化されたMBeanのJavaクラス名を。含まれている &lt;code&gt;ObjectName&lt;/code&gt; が &lt;code&gt;n&lt;/code&gt; の場合、含まれているJavaクラス名は &lt;code&gt;&lt;a href=&quot;mbeanserverconnection#getMBeanInfo(javax.management.ObjectName)&quot;&gt;&lt;code&gt;getMBeanInfo(n)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2060006d14110cec6851003aef5c5a95b2b3ee84" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ObjectInstance&lt;/code&gt;, containing the &lt;code&gt;ObjectName&lt;/code&gt; and the Java class name of the newly instantiated MBean. If the contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;n&lt;/code&gt;, the contained Java class name is &lt;code&gt;&lt;a href=&quot;mbeanserverconnection#getMBeanInfo-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getMBeanInfo(n)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt;.</source>
          <target state="translated">アン &lt;code&gt;ObjectInstance&lt;/code&gt; 含む、 &lt;code&gt;ObjectName&lt;/code&gt; の新しくインスタンス化されたMBeanのJavaクラス名を。含まれる &lt;code&gt;ObjectName&lt;/code&gt; が &lt;code&gt;n&lt;/code&gt; の場合、含まれるJavaクラス名は &lt;code&gt;&lt;a href=&quot;mbeanserverconnection#getMBeanInfo-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getMBeanInfo(n)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="96af027203337c8583053e59a2730e00e19b4d0b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ObjectInstance&lt;/code&gt;, containing the &lt;code&gt;ObjectName&lt;/code&gt; and the Java class name of the newly instantiated MBean. If the contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;n&lt;/code&gt;, the contained Java class name is &lt;code&gt;&lt;a href=&quot;rmiconnection#getMBeanInfo-javax.management.ObjectName-javax.security.auth.Subject-&quot;&gt;&lt;code&gt;getMBeanInfo(n)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt;.</source>
          <target state="translated">アン &lt;code&gt;ObjectInstance&lt;/code&gt; 含む、 &lt;code&gt;ObjectName&lt;/code&gt; の新しくインスタンス化されたMBeanのJavaクラス名を。含まれる &lt;code&gt;ObjectName&lt;/code&gt; が &lt;code&gt;n&lt;/code&gt; の場合、含まれるJavaクラス名は &lt;code&gt;&lt;a href=&quot;rmiconnection#getMBeanInfo-javax.management.ObjectName-javax.security.auth.Subject-&quot;&gt;&lt;code&gt;getMBeanInfo(n)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="970d026d5d18357f881129d77dd94b9ddade6ac8" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ObjectInstance&lt;/code&gt;, containing the &lt;code&gt;ObjectName&lt;/code&gt; and the Java class name of the newly registered MBean. If the contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;n&lt;/code&gt;, the contained Java class name is &lt;code&gt;&lt;a href=&quot;mbeanserver#getMBeanInfo-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getMBeanInfo(n)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt;.</source>
          <target state="translated">アン &lt;code&gt;ObjectInstance&lt;/code&gt; 含む、 &lt;code&gt;ObjectName&lt;/code&gt; のと新たに登録されたMBeanのJavaクラス名を。含まれる &lt;code&gt;ObjectName&lt;/code&gt; が &lt;code&gt;n&lt;/code&gt; の場合、含まれるJavaクラス名は &lt;code&gt;&lt;a href=&quot;mbeanserver#getMBeanInfo-javax.management.ObjectName-&quot;&gt;&lt;code&gt;getMBeanInfo(n)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="367131a0fc288760ae62ba13f1cd340a8c13f2ec" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ObjectInstance&lt;/code&gt;, containing the &lt;code&gt;ObjectName&lt;/code&gt; and the Java class name of the newly registered MBean. If the contained &lt;code&gt;ObjectName&lt;/code&gt; is &lt;code&gt;n&lt;/code&gt;, the contained Java class name is &lt;code&gt;&lt;a href=&quot;mbeanserverconnection#getMBeanInfo(javax.management.ObjectName)&quot;&gt;&lt;code&gt;getMBeanInfo(n)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt;.</source>
          <target state="translated">アン &lt;code&gt;ObjectInstance&lt;/code&gt; 含む、 &lt;code&gt;ObjectName&lt;/code&gt; のと新たに登録されたMBeanのJavaクラス名を。含まれている &lt;code&gt;ObjectName&lt;/code&gt; が &lt;code&gt;n&lt;/code&gt; の場合、含まれているJavaクラス名は &lt;code&gt;&lt;a href=&quot;mbeanserverconnection#getMBeanInfo(javax.management.ObjectName)&quot;&gt;&lt;code&gt;getMBeanInfo(n)&lt;/code&gt;&lt;/a&gt;.getClassName()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="22b1238add391577e61ae1c72e366996673e30d4" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Operation&lt;/code&gt; contains a description of a Java method. &lt;code&gt;Operation&lt;/code&gt; objects were used in JDK1.1 version stubs and skeletons. The &lt;code&gt;Operation&lt;/code&gt; class is not needed for 1.2 style stubs (stubs generated with &lt;code&gt;rmic -v1.2&lt;/code&gt;); hence, this class is deprecated.</source>
          <target state="translated">アン &lt;code&gt;Operation&lt;/code&gt; Javaメソッドの記述が含まれています。 &lt;code&gt;Operation&lt;/code&gt; オブジェクトは、JDK1.1バージョンのスタブとスケルトンで使用されていました。1.2スタイルのスタブ（ &lt;code&gt;rmic -v1.2&lt;/code&gt; で生成されたスタブ）には、 &lt;code&gt;Operation&lt;/code&gt; クラスは必要ありません。したがって、このクラスは非推奨です。</target>
        </trans-unit>
        <trans-unit id="fcb9cd3f7c3d155a9fc1c14173f2c0f205f67800" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;RMIClientSocketFactory&lt;/code&gt; instance associated with a remote object will be downloaded to clients when the remote object's reference is transmitted in an RMI call. This &lt;code&gt;RMIClientSocketFactory&lt;/code&gt; will be used to create connections to the remote object for remote method calls.</source>
          <target state="translated">リモートオブジェクトの参照がRMI呼び出しで送信されると、リモートオブジェクトに関連付けられた &lt;code&gt;RMIClientSocketFactory&lt;/code&gt; インスタンスがクライアントにダウンロードされます。この &lt;code&gt;RMIClientSocketFactory&lt;/code&gt; は、リモートメソッド呼び出し用のリモートオブジェクトへの接続を作成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="737549b89ab36e8a6b124f8e5c27276f4eb6f581" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;RMIClientSocketFactory&lt;/code&gt; instance can also be associated with a remote object registry so that clients can use custom socket communication with a remote object registry.</source>
          <target state="translated">&lt;code&gt;RMIClientSocketFactory&lt;/code&gt; のクライアントはリモートオブジェクトレジストリとのカスタムソケット通信を使用できるように、インスタンスは、リモートオブジェクトレジストリと関連付けることができます。</target>
        </trans-unit>
        <trans-unit id="d8463cdb48533d2597c474078fd1251f6ea3dabd" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;RMIClientSocketFactory&lt;/code&gt; instance is used by the RMI runtime in order to obtain client sockets for RMI calls.</source>
          <target state="translated">&lt;code&gt;RMIClientSocketFactory&lt;/code&gt; のインスタンスは、RMI呼び出しのクライアントソケットを取得するためにRMIランタイムによって使用されています。</target>
        </trans-unit>
        <trans-unit id="e9bcb788adf40277c550c55cdcf884f207127aaf" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;RMIClientSocketFactory&lt;/code&gt; instance is used by the RMI runtime in order to obtain client sockets for RMI calls. A remote object can be associated with an &lt;code&gt;RMIClientSocketFactory&lt;/code&gt; when it is created/exported via the constructors or &lt;code&gt;exportObject&lt;/code&gt; methods of &lt;code&gt;java.rmi.server.UnicastRemoteObject&lt;/code&gt; and &lt;code&gt;java.rmi.activation.Activatable&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;RMIClientSocketFactory&lt;/code&gt; のインスタンスは、RMI呼び出しのクライアントソケットを取得するためにRMIランタイムによって使用されています。リモートオブジェクトは、 &lt;code&gt;java.rmi.server.UnicastRemoteObject&lt;/code&gt; および &lt;code&gt;java.rmi.activation.Activatable&lt;/code&gt; のコンストラクターまたは &lt;code&gt;exportObject&lt;/code&gt; メソッドを介して作成/エクスポートされるときに、 &lt;code&gt;RMIClientSocketFactory&lt;/code&gt; に関連付けることができます。</target>
        </trans-unit>
        <trans-unit id="92484177ebf1cca66e40e9dd93b82ce77dc4872c" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;RMIFailureHandler&lt;/code&gt; can be registered via the &lt;code&gt;RMISocketFactory.setFailureHandler&lt;/code&gt; call.</source>
          <target state="translated">アン &lt;code&gt;RMIFailureHandler&lt;/code&gt; はを経由して登録することができ &lt;code&gt;RMISocketFactory.setFailureHandler&lt;/code&gt; ののコール。</target>
        </trans-unit>
        <trans-unit id="e35a6f3c2785b092dc2e5a4bed6acb5573bc8ff8" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;RMIFailureHandler&lt;/code&gt; can be registered via the &lt;code&gt;RMISocketFactory.setFailureHandler&lt;/code&gt; call. The &lt;code&gt;failure&lt;/code&gt; method of the handler is invoked when the RMI runtime is unable to create a &lt;code&gt;ServerSocket&lt;/code&gt; to listen for incoming calls. The &lt;code&gt;failure&lt;/code&gt; method returns a boolean indicating whether the runtime should attempt to re-create the &lt;code&gt;ServerSocket&lt;/code&gt;.</source>
          <target state="translated">アン &lt;code&gt;RMIFailureHandler&lt;/code&gt; はを経由して登録することができ &lt;code&gt;RMISocketFactory.setFailureHandler&lt;/code&gt; ののコール。ハンドラーの &lt;code&gt;failure&lt;/code&gt; メソッドは、RMIランタイムが着信呼び出しをリッスンする &lt;code&gt;ServerSocket&lt;/code&gt; を作成できない場合に呼び出されます。 &lt;code&gt;failure&lt;/code&gt; 方法は、ランタイム再作成しようとするかどうかを示すブール値を返し &lt;code&gt;ServerSocket&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c078116adbf5600a7ded51d85f04eb769076fa4c" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;RMISecurityException&lt;/code&gt; signals that a security exception has occurred during the execution of one of &lt;code&gt;java.rmi.RMISecurityManager&lt;/code&gt;'s methods.</source>
          <target state="translated">&lt;code&gt;RMISecurityException&lt;/code&gt; のセキュリティ例外のいずれかの実行中に発生したことを信号 &lt;code&gt;java.rmi.RMISecurityManager&lt;/code&gt; の方法。</target>
        </trans-unit>
        <trans-unit id="9260b78df046cacf42a1f047fc16cfee645bc0ef" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;RMIServerSocketFactory&lt;/code&gt; instance associated with a remote object is used to obtain the &lt;code&gt;ServerSocket&lt;/code&gt; used to accept incoming calls from clients.</source>
          <target state="translated">リモートオブジェクトに関連付けられた &lt;code&gt;RMIServerSocketFactory&lt;/code&gt; インスタンスは、クライアントからの着信呼び出しを受け入れるために使用される &lt;code&gt;ServerSocket&lt;/code&gt; を取得するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1915163dedeaf8aed812f1de11426d318c13ea0b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;RMIServerSocketFactory&lt;/code&gt; instance can also be associated with a remote object registry so that clients can use custom socket communication with a remote object registry.</source>
          <target state="translated">&lt;code&gt;RMIServerSocketFactory&lt;/code&gt; のクライアントはリモートオブジェクトレジストリとのカスタムソケット通信を使用できるように、インスタンスは、リモートオブジェクトレジストリと関連付けることができます。</target>
        </trans-unit>
        <trans-unit id="095048bd49f178e3ee754e3cd4158095e703148d" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;RMIServerSocketFactory&lt;/code&gt; instance is used by the RMI runtime in order to obtain server sockets for RMI calls.</source>
          <target state="translated">&lt;code&gt;RMIServerSocketFactory&lt;/code&gt; のインスタンスは、RMI呼び出しのサーバソケットを取得するためにRMIランタイムによって使用されています。</target>
        </trans-unit>
        <trans-unit id="c1a8f343e388e6844282613843c08934c8a672f7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;RMIServerSocketFactory&lt;/code&gt; instance is used by the RMI runtime in order to obtain server sockets for RMI calls. A remote object can be associated with an &lt;code&gt;RMIServerSocketFactory&lt;/code&gt; when it is created/exported via the constructors or &lt;code&gt;exportObject&lt;/code&gt; methods of &lt;code&gt;java.rmi.server.UnicastRemoteObject&lt;/code&gt; and &lt;code&gt;java.rmi.activation.Activatable&lt;/code&gt; .</source>
          <target state="translated">&lt;code&gt;RMIServerSocketFactory&lt;/code&gt; のインスタンスは、RMI呼び出しのサーバソケットを取得するためにRMIランタイムによって使用されています。リモートオブジェクトは、 &lt;code&gt;java.rmi.server.UnicastRemoteObject&lt;/code&gt; および &lt;code&gt;java.rmi.activation.Activatable&lt;/code&gt; のコンストラクターまたは &lt;code&gt;exportObject&lt;/code&gt; メソッドを介して作成/エクスポートされるときに、 &lt;code&gt;RMIServerSocketFactory&lt;/code&gt; に関連付けることができます。</target>
        </trans-unit>
        <trans-unit id="eadcb28c0983a54e9cf63a2da53bc2bfc55c4499" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;RMISocketFactory&lt;/code&gt; instance is used by the RMI runtime in order to obtain client and server sockets for RMI calls.</source>
          <target state="translated">&lt;code&gt;RMISocketFactory&lt;/code&gt; クラスのインスタンスは、RMI呼び出しのためのクライアントとサーバのソケットを取得するためにRMIランタイムによって使用されています。</target>
        </trans-unit>
        <trans-unit id="3728c4ed6dca1db72cf2c01b2e8e794022ecb24e" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;RMISocketFactory&lt;/code&gt; instance is used by the RMI runtime in order to obtain client and server sockets for RMI calls. An application may use the &lt;code&gt;setSocketFactory&lt;/code&gt; method to request that the RMI runtime use its socket factory instance instead of the default implementation.</source>
          <target state="translated">&lt;code&gt;RMISocketFactory&lt;/code&gt; クラスのインスタンスは、RMI呼び出しのためのクライアントとサーバのソケットを取得するためにRMIランタイムによって使用されています。アプリケーションは、 &lt;code&gt;setSocketFactory&lt;/code&gt; メソッドを使用して、RMIランタイムがデフォルトの実装ではなくソケットファクトリインスタンスを使用するように要求できます。</target>
        </trans-unit>
        <trans-unit id="ddc82237d7b837d3a8e58cbfb50d72c135f5cd3a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;SSLEngine&lt;/code&gt; is created by calling &lt;a href=&quot;sslcontext#createSSLEngine()&quot;&gt;&lt;code&gt;SSLContext.createSSLEngine()&lt;/code&gt;&lt;/a&gt; from an initialized &lt;code&gt;SSLContext&lt;/code&gt;. Any configuration parameters should be set before making the first call to &lt;code&gt;wrap()&lt;/code&gt;, &lt;code&gt;unwrap()&lt;/code&gt;, or &lt;code&gt;beginHandshake()&lt;/code&gt;. These methods all trigger the initial handshake.</source>
          <target state="translated">アン &lt;code&gt;SSLEngine&lt;/code&gt; のは、呼び出すことによって作成された&lt;a href=&quot;sslcontext#createSSLEngine()&quot;&gt; &lt;code&gt;SSLContext.createSSLEngine()&lt;/code&gt; &lt;/a&gt;初期化から &lt;code&gt;SSLContext&lt;/code&gt; 。 &lt;code&gt;wrap()&lt;/code&gt; 、 &lt;code&gt;unwrap()&lt;/code&gt; 、または &lt;code&gt;beginHandshake()&lt;/code&gt; を最初に呼び出す前に、構成パラメーターを設定する必要があります。これらのメソッドはすべて、最初のハンドシェイクをトリガーします。</target>
        </trans-unit>
        <trans-unit id="81ed261f51d69e08c9a9a32c6befbbe988d4db6b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;SSLEngine&lt;/code&gt; is created by calling &lt;a href=&quot;sslcontext#createSSLEngine--&quot;&gt;&lt;code&gt;SSLContext.createSSLEngine()&lt;/code&gt;&lt;/a&gt; from an initialized &lt;code&gt;SSLContext&lt;/code&gt;. Any configuration parameters should be set before making the first call to &lt;code&gt;wrap()&lt;/code&gt;, &lt;code&gt;unwrap()&lt;/code&gt;, or &lt;code&gt;beginHandshake()&lt;/code&gt;. These methods all trigger the initial handshake.</source>
          <target state="translated">アン &lt;code&gt;SSLEngine&lt;/code&gt; のは、呼び出すことによって作成された&lt;a href=&quot;sslcontext#createSSLEngine--&quot;&gt; &lt;code&gt;SSLContext.createSSLEngine()&lt;/code&gt; &lt;/a&gt;初期化から &lt;code&gt;SSLContext&lt;/code&gt; 。 &lt;code&gt;wrap()&lt;/code&gt; 、 &lt;code&gt;unwrap()&lt;/code&gt; 、または &lt;code&gt;beginHandshake()&lt;/code&gt; を最初に呼び出す前に、構成パラメーターを設定する必要があります。これらのメソッドはすべて、初期ハンドシェイクをトリガーします。</target>
        </trans-unit>
        <trans-unit id="e43e593b9594b8ce76f844db0e5f97ad8dd1cb2f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;SSLEngine&lt;/code&gt; using this session may generate SSL/TLS/DTLS packets of any size up to and including the value returned by this method. All &lt;code&gt;SSLEngine&lt;/code&gt; network buffers should be sized at least this large to avoid insufficient space problems when performing &lt;code&gt;wrap&lt;/code&gt; and &lt;code&gt;unwrap&lt;/code&gt; calls.</source>
          <target state="translated">このセッションを使用する &lt;code&gt;SSLEngine&lt;/code&gt; は、このメソッドによって返される値までの任意のサイズのSSL / TLS / DTLSパケットを生成できます。すべての &lt;code&gt;SSLEngine&lt;/code&gt; ネットワークバッファは、 &lt;code&gt;wrap&lt;/code&gt; および &lt;code&gt;unwrap&lt;/code&gt; 呼び出しを実行する際のスペース不足の問題を回避するために、少なくともこのサイズにする必要があります。</target>
        </trans-unit>
        <trans-unit id="82c50a07c3818bd2118910613159095eba3080b8" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;SSLEngineResult&lt;/code&gt; enum describing the current handshaking state of this &lt;code&gt;SSLEngine&lt;/code&gt;.</source>
          <target state="translated">アン &lt;code&gt;SSLEngineResult&lt;/code&gt; 本の現在のハンドシェーク状態を記述する列挙型 &lt;code&gt;SSLEngine&lt;/code&gt; のを。</target>
        </trans-unit>
        <trans-unit id="2306dcc0e2cc49d8f2ac4ca584af3de2c2e5f9d5" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;SSLEngineResult&lt;/code&gt; enum describing the overall result of the &lt;code&gt;SSLEngine&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; 操作の全体的な結果を説明する &lt;code&gt;SSLEngineResult&lt;/code&gt; 列挙。</target>
        </trans-unit>
        <trans-unit id="e4dff761f32721963abd9bcae6634e956ea992e9" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;SSLEngineResult&lt;/code&gt; enum describing the overall result of the &lt;code&gt;SSLEngine&lt;/code&gt; operation. The &lt;code&gt;Status&lt;/code&gt; value does not reflect the state of a &lt;code&gt;SSLEngine&lt;/code&gt; handshake currently in progress. The &lt;code&gt;SSLEngineResult's HandshakeStatus&lt;/code&gt; should be consulted for that information.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; 操作の全体的な結果を説明する &lt;code&gt;SSLEngineResult&lt;/code&gt; 列挙。 &lt;code&gt;Status&lt;/code&gt; 値は、の状態を反映しない &lt;code&gt;SSLEngine&lt;/code&gt; のの、現在進行中のハンドシェイクを。 &lt;code&gt;SSLEngineResult's HandshakeStatus&lt;/code&gt; その情報のために相談する必要があります。</target>
        </trans-unit>
        <trans-unit id="e3df0b722a68c7182de32c3a381a10b01aabef3c" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;SSLServerSocket&lt;/code&gt; contains several pieces of state data which are inherited by the &lt;code&gt;SSLSocket&lt;/code&gt; at socket creation. These include the enabled cipher suites and protocols, whether client authentication is necessary, and whether created sockets should begin handshaking in client or server mode. The state inherited by the created &lt;code&gt;SSLSocket&lt;/code&gt; can be overriden by calling the appropriate methods.</source>
          <target state="translated">アン &lt;code&gt;SSLServerSocket&lt;/code&gt; は、継承された状態データのいくつかの部分が含ま &lt;code&gt;SSLSocket&lt;/code&gt; ソケット作成時に。これらには、有効な暗号スイートとプロトコル、クライアント認証が必要かどうか、作成されたソケットがクライアントモードまたはサーバーモードでハンドシェイクを開始する必要があるかどうかが含まれます。作成された &lt;code&gt;SSLSocket&lt;/code&gt; によって継承された状態は、適切なメソッドを呼び出すことによってオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="2cf3f9b2de0e665973874c614b401e798202230b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ServerNotActiveException&lt;/code&gt; is an &lt;code&gt;Exception&lt;/code&gt; thrown during a call to &lt;code&gt;RemoteServer.getClientHost&lt;/code&gt; if the getClientHost method is called outside of servicing a remote method call.</source>
          <target state="translated">&lt;code&gt;ServerNotActiveException&lt;/code&gt; はある &lt;code&gt;Exception&lt;/code&gt; への呼び出し中にスローされ &lt;code&gt;RemoteServer.getClientHost&lt;/code&gt; getClientHostメソッドがリモートメソッド呼び出しの対応範囲の外側で呼び出された場合。</target>
        </trans-unit>
        <trans-unit id="e1fcdf582d32d6ba7bc144654b7abaa845c4d13f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;SslRMIClientSocketFactory&lt;/code&gt; instance is used by the RMI runtime in order to obtain client sockets for RMI calls via SSL.</source>
          <target state="translated">&lt;code&gt;SslRMIClientSocketFactory&lt;/code&gt; インスタンスは、SSL経由のRMI呼び出しのクライアントソケットを取得するためにRMIランタイムによって使用されています。</target>
        </trans-unit>
        <trans-unit id="c2bd11e9b48563b8653db16002d69f1cff7dbff5" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;SslRMIServerSocketFactory&lt;/code&gt; instance is used by the RMI runtime in order to obtain server sockets for RMI calls via SSL.</source>
          <target state="translated">&lt;code&gt;SslRMIServerSocketFactory&lt;/code&gt; インスタンスは、SSL経由のRMI呼び出しのサーバソケットを取得するためにRMIランタイムによって使用されています。</target>
        </trans-unit>
        <trans-unit id="c840d2ce838d86301f730e068fe5a907fa565e45" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;UndeclaredThrowableException&lt;/code&gt; instance contains the undeclared checked exception that was thrown by the invocation handler, and it can be retrieved with the &lt;code&gt;getUndeclaredThrowable()&lt;/code&gt; method. &lt;code&gt;UndeclaredThrowableException&lt;/code&gt; extends &lt;code&gt;RuntimeException&lt;/code&gt;, so it is an unchecked exception that wraps a checked exception.</source>
          <target state="translated">アン &lt;code&gt;UndeclaredThrowableException&lt;/code&gt; インスタンスは、呼び出しハンドラによってスローされた宣言されていないチェック例外が含まれており、それがで取得することができ &lt;code&gt;getUndeclaredThrowable()&lt;/code&gt; メソッド。 &lt;code&gt;UndeclaredThrowableException&lt;/code&gt; は &lt;code&gt;RuntimeException&lt;/code&gt; を拡張するため、チェックされた例外をラップするチェックされていない例外です。</target>
        </trans-unit>
        <trans-unit id="e074ab34a3ed61cb104fe9959f84de08d6f2aa83" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;UndoableEdit&lt;/code&gt; represents an edit.</source>
          <target state="translated">アン &lt;code&gt;UndoableEdit&lt;/code&gt; 編集を表します。</target>
        </trans-unit>
        <trans-unit id="580b3b14699ca88b644c037f66d61ca2854a1383" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;UndoableEdit&lt;/code&gt; represents an edit. The edit may be undone, or if already undone the edit may be redone.</source>
          <target state="translated">アン &lt;code&gt;UndoableEdit&lt;/code&gt; 編集を表します。編集を元に戻すか、すでに元に戻している場合は編集をやり直すことができます。</target>
        </trans-unit>
        <trans-unit id="c540c829e8f7f549925d2f1e2d85e313c7845bad" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;UndoableEditListener&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;UndoableEditListener&lt;/code&gt; の方法。</target>
        </trans-unit>
        <trans-unit id="d976065d2d754995c367990bc8497ffecdd5f31f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;UndoableEditListener&lt;/code&gt; method. This invokes &lt;code&gt;addEdit&lt;/code&gt; with &lt;code&gt;e.getEdit()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;UndoableEditListener&lt;/code&gt; の方法。これ &lt;code&gt;addEdit&lt;/code&gt; 、 &lt;code&gt;e.getEdit()&lt;/code&gt; を使用してaddEditが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="19e618e69a3fa425bd2dae2b881bc73dc1a88498" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;UnexpectedException&lt;/code&gt; is thrown if the client of a remote method call receives, as a result of the call, a checked exception that is not among the checked exception types declared in the &lt;code&gt;throws&lt;/code&gt; clause of the method in the remote interface.</source>
          <target state="translated">&lt;code&gt;UnexpectedException&lt;/code&gt; は、リモートメソッド呼び出しのクライアントが受信した場合、コール、で宣言されたチェック例外の種類の中ではありませんがチェック例外の結果として、スローされる &lt;code&gt;throws&lt;/code&gt; リモートインタフェースのメソッドの句を。</target>
        </trans-unit>
        <trans-unit id="116a0f478e6098579f16949ba53c3b1caab842c2" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;UnknownGroupException&lt;/code&gt; is thrown by methods of classes and interfaces in the &lt;code&gt;java.rmi.activation&lt;/code&gt; package when the &lt;code&gt;ActivationGroupID&lt;/code&gt; parameter to the method is determined to be invalid, i.e., not known by the &lt;code&gt;ActivationSystem&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;UnknownGroupException&lt;/code&gt; はでクラスおよびインタフェースのメソッドによってスローされ &lt;code&gt;java.rmi.activation&lt;/code&gt; 場合パッケージ &lt;code&gt;ActivationGroupID&lt;/code&gt; がメソッドへのパラメータが無効であると判断され、すなわち、によって知られていない &lt;code&gt;ActivationSystem&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d2f2ca0801be691c47d980d83499b91562068bba" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;UnknownGroupException&lt;/code&gt; is thrown by methods of classes and interfaces in the &lt;code&gt;java.rmi.activation&lt;/code&gt; package when the &lt;code&gt;ActivationGroupID&lt;/code&gt; parameter to the method is determined to be invalid, i.e., not known by the &lt;code&gt;ActivationSystem&lt;/code&gt;. An &lt;code&gt;UnknownGroupException&lt;/code&gt; is also thrown if the &lt;code&gt;ActivationGroupID&lt;/code&gt; in an &lt;code&gt;ActivationDesc&lt;/code&gt; refers to a group that is not registered with the &lt;code&gt;ActivationSystem&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UnknownGroupException&lt;/code&gt; はでクラスおよびインタフェースのメソッドによってスローされ &lt;code&gt;java.rmi.activation&lt;/code&gt; 場合パッケージ &lt;code&gt;ActivationGroupID&lt;/code&gt; がメソッドへのパラメータが無効であると判断され、すなわち、によって知られていない &lt;code&gt;ActivationSystem&lt;/code&gt; 。AN &lt;code&gt;UnknownGroupException&lt;/code&gt; は場合もスローさ &lt;code&gt;ActivationGroupID&lt;/code&gt; がで &lt;code&gt;ActivationDesc&lt;/code&gt; に登録されていない基を指す &lt;code&gt;ActivationSystem&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="54c9a91956cc2799839a2a2e3a03f3d18b89bff8" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;UnknownHostException&lt;/code&gt; is thrown if a &lt;code&gt;java.net.UnknownHostException&lt;/code&gt; occurs while creating a connection to the remote host for a remote method call.</source>
          <target state="translated">アン &lt;code&gt;UnknownHostException&lt;/code&gt; ががあればスローさ &lt;code&gt;java.net.UnknownHostException&lt;/code&gt; リモートメソッド呼び出しでリモートホストへの接続を作成するときに発生します。</target>
        </trans-unit>
        <trans-unit id="2c3fa84e5e51901a790995cf6e0566221440afbc" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;UnknownObjectException&lt;/code&gt; is thrown by methods of classes and interfaces in the &lt;code&gt;java.rmi.activation&lt;/code&gt; package when the &lt;code&gt;ActivationID&lt;/code&gt; parameter to the method is determined to be invalid.</source>
          <target state="translated">AN &lt;code&gt;UnknownObjectException&lt;/code&gt; はでクラスおよびインタフェースのメソッドによってスローされ &lt;code&gt;java.rmi.activation&lt;/code&gt; 際にパッケージ &lt;code&gt;ActivationID&lt;/code&gt; のメソッドへのパラメータが無効であると判断されます。</target>
        </trans-unit>
        <trans-unit id="7a24a51f14ab814653b2e45f74574d553c843f1b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;UnknownObjectException&lt;/code&gt; is thrown by methods of classes and interfaces in the &lt;code&gt;java.rmi.activation&lt;/code&gt; package when the &lt;code&gt;ActivationID&lt;/code&gt; parameter to the method is determined to be invalid. An &lt;code&gt;ActivationID&lt;/code&gt; is invalid if it is not currently known by the &lt;code&gt;ActivationSystem&lt;/code&gt;. An &lt;code&gt;ActivationID&lt;/code&gt; is obtained by the &lt;code&gt;ActivationSystem.registerObject&lt;/code&gt; method. An &lt;code&gt;ActivationID&lt;/code&gt; is also obtained during the &lt;code&gt;Activatable.register&lt;/code&gt; call.</source>
          <target state="translated">AN &lt;code&gt;UnknownObjectException&lt;/code&gt; はでクラスおよびインタフェースのメソッドによってスローされ &lt;code&gt;java.rmi.activation&lt;/code&gt; 際にパッケージ &lt;code&gt;ActivationID&lt;/code&gt; のメソッドへのパラメータが無効であると判断されます。アン &lt;code&gt;ActivationID&lt;/code&gt; は、それが現在で知られていない場合は無効である &lt;code&gt;ActivationSystem&lt;/code&gt; 。AN &lt;code&gt;ActivationID&lt;/code&gt; をすることによって得られる &lt;code&gt;ActivationSystem.registerObject&lt;/code&gt; の方法。アン &lt;code&gt;ActivationID&lt;/code&gt; はまた、中に得られる &lt;code&gt;Activatable.register&lt;/code&gt; のコール。</target>
        </trans-unit>
        <trans-unit id="d45d47fa5d80a08b9af2029f48d0cafb02261fd5" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;UnmarshalException&lt;/code&gt; can be thrown while unmarshalling the parameters or results of a remote method call if any of the following conditions occur:</source>
          <target state="translated">AN &lt;code&gt;UnmarshalException&lt;/code&gt; は、以下の条件のいずれかが発生した場合、リモート・メソッド呼び出しのパラメータまたは結果を非整列化しながら、スローすることができます。</target>
        </trans-unit>
        <trans-unit id="db010e48dc9cda801fb508907c7daa4e9b0b1578" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;UnmarshalException&lt;/code&gt; can be thrown while unmarshalling the parameters or results of a remote method call if any of the following conditions occur: if an exception occurs while unmarshalling the call header if the protocol for the return value is invalid if a &lt;code&gt;java.io.IOException&lt;/code&gt; occurs unmarshalling parameters (on the server side) or the return value (on the client side).</source>
          <target state="translated">AN &lt;code&gt;UnmarshalException&lt;/code&gt; は、以下の条件のいずれかが発生した場合、リモート・メソッド呼び出しのパラメータまたは結果を非整列化しながら、スローすることができる：呼び出しヘッダを非整列化しつつあれば、戻り値のためのプロトコルが無効な場合、例外が発生した場合 &lt;code&gt;java.io.IOException&lt;/code&gt; 発生しますマーシャリング解除パラメーター（サーバー側）または戻り値（クライアント側）。</target>
        </trans-unit>
        <trans-unit id="6404023c449522aae0f08ba59857829ecabae11d" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;UnsupportedAudioFileException&lt;/code&gt; is an exception indicating that an operation failed because a file did not contain valid data of a recognized file type and format.</source>
          <target state="translated">アン &lt;code&gt;UnsupportedAudioFileException&lt;/code&gt; は、ファイルが認識されたファイルの種類と形式の有効なデータが含まれていなかったため、操作が失敗したことを示す例外です。</target>
        </trans-unit>
        <trans-unit id="de261b02eb2a7d2e07d2d24da1230a94cbd7fb1e" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;X509Data&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;keyinfofactory#newX509Data(java.util.List)&quot;&gt;&lt;code&gt;newX509Data&lt;/code&gt;&lt;/a&gt; methods of the &lt;a href=&quot;keyinfofactory&quot;&gt;&lt;code&gt;KeyInfoFactory&lt;/code&gt;&lt;/a&gt; class and passing it a list of one or more &lt;a href=&quot;../../xmlstructure&quot;&gt;&lt;code&gt;XMLStructure&lt;/code&gt;&lt;/a&gt;s representing X.509 content; for example:</source>
          <target state="translated">AN &lt;code&gt;X509Data&lt;/code&gt; のインスタンスを呼び出すことによって作成することができる&lt;a href=&quot;keyinfofactory#newX509Data(java.util.List)&quot;&gt; &lt;code&gt;newX509Data&lt;/code&gt; の&lt;/a&gt;方法&lt;a href=&quot;keyinfofactory&quot;&gt; &lt;code&gt;KeyInfoFactory&lt;/code&gt; &lt;/a&gt;クラスを、それに一の以上のリストを渡す&lt;a href=&quot;../../xmlstructure&quot;&gt; &lt;code&gt;XMLStructure&lt;/code&gt; &lt;/a&gt; S表すX.509コンテンツを、例えば：</target>
        </trans-unit>
        <trans-unit id="cc6d41be480a2d16670e60753f79f6c5c6c448a6" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;X509IssuerSerial&lt;/code&gt; instance may be created by invoking the &lt;a href=&quot;keyinfofactory#newX509IssuerSerial(java.lang.String,java.math.BigInteger)&quot;&gt;&lt;code&gt;newX509IssuerSerial&lt;/code&gt;&lt;/a&gt; method of the &lt;a href=&quot;keyinfofactory&quot;&gt;&lt;code&gt;KeyInfoFactory&lt;/code&gt;&lt;/a&gt; class, and passing it a &lt;code&gt;String&lt;/code&gt; and &lt;code&gt;BigInteger&lt;/code&gt; representing the X.500 DN and serial number. Here is an example of creating an &lt;code&gt;X509IssuerSerial&lt;/code&gt; from the issuer DN and serial number of an existing &lt;a href=&quot;../../../../../../java.base/java/security/cert/x509certificate&quot;&gt;&lt;code&gt;X509Certificate&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">AN &lt;code&gt;X509IssuerSerial&lt;/code&gt; のインスタンスを呼び出すことによって作成することができる&lt;a href=&quot;keyinfofactory#newX509IssuerSerial(java.lang.String,java.math.BigInteger)&quot;&gt; &lt;code&gt;newX509IssuerSerial&lt;/code&gt; &lt;/a&gt;方法&lt;a href=&quot;keyinfofactory&quot;&gt; &lt;code&gt;KeyInfoFactory&lt;/code&gt; &lt;/a&gt;クラスは、それを通過する &lt;code&gt;String&lt;/code&gt; と &lt;code&gt;BigInteger&lt;/code&gt; のX.500識別名とシリアル番号を表しています。 &lt;code&gt;X509IssuerSerial&lt;/code&gt; は、発行者DNと既存の&lt;a href=&quot;../../../../../../java.base/java/security/cert/x509certificate&quot;&gt; &lt;code&gt;X509Certificate&lt;/code&gt; の&lt;/a&gt;シリアル番号からX509IssuerSerialを作成する例です。</target>
        </trans-unit>
        <trans-unit id="2accaf95ffb4d24ff837d64c7b7945cd96063e82" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;XMLSignature&lt;/code&gt; instance may be created by invoking one of the &lt;a href=&quot;xmlsignaturefactory#newXMLSignature(javax.xml.crypto.dsig.SignedInfo,javax.xml.crypto.dsig.keyinfo.KeyInfo)&quot;&gt;&lt;code&gt;newXMLSignature&lt;/code&gt;&lt;/a&gt; methods of the &lt;a href=&quot;xmlsignaturefactory&quot;&gt;&lt;code&gt;XMLSignatureFactory&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;code&gt;XMLSignature&lt;/code&gt; インスタンスのいずれ呼び出すことによって作成することができる&lt;a href=&quot;xmlsignaturefactory#newXMLSignature(javax.xml.crypto.dsig.SignedInfo,javax.xml.crypto.dsig.keyinfo.KeyInfo)&quot;&gt; &lt;code&gt;newXMLSignature&lt;/code&gt; の&lt;/a&gt;方法&lt;a href=&quot;xmlsignaturefactory&quot;&gt; &lt;code&gt;XMLSignatureFactory&lt;/code&gt; &lt;/a&gt;クラス。</target>
        </trans-unit>
        <trans-unit id="dec4a56955815c4d307014349968a6341d5d7d4c" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;XMLSignatureException&lt;/code&gt; can contain a cause: another throwable that caused this &lt;code&gt;XMLSignatureException&lt;/code&gt; to get thrown.</source>
          <target state="translated">&lt;code&gt;XMLSignatureException&lt;/code&gt; は、この原因別のスロー可能オブジェクト：原因含めることができ &lt;code&gt;XMLSignatureException&lt;/code&gt; をスローをします。</target>
        </trans-unit>
        <trans-unit id="df70cac6140d7ffeb32f8181c584409dfe7146f6" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;XPathFactory&lt;/code&gt; instance can be used to create &lt;a href=&quot;javax/xml/xpath/xpath&quot;&gt;&lt;code&gt;XPath&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">&lt;code&gt;XPathFactory&lt;/code&gt; インスタンスを作成するために使用することができる&lt;a href=&quot;javax/xml/xpath/xpath&quot;&gt; &lt;code&gt;XPath&lt;/code&gt; &lt;/a&gt;オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="9232e02efff35f2965dc5d89159624d91980bf0f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;XPathFactory&lt;/code&gt; instance can be used to create &lt;a href=&quot;xpath&quot;&gt;&lt;code&gt;XPath&lt;/code&gt;&lt;/a&gt; objects.</source>
          <target state="translated">&lt;code&gt;XPathFactory&lt;/code&gt; インスタンスを作成するために使用することができる&lt;a href=&quot;xpath&quot;&gt; &lt;code&gt;XPath&lt;/code&gt; &lt;/a&gt;オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="90c704aba670e7391d13746640fdcf13aba335e7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;XSLTTransformParameterSpec&lt;/code&gt; is instantiated with a mechanism-dependent (ex: DOM) stylesheet element. For example:</source>
          <target state="translated">AN &lt;code&gt;XSLTTransformParameterSpec&lt;/code&gt; はstylesheetエレメント：機構依存（DOM EX）でインスタンス化されます。例えば：</target>
        </trans-unit>
        <trans-unit id="9807b6a286763e8dceb9e51f7434f2b5dbefe8a7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;XmlReader&lt;/code&gt; object is registered as the XML reader for a &lt;code&gt;WebRowSet&lt;/code&gt; by being assigned to the rowset's &lt;code&gt;xmlReader&lt;/code&gt; field. When the &lt;code&gt;WebRowSet&lt;/code&gt; object's &lt;code&gt;readXml&lt;/code&gt; method is invoked, it in turn invokes its XML reader's &lt;code&gt;readXML&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;XmlReader&lt;/code&gt; オブジェクトは、のXMLリーダーとして登録されている &lt;code&gt;WebRowSet&lt;/code&gt; 行セットのに割り当てられることにより &lt;code&gt;xmlReader&lt;/code&gt; フィールド。とき &lt;code&gt;WebRowSet&lt;/code&gt; オブジェクトの &lt;code&gt;readXml&lt;/code&gt; メソッドが呼び出され、それが今度はそのXMLリーダーの呼び出し &lt;code&gt;readXML&lt;/code&gt; 方法を。</target>
        </trans-unit>
        <trans-unit id="74484601bf62ac80519aab912ab0434bb86f2f91" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; array containing information about a column of pixels.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型のピクセルの列に関する情報を含む配列。</target>
        </trans-unit>
        <trans-unit id="16e2f766d3506e510c135bd0d449b9fcb26db35c" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; array containing information about a row of pixels.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型のピクセルの行についての情報を含む配列。</target>
        </trans-unit>
        <trans-unit id="390ae6ca2cb5769a01bc5b7bd96b2378a316e1c7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; array in which elements may be updated atomically.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の要素を原子的に更新可能な配列。</target>
        </trans-unit>
        <trans-unit id="7d94ef092538bb368b58cb84a38329afd3009f7b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; array in which elements may be updated atomically. See the &lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt;&lt;code&gt;VarHandle&lt;/code&gt;&lt;/a&gt; specification for descriptions of the properties of atomic accesses.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の要素を原子的に更新可能な配列。アトミックアクセスのプロパティの説明については、&lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt; &lt;code&gt;VarHandle&lt;/code&gt; &lt;/a&gt;仕様を参照してください。</target>
        </trans-unit>
        <trans-unit id="636bcbd0bd917297b196446fb49964dcd0694f31" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; array in which elements may be updated atomically. See the &lt;a href=&quot;package-summary&quot;&gt;&lt;code&gt;java.util.concurrent.atomic&lt;/code&gt;&lt;/a&gt; package specification for description of the properties of atomic variables.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の要素を原子的に更新可能な配列。アトミック変数のプロパティの説明については、&lt;a href=&quot;package-summary&quot;&gt; &lt;code&gt;java.util.concurrent.atomic&lt;/code&gt; &lt;/a&gt;パッケージ仕様を参照してください。</target>
        </trans-unit>
        <trans-unit id="6adca71da0cea7836e3cf323585dddfe827aa0ba" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; representing a &quot;copy&quot; action.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型「コピー」アクションを表します。</target>
        </trans-unit>
        <trans-unit id="894bf255eed39bc2a2c5ee44fa1d194f5c947049" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; representing a &quot;copy&quot; or &quot;move&quot; action.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型「コピー」または「移動」アクションを表します。</target>
        </trans-unit>
        <trans-unit id="d21595724a92abe94d1b3e6060ef58094809af82" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; representing a &quot;copy&quot; transfer action.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型「コピー」の転送アクションを表します。</target>
        </trans-unit>
        <trans-unit id="84796e007098d02c4ffd8acc4e82c7b1b83acbda" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; representing a &quot;copy&quot; transfer action. This value is used when data is copied to a clipboard or copied elsewhere in a drag and drop operation.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型「コピー」の転送アクションを表します。この値は、データがクリップボードにコピーされるか、ドラッグアンドドロップ操作で他の場所にコピーされるときに使用されます。</target>
        </trans-unit>
        <trans-unit id="0bf200f6b8c3ef6b42d7a9c8aafddedf56b87af1" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; representing a &quot;link&quot; action.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型「リンク」アクションを表します。</target>
        </trans-unit>
        <trans-unit id="77d8f18fe088705d15c40d655a7edc4303b4eb7f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; representing a &quot;link&quot; action. The link verb is found in many, if not all native DnD platforms, and the actual interpretation of LINK semantics is both platform and application dependent. Broadly speaking, the semantic is &quot;do not copy, or move the operand, but create a reference to it&quot;. Defining the meaning of &quot;reference&quot; is where ambiguity is introduced. The verb is provided for completeness, but its use is not recommended for DnD operations between logically distinct applications where misinterpretation of the operations semantics could lead to confusing results for the user.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型「リンク」アクションを表します。リンク動詞は、すべてではないにしても多くのネイティブDnDプラットフォームにあり、LINKセマンティクスの実際の解釈はプラットフォームとアプリケーションの両方に依存します。大まかに言えば、セマンティクスは「オペランドをコピーまたは移動するのではなく、オペランドへの参照を作成する」です。「参照」の意味を定義することは、あいまいさが導入されるところです。動詞は完全を期すために提供されていますが、操作のセマンティクスの誤解がユーザーの混乱を招く可能性がある、論理的に異なるアプリケーション間のDnD操作には使用しないでください。</target>
        </trans-unit>
        <trans-unit id="99bc2c543c0d00a6cc69a55639bb704dbef27044" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; representing a &quot;link&quot; transfer action.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型「リンク」の転送アクションを表します。</target>
        </trans-unit>
        <trans-unit id="6b4cacf72c8462ebf35ace11a28ea67aaacda1c7" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; representing a &quot;link&quot; transfer action. This value is used to specify that data should be linked in a drag and drop operation.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型「リンク」の転送アクションを表します。この値は、ドラッグアンドドロップ操作でデータをリンクする必要があることを指定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="d500f0abab03da8c876b6a8aa5e3c5e0c6d9ccd1" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; representing a &quot;move&quot; action.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型「移動」アクションを表します。</target>
        </trans-unit>
        <trans-unit id="3936dc2075feb921ba90bf31b3c53f63f2b12c8d" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; representing a &quot;move&quot; transfer action.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型「move」の転送アクションを表します。</target>
        </trans-unit>
        <trans-unit id="c4074ce2cfdee1f2f81ee4570932035f7e3ef57a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; representing a &quot;move&quot; transfer action. This value is used when data is moved to a clipboard (i.e. a cut) or moved elsewhere in a drag and drop operation.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型「move」の転送アクションを表します。この値は、ドラッグアンドドロップ操作でデータをクリップボードに移動する（つまりカットする）か、他の場所に移動するときに使用されます。</target>
        </trans-unit>
        <trans-unit id="6aa159eebf443e490bc130a36cd4dbb610c1848a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; representing a &quot;reference&quot; action (synonym for ACTION_LINK).</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型「参照」アクション（ACTION_LINKと同義）を表します。</target>
        </trans-unit>
        <trans-unit id="f84c09d8cd20e9fa86828d2c322f4b77d12fc7ad" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; representing a source action capability of either &quot;copy&quot; or &quot;move&quot;.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型「コピー」または「move」のソースアクション機能を表します。</target>
        </trans-unit>
        <trans-unit id="5bc03b3dd571f980f03149b65ff599dd9c0380ef" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; representing no action.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 何のアクションを表すありません。</target>
        </trans-unit>
        <trans-unit id="6dd4c38e495e653134d49880f3cababf48d98415" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; representing no transfer action.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 何の転送アクションを表すありません。</target>
        </trans-unit>
        <trans-unit id="7d2464e93b57920d8573d0d5b1da7fc0b3d251d4" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; representing the three digit HTTP Status-Code.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型 3桁のHTTPステータスコードを表します。</target>
        </trans-unit>
        <trans-unit id="1746979352ac4ad56bb76302627833ad2156485a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; representing the type(s) of action(s) used in this Drag and Drop operation.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; このドラッグ＆ドロップ操作で使用されるアクション（複数可）のタイプ（複数可）を表します。</target>
        </trans-unit>
        <trans-unit id="6f5d56ac307f0e60570dac66a4675fe95b596c76" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; used by updateCurrentCursor() indicating that the &lt;code&gt;Cursor&lt;/code&gt; has entered a &lt;code&gt;DropTarget&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; ことを示す、updateCurrentCursor（で使用） &lt;code&gt;Cursor&lt;/code&gt; 入った &lt;code&gt;DropTarget&lt;/code&gt; のを。</target>
        </trans-unit>
        <trans-unit id="b180dfa43af1f37c797782e019b0fd1b7d714521" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; used by updateCurrentCursor() indicating that the &lt;code&gt;Cursor&lt;/code&gt; is over a &lt;code&gt;DropTarget&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; ことを示す、updateCurrentCursor（で使用） &lt;code&gt;Cursor&lt;/code&gt; 上にある &lt;code&gt;DropTarget&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="996d353c072c3c0162a1c6535c7bd07f0386ee48" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; used by updateCurrentCursor() indicating that the &lt;code&gt;Cursor&lt;/code&gt; should change to the default (no drop) &lt;code&gt;Cursor&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; ことを示す、updateCurrentCursor（使用） &lt;code&gt;Cursor&lt;/code&gt; デフォルト（ドロップなし）に変更する必要があります &lt;code&gt;Cursor&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8fe3ea4cb0427238304848fdf989424c952f6d02" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; used by updateCurrentCursor() indicating that the user operation has changed.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; ユーザ操作が変更されたことを示す、updateCurrentCursor（で使用されます）。</target>
        </trans-unit>
        <trans-unit id="aabdf49c04659510a730bc939a7453b5036f0534" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; value that may be updated atomically.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の原子的な更新が可能な値。</target>
        </trans-unit>
        <trans-unit id="436905f82df782d3789bb40d8565ed1d92728ee5" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; value that may be updated atomically. See the &lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt;&lt;code&gt;VarHandle&lt;/code&gt;&lt;/a&gt; specification for descriptions of the properties of atomic accesses. An &lt;code&gt;AtomicInteger&lt;/code&gt; is used in applications such as atomically incremented counters, and cannot be used as a replacement for an &lt;a href=&quot;../../../lang/integer&quot;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/a&gt;. However, this class does extend &lt;code&gt;Number&lt;/code&gt; to allow uniform access by tools and utilities that deal with numerically-based classes.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の原子的な更新が可能な値。アトミックアクセスのプロパティの説明については、&lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt; &lt;code&gt;VarHandle&lt;/code&gt; &lt;/a&gt;仕様を参照してください。 AN &lt;code&gt;AtomicInteger&lt;/code&gt; そのような原子的に増分カウンタのような用途で使用され、の代替として使用することができない&lt;a href=&quot;../../../lang/integer&quot;&gt; &lt;code&gt;Integer&lt;/code&gt; &lt;/a&gt;。ただし、このクラスは &lt;code&gt;Number&lt;/code&gt; を拡張して、数値ベースのクラスを処理するツールやユーティリティによる均一なアクセスを可能にします。</target>
        </trans-unit>
        <trans-unit id="087667c3a645e4575ee0735435442c3f21954505" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;int&lt;/code&gt; value that may be updated atomically. See the &lt;a href=&quot;package-summary&quot;&gt;&lt;code&gt;java.util.concurrent.atomic&lt;/code&gt;&lt;/a&gt; package specification for description of the properties of atomic variables. An &lt;code&gt;AtomicInteger&lt;/code&gt; is used in applications such as atomically incremented counters, and cannot be used as a replacement for an &lt;a href=&quot;../../../lang/integer&quot;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/a&gt;. However, this class does extend &lt;code&gt;Number&lt;/code&gt; to allow uniform access by tools and utilities that deal with numerically-based classes.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 型の原子的な更新が可能な値。アトミック変数のプロパティの説明については、&lt;a href=&quot;package-summary&quot;&gt; &lt;code&gt;java.util.concurrent.atomic&lt;/code&gt; &lt;/a&gt;パッケージ仕様を参照してください。 AN &lt;code&gt;AtomicInteger&lt;/code&gt; そのような原子的に増分カウンタのような用途で使用され、の代替として使用することができない&lt;a href=&quot;../../../lang/integer&quot;&gt; &lt;code&gt;Integer&lt;/code&gt; &lt;/a&gt;。ただし、このクラスは &lt;code&gt;Number&lt;/code&gt; を拡張して、数値ベースのクラスを処理するツールやユーティリティによる均一なアクセスを可能にします。</target>
        </trans-unit>
        <trans-unit id="f8e318bf5e5136bdf5ce251ab81cc2fdd83a51b0" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;invokedynamic&lt;/code&gt; instruction is linked just before its first execution. A dynamically-computed constant is resolved just before the first time it is used (by pushing it on the stack or linking it as a bootstrap method parameter). The bootstrap method call implementing the linkage occurs within a thread that is attempting a first execution or first use.</source>
          <target state="translated">&lt;code&gt;invokedynamic&lt;/code&gt; の命令は、単にその最初の実行前にリンクされています。動的に計算された定数は、最初に使用される直前に解決されます（スタックにプッシュするか、ブートストラップメソッドパラメーターとしてリンクします）。リンケージを実装するブートストラップメソッド呼び出しは、最初の実行または最初の使用を試みているスレッド内で発生します。</target>
        </trans-unit>
        <trans-unit id="8d37de712fdf106cad30e68ee187e6f114f55a7a" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;invokedynamic&lt;/code&gt; instruction is originally in an unlinked state. In this state, there is no target method for the instruction to invoke.</source>
          <target state="translated">&lt;code&gt;invokedynamic&lt;/code&gt; の命令がリンクされていない状態にもともとあります。この状態では、命令が呼び出すターゲットメソッドはありません。</target>
        </trans-unit>
        <trans-unit id="b9fd26bb801718669246b4dc6aedd1d012db6c0d" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;MXBean&lt;/em&gt; is a variant of Standard MBean where complex types are mapped to a standard set of types defined in the &lt;a href=&quot;openmbean/package-summary&quot;&gt;&lt;code&gt;javax.management.openmbean&lt;/code&gt;&lt;/a&gt; package. MXBeans are appropriate if you would otherwise need to reference application-specific classes in your MBean interface. They are described in detail in the specification for &lt;a href=&quot;mxbean&quot;&gt;&lt;code&gt;MXBean&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">AN &lt;em&gt;のMXBeanは&lt;/em&gt;複合型がで定義されたタイプの標準セットにマッピングされている標準のMBeanの変異体である&lt;a href=&quot;openmbean/package-summary&quot;&gt; &lt;code&gt;javax.management.openmbean&lt;/code&gt; &lt;/a&gt;パッケージ。 MXBeanは、MBeanインターフェースでアプリケーション固有のクラスを参照する必要がある場合に適しています。それらは&lt;a href=&quot;mxbean&quot;&gt; &lt;code&gt;MXBean&lt;/code&gt; &lt;/a&gt;の仕様で詳細に説明されています。</target>
        </trans-unit>
        <trans-unit id="17089ce6d5594e4e7f2e90276d5c9c7249c48e95" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;Open MBean&lt;/em&gt; is a kind of Dynamic MBean where the types of attributes and of operation parameters and return values are built using a small set of predefined Java classes. Open MBeans facilitate operation with remote management programs that do not necessarily have access to application-specific types, including non-Java programs. Open MBeans are defined by the package &lt;a href=&quot;openmbean/package-summary&quot;&gt;&lt;code&gt;
        javax.management.openmbean&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">アン&lt;em&gt;オープンMBeanは&lt;/em&gt;、属性の操作パラメータと戻り値の型は、事前定義のJavaクラスの小さなセットを使用して構築されているダイナミックのMBeanの一種です。オープンMBeanは、非Javaプログラムを含む、アプリケーション固有のタイプに必ずしもアクセスする必要のないリモート管理プログラムでの操作を容易にします。オープンMBeanは、パッケージ&lt;a href=&quot;openmbean/package-summary&quot;&gt; &lt;code&gt; javax.management.openmbean&lt;/code&gt; で&lt;/a&gt;定義されています。</target>
        </trans-unit>
        <trans-unit id="048ed8c4104dbbe06b2cff23468329c5ad2ceb71" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;offset&lt;/em&gt; value can be specified. When an observed value exceeds its threshold, the threshold is incremented by the offset, or by a multiple of the offset sufficient to make the threshold greater than the new observed value.</source>
          <target state="translated">&lt;em&gt;オフセット&lt;/em&gt;値を指定することができます。観測値がそのしきい値を超えると、しきい値は、オフセットによって、またはしきい値を新しい観測値より大きくするのに十分なオフセットの倍数だけ増分されます。</target>
        </trans-unit>
        <trans-unit id="7fcd831e0b42745d917f0bdce05841f7695e04d6" translate="yes" xml:space="preserve">
          <source>An &lt;em&gt;unquoted value&lt;/em&gt; is a possibly empty string of characters which may not contain any of the characters comma, equals, colon, or quote.</source>
          <target state="translated">&lt;em&gt;引用符で囲まれていない値は、&lt;/em&gt;文字のコンマ、等号、コロン、または引用符のいずれかを含めることはできません文字の可能性が空の文字列です。</target>
        </trans-unit>
        <trans-unit id="a2684422286ab1507de4a61572052b079877180b" translate="yes" xml:space="preserve">
          <source>An ACL can be thought of as a data structure with multiple ACL entries. Each ACL entry, of interface type AclEntry, contains a set of permissions associated with a particular principal. (A principal represents an entity such as an individual user or a group). Additionally, each ACL entry is specified as being either positive or negative. If positive, the permissions are to be granted to the associated principal. If negative, the permissions are to be denied.</source>
          <target state="translated">ACL は、複数の ACL エントリを持つデータ構造と考えることができます。インターフェイス・タイプが AclEntry である各 ACL エントリは、特定のプリンシパルに関連付けられた権限のセットを含んでいます(プリンシパルは、個々のユーザーやグループなどのエンティティを表します)。(プリンシパルは、個々のユーザーやグループなどのエンティティを表します)。さらに、各 ACL エントリは、正または負のいずれかであることが指定されます。正の場合、権限は関連付けられたプリンシパルに付与されます。負の場合、許可は拒否されます。</target>
        </trans-unit>
        <trans-unit id="9d21ef0f25782f994a17c48fc04b2e65cf5a7b75" translate="yes" xml:space="preserve">
          <source>An ACL can be thought of as a data structure with multiple ACL entry objects. Each ACL entry object contains a set of permissions associated with a particular principal. (A principal represents an entity such as an individual user or a group). Additionally, each ACL entry is specified as being either positive or negative. If positive, the permissions are to be granted to the associated principal. If negative, the permissions are to be denied. Each principal can have at most one positive ACL entry and one negative entry; that is, multiple positive or negative ACL entries are not allowed for any principal. Note: ACL entries are by default positive. An entry becomes a negative entry only if the &lt;a href=&quot;#setNegativePermissions()&quot;&gt;&lt;code&gt;setNegativePermissions&lt;/code&gt;&lt;/a&gt; method is called on it.</source>
          <target state="translated">ACLは、複数のACLエントリオブジェクトを持つデータ構造と考えることができます。各ACLエントリオブジェクトには、特定のプリンシパルに関連付けられた一連のアクセス許可が含まれています。 （プリンシパルは、個々のユーザーやグループなどのエンティティを表します）。さらに、各ACLエントリは、正または負のいずれかとして指定されます。正の場合、アクセス許可は関連するプリンシパルに付与されます。負の場合、権限は拒否されます。各プリンシパルは、最大で1つの正のACLエントリと1つの負のエントリを持つことができます。つまり、プリンシパルに対して複数の正または負のACLエントリを使用することはできません。注：ACLエントリはデフォルトでポジティブです。&lt;a href=&quot;#setNegativePermissions()&quot;&gt; &lt;code&gt;setNegativePermissions&lt;/code&gt; &lt;/a&gt;メソッドが呼び出された場合にのみ、エントリは負のエントリになります。</target>
        </trans-unit>
        <trans-unit id="c70bcd23d632cd866fc4b69e2bbb462334dd40db" translate="yes" xml:space="preserve">
          <source>An ACL can be thought of as a data structure with multiple ACL entry objects. Each ACL entry object contains a set of permissions associated with a particular principal. (A principal represents an entity such as an individual user or a group). Additionally, each ACL entry is specified as being either positive or negative. If positive, the permissions are to be granted to the associated principal. If negative, the permissions are to be denied. Each principal can have at most one positive ACL entry and one negative entry; that is, multiple positive or negative ACL entries are not allowed for any principal. Note: ACL entries are by default positive. An entry becomes a negative entry only if the &lt;a href=&quot;aclentry#setNegativePermissions--&quot;&gt;&lt;code&gt;setNegativePermissions&lt;/code&gt;&lt;/a&gt; method is called on it.</source>
          <target state="translated">ACLは、複数のACLエントリオブジェクトを持つデータ構造と考えることができます。各ACLエントリオブジェクトには、特定のプリンシパルに関連付けられた一連の権限が含まれています。 （プリンシパルは、個々のユーザーやグループなどのエンティティを表します）。さらに、各ACLエントリは、正または負のいずれかとして指定されます。正の場合、権限は関連するプリンシパルに付与されます。否定の場合、権限は拒否されます。各プリンシパルは、最大で1つの正のACLエントリと1つの負のエントリを持つことができます。つまり、プリンシパルに対して複数の正または負のACLエントリは許可されていません。注：ACLエントリはデフォルトで正です。エントリは、&lt;a href=&quot;aclentry#setNegativePermissions--&quot;&gt; &lt;code&gt;setNegativePermissions&lt;/code&gt; &lt;/a&gt;メソッドが呼び出された場合にのみ負のエントリになります。</target>
        </trans-unit>
        <trans-unit id="84e29a6b919f762a173b4649e9c0288050182f35" translate="yes" xml:space="preserve">
          <source>An ANSI-style &lt;code&gt;JOIN&lt;/code&gt; providing a cross product of two tables</source>
          <target state="translated">2つのテーブルの外積を提供するANSIスタイルの &lt;code&gt;JOIN&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="44b9a73540db77194022f6555c89e7d18b89240b" translate="yes" xml:space="preserve">
          <source>An ANSI-style &lt;code&gt;JOIN&lt;/code&gt; providing a full JOIN.</source>
          <target state="translated">完全な &lt;code&gt;JOIN&lt;/code&gt; を提供するANSIスタイルのJOIN。</target>
        </trans-unit>
        <trans-unit id="566d47efd4747b25ac71283c0f5aa27aff58dc5d" translate="yes" xml:space="preserve">
          <source>An ANSI-style &lt;code&gt;JOIN&lt;/code&gt; providing a full JOIN. Specifies that all rows from either table be returned regardless of matching records on the other table.</source>
          <target state="translated">完全な &lt;code&gt;JOIN&lt;/code&gt; を提供するANSIスタイルのJOIN。他のテーブルの一致するレコードに関係なく、いずれかのテーブルのすべての行が返されることを指定します。</target>
        </trans-unit>
        <trans-unit id="7d55b7cec5ce8a2585139fd0e9b79313e484e942" translate="yes" xml:space="preserve">
          <source>An ANSI-style &lt;code&gt;JOIN&lt;/code&gt; providing a inner join between two tables.</source>
          <target state="translated">2つのテーブル間の内部 &lt;code&gt;JOIN&lt;/code&gt; 提供するANSIスタイルのJOIN。</target>
        </trans-unit>
        <trans-unit id="4fa36946076bb31cc326fcb1dbb382782e1dbe84" translate="yes" xml:space="preserve">
          <source>An ANSI-style &lt;code&gt;JOIN&lt;/code&gt; providing a inner join between two tables. Any unmatched rows in either table of the join should be discarded.</source>
          <target state="translated">2つのテーブル間の内部 &lt;code&gt;JOIN&lt;/code&gt; 提供するANSIスタイルのJOIN。結合のいずれかのテーブルで一致しない行はすべて破棄する必要があります。</target>
        </trans-unit>
        <trans-unit id="cc55a1964c919ca7189795c145a81c1a128cd58d" translate="yes" xml:space="preserve">
          <source>An ANSI-style &lt;code&gt;JOIN&lt;/code&gt; providing a left outer join between two tables.</source>
          <target state="translated">2つのテーブル間の左外部 &lt;code&gt;JOIN&lt;/code&gt; 提供するANSIスタイルのJOIN。</target>
        </trans-unit>
        <trans-unit id="0bfeb63d30884eb732252a25afa9b999a18d39b5" translate="yes" xml:space="preserve">
          <source>An ANSI-style &lt;code&gt;JOIN&lt;/code&gt; providing a left outer join between two tables. In SQL, this is described where all records should be returned from the left side of the JOIN statement.</source>
          <target state="translated">2つのテーブル間の左外部 &lt;code&gt;JOIN&lt;/code&gt; 提供するANSIスタイルのJOIN。SQLでは、これは、すべてのレコードがJOINステートメントの左側から返される必要がある場所で説明されています。</target>
        </trans-unit>
        <trans-unit id="bff2fc3115155d19a0877d0f67d9a5310e8d1707" translate="yes" xml:space="preserve">
          <source>An ANSI-style &lt;code&gt;JOIN&lt;/code&gt; providing a right outer join between two tables.</source>
          <target state="translated">2つのテーブル間の &lt;code&gt;JOIN&lt;/code&gt; 提供するANSIスタイルのJOIN。</target>
        </trans-unit>
        <trans-unit id="a67a1302a29674b1e404d9b9e35ee0d622f54805" translate="yes" xml:space="preserve">
          <source>An ANSI-style &lt;code&gt;JOIN&lt;/code&gt; providing a right outer join between two tables. In SQL, this is described where all records from the table on the right side of the JOIN statement even if the table on the left has no matching record.</source>
          <target state="translated">2つのテーブル間の &lt;code&gt;JOIN&lt;/code&gt; 提供するANSIスタイルのJOIN。SQLでは、これは、左側のテーブルに一致するレコードがない場合でも、JOINステートメントの右側のテーブルのすべてのレコードが含まれる場合に記述されます。</target>
        </trans-unit>
        <trans-unit id="1a95822d61650974831881891441c64e36dabb1b" translate="yes" xml:space="preserve">
          <source>An AWT component, but nothing else is known about it.</source>
          <target state="translated">AWTコンポーネントですが、それ以外には何も知られていません。</target>
        </trans-unit>
        <trans-unit id="c2034ee9043e4468b2456b2b01be34999ea728cc" translate="yes" xml:space="preserve">
          <source>An AccessControlContext is created by calling the &lt;code&gt;AccessController.getContext&lt;/code&gt; method. The &lt;code&gt;getContext&lt;/code&gt; method takes a &quot;snapshot&quot; of the current calling context, and places it in an AccessControlContext object, which it returns. A sample call is the following:</source>
          <target state="translated">&lt;code&gt;AccessController.getContext&lt;/code&gt; メソッドを呼び出すことにより、AccessControlContextが作成されます。 &lt;code&gt;getContext&lt;/code&gt; の方法は、現在の呼び出し側コンテキストの「スナップショット」を取得し、それを返すAccessControlContextオブジェクト、中に配置します。呼び出しの例は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d0ed6e045b2bb8038ede83e1403ef7b9a77879fa" translate="yes" xml:space="preserve">
          <source>An AccessControlContext is used to make system resource access decisions based on the context it encapsulates.</source>
          <target state="translated">AccessControlContextは、カプセル化されたコンテキストに基づいてシステムリソースのアクセスを決定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="c7dbfe4ea8dad462fc9cbe80583a0eed83ef8424" translate="yes" xml:space="preserve">
          <source>An Action implementation useful for key bindings that are shared across a number of different text components.</source>
          <target state="translated">複数の異なるテキストコンポーネント間で共有されるキーバインディングに便利なActionの実装。</target>
        </trans-unit>
        <trans-unit id="b04d37494745bebb06790e1e722823730dd8c1a5" translate="yes" xml:space="preserve">
          <source>An Action implementation useful for key bindings that are shared across a number of different text components. Because the action is shared, it must have a way of getting it's target to act upon. This class provides support to try and find a text component to operate on. The preferred way of getting the component to act upon is through the ActionEvent that is received. If the Object returned by getSource can be narrowed to a text component, it will be used. If the action event is null or can't be narrowed, the last focused text component is tried. This is determined by being used in conjunction with a JTextController which arranges to share that information with a TextAction.</source>
          <target state="translated">複数の異なるテキストコンポーネント間で共有されるキーバインディングに便利なアクションの実装です。アクションは共有されているので、アクションのターゲットを取得する方法を持っていなければなりません。このクラスは、操作対象となるテキストコンポーネントを見つけるためのサポートを提供します。アクションの対象となるコンポーネントを取得する好ましい方法は、受信した ActionEvent を通して取得することです。getSourceによって返されたObjectがテキストコンポーネントに絞り込むことができれば、それが使用されます。アクションイベントがnullであるか、絞り込めない場合は、最後にフォーカスされたテキストコンポーネントが試されます。これは、その情報をTextActionと共有するようにアレンジしたJTextControllerと組み合わせて使用されることで決定されます。</target>
        </trans-unit>
        <trans-unit id="95ea4cab64e636e81805f6e15cc09616f24433e1" translate="yes" xml:space="preserve">
          <source>An Algorithm</source>
          <target state="translated">アルゴリズム</target>
        </trans-unit>
        <trans-unit id="3e0d7dcf02ff5c3599b845d4f36804d0afc95643" translate="yes" xml:space="preserve">
          <source>An Annotation object is used as a wrapper for a text attribute value if the attribute has annotation characteristics.</source>
          <target state="translated">アノテーションオブジェクトは、属性がアノテーション特性を持つ場合、テキスト属性値のラッパーとして使用されます。</target>
        </trans-unit>
        <trans-unit id="8855173cc3a9b8d3578e593ef7aaec03c1b426ce" translate="yes" xml:space="preserve">
          <source>An Annotation object is used as a wrapper for a text attribute value if the attribute has annotation characteristics. These characteristics are:</source>
          <target state="translated">アノテーションオブジェクトは、属性がアノテーション特性を持っている場合、テキスト属性値のラッパーとして使用されます。これらの特性は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="38349826443eb5f8b0f145776d6f978e86cac2a5" translate="yes" xml:space="preserve">
          <source>An AttributeModificationException instance is not synchronized against concurrent multithreaded access. Multiple threads trying to access and modify a single AttributeModification instance should lock the object.</source>
          <target state="translated">AttributeModificationException インスタンスがマルチスレッドの同時アクセスに対して同期化されていません。1 つの AttributeModification インスタンスにアクセスして変更しようとする複数のスレッドは、オブジェクトをロックしなければなりません。</target>
        </trans-unit>
        <trans-unit id="b893c9940906556691c2bd941e04be07a66daa05" translate="yes" xml:space="preserve">
          <source>An AttributedString holds text and related attribute information.</source>
          <target state="translated">AttributedString は、テキストと関連する属性情報を保持します。</target>
        </trans-unit>
        <trans-unit id="bd982501c3c8980f823cdb2bbda7d1230a226b5c" translate="yes" xml:space="preserve">
          <source>An AttributedString holds text and related attribute information. It may be used as the actual data storage in some cases where a text reader wants to access attributed text through the AttributedCharacterIterator interface.</source>
          <target state="translated">AttributedString は、テキストと関連する属性情報を保持します。これは、テキストリーダが AttributedCharacterIterator インターフェイスを使用して属性付きテキストにアクセスしたい場合などに、 実際のデータストレージとして使用されることがあります。</target>
        </trans-unit>
        <trans-unit id="5769984c78796861939f9d23ad21c901e416beb6" translate="yes" xml:space="preserve">
          <source>An EditorKit has the ability to be read and save documents. It is generally the most pleasing to users if there is no loss of data between the two operation. The policy of the HTMLEditorKit will be to store things not recognized or not necessarily visible so they can be subsequently written out. The model of the HTML document should therefore contain all information discovered while reading the document. This is constrained in some ways by the need to support editing (i.e. incorrect documents sometimes must be normalized). The guiding principle is that information shouldn't be lost, but some might be synthesized to produce a more correct model or it might be rearranged.</source>
          <target state="translated">EditorKitには、文書の読み込みと保存の機能があります。一般的には、2つの操作の間にデータの損失がない方がユーザーには喜ばれます。HTMLEditorKitのポリシーは、認識されないものや、必ずしも目に見えるものではないものは、後から書き出せるように保存しておくことになる。したがって、HTML 文書のモデルは、文書を読んでいる間に発見されたすべての情報を含むべきです。これは、編集をサポートする必要があるため、いくつかの点で制約があります(つまり、間違った文書は正規化されなければならないことがあります)。指針となる原則は、情報が失われてはならないということですが、より正しいモデルを生成するためにいくつかの情報が合成されたり、再配置されたりするかもしれません。</target>
        </trans-unit>
        <trans-unit id="75aa6cb85fd1dfb867d563d4ef0e8288a7199311" translate="yes" xml:space="preserve">
          <source>An Encoded Form</source>
          <target state="translated">エンコードされた形式</target>
        </trans-unit>
        <trans-unit id="7353d3a9eebd0b0234da36a7665b8b94ec1eac3b" translate="yes" xml:space="preserve">
          <source>An EncryptionKey is defined in Section 4.2.9 of the Kerberos Protocol Specification (&lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;RFC 4120&lt;/a&gt;) as:</source>
          <target state="translated">EncryptionKeyは、Kerberosプロトコル仕様（&lt;a href=&quot;http://www.ietf.org/rfc/rfc4120.txt&quot;&gt;RFC 4120&lt;/a&gt;）のセクション4.2.9で次のように定義されています。</target>
        </trans-unit>
        <trans-unit id="3bd1b3dcfb3ea555af204a39d90125f75979b9ce" translate="yes" xml:space="preserve">
          <source>An Entry maintaining a key and a value.</source>
          <target state="translated">キーと値を保持するエントリ。</target>
        </trans-unit>
        <trans-unit id="da0746701e8e7695e38c701dca1f984542e011fe" translate="yes" xml:space="preserve">
          <source>An Entry maintaining a key and a value. The value may be changed using the &lt;code&gt;setValue&lt;/code&gt; method. This class facilitates the process of building custom map implementations. For example, it may be convenient to return arrays of &lt;code&gt;SimpleEntry&lt;/code&gt; instances in method &lt;code&gt;Map.entrySet().toArray&lt;/code&gt;.</source>
          <target state="translated">キーと値を保持するエントリ。値は、 &lt;code&gt;setValue&lt;/code&gt; メソッドを使用して変更できます。このクラスは、カスタムマップ実装を構築するプロセスを容易にします。たとえば、メソッド &lt;code&gt;Map.entrySet().toArray&lt;/code&gt; で &lt;code&gt;SimpleEntry&lt;/code&gt; インスタンスの配列を返すと便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="cacdd53a5669de32a448c704a7d46a63b3a404a9" translate="yes" xml:space="preserve">
          <source>An Entry maintaining an immutable key and value.</source>
          <target state="translated">不変のキーと値を保持するエントリ。</target>
        </trans-unit>
        <trans-unit id="b46e141a48aa50e234a4e444b9b9b2d5f4ee7a2b" translate="yes" xml:space="preserve">
          <source>An Entry maintaining an immutable key and value. This class does not support method &lt;code&gt;setValue&lt;/code&gt;. This class may be convenient in methods that return thread-safe snapshots of key-value mappings.</source>
          <target state="translated">不変のキーと値を保持するエントリ。このクラスはメソッド &lt;code&gt;setValue&lt;/code&gt; をサポートしていません。このクラスは、キーと値のマッピングのスレッドセーフなスナップショットを返すメソッドで便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="b2b27a7be77a8eef346badd76c7e236adbb1f25e" translate="yes" xml:space="preserve">
          <source>An EventSetDescriptor describes a group of events that a given Java bean fires.</source>
          <target state="translated">EventSetDescriptorは、与えられたJavaビーンが発生するイベントのグループを記述します。</target>
        </trans-unit>
        <trans-unit id="50fd111412d51c66c26ec4a0d0302236610f9a26" translate="yes" xml:space="preserve">
          <source>An Exception thrown by the managed object's getter.</source>
          <target state="translated">管理されているオブジェクトのゲッターによってスローされる例外。</target>
        </trans-unit>
        <trans-unit id="be7265a58cd913772cac4b10648d630189d7eaf4" translate="yes" xml:space="preserve">
          <source>An Exception thrown by the managed object's invoked method.</source>
          <target state="translated">管理されているオブジェクトの呼び出されたメソッドによってスローされる例外。</target>
        </trans-unit>
        <trans-unit id="c06f5736113d71e86a9d07725f11650d914367b3" translate="yes" xml:space="preserve">
          <source>An Exception thrown by the managed object's setter.</source>
          <target state="translated">管理されているオブジェクトのセッターによってスローされる例外。</target>
        </trans-unit>
        <trans-unit id="ef31b04ee6f5f3ee3b1f97fa7b222fc1b3f61e4c" translate="yes" xml:space="preserve">
          <source>An ExceptionListener is notified of internal exceptions.</source>
          <target state="translated">ExceptionListenerは内部の例外を通知します。</target>
        </trans-unit>
        <trans-unit id="9e34e0a0992ba82837e6b5076d6ac0f44ba2c3a6" translate="yes" xml:space="preserve">
          <source>An Externalizable instance can designate a substitution object via the writeReplace and readResolve methods documented in the Serializable interface.</source>
          <target state="translated">Externalizable インスタンスは、Serializable インターフェースで文書化されている writeReplace メソッドと readResolve メソッドを介して置換オブジェクトを指定することができます。</target>
        </trans-unit>
        <trans-unit id="c49320ccfc23113894557342521d3e38dcdf010b" translate="yes" xml:space="preserve">
          <source>An HTML link.</source>
          <target state="translated">HTMLリンクです。</target>
        </trans-unit>
        <trans-unit id="ebba042aa5a7f6213c44f45d281c550563bf22db" translate="yes" xml:space="preserve">
          <source>An HTML reader to load an HTML document with an HTML element structure.</source>
          <target state="translated">HTML要素構造を持つHTML文書を読み込むためのHTMLリーダー。</target>
        </trans-unit>
        <trans-unit id="13a28add4e7c62ca3333c659cb9b3e9afce1c2df" translate="yes" xml:space="preserve">
          <source>An HTML reader to load an HTML document with an HTML element structure. This is a set of callbacks from the parser, implemented to create a set of elements tagged with attributes. The parse builds up tokens (ElementSpec) that describe the element subtree desired, and burst it into the document under the protection of a write lock using the insert method on the document outer class.</source>
          <target state="translated">HTML要素構造を持つHTML文書を読み込むためのHTMLリーダー。これは、属性でタグ付けされた要素のセットを作成するために実装された、パーサからのコールバックのセットです。パースは、希望する要素サブツリーを記述するトークン (ElementSpec)を構築し、ドキュメント外部クラスの insert メソッドを使用して書き込みロックで保護された状態でドキュメントにバーストします。</target>
        </trans-unit>
        <trans-unit id="50a661b076108661cc84572bc1cbd39786d3698b" translate="yes" xml:space="preserve">
          <source>An HTTP Client.</source>
          <target state="translated">HTTPクライアント。</target>
        </trans-unit>
        <trans-unit id="658ef89c11c4f03753ec933e19514b9e51f1d1ed" translate="yes" xml:space="preserve">
          <source>An HTTP header name may appear more than once in the HTTP protocol. As such, headers are represented as a name and a list of values. Each occurrence of a header value is added verbatim, to the appropriate header name list, without interpreting its value. In particular, &lt;code&gt;HttpHeaders&lt;/code&gt; does not perform any splitting or joining of comma separated header value strings. The order of elements in a header value list is preserved when &lt;a href=&quot;httprequest.builder#header(java.lang.String,java.lang.String)&quot;&gt;&lt;code&gt;building&lt;/code&gt;&lt;/a&gt; a request. For responses, the order of elements in a header value list is the order in which they were received. The &lt;code&gt;Map&lt;/code&gt; returned by the &lt;code&gt;map&lt;/code&gt; method, however, does not provide any guarantee with regard to the ordering of its entries.</source>
          <target state="translated">HTTPヘッダー名は、HTTPプロトコルに複数回表示される場合があります。そのため、ヘッダーは名前と値のリストとして表されます。ヘッダー値が出現するたびに、その値を解釈することなく、適切なヘッダー名リストに逐語的に追加されます。特に、 &lt;code&gt;HttpHeaders&lt;/code&gt; は、コンマで区切られたヘッダー値文字列の分割または結合を実行しません。ヘッダー値リスト内の要素の順序は、リクエストを&lt;a href=&quot;httprequest.builder#header(java.lang.String,java.lang.String)&quot;&gt; &lt;code&gt;building&lt;/code&gt; &lt;/a&gt;するときに保持されます。応答の場合、ヘッダー値リスト内の要素の順序は、それらが受信された順序です。 &lt;code&gt;Map&lt;/code&gt; によって返された &lt;code&gt;map&lt;/code&gt; が、そのエントリの順序についても一切の保証を提供していない、方法。</target>
        </trans-unit>
        <trans-unit id="96421a44221c6788e75627331a7353bf773dc3fd" translate="yes" xml:space="preserve">
          <source>An HTTP header name may appear more than once in the HTTP protocol. Such,</source>
          <target state="translated">HTTPヘッダ名は、HTTPプロトコルの中で複数回出現する可能性があります。そのような</target>
        </trans-unit>
        <trans-unit id="46c2f239a5fafa75ffb1b504a9266ac49d11315c" translate="yes" xml:space="preserve">
          <source>An HTTP request.</source>
          <target state="translated">HTTPリクエスト。</target>
        </trans-unit>
        <trans-unit id="0424ee10d867ce5bd6c8533576d303d063de5414" translate="yes" xml:space="preserve">
          <source>An HTTP response.</source>
          <target state="translated">HTTPレスポンスです。</target>
        </trans-unit>
        <trans-unit id="cdc99a7418140f7781457ca1e35c0aacf327c98c" translate="yes" xml:space="preserve">
          <source>An HttpCookie object represents an HTTP cookie, which carries state information between server and user agent.</source>
          <target state="translated">HttpCookie オブジェクトは、サーバとユーザ・エージェントの間で状態情報を伝達する HTTP Cookie を表します。</target>
        </trans-unit>
        <trans-unit id="8b91adcfa4da1bf69d335cb8f7dcb94f924bead5" translate="yes" xml:space="preserve">
          <source>An HttpCookie object represents an HTTP cookie, which carries state information between server and user agent. Cookie is widely adopted to create stateful sessions.</source>
          <target state="translated">HttpCookie オブジェクトは、サーバとユーザエージェントの間で状態情報を伝達する HTTP Cookie を表します。クッキーは、ステートフルなセッションを作成するために広く採用されています。</target>
        </trans-unit>
        <trans-unit id="57df2712baa86b0ab625ab0d92b75f132380f39f" translate="yes" xml:space="preserve">
          <source>An I/O error occurs, in which case an &lt;code&gt;IOException&lt;/code&gt; other than &lt;code&gt;EOFException&lt;/code&gt; is thrown.</source>
          <target state="translated">I / Oエラーが発生した場合、 &lt;code&gt;EOFException&lt;/code&gt; 以外の &lt;code&gt;IOException&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="a082821140e659c59c6e6b42353bbea842c5ebe7" translate="yes" xml:space="preserve">
          <source>An ICC_ColorSpace object can be constructed from an appropriate ICC_Profile. Typically, an ICC_ColorSpace would be associated with an ICC Profile which is either an input, display, or output profile (see the ICC specification). There are also device link, abstract, color space conversion, and named color profiles. These are less useful for tagging a color or image, but are useful for other purposes (in particular device link profiles can provide improved performance for converting from one device's color space to another's).</source>
          <target state="translated">ICC_ColorSpace オブジェクトは、適切な ICC_Profile から構築することができます。通常、ICC_ColorSpaceは、入力、表示、出力のいずれかのプロファイルであるICCプロファイルに関連付けられます(ICC仕様を参照してください)。また、デバイスリンク、アブストラクト、色空間変換、名前付きカラープロファイルもあります。これらは色や画像にタグを付けるためにはあまり有用ではありませんが、他の目的には有用です(特にデバイスリンクプロファイルは、あるデバイスの色空間から別のデバイスの色空間への変換のために性能を向上させることができます)。</target>
        </trans-unit>
        <trans-unit id="aa105b5669c20a7b719a79ac399c1fa631849b9f" translate="yes" xml:space="preserve">
          <source>An IP address is either a 32-bit or 128-bit unsigned number used by IP, a lower-level protocol on which protocols like UDP and TCP are built. The IP address architecture is defined by &lt;a href=&quot;http://www.ietf.org/rfc/rfc790.txt&quot;&gt;&lt;i&gt;RFC 790: Assigned Numbers&lt;/i&gt;&lt;/a&gt;, &lt;a href=&quot;http://www.ietf.org/rfc/rfc1918.txt&quot;&gt; &lt;i&gt;RFC 1918: Address Allocation for Private Internets&lt;/i&gt;&lt;/a&gt;, &lt;a href=&quot;http://www.ietf.org/rfc/rfc2365.txt&quot;&gt;&lt;i&gt;RFC 2365: Administratively Scoped IP Multicast&lt;/i&gt;&lt;/a&gt;, and &lt;a href=&quot;http://www.ietf.org/rfc/rfc2373.txt&quot;&gt;&lt;i&gt;RFC 2373: IP Version 6 Addressing Architecture&lt;/i&gt;&lt;/a&gt;. An instance of an InetAddress consists of an IP address and possibly its corresponding host name (depending on whether it is constructed with a host name or whether it has already done reverse host name resolution).</source>
          <target state="translated">IPアドレスは、IPが使用する32ビットまたは128ビットの符号なし数値であり、UDPやTCPなどのプロトコルが構築される下位レベルのプロトコルです。 IPアドレスアーキテクチャは、&lt;a href=&quot;http://www.ietf.org/rfc/rfc790.txt&quot;&gt;&lt;i&gt;RFC 790：Assigned Numbers&lt;/i&gt;&lt;/a&gt;、&lt;a href=&quot;http://www.ietf.org/rfc/rfc1918.txt&quot;&gt;&lt;i&gt;RFC 1918：Private Internetsのアドレス割り当て&lt;/i&gt;&lt;/a&gt;、&lt;a href=&quot;http://www.ietf.org/rfc/rfc2365.txt&quot;&gt;&lt;i&gt;RFC 2365：Administratively Scoped IP Multicast&lt;/i&gt;&lt;/a&gt;、および&lt;a href=&quot;http://www.ietf.org/rfc/rfc2373.txt&quot;&gt;&lt;i&gt;RFC 2373：IP Version 6 Addressing Architecture&lt;/i&gt;&lt;/a&gt;によって定義されてい&lt;i&gt;ます&lt;/i&gt;。 InetAddressのインスタンスは、IPアドレスとそれに対応するホスト名で構成されます（ホスト名で構成されているか、ホスト名の逆解決がすでに行われているかによって異なります）。 &lt;i&gt;&lt;/i&gt;&lt;i&gt;&lt;/i&gt;&lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="bcc7a50164ddb8884b98546a09bcb306082cb3fd" translate="yes" xml:space="preserve">
          <source>An IPv6 address enclosed in square brackets (&lt;code&gt;'['&lt;/code&gt; and &lt;code&gt;']'&lt;/code&gt;) and consisting of hexadecimal digits, colon characters (&lt;code&gt;':'&lt;/code&gt;), and possibly an embedded IPv4 address. The full syntax of IPv6 addresses is specified in &lt;a href=&quot;http://www.ietf.org/rfc/rfc2373.txt&quot;&gt;&lt;i&gt;RFC 2373: IPv6 Addressing Architecture&lt;/i&gt;&lt;/a&gt;.</source>
          <target state="translated">大括弧（ &lt;code&gt;'['&lt;/code&gt; および &lt;code&gt;']'&lt;/code&gt; ）で囲まれ、16進数、コロン文字（ &lt;code&gt;':'&lt;/code&gt; ）、および場合によっては埋め込まれたIPv4アドレスで構成されるIPv6アドレス。IPv6アドレスの完全な構文は、&lt;a href=&quot;http://www.ietf.org/rfc/rfc2373.txt&quot;&gt;&lt;i&gt;RFC 2373：IPv6 Addressing Architectureで&lt;/i&gt;&lt;/a&gt;指定されてい&lt;i&gt;ます&lt;/i&gt;。</target>
        </trans-unit>
        <trans-unit id="dd97f3a670d8d123521bffa2031acd99ead2bfd8" translate="yes" xml:space="preserve">
          <source>An Icon wrapper class which implements UIResource.</source>
          <target state="translated">UIResourceを実装したアイコンラッパークラス。</target>
        </trans-unit>
        <trans-unit id="c0f4954ec47afb53f1a935adf12bbff2f384bfae" translate="yes" xml:space="preserve">
          <source>An Icon wrapper class which implements UIResource. UI classes which set icon properties should use this class to wrap any icons specified as defaults. This class delegates all method invocations to the Icon &quot;delegate&quot; object specified at construction.</source>
          <target state="translated">UIResource を実装したアイコンラッパークラス。アイコンのプロパティを設定するUIクラスは、デフォルトで指定されたアイコンをラップするためにこのクラスを使用しなければなりません。このクラスは、すべてのメソッド呼び出しを、作成時に指定された Icon &quot;delegate&quot; オブジェクトに委譲します。</target>
        </trans-unit>
        <trans-unit id="55b6ba7e753778b09202deb8cb3a76118d505043" translate="yes" xml:space="preserve">
          <source>An Identity also has a set of certificates (all certifying its own public key). The Principal names specified in these certificates need not be the same, only the key.</source>
          <target state="translated">アイデンティティには、一連の証明書もある(すべてが独自の公開鍵を証明する)。これらの証明書に指定されたプリンシパル名は、同じである必要はない。</target>
        </trans-unit>
        <trans-unit id="08138760222bab8a65c785edb15ef4a27c00cb10" translate="yes" xml:space="preserve">
          <source>An Identity can be subclassed, to include postal and email addresses, telephone numbers, images of faces and logos, and so on.</source>
          <target state="translated">アイデンティティは、郵便番号や電子メールアドレス、電話番号、顔やロゴの画像などを含めて、サブクラス化することができる。</target>
        </trans-unit>
        <trans-unit id="cc0e5eeb9681d299c2d79d8577fe365b2ad2c529" translate="yes" xml:space="preserve">
          <source>An IdentityScope can contain Identity objects of all kinds, including Signers. All types of Identity objects can be retrieved, added, and removed using the same methods. Note that it is possible, and in fact expected, that different types of identity scopes will apply different policies for their various operations on the various types of Identities.</source>
          <target state="translated">IdentityScope には、署名者など、あらゆる種類の Identity オブジェクトを含めることができる。すべてのタイプの Identity オブジェクトは、同じメソッドを使用して取得、追加、削除することができる。さまざまなタイプの ID スコープでは、さまざまなタイプの ID に対するさまざまな操作に異なるポリシーが適用される可能性があり、実際にはそうなることが予想されます。</target>
        </trans-unit>
        <trans-unit id="da188ebd0e395b9cc3eb14df8852e78d9a226473" translate="yes" xml:space="preserve">
          <source>An IllegalAccessException is thrown when an application tries to reflectively create an instance (other than an array), set or get a field, or invoke a method, but the currently executing method does not have access to the definition of the specified class, field, method or constructor.</source>
          <target state="translated">IllegalAccessException は、アプリケーションが(配列以外の)インスタンスを反射的に作成したり、フィールドを設定したり取得したり、メソッドを呼び出したりしようとした場合にスローされますが、現在実行中のメソッドが指定されたクラス、フィールド、メソッド、またはコンストラクタの定義にアクセスできない場合にスローされます。</target>
        </trans-unit>
        <trans-unit id="a3aef77fa6e17a70bda29104489070e5139d1e42" translate="yes" xml:space="preserve">
          <source>An ImageFilter class for cropping images.</source>
          <target state="translated">画像をトリミングするための ImageFilter クラスです。</target>
        </trans-unit>
        <trans-unit id="4e691d84d718802787f63a476b8c9c92e724f2b1" translate="yes" xml:space="preserve">
          <source>An ImageFilter class for cropping images. This class extends the basic ImageFilter Class to extract a given rectangular region of an existing Image and provide a source for a new image containing just the extracted region. It is meant to be used in conjunction with a FilteredImageSource object to produce cropped versions of existing images.</source>
          <target state="translated">画像を切り抜くための ImageFilter クラス。このクラスは、基本的な ImageFilter クラスを拡張したもので、既存の画像の矩形領域を抽出し、抽出した領域だけを含む新しい画像のソースを提供します。FilteredImageSource オブジェクトと組み合わせて使用することで、既存の画像の切り抜き版を作成することができます。</target>
        </trans-unit>
        <trans-unit id="a58276d890980476a29a485304b858d1a160ae2f" translate="yes" xml:space="preserve">
          <source>An ImageFilter class for scaling images using a simple area averaging algorithm that produces smoother results than the nearest neighbor algorithm.</source>
          <target state="translated">単純な面積平均化アルゴリズムを用いて画像をスケーリングするための ImageFilter クラス.</target>
        </trans-unit>
        <trans-unit id="de317e1b11599b1e0fc6d8e7b4c5176037b68ef4" translate="yes" xml:space="preserve">
          <source>An ImageFilter class for scaling images using the simplest algorithm.</source>
          <target state="translated">最も単純なアルゴリズムを用いて画像をスケーリングする ImageFilter クラス。</target>
        </trans-unit>
        <trans-unit id="8915cb730aad203f242dc412b797792550aa7071" translate="yes" xml:space="preserve">
          <source>An ImageFilter class for scaling images using the simplest algorithm. This class extends the basic ImageFilter Class to scale an existing image and provide a source for a new image containing the resampled image. The pixels in the source image are sampled to produce pixels for an image of the specified size by replicating rows and columns of pixels to scale up or omitting rows and columns of pixels to scale down.</source>
          <target state="translated">最も単純なアルゴリズムを使って画像をスケーリングするための ImageFilter クラスです。このクラスは、既存の画像を拡大縮小し、再サンプリングした画像を含む新しい画像のソースを提供するために、基本的な ImageFilter クラスを拡張しています。元画像のピクセルは、ピクセルの行と列を複製してスケールアップしたり、ピクセルの行と列を省略してスケールダウンしたりして、指定されたサイズの画像用のピクセルを生成するためにサンプリングされます。</target>
        </trans-unit>
        <trans-unit id="970e227ba2f568e1aa11350a1043420cee0a541d" translate="yes" xml:space="preserve">
          <source>An IndexedPropertyDescriptor describes a property that acts like an array and has an indexed read and/or indexed write method to access specific elements of the array.</source>
          <target state="translated">IndexedPropertyDescriptorは、配列のように動作し、配列の特定の要素にアクセスするためのインデックス付き読み込みおよび/またはインデックス付き書き込みメソッドを持つプロパティを記述します。</target>
        </trans-unit>
        <trans-unit id="b175f82551ee9920e38dde5cadd2fbee393dc94a" translate="yes" xml:space="preserve">
          <source>An InitialContext instance is not synchronized against concurrent access by multiple threads. Multiple threads each manipulating a different InitialContext instance need not synchronize. Threads that need to access a single InitialContext instance concurrently should synchronize amongst themselves and provide the necessary locking.</source>
          <target state="translated">InitialContext インスタンスは、複数のスレッドによる同時アクセスに対しては同期されない。複数のスレッドがそれぞれ異なる InitialContext インスタンスを操作していても同期する必要はない。1 つの InitialContext インスタンスに同時にアクセスする必要があるスレッドは、スレッド間で同期をとり、必要なロックをかけなければならない。</target>
        </trans-unit>
        <trans-unit id="062eb8a9826b6596b750d38bfa86f793f0d1ad24" translate="yes" xml:space="preserve">
          <source>An InputMethodHighlight is used to describe the highlight attributes of text being composed.</source>
          <target state="translated">InputMethodHighlightは、構成されるテキストのハイライト属性を記述するために使用される。</target>
        </trans-unit>
        <trans-unit id="d6af187949a5a372eb53d647c2a99b68009d49d5" translate="yes" xml:space="preserve">
          <source>An InputMethodHighlight is used to describe the highlight attributes of text being composed. The description can be at two levels: at the abstract level it specifies the conversion state and whether the text is selected; at the concrete level it specifies style attributes used to render the highlight. An InputMethodHighlight must provide the description at the abstract level; it may or may not provide the description at the concrete level. If no concrete style is provided, a renderer should use &lt;a href=&quot;../toolkit#mapInputMethodHighlight(java.awt.im.InputMethodHighlight)&quot;&gt;&lt;code&gt;Toolkit.mapInputMethodHighlight(java.awt.im.InputMethodHighlight)&lt;/code&gt;&lt;/a&gt; to map to a concrete style.</source>
          <target state="translated">InputMethodHighlightは、作成中のテキストのハイライト属性を記述するために使用されます。説明には2つのレベルがあります。抽象レベルでは、変換状態とテキストが選択されているかどうかを指定します。具体的なレベルでは、ハイライトのレンダリングに使用されるスタイル属性を指定します。InputMethodHighlightは、抽象レベルで説明を提供する必要があります。具体的なレベルでの説明を提供する場合と提供しない場合があります。具体的なスタイルが提供されていない場合、レンダラーは&lt;a href=&quot;../toolkit#mapInputMethodHighlight(java.awt.im.InputMethodHighlight)&quot;&gt; &lt;code&gt;Toolkit.mapInputMethodHighlight(java.awt.im.InputMethodHighlight)&lt;/code&gt; &lt;/a&gt;を使用して具体的なスタイルにマップする必要があります。</target>
        </trans-unit>
        <trans-unit id="db071701ada68a4540ff53c966e7be02d8daf402" translate="yes" xml:space="preserve">
          <source>An InputSource object belongs to the application: the SAX parser shall never modify it in any way (it may modify a copy if necessary). However, standard processing of both byte and character streams is to close them on as part of end-of-parse cleanup, so applications should not attempt to re-use such streams after they have been handed to a parser.</source>
          <target state="translated">InputSourceオブジェクトはアプリケーションに属する。SAXパーサはそれをいかなる方法でも修正してはならない(必要に応じてコピーを修正することがある)。しかし、バイトストリームと文字ストリームの標準的な処理は、解析終了時のクリーンアップの一部としてそれらをクローズすることであるので、アプリケーションは、パーサに渡された後にそのようなストリームを再利用しようとしてはならない。</target>
        </trans-unit>
        <trans-unit id="3ba1bea1ccdbd14c5b86dc78157111d9f38bac03" translate="yes" xml:space="preserve">
          <source>An InputSource object describing the new external subset to be used by the parser, or null to indicate that no external subset is provided.</source>
          <target state="translated">パーサが使用する新しい外部サブセットを記述するInputSourceオブジェクト、または外部サブセットが提供されていないことを示すNULL。</target>
        </trans-unit>
        <trans-unit id="0b24e1b20a78620afd71ea4094ffda97b4450a15" translate="yes" xml:space="preserve">
          <source>An InputSource object describing the new input source to be used by the parser. Returning null directs the parser to resolve the system ID against the base URI and open a connection to resulting URI.</source>
          <target state="translated">パーサが使用する新しい入力ソースを記述したInputSourceオブジェクト。nullを返すと、パーサはベースURIに対してシステムIDを解決し、結果として得られるURIへの接続を開きます。</target>
        </trans-unit>
        <trans-unit id="229e2f78eefaeeeebc8da6c3a3131c30639afffc" translate="yes" xml:space="preserve">
          <source>An InputSource object describing the new input source, or null to request that the parser open a regular URI connection to the system identifier.</source>
          <target state="translated">新しい入力ソースを記述するInputSourceオブジェクト、またはパーサがシステム識別子への通常のURI接続を開くように要求するためのNULL。</target>
        </trans-unit>
        <trans-unit id="8247e8ae0f6557d3464f8b4d4d4b07f9369d8970" translate="yes" xml:space="preserve">
          <source>An InputSource, or null if Source can not be converted.</source>
          <target state="translated">入力ソース、またはソースが変換できない場合はnull。</target>
        </trans-unit>
        <trans-unit id="aba9d7808ff6c87be02cfaaa0fe0a751d60ec901" translate="yes" xml:space="preserve">
          <source>An InputStreamReader is a bridge from byte streams to character streams: It reads bytes and decodes them into characters using a specified &lt;a href=&quot;../nio/charset/charset&quot;&gt;&lt;code&gt;charset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">InputStreamReaderは、バイトストリームから文字ストリームへのブリッジです。バイトを読み取り、指定された&lt;a href=&quot;../nio/charset/charset&quot;&gt; &lt;code&gt;charset&lt;/code&gt; &lt;/a&gt;を使用してそれらを文字にデコードします。</target>
        </trans-unit>
        <trans-unit id="b25c4c44637dd88f8ef581bd6ecb3f8880d4c2b5" translate="yes" xml:space="preserve">
          <source>An InputStreamReader is a bridge from byte streams to character streams: It reads bytes and decodes them into characters using a specified &lt;a href=&quot;../nio/charset/charset&quot;&gt;&lt;code&gt;charset&lt;/code&gt;&lt;/a&gt;. The charset that it uses may be specified by name or may be given explicitly, or the platform's default charset may be accepted.</source>
          <target state="translated">InputStreamReaderは、バイトストリームから文字ストリームへのブリッジです。バイトを読み取り、指定された&lt;a href=&quot;../nio/charset/charset&quot;&gt; &lt;code&gt;charset&lt;/code&gt; &lt;/a&gt;を使用してそれらを文字にデコードします。使用する文字セットは、名前で指定するか、明示的に指定するか、プラットフォームのデフォルトの文字セットを受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="1615ac13472d339c0a7fff811d2624f3f2d6a386" translate="yes" xml:space="preserve">
          <source>An Integer of 0 if this isn't selected or an Integer of 1 if this is selected.</source>
          <target state="translated">選択されていない場合は0の整数、選択されている場合は1の整数。</target>
        </trans-unit>
        <trans-unit id="4e282106af74d7bbea8d45ea2bea92b03d0cc9ca" translate="yes" xml:space="preserve">
          <source>An Integer of 0.</source>
          <target state="translated">0の整数。</target>
        </trans-unit>
        <trans-unit id="e25f8778a7acb57ecbc8f76157f2e7d777272a00" translate="yes" xml:space="preserve">
          <source>An Integer of 1.</source>
          <target state="translated">1の整数。</target>
        </trans-unit>
        <trans-unit id="8248bc94ac59984d564244ebfaa48c982dcfd893" translate="yes" xml:space="preserve">
          <source>An Integer representing the data type. For &lt;code&gt;JDBCType&lt;/code&gt;, the value will be the same value as in &lt;code&gt;Types&lt;/code&gt; for the data type.</source>
          <target state="translated">データ型を表す整数。 &lt;code&gt;JDBCType&lt;/code&gt; 、値はと同じ値になります &lt;code&gt;Types&lt;/code&gt; のデータ型のため。</target>
        </trans-unit>
        <trans-unit id="a34ccd4915933855882fb3994eeadf0216fddd30" translate="yes" xml:space="preserve">
          <source>An Integer representing the vendor specific data type</source>
          <target state="translated">ベンダ固有のデータ型を表す整数</target>
        </trans-unit>
        <trans-unit id="3680dbb15da07882a3b83576060c6ac4cc0fc961" translate="yes" xml:space="preserve">
          <source>An InvalidKeyException with a detail message.</source>
          <target state="translated">InvalidKeyExceptionで、詳細なメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="dc59b05409684c3be739fbe664b962af3d646193" translate="yes" xml:space="preserve">
          <source>An InvalidKeyException with no detail message.</source>
          <target state="translated">詳細メッセージがないInvalidKeyException。</target>
        </trans-unit>
        <trans-unit id="f82726191af9e4037f87325b6ef69bc023b200b4" translate="yes" xml:space="preserve">
          <source>An InvalidOpenTypeException with a detail message.</source>
          <target state="translated">InvalidOpenTypeExceptionで、詳細なメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="a337087b8fc07fcd230bf927b149b6cfbe5dcedc" translate="yes" xml:space="preserve">
          <source>An InvalidOpenTypeException with no detail message.</source>
          <target state="translated">詳細メッセージがないInvalidOpenTypeException。</target>
        </trans-unit>
        <trans-unit id="357d8263f54541263b646f9c4f71f8fd9cccc4b4" translate="yes" xml:space="preserve">
          <source>An Iterator over String elements is returned in an arbitrary, &lt;strong&gt;implementation dependent&lt;/strong&gt;, order.</source>
          <target state="translated">文字列要素に対するイテレータは、&lt;strong&gt;実装に依存&lt;/strong&gt;する任意の順序で返されます。</target>
        </trans-unit>
        <trans-unit id="70a4c3fb116f4cb8fa098f1b416850a522db26c4" translate="yes" xml:space="preserve">
          <source>An Iterator specialized for &lt;code&gt;double&lt;/code&gt; values.</source>
          <target state="translated">&lt;code&gt;double&lt;/code&gt; 値に特化したイテレーター。</target>
        </trans-unit>
        <trans-unit id="155a282951704944e9cb6e10bac0867700c1d539" translate="yes" xml:space="preserve">
          <source>An Iterator specialized for &lt;code&gt;int&lt;/code&gt; values.</source>
          <target state="translated">&lt;code&gt;int&lt;/code&gt; 値に特化したイテレータ。</target>
        </trans-unit>
        <trans-unit id="3bd0758c0ccd2df72b37d50b6c0c974cfde9e265" translate="yes" xml:space="preserve">
          <source>An Iterator specialized for &lt;code&gt;long&lt;/code&gt; values.</source>
          <target state="translated">&lt;code&gt;long&lt;/code&gt; 値に特化したイテレータ。</target>
        </trans-unit>
        <trans-unit id="a53095780f8e1614597cbcccccf5b9f62cf1ff4b" translate="yes" xml:space="preserve">
          <source>An LDAP server can send back response controls with an LDAP operation and also with enumeration results, such as those returned by a list or search operation. The &lt;code&gt;LdapContext&lt;/code&gt; provides a method (&lt;code&gt;getResponseControls()&lt;/code&gt;) for getting the response controls sent with an LDAP operation, while the &lt;code&gt;HasControls&lt;/code&gt; interface is used to retrieve response controls associated with enumeration results.</source>
          <target state="translated">LDAPサーバーは、LDAP操作と、リストや検索操作によって返された結果などの列挙結果を含む応答コントロールを返信できます。 &lt;code&gt;LdapContext&lt;/code&gt; のは方法（提供 &lt;code&gt;getResponseControls()&lt;/code&gt; をしながら、LDAP操作とともに送信された応答コントロールを取得するため） &lt;code&gt;HasControls&lt;/code&gt; は、インターフェイスは、列挙結果に関連した応答コントロールを取得するために使用されます。</target>
        </trans-unit>
        <trans-unit id="ab4cc3bdb94a28c189afa2d189dc64d5e1a90c82" translate="yes" xml:space="preserve">
          <source>An LDAP service provider for &lt;code&gt;ctx&lt;/code&gt; uses a &lt;code&gt;DirStateFactory&lt;/code&gt; (indirectly via &lt;code&gt;DirectoryManager.getStateToBind()&lt;/code&gt;) and gives it &lt;code&gt;printer&lt;/code&gt; and &lt;code&gt;printerAttrs&lt;/code&gt;. A factory for an LDAP directory might turn &lt;code&gt;printer&lt;/code&gt; into a set of attributes and merge that with &lt;code&gt;printerAttrs&lt;/code&gt;. The service provider then uses the resulting attributes to create an LDAP entry and updates the directory.</source>
          <target state="translated">以下のためのLDAPサービスプロバイダ &lt;code&gt;ctx&lt;/code&gt; 使用しています &lt;code&gt;DirStateFactory&lt;/code&gt; （間接的に経由 &lt;code&gt;DirectoryManager.getStateToBind()&lt;/code&gt; ）と、それを与え &lt;code&gt;printer&lt;/code&gt; と &lt;code&gt;printerAttrs&lt;/code&gt; を。LDAPディレクトリのファクトリーは、 &lt;code&gt;printer&lt;/code&gt; を一連の属性に変換し、それを &lt;code&gt;printerAttrs&lt;/code&gt; とマージする場合があります。次に、サービスプロバイダーは結果の属性を使用してLDAPエントリを作成し、ディレクトリを更新します。</target>
        </trans-unit>
        <trans-unit id="2c6f45db03da3155b831ee0314e342a09c916793" translate="yes" xml:space="preserve">
          <source>An MBean Server can be accessed remotely through a &lt;em&gt;connector&lt;/em&gt;. A connector allows a remote Java application to access an MBean Server in essentially the same way as a local one. The package &lt;a href=&quot;remote/package-summary&quot;&gt;&lt;code&gt;
        javax.management.remote&lt;/code&gt;&lt;/a&gt; defines connectors.</source>
          <target state="translated">MBeanサーバーには、&lt;em&gt;コネクタを&lt;/em&gt;介してリモートでアクセスでき&lt;em&gt;ます&lt;/em&gt;。コネクタを使用すると、リモートのJavaアプリケーションは、ローカルのJavaアプリケーションと基本的に同じ方法でMBeanサーバーにアクセスできます。パッケージ&lt;a href=&quot;remote/package-summary&quot;&gt; &lt;code&gt; javax.management.remote&lt;/code&gt; &lt;/a&gt;はコネクターを定義します。</target>
        </trans-unit>
        <trans-unit id="fbe2b75cef04f4143b7379aca25f951639c0af3f" translate="yes" xml:space="preserve">
          <source>An MBean Server can be queried for MBeans whose names match certain patterns and/or whose attributes meet certain constraints. Name patterns are constructed using the &lt;a href=&quot;objectname&quot;&gt;&lt;code&gt;ObjectName&lt;/code&gt;&lt;/a&gt; class and constraints are constructed using the &lt;a href=&quot;query&quot;&gt;&lt;code&gt;Query&lt;/code&gt;&lt;/a&gt; class. The methods &lt;a href=&quot;mbeanserver#queryNames(javax.management.ObjectName,javax.management.QueryExp)&quot;&gt;&lt;code&gt;queryNames&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;mbeanserver#queryMBeans(javax.management.ObjectName,javax.management.QueryExp)&quot;&gt;&lt;code&gt;queryMBeans&lt;/code&gt;&lt;/a&gt; then perform the query.</source>
          <target state="translated">MBeanサーバーは、名前が特定のパターンに一致するMBeanや、属性が特定の制約を満たすMBeanを照会できます。名前パターンは&lt;a href=&quot;objectname&quot;&gt; &lt;code&gt;ObjectName&lt;/code&gt; &lt;/a&gt;クラスを使用して構築され、制約は&lt;a href=&quot;query&quot;&gt; &lt;code&gt;Query&lt;/code&gt; &lt;/a&gt;クラスを使用して構築されます。次に、メソッド&lt;a href=&quot;mbeanserver#queryNames(javax.management.ObjectName,javax.management.QueryExp)&quot;&gt; &lt;code&gt;queryNames&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;mbeanserver#queryMBeans(javax.management.ObjectName,javax.management.QueryExp)&quot;&gt; &lt;code&gt;queryMBeans&lt;/code&gt; &lt;/a&gt;がクエリを実行します。</target>
        </trans-unit>
        <trans-unit id="97948eb279240b610b0044cd0566e39e0defdcce" translate="yes" xml:space="preserve">
          <source>An MBean Server can be queried for MBeans whose names match certain patterns and/or whose attributes meet certain constraints. Name patterns are constructed using the &lt;a href=&quot;objectname&quot;&gt;&lt;code&gt;ObjectName&lt;/code&gt;&lt;/a&gt; class and constraints are constructed using the &lt;a href=&quot;query&quot;&gt;&lt;code&gt;Query&lt;/code&gt;&lt;/a&gt; class. The methods &lt;a href=&quot;mbeanserver#queryNames-javax.management.ObjectName-javax.management.QueryExp-&quot;&gt;&lt;code&gt;queryNames&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;mbeanserver#queryMBeans-javax.management.ObjectName-javax.management.QueryExp-&quot;&gt;&lt;code&gt;queryMBeans&lt;/code&gt;&lt;/a&gt; then perform the query.</source>
          <target state="translated">MBeanサーバーは、名前が特定のパターンに一致する、または属性が特定の制約を満たすMBeanを照会できます。名前パターンは&lt;a href=&quot;objectname&quot;&gt; &lt;code&gt;ObjectName&lt;/code&gt; &lt;/a&gt;クラスを使用して構築され、制約は&lt;a href=&quot;query&quot;&gt; &lt;code&gt;Query&lt;/code&gt; &lt;/a&gt;クラスを使用して構築されます。メソッドの&lt;a href=&quot;mbeanserver#queryNames-javax.management.ObjectName-javax.management.QueryExp-&quot;&gt; &lt;code&gt;queryNames&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;mbeanserver#queryMBeans-javax.management.ObjectName-javax.management.QueryExp-&quot;&gt; &lt;code&gt;queryMBeans&lt;/code&gt; は&lt;/a&gt;、クエリを実行します。</target>
        </trans-unit>
        <trans-unit id="f09f64f9f479903bc4844a21058804c22f8e764e" translate="yes" xml:space="preserve">
          <source>An MBean Server is an object implementing the interface &lt;a href=&quot;mbeanserver&quot;&gt;&lt;code&gt;MBeanServer&lt;/code&gt;&lt;/a&gt;. The most convenient MBean Server to use is the &lt;em&gt;Platform MBean Server&lt;/em&gt;. This is a single MBean Server that can be shared by different managed components running within the same Java Virtual Machine. The Platform MBean Server is accessed with the method &lt;a href=&quot;../../java/lang/management/managementfactory#getPlatformMBeanServer()&quot;&gt;&lt;code&gt;ManagementFactory.getPlatformMBeanServer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">MBeanサーバーは、インターフェース&lt;a href=&quot;mbeanserver&quot;&gt; &lt;code&gt;MBeanServer&lt;/code&gt; を&lt;/a&gt;実装するオブジェクトです。使用するのに最も便利なMBeanサーバーは&lt;em&gt;PlatformMBeanサーバー&lt;/em&gt;です。これは、同じJava仮想マシン内で実行されているさまざまな管理対象コンポーネントで共有できる単一のMBeanサーバーです。プラットフォームMBeanサーバーには、メソッド&lt;a href=&quot;../../java/lang/management/managementfactory#getPlatformMBeanServer()&quot;&gt; &lt;code&gt;ManagementFactory.getPlatformMBeanServer()&lt;/code&gt; を使用&lt;/a&gt;してアクセスします。</target>
        </trans-unit>
        <trans-unit id="686212de06bf8398834d07ba97c35c4a1aa8d411" translate="yes" xml:space="preserve">
          <source>An MBean Server is an object implementing the interface &lt;a href=&quot;mbeanserver&quot;&gt;&lt;code&gt;MBeanServer&lt;/code&gt;&lt;/a&gt;. The most convenient MBean Server to use is the &lt;em&gt;Platform MBean Server&lt;/em&gt;. This is a single MBean Server that can be shared by different managed components running within the same Java Virtual Machine. The Platform MBean Server is accessed with the method &lt;a href=&quot;../../java/lang/management/managementfactory#getPlatformMBeanServer--&quot;&gt;&lt;code&gt;ManagementFactory.getPlatformMBeanServer()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">MBeanサーバーは、&lt;a href=&quot;mbeanserver&quot;&gt; &lt;code&gt;MBeanServer&lt;/code&gt; &lt;/a&gt;インターフェースを実装するオブジェクトです。使用するのに最も便利なMBeanサーバーは、&lt;em&gt;プラットフォームMBeanサーバー&lt;/em&gt;です。これは、同じJava仮想マシン内で実行されているさまざまな管理対象コンポーネントで共有できる単一のMBeanサーバーです。プラットフォームMBeanサーバーには、メソッド&lt;a href=&quot;../../java/lang/management/managementfactory#getPlatformMBeanServer--&quot;&gt; &lt;code&gt;ManagementFactory.getPlatformMBeanServer()&lt;/code&gt; を使用&lt;/a&gt;してアクセスします。</target>
        </trans-unit>
        <trans-unit id="8f501a8e0940121cfd56f3f5267fe2b898c29ecc" translate="yes" xml:space="preserve">
          <source>An MBean can be a listener for notifications emitted by other MBeans in the same MBean Server. In this case, it implements &lt;a href=&quot;notificationlistener&quot;&gt;&lt;code&gt;NotificationListener&lt;/code&gt;&lt;/a&gt; and the method &lt;a href=&quot;mbeanserver#addNotificationListener(javax.management.ObjectName,javax.management.ObjectName,javax.management.NotificationFilter,java.lang.Object)&quot;&gt;&lt;code&gt;MBeanServer.addNotificationListener(ObjectName,
        ObjectName, NotificationFilter, Object)&lt;/code&gt;&lt;/a&gt; is used to listen.</source>
          <target state="translated">MBeanは、同じMBeanサーバー内の他のMBeanによって発行される通知のリスナーになることができます。この場合、&lt;a href=&quot;notificationlistener&quot;&gt; &lt;code&gt;NotificationListener&lt;/code&gt; &lt;/a&gt;を実装し、メソッド&lt;a href=&quot;mbeanserver#addNotificationListener(javax.management.ObjectName,javax.management.ObjectName,javax.management.NotificationFilter,java.lang.Object)&quot;&gt; &lt;code&gt;MBeanServer.addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)&lt;/code&gt; &lt;/a&gt;を使用してリッスンします。</target>
        </trans-unit>
        <trans-unit id="6196712ecd6d41a40d55269bd3af371c1720992a" translate="yes" xml:space="preserve">
          <source>An MBean can be a listener for notifications emitted by other MBeans in the same MBean Server. In this case, it implements &lt;a href=&quot;notificationlistener&quot;&gt;&lt;code&gt;NotificationListener&lt;/code&gt;&lt;/a&gt; and the method &lt;a href=&quot;mbeanserver#addNotificationListener-javax.management.ObjectName-javax.management.ObjectName-javax.management.NotificationFilter-java.lang.Object-&quot;&gt;&lt;code&gt;MBeanServer.addNotificationListener(ObjectName,
        ObjectName, NotificationFilter, Object)&lt;/code&gt;&lt;/a&gt; is used to listen.</source>
          <target state="translated">MBeanは、同じMBeanサーバー内の他のMBeanによって発行される通知のリスナーになることができます。この場合、それは&lt;a href=&quot;notificationlistener&quot;&gt; &lt;code&gt;NotificationListener&lt;/code&gt; &lt;/a&gt;を実装し、メソッド&lt;a href=&quot;mbeanserver#addNotificationListener-javax.management.ObjectName-javax.management.ObjectName-javax.management.NotificationFilter-java.lang.Object-&quot;&gt; &lt;code&gt;MBeanServer.addNotificationListener(ObjectName, ObjectName, NotificationFilter, Object)&lt;/code&gt; &lt;/a&gt;を使用して待機します。</target>
        </trans-unit>
        <trans-unit id="3bd69a8a9ccafe3be26ac8a6d73ee1f2d5de834c" translate="yes" xml:space="preserve">
          <source>An MBean can implement the &lt;a href=&quot;mbeanregistration&quot;&gt;&lt;code&gt;MBeanRegistration&lt;/code&gt;&lt;/a&gt; interface in order to be told when it is registered and unregistered in the MBean Server. Additionally, the &lt;a href=&quot;mbeanregistration#preRegister(javax.management.MBeanServer,javax.management.ObjectName)&quot;&gt;&lt;code&gt;preRegister&lt;/code&gt;&lt;/a&gt; method allows the MBean to get a reference to the &lt;code&gt;MBeanServer&lt;/code&gt; object and to get its &lt;code&gt;ObjectName&lt;/code&gt; within the MBean Server.</source>
          <target state="translated">MBeanは、MBeanサーバーに登録および登録解除されたときに&lt;a href=&quot;mbeanregistration&quot;&gt; &lt;code&gt;MBeanRegistration&lt;/code&gt; &lt;/a&gt;されるように、MBeanRegistrationインターフェースを実装できます。さらに、&lt;a href=&quot;mbeanregistration#preRegister(javax.management.MBeanServer,javax.management.ObjectName)&quot;&gt; &lt;code&gt;preRegister&lt;/code&gt; &lt;/a&gt;メソッドを使用すると、MBeanは &lt;code&gt;MBeanServer&lt;/code&gt; オブジェクトへの参照を取得し、MBeanサーバー内でその &lt;code&gt;ObjectName&lt;/code&gt; を取得できます。</target>
        </trans-unit>
        <trans-unit id="7a30bf77c8a83531fd79d0d4269b1cd85e0ea8db" translate="yes" xml:space="preserve">
          <source>An MBean can implement the &lt;a href=&quot;mbeanregistration&quot;&gt;&lt;code&gt;MBeanRegistration&lt;/code&gt;&lt;/a&gt; interface in order to be told when it is registered and unregistered in the MBean Server. Additionally, the &lt;a href=&quot;mbeanregistration#preRegister-javax.management.MBeanServer-javax.management.ObjectName-&quot;&gt;&lt;code&gt;preRegister&lt;/code&gt;&lt;/a&gt; method allows the MBean to get a reference to the &lt;code&gt;MBeanServer&lt;/code&gt; object and to get its &lt;code&gt;ObjectName&lt;/code&gt; within the MBean Server.</source>
          <target state="translated">MBeanは、MBeanサーバーに登録および登録解除されたときに&lt;a href=&quot;mbeanregistration&quot;&gt; &lt;code&gt;MBeanRegistration&lt;/code&gt; &lt;/a&gt;を受けるために、MBeanRegistrationインターフェースを実装できます。さらに、&lt;a href=&quot;mbeanregistration#preRegister-javax.management.MBeanServer-javax.management.ObjectName-&quot;&gt; &lt;code&gt;preRegister&lt;/code&gt; &lt;/a&gt;メソッドを使用すると、MBeanは &lt;code&gt;MBeanServer&lt;/code&gt; オブジェクトへの参照を取得し、MBeanサーバー内でその &lt;code&gt;ObjectName&lt;/code&gt; を取得できます。</target>
        </trans-unit>
        <trans-unit id="3e251f67958e23d80ebda42f966d473cba5ea4c1" translate="yes" xml:space="preserve">
          <source>An MBean can perform actions when it is registered in or unregistered from an MBean Server if it implements the &lt;a href=&quot;mbeanregistration&quot;&gt;&lt;code&gt;MBeanRegistration&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">&lt;a href=&quot;mbeanregistration&quot;&gt; &lt;code&gt;MBeanRegistration&lt;/code&gt; &lt;/a&gt;インターフェースを実装している場合、MBeanは、MBeanサーバーに登録または登録解除されたときにアクションを実行できます。</target>
        </trans-unit>
        <trans-unit id="1eed166ef5231879755ac3584c276416cd3f877f" translate="yes" xml:space="preserve">
          <source>An MBean that is of a subclass of &lt;a href=&quot;../../../../java.base/java/lang/classloader&quot;&gt;&lt;code&gt;ClassLoader&lt;/code&gt;&lt;/a&gt; can be used as a class loader to create other MBeans via the method &lt;a href=&quot;../mbeanserver#createMBean(java.lang.String,javax.management.ObjectName,javax.management.ObjectName,java.lang.Object%5B%5D,java.lang.String%5B%5D)&quot;&gt;&lt;code&gt;MBeanServer.createMBean(String, ObjectName,
	ObjectName, Object[], String[])&lt;/code&gt;&lt;/a&gt;, and to instantiate arbitrary objects via the method &lt;a href=&quot;../mbeanserver#instantiate(java.lang.String,javax.management.ObjectName,java.lang.Object%5B%5D,java.lang.String%5B%5D)&quot;&gt;&lt;code&gt;MBeanServer.instantiate(String, ObjectName,
	Object[], String[])&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;mlet&quot;&gt;&lt;code&gt;MLet&lt;/code&gt;&lt;/a&gt; class is an example of such an MBean. It is a &lt;a href=&quot;../../../../java.base/java/net/urlclassloader&quot;&gt;&lt;code&gt;URLClassLoader&lt;/code&gt;&lt;/a&gt;, so the list of URLs to load classes from can be configured.</source>
          <target state="translated">&lt;a href=&quot;../../../../java.base/java/lang/classloader&quot;&gt; &lt;code&gt;ClassLoader&lt;/code&gt; の&lt;/a&gt;サブクラスであるMBeanをクラスローダーとして使用して、メソッド&lt;a href=&quot;../mbeanserver#createMBean(java.lang.String,javax.management.ObjectName,javax.management.ObjectName,java.lang.Object%5B%5D,java.lang.String%5B%5D)&quot;&gt; &lt;code&gt;MBeanServer.createMBean(String, ObjectName, ObjectName, Object[], String[])&lt;/code&gt; &lt;/a&gt;を介して他のMBeanを作成し、メソッドを介して任意のオブジェクトをインスタンス化できます。&lt;a href=&quot;../mbeanserver#instantiate(java.lang.String,javax.management.ObjectName,java.lang.Object%5B%5D,java.lang.String%5B%5D)&quot;&gt; &lt;code&gt;MBeanServer.instantiate(String, ObjectName, Object[], String[])&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;mlet&quot;&gt; &lt;code&gt;MLet&lt;/code&gt; をの&lt;/a&gt;クラスは、MBeanの一例です。これは&lt;a href=&quot;../../../../java.base/java/net/urlclassloader&quot;&gt; &lt;code&gt;URLClassLoader&lt;/code&gt; &lt;/a&gt;であるため、クラスをロードするURLのリストを構成できます。</target>
        </trans-unit>
        <trans-unit id="d6e0a47e65f611ffbcc9eebd78bf36dec9777da3" translate="yes" xml:space="preserve">
          <source>An MBean that is of a subclass of &lt;a href=&quot;../../../java/lang/classloader&quot;&gt;&lt;code&gt;ClassLoader&lt;/code&gt;&lt;/a&gt; can be used as a class loader to create other MBeans via the method &lt;a href=&quot;../mbeanserver#createMBean-java.lang.String-javax.management.ObjectName-javax.management.ObjectName-java.lang.Object:A-java.lang.String:A-&quot;&gt;&lt;code&gt;MBeanServer.createMBean(String, ObjectName,
	ObjectName, Object[], String[])&lt;/code&gt;&lt;/a&gt;, and to instantiate arbitrary objects via the method &lt;a href=&quot;../mbeanserver#instantiate-java.lang.String-javax.management.ObjectName-java.lang.Object:A-java.lang.String:A-&quot;&gt;&lt;code&gt;MBeanServer.instantiate(String, ObjectName,
	Object[], String[])&lt;/code&gt;&lt;/a&gt;. The &lt;a href=&quot;mlet&quot;&gt;&lt;code&gt;MLet&lt;/code&gt;&lt;/a&gt; class is an example of such an MBean. It is a &lt;a href=&quot;../../../java/net/urlclassloader&quot;&gt;&lt;code&gt;URLClassLoader&lt;/code&gt;&lt;/a&gt;, so the list of URLs to load classes from can be configured.</source>
          <target state="translated">&lt;a href=&quot;../../../java/lang/classloader&quot;&gt; &lt;code&gt;ClassLoader&lt;/code&gt; の&lt;/a&gt;サブクラスのMBeanをクラスローダーとして使用して、メソッド&lt;a href=&quot;../mbeanserver#createMBean-java.lang.String-javax.management.ObjectName-javax.management.ObjectName-java.lang.Object:A-java.lang.String:A-&quot;&gt; &lt;code&gt;MBeanServer.createMBean(String, ObjectName, ObjectName, Object[], String[])&lt;/code&gt; &lt;/a&gt;を介して他のMBeanを作成し、メソッドを介して任意のオブジェクトをインスタンス化できます。&lt;a href=&quot;../mbeanserver#instantiate-java.lang.String-javax.management.ObjectName-java.lang.Object:A-java.lang.String:A-&quot;&gt; &lt;code&gt;MBeanServer.instantiate(String, ObjectName, Object[], String[])&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;mlet&quot;&gt; &lt;code&gt;MLet&lt;/code&gt; をの&lt;/a&gt;クラスは、MBeanの一例です。これは&lt;a href=&quot;../../../java/net/urlclassloader&quot;&gt; &lt;code&gt;URLClassLoader&lt;/code&gt; &lt;/a&gt;であるため、クラスをロードするURLのリストを構成できます。</target>
        </trans-unit>
        <trans-unit id="5ee8e60221fd233794c0a1cdcaf474e9f2e09cf3" translate="yes" xml:space="preserve">
          <source>An MBean that will emit notifications must implement the &lt;a href=&quot;notificationbroadcaster&quot;&gt;&lt;code&gt;NotificationBroadcaster&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;notificationemitter&quot;&gt;&lt;code&gt;NotificationEmitter&lt;/code&gt;&lt;/a&gt; interface. Usually, it does this by subclassing &lt;a href=&quot;notificationbroadcastersupport&quot;&gt;&lt;code&gt;NotificationBroadcasterSupport&lt;/code&gt;&lt;/a&gt; or delegating to an instance of that class. Here is an example:</source>
          <target state="translated">通知を送信するMBeanは、&lt;a href=&quot;notificationbroadcaster&quot;&gt; &lt;code&gt;NotificationBroadcaster&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;notificationemitter&quot;&gt; &lt;code&gt;NotificationEmitter&lt;/code&gt; &lt;/a&gt;インターフェースを実装する必要があります。通常、これを行うには、&lt;a href=&quot;notificationbroadcastersupport&quot;&gt; &lt;code&gt;NotificationBroadcasterSupport&lt;/code&gt; &lt;/a&gt;をサブクラス化するか、そのクラスのインスタンスに委任します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="4d64b80f2eca1400e06525e015fb932555cdb8a8" translate="yes" xml:space="preserve">
          <source>An MBean which is not an &lt;a href=&quot;mbeanserverdelegate&quot;&gt;&lt;code&gt;MBeanServerDelegate&lt;/code&gt;&lt;/a&gt; may also emit MBeanServerNotifications. In particular, there is a convention for MBeans to emit an MBeanServerNotification for a group of MBeans.</source>
          <target state="translated">MBeanServerDelegateではない&lt;a href=&quot;mbeanserverdelegate&quot;&gt; &lt;code&gt;MBeanServerDelegate&lt;/code&gt; &lt;/a&gt;もMBeanServerNotificationsを発行する場合があります。特に、MBeanがMBeanのグループに対してMBeanServerNotificationを発行する規則があります。</target>
        </trans-unit>
        <trans-unit id="95cea1a9029d95f515561a7a036eb04c03f3026b" translate="yes" xml:space="preserve">
          <source>An MBean whose management interface is determined by reflection on a Java interface, and that emits notifications.</source>
          <target state="translated">管理インタフェースがJavaインタフェースへの反映によって決定され、通知を発するMBean。</target>
        </trans-unit>
        <trans-unit id="5a5b10fc82b6cd0e3aab40067c0af3302ae2944f" translate="yes" xml:space="preserve">
          <source>An MBean whose management interface is determined by reflection on a Java interface.</source>
          <target state="translated">管理インタフェースがJavaインタフェースへの反映によって決定されるMBean。</target>
        </trans-unit>
        <trans-unit id="2a16665e14800a2674f071859c3ec94d73b109f2" translate="yes" xml:space="preserve">
          <source>An MBeanPermission contains four items of information:</source>
          <target state="translated">MBeanPermissionには、4つの情報項目が含まれています。</target>
        </trans-unit>
        <trans-unit id="39f9f8437c0998051c143f718f292156eeeaccfe" translate="yes" xml:space="preserve">
          <source>An MBeanServerNotification emitted to denote the registration or unregistration of a group of MBeans has the following characteristics:</source>
          <target state="translated">MBeanServerNotification は、MBean グループの登録または未登録を示すために発行され、以下の特徴を持つ。</target>
        </trans-unit>
        <trans-unit id="ba4ca74d70559ec8a55cf7fd17427e673f59ce61" translate="yes" xml:space="preserve">
          <source>An MLet that is not added to the &lt;a href=&quot;classloaderrepository&quot;&gt;&lt;code&gt;ClassLoaderRepository&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;classloaderrepository&quot;&gt; &lt;code&gt;ClassLoaderRepository&lt;/code&gt; に&lt;/a&gt;追加されないMLet 。</target>
        </trans-unit>
        <trans-unit id="684d2ceed16d31eafde9cf6a61f566a3a5e3a6ce" translate="yes" xml:space="preserve">
          <source>An MLet that is not added to the &lt;a href=&quot;classloaderrepository&quot;&gt;&lt;code&gt;ClassLoaderRepository&lt;/code&gt;&lt;/a&gt;. This class acts exactly like its parent class, &lt;a href=&quot;mlet&quot;&gt;&lt;code&gt;MLet&lt;/code&gt;&lt;/a&gt;, with one exception. When a PrivateMLet is registered in an MBean server, it is not added to that MBean server's &lt;a href=&quot;classloaderrepository&quot;&gt;&lt;code&gt;ClassLoaderRepository&lt;/code&gt;&lt;/a&gt;. This is true because this class implements the interface &lt;a href=&quot;privateclassloader&quot;&gt;&lt;code&gt;PrivateClassLoader&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;classloaderrepository&quot;&gt; &lt;code&gt;ClassLoaderRepository&lt;/code&gt; に&lt;/a&gt;追加されないMLet 。このクラスは、1つの例外を除いて、親クラス&lt;a href=&quot;mlet&quot;&gt; &lt;code&gt;MLet&lt;/code&gt; &lt;/a&gt;とまったく同じように機能します。PrivateMLetがMBeanサーバーに登録されると、そのMBeanサーバーの&lt;a href=&quot;classloaderrepository&quot;&gt; &lt;code&gt;ClassLoaderRepository&lt;/code&gt; に&lt;/a&gt;追加されません。これは、このクラスが&lt;a href=&quot;privateclassloader&quot;&gt; &lt;code&gt;PrivateClassLoader&lt;/code&gt; &lt;/a&gt;インターフェースを実装しているためです。</target>
        </trans-unit>
        <trans-unit id="fc13224541b9d8fc1c00fb4c8f5e8f87442494f2" translate="yes" xml:space="preserve">
          <source>An MXBean interface</source>
          <target state="translated">MXBean インターフェース</target>
        </trans-unit>
        <trans-unit id="989b20991b0fe114ca7ab75b9bf606966fe30205" translate="yes" xml:space="preserve">
          <source>An MXBean interface, or a type referenced within an MXBean interface, can reference another MXBean interface, &lt;em&gt;J&lt;/em&gt;. Then &lt;em&gt;opentype(J)&lt;/em&gt; is &lt;code&gt;SimpleType.OBJECTNAME&lt;/code&gt; and &lt;em&gt;opendata(J)&lt;/em&gt; is &lt;code&gt;ObjectName&lt;/code&gt;.</source>
          <target state="translated">MXBeanインターフェース、またはMXBeanインターフェース内で参照されるタイプは、別のMXBeanインターフェース&lt;em&gt;Jを&lt;/em&gt;参照できます。次に、&lt;em&gt;opentype（J）&lt;/em&gt;は &lt;code&gt;SimpleType.OBJECTNAME&lt;/code&gt; で、&lt;em&gt;opendata（J）&lt;/em&gt;は &lt;code&gt;ObjectName&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="59f414363b8c1ad567d9d9f3cf7a9c9bc32ebdf7" translate="yes" xml:space="preserve">
          <source>An MXBean is a kind of MBean. An MXBean object can be registered directly in the MBean Server, or it can be used as an argument to &lt;a href=&quot;standardmbean&quot;&gt;&lt;code&gt;StandardMBean&lt;/code&gt;&lt;/a&gt; and the resultant MBean registered in the MBean Server.</source>
          <target state="translated">MXBeanはMBeanの一種です。MXBeanオブジェクトは、MBeanサーバーに直接登録するか、&lt;a href=&quot;standardmbean&quot;&gt; &lt;code&gt;StandardMBean&lt;/code&gt; &lt;/a&gt;およびMBeanサーバーに登録された結果のMBeanの引数として使用できます。</target>
        </trans-unit>
        <trans-unit id="20af0d11e58d9b486064088eb6742a33feb2c915" translate="yes" xml:space="preserve">
          <source>An MXBean is a kind of Open MBean, as defined by the &lt;a href=&quot;openmbean/package-summary&quot;&gt;&lt;code&gt;javax.management.openmbean&lt;/code&gt;&lt;/a&gt; package. This means that the types of attributes, operation parameters, and operation return values must all be describable using &lt;em&gt;Open Types&lt;/em&gt;, that is the four standard subclasses of &lt;a href=&quot;openmbean/opentype&quot;&gt;&lt;code&gt;OpenType&lt;/code&gt;&lt;/a&gt;. MXBeans achieve this by mapping Java types into Open Types.</source>
          <target state="translated">MXBeanは、&lt;a href=&quot;openmbean/package-summary&quot;&gt; &lt;code&gt;javax.management.openmbean&lt;/code&gt; &lt;/a&gt;パッケージで定義されている一種のOpen MBean です。属性、操作パラメータ、および操作の戻り値の型はすべて使用して記述可能でなければならないことを、この手段&lt;em&gt;オープンタイプは&lt;/em&gt;、それは4つの標準サブクラスである&lt;a href=&quot;openmbean/opentype&quot;&gt; &lt;code&gt;OpenType&lt;/code&gt; &lt;/a&gt;。MXBeanは、Javaの型をOpen Typeにマッピングすることでこれを実現します。</target>
        </trans-unit>
        <trans-unit id="21cb28e67310ce331577f8cca181796525eed41e" translate="yes" xml:space="preserve">
          <source>An MXBean is a type of Open MBean. However, for compatibility reasons, its &lt;a href=&quot;mbeaninfo&quot;&gt;&lt;code&gt;MBeanInfo&lt;/code&gt;&lt;/a&gt; is not an &lt;a href=&quot;openmbean/openmbeaninfo&quot;&gt;&lt;code&gt;OpenMBeanInfo&lt;/code&gt;&lt;/a&gt;. In particular, when the type of an attribute, parameter, or operation return value is a primitive type such as &lt;code&gt;int&lt;/code&gt;, or is &lt;code&gt;void&lt;/code&gt; (for a return type), then the attribute, parameter, or operation will be represented respectively by an &lt;a href=&quot;mbeanattributeinfo&quot;&gt;&lt;code&gt;MBeanAttributeInfo&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mbeanparameterinfo&quot;&gt;&lt;code&gt;MBeanParameterInfo&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;mbeanoperationinfo&quot;&gt;&lt;code&gt;MBeanOperationInfo&lt;/code&gt;&lt;/a&gt; whose &lt;code&gt;getType()&lt;/code&gt; or &lt;code&gt;
      getReturnType()&lt;/code&gt; returns the primitive name (&quot;&lt;code&gt;int&lt;/code&gt;&quot; etc). This is so even though the mapping rules above specify that the &lt;em&gt;opendata&lt;/em&gt; mapping is the wrapped type (&lt;code&gt;Integer&lt;/code&gt; etc).</source>
          <target state="translated">MXBeanは、OpenMBeanの一種です。ただし、互換性の理由から、その&lt;a href=&quot;mbeaninfo&quot;&gt; &lt;code&gt;MBeanInfo&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;openmbean/openmbeaninfo&quot;&gt; &lt;code&gt;OpenMBeanInfo&lt;/code&gt; で&lt;/a&gt;はありません。特に、属性、パラメーター、または操作の戻り値の型が &lt;code&gt;int&lt;/code&gt; などのプリミティブ型であるか、 &lt;code&gt;void&lt;/code&gt; （戻り値の型の場合）である場合、属性、パラメーター、または操作はそれぞれ&lt;a href=&quot;mbeanattributeinfo&quot;&gt; &lt;code&gt;MBeanAttributeInfo&lt;/code&gt; &lt;/a&gt;で表されます。&lt;a href=&quot;mbeanparameterinfo&quot;&gt; &lt;code&gt;MBeanParameterInfo&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;mbeanoperationinfo&quot;&gt; &lt;code&gt;MBeanOperationInfo&lt;/code&gt; &lt;/a&gt; &lt;code&gt;getType()&lt;/code&gt; または &lt;code&gt; getReturnType()&lt;/code&gt; はプリミティブ名（ &quot;返す &lt;code&gt;int&lt;/code&gt; 型&quot;など）。上記のマッピングルールで&lt;em&gt;opendataが&lt;/em&gt;指定されていても、これはそう&lt;em&gt;です。&lt;/em&gt;マッピングはラップされたタイプ（ &lt;code&gt;Integer&lt;/code&gt; など）です。</target>
        </trans-unit>
        <trans-unit id="dd34150eb05388627fba70e2eb54039cdac7862c" translate="yes" xml:space="preserve">
          <source>An MXBean is a type of Open MBean. However, for compatibility reasons, its &lt;a href=&quot;mbeaninfo&quot;&gt;&lt;code&gt;MBeanInfo&lt;/code&gt;&lt;/a&gt; is not an &lt;a href=&quot;openmbean/openmbeaninfo&quot;&gt;&lt;code&gt;OpenMBeanInfo&lt;/code&gt;&lt;/a&gt;. In particular, when the type of an attribute, parameter, or operation return value is a primitive type such as &lt;code&gt;int&lt;/code&gt;, or is &lt;code&gt;void&lt;/code&gt; (for a return type), then the attribute, parameter, or operation will be represented respectively by an &lt;a href=&quot;mbeanattributeinfo&quot;&gt;&lt;code&gt;MBeanAttributeInfo&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;mbeanparameterinfo&quot;&gt;&lt;code&gt;MBeanParameterInfo&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;mbeanoperationinfo&quot;&gt;&lt;code&gt;MBeanOperationInfo&lt;/code&gt;&lt;/a&gt; whose &lt;code&gt;getType()&lt;/code&gt; or &lt;code&gt;getReturnType()&lt;/code&gt; returns the primitive name (&quot;&lt;code&gt;int&lt;/code&gt;&quot; etc). This is so even though the mapping rules above specify that the &lt;em&gt;opendata&lt;/em&gt; mapping is the wrapped type (&lt;code&gt;Integer&lt;/code&gt; etc).</source>
          <target state="translated">MXBeanはOpen MBeanの一種です。ただし、互換性の理由から、その&lt;a href=&quot;mbeaninfo&quot;&gt; &lt;code&gt;MBeanInfo&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;openmbean/openmbeaninfo&quot;&gt; &lt;code&gt;OpenMBeanInfo&lt;/code&gt; で&lt;/a&gt;はありません。特に、属性、パラメーター、または操作の戻り値の型が &lt;code&gt;int&lt;/code&gt; などのプリミティブ型である場合、または &lt;code&gt;void&lt;/code&gt; （戻り型の場合）である場合、属性、パラメーター、または操作はそれぞれ&lt;a href=&quot;mbeanattributeinfo&quot;&gt; &lt;code&gt;MBeanAttributeInfo&lt;/code&gt; &lt;/a&gt;によって表されます。&lt;a href=&quot;mbeanparameterinfo&quot;&gt; &lt;code&gt;MBeanParameterInfo&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;mbeanoperationinfo&quot;&gt; &lt;code&gt;MBeanOperationInfo&lt;/code&gt; &lt;/a&gt; &lt;code&gt;getType()&lt;/code&gt; または &lt;code&gt;getReturnType()&lt;/code&gt; はプリミティブ名（ &quot;返す &lt;code&gt;int&lt;/code&gt; 型 &quot;など）。上記のマッピングルールでは、&lt;em&gt;opendata&lt;/em&gt;マッピングはラップされたタイプです（ &lt;code&gt;Integer&lt;/code&gt; など）。</target>
        </trans-unit>
        <trans-unit id="542b942cbce0b3844c4f27707d82afa56cc4e312" translate="yes" xml:space="preserve">
          <source>An Object containing the new value of the attribute.</source>
          <target state="translated">属性の新しい値を含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="8df6bdf0b272efecad0ee99b8a017f2209a256fa" translate="yes" xml:space="preserve">
          <source>An Object containing the old value of the attribute.</source>
          <target state="translated">属性の古い値を含むオブジェクト。</target>
        </trans-unit>
        <trans-unit id="03fe8ea3b11dee9511e32c9a654b006fa03856b1" translate="yes" xml:space="preserve">
          <source>An Object may not implement this interface and the BeanContextChild interface (or any subinterfaces thereof) they are mutually exclusive.</source>
          <target state="translated">オブジェクトは,このインタフェースとBeanContextChildインタフェース(またはそのサブインタフェース)を相互に排他的に実装してはならない。</target>
        </trans-unit>
        <trans-unit id="18fab20a8981932e0cdfcb03629a21078cd776dc" translate="yes" xml:space="preserve">
          <source>An ObjectInputStream deserializes primitive data and objects previously written using an ObjectOutputStream.</source>
          <target state="translated">ObjectInputStream は、以前に ObjectOutputStream を使用して書き込まれたプリミティブ・データとオブジェクトをデシリアライズします。</target>
        </trans-unit>
        <trans-unit id="e69da085e00a0535ea9b9fd9090f35263c39c4b6" translate="yes" xml:space="preserve">
          <source>An ObjectName can be written as a String with the following elements in order:</source>
          <target state="translated">ObjectNameは、以下の要素を順に文字列として書くことができます。</target>
        </trans-unit>
        <trans-unit id="db3eca8504c2a54b641d40de2aa92e2f7f19aa7b" translate="yes" xml:space="preserve">
          <source>An ObjectName is a &lt;em&gt;property pattern&lt;/em&gt; if it is either a &lt;em&gt;property list pattern&lt;/em&gt; or a &lt;em&gt;property value pattern&lt;/em&gt; or both.</source>
          <target state="translated">アンObjectNameがある&lt;em&gt;プロパティのパターン&lt;/em&gt;、それはどちらかである場合&lt;em&gt;、プロパティリストパターン&lt;/em&gt;や&lt;em&gt;プロパティ値のパターン&lt;/em&gt;あるいはその両方。</target>
        </trans-unit>
        <trans-unit id="c510c9d7563f2a9b7c7d986e71babc6118f59c46" translate="yes" xml:space="preserve">
          <source>An ObjectName is a &lt;em&gt;property value pattern&lt;/em&gt; when at least one of its &lt;em&gt;quoted&lt;/em&gt; or &lt;em&gt;unquoted&lt;/em&gt; key property values contains the wildcard characters asterisk or question mark as described above. In this case it has one or more keys and associated values, with at least one of the values containing wildcard characters. It matches a nonpattern ObjectName whose domain matches and that contains the same keys whose values match; if the property value pattern is also a property list pattern then the nonpattern ObjectName can contain other keys and values.</source>
          <target state="translated">ObjectNameは、上記のように、&lt;em&gt;引用符付き&lt;/em&gt;または&lt;em&gt;引用符なしの&lt;/em&gt;キープロパティ値の少なくとも1つにワイルドカード文字のアスタリスクまたは疑問符が含まれている場合の&lt;em&gt;プロパティ値パターン&lt;/em&gt;です。この場合、1つ以上のキーと関連する値があり、少なくとも1つの値にワイルドカード文字が含まれています。ドメインが一致し、値が一致する同じキーを含む非パターンObjectNameに一致します。プロパティ値パターンがプロパティリストパターンでもある場合、非パターンObjectNameには他のキーと値を含めることができます。&lt;em&gt;&lt;/em&gt;&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="a363b501b01e48c96e2931f7880a10d1ec8bbb15" translate="yes" xml:space="preserve">
          <source>An ObjectName is a pattern if its domain contains a wildcard or if the ObjectName is a property pattern.</source>
          <target state="translated">ObjectName のドメインにワイルドカードが含まれている場合、または ObjectName がプロパティ・パターンである場合、ObjectName はパターンです。</target>
        </trans-unit>
        <trans-unit id="aab3b6bad2ccd1e7f7e80a174b134a6fde6602c1" translate="yes" xml:space="preserve">
          <source>An ObjectName may be a &lt;em&gt;property list pattern&lt;/em&gt;. In this case it may have zero or more keys and associated values. It matches a nonpattern ObjectName whose domain matches and that contains the same keys and associated values, as well as possibly other keys and values.</source>
          <target state="translated">ObjectNameは、&lt;em&gt;プロパティリストパターンの&lt;/em&gt;場合があり&lt;em&gt;ます&lt;/em&gt;。この場合、それはゼロ以上のキーと関連する値を持つかもしれません。これは、ドメインが一致し、同じキーと関連付けられた値、および場合によっては他のキーと値を含む非パターンObjectNameに一致します。</target>
        </trans-unit>
        <trans-unit id="efed495670010e9fb0fdfac0012ec76731cee814" translate="yes" xml:space="preserve">
          <source>An ObjectOutputStream writes primitive data types and graphs of Java objects to an OutputStream.</source>
          <target state="translated">ObjectOutputStreamは、Javaオブジェクトのプリミティブデータ型とグラフをOutputStreamに書き込みます。</target>
        </trans-unit>
        <trans-unit id="f0bb0438739d4af1d1f3db2d825ca51008a0af6a" translate="yes" xml:space="preserve">
          <source>An ObjectOutputStream writes primitive data types and graphs of Java objects to an OutputStream. The objects can be read (reconstituted) using an ObjectInputStream. Persistent storage of objects can be accomplished by using a file for the stream. If the stream is a network socket stream, the objects can be reconstituted on another host or in another process.</source>
          <target state="translated">ObjectOutputStreamは、Javaオブジェクトのプリミティブなデータ型とグラフをOutputStreamに書き込みます。オブジェクトは、ObjectInputStreamを使用して読み取り(再構成)することができます。オブジェクトの永続的な保存は、ストリームにファイルを使用することで実現できます。ストリームがネットワーク・ソケット・ストリームの場合、オブジェクトは別のホストまたは別のプロセスで再構成することができます。</target>
        </trans-unit>
        <trans-unit id="34e01e685e35391f4028a7c1dab2bc1a0c6b5d2a" translate="yes" xml:space="preserve">
          <source>An OpenDataException with a detail message.</source>
          <target state="translated">詳細メッセージを含む OpenDataException。</target>
        </trans-unit>
        <trans-unit id="06cbacef60277873774d333417d2d8df86173993" translate="yes" xml:space="preserve">
          <source>An OpenDataException with no detail message.</source>
          <target state="translated">詳細メッセージがない OpenDataException。</target>
        </trans-unit>
        <trans-unit id="18f7952f191dd1ad4237483205ff1688bae7b694" translate="yes" xml:space="preserve">
          <source>An OutputStreamWriter is a bridge from character streams to byte streams: Characters written to it are encoded into bytes using a specified &lt;a href=&quot;../nio/charset/charset&quot;&gt;&lt;code&gt;charset&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">OutputStreamWriterは、文字ストリームからバイトストリームへのブリッジです。それに書き込まれた&lt;a href=&quot;../nio/charset/charset&quot;&gt; &lt;code&gt;charset&lt;/code&gt; &lt;/a&gt;、指定されたcharsetを使用してバイトにエンコードされます。</target>
        </trans-unit>
        <trans-unit id="9b61197a7d747d33a5b03557fdb06bb541b50fdb" translate="yes" xml:space="preserve">
          <source>An OutputStreamWriter is a bridge from character streams to byte streams: Characters written to it are encoded into bytes using a specified &lt;a href=&quot;../nio/charset/charset&quot;&gt;&lt;code&gt;charset&lt;/code&gt;&lt;/a&gt;. The charset that it uses may be specified by name or may be given explicitly, or the platform's default charset may be accepted.</source>
          <target state="translated">OutputStreamWriterは、文字ストリームからバイトストリームへのブリッジです。それに書き込まれた&lt;a href=&quot;../nio/charset/charset&quot;&gt; &lt;code&gt;charset&lt;/code&gt; &lt;/a&gt;、指定されたcharsetを使用してバイトにエンコードされます。使用する文字セットは、名前で指定するか、明示的に指定するか、プラットフォームのデフォルトの文字セットを受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="ef98f1b76aaa72aa4454b3bcefe3b2b25e3c6a3c" translate="yes" xml:space="preserve">
          <source>An RMI connector client is usually constructed using &lt;a href=&quot;../../../../../java.management/javax/management/remote/jmxconnectorfactory&quot;&gt;&lt;code&gt;JMXConnectorFactory&lt;/code&gt;&lt;/a&gt;, with a &lt;code&gt;JMXServiceURL&lt;/code&gt; that has &lt;code&gt;rmi&lt;/code&gt; as its protocol.</source>
          <target state="translated">RMIコネクタクライアントは、通常使用して構成されている&lt;a href=&quot;../../../../../java.management/javax/management/remote/jmxconnectorfactory&quot;&gt; &lt;code&gt;JMXConnectorFactory&lt;/code&gt; &lt;/a&gt;して、 &lt;code&gt;JMXServiceURL&lt;/code&gt; ている &lt;code&gt;rmi&lt;/code&gt; のプロトコルとしては。</target>
        </trans-unit>
        <trans-unit id="99808230987b6e9929e2105f4c3389aec4750422" translate="yes" xml:space="preserve">
          <source>An RMI connector client is usually constructed using &lt;a href=&quot;../jmxconnectorfactory&quot;&gt;&lt;code&gt;JMXConnectorFactory&lt;/code&gt;&lt;/a&gt;, with a &lt;code&gt;JMXServiceURL&lt;/code&gt; that has &lt;code&gt;rmi&lt;/code&gt; or &lt;code&gt;iiop&lt;/code&gt; as its protocol.</source>
          <target state="translated">アンRMIコネクタクライアントは、通常使用して構成されている&lt;a href=&quot;../jmxconnectorfactory&quot;&gt; &lt;code&gt;JMXConnectorFactory&lt;/code&gt; &lt;/a&gt;と、 &lt;code&gt;JMXServiceURL&lt;/code&gt; ている &lt;code&gt;rmi&lt;/code&gt; や &lt;code&gt;iiop&lt;/code&gt; そのプロトコルとしてを。</target>
        </trans-unit>
        <trans-unit id="4b910edd874b19213945efb1089e2da5eb5ae5c4" translate="yes" xml:space="preserve">
          <source>An RMI connector server can also be created by constructing an instance of &lt;a href=&quot;rmiconnectorserver&quot;&gt;&lt;code&gt;RMIConnectorServer&lt;/code&gt;&lt;/a&gt;, explicitly or through the MBean server's &lt;code&gt;createMBean&lt;/code&gt; method.</source>
          <target state="translated">RMIコネクタサーバーは、&lt;a href=&quot;rmiconnectorserver&quot;&gt; &lt;code&gt;RMIConnectorServer&lt;/code&gt; の&lt;/a&gt;インスタンスを明示的に、またはMBeanサーバーの &lt;code&gt;createMBean&lt;/code&gt; メソッドを介して作成することによっても作成できます。</target>
        </trans-unit>
        <trans-unit id="1dc09f4208b4223c4f8a1f92d1b7d0592ec2bd1d" translate="yes" xml:space="preserve">
          <source>An RMI object representing a connector server.</source>
          <target state="translated">コネクタサーバを表すRMIオブジェクト。</target>
        </trans-unit>
        <trans-unit id="15984ae24067774af2dab2a68552a319f1c32556" translate="yes" xml:space="preserve">
          <source>An RMI object representing a connector server. Remote clients can make connections using the &lt;a href=&quot;#newClient(java.lang.Object)&quot;&gt;&lt;code&gt;newClient(Object)&lt;/code&gt;&lt;/a&gt; method. This method returns an RMI object representing the connection.</source>
          <target state="translated">コネクタサーバーを表すRMIオブジェクト。リモートクライアントは、&lt;a href=&quot;#newClient(java.lang.Object)&quot;&gt; &lt;code&gt;newClient(Object)&lt;/code&gt; &lt;/a&gt;メソッドを使用して接続を確立できます。このメソッドは、接続を表すRMIオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="7a37fe4347b2bf73213943b7b26b24257710b125" translate="yes" xml:space="preserve">
          <source>An RMI object representing a connector server. Remote clients can make connections using the &lt;a href=&quot;rmiserverimpl#newClient-java.lang.Object-&quot;&gt;&lt;code&gt;newClient(Object)&lt;/code&gt;&lt;/a&gt; method. This method returns an RMI object representing the connection.</source>
          <target state="translated">コネクタサーバーを表すRMIオブジェクト。リモートクライアントは、&lt;a href=&quot;rmiserverimpl#newClient-java.lang.Object-&quot;&gt; &lt;code&gt;newClient(Object)&lt;/code&gt; &lt;/a&gt;メソッドを使用して接続を確立できます。このメソッドは、接続を表すRMIオブジェクトを返します。</target>
        </trans-unit>
        <trans-unit id="b06c32cc5dc3b65396e4918b45bb21cb85d6634d" translate="yes" xml:space="preserve">
          <source>An SQL statement with or without IN parameters can be pre-compiled and stored in a &lt;code&gt;PreparedStatement&lt;/code&gt; object. This object can then be used to efficiently execute this statement multiple times.</source>
          <target state="translated">INパラメーターの有無にかかわらずSQLステートメントは、プリコンパイルして、 &lt;code&gt;PreparedStatement&lt;/code&gt; オブジェクトに格納できます。このオブジェクトを使用して、このステートメントを複数回効率的に実行できます。</target>
        </trans-unit>
        <trans-unit id="5f228b50887ffd4b7a10bbdacbb16847f0ada2fd" translate="yes" xml:space="preserve">
          <source>An Throwable object, or null.</source>
          <target state="translated">throwableオブジェクト、またはnull。</target>
        </trans-unit>
        <trans-unit id="04b48e43382bc4313acaa11e4d8357ed179380cb" translate="yes" xml:space="preserve">
          <source>An URL for reading the resource, or null if the resource could not be found or the caller doesn't have adequate privileges to get the resource.</source>
          <target state="translated">リソースを読み込むための URL、またはリソースが見つからなかった場合や呼び出し元がリソースを取得するのに十分な権限を持っていない場合は null。</target>
        </trans-unit>
        <trans-unit id="6725a2697652eca572f8455ea53d73dcc78a057b" translate="yes" xml:space="preserve">
          <source>An UndoableEdit used to remember AttributeSet changes to an Element.</source>
          <target state="translated">Elementに対するAttributeSetの変更を記憶するために使用されるUndoableEdit。</target>
        </trans-unit>
        <trans-unit id="e4672ea4886928b32800d79647876fbb666888d6" translate="yes" xml:space="preserve">
          <source>An XML Namespace has the properties:</source>
          <target state="translated">XML 名前空間にはプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="3c4d262e1066555065cc0ddf6c0d15b599886c74" translate="yes" xml:space="preserve">
          <source>An XML filter is like an XML reader, except that it obtains its events from another XML reader rather than a primary source like an XML document or database. Filters can modify a stream of events as they pass on to the final application.</source>
          <target state="translated">XML フィルタは XML リーダに似ていますが、XML ドキュメントやデータベースのような主要なソースではなく、別の XML リーダからイベントを取得します。フィルタは、最終的なアプリケーションに渡されるイベントのストリームを修正することができます。</target>
        </trans-unit>
        <trans-unit id="e185fa58233579ba675a813cb2b77e46f1ec733c" translate="yes" xml:space="preserve">
          <source>An XML processor may choose to completely expand entities before the structure model is passed to the DOM; in this case there will be no &lt;code&gt;EntityReference&lt;/code&gt; nodes in the document tree.</source>
          <target state="translated">XMLプロセッサは、構造モデルがDOMに渡される前に、エンティティを完全に拡張することを選択できます。この場合、ドキュメントツリーに &lt;code&gt;EntityReference&lt;/code&gt; ノードはありません。</target>
        </trans-unit>
        <trans-unit id="eb1a353ece394413a9fc7c4720437b702b4db83f" translate="yes" xml:space="preserve">
          <source>An XMLFilter object, or null if this feature is not supported.</source>
          <target state="translated">XMLFilter オブジェクト、またはこの機能がサポートされていない場合は null。</target>
        </trans-unit>
        <trans-unit id="d58aa97fba1a93b37112ffbf36cd08f1c4b6ad23" translate="yes" xml:space="preserve">
          <source>An XMLReader will throw this exception when it finds an unrecognized feature or property identifier; SAX applications and extensions may use this class for other, similar purposes.</source>
          <target state="translated">XMLReader は、認識されていない機能またはプロパティ識別子が見つかった場合にこの例外をスローします。</target>
        </trans-unit>
        <trans-unit id="2cf7eaeb0c2ee71f16ad77135aef4ec34fbfe40d" translate="yes" xml:space="preserve">
          <source>An XMLReader will throw this exception when it recognizes a feature or property identifier, but cannot perform the requested operation (setting a state or value). Other SAX2 applications and extensions may use this class for similar purposes.</source>
          <target state="translated">XMLReaderは、機能またはプロパティ識別子を認識しても、要求された操作(状態または値の設定)を実行できない場合に、この例外をスローします。他の SAX2 アプリケーションや拡張機能は、同様の目的でこのクラスを使用することができます。</target>
        </trans-unit>
        <trans-unit id="cf324feb59f454a23437c33c584f449d5703cf35" translate="yes" xml:space="preserve">
          <source>An XMLStreamReader instance is created with an initial event type START_DOCUMENT. At any moment in time, it has a current event that the methods of the interface access and may load the next event through the &lt;a href=&quot;#next()&quot;&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/a&gt; method. The current event type can be determined by &lt;a href=&quot;#getEventType()&quot;&gt;&lt;code&gt;getEventType()&lt;/code&gt;&lt;/a&gt;, and the next returned by the &lt;a href=&quot;#next()&quot;&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">XMLStreamReaderインスタンスは、初期イベントタイプSTART_DOCUMENTで作成されます。いつでも、インターフェイスのメソッドがアクセスする現在のイベントがあり、&lt;a href=&quot;#next()&quot;&gt; &lt;code&gt;next()&lt;/code&gt; &lt;/a&gt;メソッドを介して次のイベントをロードできます。現在のイベントタイプは&lt;a href=&quot;#getEventType()&quot;&gt; &lt;code&gt;getEventType()&lt;/code&gt; &lt;/a&gt;で判別でき、次のイベントタイプは&lt;a href=&quot;#next()&quot;&gt; &lt;code&gt;next()&lt;/code&gt; &lt;/a&gt;メソッドで返されます。</target>
        </trans-unit>
        <trans-unit id="53baf35ba2383d74488e4ec7872adfc905cd9ee2" translate="yes" xml:space="preserve">
          <source>An XPath &lt;em&gt;expression&lt;/em&gt; is composed of a &lt;em&gt;location path&lt;/em&gt; and one or more optional &lt;em&gt;predicates&lt;/em&gt;. Expressions may also include XPath variables.</source>
          <target state="translated">XPath&lt;em&gt;式&lt;/em&gt;は、&lt;em&gt;ロケーションパス&lt;/em&gt;と1つ以上のオプションの&lt;em&gt;述語で&lt;/em&gt;構成されます。式には、XPath変数を含めることもできます。</target>
        </trans-unit>
        <trans-unit id="154d80c1e5c16d57c365a94ff996c1a920050690" translate="yes" xml:space="preserve">
          <source>An XPath expression is not thread-safe and not reentrant. In other words, it is the application's responsibility to make sure that one &lt;a href=&quot;xpathexpression&quot;&gt;&lt;code&gt;XPathExpression&lt;/code&gt;&lt;/a&gt; object is not used from more than one thread at any given time, and while the &lt;code&gt;evaluate&lt;/code&gt; method is invoked, applications may not recursively call the &lt;code&gt;evaluate&lt;/code&gt; method.</source>
          <target state="translated">XPath式はスレッドセーフではなく、再入可能でもありません。つまり、1つの&lt;a href=&quot;xpathexpression&quot;&gt; &lt;code&gt;XPathExpression&lt;/code&gt; &lt;/a&gt;オブジェクトが常に複数のスレッドから使​​用されないようにするのはアプリケーションの責任であり、 &lt;code&gt;evaluate&lt;/code&gt; メソッドが呼び出されている間、アプリケーションは &lt;code&gt;evaluate&lt;/code&gt; メソッドを再帰的に呼び出さない場合があります。</target>
        </trans-unit>
        <trans-unit id="553fcf489b2b33f37e795f04be02411d69e025f5" translate="yes" xml:space="preserve">
          <source>An XPath object is not thread-safe and not reentrant. In other words, it is the application's responsibility to make sure that one &lt;a href=&quot;xpath&quot;&gt;&lt;code&gt;XPath&lt;/code&gt;&lt;/a&gt; object is not used from more than one thread at any given time, and while the &lt;code&gt;evaluate&lt;/code&gt; method is invoked, applications may not recursively call the &lt;code&gt;evaluate&lt;/code&gt; method.</source>
          <target state="translated">XPathオブジェクトはスレッドセーフではなく、再入可能でもありません。つまり、&lt;a href=&quot;xpath&quot;&gt; &lt;code&gt;XPath&lt;/code&gt; &lt;/a&gt;1つのXPathオブジェクトが複数のスレッドから使​​用されないようにするのはアプリケーションの責任であり、 &lt;code&gt;evaluate&lt;/code&gt; メソッドが呼び出されている間、アプリケーションは &lt;code&gt;evaluate&lt;/code&gt; メソッドを再帰的に呼び出さない場合があります。</target>
        </trans-unit>
        <trans-unit id="42eb4bbae3f9ef6ea11c82bbc13281ab0e4c2588" translate="yes" xml:space="preserve">
          <source>An absolute path is complete in that it doesn't need to be combined with other path information in order to locate a file.</source>
          <target state="translated">絶対パスは、ファイルを見つけるために他のパス情報と組み合わせる必要がないという点で完全なパスです。</target>
        </trans-unit>
        <trans-unit id="bffef8734765daab63d0b5ecd1dfdc4896413c2b" translate="yes" xml:space="preserve">
          <source>An absolute, hierarchical URI with a scheme equal to &lt;code&gt;&quot;file&quot;&lt;/code&gt;, a path representing this abstract pathname, and undefined authority, query, and fragment components</source>
          <target state="translated">&lt;code&gt;&quot;file&quot;&lt;/code&gt; に等しいスキーム、この抽象パス名を表すパス、および未定義の権限、クエリ、フラグメントコンポーネントを持つ絶対的な階層URI</target>
        </trans-unit>
        <trans-unit id="aaf73b27871ad2dcf58fe937c4251128a2c44fc2" translate="yes" xml:space="preserve">
          <source>An abstract &lt;code&gt;Spliterator.OfDouble&lt;/code&gt; that implements &lt;code&gt;trySplit&lt;/code&gt; to permit limited parallelism.</source>
          <target state="translated">制限された並列 &lt;code&gt;trySplit&lt;/code&gt; を許可するために &lt;code&gt;Spliterator.OfDouble&lt;/code&gt; を実装する抽象Spliterator.OfDouble。</target>
        </trans-unit>
        <trans-unit id="c2fa2c5de4495301c17f9c874474b9be3f8f2cfc" translate="yes" xml:space="preserve">
          <source>An abstract &lt;code&gt;Spliterator.OfInt&lt;/code&gt; that implements &lt;code&gt;trySplit&lt;/code&gt; to permit limited parallelism.</source>
          <target state="translated">制限された並列 &lt;code&gt;trySplit&lt;/code&gt; を許可するために &lt;code&gt;Spliterator.OfInt&lt;/code&gt; を実装する抽象Spliterator.OfInt。</target>
        </trans-unit>
        <trans-unit id="6076f97f545a7e444ef14f7c17630cb19e7b3a86" translate="yes" xml:space="preserve">
          <source>An abstract &lt;code&gt;Spliterator.OfLong&lt;/code&gt; that implements &lt;code&gt;trySplit&lt;/code&gt; to permit limited parallelism.</source>
          <target state="translated">制限された並列 &lt;code&gt;trySplit&lt;/code&gt; を許可するために &lt;code&gt;Spliterator.OfLong&lt;/code&gt; を実装する抽象Spliterator.OfLong。</target>
        </trans-unit>
        <trans-unit id="ec618e04c159f3233d9d95ebe020e1a095fa7e09" translate="yes" xml:space="preserve">
          <source>An abstract &lt;code&gt;Spliterator&lt;/code&gt; that implements &lt;code&gt;trySplit&lt;/code&gt; to permit limited parallelism.</source>
          <target state="translated">制限された並列 &lt;code&gt;trySplit&lt;/code&gt; を許可するために &lt;code&gt;Spliterator&lt;/code&gt; を実装する抽象Spliterator。</target>
        </trans-unit>
        <trans-unit id="6a82fde7ce199ff7c32be17308882626cda28d47" translate="yes" xml:space="preserve">
          <source>An abstract Action providing some convenience methods that may be useful in inserting HTML into an existing document.</source>
          <target state="translated">既存のドキュメントにHTMLを挿入する際に便利なメソッドを提供する抽象的なアクションです。</target>
        </trans-unit>
        <trans-unit id="2d692f066c7f569b5d0217e33654206d067b17b8" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving ancestor moved and resized events.</source>
          <target state="translated">先祖の移動およびサイズ変更イベントを受信するための抽象アダプタクラスです。</target>
        </trans-unit>
        <trans-unit id="8bfeac52f4190e98e7646b42dcac3237bbec9857" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving ancestor moved and resized events. The methods in this class are empty. This class exists as a convenience for creating listener objects.</source>
          <target state="translated">先祖の移動イベントやサイズ変更イベントを受信するための抽象アダプタクラスです。このクラスのメソッドは空です。このクラスは、リスナーオブジェクトを作成するための利便性のために存在します。</target>
        </trans-unit>
        <trans-unit id="ca3a22ed5cbfa7956410e5fed3aa3ab5abec1c99" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving component events.</source>
          <target state="translated">コンポーネントイベントを受信するための抽象アダプタクラスです。</target>
        </trans-unit>
        <trans-unit id="1224d2a27cc0f6e3fddd78f55e10941457456d6d" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving component events. The methods in this class are empty. This class exists as convenience for creating listener objects.</source>
          <target state="translated">コンポーネントのイベントを受信するための抽象アダプタクラスです。このクラスのメソッドは空です。このクラスは、リスナーオブジェクトを作成するための利便性のために存在します。</target>
        </trans-unit>
        <trans-unit id="4e156be78ee61b7572ddc3e36c6c52975c5857e4" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving container events.</source>
          <target state="translated">コンテナイベントを受信するための抽象アダプタクラスです。</target>
        </trans-unit>
        <trans-unit id="f7c0641d8f5f705873c41fa9c04fc4fb1871a7e4" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving container events. The methods in this class are empty. This class exists as convenience for creating listener objects.</source>
          <target state="translated">コンテナのイベントを受信するための抽象アダプタクラスです。このクラスのメソッドは空です。このクラスは、リスナーオブジェクトを作成するための利便性のために存在します。</target>
        </trans-unit>
        <trans-unit id="3aeee04e2ccac8b6d2ce2bd0637e436907126e39" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving drag source events.</source>
          <target state="translated">ドラッグソースのイベントを受信するための抽象アダプタクラスです。</target>
        </trans-unit>
        <trans-unit id="b1fbf4b6d20c833947749527bd8e84a49fb54eb5" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving drag source events. The methods in this class are empty. This class exists only as a convenience for creating listener objects.</source>
          <target state="translated">ドラッグソースのイベントを受信するための抽象アダプタクラスです。このクラスのメソッドは空です。このクラスは、リスナーオブジェクトを作成するための利便性のためだけに存在します。</target>
        </trans-unit>
        <trans-unit id="21202d558c8fcff4823278bde2e68e36bf15510b" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving drop target events.</source>
          <target state="translated">ドロップターゲットイベントを受信するための抽象アダプタクラスです。</target>
        </trans-unit>
        <trans-unit id="81a48cea800c58cc6b860e98cb38e5766fe10a51" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving drop target events. The methods in this class are empty. This class exists only as a convenience for creating listener objects.</source>
          <target state="translated">ドロップターゲットイベントを受信するための抽象アダプタクラスです。このクラスのメソッドは空です。このクラスは、リスナーオブジェクトを作成するための利便性のためだけに存在します。</target>
        </trans-unit>
        <trans-unit id="b3621f48ca850e4a91f321aefd98c17902f86905" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving internal frame events.</source>
          <target state="translated">内部フレームイベントを受信するための抽象アダプタクラスです。</target>
        </trans-unit>
        <trans-unit id="74027e0dc59af4ab914329967364369a2067e05e" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving internal frame events. The methods in this class are empty. This class exists as convenience for creating listener objects, and is functionally equivalent to the WindowAdapter class in the AWT.</source>
          <target state="translated">内部フレームイベントを受信するための抽象アダプタクラスです。このクラスのメソッドは空です。このクラスは,リスナーオブジェクトを作成するための利便性のために存在し,機能的には AWT の WindowAdapter クラスと同等です.</target>
        </trans-unit>
        <trans-unit id="db3dfa7e40e760a2317d0ffb62f73beb79d3373c" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving keyboard events.</source>
          <target state="translated">キーボードイベントを受信するための抽象アダプタクラスです。</target>
        </trans-unit>
        <trans-unit id="d41dae1b2bbc096ec0773757f69155a3f53a07ed" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving keyboard events. The methods in this class are empty. This class exists as convenience for creating listener objects.</source>
          <target state="translated">キーボードイベントを受信するための抽象アダプタクラスです。このクラスのメソッドは空です。このクラスは、リスナーオブジェクトを作成するための利便性のために存在します。</target>
        </trans-unit>
        <trans-unit id="0c5a5705c46440a889f881a2dacf5fb8a6ae0ab0" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving keyboard focus events.</source>
          <target state="translated">キーボードフォーカスイベントを受信するための抽象アダプタクラス。</target>
        </trans-unit>
        <trans-unit id="c7d838ebfdf60718c5e32be011278e838f5169f4" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving keyboard focus events. The methods in this class are empty. This class exists as convenience for creating listener objects.</source>
          <target state="translated">キーボードフォーカスイベントを受信するための抽象アダプタクラスです。このクラスのメソッドは空です。このクラスは、リスナーオブジェクトを作成するための利便性のために存在します。</target>
        </trans-unit>
        <trans-unit id="53cfb8eb5fcadb10d4fa1d68d3ebe2158ba703de" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving mouse events.</source>
          <target state="translated">マウスイベントを受信するための抽象アダプタクラスです。</target>
        </trans-unit>
        <trans-unit id="a6c2d2922922654cee2fb305c6fa1b985dc20acd" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving mouse events. The methods in this class are empty. This class exists as convenience for creating listener objects.</source>
          <target state="translated">マウスイベントを受信するための抽象アダプタクラスです。このクラスのメソッドは空です。このクラスは、リスナーオブジェクトを作成するための利便性のために存在します。</target>
        </trans-unit>
        <trans-unit id="1344e1c25560f474e44fe5b420f1d6ab62cb1e4e" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving mouse motion events.</source>
          <target state="translated">マウスのモーションイベントを受信するための抽象アダプタクラスです。</target>
        </trans-unit>
        <trans-unit id="16f6766afa5f2240fdd9018d55fee9ece624abc3" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving mouse motion events. The methods in this class are empty. This class exists as convenience for creating listener objects.</source>
          <target state="translated">マウスのモーションイベントを受信するための抽象アダプタクラスです。このクラスのメソッドは空です。このクラスは、リスナーオブジェクトを作成するための利便性のために存在します。</target>
        </trans-unit>
        <trans-unit id="1725ec70c594bf6143b68d0d3f69604ee103f163" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving print job events.</source>
          <target state="translated">印刷ジョブイベントを受信するための抽象アダプタクラス。</target>
        </trans-unit>
        <trans-unit id="c4b86f946931f8ebeb5bbc62389981f1250c17f9" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving print job events. The methods in this class are empty. This class exists as a convenience for creating listener objects. Extend this class to create a &lt;a href=&quot;printjobevent&quot;&gt;&lt;code&gt;PrintJobEvent&lt;/code&gt;&lt;/a&gt; listener and override the methods for the events of interest. Unlike the &lt;a href=&quot;../../../java/awt/event/componentlistener&quot;&gt;&lt;code&gt;ComponentListener&lt;/code&gt;&lt;/a&gt; interface, this abstract interface provides empty methods so that you only need to define the methods you need, rather than all of the methods.</source>
          <target state="translated">印刷ジョブイベントを受信するための抽象アダプタクラス。このクラスのメソッドは空です。このクラスは、リスナーオブジェクトを作成するための便利な機能として存在します。このクラスを拡張して&lt;a href=&quot;printjobevent&quot;&gt; &lt;code&gt;PrintJobEvent&lt;/code&gt; &lt;/a&gt;リスナーを作成し、対象のイベントのメソッドをオーバーライドします。&lt;a href=&quot;../../../java/awt/event/componentlistener&quot;&gt; &lt;code&gt;ComponentListener&lt;/code&gt; &lt;/a&gt;インターフェースとは異なり、この抽象インターフェースは空のメソッドを提供するため、すべてのメソッドではなく、必要なメソッドのみを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="4962c7979856b07aa0561bb05b61d8eb8f071ac0" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving print job events. The methods in this class are empty. This class exists as a convenience for creating listener objects. Extend this class to create a &lt;a href=&quot;printjobevent&quot;&gt;&lt;code&gt;PrintJobEvent&lt;/code&gt;&lt;/a&gt; listener and override the methods for the events of interest. Unlike the &lt;a href=&quot;/openjdk~8_gui/java/awt/event/componentlistener&quot;&gt;&lt;code&gt;ComponentListener&lt;/code&gt;&lt;/a&gt; interface, this abstract interface provides null methods so that you only need to define the methods you need, rather than all of the methods.</source>
          <target state="translated">印刷ジョブイベントを受け取るための抽象アダプタークラス。このクラスのメソッドは空です。このクラスは、リスナーオブジェクトを作成するための便宜として存在します。このクラスを拡張して&lt;a href=&quot;printjobevent&quot;&gt; &lt;code&gt;PrintJobEvent&lt;/code&gt; &lt;/a&gt;リスナーを作成し、対象のイベントのメソッドをオーバーライドします。&lt;a href=&quot;/openjdk~8_gui/java/awt/event/componentlistener&quot;&gt; &lt;code&gt;ComponentListener&lt;/code&gt; &lt;/a&gt;インターフェースとは異なり、この抽象インターフェースはnullメソッドを提供するため、すべてのメソッドではなく、必要なメソッドのみを定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="fda01820b10d0edc9d564fb3e812534d40c06b76" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving window events.</source>
          <target state="translated">ウィンドウイベントを受信するための抽象アダプタクラスです。</target>
        </trans-unit>
        <trans-unit id="07b786ea2218e6b570f94f2abc57a9f013d5b2dd" translate="yes" xml:space="preserve">
          <source>An abstract adapter class for receiving window events. The methods in this class are empty. This class exists as convenience for creating listener objects.</source>
          <target state="translated">ウィンドウイベントを受信するための抽象アダプタクラスです。このクラスのメソッドは空です。このクラスは、リスナーオブジェクトを作成するための利便性のために存在します。</target>
        </trans-unit>
        <trans-unit id="a80d551f3b11dff11019244e6d437ea72995aadb" translate="yes" xml:space="preserve">
          <source>An abstract annotation processor designed to be a convenient superclass for most concrete annotation processors.</source>
          <target state="translated">ほとんどの具象注釈プロセッサのための便利なスーパークラスとして設計された抽象注釈プロセッサ。</target>
        </trans-unit>
        <trans-unit id="f912b0a1cd697d8b801afff4e06fbb0cba9cd09c" translate="yes" xml:space="preserve">
          <source>An abstract annotation processor designed to be a convenient superclass for most concrete annotation processors. This class examines annotation values to compute the &lt;a href=&quot;#getSupportedOptions()&quot;&gt;options&lt;/a&gt;, &lt;a href=&quot;#getSupportedAnnotationTypes()&quot;&gt;annotation types&lt;/a&gt;, and &lt;a href=&quot;#getSupportedSourceVersion()&quot;&gt;source version&lt;/a&gt; supported by its subtypes.</source>
          <target state="translated">An abstract annotation processor designed to be a convenient superclass for most concrete annotation processors. This class examines annotation values to compute the &lt;a href=&quot;#getSupportedOptions()&quot;&gt;options&lt;/a&gt;, &lt;a href=&quot;#getSupportedAnnotationTypes()&quot;&gt;annotation types&lt;/a&gt;, and &lt;a href=&quot;#getSupportedSourceVersion()&quot;&gt;source version&lt;/a&gt; supported by its subtypes.</target>
        </trans-unit>
        <trans-unit id="e5702bfe60fe98c79f1e7d3ecec398a4727eeb65" translate="yes" xml:space="preserve">
          <source>An abstract annotation processor designed to be a convenient superclass for most concrete annotation processors. This class examines annotation values to compute the &lt;a href=&quot;abstractprocessor#getSupportedOptions--&quot;&gt;options&lt;/a&gt;, &lt;a href=&quot;abstractprocessor#getSupportedAnnotationTypes--&quot;&gt;annotation types&lt;/a&gt;, and &lt;a href=&quot;abstractprocessor#getSupportedSourceVersion--&quot;&gt;source version&lt;/a&gt; supported by its subtypes.</source>
          <target state="translated">ほとんどの具象アノテーションプロセッサにとって便利なスーパークラスになるように設計された抽象アノテーションプロセッサ。このクラスは、注釈値を調べて、そのサブタイプでサポートされている&lt;a href=&quot;abstractprocessor#getSupportedOptions--&quot;&gt;オプション&lt;/a&gt;、&lt;a href=&quot;abstractprocessor#getSupportedAnnotationTypes--&quot;&gt;注釈タイプ&lt;/a&gt;、および&lt;a href=&quot;abstractprocessor#getSupportedSourceVersion--&quot;&gt;ソースバージョン&lt;/a&gt;を計算します。</target>
        </trans-unit>
        <trans-unit id="009646b2f615da0514565567d20f108ce6f7a605" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide concrete implementations of the &lt;a href=&quot;../breakiterator&quot;&gt;&lt;code&gt;BreakIterator&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;a href=&quot;../breakiterator&quot;&gt; &lt;code&gt;BreakIterator&lt;/code&gt; &lt;/a&gt;クラスの具体的な実装を提供するサービスプロバイダーの抽象クラス。</target>
        </trans-unit>
        <trans-unit id="b764d8e0dd1b7d278f74e81b97506264a244b6bf" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide concrete implementations of the &lt;a href=&quot;../collator&quot;&gt;&lt;code&gt;Collator&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;a href=&quot;../collator&quot;&gt; &lt;code&gt;Collator&lt;/code&gt; &lt;/a&gt;クラスの具体的な実装を提供するサービスプロバイダーの抽象クラス。</target>
        </trans-unit>
        <trans-unit id="c571755642cefdb0beb7220506bf1152322336ff" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide concrete implementations of the &lt;a href=&quot;../dateformat&quot;&gt;&lt;code&gt;DateFormat&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;a href=&quot;../dateformat&quot;&gt; &lt;code&gt;DateFormat&lt;/code&gt; &lt;/a&gt;クラスの具体的な実装を提供するサービスプロバイダーの抽象クラス。</target>
        </trans-unit>
        <trans-unit id="8da2e0907e0b8e895f3071cd44922aefbb842799" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide concrete implementations of the &lt;a href=&quot;../numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;a href=&quot;../numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt;クラスの具体的な実装を提供するサービスプロバイダーの抽象クラス。</target>
        </trans-unit>
        <trans-unit id="3d0d85acde131d691ed85179b364e57876677358" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide concrete implementations of the &lt;a href=&quot;java/text/breakiterator&quot;&gt;&lt;code&gt;BreakIterator&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">An abstract class for service providers that provide concrete implementations of the &lt;a href=&quot;java/text/breakiterator&quot;&gt; &lt;code&gt;BreakIterator&lt;/code&gt; &lt;/a&gt; class.</target>
        </trans-unit>
        <trans-unit id="891f190655f8001c6271633bd1e74d549e67bac5" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide concrete implementations of the &lt;a href=&quot;java/text/collator&quot;&gt;&lt;code&gt;Collator&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">An abstract class for service providers that provide concrete implementations of the &lt;a href=&quot;java/text/collator&quot;&gt; &lt;code&gt;Collator&lt;/code&gt; &lt;/a&gt; class.</target>
        </trans-unit>
        <trans-unit id="983339fb296743d41173f61bc58b33825ab22b44" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide concrete implementations of the &lt;a href=&quot;java/text/dateformat&quot;&gt;&lt;code&gt;DateFormat&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">An abstract class for service providers that provide concrete implementations of the &lt;a href=&quot;java/text/dateformat&quot;&gt; &lt;code&gt;DateFormat&lt;/code&gt; &lt;/a&gt; class.</target>
        </trans-unit>
        <trans-unit id="82fa3acf94d5a8905f7b949c395fbbad59c6216d" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide concrete implementations of the &lt;a href=&quot;java/text/numberformat&quot;&gt;&lt;code&gt;NumberFormat&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">An abstract class for service providers that provide concrete implementations of the &lt;a href=&quot;java/text/numberformat&quot;&gt; &lt;code&gt;NumberFormat&lt;/code&gt; &lt;/a&gt; class.</target>
        </trans-unit>
        <trans-unit id="2c06f3dee5f3cf3918d735d064a37ba3b1c2f5ba" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide instances of the &lt;a href=&quot;../dateformatsymbols&quot;&gt;&lt;code&gt;DateFormatSymbols&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;a href=&quot;../dateformatsymbols&quot;&gt; &lt;code&gt;DateFormatSymbols&lt;/code&gt; &lt;/a&gt;クラスのインスタンスを提供するサービスプロバイダーの抽象クラス。</target>
        </trans-unit>
        <trans-unit id="ade1ba7e233bfd984e9f78cab1f28fbf7f6fa058" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide instances of the &lt;a href=&quot;../decimalformatsymbols&quot;&gt;&lt;code&gt;DecimalFormatSymbols&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;a href=&quot;../decimalformatsymbols&quot;&gt; &lt;code&gt;DecimalFormatSymbols&lt;/code&gt; &lt;/a&gt;クラスのインスタンスを提供するサービスプロバイダーの抽象クラス。</target>
        </trans-unit>
        <trans-unit id="6c53cb4214c22771daf4b1fa5445f875f5c93bff" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide instances of the &lt;a href=&quot;java/text/dateformatsymbols&quot;&gt;&lt;code&gt;DateFormatSymbols&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">An abstract class for service providers that provide instances of the &lt;a href=&quot;java/text/dateformatsymbols&quot;&gt; &lt;code&gt;DateFormatSymbols&lt;/code&gt; &lt;/a&gt; class.</target>
        </trans-unit>
        <trans-unit id="c7f5bf7f801c2ac8326340b7062fc54e5eaf879e" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide instances of the &lt;a href=&quot;java/text/decimalformatsymbols&quot;&gt;&lt;code&gt;DecimalFormatSymbols&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">An abstract class for service providers that provide instances of the &lt;a href=&quot;java/text/decimalformatsymbols&quot;&gt; &lt;code&gt;DecimalFormatSymbols&lt;/code&gt; &lt;/a&gt; class.</target>
        </trans-unit>
        <trans-unit id="690c2e1d1018a05068138aed006eaec9ccd9482c" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide locale-dependent &lt;a href=&quot;../calendar&quot;&gt;&lt;code&gt;Calendar&lt;/code&gt;&lt;/a&gt; parameters.</source>
          <target state="translated">ロケールに依存する&lt;a href=&quot;../calendar&quot;&gt; &lt;code&gt;Calendar&lt;/code&gt; &lt;/a&gt;パラメータを提供するサービスプロバイダの抽象クラス。</target>
        </trans-unit>
        <trans-unit id="e70f1bff70fd9287bbc13c67c447ef0a5046c16e" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide locale-dependent &lt;a href=&quot;java/util/calendar&quot;&gt;&lt;code&gt;Calendar&lt;/code&gt;&lt;/a&gt; parameters.</source>
          <target state="translated">An abstract class for service providers that provide locale-dependent &lt;a href=&quot;java/util/calendar&quot;&gt; &lt;code&gt;Calendar&lt;/code&gt; &lt;/a&gt; parameters.</target>
        </trans-unit>
        <trans-unit id="15118c33856866098bb2758cd887dfb0942afe80" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide localized currency symbols and display names for the &lt;a href=&quot;../currency&quot;&gt;&lt;code&gt;Currency&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">ローカライズされた通貨記号と&lt;a href=&quot;../currency&quot;&gt; &lt;code&gt;Currency&lt;/code&gt; &lt;/a&gt;クラスの表示名を提供するサービスプロバイダーの抽象クラス。</target>
        </trans-unit>
        <trans-unit id="cc07eaa2a48ef427eda6417dde036890767564e5" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide localized currency symbols and display names for the &lt;a href=&quot;../currency&quot;&gt;&lt;code&gt;Currency&lt;/code&gt;&lt;/a&gt; class. Note that currency symbols are considered names when determining behaviors described in the &lt;a href=&quot;localeserviceprovider&quot;&gt;&lt;code&gt;LocaleServiceProvider&lt;/code&gt;&lt;/a&gt; specification.</source>
          <target state="translated">ローカライズされた通貨記号と&lt;a href=&quot;../currency&quot;&gt; &lt;code&gt;Currency&lt;/code&gt; &lt;/a&gt;クラスの表示名を提供するサービスプロバイダーの抽象クラス。&lt;a href=&quot;localeserviceprovider&quot;&gt; &lt;code&gt;LocaleServiceProvider&lt;/code&gt; &lt;/a&gt;仕様で説明されている動作を決定する際、通貨記号は名前と見なされることに注意してください。</target>
        </trans-unit>
        <trans-unit id="00341cf5d7a0ceb10a82d56698f3720085ee36fd" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide localized currency symbols and display names for the &lt;a href=&quot;java/util/currency&quot;&gt;&lt;code&gt;Currency&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">An abstract class for service providers that provide localized currency symbols and display names for the &lt;a href=&quot;java/util/currency&quot;&gt; &lt;code&gt;Currency&lt;/code&gt; &lt;/a&gt; class.</target>
        </trans-unit>
        <trans-unit id="108fcb539c49163d7fbd58a0d0e0c4844a08df47" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide localized names for the &lt;a href=&quot;../locale&quot;&gt;&lt;code&gt;Locale&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;a href=&quot;../locale&quot;&gt; &lt;code&gt;Locale&lt;/code&gt; &lt;/a&gt;クラスのローカライズされた名前を提供するサービスプロバイダーの抽象クラス。</target>
        </trans-unit>
        <trans-unit id="a1f54ecc9f080a4165a5c8333226d771e04ea44b" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide localized names for the &lt;a href=&quot;java/util/locale&quot;&gt;&lt;code&gt;Locale&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">An abstract class for service providers that provide localized names for the &lt;a href=&quot;java/util/locale&quot;&gt; &lt;code&gt;Locale&lt;/code&gt; &lt;/a&gt; class.</target>
        </trans-unit>
        <trans-unit id="8b256820ed22b57293b577b7d443706b1918e366" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide localized string representations (display names) of &lt;code&gt;Calendar&lt;/code&gt; field values.</source>
          <target state="translated">&lt;code&gt;Calendar&lt;/code&gt; フィールド値のローカライズされた文字列表現（表示名）を提供するサービスプロバイダーの抽象クラス。</target>
        </trans-unit>
        <trans-unit id="0b978f1331fba49efd486686b9de04f717be9c60" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide localized time zone names for the &lt;a href=&quot;../timezone&quot;&gt;&lt;code&gt;TimeZone&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">&lt;a href=&quot;../timezone&quot;&gt; &lt;code&gt;TimeZone&lt;/code&gt; &lt;/a&gt;クラスのローカライズされたタイムゾーン名を提供するサービスプロバイダーの抽象クラス。</target>
        </trans-unit>
        <trans-unit id="8c365c21a94d38e596f7390a8282f3ab8868922b" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide localized time zone names for the &lt;a href=&quot;../timezone&quot;&gt;&lt;code&gt;TimeZone&lt;/code&gt;&lt;/a&gt; class. The localized time zone names available from the implementations of this class are also the source for the &lt;a href=&quot;../../text/dateformatsymbols#getZoneStrings()&quot;&gt;&lt;code&gt;DateFormatSymbols.getZoneStrings()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">An abstract class for service providers that provide localized time zone names for the &lt;a href=&quot;../timezone&quot;&gt; &lt;code&gt;TimeZone&lt;/code&gt; &lt;/a&gt; class. The localized time zone names available from the implementations of this class are also the source for the &lt;a href=&quot;../../text/dateformatsymbols#getZoneStrings()&quot;&gt; &lt;code&gt;DateFormatSymbols.getZoneStrings()&lt;/code&gt; &lt;/a&gt; method.</target>
        </trans-unit>
        <trans-unit id="b79e07cc378372a1f54085a60400b522e9d8e1bd" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide localized time zone names for the &lt;a href=&quot;../timezone&quot;&gt;&lt;code&gt;TimeZone&lt;/code&gt;&lt;/a&gt; class. The localized time zone names available from the implementations of this class are also the source for the &lt;a href=&quot;../../text/dateformatsymbols#getZoneStrings--&quot;&gt;&lt;code&gt;DateFormatSymbols.getZoneStrings()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;../timezone&quot;&gt; &lt;code&gt;TimeZone&lt;/code&gt; &lt;/a&gt;クラスのローカライズされたタイムゾーン名を提供するサービスプロバイダーの抽象クラス。このクラスの実装から利用可能なローカライズされたタイムゾーン名は、&lt;a href=&quot;../../text/dateformatsymbols#getZoneStrings--&quot;&gt; &lt;code&gt;DateFormatSymbols.getZoneStrings()&lt;/code&gt; &lt;/a&gt;メソッドのソースでもあります。</target>
        </trans-unit>
        <trans-unit id="d3733343af66ba8a789513cef322b2ac47eca612" translate="yes" xml:space="preserve">
          <source>An abstract class for service providers that provide localized time zone names for the &lt;a href=&quot;java/util/timezone&quot;&gt;&lt;code&gt;TimeZone&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">An abstract class for service providers that provide localized time zone names for the &lt;a href=&quot;java/util/timezone&quot;&gt; &lt;code&gt;TimeZone&lt;/code&gt; &lt;/a&gt; class.</target>
        </trans-unit>
        <trans-unit id="1f458cc8e441b88433ddd7e555407de6e6f4d215" translate="yes" xml:space="preserve">
          <source>An abstract class implementing the &lt;code&gt;ImageInputStream&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;ImageInputStream&lt;/code&gt; インターフェースを実装する抽象クラス。</target>
        </trans-unit>
        <trans-unit id="49343ad1181b51e3671145c945c3b03b831bb8b5" translate="yes" xml:space="preserve">
          <source>An abstract class implementing the &lt;code&gt;ImageInputStream&lt;/code&gt; interface. This class is designed to reduce the number of methods that must be implemented by subclasses.</source>
          <target state="translated">&lt;code&gt;ImageInputStream&lt;/code&gt; インターフェースを実装する抽象クラス。このクラスは、サブクラスで実装する必要のあるメソッドの数を減らすように設計されています。</target>
        </trans-unit>
        <trans-unit id="476d7596e90918fe5ce80c2b2b437360aa326e2a" translate="yes" xml:space="preserve">
          <source>An abstract class implementing the &lt;code&gt;ImageOutputStream&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;ImageOutputStream&lt;/code&gt; インターフェースを実装する抽象クラス。</target>
        </trans-unit>
        <trans-unit id="151c68ec149d25e9b76337087ed8e3618ec31ab9" translate="yes" xml:space="preserve">
          <source>An abstract class implementing the &lt;code&gt;ImageOutputStream&lt;/code&gt; interface. This class is designed to reduce the number of methods that must be implemented by subclasses.</source>
          <target state="translated">&lt;code&gt;ImageOutputStream&lt;/code&gt; インターフェースを実装する抽象クラス。このクラスは、サブクラスで実装する必要のあるメソッドの数を減らすように設計されています。</target>
        </trans-unit>
        <trans-unit id="581db72245ed89b297f1889b35b8f839fba56c57" translate="yes" xml:space="preserve">
          <source>An abstract class providing a &lt;code&gt;RowSet&lt;/code&gt; object with its basic functionality.</source>
          <target state="translated">An abstract class providing a &lt;code&gt;RowSet&lt;/code&gt; object with its basic functionality.</target>
        </trans-unit>
        <trans-unit id="c5fdd1129f49fb581bd0b43e65a79041140546f9" translate="yes" xml:space="preserve">
          <source>An abstract class providing a &lt;code&gt;RowSet&lt;/code&gt; object with its basic functionality. The basic functions include having properties and sending event notifications, which all JavaBeans&amp;trade; components must implement.</source>
          <target state="translated">An abstract class providing a &lt;code&gt;RowSet&lt;/code&gt; object with its basic functionality. The basic functions include having properties and sending event notifications, which all JavaBeans&amp;trade; components must implement.</target>
        </trans-unit>
        <trans-unit id="9f4ccadec92f3d6b659e6ebe5ca8e35b4179e48f" translate="yes" xml:space="preserve">
          <source>An abstract class that performs one or more checks on an &lt;code&gt;X509Certificate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;X509Certificate&lt;/code&gt; で 1つ以上のチェックを実行する抽象クラス。</target>
        </trans-unit>
        <trans-unit id="cdc1078a2fabb344fe1cd8c3c00c1d40b579e900" translate="yes" xml:space="preserve">
          <source>An abstract class to be extended by objects that represent metadata (non-image data) associated with images and streams.</source>
          <target state="translated">画像やストリームに関連付けられたメタデータ(非画像データ)を表現するオブジェクトによって拡張される抽象クラス。</target>
        </trans-unit>
        <trans-unit id="dd0ebcda77af4d0f30eb7405b6592dcce230b3fb" translate="yes" xml:space="preserve">
          <source>An abstract class to be extended by objects that represent metadata (non-image data) associated with images and streams. Plug-ins represent metadata using opaque, plug-in specific objects. These objects, however, provide the ability to access their internal information as a tree of &lt;code&gt;IIOMetadataNode&lt;/code&gt; objects that support the XML DOM interfaces as well as additional interfaces for storing non-textual data and retrieving information about legal data values. The format of such trees is plug-in dependent, but plug-ins may choose to support a plug-in neutral format described below. A single plug-in may support multiple metadata formats, whose names maybe determined by calling &lt;code&gt;getMetadataFormatNames&lt;/code&gt;. The plug-in may also support a single special format, referred to as the &quot;native&quot; format, which is designed to encode its metadata losslessly. This format will typically be designed specifically to work with a specific file format, so that images may be loaded and saved in the same format with no loss of metadata, but may be less useful for transferring metadata between an &lt;code&gt;ImageReader&lt;/code&gt; and an &lt;code&gt;ImageWriter&lt;/code&gt; for different image formats. To convert between two native formats as losslessly as the image file formats will allow, an &lt;code&gt;ImageTranscoder&lt;/code&gt; object must be used.</source>
          <target state="translated">画像とストリームに関連付けられたメタデータ（画像以外のデータ）を表すオブジェクトによって拡張される抽象クラス。プラグインは、不透明なプラグイン固有のオブジェクトを使用してメタデータを表します。ただし、これらのオブジェクトは、XML DOMインターフェースをサポートする &lt;code&gt;IIOMetadataNode&lt;/code&gt; オブジェクトのツリーとして内部情報にアクセスする機能と、非テキストデータを格納し、正当なデータ値に関する情報を取得するための追加インターフェースを提供します。このようなツリーのフォーマットはプラグインに依存しますが、プラグインは、以下で説明するプラグインニュートラルフォーマットをサポートすることを選択できます。単一のプラグインが複数のメタデータ形式をサポートする場合があり、その名前は &lt;code&gt;getMetadataFormatNames&lt;/code&gt; を呼び出すことによって決定される場合があります。。プラグインは、「ネイティブ」フォーマットと呼ばれる、メタデータをロスレスでエンコードするように設計された単一の特別なフォーマットもサポートする場合があります。この形式は通常、特定のファイル形式で機能するように特別に設計されているため、メタデータを失うことなく画像を同じ形式で読み込んで保存できますが、異なる画像の &lt;code&gt;ImageReader&lt;/code&gt; と &lt;code&gt;ImageWriter&lt;/code&gt; の間でメタデータを転送するのにはあまり役立ちません。フォーマット。2つのネイティブ形式を画像ファイル形式で可能な限りロスレスに &lt;code&gt;ImageTranscoder&lt;/code&gt; するには、ImageTranscoderオブジェクトを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="cf70a982e0aada9eae6b72062b66836fcd899863" translate="yes" xml:space="preserve">
          <source>An abstract class to perform lengthy GUI-interaction tasks in a background thread.</source>
          <target state="translated">バックグラウンドスレッドで長いGUIインタラクションタスクを実行するための抽象クラスです。</target>
        </trans-unit>
        <trans-unit id="19f4fe642093727034f0384a0eca0f7a8f4ae4ec" translate="yes" xml:space="preserve">
          <source>An abstract class to perform lengthy GUI-interaction tasks in a background thread. Several background threads can be used to execute such tasks. However, the exact strategy of choosing a thread for any particular &lt;code&gt;SwingWorker&lt;/code&gt; is unspecified and should not be relied on.</source>
          <target state="translated">An abstract class to perform lengthy GUI-interaction tasks in a background thread. Several background threads can be used to execute such tasks. However, the exact strategy of choosing a thread for any particular &lt;code&gt;SwingWorker&lt;/code&gt; is unspecified and should not be relied on.</target>
        </trans-unit>
        <trans-unit id="ca8e76b220adb752c9555d8e37026a909fe93c29" translate="yes" xml:space="preserve">
          <source>An abstract class which initiates and executes a print job.</source>
          <target state="translated">プリントジョブを開始して実行する抽象クラスです。</target>
        </trans-unit>
        <trans-unit id="5c676543206e055be60b898ae660b8bb64d66ed6" translate="yes" xml:space="preserve">
          <source>An abstract class which initiates and executes a print job. It provides access to a print graphics object which renders to an appropriate print device.</source>
          <target state="translated">印刷ジョブを開始して実行する抽象クラスです。適切な印刷デバイスにレンダリングする印刷グラフィックスオブジェクトへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="04da8c842b3f18e42e336f28bee550671b36a253" translate="yes" xml:space="preserve">
          <source>An abstract class which provides a print graphics context for a page.</source>
          <target state="translated">ページの印刷グラフィックスのコンテキストを提供する抽象クラス.</target>
        </trans-unit>
        <trans-unit id="1dfe431faa6adf161406876fe3d696931fb27142" translate="yes" xml:space="preserve">
          <source>An abstract implementation of &lt;code&gt;UndoableEdit&lt;/code&gt;, implementing simple responses to all boolean methods in that interface.</source>
          <target state="translated">An abstract implementation of &lt;code&gt;UndoableEdit&lt;/code&gt; , implementing simple responses to all boolean methods in that interface.</target>
        </trans-unit>
        <trans-unit id="fbc238f52e9b0369d8d6feac585f532fe3c79392" translate="yes" xml:space="preserve">
          <source>An abstract implementation of a calendar system, used to organize and identify dates.</source>
          <target state="translated">カレンダーシステムの抽象的な実装で、日付を整理して識別するために使用されます。</target>
        </trans-unit>
        <trans-unit id="7b673aa232f472e900373570c4b210073bade5b3" translate="yes" xml:space="preserve">
          <source>An abstract pathname denoting a newly-created empty file</source>
          <target state="translated">新しく作成された空のファイルを表す抽象パス名</target>
        </trans-unit>
        <trans-unit id="4aa47b72c674eca8830def8ce681627d481a9c32" translate="yes" xml:space="preserve">
          <source>An abstract representation of a &lt;code&gt;Data&lt;/code&gt; type containing a node-set.</source>
          <target state="translated">An abstract representation of a &lt;code&gt;Data&lt;/code&gt; type containing a node-set.</target>
        </trans-unit>
        <trans-unit id="ea4271e4bbe1479d8c1869fa59e4d26f3bf4f83b" translate="yes" xml:space="preserve">
          <source>An abstract representation of a &lt;code&gt;Data&lt;/code&gt; type containing a node-set. The type (class) and ordering of the nodes contained in the set are not defined by this class; instead that behavior should be defined by &lt;code&gt;NodeSetData&lt;/code&gt; subclasses.</source>
          <target state="translated">An abstract representation of a &lt;code&gt;Data&lt;/code&gt; type containing a node-set. The type (class) and ordering of the nodes contained in the set are not defined by this class; instead that behavior should be defined by &lt;code&gt;NodeSetData&lt;/code&gt; subclasses.</target>
        </trans-unit>
        <trans-unit id="494a6c486577773915372a9639b81c3c04ab3e43" translate="yes" xml:space="preserve">
          <source>An abstract representation of an algorithm defined in the XML Security specifications.</source>
          <target state="translated">XML セキュリティ仕様で定義されているアルゴリズムの抽象表現。</target>
        </trans-unit>
        <trans-unit id="cee1d6920bb6616be4b679ca8e4a03353f68b6f5" translate="yes" xml:space="preserve">
          <source>An abstract representation of an algorithm defined in the XML Security specifications. Subclasses represent specific types of XML security algorithms, such as a &lt;a href=&quot;dsig/transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">An abstract representation of an algorithm defined in the XML Security specifications. Subclasses represent specific types of XML security algorithms, such as a &lt;a href=&quot;dsig/transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="83b31a7b61002c7d0f84ed3f8d96a8a46141936d" translate="yes" xml:space="preserve">
          <source>An abstract representation of file and directory pathnames.</source>
          <target state="translated">ファイルとディレクトリのパス名を抽象的に表現したもの。</target>
        </trans-unit>
        <trans-unit id="0646f6422a002e7ffe51d29120e433fddeccfd3e" translate="yes" xml:space="preserve">
          <source>An abstract representation of the result of dereferencing a &lt;a href=&quot;urireference&quot;&gt;&lt;code&gt;URIReference&lt;/code&gt;&lt;/a&gt; or the input/output of subsequent &lt;a href=&quot;dsig/transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt;s.</source>
          <target state="translated">An abstract representation of the result of dereferencing a &lt;a href=&quot;urireference&quot;&gt; &lt;code&gt;URIReference&lt;/code&gt; &lt;/a&gt; or the input/output of subsequent &lt;a href=&quot;dsig/transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt;s.</target>
        </trans-unit>
        <trans-unit id="32ac5670eac35de92867a7c9a2546799d04cbeef" translate="yes" xml:space="preserve">
          <source>An abstract representation of the result of dereferencing a &lt;a href=&quot;urireference&quot;&gt;&lt;code&gt;URIReference&lt;/code&gt;&lt;/a&gt; or the input/output of subsequent &lt;a href=&quot;dsig/transform&quot;&gt;&lt;code&gt;Transform&lt;/code&gt;&lt;/a&gt;s. The primary purpose of this interface is to group and provide type safety for all &lt;code&gt;Data&lt;/code&gt; subtypes.</source>
          <target state="translated">An abstract representation of the result of dereferencing a &lt;a href=&quot;urireference&quot;&gt; &lt;code&gt;URIReference&lt;/code&gt; &lt;/a&gt; or the input/output of subsequent &lt;a href=&quot;dsig/transform&quot;&gt; &lt;code&gt;Transform&lt;/code&gt; &lt;/a&gt;s. The primary purpose of this interface is to group and provide type safety for all &lt;code&gt;Data&lt;/code&gt; subtypes.</target>
        </trans-unit>
        <trans-unit id="e0f679c55894b5892fa60675f66c243d1d8b3ec2" translate="yes" xml:space="preserve">
          <source>An abstract superclass for encoding and writing images.</source>
          <target state="translated">画像をエンコードして書き込むための抽象的なスーパークラスです。</target>
        </trans-unit>
        <trans-unit id="48c806f3edb65492962375f9ceccf41f068921f8" translate="yes" xml:space="preserve">
          <source>An abstract superclass for encoding and writing images. This class must be subclassed by classes that write out images in the context of the Java Image I/O framework.</source>
          <target state="translated">画像をエンコードして書き出すための抽象的なスーパークラス。このクラスは、Java Image I/O フレームワークのコンテキストで画像を書き出すクラスによってサブクラス化されなければなりません。</target>
        </trans-unit>
        <trans-unit id="d1c16b9886fcbee0d8fe48ece5dfb8fb96ec7a5b" translate="yes" xml:space="preserve">
          <source>An abstract superclass for parsing and decoding of images.</source>
          <target state="translated">画像の解析とデコードのための抽象的なスーパークラス.</target>
        </trans-unit>
        <trans-unit id="7d0189d2489db5e3511b17ed06bfc874d45e8dc5" translate="yes" xml:space="preserve">
          <source>An abstract superclass for parsing and decoding of images. This class must be subclassed by classes that read in images in the context of the Java Image I/O framework.</source>
          <target state="translated">画像の解析とデコードのための抽象的なスーパークラスです。このクラスは、Java Image I/O フレームワークのコンテキストで画像を読み込むクラスによってサブクラス化されなければなりません。</target>
        </trans-unit>
        <trans-unit id="c596146e8da9e7a6ca55d13ebcccbd3439a4fcf9" translate="yes" xml:space="preserve">
          <source>An abstract wrapper class for an &lt;code&gt;EventListener&lt;/code&gt; class which associates a set of additional parameters with the listener.</source>
          <target state="translated">追加パラメーターのセットをリスナーに関連付ける &lt;code&gt;EventListener&lt;/code&gt; クラスの抽象ラッパークラス。</target>
        </trans-unit>
        <trans-unit id="6da126755702abead0fc328ffed9b176b2437d17" translate="yes" xml:space="preserve">
          <source>An abstract wrapper class for an &lt;code&gt;EventListener&lt;/code&gt; class which associates a set of additional parameters with the listener. Subclasses must provide the storage and accessor methods for the additional arguments or parameters.</source>
          <target state="translated">追加パラメーターのセットをリスナーに関連付ける &lt;code&gt;EventListener&lt;/code&gt; クラスの抽象ラッパークラス。サブクラスは、追加の引数またはパラメーター用のストレージおよびアクセサーメソッドを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="7078ed120dbbd2dd1dbe2cc16f46dc2d5971e895" translate="yes" xml:space="preserve">
          <source>An action that assumes it's being fired on a JEditorPane with a StyledEditorKit (or subclass) installed.</source>
          <target state="translated">StyledEditorKit (またはサブクラス)がインストールされている JEditorPane で実行されていることを前提としたアクション。</target>
        </trans-unit>
        <trans-unit id="4cc79af7a96a1de7b4bf7e09747a19fd5cbdf592" translate="yes" xml:space="preserve">
          <source>An action that assumes it's being fired on a JEditorPane with a StyledEditorKit (or subclass) installed. This has some convenience methods for causing character or paragraph level attribute changes. The convenience methods will throw an IllegalArgumentException if the assumption of a StyledDocument, a JEditorPane, or a StyledEditorKit fail to be true.</source>
          <target state="translated">StyledEditorKit (またはサブクラス)がインストールされた JEditorPane 上で実行されていることを前提としたアクション。これには、文字や段落レベルの属性変更を行うための便利なメソッドがあります。便利なメソッドは、StyledDocument、JEditorPane、またはStyledEditorKitの仮定が真でない場合にIllegalArgumentExceptionをスローします。</target>
        </trans-unit>
        <trans-unit id="a5b8521c4bb18bf7a869c1c71aac429aaef0c884" translate="yes" xml:space="preserve">
          <source>An action to be performed in response to parsing a tag.</source>
          <target state="translated">タグの解析に応答して実行されるアクション。</target>
        </trans-unit>
        <trans-unit id="4f99e765da5328ec74a22237e78ad3368f29ed34" translate="yes" xml:space="preserve">
          <source>An action to be performed in response to parsing a tag. This allows customization of how each tag is handled and avoids a large switch statement.</source>
          <target state="translated">タグの解析に応じて実行されるアクション。これにより、各タグがどのように処理されるかをカスタマイズすることができ、大きな switch 文を避けることができます。</target>
        </trans-unit>
        <trans-unit id="6032d8cc5c1fe12fd9e0e8ecb153c9c30d2684e5" translate="yes" xml:space="preserve">
          <source>An action to set foreground color.</source>
          <target state="translated">前景色を設定するアクション。</target>
        </trans-unit>
        <trans-unit id="df85bd5c4c3d45f86e93e08f6aaa83530af214ce" translate="yes" xml:space="preserve">
          <source>An action to set foreground color. This sets the &lt;code&gt;StyleConstants.Foreground&lt;/code&gt; attribute for the currently selected range of the target JEditorPane. This is done by calling &lt;code&gt;StyledDocument.setCharacterAttributes&lt;/code&gt; on the styled document associated with the target JEditorPane.</source>
          <target state="translated">An action to set foreground color. This sets the &lt;code&gt;StyleConstants.Foreground&lt;/code&gt; attribute for the currently selected range of the target JEditorPane. This is done by calling &lt;code&gt;StyledDocument.setCharacterAttributes&lt;/code&gt; on the styled document associated with the target JEditorPane.</target>
        </trans-unit>
        <trans-unit id="c646f38d99721f3a0502debfd4a1f6286e7e0149" translate="yes" xml:space="preserve">
          <source>An action to set paragraph alignment.</source>
          <target state="translated">段落の整列を設定するアクション。</target>
        </trans-unit>
        <trans-unit id="ab4eb01c65a0d85f3bcdae7426f8c7a1c261795d" translate="yes" xml:space="preserve">
          <source>An action to set paragraph alignment. This sets the &lt;code&gt;StyleConstants.Alignment&lt;/code&gt; attribute for the currently selected range of the target JEditorPane. This is done by calling &lt;code&gt;StyledDocument.setParagraphAttributes&lt;/code&gt; on the styled document associated with the target JEditorPane.</source>
          <target state="translated">An action to set paragraph alignment. This sets the &lt;code&gt;StyleConstants.Alignment&lt;/code&gt; attribute for the currently selected range of the target JEditorPane. This is done by calling &lt;code&gt;StyledDocument.setParagraphAttributes&lt;/code&gt; on the styled document associated with the target JEditorPane.</target>
        </trans-unit>
        <trans-unit id="94356ea789a9c5c5eb3baa5b626b119a927a7b6c" translate="yes" xml:space="preserve">
          <source>An action to set the font family in the associated JEditorPane.</source>
          <target state="translated">関連するJEditorPaneのフォントファミリを設定するアクション。</target>
        </trans-unit>
        <trans-unit id="a40f2a4349ac038ba1ad7fa74bee679b141c86c7" translate="yes" xml:space="preserve">
          <source>An action to set the font family in the associated JEditorPane. This will use the family specified as the command string on the ActionEvent if there is one, otherwise the family that was initialized with will be used.</source>
          <target state="translated">関連するJEditorPaneのフォントファミリを設定するアクション。ActionEventのコマンド文字列として指定されたフォントファミリがあればそれを使用し、なければ初期化されたファミリが使用されます。</target>
        </trans-unit>
        <trans-unit id="61ca44f68ff9d90ad154255a6ea4cedddffc5d51" translate="yes" xml:space="preserve">
          <source>An action to set the font size in the associated JEditorPane.</source>
          <target state="translated">関連するJEditorPaneのフォントサイズを設定するアクション。</target>
        </trans-unit>
        <trans-unit id="8ff8be4e56dfd0adafb3f51aa2d15867a8926758" translate="yes" xml:space="preserve">
          <source>An action to set the font size in the associated JEditorPane. This will use the size specified as the command string on the ActionEvent if there is one, otherwise the size that was initialized with will be used.</source>
          <target state="translated">関連するJEditorPaneのフォントサイズを設定するアクション。ActionEventのコマンド文字列として指定されたサイズがあればそれを使用し、なければ初期化されたサイズが使用されます。</target>
        </trans-unit>
        <trans-unit id="d5ac5013e9a52fc37cba10d88264c0bf69a39d8e" translate="yes" xml:space="preserve">
          <source>An action to toggle the bold attribute.</source>
          <target state="translated">太字属性を切り替えるアクション。</target>
        </trans-unit>
        <trans-unit id="9d74cc56a019524d0142fd991432c5a707a97bbc" translate="yes" xml:space="preserve">
          <source>An action to toggle the italic attribute.</source>
          <target state="translated">イタリック属性を切り替えるアクション。</target>
        </trans-unit>
        <trans-unit id="0327f3bff94038d50ba3ba62187a0ae4039d6b0f" translate="yes" xml:space="preserve">
          <source>An action to toggle the underline attribute.</source>
          <target state="translated">下線属性を切り替えるアクション。</target>
        </trans-unit>
        <trans-unit id="0fdc8c21b5dcef321c426dbd464dc51a4cf035a8" translate="yes" xml:space="preserve">
          <source>An action which causes a component to execute its default action.</source>
          <target state="translated">コンポーネントにデフォルトのアクションを実行させるアクション。</target>
        </trans-unit>
        <trans-unit id="34159b87ca741398b04228ed9addd1c08926e3c0" translate="yes" xml:space="preserve">
          <source>An action which causes a popup to become visible if it is hidden and hidden if it is visible.</source>
          <target state="translated">ポップアップが非表示の場合は表示され、表示されている場合は非表示になるようにするアクション。</target>
        </trans-unit>
        <trans-unit id="32c75c5324482d0e906662517c67de8bd78226d1" translate="yes" xml:space="preserve">
          <source>An action which causes a tree node to collapse if expanded and expand if collapsed.</source>
          <target state="translated">ツリーノードが展開された場合は折りたたまれ、折りたたまれた場合は展開されるようにするアクション。</target>
        </trans-unit>
        <trans-unit id="26c59d2eccd45f67377a3a9d440e7a4c3a518eca" translate="yes" xml:space="preserve">
          <source>An action which decrements a value.</source>
          <target state="translated">値をデクリメントするアクション。</target>
        </trans-unit>
        <trans-unit id="d50f5c2570299ac98df617a286c44ae20efea8cb" translate="yes" xml:space="preserve">
          <source>An action which increments a value.</source>
          <target state="translated">値をインクリメントするアクション。</target>
        </trans-unit>
        <trans-unit id="722d485e9e5393ee4ba81b00370dec0f993b8ccb" translate="yes" xml:space="preserve">
          <source>An activating mouse event.</source>
          <target state="translated">マウスのアクティブ化イベント。</target>
        </trans-unit>
        <trans-unit id="858524d80338de0f4f77d0daea426fe306b79cea" translate="yes" xml:space="preserve">
          <source>An activation descriptor contains the information necessary to activate an object:</source>
          <target state="translated">活性化記述子には、オブジェクトを活性化するために必要な情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="e4f528286b3a7a3b5eee59f0e9a4bb6487e35029" translate="yes" xml:space="preserve">
          <source>An activation descriptor contains the information necessary to activate an object: the object's group identifier, the object's fully-qualified class name, the object's code location (the location of the class), a codebase URL path, the object's restart &quot;mode&quot;, and, a &quot;marshalled&quot; object that can contain object specific initialization data.</source>
          <target state="translated">アクティブ化記述子には、オブジェクトをアクティブ化するために必要な情報が含まれています:オブジェクトのグループ識別子、オブジェクトの完全修飾クラス名、オブジェクトのコード位置(クラスの位置)、コードベースのURLパス、オブジェクトの再起動「モード」、そして、オブジェクト固有の初期化データを含むことができる「マーシャルされた」オブジェクトです。</target>
        </trans-unit>
        <trans-unit id="a1a61b81cb57798e126c7827839997c25882e964" translate="yes" xml:space="preserve">
          <source>An activation group calls its monitor's &lt;code&gt;inactiveObject&lt;/code&gt; method when an object in its group becomes inactive (deactivates).</source>
          <target state="translated">An activation group calls its monitor's &lt;code&gt;inactiveObject&lt;/code&gt; method when an object in its group becomes inactive (deactivates).</target>
        </trans-unit>
        <trans-unit id="9a4274190220193af229fd53e269f31fe5956ce7" translate="yes" xml:space="preserve">
          <source>An activation group calls its monitor's &lt;code&gt;inactiveObject&lt;/code&gt; method when an object in its group becomes inactive (deactivates). An activation group discovers that an object (that it participated in activating) in its VM is no longer active, via calls to the activation group's &lt;code&gt;inactiveObject&lt;/code&gt; method.</source>
          <target state="translated">An activation group calls its monitor's &lt;code&gt;inactiveObject&lt;/code&gt; method when an object in its group becomes inactive (deactivates). An activation group discovers that an object (that it participated in activating) in its VM is no longer active, via calls to the activation group's &lt;code&gt;inactiveObject&lt;/code&gt; method.</target>
        </trans-unit>
        <trans-unit id="ee15e20b4f052542fd54f35aaca29e37fceb2d5b" translate="yes" xml:space="preserve">
          <source>An activation group descriptor contains the information necessary to create/recreate an activation group in which to activate objects.</source>
          <target state="translated">活性化グループ記述子には、オブジェクトを活性化する活性化グループを作成/作成するために必要な情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="30b6561a0a8c53d912608beee865a0d82889d002" translate="yes" xml:space="preserve">
          <source>An activation group descriptor contains the information necessary to create/recreate an activation group in which to activate objects. Such a descriptor contains:</source>
          <target state="translated">活性化グループ記述子には、オブジェクトを活性化する活性化グループの作成/作成に必要な情報が含まれています。このような記述子には、以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="c67642b7c6aeefd52e88906d9610975cb3319394" translate="yes" xml:space="preserve">
          <source>An activation identifier for an object can be obtained by registering an object with the activation system. Registration is accomplished in a few ways:</source>
          <target state="translated">オブジェクトの活性化識別子は、オブジェクトを活性化システムに登録することで得られます。登録にはいくつかの方法があります。</target>
        </trans-unit>
        <trans-unit id="903aeff3c4652a2a5a486e6c3b2d7fce139c6346" translate="yes" xml:space="preserve">
          <source>An activation of a toplevel window.</source>
          <target state="translated">トップレベルウィンドウの活性化。</target>
        </trans-unit>
        <trans-unit id="d94a3f9d3227d90ee8b91c40a4260e9655fe4e8c" translate="yes" xml:space="preserve">
          <source>An adapter class that implements ImageProducer to allow the asynchronous production of a RenderableImage.</source>
          <target state="translated">RenderableImage を非同期で作成するための ImageProducer を実装したアダプタクラスです。</target>
        </trans-unit>
        <trans-unit id="1ae1821543e910ad9f88330e3e5be1aaadddc7cb" translate="yes" xml:space="preserve">
          <source>An adapter class that implements ImageProducer to allow the asynchronous production of a RenderableImage. The size of the ImageConsumer is determined by the scale factor of the usr2dev transform in the RenderContext. If the RenderContext is null, the default rendering of the RenderableImage is used. This class implements an asynchronous production that produces the image in one thread at one resolution. This class may be subclassed to implement versions that will render the image using several threads. These threads could render either the same image at progressively better quality, or different sections of the image at a single resolution.</source>
          <target state="translated">RenderableImage を非同期で作成できるようにする ImageProducer を実装したアダプタクラスです。ImageConsumer のサイズは、RenderContext の usr2dev 変換のスケールファクタによって決まります。RenderContext が null の場合は、デフォルトの RenderableImage のレンダリングが使用されます。このクラスは、1 つのスレッドで 1 つの解像度で画像を生成する非同期プロダクションを実装しています。このクラスをサブクラス化して、複数のスレッドを使って画像をレンダリングするバージョンを実装することもできます。これらのスレッドは、同じ画像をより良い品質で段階的にレンダリングしたり、異なる部分を一つの解像度でレンダリングしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="b1dd37ad5be3fe930a5d95606563fff64dc33825" translate="yes" xml:space="preserve">
          <source>An additional form (&lt;em&gt;compose&lt;/em&gt;) allows the construction of computation pipelines from functions returning completion stages.</source>
          <target state="translated">An additional form (&lt;em&gt;compose&lt;/em&gt;) allows the construction of computation pipelines from functions returning completion stages.</target>
        </trans-unit>
        <trans-unit id="e6835869da5450c1e88110edee6f20f3541317be" translate="yes" xml:space="preserve">
          <source>An agent JAR file may have both the &lt;code&gt;Premain-Class&lt;/code&gt; and &lt;code&gt;
 Agent-Class&lt;/code&gt; attributes present in the manifest. When the agent is started on the command-line using the &lt;code&gt;-javaagent&lt;/code&gt; option then the &lt;code&gt;
 Premain-Class&lt;/code&gt; attribute specifies the name of the agent class and the &lt;code&gt;
 Agent-Class&lt;/code&gt; attribute is ignored. Similarly, if the agent is started sometime after the VM has started, then the &lt;code&gt;Agent-Class&lt;/code&gt; attribute specifies the name of the agent class (the value of &lt;code&gt;Premain-Class&lt;/code&gt; attribute is ignored).</source>
          <target state="translated">An agent JAR file may have both the &lt;code&gt;Premain-Class&lt;/code&gt; and &lt;code&gt; Agent-Class&lt;/code&gt; attributes present in the manifest. When the agent is started on the command-line using the &lt;code&gt;-javaagent&lt;/code&gt; option then the &lt;code&gt; Premain-Class&lt;/code&gt; attribute specifies the name of the agent class and the &lt;code&gt; Agent-Class&lt;/code&gt; attribute is ignored. Similarly, if the agent is started sometime after the VM has started, then the &lt;code&gt;Agent-Class&lt;/code&gt; attribute specifies the name of the agent class (the value of &lt;code&gt;Premain-Class&lt;/code&gt; attribute is ignored).</target>
        </trans-unit>
        <trans-unit id="b8c27a04054143f6b73e6ce3fcbc0723423a9296" translate="yes" xml:space="preserve">
          <source>An agent is deployed as a JAR file. An attribute in the JAR file manifest specifies the agent class which will be loaded to start the agent. Agents can be started in several ways:</source>
          <target state="translated">エージェントは JAR ファイルとしてデプロイされます。JAR ファイルのマニフェストの属性は、エージェントを起動するためにロードされるエージェントクラスを指定します。エージェントはいくつかの方法で起動することができます。</target>
        </trans-unit>
        <trans-unit id="5515b103482b5e4bab56c41dff3f37fe398a8ef0" translate="yes" xml:space="preserve">
          <source>An agent may be packaged with an application in an executable JAR file.</source>
          <target state="translated">エージェントは、実行可能なJARファイル内のアプリケーションと一緒にパッケージ化されている場合があります。</target>
        </trans-unit>
        <trans-unit id="87d9498487ae22638db2c1507e7adfbd2ab35666" translate="yes" xml:space="preserve">
          <source>An agent provides an implementation of this interface in order to transform class files.</source>
          <target state="translated">エージェントは、クラスファイルを変換するために、このインターフェイスの実装を提供します。</target>
        </trans-unit>
        <trans-unit id="87d0888fa7c65da6fccada4341b5a807b948902e" translate="yes" xml:space="preserve">
          <source>An agent provides an implementation of this interface in order to transform class files. The transformation occurs before the class is defined by the JVM.</source>
          <target state="translated">エージェントは、クラスファイルを変換するために、このインタフェースの実装を提供します。変換は、クラスがJVMによって定義される前に行われます。</target>
        </trans-unit>
        <trans-unit id="604cb2d9140d6a6048804ee6cdf5bc9c601f218a" translate="yes" xml:space="preserve">
          <source>An algorithm parameter specification is a transparent representation of the sets of parameters used with an algorithm. This package contains algorithm parameter specifications for parameters used with the Diffie-Hellman, DES, Triple DES, PBE, RC2 and RC5 algorithms.</source>
          <target state="translated">アルゴリズムのパラメータ仕様は、アルゴリズムで使用されるパラメータのセットを透過的に表現したものです。本パッケージには、Diffie-Hellman、DES、Triple DES、PBE、RC2、RC5 アルゴリズムで使用されるパラメータのアルゴリズムパラメータ仕様が含まれています。</target>
        </trans-unit>
        <trans-unit id="053397605f9db7fc2042b2238d7785c0706e1c43" translate="yes" xml:space="preserve">
          <source>An algorithm parameter specification is a transparent representation of the sets of parameters used with an algorithm. This package contains an algorithm parameter specification for parameters used with the DSA algorithm.</source>
          <target state="translated">アルゴリズムパラメータ仕様は、アルゴリズムで使用されるパラメータのセットを透過的に表現したものです。本パッケージには、DSA アルゴリズムで使用されるパラメータのアルゴリズム・パラメータ仕様が含まれます。</target>
        </trans-unit>
        <trans-unit id="28906731f6b4142914e4f12f0681eace09aa7c09" translate="yes" xml:space="preserve">
          <source>An alias for &quot;two sided long edge&quot; (see &lt;a href=&quot;#TWO_SIDED_LONG_EDGE&quot;&gt;&lt;code&gt;TWO_SIDED_LONG_EDGE&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">An alias for &quot;two sided long edge&quot; (see &lt;a href=&quot;#TWO_SIDED_LONG_EDGE&quot;&gt; &lt;code&gt;TWO_SIDED_LONG_EDGE&lt;/code&gt; &lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="ef9af4ca138f115407607c3b7d84581e03c84cb3" translate="yes" xml:space="preserve">
          <source>An alias for &quot;two sided long edge&quot; (see &lt;a href=&quot;sides#TWO_SIDED_LONG_EDGE&quot;&gt;&lt;code&gt;TWO_SIDED_LONG_EDGE&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">「両側長辺」のエイリアス（&lt;a href=&quot;sides#TWO_SIDED_LONG_EDGE&quot;&gt; &lt;code&gt;TWO_SIDED_LONG_EDGE&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="f38855f16819ee42766d3f3ecee15ba7b88f07ef" translate="yes" xml:space="preserve">
          <source>An alias for &quot;two sided short edge&quot; (see &lt;a href=&quot;#TWO_SIDED_SHORT_EDGE&quot;&gt;&lt;code&gt;TWO_SIDED_SHORT_EDGE&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">An alias for &quot;two sided short edge&quot; (see &lt;a href=&quot;#TWO_SIDED_SHORT_EDGE&quot;&gt; &lt;code&gt;TWO_SIDED_SHORT_EDGE&lt;/code&gt; &lt;/a&gt;).</target>
        </trans-unit>
        <trans-unit id="8b37d6159a9bdd97f7d3c1960ee5753f16618b62" translate="yes" xml:space="preserve">
          <source>An alias for &quot;two sided short edge&quot; (see &lt;a href=&quot;sides#TWO_SIDED_SHORT_EDGE&quot;&gt;&lt;code&gt;TWO_SIDED_SHORT_EDGE&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">「両側短辺」のエイリアス（&lt;a href=&quot;sides#TWO_SIDED_SHORT_EDGE&quot;&gt; &lt;code&gt;TWO_SIDED_SHORT_EDGE&lt;/code&gt; を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="28a31fc62271d4750f5cebe34da8756ea636cd8f" translate="yes" xml:space="preserve">
          <source>An alias for INVITE_ENVELOPE.</source>
          <target state="translated">INVITE_ENVELOPEのエイリアス。</target>
        </trans-unit>
        <trans-unit id="e967535bab795790cf49131d85b755dffb6bcda9" translate="yes" xml:space="preserve">
          <source>An alias for INVOICE.</source>
          <target state="translated">INVOICEの別名。</target>
        </trans-unit>
        <trans-unit id="48ba7bee13e55f2fa5aa12477f54dd54bc9ec048" translate="yes" xml:space="preserve">
          <source>An alias for ISO_A0.</source>
          <target state="translated">ISO_A0 のエイリアス。</target>
        </trans-unit>
        <trans-unit id="af76575ac7764b1eec9dfa017aa4a07b28a07dab" translate="yes" xml:space="preserve">
          <source>An alias for ISO_A1.</source>
          <target state="translated">ISO_A1のエイリアス。</target>
        </trans-unit>
        <trans-unit id="e1bcdcd51abac490b998f58cbb49b21015f7ebb0" translate="yes" xml:space="preserve">
          <source>An alias for ISO_A10.</source>
          <target state="translated">ISO_A10のエイリアス。</target>
        </trans-unit>
        <trans-unit id="425899ad7ceb8b7ec11ba8c098cc5469b13067f3" translate="yes" xml:space="preserve">
          <source>An alias for ISO_A2.</source>
          <target state="translated">ISO_A2 のエイリアス。</target>
        </trans-unit>
        <trans-unit id="8ee9b8de78758c0d15543bde859424a3b62579e0" translate="yes" xml:space="preserve">
          <source>An alias for ISO_A3.</source>
          <target state="translated">ISO_A3のエイリアス。</target>
        </trans-unit>
        <trans-unit id="baa156c6a4da666a8148058b61ab955e767fcdf4" translate="yes" xml:space="preserve">
          <source>An alias for ISO_A4.</source>
          <target state="translated">ISO_A4のエイリアス。</target>
        </trans-unit>
        <trans-unit id="a1b6857f885b472f58a36ac90b9ebd9c72c84ca2" translate="yes" xml:space="preserve">
          <source>An alias for ISO_A5.</source>
          <target state="translated">ISO_A5のエイリアス。</target>
        </trans-unit>
        <trans-unit id="bb4484dcd8eec5c263653774d2fac919981b011f" translate="yes" xml:space="preserve">
          <source>An alias for ISO_A6.</source>
          <target state="translated">ISO_A6 のエイリアス。</target>
        </trans-unit>
        <trans-unit id="bab2e02cfbeed735b1ecf22e40387703a3bc42e9" translate="yes" xml:space="preserve">
          <source>An alias for ISO_A7.</source>
          <target state="translated">ISO_A7のエイリアス。</target>
        </trans-unit>
        <trans-unit id="346b26d9f2cbe09a4af3f33047a37d09660c5b10" translate="yes" xml:space="preserve">
          <source>An alias for ISO_A8.</source>
          <target state="translated">ISO_A8 のエイリアス。</target>
        </trans-unit>
        <trans-unit id="7ee36055366b3ac5bff30cf9f36151bbe5adc1a6" translate="yes" xml:space="preserve">
          <source>An alias for ISO_A9.</source>
          <target state="translated">ISO_A9 のエイリアス。</target>
        </trans-unit>
        <trans-unit id="59baa580b0fff3dcdd14ad550348ef58612b744e" translate="yes" xml:space="preserve">
          <source>An alias for ISO_B0.</source>
          <target state="translated">ISO_B0のエイリアス。</target>
        </trans-unit>
        <trans-unit id="9ea1b5c8a37ac53dc9638af13e22a4713a244b5d" translate="yes" xml:space="preserve">
          <source>An alias for ISO_B1.</source>
          <target state="translated">ISO_B1のエイリアス。</target>
        </trans-unit>
        <trans-unit id="03c743c757b6561fa5d79bc08db10afd5b0666e7" translate="yes" xml:space="preserve">
          <source>An alias for ISO_B10.</source>
          <target state="translated">ISO_B10のエイリアス。</target>
        </trans-unit>
        <trans-unit id="394a694f2a16f14134de671acd75c430483c8a64" translate="yes" xml:space="preserve">
          <source>An alias for ISO_B2.</source>
          <target state="translated">ISO_B2のエイリアス。</target>
        </trans-unit>
        <trans-unit id="faf726e5ad336a76ca761b106fd8a0c68a8297ff" translate="yes" xml:space="preserve">
          <source>An alias for ISO_B3.</source>
          <target state="translated">ISO_B3のエイリアス。</target>
        </trans-unit>
        <trans-unit id="9230a411a91240a0e83171961e063d600c5f5acb" translate="yes" xml:space="preserve">
          <source>An alias for ISO_B4.</source>
          <target state="translated">ISO_B4のエイリアス。</target>
        </trans-unit>
        <trans-unit id="59330fd4c7eee657cd1498eec26e1fef201047ec" translate="yes" xml:space="preserve">
          <source>An alias for ISO_B5.</source>
          <target state="translated">ISO_B5のエイリアス。</target>
        </trans-unit>
        <trans-unit id="638eff80eb6623885f900a594e9601174050e352" translate="yes" xml:space="preserve">
          <source>An alias for ISO_B6.</source>
          <target state="translated">ISO_B6のエイリアス。</target>
        </trans-unit>
        <trans-unit id="b5bdfeb42a3c3e1ac383a4dceebda82bce615466" translate="yes" xml:space="preserve">
          <source>An alias for ISO_B7.</source>
          <target state="translated">ISO_B7のエイリアス。</target>
        </trans-unit>
        <trans-unit id="86f1d37679f411a0b56a568605766be20b2f7137" translate="yes" xml:space="preserve">
          <source>An alias for ISO_B8.</source>
          <target state="translated">ISO_B8のエイリアス。</target>
        </trans-unit>
        <trans-unit id="aa5857f267ff503bb3a926ab9dc799622629f38d" translate="yes" xml:space="preserve">
          <source>An alias for ISO_B9.</source>
          <target state="translated">ISO_B9 のエイリアス。</target>
        </trans-unit>
        <trans-unit id="e0c8d265dc10f0be37238517b8b0dd4be1fa124f" translate="yes" xml:space="preserve">
          <source>An alias for ISO_C0.</source>
          <target state="translated">ISO_C0のエイリアス。</target>
        </trans-unit>
        <trans-unit id="bd61fb5fd297ec7c32c08842f5238fd4f66baf9b" translate="yes" xml:space="preserve">
          <source>An alias for ISO_C1.</source>
          <target state="translated">ISO_C1のエイリアス。</target>
        </trans-unit>
        <trans-unit id="ea397cf62eefa4e89b590750e83450f1855afaf0" translate="yes" xml:space="preserve">
          <source>An alias for ISO_C10.</source>
          <target state="translated">ISO_C10のエイリアス。</target>
        </trans-unit>
        <trans-unit id="65af40111166fba2af7a2459205dc6eca4d9fde1" translate="yes" xml:space="preserve">
          <source>An alias for ISO_C2.</source>
          <target state="translated">ISO_C2のエイリアス。</target>
        </trans-unit>
        <trans-unit id="0b37fca7848ffd6ccd2b21728bf9523c8f3fe624" translate="yes" xml:space="preserve">
          <source>An alias for ISO_C3.</source>
          <target state="translated">ISO_C3のエイリアス。</target>
        </trans-unit>
        <trans-unit id="f2acd6956403ea3558b901d3b715b1ca3e43f8e6" translate="yes" xml:space="preserve">
          <source>An alias for ISO_C4.</source>
          <target state="translated">ISO_C4のエイリアス。</target>
        </trans-unit>
        <trans-unit id="b5e8c5a74a89d7e4102542474aea637e9d3e58f7" translate="yes" xml:space="preserve">
          <source>An alias for ISO_C5.</source>
          <target state="translated">ISO_C5のエイリアス。</target>
        </trans-unit>
        <trans-unit id="27b702cde3f92dbb64a0113f6427d7dab23ec58e" translate="yes" xml:space="preserve">
          <source>An alias for ISO_C6.</source>
          <target state="translated">ISO_C6のエイリアス。</target>
        </trans-unit>
        <trans-unit id="eccc860c557fe701119cdbdb6801e4380857f03b" translate="yes" xml:space="preserve">
          <source>An alias for ISO_C7.</source>
          <target state="translated">ISO_C7のエイリアス。</target>
        </trans-unit>
        <trans-unit id="53c7e4ab53cc0256366fa2a2bbb5dba0f3c9c3e6" translate="yes" xml:space="preserve">
          <source>An alias for ISO_C8.</source>
          <target state="translated">ISO_C8のエイリアス。</target>
        </trans-unit>
        <trans-unit id="6552fe0a2db2ec6910f8af580f386e493e8499b7" translate="yes" xml:space="preserve">
          <source>An alias for ISO_C9.</source>
          <target state="translated">ISO_C9のエイリアス。</target>
        </trans-unit>
        <trans-unit id="0c0055019dd2b32bcf62ad5fc9a4da580a97e6a1" translate="yes" xml:space="preserve">
          <source>An alias for ISO_DESIGNATED_LONG.</source>
          <target state="translated">ISO_DESIGNATED_LONG のエイリアス。</target>
        </trans-unit>
        <trans-unit id="4084fe0742b2934bf22939f15167eed287799e45" translate="yes" xml:space="preserve">
          <source>An alias for ITALY_ENVELOPE.</source>
          <target state="translated">ITALY_ENVELOPE の別名。</target>
        </trans-unit>
        <trans-unit id="14390cb4925a893a9e7eb752a3f3e08b4de31e2f" translate="yes" xml:space="preserve">
          <source>An alias for LEDGER.</source>
          <target state="translated">LEDGERの別名。</target>
        </trans-unit>
        <trans-unit id="203aaeb41ed730cbea1701623894115d14213d48" translate="yes" xml:space="preserve">
          <source>An alias for MONARCH_ENVELOPE.</source>
          <target state="translated">MONARCH_ENVELOPE のエイリアス。</target>
        </trans-unit>
        <trans-unit id="6b968872cdb041a68bc516034ed33eab3db8a193" translate="yes" xml:space="preserve">
          <source>An alias for NA_10X13_ENVELOPE.</source>
          <target state="translated">NA_10X13_ENVELOPEのエイリアス。</target>
        </trans-unit>
        <trans-unit id="50987540ee2b6590fbfdbe1875d1c2c66bb1d9be" translate="yes" xml:space="preserve">
          <source>An alias for NA_10X14_ENVELOPE.</source>
          <target state="translated">NA_10X14_ENVELOPEのエイリアス。</target>
        </trans-unit>
        <trans-unit id="667984e12a537b98500c2afa2022ce3be49eb719" translate="yes" xml:space="preserve">
          <source>An alias for NA_10X15_ENVELOPE.</source>
          <target state="translated">NA_10X15_ENVELOPEのエイリアス。</target>
        </trans-unit>
        <trans-unit id="43edd3c33215174473fbf3ae6478cef297808be7" translate="yes" xml:space="preserve">
          <source>An alias for NA_6X9_ENVELOPE.</source>
          <target state="translated">NA_6X9_ENVELOPEのエイリアス。</target>
        </trans-unit>
        <trans-unit id="d28df4524c7144f5ba9f0045a455ddc207058c15" translate="yes" xml:space="preserve">
          <source>An alias for NA_7X9_ENVELOPE.</source>
          <target state="translated">NA_7X9_ENVELOPEのエイリアス。</target>
        </trans-unit>
        <trans-unit id="b1a7ac496fe360e51166e40b05ec1e7284ca62f9" translate="yes" xml:space="preserve">
          <source>An alias for NA_9X11_ENVELOPE.</source>
          <target state="translated">NA_9X11_ENVELOPEのエイリアス。</target>
        </trans-unit>
        <trans-unit id="c337d967024998050051c7c28702bcf570d3532e" translate="yes" xml:space="preserve">
          <source>An alias for NA_9X12_ENVELOPE.</source>
          <target state="translated">NA_9X12_ENVELOPEのエイリアス。</target>
        </trans-unit>
        <trans-unit id="0db302990983d4688bf6746b1d41f07a998fd86e" translate="yes" xml:space="preserve">
          <source>An alias for NA_LEGAL.</source>
          <target state="translated">NA_LEGALの別名。</target>
        </trans-unit>
        <trans-unit id="c319c52a7acfa823b23af298d0a88b00d0095fe3" translate="yes" xml:space="preserve">
          <source>An alias for NA_LETTER.</source>
          <target state="translated">NA_LETTERのエイリアス。</target>
        </trans-unit>
        <trans-unit id="7bd0639efc0432aced3da1f0c025edd142107377" translate="yes" xml:space="preserve">
          <source>An alias for NA_NUMBER_10_ENVELOPE.</source>
          <target state="translated">NA_NUMBER_10_ENVELOPEのエイリアス。</target>
        </trans-unit>
        <trans-unit id="0f7bc4058fa646bba907b5a9dcf65694354e8c0b" translate="yes" xml:space="preserve">
          <source>An alias for NA_NUMBER_11_ENVELOPE.</source>
          <target state="translated">NA_NUMBER_11_ENVELOPEのエイリアス。</target>
        </trans-unit>
        <trans-unit id="eb003086b408066d59568b694e06dfe2d4b0f778" translate="yes" xml:space="preserve">
          <source>An alias for NA_NUMBER_12_ENVELOPE.</source>
          <target state="translated">NA_NUMBER_12_ENVELOPEのエイリアス。</target>
        </trans-unit>
        <trans-unit id="8c678079ab035d091a428db30aa51c198d79fe89" translate="yes" xml:space="preserve">
          <source>An alias for NA_NUMBER_14_ENVELOPE.</source>
          <target state="translated">NA_NUMBER_14_ENVELOPEのエイリアス。</target>
        </trans-unit>
        <trans-unit id="bf425fef894f08e9318893d396281c1f4472571a" translate="yes" xml:space="preserve">
          <source>An alias for NA_NUMBER_9_ENVELOPE.</source>
          <target state="translated">NA_NUMBER_9_ENVELOPEのエイリアス。</target>
        </trans-unit>
        <trans-unit id="342714aed92eb857da949b25ee7f7fae6c10b70f" translate="yes" xml:space="preserve">
          <source>An alias for PERSONAL_ENVELOPE.</source>
          <target state="translated">PERSONAL_ENVELOPE のエイリアス。</target>
        </trans-unit>
        <trans-unit id="0cec8f4c8316cb9ae751b7e70e52b1cd0ebd923d" translate="yes" xml:space="preserve">
          <source>An alphabetic character (&lt;a href=&quot;#ubpc&quot;&gt;binary property&lt;/a&gt;)</source>
          <target state="translated">英字（&lt;a href=&quot;#ubpc&quot;&gt;バイナリプロパティ&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="7ce8c43e64a39d3100c6fa7ef95283df115ca794" translate="yes" xml:space="preserve">
          <source>An alphabetic character:&lt;code&gt;[\p{Lower}\p{Upper}]&lt;/code&gt;</source>
          <target state="translated">アルファベット文字： &lt;code&gt;[\p{Lower}\p{Upper}]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68497dca612686ff23e0de730e5d394c71e4efea" translate="yes" xml:space="preserve">
          <source>An alphabetic character:&lt;code&gt;\p{IsAlphabetic}&lt;/code&gt;</source>
          <target state="translated">英字： &lt;code&gt;\p{IsAlphabetic}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="01bae5e119df9571fe53de2b4e015bb858374054" translate="yes" xml:space="preserve">
          <source>An alphanumeric character:&lt;code&gt;[\p{Alpha}\p{Digit}]&lt;/code&gt;</source>
          <target state="translated">英数字： &lt;code&gt;[\p{Alpha}\p{Digit}]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f93f2b6877cd8e093f0fc8be34e5e7da7d63657b" translate="yes" xml:space="preserve">
          <source>An alphanumeric character:&lt;code&gt;[\p{IsAlphabetic}\p{IsDigit}]&lt;/code&gt;</source>
          <target state="translated">英数字： &lt;code&gt;[\p{IsAlphabetic}\p{IsDigit}]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0c9cdb53a3b6bd22f0d34b46ad6ec4a7e7798d55" translate="yes" xml:space="preserve">
          <source>An alternative form that is sometimes more convenient when dealing with a mixed environment of IPv4 and IPv6 nodes is x:x:x:x:x:x:d.d.d.d, where the 'x's are the hexadecimal values of the six high-order 16-bit pieces of the address, and the 'd's are the decimal values of the four low-order 8-bit pieces of the standard IPv4 representation address, for example,</source>
          <target state="translated">IPv4とIPv6ノードの混在環境を扱う場合に便利な代替形式は、x:x:x:x:x:x:x:x:d.d.d.d.dであり、「x」はアドレスの6つの高次16ビット部分の16進数値であり、「d」は標準IPv4表現アドレスの4つの低次8ビット部分の10進数値である。</target>
        </trans-unit>
        <trans-unit id="083958913c8349ff856a6a31a6ab26c418405a16" translate="yes" xml:space="preserve">
          <source>An alternative to this method is to format/parse the instant as a single epoch-seconds value. That is achieved using &lt;code&gt;appendValue(INSTANT_SECONDS)&lt;/code&gt;.</source>
          <target state="translated">この方法の代替方法は、インスタントを単一のエポック秒値としてフォーマット/解析することです。これは、 &lt;code&gt;appendValue(INSTANT_SECONDS)&lt;/code&gt; を使用して実現されます。</target>
        </trans-unit>
        <trans-unit id="02d8cd8c9e497571f1f5cba51cd90335080e617e" translate="yes" xml:space="preserve">
          <source>An alternative to using this class, that also permits limited parallelism, is to create a spliterator from an iterator (see &lt;a href=&quot;spliterators#spliterator(java.util.Iterator,long,int)&quot;&gt;&lt;code&gt;Spliterators.spliterator(Iterator, long, int)&lt;/code&gt;&lt;/a&gt;. Depending on the circumstances using an iterator may be easier or more convenient than extending this class, such as when there is already an iterator available to use.</source>
          <target state="translated">このクラスを使用する代わりに、制限された並列処理も許可されますが、イテレーターからスプリッターを作成すること&lt;a href=&quot;spliterators#spliterator(java.util.Iterator,long,int)&quot;&gt; &lt;code&gt;Spliterators.spliterator(Iterator, long, int)&lt;/code&gt; &lt;/a&gt;参照してください。状況によっては、イテレーターを使用する方が、これを拡張するよりも簡単または便利な場合があります。使用可能なイテレータがすでに存在する場合など、クラス。</target>
        </trans-unit>
        <trans-unit id="80b46c1ca90e4c3aa94fafe8a26da94cd6200d17" translate="yes" xml:space="preserve">
          <source>An alternative to using this class, that also permits limited parallelism, is to create a spliterator from an iterator (see &lt;a href=&quot;spliterators#spliterator(java.util.PrimitiveIterator.OfDouble,long,int)&quot;&gt;&lt;code&gt;Spliterators.spliterator(java.util.PrimitiveIterator.OfDouble, long, int)&lt;/code&gt;&lt;/a&gt;. Depending on the circumstances using an iterator may be easier or more convenient than extending this class. For example, if there is already an iterator available to use then there is no need to extend this class.</source>
          <target state="translated">このクラスを使用する代わりに、制限された並列処理も可能ですが、イテレーターからスプリッターを作成することもできます（&lt;a href=&quot;spliterators#spliterator(java.util.PrimitiveIterator.OfDouble,long,int)&quot;&gt; &lt;code&gt;Spliterators.spliterator(java.util.PrimitiveIterator.OfDouble, long, int)&lt;/code&gt; &lt;/a&gt;参照）。状況によっては、イテレーターを使用する方が簡単な場合があります。または、このクラスを拡張するよりも便利です。たとえば、使用可能なイテレータがすでにある場合は、このクラスを拡張する必要はありません。</target>
        </trans-unit>
        <trans-unit id="623021bf90b6e035308b03104460b8b5b9d14726" translate="yes" xml:space="preserve">
          <source>An alternative to using this class, that also permits limited parallelism, is to create a spliterator from an iterator (see &lt;a href=&quot;spliterators#spliterator(java.util.PrimitiveIterator.OfInt,long,int)&quot;&gt;&lt;code&gt;Spliterators.spliterator(java.util.PrimitiveIterator.OfInt, long, int)&lt;/code&gt;&lt;/a&gt;. Depending on the circumstances using an iterator may be easier or more convenient than extending this class. For example, if there is already an iterator available to use then there is no need to extend this class.</source>
          <target state="translated">このクラスを使用する代わりに、限定された並列処理も可能ですが、イテレーターからスプリッターを作成することもできます（&lt;a href=&quot;spliterators#spliterator(java.util.PrimitiveIterator.OfInt,long,int)&quot;&gt; &lt;code&gt;Spliterators.spliterator(java.util.PrimitiveIterator.OfInt, long, int)&lt;/code&gt; &lt;/a&gt;参照）。状況によっては、イテレーターを使用する方が簡単な場合があります。または、このクラスを拡張するよりも便利です。たとえば、使用可能なイテレータがすでにある場合は、このクラスを拡張する必要はありません。</target>
        </trans-unit>
        <trans-unit id="ea5e24e3573d98d4cca36f4fa1fe659a1b0d4729" translate="yes" xml:space="preserve">
          <source>An alternative to using this class, that also permits limited parallelism, is to create a spliterator from an iterator (see &lt;a href=&quot;spliterators#spliterator(java.util.PrimitiveIterator.OfLong,long,int)&quot;&gt;&lt;code&gt;Spliterators.spliterator(java.util.PrimitiveIterator.OfLong, long, int)&lt;/code&gt;&lt;/a&gt;. Depending on the circumstances using an iterator may be easier or more convenient than extending this class. For example, if there is already an iterator available to use then there is no need to extend this class.</source>
          <target state="translated">このクラスを使用する代わりに、限定された並列処理も可能ですが、イテレーターからスプリッターを作成することもできます（&lt;a href=&quot;spliterators#spliterator(java.util.PrimitiveIterator.OfLong,long,int)&quot;&gt; &lt;code&gt;Spliterators.spliterator(java.util.PrimitiveIterator.OfLong, long, int)&lt;/code&gt; &lt;/a&gt;参照）。状況によっては、イテレーターを使用する方が簡単な場合があります。または、このクラスを拡張するよりも便利です。たとえば、使用可能なイテレータがすでにある場合は、このクラスを拡張する必要はありません。</target>
        </trans-unit>
        <trans-unit id="b1d963055d377ae73238a3fcaf60406dc89690eb" translate="yes" xml:space="preserve">
          <source>An alternative to using this class, that also permits limited parallelism, is to create a spliterator from an iterator (see &lt;a href=&quot;spliterators#spliterator-java.util.Iterator-long-int-&quot;&gt;&lt;code&gt;Spliterators.spliterator(Iterator, long, int)&lt;/code&gt;&lt;/a&gt;. Depending on the circumstances using an iterator may be easier or more convenient than extending this class, such as when there is already an iterator available to use.</source>
          <target state="translated">このクラスを使用する代わりに、並列処理を制限することもできますが、イテレーターからスプリッターを作成すること&lt;a href=&quot;spliterators#spliterator-java.util.Iterator-long-int-&quot;&gt; &lt;code&gt;Spliterators.spliterator(Iterator, long, int)&lt;/code&gt; &lt;/a&gt;参照してください）。イテレーターを使用する状況によっては、これを拡張するよりも簡単または便利な場合があります使用できるイテレータがすでにある場合など。</target>
        </trans-unit>
        <trans-unit id="ce1c77f733ad4ab08c17256908e33a35b3aac8bb" translate="yes" xml:space="preserve">
          <source>An alternative to using this class, that also permits limited parallelism, is to create a spliterator from an iterator (see &lt;a href=&quot;spliterators#spliterator-java.util.PrimitiveIterator.OfDouble-long-int-&quot;&gt;&lt;code&gt;Spliterators.spliterator(java.util.PrimitiveIterator.OfDouble, long, int)&lt;/code&gt;&lt;/a&gt;. Depending on the circumstances using an iterator may be easier or more convenient than extending this class. For example, if there is already an iterator available to use then there is no need to extend this class.</source>
          <target state="translated">このクラスを使用する代わりに、並列処理を制限することもできますが、イテレーターからスプリッターを作成すること&lt;a href=&quot;spliterators#spliterator-java.util.PrimitiveIterator.OfDouble-long-int-&quot;&gt; &lt;code&gt;Spliterators.spliterator(java.util.PrimitiveIterator.OfDouble, long, int)&lt;/code&gt; &lt;/a&gt;。イテレーターを使用する状況によっては、より簡単になる場合があります。たとえば、このクラスを拡張するよりも便利です。たとえば、使用できるイテレータがすでにある場合は、このクラスを拡張する必要はありません。</target>
        </trans-unit>
        <trans-unit id="9867f0c7b196e2e6f09d53e33ea9a2c2cd678c54" translate="yes" xml:space="preserve">
          <source>An alternative to using this class, that also permits limited parallelism, is to create a spliterator from an iterator (see &lt;a href=&quot;spliterators#spliterator-java.util.PrimitiveIterator.OfInt-long-int-&quot;&gt;&lt;code&gt;Spliterators.spliterator(java.util.PrimitiveIterator.OfInt, long, int)&lt;/code&gt;&lt;/a&gt;. Depending on the circumstances using an iterator may be easier or more convenient than extending this class. For example, if there is already an iterator available to use then there is no need to extend this class.</source>
          <target state="translated">このクラスを使用する代わりに、並列処理を制限することもできますが、イテレーターからスプリッターを作成すること&lt;a href=&quot;spliterators#spliterator-java.util.PrimitiveIterator.OfInt-long-int-&quot;&gt; &lt;code&gt;Spliterators.spliterator(java.util.PrimitiveIterator.OfInt, long, int)&lt;/code&gt; &lt;/a&gt;。イテレーターを使用する状況によっては、より簡単になる場合があります。たとえば、このクラスを拡張するよりも便利です。たとえば、使用できるイテレータがすでにある場合は、このクラスを拡張する必要はありません。</target>
        </trans-unit>
        <trans-unit id="aef6f9ffa1f8a2d7438871b437f7fa6fac738a89" translate="yes" xml:space="preserve">
          <source>An alternative to using this class, that also permits limited parallelism, is to create a spliterator from an iterator (see &lt;a href=&quot;spliterators#spliterator-java.util.PrimitiveIterator.OfLong-long-int-&quot;&gt;&lt;code&gt;Spliterators.spliterator(java.util.PrimitiveIterator.OfLong, long, int)&lt;/code&gt;&lt;/a&gt;. Depending on the circumstances using an iterator may be easier or more convenient than extending this class. For example, if there is already an iterator available to use then there is no need to extend this class.</source>
          <target state="translated">このクラスを使用する代わりに、並列処理を制限することもできますが、イテレーターからスプリッターを作成すること&lt;a href=&quot;spliterators#spliterator-java.util.PrimitiveIterator.OfLong-long-int-&quot;&gt; &lt;code&gt;Spliterators.spliterator(java.util.PrimitiveIterator.OfLong, long, int)&lt;/code&gt; &lt;/a&gt;。イテレーターを使用する状況によっては、より簡単になる場合があります。たとえば、このクラスを拡張するよりも便利です。たとえば、使用できるイテレータがすでにある場合は、このクラスを拡張する必要はありません。</target>
        </trans-unit>
        <trans-unit id="245b5a5f20def8398fdae8dfb34d14dd909b98c7" translate="yes" xml:space="preserve">
          <source>An alternative way to load this component with a string would be to create a StringReader and call the read method. In this case the model would be replaced after it was initialized with the contents of the string.</source>
          <target state="translated">このコンポーネントを文字列でロードする別の方法は、StringReader を作成して read メソッドを呼び出すことです。この場合、モデルは文字列の内容で初期化された後に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="c3bfc322b8b030475541bcee85904527cd152fc3" translate="yes" xml:space="preserve">
          <source>An ancestor-component changed its position on the screen.</source>
          <target state="translated">祖先成分が画面上の位置を変更しました。</target>
        </trans-unit>
        <trans-unit id="8da8d2b2e9bb03a27f11335da3ac0fbe6c01c41c" translate="yes" xml:space="preserve">
          <source>An ancestor-component was added to the hierarchy of visible objects (made visible), and is currently being displayed.</source>
          <target state="translated">可視オブジェクトの階層に祖先コンポーネントが追加され(可視化され)、現在表示されています。</target>
        </trans-unit>
        <trans-unit id="db633cabeabacefa39d79a102cace160c41b6c8a" translate="yes" xml:space="preserve">
          <source>An ancestor-component was removed from the hierarchy of visible objects (hidden) and is no longer being displayed.</source>
          <target state="translated">可視オブジェクトの階層(非表示)から祖先コンポーネントが削除され、表示されなくなりました。</target>
        </trans-unit>
        <trans-unit id="6450ce02ff2ddd2c7e118d5649cd28ea6722fb97" translate="yes" xml:space="preserve">
          <source>An annotation</source>
          <target state="translated">アノテーション</target>
        </trans-unit>
        <trans-unit id="f5734ec0c21b484a464b6c058a863248b0ec82e2" translate="yes" xml:space="preserve">
          <source>An annotation element to be converted into a descriptor field can be of any type allowed by the Java language, except an annotation or an array of annotations. The value of the field is derived from the value of the annotation element as follows:</source>
          <target state="translated">記述子フィールドに変換される注釈要素は,注釈または注釈の配列を除き,Java言語で許可されている任意の型をとることができる。フィールドの値は,次のように注釈要素の値から導出される。</target>
        </trans-unit>
        <trans-unit id="f98399f02cc13014e073ea4e7c0f8a6cfab0cc94" translate="yes" xml:space="preserve">
          <source>An annotation is present if it meets the definition of being present given in &lt;a href=&quot;../../lang/model/annotatedconstruct&quot;&gt;&lt;code&gt;AnnotatedConstruct&lt;/code&gt;&lt;/a&gt;. In brief, an annotation is considered present for the purposes of discovery if it is directly present or present via inheritance. An annotation is &lt;em&gt;not&lt;/em&gt; considered present by virtue of being wrapped by a container annotation. Operationally, this is equivalent to an annotation being present on an element if and only if it would be included in the results of &lt;a href=&quot;../../lang/model/util/elements#getAllAnnotationMirrors(javax.lang.model.element.Element)&quot;&gt;&lt;code&gt;Elements.getAllAnnotationMirrors(Element)&lt;/code&gt;&lt;/a&gt; called on that element. Since annotations inside container annotations are not considered present, to properly process &lt;a href=&quot;../../../../java.base/java/lang/annotation/repeatable&quot;&gt;repeatable annotation types&lt;/a&gt;, processors are advised to include both the repeatable annotation type and its containing annotation type in the set of &lt;a href=&quot;#getSupportedAnnotationTypes()&quot;&gt;supported annotation types&lt;/a&gt; of a processor.</source>
          <target state="translated">&lt;a href=&quot;../../lang/model/annotatedconstruct&quot;&gt; &lt;code&gt;AnnotatedConstruct&lt;/code&gt; で&lt;/a&gt;指定された存在の定義を満たす場合、注釈は存在します。簡単に言うと、注釈が直接存在するか、継承を介して存在する場合、注釈は発見の目的で存在すると見なされます。アノテーションは、コンテナアノテーションによってラップされているため、存在すると&lt;em&gt;は&lt;/em&gt;見なされ&lt;em&gt;ません&lt;/em&gt;。運用上、これは、要素で呼び出された&lt;a href=&quot;../../lang/model/util/elements#getAllAnnotationMirrors(javax.lang.model.element.Element)&quot;&gt; &lt;code&gt;Elements.getAllAnnotationMirrors(Element)&lt;/code&gt; の&lt;/a&gt;結果に含まれる場合に限り、要素に存在する注釈と同等です。コンテナアノテーション内のアノテーションは存在するとは見なされないため、&lt;a href=&quot;../../../../java.base/java/lang/annotation/repeatable&quot;&gt;繰り返し可能なアノテーションタイプ&lt;/a&gt;を適切に処理します、プロセッサは、プロセッサの&lt;a href=&quot;#getSupportedAnnotationTypes()&quot;&gt;サポートされている注釈タイプの&lt;/a&gt;セットに、繰り返し可能な注釈タイプとそれに含まれる注釈タイプの両方を含めることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="88dbabf4d218c33507c48f49c53826848a61d2d1" translate="yes" xml:space="preserve">
          <source>An annotation is present if it meets the definition of being present given in &lt;a href=&quot;../../lang/model/annotatedconstruct&quot;&gt;&lt;code&gt;AnnotatedConstruct&lt;/code&gt;&lt;/a&gt;. In brief, an annotation is considered present for the purposes of discovery if it is directly present or present via inheritance. An annotation is &lt;em&gt;not&lt;/em&gt; considered present by virtue of being wrapped by a container annotation. Operationally, this is equivalent to an annotation being present on an element if and only if it would be included in the results of &lt;a href=&quot;../../lang/model/util/elements#getAllAnnotationMirrors-javax.lang.model.element.Element-&quot;&gt;&lt;code&gt;Elements.getAllAnnotationMirrors(Element)&lt;/code&gt;&lt;/a&gt; called on that element. Since annotations inside container annotations are not considered present, to properly process &lt;a href=&quot;../../../java/lang/annotation/repeatable&quot;&gt;repeatable annotation types&lt;/a&gt;, processors are advised to include both the repeatable annotation type and its containing annotation type in the set of &lt;a href=&quot;processor#getSupportedAnnotationTypes--&quot;&gt;supported annotation types&lt;/a&gt; of a processor.</source>
          <target state="translated">&lt;a href=&quot;../../lang/model/annotatedconstruct&quot;&gt; &lt;code&gt;AnnotatedConstruct&lt;/code&gt; で&lt;/a&gt;指定された存在の定義と一致する場合、注釈は存在します。簡単に言えば、注釈が直接存在するか、継承を介して存在する場合、注釈は発見の目的で存在すると見なされます。アノテーションは、コンテナアノテーションでラップされているため、存在すると&lt;em&gt;は&lt;/em&gt;見なされ&lt;em&gt;ません&lt;/em&gt;。操作上、これは、要素で呼び出された&lt;a href=&quot;../../lang/model/util/elements#getAllAnnotationMirrors-javax.lang.model.element.Element-&quot;&gt; &lt;code&gt;Elements.getAllAnnotationMirrors(Element)&lt;/code&gt; の&lt;/a&gt;結果に含まれる場合にのみ、要素に存在する注釈と同等です。コンテナアノテーション内のアノテーションは存在するとは見なされないため、&lt;a href=&quot;../../../java/lang/annotation/repeatable&quot;&gt;繰り返し可能なアノテーションタイプ&lt;/a&gt;を適切に処理する、プロセッサは、&lt;a href=&quot;processor#getSupportedAnnotationTypes--&quot;&gt;サポート&lt;/a&gt;されているプロセッサの注釈タイプのセットに、繰り返し可能な注釈タイプとその包含注釈タイプの両方を含めることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="d592d8db7f59b40201b85bc8b8b68b5038e10571" translate="yes" xml:space="preserve">
          <source>An annotation of type</source>
          <target state="translated">型のアノテーション</target>
        </trans-unit>
        <trans-unit id="210c41a9b3e705c1fb284be5821159ae62174d20" translate="yes" xml:space="preserve">
          <source>An annotation on a constructor that shows how the parameters of that constructor correspond to the constructed object's getter methods.</source>
          <target state="translated">コンストラクタのアノテーションで、そのコンストラクタのパラメータが構築されたオブジェクトのゲッターメソッドにどのように対応しているかを示します。</target>
        </trans-unit>
        <trans-unit id="eefaa37f9e0c544c9a81690204c518d2ff2f4d2f" translate="yes" xml:space="preserve">
          <source>An annotation on a constructor that shows how the parameters of that constructor correspond to the constructed object's getter methods. For example:</source>
          <target state="translated">コンストラクタのアノテーションで、そのコンストラクタのパラメータが構築されたオブジェクトのゲッターメソッドにどのように対応しているかを示します。たとえば、次のようになります。</target>
        </trans-unit>
        <trans-unit id="d252e72df414b32c14b183e53db179fe2f77604b" translate="yes" xml:space="preserve">
          <source>An annotation processing tool framework will &lt;a href=&quot;processor#init(javax.annotation.processing.ProcessingEnvironment)&quot;&gt;provide an annotation processor with an object implementing this interface&lt;/a&gt; so the processor can use facilities provided by the framework to write new files, report error messages, and find other utilities.</source>
          <target state="translated">注釈処理ツールフレームワークは&lt;a href=&quot;processor#init(javax.annotation.processing.ProcessingEnvironment)&quot;&gt;、このインターフェイスを実装するオブジェクトを注釈プロセッサに提供するため、プロセッサは&lt;/a&gt;フレームワークが提供する機能を使用して、新しいファイルの書き込み、エラーメッセージの報告、およびその他のユーティリティの検索を行うことができます。</target>
        </trans-unit>
        <trans-unit id="f74cfaa213e89d66c4289b69d7b8d430381f0284" translate="yes" xml:space="preserve">
          <source>An annotation processing tool framework will &lt;a href=&quot;processor#init-javax.annotation.processing.ProcessingEnvironment-&quot;&gt;provide an annotation processor with an object implementing this interface&lt;/a&gt; so the processor can use facilities provided by the framework to write new files, report error messages, and find other utilities.</source>
          <target state="translated">注釈処理ツールフレームワークは&lt;a href=&quot;processor#init-javax.annotation.processing.ProcessingEnvironment-&quot;&gt;、このインターフェイスを実装するオブジェクトを注釈プロセッサに提供するため、プロセッサは、&lt;/a&gt;フレームワークが提供する機能を使用して、新しいファイルの書き込み、エラーメッセージの報告、およびその他のユーティリティの検索を行うことができます。</target>
        </trans-unit>
        <trans-unit id="6bc440dfac24b6f12cf891bd0dc8929552f3f253" translate="yes" xml:space="preserve">
          <source>An annotation processing tool framework will &lt;a href=&quot;processor#process(java.util.Set,javax.annotation.processing.RoundEnvironment)&quot;&gt;provide an annotation processor with an object implementing this interface&lt;/a&gt; so that the processor can query for information about a round of annotation processing.</source>
          <target state="translated">注釈処理ツールフレームワークは&lt;a href=&quot;processor#process(java.util.Set,javax.annotation.processing.RoundEnvironment)&quot;&gt;、このインターフェイスを実装するオブジェクトを注釈プロセッサに提供&lt;/a&gt;し、プロセッサが注釈処理のラウンドに関する情報を照会できるようにします。</target>
        </trans-unit>
        <trans-unit id="524e047ff62f709be208951e5ef19c0a1d9c3ef1" translate="yes" xml:space="preserve">
          <source>An annotation processing tool framework will &lt;a href=&quot;processor#process-java.util.Set-javax.annotation.processing.RoundEnvironment-&quot;&gt;provide an annotation processor with an object implementing this interface&lt;/a&gt; so that the processor can query for information about a round of annotation processing.</source>
          <target state="translated">注釈処理ツールフレームワークは&lt;a href=&quot;processor#process-java.util.Set-javax.annotation.processing.RoundEnvironment-&quot;&gt;、このインターフェイスを実装するオブジェクトを注釈プロセッサに提供&lt;/a&gt;し、プロセッサが一連の注釈処理に関する情報を照会できるようにします。</target>
        </trans-unit>
        <trans-unit id="8a4458ea6ca9543231479be25a4283c86fadd141" translate="yes" xml:space="preserve">
          <source>An annotation such as &lt;code&gt;@Units&lt;/code&gt; can be applied to:</source>
          <target state="translated">&lt;code&gt;@Units&lt;/code&gt; などの注釈は、以下に適用できます。</target>
        </trans-unit>
        <trans-unit id="e7e4ced8faa261fd9c949304d6cbb810f93dc832" translate="yes" xml:space="preserve">
          <source>An annotation type is considered present if there is at least one annotation of that type present on an element enclosed within the root elements of a round. For this purpose, a type parameter is considered to be enclosed by its &lt;a href=&quot;../../lang/model/element/typeparameterelement#getGenericElement()&quot;&gt;generic element&lt;/a&gt;. For this purpose, a package element is &lt;em&gt;not&lt;/em&gt; considered to enclose the top-level types within that package. (A root element representing a package is created when a &lt;code&gt;package-info&lt;/code&gt; file is processed.) Likewise, for this purpose, a module element is &lt;em&gt;not&lt;/em&gt; considered to enclose the packages within that module. (A root element representing a module is created when a &lt;code&gt;module-info&lt;/code&gt; file is processed.) Annotations on &lt;a href=&quot;../../../../java.base/java/lang/annotation/elementtype#TYPE_USE&quot;&gt;type uses&lt;/a&gt;, as opposed to annotations on elements, are ignored when computing whether or not an annotation type is present.</source>
          <target state="translated">ラウンドのルート要素で囲まれた要素にそのタイプの注釈が少なくとも1つ存在する場合、注釈タイプは存在すると見なされます。この目的のために、型パラメーターはその&lt;a href=&quot;../../lang/model/element/typeparameterelement#getGenericElement()&quot;&gt;汎用要素で&lt;/a&gt;囲まれていると見なされます。この目的のために、パッケージ要素はそのパッケージ内のトップレベルタイプを囲むと&lt;em&gt;は&lt;/em&gt;見なされ&lt;em&gt;ません&lt;/em&gt;。 （パッケージを表すルート要素は、 &lt;code&gt;package-info&lt;/code&gt; ファイルが処理されるときに作成されます。）同様に、この目的のために、モジュール要素はそのモジュール内のパッケージを囲むと&lt;em&gt;は&lt;/em&gt;見なされ&lt;em&gt;ません&lt;/em&gt;。 （モジュールを表すルート要素は、 &lt;code&gt;module-info&lt;/code&gt; ファイルが処理されるときに作成されます。）&lt;a href=&quot;../../../../java.base/java/lang/annotation/elementtype#TYPE_USE&quot;&gt;タイプ使用&lt;/a&gt;に関する注釈要素の注釈とは対照的に、注釈タイプが存在するかどうかを計算するときは無視されます。</target>
        </trans-unit>
        <trans-unit id="8b6df1660030d3e87e06eed015ee71e977deaa5e" translate="yes" xml:space="preserve">
          <source>An annotation type is considered present if there is at least one annotation of that type present on an element enclosed within the root elements of a round. For this purpose, a type parameter is considered to be enclosed by its &lt;a href=&quot;../../lang/model/element/typeparameterelement#getGenericElement--&quot;&gt;generic element&lt;/a&gt;. Annotations on &lt;a href=&quot;../../../java/lang/annotation/elementtype#TYPE_USE&quot;&gt;type uses&lt;/a&gt;, as opposed to annotations on elements, are ignored when computing whether or not an annotation type is present.</source>
          <target state="translated">ラウンドのルート要素で囲まれた要素にそのタイプの注釈が少なくとも1つ存在する場合、注釈タイプは存在すると見なされます。この目的のために、型パラメーターはその&lt;a href=&quot;../../lang/model/element/typeparameterelement#getGenericElement--&quot;&gt;ジェネリック要素で&lt;/a&gt;囲まれていると見なされます。上の注釈&lt;a href=&quot;../../../java/lang/annotation/elementtype#TYPE_USE&quot;&gt;タイプの用途は&lt;/a&gt;注釈型が存在するか否かを計算するとき、要素上の注釈とは対照的に、無視されます。</target>
        </trans-unit>
        <trans-unit id="14e63b563a5a2a3136f10849cb425c952686e9de" translate="yes" xml:space="preserve">
          <source>An annotation type.</source>
          <target state="translated">アノテーションタイプ。</target>
        </trans-unit>
        <trans-unit id="5acf22469336e91ec7942742a86f8fb00dd7e069" translate="yes" xml:space="preserve">
          <source>An annotation used to indicate the latest source version an annotation processor supports.</source>
          <target state="translated">アノテーション・プロセッサがサポートする最新のソース・バージョンを示すために使用されるアノテーション。</target>
        </trans-unit>
        <trans-unit id="18cb9fd2c013845d7201b0c459a3113aba2d5089" translate="yes" xml:space="preserve">
          <source>An annotation used to indicate the latest source version an annotation processor supports. The &lt;a href=&quot;processor#getSupportedSourceVersion()&quot;&gt;&lt;code&gt;Processor.getSupportedSourceVersion()&lt;/code&gt;&lt;/a&gt; method can construct its result from the value of this annotation, as done by &lt;a href=&quot;abstractprocessor#getSupportedSourceVersion()&quot;&gt;&lt;code&gt;AbstractProcessor.getSupportedSourceVersion()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">注釈プロセッサがサポートする最新のソースバージョンを示すために使用される注釈。&lt;a href=&quot;processor#getSupportedSourceVersion()&quot;&gt; &lt;code&gt;Processor.getSupportedSourceVersion()&lt;/code&gt; &lt;/a&gt;によって行われた方法は、この注釈の値から、その結果を構築することができる&lt;a href=&quot;abstractprocessor#getSupportedSourceVersion()&quot;&gt; &lt;code&gt;AbstractProcessor.getSupportedSourceVersion()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="75a22bca3d43b7e0045022a54654e9232487a478" translate="yes" xml:space="preserve">
          <source>An annotation used to indicate the latest source version an annotation processor supports. The &lt;a href=&quot;processor#getSupportedSourceVersion--&quot;&gt;&lt;code&gt;Processor.getSupportedSourceVersion()&lt;/code&gt;&lt;/a&gt; method can construct its result from the value of this annotation, as done by &lt;a href=&quot;abstractprocessor#getSupportedSourceVersion--&quot;&gt;&lt;code&gt;AbstractProcessor.getSupportedSourceVersion()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">注釈プロセッサがサポートする最新のソースバージョンを示すために使用される注釈。&lt;a href=&quot;processor#getSupportedSourceVersion--&quot;&gt; &lt;code&gt;Processor.getSupportedSourceVersion()&lt;/code&gt; &lt;/a&gt;によって行われた方法は、この注釈の値から、その結果を構築することができる&lt;a href=&quot;abstractprocessor#getSupportedSourceVersion--&quot;&gt; &lt;code&gt;AbstractProcessor.getSupportedSourceVersion()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="4031e4bf917fdf8281946e5549b65817c6e956cf" translate="yes" xml:space="preserve">
          <source>An annotation used to indicate what annotation types an annotation processor supports.</source>
          <target state="translated">アノテーションプロセッサがサポートするアノテーションタイプを示すために使用されるアノテーション。</target>
        </trans-unit>
        <trans-unit id="18037e71e2e19bad0ee600cd4edc47f75454e56b" translate="yes" xml:space="preserve">
          <source>An annotation used to indicate what annotation types an annotation processor supports. The &lt;a href=&quot;processor#getSupportedAnnotationTypes()&quot;&gt;&lt;code&gt;Processor.getSupportedAnnotationTypes()&lt;/code&gt;&lt;/a&gt; method can construct its result from the value of this annotation, as done by &lt;a href=&quot;abstractprocessor#getSupportedAnnotationTypes()&quot;&gt;&lt;code&gt;AbstractProcessor.getSupportedAnnotationTypes()&lt;/code&gt;&lt;/a&gt;. Only &lt;a href=&quot;processor#getSupportedAnnotationTypes()&quot;&gt;strings conforming to the grammar&lt;/a&gt; should be used as values.</source>
          <target state="translated">注釈プロセッサがサポートする注釈タイプを示すために使用される注釈。&lt;a href=&quot;processor#getSupportedAnnotationTypes()&quot;&gt; &lt;code&gt;Processor.getSupportedAnnotationTypes()&lt;/code&gt; &lt;/a&gt;によって行われた方法は、この注釈の値から、その結果を構築することができる&lt;a href=&quot;abstractprocessor#getSupportedAnnotationTypes()&quot;&gt; &lt;code&gt;AbstractProcessor.getSupportedAnnotationTypes()&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;processor#getSupportedAnnotationTypes()&quot;&gt;文法に準拠した文字列&lt;/a&gt;のみを値として使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="9c6b615866c974b486b01e734a1db2e9117def2e" translate="yes" xml:space="preserve">
          <source>An annotation used to indicate what annotation types an annotation processor supports. The &lt;a href=&quot;processor#getSupportedAnnotationTypes--&quot;&gt;&lt;code&gt;Processor.getSupportedAnnotationTypes()&lt;/code&gt;&lt;/a&gt; method can construct its result from the value of this annotation, as done by &lt;a href=&quot;abstractprocessor#getSupportedAnnotationTypes--&quot;&gt;&lt;code&gt;AbstractProcessor.getSupportedAnnotationTypes()&lt;/code&gt;&lt;/a&gt;. Only &lt;a href=&quot;processor#getSupportedAnnotationTypes--&quot;&gt;strings conforming to the grammar&lt;/a&gt; should be used as values.</source>
          <target state="translated">注釈プロセッサがサポートする注釈タイプを示すために使用される注釈。&lt;a href=&quot;processor#getSupportedAnnotationTypes--&quot;&gt; &lt;code&gt;Processor.getSupportedAnnotationTypes()&lt;/code&gt; &lt;/a&gt;によって行われた方法は、この注釈の値から、その結果を構築することができる&lt;a href=&quot;abstractprocessor#getSupportedAnnotationTypes--&quot;&gt; &lt;code&gt;AbstractProcessor.getSupportedAnnotationTypes()&lt;/code&gt; &lt;/a&gt;。値として使用できるの&lt;a href=&quot;processor#getSupportedAnnotationTypes--&quot;&gt;は、文法に準拠した文字列&lt;/a&gt;のみです。</target>
        </trans-unit>
        <trans-unit id="f60174ffc1f6b3c4b12023190798b68e02120e59" translate="yes" xml:space="preserve">
          <source>An annotation used to indicate what options an annotation processor supports.</source>
          <target state="translated">アノテーションプロセッサがサポートするオプションを示すために使用されるアノテーション。</target>
        </trans-unit>
        <trans-unit id="1db0ea6726b05188876713fd8ffa0420fb466677" translate="yes" xml:space="preserve">
          <source>An annotation used to indicate what options an annotation processor supports. The &lt;a href=&quot;processor#getSupportedOptions()&quot;&gt;&lt;code&gt;Processor.getSupportedOptions()&lt;/code&gt;&lt;/a&gt; method can construct its result from the value of this annotation, as done by &lt;a href=&quot;abstractprocessor#getSupportedOptions()&quot;&gt;&lt;code&gt;AbstractProcessor.getSupportedOptions()&lt;/code&gt;&lt;/a&gt;. Only &lt;a href=&quot;processor#getSupportedOptions()&quot;&gt;strings conforming to the grammar&lt;/a&gt; should be used as values.</source>
          <target state="translated">注釈プロセッサがサポートするオプションを示すために使用される注釈。&lt;a href=&quot;processor#getSupportedOptions()&quot;&gt; &lt;code&gt;Processor.getSupportedOptions()&lt;/code&gt; &lt;/a&gt;によって行われた方法は、この注釈の値から、その結果を構築することができる&lt;a href=&quot;abstractprocessor#getSupportedOptions()&quot;&gt; &lt;code&gt;AbstractProcessor.getSupportedOptions()&lt;/code&gt; &lt;/a&gt;。&lt;a href=&quot;processor#getSupportedOptions()&quot;&gt;文法に準拠した文字列&lt;/a&gt;のみを値として使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e1dd2d1ae6f44b3ce4963b186b86ccaef326db35" translate="yes" xml:space="preserve">
          <source>An annotation used to indicate what options an annotation processor supports. The &lt;a href=&quot;processor#getSupportedOptions--&quot;&gt;&lt;code&gt;Processor.getSupportedOptions()&lt;/code&gt;&lt;/a&gt; method can construct its result from the value of this annotation, as done by &lt;a href=&quot;abstractprocessor#getSupportedOptions--&quot;&gt;&lt;code&gt;AbstractProcessor.getSupportedOptions()&lt;/code&gt;&lt;/a&gt;. Only &lt;a href=&quot;processor#getSupportedOptions--&quot;&gt;strings conforming to the grammar&lt;/a&gt; should be used as values.</source>
          <target state="translated">注釈プロセッサがサポートするオプションを示すために使用される注釈。&lt;a href=&quot;processor#getSupportedOptions--&quot;&gt; &lt;code&gt;Processor.getSupportedOptions()&lt;/code&gt; &lt;/a&gt;によって行われた方法は、この注釈の値から、その結果を構築することができる&lt;a href=&quot;abstractprocessor#getSupportedOptions--&quot;&gt; &lt;code&gt;AbstractProcessor.getSupportedOptions()&lt;/code&gt; &lt;/a&gt;。値として使用できるの&lt;a href=&quot;processor#getSupportedOptions--&quot;&gt;は、文法に準拠した文字列&lt;/a&gt;のみです。</target>
        </trans-unit>
        <trans-unit id="5a8612536e72755b456724a0e12cb5455d499c12" translate="yes" xml:space="preserve">
          <source>An annotation used to specify some class-related information for the automatically generated &lt;a href=&quot;beaninfo&quot;&gt;&lt;code&gt;BeanInfo&lt;/code&gt;&lt;/a&gt; classes.</source>
          <target state="translated">自動生成された&lt;a href=&quot;beaninfo&quot;&gt; &lt;code&gt;BeanInfo&lt;/code&gt; &lt;/a&gt;クラスのクラス関連情報を指定するために使用されるアノテーション。</target>
        </trans-unit>
        <trans-unit id="c239b1a6eda139d98da07502d5740851529ceeaf" translate="yes" xml:space="preserve">
          <source>An annotation used to specify some class-related information for the automatically generated &lt;a href=&quot;beaninfo&quot;&gt;&lt;code&gt;BeanInfo&lt;/code&gt;&lt;/a&gt; classes. This annotation is not used if the annotated class has a corresponding user-defined &lt;code&gt;BeanInfo&lt;/code&gt; class, which does not imply the automatic analysis.</source>
          <target state="translated">自動生成された&lt;a href=&quot;beaninfo&quot;&gt; &lt;code&gt;BeanInfo&lt;/code&gt; &lt;/a&gt;クラスのクラス関連情報を指定するために使用されるアノテーション。アノテーション付きクラスに対応するユーザー定義の &lt;code&gt;BeanInfo&lt;/code&gt; クラスがある場合、このアノテーションは使用されません。これは、自動分析を意味しません。</target>
        </trans-unit>
        <trans-unit id="e818d2a1b1c781d246d2f2f2c4f551a1f5dcfde6" translate="yes" xml:space="preserve">
          <source>An annotation used to specify some property-related information for the automatically generated &lt;a href=&quot;beaninfo&quot;&gt;&lt;code&gt;BeanInfo&lt;/code&gt;&lt;/a&gt; classes.</source>
          <target state="translated">自動生成された&lt;a href=&quot;beaninfo&quot;&gt; &lt;code&gt;BeanInfo&lt;/code&gt; &lt;/a&gt;クラスのプロパティ関連情報を指定するために使用されるアノテーション。</target>
        </trans-unit>
        <trans-unit id="51dadf80b2a0a1a6e28fac4a94eff3e6c3b7e3a3" translate="yes" xml:space="preserve">
          <source>An annotation used to specify some property-related information for the automatically generated &lt;a href=&quot;beaninfo&quot;&gt;&lt;code&gt;BeanInfo&lt;/code&gt;&lt;/a&gt; classes. This annotation is not used if the annotated class has a corresponding user-defined &lt;code&gt;BeanInfo&lt;/code&gt; class, which does not imply the automatic analysis. If both the read and the write methods of the property are annotated, then the read method annotation will have more priority and replace the write method annotation.</source>
          <target state="translated">自動生成された&lt;a href=&quot;beaninfo&quot;&gt; &lt;code&gt;BeanInfo&lt;/code&gt; &lt;/a&gt;クラスのプロパティ関連情報を指定するために使用されるアノテーション。アノテーション付きクラスに対応するユーザー定義の &lt;code&gt;BeanInfo&lt;/code&gt; クラスがある場合、このアノテーションは使用されません。これは、自動分析を意味しません。プロパティの読み取りメソッドと書き込みメソッドの両方にアノテーションが付けられている場合、読み取りメソッドのアノテーションの優先度が高くなり、書き込みメソッドのアノテーションが置き換えられます。</target>
        </trans-unit>
        <trans-unit id="afea66a54a8a58ddc2b397a75e56a960364379b6" translate="yes" xml:space="preserve">
          <source>An annotation used to specify some swing-related information for the automatically generated &lt;code&gt;BeanInfo&lt;/code&gt; classes.</source>
          <target state="translated">自動生成された &lt;code&gt;BeanInfo&lt;/code&gt; クラスのスイング関連情報を指定するために使用されるアノテーション。</target>
        </trans-unit>
        <trans-unit id="c8f6068b9d3f70f16ee17e5b3c7d5518a7901a67" translate="yes" xml:space="preserve">
          <source>An annotation used to specify some swing-related information for the automatically generated &lt;code&gt;BeanInfo&lt;/code&gt; classes. This annotation is not used if the annotated class has a corresponding user-defined &lt;code&gt;BeanInfo&lt;/code&gt; class, which does not imply the automatic analysis.</source>
          <target state="translated">自動生成された &lt;code&gt;BeanInfo&lt;/code&gt; クラスのスイング関連情報を指定するために使用されるアノテーション。アノテーション付きクラスに対応するユーザー定義の &lt;code&gt;BeanInfo&lt;/code&gt; クラスがある場合、このアノテーションは使用されません。これは、自動分析を意味しません。</target>
        </trans-unit>
        <trans-unit id="c112ed0124d512491ba2a98ceb11fe45964724a1" translate="yes" xml:space="preserve">
          <source>An applet is a small program that is intended not to be run on its own, but rather to be embedded inside another application.</source>
          <target state="translated">アプレットとは、単独で実行するのではなく、別のアプリケーションの中に埋め込むことを目的とした小さなプログラムです。</target>
        </trans-unit>
        <trans-unit id="c43686e7febec62d151a03b6306a5f37f51db47a" translate="yes" xml:space="preserve">
          <source>An applet viewer or browser is free to ignore &lt;code&gt;showDocument&lt;/code&gt;.</source>
          <target state="translated">アプレットビューアまたはブラウザは、 &lt;code&gt;showDocument&lt;/code&gt; を自由に無視できます。</target>
        </trans-unit>
        <trans-unit id="94097b98810c70d8481127bda6928c8877670a46" translate="yes" xml:space="preserve">
          <source>An application calls the method &lt;code&gt;setResolvedValue&lt;/code&gt; after it has resolved all of the conflicts in the current conflict row and repeats this process for each conflict row in the &lt;code&gt;SyncResolver&lt;/code&gt; object.</source>
          <target state="translated">アプリケーションは、現在の競合行のすべての競合を解決した後、メソッド &lt;code&gt;setResolvedValue&lt;/code&gt; を呼び出し、 &lt;code&gt;SyncResolver&lt;/code&gt; オブジェクトの競合行ごとにこのプロセスを繰り返します。</target>
        </trans-unit>
        <trans-unit id="fc0124064e76c2d95eff56f01c731d039597afbe" translate="yes" xml:space="preserve">
          <source>An application can access a platform MXBean in the following ways:</source>
          <target state="translated">アプリケーションは、以下の方法でプラットフォームMXBeanにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="1727be2804c6184e0af4d6ab5dd3aa80267da524" translate="yes" xml:space="preserve">
          <source>An application can also specify a &quot;relative URL&quot;, which contains only enough information to reach the resource relative to another URL. Relative URLs are frequently used within HTML pages. For example, if the contents of the URL:</source>
          <target state="translated">アプリケーションは「相対 URL」を指定することもでき、これは別の URL から相対的にリソースに到達するための十分な情報のみを含んでいます。相対 URL は、HTML ページ内で頻繁に使用されます。例えば、URLの内容が</target>
        </trans-unit>
        <trans-unit id="b6fe4a5a29b9b840d12eef98ca9953d13224d94a" translate="yes" xml:space="preserve">
          <source>An application can call the method &lt;code&gt;setConcurrency&lt;/code&gt; at any time to change a &lt;code&gt;RowSet&lt;/code&gt; object's concurrency.</source>
          <target state="translated">アプリケーションは、いつでもメソッド &lt;code&gt;setConcurrency&lt;/code&gt; を呼び出して、 &lt;code&gt;RowSet&lt;/code&gt; オブジェクトの同時実行性を変更できます。</target>
        </trans-unit>
        <trans-unit id="6046ea8fd2ff71ec91dbdabf5832814948f14ca0" translate="yes" xml:space="preserve">
          <source>An application can continuously monitor its memory usage by calling either the &lt;a href=&quot;#getUsage()&quot;&gt;&lt;code&gt;getUsage()&lt;/code&gt;&lt;/a&gt; method for all memory pools or the &lt;a href=&quot;#isUsageThresholdExceeded()&quot;&gt;&lt;code&gt;isUsageThresholdExceeded()&lt;/code&gt;&lt;/a&gt; method for those memory pools that support a usage threshold. Below is example code that has a thread dedicated for task distribution and processing. At every interval, it will determine if it should receive and process new tasks based on its memory usage. If the memory usage exceeds its usage threshold, it will redistribute all outstanding tasks to other VMs and stop receiving new tasks until the memory usage returns below its usage threshold.</source>
          <target state="translated">アプリケーションは、すべてのメモリプールに対して&lt;a href=&quot;#getUsage()&quot;&gt; &lt;code&gt;getUsage()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すか、使用量のしきい値をサポートするメモリプールに対して&lt;a href=&quot;#isUsageThresholdExceeded()&quot;&gt; &lt;code&gt;isUsageThresholdExceeded()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことにより、メモリ使用量を継続的に監視できます。以下は、タスクの分散と処理専用のスレッドを持つサンプルコードです。間隔ごとに、メモリ使用量に基づいて新しいタスクを受信して​​処理する必要があるかどうかを判断します。メモリ使用量が使用量しきい値を超えると、未処理のすべてのタスクが他のVMに再配布され、メモリ使用量が使用量しきい値を下回るまで新しいタスクの受信が停止されます。</target>
        </trans-unit>
        <trans-unit id="115e820fd6fddc9f896d73ad580483a2f6d34311" translate="yes" xml:space="preserve">
          <source>An application can continuously monitor its memory usage by calling either the &lt;a href=&quot;memorypoolmxbean#getUsage--&quot;&gt;&lt;code&gt;getUsage()&lt;/code&gt;&lt;/a&gt; method for all memory pools or the &lt;a href=&quot;memorypoolmxbean#isUsageThresholdExceeded--&quot;&gt;&lt;code&gt;isUsageThresholdExceeded()&lt;/code&gt;&lt;/a&gt; method for those memory pools that support a usage threshold. Below is example code that has a thread dedicated for task distribution and processing. At every interval, it will determine if it should receive and process new tasks based on its memory usage. If the memory usage exceeds its usage threshold, it will redistribute all outstanding tasks to other VMs and stop receiving new tasks until the memory usage returns below its usage threshold.</source>
          <target state="translated">アプリケーションは、すべてのメモリプールに対して&lt;a href=&quot;memorypoolmxbean#getUsage--&quot;&gt; &lt;code&gt;getUsage()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すか、使用量のしきい値をサポートするメモリプールに対して&lt;a href=&quot;memorypoolmxbean#isUsageThresholdExceeded--&quot;&gt; &lt;code&gt;isUsageThresholdExceeded()&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことにより、メモリ使用量を継続的に監視できます。以下は、タスクの分散と処理専用のスレッドを持つコード例です。すべての間隔で、メモリ使用量に基づいて新しいタスクを受信して​​処理する必要があるかどうかを判断します。メモリ使用量がその使用量しきい値を超えると、すべての未処理のタスクが他のVMに再分配され、メモリ使用量が使用量しきい値を下回るまで新しいタスクの受信が停止されます。</target>
        </trans-unit>
        <trans-unit id="f7c8d446a38c2d43ab4ab1869a5b686a9d89d365" translate="yes" xml:space="preserve">
          <source>An application can get information about the columns in a &lt;code&gt;CachedRowSet&lt;/code&gt; object by calling &lt;code&gt;ResultSetMetaData&lt;/code&gt; and &lt;code&gt;RowSetMetaData&lt;/code&gt; methods on a &lt;code&gt;RowSetMetaData&lt;/code&gt; object. The following code fragment, in which</source>
          <target state="translated">アプリケーションは、内の列に関する情報を取得することができます &lt;code&gt;CachedRowSet&lt;/code&gt; 呼び出すことにより、オブジェクトを &lt;code&gt;ResultSetMetaData&lt;/code&gt; して &lt;code&gt;RowSetMetaData&lt;/code&gt; のメソッド &lt;code&gt;RowSetMetaData&lt;/code&gt; オブジェクトを。次のコードフラグメント。</target>
        </trans-unit>
        <trans-unit id="66fc3bccd62c8102da3996580d8b65f0059250a1" translate="yes" xml:space="preserve">
          <source>An application can increase the capacity of an &lt;code&gt;ArrayList&lt;/code&gt; instance before adding a large number of elements using the &lt;code&gt;ensureCapacity&lt;/code&gt; operation. This may reduce the amount of incremental reallocation.</source>
          <target state="translated">アプリケーションは、 &lt;code&gt;ensureCapacity&lt;/code&gt; 操作を使用して多数の要素を追加する前に、 &lt;code&gt;ArrayList&lt;/code&gt; インスタンスの容量を増やすことができます。これにより、増分再割り当ての量が削減される場合があります。</target>
        </trans-unit>
        <trans-unit id="5a14f747966a13adfe799654d69362593cdd5855" translate="yes" xml:space="preserve">
          <source>An application can modify the data in a &lt;code&gt;CachedRowSet&lt;/code&gt; object, and those modifications can then be propagated back to the source of the data.</source>
          <target state="translated">アプリケーションは &lt;code&gt;CachedRowSet&lt;/code&gt; オブジェクトのデータを変更でき、それらの変更をデータのソースに伝播して戻すことができます。</target>
        </trans-unit>
        <trans-unit id="091a5d260c75e604688568fbefd6e2d812988aa0" translate="yes" xml:space="preserve">
          <source>An application can monitor the instrumentation of the Java virtual machine and the runtime in the following ways:</source>
          <target state="translated">アプリケーションは、以下の方法でJava仮想マシンとランタイムのインストルメンテーションを監視することができます。</target>
        </trans-unit>
        <trans-unit id="810a307f6a3596836b9c2ad0947503e57c9a4014" translate="yes" xml:space="preserve">
          <source>An application can replace the logging backend</source>
          <target state="translated">アプリケーションはロギングバックエンドを置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="e17d44362e4c5ab29fca0e7b705ecaaee190d736" translate="yes" xml:space="preserve">
          <source>An application can retrieve the &lt;code&gt;SyncProvider&lt;/code&gt; object currently in use by a disconnected &lt;code&gt;RowSet&lt;/code&gt; object. It can also retrieve the grade of synchronization with which the provider was implemented and the degree of locking currently in use. In addition, an application has the flexibility to set the degree of locking to be used, which can increase the possibilities for successful synchronization. These operation are shown in the following code fragment.</source>
          <target state="translated">アプリケーションは、切断された &lt;code&gt;RowSet&lt;/code&gt; オブジェクトによって現在使用されて &lt;code&gt;SyncProvider&lt;/code&gt; オブジェクトを取得できます。また、プロバイダーが実装された同期のグレードと、現在使用されているロックの程度を取得することもできます。さらに、アプリケーションには、使用するロックの程度を設定する柔軟性があり、同期を成功させる可能性を高めることができます。これらの操作は、次のコードフラグメントに示されています。</target>
        </trans-unit>
        <trans-unit id="95ca80e3187e793ccf9eeb8bfbb650ebc2101454" translate="yes" xml:space="preserve">
          <source>An application can use the method &lt;code&gt;targetMustExist()&lt;/code&gt; to check whether a &lt;code&gt;EventContext&lt;/code&gt; supports registration of nonexistent targets.</source>
          <target state="translated">アプリケーションは、メソッド &lt;code&gt;targetMustExist()&lt;/code&gt; を使用して、 &lt;code&gt;EventContext&lt;/code&gt; が存在しないターゲットの登録をサポートしているかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="6a8937d75fad2c11b37dcc0d9eb83c4f65796476" translate="yes" xml:space="preserve">
          <source>An application can use the method &lt;code&gt;targetMustExist()&lt;/code&gt; to check whether an &lt;code&gt;EventContext&lt;/code&gt; supports registration of nonexistent targets.</source>
          <target state="translated">アプリケーションは、メソッド &lt;code&gt;targetMustExist()&lt;/code&gt; を使用して、 &lt;code&gt;EventContext&lt;/code&gt; が存在しないターゲットの登録をサポートしているかどうかを確認できます。</target>
        </trans-unit>
        <trans-unit id="90ef8a309089eacf6ad4cc4d7c0a38bbfa3a99e3" translate="yes" xml:space="preserve">
          <source>An application cannot create its own instance of this class.</source>
          <target state="translated">アプリケーションは、このクラスの独自のインスタンスを作成することはできません。</target>
        </trans-unit>
        <trans-unit id="b3ba1980c269bd64417681572c060a71b272ece9" translate="yes" xml:space="preserve">
          <source>An application does not generally call the &lt;code&gt;getContent&lt;/code&gt; method in this class directly. Instead, an application calls the &lt;code&gt;getContent&lt;/code&gt; method in class &lt;code&gt;URL&lt;/code&gt; or in &lt;code&gt;URLConnection&lt;/code&gt;. The application's content handler factory (an instance of a class that implements the interface &lt;code&gt;ContentHandlerFactory&lt;/code&gt; set up by a call to &lt;a href=&quot;urlconnection#setContentHandlerFactory(java.net.ContentHandlerFactory)&quot;&gt;&lt;code&gt;setContentHandlerFactory&lt;/code&gt;&lt;/a&gt; is called with a &lt;code&gt;String&lt;/code&gt; giving the MIME type of the object being received on the socket. The factory returns an instance of a subclass of &lt;code&gt;ContentHandler&lt;/code&gt;, and its &lt;code&gt;getContent&lt;/code&gt; method is called to create the object.</source>
          <target state="translated">通常、アプリケーションはこのクラスの &lt;code&gt;getContent&lt;/code&gt; メソッドを直接呼び出すことはありません。代わりに、アプリケーションはクラス &lt;code&gt;URL&lt;/code&gt; または &lt;code&gt;URLConnection&lt;/code&gt; で &lt;code&gt;getContent&lt;/code&gt; メソッドを呼び出します。アプリケーションのコンテンツハンドラファクトリ（&lt;a href=&quot;urlconnection#setContentHandlerFactory(java.net.ContentHandlerFactory)&quot;&gt; &lt;code&gt;setContentHandlerFactory&lt;/code&gt; の呼び出し&lt;/a&gt;によって設定されたインターフェイス &lt;code&gt;ContentHandlerFactory&lt;/code&gt; を実装するクラスのインスタンスは、ソケットで受信されているオブジェクトのMIMEタイプを示す &lt;code&gt;String&lt;/code&gt; 呼び出されます。ファクトリは次のサブクラスのインスタンスを返します。 &lt;code&gt;ContentHandler&lt;/code&gt; 、およびその &lt;code&gt;getContent&lt;/code&gt; メソッドが呼び出されてオブジェクトが作成されます。</target>
        </trans-unit>
        <trans-unit id="8a6df7d151a5d6f20800947f9d0709eba3db671b" translate="yes" xml:space="preserve">
          <source>An application does not generally call the &lt;code&gt;getContent&lt;/code&gt; method in this class directly. Instead, an application calls the &lt;code&gt;getContent&lt;/code&gt; method in class &lt;code&gt;URL&lt;/code&gt; or in &lt;code&gt;URLConnection&lt;/code&gt;. The application's content handler factory (an instance of a class that implements the interface &lt;code&gt;ContentHandlerFactory&lt;/code&gt; set up by a call to &lt;code&gt;setContentHandler&lt;/code&gt;) is called with a &lt;code&gt;String&lt;/code&gt; giving the MIME type of the object being received on the socket. The factory returns an instance of a subclass of &lt;code&gt;ContentHandler&lt;/code&gt;, and its &lt;code&gt;getContent&lt;/code&gt; method is called to create the object.</source>
          <target state="translated">通常、アプリケーションはこのクラスの &lt;code&gt;getContent&lt;/code&gt; メソッドを直接呼び出しません。代わりに、アプリケーションはクラス &lt;code&gt;URL&lt;/code&gt; または &lt;code&gt;URLConnection&lt;/code&gt; で &lt;code&gt;getContent&lt;/code&gt; メソッドを呼び出します。アプリケーションのコンテンツハンドラファクトリ（ &lt;code&gt;setContentHandler&lt;/code&gt; の呼び出しによって設定された &lt;code&gt;ContentHandlerFactory&lt;/code&gt; インタフェースを実装するクラスのインスタンス）は、ソケットで受信されるオブジェクトのMIMEタイプを指定する &lt;code&gt;String&lt;/code&gt; 呼び出されます。工場はのサブクラスのインスタンスを返し &lt;code&gt;ContentHandler&lt;/code&gt; 、その &lt;code&gt;getContent&lt;/code&gt; 方法は、オブジェクトを作成するために呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d152f8bcdbb685841bbe92604f70c30b74a1c9ce" translate="yes" xml:space="preserve">
          <source>An application does not need to do anything special to participate in a distributed transaction. It simply creates connections to the data sources it wants to use via the &lt;code&gt;DataSource.getConnection&lt;/code&gt; method, just as it normally does. The transaction manager manages the transaction behind the scenes. The &lt;code&gt;XADataSource&lt;/code&gt; interface creates &lt;code&gt;XAConnection&lt;/code&gt; objects, and each &lt;code&gt;XAConnection&lt;/code&gt; object creates an &lt;code&gt;XAResource&lt;/code&gt; object that the transaction manager uses to manage the connection.</source>
          <target state="translated">アプリケーションは、分散トランザクションに参加するために特別なことをする必要はありません。通常どおり、 &lt;code&gt;DataSource.getConnection&lt;/code&gt; メソッドを介して使用するデータソースへの接続を作成するだけです。トランザクションマネージャーは、バックグラウンドでトランザクションを管理します。 &lt;code&gt;XADataSource&lt;/code&gt; のインターフェースは、作成 &lt;code&gt;XAConnection&lt;/code&gt; オブジェクト、および各 &lt;code&gt;XAConnection&lt;/code&gt; オブジェクトは、作成し &lt;code&gt;XAResource&lt;/code&gt; トランザクション・マネージャが使用する接続を管理することが目的です。</target>
        </trans-unit>
        <trans-unit id="87b5d029599758045135722547430a9d62275c1a" translate="yes" xml:space="preserve">
          <source>An application implements a &lt;code&gt;CallbackHandler&lt;/code&gt; and passes it to underlying security services so that they may interact with the application to retrieve specific authentication data, such as usernames and passwords, or to display certain information, such as error and warning messages.</source>
          <target state="translated">アプリケーションは &lt;code&gt;CallbackHandler&lt;/code&gt; を実装し、それを基盤となるセキュリティサービスに渡して、アプリケーションと対話してユーザー名やパスワードなどの特定の認証データを取得したり、エラーや警告メッセージなどの特定の情報を表示したりできるようにします。</target>
        </trans-unit>
        <trans-unit id="c22cdb38f7fb3493695f954fef42383114c4d79a" translate="yes" xml:space="preserve">
          <source>An application invokes the static methods of the abstract class &lt;a href=&quot;printservicelookup&quot;&gt;&lt;code&gt;PrintServiceLookup&lt;/code&gt;&lt;/a&gt; to locate print services that have the capabilities to satisfy the application's print request. For example, to print a double-sided document, the application first needs to find printers that have the double-sided printing capability.</source>
          <target state="translated">アプリケーションは、抽象クラス&lt;a href=&quot;printservicelookup&quot;&gt; &lt;code&gt;PrintServiceLookup&lt;/code&gt; &lt;/a&gt;の静的メソッドを呼び出して、アプリケーションの印刷要求を満たす機能を持つ印刷サービスを見つけます。たとえば、両面ドキュメントを印刷するには、アプリケーションは最初に両面印刷機能を持つプリンタを見つける必要があります。</target>
        </trans-unit>
        <trans-unit id="de9e08aefd69e9f5ddcc0c29e20fb0e6d24be178" translate="yes" xml:space="preserve">
          <source>An application is guaranteed that a read or write operation of up to the number of bytes returned from &lt;code&gt;available()&lt;/code&gt; will not block; however, there is no guarantee that attempts to read or write more data will block.</source>
          <target state="translated">アプリケーションは、 &lt;code&gt;available()&lt;/code&gt; から返される最大バイト数の読み取りまたは書き込み操作がブロックされないことが保証されています。ただし、それ以上のデータの読み取りまたは書き込みを試みてもブロックされる保証はありません。</target>
        </trans-unit>
        <trans-unit id="047ca78e756a6d91b656d5564f410992ad57b247" translate="yes" xml:space="preserve">
          <source>An application is registered to a URI or file type. The mechanism of registering, accessing, and launching the associated application is platform-dependent.</source>
          <target state="translated">アプリケーションは URI またはファイルタイプに登録されます。関連するアプリケーションの登録、アクセス、起動の仕組みはプラットフォームに依存します。</target>
        </trans-unit>
        <trans-unit id="d169626f547e30263e64db3053522ec0469e9a56" translate="yes" xml:space="preserve">
          <source>An application is responsible for updating the system selection whenever the user selects text, using either the mouse or the keyboard. Typically, this is implemented by installing a &lt;code&gt;FocusListener&lt;/code&gt; on all &lt;code&gt;Component&lt;/code&gt;s which support text selection, and, between &lt;code&gt;FOCUS_GAINED&lt;/code&gt; and &lt;code&gt;FOCUS_LOST&lt;/code&gt; events delivered to that &lt;code&gt;Component&lt;/code&gt;, updating the system selection &lt;code&gt;Clipboard&lt;/code&gt; when the selection changes inside the &lt;code&gt;Component&lt;/code&gt;. Properly updating the system selection ensures that a Java application will interact correctly with native applications and other Java applications running simultaneously on the system. Note that &lt;code&gt;java.awt.TextComponent&lt;/code&gt; and &lt;code&gt;javax.swing.text.JTextComponent&lt;/code&gt; already adhere to this policy. When using these classes, and their subclasses, developers need not write any additional code.</source>
          <target state="translated">アプリケーションは、ユーザーがマウスまたはキーボードを使用してテキストを選択するたびに、システム選択を更新する責任があります。典型的には、これは、インストールすることで実現される &lt;code&gt;FocusListener&lt;/code&gt; 全てに &lt;code&gt;Component&lt;/code&gt; のどのサポートテキストの選択、及び、間 &lt;code&gt;FOCUS_GAINED&lt;/code&gt; と &lt;code&gt;FOCUS_LOST&lt;/code&gt; イベントそれに配信 &lt;code&gt;Component&lt;/code&gt; システム選択更新、 &lt;code&gt;Clipboard&lt;/code&gt; 選択内側変更したとき &lt;code&gt;Component&lt;/code&gt; 。システム選択を適切に更新することにより、Javaアプリケーションがネイティブアプリケーションおよびシステム上で同時に実行されている他のJavaアプリケーションと正しく対話することが保証されます。なお &lt;code&gt;java.awt.TextComponent&lt;/code&gt; と &lt;code&gt;javax.swing.text.JTextComponent&lt;/code&gt; はすでにこのポリシーに準拠しています。これらのクラスとそのサブクラスを使用する場合、開発者は追加のコードを記述する必要はありません。</target>
        </trans-unit>
        <trans-unit id="6ec4229c7c01ae8a988f9cf348de47bd396e4dc3" translate="yes" xml:space="preserve">
          <source>An application may choose to catch the &lt;code&gt;SyncProviderException&lt;/code&gt; object and retrieve the &lt;code&gt;SyncResolver&lt;/code&gt; object it contains. The &lt;code&gt;SyncResolver&lt;/code&gt; object lists the conflicts row by row and sets a lock on the data source to avoid further conflicts while the current conflicts are being resolved. Further, for each conflict, it provides methods for examining the conflict and setting the value that should be persisted in the data source. After all conflicts have been resolved, an application must call the &lt;code&gt;acceptChanges&lt;/code&gt; method again to write resolved values to the data source. If all of the values in the data source are already the values to be persisted, the method &lt;code&gt;acceptChanges&lt;/code&gt; does nothing.</source>
          <target state="translated">アプリケーションは、 &lt;code&gt;SyncProviderException&lt;/code&gt; オブジェクトをキャッチし、それに含まれる &lt;code&gt;SyncResolver&lt;/code&gt; オブジェクトを取得することを選択できます。 &lt;code&gt;SyncResolver&lt;/code&gt; 行によってオブジェクトリスト競合行と現在の競合が解決されている間、さらに競合を回避するために、データソースのロックを設定します。さらに、競合ごとに、競合を調べてデータソースに保持する必要のある値を設定するためのメソッドを提供します。すべての競合が解決された後、アプリケーションは &lt;code&gt;acceptChanges&lt;/code&gt; メソッドを再度呼び出して、解決された値をデータソースに書き込む必要があります。データソース内のすべての値がすでに永続化される値である場合、メソッド &lt;code&gt;acceptChanges&lt;/code&gt; は何もしません。</target>
        </trans-unit>
        <trans-unit id="968d5a5fff5cc194ef1dd6be86456eb4c6c94e48" translate="yes" xml:space="preserve">
          <source>An application may customize the contents of a registry as it sees fit, so long as it has the appropriate runtime permission.</source>
          <target state="translated">アプリケーションは、適切なランタイム権限を持っている限り、レジストリの内容を適切にカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="4ebf85db2698bfb155ea707d8fec8bb6d08562ce" translate="yes" xml:space="preserve">
          <source>An application may find this information helpful in performance sensitive code.</source>
          <target state="translated">アプリケーションは、この情報がパフォーマンスに敏感なコードで役に立つことがあります。</target>
        </trans-unit>
        <trans-unit id="ddd429144b9902b26b95940c5f9a4cdb6aed1995" translate="yes" xml:space="preserve">
          <source>An application may optionally pass in the flavor to be printed. If this is &lt;code&gt;non-null&lt;/code&gt; choices presented to the user can be better validated against those supported by the services. An application must pass in a &lt;code&gt;PrintRequestAttributeSet&lt;/code&gt; for returning user choices. On calling the &lt;code&gt;PrintRequestAttributeSet&lt;/code&gt; may be empty, or may contain application-specified values.</source>
          <target state="translated">アプリケーションは、オプションで、印刷するフレーバーを渡すことができます。これが &lt;code&gt;non-null&lt;/code&gt; 場合、ユーザーに提示される選択肢は、サービスでサポートされている選択肢に対してより適切に検証できます。アプリケーションは、ユーザーの選択を返すために &lt;code&gt;PrintRequestAttributeSet&lt;/code&gt; を渡す必要があります。 &lt;code&gt;PrintRequestAttributeSet&lt;/code&gt; を呼び出すと、空になるか、アプリケーション指定の値が含まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="5f934c6948f61c9b624106e8b500f0eeb8ab4b49" translate="yes" xml:space="preserve">
          <source>An application may optionally pass in the flavor to be printed. If this is non-null choices presented to the user can be better validated against those supported by the services. An application must pass in a PrintRequestAttributeSet for returning user choices. On calling the PrintRequestAttributeSet may be empty, or may contain application-specified values.</source>
          <target state="translated">アプリケーションは、オプションで印刷するフレーバーを渡すことができます。これが非 null の場合、ユーザに提示される選択肢は、サービスがサポートしているものと比較してより適切に検証することができます。アプリケーションはユーザの選択肢を返すためにPrintRequestAttributeSetを渡さなければなりません。PrintRequestAttributeSetの呼び出し時には、空であってもよいし、アプリケーションが指定した値を含んでいてもよい。</target>
        </trans-unit>
        <trans-unit id="8048d4648afe14dcc05476985b8761d45a544bcc" translate="yes" xml:space="preserve">
          <source>An application may pass in a &lt;code&gt;PrintService&lt;/code&gt; to be initially displayed. A &lt;code&gt;non-null&lt;/code&gt; parameter must be included in the array of browsable services. If this parameter is &lt;code&gt;null&lt;/code&gt; a service is chosen by the implementation.</source>
          <target state="translated">アプリケーションは、最初に表示される &lt;code&gt;PrintService&lt;/code&gt; を渡す場合があります。 &lt;code&gt;non-null&lt;/code&gt; パラメータは、ブラウズ可能なサービスの配列に含まれている必要があります。このパラメーターが &lt;code&gt;null&lt;/code&gt; の場合、サービスは実装によって選択されます。</target>
        </trans-unit>
        <trans-unit id="9dafe0eaf8756d624939acbe220b2060edebc94a" translate="yes" xml:space="preserve">
          <source>An application may pass in a PrintService to be initially displayed. A non-null parameter must be included in the array of browsable services. If this parameter is null a service is chosen by the implementation.</source>
          <target state="translated">アプリケーションは、最初に表示するPrintServiceを渡すことができます。NULLでないパラメータは、ブラウズ可能なサービスの配列に含まれていなければなりません。このパラメータがnullの場合は、実装によってサービスが選択されます。</target>
        </trans-unit>
        <trans-unit id="9208d6da95d99908a9e855fc3b4d326dbf9dfc15" translate="yes" xml:space="preserve">
          <source>An application may set the size and location of an invisible &lt;code&gt;Window&lt;/code&gt; arbitrarily, but the window management system may subsequently change its size and/or location when the &lt;code&gt;Window&lt;/code&gt; is made visible. One or more &lt;code&gt;ComponentEvent&lt;/code&gt;s will be generated to indicate the new geometry.</source>
          <target state="translated">アプリケーションは、不可視のサイズと位置を設定することができる &lt;code&gt;Window&lt;/code&gt; 任意に、しかしときに、ウィンドウ管理システムは、続いて、その大きさ及び/又は位置を変更することができる &lt;code&gt;Window&lt;/code&gt; 可視化されます。新しいジオメトリを示すために、1つ以上の &lt;code&gt;ComponentEvent&lt;/code&gt; が生成されます。</target>
        </trans-unit>
        <trans-unit id="3fd305553305d2462de72939672750e8a6172ab4" translate="yes" xml:space="preserve">
          <source>An application might use the &lt;a href=&quot;#activeCount()&quot;&gt;activeCount&lt;/a&gt; method to get an estimate of how big the array should be, however</source>
          <target state="translated">ただし、アプリケーションは&lt;a href=&quot;#activeCount()&quot;&gt;activeCount&lt;/a&gt;メソッドを使用して、配列の大きさの見積もりを取得する場合があります。</target>
        </trans-unit>
        <trans-unit id="844d32edb1861fbc956b693c9352055fed9e23e8" translate="yes" xml:space="preserve">
          <source>An application might use the &lt;a href=&quot;#activeGroupCount()&quot;&gt;activeGroupCount&lt;/a&gt; method to get an estimate of how big the array should be, however</source>
          <target state="translated">ただし、アプリケーションは&lt;a href=&quot;#activeGroupCount()&quot;&gt;activeGroupCount&lt;/a&gt;メソッドを使用して、配列の大きさの見積もりを取得する場合があります。</target>
        </trans-unit>
        <trans-unit id="b8cebfcf947cef653ead61b4b25fb704b3e1458a" translate="yes" xml:space="preserve">
          <source>An application might use the &lt;a href=&quot;thread#activeCount--&quot;&gt;activeCount&lt;/a&gt; method to get an estimate of how big the array should be, however</source>
          <target state="translated">ただし、アプリケーションは&lt;a href=&quot;thread#activeCount--&quot;&gt;activeCount&lt;/a&gt;メソッドを使用して、配列の大きさの概算を取得できます。</target>
        </trans-unit>
        <trans-unit id="c43b25ce39e541a3ce9b52903fee93e798ca80a1" translate="yes" xml:space="preserve">
          <source>An application might use the &lt;a href=&quot;threadgroup#activeCount--&quot;&gt;activeCount&lt;/a&gt; method to get an estimate of how big the array should be, however</source>
          <target state="translated">ただし、アプリケーションは&lt;a href=&quot;threadgroup#activeCount--&quot;&gt;activeCount&lt;/a&gt;メソッドを使用して、配列の大きさの概算を取得できます。</target>
        </trans-unit>
        <trans-unit id="71db00cc8d994789c137e61873d70534d3240b28" translate="yes" xml:space="preserve">
          <source>An application might use the &lt;a href=&quot;threadgroup#activeGroupCount--&quot;&gt;activeGroupCount&lt;/a&gt; method to get an estimate of how big the array should be, however</source>
          <target state="translated">ただし、アプリケーションは&lt;a href=&quot;threadgroup#activeGroupCount--&quot;&gt;activeGroupCount&lt;/a&gt;メソッドを使用して、配列の大きさの概算を取得できます。</target>
        </trans-unit>
        <trans-unit id="5110032f75f7ab25dc64c1c8cb464069e864d851" translate="yes" xml:space="preserve">
          <source>An application must pass in an array of print services to browse. The array must be &lt;code&gt;non-null&lt;/code&gt; and non-empty. Typically an application will pass in only &lt;code&gt;PrintServices&lt;/code&gt; capable of printing a particular document flavor.</source>
          <target state="translated">アプリケーションは、参照するために一連の印刷サービスを渡す必要があります。配列は &lt;code&gt;non-null&lt;/code&gt; もない必要があります。通常、アプリケーションは、特定のドキュメントフレーバーを印刷できる &lt;code&gt;PrintServices&lt;/code&gt; のみを渡します。</target>
        </trans-unit>
        <trans-unit id="9e8913034682b04eada59ac157696312403c2e9f" translate="yes" xml:space="preserve">
          <source>An application must pass in an array of print services to browse. The array must be non-null and non-empty. Typically an application will pass in only PrintServices capable of printing a particular document flavor.</source>
          <target state="translated">アプリケーションは、参照する印刷サービスの配列を渡す必要があります。この配列は、非 null で空でなければなりません。通常、アプリケーションは、特定の文書のフレーバーを印刷できる PrintServices のみを渡します。</target>
        </trans-unit>
        <trans-unit id="0b204a2c59cf5a8087f5c69d3a9a53cfe1b797b0" translate="yes" xml:space="preserve">
          <source>An application must subclass the &lt;code&gt;Canvas&lt;/code&gt; class in order to get useful functionality such as creating a custom component. The &lt;code&gt;paint&lt;/code&gt; method must be overridden in order to perform custom graphics on the canvas.</source>
          <target state="translated">カスタムコンポーネントの作成などの便利な機能を取得するには、アプリケーションで &lt;code&gt;Canvas&lt;/code&gt; クラスをサブクラス化する必要があります。 &lt;code&gt;paint&lt;/code&gt; 方法は、キャンバス上のカスタムグラフィックスを実行するためにオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="78606633e0f2708a42a89136e6d4e92baa21911f" translate="yes" xml:space="preserve">
          <source>An application obtains a service loader for a given service by invoking one of the static &lt;code&gt;load&lt;/code&gt; methods of ServiceLoader. If the application is a module, then its module declaration must have a</source>
          <target state="translated">アプリケーションは、ServiceLoaderの静的 &lt;code&gt;load&lt;/code&gt; メソッドの1つを呼び出すことにより、特定のサービスのサービスローダーを取得します。アプリケーションがモジュールの場合、そのモジュール宣言には</target>
        </trans-unit>
        <trans-unit id="3cb84a3dd49c5d89b99ceb5f62997e54570f6cd5" translate="yes" xml:space="preserve">
          <source>An application opening a device explicitly with this call has to close the device by calling &lt;a href=&quot;#close()&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt;. This is necessary to release system resources and allow applications to exit cleanly.</source>
          <target state="translated">この呼び出しでデバイスを明示的に開くアプリケーションは、&lt;a href=&quot;#close()&quot;&gt; &lt;code&gt;close()&lt;/code&gt; を&lt;/a&gt;呼び出してデバイスを閉じる必要があります。これは、システムリソースを解放し、アプリケーションを正常に終了できるようにするために必要です。</target>
        </trans-unit>
        <trans-unit id="2654ccde0ee418a0ddc05fbfc9f140d72a0de785" translate="yes" xml:space="preserve">
          <source>An application opening a device explicitly with this call has to close the device by calling &lt;a href=&quot;mididevice#close--&quot;&gt;&lt;code&gt;close()&lt;/code&gt;&lt;/a&gt;. This is necessary to release system resources and allow applications to exit cleanly.</source>
          <target state="translated">この呼び出しで明示的にデバイスを開くアプリケーションは、&lt;a href=&quot;mididevice#close--&quot;&gt; &lt;code&gt;close()&lt;/code&gt; を&lt;/a&gt;呼び出してデバイスを閉じる必要があります。これは、システムリソースを解放し、アプリケーションを正常に終了させるために必要です。</target>
        </trans-unit>
        <trans-unit id="0136fb89c69c56817234d0ea241fb726a164b9b1" translate="yes" xml:space="preserve">
          <source>An application programmer does not use the &lt;code&gt;PooledConnection&lt;/code&gt; interface directly; rather, it is used by a middle tier infrastructure that manages the pooling of connections.</source>
          <target state="translated">アプリケーションプログラマは、 &lt;code&gt;PooledConnection&lt;/code&gt; インターフェイスを直接使用しません。むしろ、接続のプーリングを管理する中間層インフラストラクチャによって使用されます。</target>
        </trans-unit>
        <trans-unit id="584e1884afd852ed47f49a95c6b1d1a9c3c3a478" translate="yes" xml:space="preserve">
          <source>An application programmer does not use this interface directly; rather, it is used by a transaction manager working in the middle tier server.</source>
          <target state="translated">アプリケーションプログラマはこのインターフェイスを直接使用しません。</target>
        </trans-unit>
        <trans-unit id="bc4c1060d77bad7188ebffc0760f414214d48f37" translate="yes" xml:space="preserve">
          <source>An application programmer will not normally call &lt;code&gt;SQLData&lt;/code&gt; methods directly, and the &lt;code&gt;SQLInput&lt;/code&gt; and &lt;code&gt;SQLOutput&lt;/code&gt; methods are called internally by &lt;code&gt;SQLData&lt;/code&gt; methods, not by application code.</source>
          <target state="translated">アプリケーションプログラマーは通常、 &lt;code&gt;SQLData&lt;/code&gt; メソッドを直接呼び出すことはなく、 &lt;code&gt;SQLInput&lt;/code&gt; メソッドと &lt;code&gt;SQLOutput&lt;/code&gt; メソッドは、アプリケーションコードではなく、 &lt;code&gt;SQLData&lt;/code&gt; メソッドによって内部的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="50eb92a41ad11a218880f81a1296f8b8fdf101a1" translate="yes" xml:space="preserve">
          <source>An application should catch instances of this class only if it must clean up after being terminated asynchronously. If &lt;code&gt;ThreadDeath&lt;/code&gt; is caught by a method, it is important that it be rethrown so that the thread actually dies.</source>
          <target state="translated">アプリケーションは、非同期的に終了した後にクリーンアップする必要がある場合にのみ、このクラスのインスタンスをキャッチする必要があります。 &lt;code&gt;ThreadDeath&lt;/code&gt; がメソッドによってキャッチされた場合、スレッドが実際に停止するように再スローすることが重要です。</target>
        </trans-unit>
        <trans-unit id="c49fd5a8dd636e52dd68846105d011fd47eb26ee" translate="yes" xml:space="preserve">
          <source>An application should not normally try to catch &lt;code&gt;ThreadDeath&lt;/code&gt; unless it must do some extraordinary cleanup operation (note that the throwing of &lt;code&gt;ThreadDeath&lt;/code&gt; causes &lt;code&gt;finally&lt;/code&gt; clauses of &lt;code&gt;try&lt;/code&gt; statements to be executed before the thread officially dies). If a &lt;code&gt;catch&lt;/code&gt; clause catches a &lt;code&gt;ThreadDeath&lt;/code&gt; object, it is important to rethrow the object so that the thread actually dies.</source>
          <target state="translated">特別なクリーンアップ操作を実行する必要がない限り、アプリケーションは通常 &lt;code&gt;ThreadDeath&lt;/code&gt; をキャッチしようとすべきではありません（ &lt;code&gt;ThreadDeath&lt;/code&gt; をスローすると、スレッドが正式に終了する前に、 &lt;code&gt;try&lt;/code&gt; ステートメントの &lt;code&gt;finally&lt;/code&gt; 節が実行されることに注意してください）。 &lt;code&gt;catch&lt;/code&gt; 節が &lt;code&gt;ThreadDeath&lt;/code&gt; オブジェクトをキャッチする場合、スレッドを実際に停止させるためにオブジェクトを再スローすることが重要です。</target>
        </trans-unit>
        <trans-unit id="bb54fe294e3ca994cff70a20638a17532b2224db" translate="yes" xml:space="preserve">
          <source>An application starts out by instantiating a &lt;code&gt;GSSManager&lt;/code&gt; which then serves as a factory for a security context. An application can use specific principal names and credentials that are also created using the GSSManager; or it can instantiate a context with system defaults. It then goes through a context establishment loop. Once a context is established with the peer, authentication is complete. Data protection such as integrity and confidentiality can then be obtained from this context.</source>
          <target state="translated">アプリケーションは、 &lt;code&gt;GSSManager&lt;/code&gt; をインスタンス化することから始まり、GSSManagerはセキュリティコンテキストのファクトリとして機能します。アプリケーションは、GSSManagerを使用して作成された特定のプリンシパル名と資格情報を使用できます。または、システムのデフォルトでコンテキストをインスタンス化できます。次に、コンテキスト確立ループを通過します。ピアとのコンテキストが確立されると、認証が完了します。整合性や機密性などのデータ保護は、このコンテキストから取得できます。</target>
        </trans-unit>
        <trans-unit id="719c7fbff5aad654d0c952998af4a9c7ddae21f4" translate="yes" xml:space="preserve">
          <source>An application that obtains a service loader for a given service is indifferent to whether providers of the service are deployed in modules or packaged as JAR files. The application instantiates service providers via the service loader's iterator, or via &lt;a href=&quot;serviceloader.provider&quot;&gt;&lt;code&gt;Provider&lt;/code&gt;&lt;/a&gt; objects in the service loader's stream, without knowledge of the service providers' locations.</source>
          <target state="translated">特定のサービスのサービスローダーを取得するアプリケーションは、サービスのプロバイダーがモジュールにデプロイされているか、JARファイルとしてパッケージ化されているかには関係ありません。アプリケーションは、サービスプロバイダーの場所を知らなくても、サービスローダーのイテレーターまたはサービスローダーのストリーム内の&lt;a href=&quot;serviceloader.provider&quot;&gt; &lt;code&gt;Provider&lt;/code&gt; &lt;/a&gt;オブジェクトを介してサービスプロバイダーをインスタンス化します。</target>
        </trans-unit>
        <trans-unit id="b509256c238d72c9c7d490a01e3a6dee12555a68" translate="yes" xml:space="preserve">
          <source>An application typically does not deal directly with these interfaces. Instead, it deals with classes that &lt;em&gt;implement&lt;/em&gt; these interfaces. The application gets these classes either as part of a repertoire of extended operations standardized through the IETF, or from directory vendors for vendor-specific extended operations. The request classes should have constructors that accept arguments in a type-safe and user-friendly manner, while the response classes should have access methods for getting the data of the response in a type-safe and user-friendly manner. Internally, the request/response classes deal with encoding and decoding BER values.</source>
          <target state="translated">通常、アプリケーションはこれらのインターフェースを直接処理しません。代わりに、これらのインターフェースを&lt;em&gt;実装&lt;/em&gt;するクラスを扱います。アプリケーションは、IETFを通じて標準化された拡張操作のレパートリーの一部として、またはベンダー固有の拡張操作のためにディレクトリベンダーからこれらのクラスを取得します。リクエストクラスにはタイプセーフでユーザーフレンドリーな方法で引数を受け入れるコンストラクターが必要ですが、レスポンスクラスにはタイプセーフでユーザーフレンドリーな方法でレスポンスのデータを取得するためのアクセスメソッドが必要です。内部的には、要求/応答クラスはBER値のエンコードとデコードを処理します。</target>
        </trans-unit>
        <trans-unit id="cf87097b1d5a717b4f2ac33f62d029328ac00d54" translate="yes" xml:space="preserve">
          <source>An application typically does not deal directly with this interface. Instead, it deals with classes that &lt;em&gt;implement&lt;/em&gt; this interface. The application gets control classes either as part of a repertoire of controls standardized through the IETF, or from directory vendors for vendor-specific controls. The request control classes should have constructors that accept arguments in a type-safe and user-friendly manner, while the response control classes should have access methods for getting the data of the response in a type-safe and user-friendly manner. Internally, the request/response control classes deal with encoding and decoding BER values.</source>
          <target state="translated">通常、アプリケーションはこのインターフェースを直接処理しません。代わりに、このインターフェイスを&lt;em&gt;実装&lt;/em&gt;するクラスを扱います。アプリケーションは、IETFを通じて標準化されたコントロールのレパートリーの一部として、またはベンダー固有のコントロールのディレクトリベンダーからコントロールクラスを取得します。リクエストコントロールクラスには、タイプセーフでユーザーフレンドリーな方法で引数を受け入れるコンストラクターが必要ですが、レスポンスコントロールクラスには、タイプセーフでユーザーフレンドリーな方法でレスポンスのデータを取得するためのアクセスメソッドが必要です。内部的には、要求/応答制御クラスはBER値のエンコードとデコードを処理します。</target>
        </trans-unit>
        <trans-unit id="a3d727468a5dad82ca2729c7404152e5156ac534" translate="yes" xml:space="preserve">
          <source>An application, for example, can register its interest in changes to objects in a context as follows:</source>
          <target state="translated">例えば、アプリケーションは、以下のようにコンテキスト内のオブジェクトの変更に関心を登録することができます。</target>
        </trans-unit>
        <trans-unit id="8c9caf20fe0e31da145fef005b6b411b2f51e161" translate="yes" xml:space="preserve">
          <source>An appropriate response in this case is to either return an empty list of completions,</source>
          <target state="translated">この場合の適切な応答は、空の補完リストを返すことです。</target>
        </trans-unit>
        <trans-unit id="f34e9d5883b37bdc4090ceb20060a1ec962d193d" translate="yes" xml:space="preserve">
          <source>An arbitrary argument of the event.</source>
          <target state="translated">イベントの任意の引数。</target>
        </trans-unit>
        <trans-unit id="ce3206d66c7063f14359ab03e4a73340a03a3fa5" translate="yes" xml:space="preserve">
          <source>An arbitrary argument of the event. The value of this field depends on the type of event. &lt;code&gt;arg&lt;/code&gt; has been replaced by event specific property.</source>
          <target state="translated">イベントの任意の引数。このフィールドの値は、イベントのタイプによって異なります。 &lt;code&gt;arg&lt;/code&gt; はイベント固有のプロパティに置き換えられました。</target>
        </trans-unit>
        <trans-unit id="25918f2ec95968d5250d4bfa652e679922307e41" translate="yes" xml:space="preserve">
          <source>An array appropriate for the specified data type.</source>
          <target state="translated">指定されたデータ型に適した配列。</target>
        </trans-unit>
        <trans-unit id="3375b2b67d9fbf3014f9194bef73b350e41d04a8" translate="yes" xml:space="preserve">
          <source>An array of (Notification,listenerID) pairs corresponding to the returned notifications and the listeners they correspond to.</source>
          <target state="translated">返された通知とそれに対応するリスナーに対応する (Notification,listenerID)ペアの配列。</target>
        </trans-unit>
        <trans-unit id="3d3e5b5413218d15a0eaa8ef1a80ddeb592d3cb6" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;Class&lt;/code&gt; objects to be returned from &lt;code&gt;getInputTypes&lt;/code&gt;, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getInputTypes&lt;/code&gt; から返される &lt;code&gt;Class&lt;/code&gt; オブジェクトの配列で、最初は &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="134d246dade1f3b91ae7d4322f377b540dc09583" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;Class&lt;/code&gt; objects to be returned from &lt;code&gt;getOutputTypes&lt;/code&gt;, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getOutputTypes&lt;/code&gt; から返される &lt;code&gt;Class&lt;/code&gt; オブジェクトの配列で、最初は &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="986642b0e80eb019e10cb87b0f61b946091b07ae" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;File&lt;/code&gt; objects denoting the available filesystem roots, or &lt;code&gt;null&lt;/code&gt; if the set of roots could not be determined. The array will be empty if there are no filesystem roots.</source>
          <target state="translated">使用可能なファイルシステムルートを示す &lt;code&gt;File&lt;/code&gt; オブジェクトの配列、またはルートのセットを特定できなかった場合は &lt;code&gt;null&lt;/code&gt; 。ファイルシステムのルートがない場合、配列は空になります。</target>
        </trans-unit>
        <trans-unit id="aa11442caa640c34cbfaf660f3302a13ef045693" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;Locale&lt;/code&gt;s that may be used to localize warning messages and compression setting values, or &lt;code&gt;null&lt;/code&gt; if localization is not supported.</source>
          <target state="translated">警告メッセージと圧縮設定値をローカライズするために使用できる &lt;code&gt;Locale&lt;/code&gt; の配列。ローカリゼーションがサポートされていない場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2f452eecd6bde221a71b85ba04b3ebcc45d28a9c" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;Locale&lt;/code&gt;s that may be used to localize warning messages and compression setting values, or &lt;code&gt;null&lt;/code&gt; if localization is not supported. By default it is initialized to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">警告メッセージと圧縮設定値のローカライズに使用できる &lt;code&gt;Locale&lt;/code&gt; の配列。ローカライズがサポートされていない場合は &lt;code&gt;null&lt;/code&gt; 。デフォルトでは &lt;code&gt;null&lt;/code&gt; に初期化されます。</target>
        </trans-unit>
        <trans-unit id="f5828ac1272e6af9b447a80ae8aa023505636997" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;Locale&lt;/code&gt;s which may be used to localize warning messages, or &lt;code&gt;null&lt;/code&gt; if localization is not supported.</source>
          <target state="translated">警告メッセージのローカライズに使用できる &lt;code&gt;Locale&lt;/code&gt; の配列。ローカライズがサポートされていない場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9ef7312b21040e50977465666bf0eb762b161e14" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;MBeanAttributeInfo&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;MBeanAttributeInfo&lt;/code&gt; オブジェクトの配列。</target>
        </trans-unit>
        <trans-unit id="97cb0ffca3f9a79bde835c8f0514bf86a9f9fd2b" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;MBeanConstructorInfo&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;MBeanConstructorInfo&lt;/code&gt; オブジェクトの配列。</target>
        </trans-unit>
        <trans-unit id="099025ea477af03698be0f937824d72208a3d9c4" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;MBeanNotificationInfo&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;MBeanNotificationInfo&lt;/code&gt; オブジェクトの配列。</target>
        </trans-unit>
        <trans-unit id="d037385b928aee7ba03da85148233e55db4d3e27" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;MBeanOperationInfo&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;MBeanOperationInfo&lt;/code&gt; オブジェクトの配列。</target>
        </trans-unit>
        <trans-unit id="857b8e7db26743b5bf509c5ad095fe8a81853346" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;MBeanParameterInfo&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;MBeanParameterInfo&lt;/code&gt; オブジェクトの配列。</target>
        </trans-unit>
        <trans-unit id="439c241981cb9b98bf4921d2be030bb41a831385" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;Method&lt;/code&gt; objects for the target methods within the target listener interface that will get called when events are fired.</source>
          <target state="translated">イベントが発生したときに呼び出されるターゲットリスナーインターフェース内のターゲット &lt;code&gt;Method&lt;/code&gt; オブジェクトの配列。</target>
        </trans-unit>
        <trans-unit id="a11f54d296a121e0d0a900e2e862c8be1025eb1e" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;MethodDescriptor&lt;/code&gt; objects for the target methods within the target listener interface that will get called when events are fired.</source>
          <target state="translated">イベントが発生したときに呼び出されるターゲットリスナーインターフェース内のターゲットメソッドの &lt;code&gt;MethodDescriptor&lt;/code&gt; オブジェクトの配列。</target>
        </trans-unit>
        <trans-unit id="09bfd33147144d479ed0cedfcc852f06a19d8e48" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;String&lt;/code&gt;s containing the class names of any additional image metadata formats supported by this plug-in, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">このプラグインでサポートされている追加の画像メタデータ形式のクラス名を含む &lt;code&gt;String&lt;/code&gt; の配列で、最初は &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0c6bf3507b6a0a635ddcff11b09f3f52d92b7b1b" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;String&lt;/code&gt;s containing the class names of any additional stream metadata formats supported by this plug-in, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">このプラグインでサポートされている追加のストリームメタデータ形式のクラス名を含む &lt;code&gt;String&lt;/code&gt; の配列で、最初は &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c0d1beebcc982c07a604b60c0fa883229539afcf" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;String&lt;/code&gt;s containing the names of any additional image metadata formats supported by this plug-in, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">このプラグインでサポートされる追加の画像メタデータ形式の名前を含む &lt;code&gt;String&lt;/code&gt; の配列で、最初は &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="47280e838c730e2ac9ec606b3328a9cb7b71d05c" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;String&lt;/code&gt;s containing the names of any additional stream metadata formats supported by this plug-in, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">このプラグインでサポートされている追加のストリームメタデータ形式の名前を含む &lt;code&gt;String&lt;/code&gt; の配列で、最初は &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bae5e78439ab76a56e61ac72d3a1ed6fdd6ada68" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;String&lt;/code&gt;s containing the names of the available compression types.</source>
          <target state="translated">使用可能な圧縮タイプの名前を含む &lt;code&gt;String&lt;/code&gt; の配列。</target>
        </trans-unit>
        <trans-unit id="8c26aaacf7ce2995c9bfe1424377ba6a51a90ec4" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;String&lt;/code&gt;s containing the names of the available compression types. Subclasses must set the value manually.</source>
          <target state="translated">使用可能な圧縮タイプの名前を含む &lt;code&gt;String&lt;/code&gt; の配列。サブクラスは手動で値を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="6bb43612b6d5a79a634e83f569fea3fb6f82d670" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;int&lt;/code&gt;s indicating which source bands will be used, or &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">使用されるソースバンドを示す &lt;code&gt;int&lt;/code&gt; の配列、または &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="da4e0abf0506b17739ce4bb8e037ed106b77be54" translate="yes" xml:space="preserve">
          <source>An array of &lt;code&gt;int&lt;/code&gt;s indicating which source bands will be used, or &lt;code&gt;null&lt;/code&gt;. If &lt;code&gt;null&lt;/code&gt;, the set of source bands to be used is as described in the comment for the &lt;code&gt;setSourceBands&lt;/code&gt; method. No value should be allowed to be negative.</source>
          <target state="translated">使用するソースバンドを示す &lt;code&gt;int&lt;/code&gt; の配列、または &lt;code&gt;null&lt;/code&gt; 。 &lt;code&gt;null&lt;/code&gt; の場合、使用されるソースバンドのセットは、 &lt;code&gt;setSourceBands&lt;/code&gt; メソッドのコメントで説明されているとおりです。負の値は許されません。</target>
        </trans-unit>
        <trans-unit id="5f8a9f14e2ca1c5025b6a7ff7497a534a4b2b0cb" translate="yes" xml:space="preserve">
          <source>An array of ISO 3166 two-letter country codes.</source>
          <target state="translated">ISO 3166の2文字の国コードの配列。</target>
        </trans-unit>
        <trans-unit id="96fbbd22194523e7d590e7def9de46b527c3ac2b" translate="yes" xml:space="preserve">
          <source>An array of ISO 639 two-letter language codes.</source>
          <target state="translated">ISO 639の2文字言語コードの配列。</target>
        </trans-unit>
        <trans-unit id="1a685af7760d947395e5088cc9d1ca76b1336256" translate="yes" xml:space="preserve">
          <source>An array of abstract pathnames denoting the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns &lt;code&gt;null&lt;/code&gt; if this abstract pathname does not denote a directory, or if an I/O error occurs.</source>
          <target state="translated">この抽象パス名が示すディレクトリ内のファイルとディレクトリを示す抽象パス名の配列。ディレクトリが空の場合、配列は空になります。この抽象パス名がディレクトリを表していない場合、またはI / Oエラーが発生した場合は、 &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="fb18981f50ec6ba086453d6b4e535b514bd22117" translate="yes" xml:space="preserve">
          <source>An array of all TIFF fields in order of numerically increasing tag number.</source>
          <target state="translated">すべての TIFF フィールドをタグ番号の高い順に並べた配列。</target>
        </trans-unit>
        <trans-unit id="1247249a019a2d31c63bafe6198d962bc2529d9e" translate="yes" xml:space="preserve">
          <source>An array of all locales for which this locale service provider can provide localized objects or names.</source>
          <target state="translated">このロケールサービスプロバイダが地域化されたオブジェクトや名前を提供できるすべてのロケールの配列。</target>
        </trans-unit>
        <trans-unit id="84f751c7debce4343e28a7b0cd27fb91761da472" translate="yes" xml:space="preserve">
          <source>An array of attribute ids identifying the attributes that will be returned. Can be null.</source>
          <target state="translated">返される属性を識別する属性 ID の配列。null を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="bec51aa46f9241e86e4cc3153bbe5f4c83c2df96" translate="yes" xml:space="preserve">
          <source>An array of bytes that was provided by the creator of the stream.</source>
          <target state="translated">ストリームの作成者から提供されたバイトの配列。</target>
        </trans-unit>
        <trans-unit id="50c3bc608966755e1f6382a14ef162f78ffc304c" translate="yes" xml:space="preserve">
          <source>An array of bytes that was provided by the creator of the stream. Elements &lt;code&gt;buf[0]&lt;/code&gt; through &lt;code&gt;buf[count-1]&lt;/code&gt; are the only bytes that can ever be read from the stream; element &lt;code&gt;buf[pos]&lt;/code&gt; is the next byte to be read.</source>
          <target state="translated">ストリームの作成者によって提供されたバイトの配列。要素 &lt;code&gt;buf[0]&lt;/code&gt; から &lt;code&gt;buf[count-1]&lt;/code&gt; までは、ストリームから読み取ることができる唯一のバイトです。要素 &lt;code&gt;buf[pos]&lt;/code&gt; は、次に読み込まれるバイトです。</target>
        </trans-unit>
        <trans-unit id="0749ec0b49fa5b6397b8d454927e3ae1aebd126c" translate="yes" xml:space="preserve">
          <source>An array of characters or a string can also have an ascent, a descent, and an advance width. The ascent of the array is the maximum ascent of any character in the array. The descent is the maximum descent of any character in the array. The advance width is the sum of the advance widths of each of the characters in the character array. The advance of a &lt;code&gt;String&lt;/code&gt; is the distance along the baseline of the &lt;code&gt;String&lt;/code&gt;. This distance is the width that should be used for centering or right-aligning the &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">文字の配列または文字列は、上昇、下降、および前進幅を持つこともできます。配列の上昇は、配列内の任意の文字の最大上昇です。降下は、配列内の任意の文字の最大降下です。前進幅は、文字配列内の各文字の前進幅の合計です。予め &lt;code&gt;String&lt;/code&gt; のベースラインに沿った距離である &lt;code&gt;String&lt;/code&gt; 。この距離は、 &lt;code&gt;String&lt;/code&gt; 中央揃えまたは右揃えにするために使用する幅です。</target>
        </trans-unit>
        <trans-unit id="c0b0729a066fdb626ec1690d6f3269f21870473c" translate="yes" xml:space="preserve">
          <source>An array of file filters.</source>
          <target state="translated">ファイルフィルタの配列。</target>
        </trans-unit>
        <trans-unit id="a729d0bda2fade78392b6c8a928179fcd1324c3e" translate="yes" xml:space="preserve">
          <source>An array of installed locales.</source>
          <target state="translated">インストールされたロケールの配列。</target>
        </trans-unit>
        <trans-unit id="d6d58003ce8b767e2e48a2867e197eb64fc51b57" translate="yes" xml:space="preserve">
          <source>An array of locales for which localized &lt;code&gt;BreakIterator&lt;/code&gt; instances are available.</source>
          <target state="translated">ローカライズされた &lt;code&gt;BreakIterator&lt;/code&gt; インスタンスが利用可能なロケールの配列。</target>
        </trans-unit>
        <trans-unit id="c66081e2ced3ad8c4f8f67af5cdf49b57dab5365" translate="yes" xml:space="preserve">
          <source>An array of locales for which localized &lt;code&gt;Calendar&lt;/code&gt; instances are available.</source>
          <target state="translated">ローカライズされた &lt;code&gt;Calendar&lt;/code&gt; インスタンスが利用可能なロケールの配列。</target>
        </trans-unit>
        <trans-unit id="68c4f2a7d55fe9d1e74aa99805ef5cf0eaad9bd9" translate="yes" xml:space="preserve">
          <source>An array of locales for which localized &lt;code&gt;Collator&lt;/code&gt; instances are available.</source>
          <target state="translated">ローカライズされた &lt;code&gt;Collator&lt;/code&gt; インスタンスが利用可能なロケールの配列。</target>
        </trans-unit>
        <trans-unit id="9f8979fff6f18828e2e07a3db6852fccd5c6cb11" translate="yes" xml:space="preserve">
          <source>An array of locales for which localized &lt;code&gt;DateFormat&lt;/code&gt; instances are available.</source>
          <target state="translated">ローカライズされた &lt;code&gt;DateFormat&lt;/code&gt; インスタンスが利用可能なロケールの配列。</target>
        </trans-unit>
        <trans-unit id="fa4683de0abf7aaba311b8aff3f5bb67c183e839" translate="yes" xml:space="preserve">
          <source>An array of locales for which localized &lt;code&gt;DateFormatSymbols&lt;/code&gt; instances are available.</source>
          <target state="translated">ローカライズされた &lt;code&gt;DateFormatSymbols&lt;/code&gt; インスタンスが利用可能なロケールの配列。</target>
        </trans-unit>
        <trans-unit id="6bb475e666ac44ef2833bf2636d6095cb9b550d0" translate="yes" xml:space="preserve">
          <source>An array of locales for which localized &lt;code&gt;NumberFormat&lt;/code&gt; instances are available.</source>
          <target state="translated">ローカライズされた &lt;code&gt;NumberFormat&lt;/code&gt; インスタンスが利用可能なロケールの配列。</target>
        </trans-unit>
        <trans-unit id="e96a8e8e65d8956d86c828401e17dbce9341139a" translate="yes" xml:space="preserve">
          <source>An array of names of classes implementing &lt;code&gt;IIOMetadataFormat&lt;/code&gt; and representing the metadata formats, other than the standard and native formats, that are supported by this plug-in, initialized to &lt;code&gt;null&lt;/code&gt; and set via the constructor.</source>
          <target state="translated">&lt;code&gt;IIOMetadataFormat&lt;/code&gt; を実装し、このプラグインでサポートされる、標準およびネイティブ形式以外のメタデータ形式を表すクラスの名前の配列。nullに初期化され、コンストラクターを介して設定され &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="262378c5aa6d3817b25ebd77f5c879a438a3423c" translate="yes" xml:space="preserve">
          <source>An array of names of formats, other than the standard and native formats, that are supported by this plug-in, initialized to &lt;code&gt;null&lt;/code&gt; and set via the constructor.</source>
          <target state="translated">このプラグインでサポートされている、標準およびネイティブ形式以外の形式の名前の配列。nullに初期化され、コンストラクターを介して設定され &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2897df0b726ebc23204e3fea548a13dccf63622e" translate="yes" xml:space="preserve">
          <source>An array of object references in which elements may be updated atomically.</source>
          <target state="translated">要素が原子的に更新される可能性のあるオブジェクト参照の配列。</target>
        </trans-unit>
        <trans-unit id="0a7e0047daf5f3df32d533e82f11c1139edd187c" translate="yes" xml:space="preserve">
          <source>An array of object references in which elements may be updated atomically. See the &lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt;&lt;code&gt;VarHandle&lt;/code&gt;&lt;/a&gt; specification for descriptions of the properties of atomic accesses.</source>
          <target state="translated">要素がアトミックに更新される可能性のあるオブジェクト参照の配列。アトミックアクセスのプロパティの説明については、&lt;a href=&quot;../../../lang/invoke/varhandle&quot;&gt; &lt;code&gt;VarHandle&lt;/code&gt; &lt;/a&gt;仕様を参照してください。</target>
        </trans-unit>
        <trans-unit id="fd0bb8c414320ed0f0c3a97caa9a14007a27cde2" translate="yes" xml:space="preserve">
          <source>An array of object references in which elements may be updated atomically. See the &lt;a href=&quot;package-summary&quot;&gt;&lt;code&gt;java.util.concurrent.atomic&lt;/code&gt;&lt;/a&gt; package specification for description of the properties of atomic variables.</source>
          <target state="translated">要素をアトミックに更新できるオブジェクト参照の配列。アトミック変数のプロパティの説明については、&lt;a href=&quot;package-summary&quot;&gt; &lt;code&gt;java.util.concurrent.atomic&lt;/code&gt; &lt;/a&gt;パッケージ仕様を参照してください。</target>
        </trans-unit>
        <trans-unit id="241fd4db3ffb93809658c8704f4694c51f33ab7d" translate="yes" xml:space="preserve">
          <source>An array of objects is interpreted as a series of messages (one per object) arranged in a vertical stack. The interpretation is recursive -- each object in the array is interpreted according to its type.</source>
          <target state="translated">オブジェクトの配列は、垂直方向のスタックに配置された一連のメッセージ(オブジェクトごとに1つ)として解釈されます。この解釈は再帰的で、配列内の各オブジェクトはその型に応じて解釈されます。</target>
        </trans-unit>
        <trans-unit id="0be7be800cb0555f3b94cd5454f727687a4ad285" translate="yes" xml:space="preserve">
          <source>An array of possible values if the value for the field &lt;code&gt;DriverPropertyInfo.value&lt;/code&gt; may be selected from a particular set of values; otherwise null.</source>
          <target state="translated">フィールド &lt;code&gt;DriverPropertyInfo.value&lt;/code&gt; の値が特定の値のセットから選択される可能性がある場合、可能な値の配列。それ以外の場合はnull。</target>
        </trans-unit>
        <trans-unit id="934aad52563b5414334511c0f24bd922b859f0b1" translate="yes" xml:space="preserve">
          <source>An array of preferred tile size range pairs.</source>
          <target state="translated">優先されるタイルサイズの範囲のペアの配列。</target>
        </trans-unit>
        <trans-unit id="823ae1f2066fcedd303f568ca8bac961a002dfa5" translate="yes" xml:space="preserve">
          <source>An array of preferred tile size range pairs. The default value is &lt;code&gt;null&lt;/code&gt;, which indicates that there are no preferred sizes. If the value is non-&lt;code&gt;null&lt;/code&gt;, it must have an even length of at least two.</source>
          <target state="translated">推奨されるタイルサイズ範囲のペアの配列。デフォルト値は &lt;code&gt;null&lt;/code&gt; で、適切なサイズがないことを示します。値が &lt;code&gt;null&lt;/code&gt; 以外の場合は、長さが少なくとも2である必要があります。</target>
        </trans-unit>
        <trans-unit id="228a80770c07ae269508ac6afab96362f4950688" translate="yes" xml:space="preserve">
          <source>An array of primitive type such as &lt;code&gt;long[]&lt;/code&gt; can be represented directly as an Open Type. Thus, &lt;em&gt;openType(&lt;/em&gt;&lt;code&gt;
      long[]&lt;/code&gt;&lt;em&gt;)&lt;/em&gt; is &lt;code&gt;
      ArrayType.getPrimitiveArrayType(long[].class)&lt;/code&gt;, and &lt;em&gt;opendata(&lt;/em&gt;&lt;code&gt;long[]&lt;/code&gt;&lt;em&gt;)&lt;/em&gt; is &lt;code&gt;
      long[]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;long[]&lt;/code&gt; などのプリミティブ型の配列は、Open型として直接表すことができます。したがって、&lt;em&gt;openType（&lt;/em&gt; &lt;code&gt; long[]&lt;/code&gt; &lt;em&gt;）&lt;/em&gt;は &lt;code&gt; ArrayType.getPrimitiveArrayType(long[].class)&lt;/code&gt; &lt;em&gt;。class &lt;/em&gt;）であり、&lt;em&gt;opendata（&lt;/em&gt; &lt;code&gt;long[]&lt;/code&gt; &lt;em&gt;）&lt;/em&gt;は &lt;code&gt; long[]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f381ae0c3269444d63257e301d2361d80ac7d062" translate="yes" xml:space="preserve">
          <source>An array of primitive type such as &lt;code&gt;long[]&lt;/code&gt; can be represented directly as an Open Type. Thus, &lt;em&gt;openType(&lt;/em&gt;&lt;code&gt;long[]&lt;/code&gt;&lt;em&gt;)&lt;/em&gt; is &lt;code&gt;ArrayType.getPrimitiveArrayType(long[].class)&lt;/code&gt;, and &lt;em&gt;opendata(&lt;/em&gt;&lt;code&gt;long[]&lt;/code&gt;&lt;em&gt;)&lt;/em&gt; is &lt;code&gt;long[]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;long[]&lt;/code&gt; などのプリミティブ型の配列は、オープンタイプとして直接表すことができます。したがって、&lt;em&gt;openType（&lt;/em&gt; &lt;code&gt;long[]&lt;/code&gt; &lt;em&gt;）&lt;/em&gt;は &lt;code&gt;ArrayType.getPrimitiveArrayType(long[].class)&lt;/code&gt; &lt;em&gt;。class &lt;/em&gt;）であり、&lt;em&gt;opendata（&lt;/em&gt; &lt;code&gt;long[]&lt;/code&gt; &lt;em&gt;）&lt;/em&gt;は &lt;code&gt;long[]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="761f07384d65aa2a3aa21cda74da36e773f992d1" translate="yes" xml:space="preserve">
          <source>An array of strings naming the files and directories in the directory denoted by this abstract pathname that were accepted by the given &lt;code&gt;filter&lt;/code&gt;. The array will be empty if the directory is empty or if no names were accepted by the filter. Returns &lt;code&gt;null&lt;/code&gt; if this abstract pathname does not denote a directory, or if an I/O error occurs.</source>
          <target state="translated">この抽象パス名が示すディレクトリ内のファイルおよびディレクトリを指定する文字列の配列で、指定された &lt;code&gt;filter&lt;/code&gt; によって受け入れられました。ディレクトリーが空の場合、またはフィルターが名前を受け入れなかった場合、配列は空になります。この抽象パス名がディレクトリを表していない場合、またはI / Oエラーが発生した場合は、 &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="4dcd76d7d8936c701b86c8f0d5d00d1e579f5d22" translate="yes" xml:space="preserve">
          <source>An array of strings naming the files and directories in the directory denoted by this abstract pathname. The array will be empty if the directory is empty. Returns &lt;code&gt;null&lt;/code&gt; if this abstract pathname does not denote a directory, or if an I/O error occurs.</source>
          <target state="translated">この抽象パス名が示すディレクトリ内のファイルとディレクトリを指定する文字列の配列。ディレクトリが空の場合、配列は空になります。この抽象パス名がディレクトリを表していない場合、またはI / Oエラーが発生した場合は、 &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="10dc6859e8526130416f7152e9a4491502d2247c" translate="yes" xml:space="preserve">
          <source>An array of strings to be returned from &lt;code&gt;getFileSuffixes&lt;/code&gt;, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getFileSuffixes&lt;/code&gt; から返される文字列の配列で、最初は &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6d8c89a0904ecb41e61f333543dc6e274074fe69" translate="yes" xml:space="preserve">
          <source>An array of strings to be returned from &lt;code&gt;getFormatNames&lt;/code&gt;, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getFormatNames&lt;/code&gt; から返される文字列の配列。最初は &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="030bd4856055ab04cbf48a78751b8b2ae10b21e0" translate="yes" xml:space="preserve">
          <source>An array of strings to be returned from &lt;code&gt;getFormatNames&lt;/code&gt;, initially &lt;code&gt;null&lt;/code&gt;. Constructors should set this to a non-&lt;code&gt;null&lt;/code&gt; value.</source>
          <target state="translated">&lt;code&gt;getFormatNames&lt;/code&gt; から返される文字列の配列で、最初は &lt;code&gt;null&lt;/code&gt; です。コンストラクタはこれを &lt;code&gt;null&lt;/code&gt; 以外の値に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="dd83c0c428a941cf564206213fb272be4e98e0f3" translate="yes" xml:space="preserve">
          <source>An array of strings to be returned from &lt;code&gt;getImageReaderSpiNames&lt;/code&gt;, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getImageReaderSpiNames&lt;/code&gt; から返される文字列の配列で、最初は &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="809ddbc54d6752597f0e6989721cf6e2270ecd80" translate="yes" xml:space="preserve">
          <source>An array of strings to be returned from &lt;code&gt;getImageWriterSpiNames&lt;/code&gt;, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getImageWriterSpiNames&lt;/code&gt; から返される文字列の配列で、最初は &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cafa442855686f22c535a31c64a7ed2dd61b5332" translate="yes" xml:space="preserve">
          <source>An array of strings to be returned from &lt;code&gt;getMIMETypes&lt;/code&gt;, initially &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getMIMETypes&lt;/code&gt; から返される文字列の配列で、最初は &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="13c3c10ec355da687f48ba12684b50cb9ab66121" translate="yes" xml:space="preserve">
          <source>An array of supported signature algorithms, in descending order of preference. The return value is an empty array if no signature algorithm is supported.</source>
          <target state="translated">サポートされている署名アルゴリズムの配列。返り値は、サポートされている署名アルゴリズムがない場合は空の配列となります。</target>
        </trans-unit>
        <trans-unit id="9899ef2c113960b5b4a6da8b82115c9bef30b63b" translate="yes" xml:space="preserve">
          <source>An array of supported signature algorithms, in descending order of preference. The return value is an empty array if the peer has not sent the supported signature algorithms.</source>
          <target state="translated">サポートされている署名アルゴリズムの配列。相手がサポートされている署名アルゴリズムを送信していない場合、戻り値は空の配列となります。</target>
        </trans-unit>
        <trans-unit id="0011cb84f3d514765cbd0dbb765891e88e0cb010" translate="yes" xml:space="preserve">
          <source>An array of the command options which will be passed to the new child command by rmid. Note that rmid may add other options before or after these options, or both. Never returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">rmidによって新しい子コマンドに渡されるコマンドオプションの配列。rmidは、これらのオプションの前または後に、あるいはその両方で他のオプションを追加する場合があることに注意してください。 &lt;code&gt;null&lt;/code&gt; を返すことはありません。</target>
        </trans-unit>
        <trans-unit id="4965093f8d91780dfb936cd2f5084d7b6a6afd3c" translate="yes" xml:space="preserve">
          <source>An array type.</source>
          <target state="translated">配列型。</target>
        </trans-unit>
        <trans-unit id="ae1f55e24b18c4a7636f2709627cceb24145520e" translate="yes" xml:space="preserve">
          <source>An asterisk ('*') is replaced by a backslash (\) followed by an asterisk.</source>
          <target state="translated">アスタリスク('*')は、バックスラッシュ('*')の後にアスタリスクが続きます。</target>
        </trans-unit>
        <trans-unit id="b6c9768ff7e6901ac92020f4184af0011ee5f826" translate="yes" xml:space="preserve">
          <source>An asterisk may appear by itself, or if immediately preceded by a &quot;.&quot; may appear at the end of the target name, to signify a wildcard match.</source>
          <target state="translated">アスタリスクは単独で表示されることもあれば、ワイルドカードマッチを示すためにターゲット名の最後に「.</target>
        </trans-unit>
        <trans-unit id="f73a650d8b0b2abdf91d7c6e87e134a597a8c0fc" translate="yes" xml:space="preserve">
          <source>An asynchronous channel for reading, writing, and manipulating a file</source>
          <target state="translated">ファイルの読み取り、書き込み、操作を行うための非同期チャネル。</target>
        </trans-unit>
        <trans-unit id="04ce0049fb979587f008bb0f36fca66b858bdff8" translate="yes" xml:space="preserve">
          <source>An asynchronous channel for reading, writing, and manipulating a file.</source>
          <target state="translated">ファイルの読み取り、書き込み、操作を行うための非同期チャネル。</target>
        </trans-unit>
        <trans-unit id="3f05dfda8e00180392ad1ed2fdbdcc48784a0d25" translate="yes" xml:space="preserve">
          <source>An asynchronous channel for stream-oriented connecting sockets.</source>
          <target state="translated">ストリーム指向の接続ソケット用の非同期チャネル。</target>
        </trans-unit>
        <trans-unit id="eb34342605bb5ebb5f8ddb606c74b8b2735a46c8" translate="yes" xml:space="preserve">
          <source>An asynchronous channel for stream-oriented listening sockets.</source>
          <target state="translated">ストリーム指向のリスニングソケット用の非同期チャネル。</target>
        </trans-unit>
        <trans-unit id="fc1ddd80b2747203b083590f5f367717ba6df71b" translate="yes" xml:space="preserve">
          <source>An asynchronous channel group encapsulates the mechanics required to handle the completion of I/O operations initiated by &lt;a href=&quot;asynchronouschannel&quot;&gt;&lt;code&gt;asynchronous channels&lt;/code&gt;&lt;/a&gt; that are bound to the group. A group has an associated thread pool to which tasks are submitted to handle I/O events and dispatch to &lt;a href=&quot;completionhandler&quot;&gt;&lt;code&gt;completion-handlers&lt;/code&gt;&lt;/a&gt; that consume the result of asynchronous operations performed on channels in the group. In addition to handling I/O events, the pooled threads may also execute other tasks required to support the execution of asynchronous I/O operations.</source>
          <target state="translated">非同期チャネルグループは、グループにバインドされている&lt;a href=&quot;asynchronouschannel&quot;&gt; &lt;code&gt;asynchronous channels&lt;/code&gt; &lt;/a&gt;によって開始されたI / O操作の完了を処理するために必要なメカニズムをカプセル化します。グループには、I / Oイベントを処理し、グループ内のチャネルで実行された非同期操作の結果を使用する&lt;a href=&quot;completionhandler&quot;&gt; &lt;code&gt;completion-handlers&lt;/code&gt; &lt;/a&gt;ディスパッチするタスクが送信される、関連付けられたスレッドプールがあります。 I / Oイベントの処理に加えて、プールされたスレッドは、非同期I / O操作の実行をサポートするために必要な他のタスクも実行できます。</target>
        </trans-unit>
        <trans-unit id="ca8e70d6a08520c340a455679dfc1b46908dd944" translate="yes" xml:space="preserve">
          <source>An asynchronous channel group is created by invoking the &lt;a href=&quot;#withFixedThreadPool(int,java.util.concurrent.ThreadFactory)&quot;&gt;&lt;code&gt;withFixedThreadPool&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;#withCachedThreadPool(java.util.concurrent.ExecutorService,int)&quot;&gt;&lt;code&gt;withCachedThreadPool&lt;/code&gt;&lt;/a&gt; methods defined here. Channels are bound to a group by specifying the group when constructing the channel. The associated thread pool is &lt;em&gt;owned&lt;/em&gt; by the group; termination of the group results in the shutdown of the associated thread pool.</source>
          <target state="translated">非同期チャネルグループを呼び出すことによって作成された&lt;a href=&quot;#withFixedThreadPool(int,java.util.concurrent.ThreadFactory)&quot;&gt; &lt;code&gt;withFixedThreadPool&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;#withCachedThreadPool(java.util.concurrent.ExecutorService,int)&quot;&gt; &lt;code&gt;withCachedThreadPool&lt;/code&gt; &lt;/a&gt;ここで定義されたメソッドを。チャネルは、チャネルを構築するときにグループを指定することによってグループにバインドされます。関連するスレッドプールはグループによって&lt;em&gt;所有&lt;/em&gt;されます。グループが終了すると、関連するスレッドプールがシャットダウンされます。</target>
        </trans-unit>
        <trans-unit id="1bd1578649e7815696b6734d360713fe6bd7c8c9" translate="yes" xml:space="preserve">
          <source>An asynchronous channel group is created by invoking the &lt;a href=&quot;asynchronouschannelgroup#withFixedThreadPool-int-java.util.concurrent.ThreadFactory-&quot;&gt;&lt;code&gt;withFixedThreadPool&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;asynchronouschannelgroup#withCachedThreadPool-java.util.concurrent.ExecutorService-int-&quot;&gt;&lt;code&gt;withCachedThreadPool&lt;/code&gt;&lt;/a&gt; methods defined here. Channels are bound to a group by specifying the group when constructing the channel. The associated thread pool is &lt;em&gt;owned&lt;/em&gt; by the group; termination of the group results in the shutdown of the associated thread pool.</source>
          <target state="translated">非同期チャネルグループは、ここで定義された&lt;a href=&quot;asynchronouschannelgroup#withFixedThreadPool-int-java.util.concurrent.ThreadFactory-&quot;&gt; &lt;code&gt;withFixedThreadPool&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;asynchronouschannelgroup#withCachedThreadPool-java.util.concurrent.ExecutorService-int-&quot;&gt; &lt;code&gt;withCachedThreadPool&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって作成されます。チャネルは、チャネルを構築するときにグループを指定することにより、グループにバインドされます。関連するスレッドプールはグループによって&lt;em&gt;所有&lt;/em&gt;されます。グループが終了すると、関連するスレッドプールがシャットダウンします。</target>
        </trans-unit>
        <trans-unit id="ebf886da9ba81fbd1b24f207f7aef86fff5ea9a2" translate="yes" xml:space="preserve">
          <source>An asynchronous channel provider is a concrete subclass of this class that has a zero-argument constructor and implements the abstract methods specified below. A given invocation of the Java virtual machine maintains a single system-wide default provider instance, which is returned by the &lt;a href=&quot;#provider()&quot;&gt;&lt;code&gt;provider&lt;/code&gt;&lt;/a&gt; method. The first invocation of that method will locate the default provider as specified below.</source>
          <target state="translated">非同期チャネルプロバイダーは、このクラスの具体的なサブクラスであり、引数がゼロのコンストラクターを持ち、以下に指定されている抽象メソッドを実装します。 Java仮想マシンの特定の呼び出しは、単一のシステム全体のデフォルトプロバイダーインスタンスを維持します。これは、&lt;a href=&quot;#provider()&quot;&gt; &lt;code&gt;provider&lt;/code&gt; &lt;/a&gt;メソッドによって返されます。そのメソッドの最初の呼び出しは、以下に指定されているようにデフォルトのプロバイダーを見つけます。</target>
        </trans-unit>
        <trans-unit id="3d23c4c5494404dae3bfa4153bf162b06bccf6ea" translate="yes" xml:space="preserve">
          <source>An asynchronous channel provider is a concrete subclass of this class that has a zero-argument constructor and implements the abstract methods specified below. A given invocation of the Java virtual machine maintains a single system-wide default provider instance, which is returned by the &lt;a href=&quot;asynchronouschannelprovider#provider--&quot;&gt;&lt;code&gt;provider&lt;/code&gt;&lt;/a&gt; method. The first invocation of that method will locate the default provider as specified below.</source>
          <target state="translated">非同期チャネルプロバイダーは、このクラスの具象サブクラスであり、引数のないコンストラクターがあり、以下に指定する抽象メソッドを実装します。Java仮想マシンの特定の呼び出しは、&lt;a href=&quot;asynchronouschannelprovider#provider--&quot;&gt; &lt;code&gt;provider&lt;/code&gt; &lt;/a&gt;メソッドによって返される単一のシステム全体のデフォルトプロバイダーインスタンスを維持します。そのメソッドの最初の呼び出しは、以下に指定されているデフォルトのプロバイダーを見つけます。</target>
        </trans-unit>
        <trans-unit id="187bfcc3c4e185a9fc4302c4c0a15c24daca9dcd" translate="yes" xml:space="preserve">
          <source>An asynchronous channel that can read and write bytes.</source>
          <target state="translated">バイトの読み書きが可能な非同期チャネル。</target>
        </trans-unit>
        <trans-unit id="25891c7e23ee0f01652a03630a94a2a7bcc400a1" translate="yes" xml:space="preserve">
          <source>An asynchronous channel to a stream-oriented connecting socket</source>
          <target state="translated">ストリーム指向の接続ソケットへの非同期チャネル</target>
        </trans-unit>
        <trans-unit id="0edfec2733989f66055163921cdee57e8f6c5f29" translate="yes" xml:space="preserve">
          <source>An asynchronous channel to a stream-oriented listening socket</source>
          <target state="translated">ストリーム指向のリスニングソケットへの非同期チャネル</target>
        </trans-unit>
        <trans-unit id="4dfab20de9c8516ae3347ab7d78fc643ad5817fb" translate="yes" xml:space="preserve">
          <source>An asynchronous file channel does not have a</source>
          <target state="translated">非同期ファイルチャネルには</target>
        </trans-unit>
        <trans-unit id="5fdcdb96f921683fd4bd423bedd5ac99980e99ff" translate="yes" xml:space="preserve">
          <source>An asynchronous file channel is created when a file is opened by invoking one of the &lt;a href=&quot;#open(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute...)&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; methods defined by this class. The file contains a variable-length sequence of bytes that can be read and written and whose current size can be &lt;a href=&quot;#size()&quot;&gt;&lt;code&gt;queried&lt;/code&gt;&lt;/a&gt;. The size of the file increases when bytes are written beyond its current size; the size of the file decreases when it is &lt;a href=&quot;#truncate(long)&quot;&gt;&lt;code&gt;truncated&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">非同期ファイルチャネルは、このクラスで定義されている&lt;a href=&quot;#open(java.nio.file.Path,java.util.Set,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute...)&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;メソッドの1つを呼び出してファイルを開くと作成されます。このファイルには、読み取りと&lt;a href=&quot;#size()&quot;&gt; &lt;code&gt;queried&lt;/code&gt; &lt;/a&gt;が可能で、現在のサイズを照会できる可変長のバイトシーケンスが含まれています。バイトが現在のサイズを超えて書き込まれると、ファイルのサイズが大きくなります。ファイルが&lt;a href=&quot;#truncate(long)&quot;&gt; &lt;code&gt;truncated&lt;/code&gt; &lt;/a&gt;と、ファイルのサイズが小さくなります。</target>
        </trans-unit>
        <trans-unit id="695c04a2c0d232f881caa8c269a0c45d720196e0" translate="yes" xml:space="preserve">
          <source>An asynchronous file channel is created when a file is opened by invoking one of the &lt;a href=&quot;asynchronousfilechannel#open-java.nio.file.Path-java.util.Set-java.util.concurrent.ExecutorService-java.nio.file.attribute.FileAttribute...-&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; methods defined by this class. The file contains a variable-length sequence of bytes that can be read and written and whose current size can be &lt;a href=&quot;asynchronousfilechannel#size--&quot;&gt;&lt;code&gt;queried&lt;/code&gt;&lt;/a&gt;. The size of the file increases when bytes are written beyond its current size; the size of the file decreases when it is &lt;a href=&quot;asynchronousfilechannel#truncate-long-&quot;&gt;&lt;code&gt;truncated&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">非同期ファイルチャネルは、このクラスで定義された&lt;a href=&quot;asynchronousfilechannel#open-java.nio.file.Path-java.util.Set-java.util.concurrent.ExecutorService-java.nio.file.attribute.FileAttribute...-&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;メソッドの1つを呼び出すことによってファイルが開かれたときに作成されます。ファイルには、読み取りと&lt;a href=&quot;asynchronousfilechannel#size--&quot;&gt; &lt;code&gt;queried&lt;/code&gt; &lt;/a&gt;が可能で、現在のサイズを照会できる可変長のバイトシーケンスが含まれています。ファイルのサイズは、現在のサイズを超えてバイトが書き込まれると増加します。&lt;a href=&quot;asynchronousfilechannel#truncate-long-&quot;&gt; &lt;code&gt;truncated&lt;/code&gt; &lt;/a&gt;と、ファイルのサイズが小さくなります。</target>
        </trans-unit>
        <trans-unit id="18e323d0e2685f43c5d831acd8c17652a04238bc" translate="yes" xml:space="preserve">
          <source>An asynchronous server-socket channel is created by invoking the &lt;a href=&quot;#open(java.nio.channels.AsynchronousChannelGroup)&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; method of this class. A newly-created asynchronous server-socket channel is open but not yet bound. It can be bound to a local address and configured to listen for connections by invoking the &lt;a href=&quot;#bind(java.net.SocketAddress,int)&quot;&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/a&gt; method. Once bound, the &lt;a href=&quot;#accept(A,java.nio.channels.CompletionHandler)&quot;&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt; method is used to initiate the accepting of connections to the channel's socket. An attempt to invoke the &lt;code&gt;accept&lt;/code&gt; method on an unbound channel will cause a &lt;a href=&quot;notyetboundexception&quot;&gt;&lt;code&gt;NotYetBoundException&lt;/code&gt;&lt;/a&gt; to be thrown.</source>
          <target state="translated">非同期サーバーソケットチャネルは、このクラスの&lt;a href=&quot;#open(java.nio.channels.AsynchronousChannelGroup)&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって作成されます。新しく作成された非同期サーバーソケットチャネルは開いていますが、まだバインドされていません。ローカルアドレスに&lt;a href=&quot;#bind(java.net.SocketAddress,int)&quot;&gt; &lt;code&gt;bind&lt;/code&gt; &lt;/a&gt;、bindメソッドを呼び出すことで接続をリッスンするように構成できます。バインドされると、&lt;a href=&quot;#accept(A,java.nio.channels.CompletionHandler)&quot;&gt; &lt;code&gt;accept&lt;/code&gt; &lt;/a&gt;メソッドを使用して、チャネルのソケットへの接続の受け入れを開始します。バインドされていないチャネルで &lt;code&gt;accept&lt;/code&gt; メソッドを呼び出そうとすると、&lt;a href=&quot;notyetboundexception&quot;&gt; &lt;code&gt;NotYetBoundException&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="35a9dd1f670fedc81c6f0cde0250688df213724f" translate="yes" xml:space="preserve">
          <source>An asynchronous server-socket channel is created by invoking the &lt;a href=&quot;asynchronousserversocketchannel#open-java.nio.channels.AsynchronousChannelGroup-&quot;&gt;&lt;code&gt;open&lt;/code&gt;&lt;/a&gt; method of this class. A newly-created asynchronous server-socket channel is open but not yet bound. It can be bound to a local address and configured to listen for connections by invoking the &lt;a href=&quot;asynchronousserversocketchannel#bind-java.net.SocketAddress-int-&quot;&gt;&lt;code&gt;bind&lt;/code&gt;&lt;/a&gt; method. Once bound, the &lt;a href=&quot;asynchronousserversocketchannel#accept-A-java.nio.channels.CompletionHandler-&quot;&gt;&lt;code&gt;accept&lt;/code&gt;&lt;/a&gt; method is used to initiate the accepting of connections to the channel's socket. An attempt to invoke the &lt;code&gt;accept&lt;/code&gt; method on an unbound channel will cause a &lt;a href=&quot;notyetboundexception&quot;&gt;&lt;code&gt;NotYetBoundException&lt;/code&gt;&lt;/a&gt; to be thrown.</source>
          <target state="translated">非同期サーバーソケットチャネルは、このクラスの&lt;a href=&quot;asynchronousserversocketchannel#open-java.nio.channels.AsynchronousChannelGroup-&quot;&gt; &lt;code&gt;open&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって作成されます。新しく作成された非同期サーバーソケットチャネルは開いていますが、まだバインドされていません。&lt;a href=&quot;asynchronousserversocketchannel#bind-java.net.SocketAddress-int-&quot;&gt; &lt;code&gt;bind&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことで、ローカルアドレスにバインドし、接続をリッスンするように構成できます。バインドされると、チャネルのソケットへの接続の受け入れを開始するために、&lt;a href=&quot;asynchronousserversocketchannel#accept-A-java.nio.channels.CompletionHandler-&quot;&gt; &lt;code&gt;accept&lt;/code&gt; &lt;/a&gt;メソッドが使用されます。非バインドチャネルで &lt;code&gt;accept&lt;/code&gt; メソッドを呼び出そうとすると、&lt;a href=&quot;notyetboundexception&quot;&gt; &lt;code&gt;NotYetBoundException&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="554b96139d1446f024e3ea4f86a857682d71ca74" translate="yes" xml:space="preserve">
          <source>An asynchronous update interface for receiving notifications about Image information as the Image is constructed.</source>
          <target state="translated">画像の構築時に画像情報の通知を受けるための非同期更新インターフェース。</target>
        </trans-unit>
        <trans-unit id="2ca187dbb7c81232775137d23ea8301daefd06a2" translate="yes" xml:space="preserve">
          <source>An attached object may later be retrieved via the &lt;a href=&quot;#attachment()&quot;&gt;&lt;code&gt;attachment&lt;/code&gt;&lt;/a&gt; method. Only one object may be attached at a time; invoking this method causes any previous attachment to be discarded. The current attachment may be discarded by attaching &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">アタッチされたオブジェクトは、後で&lt;a href=&quot;#attachment()&quot;&gt; &lt;code&gt;attachment&lt;/code&gt; &lt;/a&gt;メソッドを介して取得できます。一度にアタッチできるオブジェクトは1つだけです。このメソッドを呼び出すと、以前の添付ファイルはすべて破棄されます。 &lt;code&gt;null&lt;/code&gt; を添付すると、現在の添付ファイルを破棄できます。</target>
        </trans-unit>
        <trans-unit id="0e040a1ab54d2ff79e25ff6a5d352d99c7751808" translate="yes" xml:space="preserve">
          <source>An attached object may later be retrieved via the &lt;a href=&quot;selectionkey#attachment--&quot;&gt;&lt;code&gt;attachment&lt;/code&gt;&lt;/a&gt; method. Only one object may be attached at a time; invoking this method causes any previous attachment to be discarded. The current attachment may be discarded by attaching &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">アタッチされたオブジェクトは、&lt;a href=&quot;selectionkey#attachment--&quot;&gt; &lt;code&gt;attachment&lt;/code&gt; &lt;/a&gt;メソッドを介して後で取得できます。一度に1つのオブジェクトのみをアタッチできます。このメソッドを呼び出すと、以前の添付ファイルはすべて破棄されます。現在の添付ファイルは &lt;code&gt;null&lt;/code&gt; を添付することで破棄できます。</target>
        </trans-unit>
        <trans-unit id="f618be52cf8841eaf7f441b5431fec11eb692eb4" translate="yes" xml:space="preserve">
          <source>An attempt is made to read up to</source>
          <target state="translated">まで読もうとしています。</target>
        </trans-unit>
        <trans-unit id="afaed010a71b05b31348e2fb4e9852a2e9b230d1" translate="yes" xml:space="preserve">
          <source>An attempt is made to read up to &lt;code&gt;count&lt;/code&gt; bytes from the source channel and write them to this channel's file starting at the given &lt;code&gt;position&lt;/code&gt;. An invocation of this method may or may not transfer all of the requested bytes; whether or not it does so depends upon the natures and states of the channels. Fewer than the requested number of bytes will be transferred if the source channel has fewer than &lt;code&gt;count&lt;/code&gt; bytes remaining, or if the source channel is non-blocking and has fewer than &lt;code&gt;count&lt;/code&gt; bytes immediately available in its input buffer.</source>
          <target state="translated">ソースチャネルから最大 &lt;code&gt;count&lt;/code&gt; バイトを読み取って、指定された &lt;code&gt;position&lt;/code&gt; からこのチャネルのファイルに書き込みを試みます。このメソッドの呼び出しは、要求されたすべてのバイトを転送する場合と転送しない場合があります。そうかどうかは、チャネルの性質と状態に依存します。ソースチャネルの残りのバイト数が &lt;code&gt;count&lt;/code&gt; バイトより少ない場合、またはソースチャネルが非ブロッキングで、入力バッファですぐに利用できるバイト数が &lt;code&gt;count&lt;/code&gt; より少ない場合は、要求されたバイト数よりも少なく転送されます。</target>
        </trans-unit>
        <trans-unit id="b466afdab2763a9692f1fd28697bb624e4f30d43" translate="yes" xml:space="preserve">
          <source>An attempt is made to read up to &lt;code&gt;count&lt;/code&gt; bytes starting at the given &lt;code&gt;position&lt;/code&gt; in this channel's file and write them to the target channel. An invocation of this method may or may not transfer all of the requested bytes; whether or not it does so depends upon the natures and states of the channels. Fewer than the requested number of bytes are transferred if this channel's file contains fewer than &lt;code&gt;count&lt;/code&gt; bytes starting at the given &lt;code&gt;position&lt;/code&gt;, or if the target channel is non-blocking and it has fewer than &lt;code&gt;count&lt;/code&gt; bytes free in its output buffer.</source>
          <target state="translated">このチャネルのファイルの指定された &lt;code&gt;position&lt;/code&gt; から始まる &lt;code&gt;count&lt;/code&gt; バイトまでの読み取りを試み、それらをターゲットチャネルに書き込みます。このメソッドの呼び出しは、要求されたすべてのバイトを転送する場合と転送しない場合があります。そうかどうかは、チャネルの性質と状態に依存します。このチャネルのファイルの指定された &lt;code&gt;position&lt;/code&gt; から始まる &lt;code&gt;count&lt;/code&gt; バイトより少ない場合、またはターゲットチャネルが非ブロッキングで、出力バッファの空きが &lt;code&gt;count&lt;/code&gt; バイトより少ない場合、転送される要求バイト数よりも少なくなります。</target>
        </trans-unit>
        <trans-unit id="722aa7ce50f34b6a706302fb44f8a4ddcbcbe4a6" translate="yes" xml:space="preserve">
          <source>An attempt is made to write up to</source>
          <target state="translated">まで書き込もうとする試みがなされています。</target>
        </trans-unit>
        <trans-unit id="daa493fc78c87a1d23c019a31321dea082987cfd" translate="yes" xml:space="preserve">
          <source>An attempt to construct an MXBean that does not conform to the above rules will produce an exception.</source>
          <target state="translated">上記のルールに準拠しないMXBeanを構築しようとすると、例外が発生します。</target>
        </trans-unit>
        <trans-unit id="422fa7a7a56e5962fbba8784c52a95523c59cb40" translate="yes" xml:space="preserve">
          <source>An attempt to load a provider that is not a subtype of one of the above types will result in &lt;code&gt;IllegalArgumentException&lt;/code&gt;.</source>
          <target state="translated">上記のタイプのいずれのサブタイプでもないプロバイダーをロードしようとすると、 &lt;code&gt;IllegalArgumentException&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="6b52b55dd28b3f2b7689679f95188325c85b1ef0" translate="yes" xml:space="preserve">
          <source>An attempt to position the cursor beyond the first/last row in the result set leaves the cursor before the first row or after the last row.</source>
          <target state="translated">結果セットの最初の行/最後の行を超えてカーソルを配置しようとすると、カーソルは最初の行の前または最後の行の後になります。</target>
        </trans-unit>
        <trans-unit id="6aa3113dc73ea41eaab226482455570024e6c567" translate="yes" xml:space="preserve">
          <source>An attempt to serialize explicitly an instance of this class will fail.</source>
          <target state="translated">このクラスのインスタンスを明示的にシリアライズしようとすると失敗します。</target>
        </trans-unit>
        <trans-unit id="3cceca5092588d88b6efd29b07df7c52a16bbb9c" translate="yes" xml:space="preserve">
          <source>An attempt was made to read an object when the next element in the stream is primitive data. In this case, the OptionalDataException's length field is set to the number of bytes of primitive data immediately readable from the stream, and the eof field is set to false.</source>
          <target state="translated">ストリームの次の要素がプリミティブ・データであるときに、オブジェクトの読み取りを試みました。この場合、OptionalDataException の length フィールドには、ストリームからすぐに読み込めるプリミティブ・データのバイト数が設定され、eof フィールドには false が設定されます。</target>
        </trans-unit>
        <trans-unit id="6760262c20614bbc00dcf1a227400dd2ef092e20" translate="yes" xml:space="preserve">
          <source>An attempt was made to read past the end of data consumable by a class-defined readObject or readExternal method. In this case, the OptionalDataException's eof field is set to true, and the length field is set to 0.</source>
          <target state="translated">クラス定義の readObject または readExternal メソッドで消費可能なデータの終端を越えて読み込もうとしました。この場合、OptionalDataException の eof フィールドが true に設定され、length フィールドが 0 に設定されます。</target>
        </trans-unit>
        <trans-unit id="16aa56556c9f579c2709f92998d373096c035221" translate="yes" xml:space="preserve">
          <source>An attempt will be made to resolve the hostname into an InetAddress. If that attempt fails, the address will be flagged as</source>
          <target state="translated">ホスト名を InetAddress に解決する試みが行われます。この試みが失敗した場合、アドレスは</target>
        </trans-unit>
        <trans-unit id="279f3bdf2c9f38de29ce0a27e68895d399181119" translate="yes" xml:space="preserve">
          <source>An attribute &lt;em&gt;A&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; in &lt;code&gt;matchingAttributes&lt;/code&gt; is considered to match an attribute &lt;em&gt;A&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt; of an object if &lt;em&gt;A&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; and &lt;em&gt;A&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt; have the same identifier, and each value of &lt;em&gt;A&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; is equal to some value of &lt;em&gt;A&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;. This implies that the order of values is not significant, and that &lt;em&gt;A&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt; may contain &quot;extra&quot; values not found in &lt;em&gt;A&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; without affecting the comparison. It also implies that if &lt;em&gt;A&lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt; has no values, then testing for a match is equivalent to testing for the presence of an attribute &lt;em&gt;A&lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt; with the same identifier.</source>
          <target state="translated">&lt;code&gt;matchingAttributes&lt;/code&gt; の属性&lt;em&gt;A &lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;は、&lt;em&gt;A &lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;と&lt;em&gt;A &lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;が同じ識別子を持ち、&lt;em&gt;A &lt;/em&gt;&lt;sub&gt;1の&lt;/sub&gt;各値が&lt;em&gt;A &lt;/em&gt;&lt;sub&gt;2の&lt;/sub&gt;値と等しい場合、オブジェクトの属性&lt;em&gt;A &lt;/em&gt;&lt;sub&gt;2&lt;/sub&gt;と一致すると見なされます。これは、値の順序は重要ではなく、&lt;em&gt;A &lt;/em&gt;&lt;sub&gt;2に&lt;/sub&gt;は、比較に影響を与えずに&lt;em&gt;A &lt;/em&gt;&lt;sub&gt;1に&lt;/sub&gt;はない「余分な」値が含まれる可能性があることを意味します。また、&lt;em&gt;A &lt;/em&gt;&lt;sub&gt;1&lt;/sub&gt;に値がない場合、一致のテストは属性&lt;em&gt;Aの&lt;/em&gt;存在のテストと同等であることも意味します&lt;em&gt;。&lt;/em&gt;&lt;em&gt;&lt;/em&gt;&lt;sub&gt;&lt;/sub&gt;&lt;em&gt;&lt;/em&gt;&lt;sub&gt;&lt;/sub&gt;&lt;em&gt;&lt;/em&gt;&lt;sub&gt;&lt;/sub&gt;&lt;em&gt;&lt;/em&gt;&lt;sub&gt;&lt;/sub&gt;&lt;em&gt;&lt;/em&gt;&lt;sub&gt;&lt;/sub&gt;&lt;em&gt;&lt;/em&gt;&lt;sub&gt;&lt;/sub&gt;&lt;em&gt;&lt;/em&gt;&lt;sub&gt;&lt;/sub&gt;&lt;em&gt;&lt;/em&gt;&lt;sub&gt;&lt;/sub&gt;&lt;em&gt;&lt;/em&gt;&lt;sub&gt;&lt;/sub&gt;同じ識別子を持つ&lt;sub&gt;2&lt;/sub&gt;。</target>
        </trans-unit>
        <trans-unit id="0ce7e6287bdf694dcae3c1cb3483102721e3aeea" translate="yes" xml:space="preserve">
          <source>An attribute associated with a PKCS12 keystore entry.</source>
          <target state="translated">PKCS12 キーストアエントリに関連付けられた属性。</target>
        </trans-unit>
        <trans-unit id="7b8a62f3bbe006040eef0aaf0d414a85f523129e" translate="yes" xml:space="preserve">
          <source>An attribute associated with a PKCS12 keystore entry. The attribute name is an ASN.1 Object Identifier and the attribute value is a set of ASN.1 types.</source>
          <target state="translated">PKCS12 キーストアエントリに関連付けられた属性。属性名はASN.1オブジェクト識別子であり、属性値はASN.1タイプのセットである。</target>
        </trans-unit>
        <trans-unit id="b16f2f4d30434202d0727a48b1a9c2241e0fb243" translate="yes" xml:space="preserve">
          <source>An attribute associated with a keystore entry.</source>
          <target state="translated">キーストア・エントリに関連付けられた属性。</target>
        </trans-unit>
        <trans-unit id="8ea421495bfbf0fe9812b4798e82485b433e6378" translate="yes" xml:space="preserve">
          <source>An attribute associated with a keystore entry. It comprises a name and one or more values.</source>
          <target state="translated">キーストア・エントリに関連付けられた属性。名前と1つ以上の値で構成されます。</target>
        </trans-unit>
        <trans-unit id="5c12ace35e7f44e768a04aabb4ff6210b8ec488c" translate="yes" xml:space="preserve">
          <source>An attribute class used to support requesting a print or page setup dialog be kept displayed on top of all windows or some specific window.</source>
          <target state="translated">印刷やページ設定ダイアログをすべてのウィンドウや特定のウィンドウの上に表示させておくように要求するために使用される属性クラスです。</target>
        </trans-unit>
        <trans-unit id="c9e3847509c7ebe3cea18e6a71d27093cd8dab9d" translate="yes" xml:space="preserve">
          <source>An attribute expression for the attribute named &lt;code&gt;name&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; という名前の属性の属性式。</target>
        </trans-unit>
        <trans-unit id="ef81256df94075f9fe820e5d4a8366ff423b01ba" translate="yes" xml:space="preserve">
          <source>An attribute expression for the attribute named name. The returned object will be serialized as an instance of the non-public class  javax.management.QualifiedAttributeValueExp.</source>
          <target state="translated">nameという名前の属性の属性式。返されるオブジェクトは、非公開クラス javax.management.QualifiedAttributeValueExp のインスタンスとしてシリアライズされます。</target>
        </trans-unit>
        <trans-unit id="d69ad64e956b7d0c1ccdbfa8a8be25663a4e95d3" translate="yes" xml:space="preserve">
          <source>An attribute expression for the attribute named name. The returned object will be serialized as an instance of the non-public class &lt;a href=&quot;../../serialized-form#javax.management.QualifiedAttributeValueExp&quot;&gt; javax.management.QualifiedAttributeValueExp&lt;/a&gt;.</source>
          <target state="translated">nameという名前の属性の属性式。返されたオブジェクトは、非公開クラス&lt;a href=&quot;../../serialized-form#javax.management.QualifiedAttributeValueExp&quot;&gt;javax.management.QualifiedAttributeValueExpの&lt;/a&gt;インスタンスとしてシリアル化されます。</target>
        </trans-unit>
        <trans-unit id="2ff164eb6c8c4747f4ec9c5a66581cf576a5ba9d" translate="yes" xml:space="preserve">
          <source>An attribute is a key/value pair, identified by the key. No two attributes on a given character can have the same key.</source>
          <target state="translated">属性はキーと値のペアであり、キーによって識別されます。与えられた文字の2つの属性が同じキーを持つことはできません。</target>
        </trans-unit>
        <trans-unit id="ce056363b5e69ea39fd01894aa0ac5fc2ddbeb31" translate="yes" xml:space="preserve">
          <source>An attribute is written using the same algorithm to find the lexical form as used in START_ELEMENT. The default is to use double quotes to wrap attribute values and to escape any double quotes found in the value. The type value is ignored.</source>
          <target state="translated">属性は、START_ELEMENTで使用されているのと同じアルゴリズムを使用して字句形式を見つけるために書き込まれます。デフォルトでは、二重引用符を使用して属性値を折り返し、値の中に見つかった二重引用符はすべてエスケープされます。型の値は無視されます。</target>
        </trans-unit>
        <trans-unit id="43417727ef128afc7f6d12d299865c3f3e5c84fb" translate="yes" xml:space="preserve">
          <source>An attribute list includes only attributes that have been specified or defaulted: #IMPLIED attributes will not be included.</source>
          <target state="translated">属性リストには、指定された、またはデフォルトで設定された属性のみが含まれます。#IMPLIED属性は含まれません。</target>
        </trans-unit>
        <trans-unit id="711649ceb8fb4a13253ff62526cf3ea69f22f307" translate="yes" xml:space="preserve">
          <source>An attribute of a language and binding dependent type that represents a stream of 16-bit units.</source>
          <target state="translated">16ビット単位のストリームを表す言語およびバインディング依存型の属性。</target>
        </trans-unit>
        <trans-unit id="5bdb8ae5f5dbdf04eeebdd54a26532a2da5adb74" translate="yes" xml:space="preserve">
          <source>An attribute of a language and binding dependent type that represents a stream of 16-bit units. The application must encode the stream using UTF-16 (defined in [Unicode] and in [ISO/IEC 10646]). It is not a requirement to have an XML declaration when using character streams. If an XML declaration is present, the value of the encoding attribute will be ignored.</source>
          <target state="translated">16 ビ ッ ト 単位の ス ト リ ームを表す言語 ・ バ イ ンデ ィ ン グ依存型の属性。アプリケーションは,ストリームをUTF-16([Unicode]及び[ISO/IEC 10646]で定義)を用いて符号化しなければならない。文字ストリームを使用する場合には、XML宣言を持つことは必須ではない。XML宣言がある場合、encoding属性の値は無視される。</target>
        </trans-unit>
        <trans-unit id="d22e3b03dc4a22eed7c504ef674a057b41368ac6" translate="yes" xml:space="preserve">
          <source>An attribute of a language and binding dependent type that represents a stream of bytes.</source>
          <target state="translated">バイトのストリームを表す言語およびバインディング依存型の属性。</target>
        </trans-unit>
        <trans-unit id="ab41179d208d3b6e3332c5711a044e50b6c3ad17" translate="yes" xml:space="preserve">
          <source>An attribute of a language and binding dependent type that represents a writable stream of bytes.</source>
          <target state="translated">書き込み可能なバイトのストリームを表す言語およびバインディング依存型の属性。</target>
        </trans-unit>
        <trans-unit id="9d60b0a5c754ab7ba3e2e9fe792b77d6a9b0a02c" translate="yes" xml:space="preserve">
          <source>An attribute of a language and binding dependent type that represents a writable stream to which 16-bit units can be output.</source>
          <target state="translated">16 ビット単位で出力可能な書き込み可能なストリームを表す言語およびバインディング依存型の属性。</target>
        </trans-unit>
        <trans-unit id="4bab69b71afc252a91bb7b8eef477f66804094f7" translate="yes" xml:space="preserve">
          <source>An attribute represents a printing feature that a print service can provide. For each attribute, a print service either does or does not support the attribute. For each possible value of a supported attribute, a print service either does or does not support the value.</source>
          <target state="translated">属性は、印刷サービスが提供できる印刷機能を表す。各属性について,印刷サービスはその属性をサポートしないか,またはサポートしない。サポートされている属性の各可能な値に対して,印刷サービスはその値をサポートしないか,またはサポートしないかのどちらかである。</target>
        </trans-unit>
        <trans-unit id="7af7806d02935fed73ab539df0b07c01ee57ebc0" translate="yes" xml:space="preserve">
          <source>An attribute set contains a group of</source>
          <target state="translated">属性セットには</target>
        </trans-unit>
        <trans-unit id="b6bfd46496d167fff9841e3240580f6db35bd7ff" translate="yes" xml:space="preserve">
          <source>An attribute specifying the encoding used for this document at the time of the parsing.</source>
          <target state="translated">解析時にこの文書で使われているエンコーディングを指定する属性。</target>
        </trans-unit>
        <trans-unit id="4280eb0037f376ffc37c0af7761eb3a86bd946c5" translate="yes" xml:space="preserve">
          <source>An attribute specifying the encoding used for this document at the time of the parsing. This is &lt;code&gt;null&lt;/code&gt; when it is not known, such as when the &lt;code&gt;Document&lt;/code&gt; was created in memory.</source>
          <target state="translated">解析時にこのドキュメントに使用されるエンコーディングを指定する属性。 &lt;code&gt;Document&lt;/code&gt; がメモリ内に作成されたときなど、不明な場合は &lt;code&gt;null&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="02c811dea60fb48b64b7b977a023b8d3426aec3a" translate="yes" xml:space="preserve">
          <source>An attribute specifying the encoding used for this entity at the time of parsing, when it is an external parsed entity.</source>
          <target state="translated">このエンティティが外部解析されたエンティティである場合、解析時に使用されるエンコーディングを指定する属性。</target>
        </trans-unit>
        <trans-unit id="cb4539768cb9fe473cca2e52ddc73213bf93be27" translate="yes" xml:space="preserve">
          <source>An attribute specifying the encoding used for this entity at the time of parsing, when it is an external parsed entity. This is &lt;code&gt;null&lt;/code&gt; if it an entity from the internal subset or if it is not known.</source>
          <target state="translated">外部の解析済みエンティティである場合、解析時にこのエンティティに使用されるエンコーディングを指定する属性。内部サブセットのエンティティである場合、または不明な場合、これは &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d5357749b3d867c4532245b3b860894a4d597a08" translate="yes" xml:space="preserve">
          <source>An attribute specifying whether error checking is enforced or not.</source>
          <target state="translated">エラーチェックを実施するかどうかを指定する属性。</target>
        </trans-unit>
        <trans-unit id="88a509e4c461d7b9c604efdfe52994166f875cbe" translate="yes" xml:space="preserve">
          <source>An attribute specifying whether error checking is enforced or not. When set to &lt;code&gt;false&lt;/code&gt;, the implementation is free to not test every possible error case normally defined on DOM operations, and not raise any &lt;code&gt;DOMException&lt;/code&gt; on DOM operations or report errors while using &lt;code&gt;Document.normalizeDocument()&lt;/code&gt;. In case of error, the behavior is undefined. This attribute is &lt;code&gt;true&lt;/code&gt; by default.</source>
          <target state="translated">エラーチェックを実施するかどうかを指定する属性。 &lt;code&gt;false&lt;/code&gt; に設定すると、実装はDOM操作で通常定義されるすべての可能なエラーケースをテストせず、 &lt;code&gt;Document.normalizeDocument()&lt;/code&gt; の使用中にDOM操作で &lt;code&gt;DOMException&lt;/code&gt; を発生させたり、エラーを報告したりすることはできません。エラーの場合、動作は未定義です。この属性はデフォルトで &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="70890990e607e8c68bacbc68a074a9c1af6a2dd8" translate="yes" xml:space="preserve">
          <source>An attribute specifying, as part of the &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl&quot;&gt;XML declaration&lt;/a&gt;, the encoding of this document.</source>
          <target state="translated">&lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl&quot;&gt;XML宣言の&lt;/a&gt;一部として、このドキュメントのエンコーディングを指定する属性。</target>
        </trans-unit>
        <trans-unit id="b7fc52b5b2d2afef44a4b690c331fdbd8a50e684" translate="yes" xml:space="preserve">
          <source>An attribute specifying, as part of the &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl&quot;&gt;XML declaration&lt;/a&gt;, the encoding of this document. This is &lt;code&gt;null&lt;/code&gt; when unspecified or when it is not known, such as when the &lt;code&gt;Document&lt;/code&gt; was created in memory.</source>
          <target state="translated">&lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl&quot;&gt;XML宣言の&lt;/a&gt;一部として、このドキュメントのエンコーディングを指定する属性。これは、 &lt;code&gt;Document&lt;/code&gt; がメモリ内に作成されたときなど、指定されていない場合や不明な場合は &lt;code&gt;null&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="fa37878d49c1737266af6ad5e8e67a4cfc09a3ae" translate="yes" xml:space="preserve">
          <source>An attribute specifying, as part of the &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl&quot;&gt;XML declaration&lt;/a&gt;, the version number of this document.</source>
          <target state="translated">&lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl&quot;&gt;XML宣言の&lt;/a&gt;一部として、このドキュメントのバージョン番号を指定する属性。</target>
        </trans-unit>
        <trans-unit id="fe2e60156c40952ad6ba6b17ea5f8b65c5772f91" translate="yes" xml:space="preserve">
          <source>An attribute specifying, as part of the &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl&quot;&gt;XML declaration&lt;/a&gt;, the version number of this document. If there is no declaration and if this document supports the &quot;XML&quot; feature, the value is &lt;code&gt;&quot;1.0&quot;&lt;/code&gt;. If this document does not support the &quot;XML&quot; feature, the value is always &lt;code&gt;null&lt;/code&gt;. Changing this attribute will affect methods that check for invalid characters in XML names. Application should invoke &lt;code&gt;Document.normalizeDocument()&lt;/code&gt; in order to check for invalid characters in the &lt;code&gt;Node&lt;/code&gt;s that are already part of this &lt;code&gt;Document&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl&quot;&gt;XML宣言の&lt;/a&gt;一部として、このドキュメントのバージョン番号を指定する属性。宣言がなく、このドキュメントが「XML」機能をサポートしている場合、値は &lt;code&gt;&quot;1.0&quot;&lt;/code&gt; です。このドキュメントが「XML」機能をサポートしていない場合、値は常に &lt;code&gt;null&lt;/code&gt; です。この属性を変更すると、XML名の無効な文字をチェックするメソッドに影響します。アプリケーションは、この &lt;code&gt;Document&lt;/code&gt; 一部である &lt;code&gt;Node&lt;/code&gt; 内の無効な文字をチェックするために、 &lt;code&gt;Document.normalizeDocument()&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="4f124ff84289a3c3bf6149f4e443058114d39cab" translate="yes" xml:space="preserve">
          <source>An attribute specifying, as part of the &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl&quot;&gt;XML declaration&lt;/a&gt;, whether this document is standalone.</source>
          <target state="translated">&lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl&quot;&gt;XML宣言の&lt;/a&gt;一部として、このドキュメントがスタンドアロンであるかどうかを指定する属性。</target>
        </trans-unit>
        <trans-unit id="86c2d9dd90459500da1ccbb30ba9c6f5361ab0ff" translate="yes" xml:space="preserve">
          <source>An attribute specifying, as part of the &lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl&quot;&gt;XML declaration&lt;/a&gt;, whether this document is standalone. This is &lt;code&gt;false&lt;/code&gt; when unspecified.</source>
          <target state="translated">&lt;a href=&quot;http://www.w3.org/TR/2004/REC-xml-20040204#NT-XMLDecl&quot;&gt;XML宣言の&lt;/a&gt;一部として、このドキュメントがスタンドアロンであるかどうかを指定する属性。指定されていない場合、これは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5e3349eaba5d6b060aa90c656be9bb10b0432b53" translate="yes" xml:space="preserve">
          <source>An attribute specifying, as part of the text declaration, the encoding of this entity, when it is an external parsed entity.</source>
          <target state="translated">テキスト宣言の一部として、この実体が外部解析された実体である場合に、その実体のエンコーディングを指定する属性。</target>
        </trans-unit>
        <trans-unit id="f1ee2a10bbee75517db8ed8b16da2b77d6d190d9" translate="yes" xml:space="preserve">
          <source>An attribute specifying, as part of the text declaration, the encoding of this entity, when it is an external parsed entity. This is &lt;code&gt;null&lt;/code&gt; otherwise.</source>
          <target state="translated">外部の解析済みエンティティである場合に、テキスト宣言の一部としてこのエンティティのエンコーディングを指定する属性。それ以外の場合、これは &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bba36a44cbe514eb65cb85e00e9d566f4a243ceb" translate="yes" xml:space="preserve">
          <source>An attribute specifying, as part of the text declaration, the version number of this entity, when it is an external parsed entity.</source>
          <target state="translated">テキスト宣言の一部として、この実体が外部解析された実体である場合に、その実体のバージョン番号を指定する属性。</target>
        </trans-unit>
        <trans-unit id="105844b22112ab70f9459d65ed070eb22c7c5286" translate="yes" xml:space="preserve">
          <source>An attribute specifying, as part of the text declaration, the version number of this entity, when it is an external parsed entity. This is &lt;code&gt;null&lt;/code&gt; otherwise.</source>
          <target state="translated">外部の解析済みエンティティである場合、テキスト宣言の一部として、このエンティティのバージョン番号を指定する属性。それ以外の場合、これは &lt;code&gt;null&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2bcc1293de4c5c865a78f34a613ff37bf6e5d9f9" translate="yes" xml:space="preserve">
          <source>An attribute value is a small, atomic data item, such as an integer or an enumerated value. The Java Print Service API does not use primitive data types, such as int, to represent attribute values for these reasons:</source>
          <target state="translated">属性値は、整数や列挙値などの小さなアトミックなデータ項目です。Java Print Service APIでは、これらの理由からintなどのプリミティブデータ型を属性値の表現に使用しない。</target>
        </trans-unit>
        <trans-unit id="18466dad7d4465649901732dc8a2f17ba629c555" translate="yes" xml:space="preserve">
          <source>An attribute view provides a read-only or updatable view of the non-opaque values, or &lt;em&gt;metadata&lt;/em&gt;, associated with objects in a file system. The &lt;a href=&quot;fileattributeview&quot;&gt;&lt;code&gt;FileAttributeView&lt;/code&gt;&lt;/a&gt; interface is extended by several other interfaces that provide views to specific sets of file attributes. &lt;code&gt;FileAttributeViews&lt;/code&gt; are selected by invoking the &lt;a href=&quot;../files#getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption...)&quot;&gt;&lt;code&gt;Files.getFileAttributeView(java.nio.file.Path, java.lang.Class&amp;lt;V&amp;gt;, java.nio.file.LinkOption...)&lt;/code&gt;&lt;/a&gt; method with a &lt;em&gt;type-token&lt;/em&gt; to identify the required view. Views can also be identified by name. The &lt;a href=&quot;filestoreattributeview&quot;&gt;&lt;code&gt;FileStoreAttributeView&lt;/code&gt;&lt;/a&gt; interface provides access to file store attributes. A &lt;code&gt;FileStoreAttributeView&lt;/code&gt; of a given type is obtained by invoking the &lt;a href=&quot;../filestore#getFileStoreAttributeView(java.lang.Class)&quot;&gt;&lt;code&gt;FileStore.getFileStoreAttributeView(java.lang.Class&amp;lt;V&amp;gt;)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">属性ビューは、ファイルシステム内のオブジェクトに関連付けられた不透明でない値または&lt;em&gt;メタデータの&lt;/em&gt;読み取り専用または更新可能なビューを提供します。&lt;a href=&quot;fileattributeview&quot;&gt; &lt;code&gt;FileAttributeView&lt;/code&gt; の&lt;/a&gt;インターフェースは、ファイル属性の特定のセットへのビューを提供するいくつかの他のインタフェースによって拡張されます。 &lt;code&gt;FileAttributeViews&lt;/code&gt; は、&lt;a href=&quot;../files#getFileAttributeView(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption...)&quot;&gt; &lt;code&gt;Files.getFileAttributeView(java.nio.file.Path, java.lang.Class&amp;lt;V&amp;gt;, java.nio.file.LinkOption...)&lt;/code&gt; &lt;/a&gt;メソッドを&lt;em&gt;タイプトークンで&lt;/em&gt;呼び出して、必要なビューを識別することによって選択されます。ビューは名前で識別することもできます。&lt;a href=&quot;filestoreattributeview&quot;&gt; &lt;code&gt;FileStoreAttributeView&lt;/code&gt; の&lt;/a&gt;インタフェースは、ファイルストアの属性へのアクセスを提供します。 &lt;code&gt;FileStoreAttributeView&lt;/code&gt; 所与のタイプのを呼び出すことによって得られます。&lt;a href=&quot;../filestore#getFileStoreAttributeView(java.lang.Class)&quot;&gt; &lt;code&gt;FileStore.getFileStoreAttributeView(java.lang.Class&amp;lt;V&amp;gt;)&lt;/code&gt; &lt;/a&gt;メソッド。</target>
        </trans-unit>
        <trans-unit id="98905b6e28df8109ba3188a3fca8b623c82a47e1" translate="yes" xml:space="preserve">
          <source>An attribute view provides a read-only or updatable view of the non-opaque values, or &lt;em&gt;metadata&lt;/em&gt;, associated with objects in a file system. The &lt;a href=&quot;fileattributeview&quot;&gt;&lt;code&gt;FileAttributeView&lt;/code&gt;&lt;/a&gt; interface is extended by several other interfaces that that views to specific sets of file attributes. &lt;code&gt;FileAttributeViews&lt;/code&gt; are selected by invoking the &lt;a href=&quot;../files#getFileAttributeView-java.nio.file.Path-java.lang.Class-java.nio.file.LinkOption...-&quot;&gt;&lt;code&gt;Files.getFileAttributeView(java.nio.file.Path, java.lang.Class&amp;lt;V&amp;gt;, java.nio.file.LinkOption...)&lt;/code&gt;&lt;/a&gt; method with a &lt;em&gt;type-token&lt;/em&gt; to identify the required view. Views can also be identified by name. The &lt;a href=&quot;filestoreattributeview&quot;&gt;&lt;code&gt;FileStoreAttributeView&lt;/code&gt;&lt;/a&gt; interface provides access to file store attributes. A &lt;code&gt;FileStoreAttributeView&lt;/code&gt; of a given type is obtained by invoking the &lt;a href=&quot;../filestore#getFileStoreAttributeView-java.lang.Class-&quot;&gt;&lt;code&gt;FileStore.getFileStoreAttributeView(java.lang.Class&amp;lt;V&amp;gt;)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">属性ビューは、ファイルシステム内のオブジェクトに関連付けられた不透明でない値、つまり&lt;em&gt;メタデータの&lt;/em&gt;読み取り専用または更新可能なビューを提供します。&lt;a href=&quot;fileattributeview&quot;&gt; &lt;code&gt;FileAttributeView&lt;/code&gt; の&lt;/a&gt;インタフェースは、いくつかの他のインタフェースによって拡張されたファイル属性の特定のセットへのビューこと。 &lt;code&gt;FileAttributeViews&lt;/code&gt; は、&lt;a href=&quot;../files#getFileAttributeView-java.nio.file.Path-java.lang.Class-java.nio.file.LinkOption...-&quot;&gt; &lt;code&gt;Files.getFileAttributeView(java.nio.file.Path, java.lang.Class&amp;lt;V&amp;gt;, java.nio.file.LinkOption...)&lt;/code&gt; &lt;/a&gt;メソッドを呼び出して、必要なビューを識別する&lt;em&gt;タイプトークンで選択&lt;/em&gt;します。ビューは名前で識別することもできます。&lt;a href=&quot;filestoreattributeview&quot;&gt; &lt;code&gt;FileStoreAttributeView&lt;/code&gt; の&lt;/a&gt;インタフェースは、ファイルストアの属性へのアクセスを提供します。 &lt;code&gt;FileStoreAttributeView&lt;/code&gt; 所与のタイプのを呼び出すことによって得られます。&lt;a href=&quot;../filestore#getFileStoreAttributeView-java.lang.Class-&quot;&gt; &lt;code&gt;FileStore.getFileStoreAttributeView(java.lang.Class&amp;lt;V&amp;gt;)&lt;/code&gt; &lt;/a&gt;メソッド。</target>
        </trans-unit>
        <trans-unit id="2930bb7b14477a29250d830f64bd20a221ca55dc" translate="yes" xml:space="preserve">
          <source>An attribute view that is a read-only or updatable view of non-opaque values associated with a file in a filesystem.</source>
          <target state="translated">ファイルシステム内のファイルに関連付けられた不透明でない値の読み取り専用または更新可能な属性ビュー。</target>
        </trans-unit>
        <trans-unit id="c83eda9be05b6815e3caae6bb31b34563a602715" translate="yes" xml:space="preserve">
          <source>An attribute view that is a read-only or updatable view of non-opaque values associated with a file in a filesystem. This interface is extended or implemented by specific file attribute views that define methods to read and/or update the attributes of a file.</source>
          <target state="translated">ファイルシステム内のファイルに関連付けられた不透明でない値の読み取り専用または更新可能なビューである属性ビュー。このインターフェイスは、ファイルの属性を読み込んだり更新したりするためのメソッドを定義する特定のファイル属性ビューによって拡張または実装されます。</target>
        </trans-unit>
        <trans-unit id="10f2cc0e36538e551032569affb5d2ad93a7724d" translate="yes" xml:space="preserve">
          <source>An attribute view that is a read-only or updatable view of the attributes of a &lt;a href=&quot;../filestore&quot;&gt;&lt;code&gt;FileStore&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../filestore&quot;&gt; &lt;code&gt;FileStore&lt;/code&gt; の&lt;/a&gt;属性の読み取り専用または更新可能なビューである属性ビュー。</target>
        </trans-unit>
        <trans-unit id="065071a9cea28782c8d56a7c04d9729427684e3a" translate="yes" xml:space="preserve">
          <source>An audio input stream is an input stream with a specified audio format and length.</source>
          <target state="translated">音声入力ストリームとは、指定された音声フォーマットと長さを持つ入力ストリームのことです。</target>
        </trans-unit>
        <trans-unit id="3c20d5cd5008578e867d47cb7d115185299d7288" translate="yes" xml:space="preserve">
          <source>An audio input stream is an input stream with a specified audio format and length. The length is expressed in sample frames, not bytes. Several methods are provided for reading a certain number of bytes from the stream, or an unspecified number of bytes. The audio input stream keeps track of the last byte that was read. You can skip over an arbitrary number of bytes to get to a later position for reading. An audio input stream may support marks. When you set a mark, the current position is remembered so that you can return to it later.</source>
          <target state="translated">オーディオ入力ストリームとは、指定されたオーディオフォーマットと長さを持つ入力ストリームのことです。長さは、バイトではなくサンプルフレームで表される。ストリームから特定の数のバイト、または指定されていない数のバイトを読み出すために、いくつかの方法が提供されています。オーディオ入力ストリームは、最後に読み込まれたバイトを追跡します。任意のバイト数をスキップして、後から読み込んだ位置に到達することができます。オーディオ入力ストリームはマークをサポートしている場合があります。マークを設定すると、現在の位置が記憶され、後で戻ることができるようになります。</target>
        </trans-unit>
        <trans-unit id="06c39e0a3ecdac6aa25ab01536a4ad86d0408020" translate="yes" xml:space="preserve">
          <source>An automatic module.</source>
          <target state="translated">自動モジュール。</target>
        </trans-unit>
        <trans-unit id="7dfb3f289a8fbaaaf1ad8011ca93617e1dc486cb" translate="yes" xml:space="preserve">
          <source>An automatic module. An automatic module is treated as if it exports and opens all packages.</source>
          <target state="translated">自動モジュール。自動モジュールは、すべてのパッケージをエクスポートしてオープンしているかのように扱われます。</target>
        </trans-unit>
        <trans-unit id="8836aae892719c4ebaf0a0b8a2e2558c851b7ed4" translate="yes" xml:space="preserve">
          <source>An autoscrolling gesture is initiated by the user by keeping the drag cursor motionless with a border region of the &lt;code&gt;Component&lt;/code&gt;, referred to as the &quot;autoscrolling region&quot;, for a predefined period of time, this will result in repeated scroll requests to the &lt;code&gt;Component&lt;/code&gt; until the drag &lt;code&gt;Cursor&lt;/code&gt; resumes its motion.</source>
          <target state="translated">自動スクロールジェスチャーをの境界領域にドラッグカーソル静止を維持し、ユーザによって開始された &lt;code&gt;Component&lt;/code&gt; 、「自動スクロール領域」と呼ばれる所定の期間のために、これは繰り返しにスクロール要求をもたらすであろう &lt;code&gt;Component&lt;/code&gt; までドラッグ &lt;code&gt;Cursor&lt;/code&gt; が動きを再開します。</target>
        </trans-unit>
        <trans-unit id="bd26fa2826cb4db9898c13d9a0774a8dcead3a55" translate="yes" xml:space="preserve">
          <source>An easy way to generate a standard table of value labels is by using the &lt;code&gt;createStandardLabels&lt;/code&gt; method.</source>
          <target state="translated">値ラベルの標準テーブルを生成する簡単な方法は、 &lt;code&gt;createStandardLabels&lt;/code&gt; メソッドを使用することです。</target>
        </trans-unit>
        <trans-unit id="dbd5013ca74eae81657ba680f9f5cb9f6ee5c326" translate="yes" xml:space="preserve">
          <source>An echo character is useful for text fields where user input should not be echoed to the screen, as in the case of a text field for entering a password.</source>
          <target state="translated">エコー文字は、パスワードを入力するテキストフィールドのように、ユーザーの入力を画面にエコーさせてはいけないテキストフィールドの場合に便利です。</target>
        </trans-unit>
        <trans-unit id="41aa0961dfc7c6d82be6441ab89a01f56a0c08d8" translate="yes" xml:space="preserve">
          <source>An echo character is useful for text fields where user input should not be echoed to the screen, as in the case of a text field for entering a password. If &lt;code&gt;echoChar&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt;, user input is echoed to the screen unchanged.</source>
          <target state="translated">エコー文字は、パスワードを入力するためのテキストフィールドの場合のように、ユーザー入力を画面にエコーしてはならないテキストフィールドに役立ちます。 &lt;code&gt;echoChar&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt; の場合、ユーザー入力は変更されずに画面にエコーされます。</target>
        </trans-unit>
        <trans-unit id="9d40d907bdd9c20dfbecde0eb3fe87e05bf5f82c" translate="yes" xml:space="preserve">
          <source>An echo character is useful for text fields where user input should not be echoed to the screen, as in the case of a text field for entering a password. Setting &lt;code&gt;echoChar&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt; allows user input to be echoed to the screen again.</source>
          <target state="translated">エコー文字は、パスワードを入力するためのテキストフィールドの場合のように、ユーザー入力を画面にエコーしてはならないテキストフィールドに役立ちます。 &lt;code&gt;echoChar&lt;/code&gt; = &lt;code&gt;0&lt;/code&gt; に設定すると、ユーザー入力を画面に再度エコーできます。</target>
        </trans-unit>
        <trans-unit id="24b8945618f8007b9d2cb008aa6fc7bbd6a390e1" translate="yes" xml:space="preserve">
          <source>An editor for a &lt;code&gt;JSpinner&lt;/code&gt; whose model is a &lt;code&gt;SpinnerDateModel&lt;/code&gt;.</source>
          <target state="translated">モデルが &lt;code&gt;SpinnerDateModel&lt;/code&gt; である &lt;code&gt;JSpinner&lt;/code&gt; のエディター。</target>
        </trans-unit>
        <trans-unit id="68fcdbaf56f0fb0909a9ce6c710ff65d5bc00e09" translate="yes" xml:space="preserve">
          <source>An editor for a &lt;code&gt;JSpinner&lt;/code&gt; whose model is a &lt;code&gt;SpinnerDateModel&lt;/code&gt;. The value of the editor is displayed with a &lt;code&gt;JFormattedTextField&lt;/code&gt; whose format is defined by a &lt;code&gt;DateFormatter&lt;/code&gt; instance whose &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum&lt;/code&gt; properties are mapped to the &lt;code&gt;SpinnerDateModel&lt;/code&gt;.</source>
          <target state="translated">モデルが &lt;code&gt;SpinnerDateModel&lt;/code&gt; である &lt;code&gt;JSpinner&lt;/code&gt; のエディター。エディタの値は、 &lt;code&gt;minimum&lt;/code&gt; プロパティと &lt;code&gt;maximum&lt;/code&gt; プロパティが &lt;code&gt;SpinnerDateModel&lt;/code&gt; にマップされている &lt;code&gt;DateFormatter&lt;/code&gt; インスタンスによってフォーマットが定義されている &lt;code&gt;JFormattedTextField&lt;/code&gt; で表示されます。</target>
        </trans-unit>
        <trans-unit id="81fce0442d54d10f53bfea4053079d54c53d6701" translate="yes" xml:space="preserve">
          <source>An editor for a &lt;code&gt;JSpinner&lt;/code&gt; whose model is a &lt;code&gt;SpinnerListModel&lt;/code&gt;.</source>
          <target state="translated">モデルが &lt;code&gt;SpinnerListModel&lt;/code&gt; である &lt;code&gt;JSpinner&lt;/code&gt; のエディター。</target>
        </trans-unit>
        <trans-unit id="df3dfd2ca3b5a20d1d0a38c27a6622e486abc1a6" translate="yes" xml:space="preserve">
          <source>An editor for a &lt;code&gt;JSpinner&lt;/code&gt; whose model is a &lt;code&gt;SpinnerNumberModel&lt;/code&gt;.</source>
          <target state="translated">モデルが &lt;code&gt;SpinnerNumberModel&lt;/code&gt; である &lt;code&gt;JSpinner&lt;/code&gt; のエディター。</target>
        </trans-unit>
        <trans-unit id="b96c32afde7e6b95f0fc2643bf92cd3dadd15e1d" translate="yes" xml:space="preserve">
          <source>An editor for a &lt;code&gt;JSpinner&lt;/code&gt; whose model is a &lt;code&gt;SpinnerNumberModel&lt;/code&gt;. The value of the editor is displayed with a &lt;code&gt;JFormattedTextField&lt;/code&gt; whose format is defined by a &lt;code&gt;NumberFormatter&lt;/code&gt; instance whose &lt;code&gt;minimum&lt;/code&gt; and &lt;code&gt;maximum&lt;/code&gt; properties are mapped to the &lt;code&gt;SpinnerNumberModel&lt;/code&gt;.</source>
          <target state="translated">モデルが &lt;code&gt;SpinnerNumberModel&lt;/code&gt; である &lt;code&gt;JSpinner&lt;/code&gt; のエディター。エディタの値は、 &lt;code&gt;minimum&lt;/code&gt; プロパティと &lt;code&gt;maximum&lt;/code&gt; プロパティが &lt;code&gt;SpinnerNumberModel&lt;/code&gt; にマップされている &lt;code&gt;NumberFormatter&lt;/code&gt; インスタンスによってフォーマットが定義されている &lt;code&gt;JFormattedTextField&lt;/code&gt; で表示されます。</target>
        </trans-unit>
        <trans-unit id="9001907d31c670e08850b8d941b22960419a094a" translate="yes" xml:space="preserve">
          <source>An editor object for the given target class. The result is null if no suitable editor can be found.</source>
          <target state="translated">指定されたターゲットクラスのエディタオブジェクト。適切なエディタが見つからない場合、結果はnullとなります。</target>
        </trans-unit>
        <trans-unit id="88bdbf99dcd7e408b31aca6471895aa11df7efc5" translate="yes" xml:space="preserve">
          <source>An element as described in a DTD using the ELEMENT construct.</source>
          <target state="translated">ELEMENT構文を使用してDTDに記述されている要素。</target>
        </trans-unit>
        <trans-unit id="144fc4aa920e341513adc97921bdfa3557dc2599" translate="yes" xml:space="preserve">
          <source>An element as described in a DTD using the ELEMENT construct. This is essential the description of a tag. It describes the type, content model, attributes, attribute types etc. It is used to correctly parse a document by the Parser.</source>
          <target state="translated">ELEMENT構文を用いてDTDで記述された要素。これはタグの記述として不可欠である。型、内容モデル、属性、属性型などを記述します。パーサーが文書を正しく解析するために使用されます。</target>
        </trans-unit>
        <trans-unit id="2b292ce81d8a9408c96fc9abb5bfeb1b867cf4e7" translate="yes" xml:space="preserve">
          <source>An element in a stack trace, as returned by &lt;a href=&quot;throwable#getStackTrace()&quot;&gt;&lt;code&gt;Throwable.getStackTrace()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;throwable#getStackTrace()&quot;&gt; &lt;code&gt;Throwable.getStackTrace()&lt;/code&gt; &lt;/a&gt;によって返されるスタックトレースの要素。</target>
        </trans-unit>
        <trans-unit id="5684367e1c9c61149137f3586d8adb27e2dbce7e" translate="yes" xml:space="preserve">
          <source>An element in a stack trace, as returned by &lt;a href=&quot;throwable#getStackTrace()&quot;&gt;&lt;code&gt;Throwable.getStackTrace()&lt;/code&gt;&lt;/a&gt;. Each element represents a single stack frame. All stack frames except for the one at the top of the stack represent a method invocation. The frame at the top of the stack represents the execution point at which the stack trace was generated. Typically, this is the point at which the throwable corresponding to the stack trace was created.</source>
          <target state="translated">&lt;a href=&quot;throwable#getStackTrace()&quot;&gt; &lt;code&gt;Throwable.getStackTrace()&lt;/code&gt; &lt;/a&gt;によって返されるスタックトレースの要素。各要素は単一のスタックフレームを表します。スタックの最上位にあるものを除くすべてのスタックフレームは、メソッド呼び出しを表します。スタックの最上位のフレームは、スタックトレースが生成された実行ポイントを表します。通常、これは、スタックトレースに対応するスロー可能オブジェクトが作成されたポイントです。</target>
        </trans-unit>
        <trans-unit id="7b4adaaf349e9a6d56f2419e9fc23094b38e3205" translate="yes" xml:space="preserve">
          <source>An element in a stack trace, as returned by &lt;a href=&quot;throwable#getStackTrace--&quot;&gt;&lt;code&gt;Throwable.getStackTrace()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;throwable#getStackTrace--&quot;&gt; &lt;code&gt;Throwable.getStackTrace()&lt;/code&gt; &lt;/a&gt;によって返される、スタックトレースの要素。</target>
        </trans-unit>
        <trans-unit id="2aeaf37346a0119e0a2542e610c09c1631725bf7" translate="yes" xml:space="preserve">
          <source>An element in a stack trace, as returned by &lt;a href=&quot;throwable#getStackTrace--&quot;&gt;&lt;code&gt;Throwable.getStackTrace()&lt;/code&gt;&lt;/a&gt;. Each element represents a single stack frame. All stack frames except for the one at the top of the stack represent a method invocation. The frame at the top of the stack represents the execution point at which the stack trace was generated. Typically, this is the point at which the throwable corresponding to the stack trace was created.</source>
          <target state="translated">&lt;a href=&quot;throwable#getStackTrace--&quot;&gt; &lt;code&gt;Throwable.getStackTrace()&lt;/code&gt; &lt;/a&gt;によって返される、スタックトレースの要素。各要素は単一のスタックフレームを表します。スタックの一番上にあるものを除くすべてのスタックフレームは、メソッド呼び出しを表します。スタックの一番上のフレームは、スタックトレースが生成された実行ポイントを表します。通常、これは、スタックトレースに対応するスロー可能オブジェクトが作成されたポイントです。</target>
        </trans-unit>
        <trans-unit id="43a24b28f66c97305f44ba62155cf8a85d2572cf" translate="yes" xml:space="preserve">
          <source>An element that represents a chunk of text that has a set of HTML character level attributes assigned to it.</source>
          <target state="translated">HTML文字レベルの属性が割り当てられたテキストの塊を表す要素。</target>
        </trans-unit>
        <trans-unit id="453924090bdb4081544da5437d394b79482dc6d4" translate="yes" xml:space="preserve">
          <source>An element that represents a structural &lt;em&gt;block&lt;/em&gt; of HTML.</source>
          <target state="translated">HTMLの構造&lt;em&gt;ブロック&lt;/em&gt;を表す要素。</target>
        </trans-unit>
        <trans-unit id="71ebad9a9a6d79c85ea83a3bdef46283c11916de" translate="yes" xml:space="preserve">
          <source>An empty &lt;code&gt;Border&lt;/code&gt;.</source>
          <target state="translated">空の &lt;code&gt;Border&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b906be3cc60517d579d23a464876e7618d348aea" translate="yes" xml:space="preserve">
          <source>An empty &lt;code&gt;Border&lt;/code&gt;. This field might not be used. To change the &lt;code&gt;Border&lt;/code&gt; used by this renderer directly set it using the &lt;code&gt;setBorder&lt;/code&gt; method.</source>
          <target state="translated">空の &lt;code&gt;Border&lt;/code&gt; 。このフィールドは使用されない場合があります。このレンダラーで使用される &lt;code&gt;Border&lt;/code&gt; を変更するには、 &lt;code&gt;setBorder&lt;/code&gt; メソッドを使用して直接設定します。</target>
        </trans-unit>
        <trans-unit id="2dc511c7d6d460e0a652766b02ebf90d4dcba461" translate="yes" xml:space="preserve">
          <source>An empty &lt;code&gt;Name&lt;/code&gt; has a length of zero.</source>
          <target state="translated">空の &lt;code&gt;Name&lt;/code&gt; の長さはゼロです。</target>
        </trans-unit>
        <trans-unit id="4fc9ba941abb5d032d2eac1f86606435bcf75d2d" translate="yes" xml:space="preserve">
          <source>An empty &lt;code&gt;Source&lt;/code&gt; is represented as an empty document as constructed by &lt;a href=&quot;../parsers/documentbuilder#newDocument()&quot;&gt;&lt;code&gt;DocumentBuilder.newDocument()&lt;/code&gt;&lt;/a&gt;. The result of transforming an empty &lt;code&gt;Source&lt;/code&gt; depends on the transformation behavior; it is not always an empty &lt;code&gt;Result&lt;/code&gt;.</source>
          <target state="translated">空の &lt;code&gt;Source&lt;/code&gt; は、&lt;a href=&quot;../parsers/documentbuilder#newDocument()&quot;&gt; &lt;code&gt;DocumentBuilder.newDocument()&lt;/code&gt; &lt;/a&gt;によって作成された空のドキュメントとして表されます。空の &lt;code&gt;Source&lt;/code&gt; を変換した結果は、変換動作によって異なります。常に空の &lt;code&gt;Result&lt;/code&gt; あるとは限りません。</target>
        </trans-unit>
        <trans-unit id="cea9ce6b1a02f422fcbd03d9b2405439a788304a" translate="yes" xml:space="preserve">
          <source>An empty array is returned if the row count is &lt;code&gt;0&lt;/code&gt;, or the specified indices do not bound the viewable set of rows.</source>
          <target state="translated">行数が &lt;code&gt;0&lt;/code&gt; の場合、または指定されたインデックスが表示可能な行のセットにバインドされていない場合は、空の配列が返されます。</target>
        </trans-unit>
        <trans-unit id="e8f2424473c2673fa0e87d78459db7d99bfa8988" translate="yes" xml:space="preserve">
          <source>An empty attribute set.</source>
          <target state="translated">空の属性セット。</target>
        </trans-unit>
        <trans-unit id="f72c63c44cf51008dc34fdff857ba1e4747a5a58" translate="yes" xml:space="preserve">
          <source>An empty authority component is permitted as long as it is followed by a non-empty path, a query component, or a fragment component. This allows the parsing of URIs such as &lt;code&gt;&quot;file:///foo/bar&quot;&lt;/code&gt;, which seems to be the intent of RFC 2396 although the grammar does not permit it. If the authority component is empty then the user-information, host, and port components are undefined.</source>
          <target state="translated">空の権限コンポーネントの後には、空でないパス、クエリコンポーネント、またはフラグメントコンポーネントが続く限り許可されます。これにより、 &lt;code&gt;&quot;file:///foo/bar&quot;&lt;/code&gt; などのURIの解析が可能になります。これは、文法では許可されていませんが、RFC 2396の意図によるものと思われます。権限コンポーネントが空の場合、ユーザー情報、ホスト、およびポートのコンポーネントは未定義です。</target>
        </trans-unit>
        <trans-unit id="76e9988ec9a98212c722ef5ad81617f6f164744c" translate="yes" xml:space="preserve">
          <source>An empty border UI resource.</source>
          <target state="translated">空の境界線のUIリソース。</target>
        </trans-unit>
        <trans-unit id="095b2341fc7146f8e2b77cf6f642d431966ac361" translate="yes" xml:space="preserve">
          <source>An empty copy of this &lt;code&gt;CachedRowSet&lt;/code&gt; object</source>
          <target state="translated">この &lt;code&gt;CachedRowSet&lt;/code&gt; オブジェクトの空のコピー</target>
        </trans-unit>
        <trans-unit id="601abb570af5aeb2e85519d110e87efe802695f6" translate="yes" xml:space="preserve">
          <source>An empty descriptor.</source>
          <target state="translated">空のディスクリプタ。</target>
        </trans-unit>
        <trans-unit id="5f51af07fd2f1e8cc0095411f511c255ffd87b92" translate="yes" xml:space="preserve">
          <source>An empty enum set of the specified type.</source>
          <target state="translated">指定された型の空の列挙集合。</target>
        </trans-unit>
        <trans-unit id="68fac0fb1876bca863fc1991f3055e5e0303f20d" translate="yes" xml:space="preserve">
          <source>An empty implementation of the &lt;code&gt;MouseInputListener&lt;/code&gt; interface, provided as a convenience to simplify the task of creating listeners, by extending and implementing only the methods of interest.</source>
          <target state="translated">対象のメソッドのみを拡張および実装することにより、リスナーを作成するタスクを簡素化するための便宜のために提供される、 &lt;code&gt;MouseInputListener&lt;/code&gt; インターフェースの空の実装。</target>
        </trans-unit>
        <trans-unit id="5f57f1d70904e5f0a8684400e969438b1a147a2f" translate="yes" xml:space="preserve">
          <source>An empty implementation of the &lt;code&gt;MouseInputListener&lt;/code&gt; interface, provided as a convenience to simplify the task of creating listeners, by extending and implementing only the methods of interest. This class also provides an empty implementation of the &lt;code&gt;MouseWheelListener&lt;/code&gt; interface, through its extension from AWT's &lt;code&gt;MouseAdapter&lt;/code&gt;.</source>
          <target state="translated">対象のメソッドのみを拡張および実装することにより、リスナーを作成するタスクを簡素化するための便宜のために提供される、 &lt;code&gt;MouseInputListener&lt;/code&gt; インターフェースの空の実装。このクラスはまた、空の実装を提供 &lt;code&gt;MouseWheelListener&lt;/code&gt; AWTのからその拡張を介して、インターフェースを &lt;code&gt;MouseAdapter&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="d9f588e1348b4e6edb1faa7f2109de7f3c2edf31" translate="yes" xml:space="preserve">
          <source>An empty spliterator</source>
          <target state="translated">空のスプリレータ</target>
        </trans-unit>
        <trans-unit id="d1999014eee90b29a9e9069792c7b68fbd921276" translate="yes" xml:space="preserve">
          <source>An encapsulation of the result state produced by &lt;code&gt;SSLEngine&lt;/code&gt; I/O calls.</source>
          <target state="translated">&lt;code&gt;SSLEngine&lt;/code&gt; I / O呼び出しによって生成された結果状態のカプセル化。</target>
        </trans-unit>
        <trans-unit id="0b5fb5adb98ff53ab0b22026150efd1300b16db6" translate="yes" xml:space="preserve">
          <source>An engine that can transform a sequence of bytes in a specific charset into a sequence of sixteen-bit Unicode characters.</source>
          <target state="translated">特定の文字セットのバイト列を16ビットのUnicode文字列に変換できるエンジン。</target>
        </trans-unit>
        <trans-unit id="601670f3715d20387b85d02a07415902a33cf14e" translate="yes" xml:space="preserve">
          <source>An engine that can transform a sequence of sixteen-bit Unicode characters into a sequence of bytes in a specific charset.</source>
          <target state="translated">16 ビットの Unicode 文字のシーケンスを、特定の文字セットのバイトのシーケンスに変換できるエンジン。</target>
        </trans-unit>
        <trans-unit id="53fd123c4636a6a5e1914f5a8d86c760c4b83c3d" translate="yes" xml:space="preserve">
          <source>An engine that performs match operations on a &lt;a href=&quot;../../lang/charsequence&quot;&gt;character sequence&lt;/a&gt; by interpreting a &lt;a href=&quot;pattern&quot;&gt;&lt;code&gt;Pattern&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;pattern&quot;&gt; &lt;code&gt;Pattern&lt;/code&gt; を&lt;/a&gt;解釈する&lt;a href=&quot;../../lang/charsequence&quot;&gt;こと&lt;/a&gt;により、文字シーケンスに対して照合操作を実行するエンジン。</target>
        </trans-unit>
        <trans-unit id="91c43c4cf223cc700bdc4ee248611a2f1fbc3732" translate="yes" xml:space="preserve">
          <source>An engine's client authentication setting is one of the following:</source>
          <target state="translated">エンジンのクライアント認証設定は、以下のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="ef1feab55d5da0b9fd2ae2955fe5269dd29dba14" translate="yes" xml:space="preserve">
          <source>An entity is described in a DTD using the ENTITY construct.</source>
          <target state="translated">エンティティは、ENTITY構文を使用してDTDに記述されます。</target>
        </trans-unit>
        <trans-unit id="50f4d33c0ee3296304821c02c9be62f8111075a3" translate="yes" xml:space="preserve">
          <source>An entity is described in a DTD using the ENTITY construct. It defines the type and value of the entity.</source>
          <target state="translated">エンティティは、ENTITY 構成を使用して DTD に記述されます。これは、エンティティの型と値を定義します。</target>
        </trans-unit>
        <trans-unit id="dc54b5ec8f2ff867547e4902f8d04acc1615fdf4" translate="yes" xml:space="preserve">
          <source>An entry in an access control list (ACL).</source>
          <target state="translated">アクセス制御リスト (ACL)のエントリ。</target>
        </trans-unit>
        <trans-unit id="8741bc095e1c76bba768f979075d8eab2c72883d" translate="yes" xml:space="preserve">
          <source>An entry is added to &lt;code&gt;table&lt;/code&gt; for each of the &lt;code&gt;name-color&lt;/code&gt; pairs in &lt;code&gt;systemColors&lt;/code&gt;. The entry key is the &lt;code&gt;name&lt;/code&gt; of the &lt;code&gt;name-color&lt;/code&gt; pair.</source>
          <target state="translated">&lt;code&gt;systemColors&lt;/code&gt; の &lt;code&gt;name-color&lt;/code&gt; ペアごとにエントリが &lt;code&gt;table&lt;/code&gt; に追加されます。エントリキーは、 &lt;code&gt;name&lt;/code&gt; と &lt;code&gt;name-color&lt;/code&gt; ペアの名前です。</target>
        </trans-unit>
        <trans-unit id="c102da04921e3d086db5e5398bc9772d0da5484e" translate="yes" xml:space="preserve">
          <source>An enum constant.</source>
          <target state="translated">列挙定数。</target>
        </trans-unit>
        <trans-unit id="80c93847e6f20f4e14d799783360509535c0ce8d" translate="yes" xml:space="preserve">
          <source>An enum set containing all the elements in the specified type.</source>
          <target state="translated">指定された型に含まれるすべての要素を含む列挙集合。</target>
        </trans-unit>
        <trans-unit id="4bce9a83b482251b2f473409d159c9a2669708e0" translate="yes" xml:space="preserve">
          <source>An enum set initialized from the given collection.</source>
          <target state="translated">与えられたコレクションから初期化された列挙集合。</target>
        </trans-unit>
        <trans-unit id="d356106b14fd8afd2c1e7ef6c8ff2ade51eb6a8e" translate="yes" xml:space="preserve">
          <source>An enum type.</source>
          <target state="translated">列挙型。</target>
        </trans-unit>
        <trans-unit id="19d4879fdd9884be95a7abfe28f6df1dd96e2fb0" translate="yes" xml:space="preserve">
          <source>An enumeration &lt;em&gt;E&lt;/em&gt;</source>
          <target state="translated">列挙&lt;em&gt;E&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="7589ba0898ba3e956a397cd45699cb51b23be578" translate="yes" xml:space="preserve">
          <source>An enumeration of &lt;a href=&quot;../net/url&quot;&gt;&lt;code&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/code&gt;&lt;/a&gt; objects for the resource. If no resources could be found, the enumeration will be empty. Resources that the class loader doesn't have access to will not be in the enumeration.</source>
          <target state="translated">リソースの&lt;a href=&quot;../net/url&quot;&gt; &lt;code&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/code&gt; &lt;/a&gt;オブジェクトの列挙。リソースが見つからなかった場合、列挙は空になります。クラスローダーがアクセスできないリソースは列挙されません。</target>
        </trans-unit>
        <trans-unit id="e9e9197121ea9b8184b303ebe921bf469eb207cb" translate="yes" xml:space="preserve">
          <source>An enumeration of &lt;a href=&quot;../net/url&quot;&gt;&lt;code&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/code&gt;&lt;/a&gt; objects for the resources</source>
          <target state="translated">リソースの&lt;a href=&quot;../net/url&quot;&gt; &lt;code&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/code&gt; &lt;/a&gt;オブジェクトの列挙</target>
        </trans-unit>
        <trans-unit id="aad72f9f8c9e29afe8f716b262c4919a5a3c448d" translate="yes" xml:space="preserve">
          <source>An enumeration of &lt;a href=&quot;../net/url&quot;&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/a&gt; objects for the resource. If no resources could be found, the enumeration will be empty. Resources for which a &lt;code&gt;URL&lt;/code&gt; cannot be constructed, are in a package that is not opened unconditionally, or access to the resource is denied by the security manager, are not returned in the enumeration.</source>
          <target state="translated">リソースの&lt;a href=&quot;../net/url&quot;&gt; &lt;code&gt;URL&lt;/code&gt; &lt;/a&gt;オブジェクトの列挙。リソースが見つからなかった場合、列挙は空になります。 &lt;code&gt;URL&lt;/code&gt; を構築できないリソース、無条件に開かれないパッケージ内にあるリソース、またはリソースへのアクセスがセキュリティマネージャによって拒否されたリソースは、列挙に返されません。</target>
        </trans-unit>
        <trans-unit id="c4aa7c7e628d57532a1c1360001ee6ef0f7ef010" translate="yes" xml:space="preserve">
          <source>An enumeration of URL to the resource. If no resources could be found, the enumeration will be empty. Resources that cannot be accessed will not be in the enumeration.</source>
          <target state="translated">リソースへのURLの列挙。リソースが見つからなかった場合、列挙は空になります。アクセスできなかったリソースは列挙に含まれません。</target>
        </trans-unit>
        <trans-unit id="972c3ecf0f6d294560645ad0152e0b96dfe86d5d" translate="yes" xml:space="preserve">
          <source>An enumeration of all prefixes declared in this context.</source>
          <target state="translated">このコンテキストで宣言されたすべての接頭辞の列挙。</target>
        </trans-unit>
        <trans-unit id="c7c82bf812c482004d1f9302f36864a703f8a452" translate="yes" xml:space="preserve">
          <source>An enumeration of cryptographic primitives.</source>
          <target state="translated">暗号プリミティブの列挙。</target>
        </trans-unit>
        <trans-unit id="3c599ebb10cb28e1d50286b7d6b5285431d25dc4" translate="yes" xml:space="preserve">
          <source>An enumeration of prefixes (never empty).</source>
          <target state="translated">接頭辞の列挙(決して空ではない)。</target>
        </trans-unit>
        <trans-unit id="beb61a541e74ed1490f0ce4684e113edb340aa12" translate="yes" xml:space="preserve">
          <source>An enumeration of resource &lt;a href=&quot;../net/url&quot;&gt;&lt;code&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/code&gt;&lt;/a&gt; objects</source>
          <target state="translated">リソース&lt;a href=&quot;../net/url&quot;&gt; &lt;code&gt;&lt;code&gt;URL&lt;/code&gt;&lt;/code&gt; &lt;/a&gt;オブジェクトの列挙</target>
        </trans-unit>
        <trans-unit id="5b1bbcd62e9dcad9208070b0e973cdfb3e7928f4" translate="yes" xml:space="preserve">
          <source>An enumeration of the locale-independent names of any attributes that have been registered with setValue.</source>
          <target state="translated">setValueで登録された属性のロケールに依存しない名前の列挙。</target>
        </trans-unit>
        <trans-unit id="29e2704be2953d37a8545731362f63d4a79c7d38" translate="yes" xml:space="preserve">
          <source>An enumeration that is always empty.</source>
          <target state="translated">常に空の列挙。</target>
        </trans-unit>
        <trans-unit id="95b41c5fed367e1bfb6b8a6fb22cabd1cd54d069" translate="yes" xml:space="preserve">
          <source>An enumeration that is always empty. This is used when an enumeration of a leaf node's children is requested.</source>
          <target state="translated">常に空の列挙。これは、リーフノードの子の列挙が要求されたときに使用されます。</target>
        </trans-unit>
        <trans-unit id="e1cf31d30f0363d049af71ea9bc4b7662716d534" translate="yes" xml:space="preserve">
          <source>An environment parameter passed to the &lt;code&gt;getReferralContext()&lt;/code&gt; method is owned by the caller. The service provider will not modify the object or keep a reference to it, but may keep a reference to a clone of it.</source>
          <target state="translated">&lt;code&gt;getReferralContext()&lt;/code&gt; メソッドに渡される環境パラメーターは、呼び出し元が所有します。サービスプロバイダーは、オブジェクトを変更したり、オブジェクトへの参照を保持したりすることはありませんが、そのクローンへの参照を保持する場合があります。</target>
        </trans-unit>
        <trans-unit id="6a7ccaa3a7ec3ff763316d8e680b3fdfb618f512" translate="yes" xml:space="preserve">
          <source>An environment property with this name is ignored while constructing an initial context.</source>
          <target state="translated">この名前を持つ環境プロパティは、初期コンテキストの構築時には無視されます。</target>
        </trans-unit>
        <trans-unit id="ae44f8dec7d500240d4c81cd64385e9c31bdede4" translate="yes" xml:space="preserve">
          <source>An environment property with this name is ignored while constructing an initial context. This constant was originally used as a property name to specify an &lt;code&gt;Applet&lt;/code&gt; to retrieve parameters from, when creating an initial context. Currently any applet properties that need to be passed to an initial context should be copied into the environment hashtable:</source>
          <target state="translated">この名前の環境プロパティは、初期コンテキストの構築中に無視されます。この定数は元々、初期コンテキストを作成するときに、パラメータを取得する &lt;code&gt;Applet&lt;/code&gt; を指定するためのプロパティ名として使用されていました。現在、初期コンテキストに渡す必要のあるアプレットプロパティは、環境ハッシュテーブルにコピーする必要があります。</target>
        </trans-unit>
        <trans-unit id="b22a21850580a5551005539ab74ecbda9d89d23e" translate="yes" xml:space="preserve">
          <source>An equivalent sequence of increasing values can be produced sequentially using a &lt;code&gt;for&lt;/code&gt; loop as follows:</source>
          <target state="translated">次のように &lt;code&gt;for&lt;/code&gt; ループを使用して、値が増加する同等のシーケンスを順次生成できます。</target>
        </trans-unit>
        <trans-unit id="59d3ef78fc9c324103ebb73b6e078ae2c9c1219c" translate="yes" xml:space="preserve">
          <source>An equivalent way to find the caller class using the &lt;a href=&quot;#walk(java.util.function.Function)&quot;&gt;&lt;code&gt;walk&lt;/code&gt;&lt;/a&gt; method is as follows (filtering the reflection frames, &lt;code&gt;MethodHandle&lt;/code&gt; and hidden frames not shown below):</source>
          <target state="translated">&lt;a href=&quot;#walk(java.util.function.Function)&quot;&gt; &lt;code&gt;walk&lt;/code&gt; &lt;/a&gt;メソッドを使用して呼び出し元クラスを見つける同等の方法は次のとおりです（反射フレーム、 &lt;code&gt;MethodHandle&lt;/code&gt; 、および以下に示されていない非表示フレームのフィルタリング）。</target>
        </trans-unit>
        <trans-unit id="b6c23e72efac7e28cf201277fb81153f3033c863" translate="yes" xml:space="preserve">
          <source>An era in the Hijrah calendar system.</source>
          <target state="translated">ヒジュラ暦の時代。</target>
        </trans-unit>
        <trans-unit id="8a0fe9ecc4a131e9eec25ea069d34eb24113bc18" translate="yes" xml:space="preserve">
          <source>An era in the ISO calendar system.</source>
          <target state="translated">ISOカレンダーシステムの時代。</target>
        </trans-unit>
        <trans-unit id="62bcbe9eaf8ff0c4c4424e1daeeaa0dddaa8dc82" translate="yes" xml:space="preserve">
          <source>An era in the Japanese Imperial calendar system.</source>
          <target state="translated">日本の皇室暦制度の時代。</target>
        </trans-unit>
        <trans-unit id="839edb94c79947e4491762b5f14252c9ed3b9c74" translate="yes" xml:space="preserve">
          <source>An era in the Minguo calendar system.</source>
          <target state="translated">みんぐう暦制度の時代。</target>
        </trans-unit>
        <trans-unit id="a2374e18a681c155a680850c562b80c5a765732f" translate="yes" xml:space="preserve">
          <source>An era in the Thai Buddhist calendar system.</source>
          <target state="translated">タイ仏教暦制度の一時代。</target>
        </trans-unit>
        <trans-unit id="b31f80db4176959ff8dccbf954da32e245c253aa" translate="yes" xml:space="preserve">
          <source>An era of the time-line.</source>
          <target state="translated">時系列の時代。</target>
        </trans-unit>
        <trans-unit id="067c0f5c310edd94e3f94cccfd0bb9acfb3536a5" translate="yes" xml:space="preserve">
          <source>An error class for reporting factory configuration errors.</source>
          <target state="translated">工場出荷時の設定エラーを報告するためのエラークラス。</target>
        </trans-unit>
        <trans-unit id="4e9dbde61b5dadbc3f242c5dea103b2ac13f5e57" translate="yes" xml:space="preserve">
          <source>An error has occurred.</source>
          <target state="translated">エラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="d7ca5f6bf89613a7136d658e5df9460a22ef1704" translate="yes" xml:space="preserve">
          <source>An error message</source>
          <target state="translated">エラーメッセージ</target>
        </trans-unit>
        <trans-unit id="d2c9844f49fc47e3e1bff256050f8755cc56df33" translate="yes" xml:space="preserve">
          <source>An error occurs when attempting to find a module. Possible errors include I/O errors, errors detected parsing a module descriptor (&lt;code&gt;module-info.class&lt;/code&gt;) or two versions of the same module are found in the same directory.</source>
          <target state="translated">モジュールを見つけようとするとエラーが発生します。考えられるエラーには、I / Oエラー、モジュール記述子（ &lt;code&gt;module-info.class&lt;/code&gt; ）の解析で検出されたエラー、または同じモジュールの2つのバージョンが同じディレクトリにあることが含まれます。</target>
        </trans-unit>
        <trans-unit id="f93c370dd937e05b12088a15093d7d39d1f05bb9" translate="yes" xml:space="preserve">
          <source>An error was encountered while producing the image.</source>
          <target state="translated">画像の作成中にエラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="45f317061a9a0c7b57fdd2378c1b7dca9f0e2867" translate="yes" xml:space="preserve">
          <source>An escape string that does not precede a meta string (quotes or separator) and is not at the end of a component is treated as an ordinary string.</source>
          <target state="translated">メタ文字列(引用符や区切り文字)の前になく、コンポーネントの最後にないエスケープ文字列は、通常の文字列として扱われます。</target>
        </trans-unit>
        <trans-unit id="8f5d7c9f85be083f62fb0eb6020e241a7825b015" translate="yes" xml:space="preserve">
          <source>An escape string within a quoted component acts as an escape only when followed by the corresponding end-quote string. This can be used to embed an escaped quote within a quoted component.</source>
          <target state="translated">引用符で囲まれたコンポーネント内のエスケープ文字列は、対応する引用符終了文字列の後に続く場合にのみ、エスケープとして動作します。これは、引用符で囲まれたコンポーネント内にエスケープされた引用符を埋め込むために使用することができます。</target>
        </trans-unit>
        <trans-unit id="257eb29f69cca491172de9ea2a2e994ea6f408de" translate="yes" xml:space="preserve">
          <source>An escaped escape string is not treated as an escape string.</source>
          <target state="translated">エスケープされたエスケープ文字列は、エスケープ文字列としては扱われません。</target>
        </trans-unit>
        <trans-unit id="756ecddad80be9fd79fa4f500d3a0c72a53e4d6c" translate="yes" xml:space="preserve">
          <source>An estimate of the area that will be updated by the pass is indicated by the &lt;code&gt;minX&lt;/code&gt;, &lt;code&gt;minY&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, and &lt;code&gt;height&lt;/code&gt; parameters. If the pass is interlaced, that is, it only updates selected rows or columns, the &lt;code&gt;periodX&lt;/code&gt; and &lt;code&gt;periodY&lt;/code&gt; parameters will indicate the degree of subsampling. The set of bands that may be affected is indicated by the value of &lt;code&gt;bands&lt;/code&gt;.</source>
          <target state="translated">パスによって更新される領域の推定値は、 &lt;code&gt;minX&lt;/code&gt; 、 &lt;code&gt;minY&lt;/code&gt; 、 &lt;code&gt;width&lt;/code&gt; 、および &lt;code&gt;height&lt;/code&gt; パラメーターで示されます。パスがインターレースされている場合、つまり選択された行または列のみが更新される場合、 &lt;code&gt;periodX&lt;/code&gt; および &lt;code&gt;periodY&lt;/code&gt; パラメータはサブサンプリングの程度を示します。影響を受ける可能性があるバンドのセットは、の値で示される &lt;code&gt;bands&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6aec68a524e95cbe65d72e0400144f46b19e4f5b" translate="yes" xml:space="preserve">
          <source>An estimate of the memory that the Java virtual machine is using for this buffer pool in bytes, or &lt;code&gt;-1L&lt;/code&gt; if an estimate of the memory usage is not available</source>
          <target state="translated">Java仮想マシンがこのバッファー・プールに使用しているメモリーの見積もり（バイト単位）、またはメモリー使用量の見積もりが使用できない場合は &lt;code&gt;-1L&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="35a86aad05409a4443ef8f7c26a0ae5b2623f6c1" translate="yes" xml:space="preserve">
          <source>An estimate of the number of buffers in this pool</source>
          <target state="translated">このプールのバッファの数の推定値</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
